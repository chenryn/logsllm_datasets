b
C
e
g
h
1
klnno
9
I
S
t
U
A
W
X
y
Z
A
B
C
A
A
A
A
C
F
E
6
Q
0
0
D
4
D
a
6
1
Figuere 5I. Unicode letter clhzracters in eight-bit address space
Following is an example of how to replace all instances of the word *cat” with °dog*
in JavaScript. It correctly accounts for common, accented characters, so ecat is not
altered. To do this, you'll need to construct your own character class instead of relying
on the built-in  or  to achieve the same effect. Each of the words
simply matches itself.
Since the words are surrounded on both sides by word boundaries, they can appear in
any order. Without the word boundaries, however, it might be important to put longer
words first; otherwise, you’d never find “awesome” when searching for awe ane
somes. The regex would always just match the *awe” at the beginning of the word.
Because the regex engine attempts to match each word in the list from
left to right, you might see a very slight pefomance gain by placing the
 words that are most likely to be found in the subject text near the be-
ginning of the list.
1no auo tuqoieu anesuouap aeoaust on sueau st uossaudxs eqnlau sq1eq1 anon
of a list of words. Because both the  and three in this example start with the same
letter, you can more efficiently guide the regular expression engine by rewriting the
regex as \b(?:one|t(?:wo hree))b). Don't go crazy with such hand-tuning, though.
Most regex engines try to perform this optimization for you automatically, at least in
simple cases. See Recipe 5.3 for more examples of how to efficiently match one out of
a list of similar words.
5.2 Find Any of Multiple Werds | 335
---
## Page 352
Example JavaScript solution
The JavaScript example matches the same list of words in two different ways. The first
approach is to simply create the regex and search the subject string using the match()
method that is available for JavaScript strings. When the match() method is passed a
regular expression that uses the /g (global) flag, it returms an array of all matches found
in the string, or null if no match is found.
The second approach creates a function called matchuords() that accepts a string to
search within and an array of words to search for. The function first ecapes any regex
metacharacters that might exist in the provided words (see Recipe 2. 1), and then splices
the word list into a new regular expression. That regex is then used to search the string
for all of the target words at once, rather than searching for words one at a time in a
loop. The function returns an array of any matches that are found, or an empty array
if the generated regex doesn’t match the string at all. The desired words can be matched
in any combination of upper- and lowercase, thanks to the use of the case-insensitive
 (/i) flag.
See Also
This chapter has a variety of recipes that deal with matching words. Recipe 5.1 explains
Recipe 5.4 explains how to find all except a specific word.
how to find a specific word. Recipe 5.3 explains how to find similar words.
Recipe 4.11 shows how to validate affirmative responses, and similarly matches any of
several words.
Some programming languages have a built-in function for escaping regular expression
metacharacters, as explained in Recipe 5.14.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.6 explains word boundaries. Recipe 2.8 explains altermation. Recipe 2.9 ex-
plains grouping.
5.3FindSimilarWords
Problem
You have several problems in this case:
•You want to find all occurrences of both color and colour in a string.
•You want to find any of three words that end with *at": bat, cat, or rat.
• You want to find any word ending with phobia.
▪ You want to find common variations on the name “Steven?: Steve, Steven, and
Stephen.
•You want to match any common form of the term *regular expression."
336 | Chapter 5: Words, Lines, and Special Characters
---
## Page 353
Solution
Regular expressions to solve each of the problems just listed are shown in turm. All of
these solutions are listed with the case insensitive option.
Color or colour
\bcolou?r\b
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Bat, cat, or rat
b[bcr]at\b
Regexoptions: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Words ending with ~phobia
\b\w*phobia\b
Regex options: Case insensitive
Regexflaver: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Steve, Steven, or Stephen
\bSte(?:ven?Iphen)\b
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Variations of “regular expressiona
\breg(?:ularexpressions?|ex(?:ps?|e[sn]))\b
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
Use word boundaries to match complete words
All five of these regular expressions use word boundaries (bs) to ensure that they
match only complete words. The patterns use several different approaches to allow
variation in the words that they match.
Let’s take a closer look at each one.
5.3 Find SimilarWerds | 337
---
## Page 354
Color orcolour
This regular expression will match color or colour, but will not match within
colorblind. It uses the ?> quantifier to make its preceding u optional. Quantifiers such
as ?> do not work like the wildcards that many people are more familiar with. Instead,
they bind to the immediately preceding element, which can be either a single token (in
this case, the literal character u) or a group of tokens wrapped in parentheses. The ?
quantifier repeats the preceding element zero or one time. The regex engine first tries
to match the element that the quantifier is bound to, and if that doesn’r work, the engine
moves forward without matching it. Any quantifier that allows zero repetitions effec-
tively makes the preceding element optional, which is exactly what we want here.
Bat, cat, or rat
This regular expression uses a character class to match b, c, or r, followed by the literal
characters at. You could do the same thing using ^b(?:b|c|r)at\b), .
This regular expression matches, for example, arachnophobia and hippopotononstro
sesquipedaliophobia. Because the * allows zero repetitions, i also matches phobia on
its own. If you want to require at least one word character before the *phobia* suffix,
change the (*) to (+),
Steve, Steven, or Stephen
Here we add alternation to the mix as yet another means for regex variation. A non-
ado uorane  u po qoeau aui s ~ se uanum dno uudes
The ?> quantifier used inside the group’s first altermation option makes the preceding
(n character optional. This improves efficiency (and brevity) versus the equivalent
\bSte(?:ve| venIphen)b. The same principle explains why the literal sting Ste ap-
pears at the front of the regular expression, rather than being repeated three times as
backtracking regular expression engines are not smart enough to figure out that any
with \b(?:Steve |Steven |Stephen)\b) Or . Some
text matched by these latter regexes must start with Ste. Instead, as the engine steps
through the subject string looking for a match, it will first find a word boundary, then
check the following character to see if it is an S. If not, the engine must try all alternative
paths through the regular expression before it can move on and start over again at the
next position in the sring. Although it’s easy for a human to see that this would be a
waste of effort (since the alternative paths through the regex all start with Ste), the
engine doesn’t know this. If instead you write the regex as ^bSte(?:ven?| phen) \b>, the
engine immediately realizes that it cannot match any string that does not start with
those characters.
For an in-depth look under the hood of a backtracking regular expression engine, see
Recipe 2.13.
Variations of *regular expressiona
The final example for this recipe mixes altermation, character classes, and quantifiers
eqnsau aq aous uoissadxa 1eqnsau, tua1 su jo uojeuea uouuoo Kue qpieu o1
expression can be a bit difficult to take in at a glance, let's break it down and examine
each of its parts.
This next regex uses the free-spacing option, which is not available in standard
JavaScript. Since whitespace is ignored in free-spacing mode, the literal space character
has been escaped with a backslash:
---
## Page 356
# Assert position at a word boundary-
reg
# Match "reg"-
(?:
# Group but don’t capture:
ular\
Hatch “ular *.
expressions?
Match "expression* or *expressions*,
#
Or :
ex
#
Ratch "ex".
(?:
#
Group but don’t capture:
ps?
',sd, xo _d, yoen
#
Or:
e[sn]
Match “es" or “en".
)？
# End the group.
End the group and make it optional.
# Assert position at a word boundary-
Regex options: Free-spacing, case insensitive 
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
This patern matches any of the followingseven strings, with any combination of uper-