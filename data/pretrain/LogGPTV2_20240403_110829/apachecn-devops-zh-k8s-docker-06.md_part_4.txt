1.  您可以通过执行以下命令来创建快速 NGINX 部署:
    ```
    kubectl run nginx-web --image bitnami/nginx
    ```
2.  To create a new service that will use the LoadBalancer type, you can create a new manifest or you can expose the deployment using only kubectl.
    要创建清单，创建一个名为`nginx-lb.yaml`的新文件，并添加以下内容:
    ```
    apiVersion: v1
    kind: Service
    metadata:
      name: nginx-lb
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        run: nginx-web
      type: LoadBalancer
    ```
3.  使用 kubectl 将文件应用到集群:
    ```
    kubectl apply -f nginx-lb.yaml
    ```
4.  To verify that the service was created correctly, list the services using `kubectl get services`:
    ![Figure 6.7 – Kubectl service output ](img/Fig_6.7_B15514.jpg)
    图 6.7-立方服务输出
    您将看到使用负载平衡器类型创建了一个新的服务，MetalLB 从我们之前创建的配置池中分配了一个 IP 地址。
    快速查看控制器日志将验证 MetalLB 控制器是否为服务分配了 IP 地址:
    ```
    {"caller":"service.go:114","event":"ipAllocated","ip":"172.16.200.100","msg":"IP address assigned by controller","service":"default/nginx-lb","ts":"2020-04-25T23:54:03.668948668Z"}
    ```
5.  Now you can test the service by using `curl` on the Docker host. Using the IP address that was assigned to the service and port 8080, enter the following command:
    ```
    curl 172.17.200.100:8080
    ```
    您将收到以下输出:
![Figure 6.8 – Curl output to the LoadBalancer service running NGINX ](img/Fig_6.8_B15514.jpg)
图 6.8–运行 NGINX 的负载平衡器服务的 Curl 输出
向集群添加 MetalLB 允许您公开应用，否则无法使用第 7 层平衡器公开这些应用。将第 7 层和第 4 层服务都添加到集群中，可以让您公开几乎任何您能想到的应用类型，包括数据库。如果您想为服务提供不同的 IP 池，该怎么办？在下一节中，我们将解释如何使用注释创建可分配给服务的多个 IP 池，从而允许您为服务分配一个 IP 范围。
## 向 MetalLB 添加多个 IP 池
可能会有种情况，您需要为集群上的特定工作负载提供不同的子网。一种情况可能是，当您在网络上为您的服务创建一个范围时，您低估了将创建的服务数量，并且您用完了 IP 地址。
根据您使用的原始范围，您可以根据您的配置增加范围。如果无法扩展现有范围，则需要先创建新范围，然后才能创建任何新的负载平衡器服务。您还可以向默认池中添加额外的 IP 范围，但是对于本例，我们将创建一个新池。
我们可以编辑配置文件并将新的范围信息添加到文件中。使用原始的 YAML 文件，`metallb-config.yaml`，我们需要在下面的代码中添加粗体文本:
```
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: |
    address-pools:
    - name: default
      protocol: layer2
      addresses:
      - 172.17.200.100-172.17.200.125
    - name: subnet-201
      protocol: layer2
      addresses:
      - 172.17.201.100-172.17.201.125
```
使用`kubectl`应用更新的配置图:
`kubectl apply -f metallb-config.yaml`
更新后的配置映射将创建一个名为子网-201 的新池。MetalLB 现在有两个池可以用来为服务分配 IP 地址:默认的和子网-201。
如果用户创建了负载平衡器服务，但没有指定池名称，Kubernetes 将尝试使用默认池。如果请求的池地址不足，服务将处于挂起状态，直到有地址可用。
要从第二个池创建新服务，您需要向服务请求添加注释。使用我们的 NGINX 部署，我们将创建第二个名为`nginx-web2`的服务，该服务将从子网 201 池中请求一个 IP 地址:
1.  创建一个名为`nginx-lb2.yaml`的新文件，其内容如下:
    ```
    apiVersion: v1
    kind: Service
    metadata:
      name: nginx-lb2
      annotations:
        metallb.universe.tf/address-pool: subnet-201  
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        run: nginx-web
      type: LoadBalancer
    ```
2.  要创建新服务，使用 kubectl 部署清单:
    ```
    kubectl apply -f nginx-lb2.yaml
    ```
3.  To verify that the service was created with an IP address from the subnet-201 pool, list all of the services:
    ```
    kubectl get services
    ```
    您将收到以下输出:
    ![Figure 6.9 – Example services using LoadBalancer   ](img/Fig_6.9_B15514.jpg)
    图 6.9–使用负载平衡器的示例服务
    列表中的最后一项服务是我们新创建的`nginx-lb2`服务。我们可以确认它已被分配了一个外部 IP 地址 172.17.20.100，该地址来自子网 201 池。
4.  最后，我们可以通过在 Docker 主机上使用`curl` 命令，对端口 8080 上分配的 IP 地址测试服务:
![Figure 6.10 – Curl NGINX on a LoadBalancer using a second IP pool ](img/Fig_6.10_B15514.jpg)
图 6.10–使用第二个 IP 池在负载平衡器上卷曲 NGINX
能够提供不同的地址池允许您为服务分配一个已知的 IP 地址块。您可以决定地址池 1 用于 web 服务，地址池 2 用于数据库，地址池 3 用于文件传输，等等。一些组织这样做是为了根据 IP 分配来识别流量，从而更容易跟踪通信。
向集群添加第 4 层负载平衡器允许您迁移可能无法处理简单的第 7 层流量的应用。
随着越来越多的应用被迁移或重构为容器，您将会遇到许多需要多个协议来实现单个服务的应用。在本地，如果您试图创建一个同时具有 TCP 和 UDP 端口映射的服务，您将收到一个错误，即服务对象不支持多种协议。这可能不会影响许多应用，但是为什么您应该局限于一个服务的单个协议呢？
### 使用多种协议
到目前为止我们所有的例子都使用了一个 TCP 作为协议。当然，MetalLB 也支持使用 UDP 作为服务协议，但是如果您有一个服务要求您同时使用这两种协议呢？
## 多个协议问题
并非所有服务类型都支持为单个服务分配多个协议。下表显示了三种服务类型及其对多种协议的支持:
![](img/Table_7.jpg)
表 6.6–服务类型协议支持
如果您试图创建同时使用这两种协议的服务，您将收到一条错误消息。我们在以下错误消息中突出显示了该错误:
```
The Service "kube-dns-lb" is invalid: spec.ports: Invalid value: []core.ServicePort{core.ServicePort{Name:"dns", Protocol:"UDP", Port:53, TargetPort:intstr.IntOrString{Type:0, IntVal:53, StrVal:""}, NodePort:0}, core.ServicePort{Name:"dns-tcp", Protocol:"TCP", Port:53, TargetPort:intstr.IntOrString{Type:0, IntVal:53, StrVal:""}, NodePort:0}}: cannot create an external load balancer with mix protocols
```
我们试图创建的服务将使用负载平衡器服务向外部 IP 公开我们的核心域名系统服务。我们需要为 TCP 和 UDP 公开端口 50 上的服务。
MetalLB 支持绑定到单个 IP 地址的多种协议。配置需要创建两个不同的服务，而不是一个单独的服务，这在开始可能会显得有些奇怪。正如我们之前所展示的，应用编程接口服务器不允许您创建具有多个协议的服务对象。解决这个限制的唯一方法是创建两个不同的服务:一个分配了 TCP 端口，另一个分配了 UDP 端口。
使用我们的 CoreDNS 示例，我们将逐步创建一个需要多个协议的应用。
## 使用 MetalLB 的多个协议
为了支持同时需要 TCP 和 UDP 的应用，您需要创建两个独立的服务。如果您一直在密切关注服务是如何创建的，您可能已经注意到每个服务都会收到一个 IP 地址。从逻辑上讲，这意味着当我们为应用创建两个服务时，我们会收到两个不同的 IP 地址。
在我们的示例中，我们希望将 CoreDNS 公开为负载平衡器服务，这需要 TCP 和 UDP 协议。如果我们创建了两个标准服务，每个服务定义了一个协议，我们将收到两个不同的 IP 地址。您将如何配置系统以使用需要两个不同 IP 地址进行连接的 DNS 服务器？
简单的回答就是，**你不能**。
但是我们刚刚告诉您，您的 MetalLB 支持这种类型的配置。请继续关注我们——我们正在通过首先解释 MetalLB 将为我们解决的问题来逐步解释这一点。
当我们创建之前从子网-201 IP 池中提取的 NGINX 服务时，我们通过在负载平衡器清单中添加注释来实现。MetalLB 通过为**共享 IP 添加注释，增加了对多种协议的支持。**
## 使用共享 IP
现在您已经理解了 Kubernetes 中多协议支持的局限性，让我们使用 metalllb 向外部请求公开我们的 CoreDNS 服务，同时使用 TCP 和 UDP。
正如我们前面提到的，Kubernetes 不允许您用两种协议创建一个服务。要让一个负载平衡的 IP 同时使用两种协议，您需要为两种协议创建一个服务，一个用于 TCP，另一个用于 UDP。每个服务都需要一个注释，MetalLB 将使用这个注释为两个服务分配相同的 IP。
对于每个服务，您需要为`metallb.universe.tf/allow-shared-ip`注释设置相同的值。我们将覆盖一个完整的示例来公开 CoreDNS，以解释整个过程。
重要说明
大多数 Kubernetes 发行版使用 CoreDNS 作为默认的域名系统提供者，但是其中一些仍然使用 kube-dns 作为默认域名系统提供者时的服务名。KinD 是一开始可能会让您感到困惑的发行版之一，因为服务名称是 kube-dns，但是请放心，部署使用的是 CoreDNS。
那么，让我们开始吧:
1.  First, look at the services in the `kube-system` namespace:
    ![Figure 6.11 – Default service list for kube-system ](img/Fig_6.11_B15514.jpg)
    图 6.11–kube 系统的默认服务列表
    我们唯一的服务是默认的`kube-dns`服务，使用集群 IP 类型，这意味着它只能由集群内部访问。
    您可能已经注意到该服务支持多种协议，同时分配了端口 UDP 和 TCP。请记住，与负载平衡器服务不同，集群 IP 服务**可以被分配多个协议。**
***   The first step to add LoadBalancer support to our CoreDNS server is to create two manifests, one for each protocol.
    我们将首先创建 TCP 服务。创建一个名为`coredns-tcp.yaml`的文件，并添加以下示例清单中的内容。请注意，CoreDNS 的内部服务正在使用`k8s-app: kube-dns`选择器。由于我们公开了相同的服务，这就是我们将在清单中使用的选择器:
    ```
    apiVersion: v1
    kind: Service
    metadata:
      name: coredns-tcp
      namespace: kube-system
      annotations: