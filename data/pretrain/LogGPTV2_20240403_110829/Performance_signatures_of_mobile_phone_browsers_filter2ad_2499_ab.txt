of an updated version of the operating system. Therefore, we
model our ﬁngerprint signatures as tuples representing the device
type, browser and operating system version. Each tuple ﬁngerprint
signature is represented with at most a 24-dimensional vector that
is saved in our database. We collected browser signatures of over
40 different tuples which were enough to ﬁnd deviations between
browsers of popular smartphones of various types. While our
collected data is small to draw any statistical conclusions, we
established consistency in browser deviations that were novel to
distinguish browsers on the tested devices.
We customized the 24 test scripts for browser ﬁngerprinting
to target speciﬁc browser engine features and revisions.
For
optimization purposes, only 10 test scripts are chosen at run-time
upon a website visit to ensure the total execution time of the chosen
test scripts is under a minute. The 10 test scripts are chosen so that
the resulting 10-dimensional vector contains enough measurements
of the browser script engines that can identify the tested browser.
Finally, the resulting vector is compared to the existing browser
signatures collected in our database for detection purposes.
2.3 Detecting Browser Signatures
In our experiments, we examine three different detection
methods that compare the ﬁngerprinting signature of the tested
browser with existing browser signatures from our database:
(1) Euclidean Distance: The signature of each tuple in our
database is represented by a 24-dimensional vector space. We
measured the Euclidean distances among all the vectors to ﬁnd
correlations between different browsers running on the same device
or the same browser running of different devices. To classify
an unknown vector that is composed of a 10-dimensional vector,
we compute the Euclidean distance between the unknown vector
and the 10-dimensional vector of the existing tuple signatures
that match the tested ﬁngerprinting scripts. We then choose the
tuple that has the minimum Euclidean distance with respect to the
unknown vector according to the equation:
Euclidean Distance (A, B) =(cid:112)Σ(Ai − Bi)2
(2) Cosine Similarity: We use this measurement to identify
any scaling correlation that may exist among the existing vector
signatures along with the unknown vector. As with some browser
versions of Chrome, the execution times of some test scripts were
consistently scaling when tested on faster devices. The cosine
similarity is a good indicator for such cases especially that the
Euclidean distance may fail to detect such correlation. Finally,
after we measure the cosine similarity of the unknown vector with
respect to the existing tuple signatures, we choose the tuple with
the highest correlation, that is, with cosine similarity closest to 1,
computed using the equation:
−→
B ) =
Cosine Similarity(
(3) Voting System: This test measures the differences among
every dimension of the compared signature vectors and votes for
the closest value tuple (minimum difference per dimension). The
votes are then combined from each vector dimension to classify the
unknown vector with the highest number of votes.
−→
A .
(cid:107)A(cid:107)(cid:107)B(cid:107) =
−→
A ,
−→
B
√
√
ΣAi×Bi
i ×
ΣA2
ΣB2
i
1408Figure 1:
milliseconds.
Sample Javascript
signatures measured in
Figure 2: Sample graphical signatures measured in frames per
second (fps).
For each of the above tests, we set a threshold that indicates
whether or not the resulted classiﬁcation of the unknown vector
is to be considered.
This threshold limits down any tuple
misclassiﬁcation and indicates whether or not the tested browser is
pre-deﬁned in our existing set of browser signatures. If the browser
under testing does not pass any preset threshold, we classify the
browser as unknown and add it to our collection of unknown
browser signatures which is later added to our database once we
conﬁrm the device tuple information.
3. RESULTS
To clearly determine the differences in web browser script
engines, we here examine the ability of our ﬁngerprinting scripts
to exploit a unique browser execution signature for each tuple
(browser, device type, operating system version). To create the
ﬁngerprinting signature of each browser per device, we executed
the complete set of ﬁngerprinting scripts (24 scripts) on each
browser 10 times and averaged the resulted vector dimensions. Our
dataset provides enough signatures of Safari (for Apple devices),
Internet explorer (for Windows phones), Chrome, and Firefox
browsers of popular smartphones. The tested devices include the
Apple iPhones and iPads running iOS v. 5.0.1 to v. 6.1.3, various
Samsung, HTC and Sony devices running Android OS v. 4.0.4 to
v. 4.1.2, in addition to fewer HTC devices running Windows OS
7.5. Figures 1 and 2 show a subset of our browser vector signatures
showing samples of tested devices.
For testing purposes, we set our ﬁngerprinting website to only
choose and run 10 scripts sequentially per visit with a total
execution time to be under a minute. Upon completion,
the
10-dimensional vector is uploaded for tuple determination using
the three detection methods discussed in Section 2. Table 1 displays
the accuracy of the three detection methods on a subset of the tested
devices available in our database records.
4. CONCLUSION
In this paper we introduced a dynamic ﬁngerprinting technique
for mobile web browsers that makes use of the performance
differences in browser script engines in order to obtain unique
browser signatures. Our technique takes advantage of the execution
time differences between instructions sequences used in Javascript,
HTML5, Flash and times the performance of operations in the
core mobile browser script engines. Such differences can not only
distinguish the browser but also the mobile device and the operating
system version.
Table 1: Detection rates of ﬁngerprint signatures of sample
mobile browsers.
iPhone 5 iOS 6.1.3 Chrome
iPhone 5 iOS 6.1.3 Safari
iPhone 4S iOS 6.1.2 Chrome
iPhone 4S iOS 6.1.2 Safari
iPhone 4 iOS 6.01 Safari
iPhone 4 iOS 6.01 Chrome
Galaxy SII Android 4.0.4 Chrome
Galaxy SII Android 4.0.4 Firefox
HTC Inspire Android 2.3.3 Chrome
HTC HD7 Windows Phone 7.5 IE
Euclidean
Distance
87.1%
92.2 %
76.8 %
83 %
89.4 %
79.6 %
77.8 %
67.2 %
71.3 %
78.7 %
Cosine
Similarity
Voting
System
76.6 % 79.8 %
86.3 % 87.4 %
78.5 % 88.2 %
74.3 % 79.9 %
86.1 % 89.4 %
91.7 % 86.3 %
68.5 %
79 %
72.8 % 69.6 %
81.7 % 76.8 %
72 % 76.9 %
5. REFERENCES
[1] P. Eckersley. How unique is your web browser? In
Proceedings of the 10th international conference on Privacy
enhancing technologies, PETS’10, pages 1–18, Berlin,
Heidelberg, 2010. Springer-Verlag.
[2] J.-L. Gasse and F. Filloux. Measuring time spent on a web
page, 2010.
[3] K. Mowery, D. Bogenreif, S. Yilek, and H. Shacham.
Fingerprinting information in JavaScript implementations. In
Proceedings of Web 2.0 Security and Privacy 2011 (W2SP),
San Franciso, May 2011.
[4] N. Nikiforakis, L. Invernizzi, A. Kapravelos, S. Van Acker,
W. Joosen, C. Kruegel, F. Piessens, and G. Vigna. You are
what you include: large-scale evaluation of remote javascript
inclusions. In Proceedings of the 2012 ACM conference on
Computer and communications security, CCS ’12, pages
736–747, Raleigh, NC, USA, 2012. ACM.
[5] L. Olejnik, C. Castelluccia, and A. Janc. Why Johnny Can’t
Browse in Peace: On the Uniqueness of Web Browsing
History Patterns. In 5th Workshop on Hot Topics in Privacy
Enhancing Technologies (HotPETs), Vigo, July 2012.
[6] T.-F. Yen, Y. Xie, F. Yu, R. P. Yu, , and M. Abadi. Host
ﬁngerprinting and tracking on the web:privacy and security
implications. In Proceedings of the 19th Annual Network and
Distributed System Security Symposium (NDSS), 2012.
1409