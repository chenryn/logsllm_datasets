### Optimized Text

#### Introduction to the B+-Tree and Indexes
The indexes introduced in Section 2 can create confusion. Below is a list of names with their corresponding indexes:

| Index | Name   |
|-------|--------|
| 0     | Elvis  |
| 1     | Chris  |
| 2     | Gary   |
| 3     | Bob    |
| 4     | Donna  |
| 5     | Frank  |
| 6     | Henry  |
| 7     | Ian    |
| 8     | Alice  |
| 9     | Bob    |
| 10    | Chris  |
| 11    | Donna  |
| 12    | Elvis  |
| 13    | Frank  |
| 14    | Gary   |
| 15    | Henry  |
|       | John   |
|       | Ian    |

### B+-Tree Table
| ID | Node             | Encrypted B+-tree Table | ID | C                   |
|----|------------------|-------------------------|----|---------------------|
| 0  | (1,Elvis,2, , )   | SeCS0U/7ZIY.A           | 0  |                     |
| 1  | (3,Chris,4, , )   | /WKu5y8laqK82           | 1  |                     |
| 2  | (5,Gary,6, , )    | jzKzVi0D1as8E           | 2  |                     |
| 3  | (7,Bob,8, , )     | AXYaqohgyVObU           | 3  |                     |
| 4  | (9,Donna,10, , )  | IUf7R.PK5h5fU           | 4  |                     |
| 5  | (11,Frank,12, , ) | rzaslxohWS2l2           | 5  |                     |
| 6  | (13,Henry,14, , ) | EXITGCUlYTVBc           | 6  |                     |
| 7  | (Alice, ,8)       | uOtdm/HDXNSqU           | 7  |                     |
| 8  | (Bob, ,9)         | GLDWRnBGIvYBA           | 8  |                     |
| 9  | (Chris, ,10)      | a9yl36PA3LeLk           | 9  |                     |
| 10 | (Donna, ,11)      | H6GwdJpXiU8MY           | 10 |                     |
| 11 | (Elvis, ,12)      | uOtdm/HDXNSqU           | 11 |                     |
| 12 | (Frank, ,13)      | zj33kVaNvLFVk           | 12 |                     |
| 13 | (Gary, ,14)       | V9rMw904cix3w           | 13 |                     |
| 14 | (Henry, ,15)      | xTFcWtd6.IE.A           | 14 |                     |
| 15 | (Ian,John, )      | ji.gtDER6Hjis            | 15 |                     |

**Figure 5: An example of a B+-tree on the attribute "Customer" (a) and the corresponding tabular and encrypted representation (b).**

### Advantages and Drawbacks
The advantage of this solution is that the content of the B+-tree nodes is not visible to the untrusted DBMS. However, the drawback is that B+-tree traversal can now only be performed by the trusted front end. To execute an interval query, the front end must perform a sequence of queries to retrieve tree nodes at progressively deeper levels. Once the leaf is reached, the node IDs in the leaf can be used to retrieve the tuples belonging to the interval.

For example, to retrieve all customers whose names start with a letter in the interval D-F using the B+-tree, the front end will produce a sequence of queries that access nodes 0, 1, 4, and 10. Subsequent queries will scan the leaves, accessing nodes 10, 11, and 12. In the Appendix, we present a simple cost model to identify the optimal size for the tree node.

### Related Work
Database encryption has long been proposed as a fundamental tool for providing strong security for "data at rest." Thanks to recent advances in processor capabilities and fast encryption techniques, the concept of an encrypted database is well-recognized, and several commercial products are available. However, developing a sound security strategy, including database encryption, still involves many open issues. Key management and security are of paramount importance in any encryption-based system and were among the first issues investigated in the context of database encryption [5].

Techniques have been developed to efficiently query encrypted databases [14], some related to parallel efforts by the text retrieval community [11] for executing hidden queries, where only the ciphertext of the query arguments is made available to the DBMS. Architectural research has also investigated the optimal sharing of the encryption burden between secure storage, communication channels, and the application where the data originates [10], seeking a convenient trade-off between data security and application performance.

Recently, much interest has been devoted to secure handling of database encryption in distributed, web-based execution scenarios, where data management is outsourced to external services [1]. The main goal of this research is to find techniques for delegating data storage and query execution to untrusted servers while preserving efficiency. The index of range technique proposed in [8] relies on partitioning client tables' attributes' domains into sets of intervals. Each remote table attribute value is stored as the index countersigning the interval to which the corresponding plain value belongs. This representation supports efficient evaluation of both equality and range predicates on the remote server but makes it difficult to manage the correspondence between intervals and actual values in the database.

A distinct but related solution is proposed in [1], where smart cards are used for key management.

### Conclusions
In this paper, we proposed a solution for database outsourcing on untrusted servers using a hash-based method for database encryption suitable for selection queries. We also provided a quantitative evaluation of our method's vulnerability, showing that even straightforward direct encryption can provide an adequate level of security against inference attacks, as long as a limited number of index attributes is used.

To execute interval-based queries, we adapted B+-tree structures typically used inside DBMSs to the database-service-provider model.

### Acknowledgments
This work was partially supported by the Italian MURST within the KIWI and MAPS projects.

### References
[1] L. Bouganim and P. Pucheral. Chip-secured data access: Confidential data on untrusted servers. In Proc. of the 28th International Conference on Very Large Data Bases, pages 131–142, Hong Kong, China, August 2002.
[2] S. Ceri, M. Negri, and G. Pelagatti. Horizontal data partitioning in database systems. In Proc. of the ACM SIGMOD International Conference on Management of Data, Orlando, Florida, 1982.
[3] H. Chao, T.Y. Wu, and J. Chen. Security-enhanced packet video with dynamic multicast throughput adjustment. International Journal of Network Management, 11(3):147–159, 2001.
[4] T.H. Cormen, C.E. Leiserson, and R.L. Rivest. Introduction to Algorithms. McGraw-Hill, New York, 1990.
[5] G.I. Davida, D.L. Wells, and J.B. Kam. A database encryption system with subkeys. ACM Transactions on Database Systems, 6(2):312–328, June 1981.
[6] D.E. Denning. Cryptography and Data Security. Addison-Wesley, 1982.
[7] S. Ghandeharizadeh and D. DeWitt. A multiuser performance analysis of alternative declustering strategies. In Proc. of the 6th Int. Conf. on Data Engineering, 1990.
[8] H. Hacigümüs, B. Iyer, C. Li, and S. Mehrotra. Executing SQL over encrypted data in the database-service-provider model. In Proc. of the ACM SIGMOD’2002, Madison, Wisconsin, USA, June 2002.
[9] H. Hacigümüs, B. Iyer, and S. Mehrotra. Providing database as a service. In Proc. of the 18th International Conference on Data Engineering, San Jose, California, USA, February 2002.
[10] C.D. Jensen. Cryptocache: a secure sharable file cache for roaming users. In Proc. of the 9th Workshop on ACM SIGOPS European workshop: beyond the PC: new challenges for the operating system, pages 73–78, Kolding, Denmark, September 2000.
[11] S.T. Klein, A. Bookstein, and S. Deerwester. Storing Text retrieval systems on CD-ROM: compression and encryption considerations. ACM Transactions on Information Systems, 7(3):230–245, July 1989.
[12] B.D. McKay. Practical graph isomorphism. Congressus Numerantium, 30:45–87, 1981.
[13] P. Samarati. Protecting respondent’s privacy in microdata release. IEEE Transactions on Knowledge and Data Engineering, 13(6):1010–1017, November/December 2001.
[14] D.X. Song, D. Wagner, and A. Perrig. Practical techniques for searches on encrypted data. In Proc. of the 2000 IEEE Symposium on Security and Privacy, pages 44–55, Oakland, CA, USA, May 2000.
[15] J.P. Walton. Developing an enterprise information security policy. In Proc. of the 30th annual ACM SIGUCCS Conference on User Services, Providence, Rhode Island, USA, 2002.
[16] J. Ward, M. O’Sullivan, T. Shahoumian, and J. Wilkes. Appia: Automatic storage area network fabric design. In Proc. of the Conference on File and Storage Technologies (FAST 2002), Monterey, CA, January 2002.
[17] E.Y. Yang, J. Xu, and K.H. Bennett. Private information retrieval in the presence of malicious failures. In Proc. of the 26th Annual International Computer Software and Applications Conference, Oxford, England, August 2002.

### Appendix
#### B+-Tree Node Size Configuration
A critical aspect in the design of the B+-tree is the size of the node. When B+-trees are used to build indexes in a DBMS, the size of the I/O block typically defines the size of the node, as the goal is to minimize the number of I/O requests. For B+-trees in this environment, we have greater flexibility, and the size of the node becomes an important configuration parameter.

We build a simplified cost model to tune the node size for a specific environment. The parameters of the model are:
- **Setup cost of a query (KQ)**: The cost for every query execution, including transferring the query from the client to the server, understanding, and executing it.
- **Size of the node (sn)**: The size of the node depends on the number of key values (f), the size of keys (sk), and the size of pointers (sp).
- **Cost for transmission and processing of a bit (Ct)**: We assume this cost to be constant, which is a good approximation for transmission costs and reasonable for processing costs.
- **Number of tuples (N)**: The total number of tuples in the relation R.

The above terms can be used to build a formula that estimates the cost to access one node:
\[ \text{Cost} = KQ + Ct \times (f \times sk + (f + 1) \times sp) \]

When the tree is used to search a value \( k \) among \( N \) tuples, \( \log_f(N) \) tree nodes will be accessed. The following formula estimates the cost required to access a tree leaf:
\[ C = \log_f(N) \times (KQ + Ct \times (f \times sk + (f + 1) \times sp)) \]

The optimal value for \( f \) will be one that minimizes the above cost function. Analytical methods show that the function can be represented by:
\[ C = \frac{\alpha + \beta x}{\log x} \]
where \( \alpha \) and \( \beta \) are positive constants. The function is continuous and diverges at \( x = 1 \) and as \( x \to \infty \). The identification of the minimum can be based on an analytical study of the function.

We compute the function derivative:
\[ \frac{dC}{dx} = \frac{\beta x (\log x - 1) - \alpha}{x \log^2 x} \]

The function \( \frac{dC}{dx} \) presents a single zero in the interval \( (1, \infty) \), which corresponds to the minimum in the cost function \( C \). To identify the optimal \( x \) value in the domain of integers, it is sufficient to compare the two values for \( C \) derived by rounding the minimum obtained by numerical resolution.

For example, with 1,000,000 tuples, 0.01 seconds query setup cost, \( 4 \times 10^{-7} \) seconds/bit transmission cost, 30 bytes for a key, and 2 bytes for a pointer, the optimum is found at \( f = 38 \).