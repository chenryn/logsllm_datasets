2006.
[11] R. Canetti. Universally composable security: A new
In IEEE Sympo-
paradigm for cryptographic protocols.
sium on Foundations of Computer Science, 2001.
[12] D. Champagne and R. B. Lee. Scalable architectural sup-
port for trusted software. In HPCA, 2010.
[13] D. L. Chaum. Untraceable electronic mail, return ad-
dresses, and digital pseudonyms. Communications of the
ACM, 1981.
[14] X. Chen, T. Garﬁnkel, E. Lewis, P. Subrahmanyam,
C. Waldspurger, D. Boneh, J. Dwoskin, and D. Ports.
Overshadow:
a virtualization-based approach to
retroﬁtting protection in commodity operating systems.
In ASPLOS, pages 2–13, 2008.
[15] R. Curtmola, J. A. Garay, S. Kamara, and R. Ostrovsky.
improved deﬁnitions
Searchable symmetric encryption:
and efﬁcient constructions. In ACM CCS(cid:31)06, 2006.
[16] G. Danezis and C. Diaz. A survey of anonymous com-
munication channels. Technical report, Technical Report
MSR-TR-2008-35, Microsoft Research, 2008.
[17] J. Dean and S. Ghemawat. Mapreduce: simpliﬁed data
processing on large clusters. In OSDI, 2014.
[18] J. Demme, R. Martin, A. Waksman, and S. Sethumadha-
van. Side-channel vulnerability factor: a metric for mea-
suring information leakage. In ISCA, 2012.
460  24th USENIX Security Symposium 
USENIX Association
14
[19] R.
Dingledine.
Anonymity
bibliography.
http://freehaven.net/anonbib/.
[20] C. Gentry. Fully homomorphic encryption using ideal lat-
tices. In ACM Symposium on Theory of Computing, May-
June 2009.
[21] C. Gentry and S. Halevi. A working implementation of
fully homomorphic encryption. In EUROCRYPT, 2010.
[22] O. Goldreich and R. Ostrovsky. Software protection and
simulation on oblivious rams. Journal of the ACM, 1996.
Privacy-
preserving access of outsourced data via oblivious ram
simulation. In ICALP, 2011.
[23] M. T. Goodrich and M. Mitzenmacher.
[24] J. A. Halderman, S. D. Schoen, N. Heninger, W. Clark-
son, W. Paul, J. A. Calandrino, A. J. Feldman, J. Appel-
baum, and E. W. Felten. Lest we remember: cold-boot
attacks on encryption keys. Communications of the ACM,
52(5):91–98, 2009.
[25] S. Huang, J. Huang, Y. Liu, L. Yi, and J. Dai. Hibench:
a representative and comprehensive hadoop benchmark
suite. In ICDE workshops, 2010.
[26] M. Isard, M. Budiu, Y. Y. andAndrew Birrell, and D. Fet-
terly. Dryad: Distributed data-parallel programs from se-
quential building blocks. In Eurosys, 2007.
[37] L. Luu, S. Shinde, P. Saxena, and B. Demsky. A model
counter for constraints over unbounded strings. In PLDI,
page 57, 2014.
[38] J. M. McCun, B. Parno, A. Perrig, M. K. Reiter, and
H. Isozaki. Flicker: An execution infrastructure for tcb
minimization. In EuroSys, 2008.
[39] J. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor,
and A. Perrig. Trustvisor: Efﬁcient tcb reduction and at-
testation. In IEEE Symposium on Security and Privacy,
pages 143–158, 2010.
[40] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas,
H. Shaﬁ, V. Shanbhogue, and U. R. Savagaonkar. Inno-
vative instructions and software model for isolated execu-
tion. In HASP, 2013.
[41] D. Molnar, M. Piotrowski, D. Schultz, and D. Wagner.
The program counter security model: Automatic detec-
tion and removal of control-ﬂow side channel attacks. In
Information Security and Cryptology-ICISC 2005, pages
156–168. Springer, 2006.
[42] K. Nayak, X. S. Wang, S. Ioannidis, U. Weinsberg,
N. Taft, and E. Shi. GraphSC: parallel secure compu-
tation made easy.
In IEEE Symposium on Security and
Privacy, 2015.
[27] D. Jiang, G. Chen, B. C. Ooi, K.-L. Tan, and S. Wu. epic:
an extensible and scalable system for processing big data.
In VLDB, 2014.
[43] O. Ohrimenko. Data-oblivious algorithms for privacy-
preserving access to cloud storage. PhD thesis, Brown
University, 2014.
[28] J. Katz and Y. Lindell. Introduction to modern cryptogra-
phy. CRC Press, 2014.
[29] T. Kim, M. Peinado, and G. Mainar-Ruiz. Stealthmem:
system-level protection against cache-based side channel
attacks in the cloud. In USENIX Security, 2012.
[30] M. Klonowski and M. Kutyłowski. Provable anonymity
for networks of mixes. In Information Hiding, pages 26–
38. Springer, 2005.
[31] F. Li, B. C. Ooi, M. T. Ozsu, and S. Wu. Distributed data
management using mapreduce. ACM Computing Survey,
46(6), 2014.
[32] Y. Li, J. McCune, J. Newsome, A. Perrig, B. Baker, and
W. Drewry. Minbox: a two-way sandbox for x86 native
code. In USENIX ATC, 2014.
[33] C. Liu, M. Hicks, A. Harris, M. Tiwari, M. Maas, and
E. Shi. Ghostrider: A hardware-software system for
memory trace oblivious computation, 2015.
[34] C. Liu, M. Hicks, and E. Shi. Memory trace oblivious
In IEEE CSF, pages 51–65. IEEE,
program execution.
2013.
[35] C. Liu, Y. Huang, E. Shi, J. Katz, and M. Hicks. Automat-
ing efﬁcient ram-model secure computation. In Security
and Privacy (SP), 2014 IEEE Symposium on, pages 623–
638. IEEE, 2014.
[36] Y. Low, J. Gonzalez, A. Kyrola, D. Bickson, C. Guestrin,
and J. M. Hellerstein. Distributed graphlab: A framework
for machine learning and data mining in the cloud.
In
VLDB, 2012.
[44] L. Page, S. Brin, R. Motwani, and T. Winograd. The
pagerank citation ranking: bringing order to the web.
Technical report, Stanford InfoLab, 1999.
[45] P. Paillier. Public-key cryptosystems based on composite
degree residuosity classes. In EUROCRYPT, May 1999.
[46] R. A. Popa, F. H. Li, and N. Zeldovich. An ideal-security
protocol for order-preserving encoding. In IEEE Sympo-
sium on Security and Privacy, pages 463–477, 2013.
[47] R. A. Popa, C. M. S. Redﬁeld, N. Zeldovich, and H. Bal-
akrishnan. Cryptdb: Protecting conﬁdentiality with en-
crypted query processing. In SOSP, 2011.
[48] I. Roy, S. T. V. Setty, A. Kilzer, V. Shmatikov, and
E. Witchel. Airavat: Security and privacy for mapreduce.
In NSDI, 2010.
[49] F. Schuster, M. Costa, C. Fournet, C. Gkantsidis,
M. Peinado, G. Mainar-Ruiz, and M. Russinovich. Vc3:
Trustworthy data analytics in the cloud. Technical report,
Microsoft Research, 2014.
[50] A. Seshadri, M. Luk, N. Qu, and A. Perrig. Secvisor: a
tiny hypervisor to provide lifetime kernel code integrity
for commodity oses. In SOSP, pages 335–50, 2007.
[51] S. Shinde, Z. L. Chua, V. Narayanan, and P. Saxena. Pre-
venting your faults from telling your secrets: Defenses
against pigeonhole attacks. CoRR, abs/1506.04832, 2015.
[52] S. Shinde, S. Tople, D. Kathayat, and P. Saxena. Podarch:
Protecting legacy applications with a purely hardware tcb.
Technical report, National University of Singapore, 2015.
USENIX Association  
24th USENIX Security Symposium  461
15
[53] V. Shmatikov and M.-H. Wang. Measuring relationship
anonymity in mix networks. In ACM workshop on Pri-
vacy in electronic society, pages 59–62. ACM, 2006.
[54] D. X. Song, D. Wagner, and A. Perrig. Practical tech-
niques for searches on encrypted data. In IEEE Sympo-
sium on Security and Privacy, May 2000.
[55] E. Stefanov, M. van Dijk, E. Shi, C. Fletcher, L. Ren,
X. Yu, and S. Devadas. Path oram: an extremely simple
oblivious ram protocol. In CCS, 2013.
[56] U. Steinberg and B. Kauer. Nova: a microhypervisor-
based secure virtualization architecture. In Eurosys, 2010.
[57] J. Szefer and R. B. Lee. Architectural support for
hypervisor-secure virtualization. In ASPLOS, 2012.
[58] S. Tople, S. Shinde, Z. Chen, and P. Saxena. AU-
TOCRYPT: enabling homomorphic computation on
servers to protect sensitive web content.
In ACM CCS,
pages 1297–1310, 2013.
[59] S. Tu, M. F. Kaashoek, S. Madden, and N. Zeldovich.
In
Processing analytical queries over encrypted data.
VLDB, 2013.
[60] D. Wikstr¨om. A universally composable mix-net. In The-
ory of Cryptography. 2004.
[61] C. Wilson, H. Ballani, T. Karagiannis, and A. Rowtron.
Better never than late: meeting deadlines in datacenter
networks. In SIGCOMM, 2011.
[62] M. Zaharia, M. Chowdhury, T. Das, A. Dave, J. Ma,
M. McCauley, M. J. Franklin, S. Shenker, and I. Stoica.
Resilient distributed dataset: A fault-tolerant abstraction
for in-memory cluster computing. In NSDI, 2012.
[63] F. Zhang, J. Chen, H. Chen, and B. Zang. Cloudvisor:
retroﬁtting protection of virtual machines in multi-tenant
cloud with nested virtualization.
In SOSP, pages 203–
216, 2011.
[64] H. Zhang, G. Chen, B. C. Ooi, K.-L. Tan, and M. Zhang.
In-memory big data management and processing: a sur-
vey. TKDE, 27(7):1920–1948, 2015.
[65] Z. Zhou, J. Han, Y.-H. Lin, A. Perrig, and V. Gligor. Kiss:
”key it simple and secure” corporate key management. In
TRUST, 2013.
Appendix A Security Analysis
Proof (Lemma 1):
Consider the “ideal mixer” that takes as input a se-
quence (cid:31)x1, . . . ,x N(cid:30) where each xi ∈ [1,N], picks a per-
mutation p : [1,N] → [1,N] randomly and then output the
sequence (cid:31)xp(1),xp(2), . . . ,x p(N)(cid:30). Klonowski et al. [30]
investigated the effectiveness of the cascaded network of
mixing, and showed that O(log N
T ) steps are sufﬁce to
bring the distribution of the mixed sequence statistically
close to the output of the ideal mixer, where T is the
number of items an instance can process in memory. Our
proof relies on the above-mentioned result.
Let us assume that κ, the number of steps carried out
by cascaded-mix, is sufﬁciently large such that the distri-
bution of the mixed sequence is statistically close to the
ideal mixer.
Consider an adversary S that executes the cascaded-
mix. Let us construct an adversary A who simulates S
but only has access to Ω. To ﬁll in the tuple values not
present in Ω, the simulation simply ﬁlls in random tuples.
Note that the number of tuples can be derived from Ω.
Now, suppose that on input x1, . . . ,x N, the output of
A and S can be distinguished by D. We want to
show that this contradicts the semantic security of the
underlying encryption scheme, by constructing a distin-
feed the simulation with the intermediate data generated
by mixT. Let yi, j be the i-th intermediate ciphertext in
random with polynomial-time sampling (i.e. the distin-
guisher sends the challenger multiple messages, and re-
ceive more than one sample).
guisher (cid:31)D who can distinguish multiple ciphertexts from
Let z = (cid:31)z1,z2, . . . ,z N(cid:30) be the output of the mixer on
input x1, . . . ,x N. The distinguisher (cid:31)D asks the challenger
for a sequence of ciphertexts of z. Let ci, j’s be the ci-
phertexts returned by the challenger, where ci, j is the i-th
ciphertexts of z j. To emulate S , likewise, (cid:31)D needs to
round j the distinguisher (cid:31)D generated for the emulation.
1. (cid:31)D simulates the cascaded-mix by randomly pick-
ing a permutation for every mixT. Let p j : [1,N] →
[1,N] be the overall permutation for round j. Let
ˆp j be the permutation that moves the i-th ciphertext
in the input, to its location after j rounds. That is,
ˆp j(i) = p j( ˆp j−1(i)), and ˆp0(i) =i.
The yi, j’s are generated as follow:
2. Set yi, j = c ˆp j(i), j for each i, j.
Let v be the output of D’s simulation. Note that if
xi, j’s are random ciphertexts, then the distribution of v is
the same as the output distribution of A . On the other
hand, if xi, j’s are ciphertexts of z, then the input to the
emulation is statistically close to the input of S , and
thus distribution of v is statistically close to the output
distribution of S.
can distinguish the ciphertexts of z from random. (cid:31)
Since D can distinguish output of S from A ’s, (cid:31)D
462  24th USENIX Security Symposium 
USENIX Association
16