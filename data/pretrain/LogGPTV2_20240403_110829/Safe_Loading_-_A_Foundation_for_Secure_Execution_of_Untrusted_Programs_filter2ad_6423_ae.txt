### Verified Targets
The secure loader is designed with a minimalist approach, providing only the essential functionality required to load and relocate applications on a single platform. It does not support inter-platform operability, debugging features, or any runtime-configurable or changeable settings. This bare-bones paradigm significantly reduces the total number of lines of code needed to implement the loader's functionality.

### Standard Loader vs. Secure Loader
The standard loader performs additional checks that can disable certain features for privileged applications. These checks, however, can contain bugs [17], [33], [34] that allow an arbitrary user to execute code with elevated privileges. The secure loader, by design, does not include these features, thereby eliminating the potential for such exploits.

### Advantages of Combining Secure Loader and Sandbox
Combining a secure loader with a sandbox offers several advantages:
- **Clean Foundation**: The secure loader provides a clean foundation for implementing a secure sandbox.
- **Unmodified Binary Execution**: Unmodified binary applications can be safely executed in the unprivileged application domain.
- **System Call and Control Flow Trapping**: Requests for system calls, indirect control flow transfers, or dynamic loader functionality are trapped into the sandbox domain.
- **No Executable Code Mapping**: The application domain has no privileges to map executable code, ensuring that no untrusted application code is executed outside the sandbox.
- **Parameter Verification**: Any calls into the loader are handled by functions in the privileged sandbox domain, where parameters can be checked and verified.

### Limitations of the Current Implementation
**Protection Against Code Injection Attacks**:
- TRuE protects against all code injection-based attacks on both the stack and heap. Regular code sections are mapped as read-only, and only translated application code in the code cache is executable. Other memory pages are never mapped as executable.
- The shadow stack, located in the sandbox domain, protects the return instruction pointer, safeguarding against stack-oriented attacks such as return-to-libc and return-oriented programming [44].

**Vulnerabilities**:
- **Jump-Oriented Programming (JOP) and Data-Only Attacks**: JOP and data-only attacks can still redirect control flow to alternate locations in the code. However, these attacks cannot introduce new code or break out of the sandbox. Only translated code is executable, and all outgoing edges at the end of a basic block in the code cache are either patched to other translated basic blocks or trigger a fallback into the sandbox to translate previously untranslated code.
- **System Call Policy**: Similar to libdetox [37], a system call policy can be used to prevent the application from breaking out of the sandbox and to protect against JOP and data attacks at the system call level. Moving the loader into the sandbox domain simplifies the application policy, as it does not need to account for system calls required by the loader.

**Self-Modifying Code**:
- A second limitation, shared with libdetox, is the inability to securely support self-modifying code (e.g., JIT compilers). A JIT compiler can generate arbitrary code, which poses a security risk. TRuE uses a privileged sandbox domain to handle code generation and module loading. If an application contains a JIT compiler, it is placed in the untrusted application domain, where it is not allowed to generate new code. Allowing the application domain to generate new code would make it indistinguishable from a code injection attack. A possible solution is to promote the JIT compiler to the sandbox domain or define a secure API for the JIT compiler to notify the sandbox domain of newly generated correct code. This extension is a topic for future work.

### Related Work
This section provides an overview of related work in the field of sandboxing and security.

**Sandboxing Techniques**:
- Many different sandboxing techniques exist, including LD_PRELOAD-based approaches and trusted application code initialization. Policy-based system call authorization checks all system calls and their parameters, and can be used as an extension of sandboxing or independently.
- Sandboxing often uses binary translation to encapsulate running code [11], [30], [32], [45]. Tools like libdetox [37], Vx32 [22], Strata [43], [42], and program shepherding [29] implement software-based fault isolation using binary translation. Additional guards, such as non-executable memory regions, stack protection, and system call policies, can be added during the dynamic translation of machine code.

**Security Frameworks**:
- The basic SFI (Software Fault Isolation) framework must be fast, extensible, and secure. Various instrumentation frameworks have limitations, and optimizations can pose security risks.
- Policy-based system call authorization stops the application when system calls are executed, matching the arguments and location against a given policy. If a violation is detected, the program is terminated.

**Comparison Table**:
| Product/Feature | TRuE | libdetox [37] | Vx32 [22] | Strata [43], [42] | Prog. Sheph. [29] | Janus [26] | AppArmor [6] | SysTrace [39] | Switchblade [21] | Ostia [24] | NaCl [47] | PittSField [31] | CFI/XFI [1], [20] | StackGuard [16] | libverify [4] | Propolice [27] | PointGuard [14] |
|-----------------|------|---------------|-----------|-------------------|-------------------|------------|--------------|---------------|------------------|------------|-----------|-----------------|-------------------|-----------------|---------------|----------------|----------------|
| Feature 1       | x    | x             | x         | x                 | x                 | x          | x            | x             | x                | x          | x         | x               | x                 | x               | x             | x              | x              |
| Feature 2       | x    | x             | x         | x                 | x                 | x          | x            | x             | x                | x          | x         | x               | x                 | x               | x             | x              | x              |
| Feature 3       | x    | x             | x         | x                 | x                 | x          | x            | x             | x                | x          | x         | x               | x                 | x               | x             | x              | x              |
| Feature 4       | x    | x             | x         | x                 | x                 | x          | x            | x             | x                | x          | x         | x               | x                 | x               | x             | x              | x              |

This table compares various security features across different products and frameworks, highlighting the strengths and weaknesses of each approach.