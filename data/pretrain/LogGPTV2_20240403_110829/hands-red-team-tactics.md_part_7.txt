> experience in topics such as post-exploitation, lateral movement, data
> exfiltration, and especially when new tools and techniques are being
> released almost on a daily basis. If we ask ourself, what could be the
> next level as a Penetration Tester? Our answer would be---a Red
> Teamer. A Penetration Tester starts from Ethical Hacking and moves up
> to the level where he/she can be called as a Penetration Tester but
> Cyber-criminals don\'t just do a generic penetration testing on their
> target. They rather, attack the organization with a harmful intent
> which led to mass data breaches and Cyber espionage.
>
> To protect the organization, we need to understand the mindset of a
> Cyber criminal. We have to simulate a real cyber attack just to
> understand how devastating a cyber attack could be on the
> organization. That is \'Red Teaming\' and this is one of the crucial
> differences between an effective red-team exercise and a penetration
> test. To perform a successful red team exercise, the objective, scope,
> scenario, and **Rules of Engagement** (**RoE**) for performing the
> exercise needs to be accurately laid out at the beginning of the
> exercise in order to simulate a real adversary and provide maximum
> value to the client and the stakeholders.
In this chapter, we will cover the following topics:
> Planning a red-team exercise Introduction to Cobalt Strike Cobalt
> Strike setup
>
> Cobalt Strike interface Customizing a team server
# Technical requirements
> Oracle\'s Java 1.7 or later
>
> Cobalt Strike (the trial version lasts for 21 days) Microsoft Word
>
> Visual Basics
# Planning a red-team exercise
> The red-team exercise is not just a mere pentest; it\'s an adversary
> attack simulation exercise that allows us to assess the following:
>
> If the organization can detect the attack or not
>
> If an organization is able to contain/ restrict the attack after
> detection
>
> If the organization can protect their business critical *assets* from
> the red teamers or not
>
> How the defenders of an organization perform an incident response in
> the event of such attacks
>
> Before getting into the planning phase of the red-team exercise, first
> you need to understand the concept of the cyber kill chain.
# Cyber kill chain (CKC)
> The kill chain is a concept that derives from military operations used
> to structure an attack. This includes *breaking down* the mission into
> several phases and beginning the attack accordingly when the end goal
> is to destroy. These chain of attacks are collectively called kill
> chains. The cyber kill chain is a process in which each step
> represents an attack and a threat actor (adversary) can link these
> attack vectors together to form a chain with the end goal of
> **espionage**, **ransoming**, or **destruction**. The cyber kill chain
> methodology is as follows:
>
> ![](media/image183.jpeg)
# Reconnaissance
> This is the most crucial phase of a CKC. The adversary will try to
> gather as much information as possible on the target. For example, an
> adversary can look for an organization\'s website for vulnerabilities
> or an employee\'s profile/email/credentials for a spear phishing or
> watering-hole attack. It can also dumpster dive to look for certain
> credentials and access keys in the target organization\'s network,
> **Open Source Intelligence** (**OSINT**), and so on.
>
> ![](media/image60.png)*You can find a really well-maintained list of
> tools and public online portals for gathering intel at this link:
> *
# Weaponization
> The main aspect of this phase is to weaponize the malware that will be
> delivered to the target system. The malware could be a simple
> meterpreter payload, Empire agent, Koadic stager, or a complex
> custom-coded program. The type of malware depends on the level of
> adversaries. If the adversary is highly skilled,
>
> he/she would mostly use a custom coded malware to avoid detection.
> Even if the adversaries are using meterpreter (a downloader embedded
> in a Microsoft office document macro that would download and inject
> the meterpreter payload into
>
> the memory) as their weaponized malware, they still need to obfuscate,
> encode, and encrypt the payload for bypassing general & latest
> protection mechanisms. For organizations having no back office, the
> USB embedded malware is used to infect the systems of the employees
> working there.
# Delivery
> In this phase, the weaponized malware will be delivered to the target
> organization\'s employees, their family, HR, and other departments in
> the form of office documents or PDFs. These documents will have catchy
> titles such as *Updated holiday calendar*, *Resumes*, or *Appraisal
> time*. Once the employee opens up the document and performs certain
> actions, such as enabling the macros, the weaponized malware is called
> from the server for execution.
# Exploitation
> The malware that was delivered to the target is then *detonated*
> (executed) on the system which then performs actions instructed (coded
> into) by the malware. This might include gaining access to the FTP
> servers using the credentials found in the reconnaissance phase and
> using those FTP servers as the pivotal point in which to distribute
> the malware on each and every system on the target network as a
> *software update installer*. This phase focuses on the execution of
> the malware and the exploitation of vulnerable services in the network
> (if coded into the malware).
# Installation
> Once the malware is executed on the system, the first thing it needs
> to do is install itself (backdoor) on the system so that the
> adversaries can access it anytime they want to *hide* in such a way
> that the AVs don\'t detect its presence. Persistence can be achieved
> either by writing on the disk (this may include the startup folder,
> the registry, and so on) or in-memory/file-less write (such as WMI).
# Command and Control Server
> The malware which would be properly executed and backdoored with
> persistence on the system will call back and report to the **Command
> and control Server** (**C2**). The malware will then be ready to
> execute the commands that would be instructed by the threat actors.
> These commands could differ from a simple *getting to know the
> username and roles* to *dumping all the employee credentials*.
# Actions
> This will be the final phase of the kill chain in which the adversary
> gets access to the system and is ready to execute a plan on it---this
> could be a data exfiltration (cyber espionage) mission in which the
> *crown jewels* of an organization are exfiltrated, a data destruction
> mission in which the data will be securely
>
> shredded or deleted in such a way that it can\'t be recovered in any
> way possible, or a ransom setup in which the important data will be
> encrypted and the threat actors will demand a ransom amount for
> decryption.
A red-teamer needs to know exactly how he or she can use the concept of
CKC in order to get access to the target organization\'s network.
However, to even perform this task, the red-teamers need to come up with
a plan that should be executed properly for a successful adversary
simulation. Look at the following for the basic planning phases and try
to answer the questions as accurately as possible. Once you find the
answers, you\'re ready for execution:
> ![](media/image184.jpeg)
# Objective and goal
> What is your main objective here?
>
> What do you want to achieve with this exercise?
# Rules of Engagement (RoE)
> What\'s the scope of this exercise?
>
> How long will it take (timeline) for this exercise to get the results?
> Who are the stakeholders and the people responsible (in case of
> emergency)?
>
> Who will be doing the incident response?
# Scenario/strategy
> How can you achieve the end goal?
>
> Where are you in the kill chain and what kind of attack would you use
> according to it?
>
> What will be plan of attack here?
>
> How will you design the kill chain for this exercise?
# Deliverables
> What will be the result of this exercise?
>
> Did the defenders learn their lessons or not?
>
> There are multiple tools that can be used in a red-team exercise, but
> the real problem is to use all the tools so that the backdoor
> connections are easily manageable. If it\'s just a system or two,
> it\'s still manageable. However, if there\'s a huge number of systems
> then managing each session can be quite difficult. To solve this
> problem, we will introduce you to *Cobalt Strike*, a tool for
> executing and managing a red-team operation.
# Introduction to Cobalt Strike
> According to cobaltstrike.com:
>
> *\"Cobalt Strike is a software for Adversary Simulations and Red Team
> Operations. Adversary Simulations and Red Team Operations are security
> assessments that replicate the tactics and techniques of an advanced
> adversary in a network. While penetration tests focus on unpatched
> vulnerabilities and misconfigurations, these assessments benefit
> security operations and incident response.\"*
Cobalt Strike can be downloaded from 
on a trial basis, which is valid for 21 days. It may take few days for
the site to provide you with the download link:
> ![](media/image185.jpeg)
>
> Before installing Cobalt Strike, please make sure that you have Oracle
> Java installed with version 1.7 or above. You can check whether or not
> you have Java installed by executing the following command:
>
> ![](media/image186.jpeg)**java -version**
>
> If you receive the java command not found error or another related
> error, then you need to install Java on your system. You can download
> this here: [https://www.java. com/en/.](https://www.java.com/en/)
Cobalt Strike comes in a package that consists of a client and server
files. To start with the setup, we need to run the team server. The
following are the files that you\'ll get once you download the package:
> ![](media/image187.jpeg)
>
> The first thing we need to do is run the team server script located in
> the same directory.
# What is a team server?
> This is the main controller for the payloads that are used in Cobalt
> Strike. It logs all of the events that occur in Cobalt Strike.
>
> It collects all the credentials that are discovered in the
> post-exploitation phase or used by the attacker on the target systems
> to log in.
>
> It is a simple bash script that calls for the Metasploit RPC service
> (msfrpcd) and starts the server with cobaltstrike.jar. This script can
> be customized according to the needs.
Cobalt Strike works on a client-server model in which the red-teamer
connects to the team server via the Cobalt Strike client. All the
connections (bind/reverse) to/from the victims are managed by the team
server.
> ![](media/image188.jpeg)
The system requirements for running the team server are as follows:
> **System requirements**: 2 GHz+ processor
>
> 2 GB RAM
>
> 500MB+ available disk space
## Amazon EC2:
> At least a high-CPU medium (c1.medium, 1.7 GB) instance
## Supported operating systems:
> Kali Linux 1.0, 2.0 -- i386 and AMD64 Ubuntu Linux 12.04, 14.04 --
> x86, and x86_64
## The Cobalt Strike client supports:
> Windows 7 and above macOS X 10.10 and above
>
> Kali Linux 1.0, 2.0 -- i386 and AMD64 Ubuntu Linux 12.04, 14.04 --
> x86, and x86_64
>
> ![](media/image189.jpeg)As shown in the following screenshot, the team
> server needs at least two mandatory arguments in order to run. This
> includes **host**, which is an IP address that is reachable from the
> internet. If behind a home router, you can *port forward* the
> listener\'s port on the router. The second mandatory argument is
> **password**, which will be used by the team server for
> authentication:
The third and fourth arguments specifies a **Malleable C2 communication
profile** and a **kill date** for the payloads (both optional). A
Malleable C2 profile is a straightforward program that determines how to
change information and store
it in an exchange. It\'s a really cool feature in Cobalt Strike.
> The team server must run with the root privileges so that it can start
> the listener on system ports (port numbers: 0-1023); otherwise, you
> will receive a Permission denied error when attempting to start a
> listener:
>
> ![](media/image190.jpeg)
>
> The Permission denied error can be seen on the team server console
> window, as shown in the following screenshot:
>
> ![](media/image191.jpeg)
Now that the concept of the team server has been explained, we can move
on to the next topic. You\'ll learn how to set up a team server for
accessing it through Cobalt Strike.
# Cobalt Strike setup
> The team server can be run using the following command:
>
> **sudo ./teamserver 192.168.10.122 harry@123**
>
> Here, I am using the IP 192.168.10.122 as my team server and harry@123
> as my password for the team server:
>
> ![](media/image192.jpeg)
>
> If you receive the same output as we can see in the preceding
> screenshot, then this means that your team server is running
> successfully. Of course, the SHA256 hash for the SSL certificate used
> by the team server will be different each time it runs on your system,
> so don\'t worry if the hash changes each time you start the server.
Upon successfully starting the server, we can now get on with the
client. To run the client, use the following command:
> **java -jar cobaltstrike.jar**
>
> ![](media/image193.jpeg)
>
> This command will open up the connect dialog, which is used to connect
> to the Cobalt Strike team server. At this point, you need to provide
> the team server IP, the Port number (which is 50050, by default), the
> User (which can be any random user of your choice), and the Password
> for the team server. The client will connect with the team server when
> you press the Connect button.
Upon successful authorization, you will see a team server fingerprint
verification window. This window will ask you to show the exact same
SHA256 hash for the SSL certificate that was generated by the team
server at runtime. This verification only happens once during the
initial stages of connection. If you see this window again, your team
server is either restarted or you are connected to a new device. This is
a precautionary measure for preventing **Man-in-the-Middle** (**MITM**)
attacks:
> ![](media/image194.jpeg)
Once the connection is established with the team server, the Cobalt
Strike client
> will open:
>
> ![](media/image195.jpeg)
Let\'s look further to understand the Cobalt Strike interface so that
you can use it to its full potential in a red-team engagement.
# Cobalt Strike interface
> The user interface for Cobalt Strike is divided into two horizontal
> sections, as demonstrated in the preceding screenshot. These sections
> are the visualization tab and the display tab. The top of the
> interface shows the visualization tab, which visually displays all the
> sessions and targets in order to make it possible to better understand
> the network of the compromised host. The bottom of the interface shows
> the display tab, which is used to display the Cobalt Strike features
> and sessions for interaction.
# Toolbar
> Common features used in Cobalt Strike can be readily accessible at the
> click of a button.
The toolbar offers you all the common functions to speed up your Cobalt
Strike usage:
> ![](media/image196.jpeg)
>
> Each feature in the toolbar is as follows:
>
> ![](media/image197.png)View credentials
>
> View downloaded files
>
> View keystrokes
>
> View screenshots
>
> Generate a stageless Cobalt Strike executable or DLL Setup the Java
> Signed Applet attack
>
> Generate a malicious Microsoft Office macro Stand up a Scripted Web
> Delivery attack
>
> Host a file on Cobalt Strike\'s web server
>
> Manage files and applications hosted on Cobalt Strike\'s web server
>
> ![](media/image198.png)Visit the Cobalt Strike support page About
> Cobalt Strike
# Connecting to another team server
> In order to connect to another team server, you can click on the +
> sign, which will open up the connect window:
>
> ![](media/image200.jpeg)
>
> All of the previous connections will be stored as a profile and can be
> called for connection again in the connect window: