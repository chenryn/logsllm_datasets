# Dazed Droids: A Longitudinal Study of Android Inter-App Vulnerabilities

**Authors:**  
Ryan Johnson, Mohamed Elsabagh, Angelos Stavrou, and Jeff Offutt

**Conference:**  
2015 IEEE/ACM 37th IEEE International Conference on Software Engineering

## Analysis of Android Inter-App Security Vulnerabilities Using COVERT

**Authors:**  
Alireza Sadeghi, Hamid Bagheri, Sam Malek

**Affiliation:**  
Department of Computer Science, George Mason University, Fairfax, Virginia, USA

**Contact:**  
PI: EMAIL

### Abstract
Current state-of-the-art methods for securing mobile software systems primarily focus on detecting and mitigating vulnerabilities within a single app. However, these methods often fail to identify vulnerabilities that arise from the interaction of multiple apps, such as collusion attacks and privilege escalation chaining, which are common in the market. This paper introduces COVERT, a novel approach and accompanying tool-suite that uses a hybrid static analysis and lightweight formal analysis technique to enable compositional security assessment of complex software. By statically analyzing Android application packages, COVERT extracts relevant security specifications in an analyzable formal specification language and checks them as a whole for inter-app vulnerabilities. To our knowledge, COVERT is the first formally-precise analysis tool for automated compositional analysis of Android apps. Our study of hundreds of Android apps revealed dozens of inter-app vulnerabilities, many of which were previously unknown. A video highlighting the main features of the tool can be found at: [http://youtu.be/bMKk7OW7dGg](http://youtu.be/bMKk7OW7dGg).

### I. Introduction
The ubiquity of smartphones and our growing reliance on mobile apps have made us more vulnerable to cyber security attacks than ever before. In this context, smartphone platforms, particularly Android, have become a focal point for security research. These research efforts have investigated various weaknesses, including information leaks, the least-privilege principle, and enhancements to Android protection mechanisms.

Despite significant progress, current security techniques are primarily designed to detect and mitigate vulnerabilities within a single app, failing to identify vulnerabilities that arise from the interaction of multiple apps. Such vulnerabilities, such as collusion attacks and privilege escalation chaining, cannot be detected by techniques that analyze a single app in isolation. Therefore, there is a pressing need for security analysis techniques in rapidly growing domains to become compositional in nature.

To address this, our previous work [2] introduced a novel approach for compositional analysis of Android inter-app vulnerabilities. This paper demonstrates the accompanying tool-suite, COVERT, which combines static and formal analysis techniques to enable compositional security assessment of complex software. Through static analysis of application packages, COVERT extracts relevant security specifications in a format suitable for formal analysis. Given a collection of extracted specifications, a formal analysis engine (e.g., model checker) verifies whether it is safe for a combination of applications—holding certain permissions and potentially interacting with each other—to be installed simultaneously.

COVERT advances current practices in assessing inter-application vulnerabilities by providing analysts with significantly more useful information than existing techniques (e.g., Fortify and IBM AppScan), which analyze the source code of an application in isolation. Our experiences with COVERT and its evaluation in the context of hundreds of real-world Android apps, collected from various repositories, confirm its ability to find dozens of inter-app vulnerabilities, many of which were previously unknown.

The rest of this paper describes our analysis method, its implementation, and a summary of related work.

### II. Motivating Example
To motivate the research and illustrate our tool, we provide an example of a vulnerability pattern involving Inter-Process Communication (IPC) among Android apps. Android provides a flexible IPC model using Intent messages, which facilitate communication between application components. A typical app consists of multiple processes (e.g., Activity, Service) that communicate using Intent messages. Additionally, an app's processes can send Intent messages to another app's processes to perform actions (e.g., take a picture, send a text message).

Figure 1 illustrates a bundle of two benign but vulnerable apps installed together on a device. App1 is a Weather application that accesses the device location (GPS data) and sends it to another component of the app via Intra-app Intent messaging. The Action field of the Intent is used as an address instead of explicitly addressing the Intent, a common practice among Android developers [3], but one that may lead to unauthorized Intent receipt.

A second vulnerability exists in the Messenger app, where MessageSender uses the system-level API SmsManager to send a message to a phone number retrieved from the Intent. Although this app has permission for SMS service, it fails to ensure that the sender of the original Intent message also has the necessary permission.

Given these vulnerabilities, a malicious app can send the device location data to a desired phone number via text message without needing any permission. As shown in Figure 1, the malicious app hijacks the Intents containing the device location info from the first app and sends a fake Intent to the second app, containing the GPS data and adversary phone number as the payload. While the example in Figure 1 shows the exploitation of vulnerabilities in components from two apps, a similar attack can occur by exploiting vulnerabilities in components of either a single app or multiple apps.

This example highlights one of the most challenging issues in Android security: the detection of compositional vulnerabilities. What is required is a system-level analysis capability that (1) identifies the vulnerabilities and capabilities in individual apps and (2) determines how those individual vulnerabilities and capabilities could affect one another when the corresponding apps are installed together. In the next section, we introduce COVERT, which addresses these issues.

### III. COVERT Tool
To automatically detect vulnerabilities that occur due to the interaction of a bundle of apps, we implemented COVERT. The input of the tool is a set of Android application package archives (APK files), and the output is a list of identified vulnerabilities in the app bundle.

As illustrated in Figure 2, COVERT is implemented in two layers: the back-end, which performs analysis on the apps to find potential vulnerabilities, and the front-end, which provides an interactive environment for end users. This section describes the details of COVERT’s components.

#### A. Back-end
The main components of COVERT that analyze the apps to detect security vulnerabilities are implemented in the back-end layer. This layer consists of two modules: the Model Extractor, which uses static analysis techniques to automatically extract an abstract formal model of Android apps, and the Formal Analyzer, which uses lightweight formal analysis techniques to find vulnerabilities in the extracted app models.

1. **Model Extractor:**
   - To automatically analyze vulnerabilities, COVERT first needs to extract a model of each app’s behavior to reason about its security properties. An app model is composed of information extracted from two sources: the manifest file and bytecode, processed by the Architecture Extractor and Static Analyzer modules, respectively.
   - The Architecture Extractor examines the decoded manifest to capture high-level architectural information, including the app's components, their types, required permissions, and permissions enforced by each component for interaction. It also identifies public interfaces exposed by each application through Intent Filters.
   - After collecting architectural information, the Static Analyzer extracts complementary information from the application bytecode, such as Intent creation and transmission, which are necessary for detecting inter-application vulnerabilities. COVERT utilizes different static analysis techniques, including:
     - **Intent Extraction:** COVERT relies on inter-procedural data flow analysis to extract Intent information, including the sender and recipient components, and the Intent's Action, Data, and Categories.
     - **Path Extraction:** COVERT identifies paths from sensitive data to statements that send it out, which may cause privacy leaks. Such paths can occur within a single component or across multiple components.

By combining these techniques, COVERT provides a comprehensive and precise analysis of inter-app vulnerabilities, enabling developers and security analysts to better understand and mitigate these risks.