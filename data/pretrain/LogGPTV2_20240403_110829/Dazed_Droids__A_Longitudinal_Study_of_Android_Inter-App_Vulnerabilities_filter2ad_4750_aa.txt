title:Dazed Droids: A Longitudinal Study of Android Inter-App Vulnerabilities
author:Ryan Johnson and
Mohamed Elsabagh and
Angelos Stavrou and
Jeff Offutt
2015 IEEE/ACM 37th IEEE International Conference on Software Engineering
2015 IEEE/ACM 37th IEEE International Conference on Software Engineering
2015 IEEE/ACM 37th IEEE International Conference on Software Engineering
2015 IEEE/ACM 37th IEEE International Conference on Software Engineering
Analysis of Android Inter-App Security
Vulnerabilities Using COVERT
Alireza Sadeghi
Hamid Bagheri
Sam Malek
Department of Computer Science
Department of Computer Science
Department of Computer Science
George Mason University
Fairfax, Virginia, USA
PI:EMAIL
George Mason University
Fairfax, Virginia, USA
PI:EMAIL
George Mason University
Fairfax, Virginia, USA
PI:EMAIL
Abstract—The state-of-the-art
in securing mobile software
systems are substantially intended to detect and mitigate vulner-
abilities in a single app, but fail to identify vulnerabilities that
arise due to the interaction of multiple apps, such as collusion
attacks and privilege escalation chaining, shown to be quite
common in the apps on the market. This paper demonstrates
COVERT, a novel approach and accompanying tool-suite that
relies on a hybrid static analysis and lightweight formal analysis
technique to enable compositional security assessment of complex
software. Through static analysis of Android application pack-
ages, it extracts relevant security speciﬁcations in an analyzable
formal speciﬁcation language, and checks them as a whole for
inter-app vulnerabilities. To our knowledge, COVERT is the
ﬁrst formally-precise analysis tool for automated compositional
analysis of Android apps. Our study of hundreds of Android
apps revealed dozens of inter-app vulnerabilities, many of which
were previously unknown. A video highlighting the main features
of the tool can be found at: http://youtu.be/bMKk7OW7dGg.
I. INTRODUCTION
The ubiquity of smartphones and our growing reliance on
mobile apps are leaving us more vulnerable to cyber security
attacks than ever before. In this context, smartphone platforms,
and in particular Android, have emerged as a topic du jour
for security research. These research efforts have investigated
weaknesses from various perspectives, including detection of
information leaks, analysis of the least-privilege principle, and
enhancements to Android protection mechanisms.
Despite the signiﬁcant progress, such security techniques
are substantially intended to detect and mitigate vulnerabilities
in a single app, but fail to identify vulnerabilities that arise
due to the interaction of multiple apps. Vulnerabilities due
to the interaction of multiple apps, such as collusion attacks
and privilege escalation chaining [1], cannot be detected by
techniques that analyze a single app in isolation. Thus, there
is a pressing need for security analysis techniques in such
rapidly growing domains to become compositional in nature.
To address this state of affairs, our previous work [2]
contributes a novel approach for compositional analysis of
Android inter-app vulnerabilities. This paper demonstrates the
accompanying tool-suite that relies on the introduced ap-
proach. COVERT combines static analysis with formal analysis
techniques to enable compositional security assessment of
complex software.
Fig. 1. A malicious app exploits the vulnerabilities of two other apps to send
the device location data to the desirable phone number.
Through static analysis of application packages, it extracts
relevant security speciﬁcations in a format suitable for formal
analysis. Given a collection of speciﬁcations extracted in
this way, a formal analysis engine (e.g., model checker) is
then used to verify whether it
is safe for a combination
of applications—holding certain permissions and potentially
interacting with each other—to be installed simultaneously.
COVERT further advances the current practices in assessing
the inter-application vulnerabilities by providing the analysts
with information that is signiﬁcantly more useful than that pro-
vided by existing techniques (e.g., Fortify and IBM AppScan)
that analyze the source code of an application in isolation. Our
experiences with COVERT and its evaluation in the context of
hundreds of real-world Android apps, collected from variety of
repositories, corroborate its ability to ﬁnd dozens of inter-app
vulnerabilities, many of which were previously unknown.
The rest of this paper describes our analysis method, its
implementation, and a summary of related work discussion.
II. MOTIVATING EXAMPLE
To motivate the research and illustrate our tool, we provide
an example of a vulnerability pattern having to do with Inter-
Process Communication (IPC) among Android apps. Android
provides a ﬂexible model of IPC using a type of application-
level message known as Intent. A typical app is comprised of
multiple processes (e.g., Activity, Service) that communicate
using Intent messages. In addition, an app’s processes could
send Intent messages to another app’s processes to perform
978-1-4799-1934-5/15 $31.00 © 2015 IEEE
978-1-4799-1934-5/15 $31.00 © 2015 IEEE
978-1-4799-1934-5/15 $31.00 © 2015 IEEE
978-1-4799-1934-5/15 $31.00 © 2015 IEEE
DOI 10.1109/ICSE.2015.233
DOI 10.1109/ICSE.2015.233
DOI 10.1109/ICSE.2015.233
DOI 10.1109/ICSE.2015.233
725
725
725
725
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 07:01:10 UTC from IEEE Xplore.  Restrictions apply. 
ICSE 2015, Florence, Italy Demonstrationstool. The input of the tool is a set of Android application
package archives (APK ﬁles), and the output
is a list of
vulnerabilities identiﬁed in the app bundle.
As illustrated in Figure 2, COVERT tool is implemented in
two layers: the back-end that performs analysis on the apps to
ﬁnd potential vulnerabilities, and the front-end that provides
an interactive environment intended for use by the end users.
This section describes the details of COVERT’s components.
A. Back-end
The main components of COVERT tool that analyze the apps
to detect security vulnerability issues are implemented in the
back-end layer. As depicted in Figure 2, this layer consists of
two modules: Model Extractor that leverages static analysis
techniques to automatically extract an abstract formal model
of Android apps, and Formal Analyzer that is intended to use
lightweight formal analysis techniques to ﬁnd vulnerabilities
in the extracted app models.
1) Model Extractor:
In order to automatically analyze
vulnerabilities, COVERT ﬁrst needs to extract a model of each
app’s behavior to reason about its security properties. In our
approach, an app model is composed of the information ex-
tracted from two sources: manifest ﬁle and bytecode, which are
processed by our Architecture Extractor and Static Analyzer
modules, respectively.
Architecture Extractor examines the decoded manifest to
capture the high-level architectural information of the appli-
cation, including its components, their types, permissions that
the app requires, and permissions enforced by each component
that the other apps must have in order to interact with that com-
ponent. Architecture Extractor also identiﬁes public interfaces
exposed by each application, which are entry points deﬁned
in the manifest ﬁle through Intent Filters of components.
After collecting architectural information Static Analyzer
then extracts complementary information latent in the appli-
cation bytecode. This additional information, such as Intent
creation and transmission, are necessary for detecting inter-
application vulnerabilities. For this purpose, COVERT utilizes
different static analysis techniques to extract other essential
information from the application bytecode. These techniques
are brieﬂy described as follows:
Intent Extraction: Intents are a special kind of event mes-
sages provided by Android to facilitate communication be-
tween application components. Intent messages can be used
for both inter- and intra-app communications, and are thus
essential information for security analysis. COVERT relies on
inter-procedural data ﬂow analysis [4] to extract the Intent
information,
the possible
recipient component (in case explicitly speciﬁed), and also the
Intent’s Action, Data and Categories specifying the general
action to be performed, additional information about the data
to be processed by the action, and the kind of component that
should handle the Intent, respectively.
including the sender component,
Path Extraction: Existence of paths from sensitive data to
statements that send it out, may cause privacy leaks. Such
a path may occur within the scope of a single component
Fig. 2. COVERT’s Overall Architecture.
actions (e.g., take picture, send text message, etc.). As an
example, Figure 1 partially shows a bundle of two benign,
yet vulnerable apps, installed together on a device.
App1 is a Weather application that ﬁrst accesses the device
location (GPS data), and then sends it to another component
of the app via Intra-app Intent messaging. The Action ﬁeld
of the Intent
is used as an address instead of explicitly
addressing the Intent. This represents a common practice
among Android developers [3], yet an anti-pattern that may
lead to unauthorized Intent receipt.
A second vulnerability is in the Messenger app, where Mes-
sageSender uses system-level API SmsManager, resulting in
a message to be sent to the phone number previously retrieved
from the Intent. Although this app has the permission for SMS
service, it fails to ensure that the sender of the original Intent
message also has the permission.
Given these vulnerabilities, a malicious app can send the
device location data to the desirable phone number via text
message, without the need for any permission. As shown in
Figure 1, the malicious app, ﬁrst hijacks the Intents containing
the device location info from the ﬁrst app. Then, it sends a
fake Intent to the second app, containing the GPS data and
adversary phone number as the payload. While the example of
Figure 1 shows exploitation of vulnerabilities in components
from two apps, in general, a similar attack may occur by
exploiting the vulnerabilities in components of either single
app or multiple apps.
The above example points to one of the most challenging
issues in Android security, i.e., detection of compositional
vulnerabilities. What is required is a system-level analysis
capability that (1) identiﬁes the vulnerabilities and capabilities
in individual apps, and (2) determines how those individual
vulnerabilities and capabilities could affect one another when
the corresponding apps are installed together. In the next
section, we introduce COVERT that addresses these issues.
III. COVERT TOOL
To automatically detect the vulnerabilities that occur due to
the interaction of a bundle of apps, we implemented COVERT
726726726726
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 07:01:10 UTC from IEEE Xplore.  Restrictions apply. 
ICSE 2015, Florence, Italy Demonstrations1 sig GeneratedIntentHijack{
2
3
4
5
6
7
8
9
10
disj vulCmp, malCmp: Component, vulIntent:Intent,
disj vulPath, malPath:DetailedPath }{
vulIntent.sender = vulCmp & no vulIntent.component
malCmp in intentResolver[vulIntent] & no vulCmp.app & malCmp.app
vulCmp.app in existingApps.apps & not (malCmp.app in existingApps.apps)
vulPath in vulIntent.detailedPaths
vulPath.sink = IPC & vulPath.source in SensitiveSources