有人可能会对 Kubernetes 提出反对，因为它的设置和管理很复杂，至少在撰写本文时是这样。对于新来者来说，有一个很大的障碍需要克服。第一步是陡峭的。但是一旦一个人和这个编排器合作了一段时间，这一切都是有意义的。整体设计经过深思熟虑，执行得非常好。
在 Kubernetes 的最新版本 1.10 中，其**通用可用性** ( **GA** )是在 2018 年 3 月发布的，与 Docker Swarm 等其他编排器相比，最初的大多数缺点都已消除。例如，安全性和保密性现在不仅是事后的想法，而且是系统不可分割的一部分。
新功能以惊人的速度实现。新版本大约每 3 个月发布一次，更准确地说，大约每 100 天发布一次。大多数新功能都是由需求驱动的，也就是说，使用 Kubernetes 来编排其任务关键型应用的公司可以表达他们的需求。这使得 Kubernetes 企业做好了准备。如果认为这个协调者只针对初创企业，而不是规避风险的企业，那就错了。情况恰恰相反。我的这种说法是基于什么？好吧，我的说法是有道理的，因为微软、Docker 和红帽等公司的客户大多是大企业，它们已经完全接受了 Kubernetes，并为其提供企业级支持，如果它被使用并集成到它们的企业产品中。
Kubernetes 同时支持 Linux 和 Windows 容器。
# DockerSwarm
众所周知，Docker 普及并商品化了软件容器。Docker 没有发明容器，但是标准化了它们，并使它们广泛可用，尤其是通过提供免费的映像注册 Docker Hub。最初，Docker 主要关注开发人员和开发生命周期。但是很快开始使用和喜爱容器的公司也希望使用容器，不仅仅是在新应用的开发或测试过程中，还希望在生产中运行这些应用。
最初，Docker 在这个领域没有什么可提供的，所以其他公司跳进了这个真空，向用户提供帮助。但没过多久，Docker 意识到对一个简单而强大的编排器有着巨大的需求。Docker 的第一次尝试是一款名为经典 Swarm 的产品。这是一个独立的产品，使用户能够创建一个 Docker 主机集群，该集群可用于以高可用性和自我修复的方式运行和扩展他们的容器化应用。
然而，建立一个经典的 Docker Swarm 是困难的。涉及到许多复杂的手工步骤。客户喜欢这款产品，但却难以应对其复杂性。所以 Docker 决定可以做得更好。它又回到了画板上，想出了 SwarmKit。SwarmKit 是在西雅图的 DockerCon 2016 上推出的，是 Docker 引擎最新版本的一个组成部分。是的，你说得对，SwarmKit 过去是，现在仍然是 Docker 引擎不可或缺的一部分。因此，如果你安装了一个 Docker 主机，你会自动拥有一个可用的 SwarmKit。
SwarmKit 的设计考虑了简单性和安全性。口头禅过去是，现在仍然是，建立一个群体几乎是微不足道的，群体必须是高度安全的开箱即用。Docker Swarm 基于最小特权的假设运行。
安装一个完整的、高可用性的 Docker Swarm 实际上很简单，首先在集群中的第一个节点上安装一个`docker swarm init`，它成为所谓的领导者，然后在所有其他节点上安装一个`docker swarm join `。`join-token`由领导在初始化时生成。在最多有 10 个节点的 Swarm 上，整个过程不到 5 分钟。如果它是自动化的，它需要更少的时间。
正如我已经提到的，当 Docker 设计和开发 SwarmKit 时，安全性是必备的。容器通过依赖 Linux 内核命名空间和 cgroups 以及 Linux 系统调用白名单(seccomp)和对 Linux 功能的支持以及 **Linux 安全模块** ( **LSM** )来提供安全性。现在，除此之外，SwarmKit 还增加了 MTLS 和在静止和运输过程中加密的机密。此外，swarm 定义了所谓的**容器网络模型** ( **CNM** )，它允许 sdn 为在 Swarm 上运行的应用服务提供沙箱。
Docker SwarmKit 同时支持 Linux 和 Windows 容器。
# 阿帕奇 Mesos 和马拉松
Apache **Mesos** 是一个开源项目，最初是为了让一个服务器或节点集群从外部看起来像一个大服务器而设计的。Mesos 是使计算机集群管理变得简单的软件。Mesos 的用户不应该关心单个服务器，而应该假设他们有一个巨大的资源池可以支配，这相当于集群中所有节点的所有资源的总和。
用 IT 术语来说，Mesos 已经相当古老了，至少与其他编排器相比是这样。它于 2009 年首次公开亮相。但是在那个时候，当然，它不是为了运行容器而设计的，因为 Docker 甚至还不存在。与 Docker 对容器所做的类似，Mesos 使用 Linux cgroups 来隔离资源，如 CPU、内存或单个应用或服务的磁盘 I/O。
Mesos 实际上是建立在它之上的其他有趣服务的底层基础设施。具体从容器的角度来看，**马拉松**很重要。马拉松是一个运行在 Mesos 之上的容器指挥器，能够扩展到数千个节点。
马拉松支持多个容器运行时，例如 Docker 或它自己的 Mesos 容器。它不仅支持无状态应用服务，还支持有状态应用服务，例如 PostgreSQL 或 MongoDB 等数据库。与 Kubernetes 和 Docker SwarmKit 类似，它支持本章前面描述的许多功能，例如高可用性、运行状况检查、服务发现、负载平衡和位置感知，仅举几个最重要的例子。
虽然 Mesos 和在一定程度上马拉松是相当成熟的项目，但它们的覆盖面相对有限。它似乎在大数据领域最受欢迎，也就是说，运行数据处理服务，如 Spark 或 Hadoop。
# 亚马逊 ECS
如果您正在寻找一个简单的编排器，并且已经大量购买了 AWS 生态系统，那么亚马逊的 ECS 可能是您的正确选择。重要的是要指出 ECS 的一个非常重要的限制:如果你购买了这个容器编排器，那么你就把自己锁在了 AWS 中。您将无法轻松地将运行在 ECS 上的应用移植到另一个平台或云。
亚马逊将其 ECS 服务宣传为一种高度可扩展、快速的容器管理服务，使其易于在集群上运行、停止和管理 Docker 容器。除了运行容器之外，ECS 还允许从容器内部运行的应用服务直接访问许多其他 AWS 服务。这种与许多流行的 AWS 服务紧密而无缝的集成使 ECS 对那些正在寻找一种简单的方法使其容器化应用在健壮且高度可扩展的环境中启动和运行的用户来说极具吸引力。亚马逊还提供自己的私人映像注册。
有了 AWS ECS，您可以使用 Fargate 让它完全管理底层基础架构，这样您就可以专注于部署容器化的应用，而不必关心如何创建和管理节点集群。ECS 同时支持 Linux 和 Windows 容器。
总之，ECS 使用简单，可扩展性高，并且与其他流行的 AWS 服务很好地集成在一起，但是它不如 Kubernetes 或 Docker SwarmKit 那样强大，并且它只在亚马逊 AWS 上可用。
# 微软 ACS
类似于我们所说的 ECS，我们也可以对微软的 ACS 提出同样的要求。这是一个简单的容器编排服务，如果您已经在 Azure 生态系统中进行了大量投资，那么它就有意义了。我应该说和我为亚马逊 ECS 指出的一样:如果你买入 ACS，那么你就把自己锁定在微软的产品上。将您的容器化应用从 ACS 移动到任何其他平台或云都不容易。
ACS 是微软的容器服务，支持多个编排器，如 Kubernetes、Docker Swarm 和 Mesos DC/OS。随着 Kubernetes 变得越来越受欢迎，微软的重心显然已经转移到了那个编排器。微软甚至对其服务进行了重新命名，称之为“天青 Kubernetes 服务” ( **AKS** )将重点放在了 Kubernetes 上。
AKS 为您管理 Azure 中托管的 Kubernetes 或 Docker Swarm 或 DC/OS 环境，因此您可以专注于想要部署的应用，而不必关心基础架构的配置。用微软自己的话说，它声称:
AKS makes it quick and easy to deploy and manage containerized applications without container orchestration expertise. It also eliminates the burden of ongoing operations and maintenance by provisioning, upgrading, and scaling resources on demand, without taking your applications offline.
# 摘要
本章演示了为什么首先需要编排器，以及他们在概念上是如何工作的。它指出了在写作时哪些编排器是最突出的，并讨论了各种编排器之间的主要共性和差异。
下一章将介绍 Docker 的原生管弦乐手，名为 SwarmKit。它将详细介绍 SwarmKit 用来在内部集群或云中部署和运行分布式、弹性、健壮和高可用性应用的所有概念和对象。
# 问题
回答以下问题来评估您的学习进度:
1.  为什么我们需要一个编排器？列举两到三个理由。
2.  说出指挥者的三到四个典型职责。
3.  说出至少两个容器指挥者，以及他们背后的主要赞助者。
# 进一步阅读
以下链接提供了对编排相关主题的一些更深入的了解:
*   *Kubernetes-https://kubernetes.io/*生产级流程编排
*   *https://docs.docker.com/engine/swarm/*DockerSwarm 模式概述
*   *中间层-http://bit.ly/2GMpko3*的容器编排服务
*   *容器和编排在* [和](https://bit.ly/2npjrEl)http://bit.ly/2DFoQgx 解释