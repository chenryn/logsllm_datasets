title:Obfuscation Revealed: Leveraging Electromagnetic Signals for Obfuscated
Malware Classification
author:Duy-Phuc Pham and
Damien Marion and
Matthieu Mastio and
Annelie Heuser
Obfuscation Revealed: Leveraging
Electromagnetic Signals for Obfuscated
Malware Classification
Duy-Phuc Pham
PI:EMAIL
Univ Rennes, CNRS, Inria, IRISA
Rennes, France
Mathieu Mastio
PI:EMAIL
Univ Rennes, CNRS, Inria, IRISA
Rennes, France
Damien Marion
PI:EMAIL
Univ Rennes, CNRS, Inria, IRISA
Rennes, France
Annelie Heuser
PI:EMAIL
Univ Rennes, CNRS, Inria, IRISA
Rennes, France
ABSTRACT
The Internet of Things (IoT) is constituted of devices that are expo-
nentially growing in number and in complexity. They use numerous
customized firmware and hardware, without taking into considera-
tion security issues, which make them a target for cybercriminals,
especially malware authors.
We will present a novel approach of using side channel informa-
tion to identify the kinds of threats that are targeting the device.
Using our approach, a malware analyst is able to obtain precise
knowledge about malware type and identity, even in the presence
of obfuscation techniques which may prevent static or symbolic
binary analysis. We recorded 100,000 measurement traces from an
IoT device infected by various in-the-wild malware samples and
realistic benign activity. Our method does not require any modifi-
cation on the target device. Thus, it can be deployed independently
from the resources available without any overhead. Moreover, our
approach has the advantage that it can hardly be detected and
evaded by the malware authors. In our experiments, we were able
to predict three generic malware types (and one benign class) with
an accuracy of 99.82%. Even more, our results show that we are able
to classify altered malware samples with unseen obfuscation tech-
niques during the training phase, and to determine what kind of
obfuscations were applied to the binary, which makes our approach
particularly useful for malware analysts.
CCS CONCEPTS
• Security and privacy → Malware and its mitigation.
KEYWORDS
malware classification, obfuscation, side-channel information
ACM Reference Format:
Duy-Phuc Pham, Damien Marion, Mathieu Mastio, and Annelie Heuser.
2021. Obfuscation Revealed: Leveraging Electromagnetic Signals for Ob-
fuscated Malware Classification. In Annual Computer Security Applications
Publication rights licensed to ACM. ACM acknowledges that this contribution was
authored or co-authored by an employee, contractor or affiliate of a national govern-
ment. As such, the Government retains a nonexclusive, royalty-free right to publish or
reproduce this article, or to allow others to do so, for Government purposes only.
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8579-4/21/12...$15.00
https://doi.org/10.1145/3485832.3485894
Conference (ACSAC ’21), December 6–10, 2021, Virtual Event, USA. ACM, New
York, NY, USA, 14 pages. https://doi.org/10.1145/3485832.3485894
1 INTRODUCTION
IoT world is growing at a breathtaking pace, from 2 billion objects
in 2006 to a projected 200 billion by the end of 20201, which is
approximately 26 smart objects for every human being on Earth.
Naturally, they are increasingly targeted by cyber criminals due
to their occurrences, availability, and the ability to use infected
devices for further attacks on their architecture.
IoT devices are given higher processing power, and some of
them are running fully functional operating systems (OS) with
multi-core processors. This increases the attack surface by making
them vulnerable to similar threats as general purpose computers,
in particular, malware exploitation.
Analysis systems relying on static and dynamic features still
have various drawbacks for malware analysts. In particular, static
features can be easily manipulated by packing or obfuscating tech-
niques [26], whereas dynamic software-based monitoring may be
detectable (e.g. by sandbox fingerprinting [37]) to terminate the
malware execution, and thus hinder the possibility of behavioral
analysis [1]. Moreover, unlike computer systems and servers, em-
bedded cyber physical system may not have enough resources or
accessibility to allocate to malware analysis solutions. All these
factors make it difficult for malware analysts to automatically gain
proper information about collected malware samples (i.e. nature,
evolution, etc.) to be able to mitigate the security risks.
In this paper, we concentrate on the ElectroMagnetic (EM) field of
an embedded device as a source for malware analysis, which offers
several advantages. In fact, EM emanation that is measured from
the device is practically undetectable by the malware. Therefore,
malware evasion techniques cannot be straightforwardly applied
unlike for dynamic software monitoring. Also, since a malware
does not have control on outside hardware-level events (e.g. on EM
emanation, heat dissipation), a protection system relying on hard-
ware features cannot be taken down, even if the malware owns the
maximum privilege on the machine. Therefore, with EM emanation
it becomes possible to detect stealthy malware (e.g. kernel-level
rootkits), which are able to prevent software-based analysis meth-
ods. Another advantage is that monitoring EM emanation does not
1https://www.intel.com/content/www/us/en/internet-of-things/infographics/guide-
to-iot.html
706ACSAC ’21, December 6–10, 2021, Virtual Event, USA
D.P. Pham and D. Marion et al.
require the alternation of the device in order to analyze it. In other
words, it does not rely on device architecture and OS or without
any computational overhead.
Previous works using EM emanation and power consumption
investigated the detection of malware [2, 20, 31], abnormal be-
haviour [36], or distinct control flow tracking [38]). These works
are in very constrained and static systems (in the case of anomaly
detection) and mostly analyzed only laboratory-grown malware
samples without any variations. This naturally raises the question
of realistic evaluation:
What happens if the executable from embedded devices is perform-
ing malicious behaviors under obfuscation?
While malware detection concerns with the process of detecting
the presence of malware whether a specific program is malicious or
benign [18], malware classification refers to the process of distin-
guishing the unique types of malware from each other based on the
identified malicious patterns. In this work, we derive a framework
that is capable to classify real-world malware samples including
protection mechanisms against static and dynamic malware anal-
ysis using only EM emanation from the device. Furthermore, we
aim at classifying into malware types, family, possible protection
mechanism, previously unseen variants, or even distinct executable
classification, which makes our framework particularly suited for
malware analysts.
Our analysis consists of three main phases:
(1) Malware execution and measuring EM emanation: Within
our secured and randomized setup, we execute the malware
sample while measuring EM emanation from the outside of
the device without manipulating any internal behavior.
(2) Data analysis and preprocessing: The raw captured measure-
ment traces include a large amount of noise. Thus, we anal-
yse our data by the time-frequency domain, and select most
suitable frequency bands.
(3) Malware classification: Given the 2D data, we derive deep
neural models and compare them to more simplistic machine
learning algorithms.
Our malware selection encompasses three types, which are ac-
curately representing malware targeted on IoT devices in the wild:
DDoS, ransomware, and kernel rootkits. To be compliant with real-
world scenarios and to investigate the robustness of our approach,
we extend our dataset by applying various software analysis pro-
tection mechanisms to the malware binaries. Including obfuscation
techniques gives us new outcomes that have never been studied in
the state-of-the-art. First, we determine if code obfuscation tech-
niques (e.g. code rewriting, camouflage instructions, ...) can actually
hinder our approach. Second, we derive the robustness of our ap-
proach against unseen malware samples, by creating a scenario
where our system tries to predict samples with unknown obfus-
cation. This evaluation is of great importance due to the rapid
evolution of malware variations and obfuscation created by attack-
ers. Finally, we investigate if we are able to predict if an obfuscation
has been applied, and to which technique it belongs.
In summary, this paper makes the primary contributions:
(1) Obfuscated ARM malware. We put in place a represen-
tative set of malicious ARM binaries, on which we applied
various obfuscation techniques. By integrating obfuscation
techniques against software-based malware analysis systems,
we are able to determine if these techniques also hinder anal-
ysis based on EM emanation, and if we can distinguish the
applied obfuscation procedures independent on the executed
binary. To the best of our knowledge this has never been
studied before, provides the largest distinct malware sample
dataset, and is crucial for practical malware analysis.
(2) Generic side-channel analysis environment. Our approach
does not make any alteration to the target device. In particu-
lar, we do not require software monitoring, precise triggering,
or any additional overhead on the device. In our experiments,
we use a multiprocessor hardware environment running a
fully-functioning Linux OS to be applicable to realistic IoT
systems in the wild, use a random initialized analysis envi-
ronment, and “complex” benign activities.
(3) Robust and resistant analysis techniques. We derived a
methodology on how to effectively extract suitable informa-
tion about the binary, taking as input the raw EM traces. Our
approach consists of preprocessing by selecting the most
relevant frequency bands over time and then classifying in
various scenarios with neural network models and simplistic
machine learning models. Results show that our methodol-
ogy is resistant against virtualization, packing, and static
code rewriting.
(4) Experimental scenarios compliant to malware analysts.
We compile various scenarios, each of them representing a
real world malware analysis use case: type and family mal-
ware classification, exact malware executable profiling, virtu-
alization and packer identification, obfuscation classification,
and the classification of unseen obfuscated variants. These
scenarios go way beyond detection scenarios considered in
the state-of-the-art. Also, using our analysis on obfuscation
we are the first to discuss the difficulties of malware evasion
against our methodology.
(5) Open-source. The resources related to this work are pub-
licly available at https://github.com/ahma-hub/analysis/wiki,
where we provide our source code, datasets, malware classi-
fication models and raw results of our experiments.
2 STATE-OF-THE-ART
One of the first works on malware detection [7], even though limited
due to its constrained scenario, showed that the collection of power
consumption on medical embedded devices is suitable to detect mal-
ware. [20] presents a malware detection solution by exploiting EM
side-channel signals from embedded devices through Multi-Layer
Perceptron (MLP) to detect handcrafted implementations mimick-
ing malware. A common idea to take advantage of side channel
information to detect anomalies is to observe how the system be-
haves in its normal state, and to raise an alert when a new behavior
is recorded. In [19, 33], the authors propose to detect malware by
observing EM signals. During the monitoring, if the observed EM
emanations deviate from the previously observed patterns, this is
reported as an anomalous or malicious activity. [24] uses Short
Time Fourier Transform (STFT) and Kolmogorov–Smirnov test to
detect anomalies inside and between the loops through peaks in
the EM spectrum. In [31], the authors put a wide-bandwidth radio
707Obfuscation Revealed: Leveraging Electromagnetic Signals for Obfuscated Malware Classification
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Article
SCM
detection
Anomaly
detection
SCM
classification
Real-world
SCM
Real-world
analysis en-
vironment
Samples
size
Varia-
tions
Benign
dataset
Window
size
Open
source
Device under test
WattsUpDoc [7]
IDEA [19]
REMOTE [33]
Wang et al. [36]
Khan et al. [20]
DeepPower [12]
Chawla et al. [6]
✓
-
-
-
✓
✓
✓
Our paper
(✓)*
-
✓
✓
✓
-
-
-
-
-
-
-
-
-
✓
✓
✓
✓
-
✓
-
-
✓
✓
✓
-
-
-
-
-
-
-
✓
15
3
3
1
3
5
137
35
-
-
-
-
-
-
-
✓
-
-
-
-
-
-
✓
✓
5s
<40µs
<10ms
10s
<150µs
1s
10s
2.5s
-
-
-
-
-
-
-
✓
MIPS/ARM
OpenWRT
Android Intrinsyc
Open-Q 820
Multi-core, 900 Mhz
ARM
Windows XP Embedded
664 MHz
AT328p 16MHz, Cortex
A8
Single-core ARM 1Ghz
Raspberry Pi, Arduino,
Siemens PLC
Cyclone II FPGA & NIOS
II soft-processor
Table 1: Comparison with related works on side-channel malware (SCM) analysis using EM or power consumption. (*): Our
paper aims at SCM classification, however we also achieve good results in SCM detection scenario (Section 7.2).
frequency probe over the processor of the device and used a support
vector machine to infer on the values of the registers. They monitor
if the hamming distance of the registers deviates from the known
signature, and use this information to detect cyberattacks. In [36],
they use Autoencoders, Long Short-Term Memory (LSTM) units,
and MLP on power consumption data to detect anomalies in the
system. [12] shows an approach to detect malicious activities on
IoT devices via analyzing power side-channel signals using Con-
volution Neural Networks (CNN). The use of physical hardware
information, and particularly side-channel information, represents
a great advance for malware detection. A comparison of the works
using EM or power consumption to analyse malicious activities is
provided in Table 1.
While some of the above-mentioned related works are success-
fully detecting malicious activity, there is a lack of research in the
field on in-the-wild malware detection instead of proof-of-concept
samples that may reflect only particular parts of realistic malware
samples. Even more, none of the related works investigated the
scenario of benign datasets and variants such as packed or ob-
fuscated malware to test the robustness of their system. Except
[6] considered CPU benchmark applications for Android benign
dataset, however, it is very specific stress processes that are easy to
detect and classify rather than a wide-range dataset of cleanware,
long-running programs and device background services. Moreover,
most of these works are using anomaly detection with low sample
size, which has the advantage of detecting unknown threats, but is
generally prone to raise a large number of false positives. Indeed,
anytime a new feature is introduced to the system, it is detected as
malicious. They only exploit an isolated malware execution environ-
ment (e.g. disabled outside connections), or an undefined malware
execution environment, thus prone to evasion techniques and un-
clear if the malware actually executes malicious behaviors. Finally,
none of them, to the best of our knowledge, are able to perform
wide-ranging classification models in real-world malware analy-
sis, i.e., determining precisely the type, obfuscation or variant of
the malware infecting the system, due to their restricted malware
dataset or analysis methods.
3 BACKGROUND ON DATA ANALYSIS
3.1 Feature extraction and transformation
Extracting features within large measurement traces can be a chal-
lenging step. In the field of physical side-channel analysis of cryp-
tographic algorithms, several methods have been published re-
lying on statistical measures such as mean and variance, for ex-
ample, NICV [5], SOST/SOSD [14], the Pearson correlation coef-
ficient [15, 22], TVLA [32]. In our methodology we will rely on
NICV as it is straightforward to implement, time efficient, and
not model-agnostic (contrary to the TVLA). NICV is defined as
NICV(X , Y) = Var[E[X |Y]]
Var[X] with X being the recorded data, Y being
the labels and Var (resp. E) the variance (resp. the expectation).
A popular supervised feature transformation algorithm is the
linear discriminant algorithm (LDA) that finds a linear combination
of features separating two or more classes [16]. LDA explicitly tries
to model the difference between the classes of data which makes it
a suitable preprocessing algorithm in case of large data. Note that
the features are transformed into another feature space such that
original dependencies (shapes, patterns) between feature may be
lost.
3.2 Machine and deep learning models
The Naive Bayes (NB) classifier is based on applying Bayes’ theo-
rem with a strong (naive) independence assumption between the
features. It is further based on a Gaussian distribution assumption,
which is most often not given in practise, but has still shown com-
parable performances in the physical side-channel domain when
revealing secret keys [28]. The strong benefit of NB is its low re-
source requirement, fast computation power, and no requirement
of tunable parameters.
Another popular machine learning classification algorithm is
Support Vector Machine (SVM) [16]. The principle behind the SVM
is finding hyperplanes that maximize the features’ separation in
classes. Using a kernel trick and transforming features into a higher-
dimensional feature space (e.g. by using the Gaussian radial basis
function), SVM is able to perform nonlinear classification. SVM is
slightly more resource demanding than NB which comes typically
with an increase of classification accuracy [28].
708ACSAC ’21, December 6–10, 2021, Virtual Event, USA
D.P. Pham and D. Marion et al.
A generic neural network architecture widely used for a variety
of purposes is a MLP. It tends to learn very specific features of the
training data and does not always generalize well on new data. On
the other hand, CNN has been developed specifically for image
processing. They learn high level features of the images instead
of focusing on low level data like MLPs, which makes them more
flexible and less prone to overfit to the training dataset. We will
concentrate in this work on these two architectures.
4 (OBFUSCATED) MALWARE & BENIGN
One of the most important blocks in building malware analysis
systems, is the construction of datasets. In this paper, we aim at
being realistic and to include common obfuscation techniques that
are used by today’s malware designers to avoid detection by hiding
known signature and behavior or by making it more difficult to
reverse engineer. While general purpose computers usually run
on common architectures such as x86, embedded IoT devices are
developed for a broad range of architectures, such as ARM, MIPS,
PowerPC, etc. Major problems related to the diversity of the possible
target IoT environments are described in [11]. This paper, at the
time of writing, currently supports ELF ARM 32-bit architecture
which can be executed properly on Raspberry Pi (see Section 6.1). In
the following, we discuss the creation of our malicious and benign
dataset.
4.1 Malware dataset
To understand the scope of ARM malware on IoT devices, we con-
duct a study on 4,790 32-bit ELF ARM malware samples collected
from Virusign. Thereafter, we extract AV labels for each sample
from VirusTotal reports to obtain malware variant name. To get
normalized labels that can be used for classification, we use AV-
Class. It selects the top ranked corresponding family name through
plurality vote. On collected dataset, AVClass was able to associate
the collected malicious ARM samples to 19 different families. Mirai
(43.5%) and Bashlite (35.8%) dominate the dataset. This result is con-
sistent with previous epidemiologic studies of IoT malware [11, 23].
To construct a representative malware dataset, we use 3 different
well-known malware variants: DDoS (mirai, bashlite), Ransomware
(gonnacry), and kernel rootkits (keysniffer, maK_It). In our study,
we reviewed their codebase to understand their malicious behaviors
described as follows:
Bashlite creates a TCP communication to C&C server, then ex-
changes IRC commands and messages. Control commands and
common behaviours of bashlite consist of scanner, password brute-
force, TCP and UDP Flooding.
Mirai adopted concepts from previously discussed bashlite, with
improved features such as anti-debugging, self-hidden, data obfus-
cation and botkiller which terminates bots from other families.
Gonnacry is an active ransomware variant that is open sourced
in Python and C for research purpose. It finds all files in user’s
home directory, then encrypt those with matching extensions. The
malware starts its encryption routine and creates a desktop file
that will be useful for the decryptor to access the path, key and
IV. We generate multiple malware variants from original gonnacry
by extending with other crypto schemes such as AES and DES, in
addition to the original Blowfish encryption algorithm.
Keysniffer is a Linux kernel module which has functionalities to
hook and record keys pressed in the keyboard events to debugfs.
MaK_It shares the same rootkit ability to keysniffer, with addi-
tion of kernel module self-hidden, packet sniffer and reverse-shell
backdoor.
4.2 Obfuscation
Malicious codes commonly use packers, obfuscators, and polymor-
phism to hinder static-analysis and evade detection by making
analyses difficult to reverse-engineer. Collberg et.al [10] defines
T−→ P′ be a transfor-
obfuscating transformation as follows: Let P
mation of a source program P into a target program P′. P
T−→ P′ is
an obfuscating transformation if
(1) P and P′ have the same observable behavior,
(2) P′ is harder to analyze than P, and
(3) P′ is no more than polynomially slower than P.
T−→ P′ to be a valid obfuscating
More precisely, in order for P
transformation, the following conditions must hold: if P fails to
terminate or terminates with an error condition, then P′ may or
may not terminate. Otherwise, P′ must terminate and produce the
same output as P.
Previous research classifies code obfuscation schemes into three
main categories: data obfuscation, static code rewriting, and dy-
namic code rewriting. We use combinations of obfuscation trans-
formations to enrich our datasets with static code rewriting that
consists of Opaque predicates, Bogus control flow, Instructions substi-
tution and Control-flow flattening, and dynamic code rewriting such
as Packer and code Virtualization. To evaluate the robustness of our
methodology and to explore possible protection techniques against
side-channel monitoring, we apply state-of-the-art packers and
obfuscators like UPX [25], Tigress [9], and Obfuscator-LLVM [17].
4.3 Benign dataset
The selection of a benign dataset is important to not only increase
the difficulty of detection but also ensure the quality of classifica-
tion. The benign samples must generate random activities such as
computations, background processes with malware-free, or usual
activities on embedded IoT devices. We generate benign datasets
by collecting ARM executables from a fresh installation of Linux
system. This similar approach of constructing benign dataset has
been conducted from other generic malware studies [3, 21] outside
from EM analysis. Furthermore, we complement benign executa-
bles under a layer of UPX packer to blend benign samples with
packer. Additionally, the usual benign activities for an embedded
IoT device such as Linux utilities, device sleep, photo capture, net-
work connections, as well as long duration of executable runtime
such as media player, camera capture, video encoder, data backup,
data (de)compression (Table 2). This collection varies from short
to long duration of executable runtime, and from low to high CPU
consuming processes.
Notably in previous studies using EM emanation, the construc-
tion of benign dataset is not considered, or benign activity is only
associated with either free-malware activities or benchmark soft-
ware [6, 19, 24, 33, 35]. It simplifies detection drastically and is not
realistic where malware, update services as well as IoT activities
709Obfuscation Revealed: Leveraging Electromagnetic Signals for Obfuscated Malware Classification
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Activities
Executables
vdir
ls
as
dmesg
grep
hostname
bunzip2
more
cat
ed
sleep
objdump
ss
bzip2
find
findmnt
rm
cd
ip
tar
Linux Utilities
mknod
zgrep
zmore
touch
less
wget
Network
gunzip
Compression
uncompress
dd
Data backup
python
Scripting
Photo & Video
raspistill
Video Encoding MP4Box
Audio player
mpg321
raspivid
Table 2: Linux binaries and activities used in benign dataset
may share the same behaviors by calling executables from system
and third parties.
5 REAL-WORLD MALWARE ANALYSIS
FRAMEWORK
Figure 1: Illustration of our complete malware classification
framework. (i) Data acquisition: from malicious binary exe-
cution to (noisy) EM measurements; (ii) Data preprocessing:
from (noisy) EM measurements to exploitable data; (iii) Mal-
ware classification: from exploitable data to malware labels.
We propose a malware classification framework that takes as an
input an executable and outputs its predicted label by solely relying
on EM side-channel information. Figure 1 illustrates our workflow,
which will be detailed within the next subsections. First, we define
our threat model and we collect EM emanation while the malware
is executed on the target device. We setup an infrastructure to be
able to execute malware with a realistic user environment while
preventing any infection of our host controller system. Thereafter,
as the collected data is very noisy, a preprocessing step is required
to isolate relevant informative signals. Finally, using this output,
we train neural network models and machine learning algorithms
in order to classify malware types, binaries, obfuscation methods,
and detect if an executable is packed or not.
5.1 Threat model
In general, malware analysts gather sets of malware from online
feeds of intrusion detection systems and community database. In
this threat model, malware analysts possessed real-world malware
sets and physical target devices. Real-world malware feeds presum-
ably contain unknown variants which exploit evasion techniques
and attack a wide range of Linux device (e.g. Mirai variants ac-
tively infect Linux IoT devices and obfuscate its encoded strings).
By leveraging the combination of bare-metal analysis and EM (Fig.
1), it avoids the necessity of software analysis tools update such as
sandbox, hooking and anti evasion techniques. Moreover, malware
analysts are fully able to control and customize their analysis en-
vironment in the most advantageous way by simulating network
and setting up user synthetic environment. Therefore simulating
side-channel noise, distant EM monitoring, random user activities,
multiple malware attack the same device simultaneously are not
their consideration. The proposed analysis framework supports a
generic OS, so that it is applicable to any kind of malware with
UNIX, from simple BusyBox utilities and Bash commands to ELF
malware and high-level scripting (e.g. Python). Unlike FPGA-based
systems malware detection approach that executes the samples on
restricted bare-metal environment.
5.2 Data acquisition by dynamic malware
execution
The first part of our framework relates to the data acquisition that
can be divided into dynamic malware execution and electromagnetic
monitoring.
5.2.1 Realistic malware execution environment. Traditional dynamic
malware analysis solutions were built upon virtualization machines
or emulation, which leave a large number of system artifacts for eva-
sive malware to exploit [30]. In particular, sophisticated malware
authors exploit fingerprints inside analysis system (e.g. number
of cores, network MAC address, etc.) to avoid malware analysis
or detection. Besides, in-guest monitoring components to observe
malware behaviors (e.g. syscall/API hooking, registry monitor, etc.)
also leave artifacts for malware evasion. One way to prevent these
artifacts is to patch the exploitable components of the virtual system
such that these are indistinguishable from a real machine. How-
ever, this approach only guarantees to known evasion techniques.
Another way is to implement a transparent analysis system that
Data acquisitionDataset variationsDatasetgenerationSynthetic userenvironmentDynamic malware executionData storageEMData preprocessingSpectrogramFeatures selectionTime domainSTFTMalware classificationMLPCNNSVMNB710ACSAC ’21, December 6–10, 2021, Virtual Event, USA
D.P. Pham and D. Marion et al.
performs hardware virtualization extensions, to keep the CPU exe-
cution semantics of the host. It is fundamentally infeasible to make
it perfectly transparent, since this system can be detected by timing
attacks and CPU identification.
To overcome these difficulties, we propose an infrastructure
leveraging side-channel information from a bare-metal sandbox
rather than emulators or virtual machines. Additionally, an unre-
alistic configuration will not be able to trigger malware activities,
so that we propose spoofed C&C servers which receive network
connections and randomly returns control commands as well as
a synthetic user environment dedicated for embedded malware
which will be detailed in Section 6.1.2. We have confidence that
bare-metal malware analysis does not expose any instrumentation
indicators, and side-channel information will give us a snapshot
of behavioral analysis. To prevent analysis information leakage or
infection to the analyst’s host machine, a local switch router and
firewall under a controlled network are needed.
5.2.2 Electromagnetic monitoring. In the data acquisition proce-
dure, the controller machine sends binary samples to the target
device. The controller server is responsible for distributing sam-
ples to one or more embedded devices as well as collect recorded
EM traces. We use a malware initiator to send trigger signals from
the target device to oscilloscope through GPIO pin-outs and let
the oscilloscope start its recording session. Note that the intended