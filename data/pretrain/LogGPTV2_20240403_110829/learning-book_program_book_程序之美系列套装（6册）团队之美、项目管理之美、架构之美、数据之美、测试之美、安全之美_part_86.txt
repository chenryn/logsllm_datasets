要谈及的内容。
在指出如何制定更好的进度表之前，我们首先要去了解进度表能够
解决什么样的问题。如果它们是不可靠的，我们为什么还要因为它
如何利用时间的。
进度表有三项目的
所有的进度表，不管是宴会计划，还是网站更新，都有三项功能。
第一，是对什么时候完成任务的承诺。进度表在参与者之间提供了
一份合同，确定每个人在一个特定的时间内要提供什么。一般而
言，当人们考虑项目进度的时候，这是他们第一个要想的目的。进
度通常向外强调，强调于项目团队以外而不是以内。因为，进度是
用来帮助达成一份交易，或者遵从于客户的时间表。通常客户明确
477
---
## Page 479
地要为这一及时性付费，就像他们为所提供的其他服务付费一样
（考虑一下UPS或者FedEx快递业务）。为了使客户或者合作伙伴能
够基于一项给定的项目做出计划，大家要在什么时间能够完成特定
的任务上达成一致意见。
进度表的第二个作用，是鼓励每个人把自己的工作看作整体的一部
分，并且全力把自已的工作和他人的工作结合起来。如果没有一个
进度表来说明在某个特定的时间和日期内必须要完成某些任务，就
不可能让大家互相团结和依靠起来。没有进度表，每个人只会关注
他自已的任务，而不去考虑他的工作是否会影响别人。
只要当写下详细计划，旁边附上名字的时候，才可以真正地做些考
虑和假设。即使是针对小的团队或者单独作战的个人，也是要这
样。在进度表中，有一种心理上的力量，因为它对众宣布了你要履
行的承诺。人们很难去忘记或者忽略那些贴在走廊里的白板上的东
西，它们提醒着团队要去做哪些事情。尤其对于项目经理而言，一
张合适的进度草稿，会让你提出“关于现实情况如何"的问题，也会
让你在这个项目要求做些什么和哪些能够实现之间进行比较。
这种心理上的作用被称为强迫功能（Forcingfunction）。强迫功能
来自于任何放在那里就能自然地道使视野、态度或者行为的改变的
事物身上。进度表对项目而言，就起到一种重要的强道功能。如果
进度表能够被项目经理合理地使用，它就会迫使每个人认真考虑他
们所要做的工作。这种强道功能是迈向实现项目潜力的重要的一
步。即使进度出现问题，被增加一倍，或者减半，因为制定进度而
带来的承诺和人与人之间的联系还是会被保留下来。因此，即使进
度表本身后来被证明是十分不准确的，但是进度表的第二个目的已
经实现了而且是非常物有所值的。例如，如果一个项目实现得非常
晚，但是，进度表的存在依然能够保证它能够得以最终完成。
进度表的第三个功能就是提供了一种能够追踪项目和把工作分成若
干个易于管理的小块的工具。把工作分成一天或者两关的量，能够
帮助团队更好地理解他们到底需要做些什么。想像一下，一个建筑
低的衡量办法，对于任何人来说，包括建筑者本身，都很难理解它
所要求的工作的。但是，如果建筑者能够提供一份每周的要求细
目，人们就容易理解什么时间应该完成什么样的任务，哪些工作是
要优先完成的，并且会提出一些有意义的问题和澄清一些假设。从
478
---
## Page 480
项目经理的角度来看，合理的进度表能够给项目提出一个清晰的轮
廊，尽早地排除困难和蔬忽，同时增加事情成功的机率。
项目越大越复杂，进度表也就越难制定。在一些较大的项目上，更
多地依赖人和能够更好地影响他人的决定与时间选择。当你有少数
几个人组成一个小团队时，成员之间更容易发现其他人工作上的问
题。进度表在一个小团队上出现问题可不是一条好消息，但是在这
样的案例中，半天的事故只是代表三个人付出额外的半天的努力，
所以恢复到正常状态还是可能的。有的人熬一晚就行了，或者可能
的话，整个团队一起来帮着赶时间。但是，在一些较大项目上，拥
有数十或数百的成员和模块，一天的延迟可能会迅速叠加，并且产
生各种各样的难以预料的问题。而这些问题的严重性往往超过了团
队可以恢复的程度。无论是小团队还是大团队，进度表给那些经理
和善于计算的人提出了各种问题，做出调整的机会，并且通过暴露
和回应这些问题来帮助团队工作。
在脑海中知道了这三项功能，你就会很容易明白完美的进度表并不
能解决项目本身带来的所有问题。进度表不能挽救糟糕的设计或者
编程实践，它也不能保护一个项目免遭无力的领导，不明确的目标
或者低效的沟通。因此，即使花了很多的时间去设计进度表，它们
具去管理和驱动项目了。记住这一点，现在是要带着这些词汇来探
究软件开发的方法一—这是项目管理的重型机械。
银弹和方法论
有很多各种各样的系统，可以计划和管理软件并发过程。这些系统
通常被称为方法，这些方法就是一整套旨在达成某种特定结果的实
践。一般软件开发方法包括瀑布模型（waterfallmodel）、螺旋模型
（spiralmodel）、快速应用开发（RapidApplications
development）、极限编程（ExtremeProgramming）和特征驱动开发
（Feature-drivendevelopment）等。所有这些方法都是力图解决相似
的组织和项目管理问题。它们都各有优点和缺点，你要利用自己的
知识和实践经验来决定哪种方法适合哪一个项目。
但是，我在本章以及本书中的目的，并不是要比较各种方法。相
反，我认为为了成功地使用这些方法，有必要去掌握这些方法背后
的一些概念。在所有的案例中，都要调整方法，以适应团队和项目
的特殊需要，而这只有在你拥有比方法本身更深入的知识时，才能
479
---
## Page 481
做到这一点。因此，如果能够按照本章以及本书所讲述的方法，你
就会更加有可能提高工作的效率，并且不依赖于你所使用的方法。
如果是出于说明某些问题的需要，我会对某种方法进行解释，但是
如果你想购买方法论方面的书，你就要到其他地方去了[2l。
虽然软件开发方法非常重要，但是它们并非灵丹妙药。最糟糕的事
情莫过于盲目地遵循一些根本不起作用的原则，而人们的盲从仅仅
是因为这些原则出自某些名著，或者是因为它们由某些十分令人敬
重的名人提出。通常，迷恋这种方法就是领导力陷入麻烦的一种危
险信号：管理者可能是试图卸下他们在官僚政治的程序中所面对的
各种挑战和责任，而这些程序往往掩盖了对真正领导作用的需求。
对于一个团队，更大的灾难可能就是通过固定的方法论所传递的信
号——什么对组织是最重要的。就像TomDeMarco在
《Peopleware》（DorsetHouse出版，1999年）中所写的那样：
在工作场所沉迷于方法论是高科技假象的另一实例。这来自于一种
看法：真正的关键是工艺。无论工艺的优点如何，都要为团队社会
关系的严重恶化付出代价。
把焦点置于方法和过程上，而非建立过程以支持人员，项目就会通
过限制个人的责献来开始安排进度过程。这会制定出很多必须遵守
的规则，而不是思考及调整或改进规则。所以，当你采用方法论
时，对其使用方式要非常小心：他不应该变成打击团队的东西L：
相反地，它应该支持、激励以及协助团队把工作做好（请参考第10
章获取关于过程的建议）。
特定方法论的使用绝非项目成功或失败的唯一理由；替而代之，有
许多因素会影响项目进度，而项目经理必须在安排工作进度前就了
解清楚这些。但在讨论这点之前，我们需要先说明进度表的构成。
进度表的样子
所有进度表都有一项基本规则：三分法。这是一种粗略的估算，像
是在信封背面草写那样，但这是理解进度表的最简单的方式。如果
你有过进度安排的经验，那么要有心理准备，我将会极度简化整个
过程。我这样做是为了提供最简单的立足点，以使于讨论什么容易
出错、为何会发生以及该怎么解决。
480
---
## Page 482
以下是三段工作的模型。把可用时间分成三段：一段用于设计，一
段用于实现，一段用于测试。根据你采用的方法论，这些阶段将有
不同名称，但所有方法论都把时间主要用在这三项活动上。在每一
天或每一小时，你都要知道应该做好什么（设计）、实际去做（实
现产品的代码）或者验证、分析以及改良已完成的事（测试）。
如规则所述，每天，除了要编写产品代码外，应该花些时间在计划
和设计的工作上，另外还要花些时间来作测试及改良（参见图2-
1）。这是世界上最简单的事，同时也是用来检查任何现有进度表
或者安排新进度表的最简单的方式。如果总体时间没有被大致地分
成这三类工作，就应该有能被充分理解的原因，来说明为何此项目
需要对时间作不均匀的分配。三分法中存在着分配的不平衡，例
如，测试时间可能比实现时间多20%，但只要深思熟虑过，就可以
接受。
设计
编程
测试
图2-1：普通的三分法项目进度表
考虑一个假设的Web开发项目：如果有你有6个星期的开发时间，第
一步就是把时间大概分成三份，然后利用这些时段，计算工作何时
可以完成。如果按此估算，发现时间不足以做到预期的水平，那么
一定是存在根本性错误。不是进度表必须修改，就是必须减少要完
成的工作量（或者降低产品的预期质量）。削减测试时间，只会因
为误导而增加实际编写程序代码的时间，或者产生难以管理和维护
的程序代码。三分法很有用，这会把项目的本质呈现出来。增加新
功能，不是只需程序员实现它即可，还必须有人来支付不可避免的
设计及测试成本。当进度落后时，那是因为没有考虑某些被隐藏或
被忽视的成本。
481
---
## Page 483
逐渐开发法（反项目的项目）
我们值得考虑一下的可能的最简单的情况，就是没有项目，所有的
工作都是逐一完成。当需求来到时，通过看看其他工作的情况对其
进行评估，然后置于进度表中的下一个可用项。有些并发团队、网
站并发人员或IT程序设计部门，大多以此方式工作。这些组织很少
会对大量工作进行投资或承诺。敏捷方法（稍后讨论）作为最自然
的组织工作的方式，通常适用于这些团队，敏捷方法强调灵活性、
简单性以及期待变化。如果你一次做儿项小工作（不是项目），那
么你可以通过我在本书所用的以项目为中心的实例，推断其可用之
处。
然而，三分法依然适用于这些情况。即使每位程序员都是单独做小
任务，他也可能花费三分之一时间用来了解需要做什么、三分之一
时间用来实际去做以及三分之一时间用来确定工作是否正常。他可
能经常会在这些时段中来回往返，但是，作为一种了解任何工作的
粗略估算方式，三分法适用任何规模的工作。
分而治之（大进度表=许多小进度表）
如果你检查大部分的软件并发方法论，都能看出三分法的轮廊。用
于设计或实现事物的特定目标和手段可能区别极大，但从最高层次
来看，想要的结果都是相似的。
对于规模更大或时间更长的项目，事情会变得复杂，此时，进度表
将被分成小片段，每个片段都有自身的设计、实现和测试时间。极
限编程（ExtremeProgramming，也称为XP）把每一片段称为一个选
代（iteration）：螺旋模型称之为阶段（phases）：同时，有些组织
称之为里程碑（milestones）。XP将这些时段长度定义为只有几个
星期，螺旋模型则定义为几个月，但其基本思想是相同的：为有限
的时间建立详细的进度。
项目预期的变化和修改越多，每个里程碑就应该越短。由于主要计
划已被分割成可控制的片段，这样可以降低进度表的整体风险。进
度表内不同时段之间的空档，提供了自然的机会来作调整，以改进
下一里程碑得以更精确地完成工作（我们将在第14章会讨论怎么
做）。
敏捷和传统方法
482
---
## Page 484