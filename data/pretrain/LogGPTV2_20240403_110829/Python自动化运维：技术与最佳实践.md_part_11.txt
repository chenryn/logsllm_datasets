---
## Page 87
过启动不同扫描方式实施病毒扫描并返回结果。实现代码如下：
描模式、扫描路径会传递到clamd，最后返回扫描结果给管理服务器端。
器开启clamd服务（监听3310端口），管理服务器启用多线程对指定的服务集群进行扫描，扫
62第一部分基础篇
#!/usr/bin/env python
本次实践通过ClamdNetworkSocketO方法实现与业务服务器建立扫描socket连接，再通
class Scan(Thread):
fromthreading
import pyclamd
import time
#-*-coding:utf-8-*
def run(self):
def
造方法，
try:
self.scanresult=""
self.connstr=""
self.scan_type=scan_type
Thread.
管理服务器（启动多线程）
init
Linux公社www.linuxidc.com
cd = pyclamd.ClamdNetworkSocket(self.IP,3310)
import Thread
elif self.scan_type=="multiscan_file":
cd.reload()
init_(self)
(self,IP,scan_type,file):
，参数初始化
self.scanresult="(0)\n".format(cd.multiscan_file(self.file))
图4-1
#探测连通性
集群病毒扫描架构图
扫描结果-
connection[ok]"
业务服务器集器（clamd：3310）
#选择不同的扫描模式
11
11
#创建网络套接字连接对象
---
## Page 88
病毒测试文件EICAR。
改，代码运行结果如图4-2，其中192.168.1.21主机没有发现病毒，192.168.1.22主机发现了
中，以便进行测试。
最后，启动扫描程序，在本次实践过程中启用两个线程，可以根据目标主机数量随意修
U'X5O!P&@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*!
生成带有病毒特征的字符串内容如下，复制文件/tmp/EICAR到目标主机的扫描目录当
void=open(/tmp/EICAR'，'w').write(cd.EICAR())
通过EICARO方法生成一个带有病毒特征的文件/tmp/EICAR，代码如下：
#cat/tmp/EICAR
for ip in IPs:
scanlist=[]
threadnum=2
i=1
scanfile="/data/www"
scantype="multiscan_file"
IPs=['192.168.1.21′,'192.168.1.22']
i+=l
if i8threadnum==0ori==len（IPs）:
scanlist.append(currp)
currp = Scan(ip,scantype,scanfile)
scanlist=[]
for task in scanlist:
for task in scanlist:
except Exception,e:
Linux公社 www.linuxidc.com
print task.scanresult
print task.connstr
task.join()
task.start()
self.connstr=self.IP+""+str(e)
else:
#指定启动的线程数
return
self.connstr=self.IP+" ping error,exit"
#存储扫描Scan类线程对象列表
time.sleep(1)
elif self.scan_type=="scan_file":
self.scanresult="(0)\n".format(cd.scan_file(self.file))
#指定扫描路径
#等待所有子线程退出，并输出扫描结果
#指写扫描模式，支持multiscan_file、contscan_ile、scan_file
#启动线程
#追加对象到列表
#线程挂起1秒
#打印服务器连接信息
#打印扫描结果
#创建扫描 Scan类对象，参数(IP，扫描模式，扫描路径)
#扫描主机列表
#当达到指定的线程数或IP列表数后启动、退出线程
第4章
Python与系统安全
8
---
## Page 89
果，下面介绍PortScannerO类的一些常用方法。
具的端口扫描功能封装；另一个为PortScannerHostDictO类，实现存储与访问主机的扫描结
4.2.1模块常用方法说明
员完成自动扫描任务和生成报告。
作为 nmap命令的Python封装，可以让 Python很方便地操作 nmap 扫描器，它可以帮助管理
到发现异常时可以在第一时间发现并处理，将安全风险降到最低的目的。python-nmap 模块
迫在眉睫。本节主要讲述通过Python的第三方模块 python-nmap 来实现高效的端口扫描，达
口暴露在互联网上，大大提高了被入侵的风险。因此，定制一种规避此安全事故的机制已经
损失。比如由于系统管理员误操作，导致核心业务服务器的22、21、3389、3306等高危端
的攻击是造成网络不安全的主因。稍有疏忽将给黑客带来可乘之机，给企业带来无法弥补的
4.2
64第一部分基础篇
?
本节介绍python-nmap模块的两个常用类，
如今互联网安全形势日趋严峻，给系统管理员带来很大的挑战，网络的开放性以及黑客
 scan(self,hosts=127.0.0.1,ports=None,arguments=-sV)方法，实现指定主机、端口、
python-nmap 模块的安装方法如下：
蓝心
以用“ scanme.nmap.org"、
nmap命令行参数的扫描。参数hosts 为字符串类型，表示扫描的主机地址，格式可
python setup.py install
cd python-nmap-0.1.4
wget http://xael.org/norman/python/python-nmap/python-nmap-0.1.4,tar.gz
实现高效的端口扫描器
html
Linux公社www.linuxidc.com
68
图4-2集中式病毒扫描程序运行结果
#安装nmap工具
、“198.116.0-255.1-127"、
Copup
：一个为PortScannerO类，实现一个nmap工
'Eicar-T
Test-Signg
、“216.163.128.20/20”表示；参数
---
## Page 90
{'state':u'open',
>>>
tcp(self,port)方法，返回扫描TCP 协议 port（端口）的信息，如：
all_tcpO（self)方法，返回TCP协议扫描的端口，如：
[u'tcp']
all_protocols(self)方法，返回扫描的协议，如：
>>>nm['192.168.1.22'].state()
state(self)方法，
u'SN2013-08-022'
>>>nm['192.168.1.22'].hostname()
口hostname(self)方法，返回扫描对象的主机名，如：
以下介绍PortScannerHostDictO类的一些常用方法。
[u'192.168.1.21',u'192.168.1.22']
口all_hosts(self)方法，返回 nmap 扫描的主机清单，格式为列表类型，如：
>>nm['192.168.1.22'].a1l_protocols()
.dn
fu'tcp':{'services':u'22,80',
口 scaninfo(self) 方法，返回 nmap 扫描信息，格式为字典类型，如：
u'nmap-ox-
口command_line(self)方法，返回的扫描方法映射到具体 nmap 命令行，如：
nm.scan('192.168.1.21-22',22,80)
nm=nmap.PortScanner()
skipped)，如：
>>
arguments 为字符串类型，表示 nmap 命令行参数，格式为“-sU-sX-sC"，例如：
ports 为字符串类型，表示扫描的端口，可以用“22,53,110,143-4564”来表示；参数
nm['192.168.1.22'].tcp(22)
nm[*192.168.1.22'].a11_tcp()
nm.scaninfo()
nm.command_line()
Linux公社
-p22,80-sV 192.168.1.21-22
返回扫描对象的状态，
'reason':
: www.linuxidc.com
u'syn-ack','name':u'ssh')
'method':u'syn')
包括4种状态（up、down、unknown、
第4章Python与系统安全65
---
## Page 91
遍历扫描主机，第二层为遍历协议，第三层为遍历端口，最后输出主机状态。具体实现
（TCP SYN）方式；-p指定扫描端口范围。程序输出部分采用了三个for循环体，第一层
口”，-v表示启用细节模式，可以返回非up 状态主机清单；-PE 表示采用TCP 同步扫描
否处于 open 状态。实践所采用的 scanO)方法的 arguments 参数指定为“-v-PE-p'+端
邮件告警结合，可以很好地帮助我们及时发现异常开放的高危端口。当然，该工具也可
4.2.2实践：实现高效的端口扫描
代码如下：
以作为业务服务端口的可用性探测，例如扫描192.168.1.20-25网段Web服务端口80是
66第一部分基础篇
本次实践通过python-nmap实现一个高效的端口扫描工具，与定时作业crontab及
for host in nm.all _hosts():
except nmap.PortScannerError:
try:
port=scan_row[1]
hosts=scan_row[0]
if len(scan_row)!=2:
input_data
#!/usr/bin/env python
【/home/test/python-nmap/simple1.py 】
except Exception,e:
try:
except:
scan_row=[]
import
importsys
print "Scan erro:"+str(e)
#调用扫描方法，参数指定扫描主机 hosts，nmap 扫描命令行参数 arguments
print "Input errors,example \"192.168.1.0/24 80,443,22\"
*-coding:utf-8-*-
print('State :s"
print('Host:%s (%s)′%(host,nm[host].hostname()))
nm.scan(hosts=hosts, arguments='
sys.exit(0)
sys.exit(0)
print('Nmap not found', sys.exc_info() [0])
sys.exit(0)
nmap
I
nmap.PortScanner()
input_data.split("")
Linux公社www.linuxidc.com
#接收用户输入的端口
#接收用户输入的主机
nm[host].state())
#遍历扫描主机
#创建端口扫描对象
-V
-sS-p'+port)
#输出主机状态，如up、down
#输出主机及主机名
---
## Page 92
图4-3所示。
192.168.1.0/24等，端口输入格式也非常灵活，如80,443,22、80,22-443。代码运行结果如
其中主机输人支持所有表达方式，如www.qq.com、
nmap/。示例源码参考官方源码包中的example.py。
for protoin nm[host].all_protocols():
forport
lport=nm[host][proto].keys()
print('Protocol:%s'%proto)
print('-------
lport.sort()
Linux公社 www.linuxidc.com
print('port:%s\tstate:%s'
inlport:
图4-3指定IP段与端口的扫描结果
#端口列表排序
168
#遍历端口及输出端口与状态
02V
10
%(port,nm[hostl[proto][port]['state']))
#获取协议的所有扫描端口
#输入协议名
#遍历扫描协议，如tcp、udp
第4章Python与系统安全
192.168.1.*、192.168.1.1-20
9
---
## Page 93
Linux公社 www.linuxidc.com
---
## Page 94
Linux公社 www.linuxidc.com
高级篇
第二部分7
---
## Page 95
命令如下（根据用户环境，自行选择pip或easy_install)：
5.1 pexpect 的安装
readthedocs.org/en/latest/，目前最高版本为3.0。
文件等，待出现异常我们还可以进行尝试自动处理。pexpect的官网地址：http://pexpect.
如我们可以模拟一个FTP登录时的所有交互，包括输人主机地址、用户名、密码、上传
ssh、ftp、passwd、telnet 等命令行进行自动交互，而无需人工干涉来达到自动化的目的。比
hlpotee3
pexpect 作为 Python 的一个普通模块，支持 pip、easy_install或源码安装方式，具体安装
校验安装结果，
#python setup.py install
gz -O pexpect-3.0.tar.gz
0-aoadxad/0*/eotumop/saseata1/4oadxad/oadxad/woo.qnute//:sdzu 4a6m#
关于源码安装，
pip install pexpect
pexpect 可以理解成Linux下的expect的Python封装，通过pexpect我们可以实现对
#cd pexpect-3.0
#tar -zxvf pexpect-3.0.tar.gz
easy_install pexpect
系统批量运维管理器pexpect详解
第5章
Linux公社 www.linuxidc.com
，导人模块没有提示异常则说明安装成功：
，笔者采用了GitHub平台的项目托管源，安装步骤如下：
---
## Page 96
最大字节数，searchwindowsize参数为匹配缓冲区字符串的位置，默认是从开始位置匹配。
定义：
5.2.1
用方法。
5.2
spawn 是 pexpect 的主要类接口，功能是启动和控制子应用程序，以下是它的构造函数
需要注意的是，pexpect不会解析 shell命令当中的元字符，包括重定向“>”、管道“1”
参数 timeout 为等待结果的超时时间；参数 maxread 为 pexpect 从终端控制台一次读取的
下面介绍 pexpect 的几个核心组件包括 spawn类、run 函数及派生类 pxssh 等的定义及使
child
当子程序需要参数时，还可以使用Python列表来代替参数项，如：
其中command参数可以是任意已知的系统命令，比如：
searchwindowsize=None,logfile=None,
class
child.sendline（mypassword）#匹配后则发送密码串进行回应
child
child
child
child
child
child.expect('Password:')
pexpect 的核心组件
import
一个简单实现SSH自动登录的示例如下：
>>
>>>
ype
[GCC 4.4.720120313（RedHat4.4.7-3)]
Python 2.6.6(r266:84292,
#python
spawn 类
import pexpect
=
=pexpect.spawn('/usr/bin/ftp',
pexpect.spawn(command,
pexpect
pexpect'spawn
pexpect.spawn
pexpect.spawn('/usr/bin/ssh
Linux公社 www.linuxidc.com
('/usr/bin/ssh',
#'Password:'
#expect方法等待子程序产生的输出，判断是否匹配定义的字符串
Jul102013,
PI:EMAIL')
cwd=None, env=None,ignore_sighup=True)
args=[],
第5章
"license"
[]）
onlinux2
22:48:45)
'/tmp'])
['PI:EMAIL'])
系统批量运维管理器pexpect详解
timeout=30,
for more information.
#启动 ssh 远程连接命令
maxread=2000,
L
---
## Page 97