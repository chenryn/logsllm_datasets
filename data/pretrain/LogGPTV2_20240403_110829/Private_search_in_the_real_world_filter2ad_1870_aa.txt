title:Private search in the real world
author:Vasilis Pappas and
Mariana Raykova and
Binh Vo and
Steven M. Bellovin and
Tal Malkin
Private Search in the Real World
Vasilis Pappas, Mariana Raykova, Binh Vo, Steven M. Bellovin, Tal Malkin
{vpappas, mariana, binh, smb, tal}@cs.columbia.edu
Department of Computer Science
Columbia University, New York, NY, USA
ABSTRACT
Encrypted search — performing queries on protected data — has
been explored in the past; however, its inherent inefﬁciency has
raised questions of practicality. Here, we focus on improving
the performance and extending its functionality enough to make
it practical. We do this by optimizing the system, and by stepping
back from the goal of achieving maximal privacy guarantees in an
encrypted search scenario and consider efﬁciency and functionality
as priorities.
We design and analyze the privacy implications of two prac-
tical extensions applicable to any keyword-based private search
system. We evaluate their efﬁciency by building them on top
of a private search system, called SADS. Additionally, we im-
prove SADS’ performance, privacy guaranties and functionality.
The extended SADS system offers improved efﬁciency parameters
that meet practical usability requirements in a relaxed adversarial
model. We present the experimental results and evaluate the per-
formance of the system. We also demonstrate analytically that our
scheme can meet the basic needs of a major hospital complex’s ad-
missions records. Overall, we achieve performance comparable to
a simply conﬁgured MySQL database system.
1.
INTRODUCTION
Encrypted search — querying of protected data — has come into
the foreground with growing concerns about security and privacy.
There are many variants of the problem that protect different things:
the searchable data, queries, participant identities, etc. Existing
schemes also differ in their expected operational environment. The
majority of encrypted search mechanisms concern data outsourc-
ing [4–6,8,13,33,34] and to a lesser degree data sharing [9,17,30].
Data outsourcing concerns the case where one party wants to store
its encrypted data on an untrusted server and be able to search it
later. Data sharing involves one party who provides limited search
access to its database to another. These two settings require dif-
ferent privacy guarantees of an encrypted search system; data out-
sourcing is not concerned with protecting the data from the querier,
since he is the owner. Furthermore, speciﬁc implementations may
return different things (e.g., number of matches, document identi-
ﬁers, related content, etc.) or may differ in number of participants,
trust assumptions, anonymity requirements, revocation of search
capability and other areas. All of these factors affect performance.
Choosing a different deﬁnition of “sufﬁcient” privacy can greatly
affect inherent cost. Making the right choice, in accordance with
the actual, rather than theoretical, threat model can lead to a very
functional system, rather than one that is theoretically perfect but
unusably costly in practice.
In this paper we step back from absolute privacy guarantees in fa-
vor of efﬁciency and real-world requirements. These requirements
include not just what may leak, but to whom; depending on the
particular practical setting there may be parties who are at least
partially trusted. Our goal is to describe and build systems that
meet the privacy guarantees matching the actual goals for a given
scenario, so that we may improve efﬁciency. Towards this end,
we present a set of generic extensions, applicable to any keyword-
based private search system. We discuss the importance of each of
these, the challenges for their secure implementation and analyze
their privacy implications in terms of leakage. To evaluate their ef-
ﬁciency, we developed them on top of SADS [30], an efﬁcient pri-
vate search system that uses Bloom ﬁlters. In addition, we describe
and implement a number of new features in SADS that improve its
performance, privacy guarantees and functionality. Finally, we de-
scribe and analyze the performance of the extended SADS system
in a real-world scenario, using health records.
Our implementation and the obtained empirical results are an
important contribution of this paper from the point of view of eval-
uating the real usability of the proposed system for practical pur-
poses. Although theoretical analysis asserts that a Bloom ﬁlter-
based search should be efﬁcient, it is unwise to rely solely on the-
ory. If nothing else, complexity analysis says nothing about con-
stant factors, and says nothing about unexpected bottlenecks.
It
matters little if an algorithm has n3 exponentiations if n is rea-
sonably small and the entire system is in fact I/O-bound rather
than CPU-bound [24]. Similarly, Kernighan and Pike noted that
“measurement is a crucial component of performance improvement
since reasoning and intuition are fallible guides and must be sup-
plemented with tools” [23]. Our work shows that — asymptotic
behavior aside — our scheme is practical across a wide range of
input sizes. Equally important, it shows the cost of different kinds
of privacy. Neither conclusion is amenable to a purely theoretical
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’11 Dec. 5-9, 2011, Orlando, Florida USA
Copyright 2011 ACM 978-1-4503-0672-0/11/12 ...$10.00.
This material is based on research sponsored by Air Force under agreement number
FA8750-09-1-0075. The U.S. Government is authorized to reproduce and distribute
reprints for Governmental purposes notwithstanding any copyright notation thereon.
The views and conclusions contained herein are those of the authors and should not
be interpreted as necessarily representing the ofﬁcial policies or endorsements, either
expressed or implied, of Air Force or the U.S. Government.
analysis.
The contributions of this work are:
• We present two practical extensions, namely Document Re-
trieval and Range Queries, that can be used on top of any
keyword-based private search system.
• We improve an existing private search system (SADS) to pro-
vide better privacy, support data updates and become more
robust.
• We implement all of the above and provide extensive evalu-
ation results and a case study. Code, datasets and data inputs
are available online at http://nsl.cs.columbia.
edu/projects/sads/ for similar systems to compare
with.
2. BACKGROUND
2.1 Secure Anonymous Database Search
The secure anonymous database search (SADS) scheme [30]
provides the following search capability: it allows a search client
(C) with a keyword to identify the documents of a database
owner/server (S) containing the keyword without learning anything
more or revealing his query. For this purpose the architecture of
the system involves two semi-trusted parties: index server (IS) and
query router (QR), which facilitate the search.
In summary the
scheme works as follows:
the database owner computes search
structures for his database — a Bloom ﬁlter (BF) per document
built from the encryptions of all words of the document. Each
authorized client receives keys that he uses to submit queries and
decrypt the results; the QR receives corresponding transformation
keys for the queries of that client. To submit a query, C com-
putes an encryption of his query and sends it to QR. QR veriﬁes
that the client is authorized, re-encrypts the query with the corre-
sponding transformation key, computes and sends the BF indices
obtained from the encryption to IS. IS performs search across the
BFs it stores, encrypts the identiﬁers of the matching documents
and sends them to the QR; QR transforms the encryptions and de-
livers them to the client, who decrypts them to obtain his search
results (see Figure 1).
The original implementation of SADS also includes a couple of
optimizations/features enabled by the use of BFs. First, storing the
BFs in transposed order – called slicing optimization – minimizes
the number of bits that need to be read during search. That is be-
cause only bit slices corresponding to speciﬁc indices are read dur-
ing a query and not all the BFs. This approach has two main bene-
ﬁts. First, it has better cache behavior because it fetches each slice
once and uses it for all the result vectors; second, in some cases
it avoids reading several slice portions if the corresponding bits of
all the result vectors have been zeroed out. In addition, SADS also
supports boolean queries. One naive way to do this is to search for
each term separately and union or intersect the results. However,
BFs can more efﬁciently handle ANDs by combining indices into
a superset, and ORs are handled in parallel by the slicing optimiza-
tion.
2.2 Security Deﬁnitions and Relaxed Privacy
Settings
The strongest security deﬁnition for a generic encrypted search
scheme in the setting of data sharing guarantees that the querier re-
ceives only the matching results, while none of the other parties in
the protocol learns anything. If we formalize this intuition by ap-
plying the standard simulation security notion of Canetti [7], what
Figure 1: SADS overview.
the deﬁnition captures is that a protocol is secure if the views of
the participants in the real execution (namely their inputs, random
inputs, outputs, and messages they receive) are indistinguishable
from their views in an ideal execution where all parties send their
inputs to a trusted party who computes the results and sends them
back to the receivers.
Satisfying this level of privacy inevitably comes at efﬁciency
cost. In many scenarios, weaker privacy guarantees may be sufﬁ-
cient. In particular, to achieve better performance, it is often accept-
able to leak some controlled amount of information. The next def-
inition gives the general security notion for encrypted search with
certain privacy leakage.
DEFINITION 1. A protocol π is a secure encrypted search pro-
tocol with privacy leakage L , if for every real world adversary,
there exists a simulator such that the view of the adversary in the
real world execution, where he interacts with the honest parties, is
indistinguishable from his view in an ideal world execution where
he interacts with a simulator that takes as input L (and simulates
the honest parties).
SADS has the following privacy leakage L with respect to the
parties that perform the search (i.e., the IS and the QR if they col-
lude):
• False Positive Database Leak: a fraction of records that do not
match the search criterion
• Search Pattern: the equality pattern of the submitted queries
• Results’ Pattern: the equality pattern among the results
• Similarity Database Leak: search structures leaking information
about similarity of data records.
In Section 5.1 we present a modiﬁcation to the scheme that re-
moves the last type of leakage that comes just from the search struc-
tures on their own.
The above security guarantees apply to the search functionality
for exact match queries. The SADS search scheme further sup-
ports Boolean queries, which provide privacy guarantees for the
non-matching part of the database, i.e., the querier does not learn
anything about the non-matching records. With respect to the query
privacy from the search party the Boolean queries reveal the match-
ing pattern over the different terms in the search query in addition
to the results’ pattern. In Section 4 we introduce a scheme that re-
alizes range query functionality that is based on OR queries and
inherits the query leakage from the Boolean queries. The leakage
from the OR queries in the context of the range queries means that
given a range query the index server will be able to obtain iden-
tiﬁers for each logarithmic-sized sub-range that two records have
terms co-occuring in, starting from the unique value and ranging up
to the sub-range equal to half the size of the full range. It does not,
however, learn what ranges these are, or, their size. The identiﬁers
SISQRCClientServerEncrypted queryRe-encrypt    queryBF queryindicesDocuments BFsBF SearchEncryptedresultsRe-encryptedresultsRe-encrypt    resultsPreprocessingSearchPIR schemes that address this [16], but at additional cost. Thus, our
problem could be addressed by simply running an appropriate PIR
scheme once for each document result. However, PIR is already
quite expensive for a single document, and running them multiply
would only aggravate this.
We address this by constructing a document retrieval scheme that
can be used on top of any other scheme that returns document IDs.
Our scheme maintains efﬁciency by introducing an intermediary
party who stores the encrypted ﬁles of the database and provides
the matching ones to the querying party. This party is given limited
trust to perform the search, but he should not be able to decrypt the
stored ﬁles. In this case we need to provide the querier with the
decryption keys for the result documents; these are known to the
data owner, who must be able to provide the correct keys oblivi-
ously without learning the search results. In Figure 3 we present a
protocol that realizes the document retrieval functionality between
a data owner (S) and a client (C) with the help of an intermediary
party (P). For the purposed of this protocol we assume that there is
a search functionality EncSearch that returns the IDs of the doc-
uments matching a query from the client. For a query Q we denote
EncSearch(Q) the returned set of document IDs. The database
of the server that is used for the protocol consists of documents
D1, . . . , Dn. Our protocol also uses 1-out-of-n oblivious transfer
(OT) functionality that allows two parties, one of which has input
an array and the other has input an index in the array, to execute
a protocol such that the latter party learns the array element at the
position of his index and the former learns nothing. There are many
existing instantiations of OT protocols, we use the protocol of [15],
which allows best efﬁciency. The last tool for our constructions is
an encryption scheme with the following property (deﬁned in more
detail in [30], which also gives an instantiation for such a scheme):
DEFINITION 2
(ENCRYPTION GROUP PROPERTY).
Let Π = (GEN, ENC, DEC) be a private key encryp-
tion scheme.
We say that Π has a group property if
ENCk1(ENCk2(m)) = ENCk1·k2(m) holds for any keys
k1, k2 and any message m.
Intuitively, the security of this protocol is based on the secrecy
of the permutation π, known only to P . Because it is not known
to S, S cannot correlate the keys k(cid:48)
πi that are requested by C with
the original indices of the matching documents. He learns only the
search pattern of the querying party. We can take two approaches to
mitigate this leakage. The querying party may aggregate requests
for decryption keys to the server for the search results of several
queries. Another solution is to extend the scheme to include addi-
tional keys pertaining to no real documents, which P can add to the
sets of requested keys so that S cannot tell how many of the keys he
returns correspond to query results. Step 2 of the re-encryption can
be implemented using protocols for oblivious transfer [1, 11, 27].
4. RANGE QUERIES
We now present an extension that enables multi-dimensional
range queries using any underlying private search system that,
preferably, supports boolean queries in conjunctive normal form
over exact string matches. We ﬁrst describe our system as a gen-
eral construction then discuss how some of the costs interact with
the efﬁciency tradeoffs inherent in the SADS system due to the use
of BFs.
4.1 General construction
This generic extension introduces the following additional costs
Figure 2: SADS with Document Retrieval.
can only be useful to determine patterns across multiple queries.
3. DOCUMENT RETRIEVAL
There exist many systems for searching databases to privately
identify items of interest. An extension of obvious use is a system
to then retrieve those items privately. One way to do this is with
private information retrieval techniques, however these are very ex-
pensive, and can be even more expensive when fetching large num-
bers of records, or records of individually great size. We present a
system that is much more efﬁcient, at the cost of requiring a trusted
third party, and can be modularly implemented to extend any pri-
vate search system that returns handles representing matches.
Systems both with and without document retrieval have practical
use. For example, a user may simply wish to establish that a server
does have documents of interest to him, or may wish to determine