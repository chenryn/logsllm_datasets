title:Effective implementation of the cell broadband engine\(^\mboxTM\)
isolation loader
author:Masana Murase and
Kanna Shimizu and
Wilfred Plouffe and
Masaharu Sakamoto
Effective Implementation
of the Cell Broadband EngineTMIsolation Loader
Masana Murase
IBM Research,
Tokyo Research Laboratory
1623-14 Shimotsuruma
Yamato-shi, Kanagawa-ken
242-8502 Japan
PI:EMAIL
Wilfred Plouffe
IBM Research,
Almaden Research Center
650 Harry Road San Jose, CA
PI:EMAIL
95120
Kanna Shimizu
IBM Corporation,
IBM Systems & Technology
Group
MA 02142
One Rogers St, Cambridge,
PI:EMAIL
Masaharu Sakamoto
IBM Research,
Tokyo Research Laboratory
1623-14 Shimotsuruma
Yamato-shi, Kanagawa-ken
242-8502 Japan
PI:EMAIL
ABSTRACT
This paper presents the design and implementation of the
Cell Broadband EngineTM(Cell/B.E.) isolation loader which
is a part of the IBM Software Development Kit for Multicore
Acceleration [14]. Our isolation loader is a key component in
realizing secure application boot and encrypted application
execution. During the application load process, the isolation
loader fetches, validates, and decrypts a Synergistic Proces-
sor Element (SPE) executable, establishing a chain of trust
from the hardware to the application. Since not all appli-
cations are SPE executables, we also introduce a general
solution. This is a veriﬁcation service framework in which
all applications including system functions can be veriﬁed
by the isolation loader immediately before execution.
We have applied several novel implementation techniques
to the isolation loader. The countermeasure implemented
in our isolation loader against the substituted-ciphertext at-
tack is given and our staging technique to allocate contigu-
ous working areas for applications is also introduced. The
load overhead of this loader including application fetch, val-
idation (RSA-2048/SHA-1), and decryption (RSA-2048 and
AES) is less than 50 milliseconds on the 2.8 GHz IBM Pow-
erXCell 8i processor. This overhead is reasonable compared
with the 500-millisecond 2048-bit RSA signing needed by
the Trusted Platform Module chips [3].
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’09, November 9–13, 2009, Chicago, Illinois, USA.
Copyright 2009 ACM 978-1-60558-352-5/09/11 ...$10.00.
General Terms
Design, Performance, Security
Keywords
Cell Broadband EngineTM, encrypt-then-sign, isolation, multi-
core, substituted-ciphertext attack
1.
INTRODUCTION
Although modern CPUs with multiple cores are the pre-
dominant trends for enhancing performance and power ef-
ﬁciency, the multi-core feature has another aspect for com-
puter usage – isolation. In 2005, Percival [6] reported on a
security ﬂaw of Hyper-Threading Technology by which ma-
licious software could steal secret data such as encryption
keys or passwords from caches or registers. This is because
two threads, one a legitimate thread handling a secret and
the other a malicious thread observing the legitimate thread,
can share caches and registers when they are running on the
same processor core. To address such security risks, it is
necessary to prevent illegal and unexpected access to shared
resources. The multi-core system allows us to conﬁne each
thread to the corresponding cores with concurrent execution
of those threads.
In particular, if there is no dependency
among threads, we can beneﬁt from both performance and
security enhancements. We assume three hardware security
features to realize such a secure environment: (1) on-chip
memory isolation, (2) runtime secure boot, and (3) decryp-
tion during the software boot.
The Cell Broadband EngineTM(Cell/B.E.) [4] processor is
one of the multi-core processors supporting such capabili-
ties. As introduced in [21], the security features are called
the secure processing vault1, the runtime secure boot, and
the hardware root of secrecy, respectively. Unlike competing
security solutions, this design is unique in that even if the
1Also referred to as the Synergistic Processor Unit (SPU)
isolation mode
303supervisory software such as the operating system or the hy-
pervisor is compromised, the process isolation is guaranteed.
In contrast, most security architectures rely on the perpet-
ual integrity and security of their supervisory software to
protect and separate the processes. With these features, we
can create an isolated and secure domain on each core which
is independent of the traditional insecure domain where the
operating system or the hypervisor is running.
While [21] focuses on the security hardware architecture
of the Cell/B.E. processor only, we present the detailed de-
sign and implementation of our security software stack for
the Cell/B.E. processor in this paper. Our work provides
a secure software-based application loader minimizing the
application load overhead on top of the Cell/B.E. processor.
The Cell/B.E. processor validates and decrypts the Syner-
gistic Processor Element (SPE) isolation loader ﬁrst. After-
ward, the authorized loader validates and decrypts a signed
and encrypted application (secure application) every time
the secure application is initiated. In this way, a chain-of-
trust is established and maintained from the hardware layer
at the bottom to the application layer. This layered struc-
ture gives us ﬂexibility and portability for application de-
velopment. The software-based application loader provides
separation of the hardware and the application layer so that
if one changes (for example, a diﬀerent cryptographic algo-
rithm is used), the other is not aﬀected.
Unlike the prior approaches, we use the encrypt-then-sign
policy, but not a naive one for the application signing and
encryption. This policy has a large advantage in the re-
sponse time to detect tampering. Since a veriﬁer with this
policy validates the target application prior to the decryp-
tion, that veriﬁer can release the CPU resource owned by
this process to another process as quickly as possible when
it detects tampering. In contrast, the sign-then-encrypt pol-
icy needs both decryption and validation operations to de-
tect tampering. Sometimes, the decryption process can be
time-consuming, which occurs in our experiments. We also
introduce a novel staging technique to allocate contiguous
working areas for applications. This technique is much of
importance when the isolated memory space is limited.
Prior research on secure-main processors such as AEGIS
[22], XOM [16], and Cerium [5] also provided the same hard-
ware security features. Unlike our approach, this work used
the sign-then-encrypt policy to generate a secure applica-
tion. The sign-then-encrypt policy is an eﬀective way to
cope with a substituted-ciphertext attack [9], but it takes a
long time to detect tampering because both decryption and
validation must be performed to detect tampering in the
sign-then-encrypt approach. This approach is reasonable if
a veriﬁer is implemented in the hardware and the overhead
of the cryptographic operations can be ignored. However,
we need to care about the performance overhead in addition
to the security if we use a software authentication layer to
provide ﬂexibility and portability of applications. The se-
cure main processor work does not address on this concern.
Prior work on secure co-processors [27, 18, 26] is another
approach to implement the isolated domains. The main pur-
pose of this approach is to validate the software stack with-
out changing the existing main processors. Once it has been
ensured that a system has not been tampered with, then the
authorized supervisory software such as the operating sys-
tem or the hypervisor divides the runtime environment into
two or more domains: one is the secure domain, and any
others are non-secure domains. Thanks to the ring protec-
tion mechanism [13] implemented in the main processor, the
secure domain is guaranteed to be isolated from the other
domains. Compared with the secure main-processor work,
the secure co-processor approach does not care about mali-
cious supervisory software which might be hacked or com-
promised. Also, these secure co-processor systems are miss-
ing the encrypted application execution. How to implement
signed and encrypted application execution in an eﬃcient
way is still an open question.
The remainder of this paper is structured as follows. In
Section 2, a brief introduction to the Cell/B.E. processor is
given as background for this paper. In Section 3, a secure ap-
plication load technique and a contiguous working area allo-
cation technique are proposed to realize a high-performance
and secure application loader. Section 4 describes the per-
formance evaluation of the SPE isolation loader and a code
veriﬁcation service, which is an extension of the SPE isola-
tion loader, is implemented in Section 5. Section 6 clariﬁes
the diﬀerence between our approach and the existing tech-
nologies. Finally we summarize our work in Section 7.
2. CELL BROADBAND ENGINETMOVERVIEW
The Cell/B.E. is a multiprocessor core architecture (see
Figure 1) [4]. The cores are heterogeneous and there are
two kinds of cores on each chip. The principal core, the 64-
bit Power Processor Element (PPE), is a PowerPC processor
that has the supervisory role. It is the PPE that executes the
operating system and manages the allocation of most system
resources, including the SPEs. The other type of core on a
Cell/B.E. is the SPE consisting of a Synergistic Processor
Unit (SPU) and a Direct Memory Access (DMA) engine. In
the current implementation, there are 8 SPEs per chip. The
SPEs are the computational workhorses: a RISC-style single
instruction, multiple data (SIMD) instruction set, wide and
large (128 128-bit) register ﬁles, and 256 KB of physically
dedicated private memory, called the Local Store (LS), for
each SPE [10]. The high bandwidth Element Interconnect
Bus (EIB) connects these processor cores to each other and
to the oﬀ-chip system memory and I/O.
Figure 1: The diagram of the Cell Broadband En-
gine architecture
304The SPE plays a key role in the Cell/B.E. architecture.
One of its distinguishing features is its private memory called
the Local Store (LS). The SPE fetches instructions from the
LS and loads or stores data to and from the LS. However,
the LS is not a hardware-managed cache. Instead, the LS
memory region is mapped in the system memory map, and
software, either the software running on the PPE or the soft-
ware thread executing on the SPE, is expected to explicitly
transfer code and data into the LS via DMA (Direct Mem-
ory Access). The transfers can occur with any resource on
the EIB, such as main memory, an LS of an other SPE, or
I/O devices.
In contrast to other processor architectures, the Cell/B.E.
architecture provides three features speciﬁcally for increased
security: the secure processing vault, the runtime secure
boot, and the hardware root of secrecy. An SPE running in
a special hardware mode, the isolation mode, is eﬀectively
disengaged from the bus, and by extension, from the rest
of the system. When in this mode, the LS of the SPE,
which contains the application’s code and data, is locked for
use only by the SPE and cannot be read or written to by
any other software, even including code in the ring0 mode of
the ring protection. Therefore, even if the operating system
kernel or the hypervisor is hacked and controlled by an ad-
versary, he will still not be able to steal or manipulate the
data or code in the isolated SPE LS. A small area of the LS
is left open and data can still be brought in or taken out via
DMA. This window is needed so that even in isolation mode
the SPE can continue to bring in additional data and code.
Before an application can execute on an isolated SPE, the
Cell/B.E. veriﬁes the application integrity using a key em-
bedded in the hardware, the runtime secure boot. This au-
thentication mechanism itself is implemented in hardware,
and therefore cannot be manipulated or skipped. When iso-
lation mode is requested for a particular application thread,
ﬁrst, the hardware control locks the SPE LS. Then the SPE
hardware fetches the application through the open window
and places the application image into the isolated region of
the LS. After the entire application image is transferred, the
SPE hardware veriﬁes the application image integrity based
on a cryptographic algorithm and the hardware key. If the
veriﬁcation succeeds, the application begins executing on the
isolated SPE. If the veriﬁcation fails, the SPE stops and re-
mains in isolation mode until the isolation exit mechanism
is initiated. The isolation exit mechanism is also an entirely
hardware implemented mechanism. When it is requested,
ﬁrst, execution is stopped (if it is not already stopped), and
then, the entire LS and all of the SPE registers in the reg-
ister ﬁle are erased by the hardware. Once the erasure is
complete, the hardware control unlocks the SPE LS and the
SPE is back in normal, non-isolated mode.
The third feature is the hardware root of secrecy. The
Cell/B.E. hardware decrypts applications using the hard-
ware key when the application is ﬁrst loaded into the iso-
lated SPE. Neither the decryption key nor the decryption
facility is accessible or controllable by software running on
the PPE or a non-isolated SPE. Therefore, the encrypted
application can only be decrypted within an isolated SPE
environment.
3. SPE ISOLATION LOADER DETAILS
First, the introduction of our software stack for the Cell/B.E.
isolation environment is given in this section. With our soft-
ware stack, application programmers can easily program an
isolated application with the same programming paradigm
as the regular Cell/B.E. applications. Then, several novel
design and implementation methods used in the SPE isola-