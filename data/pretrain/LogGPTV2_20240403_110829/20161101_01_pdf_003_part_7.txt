pd_lsn XLogRecPtr 8 bytes
last change to this page
TimeLineID of last change (only its lowest 16
pd_tli uint16 2 bytes
bits)
pd_flags uint16 2 bytes Flag bits
pd_lower LocationIndex 2 bytes Offset to start of free space
pd_upper LocationIndex 2 bytes Offset to end of free space
pd_special LocationIndex 2 bytes Offset to start of special space
Page size and layout version number
pd_pagesize_version uint16 2 bytes
information
Oldest unpruned XMAX on page, or zero if
pd_prune_xid TransactionId 4 bytes
none
PostgreSQL 物理结构
 TUPLE数据结构
HeapTupleHeaderData(23 Bytes on most machine)
null bitmap(Optional,The null bitmap is only present
if the HEAP_HASNULL bit is set in t_infomask.
occupies enough bytes to have one bit per data column.
a 1 bit indicates not-null, a 0 bit is a null)
Padding(Optional, Any padding needed to make t_hoff a MAXALIGN
multiple will appear between the null bitmap and the object ID)
One
object ID(Optional, only present if the
Tuple
HEAP_HASOID bit is set in t_infomask)
ColumnData
PostgreSQL 物理结构
 TUPLE头部数据结构
Field Type Length Description
t_xmin TransactionId 4 bytes insert XID stamp
t_xmax TransactionId 4 bytes delete XID stamp
insert and/or delete CID stamp (overlays
t_cid CommandId 4 bytes
with t_xvac)
XID for VACUUM operation moving a row
t_xvac TransactionId 4 bytes
version
t_ctid ItemPointerData 6 bytes current TID of this or newer row version
t_infomask2 int16 2 bytes number of attributes, plus various flag bits
t_infomask uint16 2 bytes various flag bits
t_hoff uint8 1 byte offset to user data
PostgreSQL 物理结构
 图例
 使用pg_pageinspect插件可以观察这些数据
PostgreSQL 物理结构
 图例
PostgreSQL数据库逻辑概貌
Instance(Top-Level) Cluster
Database Database(s)
Schema Schema(s)
Object Table(s) Index(s) View(s) Function(s) Sequence(s) Other(s)
Field Row(s) Column(s)
PostgreSQL数据库物理存储概貌
Table Toast Index Sequence
Archived
Datafile(s) Datafile(s) Datafile(s) Datafile(s) Controlfile WALs
PostgreSQL数据库进程结构概貌
Shared Memory Area
APP
IPC
Handshake
postmaster
& autovacuum launcher
authentication
fork
autovacuum worker
backend process Shared buffer bgwriter
WAL buffer
WAL writer
XLOGs
Datafiles
Archiver
ARCH FILEs
PostgreSQL数据库可靠性
PostgreSQL调用OS的sync WRITE函数.
fsync
wal_sync_method=?
PostgreSQL
KERNEL
OS
buffer cache
通常有断电保护,
为了提高性能建
议打开
存储控制器write
cache
通常没有断电保
护, 所以要关闭
硬盘write cache
硬盘(非易失存储)
PostgreSQL数据库可靠性
Mistake
Checkpoint
Time Line
⑵
1. Compare pd_lsn
Data Changed
2. Dumpdto Disk
⑴ 1.写WAL(或叫XLOG)
2.为了确保数据库在recovery的时候,可以
Which Page the first
恢复到一个一致的状态,shared buffer中的
Modified after Checkpoint
脏数据页在flush到磁盘数据文件中之前,
Write full page to WAL.
WAL 应该确保这个脏页的改变量已经write
through 到XLOG文件了.
3.如何确保先写XLOG再改变DATA-PAGE
Archive 呢?PAGE头信息里面包含了一个pd_lsn位,
用于记录XLOG写该PAGE信息的最后一
个字节的下一个字节.
4. 在写脏页到数据文件前只要确保大于
或等于pd_lsn的XLOG已经write through到
Online Backup File
PITR 磁盘了就行.
lsn :
log sequence number --- in
practice, a WAL file location
基础备份+归档日志
PostgreSQL数据库可靠性注意事项
 让数据库可靠的注意事项
 事务提交后确保这个事务未来可恢复吗?
事务返回成功前, 事务日志(xlog)写入磁盘, synchronous_commit = on
 备份可恢复吗?恢复后确保数据一致吗?
-- fsync = on . full_page_writes = on
 必须写入非易失存储的数据已经写入到非易失存储了吗?
write - through , write - back
关闭磁盘的write cache
只允许有断电保护的write cache.
 主机异常DOWN机后重启数据库能不能起到一个一致的状态?
PostgreSQL periodically writes full page images to permanent WAL
storage before modifying the actual page on disk. -- full_page_writes = on
 数据库异常DOWN机后重启数据库能不能起到一个一致的状态?
PostgreSQL periodically writes full page images to permanent WAL
storage before modifying the actual page on disk. -- full_page_writes = on
PostgreSQL数据库可靠性注意事项
 让数据库可靠的注意事项
 事务日志可以用于恢复到任意时间点吗?
开启归档, 并且有良好的备份策略.
wal_level = archive 或 hot_standby
 如果存储挂了怎么办?
开启归档, 并且有良好的备份策略.
wal_level = archive 或 hot_standby
archive_mode = on
archive_command = 'cp %p /backup/%f'
 如果IDC挂了怎么办?
开启归档, 并且有良好的备份策略.
wal_level = archive 或 hot_standby
异地容灾, 如流复制.
练习
 系统表直接的关联关系的熟悉
 系统视图的使用
 系统管理函数的使用
 pageinspect插件观察数据块,tuple,数据
PostgreSQL 使用基础
 使用基础
 目标:
 了解常用的数据库交互工具的使用
 了解PG数据库的基本概念(类型, 语法等)和SQL操作
PostgreSQL 交互工具的使用
 psql 工具
 详细的帮助参考man psql
 两个比较有用的帮助, 在psql shell中输入 :
 \? -- 可以得到psql的一些快捷命令
 \h -- 可以得到SQL的语法帮助
 常用的快捷命令
 \dt -- 输出当前搜索路径下的表
 \set VERBOSITY verbose
 设置详细的打印输出, 例如可以报出问题的代码.
PostgreSQL 数据库基本操作
 PostgreSQL数据类型介绍
 表的操作(创建, 插入, 更新, 删除, 截断, 删除, 重命名, 修改表的属性...)
PostgreSQL 数据类型介绍
PostgreSQL 数据类型介绍
 常用数据类型, 数字
Name Storage Size Description Range
smallint 2 bytes small-range integer -32768 to +32767
integer 4 bytes typical choice for integer -2147483648 to +2147483647
-9223372036854775808 to
bigint 8 bytes large-range integer
9223372036854775807
up to 131072 digits before the
decimal / numeric variable user-specified precision, exact decimal point; up to 16383
digits after the decimal point
real 4 bytes variable-precision, inexact 6 decimal digits precision
double precision 8 bytes variable-precision, inexact 15 decimal digits precision
serial 4 bytes autoincrementing integer 1 to 2147483647
bigserial 8 bytes large autoincrementing integer 1 to 9223372036854775807
PostgreSQL 数据类型介绍
 常用数据类型, 字符
Name Storage Size Description
character
variable(can store n chars) variable-length with limit
varying(n), varchar(n)
character(n), char(n) n chars fixed-length, blank padded
text variable variable unlimited length
"char" 1 byte single-byte internal type
name 64 bytes internal type for object names
PostgreSQL 数据类型介绍
 常用数据类型, 时间
Name Storage Size Description Low Value High Value Resolution
1
timestamp [ (p) ] [ both date and time (no
8 bytes 4713 BC 294276 AD microsecond /
without time zone ] time zone)
14 digits
1
timestamp [ (p) ] with both date and time, with
8 bytes 4713 BC 294276 AD microsecond /
time zone time zone