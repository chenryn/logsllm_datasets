### 7.8.1 字符串查找函数

- **`char *strchr(const char *s, int c)`**:
  在字符串 `s` 中查找字符 `c`。如果找到，则返回指向该字符第一次出现位置的指针；否则返回 `NULL`。

- **`char *strrchr(const char *s, int c)`**:
  在字符串 `s` 中查找字符 `c`。如果找到，则返回指向该字符最后一次出现位置的指针；否则返回 `NULL`。

### 7.8.2 字符类别测试和转换函数

在 `<ctype.h>` 头文件中定义了一些用于字符测试和转换的函数。这些函数接受一个可以表示为 `unsigned char` 类型或 `EOF` 的 `int` 对象，并返回一个 `int` 值。

- **`int isalpha(int c)`**:
  如果 `c` 是字母，则返回非零值；否则返回 0。

- **`int isupper(int c)`**:
  如果 `c` 是大写字母，则返回非零值；否则返回 0。

- **`int islower(int c)`**:
  如果 `c` 是小写字母，则返回非零值；否则返回 0。

- **`int isdigit(int c)`**:
  如果 `c` 是数字，则返回非零值；否则返回 0。

- **`int isalnum(int c)`**:
  如果 `isalpha(c)` 或 `isdigit(c)` 成立，则返回非零值；否则返回 0。

- **`int isspace(int c)`**:
  如果 `c` 是空格、横向制表符、换行符、回车符、换页符或纵向制表符，则返回非零值。

- **`int toupper(int c)`**:
  返回 `c` 的大写形式。

- **`int tolower(int c)`**:
  返回 `c` 的小写形式。

### 7.8.3 `ungetc` 函数

标准库提供了一个称为 `ungetc` 的函数，它比第 4 章中编写的 `ungetch` 函数功能更受限制。

```c
int ungetc(int c, FILE *fp);
```

该函数将字符 `c` 写回到文件 `fp` 中。如果执行成功，则返回 `c`；否则返回 `EOF`。每个文件只能接收一个写回字符。`ungetc` 函数可以与任何输入函数（如 `scanf`、`getc` 或 `getchar`）一起使用。

### 7.8.4 命令执行函数

**`int system(const char *s)`** 执行包含在字符串 `s` 中的命令，然后继续执行当前程序。`s` 的内容在很大程度上依赖于所用的操作系统。例如，在 UNIX 操作系统环境中，语句

```c
system("date");
```

将执行 `date` 程序并在标准输出上打印当天的日期和时间。`system` 函数返回一个整型的状态值，其值来自于执行的命令，并与具体系统有关。在 UNIX 系统中，返回的状态是 `exit` 的返回值。

### 7.8.5 存储管理函数

**`void *malloc(size_t n)`** 和 **`void *calloc(size_t n, size_t size)`** 用于动态地分配存储块。

- **`void *malloc(size_t n)`**:
  分配 `n` 字节长度的未初始化存储空间。如果分配成功，返回指向该存储空间的指针；否则返回 `NULL`。

- **`void *calloc(size_t n, size_t size)`**:
  分配足够的空闲空间以容纳由 `n` 个指定长度的对象组成的数组，并将其初始化为 0。如果分配成功，返回指向该存储空间的指针；否则返回 `NULL`。

根据请求的对象类型，`malloc` 或 `calloc` 函数返回的指针满足正确的对齐要求。例如：

```c
int *ip;
ip = (int *) calloc(n, sizeof(int));
```

**`void free(void *p)`** 函数释放 `p` 指向的存储空间，其中 `p` 是此前通过调用 `malloc` 或 `calloc` 函数得到的指针。存储空间的释放顺序没有限制，但释放一个不是通过调用 `malloc` 或 `calloc` 函数得到的指针所指向的存储空间将是一个严重的错误。使用已经释放的存储空间同样是错误的。下面是一个典型的错误代码段：

```c
for (p = head; p != NULL; p = p->next) { /* WRONG */ free(p); }
```

正确的处理方法是在释放节点之前先保存必要的信息：

```c
for (p = head; p != NULL; p = q) {
    q = p->next;
    free(p);
}
```

### 7.8.6 数学函数

在 `<math.h>` 头文件中声明了多个数学函数。每个函数带有一个或两个 `double` 类型的参数，并返回一个 `double` 类型的值。

- **`double sin(double x)`**:
  计算 `x` 的正弦值，其中 `x` 用弧度表示。

- **`double cos(double x)`**:
  计算 `x` 的余弦值，其中 `x` 用弧度表示。

- **`double atan2(double y, double x)`**:
  计算 `y/x` 的反正切值，其中 `x` 和 `y` 用弧度表示。

- **`double exp(double x)`**:
  计算 `e` 的 `x` 次幂。

- **`double log(double x)`**:
  计算 `x` 的自然对数（以 `e` 为底），其中 `x > 0`。

- **`double log10(double x)`**:
  计算 `x` 的常用对数（以 10 为底），其中 `x > 0`。

- **`double pow(double x, double y)`**:
  计算 `x` 的 `y` 次幂。

- **`double sqrt(double x)`**:
  计算 `x` 的平方根（`x >= 0`）。

- **`double fabs(double x)`**:
  计算 `x` 的绝对值。