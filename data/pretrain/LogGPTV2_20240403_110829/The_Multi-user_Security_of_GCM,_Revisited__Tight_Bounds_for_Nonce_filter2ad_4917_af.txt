r! · 2s(r−1)
≤ (2a)r2s
(r/e)r
.
The second inequality is due to the fact that n! ≥ (n/e)n for every integer n ≥ 1. Further,
(2a)r2s
(r/e)r ≤
2t
(16/e)(cid:96)t ≤ 2−t(2(cid:96)−1) .
The last inequality relies on the assumption that (cid:96) ≥ 2. This concludes the proof.
We are now ready to prove Theorem 5.2.
Theorem 5.2 Let E be a blockcipher that we will model as an ideal cipher. Let Π[E] = (K,E,D) be
an AE scheme of nonce length r. Let Π∗[E] = CN(Π[E]) have nonce length r − t where r > t ≥ 32.
Let A be an adversary attacking Π∗ using at most q Enc queries. Then we can construct a strongly
d-repeating adversary B of the same concrete query complexity as A, where d = (cid:100)qt/2t−1(cid:101), such
that
Advmu-ae
Π∗[E](A) ≤ Advmu-ae
Π[E] (B) + 2−7t .
Proof of Theorem 5.2: Adversary B initializes a ﬂag bad ← false and runs A with direct access to
its ideal cipher. For each encryption query (i, N, A, M ) (respectively, veriﬁcation query (i, N, A, C))
of the latter, B initializes Ji ←$ {0, 1}t if the string Ji is not deﬁned, otherwise it uses the existing
Ji, and then creates an eﬀective nonce N∗ ← Ji (cid:107) N . If B did use N∗ for d other users previously,
it’ll set bad ← true, terminate A, and output 1. Otherwise, B queries C ← Enc(i, N∗, A, M )
(respectively, Vf(i, N∗, A, C)), and returns the answer to A. When A ﬁnishes (without being
terminated prematurely) and outputs a bit b(cid:48), adversary B will output the same bit. Note that B is
strongly d-repeating, and for each individual user, if A does not repeat a nonce among encryption
queries then B also does not repeat an eﬀective nonce among encryption queries. Moreover,
because B either outputs 1, or agrees with A. Since game RandA
in its ideal world are identical until bad is set,
Pr[RealB
Π[E] ⇒ 1] ≥ Pr[RealA
Π∗[E] ⇒ 1] ,
(6)
Π∗[E] and the game that B simulates
Pr[RandB
Π[E] ⇒ 1] ≤ Pr[RandB
Π[E] sets bad] + Pr[RandA
Π∗[E] ⇒ 1] .
(7)
Subtracting Eq. (7) from Eq. (6) side by side, we obtain
Advmu-ae
Π[E] (B) ≥ Advmu-ae
Π∗[E](A) − Pr[RandB
Π[E] sets bad] .
20
Π[E] sets bad] ≤ 2−7t. Recall that B sets bad to true only
It now suﬃces to show that Pr[RandB
if adversary A can force B to use some eﬀective nonce across more than d users. However, in
game RandB
Π[E], the oracle answers are completely independent of the nonce randomizers Ji that
Π[E] as A’s throwing q balls into 2t bins and bad is set only
B chooses. Hence one can view RandB
if some bin contains d or more balls. Then, RandB
Π[E] sets bad with probability at most 2−7t by
Lemma 5.1 by setting (cid:96) = 4 in the lemma.
Combining Theorem 5.2 above with Theorem 3.1, we immediately obtain a strong security
bound for CGCM which we deﬁne as CGCM = CN(CAU).
Theorem 5.3 (mu-security of CN(CAU)) Let E : {0, 1}k × {0, 1}n → {0, 1}n be a blockcipher
that we will model as an ideal cipher, with k ≥ n ≥ 128. Let H be a c-AXU hash function. Let the
key length of CGCM be k + t and nonce length be r − t with r > t ≥ 32. Let A be an adversary at-
tacking CGCM[H, E] using at most p ≤ 2n−2 ideal-cipher queries, q encryption/veriﬁcation queries
of total block length at most σ, and the encryption queries are of at most B blocks per user. Let
d = (cid:100)qt/2t−1(cid:101). Then
Advmu-ae
CGCM[H,E](A) ≤ d(p + q) + n(q + σ + p)
2k
+
σ(2B + cn + 2)
2n
+
2q + 1
22n +
σ(σ + ncd) + 2pq
2k+n
+2−7t .
2154 + σ
286 , which is much stronger than the bound pq+σ2
Comparing RGCM and CGCM. For concreteness, consider the setting in which an adversary can
encrypt at most B = 240 blocks per user. Under TLS 1.2 and IPSec, 4 bytes of a nonce would
be a random salt and remain ﬁxed for an entire session, whereas the remaining 8 bytes would be
implemented as a counter. Thus for CGCM in TLS 1.2 and IPSec, for d = 32 · (cid:100)q/231(cid:101) ≈ q/226 and
n = 128. The resulting bound is pq+q2
in prior
works [5, 13]. Still, in the same setting, RGCM is much better: using d = 14 (meaning that q is
required to be smaller than 272), the advantage of the adversary is about
Discussion. Recall that our security deﬁnition requires that nonces for each individual must be
distinct. In TLS 1.2, however, one might implement nonces as 64-bit random strings. To capture
security for this setting, one can relax our security deﬁnition by allowing adversaries to repeat nonces
for some users, with probability at most ε. In the case of TLS 1.2, one can pick ε = σB
264 . Next, for any
AE scheme Π and for an adversary A who repeats nonces for some user with probability ε, one can
(B)+ε.
easily construct an adversary B who is nonce-respecting, such that Advmu-ae
Thus the security of CGCM with random nonces can be bounded by the formula in Theorem 5.3
plus an additional term σB
264 .
(A) ≤ Advmu-ae
p
2120 + σ
286 .
2128
Π
Π
6 Security with Public Salting
In both the XN and CN transforms in the previous sections, the nonce randomizer (or salt) J is part
of the secret key. This reﬂects transformations actually used in practice. However, in general, the
secrecy of the nonce randomized is unnecessary for mu security. We observe here that as long as the
nonces are not chosen arbitrarily by the adversary one can guarantee mu security even when the
nonces are made public, and security of such schemes can be described in terms of an appropriate
d-repeating adversary.
An example. Somewhat informally, imagine that we are in a scenario where each user picks a
nonce randomizer Ji ∈ {0, 1}r. Then, the nonce of the c-th message sent by user i is in particular
21
Ji⊕c, and is sent along with the message. More generally, the XOR can be replaced by any operator
(cid:1) such that ({0, 1}r, (cid:1)) is an abelian group.
Our formalism allows us to capture this scenario by restricting ourselves to d-repeating adver-
saries A (for an appropriate d) which only invoke the encryption oracle with queries of the form
Enc(i, Ji (cid:1) ci, A, M ), where ci is a counter increased each time a message is encrypted for user i.
Note that we allow here A to make unrestricted veriﬁcation queries, exploiting the full power of
our model – this is consistent with the fact that a person-in-the-middle attacker may attempt to
inject ciphertexts with arbitrary nonces.
In particular, by an argument similar to that of Lemma 4.1, if such A makes at most q ≤ 2(1−)r
encryption/veriﬁcation queries, it is d-repeating for d = (cid:100)1.5/(cid:101) − 1 except with probability 2−r/2.
Thus, for CAU, the mu security with respect to such A follows from Theorem 3.1, and is such that
Advmu-ae
Π[H,E](A) ≤ d(p + q) + n(q + σ + p)
2k
+
σ(2B + cn + 2)
2n
+
2q + 1
22n +
σ(σ + ncd) + 2pq
2k+n
+ 2−r/2 .
This is the same bounds as that obtained for RGCM in Theorem 4.3. In particular, this means that
we can obtain the same security for GCM without keeping any part of the nonces secret and hence
potentially saving on key length.
Acknowledgments
We thank the CCS reviewers for their insightful comments, and Kenny Paterson and Eric Rescorla
for providing very useful information on the TLS protocol.
References
[1] M. Baugher, D. McGrew, M. Naslund, E. Carrara, and K. Norrman. The Secure Real-time Transport
Protocol (SRTP). Internet-draft, Internet Engineering Task Force, 2004. 4
[2] M. Bellare, D. J. Bernstein, and S. Tessaro. Hash-function based PRFs: AMAC and its multi-user
security. In M. Fischlin and J.-S. Coron, editors, EUROCRYPT 2016, Part I, volume 9665 of LNCS,
pages 566–595. Springer, Heidelberg, May 2016. 3
[3] M. Bellare, A. Boldyreva, and S. Micali. Public-key encryption in a multi-user setting: Security proofs
and improvements. In B. Preneel, editor, EUROCRYPT 2000, volume 1807 of LNCS, pages 259–274.
Springer, Heidelberg, May 2000. 3
[4] M. Bellare and V. T. Hoang. Identity-based format-preserving encryption. In B. M. Thuraisingham,
D. Evans, T. Malkin, and D. Xu, editors, ACM CCS 17, pages 1515–1532. ACM Press, Oct. / Nov.
2017. 10
[5] M. Bellare and B. Tackmann. The multi-user security of authenticated encryption: AES-GCM in
TLS 1.3. In M. Robshaw and J. Katz, editors, CRYPTO 2016, Part I, volume 9814 of LNCS, pages
247–276. Springer, Heidelberg, Aug. 2016. 3, 4, 5, 6, 8, 21
[6] E. Biham. How to decrypt or even substitute DES-encrypted messages in 228 steps. Inf. Process. Lett.,
pages 117–124, 2002. 3
[7] P. Bose, V. T. Hoang, and S. Tessaro. Revisiting AES-GCM-SIV: Multi-user security, faster key deriva-
tion, and better bounds. In EUROCRYPT 2018, 2018. 3, 4, 5, 11, 19
[8] S. Chen and J. P. Steinberger. Tight security bounds for key-alternating ciphers. In P. Q. Nguyen and
E. Oswald, editors, EUROCRYPT 2014, volume 8441 of LNCS, pages 327–350. Springer, Heidelberg,
May 2014. 8
22
[9] S. Goldwasser and M. Bellare. Lecture notes on cryptography. Summer Course “Cryptography and
Computer Security” at MIT, 1999. 10
[10] V. T. Hoang and S. Tessaro. Key-alternating ciphers and key-length extension: Exact bounds and
multi-user security. In M. Robshaw and J. Katz, editors, CRYPTO 2016, Part I, volume 9814 of LNCS,
pages 3–32. Springer, Heidelberg, Aug. 2016. 3, 7
[11] V. T. Hoang and S. Tessaro. The multi-user security of double encryption. In J. Coron and J. B. Nielsen,
editors, EUROCRYPT 2017, Part II, volume 10211 of LNCS, pages 381–411. Springer, Heidelberg, May
2017. 3
[12] T. Iwata, K. Ohashi, and K. Minematsu. Breaking and repairing GCM security proofs. In R. Safavi-
Naini and R. Canetti, editors, CRYPTO 2012, volume 7417 of LNCS, pages 31–49. Springer, Heidelberg,
Aug. 2012. 5
[13] A. Luykx, B. Mennink, and K. G. Paterson. Analyzing multi-key security degradation. In T. Takagi
and T. Peyrin, editors, ASIACRYPT 2017, Part II, volume 10625 of LNCS, pages 575–605. Springer,
Heidelberg, Dec. 2017. 3, 5, 21
[14] U. M. Maurer. Indistinguishability of random systems. In L. R. Knudsen, editor, EUROCRYPT 2002,
volume 2332 of LNCS, pages 110–132. Springer, Heidelberg, Apr. / May 2002. 7
[15] D. A. McGrew. Generation of Deterministic Initialization Vectors (IVs) and Nonces. Internet-Draft
draft-mcgrew-iv-gen-03, Internet Engineering Task Force, Oct. 2013. Work in Progress. 4
[16] D. A. McGrew and S. R. Fluhrer. Attacks on additive encryption of redundant plaintext and implications
on internet security. In D. R. Stinson and S. E. Tavares, editors, SAC 2000, volume 2012 of LNCS,
pages 14–28. Springer, Heidelberg, Aug. 2001. 4
[17] D. A. McGrew and J. Viega. The security and performance of the Galois/counter mode (GCM) of
operation. In A. Canteaut and K. Viswanathan, editors, INDOCRYPT 2004, volume 3348 of LNCS,
pages 343–355. Springer, Heidelberg, Dec. 2004. 3, 9
[18] N. Mouha and A. Luykx. Multi-key security: The Even-Mansour construction revisited. In R. Gennaro
and M. J. B. Robshaw, editors, CRYPTO 2015, Part I, volume 9215 of LNCS, pages 209–223. Springer,
Heidelberg, Aug. 2015. 3
[19] J. Patarin. The “coeﬃcients H” technique (invited talk). In R. M. Avanzi, L. Keliher, and F. Sica,
editors, SAC 2008, volume 5381 of LNCS, pages 328–345. Springer, Heidelberg, Aug. 2009. 8
[20] E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.3. Internet-draft, Internet Engi-
neering Task Force, 2018. Work in Progress. 3, 4
[21] P. Rogaway and T. Shrimpton. A provable-security treatment of the key-wrap problem. In S. Vaudenay,
editor, EUROCRYPT 2006, volume 4004 of LNCS, pages 373–390. Springer, Heidelberg, May / June
2006. 3
[22] J. Salowey, A. Choudhury, and D. A. McGrew. AES galois counter mode (GCM) cipher suites for TLS.
RFC, 5288:1–8, 2008. 4
[23] S. Tessaro. Optimally secure block ciphers from ideal primitives. In T. Iwata and J. H. Cheon, editors,
ASIACRYPT 2015, Part II, volume 9453 of LNCS, pages 437–462. Springer, Heidelberg, Nov. / Dec.
2015. 3
23