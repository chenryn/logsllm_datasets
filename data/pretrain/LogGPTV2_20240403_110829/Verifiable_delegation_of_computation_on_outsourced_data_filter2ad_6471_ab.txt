considers the secure outsourcing of arbitrary or arithmetic
computations (e.g., statistics) over remotely stored data.
Multi-Function Verifiable Computation. The notion
of multi-function veriﬁable computation proposed by Parno,
Raykova, and Vaikuntanathan [44] is close to our model, in
that a client can delegate the computation of many func-
tions f1, f2, . . . on the same input D, while being able to
eﬃciently verify the results. Even though multi-function
veriﬁable computation does not require the client to ﬁx the
function f before outsourcing the data, this model still falls
short of our requirements. The main problem is that in
multi-function veriﬁable computation, the client has to store
some information τD for every input D on which it will ask
to compute a function fi(D). Furthermore, there is no pos-
sibility of updating τD without locally storing the previous
data. This essentially means that the data D has to be sent
all at once, thus ruling out all applications in the growing
data scenario.
Homomorphic Signatures and MACs. The problem of
realizing homomorphic message authentication schemes in
both the symmetric setting (MACs) and in the asymmet-
ric setting (signatures) has been considered by many prior
works. Homomorphic signatures were ﬁrst proposed by John-
son et al. [32]. However, since then, most works focus solely
on linear functions, mainly because of the important appli-
cation to network coding [12]. Several eﬃcient schemes for
linear functions have been proposed both in the random ora-
cle model [12, 26, 14, 16] and in the standard model [1, 3, 17,
18, 23, 4, 5]. Three more recent works consider the case of
larger classes of functions [13, 27, 15]. Boneh and Freeman
[13] proposed a realization of homomorphic signatures for
bounded constant degree polynomials. Gennaro and Wichs
[27] introduced homomorphic MACs and gave a construc-
tion for arbitrary computations which is proven secure in
a weaker model where the adversary cannot ask veriﬁcation
queries. Catalano and Fiore [15] proposed realizations of ho-
momorphic MACs that, despite capturing a restricted class
of computations (i.e., arithmetic circuits with polynomially-
bounded degree), support veriﬁcation queries and are more
eﬃcient than previous works.
However, virtually all of the above works suﬀer the prob-
lem of having a veriﬁcation algorithm which runs in time
proportional to the function. Gennaro and Wichs [27] dis-
cuss the possibility of verifying a MAC in time better than
executing the function, and propose some general solutions
for their scheme which are based on fully homomorphic en-
cryption and SNARGs [37]. However, neither the proposed
solutions nor the suggested techniques yield schemes that
achieve input-independent eﬃciency, and they do not seem
to lead to practically eﬃcient solutions, at least not as prac-
tical as required in this work.
Succinct Non-Interactive Arguments of Knowledge
(SNARKs). A solution for realizing fully homomorphic sig-
natures would be to use succinct non-interactive arguments
of knowledge (SNARKs) [10]. For a given NP statement, this
primitive allows for producing a succinct argument for prov-
ing knowledge of the corresponding witness. The main ad-
vantage of SNARKs is the succinctness of the argument (i.e.,
its size is independent of the size of both the NP statement
and its witness), which can thus be veriﬁed eﬃciently. How-
ever, SNARKs are not as practically eﬃcient as we might
wish, and require either the random oracle model [37] or non
standard, non-falsiﬁable, assumptions [28].
Verifiable Computation. As we mentioned earlier, the
problem considered by our work and addressed via homo-
morphic authenticators is related to the notion of veriﬁable
computation for which there exits a vast literature, ranging
from works for arbitrary computations [33, 37, 29, 24, 19,
2, 44, 25, 43] to works for speciﬁc classes of computations
[9, 22, 40, 16]. In veriﬁable computation, a client wants to
delegate a computationally heavy task to a remote server
while being able to verify the result in a very eﬃcient way.
As we mentioned before, most of these works suﬀer several
limitations that do not make them appropriate for the model
considered in this paper. For example, many existing solu-
tions require the delegator to run in time proportional to the
input size of the delegated function. This limitation arises
for diﬀerent reasons. For instance, in the deﬁnition proposed
by Gennaro, Gentry, and Parno [24] (and later adopted in
several works, e.g., [19, 9, 44, 22]), to delegate the compu-
tation of f (D), the client has to compute an encoding τD,f
of D, which depends on the function f . However, if we want
to choose f after outsourcing D, the computation of τD,f is
no longer possible. Alternatively, one could keep the entire
input D locally and then compute τD,f from D and f , which
would yield a running time proportional to the input size.
In other work (e.g., [33, 37, 29]) the eﬃciency requirement
for a client is to run in time poly(n, log T ), when delegating
a function f that runs in time T and takes inputs of size n.
Furthermore, as observed by Gennaro and Wichs [27],
even if it is possible to reinterpret some of the results on
veriﬁable computation in the setting of homomorphic mes-
sage authenticators, the resulting solutions are still not ap-
propriate. In particular, they might require a client to send
the data all at once and would not allow for composition of
several authenticated computations. We refer the reader to
[27] for a thorough discussion about this.
Another interesting line of work in this area recently pro-
posed eﬃcient systems for veriﬁable computation [47, 46, 45,
51]. The proposed solutions also work in a model where the
client needs to know the input of the computation, and it
also has to engage in an interactive protocol with the server
in order to verify the results. In contrast, our work consid-
865ers a completely non-interactive setting in which the proof
is transferred from the server to the client in a single round
of communication. In the past there have been proposals of
practical solutions, but of limited provable security: e.g., so-
lutions based on audit (e.g., [38, 8]) or secure co-processors
(e.g., [49, 52]) which prove the computation as correct, un-
der the assumption that the adversary cannot tamper with
the processor. Compared to these results, our work relies
only on standard cryptographic assumptions, and does not
require any trusted hardware.
1.2 A High-Level Overview of Our Techniques
To obtain our solution we build on the notion of homo-
morphic message authenticators proposed by Gennaro and
Wichs [27], a primitive which can be considered the secret-
key equivalent of homomorphic signatures [13]. The basic
idea of homomorphic MACs is that a user can use a se-
cret key to generate a set of tags σ1, . . . , σn authenticating
values D1, . . . , Dn respectively. Then, anyone can homo-
morphically execute a function f over (σ1, . . . , σn) to gen-
erate a short tag σ that authenticates D as the output of
f (D1, . . . , Dn). At ﬁrst glance, homomorphic MACs seem
to perfectly ﬁt the problem of veriﬁable computations on
(growing) outsourced data. However, a closer look at this
primitive reveals that this idea lacks the very important
property of eﬃcient veriﬁcation. As discussed in Section 1.1,
the issue is that in all existing constructions the veriﬁcation
algorithm of homomorphic MACs runs in time proportional
to the description of the function. Our key contribution is
therefore to solve this eﬃciency issue by proposing a deﬁni-
tion and a ﬁrst practical realization of homomorphic MACs
with eﬃcient veriﬁcation.
The starting point for the design of our construction is
the homomorphic MAC scheme of Catalano and Fiore [15]:
to authenticate a value m ∈ Zp, one “encodes” m into a
degree-1 polynomial y ∈ Zp[x] such that y(0) = m and
y(α) = FK (L). Here α ∈ Zp is a secret value randomly
chosen by the client, and FK(·) is a pseudorandom func-
tion that is used to “randomize” a label L. One can think
of a label as arbitrary information (e.g., a string) chosen
by the client to describe the meaning of the authenticated
value m (e.g., “air pollution on 2013/08/14 at 9:06:12”).
Given a set of n authentication polynomials y1, . . . , yn, the
server creates a new MAC y which authenticates (i.e., it
proves) that m is the result of f (m1, . . . , mn), e.g., f could
be the variance of pollution levels at all time instants within
a speciﬁc day/year etc. More speciﬁcally, the basic idea
in [15] is to compute y by homomorphically executing the
function f on the corresponding authentication polynomials,
i.e., y = f (y1, . . . , yn). By the design of the yi, this com-
putation satisﬁes y(0) = f (m1, . . . , mn) and also y(α) =
f (FK (L1), . . . , FK (Ln)). Hence, the client can test whether
a value m′ (proposed by the server) is indeed the result
of a computation f (m1, . . . , mn) by checking whether the
MAC y provided by the server veriﬁes the two conditions:
(i) y(0) = m′ and (ii) y(α) = f (FK (L1), . . . , FK (Ln)).
However, the Catalano-Fiore homomorphic MAC cannot
be adopted in our setting: verifying a MAC for a function f
requires the client to compute W = f (FK (L1), . . . , FK (Ln))
to perform check (ii), but this clearly takes the same time T
as that for computing f — exactly what we want to avoid!
One may then hope that once this value W is computed,
it could be re-used, e.g., to verify other computations in-
volving f . Unfortunately, this would require the re-use of
labels, which is not possible at all:
it is forbidden by the
security deﬁnition used in [15]. More critically, the security
of the Catalano-Fiore MAC completely breaks down in the
presence of label re-use!
In our work, we solve this critical issue with two main
ideas. Very informally, we ﬁrst elaborate a model that allows
us to partially, but safely, re-use labels. Then, we introduce
the construction of a pseudorandom function which allows us
to precompute a piece of label-independent information ωf ,
such that ωf can be re-used to compute W very eﬃciently
(when the labels Li are known).
To allow for a meaningful re-use of labels, we split labels
in two dimensions, thus elaborating a model of multi-labels.
A multi-label L consists of two components (∆, τ ) where ∆
is the data set identiﬁer and τ is the input identiﬁer. A
data set identiﬁer could for instance be “air pollution on
2013/08/14”; and an input identiﬁer could be used to iden-
tify a time, e.g., 9:06:12 am. For the example of the stock
market data, the values could be the stock market prices
for a company C at diﬀerent times T . Then, the data set
identiﬁer could be the name of C while the input identiﬁer
could be the date and time T of the stock market price. The
data set identiﬁer is essentially a way of grouping together
homogeneous data (e.g., data of the same population over
which one wants to compute signiﬁcant statistics) in such a
way that one can compute within a data set ∆.
While a multi-label L = (∆, τ ) can still not be re-used to
authenticate diﬀerent messages, this model does allow us to
assign the same input identiﬁers τ to as many messages as
we need, as long as such messages lie in diﬀerent data sets.
In any case, a re-use of a complete multi-label for authenti-
cation purposes would not make much sense, as multi-labels
are used by clients to “remember” and categorize the out-
sourced data. This transition from labels to multi-labels is
natural: think again of the air pollution levels for a speciﬁc
day. The input identiﬁers capture the hours of a day. Hence,
the input identiﬁers might be re-used for other days, but the
combination of date and time would never be re-used.
The use of multi-labels, however, does not in itself solve
the issue of the ineﬃcient veriﬁcation algorithm: in this case
one still has to compute W = f (FK (∆, τ1), . . . , FK(∆, τn)).
Our key technical tool for achieving eﬃcient veriﬁcation is
the introduction of a pseudorandom function F with a new
property that we call amortized closed-form eﬃciency: if one
precomputes some information ωf related to a program f
with input identiﬁers τ1, . . . , τn, but independent of the data
set ∆, then it is possible to use ωf to compute W , for any
data set ∆, very eﬃciently, e.g., in constant time. Amor-
tized closed-form eﬃciency essentially extends the closed-
form eﬃciency of Benabbas et al. [9] to the setting in which
the same function f is evaluated on many pseudorandom
inputs.2
If we consider the example mentioned before, then one can
precompute the veriﬁcation information ωf for the function
“variance of the air pollution levels at all time instants within
a day” (without knowing the actual data), and then use such
2We notice that the amortized extension was necessary in
our case: while previous works [9, 22] used the PRF to ob-
tain a shorter description of the function f (e.g., by deﬁning
the coeﬃcients of a polynomial in a pseudorandom way),
this is not possible in our case where the description of f
remains arbitrary.
866ωf for verifying the computation of this statistic on any
speciﬁc day (i.e., the data set) in constant time.
We propose an eﬃcient instantiation of amortized closed-
form eﬃcient PRFs whose security is based on standard
PRFs and on the Decision Linear assumption [11], thereby
achieving amortized closed-form eﬃciency in constant time,
i.e., independent of the input size n. Our PRF maps pairs of
binary strings (∆, τ ) to pseudorandom values in a group G
of prime order p. For this technical reason, we changed the
Catalano-Fiore MAC (which works with a PRF mapping to
Zp) so as to encode the MACs y into elements of G, and we
used pairings to “simulate” the ring behavior over Zp for all
those computations that require at most one multiplication,
i.e., arithmetic circuits of degree bounded by 2.
1.3 Organization of the Paper
The paper is organized as follows. In Section 2 we review
notation and basic deﬁnitions.
In Section 3 we introduce
the notions of multi-labeled programs and the deﬁnition of
homomorphic message authenticators with eﬃcient veriﬁca-
tion for multi-labeled programs. Next, Section 4 contains
the description of two technical tools that will be impor-
tant for the design of our new construction of homomorphic
MACs: algorithms for the homomorphic evaluation of arith-
metic circuits, and pseudorandom functions with amortized
closed-form eﬃciency. Finally, in Section 5, we give our con-
struction of homomorphic MACs with eﬃcient veriﬁcation,
we discuss its eﬃciency, and we prove its security.
Due to space constraints, some detailed descriptions and
proofs appear in an extended version of this work [7].