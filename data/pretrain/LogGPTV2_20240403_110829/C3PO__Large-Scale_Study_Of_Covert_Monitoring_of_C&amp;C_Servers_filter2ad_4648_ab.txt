for malware analysis, C3PO parses the memory images and extracts
code pages enabling import address and export directory tables
(IAT and EDT) reconstruction. For each memory image, C3PO iden-
tifies the code regions to construct a CFG starting at the point the
memory image was taken to all reachable code. This results in one
CFG per memory image, rooted at the instruction pointer from the
memory image. C3PO then creates a Combined CFG (C2FG) by
Table 2: Over-Permissioned Protocols
Category
File Transfer
Data Storage
Message-based
Communication
Over-Permissioned Protocol
File Transfer Protocol (FTP/TFTP)
Web Distributed Authoring & Versioning (WebDAV)
BitTorrent/Micro Transport Protocol (𝜇TP)
Mongo Database
MySQL
PostgreSQL
Object DB Connectivity (ODBC)
Internet Relay Chat (IRC)
Message Queuing Telemetry Transport (MQTT)
Implementation(s)
𝐿𝐿, 𝐻𝐿
𝐿𝐿, 𝐻𝐿
𝐿𝐿, 𝐻𝐿
𝐿𝐿, 𝐻𝐿
𝐿𝐿, 𝐻𝐿
𝐿𝐿, 𝐻𝐿
𝐿𝐿, 𝐻𝐿
𝐿𝑙 𝐿
𝐿𝐿 𝐻𝐿
matching overlapping blocks in all CFGs, ensuring no duplication.
It then traverses this C2FG to identify all function call sites and
compares it against the reconstructed IAT and EDT for a matching
API. Although a common challenge in static analysis is resolving
indirect function calls, the initial dynamic execution to generate
memory images populates concrete function pointers in memory
before image extraction, which aids in indirect call resolution. A
data dependence graph, built from the C2FG, also resolves addi-
tional indirect calls.
HL Identification. To identify 𝐻𝐿 implementations, C3PO tra-
verses the C2FG and resolves call targets. If it encounters an API that
is in the protocol database, C3PO stores the call site and the called
API. From our example in section 2, C3PO detected FTPPutFile
in Sanny, classifying it as a over-permissioned bot because it uses
FTP.
LL Identification. 𝐿𝐿 implementations use raw-socket APIs with
a protocol token. When C3PO traverses the C2FG and encounters
a call to a raw-socket API, it extracts API arguments to deduce
tokens (as described in subsection 3.3). If the token is in the pro-
tocol database, C3PO stores the call site and the called API/token
combination.
C3PO identified 62,202 over-permissioned bots (≈30%) in 200k
malware. After protocol identification, C3PO continues the analy-
sis to identify information that can be used to spoof bot-to-C&C
communication toward infiltration.
3.3 Infiltration Vector (IV) Identification
Infiltration vectors (IVs) are the credentials used by the bot to
connect to the C&C server. To spoof bot-to-C&C communication,
C3PO identifies IVs using a combination of backward slicing and
iterative selective symbolic execution.
Backward Slicing. C3PO uses the previously identified APIs,
call sites, and tokens to first locate the authentication APIs (e.g.,
SQLConnect for 𝐻𝐿 or send and a protocol token for 𝐿𝐿). C3PO
performs backward slicing (of the C2FG) from these API arguments
to identify a path to them through the malware. A challenge faced
during backward slicing is that API arguments only point to the first
byte of the data buffer (e.g., lpszPassword for InternetConnect)
resulting in an incomplete slice. To address this, C3PO generates
target instructions by identifying all instructions that were last to
write to all bytes of the data buffer.
Iterative Selective Symbolic Execution (iSSE). C3PO symboli-
cally executes along each of the backward slices to the authentica-
tion API. Since C3PO is constrained by the slice, symbolic execution
is selective precluding path explosion while maintaining accuracy.
Session 12B: Analyzing Crashes and Incidents CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3355To identify these capabilities, C3PO constructs a backward slice
from all data exfiltration and code reflection targets in the mal-
ware. It then performs API-to-capability mapping to derive the C&C
monitoring capabilities.
Backward Slicing. C3PO uses the previously identified APIs and
call sites to locate data exfiltration (e.g., HttpSendRequest) and
code reflection (e.g., ShellExecute) APIs. With each of these APIs
as data sinks, C3PO performs backward slicing. For data exfiltration
APIs, it backward slices from the API argument corresponding to the
data exfiltration buffer (e.g., lpOptional for HttpSendRequest).
For code reflection APIs, it backward slices from the operation ar-
guments that reveal the C&C command triggers (e.g., lpOPeration
for ShellExecute).
API-to-Capability Mapping. C3PO locates all API calls along
each of the backward slices, similar to the technique used in sub-
subsection 3.2.3. This gives C3PO API sequences that influence
the contents of the data exfiltration buffer or operation argument.
These sequences of APIs are then compared against the capability
models to identify the C&C monitoring capabilities. The capabil-
ity models are derived by manually reverse engineering known
malware and by using the insights from industry reports [32], [39].
In our study, we considered 6 categories of 16 C&C monitoring
capabilities, as shown in Table 3.
To illustrate, C3PO identifies the victim profiling capability in
the Sanny malware (section 2). C3PO performs backward slicing
from the data sink HttpSendRequest. It calculates the memory
addresses for all bytes of the sink buffer by referencing the shadow
memory that was populated during data dependency graph genera-
tion (subsection 3.3). C3PO then finds each instruction that was the
last to write to each byte of the buffer. Using these target instruc-
tions, C3PO conducts a backward slice to identify all influencing
operations of the sink buffer. It identifies GetUserDefaultLCID and
GetLocaleInfoW APIs leading up to HttpSendRequest API. This
API sequence conforms with the capability model for Victim Locale
Information, and hence the Sanny malware is classified as having a
Victim Profiling Capability.
Note that this capability can be used for covert monitoring be-
cause it describes the type of data and format stored on the C&C
server which results in immediate victim identification. It also re-
veals the scope of infection and potential damages incurred (victim
Table 3: C&C Monitoring Capabilities
Category
Browser
Password Stealing (1)
Service
Password Stealing (2)
C&C Monitoring Capabilities
Mozilla Stealer
Chrome Stealer
Internet Explorer Stealer
WiFi Stealer
Kerberos Stealer
Windows System Stealer
Registry-stored System Details
Live System Operating State
System OS Details
Victim Locale Information
Keylogger
Screen Capture
Audio Capture
(3)
(4)
(5) High-level Protocols
Raw Socket Transfer
(6) Code Reflection
Victim
Profiling
Spying, Live
Monitoring
File
Exfiltration
Code
Reflection
Figure 3: C3PO’s Infiltration Vector Identification of Sanny.
When iSSE reaches the authentication API, it halts to extract API
arguments by dereferencing data buffer pointers. If the arguments
are concrete, they are decoded to strings and iSSE analysis ends,
as the IVs have been found. If they are symbolic, it means the API
arguments were passed as parameters from the preceding (call-
ing) function. C3PO, guided by the path, incrementally expands
the exploration region by starting in the preceding function be-
fore re-initiating iSSE. This iterative process continues until the
IVs are found. We discuss instances where concretization is not
possible in section 8. Although execution can begin at the entry
point, C3PO is more likely to encounter symbolic loops which can
cause resource exhaustion if specific functions in the malware are
computationally complex. Therefore, C3PO starts small (within the
function), then incrementally expands to increase the likelihood of
argument extraction. Loop handling is still necessary and C3PO em-
ploys a loop limiter to exit symbolic loops. However, loop avoidance
is still preferred.
Figure 3 illustrates C3PO’s IV Identification steps for the Sanny
malware. C3PO performs backward slicing from the authentica-
tion API InternetConnect. For each of the authentication API
arguments (e.g., lpszServerName, nServerPort, lpszUserName,
lpszPassword, etc.), C3PO calculates the memory addresses for all
bytes of the data buffer using a shadow memory that was populated
during data dependency graph generation, a prerequisite for back-
ward slicing. C3PO finds each instruction that was the last to write
to each byte of the data buffer (Target Identification in Figure 3).
Using these target instructions, C3PO conducts a backward slice to
identify all influencing operations of the data buffer (the blue line
through four of Sanny’s functions in Figure 3). C3PO now traverses
each slice using iSSE (iSSE in Figure 3) to extract IVs for all argu-
ments. For Sanny, C3PO extracted the server hostname, username,
and password (e.g., Table 1, Row 2) after covering only 3 of the 4
functions in the backward slice (the red iSSE line in Figure 3). Thus,
C3PO can spoof bot-to-C&C communication and masquerade as a
trusted bot.
3.4 C&C Monitoring Capabilities
Bots execute capabilities on the infected systems, some of which
can be leveraged to provide covert monitoring. These C&C moni-
toring capabilities either (1) exfiltrate victim data or (2) allow bot
orchestrators to execute arbitrary commands. These capabilities are
valuable because the former alerts the authorities about the types
and format of data stored on the C&C server, and the latter triggers
commands on peer systems for botnet disruption upon infiltration.
Target IdentificationBackward SlicingiSSE…buf[0]        buf[1]        buf[2]        buf[3]                          buf[n-1]push ebpmov ebp, esppush ecxcmp hfile, 0push esijnz 0x40bd43xor esi, esijmp 0x40bd71...mov esi, [ebp+20h]lea ecx, [ebp+20h]push 0push eaxcall 0x4030e7push eaxpush esipush hfile call HttpSendRequestmov ecx, [ebp+20h]call 0x4049bamov eas, esipop esileave retn 4Backward Slice Target InstructionsInfiltration Vectorsin the SliceSession 12B: Analyzing Crashes and Incidents CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3356credentials provide access to sensitive accounts) providing legally
admissible evidence to confirm computer fraud and abuse.
To identify code reflection, the same process holds. However, in-
stead of identifying all APIs along the backward slice, C3PO locates
the closest API to the sink that reads incoming information (e.g.,
recv). Once found, C3PO extracts the argument from the buffer to
reveal the C&C command that triggered code reflection. This allows
the authorities with C&C access to issue the commands to peers
in the botnet to trigger arbitrary code execution. This capability
goes beyond C&C server monitoring, and instead supports botnet
disruption and takedown.
4 VALIDATING OUR TECHNIQUES
C3PO is implemented in C++ and Python, totaling 11k lines of
code leveraging Detours [40] for memory image extraction and
angr [41] to support binary analysis with specific applications to
protocol identification, backward slicing, and iSSE. We also used
the recently released AVClass2 [42], the current state-of-the-art in
malware labeling tools, whose predecessor, AVClass [43], has long
been relied upon in top-tier research [44]–[47].
Before deploying C3PO on the full data set, we validate its accu-
racy in identifying protocols and leverageable malware capabilities
which enable covert and targeted C&C server monitoring. We leave
the efficacy of infiltration vector analysis for our case studies (sec-
tion 6) which demonstrate our ability to covertly infiltrate C&C
servers. We evaluated C3PO using a ground truth dataset of 35
manually reverse engineered Windows malware from 13 different
families, covering all protocols in Table 2.
4.1 Protocol Identification Evaluation
Table 4 presents C3PO’s protocol identification evaluation. Columns
1-2 list the malware families (categorized by protocols found in each)
and the number of malware variants (𝑉 𝑎𝑟). Columns Low-level and
High-level Identifiers present the ground truth (GT) findings, C3PO’s
analysis results of protocol identifiers found, and the true positive
(TP), false positive (FP), and false negative (FN) metrics for each,
respectively. C3PO correctly (TP) identified 290 (121 𝐿𝐿 +169 𝐻𝐿)
protocol identifiers. Our GT analysis confirmed 304 (135 𝐿𝐿 + 169
𝐻𝐿) of them, revealing 13 FPs, 14 FNs, and an overall accuracy of
over 94%.
We then dug into the detection of protocols among all variants.
As an example, we identified 4 of the 13 malware families use
FTP employing both 𝐿𝐿 and 𝐻𝐿 identifiers. C3PO’s analysis of the
Softcnapp, Ragebot, Blackhole, and Rbot malware reported no FTP
FPs and FNs.
Upon close inspection, we found that FPs occur when C3PO
incorrectly identifies the use of a token (protocol command or key-
word). C3PO reported 2 extra IRC tokens in Ragebot due to custom
C&C commands which also used the PASS keyword (also an IRC
command). Similarly, C3PO reported FPs in 𝐿𝐿 implementations of
MongoDB (2 false tokens), IRC (5 false tokens), and BitTorrent/uTP
(6 false tokens) due to tokens appearing as substrings in other C&C
communication. Although adding missed tokens to the protocol
database reduces FNs, this is a case-by-case basis. Also, there is a
tradeoff between FPs and FNs - allowing and ignoring substrings
Table 4: Validating Protocol Identification. 𝑉 𝑎𝑟 represents malware vari-
ants. GT represents the ground truth compared with C3PO’s results to
identify the TP, FP, and FN metrics.
Malware
(by protocols) 𝑉 𝑎𝑟
Low-level Identifiers
High-level Identifiers
GT C3PO TP FP FN
GT C3PO TP FP FN
FTP/TFTP
Softcnapp
Ragebot
Blackhole
Rbot
Subtotal
WebDAV
Equationdrug
Subtotal
BitTorrent/𝜇TP
Sathurbot
Icloader
Subtotal
MySQL
Delf
Subtotal
MongoDB
Cstealer
Subtotal
ODBC
Zbot
Subtotal
PostgreSQL
Alma
Subtotal
IRC
Softcnapp
Ragebot
Rbot
Slackbot
Delf
Subtotal
MQTT
Expiro
Subtotal
Total
5
2
3
2
12
2
3
2
1
3
4
4
1
1
4
4
2
2
5
1
2
4
4
16
0
2
3
2
7
54
54
18
0
18
0
0
2
2
0
0
0
0
15
6
9
12
12
54
0
3
3
0
35 135
0
2
3
2
7
42
42
24
0
24
0
0
4
4