Microsoft Edge MemGC Internals
Henry Li,TrendMicro
2015/08/29
Agenda
• Background
• MemGC Internals
• Prevent the UAF'S exploit
• Weaknesses  of MemGC
Notes
• Research is based on Windows 10 
10041( edgehtml.dll, chakra.dll)
• The latest windows versions( windows 10 
10240) data structure there are some small 
changes
Who am i?
• A security research in TrendMicro CDC zero 
day discovery team.
• Four years of experience in vulnerability & 
exploit research.
• Research interests are browser 0day 
vulnerability analysis, discovery and exploit. 
• Twitter/Weibo:zenhumany
Background
• June 2014  IE introduce  ISOLATE HEAP
• July 2014  IE introduce DELAY FREE
Background
• Isolated Heap  can bypass
• Delay Free
– Pointer to the free block remains on the stack for 
the entire period of time from the free until  the 
reuse, can prevent UAF EXPLOIT
– Other situation, can bypass
What’s MemGC
• Chakra GC use Concurrent Mark-Sweep (CMS) 
Managing Memory
• Edge use the same data structures to mange 
DOM and DOM’S supporting objects, called 
MemGC
MemGC Internals
• Data Structures
• Algorithms
MemGC Data Structures
MemProtectHeap
0x000
m_tlsIndex
:int
0x108    m_recycler
:Recycler
Recycler
0x026c    m_HeapBlock32Map    HeapBlock32Map
0x42bc    m_HeapInfo
:HeapInfo
HeapInfo
0x4400    m_HeapBucketGroup[ 0x40]  :HeapBucketGroup array
0x5544    m_LargeHeapBucket[ 0x20 ] :LargeHeapBucket array
0x5b44    m_lastLargeHeapBucket
:LargeHeapBucket
HeapBucketGroup
HeapBucketGroup 0x154
0x000
m_HeapBucketT
0x044    m_HeapBucketT
0x080    m_HeapBucketT
0x0c8    m_HeapBucketT
0x10c    m_HeapBucketT
HeapBucketT
HeapBucketT
0x04
size    :int
0x0c    m_SmallHeapBlockAllocator
0x20    pPartialReuseHeapBlockList
0x24    pEmptyHeapBlockList
0x28
pFullMarkedHeapBlockList
0x2c
pPendingNewHeapBlockList
SmallHeapBlockAllocator
0x00    endadderss
0x04    startaddress
0x08    pSmallNormalHeapblock
LargeHeapBucket
LargeHeapBucket
0x04    size
0x0c    pSweepLargeHeapBlockList
0x10    pNewLargeHeapBlockList
0x18    pDisposeLargeHeapBlockList
0x1c    pPendingLargeHeapBlockList
0x28    pFreeListHead
0x2c    pExplicitFreeList
SmallNormalHeapBlock
0x04: StartAddress
0x20:pNextSmallHeapblock
0x24: pFreeHeapObject
0x2c: pValidPointersBuffer
0x34: blockSize
0x36: objectCapacity
0x44: pMarkBitMapTable
0x48: freeBitVector
0 1 2 3 4 5 6 7 8 9 a b c d e f
1
0
1
1
1
2
1
3
1
4
1
5
1
6
1
7
1
8
1
9
1
a
1
b
1
c
1
d
1
e
1
f
Attribute Array
SmallNormalHeapBlock
LargeHeapBlock
LargeHeapBlock
0x04 pageAddress
0x28 allocblockcount
0x2c blockCapacity
0x30 allocAddress
0x34 endAddress
0x38 pNextLargeHeapBlock
0x44 pPrevFreeList
0x48 pNextFreeList
0x4c pFreeHeapObject
0x64 allocBlockAddressArray[]
0
1
2
…
blockCapa
city-1
HeapBlock32Map
HeapBlock32Map
0x00    count
0x04
m_pL2MapChunkArray[4096] 
L2MapChunk
0x0000    markbitmaptable[256]
0x2000    m_address2heapblocktable[256]
OVERVIEW
• Alloc
• Free
• Mark
• Sweep
Algorithms
MemGC Alloc
 edgehtml!MemoryProtection::HeapAlloc
 edgehtml!MemoryProtection::CMemoryGC::ProtectedAlloc
 chakra! MemProtectHeapRootAlloc
 chakra!Recycler::NoThrowAllocImplicitRoot
Alloc
• (0x00-0x400]—HeapBucketGroup
– array size: 0x400/0x10  = 0x40
• (0x400-0x2400]—LargeHeapBucket
– array size: 0x2000/0x100 = 0x20
• (0x2400-)—LargeHeapBucket
– size: 0x01
MemGC Alloc
size
HeapBucket address
0x10
m_HeapBucketGroup[0x00]
0x20
m_HeapBucketGroup[0x10]
0x30
m_HeapBucketGroup[0x20]
……
……
0x390
m_HeapBucketGroup[0x38]
0x400
m_HeapBucketGroup[0x39]
0x500
m_LargeHeapBucket[0x00]
0x600
m_LargeHeapBucket[0x01]
……
……
0x2300
m_LargeHeapBucket[0x18]
0x2400
m_LargeHeapBucket[0x19]
>0x2400
m_LastLargeHeapBucket
HeapBucketT
HeapBucketT
0x00    pHeapInfo
0x04    size
0x0c
m_SmallHeapBlockAllocator
0x00    endaddress
0x04
startaddress
0x08    pSmallNormalHeapBlock
0x20    pPartialReuseHeapBlockList
1、startaddress + blocksize m_HeapInfo);
Recycler* pRecycler = this->pRecycler;
//Adjust the size to 0x10 bytes align.
int align_size = (size + 15) & 0xfffffff0;
//size m_HeapBucketGroup
int index  = align_size / 16;
//Get the SmallNormalHeapBlock type HeapBucketT
HeapBucketT* pHeapBucketT = &pHeapInfo->m_HeapBucketGroup[ index 
].m_HeapBucketT;
//Get SmallHeapBlockAllocator
SmallHeapBlockAllocator* pSmallHeapBlockAllocator = pHeapBucketT->pSmallHeapBlockAllocatorT;
//Get pSmallNormalHeapBlock
SmallNormalHeapBlock* pSmallNormalHeapBlock = pSmallHeapBlockAllocator->pSmallHeapBlock ;
//if startAddress + align_size > endAddress,go into SnailAlloc or 
if (pSmallHeapBlockAllocator->startAddress + align_size endAddress)
{
//startAddress + align_size startAddress;
//update the startAddress of pSmallHeapBlockAllocator equal startAddress + align_size
pSmallHeapBlockAllocator->startAddress = pHeapBucketT->startAddress + align_size;
if( pSmallHeapBlockAllocator->NeedSetAttributes( 8 ))
{
pSmallNormalHeapBlock->SetAttribute(pHeapBucketT, 8);
}
return allocAddress;
}
NoThrowAllocImplicitRoot:Part I
Align the size to 0x10
Size  endAddress,go into SnailAlloc or 
else
{
//startAddress==0 or endAddress!=0 ,gointo SnailAlloc
if( pSmallHeapBlockAllocator->startAddress ==0 || pSmallHeapBlockAllocator->endAddress!=0 )
{
allocAddress = pHeapBucketT->SnailAlloc(pRecycler, pSmallHeapBlockAllocator, align_size, 8, 1);
if( allocAddress == 0)
return 0;
else
*allocAddress = 0;
return allocAddress
}
if( pSmallHeapBlockAllocator->NeedSetAttributes( 8 ))
{
pSmallNormalHeapBlock->SetAttribute(pHeapBucketT, 8);
}
//startAddress !=0 &&endAddress==0, we can reuse the free heap object
//free heap object first dword is a pointer which pointer to the next heap object.
allocAddress =
pSmallHeapBlockAllocator->startAddress;
//startAddress to the next heap object
pSmallHeapBlockAllocator->startAddress = (*pSmallHeapBlockAllocator->startAddress) & 0xffffffe;
return allocAddress;
}
NoThrowAllocImplicitRoot:Part I
Goto snailalloc or reuse freeobject
NoThrowAllocImplicitRoot:Part II
Alloc middle object
else if( size m_LargeHeapBucket[ largebucketIndex];
//Get pLargeHeapBlockList
pLargeHeapBlock = pLargeHeapBucket->pLargeHeapBlockList;
//pLargeHeapBlockList not zero, go into LargeHeapBlock::Alloc
if(pLargeHeapBlock)
{
allocAddress = pLargeHeapBlock ->Alloc( align_size, 8)
if( allocAddress)
{
*allocAddress = 0;
return allocAddress;
}
}
//pLargeHeapBlockList is zero, check freelistflag,if true, to alloc from freelsit
else if( pLargeHeapBucket-> freelistflag)
{
allocAddress = pLargeHeapBucket->TryAllocFromExplicitFreeList(pLargeHeapBucket,
(int)v2, v12, 8u);
if( allocAddress || allocAddress = pLargeHeapBucket->TryAllocFromFreeList( )!=0 )
return allocAddress;
}
//if above two step alloc fail, go into LargeHeapBucket::SnailAlloc
pLargeHeapBucket->SnailAlloc(pRecycler, align_size, 8, 1);
}
NoThrowAllocImplicitRoot:Part III
Alloc large object
else //size > 0x2400,go into Recycler::LargeAlloc
{
allocAddress = Recycler::LargeAlloc( pHeapInfo, size, 8 )
*allocAddress = 0;
return allocAddress;
}
HeapBucketT::SnailAlloc Part I
//SmallHeapBlockAllocator::Clear( )
pSmallHeapBlockAllocator->clear( );
//get reuse smallheapblock
SmallHeapBlock* pFreeListHeapBlock = this->pFreeListHeapBlock;
//pFreeListHeapBlock not zero, go into reuse the heapblock
if(pFreeListHeapBlock )
{
//set the pFreeListHeapBlock to the NextSmallHeapBlock
this->pFreeListHeapBlock = pFreeListHeapBlock->pNextSmallHeapBlock;
pFreeListHeapBlock->markFlag = 1;
//set SmallHeapBlockAllocator::pSmallHeapblock pointer pFreeListHeapBlock
pSmallHeapBlockAllocator->pSmallHeapBlock = pFreeListHeapBlock;
//beginAddress point to the reuse heapblock pFreeHeapObject
pSmallHeapBlockAllocator->beginAddress = pFreeListHeapBlock->pFreeHeapObject;
}
//Get HeapBlockMap32
HeapBlockMap32* pHeapBlockMap32 = &pRecycler->m_HeapBlockMap32;
//initial SmallNormalHeapBlock
pSmallNormalHeap-> pPageSegment = pageSegment
pSmallNormalHeap-> startAddress = pageaddress;
int first_index = (pageaddress /2^20)
int second_index = (pageaddress / 2^12) & 0xff;
pL2MapChunk = pHeapBlockMap32->m_pL2MapChunkArray[ first_index ];
//map the pageaddress and SmallHeapBlock relation
pL2MapChunk->Set(second_index, 1, pSmallHeapBlock);
//Get markbitmaptable to initial SmallNormalHeapBlock::pMarkBitMap
markbitmaptable = pL2MapChunk->m_markbitmaptable[ second_index ];
pSmallHeapBlock->pMarkBitMap
= markbitmaptable;
//add the new SmallNormalHeapBlock into Recycelr-> pSmallNormalHeapBlockList list
pSmallHeapBlock-> pNextSmallHeapblock = pRecycler-> pSmallNormalHeapBlockList;
pRecycler-> pSmallNormalHeapBlockList = pSmallHeapBlock;
pSmallHeapBlock-> markflag = 1;
//Initial pSmallHeapBlockAllocator
pSmallHeapBlockAllocator->pSmallHeapBlock = pSmallHeapBlock;
pSmallHeapBlockAllocator->startAddress = pSmallHeapBlock->startAddress;
pSmallHeapBlockAllocator->endAddress = pSmallHeapBlock->startAddress + 0x1000;
……
return pageaddress;
HeapBucketT::SnailAlloc Part II
LargeHeapBlock* LargeHeapBucket::AddLargeHeapBlock(int blockSize, bool param4)
{
int freelistflag = this->freelistflag;
int memoryCapacity =0;
struct Segment *pSegment = null;
HeapInfo* pHeapInfo = this->pHeapInfo;
Recycler* pRecycler = pHeapInfo->pRecycler;
if( freelistflag == 0)
memoryCapacity = 4* blockSize;
//memoryCapacity + 16 >= memoryCapacity check int overflow
if( memoryCapacity + 16 >= memoryCapacity )
{
//culation requires allocation of pages
int pagenum =( memoryCapacity + 0xfff)>>12;
//select pageallocator
RecyclerPageAllocator* pRecyclerPageAllocator = &pRecycler-
>m_RecyclerPageAllocator[2];
//alloc pages 
int pageaddress = pRecyclerPageAllocator->AllocInternal( pagenums,
&pSegment);
//Calculate the pages contains how may blocks
int blocksNum =(((pagenums>10 ) + 1;
//largeheapblock size is 0x64 add blocksNum*4
int largeheapblockSize = 0x64 + blocksNum*4;
//alloc LargeHeapBlock
LargeHeapBlock* pLargeHeapblock =
(LargeHeapBlock*)HeapAllocator::NoThrowAllocZero(largeheapblockSize );
LargeHeapBucket::AddLargeHeapBlock Part I
if( pLargeHeapBlock)
{
pLargeHeapBlock->pLargeHeapBucket = this;
pLargeHeapBlock->pagenum = pagenum;
pLargeHeapBlock->blockCapacity = blocksNum;
pLargeHeapBlock->allocAddress = pageaddress;
pLargeHeapBlock->largeHeapType = 0x05;
pLargeHeapBlock->pNextLargeHeapBlock = pLargeHeapBlock;
pLargeHeapblock->pPageSegment = pSegment;
pLargeHeapblock->pageAddress = pageaddress;
pLargeHeapblock->unknown = 0;
pLargeHeapblock->endaddress = pageaddress + pagenumpageCount += pagenum;
pLargeHeapblock ->pHeapInfo = pHeapInfo;
*(pLargeHeapBlock+0x54) = 0;