        FROM  : AS  
```
您也可以指定用于多阶段映像构建的构建阶段，正如您将在*多阶段构建映像*配方中看到的。
*   `RUN`:我们可以通过两种方式执行`RUN`指令。首先，我们可以在 shell ( `sh -c`)中运行它:
```
        RUN   ... 
```
其次，我们可以直接运行一个可执行文件:
```
        RUN ["executable", "param1",...,"paramN" ]
```
正如我们所知，使用 Docker，我们创建一个覆盖层——一个层在另一个层之上——来制作结果映像。通过每个`RUN`指令，我们在之前提交的层之上创建并提交一个层。容器可以从任何提交的层启动。
默认情况下，Docker 会尝试缓存不同`RUN`指令提交的层，以便它们可以在后续构建中使用。但是，在构建映像时，可以使用`--no-cache flag`关闭此行为。
*   `LABEL` : Docker 1.6 为附加的 Docker 映像和容器的任意键值对增加了一个新特性。我们在[第 2 章](02.html)、*使用 Docker 容器*中的*标签和过滤容器*配方中介绍了部分内容。要给映像添加标签，我们使用 Dockerfile 中的`LABEL`指令，例如`LABEL distro=ubuntu`。
*   `CMD`:`CMD`指令在启动容器时提供默认的可执行文件。如果`CMD`指令没有任何可执行文件(参数 2)，那么它将为`ENTRYPOINT`提供参数:
```
        CMD  ["executable", "param1",...,"paramN" ]
        CMD ["param1", ... , "paramN"]
        CMD   ...   
```
Dockerfile 中只允许一条`CMD`指令。如果指定了不止一个，那么将只考虑最后一个。
*   `ENTRYPOINT`:这有助于我们将容器配置为可执行文件。与`CMD`类似，`ENTRYPOINT`最多可以有一条指令；如果指定了一个以上，则仅最后一个将被接受:
```
        ENTRYPOINT  ["executable", "param1",...,"paramN" ]
        ENTRYPOINT   ... 
```
一旦用`ENTRYPOINT`指令定义了参数，它们在运行时就不能被覆盖。但是`ENTRYPOINT`可以作为`CMD`，如果我们想对`ENTRYPOINT`使用不同的参数。
*   `EXPOSE`:这暴露了容器上的网络端口，它将在运行时监听这些端口:
```
        EXPOSE   [ ... ]
```
我们还可以在启动容器时公开一个端口。我们在[第 2 章](02.html)、*使用 Docker 容器*中的*在启动容器时暴露港口*配方中介绍了这一点。
*   `ENV`:这会将环境变量``设置为``。它将被传递给所有后续指令，并在从结果映像运行容器时保持不变:
```
        ENV  
```
*   `ADD`:这将文件从源复制到目标:
```
        ADD   
```
以下`ADD`指令适用于包含空格的路径:
```
        ADD [""... ""] 
```
*   ``:这必须是构建目录中的文件或目录，我们从其中构建映像，这也称为构建的上下文。源也可以是远程网址。
*   ``:这必须是容器内部的绝对路径，来自源的文件/目录将被复制到其中。
*   `COPY`:这和`ADD. COPY  `类似:
```
          COPY  [""... ""]  
```
`COPY`指令可选地支持多级构建的`--from`选项。
*   `VOLUME`:此指令将使用给定的名称创建一个装载点，并使用以下语法将其标记为装载外部卷:
```
          VOLUME ["/data"]    
```
或者，您可以使用以下代码:
```
        VOLUME /data
```
*   `USER`:这将使用以下语法为以下任何运行指令设置用户名:
```
        USER  /  
```
*   `WORKDIR`:这为跟随它的任何`RUN`、`CMD`和`ENTRYPOINT`指令设置工作目录。它可以在同一个 Dockerfile 中有多个条目。可以使用以下语法给出相对于较早的`WORKDIR`指令的相对路径:
```
         WORKDIR  
```
*   `ONBUILD`:这将触发指令添加到稍后执行的映像中，此时该映像将被用作另一个映像的基础映像。该触发器将作为下游 Dockerfile 中`FROM`指令的一部分运行，使用以下语法:
```
        ONBUILD [INSTRUCTION]
```
# 请参见
*   `docker image build`的`help`选项:
```
        $ docker image build --help  
```
*   Docker 网站上的文档:
    *   [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/)
# 构建阿帕奇映像–docker file 示例
现在，我们已经很好地理解了`Dockerfile`构造，在这个食谱中，我们将构建一个非常简单的 Docker 映像，它捆绑了`apache2`网络服务器，并且还添加了元数据，以便每当从这个映像创建新容器时，在容器内部启动`apache2`应用。
# 准备好
在我们开始之前，`git`存储库[https://github.com/docker-cookbook/apache2](https://github.com/docker-cookbook/apache2)有一个`Dockerfile`来构建一个`apache2`映像，所以克隆存储库，如下代码所示:
```
    $ git clone https://github.com/docker-cookbook/apache2.git  
```
现在，转到`apache2`目录:
```
    $ cd apache2
    $ cat Dockerfile
    FROM alpine:3.6
    LABEL maintainer="Jeeva S. Chelladhurai "
    RUN apk add --no-cache apache2 && \
        mkdir -p /run/apache2 && \
        echo "Docker Cookbook" > \
            /var/www/localhost/htdocs/index.html
    EXPOSE 80
    ENTRYPOINT ["/usr/sbin/httpd", "-D", "FOREGROUND"]
```
# 怎么做...
使用以下`build`命令，我们可以构建一个新的映像:
```
    $ docker image build -t apache2 .
    Sending build context to Docker daemon  52.74kB
    Step 1/5 : FROM alpine:3.6
    3.6: Pulling from library/alpine
    88286f41530e: Pull complete
    Digest: sha256:f006ecbb824d87947d0b51ab8488634bf69fe4094959d935c0c103f4820a417d
    Status: Downloaded newer image for alpine:3.6
     ---> 76da55c8019d
    Step 2/5 : LABEL maintainer "Jeeva S. Chelladhurai "
     ---> Running in 83e2c061c956
     ---> f77381e55873
    Removing intermediate container 83e2c061c956
    Step 3/5 : RUN apk add --no-cache apache2 && 
    mkdir -p /run/apache2 && 
               echo "Docker Cookbook" >
                    /var/www/localhost/htdocs/index.html
     ---> Running in 3abde4480544
    fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/main/x86_64/APKINDEX.tar.gz
    fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/community/x86_64/APKINDEX.tar.gz
    (1/6) Installing libuuid (2.28.2-r2)
    (2/6) Installing apr (1.5.2-r1)
    (3/6) Installing expat (2.2.0-r1)
    (4/6) Installing apr-util (1.5.4-r3)
    (5/6) Installing pcre (8.41-r0)
    (6/6) Installing apache2 (2.4.27-r1)
    Executing apache2-2.4.27-r1.pre-install
    Executing busybox-1.26.2-r5.trigger
    OK: 7 MiB in 17 packages
     ---> d7585e779ee8
    Removing intermediate container 3abde4480544
    Step 4/5 : EXPOSE 80
     ---> Running in ac761e55a45c
     ---> 63bbb379239f
    Removing intermediate container ac761e55a45c
    Step 5/5 : ENTRYPOINT /usr/sbin/httpd -D FOREGROUND
     ---> Running in fa3e5be6b893
     ---> 97f0bac0f021
    Removing intermediate container fa3e5be6b893
    Successfully built 97f0bac0f021
    Successfully tagged apache2:latest   
```
# 它是如何工作的...
构建过程从 Docker Hub 中提取`alpine`基本映像，安装`apache2`包，并创建一个简单的 HTML 页面。然后继续，将端口`80`作为一段元数据添加到映像中，最后设置在容器开始时启动 Apache 应用的指令。
# 还有更多...
让我们从创建的映像运行一个`apache2`容器，获取它的 IP 地址，并从它访问网页:
![](img/455b9b62-3b68-4177-a5a8-de07296e7811.png)
# 请参见
*   `docker image build`的`help`选项:
```
        $ docker image build --help
```
*   Docker 网站上的文档:
    *   [https://docs . docker . com/engine/reference/command line/imaim _ build/](https://docs.docker.com/engine/reference/commandline/imaim_build/)
# 设置私有索引/注册表
之前，我们使用 Docker 托管的注册表([https://hub.docker.com](https://hub.docker.com))来推送和拉取映像。尽管如此，您经常会遇到必须在基础架构中托管私有注册表的用例。在这个食谱中，我们将使用 Docker 的`registry:2`映像来托管我们自己的私有注册表。
# 准备好
确保主机上正在运行 Docker 守护程序 1.6.0 或更高版本。
# 怎么做...
请执行以下步骤:
1.  让我们从使用以下命令在容器上启动本地注册表开始:
```
        $ docker container run -d -p 5000:5000 \
                           --name registry registry:2 
```
2.  要将映像推送到本地注册表，您需要使用 Docker image tag 命令在存储库名称前加上`localhost`主机名或 IP 地址`127.0.0.1`和注册表端口`5000`，如以下代码所示:
```
        $ docker tag apache2 localhost:5000/apache2  
```
在这里，我们将重用我们在之前的食谱中构建的`apache2`映像。
3.  现在，让我们使用`docker image push`命令将映像推送到本地注册表，如下图所示:
![](img/7177abf8-2ada-4870-a711-ec80207d3cf7.png)
# 它是如何工作的...
前面的拉映像命令将从 Docker Hub 下载官方注册表映像，并在端口`5000`上运行。`-p`选项将容器端口发布到主机系统的端口。我们将在下一章探讨关于端口发布的细节。
# 还有更多...
注册表有一个通知框架，当它收到一个推或拉请求时，可以调用网络钩子。这些网络钩子可以和你的开发工作流链接在一起。
# 请参见
*   GitHub 上的文档:
    *   [https://github . com/docker/docker 登录](https://github.com/docker/docker-registry)
# 自动化构建–使用 GitHub 和 Bitbucket
我们之前看到了如何将 Docker 映像推送到 Docker Hub。Docker Hub 允许我们使用其构建集群从 GitHub 或 Bitbucket 存储库中创建自动化映像。GitHub/Bitbucket 存储库应该包含 Dockerfile 以及要在映像中复制/添加的内容。我们将在接下来的章节中看到一个 GitHub 示例。
# 准备好
为此，您需要一个有效的 Docker ID 和 GitHub 帐户。
此外，请访问 https://github.com/docker-cookbook/apache2 获取 apache2 文档。
# 怎么做...
请执行以下步骤:
1.  登录到 Docker 集线器(https://hub . docker . com/)。
2.  创建自动构建的第一步是链接您的 GitHub 或 Bitbucket 帐户。帐户链接功能在链接帐户和服务网络向导中可用。您可以通过浏览“设置”菜单或通过“创建”下拉列表中的“创建自动生成”菜单来访问此向导。在这里，我们将选择前一个选项，即“设置”菜单，可从最右侧的下拉菜单中访问:
![](img/7c3b48c2-e300-4bd5-87c7-0f400e1be9db.png)
3.  在前面的向导中，单击链接 Github 选项；在下一个屏幕中，您将看到两个选项，如下图所示。在这里，让我们单击公共和私有(推荐)选项下的选择按钮:
![](img/6b1ae037-0624-4499-baa8-8f272e6e35dc.png)
4.  将打开一个新窗口或选项卡，供您输入 GitHub 凭据，如下图所示:
![](img/f68d1d77-e9f3-40c9-9d1c-d2b3a5834f47.png)
5.  成功登录到您的 GitHub 帐户后，继续授予 GitHub 帐户中的组织权限。在本例中，我们已经向`docker-cookbook`组织授予了权限。单击授权摘要按钮:
![](img/687a26c6-bf9b-41eb-92b6-57c2057c3958.png)
正如您在下面的截图中看到的，现在 Docker Hub 帐户链接到了 GitHub 帐户: