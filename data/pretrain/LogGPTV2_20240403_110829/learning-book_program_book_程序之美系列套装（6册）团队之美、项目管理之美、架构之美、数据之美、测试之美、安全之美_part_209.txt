---
## Page 1182
“退出”一个命令。再举一个例子，绝大多数的命令在要求用户输入
参数时都采用了标准的Emacs设施，以确保不同包之间的提示行为
是高度一致的。
11.3.2滋长的特性和可维护性
显然，当你拥有越来越多的代码时，维护它就需要付出更多的努
力。当一个开发人员的Lisp包被选入Emacs标准版本时，主维护人员
将邀请这个包的作者一起参与Emacs的后续维护工作，因此随着包
的不断增多，Emacs的维护团队也会相应扩大。如果某些并发人员
放弃对包的维护职责，那么主维护人员必须再寻找一位志愿者，或
者将这个包从Emacs标准版本中去除。
对于这个解决方案而言，关键在于Emacs是一个包的组合体，而不
是统一定义的整体。从某种意义上说，从Emacs的动态维护效果上
它更像是一个平台（例如操作系统），而不像是一个独立的应用程
序。它不是由一个独立的设计团队来安排工作优先级、分配工作任
务，而是由一个自主的并发人员组成的社区并发的，每个人都有自
已的工作目标，然后通过一个选择和合并的过程，将他们的工作合
并到发布版本中。最后，没有任何一个人能够承担整个系统的维护
工作。
在这个过程中，Lisp语言扮演了重要的抽象边界的角色。和绝大多
数流行的解释型语言一样，EmacsLisp代码和Lisp解释程序细节、底
层处理器架构是高度隔离的。同样，Lisp所提供的文本编辑类基本
操作隐藏了缓冲区、文本属性及其他编辑所需对象的底层操作细
节；Lisp中的可见特性绝大部分都取决于开发人员长期的贡献与支
持。这为Emacs中核心的C程序代码的改进和扩展工作提供了很大的
自由度，减少了破坏Lisp包中现有内容的兼容性。例如，Emacs的缓
冲区在对文本属性、覆盖图、多字符集提供支持之前，对此前存在
的特性提供了良好的兼容性支持。
11.4另外两个架构
有很多应用程序都为用户提供了添加扩展的机制。从协作软件并发
网站系统（如Trac插件）到字处理软件（OpenOffice的Universal
NetworkObjects），再到版本控制软件（Mercurial的扩展插件），
都提供了扩展接口。在此我们将对Emacs和另外两个支持用户扩展
的架构进行比较。
1181
---
## Page 1183
11.4.1Eclipse
虽然很多人都知道Eclipse是一个流行的、开源的、针对Java和
C++的集成并发环境，不过它实际上并没有提供任何功能。它只是
为各种插件提供了一个框架，为支持各种特定并发功能（如编写
Java代码、调试程序或者使用版本控制软件）的组件提供方便的通
信机制。Eclipse的架构使开发人员能够将针对某个问题的有效解决
方案集成到平台中，以得到一个统一的、功能齐备的并发环境。
作为一个开发环境，Eclipse提供了许多Emacs所欠缺的有价值功
能。例如，插件JavaDevelopmentTools就对重构和代码分析提供了
广泛的支持。与其比较，Emacs只是能够理解正在编辑的程序代码
的语义结构，无法提供类似的支持。
如果Eclipse的架构不是处处预留端口，那么它将毫无价值，所有有
效的功能都是由插件提供的。在此没有二等公民：最流行的插件也
和其他一样，构建在同一个用户界面上。因为Eclipse为每个插件提
供了对其输入和显示的底层控制，插件可以根据自己的目的自由地
选择模型、视图、控制器层。
不过，这种方法也有许多缺点：
Eclipse插件开发是不安全的，这是EmacsLisp代码所具备的。一个
充满bug的插件很容易导致Eclipse崩溃或死锁。在Emacs中，Lisp解
释程序能够确保用户能中正失控的Lisp代码，在Lisp代码和模型实
现之间的强边界可以避免用户数据被破坏。
由于Eclipse插件之间的接口相对复杂，因此编写一个Eclipse插件更
像是为一个深奥精妙的应用程序添加一个模块，而不仅仅是写一段
脚本。当然，这些接口正是实现Eclipse功能的基础，但插件的作者
将不仅和大型复杂的项目打交道，还将涉及一些头脑简单的项目。
一个插件需要有足够的样板文件代码，在Eclipse中提供了一个帮助
大家编写插件的插件。EclipsePlug-inDevelopment
Environment（Eclipse插件开发环境）能够生成代码的骨架，生成默
认的XML配置文件和manifest文件，同时还将创建测试环境中的回
收（teardown）机制。此外还提供了一个自动生成样板文件代码的
“向导”，它使插件开发人员更易于动手，但它无法降低底层接口的
复杂性。
1182
---
## Page 1184
所有这一切使得Eclipse插件成为了一种不太优雅的扩展机制。插件
并不是一个能够轻易制造完成的自动化任务，提供的用户界面体验
也不太友好。
这让我想起在本章并始处提出的三个问题中的第二个，其中我认为
值得考虑的就是关于插件机制的问题：在插件中可以使用哪类接
口？它是否足够简单，只需通过脚本化语言就能够完成快速并发？
插件并发人员能否在较高的抽象级别上并发，也就是更接近问题
11.4.2Firefox
在当前深奥精妙的Web应用（如GoogleMail、Facebook等）中大量
使用了诸如动态HTML、AJAX之类的技术，以提供更加流畅的用户
体验。这些应用程序的网页中包含了在本地对用户输入进行应答的
JavaScript代码，然后根据需要与底层的服务进行通信。JavaScript
代码访问和修改网页内容时使用的是标准的接口，名为文档对象模
型（DocumentObjectModel,DOM），还有一些标准用来确定页面的
显示效果。所有现代浏览器都在某种程度上实现了这些标准。
虽然web浏览器不是一个文本编辑器而是一个浏览器，但它的架构
和Emacs的架构却有着惊人的相似之处：
虽然EmacsLisp和JavaScript在语法层面完全不同，但在语义层面却
有许多本质的共性：例如EmacsLisp和JavaScript都是解释型的、高
度动态的、安全的。都是提供了垃圾回收机制的语言。
和EmacsLisp类似，经常是先从一小段改变页面局部行为的
JavaScript片段开始，然后逐渐发展成更加庞大、深奥精妙的应用。
其进入门槛很低，但它也能够解决很多大型的问题。
和Emacs类似，页面显示的管理也是自动的。JavaScript代码只是对
将在网页上展现的文本节点进行修改，浏览器将会根据需要及时地
在页面完成相应的更新。
·和Emacs类似，将输入事件分发给JavaScript代码的过程是由浏览器
管理的。
Firefox将负责确定事件是针对页面中的哪个元素，然后确定事件句
柄并调用它。不过，Firefox进一步应用了现代web应用程序背后的
1183
---
## Page 1185
思想：Firefox自己的用户界面是使用相同的底层代码实现的，它们
负责显示网页、处理对其的交互。有个名为chrome的软件包集描述
了界面的结构和样式，并通过JavaScript赋予其行为ll。该架构允
许第三方开发人员编写一个对chrome包扩展的用户界面进行扩展的
扩展（add-ons）。进一步采用相同的技术，开发人员能够替换
Firefoxchrome包所提供的标准界面，甚至彻底重新构建其用户界
面，例如可以通过这样的方法使其适用于移动设备。
与Eclipse插件类似，Firefox的chrome包中有许多元数据。与Eclipse
Plug-inDevelopmentEnvironment（插件开发环境）插件类似，
Firefox也提供了一个帮助大家开发Firefox插件的插件。因此在你能
够扩展或修复Firefox之前，有大量重要的工作要做。不过，Firefox
提供的自动页面显示管理和简化的事件处理机制使得Firefox插件的
开发工作量要比开发Eclipse插件小得多。
Firefox开发人员更在改进其JavaScript实现的性能。这不仅对用户访
问应用了大量JavaScript脚本的网站是很有意义的，同时也能够使
Firefox开发人员将浏览器本身的更多功能从C++移植为JavaScript，
它是一种使用更舒适、灵活性更高的语言。因此，Firefox的架构将
更接近于Emacs，它自己的控制器层就都是用Lisp语言编写的。
这让我想起三个问题中的最后一个，我可以问各种使用过的插件并
发语言一个问题：该插件并发语言是否是为该应用程序添加新功能
的最好方法？如果不是，那么是什么原因导致了该限制？是语言本
身的缺陷？是和模型层之间的接口过于麻烦？无论是哪种情况，相
同的缺点或许会以相同的形式影响插件并发人员，使插件成为二等
公民。（对于插件用户界面，也可以问同样的问题。）与Emacs类
似，Firefox将其插件开发语言视为架构的核心，最主要的观点是该
语言和应用程序之间的关系应该正确地设计。
作为一位热心的Emacs用户，我关心其未来。我对Firefox特别感兴
趣的原因是它在很多方面看起来都与Emacs类似：一个实现自动页
面显示管理的视图层，一个基于解释性的动态语言的控制器层，以
及一个覆盖Emacs各种功能的模型层。如果有人乐于研究EmacsLisp
代码所积累的各种文献，那么可能会在chrome的基础上花一些时间
开发出在架构上与Emacs很相似的文本编辑器，不过它将具有更丰
富的模型，与当前技术发展结合更紧密。Emacs架构课题的最大价
值在于教会我们学会不要遗忘。
1184
---
## Page 1186
[1].显然在chrome中使用的JavaScript代码能够读写偏好选择文件、
书签表以及原始的用户文件，从网页中下载的代码是不具备这些特
权的。
第12章当集市开始构建教堂
KDE社区是如何发展ThreadWeaver和Akonadi项目的，以及它们是如
何依次成形的TillAdamMirkoBoehm
结构
功能多样性
√模块
V概念完整性
V依赖关系
V修改独立性
V进程
原则与特性
自动传播
数据访问
√可构建性
V增长适应性
V煸增抵抗力
12.1简介
KDE项目是当今世界上最大的几个自由软件山1-成果之一。在10多年
的发展历程中，贡献者来自很多不同的人群，有学生、经验丰富的
专业开发人员、沉溺于某种癖好的开发人员、公司人员、政府机构
人员等，他们责献了大量用来解决不同问题、完成不同任务的软
1185
---
## Page 1187
件，不仅仅有完善的桌面环境（带有Web浏览器、群件、文件管理
器、字处理软件、电子表格及演示工具），还有一些诸如天文学工
具之类的专用应用程序。这些应用程序的基础是所有项目共同构建
和维护的共享程序库。除了他们首选的KDE开发社区本身成员的东
西之外，也使用了许多第三方开发人员的东西，包括商业的和非商
业的，以创造出成千上万个附加的应用程序和组件。
虽然KDE项目最初的目标是为开源的UNIX操作系统（特别是
GNU/Linux）提供一个集成桌面环境，但实际上KDE的范围是相当
广泛的，它所包括的软件不仅仅是各种风格的UNIX中所拥有的，还
包括许多在MicrosoftWindows和MacOSX甚至是嵌入式平台中所拥
有的。这就意味着，在编写KDE程序库代码时将和许多不同的工具
链打交道，应付不同平台的特性，以灵活、可扩展的方式整合系统
服务，明智、谨慎地使用硬件资源。加上其程序库拥有大量的目标
受众，因此其提供的API必须是易于理解、有用的，并适用于不同
背景程序员。对于那些习惯于和Windows平台中的微软技术打交道
的程序员，可能会拥有不同的偏见和习惯，对于那些拥有Java背景