### Path Rewriting in UCOGNITO

By adding a prefix to the path, we rewrite it to `/tmp/ucognito-pid/home/user/.config`. This rewriting occurs before entering the kernel execution, ensuring that file descriptors opened for the redirected path automatically perform read/write operations on the file at the new location. Note that this rewriting operation is performed outside of the sandbox. Since we have placed hooks for all file-related system calls, the web browser instance running in the sandbox environment cannot bypass this rewriting routine.

### Components and Code Complexity

| Component         | Lines of Code            |
|-------------------|--------------------------|
| Sandbox & Policy  | 415 lines of ANSI-C      |
| UI Layer          | 149 lines of Java and Python |
| UCOGNITO          | 564 lines of code        |
| MBox [17]         | 24,311 lines of ANSI-C   |
| MBox + UCOGNITO   | 24,827 lines of code     |
| UVERIFIER         | 533 lines of Python      |

**Figure 7:** Components of UCOGNITO and an estimate of their complexities in terms of lines of code. UCOGNITO can be implemented with minimal code changes to MBox (564 lines of code). Note that we deleted or commented out unused parts of MBox (48 lines) so that the total number of lines does not match the sum of the two numbers. Our verifier, UVERIFIER, has 533 lines of Python code.

### Policy System

We implemented our policy system, designed in §4.5, on our filesystem sandbox. Each policy section (CLEAN, COPY, or WRITE) can have two types of path entries: a file or a directory entry. The enforcement is handled differently for files and directories (including all sub-directory entries). Here are the rules for accessing files and directories under our policy system:

- **File:**
  - **Initialization:** Files are initialized during the sandbox initialization, i.e., before running the browser application.
  - **COPY Policy:** For files marked as COPY, we duplicate the specified file from the host filesystem to the sandbox filesystem.
  - **CLEAN Policy:** For files marked as CLEAN, we create an empty file on the sandbox filesystem.
  - **Access:** After initialization, all further access (both read/write) to these files is contained within the sandbox filesystem through path rewriting.

- **Directory:**
  - **Initialization:** Directories are initialized lazily, i.e., only when a system call is issued to access a path under the specified directory.
  - **Interception:** Upon intercepting such a system call, we check if the path is under a directory listed in a COPY or CLEAN section of the policy file.
  - **Automatic COPY Rule:** If the path does not belong to any directory listed in the policy, we copy the file to the sandbox filesystem. This supports loading libraries (e.g., *.so files) and other required files that are not related to the private mode of the web browser.
  - **Opt-Out:** To prevent the automatic COPY rule from being applied to the entire filesystem, the policy writer must specify the path (usually the user’s home directory) in the CLEAN list to opt-out from this rule.
  - **Policy Override:** In case a path matches both CLEAN and COPY (e.g., `~/.config` is in COPY while `~/` is in CLEAN), we set COPY to override CLEAN to follow the white-listing policy for read access.

- **Data Write-Back:**
  - **WRITE Policy:** When the protected application (in our case, the browser) terminates, we enforce the WRITE policy.
  - **Detection:** We detect modifications by comparing the hash of the contained file with that of the file in the host filesystem.
  - **Write-Back:** For a file entry, if the path matches, it is written back to the source file at the host filesystem. Similarly, for a directory entry, if the prefix matches, we perform the same operation.

### UI Layer

In UCOGNITO, since it wraps the normal web browser with a sandbox to make it private, there is no UI indicator like Mozilla Firefox and Google Chrome. It is crucial for users to know the mode of the current session. We use a simple method: highlighting the border of the window with different colors. Figure 8 shows an example. We track the focus on the X11 window display. Whenever the focus changes, we check if the currently focused window is in private mode. If it is, we retrieve the size of the window and draw a colored, thick borderline rectangle over the window. We implemented the drawing part with JPanel and made the rectangle always-on-top so that it cannot be hidden by the browser window.

### Launching a Private Mode

Launching a web browser with UCOGNITO is straightforward. The following command launches Google Chrome with the specified policy file:

```sh
$ ucognito -P chrome_incognito.cfg -- google-chrome
```

The `-P` option indicates the location of the policy file. At launch time, before executing the actual web browser program, UCOGNITO applies the policy to create a new file (for CLEAN policy) or copy a file (for COPY policy). Afterwards, UCOGNITO applies the sandbox by calling the seccomp system call and then executes the browser instance. The procedure for private browsing under UCOGNITO can be divided into four phases:

1. **Initialization Phase:** Load the policy file (if specified) and apply pre-execution policies (e.g., COPY or CLEAN file entries).
2. **Browser Starting Phase:** Create a new process and place hooks on 50 file-related system calls using seccomp-bpf.
3. **Browsing Phase:** Launch the browser to let the user browse in private mode.
4. **Cleaning Phase:** Depending on the WRITE policy, check if any file belonging to the policy has been changed. If so, write back the file to the host filesystem to make it persistent.

### Evaluation

The goal of our evaluation of UCOGNITO is to answer the following questions:

1. What are the use cases for UCOGNITO? (§6.1, §6.2)
2. How flexible and general is UCOGNITO’s policy in implementing private browsing schemes of popular browsers? (§6.3)
3. How much is the performance overhead? (§6.4)

**Experimental Setup:**
To evaluate UCOGNITO, we ran Mozilla Firefox 37.0.2 and Google Chrome 42.0.2311.152 on Ubuntu 14.04 LTS, running a 64-bit Linux Kernel 3.19.0. Our experiments were conducted on commodity hardware equipped with an Intel Xeon E5-1620 (one CPU, quad core, 3.6GHz) and 16GB of RAM.

#### 6.1 Preventing Privacy Violations

We tested the effectiveness of UCOGNITO in protecting against the privacy violations identified in §3.3. Our results showed that UCOGNITO successfully mitigates all these privacy violation cases:

- **OCSP Cache:** We observed that OCSP cache files generated in the temporary filesystem during a private browsing session are cleaned after the session finishes. None of these cache files are written back to the original filesystem.
- **PNaCl Translation Cache:** Unlike in §3.3, we observed no discernible loading time differences between public and private browsing sessions.
- **Nvidia’s OpenGL Cache:** New cache files are generated and subsequently deleted in the temporary filesystem, with no differences in the Nvidia cache file in the original filesystem.

#### 6.2 Supporting Add-ons

Add-ons can be a major source of privacy violations in private mode, as evidenced in §2.4. We tested the effectiveness of UCOGNITO in protecting against privacy violations caused by add-ons. We evaluated UCOGNITO against four popular Chrome extensions without modifying the policy defined in Figure 5. As shown in Table 4, UCOGNITO successfully prevented all privacy violations found in those four extensions, indicating that UCOGNITO is a promising candidate for enabling private mode support for add-ons without making any changes to them.

#### 6.3 Policy Flexibility

We measured the flexibility of our policy system in terms of how fine-grained we can achieve in modeling a specific private mode. Since UCOGNITO provides per-file granularity for policy specification, if two types of persistent data are contained in one single file and their use/store behavior is different in private mode, our policy system will not be able to model that. Otherwise, we can always define a policy to match the intended definition of private mode. Table 5 shows the mapping of persistent data to its container. For Firefox, browsing history, downloaded entries, and bookmarks are all persisted in the same file, `places.sqlite`. If we attach the WRITE policy to allow saving bookmarks in private mode, then the browsing history will also be persisted, which is not user-intended. This is the only case in Table 1 that cannot be expressed as a policy in UCOGNITO. For any other item, enabling loading of it in private mode requires only one COPY policy, while enabling storing of the item requires only one WRITE policy.

#### 6.4 Browsing Performance

Since UCOGNITO heavily places hooks on system calls, it affects the running time of the web browser. To measure the performance overhead, we ran two types of tests: JavaScript benchmark and page loading time.

**JavaScript Benchmark:**

| Benchmark    | Base       | UCOGNITO   | Overhead   |
|--------------|------------|------------|------------|
| Kraken (ms)  | 1171.1     | 1171.2     | 0.0%       |
| Sunspider (ms)| 158.3     | 159.8     | 0.9%       |
| Octane (pts) | 27164      | 27013      | -0.6%      |

**Page Loading Time:**

| Website      | Base (ms)  | UCOGNITO (ms) | Overhead  |
|--------------|------------|---------------|-----------|
| Google.com   | 193        | 196           | 1.55%     |
| Bing.com     | 190        | 193           | 1.58%     |
| Twitter.com  | 599        | 614           | 2.50%     |
| Facebook.com | 256        | 259           | 1.18%     |

**Table 6 and Table 7:** Performance overheads of standard JavaScript benchmarks and page loading times on Firefox and Chrome running with UCOGNITO. The worst-case performance overhead is around 2.5%.

### Behavior in UCOGNITO

- **Local Extension Settings:** Only changes in local extension settings are written back to the original filesystem as per policy; other changes are discarded.
- **Log File:** The log file is deleted in the temporary filesystem upon completion of the session.
- **Form Entries:** Form entries saved in the database file in the temporary filesystem are not written back to the original filesystem.

**Table 4:** Using UCOGNITO for automatically enabling private mode for add-ons.

| Category                 | Persistent Data          | Firefox                  | Chrome                    |
|--------------------------|--------------------------|--------------------------|---------------------------|
| Transparent to User      | Browsing History         | //places.sqlite          | //History                 |
| User Action Involved     | Cookies                  | //cookies.sqlite         | //Cookies                 |
| Add-on Support           | Cache                    | //cache2                 | //Cache                   |
|                          | HTML5 Local Storage      | //webappsstore.sqlite    | //Local Storage           |
|                          | Flash Storage            | //.macromedia/Flash_Player| //Pepper Data/Shockwave Flash|
|                          | Download Entries         | //places.sqlite          | //History                 |
|                          | Autofills                | //{key3.db, formhistory.sqlite}| //Local Storage         |
|                          | Bookmarks                | //places.sqlite          | //Bookmarks               |
|                          | Per-site Zoom Level      | //content-pref.sqlite    | //Zoom Levels             |
|                          | Per-site Permission      | //permissions.sqlite     | //Permissions             |
|                          | SSL Self-signed Cert     | //cert_override.txt      | //SSL Certificates        |
|                          | SSL Client Cert          | //pkcs11.txt             | //Client Certificates     |
|                          | Add-on Storage           | //extensions.json        | //Extensions              |
|                          | Add-on Installation      | //addonStartup.jsonl     | //Extension Installations |

This table outlines the persistent data and their containers for Firefox and Chrome, showing how UCOGNITO handles each category.