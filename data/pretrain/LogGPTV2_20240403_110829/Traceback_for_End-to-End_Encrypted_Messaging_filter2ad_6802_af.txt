(A) ≤ Advprf
F,q(B) + Advror-cpa
E,q
where if A runs in time T , then B and C run in time T ′ ≈ T and B
and C make at most q oracle queries.
Advp-tr-conf
MT
G0 G1
:
b′ ←$ AChal
return b′
Chal(U1, U2, ki−1, p):
ki ←$ {0, 1}n
(cid:101)ki ← H(ki)
if ki (cid:60) K then
K[ki] ← j; j ← j + 1
mid ← Fki (p); mid ← ρK[ki ](p)
ct ← Enc(cid:101)ki
(ki−1)
tts ← (mid, ct)
return tts
G2 G3
:
b′ ←$ AChal
return b′
Chal(U1, U2, ki−1, p):
ki ←$ {0, 1}n
(cid:101)ki ← H(ki)
if ki (cid:60) K then
K[ki] ← j; j ← j + 1
mid ← {0, 1}n
ct ← Enc(cid:101)ki
tts ← (mid, ct)
return tts
(ki−1);
ct ←$ {0, 1}clen(n)
Figure 13: Security game hops for platform trace confidentiality
proof for path traceback.
Proof. We bound the advantage of A in the PTrCONF game by
bounding the advantage of each of a series of game hops, shown
in Figure 13. At a high level, there are two main transitions. The
first transition replaces the PRF evaluation with an evaluation of a
random function. The distinguishing advantage is bound by the PRF
security of F. The second transition samples ct randomly instead
of setting it as the output of an encryption algorithm. We bound
the distinguishing advantage by RoR-CPA advantage against the
symmetric encryption scheme.
G0 is the same as PTrCONFA,1 with TagGen unrolled and a
bookkeeping table K added. The table K stores the tracing keys
sampled in the challenge oracle by an index j. G1 is the same as G0
except mid is set as the output of one of a set of random functions ρ
indexed by the key index K[k]. Consider a multi-key PRF adversary
B that replaces the PRF call setting mid with a call to its oracle
(with a new index for each query). B runs exactly G0 and G1 for
challenge bit b = 1 and b = 0 respectively,
|Pr[ G0 ⇒ true] − Pr[ G1 ⇒ true]| = Adv
prf
F,q(B) .
G2 replaces the call to the random function by simply randomly
sampling mid. The difference between these two ways of sampling
mid is that if the same key k was sampled twice on the same
plaintext p, then G1 would make a duplicate call to ρK[k](p) and
mid would be the same. However, the probability that this occurs
is the exact same as if a random sample of mid is a duplicate. Thus,
Pr[ G1 ⇒ true] = Pr[ G2 ⇒ true] .
Lastly, G3 is the same as G2 except ct is set as a random value.
Consider a multi-key RoR-CPA adversary C that replaces the en-
cryption call with a call to its encryption oracle. Then, C runs
exactly G2 and G3 for challenge bit b = 1 and b = 0 respectively,
|Pr[ G2 ⇒ true] − Pr[ G3 ⇒ true]| = Adv
ror-cpa
E,q
(C) .
Finally, note that the trace tag output in G3 is simply a fresh ran-
dom value for each challenge oracle call, equivalent to PTrCONFA,0,
completing the proof.
UTrCONFA,b
MT :
b′ ←$ AChal
return b′
Chal(st, U0, k, ttr , U1, U2, p):
mid ← ttr
if mid (cid:44) Fk(p) : return ⊥
k0 ← k
k1 ←$ {0, 1}n
(cid:101)k′ ← H(k′)
k′ ←$ {0, 1}n
ct ← Enc(cid:101)k′(kb)
mid ← Fk′(p)
(((((
if mid ∈ st : return ⊥
((((((
ttp ← (ct, U1, U2)
return (k′, mid)
Figure 14: Unrolled user trace confidentiality game for path trace-
back showing independence on challenge bit b.
:
CRA
F
((K, X), (K′, X′)) ←$ A
if (K, X) = (K′, X′) then return false
return FK (X) = FK′(X′)
Figure 15: PRF collision resistance security game.
A.2 User Trace Confidentiality
back defined in Figure 3. For any UTrCONF adversary A,
Theorem 2. Let MT be the message tracing scheme for path trace-
Advu-tr-conf
MT
(A) = 0 .
Proof. The output of the challenge oracle is k′ and mid where
mid ← Fk′(p). Both of these values are independent of the chal-
lenge bit b, so any adversary will achieve advantage 0. The unrolled
algorithms are shown in Figure 14 in which the lines that are de-
pendent on challenge bit b, i.e. the ciphertext stored in platform
state, are striked out and shown to not affect the oracle output.
B ACCOUNTABILITY PROOF
First we recall the standard security notions needed in our proof.
The multi-key variant for PRF security is defined in Figure 12 and
described in the preliminaries of Appendix A. Collision resistance
for PRFs (CR) is defined in Figure 15. The adversary is tasked with
finding two different key-message pairs that evaluate to the same
value under the PRF. The adversary’s advantage is defined as
F (A) = Pr(cid:104) CRA
Advcr
F ⇒ true
.
(cid:105)
Theorem 3. Let MT be the message tracing scheme for path trace-
back defined in Figure 3. Then, for any TrUNF adversary A that
makes at most qnm new message queries, qs send queries, and qsm
malicious send queries, we give adversaries B and C such that
qs + qsm
MT,n(A) ≤ Advprf
F,qnm(B) + Advcr
F (C) +
where if A runs in time T , then B and C run in time T ′ ≈ T and B
makes at most qs + qsm oracle queries.
Advtr-unf
2n
Proof. This proof proceeds as a careful case analysis of the four
adversary winning conditions. We will show that nearly all of the
winning conditions correspond to an adversary finding a collision
in the PRF F. In the single subcase that does not result in a collision,
we will argue that the probability of reaching this subcase is low
using the PRF security of F.
First, we move to a game which excludes the problematic win-
ning condition, instead returning false, shown as a game hop from
G0 to G1 as shown in Figure 16. The event of hitting the problem-
atic winning condition is denoted by setting flag to bad. G0 is the
same as TrUNFA with some extra bookkeeping added. First, the
Svr-Trace algorithm is unrolled and the tracing keys used at each
step of the traceback are saved into a table TrK. Second, in Send,
tables S and SK are added to link the counter value s and k of the
sent message to the identifier mid in PT. Third, a table, K is added to
track the dummy tracing keys sampled in NewMsg and assigning
them an index to be used in the multi-key PRF security game.
The early return of false in the problematic win condition is
the relevant change for the hop from G0 to G1. Flag flag is set to
bad in the main body if the WasFwd win condition is satisfied and
the plaintext associated with midi,i +1 is the same as the reported
plaintext. We will see in the case analysis why this specific win
condition is problematic. In G1, instead of continuing executing
after a flag is set, the game is aborted and false is returned. By the
fundamental lemma of game playing [6],
Pr[ G0 ⇒ true] ≤ Pr[ G1 ⇒ true]
+ Pr[ G0 sets bad] .
Next, consider G2 which is the same as G0 except during trace-
back, if the decrypted tracing key is in K, i.e. sampled in Send, then
instead of executing PRF, one of a family of random functions ρ is
executed. For simulation purposes, each of the random functions
ρi are instantiated lazily. Note that this is the only place where the
PRF is evaluated on a key sampled from NewMsg. Now consider
the PRF adversary B that runs G2 replacing the call to ρ with a
call to the PRF oracle and returning true if flag is set to bad. This
corresponds exactly to the difference between G0 and G2 and thus,
Pr[ G0 sets bad] ≤ Pr[ G2 sets bad] + Adv
prf
F,m(B) .
Next, we show through a case analysis that we can build an
adversary C that can take a win from G1 and output a collision for
F. The case analysis is for the four winning conditions of G1. We
will return to bound the the probability of flag during discussion
of the appropriate case.
• Case 1: i∗ ∈ [1, n] ∧ τ = 1
By game construction, the reported tracing key, k∗ = ki∗,c∗,
was populated following the output of a successful RecMsg
in either Send or SendMal. A successful RecMsg implies the
verification check Fk∗(p∗) = midc∗ succeeded. The call the
RecMsg is made after midc∗ is populated in PT with i∗ as the
recipient. Thus, during traceback the sender associated with
PT[midc∗] will be added to the trace. Meaning the trace must
include at least two users and this win condition is impossible.
(cid:16)
(cid:16)
(cid:16)1 < j < τ ∧ WasFwd(tri−1, tri , midi−1,i , midi,i +1, p∗) = false
j = 1 ∧ (WasSent(tr1, tr2, mid1,2, p∗) = false
j = τ ∧ WasRec(trτ −1, trτ , midτ −1,τ , p∗) = false
then return true
(cid:17)
(cid:17)
if
if
(cid:17)
then
then return true
:
G0 G1
G2
c ← 0; r ← 0
(i∗, p∗, k∗, c∗) ←$ AO
if i∗ ∈ [1, n] then p∗ ← pc∗ ; k∗ ← ki∗,c∗
j ← 0; k ← k∗
Tr[j] ← i∗
mid ← Fk(p∗)
while mid ∈ PT :
(ct, trs, trr) ← PT[mid]
if trr (cid:44) Tr[j] : break
Tr[j + 1] ← mid; Tr[j + 2] ← Us; TrK[j/2] ← k
mid ← Fk(p∗)
if k ∈ K then mid ← ρK[k](p∗)
j ← j + 2
(tr1, mid1,2, tr2, . . . , midτ −1,τ , trτ ) ← Tr−1
(trk1,2, . . . , trkτ −1,τ ) ← TrK−1
for j ∈ 1 to τ do
if tr j ∈ [1, n] then
if
if (cid:0)i∗ ∈ [1, n] ∧ τ = 1(cid:1) then return true
(cid:101)k ← H(k); k ← Dec(cid:101)k
(ct)
s ← S[midi,i +1]
if ps = p∗ ∧ SK[midi,i +1] = trki,i +1 then
flag ← bad;
return true
return false
return false
NewMsg(i, p):
if i (cid:60) [1, n] then return ⊥
c ← c + 1
pc ← p
ki,c ←$ NewMsg(i, pc)
if ki,c (cid:60) K then
K[ki,c] ← r; r ← r + 1
midc ← auth
return
Send(i, j, s):
if i (cid:60) [1, n] ∨ ki,s = ⊥ then return ⊥
(k, tts) ←$ TagGen(i, j, ps , ki,s)
((mid, ttp), ttr ) ←$ Svr-Process(PT, i, j, tts)
PT[mid] ← ttp ; S[mid] ← s; SK[mid] ← k
if mids = auth then WasSent(i, j, mid, ps) ← true
else WasFwd(i, j, mids , mid, ps) ← true
if j ∈ [1, n] then
c ← c + 1
pc ← ps
kj,c ← RecMsg(k, i, j, pc , ttr )
WasRec(i, j, mid, ps) ← true
midc ← mid
return ttr
return (ttr , k)
SendMal(i, j, k, p, tts):
if i ∈ [1, n] then return ⊥
((mid, ttp), ttr ) ←$ Svr-Process(PT, i, j, tts)
PT[mid] ← ttp
if j ∈ [1, n] then
k ← RecMsg(k, p, ttr )
if k (cid:44) ⊥ then
c ← c + 1
pc ← p
kj,c ← k
WasRec(i, j, mid, p) ← true
midc ← mid
return ttr
Figure 16: Game hop for path trace unforgeability.
j = 1 ∧ (WasSent(tr1, tr2, mid1,2, p∗) = false
For tr1 to be added to the trace, we know PT[mid1,2] is
populated and has tr1 as the sender. Given the oracles in
our game, the only way to populate PT with tr1 ∈ [1, n] as
sender is through the honest send oracle SendMal which
is associated with an argument of counter S[mid1,2] = s,
sending plaintext ps. There are two subcases: (Case 2a) ps (cid:44)
p∗, or (Case 2b) ps = p∗. In both cases, we consider k ←
SK[mid1,2].
• Case 2a: ps (cid:44) p∗
We know from the execution of Send that Fk(ps) =
mid1,2. We also know from the unrolled execution of
Svr-Trace that Ftrk1,2(p∗) = mid1,2. This gives us the
collision, (k, ps), (trk1,2, p∗).
• Case 2b: ps = p∗
We will show that trk1,2 (cid:44) k leading to the collision
(k, p∗),(trk1,2, p∗). Suppose trk1,2 = k. We know that
from the execution of Send, the ciphertext ct1,2 stored in
PT[mid1,2] is created as EncH(k)(ktr1,s). We also know
that since entries are never overwritten, that ciphertext
remains.
calling Send. Since
We know ktr1,s is set, as that is a prerequisite of
WasSent(tr1, tr2, mid1,2, p∗) = false ,
mids (cid:44) auth from the condition in Send. This implies
mids and, by extension, ktr1,s were not set in NewMsg.
The only other place ktr1,s can be set is following a
successful RecMsg from either Send or SendMal. As in
Case 1, this implies that the corresponding identifier in
PT is populated with tr1 as the sender, PT[Fktr1,s(p∗)].
Thus, during traceback, if trk1,2 = k, then ct1,2 would
be decrypted as ktr1,s and the traceback would not stop
at tr1 since PT[Fktr1,s(p∗)] is populated. All this means
that trk1,2 (cid:44) k and the two keys collide on p∗.
(cid:17)
(cid:17)
• Case 2:(cid:16)
• Case 3:
(cid:16)
j = τ ∧ WasRec(trτ−1, trτ , midτ−1,τ , p∗) = false
To be last on a trace, trτ must be the reporting user i∗,
reporting ki∗,c∗. From the oracle structure, the tracing key,
ki∗,c∗, is set following a successful RecMsg in either Send or
SendMal, at which point