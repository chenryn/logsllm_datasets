[6] P. Carbone, S. Ewen, G. F´ora, S. Haridi, S. Richter,
and
K. Tzoumas. State management in apache ﬂink®: consistent stateful
distributed stream processing. Proceedings of the VLDB Endowment,
10(12):1718–1729, 2017.
[7] S. Chetlur, C. Woolley, P. Vandermersch, J. Cohen, J. Tran, B. Catanzaro,
and E. Shelhamer. cudnn: Efﬁcient primitives for deep learning. arXiv
preprint arXiv:1410.0759, 2014.
[8] L. O. Chua and T. Roska. The cnn paradigm.
IEEE Transactions
on Circuits and Systems I: Fundamental Theory and Applications,
40(3):147–156, 1993.
[9] J. Contreras, R. Espinola, F. J. Nogales, and A. J. Conejo. Arima
IEEE transactions on
models to predict next-day electricity prices.
power systems, 18(3):1014–1020, 2003.
[10] D. Crankshaw, G.-E. Sela, C. Zumar, X. Mo, J. E. Gonzalez, I. Stoica,
inference pipeline composition
and A. Tumanov.
framework. arXiv preprint arXiv:1812.01776, 2018.
Inferline: Ml
[11] D. Crankshaw, X. Wang, G. Zhou, M. J. Franklin, J. E. Gonzalez, and
I. Stoica. Clipper: A low-latency online prediction serving system.
In 14th {USENIX} Symposium on Networked Systems Design and
Implementation ({NSDI} 17), pages 613–627, 2017.
[12] H. Cui, R. Gu, C. Liu, and J. Yang.
Paxos made transparent.
In Proceedings of the 25th ACM Symposium on Operating Systems
Principles (SOSP ’15), Oct. 2015.
[13] B. Cully, G. Lefebvre, D. Meyer, M. Feeley, N. Hutchinson, and
A. Warﬁeld. Remus: High availability via asynchronous virtual machine
replication. In Proceedings of the 5th USENIX Symposium on Networked
Systems Design and Implementation, pages 161–174. San Francisco,
2008.
[14] Y. Dong, M. Xue, X. Zheng, J. Wang, Z. Qi, and H. Guan. Boosting
gpu virtualization performance with hybrid shadow page tables.
In
2015 USENIX Annual Technical Conference USENIX ATC 15), pages
517–528, 2015.
[15] Y. Dong, W. Ye, Y. Jiang, I. Pratt, S. Ma, J. Li, and H. Guan. Colo:
Coarse-grained lock-stepping virtual machines for non-stop service. In
Proceedings of the 4th Annual Symposium on Cloud Computing, SOCC
’13, 2013.
[16] M. Dowty and J. Sugerman. Gpu virtualization on vmware’s hosted
i/o architecture. ACM SIGOPS Operating Systems Review, 43(3):73–82,
2009.
[17] Auto Driving Dataset.
https://github.com/SullyChen/driving-datasets/
blob/master/README.md.
[18] E. N. Elnozahy, L. Alvisi, Y.-M. Wang, and D. B. Johnson. A
survey of rollback-recovery protocols in message-passing systems. ACM
Computing Surveys (CSUR), 34(3):375–408, 2002.
[19] E. N. Elnozahy and W. Zwaenepoel. Manetho: Transparent roll
limited rollback, and fast output
back-recovery with low overhead,
commit. IEEE Transactions on Computers, (5):526–531, 1992.
[20] F. A. Gers, J. Schmidhuber, and F. Cummins. Learning to forget:
Continual prediction with lstm. 1999.
[21] J. Gjengset, M. Schwarzkopf, J. Behrens, L. T. Ara´ujo, M. Ek, E. Kohler,
M. F. Kaashoek, and R. Morris. Noria: dynamic, partially-stateful
In 13th {USENIX}
data-ﬂow for high-performance web applications.
Symposium on Operating Systems Design and Implementation ({OSDI}
18), pages 213–231, 2018.
[22] P. Goyal, P. Doll´ar, R. Girshick, P. Noordhuis, L. Wesolowski, A. Kyrola,
A. Tulloch, Y. Jia, and K. He. Accurate, large minibatch sgd: Training
imagenet in 1 hour. arXiv preprint arXiv:1706.02677, 2017.
[23] gRPC. https://grpc.io.
[24] Z. Guo, C. Hong, M. Yang, D. Zhou, L. Zhou, and L. Zhuang. Rex:
Replication at the speed of multi-core. In Proceedings of the 2014 ACM
European Conference on Computer Systems (EUROSYS ’14), page 11.
ACM, 2014.
[25] K. He, G. Gkioxari, P. Doll´ar, and R. Girshick. Mask r-cnn.
In
Proceedings of the IEEE international conference on computer vision,
pages 2961–2969, 2017.
[26] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning for image
recognition. In Proceedings of the IEEE conference on computer vision
and pattern recognition, pages 770–778, 2016.
[27] Horovod. https://github.com/horovod/horovod.
[28] A. G. Howard, M. Zhu, B. Chen, D. Kalenichenko, W. Wang,
T. Weyand, M. Andreetto, and H. Adam. Mobilenets: Efﬁcient
convolutional neural networks for mobile vision applications. arXiv
preprint arXiv:1704.04861, 2017.
[29] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Girshick,
S. Guadarrama, and T. Darrell. Caffe: Convolutional architecture for
fast feature embedding. In Proceedings of the 22nd ACM international
conference on Multimedia, pages 675–678. ACM, 2014.
[30] H. Jooybar, W. W. Fung, M. O’Connor, J. Devietti, and T. M. Aamodt.
Gpudet: a deterministic gpu architecture. ACM SIGARCH Computer
Architecture News, 41(1):1–12, 2013.
[31] L. P. Kaelbling, M. L. Littman, and A. W. Moore. Reinforcement
learning: A survey. Journal of artiﬁcial intelligence research, 4:237–285,
1996.
[32] Kaggle Speech Accent Dataset.
https://www.kaggle.com/rtatman/
speech-accent-archive/.
[33] Kaggle Vehicle Number Plate Detection.
https://www.kaggle.com/
dataturks/vehicle-number-plate-detection.
[34] R. S. Kannan, L. Subramanian, A. Raju, J. Ahn, J. Mars, and L. Tang.
Grandslam: Guaranteeing slas for jobs in microservices execution
frameworks. In Proceedings of the Fourteenth EuroSys Conference 2019,
page 34. ACM, 2019.
[35] M. Kapritsos, Y. Wang, V. Quema, A. Clement, L. Alvisi, M. Dahlin,
et al. All about eve: Execute-verify replication for multi-core servers.
In Proceedings of the Tenth Symposium on Operating Systems Design
and Implementation (OSDI ’12), volume 12, pages 237–250, 2012.
[36] J. Khalid and A. Akella. Correctness and performance for stateful
chained network functions, 2018.
[37] J. Kosaian, K. Rashmi, and S. Venkataraman.
Parity models:
erasure-coded resilience for prediction serving systems. In Proceedings
of the 27th ACM Symposium on Operating Systems Principles, pages
30–46. ACM, 2019.
[38] A. Krizhevsky, G. Hinton, et al. Learning multiple layers of features
from tiny images. Technical report, Citeseer, 2009.
[39] S. G. Kulkarni, G. Liu, K. Ramakrishnan, M. Arumaithurai, T. Wood,
and X. Fu. Reinforce: Achieving efﬁcient failure resiliency for network
function virtualization based services.
the 14th
International Conference on emerging Networking EXperiments and
Technologies, pages 41–53. ACM, 2018.
In Proceedings of
[40] Y. Kwon, M. Balazinska, and A. Greenberg. Fault-tolerant stream
processing using a distributed, replicated ﬁle system. Proceedings of
the VLDB Endowment, 1(1):574–585, 2008.
[41] L. Lamport et al. Paxos made simple. ACM Sigact News, 32(4):18–25,
2001.
[42] Y. Lee, A. Scolari, B.-G. Chun, M. D. Santambrogio, M. Weimer, and
M. Interlandi. {PRETZEL}: Opening the black box of machine learning
prediction serving systems. In 13th {USENIX} Symposium on Operating
Systems Design and Implementation ({OSDI} 18), pages 611–626, 2018.
[43] J. Li, E. Michael, N. K. Sharma, A. Szekeres, and D. R. Ports.
Just say {NO} to paxos overhead: Replacing consensus with network
ordering. In 12th {USENIX} Symposium on Operating Systems Design
and Implementation ({OSDI} 16), pages 467–483, 2016.
[44] J. Li and X.-x. Sun. A route planning’s method for unmanned aerial
vehicles based on improved a-star algorithm [j]. Acta Armamentarii,
7:788–792, 2008.
[45] W. Lin, D. M. Chiu, and Y. Lee. Erasure code replication revisited.
In Proceedings. Fourth International Conference on Peer-to-Peer
Computing, 2004. Proceedings., pages 90–97. IEEE, 2004.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:27:08 UTC from IEEE Xplore.  Restrictions apply. 
195
[46] M. Lu and T.-c. Chiueh.
Fast memory state synchronization for
virtualization-based fault tolerance. In Dependable Systems & Networks,
2009. DSN’09. IEEE/IFIP International Conference on, pages 534–543.
Citeseer, 2009.
[47] A. I. Maqueda, A. Loquercio, G. Gallego, N. Garc´ıa, and D. Scaramuzza.
Event-based vision meets deep learning on steering prediction for
self-driving cars. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 5419–5427, 2018.
[48] D. Mazieres. Paxos made practical. Technical report, Technical report,
2007. http://www. scs. stanford. edu/dm/home/papers, 2007.
[49] Uber Michelangelo. https://eng.uber.com/michelangelo/.
[50] P. Moritz, R. Nishihara, S. Wang, A. Tumanov, R. Liaw, E. Liang,
M. Elibol, Z. Yang, W. Paul, M. I. Jordan, et al. Ray: A distributed
framework for emerging {AI} applications.
In 13th {USENIX}
Symposium on Operating Systems Design and Implementation ({OSDI}
18), pages 561–577, 2018.
[51] D. G. Murray, F. McSherry, R. Isaacs, M. Isard, P. Barham, and
M. Abadi. Naiad: a timely dataﬂow system.
In Proceedings of the
Twenty-Fourth ACM Symposium on Operating Systems Principles, pages
439–455. ACM, 2013.
[52] D. G. Murray, M.
Smith,
A. Madhavapeddy, and S. Hand. Ciel: a universal execution engine for
distributed data-ﬂow computing. In Proc. 8th ACM/USENIX Symposium
on Networked Systems Design and Implementation, pages 113–126,
2011.
Schwarzkopf, C.
Smowton,
S.
[53] D. M. Nelson, A. C. Pereira, and R. A. de Oliveira. Stock market’s price
movement prediction with lstm neural networks. In 2017 International
Joint Conference on Neural Networks (IJCNN), pages 1419–1426. IEEE,
2017.
[54] Nvidia CuDNN User Guide (Reproducibility). https://docs.nvidia.com/
deeplearning/sdk/cudnn-developer-guide/index.html#reproducibility.
[55] Determinism in Deep Learning
(S9911).
https://developer.
download.nvidia.com/video/gputechconf/gtc/2019/presentation/
s9911-determinism-in-deep-learning.pdf.
[56] Nvidia tensorﬂow-determinisitc project.
https://github.com/NVIDIA/
tensorﬂow-determinism.
[57] NYSE Stock. https://www.nyse.com/listings directory/stock.
[58] C. Olston, N. Fiedel, K. Gorovoy, J. Harmsen, L. Lao, F. Li,
V. Rajashekhar, S. Ramesh, and J. Soyke. Tensorﬂow-serving: Flexible,
high-performance ml serving. arXiv preprint arXiv:1712.06139, 2017.
[59] D. Ongaro and J. Ousterhout. In search of an understandable consensus
algorithm. In Proceedings of the USENIX Annual Technical Conference
(USENIX ’14), June 2014.
[60] S. Pandi, F. H. Fitzek, C. Lehmann, D. Nophut, D. Kiss, V. Kovacs,
A. Nagy, G. Csorvasi, M. T´oth, T. Rajacsis, et al.
Joint design of
communication and control for connected cars in 5g communication
systems. In 2016 IEEE Globecom Workshops (GC Wkshps), pages 1–7.
IEEE, 2016.
[61] A. Paszke, S. Gross, S. Chintala, and G. Chanan. Pytorch: Tensors
and dynamic neural networks in python with strong gpu acceleration.
PyTorch: Tensors and dynamic neural networks in Python with strong
GPU acceleration, 6, 2017.
[62] PCI Express. https://en.wikipedia.org/wiki/PCI Express.
[63] M. Poke and T. Hoeﬂer. Dare: High-performance state machine
replication on rdma networks. In Proceedings of the 24th International
Symposium on High-Performance Parallel and Distributed Computing,
HPDC ’15, 2015.
[64] Protobuf. https://developers.google.com/protocol-buffers/.
[65] Convolution Operator
PyTorch.
source
code
of
https:
//github.com/pytorch/pytorch/blob/master/aten/src/ATen/native/cudnn/
Conv.cpp#L647.
[66] Transposed Convolution Operator
source
code
of
PyTorch.
https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/native/
cudnn/Conv.cpp#L1071.
[67] PyTorch Reproducibility.
https://pytorch.org/docs/stable/notes/
randomness.html.
SIGMOD international conference on Management of data, pages
827–838. ACM, 2004.
[71] S. Shalev-Shwartz et al. Online learning and online convex optimization.
Foundations and Trends® in Machine Learning, 4(2):107–194, 2012.
[72] J. Sherry, P. X. Gao, S. Basu, A. Panda, A. Krishnamurthy, C. Maciocco,
M. Manesh, J. Martins, S. Ratnasamy, L. Rizzo, et al. Rollback-recovery
for middleboxes. In ACM SIGCOMM Computer Communication Review,
volume 45, pages 227–240. ACM, 2015.
[73] K. Simonyan and A. Zisserman. Very deep convolutional networks for
large-scale image recognition. arXiv preprint arXiv:1409.1556, 2014.
[74] Stock Market Price Predictor using Supervised Learning. Stock Market
Price Predictor using Supervised Learning.
[75] A. Subramanya and P. P. Talukdar. Graph-based semi-supervised
Synthesis Lectures on Artiﬁcial Intelligence and Machine
learning.
Learning, 8(4):1–125, 2014.
[76] C. Szegedy, V. Vanhoucke, S. Ioffe, J. Shlens, and Z. Wojna. Rethinking
the inception architecture for computer vision.
In Proceedings of the
IEEE conference on computer vision and pattern recognition, pages
2818–2826, 2016.
[77] Convolution Operator
source
code
of Tensorﬂow.
https:
//github.com/tensorﬂow/tensorﬂow/blob/master/tensorﬂow/stream
executor/cuda/cuda dnn.cc#L250.
[78] tensorﬂow/serving github repo. https://github.com/tensorﬂow/serving.
[79] Twitter. https://twitter.com/.
[80] UTKFace Dataset. https://susanqq.github.io/UTKFace/.
[81] R. Van Renesse and D. Altinbuken. Paxos made moderately complex.
ACM Computing Surveys (CSUR), 47(3):42:1–42:36, 2015.
[82] H. Vanholder. Efﬁcient inference with tensorrt, 2016.
[83] S. Venkataraman, A. Panda, K. Ousterhout, M. Armbrust, A. Ghodsi,
M. J. Franklin, B. Recht, and I. Stoica. Drizzle: Fast and adaptable
stream processing at scale. In Proceedings of the 26th Symposium on
Operating Systems Principles, pages 374–389. ACM, 2017.
[84] C. Wang, X. Chen, W. Jia, B. Li, H. Qiu, S. Zhao, and H. Cui. Plover:
Fast, multi-core scalable virtual machine fault-tolerance. In Proceedings
of the 15th USENIX Symposium on Networked Systems Design and
Implementation, NSDI’18). USENIX Association, 2018.
[85] S. Wang, J. Liagouris, R. Nishihara, P. Moritz, U. Misra, A. Tumanov,
and I. Stoica. Lineage stash: fault
tolerance off the critical path.
In Proceedings of the 27th ACM Symposium on Operating Systems
Principles, pages 338–352. ACM, 2019.
[86] Y. Wang, M. Huang, L. Zhao, et al. Attention-based lstm for aspect-level
In Proceedings of the 2016 conference on
language processing, pages 606–615,
sentiment classiﬁcation.
empirical methods in natural
2016.
[87] M. Zaharia, T. Das, H. Li, T. Hunter, S. Shenker, and I. Stoica.
Discretized streams: Fault-tolerant streaming computation at scale. In
Proceedings of the twenty-fourth ACM symposium on operating systems
principles, pages 423–438. ACM, 2013.
[88] H. Zhang, A. C. Berg, M. Maire, and J. Malik. Svm-knn: Discriminative
nearest neighbor classiﬁcation for visual category recognition. In 2006
IEEE Computer Society Conference on Computer Vision and Pattern
Recognition (CVPR’06), volume 2, pages 2126–2136. IEEE, 2006.
[68] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards real-time
object detection with region proposal networks. In Advances in neural
information processing systems, pages 91–99, 2015.
[69] A. Sergeev and M. Del Balso. Horovod: fast and easy distributed deep
learning in tensorﬂow. arXiv preprint arXiv:1802.05799, 2018.
[70] M. A. Shah, J. M. Hellerstein, and E. Brewer. Highly available,
In Proceedings of the 2004 ACM
fault-tolerant, parallel dataﬂows.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:27:08 UTC from IEEE Xplore.  Restrictions apply. 
196