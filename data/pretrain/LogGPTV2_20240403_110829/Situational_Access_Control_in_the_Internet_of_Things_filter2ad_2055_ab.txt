a home monitoring app initiates a camera recording.
Neither Nest, nor SmartThings supports this constraint. Their
notification triggers include events such as button pushed, door
opened, a family member leaves home, etc., but not the execution
of a sensitive operation by an app.
“Allow access but log the operation.” Even if the user is not noti-
fied in real time, some accesses need to be logged. Logging IFTTT
trigger-firing events is very popular: “add row to spreadsheet” is
the second most common action in our set of IFTTT recipes (see
Appendix B). For example, when the SmartThings app “ridiculously
automated garage door” opens the garage door, the operation should
be logged. Then, if a burglary occurs, it will be possible to verify
that the app did not enable this by (possibly inadvertently) letting
the burglars in through the garage.
Neither Nest, nor SmartThings supports such constraints.
“Allow access only when user is not at home.” The access rights
of many apps—e.g., camera access by the GetSafe app from Section 1
or motion-sensor access by the smart home monitor (a popular
SmartThings app)—are conditioned on the user not being at home.
This constraint cannot be expressed using the Nest Cam API,
nor the SmartThings API. Instead, Nest tracks the “user is at home”
situation and automatically turns off the camera to enforce a coarser
policy: “no app can access the camera when user is at home.” Apps
cannot turn on the camera without the user’s approval, thus usually
they can access it only when the user is away. Critically, the user
may turn the camera back on to monitor a sleeping baby or kids
playing in another room or to record a family event (Nest Cam
highlights these uses in its advertising). This unintentionally allows
apps to resume recording even the user is at home.
SmartThings, too, supports coarse policies, with extra flexibility:
situation (“mode”) changes can turn any app and any device on or
off. Because home monitor has to operate both when the user is at
home and away, this is not useful for expressing the “allow access
only when user is not at home” constraint.
“Allow access only when user is at work” Consider the IFTTT
recipe “automatically post [photos] on LinkedIn when you take
an instagram at work,” published by LinkedIn. This recipe uses
Instagram’s (often inaccurate) photo geo-tagging to determine if
it’s Ok to post the photo. Instead, this recipe should fire only when
the user is at work. The semantics would not change but would be
enforced correctly. There is no way to express this in IFTTT.
“Allow access only when user is awake.” The fifth and sixth most
common actions in our set of IFTTT recipes are “post a tweet with
an image” and “post a tweet,” respectively. Consider the recipe
“tweet your instagrams” that automatically tweets any Instagram
photo uploaded by the user and is enabled by over 700,000 users.
Tweeting is risky when the user is not in a position to respond if
something goes wrong [55]. Many apps should not be able to post
when the user is asleep, or watching a movie, or on a plane without
Internet access, etc. There is no way to express and enforce this via
Twitter and other social-media APIs.
Physical device access should also be constrained by such poli-
cies. For example, temperature-control apps should not be able to
open windows if this might enable burglars to break in [41].
“Allow access only during an emergency.” An app may need
to change its behavior and access rights in some situations. For
example, if a distress button (e.g., Flic) is pushed, an emergency app
can respond by streaming live camera video to the authorities.2 For
privacy, the emergency app should not be able to access the camera
when the situation “user is in distress” is not true.
“Smart” situation tracking. Different situations have different
social norms. For example, when noone is in the room, potentially
dangerous devices such as ovens should not be turned on automat-
ically [74]. When kids enter a home office, it becomes unsuitable
for a professional video conference [34]. When a couple is fighting,
the visuals and audio are especially sensitive, requiring stricter
policies. When a driver is distraught or tired, a smart car should
respond [38, 67]. These situations are not easy to track, possibly
requiring machine learning and aggregation of information from
multiple sensors across different frameworks. Nevertheless, they
can be critical factors in access control.
Situations for physical access control. In a recent study, He et
al. [35] empirically show that situational factors such as user’s age,
device state, and proximity of other people to the device are crucial
for physical access control, where users are subjects and device capa-
bilities are objects. This form of situational access control requires
both tracking situations and authenticating physical users. Neither
is adequately supported by the existing IoT frameworks.
2.3 Inefficiencies and inconsistencies
Example: home/away. Smartphone-based geofencing is unreli-
able [15, 64] and inaccurate [14, 54]. SmartThings and Nest can use
additional sensors, e.g., smart door locks or motion sensors, but
they have different implementations and configurations and are
not interoperable. Not only is the situation-tracking functionality
2Currently, there is no popular emergency app on SmartThings. Using and developing
such apps is sometimes discouraged by the SmartThings community, partly because
today the app infrastructure—including the SmartApps cloud, Internet connection,
and wireless connectivity—is not considered reliable enough for emergency uses.
replicated, different devices may even end up with inconsistent
understanding of the environment: a SmartThings biometric door
lock may recognize the user entering the home, while a Nest device,
relying on inaccurate smartphone GPS, thinks the user is away.
IFTTT partially standardizes the interface for triggers, but trig-
gers are still based not on abstract predicates such as “home or
away?” but on specific implementations (the most popular one uses
phone-based geofencing).
Example: user notification. The most common action in IFTTT
recipes is “send a notification.” User notifications can also constrain
recipes: “notify me when this recipe fires” is a configuration option
for all recipes (see Section A.4). This option is so important that it
was added to the IFTTT’s minimalistic configuration dialog even
though IFTTT documentation exhorts recipe developers to add as
few configuration fields to recipes as possible.
As in the home/away case, IFTTT-integrated services offer di-
verse, inconsistent implementations for the “notify me” action. In
addition to the (by far the most popular) native trigger that sim-
ply sends push notification through the IFTTT phone app, there
are email notifications, flicker lights, phone calls, etc. Notification
methods can be very elaborate [43] and have different intended
functionalities (e.g., “ “notify me urgently” vs. “notify me non-
obtrusively”). Recipe writers, however, have no way of selecting
them by abstract functionality, only by implementation.
These redundancies raise the implementation and deployment
cost of situational access-control policies such as those in Section 2.2.
This cost must be paid by every framework or even every applica-
tion, motivating implementers to use only coarse policies based on
ad-hoc, simplistic situation trackers. Moreover, redundant, incon-
sistent definitions of situations hamper security and usability.
3 OUR DESIGN
We use a simple abstraction of access control, with subjects S, ob-
jects O, and a set of access rights A ⊆ 2O . O are typically API-level
operations, possibly subdivided by the input-parameter values if
different values require different access rights.
A policy is a list of access-control entries (ACEs) E ⊆ S × A. A
reference monitor intercepts operation invocations. It allows s ∈ S
to invoke an operation o ∈ O only if there exists (s, a) ∈ E such that
o ∈ a. Figure 3.1a depicts enforcement in this abstract framework.
We introduce environmental situation oracles (ESOs) as first-
class objects that (1) encapsulate the tracking of environmental
conditions relevant to access-control enforcement, and (2) present a
uniform interface that can be incorporated into any access-control
policy and invoked by any monitor in a given IoT environment.
A single ESO instantiation can be used by many client access-
control systems which would otherwise all track the same situation
separately. Clients no longer need to query multiple devices and
interpret their responses before making access-control decisions.
ESOs are least-privilege declassifiers. They expose only essential
predicates to their clients, as opposed to the underlying data (e.g.,
“the user is at home” vs. GPS coordinates of the user’s smartphone).
Access rights needed to track a specific situation are confined in
a single ESO instead of propagating to all clients. ESOs are much
simpler functionally than the clients that use them and thus easier
to audit and update. An ESO can be maintained by a trusted party
or even by one of the client frameworks (e.g. Nest). In both cases,
the other frameworks no longer need access privileges for the raw
information on which the situation is based.
We argue that segregating this information inside an ESO is su-
perior to reducing its granularity. For example, an app that receives
coarse (as opposed to fine-grained) location of the user’s phone is
still overprivileged because it can infer information about the user
well beyond the single bit revealed by the ESO.
Access-control monitors and ESOs are mutually oblivious, which
allows for dual-faceted reusability. Multiple monitors can track
the same situation using a single ESOs, and multiple ESOs (e.g.,
different implementations of the same environmental predicate)
can be used interchangeably by the same monitor.
Writing access-control policies using ESOs is similar to writing
IFTTT recipes using actions and triggers. The logic of the recipes
relies on simple, uniform interfaces and is independent of the actual
actions and triggers, thus a rich set of recipes can be constructed
from a few triggers and actions. Similarly, access-control monitors
can use the abstract interfaces of the ESOs, regardless of how the
ESOs actually implement situation tracking. On the other side,
IFTTT triggers (respectively, ESOs) work the same regardless of
the recipes (respectively, access-control systems) that use them.
Changes to enforcement. Figure 3.1b depicts the reference moni-
tor’s behavior when enforcing a situational constraint. Upon access
request (s, o) ∈ S × O, if there exists (s, a, i) ∈ Esit such that o ∈ a,
the reference monitor calls i’s is_active() function with (s, a) as
input. Access is allowed if one of the ESOs is “active.” Otherwise,
the reference monitor reverts to its original behavior.
If an ESO is unavailable for any reason, access is disallowed. This
is a conservative choice. While it could potentially result in denial
of service, the alternative is too-permissive enforcement. Either
way, the user should be notified that the ESO has failed.
For some operations, access may need to be revoked and oper-
ation terminated mid-execution when the situation changes. For
example, the access of a home-monitoring app to a camera may
need to be terminated when the user enters the house. One solution
is to use the ESO callback interface. Unavailable ESOs will not issue
callbacks, however, thus client frameworks may need to periodi-
cally query the ESO and terminate the operation if the situation
has changed (or the ESO has become unavailable).
Once the reference monitor has permitted an operation to start,
it may not be able to terminate or even notify the operation. Opera-
tions should expose an interface to be notified by the access-control
mechanism about changes in the environment—see Figure 3.1c.
a
optionally
An ESO may
3.1 Interacting with ESOs
The interaction between an access-control system and a ESO is a
basic client-server interaction.
ESO interface. Each ESO object exposes several methods. The
first is дet_id(), which returns situation_id, situation_name,
and ESO_description. The second is is_active(s, a), which receives
as input a subject and an access right and returns a boolean is_active
indicating if the situation is currently active.
third method,
support
callback_on_chanдe(), to register callbacks for state changes. This
is useful mainly for situation-triggered functionality that is not nec-
essarily related to access control. Our survey of IFTTT recipes (Ap-
pendix B) shows that, just like situational access control, situation-
triggered functionality lacks common interface standardization and
suffers from overprivileging and redundancy.
Access to an ESO can be controlled, too, for example if is_active()
and callback_on_chanдe() are accessible only to authorized sub-
jects. We use the term e-policy for the access-control policy of the
ESO itself, as opposed to the access-control policies that are clients
of the ESO. Section 3.3 explains how these e-policies are created.
Changes to the policy language. We add a set of ESO identifiers
I and a set of situational ACEs (sACEs) Esit ⊆ S × A × I. For every
(s, a) ∈ S × A, Esit can have at most one entry pertaining to (s, a).
More elaborate policies could be expressed with multiple situational
constraint per subject-object pair, e.g., based on logical and or or
between situations, but an ESO can aggregate query results from
other ESOs, thus there is no loss of expressiveness.
These changes are backward-compatible and aim to minimize
the adoption cost for the existing systems. Alternatives such as
grouping rules into “profiles” that activate on situation changes or
adding roles and attributes [37] are expensive to adopt in the IoT
and do not appear necessary for common situational policies.
3.2 Integrating ESOs into the IoT stack
In Section 4.1, we survey four IoT interfaces where access-control
policies may need to be enforced: (1) direct resource-layer access,
(2) service-to-service access through Web APIs, (3) app-to-service
access in app frameworks, and (4) IFTTT service integrations. We
categorize these interfaces by their connectivity and communica-
tion capabilities and specify the connectivity interface and commu-
nication protocol between the clients and ESOs.
Resource-layer accesses are local: they take place within a home
network or local area network. Unlike HTTP, resource-layer proto-
cols such as OCF, ZigBee, and Z-Wave (see Section 4) are optimized
for high availability and low energy consumption. We call ESOs at
this layer Resource ESOs (rESOs).
Service-to-service interactions are Web-based. Access-control
decisions are made by a (typically remote) cloud service prior to
operation dispatch. ESOs are deployed as Web services exporting
an HTTP interface, i.e., Web ESOs (wESOs).
Monitors for app-service interactions can be Web-based (and use
wESOs) or local (and use rESOs); SmartThings is a hybrid.
IFTTT recipes are deployed in the proprietary, closed-source
IFTTT service. While wESOs can be used, they may not be adequate.
IFTTT imposes requirements on the remote services exposing ac-
tions and triggers, e.g., they must issue OAuth 2 tokens that never
expire, add integration code in IFTTT’s Web IDE, and pay a fee.
“Filter” code with third-party query capability (see Appendix A.4)
has the benefits of an ESO for IFTTT recipes.
Our prototype implementations focus on rESOs (Section 5) and
wESOs (Section 6).
Alternative: constrained delegation. For the Web, where access
is delegated using tokens rather than granted based on identities,
some existing delegation schemes already facilitate wESOs with-
out any modification to the scheme’s enforcement logic. In the
expressive bearer-credential protocols such as SPKI/SDSI [22] and
(a) Enforcing non-situational constraint
(b) Enforcing situational constraint
(c) Termination notification flow
Figure 3.1: Abstract access-protected framework reference monitoring flow
(the more recent) Macaroons [6], credentials include constraints on
when and how they may be used. For example, Macaroons allow
adding contextual caveats to bearer credentials, which can include
arbitrary constraints from the credential issuer or a downstream
bearer, e.g., the requirement that a credential-carrying request con-
tain a signed statement from a third party.
These access delegation schemes are expressly designed to sup-
port attestation protocols with the mutual obliviousness property
of our ESOs. For example, a macaroon could carry the constraint
“bearer must show evidence that they are logged into Alice’s Google
account” and Google could export a service that signs such state-
ments, similar to OpenID authentication [53]. Our wESO protocol