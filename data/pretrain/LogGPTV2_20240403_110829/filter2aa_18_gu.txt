内核扩展与标准的设备驱动不同。大多数设备驱动是由LDD同成对的PDD实现的，在用户空间程序需要的时候加载。内核扩展在引导时刻加载，针对特定的设备，通常没有成对的PDD。
内核扩展是引导过程的一部分。这些特殊的设备驱动在调度器启动之后加载并且启动。它们执行对于操作系统非常重要的功能：DMA服务、显示管理、对外设的总线控制（例如USB总线）。之所以提供它们有两个原因。首先，它与我们已经看作是微内核设计特征的面向对象设计抽象相称。其次，它允许Symbian操作系统所处的不同平台运行专门的设备驱动，从而不需要重新编译内核而使用硬件。
12.5.3 直接存储器访问
设备驱动经常使用DMA，Symbian操作系统支持DMA硬件的使用。DMA硬件包含一个控制一系列DMA通道的控制器。每个通道提供内存和设备间的单一方向的通信，因此，数据的双向传输需要两个DMA通道。至少有一对DMA通道是专用于显示LCD控制器的。此外，大多数平台提供一定数量的常规DMA通道。
一旦一个设备把数据传送到内存，就会激发一个系统中断。PDD为了传输设备使用DMA硬件提供的DMA服务，这里传输设备是指与硬件接口的设备驱动的一部分。在PDD与DMA控制器之间，Symbian操作系统实现两层软件：一个软件的DMA层，一个与DMA硬件接口的内核扩展。DMA层把自身分成平台独立层和台相关层。作为内核扩展，DMA层在引导进程中是内核启动的第一批设备驱动的一个。
由于特殊的原因，对DMA的支持是比较复杂的。Symbian操作系统支持许多不同的硬件配置，但是没有提供缺省的DMA配置。与DMA硬件的接口是标准化的，由平台无关层来提供。平台相关层和内核扩展由生产厂商提供，这样Symbian操作系统就如对其他设备一样处理DMA硬件：在LDD和PDD构件中具有设备驱动。由于DMA硬件本身是一个设备，并且它并行了Symbian操作系统支持所有设备的方式，因此这种实现支持的方式是合理的。
12.5.4 特殊情况：存储介质
Symbian操作系统中存储介质驱动是PDD的一种特殊形式，文件服务器排他地使用它们来实现对存储介质设备的访问。因为智能手机既可以容纳固定的存储介质也可以容纳移动的存储介质，所以存储介质驱动必须识别和支持多种形式的存储介质。Symbian操作系统对介质的支持包括一个标准的LDD和为用户提供的接口API。
Symbian操作系统中的文件服务器能够同时支持多达26个不同的设备。本地设备，像在Windows中一样，通过驱动器号来区分。
12.5.5 阻塞I/O
Symbian操作系统通过活动对象处理阻塞I/O。设计者认识到等待I/O事件的所有线程的负荷会影响系统中的其他线程这一事实。活动对象使得阻塞I/O调用可以由操作系统来处理，而不是进程自身。活动对象由一个调度器进行协调并且在一个单独的线程中执行。
当活动对象使用一个阻塞I/O调用时，它用信号通知操作系统并且把自身挂起。当调用完成时，操作系统唤醒挂起的进程，该进程如同带有数据返回的函数一样继续执行。区别只是对于活动对象的一个观点：它不能调用一个函数并期待一个返回值；它必须调用一个特殊的函数并且使该函数设置阻塞I/O，但是立刻返回。操作系统接管等待过程。
12.5.6 可移动存储器
可移动存储器带给操作系统设计人员一个有趣的两难处境。当往读取槽插入一张安全数据（Secure Digital，SD）卡时，该卡就同其他设备一样成为一个设备。它需要一个控制器、一个驱动、一种总线结构，而且很有可能通过DMA与CPU进行通信。然而，对这类模型移除存储介质是一个很严重的问题：操作系统怎样检测插入和移除？这一模型如何适应一张介质卡的不存在？还有更加复杂的情况，一些设备槽能够兼容不止一种类型的设备。例如，一张SD卡，一张miniSD卡（带有适配器），以及一张多媒体卡都使用同一类插槽。
Symbian操作系统使用可移动存储器的很多共同性来实现对它们的支持。每种可移动存储器通常具有如下特点：
1)所有的设备必须支持插入和移除。
2)所有的可移动存储器能够“热”拔，也就是正在使用时被拔下。
3)每种介质都能报告它自己的容量。
4)必须拒绝不适配的卡。
5)每种卡都需要电源。
为了支持可移动存储器，Symbian操作系统提供控制每种支持卡片的软件控制器。这些控制器和设备驱动工作在一起，这在软件层面上也是一样的。当一张卡插入时，就创建了一个套接字对象，该套接字对象构成数据流动过程中的通道。为了适应卡状态的改变，Symbian操作系统提供了一系列的当状态改变发生时的事件。设备驱动像活动对象一样被配置用来监听这些事件并作出反应。
12.6 存储系统
和所有面向用户的操作系统一样，Symbian操作系统有一个文件系统。下面我们来对其进行描述。
 12.6.1 移动设备文件系统
就文件系统和存储而言，手机操作系统有很多和台式机操作系统相同的需求。多数的这类系统都实现在32位硬件平台上；允许用户以任意的名字命名文件；大量存储文件，需要一定的组织结构。这意味着我们需要一个分层的、基于目录的文件系统。而且，手机操作系统设计人员有很多文件系统可以选择时，一个很重要的特性影响了他们的选择：大多数手机存储介质可以和Windows环境共享使用。
如果手机系统中没有可移动存储器件，则任一种文件系统都是可以使用的。但是，对于使用闪存作为存储的系统来说，还有特殊的情况需要考虑。存储块一般都是512字节到2048字节，但闪存不能直接修改数据记录，而需要先擦除数据，然后才能进行写入。另外，擦除的操作很不精确，每次擦除不能只擦除一个字节，而必须擦除整个块。擦除速度相对比较慢。
为了顺应这些特征，并且使闪存工作效率最高，需要文件系统能够把写操作分散到整个器件，以及解决较长的擦除时间问题。一个基本的概念是，当文件被更新时，文件系统会将文件的更新副本写入空闲的存储块并修改文件指针，而在有空闲时间时再进行旧数据块的回收操作。
最早的闪存文件系统之一是微软公司在20世纪90年代初为MS-DOS使用的FFS2文件系统。在1994年PCMCIA工业组织通过了关于闪存的闪存传输层（Flash Translation Layer）标准后，闪存器件可以被识别为一个FAT文件系统。Linux同时也专门为闪存设计了JFFS（Journaling Flash File System）和YAFFS（Yet Another Flash Filing System）两种文件系统。
但是，移动平台必须和其他计算机共享存储介质，这就要求必须有一定的兼容措施。FAT文件系统是最常用到的。而且，由于与FAT-32相比，FAT-16有着较小的分配表以及长文件的简化用法，所以FAT-16的使用更为广泛。
12.6.2 Symbian操作系统文件系统
作为智能手机操作系统，Symban OS至少需要实现FAT-16文件系统。实际上，它的确支持FAT-16，并在大多数存储介质上使用。
但是，Symbian操作系统文件服务器是建立在一个类似Linux的虚拟文件系统的抽象层上的。面向对象技术允许多种文件系统的实现代码作为文件服务器的插件使用，于是允许同时使用多种文件系统。多种文件系统的实现代码可以在一个文件服务器中共存。
Symbian操作系统也支持NFS和SMB文件系统。
12.6.3 文件系统安全和保护
智能手机安全是通用计算机安全的一个有趣的变体。有很多侧面特征使得智能手机安全更富有挑战。Symbian操作系统在设计选择上有很多与通用计算平台和其他智能手机平台不同的地方。在这里我们只关注和文件系统安全有关的特征，其他方面将在下一节中进行讨论。
考虑到智能手机的环境，它们属于单用户设备，不需要在使用前进行用户认证。一个手机用户可以执行应用程序、拨打电话、访问网络，全都不需要用户认证。在这样的环境下，使用基于权限的安全措施是很有挑战性的，因为缺乏认证机制意味着只有一组权限可以使用，即所有人使用同样的一组权限。
除了权限，安全经常受益于其他形式的信息。在Symbian操作系统版本9或更新的版本中，应用程序在安装时就已被指定了其行为能力（授予一个应用程序权限的机制将在下一节涉及）。一个应用程序在请求执行某项行为时，其行为能力集将被检查。如果这种访问在行为能力集中存在，访问被许可，否则被拒绝。行为能力检查会造成一些系统开销——每次涉及到访问资源的系统调用都需要进行检查——但检查一个文件的所有者是否匹配的开销会更长。这个折中在Symbian操作系统中效果很好。
Symbian操作系统中还有一些其他形式的文件安全。在Symbian操作系统的存储器件中有特定的区域，需要有特定权限的应用程序才能访问。这种特定的权限只将安装程序赋予了应用程序。这样做的效果是，新安装的应用程序在安装完成后即被保护，不受任何非系统的访问（意味着非系统的恶意程序，如病毒，不能感染已经安装的程序）。另外，文件系统预留了专门保存应用程序产生的特殊数据的区域（这被称作数据锁定，见下一节）。
对Symbian操作系统来说，权限的使用和文件所有者在保护文件访问上的效果是相当的。
12.7 Symbian操作系统的安全
智能手机提供的环境很难保证安全。像我们之前提到的，它们属于单用户设备，不需要在使用基本功能前进行用户认证。更复杂的功能（如应用软件安装）需要授权，但不需认证。然而，智能手机上执行的复杂操作系统中，有很多途径进行数据的交换（以及执行程序）。在这样的环境进行安全防护变得很复杂。