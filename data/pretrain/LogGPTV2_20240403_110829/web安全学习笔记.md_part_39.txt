### 命令行常用选项

- **-B**：设置抓取流量的缓冲区大小（单位为 KB）。如果设置过小，可能会导致丢包。
- **-c**：指定抓取 n 个数据包后退出。
- **-C**：当当前记录的数据包大小超过一定值时（单位为 MB），另起一个文件进行记录。
- **-i**：指定要捕获流量的网络接口。
- **-n**：禁止地址解析。
- **-r**：读取已保存的 pcap 文件。
- **-s**：从每个报文中截取 snaplen 字节的数据。若设置为 0，则表示获取所有数据。
- **-q**：输出简略的协议相关信息，使输出行更加简洁。
- **-W**：在写满 cnt 个文件后停止继续写入。
- **-w**：将捕获到的流量保存至文件中。支持使用 strftime 格式命名文件，如 `%Y_%m_%d_%H_%M_%S.pcap`。
- **-G**：按时间间隔分割包。
- **-v**：增加详细程度的输出，使用 `-vv` 或 `-vvv` 可以获得更详细的输出信息。
- **-X**：同时输出报文头部和内容。
- **-Z**：在写入文件之前切换用户身份。

### 10.3.2 Bro
Bro 是一款开源的网络流量分析工具，支持多种协议，并能实时或离线地对流量进行分析。

#### 命令行
- 实时监控: `bro -i <interface>`
- 分析本地流量: `bro -r <file>`
- 分割解析后的日志: `bro-cut`

#### 脚本
为了扩展和定制 Bro 的功能，它提供了一种事件驱动的脚本语言。

### 10.3.3 tcpflow
tcpflow 是一种以流为单位显示数据内容的抓包工具，在分析 HTTP 等协议时特别有用。

#### 常用命令行选项
- **-b max_bytes**：定义最大抓取流量。
- **-e name**：指定解析器名称。
- **-i interface**：指定监听接口。
- **-o outputdir**：设定输出目录。
- **-r file**：读取并处理文件。
- **-R file**：仅读取完整的文件。

### 10.3.4 tshark
tshark 是 Wireshark 的命令行版本，允许通过命令提取特定数据，并可重定向输出到文件或其他上层程序中进行进一步处理。

#### 输入接口
- **-i**：指定捕获接口，默认选择第一个非本地回环接口。
- **-f**：设置过滤表达式，遵循 libpcap 过滤规则，用于抓包过程中的筛选。
- **-s**：设定快照长度，即每次读取的数据包大小，默认为 65535 字节。
- **-p**：启用非混杂模式，只关注与本机相关的流量。
- **-B**：调整 Windows 平台下的缓冲区大小，默认为 2MB。
- **-y**：指定底层链路层协议类型。
- **-D**：列出所有可用接口并退出。
- **-L**：展示系统支持的所有链路层协议，供 `-y` 参数使用。

#### 捕获停止选项
- **-c**：捕获指定数量的包后停止。
- **-a duration:NUM**：在 num 秒后停止捕获。
- **-a filesize:NUM**：当文件大小达到 num KB 时停止捕获。
- **-a files:NUM**：在生成 num 个文件后停止捕获。

#### 处理选项
- **-Y**：应用读取过滤器语法。
- **-n**：禁用所有地址解析。
- **-N**：开启特定层级的地址解析功能。
- **-d**：按照指定协议解码数据流。

#### 输出选项
- **-w**：指定原始数据输出文件路径。
- **-F**：选择输出文件格式。
- **-V**：增强输出细节。
- **-O**：仅显示指定协议的详细信息。
- **-P**：即使向文件写入解码结果也打印包摘要。
- **-S**：设置行分隔符。
- **-x**：在解码输出后附加 HEX dump 数据。
- **-T**：设置输出格式。
- **-e**：结合 `-T` 使用，指定需要输出的具体字段。
- **-t**：配置时间戳格式。
- **-u**：以秒为单位格式化输出。
- **-l**：每输出一个包后刷新标准输出。
- **-q**：配合 `-z` 选项执行统计分析。
- **-X**：提供额外的扩展项。
- **-z**：执行统计操作。

#### 其他选项
- **-h**：显示帮助信息。
- **-v**：查看版本号。

### 10.4 嗅探工具

#### 10.4.1 Nmap
Nmap 是一个强大的网络扫描工具，可用于主机发现、端口扫描和服务探测等任务。

##### 指定目标
- CIDR 表示法：`192.168.1.0/24`
- 列表形式：`www.baidu.com,www.zhihu.com`
- 范围形式：`10.22-25.43.32`
- 文件输入：`-iL <file>`
- 排除目标：`--exclude <host>` 或 `--excludefile <file>`

##### 主机发现
- **-sL**：仅列出待扫描的目标。
- **-sn/-sP**：禁用端口扫描，仅执行 Ping 扫描。
- **-Pn**：假设所有主机在线，跳过发现阶段。
- **-sS/sT/sA/sW/sM**：分别代表 TCP SYN/Connect()/ACK/Window/Maimon 扫描方式。
- **-sU**：UDP 扫描。
- **-sN/sF/sX**：TCP Null, FIN, Xmas 扫描。

##### 端口扫描
- **--scanflags**：自定义 TCP 扫描标志。
- **-P0**：无 Ping。
- **PS [port list]**：TCP SYN ping。
- **PA [port list]**：TCP ACK ping。
- **PU [port list]**：UDP ping。
- **PR**：ARP ping。
- **-F**：快速扫描。
- **-r**：不采用随机顺序扫描。

##### 服务与版本检测
- **-sV**：启动版本探测。
- **--allports**：不对任何端口进行排除。
- **--version-intensity**：调整版本扫描强度。
- **--version-light**：轻量级模式。
- **--version-all**：尝试所有探测方法。
- **--version-trace**：跟踪版本扫描活动。
- **-sR**：RPC 扫描。

##### 操作系统识别
- **-O**：启用 OS 检测。
- **--osscan-limit**：限制对某些目标的操作系统检测。
- **--osscan-guess**：猜测操作系统类型。
- **--fuzzy**：推测 OS 检测结果。

##### 性能调优
- **--min-hostgroup/--max-hostgroup**：调整并发扫描组大小。
- **--min-parallelism/--max-parallelism**：控制探测包的并行度。
- **--min_rtt_timeout/--max-rtt-timeout/--initial-rtt-timeout**：设置探测超时。
- **--host-timeout**：放弃响应慢的目标。
- **--scan-delay/--max_scan-delay**：调节探测间隔。
- **-T**：设定时间模板，数字越大速度越快。

##### 避免被检测
- **-f**：IP 分片。
- **--mtu**：指定 MTU。
- **-D**：使用诱饵隐藏真实 IP。
- **-S**：源地址欺骗。
- **-e**：选择特定网卡。
- **--source-port;-g**：源端口欺骗。
- **--data-length**：发送时附加随机数据。
- **--ttl**：设置 TTL。
- **--randomize-hosts**：随机排列目标列表。
- **--spoof-mac**：MAC 地址欺骗。

##### 输出格式
- **-oN**：标准文本输出。
- **-oX**：XML 格式输出。
- **-oS**：ScriptKiddie 输出。
- **-oG**：Grepable 输出。
- **-oA**：输出所有格式。
- **--open**：仅显示可能开放的端口。

##### 调试信息
- **-v**：增加信息详细度。
- **-d [level]**：设置调试级别。
- **--packet-trace**：追踪发送接收的包。
- **--iflist**：列出接口及路由。

#### 10.4.2 Masscan
Masscan 是一个高性能的端口扫描工具。

##### 编译安装
```bash
sudo apt-get install git gcc make libpcap-dev
git clone https://github.com/robertdavidgraham/masscan
cd masscan
make -j
```

##### 命令行选项
- **--ports**：指定端口范围。
- **--rate**：设定扫描速率。
- **--source-ip**：指定源 IP 地址。

### 10.5 SQLMap 使用
SQLMap 是一款自动化 SQL 注入测试工具。

#### 安装
```bash
git clone https://github.com/sqlmapproject/sqlmap.git sqlmap
```

#### 常用参数
- **-u / --url**：指定目标 URL。
- **-m**：批量扫描多个目标。
- **-r**：从文件加载 HTTP 请求。
- **--data**：POST 提交的数据。
- **--random-agent**：使用随机 User-Agent。
- **--user-agent**：指定 User-Agent。
- **--delay**：请求间延时。
- **--timeout**：超时设置。
- **--dbms**：指定数据库管理系统。
- **--os**：指定 DB 服务器操作系统。
- **--tamper**：使用 tamper 脚本。
- **--level**：探测等级。
- **--risk**：风险等级。
- **--technique**：注入技术（B/E/U/S/T）。

#### Tamper 脚本速查
- **apostrophemask.py**：用 UTF-8 替换引号。
- **equaltolike.py**：用 LIKE 代替等于号。
- **space2dash.py**：绕过 '=' 过滤，替换空格字符。
- **greatest.py**：用 GREATEST 函数替换 '>'。
- **space2hash.py**：用 '#' 和随机字符串替换空格。
- **apostrophenullencode.py**：绕过双引号过滤。
- **halfversionedmorekeywords.py**：添加 MySQL 版本注释绕过防火墙。
- **space2morehash.py**：用 '#' 和更多随机字符串替换空格。
- **appendnullbyte.py**：在有效载荷末尾添加零字节。
- **ifnull2ifisnull.py**：替换 IFNULL 为 IF(ISNULL)。
- **space2mssqlblank.py**：用 MSSQL 空符号替换空格。
- **base64encode.py**：Base64 编码替换。
- **modsecurityversioned.py**：包含完整查询版本注释。
- **between.py**：用 BETWEEN 替换大于号。
- **multiplespaces.py**：在关键字周围添加多处空白。
- **bluecoat.py**：用随机空白字符替换空格。
- **nonrecursivereplacement.py**：替换预定义的关键字。
- **chardoubleencode.py**：双重 URL 编码。
- **unionalltounion.py**：替换 UNION ALL 为 UNION。
- **charencode.py**：URL 编码。
- **randomcase.py**：随机大小写。
- **unmagicquotes.php**：绕过 GPC addslashes。
- **randomcomments.py**：用 /**/ 分割关键字。
- **charunicodeencode.py**：Unicode 编码。
- **securesphere.py**：追加特殊字符串。
- **versionedmorekeywords.py**：注释绕过。
- **space2comment.py**：用注释替换空格。

希望这些优化后的描述能够更好地帮助您理解和使用这些工具！