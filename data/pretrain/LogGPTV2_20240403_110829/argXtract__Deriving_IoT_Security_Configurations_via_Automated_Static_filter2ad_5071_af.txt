### 5.4 Manufacturer/Device Names and Privacy

Bluetooth Low Energy (BLE) advertising messages typically include the peripheral's name, which users often use to identify a specific device among other BLE devices in the vicinity. Additionally, peripherals may include a Manufacturer Name String, which can be obtained by sending a scan request. These advertising messages do not require authentication to be read.

**Extracting Device and Manufacturer Names:**
- **argXtract** extracted non-null values for device/manufacturer names from 156 binaries.
- The analysis revealed that the dataset contained firmware from various BLE devices, including fitness trackers, beacons, electric switch controls, parking aids, security devices, personal protection devices, medical equipment, and behavioral monitoring devices.

**Privacy Implications:**
- Device names can reveal significant information about the nature of the device, especially if it is related to a user’s health or other private matters.
- Since no active connections are required to read advertising data, an attacker can monitor BLE advertising channels and send scan requests for additional information.
- By continuously scanning BLE advertisements, extracting device and manufacturer names, and combining this information with the Received Signal Strength Indicator (RSSI), an attacker can determine which devices belong to which users in the vicinity. This can defeat private addresses (as discussed in §5.3) and allow the attacker to track the device using the device name and other advertising data [12, 19, 31].
- If a particular device has known vulnerabilities, the attacker can use the device name to identify and exploit these vulnerabilities.

### 6 Applicability Studies

In this section, we apply **argXtract** to two smaller datasets representing non-BLE technologies and non-svc-based stacks.

#### 6.1 Case Study: BLE Security and Privacy via Function Pattern Matching (BlueNRG)

We manually analyzed 500 real-world .bin files extracted from APKs and found that two were STMicroelectronics BlueNRG binaries. **argXtract** identified that both had an application code base of 0x10051000, corresponding to BlueNRG-1 v2.1+ [76].

##### 6.1.1 BLE Address Privacy

- **Extracting Address Configurations:** **argXtract** revealed that one of the real-world binaries contained a public address derived from BlueNRG code samples, suggesting it was for demonstration purposes. The second binary, a BLE-enabled cyclist safety aid, did not have privacy enabled.
- **Privacy Implications:** A cyclist safety aid is likely to be with the user whenever they are cycling. A fixed address emanating from the device at all times enables the user to be tracked over time, as discussed in §5.3.

##### 6.1.2 BLE Pairing Security

- **Extracting Pairing Configurations:** For the cyclist safety aid, **argXtract** found that the binary had no calls to `aci_gap_set_io_capability` or `aci_gap_set_authorization_requirement`, indicating that BLE security was not enabled.
- **Security Implications:** The lack of security in a cyclist safety aid means that an attacker could connect to the device and send commands without any authentication, potentially compromising the cyclist's safety. We have informed the developer regarding these issues.

#### 6.2 Case Study: ANT Security (Nordic)

To acquire Nordic ANT binaries, we followed the same procedure as for Nordic BLE (see §5), but focused on a different set of svc numbers. We obtained 9 ANT binaries from APKs.

##### 6.2.1 ANT Channel Security

- **ANT Communications:** ANT communications are channel-based, with a channel connecting two or more nodes. Some ANT devices can have multiple channels. To secure the channels at the network layer, ANT supports 8-byte network keys and 128-bit AES encryption [34].
- **Extracting Channel Security Configurations:** **argXtract** extracted channel configuration parameters from 9 real-world ANT binaries, corresponding to 7 indoor exercise bikes, an analytical bike light, and a heart rate monitor. Three binaries defined a single ANT channel, four defined 2 channels, and two defined 4 channels. None of the binaries specified encryption for any of their ANT channels.
- **Security Implications:** As with the findings in §5.1 for BLE, in ANT, data will be vulnerable to unauthorized access if channel security is not enabled. One of the tested binaries was a heart rate monitor, meaning that a user’s heart rate measurements (i.e., health indicators) are vulnerable.

### 7 Limitations and Future Work

This section discusses some limitations of **argXtract** and potential areas for future work.

- **Edge Cases:** **argXtract** can analyze most Cortex-M binaries, but there are edge cases where the `.text` segment is split into subsections with different address offsets, making it difficult for **argXtract** to obtain individual code bases and accurate function estimates. This improvement is left as future work.
- **Function Identification:** **argXtract** assumes that instructions belonging to a function are laid out in a contiguous range. If a function is split into disjoint blocks, **argXtract** may identify each block as a separate function.
- **COI and Callsite Identification:** The function pattern matching performed by **argXtract** uses manually-defined test sets. If two functions produce the same output for the same input and one is not nested within the other, a single function cannot be matched. The process can take several hours when a binary contains a large number of functions. An ideal alternative would be automated function pattern matching without executing function code, but this requires a sufficiently large annotated training set, which is not yet available for vendor-specific configuration functions. Direct calls are identified, but calls via `blx` are not, though `blx` will be identified and handled during tracing.

### 8 Related Work

This section discusses previous works related to firmware analysis and IoT security. While many aspects of firmware analysis have been covered, most existing works focus on Linux-based systems [60]. The analysis of stripped binaries targeting non-traditional operating systems and the ARM Thumb instruction set, increasingly favored by IoT peripherals, remains underexplored.

- **Analysis of Stripped Binaries:** Control flow analysis has been used to determine functions in PE, ELF, COFF, and XCOFF binaries [4, 36, 59, 61, 65], and a QEMU+LLVM approach for function boundary identification was presented in [29]. Machine learning (ML) has also been proposed for identifying function entry points [11, 66, 68], but this approach requires a sufficiently large labeled training set, currently not available for IoT peripheral binaries. A semantics-based approach was used in Jima [3] for ELF x86/x86-64, which employs techniques for computing jump tables similar to those used in **argXtract** for computing table branch addresses.
- **Function Matching and Labelling:** One approach for function pattern matching is to compute statistical similarities between instruction sequences of functions [46, 54], but this may suffer from poor performance due to compiler-introduced variations and optimizations [17]. Dynamic similarity testing via function execution was employed in [30], but **argXtract** looks for functional equivalence based on known function behavior, while [30] considers function similarity based on random executions. Most current approaches favor ML techniques [49, 58, 68, 89], but this requires large training sets.
- **Security Analysis and Patching of IoT Firmware:** Large-scale security analyses of embedded firmware files, predominantly Linux and VxWorks-based, were presented in [24, 25]. FIE [28], built from the KLEE symbolic execution engine, identifies vulnerabilities in embedded MSP430 firmware. Firmalice [69] detects authentication bypass vulnerabilities within the firmware of Linux and VxWorks-based binaries. FirmFuzz [73] targets IoT firmware and uses QEMU to analyze unstripped Linux-based binaries. These works are not suitable for analyzing stripped firmware of embedded devices without a proper OS. InternalBlue [48] enables testing and patching of Broadcom Bluetooth firmware, while LightBlue [88] analyzes and performs debloating of unneeded Bluetooth profiles and HCI commands within firmware to reduce the potential attack surface.
- **BLE Configuration Security Analysis:** Previous works have explored the security and privacy configurations of BLE peripherals by analyzing devices [6, 27, 72, 84] and mobile applications [70, 94]. However, device analysis is expensive and may not provide direct indications about higher-layer security, while mobile applications do not provide insights about low-level pairing mechanisms. Multi-faceted analysis of BLE fitness trackers, in terms of configuration and behavior, was performed in [23, 26, 39]. Independently, Wen et al. [87] developed a tool named FirmXRay that identifies BLE link layer configuration vulnerabilities by targeting supervisor calls on Nordic and ICalls on Texas Instruments BLE binaries. A comparison with **argXtract** was not possible due to insufficient information in FirmXRay’s output data structures. While FirmXRay is geared towards BLE vulnerabilities, **argXtract** can handle generic analysis of any technology targeting ARM Cortex-M binaries. **argXtract** performs function pattern matching to identify any function (provided the requisite artifacts can be identified within memory/registers), and the template-based approach in our framework allows easy addition of new test functions.

### 9 Conclusion

In this work, we present **argXtract**, a framework for performing partial-knowledge automated analyses of stripped IoT binaries to extract security-relevant configuration information from ARM Cortex-M firmware. **argXtract** overcomes the challenges inherent to the analysis of stripped Cortex-M binaries and enables bulk processing of IoT peripheral firmware files. We use **argXtract** to extract configurations from three datasets: Nordic Bluetooth Low Energy (BLE) binaries, STMicroelectronics BlueNRG binaries, and Nordic ANT binaries. Our results reveal widespread lack of protection for data, inconsistent data access controls, and serious privacy vulnerabilities.