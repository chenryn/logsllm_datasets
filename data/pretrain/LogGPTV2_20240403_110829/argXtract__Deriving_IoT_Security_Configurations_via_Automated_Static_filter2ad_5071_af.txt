to track users across a range of locations [40]. These attacks are
particularly relevant in the case of devices such as wearables, which
are generally always on the user’s person. We found that all of the
wearable binaries within our dataset used public or fixed random
static addresses.
5.4 Manufacturer/Device Names and Privacy
BLE advertising messages usually contain the peripheral’s name,
which is often used by users to identify a device from (potentially) a
number of other BLE devices that are also advertising in the vicinity.
Peripherals may also include a Manufacturer Name String, which
is normally obtained by sending a scan request. These advertising
messages require no authentication in order to be read.
870argXtract: Automated Analysis of Stripped IoT Binaries
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Extracting device and manufacturer names: argXtract ex-
tracted non-null values for device/manufacturer name from 156
binaries. An analysis of the names revealed that our dataset con-
tained firmware from a variety of BLE devices, including fitness
trackers, beacons, electric switch controls, parking aids, security
devices, personal protection devices, medical equipment and be-
havioural monitoring devices.
Privacy implications: Device names can reveal a lot about the
nature of the device. This is particularly concerning when the de-
vice is related to a user’s health, or is of an otherwise private nature.
Because no active connections are required to read advertising data,
an attacker would simply need to monitor the BLE advertising chan-
nels and perhaps send a scan request for additional information. By
continuously scanning BLE advertisements, extracting the device
and manufacturer name, and combining this information with the
Received Signal Strength Indicator (RSSI), along with user observa-
tion, an attacker may be able to determine which devices belong
to which users in the vicinity. This could defeat private addresses
(§5.3), as an attacker might instead be able to use the device name,
along with other advertising data, to track the device [12, 19, 31].
Further, if a particular device has known issues (such as those iden-
tified in this work), then the attacker can take advantage of the
device name to identify exploitable devices.
6 APPLICABILITY STUDIES
In this section, we apply argXtract to two smaller datasets, repre-
senting non-BLE technologies and non-svc-based stacks. In §6.1,
we present a case study for the identification of BLE configuration
vulnerabilities in firmware that targets STMicroelectronics chipsets,
specifically the BlueNRG processor. Configurations for BlueNRG
are performed via function calls. We therefore employ the function
pattern matching module of argXtract (described in §3.4.2). In
§6.2, we present a case study for the identification of vulnerabilities
within binaries targeting Nordic Semiconductor chipsets and im-
plementing the ANT technology stack. All relevant function calls
and svcs are provided in Table 2.
6.1 Case Study: BLE Security and Privacy via
Function Pattern Matching (BlueNRG)
We manually analysed 500 real-world .bin files extracted from APKs
and found that two were STMicroelectronics BlueNRG binaries.
argXtract identified that both had an application code base of
0x10051000, which corresponds to BlueNRG-1 v2.1+ [76].
6.1.1 BLE Address Privacy. In this section, we describe tests to
identify the use of private addresses within BlueNRG binaries.
Extracting address configurations: argXtract revealed that
one of the real-world binaries contained a public address derived
from BlueNRG code samples. This, along with the binary’s name,
led us to conclude that the binary was for demonstration purposes.
The second binary was a BLE-enabled cyclist safety aid. It did not
have privacy enabled.
Privacy implications: A cyclist safety aid is likely to be about
the user’s person whenever they are cycling. A fixed address ema-
nating from the device at all times enables the user to be tracked
over time, as discussed in §5.3.
6.1.2 BLE Pairing Security. With BlueNRG binaries, if a BLE char-
acteristic has authentication requirements, then specific config-
urations must be performed to enable pairing. We exploit two
pairing-related functions in our tests. We additionally check for
authorisation requirements.
Extracting pairing configurations: Focusing on the cyclist
safety aid, argXtract found that the binary had no calls either to
aci_gap_set_io_capability or to aci_gap_set_authorization_-
requirement. This means that BLE security was not enabled.
Security implications: A lack of security in a cyclist safety
aid means that an attacker could connect to the device and send
commands to it without the need for any authentication. This could
have serious consequences for the cyclist’s safety. We have informed
the developer regarding the identified issues.
6.2 Case study: ANT Security (Nordic)
To acquire Nordic ANT binaries, we follow the same procedure as
for Nordic BLE (see §5), but focus on a different set of svc numbers.
We obtained 9 ANT binaries from APKs.
6.2.1 ANT Channel security. ANT communications are channel-
based, with a channel connecting two or more nodes together. Some
ANT devices can have multiple channels. To secure the channels at
the network layer, ANT supports 8-byte network keys and 128-bit
AES encryption [34].
Extracting channel security configurations: argXtract ex-
tracted channel configuration parameters from 9 real-world ANT
binaries, corresponding to 7 indoor exercise bikes, an analytical
bike light (i.e., a bike light with additional sensors), and a heart
rate monitor. Three binaries defined a single ANT channel, four
defined 2 channels and two defined 4 channels. None of the binaries
specified encryption for any of their ANT channels.
Security implications: As with the findings discussed in §5.1
for BLE, in ANT too data will be vulnerable to unauthorised access
if channel security is not enabled. One of the binaries that was
tested was a heart rate monitor, which means that a user’s heart
rate measurements (i.e., health indicators) are vulnerable.
7 LIMITATIONS AND FUTURE WORK
In this section, we discuss some limitations of argXtract, which
could provide potential for future work.
Edge cases: argXtract is able to analyse most Cortex-M bina-
ries. However, as seen in one example in §4, there are edge cases
where the .text segment is split into subsections, with different
address offsets for each subsection, where argXtract is unable to
obtain individual code bases and accurate function estimates. This
improvement is left as future work.
Function identification: With function boundary identifica-
tion, argXtract assumes that the instructions belonging to a func-
tion are laid out in a contiguous range. If a function is split up into
disjoint blocks of instructions, then argXtract may identify each
such block as a separate function.
COI and callsite identification: As mentioned in §3.4, the
function pattern matching performed by argXtract uses manually-
defined test sets, when function outputs or artefacts are distinguish-
able. If two functions produce the same output for the same input
871ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Pallavi Sivakumaran and Jorge Blasco
and one is not nested within the other, then a single function cannot
be matched. Further, the function pattern matching process can take
several hours when a binary contains a large number of functions.
An ideal alternative would be automated function pattern match-
ing, without executing function code. The most popular method to
achieve this at present is via machine learning techniques. How-
ever, this requires a sufficiently large annotated training set for
each function of interest, which is not yet available for the types
of vendor-specific configuration functions that are of interest here.
With callsite identification, direct calls are identified. However, calls
via blx are not. (Note that blx will be identified and handled during
tracing, but not for COI identification.)
8 RELATED WORK
In this section, we discuss previous works related to firmware
analysis and IoT security. While it may seem like most aspects of
firmware analysis have already been covered, most existing works
focus on Linux-based systems [60]. We reiterate that the analysis of
stripped binaries targeting non-traditional operating systems and
the ARM Thumb instruction set, which is increasingly favoured by
IoT peripherals, has still not been explored sufficiently.
Analysis of stripped binaries: The analysis of stripped bina-
ries, particularly function block identification, has been the sub-
ject of widespread study. Control flow analysis has been used
in [4, 36, 59, 61, 65] to determine functions in PE, ELF, COFF and
XCOFF binaries, and a QEMU+LLVM approach for function bound-
ary identification was presented in [29]. These approaches may not
be suited to ARM IoT analysis due to errors introduced by inline
data and compiler-introduced constructs such as Thumb switch-
case conditions. Machine learning (ML) has also been proposed
for identifying function entry points [11, 66, 68], but this approach
requires a sufficiently large labelled training set, which is currently
not available for IoT peripheral binaries. A semantics-based ap-
proach was used in Jima [3] for ELF x86/x86-64, which employs
techniques for computing jump tables that are similar to those used
in argXtract for computing table branch addresses. To the best of
our knowledge, we are the first to employ the techniques we have
described in this work for identifying the application code base,9
the .data segment, as well as several sources of inline data. The
inline data identification employed by argXtract also improves
the performance of function identification (as we have shown in
§4) and subsequent tracing.
Function matching and labelling: One approach for function
pattern matching is to compute statistical similarities between in-
struction sequences of functions [46, 54], but this may suffer poor
performance due to compiler-introduced variations and optimi-
sations [17]. Dynamic similarity testing via function execution
was employed in [30]. While this is in some ways similar to our
approach, argXtract looks for functional equivalence based on
known function behaviour, while [30] considers function similar-
ity based on random executions. Most current approaches favour
ML techniques [49, 58, 68, 89] but, as mentioned previously, this
requires large training sets.
9Similar to our approach, Wen et al. [87] also use vector table entries as one input to
compute the application code base, but without considering default handlers as we do.
Security analysis and patching of IoT firmware: Large-scale
security analyses of embedded firmware files, predominantly Linux
and VxWorks-based, were presented in [24, 25]. FIE [28], built from
the KLEE symbolic execution engine, identifies vulnerabilities in
embedded MSP430 firmware. Firmalice [69] detects authentication
bypass vulnerabilities within the firmware of Linux and VxWorks-
based binaries. FirmFuzz [73] specifically targets IoT firmware and
is intended for security analysis. It uses QEMU and targets un-
stripped Linux-based binaries. These works analyse binaries that
target at least pared-down versions of fully-fledged operating sys-
tems. They would not be suitable for analysing stripped firmware of
embedded devices that do not have a proper OS. InternalBlue [48]
enables testing and patching of Broadcom Bluetooth firmware,
while LightBlue [88] analyses and performs debloating of unneeded
Bluetooth profiles and HCI commands within firmware to reduce
the potential attack surface. The randomness of RNGs used in Blue-
tooth chipsets was measured via firmware analysis in [82].
BLE configuration security analysis: On the BLE front, previ-
ous works have explored the security and privacy configurations of
BLE peripherals by analysing devices [6, 27, 72, 84], and mobile ap-
plications [70, 94]. However, device analysis is expensive and may
not directly provide indications about higher-layer security, while
mobile applications do not provide insights about low-level pairing
mechanisms. Multi-faceted analysis of BLE fitness trackers, in terms
of configuration and behaviour, was performed in [23, 26, 39].
Independently to us, Wen et al. [87] developed a tool named
FirmXRay that identifies BLE link layer configuration vulnerabil-
ities by targeting supervisor calls on Nordic and ICalls on Texas
Instruments BLE binaries. To compare argXtract and FirmXRay,
we executed them against a random subset of 300+ binaries from
the FirmXRay dataset. We found that a direct comparison was not
possible due to insufficient information within FirmXRay’s output
data structures (further details provided in Appendix C). In general,
while FirmXRay is geared towards BLE vulnerabilities, our work is
capable of handling generic analysis of any technology that targets
ARM Cortex-M binaries. Further, FirmXRay only handles supervi-
sor calls and ICalls, whereas argXtract performs function pattern
matching to identify any function (provided the requisite artefacts
can be identified within memory/registers). The template-based
approach used in our framework also enables easy addition of new
test functions. Within the BLE analysis, Wen et al. [87] have con-
fined the discussion to link layer vulnerabilities, while we discuss
application layer issues as well.
9 CONCLUSION
In this work, we present argXtract, a framework for performing
partial-knowledge automated analyses of stripped IoT binaries,
to extract security-relevant configuration information from ARM
Cortex-M firmware. argXtract overcomes the challenges inherent
to the analysis of stripped Cortex-M binaries and enables bulk
processing of IoT peripheral firmware files. We use argXtract
to extract configurations from three datasets: Nordic Bluetooth
Low Energy (BLE) binaries, STMicroelectronics BlueNRG binaries,
and Nordic ANT binaries. Our results reveal widespread lack of
protection for data, inconsistent data access controls and serious
privacy vulnerabilities.
872argXtract: Automated Analysis of Stripped IoT Binaries
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
ACKNOWLEDGMENTS
This research has been partially sponsored by the Engineering and
Physical Sciences Research Council (EPSRC) and the UK govern-
ment as part of the Centre for Doctoral Training in Cyber Security
at Royal Holloway, University of London (EP/P009301/1).
REFERENCES
[1] Kevin Allix, Tegawendé F Bissyandé, Jacques Klein, and Yves Le Traon. 2016.
Androzoo: Collecting Millions of Android Apps for the Research Community. In
Proceedings of the 13th International Conference on Mining Software Repositories.
ACM, 468–471.
[2] Sergi Alvarez. 2021. radare2. https://github.com/radareorg/radare2.
[3] Jim Alves-Foss and Jia Song. 2019. Function boundary detection in stripped
binaries. In Proceedings of the 35th Annual Computer Security Applications
Conference. 84–96.
[4] Dennis Andriesse, Asia Slowinska, and Herbert Bos. 2017. Compiler-agnostic
function detection in binaries. In 2017 IEEE European Symposium on Security and
Privacy (EuroS&P). IEEE, 177–189.
[5] Manos Antonakakis, Tim April, Michael Bailey, Matt Bernhard, Elie Bursztein,
Jaime Cochran, Zakir Durumeric, J Alex Halderman, Luca Invernizzi, Michalis
Kallitsis, et al. 2017. Understanding the Mirai botnet. In 26th USENIX security
symposium (USENIX Security 17). 1093–1110.
[6] Daniele Antonioli, Nils Ole Tippenhauer, and Kasper Rasmussen. 2020. Key
Negotiation Downgrade Attacks on Bluetooth and Bluetooth Low Energy. ACM
Trans. Priv. Secur. 23, 3, Article 14 (June 2020).
[7] ARM. 2012. Supervisor calls. Available:
https://developer.arm.com/documentation/dui0471/g/handling-processor-
exceptions/supervisor-calls [Accessed: 28 July 2020].
[8] ARM. 2016. Calling SVCs from an application. Available:
https://developer.arm.com/documentation/dui0471/m/handling-processor-
exceptions/calling-svcs-from-an-application [Accessed: 28 July 2020].
[9] Arm. 2020. Record shipments of Arm-based chips in previous quarter. Available:
https://www.arm.com/company/news/2020/02/record-shipments-of-arm-
based-chips-in-previous-quarter [Accessed: 28 June 2020].
[10] ARM. 2021. Vector table. Available:
https://developer.arm.com/documentation/dui0552/a/the-cortex-m3-
processor/exception-model/vector-table [Accessed: 03 July 2020].
[11] Tiffany Bao, Jonathan Burket, Maverick Woo, Rafael Turner, and David Brumley.
2014. BYTEWEIGHT: Learning to recognize functions in binary code. In 23rd
USENIX Security Symposium (USENIX Security 14). 845–860.
[12] Johannes K Becker, David Li, and David Starobinski. 2019. Tracking anonymized
Bluetooth devices. Proceedings on Privacy Enhancing Technologies (2019), 50–65.
[13] Fabrice Bellard. 2005. QEMU, a fast and portable dynamic translator.. In USENIX
Annual Technical Conference, FREENIX Track, Vol. 41. 46.
[14] Bluetooth Special Interest Group. 2019. 2019 Bluetooth Market Update.
Available: https://www.bluetooth.com/bluetooth-resources/2019-bluetooth-
market-update [Accessed 01-Feb-2021].
[15] Bluetooth Special Interest Group. 2019. Bluetooth Core Specification v5.2.
[16] Bluetooth Special Interest Group. 2019. Intro to Bluetooth Low Energy.
Available: https://www.bluetooth.com/bluetooth-resources/intro-to-bluetooth-
low-energy/ [Accessed: 27 July 2020].
[17] Martial Bourquin, Andy King, and Edward Robbins. 2013. Binslayer: accurate
comparison of binary executables. In Proceedings of the 2nd ACM SIGPLAN
Program Protection and Reverse Engineering Workshop. 1–10.
[18] David Brumley, Ivan Jager, Thanassis Avgerinos, and Edward J Schwartz. 2011.
BAP: A binary analysis platform. In International Conference on Computer Aided
Verification. Springer, 463–469.
[19] Guillaume Celosia and Mathieu Cunche. 2019. Saving private addresses: an
analysis of privacy issues in the bluetooth-low-energy advertising mechanism.
In Proceedings of the 16th EAI International Conference on Mobile and Ubiquitous
Systems: Computing, Networking and Services. 444–453.
[20] Daming D Chen, Maverick Woo, David Brumley, and Manuel Egele. 2016.
Towards Automated Dynamic Analysis for Linux-based Embedded Firmware. In
NDSS, Vol. 16. 1–16.
[21] Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun Zuo, Zhiqiang Lin,
XiaoFeng Wang, Wing Cheong Lau, Menghan Sun, Ronghai Yang, and Kehuan
Zhang. 2018. IoTFuzzer: Discovering Memory Corruptions in IoT Through
App-based Fuzzing.. In NDSS.
[22] Richard Chirgwin. 2016. Finns chilling as DDoS knocks out building control
system. Available: https://www.theregister.com/2016/11/09/finns_chilling_as_
ddos_knocks_out_building_control_system. [Accessed: 11 June 2020].
[23] Jiska Classen, Daniel Wegemer, Paul Patras, Tom Spink, and Matthias Hollick.
2018. Anatomy of a vulnerable fitness tracking system: Dissecting the Fitbit
cloud, app, and firmware. Proceedings of the ACM on Interactive, Mobile,
Wearable and Ubiquitous Technologies 2, 1 (2018), 1–24.
[24] Andrei Costin, Jonas Zaddach, Aurélien Francillon, and Davide Balzarotti. 2014.
A large-scale analysis of the security of embedded firmwares. In 23rd USENIX
Security Symposium (USENIX Security 14). 95–110.
[25] Andrei Costin, Apostolis Zarras, and Aurélien Francillon. 2016. Automated
dynamic firmware analysis at scale: a case study on embedded web interfaces. In
Proceedings of the 11th ACM on Asia Conference on Computer and
Communications Security. 437–448.
[26] Britt Cyr, Webb Horn, Daniela Miao, and Michael Specter. 2014. Security
Analysis of Wearable Fitness Devices (Fitbit). Massachusetts Institute of
Technology (2014).
[27] Aveek K Das, Parth H Pathak, Chen-Nee Chuah, and Prasant Mohapatra. 2016.
Uncovering privacy leakage in BLE network traffic of wearable fitness trackers.
In Proceedings of the 17th International Workshop on Mobile Computing Systems
and Applications. 99–104.
[28] Drew Davidson, Benjamin Moench, Thomas Ristenpart, and Somesh Jha. 2013.