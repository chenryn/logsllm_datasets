title:Improving Brumley and Boneh timing attack on unprotected SSL implementations
author:Onur Aciiçmez and
Werner Schindler and
Çetin Kaya Koç
Improving Brumley and Boneh Timing Attack
on Unprotected SSL Implementations
Onur Acıic¸mez
Oregon State University
Corvallis, USA
PI:EMAIL
PI:EMAIL
Werner Schindler
Bundesamt f¨ur Sicherheit
in der Informationstechnik
Bonn, Germany
C¸ etin K. Koc¸
Oregon State University
Corvallis, USA
PI:EMAIL
ABSTRACT
Since the remarkable work of Kocher [7], several papers con-
sidering di(cid:11)erent types of timing attacks have been pub-
In 2003, Brumley and Boneh presented a timing
lished.
attack on unprotected OpenSSL implementations [2].
In
this paper, we improve the e(cid:14)ciency of their attack by a
factor of more than 10. We exploit the timing behavior
of Montgomery multiplications in the table initialization
phase, which allows us to increase the number of multi-
plications that provide useful information to reveal one of
the prime factors of RSA moduli. We also present other
improvements, which can be applied to the attack in [2].
Categories and Subject Descriptors
E.3 [Data Encryption]: [Public key cryptosystems, Code
breaking]
General Terms
Security
Keywords
side-channel cryptanalysis, timing attacks, RSA
1.
INTRODUCTION
Several timing attacks have been developed against spe-
ci(cid:12)c RSA implementations since the introduction of side
channel cryptanalysis in [7]. For example, [7] and [5] de-
scribe timing attacks on RSA implementations which do
not utilize Chinese Remainder Theorem (CRT). These at-
tacks were generalized and optimized by advanced stochastic
methods (cf. [9, 11, 12]). In particular, the e(cid:14)ciency of the
attack from [5] could be increased by a factor of 50. Since
these attacks cannot be applied to RSA implementations
that use CRT, it had been thought for years that RSA-CRT
was immune to timing attacks.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’05, November 7–11, 2005, Alexandria, Virginia, USA.
Copyright 2005 ACM 1-59593-226-7/05/0011 ...$5.00.
However, in [10], a new and e(cid:14)cient attack on RSA im-
plementations that use CRT with Montgomery’s multiplica-
tion algorithm was introduced. Under optimal conditions, it
takes about 300 timing measurements to factorize 1024-bit
RSA moduli. We note that these attacks can be prevented
by blinding techniques (see [7], Sect. 10).
Typical targets of timing attacks are the security features
in smart cards. Despite of Bleichenbacher’s attack ([1]),
which (e.g.)
exploited weak implementations of the SSL
handshake protocol, the vulnerability of RSA implementa-
tions running on servers was not known until Brumley and
Boneh performed a timing attack over a local network in
2003 ([2]). They mimicked the attack introduced in [10] to
show that RSA implementation of OpenSSL [14], which is
the most widely used open source crypto library, was not
immune to such attacks. Although blinding techniques for
smart cards had already been ‘folklore’ for years, various
crypto libraries that were used by SSL implementations did
not apply these countermeasures at that time ([2]).
In this paper, we propose a timing attack, which is an
improvement of [2] by a factor of more than 10. All of these
timing attacks ([7, 5, 9, 10, 2]) including the one presented
in this paper can be prevented by base blinding or expo-
nent blinding. However, it is always desirable to understand
the full risk potential of an attack in order to con(cid:12)rm the
trustworthiness of existing or, if necessary, to develop more
secure and e(cid:14)cient countermeasures and implementations.
Our attack exploits the peculiarity of the sliding win-
dows exponentiation algorithm and, independently, suggests
a general improvement of the decision strategy. Although it
is di(cid:14)cult to compare the e(cid:14)ciency of attacks performed
in di(cid:11)erent environments (cf.
[2]), it is obvious that our
new attack improves the e(cid:14)ciency of Brumley and Boneh’s
attack by a factor of more than 10.
Our paper is organized as follows: x2 gives brief review
of Chinese Remainder Theorem and Montgomery multipli-
cation algorithm. Mathematical background of the previous
and the new attack is explained in x3, 4, and 5.
In x6,
implementation details are addressed, and x7 compares the
experimental results with those from the attack in [2]. We
conclude our paper in x8.
2. BACKGROUND
In this section, we explain some algorithms that are com-
monly used in RSA-CRT implementations. Our attack, as
well as [2], exploits the timing characteristics of the algo-
rithms described here.
2.1 Chinese Remainder Theorem (CRT)
Most of the RSA implementations use Chinese Remainder
Theorem (CRT) to compute yd(mod n). CRT reduces the
computation time by about 75%, compared to a straight-
forward exponentiation. We have n = pq and use the no-
tation dp = d(mod (p (cid:0) 1)) and dq = d(mod (q (cid:0) 1)). The
algorithm is described in Figure 1 with suitable constants
b1 and b2. We point out that Step 3 can be calculated more
e(cid:14)ciently by (xq (cid:0) xp)(p(cid:0)1(mod q))p + xp(mod n) (cf.
[8])
which is yet not relevant for our purposes.
2.2 Montgomery Multiplication
Montgomery Multiplication (MM) is the most e(cid:14)cient al-
gorithm to compute modular multiplications during a modu-
lar exponentiation. It uses additions and divisions by powers
of 2, which can be accomplished by shifting the operand to
the right, to calculate the result. Since it eliminates time
consuming integer divisions, the e(cid:14)ciency of the algorithm
is very high.
Montgomery Multiplication is used to calculate
Z = abR(cid:0)1 (mod n);
where R is a constant power of 2, R > n, and R(cid:0)1 is the
inverse of R in modulo n. A conversion to and from n-
residue format is required to use this algorithm. Hence, it is
more attractive to use it for repeated multiplications on the
same residue, just like modular exponentiations. Figure 2
shows the steps of Montgomery Multiplication Algorithm.
The conditional subtraction s(cid:0) n is called ‘extra reduction’.
Since the operand size of the arithmetic operations can
simply be assumed to be constant during RSA exponenti-
ation, the time required to perform integer operations in
MM can also be assumed to depend only on the constants n
and R but not on the operands a and b. This assumption is
very reasonable for smart cards whereas software implemen-
tations may process small operands (i.e., those with leading
zero-words) faster due to optimizations of the integer mul-
tiplication algorithm. In fact, this is the case for many SSL
implementations which complicates the attack described in
[2] and ours. (Both attacks are chosen-input attacks where
small operands occur.) Under the simplifying assumption
from above, we can conclude that T ime(M M (a; b; n)) 2
fc; c+cERg, where T ime(M M (a; b; n)) is the execution time
of the multiplication MM(a,b;n). The Montgomery opera-
tion requires a processing time of c + cER i(cid:11) the extra re-
duction has to be carried out.
Figure 3 explains how Montgomery’s multiplication algo-
rithm can be combined with arbitrary modular exponentia-
tion algorithms to compute yd( mod n). Of course, in Phase
2a and 2b modular squarings and multiplications have to be
replaced by the respective Montgomery operations.
3. GENERAL IDEA OF A TIMING ATTACK
ON RSA-CRT
The di(cid:11)erent attacks [10] and [2] exploit the timing be-
havior of the Montgomery multiplications in Phase 2b of the
modular exponentiation (cf. Figure 3). We can interpret the
execution time of the ith Montgomery operation in Phase 2b
(squaring or a multiplication by a table value) as a realiza-
tion of the random variable c + Wi (cid:1) cER where W1; W2; : : :
denotes a sequence of f0; 1g-valued random variables. The
stochastic process W1; W2; : : : has been studied in detail in
[9, 10, 12]. We merely mention that
1
3
(cid:22)yj
n
n
R
n
R
1
2
for M M (temp; temp; n)
for M M (temp; (cid:22)yj; n):
(1)
E(Wi) = 
where (cid:22)yj and temp denote a particular table entry and an
intermediate result during the exponentiation, respectively.
‘E((cid:1))’ denotes the expectation of a random variable. The
timing behavior of the Montgomery operations in Phase 2a)
can similarly be described by a process W 01; W 02; : : :.
When applying the CRT, (1) indicates that the probabil-
ity of an extra reduction during a Montgomery multiplica-
tion of the intermediate result temp with (cid:22)y1;p = yR ( mod p)
in Step 1 (resp. with (cid:22)y1;q = yR (mod q) in Step 2) is linear
in (cid:22)y1;p=p (resp.
linear in (cid:22)y1;q=q). Note that the message
(u (cid:3) R(cid:0)1)( mod n) corresponds to the value u during the ex-
ponentiation, because the messages are multiplied by R to
convert them into Montgomery form.
If the base of the
exponentiation is y := uR(cid:0)1(mod n), then (cid:22)y1;p = yR (cid:17)
u (mod p) and (cid:22)y1;q = yR (cid:17) u (mod q). The same equation
also implies that the same probability does not depend on
y during the squarings.
For 0  n then s = s (cid:0) n
( = MM(a,b;n) )
return s
Figure 1: RSA with CRT
Figure 2: Montgomery Multiplication Algorithm


1.) (cid:22)y1 := M M (y; R2; n)
2.) Modular Exponentiation Algorithm
a) table initialization (if necessary)
b) exponentiation phase
(= yR (mod n))
3.) Return MM(temp,1;n)
( =yd(mod n) )
Figure 3: Modular Exponentiation with Mont-
gomery’s Algorithm
e.g. q, bit by bit. We use the fact that if the interval (u1,
u2], i.e., the integers in fu1 + 1, u1 + 2, ..., u2g, contains
a multiple of q, i.e., in case of Case B or C, then T(u1) -
T(u2) will be smaller than cER log2(n)pn=16R. Let say the
attacker already knows that q is in (u1, u2] (after checking
several intervals; = Phase 1 of the attack) and trying to
reduce the search space. In Phase 2 the decision strategy
becomes:
1. Split the interval into two equal parts: (u1, u3] and
(u3, u2], where u3 = b(u1 + u2)=2c. As usual, bzc
denotes the largest integer that is (cid:20) z.
2. If T (u3) (cid:0) T (u2) < cER log2(n)pn=16R decide that q
is in (u3, u2], otherwise in (u1, u3].
3. Repeat the (cid:12)rst steps until the (cid:12)nal interval becomes
small enough to factorize n using the Euclidean algo-
rithm
At any time within Phase 2 the attacker can check whether
her previous decisions have been correct. To con(cid:12)rm that
an interval really contains q the attacker applies the decision
rule to similar but di(cid:11)erent intervals, e.g., (u1 + 1, u2 (cid:0) 1],
and con(cid:12)rms the interval if they yield the same decision.
In fact, it is su(cid:14)cient to recover only the upper half of the
bit representation of either p or q to factorize n by applying
a lattice-based algorithm [4].
Under ideal conditions (no measurement errors) this at-
tack requires about 300 time measurements to factorize a
1024-bit RSA modulus n (cid:25) 0:7 (cid:1) 21024, if square and multi-
ply algorithm is used. In Phase 2 of the attack, each decision
essentially recovers one further bit of the binary represen-
tation of one prime factor. The details and analysis of this
attack can be found in [10].
4. OVERVIEW OF BRUMLEY AND BONEH
ATTACK
We explain the attack of [2], which will be refered as BB-
attack from here on, and ours in the following two sections
along with a discussion of the advantages of our attack over
the other.
RSA implementation of OpenSSL employs Montgomery
Multiplication, CRT, and Sliding Window Exponentiation
(SWE) with a window size, denoted by wsize, of 5. SWE
algorithm processes the exponent d by splitting it into odd
windows of at most wsize consecutive bits (i.e. in substrings
of length (cid:20) wsize having odd binary representation), where
the windows are not necessarily consecutive and may be
separated by zero bits.
It requires a preprocessing phase,
i.e., table initialization, to compute odd powers of the base
y so that many multiplications can be combined during the
exponentiation phase.
The modulus n is 1024-bit number, which is the product of
two 512-bit primes p and q. Considering one of these primes,
say q, the computation of ydq
q (mod q) requires 511 Mont-
gomery operations of type M M (temp; temp; q) (‘squarings’)
and approximately (511 (cid:1) 31)=(5 (cid:1) 32) (cid:25) 99 multiplications
with the table entries during the exponentiation phase of
SWE (cf. Table 14.16 in [8]). Consequently, in average
(cid:25) 6:2 multiplications are carried out with the table entry
(cid:22)y1;q.
BB-Attack exploits the multiplications M M (temp; (cid:22)y1;q; q)
that are carried out in the exponentiation phase of SWE. Let
assume that the attacker tries to recover q = (q0; :::; q511)
and already obtained (cid:12)rst, i.e. most signi(cid:12)cant, k bits. To
guess qk, the attacker generates g and ghi, where g =
(q0; :::; qk(cid:0)1; 0; 0; :::; 0) and ghi = (q0; :::; qk(cid:0)1; 1; 0; 0; :::; 0).
Note that there are two possibilities for q: g < q < ghi
(when qk = 0) or g < ghi < q (when qk = 1). She determines
the decryption time t1 = T (g) = T ime(ud
g mod n) and t2 =
T (ghi) = T ime(ud
ghi mod n), where ug = g (cid:3) R(cid:0)1(mod n)
and ughi = ghi (cid:3) R(cid:0)1(mod n). If qk is 0, then jt1 (cid:0) t2j must
be \large". Otherwise jt1 (cid:0) t2j must be close to zero, which
implies that qk is 1. The message ug (ughi resp.) corre-
sponds to the value g (ghi resp.) during the exponentia-
tions, because of the conversion into Montgomery form. BB-
attack does not only compare the timings for gR(cid:0)1(mod n)
and ghiR(cid:0)1(mod n) but uses the whole neighborhoods of
g and ghi, i.e., N (g; N ) = fg; g + 1; : : : ; g + N (cid:0) 1g and
N (ghi; N ) = fghi; ghi + 1; : : : ; ghi + N (cid:0) 1g, respectively.
The parameter N is called the neighborhood size. For de-
tails, the reader is referred to [2].
5. DETAILS OF OUR APPROACH
Only about 6 from ca. 1254 many Montgomery operations
performed in RSA exponentiation provide useful informa-
tion for BB-attack. On the other hand, the table initial-
ization phase of the exponentiation in modulo q requires 15
Montgomery multiplications with (cid:22)y2. Therefore, we exploit
these operations in our attack. In fact, let R05 = 2256 =
pR, the square root of R over the integers. Clearly, for in-
put y = u(R05)(cid:0)1(mod n) (inverse in the ring Zn) we have
(cid:22)y2;q = M M ((cid:22)y1; (cid:22)y1; q) = u(R05)(cid:0)1u(R05)(cid:0)1R
(cid:17) u2(mod q):
(2)
Instead of N (g; N ) and N (ghi; N ) we consequently consider
the neighborhoods N (h; N ) = fh; h + 1; : : : ; h + N (cid:0) 1g and
N (hhi; N ) = fhhi; hhi + 1; : : : ; hhi + N (cid:0) 1g, resp., where
h = bpgc and hhi = bpghic:
(3)
To be precise, we consider input values y = u(R05)(cid:0)1( mod