### Evaluation of BASESPEC

#### A. Experimental Setup

**Dataset:**
We obtained firmware images from a third-party website [62], as detailed in §IV-A. We downloaded the latest and oldest firmware images from Vendor1, one of the top three baseband chipset vendors. The device models of these firmware images are officially supported by the vendor as of July 1, 2020, as listed in Table IV. We selected the latest and oldest versions because they exhibit the most significant differences, allowing us to effectively demonstrate BASESPEC's applicability across diverse versions and models (§VII-D). Additionally, we applied BASESPEC to another leading vendor, Vendor2 (§VII-E).

**Specification:**
Among the various releases of the specification, we chose Release 15, which was finalized on March 22, 2019. This version is stable and complete, as development for this release has concluded [2]. The specific versions of the specifications used are listed in Table I.

**Machine:**
All experiments were conducted on a server with an Intel Core i7-6700K processor at 4.00 GHz, 64 GB DDR4 RAM, and a 2 TB SSD, running Windows 10.

#### B. Comparative Analysis Results

Table IV summarizes the mismatches identified by BASESPEC. In total, BASESPEC discovered hundreds of mismatches, indicating that the decoder does not fully comply with the specifications. Specifically, BASESPEC extracted 277 standard L3 messages from the specification and compared them with the messages implemented in the binary (as shown in the "# of msgs" column). For each message, BASESPEC checks for three types of mismatches: Missing, Unknown, and Invalid. These mismatches are categorized separately for imperative IEs (i-IE) and non-imperative IEs (n-IE) due to their different implications.

**Missing & Unknown IEs:**
BASESPEC identified several missing IEs, which are unimplemented in the firmware binaries (see "Missing" in Table IV). Theoretically, the baseband firmware should implement every IE in the specification to support all defined functionalities. While non-imperative IEs are optional, imperative IEs must be present in a message; otherwise, the baseband cannot correctly decode benign messages, leading to degraded cellular service quality. Additionally, BASESPEC found numerous unknown IEs that are not defined in the specification (see "Unknown" in Table IV). These unknown IEs may result from incorrect implementations by developers. For example, if a developer mistakenly enters an incorrect IEI (IE identifier), BASESPEC will identify the intended IE as missing and the incorrectly identified IE as unknown. Such mismatches can help locate functional errors that violate the specification.

**Invalid IEs:**
BASESPEC also reported that hundreds of IEs are incorrect according to the specification (see "Invalid" in Table IV). An IE consists of three parts: IEI, LI, and value. The decoder function uses only IEI and LI to validate a message and then passes it to a message-specific handler. BASESPEC identifies incorrect IEIs as unknown mismatches and reports IEs with incorrect LIs as invalid mismatches. Invalid IEs suggest that improper messages may be delivered to the handler function, potentially leading to critical memory corruption vulnerabilities. For instance, the E6 bug, described in §VIII, incorrectly assumes the maximum length of an IE, resulting in a buffer overflow that can be exploited for remote code execution (RCE).

**Syntactic vs. Semantic Mismatches:**
BASESPEC employs both syntactic and semantic comparison methods, which are complementary and essential. Syntactic comparison is more effective in identifying missing and unknown IEs, while semantic comparison excels in discovering invalid IEs (see the "Syntactic-only Mismatch" and "Semantic-only Mismatch" columns). The unusual number of mismatches in Model H and I firmware will be discussed below. Both methods help in identifying different error cases and their explicit causes. For example, syntactic mismatches helped pinpoint developers' mistakes regarding imperative IEs without LIs, which cannot be detected by semantic analysis (§V-D). Furthermore, the numerous invalid IEs in the semantic comparison revealed abnormal handling of IE lengths in the decoder function, inconsistent with the binary-embedded structures used for syntactic comparison. This led to the discovery of overflow vulnerabilities in handler functions. Thus, these two methods are mutually complementary.

**False Positives:**
BASESPEC produced false positive results for two main reasons: limited support for the ARM architecture in angr and exceptional message structures in the baseband implementation. First, the semantic analysis could not fully process the Model H and I firmware, resulting in an unusually high number of mismatches (see the "Semantic-only Mismatch" column). We observed that their binaries...