title:ReDMArk: Bypassing RDMA Security Mechanisms
author:Benjamin Rothenberger and
Konstantin Taranov and
Adrian Perrig and
Torsten Hoefler
ReDMArk: Bypassing RDMA Security Mechanisms
Benjamin Rothenberger, Konstantin Taranov, Adrian Perrig, and 
Torsten Hoefler, ETH Zurich
https://www.usenix.org/conference/usenixsecurity21/presentation/rothenberger
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.ReDMArk: Bypassing RDMA Security Mechanisms
Benjamin Rothenberger∗, Konstantin Taranov∗, Adrian Perrig, and Torsten Hoeﬂer
Department of Computer Science, ETH Zurich
Abstract
State-of-the-art remote direct memory access (RDMA) tech-
nologies such as InﬁniBand (IB) or RDMA over Converged
Ethernet (RoCE) are becoming widely used in data center
applications and are gaining traction in cloud environments.
Hence, the security of RDMA architectures is crucial, yet po-
tential security implications of using RDMA communication
remain largely unstudied. ReDMArk shows that current se-
curity mechanisms of IB-based architectures are insufﬁcient
against both in-network attackers and attackers located on
end hosts, thus affecting not only secrecy, but also integrity of
RDMA applications. We demonstrate multiple vulnerabilities
in the design of IB-based architectures and implementations
of RDMA-capable network interface cards (RNICs) and ex-
ploit those vulnerabilities to enable powerful attacks such as
packet injection using impersonation, unauthorized memory
access, and Denial-of-Service (DoS) attacks. To thwart the dis-
covered attacks we propose multiple mitigation mechanisms
that are deployable in current RDMA networks.
1 Introduction
In recent years, numerous state-of-the-art systems started to
leverage remote direct memory access (RDMA) primitives as
a communication mechanism that enables high performance
guarantees and resource utilization. Deployments in public
clouds, such as Microsoft Azure and IBM Cloud, are becom-
ing available and an increasing number of systems make use
of RDMA for high-performance communication [8,11,18,28].
However, the design of RDMA architectures is mainly fo-
cused on performance rather than security. Despite the trend
of using RDMA, potential security implications and dangers
that might be involved with using RDMA communication in
upper layer protocols remain largely unstudied. For example,
RFC 5042 [30] analyzes basic security issues and potential
attacks in RDMA-based implementations, but lacks an in-
depth analysis of state-of-the-art RDMA architectures and
implementations.
∗These authors contributed equally to this work.
Current RDMA technologies include multiple plaintext
access tokens to enforce isolation and prevent unauthorized
access to system memory. As these tokens are transmitted
in plaintext, any entity that obtains or guesses them can read
and write memory locations that have been exposed by using
RDMA on any machine in the network, compromising not
only secrecy but also integrity of applications. To avoid com-
promise of these access tokens, RDMA architectures rely on
isolation and the assumption that the underlying network is a
well-protected resource. Otherwise, an attacker that is located
on the path between two communicating parties (e.g., bugged
wire or malicious switch) can eavesdrop on access tokens of
bypassing packets.
Unfortunately, encryption and authentication of RDMA
packets (e.g., as proposed by Taranov et al. [36]) is not part of
current RDMA speciﬁcations. While IPsec transport recently
became available for RoCE trafﬁc, the IPsec standard does
not support InﬁniBand trafﬁc. Furthermore, application-level
encryption (e.g., based on TLS) is not possible since RDMA
operations can be handled without involvement of the CPU.
As TLS cannot support purely one-sided communication rou-
tines, the applications would need to store packets in a buffer
before decryption, completely negating RDMA’s performance
advantages. We discuss these potential mitigation techniques
to secure RDMA in more detail in §7.3.
In this work, we analyze current security mechanisms of
RDMA architectures based on InﬁniBand (IB) such as native
InﬁniBand and RDMA over converged Ethernet (RoCE) ver-
sions 1 and 2. ReDMArk reveals multiple vulnerabilities and
ﬂaws in the design of InﬁniBand, but also in implementations
of several RDMA-capable network interface cards (RNICs)
by Mellanox and Broadcom. These vulnerabilities enable
powerful attacks on RDMA networks, such as unauthorized
memory access or breaking of existing connections based on
packet injection. To show the feasibility of the discovered at-
tacks in practice, we implemented an attack framework, that is
able to inject bogus packets into the network and impersonate
other endpoints to corrupt the memory state of remote end-
points. For each of the discovered attacks, we discuss potential
USENIX Association
30th USENIX Security Symposium    4277
long-term mitigation mechanisms. In addition, we propose
short-term mitigations that can be deployed in today’s RDMA
networks before the long-term mitigations become available.
Finally, we assess the vulnerability of open-source systems
that rely on RDMA for high-performance communication
against the discovered attacks.
2 Remote Direct Memory Access
RDMA enables direct data access on remote machines across
a network. Memory accesses are ofﬂoaded to dedicated hard-
ware and can be processed without involvement of the CPU
(and context switches). Using RDMA read and write requests
application data is read from/written to a remote memory ad-
dress and directly delivered to the network, reducing latency
and enabling fast message transfer. RDMA can also enable
one-sided operations, where the CPU at the target node is not
notiﬁed of incoming RDMA requests.
Even though several network architectures support RDMA,
in this work we focus on the most widely used interconnects
for RDMA: InﬁniBand (IB) [3] and RDMA over Converged
Ethernet (RoCE) [4]. InﬁniBand is a network architecture
speciﬁcally designed to enable reliable RDMA and deﬁnes its
own hardware and protocol speciﬁcation. RoCE is an exten-
sion to Ethernet to enable RDMA over an Ethernet network
and exists in two versions. RoCEv1 uses the IB routing header,
whereas RoCEv2 uses UDP/IP for routing. Even though this
work focuses on IBA and RoCE, the proposed attacks could
also be extended to other RDMA architectures.
2.1 RDMA packet format
The RDMA packet header consists of a routing header and
a base transport header (see Figure 1). The routing header
contains the source and destination ports, that identify link
layer endpoints. The IB protocol uses the IB link layer proto-
col as a data link, whereas RoCE relies on Ethernet. RoCEv1
encapsulates an IB packet, including its IB routing header,
into an Ethernet frame. RoCEv2 is designed as an Internet
layer protocol and uses a UDP/IP header for routing.
All data communication in RDMA is based on queue pair
(QP) connections between the two communicating parties.
QPs are a bi-directional message transport mechanism used
to send and receive data in InﬁniBand. Endpoints in RDMA
are identiﬁed by the combination of an adapter port address
and a queue pair number (QPN), a unique identiﬁer of a QP
connection within destination port. For all QP endpoints at a
destination port, the RNIC generates a unique QPN.
InﬁniBand Architecture Security Model
2.2
Processing of incoming packets is based on the base transport
header that contains the destination QPN and also a packet
sequence number (PSN). The PSN is used to enforce in-order
delivery and detect duplicate or lost packets. Packets with
Figure 1: General format of an RDMA packet.
invalid QPN or PSN are dropped without any notiﬁcation to
the receiving application.
To detect errors that may have been introduced during the
transmission, each packet contains two checksums that are
checked by the receiving node. The checksum algorithms are
deﬁned in the IB speciﬁcation and use pre-deﬁned seeds.
In addition to packet integrity checks, IBA deﬁnes three
memory protection mechanisms to restrict unauthorized ac-
cess to local memory by remote entities: Memory Regions,
Memory Windows, and Protection Domains (PD) [37]. These
mechanisms allow enforcing memory access restrictions (e.g.,
the application allows reads, but no writes to a memory re-
gion).
Memory Regions. To access host memory, the RNIC ﬁrst
allocates the memory region, which involves copying page
table entries of the corresponding memory to the memory
management unit of the RNIC. Then, the RNIC creates a
memory region to enforce access restrictions to the memory
such as read-only, write-only, or local-only. Memory regions
can also be reregistered to change its properties or deregis-
tered to destroy its memory mappings.
For each memory region RNIC generates two keys for local
and remote access, namely lkey and rkey. To remotely access a
memory location using RDMA read or write operations, each
packet must include a virtual address and its associated rkey
as depicted in Figure 1. The rkeys are not used in any form of
cryptographic computation, but used as access tokens that are
transmitted in plaintext. The lkeys are not part of the transport
protocol, but used as a local authorization token allowing the
channel adapter to access local memory of an application.
Memory Windows. To allow different access rights
among remote QPs within a memory region or grant access
to a part of the region, IBA makes use of Memory windows
type 1. Memory windows type 2 further extend this protection
mechanism by assigning a single QP to a memory window
and enforcing that only the assigned QP can access it.
Protection Domain. IBA protection domains (PD) group
IB resources such as QP connections and memory regions,
such that QP connections within a PD can only access mem-
ory regions allocated in the same PD, providing protection
from unauthorized or inadvertent use of a memory area. All
QPs and memory regions are always assigned to a speciﬁc
PD and can only be a member of one PD.
4278    30th USENIX Security Symposium
USENIX Association
Routing HeaderBase TransportHeaderInﬁniBand: IB Routing HeaderRoCEv1: Ethernet + IB RHRoCEv2: Ethernet + UDP/IPQueue Pair NumberPacket Sequence NumberRDMAHeaderTarget virtual addressMemory key (rkey)Data LengthPayloadChecksumsTwo integritychecksums3 Adversary Model
In our adversary model we consider three parties (see Fig-
ure 2): an RDMA service which hosts one or several RDMA
applications, a client who interacts with the service through
RDMA, and an adversary who can legitimately connect to the
RDMA service, but tries to violate RDMA’s security mecha-
nisms (e.g., access memory of other clients using RDMA).
We assume that the adversary is located within the same
network as the other parties and consider four different at-
tacker models.
Model T1 . First, we consider an adversary that is located
at a different end host than the victim (off-path) and have
rightfully obtained these hosts (e.g., by renting an instance
in a public cloud). This attacker cannot conduct any network-
based attacks such as packet injection, but can connect to
RDMA services and issue RDMA messages over these con-
nections.
Model T2 . Second, we consider attackers (potentially
off-path) that can actively compromise end hosts and fab-
ricate and inject messages. To successfully inject an arbitrary
RDMA request the adversary must have root administrative
access. The adversary is required to know the host’s address
(local identiﬁer for IBA / IP address for RoCE), QP numbers,
and the PSN to forge a valid RDMA packet. Additionally,
to read or write a memory location on the remote host, the
adversary needs to include a valid virtual memory address
and the corresponding memory protection key rkey.
Model T3 . Third, we consider network-based attackers
where the attacker is located on the path between the victim
and the service. On-path attacks require the attacker to con-
trol routers or links between the victims (e.g., rogue cloud
provider, rogue administrator, malicious bump-in-the-wire de-
vice). A network-based attacker can passively eavesdrop on
messages, but also actively tamper with the communication
between hosts by injecting, dropping, delaying, replaying, or
altering messages. This includes altering and forging any in-
formation in any packet header, including all IB and Ethernet
headers. Since RDMA communication is in plaintext and the
IB protocol does not provide any mechanisms for authenticat-
ing a message to prevent on-path packet alteration, this only
requires recalculation of packet checksums, whose algorithms
and seeds are publicly available in the IBA speciﬁcation.
Model T4 . Finally, we consider an adversary that makes
use of RDMA as a covert channel for exﬁltrating data. For this
purpose, the adversary manipulates code or libraries executed
by the victim (e.g., using malware) such that it establishes an
RDMA connection to an RDMA-capable attacker machine in
the same network as the victim (e.g., by renting an instance
in a public cluster). This allows the adversary to exploit one-
sided RDMA operation to "silently" access memory of the
victim process.
Since both the network and control over a machine are
well protected resources in cloud datacenters, we assume that
Figure 2: Illustration of the adversary model including poten-
tial adversary locations.
these potential attack locations are much harder to achieve
than obtaining or compromising an arbitrary end-host.
4 Security Analysis of IB Architectures
Given the aforementioned adversary model, we analyse exist-
ing security mechanisms in IB-based architectures including
memory protection key generation, QP number generation,
memory regions, memory windows, and protection domains.
We identify 10 vulnerabilities, labeled V1 – V10 .
4.1 Analysis Setup
Our analysis setup includes multiple IB-based architectures
such as native InﬁniBand (IBA), RoCEv1, and RoCEv2. To
execute and evaluate our tests we use a server cluster with
RNICs from Broadcom, Mellanox, and also run tests on Mi-
crosoft Azure HPC instances that support RDMA (A8, A9,
H16r). Additionally, we consider software-based RoCE (soft-
RoCE), a software implementation of RoCE that has been
integrated into the Linux kernel [21]. Table 1 lists the analyzed
devices and summarizes the discovered memory protection
issues.
4.2 Memory Protection Keys
V1 Memory Protection Key Randomness. To protect re-
mote memory against unauthorized memory access, IBA re-
quires that RDMA read/write requests include a remote mem-
ory access key rkey, which is negotiated between communicat-
ing peers and is checked at the remote RNIC. Packets with an
invalid rkey cause a connection error leading to disconnection.
The requirement of including an rkey is built into the silicon
and the driver code cannot be disabled by an attacker. Thus,
to successfully circumvent this protection mechanism against
unauthorized memory access, an attacker needs to include a
valid rkey in his requests.
We analyze the randomness of the rkey generation process
for different RNIC models and drivers. For all tested devices,
rkey generation is independent of the address and length of
the buffer to be registered. Changes in access ﬂags have no
inﬂuence on the generation of an rkey. The generated rkeys
USENIX Association
30th USENIX Security Symposium    4279
  Service BT2RNICRNICT2inject connect sudoT1RNICT1RNICT4Client ARNIC covert channel T3victim connectionadversary connectionon-path adversaryTable 1: Summary of Memory protection issues across different IBA drivers.
Model
Broadcom NetXtreme-E BCM57414
Broadcom Stingray PS225 BCM58802
Mellanox ConnectX-3 MT27500
Mellanox ConnectX-4 MT27700
Mellanox ConnectX-5 MT27800
Mellanox ConnectX-6 Dx MT28841
softRoCE
a for a subsequent registrations
Driver
bnxt_re
bnxt_re
mlx4
mlx5
mlx5
mlx5
rxe
Arch.
Static
Init.
RoCEv2

RoCEv2

IB/RoCEv1 
IB/RoCEv2 
IB/RoCEv2 
RoCEv2

RoCEv2

c seed and states are known
Shared
Gen.







Key Step
QPNs
QP limitd
0x100
0x100
0x100a
randomb
randomb
randomb
0x100 + lfsr-8bitc
sequential
sequential
sequential
sequential
sequential
sequential
sequential
32,707
61,438
261,359
64,443
65,449
262,100
32,707
b has low entropy
d bound by the OS limit on active ﬁle descriptors
only depend on previous registration/deregistration operations.
Further, we investigate how registration/deregistration affects
memory registration.
RNIC models from Broadcom (using the bnxt_re driver)
always increase the rkey value by 0x100 independent of the
previously mentioned factors. The exact algorithm can be
found in Appendix A. Thus, assuming the attacker is able
to obtain an rkey that is part of this series of increasing key
values, predicting preceding or subsequent rkeys is trivial.
For devices based on the mlx4 driver, the sequence of rkeys
depends on registration/deregistration operations. For con-
secutive registration operations each rkey gets incremented
by 0x100. However, after a deregistration operation, the next
rkey gets incremented by 0x80000 based on the rkey for the
memory region that has been deregistered. In case of multiple
consecutive deregistration operations, the rkeys of the dereg-
istered memory regions are queued and for each upcoming
registration operation a key gets dequeued. The algorithm
for key generation can be found in Appendix A. All tested
Azure HPC instances (A8, A9, H16r) use the mlx4 driver and
allocate rkeys with the previously described algorithm.
The software implementation of RoCE, SoftRoCE, also in-
creases the rkey by 0x100 for each registration operation, but
additionally randomizes the last 8 bit using a linear-feedback
shift register (LFSR). However, since LFSRs are determin-
istic and the initial seed is known, all subsequent states are