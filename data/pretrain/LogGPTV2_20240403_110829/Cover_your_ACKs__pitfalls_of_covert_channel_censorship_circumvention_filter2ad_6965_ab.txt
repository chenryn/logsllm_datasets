client and server that utilized this module. Included in the client and
server were modules allowing ﬁne grained control over network
conditions that the censor might want to control, such as latency,
1http://crysp.uwaterloo.ca/software/
CodeTalkerTunnel.html
jitter, packet loss, and packet replay. The client and server ran on
separate machines running Ubuntu 12.10 over a 100 Mbps LAN.
3.2 FreeWave
Due to patent issues there is limited access to the modem speci-
ﬁed in [11], so we rebuilt the modulator based on the speciﬁcations
using a square root raised cosine ﬁlter pulse function to map sym-
bols to the waveform which was then passed through a passband
ﬁlter with center frequency fC. The demodulator only consisted of
shifting the received audio signal by the center frequency fC and
then running it through another square root raised cosine ﬁlter in
order to extract the symbols. Since our experiments were only con-
cerned with the transmission of symbols, the remaining parts of the
modem, including the channel encoder, bit interleaver and QAM
mapper, were omitted. These were implemented in Matlab using
the Communications System Toolbox.
We focused on two main aspects of the functionality of the mo-
dem. First is trafﬁc generation related to packet lengths produced
by sending modem trafﬁc over Skype. To collect this data two
Ubuntu 12.10 virtual machines were started running Skype ver-
sion 4.1.0.20, one machine we’ll designate the client and the other
the server. Once a Skype call was initiated between the client and
server, the client was conﬁgured with pavucontrol 2 to redirect au-
dio from the soundcard to the microphone. Then an audio ﬁle was
played while running tcpdump to collect packet lengths sent from
the client to server during transmission. Along with the audio gen-
erated by the modem, we used samples of speech data from the
Oregon Graduate Institute Center for Speech Learning and Under-
standing’s “22 Language” telephone speech corpus [15]. Samples
longer than 10 seconds were played over Skype while recording the
packet lengths, resulting in a total of 44 samples across 5 languages.
The other metric we are interested in is distortion of the raw sym-
bols being sent by the modem (not to be confused with the actual IP
trafﬁc sent) along with the quality of the underlying audio commu-
niciation. For this we used the SILK SDK 3 which includes tools to
encode and decode audio ﬁles while varying parameters and sim-
ulating certain network conditions, such as packet loss. Using the
codec tools instead of sending the data over Skype gives FreeWave
the best case scenario, removing other noise added by network con-
ditions. In addition this allowed us to collect a much larger sample
size while varying different parameters, producing more accurate
results. Then, to measure the quality of actual audio instead of the
modem, we used a matlab script 4 to measure the MOS of audio
compared to the output from the SILK encoder.
3.3 CensorSpoofer
The main focus of CensorSpoofer were the asynchronous trans-
mission mechanisms. For these experiments a simple client and
server were built where the server would transmit directly to the
client with various forward error correction possibilities. Censor-
Spoofer mimics VoIP clients that use constant bitrate (CBR) codecs
which dictates the trafﬁc patterns. We chose to mimic G.711 which
sends packets of size 190 bytes every 20 milliseconds. In addition
it would simulate various types of packet loss, including burst or
random, along with modules allowing more speciﬁc and targeted
packet loss strategies.
2http://freedesktop.org/software/pulseaudio/
pavucontrol/
3http://cdn.dev.skype.com/upload/SILK_SDK_
SRC_v1.0.9.zip
4http://www.mathworks.com/matlabcentral/
fileexchange/33820-pesq-matlab-wrapper/
3634. DIFFERENTIAL ERROR TOLERANCE
Anonymous communication must guarantee reliable transmis-
sion across its censorship-resilient system. While previous systems
rely on the underlying mechanisms of TCP to guarantee reliable
transmission, SkypeMorph, FreeWave and CensorSpoofer all trans-
mit data over UDP using cover-protocols that have some amount of
error tolerance. This forces those systems to implement their own
mechanisms for reliable transmission, which a censor can interfere
with and effectively block the underlying anonymous communica-
tion while still leaving a usable medium for legitimate trafﬁc.
4.1 Packet Loss Thresholds
The main way a censor can attempt to interfere with anonymous
communication trafﬁc being sent over error tolerant channels is by
inducing some amount of packet loss in an effort to disrupt the
anonymous communication while still allowing legitimate usage of
the cover-protocol. The majority of voice and video communica-
tion systems have various ways of dealing with packet loss, such as
forward error correction and lowering the bitrate of the information
being sent. While what amount of reduced quality due to packet
loss is “acceptable” is an inherently subjective question, here we’ll
cover some work looking at the trade-offs.
To score the quality of a VoIP call the mean opinion score (MOS),
which is the average of a set of subjective rankings on a scale from
1 to 5, where 5 represents the best quality possible. Ding and
Goubran [6] looked at the impact of packet loss rates on the quality
of VoIP communication and how it affected MOS.
Codec
G.729
G.723.1 r63
G.723.1 r53
0% 5% 10% 15% 20%
2.79
4.31
2.76
4.25
4.22
2.74
3.76
3.74
3.71
3.45
3.41
3.37
3.11
3.10
2.99
decode the rest of the data, giving a censor a potential avenue to
interrupt data transfer over FreeWave.
There are several different parameters and modes of operation
that, while not explicitly mentioned in [11], are inherent in the de-
sign of the modem and will effect a censor attempting to cause the
modem to desynchronize. First there is the length of the preamble,
where the longer preambles give the modem a higher probability
of correctly ﬁnding the starting point. Next there is the data frame
length and how many data blocks are transfered. The preamble and
signal parameter blocks could only be sent at the very beginning
when the FreeWave client initiates the connection with the Free-
Wave server and remains in constant communication with null data
being transfered during inactivity. Similarly the modem could be
in constant communication with null data, however each data frame
would be a ﬁxed size of N data blocks. Another option is that the
modem directly handles the data being transfered and sends batches
of data at a time in the frames.
We ﬁrst examined the effects of varying packet loss rates on cor-
rectly synchronizing with different preamble lengths. Using the
modem we recorded 10 seconds of transmission of random sym-
bols and encoded the output with FEC enabled. Then for each
packet loss rate, the output from the encoder was decoded 100
times with the randomized packet loss rate so we could determine
the percent of transfers that would succeed. We next ﬁxed a start-
ing point for the preamble, and varying the preamble length would
scan through the decoded symbols, calculating 16000 points of cor-
relation, and marking the preamble as the point with the highest
correlation score. If this point was the actual start of the preamble
the transfer was marked as a success, otherwise it was labeled as
failed, even if the actual preamble had the 2nd highest score.
Table 1: Mean opinion scores of different VoIP codecs with varying
levels of packet loss rates.
Table 1 shows the results based on their model with MOS rang-
ing between 2.74 - 3.11 when packet loss rates get in the range of
15-20%. In terms of impairment 2 represents “annoying” and 3 is
“slightly annoying”. We posit this represents an upper bound of
packet loss a censor could impose on VoIP connections while still
maintaining usability, particular with some of the newer codecs.
Zhang et al. conducted similar research on Skype video calls [28],
looking at how various network conditions effected video rates and
quality. They found that past 10% packet loss rates Skype switches
from normal to conservative state. Both the sending rate and video
rate plummet after this threshold, where their model shows a drop
in MOS from 3.5 to effectively 0. Based on this research we can
assume a hard upper bound of 10% packet loss available to a cen-
sor, anything higher would effectively block access to Skype video
communication.
4.2 FreeWave Modem
In order to directly use the VoIP network, FreeWave modulates
raw data through a modem which transmits data frames through
the VoIP client and over the network to the FreeWave proxy. Each
data frame sent by the modem begins with a known preamble block
used for synchronization, ensuring the demodulator is able to ﬁnd
the starting place of the actual data symbols sent. After the demod-
ulator ﬁlters and samples the audio waveform it receives, it scans
through and ﬁnds the point of maximum correlation and declares
that to be the starting point of the data frame. If the wrong start-
ing point is identiﬁed the demodulator will be unable to correctly
Figure 1: Percent of successfull transfers in FreeWave with differ-
ent preamble lengths, while varying the packet loss rate.
Figure 1 shows the results of varying packet loss rates with re-
spect to different preamble lengths. We see that even using fairly
small lengths still results in a large percent of successful transfers
with standard packet loss rates one would expect in a normal net-
work. This is a combination of the fact that error correction in VoIP
is able to compensate for small amounts of packet loss, and that
correlation with random data produces very low scores, resulting
in a fairly low threshold the preamble’s score must be above. How-
ever we see that no matter how long the preamble, extremely high
packet loss rates above 90% are able to prevent the modem from
properly synchronizing, since with that high of packet loss the FEC
codes are unable to recoup the loss data. While these packet loss
rates would effectively kill all VoIP communication, the modem
only embeds the preamble at the beginning of the connection. A
preamble of length 2048 would take roughly 0.25 seconds to trans-
mit, so a censor only needs to apply high packet loss rates for less
●●●●●●●●●●●●●●●●●●●020406080100020406080100Packet Loss Rate (%)Percent Successful Transfers12825651210242048364seen, and on seeing the same ACK 4 times in a row it resets the
sending thread’s head sequence number, causing the data starting
from the new sequence number to all be retransmitted.
4.3.1 Tracking ACKs
A censor might want to target and interfere with packets con-
taining acknowledgements in order to slow down or even halt the
data transfer, so they need some way of accurately tracking ACK
packets. Here we take advantage of the fairly deterministic way in
which packets are ﬂagged as ACK. The sending thread in the pack-
etizer keeps track of the last time tACK an ACK packet was sent,
and the ﬁrst packet sent at time t ≥ tACK + 100ms gets marked
as an ACK packet. Therefore, the censor can keep track of the last
time it knows an ACK packet was sent, and the ﬁrst packet seen
past the 100 ms window it knows is the next ACK packet. How-
ever, due to network jitter we cannot always assume the ﬁrst packet
seen after 100 ms is the ACK packet. In some cases either the ac-
tual ACK packet is received before the 100 ms interval and would
be missed, or a non-ACK packet is delayed and appears to be the
ﬁrst packet after the 100 ms window, getting misclassiﬁed.
To accommodate this, the censor can keep track of different paths
of probable ACK packets. First, we’ll consider a train of packets as
a group of packets in which the difference in the successive receive
times for each packet is less than some  5, i.e. for any two con-
secutive packets received at times ti, ti+1, we have ti+1 − ti < .
Then, when examining a window of probable ACK packets, con-
sider the ﬁrst packet in each packet train as possible ACK packets
and branch a path off from there. We only consider the ﬁrst packet
because there is a higher probability of it being the ACK packet,
and it also decreases any potential from skewing too far from the
actual path (in that it is better to underestimate than overestimate).
Figure 3: Example of a censor tracking paths of ACK packets
in SkypeMorph, where the boxes correspond to potential ACKs
ﬂagged by the algorithm with the time they were recieved.
An example of this process can be seen in Figure 3, where mul-
tiple paths branch off from possible ACK packets. Note that it is
entirely possible, and even likely, that paths will merge back to sin-
gle possible ACK packets when there is only one possible packet
train available in both windows. The problem with this technique
is many times multiple packets could be potential ACK packets
where a censor wants to select just one. To accomidate this, the cen-
sor computes a probability for each packet based on the probabil-
ity distribution p(x) of time differences between successive ACK
packets. Since a packet may have multiple paths from some start-
ing point, we ﬁrst compute the probability of individual paths with
times {ti
n} as such:
1, ti
2, . . . , ti
P (pathi) =
1
n − 1
p(ti
j+1 − ti
j)
n−1(cid:89)
j=1
5We used  =1 ms in our experiments
Figure 2: Targeted packet dropping to cause desynchronization in
the shaded region with resulting effects on the Mean Opinion Score
of the communication.
than a second to cause modem desynchronization while leaving the
remainder of the connection untouched. Figure 2 shows a scenario
where a censor applies 95% packet loss for a two second interval it
believes contains the preamble, while leaving the remainder of the
transmission in tact resulting in only a few seconds of incompre-
hensible communication.
In order to perform targeted packet dropping to prevent synchro-
nization, a censor would need to know an approximation on when
the preamble was sent in order to drop a large percentage of those
packets. This is directly related to the different conﬁgurations of
how data frames are composed and when they are sent. The ﬁrst
method mentioned where synchronization only occurs during the
initial connection is easy to interrupt based on the evidence that
high packet loss prevents synchronization with almost any pream-
ble length. Even using a wide window for possible preamble pack-
ets, if a censor merely drops enough packets at the very beginning
of the communication, it will prevent all the FreeWave modem
from synchronizing while only being a minor inconvenience on ac-
tual VoIP communication. The logical extension from this protocol
is to have ﬁxed data frame sizes, allowing repeated chances at syn-
chronization. Given predictable pattern of ﬁxed data frame lengths
and preamble positions, a censor can effectively target packets only
containing preamble data. This allows a censor to completely desyn-
chronize the modem with low packet rate loss, meaning any actual
VoIP communication would be relatively unaffected allowing hon-
est clients to still communicate. Another potential mode of opera-
tion is to have the modem send a data frame whenever it receives
data either directly from the browser or off the network. In this
case, the modem is only sending data frames when it actually has
data to send and is quiet the rest of the time, only needing to syn-
chronize over each frame. Since the preamble is always at the be-
ginning of the data frame, a censor can just target the ﬁrst burst of
packets sent to drop in order to distort the preamble block.
4.3 SkypeMorph
In SkypeMorph the client and proxy directly communicate out-
side the cover-protocol system, so in order to handle data corruption