  x86_64	
  adopted	
a	
  very	
  similar	
  format	
  used	
  in	
  the	
  .debug_frame	
  to	
  describe	
the	
  stack	
  unwind	
  during	
  an	
  excep'on:	
  .eh_frame	
•  It	
  is	
  not	
  exactly	
  the	
  same	
  as	
  dwarf	
•  It	
  adds	
  pointer	
  encoding	
  and	
  language-­‐speciﬁc	
  data	
•  As	
  usual,	
  the	
  documenta'on	
  is	
  sparse	
  and	
  very	
  limited:	
–  Par'ally	
  discussed	
  in	
  the	
  Linux	
  Standards	
  Base	
–  Par''ally	
  deﬁned	
  in	
  the	
  ABI	
–  Par'ally	
  implemented	
  in	
  GCC	
.eh_frame	
•  Theore'cally	
  it	
  is	
  a	
  table,	
  where	
  for	
  each	
  address	
in	
  the	
  .text	
  it	
  is	
  describe	
  how	
  to	
  restore	
  the	
registers	
  to	
  the	
  previous	
  call	
  frame	
•  CFA	
  (Canonical	
  Frame	
  Address)	
  –	
  Address	
  rela've	
to	
  the	
  call	
  frame	
•  Each	
  line	
  deﬁnes	
  how	
  each	
  part	
  of	
  the	
  code	
  can	
return	
  to	
  the	
  previous	
  frame	
EIP	
CFA	
EBP	
EBX	
EAX	
RET	
0xf000f000	
rsp+16	
   *(cfa-­‐16)	
*(cfa-­‐8)	
0xf000f001	
rsp+16	
   *(cfa-­‐16)	
*(cfa-­‐8)	
0xf000f002	
   rbp+16	
   *(cfa-­‐16)	
eax=edi	
   *(cfa-­‐8)	
…	
…	
…	
…	
…	
…	
0xf000f00a	
   rbp+16	
   *(cfa-­‐16)	
   *(cfa-­‐24)	
   eax=edi	
   *(cfa-­‐8)	
Size	
  Limita'ons	
•  Obviously,	
  keep	
  such	
  a	
  table	
  would	
  use	
  more	
space	
  then	
  the	
  code	
  itself	
•  That’s	
  why	
  the	
  adop'on	
  of	
  bytecode:	
  The	
table	
  is	
  ‘compressed’,	
  providing	
  everything	
required	
  to	
  create	
  it	
  when	
  needed	
•  Por'ons	
  of	
  the	
  table	
  are	
  created	
  as	
  needed	
(on-­‐demand)	
.eh_frame	
  .eh_frame	
  sec'on	
  .-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐.	
  |	
  CFI	
  |	
  CFI	
  =	
  Call	
  Frame	
  Informa'on	
  |	
  .-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐.	
  |	
  |	
  |	
  CIE	
  |	
  |	
  CIE	
  =	
  Common	
  Informa'on	
  Entry	
  |	
  '-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐'	
  |	
  |	
  |	
  FDE	
  |	
  |	
  FDE	
  =	
  Frame	
  Descrip'on	
  Entry	
  |	
  |	
  .-­‐-­‐-­‐-­‐-­‐-­‐-­‐.	
  |	
  |	
  |	
  |	
  |	
  *LSDA	
  ||	
  |	
  LSDA	
  =	
  Language	
  Speciﬁc	
  Data	
  Area	
  |	
  |	
  '-­‐-­‐-­‐-­‐-­‐-­‐-­‐'	
  |	
  |	
  |	
  '-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐'	
  |	
  |	
  |	
  FDE	
  |	
  |	
  |	
  |	
  .-­‐-­‐-­‐-­‐-­‐-­‐-­‐.	
  |	
  |	
  |	
  |	
  |	
  *LSDA	
  |	
  |	
  |	
  |	
  |	
  '-­‐-­‐-­‐-­‐-­‐-­‐-­‐'	
  |	
  |	
  |	
  '-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐'	
  |	
  |	
  |	
  |	
  |	
  |	
  |	
  ...	
  |	
  |	
  |	
  '-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐'	
  |	
  |	
  |	
  FDE	
  |	
  |	
  |	
  |	
  .-­‐-­‐-­‐-­‐-­‐-­‐-­‐.	
  |	
  |	
  |	
  |	
  |	
  *LSDA	
  |	
  |	
  |	
  |	
  |	
  '-­‐-­‐-­‐-­‐-­‐-­‐-­‐'	
  |	
  |	
  |	
  '-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐'	
  |	
  '-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐-­‐’	
"The	
  .eh_frame	
  sec'on	
  shall	
  contain	
  1	
  or	
  more	
  Call	
  Frame	
  Informa'on	
  (CFI)	
  records.	
  The	
  number	
of	
  records	
  present	
  shall	
  be	
  determined	
  by	
  size	
  of	
  the	
  sec'on	
  as	
  contained	
  in	
  the	
  sec'on	
  header.	
Each	
  CFI	
  record	
  contains	
  a	
  Common	
  Informa'on	
  Entry	
  (CIE)	
  record	
  followed	
  by	
  1	
  or	
  more	
  Frame	
Descrip'on	
  Entry	
  (FDE)	
  records.	
  Both	
  CIEs	
  and	
  FDEs	
  shall	
  be	
  aligned	
  to	
  an	
  addressing	
  unit	
  sized	
boundary"	
FDE	
  x	
  CIE	
FDE	
  (Frame	
  Descrip'on	
  Entry)	
  exists	
  for	
  each	
  logical	
Instruc'on	
  block	
CIE	
  (Common	
  Informa'on	
  Entry)	
  holds	
  common	
Informa'on	
  between	
  FDEs	
INSTRUCTIONS	
  in	
  FDE	
  hold	
  the	
  DWARF	
  bytecode	
FDE	
  x	
  CIE	
ini7al_loca7on/address_range:	
Deﬁnes	
  for	
  which	
  instruc'ons	
  this	
  FDE	
  applies	
augmenta7on:	
Language-­‐speciﬁc	
  informa'on	
return_address_register:	
Entry	
  in	
  a	
  virtual	
  table	
  that	
  deﬁnes	
  the	
  .text	
  loca'on	
to	
  return	
  to	
  (eip)	
instruc7ons:	
Table	
  rules.	
  Dwarf	
  has	
  a	
  language	
  to	
  describe	
the	
  table.	
Dwarf	
  Instruc'ons	
•  Work	
  as	
  an	
  assembly	
  language	
  (unexpected	
  computa'ons)	
•  Turing-­‐Complete	
  Stack-­‐Based	
  Machine	
•  Can	
  access	
  memory	
  and	
  register	
  values	
•  Have	
  some	
  limita'ons:	
–  Cannot	
  write	
  to	
  register/memory	
  (but	
  we	
  can	
  force	
  out-­‐of-­‐order	
  code	
execu'on	
  and	
  obtain	
  writes)	
–  Cannot	
  call	
  na've	
  code	
–  Cannot	
  write	
  to	
  registers	
  that	
  are	
  not	
  callee-­‐saved	
  in	
  the	
  ABI	
  (we	
  can	
write	
  to	
  callee-­‐saved	
  register	
  thought)	
–  GCC	
  limits	
  the	
  stack	
  in	
  64	
  words	
Dwarf	
  Programming	
•  DW_CFA_set_loc	
  N	
Next	
  instruc'ons	
  apply	
  to	
  the	
  ﬁrst	
  N	
  bytes	
  of	
  the	
func'on	
•  DW_CFA_def_cfa	
  R	
  OFF	
CFA	
  is	
  calculed	
  star'ng	
  from	
  register	
  R	
  and	
  oﬀset	
OFF	
•  DW_CFA_oﬀset	
  R	
  OFF	
Register	
  R	
  is	
  restaured	
  from	
  the	
  value	
  in	
  CFA	
  OFF	
•  DW_CFA_register	
  R1	
  R2	
Register	
  R1	
  is	
  restaured	
  with	
  the	
  contents	
  of	
  R2	
And	
  the	
  table	
  is	
  back…	
•  Each	
  architecture	
  register	
  receives	
  a	
  DWARF	
equivalent	
  (the	
  mapping	
  is	
  architecture	
  speciﬁc)	
•  Dwarf	
  Instruc'ons	
  deﬁne	
  rules	
  for	
  a	
  column	
  or	
advances	
  to	
  the	
  next	
  line	
  (program	
  loca'on)	
•  In	
  a	
  FDE,	
  lines	
  heritage	
  from	
  instruc'on	
  lines	
above	
  them	
EIP	
CFA	
EBP	
EBX	