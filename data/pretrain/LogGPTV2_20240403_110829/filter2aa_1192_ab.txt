BN-0015
Unencrypted keystroke injection /
keystroke sniﬃng
GE
July 26, 2016
BN-0016
Malicious macro programming
Logitech
July 26, 2016
3
Transceivers
Transceivers used in the a↵ected devices fall into two categories: general purpose transceivers with vendor speciﬁc
protocols, and purpose built wireless mouse and keyboard transceivers. The general purpose transceivers provide
a mechanism to wirelessly transmit data between two devices, but the functionality that turns mouse clicks and
keypresses into bytes sent over the air is implemented by each vendor. The purpose built transceivers have mouse
and keyboard logic baked into them, giving the vendors little to no control over the protocol.
All of the transceivers operate in the 2.4GHz ISM band at 1MHz channel boundaries and use GFSK modulation.
The data rates range from 500kbps to 2Mbps, and the packet formats and protocols vary between vendors and
devices.
3.1
Nordic Semiconductor nRF24L
Nordic Semiconductor makes the popular nRF24L series of general purpose, 2.4GHz GFSK transceivers. Five
common variations of the nRF24L o↵er di↵erent functionality depending on the application. Flash memory based
transceivers support ﬁrmware updates (assuming this has been implemented by the vendor), whereas OTP (one-
time-programmable) transceivers cannot be reprogrammed after they leave the factory. Many of the vulnerable
5
devices cannot be ﬁxed as a result of using OTP transceivers.
nRF24L Transceiver Family
Transceiver
8051 MCU
128-bit AES
USB
Memory
nRF24L01+
No
No
No
N/A
nRF24LE1
Yes
Yes
No
Flash
nRF24LE1 OTP
Yes
Yes
No
OTP
nRF24LU1+
Yes
Yes
Yes
Flash
nRF24LU1+ OTP
Yes
Yes
Yes
OTP
Table 1: nRF24L Transceiver Family
The nRF24L transceivers use a star network conﬁguration, and each node is able to transmit and receive on a
maximum of six RF addresses at a time. This allows up to six wireless mice or keyboards to communicate with a
single USB dongle, depending on the vendor speciﬁc implementation.
The nRF24L01 does not include an MCU, so it must be paired with an external microprocessor. The nRF24LU1+
and nRF24LE1 variants include an MCU and support for 128-bit AES encryption, and are commonly used in
USB dongles and wireless keyboards to support encrypted communication. The nRF24LE1 is also used in wire-
less mice, but none of the evaluated mice utilize encryption.
Two packet formats are o↵ered: Shockburst, and Enhanced Shockburst. Shockburst is a legacy packet format
which uses ﬁxed length payloads, and is not commonly used in modern devices. Enhanced Shockburst o↵ers vari-
able length payloads, auto acknowledgement, and auto retransmit. Additionally, Enhanced Shockburst supports
ACK payloads, which enable a receiver to attach a payload to an ACK packet. This makes it possible for a de-
vice to operate exclusively in receive mode without sacriﬁcing the ability to transmit to other nodes.
Nordic Semiconductor nRF24L transceivers are used in products from Logitech, Microsoft, Dell, Lenovo, Hewlett-
Packard, Gigabyte, and Amazon.
Preamble
1 byte
Address
3-5 bytes
Payload
1-32 bytes
CRC
1-2 bytes
Figure 1: Shockburst packet format
Preamble
1 byte
Address
3-5 bytes
Packet Control Field
9 bits
Payload Length
6 bits
PID
2 bits
No ACK
1 bits
Payload
0-32 bytes
CRC
1-2 bytes
Figure 2: Enhanced Shockburst packet format
3.2
Texas Instruments CC254X
Logitech uses Texas Instruments CC254X transceivers in some of their products, running ﬁrmware compatible
with Nordic Semiconductor Enhanced Shockburst. The Logitech Unifying wireless protocol and related vulnera-
6
bilities are agnostic of the underlying hardware, and references to Enhanced Shockburst in the Logitech Unifying
section of this document can refer to ESB running on nRF24L or CC254X based hardware.
3.3
MOSART Semiconductor
MOSART Semiconductor produces unencrypted 2.4GHz GFSK transceivers used in wireless mice and keyboards
from many vendors. Documentation was not available, but identical protocol behavior across vendors points to
a purpose built transceiver with little or no vendor customization. All wireless keyboards using these transceivers
are vulnerable to keystroke sniﬃng and injection.
MOSART Semiconductor transceivers are used in devices from Hewlett-Packard, Anker, Kensington, RadioShack,
HDE, Insignia, EagleTec, and ShhhMouse.
3.4
Signia SGN6210
The Signia SGN6210 is an unencrypted, general purpose, 2.4GHz GFSK transceiver used in wireless mice and
keyboards from Toshiba. Partial documentation was available, but reverse engineering was required to determine
the speciﬁc physical layer conﬁguration and packet format.
3.5
GE Mystery Transceiver
An unknown transceiver is used in the GE 98614 wireless keyboard and mouse. Reverse engineering e↵orts re-
vealed that it is an unencrypted 2.4GHz GFSK transceiver, but it is unclear if the communication protocol is spe-
ciﬁc to the transceiver or implementation.
4
Research Process
The motivation for this project came from a Logitech white paper which states, ”Since the displacements of a
mouse would not give any useful information to a hacker, the mouse reports are not encrypted.”[2] The initial
goal was to reverse engineer a Logitech M510 mouse, using a software deﬁned radio, in order to explore the above
statement.
4.1
Software Deﬁned Radio
The nRF24L transceivers used in Logitech mice support multiple data rates, address lengths, packet formats, and
checksums. To accommodate this, the initial research was performed using a USRP B210 software deﬁned ra-
dio, coupled with a custom GNU Radio block designed to decode all of the possible packet conﬁgurations. This
proved fruitful, but there were drawbacks to using an SDR.
Logitech mice do not employ frequency hopping in the traditional sense, but they change channels to avoid inter-
ference from other 2.4GHz devices (Bluetooth, WiFi, etc). The channel hopping is generally unpredictable, and
Software Deﬁned Radios are slower to retune than the nRF24L radios. This makes it diﬃcult for an SDR based
decoder to observe all of the transmitted packets.
When a Logitech mouse transmits a movement packet to a dongle, the dongle replies with an acknowledgement
packet telling the mouse that the movement packet was received. The mouse waits for a short period before de-
termining that the packet it transmitted was lost, which can be as short as 250 microseconds. Due to USB la-
tency and processing overhead, the SDR based decoder is unable to transmit ACKs within the narrow timeout
window, so two way communication between an SDR and dongle/mouse was not a viable option.
4.2
NES Controller
The SDR decoder made it possible to ﬁgure out the formats of the data being transmitted over the air, but reli-
able two way communication was necessary to reverse engineer the protocol and start looking for potential weak-
nesses.
7
Parallel to the Logitech mouse research, an Arduino/nRF24L-based NES controller was being built as part of a
Burning Man project. The nRF24L was chosen for the Burning Man project because they are inexpensive and
easy to use, but it quickly became apparent that the NES controller could also serve as a useful research tool.
The nRF24L chips do not oﬃcially support packet sniﬃng, but Travis Goodspeed documented a pseudo-promiscuous
mode in 2011 which makes it possible to sni↵ a subset of packets being transmitted by other devices. This en-
abled the NES controller to passively identify nearby Logitech wireless mice without the need for an SDR.
Building on this, the NES controller was modiﬁed to transmit the reverse engineered Logitech mouse packet for-
mats, and proved to be an excellent research tool. As opposed to passively collecting data, the NES controller
translated d-pad arrows into mouse movement packets, and A/B buttons into left and right clicks. Achieving a
smooth user experience necessitated reverse engineering the exact mouse behavior expected by the dongle.
The concept worked well, and the NES controller was presented at ToorCon in 2015, which demonstrated the vi-
ability of controlling previously unseen wireless mice at will. Despite being a marked improvement over the SDR
decoder, the NES controller was not without problems. Running o↵ of battery power made it impractical to use
ampliﬁed transceivers, limiting the practical range to about 10 meters.
4.3
CrazyRadio PA Dongles
The Crazyﬂie is an open source drone which is controlled with an ampliﬁed nRF24L-based USB dongle called
the Crazyradio PA. This is equivalent to an ampliﬁed version of the USB dongles commonly used with wireless
mice and keyboards, and increased the communication range to over 200 meters. Modifying the Crazyradio PA
ﬁrmware to include support for pseudo-promiscuous mode made it possible to distill the packet sniﬃng and injec-
tion functionality down to a minimal amount of Python code.
4.4
Fuzzing
The Crazyradio PA dongles made it possible to implement an eﬃcient and e↵ective fuzzer. Mouse and keyboard
USB dongles communicate user actions to the operating system in the form of USB HID packets, which can be
sni↵ed by enabling the usbmon kernel module on Linux.
The implemented fuzzer took advantage of this by transmitting RF packets to a mouse/keyboard dongle attached
to the same computer, and monitoring USB traﬃc for generated USB HID packets. Anytime mouse movement
or keypresses were sent to the operating system, the recently transmitted RF packets were recorded for analysis.
Fuzzing variants of observed packet formats and behaviors yielded the best results.
4.5
First Vulnerability and Beyond
The ﬁrst vulnerability was identiﬁed shortly after ToorCon, enabling unencrypted keystroke injection targeting
Logitech wireless keyboards. This prompted an investigation into 2.4GHz non-Bluetooth wireless mice and key-
boards from other vendors, eventually expanding into the full set of vendors, devices, and vulnerabilities covered
in this document.
5
Logitech Unifying
Unifying is a proprietary protocol widely used by Logitech wireless mice and keyboards. The protocol is centered
around the ability to pair any Unifying device to any Unifying dongle, with backward compatibility to the initial
launch in 2009.
Unifying is implemented as a layer on top of Enhanced Shockburst, but is not exclusive to Nordic Semiconductor
hardware. The majority of Unifying devices use Nordic Semiconductor nRF24L transceivers, with the rest us-
ing Texas Instruments CC254X transceivers. All devices are compatible over-the-air regardless of the underlying
hardware.
8
All Unifying packets use either a 5, 10, or 22 byte ESB payload length. In addition to the 2-byte CRC provided
by the Enhanced Shockburst packet, Unifying payloads are protected by a 1-byte checksum.
Preamble
1 byte
Address
5 bytes
PCF
9 bits
Enhanced Shockburst Payload
5, 10, or 22 bytes
Unifying Payload
4, 9, or 21 bytes
Checksum
1 byte
CRC
2 bytes
Figure 3: Logitech Unifying packet format
Radio Conﬁguration
Channels (MHz)
2402 - 2474, 3MHz spacing
Data Rate
2Mbps (2MHz GFSK)
Address Length
5 bytes
CRC Length
2 bytes
ESB Payload Lengths
5, 10, 22
Table 2: Logitech Unifying radio conﬁguration
5.1
Encryption
Keypress packets are encrypted with 128-bit AES, using a key generated during the pairing process[2]. The spe-
ciﬁc key generation algorithm is unknown, but BN-0013 demonstrates that encrypted keystroke injection is possi-
ble without knowledge of the AES key.
5.2
General Operation
Dongles always operate in receive mode, and paired devices in transmit mode. A dongle cannot actively transmit
to a paired device, and instead uses ACK payloads to send commands to a device. All payloads share the same
basic format, whether transmitted by a paired device, or included with a dongle’s ACK.
All Unifying payloads use the structure show in Figure 4, with an (optional) device index, frame type, data, and
checksum.
Device Index
1 byte
Frame Type
1 byte
Data
2, 7, or 19 bytes
Checksum
1 byte
Figure 4: Logitech Unifying payload format
5.2.1
Addressing
The upper 4 address bytes are the dongle serial number, and are the same for all paired devices. The lowest ad-
dress byte is the ID of a speciﬁc paired device, or 0x00 when directly addressing the dongle.
9
Example RF Addressing
Dongle serial number
7A:77:94:DE
Dongle RF address
7A:77:94:DE:00
Paired device 1 RF address
7A:77:94:DE:07
Paired device 2 RF address
7A:77:94:DE:08
Paired device 3 RF address
7A:77:94:DE:09
Table 3: Logitech Unifying addressing scheme
Up to 6 devices can be paired with a dongle at any given time, which results in 7 total RF addresses, but the
nRF24L RFICs are limited to 6 simultaneous receive pipes. Device index 0x00 (dongle address) is always en-
abled, so a maximum of 5 Unifying devices can be used simultaneously with a single dongle. As a result, a mouse
or keyboard cannot guarantee that its dongle will be listening on its RF address when ﬁrst switched on.
An alternate addressing scheme enables a paired device to transmit to the dongle’s RF address, specifying its de-
vice index in the payload instead of the low address byte. When transmitting to the RF address of a dongle, the
ﬁrst byte of the payload identiﬁes the device index.
When a device is ﬁrst switched on, it transmits a wakeup message to the RF address of the dongle it is paired
to. This causes the dongle to start listening on the RF address of the device if it is not doing so already. Two
wakeup packet formats have been observed.
5.2.2
Keepalives and Channel Hopping
Unifying uses an opportunistic frequency hopping scheme which remains on a given channel as long as there is no
packet loss. In order to quickly respond to poor channel conditions, a device sends periodic keepalive packets to
its dongle. If a keepalive is missed, the dongle and paired device move to a di↵erent channel.
The keepalive interval is set by the device, and is backed o↵ with inactivity. A lower interval provides faster re-
sponsiveness to changing channel conditions at the cost of higher power consumption.
All attacks against Logitech Unifying devices depend on the ability to reliably transmit packets to a target USB
dongle. In order to accomplish this, an attacker needs to mimic the keepalive behavior used by Unifying key-
boards and mice. By setting the keepalive timeout lower than the target device, there is no risk of a timed-out
device causing the dongle to unexpectedly channels.
Unused
1 byte
Frame Type (0x4F)
1 byte
Unused
1 byte
Timeout
2 bytes
Unused
4 bytes
Checksum
1 byte
Figure 5: Logitech Unifying set keepalive payload timeout
Unused
1 byte
Frame Type (0x40)
1 byte
Timeout
2 bytes
Checksum
1 byte
Figure 6: Logitech Unifying keepalive payload
5.3
Mouse Input