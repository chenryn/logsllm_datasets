deposits. In First Workshop on Bitcoin Research, FC, 2014.
[4] M. Andrychowicz, S. Dziembowski, D. Malinowski, and L.
Mazurek. Secure multiparty computations on bitcoin. In
IEEE Security and Privacy, 2014.
[5] Gilad Asharov, Yehuda Lindell, and Hila Zarosim. Fair and
efﬁcient secure multiparty computation with reputation
systems. In Asiacrypt (2), pages 201–220, 2013.
[6] Gilad Asharov and Claudio Orlandi. Calling out cheaters:
Covert security with public veriﬁability. In Asiacrypt, pages
681–698, 2012.
[7] N. Asokan, V. Shoup, and M. Waidner. Optimistic fair
exchange of digital signatures. In Eurocrypt, 1998.
[8] Yonatan Aumann and Yehuda Lindell. Security against
covert adversaries: Efﬁcient protocols for realistic
adversaries. In Salil P. Vadhan, editor, 4th Theory of
Cryptography Conference — TCC 2007, volume 4392 of
LNCS, pages 137–156. Springer, February 2007.
[9] S. Barber, X. Boyen, E. Shi, and E. Uzun. Bitter to better -
how to make bitcoin a better currency. In FC, 2012.
[10] Mira Belenkiy, Melissa Chase, C. Christopher Erway, John
Jannotti, Alptekin Kupcu, and Anna Lysyanskaya.
Incentivizing outsourced computation. In NetEcon, pages
85–90, 2008.
[11] Iddo Bentov and Ranjit Kumaresan. How to use bitcoin to
design fair protocols. In ePrint 2014/129, 2014.
[12] D. Cash, S. Jarecki, C. Jutla, H. Krawczyk, M. Rosu, and M.
Steiner. Highly-scalable searchable symmetric encryption
with support for boolean queries. In Crypto (1), 2013.
[13] J.-S. Coron, T. Lepoint, and M. Tibouchi. Practical
multlinear maps over the integers. In Crypto (1), 2013.
[14] E. Friedman and P. Resnick. The social cost of cheap
pseudonyms. In Journal of Economics and Management
Strategy, pages 173–199, 2000.
[15] S. Garg, C. Gentry, S. Halevi, and D. Wichs. On the
implausibility of differing-inputs obfuscation and extractable
witness encryption with auxiliary input. In ePrint 2013/860.
[16] S. Garg, C. Gentry, A. Sahai, and B. Waters. Witness
encryption and its applications. In STOC, 2013.
[17] R. Gennaro, C. Gentry, and B. Parno. Non-interactive
veriﬁable computing: Outsourcing computation to untrusted
workers. In Advances in Cryptology — Crypto 2010, 2010.
[18] R. Gennaro, C. Gentry, B. Parno, and M. Raykova. Quadratic
span programs and succinct nizks without pcps. In
Eurocrypt, 2013.
[19] Oded Goldreich. Foundations of cryptography - vol. 2. 2004.
[20] S. Goldwasser, Y. ˜T. Kalai, R.Ã. Popa, V. Vaikuntanathan,
and N. Zeldovich. How to run turing machines on encrypted
data. In Crypto (2), pages 536–553, 2013.
[21] Philippe Golle and Ilya Mironov. Uncheatable distributed
computations. In David Naccache, editor, Cryptographers’
Track — RSA 2001, volume 2020 of LNCS, pages 425–440.
Springer, April 2001.
[22] V. Goyal, P. Mohassel, and A. Smith. Efﬁcient two party and
multi party computation against covert adversaries. In
Advances in Cryptology — Eurocrypt 2008.
[23] Y. Huang, J. Katz, and D. Evans. Quid-pro-quo-tocols:
Strengthening semi-honest protocols with dual execution. In
IEEE Security and Privacy, pages 272–284, 2012.
[24] Y. Ishai, M. Prabhakaran, and A. Sahai. Founding
cryptography on oblivious transfer - efﬁciently. In Advances
in Cryptology — Crypto 2008, pages 572–591, 2008.
[25] S. Jarecki, C. Jutla, H. Krawczyk, M. Rosu, and M. Steiner.
Outsourced symmetric private information retrieval. In CCS,
pages 875–888.
[26] L. Lamport. Fast paxos, 2005. MSR-TR-2005-112.
[27] Y. Lindell and B. Pinkas. A proof of security of Yao’s
protocol for two-party computation. Journal of Cryptology.,
22(2):161–188, 2009.
[28] G. Maxwell. Zero knowledge contingent payment. 2011.
https://en.bitcoin.it/wiki/Zero_Knowledge_Contingent_Payment.
[29] P. Mohassel and M. Franklin. Efﬁciency tradeoffs for
malicious two-party computation. In PKC 2006.
[30] V. Pappas, B. Vo, F. Krell, S.-G. Choi, V. Kolesnikov, S.
Bellovin, A. Keromytis, and T. Malkin. Blind seer: A
scalable private dbms. In IEEE Security and Privacy, 2014.
[31] B. Parno, J. Howell, C. Gentry, and M. Raykova. Pinocchio:
Nearly practical veriﬁable computation. In IEEE S&P, 2013.
[32] R. L. Rivest, A. Shamir, and D. A. Wagner. Time-lock
puzzles and timed-release crypto. Technical Report
MIT/LCS/TR-684, MIT, 1996.
[33] A. Rosen and A. Shelat. Optimistic concurrent zero
knowledge. In Advances in Cryptology — Asiacrypt 2010.
[34] P. Todd. Reward offered for hash collisions for sha1, sha256,
ripemd160. https://bitcointalk.org/index.php?topic=293382.0, 2013.
[35] Andrew Yao. How to generate and exchange secrets
(extended abstract). In FOCS, pages 162–167, 1986.
Consider
the protocol
SV in the (FOT,F (cid:63)
APPENDIX
A. PROOF OF THEOREM 2
in Figure 6.
Using the protocol
of [11], we have that implementing F (cid:63)
CR)-
hybrid model has validation complexity the O(1) hash veriﬁca-
tions. Given this, it is easy to see that its optimistic communica-
tion/computation/validation complexity and the worst case valida-
tion complexity is exactly as stated in the theorem. In the rest of the
proof we give details about the simulation in the (FKT,F (cid:63)
CR)-
hybrid model. Note that FKT can be realized in the FOT-hybrid
model [24] and that F (cid:63)
SV can be realized in the (FOT,F (cid:63)
CR)-hybrid
model [11]. Assume that adversary A corrupts Pi. Let Pj denote
the honest party. We sketch the simulation below. Let (S1,S2) be
the NIZK simulator.
• S computes (crs, t) ← S1(1λ).
• S computes ( ˆGj, ˆx, ˆU, ˆw) ← Fake(1λ, f ).
SV,F (cid:63)
40• Acting as FKT, S next obtains (m, xi, ωi) from A. If A sends
abort, then S terminates the simulation. Else it speciﬁes output
of FKT as ( ˆU, g(cid:48)
j = com(0; ˆρj)) where ˆρj is picked uniformly
at random.
• Acting as Pj, S sends ˆGj to A and receives Gi from A.
• S chooses random rj and sends hj = H(rj) to A and receives
hi from A.
SV, S obtains (input, sid, ssid, ((cid:96)i, wi, ˜ωi, ˜ri, ˜hj,
• Acting as F (cid:63)
j), coins(q)) from A. If ˜ωi (cid:54)= ωi or H(˜ri) (cid:54)= hi or ˜hj (cid:54)= hj or
˜g(cid:48)
j (cid:54)= g(cid:48)
˜g(cid:48)
• Using the extracted ωi, S computes Ui, Wi. S speciﬁes the fol-
j or wi (cid:54)= ˆw, then set zi = bad.
lowing as the “leakage” function Lxi (xj):
– Compute wj = Eval(Gi, Ux1(cid:107)x2
– Compute v ∈ {0, 1}(cid:96) such that wj = Wv
i .
– If v = f (x1, x2) return 1, else return 0.
).
i
f,leak.
coins(q)) to F (cid:63)
f,leak, then set zi =
• If at any stage S acting as F (cid:63)
• If zi is not already set to bad, S sends (input, sid, ssid, xi, L,
• If (abort, sid, ssid) is received from F (cid:63)
• S acting as F (cid:63)
SV sets output as zi and delivers output messages
• If zi = (r1, r2), then S computes a simulated NIZK argument
CR sends message
(r1, r2).
to A.
j), t), and acting as F (cid:63)
ˆπ ← S2(crs, (Gj, g(cid:48)
(claim, sid, ssid, i, j, φi, τ, q, (ˆπ, rj)) to A.
CR receives message (claim, sid,
ssid, j, i, φj, τ, q, w) from A and it holds that φj(w) = 1, then
it outputs fail and terminates the simulation.
We ﬁrst prove that conditioned on S not outputting fail, the sim-
ulation is indistinguishable from the protocol execution throught a
series of hybrid execution. Let Hyb0 denote the protocol execu-
In Hyb1, we change the NIZK argument with a simulated
tion.
argument.
Indistinguishability of Hyb0 and Hyb1 follows from
the zero-knowledge property of NIZKs.
In Hyb2, we compute
g(cid:48)
j = com(0) (i.e., commitment on the all-zero string) instead of
com(ωj). Indistinguishability of Hyb1 and Hyb2 follows from the
hiding property of the commitment scheme. In Hyb3, we compute
Gj, U(cid:48)
j using Fake (instead of Gb and iGb). Indistinguishability of
Hyb2 and Hyb3 follows from the security of the garbling scheme
Gb. It is easy to see that Hyb3 is identical to the simulated execu-
tion.
It remains to be shown that the probability that S outputs fail is
negligible in λ. We consider two cases. Suppose the output zi = z.
In this case, observe that S outputs fail iff A produces r(cid:48) such that
H(r(cid:48)) = hj. It then follows from the collision-resistance of H that
such an event happens with negligible probability. On the other
hand suppose the output zi = (r1, r2). In this case, S outputs fail
iff A provides a valid proof that (Gi, g(cid:48)
i) ∈ L. By the soundness
property of NIZK, except with negligible probability there exists
i = com(ω; ρ) and Gi ← Gb(1λ, f, ω). Now
ω, ρ such that g(cid:48)
suppose Gi (cid:54)= Gb(1λ, f, ωi) (where ωi was extracted via FKT),
then this means that g(cid:48)
i can be opened to both ω as well as ωi and
thus we have a contradiction since we assumed a perfectly binding
commitment scheme. On the other hand, if Gi = Gb(1λ, f, ωi),
then essentially A has executed the protocol honestly. It can then
be easily veriﬁed that if zi (cid:54)= bad, then zi will not be of the form
(r1, r2) either. This completes the proof.
Lock phase.
1. Every Pi holds a public key pki for which only it knows
the corresponding secret key ski, scripts {φj}n
j=1, lock-
time value τ0 = τ · τ(cid:48) · ˜τ, and an unspent output (idi, ti) of
p = x(n − 1) coins that it controls (i.e. speciﬁed as a pair
of transaction id and output index).
2. For i ∈ [n− 1], Pi sends (lock_init, i, (idi, ti), pki) to Pn.
3. Pn creates the simpliﬁed transaction txsimp
that spends
lock
the n inputs (cid:2)(id1, t1), . . . , (idn, tn)(cid:3) to n outputs
(cid:2)(p, π1) . . . , (p, πn)(cid:3), where πi(w, s1, . . . , sn)
(cid:44)
(OP_CHECKSIG(pk1, s1) ∧ . . . ∧ OP_CHECKSIG(pkn, sn)) ∨
(OP_CHECKSIG(pki, si) ∧ φi(w) = 1).
4. Pn sends (lock_prepare, txsimp
5. Every Pi ensures that for all j ∈ [n], the jth output (yj, πj)
lock has yj = p and πj incorporates φj accordingly.
lock ) to all parties.
of txsimp
6. Let idlock ← SHA256d(txsimp
7. Every Pi creates a simpliﬁed transaction txsimp
lock ). Note: this is justiﬁed due
to Section 5.1, and the reader is referred to Section 5.1 for
an alternative that works with the current Bitcoin protocol.
pay:i that has
locktime τ0 and spends the input (idlock, i) to n − 1 out-
i (·) =
i(·)), and sends
pay:i)) to all parties.
the locktime values of
puts(cid:2)(x, ψ1
OP_CHECKSIG(pkn,·))(cid:3) excluding (x, ψi
i (·) = OP_CHECKSIG(pk1,·)), . . . , (x, ψn
(payback, i, txsimp
8. Every Pi ensures
pay:i, psi,i = Signski
that all
(txsimp
pay:j}j∈[n]\{i} equal τ0. Otherwise Pi aborts.
9. Every Pi computes n − 1 signatures Si = {psi,j =
the message
pay:j)}j∈[n]\{i},
and
Signski
(payback_ack, i, Si) to all parties.
(txsimp
sends
{txsimp
10. Every Pi extracts {pkj}j∈[n]\{i} from txsimp
lock and ensures
pay:k, psj,k) = 1 for all j ∈ [n] \ {i} and
that Vrfypkj
all k ∈ [n] \ {i}. Otherwise Pi aborts.
(txsimp
11. Every Pi computes sigi = Signski
1], Pi sends the message (lock_ﬁnalize, i, sigi) to Pn.
(txsimp
lock ). For i ∈ [n −
12. Pn transforms txsimp
lock to txlock by injecting each sigj as the
script that redeems the input (idj, tj), and broadcasts the
now valid transaction txlock to the Bitcoin network.
Redeem phase.
13. Every Pi waits until ˜τ PoW blocks extend the block in
which txlock resides, and then broadcasts to the Bitcoin net-
work a transaction that spends the ith output of txlock by
signing with ski and revealing wi that satisﬁes φi(wi) = 1.
14. Until τ0 blocks have been solved by the Bitcoin network,
every Pi listens on the network and waits until for all j ∈
[n] \ {i}, Pj redeems the jth output of txlock and thereby
reveals wj that satisﬁes φj(wj) = 1.
Payout phase. After (τ + 1)τ(cid:48) ˜τ − ˜τ blocks have been solved:
15. Every Pi checks for each j ∈ [n] \ {i} whether the jth out-
put of txlock can still be spent. If so, Pi injects the signa-
tures {psj,k}n
pay:j, and broadcasts the now valid
transaction txpay:j to the Bitcoin network.
k=1 into txsimp
Figure 10: Realizing F (cid:63)
ML in Bitcoin.
41