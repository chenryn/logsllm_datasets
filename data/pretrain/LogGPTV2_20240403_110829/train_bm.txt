.\"    without specific prior written permission.
.\"
.\" this software is provided by the regents and contributors ``as is'' and
.\" any express or implied warranties, including, but not limited to, the
.\" implied warranties of merchantability and fitness for a particular purpose
.\" are disclaimed.  in no event shall the regents or contributors be liable
.\" for any direct, indirect, incidental, special, exemplary, or consequential
.\" damages (including, but not limited to, procurement of substitute goods
.\" or services; loss of use, data, or profits; or business interruption)
.\" however caused and on any theory of liability, whether in contract, strict
.\" liability, or tort (including negligence or otherwise) arising in any way
.\" out of the use of this software, even if advised of the possibility of
.\" such damage.
.\" %%%license_end
.\"
.\" converted for linux, mon nov 29 14:24:40 1993, PI:EMAIL
.\" added remark on ebadf for fileno, aeb, 2001-03-22
.\"
.th fileno 3  2021-03-22 "" "linux programmer's manual"
.sh name
fileno \- obtain file descriptor of a stdio stream
.sh synopsis
.nf
.b #include 
.pp
.bi "int fileno(file *" stream );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br fileno ():
.nf
    _posix_c_source
.fi
.sh description
.pp
the function
.br fileno ()
examines the argument
.i stream
and returns the integer file descriptor used to implement this stream.
the file descriptor is still owned by
.i stream
and will be closed when
.br fclose (3)
is called.
duplicate the file descriptor with
.br dup (2)
before passing it to code that might close it.
.pp
for the nonlocking counterpart, see
.br unlocked_stdio (3).
.sh return value
on success,
.br fileno ()
returns the file descriptor associated with
.ir stream .
on failure, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b ebadf
.i stream
is not associated with a file.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br fileno ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
the function
.br fileno ()
conforms to posix.1-2001 and posix.1-2008.
.sh see also
.br open (2),
.br fdopen (3),
.br stdio (3),
.br unlocked_stdio (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/argz_add.3
.so man3/termios.3
.so man3/setaliasent.3
.so man3/getopt.3
.so man3/getspnam.3
.\" copyright (c) 2007, 2008 michael kerrisk 
.\" and copyright (c) 2006 ulrich drepper 
.\" a few pieces of an earlier version remain:
.\" copyright 2000, sam varshavchik 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references: rfc 2553
.\"
.\" 2005-08-09, mtk, added ai_all, ai_addrconfig, ai_v4mapped,
.\"			and ai_numericserv.
.\" 2006-11-25, ulrich drepper 
.\"     add text describing internationalized domain name extensions.
.\" 2007-06-08, mtk: added example programs
.\" 2008-02-26, mtk; clarify discussion of null 'hints' argument; other
.\"     minor rewrites.
.\" 2008-06-18, mtk: many parts rewritten
.\" 2008-12-04, petr baudis 
.\"	describe results ordering and reference /etc/gai.conf.
.\"
.\" fixme . glibc's 2.9 news file documents dccp and udp-lite support
.\"           and is sctp support now also there?
.\"
.th getaddrinfo 3 2021-08-27 "gnu" "linux programmer's manual"
.sh name
getaddrinfo, freeaddrinfo, gai_strerror \- network address and
service translation
.sh synopsis
.nf
.b #include 
.b #include 
.b #include 
.pp
.bi "int getaddrinfo(const char *restrict " node ,
.bi "                const char *restrict " service ,
.bi "                const struct addrinfo *restrict " hints ,
.bi "                struct addrinfo **restrict " res );
.pp
.bi "void freeaddrinfo(struct addrinfo *" res );
.pp
.bi "const char *gai_strerror(int " errcode );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br getaddrinfo (),
.br freeaddrinfo (),
.br gai_strerror ():
.nf
    since glibc 2.22:
        _posix_c_source >= 200112l
    glibc 2.21 and earlier:
        _posix_c_source
.fi
.sh description
given
.i node
and
.ir service ,
which identify an internet host and a service,
.br getaddrinfo ()
returns one or more
.i addrinfo
structures, each of which contains an internet address
that can be specified in a call to
.br bind (2)
or
.br connect (2).
the
.br getaddrinfo ()
function combines the functionality provided by the
.\" .br getipnodebyname (3),
.\" .br getipnodebyaddr (3),
.br gethostbyname (3)
and
.br getservbyname (3)
functions into a single interface, but unlike the latter functions,
.br getaddrinfo ()
is reentrant and allows programs to eliminate ipv4-versus-ipv6 dependencies.
.pp
the
.i addrinfo
structure used by
.br getaddrinfo ()
contains the following fields:
.pp
.in +4n
.ex
struct addrinfo {
    int              ai_flags;
    int              ai_family;
    int              ai_socktype;
    int              ai_protocol;
    socklen_t        ai_addrlen;
    struct sockaddr *ai_addr;
    char            *ai_canonname;
    struct addrinfo *ai_next;
};
.ee
.in
.pp
the
.i hints
argument points to an
.i addrinfo
structure that specifies criteria for selecting the socket address
structures returned in the list pointed to by
.ir res .
if
.i hints
is not null it points to an
.i addrinfo
structure whose
.ir ai_family ,
.ir ai_socktype ,
and
.i ai_protocol
specify criteria that limit the set of socket addresses returned by
.br getaddrinfo (),
as follows:
.tp
.i ai_family
this field specifies the desired address family for the returned addresses.
valid values for this field include
.br af_inet
and
.br af_inet6 .
the value
.b af_unspec
indicates that
.br getaddrinfo ()
should return socket addresses for any address family
(either ipv4 or ipv6, for example) that can be used with
.i node
and
.ir service .
.tp
.i ai_socktype
this field specifies the preferred socket type, for example
.br sock_stream
or
.br sock_dgram .
specifying 0 in this field indicates that socket addresses of any type
can be returned by
.br getaddrinfo ().
.tp
.i ai_protocol
this field specifies the protocol for the returned socket addresses.
specifying 0 in this field indicates that socket addresses with
any protocol can be returned by
.br getaddrinfo ().
.tp
.i ai_flags
this field specifies additional options, described below.
multiple flags are specified by bitwise or-ing them together.
.pp
all the other fields in the structure pointed to by
.i hints
must contain either 0 or a null pointer, as appropriate.
.pp
specifying
.i hints
as null is equivalent to setting
.i ai_socktype
and
.i ai_protocol
to 0;
.i ai_family
to
.br af_unspec ;
and
.i ai_flags
to
.br "(ai_v4mapped\ |\ ai_addrconfig)" .
(posix specifies different defaults for
.ir ai_flags ;
see notes.)
.i node
specifies either a numerical network address
(for ipv4, numbers-and-dots notation as supported by
.br inet_aton (3);
for ipv6, hexadecimal string format as supported by
.br inet_pton (3)),
or a network hostname, whose network addresses are looked up and resolved.
if
.i hints.ai_flags
contains the
.b ai_numerichost
flag, then
.i node
must be a numerical network address.
the
.b ai_numerichost
flag suppresses any potentially lengthy network host address lookups.
.pp
if the
.b ai_passive
flag is specified in
.ir hints.ai_flags ,
and
.i node
is null,
then the returned socket addresses will be suitable for
.br bind (2)ing
a socket that will
.br accept (2)
connections.
the returned socket address will contain the "wildcard address"
.rb ( inaddr_any
for ipv4 addresses,
.br in6addr_any_init
for ipv6 address).
the wildcard address is used by applications (typically servers)
that intend to accept connections on any of the host's network addresses.
if
.i node
is not null, then the
.b ai_passive
flag is ignored.
.pp
if the
.b ai_passive
flag is not set in
.ir hints.ai_flags ,
then the returned socket addresses will be suitable for use with
.br connect (2),
.br sendto (2),
or
.br sendmsg (2).
if
.i node
is null,
then the network address will be set to the loopback interface address
.rb ( inaddr_loopback
for ipv4 addresses,
.br in6addr_loopback_init
for ipv6 address);
this is used by applications that intend to communicate
with peers running on the same host.
.pp
.i service
sets the port in each returned address structure.
if this argument is a service name (see
.br services (5)),
it is translated to the corresponding port number.
this argument can also be specified as a decimal number,
which is simply converted to binary.
if
.i service
is null, then the port number of the returned socket addresses
will be left uninitialized.
if
.b ai_numericserv
is specified in
.i hints.ai_flags
and
.i service
is not null, then
.i service
must point to a string containing a numeric port number.
this flag is used to inhibit the invocation of a name resolution service
in cases where it is known not to be required.
.pp
either
.i node
or
.ir service ,
but not both, may be null.
.pp
the
.br getaddrinfo ()
function allocates and initializes a linked list of
.i addrinfo
structures, one for each network address that matches
.i node
and
.ir service ,
subject to any restrictions imposed by
.ir hints ,
and returns a pointer to the start of the list in
.ir res .
the items in the linked list are linked by the
.i ai_next
field.
.pp
there are several reasons why
the linked list may have more than one
.i addrinfo
structure, including: the network host is multihomed, accessible
over multiple protocols (e.g., both
.br af_inet
and
.br af_inet6 );
or the same service is available from multiple socket types (one
.b sock_stream
address and another
.b sock_dgram
address, for example).
normally, the application should try
using the addresses in the order in which they are returned.
the sorting function used within
.br getaddrinfo ()
is defined in rfc\ 3484; the order can be tweaked for a particular
system by editing
.ir /etc/gai.conf
(available since glibc 2.5).
.pp
if
.i hints.ai_flags
includes the
.b ai_canonname
flag, then the
.i ai_canonname
field of the first of the
.i addrinfo
structures in the returned list is set to point to the
official name of the host.
.\" in glibc prior to 2.3.4, the ai_canonname of each addrinfo
.\" structure was set pointing to the canonical name; that was
.\" more than posix.1-2001 specified, or other implementations provided.
.\" mtk, aug 05
.pp
the remaining fields of each returned
.i addrinfo
structure are initialized as follows:
.ip * 2
the
.ir ai_family ,
.ir ai_socktype ,
and
.i ai_protocol
fields return the socket creation parameters (i.e., these fields have
the same meaning as the corresponding arguments of
.br socket (2)).
for example,
.i ai_family
might return
.b af_inet
or
.br af_inet6 ;
.i ai_socktype
might return
.b sock_dgram
or
.br sock_stream ;
and
.i ai_protocol
returns the protocol for the socket.
.ip *
a pointer to the socket address is placed in the
.i ai_addr
field, and the length of the socket address, in bytes,
is placed in the
.i ai_addrlen
field.
.pp
if
.i hints.ai_flags
includes the
.b ai_addrconfig
flag, then ipv4 addresses are returned in the list pointed to by
.i res
only if the local system has at least one
ipv4 address configured, and ipv6 addresses are returned
only if the local system has at least one ipv6 address configured.
the loopback address is not considered for this case as valid
as a configured address.
this flag is useful on, for example,
ipv4-only systems, to ensure that
.br getaddrinfo ()
does not return ipv6 socket addresses that would always fail in
.br connect (2)
or
.br bind (2).
.pp
if
.i hints.ai_flags
specifies the
.b ai_v4mapped
flag, and
.i hints.ai_family
was specified as
.br af_inet6 ,
and no matching ipv6 addresses could be found,
then return ipv4-mapped ipv6 addresses in the list pointed to by
.ir res .
if both
.b ai_v4mapped
and
.b ai_all
are specified in
.ir hints.ai_flags ,
then return both ipv6 and ipv4-mapped ipv6 addresses
in the list pointed to by
.ir res .
.b ai_all
is ignored if
.b ai_v4mapped
is not also specified.
.pp
the
.br freeaddrinfo ()
function frees the memory that was allocated
for the dynamically allocated linked list
.ir res .
.ss extensions to getaddrinfo() for internationalized domain names
starting with glibc 2.3.4,
.br getaddrinfo ()
has been extended to selectively allow the incoming and outgoing
hostnames to be transparently converted to and from the
internationalized domain name (idn) format (see rfc 3490,
.ir "internationalizing domain names in applications (idna)" ).
four new flags are defined:
.tp
.b ai_idn
if this flag is specified, then the node name given in
.i node
is converted to idn format if necessary.