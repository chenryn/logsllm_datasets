### Determining the Reliability of Login Oracles

In our analysis, we found that not all domains can be relied upon for determining a user's login status on a given website. Among the analyzed domains, nine had scripts with unguessable tokens in the URL, making it impossible to use these as login oracles unless the tokens are known. This leaves us with 40 domains that can be used as reliable login oracles.

### Prominent Example: Google Plus API Script

The most notable script exhibiting this behavior is hosted by Google and is part of the Google Plus API. Despite having a seemingly static address, this script shows differences in three variables: `isLoggedIn`, `isPlusUser`, and `useFirstPartyAuthV2`. These variables allow an attacker to determine a user’s login status with Google.

### Utilization of Oracle Information

The information obtained from these oracles can be used to enhance fingerprinting techniques [7]. Additionally, it can be exploited by attackers to perform service-specific phishing attacks. For instance, if an attacker knows that a user is logged into google.com, they can display a phishing form specifically targeting Google users. This attack can be further refined if the attacker has additional information about the user, which will be discussed later in this section.

### 4.5.2 Tracking Users

Out of the 40 domains that provided a login oracle, 28 also provided unique identifiers that could be used to track users. The most common identifier was the email address used for registration, followed by user IDs such as login names or customer IDs. These identifiers can be used to track users across different devices, provided they log in to a service that leaks this information. A top-ranked Chinese search engine was the highest-rated service leaking this kind of unique identifier. Another highly-frequented page with a calendar function also contained a script leaking the email address of the currently logged-in user. Since the owning company uses a single sign-on for multiple domains, logging into any of these sites enables the attack.

### 4.5.3 Personalized Social Engineering

In many applications, we found that email addresses were being leaked to potential attackers. This information can be leveraged to create highly personalized phishing attacks. As Downs et al. [5] discovered, users are more likely to respond to phishing emails if they have a business relationship with the sending entity or if the email appears to be personally relevant.

Gathering information on the sites a user has accounts on, along with additional details like their name, can aid an attacker in creating a personalized attack. An attacker can exploit this information in two ways: first, by sending phishing emails based on the services the user has accounts on, and second, by attempting to phish the user’s email account after learning their email provider. In our study, 14 different domains leaked email addresses, and ten of these also revealed at least the first name of the logged-in user. Additionally, two domains leaked the date of birth, and one script on a Chinese website even contained the (verified) mobile phone number of the victim. This information can be used to create highly personalized phishing attacks.

Another form of personalized social engineering enabled by our findings is targeted advertising. We found that two online shopping platforms use dynamic scripts to provide the application with the user’s wish list. This information can be exploited by an attacker to either provide targeted advertisements for profit (e.g., linking to products on Amazon using the attacker’s affiliate ID) or to sell fake products matching the user’s wishes.

### Application-Specific Attacks

Alongside the theoretical attack scenarios, we found multiple applications with issues related to the analyzed leaking scripts, as well as several domains with CSRF flaws. We discuss these attacks briefly below.

#### Extracting Calendar Entries

One of the most prominent websites we could exploit was a mail service offering additional functionalities such as contact management and a calendar. The calendar is implemented primarily in JavaScript and retrieves necessary bootstrap information when loaded. This script, in the form of a function call to a custom JavaScript API, provides the application with all of the user’s calendars and corresponding entries. Since this script was not protected against inclusion by third-party hosts, it leaks sensitive information to an attacker. Along with the calendar and entries, the script also leaks the email address of the victim, allowing the attacker to associate the appointments with their owner.

#### Reading Email Senders and Subjects

When logging into the portal of a major Chinese web service provider, we found that the main page displays the last five emails for the currently logged-in user. Our browser extension determined that this information was provided by an external script, using cookies for authentication. The script contained the username, the number of unread emails, and the senders, subjects, and received dates of the last five emails. Although this attack does not allow for the extraction of email content, it leaks contacts and topics of current discussions, which is a significant privacy issue.

#### Session Hijacking Vulnerabilities

During our study, we found that two German file storage services had session hijacking vulnerabilities. Both services are implemented as JavaScript applications that use XMLHttpRequest to retrieve directory listings and manage files. To prevent unauthorized access, both applications require a session key to be present in a cookie and an additional HTTP header. When first visiting the file storage service, the application loads an external script called `userdata.js` containing the necessary secrets: the username and the session key. We found that this script is not properly protected against cross-domain data leakage, allowing an attacker to obtain the secret information. With this information, an attacker can list and access any file in the victim’s storage and perform arbitrary actions, such as creating or deleting files.

A minor drawback in this attack is the need for the attacker to know the victim’s username in advance, as the dynamic script requires a GET parameter with the username. However, this can be overcome through targeted phishing emails or by retrieving the email address through another service, as discussed earlier.

#### Circumventing CSRF Protection

One method to prevent cross-domain attacks is the use of CSRF tokens, which are either part of the URL (as a GET parameter) or need to be posted in a form and verified by the server. Although CSRF tokens are a well-understood means of preventing these attacks, proper implementation is crucial. In our analysis, we found that two domains contained scripts that leaked critical tokens.

The first domain required knowledge of two secrets to change the user’s profile data: a 25-byte token and the numerical user ID. Our extension detected a state-dependent dynamic script containing these values, allowing us to leak the data and send a properly authenticated profile change request to the API. Interestingly, one field visible only to the user contained a stored XSS vulnerability, enabling us to exploit the otherwise unexploitable XSS flaw. For users logged in via Facebook Social Login, we could retrieve the Facebook API access token and interact with the Facebook API in the user’s name, accessing profile information and even posting on their behalf.

Similarly, on a highly-ranked weather service domain, the application provides an API for changing a user’s profile and password without requiring the old password. The API requires the email address of the currently logged-in user, serving as a CSRF token. We found a script providing information on the user, including the email address. By first retrieving the necessary token (email) from the leaking script, we could automate the attack by sending a password change request to the API. Afterward, we sent the email address (used as the login name) and the new password back to our servers, effectively taking over the user’s account in a fully automated manner.

### 4.5.4 Notification of Vulnerable Sites

To allow affected pages to fix the vulnerabilities before they can be exploited, we notified the security teams of all domains for which we could successfully craft exploits. We created a website detailing the problem associated with cross-domain includes of JavaScript and the attack pattern. Additionally, we created proof-of-concept exploits for each flaw and shared this information, augmented by a description of the problem and its impact, with the domain owners.

As of this writing, we received only three replies stating that the flaw was either being addressed or had been fixed. However, none of the affected sites agreed to be mentioned in the paper, so we anonymized all the vulnerable services we discovered.

### 4.5.5 Summary of Our Findings

In total, out of the 49 domains dependent on the user’s login state, 40 lack adequate protection and can be used to deduce if a user is logged into a certain application. On 28 of these domains, dynamic scripts allowed for the unique identification of the current user through various means, such as customer IDs or email addresses. Additionally, personal data (such as the name or location) was contained in scripts on 13 domains. Lastly, four domains allowed for the extraction of tokens that could be used to control the target application in the name of the victimized user. An overview of these results is depicted in Table 2.

### 4.6 Non-Exploitable Situations

As shown in Table 2, we were not able to leak data from all of the dynamic scripts we found. Generally, we identified two reasons for this: either the URL of the script was not guessable by an attacker, or the website utilized referrer checking to avoid the inclusion of resources by third parties. While these mechanisms protected some websites from being exploitable, we believe the corresponding countermeasures were not intentionally placed against the described attack but were rather in place due to the application framework (referrer checking) or the application’s design (unguessable URLs). We briefly discuss and analyze these situations below.

#### 4.6.1 Unguessable URLs

For the attack described in this paper to succeed, an attacker must be able to include a certain script file into their page during a user’s visit. This requires the attacker to know the exact URL under which a certain dynamic script is available. Some scripts required a session ID or another unguessable token to be present in a GET parameter of the URL. Since the attacker generally cannot obtain such a session ID, the script cannot be included, and sensitive data cannot be leaked.

#### 4.6.2 Referrer Checking

Another technique that prevented us from exploiting a script leakage vulnerability was referrer checking. When a browser generates an HTTP request for an embedded script, it adds the `Referer` header containing the URL of the embedding site. Many websites misuse this header as a security feature [31]. By checking the domain of the referrer, a website can theoretically ascertain the origin of the page requesting a resource.

However, Johns showed in 2006 that referrer checking has several pitfalls [17]. The `Referer` header was never intended to serve as a security feature and should not be used as a reliable source of information. Many proxies and middle boxes remove the `Referer` header due to privacy concerns, and there are several situations in which a browser does not attach a `Referer` header to a request. As discussed by Kotowicz, an attacker can intentionally remove the header from requests [19].

Consequently, servers should not rely on the presence of the `Referer` header. If a server receives a request for a dynamic script that does not provide a `Referer` header, it needs to decide whether to allow the request or block it. If the request is allowed, the attacker may force the removal of the referrer as discussed. On the other hand, if the server blocks the request (strict referrer checking), it might break the application for users behind privacy-aware proxies.

We found several domains that implemented referrer checking. However, of seven pages that conducted such a check, only two conducted strict referrer checking. As a result, the other five websites were still exploitable by intentionally removing the `Referer` header. Listing 7 shows the attack we utilized to strip the `Referer` header. In this example, we use a data URI assigned to an iframe to embed the leaking script.

```html
var url = "data:text/html," + "<script src='http://example.com/leaking_script.js'></script>";
// create a new iframe
var frame = document.createElement('iframe');
// assign the previously created data url
frame.src = url;
document.body.appendChild(frame);
```

### 5. Protection Approach

In our study, we observed a surprisingly high number of popular websites utilizing the dangerous pattern of using external, dynamically-generated scripts to provide user-specific data to an application. It seems that developers are not aware of the severe consequences of this practice. To improve this situation, we provide a secure and functionally equivalent solution. The main problem with dynamically generated script includes is the incorporation of sensitive user data into files that are not completely protected by the Same-Origin Policy. We discourage this practice and advise developers to strictly separate JavaScript code from sensitive user data.

Figure 2 depicts our design proposal. In this proposal, script code is never generated on the fly but always pulled from a static file. Sensitive and dynamic data values should be kept in a separate file that cannot be interpreted by the browser as JavaScript. When the static JavaScript gets executed, it sends an XMLHttpRequest to the file containing the data. By default, access to this data is restricted, ensuring that it cannot be included by third-party hosts.