# VLAN Hopping, ARP Poisoning, and Man-in-the-Middle Attacks in Virtualized Environments

**Authors:**
- Ronny L. Bull<sup>⇤†</sup>, Jeanna N. Matthews<sup>†</sup>, Kaitlin A. Trumbull<sup>‡</sup>
- <sup>⇤</sup>Utica College, {rlbull, katrumbu}@utica.edu
- <sup>†</sup>Clarkson University, {bullrl, jnm}@clarkson.edu

## Abstract
Cloud service providers offer customers the ability to deploy virtual machines (VMs) in a multi-tenant environment. These VMs are typically connected to the physical network through a virtualized network configuration, which can range from simple bridged interfaces to more complex virtual switches providing features such as VLANs, QoS, and monitoring. At DEF CON 23, we presented how attacks known to be successful on physical switches apply to their virtual counterparts. In this paper, we present new results demonstrating successful VLAN hopping, ARP poisoning, and Man-in-the-Middle (MitM) attacks across major hypervisor platforms. We have expanded our testing to include more hypervisor environments and virtual switch configurations, and we have included results of attacks originating from both the physical and virtual networks.

**Keywords:** Virtualization, Networking, Network Security, Cloud Security, Layer 2 Attacks.

## 1. Introduction
The increasing popularity of cloud services has led many businesses to host their mission-critical data and applications on these platforms. Cloud customers often deploy VMs on shared, remote, physical computing resources. These VMs are connected to the physical network via a virtualized network within the host environment. Common virtualized hosting environments use either a bridged network interface or a virtual switch, such as Open vSwitch for Xen and KVM, or built-in virtual switch options for VMware vSphere and Microsoft Hyper-V. While these virtual switches emulate their physical counterparts, they often lack the Layer 2 protection mechanisms found in modern enterprise-grade hardware switches.

It is crucial for users of multi-tenant cloud services to understand the security of their network traffic, especially since VMs from multiple customers share the same physical resources. If another tenant can launch a Layer 2 attack and capture all network traffic, it poses a significant security risk. By understanding which virtual switches are vulnerable to specific attacks, users can evaluate their workloads and consider additional security measures such as increased encryption and monitoring.

In this paper, we present the results of a systematic study evaluating the effects of VLAN hopping and ARP poisoning attacks across five major hypervisor environments with seven different virtual network configurations. This work builds on our previous research at DEF CON 23, but includes more sophisticated network configurations, including VLANs and mixed physical/virtual environments. We provide background information on network configuration options, details of our test environment, attack methodologies, results, and mitigation strategies.

## 2. Basic Network Configuration Options
There are two primary types of networking configurations used in virtualized environments: bridging and switching.

### 2.1 Bridging
Bridged mode is the simplest configuration, providing an interface dedicated to VM use. A bridge connects two or more network segments at Layer 2, extending the broadcast domain and separating each segment into its own collision domain. A forwarding table lists the MAC addresses associated with devices on each network segment. Frames are forwarded based on the contents of this table and the destination MAC address in the Ethernet frame. A frame is forwarded across the bridge only if the destination MAC address is reachable from a different segment; otherwise, it is directed to a destination on the same segment or dropped.

In virtualized environments, guest machines use user-space virtual network interfaces that simulate a Layer 2 device to connect to a virtual bridge. The virtual bridge is typically configured and bound to a physical interface on the host machine dedicated to VM traffic.

### 2.2 Switching
Physical switches operate at Layer 2 or higher of the OSI model. Each port of the switch is considered an isolated collision domain. Instead of a forwarding table, switches use a Content Addressable Memory (CAM) table to map MAC addresses to ports. This allows the switch to send traffic directly to the correct device without broadcasting frames to every port.

Virtual switches emulate their physical counterparts and can provide features such as VLAN traffic separation, performance and traffic monitoring, and Quality of Service (QoS) solutions. VMs are connected to a virtual switch via virtual network interfaces (VIFs), similar to the Layer 2 devices used with virtual bridges.

## 3. Test Environment
Our test environment consisted of eight server-class systems located on a test network isolated from local production networks. Each system had a quad-core Intel Xeon X3-1240V3 processor, 32GB of memory, a 500GB Western Digital Enterprise 7400 RPM SATA hard drive, and four onboard gigabit Ethernet ports. The four Ethernet ports allowed us to dedicate one port to the hypervisor operating system for management and use the other three for different VM network configurations. This was particularly useful for conducting VLAN hopping experiments.

Table 1 summarizes the hypervisor environments, operating systems, and virtual switch configurations installed on the new hardware.

| Hypervisor Platform | Virtual Switch |
|---------------------|----------------|
| Gentoo OS Xen 4.5.1 | Linux 802.1d Bridging |
| Gentoo OS Xen 4.5.1 | Open vSwitch 2.4.0 |
| VMware vSphere ESXi 6.0.0 | Standard ESXi Virtual Switch |
| MS Server 2012 R2 DataCenter w/Hyper-V | Standard Hyper-V Virtual Switch |
| MS Server 2012 R2 DataCenter w/Hyper-V | Cisco Nexus 1000v 5.2(1)SM3(1.1a) |
| ProxMox 3.4 (KVM) | Linux 802.1d Bridging |
| Citrix XenServer 6.5.0 | Open vSwitch 2.1.3 |
| Kali 2.0 Standalone System | No virtual switch |

## 4. Attacks Performed
We explored and tested three Layer 2 networking attacks across all the hypervisor environments: VLAN hopping via Switch Spoofing, VLAN hopping via Double Tagging, and ARP poisoning MitM attacks. Each attack was performed identically on all platforms to analyze differences between the environments.

### 4.1 VLAN Hopping via Switch Spoofing
Switch spoofing leverages a vulnerability in physical Cisco switches that use the proprietary Dynamic Trunking Protocol (DTP) to automatically negotiate trunk links. Most modern Cisco switches have DTP enabled by default, making it easy to form trunk links. If physical ports are left in dynamic desirable mode, an attacker can connect a system and fool the switch into thinking it is another switch, forming a trunk link and gaining access to all VLANs associated with the trunk.

We evaluated the effectiveness of executing a similar switch spoofing attack from a VM. We tested this attack within seven environments connected to a Cisco 2950 switch on the physical network. For comparison, we started with a control scenario using a physical Kali 2.0 system to verify the switch port could be changed from dynamic desirable mode to trunking mode. We then evaluated if the same attack worked when executed from a VM connected to a virtual switch with an uplink to the same physical Cisco 2950 switch.

We followed best practices guides provided by hypervisor manufacturers when setting up the physical switch ports. We ensured the port connected to the attacking VM was converted back to dynamic desirable mode from trunk mode to see if the VM could successfully convert the physical switch port into trunk mode.

Figure 3 illustrates the control scenario using a physical Kali 2.0 system, and Figure 4 shows the scenario where the attacker uses a Kali 2.0 VM.

1. Load Yersinia at the command line: `yersinia -I`.
2. Select the proper network interface.
3. Change Yersinia to DTP mode: press 'g' and select 'DTP Mode'.
4. Conduct the attack: press 'x' and select option '1' to enable trunking mode.

If the attack was successful, Yersinia displayed TRUNK/AUTO; otherwise, ACCESS/DESIRABLE was displayed. We verified the attack's success by checking the interface and trunk status on the Cisco switch using `sh int status` and `sh int trunk`.

The results varied across the different virtual network environments, as shown in Table 2. The control test from the physical Kali 2.0 system worked as expected, converting the port to trunking mode and granting access to all VMs on the VLANs available on the trunk. We loaded the 8021q kernel module, associated the target VLAN to the network interface, and provided a valid IP address to the newly created VLAN-tagged interface.

```bash
modprobe 8021q
vconfig add eth0 20
ifconfig eth0.20 192.168.1.10 netmask 255.255.255.0 up
```

This created a new network interface labeled `eth0.20`, which could access the target systems within the isolated VLANs. The same process was used to validate the attack from the VMs. Table 2 summarizes the results of the switch spoofing experiments.

| Platform | Negotiate Trunk Link | Unauthorized VLAN Access |
|----------|----------------------|--------------------------|
| Physical Kali 2.0 Control System | 3 | 3 |
| OS Xen w/ Linux Bridging | 3 | 3 |
| OS Xen w/ Open vSwitch | - | - |
| VMware vSphere ESXi | 3 | 3 |
| MS Hyper-V Standard vSwitch | - | - |
| MS Hyper-V Cisco Nexus 1000v | - | - |
| Proxmox | 3 | 3 |
| Citrix XenServer | - | - |

The attack worked in the control scenario and three out of the seven virtual network environments. It was successful in environments using a virtual bridged interface, while those using a virtual switch prevented the attack. The ESXi standard virtual switch allowed the attack, indicating it acts more like a bridge than a switch. We posted a demo video of the successful attack from the ESXi environment on YouTube.

These results were surprising, as the attack is specific to a Cisco proprietary protocol, and one would expect the DTP probes to be blocked. This was the case for the virtual switched environments, but the bridged interfaces acted as a pass-through, allowing the attack to affect the physical switch.

We also attempted to perform the attack directly against the Cisco Nexus 1000v switch. When configuring the Nexus 1000v per deployment guides, we found that even connecting a VM to the virtual switch required virtual subnets and policies that restricted which VLANs could be accessed, preventing the attack.