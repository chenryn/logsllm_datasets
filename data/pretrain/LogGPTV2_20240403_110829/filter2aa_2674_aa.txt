VLAN hopping, ARP poisoning and
Man-In-The-Middle Attacks in
Virtualized Environments
Ronny L. Bull⇤, Jeanna N. Matthews†, Kaitlin A. Trumbull‡
⇤†Clarkson University {bullrl, jnm}@clarkson.edu
⇤‡Utica College {rlbull, katrumbu}@utica.edu
Abstract—Cloud service providers offer their customers the
ability to deploy virtual machines in a multi-tenant environment.
These virtual machines are typically connected to the physical
network via a virtualized network conﬁguration. This could be
as simple as a bridged interface to each virtual machine or as
complicated as a virtual switch providing more robust networking
features such as VLANs, QoS, and monitoring. At DEF CON
23, we presented how attacks known to be successful on physical
switches apply to their virtualized counterparts. Here, we present
new results demonstrating successful attacks on more complicated
virtual switch conﬁgurations such as VLANs. In particular, we
demonstrate VLAN hopping, ARP poisoning and Man-in-the-
Middle attacks across every major hypervisor platform. We
have added more hypervisor environments and virtual switch
conﬁgurations since our last disclosure, and have included results
of attacks originating from the physical network as well as attacks
originating in the virtual network.
Keywords—Virtualization, Networking, Network Security, Cloud
Security, Layer 2 Attacks.
I.
INTRODUCTION
With the growing popularity of Internet-based cloud service
providers, many businesses are turning to these services to host
their mission critical data and applications. Cloud customers
often deploy virtual machines to shared, remote, physical com-
puting resources. Virtual machines running in cloud capacity
are connected to the physical network via a virtualized network
within the host environment. Typically, virtualized hosting
environments will utilize either a bridged network interface
or a virtualized switch such as Open vSwitch[1], [2] for Xen
and KVM based environments, or for VMware vSphere and
Microsoft Hyper-V, the built-in virtual switch options or the
Cisco Nexus 1000V[3] series virtual switch. These virtual
switches are designed to emulate their physical counterparts,
however, the majority of them do not provide any of the Layer
2 protection mechanisms found in modern enterprise grade
hardware switches.
It is important for users of multi-tenant cloud services
to understand how secure their network trafﬁc is from other
users of the same cloud services, especially given that vir-
tual machines from many customers share the same physical
resources. If another tenant can launch a Layer 2 network
attack and capture all the network trafﬁc ﬂowing from and to
their virtual machines, this poses a substantial security risk. By
understanding which virtual switches are vulnerable to which
attacks, users can evaluate the workloads they run in the cloud,
consider additional security mechanisms such as increased
encryption and/or increased monitoring and detection of Layer
2 attacks.
In this paper, we present the results of a systematic study
to evaluate the effects of VLAN hopping and ARP poisoning
attacks across ﬁve major hypervisor environments with seven
different virtual network conﬁgurations. This can be consid-
ered a continuation of the work we presented at DEF CON
23 evaluating layer 2 network security[4], but this year we
include testing of more sophisticated network conﬁgurations
including VLANs and mixed physical/virtual environments.
We begin by providing some basic background information
on the general network conﬁguration options available to
virtualized environments. We then present the details of our
test environment and then give detailed descriptions of the
attack methodology used for each of our VLAN hopping
and ARP poisoning scenarios, discuss the results, and provide
mitigation strategies that could help to prevent the attacks from
being successful. We conclude the paper by discussing related
work and summarizing our results.
II.
BASIC NETWORK CONFIGURATION OPTIONS
There are two types of networking conﬁgurations that
are typically used in virtualized environments; bridging and
switching. In this section, we describe both options and discuss
how each one is applied within a virtualized network.
A. Bridging
Bridged mode is the simplest of conﬁgurations providing
an interface dedicated to virtual machine use. A bridge con-
nects two or more network segments at Layer 2 in order to
extend a broadcast domain and separate each of the segments
into their own individual collision domains[5]. A forwarding
table[5], [6] is used to list the MAC addresses associated
with devices located on each network segment connected to
the bridge (Figure 1). Requests are forwarded based upon
contents of this table and the destination MAC address located
in the Ethernet frame. A frame is forwarded across the bridge
only if the MAC address in the destination block of the
frame is reachable from a different segment attached to the
bridge. Otherwise, the frame is directed to a destination address
located on the same segment as the transmitting device or
dropped.
R. Bull, J. Matthews, K. Trumbull
DEF CON 24 - (August 2016)
Fig. 1.
A basic bridge using a forwarding table to pass requests between
two network segments.
In virtualized environments, guest machines utilize user-
space virtual network interfaces that simulate a Layer 2 net-
work device in order to connect to a virtual bridge. Typically,
the virtual bridge is conﬁgured and bound to a physical
interface on the host machine that is dedicated solely to virtual
machine trafﬁc.
B. Switching
Physical switches have the capability of operating at Layer
2 or higher of the OSI model. Switches can be thought of as
multi-port bridges[5] where each port of the switch is con-
sidered as its own isolated collision domain. Instead of a for-
warding table, switches employ a CAM (content addressable
memory) table[5] . Content addressable memory is specialized
memory hardware located within a switch that allows for the
retention of a dynamic table or buffer that is used to map
MAC addresses of devices to the ports they are connected to
(Figure 2). This allows a switch to intelligently send trafﬁc
directly to any connected device without broadcasting frames
to every port on the switch. The switch reads the frame header
for the destination MAC address of the target device, matches
the address against its CAM table, then forwards the frame to
the correct device.
Fig. 2.
A switch and its CAM table.
Virtual switches emulate their physical counterparts and are
capable of providing features such as VLAN trafﬁc separation,
performance and trafﬁc monitoring, as well as quality of
service (QoS) solutions. Virtual machines are connected to
a virtual switch by the way of virtual network interfaces
(VIF) that are similar to the Layer 2 network devices used
in conjunction with virtual bridges.
III.
TEST ENVIRONMENT
In this section, we provide details about our test environ-
ment which consisted of eight server class systems all located
on a test network isolated from local production networks to
avoid impacting them. Each new 1U SuperMicro server system
consists of a quad core Intel Xeon X3-1240V3 processor
running at 3.4GHz, 32GB of memory, a 500GB Western
Digital Enterprise 7400 RPM SATA hard drive, and four on-
board gigabit Ethernet ports. Having four Ethernet ports on
each system allowed us to dedicate a port to the hypervisor
operating system for management purposes, and also gave us
the ﬂexibility to use the other three ports for different virtual
machine network conﬁgurations within each environment. This
especially became useful when conducting the VLAN hopping
experiments which will be discussed in more detail later in the
paper.
Table I provides a list of the hypervisor environments and
operating systems that were installed to the new hardware
along with the virtual switch conﬁguration used within each
system.
TABLE I.
SUMMARY OF HYPERVISOR PLATFORMS AND VIRTUAL
SWITCH CONFIGURATIONS INSTALLED TO THE NEW HARDWARE.
Hypervisor Platform
Virtual Switch
Gentoo OS Xen 4.5.1
Linux 802.1d Bridging
Gentoo OS Xen 4.5.1
Open vSwitch 2.4.0
VMWare vSphere ESXi 6.0.0
Standard ESXi Virtual Switch
MS Server 2012 R2 DataCenter w/Hyper-V
Standard Hyper-V Virtual Switch
MS Server 2012 R2 DataCenter w/Hyper-V
Cisco Nexus 1000v 5.2(1)SM3(1.1a)
ProxMox 3.4 (KVM)
Linux 802.1d Bridging
Citrix XenServer 6.5.0
Open vSwitch 2.1.3
Kali 2.0 Standalone System
No virtual switch
IV.
ATTACKS PERFORMED
Three new Layer 2 networking attacks were explored and
thoroughly tested across all of the hypervisor environments
speciﬁed in Table I: VLAN hopping via Switch Spooﬁng,
VLAN hopping via Double Tagging and an ARP poisoning
Man-in-the-Middle attack. Each attack was performed iden-
tically on all platforms in order to analyze the differences
between the environments when subjected to the different
attack scenarios.
A. VLAN Hopping via Switch Spooﬁng
Switch
spooﬁng
is
an
attack
that
leverages
a
vulnerability[7]
in
physical
Cisco
switches
that
utilize
the proprietary Dynamic Trunking Protocol (DTP) in order
to automatically negotiate trunk links between switches.
The majority of modern Cisco switches have DTP enabled
by default on all ports out of the box so that trunk links
2
R. Bull, J. Matthews, K. Trumbull
DEF CON 24 - (August 2016)
can easily be formed automatically. If physical ports on a
Cisco switch are left in dynamic desirable mode, then an
attacker can connect a system via any free switch port and
fool the switch into thinking that their system is another
switch looking to negotiate a trunk link. If the attack is
successful and a trunk link is formed, the attacker will
have access to all of the VLANs associated with the trunk
thereby giving their system access to any system located
on any of the corresponding VLANs. This attack has been
well documented against physical networks in previous work
performed by Cisco[8] and the SANS Institute[9]. There is
also a powerful open source Layer 2 networking security
auditing tool available called Yersinia[10] that can automate
such a DTP attack against a switched Cisco network.
In this section, we discuss our evaluation of the effec-
tiveness of executing a similar switch spooﬁng attack from
a virtual machine. We attempt this attack within each of seven
test environments connected to a Cisco 2950 switch on the
physical network. For comparison, we begin with a control
scenario in which we connected our physical Kali 2.0 system
to a port on the Cisco 2950 switch to verify that the switch port
can be successfully changed from dynamic desirable mode to
trunking mode, and then moved on to evaluating if the same
attack works when executed from a virtual machine connected
to a virtual switch with an uplink to the same physical Cisco
2950 switch.
We adhere to the best practices guides[11], [12], [13]
offered by the hypervisor manufacturers when setting up
the physical switch ports connected to each virtual switch
environment. Each of these guides suggests that the switch
port be manually setup as a trunk port with access to each of
the VLANs required for the virtual machines hosted within the
environment. When testing the attack from each of the virtual
networks, we made sure to convert the port that was connected
to the system hosting the attacking virtual machine back to
dynamic desirable mode from trunk mode in order to see if the
virtual machine could successfully convert the physical switch
port into trunk mode from the virtual network. In this case,
we are suggesting that when the administrator connected the
hypervisor environment to the physical switch they neglected
to follow the best practices guide and never actually changed
the switch port leaving it at its default setting of dynamic
desirable. Figure 3 illustrates the control scenario using the
physical Kali 2.0 system, and Figure 4 illustrates the scenario
where the attacker is using a Kali 2.0 virtual machine located
within one of the seven virtual test environments.
Fig. 3.
Switch spooﬁng control scenario using a physical Kali 2.0 system
to perform a DTP attack on a physical Cisco 2950 switch in order to gain
unauthorized access to virtual machines on restricted VLANs.
We utilized the Yersinia tool via SSH in command line
mode on each of the attacking systems in order to perform the
attack. The attack process was straight forward and consisted
of the following steps:
Fig. 4.
Switch spooﬁng scenario where the attack is generated from a virtual
machine connected to a virtual switched environment that has a physical uplink
to a Cisco 2950 switch in order to gain unauthorized access to other virtual
machines located on restricted VLANs within other hypervisor environments.
1)
First the Yersinia application was loaded at the com-
mand line with yersinia -I.
2)
Then the proper network interface was selected to
use for the attack, in all cases the default network
interface was used.
3)
Yersinia was then changed to DTP mode by pressing
’g’ and selecting ’DTP Mode’.
4)
The attack was then conducted by pressing the ’x’ key
and selecting option ’1’ to enable trunking mode.
If the attack was successful, the Yersinia application dis-
played TRUNK/AUTO in the DTP mode interface, otherwise
if the attack failed ACCESS/DESIRABLE was displayed. We
also veriﬁed if the attack worked by observing the interface
and trunk status for the respective port associated with the
attacking system on the Cisco switch by using the commands
sh int status and sh int trunk from the console. This allowed
us to see if the switch port was successfully converted into
trunking mode or not. If the port was converted into trunking
mode then the word trunk would be displayed under the VLAN
column in the output of sh int status, and the interface would
also appear in the trunk list with the word auto next to it in
the output of sh int trunk.
The results of this attack varied across the different virtual
network environments as shown in Table II. The control test
from the physical Kali 2.0 system worked as expected and
the port was put into trunking mode from dynamic desirable
mode thus granting access to all of the virtual machines that
were associated with VLANs available on the trunk. We simply
loaded the 8021q kernel module on the attacking system,
associated the target VLAN to the network interface and
provided a valid IP address to the newly created VLAN tagged
interface on the system. The following commands were used
in order to set up this interface. Note that in this example the
VLAN being targeted has the VLAN ID of 20.
modprobe 8021q
vconfig add eth0 20
ifconfig eth0.20 192.168.1.10 netmask 255.255.255.0 up
This created a new network interface on the system labeled
eth0.20 which could be used to access the target systems
located within the isolated VLANs on each of the virtual
networks. The same process was used when testing from
the virtual machines in order to validate the attack. Table
II provides a summary of the results of the switch spooﬁng
experiments.
The attack worked in the control scenario as well as three
out of the seven virtual network environments. We see that if a
virtual environment utilized a virtual bridged interface for vir-
tual machine network connectivity the attack was successful,
3
R. Bull, J. Matthews, K. Trumbull
DEF CON 24 - (August 2016)
TABLE II.
SWITCH SPOOFING ATTACK RESULTS ACROSS THE SEVEN
VIRTUAL TEST ENVIRONMENTS AND A PHYSICAL CONTROL SYSTEM.
3INDICATES THE ATTACK WAS SUCCESSFUL.
Results of Attack
Negotiate
Unauthorized
Platform
Trunk Link
VLAN Access
Physical Kali 2.0 Control System
3
3
OS Xen w/ Linux Bridging
3
3
OS Xen w/ Open vSwitch
VMWare vSphere ESXi
3
3
MS Hyper-V Standard vSwitch
MS Hyper-V Cisco Nexus 1000v
Proxmox
3
3
Citrix XenServer
while environments that utilized a virtual switch for network
connectivity prevented the attack from occurring. It can also be
seen that the ESXi standard virtual switch allowed the attack
to occur, indicating that this virtual switch is acting more like
bridge than a switch. We have posted a demo video[14] of the
successful attack from the ESXi environment to YouTube in
order to document the process that was used on each of the
seven environments for this experiment.
These results were a bit surprising since this attack is
speciﬁc to a Cisco proprietary protocol and one would think
that the attack would not be allowed to be passed from the
virtual network to the physical switch as the DTP probes
should be blocked. This was the case for each of the virtual
switched environments since they were not compatible with
the DTP protocol. However, the bridged interfaces also acted
as a pass through allowing the attack to traverse through the
virtual network and affect the physical switch.
We attempted to perform the attack directly against the
Cisco Nexus 1000v switch to see if its virtual interfaces
could be converted to trunking mode. When conﬁguring the
Nexus 1000v per the deployment guides[15], [16], we found
that even connecting a virtual machine to the virtual switch
required virtual subnets and policies that restricted which