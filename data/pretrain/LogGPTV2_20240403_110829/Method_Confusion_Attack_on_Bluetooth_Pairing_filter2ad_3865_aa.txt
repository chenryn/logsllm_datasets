title:Method Confusion Attack on Bluetooth Pairing
author:Maximilian von Tschirschnitz and
Ludwig Peuckert and
Fabian Franzen and
Jens Grossklags
2021 IEEE Symposium on Security and Privacy (SP)
Method Confusion Attack on Bluetooth Pairing
Maximilian von Tschirschnitz, Ludwig Peuckert, Fabian Franzen, and Jens Grossklags
Email: {maximilian.tschirschnitz,ludwig.peuckert}@tum.de, PI:EMAIL, PI:EMAIL
Technical University of Munich
3
1
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
Abstract—Bluetooth provides encryption, authentication, and
integrity protection of its connections. These protection mech-
anisms require that Bluetooth devices initially establish trust
on ﬁrst use through a process called pairing. Throughout this
process, multiple alternative pairing methods are supported.
In this paper, we describe a design ﬂaw in the pairing mech-
anism of Bluetooth. This ﬂaw permits two devices to perform
pairing using differing methods. While successfully interacting
with each other, the devices are not aware of the Method
Confusion. We explain how an attacker can cause and abuse
this Method Confusion to mount a Method Confusion Attack. In
contrast to other attacks targeting the pairing method, our attack
applies even in Bluetooth’s highest security mode and cannot be
mitigated in the protocol. Through the Method Confusion Attack,
an adversary can inﬁltrate the secured connection between the
victims and intercept all trafﬁc.
Our attack is successful in practically relevant scenarios. We
implemented it as an end-to-end Proof of Concept for Bluetooth
Low Energy and tested it with off-the-shelf smartphones, a
smartwatch and a banking device. Furthermore, we performed a
user study where none of the 40 participants noticed the ongoing
attack, and 37 (92.5%) of the users completed the pairing process.
Finally, we propose changes to the Bluetooth speciﬁcation that
immunize it against our attack.
I. INTRODUCTION
Bluetooth has steadily gained prominence as a communi-
cation protocol for wireless, short-distance, device-to-device
communication. In 2010, the Bluetooth Special Interest Group
(Bluetooth SIG) standardized Bluetooth Low Energy (BLE),
offering a low-cost and low-power communication protocol to
IoT vendors [1]. Further enhancing its popularity, BLE is now
used in a wide range of products in mobile computing, health-
care, ﬁnance, energy, logistics and entertainment applications.
In 2019, the Bluetooth SIG expected that 4 billion Bluetooth
capable devices would be shipped by the end of the year; about
3.2 billion with support for BLE [2]. Many of these devices
handle sensitive data or run critical applications and therefore
require heightened security to protect communications. For
example, smartwatches or ﬁtness trackers often connect to
their owner’s smartphone via BLE to exchange personal user
data and notiﬁcations.
There are known attacks on Bluetooth Classic (BC) and
BLE including downgrade or cryptographic attacks [3, 4, 5,
6, 7]. However, none of them apply to the current Bluetooth
5.2 speciﬁcation if a secure connection mode is used.
To account for the need for security, Bluetooth offers en-
cryption, authentication, and integrity protection on application
request. In order to support these features, a trusted connection
has to be established between the participating devices. This
Maximilian von Tschirschnitz and Ludwig Peuckert are co-ﬁrst authors.
© 2021, Maximilian von Tschirschnitz. Under license to IEEE.
DOI 10.1109/SP40001.2021.00013
1332
procedure, commonly known as pairing process, establishes
trust on ﬁrst use.
In Bluetooth, multiple pairing methods are available. There-
fore, both devices need to mutually agree on one of these
methods. Depending on the pairing method, the user may
be involved and obligated to transfer authentication values
between the devices to authenticate the pairing.
However, some pairing methods pick those authentication
values from the same value space. Furthermore, the Bluetooth
pairing fails to verify whether both devices actually conduct
the same pairing method. It is, therefore, possible that two
separate pairing processes which perform entirely different
pairing methods interact with each other. Even though the user
participates in the pairing process, she is not provided enough
information to recognize such a Method Confusion.
In this paper, we show that an attacker can abuse this ﬂaw
and attack the pairing process by applying an adversarial ac-
tion we call Method Confusion Attack. The attacker primarily
intercepts and hijacks the pairing attempt between two devices
(which have not yet established a trust connection). Subse-
quently, the attacker performs two different pairing methods
with both victims (Method Confusion). The victims at this
point assume to be pairing with their desired peer. The attacker
now gains secret information, which in turn can be used to
inﬂuence the pairing processes in such a way that the Method
Confusion concludes in successful pairings. While the victims
assume to have established a trusted connection, they instead
paired with the attacker, who is now in a stable Man-in-
the-Middle (MitM) position. The cryptography of each single
pairing method itself is not broken by our attack. It cannot
be prevented by Bluetooth’s existing security mechanisms.
Changes to the speciﬁcation are required to mitigate it.
Our contributions can be summarized as follows:
• We introduce the Method Confusion Attack. It abuses
a design ﬂaw to establish a MitM position in a
speciﬁcation-compliant ‘secure’ setup consisting of two
BLE devices.
• We show how our attack impacts millions of device com-
binations by testing the vulnerability of popular off-the-
shelf devices (smartwatch, smartphone, banking device).
• We discuss that in certain implementations our attack
could be spotted and mitigated by an informed and careful
user. We conducted a user study in which none of the 40
participants noticed the attack.
• Based on these ﬁndings, we propose an implementation
hotﬁx for device vendors and also suggest multiple long-
term ﬁxes for the Bluetooth speciﬁcation.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:14 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1. ECDH Public Key Exchange and schematic calculation of shared
secret.
In this work, we describe how our attack targets BLE
devices. While our arguments and experiments will be based
solely on BLE, we also discuss how this attack is applicable
to BC (see Section VIII-C).
We disclosed this design ﬂaw to the Bluetooth SIG. They
acknowledged our ﬁndings and are cooperating with us to
target the issue.
II. BLUETOOTH BACKGROUND
As a primer for the discussion of the attack and related
work, we now provide a short summary of important aspects
of BLE.
Introduced in 2010 by the Bluetooth SIG, BLE is included
in every iteration of the Bluetooth speciﬁcation since version
4.0. Since then, its popularity and market share have been
rapidly growing, replacing BC in many new devices [2].
BLE can provide an encrypted,
integrity-protected, and
authenticated connection between devices, if this is requested
by the application. The basis for these security features is
established in a process called pairing. First, the user has to
enable Bluetooth advertisements, making the device visible to
other Bluetooth devices. Next, the pairing process is initiated
on the other device. At the end of pairing, both devices have
authenticated each other and share a key (e.g., the LinkKey)
for cryptographically secure data transfer.
Since its creation, the Bluetooth speciﬁcation was amended
multiple times with new pairing methods. In the following,
we will discuss methods that concern BLE. Later in Section
VIII-C, we will point out how the pairing methods and
vulnerabilities of BLE correspond and likely translate to the
ones of BC.
• Legacy Pairing is supported in BLE since its introduction
in version 4.0. It acts by establishing a shared secret
between both peers. This is achieved by either entering
the same PIN on both devices, Out of Band (OOB)
(e.g., NFC) or via a preconﬁgured publicly known value
(e.g., Unit Key or Just Works). The established secret is
then used to derive the necessary encryption keys. There
exist simple attack schemes for this form of pairing (cf.
Section IX-A). Connections that rely on this method can,
therefore, not be considered as signiﬁcantly protected.
Hence, we will not describe this method any further.
• Low Energy Secure Connections is supported by BLE
since version 4.2. Low Energy Secure Connections
(LESC) uses an Elliptic Curve Difﬁe-Hellman (ECDH)-
based key exchange on curve P-256 [1, Vol. 3 Part H
Fig. 2. Secure Connections LTK validation. iocapX: IOCaps of X; addrX :
X’s device address; ra, rb, NX: values exchanged in Authentication stage
(cf. Fig. 3,4).
2.3.1] to negotiate a long-term secret. This is a signiﬁcant
improvement over the open key exchange of legacy
pairing since an adversary cannot acquire the key by
passive eavesdropping. Further, ECDH supports perfect
forward-secrecy for the established connection.
If protection against an active MitM attacker is required,
the origin of the key exchange material is veriﬁed by a
‘secure backchannel’. For instance, the user might act as
this backchannel. The veriﬁcation is performed through
one of four Association Models; chosen dependent on
device capabilities and security requirements.
LESC is the method mainly targeted by our attack, we will,
therefore, expand upon it in the following.
A. The Pairing Process
In the following, we describe LESC-based pairing, as it is
deﬁned in the speciﬁcation [1, Vol. 3 Part H 2.3]. The device
initiating the pairing process is referred to as Initiator (I), the
answering device is called the Responder (R).
1) Pairing Feature Exchange: Before the actual pairing
process, both devices exchange information about their re-
spective security requirements and Input-Output Capabilities
(IOCap)s.
2) Public Key Exchange: Both devices exchange their
ECDH Public Key (PK) information and calculate their shared
Difﬁe-Hellman (DH) key. The exchange is visualized in the
schemata of Fig. 1. The (cid:12) operation is to be interpreted as
scalar multiplication on the Elliptic Curve (EC) body.
Please note that the parties have not yet authenticated each
other’s PKs (P KI and P KR). Therefore, the shared secret
(DHK) established using those PKs cannot be trusted.
are
these
previously
exchanged PKs