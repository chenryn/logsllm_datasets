static signals are Thermal Laser Stimulation (TLS) [44] and
spatial PE analysis of off-state leakage current [45], [46].
However, due to the requirements of low noise on the power
line for TLS, and high static current for PE analysis, these
techniques are restricted to speciﬁc applications and targets.
In contrast, optical probing seems to be a more promising
technique, and thus, it is discussed in more detail below.
1) Optical Probing - EOP and EOFM: For optical probing,
a laser beam is focused by a microscope-based setup on the
backside of the IC, and the reﬂected light is analyzed to ﬁnd
data dependencies. Since the refractive index and absorption
coefﬁcient within the silicon depend on the electrical proper-
ties present in the device [47], the laser light irradiating the
IC is modulated and partially reﬂected. A detector processes
the returning light and converts it to an electrical signal. Due
to the transparency of the silicon to the wavelengths above
1.1 µm, optical probing can be carried out in a non-invasive
manner on some devices [48] (see also Section VII-A5).
The laser can either be parked at a speciﬁc location, or
scanned over a larger area of the chip. When the laser remains
at a particular location, the waveform of the signal of interest
can be extracted. This technique is called Electro-Optical
Probing (EOP)3. To achieve a sufﬁciently-high SNR, many
repetitions of the same waveform must be integrated. On the
other hand, when the laser scans an area, the detected signal
can be fed into a spectrum analyzer set to a narrowband ﬁlter
for ﬁnding areas on the chip that operate with a speciﬁc fre-
quency. This technique is known as Electro-Optical Frequency
Mapping (EOFM)3. The result of an EOFM measurement is
a 2-D image showing a signature at areas switching with the
frequency of interest, see Fig. 1a.
Two crucial steps are involved in an attack scenario where
the adversary tries to localize and probe a set of registers/me-
mories using optical probing [48], [49]. First, the attacker
induces a known frequency into the device (e.g., by supplying
the clock or rebooting the chip at a speciﬁc frequency) to
activate the target registers or memories, see Fig. 1a. Second,
the device is operated in a loop, and EOP can be used to
read out the values of each individual register. Note that if
the sensitive data are processed in parallel, the content of the
2For a discussion on cost and availability of such FA machines, see
Section VII-A3.
3When using a coherent light source, EOP is typically called Laser Voltage
Probing (LVP), and EOFM is called Laser Voltage Imaging (LVI).
© 2020 IEEE
3
High-Ohmic Channel
Low-Ohmic Channel
LLSI Modulation Areas
Simpliﬁed LLSI Image:
P2
N2
P1
N1
VCC
GND
Fig. 2. Schematic of a CMOS memory cell and the expected 2-D LLSI image
for the cell. For simplicity we omit the input transistors. Only the transistors
in the on-state are expected to give a strong LLSI signal, therefore, the logic
state of the memory cell can be deduced. Figure based on [50].
registers can be directly obtained from the EOFM image [49].
As a result, EOFM can be deployed to localize and probe the
secret simultaneously on a cryptographic device. However, the
downside of this approach is that only dynamic signals which
are available for an arbitrary number of repetitions can be
extracted. Therefore, classical EOP/EOFM cannot be used to
extract static data, i.e., the state of memory elements that are
only available once and at a certain point in time.
2) LLSI: Laser Logic State Imaging (LLSI) makes the read-
out of static signals possible. The technique was introduced as
an extension to EOFM to the failure analysis community [50].
For LLSI the supply voltage is modulated with a known
frequency. Due to the modulation of the transistor channel’s
electric ﬁeld caused by the supply voltage modulation, tran-
sistors in the on-state give clear signatures on the LLSI image,
while this is not the case for transistors in the off-state, see
Fig. 1b. This observation can be used to deduce the logical
state of, for instance, a memory cell.
Fig. 2 shows a CMOS memory cell consisting of two cross-
coupled inverters. Each inverter consists of one PMOS and
one NMOS transistor, connected between VCC and GND. The
input to the CMOS inverter directly dictates whether its NMOS
is in the on-state and the PMOS transistor in the off-state, or
vice-versa. In both cases, only one transistor per inverter is
in the on-state. Consequently, when knowing the transistors’
states, the value of the inverters’ input can be derived. By
modulating the power supply of the device, the channel’s
electric ﬁeld of all transistors in the on-state modulates with
the induced frequency and, as explained above, that can be
detected using LLSI. In the example given in Fig. 2, the top
right and bottom left transistors are in the on-state, and the
expected simpliﬁed LLSI image shows a clear signature at
those two locations. With the inverted input values, the other
two transistors would be in the on-state, resulting in clear
signatures on the top left and bottom right of the image. Hence,
it can be concluded that all logic states can be extracted using
one LLSI measurement.
© 2020 IEEE
4
III. THREAT MODEL
With our attack, we target hardware implementations of
a block cipher protected by some masking countermeasure.
While assuming here that the input (plaintext/ciphertext) and
the key are shared by Boolean masking, we do not presume
any speciﬁc masking scheme. Note that the key has to be
stored in a masked format on the chip, and it has to be re-
masked with fresh masks every time it is used. Otherwise,
template attacks [51] or classical optical probing [49] on
key or key schedule might be possible. The cipher might be
implemented on an FPGA or realized as an ASIC. Following
the common serialized or round-based design architecture, or
as being enforced by the glitch-resilient masking schemes,
the implementation should make use of registers to store the
cipher’s intermediate values.
We stress that in our technique, we are not making use of
any speciﬁc construction or feature of any certain masking
scheme. We just suppose that
the state register (and key
register) are masked, which is a general statement and does not
deal with any particular technique to realize masking schemes
in hardware, like TI [34], DOM [52], GLM [23], CMS [20],
UMA [22], etc. Note that these different masking schemes
deﬁne various techniques to realize non-linear functions (like
the ciphers’ Sboxes), but they all have in common that the state
and key registers are masked. In short, even if the underlying
Boolean masking scheme of the target device does not follow
any of the known hardware masking schemes, our approach
is still a valid attack vector.
Under the above assumptions, we consider a potential
attacker, who can take snapshots of the hardware state using
LLSI and extract the values stored in the registers. To read out
the content of registers at a speciﬁc clock cycle, the attacker
should either halt the clock or the content should remain
in the registers and not get cleared after the algorithm has
terminated (see Section VII-A1 for a detailed discussion on
clock control). For the purpose of extracting the secret, the
attacker could either directly target the (masked) key registers
or some registers containing intermediate values of the cipher,
from which the secret can be deduced. Which registers the
attacker chooses to target, depends on her knowledge about
the netlist and layout of the implementation. Regarding this,
two scenarios can be discussed (see Fig. 3). Scenario 1: If the
attacker knows where the key registers are located on the chip,
possibly learned by reverse engineering, she could directly
target them. Still, due to the underlying masking scheme, she
has to target all shares of the key registers. We consider this as
the most straightforward scenario and cover it in Section IV-A.
Scenario 2: If the attacker does not know which registers
on the chip contain the secret, some knowledge about the
algorithm can help with the key extraction, as explained in
Section IV-B. Related to this, we also propose a method to
differentiate registers from other combinatorial gates on a chip,
if the attacker does not even know the areas on which the
registers of the design are placed.
Real-World Targets. To demonstrate how an adversary might
Known key
register
locations
Unknown
key register
locations
Key
registers
Hardware
snapshots
All registers in
multiple
clock cycles
011..
000..
110..
Extracted
bit values
0101..
0010..
1110..
Key
SAT solver
Knowledge on
architecture
Fig. 3. Two approaches with different assumptions: known key register locations (Section IV-A) and unknown key register locations (Section IV-B).
beneﬁt from such an attack in the real world, we provide some
examples for the target devices. One example would be payTV
smartcards, which are all programmed with the same key to de-
crypt the scrambled satellite signal in the receivers using some
block cipher. By extracting the encryption key, the adversary
can counterfeit the payTV cards and sell them in the black
market. Consequently, extracting the secret from one device
breaks the security of all devices in the ﬁeld. Another example
would be every microcontroller/microprocessor or FPGA that
supports ﬁrmware or bitstream encryption, respectively. If the
adversary can break this protection mechanism by extracting
the key, she can decrypt the ﬁrmware/bitstream and clone,
reverse-engineer, or tamper with the IP. Note that the adversary
is not interested in the hardware itself, and hence, even if the
chip gets unusable during the key extraction, the main assets,
e.g., key or ﬁrmware, are still valuable for the adversary.
IV. APPROACH
This section describes methods employed to launch our
attack in Scenario 1 and Scenario 2 explained in Section III.
A. Scenario 1: Known Register Locations
Here we assume that the location of the key registers (i.e.,
registers used to store key shares) on the chip is known to the
adversary. In this case, at some point in time, a given secret
key (in a shared form) is loaded in these key registers. Once
the attacker knows the corresponding clock cycle, she can take
snapshots of the chip using LLSI. The attacker, in principle,
can learn the location of these registers by reverse-engineering
the layout and netlist of the chip. In the case of an ASIC, this
can be done by de-layering the chip and applying some tools to
extract the netlist (e.g., ChipJuice [53]). Interestingly enough,
the whole procedure is also available as a service, e.g., [54]. If
the implementation platform is an FPGA, reverse-engineering
the netlist from the bitstream is essential [55]–[57]. When the
bitstream is available solely in an encrypted form, the attacker
ﬁrst needs to decrypt it. This is possible, as most cryptographic
ASIC cores on mainstream SRAM-based FPGAs, responsible
for decrypting the bitstream, are either not protected against
SCA or contain other implementation vulnerabilities [44],
[48], [58]–[61]. Moreover,
is worth mentioning that an
attacker, who is involved in the development and fabrication
process of the IC or has enough inﬂuence on those entities,
it
© 2020 IEEE
5
might possess parts or entire information necessary to localize
the (key) registers on the chip.
Automatically extracting bit values from snapshots. To ex-
tract the values from the register snapshots, the attacker ﬁrst
has to discover the data dependency in the LLSI measure-
ments. To this end, if she has control over the data written
in the registers, she can take two snapshots of a register
cell containing once the value 0 and another time 1. By
subtracting these LLSI images from each other, the attacker
can clearly localize the data dependency. Upon knowing how
to distinguish between 0 and 1, she can extract the values in
an automated fashion.
For this purpose, we propose an approach based on clas-
sical image processing techniques, namely image registration
through cross-correlation, cf. [62]. For this, the corners of each
register cell (containing one bit of data) should be known with
sufﬁcient precision so that the attacker can cut the snapshot
of a single register cell from a potentially larger image. For
selecting the cell boundaries on an FPGA, domain knowledge
can help as the registers are expected to be arranged in regular
structures. In the lack of such knowledge, boundaries can
be determined by conducting image segmentation methods,
e.g., the watershed transformation [63]. Besides, to reduce the
impact of the noise, the two-dimensional (2-D) Wiener ﬁlter
can be applied [64], which can remove the noise by applying a
pixel-wise adaptive low-pass Wiener ﬁlter to grayscale images.
After these steps, the attacker can choose two snapshots
of cells as reference samples (i.e., templates): one containing
0, and the other one 1 (such two different
images can
be easily found). Afterward, the attacker applies the cross-
correlation over all the snapshots of register cells. Note that,
since the positions of the individual register cells are given
to the algorithm, the cross-correlation function (instead of
the normalized one) can be employed to conduct the image
registration. The reference sample that ﬁts best to the targeted
register cell determines the bit value contained in the snapshot.
Remark 1. If giving labels to register cells on a training device
is not feasible, the adversary still ends up with two groups of
cells labeled as (0, 1) or (1, 0). Consequently, she obtains two
candidates for the secret key (veriﬁed by a single plaintext-
ciphertext pair). Therefore, having access to a training device
is not an essential fact.
Remark 2. The adversary should not necessarily look for the
key registers. Recovering the state of the cipher – either at
initial cipher rounds when the input is known or at ﬁnal
cipher rounds when the output
is known – would sufﬁce
to reveal the key completely or partially, depending on the
underlying cipher. For example, having the state of AES-128
encryption at the ﬁrst round (after AddRoundKey, SubBytes,
or MixColumns) is enough to recover the entire 128-bit key,
but for AES-256, two consecutive rounds should be covered.
B. Scenario 2: Unknown Register Locations
If the location of the registers in the underlying design is
not known to the adversary, the attack seems to be nontrivial.
Our proposal in such a case is to follow a two-step approach:
i) distinguishing the registers from combinatorial cells, and ii)
making use of a SAT solver to reveal the location of registers
of interest, and ﬁnally, extracting the secret.
1) Identifying register cells: To localize all register cells
of the design on a chip, we propose an approach that takes
advantage of the difference between sequential and combina-
torial logic. In synchronous designs – as the most common
design architecture – every register is driven by the system
clock4. Consequently, all register cells have a clock input
transistor. In contrast, combinatorial logic is data driven, and
thus has no clock input. By conducting a traditional EOFM
measurement at the clock frequency, the adversary can localize
those clock input
transistors. The identiﬁed areas are the
candidates for the location of register cells. Furthermore, in
those areas, conducting LLSI experiments with different data
might give hints on the existence of a register. In doing so,
if the attacker ﬁnds at least one register cell, she can attempt
to ﬁnd similarities between its corresponding area and other
candidate regions identiﬁed by an optical image or the LLSI
image. Clearly after this step, the procedure of the automatic
extraction of bit values from the snapshots, as explained in
Section IV-A, can be followed.
i.e., what
2) Using SAT solver: Here, we suppose that the regis-
ters are distinguished from the other cells (e.g., through the
technique given above), and their values can be recovered
at multiple clock cycles, following the above instructions.
We also suppose that the design architecture is known to
the adversary,
is processed and stored at every
clock cycle. However, it is not known to the adversary which
recovered value belongs to which register cell. Having the
above assumptions in mind, we propose to use a SAT solver
to conduct the attack. It is noteworthy that SAT solvers have
also been used to construct algebraic side-channel attacks [65],
[66], where a SAT is written based on, e.g., the Hamming
weight of the intermediate values recovered by a Template at-
tack. We made use of CryptoMiniSat 5 [67], which, compared
to other alternatives, can more easily deal with XOR clauses.
focus on a single snapshot at a certain
clock cycle leading to binary observations denoted by
{ω0, . . . , ωn−1∈ F2} corresponding to n registers of the de-
sign. Some registers belong to the control logic (ﬁnite-state