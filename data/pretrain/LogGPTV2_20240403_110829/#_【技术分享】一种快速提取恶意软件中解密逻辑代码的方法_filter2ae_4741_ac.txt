    #else
                ADD ESI, 0x58; //Need for Pythnon CTypes return parameters!
    #endif
                RETN;
            }
        }
        return TRUE;
    }
通过IDA Pro或者例如Immunity
Debugger这样的反汇编程序来获取汇编代码并不难，但是在获得之后，还需要我们进行一些处理。特别需要注意的一个地方就是在代码块中进行的函数调用。在汇编中，每一次调用过程都需要一个名称（标签），并且所有的代码需要按照调用顺序正确地排列，否则将产生意外的结果，或者是直接崩溃。因此，我们在复制每个函数的汇编代码时都需要非常谨慎。在刚刚的例子中，为了方便快速，我直接使用了“check”来表示函数名称或者跳转的位置。
由于LZW使用索引将数据编码到字典中，解压例程所做的第一件事，就是分配内存中的16512字节（0x4080）的缓冲区来创建字典。在汇编中，它使用C++
API
malloc分配缓冲区，并将缓冲区设置为NULL（这是malloc的工作方式）。有一种更简单有效的方法，是使用calloc函数，在减少指令数量的前提下实现缓冲区的分配。
我们首先在C++中进行编码，然后再Visual
Studio中使用__asm关键字内嵌汇编语言。在__asm内的代码块就是我们放置汇编指令并进行必要调整的位置：
**将EBX设置为0；**
**从栈中减去64字节（0x40），以防止我们覆盖任何栈的数据；**
**将栈指针保存到ESI中；**
**EDI 指向我们通过calloc创建的字典缓冲区；**
**EAX 指向我们的源数据；**
**EDX 指向我们的目标缓冲区。**
为了满足解压缩算法的要求，我们手工添加了下面的9行代码，其余代码直接从Immunity Debugger中复制即可：
    xor ebx, ebx;          //Need to clear ebx register 
    SUB ESP, 0x40;    //Need to subtract stack, so we don’t overwrite some Ctypes return data
    MOV ESI, ESP;
    PUSH EAX;
    POP EDI;    //Our Temp Buffer
    PUSH[EBP + 8];  //Source Buffer
    POP EAX;
    PUSH[EBP + 0xC];  //Destination Buffer
    POP EDX;
此时，我们需要做的就是更新汇编调用，跳转到有意义的名称，并按正确的顺序来排列它们。现在代码应该可以编译并运行了。但当例程结束后，我们必须手动恢复栈，从而让Python
ctypes返回到正确的调用方。我们添加了以下代码：
    Finished:
    MOV ESP,EBP;
    POP EBP;
    //Debug VS Release build have different stack sizes.  The following is needed for the return parameters and CTYPES
    #ifdef _DEBUG
    ADD ESI, 0x120;
    #else
    ADD ESI, 0x58; //Need for CTypes return parameters!!!!
    #endif
    RETN;
    }
在这里，我们尝试恢复堆栈指针寄存器（SP）和基址指针寄存器（BP），并将0x120或0x58添加到ESI，具体要取决于VS的版本是测试版还是正式版。
**调用DLL**
至此，我们就有了一个DLL，可以开始调用它，并通过Python和ctypes来传递它的数据。下面这个Python脚本的作用就是利用这个DLL，来解密Reaver的数据：
    #-------------------------------------------------------------------------------    # Name:        LzwDecompression
    # Purpose:
    #
    # Author:      Mike Harbison Unit 42
    #
    # Created:     11/11/2017
    #-------------------------------------------------------------------------------    from ctypes import *
    import sys
    import os.path
    import argparse
    import re,struct
    import subprocess, random
    # MAP types to ctypes
    LPBYTE = POINTER(c_ubyte)
    LPCSTR = LPCTSTR = c_char_p
    BOOL = c_bool
    if os.name != 'nt':
        print ("Script can only be run from Windows")
        sys.exit("Sorry Windows only")
    def assert_success(success):
        if not success:
            raise AssertionError(FormatError())
    def LzwDecompress(hdll,data):
        inbuf = create_string_buffer(data)
        outbuf= create_string_buffer(len(data))
        success = hdll.Decompress(inbuf,outbuf)
        assert_success(success)
        return outbuf.raw
    def CabExtract(match,pargs,data):
        offset = match.start()
        CabHeaderMagicValue = offset + 124
        CabSizeStart = offset + 132
        CabFileNameStart = offset + 184
        CabFileNameEnd = data[CabFileNameStart:].find('')
        CabName = data[CabFileNameStart:CabFileNameStart+CabFileNameEnd]
        CabSize = struct.unpack("L",data[CabSizeStart:CabSizeStart+4])[0]
        CabData = data[CabHeaderMagicValue:CabHeaderMagicValue+CabSize]
        FileName=pargs.input_file
        #Add magic value
        Cab="4D534346".decode('hex')+CabData[4:]
        print "Found our CAB Data at file offset-->{}".format(offset)
        CabDir=os.path.splitext(FileName)[0]
        if not os.path.exists(CabDir):
            os.makedirs(CabDir)
        else:
            CabDir+='_'+str(random.randint(1111,9999))
            os.makedirs(CabDir)
        CabFile=os.path.basename(FileName).split('.')[0]+".cab"
        with open(CabDir+"\"+CabFile,"wb") as fp:
            fp.write(Cab)
        print "Wrote CAB File-->%s"%CabDir+"\"+CabFile
        print "Expanding CAB File %s"%CabName
        args = [" -r ",CabDir + "\" + CabFile,' ',CabDir]
        result=subprocess.Popen("expand "+"".join(args), stdout=subprocess.PIPE)
        result.wait()
        if "Expanding Files Complete" not in result.stdout.read():
            print "Error Expanding CAB file"
            sys.exit(1)
        ExpandedFile = CabDir + "\" + CabName
        if not os.path.isfile(ExpandedFile):
            print "Did not find our expanded file %s"%CabName
            sys.exit(1)
        print "Check directory %s for expanded file %s"%(CabDir,CabName)
        return ExpandedFile
    def DecompressRoutine(pargs,hlzw,data):
        LzwCompPattern = "x08x00xA5x04x01x12x03"
        regex = re.compile(LzwCompPattern)
        for match in regex.finditer(data):
            offset=match.start()
            print "Found our compression header at file offset-->{}".format(offset)
            Deflated=LzwDecompress(hlzw,data[offset:])
            if Deflated:
                with open(pargs.out_file, "wb") as wp:
                    wp.write(Deflated)
                print "Wrote decompressed stream to file-->%s"%(pargs.out_file)
                return True
        return False
    def Start(pargs,hlzw,data):
        CabCompPattern = bytearray("46444944657374726F790000464449436F7079004644494973436162696E657400000000464449437265617465000000636162696E65742E646C6C004D6963726F736F6674")
        #Check For CAB file magic value first
        found = False
        regex = re.compile(CabCompPattern.decode('hex'))
        for match in regex.finditer(data):
            found = True
            ExpandedFile=CabExtract(match,pargs,data)
            if ExpandedFile:
                with open(ExpandedFile,"rb") as fp:
                    ExpandedData=fp.read()
                    DecompressRoutine(pargs,hlzw,ExpandedData)
                return True
        if not found:
            result=DecompressRoutine(pargs,hlzw,data)
            if result:
                return True
            else:
                return False
    def main():
        parser=argparse.ArgumentParser()
        parser.add_argument("-i", '--infile' , dest='input_file',help="Input file to process",required=True)
        parser.add_argument("-o", '--outfile', dest='out_file',help="Optional Output file name",required=False)
        results = parser.parse_args()
        if not results.out_file:
            results.out_file=results.input_file + "_dec.txt"
        lzwdll="LzwDecompress.dll"
        lzwdllpath = os.path.dirname(os.path.abspath(__file__)) + os.path.sep + lzwdll
        if os.path.isfile(lzwdllpath):
            lzw = windll.LoadLibrary(lzwdllpath)
            lzw.Decompress.argtypes=(LPCSTR,LPCSTR)
            lzw.Decompress.restypes=BOOL
        else:
            print ("Missing LzwDecompress.DLL")
            sys.exit(1)
        with open(results.input_file,"rb") as fp:
            FileData=fp.read()
            Success=Start(results,lzw,FileData)
            if not Success:
                print("Did not find CAB or Compression routine in file %s")%(results.input_file)
    if __name__ == '__main__':
        main()
为适应Reaver的多个变种，我们不久前更新了这个Python脚本。新的Reaver变种使用了微软的CAB包作为第一层压缩。该脚本执行以下操作：
**1. 加载我们的DLL LzwDecompress.dll。**
**2. 尝试定位到修改后的LZW头部或Microsoft CAB的签名值。**
**3.
对于LZW解压缩例程，创建的两个字符串缓冲区作为指向缓冲区的指针。源缓冲区是指向需要解压缩的数据的指针，目标缓冲区是我们存储解压缩后数据的位置。**
**4. 调用Decompress，并将其传递给我们的两个参数。**
**5. 将数据写入文件。**
下面是脚本运行截图：
下面的示例是使用LZW来解压缩一个旧版本的Reaver恶意软件例程。解压的数据将写入到文本文件中，如下所示：
    RA@10001=ole32.dll
    RA@10002=CoCreateGuid
    RA@10003=Shlwapi.dll
    RA@10004=SHDeleteKeyA
    RA@10005=wininet.dll
    RA@10006=InternetOpenA
    RA@10007=InternetOpenUrlA
    RA@10008=InternetCloseHandle
    RA@10009=HttpQueryInfoA
    RA@10010=InternetReadFile
    [TRUNCATED]
    RA@10276=image/jpeg
    RA@10277=netsvcs
    RA@10282=Global%sEvt
    RA@10283=temp%sk.~tmp
    RA@10284=Global%skey
    RA@10285=%08x%s
    RA@10286=%s
    RA@10287=%s*.*
    RA@10288=%s%s
    RA@10289=CMD.EXE
    RA@10290=%s=
    RA@10311=%sctr.dll
    RA@10312=uc.dat
    RA@10313=ChangeServiceConfig2A
    RA@10314=QueryServiceConfig2A
下面是新版本Reaver恶意软件的例子，它使用Microsoft CAB添加了一层压缩：
在这里，脚本成功将文件解压缩，并读取解压缩后的文件，最终找到了解压缩例程的魔法值，并将解压数据写入文本文件中。
**总结**
****
****通过本文，我们了解到，可以直接利用汇编中已有的解压缩例程，将其放在Visual
Studio中编译成DLL，最后再使用Python来调用。由于我们仅仅需要调用该例程来传递恶意软件的数据，因此并不需要再在C或者Python中重新调用接口。
上述方法的实现，需要我们对于汇编语言、栈以及例程中所需的寄存器有足够了解。一旦掌握了这些知识，该方法就很容易实现，并且可以用于任何函数之中。