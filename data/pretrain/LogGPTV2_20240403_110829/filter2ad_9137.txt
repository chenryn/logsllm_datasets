最近，我开始学习HackerOne 101的教学视频，希望通过这些教学内容来构建和完善我的网络安全知识体系。在观看了第二节关于Web安全的介绍后，我对Web方向的学习有了初步的认识。在此，我推荐具有一定英语水平的同学观看HackerOne 101的教学视频（词汇并不复杂，结合搜索引擎可以轻松理解）。

### 课程概述
该课程首先介绍了Web的基础知识，如HTTP协议、Cookies和HTML等。尽管这些是基础概念，但有几个特定的话题引起了我的兴趣。本文将重点讨论以下几点：

#### 1. MIME Sniffing (MIME嗅探)
**问题根源：**
早期版本的浏览器（例如IE7/6）不仅依赖于HTTP报文中的`Content-Type`头来解析响应内容，还会根据响应体的实际内容自行判断其类型。比如，即使`Content-Type`设置为`text/plain`，如果响应体包含的是HTML代码，IE浏览器会将其识别为`text/html`并执行渲染逻辑，这容易导致跨站脚本攻击（XSS）。

**攻击示例：**
攻击者可以通过将恶意的XSS脚本插入图片文件中，并上传到某个网站上。当用户请求该文件时，老旧浏览器可能会忽略`Content-Type`头部信息，直接按照HTML格式解析响应内容，从而触发XSS攻击。

**解决策略：**
一种有效的缓解措施是让资源服务器使用不同于主网站的域名。利用同源策略，阻止跨域请求及解析行为，从而防止此类嗅探攻击的发生。

#### 2. Encoding Sniffing (编码嗅探)
**问题背景：**
这一漏洞主要源于UTF-7的存在以及在未明确指定编码格式时，浏览器依据内容自动推断编码方式的行为。攻击者可借此机会通过特殊编码绕过输入验证机制。例如，在XSS Payload中嵌入UTF-7编码的数据以规避符号过滤规则。

**具体案例：**
假设我们的XSS Payload原本为 `<script>alert(1)</script>` ，但后台过滤了`<` 和 `>` 符号。此时，我们可以通过使用UTF-7编码后的形式 `+ADw-script+AD4-alert (1); +ADw-/script+AD4-` 来实现绕过。

**关于UTF-7:**
- **起源与标准状态：** UTF-7最初是在一个实验性通信协议中提出的（RFC 1642），旨在提供一种邮件安全转换格式。然而，随着RFC 2152的发布，原提案被取代。需要注意的是，尽管UTF-7被提及于IANA字符集列表中，但它并不是Unicode官方支持的标准之一。
- **设计目的：** UTF-7的设计初衷是为了适应SMTP仅支持7位字符传输的限制，它提供了一种将Unicode转换成7比特US-ASCII字符的方法。
- **编码规则：** UTF-7将字符分为两类——“直接字符”（包括数字、字母及部分标点）和“选项直接字符”。前者可以直接表示，后者则需先编码为UTF-16再转换为Base64格式，并以`+`开头、非Base64定义字符结尾的形式呈现。

总结来说，了解并防范MIME嗅探和编码嗅探对于提升Web应用的安全性至关重要。希望上述分析能够帮助大家更好地理解和应对相关风险。