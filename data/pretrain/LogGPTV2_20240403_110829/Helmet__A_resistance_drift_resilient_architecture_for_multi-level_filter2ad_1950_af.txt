e
c
n
a
m
r
o
f
r
e
P
d
e
z
i
l
a
m
r
o
N
1.04
1.03
1.02
1.01
1.00
0.99
0.98
0.97
0.96
None
InvRot
InvRot+Hyb
InvRot+Hyb+PageAlloc
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
H1
H2
H3
M1
M2
M3
L1
L2
L3
gmean
Figure 11. The impact of reduced error rate on performance 
Compared  to  the  conservative  approach,  our  proposed 
techniques  allow  a  smaller  margin  to  meet  the  reliability 
requirement  with  lower  cost,  as  is  shown  in  Figure  8.  For 
example,  to  ensure  a  readout  error  rate  less  than  1%,  a  1.5uA 
margin  size  is  required  by  the  “None”  design,  since  the  margin 
has  to  be  tailored  to  the  worst  case  so  that  the  error  rate 
requirement can be satisfied across all workloads. With our drift-
tolerance  techniques  employed,  this  margin  requirement  can  be 
relaxed  to  0.5uA,  because  all  workloads  show  a  less  than  1% 
error  rate  in  the  “InvRot+Hyb+PageAlloc”  case  with  0.5uA 
margin size.  
Figure 11 shows the normalized harmonic IPC values for the 
proposed  techniques  over  that  of  “None”  case.  The  bar  labeled 
“gmean”  denotes  the  geometric  mean.  Across  all  simulated 
workloads, we observed an up to 2.2% performance improvement 
for the “InvRot+Hyb+Page” design over the baseline “None” for 
the 0uA margin size. This is because the small margin size leads 
to a high error rate and consequently a long latency for correcting 
errors is required, thereby incurring a performance penalty in the 
baseline  case.  The  reduced  error  rate  due  to  our  techniques  can 
provide  performance  benefits  that  may  completely  offset  the 
overhead  caused  by  using  our  techniques.  This  is  especially  the 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:27:46 UTC from IEEE Xplore.  Restrictions apply. 
206case  for  workloads  H3  and  M2,  which  achieve  more  than  80% 
reduction  in  error  rate  after  applying  drift-tolerance  techniques. 
On the contrary, a wider margin (i.e. 2uA) limits the benefit that 
is  provided  by  our  techniques  and  therefore  this  limited  benefit 
cannot  offset  the  performance  overhead  associated  with  the 
proposed schemes.  
B. 
Impact on Power and Endurance 
Figure  12  shows  the  power  consumption  of  the  memory 
system for each margin setting and Figure 13 shows the estimated 
lifespan.  All  values  reported  are  normalized  to  the  “None”  case 
with a 0uA margin setting. For power estimation, we assume the 
write  power  increases  with  the  enlarged  margin  while  the  read 
power per access remains constant. To estimate lifespan, we run 
each workload repeatedly and track the number of writes to each 
bit.  We  use  1×105  instead  of  1×108  writes  in  our  lifetime 
estimation  due  to  the  extremely  long  simulation  time  to  collect 
1×108  writes  to  any  PCM  cell  and  we  assume  ECC  is  disabled. 
With  our  accelerated  estimation  method,  when  a  bit  has  more 
than 1×105 writes to it, we mark it as a failed cell. We defined a 
memory  access  failure  when  there  is  a  failed  bit  in  a  memory 
reference.  The  lifetime  of  the  PCM  system  is  estimated  as  the 
number of cycles elapsed before the first memory access failure 
occurs.  
As  shown 
in  Figure  12, 
the  PCM  memory  power 
consumption  increases  significantly  with  the  increased  margin 
size  due  to  the  elevated  programming  power  used  to  ensure  a 
wider  margin.  This  high  write  power  also  causes 
the 
exponentially  degraded  endurance  shown  in  Figure  13.  As 
discussed in Section VI.A, to ensure a readout error rate of less 
than 1% across all simulated workloads, the “None” case requires 
a  margin  size  of  1.5uA,  while  the  “InvRot+Hyb+PageAlloc” 
design can achieve the same goal with a smaller margin of 0.5uA. 
to 
relative 
endurance  degradation 
We  summarize  the  normalized  power  and  endurance  results  for 
both designs in Table 5. As can be seen, our schemes with a small 
margin size consume 28% (i.e. 1-1.26/1.76≈28%) less power than 
that of the “None” case with wider margin. The power increase in 
the  “None”  case  is  a  result  of  the  significantly  increased  power 
used  for  each  programming  operation  and  the  total  power 
consumption  of  the  PCM  system  is  typically  dominated  by  the 
write power. The elevated programming power per write not only 
causes higher power consumption but also results in a 15X (i.e. 
0.684/0.046≈15) 
the 
“InvRot+Hyb+PageAlloc”  case.  For  a  given  margin  setting, 
“InvRot” consumes 2%-5% more power than that of the “None” 
case due to the power overhead of restoring coded data back to 
the  original  value  during  memory  read  references,  whereas  the 
data  inversion  and  rotation  has  negligible  impact  on  lifespan. 
Although “InvRot+Hyb” involves page migration, we found that 
“InvRot+Hyb” only incurs 4% more power. This is because (1) a 
small  percentage  of  the  pages  are  switched  to  MLC  mode, 
thereby invoking a small number of page migrations, and (2) the 
writes to SLC pages consume less power than that of MLC pages 
since  the  stair-case  up  sequence  is  not  performed.  This  power 
savings offset the power overhead associated with page migration. 
“InvRot+Hyb”  shows  negligible  impact  (less  than  3%)  on 
endurance degradation of PCM lifespan, since the page migration 
incurs  only  one-time  endurance  overhead.  Similar 
the 
“InvRot+Hyb” case, “InvRot+Hyb+PageAlloc” suffers 4% more 
power  overhead  than  the  “InvRot”  case  due  to  the  additional 
power  consumed  by  the  thermal  network  and  executing  OS 
temperature-aware  page  allocation.  However, 
routines 
“InvRot+Hyb+PageAlloc” 
additional 
endurance  overhead  on  top  of  the  overhead  incurred  in  the 
“InvRot+Hyb” case.  
introduce 
doesn’t 
for 
to 
None
InvRot
InvRot+Hyb
InvRot+Hyb+PageAlloc
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1
0
.
2
0
.
0
5
.
0
0
.
1
5
.
1