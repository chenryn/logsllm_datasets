}i∈[h]). (PA can obtain {K i
¯αi
¯αi
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:45 UTC from IEEE Xplore.  Restrictions apply. 
1081
Protocol Πp,r
spsVOLE
sVOLE, which returns ∆ to PB.
Initialize: This procedure is executed only once.
• PA and PB send init to F p,r
Extend: This procedure can be run multiple times. On input
n = 2h, the parties do:
1) PA and PB send (extend, 1) to F p,r
sVOLE, which returns
(a, c) ∈ Fp × Fpr to PA and b ∈ Fpr to PB such that
c = b + ∆ · a. Then, PA samples β ← F∗
p, sets δ := c, and
sends a(cid:48) := β−a ∈ Fp to PB, who computes γ := b−∆·a(cid:48).
Note that δ = γ + ∆ · β ∈ Fpr , so the parties now hold [β].
PA samples α ← [0, n) and deﬁnes u ∈ Fn
p as the vector
that is 0 everywhere except u[α] = β.
2) PB samples s ← {0, 1}κ, runs GGM(1n, s) to obtain
:= vj for
j ∈ [0, n). PA lets ¯αi be the complement of the ith bit of the
binary representation of α. For i ∈ [h], PA sends ¯αi ∈ {0, 1}
1) to FOT, which returns K i
to FOT and PB sends (K i
0, K i
to PA. Then PA runs {vj}j(cid:54)=α := GGM(cid:48)(α,{K i
¯αi}i∈[h]).
i∈[0,n) v[i] ∈ Fpr to PA. Then, PA
pr as the vector with w[i] := vi for i (cid:54)= α and
deﬁnes w ∈ Fn
. Note that w = v + ∆ · u.
(cid:0){vj}j∈[0,n),{(K i
3) PB sends d := γ −(cid:80)
w[α] := δ −(cid:16)
d +(cid:80)
(cid:1), and sets v[j]
1)}i∈[h]
0, K i
(cid:17)
¯αi
i(cid:54)=α w[i]
PA then computes x∗ := β · χα − x ∈ Fr
Consistency check:
4) Both parties send (extend, r) to F p,r
(x, z) ∈ Fr
pr to PA and y∗ ∈ Fr
p × Fr
z = y∗ + ∆ · x.
sVOLE, which returns
pr to PB such that
(cid:80)r−1
5) PA samples χi ← Fpr for i ∈ [0, n), and writes χα =
(cid:0){χi}i∈[0,n), x∗(cid:1) to PB, who computes y := y∗ − ∆ · x∗.
i=0 χα,i · Xi. Let χα = (χα,0, . . . , χα,r−1) ∈ Fr
p.
6) PA computes Z := (cid:80)r−1
p and sends
(cid:80)n−1
i=0 z[i] · Xi ∈ Fpr and VA :=
(cid:80)r−1
i=0 y[i]· Xi ∈ Fpr and VB :=(cid:80)n−1
i=0 χi · w[i] − Z ∈ Fpr , while PB computes Y :=
i=0 χi · v[i]− Y ∈ Fpr .
Then PA sends VA to FEQ, and PB sends VB to FEQ. If either
party receives false or abort from FEQ, it aborts.
7) PA outputs (u, w) and PB outputs v.
Fig. 7: Single-point sVOLE protocol.
PB sends K[β] −(cid:80)
value: w[α] = M[β]−(K[β] −(cid:80)
M[β] and PB holds K[β] with M[β] = K[β] + ∆ · β. So if
i v[i], then PA can compute the missing
i(cid:54)=α v[i] = M[β]−
K[β] + v[α] = v[α] + ∆· β. This completes the “semi-honest”
portion of the protocol.
i v[i])−(cid:80)
To verify correct behavior, we generalize the approach of
Yang et al. [60] that applies only to the case p = 2. We want
to verify that w[i] = v[i] for i (cid:54)= α, and w[α] = v[α] + ∆· β.
Intuitively, the parties do this by having PA choose uniform
χ0, . . . , χn−1 ∈ Fpr and then checking that
n−1(cid:88)
n−1(cid:88)
χi · w[i] =
χi · v[i] + ∆ · β · χα.
i=0
i=0
VA =(cid:80)n−1
Of course, this must be done without revealing α, β to PB.
To do so, PA and PB use F p,r
sVOLE to compute Z, Y ∈ Fpr,
respectively, such that Z = Y + ∆ · β · χα. (We discuss
below how this is done.) They then use FEQ to check if
i=0 χi· v[i]− Y .
To complete the description, we show how the parties can
generate Z, Y (held by PA, PB, respectively) such that Z =
i=0 χi· w[i]− Z is equal to VB =(cid:80)n−1
Y + ∆ · β · χα. (This is like an authenticated value [β · χα],
but note that β · χα lies in Fpr rather than Fp.) PA views
(cid:80)
χα ∈ Fpr as χα = (χα,0, . . . , χα,r−1) ∈ Fr
p (i.e., χα =
i∈[0,r) χα,i · Xi, where {Xi}i∈[0,r) form a basis for Fpr over
Fp), and then the parties use F p,r
holds y such that z = y +∆·β·χα. Let Z =(cid:80)
sVOLE to generate the vector of
authenticated values [β · χα]. This means PA holds z and PB
and Y =(cid:80)
i∈[0,r) z[i]·Xi
r−1(cid:88)
r−1(cid:88)
i∈[0,r) y[i] · Xi. We have that
y[i] · Xi + ∆ · β · r−1(cid:88)
χα[i] · Xi = Y + ∆ · β · χα,
(y[i] + ∆ · β · χα[i]) · Xi
z[i] · Xi =
r−1(cid:88)
Z =
i=0
i=0
=
i=0
as desired.
i=0
We remark that this check allows a malicious PA to guess
∆, and allows a malicious PB to guess a subset in which
the index α lies. (This will become evident
in the proof
of security.) Such guesses are incorporated into the ideal
functionality F p,r
Theorem 3. If G and G(cid:48) are pseudorandom generators, then
sVOLE,FOT,FEQ)-
spsVOLE UC-realizes F p,r
Πp,r
hybrid model. In particular, no PPT environment Z can distin-
guish the real-world execution from the ideal-world execution
except with probability at most 1/pr + negl(κ).
spsVOLE in the (F p,r
spsVOLE.
The proof of Theorem 3 is given in Appendix D.
Optimizations. We discuss various optimizations of the pro-
tocol shown in Figure 7:
1) For large p (i.e., log p ≥ ρ), the parties can use the output
of F p,r
spsVOLE,
since β (cid:54)= 0 with overwhelming probability.
2) In the consistency check, PA can send uniform seed ∈
{0, 1}κ to PB, who then derives the {χi} from seed using
a hash function modeled as a random oracle.
sVOLE directly as [β] in step 1 of protocol Πp,r
the parties hold {(uj, wj)}t
3) When t extend executions are needed, we can batch the
consistency checks using the ideas of Yang et al. [60]
to reduce the total number of sVOLE correlations needed
from t · (1 + r) to t + r. The approach is as follows:
a) After t executions of the semi-honest portion of the
j=1 and
extend phase,
j=1, respectively, where for all j ∈ [t] we have
{vj}t
wj = vj +∆·uj with uj a vector that is 0 everywhere
except uj[αj] = βj. Then PA and PB send (extend, r)
to F p,r
sVOLE, which returns (x, z) to PA and y∗ to PB.
b) For j ∈ [t], PA samples χi,j ← Fpr for i ∈ [0, n), and
x∗ :=(cid:80)
views χαj ,j as the vector χαj ,j ∈ Fr
p. It then computes
j∈[t] βj·χαj ,j−x and sends {χi,j}i∈[0,n),j∈[t]
(cid:80)t
and x∗ to PB, who computes y := y∗ − ∆ · x∗ ∈ Fr
(cid:80)r−1
(cid:80)t
i=0 z[i]· Xi; PB computes VB :=(cid:80)n−1
pr.
j=1 χi,j · wj[i] −
vj[i]−(cid:80)r−1
j=1 χi,j ·
i=0 y[i]·Xi. Then both parties check whether
:= (cid:80)n−1
c) PA computes VA
i=0
i=0
VA = VB by calling FEQ.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:45 UTC from IEEE Xplore.  Restrictions apply. 
1082
C. sVOLE Extension
We show here a protocol that can be viewed as a means of
performing “sVOLE extension.” That is, our protocol allows
two parties to efﬁciently extend a small number of sVOLE
correlations (created in a setup phase) to an arbitrary polyno-
mial number of sVOLE correlations. The protocol relies on
spsVOLE as a subroutine, as well as a variant of the LPN
assumption that has been used in prior work [41], [14], [60].
Protocol overview. The parties use the base-sVOLE protocol
to generate a length-k vector of authenticated values [u].
They also use spsVOLE to generate t vectors of authenticated
values, each of length n/t and having a single nonzero
entry; they let [e] be the concatenation of those vectors. The
parties then use a public matrix A to deﬁne the length-
n vector of authenticated values [u · A + e]; by the LPN
assumption, the corresponding values (which PA knows) will
appear pseudorandom to PB. This provides a way to extend
k random sVOLE correlations to n pseudorandom sVOLE
correlations once. As in prior work [60], however, we can
generate (cid:96) = n − k correlations as many times as desired by
simply using this idea to generate n sVOLE correlations and
reserving the ﬁrst k of those correlations for the next iteration
of the extend phase.
LPN assumption. Let Dn,t denote the distribution over an
error vector e ∈ Fn
p in which e is divided into t blocks (each
of length n/t), and each block of contains exactly one uniform
nonzero entry at a uniform location within that block.
Deﬁnition 1 (LPN with static leakage [14]). Let G be a
polynomial-time algorithm that on input 1k, 1n, p outputs
A ∈ Fk×n
. Let parameters k, n, t be implicit functions of
G
security parameter κ. We say that the LPN
k,n,t,p assumption
holds if for all PPT algorithms A we have
p
(cid:12)(cid:12) Pr[LPN-Succ
A(κ) = 1] − 1/2(cid:12)(cid:12) ≤ negl(κ),
G
where the experiment LPN-Succ
1) Sample A ← G(1k, 1n, p), u ← Fk
G
A(κ) is deﬁned as follows:
p, and e ← Dn,t. Let
α1, . . . , αt be the indices of the nonzero entries in e (each
of which is located in a disjoint block of length n/t).
2) A outputs t subsets I1, . . . , It ⊆ [0, n). If αi ∈ Ii for
all i ∈ [t], then send success to A; otherwise, abort the
experiment and deﬁne b(cid:48) := 0.
3) Pick b ← {0, 1}. If b = 0, let x := u · A + e; otherwise,
sample x ← Fn
p . Send x to A, who then outputs a bit b(cid:48)
(if the experiment did not abort).
4) The experiment outputs 1 iff b(cid:48) = b.
sVOLE,F p,r
Protocol description. In Figure 8, we present our sVOLE
extension protocol in the (F p,r
spsVOLE)-hybrid model.
For simplicity, we assume a public matrix A ∈ Fk×n
, output
by an efﬁcient algorithm G(1k, 1n, p), that is ﬁxed at the outset
of the protocol. (It is also possible to have PA generate A and
then send it to PB.) We assume that F p,r
sVOLE share
the same initialization (i.e., use the same global key ∆). This
spsVOLE and F p,r
p
Protocol Πp,r
sVOLE
p
sVOLE, which returns (u, w)
Parameters: Fix n, k, t, and deﬁne (cid:96) = n − k and m = n/t.
Let A ∈ Fk×n
be a matrix output by G(1k, 1n, p).
Initialize: This procedure is executed only once.
1) PA and PB send init to F p,r
2) PA and PB send (extend, k) to F p,r
sVOLE, which returns ∆ to PB.
to PA and v to PB such that w = v + ∆ · u ∈ Fk
pr .
Extend: This procedure can be executed multiple times.
3) For i ∈ [t], PA and PB send (sp-extend, m) to F p,r
spsVOLE,
which returns (ei, ci) to PA and bi to PB such that ci =
bi + ∆ · ei ∈ Fm
p has exactly one nonzero
entry. If either party receives abort from F p,r
spsVOLE in any of
these spsVOLE executions, it aborts.
p and c = (c1, . . . , ct) ∈
4) PA deﬁnes e = (e1, . . . , et) ∈ Fn
pr . Then PA computes x := u · A + e ∈ Fn
Fn
p and z :=
w · A + c ∈ Fn
pr and
computes y := v · A + b ∈ Fn
pr .
z[0 : k) ∈ Fk
n)) ∈ F(cid:96)
p × F(cid:96)
pr , and outputs K[s] := y[k : n) ∈ F(cid:96)
Fk
pr .
p and w :=
pr , and outputs (s, M[s]) := (x[k : n), z[k :
pr . PB updates v by setting v := y[0 : k) ∈
5) PA updates u, w by setting u := x[0 : k) ∈ Fk
pr . PB deﬁnes b = (b1, . . . , bt) ∈ Fn
pr and ei ∈ Fm
Fig. 8: The sVOLE extension protocol.
holds, in particular, when we use protocol Πp,r
previous section to UC-realize F p,r