output: [9,7,8]
Explanation:
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it
splits s into less parts.
Note:
●S will have length in range [1, 500].
● S will consist of lowercase letters ('a’ to 'z') only.
题目大意
这道题考察的是滑动窗口的问题。
---
## Page 741
给出一个字符串，要求输出满足条件窗口的长度，条件是在这个窗口内，字母中出现在这一个窗口内，
不出现在其他窗口内。
解题思路
这一题有2种思路，第一种思路是先记录下每个字母的出现次数，然后对滑动窗口中的每个字母判断次
数是否用尽为0，如果这个窗口内的所有字母次数都为0，这个窗口就是符合条件的窗口。时间复杂度
为 O(n^2)
另外一种思路是记录下每个字符最后一次出现的下标，这样就不用记录次数。在每个滑动窗口中，依次
判断每个字母最后一次出现的位置，如果在一个下标内，所有字母的最后一次出现的位置都包含进来
了，那么这个下标就是这个满足条件的窗口大小。时间复杂度为O（n^2）
代码
package leetcode
//解法一
func partitionLabels(S string) []int {
var lastIndexof [26]int
for i, v := range S {
lastIndexof[v-'a']=i
var arr []int
for start, end := 0,0; start  mp(26);
int n = S.size();
for (char c: S)
++mp[c-′a];
priority_queue> pq;
for (int i = 0;i  (n+1)/2) return "";
if (mp[i]) pq.push({mp[i]，i+′a′});
queue> myq;
string ans;
while (!pq-empty() 1l myq.size() > 1) {
if（myq.size（）>1）{//注意这里要大于1，如果是等于1的话，频次大的元素
一直在输出了，答案就不对了。
auto cur = myq.front() ;
myq-pop() ;
if (cur.first != 0) pq-push(cur);
if (!pq.empty(）{
auto cur = pq.top();
pq -pop() ;
ans += cur.second;
cur.first--;
myq-push(cur) ;
return ans;
代码
package leetcode
---
## Page 748
import（
"sort"
func reorganizeString(S string) string {
fs := frequencysort767(s)
if fs == "" {
return "*
3
bs := []byte(fs)
ans := "u
j := (1en(bs)-1)/2 + 1
for i := 0; i (1en(sb)+1)/2 {
return
111
F
for key, value := range sMap {
cMap[value] = append(cMap[value], key)
var keys []int
for k := range cMap {
keys = append(keys, k)
sort.Sort(sort.Reverse(sort. Intslice(keys)))
res := make([]byte, 0)
for _, k := range keys {
for i := 0; i <len(cMap[k]); i++ {
for j := 0; j < k; j++ {
res = append(res, cMap[k][i])
---
## Page 749
return string(res)
771.JewelsandStones
题目
au suguasauda, S pue samaf aue eua sauos jo sad au uuasauda  sus uai a,no
stones you have. Each character in S is a type of stone you have. You want to know how many of
the stones you have are also jewels.
The letters in J are guaranteed distinct, and all characters in  and S are letters. Letters are
,v, oy auos jo ad suasap e paapisuo si e,os aaisuas ase
Example 1:
.qqqqvve,= s *.,ve, = C :nduI
output: 3
Example 2:
Input: J = "z", S = "zz"
Output: 0
Note:
●S and J will consist of letters and have length at most 50.
● The characters in J are distinct.
题目大意
给定字符串”代表石头中宝石的类型，和字符串S代表你拥有的石头。S中每个字符代表了一种你拥有
的石头的类型，你想知道你拥有的石头中有多少是宝石。
”中的字母不重复，”和S中的所有字符都是字母。字母区分大小写，因此“a"和"A”是不同类型的石
头。
解题思路
·给出2个字符串，要求在S字符串中找出在”字符串里面出现的字符个数。这是一道简单题。
---
## Page 750
代码
package leetcode
import "strings"
//解法一
func numJewelsInStones(J string,S string) int{
count := 0
for i := range s {
if strings.Contains(3, string(s[i])) {
count++
return count
//解法二
func numJewelsInStonesl(3 string,S string) int{
cache, result := make(map[rune]bool),0
for
-,r := range  {
cache[r] = true
for
-,r:= range s{
if _, ok := cache[r]; ok {
result++
return result
778.SwiminRisingWater
题目
On an N x N grid, each square grid[i][j] represents the elevation at that point (i,j)
Now rain starts to fall. At time t, the depth of the water everywhere is t . You can swim from a
square to another 4-directionally adjacent square if and only if the elevation of both squares
indlividually are at most t. You can swim infinite distance in zero time. Of course, you must stay
within the boundaries of the grid during your swim.
You start at the top left square (o, o) . What is the least time until you can reach the bottom
right square (N-1, N-1) ?
Example 1:
---
## Page 751
Input: [[0,2] , [1,3]]
Output: 3
Exp1anation:
At time 0, you are in grid 1ocation (0, 0).
You cannot go anywhere else because 4-directionally adjacent neighbors have a
higher elevation than t = 0.
You cannot reach point (1, 1) until time 3.
when the depth of water is 3, we can swim anywhere inside the grid.
Example 2:
Input: [[0,1,2,3,4], [24,23,22,21, 5], [12,13,14,15,16], [11,17,18,19,20],
[10,9,8,7,6]]
output: 16
Explanation:
01234
24 23 22 21 5
12 13 14 15 16
11 17 18 19 20
109876
The final route is marked in bo1d.
we need to wait unti1 time 16 so that (0, 0) and (4, 4) are connected.
Note:
1. 2 <= N <= 50.
2. grid[j][j] is a permutation of [0, -, N*N - 1].
题目大意