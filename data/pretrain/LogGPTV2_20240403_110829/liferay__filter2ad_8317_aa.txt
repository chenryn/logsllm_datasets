# liferay 反序列化漏洞分析及不出网回显构造
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
分析去年的CVE-2020-7961 liferay
反序列化漏洞，师傅们已经把漏洞点和利用方式总结的非常清楚了，但是对于我们这种java漏洞小白来说已有的分析并不能让我们构造出很好的不出网回显payload，本文主要围绕漏洞产生原因和不出网回显构造方法展开分析，给安全入门者弥补空白。
## 0x01 liferay介绍
Liferay（又称Liferay
Portal）是一个开源门户项目，该项目包含了一个完整的J2EE应用，以创建Web站点、内部网，以此来向适当的客户群显示符合他们的文档和应用程序。它是一个出色的Java开源Portal产品，其中整合了很多当今流行的开源框架，也被不少人使用在实际项目中。
###  0x1 漏洞范围
Liferay Portal 6.1、6.2、7.0、7.1、7.2
liferay的6和7版本使用的json包不同前者使用Flexjson后者使用Joddjson
###  0x2 漏洞介绍
本漏洞属于json反序列化漏洞，在到达认证逻辑之前已经触发漏洞逻辑，并在liferay代码中存在c3p0和CommonsBean
jar包，因此可以通过ysoserial 工具构造反序列化内容，从而完成漏洞利用。
## 0x02 环境搭建
为了能够调试复现漏洞，在windows环境下搭建liferay环境，下载  tomcat集成包，如下图所示：
进入liferay tomcat的bin目录，修改catalina.bat 并执行startup.bat
    SET CATALINA_OPTS=-server -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8788
liferay 执行起来后会自动打开浏览器并访问127.0.0.1的8000端口 ，并打开8788调试端口等待idea的链接
**Intellij idea** 配置Java远程调试端口和ip，并添加调试依赖库
## 0x03 漏洞分析
漏洞分析这块，之前的师傅们已经写的很详细了，我也简单的这次漏洞要点梳理下。主要围绕以下几点展开
1.漏洞产生的具体过程  
2.漏洞产生的核心路由  
3.漏洞利用POST 参数构造方法
打算从挖洞的角度分析这个漏洞，看过很多关于这个漏洞的分析文章，从一开始的路由分析过来感觉不能理解漏洞发现的过程。
###  0x1 漏洞产生的具体过程
从程序时序图上可以很清楚的看到高漏洞产生的位置，准确的说是在参数类型转换时触发的漏洞，在该操作之前liferay接受并处理了所有字符串参数。下面分析产生漏洞的两个关键点，参数解析和参数类型转换。
**1\. 参数解析**
函数调用栈如下
    JSONWebServiceActionParameters._collectFromRequestParameters
    JSONWebServiceActionParameters.collectAll
    JSONWebServiceActionsManagerImpl.getJSONWebServiceAction
    JSONWebServiceActionsManagerUtil.getJSONWebServiceAction
    JSONWebServiceInvokerAction._executeStatement
    JSONWebServiceInvokerAction.invoke
    JSONWebServiceServiceAction.getJSON
    JSONAction.execute
collectAll函数中的_collectFromRequestParameters函数起到了非常关键的作用，这部分代码是请求过来后对POST参数做解析处理，相关代码如下
_collectFromRequestParameters中最关键的部分在于put函数的处理逻辑，在一开始的时候就匹配了 :
符号，并按照该符号分割得到key和typeName以及value
经过处理后相关参数如下，代码的后续将这些内容填入了_parameterTypes和_innerParameters两个hashmap中以供后续使用
    key="defaultData"
    typeName="com.mchange.v2.c3p0.WrapperConnectionPoolDataSource"
    value='{"userOverridesAsString":"HexAsciiSerializedMap:;"}'
分析到这里我们知道拥有控制typeName和value的能力，到底这些东西有什么用下面我们来揭晓。
**2\. 参数类型转换**
liferay得到了POST传递过来的字符串参数，需要将各个参数进行类型转化，转化成设置的格式。所以我们首先分析liferay是如何知道这些参数类型的。
在参数获取之后会获取对应的路由及参数类型，具体调用栈如下
    JSONWebServiceActionParameters._getJSONWebServiceActionConfig
    JSONWebServiceActionsManagerImpl.getJSONWebServiceAction
    JSONWebServiceActionsManagerUtil.getJSONWebServiceAction
    JSONWebServiceInvokerAction._executeStatement
    JSONWebServiceInvokerAction.invoke
    JSONWebServiceServiceAction.getJSON
    JSONAction.execute
直接从_pathIndexedJSONServiceActionConfigs中获取path对应的处理类
通过查找发现了两个匹配的路由
接下来的操作就是从这两个路由中选择一个，通过观察发现这两个路由的参数个数不相同，第二个路由是四个参数比第一个多了个object类型的参数，_findJSONWebServiceAction的返回值就是已经选择好的路由和参数类型
**3\. 漏洞点分析**
**（1）反序列化入口**
liferay
自己实现了JSON的反序列化逻辑，下面的函数looseDeserialize就是反序列化的入口，只需要传入字符串和Class类就可以按照类型进行反序列化。
**（2）parameterType的由来**
在解析参数类型的时候获取了parameterTypeName字符串，之后通过ClassLoader的loadClass方法加载该类。
这次发包参数为为 defaultData:com.mchange.v2.c3p0.WrapperConnectionPoolDataSource=xxx
那么解析出来的类就是com.mchange.v2.c3p0.WrapperConnectionPoolDataSource
**（3）json反序列化分析**
在一些非原生的反序列化的情况下，c3p0可以做到不出网利用。其原理是利用jodd
json的反序列化时调用userOverridesAsString的setter，在setter中运行过程中会把传入的以HexAsciiSerializedMap开头的字符串进行解码并触发原生反序列化。
com.liferay.portal.json 最终调用的是 jodd.json.JsonParser方法
JsonParser在Json反序列化的时候首先调用参数的set方法，下面分析com.mchange.v2.c3p0.WrapperConnectionPoolDataSource
是怎么完成对象反序列化的。接着上面的函数下面是调用WrapperConnectionPoolDataSource的setuserOverridesAsString方法
从parseUserOverridesAsString函数中可以看出通过搜索的方式将HexAsciiSAerializedMap的value提取出来并利用fromHexAscii函数将其解析为byte形式，交给SerializableUtils进行反序列化
在代码的最后调用readObject方法解析反序列化
    public static Object fromByteArray(byte[] var0) throws IOException, ClassNotFoundException {
        Object var1 = deserializeFromByteArray(var0);
        return var1 instanceof IndirectlySerialized ? ((IndirectlySerialized)var1).getObject() : var1;
    }
    public static Object deserializeFromByteArray(byte[] var0) throws IOException, ClassNotFoundException {
        ObjectInputStream var1 = new ObjectInputStream(new ByteArrayInputStream(var0));
        return var1.readObject();
    }
###  0x2 漏洞产生的核心路由
对于漏洞分析的已经很详细了，那么我们怎么能够发包走到漏洞位置呢，这就涉及到路由问题，上面也分析过_executeStatement在JSONWebServiceInvokerAction类的invoke方法中有调用，向上追溯到JSONWebServiceServiceAction类
在getJSONWebServiceAction函数中有Action选择的相关代码
因此可以确定最后的路由为invoke即可，前面的一二级路由可以同过xml分析得到。
        JSON Web Service Servlet
        /api/jsonws/*
        JSON Web Service Servlet
        com.liferay.portal.jsonwebservice.JSONWebServiceServlet
        1
        true
由xml文件可以确定访问的URL路径，后续是通过cmd参数进行动态路由调用所以需要分析都有那些动态路由，这里有两种分析
1.通过调试找到动态路由表
2.通过查找官方文档确定
###  0x3 漏洞利用POST 参数构造
**1\. POST参数个数及名称确定**
在获取路由及参数类型后会对POST参数进行判断，主要逻辑是判断POST中是否包含了该路由的必要参数，以/expandocolumn/add-column为例，必要参数下图所示：
判断逻辑如下，设置matched变量每当匹配到一个就将该变量+1，matched的个数必须需要的个数相同。
    private int _countMatchedParameters(String[] parameterNames, MethodParameter[] methodParameters) {
            int matched = 0;
            MethodParameter[] var4 = methodParameters;
            int var5 = methodParameters.length;
            for(int var6 = 0; var6 < var5; ++var6) {
                MethodParameter methodParameter = var4[var6];
                String methodParameterName = methodParameter.getName();
                methodParameterName = StringUtil.toLowerCase(methodParameterName);
                String[] var9 = parameterNames;
                int var10 = parameterNames.length;
                for(int var11 = 0; var11 < var10; ++var11) {
                    String parameterName = var9[var11];
                    if (StringUtil.equalsIgnoreCase(parameterName, methodParameterName)) {
                        ++matched;
                    }