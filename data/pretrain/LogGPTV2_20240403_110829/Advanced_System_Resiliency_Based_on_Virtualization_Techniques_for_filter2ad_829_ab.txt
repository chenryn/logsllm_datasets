is recevied from the hub, it is stored in the staging area and the
device is reset again. Nonces are used to avoid the replay of boot
tickets.
3.6 AWDT
Xu et al. [78] propose a new abstract hardware device, the Authen-
ticated Watchdog Timer (AWDT) to implement a mechanism to
unconditionally reset (in the meaning of reboot) an IoT device, even
if an adversary has compromised severe portions of the system.
An AWDT is a regular watchdog timer, except that the reset can
only be deferred in an authenticated way. The process of deferring
a timeout is based on a deferral ticket, which is a hub-signed data
structure containing the number of seconds the device reset should
be deferred. Upon submission, the AWDT checks the signature of
the deferral ticket and defers the device reset. Nonces are used to
avoid the replay of tickets.
4 SYSTEM DESIGN
This section gives insights into our proposed system architecture.
4.1 Scenario
Speaking of server-based internet services, the separation of a sys-
tem into infrastructure and applications has led to the rise of cloud
computing. We expect a similar paradigm shift in the field of IoT
deployments.
An Infrastructure Provider (IP) is responsible for providing a
fully functional device and a basic software stack. Typically, the IP
operates a hub, the so-called Infrastructure Hub (IH), for receiving
monitoring information from the embedded device. The software
stack provided by the IP multiplexes system resources to one or
more isolated Services (Ss). Each service is governed by one Service
Provider (SP), which is responsible for a working end-to-end service.
To do so, an SP operates a dedicated hub, called the Service Hub (SH),
which is different from the IH. A service transmits application data
(e.g. sensor data) to the corresponding SH.
4.2 Novel Trusted Computing Concepts
We decompose strong resiliency guarantees for IoT devices into
novel fine-granular trusted computing concepts. Leung [48, p. I-
1] describes scheduling as being concerned with the allocation of
scarce resources to activities. We further narrow down a sched-
uler to an entity that selects (dispatches) an available activity for
program execution on the CPU specifically. Both an Operating Sys-
tem (OS) and a hypervisor can be regarded as a scheduler. Even a
physical device can be considered a scheduler: The hardware se-
lects an activity (the bare-metal program) and dispatches it. In this
case, CPU time is optimized trivially by assigning all of the CPU
time to the bare-metal program. We define the superset relation on
schedulers as follows:
Definition 4.1 (Superset of a Scheduler). A scheduler S1 is a super-
set of another scheduler S2 if S1 dispatches an activity that contains
scheduler S2. You can then say S1 dispatches S2 and write S1 ⊃ S2.
The superset relation of schedulers is transitive.
To illustrate, assume that there is an IoT device, referred to as
scheduler S1. Further, assume that a bare-metal hypervisor is in-
stalled on the device, referred to as a scheduler SHV . The device
dispatches the hypervisor (S1 ⊃ SHV ). The virtual bare-metal level
of a Virtual Machine (VM) running on the hypervisor can be re-
garded as another scheduler, referred to as S2. Thus, we can state
that S1 ⊃ SHV ⊃ S2 and, likewise, S1 ⊃ S2. We further define the
concept of strong dominance:
Definition 4.2 (Strong Dominance). A hub strongly dominates a
scheduler if the hub can choose arbitrary code and enforce the
execution of the code as an activity of the scheduler in a bounded
amount of time. The hub is then called a strong dominator of the
scheduler.
Given the example above, there is an IoT device S1. Further,
assume that there is one hub H1 that strongly dominates S1. Thus,
H1 can enforce the execution of arbitrary code on the bare-metal
level, which preempts the currently running activity. This is because
the bare-metal level only supports one activity. Compared to the
concept of dominance of Xu et al. [78], we generalize our term of
strong dominance as it is not strictly restricted to a physical device
but a scheduler.
Nested strong dominators are not possible since one strong domi-
nator may overrule the decisions of the other strong dominator and,
thus, violate the time constraint. To describe systems with more
than one dominator, we propose the concept of weak dominance.
Definition 4.3 (Weak Dominance). A hub H1 weakly dominates a
scheduler S1 if the following conditions are fulfilled:
(1) There is a hub H2 that strongly dominates a scheduler S2.
(2) The scheduler S2 is a superset of the scheduler S1 (S2 ⊃ S1).
(3) Given that H2 behaves cooperatively, H1 can choose arbitrary
code and enforce its execution as an activity of the scheduler
S1 in a bounded amount of time.
H1 is then called a weak dominator of the scheduler S1.
Weak dominance can be seen as a relaxed type of strong domi-
nance, given that a superior strong dominator may overrule deci-
sions.
457ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Röckl, et al.
Figure 1: Proposed System Architecture.
Figure 2: Strong Dominance Runtime Components.
4.3 System Architecture
We propose a system architecture that consists of a strong and a
weak dominator (Figure 1). The IH strongly dominates the bare-
metal level of the device. The hypervisor dispatches one or more
isolated Service Machines (SMs). Each of them encapsulates a high-
level service, e.g. a temperature transmission service, and is weakly
dominated by a corresponding SH. The Management Machine (MM)
isolates the network stack of the device and encapsulates the man-
agement components required to realize the proposed dominance
hierarchy. They ensure strong resiliency guarantees for both the
VMs and the IoT device. The IH weakly dominates the MM.
The idea is that an SP can recover the weakly-dominated SM
even after a severe software compromise. As long as the adversary
has not escaped from the SM to the hypervisor, the SH can dictate
the software running in the corresponding SM and, thus, recover
from a successful attack. Even if an adversary managed to take
over the hypervisor level, the IoT device is not irrevocably lost. In
this case, the IP can recover the embedded device including the
hypervisor and its VMs with high assurances.
The MM isolates the network stack of the IoT device since a
network stack exposes a significant attack surface (e.g. Ripple20
and Amnesia:33). We provide an architecture for devices with an
I/O Memory Management Unit (IOMMU) and without an IOMMU.
Devices with an IOMMU can utilize peripheral pass-through to
assign the Network Interface Card (NIC) of the device to the MM.
Thus, a vulnerability in the network stack only exposes the MM
and not the hypervisor. Devices without an IOMMU can utilize a
network bridge on the hypervisor level to isolate the network stack
partially (layer 3 to 7 in the OSI model are implemented in the MM)
Since the vulnerabilities of Ripple20 and Amnesia:33 are in layers
3 and above in the OSI model exclusively, we assume that critical
errors in layer 2 and below are unlikely.
The most restrictive hardware requirement is a Trusted Execu-
tion Environment (TEE), similar to the ARM TrustZone, which is
utilized to implement an AWDT (Section 3.6). With Keystone [47],
a TEE for the RISC-V hardware architecture has been designed, of
which we believe it is likewise suitable for the proposed system
architecture.
4.4 Realizing Strong Dominance
This section describes how to realize the proposed strong dom-
inance relationship by relying on the features of the ARMv8-A
hardware architecture [53].
4.4.1 Boot Time. During boot time of the device, gated boot (Sec-
tion 3.5) ensures that only a verified bare-metal application can
be booted. If the verification fails, gated boot downloads a veri-
fied bare-metal application from the IH, stores it, and boots into it.
Subsequent to gated boot, the Secure Monitor in Exception Level
3 (EL3) [53] is set up, which, in turn, initializes both the Normal
World (NW) and the Secure World (SW). In the NW, a bare-metal
hypervisor is booted. In the SW, a trusted OS is booted.
Gated boot requires a boot ticket from the IH to proceed with
the boot process. A request for a boot ticket contains multiple
checksums: A measurement of the secure monitor binary (M1), a
measurement of the binary of the trusted OS (M2), a measurement
of the binary of the normal-world OS (M3), and a measurement
of the so-called static file system (see below) of the NW (M4). The
IH only hands out a signed boot ticket if the integrity of all those
components can be proven to the IH.
Verifying the integrity of a whole file system is a known problem.
We differentiate between the static file system and the dynamic file
system. While the first contains only files that are not written to
under normal circumstances and only change when updating the
software of the device (e.g. system binaries), the latter stores files
that are modified under normal operation (e.g. log files and sensor
data). We state that one can rely on existing tools to calculate a
checksum of a complete file system. For the Linux kernel, dm-
verity [4] provides such a framework. Gated boot only verifies the
integrity of the static file system. We require the IP to store only
files in the dynamic file system that are highly unlikely to be utilized
to attack the system (e.g. only log files and sensor data, no binaries).
4.4.2 Runtime. Figure 2 illustrates the building blocks that are
necessary to realize a strong dominance relationship between the
IH and the device. The ticket receiver connects to the IH and tries to
acquire a new deferral ticket regularly. If such a ticket is received, it
is passed to a proxy, which runs on the hypervisor level. The proxy,
in turn, passes the ticket to the SW. There, an AWDT receives the
HardwareHypervisor...MMSM2SMNIHSH1SHNIoT DeviceStrong DominanceWeak DominanceScheduler SupersetCPUs, RAMNICEL3EL2EL1EL0DriverRoutingOSSecure WorldProxyTrusted OSAWDTNormal WorldCommunicationTCBReset EntitySMSecure MonitorHypervisorTicket ReceiverMM458Advanced System Resiliency Based on Virtualization Techniques for IoT Devices
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
ticket. Only if the ticket’s signature can be verified, the reset is
postponed. If the timeout of the AWDT reaches zero, the device is
reset. From the perspective of the IH, the system suffices the criteria
of strong dominance. Given that the Trusted Computing Base (TCB)
is not compromised, the IH can stop issuing fresh deferral tickets
for the device. Subsequently, the timeout of the AWDT in the SW
exceeds and the device is reset. Gated boot is executed, which
downloads new software from the IH.
The transport abstraction between the ticket receiver and the
proxy needs to be as simple as possible. This is because an attacker
might abuse vulnerabilities in a transport abstraction in order to lift
their privileges to the hypervisor level. In particular, an IP-based
communication from within the MM to the hypervisor level is not a
justifiable option. In fact, we propose a system architecture without
a network stack on the hypervisor level. Updates to the hypervisor
and the early-boot stages are possible by relying on gated boot
solely. Network connectivity for the SM is realized without utilizing
the network stack of the hypervisor, but relying on buffer copy
operations between the two VMs. By relying on a much simpler
transport abstraction and a protocol that is specifically designed for
submitting deferral tickets to the proxy, we expect that the attack
surface is significantly smaller than a whole network stack.
To retrieve a deferral ticket from the IH, the following messages
are exchanged:
(1) The ticket receiver requests a signed Hello Request (HReq)
from the SW. This step is required since the NW does not
have the key material to sign messages from the device to the
IH with. It is solely stored in the SW (4.8). The SW returns a
newly created HReq, consisting of a nonce NA, and returns
it to the ticket receiver.
(2) The ticket receiver sends the HReq to the IH. The IH verifies
the signature, generates a nonce NB, and returns a signed
Hello Response (HResp), containing both nonces.
(3) The ticket receiver forwards the HResp to the SW. The sig-
nature and the nonce NA are checked. A signed Ticket Re-
quest (TReq), containing the nonce NB and the current time-
out of the AWDT, is returned to the ticket receiver.
(4) The TReq is sent to the IH.
(5) The IH checks the signature and the nonce NB. Being able
to sign messages statically remote attests the IoT device to
the IH. Based on a valid signature and the current timeout
of the AWDT, the IH can decide on whether the device is
allowed to continue to be in operation. If so, a signed deferral
ticket is generated, containing a nonce NA and the number
of seconds the device reset is to be deferred. It is sent back
to the device.
(6) The ticket receiver forwards the deferral ticket to the SW. If
the signature of the IH is valid and the nonce NA matches,
the AWDT accepts the deferral ticket and the device reset is
deferred.
A similar protocol is conducted during the retrieval of a boot
ticket. During the runtime of the device, a boot ticket for the next
device boot [40, 78] can be requested from the IH and stored in the
staging area (Section 3.5). If the IH triggers a device reset after a
boot ticket was already handed out, the device is able to boot once
more during the subsequent invocation of gated boot. During the
Figure 3: Weak Dominance Components.
next but one boot, gated boot communicates with the IH in order
to retrieve a device update at the latest.
4.5 Realizing Weak Dominance
Figure 3 illustrates how to realize a weak dominance relationship
between the SH and the SM. The ticket receiver does not only
communicate with the IH but also communicates with the SH to
retrieve deferral tickets for the SM regularly. The communication
protocol to retrieve a deferral ticket from the SH is similar to the
protocol for requesting a deferral ticket for the device itself (Section
4.4.2). The ticket receiver requests a signed HReq from a compound
component on the hypervisor level, consisting of an AWDT and
a so-called inspector. Relying on Virtual Machine Introspection
(VMI) [28, 29], the inspector enables remote intrusion and anomaly
detection features for the SH. A newly created HReq is returned to
the ticket receiver and then sent to the SH. The SH answers with an
HResp, which is forwarded to the hypervisor level. A signed TReq,
containing (1) a nonce, (2) the current timeout of the AWDT for the
SM, and (3) information related to the dynamic state of the SM is
returned to the ticket receiver and forwarded to the SH. Based on