    }
withdraw()函数中，会判断现在的时间是否大于存款的期限，第二句判断调用者地址是否是存款者地址，如果条件满足，就会转出当前合约调用者的存款余额，可以得出该函数并不能转出合约所有余额。
继续来看第二个函数confiscate():
    function confiscate(uint256 account, bytes16 _secret) public {
        require(msg.sender == owner);
        require(secret == _secret);
        require(now >= balances[account].deposit_term + 1 years);  
        uint256 total = 0;
        for (uint256 i = head; i = balances[balances.length - 1].deposit_term + 1
years)；我们将它和confiscate()函数中的判断条件require(now >= balances[account].deposit_term
+ 1 years);进行对比。
由于我们最终需要利用confiscate()函数中的transfer函数进行转账，如果按照正常逻辑运算，我们存钱后至少需要一年时间才能取出，所以该判断条件（require(now
>= balances[account].deposit_term + 1
years);）必须设法绕过。同时我们还需要invest()函数中的判断条件（require(deposit_term >=
balances[balances.length - 1].deposit_term + 1 years);）也正常执行。
可以看到这两行代码的条件判断中加减操作并没有做安全防护，这里假如我们使balances[balances.length - 1].deposit_term
+ 1
years值等于2^256，由于solidity的存储关系，这里会发生整数上溢出，最终结果为0，就可以绕过该判断条件。还需要注意的一点为：confiscate()函数中的for循环需要head（由于变量覆盖的关系，head值为deposit_term传入的值）从0开始才能将所有的资金取出，所以需要我们对deposit_term进行两次赋值：第一次赋值为2^256
- 1 years（solidity中默认时间单位为秒，故这里的赋值为：2^256 - 3153600 =
115792089237316195423570985008687907853269984665640564039457584007913098103936
），第二次赋值为0（赋值为0，判断条件也恒成立）。
第三个变量msg.sender，从上图可以看出，该变量传入后覆盖全局变量owner，当前调用者地址就会变为合约所有者，从而就可绕过confiscate()函数中msg.sender
== owner判断条件。
由于secret存储在storage（storage变量是指永久存储在区块链中的变量），所以我们可以调用storage索引获取里面的值。
至此confiscate()函数中的前三句判断条件均已满足。
### 解题思路
通过分析BelluminarBank合约漏洞，我们可以利用整数溢出，变量覆盖，访问权限等漏洞攻击转出合约所有余额。具体解题思路如下：
  1. 通过调用invest()函数传入account为1，deposit_term为115792089237316195423570985008687907853269984665640564039457584007913098103936，携带的msg.value为1wei。account始终根据第一句的判断条件进行赋值。msg.value赋值amount，再进行balances变量覆盖（由于变量循环赋值的关系），最终结果balances=amount=2；deposit_term值变量覆盖也成为head值；调用者地址msg.sender最终变量覆盖后会成为合约所有者owner。调用之后balances[balances.length - 1].deposit_term + 1 years发生整数溢出，绕过判断条件。
  2. 继续调用invest()函数传入account为2，deposit_term为0，携带的msg.value为2wei，msg.value赋值amount，再进行balances变量覆盖（由于变量循环赋值的关系），最终结果balances=amount=3；deposit_term值变量覆盖也成为head值为0，相当于还原head原始的值。
  3. 由于balances变量的循环覆盖的关系，最终的合约余额会有差别，可通过合约自毁或者withdraw()函数调整合约余额。
  4. 调用confiscate()函数传入两个参数：account为1，secret值为我们之后通过storage获取的密码值，最终取走合约所有的余额。
### 攻击演示
本次攻击演示在ropsten测试网进行，使用工具为Remix+Matemask+myetherwallet
Remix在线编辑器：
MetaMask钱包插件：
MyEtherWallet在线钱包：
##### 1.首先部署BelluminarBank漏洞合约
使用在线编辑器Remix通过Meta Mask在线钱包A地址部署BelluminarBank合约，部署时给合约传入参数为：
value：31337 wei，deposit_term：0x00000000000000000000000000000001，_secret：1000
（为了方便查看数据，我们将合约源码中的一部分内容进行了可见性修改）
部署完成后目前合约中变量值为以下
##### 2.使用myetherwallet在线钱包调用BelluminarBank合约
在remix中获取api并复制部署的合约地址，填入myetherwallet钱包中。
连接成功
##### 3.调用invest()函数修改合约所有者owner，存款期限数值deposit_term，变量重复覆盖值amount
传入参数为：
value：0.000000000000000001
ETH，account：1，deposit_term：115792089237316195423570985008687907853269984665640564039457584007913098103936。
完成后目前合约中变量值为以下
##### 4.调用invest()函数修改存款期限数值deposit_term（修改head为0），变量重复覆盖值amount
传入参数为：
value：0.000000000000000002 ETH，account：2，deposit_term：0。
完成后目前合约中变量值为以下
虽然上图中显示的合约全部余额为31340 wei，但调用过程中出现循环变量覆盖，导致数组中的余额为31337+2+3 =31342 wei，如下图所示：
为了使合约本身余额与数组中的amount匹配，这里我们选择强制给该转币。
##### 5.通过c地址部署合约并调用taijie()函数自毁合约给BelluminarBank合约转2 wei，平衡合约数组中的余额。
自毁成功后，BelluminarBank合约余额变为31342 wei。
##### 6.调用confiscate()函数最终取走合约所有的余额
传入两个参数：account：2，secret：0x00000000000000000000000000000001
调用完成后，BelluminarBank合约余额变为0。
至此完成攻击演示
### 总结
本篇文章中，我们通过2018WCTF比赛中的BelluminarBank智能合约题目，详细分析了合约存在的漏洞问题，提供了解题思路并进行了攻击演示，其中使用的相关工具已在文中给出链接，希望对智能合约初学者及爱好者有所帮助，下一篇我们会继续分享CTF智能合约经典题目，请大家持续关注。