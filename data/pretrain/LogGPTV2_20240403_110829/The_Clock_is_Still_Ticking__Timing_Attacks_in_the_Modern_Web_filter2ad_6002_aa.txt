title:The Clock is Still Ticking: Timing Attacks in the Modern Web
author:Tom van Goethem and
Wouter Joosen and
Nick Nikiforakis
The Clock is Still Ticking:
Timing Attacks in the Modern Web
Tom Van Goethem‡, Wouter Joosen‡, Nick Nikiforakis†
‡iMinds-Distrinet, KU Leuven, 3001 Leuven, Belgium
ﬁPI:EMAIL
†Department of Computer Science, Stony Brook University
PI:EMAIL
Abstract
Web-based timing attacks have been known for over a decade,
and it has been shown that, under optimal network condi-
tions, an adversary can use such an attack to obtain infor-
mation on the state of a user in a cross-origin website. In
recent years, desktop computers have given way to laptops
and mobile devices, which are mostly connected over a wire-
less or mobile network. These connections often do not meet
the optimal conditions that are required to reliably perform
cross-site timing attacks.
In this paper, we show that modern browsers expose new
side-channels that can be used to acquire accurate timing
measurements, regardless of network conditions. Using sev-
eral real-world examples, we introduce four novel web-based
timing attacks against modern browsers and describe how
an attacker can use them to obtain personal information
based on a user’s state on a cross-origin website. We evalu-
ate our proposed attacks and demonstrate that they signif-
icantly outperform current attacks in terms of speed, relia-
bility, and accuracy. Furthermore, we show that the nature
of our attacks renders traditional defenses, i.e., those based
on randomly delaying responses, moot and discuss possible
server-side defense mechanisms.
Categories and Subject Descriptors
K.4.1 [Computers and Society]: Public Policy Issues—
privacy; K.6.5 [Management of Computing and Infor-
mation Systems]: Security and Protection
Keywords
Side-channel attacks, privacy, web-based attacks
1.
INTRODUCTION
Ever since the ﬁrst web browser, browser vendors have
been eagerly adding new features to their software. This
eagerness helped the web transition from a static informa-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
© 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813632.
tion retrieval medium, to a ubiquitous system where billions
of users each have their personalized view, and share per-
sonal data on numerous online services. While these new
browser features allow web developers to create applications
that were not possible using traditional HTML, such as,
single-page dynamic websites, they have also brought along
various types of vulnerabilities, for instance the execution of
attacker-controlled code in a cross-site scripting attack. In
addition, some types of attacks arise from the unexpected in-
terplay between diﬀerent browser components and can thus
be very hard to eliminate.
A powerful yet underappreciated class of attacks are side-
channel attacks. In these attacks, an attacker leverages the
information exposed by the unintended behavior of speciﬁc
mechanisms, in order to disclose secret or private informa-
tion. One of the most well-known side-channel attacks in
browsers is the disclosure of pages the user had previously
visited by ﬁrst modifying the color of visited links using the
CSS :visited pseudo-class, and subsequently requesting the
computed style in JavaScript [9].
In an empirical study,
researchers discovered that this technique was actively be-
ing used by various high-proﬁle websites to uncover a user’s
browsing history [17]. This ﬁnally lead to a lawsuit against
an advertising company that leveraged the history hijacking
attacks to infer visitors’ interests [1,15]. In a related attack,
Felten et al. have shown that the time required to load
an external resource can leak sensitive information, compro-
mising a user’s privacy [12]. The timing attack described by
the researchers leverages the reduced loading time for cached
resources to uncover recently visited, and thus cached, web
pages. While this attack has been known for over 15 years,
the timing side-channel leak, which is inherent to a browser’s
design, is still present in modern browsers. Just recently, re-
searchers showed that using exactly the same cache timing
techniques on various online services, an adversary can de-
rive the geo-location of web users [18].
In addition to cache-based timing attacks, which can only
be applied to static resources, Bortz and Boneh presented
cross-site timing attacks where an adversary measures the
time it takes for a user to download a dynamically gener-
ated resource [7]. The resulting timing measurements often
disclose information on the state of the user at the vulner-
able cross-origin website, e.g., whether the user is currently
logged in to that website.
In this paper, we expand upon the aforementioned prior
work, and focus on various new browser features that can
be exploited by adversaries to obtain substantially more ac-
curate timing measurements. Contrary to classic timing at-
1382tacks which are subject to several limitations, such as vari-
ations in latency and instability of the network, our newly
introduced attacks do not rely on the network download
time, and therefore do not suﬀer from these limitations. We
show that by using these new attack vectors, adversaries
are able to rapidly obtain timing measurements that can be
analyzed in order to estimate the size of a cross-origin re-
source. By the means of real-world attack scenarios on ﬁve
of the most popular social networks, we illustrate how ad-
versaries can apply these novel timing techniques to obtain
various types of personally identiﬁable information from an
unwitting user. For targeted advertising purposes, an ad-
versary could use this information to create a proﬁle based
on the user’s demographics and interests. Alternatively, the
attacker can leverage information acquired from online so-
cial networks to de-anonymize the user, as has been shown
in previous research [42].
Motivated by the eﬀectiveness of our proposed attacks, as
well as the, seemingly, innumerable opportunities to apply
these attacks on popular websites, we discuss a possible anti-
CSRF-like server-side countermeasure that hides the diﬀer-
ence in resource sizes from potential cross-site attackers.
Our main contributions are:
• We evaluate various browser features with regard to
the timing information they expose.
• We propose several new timing techniques, and demon-
strate that our techniques outperform existing attacks
in speed and reliability, allowing an adversary to esti-
mate the size of a cross-origin resource despite unfa-
vorable network conditions.
• We describe how an attacker can use these timing tech-
niques to extract personally identiﬁable information,
exempliﬁed by ﬁve attack scenarios on widely-used so-
cial network websites.
• We discuss possible server-side solutions that have the
potential to mitigate all variations of cross-site timing
attacks.
2. BACKGROUND
Timing attacks are one of the oldest types of side-channel
attacks, where the time required to perform a certain op-
eration is leveraged to deduce private information on the
attacked system. For example, Kocher found that uninten-
tional timing characteristics reveal suﬃcient information to
extract the entire secret key from a vulnerable cryptosys-
tem [20].
In the context of the web, Felten and Schnei-
der [12] were the ﬁrst to indicate that adversaries could use
timing attacks to compromise a user’s online privacy.
In
their research, published in 2000, they describe how diﬀerent
types of caching can leak information about the static web
pages a user recently visited. Several years later, Bortz et al.
presented two types of web-based timing attacks targeting
dynamic web pages [7].
In their ﬁrst attack, called direct
timing, an adversary directly measures response times from
a website in order to obtain information about the website’s
state, e.g., the existence of an account with a certain user-
name. The second attack, called cross-site timing, enables
an attacker to learn information on the state of a user at a
cross-origin website. By leveraging JavaScript to time cross-
origin requests, the researchers show how an adversary can
detect whether a user is currently logged in to a cross-origin
website.
2.1 Threat Model
In the novel timing attacks we present, we employ a sim-
ilar threat model as in Bortz’ cross-site timing attack, i.e.,
an adversary provides an unwitting user with a malicious
client-side script that performs timing measurements on a
cross-origin website. By analyzing these timing measure-
ments, adversaries can estimate the ﬁle size of an external
resource, which often depends on the current state of the
user. This consequently allows an attacker to infer informa-
tion about a user’s current state at the third-party website.
Since there is a plethora of diﬀerent types of personal in-
formation shared across a large and diverse set of online web
services, an attacker’s interests may vary. An attacker may
be interested in uncovering the unique identity of a user,
which, as previous research has indicated [10, 14, 42], can be
obtained by combining various bits of personal information
of that user. In another attack scenario, the adversary could
leverage a user’s private information in order to create, or ex-
tend, a proﬁle on the user, and display targeted advertising,
derived from the obtained information.
In their research,
Nikiforakis et al. have shown how advertising companies
are already using, often questionable, advanced techniques
to track a user across diﬀerent sites in order to uncover a
user’s interests [29]. The use of timing attacks could extend
their ability to discover personal information, including age,
location and interests of a user, posing an imminent threat
to the online privacy of users.
3. WEB-BASED TIMING ATTACKS
When requesting a certain URL, a web server will often
return a diﬀerent resource based on the current state of the
user. For example, when requesting the page of a private
group on a social network, a user who is not a member of
this group will receive a short error message, whereas group
members are provided the full information of that private
group.
If an attacker is able to diﬀerentiate between the
two types of responses, it is possible that the user’s group
membership is uncovered. Using web-based timing attacks,
an attacker can diﬀerentiate between responses on the basis
of their ﬁle size, as timing measurements are related to ﬁle
size.
In order to detect the group membership of a user, the
attacker can ﬁrst perform a timing measurement on a re-
source with a predictable size, e.g., the page of a private
group without any members. Using this value as a base-
line, the attacker can discover whether the user is member
of a speciﬁc group by collecting timing measurements of that
group’s page. If the outcome is comparable to the baseline,
the user is not a member of the group. If, however, the dif-
ference in timing results is considerable, this indicates that
the user received the full group information, and is thus a
member of the group.
The accuracy with which an attacker can discover infor-
mation on the state of a victim, is dependent on the cor-
rectness of the timing measurements. For example, if the
attacker’s timing measurements are based on the time re-
quired to download a resource, there are many factors that
can negatively inﬂuence the correctness of the conducted
measurements. Variations in latency, network congestion,
and dropped packets are just a few examples which may
1383prevent an attacker from successfully executing a timing at-
tack. To improve the attack’s eﬀectiveness, an attacker can
obtain multiple timing measurements, and subsequently ap-
ply statistical methods. However, by using multiple mea-
surements, an adversary incurs a performance cost since the
external resources need to be downloaded numerous times.
Depending on the state of the network, these costs may be-
come signiﬁcant, preventing the attacker from inferring the
state of the victim within a limited time frame. Moreover,
a web server may start blocking requests when it detects
a large number of requests originating from the same user,
preventing an attacker from executing his attack.
In this section, we show how side-channel information ex-
posed by modern browsers can be used to perform more
accurate timing attacks. We exemplify this by describing
four new types of timing attacks that can be employed by
an adversary to estimate the size of a resource, and are in-
dependent of a victim’s network stability. In addition, we
compare these newly introduced attacks to the classic tim-
ing attacks where the network response time is measured,
and show how some of these novel timing techniques can be
combined to further improve their performance.
3.1 Experimental setup
In order to evaluate how well the diﬀerent types of tim-
ing techniques perform, we conducted the following experi-
ments. We set up a remote web server to serve four randomly
generated HTML ﬁles, each with a diﬀerent size: 50kB,
60kB, 150kB and 250kB. For each type of timing attack, we
wrote a JavaScript program which would obtain 100 timing
measurements. In the interest of minimizing the inﬂuence of
a temporary network anomaly, or network congestion, the
ﬁles were requested sequentially and in random order.
All experiments were executed in the latest version of
Google Chrome, on a 2.5 GHz Intel Core i5 Macbook Pro
with 16 GB RAM, which was placed in our campus’ wireless
network. As the network speed of our campus is signiﬁcantly
higher than the global average of 22.1 Mbps [30], the exper-
iments were re-evaluated in a residential network. We found
that the results of the residential-network evaluation were
very similar to the ones from our campus. Thus, in this pa-
per, we only present the results based on the measurements
obtained at our campus.
To measure the time in our experiments, we used the per-
formance.now function of the High Resolution Time API,
which is present in all modern browsers and returns timing