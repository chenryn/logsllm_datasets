param[3].buffer_type = MYSQL_TYPE_DATETIME;
para
param[2].buffer_length = sizeof (my_str);
par
param[2].buffer_type = MYSQL_TYPE_STRING;
/*设置CHAR参数*/
param[1].is_null=0;
param[1]
param[1].buffer_type=MYSQL_TYPE_FLOAT;
/*设置FLOAT参数*/
/*buffer_length和length不需要设置*/
param[0].is_null=0;
param[0].is_unsigned
param[0].buffer=（void *)&my_int;
printf ("Inserting record %d...\n",i）;
￥
my_datetime.minute
my_datetime.day=cur_time->tm_mday;
my_datetime.month =.cur_time->tm_mon+1;
/*param[3]：把my_datetime设置成当前的日期和时间*/
my_str[24]=
my_datetime.year
curtime
(void)strcpy
/*param[1]：设置my_float的值*/
my_int=i;
/*param[0]：设置my_int的值*/
/*设置那些与每个参数关联在一起的变量*/
(void）time（&clock）;/*获得当前时间
return;
(mysql_stmt_bind_param (stmt,param）!=0)
is_unsigned、buffer_length和length都不需要设置*/
设置DATETIME参数*/
is_unsigned 不需要设置，而length则会在随后设置*/
★
am[2].is_null
am[2].
is_unsigned、
.buffer
.buffer
（float）
\0';
(my_str,
buffer_length和length都不需要设置*/
(void *)&my_datetime;
(void*）&my_float;
cur_time->tm_year+
i：
=0；
cur_time->tm_min;
把尾部的换行符去除掉*/
ctime （&clock））；
（my_str）;
my_str;
*
1900;
7.8使用服务器端预处理语句
277
---
## Page 298
零，
的是memset（），如果你的系统没有 memset（），也可以用bzero（）。下面两条语句是等效的：
里所演示的，设置操作涉及以下两个阶段。
具体如下所示。
代表VALUES（）里列出的数据值，或者WHERE子句里的数据值。但有些地方不能使用占位符，
mysql_stmt_prepare(）函数。这条语句如下所示：
以显式地表明正在发生的事情，但这不是必须的。实际上，在清空结构之后，就必要再把
insert_rows（）函数里做的第一件事是准备一条INSERT 语句，采用的方式是将它传递给
8
清空 param数组，会把所有结构成员隐式地设置成零。接下来的代码会把某些成员设置成
bzero ((void *) param, sizeof (param));
memset ((void *) param,0, sizeof (param));
在初始化的第一个阶段里，对包含 MYSQL_BIND 结构的 param数组进行清零。此程序使用
(2）执行行插入循环-
(1）初始化这些结构里对于所有新插入的行都相同的部分。
下一步,设置 MYSQL_BIND 结构的数组,其中每个元素都对应一个占位符。如 insert_rows（）
口可以把占位符用在操作符的任何一侧，但不允许同时用在两侧。下面这条语句是合法
口作为标识符，如表名或列名。下面这条语句便是非法的：
这条语句包含4个占位符，因此每次执行这条语句时，需要提供4个数据值。占位符通常
实
INSERT INTO t（i,f,C,dt）VALUES（?,？,?,？)
口
口
口
insert_rows（）函数的目的是，
际上，也可以在循环体内执行所有的初始化工作，但这种做法比较低效。
SELECT*FROM？
口
这条限制很有必要，这样才能让服务器确定参数的数据类型。
SELECT * FROM student WHERE student_id =?
协议使用MYSQL_TIME 结构来传输 DATETIME、TIMESTAMP、DATE 和 TIME 值。
一个DATETIME值。这也是“当前时间”的值，但存储在MYSQL_TIME 结构里。
SELECT * FROM student WHERE ？=?
不过，下面这条语句是非法的：
Sun Sep 1916:47:23CDT 2004
串形式。ctime（)返回值的格式如下：
一个CHAR 值。为生成这些值，
一个1.0~5.0之间的FLOAT值
一个 1~5 之间的 INT 值。
sleep（1）；/*暂停一下（以便更改生效）*/
if (mysql_stmt_execute (stmt) I= 0)
my_datetime.neg =0;
my_datetime.second = cur_time->tm_sec;
第7章
return;
print_stmt_error (stmt,"Could not execute statement");
用 C语言编写MySQL 程序
一它会逐行初始化这些结构里对于各行都不相同的部分。
，往测试表里插入5个包含下列值的行。
需要调用系统函数ctime（）来获得“当前时间”的字符
，二进制
---
## Page 299
数会把当前值传递给服务器，而服务器将把它们整合进预处理语句，然后执行该语句。
句的各个参数。
那些变量，并执行该语句。这个过程会循环执行5次。循环的每次选代都将把相应的值赋给语
bind_param（），将它与预处理语句绑定起来。接着，把各个值赋给 MYSQL_BIND 结构所指向的
的结构成员则取决于你要传输的值的类型。
该结构的任何成员赋为零了。
下一步是把正确的信息赋给MYSQL_BIND 数组里的每一个参数。对于每个参数，需要设置
MYSQL_BIND
static void
当 insert_rows（）返回时，测试表已被填充，可以调用 select_rows（）来检索它们了：
在把各个参数值设置好之后，调用 mysql_stmt_execute（）便可以执行这条语句。这个函
char
select_rows
口对于整数和浮点参数，只需要把各个值赋给关联的 int 和 float 变量即可。
在完
口i
口 buffer 成员应该设置成那个保存有数据值的变量的地址。insert_rows（）声明了4个
口 buffer_type 成员必须设置；它用于表明参数值的数据类型。附录 G 中有一张表，其
口
赋给与 MYSQL_TIME 结构有关的各个成员。
日期时间参数也会被赋值成当前时间，但采用的方式是，把这个时间的各个部分，分别
值，可以调用ctime（），并去掉换行字符。
对于字符串参数，需要把字符串格式的当前时间赋给关联的char 变量。要获得这个
完成对MYSQL_BIND数组的初始化之后，便可以把该数组传递到mysql_stmt_
和MYSQL_TYPE_FLOAT分别表示值的长度为4个字节和8个字节。
别表明，用于存储字符串的那个缓冲区的长度
对于字符串值或二进制数据（BLOB值），还需要设置两个MYSQL_BIND 成员。它们分
is_null1设置成0，并且不需要my_bool变量
明将要插入的值是否为NULL。如果不会发送NULL值（如本例一样），那么可以把
my_bool 变量的地址。然后，在插入任何给定行之前，把这个变量设置成真或假，以表
is_nul1成员表明是否正在传输一个 NULL 值。一般情况下，应该把这个成员设置成
is_unsigned 设置为1以外，
表明参数是否为UNSIGNED 整数类型。我们的表包含一个有符号INT 列，因止
is_unsigned成员只适用于整数数据类型。它应该被设置成真（非零）或假（零），
成表的列值，并用它们来创建新行。
[i].buffer 值会被设置成指向相应的变量。在插入新行时，我们会把这 4个变量设置
类型和 C语言类型。
中完整地列出了每一个允许使用的类型代码，并且还显示了与每个代码相对应的SQL
对
给
会
在
能
固定不变的，因而可以根据buffer_type 的值来确定。例如，MYSQL_TYPE_LONG
于数字类型和时态类型，不用设置buffer_length和length。这些类型的长度都
地址，该变量包含了传输值的实际长度。
出缓冲区的长度。length是一个指针，
因行不一样而有所不同，那么它们的值也会存在差异。buffer_length 成员用
许多情况下，它们都是相同的。但是，如果使用了固定长度的缓冲区，并且发送
是int类型。
(MYSQL_STMT *Stmt)
param[4];
*stmt_str ="SELECT i,f,c,dt FROM t";
度，以及要被传输的那个值的实际长度。
7.8使用服务器端预处理语句
279
来
值
此
---
## Page 300
280
my_bool
MYSQL_TIME
unsigned long 1
char
float
int
if (mysql_stmt_bind_result (stmt, param) != 0)
param[3]
param[3].buffer=(void
param[3].buffer_type =MYSQL_TYPE_DATETIME;
￥
param[2].buffer_length = sizeof (my_str);
param[2].buffer_type = MYSQL_TYPE_STRING;
/*设置CHAR参数*/
param[1].buffer_type = MYSQL_TYPE_FLOAT;
/*设置FLOAT参数*/
param[o].is_unsigned
param[O].buffer_type = MYSQL_TYPE_LONG;
/*设置INT参数*/
memset（（void *）param,0，sizeof（param));/*结构清零*/
if （mysql_stmt_field_count（stmt) != 4)
if (mysql_stmt_prepare (stmt, stmt_str,strlen (stmt_str)) 1=0)
printf("Retrieving records...\n");
*
￥
第7章用C语言编写MySQL程序
print_stmt_error (stmt, "Could not bind parameters for SELEcT");
设置DATETIME参数*/
is_unsigned不需要设置*/
is_unsigned、buffer_length和length都不需要设置
buffer_length和length不需要设置*/
初始化结果列的结构
return;
print_stmt_error
return;
print_stmt_error (stmt, "Could not prepare SELEcT statement");
is_null
is_null[4];
my_datetime;
my_str_length;
my_str[24];
my_float;
my_int;
=&my_str_length;
&is_null[3];
&is_null[0];
(stmt,
0：
*)&my_datetime;
"Unexpected column count from SELECT");
*
---
## Page 301
体过程如下所示。
之前，把要被发送到服务器的数据值设置好。
不同之处在于，这次是在执行此语句之后，接收来自服务器的各个数据值，而不是在执行语句
与insert_rows（）一样，select_rows（)的大量工作也是设置一个 MYSQL_BIND 结构的数组。
这意味着，在执行这条语句之前，
此时，这条语句并没有包含任何占位符：
尽管如此，设置 MYSQL_BIND 数组的过程还是与 insert_rows（）里的对应代码很相似，具
(2）把每个参数的 buffer_type 成员设置成相应的类型代码。
（1）对数组清零。
SELECT i，f，C,dt FROM t
select_rows（）函数由3个部分组成：准备一条 SELECT 语句、执行它，然后检索结果。
mysql_stmt_free_result (stmt);
f
printf
printf
printf
printf
1*显示各个行的值*/
return;
print_stmt_error (stmt,"Could not buffer result set");