and are not relevant for the purpose of security analysis.
When an interesting execution path is detected by the above
heuristic, the state associated to the faulty operation is recorded
and the emulation is terminated. At this point a test-case with
an example input to reach this state is generated, and the
constraints associated with each symbolic value are stored to
be checked for false positives (i.e., values too strictly bound).
Automatically telling normal constraints apart from those
that are a sign of a vulnerability is a complex task. In fact
it would require knowledge of the program semantics that
were lost during compilation (e.g., array boundaries). Such
knowledge could be extracted from the source code if it
is available, or might be extrapolated from binary artifacts
in the executable itself or the build environment. In such
cases, speciﬁc constraints could be fed into Avatar by writing
appropriate plugins to parse them, for example by scanning
debug symbols in a non-stripped ﬁrmware (e.g., a DWARF
parser for ELF ﬁrmwares) or by reading other similar symbols
information.
Finally, Avatar could highly beneﬁt from a tighter coupling
with a dynamic data excavator, helping to reverse engineer
ﬁrmware data structures [17].
the heuristic
proposed in Howard [52] for recovering data structures by
observing access patterns under several execution cycles could
be easily imported into the Avatar framework. Both tools
perform binary instrumentation on top of QEMU dynamic
translation and make use of a symbolic engine to expand the
analyzed code coverage area.
In particular,
C. Limitations of state synchronization
or cache invalidation instructions might be taken as hint that
some memory region has been changed by DMA.
Second,
if code is executed on the device, Avatar is
currently incapable of detecting which regions have been
modiﬁed. In consequence, whenever memory accesses of the
code run on the device are not predictable by static analysis,
we need to transfer the whole memory of the device back to
the emulator on a device-to-emulator state switch. We plan to
address this issue by using checksumming to detect memory
region changes and minimize transferred data by identifying
smallest changed regions through binary search.
Third, when Avatar performs symbolic execution, symbolic
values are conﬁned to the emulator. In case that a symbolic
value needs to be concretized and sent
to the device, a
strategy is needed to keep track of the different states and
I/O interactions that were required to put the device in that
state. This can be performed reliably by restarting the device
and replaying I/O accesses. While this solution ensures full
consistency, it is rather slow.
VI. EVALUATION
In this section we present three case studies to demonstrate
the capabilities of the Avatar framework on three different real
world embedded systems. These three examples by no means
cover all the possible scenarios in which Avatar can be applied.
Our goal was to realize a ﬂexible framework that a user can
use to perform a wide range of dynamic analysis on known
and unknown ﬁrmware images.
As many other security tools (such as a disassembler or an
emulator), Avatar requires to be conﬁgured and tuned for each
situation. In this section, we try to emphasize this process, in
order to show all the steps a user would follow to successfully
perform the analysis and reach her goal. In particular, we will
discuss how different Avatar conﬁgurations and optimization
techniques affected the performance of the analysis and the
success of the emulation.
Not all the devices we tested were equipped with a debug
interface, and the amount of available documentation varied
considerably between them. In each case, human intervention
was required to determine appropriate points where to hook
execution and portions of code to be analyzed, incrementally
building the knowledge-base on each ﬁrmware in an iterative
way. A summary of the main characteristics of each device
and of the goal of our analysis is shown in Table II.
A. Analysis of the Mask ROM Bootloader of a Hard Disk
Drive
Our current implementation of the synchronization between
device state and emulator state works well in general, but is
difﬁcult in some special cases.
Our ﬁrst case study is the analysis of a masked ROM
bootloader and the ﬁrst part of the secondary bootloader of
a hard disk drive.
First it is difﬁcult to handle DMA memory accesses in our
current model. For example, the ﬁrmware can send a memory
address to a peripheral and request data to be written there.
The peripheral will then notify the ﬁrmware of the request’s
completion using an interrupt. Since Avatar does not know
about this protocol between ﬁrmware and peripheral, it will
not know which memory regions have been changed. On newer
ARM architectures with caches, data synchronization barrier
The hard disk we used in our experiment is a commercial-
off-the-shelf SATA drive from a major hard disk manufacturer.
It contains an ARM 966 processor (that
implements the
ARMv5 instruction set), an on-chip ROM memory which con-
tains the masked ROM bootloader and some library functions,
an external serial ﬂash that is connected over the SPI bus
to the processor, a dynamic memory (SDRAM) controller, a
serial port accessible through the master/slave jumpers, and
9
Target device
Manufacturer and model
System-on-Chip
CPU
Debug access
Analyzed code
Scope of analysis
Experiment VI-A
Hard disk
undisclosed
Experiment VI-B
ZigBee sensor
Redwire Econotag
Experiment VI-C
GSM phone
Motorola C118
unknown
MC13224
TI Calypso
ARM966
Serial port
Bootloader
Backdoor detection
ARM7TDMI
ARM7TDMI
JTAG
JTAG
ZigBee stack
Vulnerability discovery
SMS decoding
Reverse engineering
TABLE II: Comparison of experiments described in Section VI.
Address Space
Interrupt vect.
Code SRAM
ROM
DRAM
Data SRAM
Memory Mapped IO
0x00000000
0x00000040
0x00008000
0x00100000
0x00120000
0x00200000
0x00400000
0x04000000
0x04004000
0x40000000
0x50000000
0xFFFFFFFF
Fig. 4: Hard drive memory layout.
without even reaching the ﬁrst bootloader menu, we aborted
the experiment.
In the second experiment we kept the same setting, but we
used the memory optimization plugin to automatically detect
the code and the stack memory regions and mark them as
local to the emulator. This change was enough to reach the
bootloader menu after approximately eight hours of emulation.
Though considerably faster than in the ﬁrst experiment, the
overhead was still unacceptable for this kind of analysis.
Since the bottleneck of the process was the multiple read
operations performed by the ﬁrmware to load the second stage,
we conﬁgured Avatar to replay the hardware interaction from
disk, without forwarding the request to the real hardware.
In particular, we used the trace of the communication with
the ﬂash memory from the second experiment to extract the
content of the ﬂash memory, and dump it into a ﬁle. Once the
read operations were performed locally in the emulator, the
bootloader menu was reached in less than four minutes.
At this point, we reached an acceptable working conﬁgu-
ration. In the next experiment, we show how Avatar can be
used in conjunction with the symbolic execution of S2E to
automatically analyze the communication protocol of the hard
drive’s bootloader and detect any hidden backdoor in it.
10
Fig. 3: The disk drive used for experiments. The disk is
connected to a SATA (Data+Power) to USB interface (black
box on the right) and its serial port is connected to a TTL-
serial to USB converter (not shown) via the 3 wires that can
be seen on the right.
some other custom hardware that is necessary for the drive’s
operation. The drive is equipped with a JTAG connection,
but unfortunately the debugging features were disabled in our
device. The hard drive’s memory layout is summarized in
Figure 4.
The stage-0 bootloader executed from mask ROM is nor-
mally used to load the next bootloader stage from a SPI-
attached ﬂash memory. However, a debug mode is known to
be reachable over the serial port, with a handful of commands
available for ﬂashing purposes. Our ﬁrst goal was to inject
the Avatar stub through this channel to take over the booting
process, and later use our framework for deeper analysis of
possible hidden features (e.g., backdoors reachable via the
UART).
The ﬁrst experiment we performed consisted of loading the
Avatar stub on the drive controller and run the bootloader’s
ﬁrmware in full separation mode. This mimics what a user
with no previous knowledge of the system would do in the
beginning. In full separation mode, all memory accesses were
forwarded through the Avatar binary protocol over the serial
port connection to the stub and executed on the hard drive,
while the code was interpreted by S2E. Because of the limited
capacity of the serial connection, and the very intensive I/O
performed at the beginning of the loader (to read the next
stage from the ﬂash chip), only few instructions per second
were emulated by the system. After 24 hours of execution
DS
AP 
WT 
RD
GO
TE
BR 
BT
WW
?
Use a minimal version of the Motorola S-Record
binary data format to transmit data to the device
Set the value of the address pointer from the parameter
passed as hexadecimal number. The address pointer
provides the address for the read, write and execute
commands.
Write a byte value at the address pointer. The address
pointer is incremented by this operation. The reply of
this command depends on the current terminal echo
state.
Read a byte from the memory pointed to by the address
pointer. The address pointer is incremented by this
operation. The reply of this command depends on the
current terminal echo state.
Execute the code pointed to by the address pointer.
The code is called as a function with no parameters,
to execute Thumb code one needs to specify the code’s
address + 1.
Switch the terminal echo state. The terminal echo state
controls the verbosity of the read and write commands.
Set the serial port baud rate. The parameter is the
value that will be written in the baud rate register,
for example ”A2” will set a baudrate of 38400.
Resume execution with the ﬁrmware loaded from ﬂash.
Erase a word (4 bytes) at the address pointer and
increment address pointer.
Print the help menu showing these commands.
TABLE III: Mask ROM bootloader commands of the hard
drive. In the left column you can see the output of the help
menu that is printed by the bootloader. In the right column
a description obtained by reverse engineering with symbolic
execution is given.
We conﬁgured Avatar to execute the hard drive’s boot-
loader until the menu was loaded, and then replace all data
read from the serial port register by symbolic values. As a
result, S2E started exploring all possible code paths related to
the user input. This way, we were able to discover all possible
input commands, either legitimate or hidden (which may be
considered backdoors), that could be used to execute arbitrary
code by using S2E to track when symbolic values were used as
address and value of a memory write, and when the program
counter would become symbolic. With similar methodologies,
a user could use symbolic execution to automatically discover
backdoors or undocumented commands in input parsers and
communication protocols.
In order to conduct a larger veriﬁcation of the ﬁrmware
input handler, we were also able to recover all the accepted
commands and verify their semantics. Since the menu offered
a simple online help to list all the available commands, we
could demonstrate that Avatar was indeed able to automatically
detect each and all of them (the complete list is reported
in Table III). In this particular device, we veriﬁed that no
hidden commands are interpreted by the ﬁrmware and that
a subset of the commands can be used to make arbitrary
memory modiﬁcations or execute code on the controller, as
documented.
However, we found that the actual protocol (as extracted by
symbolic analysis) is much looser than what is speciﬁed in the
help menu. For example the argument of the ’AP’ command
M
O
R
M
A
R
Address Space
ROM interrupt vect.
Libraries in ROM
User interrupt vect.
User program
Unused
O
I
Memory mapped IO
Unused
0x00000000
0x00000020
0x00400000
0x00400020
0x80000000
0x80003000
0x80003000
0xFFFFFFFF
Fig. 5: Econotag memory layout (respective scales not re-
spected).
can be separated by any character from the command, not only