cluster_my_epoch:0
cluster_stats_messages_ping_sent:183
cluster_stats_messages_sent:183
cluster_stats_messages_pong_received:183
cluster_stats_messages_received:183
\[root@sql51 \~\]# redis-trib.rb add-node \--slave 192.168.4.57:6357
192.168.4.52:6352
\>\>\> Adding node 192.168.4.57:6357 to cluster 192.168.4.52:6352
\>\>\> Performing Cluster Check (using node 192.168.4.52:6352)
\...
\>\>\> Send CLUSTER MEET to node 192.168.4.57:6357 to make it join the
cluster.
Waiting for the cluster to join.
\>\>\> Configure node as replica of 192.168.4.58:6358.
\[OK\] New node added correctly.
\[root@sql51 \~\]#
\[root@sql51 \~\]# redis-trib.rb check 192.168.4.57:6357
\>\>\> Performing Cluster Check (using node 192.168.4.57:6357)
S: f5251bebf750c5beaa48fbbed03e880889e07fcd 192.168.4.57:6357
slots: (0 slots) slave
replicates c2e039c3a388e62ec6c02a8af3b5a8bd53040a65
M: c2e039c3a388e62ec6c02a8af3b5a8bd53040a65 192.168.4.58:6358
slots: (0 slots) master
1 additional replica(s)
\....
\[OK\] All nodes agree about slots configuration.
\>\>\> Check for open slots\...
\>\>\> Check slots coverage\...
\[OK\] All 16384 slots covered.
\[root@sql51 \~\]#
## 3.4将redis从集群中恢复单个服务
# NOSQL03\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
# 1 Redis 主从复制
工作原理:
1.  Slave向master发送sync命令
2.  Master启动后台存盘进程,并收集所有修改数据命令
3.  Master完成后台存盘后,传送整个数据文件到slave
4.  Slave接收数据文件(dump.rdb文件).加载到内存中完成首次完全同步
5.  后续有新数据产生,master继续将新的数据收集到的修改命令传送给slave,slave运行命令后完成同步
主从注意事项:
-   启动服务默认为主库
-   从库需要手动配置
-   从库默认是只读的
-   命令操作都是临时,
## 1.1 结构模式
一主一从
一主多从
主从从
## 1.2配置一主一从对应命令
### 查看主从配置信息
192.168.4.51:6351\> info replication #查看主从配置信息
\# Replication
role:master #主库 开启服务默认是主库
connected_slaves:0 #从库个数为"0"
master_replid:f6392ab7acaca07d48824a5d507ba559849edfc2
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:0
second_repl_offset:-1
repl_backlog_active:0
repl_backlog_size:1048576
repl_backlog_first_byte_offset:0
repl_backlog_histlen:0
### 临时手动设置为从库
重启服务失效
\[root@sql52 \~\]# redis-cli -h 192.168.4.52 -p 6352
192.168.4.52:6352\> slave of 192.168.4.51 6351
OK
192.168.4.52:6352\> info replication
\# Replication
role:slave #从库
master_host:192.168.4.51 #主库地址
master_port:6351
master_link_status:down #down状态是无法通讯,
master_last_io_seconds_ago:-1
master_sync_in_progress:0
slave_repl_offset:0
master_link_down_since_seconds:1551421058
slave_priority:100
slave_read_only:1
connected_slaves:0
master_replid:dbc0e5da85866689df82627203fe344a708933fe
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:0
second_repl_offset:-1
repl_backlog_active:0
repl_backlog_size:1048576
repl_backlog_first_byte_offset:0
repl_backlog_histlen:0
主库存数据
192.168.4.51:6351\> set x 1
OK
192.168.4.51:6351\> set y 2
OK
192.168.4.51:6351\> set z 3
OK
从库查看数据
192.168.4.52:6352\> keys \*
1\) \"y\"
2\) \"z\"
3\) \"x\"
### 永久配置:修改配置文件
\[root@sql52 \~\]# vim /etc/redis/6379.conf
282 \# slaveof \ \ #修改前
282 slaveof 192.168.4.51 6351 #修改后
\[root@sql52 \~\]# /etc/init.d/redis_6379 stop #停止服务
Stopping \...
Redis stopped
\[root@sql52 \~\]# /etc/init.d/redis_6379 start #开启服务
Starting Redis server\...
\[root@sql52 \~\]# redis-cli -h 192.168.4.52 -p 6352
192.168.4.52:6352\> info replication
\# Replication
role:slave
master_host:192.168.4.51
master_port:6351
master_link_status:up
master_last_io_seconds_ago:9
master_sync_in_progress:0
slave_repl_offset:1014
slave_priority:100
slave_read_only:1
connected_slaves:0
master_replid:721fe422b4ca96a06d146d1cb264f52caf085bdf
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:1014
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1001
repl_backlog_histlen:14
### 临时手动设置为主库
重启失效,恢复从库
192.168.4.52:6352\> slaveof no one
OK
192.168.4.52:6352\> info replication
\# Replication
role:master
connected_slaves:0
### 永久配置主库
注释配置文件中
282# slaveof 192.168.4.51 6351 #注释这行
配置有密码的主从复制
### 主库设置连接密码的主从配置
501 requirepass 123456
\[root@sql51 \~\]# vim /etc/init.d/redis_6379
43 \$CLIEXEC -h 192.168.4.51 -p 6351 -a 123456 shutdown
\[root@sql51 \~\]# redis-cli -h 192.168.4.51 -p 6351 -a 123456
192.168.4.51:6351\>
192.168.4.51:6351\> info replication
\# Replication
role:master
connected_slaves:0
2在从库中修改配置文件
192.168.4.52:6352\> info replication
\# Replication
role:slave
master_host:192.168.4.51
master_port:6351
master_link_status:down #未指定密码前是down
\[root@sql52 \~\]# vim /etc/redis/6379.conf
289 \# masterauth \
289 \# masterauth 123456
\[root@sql52 \~\]# /etc/init.d/redis_6379 stop
Stopping \...
Redis stopped
\[root@sql52 \~\]# /etc/init.d/redis_6379 start
Starting Redis server\...
\[root@sql52 \~\]# redis-cli -h 192.168.4.52 -p 6352
192.168.4.52:6352\> info replication
\# Replication
role:slave
master_host:192.168.4.51
master_port:6351
master_link_status:up #修改后重启 为UP
master_last_io_seconds_ago:9
### 从库默认是只读的
192.168.4.52:6352\> set aa 11
(error) READONLY You can\'t write against a read only slave.
## 1.2配置一主多从\\主从从
51为52,53的主 52为51的从同时为54的主 53为51的从 54为52的从
在上面实验的基础上:51为52的主,,51设置了密码
53配置为
282 slaveof 192.168.4.51 6351
289 masterauth 123456
54配置为
282 slaveof 192.168.4.52 6352
289 masterauth 123456
## 1.3哨兵模式
-   监视当前主库,当主库宕机后,从对应的从库里选举新的主库
-   是一种服务,可以在主库上运行.也可以单独拿一台设备运行
-   使用哨兵模式,如果主服务器设置了密码.各从服务器配置文件中设置了
    masterauth
    123456(指定连接主服务器密码),因为从服务器没有设置相同连接密码(或者没设置连接密码)的主服务器会漂移,但是所有的从服务器状态都会是down,
### 1 需要安装redis软件包
(本实验用55做,之前已安装完成)
### 2创建服务主配置文件
有配置文件模板
\[root@sql51 \~\]# ls /root/redis-4.0.8/sentinel.conf
/root/redis-4.0.8/sentinel.conf #模板
直接编辑空白文件,添加内容也可
\[root@sql55 \~\]# vim /etc/sentinel.conf
bind 0.0.0.0 #实验中未配置
sentinel monitor sql51 192.168.4.51 6351 1
sentinel auth-pass 123456
#sentinel monitor master主机名 masterip地址 master端口 票数
#sentinel auth-pass 连接主库密码
#票数:有几台哨兵主机连接不上主库时切换主库,这里只有一台哨兵服务器主机
2863
### 3启动服务 
\[root@sql55 \~\]# redis-sentinel /etc/sentinel.conf
5886:X 01 Mar 16:09:03.325 \# oO0OoO0OoO0Oo Redis is starting
oO0OoO0OoO0Oo
5886:X 01 Mar 16:09:03.325 \# Redis version=4.0.8, bits=64,
commit=00000000, modified=0, pid=5886, just started
5886:X 01 Mar 16:09:03.325 \# Configuration loaded
5886:X 01 Mar 16:09:03.327 \* Increased maximum number of open files to
10032 (it was originally set to 1024).
5886:X 01 Mar 16:09:03.379 \# Sentinel ID is
23a57eb24521792de0bef4bfbfa054f5b1032c9b
5886:X 01 Mar 16:09:03.379 \# +monitor master sql51 192.168.4.51 6351
quorum 1
5886:X 01 Mar 16:09:03.382 \* +slave slave 192.168.4.52:6352
192.168.4.52 6352 @ sql51 192.168.4.51 6351
5886:X 01 Mar 16:09:03.497 \* +slave slave 192.168.4.53:6353
192.168.4.53 6353 @ sql51 192.168.4.51 6351
### 4主库发生宕机之前51 52 53的主从信息
192.168.4.51:6351\> info replication
\# Replication
role:master
connected_slaves:2
slave0:ip=192.168.4.52,port=6352,state=online,offset=97270,lag=1
slave1:ip=192.168.4.53,port=6353,state=online,offset=97270,lag=0
master_replid:0e570019c5576f6196a182ede0d6e4c37adbc09a
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:97270
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:97270
192.168.4.52:6352\> info replication
\# Replication
role:slave
master_host:192.168.4.51
master_port:6351
master_link_status:up
192.168.4.53:6353\> info replication
\# Replication
role:slave
master_host:192.168.4.51
master_port:6351
master_link_status:up
### 5主库发生宕机之后51 52 53的主从信息
192.168.4.51:6351\> exit
\[root@sql51 \~\]# /etc/init.d/redis_6379 stop
Stopping \...
Waiting for Redis to shutdown \...
Redis stopped
192.168.4.52:6352\> info replication
\# Replication
role:slave
master_host:192.168.4.53 #52的主库变53
master_port:6353
master_link_status:down
192.168.4.53:6353\> info replication
\# Replication
role:master #53变主库
connected_slaves:0
# 2 redis数据持久化(RDB/AOF)
服务在运行的过程中,自动把内存里的数据存储到物理硬盘
## 持久化（Persistence），介绍
-   即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。
-   持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。
-   持久化是将程序数据在持久状态和瞬时状态间转换的机制。
-   JDBC就是一种持久化机制。文件IO也是一种持久化机制。
日常持久化的方法
将鲜肉冷藏，吃的时候再解冻的方法也是。
将水果做成罐头的方法也是。
将人的脏器迅速冷冻，运输，然后解冻给人移植的技术也是。
# 持久化之RDB
## RDB介绍
Redis数据库文件,全称Redis DataBase