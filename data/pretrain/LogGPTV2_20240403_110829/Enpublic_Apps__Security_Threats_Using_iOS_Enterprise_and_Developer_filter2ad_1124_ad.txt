### Introduction to iOS Vulnerabilities and Exploitation

Despite the robust security measures in place, iOS remains susceptible to vulnerabilities that can be exploited without jailbreaking. Notably, our approach leverages the same vulnerabilities used by other jailbreaking methods to compromise the system.

**Code Signing Bypass:**
C. Miller [30] discovered a critical vulnerability in the iOS code signing mechanism, which could be bypassed, allowing attackers to allocate a writable and executable memory buffer. This enabled malicious apps to generate and execute attack code at runtime. However, Apple has since addressed this issue and blocked apps that use such methods to dynamically load and launch malicious payloads.

**Remote Exploitability:**
T. Wang [35] proposed a novel method to evade the app review process by making apps remotely exploitable. By rearranging signed code, these apps introduce malicious control flows that are dynamically generated when the attacker exploits the app. As a result, Apple’s review process does not detect these vulnerabilities. This flaw has also been fixed by Apple.

**Botnet Infections:**
Researchers in [34] and [29] demonstrated that it is possible to infect a large number of iOS devices through botnets. By exploiting design flaws in iTunes and the device provisioning process, they showed that a compromised computer can be instructed to install "enterprise" apps on iOS devices. These studies highlight that iOS devices can be infected, and the App Store's review process is insufficient for complete protection.

**Systematic Analysis:**
Our work further reveals that iOS vulnerabilities exist. The closest related work is by J. Han et al. [27], who proposed launching attacks on non-jailbroken iOS devices using private APIs. Our approach is more systematic, showing that there are additional channels for distributing malicious apps beyond the App Store. We focus not only on exploiting private APIs but also on illustrating other vulnerabilities. We performed a comprehensive analysis of a large number of iOS apps, specifically targeting iOS 7/8, which had not been previously studied.

### Conclusion

In this paper, we present the security landscape of iOS enterprise apps and their usage of private APIs. To understand their security impact, we designed and implemented a mechanism that evaluates the overall security status of these apps by combining static semantic checks and runtime detection technologies. Our results show that out of 1408 enterprise apps, 844 (60%) use private APIs. Additionally, 14 (1%) apps contain URL scheme vulnerabilities, and 901 (64%) transport sensitive information through unencrypted channels or store private information in plain text on the devices. We summarized 25 private APIs on iOS 6/7/8 with security vulnerabilities and filed one CVE for iOS devices.

### Acknowledgments

We would like to thank our shepherd, Jin Han, and the anonymous reviewers for their valuable comments. We also extend our gratitude to Raymond Wei, Dawn Song, and Zheng Bu for their valuable help in writing this paper.

### References

[1] API Reference of iOS Frameworks, 2014. https://developer.apple.com/library/ios/navigation/#section=Resource%20Types&topic=Reference.
[2] App Store Review Guidelines. https://developer.apple.com/appstore/resources/approval/guidelines.html.
[3] Apple Bans Qihoo Apps From iTunes App Store, February 2012. http://www.techinasia.com/apple-bans-qihoo-apps/.
[4] Apple, Creating Jobs Through Innovation, 2012. http://www.apple.com/about/job-creation/.
[5] CCTool. http://www.opensource.apple.com/source/cctools.
[6] Choosing an iOS Developer Program, 2014. https://developer.apple.com/programs/start/ios/.
[7] Class-dump. http://stevenygard.com/projects/class-dump.
[8] CVE-2014-1276 IOKit HID Event, 2014. http://support.apple.com/en-us/HT202935.
[9] Cydia Substrate. http://www.cydiasubstrate.com.
[10] Evad3rs, evasi0n jailbreaking tool, 2013. http://evasi0n.com/.
[11] How Apple’s Enterprise Distribution Program was abused to enable the installation of a GameBoy emulator, 2014. http://www.imore.com/how-gameboy-emulator-finding-its-way-non-jailbroken-devices.
[12] How Many Apps Are in the iPhone App Store. http://ipod.about.com/od/iphonesoftwareterms/qt/apps-in-app-store.htm.
[13] iOS Dev Center. https://developer.apple.com/devcenter/ios/index.action.
[14] iOS Dev Center, 2014. https://developer.apple.com/devcenter/ios/index.action.
[15] Java Reflection. http://docs.oracle.com/javase/tutorial/reflect/.
[16] Kuai Yong iOS device management, 2014. http://www.kuaiyong.com/eg_web/index.html.
[17] Libimobiledevice: A cross-platform software protocol library and tools to communicate with iOS devices natively, 2014. http://www.libimobiledevice.org/.
[18] OS X ABI Mach-O File Format Reference. https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/MachORuntime/Reference/reference.html.
[19] Pangu Jailbreak, 2014. http://pangu.io/.
[20] Qihoo Double Blow as iOS Apps Banned by Apple, China Warns of Anti-Competitive Practices, January 2013. http://www.techinasia.com/qihoo-apps-banned-apple-app-store/.
[21] Tim Cook to shareholders: iPhone 5s/c outpace predecessors, Apple bought 23 companies in 16 months. http://appleinsider.com/articles/14/02/28/tim-cook-at-shareholder-meeting-iphone-5s-5c-outpace-predecessors-apple-bought-23-companies-in-16-months.
[22] Using Identifiers in Your Apps, 2013. https://developer.apple.com/news/index.php?id=3212013a.
[23] Vulnerability Summary for CVE-2014-4423, 2014. http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-4423.
[24] When Malware Goes Mobile. http://www.sophos.com/en-us/security-news-trends/security-trends/malware-goes-mobile/why-ios-is-safer-than-android.aspx.
[25] D. Chell. iOS Application (In)Security. 2012.
[26] D. Goldman. Jailbreaking iPhone apps is now legal. CNN Money. Retrieved, pages 09–11, 2010.
[27] J. Han, S. M. Kywe, Q. Yan, F. Bao, R. Deng, D. Gao, Y. Li, and J. Zhou. Launching generic attacks on iOS with approved third-party applications. In Applied Cryptography and Network Security, pages 272–289. Springer, 2013.
[28] Y. Jang, T. Wang, B. Lee, and B. Lau. Exploiting unpatched iOS vulnerabilities for fun and profit. In Proceedings of the Black Hat USA Briefings, Las Vegas, NV, August 2014.
[29] B. Lau, Y. Jang, C. Song, T. Wang, P. H. Chung, and P. Royal. Injecting malware into iOS devices via malicious chargers. In Proceedings of the Black Hat USA Briefings, Las Vegas, NV, August 2013.
[30] C. Miller. Inside iOS code signing. In Proceedings of Symposium on SyScan, 2011.
[31] C. Miller, D. Blazakis, D. DaiZovi, S. Esser, V. Iozzo, and R.-P. Weinmann. iOS Hacker’s Handbook. John Wiley & Sons, 2012.
[32] F. A. Porter, F. Matthew, C. Erika, H. Steve, and W. David. A survey of mobile malware in the wild. In Proceedings of the 1st ACM SPSM. ACM, 2011.
[33] E. Smith. iPhone applications & privacy issues: An analysis of application transmission of iPhone unique device identifiers (UDIDs). 2010.
[34] W. Tielei, J. Yeongjin, C. Yizheng, C. Simon, L. Billy, and L. Wenke. On the feasibility of large-scale infections of iOS devices. In Proceedings of the 23rd USENIX conference on Security Symposium, pages 79–93. USENIX Association, 2014.
[35] T. Wang, K. Lu, L. Lu, S. Chung, and W. Lee. Jekyll on iOS: When benign apps become evil. In Presented as part of the 22nd USENIX Security Symposium, pages 559–572, 2013.
[36] C. Xiao. Wirelurker: A new era in iOS and OS X malware. 2014.

### Table 3: Statistics of Private API Usage

| Method | Framework | Usage | Available on iOS 6.X | Available on iOS 7.X | Available on iOS 8.0 |
|--------|-----------|-------|----------------------|---------------------|---------------------|
| `[[UIDevice currentDevice] uniqueIdentifier]` | UIKit | Get the UDID of the device | Yes | No | No |
| `CTSIMSupportCopyMobileSubscriberIdentity()` | CoreTelephony | Get the IMSI of the device | Yes | Yes | Yes |
| `CTSettingCopyMyPhoneNumber()` | CoreTelephony | Get the telephone number of the device | Yes | Yes | Yes |
| `CTTelephonyCenterAddObserver()` | CoreTelephony | Register callback for SMS messages and incoming phone calls | Yes | Yes | Yes |
| `CTCallCopyAddress()` | CoreTelephony | Get the telephone number of the phone call | Yes | Yes | Yes |
| `CTCallDisconnect()` | CoreTelephony | Hang up the phone call | Yes | Yes | Yes |
| `[[CTMessageCenter sharedMessageCenter] incomingMessageWithId:result]` | CoreTelephony | Get the text of the incoming SMS message | Yes | Yes | Yes |
| `[[NetworkController sharedInstance] IMEI]` | Message | Get the IMEI of the device | Yes | Yes | Yes |
| `SBSCopyApplicationDisplayIdentifiers()` | SpringBoardServices | Get the array of current running app bundle IDs | Yes | Yes | Yes |
| `SBFrontmostApplicationDisplayIdentifier()` | SpringBoardServices | Get the frontmost app port | Yes | Yes | Yes |
| `SBSCopyLocalizedApplicationNameForDisplayIdentifier()` | SpringBoardServices | Get the app name from the bundle ID | Yes | Yes | Yes |
| `SBSCopyIconImageDataForDisplayIdentifier()` | SpringBoardServices | Get the app icon from the bundle ID | Yes | Yes | Yes |
| `SBSLaunchApplicationWithIdentifier()` | SpringBoardServices | Launch the app using bundle ID | Yes | No | No |
| `MobileInstallationLookup()` | MobileInstallation | Get the pList information of installed iOS apps | Yes | Yes | Yes |
| `MobileInstallationInstall()` | MobileInstallation | Install .ipa file on jailbroken iOS devices | Yes | No | No |
| `MobileInstallationUninstall()` | MobileInstallation | Uninstall app on jailbroken iOS devices | Yes | No | No |
| `GSEventRegisterEventCallback()` | GraphicsServices | Register callback for system-wide user events | Yes | Yes | Yes |
| `GSSendEvent()` | GraphicsServices | Send user events to the app port | Yes | Yes | Yes |
| `IOHIDEventSystemClientRegisterEventCallback()` | IOKit | Register callback for system-wide user events | Yes | Yes | Yes |
| `CFUserNotificationCreate()` | CoreFoundation | Pop up dialogs to the foremost screen | Yes | Yes | Yes |
| `CFUserNotificationReceiveResponse()` | CoreFoundation | Receive the user input from the dialog | Yes | Yes | Yes |
| `allApplications()` | MobileCoreServices | Get the bundle ID list of installed iOS apps | No | Yes | Yes |
| `publicURLSchemes()` | MobileCoreServices | Get the URL schemes list of installed iOS apps | Yes | Yes | Yes |
| `UIBackgroundMode continuous` | UIKit | Run in the background forever | Yes | Yes | Yes |
| `UIBackgroundMode unboundedTaskCompletion` | UIKit | Run in the background forever | Yes | Yes | Yes |
| `UIBackgroundMode VOIP (not a private API)` | UIKit | Auto start after rebooting | Yes | Yes | Yes |

This table provides a summary of the availability and usage of various private APIs across different versions of iOS.