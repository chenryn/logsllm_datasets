without jailbreaking iOS. However, it is worth noting that
our approach can still take advantage of the vulnerabilities
utilized by other jailbreaking methods to compromise iOS.
C. Miller [30] discovered that iOS code signing mechanism
could be bypassed, allowing attackers to allocate a writeable
and executable memory buﬀer. A malicious app can exploit
this vulnerability to generate and execute attack code at
runtime. However, Apple has ﬁxed this issue and blocked
apps using such kind of methods to dynamically load and
launch malicious payload. T.Wang [35] puts forward anoth-
er novel approach to evade the app review process by making
the apps remotely exploitable and introduing malicious con-
trol ﬂows by rearranging signed code. Because these control
ﬂows are dynamically generated when the attackers try to
exploit those apps, Apple will not discover them during the
app review process. However, this vulnerability has been
ﬁxed by Apple as well. Authors in [34] and [29] show that
infecting a large number of iOS devices through botnets is
possible. By exploiting the design ﬂaws of iTunes and the
device provisioning process, they demonstrate that a com-
promised computer can be instructed to install “enpublic”
apps on iOS devices. These works show that iOS devices
can be infected and App Store’s review process is not ade-
quate for protecting iOS devices. Our work further shows
that iOS vulnerabilities exist.
The work closest to ours is by J. Han etc. [27]. They pro-
pose to launch attacks on non-jailbroken iOS devices from
third-party application by exploiting private APIs. Com-
pared with their work, our work is more systematic and we
show there is another channel to distribute malicious app-
s except the App Store. Our focus is not just to exploit
private APIs, but also illustrate other vulnerabilities. More-
over, we performed systematic analysis on large number of
iOS apps, and in particular, we applied our analysis upon
iOS 7/8, which has not been studied before.
9. CONCLUSION
In this paper, we present the security landscape of iOS
enpublic apps and their usage of private APIs.
In order
to understand their security impact, we designed and im-
plemented a mechanism which evaluate the overall security
status of enpublic apps by combining static semantic checks
and runtime detection technologies. Our results show that
844 (60%) out of the 1408 enpublic apps do use private APIs.
14 (1%) apps contain URL scheme vulnerabilities, 901 (64%)
enpublic apps transport sensitive information through unen-
crypted channel or store private information in plain text on
the devices. In addition, we summarized 25 private APIs on
iOS 6/7/8 which have security vulnerabilities and we have
ﬁled one CVE for iOS devices.
10. ACKNOWLEDGMENTS
We would like to thank our shepherd, Jin Han, and the
anonymous reviewers for their valuable comments. We also
thank Raymond Wei, Dawn Song, and Zheng Bu for their
valuable help on writing this paper.
11. REFERENCES
[1] API Reference of iOS Frameworks, 2014.
https://developer.apple.com/library/ios/naviga
tion/#section=Resource%20Types&topic=Reference.
[2] App store review guidelines.
https://developer.apple.com/appstore/resources
/approval/guidelines.html.
[3] Apple Bans Qihoo Apps From iTunes App Store,
February, 2012. http:
//www.techinasia.com/apple-bans-qihoo-apps/.
[4] Apple, Creating Jobs Through Innovation, 2012.
http://www.apple.com/about/job-creation/.
[5] CCTool.
http://www.opensource.apple.com/source/cctools.
[6] Choosing an iOS Developer Program, 2014. https:
//developer.apple.com/programs/start/ios/.
[7] Class-dump.
http://stevenygard.com/projects/class-dump.
[8] CVE-2014-1276 IOKit HID Event, 2014.
http://support.apple.com/en-us/HT202935.
[9] Cydia Substrate. http://www.cydiasubstrate.com.
[10] Evad3rs, evasi0n jailbreaking tool, 2013.
http://evasi0n.com/.
[11] How Apple’s Enterprise Distribution Program was
abused to enable the installation of a GameBoy
emulator, 2014.
http://www.imore.com/how-gameboy-emulator-
finding-its-way-non-jailbroken-devices.
[12] How Many Apps Are in the iPhone App Store.
http://ipod.about.com/od/iphonesoftwareterms/
qt/apps-in-app-store.htm.
[13] iOS Dev Center. https://developer.apple.com/de
vcenter/ios/index.action.
[14] iOS Dev Center, 2014. https://developer.apple.co
m/devcenter/ios/index.action.
[15] Java Reﬂection. http:
//docs.oracle.com/javase/tutorial/reflect/.
[16] Kuai Yong iOS device management, 2014.
http://www.kuaiyong.com/eg_web/index.html.
[17] Libimobiledevice: A cross-platform software protocol
library and tools to communicate with iOS devices
natively, 2014. http://www.libimobiledevice.org/.
[18] OS X ABI Mach-O File Format Reference.
https://developer.apple.com/library/mac/docume
ntation/DeveloperTools/Conceptual/MachORuntime
/Reference/reference.html.
[19] Pangu Jailbreak, 2014. http://pangu.io/.
[20] Qihoo Double Blow as iOS Apps Banned by Apple,
China Warns of Anti-Competitive Practices, January,
2013. http://www.techinasia.com/qihoo-apps-
banned-apple-app-store/.
[21] Tim Cook to shareholders: iPhone 5s/c outpace
predecessors, Apple bought 23 companies in 16
months.
http://appleinsider.com/articles/14/02/28/tim-
cook-at-shareholder-meeting-iphone-5s-5c-
outpace-predecessors-apple-bought-23-
companies-in-16-months.
[22] Using Identiﬁers in Your Apps, 2013. https://deve
loper.apple.com/news/index.php?id=3212013a.
[23] Vulnerability Summary for CVE-2014-4423, 2014.
http://web.nvd.nist.gov/view/vuln/detail?vuln
Id=CVE-2014-4423.
[24] When Malware Goes Mobile.
http://www.sophos.com/en-us/security-news-
trends/security-trends/malware-goes-
mobile/why-ios-is-safer-than-android.aspx.
[25] D. Chell. iOS Application (In)Security. 2012.
[26] D. Goldman. Jailbreaking iphone apps is now legal.
CNN Money. Retrieved, pages 09–11, 2010.
[27] J. Han, S. M. Kywe, Q. Yan, F. Bao, R. Deng,
D. Gao, Y. Li, and J. Zhou. Launching generic attacks
on ios with approved third-party applications. In
Applied Cryptography and Network Security, pages
272–289. Springer, 2013.
[28] Y. Jang, T. Wang, B. Lee, , and B. Lau. Exploiting
unpatched ios vulnerabilities for fun and proﬁt. In
Proceedings of the Black Hat USA Brie(cid:12)ngs, Las
Vegas, NV, August 2014.
[29] B. Lau, Y. Jang, C. Song, T. Wang, P. H. Chung, and
P. Royal. Injecting malware into ios devices via
malicious chargers. In Proceedings of the Black Hat
USA Brie(cid:12)ngs, Las Vegas, NV, August 2013.
[30] C. Miller. Inside ios code signing. In Proceedings of
Symposium on SyScan, 2011.
[31] C. Miller, D. Blazakis, D. DaiZovi, S. Esser, V. Iozzo,
and R.-P. Weinmann. IOS Hacker’s Handbook. John
Wiley & Sons, 2012.
[32] F. A. Porter, F. Matthew, C. Erika, H. Steve, and
W. David. A survey of mobile malware in the wild. In
Proceedings of the 1st ACM SPSM. ACM, 2011.
[33] E. Smith. iphone applications & privacy issues: An
analysis of application transmission of iphone unique
device identiﬁers (udids). 2010.
[34] W. Tielei, J. Yeongjin, C. Yizheng, C. Simon, L. Billy,
and L. Wenke. On the feasibility of large-scale
infections of ios devices. In Proceedings of the 23rd
USENIX conference on Security Symposium, pages
79–93. USENIX Association, 2014.
[35] T. Wang, K. Lu, L. Lu, S. Chung, and W. Lee. Jekyll
on ios: when benign apps become evil. In Presented as
part of the 22nd USENIX Security Symposium, pages
559–572, 2013.
[36] C. Xiao. Wirelurker: A new era in ios and os x
malware. 2014.
Method
Framework
Usage
Available Available Available
on iOS
6.X
Yes
on iOS
7.X
No
on iOS
8.0
No
[[UIDevice currentDevice] U– UIKit
niqueIdentiﬁer]
CTSIMSupportCopyMobile–
SubscriberIdentity()
CTSettingCopyMyPhoneN–
umber()
CTTelephonyCenterAddOb–
server()
CTCallCopyAddress()
coreTelephony
coreTelephony
coreTelephony
coreTelephony
coreTelephony
coreTelephony
CTCallDisconnect()
[[CTMessageCenter shar–
edMessageCenter] incom–
ingMessageWithId: result]
[[NetworkController shared–
Instance] IMEI]
SBSCopyApplicationDispla–
yIdentiﬁers()
SBFrontmostApplicationDi–
splayIdentiﬁer()
SBSCopyLocalizedApplicati–
onNameForDisplayIdentiﬁer()
SBSCopyIconImagePNG–
DataForDisplayIdentiﬁer()
SBSLaunchApplicationWit–
hIdentiﬁer()
MobileInstallationLookup()
Get the UDID of the device.
Get the IMSI of the device.
Get the telephone number of the
device.
Register call back of SMS mes–
sages and incoming phone calls.
Get the telephone number of the
phone call.
Hang up the phone call.
Get the text of the incoming
SMS message.
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Message
Get the IMEI of the device.
SpringBoardServices Get the array of current running
Yes
SpringBoardServices Get the front most app port.
app bundle IDs.
SpringBoardServices Get the app name from the
bundle ID.
SpringBoardServices Get the app icon from the
bundle ID.
Yes
Yes
Yes
SpringBoardServices Launch the app using bundle ID.
Yes
No
No
Yes
Yes
No
Yes
No
No
No
Yes
Yes
No
Yes
Yes
Yes
No
No
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
No
No
Yes
Yes
No
Yes
No
No
No
Yes
Yes
No
Yes
Yes
Yes
No
No
No
Yes
Yes
Yes
Yes
Yes
Yes
Yes
MobileInstallation
MobileInstallationInstall()
MobileInstallation
MobileInstallationUninstall() MobileInstallation
GSEventRegisterEventCall–
Back()
GSSendEvent()
IOHIDEventSystemClientR–
egisterEventCallback()
CFUserNotiﬁcationCreate()
CFUserNotiﬁcationReceive–
Response()
allApplications()
GraphicsServices
GraphicsServices
IOKit
CoreFoundation
CoreFoundation
MobileCoreServices
publicURLSchemes()
MobileCoreServices
Yes
Yes
Yes
Get the pList information of
installed iOS apps.
Install .ipa ﬁle on jailbroken iOS Yes
devices.
Uninstall app on jailbroken iOS
devices.
Register call back for system
wide user events.
Send user events to the app port.
Yes
Register call back for system wide Yes
user events.
Pop up dialogs to the foremost
screen.
Receive the user input from the
dialog.
Get the bundle ID list of installed No
iOS apps.
Get the URL schemes list of
installed iOS apps.
Yes
Yes
Yes
continuous
unboundedTaskCompletion
VOIP (not a private API)
UIBackgroundMode Run in the background forever.
UIBackgroundMode Run in the background forever.
UIBackgroundMode Auto start after rebooting.
Yes
Yes
Yes
Table 3: Statistics of Private API Usage