# Normalized Performance Results

## Table of Contents
1. Introduction
2. Performance Metrics
3. Sandboxing and Isolation Techniques
4. File System Approaches
5. Summary
6. References

---

### 1. Introduction
This document discusses various techniques for the safe execution of untrusted programs, focusing on sandboxing, isolation, and file system approaches. The goal is to ensure that the actions of untrusted code do not compromise the integrity of the system.

### 2. Performance Metrics

#### Table 1: Normalized Performance Results
| **Interception Only** | **Isolation** |
|----------------------|---------------|
| 1.60                 | 1.80          |
| 1.79                 | 1.92          |
| 1.01                 | 1.02          |
| 1.77                 | 1.80          |
| 1.61                 | 1.26          |
| 1.32                 | 1.43          |
| 1.01                 | 1.02          |

#### Figure 4: Normalized Performance Results
- **Normalized Execution Time (NExT)**
  - **Interception Only**: 1.60, 1.79, 1.01, 1.77, 1.61, 1.32, 1.01
  - **Isolation**: 1.80, 1.92, 1.02, 1.80, 1.26, 1.43, 1.02

- **Downloaded Program Examples**
  - **Common Unix Applications**
    - `picturepages`
    - `mpls`
    - `mozilla`
    - `Installation`
    - `ghostscript`
    - `make and gcc`
    - `tar`
    - `gzip`

### 3. Sandboxing and Isolation Techniques

#### Sandboxing Systems
- **Chakravyuha [8]**: A monitoring system using kernel interception for sandboxing.
- **MAPbox [4]**: Provides a more configurable and usable sandbox through template classifications.
- **Consh [5]**: Offers a sandboxing environment with transparent local and remote file access.
- **SoftwarePot [12]**: Secure software circulation model that confines untrusted program behavior.
- **Systrace [16]**: Notifies users about system calls and generates policies based on user responses.

#### Disadvantages of Sandboxing
- Requires prior policy selection, which can be difficult.
- Limited to specific types of applications (e.g., Java applets).

#### Isolation Systems
- **Physical Isolation [15, 7]**: Protects against damage by executing code on separate machines.
- **Logical Isolation [14, 11, 19]**: Provides benefits over physical isolation, including application and OS transparency.
- **Recovery-Oriented Computing (ROC) [2]**: Focuses on fast recovery from operator errors.
- **Safe Execution on Windows [23]**: Intercepts and backs up files before modification by malicious code.

### 4. File System Approaches

- **Elephant File System [17]**: Retains important file versions and provides an interface for version selection.
- **RFS (Repairable File Service) [24]**: Facilitates repair of compromised network file servers.
- **3D File System [13]**: Supports working with different software versions and transparent viewpathing.

### 5. Summary
This paper presents an approach for the safe execution of untrusted programs using logical program isolation. Actions of the code are invisible to the rest of the system until committed by the user. The tool, Alcatraz [1], incorporates this approach, providing security, application transparency, and user friendliness.

### 6. References
1. Alcatraz. http://www.seclab.cs.sunysb.edu/alcatraz.
2. Recovery-oriented computing. http://roc.cs.berkeley.edu.
3. Strace. http://www.liacs.nl/˜wichert/strace.
4. A. Acharya and M. Raje. Mapbox: Using parameterized behavior classes to confine applications. In USENIX Security Symposium, 2000.
5. A. Alexandrov, P. Kmiec, and K. Schauser. Consh: A confined execution environment for internet computations, 1998.
6. A. Brown and D. Patterson. Undo for operators: Building an undoable e-mail store. In USENIX Annual Technical Conference, 2003.
7. T. Chiueh, H. Sankaran, and A. Neogi. Spout: A transparent distributed execution engine for java applets. In International Conference on Distributed Computing Systems, 2000.
8. A. Dan, A. Mohindra, R. Ramaswami, and D. Sitaram. Chakravyuha: A sandbox operating system for the controlled execution of alien code. Technical report, IBM T.J. Watson research center, 1997.
9. I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. A secure environment for untrusted helper applications: confining the wily hacker. In USENIX Security Symposium, 1996.
10. K. Jain and R. Sekar. User-level infrastructure for system call interposition: A platform for intrusion detection and confinement. In ISOC Network and Distributed System Security, 2000.
11. S. Jajodia, P. Liu, and C. D. McCollum. Application-level isolation to cope with malicious database users. In ACSAC, 1998.
12. K. Kato and Y. Oyama. Softwarepot: An encapsulated transferable file system for secure software circulation. In Proc. of Int. Symp. on Software Security, 2003.
13. D. G. Korn and E. Krell. A new dimension for the unix file system. Software: Practice & Experience, 20(S1), 1990.
14. P. Liu, S. Jajodia, and C. D. McCollum. Intrusion confinement by isolation in information systems. Journal of Computer Security, 8, 2000.
15. D. Malkhi and M. K. Reiter. Secure execution of java applets using a remote playground. Software Engineering, 26(12), 2000.
16. N. Provos. Improving host security with system call policies, 2002.
17. D. J. Santry, M. J. Feeley, N. C. Hutchinson, and A. C. Veitch. Elephant: The file system that never forgets. In Workshop on Hot Topics in Operating Systems, 1999.
18. F. B. Schneider. Enforceable security policies. ACM Transactions on Information and System Security, 3(1):30–50, 2000.
19. R. Sekar, Y. Cai, and M. Segal. A specification-based approach for building survivable systems. In National Information Systems Security Conference, Oct 1998.
20. R. Sekar and P. Uppuluri. Synthesizing fast intrusion prevention/detection systems from high-level specifications. In Proceedings of the USENIX Security Symposium, 1999.
21. K. Sitaker. http://www.canonical.org/picturepages.
22. P. Uppuluri. Intrusion Detection/Prevention Using Behavior Specifications. PhD thesis, Stony Brook University, 2003.
23. J. A. Whittaker and A. D. Vivanco. Neutralizing windows-based malicious mobile code. In Symposium on Applied Computing, 2002.
24. N. Zhu and T. Chiueh. Design, implementation, and evaluation of repairable file service. In The International Conference on Dependable Systems and Networks, 2003.

---

**Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003)**  
**1063-9527/03 $17.00 © 2003 IEEE**  
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021 at 07:43:46 UTC from IEEE Xplore. Restrictions apply.**