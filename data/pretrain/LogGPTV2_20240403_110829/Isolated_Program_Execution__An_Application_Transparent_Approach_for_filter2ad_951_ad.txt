i
e
m
T
n
o
i
t
u
c
e
x
E
d
e
z
i
l
a
m
r
o
N
 2
 1.5
 1
 0.5
 0
Interception Only
Isolation
1.60
1.80
1.79
1.92
1.01
1.02
1.77 1.80
Interception Only
Isolation
1.61
1.26
1.32
1.43
1.01 1.02
i
e
m
T
n
o
i
t
u
c
e
x
E
d
e
z
i
l
a
m
r
o
N
 2
 1.5
 1
 0.5
 0
picturepages
mpls
mozilla
Installation
ghostscript
make and
gcc
tar
gzip
(a) Downloaded program examples
(b) Common Unix applications
Figure 4. Normalized Performance Results
laris operating system. A more recent version has been im-
plemented on Linux, and uses a kernel module for interpo-
sition. Chakravyuha [8] is a monitoring system that uses a
kernel interception mechanism to implement a sandboxing
approach. MAPbox [4] is a sandboxing mechanism where
the goal is to make the sandbox more conﬁgurable and
usable by providing template classiﬁcations of behaviors.
Consh [5] provides a similar sandboxing environment while
addressing transparent local and remote access to ﬁles.
SoftwarePot [12] incorporates a secure software circula-
tion model that conﬁnes the behavior of the untrusted pro-
gram. In this case, the software to be run is encapsulated
with a ﬁle system. The user must encapsulate the complete
list of the ﬁle system resources needed by the program in
order to make it execute successfully. Furthermore, all the
operations to the ﬁles are conﬁned to the “pot” archive.
The scheme still requires apriori policy selection, which (as
pointed out in the introduction) is often difﬁcult.
Systrace [16] is a sandboxing system that notiﬁes the
user about all system calls that an application tries to ex-
ecute. It then uses the response from the user to generate a
policy for the application.
The disadvantages of sandboxing approaches, as com-
pared to isolation, was discussed in Section 1.1.
Isolation systems. [15] and [7] use physical isolation to
protect against damages to the client’s machine. The incom-
ing mobile code (java applet) is sent to another set of ma-
chines, called “playground” (some machines containing no
important data), to execute. As mentioned in the introduc-
tion, these two systems only target Java applets (which only
constitutes a small fragment of the large body of untrusted
code on the Internet), require additional resources (such as
new machines), and disallow any access to the user’s en-
vironment. In contrast, our approach is language indepen-
dent, and requires no additional physical resources and al-
lows safe access to the user’s environment.
Logical isolation provides many beneﬁts over physi-
cal isolation. It has been suggested before and analyzed
[14, 11, 19]. Algorithms and protocols for realizing logi-
cal isolation in the context of databases as well as ﬁle sys-
tems was presented in [14]. In the ﬁle system context, it de-
scribed isolation protocol, merging protocol, and an algo-
rithm for resolving conﬂicts. However, practical issues that
arise in implementing the approach on a modern operating
system were not considered. Our work in this paper com-
plements these works, and developing an application- and
OS-transparent approach for practical approach and tool for
realizing logically isolated execution of programs.
Recovery-oriented
systems. The Recovery-Oriented
Computing (ROC) project at Berkeley [2] is develop-
ing techniques for fast recovery from failures, focusing
on failures due to operator errors. [6] presents a broad ap-
proach that assists recovery from operator errors in
administering a network server, with the speciﬁc exam-
ple of an email server. In spite of the apparent similarities
in the goals of this work and ours, the technical require-
ments are quite different. They target network-oriented ap-
plications whose actions (and their effects) needs to be
visible to other processes and/or hosts. In contrast, our ap-
proach targets ﬁle-oriented applications whose actions
should be invisible to the rest of the world.
[23] presents an approach for safe execution of malicious
applications on Microsoft Windows by intercepting oper-
ations made by the malicious code. Their approach is to
create backup copies of ﬁles before they are modiﬁed by
the malicious application. A drawback of this approach, as
compared to ours, is that the modiﬁcations are visible to
other benign processes in the system. If a benign process
modiﬁes the system based on the ﬁles modiﬁed by the ma-
licious process, then there may be no way to undo these ef-
fects. In contrast, our approach ensures that the actions of
the isolated process(es) do not corrupt the system.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:46 UTC from IEEE Xplore.  Restrictions apply. 
File system approaches. The Elephant ﬁle system [17] re-
tains all the important versions of a ﬁle, and has an interface
for users to select a speciﬁc version. RFS (Repairable File
Service) [24] is speciﬁcally designed to facilitate repair of
a compromised network ﬁle server by maintaining previous
versions of ﬁles. These approaches generally have a signif-
icant storage overhead, since storing versions can consume
signiﬁcant additional space. In contrast, our approach does
not impose high storage overheads. More importantly, our
isolation approach provides a simple, automatic approach
to undo the effects of a malicious process. In contrast, the
undo step typically requires manual assistance in the case
of versioning approaches. Moreover, there is no easy way
to undo the effects of a malicious process without risking
loss of data, which may occur due to the fact that some ac-
tions of benign processes are rolled back as well.
3D ﬁle system [13] provides a convenient way for soft-
ware developers to work with different versions of a soft-
ware package. It also introduces a technique called trans-
parent viewpathing which is based on translating ﬁle names
used by a process. It gives a union view of several direc-
tory structures thus allowing the application transparently
access one directory through another’s path. As it is not de-
signed to deal with untrusted applications, it needs the co-
operation from the application for this mechanism to work,
while our approach provides a mandatory isolation layer for
the untrusted program.
5. Summary
In this paper, we presented an approach that supports
safe execution of untrusted programs. Our approach uses
the idea of logical program isolation, where actions of the
code are invisible to the rest of the system until they are
committed by a user. Before committing, the user can in-
spect the system state to determine if the actions of the pro-
gram compromised the integrity of the system. We have pre-
sented a tool called Alcatraz [1] that incorporates this ap-
proach. Our approach provides security for the end-user and
enjoys many beneﬁts such as application transparency and
user friendliness. We have discussed the design and imple-
mentation and presented the results of our implementation.
References
[1] Alcatraz. http://www.seclab.cs.sunysb.edu/alcatraz.
[2] Recovery-oriented computing. http://roc.cs.berkeley.edu.
[3] Strace. http://www.liacs.nl/˜wichert/strace.
[4] A. Acharya and M. Raje. Mapbox: Using parameterized be-
havior classes to conﬁne applications. In USENIX Security
Symposium, 2000.
[5] A. Alexandrov, P. Kmiec, and K. Schauser. Consh: A con-
ﬁned execution environment for internet computations, 1998.
[6] A. Brown and D. Patterson. Undo for operators: Building an
undoable e-mail store. In USENIX Annual Technical Confer-
ence, 2003.
[7] T. Chiueh, H. Sankaran, and A. Neogi. Spout: A transpar-
ent distributed execution engine for java applets. In Interna-
tional Conference on Distributed Computing Systems, 2000.
[8] A. Dan, A. Mohindra, R. Ramaswami, and D. Sitaram.
Chakravyuha: A sandbox operating system for the controlled
execution of alien code. Technical report, IBM T.J. Watson
research center, 1997.
[9] I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. A se-
cure environment for untrusted helper applications: conﬁn-
ing the wily hacker. In USENIX Security Symposium, 1996.
[10] K. Jain and R. Sekar. User-level infrastructure for system call
int erposition: A platform for intrusion detection and con-
ﬁnement.
In ISOC Network and Distributed System Secu-
rity, 2000.
[11] S. Jajodia, P. Liu, and C. D. McCollum. Application-level
isolation to cope with malicious database users. In ACSAC,
1998.
[12] K. Kato and Y. Oyama. Softwarepot: An encapsulated trans-
ferable ﬁle system for secure software circulation. In Proc.
of Int. Symp. on Software Security, 2003.
[13] D. G. Korn and E. Krell. A new dimension for the unix ﬁle
system. Software: Practice & Experience, 20(S1), 1990.
[14] P. Liu, S. Jajodia, and C. D. McCollum. Intrusion conﬁne-
ment by isolation in information systems. Journal of Com-
puter Security, 8, 2000.
[15] D. Malkhi and M. K. Reiter. Secure execution of java applets
using a remote playground. Software Engineering, 26(12),
2000.
[16] N. Provos. Improving host security with system call policies,
2002.
[17] D. J. Santry, M. J. Feeley, N. C. Hutchinson, and A. C.
Veitch. Elephant: The ﬁle system that never forgets. In Work-
shop on Hot Topics in Operating Systems, 1999.
[18] F. B. Schneider. Enforceable security policies. ACM Trans-
actions on Information and System Security, 3(1):30–50,
2000.
[19] R. Sekar, Y. Cai, and M. Segal. A speciﬁcation-based ap-
In National Infor-
proach for building survivable systems.
mation Systems Security Conference, Oct 1998.
[20] R. Sekar and P. Uppuluri. Synthesizing fast intrusion pre-
vention/detection systems from high-level speciﬁcations. In
Proceedings of the USENIX Security Symposium, 1999.
[21] K. Sitaker. http://www.canonical.org/picturepages.
[22] P. Uppuluri. Intrusion Detection/Prevention Using Behavior
Speciﬁcations. PhD thesis, Stony Brook University, 2003.
[23] J. A. Whittaker and A. D. Vivanco. Neutralizing windows-
In Symposium on Applied
based malicious mobile code.
Computing, 2002.
[24] N. Zhu and T. Chiueh. Design, implementation, and evalua-
tion of repairable ﬁle service ,. In The International Confer-
ence on Dependable Systems and Networks, 2003.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:46 UTC from IEEE Xplore.  Restrictions apply.