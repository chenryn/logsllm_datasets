title:Verification of Common 802.11 MAC Model Assumptions
author:David Malone and
Ian Dangerfield and
Douglas J. Leith
Veriﬁcation of Common 802.11 MAC Model
Assumptions
David Malone, Ian Dangerﬁeld, and Doug Leith
Hamilton Institute, NUI Maynooth, Ireland(cid:2)
Abstract. There has been considerable success in analytic modeling of
the 802.11 MAC layer. These models are based on a number of fundamen-
tal assumptions. In this paper we attempt to verify these assumptions
by taking careful measurements using an 802.11e testbed with commod-
ity hardware. We show that the assumptions do not always hold but
our measurements oﬀer insight as to why the models may still produce
good predictions. To our knowledge, this is the ﬁrst in-detail attempt to
compare 802.11 models and their assumptions with experimental mea-
surements from an 802.11 testbed. The measurements collect also allow
us to test if the basic MAC operation adhere to the 802.11 standards.
1 Introduction
The analysis of the 802.11 CSMA/CA contention mechanism has generated a
considerable literature. Two particularly successful lines of enquiry are the use
of pure p-persistent modeling (e.g. [3]) and the per-station Markov chain tech-
nique (e.g. [2]). Modeling usually involves some assumptions, and in this respect
models of 802.11 are no diﬀerent. Both these models assume that transmission
opportunities occur at a set of discrete times. These discrete times correspond
to the contention counter decrements of the stations, equivalent to state tran-
sitions in the models, and result in an eﬀective slotting of time. Note that this
slotting based on MAC state transitions is diﬀerent from the time slotting used
by the PHY. A second assumption of these models is that to a station observing
the wireless medium, every slot is equally likely to herald the beginning of a
transmission by one or more other stations. In the models this usually manifests
itself as a constant transmission or collision probability.
In this paper we will show detailed measurements collected from an experi-
mental testbed to study these assumptions. This is with a view to understanding
the nature of the predictive power of these models and to inform future modeling
eﬀorts. The contribution of this paper includes the ﬁrst published measurements
of packet collision probabilities from an experimental testbed and their compar-
ison with model predictions and the ﬁrst detailed comparison of measured and
predicted throughputs over a range of conditions.
We are not the ﬁrst to consider the impact of model assumptions. In particular,
the modeling of 802.11e has required the special treatment of slots immediately
(cid:2) This work was supported by Science Foundation Ireland grant IN3/03/I346.
S. Uhlig, K. Papagiannaki, and O. Bonaventure (Eds.): PAM 2007, LNCS 4427, pp. 63–72, 2007.
c(cid:2) Springer-Verlag Berlin Heidelberg 2007
64
D. Malone, I. Dangerﬁeld, and D. Leith
after a transmission in order to accommodate diﬀerentiation based on AIFS (e.g.
[1,9,11,6,4]). In [13] the nonuniform nature of slots is used to motivate an 802.11e
model that moves away from these assumptions.
2 Test Bed Setup
The 802.11e wireless testbed is conﬁgured in infrastructure mode. It consists of a
desktop PC acting as an access point, 18 PC-based embedded Linux boxes based
on the Soekris net4801 [7] and one desktop PC acting as client stations. The PC
acting as a client records delay measurements and retry attempts for each of
its packets, but otherwise behaves as an ordinary client station. All systems
are equipped with an Atheros AR5215 802.11b/g PCI card with an external
antenna. All stations, including the AP, use a Linux 2.6.8.1 kernel and a version
of the MADWiFi [8] wireless driver modiﬁed to allow us to adjust the 802.11e
CWmin, AIFS and TXOP parameters. All of the systems are also equipped with
a 100Mbps wired Ethernet port, which is used for control of the testbed from
a PC. Speciﬁc vendor features on the wireless card, such as turbo mode, are
disabled. All of the tests are performed using the 802.11b physical maximal data
transmission rate of 11Mbps with RTS/CTS disabled and the channel number
explicitly set. Since the wireless stations are based on low power embedded
systems, we have tested these wireless stations to conﬁrm that the hardware
performance (especially the CPU) is not a bottleneck for wireless transmissions
at the 11Mbps PHY rate used. As noted above, a desktop PC is used as a client
to record the per-packet measurements, including numbers of retries and MAC-
level service time. A PC is used to ensure that there is ample disk space, RAM
and CPU resources available so that collection of statistics not impact on the
transmission of packets.
Several software tools are used within the testbed to generate network traﬃc
and collect performance measurements. To generate wireless network traﬃc we
use mgen. We will often use Poisson traﬃc, as many of the analytic models
make independent or Markov assumptions about the system being analysed.
While many diﬀerent network monitoring programs and wireless sniﬀers exist,
no single tool provides all of the functionality required and so we have used a
number of common tools including tcpdump. Network management and control
of traﬃc sources is carried out using ssh over the wired network.
3 Collision Probability and Packet Timing Measurement
Our testbed makes used of standard commodity hardware. In [5] we developed
a measurement technique that only uses the clock on the sender, to avoid the
need for synchronisation. By requesting an interrupt after each successful trans-
mission we can determine the time that the ACK has been received. We may
also record the time that the packet was added to the hardware queue, and by
inverting the standard FIFO queueing recursion we can determine the time the
MAC spent processing the packet. This process is illustrated in Figure 1. For
Veriﬁcation of Common 802.11 MAC Model Assumptions
65
the measurements reported here, we have reﬁned the technique described in [5]
by making use of a timer in the Atheros card that timestamps the moment com-
pleted transmit descriptors are DMAed to host memory. This allows us to avoid
inaccuracies caused by interrupt latency/jitter. As will be shown later, in this
way we are able to take measurements with microsecond-level timing accuracy.
Interface TX
Queue
Driver
Driver TX
Discriptor
Queue
Hardware
4. Driver notes
    completion time.
3. Hardware
    interrupts
    driver.
1. Driver notes
    enqueue time.
2. Hardware
    contends until
    ACK received
Packet transmitted
ACK received
Fig. 1. Schematic of delay measurement technique
To measure packet collision probabilities, we make use of the fact that the
transmit descriptors also report the number of retry attempts Ri for each packet.
Using this we can estimate the calculate the total number of retries R and the
average collision probability R/(P + R) where P is the number of successful
packet transmissions. We can also generalist this to get the collision probability
at the nth transmission attempt as
#{packets with Ri ≥ n}
#{packets with Ri = n} + #{packets with Ri ≥ n } .
(1)
This assumes that retransmissions are only due to collisions and not due to
errors. We can estimate the error rate by measuring the retransmissions in a
network with one station. In the environment used, the error rate is < 0.1%.
4 Validation
All the models we study assume that the 802.11 backoﬀ procedure is being
correctly followed. The recent work of [12], demonstrates that some commercial
802.11 cards can be signiﬁcantly in violation of the standards. In particular,
it has been shown that some cards do not use the correct range for choosing
backoﬀs or do not seem to back oﬀ at all. We therefore ﬁrst verify that the cards
that we use perform basic backoﬀs correctly, looking at CWmin (the range of the
ﬁrst backoﬀ in slots), AIFS (how many slots to pause before the backoﬀ counter
may be decremented) and TXOP (how long to transmit for).
To do this we measure the MAC access delay. This is the delay is associated
with the contention mechanism used in 802.11 WLANs. The MAC layer delay,
66
D. Malone, I. Dangerﬁeld, and D. Leith
i.e. the delay from a packet becoming eligible for transmission (reaching the head
of the hardware interface queue) to ﬁnal successful transmission, can range from
a few hundred microseconds to hundreds of milliseconds, depending on network
conditions. In contrast to [12], which makes use of custom hardware to perform
measurements of access delay, here we exploit the ﬁne grained timing information
available using the measurement technique described in the previous section to
make access delay measurements using only standard hardware.
To test the basic backoﬀ behaviour of the cards, we transmitted packets from
a single station with high-rate arrivals and observed the MAC access delay for
each packet. Figure 2(a) shows a histogram of these times to a resolution of 1μs
for over 900,000 packets. We can see 32 sharp peaks each separated by the slot
time of 20μs, representing a CWmin of 32. This gives us conﬁdence that the
card is not subject to the more serious problems outlined in [12].
There is jitter, either in the backoﬀ process or in our measurement technique.
However, we can test the hypothesis that this is a uniform distribution by binning
the data into buckets around each of the 32 peaks and applying the chi-squared
test. The resulting statistic is within the 5% level of signiﬁcance.
s
t
e
k
c
a
P
f
o
n
o
i
t
c
a
r
F
 0.025
 0.02
 0.015
 0.01
 0.005
 0
 900
 1000
 1100
 1200
 1300
Delay (seconds x 10-6)
(a) CWmin 32
 0.16
 0.14
 0.12
 0.1
 0.08
 0.06
 0.04
 0.02
s
t
e
k
c
a
p
l
a
o
t
t
f
o
n
o
i
t
c
a
r
F
 1400
 1500
 1600
 0
 900
 1000
 1100
 1200
 1300
Delay (seconds x 10-6)
(b) CWmin 4
 1400
 1500
 1600
Fig. 2. Distribution of transmission times for packets with a single station. Note there
a number peaks corresponding to CWmin.
The cards in question are 802.11e capable and so for comparison we adjust
CWmin so that backoﬀs are chosen in the range 0 to 3. The results are shown
in Figure 2(b) where we can see 4 clear peaks, as expected. We also see a small
number of packets with longer transmission times. The number of these packets
is close to the number of beacons that we expect to be transmitted during our
measurements, so we believe that these are packets delayed by the transmission
of a beacon frame.
Figure 3(a) shows the impact of increasing AIFS on MAC access time. In the
simple situation of a single station, we expect increasing AIFS to increase MAC
access times by the amount which AIFS is increased by. Comparing Figure 2(a)
and Figure 3(a) conﬁrms this.
Veriﬁcation of Common 802.11 MAC Model Assumptions
67
 0.025
 0.02
 0.015
 0.01
 0.005
s
t
e
k
c
a
p
l
a
t
o
t
f
o
n
o
i
t
c
a
r
F
 0.25
 0.2
 0.15
 0.1
 0.05
s
t
e
k
c
a
P
f
o
n
o
i
t
c
a
r
F
 0
 900
 1000
 1100
 1200
 1300
 1400
 1500
 1600
 1700
 1800
 0
 800
(a) CWmin 32, AIFS+6
Delay (seconds x 10-6)
 900
 1000
 1100
 1200
 1300
 1400
 1500
 1600
(b) CWmin 4, TXOP 2 pkts
Delay (seconds x 10-6)
Fig. 3. Distribution of packet transmission times for a single station. On the left, AIFS
has been increased, so the peaks are shifted by 120μs. On the right, TXOP has been
set to allow two packets to be transmitted every time a medium access is won, so we
see approximately half the packets being transmitted in a shorter time.
Similarly, we can use TXOP on the cards to transmit bursts of packets, only
the ﬁrst of which must contend for channel access. Figure 3(b) shows the distri-
bution of transmission times when two packet bursts are used. We see that half
the packets are transmitted in a time almost 50μs shorter than the ﬁrst peak
shown in Figure 2(b).
These measurements indicate that a single card’s timing is quite accurate and
so capable of delivering transmissions timed to within slot boundaries. In this
paper we do not verify if multiple cards synchronise suﬃciently to fully validate
the slotted time assumption.
5 Collision Probability vs Backoﬀ Stage
Intuitively, the models that we are considering are similar to mean-ﬁeld mod-
els in physics. A complex set of interactions are replaced with a single simple
interaction that should approximate the system’s behaviour. For example, by
using a constant collision probability given by p = 1− (1− τ)n−1, where τ is the