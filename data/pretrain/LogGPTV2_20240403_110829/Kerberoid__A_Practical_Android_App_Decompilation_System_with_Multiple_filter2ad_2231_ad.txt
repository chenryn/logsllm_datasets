a syntactically incorrect decompilation output may still be
useful to the user, syntactically correct but semantically dif-
ferent output is more problematic.
Indeed, this may mis-
lead the user by making her believe in a diﬀerent behaviour
than the original program has. We call this case deceptive
decompilation (as explained in Deﬁnition 4). When such
cases occur, since the decompiler produces an output that is
semantically diﬀerent from what is expected, they may be
considered decompilation bugs.
Figure 4 shows the distribution of bytecode classes that
are deceptively decompiled. Each horizontal bar groups de-
ceptive decompilation per decompiler. The color indicates
which compiler was used to produce the class ﬁle triggering
the error. In blue is the number of classes leading to a de-
compilation error only when compiled with javac, in green
only when compiled with ecj, and in pink is the number of
classes triggering a decompilation error with both compil-
ers. The sum of these classes is indicated by the total on the
rightsideofeachbar. NotethatthebarsinFigure4represent
the number of bug manifestations, which are not necessarily
distinct bugs: the same decompiler bug can be triggered by
diﬀerentclassﬁlesfromourbenchmark. Also,Figure4plots
the same classes referred as Deceptive in Table 3, but in
Table3classesleadingtoadeceptivedecompilationforboth
compilers are counted twice.
Overall, Jode is the least reliable decompiler, with 83
decompilation bug instances in our benchmark. While Fer-
nﬂower produces the least deceptive decompilations on our
benchmark (13), it is interesting to note that CFR produces
only one more deceptive decompilation (14) but that cor-
responds to fewer bugs per successful decompilation. This
makes CFR the most reliable decompiler on our benchmark.
We manually inspected 10 of these bug manifestations.
Harrand et al.: Preprint submitted to Elsevier
Page 8 of 19
12785911114599582853573835103232759656517358918753771%32%60%59%57%48%30%78%0100020002397ProcyonCFRFernflowerJADXJD−CoreJodeDavaKrakatauDecompiler# ClassesEquivalenceModulo InputStrictJava Decompiler Diversity and its Application to Meta-decompilation
public static void setServer(Server server) {
throw new UnsupportedOperationException(
"Cannot redefine singleton Server");
[...]
private static Server server;
1 public final class Bukkit {
2
3
4
5 -aaaaaif (Bukkit.server != null) {
6 +aaaaaif (server != null) {
7
8
9
10 -aaaaaBukkit.server = server;
11 +aaaaaserver = server;
12
13
[...]
}
}
Listing 8: Exerpt of diﬀerences in org.bukkit.Bukkit
original (in red marked with a -) and decompiled with
JADX sources (in green marked with a +).
2 of them were already reported by other users. We reported
the other 8 to the authors of decompilers.11 The sources
of errors include incorrect cast operation, incorrect control-
ﬂow restitution, auto unboxing errors, and incorrect refer-
ence resolution. Below we detail two of these bugs.
4.3.1. Case study: incorrect reference resolution
We analyze the class org.bukkit.Bukkit from the
Bukkit project. An excerpt of the original Java source code
is given in Listing 8. The method setServer implements
a setter of the static ﬁeld Bukkit.server. This is an im-
plementation of the common Singleton design pattern. In
the context of method setServer, server refers to the pa-
rameter of the method, while Bukkit.server refers to the
static ﬁeld of the class Bukkit.
When this source ﬁle is compiled with javac, it pro-
duces a ﬁle org/bukkit/Bukkit.class containing the
bytecode translation of the original source. Listing 9 shows
anexcerptofthisbytecodecorrespondingtothe setServer
method (including lines are ﬁlled in red, while excluding
lines are ﬁlled in green)
When using the JADX decompiler on org/bukkit/-
Bukkit.class it produces decompiled sources, of which
an excerpt is shown in Listing 8. In this example, the de-
compiled code is not semantically equivalent to the origi-
nal version. Indeed, inside the setServer method the ref-
erences to the static ﬁeld Bukkit.server have been sim-
pliﬁed into server which is incorrect in this scope as the
parameter server overrides the local scope. In the byte-
codeoftherecompiledversion(Listing9,includinglinesare
ﬁlled in green), we can observe that instructions accessing
and writing the static ﬁeld (GETSTATIC, PUTSTATIC) have
beenreplacedbyinstructionsaccessingandwritingthelocal
variable instead (ALOAD, ASTORE).
When the test suite of Bukkit runs on the recompiled
bytecode, the 11 test cases covering this code fail, as the ﬁrst
accessto setServerwillthrowanexceptioninsteadofnor-
mally initializing the static ﬁeld Bukkit.server. This is
clearly a bug in JADX.
11
https://github.com/castor-software/decompilercmp/
tree/master/funfacts
1 public static setServer(Lorg/bukkit/Server;)V
2 -aaaGETSTATIC org/bukkit/Bukkit.server :
3 -aaaLorg/bukkit/Server;
4 +aaaALOAD 0
5
6
7
8
9
10
11 -aaaPUTSTATIC org/bukkit/Bukkit.server :
12 -aaaLorg/bukkit/Server;
13 +aaaASTORE 0
14
ALOAD 0
15
INVOKEINTERFACE org/bukkit/Server.getLogger
IFNULL L0
NEW java/lang/UnsupportedOperationException
DUP
ATHROW
L0
ALOAD 0
()Ljava/util/logging/Logger; (itf)
16
NEW java/lang/StringBuilder
Listing 9: Exerpt of bytecode from class org/bukkit/
Bukkit.class compiled with javac: Lines in red,
marked with a -, are in the original bytecode, while lines in
green, marked with a +, are from the recompiled sources
(decompiled with JADX).
1
protected StringBuffer applyRules(final Calendar
calendar, final StringBuffer buf) {
2 -aaaaareturn (StringBuffer) applyRules(calendar,
3 -aaaaaaaaaaaaaaaaaaaa(Appendable) buf);
4 +aaaaareturn this.applyRules(calendar, buf);
5
6
7
private  B applyRules(final
}
Calendar calendar, final B buf) {...}
Listing 10: Excerpt of diﬀerences in FastDatePrinter
original (in red marked with a -) and decompiled with
Procyon sources (in green marked with a +).
4.3.2. Case study: Down cast error
Listing 10 illustrates the diﬀerences between the orig-
inal sources of org/apache/commons/lang3/time/
FastDatePrinter and the decompiled sources produced
by Procyon. The line in red is part of the original, while the
line in green is from the decompiled version. In this exam-
ple, method applyRules is overloaded, i.e. it has two im-
plementations: one for a StringBuffer parameter and one
forageneric Appendableparameter(Appendableisanin-
terface that StringBuffer implements). The implementa-
tion for StringBuffer down casts buf into Appendable,
calls the method handling Appendable and casts the result
back to StringBuffer. In a non-ambiguous context, it is
perfectly valid to call a method which takes Appendable
arguments on an instance of a class that implements that
interface. But in this context, without the down cast to
Appendable, the Java compiler will resolve the method call
applyRules to the most concrete method. In this case, this
will lead applyRules for StringBuffer to call itself in-
stead of the other method. When executed, this will lead to
aninﬁniterecursionendinginaStackOverﬂowError. There-
fore, in this example, Procyon changes the behaviour of the
decompiled program and introduces a bug in it.
Harrand et al.: Preprint submitted to Elsevier
Page 9 of 19
Java Decompiler Diversity and its Application to Meta-decompilation
public int foo(int i, int j) {
while (i < j) i = j++ / i;
} catch (RuntimeException re) {
try {
while (true) {
1 public class Foo {
2
3
4
5
6 +aaaaareturn j;
7
8
9 -aaaaacontinue;
10
11 -aaabreak;
12
13 -aareturn j;
14
i = 10;
}
}
}
15 }Listing 11: Excerpt of diﬀerences in Foo original (in red
markedwitha-)anddecompiledwith Fernﬂower (ingreen
marked with a +) sources.
source language nor the compiler used to produce the byte-
code it decompiles. [28] This partly explains the choice of
its author to not reverse some optimizations made by Java
compilers (See example introduced in Section 2.).
Listing 11 shows the diﬀerences on the resulting source
codeafterdecompilingthe Fooclassfrom DcTestwith Fer-
nﬂower. As we can observe, both Java programs represent
a semantically equivalent program. Yet, their ASTs contain
substantial diﬀerences. For this example, the edit distance is
3ࢧ104asitcontainsthreetreeedits: MOVEthe returnnode,
and DELETE the break node and the continue node (the
original source’s AST contained 104 nodes).
Note that some decompilers perform some transforma-
tions on the sources they produce on purpose to increase
readability. Therefore, it is perfectly normal to observe
some minimal syntactic distortion, even for decompilers
producing readable sources. But as our benchmark is
composed of non obfuscated sources, it is expected that a
readable output will not fall too far from the original.
Answer to RQ4: All decompilers present various de-
grees of syntactic distortion between the original source
code and the decompiled bytecode. This reveals that
all decompilers adopt diﬀerent strategies to craft source
code from bytecode. We propose a novel metric to quan-
tify the distance between the original source code and its
decompiled counterpart. Also, decompiler users can use
thisanalysis whendeciding whichdecompiler toemploy.
4.5. RQ5: (Decompiler Diversity) To what extent
do the successes and failures of decompilers
overlap?
In the previous research questions, we observe that dif-
ferent decompilers produce source code that varies in terms
of syntactic correctness, semantic equivalence and syntac-
tic distortion. Now, we investigate the overlap in successes
and failures of the diﬀerent decompilers considered for this
study.
Figure 6 shows a Venn Diagram of semantically equiv-
Figure 5: Distribution of diﬀerences between the original and
the decompiled source code ASTs. Green diamonds indicate
average.
Answer to RQ3: Our empirical results indicate that no
decompiler is free of deceptive decompilation bugs. The
developers of decompilers may beneﬁt from the equiva-
lent modulo input concept to ﬁnd bugs in the wild and
extend their test base. Two bugs found during our study
have already been ﬁxed by the decompiler authors, and
three others have been acknowledged.
4.4. RQ4: (ASTs diﬀerence) What is the syntactic
distortion of decompiled code?
The quality of decompilation depends not only on its
syntactic correctness and semantic equivalence but also on
how well a human can understand the behaviour of the de-
compiledprogram. Thecodeproducedbyadecompilermay
be syntactically and semantically correct but yet hard to read
for a human. In this research question, we evaluate how far
the decompiled sources are from the original code. We mea-
sure the syntactic distortion between the original and the de-
compiledsourcesascapturedbyASTdiﬀerences(Deﬁnition
2).
Figure 5 shows the distribution of syntactic distortion
present in syntactically correct decompiled code, with one
violin plot per decompiler. The green diamond marks the
average syntactic distortion. For example, the syntactic dis-
tortion values of the Jode decompiler have a median of 0.05,
average of 0.09, 1st-Q and 3rd-Q of 0.01 and 0.11, respec-
tively. In this ﬁgure, lower is better: a lower syntactic dis-
tortion means that the decompiled sources are more similar
to their original counterparts.
CFR and JD-Core introduce the least syntactic distor-
tion, with high proportion of cases with no syntactic dis-
tortion at all (as we exclude renaming). Their median and
average syntactic distortion are close to 0.05, which corre-
sponds to 5 edits every 100 nodes in the AST of the source
program. On the other extreme, Dava and Krakatau intro-
duce the most syntactic distortion with average of 16 (resp.
15) edits per 100 nodes. They also have almost no cases for
which they produce sources with no syntactic distortion. It
is interesting to note that Dava makes no assumptions on the
Harrand et al.: Preprint submitted to Elsevier
Page 10 of 19
0.050.160.080.070.050.090.150.08CFRDavaFernflowerJADXJD−CoreJodeKrakatauProcyon0.00.10.20.30.40.5distanceToOriginal/nbNodesOriginalDecompilerJava Decompiler Diversity and its Application to Meta-decompilation
Table 4
Summary results of the studied decompilers
Decompiler #Recompilable #PassTest #Deceptive
CFR
Dava
Fernﬂower
JADX
JD-Core
Jode
Krakatau
Procyon
Union
Total
3097 (0.79)
1747 (0.44)
2663 (0.68)
2736 (0.70)
2726 (0.69)
2569 (0.65)
1746 (0.44)
3281 (0.84)
3734 (0.95)
3928 (1.00)
1713 (0.71)
762 (0.32)
1435 (0.60)
1408 (0.59)
1375 (0.57)
1161 (0.48)
724 (0.30)
1869 (0.78)
2240 (0.93)
2397 (1.00)
22
36
21
78
44
142
97
33
342
-
both the type of parent and the type required by the super
constructor can be resolved, but, it does make it more chal-
lenging to decompilers in practice.
A manual analysis of these classes shows common is-
sues among the studied decompilers. (i) Generics is a fea-
ture that causes many decompilers to fail in particular when
combined with ternary operators, wildcards or type bounds.
Another example of such a case is detailed in Section 5. (ii)
As mentioned in Section 4.1 and Section 4.3, compilers pro-
ducing the bytecode do play a role. In particular, synthetic
elements created by a compiler, which the decompiler does
not expect. (iii) Overall, the diversity of independent corner
cases cannot be completely captured under one concise ex-
planation. Even for Procyon, the best performing decompi-
ler in our study, among the 528 classes for which it does
not produce semantically equivalent modulo inputs sources,
only 157 are also not decompilable by any other decompiler.
Table 4 summarizes the quantitative results obtained
from the previous research questions. Each line corre-
sponds to a decompiler. Column #Recompilable shows
the number of cases (and ratio) for which the decompi-
ler produced a recompilable output among all classes of
our dataset (3928 in total: 2041 for javac and 1887 for
ecj). Column #PassTest shows the number of cases where
the decompiled code passes those tests among the 2397
classes covered by tests and regrouping both compiler. Col-
umn #Deceptive indicates the number of cases that were
recompilable but did not pass the test suite (i.e.
a de-
compilation bug). The line ‘Union‘ shows the number of
classes for which at least 1 decompiler succeeds to produce
Recompilable sources and respectively sources that pass
tests. The column #Deceptive indicates the number of
classes for which at least 1 decompiler produced a decep-
tive decompilation. This means that for 2240 classes out of
the 2397 (93%), there is at least 1 decompiler that produces
semantically equivalent sources modulo inputs. This num-
ber must be taken with a grain of salt, as it does not mean
that someone who looks for a successful decompilation of
one of these classes could ﬁnd one trivially. Overall, 342
out of 2397 classes have at least 1 decompiler that produce
a deceptive decompilation. Assuming that one can merge
the successful decompilation results together, we would ob-