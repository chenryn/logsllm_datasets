**作者：LoRexxar'@知道创宇404区块链安全研究团队  
时间：2018年8月22日  
本系列上一篇：[《以太坊合约审计 CheckList
之“以太坊智能合约规范问题”影响分析报告》](https://paper.seebug.org/663/ "《以太坊合约审计 CheckList
之“以太坊智能合约规范问题”影响分析报告》")**
### 一、 简介
在知道创宇404区块链安全研究团队整理输出的《知道创宇以太坊合约审计CheckList》中，把“条件竞争问题”、“循环DoS问题”等问题统一归类为“以太坊智能合约设计缺陷问题”。
**“昊天塔(HaoTian)”**
是知道创宇404区块链安全研究团队独立开发的用于监控、扫描、分析、审计区块链智能合约安全自动化平台。我们利用该平台针对上述提到的《知道创宇以太坊合约审计CheckList》中“以太坊智能合约设计缺陷”类问题在全网公开的智能合约代码做了扫描分析。详见下文：
### 二、漏洞详情
#### 1、条件竞争
2016年11月29号，Mikhail Vladimirov和Dmitry Khovratovich公开了一篇[《ERC20 API: An Attack
Vector on Approve/TransferFrom
Methods》](https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit "《ERC20 API: An Attack Vector on Approve/TransferFrom
Methods》")，在文章中提到了一个在ERC20标准中存在的隐患问题， **条件竞争** 。
这里举一个approve函数中会出现的比较典型的例子，approve一般用于授权，比如授权别人可以取走自己的多少代币，整个流程是这样的：
  1. 用户A授权用户B 100代币的额度
  2. 用户A觉得100代币的额度太高了，再次调用approve试图把额度改为50
  3. 用户B在待交易处（打包前）看到了这笔交易
  4. 用户B构造一笔提取100代币的交易，通过条件竞争将这笔交易打包到了修改额度之前，成功提取了100代币
  5. 用户B发起了第二次交易，提取50代币，用户B成功拥有了150代币
想要理解上面这个条件竞争的原理，首先我们得对以太坊的打包交易逻辑有基础认识。
简单来说就是
  1. 只有当交易被打包进区块时，他才是不可更改的
  2. 区块会优先打包gasprice更高的交易
所以当用户B在待打包处看到修改的交易时，可以通过构造更高gasprice的交易来竞争，将这笔交易打包到修改交易之前，就产生了问题。
以下代码就存在条件竞争的问题
    function approve(address _spender, uint256 _value) public returns (bool success){
        allowance[msg.sender][_spender] = _value;
        return true
#### 2、循环DoS问题
在以太坊代码中，循环是一种很常见的结构，但由于以太坊智能合约的特殊性，在循环也有很多需要特别注意的点， 存在潜在的合约问题与安全隐患。
##### 1) 循环消耗问题
在以太坊中，每一笔交易都会消耗一定的gas，而交易的复杂度越高，则该交易的gasprice越高。而在区块链上，每个区块又有最大gas消耗值限制，且在矿工最优化收益方案中，如果一个交易的gas消耗过大，就会倾向性把这个交易排除在区块外，从而导致交易失败。
所以，对于合约内的循环次数不宜过大，在循环中的代码不宜过于复杂。
    struct Payee {
        address addr;
        uint256 value;
    }
    Payee payees[];
    uint256 nextPayeeIndex;
    function payOut() {
        uint256 i = nextPayeeIndex;
        while (i  200000) {
          payees[i].addr.send(payees[i].value);
          i++;
        }
        nextPayeeIndex = i;
    }
如果上述代码地址列表过长，就有可能导致交易失败。
2018年7月23日，Seebug Paper发表的[《首个区块链 token
的自动化薅羊毛攻击分析》](https://paper.seebug.org/646/)中攻击合约就提到了这种gas优化方式。
##### 2) 循环安全问题
在以太坊中，应该尽量避免循环次数受到用户控制，攻击者可能会使用过大的循环来完成Dos攻击。
    function distribute(address[] addresses) onlyOwner {
        for (uint i = 0; i   
联系电话：(086) 136 8133 5016(沈经理，工作日:10:00-18:00)
欢迎扫码咨询：
**区块链行业安全解决方案**
黑客通过DDoS攻击、CC攻击、系统漏洞、代码漏洞、业务流程漏洞、API-Key漏洞等进行攻击和入侵，给区块链项目的管理运营团队及用户造成巨大的经济损失。知道创宇十余年安全经验，凭借多重防护+云端大数据技术，为区块链应用提供专属安全解决方案。
欢迎扫码咨询：
### 六、REF
  * ERC20 API: An Attack Vector on Approve/TransferFrom Methods 
  * Life Cycle of an Ethereum Transaction 
  * 首个区块链 token 的自动化薅羊毛攻击分析 
  * GovernMental's 1100 ETH ： 
* * *