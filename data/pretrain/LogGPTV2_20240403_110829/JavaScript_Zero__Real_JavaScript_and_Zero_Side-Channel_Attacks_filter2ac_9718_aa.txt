title:JavaScript Zero: Real JavaScript and Zero Side-Channel Attacks
author:Michael Schwarz and
Moritz Lipp and
Daniel Gruss
JavaScript Zero: Real JavaScript and
Zero Side-Channel Attacks
Michael Schwarz, Moritz Lipp and Daniel Gruss
Graz University of Technology
{michael.schwarz,moritz.lipp,daniel.gruss}@iaik.tugraz.at
Abstract—Modern web browsers are ubiquitously used by
billions of users, connecting them to the world wide web. From the
other side, web browsers do not only provide a uniﬁed interface
for businesses to reach customers, but they also provide a uniﬁed
interface for malicious actors to reach users. The highly optimized
scripting language JavaScript plays an important role in the
modern web, as well as for browser-based attacks. These attacks
include microarchitectural attacks, which exploit the design of
the underlying hardware. In contrast to software bugs, there is
often no easy ﬁx for microarchitectural attacks.
We propose JavaScript Zero, a highly practical and generic
ﬁne-grained permission model in JavaScript to reduce the attack
surface in modern browsers. JavaScript Zero facilitates advanced
features of the JavaScript language to dynamically deﬂect usage
of dangerous JavaScript features. To implement JavaScript Zero in
practice, we overcame a series of challenges to protect potentially
dangerous features, guarantee the completeness of our solution,
and provide full compatibility with all websites. We demonstrate
that our proof-of-concept browser extension Chrome Zero protects
against 11 unﬁxed state-of-the-art microarchitectural and side-
channel attacks. As a side effect, Chrome Zero also protects
against 50 % of the published JavaScript 0-day exploits since
Chrome 49. Chrome Zero has a performance overhead of 1.82%
on average. In a user study, we found that for 24 websites in
the Alexa Top 25, users could not distinguish browsers with and
without Chrome Zero correctly, showing that Chrome Zero has
no perceivable effect on most websites. Hence, JavaScript Zero is
a practical solution to mitigate JavaScript-based state-of-the-art
microarchitectural and side-channel attacks.
I.
INTRODUCTION
Over the past 20 years, JavaScript has evolved to the pre-
dominant language on the web. Of the 10 million most popular
websites, 94.7 % use JavaScript [54]. Dynamic content relies
heavily on JavaScript, and thus, most pages use JavaScript
to improve the user experience, using, e.g., AJAX and dy-
namic page manipulation. Especially for platform-independent
HTML5 applications, JavaScript is a vital component.
With the availability of modern browsers on mobile de-
vices, web applications target smartphones and tablets as well.
Furthermore, mobile platforms typically provide a number of
Network and Distributed Systems Security (NDSS) Symposium 2018
18-21 February 2018, San Diego, CA, USA
ISBN 1-1891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23094
www.ndss-symposium.org
sensors and features not present on commodity laptops and
desktop computers. To make use of these additional features,
the World Wide Web Consortium (W3C) provides drafts and
recommendations for additional APIs [53]. Examples include
the Geolocation API [49] and the Battery Status API [48].
These APIs are supported by most browsers and allow de-
velopers to build cross-platform web applications with similar
functionality as native applications.
Undoubtedly, allowing every website to use such APIs has
security and privacy implications. Websites can exploit sensors
to ﬁngerprint the user [52] by determining the number of
sensors, their update frequency, and also their value (e.g., for
battery level or geolocation). Furthermore, sensor data can be
exploited to mount side-channel attacks on user input [7], [23].
Microarchitectural attacks can also be implemented in
JavaScript, exploiting properties inherent to the design of the
microarchitecture, such as timing differences in memory ac-
cesses. Although JavaScript code runs in a sandbox, Oren et al.
[33] demonstrated that it is possible to mount cache attacks
in JavaScript. Since their work, a series of microarchitectural
attacks have been mounted from websites, such as page
deduplication attacks [14], Rowhammer attacks [15], ASLR
bypasses [13], and DRAM addressing attacks [40].
As a response to these attacks, some—but not all—of the
APIs have been restricted by reducing the resolution (e.g., High
Precision Time API) [2], [6], [9] or completely removing them
(e.g., DeviceOrientation Event Speciﬁcation) [51]. However,
these countermeasures are incomplete as they do not cover all
sensors and are circumventable [13], [40].
A common trait of all attacks is that they rely on the
behavior of legitimate JavaScript features, which are rarely
required by benign web applications. However, removing these
JavaScript features entirely breaks the compatibility with the
few websites that use them in a non-malicious way. This is,
for example, the case with NoScript, a browser extension that
completely blocks JavaScript on a page [10].
We propose JavaScript Zero, a ﬁne-grained JavaScript per-
mission system, which combines ideas from existing permis-
sion systems in browsers and smartphone operating systems.
JavaScript Zero facilitates advanced features of the JavaScript
language to overcome the following three challenges:
C1 Restrictions must not be circumventable using self-
modifying code, such as higher-order scripts.
C2 Restricting access to potentially dangerous features must
be irreversible for a website.
C3 Restrictions must not have a signiﬁcant impact on com-
patibility and user experience.
To overcome challenge C1, we utilize advanced language
features such as virtual machine layering [19] for security. In
contrast to previous approaches [56], virtual machine layer-
ing allows redeﬁning any function of the JavaScript virtual
machine at runtime. Hence, we can cope with obfuscated
code and higher-order scripts, i.e., scripts that generate scripts.
JavaScript Zero replaces all potentially dangerous functions
with secure wrappers. When calling such a function, JavaScript
Zero decides whether to perform a pre-deﬁned action or ask
the user for permission to execute the function.
To overcome challenge C2, we utilize closures, another
advanced feature of the JavaScript
language, for security.
Variables in closures cannot be accessed from any outside
scope, providing us with language-level protection for our
countermeasure. With closures, we make all references to
original unprotected functions inaccessible to the website.
We provide a proof-of-concept
implementation as a
Chrome browser extension, Chrome Zero. In contrast to pre-
vious protection techniques [24], [18], Chrome Zero requires
no changes to the browser source code. Hence, Chrome Zero
requires lower maintenance efforts while at the same time users
also beneﬁt from the security of the most up-to-date browser.
To overcome challenge C3, we keep user interactions
to a minimum and provide multiple protection levels with
pre-deﬁned restrictions. We do not only provide a binary
permission system to block or allow certain functionality, but
we also allow to modify the semantics of functions and objects.
For example, the user can allow the usage of the high-precision
timing API but decides to reduce the available resolution to
100 ms instead of 5 µs. These settings can be conﬁgured by
either the user or the community, through a protection list.
We evaluate the efﬁcacy of Chrome Zero on 23 recent side-
channel attacks, microarchitectural attacks, and 0-day exploits.
We show that it successfully prevents all microarchitectural
and side-channel attacks in JavaScript. Although not a main
goal of Chrome Zero, it also prevents 50 % of the published
JavaScript 0-day exploits since Chrome 49. This shows that
we were able to solve challenges C1 and C2.
To evaluate whether Chrome Zero solves challenge C3, we
measure the performance overhead and the impact on the user
experience for the Alexa Top 25 websites, at the second highest
security level. On average, we observe a performance overhead
of 1.82 %. In a double-blind user study, we found that for 24
websites out of the Alexa Top 25, users could not distinguish
browsers with and without Chrome Zero showing that Chrome
Zero has no signiﬁcant effect on the user experience.
Contributions. The contributions of this work are:
1) We propose JavaScript Zero, a ﬁne-grained JavaScript
permission system to mitigate state-of-the-art microarchi-
tectural and side-channel attacks.
2) We show that combining advanced and novel features
of the JavaScript language, e.g., virtual machine layer-
ing, closures, proxy objects, and object freezing, can be
retroﬁtted to form a basis for strong security boundaries.
3) We show that JavaScript Zero successfully prevents all
published microarchitectural and side-channel attacks and
as a side effect also mitigates 50 % of the published
JavaScript 0-day exploits since Chrome 49.
4) We evaluate our proof-of-concept implementation Chrome
Zero in terms of performance and usability. Chrome Zero
has 1.82 % performance overhead on average on the
Alexa Top 10 websites. In a double-blind user study, we
show that users cannot distinguish a browser with and
without Chrome Zero for 24 of the Alexa Top 25 websites.
The remainder of the paper is organized as follows. Sec-
tion II provides preliminary information necessary to under-
stand the defenses we propose. Section III deﬁnes the threat
model. Section IV describes the design of JavaScript Zero.
Section V details our proof-of-concept implementation Chrome
Zero. Section VI provides a security analysis of Chrome Zero
as an instance of JavaScript Zero. Section VII provides a
usability analysis of Chrome Zero. Section VIII discusses
related work. We conclude our work in Section IX.
II. PRELIMINARIES
In this section, we provide preliminary information on
microarchitectural attacks in native code and JavaScript, and
on JavaScript exploits.
A. Microarchitectural Attacks
Modern processors are highly optimized for computational
power and efﬁciency. However, optimizations often intro-
duce side effects that can be exploited in so-called microar-
chitectural attacks. Microarchitectural attacks comprise side-
channel and fault attacks on microarchitectural elements or
utilizing microarchitectural elements, e.g., pipelines, caches,
buses, DRAM. Attacks on caches have been investigated
extensively in the past 20 years, with a focus on cryptographic
implementations [17], [4]. The timing difference between a
cache hit and a cache miss can be exploited to learn secret
information from co-located processes and virtual machines.
Modern attacks use either Flush+Reload [55], if read-only
shared memory is available, or Prime+Probe [34] otherwise.
In both attacks, the attacker manipulates the state of the cache
and later on checks whether the state has changed. Besides
attacks on cryptographic implementations [34], [55],
these
attack primitives can also be used to defeat ASLR [13] or
to build covert-channels [22].
B. Microarchitectural and Side-Channel Attacks in JavaScript
Microarchitectural attacks were only recently exploited
from JavaScript. As JavaScript code is sandboxed and in-
herently single-threaded, attackers face certain challenges in
contrast to attacks in native code. We identiﬁed several re-
quirements that are the basis for microarchitectural attacks,
i.e., every attack relies on at least one of these primitives.
Moreover, sensors found on many mobile devices, as well as
modern browsers introduce side-channels which can also be
exploited from JavaScript. Table I gives an overview of, to the
best of our knowledge, all 11 known microarchitectural and
side-channel attacks in JavaScript and their requirements.
a) Memory Addresses: JavaScript is a sandboxed script-
ing language which does not expose the concept of pointers
to the programmer. Even though pointers are used internally,
the language never discloses virtual addresses to the program-
mer. Thus, an attacker cannot use language features to gain
knowledge of virtual addresses. The closest to virtual addresses
2
TABLE I: REQUIREMENTS OF STATE-OF-THE-ART SIDE-CHANNEL ATTACKS IN JAVASCRIPT.
Memory addresses
Accurate timing Multithreading
Shared data
Sensor API
Rowhammer.js [15]
Practical Memory Deduplication Attacks in Sandboxed Javascript [14]
Fantastic Timers and Where to Find Them [40]
ASLR on the Line [13]
The spy in the sandbox [33]
Loophole [47]
Pixel perfect timing attacks with HTML5 [44]
The clock is still ticking [45]
Practical Keystroke Timing Attacks in Sandboxed JavaScript [20]
TouchSignatures [23]
Stealing sensitive browser data with the W3C Ambient Light Sensor API [31]
†
†
†
†
† If accurate timing is not available, it can be approximated using a combination of multithreading and shared data.
are ArrayBuffers, contiguous blocks of virtual memory.
ArrayBuffers are used in the same way as ordinary arrays
but are faster and more memory efﬁcient, as the underlying
data is actually an array which cannot be resized [26]. If
one virtual address within an ArrayBuffer is identiﬁed,
the remaining addresses are also known, as both the addresses
of the memory and the array indices are linear [14], [13].
Gras et al. [13] showed that ArrayBuffers can be
exploited to reconstruct virtual addresses. An attacker with
knowledge of virtual addresses has effectively defeated address
space layout randomization, thus circumventing an important
countermeasure against memory corruption attacks.
Microarchitectural attacks typically do not rely on virtual
addresses but physical addresses. Cache-based attacks [33],
[15] rely on parts of the physical address to determine cache
sets. DRAM-based attacks [15], [14], [40] also rely on parts of
the physical address to determine the beginning of a page or
a DRAM row. However, for security reasons, an unprivileged
user does not have access to the virtual-to-physical mapping.
This is not only true for JavaScript, but also for any native
application running on a modern operating system.
[14] and Gras et al.
information to recover
Consequently, microarchitectural attacks have to resort
this information.
to side-channel
Gruss et al.
the fact
that browser engines allocate ArrayBuffers always page
aligned. The ﬁrst byte of the ArrayBuffer is therefore at the
beginning of a new physical page and has the least signiﬁcant
12 bits set to ‘0’.
[13] exploit
For DRAM-based attacks, this is not sufﬁcient, as they
require more bits of the physical address. These attacks exploit
another feature of browser engines and operating systems. If a
large chunk of memory is allocated, browser engines typically
use mmap to allocate this memory, which is optimized to
allocate 2 MB transparent huge pages (THP) instead of 4 KB
pages [15], [40]. As these physical pages are mapped on
demand, i.e., as soon as the ﬁrst access to the page occurs,
iterating over the array indices results in page faults at the
beginning of a new page. The time to resolve a page fault is
signiﬁcantly higher than a normal memory access. Thus, an
attacker knows the index at which a new 2 MB page starts. At
this array index, the underlying physical page has the 21 least
signiﬁcant bits set to ‘0’.
b) Accurate Timing: Accurate timing is one of the most
important primitives, inherent to nearly all microarchitectural
3
and side-channel attacks. As most of the microarchitectural and
side-channel attacks exploit some form of timing side channel,
they require a way to measure timing differences. The required
resolution depends greatly on the underlying side channel.
For example, DRAM-row conﬂicts [15], [40], cache-timing
differences [33], [13], and interrupt timings [20] require a
timing primitive with a resolution in the range of nanoseconds,
whereas for detecting page faults [14], [15], [40], exploiting
SVG ﬁlters [44], or mounting cross-origin timing attacks [45],
a resolution in the range of milliseconds is sufﬁcient.
JavaScript provides two interfaces for measuring time.
The Date object represents an instance in time, used to
get an absolute timestamp. The object provides a method
to get a timestamp with a resolution of 1 ms. The second
interface is the Performance object which is used to provide
information about page performance. This interface provides
several timing relevant properties and functions, such as the
performance.now() function, which provides a highly
accurate timestamp in the order of microseconds [40]. Another
part of the Performance object is the User Timing API,
a benchmarking feature for developers, which also provides
timestamps in the order of microseconds.
However, the resolution of these built-in timers is not high
enough to measure microarchitectural side channels, where
the timing differences are mostly in the order of nanosec-
onds. Thus, such attacks require a custom timing primitive.
Usually, it is sufﬁcient to measure timing differences, and an
absolute timestamp is not necessary. Thus, access to a full-
blown clock is not required, and attackers usually settle for
some form of a monotonically incremented counter as a clock
replacement. Kohlbrenner et al. [18] and Schwarz et al. [40]
investigated new methods to get highly accurate timing. Most
of their timing primitives rely on either building counting loops
using message passing [40] or on interfaces for multimedia
content [18]. Using such self-built timers, it is possible to
measure timing differences with a nanosecond resolution.
is
JavaScript
c) Multithreading:
inherently single-
threaded and based on an event loop. All events, such as
function calls or user inputs, are pushed to this queue and
then serially, and thus synchronously, handled by the engine.