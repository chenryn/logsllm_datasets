# 四、Docker 集群中的网络
在这一章中，您将学习当使用像 Kubernetes、Docker Swarm 和中间层这样的框架时，Docker 容器是如何联网的。
我们将涵盖以下主题:
*   Docker 群
*   忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈
    *   Kubernetes 集群中的联网容器
    *   Kubernetes 网络与 Docker 网络有何不同
    *   Kubernetes 在 AWS
*   中间层
# Docker 群
Docker Swarm 是一个用于 Docker 的本地集群系统。Docker Swarm 公开了标准的 Docker API，这样任何与 Docker 守护进程通信的工具都可以与 Docker Swarm 进行通信。基本目标是允许一起创建和使用 Docker 主机池。Swarm 的集群管理器根据集群中的可用资源来调度容器。我们还可以在部署容器时为其指定受约束的资源。Swarm 旨在通过为更重更大的容器节省其他主机资源来将容器打包到主机上，而不是将它们随机调度到集群中的主机上。
与其他 Docker 项目类似，Docker Swarm 使用即插即用架构。Docker Swarm 提供后端服务来维护 Swarm 集群中的 IP 地址列表。有几个服务，如 etcd，领事和动物园管理员；甚至可以使用静态文件。Docker Hub 还提供托管的发现服务，在 Docker Swarm 的正常配置中使用。
Docker Swarm 调度使用多种策略对节点进行排序。创建新容器时，Swarm 使用以下策略，根据计算出的最高等级将其放在节点上:
1.  **展开**:这将优化，并根据该时间点节点上运行的容器数量来调度节点上的容器
2.  **Binpack** :选择节点根据 CPU 和 RAM 利用率调度容器
3.  **随机策略**:这个使用不计算；它随机选择节点来调度容器
Docker Swarm 还使用过滤器来调度容器，例如:
*   **约束**:这些使用与节点关联的键/值对，如`environment=production`
*   **相似性过滤器**:用于运行一个容器，并指示其根据标签、映像或标识符定位并运行到另一个容器旁边
*   **端口过滤器**:在这种情况下，节点是根据其上可用的端口来选择的
*   **依赖过滤器**:这个在同一个节点上协同调度依赖容器
*   **健康过滤器**:这防止了容器在不健康节点上的调度
下图解释了 Docker Swarm 集群的各种组件:
![Docker Swarm](img/00025.jpeg)
## Docker 群设置
让我们设置我们的 Docker Swarm 设置，它将有两个节点和一个主节点。
我们将使用一个 Docker 客户端来访问 Docker Swarm 集群。Docker 客户端可以安装在机器或笔记本电脑上，应该可以访问 Swarm 集群中的所有机器。
在所有三台机器上安装 Docker 后，我们将从命令行重新启动 Docker 服务，以便可以从本地主机(`0.0.0.0:2375`)上的 TCP 端口 2375 或特定主机 IP 地址访问它，并且可以允许在所有 Swarm 节点上使用 Unix 套接字进行连接，如下所示:
```
$ docker -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock –d &
```
Docker Swarm 映像需要作为主节点上的 Docker 容器进行部署。在我们的例子中，主节点的 IP 地址是`192.168.59.134`。用你的蜂群主节点替换它。在 Docker 客户机上，我们将使用以下命令在主节点上安装 Docker Swarm:
```
$ sudo docker -H tcp://192.168.59.134:2375 run --rm swarm create
Unable to find image 'swarm' locally
Pulling repository swarm
e12f8c5e4c3b: Download complete
cf43a42a05d1: Download complete
42c4e5c90ee9: Download complete
22cf18566d05: Download complete
048068586dc5: Download complete
2ea96b3590d8: Download complete
12a239a7cb01: Download complete
26b910067c5f: Download complete
4fdfeb28bd618291eeb97a2096b3f841
```
应该注意命令执行后生成的 Swarm 令牌，因为它将用于 Swarm 设置。在我们的例子中，是这样的:
```
"4fdfeb28bd618291eeb97a2096b3f841"
```
以下是设置双节点 Docker Swarm 集群的步骤:
1.  从 Docker 客户端节点，需要使用节点 1 的 IP 地址(在我们的示例中为`192.168.59.135`)和前面代码中生成的 Swarm 令牌来执行以下`docker`命令，以便将其添加到 Swarm 集群中:
    ```
    $ docker -H tcp://192.168.59.135:2375 run -d swarm join --addr=192.168.59.135:2375 token:// 4fdfeb28bd618291eeb97a2096b3f841
    Unable to find image 'swarm' locally
    Pulling repository swarm
    e12f8c5e4c3b: Download complete
    cf43a42a05d1: Download complete
    42c4e5c90ee9: Download complete
    22cf18566d05: Download complete
    048068586dc5: Download complete
    2ea96b3590d8: Download complete
    12a239a7cb01: Download complete
    26b910067c5f: Download complete
    e4f268b2cc4d896431dacdafdc1bb56c98fed01f58f8154ba13908c7e6fe675b
    ```
2.  通过用节点 2 替换节点 1 的 IP 地址，对节点 2 重复上述步骤
3.  Swarm manager is required to be set up on the master node using the following command on the Docker client node:
    ```
    $ sudo docker -H tcp://192.168.59.134:2375 run -d -p 5001:2375 swarm manage token:// 4fdfeb28bd618291eeb97a2096b3f841
    f06ce375758f415614dc5c6f71d5d87cf8edecffc6846cd978fe07fafc3d05d3
    ```
    Swarm 群集已设置，可以使用驻留在主节点上的 Swarm 管理器进行管理。要列出所有节点，可以使用 Docker 客户端执行以下命令:
    ```
    $ sudo docker -H tcp://192.168.59.134:2375 run --rm swarm list \ token:// 4fdfeb28bd618291eeb97a2096b3f841
    192.168.59.135:2375
    192.168.59.136:2375
    ```
4.  以下命令可用于获取集群信息:
    ```
    $ sudo docker -H tcp://192.168.59.134:5001 info
    Containers: 0
    Strategy: spread
    Filters: affinity, health, constraint, port, dependency
    Nodes: 2
    agent-1: 192.168.59.136:2375
     └ Containers: 0
     └ Reserved CPUs: 0 / 8
     └ Reserved Memory: 0 B / 1.023 GiB
     agent-0: 192.168.59.135:2375
     └ Containers: 0
     └ Reserved CPUs: 0 / 8
     └ Reserved Memory: 0 B / 1.023 GiB
    ```
5.  测试`ubuntu`容器可以通过指定名称为`swarm-ubuntu`并使用以下命令启动到集群上:
    ```
    $ sudo docker -H tcp://192.168.59.134:5001 run -it --name swarm-ubuntu ubuntu /bin/sh
    ```
6.  可以使用 Swarm 主机的 IP 地址来列出容器:
    ```
    $ sudo docker -H tcp://192.168.59.134:5001 ps
    ```
这就完成了双节点 Docker Swarm 集群的设置。
## Docker 群体网络
Docker Swarm 网络与 libnetwork 集成，甚至为覆盖网络提供支持。libnetwork 提供了一个 Go 实现来连接容器；它是一个健壮的容器网络模型，为应用和容器的编程接口提供网络抽象。Docker Swarm 现在与 Docker 1.9 中的新网络模型完全兼容(请注意，我们将在以下设置中使用 Docker 1.9)。覆盖网络需要键值存储，包括发现、网络、IP 地址和更多信息。
在下面的例子中，我们将使用 Consul 来更好地理解 Docker Swarm 网络:
1.  我们将使用`docker-machine` :
    ```
    $ docker-machine create -d virtualbox sample-keystore
    Running pre-create checks...
    Creating machine...
    Waiting for machine to be running, this may take a few minutes...
    Machine is running, waiting for SSH to be available...
    Detecting operating system of created instance...
    Provisioning created instance...
    Copying certs to the local machine directory...
    Copying certs to the remote machine...
    Setting Docker configuration on the remote daemon...
    To see how to connect Docker to this machine, run: docker-machine.exe env sample-keystore
    ```
    供应一台名为`sample-keystore`的 VirtualBox 机器
2.  我们还将在港口`8500`的`sample-keystore`机器上部署`progrium/consul`容器，命令如下:
    ```
    $ docker $(docker-machine config sample-keystore) run -d \
     -p "8500:8500" \
     -h "consul" \
     progrium/consul -server –bootstrap
    Unable to find image 'progrium/consul:latest' locally
    latest: Pulling from progrium/consul
    3b4d28ce80e4: Pull complete
    e5ab901dcf2d: Pull complete
    30ad296c0ea0: Pull complete
    3dba40dec256: Pull complete
    f2ef4387b95e: Pull complete
    53bc8dcc4791: Pull complete
    75ed0b50ba1d: Pull complete
    17c3a7ed5521: Pull complete
    8aca9e0ecf68: Pull complete
    4d1828359d36: Pull complete
    46ed7df7f742: Pull complete
    b5e8ce623ef8: Pull complete
    049dca6ef253: Pull complete
    bdb608bc4555: Pull complete
    8b3d489cfb73: Pull complete
    c74500bbce24: Pull complete
    9f3e605442f6: Pull complete
    d9125e9e799b: Pull complete
    Digest: sha256:8cc8023462905929df9a79ff67ee435a36848ce7a10f18d6d0faba9306b97274
    Status: Downloaded newer image for progrium/consul:latest
    1a1be5d207454a54137586f1211c02227215644fa0e36151b000cfcde3b0df7c
    ```
3.  将本地环境设置到`sample-keystore`机器:
    ```
    $ eval "$(docker-machine env sample-keystore)"
    ```
4.  我们可以列出领事容器如下:
    ```
    $ docker ps
    CONTAINER ID       IMAGE           COMMAND           CREATED       STATUS        PORTS                                 NAMES
    1a1be5d20745   progrium/consul  /bin/start -server  5 minutes ago  Up 5 minutes   53/tcp, 53/udp, 8300-8302/tcp, 8400/tcp, 8301-8302/udp, 0.0.0.0:8500->8500/tcp   cocky_bhaskara
    ```
5.  Create a Swarm cluster using `docker-machine`. The two machines can be created in VirtualBox; one can act as the Swarm master. As we create each Swarm node, we will be passing the options required for Docker Engine to have an overlay network driver:
    ```
    $ docker-machine create -d virtualbox --swarm --swarm-image="swarm" --swarm-master --swarm-discovery="consul://$(docker-machine ip sample-keystore):8500" --engine-opt="cluster-store=consul://$(docker-machine ip sample-keystore):8500" --engine-opt="cluster-advertise=eth1:2376" swarm-master
    Running pre-create checks...
    Creating machine...
    Waiting for machine to be running, this may take a few minutes...
    Machine is running, waiting for SSH to be available...
    Detecting operating system of created instance...
    Provisioning created instance...
    Copying certs to the local machine directory...
    Copying certs to the remote machine...
    Setting Docker configuration on the remote daemon...
    Configuring swarm...