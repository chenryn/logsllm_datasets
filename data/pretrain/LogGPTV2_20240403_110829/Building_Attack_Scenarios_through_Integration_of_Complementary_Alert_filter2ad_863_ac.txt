/
/
/
/
/
/
/
{n2.DestIP=n3.DestIP}
{n2.DestIP=n4.DestIP}
/
/
/
/
/
/
/
/
n5
{n1.DestIP=n5.DestIP,
n1.DestIP=n5.SrcIP}
{n2.DestIP=n5.DestIP,
n2.DestIP=n5.SrcIP}
{n3.DestIP=n5.DestIP,
n3.DestIP=n5.SrcIP}
{n4.DestIP=n5.DestIP,
n4.DestIP=n5.SrcIP}
/
/
n6
{n1.DestIP=n6.DestIP,
n1.DestIP=n6.SrcIP}
{n2.DestIP=n6.DestIP,
n2.DestIP=n6.SrcIP}
{n3.DestIP=n6.DestIP,
n3.DestIP=n6.SrcIP}
{n4.DestIP=n6.DestIP,
n4.DestIP=n6.SrcIP}
{n5.SrcIP=n6.SrcIP,
n5.DestIP=n6.DestIP,
n5.SrcIP=n6.DestIP,
n5.DestIP=n6.SrcIP}
/
can add the paths in Label(ec) into the integrated correla-
tion graph. Note that each path in Label(ec) is in the form
of T ype(h), T1, ..., Tk, T ype(h0). T ype(h) and T ype(h0)
are then merged with h and h0, respectively, and the rest
of the path is added as a virtual path (i.e., virtual nodes
and edges) from h to h0.
3.4. Validating through Raw Audit Data
The hypothesized attacks can be further validated using
raw audit data. For example, we may hypothesize there is
a variation of FTP Glob Expansion attack between a
SCAN NMAP TCP alert and a Rsh alert. However, if there
is no ftp activity related to the victim host between these
two alerts, we can easily conclude that our hypothesis is
incorrect. By doing so we can further narrow the hypoth-
esized attacks down to meaningful ones.
To take advantage of this observation, we extend our
model to associate a “ﬁltering condition” with each hyper-
alert type. Assume that the raw audit data set consists of
a sequence of audit records, and we can extract a set of
attributes from each audit record directly, or through in-
ference. For example, we may extract the source IP ad-
dress from a tcpdump record directly, or infer the type of
service using the port and payload information. For the
sake of presentation, we call such attributes obtained from
the raw audit data audit attributes. Given a set A of au-
dit attributes and a hyper-alert type T , a ﬁltering condition
for T w.r.t. A is a logical formula involving audit attribute
names in A, which evaluates to True or False if the audit
attribute names are replaced with speciﬁc values.
Intu-
itively, a ﬁltering condition for T w.r.t. A must be True if
an attack corresponding to T or its variations indeed hap-
pen.
Using ﬁltering conditions is indeed straightforward.
When we hypothesize a sequence of missed attacks based
on two hyper-alerts h and h0, we know that all the times-
ICMP_PING_NMAP1
SCAN_NMAP_TCP2
IMAP_Authen_Overflow5
Rsh3
Mstream_Zombie4
Figure 6. Integration of CG1 and CG2 after re-
ﬁnement with raw audit data
tamps of the hypothesized attacks are between those of
h and h0. Thus, to validate a hypothesized attack, we
can search through the raw audit records during the afore-
mentioned time period, and evaluate the ﬁltering condi-
tion for the hypothesized attack using the values of the
audit attributes extracted from each raw audit record. To
continue the earlier example, we may associate a ﬁl-
tering condition protocol=ftp with the hyper-alert type
FTP Glob Expansion.
If there is no ftp trafﬁc be-
tween the hyper-alerts SCAN NMAP TCP2 and Rsh3, this
condition will evaluate to False for all audit records, and
we can conclude that no ftp based attack is missed by the
IDSs. As a result, the integrated correlation graph in Fig-
ure 3 can be reﬁned to the one in Figure 6.
A limitation of using ﬁltering conditions is that human
users must specify the conditions associated with each
hyper-alert type. It has at least two implications. First,
it could be time consuming to specify such conditions for
every known attack. Second, human users may make mis-
takes during the speciﬁcation of ﬁltering conditions. In
particular, a ﬁltering condition could be too speciﬁc to
capture the invariant among the variations of a known at-
tack, or too general to ﬁlter out enough incorrect hypothe-
ses. Nevertheless, we observe that any ﬁltering condition
may help reduce incorrectly hypothesized attacks, even if
it is very general. In our experiments, we simply use the
protocols over which the attacks are carried out as ﬁltering
conditions. It is interesting to study how to get the “right”
way to specify ﬁltering conditions. We consider this prob-
lem outside of the scope of this paper; we will investigate
it in our future work.
Another issue is the execution cost. To ﬁlter out a hy-
pothesized attack with a ﬁltering condition, we have to ex-
amine every audit record during the period of time when
the attack could have happened. Though there are many
ways to optimize the ﬁltering process (e.g., indexing, con-
current examination), the cost is not negligible, especially
when the time period is large. Thus, ﬁltering conditions
are more suitable for off-line analysis such as forensic
analysis.
3.5. Consolidating Hypothesized Attacks
In the earlier discussion, we focused on hypothesiz-
ing and reasoning about missed attacks. However, this
method does not consider the possibility that the same
hypothesized attack could be related to multiple hyper-
alerts in different correlation graphs. As a result, the inte-
grated correlation graph with hypothesized attacks could
be overly complex. In particular, there could be multiple
hypothesized attacks for one missed attack. Though it is
possible that the same hypothesized attacks are repeated
multiple times, having too many uncertain details reduces
the usability of the integrated correlation graph.
To deal with the above problem, we consolidate the hy-
pothesized attacks based on their types and their inferred
attribute values. The general idea is to merge the hypoth-
esized attacks (and thus reduce the complexity of the inte-
grated correlation graph) as long as it is possible that the
hypothesized attacks to be merged are the same attack. In
other words, we aggregate the same type of hypothesized
attacks if their inferable attribute values are consistent.
that
prepares
that
such
that
For example,
The
attribute values of
SCAN NMAP TCP
inferred from the hyper-alerts
a hypothesized attack
lead
can be
if we hypoth-
to this hypothesis.
an IMAP Authen Overflow attack
esize
after a SCAN NMAP TCP alert and before a Rsh
alert
for
IMAP Authen Overflow, which then prepares for
Rsh, then from Table 1 we know that SCAN NMAP TCP
and IMAP Authen Overflow have the same destina-
tion IP address, and the destination IP address involved
in IMAP Authen Overflow is the same as either
the source or the destination IP address in Rsh.
In
general, we can use the equality constraints between the
actual alerts and the hypothesized attacks to infer the
possible attribute values of these attacks. As a special
attribute, we estimate the timestamp of a hypothesized
attack with a possible range.
If an attack T is hypoth-
esized with two actual alerts h and h0, where h occurs
before h0, then the possible range of T ’s timestamp is
(h.end time, h0.begin time).
To reduce the number of hypothesized attacks and make
the integrated correlation graph easy to understand, we
take an aggressive approach. Speciﬁcally, we aggregate
two hypothesized attacks together if they (1) belong to the
same type, (2) share the same values on their common in-
ferable attributes, and (3) the ranges of their timestamps
overlap. An example of consolidation is what we per-
formed in our experiments, which consolidated about 300
hypothesized attacks into 16. In the following, we outline
the approach to consolidating hypothesized attacks.
The consolidation process is performed in three steps.
First, we get the inferable attribute values for all hypothe-
sized attacks. Second, we partition the hypothesized at-
tacks into groups such that all hypothesized attacks in
the same group have the same hyper-alert type, their at-
tribute values do not have conﬂict values (i.e., if two hy-
pothesized attacks have inferable values on the same at-
tribute, these two values should be the same), and possi-
ble ranges of their timestamps overlap. We then aggregate
each group into one hypothesized attack. Third, we merge
virtual edges between the same pair of (aggregated) hy-
pothesized attacks. The resulting correlation graph is the
ﬁnal integrated correlation graph.
Among the three steps, the only non-trivial step is the
inference of attribute values for hypothesized attacks. We
achieve this by revising Algorithm 1. In Steps 5 o 9, in ad-
dition to maintaining the sets S(T0.ai) only for attributes
of T0, we construct such sets for all attributes of each
hyper-alert type Tj−1 that appear in the equality constraint
Cj. As a result, for each combination of equality con-
straints mentioned in Step 4 and each Tj, j = 1, 2, ..., k,
we can get an equality constraint for T and each Tj, de-
noted ecj, and another equality constraint for Tj and T 0,
denoted ec0
j. Given a type T hyper-alert h and a type T 0
hyper-alert h0, if T , T1, ..., Tk, T 0 are the hypothesized
path that leads to h indirectly preparing for h0 and C1,
C2, ..., Ck+1 are the corresponding sequence of equality
constraints, then for each hypothesized attack Tj, Tj must
satisfy both ecj and ec0
j. Thus, we can infer the attributes
j using h and h0. To keep this infor-
involved in ecj and ec0
j w.r.t. T and
mation, each Tj should maintain ecj and ec0
T 0.
We shall point out that each hypothesized attack may
correspond to multiple actual attacks in the consolidated
correlation graph. In other words, each hypothesized at-
tack in an integrated correlation graph is indeed a place
holder for one or several possible attacks.
4. Experimental Results
To examine the effectiveness of the proposed tech-
niques, we performed a series of experiments using one
of the 2000 DARPA intrusion detection scenario speciﬁc
data sets, LLDOS 1.0 [15]. LLDOS 1.0 contains a series
of attacks in which an attacker probed, broke-in, installed
the components necessary to launch a Distributed Denial
of Service (DDOS) attack, and actually launched a DDOS
attack against an off-site server. The network audit data
were collected in both the DMZ and the inside parts of the
evaluation network. We used RealSecure Network Sen-
sor 6.0 [11] as the IDS sensor to generate alerts, and the
NCSU Intrusion Alert Correlator [18] to correlate these
alerts into correlation graphs. To validate the hypothe-
sized attacks using raw audit data, we used Ethereal [3], a
network protocol analyzer, to extract information from the
raw tcpdump ﬁle (i.e., the network audit data). We used
Graphviz [2] to visualize correlation graphs.
FTP_Syst67243
Sadmind_Ping67343
(a) CGa
Email_Almail_Overflow67529
Email_Almail_Overflow67304
Rsh67558
Rsh67559
Rsh67560
Rsh67553
Rsh67542
Mstream_Zombie67554
Rsh67549
Mstream_Zombie67776
Rsh67550
Rsh67540
Mstream_Zombie67767
Rsh67543
Mstream_Zombie67537
Stream_DoS67773
Mstream_Zombie67777
Rsh67545
Rsh67546
Rsh67547
Rsh67562
Rsh67535
Rsh67536
Mstream_Zombie67563
Rsh67538
Rsh67539
(b) CGb
Figure 7. Two correlation graphs constructed
from LLDOS 1.0 inside trafﬁc
Our current implementation is still semi-automatic. Our
prototype can automatically decide what hyper-alert cor-
relation graphs to integrate, hypothesize possibly missed
attacks, and consolidate the hypothesized attacks. How-
ever, the validation of hypothesized attacks with raw audit
data still has to be handled semi-manually. Speciﬁcally,
we use Ethereal [3] to extract the protocol information for
each packet, and then validate the hypothesized attacks
accordingly. We are currently reﬁning our implementa-
tion so that all steps can be automated.
In our experiments, we use a simple clustering corre-
lation method. That is, we cluster alerts together as long
as they involve the same destination IP address. Since
our goal is to examine the effectiveness of the integration
techniques, we believe this is acceptable for our experi-
ments. In practice, more sophisticated clustering correla-
tion methods (e.g., those proposed in [27]) are certainly
needed for better performance.
To test
the ability of our techniques to hypothe-
size and reason about missed attacks, we dropped
all Sadmind Amslverify Overflow alerts that Re-
alSecure Network Sensor detected in LLDOS1.0. As a
result, the attack scenarios that the Intrusion Alert Corre-
lator output before dropping these alerts are all split into
multiple parts, some of which become individual, uncor-
related alerts. Figure 7 shows two of these correlation
graphs constructed from the inside trafﬁc in LLDOS 1.0.
Now let us focus on the correlation graphs in Figure
7. As mentioned earlier, we cluster alerts together if
they share the same destination IP address. Since the
destination IP addresses of both Sadmind Ping67343
(in Figure 7(a)) and Rsh67553 (in Figure 7(b)) are
172.16.112.50, they belong to the same cluster. We in-
tegrate two correlation graphs as long as they both have
alerts in the same cluster. Thus, Figures 7(a) and 7(b)
should be integrated together.
We consider all types of alerts generated by the RealSe-
cure Network Sensor 6.0 in our type graph. The speci-
ﬁcation of the corresponding hyper-alert types are given
in Appendix A, and the type graph is given in Figure 8.
For space reasons, we did not put the isolated nodes (the
nodes which do not have edges connecting to them) into
the type graph. Based on the type graph, we can easily hy-
pothesize that variations of FTP Syst, HTTP Shells,
and Sadmind Amslverify Overflow could have
been missed by the IDS. For example, there could be