title:Mnemosyne: An Effective and Efficient Postmortem Watering Hole Attack
Investigation System
author:Joey Allen and
Zheng Yang and
Matthew Landen and
Raghav Bhat and
Harsh Grover and
Andrew Chang and
Yang Ji and
Roberto Perdisci and
Wenke Lee
Mnemosyne: An Effective and Efficient Postmortem
Watering Hole Attack Investigation System
Joey Allen
Georgia Institute of Technology
Raghav Bhat
Georgia Institute of Technology
Zheng Yang
Georgia Institute of Technology
Harsh Grover
Georgia Institute of Technology
Yang Ji
Palo Alto Networks
Roberto Perdisci
Georgia Institute of Technology
University of Georgia
Matthew Landen
Georgia Institute of Technology
Andrew Chang
Georgia Institute of Technology
Wenke Lee
Georgia Institute of Technology
ABSTRACT
Compromising a website that is routinely visited by employees of
a targeted organization has become a popular technique for nation-
state level adversaries to penetrate an enterprise’s network. This
technique, dubbed a “watering hole” attack, leverages a compro-
mised website to serve as a stepping stone into the true victims’
network. Despite watering hole attacks being one of the main tech-
niques used by attackers to achieve the initial compromise stage
of the cyber kill chain, there has been relatively little research re-
lated to detecting or investigating complex watering hole attacks.
While there is existing work that seeks to detect malicious mod-
ifications made to an otherwise benign website, we argue that
simply detecting that the website is compromised is only the first
stage of the investigation. In this paper, we propose Mnemosyne, a
postmortem forensic analysis engine that relies on browser-based
attack provenance to accurately reconstruct, investigate, and as-
sess the ramifications of watering hole attacks. Mnemosyne relies
on a lightweight browser-modification-free auditing daemon to
passively collect causality logs related to the browser’s execution.
Next, Mnemosyne applies a set of versioning techniques on top of
these causality logs to precisely pinpoint when the website was
compromised and what modifications were made by the adversary.
Following this step, Mnemosyne relies on a novel user-level analy-
sis to assess how the malicious modifications affected the targeted
enterprise and seeks to identify exactly which employees fell vic-
tim to the attack. Throughout our extensive evaluation, we found
that Mnemosyne’s forensic analysis engine was able to identify the
true victims in all 7 real-world watering hole scenarios, while also
reducing the amount of manual analysis required by the forensic
analyst by 98.17% on average.
KEYWORDS
attack provenance; watering hole attack; forensic analysis
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3423355
ACM Reference Format:
Joey Allen, Zheng Yang, Matthew Landen, Raghav Bhat, Harsh Grover, An-
drew Chang, Yang Ji, Roberto Perdisci, and Wenke Lee. 2020. Mnemosyne:
An Effective and Efficient Postmortem Watering Hole Attack Investigation
System. In Proceedings of the 2020 ACM SIGSAC Conference on Computer and
Communications Security (CCS ’20), November 9–13, 2020, Virtual Event, USA.
ACM, New York, NY, USA, 16 pages. https://doi.org/10.1145/3372297.3423355
1 INTRODUCTION
Sophisticated, targeted attacks against enterprise networks have
been growing more frequent recently. Such attacks often unfold
through a sequence of steps sometimes referred to as the cyber
kill chain [65]. To deliver the initial attack that compromises the
targeted network, attackers leverage different techniques such as
sending spear phishing emails to gain a foothold on the victim’s
workstation or hoaxing the user to visit a website controlled by the
adversary and completing a drive-by-download attack. These tac-
tics have been well studied and enterprises have deployed effective
blacklist-based firewall rules (e.g., WAF [10] and Email Defender [4])
and set up periodic security training for its employees. Unfortu-
nately, adversaries have evolved their techniques to infiltrate a
targeted enterprise network by compromising whitelisted, third-
party entities with which the enterprise normally communicates.
For instance, compromising a website that is frequently visited by
individuals affiliated with the targeted organization has become
a growing trend to achieve the initial intrusion into a targeted
organization’s network. Such attacks are referred to as “watering
hole” attacks. Recently, watering hole attacks have been employed
in multiple state-level cybercrimes to conduct digital-espionage
in southeast Asia [41], steal proprietary information from large
tech firms such as Google and Apple [16, 53], and leak confidential
financial information in Poland and Mexico [60, 68].
Despite watering hole attacks being a key method for achieving
the initial compromise into an organization, little research has been
conducted to study how to detect, analyze, and investigate these
attacks effectively. However, having the capability of completing a
thorough postmortem analysis is desired by organizations, since
it allows them to understand the attacker’s intentions, prevent
additional damage, and provides a mechanism for building future
defenses. In this paper, we propose Mnemosyne, a system that
facilitates comprehensive internal forensic investigation on web-
based watering hole attacks.
Session 3B: Malware CCS '20, November 9–13, 2020, Virtual Event, USA787Detecting watering hole attacks and reconstructing their prove-
nance is challenging. First, there has been a significant amount
of work dedicated to attack reconstruction, with most solutions
relying on whole-system provenance tracking and attack recon-
struction [12, 18, 20, 22, 23, 25, 26, 29, 33, 39, 40, 42, 45, 48, 49, 51,
52, 59, 62, 63, 66]. These systems typically collect audit logs that
track the information-flow at the system-level and tend to rely on
low-level semantics (processes, socket IO, and system calls), which
is necessary in order for them to support as many applications
as possible. Unfortunately, existing systems’ reliance on low-level
semantics limit their capability of reconstructing sophisticated wa-
tering hole attacks. This is because capturing information at the
system level is limited in terms of its capability of understand-
ing fine-grained details related to Javascript (JS) execution within
the browser. To overcome this semantic gap, Mnemosyne collects
audit logs that capture information in terms of browser-level seman-
tics (e.g. page, script, domain, etc.). While prior browser auditing
systems exist [43, 58, 61], they require extensive modifications to
the browser itself, making deployment in a real-world scenario
difficult. In contrast, Mnemosyne relies on a browser-modification-
free, lightweight approach that takes advantage of existing debug-
ging interfaces already provided by off-the-shelf Chromium-based
browsers (e.g., Chrome, Opera, Microsoft Edge, Brave, etc.).
The second challenge in developing a system for investigating
watering hole attacks is that watering hole attacks are highly tar-
geted and during the early stages of a forensic investigation, it is
unclear which visitors are considered the true targets. To address
this challenge, we argue that simply detecting a website is com-
promised is not enough. Instead, for organizations that routinely
visit this compromised website, they need to complete a indepen-
dent and accurate investigation to determine if visiting this site
while it was compromised had any adverse effects on their own
enterprise networks. However, completing this investigation in an
independent manner is not straightforward, since the server-side
logs related to how and when the compromised website was modi-
fied are external and inaccessible to the targeted organization. To
overcome this, Mnemosyne relies on a lightweight auditing ap-
proach that passively collects audit logs during a user’s browsing
sessions. Finally, while Mnemosyne completes the investigation
in a postmortem fashion, it is still necessary to complete the in-
vestigation in a time-sensitive manner. This is because during the
investigation, the decreased system uptime can easily cost millions
of dollars [1]. Additionally, an efficient investigation that allows the
investigators to quickly identify the scope of the attack can reduce
the overall damage created by the attack. To make the investigation
as efficient as possible, Mnemosyne applies a set of differential
analysis techniques on the audit logs collected to quickly identify
which employees at the organization should be considered victims
of the attacks and which employees were unaffected by the attack.
In summary, we make the following main contributions:
• A watering hole attack investigation system. We pro-
pose Mnemosyne1, a system that is able to accurately recon-
struct the provenance and impact of sophisticated watering
hole attacks.
1The source code, datasets, and testbed of Mnemosyne will be made available to the
community.
• Browser-modification-free design. Mnemosyne does not
require browser code modifications and can therefore be
more easily deployed within users’ browsers for collecting
detailed web audit logs.
• Accurate and efficient analysis. Mnemosyne applies a
set of versioning and prioritization methods to efficiently re-
construct and analyse enterprise-level watering hole attacks.
Using seven scenarios based on real-world security incidents
involving watering hole attacks, Mnemosyne is able to iden-
tify the individuals who were victims of the attack in all of
these scenarios with efficient runtime.
2 MOTIVATING EXAMPLE & CHALLENGES
In this section, we describe an attack scenario modeled off of a
real-world watering hole campaign that showcases the challenges
that Mnemosyne addresses.
2.1 2017 ASEAN Watering Hole Attack
This case study relates to a real-world, politically-motivated cam-
paign that leveraged a watering hole attack to achieve digital surveil-
lance and espionage on employees and high-powered individuals
affiliated with the Association of Southeast Asian Nations (ASEAN),
an organization that helps to foster peace between member coun-
tries. The attack was carried out in 2017 and was recently attributed
to APT32, a nation-state threat actor that is known to carry out
cyberattacks against political enemies of the Vietnamese Govern-
ment [41]. We chose this motivating example because it clearly
demonstrates the challenges a forensic analysis will face during
postmortem analysis of complex watering hole attacks.
The attack was divided into two stages. The first stage performed
reconnaissance by collecting sensitive information related to the
user’s browser and underlying system to accurately identify if
this visitor matched the profile of the targeted victims. After a
visitor’s profile was developed, it was used to identify the targeted
visitors. Finally, the targeted visitors were exploited using social-
engineering that pursued victims to grant the attackers access to
their Gmail accounts via a malicious OAuth App.
2.2 Challenges
Next, we discuss the challenges that a forensic analyst faces when
completing an internal investigation on a sophisticated watering
hole attack and discuss the limitations of existing postmortem
analysis systems. The challenges described in this section are the
challenges faced by the targeted organization, not the organization
hosting the compromised website.
External Point-of-Compromise. During a traditional investi-
gation of a sophisticated attack, the initial point-of-compromise
occurs at an endpoint system in the enterprise’s network. The intru-
sion is usually achieved through spearphishing emails or traditional
exploitation techniques. One advantage this provides is that the
audit logs related to this attack will be accessible to the victim
organization. Unfortunately, this is not the case for watering hole
attacks, since the point-of-compromise is external, beginning at a
third-party website that is unlikely to be affiliated with the true
victim organization. This creates the challenge that the audit logs
Session 3B: Malware CCS '20, November 9–13, 2020, Virtual Event, USA788related to the compromised website and the attacker’s modifica-
tions to the site are only accessible by the website’s maintainers,
not by the forensic investigator. Due to this limitation, we found
that forensic investigators often have to fallback on internet archive
sites, such as archive.org or passiveTotal [6], to identify how the
compromised domain was modified [11, 28, 35, 36]. However, be-
cause watering hole attacks are highly targeted, the machines used
for snapshotting the web page will not match the intended victim
profile. Finally, since the forensic analyst does not know how the
web server was modified, the analyst will begin the investigation
with minimal information about the initial compromise.
Also, due to the lack of server-side logs, it is challenging to iden-
tify the dwell time, which is the time window in which the attacker
controlled the compromised website. Identifying the window-of-
compromise is necessary to ensure a comprehensive investigation,
since any visit to the compromised website within this time window
may have led to a successful attack. Without a clear window-of-
compromise, the analyst may have to review irrelevant website
traffic logs generated prior to the incident, prolonging the investi-
gation.
Semantic Gap. Another limitation is the semantic gap that ex-
ists when completing a postmortem analysis on web-based attacks
using only system-level logs. Recently, whole-system provenance
auditing has been shown to be effective at investigating sophisti-
cated attacks [20, 29, 30, 42, 48, 49]. These systems typically collect
audit logs that track the information-flow at the system-level and
rely on low-level semantics to causally connect all artifacts and re-
sources involved in the attack. However, using low-level semantics
limits reconstruction of watering hole attacks because the semantic
gap between system-level and browser based semantics prevents
a thorough understanding of JS execution. Prior work that has at-
tempted to address this limitation requires extensive modifications
to the browser itself [43, 58, 61], which makes deployment in most
enterprises difficult.
Highly Targeted. Watering hole attacks are highly targeted and
the granularity of the adversary’s targets varies with different at-
tacks. For example, watering hole attacks may only target specific
victims at an organization, specific departments of an organization,
or a set of organizations. Unfortunately, during the early stages of
an investigation, the motive of the attack is unknown and identify-
ing who is targeted by the attack and which individuals fell victim
to the attack is challenging. However, identifying the victims of
the attack is arguably the most important part of the forensic in-
vestigation, since it allows the forensic analyst to determine which
user sessions they should prioritize. Also, when the forensic ana-
lyst spends time investigating logs related to untargeted users, the
investigation is prolonged.
3 MNEMOSYNE
3.1 Overview
Mnemosyne is a forensic analysis engine that completes a post-
mortem analysis from within the targeted organization with mini-
mal external information. The only information that Mnemosyne
requires is the domain name of the compromised website. This
design choice was made based on the fact that during the early
Figure 1: Overview of Mnemosyne’s architecture.
stages of the investigation, information related to malicious do-
mains used by the adversaries or the modifications made to the
compromised domain will be limited and potentially inaccessible
to the forensic investigator. Also, the audit logs related to how the
website was compromised are external, and in some real-world
cases, communication between all entities involved was limited [7].
An overview of our system is provided in Figure 1, which il-
lustrates its three essential components. The first component is
the browser auditor daemon, which is deployed on each endpoint
system at an organization to monitor web-browsing activities. The
auditor daemon passively collects audit logs throughout the user’s
browsing sessions without the need to alter the browser. Next, the
audit logs from each endpoint are collected and stored on a backend
server responsible for maintaining security auditing information.
The next module of Mnemosyne is the versioning system that
tracks and analyzes the external website’s behavior. The first phase
in the analysis is the domain versioning system, which works with
the browser-level audit logs to determine when the website was
compromised and what modifications the adversaries made to the
website. Specifically, the versioning system reconstructs how the
compromised website changed over time. Notably, our goal is not
to create a single version each time a minor change is observed in
the underlying audit logs. Instead, our versioning system helps the
forensic analyst quickly identify the window-of-compromise, or
the version that includes the adversary’s modifications to the com-
promised website that introduced some attack-controlled content.
Next, Mnemosyne provides a version-prioritization approach
that prioritizes versions based on their likelihood to be the version
that truly represents the window-of-compromise. Developing a
prioritization scheme is essential because prior studies have shown
that the dwell time can be excruciatingly long, in some cases lasting
over 53 months [32]. Meanwhile, benign updates, which will lead to
Mnemosyne generating new versions, will also occur, which leads
to a challenge in identifying which domain-version actually repre-
sents the window of compromise and which versions are related to
the natural evolution of the website. The last stage of Mnemosyne’s
analysis is its user-level analysis module, which takes a suspicious
domain version and identifies how this domain version behaved
differently based on the user that was visiting the site.
3.2 Threat Model and Assumptions
We envision Mnemosyne being deployed in enterprise organiza-
tions that have a high risk of being targeted by a sophisticated,
In-browser AuditIn-browser AuditVersionReconstructionVersionPrioritizationUser-LevelDifferential AnalysisVersioning SystemV0V1V2Vk...Audit EventsDatabaseUnaffectedUsersTargetedUsersVictimsIn-browser Audit§3.5§3.4§3.6Session 3B: Malware CCS '20, November 9–13, 2020, Virtual Event, USA789Object Type