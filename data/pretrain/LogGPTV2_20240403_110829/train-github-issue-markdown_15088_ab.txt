    class TabItem {
    	const TabItem({this.title, this.icon});
    	final String title;
    	final IconData icon;
    }
    const List tabItems = const [
    	const TabItem(title: 'A', icon: Icons.pages),
    	const TabItem(title: 'B', icon: Icons.pages),
    	const TabItem(title: 'C', icon: Icons.pages),
    	const TabItem(title: 'D', icon: Icons.pages),
    ];
    class MyApp extends StatelessWidget {
    	@override
    	Widget build(BuildContext context) {
    		return new MaterialApp(
    			title: 'Flutter Demo',
    			theme: new ThemeData(
    				primarySwatch: Colors.blue,
    			),
    			home: new MyHomePage(title: 'Flutter Demo Home Page'),
    		);
    	}
    }
    class MyHomePage extends StatefulWidget {
    	MyHomePage({Key key, this.title}) : super(key: key);
    	final String title;
    	@override
    	_MyHomePageState createState() => new _MyHomePageState();
    }
    class _MyHomePageState extends State {
    	PageController _tabController;
    	int _getIndex(){
    		return this._tabController.hasClients ? this._tabController.page.toInt() : 0;
    	}
    	@override
    	void initState() {
    		super.initState();
    		this._tabController = new PageController(keepPage: true);
    		this._tabController.addListener(this._onTabIndexChanged);
    	}
    	@override
    	void dispose() {
    		this._tabController.removeListener(this._onTabIndexChanged);
    		this._tabController.dispose();
    		super.dispose();
    	}
    	void _onTabItemClick(int index){
    		this._goPage(index);
    	}
    	void _goPage(int index){
    		this._tabController.jumpToPage(index);
    	}
    	void _onTabIndexChanged(){
    		setState((){
    		});
    	}
    	@override
    	Widget build(BuildContext context) {
    		int page = this._getIndex();
    		return new Scaffold(
    			appBar: new AppBar(
    				title: new Text(widget.title),
    			),
    			bottomNavigationBar: new BottomNavigationBar(
    				items: tabItems.map((TabItem item) {
    					return new BottomNavigationBarItem(
    						title: new Text(item.title),
    						icon: new Icon(item.icon),
    					);
    				}).toList(),
    				onTap: this._onTabItemClick,
    				currentIndex: page,
    				type: BottomNavigationBarType.fixed,
    			),
    			body: new PageView(
    				physics: const NeverScrollableScrollPhysics(),
    				controller: this._tabController,
    				children: [
    					new PageA(),
    					new PageB(),
    					new PageC(),
    					new PageD(),
    				],
    			)
    		);
    	}
    }
    class PageA extends StatefulWidget {
    	PageA({Key key}) : super(key: key);
    	@override
    	_PageAState createState() => new _PageAState();
    }
    class _PageAState extends State with AutomaticKeepAliveClientMixin {
    	@override
    	bool get wantKeepAlive{
    		return true;
    	}
    	@override
    	Widget build(BuildContext context) {
    		super.build(context);
    		return new Center(
    			child: new Text("A"),
    		);
    	}
    }
    class PageB extends StatefulWidget {
    	PageB({Key key}) : super(key: key);
    	@override
    	_PageBState createState() => new _PageBState();
    }
    class _PageBState extends State with AutomaticKeepAliveClientMixin {
    	@override
    	bool get wantKeepAlive{
    		return true;
    	}
    	@override
    	Widget build(BuildContext context) {
    		super.build(context);
    		return new Center(
    			child: new Text("B"),
    		);
    	}
    }
    class PageC extends StatefulWidget {
    	PageC({Key key}) : super(key: key);
    	@override
    	_PageCState createState() => new _PageCState();
    }
    class _PageCState extends State with AutomaticKeepAliveClientMixin {
    	@override
    	bool get wantKeepAlive{
    		return true;
    	}
    	@override
    	Widget build(BuildContext context) {
    		super.build(context);
    		return new Center(
    			child: new Text("C"),
    		);
    	}
    }
    class PageD extends StatefulWidget {
    	PageD({Key key}) : super(key: key);
    	@override
    	_PageDState createState() => new _PageDState();
    }
    class _PageDState extends State with AutomaticKeepAliveClientMixin {
    	@override
    	bool get wantKeepAlive{
    		return true;
    	}
    	@override
    	Widget build(BuildContext context) {
    		super.build(context);
    		return new Center(
    			child: new Text("D"),
    		);
    	}
    }