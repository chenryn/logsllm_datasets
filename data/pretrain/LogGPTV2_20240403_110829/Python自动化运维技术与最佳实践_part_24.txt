## Page 192
第10章集中化管理平台Saltstack详解171
10.5.1pillar的定义
1.主配置文件定义
Saltstack默认将主控端配置文件中的所有数据都定义到pillar中，而且对所有被控主机
开放，可通过修改/etc/salt/master配置中的pillar_opts:Ture或False来定义是否开启或禁用
这项功能，修改后执行salt*pillar.data 来观察效果。图10-12为pillar_opts:Ture的返回结
果，以主机“SN2013-08-022”为例，执行 salt‘SN2013-08-022"pillar.data
p11.220-m-.1s-e--Naoo
dush.eode:
1
conf.file:
/etc/salt/aster
conl
Fig.dir:
Ot
False
Folse
图10-12主机所有pillar信息（部分截图）
2.SLS文件定义
pillar支持在sls文件中定义数据，格式须符合YAML规范，与 Saltstack的 state组件十
分相似，新人容易将两者混淆，两者文件的配置格式、人口文件top-sls都是一致的。下面详
细介绍pillar使用sls定义的配置过程。
---
## Page 193
172第二部分高级篇
（1）定义pillar的主目录
修改主配置文件/etc/salt/master的 pillar_roots 参数，定义pillar的主目录，格式如下：
pillar_roots:
: 0seg
= /srv/p11lar
同时创建 pillar目录，执行命令：install-d/srv/pillar
（2）定义人口文件top.sls
人口文件的作用一般是定义pillar的数据覆盖被控主机的有效城范围，“*”代表任意主
机，其中包括了一个data.sls文件，具体内容如下：
[ /srv/pillar/top.sls ]
base:
'*' :
- dat.a
[ /srv/pillar/data.sls 1
appnane: website
saxconn: 30000
maxnen1 6G
(3）校验pillar
通过查看“N2013-08-022”主机的pillar数据，可以看到多出了data.sls数据项，原因是
时可以看到我们定义的数据，如图10-13所示，如果结果不符合预期，可以尝试刷新被控主
机pillar 数据，运行 salt* saltutil.refresh_pillar 即可。
1779-89-5T07N9
31--
website
Floa
图10-13返回主机pillar的信息
---
## Page 194
第10章集中化管理平台Saltstack详解173
10.5.2pilar的使用
完成pillar配置后，接下来介绍使用方法。我们可以在state、模板文件中引用，模板格
式为“{{pillar变量1）”，例如：
[{ pi11ar [*appname*]1) (级字典)
[{ pi1lar[*fow*] [*maxoonn*]1K=级字典) 或1[ salt[*pi1lar-get*1(*fowt *maxconn*, (1) 11
Python API格式如下：
[,uuooxeu,] [,nog,]xeTd
pi1lar get(* flow:appname′,(1)
1.操作目标主机
见10.5.1节.通过-I选项来使用pillar来匹配被控主机：
salt -1*appname:vebsite* test,ping
SN2013-08021 :
True
1220-80-10289
True
2.结合grains处理数据的差异性
首先通过结合grains 的id信息来区分不同id的 maxcpu的值，其次进行引用观察匹配的
信息，延伸“10.5.1 pilar 的定义”的例子，将data.sls 修改成如下形式，其中，“if…else
endfi”为jinja2的模板语法，更多信息请访问jinja2官网语法介绍，网址为 hp:/jinja.pocoo.
org/docs/templates/。
appname: website
flow1
maxconn: 30000
maxmen1 6G
maxcpu: 8
[4 else )
(t endif )
maxcpu1 4
通过查看被控主机的pilar数据，可以看到maxcpu的差异，如图10-14所示。
---
## Page 195
174第二部分高级篇
5N2013-08-021:
flom:
4
roote5N2013-8-820-]#saltSN2013-8-822pi11ar.dataf1ow
6c
SN2013-08-022:
fLow:
maxccorn
38000
8
66
图10-14不同主机产生的pillar数据差异
10.6state介绍
stale是 Saltstack最核心的功能，通过预先定制好的 sls（salt state file）文件对被控主机进
行状态管理，支持包括程序包（pkg）、文件（file）、网络配置（network）、系统服务（service）、
系统用户（user）等，更多状态对象见http://docs.saltstack.com/ref/states/allindex.html。
10.6.1state的定义
state 的定义是通过sls文件进行描述的，支持YAML语法，定义的规则如下：
:GI
sstate:
- Sstate: states
其中：
口SID，定义state的名称，通常采用与描述的对象保持一致的方法，如apache、nginx等；
 SState,须管理对象的类型，详见 http://docs.saltstack.com/ref/states/all/index.html;
Sstate:states，定制对象的状态。
官网提供的示例如下：
---
## Page 196
第10章集中化管理平台Saltstack详解175
1 apache:
2
pkg:
- installed
service:
- running
:eatnbaa -
- pkg: apache
上述代码检查apache软件包是否已安装状态，如果未安装，将通过yum或apt进行安
装；检查服务apache进程是否处于运行状态。下面详细进行说明：
第1行用于定义state的名称，此示例为apache，当然也可以取其他相关的名称。
第2行和第4行表示state声明开始，使用了pkg和service这两个状态对象。pkg使用
系统本地的软件包管理器（yum或apt）管理将要安装的软件，service管理系统守护进程。
第3行和第5行是要执行的方法。这些方法定义了apache软件包和服务目标状态，此示
例要求软件包应当处于已安装状态，服务必须运行，如未安装将会被安装并启动。
第6行是关键字require，它确保了apache服务只有在成功安装软件包后才会启动。
象：watch：在检查某个state发生变化时运行此模块。
10.6.2state的使用
state的入口文件与pillar一样，文件名称都是top.sls，但state要求sls文件必须存放在
saltstack base定义的目录下，默认为/srv/salt。state 描述配置.sls支持jinjia 模板、grains 及
pillar 引用等，在state的逻辑层次定义完成后，再通过 salt“*state.highstate 执行生效。下
面扩展10.5.1节定义的范例，结合grains与pillar，实现一个根据不同操作系统类型部署
apache环境的任务。
1.定义pillar
[ /srv/pillar/top.sls ]
base:
- apache
在top.sls中引用二级配置有两种方式：一种是直接引用，如本示例中直接引用apache.
sls；另一种是创建apache目录，再引用目录中的init.sls文件，两者效果是一样的。为了规
---
## Page 197
176第二部分高级篇
范起见，笔者建议采用二级配置形式，同理，state的top.sls也采用如此方式。
#mkidr /srv/pi1lar/apache
创建 apache 目录
[ /srv/pillar/apache/init.sls 
pkgs 1
($if grains[*os_famlly*] == *Debian* )
($elif grains *os_fanily*] == *Redat' $)
apache: apache2
( elif grains[*os′] -= *Arch* )
apache: httpd
apache: apache
($ endif $)
测试pillar数据，执行 salt“pillar.data pkgs，结果返回以下信息，说明配置已生效。
SN2013-08021:
pkgs:
apache:
httpd
2.定义 state
[ /srv/salt/top.sls 】
base:
aqoede -
[ /srv/salt/apache/init.sls ]
apache1
pkg:
- installed
{{[,eqoede,1 I,sbxd,1xeTTtd 11 :aueu -
service.running:
= nane: (( p111ax[*pkgs*][*apacbe*]]]
- require:
[1[, ouoede,1 [, sbxd,1zeT11d 11:6xd -
在配置中，（（pillar[pkgs[apache’]1}将引用匹配到操作系统发行版对应的pillar 数
据，笔者的环境为CentOS，故将匹配为httpd，检查目标主机是否已经安装，没有则进行
安装（yum-y install httpd），同时检查apache 服务是否已经启动，没有则启动（/etc/initd
httpd start) 。
---
## Page 198
第10章集中化管理平台Saltstack详解177
3.执行state
执行state及返回结果信息见图10-15。
[root
K2813-08-021:
Chonges:
httpd:nw:2.2.15-29.e16.centos
ervice
Started
vice httpd
httpd:Tne
图10-15执行state的结果信息
从图10-15中可以看出，结果返回两种对象类型结果，分别为pkg与service，执行的结
果是自动部署apache2.2.15环境并启动服务。
10.7示例：基于Saltstack实现的配置集中化管理
本示例实现一个集中化的Nginx配置管理，根据业务不同设备型号、分区、内核参数
的差异化，动态产生适合本机环境的Nginx配置文件。本示例结合了Saltstack的grains、
grains_module、pillar、state、jinja (template)等组作。
10.7.1环境说明
具体对照表10-1环境说明表，此处省略。
10.7.2主控端配置说明
master主配置文件的关键配置项如下：
[/etc/salt/master】配置片段）
nodegroups:
web1gr0up: *L85N2012-07010, Sx201207-011, SN201207012*
---
## Page 199
178第二部分高级篇
veb2group: *LeSN2013-08-021, SN2013-08022*
file_roots:
base1
tes/△zs/ -
pillar_root8:
base1
- /srv/pi1lar
定义的pillar、module api、state目录结构，如图10-16所示。
plilar
run.Py
top.sesve
web2server.s1s
config-vy
nginx
top.sls
图10-16示例目录结构
使用 Python 编写 grains_module，实现动态配置被控主机 grains 的 max_opcn_file 键，值
为ulimit n 的结果，以便动态生成Nginx.conf 中的 worker_rlimit_nofile、worker_connections
参数的值，具体代码如下：
Import os, sys, commands
def NginxGrains () :
return Nginx config grains value
  +
{1 = surex6
max_open_file=65536
try:
getulimit=commands.getstatusoutput(*source /etc/profile;ulimit -n*)
except Exception,e1
if getulimit[0]==0:
pass
max_open_fi1e=int (getu1init [1])
grains [ *max_open_file′] = max_open_51e
---
## Page 200
第10章集中化管理平台Saltstack详解179
return grains
同步grains模块，运行：
salt *** saltuti1.sync_a11
剧新模块（让minion编译模块），运行：
salt *** sy8.reload_module8
验证max_open_file key 的 key 操作命令见图 10-17。
S2013-8-021:
n
N2812-07-11:
pon_fie:65535
max.open_file：65535
图10-17校验 max_open_file key 的 key 信息
10.7.3配置pillar
本示例使用分组规则定义pillar，即不同分组引用各自的sls属性，使用match属性值进
行区分，除了属性值为 nodegroup外，还支持grain、pillar等形式。以下是使用grain作为区
分条件例子：
dev:
'os:Debian′:
- matchi grain
829A10S -
本示例通过/etc/salt/master中定义好的组信息，如web1group与 web2group与业务组，
分别引用 web1server.sls 与web1server.sls，详见/srv/pillar/top.sls 中的内容：
[ /srv/pillar/top.sls ]
base:
:dnoxbqex
- match: nodegroup
- veblserver
---
## Page 201
180第二部分高级篇
:dno26zq9x
- match: nodegroup
定义私有配置。本示例通过pillar来配置web_root的数据，当然，也可以根据不同需求
进行定制，格式为python字典形式，即“key:value"。
[ /srv/pillar/web1server.sls ]
ngInx1
root: /wws
[ /srv/pillar/web2server.sls 1
ng1.nx:
root: /data
通过查看不同分组主机的pillar信息来验证配置结果，如图10-18所示。