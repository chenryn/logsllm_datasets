D e f i n i t i o n 2
( C D H+ ) . The CDH+ assumption for
GrpGen holds if for G = (p, G1, G2, g1, g2, GT , e) ←$ GrpGen(1λ),
and for a, b ←$ Zp, for every p.p.t. adversary given (G, ga
2 , gb
1),
the probability that it outputs gab
1
is negligible in λ.
1 , ga
The next assumption implies the security of ElGamal encryp-
tion in both groups G1 and G2:
D e f i n i t i o n 3
( S X D H ) . The Symmetric external
Diﬃe-Hellman assumption (SXDH) holds for GrpGen if for
G = (p, G1, G2, g1, g2, GT , e) ←$ GrpGen(1λ), a, b, c ←$ Zp and
for both i ∈ {1, 2}, p.p.t. adversaries only distinguish (G, ga
i , gb
i ,
i ) from (G, ga
gab
i ) with advantage negligible in λ.
i , gb
i , gc
ElGamal Encryption. We deﬁne encryption for messages
in G1 from an asymmetric bilinear group G = (p, G1, G2, g1,
g2, GT , e) and show that it is randomizable.
KeyGen(G, i): Choose d ←$ Zp and deﬁne P := gd
1 . Return
(pk = P, dk = d).
Encrypt(P, M ; r): Using randomness r ∈ Zp, output c =
(c1 = gr
1, c2 = M · P r).
Decrypt(d, c = (c1, c2)): Output M = c2 · c
Random(P, c = (c1, c2); r(cid:48)): Using randomness r(cid:48) ∈ Zp, out-
−d
1 .
put c(cid:48) = (c1 · gr(cid:48)
1 , c2 · P r(cid:48)
).
This scheme is IND-CPA secure assuming hardness of DDH in
G1, which follows from SXDH. It is perfectly randomizable as
Random(pk, Encrypt(pk, M ; r); r(cid:48)) = Encrypt(pk, M ; r + r(cid:48)).
Groth-Sahai Proofs. Groth-Sahai (GS) proofs [32] allow
us to prove satisﬁability of equations involving group ele-
ments from G1 or G2 and scalars. We will use them to prove
consistency and knowledge of encryptions. On input a bilinear
group G, Setupg s outputs a common reference string (CRS)
crs ∈ G4
2. The CRS is used to commit to group elements
X ∈ G1, which we denote by C1(X), and elements Y ∈ G2,
denoted by C2(Y ). Moreover, C(cid:48)
i(x) denotes a commitment
to a scalar, which can be made in G1 (i = 1) and G2 (i = 2).
The GS system lets us prove that committed values satisfy
certain equations.
1 × G4
Under a CRS computed via Setupg s, commitments are
perfectly binding and the proofs are perfectly sound. That
is, the values uniquely determined by the commitments sat-
isfy the proved equation. Moreover, the committed values
can be extracted using an extraction trapdoor ξ that can
be computed together with the CRS. We denote this by
(crs, ξ) ←$ Setup(x)
g s (G).
There is an alternative CRS-generation algorithm Setup(h)
g s ,
which outputs (crs(cid:48), td). Commitments made under crs(cid:48) con-
tain no information about the committed value and the
trapdoor td allows simulation of proofs. As CRSs output by
Setupg s and Setup(h)
g s are indistinguishable under SXDH, GS
proofs are computationally zero-knowledge. Moreover, GS
proofs are randomizable [27], that is, given commitments and
proofs, one can (without knowing the witness) create a fresh
set of commitments and proofs.
3.2 Signatures on Randomizable Ciphertexts
The primitive introduced by Blazy et al. [12] consists of
the following algorithms: Setup, on input the security param-
eter 1λ, outputs the parameters (such as the bilinear group);
SKeyGen outputs a pair of signing key and veriﬁcation key
(sk, vk), EKeyGen outputs a pair of encryption and decryp-
tion key (pk, dk). SKeyGen together with Sign and Verify
constitutes a signature scheme and EKeyGen with Encrypt
and Decrypt a public-key encryption scheme.
As the signature and the encryption scheme are used to-
gether, these algorithms have extensions Sign+ and Verify+,
which additionally take the encryption key pk as input; and
Encrypt+, Decrypt+, which also take the veriﬁcation key vk.
Randomizability. The main feature of signatures on ran-
domizable ciphertexts (SRC) is an algorithm Random+, which
takes pk, vk, a ciphertext c under pk and a signature σ on
c valid under vk, and outputs a re-randomization c(cid:48) of c
together with a signature σ(cid:48), valid on c(cid:48).
An output of Random+ is distributed like a fresh encryp-
tion of the plaintext of c and a fresh signature on it; for-
mally, for all messages m, (pk, dk) ∈ [EKeyGen(G)], (vk, sk) ∈
[SKeyGen(G)], c ∈ [Encrypt+(pk, vk, m)], σ ∈ [Sign+(sk, pk, c)],
the following two random variables are equally distributed:
(cid:104)
(cid:48)
(cid:48)
, σ
(c
) ←$ Random+(pk, vk, c, σ) : (c
(cid:48)
(cid:105)
(cid:20) c(cid:48) ←$ Encrypt+(pk, vk, m);
, σ
)
(cid:48)
σ(cid:48) ←$ Sign+(sk, pk, c(cid:48))
≈
(cid:21)
)
.
(cid:48)
(cid:48)
, σ
: (c
Unforgeability. Unforgeability of signatures on random-
izable ciphertext is deﬁned via the following experiment:
The challenger computes a signature key pair and an en-
cryption key pair (sk, vk), (dk, pk) and runs the adversary on
(vk, pk, dk). It is also given access to an oracle Sign+(sk, pk,·),
which it can query adaptively on ciphertexts c1, . . . , cq of its
choice. Finally, the adversary outputs a pair (c∗, σ∗) and wins
if Verify+(vk, pk, c∗, σ∗) = 1 and m = Decrypt+(dk, vk, c∗) is
diﬀerent from all mi := Decrypt+(dk, vk, ci).
3.3 Our SRC Construction
At a high level, we need a construction that enforces our
restricted message space and is malleable enough to be re-
randomized but no more. The ﬁrst requirement ensures that
voters can only submit valid ballots, while the second gives
us privacy via randomization while preventing copying or
tampering attacks. Speciﬁcally, we use GS proofs to ensure
validity and prevent copying or producing ballots related to
those of another user. We use signatures to ensure integrity,
meaning a randomizer cannot change the ballot contents.
Asymmetric Waters signature scheme. Blazy et al. [12]
deﬁne a variant of Waters’ signature scheme [47] for asym-
metric groups that is perfectly randomizable and which they
prove secure under the CDH+ assumption.
Setup(1λ, 1k): To sign messages m = (m1, . . . , mk) ∈ {0, 1}k,
generate (p, G1, G2, g1, g2, GT , e) ←$ GrpGen(1λ), choose
, deﬁne F(m) :=
z ←$ G1, u = (u0, . . . , uk) ←$ Gk+1
. Output pp := (p, G1, G2, GT , e, g1, g2, z, u).
u0
1 , X2 = gx
2 ,
Y = zx; output the public key vk = (pp, X1, X2) and
the secret key sk = (pp, Y ).
SKeyGen(pp): Choose x ←$ Zp, deﬁne X1 = gx
(cid:81)k
i=1 umi
Sign(sk = (pp, Y ), m; s): For randomness s ∈ Zp, return the
1
i
signature σ deﬁned as
(cid:0)σ1 = Y · F (m)s, σ2 = gs
1, σ3 = gs
2
(cid:1) .
Verif(vk = (pp, X1, X2), m, σ): Output 1 if both of the
following hold and 0 otherwise:
e(σ1, g2) = e(z, X2) · e(F(m), σ3)
e(σ2, g2) = e(g1, σ3)
Random((pp, X1, X2), F, σ; s(cid:48)): For randomness s(cid:48) ∈ Zp, out-
put σ(cid:48) = (σ1 · F s(cid:48)
, σ2 · gs(cid:48)
1 , σ3 · gs(cid:48)
2 ).
Note that for Random it suﬃces to know the hash F = F(m)
of the signed message. The scheme is perfectly randomiz-
able, as for any ((pp, X1, X2), (pp, Y )) ∈ [SKeyGen(pp)] and
m, s, s(cid:48) we have Random((X1, X2),F(m), Sign(Y, m; s), s(cid:48)) =
Sign(Y, m; s + s(cid:48)).
R e m a r k 1. Blazy et al. [12] show that their signature
scheme also satisﬁes a (stronger) EUF-CMA notion, where
the adversary’s signing queries are of the form (m, R, T ) and
if e(T, g2) = e(R, X2) then the oracle returns an additional
signature element σ4 = Rs.
We will combine ElGamal encryption, Groth-Sahai proofs
and Waters signatures to create an SRC scheme. Our con-
struction extends that of [12], so that it immediately yields
an RCCA-secure encryption scheme (deﬁned below) and
ultimately a strongly receipt-free e-voting scheme.
Our SRC scheme. Our scheme is deﬁned for a polynomial-
size message space M = {0, 1}k, that is, we assume k to
be logarithmic in the security parameter. Messages m are
encrypted as ElGamal ciphertexts of F(m). Decryption works
by decrypting a ciphertext to F and then looking for m with
F = F(m). We deﬁne a function H and add a third ciphertext
element c3 = H(vk)r, which will tie the ciphertext to the
veriﬁcation key for which it is produced.
We moreover add Cm, Groth-Sahai commitments to the
message bits, and a commitment CT to X r
1 , which is needed
for the security reduction (it corresponds to T from Re-
mark 1). Finally, we add GS proofs which show consistency
of these commitments, and consistency of the additional
ciphertext element c3. In more detail, in order to show a com-
ponent Cmi of Cm contains a bit, we require commitments
in both groups (C1,m,i, C2,m,i) and proofs π(cid:48)
i. A commitment
Cr to the randomness r is used to prove consistency of the
values c1 with Cr, c2 with Cr and {Cm,i}k
i=1, c3 with Cr, as
well as CT with X1 and Cr.
Now, given ciphertext elements c1 = gr
1 and c2 = F(m)·P r,
the crucial observation is that, due to the interoperability
of ElGamal encryption and Waters signatures, a signer can
produce an encryption of a signature on the plaintext, without
knowing the latter: setting σ1 = cs
2 =
Y · F(m)s · P rs yields an encryption under P of the ﬁrst
Waters signature element Y · F(m)s. This is completed to
a full signature by (gs
2). Finally, in order to enable full
randomization of ciphertext/signature pairs, we also include
P s in the signature.
1 and σ2 = Y · cs
1 = grs
1, gs
Let Setup (for Waters signatures), Setupg s (for Groth-Sahai
proofs) and KeyGen (for ElGamal encryption) be deﬁned as
above, and H : {0, 1}(cid:63) → G1 be deﬁned as
H(x) := h1 · hH(cid:48)(vk)
for h = (h1, h2) ∈ G2
1 and a collision-resistant hash function
H(cid:48) : {0, 1}(cid:63) → Zp. Our scheme is given in Figure 2. It is
based on the scheme from [12], to which we add the crucial
ciphertext elements c3 and πV .
(1)
2
Correctness follows, as Verify+ checks, via the pairings, that
σ is of the form in (2) for some s. From a ciphertext/signature
pair (c, σ) with randomness (r, s), Random+ creates a fresh
pair (c(cid:48), σ(cid:48)) with randomness r + r(cid:48), s + s(cid:48) (and with random-
ized proofs). We omit the speciﬁc structure of the proofs in
π as they will not be relevant to the rest of this work.
T h e o r e m 1. The SRC scheme (Setup, EKeyGen, SKeyGen,
Encrypt+, Decrypt+, Sign+, Verify+, Random+) deﬁned in Fig-
ure 2 is unforgeable under the CDH+ assumption.
R e m a r k 2. We will prove a stronger statement, namely
that our SRC scheme is unforgeable even when the adversary
only needs to output a “partial” forgery (c1, c2,{C1,m,i, C2,m,i},
Cr, πr, πm), (σ1, σ2, σ3, σ4), i.e., it need not contain c3, CT , πT ,
πV and σ5.
Moreover, note that one can also decrypt ciphertexts using
the extraction trapdoor ξ for GS proofs to recover m from Cm,
sidestepping the ineﬃcient hash inversion. We let EKeyGen(x)
denote key generation that returns ξ instead of dk.
P ro o f . The proof is by reduction from unforgeability of
Waters signatures. The reduction obtains a veriﬁcation key
vk including parameters pp. It simulates EKeyGen by run-
ning (crs, ξ) ←$ Setup(x)
g s (G), (P, d) ←$ KeyGen(G, 1) and choos-
ing h ←$ G2
1, and runs the adversary on vk, pk := (pp, crs, h, P )
and dk := d. If the adversary queries a signature on a valid
tuple c = (c1, c2, c3, C, π), the reduction uses ξ to extract m
and T = X r
1 from C (note that by soundness of π, we have
m = Decrypt+(dk, vk, c)). The reduction makes a special
query, as deﬁned in Remark 1, (m, c1, T ) to its signing oracle