might decrease the accuracy of the timestamps.
The data-collection application was installed on a single laptop with no net-
work connection and with an external keyboard. We identiﬁed keyboard selec-
tion as another potential confounding factor (see Section 3.2). If subjects used
diﬀerent keyboards, the diﬀerence might aﬀect their keystroke times. We con-
trol for the potential confounding factor by using one keyboard throughout the
experiment.
4.3 Running Subjects
We recruited 51 subjects, many from within the Carnegie Mellon Computer
Science Department, but some from the university at large. We required that
subjects wait at least 24 hours between each of their 8 sessions, so each session
was recorded on a separate day (ensuring that some day-to-day variation existed
within our sample). All 51 subjects remained in the study, contributing 400
passwords over the 8 sessions.
Our sample of subjects consisted of 30 males and 21 females. We had 8 left-
handed and 43 right-handed subjects. We grouped ages by 10-year intervals. The
median group was 31–40, the youngest group was 11–20, and the oldest group
was 61–70. The subjects’ sessions took between 1.25 minutes and 11 minutes,
with the median session taking 3 minutes. Subjects took between 9 days and 35
The Eﬀect of Clock Resolution on Keystroke Dynamics
337
0
0
2
0
8
1
0
6
1
0
4
1
0
2
1
0
0
1
)
s
m
i
(
s
e
c
n
e
a
L
t
n
w
o
d
y
e
K
−
n
w
o
d
y
e
K
5
10
15
20
25
30
35
40
45
50
Subject
Fig. 2. The absence of horizontal bands demonstrates that the high-resolution clock has
a resolution of less than 1 millisecond (200 microseconds, speciﬁcally). The keystrokes
are the same as in Figure 1, but the latencies in this ﬁgure are based on the high-
resolution clock.
days to complete all 8 sessions. The median length of time between the ﬁrst and
last session was 23 days.
5 Derived Clock Resolutions
The second step in our investigation was to use the high-resolution data to
reconstruct the data that would have been collected with lower-resolution clocks.
We developed a procedure to derive the timestamp of a low-resolution clock from
the corresponding timestamp of a high-resolution clock.
First, we examine the keydown–keydown latencies based on the high-resolution
timestamps. The latencies are shown in Figure 2. Compare these latencies to the
equivalent latencies from Figure 1. Whereas the horizontal bands in Figure 1 re-
veal that the Windows-event clock cannot capture any timing variation smaller
than 15.625 milliseconds, the absence of such bands in Figure 2 demonstrates that
very subtle variations (smaller than 1 millisecond) can be captured by the high-
resolution clock.
Next, to determine what would have happened if the data had been collected
with a lower-resolution clock, we need to artiﬁcially decrease the resolution of
this clock. Consider how timestamps are normally assigned to keystroke events:
1. The operating system is notiﬁed of the pending key event by an interrupt
from the keyboard controller.
2. The operating system reads the key event from the keyboard device into
3. During the handling of the key event, the operating system queries a clock
memory.
for the current time.
4. The timestamp returned by the clock is included in the description of the
keystroke event and is delivered to any applications waiting on the event.
338
K. Killourhy and R. Maxion
)
s
m
i
(
s
e
c
n
e
a
L
t
n
w
o
d
y
e
K
−
n
w
o
d
y
e
K
0
0
2
0
8
1
0
6
1
0
4
1
0
2
1
0
0
1
5
10
15
20
25
30
35
40
45
50
Subject
Fig. 3. The presence of horizontal bands 15 ms apart suggests that the derived 15 ms
clock exhibits the same behavior as a real clock with a 15 ms resolution. The keystrokes
are the same as in Figures 1 and 2, but the derived 15 ms clock was used to calculate
the latencies. The bands resemble those of the real 15.625 ms clock in Figure 1, but
without double bands because the 15 ms clock resolution has no fractional part being
rounded to a whole millisecond.
For example, if we have a clock with a resolution of 15 ms (i.e., it is updated
every 15 ms), then the timestamp returned by the clock will be divisible by 15
ms. Speciﬁcally, it will be the largest multiple of 15 ms smaller than the actual
time at which the clock was queried. In general, if the clock was queried at time
thi-res, and we want to reproduce the behavior of a lower-resolution clock (with
a resolution of r), the low-resolution timestamp would be
where (cid:3)x(cid:4) is the largest integer smaller than x (ﬂoor function).
tlo-res ← (cid:3)thi-res/r(cid:4) × r
Finally, with this formula and the high-resolution data, we can derive the
timestamps that would have been collected with lower-resolution clocks. For
instance, Figure 3 shows keystroke latencies calculated from a clock with a de-
rived 15 ms resolution. Note the similarity to Figure 1, which shows latencies
calculated from a real Windows-event clock with a 15.625 ms resolution. (The
fractional part of the real clock’s resolution accounts for the slight diﬀerences.)
One limitation of this procedure is that we can only derive clock resolutions
that are evenly divisible by that of our high-resolution clock. This criteria allows
the small but non-zero inaccuracy of our high-resolution clock to be absorbed into
the inaccuracy of the lower-resolution clock. For instance, we should be able to
accurately derive a 1 ms clock resolution since 1 ms is evenly divisible by 200 mi-
croseconds (the resolution of the high-resolution clock). However, we could not
accurately derive a 1.5 ms clock resolution (or a 15.625 ms resolution) because it is
not evenly divided. Regardless of this limitation, the accuracy of results obtained
with these derived clock resolutions will be established by comparing detector per-
formance on derived 15 ms resolution data to that on the 15.625 ms resolution
Windows-event clock data. We derive data at the following 20 clock resolutions:
The Eﬀect of Clock Resolution on Keystroke Dynamics
339
Milliseconds: 1 2 5 10 15 20 30 50 75 100 150 200 500 750
Seconds:
1 2 5 10 15 30
The speciﬁc resolutions were chosen arbitrarily, but with the intent of includ-
ing a range of typical values (on the ﬁrst line), and a range of extremely low-
resolution values (on the second line) in order to identify the point at which
detector performance degrades completely. In total, we have data at 22 diﬀerent
clock resolutions: the 20 derived clocks, the high-resolution clock, and the 15.625
ms resolution Windows-event clock.
6 Detector Implementation
The third step in our investigation was to create detectors to test using our
data. We identiﬁed three diﬀerent types of detector from the literature, and
implemented a detector of each type:
1. a mean-based detector,
2. a nearest-neighbor detector, and
3. a multilayer-perceptron detector.
By ensuring that we have diversity in the set of detectors we evaluate, we can
examine whether or not an observed eﬀect is speciﬁc to one type of detector or
more generally true for a range of detectors.
6.1 Detector Overview
We constrained our attention to detectors that behave similarly in terms of their
input and output. For instance, each of our detectors must analyze password-
timing data, and aims to discriminate between a legitimate user and an impostor.
Each of the detectors expects the password data to be encoded in what is called
a password-timing vector. A password-timing vector is a vector of hold times
and intervals. A hold time is the diﬀerence between the key-press timestamp
and the key-release timestamp for the same key. An interval time is the (signed)
diﬀerence between the key-release timestamp of the ﬁrst key in a digram and
the key-press timestamp of the second key.
The password-timing vector is 21 elements long for the password we chose
(.tie5Roanl). Each element is either a hold time for one of the 11 keys in the
password (including the Return key), or the interval between one of the 10
digrams, arranged as follows:
Index Element name
Interval(period-t)
Interval(t-i)
1 Hold(period)
2
3 Hold(t)
4
5 Hold(i)
...
19 Hold(l)
20
21 Hold(Return)
...
Interval(l-Return)
340
K. Killourhy and R. Maxion
where Hold(period) is the hold time of the period key, and Interval(period-t) is
the interval between the period key-release and the t key-press.
Each detector has two phases: training and testing. During training, a set
of password vectors from a legitimate user is used to build a proﬁle of that
user. Diﬀerent detectors build this proﬁle in diﬀerent ways, but the objective
of a successful detector is to build a proﬁle that uniquely distinguishes the user
from all other typists (like a ﬁngerprint). During testing, a new password-timing
vector (from an unknown typist) is provided, and the detector compares the
new vector against the proﬁle. The detector produces an anomaly score that
indicates whether the way the new password was typed is similar to the proﬁle
(low score) or diﬀerent from the proﬁle (high score). The procedure by which
this score is calculated depends on the detector.
In practice, the anomaly score would be compared against some pre-determined
threshold to decide whether or not to raise an alarm (i.e., whether or not the
password-typing rhythms belong to an impostor). However, in our evaluation, we
will use these scores directly to assess the detector’s performance.
The three detectors are implemented using the R statistical programming
environment (version 2.4.0) [18]. The nearest-neighbor detector leverages an im-
plementation of Bentley’s kd-trees [1] by Mount and Arya [14]. The multilayer
perceptron uses the neural-network package AMORE [12].
6.2 Mean-Based Detector
A mean-based detector models a user’s password-timing vectors as coming from
some known distribution (e.g., a multidimensional normal distribution) with an
unknown mean. During training, the mean is estimated, and during testing, a
new password-timing vector is assigned an anomaly score based on its distance
from this mean. Joyce and Gupta [10] used a detector that ﬁts this description,
and the detector we implemented is similar to theirs, but not precisely the same.1
During training, our mean-based detector estimates the mean vector and the
covariance matrix of the training password-timing vectors. The mean vector is
a 21-element vector, whose ﬁrst element is the mean of the ﬁrst elements of
the training vectors, whose second element is the mean of the second elements
of the training vectors, and so on. Similarly, the covariance matrix is the 21-
by-21-element matrix containing the covariance of each pair of elements in the
21-element training vectors. These mean and covariance estimates comprise the
user’s proﬁle.
During testing, the detector estimates the Mahalanobis distance of the new
password-timing vector from the mean vector of the training data. The