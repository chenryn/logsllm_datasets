# EXTENSION-LAND: Exploits and Rootkits in Your Browser Extensions

## Presenter
**Barak Sternberg (@livingbeef)**
- Senior Security Researcher, previously at SentinelOne Labs
- "Hacking smart-devices for fun and profit" // DC28 IoT Village
- BSc & MSc in Computer Science with a focus on algorithms (bioinformatics) from Tel Aviv University (TAU)
- Specializes in vulnerability research (IoT, embedded devices, Linux, and web applications) and malware analysis
- DJ and party enthusiast (mixcloud.com/barak-sternberg)

## Motivation
- Over 2 million extensions in web stores, making them a prime target for attackers to develop malicious ones.
- **Why Extensions?**
  - More permissions (e.g., easy Universal Cross-Site Scripting (uXSS) to any origin)
  - Control over the entire browser and more
  - Cross-platform compatibility (works on any desktop/OS)
  - Easier to develop (e.g., JavaScript-based malware)

## Syllabus
1. Introduction to Chrome Extensions
2. Extension Communication
3. Exploiting Zotero: "Jumping" from one Chrome app to a Chrome extension
4. Exploiting Vimium: From Pseudo-Random Number Generators (PRNGs) to uXSS
5. Developing and Implanting an "Extension-Rootkit"
6. Implanting a rootkit inside "good" extensions

## Extensions Anatomy – The Basics
- **Content-Scripts**: The "frontend" of extensions
  - Loaded into matching sites (i.e., sites the extension works for).
  - Runs in a special VM context with its own variables and private world.
  - Accessible to the site's Document Object Model (DOM).
- **Background-Scripts**: The "backend" of extensions
  - Run once in a dedicated process.
  - Access to more APIs.
  - Persistent and not dependent on the site.
- **Extension-Dir**: `%LocalAppData%\Google\Chrome\User Data\Default\Extensions\EXTENSION_ID\`
- **Extension-Manifest**: `Manifest.json` (the manifest file of extensions)
- **Extension-Signature**: Verified and checked at runtime.

## Manifest Anatomy
1. [Details of manifest structure]

## Communicating in Extension-Land
- Example: Visiting https://google.com
  - For each extension, the following interactions are created.
  - *Picture Credit: "Attacking Browser Extensions" by Nicolas Golubovic*

### Content-Scripts
- Example: An Ad-Blocker removing ad-iframes from a page.
  - How? It inspects the DOM and removes the elements.
  - Example code:
    ```javascript
    let el = document.querySelector('div.slick-slide');
    document.body.removeChild(el);
    ```

### Background-Scripts
- Example: An Ad-Blocker blocking or redirecting specific URLs.
  - How? It adds a new `WebRequest-Hook` and filters requests.
  - Example code:
    ```javascript
    function ad_listener(details) {
        if (details.url === "https://BAD_SITE") {
            return {redirectUrl: "about:blank"};
        }
    }
    browser.webRequest.onBeforeRequest.addListener(ad_listener);
    ```

## Websites and Extension’s Content-Scripts
1. **Cross-Origin Messages**:
   - Content-Script: Defines message listeners.
   - Website: `window.postMessage("DATA", "chrome-extension://...");`
2. **DOM Changes & Events**:
   - DOM Events: `onclick`, `onfocus`, `onload`
   - DOM Queries: Search for div with class `X`
3. **Extension Accessible URLs**:
   - Manifest: `web_accessible_urls` (URLs that can be iframed/opened by other sites)
   - Website: [Details]

## Websites and Extension’s Background-Scripts
1. **WebRequest Proxy**:
   - Background script: `onBeforeRequest`, `onBeforeResponse`
2. **Tabs/Cookies/Storage Inspections**:
   - Background-Script: `chrome.tabs` hooks, `cookies.get(...)`, `chrome.downloads`, `chrome.storage`
3. **Externally Connected Pages**:
   - Manifest: A URL `http://X.com` is defined as `externally_connectable`
   - WebSite: `sendMessage` API available on `http://X.com`
     ```javascript
     chrome.runtime.sendMessage(EXTENSION_ID, "DATA");
     ```

## Extension-to-Extension Communication
- All Website-Extension communication is available.
- "Externally_Connectable" sites/extensions are allowed to send messages to the background.
- TCP/UDP connections.
- Dependent on permissions.
- **Cross-extensions Injection**:
  - Extension 1 injects code into `HTTPS://SITE.EXTENSION2.COM`:
    ```javascript
    chrome.runtime.sendMessage(EXTENSION_2_ID, DATA, ..);
    ```
  - Extension 2 receives the message, thinking it's from its site.

## Zotero Extension
- Popular academic extension used to organize citations and share research.
- Works with the Zotero Desktop application (saves data locally).
- Extension communicates with Zotero Desktop through TCP.

### Zotero Translators or "Jumping" Between Chrome Apps/Extensions
- Zotero Translators:
  - 500+ JS-Translators can be executed at every site.
  - XSS/"Supply-chain" attacks: https://github.com/zotero/translators/
  - Auto-update system: Checks `http://127.0.0.1:23119/GetTranslators` for updates.
  - New JS code at `http://127.0.0.1:23119/getTranslatorsCode`
  - Localhost listener: Download and install the "Mappy" Chrome app with `chrome.tcpServer` permission.

### Injecting JS in Zotero Content Scripts
- Our Translator JS executed with content.
- Exploring the attack surface of content-scripts.
- Inside Zotero Background Scripts: Interesting `eval` inside Google Docs integration.

### Injecting JS into Zotero Background Context
- Config injection: `chrome.storage.local` is shared across content and background scripts.
- Trigger XSS inside background-scripts.

## Full-Chaining Zotero
- Demo Video

## Vimium’ing for Fun and Profit
- Vimium: Extension that converts your browser into a "vim-like" interface.
- Easy browser navigation without a mouse.
- Keyboard shortcuts like VIM for copy/search/navigate.

### Attack Scenario
- Goal: Attack the Vimium Extension.
- Vimium Widgets: Vomnibar, Helper, Visual-mode.

### Breaking the Vimium Secret
- "VimiumSecret" Generation:
  - Very basic Random Number Generator: `chrome.storage.local.set({vimiumSecret: Math.floor(Math.random() * 2000000000)});`
  - Brute force method:
    ```javascript
    let secret_to_bruteforce = 0xdeadbeef;
    d = document.createElement('iframe'); 
    d.src = 'chrome-extension://dbepggeogbaibhgnhhndojpepiihcmeb/pages/vomnibar.html';
    document.body.appendChild(d);
    d.contentWindow.postMessage(secret_to_bruteforce, '*', [channel.port2]);
    ```

### Vomnibar Communication
- Communication between Vimium Content-Script and Vomnibar iframe:
  - Search for URL completions
  - Activate search / jump to new URLs
  - Search for hints & auto-completion
  - Run JS code

### Vimium Communication #2
- Handling JavaScript scheme:
  - Tries to find auto-completion.
  - Calls background-script method to find relevant auto-complete.
  - Background-script sends a message back to sender tab’s content-scripts.
  - Problem: Placing another iframe inside the tab.
  - No validation for targeted URL/frameId – JS executed in all iframes.

### Content-Script Messaging Injection
- Content-Script sends a message from a specific iframe.
- Background-scripts send a message back to this tab.
- Content-scripts inside another iframe receive the message.
- Content-scripts inside the sender iframe also receive the message.

### UXSS Demo

## Persistent JS Injection into Any Extension or Gotta Love KUNPACKED
- Scenario: Post-exploitation, managed to run code on the user's device.
- Goal: Install a persistent "rootkit".
- Unpacked mode: `--load-extension=YOUR_EXTENSION_PATH`
- Replace original extension: Keeps its ID but allows file/permission changes.
- Modifying "good" extension: Add any needed permissions, full file-system access, hidden in Chrome context.

### KUNPACKED Demo Time
- Replacing extension: Installed-Extensions List stays the same, Google WebStore thinks it was installed correctly, icon remains similar.

## Introducing “MALTENSIONS”
- Utility to generate and test malware techniques inside browser extensions.
- Code: https://github.com/barakolo/Maltensions
- Featured Techniques:
  - Inject and run JS in hidden context inside tabs.
  - File-System Access / Access to sites/tabs/user-storage data.
  - Command and Control (C&C) communication.
  - Output Formats: Unpacked extension mode, JS to inject inside your favorite extension.

## Conclusions
1. Extensions can be abused for post-exploitation.
2. Detection will get harder with the injection of malicious scripts inside "good" extensions.
3. More attack surfaces to explore: inner communication, cross-extension attacks, storage mis-configurations.
4. Malicious extensions are here to stay!

## Thank You!
### Credits & Extra-Materials
- Images and extra materials credited to their respective owners. Contact us for any copyright/credit additions.