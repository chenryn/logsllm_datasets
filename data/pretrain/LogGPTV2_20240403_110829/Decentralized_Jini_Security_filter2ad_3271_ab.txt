kind, the granularity is probably at most per-method.
• Application protection model. How ﬂexibly can the
user decide which client applications are allowed to
do what? For example, if the system uses TLS client
authentication and a server-side access control list
(ACL), the restrictions can’t probably be more speciﬁc
than per service (i.e., application can use key X only
to access service Y).
• Delegation. Does the system support delegation? Can
the delegated rights be restricted somehow? How ﬂex-
ible are these restrictions?
• Transparency. How transparent the security system is
for service or client software?
For example, in Enterprise JavaBeans security is man-
aged by the “container”, so it is sort of transparent to
the service software.
It is probably a good idea to
make the security as transparent as possible to client
applications.
3 Solution architecture
Our goal was to provide access control for Jini clients, ser-
vices, and proxies without sacriﬁcing any essential Jini fea-
tures, such as protocol independence. In our architecture
trust assumptions are made visible by using authorization
certiﬁcates instead of traditional name certiﬁcates. This al-
lows us to identify what level of trust is really required by
the application, which is important in, e.g., ad hoc environ-
ments where a fully trusted third party can’t be assumed to
exist.
3.1 Our design choices
When designing the system, our target environment was ad
hoc mobile networks. For example, such a network might
consists of PDAs communicating with a short range radio
network such as Bluetooth [24]. Such an environment re-
quires that the solution is decentralized, or at least does not
rely on any on-line third party, since such a party might not
be available at all times in an ad hoc network. Therefore,
we also assume that the lookup service isn’t secure. We
also early rejected a centralized off-line trusted third party
for signing the code as “trustworthy”, since we believe that
that kind of solutions are better for assigning blame after-
wards than preventing wrong things from happening in the
ﬁrst place. Considering the communication, reliance on a
ﬁxed communications protocol was also deemed an unsat-
isfactory solution from the start.
Since we had prior experience in using SPKI certiﬁcates,
we decided to use them for decentralizing trust. In our sys-
tem, clients and services are identiﬁed by public keys. Un-
like in some other architectures, names bound to these keys
are not important. That is, when performing the access con-
trol decision, names are not used—names and other secu-
rity attributes may be, of course, used by the application.
3.2 Using authorization
We next describe a typical authorization scenario in our so-
lution. The service key typically delegates full permissions
for the service to the administrator’s key, who can then au-
thorize ordinary users to use the service. The authorization
is expressed as a SPKI certiﬁcate, where the administrator
delegates the access right to user’s public key. The certiﬁ-
cates are stored by client.
The user can delegate a subset of her authorizations to
local applications. The authorizations delegated to the ap-
plication depend on how much the user trusts the applica-
Figure 1: Typical certiﬁcate chains; the authorization
chain (veriﬁed by the service) is shown in bold, the au-
thentication chain (veriﬁed by the user) in dashed line.
tion. For example, the user might trust a word processor to
print correctly, and she would delegate the corresponding
permission it. However, the user probably won’t give the
word processor the permission to access personal calendar
ﬁles, because the application does not really need it, and it
just might contain code that misbehaves.
Our solution provides a way for the application to use
these authorizations with a service in Jini environment. One
of the problems to be solved is how to prove these autho-
rizations through the Jini proxy which is loaded from the
network and can not be fully trusted by the user. The user’s
secret key is required to prove the user’s authorizations but
it must not be given to the proxy.
Typical certiﬁcate chains are shown in Figure 1. The de-
tails of proxy veriﬁcations are explained below.
4
Implementation
Our prototype implementation is responsible for proving
user authorizations to services, authenticating proxies, and
verifying authorizations. It is implemented completely in
Java, and consists of about 10 000 lines of code. The im-
plementation consists of the following components:
• SPKI certiﬁcate library (siesta.security.spki) is used
for encoding and decoding SPKI certiﬁcates.
Very limited accessto serviceLimited accessJAR signatureUser’s keyFull accessProxy keyService admin keyService keyNaming authoritykeyProxy code and data hashName = "Service name""My code""My data"Code signingkeyAuthenticationprotocolHash verificationConfiguration fileFigure 2: Accessing a Jini service, without any security
features.
• Server-side module (siesta.security.authorization) ver-
iﬁes SPKI certiﬁcate chains. It could be considered a
sort of “trust management engine”, like KeyNote, but
it is somewhat simpler. This package and its connec-
tion with the standard Java 2 security architecture are
described in Section 4.6.
• Certiﬁcate repository (siesta.security.repository) pro-
vides a simple local certiﬁcate repository where autho-
rization certiﬁcates are stored, and a certiﬁcate gath-
erer which tries to ﬁnd a complete certiﬁcate chain.
This could be extended to support of retrieval of cer-
tiﬁcates from the network using DNS [18], LDAP, or
some other directory access protocol.
• Client-side security module is responsible for control-
ling access to user’s private keys, authenticating prox-
ies, and enforcing application access control.
• Utilities to simplify writing services and clients, such
as signing proxies, verifying name certiﬁcates, etc.
• RMI over TLS [10] module supports using client au-
thentication over TLS sockets, as described in Section
4.7.
4.1 An example scenario
The default behavior of a Jini client application and a ser-
vice is shown in Figure 2, where an application prints a
document.
1. An application, wishing to use a Jini service, con-
tacts the lookup service, and performs an appropriate
lookup (for example, searching for printer services). A
list of available services is returned to the application.
2. The user (or the application itself) selects one of the
listed services. A serialized proxy object is transported
to the client, and the corresponding bytecode is down-
loaded.
Figure 3: Accessing a Jini service with our security
modiﬁcations.
3. The application calls some method on the proxy ob-
ject, requesting it to do whatever the service does. In
our example, it asks the proxy the print a document.
4. The proxy sends the request to the service, which
prints the document.
In the next section we describe the modiﬁcations needed
in our security solution.
4.2 Overview of the modiﬁed protocol
When security is applied to typical Jini scenario, a number
of additional steps are needed. On the client side, we have a
“Jini security manager” which is responsible for controlling
access to the user’s private keys. It also enforces application
access control. The mechanisms needed at server side de-
pend on the requirements of the service. The typical steps
taken when accessing a service are described below, and are
illustrated in Figure 3.
1. An application, wishing to use a Jini service, con-
tacts the lookup service, and performs an appropriate
lookup (for example, searching for printer services).
A list of is returned to the application. No special se-
curity features are assumed here.
2. The user selects one of the listed services. A serial-
ized proxy object is transported to the client, and the
corresponding bytecode is downloaded (again, using
standard Jini facilities).
3. The Jini security module asks the proxy for the ser-
vice’s public key, and checks that this proxy indeed
represents that service. This is done by checking the
signature of the code and data as described in Section
4.3.
ApplicationProxyPrinterClient JVMJini lookup service3. print(doc)4. print(doc)2. Proxy download1. Lookup(Printer)ApplicationProxyClient JVM2. Proxy download5. print(doc)6. Get authorization4. Authenticateproxy3. VerifyJini security managerPrinterJini lookup service7. print(doc, creds)1. Lookup(Printer)4. Next we have an optional authentication step. If the
application knows an identity of the desired service,
it can now ask the Jini security service to authenticate
the service key. Authenticating the actual identity (e.g.
a human readable name) might involve certiﬁcates ob-
tained from the lookup service or the proxy itself, and
is described below in Section 4.4.
5. The application calls some method on the proxy ob-
ject, requesting it to do whatever the service does. In
our example, it asks the proxy the print a document.
6. The proxy then asks the Jini security library for autho-
rization. The Jini security manager checks that (1) the
proxy is trying to really access the service it represents
and (2) that the application is allowed to perform this
operation on behalf of the user. Application access
control is described in Section 4.5.
To enforce these local restrictions, we generate a tem-
porary key for the proxy, and delegate the restricted
rights to this temporary key1. A handle to this key is
then given to the proxy. The proxy can’t get the ac-
tual key material through this handle, but it can use
it for signing data (this allows us to “revoke” the key
immediately, if necessary).
The certiﬁcate repositories are then searched for other
certiﬁcates which might be relevant to the case, and
the certiﬁcates are returned to the proxy.
7. Using the key handle, the proxy can open a secure
connection to the server. The proxy can implement
any protocol it chooses. Our library provides a mod-
ule which uses RMI over TLS, as described in Section
4.7.
After proving possession of the temporary key, the
proxy sends the certiﬁcates and the service request to
the server. The server checks the certiﬁcate chain, and
then performs the operation. This aspect is discussed
more in Section 4.6.
4.3 Proxy veriﬁcation
Usually we wish to verify that the proxy really came from
the service we want. Since services are identiﬁed by public
keys, this can be arranged by having both the code and data
signed by the service key. However, it should be noted that
due to the ad hoc nature of the network, we do not neces-
sarily know anything about the “authenticity” of the service
key, at least not yet.
During the implementation we discovered what we con-
sider a small deﬁciency in Java’s facilities for signed code.
It is not possible to give expiration dates for code signa-
tures. The associated X.509 certiﬁcate has an expiration
date, but it is not possible to produce signatures which have
a shorter lifetime than the certiﬁcate. We wanted that pos-
siblity (to make sure we are using the right version of the
proxy code), so we had to make some modiﬁcations.
There are basically two ways of achieving the expiration.
The JAR ﬁle signature could be modiﬁed to contain an expi-
ration date. This would, however, require modiﬁcations to
the JAR ﬁle loading code. This is by no means impossible;
it has been done in the TeSSA project to allow delegation
of code permissions with SPKI certiﬁcates [27].
Our approach splits the signature to two parts. We sign
the JAR ﬁle (using standard Java facilities) using a newly
generated key, whose private half is then destroyed. The
service then supplies a SPKI certiﬁcate chain from the ser-
vice key to this code signing key (usually just one certiﬁ-
cate). This certiﬁcate chain is stored in the data part of the
proxy. This approach has couple of advantages:
• We don’t have to re-sign the JAR ﬁle if it hasn’t
changed. Since the JAR ﬁles are stored on a web
server, the service might not be able to easily modify
them.
• We don’t have to modify the JAR ﬁle loading code.
• We can use existing JDK tools for signing the JAR.
The main drawback is that the signature expiry date isn’t
visible to the standard Java components.
In addition to verifying the authenticity of the proxy
bytecode, we would like verify the proxy object as well.
The straight-forward way would be to calculate the mes-
sage digest of the serialized proxy object. However, this
fails because we don’t really know what part of the data is
ﬁxed state worth signing and which is just transient state.
Also, the proxy might be composed of multiple objects.
We solved this by asking the proxy object to calculate its
own message digest. The proxy bytecode has been veriﬁed
in this point, so the proxy isn’t completely untrusted, and
it isn’t in the service’s interest to return a wrong message
digest. On the other hand, a lazy service writer could defeat
this check by always returning the same message digest (for
example, zero).
The service then supplies a SPKI certiﬁcate chain from
the service key to the message digest object-hash, and
stores it in the proxy’s data part. Usually this certiﬁcate
chain is just one certiﬁcate.
1. We certainly wish to write a certiﬁcate that can only be used at the
service the proxy represents. However, we noticed that there wasn’t any
elegant way to restrict the delegated certiﬁcate only to particular service
in SPKI. Although we considered adding a new element to the SPKI cer-
tiﬁcate (say, named (valid-at (public-key service-key))),
we decided to encode this information at a ﬁxed position in the tag ﬁeld.
4.4 Service/proxy authentication
Section 4.3).
After we have veriﬁed the signatures of proxy code and
state, we know which service the proxy represents (as iden-
tiﬁed by the service’s public key). Now the application may
wish to verify other security attributes of the service, such
as human-readable names.
We argue that this is a function best left to the applica-
tion, since the trust models are very application speciﬁc. In
some cases, a traditional solution based on a trusted third
party is the most appropriate (e.g., naming printers on a cor-
porate network). In many cases, a PGP-style web of trust
may be more appropriate.
Stajano and Anderson [29] describe an example of an ad
hoc networking situation where a completely different so-