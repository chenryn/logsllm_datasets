GBase 8s V8.8开发者手册
(2) 使用如下命令连接数据库。
gsql-dpostgres-p15432
postgres为需要连接的数据库名称，15432为数据库主节点的端口号。
连接成功后，系统显示类似如下信息：
gsql((GBase8s3.0.0BXXbuildd28887c9)compiledat2022-05-1311:31:40commit0lastmr
55)
Non-SSLconnection(SSLconnectionisrecommendedwhenrequiringhigh-security)
Type"help"forhelp.
gsql=#
(3) 查看最大连接数。
gsql=#SHOWmax_connections;
max_connections
-----------------
200
(1row)
(4) 使用如下命令退出数据库。
gsql=#\q
(5) 修改数据库节点的最大连接数。
gs_gucset-Nall-Iall-c"max_connections=500"
(6) 重启GBase8s。
gs_om-tstop
gs_om-tstart
(7) 使用如下命令连接数据库。
gsql-dpostgres-p15432
postgres为需要连接的数据库名称，15432为数据库主节点的端口号。
连接成功后，系统显示类似如下信息：
gsql((GBase8s3.0.0BXXbuildd28887c9)compiledat2022-05-1311:31:40commit0lastmr
55)
Non-SSLconnection(SSLconnectionisrecommendedwhenrequiringhigh-security)
Type"help"forhelp.
gsql=#
南大通用数据技术股份有限公司
629
GBase 8s V8.8开发者手册
(8) 查看最大连接数。
gsql=#SHOWmax_connections;
max_connections
-----------------
500
(1row)
示例4：设置数据库节点的客户端认证最长时间参数“authentication_timeout”
(1) 以操作系统用户gbase登录数据库主节点。
(2) 使用如下命令连接数据库。
gsql-dpostgres-p15432
postgres为需要连接的数据库名称，15432为数据库主节点的端口号。
连接成功后，系统显示类似如下信息：
gsql((GBase8s3.0.0BXXbuildd28887c9)compiledat2022-05-1311:31:40commit0lastmr
55)
Non-SSLconnection(SSLconnectionisrecommendedwhenrequiringhigh-security)
Type"help"forhelp.
gsql=#
(3) 查看客户端认证的最长时间。
gsql=#SHOWauthentication_timeout;
authentication_timeout
------------------------
1min
(1row)
(4) 使用如下命令退出数据库。
gsql=#\q
(5) 修改数据库节点的客户端认证最长时间。
gs_gucreload-Nall-Iall-c"authentication_timeout=30s"
(6) 使用如下命令连接数据库。
gsql-dpostgres-p15432
postgres为需要连接的数据库名称，15432为数据库主节点的端口号。
连接成功后，系统显示类似如下信息：
南大通用数据技术股份有限公司
630
GBase 8s V8.8开发者手册
gsql((GBase8s3.0.0BXXbuildd28887c9)compiledat2022-05-1311:31:40commit0lastmr
55)
Non-SSLconnection(SSLconnectionisrecommendedwhenrequiringhigh-security)
Type"help"forhelp.
gsql=#
(7) 查看客户端认证的最长时间。
gsql=#SHOWauthentication_timeout;
authentication_timeout
------------------------
30s
(1row)
16 用户自定义函数
16.1PL/pgSQL 语言函数
PL/pgSQL是一种可载入的过程语言。
用PL/pgSQL创建的函数可以被用在任何可以使用内建函数的地方。例如，可以创建复
杂条件的计算函数并且后面用它们来定义操作符或把它们用于索引表达式。
SQL被大多数数据库用作查询语言。它是可移植的并且容易学习。但是每一个SQL语
句必须由数据库服务器单独执行。
这意味着客户端应用必须发送每一个查询到数据库服务器、等待它被处理、接收并处理
结果、做一些计算，然后发送更多查询给服务器。如果客户端和数据库服务器不在同一台机
器上，则会引起进程间通信并且将带来网络负担。
通过PL/pgSQL，可以将一整块计算和一系列查询分组在数据库服务器内部，这样就有
了一种过程语言的能力并且使SQL更易用，同时能节省客户端/服务器通信开销。
 客户端和服务器之间的额外往返通信被消除。
 客户端不需要的中间结果不必被整理或者在服务器和客户端之间传送。
 多轮的查询解析可以被避免。
南大通用数据技术股份有限公司
631
GBase 8s V8.8开发者手册
PL/pgSQL 可以使用 SQL 中所有的数据类型、操作符和函数。一些常见函数，例如
gs_extend_library。
应用PL/pgSQL创建函数的语法为CREATEFUNCTION。PL/pgSQL是一种可载入的过
程语言。其应用方法与18 存储过程相似，只是存储过程无返回值，函数有返回值。
17 存储过程
17.1存储过程
商业规则和业务逻辑可以通过程序存储在GBase8s中，这个程序就是存储过程。
存储过程是SQL和PL/SQL的组合。存储过程使执行商业规则的代码可以从应用程序
中移动到数据库。从而，代码存储一次能够被多个程序使用。
存储过程的创建及调用办法请参考 CREATEPROCEDURE。
PL/pgSQL语言函数节所提到的PL/pgSQL语言创建的函数与存储过程的应用方法相通。
下面各节中，除非特别声明，否则内容通用于存储过程和PL/pgSQL语言函数。
17.2数据类型
数据类型是一组值的集合以及定义在这个值集上的一组操作。GBase8s数据库是由表的
集合组成的，而各表中的列定义了该表，每一列都属于一种数据类型， GBase8s根据数据
类型有相应函数对其内容进行操作，例如GBase8s可对数值型 数据进行加、减、乘、除
操作。
17.3数据类型转换
数据库中允许有些数据类型进行隐式类型转换（赋值、函数调用的参数等），有些数据
类型间不允许进行隐式数据类型转换，可尝试使用GBase8s提供的类型转换函 数，例如
CAST进行数据类型强转。
GBase8s数据库常见的隐式类型转换，请参见表18-1。
南大通用数据技术股份有限公司
632
GBase 8s V8.8开发者手册
须知：
GBase8s支持的DATE的效限范围是：公元前4713年到公元294276年。
表 18-1 隐式类型转换表
原始数据类型 目标数据类型 备注
CHAR VARCHAR2 -
CHAR NUMBER 原数据必须由数字组成。
CHAR DATE 原数据不能超出合法日期范
围。
CHAR RAW -
CHAR CLOB -
VARCHAR2 CHAR -
VARCHAR2 NUMBER 原数据必须由数字组成。
VARCHAR2 DATE 原数据不能超出合法日期范
围。
VARCHAR2 CLOB -
NUMBER CHAR -
NUMBER VARCHAR2 -
DATE CHAR -
DATE VARCHAR2 -
RAW CHAR -
RAW VARCHAR2 -
CLOB CHAR -
CLOB VARCHAR2 -
南大通用数据技术股份有限公司
633
GBase 8s V8.8开发者手册
CLOB NUMBER 原数据必须由数字组成。
INT4 CHAR -
INT4 BOOLEAN -
BOOLEAN INT4 -
17.4数组和 record
17.4.1 数组
17.4.1.1 数组类型的使用
在使用数组之前，需要自定义一个数组类型。
在存储过程中紧跟AS关键字后面定义数组类型。定义方法如下。
TYPEarray_typeISVARRAY(size)OFdata_type;
其中：
 array_type：要定义的数组类型名。
 VARRAY：表示要定义的数组类型。
 size：取值为正整数，表示可以容纳的成员的最大数量。
 data_type：要创建的数组中成员的类型。
说明
 在GBase8s中，数组会自动增长，访问越界会返回一个NULL，不会报错。
 在存储过程中定义的数组类型，其作用域仅在该存储过程中。
 建议选择上述定义方法的一种来自定义数组类型，当同时使用两种方法定义同名的
数组类型时，GBase8s会优先选择存储过程中定义的数组类型来声明数组变量。
 data_type也可以为存储过程中定义的record类型（匿名块不支持），但不可以为
存储过程中 定义的数组或集合类型。
南大通用数据技术股份有限公司
634
GBase 8s V8.8开发者手册
GBase8s支持使用圆括号来访问数组元素，且还支持一些特有的函数，如extend、count、
first、last、prior、exists、 trim、next、delete来访问数组的内容。
说明
 存储过程中如果有DML语句（SELECT、UPDATE、INSERT、DELETE），DML
语句推荐使用 中括号来访问数组元素，使用小括号默认识别为数组访问，若数
组不存在，则识别为函数表达式。
 如果clob类型大于1GB，则存储过程中的tableof类型、record类型、clob作为出
入参、游标、raiseinfo等功能不支持。
17.4.2 集合
17.4.2.1 集合类型的使用
在使用集合之前，需要自定义一个集合类型。
在存储过程中紧跟AS关键字后面定义集合类型。定义方法如下。
其中：
 table_type：要定义的集合类型名。
 TABLE：表示要定义集合类型。
 data_type：要创建的集合中成员的类型。
 indexby_type： 创建集合索引的类型。
说明
 在GBase8s中，集合会自动增长，访问越界会返回一个NULL，不会报错。
 在存储过程中定义的集合类型，其作用域仅在该存储过程中。
 索引的类型仅支持integer和varchar类型，其中varchar的长度暂不约束。
 NOTNULL只支持语法不支持功能。
 data_type可以为存储过程内定义的record类型，集合类型（匿名块不支持），不
南大通用数据技术股份有限公司
635
GBase 8s V8.8开发者手册
可以为数组 类型。
 不支持跨package的嵌套集合类型变量使用。
 不支持record嵌套tableofindexby类型的变量作为存储过程的出入参。
 不支持tableofindexby类型的变量作为函数的出入参。
 不支持通过raiseinfo打印整个嵌套tableof变量。
 不支持跨自治事务传递tableof变量。
 不支持存储过程的出入参定义为嵌套tableof类型。
GBase8s支持使用圆括号来访问集合元素，且还支持一些特有的函数，如extend，count，
first，last,prior,next,delete来访问集合的内容。
集合函数支持multisetunion/intersect/exceptall/distinct函数。
说明
同一个表达式里不支持两个以上tableofindexby类型变量的函数调用。
17.4.3 record
17.4.3.1 record 类型的变量
创建一个record变量的方式：
定义一个record类型 ，然后使用该类型来声明一个变量。
17.4.3.2 语法
record类型的语法参见图17-1。
南大通用数据技术股份有限公司
636
GBase 8s V8.8开发者手册
图 17-1record 类型的语法
对以上语法格式的解释如下：
 record_type：声明的类型名称。
 field：record类型中的成员名称。
 datatype：record类型中成员的类型。
expression：设置默认值的表达式。
说明
在GBase8s中：
record类型变量的赋值支持：
 在函数或存储过程的声明阶段，声明一个record类型，并且可以在该类型中定义成
员变量。
 一个record变量到另一个record变量的赋值。
 SELECTINTO和FETCH向一个record类型的变量中赋值。
 将一个NULL值赋值给一个record变量。
 不支持INSERT和UPDATE语句使用record变量进行插入数据和更新数据。
 如果成员有复合类型，在声明阶段不支持指定默认值，该行为同声明阶段的变量一
样。
 datatype可以为存储过程中定义record类型、数组类型和集合类型（匿名块不支持）。
南大通用数据技术股份有限公司
637
GBase 8s V8.8开发者手册
17.4.3.3 示例
下面示例中用到的表定义如下：
gbase=#\demp_rec
Table"public.emp_rec"
Column | Type|Modifiers
----------+--------------------------------+-----------
empno |numeric(4,0) |notnullename |charactervarying(10) |
job |charactervarying(9) |
mgr |numeric(4,0) |hiredate|timestamp(0)withouttimezone|sal |numeric(7,2)
|
comm |numeric(7,2) |
deptno |numeric(2,0)|
--演示在函数中对数组进行操作。
gbase=#CREATEORREPLACEFUNCTIONregress_record(p_wVARCHAR2)
RETURNS
VARCHAR2AS$$DECLARE
--声明一个record类型.
typerec_typeisrecord(namevarchar2(100),epnoint);employerrec_type;
--使用%type声明record类型
typerec_type1isrecord(nameemp_rec.ename%type,epnointnotnull:=10);employer1
rec_type1;
--声明带有默认值的record类型typerec_type2isrecord(
namevarchar2notnull:='SCOTT',epnointnotnull:=10);
employer2rec_type2;
CURSORC1ISselectename,empnofromemp_recorderby1limit1;
BEGIN
--对一个record类型的变量的成员赋值。employer.name := 'WARD';