I hope this is not a dupe, I was really surprised by this bug because - being
so simple in nature - it appears it should have been caught by your tests (or
at least stumbled upon by other people), hence there is a slight probability
that I misunderstood something or that the compiler isn't capable to do the
necessary work (at which point I'd be doubly disappointed).
Anyway, the example is artificial because it's extracted from a larger code
base.
Imagine a simple project, let's start with `tsconfig.json`
    {
        "compilerOptions": {
            "target" : "ES5",
            "noImplicitAny": true,
            "out": "badout.js"
        }
    }
In the same folder, add a single file `c.ts` which is just `class C {}`
Add a subfolder called `sub` and put the following two files inside:
    // file a.ts
    class A extends B {
        method1(p1:number, p2:string):void {}
    }
    // file b.ts
    class B {
        method1(p1:number, p2:string):void {}
    }
Then simply run tsc in the project folder (the one containing `tsconfig.json`
and `c.ts`)
The output will be:
    var C = (function () {
        function C() {
        }
        return C;
    })();
    var __extends = this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        __.prototype = b.prototype;
        d.prototype = new __();
    };
    var A = (function (_super) {
        __extends(A, _super);
        function A() {
            _super.apply(this, arguments);
        }
        A.prototype.method1 = function (p1, p2) { };
        return A;
    })(B);
    var B = (function () {
        function B() {
        }
        B.prototype.method1 = function (p1, p2) { };
        return B;
    })();
The problem is obvious - we're trying to use `B` before it is defined.
If this has been noted and fixed, please forgive the noise.
If not, please try to look into fixing this before 1.5 is "done".