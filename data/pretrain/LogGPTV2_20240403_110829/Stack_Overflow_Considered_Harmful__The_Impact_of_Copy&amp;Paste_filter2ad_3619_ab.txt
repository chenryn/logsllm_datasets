TABLE I: Cryptographic libraries and their supported features.
B. Finding Security-related Code Snippets on Stack Overﬂow
Code snippets on Stack Overﬂow are surrounded by
 tags and can therefore easily be separated from
accompanying text and extracted.
In order to decide which API is used by a code snippet,
we need Fully Qualiﬁed Names (FQN) (i.e. package names
in Java) of code elements in the snippet. Since Partially
Qualiﬁed Names (PQN)
(i.e. class and method names)
are not unique, different APIs can contain classes (e.g.
android.util.Base64, java.util.Base64)
and
methods (e.g. java.security.Cipher.getInstance,
java.security.Signature.getInstance) which
share the same name. FQNs allow us to distinguish non-unique
class and method names.
Code snippets posted on Stack Overﬂow are often incom-
plete or erroneous and therefore only PQNs are available.
Since disambiguating partial Java programs is an undecidable
problem [10], we used an oracle called JavaBaker [11] to
decide to which API a code element belongs. The oracle
consists of a user-deﬁned set of APIs which is used to apply
a constraint-based approach to disambiguate types of given
code elements. Given a code snippet JavaBaker returns the
FQN for each element in the code, if it belongs to one of the
initially given libraries. The JavaBaker oracle has a precision
of 0.97 and a recall of 0.83 [11]. It is not restricted to speciﬁc
libraries. With JavaBaker, using the security libraries explained
in Section III-A, we were able to determine to which of
the given security APIs a type reference, method call, or
ﬁeld access in a code snippet belongs. A code snippet is
therefore considered security-related if the returned result of
the oracle is not empty. We apply this to separate security-
related code snippets from Stack Overﬂow from snippets that
are not security-related.
Since the security APIs might contain packages whose
usage does not indicate implementation of security code (e. g.
util or math packages), our snippet ﬁlter includes a blacklist to
ignore those non-security-related packages. We compiled this
blacklist manually by inspecting each package individually.
Code snippets may contain sparsely used code elements.
For instance, an object can be declared and initialized, but not
used subsequently in the snippet. In this case, the oracle only
has the PQN of the element and the call to the constructor as
information to decide the FQN. This can lead to false positives
because the oracle has insufﬁcient information to narrow down
possible candidates. To give an example, the oracle reported
as
java.security.auth.login.Configuration
the FQN for a code element with type Configuration
whose true FQN was android.content.res.Con-
figuration. The related object only made a call to the
constructor, hence it was impossible to disambiguate the
given type Configuration. Luckily, these false positives
are easily detectable by ﬁltering out snippets for which the
oracle reports the  method only or no methods at all.
We do not worry about true positives we might sort out this
way, as we are not interested in code snippets that contain
security elements which are not used after initialization.
C. Limitations
The main purpose of the the oracle-based ﬁlter is to decide
whether a given snippet is security-related. As it does this by
examining the snippet for utilization of the deﬁned security
libraries, it might label a snippet as security-related, even
though it does not belong to a security context. This is the case
if an API element which is heavily used for security purposes
can also be used in a non-security context. For instance, in
a security context snippets would use hashing algorithms for
verifying data integrity. In a non-security context hashes may
be used for data management purposes only. In both cases the
snippet would reference elements of one of the given security
APIs which causes the ﬁlter to label the snippets as security-
related.
IV. CODE LABELING
Now that we have extracted security-related code snippets
(cf. Figure 1, (1) and (2)), we need to classify them as such.
Therefore, we ﬁrst provide the label deﬁnition and labeling
rules and give details on the actual machine learning based
classiﬁcation in Section V. We apply supervised learning and
therefore need to manually label a small fraction of extracted
code snippets to train the support vector machine. Therefore, a
pair of two reviewers inspected the set of 1,360 security-related
snippets extracted from answer posts from Stack Overﬂow. We
assume that answer snippets are more likely to be copied and
pasted as they are intended to solve a given problem. Question
snippets are not included in the training set as they might
introduce unpredictable noise, which would compromise the
classiﬁer.
123
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:20 UTC from IEEE Xplore.  Restrictions apply. 
In case of conﬂicts, a third reviewer was consulted and
the conﬂict was resolved (by explaining the reasoning of the
reviews).
To better understand which topics were discussed (in combi-
nation with code snippets) on Stack Overﬂow, we categorized
each code snippet into one or multiple of the following cat-
egories: SSL/TLS, Symmetric cryptography, Asymmetric cryp-
tography, One way hash functions, (Secure) Random number
generation.
A. Security Labels
We checked whether or not code snippets were security risks
when pasted into Android application code and labeled them
either secure or insecure:
Secure
• Snippets that contain up-to-date and strong algorithms
for symmetric cryptography [12], [13], sufﬁciently large
keys for RSA or elliptic curve cryptography [14], [15] or
secure random number generation [3].
• Snippets that contain code that does not adhere to security
best practices, but does not result in easily exploitable
vulnerabilities either, e.g. usage of RSA with no or
PKCS1 padding [16], SHA1 or outdated versions of
SSL/TLS [12].
• Snippets that contain code whose security depended on
additional developer input, e.g. the symmetric cryptog-
raphy algorithm or key size is a parameter, which is
conﬁgurable by the developer.
Insecure
• Snippets that contained obviously insecure code, e.g.
using outdated algorithms or static initialization vectors
and keys for symmetric cryptography, weak RSA keys
for asymmetric cryptography, insecure random number
generation [3], or insecure SSL/TLS implementations [2].
This labeling is very conservative as it classiﬁes only the
deﬁnitely vulnerable code snippets as insecure.
B. Labeling Rules
Code security was investigated for the category speciﬁc
parameters, which are introduced in this section. Based on
these parameters we state a security metric which provides the
rules for labeling the code snippets. Our stated security metric
does not intend to be an exhaustive metric for each security
category, but only considers security parameters which were
actually used in the snippets of our corpus. In the following,
we provide tables for each category which depict secure and
insecure parameters for quick lookup. Additionally, we give
details on parameters that were ambiguous or need further
explanation. We deﬁned the following labeling rules for
security classiﬁcation:
1) SSL/TLS: Table II
the TLS parameters
we investigated [2]. The HostnameVerifier checks
whether a given certiﬁcate’s common name matches the
server’s
implementations
TrustManager
hostname.
illustrates
Parameter
Hostname
Veriﬁer
Trust
Manager
Version
Cipher
Suite
OnReceived-
SSLError
browser compatible,
Secure
strict
default,
secure
pinning
>=TLSv1.1 [12]
DHE RSA, ECDHE
AES>=128, GCM
SHA>=256 [12]
cancel
Insecure
allow all
hosts [17]
trust all [2],
bad pinning [18], [17],
validity only
=1k iterations [13],
>=64-bit salt [13],
non-static salt [13]
Insecure
RC2 [23], RC4 [24],
DES [23], 3DES [25],
AES/ECB [3],
AES/CBC** [22]
Blowﬁsh [26], [27]
static [3],
bad derivation [3]
zeroed [3],
static [3],
bad derivation [3],
= 2048 bit
ECC >= 224 bit
Insecure
PKCS1**
RSA =SHA224 [29]
>SHA1
>SHA1
Insecure
[PBKDF2](Hmac)
MD2, MD5 [29]
MD2, MD5
MD2, MD5
TABLE V: Secure and insecure hash function parameters
4) One Way Hash Functions: We investigated snippets for
one way hash function parameters, as illustrated in Table V,
in the context of password-based key derivation, digital sig-
natures, and authentication/authorization. These were the only
categories where code snippets from our analysis corpus made
explicit use of hash functions. In the context of OAuth and
SASL (authentication and authorization), attacks are mainly
possible through ﬂaws in website implementations [30]. There-
fore, we only analyzed which hashing schemes were used for
hashing credentials.
Parameter
Type
Seeding
Secure
SecureRandom
nextBytes,
nextBytes->setSeed
Insecure
Random
setSeed->nextBytes,
setSeed with
static values [3]
TABLE VI: Secure and insecure parameters for (secure)
random number generation.
5) (Secure) Random Number Generation: We investigated
snippets for (secure) random number generation parameters
shown in table VI. The main problem which can lead to
security problems lies in provider speciﬁc implementation
125
and ambiguous documentation of manual seeds [31]. We
conclude that besides calling nextBytes only, which lets
SecureRandom seed itself, calling nextBytes followed
by setSeed is a secure sequence because SecureRandom
is still self-seeded. The latter call to setSeed just supple-
ments the seed and does not replace it [31]. Without calling
nextBytes ﬁrst, a call to setSeed may completely replace
the seed. This behavior differs between several providers and is
often ill-described in ofﬁcial documentation [31]. Therefore,
we consider this call sequence as insecure if an insufﬁcient
seed is given.
C. Limitations
Our code snippet reviews might be limited in multiple ways
in this step. Although we based our review decisions on widely
accepted best practices and previous research results and let
multiple reviewers review all snippets we cannot entirely elim-
inate incorrect labeling. The security of most code snippets
depends on input values (e. g. initialization parameters) that
were not given in all code snippets. Therefore, our results
might under- or overreport the prevalence of insecure APIs in
Android applications.