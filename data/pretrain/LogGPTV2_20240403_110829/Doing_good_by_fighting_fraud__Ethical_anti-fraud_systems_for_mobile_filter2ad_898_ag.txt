optimal performance when using 4 threads for inference. We
attribute this to the adoption of Arm’s big.LITTLE architecture
[49] on phones with 8 cores, where 4 cores are designed for
efﬁciency rather than performance, and are thus slower than
the other 4 cores designed for performance, while all cores
are uniform in quad core Android devices.
We verify the slowing down of inference on heterogeneous
cores by plotting the variation in inference time against the
number of threads used on an Android device having 8 cores
following ARM’s big.LITTLE architecture and a Linux server
having 24 equivalent cores running x86. The inference times
start going up beyond 4 inference threads on the Android
device, while it starts to go up only after 24 threads on the
Linux server. These plots are shown in Figure 17.
Our producer/consumer OCR is not affected by the hetero-
geneity of CPU cores since it invokes multiple interpreters
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:08 UTC from IEEE Xplore.  Restrictions apply. 
1637
average of 1.94 errors per frame. We also sample 50 random
scans from those with feedback and pass 1,973 centered
frames extracted from them to the card tampering detection
model. In this case, it makes a total of 1.26 errors per frame.
The fake media detection model makes correct predictions
on 21,413 out of 24,829 frames extracted from all 330 scans
without feedback at an accuracy of 86.24%. Of the 9,512
centered frames extracted from all 273 scans with feedback,
the fake media detection model makes correct predictions on
9,061 frames at an accuracy of 95.26%.
E. Will increasing the frame rate further continue to increase
the success rate?
This section serves to answer the question of whether
increasing our current frame rates would lead to further
improvements in success rate without changing the machine
learning model. Since card scanning involves sending frames
from a live camera feed through a machine learning model,
faster frame rates could imply two consecutive frames being
practically identical to the eyes of a machine learning model,
leading to no gains obtained from a higher frame rate. Alterna-
tively, it could be that there are sufﬁcient differences between
two consecutive frames for the machine learning model to
produce a different and possibly better prediction, resulting in
a shorter scanning duration.
Concretely, consider an example where an OCR model is
able to process frames from the user’s video feed at a rate of 5
FPS, and the user scans for 10 seconds. This means that we run
OCR inference on 50 frames in total. We refer to the number
of frames on which the model makes correct predictions as
the number of useful frames. If this model makes correct
predictions on 10 frames, then we have 10 useful frames from
the total set of 50 frames. Now suppose, the same OCR model
processes the same 10 second feed at 10 FPS instead of 5,
i.e., this model processes a total of 100 frames. If this setting
results in more useful frames, then running at a higher frame
rate would lead to shorter scanning times on average.
To study this, we analyze videos of users scanning cards
from our user study described in Section VI-D. We simulate
different frame rates by extracting frames at differently spaced
intervals from the recorded videos. Closer intervals represent
faster frame rates and possibly identical frames, and vice versa
for wider intervals. We then pass these frames through two
different OCR models (Boxer OCR and Daredevil OCR) and
for each frame rate we compute the percentage of useful
frames obtained to the total number of frames processed.
Figure 19 plots the variation of frame rates to percentage of
frames with successful predictions averaged over 27 different
scanning videos sampled from our user study. The plots
are roughly constant for both Boxer OCR and Daredevil
OCR. This indicates that with increasing frame rates and
correspondingly increasing the number of frames processed
by the models, the number of useful frames (i.e., the number
of frames on which we are successfully able to run OCR)
also increases. These results suggest that even closely spaced
frames contain sufﬁcient diversity leading to different, and
Fig. 19: Plot shows that as the frame rates increase,
the
fraction of frames with successful predictions roughly remains
constant, meaning that the number of frames with successful
predictions increases with frame rate. Thus, systems enhance-
ments to increase the frame rate, even with the same machine
learning model can lead to faster scanning times.
possibly correct predictions with the same machine learning
model. Thus, further systems enhancements that lead to higher
frame rates with the same OCR model contribute to faster scan
times and better user experience.
REFERENCES
the Unbanked and Underbanked.
https:
[1] Prepaid Cards
for
//www.needhelppayingbills.com/html/prepaid cards help unbanked
and underbanked.html.
[2] Mart´ın Abadi, Paul Barham, Jianmin Chen, Zhifeng Chen, Andy Davis,
Jeffrey Dean, Matthieu Devin, Sanjay Ghemawat, Geoffrey Irving,
Michael Isard, Manjunath Kudlur, Josh Levenberg, Rajat Monga, Sherry
Moore, Derek G. Murray, Benoit Steiner, Paul Tucker, Vijay Vasudevan,
Pete Warden, Martin Wicke, Yuan Yu, and Xiaoqiang Zheng. Tensor-
ﬂow: A system for large-scale machine learning. In Proceedings of the
12th USENIX Conference on Operating Systems Design and Implemen-
tation, OSDI’16, page 265–283, USA, 2016. USENIX Association.
[3] Apple, Inc. CoreML.
https://developer.apple.com/machine-learning/
core-ml/.
[4] Apple, Inc. Countries and regions that support Apple Pay. https://
support.apple.com/en-us/HT207957.
[5] Alex Beutel, Jilin Chen, Tulsee Doshi, Hai Qian, Allison Woodruff,
Christine Luu, Pierre Kreitmann, Jonathan Bischof, and Ed H. Chi.
Putting fairness principles into practice: Challenges, metrics, and im-
provements. In Proceedings of the 2019 AAAI/ACM Conference on AI,
Ethics, and Society, AIES ’19, page 453–459, New York, NY, USA,
2019. Association for Computing Machinery.
[6] Airbnb Data Science Blog. Fighting ﬁnancial fraud with targeted fric-
tion, February 2018. https://medium.com/airbnb-engineering/ﬁghting-
ﬁnancial-fraud-with-targeted-friction-82d950d8900e.
[7] Uber Engineering Blog. Advanced technologies for detecting and
preventing fraud at uber, June 2018. https://eng.uber.com/advanced-
technologies-detecting-preventing-fraud-uber/.
[8] Michal Busta, Lukas Neumann, and Jiri Matas. Deep textspotter: An
end-to-end trainable scene text localization and recognition framework.
In The IEEE International Conference on Computer Vision (ICCV), Oct
2017.
[9] Zainul Abi Din, Hari Venugopalan, Jaime Park, Andy Li, Weisu Yin,
Haohui Mai, Yong Jae Lee, Steven Liu, and Samuel T. King. Boxer: Pre-
venting fraud by scanning credit cards. In USENIX Security Symposium
(USENIX Security 2020). USENIX, 2020.
[10] Sanghamitra Dutta, Dennis Wei, Hazar Yueksel, Pin-Yu Chen, Sijia Liu,
and Kush R. Varshney. An information-theoretic perspective on the
relationship between fairness and accuracy, 2019.
[11] Kate Fazzini. How criminals use uber and airbnb to launder money
stolen from your credit card, 2019. https://www.cnbc.com/2019/02/07/
how-criminals-use-airbnb-uber-launder-stolen-credit-card-money.html.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:08 UTC from IEEE Xplore.  Restrictions apply. 
1638
[12] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich feature
hierarchies for accurate object detection and semantic segmentation. In
2014 IEEE Conference on Computer Vision and Pattern Recognition,
pages 580–587, 2014.
[13] Ian J. Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David
Warde-Farley, Sherjil Ozair, Aaron Courville, and Yoshua Bengio.
Generative adversarial networks, 2014.
[14] Google. Add a payment method. https://support.google.com/pay/answer/
7625139.
[15] Google. Countries where you can use Google Pay. https://support.
google.com/pay/answer/9023773.
[16] Google. Edge TPU. https://cloud.google.com/edge-tpu.
[17] Seungyeop Han, Haichen Shen, Matthai Philipose, Sharad Agarwal,
Alec Wolman, and Arvind Krishnamurthy. Mcdnn: An approximation-
based execution framework for deep stream processing under resource
constraints. In Proceedings of the 14th Annual International Conference
on Mobile Systems, Applications, and Services, MobiSys ’16, page
123–136, New York, NY, USA, 2016. Association for Computing
Machinery.
[18] Hans Peter Luhn. Computer for verifying numbers, August 1960. https:
//patents.google.com/patent/US2950048.
[19] Moritz Hardt, Eric Price, and Nathan Srebro. Equality of opportunity in
supervised learning. In Proceedings of the 30th International Conference
on Neural Information Processing Systems, NIPS’16, page 3323–3331,
Red Hook, NY, USA, 2016. Curran Associates Inc.
[20] Andrew Howard, Mark Sandler, Grace Chu, Liang-Chieh Chen,
Bo Chen, Mingxing Tan, Weijun Wang, Yukun Zhu, Ruoming Pang,
Vijay Vasudevan, Quoc V. Le, and Hartwig Adam.
Searching for
mobilenetv3. CoRR, abs/1905.02244, 2019.
[21] Andrew G. Howard, Menglong Zhu, Bo Chen, Dmitry Kalenichenko,
Weijun Wang, Tobias Weyand, Marco Andreetto, and Hartwig Adam.
Mobilenets: Efﬁcient convolutional neural networks for mobile vision
applications. CoRR, abs/1704.04861, 2017.
[22] Yanping Huang, Youlong Cheng, Ankur Bapna, Orhan Firat, Dehao
Chen, Mia Chen, HyoukJoong Lee, Jiquan Ngiam, Quoc V Le, Yonghui
Wu, and zhifeng Chen. Gpipe: Efﬁcient
training of giant neural
networks using pipeline parallelism. In Advances in Neural Information
Processing Systems 32, pages 103–112. Curran Associates, Inc., 2019.
[23] Forrest N. Iandola, Matthew W. Moskewicz, Khalid Ashraf, Song
Han, William J. Dally, and Kurt Keutzer. Squeezenet: Alexnet-level
accuracy with 50x fewer parameters and <1mb model size. CoRR,
abs/1602.07360, 2016.
[24] Andrey Ignatov, Radu Timofte, William Chou, Ke Wang, Max Wu,
Tim Hartley, and Luc Van Gool. AI benchmark: Running deep neural
networks on android smartphones. CoRR, abs/1810.01109, 2018.
[25] Apple Inc. About face id advanced technology. https://support.apple.
com/en-us/HT208108.
[26] Coinbase Inc.
Id document veriﬁcation.
https://help.coinbase.com/
en/coinbase/getting-started/authentication-and-veriﬁcation/identity-
veriﬁcation.html.
[27] Lime Inc. Apply for lime access. https://www.fountain.com/limebike/
apply/united-states-limeaccess.
[28] Lime Inc. Lime access: Mobility for all. https://www.li.me/community-
impact.
[29] Heinrich Jiang and Oﬁr Nachum. Identifying and correcting label bias
in machine learning. CoRR, abs/1901.04966, 2019.
[30] Jumio. Breathtaking growth requires smart onboarding. https://www.
jumio.com/app/uploads/2018/01/Instacart-Case-Study.pdf.
[31] Niki Kilbertus, Mateo Rojas-Carulla, Giambattista Parascandolo, Moritz
Hardt, Dominik Janzing, and Bernhard Sch¨olkopf. Avoiding discrimina-
tion through causal reasoning. In Proceedings of the 31st International
Conference on Neural Information Processing Systems, NIPS’17, page
656–666, Red Hook, NY, USA, 2017. Curran Associates Inc.
[32] Jian Liu, Cong Shi, Yingying Chen, Hongbo Liu, and Marco Gruteser.
Cardiocam: Leveraging camera on mobile devices to verify users while
their heart is pumping. In Proceedings of the 17th Annual International
Conference on Mobile Systems, Applications, and Services, MobiSys
’19, page 249–261, New York, NY, USA, 2019. Association for Com-
puting Machinery.
[33] Sicong Liu, Yingyan Lin, Zimu Zhou, Kaiming Nan, Hui Liu, and
Junzhao Du. On-demand deep model compression for mobile devices:
A usage-driven model selection framework. In Proceedings of the 16th
Annual International Conference on Mobile Systems, Applications, and
Services, MobiSys ’18, page 389–400, New York, NY, USA, 2018.
Association for Computing Machinery.
[34] Wei Liu, Dragomir Anguelov, Dumitru Erhan, Christian Szegedy, Scott
Reed, Cheng-Yang Fu, and Alexander C. Berg. Ssd: Single shot multibox
detector.
In Bastian Leibe, Jiri Matas, Nicu Sebe, and Max Welling,
editors, Computer Vision – ECCV 2016, pages 21–37, Cham, 2016.
Springer International Publishing.
[35] Lyft Engineering Blog.
Stopping fraudsters by changing products,
December 2017. https://eng.lyft.com/stopping-fraudsters-by-changing-
products-452240f2d2cc.
[36] Deepak Narayanan, Aaron Harlap, Amar Phanishayee, Vivek Seshadri,
Nikhil R. Devanur, Gregory R. Ganger, Phillip B. Gibbons, and Matei
Zaharia. Pipedream: Generalized pipeline parallelism for dnn training.
In Proceedings of the 27th ACM Symposium on Operating Systems Prin-
ciples, SOSP ’19, page 1–15, New York, NY, USA, 2019. Association
for Computing Machinery.
[37] Alfred Ng. Uber ﬁghts off scammers every day. here’s how it learned
the tricks.
https://www-cnet-com.cdn.ampproject.org/c/s/www.cnet.
com/google-amp/news/uber-ﬁghts-off-scammers-every-day-heres-how-
it-learned-the-tricks/.
[38] Samuel S. Ogden and Tian Guo. Characterizing the deep neural networks
inference performance of mobile applications, 2019.
[39] PayPal. Card.io: Scan credit cards in your mobile app. https://card.io.
[40] Karthik Ramasamy and Lenny Evans. Using computer vision to combat
stolen credit card fraud. In Strata data conference, March 2018.
[41] X. Ran, H. Chen, X. Zhu, Z. Liu, and J. Chen. Deepdecision: A mobile
deep learning framework for edge video analytics. In IEEE INFOCOM
2018 - IEEE Conference on Computer Communications, pages 1421–
1429, 2018.
[42] Joseph Redmon, Santosh Kumar Divvala, Ross B. Girshick, and Ali
Farhadi. You only look once: Uniﬁed, real-time object detection. 2016
IEEE Conference on Computer Vision and Pattern Recognition (CVPR),
pages 779–788, 2016.
[43] Shaoqing Ren, Kaiming He, Ross Girshick, and Jian Sun. Faster r-cnn:
Towards real-time object detection with region proposal networks.
In
C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett,
editors, Advances in Neural Information Processing Systems 28, pages
91–99. Curran Associates, Inc., 2015.
[44] Sam Tolomei. Shrinking APKs, growing installs. https://medium.com/
googleplaydev/shrinking-apks-growing-installs-5d3fcba23ce2.
[45] Mark Sandler, Andrew G. Howard, Menglong Zhu, Andrey Zhmoginov,
Inverted residuals and linear bottlenecks:
and Liang-Chieh Chen.
Mobile networks for classiﬁcation, detection and segmentation. CoRR,
abs/1801.04381, 2018.
[46] N. Scaife, J. Bowers, C. Peeters, G. Hernandez, I. N. Sherman,
P. Traynor, and L. Anthony. Kiss from a rogue: Evaluating detectability
In 2019 IEEE Symposium on
of pay-at-the-pump card skimmers.
Security and Privacy (SP), pages 1000–1014, 2019.
[47] Nolen Scaife, Christian Peeters, and Patrick Traynor. Fear the reaper:
Characterization and fast detection of card skimmers. In 27th USENIX
Security Symposium (USENIX Security 18), pages 1–14, Baltimore, MD,
2018. USENIX Association.
[48] Stripe. Disputes and fraud. https://stripe.com/docs/disputes.
[49] Arm technologies. Arm big.little.
https://www.arm.com/why-arm/
technologies/big-little.
[50] Uber.
Verifying your account.
https://help.uber.com/ubereats/
article/verifying-your-account?nodeId=0b38e02f-eb4c-41f9-92e5-
6b8c409e20c7.
[51] Erkam Uzun, Simon Chung, Irfan Essa, and Wenke Lee. rtcaptcha: A
real-time captcha based liveness detection system. 02 2018.
[52] Verizon. What is the difference between 3G, 4G and 5G? https://www.
verizon.com/about/our-company/5g/difference-between-3g-4g-5g.
[53] Robert Wang, Xiang Li, Shuang Ao, and Charles Ling. Pelee: A real-
time object detection system on mobile devices. 04 2018.
[54] C. Wu, D. Brooks, K. Chen, D. Chen, S. Choudhury, M. Dukhan,
K. Hazelwood, E. Isaac, Y. Jia, B. Jia, T. Leyvand, H. Lu, Y. Lu,
L. Qiao, B. Reagen, J. Spisak, F. Sun, A. Tulloch, P. Vajda, X. Wang,
Y. Wang, B. Wasti, Y. Wu, R. Xian, S. Yoo, and P. Zhang. Machine
learning at facebook: Understanding inference at the edge. In 2019 IEEE
International Symposium on High Performance Computer Architecture
(HPCA), pages 331–344, 2019.
[55] Mengwei Xu, Jiawei Liu, Yuanqiang Liu, Felix Xiaozhu Lin, Yunxin
Liu, and Xuanzhe Liu. A ﬁrst look at deep learning apps on smartphones.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:08 UTC from IEEE Xplore.  Restrictions apply. 
1639
In The World Wide Web Conference, WWW ’19, page 2125–2136, New
York, NY, USA, 2019. Association for Computing Machinery.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:08 UTC from IEEE Xplore.  Restrictions apply. 
1640