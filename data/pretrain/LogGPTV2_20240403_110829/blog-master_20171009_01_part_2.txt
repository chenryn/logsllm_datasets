create index idx_gin_06 on uid_arts_like using gin ( tags gin__int_ops );    
create index idx_gin_07 on art_uids_view using gin ( uids gin__int_ops );    
create index idx_gin_08 on art_uids_like using gin ( uids gin__int_ops );    
```  
## 填充测试数据  
1、生成1000万用户  
```  
insert into users select id, md5(id::text), now() from generate_series(1,10000000) t(id);  
```  
2、生成10万标签  
```  
insert into tags select id, md5(id::text), now() from generate_series(1,100000) t(id);  
```  
3、生成5000万文章  
```  
create or replace function gen_arr(int,int) returns int[] as $$  
  select array(select ceil(random()*$1) from generate_series(1,$2))::int[];  
$$ language sql strict;  
```  
```  
insert into arts select id, md5(id::text),   
  gen_arr(10000000 ,3),    
  gen_arr(100000 ,10)   
from generate_series(1,50000000) t(id);  
```  
4、生成正向关系，平均每篇文章被500人阅读，被50人收藏。  
```  
insert into art_uids_view select id, gen_arr(10000000, 500) from generate_series(1,50000000) t(id);  
insert into art_uids_like select id, gen_arr(10000000, 50) from generate_series(1,50000000) t(id);  
```  
5、生成反向关系（按理说，反向关系和正向关系应该一一对应，为了测试方便，我这里就不对应了，测试效果是一样的）  
平均每人阅读1000篇文章，涉及500个标签。收藏100篇文章，涉及50个标签。  
```  
insert into uid_arts_view select id, gen_arr(50000000, 1000), gen_arr(100000, 500) from generate_series(1,10000000) t(id);  
insert into uid_arts_like select id, gen_arr(50000000, 100), gen_arr(100000, 50) from generate_series(1,10000000) t(id);  
```  
## 性能测试  
1、阅读了此篇文章的其他人还在阅读什么其他文章，(过滤当前文章、以及我阅读过的文章)。  
```  
select rec_arts_view(1,2,10);    -- 文章ID=1， 当前用户ID=2，  返回10条推荐文章给当前用户。  
```  
其他人一共阅读了约50万其他文章，获取加排序耗时：200毫秒。   
```
postgres=# select count(*) from rec_arts_view(1,4,1000000);
 count  
--------
 497524
(1 row)
Time: 565.524 ms
postgres=# select count(*) from rec_arts_view(1,4,10);
 count 
-------
    10
(1 row)
Time: 198.368 ms
```
2、与我（阅读文章）爱好相近的人有哪些。  
```  
set smlar.type='overlap';        
set smlar.threshold=10;             -- 设置重叠阈值  
select arts into v1 from uid_arts_view where uid = 1;       -- 我阅读了哪些文章  
select      
    *,      
    smlar( arts, v1, 'N.i' )       -- 其他人与我阅读的文章的重叠数是多少  
  from      
    uid_arts_view      
  where      
    arts % v1                      -- where cosine similarity >= smlar.threshold      
;    
```  
耗时：2.4毫秒。     
```
 Bitmap Heap Scan on public.uid_arts_view  (cost=933.50..29296.93 rows=10000 width=72) (actual time=1.955..2.351 rows=2 loops=1)
   Output: uid, arts, tags, smlar(arts, '{25213311,49886221,45108456,27929256,20760231,35023889,17507871,43947072,48578113,41561690,39557908,26852171,29310889,5029778,24892381,12174141,9191797,41397570,25795440,27806324,28635176}'::integer[], 'N.i'::text)
   Recheck Cond: (uid_arts_view.arts % '{25213311,49886221,45108456,27929256,20760231,35023889,17507871,43947072,48578113,41561690,39557908,26852171,29310889,5029778,24892381,12174141,9191797,41397570,25795440,27806324,28635176}'::integer[])
   Heap Blocks: exact=2
   Buffers: shared hit=107
   ->  Bitmap Index Scan on idx_gin_3  (cost=0.00..931.00 rows=10000 width=0) (actual time=1.506..1.506 rows=2 loops=1)
         Index Cond: (uid_arts_view.arts % '{25213311,49886221,45108456,27929256,20760231,35023889,17507871,43947072,48578113,41561690,39557908,26852171,29310889,5029778,24892381,12174141,9191797,41397570,25795440,27806324,28635176}'::integer[])
         Buffers: shared hit=85
 Planning time: 0.110 ms
 Execution time: 2.378 ms
(10 rows)
```
### 预计算与性能优化
前面的推荐文章、找相似的人。指的是实时查询的性能，而实际这些操作都可以预计算的(因为文章增量不会太大、而且文章的阅读人群变化不会太大)，例如一天刷新一次，那么像用户推荐相似用户，推荐相似文章时，有预计算则直接查询结果，那性能会提升到0.0N毫秒级响应。没有预计算的新文章，则实时查询（并更新到预计算的表中），也能够毫秒级响应。    
预计算还可以做成另一种模式，当有人查询这篇文章时，根据上次预计算的时间，决定是否需要重新查询，并更新它。   （也就是说，实时计算 + 缓存 + 缓存超时  的模式。）     
逻辑如下   
```
select xxx from pre_view_tbl where xxx=xxx;  -- 查询缓存，return
-- 写入或更新缓存
if not found then
  -- 同步写入
  insert into pre_view_tbl select xxxx returning *; -- 实时计算, 并返回
else if mod_time < (now() - 超时阈值) then
  -- 异步
  delete from pre_view_tbl where xxx=xxx;
  insert into pre_view_tbl select xxxx; -- 实时计算
end if;
```
## 小结  
3分开发，7分运营。内容网站与社交软件类似，运营是重头戏。运营中关键的一环是圈子，圈子可以聚人气，形成圈子往往靠的是推荐，推荐的源头又是行为，推荐什么样的内容、人给目标，靠的是行为。所谓物以类聚，人以群居，就是这个理。  
PostgreSQL 的数组、smlar实现高效的归类查询、推荐需求非常的方便。  
1、数组用于存储正向和反向关系，标签等。  
2、smlar用于查询相似的数组（找出爱好相似的人）。  
在社交运营、内容运营场景中，非常方便、高效。  
热点人、热点文章也不在话下，在其他案例中已经测试过，可以参考本文末尾。  
## 参考  
https://www.postgresql.org/docs/10/static/plpgsql.html  
[《电商内容去重\内容筛选应用(实时识别转载\盗图\侵权?) - 文本、图片集、商品集、数组相似判定的优化和索引技术》](../201701/20170112_02.md)    
https://www.postgresql.org/docs/10/static/intarray.html  
计数、实时需求也口可以使用流计算，案例参考：  
[《三体高可用PCC大赛 - facebook\微博 like场景 - 数据库设计与性能压测》](../201705/20170512_02.md)    
https://github.com/bitnine-oss/agensgraph   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")