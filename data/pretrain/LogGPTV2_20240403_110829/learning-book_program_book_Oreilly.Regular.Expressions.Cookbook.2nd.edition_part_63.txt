valid needs to match the path only once.
We start with \A> or ^) to anchor the match to the start of the string.  skips over the authority. We can use
this very simple regex for the authority because we already know it to be valid,
and we're not interested in extracting the user, host, or por from the authority.
(forward slash), query (question mark), or fragment (hash). Thenegated characterclass
The authority starts with two forward slashes, and runs until the start of the path
matches everything up to the first forward slash, question mark, or hash (Recipe 2.3).
Because the authority is optional, we put it into a group followed by the question mark
quantifier: , The scheme is also optional. If the scheme is omitted, the
authority must be omitted, too. To match this, we place the parts of the regex for the
scheme and the optional authority in anothergroup, also made optional with a question
mark.
Since we know the URL to be valid, we can easily match the path with a single character
class  that includes the forward slash. We don’t need
to check for consecutive forward slashes, which aren't allowed in paths in URLs.
We indeed use an asterisk rather than a plus as the quantifier on the character class for
the path. It may seem strange to make the path optional in a regex that only exists to
extract the path from a URL. Actually, making the path optional is essential because
of the shortcuts we took in skipping over the scheme and the authority.
462 | Chapter 8: URLs, Paths, and Intemet Adreses
---
## Page 479
In the generic regex for URLs in Recipe 8.7, we have three different ways of matching
the path, depending on whether the scheme and/or authority are present in the URL.
This makes sure the scheme isn’t accidentally matched as the path.
Considerthe URLhttp://regexcookbook,com, which hasaschemeandan authority
Now we’re trying to keep things simple by using only one character class for the path.
but no path. The first part of ourregex will happily match the scheme and theauthority.
The regex engine then tries to match the character class for the path, but there are no
characters left. If the path is optional (using the asterisk quantifier), the regex engine
is perfectly happy not to match any characters for the path. It reaches the end of the
regex and declares that an overall match has been found.
But if the character class for the path is not optional, the regex engine backtracks. (See
Recipe 2.13 if you're not familiar with backtracking.) It remembered that the authority
and scheme parts of our regex are optional, so the engine says: let'’s try this again,
+ would then match /regexcookbook,con for the path, clearly not what we want.
without allowing  to match anything. ([^#]+)
Regex options: Case insensitive
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
Extracting the query from a URL is trivial if you know that your subject text is a valid
URL. The query is delimited from the part of the URL before it with a question mark.
That is the first question mark allowed anywhere in URLs. Thus, we can easily skip
seeueiau e seu uosanb au +[#]>m xaeu uosnb sg aui on peaqe
only outside character classes, but not inside, so we escape the literal question mark
outside the character class. The first  is an anchor (Recipe 2.5), whereas the second
(^) negates the character class (Recipe 2.3).
464 | Chapter 8: URLs, Paths, and IntemetAdresses
---
## Page 481
Question marks can appear in URIs as part of the (optional) fragment after the query.
So we do need to use [?#]+\?>, rather than just \?>, to make sure we have the first
question mark in the URL, and make sure that it isn’t part of the fragment in a URL
without a query.
The query runs until the start of the fragment, or the end of the URL if there is no
fragment. The fragment is delimited from the rest of the URL with a hash sign. Since
hash signs are not permitted anywhere except in the fragment,  in a regular expression. Since we can have any number of subdomains in addition
that we repeat: ., Since the subdomains follow the same
syntax as the domain, this one group handles both.
If you want to check whether astring represents a valid domain name, a that remains
is to add anchors to the start and the end of the regex that match at the start and the
end of the string. We can do this with (^) and $ in all flavors except Ruby, and with
; see Recipe 2.6).
Our first set of regular expressions doesn’t check whether each part of the domain is
no longer than 63 characters. We can’t easily do this, because our regex for each domain
part,  to match a domain part that is 1 to 63 characters long.
or  to match a domain name with valid hyphens, and add [-a-
20-9]1,63),> inside a lookahead to check that its length is also 63 characters or less.
The result is  first checks that there are 1 to 63 letters, digits,
and hyphens until the next dot. It’s important to include the dot in the lookahead.
Without it, domains longer than 63 characters would still satisfy the lookahead’s re-
quirement for 63 characters. Only by putting the literal dot inside the lookahead do we
enforce the requirement that we want at most 63 characters.
The lookahead does not consume the text that it matched. Thus, if the lookahead
succeeds,  to the group in our regular expression that matches the domain name
parts.
SeeAlso
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.1 explains which special characters need to be escaped. Recipe 2.3 explains
character classes. Recipe 2.5 explains anchors. Recipe 2.6 explains word boundaries.
468 | Chapter 8: URLs, Paths, and Intemet Adreses
---
## Page 485
Recipe 2.9 explains grouping. Recipe 2.12 explains repetition. Recipe 2.16 explains
lookaround.
8.16MatchingIPv4Addresses
Problem
 ssape tdl pa t ssudn us uio e rq p on uea no
255.255.255.255 notation. Optionally, you want to convert this address into a 32-bit
integer.
Solution
Regular expression
Simple regex to check for an IP address:
(?:[0-9]{1,3)\-){3}[0-9](1,3}$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Accurate regex to check for an IP address, allowing leading zeros:
(?:(?:25[0-5]|2[0-4][0-9]][01]?[0-9][0-9]).){3}
(?:25[0-5]|2[0-4][0-9]][01]?[0-9][0-9]?]$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Accurate regex to check for an IP address, disallowing leading zeros:
(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]∣[1-9][0-9])-){3] +
?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]1[1-9]?[0-9]]$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Simple regex to extract IP addresses from longer text:
\b(?:[0-9]{1,3}-){3}[0-9]{1,3}b
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Accurate regex to extract IP addresses from longer text, allowing leading zeros:
b(?:(?:25[0-5]]2[0-4][0-9]|[01][0-9][0-9]?).){3}
(?:25[0-5]|2[0-4][0-9]][01]?[0-9][0-9]?)\b
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Accurate regex to extract IP addresses from longer text, dis25[0-5]2[0-4][0-9]1[0-9]
[0-9]|[1-9][0-9]allowing leading zeros:
8.16 Matching IPv4 Addresses I 469
---
## Page 486
b(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9]).){3}
?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]][1-9]?[0-9]]b
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Simple regex that captures the four parts of the IP address:
{[0-9]{1,3}).([0-9]{1,3))([0-9](1,3})([0-9]{1,3})$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Accurate regex that captures the four parts of the IP address, allowing leading zeros: