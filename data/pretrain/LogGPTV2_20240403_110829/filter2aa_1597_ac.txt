 defer func() { 
  abort ///bin
       srcDir - ~/.sliver/slivers////src
6. 将代码拷⻉到指定⽬录 如果是dll或者是shellcode的才导⼊ sliver.c 和sliver.h 拷⻉ sliver.go 
sliver.go 是⼀个模板代码  模板⽂件 很⻓ 
server/generate/binaries.go#453 renderSliverGoCode
sliver 简单使⽤及源码浅析
21
 利⽤模板⽣成beacon go代码
7. 编译代码⽣成特定的⽂件 如 执⾏⽂件 dll so ⽂件等 使⽤ GoCmd
// This function is a little too long, we should probably refactor it as some point 
func renderSliverGoCode(name string, config *models.ImplantConfig, goConfig *gogo.GoConfig) (string, error) { 
 var err error 
 target := fmt.Sprintf("%s/%s", config.GOOS, config.GOARCH) 
 if _, ok := gogo.ValidCompilerTargets(*goConfig)[target]; !ok { 
  return "", fmt.Errorf("invalid compiler target: %s", target) 
 } 
 buildLog.Debugf("Generating new sliver binary '%s'", name) 
 config.MTLSc2Enabled = isC2Enabled([]string{"mtls"}, config.C2) 
 config.WGc2Enabled = isC2Enabled([]string{"wg"}, config.C2) 
 config.HTTPc2Enabled = isC2Enabled([]string{"http", "https"}, config.C2) 
 config.DNSc2Enabled = isC2Enabled([]string{"dns"}, config.C2) 
 config.NamePipec2Enabled = isC2Enabled([]string{"namedpipe"}, config.C2) 
 config.TCPPivotc2Enabled = isC2Enabled([]string{"tcppivot"}, config.C2) 
 sliversDir := GetSliversDir() // ~/.sliver/slivers 
 projectGoPathDir := path.Join(sliversDir, config.GOOS, config.GOARCH, path.Base(name)) 
 if _, err := os.Stat(projectGoPathDir); os.IsNotExist(err) { 
  os.MkdirAll(projectGoPathDir, 0700) 
 } 
 goConfig.ProjectDir = projectGoPathDir 
 // Cert PEM encoded certificates 
 serverCACert, _, _ := certs.GetCertificateAuthorityPEM(certs.MtlsServerCA) 
 sliverCert, sliverKey, err := certs.MtlsC2ImplantGenerateECCCertificate(name) 
 if err != nil { 
  return "", err 
 } 
 // ECC keys 
 implantKeyPair, err := cryptography.RandomECCKeyPair() 
 if err != nil { 
  return "", err 
 } 
 serverKeyPair := cryptography.ECCServerKeyPair() 
 digest := sha256.Sum256((*implantKeyPair.Public)[:]) 
 config.ECCPublicKey = implantKeyPair.PublicBase64() 
 config.ECCPublicKeyDigest = hex.EncodeToString(digest[:]) 
 config.ECCPrivateKey = implantKeyPair.PrivateBase64() 
 config.ECCPublicKeySignature = cryptography.MinisignServerSign(implantKeyPair.Public[:]) 
 config.ECCServerPublicKey = serverKeyPair.PublicBase64() 
 config.MinisignServerPublicKey = cryptography.MinisignServerPublicKey() 
 // MTLS keys 
 if config.MTLSc2Enabled { 
  config.MtlsCACert = string(serverCACert) 
  config.MtlsCert = string(sliverCert) 
  config.MtlsKey = string(sliverKey) 
 } 
 otpSecret, err := cryptography.TOTPServerSecret() 
 if err != nil { 
  return "", err 
 } 
 // Generate wg Keys as needed 
 if config.WGc2Enabled { 
  implantPrivKey, _, err := certs.ImplantGenerateWGKeys(config.WGPeerTunIP) 
  if err != nil { 
   return "", err 
  } 
  _, serverPubKey, err := certs.GetWGServerKeys() 
  if err != nil { 
   return "", fmt.Errorf("failed to embed implant wg keys: %s", err) 
  } 
  config.WGImplantPrivKey = implantPrivKey 
  config.WGServerPubKey = serverPubKey 
 } 
 err = ImplantConfigSave(config) 
 if err != nil { 
  return "", err 
sliver 简单使⽤及源码浅析
22
 } 
 // binDir - ~/.sliver/slivers////bin 
 binDir := filepath.Join(projectGoPathDir, "bin") 
 os.MkdirAll(binDir, 0700) 
 // srcDir - ~/.sliver/slivers////src 
 srcDir := filepath.Join(projectGoPathDir, "src") 
 assets.SetupGoPath(srcDir)            // Extract GOPATH dependency files 
 err = util.ChmodR(srcDir, 0600, 0700) // Ensures src code files are writable 
 if err != nil { 
  buildLog.Errorf("fs perms: %v", err) 
  return "", err 
 } 
 sliverPkgDir := filepath.Join(srcDir, "github.com", "bishopfox", "sliver") // "main" 
 err = os.MkdirAll(sliverPkgDir, 0700) 
 if err != nil { 
  return "", nil 
 } 
 err = fs.WalkDir(implant.FS, ".", func(fsPath string, f fs.DirEntry, err error) error { 
  if f.IsDir() { 
   return nil 
  } 
  buildLog.Debugf("Walking: %s %s %v", fsPath, f.Name(), err) 
  sliverGoCodeRaw, err := implant.FS.ReadFile(fsPath) 
  if err != nil { 
   buildLog.Errorf("Failed to read %s: %s", fsPath, err) 
   return nil 
  } 
  sliverGoCode := string(sliverGoCodeRaw) 
  // Skip dllmain files for anything non windows 
  if f.Name() == "sliver.c" || f.Name() == "sliver.h" { 
   if !config.IsSharedLib && !config.IsShellcode { 
    return nil 
   } 
  } 
  var sliverCodePath string 