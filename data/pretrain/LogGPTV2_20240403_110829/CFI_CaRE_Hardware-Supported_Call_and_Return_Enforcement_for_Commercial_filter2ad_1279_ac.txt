The instrumentation must intercept all subroutine calls and returns. Further-
more, it should have minimal impact on code footprint. Prior shadow stack
schemes either instrument the subroutine prologue and epilogue [10,14], or the
call site [14], pushing the return address to the shadow stack upon a subroutine
7 A call graph is a control-ﬂow graph which represents the calling relationships between
subroutines in a program.
270
T. Nyman et al.
3
bootstrap
b0 
b1 
b2 
b3 
e
x
t
e
r
n
a
l
i
n
t
e
r
r
u
p
t
s
5
h1
h2
h3 
4
Main Program
f5
f7
f1 
f2
f3
f6
f4
Fig. 2. CaRE overview
Normal State
Secure State
Shadow
Stack
2
Push
Pop
Secure
Code
svc
svc
svc
svc
svc
m0
1
Branch
Monitor
call, and validating the return address on top of the shadow stack upon return.
We propose an alternative approach which is layout-preserving.
In uninstrumented code, the target address of direct subroutine calls (i.e., bl
instructions with immediate operands) are encoded as pc-relative oﬀsets (i.e.,
signed integer values). In other words, the destination address depends on the
location of the branch instruction in memory. During instrumentation, we cal-
culate the absolute destination address, and store it in a data structure, called
the branch table which at runtime resides in read-only non-secure memory. Each
destination address in this branch table is indexed by the memory address of
the original branch instruction. The original branch instruction is overwritten
with a dispatch instruction, which, when executed, traps into the Branch Moni-
tor. At runtime, whenever an instruction rewritten in this fashion traps into the
Branch Monitor, the Branch Monitor will lookup the destination address from
the branch table, and redirect control ﬂow to the original destination address.
In a similar manner, indirect branches corresponding to calls and eﬀective
returns are replaced with dispatch instructions. The destination address of the
branches are only known at runtime, determined by a register value (lr in the
case of eﬀective returns), or by a return address stored on the program call
stack, and hence do not inﬂuence the construction of the branch table during
instrumentation.
To address JOP attacks, our CFI enforcement must also be able to determine
legal call targets for indirect calls. In the case of indirect subroutine calls, the
call target must be a valid entry point to the destination subroutine, i.e., the
call must target the beginning of the subroutine prologue. The entry addresses
are extracted from the symbol information emitted by the compiler for debug
purposes. Further restriction of call targets is possible by means of static or
dynamic analysis (see Sect. 6). Since CaRE only requires the addresses of entry
CFI CaRE: Hardware-Supported Call and Return Enforcement
271
points, not the full debug information, the entry points are included in the
software image in a call target table on the device in a similar manner to the
branch table. When an indirect call occurs, the Branch Monitor will match the
branch target against this record of valid subroutine entry points.
In our implementation, we use the supervisor call svc instruction as the
dispatch instruction, and place the Branch Monitor in the supervisor call excep-
tion handler. The svc instruction has a number of desirable properties which
make it suitable as a dispatch. Firstly, it allows for an 8-bit comment ﬁeld,
which is ignored by hardware, but can be interpreted in software, typically to
determine the service requested. We exploit this comment ﬁeld to identify the
type of the original instruction, overwritten during the instrumentation (e.g. bl,
blx, pop {..., pc} etc.). Secondly, the supervisor call handler executes at the
highest exception priority, allowing us to pre-empt execution to the Branch Mon-
itor when instrumenting exception handlers. Lastly, because the svc in Thumb
instruction is a 16-bit instruction, it can be used for instrumenting both 32-bit
and 16-bit instructions. When replacing 32-bit instructions, e.g., a Thumb-2 bl
instruction with an immediate operand, we use the sequence 0xb000, which cor-
responds to the opcode for add sp, #0 (eﬀectively a NOP) as padding to ﬁll
the remaining 16 bits of the original bl.
4.4 Implementation
We implemented a proof-of-concept prototype of CaRE on the ARM Versa-
tile Express Cortex-M Prototyping System MPS2+ conﬁgured as a Cortex-
M23 CPU.
Non-secure memory
Non-secure memory
Secure memory
4
6
7
Secure shadow stack 
gateway veneers
Secure shadow 
stack opera(cid:415)ons 
5
Secure shadow 
stack
Legend
Original branches
Instrumented call
Instrumented return
4
5
6
Call to secure gateway
Branch to secure 
subrou(cid:415)ne
Return branch to 
non-secure code
3
Branch Monitor
Non-secure code
Non-secure code
1
bl 
1
svc #1
sub:
2
bx lr
sub:
2
svc #2
8
Non-secure data
Non-secure data
uninstrumented
program
instrumented
program
Fig. 3. CaRE instrumented control ﬂow
272
T. Nyman et al.
We implemented a binary rewriter to perform the instrumentation on non-
secure state binaries. It utilizes the Capstone disassembly engine8 to identify
control-ﬂow instructions for rewriting.
Figure 3 illustrates the altered control-ﬂow changes. When a dispatch instruc-
tion is encountered in the program (❶), instead of taking a control-ﬂow trans-
fer directly to the original target (❷), program execution is temporarily halted
by a trap into the Branch Monitor (❸). The Branch Monitor will update the
shadow stack maintained in secure memory by invoking secure shadow stack
operations entry points in the gateway veneer (❹), which allow access to the
secure state subroutines handling the actual update (❺). Upon completion, con-
trol is returned to the non-secure Branch Monitor code (❻), which ﬁnally redi-
rects control ﬂow to the intended destination (❼). The same sequence applies
both for calls, and returns (❽).
Branch Monitor. The Branch Monitor is responsible for dispatching and validat-
ing control-ﬂow transfers that occur during program execution. When invoked,
it will ﬁrst determine the reason for the trap based on the svc comment and
trigger the corresponding branch handler routine within the Branch Monitor.
The routine updates the shadow stack accordingly (pushes return address on
subroutine calls, pops and validates return address on subroutine returns) and
redirects the control ﬂow to the intended target. For branches corresponding
to direct subroutine calls a branch table lookup is needed since the target of a
call is not anymore evident from the dispatch instruction. For indirect calls, the
Branch Monitor veriﬁes that each call targets a valid subroutine entry within
the main program by looking up the target from the call target table.
As the Branch Monitor executes in the supervisor call handler, the main
stack contains a context state stack frame corresponding to the processor state
at the point the supervisor call exception was taken (see Table 1). Control-ﬂow
redirection is triggered by manipulating stored pc and lr values in the context
stack frame and performing an exception return from the Branch Monitor (see
below), which causes the processor to restore the context stack frame and resume
execution from the address in the stored pc.
Interrupt awareness. An important feature of M-class cores is their deterministic
interrupt latency in part attributable to the fact that the context-switch, while
entering the exception handler, is performed entirely in hardware. An instruction
that triggers an exception, such as the svc used for supervisor calls, causes (1)
the hardware to save the current execution context state onto a stack pointed
to by one of the sp registers, (2) the ipsr to be updated with the number of the
taken exception, and (3) the processor to switch into Handler mode in which
exceptions are taken. Table 1 shows the layout of a typical stack frame created
during exception entry9. The value stored at oﬀset 0x18 in the stack frame is
8 http://www.capstone-engine.org/.
9 In Cortex-M processors that implement the ﬂoating point extensions, the context
stack frame may also contain the values of ﬂoating point registers.
CFI CaRE: Hardware-Supported Call and Return Enforcement
273
Table 1. Context state stack frame layout [4]
Oﬀset Stack contents
0x1C
0x18
0x14
0x10
0x0C
0x08
0x04
0x00
xpsr
pc
lr
r12
r3
r2
r1
r0
← sp
the pc value at the point the exception was taken, and represents the return
value from which program execution shall continue after the exception handler
exits. To facilitate fast restoration of the saved context state, M-class processors
support a special return sequence which restores the saved values on the stack
into their corresponding registers. This sequence is known as an exception return
and occurs when the processor is in Handler mode, and a special Exception
Return Value (ERV) is loaded into the pc either via a pop instruction, or a bx
with any register. ERVs are of the form 0xFXXXXXXX, and encode in their
lower-order bits information about the current processor state and state before
the current exception was taken. ERVs are not interpreted as memory addresses,
but are intercepted by the processor as they are written to the pc. When this
occurs, the processor will validate that there is an exception currently being
handled, and that its number matches the exception number in the ipsr. If the
exception numbers match, the processor performs an exception return to the
processor mode speciﬁed by the ERV, restoring the previous register state from
the current stack, including the stored pc. This causes the processor to continue
execution from the point in the program at which the exception was originally
taken. When multiple exceptions are pending, lower priority exceptions may
be tail-chained which causes the processor to directly begin executing the next