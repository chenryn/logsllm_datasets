title:Four Attacks and a Proof for Telegram
author:Martin R. Albrecht and
Lenka Marekov&apos;a and
Kenneth G. Paterson and
Igors Stepanovs
6
6
6
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Four Attacks and a Proof for Telegram
∗Information Security Group, Royal Holloway, University of London, {martin.albrecht,lenka.marekova.2018}@rhul.ac.uk
Martin R. Albrecht∗, Lenka Mareková∗, Kenneth G. Paterson† and Igors Stepanovs†
†Applied Cryptography Group, ETH Zurich, {kenny.paterson,istepanovs}@inf.ethz.ch
Abstract—We study the use of symmetric cryptography in
the MTProto 2.0 protocol, Telegram’s equivalent of the TLS
record protocol. We give positive and negative results. On the
one hand, we formally and in detail model a slight variant of
Telegram’s “record protocol” and prove that it achieves security
in a suitable bidirectional secure channel model, albeit under
unstudied assumptions; this model itself advances the state-of-the-
art for secure channels. On the other hand, we ﬁrst motivate our
modelling deviation from MTProto as deployed by giving two
attacks – one of practical, one of theoretical interest – against
MTProto without our modiﬁcations. We then also give a third
attack exploiting timing side channels, of varying strength, in three
ofﬁcial Telegram clients. On its own this attack is thwarted by the
secrecy of salt and id ﬁelds that are established by Telegram’s key
exchange protocol. To recover these, we chain the third attack
with a fourth one against the implementation of the key exchange
protocol on Telegram’s servers. In totality, our results provide
the ﬁrst comprehensive study of MTProto’s use of symmetric
cryptography.
I. Introduction
Telegram is a chat platform that in January 2021 reportedly
had 500M monthly users [1]. It provides a host of multimedia
and chat features, such as one-on-one chats, public and private
group chats for up to 200,000 users as well as public channels
with an unlimited number of subscribers. Prior works establish
the popularity of Telegram with higher-risk users such as
activists [2] and participants of protests [3]. In particular, it
is reported in [2], [3] that these groups of users shun Signal
in favour of Telegram, partly due to the absence of some key
features, but mostly due to Signal’s reliance on phone numbers
as contact handles.
This heavy usage contrasts with the scant attention paid
to Telegram’s bespoke cryptographic design – MTProto – by
the cryptographic community. To date, only four works treat
Telegram. In [4] an attack against the IND-CCA security of
MTProto 1.0 was reported, in response to which the protocol
was updated. In [5] a replay attack based on improper validation
in the Android client was reported. Similarly, [6] reports input
validation bugs in Telegram’s Windows Phone client. Recently,
in [7] MTProto 2.0 (the current version) was proven secure
in a symbolic model, but assuming ideal building blocks and
abstracting away all implementation/primitive details. In short,
the security that Telegram offers is not well understood.
Telegram uses its MTProto “record layer” – offering protec-
tion based on symmetric cryptographic techniques – for two
different types of chats. By default, messages are encrypted
and authenticated between a client and a server, but not end-
to-end encrypted: such chats are referred to as cloud chats.
Here Telegram’s MTProto protocol plays the same role that
TLS plays in e.g. Facebook Messenger. In addition, Telegram
offers optional end-to-end encryption for one-on-one chats
which are referred to as secret chats (these are tunnelled over
cloud chats). So far, the focus in the cryptographic literature
has been on secret chats [4], [6] as opposed to cloud chats.
In contrast, in [3] it is established that the one-on-one chats
played only a minor role for the protest participants interviewed
in the study; signiﬁcant activity was reportedly coordinated
using group chats secured by the MTProto protocol between
Telegram clients and the Telegram servers. For this reason,
we focus here on cloud chats. Given the similarities between
the cryptography used in secret and cloud chats, our positive
results can be modiﬁed to apply to the case of secret chats
(but we omit any detailed analysis).
A. Contributions
We provide an in-depth study of how Telegram uses
symmetric cryptography inside MTProto for cloud chats. We
give four distinctive contributions: our security model for secure
channels, the formal model of our variant of MTProto, our
attacks on the original protocol and our security proofs for the
formal model of MTProto.
Security model: Starting from the observation that MTProto
entangles the keys of the two channel directions, in Section III
we develop a bidirectional security model for two-party secure
channels that allows an adversary full control over generating
and delivering ciphertexts from/to either party (client or server).
The model assumes that the two parties start with a shared key
and use stateful algorithms. Our security deﬁnitions come in
two ﬂavours, one capturing conﬁdentiality, the other integrity.
Our formalisation is broad enough to consider a variety of
different styles of secure channels – for example, allowing
channels where messages can be delivered out-of-order within
some bounds, or where messages can be dropped (neither of
which we consider appropriate for secure messaging). This
caters for situations where the secure channel operates over an
unreliable transport protocol, but where the channel is designed
to recover from accidental errors in message delivery as well
as from certain permitted adversarial behaviours.
This is done technically by introducing the concept of
support functions, inspired by the support predicates recently
introduced by [8] but extending them to cater for a wider range
of situations. Here the core idea is that a support function
operates on the transcript of messages and ciphertexts sent and
received (in both directions) and its output is used to decide
whether an adversarial behaviour – say, dropping or reordering
messages – counts as a “win” in the security games. It is also
© 2022, Martin R. Albrecht. Under license to IEEE.
DOI 10.1109/SP46214.2022.00014
87
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
used to deﬁne a suitable correctness notion with respect to
expected behaviours of the channel.
As a ﬁnal feature, our secure channel deﬁnitions allow the
adversary complete control over all randomness used by the
two parties, since we can achieve security against such a strong
adversary in the stateful setting. This decision reﬂects a concern
about Telegram clients expressed by Telegram developers [9].
Formal model of MTProto: In Section IV, we provide a
detailed formal model of Telegram’s symmetric encryption.
Our model is computational and does not abstract away the
building blocks used in Telegram. This in itself is a non-trivial
task as no formal speciﬁcation exists and behaviour can only
be derived from ofﬁcial (but incomplete) documentation and
from observation; moreover different clients do not have the
same behaviour.
Formally, we deﬁne an MTProto-based bidirectional channel
MTP-CH as a composition of multiple cryptographic primitives.
This allows us to recover a variant of the real-world MTProto
protocol by instantiating the primitives with speciﬁc construc-
tions, and to study whether each of them satisﬁes the security
notions that are required in order to achieve the desired security
of MTP-CH. This allows us to work at two different levels of
abstraction, and signiﬁcantly simpliﬁes the analysis. However,
we emphasise that our goal is to be descriptive, not prescriptive,
i.e. we do not suggest alternative instantiations of MTP-CH.
To arrive at our model, we had to make several decisions
on what behaviour to model and where to draw the line of
abstraction. Notably, there are various behaviours exhibited by
(ofﬁcial) Telegram implementations that lead to attacks.
In particular, we veriﬁed in practice that current implementa-
tions allow an attacker on the network to reorder messages from
a client to the server, with the transcript on the client being
updated later to reﬂect the attacker-altered server’s view. We
stress, though, that this trivial yet practical attack is not inherent
in MTProto and can be avoided by updating the processing of
message metadata in Telegram’s servers.
Further, if a message is not acknowledged within a certain
time in MTProto, it is resent using the same metadata and with
fresh random padding. While this appears to be a useful feature
and a mitigation against message deletion, it would actually
enable an attack in our formal model if such retransmissions