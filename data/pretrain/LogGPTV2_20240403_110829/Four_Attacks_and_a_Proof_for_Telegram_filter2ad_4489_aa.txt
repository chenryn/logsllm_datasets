# Four Attacks and a Proof for Telegram

**Authors:**
- Martin R. Albrecht
- Lenka Mareková
- Kenneth G. Paterson
- Igors Stepanovs

**Affiliations:**
- Information Security Group, Royal Holloway, University of London, {martin.albrecht, lenka.marekova.2018}@rhul.ac.uk
- Applied Cryptography Group, ETH Zurich, {kenny.paterson, istepanovs}@inf.ethz.ch

**Publication:**
2022 IEEE Symposium on Security and Privacy (SP)

**Abstract:**
We analyze the use of symmetric cryptography in the MTProto 2.0 protocol, which is Telegram's equivalent of the TLS record protocol. Our study includes both positive and negative results. On the one hand, we formally model a variant of Telegram’s “record protocol” and prove its security in a suitable bidirectional secure channel model, albeit under unstudied assumptions. This model advances the state-of-the-art for secure channels. On the other hand, we present two attacks against MTProto as deployed, one of practical and one of theoretical interest. We also describe a third attack exploiting timing side channels in three official Telegram clients. To recover the secret salt and id fields, we combine this with a fourth attack against the key exchange protocol on Telegram’s servers. Overall, our results provide the first comprehensive study of MTProto's use of symmetric cryptography.

## I. Introduction

Telegram is a chat platform that, as of January 2021, reportedly had 500 million monthly users [1]. It offers a range of multimedia and chat features, including one-on-one chats, public and private group chats for up to 200,000 users, and public channels with an unlimited number of subscribers. Previous studies have highlighted the popularity of Telegram among high-risk users such as activists [2] and protest participants [3]. These groups often prefer Telegram over Signal, partly due to the absence of certain key features in Signal and its reliance on phone numbers as contact handles.

Despite its widespread use, Telegram's custom cryptographic design, MTProto, has received limited attention from the cryptographic community. Only four prior works have addressed Telegram. In [4], an attack against the IND-CCA security of MTProto 1.0 was reported, leading to an update of the protocol. In [5], a replay attack based on improper validation in the Android client was described. Similarly, [6] reported input validation bugs in Telegram’s Windows Phone client. Recently, [7] proved the security of MTProto 2.0 in a symbolic model, assuming ideal building blocks and abstracting away all implementation details. In summary, the security provided by Telegram is not well understood.

Telegram uses its MTProto “record layer” for two types of chats. By default, messages are encrypted and authenticated between a client and a server, but not end-to-end encrypted; these are referred to as cloud chats. Here, MTProto plays a role similar to TLS in platforms like Facebook Messenger. Additionally, Telegram offers optional end-to-end encryption for one-on-one chats, known as secret chats, which are tunneled over cloud chats. The focus in the cryptographic literature has been on secret chats [4], [6] rather than cloud chats. However, [3] indicates that significant activity during protests was coordinated using group chats secured by MTProto between Telegram clients and servers. Therefore, we focus on cloud chats in this study. Given the similarities between the cryptography used in secret and cloud chats, our positive results can be adapted to apply to secret chats, though we do not provide a detailed analysis.

### A. Contributions

Our study provides an in-depth analysis of how Telegram uses symmetric cryptography within MTProto for cloud chats. We make four key contributions:
1. **Security Model for Secure Channels:** We develop a bidirectional security model for two-party secure channels, allowing an adversary full control over generating and delivering ciphertexts. This model assumes a shared key and stateful algorithms, with definitions for confidentiality and integrity.
2. **Formal Model of MTProto:** We provide a detailed formal model of Telegram’s symmetric encryption, which is computational and does not abstract away the building blocks used in Telegram.
3. **Attacks on the Original Protocol:** We present four distinct attacks, including two against MTProto as deployed, one exploiting timing side channels, and another against the key exchange protocol on Telegram’s servers.
4. **Security Proofs for the Formal Model:** We prove the security of our formal model of MTProto in the developed bidirectional secure channel model.

#### Security Model
Starting from the observation that MTProto entangles the keys of the two channel directions, we develop a bidirectional security model for two-party secure channels. This model allows an adversary full control over generating and delivering ciphertexts from/to either party (client or server). The model assumes that the two parties start with a shared key and use stateful algorithms. Our security definitions cover both confidentiality and integrity. 

Our formalization is broad enough to consider various styles of secure channels, such as those where messages can be delivered out-of-order within some bounds or where messages can be dropped. This caters to situations where the secure channel operates over an unreliable transport protocol but is designed to recover from accidental errors in message delivery and certain permitted adversarial behaviors.

Technically, we introduce the concept of support functions, inspired by the support predicates recently introduced by [8] but extended to cater for a wider range of situations. The core idea is that a support function operates on the transcript of messages and ciphertexts sent and received (in both directions), and its output is used to decide whether an adversarial behavior, such as dropping or reordering messages, counts as a “win” in the security games. It is also used to define a suitable correctness notion with respect to expected behaviors of the channel.

Additionally, our secure channel definitions allow the adversary complete control over all randomness used by the two parties, reflecting a concern about Telegram clients expressed by Telegram developers [9].

#### Formal Model of MTProto
In Section IV, we provide a detailed formal model of Telegram’s symmetric encryption. Our model is computational and does not abstract away the building blocks used in Telegram. This is a non-trivial task as no formal specification exists, and behavior can only be derived from official (but incomplete) documentation and observation. Moreover, different clients do not exhibit the same behavior.

Formally, we define an MTProto-based bidirectional channel MTP-CH as a composition of multiple cryptographic primitives. This allows us to recover a variant of the real-world MTProto protocol by instantiating the primitives with specific constructions and to study whether each of them satisfies the security notions required to achieve the desired security of MTP-CH. This approach allows us to work at two different levels of abstraction, significantly simplifying the analysis. However, our goal is to be descriptive, not prescriptive, i.e., we do not suggest alternative instantiations of MTP-CH.

To arrive at our model, we made several decisions on what behavior to model and where to draw the line of abstraction. Notably, there are various behaviors exhibited by (official) Telegram implementations that lead to attacks. For example, current implementations allow an attacker on the network to reorder messages from a client to the server, with the transcript on the client being updated later to reflect the attacker-altered server’s view. This trivial yet practical attack is not inherent in MTProto and can be avoided by updating the processing of message metadata in Telegram’s servers.

Further, if a message is not acknowledged within a certain time in MTProto, it is resent using the same metadata and with fresh random padding. While this appears to be a useful feature and a mitigation against message deletion, it would actually enable an attack in our formal model if such retransmissions were not handled correctly.