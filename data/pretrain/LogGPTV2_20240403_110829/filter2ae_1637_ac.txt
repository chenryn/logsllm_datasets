当我们如果选择1进行请求时，在之前的路由检测和解析时，会将参数/参数值存入Request类中的route变量中。
而当我们如果选择2进行请求时，程序会将&前面的值剔除，留下&后面的参数/参数值，保存到`$_GET`中。
并且因为Thinkphp很灵活，我们还可以将这两种方式结合利用，如第3个。
这就是上面所说的在请求方式不同时，程序在处理传参时也会不同。
Ps：在debug未开启时,参数并不会获得，只是保存在route变量或`$_GET[]`中，不过没关系，因为在后面路由调度时还会调用一次param()方法。
继续调试，开始路由调度工作。
##### 4.3.4 路由调度
这一部分将会对路由解析得到的结果(模块、控制器、操作)进行调度，得到数据结果。
这里首先创建了一个闭包函数，并作为参数传入了add方法()中。
将闭包函数注册为中间件，然后存入了`$this->queue[‘route’]`数组中。
然后会返回到App类， `$response =
$this->middleware->dispatch($this->request);`执行middleware类中的dispatch()方法，开始调度中间件。
使用`call_user_func()`回调`resolve()`方法，
使用`array_shift()`函数将中间件(闭包函数)赋值给了`$middleware`，最后赋值给了`$call`变量。
当程序运行至`call_user_func_array()`函数继续回调，这个`$call`参数是刚刚那个闭包函数，所以这时就会调用之前App类中的闭包函数。
中间件的作用官方介绍说主要是用于拦截或过滤应用的HTTP请求，并进行必要的业务处理。所以可以推测这里是为了调用闭包函数中的run()方法，进行路由调度业务。
然后在闭包函数内调用了Dispatch类中的run()方法，开始执行路由调度。
跟进exec()方法
可以看到，这里对我们要访问的控制器Test进行了实例化，我们来看下它的实例化过程。
将控制器类名`$name`和控制层`$layer`传入了parseModuleAndClass()方法，对模块和类名进行解析，获取类的命名空间路径。
在这里如果`$name`类中以反斜线\开始时就会直接将其作为类的命名空间路径。此时`$name`是test，明显不满足，所以会进入到else中，从request封装中获取模块的值`$module`，然后程序将模块`$module`、控制器类名`$name`、控制层`$layer`再传入parseClass()方法。
对`$name`进行了一些处理后赋值给`$class`，然后将`$this->namespace`、`$module`、`$layer`、`$path`、`$class`拼接在一起形成命名空间后返回。
到这我们就得到了控制器Test的命名空间路径，根据Thinkphp命名空间的特性，获取到命名空间路径就可以对其Test类进行加载。
F7继续调试，返回到了刚刚的controller()方法，开始加载Test类。
加载前，会先使用class_exists()函数检查Test类是否定义过，这时程序会调用自动加载功能去查找该类并加载。
加载后调用__get()方法内的make()方法去实例化Test类。
这里使用反射调用的方法对Test类进行了实例化。先用ReflectionClass创建了Test反射类，然后 `return
$reflect->newInstanceArgs($args);`
返回了Test类的实例化对象。期间顺便判断了类中是否定义了__make方法、获取了构造函数中的绑定参数。
然后将实例化对象赋值赋给`$object`变量，接着返回又赋给`$instance变`量。
继续往下看
这里又创建了一个闭包函数作为中间件，过程和上面一样，最后利用`call_user_func_array()`回调函数去调用了闭包函数。
在这个闭包函数内，主要做了4步。
  1. 使用了is_callable()函数对操作方法和实例对象作了验证，验证操作方法是否能用进行调用。
  2. new ReflectionMethod()创建了Test的反射类`$reflect`。
  3. 紧接着由于url_param_type默认为0，所以会调用param()方法去请求变量，但是前面debug开启时已经获取到了并保存进了Request类对象中的param变量，所以此时只是从中将值取出来赋予`$var`变量。
  4. 调用invokeReflectMethod()方法，并将Test实例化对象`$instance`、反射类`$reflect`、请求参数`$vars`传入。
这里调用了`bindParams()`方法对`$var`参数数组进行处理，获取了Test反射类的绑定参数，获取到后将`$args`传入`invokeArgs()`方法，进行反射执行。
然后程序就成功运行到了我们访问的文件(Test)。
运行之后返回数据结果，到这里路由调度的任务也就结束了，剩下的任务就是响应输出了，将得到数据结果输出到浏览器页面上。
##### 4.3.5 响应输出及应用结束
这一小节会对之前得到的数据结果进行响应输出并在输出之后进行扫尾工作结束应用程序运行。在响应输出之前首先会构建好响应对象，将相关输出的内容存进Response对象，然后调用Response::send()方法将最终的应用返回的数据输出到页面。
继续调试，来到autoResponse()方法，这个方法程序会来回调用两次，第一次主要是为了创建响应对象，第二次是进行验证。我们先来看第一次，
此时`$data`不是Response类的实例化对象，跳到了elseif分支中，调用Response类中的create()方法去获取响应输出的相关数据，构建Response对象。
执行`new static($data, $code, $header,
$options);`实例化自身Response类，调用`__construct()`构造方法。
可以看到这里将输出内容、页面的输出类型、响应状态码等数据都传递给了Response类对象，然后返回，回到刚才autoResponse()方法中
到此确认了具体的输出数据，其中包含了输出的内容、类型、状态码等。
上面主要做的就是构建响应对象，将要输出的数据全部封装到Response对象中，用于接下来的响应输出。
继续调试，会返回到之前Dispatch类中的run()方法中去，并将`$response`实例对象赋给`$data`。
紧接着会进行autoResponse()方法的第二次调用，同时将`$data`传入，进行验证。
这回`$data`是Response类的实例化对象，所以将`$data`赋给了`$response`后返回。
然后就开始调用Response类中send()方法，向浏览器页面输送数据。
这里依次向浏览器发送了状态码、header头信息以及得到的内容结果。
输出完毕后，跳到了appShutdown()方法，保存日志并结束了整个程序运行。
#### 4.4 流程总结
上面通过动态调试一步一步地对URL解析的过程进行了分析，现在我们来简单总结下其过程：
首先发起请求->开始路由检测->获取pathinfo信息->路由匹配->开始路由解析->获得模块、控制器、操作方法调度信息->开始路由调度->解析模块和类名->组建命名空间>查找并加载类->实例化控制器并调用操作方法->构建响应对象->响应输出->日志保存->程序运行结束
### 五、漏洞分析及POC构建
相信大家在看了上述内容后，对Thinkphp这个框架应该有所了解了。接下来，我们结合最近一个思路比较好的RCE漏洞再来看下。为了更好地理解漏洞，我通过以POC构造为导引的方式对漏洞进行了分析，同时以下内容也体现了我在分析漏洞时的想法及思路。
在/thinkphp/library/think/Container.php 中340行：
在Container类中有个`call_user_func_array()`回调函数，经常做代码审计的小伙伴都知道，这个函数非常危险，只要能控制`$function`和`$args`，就能造成代码执行漏洞。
如何利用此函数？
通过上面的URL路由分析，我们知道Thinkphp可由外界直接控制模块名、类名和其中的方法名以及参数/参数值，那么我们是不是可以将程序运行的方向引导至这里来。
如何引导呢？
要调用类肯定需要先将类实例化，类的实例化首先需要获取到模块、类名，然后解析模块和类名去组成命名空间，再根据命名空间的特性去自动加载类，然后才会实例化类和调用类中的方法。
我们先对比之前正常的URL试着构建下POC。
http://127.0.0.1/tp5.1.20/public/index.php/index/test/hello/name/world
http://127.0.0.1/tp5.1.20/public/index.php/模块?/Container/invokefunction
构建过程中，会发现几个问题。
  1. 模块应该指定什么，因为Container类并不在模块内。
  2. 模块和类没有联系，那么组建的命名空间，程序如何才能加载到类。
先别着急，我们先从最开始的相关值获取来看看（获取到模块、类名），此过程对应上面第四大节中的4.3.3路由解析中。
app_multi_module为true，所以肯定进入if流程,获取了`$module`、`$bind`、`$available`的值。在红色框处如果不为true，则会直接报错结束运行，所以此处需要`$module`和`$available`都为True。而$available的值一开始就被定义为False，只有在后续的3个if条件中才会变为true。
来看下这3个if条件，在默认配置下，由于没有路由绑定，所以`$bind`为null。而empty_module默认模块也没有定义。所以第三个也不满足，那么只能寄托于第二个了。
在第二个中，1是判断`$module`是否在禁止访问模块的列表中，2是判断是否存在这个模块。
所以，这就要求我们在构造POC时，需要保证模块名必须真实存在并且不能在禁用列表中。在默认配置中，我们可以指定index默认模块，但是在实际过程中，index模块并不一定存在，所以就需要大家去猜测或暴力破解了，不过一般模块名一般都很容易猜解。
获取到模块、类名后，就是对其进行解析组成命名空间了。此过程对应上面第四大节中的4.3.4路由调度中。
这里首先对`$name`(类名)进行判断，当`$name`以反斜线\开始时会直接将其作为类的命名空间路径。看到这里然后回想一下之前的分析，我们会发现这种命名空间路径获取的方式和之前获取的方式不一样(之前是进入了parseClass方法对模块、类名等进行拼接)，而且这种获取是不需要和模块有联系的，所以我们想是不是可以直接将类名以命名空间的形式传入，然后再以命名空间的特性去自动加载类？同时这样也脱离了模块这个条件的束缚。
那我们现在再试着构造下POC：
http://127.0.0.1/tp5.1.20/public/index.php/index/think\Container/invokefunction
剩下就是指定`$function`参数和`$var`参数值了,根据传参特点，我们来构造下。
http://127.0.0.1/tp5.1.20/public/index.php/index/think\Container/invokefunction/function/call_user_func_array/vars[0]/phpinfo/vars[1][]/1
构造出来应该是这样的，但是由于在pathinfo模式下，`$_SERVER['PATH_INFO']`会自动将URL中的“\”替换为“/”，导致破坏掉命名空间格式，所以我们采用兼容模式。
默认配置中，`var_pathinfo`默认为s，所以我们可以用`$_GET[‘s’]`来传递路由信息。
http://127.0.0.1/tp5.1.20/public/index.php?s=index/think\Container/invokefunction&function=call_user_func_array&vars[0]=phpinfo&vars[1][]=1
另外由于App类继承于Container类，所以POC也可以写成：
http://127.0.0.1/tp5.1.20/public/index.php?s=index/think\App/invokefunction&function=call_user_func_array&vars[0]=phpinfo&vars[1][]=1
**漏洞利用扩大化**
  1. 以反斜线\开始时直接将其作为类的命名空间路径。
  2. thinkphp命名空间自动加载类的特性。
由于这两点，就会造成我们可以调用thinkphp框架中的任意类。所以在框架中，如果其他类方法中也有类似于invokefunction()方法中这样的危险函数，我们就可以随意利用。
例如：Request类中的input方法中就有一样的危险函数。
跟入filterValue()方法
POC:
http://127.0.0.1/tp5.1.20/public/index.php?s=index/\think\Request/input&filter=phpinfo&data=1
### 六、结语
写这篇文章的其中一个目的是想让大家知道，通过框架分析，我们不仅可以在分析漏洞时变得更加容易，同时也可以对漏洞原理有一个更深的理解。所以，当我们在分析一个漏洞时，如果很吃力或者总有点小地方想不通的时候，不如从它的框架着手，一步一步来，或许在你学习完后就会豁然开朗，亦或者在过程中你就会明白为什么。
* * *