朋友公司的开发人员考虑到varchar占用空间大，影响查询性能，于是他把字段
这里的最小值和最大值代表的是宽度。
1．录入手机号带来的问题
类型
数值类型
，而int类型的最大宽度不能大于11，否则就溢出，
ysql> showcreate tablephone\G
字节
1>
4
3
2
OK，
reete
0
int（ll）
rows affected （0.06 sec)
0
-9 223372 036 854775 808
0
-2147483648
-8388608
-32768
0
-128
最小值（有符号/无符号）
表5-4数值类型
图5-9
表结构图
占用的磁盘空间和磁盘I/O也会更少，而
这样就不会存在溢出的情况了，如
9223372036854775807
4294967295
2147483647
16777215
8388607
65535
32767
255
18446744 073709551615
127
最大值（有符号／无符号）
，下面来演示一下，表
---
## Page 149
图5-11和图5-12所示。
rows in set (0.00 sec)
mobile
sql>select *from phone.
mysql> show warnings:
ery
ecords:3Duplicates:0
13611111111
2147483647
ysql>select *from phone
三
rows in set (0.00 sec)
2147483647
mobile
Warning
Level
Warning
SMO.
483647
sin set (0.00 sec)
OK,
483647
ENGINE=InnoDB
sql> show create table phene\G;
cords:3
sql>alter table phone modify mobile bigint:
eate
A.10
483647
|Code
Table:phone
1264
rows
Duplicates:0
rows
CREATE TABLEphone
2n0
Out ofrange v
DEFAULT CHARSET=utf8
京**京**京京**京京
图5-11更改表结构图
values (13581549970),(13511111111),(13611111111)
图5-10
图5-12插人数据
Warnings:
Warnings:
value
字段溢出图
ngs
for
for
（0.00aec）
********************
0
col
umr
lumn
(13511111111),(13611111111
umn
bil
at
row
row
123
第5章
---
## Page 150
136·第二部分故障诊断与性能优化篇
图5-17所示的方式。
所示。
问题，下面我们来演示一下，如图5-13所示。
另一个函数INET_NTOAO负责把数字转换为IP地址，在使用这两个函数时也要注意溢出
为bigint。
么 11×3就是33字节，而bigint(20)宽度为20，只占用8字节，从性能上考虑，应该设置
下表结构才可以存下，如图5-15所示。
符号最大宽度是4294967295，所以要更改
整型有符号最大宽度是2147483647，而无
占用空间的问题，一般程序的字符集是gbk或utf8，gbk占用2字节，utf8占用3字节，那
答案是NO，细心的朋友应该注意到了，int
继续插人刚才的IP地址，如图5-16
再比如，我们要查询192.168这个网段内的所有IP地址和对应的主机名，可采用如
MySQL里提供了一个很好用的函数：INET_ATONO，它负责把IP地址转为数字，而
可能有人会问，前面那种情况下也可以设置为char(11)啊！这并非不可以，但考虑到
OK！没有任何问题。
从查询结果来看，IP地址不是之前的192.168.1.1，那怎么办呢？还得用char(15)吗？
这是什么情况啊？居然溢出了！我们来看看查询结果，如图5-14所示。
2.IP地址也可采用int整型
mysql> show warnings:
No
ERROR:
row in set (0.00 sec)
Warning | 1264 |Out of range value for colum'ip' at row
reate
Level
query specified
show create table ipaddress\G.
Table:
Code|Message
CREATE
图5-13表结构和插人数据
TABLEipaddress
mysql>select
rows in set (0.01 sec)
127.255.255.255
INET_NTOA（ip)
图5-14查询结果
INET_NTOA（ip)
from book.ipaddress
---
## Page 151
适合了，可以用tinyint代替。又比如，用户在线状态，0表示离线、1表示在线、2表示离
就比如用户的年龄，一般来说，年龄大都在1～100岁之间，长度只有3，那么用int就不
row in set (0.00 sec)
ysql> explain select INET_NTOA(ip),hostnamel frem ipaddress where ip >=INET_ATON(192.168):
id|select_type
ysql> select INET_NTOA(ip),hostnamel
1|SIMPLE
rows in set (0.00 see)
INET_NTOA(ip)
有不少开发人员在设计表字段时，只要是针对数值类型的全部用int，但这不一定合适，
3．根据需求选择最小整数类型
0. 168. 25
mysql> alter table ipaddress modify ip int(l1) unsigned DEFAULT NULL:
mysql> seleet INET_NTOA(ip) from ipaddress:
Query OK.1row affected(0.00 sec)
mysql> insert into ipaddress values (INET_ATON(*192. 168.254.254')
sql>show create tableipaddress\G.
cords:2
Query OK,1row affected（0.00sec)
row in set (0.00 sec)
INET_NTOA(ip)
hostnamel
rows in set (0.00 sec)
127.255.255.255
table
127.0.0.1
ipaddress
OK,
nt（i1）)
Duplicates:0
into
type
range
from
图5-17查询执行计划
possible_keys
图5-15更改表结构
ix_ip
图5-16查询结果
ipaddress
values(INET_ATON(*192.168.1.1′））:
NULL
s where ip >=INET_ATON(192.168):
key
Lx_1p
key_len|
NULL
|ref
第5章
2|Using where
性能调优·137
---
## Page 152
138·第二部分故障诊断与性能优化篇
代替enum比较合适。
如果插人的值不在这个范围里，就会报错，如图5-18和图5-19所示。所以一般用tinyint来
把问题考虑周全，免得日后亡羊补牢，这样就得不偿失了。
DDL也避免了锁表，可以实现这个功能，但这个动作还是很大，所以建议在表设计之初就
举类型，会存在扩展的问题，还是用上面用户在线状态的例子，如果此时增加了：5表示
采用tinyint完全可以满足需要，int占用的是4字节，而tinyint才占用1个字节。
开、3表示忙碌、4表示隐身等，其实类似这样的情况，用int 都是没有必要的，浪费空间，
然Percona公司出了pt-online-schema-change在线更改表工具，另外MySQL5.6新特性在线
请勿打扰、6表示开会中、7表示隐身对好友可见，那么此时只有更改表字段类型了，虽
这里估计有人会问，用enum枚举类型也可以啊，它也占用1字节。但是采用enum枚
下面是关于ENUM枚举类型的一个小例子。在该例中，枚举的数值是0、1、2、3、4,
mysql> select * from enumtest;
mysql> show warnings;
mysql>insert into enumtest values(0′），(1’）,2）,3²）,（4′）
No query specified
ERROR:
Create
rows in set (0.00 sec)
row in set (0.00 sec)
status
Level
ysql> insert into
ler
status
OK,
Code |Message
图5-18表结构和插人数据
enumtestv
图5-19查询结果
pe
(0.00
G
DEFAULT NULL
*******
******京京***
at row
---
## Page 153
建，但超过了就失败。
下面就经常使用的gbk和utf8来举例说明。
utf8占用3个字节。
存储值的长度，如果列的最大长度小于或等于255，则使用1字节，否则就是用2字节。
长度（它会增加一个额外字节来存储字符串本身的长度），varchar使用额外的1～2字节来
度最大为255，比指定长度大的值将被截短，而比指定长度小的值将会用空格进行填补。
5.2.2
'abcdefgh'
'abcd'
'ab'
char和varchar跟字符编码也有密切联系，latin1占用1个字节，gbk占用2个字节，
varchar(N)用于保存可变长度的字符串，长度最大为65 535，只存储字符串实际需要的
引申出一个问题，既然跟字符编码有关系，那么如何计算出varchar(N)的最大长度？
'abcdefgh'
char和varchar是日常使用最多的字符类型。char(N)用于保存固定长度的字符串，
（1）GBK字符集
Utf8（1个字符3个字节）
'abcd'
'abcdefgh'
'abcd'
首先创建一张表，
'ab'
Gbk（1个字符2个字节）
Latin1（1个字符1个字节）
不同的字符集所占用的存储空间会不同，具体如表5-5～表5-7所示。
1．计算varchar的最大长度
值
值
值
字符类型
Char(4)
，表里采用gbk字符集，可以看到，字段v设置为32766可以正常创
Char(4)
Char(4)
'abcd'
'abcd'
'ab
'ab
'ab'
poqe,
'abcd'
'abcd'
表5-5Latin1字符集存储字节
表5-7Utf8字符集存储字节
表5-6Gbk字符集存储字节
存储的字节
存储的字节
存储的字节
12字节
12字节
12字节
8字节
8字节
8字节
4字节
4字节
4字节
12字节
8字节
4字节
Varchar(4)
Varchar(4)
Varchar(4)
poqe,
poqe,
'ab'
'abcd'
'abcd'
'ab'
poqe,
poqe,
'ab'
第5章性能调优·139
存储的字节
存储的字节
存储的字节
7字节
1字节
9字节
9字节
5字节
1字节
5字节
3字节
1字节
13字节
13字节
5字节
长
---
## Page 154
140·第二部分故障诊断与性能优化篇
验证一下，如图5-23所示。
也就是不能大于32740，前面输人的32766明显大于此数，自然会报错了。0K！我们来
字段占用4字节，username字段占用41字节（因为长度小于255，这里要用1字节存储值
义长度不能超过65535。若定义的表长度超过这个值，则会报错。
公式计算吗？事实上，这时就需要变通一下了，假设一个表有如下字段：
的长度），phone字段占用8字节，所以计算结果为（65535-4-20x2+1-8-2）/2=32740，
建，
很奇怪吧？这里输人32766这个长度居然报错了。事实上，MySQL规定一个行的定
SQL建表语句的执行结果如图5-22所示。
我们来计算下address的最大长度，这里采用GBK字符集，代码如下：
有人会问，一个表里肯定有好几个字段，那么varchar(N)的最大长度还是按照上面的
计算公式：（65535-2）/3=21844.3，也就是说不能大于21845。