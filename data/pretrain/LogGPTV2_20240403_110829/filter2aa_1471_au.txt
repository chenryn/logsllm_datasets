stack addresses have drastically changed (because the process is
now executing using the 32-bit stack). Note also that some
functions have the # symbol preceding them: WinDbg uses that
symbol to represent functions containing CHPE code. At this point,
you can step into and over x86 code, as in regular x86 operating
systems. The simulator takes care of the emulation and hides all the
details. To observe how the simulator is running, you should move
to the 64-bit context through the .effmach command. The
command accepts different parameters: x86 for the 32-bit x86
context; arm64 or amd64 for the native 64-bit context (depending
on the target platform); arm for the 32-bit ARM Thumb2 context;
CHPE for the 32-bit CHPE context. Switching to the 64-bit stack in
this case is achieved via the arm64 parameter:
Click here to view code image
0:000:x86> .effmach arm64
Effective machine: ARM 64-bit (AArch64) (arm64)
0:000> k
 # Child-SP          RetAddr           Call Site
00 00000000`00a8df30 00007ffb`bd3572a8 
wow64!Wow64pNotifyDebugger+0x18f54
01 00000000`00a8df60 00007ffb`bd3724a4 
wow64!Wow64pDispatchException+0x108
02 00000000`00a8e2e0 00000000`76e1e9dc 
wow64!Wow64RaiseException+0x84
03 00000000`00a8e400 00000000`76e0ebd8 
xtajit!BTCpuSuspendLocalThread+0x24c
04 00000000`00a8e4c0 00000000`76de04c8 
xtajit!BTCpuResetFloatingPoint+0x4828
05 00000000`00a8e530 00000000`76dd4bf8 
xtajit!BTCpuUseChpeFile+0x9088
06 00000000`00a8e640 00007ffb`bd3552c4 
xtajit!BTCpuSimulate+0x98
07 00000000`00a8e6b0 00007ffb`bd353788 
wow64!RunCpuSimulation+0x14
08 00000000`00a8e6c0 00007ffb`bd47de38 
wow64!Wow64LdrpInitialize+0x138
09 00000000`00a8e980 00007ffb`bd47133c 
ntdll!LdrpInitializeProcess+0x1de0
0a 00000000`00a8f270 00007ffb`bd428180 
ntdll!_LdrpInitialize+0x491ac
0b 00000000`00a8f350 00007ffb`bd428134 
ntdll!LdrpInitialize+0x38
0c 00000000`00a8f370 00000000`00000000 
ntdll!LdrInitializeThunk+0x14
From the two stacks, you can see that the emulator was
executing CHPE code, and then a push thunk has been invoked to
restart the simulation to the LdrpDoDebuggerBreak x86 function,
which caused an exception (managed through the native
Wow64RaiseException) notified to the debugger via the
Wow64pNotifyDebugger routine. With Windbg and the .effmach
command, you can effectively debug multiple contexts: native,
CHPE, and x86 code. Using the g @$exentry command, you can
move to the x86 entry point of Notepad and continue the debug
session of x86 code or the emulator itself. You can restart this
experiment also in different environments, debugging an app
located in SysArm32, for example.
Object Manager
As mentioned in Chapter 2 of Part 1, “System architecture,” Windows
implements an object model to provide consistent and secure access to the
various internal services implemented in the executive. This section describes
the Windows Object Manager, the executive component responsible for
creating, deleting, protecting, and tracking objects. The Object Manager
centralizes resource control operations that otherwise would be scattered
throughout the operating system. It was designed to meet the goals listed after
the experiment.
EXPERIMENT: Exploring the Object Manager
Throughout this section, you’ll find experiments that show you
how to peer into the Object Manager database. These experiments
use the following tools, which you should become familiar with if
you aren’t already:
■    WinObj (available from Sysinternals) displays the internal
Object Manager’s namespace and information about objects
(such as the reference count, the number of open handles,
security descriptors, and so forth). WinObjEx64, available
on GitHub, is a similar tool with more advanced
functionality and is open source but not endorsed or signed
by Microsoft.
■    Process Explorer and Handle from Sysinternals, as well as
Resource Monitor (introduced in Chapter 1 of Part 1)
display the open handles for a process. Process Hacker is
another tool that shows open handles and can show
additional details for certain kinds of objects.
■    The kernel debugger !handle extension displays the open
handles for a process, as does the Io.Handles data model
object underneath a Process such as @$curprocess.
WinObj and WinObjEx64 provide a way to traverse the
namespace that the Object Manager maintains. (As we’ll explain
later, not all objects have names.) Run either of them and examine
the layout, as shown in the figure.
The Windows Openfiles/query command, which lists local and
remote files currently opened in the system, requires that a
Windows global flag called maintain objects list be enabled. (See
the “Windows global flags” section later in Chapter 10 for more
details about global flags.) If you type Openfiles/Local, it tells you
whether the flag is enabled. You can enable it with the
Openfiles/Local ON command, but you still need to reboot the
system for the setting to take effect. Process Explorer, Handle, and
Resource Monitor do not require object tracking to be turned on
because they query all system handles and create a per-process
object list. Process Hacker queries per-process handles using a
mode-recent Windows API and also does not require the flag.
The Object Manager was designed to meet the following goals:
■    Provide a common, uniform mechanism for using system resources.
■    Isolate object protection to one location in the operating system to
ensure uniform and consistent object access policy.
■    Provide a mechanism to charge processes for their use of objects so
that limits can be placed on the usage of system resources.
■    Establish an object-naming scheme that can readily incorporate
existing objects, such as the devices, files, and directories of a file
system or other independent collections of objects.
■    Support the requirements of various operating system environments,
such as the ability of a process to inherit resources from a parent
process (needed by Windows and Subsystem for UNIX Applications)
and the ability to create case-sensitive file names (needed by
Subsystem for UNIX Applications). Although Subsystem for UNIX
Applications no longer exists, these facilities were also useful for the
later development of the Windows Subsystem for Linux.
■    Establish uniform rules for object retention (that is, for keeping an
object available until all processes have finished using it).
■    Provide the ability to isolate objects for a specific session to allow for
both local and global objects in the namespace.
■    Allow redirection of object names and paths through symbolic links
and allow object owners, such as the file system, to implement their
own type of redirection mechanisms (such as NTFS junction points).
Combined, these redirection mechanisms compose what is called
reparsing.
Internally, Windows has three primary types of objects: executive objects,
kernel objects, and GDI/User objects. Executive objects are objects
implemented by various components of the executive (such as the process
manager, memory manager, I/O subsystem, and so on). Kernel objects are a
more primitive set of objects implemented by the Windows kernel. These
objects are not visible to user-mode code but are created and used only
within the executive. Kernel objects provide fundamental capabilities, such
as synchronization, on which executive objects are built. Thus, many
executive objects contain (encapsulate) one or more kernel objects, as shown
in Figure 8-30.
Figure 8-30 Executive objects that contain kernel objects.
 Note
The vast majority of GDI/User objects, on the other hand, belong to the
Windows subsystem (Win32k.sys) and do not interact with the kernel. For
this reason, they are outside the scope of this book, but you can get more
information on them from the Windows SDK. Two exceptions are the
Desktop and Windows Station User objects, which are wrapped in
executive objects, as well as the majority of DirectX objects (Shaders,
Surfaces, Compositions), which are also wrapped as executive objects.
Details about the structure of kernel objects and how they are used to
implement synchronization are given later in this chapter. The remainder of
this section focuses on how the Object Manager works and on the structure
of executive objects, handles, and handle tables. We just briefly describe how
objects are involved in implementing Windows security access checking;
Chapter 7 of Part 1 thoroughly covers that topic.
Executive objects
Each Windows environment subsystem projects to its applications a different
image of the operating system. The executive objects and object services are
primitives that the environment subsystems use to construct their own
versions of objects and other resources.
Executive objects are typically created either by an environment
subsystem on behalf of a user application or by various components of the
operating system as part of their normal operation. For example, to create a
file, a Windows application calls the Windows CreateFileW function,
implemented in the Windows subsystem DLL Kernelbase.dll. After some
validation and initialization, CreateFileW in turn calls the native Windows
service NtCreateFile to create an executive file object.
The set of objects an environment subsystem supplies to its applications
might be larger or smaller than the set the executive provides. The Windows
subsystem uses executive objects to export its own set of objects, many of
which correspond directly to executive objects. For example, the Windows
mutexes and semaphores are directly based on executive objects (which, in
turn, are based on corresponding kernel objects). In addition, the Windows
subsystem supplies named pipes and mailslots, resources that are based on
executive file objects. When leveraging Windows Subsystem for Linux
(WSL), its subsystem driver (Lxcore.sys) uses executive objects and services
as the basis for presenting Linux-style processes, pipes, and other resources
to its applications.
Table 8-15 lists the primary objects the executive provides and briefly
describes what they represent. You can find further details on executive
objects in the chapters that describe the related executive components (or in
the case of executive objects directly exported to Windows, in the Windows
API reference documentation). You can see the full list of object types by
running Winobj with elevated rights and navigating to the ObjectTypes
directory.
Table 8-15 Executive objects exposed to the Windows API
Object Type
Represents
Process
The virtual address space and control 
information necessary for the execution 
of a set of thread objects.
Thread
An executable entity within a process.
Job
A collection of processes manageable as 
a single entity through the job.
Section
A region of shared memory (known as a 
file-mapping object in Windows).
File
An instance of an opened file or an I/O 
device, such as a pipe or socket.
Token
The security profile (security ID, user 
rights, and so on) of a process or a 
thread.
Event, KeyedEvent
An object with a persistent state 
(signaled or not signaled) that can be 
used for synchronization or notification. 
The latter allows a global key to be used 
to reference the underlying 
synchronization primitive, avoiding 
memory usage, making it usable in low-
memory conditions by avoiding an 
allocation.
Semaphore
A counter that provides a resource gate 
by allowing some maximum number of 
threads to access the resources protected 
by the semaphore.
Mutex
A synchronization mechanism used to 
serialize access to a resource.
Timer, IRTimer
A mechanism to notify a thread when a 
fixed period of time elapses. The latter 
objects, called Idle Resilient Timers, are 
used by UWP applications and certain 
services to create timers that are not 
affected by Connected Standby.
IoCompletion, 
IoCompletionReserve
A method for threads to enqueue and 
dequeue notifications of the completion 
of I/O operations (known as an I/O 
completion port in the Windows API). 
The latter allows preallocation of the 
port to combat low-memory situations.
Key
A mechanism to refer to data in the 
registry. Although keys appear in the 
Object Manager namespace, they are 
managed by the configuration manager, 
in a way like that in which file objects 
are managed by file system drivers. Zero 
or more key values are associated with a 
key object; key values contain data 
about the key.
Directory
A virtual directory in the Object 
Manager’s namespace responsible for 
containing other objects or object 
directories.
SymbolicLink
A virtual name redirection link between 
an object in the namespace and another 
object, such as C:, which is a symbolic 
link to \Device\HarddiskVolumeN.
TpWorkerFactory
A collection of threads assigned to 
perform a specific set of tasks. The 
kernel can manage the number of work 
items that will be performed on the 
queue, how many threads should be 
responsible for the work, and dynamic 
creation and termination of worker 
threads, respecting certain limits the 
caller can set. Windows exposes the 
worker factory object through thread 
pools.
TmRm (Resource Manager), 
TmTx (Transaction), TmTm 
(Transaction Manager), 
TmEn (Enlistment)
Objects used by the Kernel Transaction 
Manager (KTM) for various 
transactions and/or enlistments as part 
of a resource manager or transaction 
manager. Objects can be created 
through the CreateTransactionManager, 
CreateResourceManager, 
CreateTransaction, and 
CreateEnlistment APIs.
RegistryTransaction
Object used by the low-level lightweight 
registry transaction API that does not 
leverage the full KTM capabilities but 
still allows simple transactional access 
to registry keys.
WindowStation
An object that contains a clipboard, a set 
of global atoms, and a group of Desktop 
objects.
Desktop
An object contained within a window 
station. A desktop has a logical display 
surface and contains windows, menus, 
and hooks.
PowerRequest
An object associated with a thread that 
executes, among other things, a call to 
SetThreadExecutionState to request a 
given power change, such as blocking 
sleeps (due to a movie being played, for 
example).
EtwConsumer
Represents a connected ETW real-time 
consumer that has registered with the 
StartTrace API (and can call 
ProcessTrace to receive the events on 
the object queue).
CoverageSampler
Created by ETW when enabling code 
coverage tracing on a given ETW 
session.
EtwRegistration
Represents the registration object 
associated with a user-mode (or kernel-
mode) ETW provider that registered 
with the EventRegister API.
ActivationObject
Represents the object that tracks 
foreground state for window handles 
that are managed by the Raw Input 
Manager in Win32k.sys.
ActivityReference
Tracks processes managed by the 
Process Lifetime Manager (PLM) and 
that should be kept awake during 
Connected Standby scenarios.
ALPC Port
Used mainly by the Remote Procedure 
Call (RPC) library to provide Local 
RPC (LRPC) capabilities when using 
the ncalrpc transport. Also available to 
internal services as a generic IPC 
mechanism between processes and/or 
the kernel.
Composition, 
DxgkCompositionObject, 
DxgkCurrentDxgProcessObj
ect, 
DxgkDisplayManagerObject
, DxgkSharedBundleObject, 
DxgkSharedKeyedMutexObj
ect, 
DxgkShartedProtectedSessio
nObject, 
DgxkSharedResource, 
DxgkSwapChainObject, 
DxgkSharedSyncObject
Used by DirectX 12 APIs in user-space 
as part of advanced shader and GPGPU 
capabilities, these executive objects 
wrap the underlying DirectX handle(s).
CoreMessaging
Represents a CoreMessaging IPC object 
that wraps an ALPC port with its own 
customized namespace and capabilities; 
used primarily by the modern Input 
Manager but also exposed to any 
MinUser component on WCOS systems.
EnergyTracker
Exposed to the User Mode Power 