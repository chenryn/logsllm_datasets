:::
本节介绍如何在从 DHCP 服务器分配或更新 IPv4 地址时，运行保存在
`/etc/dhcp/ dhclient`{.literal} -exit-hooks.d/``{=html} 目录的
NetworkManager 分配程序脚本。
::: itemizedlist
**先决条件**
-   `dhclient`{.literal} 退出 hook 存储在
    `/etc/dhcp/dhclient-exit-hooks.d/`{.literal} 目录中。
:::
::: orderedlist
**步骤**
1.  使用以下内容创建
    `/etc/NetworkManager/dispatcher.d/12-dhclient-down`{.literal} 文件：
    ``` programlisting
    #!/bin/bash
    # Run dhclient.exit-hooks.d scripts
    if [ -n "$DHCP4_DHCP_LEASE_TIME" ] ; then
      if [ "$2" = "dhcp4-change" ] || [ "$2" = "up" ] ; then
        if [ -d /etc/dhcp/dhclient-exit-hooks.d ] ; then
          for f in /etc/dhcp/dhclient-exit-hooks.d/*.sh ; do
            if [ -x "${f}" ]; then
              . "${f}"
            fi
          done
        fi
      fi
    fi
    ```
2.  将 `root`{.literal} 用户设置为文件的所有者：
    ``` literallayout
    # chown root:root /etc/NetworkManager/dispatcher.d/12-dhclient-down
    ```
3.  设置权限，以便只有 root 用户可以执行它：
    ``` literallayout
    # chmod 0700 /etc/NetworkManager/dispatcher.d/12-dhclient-down
    ```
4.  恢复 SELinux 上下文：
    ``` literallayout
    # restorecon /etc/NetworkManager/dispatcher.d/12-dhclient-down
    ```
:::
::: itemizedlist
**其他资源**
-   `NetworkManager(8)`{.literal} man page 中的
    `Dispatcher 脚本`{.literal} 部分。
:::
:::
:::
[]{#introduction-to-networkmanager-debugging_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#introduction-to-networkmanager-debugging_configuring-and-managing-networking.html#introduction-to-networkmanager-debugging_configuring-and-managing-networking}第 46 章 网络管理器调试介绍 {.title}
:::
增加所有或某些域的日志级别有助于记录 NetworkManager
执行的更多详情。管理员可以使用这些信息排除问题。NetworkManager
提供不同的级别和域来生成日志信息。`/etc/NetworkManager/NetworkManager.conf`{.literal}
文件是 NetworkManager 的主要配置文件。日志存储在日志中。
本节提供有关为 NetworkManager
启用调试日志以及使用不同日志级别和域配置日志量的信息。
::: section
::: titlepage
# []{#introduction-to-networkmanager-debugging_configuring-and-managing-networking.html#debugging-levels-and-domains_introduction-to-networkmanager-debugging}调试级别和域 {.title}
:::
您可以使用 `级别 和域`{.literal} ``{=html} 参数来管理
NetworkManager
的调试。级别定义详细程度，而域定义了记录给定严重性级别（`级别`{.literal}）的日志的消息类别。
::: informaltable
  日志级别            描述
  ------------------- -------------------------------------------
  `OFF`{.literal}     不记录任何有关 NetworkManager 的信息
  `ERR`{.literal}     仅记录严重错误
  `WARN`{.literal}    记录可以反映操作的警告信息
  `INFO`{.literal}    记录各种有助于跟踪状态和操作的信息
  `DEBUG`{.literal}   为调试启用详细日志记录
  `TRACE`{.literal}   启用比 `DEBUG`{.literal} 级别更详细的日志
:::
请注意，后续的级别记录来自以前级别的所有信息。例如，将日志级别设置为
`INFO`{.literal} 也会记录 `ERR`{.literal} 和 `WARN`{.literal}
日志级别中包含的消息。
::: itemizedlist
**其他资源**
-   `NetworkManager.conf(5)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#introduction-to-networkmanager-debugging_configuring-and-managing-networking.html#setting-the-networkmanager-log-level_introduction-to-networkmanager-debugging}设置 NetworkManager 日志级别 {.title}
:::
默认情况下，所有日志域都设置为记录 `INFO`{.literal}
日志级别。在收集调试日志前禁用速率限制。使用速率限制时，如果短时间内有太多，`systemd-journald`{.literal}
会丢弃信息。当日志级别为 `TRACE`{.literal} 时，可能会发生这种情况。
此流程禁用速率限制，并为所有（ALL）域启用记录调试日志。
::: orderedlist
**步骤**
1.  要禁用速率限制，请编辑 `/etc/systemd/journald.conf`{.literal}
    文件，取消 `[Journal]`{.literal} 部分中的 `RateLimitBurst`{.literal}
    参数的注释，并将其值设为 `0`{.literal} ：
    ``` literallayout
    RateLimitBurst=0
    ```
2.  重启 `systemd-journald`{.literal} 服务。
    ``` literallayout
    # systemctl restart systemd-journald
    ```
3.  使用以下内容创建
    `/etc/NetworkManager/conf.d/95-nm-debug.conf`{.literal} 文件：
    ``` literallayout
    [logging]
    domains=ALL:DEBUG
    ```
    `domains`{.literal} 参数可以包含多个用逗号分开的
    `域：级别`{.literal} 对。
4.  重启 NetworkManager 服务。
    ``` literallayout
    # systemctl restart NetworkManager
    ```
:::
:::
::: section
::: titlepage
# []{#introduction-to-networkmanager-debugging_configuring-and-managing-networking.html#temporarily-setting-log-levels-at-run-time-using-nmcli_introduction-to-networkmanager-debugging}在运行时使用 nmcli 临时设置日志级别 {.title}
:::
您可以使用 `nmcli`{.literal}
在运行时更改日志级别。但是，红帽建议使用配置文件启用调试并重启
NetworkManager。使用 `.conf`{.literal}
文件更新调试级别和域有助于调试启动问题并从初始状态捕获所有日志。``{.literal}
``{.literal}
::: orderedlist
**步骤**
1.  可选：显示当前的日志设置：
    ``` literallayout
    # nmcli general logging
      LEVEL  DOMAINS
      INFO   PLATFORM,RFKILL,ETHER,WIFI,BT,MB,DHCP4,DHCP6,PPP,WIFI_SCAN,IP4,IP6,A
    UTOIP4,DNS,VPN,SHARING,SUPPLICANT,AGENTS,SETTINGS,SUSPEND,CORE,DEVICE,OLPC,
    WIMAX,INFINIBAND,FIREWALL,ADSL,BOND,VLAN,BRIDGE,DBUS_PROPS,TEAM,CONCHECK,DC
    B,DISPATCH
    ```
2.  要修改日志级别和域，请使用以下选项：
    ::: itemizedlist
    -   要将所有域的日志级别设置为同一 `LEVEL`{.literal}，请输入：
        ``` literallayout
        # nmcli general logging level LEVEL domains ALL
        ```
    -   要更改特定域的级别，请输入：
        ``` literallayout
        # nmcli general logging level LEVEL domains DOMAINS
        ```
        请注意，使用这个命令更新日志级别会禁用所有其他域的日志功能。
    -   要更改特定域的级别并保持其它域的级别，请输入：
        ``` literallayout
        # nmcli general logging level KEEP domains DOMAIN:LEVEL,DOMAIN:LEVEL
        ```
    :::
:::
:::
::: section
::: titlepage
# []{#introduction-to-networkmanager-debugging_configuring-and-managing-networking.html#viewing-networkmanager-logs_introduction-to-networkmanager-debugging}查看 NetworkManager 日志 {.title}
:::
您可以查看 NetworkManager 日志进行故障排除。
::: itemizedlist
**流程**
-   要查看日志，请输入：
    ``` literallayout
    # journalctl -u NetworkManager -b
    ```
:::
::: itemizedlist
**其他资源**
-   `NetworkManager.conf(5)`{.literal} 手册页。
-   `journalctl`{.literal} man page。
:::
:::
:::
[]{#capturing-network-packets_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#capturing-network-packets_configuring-and-managing-networking.html#capturing-network-packets_configuring-and-managing-networking}第 47 章 捕获网络数据包 {.title}
:::
要调试网络问题和通讯，您可以捕获网络数据包。以下部分提供有关捕获网络数据包的步骤和附加信息。
::: section
::: titlepage
# []{#capturing-network-packets_configuring-and-managing-networking.html#using-xdpdump-to-capture-network-packets-including-packets-dropped-by-xdp-programs_capturing-network-packets}使用 xdpdump 捕获包括 XDP 程序丢弃的数据包在内的网络数据包 {.title}
:::
`xdpdump`{.literal} 程序捕获网络数据包。与 `tcpdump`{.literal}
程序不同，`xdpdump`{.literal} 为这个任务使用扩展的 Berkeley Packet
Filter(eBPF)程序。这可让 `xdpdump`{.literal} 同时捕获由 Express Data
Path(XDP)程序丢弃的数据包。用户空间工具（如 `tcpdump`{.literal}
）无法捕获这些被丢弃的软件包，以及 XDP 程序修改的原始数据包。
您可以使用 `xdpdump`{.literal} 调试已附加到接口中的 XDP
程序。因此，实用程序可以在 XDP
程序启动和完成后捕获数据包。在后者的情况下，`xdpdump`{.literal} 也捕获了
XDP 操作。默认情况下，`xdpdump`{.literal} 会在 XDP
程序条目中捕获传入的数据包。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
在 AMD 和 Intel 64 位的其他构架中，`xdpdump`{.literal}
程序仅作为技术预览提供。红帽产品服务级别协议（SLA）不支持技术预览功能，且其功能可能并不完善，因此红帽不建议在生产环境中使用它们。这些预览可让用户早期访问将来的产品功能，让用户在开发过程中测试并提供反馈意见。
如需有关
[技术预览功能支持范围](https://access.redhat.com/support/offerings/techpreview){.link}
的信息，请参阅红帽客户门户网站中的技术预览功能支持范围。
:::
请注意，`xdpdump`{.literal} 没有数据包过滤或解码功能。但是，您可以将它与
`tcpdump`{.literal} 结合使用来解码数据包。
这个步骤描述了如何捕获 `enp1s0`{.literal} 接口中的所有数据包并将其写入
`/root/capture.pcap`{.literal} 文件中。
::: itemizedlist
**先决条件**
-   支持 XDP 程序的网络驱动程序。
-   XDP 程序被加载到 `enp1s0`{.literal}
    接口。如果没有载入程序，`xdpdump`{.literal} 会以类似
    `tcpdump`{.literal} 的方式捕获数据包，以便向后兼容。
:::
::: orderedlist
**步骤**
1.  要捕获 `enp1s0`{.literal} 接口上的数据包并将其写入
    `/root/capture.pcap`{.literal} 文件，请输入：
    ``` literallayout
    # xdpdump -i enp1s0 -w /root/capture.pcap
    ```
2.  要停止捕获数据包，请按 [**Ctrl**]{.keycap}+[**C**]{.keycap}。
:::
::: itemizedlist
**其他资源**
-   `xdpdump(8)`{.literal} man page
-   如果您是开发人员，并且您对 `xdpdump`{.literal}
    的源代码有兴趣，请从红帽客户门户网站下载并安装相应的源 RPM(SRPM)。
:::
:::
::: section
::: titlepage
# []{#capturing-network-packets_configuring-and-managing-networking.html#_additional_resources_6}其他资源 {.title}
:::
::: itemizedlist
-   [如何使用 tcpdump
    捕获网络数据包？](https://access.redhat.com/solutions/8787){.link}
:::
:::
:::
[]{#providing-dhcp-services_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#providing-dhcp-services_configuring-and-managing-networking.html#providing-dhcp-services_configuring-and-managing-networking}第 48 章 提供 DHCP 服务 {.title}
:::
动态主机配置协议(DHCP)是一种网络协议，可自动为客户端分配 IP 信息。