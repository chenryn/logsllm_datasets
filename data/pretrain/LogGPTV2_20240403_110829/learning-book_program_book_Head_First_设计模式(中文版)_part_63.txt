---
## Page 571
复合模式
这里还有一些控制D2 View的方法.·….
送择“DConto”
你可以使用
Control
->“Stazt”命今，你就可以
"Stop”按钮
Control
DJControl
停止产生节拍。
DIControl
开端户生节扬。
Start
Start
Stop
Stop
Quit
Set
Quit
Set
>>
>>
注意，直到你开始
>>
>>
产生节拍，Stop都是
注意，节拍户生后
7
无效的。
Start是无效的。
所有用户的动作都被
控制器在中间·····
送到控制器
控制器位于视图和模型之间。它将用户
的输人（比方说：从DJ控制菜单中选
择“Start”），转给模型做动作，启动节
拍的产生。
控制器取得输入，了解怎么
一回事，然后再对模型做出请
求。
控制器
别忘了在下面的模型
你看不到模型，但是可以听得到它。模
型在背后默默地工作，管理节拍并用
MIDI驱动喇叭。
ono
BeatModel是这个系统的核心。它
setBPMO
实现了节拍开始与停止的逻辑、
offO
管理BPM并户生声音。
getBPMO
该模型也可以让我们通过
setBPM（）方法取得它的当前状
态。
你现在的位置》
535
---
## Page 572
DJ模型、视图和控制器
把片段拼起来
节拍设成119，你最望增加到（20
Control
DJControl
按下增加
Enter BPM:
节拍的按
Set
>>
>>
视图
.….这造成控制器被调用。
控制器要求模型更
新BPM的值，使其
加 I。
控制器
你看到脉动柱每
0.5秒动一次。
因为BPM是120，所以视图每
0.5秒得到一次节拍通知。
视图
ono
view
setBPMOoff0
Current BPM:120
getBPMO
视图上面显示的数据
视图得到BPM改变的通知。视图
调用setBPM(）得到模型状态。
州
更新为120。
PDG
536
第12章
---
## Page 573
复合模式
创建碎片
现在你已经知道模型是负责维护所有的数据、状态和应用逻辑。那么
BeatModel又如何呢？它的主要工作是管理节拍，所以它具有维护当前BPM的状
态和许多产生MIDI事件的代码，以便产生我们听到的节拍。它也暴露一个接口，
让控制器操纵节拍，让视图和控制器获得模型的状态。还有，别忘了模型使用观
察者模式，所以我们也需要一些方法，让对象注册为观察者并送出通知。
在看实现之前，让我们先了解一
下BeatModellnterface接p
在BeatModel被初始化心后，
就金调用此方法。
public interface BeatModelInterface(
这些方法是让控制器调
void initialize();
用来将节拍产生器打开或关
用的。控制器根据用户
void on () ;
闭。
的操作而对模型做出适
void off() ;
这个方法设定BPM。调用此方
当的处理。
法后，节拍频率马上改变。
void setBPM(int bpm) ;
int getBPM();
setBPM()返回当前BPM值.如果返
这些方法元许视图和
void registerObserver(BeatObserver o);
回值为0，表示节拍器是关阅的。
控制器取得状态，并
void removeObserver(BeatObserver o);
变成观察者。
void registerObserver(BPMobserver
void removeObserver (BPMObserver o) ;
这香起来应该很熟
分成两种观察者.一种观察者希望
悉.这些方法元许
每个节拍都被通知：另一种观察老
对象注册成为观察
只希望BPM改变时被通知。
者。
你现在的位置
537
---
## Page 574
BeatModel
现在，让我们看看具体的BeatModel类：
这是MD3代码电要的。
我们实现了BeatModel3nteetace
public class BeatModel implements BeatModelInterface, MetaEventListener (
Sequencer sequencer;
>
柱”与节拍同步，由
BPMOxsetve的通
BeatO6sevet的通知躯
这部分视圈用来改变节拍
动。
金把你做的所有事情传给
控制器。
BRAIN
.POWER
我们的BeatModel对于视图毫无所悉。这个模型是利用观察者模式实现的，当状态改变时，
只要是注册为观察者的视图都会收到通知。而视图使用模型的API访问状态。我们已经实现了
一种视图，你能够想出其他在BeatModel中使用通知和状态的视图吗？
基于实时节拍的灯光秀
一个基于BPM（am6ient、down6eat、techno等）显示音乐风格的文本视图
你现在的位置
539
---
## Page 576
DJ视图
实现视图
视图的两个部分（模型的视图和用户界面控制的视
这两页代码只是一个轮廓！
图）显示在两个窗口，但是属于同一个Javaclass。你
注意！
会先看到创建模型状态的视图（显示出BPM和节拍
为了方便展示个别的功能，我们在这里
柱）的代码，下一页会看到创建用户界面控制的代码。
将一个类分成两个，一页一个视图。但请
记住，其实这两页都是属于同一个类
DJViewjava。本章最后面将列出代码。
D3View是一个观察老，同时关心实时节拍和BPM的改变。
public class DJView implements ActionListener,
BeatObserver, BPMObserver {
BeatModelInterface model;
视图持有模型和控制器的引用。控制器其实只有在
ControllerInterface controller;
JFrame viewFrame;
控制器接口中用到，等一下你就金看到.
我们在这里创建了
JPanel viewPanel;
BeatBar beatBar;
几个用来显示的组
JLabel bpmOutputLabel;
件。
public DJView(ControllerInterface controller, BeatModelInterface model) (
this.controller = controller;
构造器得到控制器和模型的引用
this.model = model;
model.registerObserver ((BeatObserver) this) ;
我们把它们的引用存储在实例变
model.registerObserver ( (BPMobserver) this) ;
量中。
public void createView(){
我们也将这个注册成为BeatO6serwet和
BPMObsetvet.
//在这里创建所有的Swing组件
模型发生状态改变时.updateBPM（）方法金被调
public void updateBPM(){
用。这时我们更新当前BPM的显示。我们可以通
int bpm = model.getBPM();
if (bpm = 0) (
过直接请求模型而得到这个值
bpmOutputLabel. setText ("offline") ;
}else
bpmOutputLabel.setText("Current BPM: " + mode1.getBPM());
相对地，当模型开始一个新的节拍时，updateBeat（）方
public void updateBeat ()
法金被调用。这时候，我们必须让脉动柱跳一下。
beatBar.setValue (100) ;
我们的做法是把脉动柱设为最大值（（00），让它自
行处理动画部分。
540
第12章
---
## Page 577
复合模式
继续实现视图··.
现在我们来看看视图用户界面控制部分的代码。这个视图通过告诉控制器做什么来让你控制模
型。别忘了，这一页的代码和上一页的代码同在一个类文件中。
public class DJView implements ActionListener,
BeatObserver，BPMObserver {
BeatModelInterface model;
ControllerInterface controller;
JLabel bpmLabel;
JTextField bpmTextField;
e06c
JButton setBPMButton;
DjControl
JButton increaseBPMButton;
Start
JButton decreaseBPMButton;
JMenuBar menuBar;
JMenu menu;
JMenuItem startMenuItem;
JMenuItem stopMenuItem;
这个方法创建所有的控件，并将它们放在界面上。此
public void createControls()(
方法也会处理莱单。当莱单中的Start或Stop被递中时
//在这里创建所有的Swing组件
控制器的相应方法就会被调用。
public void enableStopMenuItem() (
stopMenuItem.setEnabled(true) ;
这些方法将莱单中的Statt和Stop项变成
public void disableStopMenuItem()
ena6le或disa6le。我们稍后金看到控利器利用
stopMenuItem,setEnabled(false);
这些方法改变用户界面。
public void enableStartMenuItem()
startMenuItem.setEnabled(true) ;
点击按钮时，调用此方法
public void disableStartMenuItem()(
startMenuItem,SetEnabled(false) ;
如果Set按钰被点击
控制器就会把BPM设置
public void actionPerformed (ActionEvent event) {
成新的值。
if (event.getSource() == setBPMButton){
int bpm = Integer.parseInt (bpmTextField.getText ());
controller.setBPM (bpm) ;
}else if (event.getSource()
increaseBPMButton)
K
做法类似当点击还增
controller.increaseBPM();
}else if (event.getSource()
deCreaseBPMButton)
或进减按钮时，该信息
controller.decreaseBPM();
会传给控制器。
你现在的位置
541
---
## Page 578
DJ控制器
现在是控制器
是写丢失的片断的时候了：控制器。别忘了，控制器是策略，我们把控