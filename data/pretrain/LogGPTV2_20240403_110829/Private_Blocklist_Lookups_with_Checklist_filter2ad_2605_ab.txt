two database replicas. The system protects the client’s privacy
as long the adversary controls at most one of the two servers.
In traditional PIR schemes, the servers must take a linear
scan over the entire database in the process of answering
each client query. In the standard setting of PIR, in which the
USENIX Association
30th USENIX Security Symposium    877
servers store the database in its original form, this linear-time
server-side computation is inherent [7].
Oﬄine/online PIR. This linear-time cost on the servers is
a performance bottleneck, so recent work [12, 27, 30, 69]
constructs “oﬄine/online” PIR schemes, which move the
servers’ linear-time computation to an oﬄine preprocessing
phase. Oﬄine/online PIR schemes work in two phases:
• In the oﬄine phase, which takes place before the client
decides which database row it wants to fetch, the client
downloads a hint from one of the PIR servers. The hint’s
size is sublinear in the size of the full database, though
generating it still takes the server time that is at least linear
in the size of the database.
• In the online phase, which takes place once the client
decides which database row it wants to fetch, the client
uses its hint to issue a query to the PIR servers. The servers’
responses to the queries allow the client to reconstruct the
database row it is interested in, as well as to update its hint
in preparation for future queries. The total communication
and the server’s work in this step are sublinear in the
database size.
There are two beneﬁts to using oﬄine/online PIR schemes:
1. Lower latency. The amount of online computation that
the servers need to perform to service a client query is
sublinear in the database size, compared with linear for
standard PIR schemes. This lower online cost can translate
into lower perceived latency for the client.
2. Lower total amortized cost. Since each client can reuse a
single hint for making many online queries, the servers’
work per query is also sublinear in the database size,
compared with linear for standard PIR schemes.
√
√
3.2 Puncturable pseudorandom set
To construct our PIR schemes, we will use puncturable pseudo-
random sets [27,76], for which there are simple constructions
from any pseudorandom generator (e.g., AES-CTR).
Informally, a puncturable pseudorandom set gives a way
𝑛 subset 𝑆 ⊂ {1, . . . , 𝑛}
to describe a pseudorandom size-
using a short cryptographic key sk. (The set size is a tunable
parameter, but in this paper we always take the subset size
to be
𝑛.) Furthermore, it is possible to “puncture” the key
sk at any element 𝑖 ∈ 𝑆 to get a key skp that is a concise
description of the set 𝑆(cid:48) = 𝑆(cid:114){𝑖}. The important property of the
punctured key is that it hides the punctured element, in a strong
cryptographic sense. That is, given only skp, an adversary
cannot guess which was the punctured element with better
probability than randomly guessing an element from [𝑛] (cid:114)𝑆(cid:48).
This notion of puncturing comes directly from the literature
on puncturable pseudorandom functions [13,16,50,56,74].
The full syntax and deﬁnitions appear in prior work [27], but
we recall the important ideas here. More formally, a punctured
pseudorandom set consists of the following algorithms, where
we leave the security parameter implicit:
• Gen(𝑛) → sk. Generate a random puncturable set key sk.
• GenWith(𝑛, 𝑖) → sk. Given an element 𝑖 ∈ [𝑛], generate
a random puncturable set key sk such that the element
𝑖 ∈ Eval(sk).
• Eval(sk) → 𝑆. Given an unpunctured key sk, output a pseu-
dorandom set 𝑆 ⊆ [𝑛] of size
𝑛. (Or, given a punctured
key skp, output a pseudorandom set of size
• Punc(sk, 𝑖) → skp. Given a set key sk and element
𝑖 ∈ Eval(sk), output a punctured set key skp such that
Eval(skp) = Eval(sk) (cid:114){𝑖}.
𝑛 − 1.)
√
√
Constructions. Prior work [27] constructs puncturable sets
from any pseudorandom generator 𝐺 : {0, 1}𝜆 → {0, 1}2𝜆
(e.g., AES in counter mode) such that: (a) the set keys are
𝜆 bits long and (b) the punctured set keys are 𝑂(𝜆 log 𝑛)
almost entirely of 𝑂(√
bits long. Furthermore, the computation cost of Eval consists
𝑛) invocations of the PRG.
4 PIR with faster online time
In this section, we describe our new two-server oﬄine/online
PIR protocol. Throughout this section, we view the database
as a static array; in Section 5 we handle the case of a key-value
database that changes over time.
Compared with the best prior two-server scheme [27], ours
improves the servers’ online time and the online communi-
cation by a multiplicative factor of the security parameter 𝜆.
Since we typically take 𝜆 ≈ 128 in practice, this improvement
gives roughly a 128-fold improvement in communication and
online computation cost.
√
Speciﬁcally, on a database of 𝑛 records, of length ℓ bits
each, and security parameter 𝜆, existing PIR schemes have
online communication 𝑂(𝜆2 log 𝑛 + 𝜆ℓ) and online server
time 𝑂(𝜆ℓ
𝑛), measured in terms of main-memory reads and
evaluations of a length-doubling PRG. We bring the online
communication cost down to 𝑂(𝜆 log 𝑛+ ℓ) bits and the online
server-side computation time down to 𝑂(ℓ
𝑛) operations
(dominated by the cost of 𝑂(√
𝑛) AES operations and 𝑂(√
𝑛)
random-access ℓ-bit database lookups). Concretely, these
costs are modest—less than a kilobyte of communication and
under 150 microseconds, even for blocklists with millions of
entries.
√
√
In terms of the preprocessing phase, similarly to previous
𝑛 bits of communication and
work [27], our protocol uses 𝜆ℓ
requires the server to do 𝑂(𝜆ℓ𝑛) work per client.
4.1 Deﬁnition
A two-server oﬄine/online PIR scheme for a database
D = (𝐷1, . . . , 𝐷 𝑛) of 𝑛 records, of length ℓ bits each, consists
of the following four algorithms, where we leave the security
parameter implicit.
Hint(D) → ℎ. The ﬁrst database server uses the Hint algo-
rithm to generate a preprocessed data structure ℎ that a
client can later use to privately query the database D. The
878    30th USENIX Security Symposium
USENIX Association
Hint algorithm is randomized, and the ﬁrst server must run
this algorithm once per client.
Query(ℎ, 𝑖) → (st, 𝑞0, 𝑞1). The client uses the Query algo-
rithm to generate the PIR queries it makes to the database
servers. The algorithm takes as input the hint ℎ and the
database index 𝑖 ∈ [𝑛] that the client wants to read. The
algorithm outputs client state st and PIR queries 𝑞0 and 𝑞1,
one for each server.
Answer(D, 𝑞) → 𝑎. The servers uses Answer, on database D
Reconstruct(st, 𝑎0, 𝑎1) → (ℎ(cid:48), 𝐷𝑖). The client uses state
st, generated at query time, and the servers’ answers 𝑎0
and 𝑎1 to produce a new hint ℎ(cid:48) and the database record
𝐷𝑖 ∈ {0, 1}ℓ.
and client query 𝑞 to produce an answer 𝑎.
We sketch the correctness and privacy deﬁnitions here for
the case in which the client makes a single query. Prior work
gives the (lengthy) deﬁnitions for the multi-query setting [27].
Correctness. If an honest client interacts with honest servers,
the client recovers its desired database record. We say that
an oﬄine/online PIR scheme is correct if, for all databases
D = (𝐷1, . . . , 𝐷 𝑛) and all 𝑖 ∈ [𝑛], the probability
Pr
𝑖 = 𝐷𝑖 :
(_, 𝐷(cid:48)
(st, 𝑞0, 𝑞1) ← Query(ℎ, 𝑖)
ℎ ← Hint(D)
𝑎0 ← Answer(D, 𝑞0)
𝑎1 ← Answer(D, 𝑞1)
𝑖) ← Reconstruct(st, 𝑎0, 𝑎1)
is at least 1 − negl(𝜆), on (implicit) security parameter 𝜆.
Security. An attacker who controls either one of the two
servers learns nothing about which database record the client
is querying, even if the attacker deviates arbitrarily from
the prescribed protocol. More formally, for a database D =
(𝐷1, . . . , 𝐷 𝑛) and 𝑖 ∈ [𝑛], deﬁne the probability distributions
𝐷(cid:48)
ViewD,0,𝑖 :=
ℎ, 𝑞0 :
ℎ ← Hint(D)
(_, 𝑞0, _) ← Query(ℎ, 𝑖)
capturing the “view” of the ﬁrst server, and
ViewD,1,𝑖 :=
𝑞1 :
ℎ ← Hint(D)
(_, _, 𝑞1) ← Query(ℎ, 𝑖)
capturing the “view” of the second server.
An oﬄine/online PIR scheme is secure if, for every number
of records 𝑛, record length ℓ, database D, servers 𝑠 ∈ {0, 1},
and 𝑖, 𝑗 ∈ [𝑛] the distributions ViewD,𝑠,𝑖 and ViewD,𝑠, 𝑗 are
computationally indistinguishable. This deﬁnition implicitly
captures security against an adversarial server that colludes
with additional clients in the system, since the adversary can
simulate the responses of the honest server to such clients.
4.2 Our scheme
Prior oﬄine/online PIR schemes [27] natively have relatively
large correctness error: the online phase fails with relatively
(cid:26)
(cid:26)
(cid:27)
,
(cid:27)
,
large probability ≈ 1/√
𝑛. To allow the client to recover its
record of interest with overwhelming probability, the client and
to drive the correctness error down to (1/√
server must run the online-phase protocol 𝜆 times in parallel
𝑛)𝜆 = negl(𝜆).
Our improved PIR scheme (Construction 1) is slightly more
complicated than those of prior work, but the beneﬁt is that it
has very low (i.e., cryptographically negligible) correctness
error. Since our protocol has almost no correctness error, the
parties need not repeat the protocol 𝜆 times in parallel, which
yields our 𝜆-fold performance gain.
Our main result of this section is:
√
√
√
𝑛).
𝑛 + 1) bits,
Theorem. Construction 1 is a computationally secure of-
ﬂine/online PIR scheme, assuming the security of the underly-
ing puncturable pseudorandom set. On a database of 𝑛 ∈ N
records, each of length ℓ bits, and security parameter 𝜆 ∈ N
(used to instantiate the puncturable pseudorandom set), the
scheme has:
• oﬄine communication 𝜆(ℓ
• oﬄine time 𝑂(𝜆ℓ𝑛),
• client query time 𝑂(𝑛) in expectation,
• online communication 2(𝜆 + 1) log 𝑛 + 4ℓ bits, and
• online server time 𝑂(ℓ
We formally analyze the correctness and security of Con-
struction 1 in the full version of this work [58]. Here, we
describe the intuition behind how the construction works.
Oﬄine phase. In the oﬄine phase of the protocol, the ﬁrst
server samples 𝑇 = 𝜆
𝑛 puncturable pseudorandom set keys
(sk1, . . . , sk𝑇 ). Then, for each 𝑡 ∈ [𝑇], the server computes
the parity of the database records indexed by the set Eval(sk𝑡).
If the database consists of 𝑛 records 𝐷1, . . . , 𝐷 𝑛 ∈ {0, 1}ℓ,
then the 𝑡-th parity word is: 𝑃𝑡 = ⊕ 𝑗∈Eval(sk𝑡) 𝐷 𝑗 ∈ {0, 1}ℓ.
The 𝑡 keys (sk1, . . . , sk𝑇 ) along with the 𝑇 parity words
(𝑃1, . . . , 𝑃𝑇 ) form the hint that the server sends to the client.
If the server uses a pseudorandom generator seeded with seed
to generate the randomness for the 𝑇 invocations of Gen, the
hint that the client stores consists of (seed, 𝑃1, . . . , 𝑃𝑇 ) and
has length 𝜆 + 𝜆ℓ
The key property of this hint is that with overwhelming
probability (at least 1 − 2−𝜆), each database record will be
included in at least one of the parity words. That is, for every
𝑖 ∈ [𝑛], there exists a 𝑡 ∈ [𝑇] such that 𝑖 ∈ Eval(sk𝑡).
Online phase. In the online phase, the client has decided that
it wants to fetch the 𝑖th record of the database, for 𝑖 ∈ [𝑛].
𝑛 bits.
The client’s general strategy will be to obtain the parity
words of the database records indexed by sets of indices 𝑆 and
𝑆(cid:114){𝑖}. The client will then recover the value of the database
record from the two parity words.
Our scheme uses two instantiations of this strategy. In the
ﬁrst case, the client will take the set 𝑆 and its parity word 𝑃
from the stored hint. In the second case, the client will choose
𝑆 to be a fresh random set that contains 𝑖. The client chooses
between the instantiations at random each time it wants to
√
USENIX Association
30th USENIX Security Symposium    879
Construction 1 (Our oﬄine/online PIR scheme). Parameters: database size 𝑛 ∈ N, record length ℓ ∈ N, security parameter
√
𝑛, puncturable pseudorandom set (Gen, GenWith, Eval, Punc) construction of Section 3.2 with universe size
𝜆 ∈ N, 𝑇 := 𝜆
√
𝑛 and set size
𝑛.
Hint(D) → ℎ.
• For 𝑡 ∈ [𝑇]:
– Sample a puncturable-set key sk𝑡 ← Gen(𝑛).
// To reduce the hint size, we can sample the
// randomness for the 𝑇 invocations of Gen from a
// pseudorandom generator, whose seed we include
// in the hint.
records indexed by the set 𝑆𝑡.
𝐷 𝑗.
𝑛 − 1)/𝑛).
(st(cid:48), 𝑞0, 𝑞1) ← QueryCommon(ℎ, 𝑖).
(st(cid:48), 𝑞0, 𝑞1) ← QueryRare(𝑖).
– Set 𝑆𝑡 ← Eval(sk𝑡).
– Compute the parity word 𝑃𝑡 ∈ {0, 1}ℓ of the database
• Output the hint as: ℎ ←(cid:0)(sk1, . . . , sk𝑇 ), (𝑃1, . . . , 𝑃𝑇 )(cid:1).
That is, let 𝑃𝑡 ← ⊕ 𝑗∈𝑆𝑡
Query(ℎ, 𝑖) → (st, 𝑞0, 𝑞1).
• Sample bit 𝛽 ←R Bernoulli(2(√
• If 𝛽 = 0:
• If 𝛽 = 1:
• Set st ← (ℎ, 𝛽, st(cid:48))
• Return (st, 𝑞0, 𝑞1)
Answer(D, 𝑞) → 𝑎.
• Parse the query 𝑞 as a pair (skp, 𝑟), where skp is a
punctured set key and 𝑟 ∈ [𝑛].
• Compute 𝑆p ← Eval(skp) and compute the parity word
𝑊 ∈ {0, 1}ℓ of the database records indexed by this set:
𝑊 ← ⊕ 𝑗∈𝑆p
• Return 𝑎 ← (𝑊, 𝐷𝑟) ∈ {0, 1}2ℓ to the client.
Reconstruct(st, 𝑎0, 𝑎1) → (ℎ(cid:48), 𝐷𝑖).
• Parse the state st as (ℎ, 𝛽, st(cid:48)).
• Parse the answers as (𝑊0, 𝑉0) and (𝑊1, 𝑉1).
• If 𝛽 = 0:
– Parse the hint ℎ as(cid:0)(sk1, . . . , sk𝑇 ), (𝑃1, . . . , 𝑃𝑇 )(cid:1).
– Set ℎ(cid:48) ←(cid:0)(sk1, . . . , sk𝑇 ), (𝑃1, . . . , 𝑃𝑇 )(cid:1).
– Parse the state st(cid:48) as (𝑡, sknew)
– Set 𝐷𝑖 ← 𝑃𝑡 ⊕ 𝑊1.
// The client updates the 𝑡-th component of the hint.
– Set sk𝑡 ← sknew and 𝑃𝑡 ← 𝑊0 ⊕ 𝐷𝑖.
// Common case
𝐷 𝑗.
QueryCommon(ℎ, 𝑖) → (st(cid:48), 𝑞0, 𝑞1).
// The client ﬁnds a set 𝑆𝑡 in the hint that contains index 𝑖.
// The client asks the second server for the parity of the
// database records in 𝑆𝑡 (cid:114){𝑖}.
√
𝑛 − 1
// The client asks the ﬁrst server for the parity of
// records indexed by a freshly sampled random set.
// The client also asks each server for the value of one extra
// database record.