where we cannot guarantee that there is a single central
authority trusted by everyone, we have developed a system
that allows multiple independent authorities so trust can be
spread across them.
Every node in the network chooses its trusted authorities
before it joins the network. The initial trust relationship
between a node and its authorities is established out-of-band.
In this phase the node shares a secret key with each of its
trusted authorities. This key can be derived from any shared
information, such as a PIN, passphrase, or biometric scans.
The node will later use the shared key in the communication
protocol to send secure credential requests to the correspond-
ing authority. The authorities in our ICN solution can serve
both the role of certiﬁcate authorities (that issue identity
certiﬁcates to nodes) as well as authorization authorities
(for the ABE scheme, granting encryption and decryption
attributes to nodes).
The identities of nodes in the network are established
through the certiﬁcates that they have obtained. A node
will trust only content coming from parties in the network
that it trusts – that is, parties that possess certiﬁcates issued
by authorities trusted by the node. Since we may have
multiple authorities in the network, we require at least one
certiﬁcation from a common trusted authority to establish
a trust relationship between two parties. Thus, a publisher
and subscriber must be co-certiﬁed – that is, they have at
least one certiﬁcation authority in common.
4.3 Content Access Control
We use MA-ABE to restrict access to content published in
the network. Publishers encrypt content with an access policy
before sending it to a remote node. The policy speciﬁes who
can access the data, or more speciﬁcally what combination
of attributes are required for gaining access. Note that each
authority has a unique identiﬁer, which determines the set of
attributes for which it can issue encryption and decryption
keys. The name of each attribute links it to the authority
that issued it.
With this approach each publisher can construct a policy
for its data requiring that any party that can decrypt the
ciphertext has to possess a set of attributes issued by author-
ities that the publisher trusts. The publisher needs to know
only the attributes that it uses in its policy.
The distribution of the MA-ABE decryption keys is part of
the ICN solution. Each node requests encryption and decryp-
tion attributes from the authorities that it has established
trust relationship with. It uses the shared secret key with
the authority to establish secure communication for these
requests. Nodes may request encryption and decryption at-
tributes either on demand as they need them to encrypt and
decrypt content or with pre-provisioning – that is, requesting
encryption and decryption attributes as soon as they join
the network.
4.4 Metadata Access Control
In our ICN framework the routing of content is determined
by matching content tags and nodes’ interests. Subscribers
propagate their node descriptions containing a list of inter-
ests to other nodes that they encounter. Similarly publishers
share content with interested remote nodes that they en-
counter. Since nodes aggregate the interests of others’, they
can serve as brokers to route content from publishers to sub-
scribers. In order to perform its task, a broker must able to
33
check for matches between content tags and node interests.
From the point of view of maintaining nodes’ privacy, we
want to limit the information that brokers can learn about
the content and node descriptions that they receive. Ideally,
the brokers would learn just the outcome of the match and
nothing more.
The ideal solution for handling the metadata is to have it
encrypted with a scheme that allows the computation of a
matching function on the ciphertexts of tags and interests.
This would not allow the brokers to learn anything more
about the encrypted tags and interests. Cryptographic tech-
niques such as functional encryption [9, 16] or searchable
encryption [8, 13] are potential candidates for a solution.
Functional encryption provides the ability to generate de-
cryption keys that reveal only the evaluation of a particular
function on the encrypted data, rather than the whole plain-
text. However, we chose not to pursue a solution based on
this since the only known construction of this primitive [16]
is extremely computationally expensive, which is untenable
due to power and processing limitations of mobile devices.
Searchable encryption allows ciphertext to be queried with-
out performing decryption. It provides functionality for gen-
erating search tokens for keywords. The tokens can then
be used to test whether a ciphertext contains the keywords.
The issue with known constructions is that the search tokens
need to be generated using the private parameters for the
scheme. In our publish-subscribe setting this means that
subscribers will either need to know the private parameters
for the encryption used by the publishers (which does not
satisfy our trust model), or will have to request search tokens
from the publishers (which is also not viable since subscribers
and publishers may not be able to communicate directly).
We construct an alternative solution for the metadata
in the system that does not achieve the goal of the ideal
from a privacy point of view, but it provides a reasonable
tradeoﬀ between conﬁdentiality and eﬃciency guarantees.
We replace the content tags and the subscribers’ interests
with their hashes using a single function that is ﬁxed for the
whole system. The hash values of the metadata hide the
exact content but reveals equality patterns across content
tags and subscribers’ interests. In particular, this allows an
adversary to compare the same tags on diﬀerent pieces of
content and in diﬀerent nodes’ interests.
In order to mitigate the additional leakage from the meta-
data represented as hashes, we allow publishers and sub-
scribers to restrict the nodes that can act as brokers for their
content and interests. We realize this functionality using
MA-ABE again. A publisher encrypts content tags under
a policy that speciﬁes which nodes are allowed to serve as
brokers for the data. Similarly, subscribers use MA-ABE
to encrypt their interests with a policy that speciﬁes which
nodes can serve as brokers on their behalf. Nodes that receive
published content and interests can check for matches if and
only if they are in the sets of authorized brokers for both the
publisher and the subscriber.
5. DESIGN
We designed an access control architecture suited for
publish-subscribe ICNs. Our goal was to minimize the as-
sumptions about pre-shared key material between partic-
ipants.
In contrast to many systems, we also implement
the protocols needed for credential distribution. Finally, we
provide simple ﬂexible primitives for applications to specify
how to secure the actual distribution of their content.
Data Forwarding. The ICN forms an overlay and is ag-
nostic to the underlying network transport – that is, node
to node communication can use any protocol, such as UDP,
TCP, or even UDP broadcast, over WiFi, Bluetooth, or other
radio types. Since publishers and subscribers may not be able
to communicate directly, a forwarding mechanism is needed.
Subscribers ﬂood their node descriptions to their neighbors.
Data objects are propagated towards nodes with interests
that match the content tags. We note that the nodes that
receive forwarded published data objects are not necessarily
subscribers. They may also be intermediate brokers that
have propagated node descriptions. The choice of whether
to cache a data object at a node depends on the application
of a local utility function to the content tags, and the state
of the local cache.
Cryptographic Primitives. Our constructions use multi-
authority attribute-based encryption (MA-ABE), which con-
sists of the following algorithms: SetupABE(1λ), which gen-
erates constants for the scheme using security parameter λ;
EncryptABE(P, m), which encrypts a message m under a policy
P; DecryptABE(ct, SKα1,...,αn ), which decrypts a ciphertext
ct if and only if the attributes α1, . . . , αn of the decryption
key satisfy the encryption policy P used to produce ct.
We also use a signature scheme which has the following al-
gorithms: Gen(1λ), which generates private signing key SKsign
and public veriﬁcation key VKsign; Sign(SKsign, m), which pro-
duces signature σ for a message m; and Verify(VKsign, σ, m),
which veriﬁes the signature σ for m. The signature scheme
guarantees that no party that does not have the secret sign-
ing key can produce a valid signature that can be veriﬁed
with the corresponding public veriﬁcation key.
5.1 Data Objects
Applications publish and receive data through our com-
munication protocols in units called data objects. They have
the following structure:
{ MetaData }[ Content ]
which consists of two parts – the metadata that is used for
forwarding the data object, and the content that is used by
the receiver.
The metadata of a data object consists of several tags that
can serve diﬀerent purposes. One of the tags speciﬁes the
type of the data objects. The main types of data objects are
published data, node descriptions containing the interests of
nodes, and messages used in credential distribution protocols.
Tags in the metadata are used by the forwarding algorithms.
These can be tags describing the content of a published
data object or a subscriber’s interests in a node description.
We note that tags and interests are not unique identiﬁers.
Diﬀerent data objects can share some of the tags that describe
their content. Further, subscribers may have intersecting
sets of interests in their node descriptions.
We can also use the metadata to emulate point-to-point
communication between two parties. This is done by having
the sender tag its messages with the identity of the receiver,
while the receiver includes in its node description interests
associated with its identity. The forwarding mechanism
moves data objects from node to node based on matching
data object tags to node interests, as described above. As a
result, the data objects will be forwarded from the sender to
the receiver, even if the connectivity is intermittent. Such
34
point-to-point communication will be used in the protocols
for credential distribution, as described in Section 5.2.
Metadata Conﬁdentiality. Routing requires that brokers
must be able to compare tags and interests in order to decide
whether to forward a data object. At the same time we want
to minimize the information that a broker learns about the
data object if it is not authorized to access the content.
As discussed in Section 4.4, we adopt a solution that oﬀers
a tradeoﬀ between privacy and the eﬃciency of matching
metadata. The metadata used for forwarding consists of
interests, object type tagObjType, and other tags, denoted by
t1, . . . , tn. These are all hashed with a function H():
MetaData = (tagObjType, H(t1), . . . , H(tn))
When a user node U published a data object, it can scope the
set of nodes in the ICN that are allowed to serve as brokers
for it. This is done by deﬁning the chosen set with a broker
access policy PMetaData, and then encrypting the metadata
with this policy using MA-ABE. The resulting data object
has the form:
{ ctMD = EncryptABE(PMetaData, MetaData) }
[ Content ]
Brokers attempt to decrypt the metadata of all data objects
that they receive. When a broker is able to decrypt the
metadata of a data object, it checks the extent to which the
hashed content tags H(ta) match the hashed interests H(ib)
of each node description with metadata that it was able to
decrypt. If there is a suﬃcient match between the content
tags and a remote node’s interests, the broker forwards the
data object towards the subscriber.
Since nodes may not have credentials when they make
security requests and receive responses, the data objects
that contain such messages are handled diﬀerently. Their
metadata is not encrypted with MA-ABE. Instead they are
routed point-to-point, revealing only the source and desti-
nation identiﬁers. No other information is present in the
metadata, as described further in Section 5.2.
Content Conﬁdentiality and Integrity. A user node U
can limit which nodes in the ICN should be able to access the
content they publish. This is achieved in a manner similar to
the way brokers are selected. The publisher deﬁnes the set of
authorized subscribers by specifying an access policy PContent.
This policy can be (and is likely to be) more restrictive than
the broker access policy. The publishing node uses MA-ABE
to encrypt the content with the speciﬁed access policy.
In order to guarantee the integrity of the content and the
metadata, the publisher appends a signature. A publishing
node thus emits data objects with the form:
{ctMD = EncryptABE(PMetaData, MetaData)}
[ctContent = EncryptABE(PContent, Content)]
σ = Sign(SKsign,U(ctMD||ctContent)
Data objects used to convey security requests and responses
to and from authorities are not encrypted with MA-ABE
since nodes may not have suﬃcient credentials to do so.
Instead, the integrity of the content is assured using the
secret key shared by the user and authority and a MAC –
that is, a keyed hash function. Similarly, the conﬁdentiality
of the content is ensured using symmetric encryption with
the shared secret. This is described further in Section 5.2. In
practice a key derivation function is used to obtain diﬀerent
keys for hashing and encryption from a single shared secret.
We note that for eﬃciency purposes, we encrypt a short
symmetric key K with the MA-ABE scheme and then en-
crypt the actual message M using symmetric encryption
with key K – that is, whenever we use EncryptABE(P, M ),
the actual implementation is of the form EncryptABE(P, K),
Encryptsym
K (M ). This holds for the encryption of both meta-
data and content.
5.2 Bootstrapping Credentials
SDReq(CertiﬁcateSigningRequest, Φ(U, U))
SDRes(SignedCertiﬁcate, Φ(U, A), Φ(A, A))
N ode
CA
SDReq(AttributeRequest, A · α)
SDRes(Attribute, A · α, KeyGenMA−ABE(A, A · α))
Figure 1: Security data requests for certiﬁcation
or attributes originate from user nodes. They are
handled by authorities, which send security data
responses with signed certiﬁcates or cryptographic
keys corresponding to attributes.
Since the setting that we aim to address does not allow for
centralized certiﬁcation authorities, we adopt an approach
where any party in the network can be reconﬁgured to serve
as a certiﬁcation authority. The only assumption about pre-
shared keys in our system is the following: nodes in the
system will have shared private keys with authorities from
which they can request access credentials.
When a node A is conﬁgured in the authority mode of
operation, it publishes a node description that includes an
interest tagrequest,A, which speciﬁes that it wants to receive all
credential requests for itself. A user U who has a shared key s
with the authority A can generate a credential request M to
the authority as follows: U derives a key K for a symmetric
key encryption scheme PKE = (Setup, Encrypt, Decrypt) and
for a message authentication code MAC [6]. It then
a key K
generates SDReq(M ), a security data request from user U
to authority A with message M , deﬁned as follows:
(cid:3)
{tagrequest,A }
[ct = EncryptK(U, A, tagrequest,A, M ), h = MACK
(cid:2) (ct)]
At the same time, U ﬂoods its node description that
includes an interest tagresponse,U, which speciﬁes that the user
wants to receive data objects with responses to its credential
requests. When the authority A receives the request, it
publishes a data object SDRes(M), a security data response
from authority A to user U with message M
, deﬁned as
follows:
(cid:3)
{tagresponse,U}
[ct