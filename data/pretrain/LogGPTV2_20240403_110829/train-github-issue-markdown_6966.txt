To successfully integrate Raven's Sentry client with Celery, I followed these steps:

1. **Disable the `celery.worker.job` Logger to Avoid Duplicates in Sentry:**
   - One error would be logged by `celery.worker.job` without local variables.
   - Another error would be logged by the root logger, which includes local variables.
   - To prevent duplicates, I configured the `celery.worker.job` logger as follows:
     ```yaml
     celery.worker.job:
       level: INFO
       handlers: [yourhandler]
       propagate: no
     ```

2. **Set `CELERYD_HIJACK_ROOT_LOGGER` to `False` in the Celery Configuration:**
   - This prevents Celery from hijacking the root logger, allowing for more control over logging.
   - Additionally, I completely disabled Celery's logging setup:
     ```python
     from celery import signals

     @signals.setup_logging.connect
     def setup_logging(**kwargs):
         """Setup logging."""
         pass  # No-op to disable Celery's logging setup
     ```

3. **Configure Sentry as per the Documentation:**
   - I set up Sentry using the following code:
     ```python
     from raven import Client
     from raven.contrib.celery import register_signal, register_logger_signal

     client = Client()

     # Register a custom filter to filter out duplicate logs
     register_logger_signal(client)

     # Hook into the Celery error handler
     register_signal(client)
     ```

4. **Dependencies Used:**
   - `celery==3.1.17`
   - `kombu==3.0.24`
   - `raven==5.1.1`

5. **Additional Context:**
   - There was prior discussion about this issue in #1867, but I am unsure if any changes or updates have been made since then.

By following these steps, I was able to ensure that errors are correctly logged in Sentry without duplication and with the necessary context.