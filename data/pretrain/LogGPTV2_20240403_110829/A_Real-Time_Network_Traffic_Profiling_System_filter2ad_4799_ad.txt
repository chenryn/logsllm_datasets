a
e
R
1
0
0
0.2
0.8
Relative uncertainty w/o sampling
0.4
0.6
1
0.8
0.6
0.4
0.2
g
n
i
l
p
m
a
s
/
w
y
t
n
a
i
t
r
e
c
n
u
e
v
i
t
l
a
e
R
1
0
0
0.2
0.8
Relative uncertainty w/o sampling
0.4
0.6
1
(a) srcPort
(b) dstPort
(c) srcIP
Figure 6. Feature distribution of free dimensions for 140 dstIP clusters with and without random
sampling
ﬂow tables, but also retains the (approximately) same set
signiﬁcant clusters and their behavior.
5.2 Proﬁling-aware Filtering
A key lesson from random sampling is that the clusters
associated with denial of service attacks are usually very
large in ﬂow count, and hence consume a large amount of
memory and CPU time. In addition, proﬁling such behavior
does not require a large number of ﬂows, since the feature
distributions very likely remain the same even with a small
percentage of trafﬁc ﬂows. Based on this insight, we de-
velop a proﬁling-aware ﬁltering solution that limits the size
of very large clusters, and adaptively samples on the rest
of clusters when the system is faced with sudden explosive
growth in the number of ﬂows.
The details of the proﬁling-aware sampling algorithm are
as follow. First, we choose two watermarks (L and H) for
the proﬁling system. L represents the moving average of
ﬂow tables over time, and H represents the maximum size
of ﬂow tables that system will accept. In our experiments,
we set H = 10M , which is estimated to require 1GB mem-
ory cost. In addition, we set the maximum and minimum
sampling ratios, i.g., µmax and µmin. The actual sampling
µ will be adaptively decided based on the status of ﬂow ta-
ble size. Speciﬁcally, the sampling ratio becomes thinner as
the size of ﬂow table increases. For simplicity, let ftable
denote the size of ﬂow table. If ftable is below L, the
proﬁling system accepts every ﬂow. In contrary, if ftable
is equal to H, the system will stop reading ﬂows and exit
with a warning signal.
If ftable is equal to L or certain marks, i.e., L + i∗ D,
where D is the incremental factor and i = 1, 2..., (H −
L)/D − 1, the system computes the relative uncertainty of
each dimension and evaluates whether there is one or a few
dominant feature values along each dimension. In our ex-
periments, we set D = 1M as the incremental factor. The
existence of such values suggests that certain types of ﬂows
dominate current ﬂow tables, and indicates anomalous traf-
ﬁc patterns. Thus, the system searches these values and
marks them as signiﬁcant clusters for ﬂow ﬁltering. Sub-
sequently, any ﬂow, which contains a feature value marked
with signiﬁcant, will be ﬁltered, since such ﬂow will not
affect the behavior of the associated clusters. On the other
hand, additional ﬂows for other small clusters have substan-
tial contributions to their behavior. Thus, we should give
preference to ﬂows that belong to such small clusters. On
the other hand, the system could not accept all of these ﬂows
with preference after f table exceeds L watermark. As a re-
sult, each of these ﬂows is added with the adaptive sampling
ratio µ = µmax − i ∗ µmax−µmin
(H−L)/D−1 .
We run the proﬁling system on the ﬂow tables in the
cases of DoS attack and worm outbreaks with the proﬁle-
aware ﬁltering algorithm. Like random sampling, proﬁling-
aware sampling also reduces CPU time and memory cost
by limiting the size of ﬂow table. On the other hand, the
proﬁling-aware sampling has two advantages over the ran-
dom sampling. First, the set of clusters extracted using this
algorithm is very close to the set without sampling. For
example, in the case of DoS attack, the system obtains 41
srcIP clusters, 210 dstIP clusters, 21 srcPrt clus-
ters and 6 dstPrt cluster, respectively. Compared with
58% of signiﬁcant clusters extracted in random sampling,
our proﬁling-aware algorithm could extract over 90% of
309 original clusters that are selected without any sam-
pling. Second, the behavior accuracy of signiﬁcant clus-
ters are also improved. Speciﬁcally, among 41 srcIP’s,
210 dstIP’s, 21 srcPrt’s, and 6 dstPrt’s signiﬁcant
clusters, only 3 dstIP’s and 1 srcPrt clusters change to
“akin” classes from their original behavior classes. These
ﬁndings suggest that the proﬁling-aware proﬁling algorithm
approximately retains the feature distributions of signiﬁcant
clusters and behaviors.
Fig. 7 shows the feature distribution of free dimensions
of 210 dstIP clusters, extracted both without sampling
and with proﬁling-aware ﬁltering algorithm. In general, the
feature distributions of all free dimensions for almost all
clusters after ﬁltering are approximately the same as those
without sampling. The outliers deviant from the diagonal
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:04 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 20071
0.8
0.6
0.4
0.2
g
n
i
l
p
m
a
s
/
w
y
t
n
a
i
t
r
e
c
n
u
e
v
i
t
l
a
e
R
0
0
0.2
0.8
Relative uncertainty w/o sampling
0.4
0.6
1
0.8
0.6
0.4
0.2
g
n
i
l
p
m
a
s
/
w
y
t
n
a
i
t
r
e
c
n
u
e
v
i
t
l
a
e
R
1
0
0
0.2
0.8
Relative uncertainty w/o sampling
0.4
0.6
1
0.8
0.6
0.4
0.2
g
n
i
l
p
m
a
s
/
w
y
t
n
a
i
t
r
e
c
n
u
e
v
i
t
l
a
e
R
1
0
0
0.2
0.8
Relative uncertainty w/o sampling
0.4
0.6
1
(a) srcPort
(b) dstPort
(c) srcIP
Figure 7. Feature distribution of free dimensions for 210 dstIP clusters with and without proﬁling-
aware sampling
lines correspond to feature distributions of three clusters
whose behavior has changed. Upon close examinations,
we ﬁnd that ﬂows in these clusters contain a mixture of
Web and ICMP trafﬁc. The latter are the dominant ﬂows
in DoS attacks, so they are ﬁltered after the size of ﬂow ta-
ble reaches L in the proﬁling-aware ﬁltering algorithm. The
ﬁltered ICMP ﬂows in these clusters explain the changes of
the feature distributions as well as the behavior classes.
In the worm case, the proﬁling-aware ﬁltering algorithm
also successfully reduces CPU and memory cost of the pro-
ﬁling system, while maintaining high proﬁling accuracy in
terms of the number of extracted signiﬁcant clusters and the
feature distributions of these clusters. Thus, the proﬁling-
aware ﬁltering algorithm can achieve a signiﬁcant reduction
of CPU time and memory cost during anomalous trafﬁc pat-
terns while obtaining accurate behavior proﬁles of end hosts
and network applications.
6 Conclusions and Future Work
This paper explores the feasibility of designing, imple-
menting and utilizing a real-time behavior proﬁling system
for high-speed Internet links. We ﬁrst discuss the design
requirements and challenges of such a system and present
an overall architecture that integrates the proﬁling system
with always-on monitoring systems and an event analysis
engine. Subsequently, we demonstrate the operational fea-
sibility of building this system through extensive perfor-
mance benchmarking of CPU and memory costs using a va-
riety of packet traces collected from OC-48 backbone links.
To improve the robustness of this system during anomalous
trafﬁc patterns such as denial of service attacks or worm
outbreaks, we propose a simple yet effective ﬁltering algo-
rithm to reduce resource consumptions while retaining high
proﬁling accuracy. We are currently in the process of inte-
grating the event analysis engine into a rule-based anomaly
detection system.
In addition, we are extending the ﬂow
import/export protocol so that the proﬁling system could
work with multiple continuously monitoring systems. Fi-
nally we would like to correlate anomalous and interesting
events from multiple monitoring points.
Acknowledgement: This work was supported in part by
the NSF grants CNS-0435444 and CNS-0626812, a Univer-
sity of Minnesota Digital Technology Center DTI grant and
Sprint ATL gift grant.
References
[1] A. Hussain, J. Heidemann, and C. Papadopoulos. A Frame-
work for Classifying Denial of Service Attacks. In Proceed-
ings of ACM SIGCOMM, August 2003.
[2] G. Iannaccone, C. Diot, I. Graham, and N. McKeown. Mon-
itoring Very High Speed Links. In Proceedings of ACM SIG-
COMM Internet Measurement Workshop, November 2001.
[3] M. Jordan. Graphical models. Statistical Science, Special
Issue on Bayesian Statistics, 19:140–155, 2004.
[4] S. Kandula, D. Katabi, M. Jacob, and A. Berger. Botz-4-
Sale: Surviving Organized DDoS Attacks That Mimic Flash
Crowds. In Proceedings of Symposium on NSDI, May 2005.
[5] T. Karagiannis, K. Papagiannaki, and M. Faloutsos. BLINC:
Multilevel Trafﬁc Classiﬁcation in the Dark. In Proceedings
of ACM SIGCOMM, August 2005.
[6] K. Keys, D. Moore, and C. Estan. A Robust System for Accu-
rate Real-Time Summaries of Internet Trafﬁc. In Proceedings
of ACM SIGMETRICS, June 2005.
[7] K. Krippendorff. Information Theory: Structural Models for
Qualitative Data. Sage Publications, 1986.
[8] D. Moore, V. Paxson, S. Savage, C. Shannon, S. Staniford,
IEEE Security
Inside the Slammer Worm.
and N. Weaver.
and Privacy, July 2003.
[9] K. Xu, Z.-L. Zhang, and S. Bhattacharyya. Proﬁling Inter-
net Backbone Trafﬁc: Behavior Models and Applications. In
Proceedings of ACM SIGCOMM, August 2005.
[10] C. Zou, L. Gao, W. Gong, and D. Towsley. Monitoring and
Early Warning for Internet Worms. In Proceedings of ACM
CCS, October 2003.
[11] M. Zwick. An Overview of Reconstructability Analysis. In-
ternational Journal of Systems & Cybernetics, 2004.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:04 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007