title:FANCI : Feature-based Automated NXDomain Classification and Intelligence
author:Samuel Sch&quot;uppen and
Dominik Teubert and
Patrick Herrmann and
Ulrike Meyer
FANCI : Feature-based Automated NXDomain 
Classification and Intelligence
Samuel Schüppen, RWTH Aachen University; Dominik Teubert, Siemens CERT; 
Patrick Herrmann and Ulrike Meyer, RWTH Aachen University
https://www.usenix.org/conference/usenixsecurity18/presentation/schuppen
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.FANCI : Feature-based Automated NXDomain Classiﬁcation and
Intelligence
Samuel Sch¨uppen
RWTH Aachen University
Dominik Teubert
Siemens CERT
Patrick Herrmann
RWTH Aachen University
Ulrike Meyer
RWTH Aachen University
Abstract
FANCI is a novel system for detecting infections with
domain generation algorithm (DGA) based malware by
monitoring non-existent domain (NXD) responses in
DNS trafﬁc. It relies on machine-learning based classiﬁ-
cation of NXDs (i.e., domain names included in negative
DNS responses), into DGA-related and benign NXDs.
The features for classiﬁcation are extracted exclusively
from the individual NXD that is to be classiﬁed. We eval-
uate the system on malicious data generated by 59 DGAs
from the DGArchive, data recorded in a large university’s
campus network, and data recorded on the internal net-
work of a large company. We show that the system yields
a very high classiﬁcation accuracy at a low false positive
rate, generalizes very well, and is able to identify previ-
ously unknown DGAs.
1
Introduction
Modern botnets
rely on domain generation algo-
rithms (DGAs) for establishing a connection with their
command & control (C2) server instead of using ﬁxed
domain names or ﬁxed IP addresses [14, 2]. According
to DGArchive1, to date more than 72 different DGAs are
known and the number is expected to further increase
[14] as DGAs signiﬁcantly improve a botnet’s resistance
against takedown. A DGA generates a set of malicious
algorithmically-generated domains (mAGDs) serving as
potential rendezvous domains with a C2 server. The bots
subsequently query the domain name system (DNS) for
the IP addresses of these domains. The amount of do-
mains generated per day varies between 1 and 10,000
depending on the DGA [14]. The botmaster registers a
few of these mAGDs. If these are queried by the bots,
the bots obtain a valid IP address for their C2 server. All
of the many other queries of the bots will result in non-
existent domain (NXD) responses.
1https://dgarchive.caad.fkie.fraunhofer.de/
In the past, monitoring DNS trafﬁc (successfully re-
solving and/or non-resolving) has been used as primary
or additional source of information in detecting mali-
cious activity in a network (e.g., [2, 16, 18, 9, 4]). Some
of these approaches have concentrated on identifying C2
servers, others have focused on identifying infected de-
vices or detecting malicious domains in general. These
prior approaches, however, all require the correlation
of information extracted from groups of DNS queries
and/or responses and thus typically require extensive
tracking.
In addition, many of these prior approaches
are based on clustering, which involves manual labelling
of the identiﬁed clusters. While these prior works show
promising detection capabilities, little information on the
efﬁciency of the detection process in terms of time and
memory requirements is reported.
This work presents FANCI: Feature-based Auto-
mated NXDomain Classiﬁcation and Intelligence, a
novel system for detecting infections with DGA-based
malware by monitoring NXD responses.
FANCI’s
classiﬁcation module uses an machine learning (ML)-
classiﬁer (random forests (RFs) or support vector ma-
chines (SVMs)) to separate NXDs into benign non-
existent domains (bNXDs) and mAGDs. This classiﬁer
uses a small number of language-independent features
that can efﬁciently be extracted from the domain names
included in NXD responses alone. Other contextual in-
formation extracted from the full NXD response that car-
ried the domain name, from other related DNS responses,
or from any other source are not required.
We extensively evaluate FANCI’s classiﬁcation mod-
ule on malicious data obtained from DGArchive [14] and
data recorded in the campus network of RWTH Aachen
University2, and in the internal network of the Siemens
AG3. The evaluation shows that FANCI is able to de-
tect unknown DGAs with a detection accuracy of over
99% at a very low false positive rate. Unlike prior work,
2https://www.rwth-aachen.de
3https://www.siemens.com
USENIX Association
27th USENIX Security Symposium    1165
we also show that FANCI generalizes very well, that is,
it maintains its detection quality even when applied to
data recorded in a network different from the one it was
trained in. Applying FANCI, we were able to identify ten
DGAs not included in the DGArchive at the time of writ-
ing. We reckon that at least four of them were completely
unknown, while the others most likely result from un-
known seeds or are variations of known DGAs. Finally,
our system is very efﬁcient with respect to both training
(5.66 min on 92,102 samples) and prediction (0.0025 s
per sample) such that it is even able to perform on-the-
ﬂy detection in large networks without sampling.
FANCI’s lightweight feature design and its generaliz-
ability allows for versatile application scenarios, includ-
ing the use of its classiﬁcation as a service, and its use in
large-scale networks as well as on home-grade hardware.
2 Preliminaries
In this section, we provide a brief overview on the types
of mAGDs different DGAs generate and categorize dif-
ferent types of domain names that occur in NXD re-
sponses due to benign causes. This is followed by an
overview of the supervised learning classiﬁers we use in
this work. Note that throughout this work, we always use
NXD response to refer to the entire UDP4 packet contain-
ing the DNS response. In contrast, we refer to NXD as
the bare domain name included in such a response.
2.1 Domain Names in NXD Responses
In order to highlight the diversity in the generation
schemes used by different DGAs, Figure 1 illustrates ex-
ample mAGDs of six different DGAs. Where mAGDs
generated by Kraken, Corebot, and Torpig look com-
pletely random, the mAGDs of Matsnu are concatena-
tions of genuine English words. mAGDs of Volatile-
Cedar are all permutations of the same base domain
name and Dyre generates mAGDs of equal length that
consist of a 3 character preﬁx followed by a hash-like
string.
In addition to NXDs generated by DGAs (i.e.,
mAGDs),
there are mainly three groups of benign
non-existent domains (bNXDs) originating from typ-
ing errors, misconﬁgurations, and misuse, respectively,
where misconﬁguration and misuse belong to the group
of benign algorithmically-generated domains (bAGDs).
bAGDs are, like mAGDs, generated algorithmically but
originate from benign software and only have benign
purposes. Typing error bNXDs are caused by humans
misspelling existing domain names. Misconﬁguration
4in rare cases TCP is used
b k n l l s n b f z q r . n e t
c d z o g o e x i s . t v
hdozpcy . com
3 lgrupwdivsfm2w4kng2iha . ddns . n e t
o j y v i p s 6 k l s n q p y . i n
af5fmb78sbuno4c . ws
(a) Kraken
(b) Corebot
s a l t −amount−p a t t e r n . com
company−depend . com
b t k i n d a s a l a d m w . com
g e t a d o b e f l a s h p l a y e r . n e t
e g t a d o b e f l a s h p l a y e r . n e t
e t a d o b g e f l a s h p l a y e r . n e t
(c) Matsnu
(d) VolatileCedar
r b t q e b f . b i z
q a s k e b f . com
q a s k e b f . b i z
k e a 1 7 4 6 3 8 0 2 3 b e c c e 5 2 2 b 1 a e 8 f 6 c a a d f 8 0 . t o
l8743f7debd036e5de923bbd70a191d009 . i n
ma4dbf2b2ef5bb0d01a065198fab552b25 . hk
(e) Torpig
(f) Dyre
Figure 1: Illustration of mAGDs of six different DGAs.
u n i v r e s i t y . edu
i i e e e . org
m c i r o s f o t . com
adobe . comm
wfnfhde
k a q o e i z e r b o
a hx u r of b d ug h h . rwth−aachen . de
pphrncxkxe . i t s e c . rwth−aachen . de
(a) Typing error
(b) Google Chrome
brn001ba99bbcd9 . matha . rwth−aachen . de
cache−cdn . k a l a y d o . com
f i l e s e r v e r f b 6 . fb6 . rwth−aachen . de
de−swyx−2. f r a b a . l o c a l
(c) Misconﬁguration
Figure 2: Illustration of typical bNXDs from the network
of RWTH Aachen University.
bAGDs are caused by devices or software trying to re-
solve domain names that do not exist (anymore) due to
conﬁguration errors or bugs. Misuse bAGDs are typi-
cally caused by software using DNS for non-intended
purposes. For example, anti-virus software performing
signature checks [17] or Google Chrome, which uses
random domain names to probe its DNS environment
and detect DNS hijacking attempts [19]. Figure 2 shows
example bNXDs for each of the three categories.
2.2 Supervised Learning Classiﬁer
In our work, we focus on supervised learning classiﬁers,
more speciﬁcally on random forests (RFs) and support
vector machines (SVMs) using the two labels benign and
malicious. The labels are known for training purposes.
An RF is an ensemble of multiple decision trees (DTs)
introduced to overcome limitations of a single DT. Pre-
dicting the label of an unknown sample using an RF is
performed by a majority vote of all DTs in the forest.
RFs were originally introduced in [10] and later on re-
ﬁned, for example, in [5, 6].
An SVM computes a hyperplane during training to
1166    27th USENIX Security Symposium
USENIX Association
separate the training data according to their label. Then,
unknown data can be predicted by determining the loca-
tion of an observed sample in relation to this hyperplane.
SVMs were introduced by Vapnik [7].
3 Features
In this section, we describe the 21 features used by
FANCI to classify NXDs into bNXDs and mAGDs.
We divide the presented features into three categories:
structural features, linguistic features, and statistical fea-
tures. We focus on features that are computationally
lightweight w.r.t. their extraction, do neither require pre-
computations, nor a priori knowledge, and are indepen-
dent of a speciﬁc natural language.
Our feature design is naturally inspired by the features
used in related work [14, 2, 16]. However, we focus on
features that can be extracted from an individual domain
name. In particular, we get rid of all features used in pre-
vious work that require additional contextual information
without loss of (in fact rather increasing) accuracy (see
Section 6).
3.1 Deﬁnitions and Notation
Throughout the rest of this paper we use the notations
detailed in the following.
A domain name d is a sequence of characters from an
alphabet Σ. It consists of a sequence of subdomains sep-
arated by dots: d = sn. . . . .s2.s1, where si,i ∈ {1, . . . ,n}
denotes the i-th subdomain of d. Note that the permit-
ted alphabet Σ in legitimate domain names depends on
local registration authorities. Theoretically, almost all
Unicode characters are permissible [13].
A valid top level domain (TLD) is a TLD that is part
of the ofﬁcial list of TLDs maintained by the Internet
Assigned Numbers Authority (IANA), for example, org,
com, eu, and edu [3]. Currently, 1,547 valid TLDs are
listed in the root zone [11].
A public sufﬁx is a sufﬁx under which domains are
publicly registrable. This includes valid TLDs as well
as sufﬁxes, such as dyndns.org or co.uk. The Mozilla
Foundation maintains a list of more than 11,000 valid
public sufﬁxes5 [8].
A feature is deﬁned as a function F of a sample d,
where F (d) denotes the extracted feature. F (d) can ei-
ther be a single scalar or a vector of scalars. Concatenat-
ing all extracted features results in the feature vector of d.
In the following sections, some of our features (marked
by *) ignore separating dots and some (marked by †) ig-
nore valid public sufﬁxes. Features ignoring both oper-
ate on a string referred to as dot-free public-sufﬁx-free
5https://publicsuffix.org
#
1
2
3
4
5
6
7
8
9
10
11
12
†
†
†
†
†
†
*†
†
Feature
Domain Name Length
Number of Subdomains
Subdomain Length Mean
Has www Preﬁx
Has Valid TLD
Contains Single-Character
Subdomain
Is Exclusive Preﬁx Repeti-
tion
Contains TLD as Subdo-
main
Ratio
Subdomains
Ratio
Exclusive Subdomains
Underscore Ratio
Contains IP Address
of Digit-Exclusive
of Hexadecimal-
Output F (d1) F (d2)
34
integer
2
integer
25
rational
0
binary
1
binary
binary
0
19
2
7.5
0
1
0
binary
binary
rational
rational
rational
binary
0
0
0.0
0.0
0.0
0
0
0
0.0
0.0
0.0
0
on
the
where
example
Illustration of 12 structural
features
Table 1:
d1
and
evaluated
d1 = bnxd.rwth-aachen.de
d2,
and
d2 = dekh1her76avy0qnelivijwd1.ddns.net.
Some features (marked by *) ignore separating dots and
some (marked by †) ignore valid public sufﬁxes.
domains
domain and denoted by dds f . Consider for example the
domain name d = itsec.rwth-aachen.de that yields
dds f = itsecrwth-aachen.
Note that we ignore separating dots in some of our fea-
tures, because the number of subdomains feature already
reﬂects the number of subdomains of a domain name and
the dots as such do not provide any additional informa-
tion. We ignore public sufﬁxes in some features as they
are not algorithmically generated. Although a DGA may
vary the public sufﬁx among its mAGDs, it is only able
to choose from the ofﬁcial pool of available public suf-
ﬁxes as otherwise the resulting domain names would not
be resolvable on the public Internet. As benign domain
names have to select public sufﬁxes from the exact same
pool of ofﬁcially available public sufﬁxes, a public sufﬁx
offers no valuable additional information to distinguish
mAGDs from bNXDs.
3.2 Structural Features
The ﬁrst feature category focuses on structural prop-
erties of a domain name. Table 1 gives an overview
of our structural features including an example evalua-
tion on the domain names d1 = bnxd.rwth-aachen.de
and d2 = dekh1her76avy0qnelivijwd1.ddns.net,
where d1 is benign and d2 is a known mAGD.
In the following, we discuss the non-self-explanatory
structural features #7, #9, #10, and #12 in more detail.
(#7) Is Exclusive Preﬁx Repetition. This is a bi-
nary feature, which is 1 if and only if
the do-
main consists of a single character sequence w that
USENIX Association
27th USENIX Security Symposium    1167
#
13
14
15
16
17
18
19
Feature
†
*†
*†
*†
*†
*†