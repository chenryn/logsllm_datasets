  1 |   8152 |        1 |     35 |   1746 |      0 |        0 | (0,1)  |           2 |       2306 |     24 |        |        
  2 |   8112 |        1 |     37 |   1748 |      0 |        0 | (0,2)  |           2 |       2050 |     24 |        |        
(2 rows)  
```  
PostgreSQL的回滚操作非常迅速, 从heap_page_items得到的信息中也可以验证, 显然, 回滚时, 数据块没有变化. 这条记录的t_infomask维持0x0802.   
接下来举一个更新的例子 :   
session 1:  
```  
digoal=# begin;  
BEGIN  
digoal=# update digoal.t set info='new' where id=1;  
UPDATE 1  
```  
session 2:  
```  
digoal=# select * from heap_page_items(get_raw_page('digoal.t',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     35 |   1746 |   1750 |        0 | (0,3)  |       16386 |        258 |     24 |        |        
  2 |   8112 |        1 |     37 |   1748 |      0 |        0 | (0,2)  |           2 |       2050 |     24 |        |        
  3 |   8080 |        1 |     32 |   1750 |      0 |        0 | (0,3)  |       32770 |      10242 |     24 |        |        
(3 rows)  
```  
解释:  
ctid=(0,1)的记录t_xmax变成了1750, t_infomask变成258 = 0x0102 (HEAP_HASVARWIDTH, HEAP_XMIN_COMMITTED) 说明此时xmin和xmax都是有效的, 但是xmax还未提交. 因此其他会话能看到ctid=(0,1)这条. t_ctid=(0,3), 表示这条记录同时指向ctid=(0,3)的记录.  
同时新增了ctid=(0,3)的记录, t_xmin=1750, t_infomask = 10242 = 0x2802 (HEAP_UPDATED, HEAP_XMAX_INVALID, HEAP_HASVARWIDTH) 说明这条记录的xmin是有效的, 但是还未提交.  
session 1:  
```  
COMMIT;  
```  
session 2:  
```  
digoal=# select * from digoal.t;  
 id | info   
----+------  
  1 | new  
(1 row)  
digoal=# select * from heap_page_items(get_raw_page('digoal.t',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     35 |   1746 |   1750 |        0 | (0,3)  |       16386 |       1282 |     24 |        |        
  2 |   8112 |        1 |     37 |   1748 |      0 |        0 | (0,2)  |           2 |       2562 |     24 |        |        
  3 |   8080 |        1 |     32 |   1750 |      0 |        0 | (0,3)  |       32770 |      10498 |     24 |        |        
(3 rows)  
```  
session1提交后,   
ctid=(0,1)的记录t_infomask变成1282 = 0x0502 (HEAP_HASVARWIDTH, HEAP_XMIN_COMMITTED, HEAP_XMAX_COMMITTED) 说明此时xmin和xmax都是有效并提交的状态. t_ctid=(0,3), 表示这条记录同时指向ctid=(0,3)的记录. (对于repeatable read和serializeable read的隔离级别, 读取哪条tuple, 就要分辨t_xmin和t_xmax了. 还有vacuum进程也需要看这两个值)  
ctid=(0,3)的记录, t_infomask = 10498 = 0x2902 (HEAP_UPDATED, HEAP_XMIN_COMMITTED, HEAP_XMAX_INVALID, HEAP_HASVARWIDTH) 说明这条记录的xmin是有效的, 并已提交.  
2\. 使用strace跟踪fdatasync调用举例  
下面使用的是PostgreSQL 9.3 devel版本进行的测试.  
session 1 :   
```  
digoal=# select pg_backend_pid();  
 pg_backend_pid   
----------------  
           9499  
(1 row)  
digoal=# show synchronous_commit;  
 synchronous_commit   
--------------------  
 on  
(1 row)  
digoal=# show wal_sync_method;  
 wal_sync_method   
-----------------  
 fdatasync  
(1 row)  
```  
session 2 :  
```  
pgdev@db-172-16-3-150-> ps -ewf|grep pgdev  
pgdev     8393     1  0 08:26 pts/5    00:00:00 /home/pgdev/pgsql9.3/bin/postgres  
pgdev     8395  8393  0 08:26 ?        00:00:00 postgres: checkpointer process     
pgdev     8396  8393  0 08:26 ?        00:00:00 postgres: writer process           
pgdev     8397  8393  0 08:26 ?        00:00:00 postgres: wal writer process       
pgdev     8398  8393  0 08:26 ?        00:00:00 postgres: autovacuum launcher process     
pgdev     8399  8393  0 08:26 ?        00:00:00 postgres: stats collector process     
pgdev     9499  8393  0 09:08 ?        00:00:00 postgres: postgres digoal [local] idle  
```  
跟踪wal writer 进程  
```  
strace -p 8397  
```  
整个过程中没有跟踪到wal writer进程有系统调用操作.  
session 3 :   
跟踪backend 进程  
```  
strace -p 9499  
```  
回滚测试 :   
```  
# session 1 (begin;)  
recvfrom(8, "Q\0\0\0\vbegin;\0", 8192, 0, NULL, NULL) = 12  
sendto(8, "C\0\0\0\nBEGIN\0Z\0\0\0\5T", 17, 0, NULL, 0) = 17  
# session 1 (insert into digoal.t (info) values ('test');)  
recvfrom(8, "Q\0\0\0001insert into digoal.t (info)"..., 8192, 0, NULL, NULL) = 50  
sendto(8, "C\0\0\0\17INSERT 0 1\0Z\0\0\0\5T", 22, 0, NULL, 0) = 22  
# session 1 (rollback;)  
recvfrom(8, "Q\0\0\0\16rollback;\0", 8192, 0, NULL, NULL) = 15  
kill(8397, SIGUSR1)                     = 0  
sendto(7, "\2\0\0\0`\1\0\0006@\0\0\3\0\0\0\0\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0"..., 352, 0, NULL, 0) = 352  
sendto(8, "C\0\0\0\rROLLBACK\0Z\0\0\0\5I", 20, 0, NULL, 0) = 20  
```  
注意到, rollback时backend process和wal writer process都没有写xlog文件的操作(write或者fdatasync都没看到). (但是, 并不代表rollback掉的事务就不产生XLOG信息了, 产生xlog信息是在每个SQL执行过程中产生的, commit只是触发了fsync操作. 这些XLOG信息其实已经在wal buffer里面了, 后面会有例子来讲这个.)  
更加详细的调用需要使用gdb来跟踪. strace很多信息都跟踪不到.  
提交测试 :   
```  
# session 1 (begin;)  
recvfrom(8, "Q\0\0\0\vbegin;\0", 8192, 0, NULL, NULL) = 12  
sendto(8, "C\0\0\0\nBEGIN\0Z\0\0\0\5T", 17, 0, NULL, 0) = 17  
# session 1 (insert into digoal.t (info) values ('test');)  
recvfrom(8, "Q\0\0\0001insert into digoal.t (info)"..., 8192, 0, NULL, NULL) = 50  
sendto(8, "C\0\0\0\17INSERT 0 1\0Z\0\0\0\5T", 22, 0, NULL, 0) = 22  
# session 1 (commit;)  
recvfrom(8, "Q\0\0\0\fcommit;\0", 8192, 0, NULL, NULL) = 13  
lseek(16, 327680, SEEK_SET)             = 327680  
write(16, "u\320\5\0\1\0\0\0\0\0\5\2\0\0\0\0O\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"..., 16384) = 16384  
fdatasync(16)                           = 0  
sendto(7, "\2\0\0\0`\1\0\0006@\0\0\3\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"..., 352, 0, NULL, 0) = 352  
sendto(8, "C\0\0\0\vCOMMIT\0Z\0\0\0\5I", 18, 0, NULL, 0) = 18  
```  
注意到, commit时, backend process写xlog文件(查看该进程的fd)并调用fdatasync写入磁盘.  
查看fd=16打开的是什么文件?  
```  
cd /proc/9499/fd  
ll  
lrwx------ 1 pgdev pgdev 64 Oct 16 09:21 16 -> /data04/pgdev/pg_root/pg_xlog/000000010000000000000002  
```  
3\. 使用strace跟踪fdatasync调用举例  
以下使用的是PostgreSQL 9.1.3的版本进行的测试 :   
session 1 :   
```  
postgres@db-172-16-3-40-> psql -h 127.0.0.1  
psql (9.1.3)  
Type "help" for help.  
postgres=# show synchronous_commit;  
 synchronous_commit   
--------------------  
 on  
(1 row)  
postgres=# show wal_sync_method;  
 wal_sync_method   
-----------------  
 fdatasync  
(1 row)  
postgres=# select pg_backend_pid();  
 pg_backend_pid   
----------------  
          26479  
(1 row)  
```  
session 2 :  
```  
postgres@db-172-16-3-40-> ps -ewf|grep postgres  
postgres 21941     1  0 Oct15 pts/5    00:00:29 /opt/pgsql/bin/postgres  
postgres 21948 21941  0 Oct15 ?        00:00:11 postgres: logger process     
postgres 21950 21941  0 Oct15 ?        00:00:00 postgres: writer process     
postgres 21951 21941  0 Oct15 ?        00:00:00 postgres: wal writer process     
postgres 21952 21941  0 Oct15 ?        00:00:00 postgres: autovacuum launcher process     
postgres 21953 21941  0 Oct15 ?        00:00:00 postgres: stats collector process     
postgres 26479 21941  0 09:02 ?        00:00:00 postgres: postgres postgres 127.0.0.1(17658) idle  
```  
跟踪wal writer 进程  
```  
strace -p 21951  
```  
回滚测试 :   
```  
# session 1 (insert into digoal.t (info) values ('test');)  
lseek(5, 7520256, SEEK_SET)             = 7520256  
write(5, "f\320\1\0\1\0\0\0\0\0\0\0\0\300rH\22\0\0\0pi\1\0\0\0\0\0\0\0\0\0"..., 8192) = 8192  
fdatasync(5)                            = 0  
# session 1 (rollback;)  
write(5, "f\320\1\0\1\0\0\0\0\0\0\0\0\340rH\210\1\0\0\377\377\1\0\345/\0\0enab"..., 8192) = 8192  
fdatasync(5)                            = 0  
```  
fd信息如下 :   