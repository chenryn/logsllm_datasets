provers P∗, then (cid:6)P, V(cid:7) is called an interactive proof (IP).
Deﬁnition 2 (Zero-knowledge (ZK)). Let L ⊂ {0, 1}∗ be a
language and for each x ∈ L, let Rx ⊂ {0, 1}∗ denote a cor-
responding set of witnesses for the fact that x ∈ L. Let RL
denote the corresponding language of valid (input, witness) pairs,
i.e., RL = {(x, w): x ∈ L and w ∈ Rx}. An interactive proof or
argument system (cid:6)P, V(cid:7) for L is computational zero-knowledge
(CZK) with respect to an auxiliary input if for every PPT inter-
active machine V∗, there exists a PPT algorithm S, called the
simulator, running in time polynomial in the length of its ﬁrst
input, such that for every x ∈ L, w ∈ Rx, and z ∈ {0, 1}∗,
(1)
when the distinguishing gap is considered as a function of |x|. If
the statistical distance between the two distributions is negligible,
then the interactive proof or argument system is said to be
statistical zero-knowledge (SZK). If the simulator is allowed to
abort with probability at most 1/2, but the distribution of its
output conditioned on not aborting is identically distributed to
View ((cid:6)P(w), V∗(z)(cid:7)(x)), then the interactive proof or argument
system is called perfect zero-knowledge (PZK).
The left term in Equation (1) denotes the distribution of
transcripts after V∗ interacts with P on common input x; the right
term denotes the distribution of simulator S’s output on x. For
any CZK (resp., SZK or PZK) protocol, Deﬁnition 2 requires the
simulator to produce a distribution that is computationally (resp.,
statistically or perfectly) indistinguishable from the distribution
of transcripts of the ZK proof or argument system.
View ((cid:6)P(w), V∗(z)(cid:7)(x)) ≈c S(x, z)
Our zero-knowledge arguments also satisfy a proof of knowl-
edge property. Intuitively, this means that in order to produce a
convincing proof of a statement, the prover must know a witness
to the validity of the statement. To deﬁne this notion formally, we
follow Groth and Ishai [54] who borrow the notion of statistical
witness-extended emulation from Lindell [68]:
Deﬁnition 3 (Witness-extended emulation [54]). Let L be a lan-
guage and RL corresponding language of valid (input, witness)
pairs as in Deﬁnition 2. An interactive argument system (cid:6)P, V(cid:7)
for L has witness-extended emulation if for all deterministic
polynomial time P∗ there exists an expected polynomial time
emulator E such that for all non-uniform polynomial time adver-
saries A and all zV ∈ {0, 1}∗, the following probabilities diﬀer
928
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:14 UTC from IEEE Xplore.  Restrictions apply. 
(cid:6)
by at most a negligible function in the security parameter λ:
Pr
(cid:3)(x, zP) ← A(1λ); t ← tr(cid:6)P∗(zP), V(zV)(cid:7)(x) : A(t) = 1
(cid:4)
(cid:5) (x, zP) ← A(1λ);(t, w) ← E P∗(zP)(x) : A(t) = 1 ∧
if t is an accepting transcript, then (x, w) ∈ RL .
and Pr
Here, the oracle called by E permits rewinding the prover to a
speciﬁc point and resuming with fresh randomness for the veriﬁer
from this point onwards.
Commitment schemes
Informally, a commitment scheme allows a sender to produce
a message C = Com(m) that hides m from a receiver but binds
the sender to the value m. In particular, when the sender opens C
and reveals m, the receiver is convinced that this was indeed the
sender’s original value. We say that Compp(m; r) is a commitment
to m with opening r with respect to public parameters pp. The
sender chooses r at random; to open the commitment, the sender
reveals (m, r). We frequently leave the public parameters implicit,
and sometimes do the same for the opening, e.g., Com(m).
Deﬁnition 4 (Collection of non-interactive commitments [57]).
We say that a tuple of PPT algorithms (Gen, Com) is a collection
of non-interactive commitments if the following conditions hold:
• Computational binding: For every (non-uniform) PPT A,
there is a negligible function η such that for every n ∈ N,
⎡⎢⎢⎢⎢⎢⎢⎣
Pr
pp ← Gen(1n) ;
(m0, r0), (m1, r1) ← A(1n, pp) :
m0 (cid:3) m1, |m0| = |m1| = n,
Compp(m0; r0) = Compp(m1; r1)
⎤⎥⎥⎥⎥⎥⎥⎦ ≤ η(n)
• Perfect hiding: For any pp ∈ {0, 1}∗ and m0, m1 ∈ {0, 1}∗
where |m0| = |m1|, the ensembles {Compp(m0)}n∈N and
{Compp(m1)}n∈N are identically distributed.
Collections of non-interactive commitments can be constructed
based on any one-way function [56, 75], but we require a ho-
momorphism property (deﬁned below) that these commitments
do not provide. (The Pedersen commitment [80], described in
Appx. A, provides this property.)
Deﬁnition 5 (Additive homomorphism). Given Com(x; sx) and
Com(y; sy), there is an operator (cid:14) such that
Com(x; sx) (cid:14) Com(y; sy) = Com(x + y; sx + sy)
and
Com(x; sx)k (cid:2) Com(x; sx) (cid:14) · · · (cid:14) Com(x; sx)
(k times)
In a multi-commitment scheme, x and y are vectors, and this
additive homomorphism is vector-wise.
3.2 Our starting point: Gir++ (Giraﬀe, with a tweak)
The most eﬃcient known IPs for the AC evaluation problem (§3.1)
follow a line of work starting with the breakthrough result of
Goldwasser, Kalai, and Rothblum (GKR) [49]. Cormode, Mitzen-
macher, and Thaler (CMT) [35] and Vu et al. [102] reﬁne this
result, giving O(|C| log |C|) prover and O(|x| + |y| + d log |C|)
veriﬁer runtimes, for AC C with depth d, input x, and output y.
Further reﬁnements are possible in the case where C is data
parallel, meaning it consists of N identical sub-computations
run on diﬀerent inputs. (We refer to each sub-computation as a
929
sub-AC of C, and we assume for simplicity that all layers of the
sub-AC have width G, so |C| = d · N ·G.) Thaler [97] reduced the
prover’s runtime in the data-parallel case from O(|C| log |C|) to
O(|C| log G). Very recently, Wahby et al. introduced Giraﬀe [104],
which reduces the prover’s runtime to O(|C| + d · G · log G).
Since |C| = d · N · G, observe that when N ≥ log G, the time
reduces to O(|C||), which is asymptotically optimal. That is, for
suﬃcient data parallelism, the prover’s runtime is just a constant
factor slower than evaluating the circuit gate-by-gate without
providing any proof of correctness.
Our work builds on Gir++, which reduces Giraﬀe’s communica-
tion via an optimization due to Chiesa et al. [33]; our description
of Gir++ borrows notation from Wahby et al. [104]. Assume for
simplicity that N and G are powers of 2, and let bN = log2 N
and bG = log2 G. Within a layer of C, each gate is labeled with a
pair (i, j) ∈ {0, 1}b N × {0, 1}bG . Number the layers of C from 0
to d in reverse execution order, so that 0 refers to the output layer,
and d refers to the input layer. Each layer i is associated with
an evaluator function Vi : {0, 1}b N × {0, 1}bG → F that maps a
gate’s label to the output of that gate when C is evaluated on
input x. For example, V0(i, j) is the j’th output of the i’th sub-AC,
and Vd(i, j) is the jth input to the ith sub-AC.
At a high level, the protocol proceeds in iterations, one for
each layer of the circuit. At the start of the protocol, the prover P
sends the claimed outputs y of C (i.e., all the claimed evaluations
of V0). The ﬁrst iteration of the protocol reduces the claim about
V0 to a claim about V1, in the sense that it is safe for the veriﬁer
V to believe the former claim as long as V is convinced of the
latter. But V cannot directly check the claim about V1, because
doing so would require evaluating all of the gates in C other than
the outputs themselves. Instead, the second iteration reduces the
claim about V1 to a claim about V2, and so on, until P makes a
claim about Vd (i.e., the inputs to C), which V checks itself.
To describe how the reduction from a claim about Vi to a claim
about Vi+1 is performed, we ﬁrst introduce multilinear extensions,
the sum-check protocol, and wiring predicates.
Multilinear
of
function
f : {0, 1}(cid:4) → F is a (cid:5)-variate polynomial g over F such that
g(x) = f (x) for all x ∈ {0, 1}(cid:4). Any such function f has a
unique multilinear extension (MLE)—a multilinear polynomial—
denoted ˜f . Given a vector z ∈ Fm with m = 2(cid:4), we will often
view z as a function z : {0, 1}(cid:4) → F mapping indices to vector
entries, and use ˜z to denote the MLE of z.
The sum-check protocol. Fix an (cid:5)-variate polynomial g over
(g) denote the degree of g in variable i. The
F, and let degi
sum-check protocol [70] is an interactive proof that allows P
to convince V of a claim about the value of
x∈{0,1}(cid:3) g(x) by
reducing it to a claim about the value of g(r), where r ∈ F
(cid:4) is
a point randomly chosen by V. There are (cid:5) rounds, and V’s
(g)) plus the cost of evaluating g(r). The
runtime is O((cid:4)
extensions. An
extension

mechanics are detailed in Section 4.
Wiring predicates capture the wiring information of the sub-
ACs. Deﬁne the wiring predicate addi : {0, 1}3bG → {0, 1},
where addi(g, h0, h1) returns 1 if (a) within each sub-AC, gate g
at layer i − 1 is an add gate and (b) the left and right inputs of g
are, respectively, h0 and h1 at layer i (and 0 otherwise). multi is
a
i=1 degi
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:14 UTC from IEEE Xplore.  Restrictions apply. 
deﬁned analogously for multiplication gates. Deﬁne the equality
predicate eq : {0, 1}2b N → {0, 1} as eq(a, b) = 1 iﬀ a = b.
˜Vi: for (q(cid:16), q) ∈ Fb N × FbG ,
Thaler [97, 98] and Wahby et al. [104] show how to
let
express
(cid:16),q,i : Fb N × FbG × FbG → F denote the polynomial
Pq
(cid:16),q,i(h(cid:16), hL, hR) =
Pq
˜Vi−1 in terms of
˜eq(q(cid:16), h(cid:16)) ·(cid:3)
˜addi(q, hL, hR)(cid:14)
˜multi(q, hL, hR)(cid:14)


˜Vi(h(cid:16), hL) + ˜Vi(h(cid:16), hR)(cid:15)
˜Vi(h(cid:16), hL) · ˜Vi(h(cid:16), hR)(cid:15)(cid:4)
+
Then we have
˜Vi−1(q(cid:16), q) =
(cid:16),q,i(h(cid:16), hL, hR).
Pq
(2)
(cid:16)∈{0,1}b N
hL,hR ∈{0,1}bG
h
Protocol overview
Step 1. At the start of the protocol, P sends the claimed output
y, thereby specifying a function Vy : {0, 1}bG +b N → F mapping
the label of each output gate to the corresponding entry of y. The
veriﬁer wishes to check that Vy = V0 (i.e., that the claimed outputs
equal the correct outputs of C on input x); to accomplish this, it
would be enough to check that ˜Vy = ˜V0. In principle, V could do
that by choosing a random pair (q(cid:16), q) ∈ Fb N × FbG and checking
that ˜Vy(q(cid:16), q) = ˜V0(q(cid:16), q); if that check passes, then ˜Vy = ˜V0
with high probability, by the Schwartz-Zippel lemma. On the
one hand, V can and does compute ˜Vy(q(cid:16), q); this takes O(NG)
time [104, §3.3]. But on the other hand, V cannot compute
˜V0(q(cid:16), q) directly—this would require V to evaluate C.
Step 2 (iterated). Instead, V outsources evaluation of ˜V0(q(cid:16), q)
to P, via the sum-check protocol; this is motivated by Equation (2).
At the end of the sum-check protocol, V must evaluate Pq
(cid:16),q,1 at a
random input (r(cid:16), rL, rR), which requires the values ˜V1(r(cid:16), rL) and
˜V1(r(cid:16), rR). V does not evaluate these points directly; that would
be too costly. Instead, P sends v0 and v1, which it claims are the
required values. V uses these to evaluate Pq
(cid:16),q,1, then checks v0
and v1 using a mini-protocol, which we describe shortly. At a
high level, the mini-protocol transforms P’s claims about v0, v1
into a claim about ˜V2. V checks this claim with a sum-check and
mini-protocol invocation, yielding a claim about ˜V3. P and V
iterate, layer by layer, until V has a claim about ˜Vd.
Final step. V checks P’s ﬁnal claim about ˜Vd by evaluating ˜Vx
(since ˜Vd = ˜Vx); it can do this in O(NG) time [104, §3.3].
Mini-protocols: reducing from ˜Vi to ˜Vi+1
Gir++ diﬀers from Giraﬀe only in that they use diﬀerent mini-
protocols to reduce P’s claims at the end of one sum-check
invocation (i.e., v0 = ˜Vi(r(cid:16), rL) and v1 = ˜Vi(r(cid:16), rR)) into the
expression that V and P use for the next sum-check invocation.
Reducing from two points to one point. This approach is
used in Giraﬀe and prior work [35, 49, 97, 102–104]. P sends
V the restriction of ˜Vi to the unique line H in Fb N +bG passing
through the points (r(cid:16), rL) and (r(cid:16), rR) by specifying the univariate
polynomial fH(t) = ˜Vi(r(cid:16), (1−t)·rL +t·rR), which has degree bG.
V should believe this claim as long as fH(0) = v0, fH(1) = v1,
and fH(υ) = ˜Vi(r(cid:16), rυ), where rυ = (1 − υ) · rL + υ · rR and υ is
chosen by V. By Equation (2), V can check this latter equality
by engaging P in a sum-check protocol over Pr
(cid:16),rυ,i+1.


=
=


(cid:16),qL,i+1(h(cid:16), hL, hR) +
(cid:16),qR,i+1(h(cid:16), hL, hR)(cid:4)
μ0 · Pq
μ1 · Pq
(cid:16),qL,qR,μ0,μ1,i+1(h(cid:16), hL, hR)
Qq
Alternative: Random linear combination. Each invocation
of the prior mini-protocol requires P to send bG + 1 ﬁeld
elements specifying fH. The following technique, due to Chiesa
et al. [33], eliminates this requirement. Instead, V checks v0 and
v1 by checking a random linear combination, via a sum-check
invocation over a polynomial we deﬁne below.
In more detail, V samples two ﬁeld elements μ0 and μ1, and
sends them to P. Mechanically, V next checks that
μ0 · ˜Vi(r(cid:16), rL) + μ1 · ˜Vi(r(cid:16), rR) = μ0 · v0 + μ1 · v1
(3)
since, by the Schwartz-Zippel
this implies that
v0 = ˜Vi(r(cid:16), rL) and v1 = ˜Vi(r(cid:16), rR) with high probability (formal-
ized in Thm. 1, below). V checks Equation (3) by exploiting the
fact that its LHS can be written as
(cid:3)
μ0 · ˜Vi(q(cid:16), qL) + μ1 · ˜Vi(q(cid:16), qR)
lemma,
hL,hR ∈{0,1}bG
(cid:16)∈{0,1}b N
h
where Qq
Qq
h
(cid:16)∈{0,1}b N
hL,hR ∈{0,1}bG
(cid:16),qL,qR,μ0,μ1,i : Fb N × FbG × FbG → F is given by:
(cid:3) (cid:14)
˜addi(qR, hL, hR)(cid:15)·
˜multi(qR, hL, hR)(cid:15)·
(cid:14)
(cid:16),qL,qR,μ0,μ1,i(h(cid:16), hL, hR) (cid:2) (cid:17)eq(q(cid:16), h(cid:16)) ·
(cid:14)
˜Vi(h(cid:16), hL) + ˜Vi(h(cid:16), hR)(cid:15)
˜addi(qL, hL, hR) + μ1 ·
˜Vi(h(cid:16), hL) · ˜Vi(h(cid:16), hR)(cid:15) (cid:4)
(cid:14)
˜multi(qL, hL, hR) + μ1 ·
μ0 ·
μ0 ·
+
(cid:16),rL,rR,μ0,μ1,i+1.
This means that V can check that Equation (3) holds by engaging
P in a sum-check protocol over Qr
Giraﬀe vs. Gir++ Gir++ uses the Alternative above. This re-
duces communication cost in Gir++ compared to Giraﬀe by a
small factor that depends on the amount of data parallelism. We
are motivated to reduce communication because communication
will translate into proof size and more cryptographic cost (§4).
As an exception, Gir++ uses the “reducing from two points
to one point” technique after the ﬁnal sum-check (i.e., the one
over Q...,d−1); this is to avoid increasing V’s computational costs
compared to Giraﬀe. Recall that in the ﬁnal step of Gir++, V
checks P’s claim about ˜Vd by evaluating ˜Vx (which is equal to
˜Vd). Thus, to check the LHS of Equation (3), V would require