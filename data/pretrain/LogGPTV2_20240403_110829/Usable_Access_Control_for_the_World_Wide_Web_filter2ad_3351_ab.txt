### Simplifying Access Control and Authentication

Access control in Windows can be as simple as right-clicking on a folder, selecting the "Security" tab, and adding users to the access control list. However, this system has limitations: it only works within a Windows Domain, and it relies on passwords, which can be notoriously weak. For IIS site administrators who wish to switch to certificate-based authentication, the process is more complex. They must first map certificates to known system users and then specify which users can access which resources. This still doesn't address the challenge of generating and distributing certificates to users.

### FrontPage Tools

Tools like FrontPage simplify the creation and export of web-servable content. They provide easy-to-use shortcuts for creating site directories and changing page layouts. In terms of security, FrontPage uses password-based authentication and an access control list that the content provider must assemble. The advantage is that the content provider doesn't need to set user passwords; the server uses their Windows login credentials. The downside is that only users known to the local Windows Domain can be added to the access control list.

### Challenges with Current Systems

Not all systems compared here aim to be user-friendly for non-expert content providers, but those that do (like .MAC and FrontPage) share a common issue: content providers must think about both authentication and authorization. Ideally, a content provider would only specify authorization information, and the system would handle authentication. While Windows-based systems allow this, they restrict access to existing users of a Windows Domain and rely solely on password-based authentication.

### ESCAPE: Usable Security for Small Content Providers

In this section, we introduce ESCAPE, an (e)asy and (s)ecure (c)ontent (a)uthorization and (p)ublishing (e)ngine. ESCAPE is designed for non-expert users to quickly share content through a web server and specify access control for that content.

#### 4.1. Goals of Usability and Security

Content providers typically follow a create-publish-announce cycle: they create content, publish it, and then announce its availability. We assume that the announcement step adequately describes the content provider's intentions for access control. For example, if Alice sends an email with the URL to Bob, we assume only Bob should have access.

**Usability Goal:** The create-publish-announce cycle for protected content should be identical to that for unprotected content. Content providers should not be concerned with authentication mechanisms. Authorization information can be inferred from the content provider's actions, such as who receives the announcement.

**Client-Side Usability:** Consuming protected content should also be seamless. There should be no need to remember or type passwords or manage certificates. While we can achieve our usability goal for content providers, we may fall short for content consumers, partly as a trade-off for better security.

**Security Considerations:** Secure communication requires some a-priori shared trust information. Our usability goals prohibit an unconditionally secure solution. Instead, we aim for a level of security similar to SSH, where the first connection could potentially be hijacked, but the risk is low and the usability benefits outweigh the security loss.

#### 4.2. System Design Overview

The core of ESCAPE is the ESCAPE server, a web server that serves content over HTTPS. In our prototype, the server serves locally available, pre-formatted HTML content, but it could be extended to accept uploads and auto-format content.

**ESCAPE Server:**
- **Key Pair:** The server uses a key pair for client authentication and issuing certificates. The public key can be self-certified or certified by a well-known authority.
- **Access Control List (ACL):** Each directory served by the server has an ACL containing the public keys of allowed clients.

**Publishing Content:**
- Content providers place content on their computer or upload it to the ESCAPE server.
- Using the ESCAPE GUI, they navigate to the content directory, select recipients from their address book, and send announcements.
- The server adds pointers to the selected recipients' address book entries in the ACL and sends an email with a URL to access the content.

**Receiving Content:**
- Recipients click the URL in the email and are directed to the ESCAPE server.
- If the recipient has an ESCAPE certificate, it is used for authentication. The public key is checked against the ACL.
- If the recipient does not have a certificate, they go through a one-time setup to install an ESCAPE certificate in their browser. This certificate contains only the signed public key, and the association with the client identity is managed in the server's address book.

#### 4.3. Implementation

Implementing ESCAPE with existing client software is challenging but feasible. Our prototype uses the Outlook address book on the server side and Internet Explorer on the client side. The choice of these tools was driven by their wide availability and user-friendliness.

**Prototype Implementation:**
- **Server-Side:** Implemented in Java, using the Outlook address book for managing contacts.
- **Client-Side:** Uses Internet Explorer for seamless integration with the ESCAPE server.

By leveraging existing tools and focusing on usability, ESCAPE aims to provide a secure and user-friendly solution for small content providers.