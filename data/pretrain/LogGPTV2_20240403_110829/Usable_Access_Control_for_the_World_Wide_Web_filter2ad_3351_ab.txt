easy as right-clicking on a folder, selecting the “security”
tab, and adding users to the access control list. The disad-
vantage of this system is that it only works within a Win-
dows Domain (because the users in ﬁle access control lists
have to be known to the system). Furthermore, it relies on
passwords, which can be notoriously weak. If an IIS site ad-
ministrator wants to switch to certiﬁcate-based authentica-
tion, she is back in the same boat as the Apache adminis-
trators – ﬁrst, she needs to map certiﬁcates to known sys-
tem users. Then, she needs to specify which users can ac-
cess which resources. Again, this doesn’t even address the
problem of generating and distributing certiﬁcates to users.
FrontPage Tools such as FrontPage make it easy to cre-
ate Web-servable content, and to export that content to Web
servers. They provide easy-to-use shortcuts to create site di-
rectories, change the layout of all pages on a site, and more.
As far as FrontPage is concerned, there is only one way
to secure access to published content. The authentication
method are passwords, and the authorization is provided by
an access control list the content provider has to assemble.
The good news here is that the content provider doesn’t have
to specify the passwords of the users – the server will use
their Windows login passwords. The bad news is that only
users already known to the local Windows Domain can be
speciﬁed in the access control list.
2
This has the drawback that the content provider can no longer decide
whether or not to grant access. Clients have to provide proofs, which
the server then checks.
3
The target audience for iPhoto are hobby photographers, not IT pro-
fessionals with security training.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:38:51 UTC from IEEE Xplore.  Restrictions apply. 
To be fair, not all the systems compared in this section
strive to be “user-friendly” content publishers for the small-
time non-expert content provider. But those that do (.MAC
and FrontPage) share with those that don’t the property that
content providers need to think about both authentication
and authorization. Ideally, a content provider would only
specify authorization information, and the system would
take care of the authentication itself. The Windows-based
systems allow this, but at the cost of restricting access to
existing users of a Windows Domain, and also only for
password-based authentication.
4. ESCAPE – Usable Security for Small Con-
tent Providers
In this section, we describe ESCAPE, an (e)asy and
(s)ecure (c)ontent (a)uthorization and (p)ublishing (e)ngine.
ESCAPE can be used by non-expert users to quickly share
content through a Web server, and to specify access con-
trol for that content.
4.1. Goals of Usability and Security
Content providers usually go through a create-publish-
announce cycle with their content: First, the content gets
created (e.g., a hobby photographer takes pictures). Then,
the content is published somewhere (e.g., the photographs
are copied to a Web hosting service). Finally, the content
provider will announce that her content is online (e.g., send
an email with the URL to friends and family). We can as-
sume that the last step also adequately describes the con-
tent provider’s intention in terms of access control for pro-
tected content. For example, if Alice publishes some con-
tent and then sends Bob, and only Bob, an email about this
content, we will assume that no other than Bob is supposed
to have access to that content.4
The goal, in terms of usability, is that for the content
provider the create-publish-announce cycle for publishing
protected content in a secure system should be identical
to publishing unprotected content in an insecure system.
In particular, the content provider should not be concerned
with authentication mechanisms. Moreover, we believe that
authorization information can be deduced from the content
provider’s actions, for example who gets the announcement
and who doesn’t. This follows the principle of implicit se-
curity outlined in Section 2.1.
On the clients’ side, consuming protected content should
also be identical to consuming unprotected content. There
should be no remembering or typing of passwords, or com-
plex management of certiﬁcates. While we can reach our
usability goal for content providers, we will see that we are
somewhat short of reaching this goal for content consumers
– in part as a trade-off for better security. See Sections 4.2
and 4.3 for more details.
We know that a secure communication between con-
tent provider and content consumer is not possible without
some a-priori shared trust information (e.g., a shared secret
or password, or public key). Therefore, our usability goals
necessarily prohibit an unconditionally secure solution. In-
stead, we strive for a level of security similar to that pro-
vided by SSH. With SSH, the ﬁrst time a client connects
to a server, a man in the middle could hijack the connec-
tion and intercept all trafﬁc from then on5. But given that
the presence of a malicious man-in-the-middle during the
ﬁrst handshake is unlikely, the usability gained outweighs
the security lost. In ESCAPE, we strive for a similar level
of security – we accept a one-time setup that could poten-
tially be subverted in exchange for a little sacriﬁce in secu-
rity.
One way to set up such a system would be to use capabil-
ities. For example, the URLs sent out to content consumers
could include some hard-to-guess string, which would have
to be presented as part of any request to access the con-
tent. This system could be made indistinguishable from one
for unprotected content, but it has serious security issues:
The capabilities can be intercepted as they are sent to the
content consumers, and they can be trivially shared with
other, unauthorized, individuals (e.g., simply by forward-
ing the email announcement). We will present a system in
which users use a private key to authenticate themselves
to the content publishing server. This is a key they are un-
likely to share with others, since it allows complete imper-
sonation, not just access to certain content. Furthermore, in
our system, no sensitive information is ever exchanged in
the clear. We achieve this with off-the-shelf client software
such as email readers and Internet browsers.
4.2. System Design Overview
The core of our system is the ESCAPE server. The ES-
CAPE server is a Web server that serves out content trough
HTTPS. In our preliminary prototype implementation (see
Section 4.3), the ESCAPE server only serves content that
is available locally, and pre-formatted in HTML, but one
could easily imagine a version of the server that accepts
content upload, and auto-formats content that is not already
pre-formatted (much like the .MAC content publishing ser-
vice accepts a list of photos, and presents them through a
polished Web site).
4
In contrast to this protected content, there is also unprotected content
that is accessible by anyone regardless of who got the announcement.
5
That is, unless users actually compare hashes displayed by SSH over
a secondary, secure channel.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:38:51 UTC from IEEE Xplore.  Restrictions apply. 
The ESCAPE server has a key pair it uses to authenti-
cate itself to clients, and to issue certiﬁcates for clients. Its
public key can either be self-certiﬁed, or (at great expense)
can be certiﬁed by a well-known certiﬁcation authority. The
ESCAPE server keeps an access control list for each direc-
tory that it serves out. Each access control list comprises
the public keys of those clients allowed to access the direc-
tory in question.
To publish content, all the content provider has to do is
put it on her computer (or, in the case where the ESCAPE
server is running remotely, upload it to the ESCAPE server).
She then uses the ESCAPE server to send out an email an-
nouncement about the newly published content: Using the
GUI provided by ESCAPE, she navigates to the newly cre-
ated content directory, picks a list of names from her ad-
dress book, and presses a “Send Announcements” button.
The ESCAPE server now does two things:
1. It adds pointers to every selected email recipient’s ad-
dress book entry to the access control list for the newly
created content. The address book entry for an email
recipient may or may not already contain his or her
ESCAPE public key.
2. It sends out an email message to every selected email
recipient, informing them about the availability of the
newly created content. The email message will con-
tain a URL that recipients can click on to access the
content. The URL for a recipient whose email ad-
dress is PI:EMAIL may look something like this:
https://alicescomputer.pacbell.com/
holidayphotos?email=bob%40ibm.com.
It
might be accompanied by a message inviting Bob to
access Alice’s newly published content.
Upon receipt of such an email, the recipient can click on
the link in the message, and will be taken to the ESCAPE
server of the content provider. If the recipient already has
an ESCAPE certiﬁcate, it will be used to authenticate the
client. The public key in the certiﬁcate will be used to ver-
ify authorization (by a simple lookup in the access control
list for the URL in question). If the recipient does not have
an ESCAPE certiﬁcate, upon visiting the content provider’s
ESCAPE server, he will be taken through a one-time setup
procedure that will install an ESCAPE certiﬁcate with the
recipient’s Web browser. This certiﬁcate is issued by the
ESCAPE server.6 Note that this certiﬁcate doesn’t actually
certify any attributes of the client (such as name or email
address). It is an “empty” certiﬁcate, containing only the
signed public key of the client. The association between the
6
The sole purpose of appending the identity of the recipient to the URL
sent to him is to be able to store the recipient’s public key with the cor-
rect address book entry in the content provider’s address book. Instead
of an email address, any other unambiguous moniker for address book
entries can be used.
public key and client identity is not made in the certiﬁcate,
but rather inside the address book on the server. (This is be-
cause, as we will see later, any client can ask to get a cer-
tiﬁcate for any identity it wishes to assume, and we need to
have a mechanism to quickly revoke wrongly issued certiﬁ-
cates. As we will also see later, the decision to let clients ac-
quire arbitrary certiﬁcates was in turn dictated by usability
considerations.) The setup step is not necessary upon sub-
sequent visits to the URL received in the email announce-
ment, or any other URL on the provider’s ESCAPE server.
The client is directly served the requested content (if it’s
listed in the corresponding access control list).
Let us summarize the steps necessary for content
providers and consumers to protect, and to access pro-
tected, content. The content provider needs to pick a list
of users from her address book, which will receive a mes-
sage about newly published content. In all
likelihood,
she would have done the same step in an insecure sys-
tem as well. On the consumer’s end, recipients of an
email message can simply click on a single URL pro-
vided, and will have access to the content. If this is the
ﬁrst time they visit a URL on that particular provider’s ES-
CAPE server, they will be taken through a quick online
setup process, which is similar to what happens when peo-
ple use SSH to log onto a server for the ﬁrst time. Note that
since we are using client certiﬁcates, some Web browsers
may ask users to provide a password to unlock their pri-
vate key whenever they visit an ESCAPE server. This is an
unfortunate situation, which we will discuss in more de-
tail in Section 5.
4.3. Implementation
It is not very hard to implement the system outlined in
the previous section if one were to provide new email and
Web clients, perhaps clients that could parse specially for-
matted email messages and automatically install certiﬁcates
embedded in such messages. The trick is to implement it
with existing client software, and in such a way that requires
the least amount of user intervention, dialogs that need at-
tention, etc. We will now present an implementation that
works with the Outlook address book on the server side,
and with Internet Explorer on Microsoft Windows on the
content consumer side. The content consumer can use any
email client she wishes.
The choice for Outlook on the server side was driven by
its wide availability and easy-to-use scripting facilities. It’s
actually not the best choice in terms of usability for the con-
tent provider (see Section 5 for more details). The choice
for IE on Windows was made because this appears to be the
most user-friendly option for the client side (again, see Sec-
tion 5 for more details, and a discussion of alternatives).
We implemented a prototype ESCAPE server in Java.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:38:51 UTC from IEEE Xplore.  Restrictions apply. 
acces
acces
control list
control list
selected
selected
resource
resource
all contacts in
all contacts in
Microsoft
Microsoft
Outlook
Outlook
Figure 1. User interface of our prototype ES-