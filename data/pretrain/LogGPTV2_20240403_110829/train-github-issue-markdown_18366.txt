### Optimized Text

**Electron Version:** 0.30+  
**Operating System:** Windows, Mac, and Linux

Numerous desktop applications, both small and large, are built using Electron. While the core application logic may be only a few megabytes in size, the installer (which includes its own bundled Electron) adds over 60 MB to the overall package. This means that if multiple Electron-based applications are installed, each one will have its own dedicated Electron binary.

I understand that different applications may require specific versions of Electron, leveraging particular features or bug fixes. However, this approach results in significant redundancy. The goal should be to ensure that the runtime is shared across the platform, with each application carrying only its own dependencies (NPM modules unrelated to Electron). This would significantly reduce the size of the installers. For example, technologies like the Java Virtual Machine (JVM) or Adobe AIR follow this model, where the runtime is shared and only the application-specific code is distributed.

There are, of course, special cases where an application might need a customized version of Electron. For instance, the Brave browser has process sandboxing enabled, a feature not natively supported by Electron. In such cases, the installer can include the modified runtime. However, for most trivial applications, this is unnecessary.

A good example is Abricotine, a simple Markdown editor. The source code is only 2 MB, yet the 64-bit Windows installer is 75 MB. This discrepancy highlights the issue of redundant installations.

As the adoption of technologies like Electron and NW.js continues to grow for creating desktop applications, the problem of bloat from redundant installations will only become more pronounced. Simplifying the process of getting applications running without resorting to native development is a significant advantage, but it should not come at the cost of excessive disk space usage.

Thank you.