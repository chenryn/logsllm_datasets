通过定义这个INITIALIZE-INSTANcE方法，你使:opening-bonus-percentage在创建
(defun balance (account)
1050
CL-USER> (slot-value *acct* 'balance)
*ACCT*
系统，其更清楚地说明了某些槽不用于直接访问，方法就是不导出这些槽的名字。
数而你忽略了它们仍然使用SLOT-VALUB，那么你最好知道你在做什么。你也可以使用我将在第21章里讨论的包
CommonLisp并没有提供C+和Java这些语言里所提供的严格对象封装。不过，如果一个类的设计者提供了访问函
(slot-value account 'balance))
L
访问函数
第17章
(((((oot abequaoiad-snuoq-butuado /) (aoueteq. qunosoe antea-nois) *)
重新审视面向对象：
www.TopSage.com
'bank-account
((s abequasxad-snuoq-butuado:
:customer-name "Sally Sue"
类
---
## Page 200
DEFCLASS提供了三个槽选项，从而允许你为一个特定的槽自动创建读取和写入函数。
my-account的值作为第二个参数。
的表达式将被编绎成一个对你刚刚定义SETF函数的调用，其中"SallySue"作为第一个参数而
个参数总是赋值到位置上的值。?例如，你可以定义sETF函数像下面这样设置bank-account中
个用来访问该SETF函数将要设置的位置的函数名。SETF函数可以接受任何数量的参数，但第一
函数的名字是一个两元素列表，其第一个元素是符号setf而第二个元素是一个符号，通常是一
方法来扩展其定义。因此你可能写出下面的定义：
SETF函数是一种扩展SETF的方式，其定义了一种新的位置类型使其知道如何设置它。SETF
①定义一个sETF函数，比如说（setffoo），其带来的一种后果是，如果你还定义了对应的访问函数，在这种情
编写这些访问函数没有什么困难的，但是完全手工编写它们就跟Lisp风格不太吻合了。因此，
当然，和读取函数一样，你希望你的SETF函数是广义的，因此你将实际像下面这样定义它：
正如我已讨论过的，你不希望调用者直接设置余额。但对于其他槽，诸如customer-name，
这允许你写出下面的表达式：
并且你当然也想为customer-name定义一个读取函数。
在求值该定义之后，一个类似
(defun (setf customer-name)
(defgeneric customer-name (account))
(defmethod (setf customer-name)(value (account bank-account))
(defgeneric(setf customer-name)(valueaccount))
(defmethod balance((account bank-account))
(defgenericbalance（account))
和POP。
况下是fOO，那么你将可以在这个新的位置类型上使用构建在SETF之上的所有修改宏，比如INCF、DECF、PUSH
(customer-name *account*)
(slot-value account'customer-name))
(defmethod customer-name ((account bank-account))
(setf (slot-value account'customer-name)value))
(slot-valueaccount'balance))
'customer-name)name))
(name account)
www.TopSage.com
→“SallySue"
17.4
---
## Page 201
了读取方法，现在bank-account类的DEFCLASs形式看起来像下面这样：
串来记录一个槽的用途。将所有这些放在一起，并为account-number和account-type槽添加
同时创建读取函数和对应的SETF函数。取代刚刚给出的槽描述符，一般情况下还可以写成这样：
为customer-name提供等价于前面所写的读取和写入方法：
customer-name)这样的名字来定义sETF函数。例如，你可以将槽描述符改变成下面的样子来
求创建，接受新值作为其第一个参数并把它作为结果返回，因此你可以通过提供一个诸如（setf
符修改成下面这样：
槽的值。该名字可以是任意的，但通常将其命名成与槽本身相同的名字。这样，代替了前面给出
果广义函数不存在则创建它。然后，为它添加一个方法，此方法基于新类特化一个参数并返回该
184
最后，还有一个你应当知道的槽选项是：documentation选项，使用它你可以提供一个字符
由于经常同时需要用于读取和写入的函数，因此DEFCLASS还提供了一个选项:aCCeSSor来
:write选项用来创建设置一个槽的值的广义函数和方法。该函数和方法按照sETF函数的要
read选项指定广义函数的名字，该函数只接受一个对象参数。当DEFCLASS被求值时，如
(defclass bank-account ()
{customer-name
(customer-name
(balance 
:accessor customer-name)
:initform (error "Must supply a customer name.")
:initarg :customer-name
:writer (setf customer-name))
:initarg :customer-name 
:reader balance)
:initform 0
:initarg :balance
((customer-name
:documentation "Type of account, one of :gold, :silver, or :bronze.")))
(account-type
:documentation "Account number,
initform (incf *account-numbers*)
:initform 0
("aweu s,rawonsno: uotaequaunoop
:accessor customer-name
:initarg :customer-name
ccount-number
readeraccount-type
initarg :balance
第 17章 
(error "Must supply a customer name.")
重新审视面向对象：
"Current account balance")
"Must supply a customer name.")
www.TopSage.com
unique within a bank.")
类
---
## Page 202
或者使用两元素列表形式，像这样：
access-low-balance-penalty:
SLOT-VALUE的调用，该对象和适当的槽名作为其参数。“这样，你可以像下面这样编写
产生将要访问其槽的对象。在代码体内，这些变量名的每一次出现都被翻译成一个对
个元素是一个用作变量的名字，第二个元素则是对应槽的名字。instance-form被求值一次来
访问，就像SLOT-VALUE那样，而WITH-ACCESSORS提供了一个访问方法的简称。
代码块，在其中，简单的变量名可用于访问一个特定对象的槽。WITH-SLOTS提供了对槽的直接
个最小值时对其科以罚款：
的函数或方法可能会产生大量对访问函数和SLOT-VALUE的调用。例如，就算是下面这个相当简
槽，或是得到一些槽的值而无需为其定义读取函数。
底层行为的方法时，情况将会更严重，这时你可能特别想直接访问槽来设置那些没有写入函数的
17.5
① 由WHITH-SLOTS和WITH-ACCESSORS提供的“变量”名并不是真正的变量，它们是使用一种特殊类型的宏来实
每一个slot元素可以是一个槽的名字，它也用作一个变量名；或是一个两元素列表，第一
WITH-SLOTS的基本形式如下所示：
这就是SLOT-VALUE适用的场合，不过它仍然很繁琐。更糟糕的是，
两个标准宏WITH-SLOTS和WITH-ACCESSORS可以减轻这种混乱情况。两个宏都创建了一个
而如果你打算直接访问槽值以避免运行附加的方法，它会变得更加混乱。
(defmethod assess-low-balance-penalty ((account bank-account))
尽管使用访问函数将使代码更易于维护，但使用它们仍然有些繁琐。当编写那些实现一个类
(defmethod assess-low-balance-penalty ((account bank-account))
(with-slots (slot*) instance-form
(defmethod assess-low-balance-penalty ((account bank-account))
更多细节。
是为了支持WITH-SLOTS和WITH-ACCESSORS，但你也可以将它们用于自己的目的。我将在第2O章讨论它们的
现的，这种宏称为符号宏（symbol macro)，它允许一个简单的名字被展开成任意代码。在语言中引入符号宏主要
(with-slots ((bal balance)) account
(with-slots (balance) account
body-form*)
(when(<
(when(<
(decf (slot-value account 'balance) (* (balance account) .01))))
WITH-SLOTS 和 WITH-ACCESSORS
(when
(decf balance (* balance .01)))))
{slot-valueaccount
(balance account)
balance
*minimum-balance*)
balance)
17.5
www.TopSage.com
WITH-SLOTS 和 WITH-ACCESSORS
((account bank-account))
(slot-value account
*minimum-balance*)
一个多次访问同一个槽
'balance) .0l))))
185
---
## Page 203
Java、C++和Python这些语言里的静态字段或类字段。“而且，类分配的槽主要用来节省空间。
类的所有实例。
是每次创建实例时求值。另一方面，传递：initarg给MAKE-INSTANCE会设置该值，从而影响该
中。：initform和:initarg选项本质上也具有相同的效果，只是：initform将在类定义时而不
问，
一值存储在类中并且被所有实例所共享。
或:class，如果没有指定则默认为:instance。当一个槽带有：class分配选项时，该槽只有单
影响。但你通常都应当使用访问函数或WITH-ACCESSORS，除非有特定的理由不这样做。
些不被访问函数支持的槽，或是为了显式地避免那些可能定义在访问函数上的附加方法所带来的
行选择是一样的：提供类基本功能的底层代码可以使用SLOT-VALUE和WITH-SLOTS直接修改那
如，你可以编写一个方法来合并两个账户，其中使用两个WITH-ACCESSORS调用，每个账户一个
等价为对相应访问函数的调用。如果访问函数是可以SETF的，那么该变量也可以。
个变量名和一个访问函数名字的两元素列表。在WITH-ACCESSORS的主体中，对一个变量的引用
ACCESSORS。WITH-ACCESSORS形式和WITH-SLOTS相同，除了槽列表的每一项都必须是包含一
17.6
186
①元对象协议（Meta Object Protocol,MOP）其不是语言标准的一部分，但被多数Common Lisp实现支持，它提供了
，这意味着你只能通过该类的一个实例来访问该槽的值，尽管它实际并没有保存在实例
尽管如此，:class槽和:instance槽的访问方法相同—通过sLOT-VALUE或访问函数来访
你需要知道的最后一个槽选项是:allocation。:allocation的值可以是:instance
是使用WITH-SLOTS还是使用WITH-ACCESSORS，与在SLOT-VALUE和一个访问函数之间进
上面的代码中第一个balance是变量的名字，第二个是访问函数的名字，它们不必相同。例
如果你已经用一个：accessor而不只是:reader定义了balance，那么还可以使用wrTH-
(defmethod merge-accounts ((account1 bank-account) (account2 bank-account))
(defmethod assess-low-balance-penalty ((account bank-account))
翻译过程的方式。但这并不是惯用的做法。
现，并且刚好在翻译一些来自其他语言的带有大量对静态字段或类字段使用的代码，那么该函数将给你一种简化
一个函数class-prototype，该函数可以返回一个类的实例用来访问类槽。如果你正在使用一个支持MOP的实
分配在类上的槽
(with-accessors ((balancel balance)) account1
(with-accessors ((balance2 balance)) account2
(when
(decf balance (* balance .01)))))
(decf bal (* bal .01)))))
第17章重新审视面向对象：类
(setf balance2 0))))
(incf balancel balance2)
(<balance
www.TopSage.com
account
---
## Page 204
才能避免出错，因为由bar提供的:initform覆盖了继承自foo的那一个。为了初始化b槽，可以使
是不同的。
次共享单一的槽。在后面的这种情况下，由子类的子类的实例共享的槽和由最初的基类共享的槽
的:instance槽。随后一个子类的子类可能将其重定义回:class槽，从而使该类的所有实例再
能一个类的所有实例共享了一个:class槽，而它的子类的每个实例可能带有相同名字的自己
的:reader、:writer或:accessor选项来定义其自己的访问函数。
基类的DEFCLASS创建的这些方法已经可以用在新类上。不过，新类可以通过提供它自己
的：initargS。MAKE-INSTANcE的调用者可以使用任何一个：initargs来初始化该槽。如果调用
来初始化该槽的关键字形参。多个参数不会产生冲突，因此新的槽描述符将含有所有
关类的那一个。这允许子类可以指定一个与它本该继承的不同的默认值。
如，由于一个槽只能有单一的默认值，那么如果多个类指定了:initform，新类将使用来自最相
了与其父类所指定的槽具有相同名字的槽描述符，也可能是多个基类指定了具有相同名字的槽，
的继承层次关系中可能有多个类指定了具有同一个特定名字的槽。这既可能是因为一个子类包含
它的基类中继承槽，但手法上稍有不同。
上进行特化的方法不仅可以应用在A的直接实例上，还可以应用在A的子类的实例上。类也可以从
17.7
开销。