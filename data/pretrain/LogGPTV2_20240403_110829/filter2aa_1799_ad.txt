Segmentation
High-level programming languages such as C/C++ and Rust are compiled down to machine-level code, 
often called assembler or assembly code. In this low-level language, processor registers are accessed 
directly, and there are often three primary types of registers that programs access (which are visible 
when debugging code):
I 
The Program Counter (PC), which in x86/x64 architecture is called the Instruction Pointer (IP)
and is represented by the EIP (x86) and RIP (x64) register. This register always points to the line
of assembly code that is executing (except for certain 32-bit ARM architectures).
I 
The Stack Pointer (SP), which is represented by the ESP (x86) and RSP (x64) register. This register
points to the location in memory that is holding the current stack location.
I 
Other General Purpose Registers (GPRs) include registers such as EAX/RAX, ECX/RCX, EDX/RDX,
ESI/RSI and R8, R14, just to name a few examples.
Although these registers can contain address values that point to memory, additional registers 
are involved when accessing these memory locations as part of a mechanism called protected mode 
segmentation. This works by checking against various segment registers, also called selectors:
I 
segment (CS) register.
I 
segment (SS) register.
I 
Accesses to other registers are determined by a segment override, which encoding can be used
These selectors live in 16-bit segment registers and are looked up in a data structure called the 
Global Descriptor Table (GDT). To locate the GDT, the processor uses yet another CPU register, the GDT 
CHAPTER 8 System mechanisms
3
28-bit Offset
Table
Indicator
(TI)
Ring
Level
(0-3)
FIGURE 8-1 
The offset located in the segment selector is thus looked up in the GDT, unless the TI bit is set, in 
which case a different structure, the Local Descriptor Table
register instead and is not used anymore in the modern Windows OS. The result is in a segment entry 
This entry, called segment descriptor in modern operating systems, serves two critical purposes:
I 
ring level, also called the Code Privilege Level (CPL) at which
code running with this segment selector loaded will execute. This ring level, which can be from
Operating systems such as Windows use Ring 0 to run kernel mode components and drivers,
and Ring 3 to run applications and services.
Long Mode or
Compatibility Mode segment. The former is used to allow the native execution of x64 code,
whereas the latter activates legacy compatibility with x86. A similar mechanism exists on x86
systems, where a segment can be marked as a 16-bit segment or a 32-bit segment.
I 
Descriptor Privilege Level (DPL),
-
ern systems, the processor still enforces (and applications still expect) this to be set up correctly.
base address, which will add that value 
to any value already loaded in a register that is referencing this segment with an override. A correspond-
ing segment limit
I 
-
at the current swap stateswapgs instruction, and load either
at the appropriate offset, which is limited to a 32-bit base address only. This is done for compat-
ibility reasons with certain operating systems, and the limit is ignored.
I 
If the Code Segment is a Compatibility Mode segment, then read the base address as normal
from the appropriate GDT entry (or LDT entry if the TI bit is set). The limit is enforced and vali-
dated against the offset in the register following the segment override.
4 
CHAPTER 8 System mechanisms
to achieve a sort of thread-local register
-
Therefore, segmentation is used to achieve these two effects on Windows—encode and enforce the 
level of privilege that a piece of code can execute with at the processor level and provide direct access to 
since the GDT is pointed to by a CPU register—the GDTR—each CPU can have its own GDT. In fact, this is 
that the TEB of the currently executing thread on the current processor is equally present in its segment.
EXPERIMENT: Viewing the GDT on an x64 system
You can view the contents of the GDT, including the state of all segments and their base addresses 
(when relevant) by using the dg debugger command, if you are doing remote debugging or 
starting segment and the ending segment, which will be 10 and 50 in this example:
0: kd> dg 10 50 
P Si Gr Pr Lo 
Sel        Base              Limit          Type    l ze an es ng Flags 
---- ----------------- ----------------- ---------- - -- -- -- -- -------- 
0010 00000000`00000000 00000000`00000000 Code RE Ac 0 Nb By P  Lo 0000029b 
0018 00000000`00000000 00000000`00000000 Data RW Ac 0 Bg By P  Nl 00000493 
0020 00000000`00000000 00000000`ffffffff Code RE Ac 3 Bg Pg P  Nl 00000cfb 
0028 00000000`00000000 00000000`ffffffff Data RW Ac 3 Bg Pg P  Nl 00000cf3 
0030 00000000`00000000 00000000`00000000 Code RE Ac 3 Nb By P  Lo 000002fb 
0050 00000000`00000000 00000000`00003c00 Data RW Ac 3 Bg By P  Nl 000004f3
The key segments here are 10h, 18h, 20h, 28h, 30h, and 50h. (This output was cleaned up a bit 
to remove entries that are not relevant to this discussion.)
the number 0 under the Pl column , the letters “Lo” under the Long column, and the type being 
compatibility mode), which is the segment used for executing x86 code under the WoW64 sub-
the stack, data, and extended segment.
EXPERIMENT: Viewing the GDT on an x64 system
You can view the contents of the GDT, including the state of all segments and their base addresses
(when relevant) by using the dg debugger command, if you are doing remote debugging or 
starting segment and the ending segment, which will be 10 and 50 in this example:
0: kd> dg 10 50
P Si Gr Pr Lo
Sel        Base              Limit          Type    l ze an es ng Flags
---- ----------------- ----------------- ---------- - -- -- -- -- --------
0010 00000000`00000000 00000000`00000000 Code RE Ac 0 Nb By P  Lo 0000029b
0018 00000000`00000000 00000000`00000000 Data RW Ac 0 Bg By P  Nl 00000493
0020 00000000`00000000 00000000`ffffffff Code RE Ac 3 Bg Pg P  Nl 00000cfb
0028 00000000`00000000 00000000`ffffffff Data RW Ac 3 Bg Pg P  Nl 00000cf3
0030 00000000`00000000 00000000`00000000 Code RE Ac 3 Nb By P  Lo 000002fb
0050 00000000`00000000 00000000`00003c00 Data RW Ac 3 Bg By P  Nl 000004f3
The key segments here are 10h, 18h, 20h, 28h, 30h, and 50h. (This output was cleaned up a bit 
to remove entries that are not relevant to this discussion.)
the number 0 under the Pl column , the letters “Lo” under the Long column, and the type being 
compatibility mode), which is the segment used for executing x86 code under the WoW64 sub-
the stack, data, and extended segment.
CHAPTER 8 System mechanisms
5
address of the TEB will be stored when running under compatibility mode, as was explained earlier.
which can be done with the following commands if you are doing local or remote kernel debug-
ging (these commands will not work with a crash dump):
lkd> rdmsr c0000101 
msr[c0000101] = ffffb401`a3b80000 
lkd> rdmsr c0000102 
msr[c0000102] = 000000e5`6dbe9000
You can compare these values with those of @$pcr and @$teb, which should show you the 
same values, as below:
lkd> dx -r0 @$pcr 
@$pcr
: 0xffffb401a3b80000 [Type: _KPCR *] 
lkd> dx -r0 @$teb 
@$teb
: 0xe56dbe9000 [Type: _TEB *]
EXPERIMENT: Viewing the GDT on an x86 system
On an x86 system, the GDT is laid out with similar segments, but at different selectors, addition-
swapgs functionality, and due to the lack of 
Long Mode, the number of selectors is a little different, as you can see here:
kd> dg 8 38 
P Si Gr Pr Lo 
Sel    Base     Limit     Type    l ze an es ng Flags 
---- -------- -------- ---------- - -- -- -- -- -------- 
0008 00000000 ffffffff Code RE Ac 0 Bg Pg P  Nl 00000c9b 
0010 00000000 ffffffff Data RW Ac 0 Bg Pg P  Nl 00000c93 
0018 00000000 ffffffff Code RE    3 Bg Pg P  Nl 00000cfa 
0020 00000000 ffffffff Data RW Ac 3 Bg Pg P  Nl 00000cf3 
0030 80a9e000 00006020 Data RW Ac 0 Bg By P  Nl 00000493 
0038 00000000 00000fff Data RW    3 Bg By P  Nl 000004f2
data, and extended segment.
-
for segmentation on these systems.
address of the TEB will be stored when running under compatibility mode, as was explained earlier.
which can be done with the following commands if you are doing local or remote kernel debug-
ging (these commands will not work with a crash dump):
lkd> rdmsr c0000101
msr[c0000101] = ffffb401`a3b80000
lkd> rdmsr c0000102
msr[c0000102] = 000000e5`6dbe9000
You can compare these values with those of @$pcr and @$teb, which should show you the 
same values, as below:
lkd> dx -r0 @$pcr
@$pcr
: 0xffffb401a3b80000 [Type: _KPCR *]
lkd> dx -r0 @$teb
@$teb
: 0xe56dbe9000 [Type: _TEB *]
EXPERIMENT: Viewing the GDT on an x86 system
On an x86 system, the GDT is laid out with similar segments, but at different selectors, addition-
swapgs functionality, and due to the lack of 
Long Mode, the number of selectors is a little different, as you can see here:
kd> dg 8 38
P Si Gr Pr Lo
Sel    Base     Limit     Type    l ze an es ng Flags
---- -------- -------- ---------- - -- -- -- -- --------
0008 00000000 ffffffff Code RE Ac 0 Bg Pg P  Nl 00000c9b
0010 00000000 ffffffff Data RW Ac 0 Bg Pg P  Nl 00000c93
0018 00000000 ffffffff Code RE    3 Bg Pg P  Nl 00000cfa
0020 00000000 ffffffff Data RW Ac 3 Bg Pg P  Nl 00000cf3
0030 80a9e000 00006020 Data RW Ac 0 Bg By P  Nl 00000493
0038 00000000 00000fff Data RW    3 Bg By P  Nl 000004f2
data, and extended segment.
-
for segmentation on these systems.
6 
CHAPTER 8 System mechanisms
Lazy segment loading
Based on the description and values of the segments described earlier, it may be surprising to investi-
the following segments:
CS = 1Bh (18h | 3)
ES, DS = 23 (20h | 3)
Yet, during a system call in Ring 0, the following segments would be found:
CS = 08h (08h | 0)
ES, DS = 23 (20h | 3)
Similarly, an x64 thread executing in kernel mode would also have its ES and DS segments set to 2Bh 
(28h | 3). This discrepancy is due to a feature known as lazy segment loading-
lessness of the Descriptor Privilege Level (DPL) of a data segment when the current Code Privilege Level 
access data of a lower DPL—but not the contrary—setting DS and/or ES to their “proper” values upon 
entering the kernel would also require restoring them when returning to user mode. 
-
ing costs to system call and interrupt handling. As such, Windows always uses the Ring 3 data segment 
values, avoiding these associated costs.
Task state segments
Other than the code and data segment registers, there is an additional special register on both x86 and 
x64 architectures: the Task Register (TR), which is also another 16-bit selector that acts as an offset in 
the GDT. In this case, however, the segment entry is not associated with code or data, but rather with 
a task
is called the Task State—in the case of Windows, the current thread. These task states, represented 
by segments (Task State Segment, or TSS), are used in modern x86 operating systems to construct a 
section). At minimum, a TSS represents a page directory (through the CR3 register), such as a PML4 on 
x64 systems (see Part 1, Chapter 5, “Memory management,” for more information on paging), a Code 
Segment, a Stack Segment, an Instruction Pointer, and up to four  Stack Pointers (one for each ring 
level). Such TSSs are used in the following scenarios:
I 
used by the processor to correctly handle interrupts and exceptions by loading the Ring 0 stack
from the TSS if the processor was currently running in Ring 3.
CHAPTER 8 System mechanisms
7
I 
requires a dedicated TSS with a custom debug fault handler and kernel stack.
I 
I 
occurs. Similarly, this is used to load the NMI handler on a safe kernel stack.
I 
the same reasons, can run on a dedicated, safe, kernel stack.
On x64 systems, the ability to have multiple TSSs was removed because the functionality had been 
relegated to mostly this one need of executing trap handlers that run on a dedicated kernel stack. As 
such, only a single TSS is now used (in the case of Windows, at 040h), which now has an array of eight 
possible stack pointers, called the Interrupt Stack Table (IST). Each of the preceding traps is now associ-
ated with an IST Index instead of a custom TSS. In the next section, as we dump a few IDT entries, you 
will see the difference between x86 and x64 systems and their handling of these traps.
EXPERIMENT: Viewing the TSSs on an x86 system
On an x86 system, we can look at the system-wide TSS at 28h by using the same dg command 
utilized earlier:
kd> dg 28 28 
P Si Gr Pr Lo 
Sel    Base     Limit     Type    l ze an es ng Flags 
---- -------- -------- ---------- - -- -- -- -- -------- 
0028 8116e400 000020ab TSS32 Busy 0 Nb By P  Nl 0000008b
the dx or dt commands:
kd> dx (nt!_KTSS*)0x8116e400 
(nt!_KTSS*)0x8116e400
: 0x8116e400 [Type: _KTSS *] 
    [+0x000] Backlink
: 0x0 [Type: unsigned short] 
    [+0x002] Reserved0
: 0x0 [Type: unsigned short] 
    [+0x004] Esp0
: 0x81174000 [Type: unsigned long] 
    [+0x008] Ss0
: 0x10 [Type: unsigned short] 
Esp0 and Ss0
Windows never uses hardware-based task switching outside of the trap conditions described 
earlier. As such, the only use for this particular TSS is to load the appropriate kernel stack during 
a hardware interrupt. 
EXPERIMENT: Viewing the TSSs on an x86 system
On an x86 system, we can look at the system-wide TSS at 28h by using the same dg command 
utilized earlier:
kd> dg 28 28
P Si Gr Pr Lo
Sel    Base     Limit     Type    l ze an es ng Flags
---- -------- -------- ---------- - -- -- -- -- --------
0028 8116e400 000020ab TSS32 Busy 0 Nb By P  Nl 0000008b
the dx or dt commands:
kd> dx (nt!_KTSS*)0x8116e400
(nt!_KTSS*)0x8116e400
: 0x8116e400 [Type: _KTSS *]
    [+0x000] Backlink
: 0x0 [Type: unsigned short]
    [+0x002] Reserved0
: 0x0 [Type: unsigned short]
    [+0x004] Esp0
: 0x81174000 [Type: unsigned long]
    [+0x008] Ss0
: 0x10 [Type: unsigned short] 
Esp0 and Ss0
Windows never uses hardware-based task switching outside of the trap conditions described 
earlier. As such, the only use for this particular TSS is to load the appropriate kernel stack during 
a hardware interrupt. 
8 
CHAPTER 8 System mechanisms
“Meltdown” architectural processor vulnerability, this stack pointer will be the kernel stack 
whereas on systems that are vulnerable, this will point to the transition stack inside of the 
dg 
to look at it:
kd> dg a0 a0 
P Si Gr Pr Lo 
Sel    Base     Limit     Type    l ze an es ng Flags 
---- -------- -------- ---------- - -- -- -- -- -------- 
00A0 81170590 00000067 TSS32 Avl  0 Nb By P  Nl 00000089 
.tss command instead of dx, which will format the various 
case, the input parameter is the task selector (A0h).
kd> .tss a0 
eax=00000000 ebx=00000000 ecx=00000000 edx=00000000 esi=00000000 edi=00000000 
eip=81e1a718 esp=820f5470 ebp=00000000 iopl=0         nv up di pl nz na po nc 
cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00000000 
hal!HalpMcaExceptionHandlerWrapper: 
81e1a718 fa              cli 
Note how the segment registers are set up as described in the “Lazy segment loading” section 
.tss
Directory. In the “Trap dispatching” section, we revisit this TSS when using the !idt command.
EXPERIMENT: Viewing the TSS and the IST on an x64 system
On an x64 system, the dg command unfortunately has a bug that does not correctly show 64-bit 
segment base addresses, so obtaining the TSS segment (40h) base address requires dumping 