every page load and will thus be unable to associate different
page visits with the same user. Despite its seeming simplicity,
this technique is also likely to have its own unique set of
challenges, e.g., preserving the functionality of a webpage
when arbitrary nodes are being modiﬁed, which we will
investigate in future work.
VII. RELATED WORK
To the best of our knowledge, this paper is the ﬁrst one that
proposes a fully automated system for ﬁngerprinting browser
extensions based on their side-effects on a page’s DOM, and
quantiﬁes the ﬁngerprintability of popular extensions installed
on the browsers of real users. In this section, we discuss
the related work dealing with the ﬁngerprinting of browser
extensions, separating it
into ﬁngerprinting made possible
by manual analysis of browser extensions, and automated
ﬁngerprinting.
Manual Analysis
Mowery et al. described the process of inferring the user-
customized rules of the NoScript browser extension by trying
to load multiple JavaScript scripts from various domains and
observing which ones succeed and which ones fail [41]. The
same technique has been used both by researchers [36], as
well as advertising companies [8]–[10], in order to detect the
presence of ad-blockers.
Nikiforakis et al., as part of their study of commercial
ﬁngerprinting providers, manually analyzed eleven user-agent
spooﬁng extensions and showed that the inconsistencies of
the claimed browser identity and JavaScript-accessible objects
could be abused to detect
the presence of the evaluated
browser extensions [44]. In a subsequent study, Acar et al.
analyzed an anti-ﬁngerprinting browser extension [11], [12]
and showed that it was, in fact, also ﬁngerprintable [7].
Automated Detection
In 2012, Kotowicz presented a technique, reminiscent of
timing attacks [13], [21], for detecting the browser extensions
installed by Chrome users [35]. Using JavaScript, he attempted
to load the manifest ﬁles of thousands of extensions by
addressing them through the chrome-extension:// URL
scheme and their unique extension identiﬁer. Through the
appropriate setting of onload and onerror event handlers,
Kotowicz could differentiate between the presence and the
absence of the tested browser extensions. This attack no longer
works since Google Chrome changed its extension architecture
so that all extension resources are hidden from the public web,
with the exception of the resources that an extension developer
has explicitly marked as “web accessible” [24]. At the same
time, Golubovic [42] and Sj¨osten et al. [46] found that many
popular extensions, do in fact make use of web-accessible
resources and are thus discoverable.
In XHOUND, we chose to focus on the DOM-level side-
effects of the presence of browser extensions and thus did
not consider web-accessible resources. While this technique
can be straightforwardly incorporated in XHOUND, we argue
that our discovery method is signiﬁcantly more robust than the
ones based on web-accessible resources. At any given point in
time, the developers of browser extensions can disable the use
of web-accessible resources, making their extensions invisi-
ble to the aforementioned extension-ﬁngerprinting technique.
Contrastingly, our ﬁngerprinting techniques are based on an
extension’s organic activity in a page’s DOM. To remove this
DOM-level activity, if at all possible, requires signiﬁcant re-
engineering of the entire extension’s codebase. At the same
time, from a practical point of view,
the techniques that
XHOUND uses and web-accessible resources are fully orthog-
onal and thus a tracker can incorporate both techniques in
their tracking scripts. To quantify this complementary nature,
we analyzed the manifest ﬁles of the 1,656 extensions that
XHOUND was able to ﬁngerprint and discovered that more
than 40% of them do not make use of web-accessible resources
and thus would not be detectable by them.
VIII. CONCLUSION
Recent years have seen the web browser becoming an all-
encompassing platform, offering to web applications features
that were traditionally only available to installed native appli-
cations. One crucial feature of these modern browsers is their
ability to be extended to meet individual user requirements.
In this paper, we investigated the ﬁngerprintability of
browser extensions and sought to quantify it, in terms of the
fraction of popular extensions that are ﬁngerprintable and the
sets of extensions that different users install. To this end, we
designed and implemented the ﬁrst fully-automated, robust
system, XHOUND, which uses a combination of static and
dynamic analysis to identify an extension’s organic, ﬁnger-
printable activity in a webpage’s DOM. By applying XHOUND
to the 10,000 most popular Google Chrome browser exten-
sions, we discovered that 9.2% to 23% of these extensions
are ﬁngerprintable and their presence could be inferred by
webpages. We then surveyed 854 real users and discovered that
most users utilize ﬁngerprintable extensions, and a signiﬁcant
fraction of them use different sets of ﬁngerprintable exten-
sions, allowing trackers to uniquely or near-uniquely identify
them. We described the process of developing an extension-
ﬁngerprinting script using XHOUND’s results, and showed that
a tracker can ﬁngerprint a large number of extensions in just
a few seconds.
On the defensive side, we explained why extension-based
ﬁngerprinting is more intrusive than traditional ﬁngerprinting
954
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:24 UTC from IEEE Xplore.  Restrictions apply. 
and why, in the current architectures of browsers, eliminating
the risk of extension-based ﬁngerprinting is far from trivial.
Finally, we sketched two possible countermeasures based on
the ideas of encapsulation and namespace pollution that aim
to either hide the presence of extensions or confuse trackers
about which extensions are really installed in a user’s browser.
We hope that our work will be of use to browser vendors,
extension developers, and end users. Browser vendors
can investigate
supporting
extensions that make it harder for webpages to infer the
presence of installed extensions, while extension developers
can reconsider
their extensions, adopting
encapsulation techniques where possible and ensuring that all
DOM changes are absolutely necessary. Finally, end users
can become aware of the privacy implications of installing
browser extensions and consider uninstalling or disabling the
ones that they do not absolutely need.
the designs of
architectures
alternative
for
Acknowledgments: We thank our shepherd Nikita Borisov
and the reviewers for their valuable feedback. This work
was supported by the National Science Foundation (NSF)
under grants CNS-1527086, CNS-1617902, and CNS-1617593
with additional support from the Data Transparency Lab. Any
opinions, ﬁndings, conclusions, or recommendations expressed
herein are those of the authors, and do not necessarily reﬂect
those of the US Government, NSF, or the Data Transparency
Lab.
IX. AVAILABILITY
Our plan is to eventually make XHOUND available to the
research community (either by open-sourcing it, or by making
it available as a service).
REFERENCES
[1] “Bug 757726 - disallow enumeration of navigator.plugins,” https://
bugzilla.mozilla.org/show bug.cgi?id=757726.
[2] “W3C Shadow DOM,” http://www.w3.org/TR/shadow-dom/.
[3] “The Final Countdown for NPAPI,” https://blog.chromium.org/2014/11/
the-ﬁnal-countdown-for-npapi.html, 2014.
[4] “Use
Shadow DOM for
element-hiding where
http://old-support.getadblock.com/discussions/suggestions/
423-use-shadow-dom-for-element-hiding-where-available, 2014.
available,”
[5] “NPAPI Plugins
in Firefox,” https://blog.mozilla.org/futurereleases/
2015/10/08/npapi-plugins-in-ﬁrefox/, 2015.
[6] G. Acar, C. Eubank, S. Englehardt, M. Juarez, A. Narayanan, and
C. Diaz, “The Web Never Forgets: Persistent Tracking Mechanisms in
the Wild,” in Proceedings of the 21st ACM Conference on Computer
and Communications Security (CCS), 2014.
[7] G. Acar, M. Juarez, N. Nikiforakis, C. Diaz, S. G¨urses, F. Piessens,
and B. Preneel, “FPDetective: Dusting the Web for ﬁngerprinters,” in
Proceedings of the 20th ACM Conference on Computer and Communi-
cations Security (CCS), 2013.
[8] “Most effective way to detect ad blockers Completely free & easy to
implement,” http://www.detectadblock.com/.
[9] “PageFair - Reclaim Your Adblocked Revenue,” https://pagefair.com/.
[10] “BlockAdblock — Stop Losing Ad Revenue,” http://blockadblock.com/.
[11] K. Boda, “Firegloves,” http://ﬁngerprint.pet-portal.eu/?menu=6.
[12] K. Boda, A. M. F¨oldes, G. G. Guly´as, and S. Imre, “User tracking
on the web via cross-browser ﬁngerprinting,” in Proceedings of the
Nordic Conference on Information Security Technology for Applications
(NordSec), 2012.
[13] A. Bortz and D. Boneh, “Exposing private information by timing web
applications,” in Proceedings of the 16th international conference on
World Wide Web. ACM, 2007, pp. 621–628.
[14] Y. Cao, S. Li, and E. Wijmans, “(Cross-)Browser Fingerprinting via
OS and Hardware Level Features,” in Proceedings of the Network and
Distributed System Security Symposium (NDSS), 2017.
[15] J. Corpuz, “40 Best Google Chrome Extensions,” http://www.tomsguide.
com/us/pictures-story/283-best-google-chrome-extensions.html, 2016.
[16] A. Das, N. Borisov, and M. Caesar, “Do you hear what
i hear?:
ﬁngerprinting smart devices through embedded acoustic components,”
in Proceedings of the 2014 ACM SIGSAC Conference on Computer and
Communications Security. ACM, 2014, pp. 441–452.
[17] S. Dey, N. Roy, W. Xu, R. R. Choudhury, and S. Nelakuditi, “Accelprint:
Imperfections of accelerometers make smartphones trackable.” in NDSS,
2014.
[18] S. Dutton, “Getting Started with WebRTC,” http://www.html5rocks.com/
en/tutorials/webrtc/basics/.
[19] P. Eckersley, “How Unique Is Your Browser?” in Proceedings of the 10th
Privacy Enhancing Technologies Symposium (PETS), 2010, pp. 1–18.
[20] P. Eckersley, “White House Website Includes Unique Non-Cookie
Tracker, Conﬂicts With Privacy Policy,” https://www.eff.org/deeplinks/
2014/07/white-house-
website-includes-unique-non-cookie-tracker-despite-
privacy-policy, 2014.
[21] E. W. Felten and M. A. Schneider, “Timing attacks on web privacy,” in
Proceedings of the 7th ACM conference on Computer and communica-
tions security. ACM, 2000, pp. 25–32.
[22] D. Fiﬁeld and S. Egelman, “Fingerprinting web users through font
metrics,” in Financial Cryptography and Data Security. Springer, 2015,
pp. 107–124.
[23] J. Garcia,
Browsing
https://www.webroot.com/blog/2016/02/03/
Browser
Increase
Plugins
“Top
Security
top-browser-plugins-to-increase-browsing-security-
and-privacy, 2013.
Privacy,”
and
to
[24] Google Chrome, “Manifest
- Web Accessible Resources,” https://
developer.chrome.com/extensions/manifest/web accessible resources.
[25] Google Chrome Extension, “Imagine Easy Scholar Annotation Tool,”
https://chrome.google.com/webstore/detail/imagine-easy-scholar-anno/
mpioiijlnmnhfbphhafnmilihogfbijk.
[26] Google Chrome Extension,
“Unlimited Free VPN - Hola,”
https://chrome.google.com/webstore/detail/unlimited-free-vpn-hola/
gkojfkhlekighikafcpjkiklfbnlmeio.
[27] T. Hupperich, D. Maiorca, M. K¨uhrer, T. Holz, and G. Giacinto, “On
the robustness of mobile device ﬁngerprinting: Can mobile users escape
modern web-tracking mechanisms?” in Proceedings of the 31st Annual
Computer Security Applications Conference, ser. ACSAC, 2015.
[28] N. Jagpal, E. Dingle, J.-P. Gravel, P. Mavrommatis, N. Provos,
lessons
from
M. A. Rajab,
three
24th USENIX
Security Symposium, 2015. [Online]. Available: https://www.usenix.org/
conference/usenixsecurity15/technical-sessions/presentation/jagpal
years ﬁghting malicious
“Trends
extensions,”
and K. Thomas,
and
in
[29] S. Jobs, “Apple — Thoughts on Flash,” https://www.apple.com/hotnews/
thoughts-on-ﬂash/, 2010.
in
[30] A. Kapravelos, C. Grier, N. Chachra, C. Kruegel, G. Vigna,
in browser
and V. Paxson, “Hulk: Eliciting malicious behavior
extensions,”
Symposium (USENIX
Security 14).
San Diego, CA: USENIX Association, Aug. 2014,
pp. 641–654. [Online]. Available: https://www.usenix.org/conference/
usenixsecurity14/technical-sessions/presentation/kapravelos
23rd USENIX Security
[31] H. King, “20 ways to make your Chrome browser so much better,” http://
money.cnn.com/2015/07/01/technology/best-chrome-extensions/, 2015.
Sup-
http://lifehacker.com/
ports
chrome-for-ios-adds-supports-for-extensions-1637664312, 2014.
Extensions,”
Klosowski,
“Chrome
[32] T.
Adds
App
[33] K. Knibbs, “Damn, Netﬂix Is Cracking Down on VPNs and Proxies,”
iOS
for
for
http://gizmodo.com/damn-netﬂix-is
cracking-down-on-vpns-and-proxies-1752956270, 2016.
is
[34] M. Korolov,
“Java
the biggest vulnerability for US com-
puters,” http://www.csoonline.com/article/2875535/application-security/
java-is-the-biggest-vulnerability-for-us-computers.html, 2015.
[35] K. Kotowicz, “Intro to Chrome addons hacking: ﬁngerprinting,” http://
blog.kotowicz.net/2012/02/intro-to-chrome-addons-hacking.html, 2012.
[36] P. Laperdrix, W. Rudametkin, and B. Baudry, “Beauty and the
Beast: Diverting modern web browsers to build unique browser
ﬁngerprints,” in 37th IEEE Symposium on Security and Privacy
(S&P 2016), San Jose, United States, May 2016. [Online]. Available:
https://hal.inria.fr/hal-01285470
955
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:24 UTC from IEEE Xplore.  Restrictions apply. 
[37] A. Lerner, A. K. Simpson, T. Kohno, and F. Roesner, “Internet Jones
and the Raiders of the Lost Trackers: An Archaeological Study of Web
Tracking from 1996 to 2016,” in Proceedings of the USENIX Security
Symposium, 2016.
[38] J. R. Mayer, “Any person... a pamphleteer,” Senior Thesis, Stanford
University, 2009.
[39] M. McCorry, “Top 10 Free Must Have SEO Browser Plugins,” https://
www.branded3.com/blog/top-10-free-must-have-seo-browser-plugins/,
2015.
[40] G. Merzdovnik, M. Huber, D. Buhov, N. Nikiforakis, S. Neuner,
M. Schmiedecker, and E. Weippl, “Block Me If You Can: A Large-
Scale Study of Tracker-Blocking Tools,” in Proceedings of the 2nd IEEE
European Symposium on Security and Privacy (IEEE EuroS&P), 2017.
[41] K. Mowery, D. Bogenreif, S. Yilek, and H. Shacham, “Fingerprinting
information in JavaScript implementations,” in Proceedings of W2SP
2011, H. Wang, Ed.
IEEE Computer Society, May 2011.
[42] Nicolas Golubovic, “Attacking Browser Extensions, MS Thesis,
Ruhr-University Bochum,” http://nicolas.golubovic.net/thesis/master.pdf,
2016.
[43] N. Nikiforakis, W. Joosen, and B. Livshits, “PriVaricator: Deceiving
the 24th
Fingerprinters with Little White Lies,” in Proceedings of
International World Wide Web Conference (WWW), 2015.
[44] N. Nikiforakis, A. Kapravelos, W. Joosen, C. Kruegel, F. Piessens,
and G. Vigna, “Cookieless monster: Exploring the ecosystem of
web-based device ﬁngerprinting,” in Proceedings of the 2013 IEEE
Symposium on Security and Privacy
USA: IEEE Computer Society, 2013, pp. 541–555. [Online]. Available:
http://dx.doi.org/10.1109/SP.2013.43
[45] Recorded Future, “Gone in a Flash: Top 10 Vulnerabilities Used by Ex-
ploit Kits,” https://www.recordedfuture.com/top-vulnerabilities-2015/.
[46] A. Sj¨osten, S. Van Acker, and A. Sabelfeld, “Discovering browser
extensions via web accessible resources,” in
Conference on Data and Applications Security and Privacy (CODASPY)
2017.
[47] K. Thomas, E. Bursztein, C. Grier, G. Ho, N. Jagpal, A. Kapravelos,
D. McCoy, A. Nappa, V. Paxson, P. Pearce
Assessing deceptive advertisement modiﬁcations,” in
on Security and Privacy (SP)
[48] D. Tong, “Integrating Canvas into your Web App,” http://www.
html5rocks.com/en/tutorials/canvas/integrating/.
[49] C. F. Torres, H. Jonker, and S. Mauw, “Fp-block: Usable web privacy
by controlling browser ﬁngerprinting,” in
[50] X. Xing, W. Meng, B. Lee, U. Weinsberg, A. Sheth, R. Perdisci,
and W. Lee, “Understanding malvertising through ad-injecting browser
extensions,” in Proceedings of the 24th International Conference on
World Wide Web, ser. WWW ’15, 2015, pp. 1286–1295.
[51] Z. Zhou, W. Diao, X. Liu, and K. Zhang, “Acoustic ﬁngerprinting
revisited: Generate stable device id stealthily with inaudible sound,” in
Proceedings of the 2014 ACM SIGSAC Conference on Computer and
Communications Security. ACM, 2014, pp. 429–440.
, ser. SP ’13. Washington, DC,
Proceedings of the 7th ACM
,
et al., “Ad injection at scale:
IEEE Symposium
, 2015.
ESORICS, 2015.
956
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:24 UTC from IEEE Xplore.  Restrictions apply.