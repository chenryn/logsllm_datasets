[Online]. Available: http://marc.info/?l-openbsd-isc&m=
118296441702631, 2007.
Intel Core 2.
[21] DE VRIES. Understanding the detailed Architecture of AMD’s
64 bit Core. http://www.chip-architect.com/news/2003
09 21 Detailed Architecture of AMDs 64bit Core.html.
[22] DUFLOT, L. CPU Bugs, CPU Backdoors and Consequences on
Security. In ESORICS (2008), pp. 580–599.
[23] E. G. SUH et al.. AEGIS: Architecture for Tamper-Eevident and
In International Conference on
Tamper-Resistant Processing.
Supercomputing (2003), pp. 160–171.
[24] FAVOR, J. G. Risc86 instruction set, Jan. 1 2002. US Patent
6,336,178.
[25] FUDZILLA STAFF. AMD denies existence of NSA back-
http://www.fudzilla.com/
door .
32120-amd-denies-existence-of-nsa-backdoor.
[Online]. Available:
[26] G. A. REIS et al.. Conﬁgurable Transient Fault Detection via
Dynamic Binary Translation. In Workshop on Architectural Relia-
bility (2006).
[27] HABIB, S. Microprogrammed Enhancements to Higher Level
Languages - an Overview. In Workshop on Microprogramming
(1974), pp. 80–84.
[28] INTEL CORPORATION. i960 VH Processor Developer’s Manual,
1998.
[30] INTEL CORPORATION. Pentium® Pro Processor Speciﬁcation
Update, 2016.
[31] JACOB, B., NG, S., AND WANG, D. Memory Systems: Cache,
DRAM, Disk. Morgan Kaufmann Publishers Inc., 2007.
[32] JONES, L. H. A Survey of Current Work in Microprogramming.
Computer 8, 8 (Aug. 1975), 33–38.
[33] K. SHIRRIFF. Reverse engineering the ARM1 processor’s mi-
croinstructions . [Online]. Available: http://www.righto.com/
2016/02/reverse-engineering-arm1-processors.html.
[34] KOCHER, P. C. Timing Attacks on Implementations of Difﬁe-
Hellman, RSA, DSS, and Other Systems. In CRYPTO (1996),
pp. 104–113.
[35] LIBSODIUM.
[Online]. Available:
https://github.com/
jedisct1/libsodium/tree/master/src/libsodium/
crypto core/curve25519/ref10.
[36] M. HICKS et al.. SPECS: A Lightweight Runtime Mechanism
for Protecting Software from Security-Critical Processor Bugs. In
ASPLOS (2015), pp. 517–529.
[37] M. MAAS et al.. PHANTOM: practical oblivious computation in
a secure processor. In CCS (2013), pp. 311–324.
[38] MAISURADZE, G., BACKES, M., AND ROSSOW, C. Dachshund:
Digging for and Securing (Non-)Blinded Constants in JIT Code. In
Symposium on Network and Distributed System Security (NDSS)
(2017).
[39] MCGRATH, K. J., AND PICKETT, J. K. Microcode patch device,
Aug. 27 2002. US Patent 6,438,664.
[40] MEIXNER, A., AND SORIN, D. J. Detouring: Translating Soft-
ware to Circumvent Hard Faults in Simple Cores. In IEEE/IFIP
International Conference on Dependable Systems and Networks,
DSN (2008), pp. 80–89.
[41] MELVIN, S., AND PATT, Y. SPAM: A Microcode Based Tool
for Tracing Operating Sytsem Events. SIGMICRO Newsl. 19, 1-2
(June 1988), 58–59.
[42] MICROPROGRAMS. [Online]. Available: https://github.com/
RUB-SysSec/Microcode.
[43] RAUSCHER, T. G., AND ADAMS, P. M. Microprogramming:
IEEE Trans.
A Tutorial and Survey of Recent Developments.
Computers 29, 1 (1980), 2–20.
[44] RUTKOWSKA, J. Why do I miss Microsoft BitLocker? [Online].
Available: http://theinvisiblethings.blogspot.de/2009/
01/why-do-i-miss-microsoft-bitlocker.html, 2009.
[45] RUTKOWSKA,
[On-
line]. Available: https://blog.invisiblethings.org/2015/
10/27/x86 harmful.html, 2015.
Intel x86 considered harmful.
J.
[46] S. E. QUADIR et al.. A Survey on Chip to System Reverse
Engineering. J. Emerg. Technol. Comput. Syst. 13, 1 (Apr. 2016),
6:1–6:34.
[47] S. GHANDALI et al.. A Design Methodology for Stealthy Paramet-
ric Trojans and Its Application to Bug Attacks. In CHES (2016),
pp. 625–647.
[48] S. NARAYANASAMY et al.. Patching Processor Design Errors.
In International Conference on Computer Design ICCD (2006),
pp. 491–498.
[49] S. R. SARANGI et al. Patching Processor Design Errors with
Programmable Hardware. IEEE Micro 27, 1 (2007), 12–25.
[50] SCHAUMONT, P. R. A Practical Introduction to Hardware/Soft-
ware Codesign. Springer, 2010.
[29] INTEL CORPORATION. 6th Generation Intel® Processor Family
Speciﬁcation Update, 2016.
[51] SINTSOV, A. Jit-spray attacks & advanced shellcode. HITBSec-
Conf Amsterdam (2010).
1176    26th USENIX Security Symposium
USENIX Association
[52] SKOROBOGATOV, S. P. Semi-Invasive Attacks – A New Approach
to Hardware Security Analysis. PhD thesis, University of Cam-
bridge, 2005.
[53] SMOTHERMAN, M. A Brief History of Microprogramming.
http://ed-thelen.org/comp-hist/
[Online]. Available:
MicroprogrammingABriefHistoryOf.pdf, 2012.
[54] STALLINGS, W. Computer Organization and Architecture: De-
signing for Performance (7th Edition). Prentice-Hall, Inc., 2005.
[55] SUN MICROSYSTEMS, INC. OpenSPARC Overview. [Online].
Available: http://www.oracle.com/technetwork/systems/
opensparc/index.html.
[56] T. ARONS et al.. Formal Veriﬁcation of Backward Compatibility
of Microcode. In CAV (2005), pp. 185–198.
[57] T. KAUFMANN et al.. When Constant-Time Source Yields
Variable-Time Binary: Exploiting Curve25519-donna Built with
MSVC 2015. In CANS (2016), pp. 573–582.
[58] TEHRANIPOOR, M., AND KOUSHANFAR, F. A Survey of Hard-
ware Trojan Taxonomy and Detection. IEEE Des. Test 27, 1 (Jan.
2010), 10–25.
[59] TRIULZI, A.
Pneumonia, shardan, antibiotics and nasty
https:
[Online]. Available:
a dead hand’s tale.
mov:
//www.troopers.de/events/troopers15/449 pneumonia
shardan antibiotics and nasty mov a dead hands tale/,
2015.
[60] TRIULZI, A.
[Online]. Avail-
https://www.troopers.de/events/troopers16/655
The chimaera processor.
able:
the chimaera processor/, 2016.
[61] WILKES, M. V. The Best Way to Design an Automatic Calculat-
ing Machine. In The Early British Computer Conferences. MIT
Press, 1989, pp. 182–184.
[62] WOLFE, A. For Intel, its a case of FPU all over again. EE-
Times [Online]. Available: http://www.fool.com/EETimes/
1997/EETimes970516d.htm, 1997.
A Appendix
A.1 Microcode Speciﬁcation
As explained in Section 5.1, we designed automated test
cases to record which locations of the microcode ROM
contain triads used to implement a certain x86 instruc-
tion. We then cleared the artefacts caused by our test
environment and combined the heat maps of all vector
path instructions. Table 4 shows an excerpt of the result.
ROM Address
0x900 - 0x913
0x900 - 0x913
0x914 - 0x917
0x918 - 0x95f
0x960
0x961
0x962
0x963
0x964
0x965
0x966
0x967
0x968
0x969 - 0x971
0x972 - 0x973
0x974 - 0x975
0x976 - 0x977
0x978
0x979 - 0x97a
0x97b - 0x9a7
0x9a8
0x9a9 - 0x9ad
0x9ae
0x9af - 09ff
vector instruction
-
-
rep cmps mem8
-
mul mem16
idiv
mul reg16
-
imul mem16
bound
imul reg16
-
bts imm
-
div
-
idiv
-
idiv
-
btr imm
-
mfence
-
Table 4: Truncated microcode ROM heat map.
USENIX Association
26th USENIX Security Symposium    1177
In Section 5.2 we presented the microcode instruction
set structure, which is one major result of our reverse
engineering effort. We found four operation classes that
separate operations of different domains. The operation
type determines the exact operation such as add or mul.
Our collection of operation types and their encodings are
listed in Table 5.
Op Class
RegOp
RegOp
RegOp
RegOp
RegOp
RegOp
RegOp
RegOp
RegOp
RegOp
RegOp
RegOp
RegOp
RegOp
RegOp
RegOp
RegOp
RegOp
SpecOp
SpecOp
LdOp
StOp
Mnem
add
or
adc
sbb
and
sub
xor
cmp
test
rll
rrl
sll
srl
mov
mul
imul
bswap
not
writePC
branchCC
ld
st
Encoding
000000000
000000001
000000010
000000011
000000100
000000101
000000110
000000111
000001000
000010000
000010001
000010100
000010101
001100000
001110000
001110001
111000000
111110101
001000000
0101CCCCC
001111111
101010000
Table 5: Collection of microcode operation types.
The microinstruction structure provides two dedicated
register ﬁelds. One additional register ﬁeld can be un-
locked by enabling register mode, which replaces the
16-bit immediate ﬁeld. The register ﬁelds can encode a
number of registers including x86 general-purpose reg-
isters and microcode registers. The microcode registers
cannot be accessed by x86 instructions. The contents
of the microcode registers are only persistent while one
macroinstruction is decoded. Most of the microcode regis-
ters serve as general-purpose space for immediate values.
However, special microcode registers exist that hold the
next decode program counter (pcd) or always read as zero
(zerod). We listed the microcode registers with mnemon-
ics and encoding in Table 6.
Size
Encoding
00
al
cl
dl
bl
ah
ch
dh
bh
t1l
t2l
t3l
t4l
t1h
t2h
t3h
t4h
regmb
regb
pcb
zerob
01
ax
cx
dx
bx
sp
bp
si
di
t1w
t2w
t3w
t4w
t5w
t6w
t7w
t8w
regmw
regw
pcw
zerow
10
eax
ecx
edx
ebx
esp
ebp
esi
edi
t1d
t2d
t3d
t4d
t5d
t6d
t7d
t8d
regmd
regd
pcd
zerod
11
rax
rcx
rdx
rbx
rsp
rbp
rsi