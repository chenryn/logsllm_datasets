```  
And second, we can output the index tree itself:  
```  
demo=# select tid, n, level, tid_ptr, prefix, leaf_value  
from spgist_print('airports_coordinates_quad_idx') as t(  
  tid tid,  
  allthesame bool,  
  n int,  
  level int,  
  tid_ptr tid,  
  prefix point,    -- prefix type  
  node_label int,  -- label type (unused here)  
  leaf_value point -- list value type  
)  
order by tid, n;  
   tid   | n | level | tid_ptr |      prefix      |    leaf_value  
---------+---+-------+---------+------------------+------------------  
 (1,1)   | 0 |     1 | (5,3)   | (-10.220,53.588) |  
 (1,1)   | 1 |     1 | (5,2)   | (-10.220,53.588) |  
 (1,1)   | 2 |     1 | (5,1)   | (-10.220,53.588) |  
 (1,1)   | 3 |     1 | (5,14)  | (-10.220,53.588) |  
 (3,68)  |   |     3 |         |                  | (86.107,55.270)  
 (3,70)  |   |     3 |         |                  | (129.771,62.093)  
 (3,85)  |   |     4 |         |                  | (57.684,-20.430)  
 (3,122) |   |     4 |         |                  | (107.438,51.808)  
 (3,154) |   |     3 |         |                  | (-51.678,64.191)  
 (5,1)   | 0 |     2 | (24,27) | (-88.680,48.638) |  
 (5,1)   | 1 |     2 | (5,7)   | (-88.680,48.638) |  
 ...  
```  
But keep in mind that "spgist_print" outputs not all leaf values, but only the first one from the list, and therefore shows the structure of the index rather than its full contents.  
## Example: k-dimensional trees  
For the same points in the plane, we can also suggest another way to partition the space.  
Let's draw a horizontal line through the first point being indexed. It splits the plane into two parts: upper and lower. The second point to be indexed falls into one of these parts. Through this point, let's draw a vertical line, which splits this part into two ones: right and left. We again draw a horizontal line through the next point and a vertical line through yet the next point, and so on.  
All internal nodes of the tree built this way will have only two child nodes. Each of the two references can lead either to the internal node that is next in the hierarchy or to the list of leaf nodes.  
This method can be easily generalized for k-dimensional spaces, and therefore, the trees are also called k-dimensional (k-D trees) in the literature.  
Explaining the method by example of airports:  
![pic](20201128_01_pic_008.png)  
First we split the plane into upper and lower parts...  
![pic](20201128_01_pic_009.png)  
Then we split each part into left and right parts...  
![pic](20201128_01_pic_010.png)  
And so on until we get the final partitioning.  
To use a partitioning just like this, we need to explicitly specify the operator class "kd_point_ops" when creating an index.  
```  
postgres=# create index points_kd_idx on points using spgist(p kd_point_ops);  
```  
This class includes exactly the same operators as the "default" class "quad_point_ops".  
### Internals  
When looking through the tree structure, we need to take into account that the prefix in this case is only one coordinate rather than a point:  
```  
demo=# select tid, n, level, tid_ptr, prefix, leaf_value  
from spgist_print('airports_coordinates_kd_idx') as t(  
  tid tid,  
  allthesame bool,  
  n int,  
  level int,  
  tid_ptr tid,  
  prefix float,    -- prefix type  
  node_label int,  -- label type (unused here)  
  leaf_value point -- list node type  
)  
order by tid, n;  
   tid   | n | level | tid_ptr |   prefix   |    leaf_value  
---------+---+-------+---------+------------+------------------  
 (1,1)   | 0 |     1 | (5,1)   |     53.740 |  
 (1,1)   | 1 |     1 | (5,4)   |     53.740 |  
 (3,113) |   |     6 |         |            | (-7.277,62.064)  
 (3,114) |   |     6 |         |            | (-85.033,73.006)  
 (5,1)   | 0 |     2 | (5,12)  |    -65.449 |  
 (5,1)   | 1 |     2 | (5,2)   |    -65.449 |  
 (5,2)   | 0 |     3 | (5,6)   |     35.624 |  
 (5,2)   | 1 |     3 | (5,3)   |     35.624 |  
 ...  
```  
## Example: radix tree  
We can also use SP-GiST to implement a radix tree for strings. The idea of a radix tree is that a string to be indexed is not fully stored in a leaf node, but is obtained by concatenating the values stored in the nodes above this one up to the root.  
Assume, we need to index site URLs: "postgrespro.ru", "postgrespro.com", "postgresql.org", and "planet.postgresql.org".  
```  
postgres=# create table sites(url text);  
postgres=# insert into sites values ('postgrespro.ru'),('postgrespro.com'),('postgresql.org'),('planet.postgresql.org');  
postgres=# create index on sites using spgist(url);  
```  
The tree will look as follows:  
![pic](20201128_01_pic_011.png)  
The internal nodes of the tree store prefixes common to all child nodes. For example, in child nodes of "stgres", the values start with "p" + "o" + "stgres".  
Unlike in quadtrees, each pointer to a child node is additionally labeled with one character (more exactly, with two bytes, but this is not so important).  
"text_ops" operator class supports B-tree-like operators: "equal", "greater", and "less":  
```  
postgres=# select amop.amopopr::regoperator, amop.amopstrategy  
from pg_opclass opc, pg_opfamily opf, pg_am am, pg_amop amop  
where opc.opcname = 'text_ops'  
and opf.oid = opc.opcfamily  
and am.oid = opf.opfmethod  
and amop.amopfamily = opc.opcfamily  
and am.amname = 'spgist'  
and amop.amoplefttype = opc.opcintype;  
     amopopr     | amopstrategy  
-----------------+--------------  
 ~=~(text,text) |            4  
 ~>~(text,text)  |            5  
 =(text,text)   |           14  
 >(text,text)    |           15  
(9 rows)  
```  
The distinction of operators with tildes is that they manipulate bytes rather than characters.  
Sometimes, a representation in the form of a radix tree may turn out to be much more compact than B-tree since the values are not fully stored, but reconstructed as the need arises while descending through the tree.  
Consider a query: ```select * from sites where url like 'postgresp%ru'```. It can be performed using the index:  
```  
postgres=# explain (costs off) select * from sites where url like 'postgresp%ru';  
                                  QUERY PLAN                                    
------------------------------------------------------------------------------  
 Index Only Scan using sites_url_idx on sites  
   Index Cond: ((url ~>=~ 'postgresp'::text) AND (url ~<~ 'postgresq'::text))  
   Filter: (url ~~ 'postgresp%ru'::text)  
(3 rows)  
```  
Actually, the index is used to find values that are greater or equal to "postgresp", but less than "postgresq" (Index Cond), and then matching values are chosen from the result (Filter).  
First, the consistency function must decide to which child nodes of "p" root we need to descend. Two options are available: "p" + "l" (no need to descend, which is clear even without diving deeper) and "p" + "o" + "stgres" (continue the descent).  
For "stgres" node, a call to the consistency function is needed again to check "postgres" + "p" + "ro." (continue the descent) and "postgres" + "q" (no need to descend).  
For "ro." node and all its child leaf nodes, the consistency function will respond "yes", so the index method will return two values: "postgrespro.com" and "postgrespro.ru". One matching value will be selected of them at the filtering stage.  
![pic](20201128_01_pic_012.png)  
### Internals  
When looking through the tree structure, we need to take data types into account:  
```  
postgres=# select * from spgist_print('sites_url_idx') as t(  
  tid tid,  
  allthesame bool,  
  n int,  
  level int,  
  tid_ptr tid,  
  prefix text,         -- prefix type  
  node_label smallint, -- label type  
  leaf_value text      -- leaf node type  
)  
order by tid, n;  
```  
## Properties  
Let's look at the properties of SP-GiST access method (queries were provided earlier):  
```  
 amname |     name      | pg_indexam_has_property  
--------+---------------+-------------------------  
 spgist | can_order     | f  
 spgist | can_unique    | f  
 spgist | can_multi_col | f  
 spgist | can_exclude   | t  
```  
SP-GiST indexes cannot be used for sorting and for support of the unique constraint. Additionally, indexes like this cannot be created on several columns (unlike GiST). But it is permitted to use such indexes to support exclusion constraints.  
The following index-layer properties are available:  
```  
     name      | pg_index_has_property  
---------------+-----------------------  
 clusterable   | f  
 index_scan    | t  
 bitmap_scan   | t  
 backward_scan | f  
```  
The difference from GiST here is that clustering is impossible.  
And eventually the following are column-layer properties:  
```  
        name        | pg_index_column_has_property   
--------------------+------------------------------  
 asc                | f  
 desc               | f  
 nulls_first        | f  
 nulls_last         | f  
 orderable          | f  
 distance_orderable | f  
 returnable         | t  
 search_array       | f  
 search_nulls       | t  
```  
Sorting is not supported, which is predictable. Distance operators for search of nearest neighbors are not available in SP-GiST so far. Most likely, this feature will be supported in future.  
- It is supported in upcoming PostgreSQL 12, the patch by Nikita Glukhov.  
SP-GiST can be used for index-only scan, at least for the discussed operator classes. As we have seen, in some instances, indexed values are explicitly stored in leaf nodes, while in the other ones, the values are reconstructed part by part during the tree descent.  
## NULLs  
Not to complicate the picture, we haven't mentioned NULLs so far. It is clear from the index properties that NULLs are supported. Really:  
```  
postgres=# explain (costs off)  
select * from sites where url is null;  
                  QUERY PLAN                    
----------------------------------------------  
 Index Only Scan using sites_url_idx on sites  
   Index Cond: (url IS NULL)  
(2 rows)  
```  
However, NULL is something foreign for SP-GiST. All operators from "spgist" operator class must be strict: an operator must return NULL whenever any of its parameters is NULL. The method itself ensures this: NULLs are just not passed to operators.  
But to use the access method for index-only scan, NULLs must be stored in the index anyway. And they are stored, but in a separate tree with its own root.  
NULL被存储在独立的index page中: 因为所有的spgist opc函数必须是strict的, 也就是说输入null返回也是null, null tuples(rows)没有必要和spgist tree放在一起.  (可以看看function的strict含义, 即不处理参数null, 只要输入了null参数, 即刻返回结果null).   
## Other data types  
In addition to points and radix trees for strings, other methods based on SP-GiST are also implemented PostgreSQL:  
- "box_ops" operator class provides a quadtree for rectangles. Each rectangle is represented by a point in a four-dimensional space, so the number of quadrants equals 16. An index like this can beat GiST in performance when there are a lot of intersections of the rectangles: in GiST it is impossible to draw boundaries so as to separate intersecting objects from one another, while there are no such issues with points (even four-dimensional).  
- "range_ops" operator class provides a quadtree for intervals. An interval is represented by a two-dimensional point: the lower boundary becomes the abscissa, and the upper boundary becomes the ordinate.  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")