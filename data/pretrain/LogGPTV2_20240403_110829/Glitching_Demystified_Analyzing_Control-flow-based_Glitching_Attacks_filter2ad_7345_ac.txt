scanned all of the possible glitching parameters (i.e., the full
range of possible widths and offsets) for each clock cycle in
question. When compiled, each experiment takes up to 8 clock
cycles (the branch instruction can take between 1 and 3 clock
cycles). Thus, we varied our clock-cycle offset between 0 and
7, and for each clock cycle ranged the width and offset of the
glitch (i.e., [−49%, 49%] × [−49%, 49%]), resulting in 9,801
glitching attempts per clock cycle. The results of these three
experiments, along with value observed in the comparison
register, can be seen in Table I.
Our
results only partially corroborate our hypothesis,
with while (!a) being the most vulnerable (0.705% suc-
cess rate) and the other two achieving comparable success
rates (0.347% and 0.449%, respectively). Surprisingly,
the
case where a was initialized to 1, and the condition was
while(a) was the most resilient
to glitching. However,
after examining exactly how the glitches were succeeding, a
different story emerged. The assembly code for each case,
along with the corresponding clock cycles, is also shown in
each table. Since the processor being glitched has a three-
stage pipeline, it is difﬁcult to determine which instruction,
and which portion of the pipeline was affected by the glitch,
but the location of the glitch at least bounds the glitch’s effects.
For example, the initial clock cycles (0 through 4), which
set the values, appeared to be more susceptible to glitching
in the simple comparison cases (i.e., !a and a) than in the
complex comparison case. This is likely attributed to the fact
that the underlying assembly instructions changed as a result
of the comparison (i.e., during the fetch stage). But the fact
that the instructions have fewer glitchable clock cycles is still
signiﬁcant. In fact, the case for while(!a) by far had the
most data corruptions that resulted in the branch condition
being satisﬁed, as any non-zero value would sufﬁce.
To explain some of the values that were observed in the
resulting comparison register, we attached a JTAG debugger
to the board and examined the state of the system before the
loop was entered. For every case, 0x20003FE8 is the value
of SP, 0x48000028 and is the GPIO address that was written
to. Thus, 0x40007FD7 is likely a mix of the GPIO address
and some corruption (Table Ia). Similarly, for the while(a)
case, 0x20003FF6 is likely a mix of SP and some corruption
(Table Ib). Interesting, in the while(a!=0xD3B9AEC6)
case, 2 of the glitches resulted in the comparison register, R2,
being correctly set to the unlikely value of 0xD3B9AEC6,
which is not on the stack, but is only stored as intermediate
(Table Ic). This must mean that
the LDR instruction was
corrupted to load the valid into the wrong register. Similarly,
the various 0x4 values are likely a residual from the address
in the register during a load. We were unable to identify any
obvious connections to the other values stored in the registers,
and can only assume that they are attributed to random ﬂips.
B. Locating Optimal Parameters
We also investigated the best case scenario for glitching an
unprotected conditional branch. In this experiment, we sought
to identify glitch parameters that would have a 100% success
rate. To achieve this, our algorithm starts by scanning our
glitching parameters (i.e., target offset, width, and offset) with
a 10 cycle clock glitch, which encompasses every instruction
in the while loop. Once successful parameters are identiﬁed,
the algorithm then tests each individual clock cycle within the
10 clock-cycle range and recursively increases its precision
10 ∗ depth) until a 100% success rate (10 out of 10
(i.e.,
attempts) is achieved. In fact, this algorithm proved to be
quite effective, locating the optimal parameters when attacking
a while(a) loop in less than 59 minutes. Indeed,
the
algorithm achieved 7,031 successful glitches out of 36,869 in
its search for when using val != 0 as the comparator. When
applied to a while(a!=0xD3B9AEC6) loop (i.e., numbers
with large Hamming distance), the algorithm converged in 16
minutes with 901 successful glitches.
1
C. Multi-glitch Attacks
Previous work has proposed implementing redundant checks
to thwart glitching, which is based on the assumption that
successfully glitching multiple instructions is a signiﬁcant
technical barrier for attackers [16], [77]. Indeed, multi-glitches
are signiﬁcantly more difﬁcult in practice and, in some in-
stances, can be impossible due to physical constraints. For
example, the time required to recharge a capacitor could be
greater than the time needed for the two glitches, which would
Cycle
while(!a)
Partial Full
12
2
-
87
211
36
17
22
387
77
0
20
1
2
2
124
3
326
4
166
5
161
6
167
7
Total 1043
while(a)
Partial Full
24
-
-
-
-
2
2
25
53
83
19
1
-
1
30
49
146
329
23
2
-
-
-
47
136
116
324
Full
7
-
-
-
-
36
99
60
202
TABLE II: The number of successful partial and multi-glitch
attacks against three different branch guards implemented as
inﬁnite while loops
while(a!=0xD3B9AEC6)
Partial
Total (%) 1.330% 0.494% 0.420% 0.068% 0.413%
0.258%
prohibit EM or voltage glitching. Moreover, many systems
have internal clocks, which thwart clock glitching, leaving
these more-bounded glitching techniques as the only options in
practice. We constructed an experiment to ﬁnd the upper bound
on the effectiveness of triggering an identical glitch twice in
a row (i.e., the ideal condition for an attacker as the same
tuning parameters should work for both glitches) using clock
glitching. We used the same comparisons that we used in our
single glitch scenarios, but now with the trigger being reset,
triggered, and a second glitch inserted (i.e., two identical loops
back-to-back). We recorded the number of successful partial
glitches (i.e., the ﬁrst glitch was successful but the second
was not) as well successful multi-glitches (i.e., both glitches
worked and the execution skipped both branch conditions).
The results from these experiments can be seen in Table II.
It is clear that multi-glitching is signiﬁcantly more difﬁcult
in practice than a single glitch. The partial glitch success
rates (i.e., only the ﬁrst glitch succeeded) are similar to
those in our previous experiments: 1.330221%, 0.419600%,
and 0.413223%, while the multi-glitch success rates (i.e., the
second glitch was also successful) were signiﬁcantly lower:
0.493572%, 0.067595%, and 0.257627% respectively. Requir-
ing a multi-glitch reduced the probability of a successful glitch
by factors of 6×, while(!a), 3×, while(a), and 1.6×,
while(a!=0xD3B9AEC6). While these results may seem
higher than previous work would indicate, this experiment was
constructed to present the best case scenario for a multi-glitch.
In practice, these factors would be signiﬁcantly higher, since
the attacker would not have 2 perfect triggers, the comparisons
would likely not be identical, and there are numerous physical
limitations to generating multiple glitches in rapid succession.
The large gap between partial glitches and successful multi-
glitches is particularly interesting. This discrepancy leaves the
potential to not only make glitching more difﬁcult but to detect
a glitching attempt, as a partial glitch introduces a logical
impossibility, but would not skip the instrumented checks.
D. Long Glitch Attacks
While the multi-glitch results are encouraging, clock glitch-
ing permits an even more powerful attack. Speciﬁcally, an
attacker can inject a glitch at every clock cycle corrupting
multiple contiguous instructions. Thus, we also tested the
efﬁcacy of a long glitch attack (i.e., a glitch that is inserted
for multiple clock cycles). In this experiment, we started
by glitching 10 contiguous clock cycles (i.e., the minimum
number of clock cycles the two loops could possibly be
completed in), and varied the clock cycles up to 20. For
each number of repeated clock cycles, we varied the width
and offset of the glitch in the same way as our previous
experiments (9,801 glitching attempts per clock cycle range).
Despite the potential power of this attack, we observed
mixed results (see Table III). The condition that was previously
the most vulnerable, while(!a) faired much better against
this attack, with far fewer successful glitches observed. We
hypothesize that most successful glitching parameters, which
disproportionately affect clock cycle 4 (i.e.,
the compare
instruction), are simultaneously corrupting the instructions
before the comparator instructions and satisfying the exit
condition. In the multi-glitch case the register would have
contained 0, but in the long glitch case, it is likely that the
subsequent load was also glitched, disrupting the ideal con-
ditions for the previously observed single-clock-cycle attacks.
Conversely, the while(a) case appeared to be signiﬁcantly
more susceptible to long glitch attacks, with over a 10×
increase in the success rate (i.e., from 0.068% to 0.7%). We
hypothesize that glitching so many load instructions could
cause the various load instructions to fail, which would write
0 into the register and satisfying the exit condition. The higher
number of success between 10 and 12 cycle glitches appears
to support this claim, as after 12 clock cycles, the glitch
would start to affect the compare and branch instructions of
the second loop.
The lack of successes for the while(a!=0xD3B9AEC6)
case coincides with our hypothesis that a glitch which simply
changes the value in the register is unlikely to succeed. It
appears that successful glitches against this case are corrupting
the comparison instruction, the branch instruction, or the actual
value loaded. In a multi-glitch scenario, the targeted glitch was
affecting the same clock cycle both times, against identical
code (e.g., a branch condition). However, in the long glitch
case, there are other instructions in the way that will also
get glitched, making it exceedingly unlikely that both of the
compare and branch instructions would be bypassed without
irrecoverable corruption.
VI. GLITCHING DEFENSES
While many glitching defenses have been proposed, few
have been implemented, and we are unaware of any tool
for generally applying these techniques. Thus, we present
GLITCHRESISTOR, the ﬁrst automated, open-source tool for
implementing glitching defenses. GLITCHRESISTOR was im-
plemented using the LLVM Project to modify both the source
and compiled code (Clang and LLVM, respectively). This
enables GLITCHRESISTOR to support multiple architectures
with relatively low overhead. Indeed, many of the defenses
must be implemented as a compiler pass, since implementing
TABLE III: The number of successful long glitches against
three unique branch guards implemented as two subsequent
while loops, obtained by attempting all glitch offsets, widths,
and number of clock cycles using a powerful clock glitch
Cycles while(!a) while(a) while(a!=0xD3B9AEC6)
0-10
0-11
0-12
0-13
0-14
0-15
0-16
0-17
0-18
0-19
0-20
20
19
6
7
9
6
6
7
9
9
11
109
96
140
92
55
66
74
54
62
50
46
52
787
35
20
8
6
8
7
4
4
6
5
4
107
Total
Total (%) 0.101% 0.730%
0.0992%
them in source code would result in the compiler optimizing
them away (i.e., because they appear as logically impossible
or dead code). In this work, we only focused on the ARM