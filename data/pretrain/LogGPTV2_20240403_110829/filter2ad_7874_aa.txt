## 前言
最近spring爆出了一个可以配合tomcat getshell的漏洞，spring4shell,
在查看网上一些文章对此漏洞的分析时，有师傅说这个漏洞是对cve-2010-1622的绕过。所以本篇文章就带大家复现下这个古老的漏洞，下篇文章会分析下CVE-2022-22965漏洞的利用原理。
## cve-2010-1622 漏洞影响版本
spring版本：
    3.0.0 to 3.0.2
    2.5.0 to 2.5.6.SEC01 (community releases)
    2.5.0 to 2.5.7 (subscription customers)
tomcat  t0 = Class.class;
            Class t1 = t0.getClass();
            Class t2 = Class.forName("java.lang.Class");
            System.out.println(t0);
            System.out.println(t1);
            System.out.println(t2);
        }
    }
输出结果：
也就是说当我们获取了一个类的Class对象，就可以获取这个类的相关信息，如属性，方法等，反射正是基于这点来实现的。
### java bean
网上解释java bean是什么的很多，但都有点复杂，其实在java中某个类只要符合以下四个条件就可以称之为java bean.
1、所有属性为private  
2、提供默认构造方法(例如无参构造)  
3、提供getter和setter  
4、实现serializable接口
例如下面这个Person类就是一个java bean
    /*创建 Person无参构造方法 */
    public class Person {
    /*定义四个类型数据 身份证id 姓名  年龄 性别*/
      String sfid;
      String name;
      int age;
      String sex;
       /*无参构造*/
      public Person() {
      }
      public Person(String sfid,String name,int age,String sex) {
        this.sfid=sfid;
        this.name=name;
        this.age=age;
        this.sex=sex;
      }
      /*获取 get  set */
      public String getSfid() {
        return sfid;
      }
      public void setSfid(String sfid) {
        this.sfid = sfid;
      }
      public String getName() {
        return name;
      }
      public void setName(String name) {
        this.name = name;
      }
      public int getAge() {
        return age;
      }
      public void setAge(int age) {
        this.age = age;
      }
      public String getSex() {
        return sex;
      }
      public void setSex(String sex) {
        this.sex = sex;
      }
    }
**java bean 中的内省 introspector**
内省(IntroSpector)是Java语言对JavaBean 类属性、事件的一种处理方法。
例如类A中有属性name,那我们可以通过getName,setName 来得到其值或者设置新的值。 通过getName/setName
来访问name属性，这就是默认的规则。
Java中提供了一套API 用来访问某个属性的getter/setter方法，这些API存放于包java.beans 中。
一般的做法是通过类Introspector的getBeanInfo方法获取某个对象的BeanInfo信息,然后通过BeanInfo来获取属性的描述器(PropertyDescriptor),通过这个属性描述器就可以获取某个属性对应的getter/setter方法,然后我们就可以通过反射机制来调用这些方法。
例如，User类如下：
    public class User {
        private String name;
        private int age;
        public User(String name, int age) {
            this.name = name;
            this.age = age;
        }
        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
        public int getAge() {
            return age;
        }
        public void setAge(int age) {
            this.age = age;
        }
    }
通过 Introspector 来获取User类中的属性
    import java.beans.*;
    public class hello {
        public static void main(String[] args) throws IntrospectionException {
            // 获取整个Bean的信息
            // User user = new User("zhangsan", 21);
            // BeanInfo beanInfo= Introspector.getBeanInfo(user.getClass());
            BeanInfo beanInfo = Introspector.getBeanInfo(User.class);
            System.out.println("所有属性描述：");
            // 获取所有的属性描述
            PropertyDescriptor[] pds = beanInfo.getPropertyDescriptors();
            for (PropertyDescriptor propertyDescriptor : pds) {
                System.out.println(propertyDescriptor.getName());
            }
            System.out.println("所有方法描述：");
            for (MethodDescriptor methodDescriptor : beanInfo.getMethodDescriptors()) {
                System.out.println(methodDescriptor.getName());
                // Method method = methodDescriptor.getMethod();
            }
        }
    }
输出结果：
可以看到运行结果中不但含有User的Name和Age属性，还有一个名为class的属性，并且在这个属性中还有getClass()的方法，实际上Java
Object 类是所有类的父类，也就是说 Java 的所有类都继承了 Object，子类可以使用 Object
的所有方法，这里的class属性就是从Object继承的getClass()方法带来的。
再看下 `Class` 对象内省可以获取那些属性和方法。
    BeanInfo beanInfo = Introspector.getBeanInfo(Class.class);
结果为：
这里重点关注写classLoader属性和getClassLoader方法。
### spring bean
Spring Bean是事物处理组件类和实体类（POJO）对象的总称，是能够被实例化、能够被spring容器管理的java对象。
可以把spring bean理解为java bean的增强版，spring bean是由 Spring IoC 容器管理的，bean
是一个被实例化，组装，并通过 Spring IoC 容器所管理的对象。这些 bean
是由用容器提供的配置元数据创建的,在spring中可以由xml配置文件来创建bean,也就是创建所需要的对象。
例如，在xml文件中配置如下的spring bean
在spring中就相当于调用了如下的代码：