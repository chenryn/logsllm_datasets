# 广州强网杯pwn_mini WP
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
这道题目是广州强网杯的一道题目，利用方式比较巧妙，题目给了两个字节溢出、和一个任意地址写，通过这些漏洞可以有一些利用的方法，但是有一种方法是很巧妙的，也是出题人想让我们利用的方式，程序本身预置了后门函数，后门函数以`test`身份重启了自身，然后exit了，而`test`身份是有一个任意地址写的。
## 分析
程序经过ida分析后，发现程序有两个参数运行，一个是`test`，一个`real`，test会有一个任意地址写，real会进入主程序。test任意写如下：
    void __noreturn sub_1CB0()
    {
      char *s[7]; // [rsp+0h] [rbp-38h] BYREF
      s[1] = (char *)__readfsqword(0x28u);
      puts("[+] Test remote IO.");
      __printf_chk(1LL, "Where: ");
      s[0] = 0LL;
      input(s, 8LL);
      __printf_chk(1LL, "Input: ");
      input(s[0], 144LL);
      __printf_chk(1LL, "Output: ");
      puts(s[0]);
      exit(0);
    }
real主程序如下：
    void __fastcall __noreturn main(int a1, char **a2, char **a3)
    {
      const char *v4; // rbp
      const char *v5; // r15
      int v6; // ebx
      __int128 buf; // [rsp+110h] [rbp-58h] BYREF
      unsigned __int64 v8; // [rsp+128h] [rbp-40h]
      v8 = __readfsqword(0x28u);
      if ( a1 != 2 )
        goto LABEL_2;
      sub_16C0();
      v4 = a2[1];
      if ( !strcmp(v4, "test") )
        sub_1CB0();
      if ( strcmp(v4, "real") )
      {
    LABEL_2:
        puts("Invalid.");
        exit(0);
      }
      sub_1770();
      buf = 0LL;
      *(_QWORD *)&::buf[48] = a3;  //envp
      *(_QWORD *)&::buf[56] = a2;
      __printf_chk(1LL, "User: ");
      input(&buf, 13LL);
      if ( !strcmp((const char *)&buf, "Administrator") )
      {
        puts("Login failed!");
        exit(0);
      }
      puts("Login successful!");
      while ( 1 )
      {
    LABEL_7:
        v5 = aAddCard;
        v6 = 0;
        sub_1C20();                                 // menu 
        input(::buf, 50LL);                         // 2 bytes overflow can overflow envp 
        while ( strcmp(::buf, v5) )
        {
          ++v6;
          v5 += 16;
          if ( v6 == 6 )
          {
            puts("Illegal.");
            goto LABEL_7;
          }
        }
        off_4080[v6]();                             // 函数的数组
      }
    }
主程序将a3(envp)放到了buf[48]的位置，但是在输入buf的时候大小是50，存在2字节溢出可以覆盖envp，menu所涉及的函数如下
    .data:0000000000004080 off_4080        dq offset add_card      ; DATA XREF: main+102↑o
    .data:0000000000004088                 dq offset Remove_Card
    .data:0000000000004090                 dq offset Write_Card
    .data:0000000000004098                 dq offset Read_Card
    .data:00000000000040A0                 dq offset Bye_bye
    .data:00000000000040A8                 dq offset sub_15C0      ; gift
    .data:00000000000040A8 _data           ends
add函数如下：
    int add_card()
    {
      int v0; // ebx
      _QWORD *i; // rax
      int v2; // ebp
      __int64 v3; // rax
      void *v4; // rax
      int *v5; // rbx
      unsigned __int64 v7; // [rsp+8h] [rbp-20h]
      v0 = 0;
      v7 = __readfsqword(0x28u);
      for ( i = &unk_4140; i[1] || *(_DWORD *)i; i += 2 )
      {
        if ( ++v0 == 16 )
          return __readfsqword(0x28u) ^ v7;
      }
      __printf_chk(1LL, "Size: ");
      v2 = input_size();
      if ( (unsigned int)(v2 - 17) > 0x4F )
        return __readfsqword(0x28u) ^ v7;
      v4 = calloc(1uLL, v2);
      v5 = (int *)((char *)&unk_4140 + 16 * v0);
      *((_QWORD *)v5 + 1) = v4;
      if ( !v4 )
        exit(-1);
      *v5 = v2;
      __printf_chk(1LL, "Card: ");
      input(*((void **)v5 + 1), *v5);
      LODWORD(v3) = puts("OK.");
      return v3;
    }
    __int64 input_size()
    {
      char v1[24]; // [rsp+0h] [rbp-28h] BYREF
      unsigned __int64 v2; // [rsp+18h] [rbp-10h]
      v2 = __readfsqword(0x28u);
      *(_OWORD *)v1 = 0LL;
      *(_QWORD *)&v1[16] = 0LL;
      input(v1, 25LL);                              // 1 byte overflow
      return strtol(v1, 0LL, 10);
    }
这里input size有一字节溢出。此外程序还有一个隐藏的gift函数，可以泄露栈地址的最后两个字节
    unsigned __int64 sub_15C0()
    {
      int v1; // ebp
      int v2; // eax
      int v3; // edx
      int buf; // [rsp+4h] [rbp-24h] BYREF
      unsigned __int64 v5; // [rsp+8h] [rbp-20h]
      v5 = __readfsqword(0x28u);
      if ( !unk_4120 )
      {
        unk_4120 = 1;
        v1 = open("/dev/urandom", 0);