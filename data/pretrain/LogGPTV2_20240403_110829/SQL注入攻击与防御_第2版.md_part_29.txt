SQL Server 2008 SP1 QFE(MS11-049 patched)
10.00.2840
SQL Server 2008 SP1 GDR(MS11-049 patched)
10.00.2531
SQL Server 2008 SP1
10.00.1600
SQL Server 2008 RTM
9.00.5292
SQL Server 2005 SP4 QFE(MS11-049 patched)
9.00.5057
SQL Server 2005 SP4 GDR(MS11-049 patched)
9.00.5000
SQL Server 2005 SP4
9.00.4340
SQL Server 2005 SP3 QFE(MS11-049 patched)
9.00.4060
SQL Server 2005 SP3 GDR(MS11-049 patched)
9.00.4035
SQL Server 2005 SP3
9.00.3310
SQL Server 2005 SP2 QFE(MS09-004 patched)
9.00.3077
SQL Server 2005 SP2 GDR (MS09-004 patched)
SQL Server 2005 SP2a
9.00.3042
SQL Server 2005 SP2
9.00.2047
SQL Server 2005 SP1
9.00.1399
SQL Server 2005 RTM
8.00.2282
SQL Server 2000 SP4 QFE(MS09-004 patched)
8.00.2055
SQL Server 2000 SP4 GDR(MS09-004 patched)
8.00.2039
SQL Server 2000 SP4
8.00.0760
SQL Server 2000 SP3
8.00.0534
SQL Server 2000 SP2
8.00.0384
SQL Server 2000 SP1
8.00.0194
SQL Server 2000 RTM
目前，BillGraziano维护着一个不断更新的、更详细的版本信息列表，其中还包含了每
个版本的精确发布日期，可以从网址htp:/www.sqlteam.com/article/sql-server-versions 访问这些
信息。
如果拥有管理员权限，那么可以使用xp_cmdshell扩展存储过程来产生延迟，它通过加载
一条需要花费特定秒数才能完成的命令来得到类似的结果。在下面的示例中，我们ping回路
(loopback)端口5秒钟：
. T*0*0*L2T S u burd, tTouspuodx*·xoqseu 3x3
128
---
## Page 143
第4章利用SQL注入
如果具有管理员访间权限，但没有启用xp_cmdshell，那么在SQLServer2005和2008 中可
以使用下面的命令轻松地启用它：
'suoredo paouepe nos,xnbuoods ox
RECONFIGURE;
GO
1',ttoqspuodx, oxnbguoode ax3
在SQLServer2000上，只须使用下面的命令即可：
exec master..8p_addextendedproc *xp_cmdshe11*, *xplog70 . d11*
在第6章中将介绍关于xp_cmdshell的更多信息，以及在各种不同情形下如何启用
xp_cmdshell.。
到目前为止，我们学习了如何针对SQLServer产生延迟，这一概念也同样适用于其他数据
库技术。例如，对于MySQL，可以使用下列查询创建一个数秒的延迟：
SELECT BENCHMARK (1000000, sha1(*b1ah*)) :
BENCHMARK函数将第二个参数描述的表达式执行由第一个参数指定的次数。它通常用
于测量服务器的性能，但对引入人为延迟也同样很有帮助。在上述示例中，我们告诉数据库将
如果使用的是5.0.12版本以上的MySQL数据库，处理起来将更加简单：
SELECT SLEEP (5) 
如果安装的是PostgreSQL数据库，并且版本在8.2以上，可以使用下面的命令：
SELECT pg_sleep (5) ;
对于较低版本的PostgreSQL数据库则略有不同，但只要你具有创建自定义函数的必要权
限，那么或许可以使用NicoLeidecker提供的技术试一试，它利用底层UNIX操作系统的 sleep
命令：
CREATE OR REPLACE FUNCTION sleep(int) RETURNS int AS */1ib/1libc,So.6′,
'sleep′ language *C' STRICT; SELECT sleep (10);
对于Oracle 面言，可以通过使用UTL_HTTP或HTTPURITYPE向一个“死的”IP地址发
送一个HTTP请求来实现相同的效果(虽然可靠性差一些)。如果指定了一个不存在侦听者的IP
地址，那么下列查询将一直等待连接直到超时：
select ut1_http.request (* http://10.0.0.1/ *) from dual;
select HTTPURITYPE (* http://10.0.0.1/ *) .getclob() from dual;
还有一种使用网络计时的方法，就是使用简单的笛卡尔积（Cartesian Product)。对4张表应
用count(*）比直接返回一个数字花费的时间要长很多。如果用户名的第一个字符为A，那么下
列查询将首先计算所有行的笛卡尔积，然后返回一个数字：
SELECT decode (substr (user, 1, 1), *A', (select count (*) from al1_
3.译者注：SHA1是由关国标准技术局(NIST)额布的国家标准，是一种应用最为广泛的哈希函数。
129
---
## Page 144
SQL注入攻击与防御（第2版）
objects, a11_objects, a11_objects, a11_objects) , 0)
很容易吧！好，请继续阅读，接下来的内容将更加有趣。
4.5.2方法2：基于错误
基于时间的方法非常灵活，它可以保证在非常困难的场景中也能发挥作用，因为它只依赖
时间而不依赖于应用输出。因此，它在纯盲(pure-blind场景中用处很大。我们将在第5章对此
作深入分析。
但基于时间的方法不适合提取多位（bit）信息。假设每一位为1或0的概率相同，我们使用
5秒作为WAITFOR的参数，那么每个查询将平均花费2.5秒来返回（加上了附加的网络延迟）
这将导致该过程费力而缓慢。可以减小传递给WAITFOR参数的值，但很可能会引入错误。率
运的是，我们还有其他技术可用，该技术根据我们寻找的位值来触发不同的响应。请看下列
查询：
http: //www.vlctim. com/products.asp?id=12/1s_srvrolemember (* sysadmin*)
is_srvrolememberO是一个 SQL ServerT-SQL函数，它返回下列值：
·1：如果用户属于指定的组。
·0：如果用户不属于指定的组。
·NULL：如果指定的组不存在。
如果用户属于sysadmin组，那么id参数将等于12/1（等于12)：因此，应用程序返回介绍
Syngress 图书的页面。如果当前用户不是sysadmin 组的成员，那么id参数的值将为 12/0（很明
显不是数字）：这将导致查询失败，应用返回一个错误。很明显，具体的错误消息会千差万别：
错误消息，后者与图4-8展示的截图类似。
victim.con very secureappficationMicrosf Inteet Explorer
k
Addes
Mp://w
VICTIM.COM
soft OLE DB Provider fer ODBC Dr
190t028 
[Microsot OOBC SOL, Sener Drive[SOL Sener[|Dide by zero emrer encourtered
/products.asp, ine 33
图4-8因除0而产生的错误消息
130
---
## Page 145
第4章利用SQL注入
该错误还可能是一个使应用失败看起来更雅观的通用HTML页面，但最基本原理是相同
的：可以根据指定位值的不同来触发不同的响应并提取位值。
可以很容易将该原理扩展到其他类型的查询。CASE语句因为这个原因而被引入，主流的
数据库服务器均支持这一语句，它可以注入现有的查询中（堆叠查询不可用时，它仍然可用)。
CASE语句的语法如下所示：
CASE WHEN condition THEN actionl ELSE action2 END
作为一个示例，我们看一下如何使用CASE语句来检查当前用户是否为sa（在电子商务应
用中)：
http:/ /www.victim.com/products asp?id=12/ (case+when+ (system_user=*sa*) +
(puo+0+st+t+ug
4.5.3方法3：基于内容
相比WAITFOR而言，基于错误的方法有个很大的优点就是速度：因为不涉及延迟问题，
所以每个请求能马上返回结果(独立于提取的位值)。缺点是会触发很多可能永远都不需要的错
误。率运的是，通常只需对该技术稍作修改就能避免错误的产生。我们以上面的URL为例，
对它稍作修改：
http: //www. victim.com/products.asp?id=12$2B (case+when+ (system_user+=+*sa*)
+then+1+eIse+0+end)
唯一差别是我们使用%2B替换了参数后面的“/”字符，%2B是“+”的URL编码（我们不
能在URL中直接使用“+”，因为它会被解析成空格）。最终将按照下列式子为d参数赋值：
id = 12 + (case when (system_user = 'sa′) then 1 else 0 end)
结果非常直观。如果执行查询的用户不是sa，那么id=12，请求将等价于：
http://ww.v1ctim.com/products.asp?1d=12
而如果执行查询的用户是sa，那么id-13，请求将等价于：
http: / /www,victim.com/products.asp?id=13
因为我们讨论的是商品类别，这两个URL可能会返回不同的项：第一个URL仍然返回
Syngress图书，第二个则可能返回一个微波炉（假设)。所以，我们可以根据返回的HTML中包
含的是Syngress字符串还是oven字符串米判断用户是否为sa。
该技术像基于错误的技术一样快，另外还有一个优点一不会触发错误，从而使该方法更
加简练。
4.5.4处理字符串
读者可能已经注意到，在前面的例子中，可注入的参数均为数字，我们使用的都是一些代
数上的技巧来触发不同的错误（不管是基于错误还是基于内容）。但很多易受到SQL注入攻击的
参数并非数字，而是字符串。幸运的是，上述技术同样适用于字符串参数，只需做小小的改动
即可。假设我们的电子商务Web站点有这样一个功能一它允许用户检索特定品牌生产的所
131
---
## Page 146
SQL注入攻击与防御（第2版）
有商品，可通过下列URL来调用该功能：
http: //www.victim.com/search.asp?brand=acme
调用该URL时，后台数据库将执行下列查询：
SELECT * FROM products WHERE brand = 'acme*
如果对brand参数稍作修改，那么会出现什么情况呢？使用字母1替换掉m，最终的URL
将如下所示：
http://www.victim.,com/search.asp?brand=acle
这个URL很可能会返回完全不同的结果：可能是一个空结果集，在大多数情况下也可能
是其他不同的内容。
不管第二个URL返回怎样的结果，只要brand参数是可注入的，就可以很容易地使用字
符串连接技术来提取数据。我们一步一步地分析这个过程。很明显，作为参数传递的字符串可
以分成两部分：
http://www.victim, com/search.asp7brand-acm*$2B*e
由于%2B是加号（“+”）的URL编码，最终查询（针对Microsof SQLServer)如下所示：
很明显，该查询等价于上一查询，所以最终的HTML页面不会发生变化。我们再进一步
分析，将参数分成三个部分：
http:/ /www.victim, com/search.asp?brand=ac'$2B*='$2B'e
可以使用charO函数来描述T-SQL中的m字符，charO函数接收一个数字作为参数并返回
与其对应的ASCII字符。由于m的ASCII值为109(16进制为0x6D)，因此我们可以对URL作
进一步修改，如下所示：
http:/ /www victim, com/search asp7brand=ac*$2Bchar (109) $2B′e
最终查询将变为：
.o, + (6ot) reuo+,oe, =puexq 3 9onpoad n . 39
该查询仍然返回与前面查询相同的结果，但现在我们有了一个可操控的数字参数，所以可
以很容易复制前面章节介绍的注入技术，提交下列请求：
http:/ /www.victim. com/search a8p?brand=ac*$2Bchar (108$2B (case+when+ (sys
tem_user+=+*sa*) +then+1+else+0+end) $2B*e
现在看起来有点复杂，不过我们可以先看一下最终查询是什么样子：
,a, + (pua o este I ueq (,es,=zesn
根据当前用户是否为sa，charO函数的参数将分别是109或108（对应返回m或1)。在前面
132
---
## Page 147
第4章利用SQL注入
的例子中，第一个连接产生的字符串为acme，第二个为acle。所以，如果用户为sa，那么最
终的URL将等价于：
http: / /www victim, com/search asp?brand=acme
否则，最终的URL将等价于：
http: / /www, victin, com/search,asp?brand=acle
这两个页面将返回不同的结果，因而现在我们有了一种更保险的方法一使用条件语句针
对字符串参数来提取数据。
4.5.5扩展攻击
到目前为止，我们介绍的例子侧重于检索只有两种取值的信息（即bi类型，例如，用户是
否为数据库管理员）。可以很容易将这种技术扩展到任意数据。很明显，因为条件语句只能检
索一个信息位（它们只能推断一个条件为真还是为假)，所以要提取的数据由多少个比特(bit）组
成，就需要使用多少条件语句。我们回到前面那个判断执行查询的用户的例子。我们现在不局
限于检查用户是否为sa，面是检索用户完整的名称。首先要做的是发现用户名的长度。可使用
下列查询实现该目的：
假设用户名为appdbuser，该查询返回9。要想使用条件语句提取该值，则需要执行二分查