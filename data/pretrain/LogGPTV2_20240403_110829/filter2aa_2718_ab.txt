# Challenges and Problems in RTP Stream Manipulation

## Correlation and Tracking
**Challenge:**
- Both RTP streams must be correlated and tracked for an individual session.

## Compressed Audio
**Problem:**
- Audio being transferred by RTP may be compressed.

**Challenge:**
- Identification of compressed audio.
- Packets containing compressed audio must either:
  - Not be used, or
  - Be decompressed, modified, and then recompressed to embed message data.

## Media Gateway Audio Modifications
**Problem:**
- Intermediary media gateways may re-encode audio, change the codec entirely, or otherwise modify the RTP audio payload.

**Challenge:**
- Identification of intermediary media gateway interference.
- Overcoming the particular type of interference.

## Audio Codec Switching
**Problem:**
- Endpoints may switch audio codecs mid-session.

**Challenge:**
- Identifying a change in audio codec.
- Creating an adaptable steganographic embedding method.

## SteganRTP
**Reference Implementation:**
- My reference implementation.
- Linux application with a windowed curses interface.
- Must be able to modify the outbound RTP stream’s packets and observe the inbound RTP stream’s packets.
- Can be paired with ARP poisoning for active Man-in-the-Middle (MITM) attacks.

## Goals
- **Steganography:** Hide the fact that covert communication is taking place.
- **Full-Duplex Communications Channel:** Compensate for unreliable transport.
- **Transparent Operation:** Whether hooking locally generated/destined packets vs. forwarded packets.
- **Simultaneous Transfer:** Multiple types of data.

## Architecture
### Endpoint
```
Endpoint A
  └── SteganRTP A
      └── SteganRTP B
          └── RTP
              └── Endpoint B
```

### MITM
```
Endpoint A
  └── SteganRTP A
      └── SteganRTP B
          └── RTP
              └── Endpoint B
```

## Process Flow
1. **Initialize**
2. **Identify RTP Session**
3. **Hook Packets**
4. **Read Packet (Inbound or Outbound)**
5. **Send Packet**
6. **Extract Data**
7. **Decrypt Data**
8. **Read Data**
9. **Valid Checksum?**
10. **Waiting Outbound Data?**
11. **Create Steg Message**
12. **Encrypt Data**
13. **Embed Data**
14. **Send Packet**
15. **Packet Handler**
16. **Timeout?**

## Identify RTP Session
- Using `libfindrtp`, one of my previous projects, which identifies RTP sessions between two endpoints.
- Identifies RTP during call setup by observing VoIP signaling traffic.
- Supports RTP session identification via SIP and Skinny signaling protocols.

## Hooking Packets
- **Linux NetFilter Hook Points:**
  - Anywhere you can insert an iptables rule: `INPUT`, `OUTPUT`, `FORWARD`, `PREROUTING`, `POSTROUTING`.
- **NetFilter User-space Queuing Agent:**
  - API for reading, writing, or passing packets destined for the QUEUE target.
- **SteganRTP:**
  - Registers itself as a user-space queuing agent for NetFilter via `libipq`.
  - Creates two rules in the NetFilter engine with targets of QUEUE:
    - Matching the Inbound RTP stream at `PREROUTING`.
    - Matching the Outbound RTP stream at `POSTROUTING`.
  - Capabilities:
    - Read packets from the queue.
    - Modify them if needed.
    - Place them back into the queue.
    - Tell the queue to accept the packet for further routing.

## Inbound Packets
- Immediately accept the packet for routing.
- Extract the message.
- Decrypt the message.
- Verify the message’s checksum.
- Send the message to the message handler.

## Outbound Packets
- Poll for data waiting to go out.
- If there isn’t any, immediately forward the RTP packet unmodified.
- Create a new message with a header based on properties of the RTP packet.
- Read as much of the waiting data as will fit in the message.
- Encrypt the message.
- Embed the message into the RTP payload cover-medium.
- Send the RTP packet.

## Session Timeout
- If no RTP packets are seen for the timeout period, all session information is dropped.
- Control returns to `libfindrtp`, which searches for a new session.

## Message Handler
- Receives all valid incoming messages.
- Performs internal state changes and administrative tasks in response to control messages such as:
  - Echo Request
  - Echo Reply
  - Resend of lost messages
  - Prep for receiving a file
  - Closing a finished file
- Receives incoming user chat data, file data, and shell data.

## Packets and Messages
- **RTP Packet Format:**
  - RTP Header
  - RTP Payload
- **Message Format:**
  - Header
  - Message Body
- **Message Header Fields:**
  - ID (32 bits): `hashword(keyhash, (Seq + Type + Len))`
  - Seq (16 bits): Message Sequence Number
  - Type (8 bits): Message Type
  - Length (8 bits): Length of remaining message data
- **Message Types:**
  - 0: Reserved
  - 1: Control
  - 10: Chat Data
  - 11: File Data
  - 12: Shell Input Data
  - 13: Shell Output Data
- **Message Type: Control:**
  - Control Type
  - Length
  - Value

© 2007 Computer Academic Underground