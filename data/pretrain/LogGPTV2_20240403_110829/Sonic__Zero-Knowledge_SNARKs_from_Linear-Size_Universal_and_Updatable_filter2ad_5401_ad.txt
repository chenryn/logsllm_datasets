0 in t(X , Y) is the left-hand side of Equation 1.
The coefficient of X
Sonic demonstrates that the constant term of t(X , Y) is zero, thus
demonstrating that our constraint system is satisfied.
6 THE BASIC SONIC PROTOCOL
Sonic is a zero-knowledge argument of knowledge that allows a
prover to demonstrate that a constraint system (described in Sec-
tion 5) is satisfied for a hidden witness (a, b, c) and for known
instance k. The instance k is uploaded into the constraint system
through the polynomial k(Y). Given a choice of r(X , Y) from Sec-
tion 5, if for random y ∈ Fp we have that the constant term of t(X , y)
is zero, the constraint system is satisfied with high probability.
Our Sonic protocol is built directly from a polynomial commit-
ment scheme and a signature of correct computation, as visualised
in Figure 1. We discuss here the basic Sonic protocol, assuming
these building blocks are in place, and provide a suitable bounded
extractable polynomial commitment scheme in Section 6.2 that we
prove secure in the AGM. In Sections 7 and 8 we discuss two differ-
ent methods of constructing the signature of correct computation,
one which gives rise to a standalone zk-SNARK and one which
achieves better practical results through the use of an untrusted
helper.
Figure 1: The basic Sonic protocol is built on top of a bounded-
extractable polynomial commitment scheme and a signature of cor-
rect computation.
Our protocol begins by having the prover construct r(X , Y) using
their hidden witness. They commit to r(X , 1), setting the maximum
degree to n. The verifier sends a random challenge y. The prover
commits to t(X , y), and our commitment scheme ensures that this
polynomial has no constant term. The verifier sends a second chal-
lenge z. The prover opens their committed polynomials to r(z, 1),
r(z, y) and t(z, y). The verifier can calculate r′(z, y) for itself from
these values and thus can check that r(z, y)r′(z, y) − k(y) = t(z, y).
Note that the coefficients of the public polynomial k(Y) are deter-
mined by the instance that the prover is claiming is in the language.
If this holds then the verifier learns that the evaluated polynomials
were computed by a prover that knows a valid witness. A more
formal description of this protocol is given in Figure 2.
The verifier’s check that the quadratic polynomial equation is
satisfied is performed in the field. This means we avoid having
proof elements on both sides of the pairing, which is useful for effi-
ciency, without contradicting Groth’s result about NILPs requiring
a quadratic constraint [45]. As a result, when batching we avoid
having to check one pairing equation per proof (pairing operations
are expensive) and can instead check one field equation per proof.
The Fiat-Shamir transformation takes an interactive argument
and replaces the verifier challenges with the output of a hash func-
tion. The idea is that the hash function will produce random-looking
outputs and therefore be a suitable replacement for the verifier. We
describe Sonic in the interactive setting where all verifier chal-
lenges are random field elements. In practice we assume that the
Fiat-Shamir heuristic would be applied in order to obtain a non-
interactive zero-knowledge argument in the random oracle model.
Theorem 6.1. Assuming the ability to extract a trapdoor for the
subverted reference string, Sonic satisfies subversion zero-knowledge.
Proof. To prove subversion zero-knowledge, we need to both
show the existence of an extractor XA that can compute a trapdoor,
and describe a SimProve algorithm that produces indistinguishable
proofs when provided with the extracted trapdoor. We do not dis-
cuss the details of SRS generation in this paper so do not prove the
existence of the extractor, but one such example can be found in
the original proof of Groth et al. [46, Lemma 4].
The simulator is given the trapdoor дα and chooses random vec-
tors a, b from Fp of length n and sets c = a · b. It computes r(X , Y),
r′(X , Y), t(X , Y) as in Section 5 where (unlike for the prover) t(X , Y)
0. The simulator then behaves
can have a non-zero coefficient in X
exactly as the prover in Figure 2 with its random polynomials.
Both the prover and the simulator evaluate дr(x,1), r(z, 1), and
r(zy, 1). This reveals 3 evaluations (some of these are in the expo-
nent). The prover has four blinders for r(X) with respect to the
powers −2n − 1,−2n − 2,−2n − 3,−2n − 4. Thus for a verifier that
obtains less than three evaluations, the prover’s polynomial is in-
distinguishable from the simulator’s random polynomial. All other
components in the proofs are either uniquely determined given the
previous components for both prover and simulator, or are calcu-
lated independently from the witness (and are chosen in the same
method by both prover and simulator).
□
Theorem 6.2. Sonic has witness extended emulation, when instan-
tiated using a secure polynomial commitment scheme and a sound
signature of correct computation.
Proof. Soundness of the signature of correct computation gives
Bounded polynomial extractability tells us that R contains the
us that s = s(z, y).
polynomial
n
d
r(X , 1) =
ri X i
i =−d,i(cid:44)−d +n
and that T contains the polynomial
τ(X) =
8
τi X i .
i =−d,i(cid:44)0
info = bp, srs, s(X , Y), k(Y), e(д, hα)
a, b, c
$←− Fp
i =1 cn+i X−2n−iY−2n−i
r(X , Y) ← r(X , Y) +4
Common input:
Prover’s input:
zkP1(info, a, b, c) (cid:55)→ R:
cn+1, cn+2, cn+3, cn+4
R ← Commit(bp, srs, n, r(X , 1))
send R
zkV1(info, R) (cid:55)→ y:
$←− Fp
send y
zkP2(y) (cid:55)→ T :
T ← Commit(bp, srs, d, t(X , y))
send T
zkV2(T) (cid:55)→ z:
$←− Fp
send z
zkP3(z) (cid:55)→ (a,Wa, b,Wb ,Wt , s, sc):
(a = r(z, 1),Wa) ← Open(R, z, r(X , 1))
(b = r(z, y),Wb) ← Open(R, yz, r(X , 1))
(t = t(z, y),Wt) ← Open(T , z, t(X , y)))
(s = s(z, y), sc) ← scP(info, s(X , Y),(z, y))
send (a,Wa, b,Wb ,Wt , s, sc)
zkV3(a,Wa, b,Wb ,Wt , s, sc) (cid:55)→ 0/1:
t ← a(b + s) − k(y)
check scV(info, s(X , Y),(z, y),(s, sc))
check pcV(bp, srs, n, R, z,(a,Wa))
check pcV(bp, srs, n, R, yz,(b,Wb))
check pcV(bp, srs, d,T , z,(t,Wt))
return 1 if all checks pass, else return 0
Figure 2: The interactive Sonic protocol to check that the prover knows a valid assignment of the wires in the circuit. The stated algorithms
describe the individual steps of each of the parties (e.g., zkVi describes the i-th step of the verifier given the output of zkPi−1), and both parties
are assumed to keep state for the duration of the interaction.
Observe that in our polynomial constraint system 3n < d (otherwise
we cannot commit to t(X , Y)), thus r(X , Y) has no −d + n term.
We show that the element T can be computed only if the circuit is
satisfied by the polynomial coefficients extracted from R. Evaluation
binding tells us that a = r(z, 1), b = r(zy, 1) = r(z, y) and the verifier
checks that t = a(b +s)−k(y) = τ(z). Suppose this holds for n +Q +1
different challenges y ∈ Fp. Then we have equality of polynomials
in Section 5 since a non-zero polynomial of degree n + Q + 1 cannot
have n + Q roots; i.e.,
r(X)(r(X , Y) + s(X , Y)) − k(Y)
has no constant term. This implies that r(X , y) defines a valid wit-
ness.
□
6.1 Efficiency
As seen in Figure 2, our prover uses two polynomial commitments
which it opens at three points. It also uses one signature of correct
computation. Two of these openings can be batched using tech-
niques we describe in Appendix C. The idea behind the batching
is that given two polynomial commitments F1 and F2, if a verifier
chooses random values r1 and r2, then an adversary can open F
r1
r2
1 F
2
only if it can also (with high probability) open F1 and F2 separately.
The polynomial k(Y) is sparse and determined by the instance, and
thus takes O(ℓ) field operations to compute.
6.2 Polynomial Commitment Scheme
Sonic uses a polynomial commitment scheme which is an adap-
tation of a scheme by Kate, Zaverucha, and Goldberg [50]. This
scheme has constant-sized proofs for any size polynomial and ver-
ification consists of checking a single pairing. We require that
the scheme is evaluation binding; i.e., given a commitment F, an
adversary cannot open F to two different evaluations v1 and v2.
Our proof of evaluation binding is directly taken from Kate et al.’s
reduction to q-SDH. However, we also require that the scheme
is bounded polynomial extractable; i.e., any algebraic adversary
that opens a commitment F knows an opening f (X) with powers
−d ≤ i ≤ max, i (cid:44) 0. Kate et al. prove only that their scheme
is “strongly correct”; i.e., if an adversary knows an opening f (X)
with polynomial degree to a commitment then f (X) has degree
bounded by d. In this sense Kate et al. are implicitly relying on
a knowledge assumption, because there is no guarantee that an
adversary that can open a commitment knows a polynomial inside
the commitment. We prove our adapted polynomial commitment
scheme secure in the algebraic group model and this proof may be
of independent interest.
Our proof uses the fact that f (X) − f (z) is divisible by (X − z),
even for Laurent polynomials. To see this observe that
ai X i − aizi
f (X) − f (z) =
=
−d
d
d
−d
i =1
ai(X − z)(X i−1 + zX i−2 + . . . zi−1) + 0a0
ai(X − z)(−z
−1
−i − z
−2
X
−i +1 − . . . − z
−i X
−1)
X
+
i =−1
Theorem 6.3. In the algebraic group model, the polynomial com-
mitment scheme in Figure 3 is evaluation binding and bounded poly-
nomial extractable under the 2d-DLOG assumption.
9
Common input:
info = bp, srs, max
f (X)
Prover’s input:
Commit(info, f (X)) (cid:55)→ F:
F ← дα x d−maxf (x)
return F
Open(info, F , z, f (X)) (cid:55)→ (f (z),W ):
w(X) ← f (X)−f (z)
X−z
W ← дw(x)
return (f (z),W )
pcV(info, F , z,(v,W )) (cid:55)→ 0/1:
check e(W , hα x)e(дvW −z , hα) = e(F , hx−d +max)
return 1 if all check passes, else return 0
Figure 3: Polynomial commitment scheme inspired by Kate et
al [50].
Proof. We closely follow the structure used by Fuchsbauer et
al. [37, Theorem 7.2]. We consider an algebraic adversary Aalg
against the security of the polynomial commitment scheme; by
definition, this means that Aalg breaks either bounded polynomial
extractability or evaluation binding; i.e., that
Advpc
bp,Aalg
≤ Advextract
bp,Aalg
+ Advbind
bp,Aalg
.
We show that
Advpc
bp,Aalg
≤ Advq-DLOG
bp,Balg
+ Advq-DLOG
bp, Calg
for adversaries Balg and Calg, which proves the theorem.
that
We start with bounded polynomial extractability, where we show
≤ Advq-DLOG
bp,Balg
.
An adversary Balg(д
mial extractability game with Aalg as follows.
Advextract
bp,Aalg
, дx , . . . , дx q) simulates the bounded polyno-
1
(1) When Aalg queries its oracle U-Os on setup, Balg chooses
random values(u1, u2) and uses its DLOG instance to gener-
ate and return an SRS with implicit randomness (u1x, u2x).
(2) When Aalg queries its oracle on update, Balg uses the
algebraic representation provided by Aalg to learn the
randomness (xi , αi) used by Aalg in generating its inter-
mediate SRSs (if any exist). It then picks new random-
ness (u′
2) and updates its own stored randomness as
(u1, u2) = (xiu′
2u2). It then uses this randomness
(consisting of its old randomness, the randomness of Aalg,
and its new randomness) to simulate the update proof. It
returns the simulated update proof and the new SRS to A.
(3) When Aalg queries its oracle on final, Balg behaves as the
(4) Balg runs (F , z, v,W ) r←− Aalg(bp, srs, max).
honest oracle.
1u1, αiu′
1, u′
From these polynomials, Balg computes the polynomial
−d +max f (X , Xα).
Q1(X , Xα) = Xα(X − z)w(X , Xα) + vXα − X
It aborts if Q1(X , Xα) = 0.
(6) Define the univariate polynomial Q′
1(X) = Q1(u1X , u2X).
Balg aborts if Q′
1(X) = 0.
(7) Balg factors Q′
1(X) to obtain its roots (of which there are at
most 4d) and checks them against the q-DLOG instance to
determine if x is among them. If so, it returns x. Otherwise
it returns ⊥.
Now let us analyse the probability that Aalg breaks bounded
polynomial extractability; i.e., that
f (X , Xα) (cid:44) Xα X d−max(cid:169)(cid:173)(cid:171) max
i =−d,i(cid:44)0
ai X i(cid:170)(cid:174)(cid:172) ,
(5) The randomness r determines multivariate polynomials
f (X , Xα) = fx(X) + Xα fα(X),
w(X , Xα) = wx(X) + Xα wα(X),
such that
F = дf (xu1,xu2) and W = дw(xu1,xu2)
.
but that Balg does not return the target x. This happens if (1) Balg
aborts in Step 5, (2) Balg aborts in Step 6, or (3) if x is not amongst
the roots obtained in Step 7. We consider these three scenarios in
turn.
In Step 5, if Q1(X , Xα) = 0 then