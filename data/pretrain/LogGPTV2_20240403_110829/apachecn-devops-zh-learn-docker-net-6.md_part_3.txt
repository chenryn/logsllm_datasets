1.  Provision a VirtualBox virtual machine called `mh-keystore`.
    调配新虚拟机时，该过程会将 Docker 引擎添加到主机。领事实例将使用 Docker Hub 帐户([https://hub.docker.com/r/progrium/consul/](https://hub.docker.com/r/progrium/consul/))中的领事映像:
    ```
    $ docker-machine create -d virtualbox mh-keystore
    Running pre-create checks...
    Creating machine...
    (mh-keystore) Creating VirtualBox VM...
    (mh-keystore) Creating SSH key...
    (mh-keystore) Starting VM...
    Waiting for machine to be running, this may take a few minutes...
    Machine is running, waiting for SSH to be available...
    Detecting operating system of created instance...
    Detecting the provisioner...
    Provisioning with boot2docker...
    Copying certs to the local machine directory...
    Copying certs to the remote machine...
    Setting Docker configuration on the remote daemon...
    Checking connection to Docker...
    Docker is up and running!
    To see how to connect Docker to this machine, run: docker-machine env mh-keystore
    ```
2.  Start the `progrium/consul` container created previously running on the `mh-keystore` virtual machine:
    ```
    $ docker $(docker-machine config mh-keystore) run -d \
    >     -p "8500:8500" \
    >     -h "consul" \
    >     progrium/consul -server –bootstrap
    Unable to find image 'progrium/consul:latest' locally
    latest: Pulling from progrium/consul
    3b4d28ce80e4: Pull complete
    …
    d9125e9e799b: Pull complete
    Digest: sha256:8cc8023462905929df9a79ff67ee435a36848ce7a10f18d6d0faba9306b97274
    Status: Downloaded newer image for progrium/consul:latest
    032884c7834ce22707ed08068c24c503d599499f1a0a58098c31be9cc84d8e6c
    ```
    bash 扩展`$(docker-machine config mh-keystore)`用于将连接配置传递给 Docker `run`命令。客户端从运行在`mh-keystore`机器中的`progrium/consul`映像启动程序。容器被称为`consul` (标志 `–h`)，正在监听端口`8500`(你也可以选择任何其他端口)。
3.  将本地环境设置为`mh-keystore`虚拟机:
    ```
    $ eval "$(docker-machine env mh-keystore)"
    ```
4.  执行`docker ps`命令，确保领事容器已启动:
    ```
    $ docker ps
    CONTAINER ID      IMAGE            COMMAND               CREATED
    032884c7834c   progrium/consul   "/bin/start -server -"   47 seconds ago
     STATUS          PORTS
    Up 46 seconds  53/tcp, 53/udp, 8300-8302/tcp, 8301-8302/udp, 8400/tcp, 0.0.0.0:8500->8500/tcp
    NAMES
    sleepy_austin
    ```
## 创建一个包含两个节点的集群集群
在这一步中，我们将使用 Docker Machine 为您的网络配置两台主机。我们将在 VirtualBox 中创建两个虚拟机。其中一台机器将是 Swarm master，它将首先被创建。
创建每个主机后，覆盖网络驱动程序的选项将使用 Swarm 通过以下步骤传递给 Docker 引擎:
1.  Create a Swarm master virtual machine `mhs-demo0`:
    ```
    $ docker-machine create \
    -d virtualbox \
    --swarm --swarm-master \
    --swarm-discovery="consul://$(docker-machine ip mh-keystore):8500" \
    --engine-opt="cluster-store=consul://$(docker-machine ip mh-keystore):8500" \
    --engine-opt="cluster-advertise=eth1:2376" \
    mhs-demo0
    ```
    在创建时，您向引擎守护程序提供`--cluster-store`选项。该选项告诉引擎覆盖网络键值存储的位置。bash 扩展`$(docker-machine ip mh-keystore)`解析为您在前面部分的步骤 1 中创建的咨询服务器的 IP 地址。`--cluster-advertise`选项在网络上宣传机器。
2.  创建另一个虚拟机`mhs-demo1`并将其添加到 Docker Swarm 集群:
    ```
    $ docker-machine create -d virtualbox \
     --swarm \
     --swarm-discovery="consul://$(docker-machine ip mh-keystore):8500" \
     --engine-opt="cluster-store=consul://$(docker-machine ip mh-keystore):8500" \
     --engine-opt="cluster-advertise=eth1:2376" \
    mhs-demo1
    Running pre-create checks...
    Creating machine...
    (mhs-demo1) Creating VirtualBox VM...
    (mhs-demo1) Creating SSH key...
    (mhs-demo1) Starting VM...
    Waiting for machine to be running, this may take a few minutes...
    Machine is running, waiting for SSH to be available...
    Detecting operating system of created instance...
    Detecting the provisioner...
    Provisioning with boot2docker...
    Copying certs to the local machine directory...
    Copying certs to the remote machine...
    Setting Docker configuration on the remote daemon...
    Configuring swarm...
    Checking connection to Docker...
    Docker is up and running!
    To see how to connect Docker to this machine, run: docker-machine env mhs-demo1
    ```
3.  List virtual machines using Docker Machine to confirm that they are all up and running:
    ```
    $ docker-machine ls
    NAME          ACTIVE   DRIVER       STATE     URL                         SWARM                DOCKER   ERRORS
    mh-keystore   *        virtualbox   Running   tcp://192.168.99.100:2376                        v1.9.1
    mhs-demo0     -        virtualbox   Running   tcp://192.168.99.101:2376   mhs-demo0 (master)   v1.9.1
    mhs-demo1     -        virtualbox   Running   tcp://192.168.99.102:2376   mhs-demo0            v1.9.1
    ```
    此时，虚拟机器正在运行。我们准备使用这些虚拟机为容器创建多主机网络。
## 创建覆盖网络
以下命令用于创建覆盖网络:
```
$ docker network create --driver overlay my-net
```
我们只需要在 Swarm 集群中的一台主机上创建网络。我们使用了 Swarm 主机，但是该命令可以在 Swarm 集群中的任何主机上运行:
1.  Check that the overlay network is running using the following command:
    ```
    $ docker network ls
    bd85c87911491d7112739e6cf08d732eb2a2841c6ca1efcc04d0b20bbb832a33
    rdua1-ltm:overlay-tutorial rdua$ docker network ls
    NETWORK ID          NAME                DRIVER
    bd85c8791149        my-net              overlay
    fff23086faa8        mhs-demo0/bridge    bridge
    03dd288a8adb        mhs-demo0/none      null
    2a706780454f        mhs-demo0/host      host
    f6152664c40a        mhs-demo1/bridge    bridge
    ac546be9c37c        mhs-demo1/none      null
    c6a2de6ba6c9       mhs-demo1/host     host
    ```
    因为我们使用的是 Swarm 主环境，所以我们能够看到所有 Swarm 代理上的所有网络:每个引擎上的默认网络和单个覆盖网络。在这种情况下，有两台发动机分别在`mhs-demo0`和`mhs-demo1`上运行。
    每一个`NETWORK ID`都是独一无二的。
2.  Switch to each Swarm agent in turn and list the networks:
    ```
    $ eval $(docker-machine env mhs-demo0)
    $ docker network ls
    NETWORK ID          NAME                DRIVER
    bd85c8791149        my-net              overlay
    03dd288a8adb        none                  null
    2a706780454f        host                  host
    fff23086faa8        bridge              bridge
    $ eval $(docker-machine env mhs-demo1)
    $ docker network ls
    NETWORK ID          NAME                DRIVER
    bd85c8791149        my-net              overlay
    358c45b96beb        docker_gwbridge     bridge
    f6152664c40a        bridge              bridge
    ac546be9c37c        none                null
    c6a2de6ba6c9        host                host
    ```
    两个代理都报告说他们拥有覆盖驱动程序的网络。我们有一个多主机覆盖网络运行。
    下图显示了两个容器如何使用叠加层`my-net`创建并绑定在一起:
    ![Creating an overlay network](img/00052.jpeg)
# 使用覆盖网络创建容器
以下是使用覆盖网络创建容器的步骤:
1.  Create a container `c0` on `mhs-demo0` and connect to the `my-net` network:
    ```
    $ eval $(docker-machine env mhs-demo0)
    root@843b16be1ae1:/#
    $ sudo docker run -i -t --name=c0 --net=my-net  debian /bin/bash
    ```
    执行`ifconfig`找到`c0`的 IP 地址。在这种情况下，就是`10.0.0.4`:
    ```
    root@843b16be1ae1:/# ifconfig
    eth0      Link encap:Ethernet  HWaddr 02:42:0a:00:00:04
     inet addr:10.0.0.4  Bcast:0.0.0.0  Mask:255.255.255.0
     inet6 addr: fe80::42:aff:fe00:4/64 Scope:Link
     UP BROADCAST RUNNING MULTICAST  MTU:1450  Metric:1
     RX packets:17 errors:0 dropped:0 overruns:0 frame:0
     TX packets:17 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:1474 (1.4 KB)  TX bytes:1474 (1.4 KB)
    eth1      Link encap:Ethernet  HWaddr 02:42:ac:12:00:03
     inet addr:172.18.0.3  Bcast:0.0.0.0  Mask:255.255.0.0
     inet6 addr: fe80::42:acff:fe12:3/64 Scope:Link
     UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
     RX packets:8 errors:0 dropped:0 overruns:0 frame:0
     TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:648 (648.0 B)  TX bytes:648 (648.0 B)
    lo        Link encap:Local Loopback