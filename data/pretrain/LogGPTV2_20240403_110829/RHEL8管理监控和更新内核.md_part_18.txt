6.  将应用程序的 PID 添加到 `Example`{.literal} 控制组群中：
    ``` literallayout
    # echo "6955" > /sys/fs/cgroup/cpu/Example/cgroup.procs
    or
    # echo "6955" > /sys/fs/cgroup/cpu/Example/tasks
    ```
    上一命令可确保所需的应用成为 `Example`{.literal}
    控制组的成员，因此不超过为 `Example`{.literal} 控制组配置的 CPU
    限值。PID 应该代表系统中的一个已存在的进程。这里的
    `PID 6955`{.literal} 分配给进程
    `sha1sum /dev/zero &`{.literal}，用于演示 `cpu`{.literal}
    控制器的用例。
7.  验证应用程序是否在指定的控制组群中运行：
    ``` literallayout
    # cat /proc/6955/cgroup
    12:cpuset:/
    11:hugetlb:/
    10:net_cls,net_prio:/
    9:memory:/user.slice/user-1000.slice/user@1000.service
    8:devices:/user.slice
    7:blkio:/
    6:freezer:/
    5:rdma:/
    4:pids:/user.slice/user-1000.slice/user@1000.service
    3:perf_event:/
    2:cpu,cpuacct:/Example
    1:name=systemd:/user.slice/user-1000.slice/user@1000.service/gnome-terminal-server.service
    ```
    上面的示例输出显示所需应用的进程在 `Example`{.literal}
    控制组中运行，它将 CPU 限制应用到应用的进程。
8.  确定节流应用程序的当前 CPU 消耗：
    ``` literallayout
    # top
    top - 12:28:42 up  1:06,  1 user,  load average: 1.02, 1.02, 1.00
    Tasks: 266 total,   6 running, 260 sleeping,   0 stopped,   0 zombie
    %Cpu(s): 11.0 us,  1.2 sy,  0.0 ni, 87.5 id,  0.0 wa,  0.2 hi,  0.0 si,  0.2 st
    MiB Mem :   1826.8 total,    287.1 free,   1054.4 used,    485.3 buff/cache
    MiB Swap:   1536.0 total,   1396.7 free,    139.2 used.    608.3 avail Mem
      PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
     6955 root      20   0  228440   1752   1472 R  20.6   0.1  47:11.43 sha1sum
     5760 jdoe      20   0 3604956 208832  65316 R   2.3  11.2   0:43.50 gnome-shell
     6448 jdoe      20   0  743836  31736  19488 S   0.7   1.7   0:08.25 gnome-terminal-
      505 root      20   0       0      0      0 I   0.3   0.0   0:03.39 kworker/u4:4-events_unbound
     4217 root      20   0   74192   1612   1320 S   0.3   0.1   0:01.19 spice-vdagentd
    ...
    ```
    请注意，`PID 6955`{.literal} 的 CPU 消耗从 99% 降至 20%。
:::
::: itemizedlist
**其它资源**
-   [了解控制组群](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#understanding-control-groups_setting-limits-for-applications "了解控制组群"){.link}
-   [内核资源控制器](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#what-kernel-resource-controllers-are_setting-limits-for-applications "内核资源控制器"){.link}
-   `cgroups(7)`{.literal}、`sysfs(5)`{.literal} 手册页
:::
:::
::: footnotes
\
------------------------------------------------------------------------
::: {#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#ftn.idm139694374005216 .footnote}
[^\[1\]^](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#idm139694374005216){.simpara}
Linux Control Group v2 - An Introduction, Devconf.cz 2019 presentation
by Waiman Long
:::
:::
:::
[]{#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel}第 19 章 使用带有 systemd 的控制组群版本 1 {.title}
:::
以下小节概述了与创建、修改和删除控制组 (`cgroup`{.literal})
相关的任务。`systemd`{.literal} 系统和服务管理器提供的实用程序是
`cgroups`{.literal} 管理的首选方式，并将在未来提供支持。
::: section
::: titlepage
# []{#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#role-of-systemd-in-control-groups-version-1_using-control-groups-version-1-with-systemd}控制组群版本 1 中的 systemd 角色 {.title}
:::
Red Hat Enterprise Linux 8
将资源管理设置从流程级别移到应用程序级别，方法是将 `cgroup`{.literal}
层次结构系统与 `systemd`{.literal} 单元树绑定。因此，您可以使用
`systemctl`{.literal} 命令或通过修改 `systemd`{.literal}
单元文件来管理系统资源。
默认情况下，`systemd`{.literal} 系统和服务管理器利用
`slice`{.literal}、`scope`{.literal} 和 `service`{.literal}
单元来整理和整理控制组中的进程。`systemctl`{.literal}
命令允许您通过创建自定义 `slices`{.literal}
来进一步修改此结构。另外，`systemd`{.literal} 会在
`/sys/fs/cgroup/`{.literal} 目录中自动挂载重要内核资源控制器的层次结构。
三种 `systemd`{.literal} 单元类型用于资源控制：
::: itemizedlist
-   [**Service**]{.strong} - `systemd`{.literal}
    根据单元配置文件启动的进程或一组进程。服务封装指定的进程，以便它们可以作为一个集启动和停止。服务使用以下方法命名：
    ``` literallayout
    .service
    ```
-   [**Scope**]{.strong} - 外部创建的进程组。范围封装通过
    `fork()`{.literal} 函数由任意进程启动和停止的进程，然后在运行时由
    `systemd`{.literal}
    注册。例如，用户会话、容器和虚拟机被视为范围。范围命名如下：
    ``` literallayout
    .scope
    ```
-   [**slice**]{.strong} -
    一组分级组织单元。片段组织了一个分级，其中放置范围和服务。实际的进程包含在范围或服务中。slice
    单元的每个名称对应层次结构中的位置的路径。短划线 (\"-\")
    字符充当了分隔符的作用，它把路径组件从 `-.slice`{.literal} root
    slice 中分隔。在以下示例中：
    ``` literallayout
    .slice
    ```
    `parent-name.slice`{.literal} 是 `parent.slice`{.literal}
    的子分片，它是 `-.slice`{.literal} root
    片段的子分片。`parent-name.slice`{.literal} 可以有自己的子slice 名为
    `parent-name-name2.slice`{.literal}，以此类推。
:::
`service`{.literal}、`scope`{.literal} 和 `slice`{.literal}
单元直接映射到控制组层次结构中的对象。激活这些单元后，它们直接映射到从单元名称构建的控制组路径。
以下是控制组群分级的缩写示例：
``` literallayout
Control group /:
-.slice
├─user.slice
│ ├─user-42.slice
│ │ ├─session-c1.scope
│ │ │ ├─ 967 gdm-session-worker [pam/gdm-launch-environment]
│ │ │ ├─1035 /usr/libexec/gdm-x-session gnome-session --autostart /usr/share/gdm/greeter/autostart
│ │ │ ├─1054 /usr/libexec/Xorg vt1 -displayfd 3 -auth /run/user/42/gdm/Xauthority -background none -noreset -keeptty -verbose 3
│ │ │ ├─1212 /usr/libexec/gnome-session-binary --autostart /usr/share/gdm/greeter/autostart
│ │ │ ├─1369 /usr/bin/gnome-shell
│ │ │ ├─1732 ibus-daemon --xim --panel disable
│ │ │ ├─1752 /usr/libexec/ibus-dconf
│ │ │ ├─1762 /usr/libexec/ibus-x11 --kill-daemon
│ │ │ ├─1912 /usr/libexec/gsd-xsettings
│ │ │ ├─1917 /usr/libexec/gsd-a11y-settings
│ │ │ ├─1920 /usr/libexec/gsd-clipboard
…​
├─init.scope
│ └─1 /usr/lib/systemd/systemd --switched-root --system --deserialize 18
└─system.slice
  ├─rngd.service
  │ └─800 /sbin/rngd -f
  ├─systemd-udevd.service
  │ └─659 /usr/lib/systemd/systemd-udevd
  ├─chronyd.service
  │ └─823 /usr/sbin/chronyd
  ├─auditd.service
  │ ├─761 /sbin/auditd
  │ └─763 /usr/sbin/sedispatch
  ├─accounts-daemon.service
  │ └─876 /usr/libexec/accounts-daemon
  ├─example.service
  │ ├─ 929 /bin/bash /home/jdoe/example.sh
  │ └─4902 sleep 1
  …​
```
上面的例子显示，服务和范围包含进程，并放置在不含自己进程的片段中。
::: itemizedlist
**其它资源**
-   在 Red Hat Enterprise Linux
    中[*[[配置基本系统设置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/managing-services-with-systemd_configuring-basic-system-settings){.link}]{.citetitle}*]{.emphasis}
-   [什么是内核资源控制器](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#what-kernel-resource-controllers-are_setting-limits-for-applications "内核资源控制器"){.link}
-   `systemd.resource-control(5)`{.literal}, `cgroups(7)`{.literal},
    `fork()`{.literal}, `fork(2)`{.literal} manual pages
:::
:::
::: section
::: titlepage
# []{#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#creating-transient-control-groups_using-control-groups-version-1-with-systemd}创建临时控制组群 {.title}
:::
临时 `cgroup`{.literal}
设置运行时期间由单元（服务或范围）消耗的资源的限制。
::: itemizedlist
**流程**
-   要创建一个临时控制组群，使用以下格式的 `systemd-run`{.literal}
    命令：
    ``` literallayout
    # systemd-run --unit= --slice=.slice 
    ```
    此命令会创建并启动临时服务或范围单元，并在此类单元中运行自定义命令。
    ::: itemizedlist
    -   `--unit=`{.literal} 选项为单元取一个名称。如果未指定
        `--unit`{.literal}，则会自动生成名称。
    -   `--slice=.slice`{.literal}
        选项使您的服务或范围单元成为指定片段的成员。将
        `.slice`{.literal} 替换为现有片段的名称（如
        `systemctl -t slice`{.literal}
        输出中所示），或通过传递唯一名称来创建新片段。默认情况下，服务和范围作为
        `system.slice`{.literal} 的成员创建。
    -   将 ``{.literal}
        替换为您要在服务或范围单元中执行的命令。
        此时会显示以下信息，以确认您已创建并启动了该服务，或者已成功启动范围：
        ``` literallayout
        # Running as unit .service
        ```
    :::
-   另外,还可在完成进程后继续运行该单元以收集运行时信息：
    ``` literallayout
    # systemd-run --unit= --slice=.slice --remain-after-exit 
    ```
    命令可创建并启动一个临时服务单元，并在此类单元中运行自定义命令。`--remain-after-exit`{.literal}
    选项可确保服务在其进程完成后继续运行。
:::
::: itemizedlist
**其它资源**
-   [了解控制组群](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#understanding-control-groups_setting-limits-for-applications "了解控制组群"){.link}
-   [控制组群中的 systemd
    角色](#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#role-of-systemd-in-control-groups-version-1_using-control-groups-version-1-with-systemd "控制组群版本 1 中的 systemd 角色"){.link}
-   [*[[配置基本系统设置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/managing-services-with-systemd_configuring-basic-system-settings){.link}]{.citetitle}*]{.emphasis}
    Red Hat Enterprise Linux
-   `systemd-run(1)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#creating-persistent-control-groups_using-control-groups-version-1-with-systemd}创建持久的控制组群 {.title}
:::
若要为服务分配持久控制组，需要编辑其单元配置文件。配置在系统重启后保留，因此可以用于管理自动启动的服务。
::: itemizedlist
**流程**
-   要创建持久的控制组群，请执行：
    ``` literallayout
    # systemctl enable .service
    ```
    以上命令会在 `/usr/lib/systemd/system/`{.literal}
    目录中自动创建一个单元配置文件，并在默认情况下将
    `.service`{.literal} 分配给 `system.slice`{.literal} 单元。
:::
::: itemizedlist
**其它资源**
-   [了解控制组群](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#understanding-control-groups_setting-limits-for-applications "了解控制组群"){.link}
-   [控制组群中的 systemd
    角色](#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#role-of-systemd-in-control-groups-version-1_using-control-groups-version-1-with-systemd "控制组群版本 1 中的 systemd 角色"){.link}
-   [*[[配置基本系统设置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/managing-services-with-systemd_configuring-basic-system-settings){.link}]{.citetitle}*]{.emphasis}
    Red Hat Enterprise Linux
-   `systemd-run(1)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#configuring-memory-resource-control-settings-on-the-command-line_using-control-groups-version-1-with-systemd}在命令行中配置内存资源控制设置 {.title}
:::
在命令行界面中执行命令是针对进程组设置限制、优先级或控制对硬件资源的访问的一种方式。
::: itemizedlist
**流程**
-   要限制服务的内存用量，请运行以下命令：
    ``` literallayout
    # systemctl set-property example.service MemoryLimit=1500K
    ```
    命令立即将 1,500 KB 的内存限值分配给 `example.service`{.literal}
    服务所属控制组中执行的进程。在此配置变体中的 `MemoryLimit`{.literal}
    参数在
    `/etc/systemd/system.control/example.service.d/50-MemoryLimit.conf`{.literal}
    文件中定义，并控制
    `/sys/fs/cgroup/memory/system.slice/example.service/memory.limit_in_bytes`{.literal}
    文件的值。