### 8. Conclusions and Future Work

In this work, we implemented GGH15-based branching-program obfuscation. Our results demonstrate that it is feasible to use this method for obfuscating non-trivial functions, although the class of functions that can be handled remains extremely limited. Throughout this project, we developed several tools and optimizations that we believe will be useful in other contexts, particularly our Gaussian sampling techniques, which may find applications in other lattice-based cryptographic constructions, including ring-LWE schemes.

Future work could explore hardware acceleration (e.g., using GPUs or FPGAs) to reduce overhead, potentially making the obfuscation practical for niche applications.

### 9. Acknowledgments

This work was supported by the Defense Advanced Research Projects Agency (DARPA) and the Army Research Office (ARO) under Contract No. W911NF-15-C-0236.

### References

[1] M. R. Albrecht. Private communications, 2016.
[2] M. R. Albrecht, C. Cocis, F. Laguillaumie, and A. Langlois. Implementing candidate graded encoding schemes from ideal lattices. In *Progress in Cryptology - ASIACRYPT'15*, Lecture Notes in Computer Science. Springer, 2015.
[3] M. R. Albrecht, R. Player, and S. Scott. On the concrete hardness of learning with errors. *J. Mathematical Cryptology*, 9(3):169–203, 2015.
[4] D. Apon, Y. Huang, J. Katz, and A. J. Malozemoff. Implementing cryptographic program obfuscation. Cryptology ePrint Archive, Report 2014/779, 2014. [http://eprint.iacr.org/](http://eprint.iacr.org/)
[5] S. Arora and R. Ge. New algorithms for learning in presence of errors. In *ICALP (1)*, volume 6755 of Lecture Notes in Computer Science, pages 403–415. Springer, 2011.
[6] Y. Chen, C. Gentry, and S. Halevi. Cryptanalyses of candidate branching program obfuscators. Cryptology ePrint Archive, Report 2016/998, 2016. [http://eprint.iacr.org/2016/998](http://eprint.iacr.org/2016/998)
[7] J. Coron, T. Lepoint, and M. Tibouchi. Practical multilinear maps over the integers. In *CRYPTO 2013*, volume 8042 of Lecture Notes in Computer Science, pages 476–493. Springer, 2013.
[8] J.-S. Coron, M. S. Lee, T. Lepoint, and M. Tibouchi. Cryptanalysis of GGH15 multilinear maps. Cryptology ePrint Archive, Report 2015/1037, 2015. [http://eprint.iacr.org/2015/1037](http://eprint.iacr.org/2015/1037)
[9] S. Garg, C. Gentry, and S. Halevi. Candidate multilinear maps from ideal lattices. In *Advances in Cryptology - EUROCRYPT'13*, volume 7881 of Lecture Notes in Computer Science, pages 1–17. Springer, 2013.
[10] S. Garg, C. Gentry, S. Halevi, M. Raykova, A. Sahai, and B. Waters. Candidate indistinguishability obfuscation and functional encryption for all circuits. *SIAM J. Comput.*, 45(3):882–929, 2016.
[11] C. Gentry, S. Gorbunov, and S. Halevi. Graph-induced multilinear maps from lattices. In *TCC 2015*, volume 9015 of Lecture Notes in Computer Science, pages 498–527. Springer, 2015. [https://eprint.iacr.org/2014/645](https://eprint.iacr.org/2014/645)
[12] C. Gentry, S. Halevi, and N. Smart. Homomorphic evaluation of the AES circuit. In *Advances in Cryptology - CRYPTO 2012*, volume 7417 of Lecture Notes in Computer Science, pages 850–867. Springer, 2012. Full version at [http://eprint.iacr.org/2012/099](http://eprint.iacr.org/2012/099)
[13] C. Gentry, C. Peikert, and V. Vaikuntanathan. Trapdoors for hard lattices and new cryptographic constructions. In *STOC'08*, pages 197–206, 2008.
[14] J. Kilian. Founding cryptography on oblivious transfer. In *STOC*, volume 8441 of Lecture Notes in Computer Science, pages 20–31. ACM, 1988.
[15] A. Langlois, D. Stehlé, and R. Steinfeld. GGHlite: More efficient multilinear maps from ideal lattices. In *EUROCRYPT*, volume 8441 of Lecture Notes in Computer Science, pages 239–256. Springer, 2014.
[16] K. Lewi, A. J. Malozemoff, D. Apon, B. Carmer, A. Foltzer, D. Wagner, D. W. Archer, D. Boneh, J. Katz, and M. Raykova. 5Gen: A framework for prototyping applications using multilinear maps and matrix branching programs. In *ACM Conference on Computer and Communications Security*, pages 981–992. ACM, 2016.
[17] J. Liu. Eigenvalue and Singular Value Inequalities of Schur Complements. *Numerical Methods and Algorithms*. Springer, 2005.
[18] D. Micciancio and C. Peikert. Trapdoors for lattices: Simpler, tighter, faster, smaller. In *EUROCRYPT*, volume 7237 of Lecture Notes in Computer Science, pages 700–718. Springer, 2012. Full version at [http://ia.cr/2011/501](http://ia.cr/2011/501)
[19] C. Peikert. An efficient and parallel Gaussian sampler for lattices. In *Advances in Cryptology - CRYPTO 2010*, volume 6223 of Lecture Notes in Computer Science, pages 80–97. Springer, 2010.
[20] V. Shoup. NTL: A Library for doing Number Theory. [http://shoup.net/ntl/](http://shoup.net/ntl/), Version 9.11.0, 2016.
[21] F. Zhang. The Schur Complement and Its Applications. *Numerical Methods and Algorithms*. Springer, 2005.

### Appendix: Performance Details

#### A.1 Asymptotics of Obfuscation

For a given branching-program length \( L \) and security parameter \( \lambda \), our choice of parameters ensures that \( \ell = \log(q) \) and the lattice dimension \( m \) satisfy \( \ell \geq \Omega(L \log m + \lambda) \) and \( m \geq \Omega(\ell \lambda) \). These constraints imply \( \ell \geq \Omega(\lambda + L \log(\lambda L)) \) and \( m \geq \Omega(\lambda^2 + \lambda L \log(\lambda L)) \).

Each encoding matrix \( C \in \mathbb{Z}^{m \times m} \) takes space \( \ell m^2 \) and multiplying or inverting such matrices takes time \( \ell m^3 \). Since an obfuscated program consists of \( 2\sigma(L - 1) \) matrices, the total space and time requirements are:

- **Total Space**: \( \Omega(\sigma \lambda^5 \log^4(\lambda L)) \)
- **Time to Compute**: \( \Omega(\sigma \lambda^5 \log^4(\lambda L)) \)

In summary, the obfuscation running time is linear in \( \sigma \), sextic in \( \lambda \), and quasi-quintic in \( L \). The hard-disk size needed is linear in \( \sigma \), quintic in the security parameter, and quasi-quartic in \( L \).

Our implementation is parallelized across different CRT components, whose number is proportional to \( \ell = \log q \). This parallelism reduces the wall-clock time, making the obfuscation "only" quasi-quartic in the program length \( \tilde{\Omega}(L^4) \) and sextic in the security parameter \( \Omega(\lambda^6) \).

For RAM requirements, our implementation keeps only two matrices in RAM at a time, using \( \Omega(\lambda^5 \log^3(\lambda L)) \) memory. This can be further reduced by keeping only a small number of CRT components or slices of each matrix in memory.

#### A.2 Concrete Results

To save time, most of our experiments were conducted with a binary alphabet \( |\Sigma| = 2 \). For \( L = 15 \), we also ran tests with nibbles \( |\Sigma| = 16 \) to verify its effectiveness. As expected, initialization and evaluation were not affected by the alphabet size, while RAM usage during obfuscation was marginally higher. The running-time and disk usage in obfuscation were exactly 8 times larger for \( |\Sigma| = 16 \) compared to \( |\Sigma| = 2 \).

The timing results for various settings are provided in Table 4, and memory and disk-space usage are described in Figures 6, 7, and 8.

We also tested the effectiveness of our parallelization strategies, comparing running times for the same parameters (L = 8, binary alphabet, and 12 CRT factors) across different numbers of threads. As expected, increasing the number of threads up to the number of CRT factors reduced the running time, but adding more threads had no effect. Detailed results are shown in Figure 5.

**Figure 5: Running time (seconds) as a function of the number of threads.**

| # of threads | Initialization | Obfuscation | Evaluation |
|--------------|----------------|-------------|------------|
| 1            | 90.4           | 15809.2     | 3840.2     |
| 2            | 91.2           | 15837.1     | 3833.6     |
| 3            | 89.5           | 15844.3     | 2032.0     |
| 4            | 87.2           | 8605.9      | 1451.8     |
| 6            | 89.7           | 4917.8      | 1120.0     |
| 12           | 88.7           | 3298.5      | 803.0      |
| 16           | 91.8           | 2375.8      | 560.1      |
| 32           | 98.5           | 2168.1      | 568.9      |

**Figure 6: RAM usage (Gigabytes) as a function of the BP-length.**

| L    | m       | RAM (Obfuscation) |
|------|---------|-------------------|
| 5    | 3352    | 5.5               |
| 6    | 3932    | 8.7               |
| 8    | 5621    | 25                |
| 10   | 6730    | 43                |
| 12   | 8339    | 81                |
| 14   | 9923    | 137               |
| 16   | 10925   | 184               |
| 17   | 11928   | 241               |
| 20   | 14145   | 401               |

**Figure 7: Hard disk usage as a function of the input length.**

| L    | m       | Initialization (GB) | Obfuscation (GB) |
|------|---------|---------------------|------------------|
| 5    | 3352    | 2.3                 | 3.7              |
| 6    | 3932    | 5.0                 | 7.3              |
| 8    | 5621    | 13                  | 28               |
| 10   | 6730    | 50                  | 61               |
| 12   | 8339    | 120                 | 141              |
| 14   | 9923    | 244                 | 280              |
| 16   | 10925   | 383                 | 432              |
| 17   | 11928   | 538                 | 602              |
| 20   | 14145   | 1124                | 1236             |

**Figure 8: Memory usage for different numbers of threads, length L = 8.**

| # of threads | Initialization (GB) | Obfuscation (GB) | Evaluation (GB) |
|--------------|---------------------|------------------|-----------------|
| 1            | 8.2                 | 10               | 33              |
| 2            | 8.2                 | 10               | 33              |
| 3            | 8.2                 | 12               | 33              |
| 4            | 8.2                 | 14               | 33              |
| 6            | 8.2                 | 18               | 33              |
| 12           | 8.3                 | 28               | 39              |
| 16           | 8.3                 | 29               | 41              |
| 32           | 7.9                 | 29               | 45              |