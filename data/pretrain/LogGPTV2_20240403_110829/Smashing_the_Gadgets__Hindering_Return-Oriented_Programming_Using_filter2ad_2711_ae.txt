[52] A. V. Aho, M. S. Lam, R. Sethi, and J. D. Ullman, Compilers: Principles,
Boston, MA, USA: Addison-
Techniques, and Tools (2nd Edition).
Wesley Longman Publishing Co., Inc., 2006.
[53] “Adobe CoolType SING Table “uniqueName” Stack Buffer Overﬂow,”
http://www.exploit-db.com/exploits/16619/.
[54] R. El-Khalil and A. D. Keromytis, “Hydan: Hiding information in
program binaries,” in Proceedings of the International Conference on
Information and Communications Security, (ICICS), 2004.
[55] Intel 64 and IA-32 Architectures Software Developer’s Manual, ser.
Volume 2 (2A & 2B): Instruction Set Reference, A-Z, 2011, http:
//www.intel.com/Assets/PDF/manual/325383.pdf.
[56] S. S. Muchnick, Advanced compiler design and implementation.
Francisco, CA, USA: Morgan Kaufmann Publishers Inc., 1997.
San
[57] Y. L. Varol and D. Rotem, “An algorithm to generate all topological
sorting arrangements,” Comput. J., vol. 24, no. 1, pp. 83–84, 1981.
[58] A. Fog, “Calling conventions for different C++ compilers and operating
systems,” http://agner.org/optimize/calling conventions.pdf.
[59] Skape and Skywing, “Bypassing Windows hardware-enforced DEP,”
Uninformed, vol. 2, Sep. 2005.
[60] F. Bouchez, “A study of spilling and coalescing in register allocation as
two separate phases,” Ph.D. dissertation, ´Ecole normale sup´erieure de
Lyon, April 2009.
[61] “Wine,” http://www.winehq.org.
[62] “Integard Pro 2.2.0.9026 (Win7 ROP-Code Metasploit Module),” http:
//www.exploit-db.com/exploits/15016/.
[63] “MPlayer (r33064 Lite) Buffer Overﬂow + ROP exploit,” http://www.
exploit-db.com/exploits/17124/.
[64] “White Phosphorus Exploit Pack,” http://www.whitephosphorus.org/.
[65] Corelan Team, “Corelan ROPdb,” https://www.corelan.be/index.php/
security/corelan-ropdb/.
[66] “Immunity Debugger,” http://www.immunityinc.com/products-immdbg.
shtml.
[67] E. Buchanan, R. Roemer, H. Shacham, and S. Savage, “When good
instructions go bad: generalizing return-oriented programming to RISC,”
in Proceedings of the 15th ACM conference on Computer and Commu-
nications Security (CCS), 2008.
[68] T. Bletsch, X. Jiang, V. Freeh, and Z. Liang, “Jump-oriented program-
ming: A new class of code-reuse attack,” in Proceedings of the 6th
Symposium on Information, Computer and Communications Security
(ASIACCS), 2011.
[69] P. Sol´e, “Defeating DEP, the Immunitiy Debugger way,” http://www.
immunitysec.com/downloads/DEPLIB.pdf.
614
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:51 UTC from IEEE Xplore.  Restrictions apply. 
NUMBER OF USEFUL GADGETS IDENTIFIED BY MONA [27] IN THE ORIGINAL CODE SEGMENTS / IN THEIR UNMODIFIABLE PARTS AFTER IN-PLACE
Table V
RANDOMIZATION WAS APPLIED.
Gadget Type
Reader
Integard
Mplayer
msvcr71
mscorie
mfc71u
total
(%)
add eax -> ebx
add ebp -> eax
add ebp -> ebx
add ebp -> edi
add ebp -> edx
add ebx -> eax
add ebx -> ecx
add ebx -> edx
add ecx -> eax
add ecx -> ebp
add edi -> eax
add edi -> ecx
add edi -> edx
add edx -> eax
add esi -> eax
add esi -> ecx
add esi -> edi
add value to eax
add value to ebx
add value to edi
add value to edx
add value to esi
dec eax
dec ebp
dec ebx
dec ecx
dec edi
dec edx
dec esi
empty eax
empty edi
empty edx
inc eax
inc ebp
inc ebx
inc ecx
inc edi
inc edx
inc esi
move eax -> ebp
move eax -> ebx
move eax -> ecx
move eax -> edi
move eax -> edx
move eax -> esi
move eax -> esp
move ebp -> eax
move ebp -> ebx
move ebp -> edi
move ebp -> edx
move ebx -> eax
move ebx -> ecx
move ebx -> edi
move ebx -> edx
move ebx -> esp
move ecx -> eax
move ecx -> ebp
move ecx -> ebx
move ecx -> edi
move ecx -> edx
move ecx -> esi
move ecx -> esp
move edi -> eax
move edi -> ebp
move edi -> ebx
move edi -> ecx
move edi -> edx
move edi -> esi
move edi -> esp
move edx -> eax
move edx -> ebx
move edx -> ecx
move edx -> edi
move edx -> esi
move esi -> eax
move esi -> ebx
move esi -> ecx
move esi -> edi
move esi -> edx
move esi -> esp
move esp -> eax
move esp -> ebp
move esp -> ebx
move esp -> ecx
move esp -> edi
move esp -> esi
neg eax
neg edx
pickup pointer into eax
pickup pointer into ecx
pushad
xor ebp -> eax
xor edx -> eax
xor esi -> eax
1/0
1/0
1/0
5/0
4/0
3/0
9/0
3/2
1/0
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
24/9
2/0
2/0
111/87
1/0
156/2
2/0
51/19
6/2
0/5
3/0
3/0
14/1
3/0
-
1/0
4/0
-
2/0
11/2
34/0
5/0
96/0
1/0
1/0
4/0
26/1
-
-
-
-
-
-
2/0
1/0
-
125/0
1/0
1/0
17/1
1/0
1/0
1/0
488/0
2/0
-
-
-
-
-
-
-
-
1/0
1/0
-
5/0
8/0
37/0
20/0
3/1
-
-
7/0
1/0
-
1/0
1/1
2/1
5/5
1/0
2/0
1/0
1/1
2/0
1/1
3/2
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
2/0
4/0
1/0
1/0
4/0
3/1
3/0
8/0
4/0
5/0
5/0
16/0
3/0
2/2
-
-
-
1/0
84/24
3/0
4/3
18/12
2/0
3/2
5/3
133/0
-
2/0
53/6
134/0
9/3
9/0
1/1
37/1
2/0
23/2
52/0
7/1
7/0
10/1
19/0
30/3
80/2
2/0
2/0
6/0
151/0
1/0
-
1/0
2/0
46/1
3/1
4/0
1/0
-
-
-
-
92/8
1/0
8/0
19/0
3/0
19/0
92/1
3/0
-
-
-
136/0
2/0
16/0
3/0
8/0
17/0
1/0
1/0
85/0
-
10/0
4/0
1/1
-
12/3
2/0
26/4
1/0
-
-
3/0
1/0
2/0
2/0
2/2
1/1
1/0
89/0
1/0
-
1/1
12/1
1/0
2/0
1/0
3/0
3/0
1/0
2/0
8/0
1/0
2/1