# Introduction

This concise guide is designed for individuals who are just beginning to explore the world of PostgreSQL. The book covers the following topics:

- **I. PostgreSQL: An Overview** ............................ 3
- **II. What's New in PostgreSQL 12** ..................... 15
- **III. Installation on Linux and Windows** ........... 23
- **IV. Connecting to a Server, Writing SQL Queries, and Using Transactions** .............................. 33
- **V. Learning the SQL Language with a Demo Database** ................................................... 59
- **VI. Integrating PostgreSQL with Your Application** ........................................ 87
- **VII. Minimal Server Setup** ................................. 101
- **VIII. Exploring the pgAdmin Application** ........... 109
- **IX. Advanced Features:**
  - Full-Text Search .......................... 115
  - JSON Format ............................... 122
  - Foreign Data Wrappers ................ 134
- **X. Education and Certification Opportunities** 147
- **XI. Staying Updated with All Releases** ......... 165
- **XII. About Postgres Professional Company** ... 169

We hope this book will make your initial experience with PostgreSQL more enjoyable and help you integrate into the PostgreSQL community. Best of luck!

## I. About PostgreSQL

PostgreSQL is the most feature-rich, free, open-source database system. Developed in an academic environment, it has attracted a wide developer community over its long history. Today, PostgreSQL offers all the functionality required by most users and is widely used around the world to create high-load, business-critical systems.

### Some History

Modern PostgreSQL originated from the POSTGRES project, led by Michael Stonebraker, a professor at the University of California, Berkeley. Before this, Michael Stonebraker had been managing the development of INGRES, one of the first relational database systems. POSTGRES was conceived as a rethinking of previous work, aiming to overcome the limitations of its rigid type system.

The project began in 1985, and by 1988, several scientific articles had been published, describing the data model, the POSTQUEL query language (SQL was not yet a standard), and the data storage structure. POSTGRES is sometimes considered a post-relational database system, addressing the criticisms of the relational model's strictness and simplicity. As computer technologies spread, new types of applications emerged, requiring support for custom data types and features like inheritance and complex object management.

The first version of the database was released in 1989 and underwent several years of improvement. However, when version 4.2 was released in 1993, the project was officially shut down. Despite this, the open-source and BSD license allowed Andrew Yu and Jolly Chen, alumni of UC Berkeley, to resume development in 1994. They replaced the POSTQUEL query language with SQL, which had become the accepted standard by then. The project was renamed to Postgres95.

In 1996, it became clear that the name Postgres95 would not stand the test of time, and a new name, PostgreSQL, was chosen. This name reflects the connection to the original POSTGRES project and the adoption of SQL. While the name can be challenging to pronounce, it is typically pronounced as "Post-Gres-Q-L" or simply "postgres."

The first PostgreSQL release was version 6.0, maintaining the original numbering scheme. The project grew, and its management was taken over by a small group of active users and developers, known as the "PostgreSQL Global Development Group."

### Development

All major decisions about developing and releasing new PostgreSQL versions are made by the Core team, currently consisting of five people. In addition to the developers who contribute occasionally, there is a group of main developers who have made significant contributions to PostgreSQL, known as major contributors. There is also a group of committers who have write access to the source code repository. The list of current developers can be found on the official PostgreSQL website: www.postgresql.org.

Russian developers have made a significant contribution to PostgreSQL, arguably making it one of the largest global open-source projects with such a strong Russian presence. Vadim Mikheev, a software programmer from Krasnoyarsk and a former member of the Core team, played a crucial role in the evolution and development of PostgreSQL. He created key core features such as multi-version concurrency control (MVCC), vacuum, write-ahead log (WAL), subqueries, and triggers. Vadim is no longer involved with the project.

Oleg Bartunov, a professional astronomer and research scientist at the Sternberg Astronomical Institute of Lomonosov Moscow State University, has been contributing to PostgreSQL for almost 25 years. In 2015, together with Teodor Sigaev and Alexander Korotkov, who are now recognized as major contributors, he founded the Postgres Professional company.

Their main areas of contribution include PostgreSQL localization (national encodings and Unicode support), full-text search, working with arrays and semi-structured data (hstore, json, jsonb), and new index methods (GiST, SP-GiST, GIN, RUM, Bloom). They have created many popular extensions.

The PostgreSQL release cycle typically takes about a year. During this period, the community receives patches with bug fixes, updates, and new features from anyone willing to contribute. Traditionally, all patches are discussed on the pgsql-hackers mailing list. If the community finds the idea useful, the implementation is correct, and the code passes a mandatory code review by other developers, the patch is included in the next release.

At some point (usually in spring, about half a year before the release), code stabilization is announced: all new features are postponed until the next version, and only bug fixes and improvements for already included patches are accepted. Within the release cycle, beta versions appear, and closer to the end, a release candidate is built. Soon after, a new major version of PostgreSQL is released.

The major version used to be defined by two numbers, but in 2017, it was decided to start using a single number. Thus, version 9.6 was followed by PostgreSQL 10, and the latest available version is PostgreSQL 12, released in October 2019.

As the new version is being prepared, developers can find and fix bugs. The most critical fixes are backported to previous versions. The community usually releases updates quarterly; these "minor" versions accumulate such fixes. For example, version 10.6 contains bug fixes for the 10.5 release, while version 11.2 provides fixes for PostgreSQL 11.1.

### Support

The PostgreSQL Global Development Group supports major releases for five years. Both support and development are managed through mailing lists. A correctly filed bug report has a high chance of being addressed very quickly, with bug fixes often released within 24 hours.

In addition to community support, several companies worldwide provide 24x7 commercial support for PostgreSQL, including Russia-based Postgres Professional (www.postgrespro.com).

### Current State

PostgreSQL is one of the most popular databases. Built on a solid foundation of academic development, PostgreSQL has evolved over its 20-year history into an enterprise-level product that is now a real alternative to commercial databases. You can see this for yourself by examining the key features of PostgreSQL 12, the latest released version.

#### Reliability and Stability

Reliability is especially important in enterprise-level applications that handle business-critical data. For this purpose, PostgreSQL provides support for hot standby servers, point-in-time recovery, and various types of replication (synchronous, asynchronous, cascade).

#### Security

PostgreSQL supports secure SSL connections and provides various authentication methods, such as password authentication (including SCRAM), client certificates, and external authentication services (LDAP, RADIUS, PAM, Kerberos).

For user management and database access control, the following features are provided:
- Creating and managing new users and group roles
- Role- and group-based access control to database objects
- Row-level and column-level security
- SELinux support via built-in SE-PostgreSQL functionality (Mandatory Access Control)

The Russian Federal Service for Technical and Export Control (FSTEC) has certified a custom PostgreSQL version released by Postgres Professional for use in data processing systems for personal data and classified information.

#### Conformance to the SQL Standard

As the ANSI SQL standard evolves, its support is constantly being added to PostgreSQL. This is true for all versions of the standard, from SQL-92 to the most recent SQL:2016, which standardized JSON support. Much of this functionality is already implemented in PostgreSQL 12.

In general, PostgreSQL provides a high rate of standard conformance, supporting 160 out of 179 mandatory features and many optional ones.

#### Transaction Support

PostgreSQL provides full support for ACID properties and ensures effective transaction isolation using the multi-version concurrency control method (MVCC). This method avoids locking in all cases except for concurrent updates of the same row by different processes. Reading transactions never block writing ones, and writing never blocks reading. This is true even for the strictest serializable isolation level.

Using an innovative Serializable Snapshot Isolation system, this level ensures that there are no serialization anomalies and guarantees that concurrent transaction execution produces the same result as sequential execution.

#### For Application Developers

Application developers get a rich toolset for creating applications of any type:
- Support for various server programming languages: built-in PL/pgSQL (closely integrated with SQL), C for performance-critical tasks, Perl, Python, Tcl, as well as JavaScript, Java, etc.
- APIs to access the database from applications written in virtually any language, including the standard ODBC and JDBC APIs.
- A selection of database objects that allow for the effective implementation of any complexity on the server side: tables and indexes, sequences, integrity constraints, views and materialized views, partitioning, subqueries and with-queries (including recursive ones), aggregate and window functions, stored functions, triggers, etc.
- A flexible full-text search system with support for all European languages (including Russian), extended with effective index access methods.
- Semi-structured data, similar to NoSQL: hstore storage for key/value pairs, XML, JSON (represented as text or in an efficient binary format, jsonb).
- Foreign Data Wrappers. This feature allows adding new data sources as external tables by the SQL/MED standard. You can use any major database as an external data source. PostgreSQL provides full support for foreign data, including write access and distributed query execution.

#### Scalability and Performance

PostgreSQL takes advantage of modern multi-core processor architecture. Its performance grows almost linearly as the number of cores increases.

Starting from version 9.6, PostgreSQL supports concurrent data processing. Version 10 enabled parallel reads (including index scans), joins, and data aggregation. Version 11 added full support for parallel hash join, where several workers build and use a single hash table. Additionally, parallel scan of partitioned tables and parallel index creation were implemented.

Version 12 offers query parallelization at the serializable isolation level, JIT-compilation of queries that can speed up operations by better use of hardware resources, and many other optimizations.

#### Query Planner

PostgreSQL uses a cost-based query planner. Using collected statistics and taking into account both disk operations and CPU time in its mathematical models, the planner can optimize most complex queries. It can use all access methods and join types available in state-of-the-art commercial database systems.

#### Indexing

PostgreSQL provides various types of indexes. Apart from traditional B-trees, you can use many other access methods:
- Hash, a hash-based index. Unlike B-trees, such indexes work only for equality checks but can prove to be more efficient and compact in some cases.
- GiST, a generalized balanced search tree. This access method is used for data that cannot be ordered. For example, R-trees used to index points on a surface and allow fast k-nearest neighbors (k-NN) search, or indexing overlapping intervals.
- SP-GiST, a generalized non-balanced tree based on dividing the search range into non-intersecting nested partitions. For example, quad-trees for spatial data and radix trees for text strings.
- GIN, a generalized inverted index, which is used for compound multi-element values. It is mainly applied in full-text search to find documents that contain the word used in the search query. Another example is searching elements in data arrays.
- RUM, an enhancement of the GIN method for full-text search. Available as an extension, this index type can speed up phrase search and return results sorted by relevance.
- BRIN, a compact structure that provides a trade-off between index size and search efficiency. Such an index is useful for big clustered tables.
- Bloom, an index based on a Bloom filter. Having a compact representation, this index can quickly filter out non-matching tuples but requires re-checking of the remaining ones.

Many index types can be built upon both a single column and multiple columns. Regardless of the type, you can build indexes not only on columns but also on arbitrary expressions, as well as create partial indexes for specific rows. Covering indexes can speed up queries as all the required data is retrieved from the index itself, avoiding heap access.

The planner can use bitmap scans, which allow combining several indexes for faster access.

#### Cross-Platform Support

PostgreSQL runs on both Unix operating systems (including server and client Linux distributions, FreeBSD, Solaris, and macOS) and Windows systems. Its portable open-source C code allows PostgreSQL to be built on a variety of platforms, even if there is no package supported by the community.

#### Extensibility

One of the main advantages of PostgreSQL's architecture is extensibility. Without changing the core system code, users can add the following features:
- Data types
- Functions and operators to support new data types
- Index and table access methods
- Server programming languages
- Foreign data wrappers
- Loadable extensions

Full-fledged support for extensions enables you to develop new features of any complexity that can be installed on demand, without changing the PostgreSQL core. For example, the following complex systems are built as extensions:
- CitusDB, which implements data distribution between different PostgreSQL instances (sharding) and massively parallel query execution.
- PostGIS, one of the most popular and powerful geo-information data processing systems.

The standard PostgreSQL 12 package alone includes about fifty extensions that have proven to be useful and reliable.

#### Availability

A liberal PostgreSQL license, similar to BSD and MIT licenses, allows for the unlimited use of PostgreSQL, as well as its code modification and integration into other products, including commercial and closed-source software.

#### Independence

PostgreSQL does not belong to any company; it is developed by an international community, which includes developers from all over the world. This means that systems using PostgreSQL do not depend on a particular vendor, thus keeping investments safe in any circumstances.

## II. What’s New in PostgreSQL 12

If you are familiar with previous versions of PostgreSQL, this chapter can give you a sense of what has changed in the latest version. It mentions only some of the updates; for the full list of changes, see the Release Notes, as usual: postgrespro.com/docs/postgresql/12/release-12.

### Partitioning

Previously, partitioning could only be achieved with the help of inheritance, exclusion constraints, and triggers that had to be manually applied to tables. In version 10, the long-awaited declarative partitioning appeared, allowing you to declare a table as partitioned right at the time of its creation. Originally quite limited, this functionality is being actively developed and improved in each new version.

Version 11 added support for uniqueness constraints for partitioned tables, but foreign-key references were not implemented. Now, this oversight has been corrected.

Apart from this major enhancement, version 12 also introduced multiple other performance improvements that speed up queries on partitioned tables (including those with thousands of partitions), reduce locking requirements for utility commands, and facilitate maintenance tasks.

Global indexes on partitioned tables are not implemented yet but are being actively discussed in the mailing list.

### Indexes

B-tree indexes get smaller: this enhancement applies to multi-column indexes and indexes that contain duplicated data. Additionally, insertion operations for B-tree indexes have been accelerated.

Other indexes have also been improved:
- The WAL write overhead of GiST, GIN, and SP-GiST index creation has been reduced.
- GiST indexes can now have additional columns specified in the INCLUDE clause, which can be used to make them covering (in the previous version, this functionality was available for B-tree indexes only).
- SP-GiST indexes now support k-nearest neighbors (k-NN) search, just like GiST. Support for B-tree is on the way.

The `REINDEX CONCURRENTLY` command has been added, which can rebuild an index without locking write operations. Previously, the same effect could be achieved by using `CREATE` and `DROP INDEX CONCURRENTLY` commands, but replacing an index supporting integrity constraints still required a short exclusive lock.

### Query Execution and Optimization

Multi-column (extended) statistics, which first appeared in version 10, can improve the planner’s estimates as they take into account functional dependencies and the number of distinct values. Now, extended statistics also support most-common-value (MCV) lists.

You can adjust the estimates by specifying the expected selectivity, cardinality, and cost for particular functions depending on their parameter values.

Common table expressions can now be inlined into a query, so the planner can optimize them together with the main query. This feature changes the default behavior, which can be restored by explicitly using `MATERIALIZED`.

You can now choose between custom and generic plans for prepared statements using a server parameter. Previously, there was no way to forbid the use of generic plans, which could lead to non-optimal query execution.

Queries can now be parallelized at the serializable isolation level. Since the previous version implemented predicate locks for GiST, GIN, and Hash indexes, the serializable level is now more robust.