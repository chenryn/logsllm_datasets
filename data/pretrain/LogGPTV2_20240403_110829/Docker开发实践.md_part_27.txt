### 登录认证
- **成功**：返回状态码200。
- **失败**：返回状态码401，表示认证失败。

我们推荐使用第二种方法进行登录，因为它更为直观。实际上，两种方法在本质上是相同的——`--user`字段最终也会被转换为`Authorization`字段。读者可以通过`curl`的`-v`参数查看具体的交互过程。

### 新建仓库
用户可以通过API的形式在Docker Hub上创建镜像仓库，此时需要提供命名空间和仓库名。通常情况下，命名空间即为用户名。

#### 方法
```
PUT /v1/repositories/(namespace)/(repo_name)/
```

#### 请求示例
```
PUT /v1/repositories/foo/bar/ HTTP/1.1
Host: index.docker.io
Accept: application/json
Content-Type: application/json
Authorization: Basic akmklmasadalkm==
X-Docker-Token: true
[{"id": "9e89cc6f0bc3c38722009fe6857087b486531f9a779a0c17e3ed29dae8f12c4f"}]
```

#### 返回示例
```
HTTP/1.1 200
Vary: Accept
Content-Type: application/json
WWW-Authenticate: Token signature=123abc,repository="foo/bar",access=write
X-Docker-Token: signature=123abc,repository="foo/bar",access=write
X-Docker-Endpoints: registry-1.docker.io [, registry-2.docker.io]
```

#### 参数
- 无

#### 状态码
- **200**：创建成功。
- **400**：请求错误，通常是由于JSON格式或参数错误导致。
- **401**：认证失败。
- **403**：账户未激活。

#### `curl`操作示例
```bash
$ curl -v -L -X PUT --user helloworld:123456 -H "Accept: application/json" -H "Content-Type:application/json" --post301 https://index.docker.io/v1/repositories/helloworld/foo2 -d '[{"id":"1cb837a9709a2fff9591c4ca4ff6f336b0c98308ac1bbb493179888787a6c691"}]'
```

### 上传镜像
要将一个本地镜像上传到Docker Hub中，需分两步完成：首先，将本地镜像标记为Docker Hub中的相应镜像；然后，通过`push`操作将该镜像从本地上传至Docker Hub。

#### 本地现有镜像
```bash
micall@micall-ThinkPad:~$ docker images
REPOSITORY            TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
dockerfile/redis      latest              1cb837a9709a        2 weeks ago         419.1 MB
progrium/ambassadord  latest              ebc261f84aa4        3 weeks ago         224.4 MB
ubuntu                latest              86ce37374f40        7 weeks ago         192.7 MB
minimicall/node_web   0.1                 730770dff17f        7 weeks ago         268.7 MB
```

#### 标记镜像
假设我们要将`dockerfile/redis`上传至`helloworld`用户的`foo`仓库，则需先将其签入`helloworld/foo`：
```bash
$ curl -v -X POST http://localhost:2376/images/dockerfile/redis/tag?repo=minimicall/foo&tag=latest
```

标记完成后，可以发现`minimicall/foo`镜像与`dockerfile/redis`完全一致：
```bash
micall@micall-ThinkPad:~$ docker images
REPOSITORY            TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
dockerfile/redis      latest              1cb837a9709a        2 weeks ago         419.1 MB
minimicall/foo        latest              1cb837a9709a        2 weeks ago         419.1 MB
```

#### 上传镜像
```bash
$ XAR=`echo '{"username":"minimicall","password":"110110","email":"PI:EMAIL","serveraddress":"index.docker.io"}' | base64 --wrap=0`
$ echo $XAR
eyJ1c2VybmFtZSI6Im1pbmltaWNhbGwiLCJwYXNzd29yZCI6IjExMDExMCIsImVtYWlsIjoiNDcwOTEwMzU3QHFxLmNvbSIsInNlcnZlcmFkZHJlc3MiOiJpbmRleC5kb2NrZXIuaW8ifQo=
$ curl -v -X POST -L --post301 -H "X-Registry-Auth:$XAR" http://localhost:2376/images/minimicall/node_web/push
```

上述命令中，我们首先生成了包含用户名、密码、邮箱及服务器地址的Base64编码字符串，并将其赋值给变量`XAR`。上传过程中，需要在HTTP头中加入`X-Registry-Auth`字段，其值为`XAR`的值。上传所需时间取决于镜像大小及网络状况。

### 下载镜像
下载镜像是创建镜像的一种方式。

#### 方法
```
POST /images/create
```

#### 请求示例
```
POST /images/create?fromImage=base HTTP/1.1
```

#### 返回示例
```
HTTP/1.1 200 OK
Content-Type: application/json
{"status":"Pulling..."}
{"status":"Pulling", "progress":"1 B/ 100 B", "progressDetail":{"current":1, "total":100}}
{"error":"Invalid..."}
...
```

#### 参数
- **fromImage**：基础镜像。
- **fromSrc**：导入源，一个可以获得镜像的URL地址。
- **repo**：仓库。
- **tag**：标签。
- **registry**：拉取镜像的注册服务器。

#### `curl`操作示例
```bash
$ curl -v -X POST http://localhost:2376/images/create?fromImage=minimicall/foo&tag=latest
```

### 使用docker-py库编程
#### 安装验证
确保`docker-py`已正确安装：
```python
>>> import docker
>>>
```

如果未出现错误提示，则说明`docker-py`已成功安装。

#### 连接Docker后台
有两种连接方式：TCP和Unix socket。以下是一个连接Docker后台的例子：

```python
import docker
cli = docker.Client(base_url='tcp://127.0.0.1:2376')
# cli = docker.Client(base_url='unix://var/run/docker.sock')
print(cli.info())
```

#### 查看本地镜像
创建并运行`doc_images.py`文件以查看本地所有镜像：

```python
import docker
cli = docker.Client('tcp://127.0.0.1:2376')
print(cli.images())
```

#### 构建容器
直接在Python环境中构建一个基于`busybox`的容器：

```python
from io import BytesIO
from docker import Client

dockerfile = '''
# Shared Volume
FROM busybox:buildroot-2014.02
MAINTAINER minimicall, PI:EMAIL
VOLUME /data
CMD ["/bin/sh"]
'''

f = BytesIO(dockerfile.encode('utf-8'))
cli = Client(base_url='tcp://127.0.0.1:2376')
response = [line for line in cli.build(fileobj=f, rm=True, tag='minimicall/volume')]
print(response)
```

#### 启动容器
以新创建的镜像为基础启动容器：

```python
container = cli.create_container(image='busybox:latest', command='/bin/sleep 30')
print(container)
```

更多关于`docker-py` API编程的内容，请访问其官网：[https://github.com/docker/docker-py](https://github.com/docker/docker-py)。