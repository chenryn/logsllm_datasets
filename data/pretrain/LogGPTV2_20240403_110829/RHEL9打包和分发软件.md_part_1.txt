[]{#index.html}
::: book
::: titlepage
::: producttitle
[Red Hat Enterprise Linux]{.productname} [9]{.productnumber}
:::
# []{#index.html#idm140427920019184}打包和分发软件 {.title}
## 在 Red Hat Enterprise Linux 9 中打包和发布软件的指南 {.subtitle}
::: abstract
**摘要**
本文档论述了如何将软件打包到 RPM
中。它还演示了如何准备源代码以打包，并解释所选的高级打包场景，如将
Python 项目打包或 RubyGems 打包到 RPM 中。
:::
------------------------------------------------------------------------
:::
:::
[]{#making-open-source-more-inclusive.html}
::: preface
::: titlepage
# []{#making-open-source-more-inclusive.html#making-open-source-more-inclusive}让开源更具包容性 {.title}
:::
红帽致力于替换我们的代码、文档和 Web
属性中存在问题的语言。我们从这四个术语开始：master、slave、黑名单和白名单。由于此项工作十分艰巨，这些更改将在即将推出的几个发行版本中逐步实施。详情请查看
[CTO Chris Wright
的信息](https://www.redhat.com/en/blog/making-open-source-more-inclusive-eradicating-problematic-language){.link}。
:::
[]{#proc_providing-feedback-on-red-hat-documentation_packaging-and-distributing-software.html}
::: preface
::: titlepage
# []{#proc_providing-feedback-on-red-hat-documentation_packaging-and-distributing-software.html#proc_providing-feedback-on-red-hat-documentation_packaging-and-distributing-software}对红帽文档提供反馈 {.title}
:::
我们感谢您对文档提供反馈信息。请让我们了解如何改进文档。
::: itemizedlist
-   关于特定内容的简单评论：
    ::: orderedlist
    1.  请确定您使用 [*Multi-page HTML*]{.emphasis}
        格式查看文档。另外，确定 [**Feedback**]{.strong}
        按钮出现在文档页的右上方。
    2.  用鼠标指针高亮显示您想评论的文本部分。
    3.  点在高亮文本上弹出的 [**Add Feedback**]{.strong}。
    4.  按照显示的步骤操作。
    :::
:::
::: itemizedlist
-   要通过 Bugzilla 提交反馈，请创建一个新的问题单：
    ::: orderedlist
    1.  进入
        [Bugzilla](https://bugzilla.redhat.com/enter_bug.cgi?product=Red%20Hat%20Enterprise%20Linux%209){.link}
        网站。
    2.  在 Component 中选择 [**Documentation**]{.strong}。
    3.  在 [**Description**]{.strong}
        中输入您要提供的信息。包括文档相关部分的链接。
    4.  点 [**Submit Bug**]{.strong}。
    :::
:::
:::
[]{#getting-started-with-rpm-packaging_packaging-and-distributing-software.html}
::: chapter
::: titlepage
# []{#getting-started-with-rpm-packaging_packaging-and-distributing-software.html#getting-started-with-rpm-packaging_packaging-and-distributing-software}第 1 章 RPM 打包入门 {.title}
:::
RPM Package Manager(RPM)是一个在 Red Hat Enterprise Linux、CentOS 和
Fedora 上运行的软件包管理系统。您可以使用 RPM
为上述任何所述操作系统分发、管理和更新创建的软件。
与传统存档文件中软件分发相比，RPM 软件包管理系统带来了一些优势。
RPM 可让您：
::: itemizedlist
-   使用标准软件包管理工具（如 DNF 或
    PackageKit）安装、重新安装、删除、升级和验证软件包。
-   使用已安装软件包的数据库查询和验证软件包。
-   使用元数据描述软件包、安装说明和其他软件包参数。
-   将软件源、补丁和完成构建指令打包为源代码和二进制软件包。
-   在 DNF 软件仓库中添加软件包。
-   使用 GNU Privacy Guard(GPG)签名密钥来数字签名您的软件包。
:::
:::
[]{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html}
::: chapter
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#preparing-software-for-rpm-packaging_packaging-and-distributing-software}第 2 章 为 RPM 打包准备软件 {.title}
:::
本节介绍如何为 RPM
打包准备软件。为此，了解如何执行代码。但是，您需要了解基本概念，例如
[什么是源代码](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#what-is-source-code_preparing-software-for-rpm-packaging "什么是源代码"){.link}
以及程序是如何
[制作的程序](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#how-programs-are-made_preparing-software-for-rpm-packaging "如何提交程序"){.link}。
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#what-is-source-code_preparing-software-for-rpm-packaging}什么是源代码 {.title}
:::
这部分解释了什么是源代码，并显示了使用三种不同编程语言编写的程序的源代码示例。
源代码是对计算机的人类可读指令，描述如何执行计算。源代码使用编程语言表达。
本文档提供三个使用三种不同编程语言编写的 `Hello World`{.literal}
程序版本：
::: itemizedlist
-   [使用 bash 编写的 hello
    World](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-bash_preparing-software-for-rpm-packaging "例 2.1. 使用 bash 编写的 hello World"){.link}
-   [使用 Python 编写 hello
    World](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-python_preparing-software-for-rpm-packaging "例 2.2. 使用 Python 编写 hello World"){.link}
-   [使用 C 语言编写的 hello
    World](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-c_preparing-software-for-rpm-packaging "例 2.3. 使用 C 语言编写的 hello World"){.link}
:::
每个版本都以不同的方式进行打包。
这些版本的 `Hello World`{.literal} 程序涵盖了 RPM
软件包器的三个主要用例。
::: example
[]{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-bash_preparing-software-for-rpm-packaging}
**例 2.1. 使用 bash 编写的 hello World**
::: example-contents
[*bello*]{.emphasis} 项目在
[bash](https://www.gnu.org/software/bash/){.link} 中实施
`Hello World`{.literal}。该实施仅包含 `bello`{.literal} shell
脚本。程序的目的是在命令行中输出 `Hello World`{.literal}。
`bello`{.literal} 文件使用以下语法：
``` literallayout
#!/bin/bash
printf "Hello World\n"
```
:::
:::
::: example
[]{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-python_preparing-software-for-rpm-packaging}
**例 2.2. 使用 Python 编写 hello World**
::: example-contents
[*pello*]{.emphasis} 项目使用 [Python](https://www.python.org/){.link}
实施 `Hello World`{.literal}。该实施仅包含 `pello.py`{.literal}
程序。程序的目的是在命令行中输出 `Hello World`{.literal}。
`pello.py`{.literal} 文件的语法如下：
``` literallayout
#!/usr/bin/python3
print("Hello World")
```
:::
:::
::: example
[]{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-c_preparing-software-for-rpm-packaging}
**例 2.3. 使用 C 语言编写的 hello World**
::: example-contents
[*cello*]{.emphasis} 项目使用 C 实施 `Hello World`{.literal}。实施仅包含
`cello.c`{.literal} 和 `Makefile`{.literal} 文件，因此生成的
`tar.gz`{.literal} 存档除了 `LICENSE`{.literal} 文件外有两个文件。
程序的目的是在命令行中输出 `Hello World`{.literal}。
`unito.c`{.literal} 文件使用以下语法：
``` literallayout
#include 
int main(void) {
    printf("Hello World\n");
    return 0;
}
```
:::
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#how-programs-are-made_preparing-software-for-rpm-packaging}如何提交程序 {.title}
:::
从人类可读源代码转换为机器代码（计算机遵循执行程序）的方法包括：
::: itemizedlist
-   程序被[原生编译](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#natively-compiled-code_preparing-software-for-rpm-packaging "原生编译代码"){.link}。
-   程序由[原始解释器](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#raw-interpreted-code_preparing-software-for-rpm-packaging "Raw-interpreted 程序"){.link}进行解释。
-   程序通过[字节编译](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#byte-compiled-code_preparing-software-for-rpm-packaging "comp-compiled 程序"){.link}进行解释。
:::
::: section
::: titlepage
## []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#natively-compiled-code_preparing-software-for-rpm-packaging}原生编译代码 {.title}
:::
原生编译的软件是使用编程语言编写的软件，使用生成的二进制可执行文件编译到机器代码中。这些软件可以独立运行。
以这种方式构建的 RPM 软件包是特定于架构的。
如果您在使用 64 位(x86_64)AMD 或 Intel
处理器的计算机中编译此类软件，则无法在 32 位(x86)AMD 或 Intel
处理器上执行。生成的软件包的名称指定了架构。
:::
::: section
::: titlepage
## []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#interpreted-code_preparing-software-for-rpm-packaging}解释代码 {.title}
:::
有些编程语言（如 [bash](https://www.gnu.org/software/bash/){.link} 或
[Python](https://www.python.org/){.link}
）不编译到机器代码中。相反，其程序的源代码是在无需进行提前处理的情况下，按步骤直接执行源代码。这是通过相关语言的解析器或一个语言虚拟机实现的。
完全使用解释编程语言编写的软件特定于架构。因此，生成的 RPM
软件包的名称中包含 `noarch`{.literal} 字符串。
解释语言为 [Raw-interpreted
程序](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#raw-interpreted-code_preparing-software-for-rpm-packaging "Raw-interpreted 程序"){.link}，也可以是
[编译程序](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#byte-compiled-code_preparing-software-for-rpm-packaging "comp-compiled 程序"){.link}。这两种类型的程序构建过程和打包过程会有所不同。
::: section
::: titlepage
### []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#raw-interpreted-code_preparing-software-for-rpm-packaging}Raw-interpreted 程序 {.title}
:::
原始解释的语言程序不需要编译，并由解释器直接执行。
:::
::: section
::: titlepage
### []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#byte-compiled-code_preparing-software-for-rpm-packaging}comp-compiled 程序 {.title}
:::
字节编译型语言需要编译成字节代码，然后由语言虚拟机执行。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
有些语言提供了一个选择：它们可以是原始解释的形式或字节编译的形式。
:::
:::
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#building-software-from-source_preparing-software-for-rpm-packaging}从源构建软件 {.title}
:::
对于使用编译语言编写的软件，源代码将通过构建流程生成机器代码。这个过程通常称为编译或转换，不同的语言会有所不同。所生成的构建软件可以被运行，使计算机执行程序员指定的任务。
对于使用原始解释语言编写的软件，源代码不会被构建，而是直接执行。
对于以字节编译的解释语言编写的软件，源代码将编译成字节代码，然后由语言虚拟机执行。
以下子章节描述了如何从源代码构建软件。
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#building-software-from-natively-compiled-code_preparing-software-for-rpm-packaging}从原生编译的代码构建软件 {.title}
:::
本节演示了如何将 C 语言编写的 `cello.c`{.literal} 程序构建成可执行文件。