# 五、Docker 容器的安全性和服务质量
在本章中，我们将学习如何在一般容器的上下文中实现安全性，以及如何实现服务质量策略，以确保像中央处理器和输入输出这样的资源按预期共享。大部分讨论将集中在这些主题在 Docker 上下文中的相关性。
我们将在本章中介绍以下内容:
*   文件系统限制
    *   只读挂载点
    *   写时复制
*   Linux 功能和 Docker
*   在 AWS ECS 中保护容器(EC2 容器服务)
*   理解 Docker 安全性 I–内核名称空间
*   了解 Docker 安全二–用户组
*   使用设备保护 Docker 容器
*   Docker 安全基准
# 文件系统限制
在本节中，我们将研究 Docker 容器启动时的文件系统限制。下一节解释只读挂载点和写时复制文件系统，它们被用作 Docker 容器和内核对象表示的基础。
## 只读挂载点
Docker 需要访问文件系统，如 sysfs 和 proc，以便进程运行。但是不一定需要修改这些挂载点。
以只读模式加载的两个主要挂载点是:
*   `/sys`
*   `/proc`
### sysfs
sysfs 文件系统被加载到挂载点`/sys`。sysfs 是一种用于表示内核对象、其属性及其相互关系的机制。它提供了两个组件:
*   内核编程接口，用于通过 sysfs 导出这些项目
*   查看和操作这些项目的用户界面，这些项目映射回它们所代表的内核对象
以下代码显示了正在安装的安装点:
```
{
  Source:      "sysfs",
  Destination: "/sys",
  Device:      "sysfs",
  Flags:       defaultMountFlags | syscall.MS_RDONLY,
},
```
前面代码的参考链接位于[https://github . com/docker/docker/blob/ECC 3717 CB 17313186 ee 711 e 624 b 960 b 096 a 9334 f/daemon/exec driver/native/template/default _ template _ Linux . go](https://github.com/docker/docker/blob/ecc3717cb17313186ee711e624b960b096a9334f/daemon/execdriver/native/template/default_template_linux.go)。
### procfs
proc 文件系统(procfs)是类似 Unix 的操作系统中的一个特殊文件系统，它以类似文件的分层结构呈现关于进程和其他系统信息的信息。载入`/proc`。与传统的跟踪方法或直接访问内核内存相比，它为动态访问保存在内核中的进程数据提供了一种更方便、更标准化的方法。它在引导时被映射到名为`/proc`的挂载点:
```
{
  Source:      "proc",
  Destination: "/proc",
  Device:      "proc",
  Flags:       defaultMountFlags,
},
```
只读路径与`/proc`:
```
ReadonlyPaths: []string{
  "/proc/asound",
  "/proc/bus",
  "/proc/fs",
  "/proc/irq",
  "/proc/sys",
  "/proc/sysrq-trigger",
}
```
### /dev/pts
这是另一个装载点，在创建过程中作为容器的读写装载。`/dev/pts`纯粹存在于内存中，磁盘上没有存储任何东西，因此以读写模式加载是安全的。
`/dev/pts`中的条目是伪端子(简称 pty)。Unix 内核有一个通用的终端概念。终端为应用提供了一种通过终端设备显示输出和接收输入的方式。一个进程可以有一个控制终端。对于文本模式应用，这是它与用户交互的方式:
```
{
  Source:      "devpts",
  Destination: "/dev/pts",
  Device:      "devpts",
  Flags:       syscall.MS_NOSUID | syscall.MS_NOEXEC,
  Data:        "newinstance,ptmxmode=0666,mode=0620,gid=5",
},
```
### /sys/fs/cggroup
这是实现组的挂载点，并作为容器的`MS_RDONLY`加载:
```
{
  Source:      "cgroup",
  Destination: "/sys/fs/cgroup",
  Device:      "cgroup",
  Flags:       defaultMountFlags | syscall.MS_RDONLY,
},
```
## 写入时复制
Docker 使用联合文件系统，这是一种写时复制文件系统。这意味着容器可以使用与容器基础相同的文件系统映像。当容器将内容写入映像时，它会被写入容器特定的文件系统。它会阻止一个容器访问另一个容器的更改，即使这些更改是从同一文件系统映像创建的。一个容器不能通过更改映像内容来影响另一个容器中的进程。下图解释了这一过程:
![Copy-on-write](img/00041.jpeg)
# Linux 功能
1.2 之前的 Docker 容器可以在权限模式下被赋予完整的功能，或者它们都可以遵循允许功能的白名单，同时丢弃所有其他功能。如果使用标志`--privileged`，它将授予容器所有的能力。这是不建议生产使用的，因为它真的不安全；它允许 Docker 作为直接主机下的进程的所有权限。
在 Docker 1.2 中，`docker run`引入了两个标志:
*   `--cap-add`
*   `--cap-drop`
这两个标志为容器提供细粒度控制，例如:
*   更改 Docker 容器界面的状态:
    ```
    docker run --cap-add=NET_ADMIN busybox sh -c "ip link eth0 down"
    ```
*   防止 Docker 容器中的任何杂烩:
    ```
    docker run --cap-drop=CHOWN ...
    ```
*   Allow all capabilities except `mknod`:
    ```
    docker run --cap-add=ALL --cap-drop=MKNOD ...
    ```
    默认情况下，Docker 用一组受限的功能启动容器。功能将根和非根的二进制模式转换为更细粒度的访问控制。例如，服务于 HTTP 请求的 web 服务器需要绑定到端口 80(对于 HTTP)和端口 443(对于 HTTPs)。这些服务器不需要在根模式下运行。这些服务器可以被授予`net_bind_service`功能。
    在这种情况下，容器和服务器有点不同。服务器需要在根模式下运行一些进程。例如，ssh、cron 和处理 dhcp 的网络配置等等。另一方面，容器不需要这种访问。
    以下任务不需要发生在容器中:
    *   ssh 访问由 Docker 主机管理
    *   cron 作业应该在用户模式下运行
    *   像 ipconfig 和路由这样的网络配置不应该发生在容器内部
    我们可以安全地推断容器可能不需要根权限。
    可以否认的例子如下:
    *   不允许装载操作
    *   不允许访问套接字
    *   防止访问文件系统操作，如更改文件属性或文件所有权
    *   防止容器装载新模块
    Docker 只允许以下功能:
    ```
    Capabilities: []string{
      "CHOWN",
      "DAC_OVERRIDE",
      "FSETID",
      "FOWNER",
      "MKNOD",
      "NET_RAW",
      "SETGID",
      "SETUID",
      "SETFCAP",
      "SETPCAP",
      "NET_BIND_SERVICE",
      "SYS_CHROOT",
      "KILL",
      "AUDIT_WRITE",
    },
    ```
    前面代码的参考位于[https://github . com/docker/docker/blob/master/daemon/exec driver/native/template/default _ template _ Linux . go](https://github.com/docker/docker/blob/master/daemon/execdriver/native/template/default_template_linux.go)。
    在 Linux 手册页中可以找到可用功能的完整列表([http://man7.org/linux/man-pages/man7/capabilities.7.html](http://man7.org/linux/man-pages/man7/capabilities.7.html))。
    运行 Docker 容器的一个主要风险是，提供给容器的默认功能和装载集可能会提供不完全的隔离，无论是单独使用还是与内核漏洞结合使用。
    Docker 支持添加和删除功能，允许使用非默认配置文件。这可能会通过移除功能使 Docker 更安全，或者通过添加功能使 Docker 更不安全。对用户来说，最好的做法是删除所有功能，除了那些流程明确需要的功能。
# 将容器固定在自动气象站电子控制系统中
亚马逊 **EC2 容器服务** ( **ECS** )提供高度可扩展的高性能容器管理服务，支持 Docker 容器。它允许您在亚马逊 EC2 实例的托管集群上轻松运行应用。Amazon ECS 让您无需安装、操作和扩展自己的集群管理基础架构。通过简单的 API 调用，您可以启动和停止支持 Docker 的应用，并查询集群的完整状态。
在下面的示例中，我们将看到如何使用两个 Docker 容器部署安全的 web 应用，一个容器包含简单的 web 应用(应用容器)，另一个容器包含启用了节流的反向代理(代理容器)，可用于保护 web 应用。这些容器将使用 ECS 部署在亚马逊 EC2 实例上。从下图中可以看出，所有网络流量都将通过抑制请求的代理容器进行路由。此外，我们可以使用各种安全软件在代理容器上执行过滤、日志记录和入侵检测等活动。
以下是这样做的步骤:
1.  我们将从 GitHub 项目中构建一个基本的 PHP web 应用容器。以下步骤可以在单独的 EC2 实例或本地机器上执行:
    ```
    $ sudo yum install -y git
    $ git clone https://github.com/awslabs/ecs-demo-php-simple-app
    ```
2.  将目录更改到`ecs-demo-php-simple-app`文件夹:
    ```
    $ cd ecs-demo-php-simple-app
    ```
3.  我们可以如下检查`Dockerfile`以了解它将部署的 web 应用:
    ```
    $ cat Dockerfile
    ```
4.  Build the container image using Dockerfile and then push it in your Docker Hub account. The Docker Hub account is required as it helps to deploy the containers on the Amazon ECS service by just specifying the container name:
    ```
    $ docker build -t my-dockerhub-username/amazon-ecs-sample.
    ```
    这里建立的映像需要有`dockerhub-username`(没有空格的正确)作为第一参数。
    下图描述了一名黑客无法访问 web 应用，因为该请求是通过代理容器过滤的，并且访问被阻止:
    ![Securing containers in AWS ECS](img/00042.jpeg)
5.  将 Docker 映像上传至 Docker 中心账户:
    ```
    $ docker login
    ```
6.  检查以确保您的登录成功:
    ```
    $ docker info
    ```
7.  将您的映像推送到 Docker Hub 帐户:
    ```
    $ docker push my-dockerhub-username/amazon-ecs-sample
    ```
8.  After creating the sample web application Docker container, we will now create the proxy container, which can also contain some security-related software, if required, in order to strengthen security. We will create a new proxy Docker container using a customized Dockerfile and then push the image to your Docker Hub account:
    ```
    $ mkdir proxy-container