title:FlowFence: Practical Data Protection for Emerging IoT Application
Frameworks
author:Earlence Fernandes and
Justin Paupore and
Amir Rahmati and
Daniel Simionato and
Mauro Conti and
Atul Prakash
FlowFence: Practical Data Protection for Emerging 
IoT Application Frameworks
Earlence Fernandes, Justin Paupore, and Amir Rahmati, University of Michigan;  
Daniel Simionato and Mauro Conti, University of Padova;  
Atul Prakash, University of Michigan
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/fernandes
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX FlowFence: Practical Data Protection for
Emerging IoT Application Frameworks
Earlence Fernandes1, Justin Paupore1, Amir Rahmati1, Daniel Simionato2
Mauro Conti2, Atul Prakash1
1University of Michigan
2University of Padova
Abstract
Emerging IoT programming frameworks enable build-
ing apps that compute on sensitive data produced by
smart homes and wearables. However, these frameworks
only support permission-based access control on sensi-
tive data, which is ineffective at controlling how apps
use data once they gain access. To address this limita-
tion, we present FlowFence, a system that requires con-
sumers of sensitive data to declare their intended data
flow patterns, which it enforces with low overhead, while
blocking all other undeclared flows. FlowFence achieves
this by explicitly embedding data flows and the related
control flows within app structure. Developers use Flow-
Fence support to split their apps into two components:
(1) A set of Quarantined Modules that operate on sensi-
tive data in sandboxes, and (2) Code that does not operate
on sensitive data but orchestrates execution by chaining
Quarantined Modules together via taint-tracked opaque
handles—references to data that can only be derefer-
enced inside sandboxes. We studied three existing IoT
frameworks to derive key functionality goals for Flow-
Fence, and we then ported three existing IoT apps. Se-
curing these apps using FlowFence resulted in an aver-
age increase in size from 232 lines to 332 lines of source
code. Performance results on ported apps indicate that
FlowFence is practical: A face-recognition based door-
controller app incurred a 4.9% latency overhead to rec-
ognize a face and unlock a door.
1
Introduction
The Internet of Things (IoT) consists of several data-
producing devices (e.g., activity trackers, presence de-
tectors, door state sensors), and data-consuming apps
that optionally actuate physical devices. Much of this
data is privacy sensitive, such as heart rates and home
occupancy patterns. More importantly, we are see-
ing an emergence of application frameworks that en-
able third party developers to build apps that compute
on such data—Samsung SmartThings [55], Google Bril-
lo/Weave [30], Vera [5], and Apple HomeKit [8] are a
few examples.
Consider a smart home app that allows unlocking a
door via face recognition using a camera at the door.
Home owners may also want to check the state of the
door from a secure Internet site (thus, the app requires
Internet access). Additionally, the user also wants to en-
sure that the app does not leak camera data to the Inter-
net. Although this app is useful, it also has the potential
to steal camera data. Therefore, enabling apps to com-
pute on sensitive data the IoT generates, while preventing
data abuse, is an important problem that we address.
Current approaches to data security in emerging
IoT frameworks are modeled after existing smartphone
In particular, IoT frameworks use
frameworks (§2).
permission-based access control for data sources and
sinks, but they do not control flows between the autho-
rized sources and sinks. This method has already proved
to be inadequate, as is evident from the growing re-
ports of data-stealing malware in the smartphone [73]
and browser extension spaces [36, 14]. The fundamen-
tal problem is that users have no choice but to take it on
faith that an app will not abuse its permissions. Instead,
we need a solution that forces apps to make their data use
patterns explicit, and then enforce the declared informa-
tion flows, while preventing all other flows.
Techniques like the recognizer OS abstraction [39]
could enable privacy-respecting apps by reducing the fi-
delity of data released to apps so that non-essential but
privacy violating data is removed. However, these tech-
niques fundamentally depend on the characteristics of a
particular class of applications (§7). For example, image
processing apps may not need HD camera streams and,
thus, removing detail from those streams to improve pri-
vacy is feasible. However, this may not be an option in
the general case for apps operating on other types of sen-
sitive data.
Dynamic or static taint analysis has been suggested
USENIX Association  
25th USENIX Security Symposium  531
as a method to address the limitations of the above
permission-based systems [60, 53]. Unfortunately, cur-
rent dynamic taint analysis techniques have difficulty in
dealing with implicit flows and concurrency [59], may
require specialized hardware [70, 54, 65], or tend to
have significant overhead [48]. Static taint analysis tech-
niques [9, 21, 66, 45] alleviate run-time performance
overhead issues, but they still have difficulty in han-
dling implicit flows. Furthermore, some flow-control
techniques require developers to use special-purpose lan-
guages, for example, JFlow [45].
We present FlowFence, a system that enables ro-
bust and efficient flow control between sources and
sinks in IoT applications. FlowFence addresses several
challenges including not requiring the use of special-
purpose languages, avoiding implicit flows, not requir-
ing instruction-level information flow control, support-
ing flow policy rules for IoT apps, as well as IoT-specific
challenges like supporting diverse app flows involving a
variety of device data sources.
A key idea behind FlowFence is its new information
flow model, that we refer to as Opaciﬁed Computation.
A data-publishing app (or sensitive source) tags its data
with a taint label. Developers write data-consuming apps
so that sensitive data is only processed within designated
functions that run in FlowFence-provided sandboxes for
which taints are automatically tracked. Therefore, an app
consists of a set of designated functions that compute on
sensitive data, and code that does not compute on sensi-
tive data. FlowFence only makes sensitive data available
to apps via functions that they submit for execution in
FlowFence-provided sandboxes.
When such a function completes execution, Flow-
Fence converts the function’s return data into an opaque
handle before returning control to the non-sensitive code
of the app. An opaque handle has a hidden reference to
raw sensitive data, is associated with a taint set that rep-
resents the taint labels corresponding to sensitive data ac-
cessed in generating the handle, and can only be derefer-
enced within a sandbox. Outside a sandbox, the opaque
handle does not reveal any information about the data
type, size, taint label, any uncaught exception in the func-
tion, or contents. When a opaque handle is passed as
a parameter into another function to be executed in a
sandbox, the opaque handle is dereferenced before ex-
ecuting the function, and its taint set added to that sand-
box. When a function wants to declassify data to a sink,
it makes use of FlowFence-provided Trusted APIs that
check  flow policies before declassifying
data. The functions operating on sensitive data can com-
municate with other functions, and developers can chain
functions together to achieve useful computations but
only through well-defined FlowFence-controlled chan-
nels and only through the use of opaque handles.
Therefore, at a high level, FlowFence creates a data
flow graph at runtime, whose nodes are functions, and
whose edges are either raw data inputs or data flows
formed by passing opaque handles between functions.
Since FlowFence explicitly controls the channels to
share handles as well as declassification of handles (via
Trusted API), it is in a position to act as a secure and
powerful reference monitor on data flows. Since the han-
dles are opaque, untrusted code cannot predicate on the
handles outside a sandbox to create implicit flows. Apps
can predicate on handles within a sandbox, but the return
value of a function will always be tainted with the taint
labels of any data consumed, preventing apps from strip-
ping taint. An app can access multiple sources and sinks,
and it can support multiple flows among them, subject to
a stated flow policy.
Since sensitive data is accessible only to functions ex-
ecuting within sandboxes, developers must identify such
functions to FlowFence—they encapsulate functions op-
erating on sensitive data in Java classes and then reg-
ister those classes with FlowFence infrastructure. Fur-
thermore, FlowFence treats a function in a sandbox as a
blackbox, scrutinizing only communications into and out
of it, making taint-tracking efficient.
FlowFence builds on concepts from systems for en-
forcing flow policies at the component level, for exam-
ple, COWL for JavaScript [63] and Hails for web frame-
works [28, 52]. FlowFence is specifically tailored for
supporting IoT application development. Specifically,
motivated by our study of three existing IoT application
frameworks, FlowFence includes a flexible Key-Value
store and event mechanism that supports common IoT
app programming paradigms. It also supports the notion
of a discretionary flow policy for consumer apps that en-
ables apps to declare their flow policies in their manifest
(and thus the policy is visible prior to an app’s deploy-
ment). FlowFence ensures that the IoT app is restricted
to its stated flow policy.
Our work focuses on tailoring FlowFence to IoT do-
mains because they are still emerging, giving us the op-
portunity to build a flow control primitive directly into
application structure. Flow-based protections could, in
principle, be applied to other domains, but challenges
are often domain-specific. This work solves IoT-specific
challenges. We discuss the applicability of Opacified
Computation to other domains in §6.
Our Contributions:
• We conduct a study of three major existing IoT frame-
works that span the domains of smart homes, and
wearables (i.e. Samsung SmartThings, Google Fit,
and Android Sensor API) to analyze IoT-specific chal-
lenges and security design issues, and to inform the
functionality goals for an IoT application framework
(§2).
532  25th USENIX Security Symposium 
USENIX Association
• Based on our findings we design the Opacified Com-
putation model, which enables robust and efficient
source to sink flow control (§3).
• We realize the Opacified Computation model through
the design of FlowFence for IoT platforms. Our pro-
totype runs on a Nexus 4 with Android that acts as
our “IoT Hub” (§4). FlowFence only requires pro-
cess isolation and IPC services from the underlying
OS, thus minimizing the requirements placed on the
hardware/OS.
• We perform a thorough evaluation of FlowFence
framework (§5). We find that each sandbox requires
2.7MB of memory on average. Average latency for
calls to functions across a sandbox boundary in our
tests was 92ms or less. To understand the impact
of these overheads on end-to-end performance, we
ported three existing IoT apps to FlowFence (§5.2).
Adapting these apps to use FlowFence resulted in av-
erage size of apps going up from 232 lines to 332
lines of source code. A single developer with no prior
knowledge of the FlowFence API took five days to-
tal to port all these apps. Macro-benchmarks on these
apps (latency and throughput) indicate that FlowFence
performance overhead is acceptable: we found a 4.9%
increase in latency for an app that performs face recog-
nition, and we found a negligible reduction in through-
put for a wearable heart beat calculator app. In terms
of security, we found that the flow policies correctly
enforce flow control over these three apps (§5.2).
Based on this evaluation, we find FlowFence to be a
practical, secure, and efficient framework for IoT ap-
plications.
2
IoT Framework Study:
Platforms and Threats
We performed an analysis of existing IoT application
programming frameworks, apps, and their security mod-
els to inform FlowFence design, distill key function-
ality requirements, and discover security design short-
comings. Our study involved analyzing three popular
programming frameworks covering three classes of IoT
apps: (1) Samsung SmartThings for the smart home, (2)
Google Fit for wearables, and (3) Android Sensor API
for quantified-self apps.1 We manually inspected API
documentation, and mapped it to design patterns. We
found that across the three frameworks, access to IoT
sensor data falls in one of the following design patterns:
(1) The polling pattern involving apps polling an IoT de-
vice’s current state; and (2) The callback pattern involv-
1Quantified Self refers to data acquisition and processing on aspects
of a person’s daily life, e.g., calories consumed.
ing apps registering callback functions that are invoked
whenever an IoT device’s state changes.2
We also found that it is desirable for publishers and
consumers to operate in a device-agnostic way, without
being explicitly connected to each other, e.g., a heart rate
monitor may go offline when a wearable is out of Blue-
tooth range; the consumer should not have to listen to
lifecycle events of the heart rate monitor—it only needs
the heart beat data whenever that is available. Ideally, the
consumer should only need to specify the type of data it
requires, and the IoT framework should provide this data,
while abstracting away the details. Furthermore, this is
desirable because there are many types of individual de-
vices that ultimately provide the same kind of data, e.g.,
there are many kinds of heart rate monitors eventually
providing heart rate data.
A practical IoT programming framework should sup-
port the two data sharing patterns described above in a
device-agnostic manner. In terms of security, we found
that all three frameworks offer permission-based access
control, but they do not provide any methods to control
data use once apps gain access to a resource. We provide
brief detail on each of these frameworks below.
1) Samsung SmartThings. SmartThings is a smart
home app programming framework [4] with support for
132 device types ranging from wall plugs to ZWave door
locks. SmartThings provides two types of APIs to ac-
cess device data: subscribe and poll. The subscribe
API is the callback design pattern. For instance, to ob-
tain a ZWave door lock’s current state, an app would
issue a call of the form subscribe(lockDevice,
"lock.state", callback). The subscribe API ab-
stracts away details of retrieving data from a device, and
directly presents the data to consumers, allowing them
to operate in a disconnected manner. The poll API
is the polling pattern. For example, an app can invoke
lockDevice.currentState to retrieve the state of the
lock at that point in time.
For permission control, the end-user is prompted to
authorize an app’s access request to a device [57], based
on a matching of SmartThings capabilities (a set of oper-
ations) that the app wishes to perform, and the set of ca-
pabilities that a device supports. Once an app is granted
access to a device, it can access all of its data and fea-
tures. SmartThings does not offer any data flow control
primitives.
2) Google Fit. Google Fit enables apps to interface with
wearables like smartwatches [32]. The core abstraction
in Google Fit is the Fitness Data Type, which provides a
2We also found an orthogonal virtual sensor design pattern: An in-
termediate app computing on sensor data and re-publishing the derived
data as a separate virtual sensor. For instance, an app reads in heart rate
at beats-per-minute, derives beats-per-hour, and re-publishes this data
as a separate sensor.
USENIX Association  
25th USENIX Security Symposium  533
device-agnostic abstraction for apps to access them in ei-
ther instantaneous or aggregated form. The API provides
raw access to both data types using only the callback pat-
tern; the polling pattern is not supported. For instance, to
obtain expended calories, an app registers a data point
listener for the com.google.calories.expended in-
stantaneous fitness type. A noteworthy aspect is that apps
using the Fit API can pre-process data and publish sec-
ondary data sources, essentially providing a virtual sen-
sor.
Google Fit API defines scopes that govern access
to fitness data. For instance, the FITNESS BODY READ
scope controls access to heart rate. Apps must request
read or write access to a particular scope, and the user
must approve or deny the request. Once an app gains ac-
cess to a scope, it can access all fitness related data in
that scope. Google Fit does not offer any data flow con-
trol primitives.
3) Android Sensor API. Android provides API access to
three categories of smartphone sensor data: Motion, En-
vironment, and Position. Apps must register a class im-
plementing the SensorEventListener interface to re-
ceive callbacks that provide realtime sensor state. There
is no API to poll sensor state, except for the Location
API. Android treats the Location API differently but, for
our purposes, we consider it to be within the general
umbrella of the sensor API. The Location API supports
both the polling and callback design patterns. The call-
back pattern supports consumers operating in a device-
agnostic manner since the consumer only specifies the
type of data it is interested in.
Surprisingly, the Android sensor API does not provide
any access control mechanism protecting sensor data.
Any app can register a callback and receive sensor data.
The Location API and heart rate sensor API, however,
do use Android permissions [22, 31]. Similar to the pre-
vious two frameworks, Android does not offer any data
flow control primitives.
IoT Architectures. We observe two categories of IoT
software architectures: (1) Hub, and (2) Cloud. The hub
model is centralized and executes the majority of soft-
ware on a hub that exists in proximity to various phys-
ical devices, which connect to it. The hub has signif-
icantly more computational power than individual IoT
devices, has access to a power supply, provides network
connectivity to physical devices, and executes IoT apps.
In contrast, a cloud architecture executes apps in remote