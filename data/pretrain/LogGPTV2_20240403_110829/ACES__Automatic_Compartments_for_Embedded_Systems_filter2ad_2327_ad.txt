#Instrs. %Priv.
#Functs. Code Data Med.
Max
In
Out Med. #Stores.
Reduction
PinLock
FatFs-uSD
TCP-Echo
LCD-uSD
Animation
Na¨ıve Filename
Opt. Filename
Peripheral
8,374(50.9%)
8,332(50.1%)
8,342(50.3%)
2.9% 193(17.0%)
26.2% 193(17.0%)
9.8% 193(17.0%)
Na¨ıve Filename
Opt. Filename
Peripheral
21,222(18.4%)
21,083(17.6%)
21,096(17.7%)
1.2% 324( 9.5%)
15.0% 324( 9.5%)
3.4% 324( 9.5%)
Na¨ıve Filename
Opt. Filename
Peripheral
34,477(12.7%)
34,324(12.2%)
33,408(9.2% )
0.7% 445( 6.7%)
10.6% 445( 6.7%)
0.6% 445( 6.7%)
Na¨ıve Filename
Opt. Filename
Peripheral
38,806(12.1%)
38,452(11.1%)
38,109(10.1%)
0.6% 462( 6.5%)
19.7% 462( 6.5%)
1.9% 462( 6.5%)
Na¨ıve Filename
Opt. Filename
Peripheral
38,894(12.1%)
38,499(10.9%)
38,194(10.1%)
0.6% 466( 6.4%)
28.7% 466( 6.4%)
1.9% 466( 6.4%)
14
11
20
23
19
23
37
28
23
33
25
34
33
23
34
7
6
8
13
2
9
23
4
11
17
5
15
16
3
17
1,501
1,418
1,298
1,563
1,380
1,565
1,789
1,476
1,198
10,290
10,006
9,900
10,265
9,954
9,850
2,739
2,983
3,291
6,825
10,316
8,701
5,058
14,395
23,100
14,291
15,499
17,188
14,246
18,317
19,015
6
3
1
6
2
1
26
23
1
10
7
2
10
6
2
3
1
1
4
1
1
8
3
1
4
3
2
5
3
2
118 (11.0%)
737 (68.8%)
489 (45.7%)
164 ( 4.2%)
3,081 (79.6%)
1,560 (40.4%)
345 (47.9%)
341 (48.5%)
345 (47.9%)
432 (74.2%)
709 (57.6%)
699 (58.2%)
256 ( 4.7%)
3,970 (74.9%)
3,327 (61.6%)
384 (85.3%)
646 (75.2%)
1,759 (32.5%)
93 ( 1.5%)
3,500 (59.5%)
3,247 (55.0%)
1,173 (58.5%)
1,385 (51.0%)
1,524 (46.0%)
105 ( 1.7%)
4,257 (72.5%)
2,498 (42.1%)
1,178 (58.7%)
1,401 (50.8%)
1,568 (45.0%)
only the code which accesses the private peripheral bus
and the compartment transition logic to execute in priv-
ileged mode. The Na¨ıve Filename and Peripheral policy
show the greatest reductions, because of the way they
form compartments. As only a small number of func-
tions access the private peripheral bus—deﬁned in a few
ﬁles—the Na¨ıve Filename creates small compartments
with privileged code. The Optimized Filename starts
from the Na¨ıve policy and then merges groups together,
increasing the amount of privileged code, as privileged
code is merged with unprivileged code. Finally, the Pe-
ripheral policy identiﬁes the functions using the private
peripheral bus. It then merges the other functions that
call or are called by these functions and that have no de-
pendency on any other peripheral. The result is it a small
amount of privileged code.
Number of Regions: Recall a compartment is a single
code region and collection of accessible data and periph-
erals. The number of code and data regions created in-
dicates how much compartmentalization the policy cre-
ates. As the number of compartments increases, addi-
tional control-ﬂow validation occurs at runtime as com-
partment transitions increase. Generally, larger numbers
of regions indicate better security.
Instructions Per Compartment: This metric measures
how many instructions are executable at any given point
in time, and thus usable in a code reuse attack. It is the
number of instructions in the compartment’s code region
plus the number of instructions in the default code re-
gion. Table 2 shows the median, and maximum num-
ber of instructions in each compartment. For all policies,
the reduction is at least 23.9% of the baseline applica-
tion, which occurs on TCP-Echo with the Peripheral pol-
icy. The greatest (83.4%) occurs on TCP-Echo with the
Na¨ıve Filename policy, as the TCP stack and Ethernet
driver span many ﬁles, resulting in many compartments.
However, the TCP stack and Ethernet driver only use the
Ethernet peripheral. Thus, the Peripheral policy creates
a large compartment, containing most of the application.
Compartment Connectivity: Compartment connectiv-
ity indicates the number of unique calls into (In De-
gree) or out of a compartment (Out Degree), where a
unique call is determined by its source and destination.
High connectivity indicates poor isolation of compart-
ments. Higher connectivity indicates increasing chances
for a confused deputy control-ﬂow hijack attack between
compartments. The ideal case would be many compart-
ments with minimal connectivity. In all cases, the Na¨ıve
Filename policy has the worst connectivity because the
applications make extensive use of abstraction libraries,
(e.g., hardware, graphics, FatFs, and TCP). This results
in many ﬁles being used with many calls going between
functions in different ﬁles. This results in many com-
partments, but also many calls between them. The Opti-
mized Filename policy uses the Na¨ıve policy as a starting
point and relocates functions to reduce external compart-
ment connectivity, but can only improve it so much. The
Peripheral policy creates many small compartments with
very little connectivity and one compartment with high
connectivity.
Global Variable Exposure: In addition to restricting
control-ﬂow in an application, ACES reduces the num-
ber of instructions that can access a global variable. We
measure the number of store instructions that can access
a global variable—indicating how well least privileges
are enforced. Table 2 shows the median number of store
instructions each global variable in our test applications
is writable from, along with the percent of store instruc-
tions in the application that can access it. Smaller num-
bers are better. The Filename policy has the greatest re-
duction in variable exposure. The other policies create
larger data and code regions, and thus have increased
variable exposure. In addition, lowering to four mem-
ory regions causes multiple global variables to be merged
into the same data region, increasing variable exposure.
Having more MPU regions (the ARMv8-M architecture
USENIX Association
27th USENIX Security Symposium    75
supports up to 16) can signiﬁcantly improve this metric.
As an example, we compiled Animation using the Opti-
mized Filename policy and 16 MPU regions (lowering to
12 regions). It then creates 28 data regions versus three
with eight MPU regions.
ROP Gadgets: We also measure the maximum number
of ROP gadgets available at any given time during execu-
tion, using the ROPgadget compiler [46]. ROP gadgets
are snippets of instructions that an attacker chains to-
gether to perform control-hijack attacks while only using
existing code [47]. As shown in Table 2, ACES reduces
the number of ROP gadgets between 32.5% and 85.3%
compared to the baseline; the reduction comes from re-
ducing the number of instructions exposed at any point
during execution.
6.3 Runtime Overhead
Bare-metal systems have tight constraints on execution
time and memory usage. To understand ACES’ im-
pact on these aspects across policies, we compare the
IoT applications compiled with ACES against the base-
line unprotected binaries. For applications compiled us-
ing ACES, there are three causes of overhead: compart-
ment entry, compartment exit, and instruction emulation.
Compartment entries and exits replace a single instruc-
tion with an SVC call, authentication of the source and
the destination of the call, and then reconﬁguration of the
MPU registers. Emulating a store instruction replaces a
single instruction with an exception handler, authentica-
tion, saving and restoring context, and emulation of the
instruction.
In the results discussion, we use a linguistic
shorthand—when we say “compartment exit” or simply
“exit”, we mean the number of invocations of the com-
partment exit routine. Not all such invocations will ac-
tually cause a compartment exit for the reason described
in Section 5.3.
All applications—except TCP-Echo—were modiﬁed
to start proﬁling just before main begins execution and
stops at a hard coded point. Twenty runs of each appli-
cation were averaged and in all cases the standard devia-
tion was less than 1%. PinLock stops after receiving 100
successful unlocks, with a PC sending alternating good
and bad codes as quickly as the serial communication
allows. FatFS-uSD formats its SD card, creates a ﬁle,
writes 1,024 bytes to the ﬁle, and veriﬁes the ﬁle’s con-
tents, at which point proﬁling stops. LCD-uSD reads and
displays 3 of the 6 images provided with the application,
as quickly as possible. Proﬁling stops after displaying
the last image. The Animation application displays 11 of
the 22 animation images provided with the application
before proﬁling stops. Only half the images were used to
prevent the internal 32bit cycle counters from overﬂow-
LCD-uSD
5.69
Animation
5.70
Total
Entry
Exit
Emulation
TCP-Echo
3.69
FatFs-uSD
1.95 1.90
2.17
1.78 1.72
PinLock
1.01 1.00 1.00
1.25
1.22
1.19 1.13
d
a
e
h
r
e
v
O
X
6
5
4
3
2
1
0
)
1
(
)
2
(
)
3
(
)
1
(
)
2
(
)
3
(
)
1
(
)
2
(
)
3
(
)
1
(
)
2
(
)
3
(
)
1
(
)
2
(
)
3
(
(1) Naive Filename     (2) Filename     (3) Peripheral
Figure 5: Runtime overhead for applications.
ing. For TCP-Echo, a PC directly connected to the board
sends TCP packets as fast as possible. We start proﬁl-
ing after receiving 20 packets—to avoid measuring the
PC’s delay in identifying the IP address of the board—