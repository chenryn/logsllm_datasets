**IEEE Xplore Access Information:**

- **Document ID:** 978-1-4244-7501-8/10/$26.00
- **Copyright:** Â©2010 IEEE
- **Page Numbers:** 598-599
- **Conference:** 2010 IEEE/IFIP International Conference on Dependable Systems & Networks (DSN)
- **Authorized Use:** Limited to Tsinghua University. Downloaded on March 18, 2021, at 14:04:17 UTC from IEEE Xplore. Restrictions apply.

---

### **Component State Encoding and Model Invariants**

In the context of closed system models, each component is encoded using \( c \) state variables, which can be thought of as the different operational stages or switch positions within the component. We are interested in identifying a finite automaton with \( c \) states such that the sum of the corresponding values is always 1, reflecting the fact that the automaton must reside in one of its states at any given time.

**Weighted Sums:**
For performance models, we consider a set of \( c \) locations where the sum of their values is always equal to the number of customers. The specific weighted sum \( \sum w_i \cdot v_i = \text{const} \) is computed for all weight vectors \( w \) such that \( w_M = 0 \), where \( M \) is an integer. This results in a matrix of dimensions \( V \times k \), where \( k = | \bigcup_{a \in A} (a) | \).

### **Formula Types and Their Generation**

Table 1 summarizes the types of generated formulas, primarily focusing on safety properties. These formulas can be evaluated and allow for more complex formulations with the help of the U operator, which recognizes sequences of actions or states.

| Formula Type | Description |
|--------------|-------------|
| 1. \( G(l \leq v \leq u) \) | Range constraint on variable \( v \). |
| 2. \( G(v \neq v') \) | Variables \( v \) and \( v' \) are not equal. |
| 3. \( G(\sum w_i \cdot v_i = \sum w_i \cdot v) \) | Weighted sum equality. |
| 4. \( G(a(e) = a \Rightarrow P) \) | Precondition \( P \) when action \( a \) occurs. |
| 5. \( G(a(e) = a \Rightarrow Q) \) | Postcondition \( Q \) when action \( a \) occurs. |
| 6. \( G(a(e) = a \Rightarrow D) \) | Change condition \( D \) when action \( a \) occurs. |
| 7. \( G(a(e) = a \Rightarrow XB) \) | Successor condition \( B \) when action \( a \) occurs. |

### **Automated Derivation of Formulas**

We discuss automated techniques and tools for deriving formulas of types 1-7. Specifically, we implemented a transformer to translate simulation trace files into a format that Daikon [12] can understand. Daikon is a tool designed to produce likely invariants from running programs. These invariants are intended to capture the program's behavior, which can then be compared against expected properties or implemented as assertions.

**Daikon and Traviando:**
- **Daikon:** Primarily used for C/C++, Java, and other languages.
- **Traviando:** Used for generating formulas from simulation traces.

By combining these tools, we enable the derivation of invariants that apply to components and actions in the model. This approach provides a means of enabling the generation of formulas at the process level, including pre- and post-conditions and state transformations.

### **Tool Support for Modeling and Simulation**

We implemented the generation of formulas by combining three different tools:
1. **Mobius [10]:** For modeling and simulation, supporting Stochastic Activity Networks (SANs).
2. **Traviando [15]:** For generating formulas from simulation traces.
3. **Daikon [12]:** For the automated derivation of invariants from running programs.

**Mobius:**
- **Developed by:** W. H. Sanders et al. at the University of Illinois at Urbana-Champaign.
- **Features:** Supports multi-paradigm modeling, including SANs, and can distribute simulation runs over a network, facilitating detailed studies in practice.

The Mobius simulator generates trace files that include detailed information on actions, their timing, and their impact on state variables. These trace files are then used to derive invariants and formulas, ensuring that the model adheres to the specified properties.

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the original text.