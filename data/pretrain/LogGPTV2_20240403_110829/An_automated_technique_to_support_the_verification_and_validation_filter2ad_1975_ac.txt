978-1-4244-7501-8/10/$26.00 
©201O IEEE 
598 
DSN 2010: Klock & Kemper 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:04:17 UTC from IEEE Xplore.  Restrictions apply. 
20lO IEEEIIFIP 
International 
Conference 
on Dependable 
Systems 
& Networks 
(DSN) 
being encoded with c state variables, 
stages of a component). 
(i.e., 
we have a finite 
sets of 
belong 
being encoded with c state variables, 
models, 
we find a finite au­
which subsets 
operational 
switch positions 
the different 
models of closed systems, 
between a finite set 
such 
Weighted Snms. Considering 
question 
values is always 1, 
has to reside in one of its states, 
Type 3: Constant 
a natural 
concerns 
variables, 
together. 
In many dependability 
tomaton with c states 
such that the sum of their corresponding 
since the automaton 
to describe 
In performance 
number of customers 
of c locations 
that the sum of their values is always the number of cus­
tomers. The particular 
series of experiments 
periment. 
variable 
(a) =  {SH1-SiIO:::; i , 2::} 
G(lv :::; v:::; 
uv) 
2  G( v I><l v') 
3  G(2::1 Wi· Vi 
=  2::1 Wi· v) 
4  G((a(e) 
5  G((a(e) 
6  G((a(e) 
7  G((a(e) 
w E R ffi 
=  a) ===}  P) P precondition 
=  a) ===} Q)  Q postcondition 
=  a) ===} D)  D change 
=  a) ===} XB) B successors 
Table 1. Types of generated 
formulas. 
so far, which are mainly safety properties 
More complex formulas. Table 1 summarizes 
las considered 
that can be evaluated 
lows us to define much more complex formulas 
help of the U operator 
U operator 
allows us to recognize 
at any state. Of course, 
and other derived 
particular 
with the 
The 
of 
operators. 
sequences 
the formu­
SE-LTL al­
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
599 
DSN 20lO: Klock & Kemper 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:04:17 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP 
International 
Conference 
on Dependable 
Systems 
& Networks 
(DSN) 
imply or for which there is insufficient 
of formulas 
that 
are removed if they turn out to be 
claiming 
to justify 
is sanitized 
can be formulated 
the intransmission 
The final set of invariants 
part, and 1jJ describes 
action would make the formula 
do not correspond. 
In existing 
are not distinguished, 
its input data. Candidates 
false. 
other valid formulas 
statistical 
evidence 
For instance, 
that a mes­
as 
= a) ===}  X(¢U1jJ)) where a is the send oper­
a formulation 
or states. 
actions 
sage that is sent is finally received 
G((a(e) 
ation, ¢ describes 
action. 
the receiving 
individual 
messages 
that any receiving 
though messages 
messages, 
valid that are initiated 
the receive 
ficult to construct 
consider 
models an individual 
created. 
However, we believe 
las are too model-specific 
instead 
mulas. 
enable modelers 
a single receive 
by a sequence 
in Section 
properties 
which implies 
of send actions 
that explicitly 
models, we often find that 
In case of concurrent 
straightforward 
[15], we implemented 
action would make all formulas 
In Traviando 
mula generator 
ing the corresponding 
mically 
derivation 
E:':l Wi . Vi = canst is performed 
for wM  = 0 where M is an integer 
of columns taken from sets (a) for all a E A. So M 
has dimensions 
sponding 
results 
for an automated derivation; 
invariants 
models) and finite sets of customers 
els of closed systems). 
has been published 
that it is helpful 
of a system component 
that these kinds of formu­
set of weight vectors 
In the example model we 
of a generating 
demonstrate 
of this kind are dif­
by computing 
approach 
on states 
from scratch. 
5, we will add a separate 
submodel 
object such that these formulas 
can be 
As such, formulas 
that they hold. 
to manually 
SE-LTL for­
specify 
action. 
targets 
valid even 
before 
that 
we 
V x k where k = I UaEA (a)l. The corre­
in [13], and example 
an automated 
for­
types 1-7. Recogniz­
for all types but for type 3. The 
or real-valued 
matrix 
from trace files is algorith­
w such that 
solutions 
for recovering 
common 
(in dependability 
(in performance 
mod­
we discuss 
of formulas 
of Formulas of Type 1-7. We 
Automated Derivation 
briefly discuss  automated  techniques 
derivation 
approaches 
of type 1-7. In particular, 
implemented 
and tools for the 
a specification 
from running programs. 
Daikon [12] is a tool designed 
by Daikon and Traviando. 
to produce likely in­
These invariants 
are in­
of the program's 
behav­
proper­
that are checkable 
at run­
intended 
for use in con­
variants 
tended to comprise 
ior, which can then be compared against 
ties or implemented 
as assertions 
time. While Daikon is primarily 
ventional 
for C/C++, Java, and other languages), 
elsewhere; 
invariants 
to detect rootkits). 
(with native support 
see, for example, 
supplied 
it has been applied 
computer 
expected 
programs 
We developed 
a transformer 
to translate 
files of the sort produced 
simulation 
by instru­
[2] (using Daikon-generated 
for Daikon. Since Daikon searches 
for 
around program points (Le.,  objects, 
we had to adapt the enti­
traces into types that Daikon understands. 
trace format we use, variables 
are parti­
etc.), 
centered 
method exits, 
traces into formatted 
mented programs 
invariants 
method entries, 
ties in simulation 
In the simulation 
tioned into processes corresponding 
model. We treat these processes 
methods. 
Daikon to search for invariants 
variants 
that apply to a component 
tions (pre-and post-conditions; 
mations). 
invariants 
duce formulas 
support 
sums of variables, 
cient way) and formulas 
Daikon-generated 
This view provides 
for formulas 
a suitable 
of type 7. 
Algorithmically, 
to components 
of the 
as 
and actions 
as objects 
means of enabling 
at the process 
in­
of the model) and for ac­
level (i.e., 
properties 
of state transfor­
can be used to pro­
of types 1-2 and 4-6, but it does not provide 
of type 3 (it does occasionally 
output 
our approach 
by extending 
and com­
namely Mobius [10] for mod­
of 
tools, 
Traviando 
[15] for the generation 
4. Tool Support 
We implemented 
bining three different 
eling and simulation, 
formulas 
and for runtime 
the generation 
separate 
offline derivation 
viando, 
formulas 
and 3) the online, 
for a running 
of formulas. 
monitoring, 
The approach 
and Daikon [12] for 
consists 
of three 
steps: 1) the generation 
of formulas 
of  with Mobius, 2) the 
from  with Daikon and Tra­
of 
runtime 
on-the-fly 
verification 
Mobius simulation 
by Traviando. 
modeling 
supports 
assessment 
It supports 
Stochastic 
frame­
of 
where an overall 
in one of several 
and performance 
and Simulation. 
Mobius is a modeling 
at Urbana-Champaign. 
formalisms, 
(SANs). The Mobius 
Activity 
Networks 
the generation 
by W. H. Sanders et al. at the Univer­
multi­
model is composed of 
most 
Modeling 
work for the dependability 
systems developed 
sity of Illinois 
paradigm 
submodels formulated 
notably 
simulator 
lation runs that include 
actions 
takes place, when, and what changes it makes to state vari­
ables. The simulation 
a series 
individual 
tremendously 
simulation 
ulator to communicate 
software 
engine is able to distribute 
of 
which is 
of trace files for simu­
and 
information 
sequential 
on state variables 
data on which action 
simulation experiments 
over a network, 
study in practice. 
as well as detailed 