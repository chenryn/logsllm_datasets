```
该命令的结果可能看起来很熟悉，因为图表的自述文件也显示在其 Helm Hub 页面上。从命令行利用此选项可以快速查看自述文件，而无需打开浏览器:
![Figure 3.8 – The wordpress chart’s README file shown in the command line ](img/Figure_3.8.jpg)
图 3.8–命令行中显示的 WordPress 图表的自述文件
我们使用`helm show values`来检查图表的值。值作为用户可以提供的参数，以便自定义图表安装。当我们安装图表时，我们将在本章后面的*为配置*创建值文件部分运行该命令。
最后，`helm show all`将来自前面三个命令的所有信息聚合在一起。如果您想同时检查图表的所有细节，请使用此命令。
现在我们已经找到并检查了一个 WordPress 图表，让我们设置一个 Kubernetes 环境，稍后可以将这个图表安装到这个环境中。
# 创造一个 Kubernetes 环境
为了在本章中创建 Kubernetes 环境，我们将使用 Minikube。我们学习了如何在 [*第 2 章*](02.html#_idTextAnchor098)*中安装迷你库贝，准备 Kubernetes 和 Helm 环境*。
让我们按照以下步骤设置 Kubernetes:
1.  运行以下命令启动 Kubernetes 集群:
    ```
    $ minikube start
    ```
2.  经过一小段时间后，您应该会在输出中看到类似如下的一行:
    ```
     Done! kubectl is now configured to use 'minikube'
    ```
3.  一旦 Minikube 集群启动并运行，为本章的练习创建一个专用的名称空间。运行以下命令创建名为`chapter3` :
    ```
    $ kubectl create namespace chapter3
    ```
    的名称空间
现在集群设置已经完成，让我们开始将 WordPress 图表安装到您的 Kubernetes 集群的过程。
# 安装 WordPress 图表
安装 Helm 图表是一个简单的过程，可以从检查图表的值开始。在下一节中，我们将检查 WordPress 图表上可用的值，并描述如何创建允许自定义安装的文件。最后，我们将安装图表并访问 WordPress 应用。
## 创建配置值文件
您可以通过提供 YAML 格式的`values`文件来覆盖图表中定义的值。为了正确创建`values`文件，您需要检查图表提供的支持值。如前所述，这可以通过运行`helm show values`命令来完成。
运行以下命令检查 WordPress 图表的值:
```
$ helm show values bitnami/wordpress --version 8.1.0
```
该命令的结果应该是一个可以设置的可能值的长列表，其中许多已经设置了默认值:
![](img/Figure_3.9.jpg)
图 3.9–运行`helm show values`生成的值列表
前面的输出显示了 WordPress 图表值的开始。其中许多属性已经设置了默认值，这意味着如果这些值没有被覆盖，它们将代表图表的配置方式。例如，如果`image`值没有在`values`文件中被覆盖，WordPress 图表使用的映像将使用来自 docker.io 注册表的`bitnami/wordpress`容器映像作为`5.3.2-debian-9-r0`标签。
图表值中以散列符号(`#`)开头的线条是注释。注释可用于解释一个值或一组值，也可用于注释值以取消设置。在前面输出的顶部的`global` YAML 小节中显示了一个通过注释来取消设置值的例子。默认情况下，除非用户明确设置，否则这些值都不会被设置。
如果我们进一步探究`helm show values`输出，我们可以找到与配置 WordPress 博客元数据相关的值:
![](img/Figure_3.10.jpg)
图 3.10–运行`helm show values`命令返回的值
这些值似乎对配置 WordPress 博客很重要。让我们通过创建一个`values`文件来覆盖它们。在你的机器上创建一个名为`wordpress-values.yaml`的新文件。在该文件中，输入以下内容:
```
wordpressUsername: helm-user
wordpressPassword: my-pass
wordpressEmail: PI:EMAIL
wordpressFirstName: Helm_is
wordpressLastName: Fun
wordpressBlogName: Learn Helm!
```
如果你愿意的话，可以自由地在这些价值观上获得更多的创造力。从`helm show values`继续往下的值列表，在开始安装之前，还有一个更重要的值应该添加到`values`文件中，如图所示:
![Figure 3.11 – The LoadBalancer value returned after running helm show values ](img/Figure_3.11.jpg)
图 3.11–运行`helm show values`后返回的负载平衡器值
如注释中所述，该值表示如果我们使用 Minikube，我们需要将默认的`LoadBalancer`类型更改为`NodePort`。Kubernetes 中的一种`LoadBalancer`服务类型用于从公共云提供商处调配负载平衡器。虽然可以通过使用`minikube tunnel`命令来支持该值，但是将该值设置为`NodePort`将允许您直接通过本地端口访问 WordPress 应用，而不必使用`minikube tunnel`命令。
将该值添加到您的`wordpress-values.yaml`文件中:
```
service:
  type: NodePort
```
一旦该值添加到您的`values`文件中，您完整的`values`文件应该如下所示:
```
wordpressUsername: helm-user
wordpressPassword: my-pass
wordpressEmail: PI:EMAIL
wordpressFirstName: Helm_is
wordpressLastName: Fun
wordpressBlogName: Learn Helm!
service:
  type: NodePort
```
现在`values`文件已经完成 e，让我们运行安装。
## 运行安装
我们使用`helm install`来安装一个 Helm 图表。标准语法如下:
```
helm install [NAME] [CHART] [flags]
```
`NAME`参数是您希望给予您的 Helm 版本的名称。一个**版本**捕获了库伯内特资源，这些资源安装了一个图表并跟踪应用的生命周期。我们将在本章中探讨发行版是如何工作的。
`CHART`参数是已安装的 Helm 图表的名称。存储库中的图表可以按照`/`表格安装。
`helm install`中的`flags`选项允许您进一步自定义安装。`flags`允许用户定义和覆盖值，指定要使用的命名空间，等等。运行`helm install --help`可以查看标志列表。我们也可以将`--help`传递给其他命令，查看它们的用法和支持的选项。
现在，正确理解`helm install`的用法，运行以下命令:
```
$ helm install wordpress bitnami/wordpress --values=wordpress-values.yaml --namespace chapter3 --version 8.1.0
```
该命令将使用`bitnami/wordpress`Helm 图安装一个名为`wordpress`的新版本。它将使用`wordpress-values.yaml`文件中定义的值来定制安装，图表将安装在`chapter3`命名空间中。它还将部署`8.1.0`版本，由`--version`标志定义。Helm 将安装没有这个标志的最新版本的 Helm 图表。
如果图表安装成功，您应该会看到以下输出:
![Figure 3.12 – The output of a successful WordPress chart installation  ](img/Figure_3.12.jpg)
图 3.12–成功安装 WordPress 图表的输出
该输出显示关于安装的信息，包括版本名称、部署时间、安装到的名称空间、部署状态(即`deployed`)和修订号(由于这是版本的初始安装，因此设置为`1`)。
输出还显示与安装相关的注释列表。注释用于向用户提供有关其安装的附加信息。对于 WordPress 图表，这些注释提供了关于如何访问和验证 WordPress 应用的信息。虽然这些注释在安装后会直接出现，但如下一节所述，可以随时使用`helm get notes`命令进行检索。
随着您第一次 Helm 安装的完成，让我们来检查版本，以观察所应用的资源和配置。
## 检查你的释放
检查一个版本并验证其安装的最简单方法之一是列出给定名称空间中的所有 Helm 版本。为此，Helm 提供了`list`子命令。
运行以下命令查看`chapter3`命名空间中的版本列表:
```
$ helm list --namespace chapter3
```
在这个名称空间中，您应该只看到一个版本，如图所示:
![Figure 3.13 – The output from the helm list command that lists the Helm releases ](img/Figure_3.13.jpg)
图 3.13–列出舵释放的`helm list`命令的输出
`list`子命令提供以下信息:
*   发布名称
*   发布命名空间
*   版本的最新修订号
*   最新版本的时间戳
*   发布状态
*   图表名称
*   应用版本
请注意，状态、图表名称和应用版本是从前面的输出中截断的。
虽然`list`子命令对于提供高级版本信息很有用，但是用户可能还想了解特定版本的其他项目。Helm 提供了`get`子命令，以提供关于某个版本的更多信息。以下列表描述了可用于提供一组详细发布信息的命令:
*   要获取命名版本的所有钩子，运行以下命令:
    ```
    helm get hooks
    ```
*   要获取命名版本的清单，请运行以下命令:
    ```
    helm get manifest
    ```
*   要获取命名版本的注释，请运行以下命令:
    ```
    helm get notes
    ```
*   要获取命名版本的值，请运行以下命令:
    ```
    helm get values
    ```
*   要获取命名版本的所有信息，请运行以下命令:
    ```
    helm get all
    ```
来自前面列表`helm get hooks`的第一个命令用于显示给定版本的钩子。当您了解构建和测试 Helm 图表时，将在 [*第 5 章*](05.html#_idTextAnchor265)*构建您的第一个 Helm 图表*和 [*第 6 章*](06.html#_idTextAnchor292)*测试 Helm 图表*中更详细地探索钩子。目前，钩子可以被认为是 Helm 在应用生命周期的某些阶段执行的操作。
运行以下命令查看此版本中包含的挂钩:
```
$ helm get hooks wordpress --namespace chapter3
```
在输出中，您会发现两个带有以下注释的 Kubernetes Pod 清单:
```
'helm.sh/hook': test-success
```
该注释表示在执行`test`子命令期间运行的钩子，我们将在 [*第 6 章*](06.html#_idTextAnchor292)*测试 Helm 图*中更详细地探讨。这些测试挂钩为图表开发人员提供了一种机制，以确认图表是否按设计运行，并且可以被最终用户安全地忽略。
由于这个图表中包含的两个钩子都是为了测试目的，让我们继续前面列表中的下一个命令，继续发布检查。
`helm get manifest`命令可用于获取作为安装的一部分创建的 Kubernetes 资源列表。运行此命令，如下例所示:
```
$ helm get manifest wordpress --namespace chapter3
```
运行此命令后，您将看到以下 Kubernetes 清单:
*   两张`ecrets`清单。
*   两个`ConfigMaps`清单(第一个用于配置 WordPress 应用，第二个用于测试，由图表开发人员执行，因此可以忽略)。
*   一`PersistentVolumeClaim`显化。
*   两份`services`舱单。
*   一`Deployment`显化。
*   一`StatefulSet`显化。
从这个输出中，您可以观察在配置 Kubernetes 资源时，您的值在哪里产生了影响。需要注意的一个例子是在 WordPress 服务中，其`type`已经被设置为`NodePort`:
![Figure 3.14 – Setting type to NodePort ](img/Figure_3.14.jpg)
图 3.14–将`type`设置为`NodePort`
您还可以观察我们为 WordPress 用户设置的其他值。这些值在 WordPress 部署中被定义为环境变量，如图所示:
![Figure 3.15 – Values set as environment variables ](img/Figure_3.15.jpg)
图 3.15–设置为环境变量的值
图表提供的大部分默认值保持不变。这些默认值已应用于 Kubernetes 资源，可以通过`helm get manifest`命令进行观察。如果更改了这些值，Kubernetes 资源的配置将会有所不同。