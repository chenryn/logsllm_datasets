of derivation rules in System FSays and NALlight.
Theorem 2.1. If S, Γ ⊢ e : τ is derivable then so is ⟨Γ⟩ ⊢ ⟨τ⟩.
Example. To illustrate System FSays proof witnessing, consider
the following formula that represents the important property of
delegation handoff as discussed in [35]:
∀A.∀B.(A Says B SpeaksFor A) ⇒ (B SpeaksFor A)
In System FSays the type representation τ of this formula is:
∀A.∀B.(A Says (∀X .B Says X → A Says X)) →
(∀X .B Says X → A Says X)
and the following term e serves as a proof witness for this type τ,
in the sense that , ⊢ e : τ is valid:
ΛA.ΛB.λx : (A Says (∀X .B Says X → A Says X)) .
ΛX .λz : B Says X .w ← x;(w[X])(z)
2.2 Network Programming
The NetKAT language [4, 13] enables programmers to work in terms
of functions on packets histories (where a packet is a record of fields
and a history is a non-empty list of packets). This is a departure
CCS ’19, November 11–15, 2019, London, United Kingdom
Skalka et al.
from low-level SDN languages such as OpenFlow, which require
thinking about hardware-level details such as forwarding tables,
matches, actions, priorities, etc. The language offers primitives for
matching (f = n) and modifying (f ← n) packet headers, as well
combinators such as union (+), sequence (·), and Kleene star (∗), that
form larger programs out of smaller ones. NetKAT is based on a solid
mathematical foundation, Kleene Algebra with Tests (KAT) [24],
and comes equipped with an equational reasoning system that can
be used to verify many properties of interest automatically [13].
Figure 4 defines the syntax and semantics of the language for-
mally. The denotational semantics ((cid:74)(cid:75)) models predicates a and
policies p as functions that take a packet history as input and pro-
duce a set of packet histories as output. Most of the constructs in
the language are standard, but the dup operator is worth noting:
it extends the trajectory recorded in the packet history by one
hop, which is useful for encoding paths. Many other constructs
can be defined—e.g., it is straightforward to encode conditionals
(if a then p else q) using union and sequence (a · p + ¬a · q).
NetKAT has an equational deductive system that can be used
to reason about network-wide properties automatically [4]. This
consists of a collection of equational axioms of the form p ≡ q that
capture equivalences between policies. These axioms are sound (ev-
ery pair of policies that can be proved equivalent behave identically)
and complete (every pair of policies that behave identically can be
proved equivalent). Moreover, NetKAT has an efficient procedure
for deciding policy equivalence [13], which enables automatic veri-
fication of rich properties such as reachability, loop freedom, traffic
isolation, and many others [4]. In Section 5.3, we develop an ex-
tended example of NetKAT programming to realize the application
scenario introduced in Section 1.
2.3 Decidable Behavioral Properties
Previous work has identified a number of interesting security prop-
erties that are decidable for NetKAT programs, including slicing,
isolation, and waypointing policies [4]. A general property of inter-
est for security is containment, where we write p ≤ q if and only
if p returns a subset of the packets returned by q on all inputs. In
a security and privacy context, we can take q to be a behavioral
specification, and by requiring that p ≤ q for any configuration pro-
gram p, we enforce that p at most refines or specializes the behavior
defined by q. For the case study described in Section 1 this property
is appropriate, as we will show in Section 4, and is interesting to
adapt for our prototype implementation (though in principal other
behavioral properties could also be verified in PCNC). Furthermore,
the relation p ≤ q can be considered an abbreviation for q ≡ p + q,
so decidability of ≡ allows specification and enforcement of desired
network properties.
As mentioned in Section 2.1, the logic NALlight admits application-
level assertions, which is how PCNC behavioral policy integrates
with NALlight for uniform policy expression. In particular, we in-
troduce the application-level assertion p ≼ q, with the following
derivation rule in NALlight, and its analogue for term witnessing
in System FSays:
Contains
q ≡ p + q
∆ ⊢ p ≼ q
Contains
q ≡ p + q
S, Γ ⊢ p ≼ q : p ≼ q
to(cid:74)p(cid:75) by a variant of Kleene’s Theorem (see Foster et al. [13] for
2.3.1 Proving Program Equivalence. The technique for proving
program equivalence we currently use in PCNC is based on bisim-
ulation of deterministic NetKAT automata, which are obtained via
determinization of the Antimorov derivative of NetKAT source
programs [13, 37]. Analogous to standard automata for strings,
NetKAT automata accept sequences of packets which are isomor-
phic to packet histories as we have defined for NetKAT. Hence, the
language recognized by an automaton is equivalent to the semantics
of the source program from which it is derived.
In the following, A ranges over deterministic NetKAT automata,
G(A) denotes the language accepted by A, and ∼ denotes bisim-
ilarity. Formally, if A is the automaton computed for a NetKAT
program p using the Antimorov derivative, then G(A) is related
details). We note that A1 ∼ A2 implies G(A1) = G(A2). An au-
tomaton can be represented by continuation and observation maps δ
and ϵ. Following the formulation due to Smolka et al. [37] for deter-
ministic automata (without loss of generality), both the observation
and continuation functions are parameterized by configurations,
which are pairs (pk, ℓ) for packets pk ∈ PK and states ℓ ∈ S. Intu-
itively, these configurations determine the relevant state ℓ, with
properties of pk refining transitions (analogous to automata on
guarded strings). The observation map applied to a configuration
yields a function that accepts packets, whereas the continuation
map applied to a configuration yields a function that transitions to
the next state given a packet. Observation and continuation maps
thus have the following signatures:
:
:
(S × PK) → PK → S
(S × PK) → PK → 2
δ
ϵ
Given automata A1 and A2, we can prove their equivalence
using bisimulation. Although bisimulation has been informally de-
scribed in prior work [13, 37], here we give an explicit definition
of the algorithm. We assume without loss of generality that au-
tomata are deterministic (since prior work has demonstrated sound
and complete determinization methods [13]). Let A1 and A2 be
encoded as previously defined, and let δ1, δ2, and ϵ1, ϵ2 be the con-
tinuation and observation maps of A1 and A2 respectively. We
can check bisimulation denoted A1 ∼ A2 as follows, based on
properties described in [13]. The bisimulation algorithm equiv can
be defined as follows, using an accumulator πc as a termination
condition for previously explored configurations:
equiv(c1, c2, πc) ⇐⇒
(c1, c2) ∈ πc
∨
∀pk . (ϵ1 c1 pk) = (ϵ2 c2 pk)
∀pk . equiv((δ1 c1 pk, pk),(δ2 c2 pk, pk), πc ∪ {(c1, c2)})
∧
Then, positing that initial automata states are always identified as
0, we can implement bisimulation as:
A1 ∼ A2 ⇐⇒ ∀pk.equiv((0, pk),(0, pk),)
Note these definitions quantify over all packets pk. As packets
contain all OpenFlow fields, there is clearly potential for combi-
natorial explosion in a naive implementation. However, a simple
optimization is to only consider packets containing fields and values
mentioned in the source programs or automata being checked for
equivalence. In general, our method for implementing bisimulation
Proof-Carrying Network Code
CCS ’19, November 11–15, 2019, London, United Kingdom
in the PCNC framework depends on our representation of source
code and automata, including compiler optimizations. We return to
this issue in Section 3.2.
3 THE PCNC FRAMEWORK
We implement PCNC using a client-server architecture. We assume
that at least one principal Root has administrative authority on the
Server, and that an initial behavioral policy has been defined as a
NetKAT program spec. Then to install a configuration program p,
the high level goal on the Server is to prove a judgment of the fol-
lowing form, where a credential environment Γ and a System FSays
proof witness e has been provided by the client:
, Γ ⊢ ⟨e, p ≼ spec⟩ : Root Says reconfig(p) × (p ≼ spec)
In this judgment, the program p is the (re)configuration program to
be installed and spec is the NetKAT behavioral policy specification.
The assertion p ≼ spec is predicated on program equivalence as
discussed in Section 2.3, and this component of the conjunction in
the judgment covers behavioral policy enforcement. The other com-
ponent of the conjunct Root Says reconfig(p) expresses the need
to verify that the administrator approves installation, as deduced
from the proof witness e provided by the client and the credentials
provided in Γ.
We can also imagine as a weaker privilege that rather than a
complete reconfiguration of the network, we allow only an exten-
sion of the current configuration. That is, assuming that q is the
current network configuration and p is the submitted extension,
the network is reconfigured with p + q following verification. For
this purpose we posit a different predicate extend, where the goal
judgment to prove on the server is:
, Γ ⊢ ⟨e, p + q ≼ spec⟩ : Root Says extend(p) × (p + q ≼ spec)
Again in this case, the client would provide Γ and e, in addition to
the extension program p, for verification of the request.
Thus, verification of the above judgments on the server, with
configuration and proof material provided by the client, comprises
both authorization and behavioral verification. Although in this pa-
per we consider just containment policies, we note that the synergy
of behavioral and authorization assertions in System FSays would
allow us to constrain principals to only affecting certain kinds of
traffic, as in the “flow spaces” of FLANC [18]. This could be accom-
plished with appropriate application-level (NetKAT) assertions. A
credentialed approach with public-key signatures allows this to
scale to highly distributed settings.
3.1 Authorization in System FSays
On the server side, validity of the submitted judgment is established
by checking the validity of Γ ⊢ e : Root Says reconfig(p). Since this
entails type checking, as long as the latter is implemented correctly,
we can trust typability of the given judgment—modulo trust of
assumptions in Γ.
Authentication and Integrity of Assumptions. The user will typi-
cally submit a non-empty Γ containing credentials (as illustrated
below in Section 4.1). The PCNC wire representation of credentials
ensures that clients cannot forge false assumptions. Specifically, we
restrict Γ so that it can only include credentials of the form A Says τ
in its image. Our approach to this is standard—we represent prin-
cipals A as public keys KA, and for every assumption A Says τ in
the image of Γ, we include signature s = sig(K−1
A , τ) in the PCNC
message, which is τ signed with A’s private key. The server can
then verify s given KA and τ which are provided directly in the
credential (so no public key lookup is necessary). This establishes
authenticity and integrity for all belief ascriptions in Γ. We provide
more detail about algorithms and wire format used to represent
proofs in Section 5.1.
As a simple example, if we assume that Bob is the local net-
work administrator, and wants to submit his own reconfiguration
program p, then Bob could submit the following credential:
cred : KBob Says reconfig(p)
along with its signature:
−1
Bob, KBob Says reconfig(p))
sig(K
and the proof term cred. Then given these items, on the Server we
can verify:
, cred : KBob Says reconfig(p) ⊢ cred : KBob Says reconfig(p)
Note also in this example how verification of the supplied signature
verifies authenticity and integrity of the reconfiguration program
p, due to the signature of cred.
Crucially, we further observe that there exists no e such that
, ⊢ e : KBob Says reconfig(p) is valid, since reconfig(p) has no
direct term witness and must follow from assumptions. Thus any
installation request must be appropriately credentialed. See Section
4.1 for a more extended example with a non-trivial proof term.
3.2 Behavioral Verification in NetKAT
If p is a reconfiguration program and spec is a behavioral policy
defined as a NetKAT program, then installation of p requires ver-
ification of p ≼ spec as a behavioral verification component. As
discussed in Section 2.3, this is equivalent to proving spec ≡ p +spec
by definition, and equivalence of NetKAT programs can be auto-
matically proven via bisimulation of their derived deterministic
automata. Thus, writing A(p) to denote the deterministic automata
obtained from any program p, we have:
p ≼ spec ⇐⇒ (A(spec) ∼ A(p + spec))
Therefore the central technical challenge for PCNC behavioral ver-
ification is checking NetKAT program equivalence via bisimulation
of derived automata. This approach has the benefit of integrating
easily with the current state-of-the-art compiler for NetKAT in Fre-
netic [12, 37], where determinized NetKAT automata are generated
as an intermediate representation. These automata are subsequently
provided to a back-end that translates them to OpenFlow tables,
but we can “intercept” automata representations, and in our frame-
work, we define bisimulation directly on the intermediate automata
representations.
3.2.1
FDDs and Optimizations. An important detail of automata
representation in Frenetic is the use of forwarding decision dia-
grams (FDDs) [37] to represent observation and continuation func-
tions as they are described in Section 2.3. FDDs are a variation of
binary decision diagrams (BDDs), but test field names rather than
bits. FDDs benefit from optimizing transformations which in turn
CCS ’19, November 11–15, 2019, London, United Kingdom
Skalka et al.
support optimizations of network programs as they are deployed in
flow tables. Since equality and evaluation of FDDs is decidable, our
approach is thus flexible with respect to FDD-based compiler opti-
mizations. Furthermore, to achieve the bisimulation optimization
suggested at the end of Section 2.3, in our implementation FDDs
are analyzed to extract field-value pairs that are explicitly tested
in programs. These pairs are used to generate the strict subset of
packets that are relevant to checking bisimulation.
3.2.2 Program Wire Format. In the framework it is necessary
to maintain the specification spec on the Server for confidence in
its definition. Thus, when checking p ≼ spec on the Server it is
necessary to obtain A(p + spec) there. While it would be possible
to ship A(p), and then compute A(p + spec), the current version
of Frenetic does not support a serialized format for automata, and
also compilation to automata is highly efficient for the examples
we have considered. Shipping the source code p has the additional
advantage of simplicity for this presentation, so in our prototype
implementation we take this approach.
However, we observe that in principle it would also be feasible
to ship A(p), which would have the benefit of being adaptable to
arbitrary compiler optimizations that clients may desire to apply,
and which may not be available on the Server.
4 PCNC INSTANCE: CASE STUDY
We now return to the case study introduced in Section 1, and show
how it can be implemented as an instance of the PCNC framework.
We imagine that the local network is owned and administered
by Bob, and that the health monitoring devices Bob adds to his
network are provided by the vendor NetCo, which also provides
configuration code for these devices submitted as a PCNC request.
We further imagine that another IoT network, owned and ad-
ministered by Alice, provides an edge computing service, where
Alice and Bob do not have a direct trust relationship. In order to
obtain his public data, Alice submits a configuration extension code
to Bob as a PCNC request.
4.1 Authorization
Because Bob purchases health monitoring devices from NetCo, he
also trusts them to install configuration code in his local network,
as well as to extend the local configuration. Thus Bob provides
them with a credential asserting that NetCo speaks on Bob’s behalf
for any installation or extension requests. In NALlight this could be
represented as the following formula, with the convention intro-
duced in Section 3.1 that principals are represented by their public
keys in credentials:
KBob Says
KNetCo SpeaksFor KBob on (X : reconfig(X))∧
KNetCo SpeaksFor KBob on (X : extend(X))
and the corresponding System FSays type form is:
τdelegate ≜
KBob Says
(∀X .KNetCo Says reconfig(X) → KBob Says reconfig(X)) ×
(∀X .KNetCo Says extend(X) → KBob Says extend(X))
and in addition Bob provides NetCo the appropriate signature to