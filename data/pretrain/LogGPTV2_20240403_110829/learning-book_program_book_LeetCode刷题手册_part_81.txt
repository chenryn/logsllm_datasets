Output: false
Explanation: we can't enter the room with number 2.
Note:
1.1 = 3;
● and F[i] + F[i+1] = F[i+2] for all 0 = 3;
●对于所有的00{
break
first, _ := strconv.Atoi(s[:firstEnd+1])
iffirst>=1 1{
break
second,
_ := strconv.Atoi(s[firstEnd+1 : secondEnd+1])
ifsecond>=1=1=10 &&！*isComplete{
*res =(*res)[:1en(*res)-1]
return
844.BackspaceString_Compare
题目
Given two strings S and T, return if they are equal when both are typed into empty text edlitors.
## means a backspace character.
Example 1:
Input: S = "ab#c", T =
"ad#c"
output: true
Explanation: Both S and T become "ac"
Example 2:
Input: S =“ab##", T = “c#d#"
output: true
Explanation: Both S and T become
Example 3:
Input: S =“a##c", T = “#a#c”
output: true
Explanation: Both S and T become "c"
Example 4:
---
## Page 799
Input:S ="a#c",
"b
Output: false
Explanation: S becomes "c" while T becomes “b"
Note:
●1  0 {
5 = s[:len(s)-1]
}else{
S = append(s, c)
---
## Page 800
s2 := make([]rune, 0)
for
-,C := range T{
if c=#{
if 1en(s2) >0 {
s2 = s2[:1en(s2) -1]
}else{
s2 = append(s2, c)
return string(s) == string(s2)
845.LongestMountaininArray
题目
Let's call any (contiguous) subarray B (of A) a mountain if the following properties hold:
●B.length >= 3
 [1-1]g " > [1]g > [o]g eu qns  - yguag >1> 0 awos sisxa aau1 ●
B[B.length - 1]
(Note that B could be any subarray of A, including the entire array A.)
Given an array A of integers, return the length of the longest mountain.
Return 0 if there is no mountain.
Example 1:
Input: [2,1,4,7,3,2,5]
Output: 5
Explanation: The largest mountain is [1,4,7,3,2] which has length 5.
Example 2:
Input: [2,2,2]
output: 0
Exp1lanation: There is no mountain.
Note:
---
## Page 801
●0  A[1eft] &&
A[right+1]> A[right]) 11 (right != left && A[right+1] 0 && sat.tree[rightTreeIndex].count >
0
newValue = sat.merge(sat.tree[leftTreeIndex]. val,
sat.tree[rightTreeIndex] .val)
} else if sat.tree[leftTreeIndex].count > 0 &&
sat.tree[rightTreeIndex].count == 0 {
newValue = sat.tree[leftTreeIndex] .va]
3 else if sat.tree[leftTreeIndex].count ==
：0&&
sat.tree[rightTreeIndex].count > 0 {
newValue = sat.tree[rightTreeIndex].va]
sat.tree[treeIndex] = SegmentItem{count: newCount, val: newValue}
●扫描每一个扫描线，先pushDown到叶子节点，再pushUp到根节点。
Sweep line =[0,3]+1
[0,3]