r1
3;
4 ← x0
r1
4;
6:
7:
8:
9:
10:
0 ← r1
r2
1 ← r1
r2
2 ← r1
r2
3 ← r1
r2
4 ← r1
r2
0 + 4503599627370458;
1 + 4503599627370494;
2 + 4503599627370494;
3 + 4503599627370494;
4 + 4503599627370494;
Figure 5: Subtraction BV2ZProg(bSubSSA)
11:
12:
13:
14:
15:
0 ← r2
r3
1 ← r2
r3
2 ← r2
r3
3 ← r2
r3
4 ← r2
r3
0 − y0
0;
1 − y0
1;
2 − y0
2;
3 − y0
3;
4 − y0
4;
rather than on bSt.
zPred
::= ⊤ | zExpr = zExpr | zExpr ≡ zExpr mod zExpr
| zPred ∧ zPred
match s with
Algorithm 5 Transformation from bStmt to zStmt (w is the as-
sumed wordsize)
1: function BV2ZStmt(s)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18: end function
case v ← a: return v ← ˜a
case v ← a1 + a2: return v ← ˜a1 + ˜a2
case c v ← a1 + a2:
return [c, v] ← Split( ˜a1 + ˜a2, w )
case v ← a1 + a2 + y: return v ← ˜a1 + ˜a2 + y
case c v ← a1 + a2 + y:
return [c, v] ← Split( ˜a1 + ˜a2 + y, w )
case v ← a1 − a2: return v ← ˜a1 − ˜a2
case v ← a1 × a2: return v ← ˜a1 × ˜a2
case vh vl ← a1 × a2:
return [vh, vl ] ← Split( ˜a1 × ˜a2, w )
case v ← a ≪ n: return v ← ˜a × Pow(2, |n|)
case vh vl ← a@n: return [vh, vl ] ← Split( ˜a, |n|)
case vh vl ← (a1.a2) ≪ n:
return [vh, vl ] ← Split( ˜a1×Pow(2, w ) + ˜a2, w−|n|)
Figure 5 shows the result of transforming the subtraction pro-
gram bSubSSA to zCryptoLine.
4.3 Modular Polynomial Equation Entailment
The last step transforms any algebraic program specification in
zCryptoLine to the modular polynomial equation entailment prob-
lem. For q ∈ zPred, we write q(⃗x ) to signify the free variables ⃗x
occurring in q. Given q(⃗x ), q′(⃗x ) ∈ zPred, the modular polynomial
equation entailment problem decides whether q(⃗x ) =⇒ q′(⃗x )
holds when ⃗x are substituted for arbitrary integers. That is, we
want to check if for every valuation µ ∈ zSt, q(⃗x ) evaluates to tt
implies q′(⃗x ) evaluates to tt after each variable x is replaced by
µ (x ). We write Z |= ∀⃗x .q(⃗x ) =⇒ q′(⃗x ) if it is indeed the case.
Programs in static single assignment form can easily be trans-
formed to conjunctions of polynomial equations. The function
StmtToPolyEq (Algorithm 6) translates (1) an assignment state-
ment to a polynomial equation with a variable on the left hand
side and (2) a Split statement to an equation with a linear ex-
pression of the assigned variables on the left hand side. A pro-
gram in static single assignment form is then transformed to the
conjunction of polynomial equations corresponding to its state-
ments by the function ProgToPolyEq, which is recursively de-
fined such that ProgToPolyEq(ϵ ) ≜ ⊤ and ProgToPolyEq(s; p) ≜
StmtToPolyEq(s) ∧ ProgToPolyEq(p).
(cid:40)
For µ ∈ zSt and q ∈ bPreda, write Z |= q[µ] if q evaluates to tt
using the evaluation function [[e]]Z (µ) for every subexpression e
in q. Given q, q′ ∈ zPred and p ∈ zProg, (|q|) p (|q′|) is valid (written
|= (|q|) p (|q′|)) if for every µ, µ′ ∈ zSt, Z |= q[µ] and µ
=⇒ µ′ imply
p
Z |= q′[µ′].
Now we are ready to describe the transformation from an alge-
braic specification in bvCryptoLine to a specification in zCryp-
toLine. Given ν ∈ bSt and µ ∈ zSt, write ν ≃ µ when |ν (v)| =
µ (v) for all variable v ∈ Var. For algebraic expressions, since
zExpr subsumes bExpa, we can easily define a function BV2ZExpr
that converts an algebraic expression ea ∈ bExpa to zExpr such
that for every ν ∈ bSt and µ ∈ zSt with ν ≃ µ, [[ea]]Z (ν ) =
[[BV2ZExpr(ea )]]Z (µ). Similarly, we can define a function BV2ZPred
such that for every qa ∈ bPreda, ν ∈ bSt, and µ ∈ zSt with ν ≃ µ,
Vw |= qa[ν] if and only if Z |= BV2ZPred(qa )[µ]. Atoms are trans-
lated by the function BV2ZAtom.
BV2ZAtom(a) =
v
|b|
if a is a variable v
if a is a bit-vector b
Let ˜a denote BV2ZAtom(a) for a ∈ bAtom. The function BV2ZStmt
(Algorithm 5) is defined to transform a statement in bvCrypto-
Line to a statement in zCryptoLine. Define a function BV2ZProg
recursively such that BV2ZProg(ϵ ) ≜ ϵ and BV2ZProg(s; p) ≜
BV2ZStmt(s); BV2ZProg(p). With these translation functions, the
following soundness theorem holds.
a )|).
(cid:57)q′
a(cid:57)
(cid:57)qr |) p (|q′
p ∈ bProg, |= (|qa(cid:57)
a ∈ bPreda, qr , q′
r ∈ bPredr, and
r |) if all the following conditions hold.
Theorem 4.3. For every qa, q′
C1 Vw |= qr [ν] implies ProgSafe(p, ν ) = tt for all ν ∈ bSt.
C2 |= (|qr |) p (|q′
r |).
C3 |= (|BV2ZPred(qa )|) BV2ZProg(p) (|BV2ZPred(q′
As conditions C1 and C2 involve only bit-vector operations, both
conditions can be verified by translations to the QF_BV fragment
(quantifier-free formulas over the theory of fixed-size bit-vectors)
of SMT (Section 5.1). Condition C3 is verified by a transformation to
polynomial equation entailment (Section 5.2). Note that the inverse
implication of Theorem 4.3 does not hold because for example, prov-
ing |= (|qr |) p (|q′
r |) may require that qa holds initally but we do not
consider any algebraic predicates in verifying range specifications.
The function BV2ZProg preserves well-formedness and static
single assignment form. This is showed by the following lemma.
Lemma 4.4. Given a well-formed program p ∈ bProg in static
single assignment form, BV2ZProg(p) ∈ zProg is well-formed and in
static single assignment form.
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1980(cid:42)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:44)
⊤ ∧
0 ∧
0 = x0
r1
1 ∧
1 = x0
r1
2 ∧
2 = x0
r1
3 ∧
3 = x0
r1
4 ∧
r1
4 = x0
4, x0
1, x0
2, x0
3, x0
radix51Z (x0
Figure 6: Modular Polynomial Equation Entailment for BV2ZProg(bSubSSA)
0 + 4503599627370458 ∧
1 + 4503599627370494 ∧
2 + 4503599627370494 ∧
3 + 4503599627370494 ∧
4 + 4503599627370494 ∧
0 ) ≡ radix51Z (r3
4 , r3
2, y0
3, y0
0 = r2
r3
1 = r2
r3
r3
2 = r2
r3
3 = r2
r3
4 = r2
1 , r3
0 ) mod ϱ
0 = r1
r2
1 = r1
r2
2 = r1
r2
r2
3 = r1
r2
4 = r1
4, y0
0 ∧
0 − y0
1 ∧
1 − y0
2 − y0
2 ∧
3 ∧
3 − y0
4 − y0
4
0 ) − radix51Z (y0
1, y0
3 , r3
2 , r3
(cid:43)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:45) =⇒
(Theorem 4.2)
(Theorem 4.3)
(Theorem 4.7)
⇐ Vw |= ˆqr [ν] implies ProgSafe( ˆp) = tt for all ν ∈ bSt,
match s with
Algorithm 6 Polynomial Equation Transformation for Statements
1: function StmtToPolyEQ(s)
2:
3:
4:
5:
6: end function
case v ← e: return v = e
case [vh, vl ] ← Split(e, n):
return vl + Pow(2, n) × vh = e
The functions StmtToPolyEq and ProgToPolyEq are specified
straightforwardly in Gallina. We use the proof assistant Coq to
prove properties about the functions. Note that ProgToPolyEQ(p)
∈ zPred for every p ∈ zProg. The following theorem shows that any
behavior of the program p is a solution to the system of polynomial
equations ProgToPolyEQ(p). In other words, ProgToPolyEQ(p)
gives an abstraction of the program p.
Theorem 4.5. Let p ∈ zProg be a well-formed program in static
=⇒ µ′, we have
p
single assignment form. For every µ, µ′ ∈ zSt with µ
Z |= ProgToPolyEQ(p)[µ′].
Definition 4.6 gives the modular polynomial equation entailment
problem corresponding to an algebraic program specification.
Definition 4.6. For q, q′ ∈ zPred and p ∈ zProg in static single
assignment form, define
Π((|q|) p (|q
′|)) ≜ q(⃗x ) ∧ φ(⃗x ) =⇒ q
′
(⃗x )
where φ(⃗x ) = ProgToPolyEQ(p).
Example. The modular polynomial equation entailment problem
corresponding to the algebraic specification of subtraction is shown
in Figure 6. The problem has 15 polynomial equality constraints
with 25 variables. Define radix51Z (x4, x3, x2, x1, x0) ≜ Pow(2, 51×Z
4) × x4 + Pow(2, 51×Z 3) × x3 + Pow(2, 51×Z 2) × x2 + Pow(2, 51×Z
1) × x1 + Pow(2, 51 ×Z 0) × x0 for x0, x1, x2, x3, x4 ∈ Var. We
want to know if radix51Z (r3
0 ) is the difference between
radix51Z (x0
2, x0
1, x0
0 ) in GF(ϱ)
under the constraints.
The soundness of ProgToPolyEq is certified in Coq (Theo-
rem 4.7). It is not complete because in the transformation of the
statement [vh, vl ] ← Split(e, n), the polynomial equation vl +
Pow(2, n) × vh = e does not guarantee that vl exactly represents
the lower n bits of e.
4 , r3
0 ) and radix51Z (y0
4, x0
3, x0
4, y0
3, y0
1, y0
2, y0
3 , r3
2 , r3
1 , r3
Theorem 4.7. Let q, q′ ∈ zPred be predicates, and p ∈ zProg
a well-formed program in static single assignment form. If Z |=
∀⃗x .Π((|q|) p (|q′|)), then |= (|q|) p (|q′|).
(cid:57)qr |) p (|q′
(cid:57)ˆqr |) ˆp (| ˆq′
(cid:57)q′
|= (|qa(cid:57)
r |)
a(cid:57)
(cid:57)ˆq′
⇔ |= (| ˆqa(cid:57)
r |)
a(cid:57)
where ⟨ ˆθ, ˆp⟩ = SSAProg(θ0, p),
ˆqa = SSAPreda(θ0, qa ),
ˆqr = SSAPredr(θ0, ar ),
ˆq′
a = SSAPreda( ˆθ, q′
a ), and
ˆq′
r = SSAPredr( ˆθ, q′
r )
|= (| ˆqr |) ˆp (| ˆq′
r |), and
|= (| ˜qa|) ˜p (| ˜q′
a|)
where ˜p = BV2ZProg( ˆp),
˜qa = BV2ZPred( ˆqa ), and
˜q′
a = BV2ZPred( ˆq′
a )
|= (| ˆqr |) ˆp (| ˆq′
r |), and
Z |= ∀⃗x .Π((| ˜qa|) ˜p (| ˜q′
a|))
⇐ Vw |= ˆqr [ν] implies ProgSafe( ˆp) = tt for all ν ∈ bSt,
Figure 7: Summary of Translations
Summary of Translation. Consider any algebraic predicates qa,
a ∈ bPreda, range predicates qr , q′
q′