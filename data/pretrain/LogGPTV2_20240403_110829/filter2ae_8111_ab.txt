                return;
            // This is not meant to be foolproof -- but it will catch obviously incorrect usage.
            if ( strpos( $query, '%' ) === false ) {
                _doing_it_wrong( 'wpdb::prepare', sprintf( __( 'The query argument of %s must have a placeholder.' ), 'wpdb::prepare()' ), '3.9.0' );
            }
            $args = func_get_args();
            array_shift( $args );
            // If args were passed as an array (as in vsprintf), move them up
            if ( isset( $args[0] ) && is_array($args[0]) )
                $args = $args[0];
            $query = str_replace( "'%s'", '%s', $query ); // in case someone mistakenly already singlequoted it
            $query = str_replace( '"%s"', '%s', $query ); // doublequote unquoting
            $query = preg_replace( '|(?_real_escape( $string );
    }
这里的`_real_escape`函数，就是一些转义函数的封装。
        function _real_escape( $string ) {
            if ( $this->dbh ) {
                if ( $this->use_mysqli ) {
                    return mysqli_real_escape_string( $this->dbh, $string );
                } else {
                    return mysql_real_escape_string( $string, $this->dbh );
                }
            }
            $class = get_class( $this );
            if ( function_exists( '__' ) ) {
                /* translators: %s: database access abstraction class, usually wpdb or a class extending wpdb */
                _doing_it_wrong( $class, sprintf( __( '%s must set a database connection for use with escaping.' ), $class ), '3.6.0' );
            } else {
                _doing_it_wrong( $class, sprintf( '%s must set a database connection for use with escaping.', $class ), '3.6.0' );
            }
            return addslashes( $string );
        }
这样在返回前，调用vsprintf的时候，post_status的值中的单引号就已经被转义过了。
当然，在代码中经常会不可避免的拼接语句，举个例子。
    /wp-includes/class-wp-query.php line 2246~2282
面对这种大批量的拼接问题，一般会使用`esc_sql`函数来过滤
这里esc_sql最终也是会调用上面提到的escape函数来转义语句
    function esc_sql( $data ) {
        global $wpdb;
        return $wpdb->_escape( $data );
    }
其实一般意义上来说，只要拼接进入语句的可控参数进入esc_sql函数，就可以认为这里不包含注入点。
但事实就是，总会有一些错误发生。
## Wordpress Sqli漏洞
这是一个很精巧的漏洞，具体的漏洞分析可以看文章
这里不讨论这个，直接跳过前面的步骤到漏洞核心原理的部分
    wp-includes/meta.php line 365行
这里我们可以找到漏洞代码
我们可以注意到，当满足条件的时候，字符串会两次进入prepare函数。
当我们输入`22 %1$%s
hello`的时候，第一次语句中的占位符`%s`会被替换为`&#39;%s&#39;`，第二次我们传入的`%s`又会被替换为`&#39;%s&#39;`,这样输出结果就是`meta_value
= &#39;22 %1$&#39;%s&#39; hello&#39;`
紧接着`%1$&#39;%s`会被格式化为`$_thumbnail_id`，这样就会有一个单引号成功的逃逸出来了。
这样，在wordpress的严防死守下，一个sql注入漏洞仍然发生了。
# 0x05 Wordpress插件安全
其实Wordpress的插件安全一直都是Wordpress的安全体系中最最薄弱的一环，再加上Wordpress本身的超级管理员信任问题，可以说90%的Wordpress安全问题都是出在插件上。
我们可以先了解一下Wordpress给api开放的接口，在wordpress的文档中，它推荐wordpress的插件作者通过hook函数来把自定义的接口hook进入原有的功能，甚至重写系统函数。
也就是说，如果你愿意，你可以通过插件来做任何事情。
从几年前，就不断的有wordpress的插件主题爆出存在后门。
事实上，在wordpress插件目录中，wordpress本身并没有做任何的处理，当你的用户权限为超级管理员时，wordpress默认你可以对自己的网站负责，你可以修改插件文件、上传带有后门的插件，这可以导致后台几乎可以等于webshell。
也正是由于这个原因，一个后台的反射性xss就可以对整个站进行利用。
而Wordpress的插件问题也多数出现在开发者水平的参差不齐上，对很多接口都用了有问题的过滤方式甚至没做任何过滤，这里举个例子。
## Wordpress Statistics注入漏洞
Wordpress
Statistics在v12.0.7版本的时候，爆出了一个注入漏洞，当一个编辑权限的账户在编辑文章中加入短代码，服务端在处理的时候就会代入sql语句中。
短代码是一个比较特殊的东西，这是Wordpress给出的一个特殊接口，当文章加入短代码时，后台可以通过处理短代码返回部分数据到文章中，就比如文章阅读数等...
当我们传入
    [wpstatistics stat="searches" time="today" provider="sss' union select 1,sleep(5),3,4,5,6#" format="1111" id="1"]
跟入代码`/includes/functions/funstions.php 725行`
然后进入 /includes/functions/funstions.php 622行
这里直接拼接，后面也没有做任何处理。
这个漏洞最后的修复方式就是通过调用`esc_sql`来转义参数，可见漏洞的产生原因完全是插件开发者的问题。
# 0x06 总结
上面稀里哗啦的讲了一大堆东西，但其实可以说Wordpress的安全架构还是非常安全的，对于Wordpress主站来说，最近爆出的漏洞大部分都是信任链的问题，在wordpress小于4.7版本中就曾爆出过储存型xss漏洞，这个漏洞产生的很大原因就是因为信任youtube的返回而导致的漏洞。
而在实际生活中，wordpress的漏洞重点集中在插件上面...在wordpress的插件上多做注意可能最重要的一点。
原文地址：