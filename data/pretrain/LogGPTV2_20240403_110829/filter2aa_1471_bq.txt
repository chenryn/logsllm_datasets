C:\Windows\System32
64-bit only
ProgramFilesX86
C:\Program Files (x86)
32-bit/64-
bit
ProgramFilesX64
C:\Program Files
64-bit only
ProgramFilesCommon
X86
C:\Program Files 
(x86)\Common Files
32-bit/64-
bit
ProgramFilesCommon
X64
C:\Program Files\Common Files
64-bit only
Windows
C:\Windows
Neutral
CommonAppData
C:\ProgramData
Neutral
The File System Virtualization is provided by three different drivers,
which are heavily used for Argon containers:
■    Windows Bind minifilter driver (BindFlt) Manages the redirection
of the Centennial application’s files. This means that if the Centennial
app wants to read or write to one of its existing virtualized files, the
I/O is redirected to the file’s original position. When the application
creates instead a file on one of the virtualized folders (for example, in
C:\Windows), and the file does not already exist, the operation is
allowed (assuming that the user has the needed permissions) and the
redirection is not applied.
■    Windows Container Isolation minifilter driver (Wcifs)
Responsible for merging the content of different virtualized folders
(called layers) and creating a unique view. Centennial applications
use this driver to merge the content of the local user’s application data
folder (usually C:\Users\\AppData) with the app’s
application cache folder, located in C:\User\
\Appdata\Local\Packages\\AppData\Roaming\Microsoft\Windows\Start
Menu). The modern Start menu uses the services provided by the
AppResolver library to register file system notifications on all the Start
menu folders (through the ReadDirectoryChangesW Win32 API). In this
way, whenever a new shortcut is created in the monitored folders, the
library can get a callback and signal the Start menu to redraw itself.
EXPERIMENT: Witnessing the state repository
You can open each partition of the state repository fairly easily
using your preferred SQLite browser application. For this
experiment, you need to download and install an SQLite browser,
like the open-source DB Browser for SQLite, which you can
download from http://sqlitebrowser.org/. The State Repository path
is not accessible by standard users. Furthermore, each partition’s
file could be in use in the exact moment that you will access it.
Thus, you need to copy the database file in another folder before
trying to open it with the SQLite browser. Open an administrative
command prompt (by typing cmd in the Cortana search box and
selecting Run As Administrator after right-clicking the Command
Prompt label) and insert the following commands:
Click here to view code image
C:\WINDOWS\system32>cd 
“C:\ProgramData\Microsoft\Windows\AppRepository”
C:\ProgramData\Microsoft\Windows\AppRepository>copy 
StateRepository-Machine.srd
"%USERPROFILE%\Documents"
In this way, you have copied the State Repository machine
partition into your Documents folder. The next stage is to open it.
Start DB Browser for SQLite using the link created in the Start
menu or the Cortana search box and click the Open Database
button. Navigate to the Documents folder, select All Files (*) in the
File Type combo box (the state repository database doesn’t use a
standard SQLite file extension), and open the copied
StateRepository-machine.srd file. The main view of DB Browser
for SQLite is the database structure. For this experiment you need
to choose the Browse Data sheet and navigate through the tables
like Package, Application, PackageLocation, and PrimaryTile.
The Application Activation Manager and many other
components of the Modern Application Model use standard SQL
queries to extract the needed data from the State Repository. For
example, to extract the package location and the executable name
of a modern application, a SQL query like the following one could
be used:
Click here to view code image
SELECT p.DisplayName, p.PackageFullName, 
pl.InstalledLocation, a.Executable, pm.Name
FROM Package AS p
INNER JOIN PackageLocation AS pl ON p._PackageID=pl.Package
INNER JOIN PackageFamily AS pm ON 
p.PackageFamily=pm._PackageFamilyID
INNER JOIN Application AS a ON a.Package=p._PackageID
WHERE pm.PackageFamilyName=""
The DAL (Data Access Layer) uses similar queries to provide
services to its clients.
You can annotate the total number of records in the table and
then install a new application from the store. If, after the
deployment process is completed, you again copy the database file,
you will find that number of the records change. This happens in
multiple tables. Especially if the new app installs a new tile, even
the PrimaryTile table adds a record for the new tile shown in the
Start menu.
The Dependency Mini Repository
Opening an SQLite database and extracting the needed information through
an SQL query could be an expensive operation. Furthermore, the current
architecture requires some interprocess communication done through RPC.
Those two constraints sometimes are too restrictive to be satisfied. A classic
example is represented by a user launching a new application (maybe an
Execution Alias) through the command-line console. Checking the State
Repository every time the system spawns a process introduces a big
performance issue. To fix these problems, the Application Model has
introduced another smaller store that contains Modern applications’
information: the Dependency Mini Repository (DMR).
Unlike from the State Repository, the Dependency Mini Repository does
not make use of any database but stores the data in a Microsoft-proprietary
binary format that can be accessed by any file system in any security context
(even a kernel-mode driver could possibly parse the DMR data). The System
Metadata directory, which is represented by a folder named Packages in the
State Repository root path, contains a list of subfolders, one for every
installed package. The Dependency Mini Repository is represented by a
.pckgdep file, named as the user’s SID. The DMR file is created by the
Deployment service when a package is registered for a user (for further
details, see the “Package registration” section later in this chapter).
The Dependency Mini Repository is heavily used when the system creates
a process that belongs to a packaged application (in the AppX Pre-
CreateProcess extension). Thus, it’s entirely implemented in the Win32
kernelbase.dll (with some stub functions in kernel.appcore.dll). When a
DMR file is opened at process creation time, it is read, parsed, and memory-
mapped into the parent process. After the child process is created, the loader
code maps it even in the child process. The DMR file contains various
information, including
■    Package information, like the ID, full name, full path, and publisher
■    Application information: application user model ID and relative ID,
description, display name, and graphical logos
■    Security context: AppContainer SID and capabilities
■    Target platform and the package dependencies graph (used in case a