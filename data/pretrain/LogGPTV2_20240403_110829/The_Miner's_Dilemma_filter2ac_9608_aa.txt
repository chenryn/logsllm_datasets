title:The Miner's Dilemma
author:Ittay Eyal
2015 IEEE Symposium on Security and Privacy
2015 IEEE Symposium on Security and Privacy
The Miner’s Dilemma
Ittay Eyal
Cornell University
Abstract—An open distributed system can be secured by
requiring participants to present proof of work and rewarding
them for participation. The Bitcoin digital currency introduced
this mechanism, which is adopted by almost all contemporary
digital currencies and related services.
A natural process leads participants of such systems to form
pools, where members aggregate their power and share the
rewards. Experience with Bitcoin shows that the largest pools
are often open, allowing anyone to join. It has long been known
that a member can sabotage an open pool by seemingly joining
it but never sharing its proofs of work. The pool shares its
revenue with the attacker, and so each of its participants earns
less.
We deﬁne and analyze a game where pools use some of
their participants to inﬁltrate other pools and perform such
an attack. With any number of pools, no-pool-attacks is not
a Nash equilibrium. We study the special cases where either
two pools or any number of identical pools play the game and
the rest of the participants are uninvolved. In both of these
cases there exists an equilibrium that constitutes a tragedy of
the commons where the participating pools attack one another
and earn less than they would have if none had attacked.
For two pools, the decision whether or not to attack is
the miner’s dilemma, an instance of the iterative prisoner’s
dilemma. The game is played daily by the active Bitcoin
pools, which apparently choose not to attack. If this balance
breaks, the revenue of open pools might diminish, making them
unattractive to participants.
I. INTRODUCTION
Bitcoin [1] is a digital currency that is gaining accep-
tance [2] and recognition [3], with an estimated market
capitalization of over 4.5 billion US dollars, as of Novem-
ber 2014 [4]. Bitcoin’s security stems from a robust incentive
system. Participants are required to provide expensive proofs
of work, and they are rewarded according to their efforts.
This architecture has proved both stable and scalable, and it
is used by most contemporary digital currencies and related
services, e.g. [5], [6], [7], [8], [9]. Our results apply to all
such incentive systems, but we use Bitcoin terminology and
examples since it serves as an active and archetypal example.
Bitcoin implements its incentive systems with a data
structure called the blockchain. The blockchain is a serial-
ization of all Bitcoin transactions. It is a single global ledger
maintained by an open distributed system. Since anyone
can join the open system and participate in maintaining the
blockchain, Bitcoin uses a proof of work mechanism to deter
attacks: participation requires exerting signiﬁcant compute
resources. A participant that proves she has exerted enough
resources with a proof of work is allowed to take a step in the
© 2015, Ittay Eyal. Under license to IEEE.
© 2015, Ittay Eyal. Under license to IEEE.
DOI 10.1109/SP.2015.13
DOI 10.1109/SP.2015.13
89
89
protocol by generating a block. Participants are compensated
for their efforts with newly minted Bitcoins. The process of
creating a block is called mining, and the participants —
miners.
In order to win the reward, many miners try to generate
blocks. The system automatically adjusts the difﬁculty of
block generation, such that one block is added every 10
minutes to the blockchain. This means that each miner
seldom generates a block. Although its revenue may be
positive in expectation, a miner may have to wait for
an extended period to create a block and earn the actual
Bitcoins. Therefore, miners form mining pools, where all
members mine concurrently and they share their revenue
whenever one of them creates a block.
Pools are typically implemented as a pool manager and a
cohort of miners. The pool manager joins the Bitcoin system
as a single miner. Instead of generating proof of work, it
outsources the work to the miners. In order to evaluate the
miners’ efforts, the pool manager accepts partial proof of
work and estimates each miner’s power according to the
rate with which it submits such partial proof of work. When
a miner generates a full proof of work, it sends it to the pool
manager which publishes this proof of work to the Bitcoin
system. The pool manager thus receives the full revenue of
the block and distributes it fairly according to its members
power. Many of the pools are open — they allow any miner
to join them using a public Internet interface.
Such open pools are susceptible to the classical block
withholding attack [10], where a miner sends only partial
proof of work to the pool manager and discards full proof
of work. Due to the partial proof of work it sends to the
pool, the miner is considered a regular pool member and the
pool can estimate its power. Therefore, the attacker shares
the revenue obtained by the other pool members, but does
not contribute. It reduces the revenue of the other members,
but also its own. We provide necessary background on the
Bitcoin protocol, pools and the classical block withholding
attack in Section II, and specify our model in Section III.
For a broader view of the protocol and ecosystem the reader
may refer to the survey by Bonneau et al. [11].
In this work we analyze block withholding attacks among
pools. A pool that employs the pool block withholding attack
registers with the victim pool as a regular miner. It receives
tasks from the victim pool and transfers them to some of
its own miners. We call these inﬁltrating miners, and the
mining power spent by a pool the inﬁltration rate. When
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:05:40 UTC from IEEE Xplore.  Restrictions apply. 
the attacking pool’s inﬁltrating miners deliver partial proofs
of work, the attacker transfers them to the victim pool,
letting the attacked pool estimate their power. When the
inﬁltrating miners deliver a full proof of work, the attacking
pool discards it.
This attack affects the revenues of the pools in several
ways. The victim pool’s effective mining rate is unchanged,
but its total revenue is divided among more miners. The
attacker’s mining power is reduced, since some of its miners
are used for block withholding, but
it earns additional
revenue through its inﬁltration of the other pool. And ﬁnally,
the total effective mining power in the system is reduced,
causing the Bitcoin protocol to reduce the difﬁculty.
Taking all these factors into account, we observe that a
pool might be able to increase its revenue by attacking other
pools. Each pool therefore makes a choice of whether to
attack each of the other pools in the system, and with what
inﬁltration rate. This gives rise to the pool game. We specify
this game and provide initial analysis in Section IV.
In Section V we analyze the scenario where exactly two
of the pools take part in the game and only one can attack
the other. Here, the attacker can always increase its revenue
by attacking. We conclude that in the general case, with any
number of pools, no-pool-attacks is not a Nash equilibrium.
Next, Section VI deals with the case of two pools, where
each can attack the other. Here, analysis becomes more
complicated in two ways. First, the revenue of each pool
affects the revenue of the other through the inﬁltrating
miners. We prove that for a static choice of inﬁltration
rates the pool revenues converge. Second, once one pool
changes its inﬁltration rate of the other, the latter may prefer
to change its inﬁltration rate of the former. Therefore the
game itself takes multiple rounds to converge. We show
analytically that the game has a single Nash Equilibrium
and numerically study the equilibrium points for different
pool sizes. For pools smaller than 50%, at the equilibrium
point both pools earn less than they would have in the non-
equilibrium no-one-attacks strategy.
Since pools can decide to start or stop attacking at any
point, this can be modeled as the miner’s dilemma — an
instance of the iterative prisoner’s dilemma. Attacking is the
dominant strategy in each iteration, but if the pools can agree
not to attack, both beneﬁt in the long run.
Finally, we address in Section VII the case where the
participants are an arbitrary number of identical pools. There
exists a symmetric equilibrium in which each participating
pool attacks each of the other participating pools. As in
the minority two-pools scenario, here too at equilibrium all
pools earn less than with the no-pool-attacks strategy.
Our results imply that block withholding by pools leads
to an unfavorable equilibrium. Nevertheless, due to the
anonymity of miners, a single pool might be tempted to
attack, leading the other pools to attack as well. The implica-
tions might be devastating for open pools: If their revenues
are reduced, miners will prefer to form closed pools that
cannot be attacked in this manner. Though this may be
conceived as bad news for public mining pools, on the whole
it may be good news to the Bitcoin system, which prefers
small pools. We examine the practicality of the attack in
Section VIII and discuss implications and model extensions
in Section IX.
In summary, our contributions are the following:
1) Deﬁnition of the pool game where pools in a proof-of-
work secured system attack one another with a pool
block withholding attack.
2) In the general case, no-pool-attacks is not an equilib-
rium.
3) With two minority pools participating, the only Nash
Equilibrium is when the pools attack one another, and
both earn less than if none had attacked.
Miners therefore face the miner’s dilemma, an instance
of the iterative prisoner’s dilemma, repeatedly choos-
ing between attack and no-attack.
4) With multiple pools of equal size there is a symmetric
Nash equilibrium, where all pools earn less than if
none had attacked.
5) For Bitcoin, inefﬁcient equilibria for open pools may
serve the system by reducing their attraction and
pushing miners towards smaller closed pools.
The classical block withholding attack is old as pools
themselves, but its use by pools has not been suggested
until recently. We overview related attacks and prior work in
Section X, and conclude with ﬁnal remarks in Section XI.
a distributed, decentralized digital
II. PRELIMINARIES — BITCOIN AND POOLED MINING
cur-
Bitcoin is
rency [12], [13], [1], [14]. Clients use the system by issuing
transactions, and the system’s only task is to serialize
transactions in a single ledger and reject transactions that
cannot be serialized due to conﬂicts with previous transac-
tions. Bitcoin transactions are protected with cryptographic
techniques that ensure that only the rightful owner of a
Bitcoin can transfer it. The transaction ledger is stored by a
network of miners in a data structure caller the blockchain.
A. Revenue for Proof Of Work
The blockchain records the transactions in units of blocks.
The ﬁrst block, dubbed the genesis block, is deﬁned as part
of the protocol. A valid block contains the hash of the
previous block, the hash of the transactions in the current
block, and a Bitcoin address which is to be credited with a
reward for generating the block.
Any miner may add a valid block to the chain by
(probabilistically) proving that it has spent a certain amount
of work and publishing the block with the proof over an
overlay network to all other miners. When a miner creates
a block, it is compensated for its efforts with Bitcoins. This
compensation includes a per-transaction fee paid by the users
9090
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:05:40 UTC from IEEE Xplore.  Restrictions apply. 
whose transactions are included, and an amount of minted
Bitcoins that are thus introduced into the system.
The work which a miner is required to do is to repeatedly
calculate a a hash function — speciﬁcally the SHA-256 of
the SHA-256 of a block header. To indicate that he has
performed this work, the miner provides a probabilistic proof
as follows. The generated block has a nonce ﬁeld, which
can contain any value. The miner places different values
in this ﬁeld and calculates the hash for each value. If the
result of the hash is smaller than a target value, the nonce
is considered a solution, and the block is valid.
The number of attempts to ﬁnd a single hash is therefore
random with a geometric distribution, as each attempt is
a Bernoulli trial with a success probability determined by
the target value. At the existing huge hashing rates and
small target values, the time to ﬁnd a single hash can be
approximated by an exponential distribution. The average
time for a miner to ﬁnd a solution is therefore proportional
to its hashing rate or mining power.
To maintain a constant rate of Bitcoin generation, and
as part of its defense against denial of service and other
attacks, the system normalizes the rate of block generation.
To achieve this, the protocol deterministically deﬁnes the
target value for each block according to the time required to
generate recent blocks. The target, or difﬁculty, is updated
once every 2016 blocks such that the average time for each
block to be found is 10 minutes.
Note that the exponential distribution is memoryless. If
all miners mine for block number b, once the block is found
at time t, all miners switch to mine for the subsequent block
b + 1 at t without changing their probability distribution of
ﬁnding a block after t. Therefore, the probability that a miner
i with mining power mi ﬁnds the next block is its ratio out
of the total mining power m in the system.
Forks
Block propagation in the overlay network takes seconds,
therefore it is possible for two distant miners to generate
competing blocks, both of which name the same block as
their predecessor. Such bifurcations, or forks, are rare since
the average mining interval is 10 minutes, and they occur
on average once every 60 blocks [15]. The system has a
mechanism to solve forks when they do occur, causing one
of the blocks to be discarded.
We ignore bifurcations for the sake of simplicity. Since the
choice of the discarded block on bifurcation is random, one
may incorporate this event into the probability of ﬁnding a
block, and consider instead the probability of ﬁnding a block
that is not discarded.
B. Pools
As the value of Bitcoin rose, Bitcoin mining has become
a rapidly advancing industry. Technological advancements
lead to ever more efﬁcient hashing ASICs [16], and mining
Miner
Miner
Miner
Miner
Miner
Miner
Miner
Miner
Pool 1
Pool 2
Pool 3
Bitcoin Network
Figure 1. A system with 8 miners and 3 honest pools. Pool 1 has 3
registered miners, pools 2 and 3 have 2 registered miners each, and one
miner mines solo.
datacenters are built around the world [17]. Mining is only
proﬁtable using dedicated hardware in cutting edge mining
rigs, otherwise the energy costs exceed the expected revenue.
Although expected revenue from mining is proportional
to the power of the mining rigs used, a single home miner
using a small rig is unlikely to mine a block for years [18].
Consequently, miners often organize themselves into mining
pools. Logically, a pool is a group of miners that share
their revenues when one of them successfully mines a block.
For each block found, the revenue is distributed among the
pool members in proportion to their mining power1. The
expected revenue of a pool member is therefore the same
as its revenue had it mined solo. However, due to the large
power of the pool, it ﬁnds blocks at a much higher rate, and
so the frequency of revenue collection is higher, allowing
for a stable daily or weekly income.
In practice, most pools are controlled by a centralized
pool manager.2 Miners register with the pool manager and
mine on its behalf: The pool manager generates tasks and
the miners search for solutions based on these tasks that can
serve as proof of work. Once they ﬁnd a solution, they send it
to the pool manager. The pool manager behaves as a single
miner in the Bitcoin system. Once it obtains a legitimate
block from one of its miners, it publishes it. The block
transfers the revenue to the control of the pool manager.
The pool manager then distributes the revenue among the
miners according to their mining power. The architecture is
illustrated in Figure 1
In order to estimate the mining power of a miner, the pool
manager sets a partial target for each member, much larger
(i.e., easier) than the target of the Bitcoin system. Each miner
is required to send the pool manager blocks that are correct
according to the partial target. The partial target is chosen to
be large, such that partial solutions arrive frequently enough
for the manager to accurately estimate the power of the
miner, but small (hard) to reduce management overhead.
1This is a simpliﬁcation that is sufﬁcient for our analysis. The intricacies
of reward systems are explained in [10].
2A notable exception is P2Pool [19], which we discuss in Section IX.
9191
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:05:40 UTC from IEEE Xplore.  Restrictions apply. 
Pools often charge a small percentage of the revenue as fee.
We discuss in Section IX the implications of such fees to