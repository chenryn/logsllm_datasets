its public key, then she can trivially test whether an address is a
true positive of the ﬁlter by checking whether both the address and
its public key are inserted within the ﬁlter. If not, then it is highly
likely that the address is a false positive of the ﬁlter. We believe that
the inclusion of both the address and its public key in the Bloom ﬁl-
ter is a severe ﬂaw in the current SPV client implementations—and
can be easily countered; we thus do not exploit this ﬂaw in our anal-
ysis. In fact, more than 99% of all Bitcoin transactions consist of
payments to Bitcoin addresses (or the public key hash); moreover,
only 4587 out of 33 million total addresses in the system received
transactions destined for both their public keys and their public key
hashes2. This means that for the vast majority of Bitcoin clients,
there is no need to include both the public keys and their hashes
(i.e., the Bitcoin addresses) in the Bloom ﬁlters; inserting one or
the other would sufﬁce (in more than 99% of the cases)3.
Privacy Metric.
N−k
N +S−k = N
N +S · N−1
follows: Ph(j) = (cid:81)j−1
We quantify the privacy offered by a Bloom ﬁlter using the prob-
ability, Ph(j), that the adversary correctly guesses any j true posi-
tives of a Bloom ﬁlter among all positives that match the ﬁlter and
which are not included in the knowledge of the adversary. More
speciﬁcally, we measure Ph(j) achieved by a Bloom ﬁlter Bi, as
N +S−1 . . . . Here, N
refers to the number of Bitcoin addresses inserted into Bi, and S
denotes the cardinality of the set {Fi−K}; S therefore corresponds
2We obtained these numbers by parsing the Bitcoin block chain till
block # 296000.
3Note that only inserting the addresses in the Bloom ﬁlter would
sufﬁce since regular nodes can easily hash the public keys and
check whether they match the Bloom ﬁlter. However, this clearly
incurs computational overhead on regular Bitcoin nodes.
k=0
Figure 2: Pf , and Pt computed analytically with respect to the number of addresses N. Here, we assume that the SPV client did not restart
since initialization.
B
Bi
Bi
Fi
N
S
M
m
n
k
Pf
Pt
Ph(j)
X
all existing Bitcoin addresses
Bloom ﬁlter i
Positives of the Bloom ﬁlter
False positives of the Bloom ﬁlter
Number of addresses inserted in the Bloom ﬁlter
False positives, the adversary has no knowledge about
Maximum number of elements the Bloom ﬁlter ﬁts
Number of elements inserted in the Bloom ﬁlter
Size of the Bloom ﬁlter (in bits)
Number of hash functions of the Bloom ﬁlter
Actual false positive rate
Target false positive rate
Probability of correctly guessing any j true positives
Number of bits in the Bloom ﬁlter set to one
Table 1: Notations used throughout the paper.
k=0
N−k
N +S−k = N !S!
Ph(N ) = (cid:81)N−1
to all false positives that match Bi, but for which the adversary
does not have any knowledge about. Therefore, the probability that
the adversary correctly guesses all the addresses of Bi is given by:
(N +S)! . Clearly, the higher is Ph(.),
the smaller is the privacy of the SPV node. Note that if the adver-
sary is able to identify an SPV client (e.g., by some side channel
information), then simply identifying any address pertaining to that
client would be a considerable violation of its privacy. Otherwise,
if the adversary can link a number of addresses to the same anony-
mous client, then the information offered by the clustering of these
addresses offers the adversary considerable information about the
proﬁle of the client, such as its purchasing habits, etc.
Note that our privacy metric only assesses the probability of
guessing addresses inserted within the Bloom ﬁlter. As mentioned
earlier, these are the addresses that the SPV client is interested in
receiving information about. Ph(.), however, does not necessarily
capture the probability of guessing addresses which belong to the
user of the SPV client. Indeed, addresses inserted within the ﬁl-
ter do not necessarily have to belong to the user; for instance, the
privacy of users—who only embed in their Bloom ﬁlters L ≤ N
N Ph(.). Table 1 sum-
addresses—can be quantiﬁed by computing L
marizes the notation used throughout the paper.
4.
INFORMATION LEAKAGE DUE TO A
SINGLE BLOOM FILTER
In this section, we start by analyzing the privacy provisions of
existing SPV clients when the adversary acquires a single Bloom
ﬁlter pertaining to an SPV client. In Section 5, we address the case
when multiple Bloom ﬁlters are acquired by the adversary.
4.1 Leakage under a Single Bloom Filter
In existing SPV clients (which use the Bitcoinj library), a node
initializes its Bloom ﬁlter Bi with a random nonce r, and speciﬁes
its target false positive rate Pt which can be achieved when a num-
ber of elements M have been inserted in the ﬁlter. M is equal to
M = m + 100 = 2N + 100, where N is the number of Bitcoin
addresses inserted in Bi.4 Note that a Bitcoin address is inserted
into the Bloom ﬁlter by adding both the corresponding public key
and the public key hash to the ﬁlter; therefore m = 2N.
By default, the target false positive rate of the Bloom ﬁlter Pt is
set to 0.05%5. The size of the ﬁlter n and the number of hashes k
are computed given Equations 1 and 2, respectively.
Note that at initialization time, the SPV client is only equipped
with j = 1 Bitcoin address. The corresponding Bloom ﬁlter will
then be initially created to ﬁt M = 102 elements, and will only
contain m = 2 elements. However, if the SPV client restarts (e.g.,
mobile phone reboots, mobile application is restarted), then the
Bloom ﬁlter will be re-computed with M = 2j + 100 (the SPV
client stores the Bloom ﬁlter in volatile memory). In either cases,
when the user acquires 50 or more additional addresses such that
m > M, then the SPV client will resize the Bloom ﬁlter by re-
computing M = 2N + 100, and will send the updated Bloom ﬁlter
to the full Bitcoin nodes that it is connected to. This process re-
iterates whenever the number of addresses inserted in Bi increase
such that m > M.
In Figure 2, we analytically compute Pt with respect to the num-
ber of addresses N that an SPV client is equipped with. Here, we
assume that the adversary has access to only one Bloom ﬁlter per-
taining to the SPV client, and that the adversary has no prior knowl-
edge about addresses in Bitcoin (i.e., K = φ). Note that given n
and k, the number of elements contained in a Bloom ﬁlter can be
estimated by the adversary as follows [29]:
ln(1 − X
n )
m ≈ −n
k
(4)
Here, X corresponds to the number of bits of the Bloom ﬁlter set
to one. Given n and Pt, M can also be computed by the adversary
from Equation 1.
Since K = φ, S + N = |Bi| (i.e., the number of all existing
Bitcoin addresses which match Bi)6. Note that, in April 2014, the
Bitcoin block chain comprised nearly |B| =33 million addresses.
This means that an adversary can simply try all possible addresses
4The additional number ‘100’ is added to m by the Bitcoin devel-
opers in order to avoid the recomputation of a new ﬁlter in the case
where a user inserts up to 50 additional Bitcoin addresses.
5The Bitcoin developers claim that a target false positive rate of
0.1% should provide “very good privacy” [9].
6|X| denotes the cardinality of set X.
00.010.020.030.040.050.06Number of addresses in walletRate in %  PfPtFigure 3: Experimental setup. We constructed around 18,060 dif-
ferent Bloom ﬁlters of various sizes and pertaining to 10 different
wallets. For each Bloom ﬁlter, we compute the matching set of
Bitcoin addresses, and we compare this set with the actual Bitcoin
addresses inserted in each Bloom ﬁlter in order to compute Ph(.),
and S.
in the Bitcoin system in order to compute Bi. In doing so, it is
straightforward to see that:
j−1(cid:89)
k=0
Ph(j) =
≈ j−1(cid:89)
k=0
N − k
N + S − k
N − k
N + |B − N|Pf (2N ) − k
,
(5)
where N (cid:28) |B|, and m = 2N is the number of elements contained
in the Bloom ﬁlter seen by the adversary. In analyzing our ﬁndings,
we distinguish two cases:
1) 2N/M ≤ 0.4 and N  0.4.
Conforming with our previous analysis, when 2N/M > 0.4,
Pf (m = 2N ) is close to Pt. Recall that in this case, the probability
of correctly guessing one address reaches a local minimum when
2 (cf. Figure 2). Our results also show that the global
N = M
minimum achieved by Ph(1) is 0.002961 and is reached when the
user has N = 51 addresses.
In addition, we analytically compute Ph(j) when the SPV client
has 5, 10, 15 and 20 addresses. Our results in Figure 4 show that
guessing all addresses given one ﬁlter which embeds less than 15
addresses can be achieved with almost 0.80 probability. This prob-
ability decreases as the number of addresses embedded within the
ﬁlter increases beyond 15.
Figure 4: Ph(j) with respect to the number of addresses inserted
in the Bloom ﬁlter. Given an SPV client with 5 addresses, all ad-
dresses can be guessed; when the SPV client has 20 addresses, 20%
of the addresses can be guessed with almost 0.90 probability. Here,
we assume that the user restarts its SPV client.
4.2 Experimental Evaluation
We now proceed to validate our analytical results empirically, by
means of implementation. For that purpose, we parsed the block
chain from the genesis block mined in 2009 until the beginning of
April 2014 using the parser in [7] and collected nearly 33 million
distinct addresses. In our evaluation, we rely on Bitcoin Wallet [8],
which builds upon the standard Bitcoinj library (0.12-SNAPSHOT
of end of April 2014).
As mentioned earlier, Bitcoinj initializes by constructing one ad-
dress by default. The user can subsequently add addresses to his
wallet. Our implementation setup is depicted in Figure 3. Here, we
construct 10 different Bitcoin wallets, and we gradually increase
the number of Bitcoin addresses which populate each wallet from
1 address to 9,000 Bitcoin addresses. Whenever new addresses are
added to the wallets, we compute the modiﬁed Bloom ﬁlters; we
increase the number of addresses by a step of 2 addresses to reach
19 addresses, and then by a step of 5 addresses to reach 8,999 ad-
dresses. As such, our experiments resulted in the evaluation of a
total of 18,060 different Bloom ﬁlters which contain various num-
ber of elements, and pertain to 10 different SPV clients. For each
Bloom ﬁlter, we compute the matching set of Bitcoin addresses, we
compare this set with the actual addresses inserted in each Bloom
ﬁlter in order to compute S, and Ph(.). Since we assume here that
the adversary has no a priori knowledge about Bitcoin addresses,
S corresponds to the number of existing Bitcoin addresses (among
the 33,000,000 total Bitcoin addresses) that match the Bloom ﬁlter
of the SPV client, and that are not the addresses of the SPV client
(i.e., S corresponds to the false positives generated by the Bloom
ﬁlter).
Each data point in our experiments corresponds to the average
of 10 independent measurements obtained from each of the 10
wallets. Our results (cf. Table 2) conﬁrm our analysis in Sec-
tion 4.1. More speciﬁcally, our results show that given few ad-
dresses (small N), Ph(.) is large; for example, when N = 19, Bi
results in an average of 6.1 false positives among all 33,000,000 ad-
dresses which corresponds to Ph(1) = 0.76 and Ph(N/2) = 0.0433.
As N increases to 49 addresses, Ph(1) and Ph(N/2) decrease to
0.004 and 0, respectively. Indeed, when N = 49, N/M ≈ 0.5,
since initially Bi is computed with M = 102. Here, Bi incurs
Pf (98) ≈ Pt false positive rates. When N increases beyond 51,
then m > M, and the Bloom ﬁlter is resized to ﬁt M = 2N + 100
SPV clientadds addressesto its walletFull Bitcoin clientBloom ﬁlterBloom ﬁlterTotal positives+BlockchainFor each address in the Block-chain we check if it is includedin the Bloom ﬁlterGround truthMeasure Sand Ph00.20.40.60.8100.20.40.60.81Fraction of correctly guessed addressesProbability to guess the addresses correctly  5 addresses in SPV client10 addresses in SPV client15 addresses in SPV client20 addresses in SPV clientelements. In this case, when 2N/M is small, Ph(.) is large. For
instance, when N = 54, Ph(1) is 0.36, which corresponds to a to-
tal of 96 false positives seen by the adversary among all addresses
in B. This process re-iterates whenever Bi is resized, however as
N increases, we observe that the ﬂuctuations in Ph(.) decrease as
Pf (2N ) converges towards Pt.
Our results therefore show that the information leakage due to
the reliance on Bloom ﬁlters in SPV clients is considerable when
the user has a modest number of addresses. In this case, our ﬁnd-
ings show that an adversary who captures a single Bloom ﬁlter can
learn with high probability the Bitcoin addresses inserted within
the ﬁlter.
In Figure 5, we also measure Ph(1) and the number of false posi-
tives when the SPV client restarts and has to re-compute its Bloom
ﬁlter Bi. As mentioned earlier, our results show that the restarting
of an SPV client causes Ph(1) to signiﬁcantly increase when com-
pared to the case where the client is not restarted. As mentioned
earlier, at any restart and given N addresses, the SPV client re-
computes Bi with a size of M = 2N + 100. Therefore, for modest
values of N (e.g., N  1
Bloom ﬁlters pertaining to different users. For example, the adver-
sary might be connected to SPV clients for a long period of time,
and receive their updated Bloom ﬁlter. Alternatively, the adversary
can acquire additional Bloom ﬁlters by compromising/colluding
with other full Bitcoin nodes. Note that in our analysis, we do
not assume that the adversary knows the correct association of the
Bloom ﬁlters to the respective users.
Figure 5: Ph(.) and S computed experimentally for the ﬁrst 200 in-