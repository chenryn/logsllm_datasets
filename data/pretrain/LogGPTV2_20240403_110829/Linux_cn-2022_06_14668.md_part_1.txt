---
author: Chris Hermansen
category: 软件开发
comments_data:
- date: '2022-06-03 18:57:46'
  message: 看没人写过通过猜数字学习Haskell我想写一个来着，写完代码我发现这个把这个文章的字数翻倍都讲不明白Haskell的猜数字。
  postip: 61.158.78.130
  username: PTLin [Firefox 100.0|GNU/Linux]
- date: '2022-06-04 10:38:09'
  message: 好像还真有人写过 Haskel 的，我去看看
  postip: 36.101.140.152
  username: linux [Chrome 102.0|Mac 10.15]
- date: '2022-06-04 10:43:46'
  message: 可以试着写出这篇文章来，我们很乐意发表它~
  postip: 36.101.140.152
  username: linux [Chrome 102.0|Mac 10.15]
count:
  commentnum: 3
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2144
date: '2022-06-03 13:06:00'
editorchoice: false
excerpt: 编程语言往往具有许多共同特征。学习一门新语言的好方法是去写一个熟悉的程序。在本文中，我将会使用 Awk 编写一个“猜数字”程序来展示熟悉的概念。
fromurl: https://opensource.com/article/21/1/learn-awk
id: 14668
islctt: true
largepic: /data/attachment/album/202206/03/130545jthh1vtoadahwahd.jpg
permalink: /article-14668-1.html
pic: /data/attachment/album/202206/03/130545jthh1vtoadahwahd.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 编程语言往往具有许多共同特征。学习一门新语言的好方法是去写一个熟悉的程序。在本文中，我将会使用 Awk 编写一个“猜数字”程序来展示熟悉的概念。
tags:
- 猜数字
- Awk
thumb: false
title: 通过编写“猜数字”游戏来学习 Awk
titlepic: true
translator: FYJNEVERFOLLOWS
updated: '2022-06-03 13:06:00'
---
> 
> 编程语言往往具有许多共同特征。学习一门新语言的好方法是去写一个熟悉的程序。在本文中，我将会使用 Awk 编写一个“猜数字”程序来展示熟悉的概念。
> 
> 
> 
![](/data/attachment/album/202206/03/130545jthh1vtoadahwahd.jpg)
当你学习一门新的编程语言时，最好把重点放在大多数编程语言都有的共同点上:
* 变量 —— 存储信息的地方
* 表达式 —— 计算的方法
* 语句 —— 在程序中表示状态变化的方法
这些概念是大多是编程语言的基础。
一旦你理解了这些概念，你就可以开始把其他的弄清楚。例如，大多数语言都有由其设计所支持的“处理方式”，这些方式在不同语言之间可能有很大的不同。这些方法包括模块化（将相关功能分组在一起）、声明式与命令式、面向对象、低级与高级语法特性等等。许多程序员比较熟悉的是编程“仪式”，即，在处理问题之前设置场景所需花费的工作。据说 Java 编程语言有一个源于其设计的重要仪式要求，就是所有代码都在一个类中定义。
但从根本上讲，编程语言通常有相似之处。一旦你掌握了一种编程语言，就可以从学习另一种语言的基本知识开始，品味这种新语言的不同之处。
一个好方法是创建一组基本的测试程序。有了这些，就可以从这些相似之处开始学习。
你可以选择创建的一个测试程序是“猜数字”程序。电脑从 1 到 100 之间选择一个数字，让你猜这个数字。程序一直循环，直到你猜对为止。
“猜数字”程序练习了编程语言中的几个概念:
* 变量
* 输入
* 输出
* 条件判断
* 循环
这是学习一门新的编程语言的一个很好的实践实验。
**注**：本文改编自 Moshe Zadka 在 [Julia](https://opensource.com/article/20/12/julia) 中使用这种方法和 Jim Hall在 [Bash](https://opensource.com/article/20/12/learn-bash) 中使用这种方法的文章。
### 在 awk 程序中猜数
让我们编写一个实现“猜数字”游戏的 Awk 程序。
Awk 是动态类型的，这是一种面向数据转换的脚本语言，并且对交互使用有着令人惊讶的良好支持。Awk 出现于 20 世纪 70 年代，最初是 Unix 操作系统的一部分。如果你不了解 Awk，但是喜欢电子表格，这就是一个你可以 [去学习 Awk](https://opensource.com/article/20/9/awk-ebook) 的信号！
您可以通过编写一个“猜数字”游戏版本来开始对 Awk 的探索。
以下是我的实现（带有行号，以便我们可以查看一些特定功能）：
```
     1    BEGIN {
     2        srand(42)
     3        randomNumber = int(rand() * 100) + 1
     4        print "random number is",randomNumber
     5        printf "guess a number between 1 and 100\n"
     6    }
     7    {
     8        guess = int($0)
     9        if (guess &lt; randomNumber) {
    10            printf "too low, try again:"
    11        } else if (guess &gt; randomNumber) {
    12            printf "too high, try again:"
    13        } else {
    14            printf "that's right\n"
    15            exit
    16        }
    17    }
```
我们可以立即看到 Awk 控制结构与 C 或 Java 的相似之处，但与 Python 不同。 在像 `if-then-else`、`while` 这样的语句中，`then`、`else` 和 `while` 部分接受一个语句或一组被 `{` 和 `}` 包围的语句。然而，Awk 有一个很大的区别需要从一开始就了解：
根据设计，Awk 是围绕数据管道构建的。
这是什么意思呢？大多数 Awk 程序都是一些代码片段，它们接收一行输入，对数据做一些处理，然后将其写入输出。认识到这种转换管道的需要，Awk 默认情况下提供了所有的转换管道。让我们通过关于上面程序的一个基本问题来探索：“从控制台读取数据”的结构在哪里？