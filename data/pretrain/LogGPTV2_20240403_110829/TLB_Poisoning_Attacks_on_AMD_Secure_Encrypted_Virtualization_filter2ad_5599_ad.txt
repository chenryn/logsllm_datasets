tacker’s address space. Therefore, the function will directly return
with an 0 in EAX and thus allow arbitrary user to login.
5.2 Evaluation
The experiment settings are list below. The CPU we used is AMD
EPYC 7251 with 8 physical cores. All the software needed to launch
a SEV-ES VM is download from AMD SEV repository [4]. The host
kernel version is sev-es-v3 . The QEMU version used was sev-es-v12
and the OVMF version was sev-es-v27 . The victim VM was a SEV-
ES-enabled VMs with 4 vCPUs, 4 GB DRAM and 30 GB disk storage.
The OpenSSH version is OpenSSH_7.6p1 and the OpenSSL version
is 1.0.2n. We repeated the attack 20 times and evaluated the attacks
in terms of successful rate: All the 20 attacks could successfully
bypass the password authentication and logged in with incorrect
passwords.
6 TLB POISONING WITHOUT ASSISTING
PROCESSES
In this section, we show that TLB Poisoning attacks can work
even without the help of an attacker process in the victim VM. The
intuition is that when processes share similar virtual address spaces,
TLB misuse may happen between these processes without direct
control of either of them.
Specifically, we target at fork(), which is a system call used
to create new processes. fork() is widely used in server-side ap-
plications, e.g., OpenSSH, sftp, Nginx, and Apache web server, to
serve requests from different clients. The forked child processes
has a high probability to share a very similar virtual memory area
with majority of their virtual address space layout overlapped. Even
the VM’s administrator chooses to enable ASLR, the same VMA
randomization will be applied to the parent process and all child
processes, which gives the adversary the chance to conduct TLB
poisoning without concerning about the unpredictable VMA. This
similarity of address spaces of forked processes has been exploited
in memory hijacking attacks [19].
Attack scenarios. Similar to the previous case study, we choose
to showcase our TLB Poisoning attack against an SSH server. But
this time, we target Dropbear SSH [15], which is a lightweight
open-source SSH server written in C and released frequently since
2003. We did not choose the more popular OpenSSH because it
alters its memory address space in all its children processes that
serve incoming connections (by calling exec()). However, this
mechanism is only observed in OpenSSH and OpenBSD. Other
network applications like Dropbear SSH and Nginx will not change
their virtual memory layout for different connections.
We assume the targeted Dropbear SSH server application is free
of memory safety vulnerabilities and timing channel vulnerabilities.
We assume the binary of the Dropbear Server application is known
by the adversary. We assume the username of a legitimate user
is also known by the adversary; this is a practical assumption as
usernames are not considered secrets. To simplify the attack, we also
assume the two processes are scheduled on two different vCPUs,
which makes the attack easier to perform; otherwise the VMCB-
switching approach is required.
615ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Mengyuan Li, Yinqian Zhang, Huibo Wang, Kang Li, and Yueqiang Cheng
6.1 Poison TLB Entries between Connections
We consider two SSH connections: One is the connection from
the adversary, which is served by the process Patk that is forked
from the DropSSH server daemon; the other is a connection from
a legitimate user, which is served by the process Pvic. The attack
goal is to allow the attacker process to temporarily use the victim
process’s TLB entries and circumvent the password authentication.
Regular login procedures. After the login password packet is
received by the victim VM, Pvic calls svr_auth_password() to
validate the password. As shown in Listing 2, the password en-
cryption function in the POSIX C library crypt() is called to gen-
erate a hash of the user-provided password. The result is stored
in a buffer called testcrypt. The buffer storing the plaintext of
the password is freed immediately. After that, the hash of the
user-provided password is compared with the stored value in the
system file using constant_time_strcmp(), which returns 0 if
these two strings are identical. If the user-provided password is
correct, Pvic will take the correct-password branch, which calls
send_msg_userauth_success(). Otherwise, the incorrect-password
branch is taken.
1 void svr_auth_password ( int valid_user ) {
2
3
4
5
6
7
8
char * passwdcrypt = NULL ;
// store the crypt from / etc / passwd
char * testcrypt = NULL ;
// store the crypt generated from the password sent
...
// ** Execution Point 1 ( NPF )
if ( constant_time_strcmp ( testcrypt , passwdcrypt ) == 0)
{
// successful authentication
// ** Execution Point 2 ( NPF )
send_msg_userauth_success () ;
} ...
9
10
11
12
13 }
Listing 2: Code snippet of svr_auth_password().
Attack overview. We show that by breaking the TLB isolation, the
attacker process Patk can bypass the password authentication even
with an incorrect password. Specifically, the virtual addresses of the
testcrypt buffer are usually the same for both Patk and Pvic (this
fact will be empirically evaluated later). We use 
to denote the TLB entry owned by Patk, which caches the mapping
from the virtual address of the testcrypt buffer to the system
physical address that stores the hashed password used in Pvic.
The goal here is to make sure the TLB entry 
is not flushed when Patk executes constant_time_strcmp(). In
this way, Patk can re-use the testcrypt of Pvic to circumvent
password authentication.
Key challenges. The key challenge in this attack is to ensure only
necessary TLB entries are preserved. Otherwise, later TLB entries
may flush those necessary TLB entries. To address the challenge,
it is important to perform TLB poisoning at the proper execution
point. As shown in Figure 3, the adversary needs to locate the
execution points right before and after the password authentication
(e.g., constant_time_strcmp()), which can be done using the NPF
controlled channels.
The attack overview is shown in Figure 3. Let the guest physical
address of the instruction page where the svr_auth_password()
Figure 3: Attack steps to bypass password authentication.
and the constant_time_strcmp() are located be gPA1 and gPA2,
respectively. The adversary first traps the attacker process in an
empty loop when handling the NPF of gPA2 (execution point 1),
which means Patk is about to call constant_time_strcmp(). Then
the adversary will not interrupt Pvic until it also reaches the NPF
of gPA2 (execution point 1). When handling this NPF, the adver-
sary triggers a complete TLB flush. Pvic then continues execution
until it finishes the password authentication and tries to return to
svr_auth_password(). A NPF of gPA1 (execution point 2) will be
observed and the adversary traps Pvic. Meanwhile, the adversary re-
leases the attacker process and skips the TLB flush. All TLB entries
used by Pvic during the execution of constant_time_strcmp()
are thus preserved in the TLB, including TLB (gVApwd, sPAvic).
After the attacker process completes constant_time_strcmp(),
passes the password check, and reaches execution point 2, the ad-
versary triggers a complete TLB flush (to avoid unnecessary TLB
misuses) and releases Pvic. Both Patk and Pvic continue execu-
tion as normal afterwards and no traces will be left in the kernel
message.
6.2 An End-to-end Attack
The adversary follows these steps for an end-to-end attack:
➀ Monitor network traffic. Even the adversary cannot directly
learn the content of encrypted network packets, the adversary can
inspect incoming and outgoing network packets through the un-
encrypted metadata (e.g., destination address, source address or
the port number). The adversary continuously monitors network
traffic to identify the SSH handshake procedure. Once the adver-
sary identifies a client_hello packet sent from a legitimate user, the
adversary traps that packet and sends a client_hello packet from a
remote machine controlled by himself. Once this client_hello packet
reaches the victim VM, the adversary resumes the processing of
the client_hello packet from the legitimate user. Thus, the victim
VM shall receive two connection requests, one from the adversary
and another from a legitimate user.
➁ Monitor fork() and gCR3 changes. Next, the adversary locates
the gCR3 of the forked child processes. During the victim VM’s
booting period, the adversary continuously monitors gCR3 changes
by setting the CR3_WRITE_TRAP intercept bit in the VMCB. Af-
terwards, gCR3 changes will cause an automatic VMEXIT with the
ATK LoginPkt with PWD’VIC LoginPkt with PWDTLBMisusesvr_auth_passwordconstant_time_strcmpPWDauthWait❶NPF❶NPFContinueOmitTLBFLUSHTLBFillTLBMisuse❷NPF❷NPFFlushTLBsvr_auth_passwordconstant_time_strcmpPWDauth❶NPFFlushTLBWait❷NPFOmitTLBFLUSHFlushTLBContinue616TLB Poisoning Attacks on AMD Secure Encrypted Virtualization
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
new gCR3 value stored in VMEXIT EXITINFO. After receiving the
two SSH connection packets, the Dropbear Daemon will fork twice
to generate the child process for the adversary’s connection and the
legitimate user’s connection. We call the forked child process for
the adversary’s connection Patk, whose gCR3 is gCR3atk. We call
the forked child process for the legitimate user’s connection Pvic,
whose gCR3 is gCR3vic. The adversary can identify the gCR3atk
and gCR3vic by correlating them with the received client_hello
packets.
➂ Monitor NPFs to locate the target gPAs. The adversary may
try to log in by sending an arbitrary password. The legitimate
user logs in by sending a correct password. The adversary trig-
gers NPFs by clearing the Present bits in the NPT, when the en-
crypted SSH packets that contain the passwords are observed. A
sequence of NPF for Patk and a sequence of NPFs for Pvic will
be observed. The adversary also collects additional information
(e.g., NPF EXITINFO2) along with the NPF VMEXITs, which re-
veals valuable information. For instance, the adversary can learn
that the NPF is caused by write/read access, user/kernel access,
code read, or page table walks. The adversary also periodically
(e.g., every 50 NPFs) clears all Present bits to fine tune the NPF
sequence. Since the Dropbear’s binary is known by the adversary,
the adversary can learn the NPF patterns offline to locate the gPA
of svr_auth_password() (denoted gPA1) and the gPA of the first
instruction in constant_time_strcmp() (denoted gPA2). The fea-
tures used in pattern recognition are the sequence of NPFs and their
error code. During the attack, the adversary can use the recognized
pattern to locate gPA1 and gPA2.
➃ Skip TLB flush. The adversary continuously monitors Patk
and Pvic. When the adversary observes the NPF of gPA2 in Patk,
he traps Patk in an empty loop and clears the Present bit of all
pages. When the adversary observes the NPF of gPA2 in Pvic, he
clears the Present bit for all memory pages and performs a complete
TLB flush. The adversary traps Pvic when he observes the NPF of
gPA1. Patk is then resumed and the adversary skips the TLB flush.
Patk will use the preserved TLB entries from Pvic to to read the
password hash from the testcrypto in the address space of Pvic,
which leads to a successful login with an incorrect password. To
void further TLB pollution, the adversary then forces a complete
TLB flush and resumes the victim process. Both Patk and Pvic will
continue their execution normally afterwards.
6.3 Evaluation.
All experiments were performed on a workstation whose CPU is
AMD EPYC 7251 Processor (8 physical core with SMT enabled). The
VMs (including victim VM and the training VMs) used in this section
were SEV-ES-enabled VMs with four vCPUs, 4 GB DRAM, and 30 GB
disk storage. The software of the OS, QEMU, and the UEFI image are
the same in Section 5.2. ASLR is enabled in the SEV-ES-enabled VMs
by setting the parameter in /proc/sys/kernel/randomize_va_space
to 2. The source code of Dropbear is downloaded from Github [15]1.
The Dropbear SSH Server is configured as the default setting. The
Dropbear SSH Server is bond to Port 22. One minor non-default
setting to assist the attack is that we forced Patk and Pvic to execute
1commit:846d38fe4319c517683ac3df1796b3bc0180be14
(a) 10 connections/s.
(b) 1 connection/s.
Figure 4: Variation of the virtual address of testcrypto.
on different vCPUs of the victim VM. Note, this setting improves the
success rate of the attack but is not necessary in practical attacks.
Buffer address variation. We first evaluated the variation of the
virtual address of testcrypto under different connection ratios. In
the training VM, the Dropbear server is modified to print the virtual
address of testcrypto to the console after each connection. Then
we used a simple script to initiate new SSH connections, send the
correct password to login, obtain the virtual address of testcrypto,
and end the current SSH connection. In total, 120 connections were
collected. For the first 60 connections, the time interval between
two contiguous connections was set to 0.1 second. For the second
60 connections, the time interval was set to 1 second. As shown
in Figure 4a, when the time interval is set to 0.1 second, although
3 different virtual addresses of the testcrypto are observed, the
virtual address of testcrypto remains the same in 57 out of the
total 60 connections. When the time interval is set to 1 second,
the virtual address of testcrypto remains the same in 55 out of
the total 60 connections. The experiment results show that the
virtual addresses for testcrypto are relatively stable for different