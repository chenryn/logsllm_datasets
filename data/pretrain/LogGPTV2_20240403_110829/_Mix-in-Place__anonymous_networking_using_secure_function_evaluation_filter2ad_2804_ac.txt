(cid:3) (cid:4) (cid:3)
(cid:3) (cid:4) (cid:5) (cid:6) (cid:7) (cid:8) (cid:9) (cid:10) (cid:11)
(cid:2) is shown to the side to show the
Figure 2: Improved architecture for MIPNets: C0 and OP exchange messages (encryption removed for example). M
output as seen by OP - note the only change from M occurs in slot 0. When the contents of the mailbox are reencrypted via the SFE exchange, it is not
possible for OP to determine which slot has been updated by C0.
Improved Mechanisms
communications in currently deployed systems can be breached us-
ing a number of more active techniques [79, 76, 38, 49, 74, 48, 64,
57, 75, 67, 43, 3]. Accordingly, we must make such a system more
robust against the real adversaries it is likely to face. We specif-
ically seek to make collusion to link or leak communications and
denial of service attacks more difﬁcult for adversaries.
4.4.1
A compromised client and malicious OP could collaborate to de-
termine the pairs of communicating legitimate clients in the simple
MIPNet architecture. The malicious client CM could give OP ac-
cess to the keystream k shared between all participating nodes. The
OP could then simply decrypt M after each exchange and deter-
mine the destination, content and intent (i.e., whether or not the
read-bit was set) of the message sent by that client. We address
this concern through the use of shared keys between adjacent client
nodes. Instead of encrypting M using a k shared between all par-
ticipants, each client Ci will encrypt the contents of M using the
pairwise keystream kCi,Ci+1 it shares with the next recipient. This
approach makes the leakage of communications far more difﬁcult
with an arbitrary compromised client as only Ci+1 can success-
fully extract messages from M. We discuss additional mechanisms
to reduce the threat of multiple colluding clients in our extended
technical report.
A number of techniques to address the denial of service issue
have been proposed in superposed anonymous communications sys-
tems. Through channel reservation, k-anonymous protocols and a
variety of additional techniques [72, 7, 71, 18, 70, 28], such at-
tacks can be reduced. We instead propose to mitigate such attacks
through the use of additional storage and a modiﬁcation to the pre-
vious protocol. Speciﬁcally, we expand the size of the mailbox
M to contain a total of O(mn) bits for a system supporting n
users, where m is a coefﬁcient decided upon by the system. Instead
of writing to a constant destination, clients select the destination
slot based on a secret shared between them. For instance, a client
Ci communicates with another client Cj in round S by placing a
message in slot MR = M AC(S, kCi,Cj ) mod (m × n). Dur-
(cid:2)
ing the next exchange, these two clients communicate via M
R =
M AC(S+1, kCi,Cj ) mod (m×n). We discuss how m is selected
and characterize the probability of collisions in the next subsection.
Like the basic protocol, OP selects M as its input to the ex-
change. Ci inputs the vector Ri it wishes to send and selects the
slot to which the message should be written. Because multiple
clients can now legitimately communicate with Ci concurrently,
Ci calculates the n − 1 mailboxes from which it should read using
the hashing method described above. Ci also inserts the current and
(cid:1)(cid:2)
(cid:2)
(cid:2)
(cid:2)
“next” values from the keystream kCi,Ci+1. As output, Ci receives
n − 1 slots and OP receives M
. Note that even if a participating
adversary were to attempt to deny service by overwriting mailboxes
intended for other legitimate nodes, it would be unable to determine
the intended destination of the communication because of the ran-
domization of slots within M.
Figure 2 provides an overview of this architecture without the
use of encryption to ease understanding. C0 sends the bit 1 to C1,
signiﬁed by the both the Read and Data bits of R0 being set to this
value. C0 also speciﬁes M0 as the destination as this was the slot
calculated using the previously mentioned technique. OP inserts
the entire mailbox M as its input. Through the use of our SFE
circuit, C0 receives M2 and M6, which contain a read bit of 0 from
C1 and a read bit 1 and a data bit 0 from C2, respectively. OP
, which differs from M only in one slot (M0). Note
receives M
will
that when encryption is being used, all of the contents of M
appear to have been changed from the perspective of OP .
We note that the above protocol description does not provide any
guarantees of collision detection and retransmission within the ar-
chitecture itself. Accordingly, we require that such functionality is
speciﬁed by the application and demonstrate the use of such mech-
anisms in our extended technical report.
4.4.2 Communication Characteristics
Our “spread-spectrum” inspired mailbox selection approach pre-
vents malicious clients or a compromised OP from regularly over-
writing the messages destined for a single node. However, legit-
imate collisions remain possible. We characterize the probability
of such events by further understanding the relationship between
the number of clients n, the mailbox multiplication coefﬁcient m
and the number of messages s a client sends per exchange with the
OP . Because more than one client can send to a single participant
in this system without necessarily colliding with other messages,
we assume that each client reads n − 1 messages per exchange
with the OP . Additionally, while clients can send s messages per
exchange, only one can be sent to a speciﬁc participant.
We focus on the probability of collisions during the steady-state
operation of the protocol. When a client Ci wants to send messages
to s other clients, at most s(n− 1) slots will be occupied by unread
messages. Each client will therefore have at least mn − s(n − 1)
open positions to ﬁll with its new messages. Before sending any
messages, Ci reads all of the messages sent to it. We can be certain
that all s messages sent by Ci+1 during the previous round have
been read. Similarly, we can say that at least s − 1 messages by
Ci+2 have also been read, and so on. Accordingly, of the s(n − 1)
slots that have been previously ﬁlled, at least s + (s − 1) + (s −
2) + ··· + 1 messages have already been read. These slots can be
treated as empty, making the total number of available positions:
A ≥ mn − s(n − 1) +
s(s + 1)
2
The number of messages that Ci can submit per round must be
less than or equal to the number of available slots. Accordingly:
s ≤ mn − s(n − 1) +
s(s + 1)
2
ns − s(s + 1)
s(1 − s + 1
2n
2
≤ mn
) ≤ m
Given that clients can submit between 1 and n − 1 messages
per exchange, a system based on this protocol must set a lower
bound for m to between 1 − 1
to provide the minimum
conditions for all s messages to be sent without collision.
n and n−1
We calculate the probability of having no collisions during a
round. We assume that there have been no prior collisions in the
previous n − 1 exchanges as this gives us a worst case analysis
(i.e., fewer available slots). We let x be equal to the number of
slots that are ﬁlled when Ci begins its exchange. Speciﬁcally:
2
x = s(n − 1) − s(s + 1)
2
= s((n − 1) − s + 1
2
))
The probability that no collisions occur during a round is therefore:
Pi ≥ mn − x
× · · · × mn − (x + s − 1)
mn
) × · · · × (1 − x + s − 1
≥ (1 − x
mn
× mn − (x + 1)
) × (1 − x + 1
mn
mn
mn
mn
)
sY
(1 − x + i − 1
)
≥
i=1
mn
This derivation provides an important insight. Ensuring a low
probability of collision requires the values x
to be as
close to 0 as possible. Such conditions are only possible if the value
of s is reasonably small (i.e., closer to 1) when compared to n or if
the value of m is very large as compared to s.
ms and x+k−1
mn
The probability that an individual client experiences a collision
during the course of a round is:
P ≤ (1 − s
nm
n−1
)
Note that the probability of collision for a single node is depen-
dent on the distance (i.e., the number of exchanges between other
clients and OP ) between the source and destination of a message.
We study the performance tradeoffs associated with varying these
parameters in the next section.
4.5 Scaling
The “improved” architecture works well for relatively small groups
of nodes. However, given the high “end-to-end” delay associated
with an increasing number of users and a strict round-robin schedul-
ing algorithm, provisions must be made to aid graceful scaling.
Our architecture can be scaled to support large numbers of users
by partitioning nodes into groups - similar approaches have been
applied to address security scaling issues in other networks [46].
Each group is treated as if it is its own MIPNet - a mailbox is
“passed” between this subset of participants, each of whom read
and write messages through the previously described mechanisms.
In addition, nodes are able to read from the mailboxes of all of
(cid:4)(cid:9)(cid:8)(cid:10)(cid:7)
(cid:3)(cid:8)(cid:7)(cid:11)
(cid:2)(cid:7)(cid:5)(cid:6)(cid:1)
(cid:3)(cid:8)(cid:7)(cid:11)
(cid:1)
(cid:4)(cid:5)
(cid:1)
(cid:4)(cid:5)
(cid:1)
(cid:4)(cid:5)
(cid:2)
(cid:3)
(cid:2)
(cid:3)
(cid:2)
(cid:3)
(cid:3)
(cid:1)
(cid:2)
(cid:2)
(cid:4)(cid:5)
(cid:3)
(cid:1)
(cid:1)
(cid:3)
(cid:2)
Figure 3: Supporting large numbers of users by separating nodes into
groups. Each group of nodes write to their group mailbox (write view).
However, nodes in each group are able to read from the other groups’ mail-
boxes (read view). This approach allows operation within the groups to
occur in parallel, thereby reducing the end-to-end latency of messages from
ng to n, where n is the number of users in each MIPNet and g is the number
of MIPNets.
the other groups associated with the MIPNet. Figure 3 provides
an overview of this approach. Note that groups are only able to
write to their own mailbox; however, they can communicate across
groups by reading from all mailboxes. Additionally, in order for a
node in one group to be able to read an entry in another group, all
nodes in the same position in each group must have access to the
same keystream.
Assuming that we form g MIPNets, each of which contains n
nodes for a total of ng users, this approach reduces the time be-
tween rounds from ng to n. Messages can accordingly be delivered
to their intended destination in much less time.
4.6 Security Guarantees
We now prove that MIPNets provide unlinkability.
LEMMA 1. MIPNets provide sender anonymity.
PROOF. The MIPNet architecture is secure against malicious
adversaries/attacks based on ﬁve assumptions. Like Fairplay, we
model SHA-1 as a random oracle and require that a client does not
terminate the protocol before sending the output it generates for the
OP back to it. Also as in Fairplay, to obtain security against ma-
licious (rather than honest-but curious) adversaries, we rely on a
cut-and-choose protocol for distributing garbled circuits to clients.
Unlike Fairplay, we implement our OT protocol using a two-lock
cryptosystem by Huang et al. [32] based on RSA. Accordingly,
each OT operation is secure based on the hardness of the RSA prob-
lem. Finally, clients use AES in counter mode to generate a shared
keystream, which is pseudorandom assuming that AES is a secure
block cipher.
As described in Section 4.4, client Ci inputs the vector Ri, j, i, k, k
into the SFE exchange with OP and receives the slot i ⊕ k. OP
. Be-
inputs the mailbox M and receives M
and M both appear to be indistinguishable from random
cause M
bits, it is not possible for OP to guess the slot j written by Ci with
probability greater than 1
n , MIPNets satisfy
Deﬁnition 1.
, which is M ⊕ k ⊕ k
mn + . As
≤ 1
mn
(cid:2)
(cid:2)
(cid:2)
1
(cid:2)
LEMMA 2. MIPNets provide receiver anonymity.
PROOF. Receiver anonymity is the dual of sender anonymity as
shown in Lemma 1. Accordingly, we rely upon the same cryp-
(cid:1)(cid:2)
tographic assumptions. As described in Section 4.4, client Ci re-
ceives slot i, but OP is unable to determine the identity of i due to
≤ 1
the use of OT with probability greater than 1
n ,
MIPNets satisfy Deﬁnition 2.
mn + . As
mn
1
THEOREM 1. MIPNets provide unlinkability.
PROOF. By Lemmas 1 and 2 and Deﬁnition 3, MIPNets provide