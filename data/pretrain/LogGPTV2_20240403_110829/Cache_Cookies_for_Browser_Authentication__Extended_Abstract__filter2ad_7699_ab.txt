ble to create C-memory, a type of CC-memory based on
conventional cookies. We can design C-memory to re-
strict read access to cookies based on secret keys, rather
than domain names (which can be spoofed) – to the best
of our knowledge, a new approach to the use of cook-
ies. C-memory, like CC-memory, can support huge vir-
tual memory structures. Our proposed protocols for CC-
memory can be implemented equally well in C-memory
(in systems where cookies are not blocked).
3 Schemes for User Identiﬁcation and Au-
thentication
In this section, we propose a tree-based construc-
tion called an identiﬁer tree that enables a server to
identify visiting users via objects stored in CC-memory.
Normally, TIFs and ordinary cookies (C-memory) are
domain-tagged, meaning that access is restricted to
servers from the domain that set them.
In a pharming
attack, though, an attacker successfully spoofs a domain
name and bypasses domain-based controls. Additionally,
some forms of CC-memory, like that based on browser-
histories, are by nature accessible to any server. Our
identiﬁer-tree scheme addresses these problems by re-
stricting server access to user identiﬁers based on secret
keys held by the server, instead of domains.
At the end of this section, we also brieﬂy consider how
secret cache cookies can aid in authenticating users that
a server has already identiﬁed, and how they can help
combat pharming attacks.
3.1
Identiﬁer trees
On creating an identiﬁer tree T , a server associates
each of its users with a distinct leaf in the tree; nodes in
the tree correspond to secrets in CC-memory. The server
plants in the browser of the user the set of secret cache
cookies along the path from the root to the user’s leaf. To
identify a visiting user, the server interactively queries
the user’s browser to determine which path it contains; in
other words, the server performs a depth-ﬁrst search of
the identiﬁer tree. In identifying the user’s unique leaf,
the server identiﬁes the user. This search is feasible only
for the original server that generated the identiﬁer tree (or
for a delegate), because only the server knows the secret
cache cookies associated with nodes in the tree.
Consider a binary tree T . Let d denote the depth of
the tree. For a given node n within the tree, let n (cid:3) ‘0’
denote the left child, and n (cid:3) ‘1’, the right child; for
the root, we take n to be a null string. Thus, for every
distinct bitstring B = b0b1 . . . bj of length j, there is a
unique corresponding node nB at depth j. The leaves of
T are the set of nodes nB for B ∈ {0, 1}d.
With each node nB, we associate a secret value uB,
namely a secret (l-bit) address in CC-memory. To store
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:52 UTC from IEEE Xplore.  Restrictions apply. 
partial information about user identiﬁers and there-
fore can correlate appearances of a given user across
sessions.
2. Authentication: The adversary should be unable to
impersonate any user it does not control.
3.2 Secret cache cookies for authentica-
tion
Secret cache cookies can offer some resistance to
pharming. A secret cache cookie is simply a secret bit-
string (key) yi speciﬁc to user i that is stored in a secret,
user-speciﬁc address ui in CC-memory (or C-memory).
Secret cache cookies can act as authenticators. Once
the user identiﬁes herself and perhaps authenticates with
other means, e.g., a password or hardware token, a server
checks for the presence of a user-speciﬁc secret cache
cookie as a secondary authenticator. We emphasize that
a server gains access to the secret cache cookie not by
merit of its domain name, but by merit of its knowledge
of the secret ui.
Security of secret cache cookies: For both restricted and
unrestricted CC-memory, as well as C-memory, secret
cache cookies are resistant to basic pharming. Domain
spooﬁng, e.g., DNS poisoning, is insufﬁcient for success-
ful attack: In order to access the key yi, a server must
know the secret address ui associated with a user.
A more aggressive pharming attack, however, can
compromise a secret cache cookie. A pharmer can lure a
user, steal her password, log into a server to learn ui, lure
the user a second time, and steal yi. We cannot wholly
defend against such a multi-phase attack, but can raise the
number of required attack phases. To do so, we associate
with user i not one secret cache cookie, but a sequence
of d of them. A server searches for the d secret cache
cookies sequentially, rejecting an authentication attempt
immediately when it is unable to locate one. To defeat
such an authentication scheme, a pharmer must interact
with a server and client in turn at least d times. For large
enough d, this virtually requires a real-time man-in-the-
middle attack (or malware, which renders most authenti-
cation methods impotent).
4
Implementation
We now describe an implementation of CC-memory
based on TIFs. Our server is an Apache 1.3.33 using
FastCGI, Perl and Gentoo Linux (2.4.28 kernel), on a
1 GHz Pentium III with 256MB memory. Our client
uses Mozilla 1.5.0.1 and Windows XP, on a machine
with identical hardware as the server. Thus, the server is
clearly under-powered for its task; on the other hand, we
Figure 1. A simple identiﬁer tree of depth
d = 3 with a highlighted path for identifer
‘001’
node nB in the CC-memory of a browser, a server plants
a cache cookie at address uB.
1 b(i)
2 . . . b(i)
The server that has generated T for its population of
users assigns each user to a unique, random leaf. Sup-
pose that user i is associated with leaf nB(i) , where
B(i) = b(i)
d . The server determines the leaf
– and thus identity – of a user as follows. The server ﬁrst
queries the user’s browser to determine whether it con-
tains n0 or n1 in its cache; in particular, the server queries
address u0 looking for whether the corresponding bit is
on or off, and then address u1. The server then recurses.
When it ﬁnds that node nB is present in the browser, it
searches to see whether nB (cid:3) ‘0’ or nB (cid:3) ‘1’ is present.
Ultimately, the server ﬁnds the full path of nodes n
,
b(i)
1
n
, and thus the leaf correspond-
b(i)
1 b(i)
2
ing to the identity of user i.
, . . . , n
b(i)
1 b(i)
2 ...b(i)
d
A toy, simpliﬁed identiﬁer tree is depicted in Fig. 1.
In the full paper, we discuss tradeoffs among the degree,
storage requirements, and round-complexity of identiﬁer
trees.
Security of identiﬁer trees: Space restrictions forbid in-
depth security analysis of identiﬁer trees. Our aim, how-
ever, is to protect against an adversary that: (1) Controls a
number of users and thus knows their identiﬁers and (2)
Can lure users to a rogue server via a pharming attack.
We assume, however, that beyond this: (A) The adversary
does not possess knowledge of the set {(uB)}B∈{0,1}d
of server secrets; and (B) The adversary cannot mount an
active (real-time) man-in-the-middle attack. Our scheme
aims at two security goals:
1. Privacy: The adversary should be unable to extract
a unique identiﬁer for a user from her identiﬁer tree.
Consequently, the adversary should be unable on the
basis of her identiﬁer tree to establish a clear linkage
between independent sessions initiated by a given
user. Note, however, that the adversary can learn
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:52 UTC from IEEE Xplore.  Restrictions apply. 
performed experiments on a 100 Mbps private local area
network with minimal network trafﬁc and congestion.
We execute a write to the browser cache by causing
the client to make a series of HTTP requests to cacheable
content. In our implementation we chose to cache GIF
image ﬁles referenced from a dynamically generated doc-
ument. These images contain solely the HTTP header
and no actual content, resulting in very quick loads. The
HTTP/1.1 server response header for the ﬁrst load con-
tains Last-Modiﬁed, ETag, Cache-Control, and Expires
ﬁelds and values. The Cache-Control and Expires ﬁelds
are set to instruct the Web client to cache the content
many years into the future. An ETag (short for “entity
tag”) is a ﬁeld that enables a server to distinguish among
different instances of a single resource, e.g., different ver-
sions or copies of a cached browser image.
We execute a read via subsequent client retrievals of
the cached objects. These result in the client sending
Last-Modiﬁed and ETag values to the server in HTTP
requests in the form of If-Modiﬁed-Since and If-None-
Match ﬁelds respectively. If these values match those in
the initial write, then a cache hit is observed. In this case,
the server returns an HTTP 304 (Not Modiﬁed) response
so as not to “clobber” the cached value. Otherwise, it re-
turns a 404 (Not Found) HTTP response. (This process of
a client sending data to a server to be validated is called
a conditional GET request.)
Our uses proposed above for cache cookies are likely
to involve considerably more frequent reads, i.e., authen-
tications, than writes, i.e., initializations. Thus in our ex-
periment we measured the full, round-trip time for the
server to read a batch of n TIFs, i.e., to read n TIFs in
a single communication round. We refer to Figure 2 for
our results; we have plotted one hundred data points for
each value of n within the range of 1 to 80.
As an example, consider a translation of these timing
results into a performance estimate for an identiﬁer tree,
such as a binary tree of depth d = 60. For n = 2, the av-
erage read time was 0.04175 seconds. This corresponds
to the expected time for the server to test the pair of de-
scendants of a given node. Thus traversal of the full tree
would require an average of approximately 2.5 seconds.
We can greatly extend the amount of information in a
TIF in CC-memory by co-opting two ﬁelds. There is the
Last-Modiﬁed ﬁeld, which contains 32 bits. The ETag,
though, is particularly useful for our purposes; in Mozilla
1.5.0.1, for example, an ETag can contain up to 81864
bits.
(The line buffer for the ETag is 10k bytes, some
devoted to header information.) Thus for secret cache
cookies, a single TIF can furnish essentially as much se-
cret data as needed – well beyond the 128 bits typical for
a cryptographic secret key.
5 Conclusion
We have shown that careful deployment, cache cook-
ies can support privacy-sensitive user identiﬁcation. They
can also strengthen user authentication and help protect
against phishing and pharming attacks. Users are increas-
ingly supressing cookies because of privacy concerns.
Cache cookies are an alternative that can replace some
of the resulting, lost functionality. Additionally, the tech-
niques we have introduced for cache cookies can be ap-
plied to ordinary cookies to help strengthen their use in
authentication.
For further details on our work, we refer to the full
paper, available at www.ravenwhite.com.
References
[1] A. Clover.
Timing attacks on Web privacy (paper and
Referenced 2006 at
speciﬁc issue), 20 February 2002.
www.securiteam.com/securityreviews/5GP020A6LG.html.
[2] E. W. Felten and M. A. Schneider. Timing attacks on Web pri-
vacy.
In ACM Conference on Computer and Communications
Security, pages 25–32. ACM Press, 2000. Referenced 2006 at
http://www.cs.princeton.edu/sip/pub/webtiming.pdf.
[3] C. Jackson, A. Bortz, D. Boneh, and J. Mitchell. Web privacy
attacks on a uniﬁed same-origin browser. In WWW 06, 2006. To
appear.
[4] J. Vijayan.
Microsoft warns of
fraudulent digital certiﬁ-
cates. Computerworld, 22 March 2001. Referenced 2006 at
www.computerworld.com/softwaretopics/software/story/
0,10801,58857,00.html.
Figure 2. Round-trip time for a server to
read a batch of n TIF cache-cookies
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:52 UTC from IEEE Xplore.  Restrictions apply.