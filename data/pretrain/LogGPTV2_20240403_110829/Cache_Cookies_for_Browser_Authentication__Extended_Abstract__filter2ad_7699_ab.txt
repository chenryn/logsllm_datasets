### C-Memory: A New Approach to Cookie-Based Memory

We introduce C-memory, a variant of CC-memory that is based on conventional cookies. C-memory restricts read access to cookies using secret keys instead of domain names, which can be spoofed. To the best of our knowledge, this is a novel approach to the use of cookies. Like CC-memory, C-memory supports large virtual memory structures. The protocols we propose for CC-memory can also be implemented in C-memory, provided cookies are not blocked.

### Schemes for User Identification and Authentication

In this section, we present an identifier tree, a tree-based construction that enables a server to identify visiting users through objects stored in CC-memory. Typically, TIFs and ordinary cookies (C-memory) are domain-tagged, meaning that access is restricted to servers from the domain that set them. In a pharming attack, an attacker can spoof a domain name and bypass these domain-based controls. Additionally, some forms of CC-memory, such as those based on browser histories, are inherently accessible to any server. Our identifier-tree scheme addresses these issues by restricting server access to user identifiers based on secret keys held by the server, rather than domains.

At the end of this section, we also briefly discuss how secret cache cookies can aid in authenticating users that a server has already identified and how they can help combat pharming attacks.

#### 3.1 Identifier Trees

To create an identifier tree \( T \), a server associates each user with a distinct leaf in the tree. Nodes in the tree correspond to secrets in CC-memory. The server plants a set of secret cache cookies along the path from the root to the user's leaf in the user's browser. To identify a visiting user, the server interactively queries the user's browser to determine which path it contains, effectively performing a depth-first search of the identifier tree. This search is only feasible for the original server that generated the identifier tree (or a delegate), as only the server knows the secret cache cookies associated with the nodes in the tree.

Consider a binary tree \( T \). Let \( d \) denote the depth of the tree. For a given node \( n \) within the tree, let \( n \oplus '0' \) denote the left child, and \( n \oplus '1' \) the right child; for the root, we take \( n \) to be a null string. Thus, for every distinct bitstring \( B = b_0b_1 \ldots b_j \) of length \( j \), there is a unique corresponding node \( n_B \) at depth \( j \). The leaves of \( T \) are the set of nodes \( n_B \) for \( B \in \{0, 1\}^d \).

With each node \( n_B \), we associate a secret value \( u_B \), which is a secret \( l \)-bit address in CC-memory. To store node \( n_B \) in the CC-memory of a browser, the server plants a cache cookie at address \( u_B \).

The server assigns each user to a unique, random leaf. Suppose user \( i \) is associated with leaf \( n_{B(i)} \), where \( B(i) = b_0b_1 \ldots b_d \). The server determines the user's identity by first querying the user's browser to check whether it contains \( n_0 \) or \( n_1 \) in its cache. Specifically, the server checks the address \( u_0 \) to see if the corresponding bit is on or off, and then checks \( u_1 \). The server then recurses. When it finds that node \( n_B \) is present in the browser, it searches to see whether \( n_B \oplus '0' \) or \( n_B \oplus '1' \) is present. Ultimately, the server finds the full path of nodes \( n_{b_0}, n_{b_0b_1}, \ldots, n_{b_0b_1 \ldots b_d} \), and thus the leaf corresponding to the identity of user \( i \).

A simplified example of an identifier tree is depicted in Figure 1. In the full paper, we discuss tradeoffs among the degree, storage requirements, and round-complexity of identifier trees.

#### 3.2 Secret Cache Cookies for Authentication

Secret cache cookies can offer resistance to pharming. A secret cache cookie is a secret bit-string (key) \( y_i \) specific to user \( i \) that is stored in a secret, user-specific address \( u_i \) in CC-memory (or C-memory). Secret cache cookies can act as authenticators. After the user identifies herself and possibly authenticates with other means (e.g., a password or hardware token), the server checks for the presence of a user-specific secret cache cookie as a secondary authenticator. Importantly, the server gains access to the secret cache cookie not by virtue of its domain name but by knowing the secret \( u_i \).

**Security of Secret Cache Cookies:**
- **Pharming Resistance:** For both restricted and unrestricted CC-memory, as well as C-memory, secret cache cookies are resistant to basic pharming. Domain spoofing, such as DNS poisoning, is insufficient for a successful attack. To access the key \( y_i \), a server must know the secret address \( u_i \) associated with the user.
- **Advanced Pharming Attacks:** A more aggressive pharming attack can compromise a secret cache cookie. An attacker can lure a user, steal her password, log into a server to learn \( u_i \), lure the user a second time, and steal \( y_i \). While we cannot wholly defend against such a multi-phase attack, we can increase the number of required attack phases. By associating multiple secret cache cookies with each user, a server must search for all of them sequentially, rejecting an authentication attempt if any one is missing. To defeat such an authentication scheme, an attacker must interact with a server and client in turn multiple times, making real-time man-in-the-middle attacks (or malware) necessary.

### Implementation

We describe an implementation of CC-memory based on TIFs. Our server uses Apache 1.3.33 with FastCGI, Perl, and Gentoo Linux (2.4.28 kernel) on a 1 GHz Pentium III with 256MB of memory. The client uses Mozilla 1.5.0.1 and Windows XP on a machine with identical hardware. The server is underpowered for its task, but we have conducted experiments on a 100 Mbps private local area network with minimal traffic and congestion.

**Writing to the Browser Cache:**
We execute a write to the browser cache by causing the client to make a series of HTTP requests to cacheable content. In our implementation, we chose to cache GIF image files referenced from a dynamically generated document. These images contain only the HTTP header and no actual content, resulting in very quick loads. The HTTP/1.1 server response header for the first load includes Last-Modified, ETag, Cache-Control, and Expires fields. The Cache-Control and Expires fields are set to instruct the Web client to cache the content many years into the future. An ETag (short for "entity tag") is a field that enables a server to distinguish among different instances of a single resource, such as different versions or copies of a cached browser image.

**Reading from the Browser Cache:**
We execute a read via subsequent client retrievals of the cached objects. This results in the client sending Last-Modified and ETag values to the server in HTTP requests in the form of If-Modified-Since and If-None-Match fields, respectively. If these values match those in the initial write, a cache hit is observed, and the server returns an HTTP 304 (Not Modified) response. Otherwise, it returns a 404 (Not Found) HTTP response. (This process of a client sending data to a server to be validated is called a conditional GET request.)

Our proposed uses for cache cookies involve more frequent reads (i.e., authentications) than writes (i.e., initializations). In our experiment, we measured the full, round-trip time for the server to read a batch of \( n \) TIFs in a single communication round. We refer to Figure 2 for our results, which include one hundred data points for each value of \( n \) within the range of 1 to 80.

For example, consider a translation of these timing results into a performance estimate for an identifier tree, such as a binary tree of depth \( d = 60 \). For \( n = 2 \), the average read time was 0.04175 seconds. This corresponds to the expected time for the server to test the pair of descendants of a given node. Traversal of the full tree would require an average of approximately 2.5 seconds.

We can greatly extend the amount of information in a TIF in CC-memory by co-opting two fields. The Last-Modified field contains 32 bits, while the ETag, particularly useful for our purposes, can contain up to 81864 bits in Mozilla 1.5.0.1 (the line buffer for the ETag is 10k bytes, some devoted to header information). Thus, for secret cache cookies, a single TIF can furnish essentially as much secret data as needed—well beyond the 128 bits typical for a cryptographic secret key.

### Conclusion

We have shown that careful deployment of cache cookies can support privacy-sensitive user identification, strengthen user authentication, and help protect against phishing and pharming attacks. As users increasingly suppress cookies due to privacy concerns, cache cookies offer an alternative that can replace some of the lost functionality. Additionally, the techniques we have introduced for cache cookies can be applied to ordinary cookies to enhance their use in authentication.

For further details on our work, please refer to the full paper available at www.ravenwhite.com.

### References

[1] A. Clover. Timing attacks on Web privacy (paper and specific issue), 20 February 2002. Referenced 2006 at www.securiteam.com/securityreviews/5GP020A6LG.html.

[2] E. W. Felten and M. A. Schneider. Timing attacks on Web privacy. In ACM Conference on Computer and Communications Security, pages 25–32. ACM Press, 2000. Referenced 2006 at http://www.cs.princeton.edu/sip/pub/webtiming.pdf.

[3] C. Jackson, A. Bortz, D. Boneh, and J. Mitchell. Web privacy attacks on a unified same-origin browser. In WWW 06, 2006. To appear.

[4] J. Vijayan. Microsoft warns of fraudulent digital certificates. Computerworld, 22 March 2001. Referenced 2006 at www.computerworld.com/softwaretopics/software/story/0,10801,58857,00.html.

**Figure 2. Round-trip time for a server to read a batch of \( n \) TIF cache-cookies.**

Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06)  
1081-6011/06 $20.00 © 2006 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 02:48:52 UTC from IEEE Xplore. Restrictions apply.