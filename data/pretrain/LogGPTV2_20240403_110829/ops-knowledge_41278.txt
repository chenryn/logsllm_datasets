User: 请回答以下运维开发问题为实现未来无缝切换而设计的部署的术语是什么？我目前正在开发一个新的主要版本（v2）的应用，旨在取代当前的生产版本（v1）。这一重新设计带来了前端、公共API层、内部API层和数据库（整个工具包和卡布）的变化。
虽然在较低的环境中很容易同时拥有活动的v1和v2前端引擎和公共API（为了简单起见，我将其称为“前半部分”），但由于各种原因，我们不可能使用内部API和数据库（我将其称作“后半部分”。
v2的重新设计需要对后半部分进行更改，从而导致v1前半部分断裂。然而，在这种特定的情况下，通过在v1前半部分进行微小的改变，可以避免这种断裂。因此，我们可以部署这个v1“垫片”，同时将后半部分更改为生产。届时，我们将能够切换到v2的前半部分，而后半部分不需要任何进一步的部署。
这种特定类型的部署有名字吗？在这种部署中，将垫片部署到现有应用中，使其与更新的后端一起工作，以实现未来无缝切换的目标？
根据我在这篇内容丰富的博客文章中对蓝/绿部署的定义，我认为这是一种明显不同的部署。

Assistant: ……通过在v1的前半部分做一个小的改变，可以避免这种破坏。
上面这个问题的摘录让我想起了90年代末的一些类似的事情，比如1996-1999年（当时成千上万的IT人员正在为Y2K做准备…）。在那些日子里，大型软件供应商的新软件版本都会附带发布说明，其中包括以下内容之一：
“这个版本是为了让这个软件能够容忍Y2K”（=允许该软件从2000年1月1日起继续工作，至少一段时间，尽管它会继续显示年份的2位数字，比如00，而不是4位数字，就像2000）。
“这次发布是为了让这个软件做好Y2K的准备”（=允许该软件从2000年1月1日起继续工作，而不会因为19世纪到20世纪的变化而受到任何（已知的）限制）。
容忍Y2K的软件通常还包括某种神奇的截止值，例如：从70年（当时甚至不存在DOS…）到99年的年份被认为是1970年到1999年，而从00年到69年的年份则被认为是2000年到2069年。这种假设也是为什么这些软件后来被一些符合Y2K标准的版本所取代的原因（这些假设已经过时）。
考虑到以上内容，您所要求的术语可能类似于“V2容忍版本”，在未来的某个时候，随后将是“V2就绪版本”（=您的实际V2版本）。