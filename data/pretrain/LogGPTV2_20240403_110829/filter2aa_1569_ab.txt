wxapp检查代码
        # 直接拼接eval，但是get.fun函数值被限制了,但是get还能⽤，前提是绕过它的check检查
        # check检查有⽩名单ip可以直接绕过，这个最⽅便
        # 或者 枚举32位随机字符，⼋分钟时间爆破(有点难度)
        # 发现wxapp.blind函数可以利⽤，可以写⼊任意user.json⽂件，但前提绕过check检查
        return data, json_header
    if get.name != 'app': return abort(404)
    if not public.check_app('wxapp'): return public.returnMsg(False, '未绑定⽤户!')
    # 需要绑定⽤户，
    import panelPlugin
    plu = panelPlugin.panelPlugin()
    get.s = '_check'
    checks = plu.a(get)
    # 调⽤wxapp模块，之前看plu.a，以为能任意利⽤呢，我想多了。
    if type(checks) != bool or not checks:
        public.set_error_num(num_key)
        return public.getJson(checks), json_header
    get.s = get.fun
    comm.setSession()
    comm.init()
    comm.checkWebType()
    comm.GetOS()
    result = plu.a(get)
    # session.clear()
    public.set_error_num(num_key, True)
    return public.getJson(result), json_header
class wxapp(SelfModule, ScanLogin):
    def __init__(self):
        self.app_path = '/www/server/panel/data/'
        self.app_path_p = '/www/server/panel/plugin/app/'
        SelfModule.__init__(self)
    def _check(self, get):
        token_data = public.readFile(self.app_path + 'token.pl')
        if not token_data: token_data = public.readFile(self.app_path_p + 'token.pl')
        if hasattr(SelfModule, get['fun']):
            return False
        elif get['fun'] in ['set_login', 'is_scan_ok', 'login_qrcode']:
            return True
        elif get['fun'] == 'blind':
            if not token_data:
                return public.returnMsg(False, '⼆维码过期1')
            token_data = token_data.replace('\n', '')
            password, expiration_time = token_data.split(':')
            # return True
插件检查代码
            if time.time() - int(expiration_time) > 8*60:
                return public.returnMsg(False, '⼆维码过期2')
            elif get['panel_token'] != password:
                return public.returnMsg(False, '秘钥不正确')
            return True
        else:
            # 是否在⽩名单ip    sgin 是否正确
            if hasattr(get, 'uid') and hasattr(get, 'sgin') and hasattr(get, 'fun') and 
get['uid'] in self.user_info.keys():
                encryption_str = self.user_info[get['uid']]
['token']+get['fun']+get['uid']
                if sys.version_info[0] == 3:
                    if type(encryption_str) == str:
                        encryption_str = encryption_str.encode()
            if get['sgin'] == 
public.md5(binascii.hexlify(base64.b64encode(encryption_str))):
                if public.GetClientIp() in ['47.52.194.186']:
                    return True
            return public.returnMsg(False, '未授权')
    # ⽤户绑定
    def blind(self, get):
        # ⽤于⼩程序
        # 
        self.user_info[get['uid']] = {
            "avatarUrl":  get['avatarUrl'],
            "nickName": get['nickName'],
            "token": get['token']
        }
        public.writeFile(self.app_path+"user.json", json.dumps(self.user_info))
        public.writeFile(self.app_path_p + "user.json", json.dumps(self.user_info))
        public.ExecShell("rm -rf %stoken.pl" % self.app_path)
        public.ExecShell("rm -rf %stoken.pl" % self.app_path_p)
        return public.returnMsg(True, '绑定成功'
#请求插件事件
    def a(self,get):
        if not hasattr(get,'name'): return public.returnMsg(False,'PLUGIN_INPUT_A')
        try:
            if not public.path_safe_check("%s/%s" % (get.name,get.s)): return 
public.returnMsg(False,'PLUGIN_INPUT_C')
            path = self.__install_path + '/' + get.name
            if not os.path.exists(path + '/'+get.name+'_main.py'): 
                if os.path.exists(path+'/index.php'):
                    import panelPHP
                    return panelPHP.panelPHP(get.name).exec_php_script(get)
                    # php插件直接执⾏php代码了
每个宝塔⾯板⾥通⽤插件有 linuxsys和webssh，通过插件也能获取宝塔内的很多信息，严重的如rce因为每个参数
都有检查，不好bypass，这个插件篇会说。
检查⾯板状态
这个返回 ‘True’ 应该可以当成最通⽤的⾯板指纹的⽅式
插件接⼝
                return public.returnMsg(False,'PLUGIN_INPUT_B')
            if not self.check_accept(get):return 
public.returnMsg(False,public.to_string([24744, 26410, 36141, 20080, 91, 37, 115, 93, 
25110, 25480, 26435, 24050, 21040, 26399, 33]) % (self.get_title_byname(get),))
            public.package_path_append(path)
            plugin_main = __import__(get.name+'_main')
            try:
                reload(plugin_main)
            except: pass
            pluginObject = eval('plugin_main.' + get.name + '_main()')
            # 否则执⾏eval
            if not hasattr(pluginObject,get.s): return 
public.returnMsg(False,'PLUGIN_INPUT_C',(get.s,))
            execStr = 'pluginObject.' + get.s + '(get)'
            return eval(execStr)
        except:
            import traceback
            errorMsg = traceback.format_exc()
            public.submit_error(errorMsg)
            return public.returnMsg(False,'抱歉，出错了： %s ' % 
errorMsg.replace('\n',''))
@app.route('/service_status', methods=method_get)
def service_status():
    # 检查⾯板当前状态
    try:
        if not 'login' in session: session.clear()
    except:
        pass
    return 'True'
@app.route('/coll', methods=method_all)
@app.route('/coll/', methods=method_all)
@app.route('//', methods=method_all)
@app.route('///', methods=method_all)
def panel_other(name=None, fun=None, stype=None):
    # 插件接⼝
    if name != "mail_sys" or fun != "send_mail_http.json":
        comReturn = comm.local()
        if comReturn: return comReturn
        if fun:
            if fun.find('.json') != -1:
                if 'request_token' in session and 'login' in session:
                    if not check_csrf(): return public.ReturnJson(False, 
'INIT_CSRF_ERR'), json_header
        args = None
    else:
        # 必须要name=mail_sys，fun=send_mail_http，不然其他的都需要登陆
        args = get_input()
        args_list = ['mail_from', 'password', 'mail_to', 'subject', 'content', 
'subtype', 'data']
        for k in args.__dict__:
            if not k in args_list: return abort(404)
    is_accept = False
    if not fun: fun = 'index.html'
    if not stype:
        tmp = fun.split('.')
        fun = tmp[0]
        if len(tmp) == 1:  tmp.append('')
        stype = tmp[1]
    if not name: name = 'coll'
    if not public.path_safe_check("%s/%s/%s" % (name, fun, stype)): return abort(404)
    if name.find('./') != -1 or not re.match(r"^[\w-]+$", name): return abort(404)
    if not name: return public.returnJson(False, 'PLUGIN_INPUT_ERR'), json_header
    p_path = os.path.join('/www/server/panel/plugin/', name)
    if not os.path.exists(p_path): 
        if name == 'btwaf' and fun == 'index':
            return  render_template('error3.html',data={}) 
        return abort(404)
    # 是否响插件应静态⽂件
    if fun == 'static':
        if stype.find('./') != -1 or not os.path.exists(p_path + '/static'): return 
abort(404)
        s_file = p_path + '/static/' + stype
        if s_file.find('..') != -1: return abort(404)
        if not re.match(r"^[\w\./-]+$", s_file): return abort(404)
        if not public.path_safe_check(s_file): return abort(404)
        if not os.path.exists(s_file): return abort(404)
        return send_file(s_file, conditional=True, add_etags=True)
    # 准备参数
    if not args: args = get_input()
    args.client_ip = public.GetClientIp()
    args.fun = fun
    # 初始化插件对象
    try:
        is_php = os.path.exists(p_path + '/index.php')
        if not is_php:
            public.package_path_append(p_path)
            plugin_main = __import__(name + '_main')
            try:
                if sys.version_info[0] == 2:
                    reload(plugin_main)
                else:
                    from imp import reload
                    reload(plugin_main)
            except:
                pass
            plu = eval('plugin_main.' + name + '_main()')
            if not hasattr(plu, fun):
                if name == 'btwaf' and fun == 'index':
                    return  render_template('error3.html',data={}) 
                return public.returnJson(False, 'PLUGIN_NOT_FUN'), json_header
        # 执⾏插件⽅法
        if not is_php:
            if is_accept:
                checks = plu._check(args)
                if type(checks) != bool or not checks:
                    return public.getJson(checks), json_header
            data = eval('plu.' + fun + '(args)')
        else:
            comReturn = comm.local()
            if comReturn: return comReturn
            import panelPHP
            args.s = fun
            args.name = name
            data = panelPHP.panelPHP(name).exec_php_script(args)
        r_type = type(data)
        if r_type == Response:
            return data
        # 处理响应
        if stype == 'json':  # 响应JSON
            return public.getJson(data), json_header
        elif stype == 'html':  # 使⽤模板
            t_path_root = p_path + '/templates/'
            t_path = t_path_root + fun + '.html'
            if not os.path.exists(t_path):
                return public.returnJson(False, 'PLUGIN_NOT_TEMPLATE'), json_header
            t_body = public.readFile(t_path)
WEBHOOK接⼝
import webhook_main 这个是插件形式
            # 处理模板包含
            rep = r'{%\s?include\s"(.+)"\s?%}'
            includes = re.findall(rep, t_body)
            for i_file in includes:
                filename = p_path + '/templates/' + i_file
                i_body = 'ERROR: File ' + filename + ' does not exists.'
                if os.path.exists(filename):
                    i_body = public.readFile(filename)
                t_body = re.sub(rep.replace('(.+)', i_file), i_body, t_body)
            return render_template_string(t_body, data=data)
        else:  # 直接响应插件返回值,可以是任意flask⽀持的响应类型
            r_type = type(data)
            if r_type == dict:
                return public.returnJson(False, 
public.getMsg('PUBLIC_ERR_RETURN').format(r_type)), json_header
            return data
    except:
        error_info = public.get_error_info()
        public.submit_error(error_info)
        return error_info.replace('\n', '\n')
@app.route('/hook', methods=method_all)
def panel_hook():
    # webhook接⼝
    get = get_input()
    if not os.path.exists('plugin/webhook'):
        return public.getJson(public.returnMsg(False, 'INIT_WEBHOOK_ERR'))
    public.package_path_append('plugin/webhook')
    import webhook_main
    session.clear()
    return public.getJson(webhook_main.webhook_main().RunHook(get))
#coding: utf-8
# +-------------------------------------------------------------------
# | 宝塔Linux⾯板 x3
# +-------------------------------------------------------------------
# | Copyright (c) 2015-2017 宝塔软件(http://bt.cn) All rights reserved.
# +-------------------------------------------------------------------
# | Author: ⻩⽂良 
# +-------------------------------------------------------------------
#+--------------------------------------------------------------------
#|   宝塔WebHook插件
#+--------------------------------------------------------------------
import public,json,os,time;
class obj: id=0;
class webhook_main:
    __setupPath = 'plugin/webhook';
    __panelPath = '/www/server/panel';
    #获取列表
    def GetList(self,get):
        jsonFile = self.__setupPath + '/list.json';
        if not os.path.exists(jsonFile): return public.returnMsg(False,'配置⽂件不存
在!');
        data = {}
        data = json.loads(public.readFile(jsonFile));
        return sorted(data, key= lambda b:b['addtime'],reverse=True);
    #添加HOOK
    def AddHook(self,get):
        data = self.GetList(get);
        if get.title == '' or get.shell == '': return public.returnMsg(False,'标题和Hook
脚本不能为空');
        hook = {}
        hook['title'] = get.title;
        hook['access_key'] = public.GetRandomString(48)
        hook['count'] = 0;
        hook['addtime'] = int(time.time())
        hook['uptime'] = 0
        jsonFile = self.__setupPath + '/list.json';
        if self.__setupPath + '/script': os.system('mkdir ' + self.__setupPath + 
'/script');
        shellFile = self.__setupPath + '/script/' + hook['access_key']
        public.writeFile(shellFile,get.shell)
        data.append(hook);
        public.writeFile(jsonFile,json.dumps(data))
        return public.returnMsg(True,'添加成功!');
    #删除Hook
    def DelHook(self,get):
        data = self.GetList(get);
        newdata = []
        for hook in data:
            if hook['access_key'] == get.access_key: continue;
            newdata.append(hook);
        jsonFile = self.__setupPath + '/list.json';
        shellFile = self.__setupPath + '/script/' + get.access_key
        os.system('rm -f ' + shellFile + '*');
        public.writeFile(jsonFile,json.dumps(newdata))
        return public.returnMsg(True,'删除成功!');
如果⽬录有遍历，能知道 plugin/webhook/script/ ⽬录下⽂件，就可以伪造access_key来执⾏任意命令了。
如果没安装webhook插件,访问 url/hook,会提示
公共函数库
ExecShell 传⼊ cmdstring 这个在外部可能拼接
    #运⾏Shell
    def RunShell(self,get):
        data = self.GetList(get);
        for i in range(len(data)):
            if data[i]['access_key'] == get.access_key:
                shellFile = self.__setupPath + '/script/' + get.access_key
                param = '';
                if hasattr(get,'param'): param = get.param;
                os.system("bash " + shellFile + ' "'+param+'" ' + ' >> ' + shellFile + 
'.log &')
                data[i]['count'] +=1;
                data[i]['uptime'] = int(time.time());
                jsonFile = self.__setupPath + '/list.json';
                public.writeFile(jsonFile,json.dumps(data))
                return public.returnMsg(True,'运⾏成功!');
        return public.returnMsg(False,'指定Hook不存在!');
    #运⾏Hook
    def RunHook(self,get):
        res = self.RunShell(get);
        result = {}
        result['code'] = 0
        if res['status']: result['code'] = 1
        return result;
{"status": false, "msg": "请先安装WebHook插件!"}
#校验路径安全
def path_safe_check(path,force=True):
    if len(path) > 256: return False 
    checks = ['..','./','\\','%','$','^','&','*','~','"',"'",';','|','{','}','`']
    for c in checks:
        if path.find(c) != -1: return False
    if force:
        rep = r"^[\w\s\.\/-]+$"
        if not re.match(rep,path): return False
    return True
插件篇
邮件发送
参考整理资料
https://github.com/Hzllaga/BT_Panel_Privilege_Escalation
宝塔⾯板Windows提权⽅法
写数据库提权
API提权
计划任务提权
⾃动化测试
宝塔 phpMyAdmin
https://www.leavesongs.com/PHP/baota-phpmyadmin-unauthentication-analysis.html