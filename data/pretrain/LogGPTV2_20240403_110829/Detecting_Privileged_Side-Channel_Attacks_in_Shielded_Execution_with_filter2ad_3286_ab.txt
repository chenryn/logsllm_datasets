cution in ways that can be controlled by the attacker.
3.1 Exception-based Attacks
Exceptions triggered during the execution inside an en-
clave will be captured ﬁrst by the untrusted OS before being
forwarded to the enclave program. As such, these exceptions
can be exploited by the adversary to keep track of the ac-
tivities of the victim program’s execution. Even worse, in
some cases, the untrusted OS can cause the enclave execu-
tion to induce exceptions that give it considerable insight
into the enclave’s activities. For instance, Xu et al. [53]
showed that by modifying page table entries of pages inside
an enclave, the untrusted OS can cause enclave execution to
incur an exception upon each new page access, permitting
the OS to trace the enclave execution (at the granularity
of pages as SGX masks the lowest 12 bits of the page-fault
address before passing it to the OS kernel) and gain consid-
erable information about secret data it holds. For instance,
it was shown that the code and data page access patterns
of the freetype font rendering engine, the Hunspell spell
checker, and the image processing library libjpeg can be
monitored through the page-fault side channel, which may
be exploited to infer the content of the documents or im-
ages. Shinde et al. [45] demonstrated similar page-fault at-
9tacks against cryptographic code, e.g., the EdDSA signing
process in libgcrypt. By tracing the execution sequence of
the three functions ec_mul, add_point and test_bit, which
are located in three separate pages, the adversary can learn
the signing key.
3.2 Interrupt-based Attacks
It has been shown in prior studies [20, 58] that an un-
privileged attacker may generate frequent interrupts to pre-
empt the victim program’s execution, by exploiting design
ﬂaws of the underlying OS or hypervisor schedulers. The
frequent preemption enables ﬁne-grained cache side-channel
attacks, e.g., Prime-Probe attacks, on the L1 data cache
and instruction cache to extract encryption keys. A privi-
leged attacker who controls the entire OS may also program
hardware interrupt controllers to trigger even more frequent
interrupts (e.g., one interrupt per instruction) without ex-
ploiting any vulnerability of the schedulers. For example,
the high-precision Advanced Conﬁguration and Power Inter-
face (ACPI) Power Management Timer, the High Precision
Event Timer (HPET), the Local Advanced Programmable
Interrupt Controller (LAPIC), and the hardware performance
monitoring units (PMUs) can all be programmed to trigger
frequent interrupts to preempt the shielded execution with
high frequency.
Not only can privileged side-channel attackers trigger more
frequent Primes and Probes by instructing hardware inter-
rupt controllers to trigger high-frequency interrupts, they
can also reduce the background noise that are major ob-
stacles in unprivileged cache side-channel attacks by, e.g.,
pinning all other processes on the system to other CPU
cores to make sure no other processes are scheduled on the
core where the attack is performed. Moreover, as the adver-
sary also has full control over the hardware conﬁguration, he
might also disable hardware features that make his cache at-
tacks challenging. For instance, by disabling hardware cache
prefetching, the attacker can considerably reduce noise in
cache-based side-channel attacks.
Whereas page-fault side channels trace the execution of
the shielded code at the page level and cache side chan-
nels trace shielded execution at cache-set granularity, it is
also conceivable that a malicious OS may combine page-level
side channels and cache-set-level side channels to trace the
execution of the shielded code at the granularity of 64-byte
cache lines, enabling much more ﬁne-grained observations
than any previously known attacks.
3.3 Threat Model
To summarize, we consider privileged side-channel attacks
against shielded execution in SGX enclaves. The operating
system is untrusted and possibly malicious, but its direct
inspection of enclave memory is prohibited by SGX. We
speciﬁcally consider a privileged side-channel attacker who
may induce page faults or trigger interrupts to preempt the
shielded execution and trace its control ﬂow or data ﬂow at
the page level or cache-line level. We assume the attacker’s
side-channel observations are noise-free and deterministic.
We also assume that the untrusted OS is willing to provide
an execution environment to shielded execution that is free
of excessive interrupts, e.g., by pinning the shielded execu-
tion to dedicated CPU cores. We consider this requirement a
contract between the operating system and the shielded ex-
ecution. Violation of the contract, detected using the meth-
ods we lay out in this paper, will result in self-termination
of the shielded execution (assuming the shielded program
is conﬁgured with policy to do so), which leads to denial-
of-service (DOS). DOS attacks are beyond the scope of the
paper, as a malicious OS can easily do so by not scheduling
the shielded execution.
3.4 Known Defenses
Closely related to D´ej`a Vu is concurrent research by Shih
et al. [44]. Their solution, called T-SGX, works by compiling
the enclave application into a collection of TSX transactions,
so that page faults are handled by the transaction abort
handler ﬁrst, before trapping into the kernel, eﬀectively hid-
ing faulting addresses from the kernel. A side eﬀect is that
exceptions and interrupts are detectable (by causing these
transactions to abort). Doing so, however, requires detailed
static analysis and a number of program transformations
to dissect the enclave program into short transactions sub-
ject to hardware-speciﬁc constraints (e.g., that its write and
read sets ﬁt into the L1 or L3 caches, respectively). These
larger write and read sets will tend to cause more transaction
aborts than our simple reference-clock code. And, perhaps
most importantly, T-SGX precludes the use of TSX for its
intended purpose: eliding software locks in multithreaded
programs. Our approach is based on similar principles, but
neither requires detailed static analysis nor imposes on en-
clave programs’ other uses of TSX. Aside from T-SGX, the
only other software-based defense known to us for page-fault
side channels involves hiding the pattern of page accesses
from the untrusted OS, which addresses only the page-fault
side channel (versus also cache-based side-channels lever-
aging interrupts), has been demonstrated only on crypto-
graphic libraries, and required manual program annotation
to achieve reasonable overheads [45].
4. ATTACK DETECTION THROUGH TIMED
EXECUTION
As discussed in Sec. 3, a signiﬁcant vantage point that a
privileged attacker has is the ability to frequently preempt
the shielded execution in enclaves, resulting in unexpected
enclave exits—i.e., Asynchronous Enclave Exits (AEXs) in
SGX—that the untrusted OS can observe. While not ev-
ery AEX is necessarily indicative of an attack, a higher fre-
quency of AEXs than normal, particularly at certain points
in an execution, can serve as a signature for such an at-
tack. Therefore, we aim to detect AEXs as an indicator of
side-channel attacks.
This seemingly simple task in practice is very challenging:
Shielded execution is not notiﬁed by CPU hardware when
AEXs occur. Because the shielded program cannot rely on
the untrusted OS for such information, there is no reliable
source that allows the shielded program to detect AEXs.
Therefore, the only viable solution is to detect them itself.
D´ej`a Vu does so by implementing a trustworthy reference
clock to measure the execution time of its application thread
in the enclave and compare the execution time of its steps
with their normal execution times to detect whether enclave
exits occurred and, if so, during which steps they occurred.
We design a mechanism that embeds time measurement
into the program’s execution—the shielded program will pe-
riodically check a reliable clock to measure its own execution
time with ﬁne granularity. If during any period of time, the
10execution time deviates from the expectation by a threshold,
the shielded application program obtains evidence of AEXs
during its execution. To make the scheme secure, the time
measurement code must be executed inside the enclave. For
the moment, assume that there is a trustworthy clock inside
the enclave for time measurement. (As we will discuss in
the next section, such an assumption is not easy to satisfy.)
D´ej`a Vu statically instruments enclave programs at com-
pile time to incorporate time-measurement code that is used
to detect variations in the execution times of execution paths
in the instrumented enclave programs due to both page
faults and interrupts (and, indeed, any AEXs). The key in-
sight of D´ej`a Vu is that by injecting the time-measurement
code at the basic-block level in the control-ﬂow graph (CFG),
the ﬁnal compiled binary code, when run inside the enclave,
will repeatedly reference a real-time clock during its execu-
tion along paths of the CFG.
The execution time of each path in the CFG is then mea-
sured to detect unexpected enclave exits; i.e., if the execu-
tion time is too long, then it is quite likely that an AEX
occurred during the execution. Although the design seems
straightforward,
in practice it is challenging to make the
method both eﬀective and eﬃcient. In the rest of this sec-
tion, we gradually explain the technical diﬃculties we faced
and incrementally describe our solutions to these challenges.
4.1 Sources of Time
To measure the execution time with ﬁne granularity, D´ej`a
Vu constructs a reference clock that satisﬁes the following
requirements:
• The clock provides an interface to a monotonically non-
decreasing counter.
• The counter value of the clock cannot be read or altered
by the untrusted OS.
• The clock cannot be silently stopped by the untrusted
OS without being noticed; referencing a clock that has
been stopped will return a failure indicator.
As we will show in Sec. 5, such a reference clock cannot
be achieved easily inside enclaves. We will elaborate on our
design and implementation shortly. For the sake of discus-
sion in this section, we simply assume the existence of such
a reference clock.
4.2 Selective Basic Block Instrumentation
Instrumenting all basic blocks for time measurements may
induce high performance overhead. So, D´ej`a Vu only selec-
tively instruments a subset of all basic blocks. Speciﬁcally,
D´ej`a Vu instruments only two types of basic blocks:
• multi-sinks: A multi-sink is a basic block with indegree
larger than 1 in the CFG, or that is an entry block or
exit block.
• multi-sink predecessors: A multi-sink predecessor is a ba-
sic block that has an edge to a multi-sink in the CFG.
By deﬁnition, a basic block can be both a multi-sink and
a multi-sink predecessor. D´ej`a Vu instruments multi-sinks
with the time measurement logic; speciﬁcally, the clock is
referenced to get the current value of the clock counter, and
the time increment since the last time measurement (i.e., the
last time a multi-sink was visited in the CFG) is computed
by subtracting the last clock reading from the current clock
reading. A multi-sink predecessor is not instrumented to
measure time (unless it is also a multi-sink), but instead each
is instrumented to record the fact that it was just traversed,
by logging its basic-block identiﬁer for that purpose.
Let an execution pathlet between two multi-sinks in a CFG
be a path of basic blocks between the two multi-sinks that
does not contain another multi-sink. Note that there is a
one-to-one correspondence between each multi-sink prede-
cessor in the CFG and the execution pathlet that traverses
it and reaches its successor. This is due to the fact that
only two basic blocks on an execution pathlet have inde-
grees larger than 1. As such, in the instrumentation of a
multi-sink, it suﬃces to only check the multi-sink predeces-
sor last traversed to determine which pathlet was just fol-
lowed. Therefore, a multi-sink can use the identiﬁer of this
predecessor to look up the threshold to which to compare
the time taken to traverse this pathlet to detect an AEX
during its execution.
We illustrate these basic blocks in Fig. 1. In this ﬁgure,
four types of basic blocks are shown: basic block 1 and 6 are
multi-sinks, basic block 3 and 4 are multi-sink predecessors,
and basic block 5 is both a multi-sink and a multi-sink pre-
decessor. Basic block 2 is not instrumented. Four execution
pathlets are shown in the ﬁgure: two pathlets from basic
block 1 to 5, one from 1 to 6, and one from 5 to 6. The two
pathlets between block 1 and 5 can be distinguished at basic
block 5 by checking the predecessor.
Figure 1: Examples of multi-sinks, multi-sink predecessors
and execution pathlets.
4.3 Detecting AEXs
To detect AEXs at runtime, D´ej`a Vu ﬁrst trains a classi-
ﬁer oﬄine. The classiﬁer is trained using measured execution
times (using the reference clock of Sec. 5) of each execution
pathlet, each labeled according to whether AEXs were taken
during the execution of that pathlet or not. Provided that
these times are easily separable by a threshold (and we will
show that they are), the classiﬁer will apply that threshold
to each execution time of an execution pathlet to determine
whether an AEX was taken during its execution.
As the execution time is measured per pathlet, training
of the threshold-based classiﬁer is independent of the input.
This is because indirect control ﬂow transfers (e.g., loops) do
not exist on any pathlet. The execution time without AEXs
is only dependent on the set of instructions on the pathlet
and the runtime interaction with CPU caches. In practice,
we ﬁnd the variation of execution time due to cache misses
and hits is negligible compared to the time consumed by an
AEX. When the training data is not suﬃcient to cover all
execution pathlets in the CFG, which is a limitation of any
dynamic training scheme, a default threshold is used for the
baseline classiﬁer. The default threshold is conservatively
estimated by the minimum time it needs to take for one
11AEX. We will detail our implementation of the detection
mechanisms in Sec. 6.
4.4 Responding to AEX Detections
Given the wide variety of applications, it is unlikely that
there is a single best policy for responding to AEX detections
across all of them. However, in the context of speciﬁc ap-
plications, some eﬀective response policies are evident. For
example, in the page-fault attack of Shinde et al. [45] against
libgcrypt, the attacker leveraged page faults to determine
the path taken through the ec_mul routine; since the path
taken is determined by an exponent bit, determining the
path determines the exponent bit (i.e., the signing key bit).
Under normal operation, a high rate of AEXs during a mod-
ular exponentiation routine would be very unlikely. As such,
even only a couple of detections of AEXs during the execu-
tion of this routine would already be indicative of an attack
occurring.
In response, the application could simply halt
the exponentiation to protect the key, or even change its
cryptographic key. However, our goal here is not to provide
response policies for many diﬀerent applications, but rather
to provide the underlying capability to reliably detect AEXs
during the execution of an application thread in an enclave.
5. CREATING A REFERENCE CLOCK
As discussed in Sec. 4, the central innovation in D´ej`a Vu
is in how it constructs a reference clock with which enclave
logic can measure execution of pathlets of the application
thread in the enclave, in order to determine whether the ap-
plication thread incurs page faults. While numerous facili-
ties exist on a computer platform to support measuring exe-
cution time, unfortunately none of them work in our threat
model:
• Operating system clocks: Operating systems provide ﬁne-
grained software clocks, such as clock_gettime() and
gettimeofday(), but as they are all maintained by the
untrusted OS kernel, none of them can be trusted to pro-
vide faithful measurement of the passage of time.
• Hardware clocks and timers: Fine-grained hardware time
stamp counters can be accessed from userspace through
the rdtsc instruction. However, this instruction can be
emulated by the operating system so that the returned
value is controlled by the untrusted OS [2]. In addition,
the current SGX implementation, SGX v1.0, does not
support running rdtsc instructions inside enclaves. Sim-
ilarly, APIC timers and performance counters may also
provide ﬁne-grained time measurement by delivering in-
terrupts at speciﬁc time intervals. However, they can be
controlled by the malicious OS.
• Remote clocks: The enclave could communicate through
a secure channel (e.g., over TLS/SSL) to a remote timing
facility. However, since the IP stack is still maintained
by the untrusted OS, requests to remote clocks can be
arbitrarily delayed, and without a local clock reference,
the enclave program has no way to validate whether the
returned value from the remote clock is recent.
As discussed in Sec. 1, we therefore implement our refer-
ence clock using a separate thread in the SGX enclave, i.e.,
in which progress of the application thread is measured by
progress of the reference-clock thread. We ﬁrst reﬁne our
goals for our clock implementation in Sec. 5.1 and then de-
scribe its design in Sec. 5.2–5.4.
5.1 Design Goals
Denote the value of our reference clock at real time t by
C(t). Our goal is to implement a clock that behaves as
follows for any t1 ≥ t0:
(cid:22) fmin × (t1 −t0)
v
(cid:23) ≤ C(t1)−C(t0) ≤(cid:22) fmax × (t1 −t0)
v
(cid:23) (1)
Here, v is a parameter to our algorithm that is the num-
ber of CPU cycles that deﬁnes a “clock tick”. fmin and
fmax are the minimum and maximum CPU core frequen-
cies (GHz), respectively, to which the untrusted OS can set
the core running the reference-clock thread. fmin and fmax
can be obtained from processor speciﬁcations. The fact that
the untrusted OS can manipulate the frequency of the CPU