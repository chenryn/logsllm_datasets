### 第二部分 文本过滤

#### 7.1 使用句点匹配单字符
句点“.”可以匹配任意单个字符。例如，如果要匹配一个以 "beg" 开头，中间夹一个任意字符的字符串，可以表示为 `beg.n`。句点可以出现在字符串中的任何位置。

在 `ls -l` 命令中，可以用句点来匹配特定权限：
```
...x...x...x
```
这种格式用于匹配用户、用户组及其他组成员的执行权限。

假设正在过滤一个文本文件，并要求前4个字符之后是 "XC"，匹配操作如下：
```
....XC....
```
这表示前4个字符可以是任意字符，第5和第6个字符必须是 "XC"，最后4个字符也可以是任意字符。

注意，“.”允许匹配ASCII集中任意字符，无论是字母还是数字。

#### 7.2 在行首以^匹配字符串或字符序列
符号 `^` 只能在一行的开头进行匹配。例如，在 `ls -l` 命令中，每行的第一个字符如果是 `d`，则代表一个目录。因此，可以使用 `^d` 来匹配所有目录。

回到脚本（1），使用 `^001` 将匹配每行开始为 "001" 的字符串或单词：
```
^001
```

可以将多种模式结合使用，例如：
```
^....4XC....
```
这表示在每行开始处，匹配任意3个字符，后跟 "4XC"，最后再匹配任意4个字符。`^` 在正则表达式中非常常用，因为很多抽取操作通常从行首开始。

如果要在行首第4个字符为 "1" 的情况下进行匹配，可以表示为：
```
^...1
```

如果行首前4个字符为 "comp"，并且后面紧跟两个任意字符并以 "ing" 结尾，可以表示为：
```
^comp..ing
```

#### 7.3 在行尾以$匹配字符串或字符
符号 `$` 与 `^` 相反，它在行尾进行匹配。例如，要匹配以 "trouble" 结尾的所有行，可以使用：
```
trouble$
```

类似地，使用 `1d$` 返回每行以 "1d" 结尾的所有字符串：
```
1d$
```

如果要匹配所有空行，可以执行以下操作：
```
^$
```
这表示匹配行首和行尾之间没有任何内容的行，即空行。

如果只返回包含一个字符的行，可以使用：
```
^.$
```
这表示在行首和行尾之间有一个任意字符。

如果要在行尾匹配单词 "jet01"，可以表示为：
```
jet01$
```

#### 7.4 使用*匹配字符串中的单字符或其重复序列
特殊字符 `*` 用于匹配某个字符或字符串的零次或多次出现。例如：
```
comp*u*t
```
这将匹配 "u" 出现一次或多次的情况。

另一个例子：
```
10133*
```
这将匹配 "3" 出现零次或多次的情况。

#### 7.5 使用\屏蔽一个特殊字符的含义
有时需要查找包含特殊字符的字符串。为了屏蔽这些特殊字符的含义，可以在它们前面加上反斜杠 `\`。例如：

- 匹配包含句点 `.` 的各行：
  ```
  \.
  ```

- 匹配包含 `^` 的各行：
  ```
  \^
  ```

- 匹配以 `*.pas` 结尾的所有文件：
  ```
  \*\.pas
  ```

#### 7.6 使用[]匹配一个范围或集合
方括号 `[ ]` 用于匹配特定字符或字符集。可以使用逗号分隔不同的字符，但不是强制性的。使用连字符 `-` 表示一个字符范围。

- 匹配任意一个数字：
  ```
  [0123456789]
  ```
  或简化为：
  ```
  [0-9]
  ```

- 匹配任意小写字母：
  ```
  [a-z]
  ```

- 匹配任意字母：
  ```
  [A-Za-z]
  ```

- 匹配任意字母或数字：
  ```
  [A-Za-z0-9]
  ```

- 匹配以 "s" 开头，中间有一个任意字母，以 "t" 结尾的单词：
  ```
  s[a-zA-Z]t
  ```

- 匹配 "Computer" 或 "computer"：
  ```
  [Cc]omputer
  ```

- 匹配以 "o" 或 "u" 开头，后跟任意字符任意次，并以 "t" 结尾的单词：
  ```
  [ou].*t
  ```

- 匹配所有包含 "system" 后跟句点的所有单词，其中 "S" 可以大写或小写：
  ```
  [Ss]ystem\.
  ```

- 匹配所有非字母型字符：
  ```
  [^a-zA-Z]
  ```

- 匹配所有非数字型字符：
  ```
  [^0-9]
  ```

#### 7.7 使用\{\}匹配模式结果出现的次数
使用 `{}` 可以指定模式出现的次数。有三种形式：

- `pattern{n}`：匹配模式出现 n 次。
- `pattern{n,}`：匹配模式出现至少 n 次。
- `pattern{n,m}`：匹配模式出现 n 到 m 次之间。

- 匹配字母 "A" 出现两次，并以 "B" 结尾：
  ```
  A{2}B
  ```

- 匹配 "A" 至少出现4次：
  ```
  A{4,}B
  ```

- 匹配 "A" 出现2到4次之间：
  ```
  A{2,4}B
  ```

- 从下述列表中抽取代码，格式如下：前4个字符是数字，接下来是 "xx"，最后4个也是数字：
  ```
  [0-9]{4}XX[0-9]{4}
  ```

#### 7.8 小结
在 shell 编程中，熟练掌握正则表达式可以使脚本编写更加高效。通过学习和使用正则表达式中的基本特殊字符，可以大大简化文本处理任务。