polynomial approximations used in the rejection sampling step can assume qD ≈ qs = 264.
Lemma 4.2 (Condition of the relative error ([35])). Assume that Supp(D′) = Supp(D) and
that the cryptosystem using D provides λ + 1 ≤ 256 bits of security. For qD = 278 (resp. qD = 264),
the replacement of D by a distribution D′ satisfying
(resp. ≤ 2−37)
(3)
(cid:12)(cid:12)(cid:12)D − D′
D
(cid:12)(cid:12)(cid:12) ≤ 2−45
ensures at least λ bits of security.
The proof that directly follows [35] is in Appendix B.1. We denote by K the exponent in Equation
3. This parameter represents the quality of the approximation using the relative precision. Let us
introduce the notion of polynomial approximation of a distribution. This is a particular case where
D′ is a polynomial.
Definition 4.3. We denote by P I
f
∀x ∈ I ,
a polynomial that satisfies
f (x) − f (x)
f (x)
f (x)
f (x) − 1
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) =
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) P I
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) P I
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)  K i.e. ∥Π − 1∥∞ < 2−K and set PR =Π · exp(cid:16) .2σ 2
(cid:17)
.
.
(2). In order to obtain integer coefficients, we then minimize the precision loss on the approxima-
tion and operate a rounding of PR using lattice reduction. Concretely, to get an approximation of
24
exp(cid:16) .2σ 2
in a Euclidean lattice that represents the elements in Z2η[x] · exp(cid:16) −x
(cid:17) with a polynomial in Z[x], the float coefficients must be rounded into integers of size η
(cid:17). In this objective, let us
(introduced earlier in this Section 4.2). In a nutshell, the idea is to round PR with its closest element
2σ 2
create an Euclidean lattice with the following basis
(cid:16)2−η · xi · exp(cid:16) −x
(cid:17)(cid:17)
B1 =
2
2σ
i∈[γ] .
Our notion of closeness still refers to the Sobolev norm, which is an unusual norm for Euclidean
lattices. The lattice reduction must be adapted to use Sobolev norm (using Gram matrix correspond-
ing to Sobolev inner product). Then, this lattice can be LLL-reduced9 with respect to the Sobolev
2 norm. And a Babai rounding of the polynomial Π with respect to the same Sobolev H
2 norm
H
gives a rounded element denoted ΠZ. The quality of the rounding can be evaluated as
κ
(cid:17)
.
(cid:16)√
round(γ , η) = − log2
2 ·(cid:12)(cid:12)ΠZ −Π
(cid:12)(cid:12)S
(cid:17) ∈ Z2η,γ[x].
P I1exp =ΠZ · exp(cid:16) .2σ 2
≤(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) P I1
(cid:12)(cid:12)(cid:12)P I1
(cid:17)
exp−exp(cid:16)
exp(x)−exp(cid:16) x
(cid:12)(cid:12)(cid:12)exp(cid:16) x
(cid:17)(cid:12)(cid:12)(cid:12)
exp(cid:16)
(cid:17)
≤ ∥ΠZ −Π∥∞ + ∥Π − 1∥∞
≤ √2 · |ΠZ −Π|S +
= 2−κ(γ) + 2−κround(γ ,η)
≤ 2−K .
(cid:17)(cid:12)(cid:12)(cid:12)
.
2σ 2
.
2σ 2
2σ 2
2σ 2
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)∞ = ∥ΠZ − 1∥∞
√2 · |Π − 1|S
Finally, η must be chosen and the degree γ can be modified s.t.
< 2−K .
Hence, the following polynomial appears as an approximation
2−κ(γ) + 2−κround(γ ,η)
whose quality can be checked from Equation (5):
∀x ∈ I1,
4.3 Polynomial approximation of the hyperbolic cosine
The above method to approximate exp(cid:16) .2σ 2
(cid:17) on I1 can be applied to approximate cosh(cid:16) .2σ 2
(cid:104)− 2B2σ
(cid:17) on I2.
(cid:105) ≈ [−5534960, 5534960] for BLISS-I. Due
(cid:105) ≈ [0, 5534960]
(cid:104)0,
2B2σ
α
α ,
However, the interval I2 is larger, namely I2 =
to the parity of the hyperbolic cosine, the study on I2 can be reduced to I2 =
for BLISS-I. A direct application gives around 48 coefficients for the integer polynomial (see
Appendix B.4 for the polynomial P I2
cosh obtained with a direct approximation). This approximation
is used for the masking countermeasure (we refer to Section 5 in the supplementary material for
details). However, in constant time, shifting the interval with multiplications is not costly, so we
2 ln(2), we define t as the remainder of
present an optimization in the sequel. For x ∈ I2, let c = 2σ
the following Euclidean division
2B2σ
α
t(x) = x −(cid:108)x
(cid:109)
c.
c
9Using BKZ for more precise reduction was not relevant for the sizes manipulated. Besides, unlike for LLL, there is no
function for BKZ that allows to give the Gram matrix as input.
25
By definition, t(x) belongs in I3 := [−c, 0]. Thus, we apply all the following shifts.
c ⌋ exp(cid:16) t(x)
(cid:17)
2σ 2
.
= 2⌊ x
exp(cid:16) x
2σ 2
(cid:17)
= exp(cid:16) ⌊ x
c ⌋c
2σ 2
(cid:17) · exp(cid:16) t(x)
2σ 2
(cid:17)
We thus define P I2
cosh as
2⌊ x
c ⌋ · P I3exp (t (x)) + 2−⌊ x
c ⌋ · P I3exp (−t (x))
where P I3exp is the approximation of the exp(cid:16) .2σ 2
cosh(x) =
P I2
2
(cid:17) on I3 as obtained.
Remark 3. Since the difference between I1 and I3 is small, we only compute P I3exp for both. Indeed,
since I1 ⊂ I3, P I3exp satisfies both approximations.
Lemma 4.6. If P I3exp is a precision K approximation then, P I2
Computations are provided in Section B.3. Note that the factor 2⌊ x
constant time in a fast way because(cid:4) x
(cid:5) ≤ 86. Namely, it consists in at most 86 shifts.
cosh is a precision (K-1) approximation.
c ⌋ can be computed exactly in
c
4.4 Bit precision of the inputs and intermediate values
Lemma 4.2 imposes K ≥ 45 for the initial Gaussian sampling, and ≥ 37 for the final rejection
sampling in BLISS. In order to account for the slight loss of precision as part of the fixed point
evaluation of the polynomials using Horner’s rule, we need to take slightly more precise values:
we verify that K = 48 for Gaussian sampling (resp. K = 40 for rejection sampling) suffice with
more than one bit of margin (one could use general error bounds for Horner such as [24, Eq. (5.3)],
but since our evaluations occur on small integer intervals, it is easy to check their precision by
exhausting the intervals).
For the constant time implementation, we also face a precision issue for applying Lemma 4.6. For
an implementation with 64 bits integers, the value c can be stored with at most 64−log(x2) = 16 bits
(cid:17) is not exactly equal to 2. To preserve Lemma 4.6’s K − 1 bit security,