### Parallel Evaluation of Countermeasures

Their evaluation of the countermeasures was limited to their specific attack, and the results indicate that the countermeasures provide improved resistance against it. Hintz [9] discussed a simple attack for identifying which of five popular web pages was visited over a single-hop proxy service called SafeWeb. The proposed attack does not require exact knowledge of web request sizes, but there is limited evaluation, and it remains unclear how the attack would perform with larger privacy sets.

### Bissias et al. [1]

Bissias et al. [1] demonstrated a weaker adversary than Sun et al. [15], which could observe an SSH tunnel and view only the length, direction, and timing of each ciphertext transmitted, rather than web page objects. They used cross-correlation to determine webpage similarity, a metric commonly used for evaluating the similarity of two time series. Their performance was worse than the classifiers we consider, and they did not explore any countermeasures.

### Liberatore and Levine [10]

Liberatore and Levine [10] showed that it is possible to infer the contents of an HTTP transaction encapsulated in an SSH connection by observing only encrypted packet lengths and the directions of unordered packets. We provided a detailed description of their classifier in Section III, and we use their publicly-available dataset in our analyses. They quantified the effectiveness of several countermeasures, including Linear, Exponential, Mice-Elephants, and Pad to MTU padding schemes, to protect against their attack. However, they only reported on a privacy set size of \( k = 1000 \). These results highlight the positive impact of some padding approaches, such as Pad to MTU, which reduced the accuracy of their proposed classifier from 68% to around 7%. We did not consider \( k = 1000 \) to ensure consistency with other datasets in our evaluation, but based on observed trends, we expect, for example, the VNG++ classifier to achieve significantly better than 7% at \( k = 1000 \) (c.f., Figure 9).

### Herrmann et al. [8]

Herrmann et al. [8] collected encrypted traces from four different types of single-hop encryption technologies and two multi-hop anonymity networks. We use a portion of their dataset for our analyses. They were the first to suggest the use of a multinomial naive Bayes classifier for traffic classification that examines normalized packet counts. A discussion of their classifier was given in Section III. Their evaluation of countermeasures was restricted to application-layer countermeasures.

### Panchenko et al. [14]

Panchenko et al. [14] presented a support vector machine (SVM) classifier as an improvement upon the work of Herrmann et al. [8]. We discussed details of the Panchenko classifier in Section III. They applied it to Tor [6] traffic in both closed-world and open-world settings, showing good accuracy, though not as high as the classifiers we consider. Tor's encryption mechanisms already obfuscate some information about plaintext lengths, making it generally harder to classify. They did not report on their classifier's efficacy against the countermeasures we consider.

### Traffic Morphing [22]

In an effort to minimize overhead incurred by previously suggested padding schemes, Wright et al. proposed the notion of traffic morphing [22]. Their countermeasures can minimize overhead while still making one web page "look" like another with respect to specific features. As Wright et al. suggested [22, Section 4.1], and Lu et al. later confirmed with their experimental evaluation [11], traffic morphing is only effective when the attacker restricts attention to the same feature(s) targeted by the morphing routine. Our results indicate that attackers can still succeed even when traffic morphing is used to ensure the normalized distribution of packet sizes is similar to some target web page.

### HTTPOS [12]

HTTPOS, proposed by Luo et al. [12], uses a number of client-side mechanisms that take advantage of existing HTTP functionality to add noise to encrypted web traffic. For example, HTTPOS randomizes HTTP GET requests by adding superfluous data to headers and utilizing HTTP byte range functionality to request subsets of data non-sequentially. They evaluate their countermeasure in the presence of four existing classifiers [1, 3, 10, 15] and show that HTTPOS is effective against all of them. We do not consider these kinds of application-layer mechanisms, and indeed, our results suggest that such countermeasures may be better positioned to defend against web page identification attacks.

### Concluding Discussion

Although significant previous work has investigated TA countermeasures, specifically preventing website identification attacks, the results were largely incomparable due to differing experimental methodologies and datasets. Our work synthesizes and expands upon previous ones, providing sharper answers to central questions:

1. **Do TA countermeasures prevent website fingerprinting?**
   - None of the nine countermeasures considered here prevents the kind of website fingerprinting addressed by prior works [8, 10, 14, 22]. From a security perspective, this setting is conservative, making several simplifying assumptions. Nevertheless, our negative results suggest that one should not rely solely on these countermeasures to prevent website fingerprinting attacks.

2. **Do TA attacks require individual packet lengths?**
   - No. We implemented three coarse-feature classifiers: one using only total time, one using only total per-direction bandwidth, and one tracking only data bursts (the VNG classifier). These did not make direct use of individual packet lengths or packet counts as features, yet attained high accuracy against the countermeasures. This highlights that masking fine-grained information is insufficient unless it also hides telling large-scale features.

3. **Does the classification engine matter?**
   - Our experiments suggest that the features, rather than the underlying classification engine, are crucial. We implemented a naive Bayes-based classifier using the same features as the SVM-based Panchenko et al. classifier, and our experiments show that these two perform almost identically.

4. **Does the privacy-set size (\( k \)) matter?**
   - For the considered setting, it seems not to matter much. When no countermeasure is used, attacks can achieve roughly the same accuracy for \( k = 2 \) through \( k = 775 \). When countermeasures are applied, the best classifier's accuracy drops slowly as \( k \) increases, suggesting that the countermeasures do obfuscate some features that can improve accuracy. At the largest \( k \), the best classifiers offer better than 60% accuracy against all of the countermeasures.

### Future Work

Our work paints a negative picture of the usefulness of efficient, low-level TA countermeasures against website-fingerprinting attacks. However, future work could investigate more detailed modelings of real-world traffic and applications of TA countermeasures beyond website fingerprinting. This may uncover settings where some countermeasures are more successful. Additionally, coarse features (e.g., bandwidth) that are difficult to obfuscate efficiently at the level of individual packets might be better handled at the application layer. Previous works [8, 12] suggest promising initial evaluations of application-layer countermeasures, and future work could provide more extensive investigations of such countermeasures.