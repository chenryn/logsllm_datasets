# DEF CON 24: Side-Channel Attacks on High-Security Electronic Safe Locks

**Presenter Email:** [PI:EMAIL]

## Background: Electronic Safe Locks

### Overview
- **In Scope:** Decent, certified locks (e.g., UL Type 1 High-security electronic lock)
- **Out of Scope:** Cheap, poor-quality, non-certified locks

### Sargent & Greenleaf 6120-332
- **System Model:**
  - **Outside of Safe:**
    - Battery
    - Keypad
  - **Inside of Safe:**
    - MCU (Microcontroller)
    - EEPROM
    - Bolt motor
    - Lock
    - Buzzer
    - Steel safe door with a ¼” hole for wires

- **Circuit Model:**
  - **Data Line Voltage:**
    - 0 volts: Higher current consumption (bit = 0)
    - 5 volts: Lower current consumption (bit = 1)

  - **Power Analysis:**
    - 1 nibble per keycode digit
    - Only the lower byte in each EEPROM word is used

- **Demo:**
  - **S&G Titan PivotBolt:**
    - **Timing Attack:**
      - Captures the entire six-digit keypad sequence before starting comparison to the key from EEPROM.
      - Pseudocode:
        ```cpp
        bool check_code(int enteredCode[6], int actualCode[6]) {
            for (int digit = 0; digit < 6; digit++) {
                if (enteredCode[digit] != actualCode[digit]) {
                    return false;
                }
            }
            return true;
        }
        ```
    - **EEPROM Write Example:**
      - Starting value: 0xA4
      - Write value: 0x1C
      - Time from start of write:
        - 400 μs: 0xA4
        - 2500 μs: 0x??
        - 3000 μs: 0x00
        - 500 μs: 0x??

    - **Interrupt EEPROM Write:**
      - 2.7V brownout
      - 600 μs from detection
      - 1.1 ms from write start

- **The Hack: Custom PCB**
  - **Components:**
    - Micro-ammeter
    - Power supply/control for the lock
    - Keypress simulator

  - **Algorithm:**
    - Try all values for the first digit (oversample to reduce noise)
    - Longest time delay indicates the correct value
    - Repeat for digits 2 through 5
    - Every fifth attempt, clear the lockout counter
    - Brute-force the sixth digit (only 10 attempts)

- **Demo:**
  - Demonstrates the effectiveness of the hack.

## Conclusions
- **Applicability and Mitigations:**
  - **Power Analysis:**
  - **Timing Attack:**
  - **EEPROM Manipulation:**
  - Burglars are unlikely to use this method due to its complexity.

## Additional Information
- **Opening a Lock:**
  - User enters code on keypad
  - MCU checks the code
  - MCU drives the motor to free the bolt if the code is correct

- **Safe Lock Certification:**
  - **In Scope:**
    - UL Type 1 High-security electronic lock
  - **Out of Scope:**
    - Cheap, non-certified locks (easily brute-forced, can be "spiked" or bypassed mechanically)

- **Design Considerations:**
  - All logic resides inside the safe
  - Only the keypad and battery are outside the safe
  - Connection is via wires through a small hole in the door metal
  - Hardened steel plate in the lock
  - No direct access to the lock PCB possible

- **Side-Channel Attack:**
  - **Definition:**
    - Gaining knowledge about the state of a device through unintentional information leakage
  - **Attacks Used:**
    - Power analysis
    - Timing attack
  - **Related Concept:**
    - Forcing a system into a particular state using unexpected inputs (e.g., removing power)

- **S&G 6120:**
  - **Details:**
    - UL listed Type 1 high-security electronic lock
    - Still being produced (as of at least late 2015)
    - Designed and certified around 1994
    - ST62T25C microcontroller (ST)
    - 93LC46B serial EEPROM (Microchip)
    - 9V alkaline battery located in the external keypad
    - S&G is a large, well-respected lock manufacturer

- **Keycode Storage:**
  - Keycodes stored in the clear in EEPROM
  - MCU reads/writes EEPROM via 3-wire serial ("Microwire" interface, similar to SPI)
  - Slow read/write speeds (EEPROM to MCU ~1.5 kbit/s, hundreds of milliseconds to read all data)
  - Lock reads all keycodes out of EEPROM on every attempt

- **Vulnerability:**
  - Susceptible to power analysis
  - Keycode bit values change the amount of current consumed during EEPROM read-out
  - Translate current changes into key values
  - Enter key values on keypad
  - Zero modification required
  - Zero evidence of tampering left behind (covert entry)

- **Microammeter Setup:**
  - Basic equipment required to read the code:
    - Cheap oscilloscope
    - 1x probe
    - 10Ω current-sense resistor
    - A few wires
  - No amplifier needed (set scope to 500 uV/div)

- **Notes:**
  - Final bit in each word (LSB for every even keycode digit) is shifted lower in amplitude by about 20 μA regardless of value
  - Reading the first three words is enough for the master keycode
  - Remaining words are for additional keycodes
  - Failure count written after all codes read out

- **Lesson:**
  - **Don’t store data in the clear.**

Feel free to email me with any questions: [PI:EMAIL]