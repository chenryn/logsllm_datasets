### Hash Join
A hash join is a method of joining two tables where the join attributes of the first table are loaded into a hash table, using these attributes as hash keys. The second table is then scanned, and its join attributes are used as hash keys to locate the matching rows from the first table.

### Optimizer Hints for Join Plans
The following table lists the optimizer hints that can be used to influence the query planner to use one type of join plan over another:

| Hint                | Description                            |
|---------------------|----------------------------------------|
| `USE_HASH(table [...])` | Use a hash join for the specified table(s). |
| `NO_USE_HASH(table [...])` | Do not use a hash join for the specified table(s). |
| `USE_MERGE(table [...])` | Use a merge sort join for the specified table(s). |
| `NO_USE_MERGE(table [...])` | Do not use a merge sort join for the specified table(s). |
| `USE_NL(table [...])` | Use a nested loop join for the specified table(s). |
| `NO_USE_NL(table [...])` | Do not use a nested loop join for the specified table(s). |

### Examples

#### Example 1: Using the `USE_HASH` Hint
In this example, the `USE_HASH` hint is used for a join on the `pgbench_branches` and `pgbench_accounts` tables. The query plan shows that a hash join is used by creating a hash table from the join attribute of the `pgbench_branches` table.

```sql
EXPLAIN SELECT /*+ USE_HASH(b) */ b.bid, a.aid, a.abalance 
FROM pgbench_branches b, pgbench_accounts a 
WHERE b.bid = a.bid;
```

**Query Plan:**
```
Hash Join (cost=21.45..81463.06 rows=2014215 width=12)
  Hash Cond: (a.bid = b.bid)
  -> Seq Scan on pgbench_accounts a (cost=0.00..53746.15 rows=2014215 width=12)
  -> Hash (cost=21.20..21.20 rows=20 width=4)
    -> Seq Scan on pgbench_branches b (cost=0.00..21.20 rows=20 width=4)
(5 rows)
```

#### Example 2: Using the `NO_USE_HASH` Hint
Next, the `NO_USE_HASH(a b)` hint forces the planner to use an approach other than a hash join. The result is a merge join.

```sql
EXPLAIN SELECT /*+ NO_USE_HASH(a b) */ b.bid, a.aid, a.abalance 
FROM pgbench_branches b, pgbench_accounts a 
WHERE b.bid = a.bid;
```

**Query Plan:**
```
Merge Join (cost=333526.08..368774.94 rows=2014215 width=12)
  Merge Cond: (b.bid = a.bid)
  -> Sort (cost=21.63..21.68 rows=20 width=4)
    Sort Key: b.bid
    -> Seq Scan on pgbench_branches b (cost=0.00..21.20 rows=20 width=4)
  -> Materialize (cost=333504.45..343575.53 rows=2014215 width=12)
    -> Sort (cost=333504.45..338539.99 rows=2014215 width=12)
      Sort Key: a.bid
      -> Seq Scan on pgbench_accounts a (cost=0.00..53746.15 rows=2014215 width=12)
(9 rows)
```

#### Example 3: Using the `USE_MERGE` Hint
Finally, the `USE_MERGE` hint forces the planner to use a merge join.

```sql
EXPLAIN SELECT /*+ USE_MERGE(a) */ b.bid, a.aid, a.abalance 
FROM pgbench_branches b, pgbench_accounts a 
WHERE b.bid = a.bid;
```

**Query Plan:**
```
Merge Join (cost=333526.08..368774.94 rows=2014215 width=12)
  Merge Cond: (b.bid = a.bid)
  -> Sort (cost=21.63..21.68 rows=20 width=4)
    Sort Key: b.bid
    -> Seq Scan on pgbench_branches b (cost=0.00..21.20 rows=20 width=4)
  -> Materialize (cost=333504.45..343575.53 rows=2014215 width=12)
    -> Sort (cost=333504.45..338539.99 rows=2014215 width=12)
      Sort Key: a.bid
      -> Seq Scan on pgbench_accounts a (cost=0.00..53746.15 rows=2014215 width=12)
(9 rows)
```

#### Example 4: Three-Table Join with Hash Joins
In this three-table join example, the planner first performs a hash join on the `pgbench_branches` and `pgbench_history` tables, then finally performs a hash join of the result with the `pgbench_accounts` table.

```sql
EXPLAIN SELECT h.mtime, h.delta, b.bid, a.aid 
FROM pgbench_history h, pgbench_branches b, pgbench_accounts a 
WHERE h.bid = b.bid AND h.aid = a.aid;
```

**Query Plan:**
```
Hash Join (cost=86814.29..123103.29 rows=500000 width=20)
  Hash Cond: (h.aid = a.aid)
  -> Hash Join (cost=21.45..15081.45 rows=500000 width=20)
    Hash Cond: (h.bid = b.bid)
    -> Seq Scan on pgbench_history h (cost=0.00..8185.00 rows=500000 width=20)
    -> Hash (cost=21.20..21.20 rows=20 width=4)
      -> Seq Scan on pgbench_branches b (cost=0.00..21.20 rows=20 width=4)
  -> Hash (cost=53746.15..53746.15 rows=2014215 width=4)
    -> Seq Scan on pgbench_accounts a (cost=0.00..53746.15 rows=2014215 width=4)
(9 rows)
```

#### Example 5: Combining Merge and Hash Joins
This plan is altered by using hints to force a combination of a merge sort join and a hash join.

```sql
EXPLAIN SELECT /*+ USE_MERGE(h b) USE_HASH(a) */ h.mtime, h.delta, b.bid, a.aid 
FROM pgbench_history h, pgbench_branches b, pgbench_accounts a 
WHERE h.bid = b.bid AND h.aid = a.aid;
```

**Query Plan:**
```
Hash Join (cost=152583.39..182562.49 rows=500000 width=20)
  Hash Cond: (h.aid = a.aid)
  -> Merge Join (cost=65790.55..74540.65 rows=500000 width=20)
    Merge Cond: (b.bid = h.bid)
    -> Sort (cost=21.63..21.68 rows=20 width=4)
      Sort Key: b.bid
      -> Seq Scan on pgbench_branches b (cost=0.00..21.20 rows=20 width=4)
    -> Materialize (cost=65768.92..68268.92 rows=500000 width=20)
      -> Sort (cost=65768.92..67018.92 rows=500000 width=20)
        Sort Key: h.bid
        -> Seq Scan on pgbench_history h (cost=0.00..8185.00 rows=500000 width=20)
  -> Hash (cost=53746.15..53746.15 rows=2014215 width=4)
    -> Seq Scan on pgbench_accounts a (cost=0.00..53746.15 rows=2014215 width=4)
(13 rows)
```

### Global Hints
Hints can also be applied to tables within views or subqueries. When specifying a hint that applies to a table within a view, the view and table names are given in dot notation within the hint argument list.

#### Syntax
```sql
hint(view.table)
```

#### Parameters
- **hint**: Any of the hints in Table 2-2 or Table 2-3.
- **view**: The name of the view containing the table.
- **table**: The table on which the hint is to be applied.

#### Example
A view named `tx` is created from the three-table join of `pgbench_history`, `pgbench_branches`, and `pgbench_accounts`.

```sql
CREATE VIEW tx AS 
SELECT h.mtime, h.delta, b.bid, a.aid 
FROM pgbench_history h, pgbench_branches b, pgbench_accounts a 
WHERE h.bid = b.bid AND h.aid = a.aid;
```

The query plan produced by selecting from this view is shown below:

```sql
EXPLAIN SELECT * FROM tx;
```

**Query Plan:**
```
Hash Join (cost=86814.29..123103.29 rows=500000 width=20)
  Hash Cond: (h.aid = a.aid)
  -> Hash Join (cost=21.45..15081.45 rows=500000 width=20)
    Hash Cond: (h.bid = b.bid)
    -> Seq Scan on pgbench_history h (cost=0.00..8185.00 rows=500000 width=20)
    -> Hash (cost=21.20..21.20 rows=20 width=4)
      -> Seq Scan on pgbench_branches b (cost=0.00..21.20 rows=20 width=4)
  -> Hash (cost=53746.15..53746.15 rows=2014215 width=4)
    -> Seq Scan on pgbench_accounts a (cost=0.00..53746.15 rows=2014215 width=4)
(9 rows)
```

The same hints that were applied to this join can be applied to the view as follows:

```sql
EXPLAIN SELECT /*+ USE_MERGE(tx.h tx.b) USE_HASH(tx.a) */ * FROM tx;
```

**Query Plan:**
```
Hash Join (cost=152583.39..182562.49 rows=500000 width=20)
  Hash Cond: (h.aid = a.aid)
  -> Merge Join (cost=65790.55..74540.65 rows=500000 width=20)
    Merge Cond: (b.bid = h.bid)
    -> Sort (cost=21.63..21.68 rows=20 width=4)
      Sort Key: b.bid
      -> Seq Scan on pgbench_branches b (cost=0.00..21.20 rows=20 width=4)
    -> Materialize (cost=65768.92..68268.92 rows=500000 width=20)
      -> Sort (cost=65768.92..67018.92 rows=500000 width=20)
        Sort Key: h.bid
        -> Seq Scan on pgbench_history h (cost=0.00..8185.00 rows=500000 width=20)
  -> Hash (cost=53746.15..53746.15 rows=2014215 width=4)
    -> Seq Scan on pgbench_accounts a (cost=0.00..53746.15 rows=2014215 width=4)
(13 rows)
```

### Applying Hints to Subqueries
Hints can also be applied to tables within subqueries. In the following example, employees and their managers are listed by joining the `emp` table with a subquery of the `emp` table identified by the alias `b`.

```sql
SELECT a.empno, a.ename, b.empno "mgr empno", b.ename "mgr ename" 
FROM emp a, (SELECT * FROM emp) b 
WHERE a.mgr = b.empno;
```

**Result:**
```
 empno | ename  | mgr empno | mgr ename
-------+--------+-----------+-----------
 7369  | SMITH  | 7902      | FORD
 7499  | ALLEN  | 7698      | BLAKE
 7521  | WARD   | 7698      | BLAKE
 7566  | JONES  | 7839      | KING
 7654  | MARTIN | 7698      | BLAKE
 7698  | BLAKE  | 7839      | KING
 7782  | CLARK  | 7839      | KING
 7788  | SCOTT  | 7566      | JONES
 7844  | TURNER | 7698      | BLAKE
 7876  | ADAMS  | 7788      | SCOTT
 7900  | JAMES  | 7698      | BLAKE
 7902  | FORD   | 7566      | JONES
 7934  | MILLER | 7782      | CLARK
(13 rows)
```

The plan chosen by the query planner is shown below:

```sql
EXPLAIN SELECT a.empno, a.ename, b.empno "mgr empno", b.ename "mgr ename" 
FROM emp a, (SELECT * FROM emp) b 
WHERE a.mgr = b.empno;
```

**Query Plan:**
```
Hash Join (cost=1.32..2.64 rows=13 width=22)
  Hash Cond: (a.mgr = emp.empno)
  -> Seq Scan on emp a (cost=0.00..1.14 rows=14 width=16)
  -> Hash (cost=1.14..1.14 rows=14 width=11)
    -> Seq Scan on emp (cost=0.00..1.14 rows=14 width=11)
(5 rows)
```

A hint can be applied to the `emp` table within the subquery to perform an index scan on the `emp_pk` index instead of a table scan.

```sql
EXPLAIN SELECT /*+ INDEX(b.emp emp_pk) */ a.empno, a.ename, b.empno "mgr empno", b.ename "mgr ename" 
FROM emp a, (SELECT * FROM emp) b 
WHERE a.mgr = b.empno;
```

**Query Plan:**
```
Merge Join (cost=4.17..13.11 rows=13 width=22)
  Merge Cond: (a.mgr = emp.empno)
  -> Sort (cost=1.41..1.44 rows=14 width=16)
    Sort Key: a.mgr
    -> Seq Scan on emp a (cost=0.00..1.14 rows=14 width=16)
  -> Index Scan using emp_pk on emp (cost=0.14..12.35 rows=14 width=11)
(6 rows)
```

### Using the `APPEND` Optimizer Hint
By default, Advanced Server will add new data into the first available free space in a table (vacated by vacuumed records). Include the `APPEND` directive after an `INSERT` or `SELECT` command to instruct the server to bypass mid-table free space and affix new rows to the end of the table. This optimizer hint can be particularly useful when bulk loading data.

#### Syntax
```sql
/*+ APPEND */
```

#### Example
The following command, compatible with Oracle databases, instructs the server to append the data in the `INSERT` statement to the end of the `sales` table:

```sql
INSERT /*+ APPEND */ INTO sales VALUES (10, 10, '01-Mar-2011', 10, 'OR');
```

Advanced Server supports the `APPEND` hint when adding multiple rows in a single `INSERT` statement:

```sql
INSERT /*+ APPEND */ INTO sales VALUES
(20, 20, '01-Aug-2011', 20, 'NY'),
(30, 30, '01-Feb-2011', 30, 'FL'),
(40, 40, '01-Nov-2011', 40, 'TX');
```

The `APPEND` hint can also be included in the `SELECT` clause of an `INSERT INTO` statement:

```sql
INSERT INTO sales_history SELECT /*+ APPEND */ * FROM sales;
```

### Parallelism Hints
The `PARALLEL` optimizer hint is used to force parallel scanning, while the `NO_PARALLEL` optimizer hint prevents the usage of a parallel scan.

#### Syntax
```sql
PARALLEL (table [parallel_degree | DEFAULT])
NO_PARALLEL (table)
```

#### Description
Parallel scanning uses multiple background workers to simultaneously perform a scan of a table for a given query, providing performance improvement over other methods such as sequential scans.

#### Parameters
- **table**: The table to which the parallel hint is to be applied.
- **parallel_degree | DEFAULT**: 
  - `parallel_degree` is a positive integer that specifies the desired number of workers to use for a parallel scan. If specified, the lesser of `parallel_degree` and the configuration parameter `max_parallel_workers_per_gather` is used as the planned number of workers.
  - If `DEFAULT` is specified, then the maximum possible parallel degree is used.
  - If both `parallel_degree` and `DEFAULT` are omitted, the query optimizer determines the parallel degree. If the table has been set with the `parallel_workers` storage parameter, this value is used; otherwise, the maximum possible parallel degree is used.

#### Examples
The following configuration parameter settings are in effect:

```sql
SHOW max_worker_processes;
-- Output:
--  max_worker_processes
-- ----------------------
--  8
-- (1 row)

SHOW max_parallel_workers_per_gather;
-- Output:
--  max_parallel_workers_per_gather
-- ---------------------------------
--  2
-- (1 row)
```

The following example shows the default scan on the `pgbench_accounts` table. Note that a sequential scan is shown in the query plan.

```sql
SET trace_hints TO on;
EXPLAIN SELECT * FROM pgbench_accounts;
```

**Query Plan:**
```
Seq Scan on pgbench_accounts (cost=0.00..53746.15 rows=2014215 width=97)
(1 row)
```

The following example uses the `PARALLEL` hint. In the query plan, the `Gather` node, which launches the background workers, indicates that two workers are planned to be used.

```sql
EXPLAIN SELECT /*+ PARALLEL(pgbench_accounts) */ * FROM pgbench_accounts;
```

**Query Plan:**
```
Gather (cost=1000.00..244418.06 rows=2014215 width=97)
  Workers Planned: 2
  -> Parallel Seq Scan on pgbench_accounts (cost=0.00..41996.56 rows=839256 width=97)
(3 rows)
```

Now, the `max_parallel_workers_per_gather` setting is increased:

```sql
SET max_parallel_workers_per_gather TO 6;
SHOW max_parallel_workers_per_gather;
-- Output:
--  max_parallel_workers_per_gather
-- ---------------------------------
--  6
-- (1 row)
```

The same query on `pgbench_accounts` is issued again with no parallel degree specification in the `PARALLEL` hint. Note that the number of planned workers has increased to 4 as determined by the optimizer.

```sql
EXPLAIN SELECT /*+ PARALLEL(pgbench_accounts) */ * FROM pgbench_accounts;
```

**Query Plan:**
```
Gather (cost=1000.00..241061.04 rows=2014215 width=97)
  Workers Planned: 4
  -> Parallel Seq Scan on pgbench_accounts (cost=0.00..38639.54 rows=503554 width=97)
(3 rows)
```

---

Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.