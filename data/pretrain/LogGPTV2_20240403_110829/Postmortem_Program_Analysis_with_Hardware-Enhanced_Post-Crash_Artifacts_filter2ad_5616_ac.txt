tion appears, the algorithm above becomes an impractical
solution. As such, this work empirically forces a hypoth-
esis test to follow at most a recurssion depth of two. As
we will show in Section 6, this setting allows us to per-
form reverse execution not only in an efﬁcient but also
relatively effective manner.
4.1.3 Discussion
During the execution of a program, it might invoke a
system call, which traps execution into kernel space. As
we will discuss in Section 6, we do not set Intel PT to trace
execution in kernel space. As a result, intuition suggests
that the loss of execution tracing may introduce problems
to our reverse execution. However, in practice, a majority
of system calls do not incur modiﬁcation to registers and
memory in user space. Thus, our reverse execution can
simply ignore the inverse operations for those system calls.
For system calls that potentially inﬂuence the memory
footprints of a crashing program, our reverse execution
handles them as follows.
In general, a system call can only inﬂuence memory
footprints if it manipulates register values stored by the
crashing program or touches the memory region in user
space. As a result, we treat system calls in different
manners. For system calls that may inﬂuence a register
holding a value for a crashing program, our algorithm
24    26th USENIX Security Symposium
USENIX Association
...A1:mov R0, [R1]; R1 = addr1A2:mov [R2], 0x00; R2 = ??......A3:mov R3, [R4]; R4 =addr2A4:mov [R5], 0x08; R5 = ??.....................A2def: [R2]=0x0 0x00A2use: [R2] ??A2use: R2 ??A1def: R0=[R1] ??A1use: R0 ??A1use: [R1] ??A1use: R1 addr1.........A3use: R4 addr2A3use: [R4] ??A3use: R3 ??A3def: R3=[R4] ??A4use R5 ??A4use: [R5] ??A4def: [R5]=0x8 0x08.........Data ﬂowXXData ﬂowsimply introduces a deﬁnition on the use-deﬁne chain.
For example, system call read overwrites register eax
to hold its return value, and our algorithm appends deﬁ-
nition def:eax=? to the use-deﬁne chain accordingly.
Regarding the system calls that manipulate the memory
content in user space (e.g., write and recv), our al-
gorithm checks the memory regions inﬂuenced by that
call. To be speciﬁc, it attempts to identify the starting
address as well as the size of that memory region by using
the instructions executed prior to that call. This is due
to the fact that the starting address and size are typically
indicated by arguments which are handled by those in-
structions prior to the call. Following this procedure, if
our algorithm identiﬁes the size of that memory region, it
appends deﬁnitions to the chain accordingly. Otherwise,
our algorithm treats that system call as an intervening tag
which blocks the propagation through that call3. The rea-
son behind this is that a non-deterministic memory region
can potentially overlap with any memory regions in user
space.
4.2 Backward Taint Analysis
Recall that the goal of this work is to pinpoint instruc-
tions truly pertaining to a program crash. In Section 3,
we brieﬂy introduce how backward taint analysis plays
the role in achieving this goal. Here, we describe more
details.
To perform backward taint analysis, POMP ﬁrst identi-
ﬁes a sink. In general, a program crash results from two
situations – executing an invalid instruction or derefer-
encing an invalid address. For the ﬁrst situation, POMP
deems the program counter (eip) as a sink because exe-
cuting an invalid instruction indicates eip carries a bad
value. For the second situation, POMP treats a general
register as a sink because it holds a value which points to
an invalid address. Take the example shown in Figure 1.
POMP treats register eax as a sink in that the program
crash results from retrieving an invalid instruction from
the address held by register eax.
With a sink identiﬁed, POMP taints the sink and per-
forms taint propagation backward. In the procedure of
this backward propagation, POMP looks up the aforemen-
tioned use-deﬁne chain and identiﬁes the deﬁnition of the
taint variable. The criteria of this identiﬁcation is to en-
sure the deﬁnition could reach the taint variable without
any other intervening deﬁnitions. Continue the exam-
ple above. With sink eax serving as the initial taint
variable, POMP selects A19 def:eax=[ebp-0xc]
on the chain because this deﬁnition can reach taint vari-
able eax without intervention.
3Note that an intervening tag placed by a system call blocks only
deﬁnitions and uses in which a variable represents a memory access
(e.g., def:[eax] or use:[ebp]).
From the deﬁnition identiﬁed, POMP parses that def-
inition and passes the taint to new variables. Since any
variables enclosed in a deﬁnition could potentially cause
the corruption of the taint variable, the variables which
POMP selects and passes the taint to include all operands,
base and index registers (if available). For example, by
parsing deﬁnition A19 def:eax=[ebp-0xc], POMP
identiﬁes variables ebp and [ebp-0xc], and passes the
taint to both of them. It is not difﬁcult to note that such a
taint propagation strategy can guarantee POMP does not
miss the root cause of a program crash though it over-
taints some variables that do not actually contribute to the
crash. In Section 6, we evaluate and discuss the effect of
the over-tainting.
When passing a taint to a variable indicated by a mem-
ory access (e.g., [R0]), it should be noted that POMP may
not be able to identify the address corresponding to the
memory (e.g., unknown R0 for variable [R0]). Once this
situation appears, therefore, POMP halts the taint propaga-
tion for that variable because the taint can be potentially
propagated to any variables with a deﬁnition in the form
of def:[Ri] (where Ri is a register).
Similar to the situation seen in reverse execution, when
performing taint propagation backward, POMP may en-
counter a deﬁnition on the chain which intervenes the
propagation. For example, given a taint variable [R0]
and a deﬁnition def:[R1] with R1 unknown, POMP can-
not determine whether R0 and R1 share the same value
and POMP should pass the taint to variable [R1]. When
this situation appears, POMP follows the idea of the afore-
mentioned hypothesis test and examines if both variables
share the same address.
Ideally, we would like to re-
solve the unknown address through a hypothesis test so
that POMP can pass that taint accordingly. However, in
practice, the hypothesis test may fail to reject. When “fail-
to-reject” occurs, therefore, POMP over-taints the variable
in that intervening deﬁnition. Again, this can ensure that
POMP does not miss the enclosure of root cause.
5
Implementation
We have implemented a prototype of POMP for Linux 32-
bit system with Linux kernel 4.4 running on an Intel i7-
6700HQ quad-core processor (a 6th-generation Skylake
processor) with 16 GB RAM. Our prototype consists of
two major components – x a sub-system that implements
the aforementioned reverse execution and backward taint
analysis and y a sub-system that traces program execu-
tion with Intel PT. In total, our implementation carries
about 22,000 lines of C code which we will make publicly
available at https://github.com/junxzm1990/pomp.git. In
the following, we present some important implementation
details.
USENIX Association
26th USENIX Security Symposium    25
Following the design description above, we imple-
mented 65 distinct instruction handlers to perform re-
verse execution and backward taint analysis. Along with
these handlers, we also built core dump and instruction
parsers on the basis of libelf [2] and libdisasm [1],
respectively. Note that for instructions with the same se-
mantics (e.g., je, jne, and jg) we dealt with their inverse
operations in one unique handler. To keep track of con-
straints and perform veriﬁcation, we reuse the Z3 theorem
prover [5, 17].
To allow Intel PT to log execution in a correct and
reliable manner, we implemented the second sub-system
as follows. We enabled Intel PT to run in the Table of
Physical Addresses (ToPA) mode, which allows us to
store PT packets in multiple discontinuous physical mem-
ory areas. We added to the ToPA an entry that points to
a 16 MB physical memory buffer. In our implementa-
tion, we use this buffer to store packets. To be able to
track if the buffer is fully occupied, we clear the END bit
and set the INT bit. With this setup, Intel PT can signal
a performance-monitoring interrupt at the moment the
buffer is fully occupied. Considering the interrupt may
have a skid, resulting in a potential loss in PT packets,
we further allocated a 2 MB physical memory buffer to
hold those packets that might be potentially discarded. In
the ToPA, we introduced an additional entry to refer this
buffer.
At the hardware level, Intel PT lacks the capability of
distinguishing threads within each process. As a result,
we also intercepted the context switch. With this, our
system is able to examine the threads switched in and
out, and stores PT packets for threads individually. To
be speciﬁc, for each thread that software developers and
security analysts are interested in, we allocated a 32MB
circular buffer in its user space. Every time a thread is
switched out, we migrated PT packets stored in the afore-
mentioned physical memory buffers to the corresponding
circular buffer in user space. After migration, we also
reset the corresponding registers and make sure the physi-
cal memory buffers can be used for holding packets for
other threads of interest. Note that our empirical experi-
ment indicates the aforementioned 16 MB buffer cannot
be fully occupied between consecutive context switch,
and POMP does not have the difﬁculty in holding all the
packets between the switch.
Considering the Intel CPU utilizes Supervisor Mode
Access Prevention (SMAP) to restrict the access from
kernel to user space, our implementation toggles SMAP
between packet migration. In addition, we conﬁgured In-
tel PT to exclude packets irrelevant to control ﬂow switch-
ing (e.g., timing information) and paused its tracing when
execution traps into kernel space. In this way, POMP is
able to log an execution trace sufﬁciently long. Last but
not least, we introduced new resource limit PT_LIMIT
into the Linux kernel. With this, not only can software
developers and security analysts select which processes
to trace but also conﬁgure the size of the circular buffer
in a convenient manner.
6 Evaluation
In this section, we demonstrate the utility of POMP using
the crashes resulting from real-world vulnerabilities. To
be more speciﬁc, we present the efﬁciency and effective-
ness of POMP, and discuss those crashes that POMP fails
to handle properly.
6.1 Setup
To demonstrate the utility of POMP, we selected 28 pro-
grams and benchmarked POMP with their crashes result-
ing from 31 real-world PoCs obtained from Offensive
Security Exploit Database Archive [4]. Table 2 shows
these crashing programs and summarizes the correspond-
ing vulnerabilities. As we can observe, the programs se-
lected cover a wide spectrum ranging from sophisticated
software like BinUtils with lines of code over 690K
to lightweight software such as stftp and psutils
with lines of code less than 2K.
Regarding vulnerabilities resulting in the crashes, our
test corpus encloses not only memory corruption vulnera-
bilities (i. e., stack and heap overﬂow) but also common
software defects like null pointer dereference and invalid
free. The reason behind this selection is to demonstrate
that, beyond memory corruption vulnerabilities, POMP
can be generally applicable to other kinds of software
defects.
Among the 32 PoCs, 11 of them perform code injection
(e.g., nginx-1.4.0), one does return-to-libc attack
(aireplay-ng-1.2b3), and another one exploits via
return-oriented-programming (mcrypt-2.5.8). These
exploits crashed the vulnerable program either because
they did not consider the dynamics in the execution
environments (e.g., ASLR) or they mistakenly polluted
critical data (e.g., pointers) before they took over the
control ﬂow.
The remaining 18 PoCs are created
to simply trigger the defects, such as overﬂowing a
stack buffer with a large amount of random characters
(e.g., BinUtils-2.15) or causing the execution to use
a null pointer (e.g., gdb-7.5.1). Crashes caused by
these PoCs are similar to those occured during random
exercises.
6.2 Experimental Design
For each program crash shown in Table 2, we performed
manual analysis with the goal of ﬁnding out the minimum
set of instructions that truly contribute to that program
26    26th USENIX Security Symposium
USENIX Association
Program
Vulnerability
Name
Size(LoC)
CVE-ID
Type
Trace
length
Size of
mem (MB)
# of
taint
Ground
truth
Mem addr
unknown
Root
cause
Diagnose Results
coreutils-8.4
coreutils-8.4
coreutils-8.4
mcrypt-2.5.8
BinUtils-2.15
unrtf-0.19.3
psutils-p17
stftp-1.1.0
nasm-0.98.38
libpng-1.2.5
putty-0.66
Unalz-0.52
LaTeX2rtf-1.9
aireplay-ng-1.2b3
corehttp-0.5.3a
gas-2.12
abc2mtex-1.6.1
LibSMI-0.4.8
gif2png-2.5.2
O3read-0.03
unrar-3.9.3
nullhttp-0.5.0
inetutils-1.8
nginx-1.4.0
Python-2.2
0verkill-0.16
openjpeg-2.1.1
gdb-7.5.1
podofo-0.9.4
Python-2.7
poppler-0.8.4
138135
138135
138135
37439
697354
5039
1736
1559
33553
33681
90165
8546
14473
62656
914
595504
4052
80461
1331
932
17575
1849
98941
100255
416060
16361
169538
1651764
60147
906829
183535
2013-0222
2013-0223
2013-0221
2012-4409
2006-2362
NA
NA
NA
2004-1287
2004-0597
2016-2563
2005-3862
2004-2167
2014-8322
2007-4060
2005-4807
NA
2010-2891
2009-5018
2004-1288
NA
2002-1496
NA
2013-2028
2007-4965
2006-2971
2016-7445
NA
2017-5854
NA
2008-2950
Stack overﬂow
Stack overﬂow
Stack overﬂow
Stack overﬂow
Stack overﬂow
Stack overﬂow
Stack overﬂow
Stack overﬂow
Stack overﬂow
Stack overﬂow
Stack overﬂow
Stack overﬂow
Stack overﬂow
Stack overﬂow
Stack overﬂow
Stack overﬂow
Stack overﬂow