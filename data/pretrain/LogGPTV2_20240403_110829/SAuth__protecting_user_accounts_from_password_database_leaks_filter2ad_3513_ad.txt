network and host level [30, 31]. Researchers have already
proposed techniques for generating sets of similar tokens in
an automated manner and applied them towards decoy pass-
words. In Honeywords [43] a tweaking algorithm with varia-
tions is used. The authors propose various transformations,
such as chaﬃng-by-tail-tweaking, which basically produce
new words similar to a core word, which is the original user’s
password. In Kamouﬂage [27] they extend the context free
grammar rules proposed by Weir et al. [56] for generating
similar passwords.
We consider the above works to be towards the right di-
rection and extend them in our approach. The key idea is
to identify the context of the password and randomly pro-
duce tokens that match it. However, it is important to keep
two requirements in mind. First, there should be no sin-
gle mask describing the set of decoy passwords.
In other
words, it should not be possible to determine the structure
or the properties of all decoy passwords, including the actual
password, by looking at any small subset of them. There-
fore, we introduce variations in the structure and properties
of the actual password to achieve diversity. Second, ran-
dom generation might produce passwords that are unlikely
to be chosen by actual humans. For instance, analysis of the
leaked passwords from the RockYou service revealed that
just 4% of passwords begin with a digit as opposed to a
character. Randomly producing decoys with mixed charac-
ters and digits would produce a roughly equal amount of
tokens starting with a character and a digit. The attacker
could subsequently ignore any password starting with a digit
without risking discarding the actual password. Therefore,
we place weights on the generation process to favor human
norms.
The process of generating decoys begins by analyzing the
user-selected password. It is grammatically decomposed [56]
and new passwords are generated by applying transforma-
tions to the core parts of the initial password. Transforma-
tions can be applied in the same fashion that users change
their own password [59], like for example certain substitu-
tions such as leetspeak [26]. We can also generate the corre-
sponding parts of speech tags [45], and use them to produce
random permutations that are still grammatically similar
and valid. For example, “she runs fast” is written as “pro-
noun verb adverb” and could generate “she plays carefully”
or “he speaks loudly”. In the case where natural language
processing fails to identify the presence of human language,
we treat the password as a random string with certain statis-
tical properties. For example, “6rZ” can be written as “digit
lowercase uppercase” and generate “0xB” or “5cM” but not
“5cm”.
5.2 Incorporating Decoys
A site can transition gracefully into the use of decoy pass-
words. We have implemented generic wrappers of existing
hash functions. Currently sites need to have a function that
creates a password hash and one that validates it. Pass-
word decoys do not interfere with existing hashing schemes
nor do they dictate any changes in the database schema. In-
stead, a site needs to enable create(password, N) and val-
idate(hash) wrappers. The former takes as input a plain-
text password and a positive integer N, produces N similar
passwords and hashes each of them using the existing hash-
ing functionality of the site. The function returns a password
vector encapsulating N hashes per user and which is subse-
quently inserted into the database. The latter function looks
up a given hash key in the user’s password vector.
6. SECURITY EVALUATION
Here we evaluate the security of SAuth and compare it
with the current practice of single-site authentication. We
account for SAuth coupled with and without decoys and dis-
cuss the trade-oﬀs. As already mentioned, there is no special
marking for the service to distinguish the actual password
from the decoys; any decoy password will successfully au-
thenticate the user although the user is never made aware
of them. Therefore if the number of generated decoys is
too large in relation to the password space, typing a random
password will result with good probability in authentication.
We consider the probability of two events, Gb and Gs, for
someone guessing both passwords in a two-entity enhanced
authentication process and someone guessing just the second
password provided the ﬁrst one is stolen. Considering the
above, we wish the size of the decoy set to be as small as
possible for event Gb and as large as possible for the second
event, Gs. For a given password space, P S, and assuming
D(s) is the distribution of users that do share the same
password with both services:
P (Gb) = 
1
P S ·
1
P S−1 ≈ 1
P S · 1
P S ,
for all users,
1
P S · 1
for D(s) of the users.
194In other words, for all users the probability of success-
ful authentication is the probability of authenticating to the
ﬁrst service and the probability of authenticating to the sec-
ond. However, for D(s) of the users, after successfully au-
thenticating to the ﬁrst service, just trying the same pass-
word in the second will grant access to that user’s account
(we assume D(s) = 70% [40]). Similarly, the probability
when the ﬁrst password is known becomes:
P (Gs) = 
1 ·
1
P S−1 ≈ 1 · 1
P S
for all users,
1 · 1
for D(s) of the users.
This means that the original design of synergy-based au-
thentication will not be able to improve the security of ac-
counts that reuse the password in the vouching service against
a password-leak incident. It will however be able to signiﬁ-
cantly improve the security in the case where diﬀerent pass-
words are employed and also when no site has been compro-
mised.2 By introducing K1 and K2 decoys in each service,
respectively, the event probabilities become:
P (Gb) = 
K1
P S · K2
P S−1 ≈ K1
P S · K2
P S
K1
P S · 1
K1 = 1
P S
for all users,
for D(s) of the users.
We assume no overlap between decoy sets K1 and K2.
As decoy sets are chosen at random without cooperation
between the diﬀerent services there may be some overlap.
However, this is small and there is no hint for the attacker
to determine the existence of overlap or its size. Finally, the
probability of a successful login when the ﬁrst password has
been leaked becomes:
P (Gb) = 
1 · K2
P S−1 ≈ 1 · K2
P S
for all users,
1 · 1
K1
for D(s) of the users.
Table 1 summarizes and compares the probabilities of dif-
ferent events, with SAuth in place or not. Rows marked
(1)-(3) characterize three diﬀerent approaches, each one con-
taining four cases marked as columns (a)-(d). Our initial
approach (2) signiﬁcantly improves the security of the au-
thentication system when someone is trying to guess both
passwords (column (a) in Table 1) unless the password is be-
ing reused in which case our approach oﬀers the same secu-
rity guarantees as current systems (column (b)). Moreover,
while the original system would allow anyone with prob-
ability 1 to access the accounts of a service using leaked
credentials, SAuth signiﬁcantly reduces the probability to
1/P S (column (c)). Unfortunately, if the user of the target
account has chosen to reuse his password in the vouching
service, our method is rendered ineﬀective. For that matter
we propose the decoy-enhanced approach (3) in which we
can see that we maintain the same order of security in cases
(a) through (b) and reduce probability 1 in case (c) to 1/K
where K is the size of the decoy password set.
6.1 Decoy Set Size
2Consider an attacker that performs non-targeted online dic-
tionary attack, where a single password is tried against all
users of a particular web site.
Probability (P) of successful authentication
 in both sites
D(s) users
All users
4e-16
4e-16
3e-16
3e-16
P
2e-16
1e-16
1e-16
5e-17
0e+00
 0
 2e+07
 4e+07
 6e+07
 8e+07
 1e+08  1.2e+08
Number of decoys
Figure 3: Probability of successful authentication in
target site S and vouching site V when decoy pass-
words are used. As we do not distinguish between
actual and decoy passwords, we require their num-
ber to be small over the password space.
In Honeywords [43] the authors suggest a typical set of 20
decoys and note that some sensitive accounts, such as the
administrator’s, may be associated with a larger set of 200
honey tokens. One could argue that adding more decoys
increases the level of protection for the actual password as
it creates more noise around it. In SAuth, where password
decoys can actually be used for user authentication, reason-
ing about the size of the decoy set is not as straightforward.
Here we theorize about the ideal size but then proceed to
propose a more practical approach.
Based on Table 1 one observes in Figure 3 that in the
absence of a security leak, and provided passwords are not
recycled, expanding the decoy set actually makes guessing
easier for an attacker (case (a)) as he can now ﬁgure out any
one of the decoys as opposed to ﬁnding the actual user pass-
word. Case (b) is independent of the number of decoys and
case (c), where the target site’s passwords have been leaked,
also requires a small number of decoys in relation to the
password space. To justify the need for decoys we examine
case (d) where users share the same password in both the
target service and the vouching service. Since the attacker’s
probability of success is reduced to 1/K we want as many
decoys as possible. Figure 4 presents this trade-oﬀ between
the security of users with unique and shared passwords fol-
lowing a password database leak. Note that the password
space drawn is 2 · 10−6% of the entire space and has been
selected as such to focus on the trade-oﬀ point between the
two cases. Ideally, the size of the decoy set should result in
an equal probability of success in both cases (c) and (d). In
other words, there should be no incentive for the attacker to
concentrate on either category of users. For example, given
70% probability that a user will reuse a certain password
and a password space in the order of 948 ([a-zA-Z0-9] and
symbols) we ﬁnd that the decoy set should contain O(944)
decoys per user. For anything below that point, an attacker
would prefer to guess among the already leaked decoy set,
for a chance to attack 70% of the users of a service, rather
than attempting a completely random password in hopes
of falling within the decoy set of the second service. Note
195Probability (P) of successful authentication
 in both sites when password has been leaked
D(s) users
All users
P
5e-08
4e-08
3e-08
2e-08
1e-08
0e+00
 0
 2e+07
 4e+07
 6e+07
 8e+07
 1e+08  1.2e+08
Number of decoys
Figure 4: Probability of successful authentication in
target service S following a password leak. Vouch-
ing site V and decoy passwords are employed. As
the size of the decoy set for each user increases, the
probability of attacking users who reuse their pass-
word across services is reduced. However, the prob-
ability of guessing a random password which falls
within the decoy set increases in relation to the size
of the password space. These conﬂicting require-
ments deﬁne the ideal size for the decoy set.
that this is a theoretical approximation which could however
become practical as storage technology advances.
In practice, according to NIST [32], an online guessing
attack for Level 1 should succeed with a probability of 1
in 1,024 and for Level 2 with a probability of 1 in 16,384.
Thus, a site that meets the speciﬁcation for Level 1 under
case (d) should maintain at least 1,024 decoy passwords per
user, while a site that meets the speciﬁcation for Level 2
should maintain at least 16,384 decoy passwords per user.
At the same time, the probabilities for case (c) are ≈ 10−12
and ≈ 10−11 respectively. Notice that even in the case of
Level 2, the site needs to store an additional megabyte of
information per user which we consider reasonable given that
it is less than the size of some photos that users might upload
online. 3
6.2 Network Overhead
SAuth introduces additional network messages during the
authentication process (see Fig. 1). During a traditional
authentication the network time required is tauth = RT TS
where RT TS is the round-trip time from browser to service
S. With SAuth in place this time is tsauth = 2RT TS +
RT TV , where RT TV is the round-trip time from browser to
the vouching service V . Note that a single SAuth session
can result in the user logging in to both the target site and