### 控制每一层的返回记录数      
层级越深，返回的记录就越多，而实际上在图搜索中，并不需要返回每个层级的所有记录，（例如只返回相关性较高的前N条，或者是满足权重大于多少的，前N条），从而控制每个层级的记录数。      
```      
WITH RECURSIVE search_graph(      
  c1,     -- 点1      
  c2,     -- 点2      
  prop,   -- 边的属性      
  depth,  -- 深度，从1开始      
  path   -- 路径，数组存储      
) AS (      
        select c1,c2,prop,depth,path,cycle from (      
        SELECT    -- ROOT节点查询      
          g.c1,   -- 点1      
          g.c2,   -- 点2      
          g.prop,   -- 边的属性      
          1 depth,        -- 初始深度=1      
          ARRAY[g.c1] path   -- 初始路径      
        FROM a AS g       
        WHERE       
          c1 = ?             -- ROOT节点=?      
          -- AND coalesce((prop->>'weight')::float8,0) >= ?        -- 相关性权重      
          -- ORDER BY coalesce((prop->>'weight')::float8,0) desc   -- 可以使用ORDER BY，例如返回权重排在前面的N条。      
          limit ?            -- 每个层级限制多少条？      
        ) t      
      UNION ALL      
        select c1,c2,prop,depth,path,cycle from (      
        SELECT     -- 递归子句       
          g.c1,    -- 点1      
          g.c2,    -- 点2      
          g.prop,          -- 边的属性      
          sg.depth + 1 depth,    -- 深度+1      
          path || g.c1 path    -- 路径中加入新的点      
        FROM a AS g, search_graph AS sg   -- 循环 INNER JOIN      
        WHERE       
          g.c1 = sg.c2         -- 递归JOIN条件      
          AND (g.c1 <> ALL(sg.path))        -- 防止循环      
          AND sg.depth >'weight')::float8,0) >= ?   -- 相关性权重      
          -- ORDER BY coalesce((prop->>'weight')::float8,0) desc   -- 可以使用ORDER BY，例如返回权重排在前面的N条。      
          limit ?            -- 每个层级限制多少条？                 
        ) t      
)      
SELECT * FROM search_graph;    -- 查询递归表，可以加LIMIT输出，也可以使用游标      
```      
例如，搜索root=31208的3度数据，同时限制每个层级返回100条。       
```      
WITH RECURSIVE search_graph(      
  c1,     -- 点1      
  c2,     -- 点2      
  prop,   -- 边的属性      
  depth,  -- 深度，从1开始      
  path   -- 路径，数组存储      
) AS (      
        select c1,c2,prop,depth,path from (      
        SELECT    -- ROOT节点查询      
          g.c1,   -- 点1      
          g.c2,   -- 点2      
          g.prop,   -- 边的属性      
          1 depth,        -- 初始深度=1      
          ARRAY[g.c1] path   -- 初始路径      
        FROM a AS g       
        WHERE       
          c1 = 31208            -- ROOT节点=?      
          -- AND coalesce((prop->>'weight')::float8,0) >= ?        -- 相关性权重      
          -- ORDER BY coalesce((prop->>'weight')::float8,0) desc   -- 可以使用ORDER BY，例如返回权重排在前面的N条。      
          limit ?            -- 每个层级限制多少条？      
        ) t      
      UNION ALL      
        select c1,c2,prop,depth,path from (      
        SELECT     -- 递归子句       
          g.c1,    -- 点1      
          g.c2,    -- 点2      
          g.prop,          -- 边的属性      
          sg.depth + 1 depth,    -- 深度+1      
          path || g.c1 path    -- 路径中加入新的点      
        FROM a AS g, search_graph AS sg   -- 循环 INNER JOIN      
        WHERE       
          g.c1 = sg.c2         -- 递归JOIN条件      
          AND (g.c1 <> ALL(sg.path))        -- 防止循环      
          AND sg.depth >'weight')::float8,0) >= ?   -- 相关性权重      
          -- ORDER BY coalesce((prop->>'weight')::float8,0) desc   -- 可以使用ORDER BY，例如返回权重排在前面的N条。      
          limit 100            -- 每个层级限制多少条？                 
        ) t      
)      
SELECT * FROM search_graph;    -- 查询递归表，可以加LIMIT输出，也可以使用游标     
```      
```      
   c1    |    c2    | prop | depth |          path          | cycle       
---------+----------+------+-------+------------------------+-------      
   31208 |   300008 |      |     1 | {31208}                | f      
   31208 |   300040 |      |     1 | {31208}                | f      
   31208 |   300046 |      |     1 | {31208}                | f      
   31208 |   300050 |      |     1 | {31208}                | f      
   31208 |   300061 |      |     1 | {31208}                | f      
   31208 |   300082 |      |     1 | {31208}                | f      
   31208 |   300093 |      |     1 | {31208}                | f      
.................  
 3032152 | 30347906 |      |     3 | {31208,300008,3032152} | f      
 3032152 | 30300272 |      |     3 | {31208,300008,3032152} | f      
 3032152 | 30316175 |      |     3 | {31208,300008,3032152} | f      
 3032152 | 30309844 |      |     3 | {31208,300008,3032152} | f      
 3032152 | 30336508 |      |     3 | {31208,300008,3032152} | f      
 3032152 | 30322201 |      |     3 | {31208,300008,3032152} | f      
 3032152 | 30312579 |      |     3 | {31208,300008,3032152} | f      
(300 rows)      
Time: 3.245 ms      
```      
响应速度3.2毫秒。(理由很简单，因为每一个层级都是索引命中，结合PG的cluster特性(按c1排序存储)，可以降低块数，再次提高性能)      
```    
                                                                      QUERY PLAN                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------    
 CTE Scan on search_graph  (cost=25460.78..25482.78 rows=1100 width=77) (actual time=0.044..2.009 rows=300 loops=1)    
   Output: search_graph.c1, search_graph.c2, search_graph.prop, search_graph.depth, search_graph.path, search_graph.cycle    
   Buffers: shared hit=522    
   CTE search_graph    
     ->  Recursive Union  (cost=0.58..25460.78 rows=1100 width=77) (actual time=0.042..1.755 rows=300 loops=1)    
           Buffers: shared hit=522    
           ->  Limit  (cost=0.58..402.52 rows=100 width=77) (actual time=0.040..0.183 rows=100 loops=1)    
                 Output: g.c1, g.c2, g.prop, 1, (ARRAY[g.c1]), false    
                 Buffers: shared hit=97    
                 ->  Index Scan using a_pkey on public.a g  (cost=0.58..393024.56 rows=97782 width=77) (actual time=0.038..0.166 rows=100 loops=1)    
                       Output: g.c1, g.c2, g.prop, 1, ARRAY[g.c1], false    
                       Index Cond: (g.c1 = 31208)    
                       Buffers: shared hit=97    
           ->  Limit  (cost=2249.76..2502.53 rows=100 width=77) (actual time=0.372..0.473 rows=67 loops=3)    
                 Output: g_1.c1, g_1.c2, g_1.prop, ((sg.depth + 1)), ((sg.path || g_1.c1)), ((g_1.c1 = ANY (sg.path)))    
                 Buffers: shared hit=425    
                 ->  Nested Loop  (cost=2249.76..41872589.09 rows=16564685 width=77) (actual time=0.372..0.462 rows=67 loops=3)    
                       Output: g_1.c1, g_1.c2, g_1.prop, (sg.depth + 1), (sg.path || g_1.c1), (g_1.c1 = ANY (sg.path))    
                       Buffers: shared hit=425    
                       ->  WorkTable Scan on search_graph sg  (cost=0.00..22.50 rows=167 width=40) (actual time=0.001..0.011 rows=35 loops=3)    
                             Output: sg.c1, sg.c2, sg.prop, sg.depth, sg.path, sg.cycle    
                             Filter: ((NOT sg.cycle) AND (sg.depth   Bitmap Heap Scan on public.a g_1  (cost=2249.76..248006.21 rows=99190 width=40) (actual time=0.010..0.010 rows=2 loops=104)    
                             Output: g_1.c1, g_1.c2, g_1.prop    
                             Recheck Cond: (g_1.c1 = sg.c2)    
                             Heap Blocks: exact=3    
                             Buffers: shared hit=425    
                             ->  Bitmap Index Scan on a_pkey  (cost=0.00..2224.96 rows=99190 width=0) (actual time=0.009..0.009 rows=19 loops=104)    
                                   Index Cond: (g_1.c1 = sg.c2)    
                                   Buffers: shared hit=422    
 Planning time: 0.436 ms    
 Execution time: 2.128 ms    
(32 rows)    
Time: 3.301 ms    
```    
压测，TPS：1.2万，平均响应时间5.2毫秒。          
```    
transaction type: ./test.sql    
scaling factor: 1    
query mode: prepared    
number of clients: 64    
number of threads: 64    
duration: 120 s    
number of transactions actually processed: 1463760    
latency average = 5.239 ms    
latency stddev = 1.171 ms    
tps = 12196.876360 (including connections establishing)    
tps = 12201.718092 (excluding connections establishing)    
script statistics:    
 - statement latencies in milliseconds:    
         5.295  WITH RECURSIVE search_graph(    
```    
## 图式搜索UDF封装例子    
将冗长的SQL封装成UDF，可以简化应用调用的接口。       
### 1、UDF1 ，返回记录      
```    
create or replace function graph_search1(    
  IN i_root int,                       -- 根据哪个节点开始搜      
  IN i_depth int  default 99999,       -- 搜索层级、深度限制    
  IN i_limit int8 default 2000000000,  -- 限制每一层返回的记录数    
  IN i_weight float8 default 0,        -- 限制权重    
  OUT o_path int[],                    -- 输出：路径, ID 组成的数组    
  OUT o_point1 int,                    -- 输出：点1 ID    
  OUT o_point2 int,                    -- 输出：点2 ID    
  OUT o_link_prop jsonb,               -- 输出：当前两点之间的连接属性    
  OUT o_depth int                      -- 输出：当前深度、层级    
) returns setof record as $$    
declare    
  sql text;    
begin    
sql := format($_$    
WITH RECURSIVE search_graph(      
  c1,     -- 点1      
  c2,     -- 点2      
  prop,   -- 当前边的属性       
  depth,  -- 当前深度，从1开始       
  path   -- 路径，数组存储       
) AS (      
        select c1,c2,prop,depth,path from (      
        SELECT                               -- ROOT节点查询      
          g.c1,                              -- 点1      
          g.c2,                              -- 点2      
          g.prop,                            -- 边的属性      
          1 depth,                           -- 初始深度=1      
          ARRAY[g.c1] path                  -- 初始路径      
        FROM a AS g       
        WHERE       
          c1 = %s                                                    -- ROOT节点=?      
          AND coalesce((g.prop->>'weight')::float8,0) >= %s          -- 相关性权重      
          ORDER BY coalesce((g.prop->>'weight')::float8,0) desc      -- 可以使用ORDER BY，例如返回权重排在前面的N条。      
          limit %s                           -- 每个层级限制多少条？      
        ) t      
      UNION ALL      
        select c1,c2,prop,depth,path from (      
        SELECT                               -- 递归子句       
          g.c1,                              -- 点1      
          g.c2,                              -- 点2      
          g.prop,                            -- 边的属性      
          sg.depth + 1 depth,                -- 深度+1      
          path || g.c1 path                 -- 路径中加入新的点      
        FROM a AS g, search_graph AS sg      -- 循环 INNER JOIN      
        WHERE       
          g.c1 = sg.c2                       -- 递归JOIN条件      
          AND (g.c1 <> ALL(sg.path))                      -- 防止循环      
          AND sg.depth >'weight')::float8,0) >= %s          -- 相关性权重      
          ORDER BY coalesce((g.prop->>'weight')::float8,0) desc      -- 可以使用ORDER BY，例如返回权重排在前面的N条。      
          limit %s                           -- 每个层级限制多少条？                 
        ) t      
)      
SELECT path||c2 as o_path, c1 as o_point1, c2 as o_point2, prop as o_link_prop, depth as o_depth    
FROM search_graph;                           -- 查询递归表，可以加LIMIT输出，也可以使用游标     
$_$, i_root, i_weight, i_limit, i_depth, i_weight, i_limit    
);    
return query execute sql;    
end;    
$$ language plpgsql strict;    
```    
使用举例：    
```    
postgres=# select * from graph_search1(31208, 3, 100, 0);    
             o_path              | o_point1 | o_point2 | o_link_prop | o_depth     
---------------------------------+----------+----------+-------------+---------    
 {31208,344710}                  |    31208 |   344710 |             |       1    
 {31208,319951}                  |    31208 |   319951 |             |       1    
 {31208,340938}                  |    31208 |   340938 |             |       1    
 {31208,325272}                  |    31208 |   325272 |             |       1    
 {31208,346519}                  |    31208 |   346519 |             |       1    
 {31208,314594}                  |    31208 |   314594 |             |       1    
 {31208,307217}                  |    31208 |   307217 |             |       1    