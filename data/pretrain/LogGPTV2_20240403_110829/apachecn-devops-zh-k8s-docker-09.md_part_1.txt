# 九、部署安全的 Kubernetes 仪表板
Kubernetes 集群不仅仅由 API 服务器和 kubelet 组成。集群通常由需要保护的附加应用组成，例如容器注册中心、源代码控制系统、管道服务、GitOps 应用和监控系统。集群的用户通常需要直接与这些应用交互。
虽然许多集群专注于验证对面向用户的应用和服务的访问，但集群解决方案并没有获得同样的一流地位。用户经常被要求使用 kubectl 的**端口转发**或**代理**功能来访问这些系统。从安全和用户体验的角度来看，这种访问方法是反模式的。用户和管理员将不得不面对的第一个反模式是 Kubernetes Dashboard。本章将详细说明为什么这种访问方法是反模式的，以及如何正确访问仪表板。我们将指导您如何不部署安全的 web 应用，并指出问题和风险。
我们将使用 Kubernetes Dashboard 来了解 web 应用安全性以及如何在您自己的集群中应用这些模式。这些课程不仅适用于仪表板，还适用于其他以集群为中心的应用，如 Istio、Grafana、Prometheus 的 Kiali 仪表板和其他集群管理应用。
最后，我们将花一些时间讨论本地仪表板以及如何评估它们的安全性。这是一种流行趋势，但并不普遍。理解这两种方法的安全性很重要，我们将在本章中探讨它们。
在本章中，我们将涵盖以下主题:
*   仪表板怎么知道你是谁？
*   仪表板不安全吗？
*   使用反向代理部署仪表板
*   将仪表板与 OpenUnison 集成
# 技术要求
要完成本章中的练习，您需要一个运行 OIDC 集成的 KinD 集群。我们在 [*第 7 章*](07.html#_idTextAnchor203) *中创建了这个，将认证集成到您的集群中。*
您可以在以下 GitHub 存储库中访问本章的代码:[https://GitHub . com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide](https://github.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide)。
# 仪表盘怎么知道你是谁？
Kubernetes Dashboard 是一个功能强大的网络应用，可以从浏览器中快速访问您的集群。它允许您浏览名称空间和查看节点的状态，甚至提供了一个可以用来直接访问 Pods 的外壳。使用仪表板和 kubectl 有一个根本的区别。作为一个 web 应用，仪表板需要管理您的会话，而 kubectl 不需要。这导致部署过程中出现一系列不同的安全问题，而这些问题往往没有被考虑在内，从而导致严重的后果。在本节中，我们将探讨仪表板如何识别用户并与 API 服务器交互。
## 仪表盘架构
在深入了解仪表板如何认证用户的细节之前，了解仪表板如何工作的基础知识非常重要。高层次的仪表板有三层:
*   **用户界面**:这是 Angular + HTML 前端，显示在你的浏览器中，你可以与之交互。
*   **中间层**:前端与仪表板容器中托管的一组 API 交互，将来自前端的调用转换为 Kubernetes API 调用。
*   **API 服务器**:中间层 API 直接与 Kubernetes 斯 API 服务器交互。
下图显示了 Kubernetes 仪表板的三层体系结构:
![Figure 9.1 – Kubernetes Dashboard architecture ](img/Fig_9.1_B15514.jpg)
图 9.1-无缝仪表板体系结构
当用户与仪表板交互时，用户界面调用中间层，中间层又调用应用编程接口服务器。仪表板不知道如何收集凭据，大多数应用用户通常可以通过这些凭据进行访问。没有地方放用户名或密码。它有一个基于 cookies 的非常简单的会话机制系统，但是在大多数情况下，仪表板并不真正知道或关心当前登录的用户是谁。仪表板唯一关心的是在与应用编程接口服务器通信时使用什么令牌。
仪表板怎么知道你是谁？
## 认证方式
仪表板可以通过三种方式确定用户是谁:
*   **无凭证**:仪表盘可以被告知不要收集任何代币或凭证。当这种情况发生时，仪表板将使用容器自己的服务帐户与应用编程接口服务器交互，该帐户具有通过 RBAC 分配的任何权限。
*   **登录/上传 kubectl 配置的令牌**:仪表盘可以提示用户输入 kubectl 配置文件或使用承载令牌。一旦提供了令牌(或从上传到仪表板的配置文件中提取了令牌)，就会创建一个加密的 cookie 来存储令牌。这个 cookie 由中间层解密，里面的令牌被传递给 API 服务器。
*   **来自反向代理的令牌**:如果在从用户界面到中间层的请求中存在包含承载令牌的授权头，则中间层将在向 API 服务器的请求中使用该承载令牌。这是最安全的选项，其实现将在本章中详细介绍。
在本章的其余部分，前两个选项将作为访问仪表板的反模式进行探讨，我们将解释为什么从安全角度和用户体验角度来看，反向代理模式是访问集群仪表板实现的最佳选项。
# 了解仪表盘安全风险
设置新集群时，经常会出现仪表盘的安全性问题。保护仪表板归结为如何部署仪表板，而不是仪表板本身是否安全。回到仪表板应用的体系结构，没有内置的“安全性”感。中间层只需将令牌传递给应用编程接口服务器。
在谈论任何一种 IT 安全的时候，透过*纵深防御*的镜头来看是很重要的。这就是任何系统都应该有多层安全性的想法。如果一个层出现故障，会有其他层来填充间隙，直到故障层可以被处理。一次失败不会让攻击者直接访问。
最常被提及的与仪表板安全相关的事件是 2018 年特斯拉被密码矿工攻破。攻击者能够访问运行在特斯拉集群中的 Pods，因为仪表板没有受到保护。该集群的 Pods 可以访问令牌，这些令牌为攻击者提供了对特斯拉云提供商的访问，攻击者可以在这些提供商处运行他们的加密挖掘系统。
仪表板通常是一个攻击媒介，因为它们很容易找到攻击者正在寻找的东西，并且很容易被不安全地部署。说明这一点，在 KubeCon NA 2019 上，展示了一个**捕捉旗帜** ( **CTF** )的场景，其中一个场景是开发人员“意外”暴露集群的仪表板。
注意
CTF 在 https://securekubernetes.com/ T2 有一个家庭实验室。对于学习 Kubernetes 安全性的人来说，这是一个非常推荐的资源。除了有教育意义，恐怖，还很有趣！
自从特斯拉违规以来，在没有凭据的情况下部署仪表板变得更加困难。它不再是默认设置，需要对仪表板和集群进行更新。为了证明这有多危险，让我们来看看到底会造成什么样的伤害。
经历这些步骤可能会产生这样的想法“真的有人经历所有这些步骤才能到达仪表板吗？”答案可能是没人想谈的。在前一章中，讨论了授权访问集群和设计多租户的多种选项。其中一个选项是集群层的租户，每个租户都有自己的集群。不幸的是，这些部署中的许多都包括租户的集群管理访问权限，这将使他们能够执行这些步骤。集群管理员是一些谷歌搜索远离指令，以轻松绕过讨厌的虚拟专用网开发人员不喜欢在家里使用。
## 部署不安全的仪表板
虽然这听起来很疯狂，但这是我们在野外经常看到的事情。建议的仪表板安装多次声明不要在独立的开发实验室之外使用这种类型的配置。缺点是，由于它确实使部署仪表板变得如此容易，许多较新的管理员使用它，因为它易于设置，并且他们经常在生产集群中使用相同的部署。
现在，让我们展示一下攻击一个部署时没有考虑安全性的仪表板有多容易:
1.  第一步是告诉仪表盘允许用户绕过认证。在`kubernetes-dashboard`名称空间中编辑`kubernetes-dashboard`部署:
    ```
    kubectl edit deployment kubernetes-dashboard -n kubernetes-dashboard
    ```
2.  Look for the `args` option for the container, add `- --enable-skip-login`, then save:
    ![Figure 9.2 – Enabling skip-login on the dashboard ](img/Fig_9.2_B15514.jpg)
    图 9.2–在仪表板上启用跳过登录
3.  现在，我们需要通过创建新的入口规则向网络公开仪表板。使用以下 YAML 创建一个名为`insecure-dashboard.yaml`的新入口清单。请记住将`host`部分中的 IP 地址替换为您的 Docker 主机的 IP 地址:
    ```
    apiVersion: networking.k8s.io/v1beta1
    kind: Ingress
    metadata:
      name: dashboard-external-auth
      namespace: kubernetes-dashboard
      annotations:
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/affinity: cookie
        nginx.ingress.kubernetes.io/backend-protocol: https
        nginx.ingress.kubernetes.io/secure-backends: "true"
        nginx.org/ssl-services: kubernetes-dashboard
    spec:
      rules:
      - host: k8s-secret-dashboard.apps.192-168-2-129.nip.io
        http:
          paths:
          - backend:
              serviceName: kubernetes-dashboard
              servicePort: 443
            path: /