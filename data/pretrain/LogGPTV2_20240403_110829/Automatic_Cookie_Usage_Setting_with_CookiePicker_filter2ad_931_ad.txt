611.6
597.5
10,104.1
1,387.1
2,905.6
-
2,683.3
S1
S2
S3
S4
S5
S6
S7
S8
S9
S10
S11
S12
S13
S14
S15
S16
S17
S18
S19
S20
S21
S22
S23
S24
S25
S26
S27
S28
S29
S30
Total
Average
Table 1: Online testing results for thirty Web sites (S1 to S30).
S17, and S28 have abnormally high identiﬁcation duration
at about 10 seconds, which is mainly caused by the very
slow responses from those three Web sites.
5.2.2. Second Set of Experiments
Since only two Web sites in the ﬁrst set of experiments have
useful persistent cookies, we attempt to further examine if
CookiePicker can correctly identify each useful persistent
cookie in the second set of experiments. Because the list
of Web sites whose persistent cookies are really useful to
users does not exist, we have to locate such Web sites man-
ually. Again, we randomly choose 200 Web sites that use
persistent cookies from the 15 categories we measured [24]
in directory.google.com. Note that the 30 Web sites chosen
in the ﬁrst set of experiments are not included in these 200
Web sites. We manually scrutinize these 200 Web sites, and
ﬁnally ﬁnd six Web sites whose persistent cookies are really
useful to users, i.e., without cookies, users would encounter
some problems. Because the manual scrutiny is tedious, we
cannot afford more effort to locate more such Web sites.
The six Web sites are listed in the ﬁrst column of Table 2
and represented as P1 to P6 for privacy concerns.
In Table 2, the second column shows the number of
the cookies marked as “useful” by CookiePicker and the
third column shows the number of the real useful cookies
via manual veriﬁcation. We observe that for the six Web
sites, all of their useful persistent cookies are marked as
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Web Site Marked
Useful
1
1
1
1
9
5
-
P1
P2
P3
P4
P5
P6
Average
Real
Useful
1
1
1
1
1
2
-
NTreeSim
(A, B, 5)
0.311
0.459
0.667
0.250
0.226
0.593
0.418
NTextSim
(S1, S2)
0.609
0.765
0.623
0.158
0.253
0.719
0.521
Usage
Preference
Performance
Sign Up
Preference
Sign Up
Preference
-
Table 2: Online testing results for 6 Web sites (P1 to P6) that have
useful persistent cookies.
“useful” by CookiePicker. This result indicates that Cook-
iePicker seldom misses the identiﬁcation of a real useful
cookie. On the other hand, for Web sites P5 and P6, some
useless persistent cookies are also marked as “useful” be-
cause they are sent out in the same regular request with
the real useful cookies. The fourth and ﬁfth columns show
the similarity score computed by NTreeSim(A, B, 5) and
NTextSim(S1, S2), respectively, on the Web pages that per-
sistent cookies are useful. These similarity scores are far
below 0.85, which is the current value used for the two
thresholds Thresh1 and Thresh2 in Figure 5. The usage of
these useful persistent cookies on each Web site is given at
the sixth column. Web sites P1, P4, and P6 use persistent
cookies for user’s preference setting. Web sites P3 and P5
use persistent cookies to properly create and sign up a new
user. Web site P2 uses persistent cookie in a very unique
way. Each user’s persistent cookie corresponds to a spe-
ciﬁc sub-directory on the Web server, and the sub-directory
stores the user’s recent query results. Thus, if the user visits
the Web site again with the persistent cookie, recent query
results can be reused to improve query performance.
In summary, the above two sets of experiments show
that by conservatively setting Thresh1 and Thresh2 to
0.85, CookiePicker can safely disable and remove persis-
tent cookies from the majority of Web sites (25 out of the
30 Web sites that we intensively tested). Meanwhile, all
the useful persistent cookies can be correctly identiﬁed by
CookiePicker and no backward error recovery is needed for
all the 8 Web sites (S6,S16,P1,P2,P3,P4,P5,P6) that have
useful persistent cookies. About 10% Web sites (3 out of
30), in which persistent cookies are useless, are wrongly
identiﬁed by CookiePicker as “useful”. However, the num-
ber may be further reduced if we ﬁne-tune the two thresh-
olds and the implementation of the two algorithms, which
we leave as our future work.
5.3. Evasion against CookiePicker
In CookiePicker, the identiﬁcation of useful cookies are
based on perceivable changes on a Web page. Once the
identiﬁcation metric becomes known, CookiePicker may be
circumvented. The evasion of CookiePicker will most likely
come from two sources: Web site operators who want to
track user activities, and attackers who want to steal cook-
ies.
As stated in Section 2, we assume that the hosting Web
site is legitimate, since it is pointless to discuss cookie se-
curity and privacy issues within a malicious Web site. For
legitimate Web sites, if some operators strongly insist to use
ﬁrst-party persistent cookies for tracking long-term user be-
haviors, they can evade CookiePicker by detecting the hid-
den HTTP request and manipulating the hidden HTTP re-
sponse. However, we argue that most Web site operators
will not pay the effort and time to do so, either because of
the lack of interest to track long-term user behaviors, or be-
cause of inaccuracy in cookie-based user behavior tracking,
which has long been recognized [26].
For third-party attackers, unless they compromise a legit-
imate Web site, it is very difﬁcult for them to manipulate the
Web pages sending back to a user’s browser and circumvent
CookiePicker.
6. Related Work
RFC 2109 [10] is the ﬁrst document that raises the gen-
eral public’s awareness of cookie privacy problems. Later
on, the same origin policy was introduced in Netscape Navi-
gator 2.0 to prevent cookies and Javascripts of different sites
from interfering with each other. The successful fulﬁllment
of the same origin policy on cookies and Javascripts further
encourages the enforcement of this policy on browser cache
and visited links [6].
Modern Web browsers have provided users with reﬁned
cookie privacy options. A user can deﬁne detailed cookie
policies for Web sites either before or during visiting these
sites. Commercial cookie management softwares such as
Cookie Crusher [32] and CookiePal [33] mainly rely on
pop-ups to notify incoming cookies. However, the studies in
[5] show that such cookie privacy options and cookie man-
agement policies fail to be used in practice, due mainly to
the following two reasons: (1) these options are very con-
fusing and cumbersome, and (2) most users have no true
understanding of the advantages and disadvantages of using
cookies.
Recently, the most noticeable research work in cookie
management is Doppelganger [16]. Doppelganger is a
system for creating and enforcing ﬁne-grained privacy-
preserving cookie policies. Doppelganger leverages client-
side parallelism and uses a twin window to mirror a user’s
Web session. If any difference is detected, Doppelganger
will ask the user to compare the main window and the fork
window, and then, make a cookie policy decision. Although
taking a big step towards automatic cookie management,
Doppelganger still has a few obvious drawbacks such as
high overhead and the need for human involvement. Al-
though CookiePicker follows Doppelganger’s basic princi-
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007ple of comparing Web page differences to identify useful
cookies, it works in a fully automatic way and has much
lower overhead.
7. Conclusions
In this paper, we have presented a system, called Cook-
iePicker, to automatically manage cookie usage setting on
behalf of a user. Only one additional HTTP request for
the container page of a Web site, the hidden request, is
generated for CookiePicker to identify the usefulness of
a cookie set. The core of CookiePicker are two comple-
mentary detection algorithms, which accurately detect the
HTML page differences caused by enabling and disabling
cookies. CookiePicker classiﬁes those cookies that cause
perceivable changes on a Web page as useful, and disable
the rest as useless. We have implemented CookiePicker as
an extension to Firefox and evaluated its efﬁcacy through
live experiments over various Web sites. By automatically
manage the usage of cookies, CookiePicker helps a user
to strike an appropriate balance between easy usage and
privacy risks. We believe CookiePicker has the potential
to be widely used, for its fully automatic nature, its high
accuracy, and its low overhead.
Acknowledgments: This work was partially supported by
NSF grants CNS-0627339 and CNS-0627340.
References
[1] R. Al-Ekram, A. Adma, and O. Baysal. diffx: an algorithm
to detect changes in multi-version xml documents. In Pro-
ceedings of the CASCON’05, pages 1–11, 2005.
[2] P. Bille. A survey on tree edit distance and related problems.
Theor. Comput. Sci., 337(1-3):217–239, 2005.
[3] S. Chapman and G. Dhillon. Privacy and the internet: the
case of doubleclick, inc, 2002.
[4] S. Gupta, G. Kaiser, D. Neistadt, and P. Grimm. Dom-based
content extraction of html documents. In Proceedings of the
WWW’03, pages 207–214, 2003.
[5] V. Ha, K. Inkpen, F. A. Shaar, and L. Hdeib. An examination
of user perception and misconception of internet cookies. In
CHI’06 extended abstracts on Human factors in computing
systems, pages 833–838, 2006.
[6] C. Jackson, A. Bortz, D. Boneh, and J. C. Mitchell. Protect-
ing browser state from web privacy attacks. In Proceedings
of the WWW’06, pages 737–744, 2006.
[7] M. Jakobsson and S. Stamm. Invasive browser snifﬁng and
In Proceedings of the WWW’06, pages
countermeasures.
523–532, 2006.
[8] T. Jiang, L. Wang, and K. Zhang. Alignment of trees - an
alternative to tree edit. Theor. Comput. Sci., 143(1):137–
148, 1995.
[9] S. Joshi, N. Agrawal, R. Krishnapuram, and S. Negi. A bag
of paths model for measuring structural similarity in web
documents. In Proceedings of the KDD’03, pages 577–582,
2003.
[10] D. Kristol and L. Montulli. Http state management mecha-
nism, RFC 2109, 1997.
[11] D. M. Kristol. Http cookies: Standards, privacy, and politics.
ACM Trans. Inter. Tech., 1(2):151–198, 2001.
[12] B. A. Mah. An empirical model of http network trafﬁc. In
Proceedings of the INFOCOM’97, pages 592–600, 1997.
[13] L. I. Millett, B. Friedman, and E. Felten. Cookies and web
browser design: toward realizing informed consent online.
In Proceedings of the CHI’01, pages 46–52, 2001.
[14] D. C. Reis, P. B. Golgher, A. S. Silva, and A. F. Laender.
Automatic web news extraction using tree edit distance. In
Proceedings of the WWW’04, pages 502–511, 2004.
[15] S. M. Selkow. The tree-to-tree editing problem. Inf. Process.
Lett., 6(6):184–186, 1977.
[16] U. Shankar and C. Karlof. Doppelganger: Better browser
In Proceedings of the ACM
privacy without the bother.
CCS’06, 2006.
[17] K.-C. Tai. The tree-to-tree correction problem. J. ACM,
26(3):422–433, 1979.
[18] E. Tanaka and K. Tanaka. The tree-to-tree editing problem.
International journal Pattern Recognition And Atiﬁcial In-
telligency, 2(2):221–240, 1988.
[19] A. Torsello and D. Hidovic-Rowe. Polynomial-time metrics
for attributed trees. IEEE Trans. Pattern Anal. Mach. Intell.,
27(7):1087–1099, 2005.
[20] G. Valiente. An efﬁcient bottom-up distance between trees.
In Proceedings of the SPIRE’01, pages 212–219, 2001.
[21] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel,
and G. Vigna. Cross site scripting prevention with dy-
namic data tainting and static analysis.
In Proceedings of
the NDSS’07, 2007.
[22] Y.-M. Wang, D. Beck, X. Jiang, R. Roussev, C. Verbowski,
S. Chen, and S. T. King. Automated web patrol with strider
honeymonkeys: Finding web sites that exploit browser vul-
nerabilities. In Proceedings of the NDSS’06, 2006.
[23] W. Yang. Identifying syntactic differences between two pro-
grams. Softw. Pract. Exper., 21(7):739–755, 1991.
[24] C. Yue, M. Xie, and H. Wang. Cookie measurement and
design of CookiePicker. Technical Report WM-CS-2007-
03, The College of William & Mary, 2007.
[25] Y. Zhai and B. Liu. Web data extraction based on partial
tree alignment. In Proceedings of the WWW’05, pages 76–
85, 2005.
[26] Accurate web site visitor measurement crippled by cookie
blocking and deletion, jupiterresearch ﬁnds, 2007.
http://www.jupitermedia.com/corporate/releases/05.03.14-
newjupresearch.html.
[27] CERT Advisory CA-2000-02 Malicious HTML tags embed-
ded in client web requests.
http://www.cert.org/advisories/CA-2000-02.html.
[28] Google slams the door on XSS ﬂaw ’Stop cookie thief!’.
http://software.silicon.com/security/, January 17th, 2007.
[29] Http cookie, 2006. http://en.wikipedia.org/wiki/HTTP cookie.
[30] Platform for privacy preferences (P3P) project, 2006.
http://www.w3.org/P3P/.
[31] Same origin policy, 2007.
http://en.wikipedia.org/wiki/Same origin policy.
[32] Cookie crusher, 2006. http://www.pcworld.com/downloads.
[33] Cookie pal, 2006. http://www.kburra.com/cpal.html.
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007