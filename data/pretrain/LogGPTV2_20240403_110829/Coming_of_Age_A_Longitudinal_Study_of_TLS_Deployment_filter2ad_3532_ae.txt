SSL 3 fallback removed
16/05/2018 TLS 1.3 supported
25/09/2012 TLS 1.1 supported
20/08/2013 TLS 1.2 supported
18/11/2014
SSL 3 fallback removed
01/11/2013 TLS 1.1/1.2 supported
27/08/2013 TLS 1.1 supported
22/01/2015
SSL 3 fallback removed
22/10/2013 TLS 1.1/1.2 supported
30/09/2015
SSL 3 support removed
Table 6: Browser TLS version support.
level for the cryptographic operations involved, GCM is roughly
twice as fast as CBC-mode cipher suites on mainstream CPUs. The
ChaCha20-Poly1305 AEAD scheme is a good alternative where
such instructions are not available, e.g., on mobile devices.
01020304050607080902012−01−012012−04−012012−07−012012−10−012013−01−012013−04−012013−07−012013−10−012014−01−012014−04−012014−07−012014−10−012015−01−012015−04−012015−07−012015−10−012016−01−012016−04−012016−07−012016−10−012017−01−012017−04−012017−07−012017−10−012018−01−012018−04−01Percent monthly connectionsTypeAEAD TotalAES128−GCMAES256−GCMChaCha20−Poly130501020304050607080901002012−04−012012−08−012012−12−012013−04−012013−08−012013−12−012014−04−012014−08−012014−12−012015−04−012015−08−012015−12−012016−04−012016−08−012016−12−012017−04−012017−08−012017−12−012018−04−01Percent Connection/MonthAES128−GCMAES256−GCMChaCha20−Poly1305AES−CCMComing of Age: A Longitudinal Study of TLS Deployment
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
versions that the client actually supports. This change to the mech-
anism is to make TLS 1.3 easier to deploy in the face of middleboxes
that block connections offering 1.3 as the version number. Since
each draft of the TLS 1.3 specification has a unique version number
this gives us some insight into the deployment of TLS 1.3 over time.
Curiously the version that we saw most commonly advertised by
clients in the extension has not been officially assigned—0x7e02 in
82.3% of connections with the extension. This is one of the several
experimental Google TLS 1.3 variants. The most commonly adver-
tised “official” version of TLS 1.3 that we encountered was draft
18 (13.4%).
7 DISCUSSION
This section discusses the evolution of TLS and its security based
on our observations.
7.1 Ecosystem Improvements
Our measurements show that the security and the deployment of
TLS have both changed radically in the last few years. In 2012, more
than 90% of connections were using TLS 1.0. Nearly all connections
used either RC4 or CBC-mode cipher suites. More than 60% of
connections used non-forward-secret ciphers. At that point in time,
TLS 1.2 had already been standardized for nearly 4 years (August
2008). AEAD cipher suites for TLS similarly were standardized in
2008. Diffie-Hellman (DH) forward secret cipher suites were part
of TLS 1.0 (standardized in 1999); in 2006 support for ECDH and
ECDHE was standardized [19]. So more secure options existed; they
simply were not being used.
Today more than 90% of connections use TLS 1.2 with a forward
secret, AEAD cipher suite. Furthermore we already see significant
support for TLS 1.3 even though the standardization process has
not yet concluded. Where in the past there was a gap of years
between standardization of a technique and its deployment, today
this time gap can be practically zero. This points towards the fact
that encrypted communication is seen as a much more important
topic today than it was even as recently as 2012; indeed more
than half of all HTTP traffic is now protected using TLS. This
is due in no small part to the influence of a few large vendors
(such as CloudFlare, Facebook, and Google) becoming more actively
involved in standardization bodies like IETF and vendor forums like
the CA/Browser forum. These organizations have also pushed at
first experimental and then production deployment of new versions
of TLS, new cipher suites, and new protocol features.
7.2 Backwards Compatibility
Despite these positive advances, as our data shows, there are still
many long tail effects in TLS deployment.
In particular, support for older, sometimes insecure, ciphers still
is common: for example more than 20% of servers still support SSL 3
which was superseded by the standardization of TLS 1.0 in 1999.
3DES is still offered by clients in 69% of connections as a “cipher of
last resort”. Nearly 40% of application fingerprints that we see per
day still support RC4.
This is a problem in several ways: first, downgrade attacks have
surfaced time and again. Thus even supporting old cipher suites
might open users up to attack—even if they have taken precautions
to prevent downgrades. Second, supporting old features leaves room
for misconfigurations. As mentioned in §5.3 we found servers that
prefer old ciphers even when they support newer ones. Just offering
an older cipher as a client might result in the server choosing it
over more secure choices, perhaps as a result of poor server-side
configuration.
There are multiple reasons for supporting old cryptographic
primitives. Browsers are hesitant to remove support for old cipher
suites fearing that they might break compatibility with websites. If
a web browser shows warning messages or refuses to connect to a
site where a different web browser still works, this might encour-
age users to switch browsers [3]. Additionally, today a significant
number of smartphones, embedded systems, and IoT devices (e.g.,
printers and even smart light bulbs) support TLS [69]. While this
represents an important step towards better security on the part of
device vendors, many do not then provide security updates to their
devices. This results in devices being used, sometimes for years,
with abandoned and outdated software that only supports older
and weaker cipher suites [71].
On the other hand, servers are hesitant to remove support for
old cipher suites for the reverse reasons: old clients. For example,
there are still millions of devices running Android 2.3 (Gingerbread)
(Google claims 0.3% of devices connecting to the Play Store [50];
there are more than 2 billion Android devices in total [75]). Android
2.3 only supports TLS 1.0, and supports neither ECDHE nor AEAD
cipher suites [49].
Solving this dichotomy is difficult. The solution that Firefox
employed for RC4 has merit: removing insecure cipher suites by
default but either allowing them as a fallback or (even better) just
for whitelisted servers. Compliance with industry standards has
also been a driver for change here. One can particularly highlight
PCI-DSS, which is applicable to any enterprise that processes credit
card payments. While the PCI DSS requirements with regards to
SSL and TLS have been slow to harden, they did ban SSL in June
2016 and will require the use of TLS 1.1 (and preferably TLS 1.2)
from June 2018 onwards [66].
7.3 Misconfigurations, Poor Implementations
While we mentioned legitimate reasons to keep supporting older
cipher suites and protocols in some cases, it should be noted often
there are no legitimate reasons to do so. Due to the complexities
involved and the radical speed of change in the last years it is
inevitable that developers and administrators are not always well-
versed on the state of the art. Web servers that choose outdated
cipher suites despite supporting much stronger ones or client soft-
ware that offers NULL ciphers along with non-NULL ciphers are
strong indicators of software developers not having caught up with
proper TLS usage. In addition, some suggested attack mitigations
may have also generated confusion for users—for example, one fix
for the BEAST attack in 2011 was to switch from CBC-mode to RC4,
but this was then followed in 2013 by attacks on RC4, which then
may have prompted users to upgrade to TLS 1.1 and switch back to
CBC-mode, and ultimately to make the harder leap to TLS 1.2.
Our data also contains a small number of hosts that, against
TLS specification, choose cipher suites that were not offered by
the client. Among these are a number of hosts that choose GOST
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
Kotzias et al.
cipher suites, a Soviet and Russian government block cipher, and
anonymous NULL cipher suites. While none of the standard TLS
clients finish the handshake in these cases, it shows that there are
an alarming number of systems in that might be running custom
TLS implementations with questionable security.
Improving the accessibility and usability of TLS libraries and
other software packages that use TLS can help mitigate some of
these issues: providing a strong general-purpose default configura-
tion by TLS libraries and making TLS software configuration more
stream-lined and accessible in general encourages people to use
trusted and usable TLS libraries instead of implementing their own.
Making backwards compatibility features opt-in can also greatly
reduce the possibility of misconfiguration through use of default
settings.
7.4 Impact of Security Research
Our work shows that the impact of security research on the TLS
ecosystem is sometimes spectacular, but sometimes also quite slow.
In a few cases—especially those that attracted a lot of media atten-
tion or had significant impact—the ecosystem changed very quickly.
The best example is Heartbleed (§5.4). The beginning of the Snow-
den revelations also clearly correlates with a change to forward
secret ciphers (§6.3.1).
On the other hand, while RC4 use started to drop soon after
attacks were announced (§5.3), it still took several years for RC4
usage to reduce significantly. Only with increasingly strong attacks
did browser vendors eventually opt for full disablement in mid-
2015. It can be argued that the first RC4 attack in 2013 was rather
easy to dismiss as infeasible in practice; only when a direction of
travel was established did the ecosystem begin to shift. There were
also persistent rumors concerning the capabilities of Nation State
Adversaries with regards to breaking RC4, though it is unclear
whether these were relevant for RC4 as used in TLS.
With the CBC attacks (§5.2), there was no clear change in traffic
(though we may posit that the temporary uptick in TLS 1.1 traffic
was due to BEAST). In fact, CBC traffic increased slightly over time
post-BEAST and despite Lucky 13, until TLS 1.2 implementations
became widespread. This is attributable to the lack of better avail-
able options at the time, the ability to patch against both BEAST
and Lucky 13 attacks, and the fact that both attacks are actually
difficult to mount in practice. In contrast, no single-sided patch was
available for the RC4 attacks, making them much harder to address.
Server support for SSL 3 is still embarrassingly high (§5.1), de-
spite the severity of POODLE and RC4 attacks which apply to it.
This can be attributed to modern web browsers never proposing to
use SSL 3, modern web servers supporting newer versions of TLS,
and the removal of version fallback from modern web browsers.
However, we have seen several times how maintaining support for
legacy features weakens the whole TLS ecosystem, especially with
export cipher suites and FREAK/Logjam. It may only be a matter of
time before an exploit is found which exploits widespread server-
side support for SSL 3. For example, one could imagine a DROWN-
style attack making use of some as yet undiscovered vulnerability
in legacy code for RSA decryption in SSL 3 implementations to
forge RSA signatures on TLS 1.3 handshakes, cf. [16,59,62].
7.5 Dataset Bias
The ICSI SSL notary contains SSL/TLS connections collected from
North American universities and research institutions. Although
this may introduce a potential geographical bias, given the size of
the dataset we believe it is representative of many properties of
real-world SSL/TLS activity.
Censys active scans are performed on the IPv4 address space
without the use of the Server Name Indication (SNI) extension. We
do not consider the lack of IPv6 scans to be an important limitation,
since IPv6 adoption, although increasing over the years, is still
limited. The lack of SNI does not introduce any bias in our study,
since our analysis does not include server certificates.
8 RELATED WORK
A large body of work has examined different facets of the TLS and
HTTPS ecosystem. A large amount of work has focused on the
PKI [7,11,24,46,54], including revocation [86,87]. Most recently, a
number of PKI papers have focused on Certificate Transparency [23,
52,76,84]. More closely related to our work, a smaller set of work
examined properties of specific parts of TLS. Durumeric et al. [43]
examined email delivery security using active scans. Touching
on a lot of different topics, the work also includes a snapshot of
key exchanges/ciphers used for email delivery. Holz et al. [53]
performed a more focused analysis of how TLS is used for electronic
communication protocols (Mail, IMAP, IRC, XMPP). SSL Pulse [70]
provides current statistics of the quality of SSL/TLS across the Alexa
top pages. Similarly the ICSI SSL Notary page [58] gives up-to-date
high level statistics about the dataset used in this study.
TLS handshake fingerprinting has been proposed and used by
different parties over the years. Ristić [73] proposed to use an
Apache module to create cipher suite lists. Majkowski implemented
fingerprinting for p0f [61]. Most closely related to our work, HusÃąk
et al. [55] did a study in which they linked HTTP user-agent to TLS
cipher suite lists. They obtained 12,832 user-agent/cipher-suite links.
Using this list they performed a 7-day measurement at the uplink
of Masaryk University. They determined that the top 31 cipher
suites were enough to cover 90% of traffic. Anderson et al. [13]
examined how malware uses TLS and how their TLS handshakes
differ from other applications. Recently Durumeric et al. [45] studied
the prevalence of HTTPS interception using TLS fingerprinting.
For a discussion of TLS attack papers, please see §2.
9 CONCLUSIONS
Our longitudinal study shows that the TLS ecosystem has changed
radically in the last six years, largely for the better: weak algorithms
like DES and RC4 are going the way of the dodo, to be replaced
by stronger AEAD designs; export, anonymous and NULL cipher
suites are in retreat; forward secrecy is increasingly de rigeur; new
elliptic curves are on the uptake; and TLS 1.3 is showing signs of
rapid adoption. There is, and will probably continue to be, a long
tail of software and devices that advertise and select legacy cipher
suites; we have extensively discussed the reasons for this messy
state of affairs. We have examined, through the lens of attacks, how
and why these changes have come about, using datasets gathered
from large-scale active and passive scans in concert with the largest
database of TLS client fingerprints assembled to date.
Coming of Age: A Longitudinal Study of TLS Deployment
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
We conclude by noting that the datasets we used reveal many
other fascinating insights which lack of space precluded us from
discussing here. As examples, we are able to track the response to
the TLS renegotiation attack through the deployment of the RIE
extension; we can see the very limited take up of the “Encrypt-
then-MAC” extension as a response to the Lucky 13 attack; and we
can see the rapid evolution of TLS 1.3 as it begins to be deployed
experimentally by vendors. As the ecosystem continues to develop,
we will continue to track it in all its fascinating and complex glory.
ACKNOWLEDGMENTS
We thank the Censys team for their support throughout writing
this paper. We also thank Matías Spatz for his help on collecting
TLS fingerprints for Windows. At last, we thank Dave Levin and the
anonymous reviewers for their insightful comments and feedback.
This work was supported by the US National Science Founda-
tion under grants CNS-1528156, CNS-1564329, and OAC-1348077.
This work was also supported by the UK EPSRC under grants
EP/M013472/1, EP/K035584/1 and EP/P009301/1. This research was
partially supported by the Regional Government of Madrid through