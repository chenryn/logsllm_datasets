### Browser TLS Version Support

| Date       | Event Description                |
|------------|----------------------------------|
| 25/09/2012 | TLS 1.1 supported                |
| 20/08/2013 | TLS 1.2 supported                |
| 16/05/2018 | TLS 1.3 supported                |
| 18/11/2014 | SSL 3 fallback removed           |
| 01/11/2013 | TLS 1.1/1.2 supported            |
| 27/08/2013 | TLS 1.1 supported                |
| 22/01/2015 | SSL 3 fallback removed           |
| 22/10/2013 | TLS 1.1/1.2 supported            |
| 30/09/2015 | SSL 3 support removed            |

**Table 6: Browser TLS Version Support**

### Cryptographic Performance and Alternatives

For cryptographic operations, GCM (Galois/Counter Mode) is approximately twice as fast as CBC-mode cipher suites on mainstream CPUs. The ChaCha20-Poly1305 AEAD (Authenticated Encryption with Associated Data) scheme is a suitable alternative for environments where specialized instructions are not available, such as mobile devices.

### Evolution of TLS and Security

#### Ecosystem Improvements

Our measurements indicate that the security and deployment of TLS have undergone significant changes in recent years. In 2012, over 90% of connections used TLS 1.0, primarily with RC4 or CBC-mode cipher suites. More than 60% of connections used non-forward-secret ciphers. Despite TLS 1.2 being standardized in August 2008 and AEAD cipher suites in 2008, and Diffie-Hellman (DH) forward secret cipher suites being part of TLS 1.0 (standardized in 1999), these more secure options were not widely adopted.

Today, over 90% of connections use TLS 1.2 with forward-secret, AEAD cipher suites. Additionally, there is already significant support for TLS 1.3, even though its standardization process is still ongoing. This rapid adoption highlights the increased importance of encrypted communication compared to just a few years ago, with more than half of all HTTP traffic now protected by TLS. This shift is partly due to the influence of major vendors like CloudFlare, Facebook, and Google, who have become more involved in standardization bodies such as IETF and vendor forums like the CA/Browser forum.

#### Backwards Compatibility

Despite these advancements, our data shows that many systems still support older, potentially insecure ciphers. For example, more than 20% of servers still support SSL 3, which was superseded by TLS 1.0 in 1999. 3DES is offered by clients in 69% of connections as a "cipher of last resort," and nearly 40% of application fingerprints still support RC4.

This presents several issues:
1. **Downgrade Attacks**: Supporting old cipher suites can expose users to attacks, even if they have taken precautions.
2. **Misconfigurations**: Servers may prefer older ciphers, leading to the selection of less secure options.

Browsers are hesitant to remove support for old cipher suites to maintain compatibility with websites. Additionally, many IoT and embedded devices do not receive security updates, leaving them vulnerable to outdated software and weaker cipher suites.

Servers also hesitate to remove support for old cipher suites due to the presence of legacy clients. For instance, millions of devices running Android 2.3 (Gingerbread) only support TLS 1.0 and lack support for ECDHE and AEAD cipher suites.

#### Misconfigurations and Poor Implementations

While there are legitimate reasons to support older cipher suites, many misconfigurations occur due to a lack of expertise. Web servers may choose outdated cipher suites despite supporting stronger ones, and client software may offer NULL ciphers alongside non-NULL ciphers, indicating a lack of proper TLS usage.

Some attack mitigations have also caused confusion. For example, the BEAST attack in 2011 led to a switch from CBC-mode to RC4, but subsequent RC4 attacks in 2013 prompted a move back to CBC-mode and eventually to TLS 1.2.

Our data also reveals hosts that select cipher suites not offered by the client, including GOST cipher suites, which are Soviet and Russian government block ciphers. This suggests the presence of custom TLS implementations with questionable security.

Improving the accessibility and usability of TLS libraries and providing strong default configurations can help mitigate these issues. Making backwards compatibility features opt-in can also reduce the risk of misconfiguration.

#### Impact of Security Research

Security research has had both immediate and delayed impacts on the TLS ecosystem. High-profile events like Heartbleed and the Snowden revelations led to rapid changes, such as a shift to forward-secret ciphers. However, other issues, like the RC4 attacks, took several years to address fully. The lack of better alternatives and the difficulty of mounting some attacks, such as those on CBC, contributed to slower changes.

#### Dataset Bias

The ICSI SSL notary dataset includes SSL/TLS connections from North American universities and research institutions, which may introduce geographical bias. However, given the dataset's size, it is likely representative of real-world SSL/TLS activity.

Censys active scans cover the IPv4 address space without using the Server Name Indication (SNI) extension. The lack of SNI does not introduce bias in our study, as it does not include server certificates.

### Related Work

A substantial body of work has examined various aspects of the TLS and HTTPS ecosystem, including the Public Key Infrastructure (PKI), revocation, and Certificate Transparency. Some studies have focused on specific parts of TLS, such as email delivery security and the use of TLS for electronic communication protocols. Tools like SSL Pulse and the ICSI SSL Notary provide current statistics on SSL/TLS quality and usage.

TLS handshake fingerprinting has been proposed and used by different parties, with some studies linking HTTP user-agent strings to TLS cipher suite lists. Other research has examined how malware uses TLS and the prevalence of HTTPS interception.

### Conclusions

Our longitudinal study shows that the TLS ecosystem has improved significantly over the past six years, with the adoption of stronger AEAD designs, the decline of weak algorithms, and the increasing use of forward secrecy. However, a long tail of legacy software and devices continues to use older cipher suites. We have discussed the reasons for this and the impact of security research on these changes. Our datasets reveal many other insights, such as the response to the TLS renegotiation attack and the limited uptake of the "Encrypt-then-MAC" extension.

### Acknowledgments

We thank the Censys team for their support, Mat√≠as Spatz for his help in collecting TLS fingerprints for Windows, and Dave Levin and the anonymous reviewers for their feedback. This work was supported by the US National Science Foundation and the UK EPSRC. Partial support was also provided by the Regional Government of Madrid.