Cautious! A New Exploitation Method! 
No Pipe but as Nasty as Dirty Pipe
#BHUSA  @BlackHatEvents 
Zhenpeng Lin, Yuhang Wu, Xinyu Xing 
Northwestern University
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Who Are We
Zhenpeng Lin 
PhD Student 
zplin.me
Xinyu Xing 
Associate Professor 
xinyuxing.org
Yuhang Wu 
PhD Student 
yuhangw.blog
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Recap About Dirty Pipe
• CVE-2022-0847 
• An uninitialized bug in Linux kernel’s pipe subsystem 
• Affected kernel v5.8 and higher 
• Data-only, no effective exploitation mitigation 
• Overwrite any files with read permission 
• Demonstrated LPE on Android
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
What We Learned
• Data-only is powerful 
• Universal exploit 
• Bypass CFI (enabled in Android kernel) 
• New mitigation required
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
What We Learned
• Data-only is powerful 
• Universal exploit 
• Bypass CFI (enabled in Android kernel) 
• New mitigation required 
• Dirty Pipe is not perfect 
• Cannot actively escape from container 
• Not a generic exploitation method
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Introducing DirtyCred
• High-level idea 
• Swapping Linux kernel Credentials 
• Advantages 
• A generic exploitation method, simple and effective 
• Write a data-only, universal (i.e., Dirty-Pipe-liked) exploit 
• Actively escape from container
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Comparison with Dirty Pipe
• A generic exploitation method?  
• Write a data-only, universal exploit? 
• Attack with CFI enabled (on Android)? 
• Actively escape from container? 
• Threat still exists?
Dirty Pipe
DirtyCred
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Kernel Credential
• Properties that carry privilege information in kernel 
• Defined in kernel documentation 
• Representation of privilege and capability 
• Two main types: task credentials and open file credentials 
• Security checks act on credential objects
Source: https://www.kernel.org/doc/Documentation/security/credentials.txt
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
• Struct cred in kernel’s implementation
Task Credential
un- 
privileged
un- 
privileged
freed
struct cred on kernel heap
freed
freed
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
freed
• Struct cred in kernel’s implementation
Task Credential
un- 
privileged
un- 
privileged
un- 
privileged
freed
freed
struct cred on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
freed
• Struct cred in kernel’s implementation
Task Credential
un- 
privileged
un- 
privileged
un- 
privileged privileged
freed
struct cred on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Open File Credentials
• Struct file in kernel’s implementation
Freed
~/dummy
f_op
f_cred
f_mode 
O_RDWR
~/dummy
f_op
f_cred
f_mode 
O_RDWR
struct file on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Open File Credentials
• Struct file in kernel’s implementation
~/dummy
f_mode 
O_RDWR
f_op
f_cred
~/dummy
f_op
f_cred
f_mode 
O_RDWR
~/dummy
f_op
f_cred
f_mode 
O_RDWR
int fd = open(“~/dummy”, O_RDWR); 
struct file on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
~/dummy
Open File Credentials
• Struct file in kernel’s implementation
~/dummy
f_mode 
O_RDWR
f_op
f_cred
~/dummy
f_op
f_cred
f_mode 
O_RDWR
~/dummy
f_op
f_cred
f_mode 
O_RDWR
int fd = open(“~/dummy”, O_RDWR); 
struct file on kernel heap
f_cred
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Open File Credentials
• Kernel checks permission on the file object when accessing
~/dummy
f_mode 
O_RDWR
f_op
f_cred
~/dummy
f_op
f_cred
f_mode 
O_RDWR
~/dummy
f_op
f_cred
f_mode 
O_RDWR
check perm
int fd = open(“~/dummy”, O_RDWR); 
write(fd, “HACKED”, 6); 
struct file on kernel heap
check perm
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Open File Credentials
• Write content to file on disk if permission is granted
~/dummy
f_mode 
O_RDWR
f_op
f_cred
~/dummy
f_op
f_cred
f_mode 
O_RDWR
~/dummy
f_op
f_cred
f_mode 
O_RDWR
check perm
int fd = open(“~/dummy”, O_RDWR); 
write(fd, “HACKED”, 6); 
Write to disk
struct file on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Open File Credentials
• Write denied if the file is opened read-only
~/dummy
f_mode 
O_RDONLY
f_op
f_cred
~/dummy
f_op
f_cred
f_mode 
O_RDWR
~/dummy
f_op
f_cred
f_mode 
O_RDWR
check perm
int fd = open(“~/dummy”, O_RDONLY); 
write(fd, “HACKED”, 6); 
struct file on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Open File Credentials
• Write denied if the file is opened read-only
~/dummy
f_mode 
O_RDONLY
f_op
f_cred
~/dummy
f_op
f_cred
f_mode 
O_RDWR
~/dummy
f_op
f_cred
f_mode 
O_RDWR
check perm
int fd = open(“~/dummy”, O_RDONLY); 
write(fd, “HACKED”, 6); 
Failed write to 
disk
struct file on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
DirtyCred: Swapping Linux Kernel Credentials
High-level idea 
• Swapping unprivileged credentials with privileged ones 
Two-Path attacks 
• Attacking task credentials (struct cred) 
• Attacking open file credentials (struct file)
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
DirtyCred: Swapping Linux Kernel Credentials
Two-Path attacks 
• Attacking task credentials (struct cred) 
• Attacking open file credentials (struct file)
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Attacking Task Credentials
un- 
privileged
un- 
privileged
un- 
privileged privileged
freed
struct cred on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Step 1. Free a unprivileged credential with the vulnerability
Attacking Task Credentials
un- 
privileged
un- 
privileged
un- 
privileged privileged
freed
struct cred on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Step 1. Free a unprivileged credential with the vulnerability
Attacking Task Credentials
un- 
privileged
freed
un- 
privileged privileged
freed
struct cred on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Step 2. Allocate privileged credentials in the freed memory slot
Attacking Task Credentials
un- 
privileged
freed
un- 
privileged privileged
freed
struct cred on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Step 2. Allocate privileged credentials in the freed memory slot
Attacking Task Credentials
un- 
privileged privileged
un- 
privileged privileged
freed
struct cred on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Step 3. Operate as privileged user
Attacking Task Credentials
un- 
privileged privileged
un- 
privileged privileged
freed
struct cred on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
DirtyCred: Swapping Linux Kernel Credentials
Two-Path attacks 
• Attacking task credentials (struct cred) 
• Attacking open file credentials (struct file)
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Attacking Open File Credentials
• Write content to file on disk if permission is granted
~/dummy
f_mode 
O_RDWR
f_op
f_cred
~/dummy
f_op
f_cred
f_mode 
O_RDWR
~/dummy
f_op
f_cred
f_mode 
O_RDWR
check perm
int fd = open(“~/dummy”, O_RDWR); 
write(fd, “HACKED”, 6); 
struct file on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Attacking Open File Credentials
Step 1. Free file obj after checks, but before writing to disk
~/dummy
f_mode 
O_RDWR
f_op
f_cred
~/dummy
f_op
f_cred
f_mode 
O_RDWR
~/dummy
f_op
f_cred
f_mode 
O_RDWR
check perm
int fd = open(“~/dummy”, O_RDWR); 
write(fd, “HACKED”, 6); 
struct file on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Attacking Open File Credentials
Step 1. Free file obj after checks, but before writing to disk
~/dummy
f_mode 
O_RDWR
f_op
f_cred
~/dummy
f_op
f_cred
f_mode 
O_RDWR
~/dummy
f_op
f_cred
f_mode 
O_RDWR
check perm
freed
int fd = open(“~/dummy”, O_RDWR); 
write(fd, “HACKED”, 6); 
struct file on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Attacking Open File Credentials
Step 2. Allocate a read-only file obj in the freed memory slot
/etc/
passwd
f_mode 
O_RDWR
f_op
f_cred
~/dummy
f_op
f_cred
f_mode 
O_RDWR
~/dummy
f_op
f_cred
f_mode 
O_RDWR
freed
int fd = open(“~/dummy”, O_RDWR); 
write(fd, “HACKED”, 6); 
check perm
open(“/etc/passwd”, O_RDONLY);
struct file on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Attacking Open File Credentials
Step 2. Allocate a read-only file obj in the freed memory slot
/etc/
passwd
f_mode 
O_RDONLY
f_op
f_cred
~/dummy
f_op
f_cred