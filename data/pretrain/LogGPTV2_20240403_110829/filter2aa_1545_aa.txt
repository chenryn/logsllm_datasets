### Caution: A New Exploitation Method!

**Title: No Pipe but as Nasty as Dirty Pipe**

**Event:** #BHUSA @BlackHatEvents

**Authors:**
- **Zhenpeng Lin** (PhD Student, Northwestern University) - [zplin.me](http://zplin.me)
- **Yuhang Wu** (PhD Student, Northwestern University) - [yuhangw.blog](http://yuhangw.blog)
- **Xinyu Xing** (Associate Professor, Northwestern University) - [xinyuxing.org](http://xinyuxing.org)

**Twitter Handle:**
- Zhenpeng Lin: @Markak_

---

### Recap of Dirty Pipe

- **CVE-2022-0847**: An uninitialized bug in the Linux kernelâ€™s pipe subsystem.
- **Affected Kernels**: Version 5.8 and higher.
- **Exploit Characteristics**:
  - Data-only, no effective exploitation mitigation.
  - Can overwrite any file with read permission.
  - Demonstrated Local Privilege Escalation (LPE) on Android.

**Key Takeaways:**
- Data-only exploits are powerful.
- Universal exploit that can bypass Control Flow Integrity (CFI), which is enabled in the Android kernel.
- New mitigations are required.

**Limitations:**
- Dirty Pipe is not perfect.
- Cannot actively escape from a container.
- Not a generic exploitation method.

---

### Introducing DirtyCred

**High-Level Idea:**
- Swapping Linux kernel credentials to gain elevated privileges.

**Advantages:**
- A generic, simple, and effective exploitation method.
- Write a data-only, universal (i.e., Dirty-Pipe-like) exploit.
- Actively escape from a container.

**Comparison with Dirty Pipe:**
- **Generic Exploitation Method?**
  - Dirty Pipe: No
  - DirtyCred: Yes
- **Write a Data-Only, Universal Exploit?**
  - Dirty Pipe: Yes
  - DirtyCred: Yes
- **Attack with CFI Enabled (on Android)?**
  - Dirty Pipe: Yes
  - DirtyCred: Yes
- **Actively Escape from Container?**
  - Dirty Pipe: No
  - DirtyCred: Yes
- **Threat Still Exists?**
  - Dirty Pipe: Partially
  - DirtyCred: Yes

---

### Kernel Credentials

**Definition:**
- Properties that carry privilege information in the kernel.
- Defined in the kernel documentation.
- Representation of privilege and capability.
- Two main types: task credentials and open file credentials.
- Security checks act on credential objects.
- Source: [Kernel Documentation](https://www.kernel.org/doc/Documentation/security/credentials.txt)

**Task Credentials (struct cred):**
- Task credentials are stored in the kernel heap.
- Unprivileged tasks have unprivileged credentials.
- Freed credentials can be swapped with privileged ones.

**Open File Credentials (struct file):**
- Open file credentials are also stored in the kernel heap.
- The `f_cred` field in the `struct file` represents the file's credentials.
- When a file is opened, the kernel checks permissions based on `f_cred`.

**Example:**
```c
int fd = open("~/dummy", O_RDWR);
write(fd, "HACKED", 6); // Permission check before writing
```

- If the file is opened read-only (`O_RDONLY`), the write operation will fail.

---

### DirtyCred: Swapping Linux Kernel Credentials

**High-Level Idea:**
- Swap unprivileged credentials with privileged ones.

**Two-Path Attacks:**
1. **Attacking Task Credentials (struct cred):**
   - **Step 1:** Free an unprivileged credential using a vulnerability.
   - **Step 2:** Allocate privileged credentials in the freed memory slot.
   - **Step 3:** Operate as a privileged user.

2. **Attacking Open File Credentials (struct file):**
   - **Step 1:** Free the file object after permission checks but before writing to disk.
   - **Step 2:** Allocate a read-only file object in the freed memory slot.
   - **Step 3:** Perform operations with the new, privileged file object.

**Example:**
```c
int fd = open("~/dummy", O_RDWR);
write(fd, "HACKED", 6); // Permission check before writing
// Step 1: Free the file object
// Step 2: Allocate a read-only file object for /etc/passwd
open("/etc/passwd", O_RDONLY);
```

---

This optimized version of the text provides a clearer, more structured, and professional presentation of the information. It includes proper formatting, headings, and a logical flow to make the content more accessible and understandable.