地粘贴到浏览器的代理设置中。
73
---
## Page 74
第4章配置Fiddler和客户端
4.4.2从其他应用中捕获数据流
Windows中最常用的HTTP/HTTPS/FTP网络协议栈是WinINET，IE以及无数其他客
户端应用都使用该协议栈。这些应用通常可以和Fidder无缝集成，因为Fiddler启动后，默认
情况下会自动设置WinINET代理。
但是，Windows中还有儿种不是基于WININET的网络协议栈。一些应用程序，如Firefox，
有自带的网络组件。在某些情况下，这些组件会在启动时自动设置为使用Winlnet代理，面
在另外一些情况下，必须手动配置。
WinHTTP
WinHTTP与WININET类似，区别在于它是专为Windows服务进程以及一些其他需要在
后台静默行动的场景设计的。使用它的Windows组件包括BITS（后台智能传输服务）、Windows
Update、CryptoAPI证书验证码等。如果在基于WinHTTP的应用程序启动之前，Fiddler已经
被启动了，WinHTTP可能会自动连接到Fiddler，连接与否主要依赖于WinHTTP的使用方式。
如果应用程序中会直接使用WinHTTP，可以使用WinHtpOpen或WinHtpSetOption这两个
API将请求直接转发给Fiddler。如果无法修改应用程序的代码，使用命令行工具修改默认的
WinHTTP代理也能得到类似的结果。
在WindowsXP和Windows 2003或更早的版本中，命令如下：
Proxycfg -p http=127.0.0.1:8888;https=127.0.0.1:8888
在WindowsVista和更高版本中，命令有所不同，如下：
Netsh winhttp set proxy 127.0.0.1:8888
如果按照上述步骤修改了WinHtp的默认设置，关闭fiddler之后，应该手动复原代理的
设置，否则，基于WinHTTP的应用程序很可能无法连接到网络。
NET框架
Microsoft的.NET框架使用System.Net集实现HTTP/HTTPS和FTP协议。在某些情况下，
应用启动时，基于.NET的应用会自动采用WinINET代理，因此在应用启动之前先启动Fiddler
可以确保Fiddler能够捕捉到应用的数据流。
否则，也可以按照如下方式设置代理，把应用代码修改为临时指向Fiddler：
Globa1ProxySelection.Select = new WebProxy("127.0.0.1", 8888);
74
---
## Page 75
4.4配置客户端
此外，你也可以在各个WebRequest对象中手动指定代理：
objRequest.Proxy= new WebProxy(*127.0.0.1", 8888);
如果你无法访问应用的源代码，可以在应用程序的配置中指定代理。编辑（或创建）应
用文件夹中的yourappname.exe.config文件，添加或更薪以下部分：
/>
除了修改应用程序的清单外，还可以通过文件machine.config中的configuration部分调整
机器配置，更新文件machine.config的优点在于该变化会在所有账号下的应用程序的.NET代
码中生效，包括运行在IS上的ASPNET所使用的服务的账号下运行的应用。
不管如何设置代理，NET总是可以绕过Fiddler，直接处理指向本机的URL（即“回路"）。
调试回路数据流需要额外的配置，在本章后面会具体介绍。
Java
一些Java运行时环境（JRE）会自动采用WinINET代理。否则，如何设置默认的代理服
务器取决于你使用的是JRE版本。有一个版本的JRE中包括了WindowsControlPanel的小程
序（applet），可以选择代理。使用下面这两个命令可以修改JRE的设置：
 x-0x-x-
如果上述两种方式都不能正常工作，可以查看JRE的说明文档。
PHP/CURL
在PHP中通过CURL发送网络请求时，要想将请求转发给Fiddler代理，可在发送Web
请求前添加下面这行代码，其中Sch是函数curl_initO所返回的handle：
cur1_setopt(Sch, CURLOPT_PROXY,'127.0.0.1:8888');
75
---
## Page 76
第4章配置Fiddler和客户端
4.4.3通过服务捕获数据流
Fiddler只会注册为当前用户的系统代理。系统服务是以不同的账户运行的，包括ASPNET
和IISWorkerProcesses，因而这些服务在默认情况下不会间Fiddler发送数据。
把Fiddler配置为不同系统账户代理的方法不一，不同场景有不同的配置方式。举个例子，
要捕捉ASP.NET网页的Web服务调用，可以编辑ASP.NET安装文件web.config或
machine.config，或修改代码，通过.NET框架配置一节中所描述的步骤，手动指定Web代理。
对于使用其他网络栈的Windows服务（如Java或WinHTTP），需要查找这些Web服务
的配置并手工配置代理。
4.4.4捕捉“回路”数据流
当服务器、客户端以及Fiddler运行在同一台机器上时，一般需要采取特殊的配置才能捕
提到客户端应用发送到服务器的流量。这种数据流称为回路（loopback）数据流，因为这些数
据流一直没有离开过本机。回路数据流通常包括发送到回路地址127.0.0.1，[：1]和域名
localhost的数据，有时也包括发送到当前计算机的TCP/IP地址的数据。
对于回路数据流，有三种场景会出现问题：
1）很多客户端应用和框架通过硬编码的方式避免代理服务器处理回路数据流。
2）在WindowsVista以及更新的版本中，当客户端和服务器位于同一台计算机上时，HTTP
身份验证行为不一致。
3）在Windows8中，Metro风格的应用无法连接到运行在应用程序包以外的回路监听器
（如Fiddler）。
以下我们将分别探讨这些问题。
绕过回路
很多客户端应用自动绕过回路数据流代理，认为由于代理服务器的地址和客户端应用设
置的地址不同，远程代理服务器无法处理流向“127.0.0.1”的数据流。然面，这些客户端应
用没有考虑到代理服务器和客户端应用（如Fiddler）运行在同一台机器上的场景，在这种情
况下，代理服务器和客户端的地址是相同的。
在IE9版本之前，通过WinINET网络栈（如IE、Ofice等使用该栈）发送的所有数据流
76
---
## Page 77
4.4配置客户端
如果是发送到127.0.0.1、[：1]或主机名localhost，会自动绕过代理服务器。当前的Opera版本
也是如此，Firefox的NoProxyFor默认情况下也是设置为localhost和127.0.0.1。微软的.NET
框架从第一版到第四版的回路请求也会绕过代理。
如果想要使用上述某种客户端连接到运行在本机的服务器上，客户端会忽略代理设置，
直接把数据流发送给服务器。
在Fiddler中，要插捉这种数据流，最简单的方式是改变请求的主机名，让客户端无法识
别自己是否是在向回路地址发送数据。一种简单实用的方式是使用当前计算机的DNS主机名
（比如http://mymachinename），但是这需要了解当前计算机的主机名，对于构建能够在多台机
器上工作的测试用例会变得很复杂。
为了弥补这个缺陷，Fiddler支持设置虚拟主机名，可为回路地址设置别名：
不要用下述方式
应该用下述方式
127.0.0.1
ipv4.fiddler
[=]
ipv6.fiddler
localhost
localhost.fiddler
使用虚拟主机名时，客户端会把数据流发送给Fiddler，Fiddler在请求URL和Host头中
会自动替换为正确的主机名。
在IE9中，WinINET增加了新的功能，支持客户端配置WinNET，通过代理接收回路数
据流。为了配置成这种行为，需要对ProxyBypassList进行配置，使其包含特殊的标记
：Fiddler默认会自动设置这个标记，从而可以很容易地查看发送到本地计算机的
数据流。从Windows8开始，WinHTTP栈也能够识别标识符。期望Opera和.NET
框架在以后的版本中也能够支持把回路数据流发送给代理。
回路身份验证
WindowsVista及更高版本的系统会保护用户免受回路身份验证（loopbackauthentication）
攻击，在这种攻击中，客户端以为是和远程服务器进行身份验证，面实际上是和本机进行身
份验证。这种攻击通常是要提升指定的应用程序在本机运行的优先级。当Windows遇到这种
需要对本机进行身份验证的异常情况时，该身份验证请求会被阻塞。
为了取消回路保护，可按照http:/support.microsoft.com/kb/926642中的描述进行设置，设
置的内容如下：DisableLoopbackCheck=1。
77
---
## Page 78
第4章配置Fiddler和客户端
被Metro风格的Windows8应用阻塞的回路
Windows8推出了一种新的应用隔离技术，名为AppContainer.新的“Metro风格应用”
会使用该技术，包括Metro风格模式的IE，以及从Windows商店中下载的应用。为防止独立
的AppContainer进程和其他进程（大部分优先级更高）通信，会通过防火墙阻止Metro风格
的应用向运行在本机的服务器发起网络连接。不管应用什么主机名，都会被阻塞一连接
http://localhost、http:/127.0.0.1和http://machinename都会失败。终端用户可以在调试或开发
时使用工具CheckNetsolation.exe对单个进程解除这个限制。通过新版的VisualStudio来调试
应用时，也支持临时连接到回路服务器。
默认情况下，如果你在Windows8上运行Fiddler，并启动了Metro风格的浏览器和应用，
你会发现应用无法连接到任何网站，包括互联网上的网站。这是由于Fiddler运行在本机上，
防火墙会阻止应用把数据流发送给它。因为其配置的代理服务器是Fiddler，应用会认为网络
连接不可用，放弃请求。
为了解决这个问题，我创建了一个图形化工具，名为EnableLoopback，它支持对一个或多
个AppContainers取消回路限制。Fiddler版本4的用户会发现默认情况下已经安装了
EnableLoopback.exe工具，点击Fiddler工具栏左侧的Win8 Config按
Ele[dBulesIoo
钮可以启动这个工具，如图4-6所示。
）
Fiddler版本2的用户可以从http:/fiddler2.com/r/7Win8EL下载
图4-6
EnableLoopback.exe这个工具。调整LoopbackExemptions（回路免除）列表需要有管理员权
限。当程序启动时，会弹出对话框，要求确认可以以管理员身份运行。
当启动EnableLoopback.exe工具后，它会在列表中列出本地所有的AppContainers。可以分
别调整每个AppContainer，也可以使用该工具上方的按钮对所有的AppContainers做免除设置。
修改完成后，点击SaveChanges按钮，可以把这些修改应用到Windows窗口，如图47所示。
Aeoacey
CHreACS0
$15
sopat.
mdr. 5-5
CONTN
图 4-7
78
---
## Page 79
4.4配置客户端
在免除app的AppContainer的回路限制后，就可以使用Fidler调试这些APP的数据流
了，与普通桌面应用一样。
4.4.5
在MaxOSX上运行Fiddler
作为Windows应用，Fiddler本身无法运行在MacOSX上。然而，VMWare Fusion或
ParallelsDesktop这样的虚拟化产品使得Fiddler这样的Windows应用也可以在Mac的虚拟机
上运行，如图4-8所示。
ac 05x10_7_3) Appl
peghoy
图 4-8
要在Parallels下运行Fiddler，只需要对配置做的少量修改。安装Parallels，重新配置，把
Windows虚拟机的Hardware>Network1Type设置成使用BridgedNetwork模式，如图4-9所示。
00
 video
MCo
rlopy Dsk
格 Pist
FYP4
CD/DVD1
MAC
p2po
图 4-9
79
---
## Page 80
第4章配置Fiddler和客户端
按照上述方式配置之后，Mac就可以向虚拟机发送网络数据流了。重新启动虚拟机，并
在虚拟机中的Windows操作系统上安装Fiddler。在配置Fiddler时，点击Tools>FiddlerOptions
>Connections选项，选中Allowremote computers toconnect。设置完成后，需重启Fiddler才
能生效。可能需要重新配置防火墙，使它允许向Fiddler进程发
送连接请求。执行完以上步骤后，Fiddler就可以接收Mac上发
MSDNSearchx
送过来的数据流了。现在，需要手动配置Mac，把Web数据流
Network connection active
发送给运行在虚拟机上的Fiddler。
Hlost: ericlewrencSacf
首先，需要了解虚拟机的IP地址。把鼠标悬停在Fiddler
fe80:8dbf:2bebc691:5b7%11
工具栏右侧的Online标识符上。工具栏提示框会显示分配给虚
fe80:57:107c:3f57:f0fa%13
192.168.15.5
拟机的IP地址，如图4-10所示。
图 4-10
然后，点击AppleMenu和SystemPreferences。点击Network图标，再点击Advanced按
钮。点击Proxies选项卡。选中WebProxy（HTTP）选项和SecureWebProxy（HTTPS）选项，
输入虚拟机的Ipv4地址：指定代理运行在8888端口，如图4-11所示。
TCP/IPDNSWINS802.1XProxiesHardware
Selectaprotocol toconfigure:
WebProxy Server
Auto Proxy Discovery
192.168.15.5
8888
Web Proxy (HTTP)
atic Proxy Conhig
Proxy serverrequirespassword
 Secure Web Proxy (HTTPS)