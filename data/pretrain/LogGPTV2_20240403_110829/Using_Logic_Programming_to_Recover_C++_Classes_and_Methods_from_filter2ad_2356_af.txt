7.5
222
0.5
42
1.4
276
8.7
571
445
15.1
57.4
1,322
12.1
927
1.8
98
68
1.0
73.5
1,673
61.3
1,256
14.0
Fact Exporting
Mem.
(MiB)
1,696.9
354.9
326.4
757.8
136.8
1,932.1
422.8
839.3
168.6
43.1
1,075.8
1,210.1
1,363.9
166.1
736.3
1,675.5
808.4
64.6
198.0
1,210.8
499.1
3,063.6
1,570.6
167.1
140.1
3,558.8
2,785.0
999.0
Reasoning
Time
(min)
0.9
1.2
0.2
5.1
0.9
25.5
21.1
66.5
0.1
0.7
81.0
85.9
630.2
0.1
3.0
1.9
0.8
0.0
0.0
0.4
4.5
550.0
145.9
0.1
0.1
1,287.3
484.2
125.8
Mem.
(MiB)
30.4
60.8
24.0
133.9
83.2
245.0
210.1
870.5
11.0
26.9
964.6
1,052.2
2,994.0
8.2
108.4
60.2
41.7
4.7
9.6
18.1
34.9
1,428.8
1,234.7
13.5
9.1
3,377.4
1,140.8
525.8
Both
Time
(min)
21.2
5.7
2.7
10.8
2.6
34.7
25.7
79.6
1.6
1.1
98.1
104.8
650.2
1.7
9.5
12.1
8.2
0.5
1.4
9.1
19.6
607.3
158.0
1.8
1.1
1,360.8
545.5
139.8
Table 5: The runtime (in minutes) and memory usage (in mebibytes) that OOAnalyzer consumed on each benchmark. Fact
Exporting represents the runtime and memory used by the fact exporter, whereas Reasoning represents the resources used by
the Prolog reasoning components.
produced by the Visual C++ compiler, and might need to be tai-
lored for other compilers and ABIs. We expect this to mostly be
a straightforward engineering effort, although there is also an in-
teresting research question in whether these types of rules can be
automatically inferred or tuned.
7.3 External classes
Dynamic linking can pose a challenge for C++ abstraction recovery
because class definitions can span multiple executable files. A com-
mon example of this is when the implementation of a base class
is loaded from a dynamically linked library (DLL), while the exe-
cutable itself contains the implementation of the derived class. This
pattern is common in Microsoft Foundation Class (MFC) programs.
MFC provides a variety of base classes (implemented in the MFC
library) that developers customize by creating a class (implemented
in their executable) that inherits from the MFC class. In such pro-
grams, obtaining a complete understanding of the program’s class
relationships requires knowledge from both the executable and the
DLL. One approach to this problem is to load the executable in
conjunction with all of the required dynamic libraries for analysis.
In addition to presenting scalability challenges, this approach can
create confusion about whether the recovered C++ abstractions
are only valid for the specific versions of the DLLs that were ana-
lyzed. This approach is also problematic for malware analysis, since
executables are routinely collected without all required libraries.
Instead of loading all executables and DLLs at the same time,
OOAnalyzer attempts to form a minimal understanding of external
classes by parsing the relocation symbols used for dynamic linking.
C++ compilers encode all the information that is needed to be able
to call a method from another executable module using an encoding
called mangling. The mangled name of a method encodes the class
that the method belongs to, and attributes such as whether the
method is virtual or a constructor. Unlike debug symbols, these
relocation symbols are necessary to run the program, and cannot
be stripped without breaking the program. To leverage this infor-
mation, we built a custom demangler that extracts properties for
names that are mangled according to the Visual Studio name man-
gling scheme.6 This allows OOAnalyzer to reason about these class
6The Visual Studio name mangling scheme does not have a canonical source, but
researchers have reverse engineered most of it [32].
Session 3A: Binary AnalysisCCS’18, October 15-19, 2018, Toronto, ON, Canada438methods without analyzing their code (which may not be avail-
able). Although our ground truth (Section 6.2) does not directly
evaluate OOAnalyzer’s understanding of external classes, we have
found that this information is necessary to inform OOAnalyzer’s
understanding of internal classes that are related to external classes,
which is counted.
8 RELATED WORK
8.1 Recovery of C++ Abstractions
The research most similar to ours recovers a broad set of C++ ab-
stractions including grouping methods into classes, detecting re-
lationships among classes, and detecting special methods such as
constructors and destructors. Compared to these works, OOAna-
lyzer is relatively unique in that it statically recovers information
about all classes (including non-polymorphic classes). Only two
other works [14, 28] attempt to recover information about non-
polymorphic classes, and only one does so statically, which we
discuss first.
ObjDigger [14] is the predecessor of OOAnalyzer, and its de-
velopment significantly informed the overall design and approach
of OOAnalyzer. ObjDigger attempts to recover many of the same
C++ abstractions as OOAnalyzer, and more importantly, is the only
other system we know of that is able to statically recover non-
polymorphic classes. Like OOAnalyzer, ObjDigger does not rely
on RTTI data, and instead leverages vftable analysis and object
pointer tracking. The most significant difference between ObjDig-
ger and OOAnalyzer (and the primary inspiration for developing
OOAnalyzer) is that ObjDigger reasons using procedurally written
code. We found that as we tried to evolve ObjDigger to improve
its accuracy, eventually it became too complicated to understand
how it analyzes very complex scenarios. In OOAnalyzer, we over-
came this largely by introducing hypothetical reasoning, which
allows OOAnalyzer to reason through complex scenarios using
simple rules. We showed in Section 6.4 that OOAnalyzer performed
significantly worse when hypothetical reasoning was disabled.
Our evaluation includes the same five executables that ObjDigger
was evaluated on (CImg, light-pop3-smtp, optionparser, PicoHttpD,
and x3c) but in our prior work we evaluated them using a different
metric. Specifically, we scored each program using the percentage
of methods that were associated with the “correct class”. As we
note in Section 6.3, without a clear identifier such as a vftable, this
metric is subjective and ill-defined whenever the recovered classes
do not bear a clear resemblance to the ground truth. We believe
edit distances are a much better metric.
We ran ObjDigger’s results through our new edit distance based
evaluation system to provide a fair comparison, and the results can
be seen in Table 6. OOAnalyzer recovers classes more accurately
for all programs, including the five programs that ObjDigger was
originally tested on, which are shown in the first five rows. On
these five programs, OOAnalyzer achieved an average relative edit
distance of 15.7%, compared to 44.6% for ObjDigger. ObjDigger
performed very poorly on the programs we did not evaluate in
the ObjDigger paper [14]; it only achieved an edit distance of less
than 50% on one program. It also failed to produce a result on four
of the MySQL programs, either because it crashed or took longer
than 24 hours. The majority of ObjDigger’s edits are Adds, which
indicates that ObjDigger did not detect the method, or was unable
to determine which class it is associated with. Finally, although
ObjDigger can also identify constructors, in our past work we did
not measure its effectiveness at that or on any of the properties in
Table 4.
Lego [28] is another system that can recover non-polymorphic
classes from C++ executables. Unlike OOAnalyzer (and ObjDigger),
Lego recovers this information by processing dynamic runtime
traces, which allows it to recover class hierarchies from OO lan-
guages other than C++. In addition to recovering classes, Lego can
also recover inheritance and composition relationships between
classes, and identify destructor methods. Lego’s primary disadvan-
tage is that, as a dynamic analysis, it relies on having test inputs
that trigger the usage of classes and methods. Unfortunately, this
makes Lego less applicable when such inputs are unavailable. It also
makes it difficult to perform an apples-to-apples comparison with
OOAnalyzer, because Lego’s performance depends on the quality
of the testcases it uses.
SmartDec [9, 10] is a C/C++ decompiler for executables. Smart-
Dec naturally recovers C++ abstractions, but also has functionality
needed for decompilation such as control flow structuring and ex-
ception handler analysis, which OOAnalyzer does not. Similar to
OOAnalyzer, SmartDec tracks object pointers, performs vftable
analysis, and does not rely on RTTI. SmartDec, however, only at-
tempts to recover the methods of polymorphic classes (i.e., classes
with virtual functions).
Yoo and Barua [33] describe a system using SecondWrite [2]
to statically recover a wide variety of C++ abstractions, including
exception handlers. Their system relies on RTTI data, and thus only
recovers information about polymorphic classes. Their approach
may also be infeasible when analyzing malware, which sometimes
has RTTI data disabled to impede analysis.
Katz [15] uses a combination of program analysis and machine
learning to map virtual calls to their targets. They train a classifier
to estimate each method’s likelihood of being dispatched based on
learned statistical models of object usage events, including reads,
writes, and calls. These object usage events are generated using a
lightweight static symbolic analysis similar to OOAnalyzer’s (Sec-
tion 4.1). Whereas OOAnalyzer uses hand-written rules that encode
C++ domain knowledge, Katz uses models that are automatically
trained for each program. Future research could explore using ma-
chine learning to automatically generate C++ reasoning rules for
OOAnalyzer.
8.2 Security Protections for C++ Binaries
Early control-flow integrity (CFI) protection systems [1] inferred al-
lowed control-flow transitions from source code. Later, researchers
developed CFI systems using binary analysis and rewriting tech-
niques that could be applied directly to executables without re-
quiring access to source code [31, 35]. Such systems did not take
into account any knowledge of C++ implementation mechanisms,
and enforced relatively coarse-grained policies for C++ executa-
bles [21, 24]. While some researchers have proposed techniques
that improve precision in language-agnostic ways [30], those fo-
cusing on recovering C++ abstractions [8, 19, 21, 34, 35] are more
comparable to OOAnalyzer.
Session 3A: Binary AnalysisCCS’18, October 15-19, 2018, Toronto, ON, Canada439✓
✓
✓
✓
✓
✓
1
2
0
1
0
0
0
0
0
0
—
0
0
—
—
—
3
0
0
0
0
1
12
1
2
1
1
Program
ObjDigger
Join Edits
In [14] Opt. Com-
Size
piler
(KiB)
590
VS10
132
VS10
55
VS10
386
VS10
42
VS10
505
✓ VS15
264
VS10
97
✓ VS10
664
VS10
✓ VS10
302
✓ VS12 4,386
136
VS12
✓ VS12
54
✓ VS12 4,570
✓ VS12 4,678
✓ VS12 5,321
594
VS10
222
✓ VS10
276
VS9
571
VS9
445
VS9
VS10 1,322
927
VS11
98
VS10
VS10
68
VS9 1,673
VS9 1,256
OOAnalyzer
%
9.5
CImg
14.9
light-pop3-smtp
10.7
optionparser
25.3
PicoHttpD
17.9
x3c
33.2
Firefox
26.8
log4cpp Debug
19.8
log4cpp Release
33.6
muParser Debug
30.6
muParser Release
30.9
MySQL cfg_editor.exe
28.7
MySQL connection.dll
12.5
MySQL ha_example.dll
30.6
MySQL libmysql.dll
31.5
MySQL mysql.exe
31.6