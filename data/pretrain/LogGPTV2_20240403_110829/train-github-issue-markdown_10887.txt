In 1.3.0,
    struct PatriciaTree {
        data: Box,
        child_l: Box,
    }
    impl PatriciaTree {
        fn delete(&mut self) {
            let child = Box::new(PatriciaTree { data: Box::new(5), child_l: Box::new(5) });
            let PatriciaTree { data, child_l } = *child;
        }
    }
    fn main() {}
fails with
    break3.rs:10:34: 10:41 error: use of moved value: `child` [E0382]
    break3.rs:10         let PatriciaTree { data, child_l } = *child;
                                                  ^~~~~~~
    break3.rs:10:28: 10:32 note: `child` moved here (through moving `child.data`) because it has type `Box`, which is moved by default
    break3.rs:10         let PatriciaTree { data, child_l } = *child;
                                            ^~~~
    break3.rs:10:28: 10:32 help: if you would like to borrow the value instead, use a `ref` binding as shown:
    break3.rs:           let PatriciaTree { ref data, child_l } = *child;
    error: aborting due to previous error
This is a common pattern for moving all the fields at once out of a struct
(since moving them one by one could introduce memory unsafety).
**Edit:** I posted the wrong error message in the first version of this bug;
fixed now.