r15, rax的污点寄存器rax的值。然后按照原来的两行代码，将rax替换为r15。最后，将r15移回rax，并且从堆栈中还原r15：
    MOV [rsp-1000], r15
    MOV r15, rax
    SHL QWORD r15, 1
    ADD QWORD r15, rax
    MOV rax, r15
    MOV r15, [rsp-1000]
**跳转和调用**
JMP、CALL和RET处理程序本质上是带有一些附加步骤的一元操作。首先，弹出堆栈中的值：
值（value） | 值指令（value instructions） | 额外值（extra） | 额外指令（extra instructions）  
---|---|---|---  
0xFFFFF8800588FCBA |  | 0xFFFFF8800588FCBA |  
堆栈变为空。如果该值是一个字节码地址，那么反编译器会在十六进制字符串前加上addr，为跳转目标生成一个标签，如：
    JMP _addr_FFFFF8800588FCBA
在目标地址也有同样的标签：
        ADD QWORD rsp, 8
        RET
    _addr_FFFFF8800588FCBA:
        MOV DWORD eax, 1
目标也可以是符号表达式。其中，[rsp]非常有趣，因为JMP [rsp]在本质上与RET相同。上面的反编译器片段显示了一个使用RET替代JMP
[rsp]的例子。
**条件跳转**
条件跳转if
x→y很容易实现：根据上一节中的表格确定助记符，然后如果给定的是相对偏移量，则将目标转换为绝对地址。跳转目标的处理与处理程序0x02相同。一个输出例子：
    JNZ _addr_FFFFF8800588FCBA
处理程序0x0B中的虚拟数据类型转换只需要转换为相应的助记符和输出。
**移除栈元素**
处理程序POPD从栈中移除n个元素，并且输出值槽和额外槽中的所有指令。如：
值（value） | 值指令（value instructions） | 额外值（extra） | 额外指令（extra instructions）  
---|---|---|---  
r10d | AND DWORD r10d, r10d | addr(r10) |  
r8d | XOR DWORD r8d, r8d | addr(r8) |  
ebx | AND DWORD ebx, ebx | addr(rbx) |  
变成：
值（value） | 值指令（value instructions） | 额外值（extra） | 额外指令（extra instructions）  
---|---|---|---  
ebx | AND DWORD ebx, ebx | addr(rbx) |  
输出：
    AND DWORD r10d, r10d
    XOR DWORD r8d, r8d
**交换栈元素**
STACKSWP处理程序交换栈两个顶部元素中的值槽，包括值指令部分。例如：
值（value） | 值指令（value instructions） | 额外值（extra） | 额外指令（extra instructions）  
---|---|---|---  
r10d | AND DWORD r10d, r10d | addr(r10) |  
r8d | XOR DWORD r8d, r8d | addr(r8) |  
变成：
值（value） | 值指令（value instructions） | 额外值（extra） | 额外指令（extra instructions）  
---|---|---|---  
r8d | XOR DWORD r8d, r8d | addr(r10) |  
r10d | AND DWORD r10d, r10d | addr(r8) |  
没有输出。
**取消引用**
取消引用只发生在堆栈上，不生成任何输出。例如：
值（value） | 值指令（value instructions） | 额外值（extra） | 额外指令（extra instructions）  
---|---|---|---  
rax | ADD QWORD rax, rsp ADD QWORD rax, 56 | addr(rax) |  
变成：
值（value） | 值指令（value instructions） | 额外值（extra） | 额外指令（extra instructions）  
---|---|---|---  
[rsp + rax + 56] |  | rax | ADD QWORD rax, rsp ADD QWORD rax, 56  
如果取消引用发生，转换还会将ADD指令替换为+。因此，在许多情况下，取消引用可以清除指令并将其移动到值（value）部分。
**不改变堆栈的虚拟指令**
两个什么也不做的指令：NOP,TRIPLE。两个修改无关紧要状态变量的指令：SET1,STATE。对这四个指令进行二进制转换，没有任何变化。
**乘法和除法**
乘法(MUL)和除法(DIV)是特别的：首先，将两个虚拟寄存器rax和rdx复制到本地寄存器。然后从堆栈中弹出一个值，如：
值（value） | 值指令（value instructions） | 额外值（extra） | 额外指令（extra instructions）  
---|---|---|---  
rcx |  | addr(rcx) |  
栈清空。然后执行MUL  或者DIV ，例如，MUL BYTE
cl。结果不会再压到堆栈上，相反的是，虚拟上下文存储这两个本地寄存器rax和rdx。
有符号乘法(IMUL)的工作方式也不同。指令从堆栈中弹出两个值。第一个存入rdx，第二个存入rax。然后根据大小计算IMUL Byte dl、IMUL
Word dx、IMUL Dword edx或IMUL Qword rdx。最后，rdx和rax被压回到堆栈上。
例如，执行之前的栈：
值（value） | 值指令（value instructions） | 额外值（extra） | 额外指令（extra instructions）  
---|---|---|---  
r9 |  | addr(r9) |  
rax |  | addr(rax) |  
执行后为：
值（value） | 值指令（value instructions） | 额外值（extra） | 额外指令（extra instructions）  
---|---|---|---  
rdx |  | addr(rax) |  
rax |  | addr(r9) |  
这个过程的汇编代码：
    MOV rdx, r9d
    IMUL DWORD rdx
**压入**
处理程序0x18和0x12中的两个PUSH指令将最近的寄存器或寄存器的地址压入栈。二进制转换只改变堆栈，而不产生任何输出。
例如，压入寄存器rbp：
值（value） | 值指令（value instructions） | 额外值（extra） | 额外指令（extra instructions）  
---|---|---|---  
rax |  | addr(rax) |  
执行后：
值（value） | 值指令（value instructions） | 额外值（extra） | 额外指令（extra instructions）  
---|---|---|---  
rbp |  | addr(rbp) |  
rax |  | addr(rax) |  
**xDIAGy**
比较奇怪的指令MDIAG, MDIAGA, PDIAG, PDIAGA只影响栈，进行翻译只需要移动栈内元素。例如在栈上执行PDIAG：
值（value） | 值指令（value instructions） | 额外值（extra） | 额外指令（extra instructions）  
---|---|---|---  
r9 | ADD QWORD r9, -1 | addr(r9) |  
rax |  | addr(rax) |  
结果为：
值（value） | 值指令（value instructions） | 额外值（extra） | 额外指令（extra instructions）  
---|---|---|---  
rax |  | r9 | ADD QWORD r9, -1  
**例子：二进制转换**
下面的代码片段显示了反汇编和生成的x64程序集
    FFFFF880058766F6 NOP
    FFFFF880058766F7 PUSH dword (addr(r8), addr(r8))
    FFFFF880058766F9 DREFH dword 
    FFFFF880058766FA PUSH dword (r8, addr(r8))
    FFFFF880058766FC AND dword 
    FFFFF880058766FD POPD
                   ▶ AND DWORD r8d, r8d
    FFFFF880058766FE NOP
    FFFFF880058766FF STATE  1
    FFFFF88005876700 IF NOT ZF -> JMP 0xFFFFF8800587C8F8
                   ▶ JNZ _addr_FFFFF8800587C8F8
    FFFFF8800587670A NOP
    FFFFF8800587670B PUSH dword (51EB851Fh, 51EB851Fh)
    FFFFF88005876710 POP dword rax
                   ▶ MOV DWORD eax, 1374389535
    FFFFF88005876712 NOP
    FFFFF88005876713 PUSH dword (addr(r9), addr(r9))
    FFFFF88005876715 DREFH dword 