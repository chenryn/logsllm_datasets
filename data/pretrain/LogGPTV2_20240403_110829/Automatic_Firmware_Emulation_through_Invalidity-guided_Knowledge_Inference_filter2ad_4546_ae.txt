5/1634
4/512
3/877
2/491
w/o Cache
Round #1
Path
Coverage Improvement∗
Fuzzing
Improv.
w/P2IM
Coverage Time(s) QEMU w/µEmu
Rate
24.96x Y(66.50%)
2.68% 67.96%
605/3080
16.42x Y(46.30%)
2.19% 35.90%
28/250
10.69x Y(74.75%)
8.40% 89.74%
167/2080
30.94x Y(54.51%)
1.70% 52.71%
3/364
27.22x Y(32.68%)
1.11% 30.21%
2/652
7.53x Y(27.43%)
3.51% 26.44%
4/170
11.3x Y(34.96%)
4/348
3.57% 40.53%
17.51x Y(46.87%)
2.47% 43.25%
676/2986
14.73x Y(48.55%)
4.21% 62.01%
5/348
48.09x Y(29.02%)
0.68% 32.59%
3/1275
55.17x N(LE)
0.88% 48.30%
350/4231
54.08x N(LE)
0.88% 47.36%
350/4232
0.25% 24.37%
8/876
97.57x N(MC)
0.18% 25.48% 143.85x N(MC)
13/393
36.45x N(IA)
0.72% 26.31%
339/2517
48.81x N(MC)
0.49% 23.90%
7/155
17.33x N(MC)
3.60% 62.33%
99/2884
41.47x N(MC,LE)
1.14% 47.41%
26/410
38.17x N(IA)
0.50% 18.94%
589/1398
13/1236
0.64% 60.30%
94.25x N(MC,LE)
61.95x N(MC,LE)
0.68% 41.97%
4/342
2h*
31s
2h*
12s
673s
12s
36s
2h*
34s
481s
49m
50m
43m
2h*
106m
17s
99m
45s
2h*
18m
31s
Crashes
True/False
0/0
0/0
0/0
6/0
2/0
139/0
0/0
0/0
0/32
12/0
0/0
2/0
98/0
76/0
9/0
0/0
0/0
0/0
0/0
0/0
47/0
Hangs
True/False
0/0
0/0
0/0
0/0
0/0
0/0
0/0
0/0
0/4
0/0
0/0
0/0
0/0
0/0
0/0
0/29
0/0
0/0
0/123
0/0
0/0
*: Coverage = # of visited QEMU translation blocks / total # of basic blocks. This is the same method used in P2IM. The absolute numbers can be found in our extended version.
manually added new board and MCU memory regions to
the P2IM source code3. Note that the same information is
also needed for µEmu. However, we provided an easy-to-use
Lua-based interfaces to quickly conﬁgure the MCU without
modifying the QEMU C source code.
5.2.2 Experiment Results
For each sample, we ﬁrst ran a round of knowledge extraction,
and then started fuzzing for 24 hours. If reinforced knowledge
extraction is triggered, µEmu automatically switches back and
forth between the knowledge extraction phase and dynamic
analysis (fuzzing) phase. We evaluated the results in three
aspects. First, we measured the total time and the number of
rounds needed in KB extraction. We show the performance
improvement with the cache mechanism. Second, we mea-
sured the path coverage with and without µEmu and compared
the result with P2IM. Finally, we show the fuzzing results.
Knowledge Extraction Performance. We recorded the total
number of rounds of reinforced learning and the total time
spent on knowledge extraction across multiple rounds. Table 2
shows the results. In the worst case, the knowledge extraction
phase took less than ten minutes, while for most samples
the knowledge extraction phase can complete within two
minutes. Some complex ﬁrmware like Gateway discovered
multiple new peripheral registers during fuzzing and therefore
switched between the knowledge extraction phase and the
fuzzing phase back and forth several times.
The performance of knowledge extraction is good enough
for practical use cases, especially considering that the KB can
be reused multiple times in ﬁrmware analysis. The reason for
_for_fuzzing.md
3 https://github.com/RiS3-Lab/p2im/blob/master/docs/add_mcu
.md
knowledge extraction process being so efﬁcient is attributed
to the cache mechanism used in the exploration algorithm. In
the right part of the knowledge extraction performance col-
umn in Table 2, we show the number of paths being searched
and consumed time in the symbolic execution with and with-
out using cache KB during the knowledge extraction phase.
For the experiments without using the cache, a target branch
was randomly selected in the exploration. As shown in the
table, using the cache to select favorable branches, much less
time is spent and fewer paths need to be explored to ﬁnish a
round of knowledge extraction. Without using cache, some
ﬁrmware cannot ﬁnish the ﬁrst round. In these cases, we
forcedly stopped the execution after two hours.
Coverage Improvement. As shown in the Table 2, the code
coverage increases 10x to 140x compared to that in the normal
QEMU without peripheral emulation.
In the column showing the results of P2IM, we marked a
letter “Y” for samples that P2IM can emulate and noted the
coverage in the bracket. For those that P2IM cannot emulate,
we marked a letter “N” and noted the reasons. The detailed
explanation for the failure reasons can be found in Section 5.3.
We observe slight improvement in code coverage over P2IM.
Fuzzing. We used our tool to fuzz the task code in the col-
lected samples. These tasks take inputs from the identiﬁed
data registers. We were able to reproduce all the bugs men-
tioned in previous works, except for XML parser sample in
WYCNINWYC [35]. This missed bug is caused by a heap
overﬂow, which can only be detected with a ﬁne-grained mem-
ory checker such as AddressSanitizer [39]. Designing an ad-
vanced memory checker is orthogonal to this work.
In addition to known bugs, we also found two previously
unknown bugs in Steering_Control and µTaskerUSB. The
USENIX Association
30th USENIX Security Symposium    2019
bug in µTaskerUSB is caused by an out-of-bound write. The
USB driver only uses a receive buffer of 512 bytes to read
an input of up to 1,024 bytes, resulting in DoS or data cor-
ruption. This result is encouraging because the same samples
have been extensively fuzzed in previous works, and we can
reasonably anticipate that µEmu is likely to ﬁnd more bugs.
The bug in Steering_Control is caused by a double-free
of a string buffer, allowing for arbitrary write. More speciﬁ-
cally, the ﬁrmware uses dynamic memory to store the received
data from the serial port. If the memory allocation fails, the
same buffer will be freed twice. We have reported the bugs to
the corresponding device vendors. Since Steering_Control
was also tested by P2IM but P2IM failed to ﬁnd the bug, we
further studied the root cause. It turned out this is due to the
way it handles test-cases. Speciﬁcally, P2IM requires the user
to manually set the fork point for fuzzing. In this ﬁrmware
conﬁguration, P2IM only handles very few bytes at the be-
ginning of each test-case, whereas this bug is only triggered
when a long input has been processed. We note this issue
is not caused by P2IM’s limited emulation capability and is
ﬁxable by specifying a proper forking point.
Since we adopted a different strategy in selecting the fork
point with P2IM (automatic vs. manual), it is unfair to di-
rectly compare the number of executed test-cases per second
to evaluate the fuzzing speed. Instead, we measured the execu-
tion time to complete one million basic blocks for µEmu and
P2IM to evaluate the speed. In our experiments, we observed
a slight slow-down of µEmu compared with P2IM (1.2x to
1.7x). We attribute this to the slower execution speed of S2E.
S2E introduces nearly 1.5X runtime overhead over the vanilla
QEMU due to the check of symbolic data in each translation
block execution. This problem can be alleviated using the
single-path mode of S2E [10].
False Crashes/Hangs. In our evaluation, we observed some
false positives in Steering_Control, GPS_Tracker and
3Dprinter. After careful examination, they were caused by
the lack of Direct Memory Access (DMA) support in µEmu.
DMA allows the peripherals to directly access the RAM in-
dependent of the processor. Since it is not simply responding
values to peripheral access operations, symbolic execution
cannot provide any useful knowledge. A recent work [33] has
been speciﬁcally designed to handle DMA.
5.3 Failure Reasons in P2IM
This section explains the root causes for failed emulations
in P2IM. We use the same notation as Table 2 to refer to the
causes.
MC – Mis-categorization of Registers. P2IM categorizes
the peripheral registers based on their access patterns. How-
ever, register mis-categorization could happen as acknowl-
edged by the P2IM authors. For the ﬁrmware samples pro-
vided by P2IM [3], register mis-categorization merely slowed
down the fuzzing process and affected coverage improvement.
For others, we found that mis-categorization actually severely
inﬂuenced the usability of P2IM. That being said, we did
observe failed emulations with P2IM. For example, in the
RF_Door_Lock ﬁrmware, P2IM mistakenly categorized the
RCC register as control register which actually should be a
combination of control and status register. As a result, P2IM
always returned the last written value to this register which
cannot satisfy the ﬁrmware expectation and eventually hung
the execution. In addition, P2IM groups registers based on
spatial adjacency. Registers within 0x200 bytes are consid-
ered to belong to the same peripheral. This assumption is not
applicable for complex peripherals like USB, CAN and Radio
Controller, which have large or separated range. This also
leads to register mis-categorization. The sample Thermostat,
LiteOS_IoT and Zepyhr_SocketCan also stalled during em-
ulation due to register mis-categorization.
IA – Invalid Assumption about Registers. P2IM models a
special kind of register which combines the functionality of
the control register and the status register. It assumes that the
control bits and status bits do not overlap. However, we found
this assumption does not always hold. For example, on the
STM32F103RE chip, the ﬁrst bit of a register in the ADC
peripheral is used as both the control bit and status bit. The
3DPrinter ﬁrmware sets this bit as one and then waits for
it to become zero. Since P2IM recognized this bit as control
bit, it always returned one, making the ﬁrmware stalled. The
same occurred to the sample used in XML_Parser.
LE – Limited Exploration. P2IM cannot ﬁnd appropriate
values for status registers based on existing heuristics. There-
fore, it proposes explorative execution. Speciﬁcally, it pauses
and snapshots the execution at register reading points. Then,
P2IM spawns a worker thread for each candidate value. The
worker thread runs with the assigned candidate and terminates
when it is about to return to the next level callee. Finally, the
best value which does not crash or stall the execution is picked.
The problem with explorative execution is that it is impossible
to try all the candidates in the search space, because there
could be as many as 232 candidates for a peripheral register in
a 32-bit MCU. P2IM simply narrows down the search space
by only investigating candidates with a single bit set, meaning
that only 32 plus 1 candidates are checked. However, based
on our experiments, multi-bit status registers are quite com-
mon, especially in complex peripherals like CAN and USB.
For example, the two samples used in HALucinator use the
SYSCTRL peripheral to control device oscillators and clock
sources. When the ﬁrmware enables the DFLL48M (i.e., Digital
Frequency Locked Loop) feature, a multi-bit status register
(at 0x40000080C) is in use. P2IM cannot ﬁnd the expected
values, so the emulation was stalled.
6 Limitations
Leveraging
achieve
dependency-aware peripheral access handling and constraint-
satisfaction-based response ﬁnding. This enables µEmu to
execution, µEmu
symbolic
can
2020    30th USENIX Security Symposium
USENIX Association
use less heuristics but achieve better accuracy compared with
other works. However, when heuristics fail, there are still
some corner cases and human efforts are needed.
First, the proposed invalidity checking might not cover
all invalid states. Ideally, a proper implementation should
check the error code immediately after peripheral operations
and handle the exception, e.g., by letting the ﬁrmware enter
an inﬁnite loop. However, if the ﬁrmware continues normal
execution, µEmu cannot distinguish which branch target is
better and have to randomly selected one. We show such
an example in Listing 6. In this example, fuzzing test-cases
cannot be fed to the emulator via the data register of the
I2C peripheral. As a result, bugs caused by inputs from the
I2C peripheral cannot be discovered. To deal with this kind
of false negatives, the analyst needs to provide user-deﬁned
program points that µEmu should avoid reaching. Note that
analysts can examine the log information generated by µEmu
to quickly ﬁnd out this information.
Second, we rely on the characteristics described in Sec-
tion 4.6 to identify data registers. However, we did observe
rare cases when a true data register does not exhibit these
characteristics. If a data register is mis-categorized as a T1 or
T2 type, µEmu would only respond to it with a few ﬁxed val-
ues and the fuzzer cannot reach paths that depend on the input
from the data register. In our evaluation, this rarely occurs. As
shown in Table 5, we missed only three out of 43 data registers.
Note that the 43 data registers were identiﬁed by reviewing
the chip manual and therefore can serve as the ground-truth.
If a false negative is discovered, we allow analysts to directly
add additional data registers via the conﬁguration ﬁle.
In addition, µEmu detects inﬁnite/long loops only if the
processor context contains one or more symbols. However,
it might happen that the counter of a long loop is a concrete
value but is dependent upon a symbol outside the loop. µEmu
would miss the detection of this long loop because all the
registers in the loop are concrete values. Fortunately, we did
not observe any such cases in our experiments. Consider-
ing the diversity and complexity of real-world ﬁrmware, we
acknowledge this limitation.
7 Related Work
To enable executing MCU ﬁrmware in an emulated environ-
ment, most of the previous works [28, 32, 34] follow a hybrid
emulation approach, which forward the peripheral access re-
quests to the real hardware. However, this approach suffers
from poor performance. M.Kammerstetter et al. [27] pro-
pose utilizing a cache for peripheral device communication
to improve the performance. However, hardware-in-the-loop
approaches are not scalable for testing large-scale ﬁrmware
images. Instead of fetching data from real devices, our ap-
proach infers proper inputs with symbolic execution.
Recently, several research efforts [16, 19, 21, 25] have been
focused on ﬁrmware emulation without hardware dependence.
Similar to µEmu, Laelaps [16] also uses the symbolic execu-