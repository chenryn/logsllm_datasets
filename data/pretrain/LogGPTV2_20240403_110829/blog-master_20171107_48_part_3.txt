geometry ST_Buffer(geometry g1, float radius_of_buffer, integer num_seg_quarter_circle);    
geometry ST_Buffer(geometry g1, float radius_of_buffer, text buffer_style_parameters);    
geography ST_Buffer(geography g1, float radius_of_buffer_in_meters);    
geography ST_Buffer(geography g1, float radius_of_buffer, integer num_seg_quarter_circle);    
geography ST_Buffer(geography g1, float radius_of_buffer, text buffer_style_parameters);    
```    
```    
postgres=# select ST_Buffer(  -- 圆形转换为对称多边形，所以边缘部分会有一定的缺失，不过大部分场景不是非得要一个圆形覆盖，调整半径即可放大多边形覆盖的区域。    
postgres(#       geography(    
postgres(#         st_setsrid(st_makepoint(:x,:y), 4326)  -- 中心点    
postgres(#       ),    
postgres(#       5000   -- st_buffer生成以某个POINT为中心的，半径距离为5000米的polygon空间对对象    
postgres(#     );    
ERROR:  syntax error at or near ":"    
LINE 3:         st_setsrid(st_makepoint(:x,:y), 4326)      
                                        ^    
postgres=# select st_astext(ST_Buffer(  -- 圆形转换为对称多边形，所以边缘部分会有一定的缺失，不过大部分场景不是非得要一个圆形覆盖，调整半径即可放大多边形覆盖的区域。    
      geography(    
        st_setsrid(st_makepoint(120,60), 4326)  -- 中心点    
      ),    
      5000   -- st_buffer生成以某个POINT为中心的，半径距离为5000米的polygon空间对对象    
    ));    
                                                                                      st_astext                                                                                          
-----------------------------------------------------------------------------------------------------------------    
 POLYGON((120.089512208008 59.997934797373,120.086976882535 59.9892289246618,120.081102403391 59.9809378901202,120.072116585739 59.9733798737888,120.060365991631 59.9668447257385,120.046302424771 59.9615829186565,120.030465533804 59.9577    
960239696,120.013462197363 59.9556290621131,119.995943464051 59.9551650063621,119.978579893839 59.9564216398749,119.962036194074 59.9593508798803,119.946946063787 59.9638405938451,119.933888154493 59.9697188425826,119.923364023899 59.976    
7603971742,119.915778900661 59.9846952929125,119.911425992986 59.9932191068707,119.91047496152 60.0020045788574,119.912965038302 60.0107141410568,119.918803110729 60.0190128820767,119.927766906223 60.0265814486426,119.939513215431 60.033    
1283845128,119.953590887034 60.0384014224128,119.969458125105 60.0421972811211,119.98650343095 60.0443695755035,120.004069366478 60.0448345204498,120.021478185562 60.0435741974281,120.038058292085 60.0406372509086,120.053170444408 60.036    
1369866788,120.066232638388 60.0302469501146,120.076742664059 60.0231941647256,120.084297440151 60.0152503050019,120.088608378544 60.0067211585481,120.089512208008 59.997934797373))    
(1 row)    
postgres=# \df st_buffer    
                                   List of functions    
 Schema |   Name    | Result data type |         Argument data types          |  Type      
--------+-----------+------------------+--------------------------------------+--------    
 public | st_buffer | geography        | geography, double precision          | normal    
 public | st_buffer | geography        | geography, double precision, integer | normal    
 public | st_buffer | geography        | geography, double precision, text    | normal    
 public | st_buffer | geometry         | geometry, double precision           | normal    
 public | st_buffer | geometry         | geometry, double precision, integer  | normal    
 public | st_buffer | geometry         | geometry, double precision, text     | normal    
 public | st_buffer | geometry         | text, double precision               | normal    
 public | st_buffer | geometry         | text, double precision, integer      | normal    
 public | st_buffer | geometry         | text, double precision, text         | normal    
(9 rows)    
postgres=# select st_astext(ST_Buffer(  -- 圆形转换为对称多边形，所以边缘部分会有一定的缺失，不过大部分场景不是非得要一个圆形覆盖，调整半径即可放大多边形覆盖的区域。    
      geography(    
        st_setsrid(st_makepoint(120,60), 4326)  -- 中心点    
      ),    
      5000   -- st_buffer生成以某个POINT为中心的，半径距离为5000米的polygon空间对对象    
, 2    ));    
                                                                                                                                                         st_astext                                                                               
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    
------------------------------------------------------------------------------    
 POLYGON((120.089512208008 59.997934797373,120.060365991631 59.9668447257385,119.995943464051 59.9551650063621,119.933888154493 59.9697188425826,119.91047496152 60.0020045788574,119.939513215431 60.0331283845128,120.004069366478 60.04483    
45204498,120.066232638388 60.0302469501146,120.089512208008 59.997934797373))    
(1 row)    
postgres=# select st_astext(ST_Buffer(  -- 圆形转换为对称多边形，所以边缘部分会有一定的缺失，不过大部分场景不是非得要一个圆形覆盖，调整半径即可放大多边形覆盖的区域。    
      geography(    
        st_setsrid(st_makepoint(120,60), 4326)  -- 中心点    
      ),    
      5000   -- st_buffer生成以某个POINT为中心的，半径距离为5000米的polygon空间对对象    
, 20    ));    
          st_astext                                                                                                                                                
---------------------------------------------------------------------------------------------------------------------    
 POLYGON((120.089512208008 59.997934797373,120.088908111921 59.9944238512618,120.087756162016 59.9909474584064,120.086063625849 59.9875270364661,120.083841092477 59.9841836517995,120.081102403391 59.9809378901202,120.077864563782 59.9778    
097302563,120.074147634755 59.9748184217725,120.069974607239 59.9719823671917,120.065371258421 59.9693190095193,120.060365991631 59.9668447257385,120.054989660701 59.9645747269098,120.049275379886 59.9625229654624,120.043258320518 59.960    
7020502247,120.036975495624 59.9591231696903,120.030465533804 59.9577960239696,120.023768443702 59.956728765823,120.016925370471 59.9559279511195,120.009978345645 59.9553984990076,120.002970031881 59.9551436620311,119.995943464051 59.955    
1650063621,119.988941788165 59.9554624022667,119.982007999661 59.9560340248591,119.975184682535 59.9568763651408,119.968513750845 59.9579842512615,119.962036194074 59.9593508798803,119.955791827821 59.9609678574459,119.949819051296 59.96    
28252511582,119.944154613012 59.9649116493158,119.938833386091 59.9672142306985,119.933888154493 59.9697188425826,119.929349411479 59.9724100869304,119.925245171517 59.9752714142513,119.921600796809 59.9782852245804,119.918438839511 59.9    
814329749779,119.915778900661 59.9846952929125,119.913637506731 59.9880520948514,119.912028004629 59.9914827093477,119.910960475872 59.9949660038842,119.910441670538 59.9984805147068,119.91047496152 60.0020045788574,119.911060319439 60.0    
055164676015,119.912194308496 60.0089945204305,119.913870103388 60.0124172788112,119.916077527281 60.0157636188547,119.918803110729 60.0190128820767,119.922030171247 60.02214500343,119.925738913146 60.0251406358055,119.929906547094 60.02    
7981270212,119.934507428714 60.030649350874,119.939513215431 60.0331283845128,119.944893040613 60.0354030431106,119.950613703968 60.0374592594989,119.956639877008 60.0392843151536,119.962934322297 60.0408669196299,119.969458125105 60.042    
1972811211,119.976170935976 60.0432671676831,119.983031222659 60.0440699587263,119.989996529766 60.0446006864375,119.997023744464 60.0448560668633,120.004069366478 60.0448345204498,120.011089780615 60.044536181907,120.018041530037 60.043    
9628993317,120.024881588488 60.043118222597,120.03156762968 60.042007381085,120.038058292085 60.0406372509086,120.044313437398 60.0390163118395,120.050294400996 60.0371545942238,120.055964232773 60.0350636162323,120.061287926806 60.03275    
63118559,120.066232638388 60.0302469501146,120.070767887067 60.027551046003,120.074865744419 60.0246852637505,120.078501005406 60.0216673130169,120.081651342285 60.0185158386919,120.084297440151 60.0152503050019,120.086423113343 60.01189    
08746616,120.088015402048 60.0084582838374,120.0890646486 60.0049737137097,120.089564553084 60.0014586594418,120.089512208008 59.997934797373))    
(1 row)    
```    
2、本文使用的插件btree_gin, btree_gist用于加速数组搜索，空间数据与其他普通字段的搜索。       
3、使用的索引接口gist用于KNN搜索，距离排序。       
4、unionall用于普通字段(可枚举)+gis字段的复合排序输出。       
## 需求升华1    
## 除了空间搜索，还引入普通字段筛选条件    
1、如果业务方要求按普通字段(当可以枚举时) + 空间字段排序，可以这样来操作，以达到最好的性能。          
例如先返回空闲状态的骑手，其次返回最近7天活跃的骑手，其次。。。。          
```      
with       
a as (      
  select * from tbl_pos where att1=1 and     -- 普通条件（假设att1可枚举）（首先输出att1=1，然后att1=2，然后att1=3）      
  att2 st_setsrid(st_makepoint(120,60), 4326) limit 100    -- 只按空间排      
),      
b as (      
  select * from tbl_pos where att1=2 and       
  att2 st_setsrid(st_makepoint(120,60), 4326) limit 100      
),      
c as (      
  select * from tbl_pos where att1=3 and       
  att2 st_setsrid(st_makepoint(120,60), 4326) limit 100      
)      
select * from a union all select * from b union all select * from c limit 100;  -- 按指定顺序写ALIAS union all，执行计划会从先到后对query进行append      
以上效果等效如下SQL，但是以上SQL性能比下面这条高很多很多。      
select * from tbl_pos where att2 st_setsrid(st_makepoint(120,60), 4326)   -- 按att1, knn 复合排序。      
limit 100;      
```      
效果：      
```      
explain (analyze,verbose,timing,costs,buffers) with       
a as (      
  select * from tbl_pos where att1=1 and -- 普通条件（首先输出1，然后2，然后3）      
  att2 st_setsrid(st_makepoint(120,60), 4326) limit 100      
),      
b as (      
  select * from tbl_pos where att1=2 and       
  att2 st_setsrid(st_makepoint(120,60), 4326) limit 100      