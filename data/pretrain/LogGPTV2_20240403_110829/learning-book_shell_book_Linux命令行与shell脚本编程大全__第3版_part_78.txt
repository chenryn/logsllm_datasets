函数
描述
atan2 (x, y)
xy的反正切，x和y以弧度为单位
c08 (×)
x的余弦，x以弧度为单位
22
exp (x)
的指数函数
Int (x)
x的整数部分，取靠近零一侧的值
1og (×)
x的自然对数
rand(|
比0大比1小的随机浮点值
sin(x)
x的正弦，x以弧度为单位
sqrt (×x)
x的平方根
srand (x)
为计算随机数指定一个种子值
虽然数学函数的数量并不多，但gawk提供了标准数学运算中要用到的一些基本元素。int{]
函数会生成一个值的整数部分，但它并不会四舍五人取近似值。它的做法更像其他编程语言中的
floor函数。它会生成该值和0之间最接近该值的整数。
这意味着int（）函数在值为5.6时返回5，在值为-5.6时则返回-5。
rand（）函数非常适合创建随机数，但你需要用点技巧才能得到有意义的值。rand（）函数会
返回一个随机数，但这个随机数只在0和1之间（不包括0或1）。要得到更大的数，就需要放大返
回值。
产生较大整数随机数的常见方法是用rand（）函数和int{1函数创建一个算法。
x = int (1 0 * rand () )
---
## Page 503
488
第22章gawk进阶
这会返回一个0-9（包括0和9）的随机整数值。只要为你的程序用上限值替换掉等式中的10
就可以了。
在使用一些数学函数时要小心，因为gawk语言对于它能够处理的数值有一个限定区间。如果
超出了这个区间，就会得到一条错误消息。
$ gavkc  BEGIN(x=exp 100) ; pzint x)*
$gawk BEGIN(x=exp (1000)= print x) *
26881171418161356094253400435962903554686976
gawk: varning: exp argument 1ooo Ia out of range
L.nf
$
第一个例子会计算e的100次幂，虽然数值很大，但尚在系统的区间内。第二个例子尝试计算
e的1000次幂，已经超出了系统的数值区间，所以就生成了一条错误消息。
除了标准数学函数外，gawk还支持一些按位操作数据的函数。
and{v1，v2]：执行值v2和v2的按位与运算。
 compl (val)：执行va2的补运算。
 lshift[val， count]:将值va1左移count位。
or（v1，v2）：执行值v1和v2的按位或运算。
 rshift {val, count] : 将值vai右移count位。
xor[v1，v2]：执行值v2和v2的按位异或运算。
位操作函数在处理数据中的二进制值时非常有用。
22.6.2字符串函数
gawk编程语言还提供了一些可用来处理字符串值的函数，如表22-5所示。
表22-5gawk字符串函数
函数
描述
asort (α [, d]1
将数组s按数据元素值排序。索引值会被替换或表示新的排序顺序的连续数字。另外，
如果指定了，则排序后的数组会存储在数组d中
asorti (a [,d])
将数组=按索引值排序。生成的数组会将索引值作为数据元素值，用连续数字索引来表
明排序顺序。另外如果指定了d，排序后的数组会存储在数组c中
geneub(r, 8, h [， t]) 
查找变量s0或目标字符串t（如果提供了的话）来匹配正则表达式r。如果h是一个以g
或c开头的字符串，就用=答换掉匹配的文本。如果h是一个数字，它表示要替换掉第
处r匹配的地方
gaub (z,  [, t1)
查找变量s0或目标字符串：（如果提供了的话）来匹配正则表适式z。如果找到了，就
全部替换成字符串s
Index (,c)
返回字符串：在字符串s中的索引值，如果没找到的话返回0
length [[])
返回字符串s的长度；如果没有指定的话，返回so的长度
match (a, z I, a])
返回字符串中正则表达式r出现位置的索引。如果指定了数组a,它会存储=中匹配正
则表达式的那部分
---
## Page 504
22.6内建函数
489
（续）
函数
措
述
sp1it(e, a [,)
将e用rs字符或正则表达式r（如果指定了的话）分开放到数组a中。返回字段的总数
aprintf Iformat,
varIables)
用提供的format和variabies返回一个类似于printf输出的字符申
sub [r, g [,c]}
在变量s0或目标字符申e中查找正则表达式=的匹配，如果找到了，就用字符串s答换
掉第处匹配
subat (α,  [,z] )
返回s中从索引值开始的n个字符组成的子字符串。如果未提供n，则返回e剩下的部
tolover ()
将=中的所有字符转换成小写
toupper (α)
将a中的所有字符转换成大写
一些字符串函数的作用相对来说显而易见。
$ gasxk *BEGIN(x = *testing*: print toupper (x) ; print length(x) )
TESTING
$
但一些字符串函数的用法相当复杂。asort和asorti函数是新加人的gawk函数，允许你基
于数据元素值（asort）或索引值（asorti）对数组变量进行排序。这里有个使用asort的例子。
NIDG8. xME6 $
> var[*a*]
[6，]eA  var[*u*] = 4
> for 1i in test)
> asort (var, test)
print *Indexi*,i,* - value:*,test[i]
Index1  4  -  value: 4
Index1 1
Index1  2
- value: 2
- value: 1
Index1  3 -  value: 3
新数组test含有排序后的原数组的数据元素，但索引值现在变为表明正确顺序的数字值了。
split函数是将数据字段放到数组中以供进一步处理的好办法。
)(=*=Sa )NI0G8. xMe6 $
> print var[1]。 var[5]
> split ($0, var)
data11 data15
> }' data1
data21 data25
data31 data35
新数组使用连续数字作为数组索引，从含有第一个数据字段的索引值1开始。
---
## Page 505
490
第22章gawk进阶
22.6.3时间函数
gawk编程语言包含一些函数来帮助处理时间值，如表22-6所示。
表22-6gawk的时间函数
函数
描述
mktime (datespec)
将一个按YYYY MM DD HH MM SS [DST]格式指定的日期转换成时间数值“
strftine format
[, tinestanp] 
将当前时间的时间载或timestamp（如果提供了的话）转化格式化日期（采用shell
函数date ()的格式)
systime()
返回当前时间的时间
时间函数常用来处理日志文件，而日志文件则常含有需要进行比较的日期。通过将日期的文
本表示形式转换成epoch时间（自1970-01-0100:00:00UTC到现在的秒数），可以轻松地比较日期。
下面是在gawk程序中使用时间函数的例子。
$ gawk 'BEGIN{
> day = atrftine (*4A, $B sd, 8Y*, date)
> date = systine ()
> print day
Friday, December 26, 2014
>} *
该例用systime函数从系统获取当前的epoch时间戳，然后用strftime函数将它转换成用户
可读的格式，转换过程中使用了shell命令date的日期格式化字符。
22.7自定义函数
除了gawk中的内建函数，还可以在gawk程序中创建自定义函数。本节将会介绍如何在gawk
程序中定义和使用自定义函数。
22.7.1定义函数
要定义自己的函数，必须用Eunction关键字。
functlon name ( [variables]1
statenenta
函数名必须能够唯一标识函数。可以在调用的gawk程序中传给这个函数一个或多个变量。
① 这里时间截是指白1970-01-01 00:00:00 UTC到现在。以秒为单位的计数,通常称为epoch time：aystime (1函数
的返回值也是这种形式。
---
## Page 506
22.7自定义函数
491
funct ion printthird()
print $3
这个函数会打印记录中的第三个数据字段。
函数还能用return语句返回值：
return value
值可以是变量，或者是最终能计算出值的算式：
funct ion myrand (1imit)
retuxn int (1inlt * rand (1)
你可以将函数的返回值赋给gawk程序中的一个变量：
(0ot)puexAu = x
这个变量包含函数的返回值。
22.7.2使用自定义函数
在定义函数时，它必须出现在所有代码块之前（包括BEGIN代码块）。乍一看可能有点怪异，
但它有助于将函数代码与gawk程序的其他部分分开。
$gawk *
> functlon nyprint()
22
printr *4-16α - 8a^n*, $1, $4
> BEGIN(FS=*\n*; RS=**)
zexep 、( <
myprint()
Riley Kullen
Frank H11liana
-(312) 55512.34
 - (317) 5559876
Haley Sne11
86-555 (ete) -
这个函数定义了myprint（）函数，它会格式化记录中的第一个和第四个数据字段以供打印输
出。gawk程序然后用该函数显示出数据文件中的数据。
一旦定义了函数，你就能在程序的代码中随意使用。在涉及很大的代码量时，这会省去许多
工作。
22.7.3创建函数库
显而易见，每次使用函数都要重写一遍并不美妙。不过，gawk提供了一种途径来将多个函数
放到一个库文件中，这样你就能在所有的gawk程序中使用了。
---
## Page 507
492
第22章gawk进阶
首先，你需要创建一个存储所有gawk函数的文件。
$ cat funclib
function myprint ()
printf *e-16s - s\n*, $1, $4
funetion myrand(1imit)
return int (1init * rand(1)
function printthird (1
print $3
$
funclib文件含有三个函数定义。需要使用-f命令行参数来使用它们。很遗懿，不能将-f命令
行参数和内联gawk脚本放到一起使用，不过可以在同一个命令行中使用多个-f参数。
因此，要使用库，只要创建一个含有你的gawk程序的文件，然后在命令行上同时指定库文件
和程序文件就行了。
BBGIN( FS=*\n*; RS=**)
$ cat script4
myprint()
$gawk -f funelib-fecript4  dat.a2
Riley Mullen
Frank Milliams
-(317)5559876
-(31.2) 555123 4
Haley Sne11
-(313)5554938
你要做的是当需要使用库中定义的函数时，将funclib文件加到你的gawk命令行上就可以了。
22.8实例
如果需要处理数据文件中的数据值，例如表格化销售数据或者是计算保龄球得分，gawk的一
些高级特性就能派上用场。处理数据文件时，关键是要先把相关的记录放在一起，然后对相关数
据执行必要的计算。
举例来说，我们手边有一个数据文件，其中包含了两支队伍（每队两名选手）的保龄球比赛
得分情况。
$ cat scores,txt
Rich B1um, teaml, 100, 115, 95
Barbara Blum, tean1, 110, 115,100
Christine Bresnahan, team2, 120, 115, 118
Tim Bresnahan, team2, 125, 112, 116
s7
---
## Page 508
22.9小结
493
每位选手都有三场比赛的成绩，这些成绩都保存在数据文件中，每位选手由位于第二列的队
名来标识。下面的脚本对每队的成绩进行了排序，并计算了总分和平均分。
$ cat bowling.sh
 1 /bin/ba.sh
for tean in $(gavk -F, *(print $2)* scores.txt 1uniq)
a0
{0=[eqo r。′=S)NI0g. wes=wea -xμe5
if ($2==tean)
total += $3 + $4 + $5
END(
avg = total / 6;
print *Total for*, team, *is*, total, *,the average is*,avg
scores.txt
done
+
for循环中的第一条语句过滤出数据文件中的队名，然后使用uniq命令返回不重复的队名。
for循环再对每个队进行选代。
for循环内部的gawk语句进行计算操作。对于每一条记录，首先确定队名是否和正在进行循
环的队名相符。这是通过利用gawk的-v选项来实现的，该选项允许我们在gawk程序中传递shell
变量。如果队名相符，代码会对数据记录中的三场比赛得分求和，然后将每条记录的值再相加，
只要数据记录属于同一队。
22
在循环选代的结尾处，gawk代码会显示出总分以及平均分。输出结果如下。
$./bovling-sh
Total for teaml
lis 635, the average is 105.833
Total for team2 is 706, the average is 117.667
现在你就拥有了一件趁手的工具来计算保龄球锦标赛成绩了。你要做的就是将每位选手的成
绩记录在文本文件中，然后运行这个脚本！
22.9小结