else
if capacity == 0 then
depth ← depth + 1
root ← ProverTree
newRoot.weight ← [weights]FHE[0]
newRoot.value ← rott.value ⊗ [weights]FHE[0]
newRoot.lchild ← root
root.parent ← newRoot
root ← newRoot
1: begin
2: if depth == 0 or capacity == 2depth−1 then
3:
4:
5:
6:
7:
8:
9:
10: end if
11: if capacity < τ then
12:
capacity ← 1
13:
14:
capacity ← capacity × 2
15:
16:
17: else
18:
19: end if
20: for weight in weights do
prober ← getPosition()
21:
child.weight ← weight
22:
child.value ← [0]FHE
23:
if prober.lchild == NULL then
24:
25:
26:
27:
28:
29:
30: end for
31: return 1
prober.lchild ← child
prober.rchild ← child
end if
child.parent ← prober
end if
capacity ← capacity + µ
else
query is to query data element at a time, such as query t2 time
data. Range query is to query the data elements of a period of
time, such as query t2 time to t5 time, that period of time data.
Fig. 8. Example of range query
(1) Signal element query
For DFHMT, the idea of single element query and veriﬁca-
tion is consistent with that of the general Merkle tree,both of
which verify the integrity of the data by calculating the hash
8
layer by layer until the root node and comparing it with the ev-
idence information stored previously. However, due to the dif-
ferences in storage structure and methods for calculating hash,
the signal element query algorithm of DFHMT is also slightly
diﬀerent from that of the general Merkle tree. As shown in
Fig. 9, three data have been appended to DFHMT. If want to
query No.2 data, ﬁrst according to the query position i , down
from the root node ρ3 to ﬁnd the data element to be queried
layer by layer. At this moment, i = 2 , the depth of the tree
d = 3, and the bit binary representation of the position of the
data element to be queried is i − 1 = 2 − 1 = (01)2 . There-
fore, the path from the root node to the leaf node to be queried
is ”left-right” , and the path is also referred to as the critical
path. Then starting from the position queried until ρ2 , up to
record the sibling nodes of the nodes in the critical path to au-
thentication path. The reason to record the authentication path
to ρ2 instead of ρ3 is because multiple root nodes are set in
DFHMT. Before appending the No.3 data, the node ρ3 has not
MANUSCRIPT ACCEPTEDACCEPTED MANUSCRIPT2136(cid:17)(cid:17)(cid:17)t1t2t3t47t5QueryRangeQuery/ Jurnal of Network and Computer Applicaion 00 (2018) 1–15
9
been generated, at this time, the authentication path returned by
querying No.2 data is only recorded to ρ2 . When appending
No.3 data, the scale of the tree is extended, and the authen-
tication path returned by querying No.3 data is also extended
records to B. At this time, can still use the original root node
when querying No.2 data, which makes the part of the authen-
tication paths shorten, reduce communication costs, and save
veriﬁcation time. In order to ensure that all the authentication
path lengths of the current elements are consistent when query-
ing, the scheme can also use the unique root node, but this will
increase the communication cost and computation overhead.
(2) Range query
The process of range query and that of single element query
are very similar, ﬁrst down from the root node, according to
the binary representations of query positions i and j to ﬁnd the
ﬁrst and last position of the data element to be queried from
the tree structure. Then up from the ﬁrst position and the last
position respectively to record authentication path of the ranges
left boundary and authentication path of the ranges right bound-
ary layer by layer until the root node of the tree. Range query
no longer use multiple root node, because the data element
for range query may belong to the diﬀerent root node, and if
you use multiple root nodes like signal element query, this will
cause confusion.
Fig. 9. Query No.2 data
Appending the sibling node of the node in the critical path
to the authentication path, and use them to recalculate the value
of the root node when verifying. The authentication path for
querying No.2 data is {ε(2)} . Finally ﬁnding No.2 data from
DS , return it with the authentication path.
Algorithm 6 signal element query algorithm singleQuery(i)
Input: the position of the data to be queried i
Output: if the query is successful, return the ith data element
datai queried and the corresponding authentication path
authi; otherwise return NULL
return NULL
1: begin
2: if i < 0 or i ≥ size then
3:
4: end if
5: prober ← f ind(i, ProverTree0
6: for every-level do
7:
8:
9:
10:
11:
12:
13:
14: end for
15: data ← DS .query(i)
16: return (data, dsAuth)
end if
i ← i/2
prober ← prober.parent
if i mod 2 == 1 then
dsAuth.push(prober.parent.lchild.value)
else
dsAuth.push(prober.parent.rchild.value)
Fig. 10. Query No.2 No.5 data
Suppose that 6 data have been inserted in DFHMT, as shown
in Fig. 10. When querying the data from No.2 to No.5, ﬁrst
down from the root node, according to the query positions 2
and 5 to ﬁnd the ends of the data range to be queried layer by
layer. And starting from the layer of the query position record
the authentication path layer by layer up to the root node of the
Merkle tree layer by layer. When recording the authentication
path, needs to judge whether the sibling nodes of the left and
right boundaries of the range to be queried should add to the
authentication path. When the left boundary node is a left child
node or the right boundary node is a right child node, the sibling
node is either the returned data element or can be calculated by
the lower layer, the sibling nodes of the left or right boundaries
of the range need not be added to the authentication path. When
the left boundary node is a right child node or the right bound-
ary node is a left child node, the sibling nodes of the left or
right boundaries of the range need be added to the authentica-
tion path, and the ﬁnal authentication path is {ε(2), ε(3), ε(0)} .
The last step is querying the DS , return the obtained complete
authentication path and No.2 to No.5 data.
4.5. Veriﬁcation
(1) Signal element veriﬁcation
The Merkle tree structure VeriferTree stored by the veriﬁer
only contains the set of weight weights and can also be consid-
ered as a tree of weights. The single element veriﬁcation al-
gorithm mainly accomplishes two purposes. One is to recalcu-
late the root node by the data and authentication path returned,
and then veriﬁes the integrity of the data by comparing with
the value of the root node stored in location. In addition, veri-
ﬁes whether the data is the ith element in DFHMT. First down
9
MANUSCRIPT ACCEPTEDACCEPTED MANUSCRIPT1(cid:85)2(cid:85)3(cid:85)(2)(cid:72)(1)(cid:72)(1)(cid:72)(7)(cid:72)(9)(cid:72)(2)(cid:72)(27)(cid:72)(1)(cid:72)(2)(cid:72)(1)(cid:72)(3)(cid:72)Query1(cid:85)2(cid:85)3(cid:85)RangeQuery4(cid:85)(1)(cid:72)(1)(cid:72)(1)(cid:72)(1)(cid:72)(1)(cid:72)(1)(cid:72)(2)(cid:72)(2)(cid:72)(2)(cid:72)(2)(cid:72)(1)(cid:72)(3)(cid:72)(3)(cid:72)(7)(cid:72)(39)(cid:72)(2)(cid:72)(9)(cid:72)(6)(cid:72)(7)(cid:72)(3)(cid:72)(13)(cid:72)(13)(cid:72)(4)(cid:72)(0)(cid:72)(3)(cid:72)/ Jurnal of Network and Computer Applicaion 00 (2018) 1–15
10
Algorithm 7 range query algorithm rangeQuery(i, j)
Input: the range of data indexes i and j
Output: if the query is successful, return all the data elements
datai, j whose indexes are in [i, j] and the corresponding
authentication path authi, j ,otherwise return NULL
signal
element
Algorithm 8
singleVer f iy(hsk, i, datai, authi)
Input: the private key of FHE hsk , the data index i, the data
element datai and the corresponding authentication path
authi returned by signal element query algorithm
veriﬁcation
algorithm
Output: if veriﬁcation is successful, return 1, otherwise return
0
return 0
1: begin
2: if i < 0 or i ≥ size then
3:
4: end if
5: prober ← f ind(i, Veri f erTree)
6: master ← data
7: for every-level do
8:
9:
10:
11:
12:
13:
14:
15:
slave ← decryptε(hsk, dsAuth.pop())
master weight ← prober.weight
if i mod 2 == 1 then
slave weight ← prober.aprent.lchild.weight
slave weight ← prober.aprent.lchild.weight
else
end if
master ← master×master weight+slave×slave weight
i ← i/2
prober ← prober.parent
16:
17:
18: end for
19: return basis.veri f y(master)
return singleQuery(i)
nodei ← f ind(i, dmtProverTree)
node j ← f ind( j, dmtProverTree)
return NULL
1: begin
2: if i < j then
3:
4: end if
5: if i == j then
6:
7: else
8:
9:
10: end if
11: for every-level do
12:
13:
14:
15:
16:
17:
18:
19:
20: end for
21: data ← DS .query(i, j)
22: return (data, dsAuth)
end if
if j mod 2 == 1 then
if i mod 2 == 1 then
dsAuth.push(nodei.parent.lchild.value)
dsAuth.push(node j.parent.rchild.value)
end if
i ← i/2, j ← j/2
nodei ← nodei.parent, node j ← node j.parent
from the root node of VeriferTree, ﬁnd the corresponding left
node according to the data index i . Then starting from the
leaf node, using the data datai and the authentication path authi
returned to calculate layer by layer until the value of the root
node is calculated. Finally, comparing with the value of the
root node stored in location. When ﬁnding the position of the
leaf node according to the data index i , the position of the data
in DFHMT has been determined. As long as the value of the
root node is the same, it can be determined that the data datai
is the ith data in DFHMT.
(2) Range Veriﬁcation
Suppose querying data elements from No.2 to No.5 in
DFHMT that has been appended 6 data, after veriﬁer gets the
data and authentication path of range query, recalculates the
value of the root node according to the weight tree stored in
location. If the value of root node calculated is the same with
the value of the root node stored in location, the data queried is
integrity. When verifying the result of the range query, needs