WasRec(Uτ−1, trτ , midτ−1,τ , pc∗) ← true
for some Uτ−1 where pc∗ = p∗. Since midτ−1,τ is only set
once in PT, the identities Uτ−1 = trτ−1 and this case is im-
possible.
• Case 4:
(cid:16)1 < j < τ ∧ WasFwd(tri−1, tri , midi−1,i , midi,i +1, p∗) = false
(cid:17)
Same as in Case 2, for tri to be added to the trace, we
know PT[midi,i +1] is populated and has tri as the sender.
Given the oracles in our game, the only way to populate PT
with tri ∈ [1, n] as sender is through the honest send oracle
SendMal which is associated with an argument of counter
S[midi,i +1] = s, sending plaintext ps. Again, there are two
subcases: (Case 4a) ps (cid:44) p∗, or (Case 4b) ps = p∗. In both
cases, we consider k ← SK[midi,i +1].
• Case 4a: ps (cid:44) p∗
Case 4a mirrors Case 2a. We know from the execution
of Send that Fk(ps) = midi,i +1. We also know from
the unrolled execution of Svr-Trace that Ftrki,i +1(p∗) =
midi,i +1. This gives us the collision,(k, ps),(trki,i +1, p∗).
• Case 4b: ps = p∗
We will further consider two subsubcases. If trki,i +1 (cid:44)
k, we have the trivial collision, (k, p∗), (trki,i +1, p∗).
Now consider the case trki,i +1 = k. This subsubcase
corresponds exactly to the problematic case set apart
by flag2. We know that from the execution of Send,
cti,i +1 = EncH(k)(ktri,s) is stored in PT[midi,i +1]. Let
us examine where ktri,s was set. Since
WasFwd(tri−1, tri , midi−1,i , midi,i +1, ps) = false,
then it would have been set in the else statement of
Send, this implies the if statement was followed and
therefore mids = auth. This in turn means that ktri,s
was set in NewMsg.
Next, consider the unrolled traceback. Since trki,i +1 =
k, the ciphertext cti,i +1 will decrypt to trki−1,i = ktri,s.
Next, Fktri ,s(p∗) = midi−1,i leads to next step of trace-
back (also implying that midi−1,i = mids). This PRF
evaluation would have been handled by a random func-
tion in G2. Thus, in G2, the probability flag2 is set to
bad is bounded by the probability that a call to Send
or SendMal populated the mid corresponding to this
random value,
Pr[ G2 sets bad2 ] ≤ qs + qsm
.
This concludes the case analysis and gives us,
F (C) ,
Pr[ G1 ⇒ true] ≤ Advcr
2n
completing the proof.
□
C CONFIDENTIALITY AND
ACCOUNTABILITY FOR TREE
TRACEBACK
Here we formalize security goals for tree traceback. We start with
confidentiality notions which are essentially the same as those
for path traceback. The main distinction is that clients in our tree
traceback scheme have state (a set of counters). We add to the
confidentiality notions from Section 5.1 the ability for the adversary
to drive the honest client to an arbitrary state before submitting
challenge queries. The confidentiality games for tree traceback are
given in Figure 17. The unforgeability game remains largely the
PTreeCONFA,b
MT :
b′ ←$ AChal
return b′
NewClientState(U, mid, k):
gk ←$ {0, 1}n
tmdU, mid ← (k, gk)
CTRU[tmdU, mid] ← 0
Chal(U1, U2, mid, p):
if tmdU1, mid = ⊥ then return ⊥
(k, tt
s ←$ {0, 1}len(tts )
0
tt
return ttb
s
s) ←$ TagGen(CTRU1 , U1, U2, p, tmdU1, mid)
1
UTreeCONFA,b
MT :
b′ ←$ AChal
return b′
NewClientState(U, mid, k):
gk ←$ {0, 1}n
tmdU, mid ← (k, gk)
CTRU[tmdU, mid] ← 0
Chal(st, U1, U2, mid, p):
if tmdU1, mid = ⊥ then return ⊥
tmd0 ← tmdU1, mid
tmd1 ←$ NewMsg(U1, p)
(k′, tts) ←$ TagGen(CTRU1 , U1, U2, p, tmdb)
((mid, ttp), tt′
r ) ← Svr-Process(st, U1, U2, tts)
return (k′, tt′
r )
Figure 17: Notions for (top) platform tree trace confidentiality and
(bottom) user tree trace confidentiality.
collision. The second transition replaces calls to the encryption
algorithm with sampling random bits. After these transitions, the
sender trace tag output from the challenge oracle is a mid which is
the output of a random function, and three ciphertexts which are
random bit strings.
C.2 User Trace Confidentiality
Theorem 5. Let MT be the message tracing scheme for tree trace-
back defined in Figure 6. For any UTreeCONF adversary A that
makes at most qns new client state queries and qch challenge queries,
we give adversary B such that
Advp-tree-conf
MT
(A) ≤ 2Advprf
F,qns+qch(B) +
2
ns
q
2n−1
where if A runs in time T , then B runs in time T ′ ≈ T and makes at
most 2qch oracle queries.
Proof sketch: The adversary’s view includes the recipient trace
tag and the tracing key. The recipient trace tag is made up of a
message identifier, sender key share ciphertext, and platform key
share. The tracing key is dependent on the challenge bit chosen
generator, and so by extension the message identifier and sender
key share ciphertext are as well, since they are derived as functions
of the tracing key. We use the PRF security of F to transition to an
intermediate game where the tracing key is derived from a random
function. Similar to as in the sketch above for platform trace confi-
dentiality, since generators are reused across calls to the challenge
oracle (with an incremented counter), they can be distinguished if
a generator is resampled. Thus, we include a term bounding the
low probability event of a generator resampling collision.
same, given in Figure 18. We add a recursive predicate check on all
subtrees returned in the trace. Furthermore, the WasRec predicate
is set even if a received message was not accepted. This captures
the fact that a message will be traced as sent to a user regardless of
whether the message was accepted.
C.3 Trace Unforgeability
Theorem 6. Let MT be the message tracing scheme for tree trace-
back defined in Figure 6. Then, for any TreeUNF adversary A that
makes at most qnm new message queries, qs send queries, and qsm
malicious send queries, we give adversary B such that
C.1 Platform Trace Confidentiality
Theorem 4. Let MT be the message tracing scheme for tree trace-
back defined in Figure 6 using hash function H. Then if H is modeled
as a random oracle, for any PTreeCONF adversary A that makes at
most qns new client state queries and qch challenge queries, we give
adversary B and C such that
(A) ≤ Advprf
F,qns+qch(B) + Advror-cpa
E,qch (C) +
where if A runs in time T , then B and C run in time T ′ ≈ T and
make at most 3qch oracle queries.
2
ns
q
2n
Advp-tree-conf
MT
Proof sketch: The proof proceeds with the same strategy as for
path traceback. The first transition replaces the PRF executions with
executions of a random function, where we can bound the distin-
guishing advantage by the PRF security of F since the PRF keys are
random and not revealed to the adversary. There is a subtlety here
that since the generator can be reused across multiple challenge
oracle calls (with an incremented counter), it can be distinguished
from random if a generator is every resampled. Thus, we include a
term bounding the low probability event of a generator resampling
Advtree-unf
MT,n (A) ≤ Advcr
F (B) +
(qnm + qs + qsm)2
2n
where if A runs in time T , then B runs in time T ′ ≈ T .
Proof sketch: The proof strategy is the same as in trace unforge-
ability for path traceback. We will perform a case analysis of the
three winning conditions of the security game and show that in
each one, we will either be able to show a collision of F or can show
that it is a low probability event by the PRF security of F.
• Case 1: honest root did not author message
WasSent(tr0, tr1, mid0,1, p∗) = false
For mid0,1 to be added to the trace, we know PT[mid0,1] is
populated and has tr0 as the sender. Given the oracles in
our game, the only way to populate PT with tr0 ∈ [1, n] as
sender is through the honest send oracle SendMal which was
called with a message id counter s indicating sending plaintext
ps. There are two subcases: (Case 2a) ps (cid:44) p∗, or (Case 2b)
ps = p∗.
if (cid:0)tr0 ∈ [1, n] ∧ WasSent(tr0, tr1, mid0,1, p∗) = false(cid:1) then return true
if (cid:0)tri ∈ [1, n] ∧ WasRec(tri−1, tri , midi , p∗) = false(cid:1) then return true
if (cid:0)tri ∈ [1, n] ∧ WasFwd(tri , tri +1, midi−1,i , midi,i +1, p∗) = false(cid:1) then return true
:
MT,n
TreeUNFA
c ← 0
(i∗, p∗, tmd∗, c∗) ←$ AO
if i∗ ∈ [1, n] then p∗ ← pc∗ ; tmd∗ ← tmdi∗,c∗
tr0, clist0 ← Svr-Trace(PT, i∗, p∗, tmd∗)
for (mid0,1, tr1, clist1) ∈ clist0 do
if check_tree(tr0, mid0,1, tr1, clist1) then return true
return false
check_tree(tr):
(tri−1, midi−1,i , tri , clisti) ← tr
if clisti = ∅ then
for (midi,i +1, tri +1, clisti +1) ∈ clisti do
if check_tree(tri , midi,i +1, tri +1, clisti +1) then return true
return false
NewMsg(i, p):
if i (cid:60) [1, n] then return ⊥
c ← c + 1
pc ← p
tmdi,c ←$ NewMsg(i, pc)
midc ← auth
return
Send(i, j, s):
if i (cid:60) [1, n] ∨ tmdi,s = ⊥ then return ⊥
(k, tts) ←$ TagGen(CTRi , i, j, ps , tmdi,s)
((mid, ttp), ttr ) ←$ Svr-Process(PT, i, j, tts)
PT[mid] ← ttp
if mids = auth then WasSent(i, j, mid, ps) ← true
else WasFwd(i, j, mids , mid, ps) ← true
if j ∈ [1, n] then
c ← c + 1
pc ← ps
tmdj,c ← RecMsg(k, i, j, pc , ttr )
WasRec(i, j, mid, ps) ← true
midc ← mid
return ttr
return (ttr , k)
SendMal(i, j, k, p, tts):
if i ∈ [1, n] then return ⊥
((mid, ttp), ttr ) ←$ Svr-Process(PT, i, j, tts)
PT[mid] ← ttp
if j ∈ [1, n] then
WasRec(i, j, mid, p) ← true
tmd ← RecMsg(k, p, ttr )
if tmd (cid:44) ⊥ then
c ← c + 1
pc ← p
tmdj,c ← tmd
midc ← mid
return ttr
Figure 18: Trace unforgeability security game for tree traceback.
• Case 1a: ps (cid:44) p∗
We consider the tracing key generated during tag genera-
tion in the oracle call; call this k0,1. We will also consider
the tracing key used in traceback to include mid0,1 in
the trace, call this trk0,1. We know from the execution
of Send that Fk0,1(ps) = mid0,1. We also know from
the execution of Svr-Trace that for mid0,1 to have been
included in the trace, there must have been a tracing
• Case 1b: ps = p∗
key trk0,1 used such that Ftrk0,1(p∗) = mid0,1. This
constitutes a collision.
For tr0 to have been identified as the root of the trace,
there must have been some midb that had tr0 as the
sender. The root identifying condition is either that the
escrowed tracing key evaluates to an invalid mid or
that the current tracing key is not well-formed with
respect to the escrowed generator. Since tr0 is honest,
we can rule out the second case, and the first case would
only occur if tr0 was the author of the message — since
our oracles do not make it possible for an honest user
to forward a message that was not received from the
server and accepted by RecMsg. So tr0 is the author of
a s′ counter associated with p∗. Any call to Send of s′
would result in the WasSent predicate being sent to true
since s′ was authored. Thus, s (cid:44) s′. This means that
either the generator for s and the generator for s′ collide
on a tracing key, the tracing key from s and the tracing
key from s′ collide on mid0,1, or the generators are the
same for s and s′. The last case we can bound as a low
probability event.
• Case 2: honest leaf did not receive message
WasRec(tri−1, tri , midi−1,i , p∗) = false
To be added to the trace, it must be that midi−1,i in PT con-
tained tri−1 as sender and tri as the recipient. From our oracle
construction, the only way for a pair of users to be added to PT
is through the Send or SendMal oracles, which both set the
WasRec predicate with plaintext p input to the oracle. In which
case, if p∗ = p, the WasRec would have been true. Therefore,
p∗ (cid:44) p and there exists a collision with the tracing key used
in traceback trk,p∗ and the tracing key used in the oracle k,p
on midi−1,i.
• Case 3: internal node did not forward message
WasFwd(tri , tri +1, midi−1,i , midi,i +1, p∗) = false
Same as in Case 1, for midi,i +1 to be added to the trace,
we know PT[midi,i +1] is populated and has tri as the sender.
Given the oracles in our game, the only way to populate
PT with tri ∈ [1, n] as sender is through the honest send
oracle SendMal which was called with a message id counter
s indicating sending plaintext ps. There are two subcases:
(Case 2a) ps (cid:44) p∗, or (Case 2b) ps = p∗.
• Case 3a: ps (cid:44) p∗
We consider the tracing key generated during tag gener-
ation in the oracle call; call this ki,i +1. We will also con-
sider the tracing key used in traceback to include mid0,1
in the trace, call this trki,i +1. We know from the execu-
tion of Send that Fki,i +1(ps) = midi,i +1. We also know
from the execution of Svr-Trace that for midi,i +1 to have
• Case 3b: ps = p∗
been included in the trace, there must have been a trac-
ing key trki,i +1 used such that Ftrki,i +1(p∗) = midi,i +1.
This constitutes a collision.
We will further consider two subsubcases. If midi−1,i =
mids, then since the WasFwd was not set to true, we can
infer that s was authored by tri and importantly, gk was
sampled randomly. If midi−1,i (cid:44) mids, then we can in-
fer gk was the hashed output of the key shares provided
for mids, which importantly, likely differ from the key
shares provided by midi−1,i created gk′. This means
that there is a collision between gk,ctr and gk′,ctr′
to ki,i +1, a collision between ki,i +1,p∗ and trki,i +1,p∗
to midi,i +1, or gk and gk′ are the same which we can
bound to be low probability.