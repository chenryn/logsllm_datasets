256    26th USENIX Security Symposium
USENIX Association
1: int x, y;// x is an input2: HANDLE out = CreateFile("a.txt",…); 3: y = x + x;4: WriteFile(out, &y, sizeof y, …);5: CloseHandle(out);1: int x, y;// x is an input2: HANDLE out = CreateFile ( "a.txt",…); 3: y = x > 31);4: z = (x ^ z) -z;// z is the absolute valueof x 5  y = 2 * z; 6: WriteFile(out, &y, sizeof y, …);7: CloseHandle(out);(a)(b)(c)NtCloseNtCreateFileNtWriteFileHANDLE: outint: yinputHANDLE: out(d) System call (Windows native API)sequence and dependencyBasic block 1xor eax, -1add eax, 1jmp loc_0022OutputSymbolic input:eax =1eax = (1^ -1) + 1SemanticallyequivalentBasic block 2notebxnot ebxneg ebxjmp loc_0022OutputSymbolic input:ebx = 2 ebx = (~(~2)) × -1Figure 3: Semantic equivalence spreads across basic blocks.
x + x = 2× ((x∧ (x >> 31))− (x >> 31))
(1)
Similarly, we check whether ψ1a = ψ1c by verifying
the formula:
x + x = x > 31))− (x >> 31))
ψ1c : x > 1) & (0x55555555));4:   n= (n& (0x33333333)) + ((n>> 2) & (0x33333333));5:   n= (n& (0x0f0f0f0f)) + ((n>> 4) & (0x0f0f0f0f));6:   n= (n& (0x00ff00ff)) + ((n>> 8) & (0x00ff00ff));7:   n= (n& (0x0000ffff)) + ((n>> 16) & (0x0000ffff));8:   printf ("%d", n);  9: }(b)(c)1: void BitCount1(unsigned int n) 2: {3:   unsigned int count =0;4:   for (count=0; n; n >>=1) 5: count+= n &1 ;6:   printf ("%d", count); 7: }(a)(a)in (i, j)out (a, b)in (a, b)out (c) = (i+1) -(j << 2)BB1:BB2:a = i + 1b = j << 2c = a -b(b)in (i’, j’)out (a’, b’)in (b’, a’)out (c’) = (j’<< 2) -(i’+ 1)BB1':BB2':a’= i’+ 1b’= j’<< 2c’= b’-a’Semanticallydifferenttaint tags. In this way, the irrelevant system calls without
data dependency will be ﬁltered out. The tainted argu-
ments of aligned system call will be taken as the starting
point of our backward slicing.
We also consider the parameter semantics. For ex-
ample, although NtClose takes an integer as input, the
source of the parameter should point
to an already
opened device rather than an instruction operand (see
Figure 1). Therefore, the fake dependency such as “xor
eax, eax; NtClose(eax);” will be removed. An-
other challenge is malware could invoke a different set
of system calls to achieve the same effect. Recent work
on “replacement attacks” [44] shows such threat is feasi-
ble. We will discuss possible workaround in Section 6.
4 Ofﬂine Analysis
4.1 Preprocessing
When the raw trace data arrive, BinSim ﬁrst lifts x86 in-
structions to Vine IL. The static single assignment (SSA)
style of Vine IL will facilitate tracking the use-def chain
when performing backward slicing. Besides, Vine IL is
also side effect free. It explicitly represents the setting of
the eflags register bits, which favors us to identify in-
structions with implicit control ﬂow and track ROP code.
For example, the carry ﬂag bit (cf) is frequently used by
ROP to design conditional gadget [60].
Then we align the two collected system call sequences
to locate the matched system call pairs. System call se-
quence alignment has been well studied in the previous
literature [34, 76]. The latest work, MalGene [34], tailors
Smith-Waterman local alignment algorithm [65] to the
unique properties of system call sequence, such as lim-
ited alphabet and sequence branching caused by thread
scheduling. Compared to the generic longest common
subsequences (LCS) algorithm, MalGene delivers more
accurate alignment results. There are two key scores in
Smith-Waterman algorithm: similarity function on the
alphabet and gap penalty scheme. MalGene customizes
these two scores for better system call alignment.
Our system call alignment adopts a similar approach
as MalGene [34] but extends the scope of critical system
calls, whose alignments are more important than oth-
ers. Since MalGene only considers the system call se-
quence deviation of the same binary under different run-
time environments, the critical system calls are subject
to process and thread operations.
In contrast, BinSim
focuses on system call sequence comparisons of poly-
morphic or metamorphic malware variants. Our critical
system calls include more key system object operations.
Appendix Table 7 lists some examples of critical system
calls/Windows API we deﬁned. Note that other system
call comparison methods, such as dependency graph iso-
Figure 5: System call sliced segment equivalence check-
ing steps: (1) system call alignment; (2) dynamic slicing
and weakest precondition calculation; (3) cryptographic
function detection; (4) equivalence checking; (5) crypto-
graphic function approximate matching.
3 On-demand Trace Logging
BinSim’s online logging stage records the needed infor-
mation for the subsequent steps. The logged trace data
consist of three parts: 1) instruction log contains each ex-
ecuted instruction’s x86 opcode and values of operands;
2) memory log stores memory access addresses, which
facilitate binary code slicing; 3) system calls invoked and
their data ﬂow dependencies. In general, not all of the
trace data are of interest. For example, a common op-
timization adopted by the ofﬂine symbolic execution is
“function summary” [10]. For some well-known library
functions that have explicit semantics (e.g., string opera-
tion functions), we can turn off logging when executing
them and generate a symbolic summary correspondingly
in the ofﬂine analysis. Another example is many mal-
ware samples exhibit the malicious behavior only after
the real payload is unpacked. Our generic unpacking
plug-in, similar to the hidden code extractor [30], sup-
ports recording the execution trace that comes from real
payload instead of various unpacking routines.
One common attack to system call recording is adding
irrelevant system calls on purpose, which can also poison
the system call sequences alignment. To remove system
call noises, we leverage Temu’s customizable multi-tag
taint tracking feature to track data ﬂow dependencies be-
tween system calls. Kolbitsch et al. [36] have observed
three possible sources of a system call argument: 1) the
output of a previous system call; 2) the initialized data
section (e.g., .bss segment); 3) the immediate argument
of an instruction (e.g., push 0). Except for the imme-
diate argument, we label the system call outputs and the
value read from the initialized data section as different
258    26th USENIX Security Symposium
USENIX Association
Syscall1 (arg1, arg2)Syscall1' (arg1, arg2)Syscall2 (arg1)Syscall2' (arg1)......(1)(1)(3)(2)(2)(4)(5)Program PProgram P' f3f3’wp1wp1’f3f3’Cryptographic functionCryptographic functionwp2wp2’wp1wp1’wp2wp2’(3)Figure 6: Schematic overview of BinSim. The output for each processing: (1) unpacked code, instruction log, memory
log, and system call sequences; (2) IL traces and initial matched system call pairs; (3) weakest preconditions of system
call sliced segments; (4) identiﬁed cryptographic functions.
morphism [14] and tree automata inference [3] are or-
thogonal to our approach.
4.2 Dynamic Slicing Binary Code
After system calls alignment, we will further examine the
aligned system calls to determine whether they are truly
equivalent. To this end, commencing at a tainted system
call’s argument, we perform dynamic slicing to back-
track a chain of instructions with data and control depen-
dencies. The slice criterion is (cid:104)eip, argument(cid:105), while eip
indicates the value of instruction pointer and argument
denotes the argument taken as the beginning of back-
wards slicing. We terminate our backward slicing when
the source of slice criterion is one of the following con-
ditions: the output the previous system call, a constant
value, or the value read from the initialized data sec-
tion. Standard dynamic slicing algorithm [1, 80] relies
on program dependence graph (PDG), which explicitly
represents both data and control dependencies. However,
compared to the source code slicing, dynamic slicing on
the obfuscated binaries is never a textbook problem. The
indirect memory access of binary code will pollute the
conventional data ﬂow tracking. Tracking control depen-
dencies in the obfuscated binary code by following ex-
plicit conditional jump instructions is far from enough.
Furthermore, the decode-dispatch loop of virtualization
obfuscation will also introduce many fake control de-
pendencies. As a result, conventional dynamic slicing
algorithms [1, 80] will cause undesired slice explosion,
which will further complicate weakest precondition cal-
culation. Our solution is to split data dependencies and
control dependencies tracking into three steps: 1) index
and value based slicing that only consider data ﬂow; 2)
tracking control dependencies; 3) remove the fake con-
trol dependencies caused by virtualization obfuscation
code dispatcher.
BinSim shares the similar idea as Coogan et al. [19] in
that we both decouple tracing control ﬂow from data ﬂow
when handling virtualization obfuscation. Coogan et al.’s
approach is implemented through an equational reason-
ing system, while BinSim’s dynamic slicing is built on
an intermediate language (Vine IL). However, BinSim is
different from Coogan et al.’s work in a number of ways,
which we will discuss in Section 7.
4.2.1
Index and Value Based Slicing
We ﬁrst trace the instructions with data dependencies by
following the “use-def” chain (ud-chain). However, the
conventional ud-chain calculation may result in the pre-
cision loss when dealing with indirect memory access, in
which general registers are used to compute memory ac-
cess index. There are two ways to track the ud-chain of
indirect memory access, namely index based and value
based. The index based slicing, like the conventional ap-
proach, follows the ud-chain related the memory index.
For the example of mov edx [4*eax+4], the instruc-
tions affecting the index eax will be added. Value based
slicing, instead, considers the instructions related to the
value stored in the memory slot. Therefore, the last in-
struction that writes to the memory location [4*eax+4]
will be included. In most cases, the value based slicing
is much more accurate. Figure 7 shows a comparison be-
tween index based slicing and value based slicing on the
same trace. Figure 7(a) presents the C code of the trace.
In Figure 7(b), index based slicing selects the instruc-
tions related to the computation of memory index j =
2*i + 1. In contrast, value based slicing in Figure 7(c)
contains the instructions that is relevant to the computa-
tion of memory value A[j] = a + b, which is exactly
the expected slicing result. However, there is an excep-
tion that we have to adopt index based slicing: when an
indirect memory access is a valid index into a jump table.
Jump tables typically locate at read-only data sections or
code sections, and the jump table contents should not be
modiﬁed by other instructions. Therefore, we switch to
track the index ud-chain, like eax rather than the mem-
ory content.
4.2.2 Tracking Control Dependency
Next, we include the instructions that have control de-
pendencies with the instructions in the last step. In ad-
dition to explicit conditional jump instructions (e.g., je
USENIX Association
26th USENIX Security Symposium    259
OnlineOfflineBinary 1Binary 2Generic UnpackingTemu(1)PreprocessingSegment Equivalence CheckerSimilarity ScoreTrace Logging Syscall  AlignmentIL Converter(2)(3)Slicing and WP CalculationCryptographic Function Detection(4)1. It is a sequence of memory operations, ending with
an indirect jump.
2. It has an input register a as virtual program counter
(VPC) to fetch the next bytecode (e.g., ptr[a]).
For example, VMProtect [69] takes esi as VPC
while Code Virtualizer [52] chooses al register.
3. It ends with an indirect jump which dispatches to a
bytecode handler table. The index into the jump ta-
ble has a data dependency with the value of ptr[a].
Our containment technique is to ﬁrst identify possible
decode-dispatch loop iterations in the backward slice ac-
cording to the above common features. For each instruc-
tion sequence ending with an indirect jump, we mark
the input registers as a1,a2, ...an and output registers as
b1,b2, ...bn. Then we check whether there is an output
register bi meets the two heuristics:
1. bi is tainted by the data located in ptr[a j].
2. The instruction sequence ends with jmp ptr
[bi*(table stride) + table base].
After that, we will remove the fake control dependencies
caused by virtualization obfuscation code dispatcher. In
our preliminary testing, ﬁve virtualization obfuscation
protected instructions produces as many as 3,163 in-
structions, and most of them are related to the decode-
dispatch loop. After our processing, the number of in-
struction is reduced to only 109.
4.3 Handling Cryptographic Functions
Now-infamous crypto ransomware extort large ransom
by encrypting the infected computer’s ﬁles with stan-
dard cryptographic functions [33]. One ransomware
archetype typically evolves from generation to genera-
tion to produce a large number of new strains. They
may reﬁne old versions incrementally to better sup-
port new criminal business models.
In addition to the
generic detection methods based on monitoring ﬁle sys-
tem anomalies [32, 58], it is very interesting to investi-
gate this emerging threat with BinSim, such as identify-
ing ransomware variant relationships and investigate ran-
somware evolution. However, cryptographic functions
have been known to be a barrier to SMT-based security
analysis in general [11, 72] because of the complicated
input-output dependencies. Our backward slicing step
will produce a quite long instruction segment, and the
corresponding equivalence checking will become hard to
solve as well [67].
We observer that cryptographic function execution has
almost no interaction with system calls except the ones
are used for input and output. For example, crypto ran-
somware take the original user’s ﬁle as input, and then
Figure 7: Index based vs. Value based slicing.
and jne), obfuscators may hide control ﬂow into indi-
rect jumps by using encoding function to calculate the
real branch [78]. Our solution is to trace how the control
transfer is calculated. We observe that most x86 con-
ditional control transfers depend on certain bit value of
the eflags register (e.g., zf and cf). Even obfusca-
tors try to hide the conditional jumps, they still need to
use arithmetic operations on certain eflags bits (e.g.,
ROP obfuscation [40, 55] and covert computation [59]).
To identify these implicit control transfers, our approach
trace the data ﬂow of eflags bit value; that is, the in-
structions that calculate the bit value of the eflags are
added into the slice. Note that in addition to the explicit
conditional jump instructions, there are quite a number of
instructions that have conditional jump semantics. For
example, cmovne ebx,edx moves the value of edx to
ebx according to zf ﬂag. We also notice a case that
the conditional logic is implemented without eflags:
jecxz jumps if register ecx is zero. Currently BinSim
supports all these special cases, which are summarized
in Appendix Table 8.
4.2.3 Dispatcher Identiﬁcation
Virtualization obfuscation, a great challenge to binary
code slicing [61, 79], replaces the original binary code
with new type of bytecode, and a speciﬁc interpreter is
attached to interpret each bytecode. Due to the ease
of implementing an instruction set emulator [64], cur-
rent tools adopt decode-dispatch loop based interpre-
tation [69, 52, 16]. Besides, the virtualization byte-
code is designed as stack architecture style [62], which
has a simple representation but requires more statements
for a given computation. One instruction is typically
translated to a sequence of bytecode operations on the
stack values through the decode-dispatch loop. As a re-
sult, the collected slice from the above steps will con-
tain a large number of redundant instructions caused by
decode-dispatch loop iterations. We observe that each
decode-dispatch loop iteration has the following com-
mon features.
260    26th USENIX Security Symposium
USENIX Association
Index based slicingValue based slicing(a) Source code(b)(c)j = 2*i + 1;A[j] = a + b;print A[j];mov eax, [ebp-8]add eax, eaxadd eax, 1mov [ebp-4], eaxmov eax, [ebp-56]mov edx, [ebp-52]add edx, eaxmov eax, [ebp-4]mov [ebp-48+eax*4], edxmov eax, [ebp-4]mov eax, [ebp-48+eax*4]mov edi, eaxcall printmov eax, [ebp-8]add eax, eaxadd eax, 1mov [ebp-4], eaxmov eax, [ebp-56]mov edx, [ebp-52]add edx, eaxmov eax, [ebp-4]mov [ebp-48+eax*4], edxmov eax, [ebp-4]mov eax, [ebp-48+eax*4]mov edi, eaxcall printoverwrite it with the encrypted version. Inspired by Ca-
ballero et al.’s work [11], we do a “stitched symbolic
execution” to walk around this challenge. Speciﬁcally,
we ﬁrst make a forward pass over the sliced segments
to identify the possible cryptographic functions between
two system calls. We apply the advanced detection
heuristics proposed by Gr¨obert et al. [27] (e.g., exces-
sive use of bitwise operations, instruction chains, and
mnemonic const values) to quickly match known cryp-
tographic function features.
If a known cryptographic
function is detected, we will turn off the weakest pre-
condition calculation and equivalence checking. In Sec-
tion 4.5, we will discuss how to approximately measure
the similarity of detected cryptographic functions.
4.4 Weakest Precondition Calculation
Let’s assume the slice we collected (S) contains a se-
quence of instructions [i1,i2, ...,in]. Our weakest pre-
condition (WP) calculation takes (S) as input, and the
state of the execution to the given API call’s argument
as the postcondition (P). Inductively, we ﬁrst calculate