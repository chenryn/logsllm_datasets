### 3.1 BEACON Dataset

Our BEACON dataset is derived from logs generated by JavaScript beacons, which are part of the Content Delivery Network's (CDN) Real-User Monitoring (RUM) system. This dataset includes various types of information, such as timing and page load data obtained via browser instrumentation (e.g., the Resource Timing API [3]), client details including IP addresses, and data collected through the Network Information API. The logs used in this study were collected over a one-month period, from December 1, 2016, to December 31, 2016.

The beacons are sourced from page loads of CDN customers who have opted into the RUM system. This limits the visibility of the beacons to clients of participating customers. CDNs typically handle a wide variety of HTTP traffic, including images, API calls, and video streaming, but the beacons only capture web page loads. Within the set of participating customers, beacons are further sampled from a random subset of all page load requests.

#### The Network Information API

The Network Information API [2] allows web applications to access information about the underlying network connection used by the device. Although not a W3C standard, it is implemented in several popular mobile browsers, including Android’s native WebKit, Chrome for Android (starting with version 38), and Firefox Mobile.

The API provides the connection type (e.g., cellular, Bluetooth, Ethernet, Wi-Fi) and supports monitoring network changes. Connectivity information is obtained from the browser, which queries the underlying operating system to gather data on active network interfaces or detect changes in network connectivity.

While we have high confidence in the accuracy of the Network Information API data (§4), there are some issues related to classifying access technology types from end-host devices. We identified two main issues that can lead to inaccurate associations between IP addresses and connection types:

1. **Tethering or Mobile Hotspot Usage**: The Network Information API is limited to the device's perspective. For example, a laptop connected to Wi-Fi through a mobile hotspot would report its Wi-Fi network link, even though the traffic is actually traversing a cellular network.
2. **Network Interface Changes**: There is a possibility that network interfaces could change between the time the client's IP address was recorded and when the Network Information API was polled. In our beacon, client IP addresses were recorded before the Network Information API was invoked, which could lead to inaccuracies if a client initially connected over Wi-Fi and then switched to cellular.

These inaccuracies introduce some noise into the Network Information API responses, making it unlikely that any heavily trafficked cellular subnet would have 100% cellular labels. We validate the accuracy of the Network Information API labels in the following section.

Despite its absence in several popular mobile browsers, particularly iOS at the time of our collection, we observed substantial Network Information API traffic in our BEACON dataset. Figure 1 shows the prevalence of Network Information API usage from our RUM system between September 2015 and June 2017. During our measurements, the Network Information API was included in 13.2% of beacon requests, representing several hundred million hits. By June 2017, 15% of all BEACON hits had functional Network Information API data. The figure also indicates that the majority of Network Information API data came from Chrome Mobile and Android Webkit browsers, followed by Chrome and Firefox Mobile. Google is a significant driver of Network Information API adoption, with 96.7% of enabled requests coming from Google-developed browsers in December 2016.

We recognize that our BEACON dataset may be biased due to the CDN's clientele and the opt-in nature of the RUM system. However, we believe our detection methodology is unaffected, as it relies on the ratio of detected access technology types within individual subnets. Therefore, we use the BEACON dataset primarily for network connectivity identification, determining whether an IP subnet represents clients connected over cellular or fixed-line access links, and augment our analysis with separate measurements capturing all CDN platform demand across all customers and clients. We describe this additional dataset in the next section.

### 3.2 DEMAND Dataset

To generate a comprehensive view of request demand for the entire CDN platform across the global IP space, we leverage request logs from the same CDN. Using a seven-day period from December 24 to December 31, 2016, we developed a platform demand weight for all /24 and /48 subnets that interacted with the CDN.

Unlike the JavaScript beacons, which represent a sample of web-page views, these logs accumulate all requests across the CDN's entire platform, covering all types of protocols and devices. Daily request statistics are aggregated by /24 subnets for IPv4 and /48 subnets for IPv6. These statistics are then combined with results from the previous seven days to smooth out daily demand variations. Finally, these results are normalized across the platform into unit-less Demand Units (DU). Demand Units are normalized out of 100,000, with each DU representing 0.001% of global request demand (i.e., 1,000 DU = 1%).

These demand records provide a much richer coverage of network demand than the BEACON dataset and provide context to our results. While a growing fraction of Internet demand is non-web-related, much of it continues to operate over HTTP, such as video streaming and mobile application traffic.

We use demand at this CDN as a proxy for overall traffic demand and acknowledge that this may bias our analysis to areas covered by this particular service. However, we have no clear way of establishing baselines for mobile traffic usage or assessing sampling bias other than appealing to statistics on the worldwide deployment of the CDN's infrastructure (200,000 servers in 1,450 networks) and the breadth of the Internet from which our requests originate (46,936 networks in 241 countries).

Compared to the DEMAND dataset, the BEACON dataset captures only 73% of the blocks observed on the entire platform (4.7M out of the 6.4M /24 subnets). The BEACON collection is limited to web page loads and requires a web browser with JavaScript enabled to successfully report data, restrictions that do not apply to the DEMAND dataset. When weighting subnets by their respective demand, the BEACON dataset captures 92% of platform requests.

### 4. Cellular Subnet Identification

In this section, we outline our method for identifying cellular subnets. The goal is to detect subnets assigned to cellular connections (as opposed to other types of mobile connections) across the global IP space. We define a cellular connection as one that traverses a cellular radio on its path. We then present results from applying this method to our datasets and report on our validation with ground truth information from three large mobile operators.

#### 4.1 Methodology

Our methodology for classifying subnets as either cellular or non-cellular is straightforward. We use the Network Information API to detect the presence of cellular access technology in a particular IP address block. We compute the ratio of cellular hits for a given subnet and use this ratio to classify each subnet as cellular or non-cellular (i.e., fixed-line). The following paragraphs provide additional details on each of these steps.

To detect the presence of cellular access technology in a particular IP address block, we use the ConnectionType reported by the Network Information API. ConnectionType is defined as an enumeration that includes: Bluetooth, cellular, Ethernet, Wi-Fi, and WiMAX. Using this connectivity information, we label every hit in our BEACON dataset that contains Network Information data as either cellular or non-cellular and use this to calculate a cellular ratio for every /24 and /48 CIDR sampled. This ratio represents the fraction of a given subnet that comes from cellular hits over the total number of Network Interface-enabled hits for that subnet. We label a particular subnet as cellular or non-cellular based on this ratio.

Figure 2 plots the distribution of these cellular ratios across the global IP space. The figure shows the cumulative distribution of cellular ratios for all active /24 and /48 subnets, as well as the distribution of cellular ratios weighted by these subnets' traffic demand. We find that most addresses fall into two categories: very low cellular (ratio < 0.1) and very high cellular (ratio > 0.9). The figure shows that 91.3% of /24 subnets and 98.7% of /48 subnets in our dataset have a cellular ratio of less than 0.1, and 5.8% of /24 and 1.2% of /48 subnets have a cellular ratio greater than 0.9. The remaining subnets in the range between 0.1 and 0.9 account for 2.9% and 0.1% of /24 and /48 subnets, respectively.

In cases of subnets with intermediate cellular ratios (between 0.1 and 0.9), we must label them as either cellular or non-cellular, assuming access link homogeneity in these aggregates. It is unlikely that ISPs would allocate subnets smaller than /24 and /48 to cellular infrastructure, and recent studies have found IPv4 /24 subnets to be homogeneous in 90% of cases with respect to last-hop routers [19]. We also assume IPv6 /48 subnets to be homogeneous, given their relative abundance and more recent assignment.

For each subnet in our dataset, we assign a demand value based on the corresponding subnet in our DEMAND dataset. Remember that this dataset accumulates all requests across the CDN's entire platform, normalized into unit-less Demand Units where each unit represents 0.001% of global request demand. Looking at demand, we see similar patterns, with the vast majority of subnet traffic residing at either end of the cellular ratio scale. Again, the majority of all traffic demand is contained within subnets with a cellular ratio less than 0.1, making up 80% of IPv4 demand and 98.7% of IPv6 demand. Subnets with a cellular ratio greater than 0.9 account for 13.1% of IPv4 demand and 6.4% of IPv6 demand. However, there is substantial demand in the intermediate ratios for IPv4, making up 6.9% of IPv4 demand.

We use a threshold value for the cellular ratio to decide on the most appropriate label for a subnet. Clearly, the accuracy of our methodology depends on this chosen threshold. In the following section, we describe our process for determining this threshold and validate our choice against the ground truth from three large mobile operators.

#### 4.2 Parameter Selection & Validation

We derive our threshold values for cellular address identification using ground truth information from three large mobile carriers. Our data comes from a diverse set of operators: a large mixed European mobile provider (Carrier A), a large dedicated MNO in the U.S. (Carrier B), and a large mixed MNO in the Middle East (Carrier C).

For each operator, we obtained a list of IP subnets labeled as belonging to either the cellular or non-cellular (e.g., fixed-line) section of their network. To determine the appropriate threshold for cellular network detection, we computed the accuracy of our method across different threshold values, looking at the precision and recall of our detected cellular subnets compared to ground-truth data.

Precision and recall are common metrics for binary classification. Precision, also called the positive predictive value, is the fraction of correctly classified items over the total classified items (tp / (tp + fp)). Recall, also known as sensitivity, is the fraction of correctly labeled items over the true number of items in that class (tp / (tp + fn)). In this context, true positives (TP) represent correctly identified cellular subnets, and true negatives (TN) represent correctly identified fixed-line subnets. False positives (FP) denote fixed-line subnets that were identified as cellular, and false negatives (FN) represent cellular subnets that were inaccurately identified as fixed-line.

We computed the accuracy of all threshold values between the range (0,1] by calculating the F1 Score of each threshold. The F1 Score is a combination metric that represents the harmonic mean between precision and recall, striking a balance between the accuracy and comprehensiveness of the classified results. Figure 3 plots the F1 Score threshold sensitivity for all three operators for which we obtained ground-truth data.

The figure shows the stability of classification accuracy across a wide range of threshold values. Across each operator, the accuracy of our detection remains relatively stable for all threshold values between 0.1 and 0.96, implying that our method is robust to different threshold choices. This stability is due to the high confidence in the information that a cellular label carries. There are very few cases that lead to cellular false positives from the Network Information API. Unlike Wi-Fi labels, which can occur in cellular access links due to tethering and other intermediate connectivity, cellular labels are only obtained when the device is connected through a cellular network interface. In this way, even cases where 10% of the reported labels are cellular are enough to correctly classify a cellular subnet.