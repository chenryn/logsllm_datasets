tems across 245 countries. Table 2 summarizes key aspects of the
datasets.
3.1 BEACON dataset
Our BEACON dataset is derived from logs from Javascript beacons,
part of the CDN’s Real-User Monitoring system (RUM), and con-
tains information such as the timing and page load information
obtained from browser instrumentation (e.g. the Resource Timing
API [3]), client information including IP address, and data collected
by the Network Information API, which we describe in detail be-
low. We utilize logs collected over a one month period between
December 1, 2016 and December 31, 2016.
Beacons are sourced from page loads of CDN customers that
have opted-into this RUM system. This limits the visibility of the
beacons to clients of participating customers. Additionally, while
Figure 1: Stacked line graph of the percentage of BEACON
hits enabled with the Network Information API. The major-
ity of enabled API hits come from Chrome Mobile and the
native Android Webkit browser.
CDNs see a wide variety of HTTP traffic for things such as images,
API calls and video streaming, the beacons only capture web page
loads. Within this participating customer set, beacons are further
sampled from a random subset of all page load requests.
The Network Information API. The Network Information
API [2] allows web applications to access information about the
underlying network connection in use by the device. While not a
W3C standard, the Network Information API is implemented in
several popular mobile browsers, most notably Android’s native
WebKit, Chrome for Android beginning in version 38, 1 and Firefox
Mobile.
The API reveals the connection type that the system is using to
communicate with the network (e.g., cellular, Bluetooth, Ethernet,
WiFi) and supports monitoring network changes. Connectivity is
obtained from the browser, which calls the underlying operating
system to obtain information on active network interfaces, or to
detect changes in network connectivity.
While we have high confidence in the accuracy of Network In-
formation API data (§4), there are issues that arise from classifying
access technology type from end-host devices. We discovered two
types of issues which lead to inaccurate associations between IP
address and connection type. The first and most prevalent is from
tethering or mobile hotspot usage. The Network Information API
is limited to the device’s point of view. Thus, a device that is con-
nected through an intermediate technology, for instance a laptop
connected to WiFi through a mobile hotspot – would only report its
WiFi network link despite the traffic traversing a cellular network.
In another rarer case, there is a possibility that network interfaces
could change between when the client’s IP address was recorded,
and when the Network Information API was polled. In the ver-
sion of the beacon used in our experiments, client IP addresses
were recorded prior to Network Information API invocation, which
could lead to this case if a client originally connected to the page
over WiFi, and then changed to cellular when the Network Infor-
mation API was invoked. While it would be possible to monitor
1Released
chrome-for-android-update.html
on Oct.
8
2014 https://chromereleases.googleblog.com/2014/10/
2015-102015-122016-022016-042016-062016-082016-102016-122017-022017-042017-06Month0246810121416Network Information API (% of Hits)Chrome MobileAndroid WebkitTotalIMC ’17, November 1–3, 2017, London, UK
Rula et al.
network connectivity changes through the Network Information
API to prevent this, the beacon used did not possess this capability.
These inaccuracies result in a certain level of noise in the Network
Information API’s responses, making it unlikely that any heavily
trafficked cellular subnet would have a 100% cellular labels. We
validate the accuracy of the Network Information API labels in the
following section.
Despite its absence in several popular mobile browsers – most
notably iOS at the time of our collection – we observe substantial
Network Information API traffic in our BEACON dataset. Figure 1
shows the prevalence of Network Information API from our RUM
system between September 2015 and June 2017. While at the time
of our measurements, the Network Information API was included
in 13.2% of beacon requests, that still represents several hundreds
of millions of hits. In June 2017, we observe 15% of all BEACON hits
to have functional Network Information API data. The figure also
shows that the vast majority of Network Information is obtained
from Chrome Mobile and Android Webkit browsers, followed by
Chrome and Firefox Mobile. Google is heavily driving Network
Information API adoption, with 96.7% of enabled requests coming
from Google developed browsers in December 2016.
We recognize that our BEACON dataset is biased by the CDN’s
clientele, as well as the opt-in nature of its RUM system. Regardless
of overall biases, we believe our detection methodology is unaf-
fected, since it is relies on the ratio of detected access technology
types within individual subnets. We therefore use our BEACON
dataset only for network connectivity identification, determining
whether an IP subnet represents clients connected over cellular
or fixed-line access links, and augment our analysis with separate
measurements capturing all CDN platform demand, across all cus-
tomers and clients. We describe this additional dataset in detail in
the following section.
3.2 DEMAND dataset
We leverage requests logs from the same CDN to generate a compre-
hensive view of request demand for the entire CDN platform across
the global IP space. Using a seven-day period between December
24 and December 31 2016, we develop a platform demand weight
for all /24 and /48 subnets which have interacted with the CDN.
Unlike the Javascript beacons which represent a sample of web-
page views, these logs accumulate all requests across the CDN’s
entire platform, covering all types of protocols and devices. To gen-
erate this, all daily request statistics are aggregated by /24 subnets
for IPv4 and /48 subnets for IPv6. These request statistics are then
combined with results from the previous 7 days to smooth out any
daily demand variations. Finally, these results are normalized across
the platform into unit-less Demand Units (DU). Demand Units are
normalized out of 100,000, 2 with each DU representing 0.001% of
global request demand (i.e. 1, 000DU = 1%). These demand records
provide a much richer coverage of network demand than the BEA-
CON dataset, and provide context to our results. While a growing
fraction of Internet demand is non-web related, much of it con-
tinues to operate over HTTP such as video streaming and mobile
application traffic.
We use demand at this CDN as a proxy for overall traffic demand
and acknowledge that this may bias our analysis to areas covered
by this particular service. We have, however, no clear way of estab-
lishing baselines for mobile traffic usage or assessing sampling bias
other than appealing to statistics on the world-wide deployment
of the CDN’s infrastructure (200,000 servers in 1,450 networks)
and the swath of the Internet our requests originate from (46,936
networks in 241 countries).
Compared to the DEMAND dataset, the BEACON dataset cap-
tures only 73% of the blocks observed on the entire platform (4.7M
out of the 6.4M /24 subnets). The BEACON collection is limited
to web page loads, and requires a web browser with Javascript
enabled to successfully report data, restrictions that do not apply to
the DEMAND dataset collection. When weighting subnets by their
respective demand, the BEACON dataset captures 92% of platform
requests.
4 CELLULAR SUBNET IDENTIFICATION
In this section we outline our method for cellular subnet identifica-
tion. The goal is to detect subnets assigned to cellular connection
(instead of other type of mobile connections) across the global IP
space. We define a cellular connection as one traversing a cellu-
lar radio on its path. We then present results from applying this
method to our datasets, and report on our validation with ground
truth information from three large mobile operators.
4.1 Methodology
Our methodology for classifying subnets as either cellular/non-
cellular is straightforward. We use the Network Information API
to detect the presence of cellular access technology in a particular
IP address block. We compute the ratio of cellular hits for a given
subnet, and utilize this ratio to classify each subnet as cellular/non-
cellular (i.e., fixed-line). The following paragraphs provide addi-
tional details on each of these steps.
To detect the presence of cellular access technology in a par-
ticular IP address block we use the ConnectionType reported by
the Network Information API . ConnectionType is defined as an
enumeration that includes: Bluetooth, cellular, Ethernet, WiFi and
WiMAX.3
Using this connectivity information, we label every hit in our
BEACON dataset which contains Network Information information
as either cellular or non-cellular, and use this to calculate a
cellular ratio for every /24 and /48 CIDR sampled. This ratio rep-
resents the fraction of a given subnet that comes from cellular
hits over the total number of Network Interface enabled hits for
that subnet. We label a particular subnet as cellular or non-cellular
based on this ratio.
Figure 2 plots the distribution of these cellular ratios across global
IP space. The figure shows the cumulative distribution of cellular
ratios for all active /24 and /48 subnets, as well as the distribution
of cellular ratios weighted by these subnets’ traffic demand. We
find that most addresses fall into two categories: very low cellular
(ratio  0.9). The figure shows that
91.3% of /24 subnets and 98.7% of /48 subnets in our dataset have a
2100,000 is used to increase precision throughout our analysis
3Other than WiFi and cellular, all other connection types are rare as the majority of
Network Interface enabled browsers operate on mobile devices.
Cell Spotting
IMC ’17, November 1–3, 2017, London, UK
Figure 2: Distribution of calculated cellular ratios for all
IPv4 and IPv6 subnets in our BEACON dataset, as well as the
traffic demand for these subnets from our DEMAND dataset.
Figure 3: Sensitivity of cellular ratio thresholds for three
large mobile operators. We calculated the accuracy, using
the F1 score, of our classifier across different cellular thresh-
olds. The choice of cellular ratio is very resilient, mainly due
to the low incidence of false positives of cellular from the
Network Information API.
cellular ratio of less than 0.1, and 5.8% of /24 and 1.2% of /48 subnets
have a cellular ratio greater than 0.9. The remaining subnets in the
range between 0.1 and 0.9 account for 2.9% and 0.1% of /24 and /48
subnets, respectively.
In cases of subnets with intermediate cellular ratios, between
0.1 and 0.9, we have to label them as either cellular or non-cellular
assuming access link homogeneity in these aggregates. It is unlikely
that ISPs would allocate subnets smaller than /24 and /48 to cellu-
lar infrastructure and, indeed, recent studies have found IPv4 /24
subnets to be homogeneous in 90% of cases with respect to last hop
routers [19]. We also assume IPv6 /48 subnets to be homogeneous,
in light of relative abundance and more recent assignment.
For each subnet in our dataset, we assign a demand value based
from the corresponding subnet in our DEMAND dataset. Remember
that this dataset accumulates all requests across the CDN’s entire
platform, normalized into unit-less Demand Units where each units
represents 0.001% of global request demand. Looking at demand,
we see similar patterns, with the vast majority of subnet traffic
residing on either end of the cellular ratio scale. Again, the majority
of all traffic demand is contained within subnets with a cellular
ratio less than 0.1, making up 80% of IPv4 demand and 98.7% of
IPv6 demand. Subnets with cellular ratio greater than 0.9 account
for 13.1% of IPv4 demand, and 6.4% of IPv6 demand. There exists,
however, substantial demand in the intermediate ratios for IPv4,
making up 6.9% of IPv4 demand.
We use a threshold value for cellular ratio to decide on the most
appropriate label for a subnet. Clearly, the accuracy of our method-
ology depends on this chosen threshold. In the following section we
describe our process for determining this threshold and validate our
choice against the ground-truth from three large mobile operators.
4.2 Parameter Selection & Validation
We derive our threshold values for cellular address identification
using ground truth information from 3 large mobile carriers. Our
data comes from a diverse set of operators: a large mixed European
mobile provider (Carrier A), a large dedicated MNO in the U.S
(Carrier B), and a large mixed MNO in the middle east (Carrier C).
For each operator, we obtained a list of IP subnets labeled as
belonging to either the cellular or non-cellular (e.g. fixed-line) sec-
tion of their network. To determine the appropriate threshold for
cellular network detection, we compute the accuracy of our method
across different threshold values, looking at the precision and recall
of our detected cellular subnets compared to ground-truth data.
Precision and recall are common metrics for binary classification.
Precision, also called the positive prediction value, is fraction of
tp
correctly classified items over the total classified items (
tp+f p ).
Recall, also known as sensitivity, is the fraction of correctly labeled
tp
items over the true number of items in that class (
tp+f n ). In this
context, true positives (TP) represent correctly identified cellular
subnets, and true negatives (TN) as correctly identified fixed-line
subnets. False positives (FP) denote fixed-line subnets which were
identified as cellular, and false negatives (FN) represent cellular
subnets which we inaccurately identified as fixed-line.
We compute the accuracy of all threshold values between the
range (0,1] by calculating the F1 Score of each threshold. The F1
Score is a combination metric which represents the harmonic mean
between precision and recall, and strikes a balance between the ac-
curacy and the comprehensiveness of the classified results. Figure 3
plots this F1 Score threshold sensitivity for all three operators for
which we obtained ground-truth data.
The figure shows the stability of classification accuracy across a
wide range of threshold values. Across each operator, the accuracy
of our detection remains relatively stable for all threshold values
between 0.1 and 0.96, implying that our method is robust to different
threshold choices. This stability is the result of the high confidence
in information that a cellular label carries. There are very few
cases which lead to cellular false positive results from the Network
Information API. Unlike WiFi labels which can occur in cellular
access links due to tethering and other intermediate connectivity,
cellular labels are only obtained when the device is connected
through a cellular network interface. In this way, even cases where
10% of the reported labels are cellular are enough to correctly
classify a cellular subnet.
0.00.20.40.60.81.0Cellular Ratio0.700.750.800.850.900.951.00CDFIPv4 DemandIPv4 SubnetsIPv6 DemandIPv6 Subnets0.00.20.40.60.81.0Cellular Ratio Threshold0.50.60.70.80.91.0F1 ScoreCarrier A F1 ScoreCarrier B F1 ScoreCarrier C F1 ScoreIMC ’17, November 1–3, 2017, London, UK
Rula et al.
Carrier A∗ CIDR
Demand
CIDR
Demand
Carrier B
Carrier C∗ CIDR
Demand
TP
496
70.96
2,937
46.01
383
10.79
FP
16
0.142
0
0
5
0.17
TN
89,553
1306.36
0
0
3,049
42.85
FN Precision Recall
0.10
0.82