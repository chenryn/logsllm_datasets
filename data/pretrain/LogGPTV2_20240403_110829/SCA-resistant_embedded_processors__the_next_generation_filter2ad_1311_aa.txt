title:SCA-resistant embedded processors: the next generation
author:Stefan Tillich and
Mario Kirschbaum and
Alexander Szekely
SCA-Resistant Embedded Processors—The Next
Generation
Stefan Tillich
University of Bristol
Computer Science
Department
Merchant Venturers Building
Woodland Road, BS8 1UB,
Bristol, UK
PI:EMAIL
Mario Kirschbaum
Alexander Szekely
Graz University of Technology
Graz University of Technology
Institute for Applied
Information Processing and
Communications
Inffeldgasse 16a, A–8010
PI:EMAIL
Graz, Austria
Institute for Applied
Information Processing and
Communications
Inffeldgasse 16a, A–8010
PI:EMAIL
Graz, Austria
ABSTRACT
Resistance against side-channel analysis (SCA) attacks is
an important requirement for many secure embedded sys-
tems. Microprocessors and microcontrollers which include
suitable countermeasures can be a vital building block for
such systems. In this paper, we present a detailed concept
for building embedded processors with SCA countermea-
sures. Our concept is based on ideas for the secure imple-
mentation of cryptographic instruction set extensions. On
the one hand, it draws from known SCA countermeasures
like DPA-resistant logic styles. On the other hand, our pro-
tection scheme is geared towards use in modern embedded
applications like PDAs and smart phones. It supports multi-
tasking and a separation of secure system software and (po-
tentially insecure) user applications. Furthermore, our con-
cept aﬀords support for a wide range of cryptographic al-
gorithms. Based on this concept, embedded processor cores
with support for a selected set of cryptographic algorithms
can be built using a fully automated design ﬂow.
Categories and Subject Descriptors
B.7.1 [Integrated Circuits]: Types and Design Styles—
Microprocessors and microcomputers; K.6.5 [Computing
Milieux]: Management of Computing and Information Sys-
tems—Security and Protection; C.3 [Special-Purpose and
Application-Based Systems]: Smartcards
General Terms
Security
Keywords
Side-channel analysis, SCA countermeasures, embedded pro-
cessors
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’10 Dec. 6-10, 2010, Austin, Texas USA
Copyright 2010 ACM 978-1-4503-0133-6/10/12 ...$10.00.
1.
INTRODUCTION
So far, most SCA countermeasures proposed in literature
deal either with the protection of dedicated hardware (e.g.
cryptographic coprocessors) or of software implementations.
However, some works have addressed the issue of integrating
protection mechanisms directly into the processor. May et
al. proposed the concept of non-deterministic processors [9],
where the instructions are executed in a more or less ran-
dom fashion. A potential issue for such non-deterministic
processors is the dependency of security and eﬃciency on
the parallelism of the executed code. Regazzoni et al. [12]
have developed an automated design ﬂow which can inte-
grate custom functional units protected by a secure logic
style into a basic processor architecture. While automati-
zation is very desirable, their work so far only addresses a
fraction of the problem, as side-channel leakage not only em-
anates from the processor’s functional units but also from
several other parts which hold critical data (e.g. pipeline
registers and memory).
It is currently unclear how their
solution can be extended to protect the whole processor.
We have drawn the basic idea for the protection mech-
anism described in this paper from the paper of Tillich et
al. which describes SCA countermeasures in the context of
cryptographic instruction set extensions [15].
In this con-
cept, a part of the processor is protected by a secure logic
style, while the rest of the hardware is left unchanged. One
of the key advantages of our solution is that only a fraction
of the processor needs to be implemented in the costly secure
logic style, whereas a naive approach would incur this imple-
mentation overhead for the complete processor system. Note
that the naive approach would require also the complete ex-
ternal memory to be implemented with a side-channel re-
sistant memory technology in order to achieve protection
equivalent to our solution. The authors are currently not
aware of a satisfying solution for implementing large mem-
ories with resistance to power analysis which could be used
for protecting the external memory. Furthermore, any such
solutions are likely to incur a substantial overhead in terms
of area and power. Finally, the simple use of standard mem-
ory technology for external memory would be prevented. In
contrast, our solution protects all values occurring outside
of the secure part of the processor (including external mem-
ory) with a mask. The masks themselves reside only in the
secure part.
This paper consists of three main contributions. First, we
signiﬁcantly extend the concept from [15] with functional-
ity which allows ﬂexible application in secure multi-tasking
operating systems with full process isolation. Second, we
present concrete implementations of the proposed protec-
tion mechanism with diﬀerent tradeoﬀs in a typical embed-
ded processor and provide concrete cost estimations. Third,
this paper presents the ﬁrst practical side-channel evaluation
of the secure zone concepts (without secure logic), which
demonstrates the soundness of the approach.
With the exception of the implementation of the NON-
DET processor architecture by Grabher et al.
[6], this pa-
per is the ﬁrst to present a concrete implementation of an
embedded processor with a generic protection mechanism
against side-channel attacks. Our solution is not quite as
generic as the NONDET processor, but on the other hand
its security is inherently independent from the parallelism
of the underlying workload.
Our work diﬀers from other secure processors like the
Aegis processor [13] in the model of the attacker. We as-
sume that an attacker has only access to the input and out-
put of the device and can measure its power consumption,
but that the contents of the memory is not directly accessi-
ble. On the other hand, the Aegis processor is designed to
withstand probing and manipulation of the external mem-
ory, but not to withstand power analysis attacks. Thus,
our proposal is suited for applications where the attacker
does not have direct memory access, e.g. devices with se-
cure on-chip storage or tamper-proof casings, whereas the
Aegis processor is more suited for applications where power
analysis is not considered a threat.
Our security concept is conceived as a building block to
enable SCA-resistant implementations if used in conjunction
with suitable components like development tools, secure op-
erating systems and/or applications. Furthermore, our con-
cept is compatible with other often-required security fea-
tures like process isolation. However, we would like to point
out that our concept can not safeguard against all possible
problems which may arise from an incorrect implementation
of other security-related components (e.g. software writing
keys to user-accessible interfaces).
The rest of the paper is structured as follows. The basic
principles of our proposed countermeasures are described
in Section 2, while extended functionality is presented in
Section 3. Details and design choices for our prototype im-
plementation are given in Section 4. Section 5 shows how
protected processors can be built using an automated de-
sign ﬂow and that most of the tasks for administering the
secure zone can be oﬄoaded to the compiler. Practical re-
sults regarding the hardware size of diﬀerent implementa-
tion options of the countermeasures and a preliminary SCA
evaluation are given in Section 6. Conclusions are drawn in
Section 7.
2. BASIC CONCEPT
In the context of SCA resistance, critical operations are
those which involve data that can be exploited in an SCA at-
tack. For DPA attacks, this are typically intermediate values
of cryptographic algorithms which depend on a small portion
of the key and a part of the input or output. For example,
some of the round transformations of an AES encryption
would be critical operations.
In processors equipped with
our protection mechanism, all critical operations are exclu-
sively executed within the boundaries of a single hardware
Figure 1: Overview of the basic components of the
secure zone.
sub-module (the so-called secure zone). The secure zone is
implemented in a secure (DPA-resistant) logic style, while
the rest of the processor is implemented in standard CMOS.
For the processor, the secure zone behaves like any other
ordinary functional unit1. It oﬀers a range of instructions
which are useful for implementing cryptographic algorithms.
An overview of the components of the secure zone is depicted
in Figure 1.
All instruction operands and results outside of the secure
zone are masked. The corresponding masks are held exclu-
sively in the mask storage component within the secure zone.
The masks can be retrieved from the mask storage and re-
moved from the operands yielding the unmasked operands
op1 and op2. The functional unit (FU) produces the result
res of the current processor instruction. The mask generator
outputs a fresh mask which is applied to the result (yield-
ing resm) and written to the mask storage. The masked
result then leaves the secure zone and is handled by the pro-
cessor like any other “normal” register value, i.e. it can be
written to memory or can be used as operand in subsequent
instructions.
Many previous masking solutions manipulate masked val-
ues and compensate for the change of the mask afterwards.
Note that this is not the case for our countermeasure, where
we always use a fresh mask whenever a masked value is up-
dated by the cryptographic algorithm. Thus there is a total
independence of the performance of cryptographic opera-
tions and the applied masks. Hence, no special eﬀort is
necessary to cater for the protection of non-linear crypto-
graphic operations, which is usually an issue in traditional
masking countermeasures.
Some form of addressing mechanism is required to asso-
1A functional unit of a processor is a hardware module
within the execute stage which takes a number of operands
and produces the according result for a single or a range of
instructions. Typical functional units include adders, mul-
tipliers, barrel shifters, and modules implementing bitwise
logical functions.
FUMaskstorageMaskgeneratorop1mop1addrop2addrresaddrop1 maskop2 maskres maskop2mop1op2resresmSecure zoneciate masked operands and masks during operation of the
processor. A simple example for such an addressing mecha-
nism is the employment of the operands’ register addresses.
The addresses for the masked input operands op1m and
op2m are used to retrieve the corresponding masks from
the mask storage. Similarly, the address of the instruction’s
masked result needs to be associated with the corresponding
mask, so that the masked result can be used as an instruc-
tion operand in subsequent instructions.
As the masks never leave the secure zone, the power con-
sumption of the CMOS part should only contain leakage
from the masked value. As a traditional higher-order DPA
attack would require leakage from both the masked value
and the mask, it can not be mounted using the CMOS leak-
age alone. Thus, a higher-order attack would also have to
exploit the leakage from the secure logic style, which should
increase its complexity considerably. An alternative avenue
of attack which targets the unmasked values in the secure
zone, requires the attacker also to overcome the protection
of the secure logic style. Thus, the protection oﬀered by
the secure logic style can be seen as being rolled over to the
complete processor system, even though only a fraction of
the system is actually implemented in this logic style.
3. EXTENDED FUNCTIONALITY
The basic concept can be extended with additional fea-
tures which oﬀer further functions or facilitate the use of
the hardware protection mechanism by the compiler and/or
the software developer.
3.1 Explicit Association of Masked Values and
Masks
In Section 2, the requirement for an addressing scheme
for associating masked values and masks has already been
mentioned. It is possible to use a pre-existing scheme of the
processor or to introduce a new custom scheme. Reusing
an already existing addressing scheme might lead to a sim-
pler implementation. Potential candidates are logical and
physical register addresses and memory addresses. A disad-
vantage is that masked values are associated to their masks
only indirectly via the storage location of the masked value.
Thus, whenever a masked value is moved to a diﬀerent stor-
age location, e.g. ﬂushed from a register to memory, a mech-
anism is required to uphold the association with the mask.
The compiler is usually in charge of managing the storage
location of values, so it could take care of this task.
A more elegant solution is the introduction of a new cus-
tom addressing scheme. The processor is thought to have a
range of storage locations with unique addresses where each
can hold a single masked value and its associated mask. We
denote these virtual storage locations as masked registers
and their addresses accordingly as masked register addresses.
The masked register address can remain constant and inde-
pendent of the actual physical location of the masked value
and the mask. Such a solution is principally independent of
a speciﬁc processor architecture and is also much closer to
the implementation of a cryptographic algorithm in a high-
level language. When cryptographic algorithms operate on
(intermediate) values the actual physical location of these
values is usually not an issue. Only at compilation time
these values are mapped to the storage resources of the pro-
cessor architecture at hand.
3.2 Alternative Representation of Masks
The security of the protection scheme is based on the con-
dition that masks must never leave the secure zone. As the
mask storage unit of the secure zone can only hold a limited
number of masks, the number of manageable masked values
would also be limited. However, depending on the mecha-
nism for mask generation, it can be possible to ﬁnd an al-
ternative representation of masks which can leave the secure
zone without compromising the overall security. Using this
mechanism, the mask storage can be virtually extended or
can be shared between diﬀerent processes in a secure man-
ner.
Finding an alternative representation of masks precludes
the direct use of random number generators (RNGs)2 as
mask generators, as their output is not reproducible. How-
ever, various kinds of pseudo-random number generators
(PRNGs) appear suitable as such mask generators. Seeding
of a PRNG must naturally be resistant against reset attacks,
where an attacker tries to recreate the system’s state by re-
setting. This can be done for example by seeding the PRNG
from an RNG.
The most important characteristics required of the mask
generator are the production of at least one fresh mask per
clock cycle, ease and eﬃciency of implementation, suﬃcient
“quality” of the randomness of the sequence of masks, and
the capability to reconstruct previous masks via the alterna-
tive representation. Regarding the protection against side-
channel attacks, it is not necessary to achieve ideal random-
ness for masks, but it is suﬃcient to have masks that are
uniformly distributed and unpredictable by an attacker [8].
Potential candidates include linear-feedback shift registers
(LFSRs) and hardware-eﬃcient stream ciphers, e.g. Triv-
ium [3] or Grain [7].
For our implementation we have chosen a mask genera-
tor based on a large maximum-length LFSR, which conse-
quently has a very long period. If the starting point is chosen
each time at random (which should be fulﬁlled by seeding
from an RNG), then an attacker should not be able to pre-
dict the sequence of produced masks. We stress that it is
crucial that the LFSR is seeded from an RNG in order to
achieve suﬃcient quality for the masks. We do not make any
claims about the security of the system under the usage of a
non-random seed. An attacker could try to use side-channel
information from some parts of the LFSR state which cir-
culate outside of the secure zone as part of the alternative
representation of masks. We estimate that with the side-
channel information available to an attacker it is infeasible
to reconstruct the LFSR state or masks. However, we note
that this issue remains an open research problem. Further-
more, a maximum-length LFSR will cycle through all pos-
sible internal states (except the “dead” state), resulting in a
nearly perfect uniform distribution of its output. As alter-
native representation of a mask we use a given LFSR state
and the number of advancements (or steps) of the LFSR
from that state which ﬁnally produced this mask. We de-
note this number of steps as the mask index. Masks can
be stored to memory as a given LFSR state plus the num-
ber of steps from that state and the corresponding entry in