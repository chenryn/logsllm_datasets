ﬁlter Blockstack transactions. To ﬁx this problem, we propose
using a Catena log to keep track of Blockstack operations
rather than scattering them through the blockchain. In this
way, thin clients can efﬁciently download just the Blockstack
operations and quickly compute their own consensus hashes.
One disadvantage of this approach, according to one of the
Blockstack co-founders [31], is that it requires a secret key to
manage the Catena log and would thus “centralize” the system.
To address this, an alternative design would be to introduce
auditors who verify and publish Blockstack consensus hashes
in a jointly-signed Catena log. While this approach centralizes
trust for thin clients, such as mobile phones, it does so in
a more accountable and transparent manner. Speciﬁcally, the
auditors can’t equivocate about consensus hashes but can
still publish internally inconsistent [20] consensus hashes (see
§VII-3). However, such misbehavior would be evident in the
Bitcoin blockchain when audited by a full Blockstack client.
3) Software Transparency: Catena can prevent equivocation
in software transparency schemes [32] and thus thwart man-in-
the-middle attacks that try to inject malicious software binaries
on victims’ machines [32]. In fact, Bitcoin developers were
concerned in the past about these kinds of attacks on Bitcoin
binaries [33]. To prevent these attacks, software vendors can
publish digests of new versions of their software in a Catena
log. Customers can then verify any version downloaded from
a vendor’s website against the vendor’s log. Previous work
[17] already highlights the necessity of software transparency
in the face of insecure software update schemes [34], [35], key
loss or compromise [36] and black markets for code-signing
certiﬁcates [37].
4) Tor Directory Servers: Catena can be used to prevent Tor
directory servers [12] from equivocating about the directory of
Tor relays. Equivocation attacks are particularly concerning
for Tor because they enable an attacker to easily deanonymize
users by pointing them towards attacker-controlled Tor relays.
In fact, Tor Transparency [13] plans to address these attacks
by publicly logging the Tor directory consensus. In the same
spirit, we propose using Catena to increase the resilience of
Tor Transparency. With Catena, directory servers can publish
the consensus in a Catena log by jointly signing it using a
Bitcoin multisignature [38]. Since Tor does not try to conceal
who is connected to the network [12], we are not concerned
395
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:20:17 UTC from IEEE Xplore.  Restrictions apply. 
about Catena’s header relay network learning who is using
Tor. Finally, because Tor consensus is updated every hour, we
believe it should be suitable for embedding in a Catena log.
5) Consensus Amongst n Servers: Catena can be used by
a set of n servers to reach consensus on a log of operations,
where each server manages its own secret key and does not
necessarily trust the other n − 1 servers. In this scheme, each
server submits an operation to the log by creating a Catena
transaction that is spendable by all n servers (see §III-A1).
To disincentivize the other servers from stealing the coins, the
log is funded with small amounts of bitcoins and is frequently
“re-funded” (see §IV-E). This scheme allows all servers to
reach consensus on the log and relies on Bitcoin miners to
decide which server’s operation gets included in the log. To
prevent adversarial servers from monopolizing the log with
their operations by paying higher transaction fees, the servers
can agree on an upper bound on fees.
B. Bitcoin Background
Bitcoin [18], [39]–[41] is a peer-to-peer digital currency that
allows users to mint digital coins called bitcoins and exchange
them without a trusted intermediary. Bitcoin uses a novel
permissionless Byzantine consensus protocol known as proof-
of-work consensus [42] which allows all participants to agree
on a log of transactions and prevent attacks such as double
spending coins. The log of transactions is called a blockchain
and is stored and managed by a peer-to-peer (P2P) network
[43]. A special set of users called miners run Bitcoin’s proof-
of-work consensus protocol, extending the blockchain with
new blocks made up of new transactions. This process, called
mining, is computationally difﬁcult and secures Bitcoin by
allowing everyone to agree on the correct log of transactions
while preventing Sybil attacks [44]. To incentivize Bitcoin
miners to mine, a block reward consisting of newly minted
bitcoins is given to a miner if he mines or “ﬁnds” the next
block.
1) P2P Network: Bitcoin uses a peer-to-peer (P2P) network
of volunteer nodes to store the blockchain [43], listen for new
transactions or new blocks, and propagate this information
throughout the network. Users, such as merchants and their
customers, download the blockchain by becoming part of the
P2P network and can then receive or issue Bitcoin transactions.
Miners are also part of the P2P network where they listen for
new blocks and broadcast their own blocks.
2) Blockchain: Bitcoin’s “blockchain” is implemented as
a hash-chain of blocks (see Figure 2) and keeps track of all
transactions in the system, allowing anyone to verify that no
double spends have occurred. A Bitcoin block is made up of
a set of transactions (up to 1 MB) and a small block header
(80 bytes) that contains a hash pointer to the previous block.
The transactions in the block are hashed in a Merkle tree [45]
whose root hash is stored inside the block header. The Merkle
tree allows Bitcoin thin clients (see §II-B6) to obtain efﬁcient
membership proofs that a transaction is part of a block.
3) Decentralized Consensus: To solve the consensus prob-
lem in the decentralized or permissionless setting, where
Fig. 2. The Bitcoin blockchain is a hash chain of blocks. Each block has a
Merkle tree of transactions. Efﬁcient membership proofs of transactions can
be constructed with respect to the Merkle root. Here, tx1 transfers coins from
Alice, Bob and Carol to Dan and somebody else (miners receive a fee of 1
coin). Alice authorizes the transfer of her coins by signing tx1, which has an
input pointing to her coins locked in the 1st output of txa. Bob and Carol
do the same. Similarly, Dan later spends his coins locked in tx1’s 1st output
by signing a new transaction txd with an input pointing to tx1’s 1st output.
participants can enter and leave the protocol as they please,
Bitcoin introduces a novel Byzantine consensus protocol called
proof-of-work consensus [42], [46]–[48]. Though it does so at
a high computational cost, this protocol defeats Sybil attacks
[44] and achieves consensus on the blockchain if 51% of the
computational power amongst participants remains honest.
Participants called miners race to solve computationally-
difﬁcult proof-of-work puzzles derived from the previous
Bitcoin block. If a miner ﬁnds a solution, the miner can
publish the next block by announcing it along with the solution
(in reality, the solution is part of the next block) over the
P2P network. Furthermore, this miner will receive a block
reward in bitcoins, an incentive for miners to participate in
the consensus protocol. The puzzle difﬁculty is adjusted every
2016 blocks based on the inferred computational power of the
miners, or network hashrate, so that a new block is found or
“mined” on average every 10 minutes.
When two miners ﬁnd a solution at the same time, the Bit-
coin blockchain is said to accidentally fork into two chains. In
this case, Bitcoin peers use the heaviest chain rule and select
the heavier fork as the main chain that dictates consensus. The
weight of a fork is simply the amount of computational work
expended to create that fork. Assuming no difﬁculty changes,
the heaviest fork is the longest fork. However, across difﬁculty
changes, it could be that a fork with fewer blocks is heavier
than a longer fork (though this never happens in practice).
During an accidental fork, both forks have the same length
and weight (assuming the fork does not cross a difﬁculty
recomputation point), so Bitcoin peers adopt the fork they saw
ﬁrst as their main chain. As more blocks are mined, one of
the forks becomes heavier than the other and is accepted as
the main chain by the whole network [42]. In this case, the
other abandoned fork and its blocks are said to be “orphaned.”
In practice, accidental forks are infrequent and short: no
more than one or two blocks get orphaned. To deal with
accidental but also with malicious forks, most Bitcoin nodes
396
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:20:17 UTC from IEEE Xplore.  Restrictions apply. 
only consider a block and its transactions conﬁrmed if 6 or
more blocks have been mined after it.
4) Transactions: Bitcoin transactions facilitate the transfer
of coins between users (see Figure 2). A Bitcoin transaction
has an arbitrary number of transaction inputs, which authorize
the transfer of coins, and transaction outputs (TXOs), which
specify who receives those coins and in what amounts. Natu-
rally, the number of coins locked in the outputs cannot exceed
the number of coins speciﬁed in the inputs (with the exception
of so-called “coinbase” transactions, which mint new coins and
have no inputs). A transaction output speciﬁes an amount of
coins and their new owner, most commonly as a public key.
A transaction input refers to or “spends” a previously unspent
transaction output (UTXO) and contains a proof-of-ownership
from that UTXO’s owner, which authorizes the transfer of
those coins. For the purposes of this paper, we only make use
of the case where outputs specify owners using public keys
and inputs prove ownership using signatures.
Importantly, when assembling transactions into blocks, Bit-
coin miners prevent double spends by ensuring that, across
all transactions in the blockchain, for every TXO there exists
at most one transaction input that refers to or spends that
TXO. This invariant is known as the TXO invariant and Catena
leverages it to prevent forks. Finally, a transaction’s fee is the
difference between the coins spent in its inputs and the coins
transferred by its outputs. The fee is awarded to the miner
who mines a block containing that transaction. In theory, the
fee can be zero, but in practice recent contention for space in
the blockchain requires users to pay transaction fees.
5) Storing Data in Transactions: Bitcoin allows users to
store up to 80 bytes of data in transactions through provably-
unspendable OP_RETURN transaction outputs. Importantly,
any coins speciﬁed in the output are forever unspendable or
“burned”. For simplicity, Catena uses OP_RETURN outputs to
store application-speciﬁc statements in the Bitcoin blockchain
(see §IV). However, there are other ways to store data in
Bitcoin transactions: in the value of transferred coins [49],
in transaction inputs [50], in transaction sequence numbers
[49], or in an output’s public key (either via vanity public
keys [49], fake public keys [30], multisig public keys [38] or
“pay-to-contract” public keys [51]).
6) Thin Nodes vs. Full Nodes: Bitcoin’s P2P network is
made up of full nodes, which download the entire blockchain
and validate all the transactions (see §II-B1) and thin nodes,
which only download small 80 byte block headers and cannot
fully validate transactions. Since full nodes are more expensive
to run (higher bandwidth, computation and space), smaller
devices such as smartphones can run thin nodes instead, also
known as Simpliﬁed Payment Veriﬁcation (SPV) nodes.
Thin nodes verify Bitcoin transactions more efﬁciently un-
der a slightly stronger assumption about the Bitcoin network.
A thin node considers a transaction valid if it sees a correct
Merkle proof of membership for that transaction in a block.
Furthermore, the more blocks are mined after a transaction’s
block (also known as conﬁrmations), the more conﬁdent a thin
node can be that the transaction is indeed valid. Importantly,
thin nodes don’t even verify signatures on transactions: the
membership proof coupled with enough conﬁrmations offers
enough assurance that the transaction was veriﬁed by miners
and is thus valid. As a result, thin nodes assume Bitcoin miners
follow their incentives and create correct blocks or otherwise
thin nodes could accept invalid transactions. This assumption
can be reasonable since miners would lose their block reward
if they create invalid blocks (see §II-B3).
Finally, the only way for thin nodes to avoid downloading
unnecessary data is to use a Bitcoin feature called Bloom
ﬁltering [52]. This feature allows thin nodes to only receive
transactions of interest by asking remote peers to ﬁlter out ir-
relevant transactions using a Bloom ﬁlter [53]. Bloom ﬁltering
is cheap for the requesting thin client but quite expensive for
the servicing full node, which has to load all requested blocks
from disk, pass them through the ﬁlter and send ﬁltered blocks
to the thin client.
III. MODEL AND GOALS
In this section we describe our system actors, our threat
model and our design goals.
A. Actors
The main actors in our scheme are the log server, which
appends statements to the log, Catena clients, which verify
new statements and check for non-equivocation, and the header
relay network (HRN), which helps scale Catena to support a
large number of clients (see Figure 3).
1) Log server: A log server manages an append-only log
of application-speciﬁc statements. The log server appends
statements to the log by signing Bitcoin transactions with
statement data embedded in them and broadcasting them to
the Bitcoin P2P network. We call these transactions Catena
transactions and defer their discussion to §IV-A2. In this
paper, we will mostly talk about a single log server managing
the log, but by using Bitcoin multisignatures [38], Catena
can support multiple servers who either jointly or separately
append statements to the log. Also, although a log server can
manage many different logs, for simplicity we restrain our
discussion to a single server managing a single log.
2) Clients: Multiple clients connect to the log server and
keep up with new log statements. As depicted in Figure
3, clients fetch Catena transactions from the log server and
verify they have been included in the Bitcoin blockchain. This
veriﬁcation is done against block headers obtained from the
header relay network (discussed next). Catena clients want
to prevent log server equivocation: a client who is shown a
statement si wants to ensure there is no other contradictory
statement s(cid:2)
3) Header Relay Network: Due to the low connection
capacity of the Bitcoin P2P network (see §IV-B), Catena
clients use a separate header relay network (HRN) to obtain
Bitcoin block headers (see §IV-B). Otherwise, Catena would
put unnecessary stress on Bitcoin’s P2P network and would
not scale well.
i in the log at position i (see §III-D1).
397
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:20:17 UTC from IEEE Xplore.  Restrictions apply. 
B. Catena API
Our scheme can be succinctly described as a tuple
(cid:2)CreateLog, AppendStmt, VerifyStmt(cid:3) of API
calls. For
clarity, we preﬁx calls with S when they are made by the log
server and with C when they are made by clients.
S.CreateLog(d) → (sk, pk). Creates an empty log. All future
log statements can be veriﬁed against the log’s public key
pk. Embeds some arbitrary data d in the log (e.g., the log’s
name).
signing it using sk.
S.AppendStmt(sk, si). Appends the statement si to the log,
C.VerifyStmt(pk, i, si) → {True, False}. Veriﬁes that
the
statement si is contained in the log with public key pk at
position i. Returns true if successful or false otherwise.
Before being called on si, VerifyStmt must ﬁrst be called
on s1, s2, . . . , si−1, in that order.
To recap, a server creates a new log by calling CreateLog
and appends statements to this log using AppendStmt. Clients
verify each new statement si by calling VerifyStmt in order
for i = 1, 2, 3,··· .
C. Threat Model
1) Adversarial Log Server: We assume the Catena log
server is compromised or coerced and wants to equivocate
about statements. We assume Catena clients can correctly
obtain the log’s genesis transaction which acts as the log’s