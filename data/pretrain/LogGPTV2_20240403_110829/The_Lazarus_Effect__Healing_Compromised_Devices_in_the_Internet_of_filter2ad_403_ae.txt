indeed applied an update of a trusted component to provide proof
to the hub.
In summary, Lazarus allows a device to be reliably recovered
and its software (including Lazarus) to be updated within a time
bound that can be configured by the hub.
Session 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan168 APPLICATION IN REAL-WORLD USE CASES
Before applying Lazarus in a real-world use case, the developer has
to configure Lazarus based on the peripherals on the device and
based on the demands of the target application. This may require
writing new trusted handlers to regulate access to critical periph-
erals and tailoring our prototype to concrete IoT scenarios, device
types and specific peripherals, e.g., sensors or additional flash stor-
age attached via Serial Peripheral Interface (SPI). In particular, all
peripherals that can possibly be misused by compromised business
logic have to be guarded by TEE handlers. For example, flash write
handlers must implement a threshold or rate limiting to distinguish
regular write activities from targeted flash wear out. In addition,
business logic must be implemented such that it does not exceed
handler thresholds during regular operation. This should be easy
since the behavior of many IoT applications is quite regular and
known in advance.
In addition to writing trusted handlers, the developer has to
modify the IoT business logic to call these handlers instead of trying
to access the peripherals directly. Such attempts would fail, as the
peripherals are protected by TrustZone from access by untrusted
software.
Further, integration of Lazarus requires setting a reasonable
deferral timeout and determining the desired behavior in case the
device cannot contact the hub, e.g. because of a DoS attack, as
discussed in [54]. A possibility is to boot into a safe-mode version
of the software with minimal functionality as long as the hub is
unavailable. However, this strongly depends on the IoT use case
the system is tailored for.
Lazarus can accommodate use cases that include code running
in a TEE by running both the Lazarus runtime component and the
business logic’s TEE code in the TEE. Depending on the size and
the quality of the latter, this may increase the attack surface of the
TEE code.
9 RELATED WORK
Mechanisms for remote administration of servers have been estab-
lished in several industry standards [11, 21, 22]. These standards
enable the efficient remote configuration, monitoring and update of
a large number of devices irrespective of the state of their applica-
tion processor and running software. Devices are equipped with an
additional co-processor able to interrupt the application processor,
and possibly with a separate physical network interface. This allows
administrators to restore hung or compromised systems, or even
to activate servers that are shut down. This achieves recoverability.
However, the system design of adding isolated co-processors and
possibly separate network interfaces is not an option for IoT devices
in the low-cost segment, especially not for constrained devices.
Several mechanisms for automated malware detection and evic-
tion from end-user devices have been proposed [15, 19, 28]. This line
of work focuses on security in a higher layer and has a large TCB,
i.e., the OS kernel, a component Lazarus considers untrusted. An
architecture which leverages system virtualization for automated
detection and containment of rootkit attacks on Linux systems was
proposed by Baliga et al. [6]. Lazarus also considers hypervisors
untrusted components and can recover them.
Android Things [16] is a commercial secure IoT platform. It can
be regarded as a full-fledged trustworthy IoT ecosystem with an OS
and a bootloader for compliant device architectures which enforces
secure boot, runtime isolation, attestation, hardware-based key pro-
tection, and handles remote updates. IoT use cases are engineered
on top of the platform and can make use of the security services the
OS provides, e.g., for attestation or authentication. The focus is on
powerful Cortex-A devices. There is, to the best of our knowledge,
no means of recovering from a compromised OS.
For constrained devices, several secure update mechanisms have
been proposed, mainly for sensor networks in combination with
attestation [1, 14, 20, 23, 36, 40, 41]. After trying to distribute the
update, the server requests an attestation proof of successful update
application. If the update fails (e.g., because malware is preventing
it), the compromised devices are revoked and require manual re-
pair. In contrast, Lazarus permits remote recovery of all devices.
Some mechanisms allow wiping malware, e.g., with secure memory
erasure [1, 20, 36]. However, common to all mechanisms is that
they cannot reliably recover from compromise of the host system
and that they have no provision to force execution of recovery
functionality.
Asokan et al. [4] propose an architecture for secure software
updates on MCUs. They keep the secure update mechanism and
key material in read-only segments protected from the rest of the
possibly malicious system. They built prototypes on two device
types, HYDRA and Cortex-M. The update functionality on HYDRA
is loaded as the initial user space process with highest priority after
starting an seL4 kernel upon successful secure boot. The isolation of
the task’s code and data is ensured by the seL4 kernel’s separation.
In contrast, our goal is to decouple the recovery TCB from OSs
or hypervisors. The Cortex-M prototype uses TrustZone-M for
isolation and executes the update functionality as part of a trusted
bootloader. Asokan et al. do not propose a mechanism that returns
control to the recovery TCB after infection and provide no way to
service the read-only update functionality.
CIDER [54] is most closely related to our work and lays the ar-
chitectural foundation for Lazarus. CIDER appears to be targeted
primarily at higher-end devices for which security features such
as storage latches are common. The higher baseline cost of such
devices (≥ $100) also makes it reasonable to add missing security
support by attaching hardware costing a few dollars to an exten-
sion port. CIDER did this for its external AWDT. The situation is
fundamentally different for the cheap low-end boards which are
the focus of our work. While CIDER was also implemented on a
low-end MCU, this prototype inherits the properties of its higher-
end cousins, including an AWDT implementation on a separate
MCU board. The paper mentions cheaper alternatives without ex-
ploring them. In contrast, Lazarus demonstrates how a wide range
of protections can be implemented at zero cost in TEE software.
In addition, Lazarus provides protection against a range of attacks
aiming to disable the device and enables easy updates of the entire
TCB.
The TCG resilience work group provides no concrete implemen-
tation [52]. Auer et al. [5] only mention integration of an AWDT
and recovery TCB into a secure architecture for RISC-V.
Session 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan1710 CONCLUSION
We present Lazarus, a system for the recovery of compromised
low-end IoT devices. Lazarus overcomes three major challenges in
the design of cyber-resilient IoT architectures. These challenges are
applicability on low-cost COTS devices, defense against malware
actively trying to make devices unavailable, and practical updates
of the recovery TCB. Lazarus uses a TEE to constrain malware.
As TEEs are nowadays available even on low-cost devices, Laza-
rus can be deployed on a broad range of COTS devices. We use the
TEE to latch the recovery TCB, isolate our reset trigger TEETrigger
and regulate access to critical peripherals. The latter prevents mal-
ware from rendering devices permanently unavailable through
misuse of peripherals, such as entering irrecoverable sleep states or
flash wear out, otherwise possible within minutes [46]. For practical
updates of the recovery TCB, we propose an extension to DICE.
This extension allows sustaining the device identity through secure
re-association with the hub.
We have implemented Lazarus on a COTS ARMv8-M MCU fea-
turing TrustZone-M. Our prototype has low memory requirements,
negligible runtime performance impact and modest boot time im-
pact, making Lazarus suitable for adoption in a broad range of IoT
use cases.
REFERENCES
[1] Mahmoud Ammar, Wilfried Daniels, Bruno Crispo, and Danny Hughes. 2018.
SPEED: Secure Provable Erasure for Class-1 IoT Devices. In Proceedings of the
Eighth ACM Conference on Data and Application Security and Privacy (CODASPY
’18). ACM, New York, NY, USA, 111–118. https://doi.org/10.1145/3176258.3176337
[2] ARM. 2019. AMBA 5 Overview. https://developer.arm.com/architectures/system-
architectures/amba/amba-5.
[3] ARM Limited. 2017. Introduction to the ARMv8-M architecture.
[4] N. Asokan, T. Nyman, N. Rattanavipanon, A.-R. Sadeghi, and G. Tsudik. 2018. AS-
SURED: Architecture for Secure Software Update of Realistic Embedded Devices.
ArXiv e-prints (July 2018). arXiv:cs.CR/1807.05002
[5] L. Auer, C. Skubich, and M. Hiller. 2019. A Security Architecture for RISC-V
based IoT Devices. In 2019 Design, Automation Test in Europe Conference Exhibition
(DATE). 1154–1159. https://doi.org/10.23919/DATE.2019.8714822
[6] Arati Baliga, Xiaoxin Chen, and Liviu Iftode. 2006. Paladin: Automated detection
and containment of rootkit attacks. Department of Computer Science, Rutgers
University (2006).
[7] Katharina Bogad and Manuel Huber. 2019. Harzer Roller: Linker-Based In-
strumentation for Enhanced Embedded Security Testing. In Proceedings of the
3rd Reversing and Offensive-Oriented Trends Symposium (ROOTS’19). Associa-
tion for Computing Machinery, New York, NY, USA, Article Article 3, 9 pages.
https://doi.org/10.1145/3375894.3375897
[8] Credencys. 2019. Increase your Vending Machine’s performance efficiency while
bringing down the operational expenses & maintenance cost with IoT. https:
//www.credencys.com/smart-vending-machine-iot-solutions/.
[9] Daimler. 2019. Networked with the surroundings. Car-to-X communication goes
into series production. https://www.daimler.com/innovation/case/connectivity/
car-to-x-2.html.
[10] J. Deogirikar and A. Vidhate. 2017. Security attacks in IoT: A survey. In 2017
International Conference on I-SMAC (IoT in Social, Mobile, Analytics and Cloud)
(I-SMAC). 32–37. https://doi.org/10.1109/I-SMAC.2017.8058363
[11] Distributed Management Task Force. 2018. Redfish Scalable Platforms Manage-
[12] DZone. 2019. Home Automation Using IoT. https://dzone.com/articles/home-
ment API Specification v1.5.
automation-using-iot.
[13] Espressif Systems. 2019. ESP8266EX Datasheet.
[14] Wei Feng, Yu Qin, Shijun Zhao, Ziwen Liu, Xiaobo Chu, and Dengguo Feng. 2017.
Secure Code Updates for Smart Embedded Devices based on PUFs. Cryptology
ePrint Archive, Report 2017/991. https://eprint.iacr.org/2017/991.
[15] J. Giffin. 2010. The Next Malware Battleground: Recovery After Unknown Infec-
tion. IEEE Security Privacy 8, 3 (May 2010), 74–76. https://doi.org/10.1109/MSP.
2010.107
[16] Google. 2018. Android Developers: Android Things. https://developer.android.
com/things/.
[17] HardwareBee. 2019. MCU Market History and Forecast 2016-2023. http:
//hardwarebee.com/mcu-market-history-and-forecast-2016-2023/.
White paper:
[18] Hilti. 2019.
Introducing Digital Asset Management.
https://www.hilti.com/content/dam/documents/pdf/w1/ontrack/whitepapers/
W1_US_en_White%20Paper%20Increase%20Profit%20and%20Productivity.pdf.
[19] F. Hsu, H. Chen, T. Ristenpart, J. Li, and Z. Su. 2006. Back to the Future: A
Framework for Automatic Malware Removal and System Repair. In 2006 22nd
Annual Computer Security Applications Conference (ACSAC’06). 257–268. https:
//doi.org/10.1109/ACSAC.2006.16
[20] C. Huth, P. Duplys, and T. Güneysu. 2016. Secure Software Update and IP Protec-
tion for Untrusted Devices in the Internet of Things via Physically Unclonable
Functions. In 2016 IEEE International Conference on Pervasive Computing and
Communication Workshops (PerCom Workshops). 1–6. https://doi.org/10.1109/
PERCOMW.2016.7457156
[21] Intel Corporation. 2011. Data Center Manageability Interface Specification v1.5
rev. 1.0.
v2.0 rev. 1.1.
[22] Intel Corporation. 2013. Intelligent Platform Management Interface Specification
[23] Florian Kohnhäuser and Stefan Katzenbeisser. 2016. Secure Code Updates for
Mesh Networked Commodity Low-End Embedded Devices. In Computer Security
– ESORICS 2016, Ioannis Askoxylakis, Sotiris Ioannidis, Sokratis Katsikas, and
Catherine Meadows (Eds.). Springer International Publishing, Cham, 320–338.
[24] Ben Lapid and Avishai Wool. 2018. Cache-Attacks on the ARM TrustZone imple-
mentations of AES-256 and AES-256-GCM via GPU-based analysis. Cryptology
ePrint Archive, Report 2018/621. https://eprint.iacr.org/2018/621.
[25] OpenSystems Media. 2019. IoT Based Smart Traffic Signal Monitoring Using
Vehicle Count. https://www.embedded-computing.com/guest-blogs/iot-based-
smart-traffic-signal-monitoring-using-vehicle-count.
[26] Microchip. 2020. CEC1702.
https://www.microchip.com/wwwproducts/en/
CEC1702.
microsoft/RIoT.
[27] Microsoft Research. 2019. Robust Internet of Things. https://github.com/
[28] Yacin Nadji, Jonathon Giffin, and Patrick Traynor. 2011. Automated Remote
Repair for Mobile Malware. In Proceedings of the 27th Annual Computer Security
Applications Conference (ACSAC ’11). ACM, New York, NY, USA, 413–422. https:
//doi.org/10.1145/2076732.2076791
[29] M. Nawir, A. Amir, N. Yaakob, and O. B. Lynn. 2016. Internet of Things (IoT):
Taxonomy of security attacks. In 2016 3rd International Conference on Electronic
Design (ICED). 321–326. https://doi.org/10.1109/ICED.2016.7804660
[30] NetScout. 2019. Mirai IoT Botnet Description and DDoS Attack Mitiga-
tion. https://www.netscout.com/blog/asert/mirai-iot-botnet-description-and-
ddos-attack-mitigation.
[31] NXP. 2019. AN12278 - LPC55S69 Security Solutions for IoT.
[32] NXP. 2019.
LPC55S69-EVK: LPCXpresso55S69 Development Board.
https://www.nxp.com/products/processors-and-microcontrollers/arm-
microcontrollers/general-purpose-mcus/lpc5500-cortex-m33/lpcxpresso55s69-
development-board:LPC55S69-EVK.
[33] NXP. 2019.
LPC55S6x: High Efficiency Arm® Cortex®-M33-based Mi-
crocontroller Family.
https://www.nxp.com/products/processors-and-
microcontrollers/arm-microcontrollers/general-purpose-mcus/lpc5500-cortex-
m33/high-efficiency-arm-cortex-m33-based-microcontroller-family:LPC55S6x.
[34] NXP. 2019. LPC55Sxx Secure Boot. https://www.nxp.com/docs/en/application-
note/AN12283.pdf.
[35] NXP. 2019. UM11126 LPC55S6x/LPC55S2x/LPC552x User manual.
[36] Daniele Perito and Gene Tsudik. 2010. Secure Code Update for Embedded Devices
via Proofs of Secure Erasure. In Proceedings of the 15th European Conference on
Research in Computer Security (ESORICS’10). Springer-Verlag, Berlin, Heidelberg,
643–662. http://dl.acm.org/citation.cfm?id=1888881.1888931
[37] Cauligi S Raghavendra, Krishna M Sivalingam, and Taieb Znati. 2006. Wireless
sensor networks. Springer.
[38] Arjmand Sanuel. 2017. Azure IoT supports new security hardware to strengthen
IoT security. https://azure.microsoft.com/en-us/blog/azure-iot-supports-new-
security-hardware-to-strengthen-iot-security/.
[39] Amazon Web Services. 2019. freeRTOS. https://www.freertos.org/.
[40] Arvind Seshadri, Mark Luk, Adrian Perrig, Leendert van Doorn, and Pradeep
Khosla. 2004. Using FIRE & ICE for Detecting and Recovering Compromised
Nodes in Sensor Networks.
[41] Arvind Seshadri, Mark Luk, Adrian Perrig, Leendert van Doorn, and Pradeep
Khosla. 2006. SCUBA: Secure Code Update By Attestation in Sensor Networks.
In Proceedings of the 5th ACM Workshop on Wireless Security (WiSe ’06). ACM,
New York, NY, USA, 85–94. https://doi.org/10.1145/1161289.1161306
[42] Sigfox. 2019. Smart livestock collars let ranchers track, monitor and manage
herds like never before. https://www.sigfox.com/en/solutions/smart-livestock-
collars-let-ranchers-track-monitor-and-manage-herds-never.
[43] Symantec. 2016. Internet Security Threat Report.
[44] Symantec. 2019. Hajime worm battles Mirai for control of the Internet of
Things. https://www.symantec.com/connect/blogs/hajime-worm-battles-mirai-
control-internet-things.
Session 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan18[45] TC Group and others. 2011. TPM Main Specification Version 1.2 Rev. 116. https:
//trustedcomputinggroup.org/resource/tpm-main-specification/.
Composition Engine.
[50] Trusted Computing Group. 2018. Hardware Requirements for a Device Identifier
[46] R. Templeman and A. Kapadi. 2012. GANGRENE: Exploring the Mortality of Flash
Memory. In Presented as part of the 7th USENIX Workshop on Hot Topics in Security.
USENIX, Bellevue, WA. https://www.usenix.org/conference/hotsec12/workshop-
program/presentation/Templeman
[47] Terry Yin. 2019. A simple code complexity analyzer without caring about the
C/C++ header files or Java imports. https://terryyin.github.io/lizard/.
[48] Ankit Tiwari, Prasanna Ballal, and Frank L. Lewis. 2007. Energy-efficient Wireless
Sensor Network Design and Implementation for Condition-based Maintenance.
ACM Trans. Sen. Netw. 3, 1, Article 1 (March 2007). https://doi.org/10.1145/
1210669.1210670
[49] Trusted Computing Group. 2017. Foundational Trust for IoT and Resource
Constrained Devices.
[51] Trusted Computing Group. 2018. Implicit Identity Based Device Attestation.
[52] Trusted Computing Group. 2019.
TCG Cyber Resilient Technologies.
https://trustedcomputinggroup.org/wp-content/uploads/TCG-Cyber-Resilient-
Technologies-%E2%80%93-Rob-Spiger-Microsoft.pdf.
[53] R. Williams, E. McMahon, S. Samtani, M. Patton, and H. Chen. 2017. Identifying
vulnerabilities of consumer Internet of Things (IoT) devices: A scalable approach.
In 2017 IEEE International Conference on Intelligence and Security Informatics (ISI).
179–181. https://doi.org/10.1109/ISI.2017.8004904
[54] Meng Xu, Manuel Huber, Zhichuang Sun, Paul England, Marcus Peinado, Sangho
Lee, Andrey Marochko, Dennis Mattoon, Rob Spiger, and Stefan Thom. 2019.
Dominance as a New Trusted Computing Primitive for the Internet of Things. In
Proceedings of the 2019 IEEE Symposium on Security and Privacy (SP ’19). IEEE
Computer Society, Washington, DC, USA.
Session 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan19