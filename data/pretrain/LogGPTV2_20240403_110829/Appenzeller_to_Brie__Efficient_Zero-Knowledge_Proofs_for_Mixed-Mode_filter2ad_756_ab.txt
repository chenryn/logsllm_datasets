increases to 181.7 s for [31] (173 µs amortized) and 92.1 s for [33]
(87.8 µs amortized).
Our Z2𝑘 Zero-Knowledge proofs achieve amortized communication
costs of 𝑘 + 𝑠 bits and consume one VOLE to open a commitment
(where 𝑠 is a statistical security parameter and 𝑘 + 𝑠 bits are nec-
essary to represent committed ring element), and 2𝑘 + 4𝑠 bits plus
three VOLEs, to verify a multiplication. This is competitive with
state-of-the-art protocols for large fields such as [4, 31], which need
to transfer 2–3 field elements .
1.2 Related Work
Our work builds upon concretely efficient zero-knowledge proto-
cols from VOLE, which were first given in [4, 15, 31]. While [4, 31]
use VOLE-based information-theoretic MACs in a black-box way,
Line-Point ZK [15] takes a non-black-box approach, which reduces
communication to just 1 field element per multiplication in a large
field. More recently, Quicksilver [33] extends this to arbitrary fields,
including boolean circuits. Since the core of our protocol uses po-
tentially faulty information to verify edaBits, the techniques from
QuickSilver could be plugged in to cheaply verify these faulty com-
ponents, which would simplify much of our security analysis and
slightly reduce costs. We analyze this approach in Section 6. This
is very similar to the approach taken in the concurrent work Mys-
tique [32], which uses Quicksilver directly for conversions. Since
QuickSilver and Mystique make non-black-box use of VOLE-based
MACs, these would not be applicable in settings based on other
types of homomorphic commitments, or applications such as proofs
of disjunctions in [4], which assumes a black-box commitment
scheme. Thus, while our protocol has higher communication costs,
it is more general and may be of use in a wider range of applications.
Another related work is Rabbit [26], which provided improved
protocols for secure comparison and truncation based on edaBits,
in the MPC setting. Similarly to our work in ZK, Rabbit allows to
avoid the large “gap” between the field size and the desired message
space when running these protocols; however, our techniques in
the ZK setting are different.
In LegoSNARK [10] the authors show how to combine different
succinct ZK proof systems. Our work differs as we focus on the
setting where data is represented in different rings of possibly
constant size for each subtask, whereas [10] relies on large groups.
2 PRELIMINARIES
In this section we introduce several primitives which are used
throughout the constructions in this paper.
2.1 Notation
We use 𝑀 to denote a modulus which is either a large prime 𝑝,
or 2𝑘. As a short hand, ≡𝑘 denotes equality modulo 2𝑘. We use
[𝑥]𝑀 or [𝑥]2 to denote authenticated values (see Sections 2.3 and
2.4) from the plaintext space Z𝑀 or Z2, and write just [𝑥] when
the modulus is clear from the context. We let 𝑠 denote a statistical
security parameter and [𝑛] denote the set {1, . . . , 𝑛}.
2.2 Zero-Knowledge Proofs
Zero-knowledge proofs (of knowledge) are interactive two-party
protocols that allow the prover P to convince a verifier V that a
certain statement is true (and that it possesses a witness to this
fact). This happens in a way such that V does not learn anything
else besides this fact that it could not compute by itself. Instead of
using the classical definition by Goldwasser et al. [19], we define
zero-knowledge using an ideal functionality FZK for satisfiability
of circuits C: On input (Prove, C, 𝑤) from P and (Prove, C) from
V the functionality FZK outputs ⊤ to V iff. C(𝑤) = 1 holds, and
sends ⊥ otherwise [31].
Following previous works (e.g. [4, 31]), we use the commit-and-
prove strategy to instantiate FZK using homomorphic commitments
(see Section 2.4). These allow the prover P to commit to its witness
𝑤. Then the circuit C can be evaluated on the committed witness
to obtain a commitment to the output, which is opened to prove
that indeed C(𝑤) = 1 holds.
2.3 VOLE and Linearly Homomorphic MACs
Oblivious transfer (OT) [17] is a two-party protocol, where the re-
ceiver can obliviously inputs a bit 𝑏 to choose between two messages
𝑚0, 𝑚1 held by the sender to obtain 𝑚𝑏. In correlated OT (COT) [2]
the messages are chosen randomly given a sender-specified corre-
lation function, e.g. 𝑥 ↦→ 𝑥 + 𝛿 such that 𝑚1 = 𝑚0 + 𝛿 holds over
some domain. Thus, the receiver obtains 𝑚𝑏 = 𝛿 · 𝑏 + 𝑚0.
While OT inherently requires relatively costly public key cryp-
tography [22], OT extension [23] allows to expand a small number
of regularly computed OTs into a large number of OTs using only
relatively cheap symmetric key cryptography.
Oblivious linear-function evaluation (OLE) [24, 27] is an arith-
metic generalization of COT allowing a receiver to evaluate a secret
linear equation 𝛼 · 𝑋 + 𝛽 (over a field F𝑝 or ring Z2𝑘 ) held by the
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea194sender at a point of its choice 𝑥 to obtain 𝑦 = 𝛼 · 𝑥 + 𝛽. This can
be extended into vector OLE (VOLE) [1] where 𝑥 and 𝛽 are vec-
tors of the same length rather than single field elements. Subfield
VOLEs [9] extends this concept such that the elements of 𝛼 and 𝛽
live in an extension field F𝑝𝑟 ⊃ F𝑝. Random (subfield) VOLE, where
inputs are chosen randomly by the functionality, is easier to realize
and can be used to instantiate normal VOLE, by sending correction
values.
We use information-theoretic message authentication codes (MACs)
to authenticate values in finite fields Z𝑝 and rings Z2𝑘 . The case
Z2𝑘 is discussed in Section 5.2 where we adapt the work of [12] to
the zero-knowledge setting. For fields Z𝑝, we use BeDOZa-style
MACs [6] which can be generated as follows: To authenticate values
𝑥1, . . . , 𝑥𝑛 ∈ Z𝑝 known to P, random keys Δ, 𝐾[𝑥1], . . . , 𝐾[𝑥𝑛] ∈𝑅
Z𝑝 are chosen by V, and then P obtains the MACs 𝑀[𝑥𝑖] ←
Δ · 𝑥𝑖 + 𝐾[𝑥𝑖] ∈ Z𝑝. We use the notation [𝑥𝑖]𝑝 for this. To open
[𝑥]𝑝, P sends 𝑥 and 𝑀[𝑥] toV, who checks that 𝑀[𝑥] = Δ·𝑥+𝐾[𝑥]
holds. These authentications are linearly homomorphic: Given au-
thenticated values [𝑥]𝑝 and [𝑦]𝑝 and public values 𝑎, 𝑏, P and
V can locally compute [𝑧]𝑝 for 𝑧 := 𝑎 · 𝑥 + 𝑦 + 𝑏 by setting
𝑀[𝑧] := 𝑎 · 𝑀[𝑥] + 𝑀[𝑦] and 𝐾[𝑧] := 𝑎 · 𝐾[𝑥] + 𝐾[𝑦] − Δ · 𝑏.
For large enough 𝑝, this is secure since forgery would imply cor-
rectly guessing a random element of Z𝑝. For smaller 𝑝, the keys Δ
and 𝐾[𝑥𝑖] are instead chosen from an extension field Z𝑝𝑟 such that
𝑝𝑟 is large enough. The MACs can be efficiently computed with
(subfield) VOLE [4, 31].
2.4 Homomorphic Commitment Functionality
As discussed in Section 2.2, we use the commit-and-prove paradigm
for our zero-knowledge protocols. To this end, we define a com-
mitment functionality. It allows the prover P to commit to values,
and choose to reveal them at a later point in time, such that the
verifier V is convinced that the values had not been modified in the
meantime. Moreover, the functionality allows to perform certain
operations of the underlying algebraic structure on the committed
values, and to check if these satisfy certain relations.
The commitment functionality can be instantiated using linearly
homomorphic information-theoretic MACs (see Section 2.3). For
finite fields Z𝑝, this was shown with the protocols Wolverine [31]
and Mac’n’Cheese [4]. We refer to their works for details. For rings
Z2𝑘 , we present an instantiation in Section 5.2.
We formally define the homomorphic commitments using the
ideal functionality F 𝑅
given in Appendix A, Figure 15. The
parameter 𝑅 denotes the message space, which is in our case either
a ring Z2𝑘 or a field Z𝑝. In addition to the common Input and Open
operations, which enables P to commit to a value and reveal it to V
at a later point, we also model Random and CheckZero, for generat-
ing commitments of random values and verifying that a committed
value equals zero, respectively, which enables more efficient imple-
mentations. Moreover, F 𝑅
allows via Affine to compute affine
combinations of committed values with public coefficients yielding
again a commitment of the result. Finally, CheckMult allows to ver-
ify that a set of committed triples satisfy a multiplicative relation,
i.e. for each triple, the third commitment contains the product of
the first two committed values.
ComZK
ComZK
Since the commitment functionality is based on information-
theoretic MACs, we use the same notation [𝑥] to denote a com-
mitted value 𝑥 ∈ 𝑅. We use this shorthand to to simplify the pre-
sentation of higher-level protocols without explicitly mentioning
the commitment identifiers. We use also shorthands for the dif-
ferent methods of F 𝑅
, e.g. we write something like [𝑧] ←
𝑎 · [𝑥] + [𝑦] + 𝑏 when invoking the Affine method. We write [𝑥]𝑀,
if the domain Z𝑀 of the committed values is not clear from the
context, or if we have to distinguish commitments over multiple
different domains.
ComZK
2.5 Extended Doubly-Authenticated Bits
A doubly-authenticated bit (or daBit for short) is a bit 𝑏 that is
authenticated in both a binary and arithmetic domain, i.e. a tuple
([𝑏]2, [𝑏]𝑀). daBits can be used to convert a single bit from the
binary to the arithmetic domain or vice versa [26, 28].
Their generalization, called edaBits (due to Escudero et al. [16]),
is defined as 𝑚 bits 𝑏0, . . . , 𝑏𝑚−1 which are each authenticated in the
binary domain while their sum is authenticated in the arithmetic
one, i.e. ([𝑏0]2, . . . , [𝑏𝑚−1]2, [𝑏]𝑀), for some 𝑚 ≤ ⌈log 𝑀⌉. These
edaBits allow for optimized conversions of authenticated values,
and allow to securely compute truncations or extract the most
significant bit of a secret value in MPC.
We now quickly recap their edaBits generation protocol (origi-
nally defined in the multi-party computation context) as we build
upon their construction later. The construction of [16] consists of
two different phases: in the first phase, each party locally samples
edaBits and proves to all other parties that they were computed
correctly. Then, in a second phase, these local contributions are
combined to global, secret edaBits. In our setting however, only
the prover will use edaBits, thus it is clear that the second phase
can be omitted. Our sampling protocol will only have to ensure
that each edaBit ([𝑥0]2, . . . , [𝑥𝑚−1]2, [𝑥]𝑀) is indeed consistent,
The first phase of the edaBit sampling routine of [16] then
works as follows (when adapted to the zero-knowledge setting):
i.e. that 𝑥 =𝑚−1
𝑖=0 𝑥𝑖2𝑖 mod 𝑀.
ues 𝑟 𝑗 ←𝑚−1
(1) The prover locally samples (𝑁 𝐵 +𝐶)𝑚 bits 𝑟𝑖,𝑗 for 𝑗 ∈ [𝑁 𝐵 +𝐶]
and 𝑖 ∈ {0, . . . , 𝑚−1}. It then combines these into the 𝑁 𝐵+𝐶 val-
𝑖=0 , 𝑟 𝑗} 𝑗 ∈[𝑁 𝐵+𝐶].
(2) The prover then commits to the binary values 𝑟𝑖,𝑗 over Z2 and
𝑖=0 2𝑖𝑟𝑖,𝑗 yielding edaBits {(𝑟𝑖,𝑗)𝑚−1
to the combined values 𝑟 𝑗 over Z𝑀.
(3) The prover and verifier engage in a check that ensures that
the committed values of the prover are consistent. For this, the
prover first opens 𝐶 of the 𝑁 𝐵 + 𝐶 committed tuples to show
consistency (where the choice is made by the verifier). Then the
𝑁 𝐵 edaBits are distributed into 𝑁 buckets of size 𝐵. 𝐵 − 1 of
the edaBits are then used to verify that the remaining edaBit
per bucket is consistent without leaking information about it.
(4) If the check passes, then the remaining edaBit in each of the
𝑁 buckets is known to be consistent.
The main challenge in this protocol is the bucket check in the
penultimate step; [16] show that certain consistency checks can be
performed in an unreliable manner, while still being hard to cheat
overall, which leads to a complicated analysis.
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1953 CONVERSIONS BETWEEN Z2 AND Z𝑀
In this section we present our protocol for performing proofs of
consistent conversions in mixed arithmetic-binary circuits that will
work with any such ZK protocol as described in the preliminaries.
3.1 Conversions and edaBits in ZK
In secure multi-party computation, edaBits are used to compute a
conversion of a value [𝑥]𝑀 that is secret-shared among multiple
parties. In the zero-knowledge setting, the prover knows the under-
lying value 𝑥, so there is no need to convert [𝑥]𝑀 securely into its
bit decomposition ([𝑥0]2, . . . , [𝑥𝑚−1]2) online. Instead, the prover
can commit to ([𝑥0]2, . . . , [𝑥𝑚−1]2, [𝑥]𝑀) in advance, which would
itself form a valid edaBit if the conversion is correct. We call the
inputs and outputs of conversion operations conversion tuples.
Definition 3.1 (Conversion Tuple). Let 𝑀 ∈ N+, 𝑚 ≤ ⌈log2(𝑀)⌉,
𝑥 ∈ Z𝑀 and 𝑥𝑖 ∈ Z2. Then the tuple ([𝑥0]2, . . . , [𝑥𝑚−1]2, [𝑥]𝑀) is
called a conversion tuple. We call ([𝑥0]2, . . . , [𝑥𝑚−1]2, [𝑥]𝑀) consis-
tent iff 𝑥 =𝑚−1
𝑖=0 2𝑖𝑥𝑖 mod 𝑀.
Our conversion protocol in this section provides an efficient way
to verify that a large batch of conversion tuples are consistent, i.e.
that the committed values are indeed valid edaBits. We note that
an alternative approach would be to directly apply the method
of [16] — here, first a set of random, verified conversion tuples is
created, and then one of these is used to check the actual conversion
tuple in an online phase. Unfortunately, this online phase check
itself involves verifying a binary circuit for addition mod 𝑀, which
introduces additional expense. We therefore design a new protocol
to avoid this, with further optimizations.
Our protocols perform conversions on committed values in Z2
and Z𝑀, where we recall that 𝑀 is either a large prime or 2𝑘. We
model these commitments using the functionality F 2,𝑀
in Fig-
ComZK
ure 16in Appendix A, which extends two instances of F 𝑅
for
𝑅 = Z2 and 𝑅 = Z𝑀 and simply parses all method calls to the
respective instance.
Finally, we define the ideal functionality for verifying conver-
sions FConv in Figure 1. This functionality extends F 2,𝑀
with a
single method VerifyConv. It essentially checks whether or not the
two representations of some hidden value are consistent.
ComZK
ComZK
3.2 The Conversion Verification Protocol ΠConv
The following protocol ΠConv verifies the correctness of a batch of
𝑁 conversion tuples. ΠConv uses FDabit (Figure 2) to verify correct-
ness of daBits (recall, a daBit is an edaBit of length 1), which is
needed in one stage of the protocol. Later, we show how to remove
most of the daBit check to improve efficiency.
ΠConv also uses multiplication triples, namely, random values
[𝑥]2, [𝑦]2, [𝑧]2 where 𝑧 = 𝑥 ·𝑦; one multiplication triple can then be
used to verify a multiplication on committed inputs at a cost of two
openings in Z2, using a standard technique. In our case, however,
we allow the prover to choose all the triples, without verifying their
consistency.
, thus con-
𝑖
ComZK
for all 𝑗 ∈ [𝑁] then output