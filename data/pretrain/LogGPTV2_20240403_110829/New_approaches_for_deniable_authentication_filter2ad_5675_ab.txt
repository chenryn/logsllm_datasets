of our schemes (the CCA-paradigm enjoys it too) it is still
remarkable, as this proof in our commitment-based protocol
uses rewinding as well, but in a way that does not compro-
mise security in unbounded concurrent executions.
An interesting feature of the commitment-based protocol
is that in a realistic multi-user setting (like the one we con-
sider in this paper) the security reduction depends linearly
on the number of players in the network while for the CCA-
paradigm protocols the dependency is linear in the number
of sessions. The latter can be a much higher paramater
and thus the improvement is not just a mere theoretical fea-
ture but it is important in practice as it guarantees security
with much smaller parameters and consequently improved
eﬃciency.
Forward Deniability. Finally we present a formal deﬁ-
nition of forward deniability. We prove that a large class of
computational zero-knowledge protocols (i.e. those in which
deniability is obtained by reduction to a computational ZK
protocol for an NP-complete language) are not forward de-
niable. We also prove that other protocols in the literature
(including our new proposals) are forward deniable.
To prove our schemes we present a unifying model to de-
ﬁne deniable authentication. To prove that our protocols
are secure authenticators we use the model introduced by
Bellare et al. [3]. We then integrate the notion of denia-
bility and forward deniability to it, by adding the required
simulation properties.
1.3 Related Work
As we said above, the ﬁrst solution is based on the notion
of multi-trapdoor commitments [12]. These commitments
were introduced, extending the work of Katz [21], to deal
with malleability issues in concurrent executions of proofs of
knowledge. In our solution we exploit in a novel and original
way their non-malleability properties in order to obtain deni-
able authentication. We note that some of the constructions
of simulation-sound commitments presented in [24] (namely
the ones that achieve information-theoretic privacy of the
message) can also be used in our construction5.
The second solution exploits the properties of -universal
projective hash functions [6], to relax the requirement on
the key establishment mechanism in the CCA paradigm. It
is somewhat related to a recent improvement to the Cramer-
Shoup CCA encryption proposed by Kurosawa and Desmedt
[23]. They consider the hybrid version of the Cramer-Shoup
cryptosystem described in [30]. There the encryption scheme
is split in a Key Encapsulation Module (KEM) where the
Cramer-Shoup encryption scheme is used to encrypt a ran-
dom key, and a Data Encapsulation Module where the mes-
sage is encrypted and MAC’ed using the above key. Kuro-
sawa and Desmedt note that in this scenario it is not strictly
5If we use the generic construction of simulation-sound com-
mitments based on one-way functions, deniability is only
achieved in the computational sense, and thus no forward
deniability is obtained. On the other hand the number-
theoretic constructions yield statistical ZK and forward de-
niability.
necessary that the KEM is CCA-secure, and indeed they
show how to convert the Cramer-Shoup KEM in one which
is still suﬃcient for the overall CCA-security of the hybrid
encryption, yet it is not known to be CCA secure itself. The
net result is an improvement in the eﬃciency of the overall
scheme (especially when considering the improved proof of
security presented in [13].). In doing so, however Kurosawa
and Desmedt introduced a stronger requirement on the pro-
jective hash functions used in the scheme.
Our work, which was done independently from [23], fol-
lows a related path for the case of deniable authentication.
But our solution is conceptually simpler, again because we
remove the need to encrypt anything. Instead of using the
projective hash functions to establish a random key (which
is the source of the stronger requirement in [23]), we use it
directly as a message authenticator. Thus the original notion
of -universality in [6] suﬃces.
Comparison with Katz’s protocols. The CCA-para-
digm for deniable authentication can also be considered in
the context of interactive CCA-secure encryption protocols
(exploiting the fact that since deniable authentication al-
ready introduces interaction, then we can use interaction
also inside the encryption step). We point to the results of
Katz [21] in this area. The protocols presented there, ex-
ploit the interactive nature of the encryption step, in order
to get solutions which are more eﬃcient than the ones based
on the basic CCA-paradigm. In order to achieve interactive
CCA-security, Katz uses proofs of plaintext knowledge for
semantic secure encryptions (or even trapdoor permutations
in some cases), combined with a non-malleable commitment
scheme.
Our solutions show that if one strengthens the commit-
ments used by Katz to be multi-trapdoor ones, then the
commitments themselves yield eﬃcient deniable authenti-
cation protocol. Thus we dispense with using encryption
altogether. The tradeoﬀ is that we use stronger computa-
tional assumptions: while the protocols in [21] can be proven
secure based on the regular RSA and Computational Diﬃe-
Hellman assumptions, the eﬃcient istantiations of our pro-
tocols require either the Strong RSA, DSA, or Strong DH
assumptions.
The eﬃciency of our protocol6 is basically the same as the
ones in [21]. However our protocol does not require one-time
signature schemes, making the communication much shorter
than in [21]. Finally our security reduction is more eﬃcient
as it depends only on the number of parties in the network,
while Katz’s depends on the total number of sessions.
1.4 Practical Applications
Deniability is an important privacy-enabling feature of
cryptographic protocols and as such has many important
practical applications.
The practical importance of this concept can be seen by
the weight that deniability issues have played in the design
of Internet key exchange protocols (see for example [22, 19,
25]).
Electronic elections are another example of the impor-
tance of deniability. There, while it is important that both
6The protocol in Figure 2 when istantiated with concrete
number-theoretic commitments compared to the one in [21]
based on a similar assumption – i.e.
comparing the [21]
protocol based on RSA (resp. CDH) with ours based on
Strong RSA (resp. Strong DH or DSA).
parties (the voting authority and the voter) authenticate
each other, it is also mandatory to prevent either party from
walking away with a non-repudiable proof of what the actual
vote was (the message being authenticated). This applica-
tion, in particular, shows the importance of forward denia-
bility: if the voter (sender) is authenticating her vote to the
authority, not only the latter should not be able to prove
to a third party how the voter voted, but even more impor-
tantly the voter herself should not be able to do so at a later
stage, to prevent coercion and vote-selling.
Finally we point out that deniable authentication has ap-
plications in electronic commerce as well. As pointed out
by Aumann and Rabin [1, 2], the use of deniable authen-
tication, instead of regular signatures, can be used to com-
municate conﬁdential terms of a transactions (such as price
oﬀers) without fear that such terms could be shown to a
third party in an eﬀort to obtain better terms (such as a
better price oﬀer).
2. THE MODEL
The model used in the paper for the analysis of the au-
thentication protocols was introduced by Bellare et al. [3]
as a new modular approach to prove the security of authen-
tication and key exchange protocols. Here we reuse and
extend that idea for the analysis of protocols for deniable
authentication.
This model deals with two kinds of network: an ideal au-
thenticated network and a more realistic unauthenticated
network. The former models a simpliﬁed peer-to-peer net-
work of authenticated links in which the powers of adver-
sary are limited to manage the delivery of the messages ex-
changed by the parties (it can’t inject or manipulate mes-
sages) and to corrupt some of them. The latter has char-
acteristics of a real network (with unauthenticated links) in
which the adversary has full powers on the communication
channels, so it can change and forge new messages.
The task to prove any kind of properties (like secrecy) of
a protocol in a simpliﬁed world like our authenticated model
is simpler than in a real network. To obtain a version of the
protocol that works in a realistic unauthenticated network
we can use special protocol compilers named authenticators
that, informally, take a protocol for (ideally) authenticated
networks and turns it in a protocol that has similar input-
output characteristics in an unauthenticated network. This
way to proceed permits to modularize the analysis of the
properties of protocols. In [3] this was applied to prove the
full security of Key Exchange protocols.
Refer to the full version of this paper for the necessary
details of the model as introduced by Bellare et al.
2.1 Extension for deniable methods
The goal of this paper is to focus on methods of authen-
tication that provide the desirable property to be deniable.
A protocol for the authentication of a message is a protocol
between a party A (who sends the message and proves its
identity) and a party B that permits the latter to verify the
integrity of the message and the identity of the sender A.
Informally, we say that this kind of protocol is deniable if
the transcript of its execution can’t permit a third party to
verify the participation of A. That is, the transcript of the
interaction cannot be used as evidence that A took part in
the protocol (i.e. A or B can later deny that the authenti-
cation took place).
For example, to digitally sign a message m with the secret
key of A could be a good way to obtain message authentica-
tion but this technique is completely undeniable: speaking
of long-term certiﬁed signing key, only A could produce a
valid signature and it is a proof for third parties. From this,
the deep diﬀerences between digital signatures and methods
for deniable authentication.
The original model of Bellare et al. deﬁnes authenticators
as secure protocols to authenticate messages. We extend
the concept of authenticator to cover the notion of “deniable
protocol”.
Definition 1. Let λ be a message authenticator. We say
that λ is deniable if for any receiver B, there exists a simu-
lator S (B)
that given a message m sent by a party A to B
produces a transcript of a session of λ for m that is indis-
tinguishable from a real one.
λ
λ
Note that the simulator S (B)
can’t use the private infor-
mation of the parties (i.e. private keys). This is enough to
prove that the transcript of any session of λ can’t be used by
third parties to verify the participation of the involved par-
ticipants. In fact, anyone could produce realistic transcripts
of λ using the simulator S (B)
λ .
There are, as usual, three ﬂavors of the above deﬁnition
depending of what kind of indistinguishability the simulator
achieves. We say that a deniable authenticator is perfectly
or statistically zero-knowledge if the real and simulated tran-
scripts follow distributions which are either identical or sta-
tistically close. We say that a deniable authenticator is com-
putational zero-knowledge if the real and simulated tran-
scripts follow distributions which are computationally indis-
tinguishable (see [14, 15] for deﬁnitions of the various types
of indistinguishability).
Remark: In [10] the authors do not specify what kind of
indistinguishability they require, but it is clear from the con-
text that they consider computational zero-knowledge pro-
tocols to be deniable. In [28] computational zero-knowledge
is explicitly mentioned as suﬃcient for deniable authenti-
cation. On the other hand Katz in [21] explicitly limits
deniable authentication protocols to be statistical ZK.
2.2 Forward Deniability
If we look at the example in Section 1.1, we see that de-
niability is not just a concern of the sender, but also of the
receiver. In order to ensure forward deniability we need to
make sure that at the end of a real execution, the sender
does not inherit a “witness” of the fact that the transcript
is real.
Basically it must be hard for Alice to present a “witness”
of the fact that a particular transcript is real. More generally
we need to enforce that for a simulated transcript we can
create a simulated state for the sender which looks “as good”
as the real state after a real execution of the protocol. Notice
that in the example above this would prevent Alice to prove
that a certain message really came from her, as whatever
state she presents to prove such a fact, it might as well be a
fake state for a simulated transcript.
We now give a formal deﬁnition. Let λ be a deniable
authenticator, and A a sender. With intλ,A(m) we denote
the internal state of A produced by running λ on m: the
messages sent and received and the internal coin tosses7.
7That is intλ,A(m) is what is added to the internal state of
Also with transλ(m) (resp.
simtransλ(m)) we denote the
random variable describing the transcript (resp. simulated
transcript) of an execution λ on input message m.
Definition 2. Let λ be a deniable authenticator between
sender A and a receiver B. Let xA be the private input (se-
cret key) of A. We say that λ is forward deniable if there
exists a simulator SFDλ that on input xA and simtransλ(m)
outputs a simulated internal state simintλ,A(m) which is in-
distinguishable from intλ,A(m).
Remark: Why are we giving the secret key to the simulator?
Notice that in our deﬁnition we are allowing the simulator
to know xA. Indeed recall that our goal is to prevent Alice,
the Sender, from proving that a transcript is real. Thus by
giving the simulator her secret key xA we are modeling the
fact that this simulated internal state can be produced by
Alice, and thus we have no reason to believe her when she
says that a transcript is either real or simulated.
Remark: On the honesty of the Sender. In the deﬁnition
above, we assume that A behaves honestly during the ex-
ecutions of λ. In particular we assume that A chooses its
random input as prescribed by the protocol. A possible way
for A to prove that a transcript is real, is to modify its coin
tosses in a way that is not detectable from the outside but
that will allow her later to prove that those messages were
generated by her (for example, she could choose a random
string r not by directly sampling it, but by choosing r0 and
setting r = f (r0) where f is a hard-to-invert permutation).
This kind of behavior was termed semi-honest in [4]. No-
tice, however, that in the case of deniable authentication
A herself is not interested in keeping such a strategy as the
presence of such “witnesses”, if leaked, may be used to prove
that she authenticated a message.
Remark: Computational ZK and forward deniability. Con-
sider any computational ZK protocol for an NP-complete
problem, e.g.
the one for graph 3-colorability [17]. The
common input is a 3-colorable graph and the Prover knows
such a coloring. In the ﬁrst message the Prover commits to
a random 3-coloring of the graph, i.e. for each vertex v com-
mits to π(col(v)), where col(v) is the color of v described as
an integer in {1, 2, 3} and π is a random permutation over
the same set. Then the (honest) veriﬁer asks for a random
edge and the prover decommits, to the colors of the nodes
composing that edge. Under the security of the commitment
scheme this is a computational ZK protocol: the simulator
for the honest veriﬁer chooses a random edge, commits to
diﬀerent random colors for the nodes on that edge, and then
commits to random colors for the other nodes. Note that
since the simulator does not know the 3-coloring, the color-
ing which it commits to is not a correct 3-coloring, and that
can be easily detected if all the commitments are opened.