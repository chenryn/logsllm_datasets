### Friday the 13th: JSON Attacks

**Presenters:**
- Álvaro Muñoz (@pwntester)
- Oleksandr Mirosh
- HPE Security

**Who Are We?**
- **Álvaro Muñoz**: Security Researcher at HPE, @pwntester
- **Oleksandr Mirosh**: Security Researcher at HPE

### Introduction
- 2016 was the year of the Java Deserialization Apocalypse.
- This vulnerability has been known since 2011.
- Previously, there were few reliable Remote Code Execution (RCE) gadgets in common libraries.
- The Apache Commons-Collections gadget caught many off guard.
- **Solution?**
  - Stop using Java serialization.
  - Use a secure JSON or XML serializer instead.
  - Do not let history repeat itself.
- **Is JSON/XML any better?**
  - Raise awareness for .NET deserialization vulnerabilities.

### Agenda
1. **Attacking JSON Serializers**
   - Affected Libraries
   - Gadgets
   - Demo
2. **Attacking .NET Serializers**
   - Affected Formatters
   - Gadgets
   - Demo
3. **Generalizing the Attack**
   - Demo

### Is JSON Any Better?
- **Introduction**
  - JSON is generally secure when used to transmit simple data and JavaScript objects.
  - Replacing Java/.NET serialization with JSON requires Object-Oriented Programming (OOP) support.
  - Challenges:
    - How do we serialize a `java.lang.Object` field?
    - How do we handle generics?
    - How do we serialize interface fields?
    - How do we deal with polymorphism?

### Quick Recap of Java Deserialization Attacks
- Attackers can force the execution of `readObject()` or `readResolve()` methods of any class in the classpath.
- By controlling the deserialized field values, attackers can abuse the logic of these methods to run arbitrary code.
- JSON libraries do not typically invoke deserialization callbacks or magic methods.

### Can We Initiate a Gadget Chain in Some Other Way?
- **Object Reconstruction**
  - JSON libraries need to reconstruct objects by:
    - Calling the default constructor and setting field values via reflection.
    - Calling the default constructor and setting field values via setters.
    - Using special constructors, type converters, or callbacks.
    - Invoking common methods such as `hashCode()`, `toString()`, `equals()`, `finalize()`, etc.
    - Combinations of the above.

### Gadgets: .NET Edition
- **System.Configuration.Install.AssemblyInstaller**
  - `set_Path`: Executes payload on local assembly load.
- **System.Activities.Presentation.WorkflowDesigner**
  - `set_PropertyInspectorFontAndColorData`: Loads arbitrary XAML.
  - Requires a Single Threaded Apartment (STA) thread.
- **System.Windows.ResourceDictionary**
  - `set_Source`: Loads arbitrary XAML.
  - Requires working with setters of types derived from `IDictionary`.
- **System.Windows.Data.ObjectDataProvider**
  - `set_MethodName`, `set_ObjectInstance`, `set_ObjectType`: Allows arbitrary method invocation.
  - Example:
    ```json
    {
      "$type": "System.Windows.Data.ObjectDataProvider, PresentationFramework",
      "ObjectInstance": {
        "$type": "System.Diagnostics.Process, System"
      },
      "MethodParameters": {
        "$type": "System.Collections.ArrayList, mscorlib",
        "$values": ["calc"]
      },
      "MethodName": "Start"
    }
    ```

### Gadgets: Java Edition
- **org.hibernate.jmx.StatisticsService**
  - `setSessionFactoryJNDIName`: JNDI lookup.
  - Presented during our JNDI attacks talk at BlackHat 2016.
- **com.atomikos.icatch.jta.RemoteClientUserTransaction**
  - `toString`: JNDI lookup.
- **com.sun.rowset.JdbcRowSetImpl**
  - `setAutoCommit`: JNDI lookup.
  - Available in Java JRE.

### Gadgets: Non-RCE
- **Arbitrary Getter Call**
  - **org.antlr.stringtemplate.StringTemplate (Java)**
    - `toString`: Can be used to chain to other gadgets like `TemplatesImpl.getOutputProperties()`.
  - **System.Windows.Forms.BindingSource (.NET)**
    - `set_DataMember`: XXE (XML External Entity) attack.

### Summary
| Name | Language | Type | Control | Vector |
|------|----------|------|---------|--------|
| FastJSON | .NET | Default | Cast | Setter |
| Json.Net | .NET | Configuration | Expected Object Graph Inspection | Setter |
| FSPickler | .NET | Default | Expected Object Graph Inspection | Setter, Deserialization Callbacks |
| Sweet.Jayson | .NET | Default | Cast | Setter |
| JavascriptSerializer | .NET | Configuration | Cast | Setter |
| DataContractJsonSerializer | .NET | Default | Expected Object Graph Inspection + Whitelist | Setter, Deserialization Callbacks |
| Jackson | Java | Configuration | Expected Object Graph Inspection | Setter |
| Genson | Java | Configuration | Expected Object Graph Inspection | Setter |
| JSON-IO | Java | Default | Cast | `toString` |
| FlexSON | Java | Default | Cast | Setter |
| GSON | Java | Configuration | Expected Object Graph Inspection | - |

- **FastJson**
  - Always includes Type discriminators.
  - No type check controls other than a post-deserialization cast.
  - Invokes setters.
  - Should never be used with untrusted data.
  - Example: KalikoCMS, CVE-2017-10712

This optimized version of your text is more structured and professional, with clear headings and a consistent format.