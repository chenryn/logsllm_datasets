:resjunk false
}
:expr
{ VAR
:varno 1
:varattno 1
:vartype 1042
:vartypmod 19
:varlevelsup 0
:varnoold 1
:varoattno 1
}
}
)
PostgreSQL Internals 43
Plan Output - Three-Table Join
DEBUG: plan:
{ HASHJOIN
:startup_cost 6.58
:total_cost 68.90
:rows 575
:width 112
:qptargetlist (
{ TARGETENTRY
:resdom
{ RESDOM
:resno 1
:restype 19
:restypmod −1
:resname relname
:reskey 0
:reskeyop 0
:ressortgroupref 0
:resjunk false
}
:expr
{ VAR
:varno 65000
:varattno 1
:vartype 19
:vartypmod −1
:varlevelsup 0
:varnoold 1
:varoattno 1
}
}
PostgreSQL Internals 44
Result Returned
test=> SELECT firstname
test−> FROM friend
test−> WHERE age = 33;
1: firstname (typeid = 1042, len = −1, typmod = 19, byval = f)
−−−−
1: firstname = "Sandy" (typeid = 1042, len = −1, typmod = 19, byval = f)
−−−−
firstname
−−−−−−−−−−−−−−−−−
Sandy
(1 row)
PostgreSQL Internals 45
Statistics - Part 1
PARSER STATISTICS
system usage stats:
0.000002 elapsed 0.000000 user 0.000001 system sec
[0.009992 user 0.049961 sys total]
0/0 [0/1] filesystem blocks in/out
0/0 [0/0] page faults/reclaims, 0 [0] swaps
0 [0] signals rcvd, 0/0 [2/2] messages rcvd/sent
0/0 [2/6] voluntary/involuntary context switches
postgres usage stats:
Shared blocks: 0 read, 0 written, buffer hit rate = 0.00%
Local blocks: 0 read, 0 written, buffer hit rate = 0.00%
Direct blocks: 0 read, 0 written
PARSE ANALYSIS STATISTICS
system usage stats:
0.000002 elapsed 0.000001 user 0.000002 system sec
[0.009993 user 0.049965 sys total]
0/0 [0/1] filesystem blocks in/out
0/0 [0/0] page faults/reclaims, 0 [0] swaps
0 [0] signals rcvd, 0/0 [2/2] messages rcvd/sent
0/0 [2/6] voluntary/involuntary context switches
postgres usage stats:
Shared blocks: 1 read, 0 written, buffer hit rate = 96.88%
Local blocks: 0 read, 0 written, buffer hit rate = 0.00%
Direct blocks: 0 read, 0 written
PostgreSQL Internals 46
Statistics - Part 2
REWRITER STATISTICS
system usage stats:
0.000002 elapsed 0.000000 user 0.000002 system sec
[0.009993 user 0.049968 sys total]
0/0 [0/1] filesystem blocks in/out
0/0 [0/0] page faults/reclaims, 0 [0] swaps
0 [0] signals rcvd, 0/0 [2/2] messages rcvd/sent
0/0 [2/6] voluntary/involuntary context switches
postgres usage stats:
Shared blocks: 0 read, 0 written, buffer hit rate = 0.00%
Local blocks: 0 read, 0 written, buffer hit rate = 0.00%
Direct blocks: 0 read, 0 written
PLANNER STATISTICS
system usage stats:
0.009974 elapsed 0.009988 user −1.999985 system sec
[0.019982 user 0.049955 sys total]
0/0 [0/1] filesystem blocks in/out
0/0 [0/0] page faults/reclaims, 0 [0] swaps
0 [0] signals rcvd, 0/0 [2/2] messages rcvd/sent
0/0 [2/6] voluntary/involuntary context switches
postgres usage stats:
Shared blocks: 5 read, 0 written, buffer hit rate = 96.69%
Local blocks: 0 read, 0 written, buffer hit rate = 0.00%
Direct blocks: 0 read, 0 written
EXECUTOR STATISTICS
system usage stats:
0.040004 elapsed 0.039982 user 0.000013 system sec
[0.059964 user 0.049970 sys total]
0/0 [0/1] filesystem blocks in/out
0/0 [0/0] page faults/reclaims, 0 [0] swaps
0 [0] signals rcvd, 0/2 [2/4] messages rcvd/sent
2/2 [4/8] voluntary/involuntary context switches
postgres usage stats:
Shared blocks: 2 read, 0 written, buffer hit rate = 83.33%
Local blocks: 0 read, 0 written, buffer hit rate = 0.00%
Direct blocks: 0 read, 0 written
PostgreSQL Internals 47
File Structure
Page
Page
Page
Page
Page
Page
PostgreSQL Internals 48
Page Structure
Page Header Item Item Item
Tuple
Tuple Tuple Special
PostgreSQL Internals 49
Heap Tuple Structure
OID - object id of tuple
cmin - creation command id
cmax - destruction command id
xmin - creation transaction id
xmax - destruction transaction id
ctid - tuple id (page / item)
natts - number of attributes
infomask - tuple flags
hoff - length of tuple header
bits - bit map representing NULL values
Atttribute
Attribute
PostgreSQL Internals 50
Index Page Structure
Page Header Item Item Item
Internal
>= N
= xmax are invisible to me */
uint32 xcnt; /* # of xact below */
TransactionId *xip; /* array of xacts in progress */
ItemPointerData tid; /* required for Dirty snapshot −:( */
} SnapshotData;
PostgreSQL Internals 58
Vacuum
A A E A A A E A A A A A
C C X C C C X C C C C C
T T P T T T P T T T T T
I I I I I I I I I I I I
V V R V V V R V V V V V
E E E E E E E E E E E E
A A A A A A A A A A
C C C C C C C C C C
T T T T T T T T T T
I I I I I I I I I I
V V V V V V V V V V
E E E E E E E E E E
A A A A A A A A A A
C C C C C C C C C C
T T T T T T T T T T
I I I I I I I I I I
V V V V V V V V V V
E E E E E E E E E E
PostgreSQL Internals 59
Proc Structure
struct proc
{
/* proc−>links MUST BE FIRST IN STRUCT (see ProcSleep,ProcWakeup,etc) */
SHM_QUEUE links; /* list link if process is in a list */
SEMA sem; /* ONE semaphore to sleep on */
int errType; /* STATUS_OK or STATUS_ERROR after wakeup */
TransactionId xid; /* transaction currently being executed by
* this proc */
TransactionId xmin; /* minimal running XID as it was when we
* were starting our xact: vacuum must not
* remove tuples deleted by xid >= xmin ! */
XLogRecPtr logRec;
/* Info about lock the process is currently waiting for, if any. */
/* waitLock and waitHolder are NULL if not currently waiting. */
LOCK *waitLock; /* Lock object we’re sleeping on ... */
HOLDER *waitHolder; /* Per−holder info for awaited lock */
LOCKMODE waitLockMode; /* type of lock we’re waiting for */
LOCKMASK heldLocks; /* bitmask for lock types already held on
* this lock object by this backend */
int pid; /* This backend’s process id */
Oid databaseId; /* OID of database this backend is using */
short sLocks[MAX_SPINS]; /* Spin lock stats */
SHM_QUEUE procHolders; /* list of HOLDER objects for locks held or
* awaited by this backend */
};
PostgreSQL Internals 60
Lock Modes
Mode Used
Access Share Lock SELECT
Row Share Lock SELECT FOR UPDATE
Row Exclusive Lock INSERT, UPDATE, DELETE
Share Lock CREATE INDEX
Share Row Exclusive Lock EXCLUSIVE MODE but allows ROW SHARE LOCK
Exclusive Lock Blocks ROW SHARE LOCK and SELECT...FOR UPDATE
Access Exclusive Lock ALTER TABLE, DROP TABLE, VACUUM, and unqualied LOCK TABLE
PostgreSQL Internals 61
Lock Structure
Proc 1 Holder Lock A
Proc 2 Lock B
Holder
Proc 3 Lock C
Waiter
Proc 4 Lock D
PostgreSQL Internals 62
System Tables
pg_database pg_description pg_trigger pg_aggregate pg_amproc
datlastsysoid objoid tgrelid aggtransfn amid
tgfoid aggfinalfn amopclaid
aggbasetype amproc
pg_language aggtranstype
aggfinaltype
pg_proc pg_am
pg_rewrite prolang amgettuple
ev_class prorettype aminsert
pg_opclass amdelete
opcdeftype ambeginscan
amrescan
pg_index pg_class pg_type pg_operator amendscan
indexrelid reltype typrelid oprleft ammarkpos
indrelid relam typelem oprright amrestrpos
relfilenode typinput oprresult ambuild
reltoastrelid typoutput oprcom amcostestimate
reltoastidxid typreceive oprnegate
typsend oprlsortop
oprrsortop
oprcode
pg_inherits pg_attribute pg_attrdef oprrest pg_amop pg_shadow
inhrelid attrelid adrelid oprjoin amopid
inhparent attnum adnum amopclaid
atttypid amopopr pg_group
pg_statistic
pg_relcheck starelid
rcrelid staattnum
staop
PostgreSQL Internals 63
Modifying System Capabilites
CREATE FUNCTION
CREATE OPERATOR
CREATE TYPE
CREATE LANGUAGE
PostgreSQL Internals 64
Caches
System Cache
Relation Information Cache
File Descriptor Cache
PostgreSQL Internals 65
Shared Memory
Proc structure
Lock structure
Buffer structure
PostgreSQL Internals 66
Shared Buffers
typedef struct sbufdesc
{
Buffer freeNext; /* links for freelist chain */
Buffer freePrev;
SHMEM_OFFSET data; /* pointer to data in buf pool */
/* tag and id must be together for table lookup to work */
BufferTag tag; /* file/block identifier */
int buf_id; /* maps global desc to local desc */
BufFlags flags; /* see bit definitions above */
unsigned refcount; /* # of times buffer is pinned */
slock_t io_in_progress_lock; /* to block for I/O to complete */
slock_t cntx_lock; /* to lock access to page context */
unsigned r_locks; /* # of shared locks */
bool ri_lock; /* read−intent lock */
bool w_lock; /* context exclusively locked */
bool cntxDirty; /* new way to mark block as dirty */
BufferBlindId blind; /* was used to support blind write */
/*
* When we can’t delete item from page (someone else has buffer pinned)
* we mark buffer for cleanup by specifying appropriate for buffer
* content cleanup function. Buffer will be cleaned up from release
* buffer functions.
*/
void (*CleanupFunc)(Buffer);
} BufferDesc;
PostgreSQL Internals 67
Memory Routines
palloc()
pfree()
MemoryContext’s
PostgreSQL Internals 68
Algorithms
Lookup
Lookup Insert/Del Pointers Resize
Algorithm Ordering by Order Insert Delete Recent per Entry Overhead
list insert O(n) O(1) O(1) O(1) 1-2 no
array insert O(1) O(1) O(n) O(1) 0.5 yes
tree key O(logN) O(logN) O(1) 2 no
array key O(logN) O(n) O(n) 0.5 yes
hash random O(1) O(1) O(1) 3 yes
PostgreSQL Internals 69