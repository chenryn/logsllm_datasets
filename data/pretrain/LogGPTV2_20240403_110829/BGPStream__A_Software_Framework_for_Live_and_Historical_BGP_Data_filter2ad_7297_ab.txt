publisher  tells  the  event  manager  to  notify  its  event,  the
event manager sends an event notification in the form of a
message  to  all  the  subscribers.  With  deployment  of  the
model,  the  upgrade  can  change  the  set  of  modules  and
modify  the  interconnection  patterns  dynamically  so  that
the software can be evolved continually.
A
A
module C is replaced with a new version, the module D is
removed, and a new module E is added. The new module
E starts subscribing the events published by the modules A
and B. The upgraded module C’ subscribes the events not
only from the modules A, B but also from the module E.
upgrade 
framework, 
3.2.5  Version-control  repository.  In  our  dynamic
software 
each  module-
implementation  can  be  compiled  as  a  module  library,
which  is  an  upgradeable  unit  that  can  be  unloaded  and
loaded  at  runtime.  The  repository  provides  the  software
upgrader with an ability to record and hold all the handles
of module libraries that can be used to create an instance
of the loaded module or clean up the module according to
different situations.  Moreover, the repository can validate
the  version  and  avoid  duplicate  loading  of  the  same
library.
3.2.6  Software  upgrader.  A  software  upgrader 
is
normally  blocked,  waiting  for  various  requests  from  the
command  line.  Its  functionality  includes  uploading  or
removing  the  module  library  into  or  from  memory,
registering  the  handle  of  a  library  to  the  version-control
repository, creating an instance of a dynamic module and
registering 
the  name  service,  and  finally
coordinating  with  the  module-proxy  for  upgrading  the
module-implementation.  The  most  important  feature  is
that  the  software  upgrader  makes  a  final  decision  for
committing or aborting an upgrade transaction.
it  with 
3.3  State Consistency
The  state  of  a  module  keeps  on  changing  while  a
software  application  is  involved  in  different  transactions.
If  a  module  is  replaced,  the  new  module  must  transform
the state of the old module and perform necessary actions
to  synchronize  its  internal  state  with  that  of  the  old
module. 
to  determine  what  state
information  should  be  transferred  from  the  old  one  and
what  time  is  suitable  for  checkpointing.  This  can  be
roughly  divided  into  a  stable  and  a  transient  state.  To
avoid  overheads  such  as  a  deep  copy  of  the  stack  and
machine 
transient  states  should  not  be
considered for checkpointing.
important 
registers, 
It 
is 
B
C
D
B
C’
E
Figure 3. Changes of communication pattern
Figure  3  shows  the  dramatic  changes  in  the  module
set  and  communication  pattern  before  and  after  software
upgrade. The upgrade results in the following impacts: the
Once a module enters into a kind of stable state called
quiescent state [13], the module state can be checkpointed
and transferred. Configuration management must give the
affected module an opportunity to reach a quiescent state
before a change is performed. A replaced module reaches
a  quiescent  state  if  it  does  not  currently  initiate  a  new
request  and  it  does  not  currently  engage  in  serving  a
request.  To  keep  the  quiescent  state  frozen,  the  target
module should be entirely isolated from the other modules
Proceedings of the 13 th International Symposium on Software Reliability Engineering (ISSRE’02) 
1071-9458/02 $17.00 © 2002 IEEE 
that  can  start  new  requests  capable  of  causing  a  state
change  on  the  target  module.  The  simple  solution  is  that
all the new incoming request messages are buffered into a
message queue while a target module is upgraded. All the
buffered  messages  are  passed  to  the  modules  being
replaced  later.  As  a  result,  no  request  message  gets  lost
during updating.
its  module-implementation 
The  module-proxy  in  each  module  should  wait  and
its
coordinate 
quiescent state. Its responsibility is to:
1.  Buffer the future  incoming  requests  in  the  format  of
messages  while  the  software  upgrader  acquires  a
replacement.
reach 
to 
2.  Make  its  module-implementation  inactive  to  stop
initiating any new requests to others.
3.  Send  a 
termination  message 
to 
its  module-
its  module-
and  wait 
for 
implementation 
implementation to reach a stable state.
On the other hand, the module-implementation should
terminate  its  task  context  once  the  last  termination
message  from  its  input  queue  is  received.  Therefore,  the
module-implementation  finally  reaches  a  quiescent  state
since it does not issue any request to others, and it is not
engaged  in  serving  a  request  any  more.  As  the  size  of  a
message-buffer  queue  is  critical  for  the  target  module  to
avoid losing pending messages, a provision of the size of
queue  is  provided  for  module  proxies  to  determine  their
own need.
3.4  The Runtime Upgrade Protocol
The Runtime Upgrade protocol is an important part in
a 
live  software  upgrade.  To  deal  with  module
replacement,  creation,  and  removal,  the  protocol  consists
of  a  module  replacement  protocol,  a  module  creation
protocol,  and  a  module  removal  protocol  respectively.
These 
in  subsequent
sections.
three  protocols  are  described 
3.4.1  The  Module  replacement  protocol.  The  Module
Replacement protocol describes how to execute an on-line
replacement of a module. The protocol can be divided into
three phases: the uploading phase, the replacement phase,
and the clean up phase. 
•  The uploading phase (Figure 4)
1.  The  software  upgrader  receives  a  replacement
command from the application administrator.
2.  The  software  upgrader 
the  command
message  and  validates  using  the  name  service  if  the
updated  module  has  been  activated  and  uploaded.
Otherwise, it aborts the command.
looks  up 
according to the command message, and registers the
handle  of 
the  version-control
repository.
library  with 
the 
4.  Then  the  software  upgrader  creates  an  instance  of  a
dynamic module.  In  addition,  it  notifies  the  module-
proxy that the current module-implementation will be
upgraded.
incoming
messages
Name Service
Module Proxy
putQueue(msg)
Old Module
implementation
getQueue(msg)
2.validation check
4. require a replacement
message-input queue
New Module
Implementation
1.receive  a
command
Software
Upgrader
3. upload  the replacing  module
Figure 4. Uploading phase
•  The replacement phase (Figures 5 and 6)
1.  The  module-proxy  collaborates  with  its  module-
implementation to achieve a quiescent state and waits
for a notification from its implementation.
2.  After  reaching  its  quiescent  state, 
the  module-
implementation calls its proxy back.
3.  The module-proxy asks its module-implementation to
checkpoint  the  state,  and  store  it  into  a  particular
storage.
4.  Then the proxy passes the handle of the storage to the
new  module-implementation  and  lets  it  recover  the
state  stored.  Thus  the  new  module-implementation
gets  the  chance  to  synchronize  its  state  with  that  of
the old one.
5.  The  proxy  is  dynamically  associated  with  the  new
module-implementation.
Module-Proxy
incoming
messages
1.send a TERM request
TERM
Old Module-
implementation
message-input queue
message-buffered queue
3.  After  the  validation  check,  the  software  upgrader
uploads  a  new  module  library  into  the  memory
Figure 5. Sending a termination message
Proceedings of the 13 th International Symposium on Software Reliability Engineering (ISSRE’02) 
1071-9458/02 $17.00 © 2002 IEEE 
Old Module-
implementation
TERM
message-input queue
Module-Proxy
5.  swap  the  reference
to the new version.
2. call back
 3.store state
4. recover state
     process(TERM)
      putState ( state)
New Module-
implementation
        getState (state )
message-buffered queue
Software
Upgrader
2. unregister
incoming
messages
Module-Proxy
    putQueue(msg)
3. unload
1.forward
Old module-
implementation
message-input queue
New module-
Implementation
           getQueue(msg)
message-buffered queue
Figure 6. Replacement phase
Figure 7. Cleaning phase
In general, not entire state of the module but the state
that is necessary for the new version to synchronize with
the old version shall be transferred. The protocol requires
that  the  essential  state  of  an  application  module  shall  be
explicitly specified.
Certain memory blocks or a file is created by an old
version  of  module  to  stores  its  state.  The  module  proxy
will  be  responsible  for  informing  the  new  version  of
module  of  the  storage  address  once  the  old  version  has
completed  the  progress  of  storing  data.  Then  a  new
version  of  module  will  retrieve  the  state  from  this  stable
storage.
To  speed  up  the  synchronization,  a  capability  for
direct transfer of state bypassing the module-proxy, can be
implemented  since  the  task  of  transfer  and  retrieval  of
state  can  be  performed  simultaneously  between  two
versions.  A  state  manager 
the  old  version  of
implementation  can  segment  and  wrap  the  state  as  small
data units that will be sent continuously to the new version
for synchronization.
in 
A  mechanism  of  state  handler  implemented  by
abstract  factory  pattern  can  be  deployed  to  solve  the
problem  of  state  compatibility  when  transforming  state
between modules with different representations. A “right”
state  handler  will  be  created  by  the  new  module  for
transformation  of  state  as  long  as  the  version  number  of
the old module is known.
•  The Clean up phase (Figure 7)
1.  The  proxy  activates  the  new  module-implementation
and redirects all subsequent request messages to it.
2.  The software upgrader removes the handle of the old
module library from the version-control repository.
3.  The  proxy  unloads  the  old  module-implementation
from the main memory
3.5  Upgrade Techniques
3.5.1  Atomic  transaction  protocol.  The  atomicity  of
software  transitions  requires  that  when  a  live  software
upgrade to a group of modules is completed, either all or
none of its operations should be carried out. If one part of
a  transaction  is  aborted,  then  the  whole  transaction  must
also be aborted. The failure of an upgrade transaction may
occur if any target module fails to reach a quiescent state
within  the  bounded  time  or  fails  to  extract  or  store  its
internal  state.  The  validation  check  is  performed  within
each  software  module  for  the  versioning,  the  completion
of state transfer and the timeout of upgrade. A two-phase
commit  protocol  is  designed  to  achieve  the  atomic
operation in our framework. During a voting phase, every
module prepares for the upgrade transaction and returns a
vote  to  the  software  upgrader  based  on  the  validation
check.  During  a  completion  phase,  the  software  upgrade
will decide to commit or abort the transaction according to
the votes from every target module.
In  case  of  commitment,  the  reference  to  module-
implementation  will  be  hot  swapped  within  the  module
proxy.  And  the  new  version  will  start  running  at  the
transferred  state.  Otherwise,  the  new  version  of  module-
implementation will be removed. And the old version will
be recovered at the frozen state.
is  applied,  an  appropriate  strategy  of 
3.5.2 Concurrent upgrade. When a group of modules is
upgraded  simultaneously  and  the  two-phase  commit
protocol 
the
execution  mode  should  be  chosen  to  reduce  service
downtime  in  an  application.  A  concurrent  upgrade  mode
can  be  used  to  solve  the  problem.  A  master-slave
mechanism  is  introduced  to  allow  concurrent  execution.
At the beginning, the software upgrader, a master, spawns
Proceedings of the 13 th International Symposium on Software Reliability Engineering (ISSRE’02) 
1071-9458/02 $17.00 © 2002 IEEE 
a  slave  thread  for  each  target  module.  In  addition,  each
slave,  is  associated  with  a  task  and  is  in  charge  of
upgrading  a  module.  Because  slaves  and  their  target
modules  can  concurrently  commit  or  abort  a  command
within their task contexts, the performance of an upgrade
transaction could be significantly improved.
Figure  8  depicts  the  sequence  of  a  transaction  in  a
concurrent upgrade. Through this transaction, two existing
modules,  M1  and  M2,  should  be  updated  and  a  new
module M3 should be added into an application program.
During the voting phase, two spawned slaves help the M1
and  M2  modules  reach  quiescent  state  and  transfer  their
state. If validation check is successful, each slave will vote
YES on behalf of the module. Thus, during the completion
phase,  the  software  upgrade  will  commit  the  whole
transaction  including  swap  of  the  implementation  within
the M1 and M2 module and addition of new M3 module.
As  barriers  are  introduced  to  synchronize  the  action,  it
allows the upgrader to order the sequence. Finally, all the
involved modules are started by the upgrader at the end of
the transaction.
Upgrader
M1
M2
M3
Start voting
prepared
   Time
transferred
Commit
transaction
completed
Start
serving
make a
preparation
wait
make a
preparation
wait
transfer state
wait
transfer state
wait
commit
replacement
wait
commit
replacement
wait
commit
addition
wait
start
start
start
Figure 8. Synchronization in a concurrent
upgrade process