中。如果设置了解锁时间，则启动一个协程进行超时处理 `go ks.expire()`.
再看向实现转账的函数的实现过程 `SendTransaction() -> wallet.SignTx() -> w.keystore.SignTx()`：
    func (s *PublicTransactionPoolAPI) SendTransaction(ctx context.Context, args SendTxArgs) (common.Hash, error) {
        account := accounts.Account{Address: args.From}
        wallet, err := s.b.AccountManager().Find(account)
        ......
        tx := args.toTransaction()
        ......
        signed, err := wallet.SignTx(account, tx, chainID)
        return submitTransaction(ctx, s.b, signed)
    }
    func (w *keystoreWallet) SignTx(account accounts.Account, tx *types.Transaction, chainID *big.Int) (*types.Transaction, error) {
        ......
        return w.keystore.SignTx(account, tx, chainID)
    }
    func (ks *KeyStore) SignTx(a accounts.Account, tx *types.Transaction, chainID *big.Int) (*types.Transaction, error) {
        // Look up the key to sign with and abort if it cannot be found
        ks.mu.RLock()
        defer ks.mu.RUnlock()
        unlockedKey, found := ks.unlocked[a.Address]
        if !found {
            return nil, ErrLocked
        }
        // Depending on the presence of the chain ID, sign with EIP155 or homestead
        if chainID != nil {
            return types.SignTx(tx, types.NewEIP155Signer(chainID), unlockedKey.PrivateKey)
        }
        return types.SignTx(tx, types.HomesteadSigner{}, unlockedKey.PrivateKey)
    }
可以看到，在 `w.keystore.SignTx()` 中，直接从 `ks.unlocked` 中取出对应的私钥。这也就意味着如果执行了
`unlockAccount()` 函数、没有超时的话，从 `ipc`、`rpc`调用 `SendTransaction()` 都会成功签名相关交易。
由于默认参数启动的 `Go-Ethereum` 设计上并没有对 `ipc`、`rpc`
接口添加相应的鉴权模式，也没有在上述的代码中对请求用户的身份进行判断，最终导致攻击者可以在用户解锁账号的时候完成转账操作，偷渡漏洞利用成功。
#### 2.2.2 攻击者和用户竞争转账的问题
由于用户解锁账户的目的是为了转账，所以存在用户和攻击者几乎同时发起了交易的情况，在这种情况下，攻击者是如何保证其攻击的成功率呢？
在攻击者账号[0x957cD4Ff9b3894FC78b5134A8DC72b032fFbC464](https://etherscan.io/txs?a=0x957cD4Ff9b3894FC78b5134A8DC72b032fFbC464)的交易记录中，交易[0x8ec46c3054434fe00155bb2d7e36d59f35d0ae1527aa5da8ec6721b800ec3aa2](https://etherscan.io/tx/0x8ec46c3054434fe00155bb2d7e36d59f35d0ae1527aa5da8ec6721b800ec3aa2)能够很好地解释该问题。
相较于目前主流的 `gasPrice` 维持在 `1 Gwei`，该笔交易的 `gasPrice` 达到了惊人的 `1,149,246 Gwei`。根据
`1.3节` 中介绍的以太坊交易流程可知：
  1. 在交易签名完成后，交易就会被存入交易缓存池(txpool)，交易会被进行校验。但是由于此时新的交易还没有打包进区块，所以用户和攻击者发起的交易都会存入交易缓存池并广播出去。
  2. 当某节点挖到新的区块时，会将交易从交易缓存池中按照 `gasPrice` 高低进行排序取出并打包。`gasPrice` 高的将会优先被打包进区块。由于攻击者的交易的 `gasPrice` 足够高，所以会被优先被打包进区块，而用户的交易将会由于余额不足导致失败。这是以太坊保证矿工利益最大化所设计的策略，也为攻击者攻击快速成功提供了便利。
也正是由于较高的 `gasPrice`,使得该攻击者在与其它攻击者的竞争中（有兴趣的可以看看上图红框下方两笔 `dropped Txns`）得到这笔
`巨款`。
### 2.3 蜜罐捕获数据
**该部分数据截止 2018/03/21**
在 `偷渡漏洞` 被曝光后，知道创宇404团队在已有的蜜罐数据中寻找到部分攻击的痕迹。
下图是 `2017/10/01` 到 `2018/03/21` 间蜜罐监控到的相关攻击情况：
被攻击端口主要是 `8545端口`，`8546`、`10332`、`8555`、`18082`、`8585`端口等也有少量扫描痕迹。
攻击来源IP主要集中在 `46.166.148.120/196` 和 `216.158.238.178/186/226` 上：
`46.166.148.120/196` 攻击者使用的探测 `payload` 主要是:
    {"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["0x1", false], "id":309900}
`216.158.238.178/186/226` 攻击者使用的探测 `payload` 主要是:
    {"id":0,"jsonrpc":"2.0","method":"eth_accounts"}
## 0x03 后偷渡时代的盗币方式
>
> 在偷渡漏洞被曝光后，攻击者和防御者都有所行动。根据我们蜜罐系统捕获的数据，在后偷渡时代，攻击的形式趋于多样化，利用的以太坊特性越来越多，攻击方式趋于完善。部分攻击甚至可以绕过针对偷渡漏洞的防御方式，所以在说这些攻击方式前，让我们从偷渡漏洞的防御修复方式开篇。
### 3.1 偷渡漏洞的已知的防范、修复方式
在参考链接 [10](https://github.com/ethereum/go-ethereum/issues/15953)、[19](https://paper.seebug.org/547/)、[20](https://mp.weixin.qq.com/s/Kk2lsoQ1679Gda56Ec-zJg) 中，关于偷渡漏洞的防范、修复方式有：
  * 使用 `personal.sendTransaction` 功能进行转账，而不是使用 `personal.unlockAccount` 和 `eth.sendTransaction` 进行转账。
  * 更改默认的 `RPC API` 端口、更改 `RPC API` 监听地址为内网、配置 `iptables` 限制对 `RPC API` 端口的访问、账户信息（keystore）不存放在节点上、转账使用 `web3` 的 `sendTransaction` 和 `sendRawTransaction` 发送私钥签名过的 `transaction`、私钥物理隔离（如冷钱包、手工抄写）或者高强度加密存储并保障密钥的安全
  * 关闭对外暴露的RPC端口，如果必须暴露在互联网，使用鉴权[链接地址](https://tokenmarket.net/blog/protecting-ethereum-json-rpc-api-with-password/)、借助防火墙等网络防护软件，封堵黑客攻击源IP、检查RPC日志、web接口日志、等待以太坊更新最新代码，使用修复了该漏洞的节点程序
但是实际的情况却是 `关闭对公网暴露的 RPC 接口` 、`使用 personal.sendTransaction()进行转账` 或
`节点上不存放账户信息(keystore)` 后，依然可能会被盗币。根据上文，模拟出如下两种情景：
**情景一** ：对于曾经被盗币，修复方案仅为：关闭对公网暴露的 `RPC`
接口，关闭后继续使用节点中相关账户或移除了账户信息(keystore)的节点，可能会受到 `Geth 交易缓存池的重放攻击` 和 `离线漏洞` 的攻击。
**情景二** ：对于暂时无法关闭对公网暴露的 `RPC` 接口，却使用 `personal.sendTransaction()`
安全转账的节点，可能会受到 `爆破账号密码` 的攻击。
我们也将会在 `3.2节 - 3.5节` 详细的说明这三种漏洞的攻击流程。
### 3.2 交易缓存池的重放攻击
> 对于曾经被盗币，修复方案仅为：关闭对公网暴露的 `RPC` 接口，关闭后继续使用节点中相关账户的节点，可能会受到该攻击
#### 3.2.1 发现经历
细心的读者也许会发现，在 `2.1节` 中，为了实现攻击者不停的发送转账请求的功能，笔者使用了 `while True` 循环，并且在 `geth`
终端中看到了多条成功签名的交易
`hash`。由于交易缓存池拥有一定的校验机制，所以除了第一笔交易[0x4ad68aafc59f18a11c0ea6e25588d296d52f04edd969d5674a82dfd4093634f6](https://ropsten.etherscan.io/tx/0x4ad68aafc59f18a11c0ea6e25588d296d52f04edd969d5674a82dfd4093634f6)外，剩下的交易应该因为账户余额不足而被移出交易缓存池。
但是在测试网络中却出现了截然不同的情况，在我们关闭本地的 `geth` 客户端后，应该被移出交易缓存池的交易在余额足够的情况下会再次出现并交易成功：
（为了避免该现象的出现，在 `2.1节` 中，可以在成功转账之后利用 `break` 终止相关的循环）
这个交易奇怪的地方在于：在账户余额不足的情况下，查找不到任何 `Pendding Transactions`：
当账户余额足够支付时，被移出交易缓存池的交易会重新出现，并且是 `Pendding` 状态。
在部分 `pendding` 的交易完成后，剩余的交易将会继续消失。
这也就意味着，如果攻击者能够在利用 `偷渡漏洞` 的过程中，在交易被打包进区块，账号状态发生改变前发送大量的交易信息，第一条交易会被立即实行，剩余的交易会在
`受害人账号余额` 大于 `转账金额+gas消耗的金额` 的时候继续交易，而且这个交易信息在大多数情况下不会被查到。
对于这个问题进行分析研究后，我们认为可能的原因是：`以太坊在同步交易缓存池的过程中可能因为网络波动、分布式的特点等原因，导致部分交易多次进入交易缓存池`。这也导致
`部分应该被移出交易缓存池的交易` 多次重复进入交易缓存池。
具体的攻击流程如下：
#### 3.2.2 本地复现过程
> 关于 3.2.1 节中出现的现象，笔者进行了多方面的猜测。最终在低版本的 geth
> 中模拟复现了该问题。但由于现实环境的复杂性和不可控性，并不能确定该模拟过程就是造成该现象的最终原因，故该本地复现流程仅供参考。
攻击复现环境位于私链中，私链挖矿难度设置为 `0x400000`，保证在挖出区块之前拥有足够的时间检查各节点的交易缓存池。`geth`的版本为
`1.5.0`。
被攻击者的节点A：通过 `geth --networkid 233 --nodiscover --verbosity 6 --ipcdisable
--datadir data0 --rpc --rpcaddr 0.0.0.0 console` 启动。
矿机节点B，负责挖矿： 通过 `geth --networkid 233 --nodiscover --verbosity 6 --ipcdisable
--datadir data0 --port 30304 --rpc --rpcport 8546 console` 启动并在终端输入
`miner.start(1)`，使用单线程进行挖矿。
存在问题的节点C：通过 `geth --networkid 233 --nodiscover --verbosity 6 --ipcdisable
--datadir data0 --port 30305 --rpc --rpcport 8547 console` 启动。
各节点启动后通过 `admin.nodeInfo` 和 `admin.addPeer()` 相互添加节点。
1.攻击者扫描到被攻击节点A开放了rpc端口，使用如下代码开始攻击：
    import time