title:Analysis of the HTTPS certificate ecosystem
author:Zakir Durumeric and
James Kasten and
Michael Bailey and
J. Alex Halderman
Analysis of the HTTPS Certiﬁcate Ecosystem∗
Zakir Durumeric, James Kasten, Michael Bailey, J. Alex Halderman
Department of Electrical Engineering and Computer Science
University of Michigan, Ann Arbor, MI 48109, USA
{zakir, jdkasten, mibailey, jhalderm}@umich.edu
ABSTRACT
We report the results of a large-scale measurement study of the
HTTPS certiﬁcate ecosystem—the public-key infrastructure that un-
derlies nearly all secure web communications. Using data collected
by performing 110 Internet-wide scans over 14 months, we gain
detailed and temporally ﬁne-grained visibility into this otherwise
opaque area of security-critical infrastructure. We investigate the
trust relationships among root authorities, intermediate authorities,
and the leaf certiﬁcates used by web servers, ultimately identify-
ing and classifying more than 1,800 entities that are able to issue
certiﬁcates vouching for the identity of any website. We uncover
practices that may put the security of the ecosystem at risk, and we
identify frequent conﬁguration problems that lead to user-facing
errors and potential vulnerabilities. We conclude with lessons and
recommendations to ensure the long-term health and security of the
certiﬁcate ecosystem.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: [Network Proto-
cols]; C.2.3 [Computer-Communication Networks]: [Network
Operations]; E.3 [Data Encryption]: [Public key cryptosystems,
Standards]
Keywords
TLS; SSL; HTTPS; public-key infrastructure; X.509; certiﬁcates;
security; measurement; Internet-wide scanning
1.
INTRODUCTION
Nearly all secure web communication takes place over HTTPS
including online banking, e-mail, and e-commerce transactions.
HTTPS is based on the TLS encrypted transport protocol and a
∗Permission to make digital or hard copies of part or all of this work
is granted without fee provided that copies are not distributed for
proﬁt and that copies bear this notice and the full citation on the
ﬁrst page. Copyright is held by the authors. This more permissive
statement supersedes the ACM-mandated statement below, which
has no effect. Please join us in supporting open access publication.
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
IMC’13, October 23–25, 2013, Barcelona, Spain.
ACM 978-1-4503-1953-9/13/10.
http://dx.doi.org/10.1145/2504730.2504755.
supporting public key infrastructure (PKI) composed of thousands
of certiﬁcate authorities (CAs)—entities that are trusted by users’
browsers to vouch for the identity of web servers. CAs do this by
signing digital certiﬁcates that associate a site’s public key with its
domain name. We place our full trust in each of these CAs—in
general, every CA has the ability to sign trusted certiﬁcates for any
domain, and so the entire PKI is only as secure as the weakest CA.
Nevertheless, this complex distributed infrastructure is strikingly
opaque. There is no published list of signed website certiﬁcates
or even of the organizations that have trusted signing ability. In
this work, we attempt to rectify this and shed light on the HTTPS
certiﬁcate ecosystem.
Our study is founded on what is, to the best of our knowledge,
the most comprehensive dataset of the HTTPS ecosystem to date.
Between June 2012 and August 2013, we completed 110 exhaustive
scans of the public IPv4 address space in which we performed TLS
handshakes with all hosts publicly serving HTTPS on port 443. Over
the course of 14 months, we completed upwards of 400 billion SYN
probes and 2.55 billion TLS handshakes, collecting and parsing
42.4 million unique X.509 certiﬁcates from 109 million hosts. On
average, each of our scans included 178% more TLS hosts and
115% more certiﬁcates than were collected in earlier studies of the
certiﬁcate authority ecosystem [14], and we collected 736% more
unique certiﬁcates in total than any prior study of HTTPS [16].
Using this dataset, we investigate two classes of important security
questions, which relate to the behavior of CAs and to site certiﬁcates.
Certiﬁcate Authorities We analyze the organizations involved
in the HTTPS ecosystem and identify 1,832 CA certiﬁcates, which
are controlled by 683 organizations including religious institutions,
museums, libraries, and more than 130 corporations and ﬁnancial
institutions. We ﬁnd that more than 80% of the organizations with
a signing certiﬁcate are not commercial certiﬁcate authorities and
further investigate the paths through which organizations are acquir-
ing signing certiﬁcates. We investigate the constraints on these CA
certiﬁcates and ﬁnd that only 7 CA certiﬁcates use name constraints,
and more than 40% of CA certiﬁcates have no path length constraint.
We identify two sets of misissued CA certiﬁcates and discuss their
impact on the security of the ecosystem.
Site Certiﬁcates We analyze leaf certiﬁcates used by websites
and ﬁnd that the distribution among authorities is heavily skewed
towards a handful of large authorities, with three organizations con-
trolling 75% of all trusted certiﬁcates. Disturbingly, we ﬁnd that the
compromise of the private key used by one particular intermediate
certiﬁcate would require 26% of HTTPS websites to immediately
obtain new certiﬁcates. We provide an up-to-date analysis on the
keys and signatures being used to sign leaf certiﬁcates and ﬁnd
that half of trusted leaf certiﬁcates contain an inadequately secure
1024-bit RSA key in their trust chain and that CAs were continuing
to sign certiﬁcates using MD5 as late as April 2013. We ﬁnd that
5% of trusted certiﬁcates are for locally scoped names or private
IP address space (and therefore do not protect against man-in-the-
middle attacks) and that 12.7% of hosts serving certiﬁcates signed
by trusted CAs are serving them in a manner that will cause errors
in one or more modern web browsers.
Lastly, we examine adoption trends in the HTTPS ecosystem from
the past year, discuss anomalies we noticed during our analysis, and
provide high-level lessons and potential paths forward to improve the
security of the HTTPS ecosystem security. We ultimately hope that
this global perspective and our analysis will inform future decisions
within the security community as we work towards a more secure
PKI. In order to facilitate future research on this critical ecosystem,
we are releasing our dataset to the research community, including 42
million certiﬁcates and historical records of the state of 109 million
HTTPS server IP addresses. This data and up-to-date metrics can
be found at https://httpsecosystem.org/.
2. BACKGROUND
In this section, we present a brief review of TLS, digital certiﬁ-
cates and their respective roles within the HTTPS ecosystem. We
recommend RFC 5280 [11] for a more in-depth overview of the
TLS public key infrastructure.
Transport Layer Security (TLS) Transport Layer Security (TLS)
and its predecessor Secure Sockets Layer (SSL) are cryptographic
protocols that operate below the application layer and provide end-to-
end cryptographic security for a large number of popular application
protocols, including HTTPS, IMAPS, SMTP, and XMPP [12]. In the
case of HTTPS, when a client ﬁrst connects, the client and server
complete a TLS handshake during which the server presents an
X.509 digital certiﬁcate, which is used to help identify and authenti-
cate the server to the client. This certiﬁcate includes the identity of
the server (e.g. website domain), a temporal validity period, a public
key, and a digital signature provided by a trusted third party. The
client checks that the certiﬁcate’s identity matches the requested
domain name, that the certiﬁcate is within its validity period, and
that the digital signature of the certiﬁcate is valid. The certiﬁcate’s
public key is then used by the client to share a session secret with
the server in order to establish an end-to-end cryptographic channel.
Certiﬁcate Authorities Certiﬁcate authorities (CAs) are trusted
organizations that issue digital certiﬁcates. These organizations are
responsible for validating the identity of the websites for which they
provide a digital certiﬁcate. They cryptographically vouch for the
identity of a website by digitally signing the website’s leaf certiﬁ-
cate using a browser-trusted signing certiﬁcate. Modern operating
systems and web browsers ship with a set of these trusted signing
certiﬁcates, which we refer to as root certiﬁcates. In all but a small
handful of cases, all CAs are trusted unequivocally: a trusted CA
can sign for any website. For example, a certiﬁcate for google.com
signed by a German University is technically no more or less valid
than a certiﬁcate signed by Google Inc., if both organizations control
a trusted signing certiﬁcate.
The set of root authorities is publicly known because it is included
with the web browser or operating system. However, root authorities
frequently sign intermediate certiﬁcates, which generally retain all
of the signing privileges of root certiﬁcates. This practice not only
allows root authorities to store their signing keys ofﬂine during daily
operation, but also allows authorities to delegate their signing ability
to other organizations. When a server presents a leaf certiﬁcate, it
must include the chain of authorities linking the leaf certiﬁcate to a
trusted root certiﬁcate. This bundle of certiﬁcates is referred to as a
certiﬁcate chain. We refer to certiﬁcates that have a valid chain back
to a trusted root authority as trusted certiﬁcates. It is important to
note that while intermediate authorities provide additional ﬂexibility,
the set of intermediate authorities is not publicly known until they
are found in the wild—we ultimately do not know the identity of
the organizations that can sign any browser-trusted certiﬁcate.
3. RELATED WORK
Several groups have previously studied HTTPS deployment and
the certiﬁcate ecosystem. Most similar to our work, Holz et al.
published a study in 2011 that focused on the dynamics of leaf cer-
tiﬁcates and the distribution of certiﬁcates among IP addresses, and
attempted to roughly classify the overall quality of served certiﬁ-
cates. The study was based on regular scans of the Alexa Top 1 Mil-
lion Domains [1] and through passive monitoring of TLS trafﬁc on
the Munich Scientiﬁc Research Network [17]. The group collected
an average 212,000 certiﬁcates per scan and a total 554,292 unique
certiﬁcates between October 2009 and March 2011, approximately
1.3% of the number we have seen in the past year. Their passive
experiments resulted in an average of 130,000 unique certiﬁcates.
The aggregate size across both datasets was not speciﬁed.
We are aware of two groups that have performed scans of the
IPv4 address space in order to analyze aspects of the certiﬁcate
ecosystem. In 2010, the Electronic Frontier Foundation (EFF) and
iSEC partners performed a scan over a three-month period as part
of their SSL Observatory Project [14]. The project focused on
identifying which organizations controlled a valid signing certiﬁcate.
The EFF provided the ﬁrst recent glimpse into the HTTPS certiﬁcate
ecosystem, and while their study was never formally published,
we owe the inspiration for our work to their fascinating dataset.
Heninger et al. later performed a scan of the IPv4 address space in
2012 as part of a global study on cryptographic keys [16]. Similarly,
Yilek et al. performed daily scans of 50,000 TLS servers over several
months to track the Debian weak key bug [35]. We follow up on the
results provided in these earlier works, adding another data point in
the study of Debian weak keys and other poorly generated keys.
Most recently, Akhawe et al. published a study focusing on the
usability of TLS warnings presented by web servers, deriving the
logic used by web browsers to validate certiﬁcates, and making
recommendations on how to better handle these error conditions [4].
Akhawe et al. also discuss differences in how OpenSSL and Mozilla
NSS validate certiﬁcates, which we arrived at simultaneously.
Our study differs from previous work in the methodology we
applied, the scope of our dataset, and the focus of our questions.
While Holz et al. explored several similar questions on the dynamics
of leaf certiﬁcates, the dataset we consider is more than 40 times
larger, which we believe provides a more comprehensive view of
the certiﬁcate ecosystem. The certiﬁcates found by scanning the
Alexa Top 1 Million Domains provide one perspective on the CA
ecosystem that is weighted towards frequently accessed websites.
However, many of the questions we address are dependent on a more
comprehensive viewpoint. The CA ecosystem is equally dependent
on all certiﬁcate authorities and, as such, we are interested in not
only the most popular sites (which are likely to be well conﬁgured)
but also the potentially less visible certiﬁcates used by smaller sites
and network devices. This difference is clearly visible in the number
of CA certiﬁcates seen among the Alexa Top 1 Million sites. If our
study had been founded only on these domains, we would have seen
less than 30% of the trusted certiﬁcate authorities we uncovered,
providing us with a less accurate perspective on the state of the
ecosystem. Similarly, we build on many topics touched on by the
EFF study, but we present updated and revised results, ﬁnding more
than 3.5 times the number of hosts serving HTTPS than were seen
three years ago and a changed ecosystem. Ultimately, we consider a
different set of questions that are more focused on the dynamics of
CAs and the certiﬁcates they sign, using a dataset that we believe
provides a more complete picture than any previous study.
4. METHODOLOGY
Our data collection (which is ongoing as this paper goes to press)
involves repeatedly surveying the certiﬁcate ecosystem through
comprehensive scans of the IPv4 address space conducted at regular
intervals. In this section, we describe how we perform these scans,
collect and validate X.509 certiﬁcates, and ﬁnally, analyze our data.
Each scan consists of three stages: (1) discovering hosts with
port 443 (HTTPS) open by enumerating the public address space,
(2) completing a TLS handshake with responsive addresses and
collecting the presented certiﬁcate chains, and (3) performing cer-
tiﬁcate parsing and validation. The scan process requires 18 hours
to complete, including ﬂushing all changes to the backend database,
and is implemented in approximately 13,000 SLOC of C. The scans
in this work were conducted using the regular ofﬁce network at the
University of Michigan Computer Science and Engineering division,
from a single Dell Precision workstation with a quad-core Intel
Xeon E5520 processor and 24 GB of memory. The access layer of
the building runs at 10 Gbps and the building uplink to the rest of
the campus is an aggregated 2 × 10 gigabit port channel.
4.1 Host Discovery
In the ﬁrst stage of each scan, we ﬁnd hosts that accept TCP
connections on port 443 (HTTPS) by performing a single-packet
TCP SYN scan of the public IPv4 address space using ZMap [13].
We choose to utilize ZMap based on its performance characteristics—
ZMap is capable of completing a single packet scan of the IPv4
address space on a single port in approximately 45 minutes. Using
ZMap, we send a single TCP SYN packet to every public IPv4
address and add hosts that respond with a valid SYN-ACK packet
to an in-memory Redis queue for further processing. Our previous
work ﬁnds an approximate 2% packet drop rate when performing
single packet scans on our network [13]. In order to reduce the
impact of packet loss on our long-term HTTPS results, we also
consider hosts that successfully completed a TLS handshake in the
last 30 days for follow-up along with the hosts found during the
TCP SYN scan.
4.2 Collecting TLS Certiﬁcates
In the second processing stage, we complete a TLS handshake
with the hosts we identiﬁed in the ﬁrst stage and retrieve the pre-
sented certiﬁcate chain. We perform these TLS handshakes in an
event-driven manner using libevent and OpenSSL [24, 33]. Specif-
ically, we utilize libevent’s OpenSSL-based bufferevents, which
allow us to deﬁne a callback that is invoked after a successful
OpenSSL TLS negotiation. The retrieval process runs in paral-
lel to the TCP SYN scan and maintains 2,500 concurrent TLS
connections.
In order to emulate browser validation, we designed a custom
validation process using the root browser stores from Apple Mac OS
10.8.2, Windows 7, and Mozilla Firefox. We ﬁnd that a large number
of web servers are misconﬁgured and present incomplete, misor-
dered, or invalid certiﬁcate chains. OpenSSL validates certiﬁcates in
a more stringent manner than most web browsers, including Mozilla
Firefox and Google Chrome, which utilize Mozilla NSS [27] to
perform certiﬁcate validation. To simulate the behavior of modern
web browsers, we take the following corrective steps:
intermediate certiﬁcates are provided, but are in the incorrect
order.
2. We add previously seen intermediate authorities into OpenSSL’s