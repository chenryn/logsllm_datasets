# Analysis of the HTTPS Certificate Ecosystem

**Authors:**
- Zakir Durumeric
- James Kasten
- Michael Bailey
- J. Alex Halderman

**Affiliation:**
Department of Electrical Engineering and Computer Science, University of Michigan, Ann Arbor, MI 48109, USA

**Contact:**
- {zakir, jdkasten, mibailey, jhalderm}@umich.edu

## Abstract
We present the results of a large-scale measurement study of the HTTPS certificate ecosystem, which underpins nearly all secure web communications. Using data from 110 Internet-wide scans conducted over 14 months, we provide detailed and temporally fine-grained insights into this critical but often opaque security infrastructure. Our investigation examines the trust relationships among root authorities, intermediate authorities, and leaf certificates used by web servers. We identify and classify over 1,800 entities capable of issuing certificates that vouch for the identity of any website. We uncover practices that may compromise the security of the ecosystem and highlight frequent configuration issues leading to user-facing errors and potential vulnerabilities. We conclude with recommendations to ensure the long-term health and security of the certificate ecosystem.

## Categories and Subject Descriptors
- C.2.2 [Computer-Communication Networks]: Network Protocols
- C.2.3 [Computer-Communication Networks]: Network Operations
- E.3 [Data Encryption]: Public key cryptosystems, Standards

## Keywords
TLS, SSL, HTTPS, public-key infrastructure, X.5.09, certificates, security, measurement, Internet-wide scanning

## 1. Introduction
Nearly all secure web communication occurs over HTTPS, including online banking, email, and e-commerce transactions. HTTPS is based on the TLS encrypted transport protocol and a public key infrastructure (PKI) comprising thousands of certificate authorities (CAs). These CAs are trusted by users' browsers to vouch for the identity of web servers by signing digital certificates that associate a site's public key with its domain name. The entire PKI is only as secure as its weakest CA, yet this complex distributed infrastructure remains largely opaque. There is no comprehensive list of signed website certificates or trusted signing organizations. This study aims to shed light on the HTTPS certificate ecosystem.

Our dataset, collected between June 2012 and August 2013, includes 110 exhaustive scans of the public IPv4 address space, performing TLS handshakes with all hosts serving HTTPS on port 443. Over 14 months, we completed approximately 400 billion SYN probes and 2.55 billion TLS handshakes, collecting and parsing 42.4 million unique X.509 certificates from 109 million hosts. Each scan included 178% more TLS hosts and 115% more certificates than previous studies, and we collected 736% more unique certificates in total.

Using this dataset, we investigate two key areas:
1. **Certificate Authorities (CAs):** We analyze the organizations involved in the HTTPS ecosystem, identifying 1,832 CA certificates controlled by 683 organizations, including religious institutions, museums, libraries, and over 130 corporations and financial institutions. More than 80% of these organizations are not commercial CAs. We also examine constraints on CA certificates and identify misissued CA certificates.
2. **Site Certificates:** We analyze leaf certificates used by websites, finding that three organizations control 75% of all trusted certificates. We highlight the risk of compromising a single intermediate certificate, which could affect 26% of HTTPS websites. We also find that half of trusted leaf certificates contain an inadequately secure 1024-bit RSA key, and some CAs were still using MD5 signatures as late as April 2013. Additionally, 5% of trusted certificates are for locally scoped names or private IP addresses, and 12.7% of hosts serving trusted certificates do so in a manner that causes errors in modern browsers.

We also examine adoption trends, discuss anomalies, and provide high-level lessons and recommendations to improve the security of the HTTPS ecosystem. To facilitate future research, we are releasing our dataset, which includes 42 million certificates and historical records of 109 million HTTPS server IP addresses. The data and up-to-date metrics can be found at https://httpsecosystem.org/.

## 2. Background
### 2.1 Transport Layer Security (TLS)
Transport Layer Security (TLS) and its predecessor Secure Sockets Layer (SSL) are cryptographic protocols that operate below the application layer, providing end-to-end cryptographic security for various application protocols, including HTTPS, IMAPS, SMTP, and XMPP. In the case of HTTPS, when a client connects to a server, they complete a TLS handshake. During this process, the server presents an X.509 digital certificate, which helps identify and authenticate the server to the client. The certificate includes the server's identity (e.g., website domain), a validity period, a public key, and a digital signature provided by a trusted third party. The client verifies the certificate's identity, validity period, and digital signature, and uses the public key to establish an end-to-end cryptographic channel.

### 2.2 Certificate Authorities (CAs)
Certificate authorities (CAs) are trusted organizations that issue digital certificates. They validate the identity of websites and cryptographically vouch for their identity by digitally signing the website's leaf certificate using a browser-trusted signing certificate. Modern operating systems and web browsers include a set of trusted signing certificates, known as root certificates. Generally, all CAs are trusted unequivocally, meaning a trusted CA can sign for any website. For example, a certificate for google.com signed by a German university is technically as valid as one signed by Google Inc., if both control a trusted signing certificate.

Root authorities frequently sign intermediate certificates, which retain the signing privileges of root certificates. This practice allows root authorities to store their signing keys offline and delegate signing ability to other organizations. When a server presents a leaf certificate, it must include a chain of authorities linking the leaf certificate to a trusted root certificate. This bundle is referred to as a certificate chain. Certificates with a valid chain back to a trusted root authority are considered trusted. While intermediate authorities provide flexibility, their identities are not publicly known until discovered in the wild.

## 3. Related Work
Several groups have previously studied HTTPS deployment and the certificate ecosystem. Holz et al. (2011) focused on the dynamics of leaf certificates and their distribution among IP addresses, classifying the overall quality of served certificates. Their study was based on regular scans of the Alexa Top 1 Million Domains and passive monitoring of TLS traffic on the Munich Scientific Research Network. They collected an average of 212,000 certificates per scan and 554,292 unique certificates between October 2009 and March 2011, approximately 1.3% of the number we have seen in the past year.

Other groups have performed scans of the IPv4 address space to analyze the certificate ecosystem. The Electronic Frontier Foundation (EFF) and iSEC partners conducted a scan over three months as part of the SSL Observatory Project, focusing on identifying organizations with valid signing certificates. Heninger et al. (2012) and Yilek et al. (2012) also performed scans to track cryptographic keys and the Debian weak key bug, respectively. Akhawe et al. (2013) focused on the usability of TLS warnings and made recommendations for better handling error conditions.

Our study differs from previous work in methodology, scope, and focus. While Holz et al. explored similar questions, our dataset is more than 40 times larger, providing a more comprehensive view of the certificate ecosystem. If our study had been limited to the Alexa Top 1 Million sites, we would have seen less than 30% of the trusted certificate authorities, giving a less accurate perspective. We build on many topics touched on by the EFF study, presenting updated and revised results, and consider a different set of questions focused on the dynamics of CAs and the certificates they sign.

## 4. Methodology
Our data collection involves repeatedly surveying the certificate ecosystem through comprehensive scans of the IPv4 address space conducted at regular intervals. Each scan consists of three stages:
1. **Host Discovery:** We use ZMap to perform a single-packet TCP SYN scan of the public IPv4 address space to find hosts with port 443 (HTTPS) open.
2. **Collecting TLS Certificates:** We complete a TLS handshake with responsive addresses and retrieve the presented certificate chains.
3. **Certificate Parsing and Validation:** We parse and validate the collected certificates using custom validation processes emulating browser behavior.

### 4.1 Host Discovery
In the first stage, we use ZMap to perform a single-packet TCP SYN scan of the public IPv4 address space. ZMap completes a single packet scan of the IPv4 address space in approximately 45 minutes. We send a single TCP SYN packet to every public IPv4 address and add hosts that respond with a valid SYN-ACK packet to an in-memory Redis queue for further processing. To reduce the impact of packet loss, we also consider hosts that successfully completed a TLS handshake in the last 30 days.

### 4.2 Collecting TLS Certificates
In the second stage, we complete a TLS handshake with the identified hosts and retrieve the presented certificate chains. We use libevent and OpenSSL to perform these handshakes in an event-driven manner, maintaining 2,500 concurrent TLS connections. To emulate browser validation, we use root browser stores from Apple Mac OS 10.8.2, Windows 7, and Mozilla Firefox. We take corrective steps to handle misconfigured servers, such as reordering intermediate certificates and adding previously seen intermediate authorities into OpenSSL’s trusted store.