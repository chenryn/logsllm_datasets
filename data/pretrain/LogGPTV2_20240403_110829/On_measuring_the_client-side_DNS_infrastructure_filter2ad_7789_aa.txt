# Measuring the Client-Side DNS Infrastructure

## Authors
- Kyle Schomp†
- Tom Callahan†
- Michael Rabinovich†
- Mark Allman‡

† Case Western Reserve University, Cleveland, OH, USA  
{kyle.schomp, tom.callahan, michael.rabinovich}@case.edu  
‡ International Computer Science Institute, Berkeley, CA, USA  
PI: EMAIL

## Abstract
The Domain Name System (DNS) is a critical component of the Internet infrastructure, enabling users to interact with websites using human-readable names and providing a foundation for transparent client request distribution among servers in web platforms such as content delivery networks. This paper presents methodologies for efficiently discovering the complex client-side DNS infrastructure and develops measurement techniques to isolate the behavior of distinct actors within this infrastructure. Using these strategies, we study various aspects of the client-side DNS infrastructure and its behavior concerning caching, both in aggregate and separately for different actors.

## Categories and Subject Descriptors
- C.2 [Computer-Communication Networks]: Miscellaneous
- C.4 [Performance of Systems]: Measurement Techniques

## Keywords
- Internet Measurement
- Domain Name System (DNS)

## 1. Introduction
The DNS plays a foundational role in today's Internet. Initially, it provided the mapping between human-readable names (e.g., "amazon.com") and network-level addresses. Over time, it has evolved to form the basis for building scalable and agile web platforms. By dynamically changing name-to-address bindings and providing different bindings to different clients, websites can distribute client load among replicated web servers or redirect requests to content delivery networks (CDNs). CDNs and similar platforms can direct incoming requests to specific nodes within the platform.

With the crucial role of DNS, the complexity of the DNS infrastructure—especially the client-side query-resolving aspect—has increased dramatically. Address lookups are no longer a simple matter of end devices querying a local DNS resolver, which in turn queries authoritative nameservers on behalf of clients. Instead, facilitated by the stateless and connectionless nature of the protocol, DNS has developed into a complex ecosystem often involving several layers of shared resolvers that can peer with additional resolvers. The path a DNS query takes through this infrastructure is often complex and hidden, making it difficult to understand the behavior of the resolving infrastructure and to attribute responsibility for distinct behaviors to individual actors.

This study addresses these challenges and makes the following contributions:
1. We develop a set of methodologies for efficiently discovering the client-side DNS infrastructure.
2. We develop measurement techniques to isolate the behavior of the actors within the system, some of whom cannot be accessed directly.
3. We apply our methodologies and strategies to assess various aspects of the client-side DNS infrastructure and its behavior with respect to caching, both in aggregate and separately for different actors.

Our key observations from this assessment include:
- Doubling previous estimates of the number of open resolvers on the Internet from 15 million to 32 million.
- Evidence of wide adoption of complex resolution topologies, including large shared pools of resolvers at certain layers in the infrastructure.
- Frequent long-distance travel of DNS queries within the resolving infrastructure, both geographically and in terms of network delay. We find that 20% of open resolvers experience at least 100 milliseconds of delay before their queries leave the resolution infrastructure.
- The first assessment of how various actors treat the time-to-live (TTL) settings given by authoritative nameservers to set the behavior of DNS caches. Despite being a simple notion, different actors handle TTL differently, leading to distortion before reaching the original requesting client. Only 19% of all open resolvers consistently return correct TTL values to all our probes.
- An assessment of the time an unused record stays in the cache of various actors within the resolving infrastructure, determining whether TTL or cache capacity causes eviction. We find little evidence of a general capacity limitation problem.

## 2. Related Work
Our overarching methodology involves actively discovering and characterizing DNS resolvers that will answer queries from arbitrary hosts throughout the Internet. This allows us to determine how the client-side DNS infrastructure behaves with regard to a wide range of test queries. The closest related work is [8], which scans open resolvers to assess answer rewriting occurring on DNS paths. That work also contributes the idea of building a mapping between resolvers found by probing Internet hosts and the resolvers that ultimately contact an authoritative DNS server. We build upon this technique to attribute DNS behavior to specific actors and extend the probing methodology to effectively discover resolver pools and examine many resolver characteristics not discussed in that paper.

Efficiently scanning the IPv4 address space for service discovery while avoiding complaints is discussed in [13]. While [13] explores reducing the burden of probing, we focus on reducing the number of probes required without losing insight. Our methodological contributions include probing strategies that increase the discovery rate, identify pools of recursive resolvers, and soundly assess the specific behavior of various actors in the system.

We also consider this work related to [2], which performs DNS lookups from several vantage points to compare performance among various local resolvers and public DNS services. [2] finds that ISP-provided resolvers often outperform public DNS services in query latency. Another performance-centric study is [14], which characterizes the difference in observed DNS performance for common DNS names from a variety of vantage points. Additionally, [14] reports on the behavior of the DNS time-to-live, which we also explore in more depth in this paper. Finally, [22] reports on several facets of DNS servers, including security configuration and support for DNS protocol components such as DNSSEC [5].

Several studies [10, 18, 23] show that information gleaned from DNS resolvers may be used to measure various aspects of the Internet, such as the popularity of websites and inter-host delays. Our work supports these efforts by developing effective discovery strategies and showing the diversity of behavior in differing implementations. Several prior studies consider the number of open resolvers on the Internet [13, 22], the distance between clients and their resolvers [4, 11, 15, 20], and TTL violations [6, 17, 21]. We contrast our findings with these studies throughout this paper.

## 3. Client-Side DNS Infrastructure
The architecture of the client-side DNS infrastructure varies across providers. The actors can be loosely grouped into three roles:
1. **Ingress Servers**: These receive DNS queries directly from user devices.
2. **Egress Servers**: These communicate directly with authoritative DNS servers (ADNS), which maintain hostname-to-IP address mappings for their respective domains.
3. **Hidden Servers**: These act as intermediaries between the ingress and egress but are not exposed to either clients requesting mappings or authoritative servers providing mappings.

To avoid confusion, we use the following terminology to describe the various components of the client-side DNS infrastructure:
- **Origin Devices**: User devices or the sources of our DNS requests sent to probe the client-side DNS infrastructure.
- **ODNSes (Open DNS)**: Ingress servers that accept requests from any host.
- **RDNSes (Recursive DNS Resolvers)**: Egress resolvers that communicate directly with authoritative DNS servers.
- **FDNSes (Forwarding ODNS)**: ODNSes that do not resolve a query but forward the request to another resolver. FDNS servers are a subset of the ODNS servers.
- **RDNSdes (Direct RDNS)**: RDNSes that are also ODNSes, acting as both ingress and egress servers.
- **RDNSies (Indirect RDNS)**: RDNSes observed at the authoritative DNS server resolving queries on behalf of an FDNS.
- **HDNSes (Hidden DNS)**: Servers operating between FDNSes and RDNSes, invisible externally. Their existence is confirmed by DNS operators, and they may impact our results.

A typical example path through the DNS-related devices starts with a client computer (Origin) sending a DNS request to a home routing device (FDNS), which forwards the request through a chain of zero or more HDNSes and ultimately to an RDNSi. The RDNSi sends the request to the appropriate ADNS. Note that the RDNSi may cooperate with other RDNSies, and subsequent requests from the same FDNS may be handled by a different RDNSi. We call such structures "RDNS pools" and discuss them in more detail in §6.

## 4. Methodology Overview
In this section, we outline our general methodology and datasets. The specific methodology for each of our experiments is described in subsequent sections. Our measurements cover only a fraction of the Internet, so we must consider bias, specifically the degree to which the DNS infrastructure we discover and assess is representative of the broader Internet. We defer this question to §8 after further developing experiments that can address it.

### Non-Interference with Normal Operation
While investigating the various components of the DNS ecosystem, we use our registered domain. Our probing rates are limited to ensure we do not interfere with normal operation. Although some of our techniques involve cache injection, all DNS requests are for subdomains of our own domain, and we do not interfere with any actual name-to-address bindings in use.

### Discovering DNS Infrastructure
To examine the client-side DNS infrastructure, we need an efficient method for finding both ODNSes and RDNSes. Many components have policy restrictions preventing the acceptance of DNS requests from arbitrary hosts. Our basic discovery technique extends the process described in [8]. We registered a domain name and deployed an ADNS for this domain. Leveraging approximately 100 PlanetLab [7] nodes as origins, we randomly probe the IP address space with DNS requests for various hostnames within our domain. By embedding the probed IP address in the hostname request and observing the queries arrive at our ADNS, we collect the IP addresses willing to handle our probes—thus discovering ODNSes. The IP addresses from which the queries ultimately arrive at our ADNS illuminate the set of RDNSes. Since the ADNS has the addresses of both the RDNS and ODNS, we can associate FDNSes with the RDNSes they use for DNS resolution. Thus, we can elicit a response from an RDNS that will not respond to direct probes by indirectly probing via the FDNS.

### Attribution of Behavior
When measuring DNS behavior, it is often necessary to identify the actor responsible for the behavior, such as when a violation of the DNS protocol is detected. A key contribution of this paper is measurement techniques to isolate FDNS behavior from RDNS and HDNS behavior. Through cache injection on FDNSes, to which we found a sizable fraction of FDNSes are susceptible, we short-circuit HDNS and RDNS from processing a measurement probe. Therefore, any artifacts are the sole result of the FDNS. Similarly, we develop a technique of coordinated probing through two or more FDNSes to determine the behavior of a shared RDNS in near isolation from FDNS behavior. We validate the latter technique using the RDNSdies—which we can probe both through an FDNS and directly—as ground truth of RDNS behavior. Estimating from our experiments, over 77% of RDNSies will not respond to direct DNS requests from external hosts and are assumed hidden from an outside observer; despite this, our technique provides the ability to assess their behavior.

### ODNS Lifetimes
During our measurements, we find that ODNSes are often short-lived, with around 40% becoming unreachable within one day (see §5.1.1). Since the duration of our experiments is typically longer than one day, we rediscover the resolvers anew for each new experiment. Hence, techniques for quick rediscovery are important. We describe these techniques below and use them to collect different datasets for different experiments, as summarized in Table 1. Our datasets are publicly available [19].

## 5. Methodology Details
We first turn our attention to discovering various components of the client-side DNS infrastructure. To facilitate our exploration of discovery methodologies, we use two datasets. The first dataset is from the S2 scan in Table 1 and represents the probing of 255M unique random IP addresses using 267M DNS requests from 7/3/2012 to 8/3/2012. Our S2 scan discovered 1.9M ODNSes and 73K RDNSes. The second dataset is from the S3 scan in Table 1 and was collected between 8/5/2012 and 8/21/2012 using a methodology based on completely scanning random /24 IP address blocks. This scan represents a probing of 465K random /24 address blocks—11.9M IP addresses—via 121M DNS requests. The S3 dataset includes 841K ODNSes and 44K RDNSes. The number of probes exceeds the number of IP addresses because some ODNSes use RDNS pools, which we attempt to discover through repeated probes to ODNSes (see §5.2 for details).

ODNSes appear to be mostly home network devices. During the S1 scan of random IP addresses, we gather detailed information about roughly 1.09M ODNSes. We find that 78% are likely home network devices, as indicated by the presence of RomPager, basic authentication realms, and other criteria (Table 2).