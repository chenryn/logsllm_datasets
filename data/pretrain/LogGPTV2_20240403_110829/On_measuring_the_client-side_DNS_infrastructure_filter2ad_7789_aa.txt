title:On measuring the client-side DNS infrastructure
author:Kyle Schomp and
Tom Callahan and
Michael Rabinovich and
Mark Allman
On Measuring the Client-Side DNS Infrastructure
Kyle Schomp†, Tom Callahan†, Michael Rabinovich†, Mark Allman‡
†Case Western Reserve University, Cleveland, OH, USA
{kyle.schomp,tom.callahan,michael.rabinovich}@case.edu
‡International Computer Science Institute, Berkeley, CA, USA
PI:EMAIL
ABSTRACT
The Domain Name System (DNS) is a critical component of the In-
ternet infrastructure. It allows users to interact with Web sites using
human-readable names and provides a foundation for transparent
client request distribution among servers in Web platforms, such as
content delivery networks. In this paper, we present methodologies
for efﬁciently discovering the complex client-side DNS infrastruc-
ture. We further develop measurement techniques for isolating the
behavior of the distinct actors in the infrastructure. Using these
strategies, we study various aspects of the client-side DNS infras-
tructure and its behavior with respect to caching, both in aggregate
and separately for different actors.
Categories and Subject Descriptors
C.2 [Computer-Communication Networks]: Miscellaneous; C.4
[Performance of Systems]: Measurement Techniques
Keywords
Internet Measurement; Domain Name System (DNS)
1.
INTRODUCTION
DNS plays a foundational role in today’s Internet. From its ini-
tial function of providing the mapping between human-readable
names (e.g., “amazon.com”) and obtuse network-level addresses,
it evolved to form a basis for building scalable and agile Web plat-
forms.
In particular, by changing name-to-address bindings dy-
namically and providing different bindings to different clients, Web
sites can transparently distribute client load among replicated Web
servers or redirect client requests from their own servers to content
delivery networks (CDNs), while CDNs and similar platforms can
direct incoming requests to speciﬁc nodes in the platform.
With the crucial role DNS plays, the complexity of the DNS
infrastructure—especially the client-side query-resolving aspect—
has increased dramatically. No longer are address lookups a sim-
ple matter of end devices querying a local DNS resolver, which in
turn queries authoritative nameservers on clients’ behalf. Rather,
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
IMC’13, October 23–25, 2013, Barcelona, Spain.
Copyright 2013 ACM 978-1-4503-1953-9/13/10 ...$15.00.
http://dx.doi.org/10.1145/2504730.2504734 .
facilitated by the simplicity of the stateless and connectionless pro-
tocol, DNS has developed into a complex ecosystem often involv-
ing several layers of shared resolvers which can, in turn, peer with
additional resolvers. The path a DNS query takes through this in-
frastructure is often complex and hidden. This complexity makes it
difﬁcult to understand the behavior of the resolving infrastructure
and to attribute responsibility for distinct behaviors to the individ-
ual actors.
This study targets the above challenge and makes the following
contributions. First, we develop a set of methodologies for dis-
covering the client-side DNS infrastructure efﬁciently. Given the
vastness of this infrastructure and a short lifetime of some of its ac-
tors [8,13], probing strategies that improve the rate of discovery can
facilitate subsequent measurements. Second, we develop measure-
ment techniques for teasing apart the behavior of the actors within
the system, some of whom cannot be accessed directly. Third, we
apply our methodologies and strategies to assess some aspects of
the client-side DNS infrastructure and its behavior with respect to
caching, both in aggregate and separately for different actors. Our
key observations from this assessment include the following:
• We double, from 15 to 32 million, previous estimates of the
number of open resolvers on the Internet.
• We ﬁnd evidence of wide adoption of complex resolution
topologies including large shared pools of resolvers at cer-
tain layers in the infrastructure.
• We observe that DNS queries frequently travel large dis-
tances within the resolving infrastructure—both in terms of
geography and network delay. We ﬁnd 20% of open resolvers
experiencing at least 100 msec of delay before their queries
leave the resolution infrastructure.
• To the best of our knowledge, we contribute the ﬁrst assess-
ment of how various actors treat the time-to-live (TTL) set-
tings given by authoritative nameservers to set the behavior
of DNS caches. Despite being a simple notion, we ﬁnd that
different actors handle the TTL differently. The overall ef-
fect is that in many cases the TTL is distorted before reach-
ing the original requesting client. We ﬁnd that only 19% of
all open resolvers consistently return correct TTL values to
all our probes. A 2004 study [17] reports a wide violation
of TTLs by end-clients while a 2012 study from a client site
with “honest” resolvers shows a much lower violation rate by
clients [6]. We expand upon these studies by demonstrating
not only which actors cause violation but also how they be-
have regarding the TTL setting and, thus, cause other actors
to violate TTL.
• We assess the time an unused record stays in the cache of
various actors within the resolving infrastructure, which in
particular determines whether the TTL or cache capacity is
the cause of eviction. We ﬁnd scant evidence of a general
capacity limitation problem .
2. RELATED WORK
The over-arching methodology we use to study the DNS
ecosystem—as developed in the next three sections—involves ac-
tively discovering and characterizing DNS resolvers that will an-
swer queries from arbitrary hosts throughout the Internet. In this
manner, we can determine how the client-side DNS infrastructure
behaves with regard to a wide range of test queries. The closest
related work to ours is [8], which scans open resolvers in order to
assess answer rewriting occurring on DNS paths. That work fur-
ther contributes the idea of building a mapping between resolvers
found by probing Internet hosts and the resolvers that ultimately
contact an authoritative DNS server. We build upon that technique
to attribute DNS behavior to speciﬁc actors. Our work extends the
probing methodology presented in [8] to effectively discover re-
solver pools and examines many resolver characteristics not dis-
cussed in that paper.
Efﬁciently scanning the IPv4 address space for service discovery
(including DNS) while avoiding complaints is discussed in [13].
While [13] explores reducing the burden of probing, we focus on
reducing the number of probes required without losing insight. Our
additional methodological contributions are in probing strategies
that (i) increase the discovery rate, (ii) identify pools of recursive
resolvers, and (iii) soundly assess speciﬁc behavior of the various
actors in the system.
We also consider this work related to [2], which performs DNS
lookups from several vantage points in order to compare perfor-
mance among various local resolvers and public DNS services. [2]
ﬁnds that ISP-provided resolvers often outperform public DNS ser-
vices in query latency. Another performance-centric study is [14],
which characterizes the difference in observed DNS performance
for common DNS names from a variety of vantage points. Ad-
ditionally, [14] reports on the behavior of the DNS time-to-live,
which we also explore in more depth in this paper. Finally, [22] re-
ports on several facets of DNS servers, including security conﬁgu-
ration and support for DNS protocol components such as DNSSEC
[5].
Several studies [10, 18, 23] show that information gleaned from
DNS resolvers may be used to measure various aspects of the Inter-
net such as popularity of Web sites and inter-host delays. Our work
supports these efforts by developing effective discovery strategies
and showing the diversity of behavior in differing implementations.
Several prior studies consider the number of open resolvers on
the Internet [13, 22], the distance between clients and their re-
solvers [4, 11, 15, 20] and TTL violations [6, 17, 21]. We contrast
our ﬁndings with these studies throughout this paper.
3. CLIENT-SIDE DNS INFRASTRUCTURE
The architecture of the client-side DNS infrastructure varies
across providers. The actors can be loosely grouped into three
roles: (i) “ingress” servers that receive DNS queries directly from
user devices, (ii) “egress” servers that directly communicate with
authoritative DNS servers (ADNS), which maintain hostname to
IP address mappings for their respective domains, and (iii) hidden
servers that act as intermediaries between the ingress and egress but
are not exposed to either clients requesting mappings or authorita-
tive servers providing mappings. To avoid confusion, in the rest of
the paper we use the following terminology to describe the various
components of the client-side DNS infrastructure that is charged
ODNS
RDNS
Client-side
RDNSd
RDNSi
ADNS
Origin
FDNS
HDNS
Figure 1: Structure of the client-side DNS infrastructure.
with obtaining a hostname to IP address binding from an ADNS.
The actors are also illustrated in Figure 1.
• Origin devices are either user devices or the sources of our
DNS requests sent to probe the client-side DNS infrastruc-
ture.
• ODNSes (“open DNS”) are ingress servers that accept re-
quests from any host.
• RDNSes (“recursive DNS resolvers”) are egress resolvers
that communicate directly with authoritative DNS servers.
• FDNSes (“forwarding ODNS”) refers to an ODNS that does
not itself resolve a query, but rather forwards the request
along to another resolver. The FDNS servers are a subset of
the ODNS servers, or the ingress points that origin devices
query.
• RDNSdes (“direct RDNS”) are RDNSes that are also
ODNSes. In other words, an RDNSd is both an ingress and
egress server.
• RDNSies (“indirect RDNS”) are RDNSes observed at the
authoritative DNS server resolving queries on behalf of an
FDNS. Note: The RDNSi and RDNSd sets overlap. That is,
we ﬁnd some RDNS servers that both (i) accept and resolve
queries from arbitrary origin devices and (ii) act on behalf of
a set of FDNS servers we detect in our survey.
• HDNSes (“hidden DNS”) are servers which operate between
FDNSes and RDNSes. Since these servers are neither ingress
nor egress servers, they are invisible externally. While we
cannot directly detect these servers, their existence is con-
ﬁrmed by DNS operators [9] and therefore we must keep
them in mind as their actions may impact our results.
A typical example path through the maze of DNS-related de-
vices has a client computer (Origin) starting the process by sending
a DNS request to a home routing device (FDNS), which in turn
forwards the request through a chain of zero or more HDNSes and
ultimately to an RDNSi. The RDNSi sends the request to the ap-
propriate ADNS. Note that the RDNSi may cooperate with other
RDNSies and subsequent requests from the same FDNS may be
handled by a different RDNSi. We call such structures “RDNS
pools”. We discuss RDNS pools in more detail in §6. This typical
example accounts for nearly all of our experimental observations.
4. METHODOLOGY OVERVIEW
In this section we sketch our general methodology and datasets.
The speciﬁc methodology for each of our experiments is described
in subsequent sections. Our measurements cover only a fraction of
the Internet and therefore we must consider bias, namely, the de-
gree to which the DNS infrastructure we discover and assess is rep-
resentative of the broader Internet. We defer this question to §8—
after we have further developed experiments that can be brought to
bear on the question.
Scan
Format
Start
S1
S2
S3
S4
S5
S6
Random IP
Random IP
Random /24
Scan on First Hit
Rescan of S3
Scan on First Hit
2/29/12
7/3/12
8/5/12
10/4/12
11/16/12
2/26/13
Dur.
(days)
17
32
17
25
9
31
ODNSes
RDNSes
1.09M
1.98M
841K
17.6M
892K
11M
69.5K
72.6K
43.9K
72.1K
29.9K
65.8K
Table 1: Dataset characteristics
Non-Interference With Normal Operation: While we are inves-
tigating the various components of the DNS ecosystem, we use our
registered domain. Our probing rates are limited to insure we do
not interfere with normal operation of any of the components of
the system, and, although some of our techniques involve cache in-
jection, all DNS requests are for subdomains of our own domain
and we dot not interfere with any actual name-to-address bindings
in use.
Discovering DNS Infrastructure: To examine the client-side
DNS infrastructure, we must have an efﬁcient method for ﬁnd-
ing both ODNSes and RDNSes. Discovering DNS infrastructure
is a challenge because many of the components have policy re-
strictions preventing the acceptance of DNS requests from arbi-
trary hosts. Our basic discovery technique is an extension of the
process described in [8]. We registered a domain name1 and de-
ployed an ADNS for this domain. We then leverage approximately
100 PlanetLab [7] nodes as our origins and randomly probe the IP
address space with DNS requests for various hostnames within our
domain. By embedding the probed IP address in the hostname re-
quest and observing the queries arrive at our ADNS, we collect the
IP addresses that are willing to handle our probes—thus discover-
ing ODNSes. The IP addresses from which the queries ultimately
arrive at our ADNS illuminate the set of RDNSes. Finally, since
the ADNS has the addresses of both the RDNS and ODNS, we can
associate FDNSes with the RDNSes they use for DNS resolution.
Thus, we can elicit a response from an RDNS that will not respond
to direct probes by indirectly probing via the FDNS.
Attribution of Behavior: When measuring DNS behavior, it is
often necessary to identify the actor responsible for the behavior,
e.g., when a violation of the DNS protocol is detected. A key con-
tribution of this paper is measurement techniques to isolate FDNS
behavior from RDNS and HDNS behavior. Through cache injec-
tion2 on FDNSes, to which we found a sizable fraction of FDNSes
are susceptible, we short-circuit HDNS and RDNS from processing
a measurement probe. Therefore, any artifacts are the sole result of
the FDNS. Similarly, we develop a technique of coordinated prob-
ing through two or more FDNSes to determine the behavior of a
shared RDNS in near isolation from FDNS behavior. We validate
the latter technique using the RDNSdies —which we can probe
both through an FDNS and directly—as ground truth of RDNS be-
havior. Estimating from our experiments, over 77% of RDNSies
will not respond to direct DNS requests from external hosts and are
assumed hidden from an outside observer; despite that, our tech-
nique provides the ability to assess their behavior.
ODNS Lifetimes: We note that during our measurements we ﬁnd
that ODNSes are often short-lived—with around 40% becoming
unreachable within one day (see §5.1.1). Since the duration of our
experiments is typically longer than one day, we rediscover the re-
1dnsresearch.us
2A technique for inserting records into a DNS cache against the
spirit of the protocol.
Criterion
RomPager
Basic auth realm
PBL Listed by SpamHaus
PBL Listed by ISP
Wrong port
Total
No. ODNSes
% ODNSes
258K
265K
566K
180K
529K
849K
24%
24%
51%
17%
48%
78%
Table 2: Home network device criteria
solvers anew for each new experiment we discuss below. Hence,
techniques for quick rediscovery are important. We describe these
techniques below and use them to collect different datasets for dif-
ferent experiments, as summarized in Table 1. We describe the de-
tails of each scan as needed throughout the remainder of the paper.
Our datasets are publicly available [19].
5. METHODOLOGY DETAILS
We ﬁrst turn our attention to discovering various components
of the client-side DNS infrastructure. To facilitate our explo-
ration of discovery methodologies, we use two datasets. The ﬁrst
dataset is from the S2 scan in Table 1 and represents the probing
of 255M unique random IP addresses using 267M DNS requests
from 7/3/2012 to 8/3/2012. Our S2 scan discovered 1.9M ODNSes
and 73K RDNSes. The second dataset is from the S3 scan in Ta-
ble 1 and was collected between 8/5/2012 and 8/21/2012 using a
methodology based on completely scanning random /24 IP address
blocks. This scan represents a probing of 465K random /24 ad-
dress blocks—11.9M IP addresses—via 121M DNS requests. The
S3 dataset includes 841K ODNSes and 44K RDNSes. The num-
ber of probes exceeds the number of IP addresses because some
ODNSes use RDNS pools, which we attempt to discover through
repeated probes to ODNSes (see §5.2 for details).
ODNSes appear to be mostly home network devices. During
the S1 scan of random IP addresses we gather detailed informa-
tion about roughly 1.09M ODNSes. We ﬁnd that 78% are likely