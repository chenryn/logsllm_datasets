title:Draco: A System for Uniform and Fine-grained Access Control for
Web Code on Android
author:G&quot;uliz Seray Tuncay and
Soteris Demetriou and
Carl A. Gunter
Draco: A System for Uniform and Fine-grained
Access Control for Web Code on Android
Güliz Seray Tuncay
University of Illinois at
Urbana-Champaign
PI:EMAIL
Soteris Demetriou
University of Illinois at
Urbana-Champaign
PI:EMAIL
Carl A. Gunter
University of Illinois at
Urbana-Champaign
PI:EMAIL
ABSTRACT
In-app embedded browsers are commonly used by app developers
to display web content without having to redirect the user to heavy-
weight web browsers. Just like the conventional web browsers, em-
bedded browsers can allow the execution of web code. In addition,
they provide mechanisms (viz., JavaScript bridges) to give web code
access to internal app code that might implement critical function-
alities and expose device resources. This is intrinsically dangerous
since there is currently no means for app developers to perform
origin-based access control on the JavaScript bridges, and any web
code running in an embedded browser is free to use all the exposed
app and device resources. Previous work that addresses this prob-
lem provided access control solutions that work only for apps that
are built using hybrid frameworks. Additionally, these solutions fo-
cused on protecting only the parts of JavaScript bridges that expose
permissions-protected resources. In this work, our goal is to provide
a generic solution that works for all apps that utilize embedded web
browsers and protects all channels that give access to internal app
and device resources. Towards realizing this goal, we built Draco,
a uniform and ﬁne-grained access control framework for web code
running on Android embedded browsers (viz., WebView). Draco
provides a declarative policy language that allows developers to
deﬁne policies to specify the desired access characteristics of web
origins in a ﬁne-grained fashion, and a runtime system that dynami-
cally enforces the policies. In contrast with previous work, we do
not assume any modiﬁcations to the Android operating system, and
implement Draco in the Chromium Android System WebView app
to enable seamless deployment. Our evaluation of the the Draco
runtime system shows that Draco incurs negligible overhead, which
is in the order of microseconds.
Keywords
Android, WebView, access control, origin, JavaScript bridges, ex-
ploitation, JavaScript, HTML5
1.
INTRODUCTION
Mobile application (or "app" for short) developers heavily rely
on embedded browsers for displaying content in their apps and
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a
fee. Request permissions from permissions@acm.org.
CCS’16, October 24-28, 2016, Vienna, Austria
© 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978322
libraries. A previous study shows that 85% of the apps in the Google
Play store contain at least one embedded browser (i.e., WebView on
Android) [1]. Other than the natural use case of just displaying web
content, there are some interesting ways to use these web containers
in apps: advertisement libraries use embedded browsers to display ad
content within apps, app developers can rely on embedded browsers
to tightly couple web sites with similar functionality to the app in
order to reuse web site’s UI code and to provide fast and convenient
updates. Additionally, hybrid frameworks (e.g., PhoneGap) rely on
embedded browsers to enable app developers to write their apps
purely with web languages (e.g., JavaScript and HTML) with the
premise of ease of programming and portability to other mobile
operating systems.
Even though they are extremely useful, these embedded browsers
come with their own security problems. They are inherently given
the ability to execute web code (i.e., JavaScript). Additionally, through
the use of JavaScript bridges, they can allow web code to interact
directly with app components (i.e., internal Java code). Indeed, these
bridges are what hybrid apps rely on to allow access to system re-
sources such as contact list, camera, Bluetooth, SMS etc. Obviously,
the misuse of this functionality by malicious web domains can be
detrimental to the user and to the app since an attacker, whose web
domain (hence malicious code) was loaded into a WebView can
exploit the existing bridges to collect information about the user
and even change the app’s behavior. The main problem here is that
there is no means of performing access control on the untrusted code
running within a WebView, any origin loaded into the WebView is
free to use all the available JavaScript bridges. With the introduction
of API level 17, Android made an attempt to mitigate the negative
consequences of this problem (i.e., accessing Android runtime via
Java reﬂection) by introducing mechanisms to allow the developer
to specify which methods will be exposed to JavaScript. However,
this does not eliminate the problem as the untrusted code loaded
into a WebView still inherits the same permissions as the host app
and can exploit just the exposed parts of the bridge to perform its
malicious activities. Since the origin (as in same origin policy) infor-
mation is not propagated through the bridge, the app developer has
no control over this access attempt and cannot perform any access
control based on the origin.
Prior research studies on security issues in WebViews and Java-
Script bridges fall short in at least four signiﬁcant ways. First, they
have limited scope, since they mainly target hybrid apps and create
solutions that work only for the hybrid frameworks [2]. Second,
they are incomplete, since they focus only on protecting permission-
protected resources (such as the camera and microphone) [2, 3],
and disregard other cases where a foreign domain is inadvertently
allowed to access sensitive information (such as a user’s social secu-
rity number). Third, they rely on whitelisting policies that always
block unknown domains and therefore deprive developers of the
ﬂexibility to make decisions based on user input. Fourth, they are ad
hoc since they focus only on a subset of resource access channels
and do not provide a uniform solution that works across all channels.
The current disorganized and complex nature of interactions be-
tween web origins and applications creates confusion for developers.
From our inspection of the apps in the Google Play store, we ob-
served that the danger of loading untrusted web origins and exposing
resources to them is not very well understood by app developers.
Developers mistakenly assume that targeting API versions that ad-
dress some of the issues with embedded browsers (e.g., using API
level 17 or higher on Android) will protect their apps from these
vulnerabilities. When they seem to be aware of the danger, assuring
protection seems to be burdensome, and they tend to make mistakes
while trying to evade the problem by implementing navigation con-
trol logic or multiple WebViews with different levels of exposure.
However, even taking the correct programmatic precautions does not
completely eradicate the problem since there is no guarantee that a
trusted web domain will consist only of trusted components. Indeed,
it is quite common for web pages to use an iframe in order to display
ad content, and once loaded, there is no means for a developer to
protect the resources that were exposed to web content from these
potentially malicious components. All of this creates the necessity
for an access control mechanism targeting web code where devel-
opers are given the ability to specify desired access characteristics
of web origins in terms of app and device resources. Developers
should be allowed to specify what capabilities should be given to
web origins with a ﬁne granularity, and if they need user input to
make decisions. This brings forth the need for a policy language,
which developers can use to describe the expected behavior and use
of resources by web origins, without having to rely on any complex
programmatic structures, and the need for a mechanism that will
take into consideration the developer policies to make access control
decisions.
In this work, we systematically study the vulnerabilities that are
caused by loading untrusted web domains in WebViews on Android.
We show cases where top-selling Android apps suffer from these
vulnerabilities. Based on the threats we identiﬁed, we designed an
easy to use, declarative policy language called Draconian Policy
Language (DPL) for developers to specify access control policies
on resources exposed to web origins. DPL allows declaration of
policies with different levels of trust (i.e., fully-trusted, semi-trusted,
untrusted) for different origins. We implement a system called Draco
for ﬁne-grained access control of web code: Draco enables app devel-
opers and device manufacturers (OEMs) to insert explicit Draconian
policies into their apps, and dynamically enforces these policy rules
at runtime in an efﬁcient manner. Our contributions can be summa-
rized as follows:
1. We model web origin access and design a new policy language
for app developers and device manufacturers to dictate how
web origins should access resources.
2. We provide a ﬁne-grained access control runtime system for
web containers to make access control decisions based on ori-
gins and their expected behavior without requiring OS modi-
ﬁcations.
3. We provide a real world implementation that works on An-
droid devices and evaluate the overhead of our approach.
The rest of the paper is organized as follows. In section 2, we give
background information on how the Android embedded web browser
works. In section 3, we describe the problems caused by the lack of a
uniform access control mechanism in WebView in more detail, show
our analysis on the use of WebView APIs by the top free apps on
Google Play Store, and present case studies of top-selling Android
apps that suffer from this problem. In section 4, we present the
Draco framework, which consists of a declarative policy language for
controlling web code execution and a runtime system that enforces
the policies in Chromium’s Android WebView implementation. In
section 5, we evaluate our implementation. In section 6, we present
related work on privilege separation and WebView vulnerabilities.
Finally in section 7, we conclude with a discussion of our future
work.
2. BACKGROUND
We refer to the applications that utilize WebViews as mobile
web apps [1]. In order to understand the vulnerabilities caused
by embedded browsers in mobile web apps, we need to have an
understanding of the functionalities provided by these browsers. For
the rest of the paper, we will focus on Android WebView, which is
the widely-used open source embedded browser that forms the basic
building block for modern web browser applications on the Android
platform. This web container allows app developers to display web
content fetched from the local storage or from the web. Developers
use WebViews to seamlessly integrate web content into their apps,
without having to rely on a full-featured, heavy-weight web browser
to render web content.
2.1 WebView Implementation
WebView was ﬁrst introduced in the API level 1 of the Android
platform. It inherits from Android View and has additional render-
ing capabilities for displaying web pages. In Android 4.3 (Jelly-
Bean) and earlier, WebView implementation is based on Apple’s
WebKit browser engine [4], which powers several web browsers
such as Safari, Google Chrome and Opera. Starting from Android
4.4 (KitKat), the WebView implementation is instead based on
Chromium [5], which is Google’s widely-used, open-source browser
project. Chromium uses Google’s fork of WebKit, called Blink, as
a rendering engine, and Google’s high-performance V8 JavaScript
engine.
Up until Android 4.4 (inclusive), the WebView implementation
resided in the Android Open Source Project (AOSP) [6]; hence,
any update to the WebView requires modiﬁcations to the operating
system and can be pushed to users only with an OS update. With the
introduction of Android 5 (Lollipop), WebView became a system
app (called Android System WebView), presumably to ship updates
quickly to the WebView code through Google Play. Apps that use
WebViews load WebView code as a library into the app’s process
from the System WebView app.
2.2 WebView API
The WebView API allows app developers to load web content by
calling the methods loadURL(), loadData(), loadDataWithBaseURL()
and postURL() with a string argument that is the URL of the desired
web content. JavaScript can be enabled on a WebView by calling
setJavaScriptEnabled() on a WebSettings instance of a WebView.
The source of JavaScript can be a ﬁle on the local storage or a remote
domain. Additionally, the app can directly execute JavaScript by
calling loadURL() with a string that starts with “javascript:” and is
followed by the JavaScript code.
Navigation. Android developers have the option of controlling nav-
igation within WebViews. Whenever the user clicks on a link in
a page on a WebView, the developer can intercept this to make
a decision on how this page should be loaded, or if it should be
loaded at all. Developers have the option of allowing page loading
from only certain domains, and open pages from untrusted domains
in the web browser. This can be implemented by overriding the
shouldOverrideUrlLoading() callback method and checking the do-
main of the page before it is loaded .
JavaScript interfaces. The WebView API allows inserting Java ob-
jects into WebViews using the addJavaScriptInterface() method.
JavaScript loaded in the WebView can have access to application’s in-
ternal Java code, giving web code the ability to interact more tightly
with an app, and in some cases get access to system resources (e.g.,
hybrid frameworks). Mobile web apps commonly utilize JavaScript
interfaces to meld web content with application code and provide
users with a richer user experience compared to pure web apps.
Listing 1 shows how JavaScript interfaces can be used in appli-
cations. First, the app needs to register a Java object with a spe-
ciﬁc WebView instance and give this object a name. As shown
in the example, this can be done by addJavaScriptInterface(new
MyJSInterface(),"InjectedObject"). After this, JavaScript code
running in the WebView can execute the methods of this object
by using the name of the object and the name of the method, as in
InjectedObject.myExposedMethod().
Android API 17 introduced the use of @JavaScript annotation tag
to export only the desired Java methods of a Java class to JavaScript,
primarily to prevent reﬂection-based attacks, where an adversary can
use Java reﬂection to get access to the Android runtime and then ex-
ecute arbitrary commands via calling InjectedObject.getClass().
forName("java.lang.Runtime").getMethod("getRuntime",null).
invoke(null,null).exec(cmd). The use of the annotations is illus-
trated in Listing 1, where only the annotated method is made acces-
sible to JavaScript. Even though API level 17 addresses a critical
problem, it does not completely eradicate all the issues with Web-
Views. WebView still provides no access control on the JavaScript
interfaces; any domain whose content was loaded into a WebView
is free to use all the exported parts of the exposed Java object.
Listing 1: JavaScript Interfaces in Android WebView
mWebView.addJavaScriptInterface(new MyJSInterface(),
"InjectedObject");
//...
public class MyJSInterface {
@JavaScriptInterface
public void myExposedMethod() {
// do some sensitive activity
}
public void myHiddenMethod() {
// JavaScript cannot access me, do some other activity
}
}
JavaScript event handlers. The WebView API allows develop-
ers to handle the alert, prompt and confirm JavaScript events, by
registering the onJsAlert(), onJsPrompt() and onJsConfirm() Java
callback methods, respectively. Whenever the JavaScript side calls
any of these event methods, their respective handler will be called,
if it is overridden. The developer is free to implement any logic in
these event handlers. In fact, these event handlers are used in some
hybrid frameworks to connect the web side to the local side.
Handling HTML5 API requests. The rise of HTML5 has brought