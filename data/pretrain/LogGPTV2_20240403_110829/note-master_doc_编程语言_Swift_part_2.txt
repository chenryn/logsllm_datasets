```
## 闭包
```swift
var res = [1, 2, 3].sorted(by: { (a: Int, b: Int) -> Bool in
    return a > b
})
print(res)
// 化简
print([1,2,3].sorted(by: {a, b in a > b}))
// 默认命名
print([1, 2, 3].sorted(by: {$0 > $1}))
// 大于号本身是一个函数
print([1,2,3].sorted(by: >))
// 结尾闭包 最后一个参数是闭包的话 可以使用这种语法
print([1,2,3].sorted{ a, b in a > b})
print([1,2,3].map{v in String(v)})
// 内容捕获
var num = 700
print([1,2,3].sorted{a , b in abs(a-num)  String) -> String {
    return f()
}
test(f: "test")
```
## 枚举
```swift
enum Color: String {
    case Red = "红色",Yellow = "黄色",Blue = "蓝色"
}
let color: Color = .Blue
switch color {
case .Blue:
    print(color.rawValue)
case .Yellow:
    print(color.rawValue)
case .Red:
    print(color.rawValue)
}
// 使用rawValue获取枚举值
print(Color(rawValue: "红色")!)
// 关联值
enum Status {
    case Success(message: String, code: Int)
    case Error(String)
}
let result = Status.Success(message: "done", code: 200)
switch result {
case let .Success(message, _):
    print("sucess \(message)")
case .Error:
    print("error")
}
// 可选型的本质就是使用了关联值的枚举
let name: String? = Optional.some("jntm")
switch name {
case let .some(name):
    print(name)
case .none:
    print("is nil")
}
```
## 结构体
```swift
struct Location {
    // 这里var跟let的区别在于是否可变
    var x = 0,y: Int = 0
    var z: Int = 0
    init() {}
    init(x: Int, y: Int, z: Int) {}
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }
    // 可失败的构造函数 返回nil
    init?(x: Int) {
        guard x  Int {
        return x - y
    }
    // 如果不加mutating这个关键字 这个方法就没法修改结构体
    mutating func setX(x: Int) {
        self.x += 1
    }
}
var home = Location(x: 1, y: 2, z: 3)
// 如果里面的字段有默认值 在这里的构造可以传参
var empty = Location()
print(Location(x: 4, y: 3))
print(home.x)
print(Location(x:101) ?? -1)
home.x = 2
print(home.distance())
// 结构体和枚举是值类型
var p1 = Location(x: 1, y: 2)
var p2 = p1
p1.x = 3
print(p2.x == 1)
```
## 类
```swift
class Person {
    static var popilation: Int = 700_0000_0000
    var name: String
    var age: Int {
        // 属性观察器 需要注意的是不会在init阶段被调用
        // 将要赋值
        willSet {
            if newValue > 200 {
                print("太太老")
            }
        }
        // 已经赋值了
        didSet {
            if age == 18 {
                print("貌美如花")
            }
            if age > 100 {
                print("太老了")
                age = oldValue
            }
        }
    }
    // 计算属性
    var nameAndAge: String {
        get{
            return name + "," + String(age)
        }
        set(nameAndAge) {
            self.name = nameAndAge.components(separatedBy: ",")[0]
            self.age = Int(nameAndAge.components(separatedBy: ",")[1])!
        }
    }
    var bithYear: Int {
        return 2022 - self.age
    }
    // 延迟属性 首次访问时会被计算后缓存下来
    lazy var firstDate: Date = {
        return Date()
    }()
    init(name: String, age: Int) {
        self.name = name
        self.age = age
    }
    init?(nameAndAge: String) {
        if !nameAndAge.contains(",") {
            return nil
        }
        self.name = nameAndAge.components(separatedBy: ",")[0]
        self.age = Int(nameAndAge.components(separatedBy: ",")[1])!
    }
    // 类型方法
    static func populationBalanced() -> Bool {
        return popilation  Int? {
        get {
            data[data.count - index - 1]
        }
        set {
            if let newValue = newValue {
                data[data.count - index - 1] = newValue
            }
        }
    }
    // 多维下标
    subscript(index1: Int, index2: Int) -> Int {
        return data[index1] + index2
    }
    // 算术运算符重载
    static func + (left: ReversedList, right: ReversedList) -> ReversedList {
        return ReversedList(data: left.data + right.data)
    }
    static func + (left: ReversedList, right: Int) -> ReversedList {
        var left = left
        for i in 0.. ReversedList {
        return ReversedList(data: left.data.map {-$0})
    }
    // 比较运算符重载
    static func == (left: ReversedList, right: ReversedList) -> Bool {
        guard left.data.count == right.data.count else {
            return false
        }
        for i in 0.. Bool {
        for i in 0..= right.data[i] {
                return false
            }
        }
        return true
    }
    // 自定义运算符 /,=,-,+,!,*,%,,&,|,^,~
    static func ||| (left: ReversedList, right: ReversedList) -> ReversedList {
        var left = left
        for i in 0.. Character {
        return self[self.startIndex]
    }
    // 嵌套类型
    struct Range {}
}
let range : String.Range? = nil
```
## 泛型
```swift
// 泛型函数
func swap(a: inout T, b: inout T) {
    (a,b) = (b,a)
}
var a = "123"
var b = "321"
swap(a: &a, b: &b)
print(a,b)
// 泛型类型
struct ArrayList {
    var data: [T] = []
    mutating func add(e: T) {
        data += [e]
    }
}
var list = ArrayList()
list.add(e: "123")
print(list)
```
## 协议
```swift
protocol Runnable {
    // 协议的属性
    var threadName: String {get set}
    // 协议的方法
    func run()
}
struct Task: Runnable {
    var threadName = "test"
    func run() {
        print("running")
    }
}
// 只有类才能实现该协议
protocol Future: AnyObject {}
class MyFuture: Future{}
// 如果既需要继承有需要协议 则继承类要放在协议的前面
class Callable: NSObject, Future {}
// 类型别名
typealias Length = Int
let length: Length = 123
// 类型参数化
protocol WeightCalacuable {
    associatedtype WightType
    var weight: WightType {get}
}
class Phone: WeightCalacuable {
    typealias WightType = Double
    var weight = 0.114
}
class Boat: WeightCalacuable {
    typealias WightType = Int
    var weight = 100_0000
}
```
标准库的常用协议：Equatable, Comparable, CustomStringCovertible
### 面向协议编程
```swift
// 扩展协议
protocol Callable: Runnable{
    func call() -> Int
}
// 协议的默认实现
extension Callable {
    func run() {
        let _ = self.call()
    }
}
// 限定扩展：只有同时实现Callable和WeightCalacuable才应用
extension Callable where Self: WeightCalacuable {
    func run() {
        print("calc run")
    }
}
struct Computer: Callable, WeightCalacuable {
    var weight: Int
    func call() -> Int {
        return 0
    }
    typealias WightType = Int
    var threadName: String
}
Computer(weight: 1, threadName: "test").run()
// 协议聚合：同时实现两种协议的参数才被接受
func run(computeable: Callable & CustomStringConvertible){}
// 泛型约束
func topOne(seq: [T]) -> T {
    let ans = seq.sorted()[0]
    print(ans.description)
    return ans
}
print(topOne(seq: [67,6,4,23,45,2,1]))
// 协议的可选方法
@objc protocol Service {
    @objc optional func start()
}
class UserService: Service{}
let service: Service = UserService()
if let start = service.start {
    start()
}
```
## 错误处理
```swift
enum RuntimeError: Error{
    case NetWorkError(String)
    case ReadTimeOutError
}
func main(a: Int) throws -> Void {
    // 函数执行结束后才会执行
    defer {
        print("finally2 execute")
    }
    defer {
        print("finally1 execute")
    }
    if a == 1 {
        throw RuntimeError.NetWorkError("unknow host")
    }
}
// 强制忽略异常 发生异常程序就会崩
try! main(a:2)
// 忽略异常 发生异常不会蹦
try? main(a: 1)
do {
    try main(a: 1)
}catch RuntimeError.NetWorkError(let e) {
    print("error", e)
}catch let e as RuntimeError {
    print(e)
}catch {
    print("unknow error")
}
// 使用Nerver代表异常情况
func errorHandle() -> Never {
    print("!!!")
    fatalError()
}
var aaa = 1
guard aaa != 1 else {
    errorHandle()
}
```
## 内存管理
```swift
class Pet {
    var owner: Person?
    init(owner: Person) {
        self.owner = owner
    }
    deinit{
        print("pet clean")
    }
}
class Person {
    // 没有加weak时会出现相互引用导致内存泄漏 加了weak后不会增加pet的引用数
    // weak要求类型是可选型并且是var的 如果不满足这个条件 需要使用unowned
    // 但unowned有一定的风险 如果一个unowned被回收后被使用 则会发生致命错误
    weak var pet: Pet?
    init() {
        pet = Pet(owner: self)
    }
    deinit {
        print("person clean")
    }
}
// swift 使用引用计数
var p: Person? = Person()
p = nil
```
对于闭包循环引用 可以使用 [unoned xxx] 的方式来声明闭包内的变量为弱引用
## 类型检查与转换
```swift
class Animal{}
class Duck: Animal{}
class Dog: Animal{}
let dog: Animal = Dog()
// 类型检查
print(dog is Dog)
// 尝试强制转型 失败返回nil
print((dog as? Dog)!)
```
Any > AnyObject > NSObject