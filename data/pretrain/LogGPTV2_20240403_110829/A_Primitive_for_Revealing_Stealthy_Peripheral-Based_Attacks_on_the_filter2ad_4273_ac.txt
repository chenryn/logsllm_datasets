### Retrieving Information from the UHCI Controller and Linux Debug File System

By utilizing the single-step debugging mode of the UHCI controller (refer to [28, p.11]), we retrieved information from the Linux debug file system located at `/sys/kernel/debug/usb/uhci/`. Additionally, Performance Monitoring Units (PMUs) were used to count BUS TRANS MEM events.

### Counting USB Device Events

Using the same setup, we determined the number of bus transactions required when a USB device, such as a keyboard, has new data to be transmitted to the main memory. For our USB keyboard, we found that exactly two bus transactions are needed to handle a keypress event, and the same is true for a key release event. The Linux driver manages these events through an interrupt routine. To determine the expected bus activity \( A_{UHCI} \), we request the number of handled interrupts from the operating system and then double it. Therefore, the total number of bus transactions in our example is calculated as:
\[ 4280 + 2 \times \#USB\ interrupts = A_{UHCI} \]

### Analysis of Other Bus Masters

To comprehensively handle the bus activity of the entire computer platform, we must analyze the behavior of all other bus masters, such as the Ethernet controller and the hard disk controller, similar to the UHCI controller. During our tests on Lenovo Thinkpad laptops, we encountered an additional bus master: the fingerprint reader (FR). We were unable to disable the FR via the BIOS on an older Thinkpad model, so we analyzed its bus activity and included it in our implementation. Our analysis revealed that the FR causes four bus transactions per millisecond.

For the purposes of this paper and to verify our hypothesis, it is sufficient to consider up to five bus masters for BARM (Bus Agent Runtime Monitor). In addition to the two CPU-based bus masters and the UHCI controller, we also include Intelâ€™s Manageability Engine (ME) as a bus master. During normal operation, we assume \( A_{ME} = 0 \).

In certain tests, we operate the Linux OS entirely from the main memory to utilize the hard disk controller's I/O functionality as needed. A technical report with further details on bus masters, including the Ethernet and hard disk controllers, is being prepared.

### Summary of Bus Master Analysis

The analysis presented in the previous sections allows us to determine the amount of memory transactions caused by each bus master. This intermediate result is illustrated in Figure 5.

### Bus Agent Runtime Monitor (BARM)

With the background information introduced in Section 4.1, we implemented BARM as a Linux kernel module. This section describes our monitoring strategy, which continuously monitors and evaluates bus activity.

#### Permanent Monitoring

The PMUs are already configured to measure BUS TRANS MEM events. The permanent monitoring of \( A_m \) (total memory transactions) and \( A_{CPU} \) (memory transactions by the CPU) is implemented in the following steps:
1. **Reset Counters and Store Initial I/O Statistics**: Reset the counters and store the initial I/O statistics of all non-CPU bus masters (e.g., UHCI, FR, ME, HD, ETH, VC).
2. **Start Counting**: Begin counting for a specified time \( t \) using a high-precision timer.
3. **Stop Counting**: Stop the counters when \( t \) is reached.
4. **Store Counter Values and Updated I/O Statistics**: Store the counter values for \( A_m \) and \( A_{CPU} \) along with the updated I/O statistics of all non-CPU bus agents.
5. **Continue Monitoring**: Repeat step 1 and determine \( A_e \) (expected bus activity) in parallel by waking up the evaluation kernel thread.

#### Comparison of Measured and Expected Bus Activity

BARM compares the measured bus activity \( A_{CPU} \) and the expected bus activity \( A_e \) during the execution of the evaluation kernel thread as follows:
1. **Determine Expected Bus Activity**: Calculate \( A_{CPU} \), \( A_{HD} \), \( A_{ETH} \), etc., using the difference between the stored updated I/O statistics and the initial I/O statistics.
2. **Compare and Report Results**: Compare \( A_{CPU} \) and \( A_{CPU} \), report the results, and, if necessary, apply a defense mechanism. For simplicity, we assume \( A_{HD} = 0 \), \( A_{ETH} = 0 \), etc.

#### Tolerance Value

To account for practical inaccuracies, we redefine how \( A_a \) (additional bus activity) is calculated. PMU counters cannot be started or stopped simultaneously, and very few processor cycles are needed to start or stop a counter. Similar inaccuracies can occur when reading I/O statistics logged by the OS. Therefore, we introduce a tolerance value \( T \in \mathbb{N} \) and refine \( A_a \) as follows:
\[ A_{Ta} = \begin{cases} 
0 & \text{if } |A_m - A_e| \in \{0, \ldots, T\} \\
|A_m - A_e| & \text{if } |A_m - A_e| \notin \{0, \ldots, T\}
\end{cases} \]

The value of \( T \) is a freely selectable number of bus transactions that BARM can tolerate when checking for additional bus traffic. Our evaluation shows that a useful \( T \) is a small value. However, theoretically, \( T > 0 \) gives the attacker a chance to hide the attack, i.e., to execute a transient attack. In the best case, the stealthy attack can have at most \( 2T \) bus transactions. It is unlikely that \( 2T \) bus transactions are enough for a successful attack, especially with mechanisms like Address Space Layout Randomization (ASLR) complicating the search phase.