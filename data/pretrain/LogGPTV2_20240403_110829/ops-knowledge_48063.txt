### 问题背景
我开发了一个REST API，其客户端是受我控制的移动应用和网站（API不对公众开放）。用户通过Facebook或Google+登录我的移动应用或网站。我希望对API进行安全保护，使其满足以下条件之一：

(a) 用户只有在成功通过我的应用/网站登录Facebook或Google+后才能访问API。

(b) 只有我的应用/网站可以访问API。

### 方案 (a) 的实现与反馈
为了实现方案 (a)，我设计了以下流程，并希望得到关于其弱点和改进的反馈：

1. **数据加密**：移动应用与REST API之间的所有数据都通过TLS加密传输。
2. **用户登录**：用户使用Facebook或Google+凭据登录我的应用。
3. **获取令牌**：应用从Facebook或Google+接收令牌并获取用户信息。
4. **发送用户信息**：应用将用户信息（用户名/邮箱/唯一ID）和令牌发送到REST API（例如，/login）。
5. **验证令牌**：REST API使用令牌和唯一ID向Facebook或Google+ API发起测试调用，以确保令牌和用户信息组合有效。
6. **生成API令牌**：REST API生成自己的令牌并将其缓存，键为唯一ID。
7. **后续请求**：应用在每次后续访问REST API时都发送唯一ID和令牌。
8. **验证API令牌**：REST API查找缓存中的唯一ID和令牌。如果存在，则允许该请求访问API。

#### 弱点与改进建议
- **步骤5的必要性**：虽然验证令牌和用户信息组合的有效性是必要的，但可以通过其他方式减少复杂性和潜在的安全风险。例如，可以考虑使用OAuth 2.0或其他成熟的认证协议来简化这一过程。
- **令牌安全性**：确保令牌的安全存储和传输至关重要。可以考虑使用短生命周期令牌和刷新令牌机制来提高安全性。
- **缓存管理**：确保缓存机制的安全性和高效性，防止缓存被滥用或篡改。

### 方案 (b) 的实现与反馈
对于方案 (b)，我考虑使用基本HTTP认证和TLS来保护API。这种方法对于网站客户端来说是可行的，但对于移动应用来说，意味着密码必须以某种形式存储在移动应用中，从而容易受到暴露的风险。

#### 弱点与改进建议
- **密码存储**：在移动应用中存储密码是非常不安全的做法。可以考虑使用更安全的身份验证方法，如证书固定、OAuth 2.0客户端凭证流或自签名证书。
- **中间人攻击**：即使使用HTTPS或基本HTTP认证，攻击者仍可以通过中间人攻击嗅探数据。因此，需要采取额外的安全措施，如证书锁定和严格的SSL/TLS配置。

### 总结
为了更好地保护您的REST API，建议采用成熟且经过验证的安全实践，如OAuth 2.0、证书固定和严格的SSL/TLS配置。同时，定期进行安全审计和漏洞扫描，以确保系统的安全性。