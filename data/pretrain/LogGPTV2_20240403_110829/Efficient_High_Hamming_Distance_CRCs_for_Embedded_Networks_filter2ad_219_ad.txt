0x000001D7
{1, 1, 5, 25}
0x00000179
x32+x8+x6+x5+x4+x3+x0
{2, 30}
x32+x8+x7+x6+x5+x3+x2+x0
0x000001ED
{1, 10, 21}
0x000000E5
{1, 1, 3, 4, 23}
x32+x7+x6+x5+x2+x0
Length
197
270
2048
4145
This table shows good polynomials and the maximum code word length
obtained for the stated Hamming Distance. Each entry gives the poly-
nomial in the “left-shift” binary notation and the standard polynomial
notation. The third line of each entry list the orders of the polynomials
prime factorization.
as 0x8408. It is important to note that not only does this
algorithm process data bits LSB ﬁrst, it also results in a bit-
reversed CRC value (compared to the result if the bits were
fed into a left-shift algorithm MSB ﬁrst).
The left-shift versus right-shift issue is one source of
confusion in the literature. While [28, 1] describe the left-
shift algorithm, [6] describes the right-shift algorithm as
though it were equivalent and lists incorrect check values
in the paper.
Conventional wisdom suggests that either algorithm can
be used as long as the correct assumptions about data order-
ing are made [6, 28]. This misconception probably stems
from the well-known property of CRCs that a polynomial
and its bit-reversed counterpart have identical error detec-
tion performance.
But the left-versus-right shift issue is not so simple for
real implementations. The problem arises because software
implementations of the CRC algorithm rely on data regis-
ters of limited width and limited lookup table size. Table
8 shows a concrete C implementation of the left-shift al-
gorithm. In essence, the core algorithm processes data one
byte at a time. While the example code could easily be ex-
panded to process 16- or 32-bit words as well, the issue is
that in many cases the FCS size is larger than the chunk size
in which the data is processed. The execution of the outer
loop creates artiﬁcial boundaries in the data. Changing the
core algorithm to a right-shift implementation would swap
the order of the bits within the registers without affecting
the overall order that the data words are processed in.
As long as the code that generates the checksum
processes data bits in the same order as the code that ver-
iﬁes the checksum, the checksum value would be veriﬁed
correctly, and bit-ordering would not be an impediment to
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:11:24 UTC from IEEE Xplore.  Restrictions apply. 
HD
12
Polynomial
0x0001DA97
x32+x16+x15+x14+x12+x11+
x9+x7+x4+x2+x1+x0
11 x32+x16+x14+x12+x11+x9+x6+x5+x2+x1+x0
x32+x16+x15+x11+x9+x7+x6+x4+x2+x0
x32+x15+x11+x10+x8+x5+x4+x2+x0
{32}
x32+x15+x13+x12+x9+x8+x7+x6+x5+x0
x32+x13+x11+x8+x6+x5+x4+x3+x0
{1, 2, 11, 18}
0x00015A67
{3, 5, 8, 16}
0x00018AD5
{1, 1, 11, 19}
0x00008D35
0x0000B3E1
{1, 8, 9, 14}
0x00002979
{5, 9, 9, 9}
0x00003551
{1, 5, 13, 13}
10
9
8
7
6
Table 6. Good CRC32sub16 Polynomials
Table 7. Bitwise Right-Shift CRC Algorithm
Length
62
65
106
116
313
516
for (i=0; i> 1) ˆ (revpoly);
} else {
crc = (crc >> 1);
}
data >>= 1;
}
Table 8. C Code for 8-bit Left-Shift Algorithm
int datalen;
unsigned char crc = crc_init;
unsigned char data[datalen];
int i, j;
unsigned char gpoly = 0xEA;
for (i=0; i<datalen; i++) {
/* begin core algorithm */
for (j=0; j<8; j++) {
if (lsb(data) ˆ lsb(crc)) {
crc = (crc << 1) ˆ (gpoly_brev);
} else {
crc = (crc << 1);
}
data[i] <<= 1;
}
/* end core algorithm */
x32+x13+x12+x10+x8+x6+x4+x0
8220+
}
This table is arranged in the same way as Table 5.
superﬁcial testing of system operation. However, for serial
transmission, it is important that the data bits be processed
in the same order that they are sent down the wire. Other-
wise, a k bit (where k is the length of the FCS) burst error
straddling the artiﬁcial boundaries created by the software
algorithm can affect bits that are actually further than k bits
apart from the point of view of the CRC algorithm. Figure
5 illustrates this concept.
An example of this problem can be found in the
IEEE1394 speciﬁcation [10], which uses the CRC32 stan-
dard polynomial to protect both the header and data seg-
ments of the packet. Packet contents are divided into 32-
bit chunks called quadlets. The sample algorithm given
in the speciﬁcation is a quadlet-at-a-time algorithm which
processes bits MSB ﬁrst, but the quadlets are transmitted
LSB ﬁrst.
This bit ordering problem only affects the burst error de-
tection property of the CRC. The data protection for random
independent bit errors is not affected. It may not be feasible
to modify existing standards, especially for a standard like
IEEE1394, which is not generally relied upon for safety-
critical applications. But it is important to understand this
problem so that new standards can take full advantage of the
error-detecting capabilities of the CRC.
8 Conclusion
Cyclic redundancy codes are commonly used to provide
error detection for network messages and stored data be-
cause they can provide better minimum Hamming distances
than other checksums.
In particular, high HD codes are
increasing in importance in safety critical embedded sys-
tem applications. We have identiﬁed several algorithms and
studied their implementation in low-end embedded proces-
sors to identify tradeoffs among error detection, computa-
tion speed, and memory requirements. We have also docu-
mented the concept of the CRCksubr polynomial and illus-
trated how implementations taking advantage of the special
characteristics of these polynomials can achieve better error
detection, more efﬁcient computational speeds, and smaller
memory requirements.
We summarize existing algorithms for computing the
CRC, including the bit-shift algorithm, table lookup algo-
rithm, virtual table algorithm, and optimized virtual table
algorithm. By implementing these algorithms in the several
embedded architectures, we are able to compare the perfor-
mance and memory tradeoffs. Additionally, we have imple-
mented algorithms that are optimized for two novel classes
of polynomials: CRC32sub8 and CRC32sub16. Comput-
ing CRCs with these polynomials offers improved error de-
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:11:24 UTC from IEEE Xplore.  Restrictions apply. 
Actual k−bit burst error
1
2
3
Bytes transmitted MSB first
Apparent 2k−bit burst error
1
2
3
Bytes processed LSB first
4
4
Figure 5. Undetectable burst error caused by
byte inversion
tection with computational performance that is comparable
to the performance of algorithms for smaller polynomial
classes (e.g. CRC16, CRC24). We also present polynomial
selection tables for these new classes of polynomials.
Because the mathematical basis of the CRC is not nec-
essarily intuitive to engineers used to dealing with ordinary
integer arithmetic, it can be difﬁcult to obtain a correct im-
plementation of the software algorithm. We have clariﬁed
some discrepancies in existing literature and identiﬁed a
real application in which incorrect speciﬁcation of bit or-
dering compromises CRC error detection capability.
Overall, we hope that these results provide embedded
application engineers with better tradeoff information for
selecting CRC algorithms and polynomials to attain good
tradeoffs among speed, memory consumption, and error de-
tection effectiveness.
Acknowledgment
The authors would like to thank Bombardier Transporta-
tion and Honeywell for their generous support.
References
[1] M. Barr. Slow and steady never lost the race. Embedded
Systems Programming, pages 37–46, January 2000.
[2] P. E. Boudreau, W. C. Bergman, and D. R. Irvin. Perfor-
mance of a cyclic redundancy check and its interaction with
a data scrambler.
IBM Journal of Research Development,
38(6):651–658, 1994.
[3] R. Braden, D. Borman, and C. Partridge. RFC1071: Com-
puting the internet checksum. Online: http://www.faqs.org/-
rfcs/rfc1071.html, 1988.
[4] F. Braun and M. Waldvogel. Fast incremental CRC updates
for IP over ATM networks. In 2001 IEEE Workshop on High
Performance Switching and Routing, pages 48–52, 2001.
[5] G. Castagnoli, S. Br¨auer, and M. Herrmann. Optimization
of cyclic redundancy-check codes with 24 and 32 parity bits.
IEEE Trans. Comm., 41(6):883–892, 1993.
[6] J. Crenshaw. Implementing CRCs. Embedded Systems Pro-
gramming, January 1992.
[7] D. C. Feldmeier. Fast software implementation of error de-
tection codes. IEEE/ACM Trans. Netw., 3(6):640–651, De-
cember 1995.
[8] FlexRay-Consortium.
FlexRay communications system,
protocol speciﬁcation, version 2.0. Request online: http://-
www.ﬂexray.com/speciﬁcation request.php.
[9] Freescale Semiconductor, Inc. HCS08 microcontrollers.
http://www.freescale.com/ﬁles/microcontrollers/-
Online:
doc/data sheet/MC9S08RG60.pdf, 2003.
[10] IEEE Std 1394-1995. IEEE standard for a high performance
serial bus, Aug 1996. ISBN 0-7381-1203-8.
[11] IEEE Std 1570-2002.
IEEE standard for the interface be-
tween the rail subsystem and the highway subsystem at a
highway rail intersection, 2002. ISBN 0-7381-3397-1.
[12] IEEE Std 802.3-2000. Part 3: Carrier sense multiple access
with collisition detection (CSMA/CD) access method and
physical layer speciﬁcation, 2000. ISBN: 0-7381-2673-X.
[13] P. Koopman. 32-bit cyclic redundancy codes for internet
In International Conference on Dependable
applications.
Systems and Networks, pages 459–498, 2002.
[14] P. Koopman. Cyclic redundancy code (CRC) polynomial
selection for embedded networks. In International Confer-
ence on Dependable Systems and Networks, pages 145–154,
2004.
[15] M. E. Kounavis and F. L. Berry. A systematic approach to
building high performance software-based CRC generators.
In Proceedings of the 10th IEEE Symposium on Computers
and Communications, 2005.
[16] G. Krut. Justiﬁcation for the format of safety telegram. AD-
tranz corporation technical document, 1996.
[17] Lin, Shu, and D. Costello. Error Control Coding. Prentice-
Hall, 1983.
[18] A. J. McAuley. Weighted sum codes for error detection and
IEEE/ACM Trans.
their comparison with existing codes.
Netw., 2(1):16–22, 1994.
[19] Microchip Technology, Inc. PIC16F7X data sheet. Online:
http://www.microchip.com/downloads/en/DeviceDoc/-
41206a.pdf, 2002.
[20] F. Monteiro, A. Dandache, A. M’sir, and B. Lepley. A fast
CRC implementation on FPGA using a pipelined architec-
ture for the polynomial division. In the 8th IEEE Interna-
tional Conference on Electronics Circuits and Systems, vol-
ume 3, pages 1231 – 1234, 2001.
[21] T.-B. Pei and C. Zukowski. High-speed parallel CRC cir-
IEEE Transactions on Communications,
cuits in VLSI.
40(4):653–657, 1992.
[22] A. Perez. Byte-wise CRC calculations.
IEEE Micro,
3(3):40–50, 1983.
[23] W. Peterson and E. Weldon. Error-Correcting Codes. MIT
Press, second edition, 1972.
[24] T. V. Ramabadran and S. S. Gaitonde. A tutorial on CRC
computations. IEEE Micro, 8(4):62–75, 1988.
[25] D. V. Sarwate. Computation of cyclic redundancy checks
via table look-up. Commun. ACM, 31(8):1008–1013, 1988.
[26] TTA-Group. Time-triggered protocol TTP/C, high-level
speciﬁcation document, protocol version 1.1. Request on-
line: http://www.ttagroup.org/technology/speciﬁcation.htm,
2003.
[27] J. Turley.
Embedded processors, part one.
On-
http://www.extremetech.com/print article/-
line:
0,3998,a=21014,00.asp, 2002.
[28] R. Williams. A painless guide to CRC error detection. On-
line: http://www.ross.net/crc/download/crc v3.txt, 1993.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:11:24 UTC from IEEE Xplore.  Restrictions apply.