代表使用 grub2-set-default 来设置哪一个 menuentry 为默认值的意思。通常默认为 0
一般来说，默认就是以第一个开机菜单来作为默认项目，如果想要有不同的菜单设置，可以在这个项目填选所需要的 --id 即可。
当然啦，你的 id 就应该不要重复啰！
核心的外加参数功能：GRUB_CMDLINE_LINUX
如果你的核心在启动的时候还需要加入额外的参数，就在这里加入吧！举例来说，如果你除了默认的核心参数之外，还需要让你
的磁盘读写机制为 deadline 这个机制时， 可以这样处理：
GRUB_CMDLINE_LINUX="..... crashkernel=auto rhgb quiet elevator=deadline"
在暨有的项目之后加上如同上表的设置，这样就可以在开机时额外的加入磁盘读写的机制项目设置了！
这个主要环境配置文件编写完毕之后，必须要使用 grub2-mkconfig 来重建 grub.cfg 才行喔！因为主配置文件就是 grub.cfg 而已， 我们
是通过许多脚本的协力来完成 grub.cfg 的自动创建。当然啰，额外自己设置的项目，就是写入 /etc/default/grub 文件内就是了。 我们来测试一
下下面调整项目，看看你会不会修订主要环境配置文件了呢？
问：
假设你需要 （1）开机菜单等待 40 秒钟、 （2）默认用第一个菜单开机、 （3）菜单请显示出来不要隐藏、 （4）核心外
带“elevator=deadline”的参数值， 那应该要如何处理 grub.cfg 呢？
答：
直接编辑主要环境配置文件后，再以 grub2-mkconfig 来重建 grub.cfg 喔！
# 1. 先编辑主要环境配置文件：
[root@study ~]# vim /etc/default/grub
GRUB_TIMEOUT=40
GRUB_DEFAULT=0
GRUB_TIMEOUT_STYLE=menu
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL_OUTPUT="console"
GRUB_CMDLINE_LINUX="rd.lvm.lv=centos/root rd.lvm.lv=centos/swap crashkernel=auto rhgb
quiet elevator=deadline"
GRUB_DISABLE_RECOVERY="true"
# 2. 开始重新创建 grub.cfg ！
[root@study ~]# grub2-mkconfig -o /boot/grub2/grub.cfg
Generating grub configuration file ...
Found linux image: /boot/vmlinuz-3.10.0-229.el7.x86_64
Found initrd image: /boot/initramfs-3.10.0-229.el7.x86_64.img
Found linux image: /boot/vmlinuz-0-rescue-309eb890d09f440681f596543d95ec7a
Found initrd image: /boot/initramfs-0-rescue-309eb890d09f440681f596543d95ec7a.img
done
# 3. 检查看看 grub.cfg 的内容是否真的是改变了？
[root@study ~]# grep timeout /boot/grub2/grub.cfg
set timeout_style=menu
set timeout=40
[root@study ~]# grep default /boot/grub2/grub.cfg
set default="0"
[root@study ~]# grep linux16 /boot/grub2/grub.cfg
linux16 /vmlinuz-3.10.0-229.el7.x86_64 root=/dev/.... elevator=deadline
linux16 /vmlinuz-0-rescue-309eb890d09f440681f5965.... elevator=deadline
菜菜单单创创建建的的脚脚本本 /etc/grub.d/*
你应该会觉得很奇怪， grub2-mkconfig 执行之后，屏幕怎么会主动的去抓到 linux 的核心，还能够找到对应核心版本的 initramfs 呢？ 怎
么这么厉害？其实 grub2-mkconfig 会去分析 /etc/grub.d/* 里面的文件，然后执行该文件来创建 grub.cfg 的啦！ 所以啰， /etc/grub.d/* 里面的文
件就显得很重要了。一般来说，该目录下会有这些文件存在：
00_header：主要在创建初始的显示项目，包括需要载入的模块分析、屏幕终端机的格式、倒数秒数、菜单是否需要隐藏等等，大部分在
/etc/default/grub 里面所设置的变量，大概都会在这个脚本当中被利用来重建 grub.cfg 。
10_linux：根据分析 /boot 下面的文件，尝试找到正确的 linux 核心与读取这个核心需要的文件系统模块与参数等，都在这个脚本运行后找
到并设置到 grub.cfg 当中。 因为这个脚本会将所有在 /boot 下面的每一个核心文件都对应到一个菜单，因此核心文件数量越多，你的开
机菜单项目就越多了。 如果未来你不想要旧的核心出现在菜单上，那可以通过移除旧核心来处理即可。
30_os-prober：这个脚本默认会到系统上找其他的 partition 里面可能含有的操作系统，然后将该操作系统做成菜单来处理就是了。 如果
你不想要让其他的操作系统被侦测到并拿来开机，那可以在 /etc/default/grub 里面加上“ GRUB_DISABLE_OS_PROBER=true ”取消这个
文件的运行。
40_custom：如果你还有其他想要自己手动加上去的菜单项目，或者是其他的需求，那么建议在这里补充即可！
所以，一般来说，我们会更动到的就是仅有 40_custom 这个文件即可。那这个文件内容也大多在放置管理员自己想要加进来的菜单项
目就是了。 好了，那问题来了，我们知道 menuentry 就是一个菜单，那后续的项目有哪些东西呢？简单的说，就是这个 menuentry 有几种常见
的设置？ 亦即是 menuentry 的功能啦！常见的有这几样：
直接指定核心开机
基本上如果是 Linux 的核心要直接被用来开机，那么你应该要通过 grub2-mkconfig 去抓 10_linux 这个脚本直接制作即可，因此这
个部份你不太需要记忆！ 因为在 grub.cfg 当中就已经是系统能够捉到的正确的核心开机菜单了！不过如果你有比较特别的参数需要进行
呢？这时候你可以这样作： （1）先到 grub.cfg 当中取得你要制作的那个核心的菜单项目，然后将它复制到 40_custom 当中 （2）再到
40_custom 当中依据你的需求修改即可。
这么说或许你很纳闷，我们来做个实际练习好了：
问：
如果你想要使用第一个原有的 menuentry 取出来后，增加一个菜单，该菜单可以强制 systemd 使用 graphical.target
来启动 Linux 系统， 让该菜单一定可以使用图形界面而不用理会 default.target 的链接，该如何设计？
答：
当核心外带参数中，有个“ systemd.unit=??? ”的外带参数可以指定特定的 target 开机！因此我们先到 grub.cfg 当中，
去复制第一个 menuentry ， 然后进行如下的设置：
[root@study ~]# vim /etc/grub.d/40_custom
menuentry 'My graphical CentOS, with Linux 3.10.0-229.el7.x86_64' --class rhel fedora
--class gnu-linux --class gnu --class os --unrestricted --id 'mygraphical' {
load_video
set gfxpayload=keep
insmod gzio
insmod part_gpt
insmod xfs
set root='hd0,gpt2'
if [ x$feature_platform_search_hint = xy ]; then
search --no-floppy --fs-uuid --set=root --hint='hd0,gpt2' 94ac5f77-cb8a-495e-a65b-...
else
search --no-floppy --fs-uuid --set=root 94ac5f77-cb8a-495e-a65b-2ef7442b837c
fi
linux16 /vmlinuz-3.10.0-229.el7.x86_64 root=/dev/mapper/centos-root ro rd.lvm.lv=
centos/root rd.lvm.lv=centos/swap crashkernel=auto rhgb quiet
elevator=deadline systemd.unit=graphical.target
initrd16 /initramfs-3.10.0-229.el7.x86_64.img
}
# 请注意，上面的数据都是从 grub.cfg 里面复制过来的，增加的项目仅有特殊字体的部份而已！
# 同时考虑画面宽度，该项目稍微被变动过，请依据您的环境来设置喔！
[root@study ~]# grub2-mkconfig -o /boot/grub2/grub.cfg
当你再次 reboot 时，系统就会多出一个菜单给你选择了！而且选择该菜单之后，你的系统就可以直接进入图形界面
（如果有安装相关的 X window 软件时）， 而不必考虑 default.target 是啥东西了！了解乎？
通过 chainloader 的方式移交 loader 控制权
所谓的 chain loader （开机管理程序的链结） 仅是在将控制权交给下一个 boot loader 而已， 所以 grub2 并不需要认识与找出
kernel 的文件名 ，“ 他只是将 boot 的控制权交给下一个 boot sector 或 MBR 内的 boot loader 而已 ” 所以通常他也不需要去查验下一个
boot loader 的文件系统！
一般来说， chain loader 的设置只要两个就够了，一个是预计要前往的 boot sector 所在的分区代号， 另一个则是设置
chainloader 在那个分区的 boot sector （第一个扇区） 上！假设我的 Windows 分区在 /dev/sda1 ，且我又只有一颗硬盘，那么要 grub 将
控制权交给 windows 的 loader 只要这样就够了：
menuentry "Windows" {
insmod chain # 你得要先载入 chainloader 的模块对吧？
insmod ntfs # 建议加入 windows 所在的文件系统模块较佳！
set root=（hd0,1） # 是在哪一个分区～最重要的项目！
chainloader +1 # 请去 boot sector 将 loader 软件读出来的意思！
}
通过这个项目我们就可以让 grub2 交出控制权了！
问：
假设你的测试系统上面使用 MBR 分区，并且出现如下的数据：
[root@study ~]# fdisk -l /dev/vda
Device Boot Start End Blocks Id System
/dev/vda1 2048 10487807 5242880 83 Linux
/dev/vda2 * 10487808 178259967 83886080 7 HPFS/NTFS/exFAT
/dev/vda3 178259968 241174527 31457280 83 Linux
其中 /dev/vda2 使用是 windows 7 的操作系统。现在我需要增加两个开机选项，一个是取得 windows 7 的开机菜单，
一个是回到 MBR 的默认环境，应该如何处理呢？
答：
windows 7 在 /dev/vda2 亦即是 hd0,msdos2 这个地方，而 MBR 则是 hd0 即可，不需要加上分区啊！因此整个设置
会变这样：
[root@study ~]# vim /etc/grub.d/40_custom
menuentry 'Go to Windows 7' --id 'win7' {
insmod chain
insmod ntfs
set root=（hd0,msdos2）
chainloader +1
}
menuentry 'Go to MBR' --id 'mbr' {
insmod chain
set root=（hd0）
chainloader +1
}