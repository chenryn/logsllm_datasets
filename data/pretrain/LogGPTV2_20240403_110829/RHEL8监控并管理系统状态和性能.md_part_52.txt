本例的输出应如下所示：
``` screen
cat(16437) vfs_read 0x800005/1078319
cat(16437) vfs_read 0x800005/1078319
```
:::
:::
[]{#analyzing-system-performance-with-bpf-compiler_collection_assembly_monitoring-disk-and-i-o-activity-with-systemtap.html}
::: chapter
::: titlepage
# []{#analyzing-system-performance-with-bpf-compiler_collection_assembly_monitoring-disk-and-i-o-activity-with-systemtap.html#analyzing-system-performance-with-bpf-compiler_collection_assembly_monitoring-disk-and-i-o-activity-with-systemtap}第 42 章 使用 BPF Compiler Collection 分析系统性能 {.title}
:::
作为系统管理员，您可以使用 BPF Compiler Collection (BCC) 库创建用于分析
Linux 操作系统性能和收集信息的工具，这些信息可能难以通过其他接口获得。
::: section
::: titlepage
# []{#analyzing-system-performance-with-bpf-compiler_collection_assembly_monitoring-disk-and-i-o-activity-with-systemtap.html#bcc_analyzing-system-performance-with-bpf-compiler_collection}BCC 介绍 {.title}
:::
BPF Compiler Collection（BCC）是一个库，可帮助创建扩展的 Berkeley Packet
Filter（eBPF）程序。eBPF
程序的主要工具是在不需要额外的开销或存在安全问题的情况下，分析操作系统性能和网络性能。
BCC 不再需要用户了解 eBPF
的技术详情，并提供了许多开箱即用的起点，如带有预先创建的 eBPF 程序的
`bcc-tools`{.literal} 软件包。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
eBPF 程序在事件中触发，如磁盘 I/O、TCP
连接以及进程创建。程序不太可能导致内核崩溃、循环或者变得无响应，因为它们在内核的安全性虚拟机中运行。
:::
:::
::: section
::: titlepage
# []{#analyzing-system-performance-with-bpf-compiler_collection_assembly_monitoring-disk-and-i-o-activity-with-systemtap.html#installing-the-bcc-tools-package_analyzing-system-performance-with-bpf-compiler_collection}安装 bcc-tools 软件包 {.title}
:::
本节论述了如何安装 `bcc-tools`{.literal} 软件包，该软件包还会将 BPF
Compiler Collection (BCC) 库作为依赖项安装。
::: itemizedlist
**先决条件**
-   有效的 [*[[Red Hat Enterprise Linux
    订阅](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#basics-registering-managing-subscriptions){.link}]{.citetitle}*]{.emphasis}
-   包含 `bcc-tools`{.literal} 软件包的
    [*[[已启用存储库](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#basics-installing-software){.link}]{.citetitle}*]{.emphasis}
-   [更新的内核](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_monitoring_and_updating_the_kernel/updating-kernel-with-yum_managing-monitoring-and-updating-the-kernel#updating-the-kernel_updating-kernel-with-yum){.link}
-   根权限
:::
::: orderedlist
**流程**
1.  安装 `bcc-tools`{.literal} ：
    ``` literallayout
    # yum install bcc-tools
    ```
    BCC 工具安装在 `/usr/share/bcc/tools/`{.literal} 目录中。
2.  （可选）检查工具：
    ``` literallayout
    # ll /usr/share/bcc/tools/
    ...
    -rwxr-xr-x. 1 root root  4198 Dec 14 17:53 dcsnoop
    -rwxr-xr-x. 1 root root  3931 Dec 14 17:53 dcstat
    -rwxr-xr-x. 1 root root 20040 Dec 14 17:53 deadlock_detector
    -rw-r--r--. 1 root root  7105 Dec 14 17:53 deadlock_detector.c
    drwxr-xr-x. 3 root root  8192 Mar 11 10:28 doc
    -rwxr-xr-x. 1 root root  7588 Dec 14 17:53 execsnoop
    -rwxr-xr-x. 1 root root  6373 Dec 14 17:53 ext4dist
    -rwxr-xr-x. 1 root root 10401 Dec 14 17:53 ext4slower
    ...
    ```
    上表中的 `doc`{.literal} 目录包含每个工具的文档。
:::
:::
::: section
::: titlepage
# []{#analyzing-system-performance-with-bpf-compiler_collection_assembly_monitoring-disk-and-i-o-activity-with-systemtap.html#using-selected-bcc-tools-for-performance-analyses_analyzing-system-performance-with-bpf-compiler_collection}使用所选 bcc-tools 进行性能调整 {.title}
:::
这部分论述了如何使用 BPF Compiler Collection (BCC)
库中某些预先创建的程序来高效且安全地分析每个事件的系统性能。BCC
库中预创建的程序集可作为创建其他程序的示例。
::: itemizedlist
**先决条件**
-   [已安装 bcc-tools
    软件包](#analyzing-system-performance-with-bpf-compiler_collection_assembly_monitoring-disk-and-i-o-activity-with-systemtap.html#installing-the-bcc-tools-package_analyzing-system-performance-with-bpf-compiler_collection "安装 bcc-tools 软件包"){.link}
-   根权限
:::
### []{#analyzing-system-performance-with-bpf-compiler_collection_assembly_monitoring-disk-and-i-o-activity-with-systemtap.html#_using_execsnoop_to_examine_the_system_processes}使用 execsnoop 检查系统进程
::: orderedlist
1.  在一个终端中执行 `execsnoop`{.literal} 程序：
    ``` screen
    # /usr/share/bcc/tools/execsnoop
    ```
2.  在另一个终端执行中，例如：
    ``` screen
    $ ls /usr/share/bcc/tools/doc/
    ```
    以上可创建 `ls`{.literal} 命令的短时间进程。
3.  运行 `execsnoop`{.literal} 的终端显示类似如下的输出：
    ``` screen
    PCOMM	PID    PPID   RET ARGS
    ls   	8382   8287     0 /usr/bin/ls --color=auto /usr/share/bcc/tools/doc/
    ...
    ```
    `execsnoop`{.literal}
    程序打印出每个占用系统资源的新进程的输出行。它甚至会检测很快运行的程序（如
    `ls`{.literal} ）的进程，大多数监控工具也不会进行注册。
    `execsnoop`{.literal} 输出显示以下字段：
    ::: itemizedlist
    -   [**PCOMM**]{.strong} - 父进程名称。(`ls`{.literal})
    -   [**PID**]{.strong} - 进程 ID。(`8382`{.literal})
    -   [**PPID**]{.strong} - 父进程 ID。(`8287`{.literal})
    -   [**RET**]{.strong} - `exec()`{.literal}系统调用的返回值
        (`0`{.literal}) ，这会将程序代码加载到新进程中。
    -   [**ARGS**]{.strong} - 使用参数启动的程序的位置。
    :::
:::
要查看 `execsnoop`{.literal} 的详情、示例和选项，请参阅
`/usr/share/bcc/tools/doc/execsnoop_example.txt`{.literal} 文件。
有关 `exec()`{.literal} 的详情，请查看 `exec(3)`{.literal} 手册页。
### []{#analyzing-system-performance-with-bpf-compiler_collection_assembly_monitoring-disk-and-i-o-activity-with-systemtap.html#_using_opensnoop_to_track_what_files_a_command_opens}使用 opensnoop 跟踪命令打开的文件
::: orderedlist
1.  在一个终端中执行 `opensnoop`{.literal} 程序：
    ``` screen
    # /usr/share/bcc/tools/opensnoop -n uname
    ```
    以上列出了文件的输出，这些文件仅由 `uname`{.literal}
    命令的进程打开。
2.  在另一个终端中执行：
    ``` screen
    $ uname
    ```
    以上命令会打开某些在下一步中捕获的文件。
3.  运行 `opensnoop`{.literal} 的终端显示类似如下的输出：
    ``` screen
    PID    COMM 	FD ERR PATH
    8596   uname 	3  0   /etc/ld.so.cache
    8596   uname 	3  0   /lib64/libc.so.6
    8596   uname 	3  0   /usr/lib/locale/locale-archive
    ...
    ```
    `opensnoop`{.literal} 程序在整个系统中监视 `open()`{.literal}
    系统调用，并为 `uname`{.literal} 尝试打开的每个文件打印一行输出。
    `opensnoop`{.literal} 输出显示以下字段：
    ::: itemizedlist
    -   [**PID**]{.strong} - 进程 ID。(`8596`{.literal})
    -   [**COMM**]{.strong} - 进程名称。(`uname`{.literal})
    -   [**FD**]{.strong} - 文件描述符 - `open()`{.literal}
        返回的值以引用打开的文件。(`3`{.literal})
    -   [**ERR**]{.strong} - 任何错误。
    -   [**PATH**]{.strong} - `open()`{.literal} 试图打开的文件位置。
        如果命令尝试读取不存在的文件，则 `FD`{.literal} 列返回
        `-1`{.literal}，`ERR`{.literal}
        列将打印与相关错误对应的值。因此，`Opennoop`{.literal}
        可以帮助您识别行为不正确的应用程序。
    :::
:::
要查看 `opensnoop`{.literal} 的更多详细信息、示例和选项，请参阅
`/usr/share/bcc/tools/doc/opensnoop_example.txt`{.literal} 文件。
有关 `open()`{.literal} 的更多信息，请参阅 `open(2)`{.literal} 手册页。
### []{#analyzing-system-performance-with-bpf-compiler_collection_assembly_monitoring-disk-and-i-o-activity-with-systemtap.html#_using_biotop_to_examine_the_io_operations_on_the_disk}使用技术检查磁盘上的 I/O 操作
::: orderedlist
1.  在一个终端中执行 `biotop`{.literal} 程序：
    ``` screen
    # /usr/share/bcc/tools/biotop 30
    ```
    该命令可让您监控在磁盘中执行 I/O 操作的主要进程。参数确保命令生成 30
    秒概述。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果未提供任何参数，则默认情况下输出屏幕会每 1 秒刷新一次。
    :::
2.  在另一个终端中执行，例如：
    ``` screen
    # dd if=/dev/vda of=/dev/zero
    ```
    以上命令从本地硬盘设备读取内容，并将输出写入 `/dev/zero`{.literal}
    文件。此步骤会生成特定的 I/O 流量来演示 `biotop`{.literal}。
3.  运行 `biotop`{.literal} 的终端显示类似如下的输出：
    ``` screen
    PID    COMM             D MAJ MIN DISK       I/O  Kbytes     AVGms
    9568   dd               R 252 0   vda      16294 14440636.0  3.69
    48     kswapd0          W 252 0   vda       1763 120696.0    1.65
    7571   gnome-shell      R 252 0   vda        834 83612.0     0.33
    1891   gnome-shell      R 252 0   vda       1379 19792.0     0.15
    7515   Xorg             R 252 0   vda        280  9940.0     0.28
    7579   llvmpipe-1       R 252 0   vda        228  6928.0     0.19
    9515   gnome-control-c  R 252 0   vda         62  6444.0     0.43
    8112   gnome-terminal-  R 252 0   vda         67  2572.0     1.54
    7807   gnome-software   R 252 0   vda         31  2336.0     0.73
    9578   awk              R 252 0   vda         17  2228.0     0.66
    7578   llvmpipe-0       R 252 0   vda        156  2204.0     0.07
    9581   pgrep            R 252 0   vda         58  1748.0     0.42
    7531   InputThread      R 252 0   vda         30  1200.0     0.48
    7504   gdbus            R 252 0   vda          3  1164.0     0.30
    1983   llvmpipe-1       R 252 0   vda         39   724.0     0.08
    1982   llvmpipe-0       R 252 0   vda         36   652.0     0.06
    ...
    ```
    `biotop`{.literal} 输出显示以下字段：
    ::: itemizedlist
    -   [**PID**]{.strong} - 进程 ID。(`9568`{.literal})
    -   [**COMM**]{.strong} - 进程名称。(`dd`{.literal})
    -   [**DISK**]{.strong} - 执行读取操作的磁盘。(`vda`{.literal})
    -   [**I/O**]{.strong} - 执行读取操作的数量。(16294)
    -   [**Kbytes**]{.strong} - 读操作达到的 K 字节。(14,440,636)
    -   [**AVGms**]{.strong} - 读操作的平均 I/O 时间。(3.69)
    :::
:::
要查看 `biotop`{.literal} 的详情、示例和选项，请参阅
`/usr/share/bcc/tools/doc/biotop_example.txt`{.literal} 文件。
有关 `dd`{.literal} 的更多信息，请参阅 `dd(1)`{.literal} 手册页。
### []{#analyzing-system-performance-with-bpf-compiler_collection_assembly_monitoring-disk-and-i-o-activity-with-systemtap.html#_using_xfsslower_to_expose_unexpectedly_slow_file_system_operations}使用 xfsslower 来公开意料外的慢文件系统操作
::: orderedlist
1.  在一个终端中执行 `xfsslower`{.literal} 程序：
    ``` screen
    # /usr/share/bcc/tools/xfsslower 1
    ```
    以上命令测量 XFS 文件系统执行读取、写入、打开或同步
    (`fsync`{.literal}) 操作的时间。`1`{.literal} 参数可确保程序仅显示比
    1 ms 较慢的操作。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果未提供任何参数，`xfsslower`{.literal} 默认会显示比 10 ms
    慢的操作。
    :::
2.  在另一个终端中执行，例如：
    ``` screen
    $ vim text
    ```
    以上命令在 `vim`{.literal} 编辑器中创建了一个文本文件，用于启动与
    XFS 文件系统的某些互动。
3.  运行 `xfsslower`{.literal} 的终端显示在保存上一步中的文件时：
    ``` screen
    TIME     COMM           PID    T BYTES   OFF_KB   LAT(ms) FILENAME
    13:07:14 b'bash'        4754   R 256     0           7.11 b'vim'
    13:07:14 b'vim'         4754   R 832     0           4.03 b'libgpm.so.2.1.0'
    13:07:14 b'vim'         4754   R 32      20          1.04 b'libgpm.so.2.1.0'
    13:07:14 b'vim'         4754   R 1982    0           2.30 b'vimrc'
    13:07:14 b'vim'         4754   R 1393    0           2.52 b'getscriptPlugin.vim'
    13:07:45 b'vim'         4754   S 0       0           6.71 b'text'
    13:07:45 b'pool'        2588   R 16      0           5.58 b'text'
    ...
    ```
    上面的每一行代表文件系统中的一个操作，其用时超过特定阈值。`xfsslower`{.literal}
    非常适合公开可能的文件系统问题，这可能会导致意外的慢速操作。
    `xfsslower`{.literal} 输出显示以下字段：
    ::: itemizedlist
    -   [**COMM**]{.strong} - 进程名称。(`b'bash'`{.literal})
    -   [**t**]{.strong} - 操作类型。(`R`{.literal})
        ::: itemizedlist
        -   [**R**]{.strong}ead
        -   [**W**]{.strong}rite
        -   [**S**]{.strong}ync
        :::
    -   [**OFF_KB - KB**]{.strong} 中的文件偏移。(0)
    -   [**FILENAME**]{.strong} - 被读取、写入或者同步的文件。
    :::
:::
要查看 `xfsslower`{.literal} 的详情、示例和选项，请参阅
`/usr/share/bcc/tools/doc/xfsslower_example.txt`{.literal} 文件。
有关 `fsync`{.literal} 的详情请参考 `fsync(2)`{.literal} 手册页。
:::
:::