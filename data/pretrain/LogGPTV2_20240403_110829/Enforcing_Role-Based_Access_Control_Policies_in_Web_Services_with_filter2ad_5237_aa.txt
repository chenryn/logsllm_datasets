# Enforcing Role-Based Access Control Policies in Web Services with UML and OCL

**Authors:**
- Karsten Sohr
- Tanveer Mustafa
- Xinyu Bao
- Gail-Joon Ahn

**Conference:**
2008 Annual Computer Security Applications Conference (ACSAC 2008)

**Abstract:**

Role-based access control (RBAC) is a powerful method for implementing higher-level organizational policies, such as separation of duty, and simplifying the security management process. A key aspect of RBAC is the use of authorization constraints to express these policies. While RBAC has garnered significant interest in the security community, organizations still seek flexible and effective ways to enforce authorization constraints in their critical applications. This paper presents a Web Services-based authorization framework designed to enforce organization-wide authorization constraints. We describe a generic authorization engine that supports these constraints and acts as a central policy decision point within the framework. The authorization engine is implemented using the USE system, a validation tool for UML models and OCL constraints.

## 1. Introduction

Access control mechanisms are crucial in medium to large-scale organizations, particularly in security-critical sectors like financial institutions, hospitals, and the military. These organizations must control access to system resources without violating underlying access control policies. Recent research has highlighted role-based access control (RBAC) as an efficient and flexible model for managing access to computer resources and enforcing organizational policies. For example, a hospital might have a rule that "a nurse can only see the records of patients who have been on her ward within the previous 90 days." In banking, a rule might be "a clerk must not prepare and approve a check."

As noted by Ferraiolo et al., one of the main advantages of RBAC is its ability to naturally implement such high-level organizational rules. Specifically, role-based authorization constraints are a powerful means for laying out these rules. We define an RBAC policy as hierarchical RBAC, as per the RBAC standard, plus a set of organizational rules, each corresponding to a role-based authorization constraint, such as separation of duty (SOD) and context constraints.

Given that an organization may run multiple different applications, including legacy systems, enforcing organization-wide RBAC policies remains a challenge. Designing and implementing an RBAC system raises several critical questions:
1. How can we separate authorization logic from application logic to make organization-wide RBAC easier to administer?
2. How can we develop a platform and application-independent authorization engine that implements organization-wide RBAC policies?
3. What technological approach can facilitate the flexible integration of organization-wide authorization components and various applications?

In this paper, we present an authorization framework that addresses these challenges. The framework encompasses the specification, implementation, and enforcement of organization-wide RBAC policies. We show how to implement a platform and application-independent authorization engine that centrally administers RBAC policies. The engine is based on the USE system, a validation tool for UML models and OCL constraints. UML and OCL are used for specifying RBAC policies, and the OCL approach is formal and precise, capable of expressing various types of authorization constraints.

Additionally, we present an advanced Web Services-based RBAC authorization framework that enforces organization-wide RBAC policies across various applications. Web Services aim to integrate various applications, making the enforcement of RBAC policies at the middleware level an important task for simplifying access management. Our framework uses an interceptor, a middleware component, to integrate the organization-wide authorization engine and various applications via Web Services. This approach ensures that the application does not need to contain any authorization logic, and changes to the RBAC policy do not require modifications to the application.

We have implemented a prototypical interceptor for Java applications integrated over the Internet using SOAP-based Web Services. We also demonstrate the framework's functionality through various examples, combining well-understood modeling concepts with Web Service technology to implement advanced RBAC mechanisms for organizations.

The rest of the paper is organized as follows:
- Section 2 provides an overview of related concepts and technologies.
- Section 3 describes the authorization framework and its components in detail.
- Section 4 illustrates the overall functionality of the implemented framework.
- Section 5 uses case studies to demonstrate the effectiveness of our authorization engine in handling constraints from different domains.
- Section 6 reviews related work.
- Section 7 outlines our conclusions and future work.

## 2. Related Concepts and Technologies

### 2.1. RBAC and Authorization Constraints

RBAC has gained significant attention as an alternative to traditional discretionary and mandatory access control. It simplifies security administration by using roles to organize access privileges. The main RBAC components include:
- Sets U, R, P, S (users, roles, permissions, sessions)
- UA ⊆ U × R (user assignment relation)
- PA ⊆ P × R (permission assignment relation)
- RH ⊆ R × R (role hierarchy relation).

A user can be a member of multiple roles, and a role can have many users. Similarly, a role can have many permissions, and the same permissions can be assigned to multiple roles. A user may activate a subset of roles in a session, and the available permissions are the union of those from all activated roles. Role hierarchies are formed by the RH relation, where senior roles inherit permissions from junior roles.

Authorization constraints are a crucial aspect of RBAC, aimed at reducing the risk of fraud or security breaches and increasing the opportunity to detect errors in the organizational security structure. Various types of authorization constraints have been identified, including static and dynamic SOD constraints, delegation constraints, cardinality constraints, and context constraints.

Specifically, SOD is a fundamental principle in security systems, requiring operations to be divided among two or more persons so that no single individual can compromise security. SOD constraints enforce conflict of interest policies, either through static SOD (constraints on user-to-role assignments) or dynamic SOD (constraints on the roles that can be activated within or across a user's sessions).

### 2.2. UML and OCL

UML is a general-purpose modeling language used to specify, visualize, and document software system components. It has become a standard in software engineering, allowing the description of static, functional, and dynamic models of software systems. Here, we focus on static UML models, which provide a structural view of information in a system. Classes are defined in terms of their attributes and relationships, including associations between classes. Figure 1 shows the static UML model for RBAC, depicting the RBAC classes and associations.

OCL is a declarative language that describes constraints on object-oriented models. A constraint is a restriction on one or more values in an object-oriented model. Each OCL expression is written in the context of a specific class, using the reserved word `self` to refer to a contextual instance. The type of the context instance is specified with the `context` keyword, followed by the name of the type. The label `inv:` declares the invariant constraint.

![Class Model for RBAC-Entity Classes](fig1.png)

---

This optimized version of the text is more structured, coherent, and professional, making it easier to read and understand.