title:Enforcing Role-Based Access Control Policies in Web Services with
UML and OCL
author:Karsten Sohr and
Tanveer Mustafa and
Xinyu Bao and
Gail-Joon Ahn
2008 Annual Computer Security Applications Conference
2008 Annual Computer Security Applications Conference
Enforcing Role-Based Access Control Policies in Web Services with UML and 
OCL  
Karsten Sohr, Tanveer Mustafa, Xinyu Bao∗  
Center for Computing Technologies (TZI), Universität Bremen 
{sohr, tanveer, leonbao}@tzi.de 
Gail-Joon Ahn+  
Arizona State University 
PI:EMAIL 
Abstract 
to 
for 
impose 
role-based 
Role-based  access  control  (RBAC)  is  a  powerful 
means 
laying  out  higher-level  organizational 
policies such as separation of duty, and for simplifying 
the security management process. One of the important 
aspects  of  RBAC  is  authorization  constraints  that 
express such organizational policies. While RBAC has 
generated  a  great  interest  in  the  security  community, 
flexible  and  effective 
organizations  still  seek  a 
approach 
authorization 
constraints  in  their  security-critical  applications.  In 
this  paper,  we  present  a  Web  Services-based 
authorization  framework  that  can  be  employed  to 
enforce  organization-wide  authorization  constraints. 
We  describe  a  generic  authorization  engine,  which 
supports  organization-wide  authorization  constraints 
and  acts  as  a  central  policy  decision  point  within  the 
authorization  framework.  This  authorization  engine  is 
implemented by means of the USE system, a validation 
tool for UML models and OCL constraints.  
1. Introduction 
Employing access control mechanisms in medium to 
large scale organizations always has been crucial. One 
of 
security-critical 
organizations,  such  as  financial  institutes,  hospitals, 
challenging 
jobs 
the 
for 
and military is to control access to system resources at 
the  highest  level  without  violating  the  underlying 
access control policies. The research in recent years has 
brought role-based access control (RBAC) [3, 4] as an 
efficient  and  flexible  model  for  controlling  access  to 
computer  resources  and  enforcing  the  organizational 
policies.  According 
an 
organizational policy consists of a set of organizational 
rules.  A  typical  organizational  rule  in a hospital might 
be “a nurse can only see the records of all patients who 
have  been  on  her  ward  within  the  previous  90  days”. 
Similarly,  in  banking  applications,  a  rule  might  be  “a 
clerk must not prepare and approve a check”. 
terminology, 
our 
to 
As pointed out by Ferraiolo et al. [5, 21], one of the 
main  advantages  of  RBAC  is  that  such  higher-level 
organizational  rules  can  be  implemented  in  a  natural 
way.  Specifically,  role-based  authorization  constraints 
are  a  powerful  means  for  laying  out  higher-level 
organizational  rules  [7].  Hence,  we  define  an  RBAC 
policy as hierarchical RBAC in the sense of the RBAC 
standard  [14]  plus  a  set  of  organizational  rules  where 
each  rule  corresponds  to  a  role-based  authorization 
constraint, such as separation of duty (SOD) constraints 
[7, 8, 9], and context constraints [10, 11]. 
Given the fact that an organization will be running a 
number  of  different  applications  (assuming  legacy 
applications  as  well),  employing  an  approach  to 
enforce  different  organization-wide  RBAC  policies  is 
∗ This work was supported in part by the German Federal Ministry of Education and Research (BMBF) under the grant FKZ01ISF19B and 
by the German Research Council (DFG) under the grant SO 515/2-1. 
+ This work was partially supported by the grants from National Science Foundation (NSF-IIS-0242393, NSF-CNS-0831360) and Department of 
Energy Early Career Principal Investigator Award (DE-FG02-03ER25565). 
1063-9527/08 $25.00 © 2008 IEEE
1063-9527/08 $25.00 © 2008 IEEE
DOI 10.1109/ACSAC.2008.35
DOI 10.1109/ACSAC.2008.35
257
257
still  an  open  problem.  Designing  and  implementing 
such an RBAC system raise many critical questions, of 
which  some  of  them  are:  (1)  how  can  we  separate 
authorization  logic  (access  control  mechanisms)  from 
the  application  logic  (application  code)  to  make 
organization-wide  RBAC 
to 
administer?,  (2)  how  can  a  platform  and  application 
independent  authorization  engine  be  developed  that 
implements organization-wide RBAC policies?, and (3) 
what 
that 
facilitates  a  flexible  integration  of  organization-wide 
authorization components and various applications?  
technological  approach  can  we  adopt 
policies 
easier 
In 
this  paper,  we  present  an  authorization 
framework  as  a  first  step  towards  the  solution  to  the 
aforementioned 
framework 
encompasses the specification, implementation, and the 
enforcement of organization-wide RBAC policies.  
problems. 
This 
and 
SOD 
constraints, 
to  specify  and 
Firstly,  we  show  an  implementation  of  a  platform 
and  application  independent  authorization  engine  that 
implements  organization-wide  RBAC  policies.  This 
way  the  RBAC  policies  can  be  centrally administered. 
The  authorization  engine  is  based  on  the  USE  system 
[16],  a  validation  tool  for  UML  models  and  OCL 
(Object  Constraint  Language)  constraints.  In  general, 
the UML [1] and OCL [2] can be used in combination 
for designing and developing software systems. We use 
UML/OCL  specifically  for  the  specification  of  RBAC 
policies  in  our  authorization  framework.  The  OCL 
approach is formal and precise, and can express various 
kinds  of  authorization  constraints,  such  as  static  and 
History-based 
context 
constraints.  The  authorization  engine,  in  general,  is 
powerful  enough 
implement  all 
authorization  constraints  that  are  expressible  in  OCL. 
Moreover,  the  USE  tool  itself  can  be  employed  to 
validate RBAC policies formulated in UML and OCL.  
Secondly,  we  present  an  advanced  Web  Services-
based  RBAC  authorization  framework,  which  can  be 
employed to enforce organization-wide RBAC policies 
across various applications. Owing to the fact that Web 
Services  aim  at  integrating  various  applications  of  an 
organization  the  enforcement  of  organization-wide 
RBAC policies at the Web Service (middleware) level 
is an important task to simplify access management. In 
particular,  organizations  integrate  more  and  more 
applications  by  means  of  Web  Services  and  make 
available  Web-Service  interfaces  to  expose  specific 
(often 
such 
applications. For example, the functionality of a credit 
rating  application  might  be  exposed  to  clerks  in 
branches  of  a  financial  institute  [28].  Due  to  the  fact 
that  specifically  legacy  applications  often  do  not  have 
adequate  access  control  mechanisms,  our  proposed 
security-critical) 
functionality 
of 
authorization  approach  helps  in  improving  security 
within organizations by enforcing organizational rules.  
Our  authorization  framework  is  based  on  the 
concept  of  an  interceptor,  a  middleware  component. 
The  interceptor  is  used  to  integrate  the  organization-
wide  authorization  engine  and  various  application(s) 
into  the  middleware  by  means  of  Web  Services.  In 
general,  the  interceptor  plays  a  central  role  to  enforce 
organization-wide  RBAC  policies.  One  of  the  benefits 
of this approach is that the application does not need to 
contain  any  authorization  logic  and  any  change  of  the 
RBAC policy does not require any modifications of the 
application. 
In 
We implemented a prototypical interceptor for Java 
applications  that  are  integrated  over  the  Internet  by 
SOAP-based  Web  Services. 
addition,  we 
demonstrate  how  the  authorization  framework  copes 
with the specification, implementation and enforcement 
of  authorization  constraints  through  various  examples. 
This  way,  our  approach  combines  well-understood 
concepts  of  a widely used modeling language with the 
Web  Service 
implement  advanced 
RBAC mechanisms for organizations.   
technology 
to 
The  rest  of  the  paper  is  organized  as  follows:  in 
Section  2  we  provide  a  brief  overview  of  related 
concepts  and  technologies.  Section  3  provides  an 
overview of the authorization framework and a detailed 
description  of  the  framework  components  follows.  In 
Section  4,  we  illustrate  the  overall  functionality  of  the 
implemented  framework.  In  Section  5,  we  use  case 
studies  to  demonstrate  that  our  authorization  engine 
can  deal  with  authorization  constraints  from  different 
domains, and how such constraints are enforced within 
our  authorization  framework.  An  overview  of  related 
work is given in Section 6. We outline our conclusions 
and future work in Section 7. 
2. Related concepts and technologies 
2.1. RBAC and authorization constraints  
RBAC  [3,  4]  has  gained  much  attention  as  an 
alternative  to  traditional  discretionary  and  mandatory 
access  control.  It  is  an  access  control  model  in  which 
the security administration can be simplified by the use 
of  roles  to  organize  the access privileges [5]. We now 
give an overview of the main RBAC components: 
•  the  sets  U,  R,  P,  S  (users,  roles,  permissions, 
sessions) 
•  UA  ⊆  U × R (user assignment relation) 
•  PA  ⊆  P × R (permission assignment relation) 
•  RH  ⊆  R × R (role hierarchy relation). 
258258
A  user  can  be  a  member  of  many  roles  and  a  role 
can  have  many  users.  Similarly,  a  role  can  have  many 
permissions and the same permissions can be assigned 
to many roles. A user may activate a subset of roles he 
or  she  is  assigned  to  in  a  session.  The  permissions 
available to the users are the union of permissions from 
all  roles activated in that session. Role hierarchies can 
be  formed  by  the  RH  relation.  Senior  roles  inherit 
permissions from junior roles through RH (e.g., a chief 
physician inherits all permissions from the physician). 
Authorization constraints are an important aspect of 
RBAC  and  are  sometimes  considered  to  be  the 
principle  motivation  behind  RBAC.  The  goal  of 
authorization  constraints  is  not  only  to  reduce  the  risk 
of  fraud  or  a  security  breach  but  to  increase  the 
opportunity of detecting errors within an organizational 
security  structure.  Authorization  constraints  may  need 
to be imposed on the RBAC functions and relations in 
order to prevent the information misuse and fraudulent 
activities. 
several  kinds  of 
authorization  constraints  have  been  identified  such  as 
various types of static and dynamic SOD constraints [7, 
8,  9];  constraints  on  delegation  [10];  cardinality 
constraints [3]; context constraints [10, 11]. 
literature, 
In 
the 
that  no  single 
Specifically,  SOD  is  a  fundamental  principle  in 
security  systems  and  is  typically  considered  as  a 
requirement that, operations are divided among two or 
more  persons  so 
individual  can 
compromise  the  security.  SOD  constraints  are  used  to 
enforce  conflict  of  interest  policies.  One  means  of 
preventing  conflict  of  interest  is  through  static  SOD, 
that  is,  to  enforce  constraints  on  the  assignment  of 
users  to  roles.  On  the  other  hand,  the  dynamic  SOD 
constraints limit the permissions that are available to a 
user  by  placing  constraints  on  the  roles  that  can  be 
activated within or across a user's sessions. 
2.2.   UML and OCL 
UML  is  a  general-purpose  modeling  language  in 
which  we  can  specify,  visualize,  and  document  the 
components of software systems [1]. UML has become 
a  standard  modeling  language  in  the  field  of  software 
engineering,  and  allows  one 
to  describe  static, 
functional,  and  dynamic  models  of  software  systems. 
Here,  we  concentrate  on  the  static  UML  models.  A 
static  model  provides  a  structural  view  of  information 
in  a  system.  Classes  are  defined  in  terms  of  their 
attributes  and  relationships.  The  relationships  include 
specifically  associations  between  classes.  In  Figure  1, 
the  static  UML  model  for  RBAC  consisting  of  the 
RBAC classes and associations is depicted (UML class 
diagram). The classes and associations correspond to  
Fig. 1. Class model for RBAC-entity classes. 
the RBAC sets and relations defined in Section 2.1. 
OCL  [2]  is  a  declarative  language  that  describes 
constraints on object-oriented models. A constraint is a 
restriction on one or more values of an object-oriented 
model.  Each  OCL  expression  is  written  in  the  context 
of a specific class. In an OCL expression, the reserved 
word  self  is  used  to  refer  to  a  contextual  instance. 
The type of the context instance of an OCL expression 
is written with the context keyword, followed by the 
name  of  the  type.  The  label  inv:  declares  the 