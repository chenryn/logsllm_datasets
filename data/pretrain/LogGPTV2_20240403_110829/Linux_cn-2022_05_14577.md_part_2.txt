现在这个分区应该已经有了 Btrfs 文件系统。挂载它然后查看你的文件……和子卷！
```
# mount /dev/sdXX /mnt （请替换为你的具体的设备路径）
# man btrfs-subvolume （阅读它）
# btrfs subvolume list / （使用 -t 以表格方式查看）
```
因为你已经阅读了 [相关的手册页](https://www.mankier.com/8/btrfs-subvolume#Subvolume_and_Snapshot)，你应该知道创建子卷快照是安全的，并且有 `ext2-saved` 子卷作为你之前数据的简易备份。
> 
> 是时候阅读 [Btrfs 系统管理指南](https://btrfs.wiki.kernel.org/index.php/SysadminGuide)了，这样你就不会把常规文件夹和子卷混淆了。
> 
> 
> 
#### 创建子卷
我们希望实现一个“扁平”子卷布局，这和 Anaconda 默认创建的布局相同：
```
toplevel （卷根目录，不能被默认挂载）
  +-- root （子卷根目录，被挂载到 /）
  +-- home （子卷根目录，被挂载到 /home）
```
你可以跳过这个步骤，或者使用一个不同的布局。这种特殊结构的优势是你可以轻松的创建 `/home` 的快照，并且对每个子卷使用不同的压缩和挂载参数。
```
# cd /mnt
# btrfs subvolume snapshot ./ ./root2
# btrfs subvolume create home2
# cp -a home/* home2/
```
这里我们已经创建了两个子卷。`root2` 是一个完整的分区快照，而 `home2` 开始是一个空子卷，然后我们往里复制内容。（这个 `cp` 命令不会重复数据，所以会很快。）
* 在 `/mnt` 目录（顶层子卷），删除除了 `root2`、`home2` 和 `ext2_saved` 之外的所有内容。
* 重命名 `root2` 和 `home2` 子卷为 `root` 和 `home`。
* 在 `root` 子卷里，清空 `home` 目录，以便之后我们能够挂载 `home` 子卷。
如果都做对了，那就很简单了！
#### 修改 fstab 分区表
为了重启之后挂载新卷，必须要修改 `fstab`，用新的行来代替旧的 ext4 文件系统挂载行。
你可以使用 `blkid` 命令来找到你的分区的 UUID。
```
UUID=xx / btrfs subvol=root 0 0 （请替换为你的具体 UUID）
UUID=xx /home btrfs subvol=home 0 0 （请替换为你的具体 UUID）
```
（注意如果指向的是同一个分区，那么这两个 UUID 是相同的。）
这些都是新安装的 Fedora 33 的默认值。在 `fstab` 中，你也可以选择自定义压缩和添加类似 `noatime` 这样的参数。
> 
> 可以查看 [关于压缩参数的维基页面](https://btrfs.wiki.kernel.org/index.php/Compression) 和 [man 5 btrfs](https://www.mankier.com/5/btrfs) 了解所有相关的参数。
> 
> 
> 
#### chroot 到系统
如果你曾经做过系统恢复，我想你肯定知道这些命令。这里，我们将得到一个 *基本上* 在你系统里的 shell 提示符，可以访问网络。
首先，我们必须重新挂载 `root` 子卷到 `/mnt` 目录，然后挂载 `/boot` 和 `/boot/efi` 分区（它们可能有所不同，这取决于你的文件系统布局）：
```
# umount /mnt
# mount -o subvol=root /dev/sdXX /mnt （请替换为你的具体的设备路径）
# mount /dev/sdXX /mnt/boot （请替换为你的具体的设备路径）
# mount /dev/sdXX /mnt/boot/efi （请替换为你的具体的设备路径）
```
然后我们继续挂载系统设备：
```
# mount -t proc /proc /mnt/proc
# mount --rbind /dev /mnt/dev
# mount --make-rslave /mnt/dev
# mount --rbind /sys /mnt/sys
# mount --make-rslave /mnt/sys
# cp /mnt/etc/resolv.conf /mnt/etc/resolv.conf.chroot
# cp -L /etc/resolv.conf /mnt/etc
# chroot /mnt /bin/bash
$ ping www.fedoraproject.org
```
#### 重装 GRUB 及内核
最容易的方法就是重装 GRUB 和 内核，因为它完成了所有必要的配置 —— 现在我们可以访问网络了。所以，在 chroot 环境内部：
```
# mount /boot/efi
# dnf reinstall grub2-efi shim
# grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg
# dnf reinstall kernel-core
...或者干脆重新生成 initramfs：
# dracut --kver $(uname -r) --force
```
如果你是支持 UEFI 的系统，这里是适用的。如果你是 BIOS 的系统，请查看下面的文档。重启之前，让我们查看是否一切正常：
```
# cat /boot/grub2/grubenv
# cat /boot/efi/EFI/fedora/grub.cfg
# lsinitrd /boot/initramfs-$(uname -r).img | grep btrfs
```
你应该在 `grubenv` 和 `grub.cfg` 有正确的分区 UUID 或指向（`grubenv` 可能没有更新，如有必要可以编辑它），并在 `grub.cfg` 中看到 `insmod btrfs` 配置和在 initramfs 镜像中有 btrfs 模块。
> 
> 参见: Fedora 系统管理指南中的 [重装 GRUB 2](https://docs.fedoraproject.org/en-US/fedora/f33/system-administrators-guide/kernel-module-driver-configuration/Working_with_the_GRUB_2_Boot_Loader/#sec-Reinstalling_GRUB_2) 和 [验证初始 RAM 磁盘镜像](https://docs.fedoraproject.org/en-US/fedora/f33/system-administrators-guide/kernel-module-driver-configuration/Manually_Upgrading_the_Kernel/#sec-Verifying_the_Initial_RAM_Disk_Image) 。
> 
> 
> 
#### 重启
现在系统能够正常启动。如果不能，别慌，回到实时镜像修复这个问题。最坏的情况下，你可以从那里重装 Fedora 。
#### 首次启动之后
检查你的新 Btrfs 文件系统一切都正常。如果你觉得没问题，你需要回收旧的 ext4 快照使用的空间，进行碎片整理和平衡子卷。后两者可能要花一些时间，并且相当耗费资源。
对此你必须这样挂载顶级子卷：
```
# mount /dev/sdXX -o subvol=/ /mnt/someFolder
# btrfs subvolume delete /mnt/someFolder/ext2_saved
```
然后，当机器有空闲时间时，运行这些命令：
```
# btrfs filesystem defrag -v -r -f /
# btrfs filesystem defrag -v -r -f /home
# btrfs balance start -m /
```
最后，有一个 “非写时复制” [属性](https://www.mankier.com/1/chattr#Attributes-C)，对于新系统，这个属性是为虚拟机镜像文件夹自动设置的。如果你使用虚拟机的话，可以设置它：
```
# chattr +C /var/lib/libvirt/images
```
```
$ chattr +C ~/.local/share/gnome-boxes/images
```
这个属性只会对在这些文件夹里的新文件生效。复制镜像并删除原镜像，你可以通过 `lsattr` 确认结果。
### 总结
我真心希望你发现这个教程是有用的，并且能够对是否在你的系统上转换为 Btrfs 做出谨慎而明智的决定。祝你成功转换！
欢迎在评论中分享你的经验，或者遇到更深层次的问题，请在 [ask.fedoraproject.org](https://ask.fedoraproject.org/) 提问。
---
via: 
作者：[Gergely Gombos](https://fedoramagazine.org/author/gombosg/) 选题：[lujun9972](https://github.com/lujun9972) 译者：[hwlife](https://github.com/hwllife) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出