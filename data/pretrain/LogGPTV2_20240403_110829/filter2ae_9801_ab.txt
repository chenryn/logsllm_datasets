            logger.log(Level.INFO, "Keystore will be created for " + name);
            File keyFile = new File("..\\jre\\bin\\SelfService.keystore");
            if (keyFile.exists()) {
                File bckFile = new File("..\\jre\\bin\\SelfService_" + System.currentTimeMillis() + ".keystore");
                keyFile.renameTo(bckFile);
            }
            StringBuilder keyCmd = new StringBuilder("..\\jre\\bin\\keytool.exe  -J-Duser.language=en -genkey -alias tomcat -sigalg SHA256withRSA -keyalg RSA -keypass ");
            keyCmd.append(password);
            keyCmd.append(" -storePass ").append(password);
            String keyLength = sslSettings.getString("KEY_LENGTH");
            if (keyLength != null && !keyLength.equals("")) {
                keyCmd.append(" -keysize ").append(keyLength);
            }
            String validity = sslSettings.getString("VALIDITY");
            if (validity != null && !validity.equals("")) {
                keyCmd.append(" -validity ").append(validity);
            }
            String san_name = sslSettings.getString("SAN_NAME");
            keyCmd.append(" -dName \"CN=").append(ClientUtil.keyToolEscape(sslSettings.getString("COMMON_NAME")));
            keyCmd.append(", OU= ").append(ClientUtil.keyToolEscape(sslSettings.getString("OU")));
            keyCmd.append(", O=").append(ClientUtil.keyToolEscape(sslSettings.getString("ORGANIZATION")));
            keyCmd.append(", L=").append(ClientUtil.keyToolEscape(sslSettings.getString("LOCALITY")));
            keyCmd.append(", S=").append(ClientUtil.keyToolEscape(sslSettings.getString("STATE")));
            keyCmd.append(", C=").append(ClientUtil.keyToolEscape(sslSettings.getString("COUNTRY_CODE")));
            keyCmd.append("\" -keystore ..\\jre\\bin\\SelfService.keystore");
            if (san_name != null && !san_name.equals("")) {
                keyCmd.append(" -ext SAN=");
                String[] san_name_arr = san_name.split(",");
                for(int i = 0; i   提供方类名
     -providerpath         提供方类路径
##### 失败尝试：拼接命令
执行命令时可以通过`&&`拼接其他要执行的命令，能否直接通过`&&`完成命令执行呢？
不可以，本来我想尝试直接闭合后面的内容后再通过`&&`拼接其他命令执行，但是经过查阅资料这样是不行的，只有当使用`cmd
/c`时才可以使用`&&`拼接执行。后面的命令能执行成功的前提是前面的命令没有报错，如果前面的命令出错后面拼接的命令是无法执行成功的。
如果没有使用`cmd /c`也无法执行后面的命令
## 修复分析
在`6116`版本中修复结果如下。
### 认证绕过
在`6116`中，直接使用`/./RestAPI/LicenseMgr`会返回500无法测试能否绕过，经过排错，这个版本需要加上参数才能正常执行，否则不会经过过滤器。
使用`/xxx/../RestAPI/LicenseMgr?operation=unspecified`绕过，发现在`ADSFilter#doSubFilters`中存在如下代码。
查看`isRestRequest`的内容，可以看到通过`getNormalizedURI`对URL经过处理后才进行正则匹配。
    public static boolean isRestAPIRequest(HttpServletRequest request, JSONObject filterParams) {
            String restApiUrlPattern = "/RestAPI/.*";
            try {
                restApiUrlPattern = filterParams.optString("API_URL_PATTERN", restApiUrlPattern);
            } catch (Exception var5) {
                out.log(Level.INFO, "Unable to get API_URL_PATTERN.", var5);
            }
            //处理URL
            String reqURI = SecurityUtil.getNormalizedURI(request.getRequestURI());
            String contextPath = request.getContextPath() != null ? request.getContextPath() : "";
            reqURI = reqURI.replace(contextPath, "");
            reqURI = reqURI.replace("//", "/");
            //正则匹配
            return Pattern.matches(restApiUrlPattern, reqURI);
        }
`getNormalizedURI` 会对`./`和`../`进行处理，所以无法使用这种方式绕过了。
但是根据我们之前的分析，也可以通过`/RestAPI；/LicenseMgr?operation=unspecified`绕过，但也是不行的，使用上述payload返回500错误。查看配置发现URL会被`Security
Filter`处理。
在`SecurityFilter#doFilter`中会判断URL中是否包含`;`或者`%3b`，如果是则直接退出。
### 文件上传
`SmartCardAPI#addSmartCardConfiguration`不再使用`getFileFromRequest`完成上传操作，而使用`getFileFromMultipartRequest`。
`getFileFromMultipartRequest`虽然还是会进行文件上传操作，但是上传路径和名称都不可控。
### 命令执行
`createCSR`已经不再使用拼接命令的方式创建证书，因此也不存在命令执行漏洞。
## 总结
这个漏洞的权限认证绕过和文件上传其实比较普通，作者发现的受限的命令执行配合文件上传导致RCE的过程算是这个洞的亮点吧。之前分析认证绕过的地方有些错误，感谢`killer`师傅指正。
## 参考文章
  * [HOW TO EXPLOIT CVE-2021-40539 ON MANAGEENGINE ADSELFSERVICE PLUS](https:_www.synacktiv.com_publications_how-to-exploit-cve-2021-40539-on-manageengine-adselfservice-plus)