# 【技术分享】Edge浏览器上的SOP绕过/UXSS（含演示视频）
|
##### 译文声明
本文是翻译文章，文章来源：brokenbrowser.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
翻译：[ **兴趣使然的小胃**](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**一、前言**
在这篇文章中，我们将探索微软Edge浏览器上的另一种SOP（Same Origin
Policy，同源策略）绕过方法。无域化（domainless）页面能够自由访问其他域（domain）的页面，基于这个事实，我们通过滥用data/meta标签，完成了Edge浏览器的SOP绕过任务。
如果你时间宝贵，你可以先看一下这个59秒的漏洞利用[视频](http://v.youku.com/v_show/id_XMjcyNjYyOTM4OA==.html)，这个视频中我们以达尔文的身份发布了推文。你也可以看一下这个2分钟的[视频](http://v.youku.com/v_show/id_XMjcyNjY0MjY3Mg==.html)，我们在这个视频中以查尔斯的身份手动发布推文，同时抓取了用户的密码（感谢微软Edge浏览器的默认密码管理器）。如果你想看更多的技术细节，可以继续往下看。
如果你是第一次看这类文章，我建议你可以先看一下这两篇SOP绕过文章：[【技术分享】Edge浏览器上的SOP绕过/UXSS（含演示视频）](http://bobao.360.cn/learning/detail/3789.html)以及[【技术分享】IE上的UXSS/SOP绕过-再次冒险在无域的世界](http://bobao.360.cn/learning/detail/3659.html)。本文的核心思想与这两篇一样，但利用技术更加新颖。
让我们快速回顾下一个重要事实：about:blank页面总是与他的引用页面处于同一个域（domain），这也意味着来自于twitter的iframe中的“about:blank”页面无法访问google的空白页。即便这两者的地址能够匹配成功（都为about:blank），但他们的“document.domain”是不同的。
在早些时候，我们可以在没有domain的前提下创建about:blank页面，或者创建domainless的about:blank页面。这些页面可以访问每个about:blank页面，而无视这些页面的domain值。举个例子，我们的主页面中有个domainless的空白页，渲染了两个iframe，其中一个指向twitter，另一个指向google。这些iframe内部都包含空白的子iframe，它们的domain分别为twitter以及google。在这种场景下，顶层窗口能够访问具有domain的空白页，也就是说，能够访问google和twitter的DOM（Document
Object Model，文档对象模型）。如下图所示：
在早些时候，上面描述的这个漏洞场景可以正常工作，直到微软在三个月之前发布了补丁，修复了这个漏洞。微软使用了一个非常巧妙的方法来修复这个漏洞：domainless的空白页再也不是真正的domainless了，这些页面在漏洞修复后都使用了随机的GUID作为他们的domain，比如“{53394a4f-8c04-46ab-94af-3ab86ffcfd4c}”。还有另外一点也十分有趣，那就是这些页面的domain值看上去像是空白的（或者是空的），但实际情况并非如此。换句话说，Edge浏览器会隐藏GUID的值，并返回空的domain值，但在浏览器内部，domain的值仍为GUID。
让我们开始实验。打开Edge浏览器，同时打开开发者工具（DevTools，F12开启），在地址栏输入“about:blank”，在之前，我们这样做会创建一个domainless的空白页，现在看起来貌似一切如故，但这其实是Edge的障眼法。让我们好好欣赏一下Edge的表演，我们有足够的时间来揭开它的伪装。
如我们所看到的一般，DevTools认为我们的domain值为空，但事实并非如此。
**二、打破障眼法**
现在DevTools已经被欺骗，我们怎么能看透事实的真相呢？实际上并不难，我们可以尝试使用相对路径，随意加载一个页面，或者改变一下这个窗口的位置，或者使用一个“document.write”语句，就可以打破这种障眼法。我们试一下“location.href=1”这个语句，看一下会发生什么。
**三、之前的漏洞已被修复**
我们之前使用的创建domainless空白页的[漏洞](https://www.brokenbrowser.com/uxss-edge-domainless-world/)已经被修复。在之前的这个漏洞中，我们借助Flash/GetURL机制在主窗口（顶层窗口）设置了一个“data:uri”地址。但漏洞修复后，情况变得更加糟糕，我们再也不能自动运行Flash了！在Windows
Creators更新之后，Edge浏览器在运行Flash之前会征求用户的许可。
这种情况下，以前的[PoC](http://unsafe.cracking.com.ar/demos/edge-domainless-uxss/bing/index.html)就显得毫无作用，不过还是应该感谢Edge团队在安全方面的工作。
**四、再次找到一个新的domainless空白页**
我们之前的“data:uri”技巧不能再起作用了，那么我们怎么克服这个困难呢？首先，我放弃了钻研顶层窗口的方式，再次与iframe搏斗，因为就我们以前的经验来看，Edge浏览器并不喜欢主窗口中存在“data:uri”形式的地址。
    top.location.href = "data:text/html,SOMETHING"; // Fails badly, error page
我们发现iframe的地址还是可以成功设为“data:uri”的地址形式。然而，这并不是一个bug，因为iframe的domain与顶层窗口的domain是相互隔离的。
正如我们之前在“[读者模式的SOP绕过](https://www.brokenbrowser.com/sop-bypass-abusing-read-protocol/)”这篇文章中看到的一样，Edge浏览器对“data:uri”的隔离方式可以被绕过（只需要在自身使用document.write语句，我们就可以访问上层窗口），但我们现在不想使用这种方式。现在访问顶层窗口没有任何意义，我们需要的是找到获取domainless空白页的方法。为此，我们需要使用三重组合，也就是data-meta-data组合。这样就可以迫使Edge浏览器把从我们这里夺取的果实再次还回来。
具体说来，我们会将某个iframe的地址设置为“data:uri”形式，这个iframe会触发一个meta refresh，重定向到另一个data:uri。
**小贴士：如何创建一个domainless空白页：**
**1\. 设置iframe的地址为“data:uri”形式**
**2\. 这个“data:uri”会渲染一个meta refresh标签**
**3\. “meta refresh”会重定向到另一个“data:uri”地址**
我们先来构造一个URL，这个URL可以将常规的（即有domain）的iframe转换为domainless的iframe。脑海里牢记“data-meta-data”这个组合，你就能理解我们为什么要这么构造。
我知道上面这种构造方式没那么完美（当然没有像E=mc2那么完美），但是我们使用这种技巧可以窃取爱因斯坦的凭证、邮件、paypal账户，甚至以他的名义发一些推文。我们先来测试一下目前的进展是否顺利。我们的测试对象是bing.com，因为它包含一个内部空白iframe，同时没有使用[XFO](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options)。
**五、使用bing.com来热身**
我们将会创建带有两个iframe的web页面，其中一个为bing.com的iframe，另一个是domainless的iframe。我们最终会在domainless的iframe中执行bing内部空白iframe中的代码。Bing的图片恰好满足我们的需求。我会打开Chrome浏览器，向大家描述我想表达的具体含义。
现在进展不错，我们会将该页面frame化，同时借助我们前面提到的domainless的“data-meta-data“方式，将代码注入到空白的iframe中。但有一点我没有提到，你是否还记得，在我们最开始的domainless
SOP文章中，我们在处理nature.com时碰到了一个命名问题。如果你没有印象，我们可以来快速回顾一下。
此时此刻，我们的domainless
iframe已经可以访问bing的空白页，但选择具体的访问机制是非常重要的。我们不能直接访问DOM，必须使用window.open方法才可以。换句话说，如果bing是主页面的第一个iframe，我们无法使用以下这种方式访问它的内部iframe：
    alert(top[0][0].document.cookie); // ACCESS DENIED
事实上，我们也不能使用以下这种方式：
    top[0][0].location.href = "javascript:alert(document.cookie)"; // ACCESS DENIED
那么我们该怎么做呢？非常简单，我们可以使用window.open方法，利用iframe的名字打开一个javascript
url就可以了。比如，如果bing的内部iframe名字是“INNER_IFRAME”，那么以下这行代码就能成功运行：
    window.open("javascript:alert(document.cookie)", "INNER_IFRAME"); // SOP BYPASSED!
但非常讨厌的是，bing的内部iframe并没有名字！不要灰心，我们可以请求Bing团队为这个iframe设置一个名字（开玩笑的），或者我们需要继续往前努力。
**六、设置iframe的名字**
如果我们不具备某个iframe的所有权，我们就不能设置它的名字，除非它与我们处于同一个domain。接下来我们要渲染一个包含空白页面的bing
iframe。外部iframe处于不同的domain中，但标签（tag）本身（元素和对象）处于我们的domain中，因此我们可以随心所欲任意设置它的名称。