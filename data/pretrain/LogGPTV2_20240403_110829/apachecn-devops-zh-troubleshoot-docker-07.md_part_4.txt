 valid_lft forever preferred_lft forever
25: eth1@if26:  mtu 1500 qdisc 
     noqueue state 
    UP 
 link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff
 inet 172.18.0.2/16 scope global eth1
 valid_lft forever preferred_lft forever
 inet6 fe80::42:acff:fe12:2/64 scope link 
 valid_lft forever preferred_lft forever
```
另一个容器也将连接到存在于另一台主机上的`prod`网络接口:
```
$ docker run -d -it --net prod --name dev-vm-7 ubuntu:12.04
d073f52a7eaacc0e0cb925b65abffd17a588e6178c87183ae5e35b98b36c0c25
$ docker attach d073
root@d073f52a7eaa:/# ip address
26: eth0@if27:  mtu 1450 qdisc 
     noqueue state 
    UP 
 link/ether 02:42:0a:00:00:03 brd ff:ff:ff:ff:ff:ff
 inet 10.0.0.3/24 scope global eth0
 valid_lft forever preferred_lft forever
 inet6 fe80::42:aff:fe00:3/64 scope link 
 valid_lft forever preferred_lft forever
28: eth1@if29:  mtu 1500 qdisc 
     noqueue state 
    UP 
 link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff
 inet 172.18.0.2/16 scope global eth1
 valid_lft forever preferred_lft forever
 inet6 fe80::42:acff:fe12:2/64 scope link 
 valid_lft forever preferred_lft forever
root@d073f52a7eaa:/# 
```
这就是如何在 Docker Swarm 集群中的主机之间配置专用网络。
## 所有多主机 Docker 网络解决方案的比较
|  | **印花布** | **法兰绒** | **编织** | **Docker 覆盖不适用** |
| **网络模型** | 第三层解决方案 | VxLAN 或 UDP | VxLAN 或 UDP | 维克斯兰 |
| **名称服务** | 不 | 不 | 是 | 不 |
| **协议支持** | TCP、UDP、ICMP 和 ICMPv6 | 全部 | 全部 | 全部 |
| **分布式存储** | 是 | 是 | 不 | 是 |
| **加密通道** | 不 | 坦克激光瞄准镜（Tank Laser-Sight 的缩写） | NaCI 图书馆 | 不 |
# 配置 openvsswitch(OVS)与 Docker 一起工作
**Open vsswitch**(**OVS**)是一款开源的 **OpenFlow** 功能虚拟交换机，通常与虚拟机管理程序一起使用，通过网络将主机内部以及不同主机之间的虚拟机互连起来。覆盖网络需要使用支持的隧道封装(如 VXLAN 或 GRE)来创建虚拟数据路径。
覆盖数据路径在驻留在 Docker 主机中的隧道端点之间提供，这给出了给定提供商段内的所有主机彼此直接连接的外观。
当新容器上线时，路由协议中的前缀会更新，通过隧道端点宣布其位置。当其他 Docker 主机收到更新时，会将转发安装到主机所在的 OVS 隧道端点。取消置备主机时，会发生类似的过程，隧道端点 Docker 主机会删除取消置备容器的转发条目:
![Configuring OpenvSwitch (OVS) to work with Docker](img/image_07_014.jpg)
运行在多个主机上的容器之间通过基于 OVS 的 VXLAN 隧道进行通信
### 注
默认情况下，Docker 使用 Linux docker0 桥；但是，在某些情况下，可能需要 OVS，而不是 Linux 桥。一个 Linux 网桥只能处理 1，024 个端口；这限制了 Docker 的可扩展性，因为我们只能创建 1，024 个容器，每个容器都有一个网络接口。
## OVS 单主机设置故障排除
在单个主机上安装 OVS，创建两个容器，并将它们连接到 OVS 桥:
1.  安装 OVS:
    ```
    $ sudo apt-get install openvswitch-switch 
    ```
2.  Install the `ovs-docker` utility:
    ```
    $ cd /usr/bin 
    $ wget https://raw.githubusercontent.com/openvswitch/ovs/master
     /utilities/ovs-docker
    $ chmod a+rwx ovs-docker
    ```
    ![Troubleshooting OVS single host setup](img/image_07_015.jpg)
    单一主持人 OVS
3.  建造一座 OVS 大桥。
4.  在这里，我们将添加一个新的 OVS 桥并对其进行配置，这样我们就可以将容器连接到不同的网络上:
    ```
    $ ovs-vsctl add-br ovs-br1 
    $ ifconfig ovs-br1 173.16.1.1 netmask 255.255.255.0 up 
    ```
5.  从 OVS 桥向 Docker 容器添加一个端口。
6.  创建两个`ubuntu` Docker 容器:
    ```
    $ docker run -i-t --name container1 ubuntu /bin/bash
    $ docker run -i-t --name container2 ubuntu /bin/bash
    ```
7.  将容器连接到 OVS 大桥:
    ```
    # ovs-docker add-port ovs-br1 eth1 container1 --
             ipaddress=173.16.1.2/24
    # ovs-docker add-port ovs-br1 eth1 container2 --
             ipaddress=173.16.1.3/24
    ```
8.  使用`ping`命令测试使用 OVS 桥连接的两个容器之间的连接。首先，找出他们的 IP 地址:
    ```
    # docker exec container1 ifconfig
    eth0      Link encap:Ethernet  HWaddr 02:42:ac:10:11:02
    inet addr:172.16.17.2  Bcast:0.0.0.0  Mask:255.255.255.0
    inet6 addr: fe80::42:acff:fe10:1102/64 Scope:Link
    ...
    # docker exec container2 ifconfig
    eth0      Link encap:Ethernet  HWaddr 02:42:ac:10:11:03
    inet addr:172.16.17.3  Bcast:0.0.0.0  Mask:255.255.255.0
    inet6 addr: fe80::42:acff:fe10:1103/64 Scope:Link
    ...
    ```
9.  因为我们知道`container1`和`container2`的 IP 地址，所以我们可以运行以下命令:
    ```
    # docker exec container2 ping 172.16.17.2
    PING 172.16.17.2 (172.16.17.2) 56(84) bytes of data.
    64 bytes from 172.16.17.2: icmp_seq=1 ttl=64 time=0.257 ms
    64 bytes from 172.16.17.2: icmp_seq=2 ttl=64 time=0.048 ms
    64 bytes from 172.16.17.2: icmp_seq=3 ttl=64 time=0.052 ms
    # docker exec container1 ping 172.16.17.2
    PING 172.16.17.2 (172.16.17.2) 56(84) bytes of data.
    64 bytes from 172.16.17.2: icmp_seq=1 ttl=64 time=0.060 ms
    64 bytes from 172.16.17.2: icmp_seq=2 ttl=64 time=0.035 ms
    64 bytes from 172.16.17.2: icmp_seq=3 ttl=64 time=0.031 ms
    ```
## OVS 多主机设置故障排除
首先，我们将使用 OVS 连接多个主机上的 Docker 容器:
让我们考虑一下我们的设置，如下图所示，它包含两台运行 Ubuntu 14.04 的主机- `Host1`和`Host2`:
1.  在两台主机上安装 Docker 和 OVS:
    ```
    # wget -qO- https://get.docker.com/ | sh
    # sudo apt-get install openvswitch-switch
    ```
2.  Install the `ovs-docker` utility:
    ```
    # cd /usr/bin 
    # wget https://raw.githubusercontent.com/openvswitch/ovs
            /master/utilities/ovs-docker
    # chmod a+rwx ovs-docker
    ```
    ![Troubleshooting OVS multiple host setups](img/image_07_016.jpg)
    与 OVS 的多主机容器通信
3.  默认情况下，Docker 选择一个随机网络来运行其容器。它创建一个 docker0 桥，并为其分配一个 IP 地址(`172.17.42.1`)。因此，`Host1`和`Host2`Docker 桥的 IP 地址是相同的，因此两个主机中的容器很难通信。为了克服这一点，让我们为网络分配静态 IP 地址，即(`192.168.10.0/24`)。
要更改默认 Docker 子网:
1.  在`Host1`上执行以下命令:
    ```
    $ service docker stop
    $ ip link set dev docker0 down
    $ ip addr del 172.17.42.1/16 dev docker0
    $ ip addr add 192.168.10.1/24 dev docker0
    $ ip link set dev docker0 up
    $ ip addr show docker0
    $ service docker start
    ```
2.  添加`br0` OVS 大桥:
    ```
    $ ovs-vsctl add-br br0 
    ```
3.  创建到另一台主机的隧道:
    ```
    $ ovs-vsctl add-port br0 gre0 -- set interface gre0 type=gre 
            options:remote_ip=30.30.30.8
    ```
4.  将`br0`桥添加到`docker0`桥:
    ```
    $ brctl addif docker0 br0 
    ```
5.  在主机 2 上执行以下命令:
    ```
    $ service docker stop
    $ iptables -t nat -F POSTROUTING 
    $ ip link set dev docker0 down 
    $ ip addr del 172.17.42.1/16 dev docker0
    $ ip addr add 192.168.10.2/24 dev docker0 
    $ ip link set dev docker0 up
    $ ip addr show docker0
    $ service docker start
    ```
6.  添加`br0` OVS 大桥:
    ```
    $ ip link set br0 up
    $ ovs-vsctl add-br br0 
    ```
7.  创建到另一台主机的隧道，并将其连接到:
    ```
    # br0 bridge  
            $ ovs-vsctl add-port br0 gre0 -- set interface gre0 type=gre 
            options:remote_ip=30.30.30.7
    ```
8.  Add the `br0` bridge to the `docker0` bridge:
    ```
    $ brctl addif docker0 br0
    ```
    Docker 桥连接到另一座桥- `br0.`这一次，它是一座 OVS 桥，这意味着容器之间的所有交通也通过`br0`路由。此外，我们需要将运行容器的两台主机的网络连接在一起。为此使用了一条 GRE 隧道([http://en.wikipedia.org/wiki/Generic_Routing_Encapsulation](http://en.wikipedia.org/wiki/Generic_Routing_Encapsulation))。这条隧道与`br0` OVS 大桥相连，因此也与`docker0`相连。在两台主机上执行上述命令后，您应该能够从两台主机 ping 通`docker0`网桥地址。
    在主机 1 上:
    ```
    $ ping 192.168.10.2
    PING 192.168.10.2 (192.168.10.2) 56(84) bytes of data.
    64 bytes from 192.168.10.2: icmp_seq=1 ttl=64 time=0.088 ms
    64 bytes from 192.168.10.2: icmp_seq=2 ttl=64 time=0.032 ms
    ^C
    --- 192.168.10.2 ping statistics ---
    2 packets transmitted, 2 received, 0% packet loss, time 999ms
    rtt min/avg/max/mdev = 0.032/0.060/0.088/0.028 ms
    ```
    在主机 2 上:
    ```
    $ ping 192.168.10.1
    PING 192.168.10.1 (192.168.10.1) 56(84) bytes of data.
    64 bytes from 192.168.10.1: icmp_seq=1 ttl=64 time=0.088 ms
    64 bytes from 192.168.10.1: icmp_seq=2 ttl=64 time=0.032 ms
    ^C
    --- 192.168.10.1 ping statistics ---
    2 packets transmitted, 2 received, 0% packet loss, time 999ms
    rtt min/avg/max/mdev = 0.032/0.060/0.088/0.028 ms
    ```
9.  Create containers on both the hosts.
    在主机 1 上，使用以下命令:
    ```
     $ docker run -t -i --name container1 ubuntu:latest /bin/bash 
    ```
    在主机 2 上，使用以下命令:
    ```
    $ docker run -t -i --name container2 ubuntu:latest /bin/bash 
    ```
现在我们可以从`container1.`ping`container2`了。这样，我们可以使用 OVS 连接多个主机上的 Docker 容器。
# 总结
在本章中，我们学习了 Docker 网络如何通过 docker0 桥供电、其故障排除问题和配置。我们还研究了 Docker 网络和外部网络之间通信问题的故障排除。接下来，我们深入研究了 libnetwork 和 CNM 及其生命周期。然后，我们研究了使用不同网络选项(如 Weave、OVS、法兰绒和 Docker 的最新覆盖网络)的多台主机之间的容器通信，并进行比较，以及其配置中涉及的故障排除问题。
我们看到，Weave 创建了一个虚拟网络，OVS 使用了 GRE 隧道技术，法兰绒提供了一个单独的子网，Docker 覆盖设置了每个主机来连接多个主机上的容器。之后，我们研究了 OVS 的 Docker 网络配置，并对单主机和多主机设置进行了故障排除。