3.哈希表
2.二叉树
1.链表
目录
第 26 章 链表、
2.2.排序二叉树
1.4.本节综合练习
1.2.双向链表
1.1.单链表
1.3.静态链表
二叉树的基本概念
，二叉树和哈希表 请点评
第 26章链表、二叉树和哈希表
全国嵌入式人才培训基地
全国嵌入式人才培训基地
部分ⅡI. C语言本质
起始页
上一级
1.链表
486
页
---
## Page 487
存中的布局是不规则的，
图 23.6“链表"所示的链表即单链表（Single Linked List）
作
它地址，
表。每个链表有一
1.1.单链表 请点评
1.链表 请点评
知
的后继，
后一个元素的地址，因此只能从头指针开始顺序访问各节点。以下代码实现了单链表的基本操
上一页
例26.1.单链表
，或者说数组支持随机访问，
最后一
link make_node(unsigned char item)
Static link head = NULL;
#include
#endif
link pop(void);
void
void
#define
#ifndef 
一个节点的指针域为NULL，表示没有后继。数组在内存中是连续存放的，而链表在内
#include
void
VO
link
P
一个头指针,
 destroy(void);
traverse(void
insert(link 
 search(unsigned char key);
free
 node
return p;
link p = malloc(sizeof *p);
unsigned char item;
，我们知道访问某个数组元素b[nj时可以通过基地址+nx每个元素的字节数得到
，通过头指针可以找到第一个节点，
link
*/
第 26章链表、二叉树和哈希表
 而链表是不支持随机访问的，
item
(*visit)(link));
p);
全国嵌入式人才培训基地
1.链表
本节我们学习如何创建和操作这种链
每个节点都可以通过指针域找到
只能通过前一个元素的指针域得
---
## Page 488
link 
void push(link 
void destroy(void)
void traverse(void
void delete(link
void
link
void 
 pop(void)
 insert(link
search(unsigned 
 free_node(link
else
if 
insert(p);
wh.
link
for
link
return NULL;
free(p);
P
(head == )
(pre.
 pre;
p;
visit(p);
I
b
P
head;
 head)
p)
 head;
(d
 p->next;
(pre-
head;
head;
(*visit)(link))
=d
 char key)
.
->next
return
->next:
pre;
d
=
 p->next)
.
key)
p->next;
pre->next)
8
---
## Page 489
在初始化时把头指针head初始化为NULL，
图 26.1.链表的插入操作
void insert(link p)
int
void print_item(link p)
#include
/* main.c
head
p->next = head;
main(void)
return 0;
destroy();
traverse(print_item);
insert(p);
insert(p);
link p 
printf("%d\n", p->item);
d
d
d
d
"linkedlist.h"
= make_node(100);
= search(5);
 make_node(200);
 make_node(90);
make
= make_node(10);
_node(5);
表示空链表。
，然后main函数调用make_node创建几个节
8
---
## Page 490
然后main函数调用delete从链表中摘除用search找到的节点，最后调用free_node释放它的存储空
直接返回NULL。
search函数其实也隐含了对于空链表这种特殊情况的处理，如果是空链表则循环体一次都不执行，
间。
接下来main函数调用search在链表中查找某个节点，如果找到就返回指向该节点的指针，找不到就
也不做这种检查,
年
在读代码时要想到可能存在的特殊情况。当然,
却不需要特殊的代码来处理，
正如上图所示，
参数做特别检查。
，如果传进来的是野指针，
head=p
p->next=head
初始状态
void delete(link p)
link search(unsigned char key)
，insert函数虽然简单，
if (p=='head） {
link pre;.
return NULL;
link pi
，事实上，
nead
E
ne ad
 这很合理，
T口
，根本无法检查它指向的内存单元是不是合法的，
，对指针参数做检查是不现实的，
 和一般情况用
一般情况
 return p;
，本章的函数代码都假定调用者的传进来的参数是合法的，
其中也隐含了一种特殊情况（Special Case）的处理,
月同样的代码处理即可，
→
如果传进来的是NULL还可以检查一
0
 这样写出来的代码更简洁，
head
L
head
L
E
空链表的特殊情况
，C标准库的函数通常
1
而第一个节点
伯
传
---
## Page 491
第一
某个节点只能找到它的后继而不能找到它的前趋，
从上图可以看出，
，这样很不爽，能不能把这种特殊情况转化为一
一个节点，
prev->next=p->next
的位置
找到prev->next==p
遍历链表各节点
head=p->next 
图 26.2.链表的删除操作
void delete(link p)
它是没有前趋的，
 要摘除一个节点需要首先找到它的前趋然后才能做摘除操作，
prev
prev
prev
nead
nead
head
E
return;
head = p->next;
head==p的特殊情况
这种情况要用特殊的代码处理，而不能和一般情况用同样的代码处
一般情况
return;
prev
→
一般情况呢？可以把delete函数改成这样：
所以删除操作要麻烦一些，
结束条件
V==NULL
 如果要摘除的节点是链表的
，而在单链表中通过
---
## Page 492
表中找到合适的位置再插入。在第6节“折半查找"中我们看到，如果数组中的元素是有序排列的，
1、修改insert函数实现插入排序的功能，
习题请点评
数组实现的堆栈相比有什么优点和缺点？
打印的结果可以看到出栈的顺序和入栈是相反的。想一想，
这两个函数的代码。
把head指针和各节点的next指针统一起来了，
定义一个指向指针的指针pnext，
如果限定每次只在链表的头部插入和删除元素，
然
后main函数调用traverse函数遍历整个链表，
*pnext=p->next
的位置
找到*pnext==p
遍
图 26.3.消除特殊情况的链表删除操作
(包括head针)
节点的指针域
历指向链表
link *pnext;
pnext
head
L
日
pnext
口
lext
(xaunext;
可以在-
，就形成一个LIFO的访问序列，
，调用destroy函数销毁整个链表。请读者自己阅读
一个循环中处理。
*pnext==NULL
结束条件
，用链表实现的堆栈和第2节“堆栈”中月
，每次插入数据都要在链
 所以在链表头部插入
492
用
---
## Page 493
在linkedlist.c中修改insert和delete函数：
向链表（Doubly Linked List）。
1.2.双向链表 请点评
3、实现函数void
在linkedlist.h中修改链表节点的结构体定义:
链表的delete操作需要首先找到要摘除的节点的前趋，
在tail处dequeue?
在tail处enqueue，
查找算法？为什么？
可以用折半查找算法更快地找到某个元素，想一想如果链表中的节点是有序排列的，是否适用折半
点再维护一个指向前趋的指针，
开始依次查找，
反转之后
初始状态
图 26.4.单链表的反转
void delete(link p)
void insert(link p)
struct node {
..........
，对于n个节点的链表，
if (p->next)
if (p->prev)
else 
p->prev
unsigned char item;
 reverse(void);将单链表反转。如下图所示。
1
 p->next->prev = p->prev;
 head = p->next; 
 head->prev = p;
，删除操作就像插入操作一样容易了，
要实现双向链表只需在上一节代码的基础上改动两个地方。
 而在单链表中找某个节点的前趋需要从表头
 时间复杂度为O(1)，这称为双
---
## Page 494
只用于界定表头和表尾，
般情况用同样的代码处理，
由于引入了prev指针，
例 26.2.带Sentinel的双向链表
一般情况
空链表
图26.5.双向链表
void free_node(link p)
link make_node(unsigned char item
static
static
 struct node tailsentinel;
#endif 
void
void
void
void
link
link
/*
nead
id
 dequeue(void);
enqueue(link
delete(link.
insert(link
 make_node(unsigned char item);
link 
. node
.node
，insert和delete函数中都有一
link p = malloc(sizeof *p);
node
，不保存数据），
p->item = 
DOUBLYLINKEDLIST
(stdli
这非常不爽，
node(
: head =
tail
headsentinel
 p->next = NULL;
=
 item;
&headsentinel
p);
 &tailsentinel;
(*visit)(link));
+
char key);
 就可以把这些特殊情况都转化为一般情况了。
，如果在表头和表尾各添加一个Sentinel节点（这两个节点
*/
H
一些特殊情况需要用特殊的代码处理,
0
不能和一
---
## Page 495
void print_item(link p)
#include
#include
/* main.c
void enqueue(link 
void destroy(void)
void traverse(void
void delete(link 
void insert(link p)