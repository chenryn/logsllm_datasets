### Legacy and New Software Relying on Outdated HttpClient Versions

A significant amount of both legacy and new software still depends on version 3.* of the HttpClient library. This reliance is often hidden within web services middleware such as Axis 2 and XFire, which, even several years after the release of version 4.*, continue to ship with HttpClient 3.*. Consequently, these versions skip hostname verification for SSL certificates, leading to potential security vulnerabilities.

### Incorrect Hostname Verification in HttpClient 4.*

It is important to note that the custom hostname verification code added to HttpClient 4.* is flawed and can reject valid certificates. Below is an example of the problematic code from HttpClient 4.2.1:

```java
// The CN better have at least two dots if it wants a wildcard [*.org.uk].
// It also can't be [*.co.uk] or [*.co.jp] or similar.
String parts[] = cn.split("\\.");
boolean doWildcard = parts.length >= 3 && 
                     parts[0].endsWith("*") &&
                     acceptableCountryWildcard(cn) &&
                     !isIPAddress(host);

if (doWildcard) {
    if (parts[0].length() > 1) { // e.g., server*
        String prefix = parts[0].substring(0, parts.length - 2); // e.g., server
        String suffix = cn.substring(parts[0].length()); // skip wildcard part from cn
        String hostSuffix = hostName.substring(prefix.length()); // skip wildcard part from host
        match = hostName.startsWith(prefix) && hostSuffix.endsWith(suffix);
    } else {
        match = hostName.endsWith(cn.substring(1));
    }
    if (match && strictWithSubDomains) {
        // If we're in strict mode, then [*foo.com] is not allowed to match [a.b.foo.com]
        match = countDots(hostName) == countDots(cn);
    }
} else {
    match = hostName.equals(cn);
}
```

This code incorrectly handles wildcards and domain names, leading to the rejection of valid certificates. For example, it will reject `mail...com` if the name in the certificate is `m*...com`.

Additionally, the original patch and its derivatives contain a minor bug in the regular expression for parsing IPv4 addresses, causing them to accept IP addresses starting with zero. This does not immediately result in a security vulnerability but is still a concern:

```java
private static final Pattern IPV4_PATTERN =
    Pattern.compile("^(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}$");
```

### Trillian: Insecure SSL Certificate Validation

Trillian, a popular instant messaging client, uses OpenSSL for SSL connection establishment. By default, OpenSSL does not throw a runtime exception if the certificate is self-signed or has an invalid chain of trust; instead, it sets flags. Furthermore, OpenSSL does not provide any hostname verification.

If the application has called `SSL_CTX_set` to set the `SSL_VERIFY_PEER` flag, `SSL_connect` exits and prints an error message when certificate validation fails. However, Trillian does not set the `SSL_VERIFY_PEER` flag. When this flag is not set, `SSL_connect` returns 1, and the application is expected to check the status of certificate validation by calling `SSL_get_verify_result`. Trillian does not call this function, thus accepting any SSL certificate and becoming vulnerable to man-in-the-middle attacks.

Depending on the specific module chosen by the user, this can expose usernames, passwords, security tokens, etc., for services like Google Talk, AIM, ICQ, Windows Live, and Yahoo! Messenger.

Interestingly, it was reported in 2009 that older versions of Trillian did not correctly validate MSN certificates. This bug was supposedly fixed in Trillian 4.2. However, our analysis shows that SSL certificate validation is still completely broken for all services, not just for MSN (Windows Live), in Trillian 5.1.0.19.

### Rackspace iOS App: Disabled SSL Validation

The Rackspace app for iOS (version 2.1.5) is an open-source application for administering Rackspace cloud services. It uses the OpenStack iOS cloud client framework, which in turn relies on the ASIHTTPRequest library to set up HTTPS connections.

ASIHTTPRequest provides a configuration variable `ValidatesSecureCertificate`, set to 1 by default. If reset to 0, it turns off both chain-of-trust and hostname verification. OpenStack supports multiple accounts on remote servers and lets users customize SSL certificate validation on a per-account basis using the `ignoreSSLValidation` variable. The value of this variable depends on the GUI switch `validateSSLSwitch`, which should be shown to the user.

However, the Rackspace app (version 2.1.5) does not present this option to the user. Instead, `validateSSLSwitch` is never displayed or explicitly assigned and is initialized to 0 by the Objective-C allocator. This turns on `ignoreSSLValidation` in ASIHTTPRequest, which in turn sets `ValidatesSecureCertificate` to 0 and disables certificate validation.

As a consequence, SSL connections established by the Rackspace app on iOS are insecure against man-in-the-middle attacks.

### TextSecure: Potential Vulnerability

TextSecure is an Android application for encrypting SMS and MMS messages, written by Moxie Marlinspike, who had previously discovered several SSL certificate validation vulnerabilities. The following code can be found in the application, though it does not appear to be reachable from the user interface and may not currently lead to an exploitable vulnerability:

```java
schemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
schemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
...
HttpHost target = new HttpHost(hostUrl.getHost(), hostUrl.getPort(), HttpHost.DEFAULT_SCHEME_NAME);
...
HttpResponse response = client.execute(target, request);
```

Even if the port number is 443, `DEFAULT_SCHEME_NAME` is "http," and the connection is over HTTP, not HTTPS.

### Using Insecure Middleware

#### Apache Axis, Axis 2, Codehaus XFire

Apache Axis is an open-source Java implementation of SOAP. The latest release is 1.4, discontinued in 2007 in favor of Axis 2. Despite this, the library is still used, for example, in PayPal’s Java SDKs.

Apache Axis 2 is a complete redesign of Apache Axis, with the latest release being 1.6.2. Codehaus XFire is another open-source Java implementation of SOAP, discontinued in 2007 in favor of Apache CXF but still used in Amazon’s EC2 Java SDK. The latest release of XFire is 1.2.6.

Apache Axis uses its own version of HttpClient, while Axis 2 and XFire use Apache HttpClient version 3.1. Both versions of HttpClient rely on `SSLSocketFactory` for SSL connection establishment but mistakenly omit hostname verification (Section 4.2).

SSL vulnerabilities caused by bugs in web services middleware are pervasive in Amazon libraries. Affected software includes the Amazon EC2 API Tools Java library, which uses XFire to set up SSL connections to EC2 servers, and the Amazon Flexible Payments Service (Java) merchant SDK, which relies on an old Apache HttpClient. The latter library is used by merchants to transmit customers’ payment details to the FPS gateway. The PHP version of the library is also broken but in a different way (Section 7.1). In contrast, the Java utility for verifying instant payment notifications uses JSSE’s `HttpsClient` instead of Apache HttpClient and thus checks SSL certificates correctly.

Other software that relies on Axis includes Java SOAP SDKs for PayPal Payments Pro (Direct Payment), PayPal Transactional Information, and PayPal Mass Pay, as well as Apache ActiveMQ implementation of JMS (Java Message Service).

#### Pusher

Pusher is a WebSocket-based API that provides real-time messaging functionality to mobile and web applications. Pusher’s Android libraries are based on Weberknecht (see Section 4.2). Any application using these libraries (e.g., GitHub’s Gaug.es) is thus insecure. It is also worth noting that Gaug.es is using an updated version of Weberknecht, which, in addition to incorrectly using raw `SSLSocketFactory` (see Section 4.1), disables the trust manager.

In summary, any software using any of the above web services frameworks is insecure against a man-in-the-middle attack.

### Using Insecure SSL Libraries

#### PHP’s fsockopen

PHP’s `fsockopen` does not validate SSL certificates, yet it is often used even by applications that must be secure against man-in-the-middle attacks. For example, PayPal’s IPN utility contains the following code:

```php
// postback to PayPal utility
$fp = fsockopen('ssl://www.paypal.com', 443, $errno, $errstr, 30);
```

This code is replicated in PayPal payment modules for ZenCart and PrestaShop shopping carts. PrestaShop also uses `fsockopen` in its CanadaPost payment module. Other similarly vulnerable software includes Open Source Classifieds.

#### Python’s URL Libraries

Python’s URL libraries do not validate certificates (Section 4.2), yet developers still use them for SSL connections. Examples include Tweepy, a library for accessing Twitter API that uses `httplib`, and Mozilla’s Zamboni project, which accepts contributions for extension developers and uses `urllib2` to connect to PayPal.

### Breaking or Disabling Certificate Validation

Disabling proper certificate validation appears to be a preferred solution for developers facing issues with SSL libraries. Here are some typical quotes from developers' forums:

- “I want my client to accept any certificate (because I’m only ever pointing to one server) but I keep getting a `javax.net.ssl.SSLException: Not trusted server certificate` exception.” — [Note the fallacious reasoning!]
- “Tutorial: Disabling Certificate Validation in an HTTPS Connection. . . Reply: Thank you very much. You solved my biggest problem in the project.”
- “I have always turned off `CURLOPT_SSL_VERIFYPEER` in curl.”
- “I am using axis on java to consume a webservice. The web service is in https, and I want to avoid the check for certificate.”

Unfortunately, these bad development practices find their way even into critical software responsible for transmitting financial information and sensitive data, where security against man-in-the-middle attacks is essential. For example, a comment in the Authorize.Net eCheck module of ZenCart says that certificate validation is disabled for “compatibility for SSL communications on some Windows servers (IIS 5.0+)” — again, a fallacious reasoning.

#### Chase Mobile Banking

Chase is a major US bank. SSL connections established by its mobile banking application on Android are insecure against a man-in-the-middle attack. This allows a network attacker to capture credentials, such as username and password, of any Chase customer using this app, along with the rest of their session.

Decompilation and analysis of this app’s code show that it overrides the default `X509TrustManager`. The replacement code simply returns without checking the server’s certificate. The code below is the result of reverse-engineering:

```java
public final void checkServerTrusted(X509Certificate[] paramArrayOfX509Certificate, String paramString) {
    if ((paramArrayOfX509Certificate != null) && (paramArrayOfX509Certificate.length == 1)) {
        paramArrayOfX509Certificate[0].checkValidity();
    }
    return;
    this.a.checkServerTrusted(paramArrayOfX509Certificate, paramString);
}
```

Note the unreachable invocation of `checkServerTrusted`. We conjecture that this was a temporary plug during development that somehow found its way into the production version of the app.

#### Apache Libcloud

Apache Libcloud is a Python library extension providing support for 26 different cloud service providers. Libcloud relies on the underlying Python library to verify the chain of trust in SSL certificates; internally, Python uses OpenSSL. Once the chain of trust is verified, Libcloud verifies the hostname using the `_verify_hostname` method in `httplib_ssl.py`. This code uses an incorrect regular expression for hostname verification. For example, it accepts `oogle.com` as a match for `google.com`, exposing all Libcloud clients to a man-in-the-middle attack:

```python
def _verify_hostname(self, hostname, cert):
    # Verify hostname against peer cert
    # Check both commonName and entries using a rudimentary glob to dns
    # to find matches in subjectAltName
    ...
```

This incorrect implementation can lead to significant security risks for users of these cloud services.