出错处理
并不会到达其末尾（如只想获取第一个行)，那么finish（）便能发挥作用。在以
8.2Perl DBI概述
291
---
## Page 312
免启用 RaiseError 的理由是，DBI输出的信息过于专业：
尽管在这种情况下，可能可以通过重新定义SSIG{—DIE_)信号处理器来达到目的。另一个避
将是空字符串或undef。（换句话说，这两个变量都会为假。）
mysql_error（）很像。如果没有发生错误，那么SDBI：:err 将为O或undef，而sDBI：:errstr
属性：
下面这个样子：
触发对 exit（)的调用。你不用输出出错信息，因为 DBI已经输出了。
connect（）的第4个参数，你也可以使用默认的出错处理行为：
connect（）调用失败，那么DBI 会显示出错信息，但会继续往下执行。
时
同时禁月
它们包含MySQL出错代码和出错字符串，这一点与C语言的API函数mysql_errno（）和
292
启用这两个属性，那么这个DBI处理器可能会被调用两次。)
如果你想显式地把出错处理属性指定为默认值，那么可以把传递给connect（)的设置写成
如果想让脚本在退出时做些自己定义的清理工作，那么启用RaiseError的做法则不可取，
destroy statement handles or call finish on them before disconnecting.
如果想让DBI替你处理错误，则需要启用 RaiseError，并禁用PrintError：
如果你想检查错误，并输出自己的信息，那么需要同时禁用 RaiseError 和 PrintError
在这种情况下，如果出现了错误，那么connect（)将返回undef，
my $dbh = DBI->connect ($dsn, $user_name, Spassword)
disconnect(DBI::db=HAsH(0x197aae4)) invalidates 1 active statement. Either
上面这段代码里所使用的变量sDBI：:err和$DBI：：errstr，对于构造出错信息非常有用。
my %conn_attrs = (RaiseError => 0, PrintError => 0, AutoCommit => 1);
虽说这样会让你多写很多内容，
在默认情况下，RaiseError 是禁用的，而 PrintError 是启用的。在这种情况下，如果
口如果启用了 PrintError 属性，那么在某个 DBI方法出错时，DBI会调用warn（)方法
这
#
与出错处理相关的两个属性是：RaiseError 和 PrintError。
#连接数据库
#数据源名字、用户名、密码和连接属性
DBI会发出异常消息。默认情况下，它会调用die（)来显示出错信息，然后退出脚本。
如果启用了RaiseError属性（即将其设置为非零值），那么在某个DBI方法出错时，
口
用PrintError，是为了避免两次输出相同的出错信息。
是一个最省事的做法，本章的大部分脚本都是这样写的。之所以在启用 RaiseError 的
%conn_attrs =(RaiseError => 1, PrintError => 0,AutoCommit => 1);
来显示出错信息，但脚本会继续往下执行。
)
$password=
$user_name=
第8章用Perl DBI编写MySQL程序
or die"Could not connect to server:$DBI::err ($DBI::errstr)\n";
orexit（1）;
or exit（1）;
"secret";
"sampadm";
(sdsn
(sdsn
，但是它能让别人更清楚地了解具体的出错处理行为。
$user_name,$password,
Suser_name,
Spassword
$password,\%conn_attrs);
(conn_attrs)
（在某些特定的情形下，如果同
以表明执行失败，而这会
。因此，即使省略了
---
## Page 313
子例程来输出信息以及sDBI：:err和$DBI：：errstr的内容，然后退出：
和PrintError属性，并且会测试每个DBI调用的结果。一旦出现错误，脚本就会调用bail_out（）
本。dump_members2.pl处理的语句与dump_members.pl相同，只是显式地禁用了RaiseError
理器，则需要在执行任何DBI调用之前，做好类似下面这样的工作：
理工作，也可以把DBI提供的默认出错信息修改成你自己的内容。如果要重新定义_DIE_处
重新定义$SIG{_DIE_)处理器。这样做的好处是，你既可以启用 RaiseError 来简化出错处
已检查错误，并为目标用户显示一些更具意义的信息。在当前的这个示例里，你可能还会考虑
这条信息对程序员非常有用，但你可能想避免把它展示给普通用户。在这种情况下，最好是自
sub bail_out
#bail_out（)子例程－输出错误代码和字符串，其后退出
my $sth = $dbh->prepare ("SELEcT last_name, first_name, suffix,
#dump_members2.pl－导出美史联盟的成员资格名单
#!/usr/bin/perl
下面这个dump_members2.pl脚本，演示了如何编写一个用于检查错误并输出其信息的脚
$SIG{DIE}= sub [die “Sorry,an error occurred\n";};
sdbh->disconnect()
$DBI::err
while（my @ary=$sth->fetchrow_array(）)
#读取并显示查询结果
$sth->execute
#执行查询
my $dbh=DBI->connect （$dsn,
#连接数据库
#数据源名字、用户名、密码和连接属性
use warnings;
use strict;
$SIG{DIE}=\&die_handler;
sub die_handler
你也可以像平常那样先定义一个子例程，
or bail_out ("Cannot disconnect from database");
or bail_out ("Error during retrieval");
print join ("\t",@ary)，"\n";
or bail_out
%conn_attrs =（RaiseError => 0,PrintError => 0,AutoCommit => 1）;
die "Sorry,an error occurred\n";
$password
Suser_name
street,city,
or bail_out（"Cannot connect to database");
（"Cannotexecutequery"）;
"secret";
"sampadm";
Suser_name,
，并把信号处理器设置成对这个子例程的引用：
$password,(&conn_attrs)
8.2Perl DBI概述
email,"
293
---
## Page 314
值，
响行”这两种情况。也可以使用下面两个测试当中的任何一种来检查是否出现了错误：
轻易地把它与undef 区分开来。如果do（）返回O，则很难区分“出错”（undef）和“无受景
下文中，"0E0"会被计算为0；但在条件表达式里，它会被计算为真值。这样一来，我们便可以
会返回数字0，而是会返回字符串"OEO”（即Perl语言对O的科学计数法表示形式）。在数字
限。）对于非undef 返回值，应该特别注意无受影响行的情况。当出现这种情况时，do（)并不
受影响的行数，则返回-1。出错的原因各不相同。（如语句本身有错误或者你没有访问表的权
条目，其成员资格的到期日期是2012年6月3日，可以使用下面的脚本：
do（)方法会在一个步骤里预处理并执行这条语句。
和UPDATE）更易于处理。为处理非SELECT语句，需要使用数据库句柄把它传递给do（)方法
8.2.4处理那些修改行的语句
果你打算自行编写代码来检查错误，那么千万要记得测试你的那个数据取回循环的结果。
被截断。如果不进行出错检查，那么运行这个脚本的人将根本无法知道是否已出现了问题！如
常结束)。当然，这两种情况都会导致循环结束，但是如果有错误发生，那么脚本的输出结果会
fetchrow_array（）出错时不会自动退出，所以比较谨慎的做法是确定这个循环终止的原因是
脚本的出错信息输出格式。
若把出错信息的输出功能封装在子例程里，那么只需修改这个子例程，便能统一地改变整个
汇
294
么：到底是因为到达了结果集的末尾（正常结束)，还是因为在执行过程中发生了错误（非正
dump_members2.pl脚本在行获取循环语句的后面有一个测试。因为这个脚本在
处：首先，不必在每次想要输出错信息时都显示$DBI：:err和$DBI：：errstr的值；其次，
是bail_out（)执行的操作是退出，而非返回到调用者。bail_out（）给我们带来了两个
do（)方法返回的是受影响的行数。若执行出错，则返回 undef；若因某种原因而无法确定
在数字上下文中，"OE0"会被计算为0,因此，下面这段代码能够根据$rows的任何非 undef
$rows = $dbh->do ("INSERT INTO member (last_name,first_name,expiration)"
与返回行的语句（如 SELECT、DESCRIBE和 SHOW）相比，修改行的语句（如DELETE、INSERT
if(!$rows)
正确地输出行数：
if (!$rows)
if (!defined (Srows）)
my $message = shift;
else
$rows += O; # force conversion to number if value is "oE0"
print "An error occurred\n";
print "An error occurred\n";
die "$message\nError $DBI::err ($DBI::errstr)\n";
第8章用Perl DBI编写MySQL程序
"VALUES('Brown′,'Marcia',2012-06-03）");
。例如，要为MarciaBrown创建一个新的成员
---
## Page 315
但因为这里的主要目的是演示（用于展示访问各个列值的语法），所以并未考虑效率的问题。
并用逗号分隔方式输出各个列的值。有可能的情况下，还可以把这些代码编写得更有效率一点，
但是，对于获取行来说，fetchrow_array（）实际只是以下几种可用方法（见表8-3）当中的一种。
语句，execute（）方法开始执行语句，fetchrow_array（）用于获取结果集里的每一个行。
8.2.5.1编写行获取循环
性检索整个结果集。
会将讨论：如何获得结果集里的行数；在不需要使用循环时，如何处理结果集；以及如何一次
SHOW）执行行获取循环，你可以有许多选择。本节提供了许多与之相关的信息。此外，本节还
8.2.5处理那些返回结果集的语句
句，限
数字：
fetchrow_array（）的用法如下所示：
下面几个示例演示了如何使用各个行获取方法。这些示例将循环遍历结果集里的每一个行，
dump_members.pl脚本使用了一系列DBI方法来检索数据：prepare（)让驱动程序预处理
针对 SELECT语句（或者像SELECT那样能返回行的其他语句，如 DESCRIBE、EXPLAIN和
while （my @ary=$sth->fetchrow_array(）)
$rows=$sth->execute ();
$sth = $dbh->prepare ("INSERT INTO member (last_name,first_name,expiration)"
除了通过调用do（)方法来执行它以外，还可以使用下面的方式来执行：
do（）方法等价于依次使用prepare（）和execute(）。
在输出$rows 时，也可以使用printf（）函数的%d 格式说明符，强制把它隐式转换为一个
V
if (!$rows)
my $delim =
fetchrow_hashref()
printf "Number of rows affected:%d\n",$rows;
print "An error occurred\n";
fetch()
fetchrow_arrayref()
fetchrow_array()
se
print "Number of rows affected:$rows\n";
print $delim,$ary[$i];
$ary[$i]=
方法名
""if !defined ($ary[$i]);# NULL value?
表8-3DBI的行获取方法
对行值散列的引用，列名为键
等同于fetchrow_arrayref(）
对行值数组的引用
行值数组
也就是说，
返回值
，对于前面那条INSERT 语
8.2Perl DBI概述
295
---
## Page 316
称作“参数绑定”（参考8.2.7节）的技术，让列的取值自动赋给各个变量。
样的顺序列出各个列名，因此给变量正确赋值的责任就落在了你的身上。我们还可以利用一种
你用来保存数据的那组变量的排列顺序是相符的。DBI并不清楚你的SELECT语句应该以什么
选择和获取各个行：
和电子邮件地址检索出来，放到相应的变量里。像下面这样，使用fetchrow_array（)便可以
这样，我们便能够用更有意义的变量名来代替sary[O]、$ary[1]等。假设，想要把成员的姓名
值的数组。
简洁一点：
本章的许多示例里，你都能看到类似的代码结构。
uninitialized value”，即使用了未经初始化的值。将undef 转换为空字符串，可以消除警告。在
个脚本时启用了警告模式，那么当你试图输出 undef 值时，Perl会产生警告信息—“Use of
像有些多余，毕竟，对于undef 和空字符串，Perl都不会输出任何内容。不过，如果在运行这
这样将把 NULL 值（它们在 DBI脚本里被表示为 undef）转换为空字符串。这项工作看起来好
个空数组。内循环将依次测试各个列值是否已被定义，如果没有定义，则把它设置为空字符串。
296
除把fetchrow_array（)的返回值赋给数组变量以外，还可以把列值放入一组标量变量中。
如果要把获取到的一个值放入一个变量，那么在编写这种赋值表达式时就要多加小心了。
如果想照上面这种方式来使用一组变量，那么一定要保证语句中给出的列名称的顺序，
my $sth = $dbh->prepare ("SELEcT last_name,
map会使用花括号里的表达式来处理数组里的每一个元素，并且会返回一个含有转换结果
当处理值的数组时，可以利用map一次性转换数组中的所有 undef 元素，从而让代码稍微
如果想把undef 输出为另外的值，如字符串"NULL"，那么稍微修改那个if测试即可：
每次调用fetchrow_array（）时，如果还有更多行，会返回一个行值数组；否则，返回一
while (my ($last_name, $first_name, $suffix, $email)
$sth->execute ();
while (my @ary= $sth->fetchrow_array (）)
while (my @ary = $sth->fetchrow_array ())
#处理各个变量
printjoin（"，"，@ary),
print"\n";
print"\n";
for（mySi=O;$i<@ary:$i++)
$delim= ",";
第8章用Perl DBI编写MySQL程序
print $delim, $ary[$i];
$ary[$i] = "NULL" if Idefined ($ary[$i]); # 为NULL 值?
[defined（$_）？$_:“NULL"} @ary;
"\n";