f = io.StringIO()
with redirect_stdout(f):
    do_something(my_object)
out = f.getvalue()
```
# [Make temporal directory](https://stackoverflow.com/questions/3223604/how-to-create-a-temporary-directory-and-get-its-path-file-name)
```python
import tempfile
dirpath = tempfile.mkdtemp()
```
# [Change the working directory of a test](https://stackoverflow.com/questions/62044541/change-pytest-working-directory-to-test-case-directory)
The following function-level fixture will change to the test case directory, run
the test (`yield`), then change back to the calling directory to avoid
side-effects.
```python
@pytest.fixture(name="change_test_dir")
def change_test_dir_(request: SubRequest) -> Any:
    os.chdir(request.fspath.dirname)
    yield
    os.chdir(request.config.invocation_dir)
```
- `request` is a built-in pytest fixture
- `fspath` is the `LocalPath` to the test module being executed
- `dirname` is the directory of the test module
- `request.config.invocationdir` is the folder from which pytest was executed
- `request.config.rootdir` is the pytest root, doesn't change based on where you
  run pytest. Not used here, but could be useful.
Any processes that are kicked off by the test will use the test case folder as
their working directory and copy their logs, outputs, etc. there, regardless of
where the test suite was executed.
# [Remove a substring from the end of a string](https://stackoverflow.com/questions/1038824/how-do-i-remove-a-substring-from-the-end-of-a-string)
On Python 3.9 and newer you can use the `removeprefix` and `removesuffix`
methods to remove an entire substring from either side of the string:
```python
url = "abcdc.com"
url.removesuffix(".com")  # Returns 'abcdc'
url.removeprefix("abcdc.")  # Returns 'com'
```
On Python 3.8 and older you can use `endswith` and slicing:
```python
url = "abcdc.com"
if url.endswith(".com"):
    url = url[:-4]
```
Or a regular expression:
```python
import re
url = "abcdc.com"
url = re.sub("\.com$", "", url)
```
# [Make a flat list of lists with a list comprehension](https://stackoverflow.com/questions/952914/how-to-make-a-flat-list-out-of-a-list-of-lists)
There is no nice way to do it :(. The best I've found is:
```python
t = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]
flat_list = [item for sublist in t for item in sublist]
```
# [Replace all characters of a string with another character](https://stackoverflow.com/questions/48995979/how-to-replace-all-characters-in-a-string-with-one-character/48996018)
```python
mystring = "_" * len(mystring)
```
# [Locate element in list](https://appdividend.com/2019/11/16/how-to-find-element-in-list-in-python/)
```python
a = ["a", "b"]
index = a.index("b")
```
# [Transpose a list of lists](https://stackoverflow.com/questions/6473679/transpose-list-of-lists)
```python
>>> l=[[1,2,3],[4,5,6],[7,8,9]]
>>> [list(i) for i in zip(*l)]
... [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
```
# [Check the type of a list of strings](https://stackoverflow.com/questions/18495098/python-check-if-an-object-is-a-list-of-strings)
```python
def _is_list_of_lists(data: Any) -> bool:
    """Check if data is a list of strings."""
    if data and isinstance(data, list):
        return all(isinstance(elem, list) for elem in data)
    else:
        return False
```
# Install default directories and files for a command line program
I've been trying for a long time to configure `setup.py` to run the required
steps to configure the required directories and files when doing `pip install`
without success.
Finally, I decided that the program itself should create the data once the
`FileNotFoundError` exception is found. That way, you don't penalize the load
time because if the file or directory exists, that code is not run.
# [Check if a dictionary is a subset of another](https://stackoverflow.com/questions/9323749/how-to-check-if-one-dictionary-is-a-subset-of-another-larger-dictionary)
If you have two dictionaries `big = {'a': 1, 'b': 2, 'c':3}` and
`small = {'c': 3, 'a': 1}`, and want to check whether `small` is a subset of
`big`, use the next snippet:
```python
>>> small.items() >> isinstance(a, Rectangle)
True
```
Instead, use a comparison with `type`:
```python
>>> type(a) == Rectangle
False
```
# [Find a static file of a python module](https://stackoverflow.com/questions/39104/finding-a-file-in-a-python-module-distribution)
Useful when you want to initialize a configuration file of a cli program when
it's not present.
Imagine you have a `setup.py` with the next contents:
```python
setup(
    name="pynbox",
    packages=find_packages("src"),
    package_dir={"": "src"},
    package_data={"pynbox": ["py.typed", "assets/config.yaml"]},
```
Then you could import the data with:
```python
import pkg_resources
file_path = (pkg_resources.resource_filename("pynbox", "assets/config.yaml"),)
```
# [Delete a file](https://www.w3schools.com/python/python_file_remove.asp)
```python
import os
os.remove("demofile.txt")
```
# [Measure elapsed time between lines of code](https://stackoverflow.com/questions/7370801/how-to-measure-elapsed-time-in-python)
```python
import time
start = time.time()
print("hello")
end = time.time()
print(end - start)
```
# [Create combination of elements in groups of two](https://stackoverflow.com/questions/20762574/combinations-with-two-elements)
Using the combinations function in Python's itertools module:
```python
>>> list(itertools.combinations('ABC', 2))
[('A', 'B'), ('A', 'C'), ('B', 'C')]
```
If you want the permutations use `itertools.permutations`.
# [Convert html to readable plaintext](https://stackoverflow.com/questions/13337528/rendered-html-to-plain-text-using-python)
```bash
pip install html2text
```
```python
import html2text
html = open("foobar.html").read()
print(html2text.html2text(html))
```
# [Parse a datetime ](https://stackoverflow.com/questions/466345/converting-string-into-datetime)
## [Parse a datetime from an epoch](https://stackoverflow.com/questions/12400256/converting-epoch-time-into-the-datetime)
```python
>>> import datetime
>>> datetime.datetime.fromtimestamp(1347517370).strftime('%c')
  '2012-09-13 02:22:50'
```
## Parse a datetime from a string
```python
from dateutil import parser
parser.parse("Aug 28 1999 12:00AM")  # datetime.datetime(1999, 8, 28, 0, 0)
```
If you don't want to use `dateutil` use `datetime`
```python
datetime.datetime.strptime("2013-W26", "%Y-W%W-%w")
```
Where the datetime format is a string built from the next directives:
| Directive | Meaning                                                        | Example                  |
| --------- | -------------------------------------------------------------- | ------------------------ |
| %a        | Abbreviated weekday name.                                      | Sun, Mon, ...            |
| %A        | Full weekday name.                                             | Sunday, Monday, ...      |
| %w        | Weekday as a decimal number.                                   | 0, 1, ..., 6             |
| %d        | Day of the month as a zero-padded decimal.                     | 01, 02, ..., 31          |
| %-d       | Day of the month as a decimal number.                          | 1, 2, ..., 30            |
| %b        | Abbreviated month name.                                        | Jan, Feb, ..., Dec       |
| %B        | Full month name.                                               | January, February, ...   |
| %m        | Month as a zero-padded decimal number.                         | 01, 02, ..., 12          |
| %-m       | Month as a decimal number.                                     | 1, 2, ..., 12            |
| %y        | Year without century as a zero-padded decimal number.          | 00, 01, ..., 99          |
| %-y       | Year without century as a decimal number.                      | 0, 1, ..., 99            |
| %Y        | Year with century as a decimal number.                         | 2013, 2019 etc.          |
| %H        | Hour (24-hour clock) as a zero-padded decimal number.          | 00, 01, ..., 23          |
| %-H       | Hour (24-hour clock) as a decimal number.                      | 0, 1, ..., 23            |
| %I        | Hour (12-hour clock) as a zero-padded decimal number.          | 01, 02, ..., 12          |
| %-I       | Hour (12-hour clock) as a decimal number.                      | 1, 2, ... 12             |
| %p        | Locale’s AM or PM.                                             | AM, PM                   |
| %M        | Minute as a zero-padded decimal number.                        | 00, 01, ..., 59          |
| %-M       | Minute as a decimal number.                                    | 0, 1, ..., 59            |
| %S        | Second as a zero-padded decimal number.                        | 00, 01, ..., 59          |
| %-S       | Second as a decimal number.                                    | 0, 1, ..., 59            |
| %f        | Microsecond as a decimal number, zero-padded on the left.      | 000000 - 999999          |
| %z        | UTC offset in the form +HHMM or -HHMM.                         |                          |
| %Z        | Time zone name.                                                |                          |
| %j        | Day of the year as a zero-padded decimal number.               | 001, 002, ..., 366       |
| %-j       | Day of the year as a decimal number.                           | 1, 2, ..., 366           |
| %U        | Week number of the year (Sunday as the first day of the week). | 00, 01, ..., 53          |
| %W        | Week number of the year (Monday as the first day of the week). | 00, 01, ..., 53          |
| %c        | Locale’s appropriate date and time representation.             | Mon Sep 30 07:06:05 2013 |
| %x        | Locale’s appropriate date representation.                      | 09/30/13                 |
| %X        | Locale’s appropriate time representation.                      | 07:06:05                 |
| %%        | A literal '%' character.                                       | %                        |
# Install a python dependency from a git repository
With
[pip you can](https://stackoverflow.com/questions/16584552/how-to-state-in-requirements-txt-a-direct-github-source):
```bash
pip install git+git://github.com/path/to/repository@master
```
If you want
[to hard code it in your `setup.py`](https://stackoverflow.com/questions/32688688/how-to-write-setup-py-to-include-a-git-repository-as-a-dependency/54794506#54794506),
you need to:
```python
install_requires = [
    "some-pkg @ git+ssh://PI:EMAIL/someorgname/pkg-repo-name@v1.1#egg=some-pkg",
]
```
But
[Pypi won't allow you to upload the package](https://github.com/BaderLab/saber/issues/35),
as it will give you an error:
```
HTTPError: 400 Bad Request from https://test.pypi.org/legacy/
Invalid value for requires_dist. Error: Can't have direct dependency: 'deepdiff @ git+git://github.com/lyz-code/deepdiff@master'
```
It looks like this is a conscious decision on the PyPI side. Basically, they
don't want pip to reach out to URLs outside their site when installing from
PyPI.
An ugly patch is to install the dependencies in a `PostInstall` custom script in
the `setup.py` of your program:
```python
from setuptools.command.install import install
from subprocess import getoutput
# ignore: cannot subclass install, has type Any. And what would you do?
class PostInstall(install):  # type: ignore
    """Install direct dependency.
    Pypi doesn't allow uploading packages with direct dependencies, so we need to
    install them manually.
    """
    def run(self) -> None:
        """Install dependencies."""
        install.run(self)
        print(getoutput("pip install git+git://github.com/lyz-code/deepdiff@master"))
setup(cmdclass={"install": PostInstall})
```
Warning: It may not work! Last time I used this solution, when I added the
library on a `setup.py` the direct dependencies weren't installed :S
# Check or test directories and files
```python
def test_dir(directory):
    from os.path import exists
    from os import makedirs
    if not exists(directory):
        makedirs(directory)
def test_file(filepath, mode):
    """Check if a file exist and is accessible."""
    def check_mode(os_mode, mode):
        if os.path.isfile(filepath) and os.access(filepath, os_mode):
            return
        else:
            raise IOError("Can't access the file with mode " + mode)
    if mode is "r":
        check_mode(os.R_OK, mode)
    elif mode is "w":
        check_mode(os.W_OK, mode)
    elif mode is "a":
        check_mode(os.R_OK, mode)
        check_mode(os.W_OK, mode)
```
# [Remove the extension of a file](https://stackoverflow.com/questions/678236/how-to-get-the-filename-without-the-extension-from-a-path-in-python)
```python
os.path.splitext("/path/to/some/file.txt")[0]
```
# [Iterate over the files of a directory](https://www.newbedev.com/python/howto/how-to-iterate-over-files-in-a-given-directory/#2-using-os-scandir)
```python
import os
directory = "/path/to/directory"
for entry in os.scandir(directory):
    if (entry.path.endswith(".jpg") or entry.path.endswith(".png")) and entry.is_file():
        print(entry.path)
```
### Create directory
```python
if not os.path.exists(directory):
    os.makedirs(directory)
```
### [Touch a file](https://stackoverflow.com/questions/1158076/implement-touch-using-python)
```python
from pathlib import Path
Path("path/to/file.txt").touch()
```
# [Get the first day of next month](https://stackoverflow.com/questions/4130922/how-to-increment-datetime-by-custom-months-in-python-without-using-library)
```python
current = datetime.datetime(mydate.year, mydate.month, 1)
next_month = datetime.datetime(
    mydate.year + int(mydate.month / 12), ((mydate.month % 12) + 1), 1
)
```
# [Get the week number of a datetime](https://stackoverflow.com/questions/2600775/how-to-get-week-number-in-python)
`datetime.datetime` has a `isocalendar()` method, which returns a tuple
containing the calendar week:
```python
>>> import datetime
>>> datetime.datetime(2010, 6, 16).isocalendar()[1]
24
```
`datetime.date.isocalendar()` is an instance-method returning a tuple containing