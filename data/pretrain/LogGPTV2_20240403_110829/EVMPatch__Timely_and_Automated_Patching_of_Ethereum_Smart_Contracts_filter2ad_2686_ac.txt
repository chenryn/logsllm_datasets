explicit jump to the rewritten basic block at the end of the con-
tract and ensure that execution continues at the beginning of
the following basic block in the original contract code. In case
that the following basic block does not begin with a JUMPDEST
instruction, the EVM forbids explicit jumps to this address.
In the control-ﬂow graph, this means that this basic block can
5github.com/crytic/pyevmasm
USENIX Association
30th USENIX Security Symposium    1295
Such a constant operand can accidentally include the byte
for the JUMPDEST instruction. Then, the constant would be
a legitimate jump target and a new unintended instruction
sequence would occur. To avoid such unintended instruction
sequences, EVM implementations perform a linear sweep over
the code section to ﬁnd all push instructions. The constants that
are part of those push instructions are then marked as data and
therefore as invalid jump targets, even if they contain a byte
equivalent to the JUMPDEST instruction. However, due to per-
formance reasons, EVM implementations ignore control-ﬂow
information when marking data. As such, the push instructions
opcode byte itself can be part of some data constant, such as
a string or other binary data. For this reason, smart contract
compilers accumulate all data constants at addresses strictly
larger than any reachable code, avoiding any conﬂicts between
the generated code and data encoded into the code address
space. However, our trampoline-based rewriter does append
code behind the data constants of the smart contracts. To avoid
that code appended by the rewriter is accidentally marked as
an invalid jump destination due to a preceding push opcode
byte, we carefully insert padding between the data of the
original contract and the newly appended code.
Applicability of Trampoline Approach. The trampoline-
based approach to rewriting requires only minimal code
analysis and works for most use cases. However, this approach
faces two problems. First, instructions can only be patched
in basic blocks that are large enough (in terms of size in
bytes) to also contain the trampoline code. However, a typical
trampoline requires 4 to 5 bytes and typically basic blocks that
perform some meaningful computation are large enough to
contain the trampoline code. Second, due to the copying of ba-
sic blocks the code size increases depending on the basic block
that is patched thereby increasing deployment cost. However,
our experiments show that the overhead during deployment
is negligible (on average US$0.02 per deployment, see § 5).
No reliance on accurate control-ﬂow graph. Recovering an
accurate control-ﬂow graph given only EVM bytecode is a
challenging and open problem. However, our trampoline based
approach does not require an accurate and complete control-
ﬂow graph. Instead, we only need to recover basic block
boundaries given the program counter of the instruction, where
the patch needs to be applied. In doing so, recovering the basic
block boundaries is tractable, since the EVM has an explicit
marker for basic block entries (i.e., the JUMPDEST pseudo-
instruction). Furthermore, our rewriter only needs to recover
the end of the basic block and any following basic blocks that
are connected via fallthrough edges in the control-ﬂow graph.
4.3 Patch Testing
While the insertion of trampolines into the original code does
not change the functionality of the contract, the patch template
itself can perform arbitrary computations and could potentially
violate the semantics of the patched contract. To test the
Figure 2: Control-ﬂow graph of original and rewritten code.
only be reached with a fall-through edge. To handle this case,
our rewriter copies the basic block to the end of the contract
right behind the rewritten basic block constructing another fall-
through edge in the control-ﬂow graph of the rewritten code.
Figure 2 shows an example for how our rewriter changes
the control-ﬂow graph of the original contract. The ADD
instruction is replaced with a checked add routine that
additionally performs integer overﬂow checks. We call the
address of the ADD instruction the patch point. The basic block,
which contains the patch point, is replaced with a trampoline.
In this case, it immediately jumps to the basic block at 0xFFB.
This basic block, which is placed at the end of the original
contract, is a copy of the original basic block at 0xAB, but with
the patch applied. Since the basic block is now at the end of the
contract, the bytecode rewriter can insert, change, and remove
instructions in the basic block without changing any address in
code that is located at higher-numbered addresses. We ﬁll the
rest of the original basic block with the INVALID instruction to
ensure the basic block has the exact same size as the original
basic block. The basic block at 0xCD is connected to the prior
basic block by means of a fall-through edge. However, this
basic block starts with a JUMPDEST instruction and as such is a
legitimate jump target. Hence, the rewriter then appends a jump
to the patched basic block at 0xFFB which ensures execution
continues in the original contract’s code at address 0xCD.
Adapting to EVM. The EVM has some particularities that
must be considered when implementing a bytecode rewriter.
Namely, the EVM enforces some separation of code and data
in the code address space. EVM implementations prevent
jumps into the data constants that are embedded into PUSH
instructions. The constant operands of the push instructions
follow directly after the byte of the push instruction opcode.
1296    30th USENIX Security Symposium
USENIX Association
OriginalCodeRewrittenCode...PUSH10x01ADDPOP...PUSH20x0FFBJUMP_____________INVALIDINVALID...INVALIDJUMPDEST...⇒JUMPDEST...JUMPDEST...PUSH10x01[CHECKED_ADD]POP...PUSH10xCDJUMPPatchPoint0xAB0xCD0xAB0xCD0xFFBpatched contract, EVMPATCH utilizes a differential testing
approach. That is, we re-execute all transactions of the contract
to determine if the behavior of the original, vulnerable code and
the newly, patched code differ. EVMPATCH utilizes past trans-
actions to the contract retrieved directly from the blockchain.
If the contract comes with unit tests, EVMPATCH also utilizes
the unit tests to test the newly patched contract. This differ-
ential testing approach cannot guarantee formal correctness of
the contract. Contracts with a low number of available transac-
tions are prone to low test coverage. However, our experiments
(see § 5.2.1) show that the differential testing approach works
well enough in practice to show that the patches do not break
functionality. Given the availability of a formal speciﬁcation of
the contract’s functionality, EVMPATCH could also leverage a
model checker to validate a patched contract more rigorously.
During differential testing, we ﬁrst retrieve a list of transac-
tions to the vulnerable contract from the blockchain. Second,
we re-execute all those transactions and retrieve the execution
trace for each transaction. Then, we then re-execute the same
transactions, but replace the code of the vulnerable contract
with the patched contract code, to obtain the second execution
trace. We use a modiﬁed Ethereum client, based on the popular
go-ethereum client6, since the original client does not support
this functionality. Finally, we compare both execution traces
and the patch tester produces a list of transactions, where the
behavior differs. If there are no such transactions, then we
assume that the patch does not inhibit the functionality of the
contract and proceed with deploying the patched contract.
The execution traces of the original and patched contracts
are never equal since patching changes control ﬂow and
inserts instructions. Hence, we examine only potentially state-
changing instructions, i.e., instructions that either write to the
storage area (i.e., a SSTORE) or transfer execution ﬂow to an-
other contract (e.g., a CALL instruction). We then compare the
order, parameters, and result of all state-changing instructions
and ﬁnd the ﬁrst instruction where the two execution traces
differ. Currently, we assume that the introduced patches do not
result in any new state-changing instructions. This assumption
holds for patches that introduce input-validation code and re-
vert when invalid input is passed. However, the trace difference
computation can be adapted to become aware of potential state
changes that a patch introduces.Reported transactions that fail
in the code, which is part of the patch, are marked as potential
attack transactions. If the reported transaction failed due to
out-of-gas in the patched code, we re-run the same transaction
with an increased gas budget. We issue a warning since users
will have to account for additional gas cost introduced by
the patch. Finally, the developer must examine the reported
transactions to decide whether the given list of transactions
are legitimate or malicious. As a side-effect, this makes our
patch tester an attack detection tool for the vulnerable contract
allowing developers to quickly ﬁnd prior attack transactions.
6We utilized version 1.8.27-stable-3e76a291
4.4 Deployment of Patched Contracts
As described in § 3, EVMPATCH utilizes the delegatecall-
proxy based upgrade pattern to deploy the patched contract.
To achieve this, EVMPATCH splits the smart contract to two
contracts: a proxy contract and a logic contract. The proxy
contract is the primary entry point and stores all data. By
default, EVMPATCH utilizes a proxy contract that is shipped
with EVMPATCH. However, EVMPATCH can also re-use
existing upgradable contracts, such as contracts developed
with the ZeppelinOS framework [46]. Users interact with the
proxy contract, which is located at a ﬁxed address. To facilitate
the upgrade process, the proxy contract also implements
functionality to update the address of the logic contract. To
prevent malicious upgrades, the proxy contract also stores the
address of an owner, who is allowed to issue upgrades. The
upgrade then simply consists of sending one transaction to
the proxy contract, which will (1) check whether the caller
is the owner and (2) update the address of the logic contract.
The proxy contract retrieves the address of the new
logic contract from storage and simply forwards all calls
to that contract. Internally, the proxy contract utilizes the
DELEGATECALL instruction to call into the logic contract. This
allows the logic contract to gain full access to the storage
memory area of the proxy contract thereby allowing access
to the persistent data without any additional overhead.
4.5 Possible Applications
The bytecode rewriter takes a patch template, which is
speciﬁed as short snippet of EVM assembly language.
This template is then specialized according to the patched
contract and relocated to the end of the patched contract.
This template-based approach to patch generation allows to
specify multiple generic patches to address whole classes of
vulnerabilities. In the following, we list possible vulnerability
classes that can immediately beneﬁt from our framework.
Improper access control to critical functions can be patched
by just inserting a check at the beginning of a function to
verify that the caller is a certain ﬁxed address or equal to some
address stored in the contract’s state. Detection tools to handle
this vulnerability have been investigated in prior work [20, 28].
Mishandled exceptions can occur when the contract uses a
low-level call instruction, where the return value is not handled
automatically, and the contract does not properly check the
return value [23]. This issue can be patched by inserting a
generic return-value check after such a call instructions.
Integer bugs are highly likely to occur when dealing with
integer arithmetic since Solidity does not utilize checked
arithmetic by default. This has resulted in many potentially
vulnerable contracts being deployed and some being actively
attacked [13, 30]. Given the prevalence of these vulnerabilities,
we discuss in the next section how to automatically patch
integer overﬂow bugs using EVMPATCH.
USENIX Association
30th USENIX Security Symposium    1297
1
2
3
4
5
6
7
8
9
10
11
12
function initMultiowned(address[] _owners, uint _required)
 internal {
// ...
function initDaylimit(uint _limit)  internal {
// ...
// throw unless the contract is not yet initialized.
modifier only_uninitialized { if (m_numOwners > 0) throw; _;}
function initWallet(address[] _owners, uint _required,
uint _daylimit)
 only_uninitialized {
// ...
Figure 3: Source code of patched Parity Multisig Wallet.
In what follows, we demonstrate the effectiveness of
EVMPATCH by applying it to the two major bug classes of
access control errors and integer bugs.
5 Evaluation of EVMPATCH
In this section, we report the evaluation results of EVMPATCH
in patching two prominent types of bugs: (1) access control
bugs, and (2) integer bugs (over-/underﬂow).
5.1 Patching Access Control Bugs
The Parity MultiSig Wallet is a prominent example for access
control errors [3, 39]. This contract implements a wallet that
is owned by multiple accounts. Any action taken by the wallet
contract must be authorized by at least one of the owners.
However, the contract suffered from a fatal bug that allowed
anyone to become the sole owner because the corresponding
functions initWallet, initMultiowned, and initDayLimit did not
perform any access control checks.
Figure 3 shows the patched source code which adds
the internal modiﬁer to the functions initMultiowned and
initDayLimit (marked with  in Figure 3). This modiﬁer
makes these two functions inaccessible via the outside
interface of the deployed contract. Furthermore, the patch adds
the custom modiﬁer only_uninitialized, which checks whether
the contract was previously initialized (marked with ).
The developers originally introduced a new vulnerability
while deploying the patched the contract, which was actively
exploited [38]. In contrast, because EVMPATCH performs
bytecode rewriting, it would have immediately generated
a securely patched version of the contract and would have
deployed it automatically in a secure manner.
Consider Figure 4 which shows a customized patch in the
domain-speciﬁc language employed by EVMPATCH to spec-
ify patches. As such, we insert a patch at the beginning of
the initWallet function that checks whether the condition
sload(m_numOwners) == 0 holds, i.e., whether the contract
is not yet initialized. If this does not hold, the contract execution
will abort with a REVERT instruction. Note that here an explicit
sload needs to be used to load variables from storage and the
1
2
3
4
5
6
7
add_require_patch:
initWallet:
- sload(m_numOwner) == 0
delete_public_function_patch:
- initDayLimit
- initMultiowned
Figure 4: Customized Patch for Partity Multsig Wallet.
expression is logically inverted from the patch in Figure 3,since
this patch essentially inserts a Solidity require statement. Fur-
thermore, two other publicly accessible functions need to be
removed from the public function dispatcher. The patch shown
in Figure 4 combines two existing patch templates provided by
EVMPATCH. First, the add require patch template enforces
a pre-condition before a function is entered. Second, the delete
public function patch template removes a public function from
the dispatcher, effectively marking the function as internal.
Evaluation Results.We veriﬁed that the patched contract is
no longer exploitable by deploying a patched version of the
WalletLibrary contract against the attack. Further, we compare
a source-level patch with the patch applied by EVMPATCH.
Table 2 shows an overview of the results. EVMPATCH only
increases contract size by 25 B. The additional gas cost of
the initWallet function is only 235 gas, i.e., 0.000,06 USD per
transaction for 235.091 USD/ETH and a typical gas price of
1 Gwei. This demonstrates that EVMPATCH can efﬁciently
and effectively insert patches for access control bugs.
5.2 Patching Integer Bugs
Typical integer types are bound to a minimum and/or maximum
size due to the ﬁxed bit-width of the integer type. However,
programmers often do not pay sufﬁcient attention to the size
limitation of the actual integer type potentially causing integer
bugs. Fortunately, several high-level programming languages
(Python,Scheme) are able to avoid integer bugs since they lever-
age arbitrary precision integers with virtually unlimited size.
However, the de-facto standard programming language for
smart contracts, namely Solidity, does not embed such a mecha-
nism. This leaves the burden of handling integer overﬂows com-
pletely on the developer who needs to either manually imple-
ment overﬂow checks or properly utilize the SafeMath library
to safely perform numeric operations [33]. While common, the
former is obviously error-prone. For instance, multiple vulner-
abilities in ERC-20 token contracts were recently unveiled [1,
Table 2: Overhead of access control patch.
Version
Original
Source-Patched
EVMPATCH’ed
Bytes
8290
8201
8315
Size Increase Gas Increase
0 %
−1.07 %
0.3 %
0
226
235
1298    30th USENIX Security Symposium
USENIX Association
1
2
3
4
5
6
7
8
9
function batchTransfer(address[] _receivers, uint256 _value)
public whenNotPaused returns (bool) {
uint cnt = _receivers.length;
// OVERFLOW: 2 * ((INT_MAX / 2) + 1) == 0
uint256 amount = uint256(cnt) * _value;
require(cnt > 0 && cnt = 0
require(_value > 0 && balances[msg.sender] >= amount);
// RESULT: Transfer of ((INT_MAX / 2) + 1) tokens
Figure 5: Integer overﬂow bug reported by PeckShield [1].
26, 27]. These contracts manage subcurrencies, so-called to-
kens, on the Ethereum blockchain. Such tokens can deal with
large amounts of currency since they track the token balance
of every token owner and mediate the exchange of tokens and
Ether. Figure 5 shows an excerpt of the BEC token contract’s
code that exempliﬁes such integer overﬂow vulnerabilities.
When computing the total amount in Line 6, an unchecked inte-
ger multiplication is used allowing an attacker to provide a very
large _value. As a consequence, the amount variable will be set
to a small amount. This effectively bypasses the balance check