User: 在Java开发中，如何避免并发问题？请提供代码示例。
Assistant: Java中避免并发问题可以采用以下方式：

1. synchronized关键字

使用synchronized关键字来控制共享资源的访问，确保同一时间只有一个线程可以访问到资源。

示例代码：

```
public class MyThread implements Runnable {
    private int count = 100;

    public synchronized void run() {
        while (count > 0) {
            count--;
            System.out.println(Thread.currentThread().getName() + " : " + count);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        MyThread thread = new MyThread();
        new Thread(thread, "Thread 1").start();
        new Thread(thread, "Thread 2").start();
    }
}
```

2. ReentrantLock

使用ReentrantLock类来实现线程同步，与synchronized关键字类似，但是提供更加丰富的特性，如可中断锁、定时锁等。

示例代码：

```
public class MyThread implements Runnable {
    private int count = 100;
    private ReentrantLock lock = new ReentrantLock();

    public void run() {
        while (count > 0) {
            try {
                lock.lock();
                count--;
                System.out.println(Thread.currentThread().getName() + " : " + count);
            } finally {
                lock.unlock();
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        MyThread thread = new MyThread();
        new Thread(thread, "Thread 1").start();
        new Thread(thread, "Thread 2").start();
    }
}
```

3. AtomicInteger

使用AtomicInteger类来实现对共享变量的原子操作，避免了多线程下出现不一致的情况。

示例代码：

```
public class MyThread implements Runnable {
    private AtomicInteger count = new AtomicInteger(100);

    public void run() {
        while (count.get() > 0) {
            int value = count.getAndDecrement();
            System.out.println(Thread.currentThread().getName() + " : " + value);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        MyThread thread = new MyThread();
        new Thread(thread, "Thread 1").start();
        new Thread(thread, "Thread 2").start();
    }
}
```