2020/7/27 iOS逆向之抢红包以外的那些事⼉
iOS逆向之抢红包以外的那些事⼉
原创 队员编号001 酒仙桥六号部队 4⽉25⽇
温馨提示：本⽂共计4617个字，预计阅读时⻓12分钟。
1 前⾔~~
做iOS逆向有段时间了，发现⼤多数⼈对于iOS逆向的了解是这样的。
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 1/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
实际上呢，iOS逆向不光只是可以⽤来简单的开发个插件，⽤来实现微信抢红包或者钉钉⾃动打卡功
能，它的⽤途基本包括下⾯⼏个⼤部分：
1. 破解插件
2. 渗透测试
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 2/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
3. 竞对分析
4. 协议破解
接下来让我们依次从上述四个⽅⾯展开讲讲iOS逆向。
2 以红包为名浅谈破解插件~~
我们先来说说破解插件，正如字⾯意思，就是针对某个APP，通过hook的⽅式修改其运⾏逻
辑，以达到我们的需求，⽐如通过监听接收微信红包的接⼝，再调⽤抢红包这个⾏为的点击事件，从
⽽来完成⼀个简单的微信⾃动抢红包插件。要分析、编写并注⼊插件，⼤体思路主要分以下⼏个步
骤：
1. 脱壳：APP在上架AppStore的时候，会统⼀对其加壳。原理就是⼀个运⾏时内存dump的过程。可
以⽤的现成⼯具也有很多，如frida-dump、Clutch等。
2. cycript：是⼀个脚本⼯具，原理就是通过将其注⼊APP后，然后通过其语法特性将当前或者整个
APP的UI层级打印出来。
3. class-dump：⽤来dump .h⽂件。实际上就是将所有的类打印出来。
4. Hopper：类似IDA的轻量级反汇编⼯具，对OC⽀持性较好。
5. Theos：⼀个编写逆向插件的框架。
我们平时逆向开发⼀个插件的⼤致流程如下：
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 3/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
举例：
拿到⼀个APP之后，我们通过frida来启动⽬标进程和dump内存
然后来查看当前APP的UI层级，确定我们⽬标的类
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 4/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
最后，编写相关代码打包后注⼊到APP中即可。
但是，这个过程中，我们可能会遇到⼀个问题，就是反注⼊；它可能导致我们在分析APPUI层级或者
写好插件运⾏的时候，APP直接闪退。
iOS10以下，反注⼊基本上是通过在Xcode中设置__RESTRIC字段来忽略加载第三⽅的dylib
1 static ImageLoader* loadPhase3(const char* path, const char* orgPath, co
2 {
3 ImageLoader* image = NULL;
4 if ( strncmp(path, "@executable_path/", 17) == 0 ) {
5 // executable_path cannot be in used in any binary in a setuid proce
6 if ( sProcessIsRestricted )
7 throwf("unsafe use of @executable_path in %s with restricted binar
8 }
9 else if ( (strncmp(path, "@loader_path/", 13) == 0) && (context.origin
10 // @loader_path cannot be used from the main executable of a setuid
11 if ( sProcessIsRestricted && (strcmp(context.origin, sExecPath) == 0
12 throwf("unsafe use of @loader_path in %s with restricted binary",
13 }
14 else if (sProcessIsRestricted && (path[0] != '/' )) {
15 throwf("unsafe use of relative rpath %s in %s with restricted binary
16 }
17
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 5/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
18 return loadPhase4(path, orgPath, context, exceptions);
19 }
通过dyld的代码，我们只需要通过010editor修改__RESTRIC的任意某个字⺟就能实现绕过。
iOS13以后，可以通过下⾯的环境变量来判断动态库的加载状态来判断是否被注⼊。
1 char *env = getenv("DYLD_INSERT_LIBRARIES");
3 以渗透为名浅谈逆向神辅助~~
聊完了各位最关注的破解插件时的⼀些问题以及思路。我们来接着聊⼀聊，iOS逆向对于渗透测试的
帮助。
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 6/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
通常情况下，我们拿到⼀个APP，⼀般会从以下⼏个⽅⾯⼊⼿：
1. 运⾏时的存储
2. OWASP Mobile TOP10
整体流程⼤概是这样：
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 7/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
运⾏时的存储很好理解，就是APP在运⾏时是否在沙盒中存储⼀些敏感数据，或者⼀些存储敏感数据
的⽂件，如db⽂件等是否加密。
OWASP Mobile TOP10这块，可以举个简单的例⼦。
如果我们在抓包的过程中，遇到⼀个GET请求，咦，我们想利⽤⼀个越权漏洞，但是呢，他加了签名
校验参数，这个时候，我们就可以根据上⾯的流程图，对签名校验参数解密之后再进⾏测试了。
这⾥有⼏个点简单说⼀说：
1. 抓包，绕过ssl的问题
我们在抓包的时候，实际上是构造⼀个中间⼈，骗服务器和客户端。但iOS系统很多客户端都会校验
服务器证书，⽽ssl killswitch就是patch掉了这个校验过程
2. 越狱检测
· _dyld_image_count返回dyld映射的当前的image数
· _dyld_get_image_name返回image名称，可以通过它来检索dyld的image名称可以通过检测⽬录
中是否有MobileSubstrate.dylib来确认是否越狱
1 void dylibCheck() {
2 uint32_t count = _dyld_image_count();
3 char *substrate = "/Library/MobileSubstrate/MobileSubstrate.dylib";
4 for(uint32_t i = 0; i 
2 #import 
3
4 static int (*orig_ptrace) (int request, pid_t pid, caddr_t addr, int dat
5 static int my_ptrace (int request, pid_t pid, caddr_t addr, int data){
6 if(request == 31){
7 return 0;
8 }
9 return orig_ptrace(request,pid,addr,data);
10 }
11
12 static void* (*orig_dlsym)(void* handle, const char* symbol);
13 static void* my_dlsym(void* handle, const char* symbol){
14 if(strcmp(symbol, "ptrace") == 0){
15 return (void*)my_ptrace;
16 }
17 return orig_dlsym(handle, symbol);
18 }
举例：
我们先来看看加了反调试后的效果⻓啥样：
1 xxxxxx:~ root# debugserver *:12345 -a AMapiPhone
2 debugserver-@(#)PROGRAM:debugserver PROJECT:debugserver-360.0.26.1
3 for arm64.
4 Attaching to process AMapiPhone...
5 Segmentation fault: 11