* * *
## **NodeJS/JavaScript特有的配置文件**
* * *
如果您曾经使用过JavaScript来构建现代项目的话，那么可能会惊讶于该类应用程序的根文件夹中含有的 _.json和.rc_ 文件的数量之多。
实际上，这里有很多这样的配置文件，其中含有很多使用过的库的相关信息。虽然有些目录无法直接从浏览器中获得，甚至无法被用于文件夹和文件枚举的工具检测到，但是，仍然有几个目录是无处不在的，例如NPM配置文件（package.json、package-lock.json），其中含有全部应用程序的依赖项；以及linters
JavaScript的配置文件，比如eslint或jshint或Bower的包管理器bower.json，等等。
下面，让我们来考察bower.json示例文件，其中存放有Bower的配置信息，以及Web应用程序（前端）中使用的包列表:
    {
      "name": "testapp",
      "version": "2.1.0",
      "authors": [
        "Rafal 'bl4de' Janicki "
      ],
      "description": "test application",
      "main": "index.html",
      "moduleType": [
        "globals"
      ],
      "license": "MIT",
      "dependencies": {
        "angular": "1.4",
        "pure": "~0.5.0",
        "angular-route": "~1.2.26",
        "angular-ui-router": "~0.2.11",
        "angular-bootstrap-datetimepicker": "latest",
        "angular-translate": "~2.6.1"
      },
      "devDependencies": {}
    }
从安全角度来看，更有趣的是Node.js或io.js后端应用之类的程序，即package.json。由于它提供了服务器端详细的信息列表——使用的包，数据库连接器，中间件组件等，所以，该文件可能含有大量与潜在易受攻击软件相关的高价值信息。
如果您可以从服务器下载package.json，则可以通过简单的方法来识别应用程序使用的、可能存在漏洞的npm软件包，具体如下所示：
  * 确保安装了NodeJS，其中npm的版本为6或更高
  * 保存下载的package.json，并在保存目录中运行以下命令： 
    $ npm install
  * 完成上述操作后，您将获得类似如下所示的信息： 
    audited 9307 packages in 8.417s
    found 9 vulnerabilities (4 low, 1 moderate, 4 high)
      run `npm audit fix` to fix them, or `npm audit` for details
  * 现在，运行audit命令（当然，您可能需要先在npmjs.org网站上注册一个帐户才能执行该操作）： 
    $ npm audit
  * 执行上述命令时，您将获得一个报告，其中包含该工具所找到的所有安全漏洞： 
    $ npm audit
                           === npm audit security report ===                        
    # Run  npm install gulp@4.0.0  to resolve 5 vulnerabilities
    SEMVER WARNING: Recommended action is a potentially breaking change
    ┌───────────────┬──────────────────────────────────────────────────────────────┐
    │ High          │ Regular Expression Denial of Service                         │
    ├───────────────┼──────────────────────────────────────────────────────────────┤
    │ Package       │ minimatch                                                    │
    ├───────────────┼──────────────────────────────────────────────────────────────┤
    │ Dependency of │ gulp                                                         │
    ├───────────────┼──────────────────────────────────────────────────────────────┤
    │ Path          │ gulp > vinyl-fs > glob-stream > glob > minimatch             │
    ├───────────────┼──────────────────────────────────────────────────────────────┤
    │ More info     │ https://nodesecurity.io/advisories/118                       │
    └───────────────┴──────────────────────────────────────────────────────────────┘
    (...more dtails about every vulnerability...)
    found 9 vulnerabilities (4 low, 1 moderate, 4 high) in 9307 scanned packages
      run `npm audit fix` to fix 1 of them.
      6 vulnerabilities require semver-major dependency updates.
      2 vulnerabilities require manual review. See the full report for details.
实际上，我们最好将该输出保存到单独的文件中，因为有时会在几个NPM模块中发现多达数百个已识别的弱点。最重要的是不要陷入“兔子洞”——其中一些安全问题更多的是理论上的漏洞，而不是可利用的漏洞，有些模块甚至可能根本就没有被项目所使用。
下面是一个示例包。JSON内容表明这里可能使用了MySQL数据库，并且通过WebSockets进行了一些客户机-服务器通信:
    {
      "name": "Test application server dependencies",
      "version": "1.0.0",
      "author": "bl4de",
      "dependencies": {
        "socket.io": "^1.3.5",
        "mysql": "^2.9.0"
      }
    }
这种信息能够助我们快速意识到，尝试常见的NoSQL注入可能不是最好的主意，因为应用程序使用的是标准的关系SQL数据库，也许，我们应该尝试检查应用程序是否容易受到SQL注入攻击。
此外，还有诸如.bowerrc、.eslintrc以及.jshintrc等文件。即使它们不包含非常敏感的信息，也总是有可能从中找到有关Web应用程序体系结构、使用的库和/或框架方面的一些细节信息，甚至是注释中的一些有价值的信息。如果我们在侦察阶段发现了它们，还是值得研究一番的。
## **GitLab CI/CD .gitlab-ci.yml配置文件**
* * *
当项目使用GitLab Continous Integration (GitLab
CI/CD)时，项目根文件夹中会含有一个非常特殊且脆弱的文件：.gitlab-ci.yml。该文件可能包含大量非常敏感的信息：有关测试和构建过程的详细信息，其中含有在此过程的每个步骤中执行的命令的详细信息，以及其他方面的关键信息。
您可以在[此处](https://github.com/gitlabhq/gitlabhq/blob/master/.gitlab-ci.yml
"此处")找到.gitlab-ci.yml文件的示例
## **Ruby on Rails database.yml文件**
* * *
如果您足够幸运的货，则会发现这个文件是可读的，那么，对于[RoR（Ruby on Rails）](https://rubyonrails.org/
"RoR（Ruby on Rails）")应用程序来说，通常则意味着“game
over”。它是主数据库的配置文件，其中包含连接到数据库所需的一切信息：用户名、密码以及其他配置方面的详细信息。
## **macOS .DS_Store文件**
* * *
对于macOS系统来说，它的一个特殊之处在于，有一个名为.DS_Store的文件。该文件是由macOS文件资源管理器Finder（但不仅限于它）创建的，并且经常被错误地提交到源版本控制存储库中。
使.DS_Store文件非常有用的原因在于，它们通常保存有关Finder窗口配置的信息，包括代表文件和文件夹的图标的布局信息，这些图标通常在特定Finder窗口中显示，也就是说，我们获得了该窗口中的文件和文件夹的名称。如果您在Web服务器上找到了.DS_Store文件，则有可能在其中显示这些信息，并允许您通过“枚举”方式获得无法以任何其他方式找到的资源。当然，我们需要确保所使用的Dirb、Dirbuster、wfuzz或任何其他工具的字典中包含.DS_Store这一条目。
示例.DS_Store文件。我们不仅可以找到config、LICENSE、loader或package.json文件，也可以找到node_modules/、pages/、utils/和wrappers/文件夹——NodeJS应用程序的典型结构。
.DS_Store文件的主要问题在于，它们使用了Apple特定格式，并且难以阅读，尽管可以在网上找到解析内容的一些相关工具。描述这种格式的最佳资源之一（以及用于解析的Python库）是由Sebastian
Neef撰写的[Parsing the .DS_Store file format](https://0day.work/parsing-the-ds_store-file-format/ "Parsing the .DS_Store file format")文章。
实际上，我们可以借助自己喜爱的工具，通过现成的字典来探索隐藏的文件夹和文件:)
最常用的查找隐藏文件夹和文件的方法之一是使用枚举工具（例如Dirbuster、Dirb以及本人最喜欢的WFuzz，当然，这只是其中的几个例子而已），其中的字典包含数十万个最流行的文件夹和文件名、robots.txt公共条目等。不久前，我根据其他几个在线字典自己打造了一个这样的字典（例如:
Miessler为我们维护这两个优秀的存储库），同时，我自己还为其添加了几个条目。
目前，这本字典包含大约80K个条目，我发现用它来对付典型的公共Web服务器时非常有效。如果您希望亲自尝试一下的话，可以自行下载该字典，并与您喜欢的工具结合使用。
需要提醒的是，永远不要忘了检查Web服务器上是否存在本文介绍的文件夹中描述的任何内容。公开的Git或SVN存储库简直就是一个灾难，因为它允许下载Web应用程序的源代码，以及IntelliJ
IDE项目配置文件夹。有时候，我们只需要找到这类资源，就能搞定整个Web应用程序（以及Web服务器本身）。
如果您有任何问题或反馈，请随时通过Twitter与我联系。
最后，祝阅读愉快！:)