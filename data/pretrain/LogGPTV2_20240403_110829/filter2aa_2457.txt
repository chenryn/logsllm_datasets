对⼀些基于chrome的dom-xss插件学习,有 dom-based-xss-finder 和 XssSniper ，看看它们的原理是什么。
mainfest.json
对于chrome来说，mainfest.json包含了整个插件各种配置，在配置⽂件中，可以找到插件⼀些启动的源代码。
⼏个⽐较重要的⼏个字段
browser_action
这个字段主要负责扩展图标点击后的弹出内容，⼀般为popup.html
content_scripts
matches 代表scripts插⼊的时机，默认为document_idle，代表⻚⾯空闲时
js 代表插⼊的scripts⽂件路径
run_at 定义了哪些⻚⾯需要插⼊scripts
permissions
这个字段定义了插件的权限，其中包括从浏览器tab、历史纪录、cookie、⻚⾯数据等多个维度的权限
定义
content_security_policy
这个字段定义了插件⻚⾯的CSP
但这个字段不影响content_scripts⾥的脚本
background
这个字段定义插件的后台⻚⾯，这个⻚⾯在默认设置下是在后台持续运⾏的，只随浏览器的开启和关闭
persistent 定义了后台⻚⾯对应的路径
page 定义了后台的html⻚⾯
scripts 当值为false时，background的⻚⾯不会在后台⼀直运⾏
XssSnpier
来⾃360 0kee的插件，下载地址：https://0kee.360.cn/domXss/
出来好早了，我试了下似乎插件有错误还运⾏不了，就直接看相关代码吧。
mainfest.json
{
  "manifest_version":2,
  "name": "XssSniper",  
  "version": "1.1.33",  
  "description": "Find XSS and SOME",  
  "content_scripts": [
    {
  "all_frames": true,
              "matches": [
                "http://*/*",
                "https://*/*",
                "file://*/*"
            ],
  "js": ["js/insert.js"],
  "run_at": "document_start"
   }  
  ],
  "background": {
      "scripts": [ "js/background.js" ],
      "persistent":true
  },
  "permissions": [
    "webRequest",
    "webRequestBlocking",
    "*://*/",
    "tabs",
    "notifications"
  ],
  "browser_action": {
    "default_icon": {
     "19": "img/init_19.png",
     "38": "img/init_38.png"
  },
  "default_popup": "popup.html",
  "default_title": "Open the pannel."
  },
 "icons": {
    "128": "img/logo_128.png",
    "16": "img/error_16.png",
    "48": "img/logo_48.png"
 },
 "incognito": "spanning",
 "content_security_policy": "script-src 'self' 'unsafe-eval'; object-src 'self'"
}
后台执⾏
background.js
去掉http返回头中的 x-frame-options 、 X-XSS-Protection
对于jsonp的内容，会⾃动检测xss，将参数 = 替换为payload
注⼊js
insert.js
先看下jsonp的检测
jsonp = jsonp.replace(/\=/ig,"=tsst");
httpRequest(jsonp,function(s){
  if (s.indexOf("tsst") > -1) {
    notify("Jsonp可能存在XSS",jsonp);
    sendResponse("xss:"+jsonp);
  }
})
MutationObserver 是什么api，查了⼀下，是⼀个监视函数，当dom有变动时候，会触发回调函数。
https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver/MutationObserver
它会监视所有新创建的script标签，判断src的内容是否含有 ? 在做进⼀步判断，进⼀步判断是什么呢，就是正则匹
配内容是否像jsonp，提出报警，然后就是替换参数内容看是否存在xss。
监听事件错误
有的xss能够使⽤，但是需要⼀些特殊构造，⼀般的payload打⼊可能只会报错，这时候可以在整个⻚⾯加载前提
前注⼊好监视错误的js，xsssnpier的思想是这种报错可能也有帮助。
xsssnpier的代码如下
window.addEventListener('error', function(e) {
    if (top == this) {
      window['vultest_frameerr'] = "";
      console.log("self_err_report:"+e.message);
Fuzz
通过对 ? 、 # 进⾏分割取值，组合⼀个新的url，最后调⽤⼀个函数 xss_testfrm
      //top.err_self(e);
      window['vultest_selferr'] =  "";
      window['vultest_selferr'] = window['vultest_selferr'] + "|" +e.message;
    }
    else {
      //top.err_report(e,location.href);
      if (!window['vultest_frameerr'])
        window['vultest_frameerr'] = "";
      window['vultest_frameerr'] = window['vultest_frameerr']+"|"+e.message;
      //console.log("frame_err_report:"+ window['vultest_frameerr']);
    }
  });
xss_testfrm是通过创建⼀个隐藏iframe来执⾏payload。如果使⽤的是alert函数的payload话，成功执⾏会⾃动弹
窗。
最后
因为插件⽆法运⾏了，不知道是它是怎么确定是否存在xss漏洞的，可能出现漏洞窗⼝就⾃动弹个窗？
可以提前对⼀些payload函数hook来监视成功的情况。插件通过监控error来半⾃动审计的⽅案也值得学习⼀下，
fuzz的话有针对性的⽐较好，盲⽬的fuzz成效不⼤，可以先发⼀个探测的⽆害payload，知道payload回显的位置
后再针对性进⾏fuzz。
参考
https://lorexxar.cn/2019/11/22/chrome-ext-1/
function xss_testfrm(s){
      try {
        var xss_frm = document.createElement("iframe");
        document.body.appendChild(xss_frm);
        xss_frm.style.display="none";
        xss_frm.id = unescape(s);
        xss_frm.src = s;
      }catch(e) {
        console.log(e);
      }
    }