(cid:27)xi
Return (cid:6) = (fTigi2[1;4]; c; (cid:27)xi ; (cid:27)yi; (cid:27)(cid:14); (cid:27)q; (cid:27)r)
′
i + z
  (Ai; yi; zi; xi; Qi) if e(Ai; Y (cid:1) G2
  xi (cid:1) c + (cid:26)xi; (cid:27)yi
′′
i ) to the user
′
1
′′
i
′′
i
  yi (cid:1) c + (cid:26)yi; (cid:27)(cid:14)   (cid:14) (cid:1) c + (cid:26)(cid:14); (cid:27)q   q (cid:1) c + (cid:26)q; (cid:27)r   r (cid:1) c + (cid:26)r
yi )e(H xi; G2)e(K zi; G2) = e(G1; G2)
)
$ (cid:0) Zp
(cid:0)(cid:26)q (cid:1) e(T1; G2)(cid:26)yi ; R2   G(cid:26)xi +(cid:26)r ; R3   U (cid:26)r ; R4   V (cid:26)r
GKg(1(cid:21)):
$ (cid:0) G2; G $ (cid:0) G; G1   (cid:9)(G2); H $ (cid:0) H
p; Y   G2
G2
H; K $ (cid:0) G1; w $ (cid:0) Zp; u; v $ (cid:0) Z(cid:3)
Return (gpk; ik; ok) = ((G1; G2; G; H; H; K; Y; U; V ); w; (u; v))
UKg(1(cid:21); gpk):
w; U   Gu; V   Gv
xi; z
′
i
$ (cid:0) Zp; Qi   Gxi; Hi   H xi K z
′
i))
′
i
Return (upki; uski) = ((Qi; Hi); (xi; z
Join=Issue(User i: gpk; upki; uski; Issuer: gpk; upki; ik):
(cid:0)(cid:27)q (cid:1) e(T1; G2)(cid:27)yi (cid:1)(
)(cid:0)c
e(G1;G2)
e(T1;Y )
GVf(gpk; m; (cid:6)):
′
3
′
R
1
′
R
2
(cid:0)c; R
Open(gpk; ok; reg; m; (cid:6)):
  e(H; G2)(cid:27)xi (cid:1) e(K; G2)(cid:27)(cid:14) (cid:1) e(K; Y )
  G(cid:27)xi +(cid:27)r (cid:1) T2
  U (cid:27)r (cid:1) T3
Return 1 if c = H(gpk;fTigi2[1;4];fR
′
i
Return ? if GVf(gpk; m; (cid:6)) = 0
Q   T2 (cid:1) (T3
Return ? if there is no user index i such that reg[i] = Q
(cid:26)u
$ (cid:0) Zp; R   (Q (cid:1) T2
(cid:0)c; R
gi2[1;4]; m), else return 0
  V (cid:27)r (cid:1) T4
(cid:0)1
(cid:0)c
1
u )
′
4
(cid:0)1)(cid:26)u; d   H(gpk; Q; T2; T3; R); (cid:27)u   u (cid:1) d + (cid:26)u; (cid:28)   (d; (cid:27)u)
Return (i; (cid:28) )
Judge(gpk; reg; m; (cid:6); (i; (cid:28) )):
Return ? if GVf(gpk; m; (cid:6)) = 0
Q   reg[i]; R
(cid:0)1)(cid:27)u (cid:1) T
′
Return 1 if d = H(gpk; Q; T2; T3; R
′   (Q (cid:1) T2
(cid:0)d
3
), else return 0
Figure 1: Mechanism 6
De(cid:12)nition 2.6 (Anonymity [11]). Let A be an adversary for anonymity. We de(cid:12)ne the experiment
Expanon
(cid:5)GS;A((cid:21)) as follows.
Expanon
(cid:5)GS;A((cid:21)) : b   f0; 1g; (gpk; ik; ok)   GKg(1k); CU   ∅; HU   ∅
eb   ACrptU((cid:1);(cid:1));SndToU((cid:1));USK((cid:1));WReg((cid:1);(cid:1));Ch(b;(cid:1);(cid:1);(cid:1));Open((cid:1);(cid:1))(gpk; ik)
Return 1 ifeb = b; otherwise return 0
6
We say that (cid:5)GS satis(cid:12)es anonymity if the advantage
Advanon
is negligible for any PPT adversary A.
(cid:5)GS;A :=
2.3 Mechanism 6
(cid:12)(cid:12)(cid:12)Pr[Expanon
(cid:5)GS;A((cid:21)) = 1] (cid:0) 1
2
(cid:12)(cid:12)(cid:12)
In this section, we review Mechanism 6, which is identical to the Furukawa-Imai scheme [22, 23], in the
ISO/IEC 20008-2 standard [2]. The formal description is given in Figure 1. Although their model is
slightly diﬀerent from the BSZ model [11], it is easily seen that they are essentially same. Therefore in
this paper, we introduce Mechanism 6 by using the algorithms given by Bellare et al. [11]. Originally,
the judging algorithm is not de(cid:12)ned in Mechanism 6. However, we also describe its judging algorithm
since it can be de(cid:12)ned implicitly.
Consider a bilinear group pair (G1; G2) with a computable isomorphism (cid:9), and a group G in which
the DDH assumption holds.3 Here, we denote elements in G1; G2; GT , and G by upper case letters, and
elements in Zp by lower case letters. H : f0; 1g(cid:3) ! Zp is a family of hash functions treated as random
oracles in security proofs.
In Mechanism 6, a user i possesses a SDH pair (Ai; yi) and a discrete logarithm xi as a signing key
where Ai is the certi(cid:12)cate of xi. When signing on a message m, the user encrypts the certi(cid:12)cate Ai and
the value Qi = Gxi, and generates a signature of knowledge on m for the statement that the encrypted
certi(cid:12)cate is valid, and the encryption procedure is honestly done. The signature is accepted when
the signature of knowledge is valid. When opening a signature, the opener extracts Qi by using the
decryption key and outputs the ID i with a proof which shows that the decryption is honestly done.
3 Attack against Mechanism 6 in the BSZ Model
In this section, we give an attack against the anonymity of Mechanism 6 and prove that it is not secure
in the BSZ model. In a nutshell, the reason why Mechanism 6 can be broken is that the underlying
proof system does not satisfy simulation soundness. If a proof system is not simulation sound, it might
be possible to create a valid proof without a witness after seeing some valid proofs.
In Mechanism 6, this possibility of creating a valid proof allows for the adversary to re-randomize the
challenge signature and helps to break the anonymity. Speci(cid:12)cally, in our attack, the challenge signature
is re-randomized by using the issuing key. Then, the adversary queries the re-randomized signature to
the opening oracle and can obtain the identity of the signer. Since the adversary is allowed to corrupt
the issuer and to access the opening oracle in the anonymity game of the BSZ model, our attack is valid
in this model. In the following, we provide more details of our attack.
Firstly, we show that the underlying proof system does not satisfy simulation soundness. In the proof
system, for the group public key gpk and values fTigi2[1;4], four equations are proved with witnesses x;
y; (cid:14); q, and r. A valid proof (cid:27)set = f(cid:27)x; (cid:27)y; (cid:27)(cid:14); (cid:27)q; (cid:27)rg satis(cid:12)es the following equations:
R1 = e(H; G2)(cid:27)x (cid:1) e(K; G2)(cid:27)(cid:14) (cid:1) e(K; Y )
R2 = G(cid:27)x+(cid:27)r (cid:1) T2
(cid:0)c; R3 = U (cid:27)r (cid:1) T3
(cid:0)(cid:27)q (cid:1) e(T1; G2)(cid:27)y (cid:1)
(cid:0)c
(cid:0)c; R4 = V (cid:27)r (cid:1) T4
e(G1; G2)
e(T1; Y )
(
)(cid:0)c
;
where R1, R2, R3, and R4 are the commitments generated in the way of computing a signature, and c
is a challenge value computed as c   H(gpk;fTigi2[1;4];fRigi2[1;4]; m) for a message m. When we focus
on the (cid:12)rst equation, the second and third terms of the right side on the equation have a common base
(cid:0)(cid:27)q =
e(K; G2) since Y = G2
e(K; G2)(cid:27)(cid:14)(cid:0)(cid:27)q(cid:1)w.
(cid:27)(cid:14) and (cid:0)(cid:27)q. Now, we set e(cid:27)(cid:14) = (cid:27)(cid:14) + w and e(cid:27)q = (cid:27)q + 1 where the values can be computed from the
issuing key and a given valid proof. Then, the proof e(cid:27)set = f(cid:27)x; (cid:27)y;e(cid:27)(cid:14);e(cid:27)q; (cid:27)rg also satis(cid:12)es the above
w holds for the issuing key w. Thus, we can denote that e(K; G2)(cid:27)(cid:14) (cid:1) e(K; Y )
In fact, this property allows to break the simulation soundness by shuﬄing the discrete logarithms
3The isomorphism (cid:9) is used in the security proof of the traceability. Since we focus on the anonymity, the isomorphism (cid:9)
appears only in the setup phase in this paper.
7
(cid:0)e(cid:27)q = e(K; G2)
system in the sense that it can be generated without a witness after seeing some valid proofs.
e(cid:27)(cid:14) (cid:1) e(K; Y )
e(cid:27)(cid:14)(cid:0)e(cid:27)q(cid:1)w = e(K;
Therefore, the forgerye(cid:27)set is valid as an attack against the simulation soundness of the underlying proof
equations. The (cid:12)rst equation holds since it holds that e(K; G2)
G2)(cid:27)(cid:14)+w(cid:0)((cid:27)q+1)(cid:1)w = e(K; G2)(cid:27)(cid:14)(cid:0)(cid:27)q(cid:1)w = e(K; G2)(cid:27)(cid:14) (cid:1) e(K; Y )
(cid:0)(cid:27)q , and the other equations hold trivially.
to corrupt the issuer. Thus, the adversary can compute a re-randomized signature e(cid:6) for the challenge
signature is not the same as the challenge signature (that is, e(cid:6) ̸= (cid:6)
signature e(cid:6) to the opening oracle. Here, the signer’s information hidden in the re-randomized signature
Secondly, we show that the above forgery against the simulation soundness derives an attack against
In the anonymity game of the BSZ model, the adversary is allowed
as above. Also, since the adversary can access the opening oracle, and the re-randomized
holds), the adversary can query the
(cid:3)
the anonymity of Mechanism 6.
signature (cid:6)
(cid:3)
is the same as that of the challenge signature since the diﬀerence between them is only the proof part.
Thus, the adversary obtains the signer’s ID of the challenge signature by this query. In this way, the
anonymity of Mechanism 6 can be broken.
Countermeasures for Our Attack. We can consider the following three countermeasures for our
attack: (1) to remove Mechanism 6 from the standards and use alternative schemes, (2) to patch Mech-
anism 6 and update the document, and (3) to analyze the security properties oﬀered by Mechanism 6
and restrict its use in a way that ensures that its anonymity is preserved. In the following, we provide
more details of each countermeasure.
The countermeasure (1): This countermeasure seems easy but is not desirable. In fact, Mechanism 5
and 7 in the ISO/IEC 20008-2 standard are also group signature schemes in a broad sense. In addition
to the functionality of group signatures, Mechanism 5 (the original paper [25]) introduces a special
authority called a user-revocation manager, and Mechanism 7 has a functionality called controllable
linkability [24]. Therefore, at a (cid:12)rst glance, Mechanism 5 and 7 might be considered reasonable substitutes
for Mechanism 6. However, it is not always the case since Mechanism 5 and 7 have some drawbacks.
Concretely, Mechanism 5 is signi(cid:12)cantly less eﬃcient than Mechanism 6 due to the fact that Mechanism 5
is based on an RSA-type algebraic structure. Furthermore, Mechanism 7 provides only weaker security
notion of anonymity, CPA-anonymity. This indicates that in Mechanism 7, once the opening result of at
least one signature is revealed to the public, the anonymity of signatures is no more ensured. Therefore,
the countermeasure (1) is not very appropriate because of these drawbacks.
The countermeasure (2): This countermeasure is ideal and should be taken if possible. However, it cannot
be carried out immediately since it takes much work and time to standardize a new scheme even though
it is just an updated to an existing one. For example, in the case of the ISO/IEC 9796-2 standard [1]
that speci(cid:12)es digital signature schemes for smart cards, one of the standardized schemes (denoted as
Scheme 1) was attacked by Coron et al. [15] in 1999,4 but the (cid:12)nal revised version was not published
before 2002. Speci(cid:12)cally in this case, when it was seen that Scheme 1 is not secure, RSA-PSS [10] was
known to be an adequate scheme to replace Scheme 1. That is, it took three long years to (cid:12)nally update
the document even though there already existed such a candidate for an alternative scheme. (By the
way, due to this delay of the update, Scheme 1 had populated a lot of commercial products (e.g., e-
passports [3] and EMV cards [4]).) Therefore, the countermeasure (2) is not immediate countermeasure
for the attack.
The countermeasure (3): This countermeasure seems most realistic among the possible countermeasures.
Although we see that Mechanism 6 does not satisfy the expected security level by our attack, it is
premature to rule out Mechanism 6 as a useful scheme. Speci(cid:12)cally, it might be that Mechanism 6 is still
secure to use in practice since the BSZ model considers a relatively strong level of security, e.g., dynamic
model, double authority, and CCA-anonymity. For example, since the BSZ model considers double
authority, all of entities except for the opener can corrupt in the anonymity game of this model. However,
this seems not necessarily a real threat. Therefore, the countermeasure (3) seems most reasonable among
the possible countermeasures.
From the above discussion, we investigate the countermeasure (3) as we consider that this is the most
appropriate one and analyze the security of Mechanism 6 in the next section.
4Coron, Naccache and Stern [15] discovered that Scheme 1 is existentially forgeable in theory. After that, Coron,
Naccache, Tibouchi, and Weinmann [16] showed a practical forgery for Scheme 1 in 2009.
8
4 Rigorous Security Evaluation of Mechanism 6
In the previous section, we see that Mechanism 6 does not satisfy anonymity in the BSZ model, that
is, it does not satisfy the expected security level in the ISO/IEC document. Here, as the most appro-
priate countermeasure, we analyze the security properties oﬀered by Mechanism 6 and characterize the
conditions under which its anonymity is preserved.
As we mentioned, the (cid:13)aw of Mechanism 6 is that the underlying proof system does not satisfy
simulation soundness, and this property allows to break the anonymity by re-randomizing the challenge
signature. In fact, it seems that such an attack is the only way to break the anonymity of Mechanism 6
since the scheme is well structured except for the proof part.
Therefore, we analyze the security of Mechanism 6 in the following way: Firstly, we prove that
Mechanism 6 satis(cid:12)es anonymity under the restricted condition that the adversary does not make such
a type of attack (in Section 4.1). Secondly, we provide further analysis of the attack by classifying some
cases depending on the types of the adversary’s queries (in Section 4.2). From the result of this analysis,
we can characterize the conditions under which the anonymity of Mechanism 6 is preserved. Finally,
we formalize these conditions and formally prove the strict security of Mechanism 6 under these (in
Section 4.3).
4.1 Proof for the Anonymity of Mechanism 6 under the Restricted Condition
In this section, we formalize the attack to re-randomize the challenge signature by forging its proof part
and query it to the open oracle, and then show that Mechanism 6 is secure if the adversary does not
make this type of attack. More precisely, we formalize a query of a re-randomized signature generated
by forging the proof part (called \related query" in the following), and then prove that Mechanism 6
satis(cid:12)es anonymity against the adversary who does not generate any such a type of queries.
Firstly, we de(cid:12)ne a related query. Intuitively, a related query is a query which is obtained by re-
(cid:3)
randomizing the challenge signature through changing only the proof part. Let m
(cid:3)
c
related query is de(cid:12)ned as follows.
gi2[1;4];
(cid:3)
r ) be the challenge message and the challenge signature, respectively. Formally, a
= (fT
(cid:3)
(cid:14) ; (cid:27)
(cid:3)
x; (cid:27)
(cid:3)
y; (cid:27)
(cid:3)
q ; (cid:27)
and (cid:6)
(cid:3)
i
(cid:3)
; (cid:27)
Related Query: We say that a query (em;e(cid:6) = (feTigi2[1;4];ec;e(cid:27)x;e(cid:27)y;e(cid:27)(cid:14);e(cid:27)q;e(cid:27)r)) is a related query if (em;
e(cid:6)) is accepted by the GVf algorithm, and it holds that
(feTigi2[1;4];feRigi2[1;4];em) = (fT
gi2[1;4] are the intermediate values computed in the veri(cid:12)cation of pairs (em;e(cid:6))
where feRigi2[1;4] and fR
(cid:3)
and (m
is not accepted by the opening oracle.
Then, we prove that Mechanism 6 satis(cid:12)es anonymity if the adversary does not generate a related
query. We provide the games Game from 0 to 7, and prove that for 0 (cid:20) ℓ (cid:20) 6, the advantages of the
adversary in Game ℓ and Game ℓ + 1 are almost the same (which we denote Game ℓ (cid:25) Game ℓ + 1).
Game 0 is the original anonymity game and Game 7 is the game that the adversary wins with the
In fact for ℓ ̸= 5, it holds that Game ℓ (cid:25) Game ℓ + 1 for the adversary without
probability 1=2.
restriction on querying. However, when proving Game 5 (cid:25) Game 6, we need the condition that the
adversary who does not generate a related query. Formally, we prove the following theorem.
), respectively. However, we do not regard the pair (m
) itself as a related query since it
gi2[1;4];fR
gi2[1;4]; m
; (cid:6)
; (cid:6)
(cid:3)
i
(cid:3)
i
(cid:3)
)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
i
Theorem 4.1. If the adversary does not generate a related query, Mechanism 6 satis(cid:12)es anonymity
under the DDH assumption in the group G in the random oracle model.
Proof. Let A be an adversary that attacks the anonymity of Mechanism 6 (in the following, the scheme
is denoted as (cid:5)FI). We consider the following sequence of games. Let Sℓ denote the event that A succeeds
in guessing the challenge bit b in Game ℓ.
[Game 0]: This is the experiment Expanon
(cid:5)FI;A((cid:21)) itself. The challenger manages an inout/output pair of
the random oracle in the list L. More precisely, when the adversary queries x to the random oracle, the
challenger returns y if there is a pair (x; y) in L. On the other hand if there is no pair (x;(cid:1)) in L, the
challenger samples a value y uniform randomly and returns y to the adversary. Then, the challenger
adds (x; y) to the list L. In the following, we denote y = H(x) if there exists a pair (x; y) in the list.
9
(
)(cid:0)c
(cid:0)(cid:27)q(cid:1)e(T1; G2)(cid:27)y(cid:1)
For the sake of convenience, we assume that the adversary queries (gpk;fTigi2[1;4];fRigi2[1;4]; m) to
the random oracle before he queries (m; (cid:6) = fTigi2[1;4]; c; (cid:27)x; (cid:27)y; (cid:27)(cid:14); (cid:27)q; (cid:27)r)) to the Open oracle where
R1 = e(H; G2)(cid:27)x(cid:1)e(K; G2)(cid:27)(cid:14)(cid:1)e(K; Y )
(cid:0)c,
and R4 = V (cid:27)r (cid:1) T4
(cid:0)c. Since we can construct the adversary who generates the involved random oracle
query before querying to the Open oracle by using the adversary who does not generate the involved
random oracle query before querying to the Open oracle, the condition can be assumed without loss of
generality.
[Game 1]: We modify the way to generate the challenge signature in Game 1. More precisely,
there is already the pair ((gpk;fT
H(gpk;fT
(cid:3)
lenger generates the challenge signature as in Game 0.
if
);(cid:1)) in the list L when computing the value
= ?. If there is not such a value, the chal-
, R2 = G(cid:27)x+(cid:27)r(cid:1)T2
(cid:0)c, R3 = U (cid:27)r(cid:1)T3
gi2[1;4]; m
(cid:3)
(cid:3)
), the challenger sets (cid:6)
gi2[1;4];fR
gi2[1;4];fR
gi2[1;4]; m
e(G1;G2)
e(T1;Y )
(cid:3)
i
(cid:3)
i
(cid:3)
i
(cid:3)
i
[Game 2]: We further modify the way to generate the challenge signature. In this game, the challenge
signature is generated as follows:
(cid:3)
1 ; T
(cid:3)
2 ; T
(cid:3)
3 ; T
(cid:3)
4 as in Game 1.
(cid:3) 2 Zp uniformly random, and compute R
(cid:3)
1 = e(H; G2)(cid:27)
(cid:3)
x (cid:1)
(cid:3)
x+(cid:27)
(cid:3)
r (cid:1) T
(cid:3)