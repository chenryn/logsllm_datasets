whenever the generator can be cast as sampling the
encoding of the random evaluation of a circuit in the
class CS. While the class CS appears restrictive, we ob-
serve that several known constructions of preprocessing
zk-SNARK have such a generator.
To facilitate this application to zk-SNARKs, we
(i) integrated our system with libsnark [45], and
(ii) applied our system to generating public parameters for
two speciﬁc zk-SNARK constructions: that of [21], [25]
(supporting arithmetic relations) and that of [31] (sup-
porting boolean relations). We also extended libsnark
with an implementation of [31]’s zk-SNARK, augment-
ing its existing implementation based on [21], [25].
Given an arithmetic circuit D, our code constructs
a related circuit CPGHR in CS, such that the encoding
3A broadcast channel can also be thought of as an append-only
public logbook and can be implemented in practice, e.g., via Bitcoin’s
puzzle-based block-chain protocol [46]; authentication can be achieved,
e.g., via digital signatures supported by a public-key infrastructure.
A common random string can, e.g., be implemented via a public
randomness source with high entropy (or even coin-tossing protocols).
4A malicious party may prevent the protocol from completing, by
acting incorrectly or by delaying prescribed broadcasts. However, the
culprit can be readily identiﬁed.
289289
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:37 UTC from IEEE Xplore.  Restrictions apply. 
of a random evaluation of CPGHR corresponds to public
parameters for [21], [25]’s zk-SNARK when proving
satisﬁability of D. If D has Nw wires and Ng gates, then
((cid:6)log2 Ng(cid:7) + 1) + 38
CPGHR has size 11Nw + 2
and S-depth 3. Similarly, given a boolean circuit D,
our code constructs a related circuit CDFGK in CS for
[31]’s zk-SNARK; if D has Nw wires and Ng gates, then
((cid:6)log2 Ng(cid:7) + 1) + 10
CDFGK has size 2Nw + 2
and S-depth 2.
(cid:2)log2 Ng(cid:3)
(cid:2)log2 Ng(cid:3)
We evaluate the concrete costs of our protocol when
used to generate the public parameters, needed by the
aforementioned zk-SNARK, in order to prove satisﬁabil-
ity of speciﬁc circuits D in the following applications.
• Our system can securely generate the public parameters
for Zerocash [8], a decentralized anonymous payment
system extending Bitcoin. Letting D be the circuit that
implements the NP relation used in Zerocash: CPGHR
has size 138,467,206 and S-depth 3; in our multi-party
protocol, the number of rounds is 3n + 3 and each
party works for 14,124 s.
• Our system can securely generate the public parameters
needed for the scalable zk-SNARK of [39], which
proves correct execution of programs on a 32-bit RISC
architecture. Letting D be the circuit used in [39]:
CPGHR has size 8,027,609 and S-depth 6; in our multi-
party protocol, the number of rounds is 6n + 6 and
each party works for 4,048 s. (In [39] there are two
required circuits; here and later we specify, for each
complexity measure, the sum of the two costs.)
In both of cases above, the S-depth is extremely small
(less than 10), but the standard depth of the same circuit
exceeds many hundreds of thousands. The fact that our
sampling protocol’s round complexity is efﬁcient in S-
depth allows for scaling to larger number of parties.
C. Summary of challenges and techniques
We describe at a high level the challenges that arise, as
well as the techniques that we employed to address them,
for each of our two main contributions.
→ Fh
1) Secure sampling for a class of circuits
Let r be a prime, G = (cid:3)G(cid:4) an order-r group, n a positive
integer, and C : Fm
r an Fr-arithmetic circuit.
We seek an n-party protocol for sampling C((cid:4)α) · G,
r
for a random (cid:4)α, that is secure against up to n − 1
malicious parties. We may compromise on functionality
by restricting C to belong to a circuit class CS, provided
that,
in return, we gain improved efﬁciency (since,
ultimately, we want to implement the protocol and use
it to generate zk-SNARK public parameters).
n
(cid:2)
The ideal functionality. The ﬁrst step is to choose
the ideal functionality fC,G to be implemented by the
multi-party protocol. A reasonable candidate is the
following: on input (cid:4)σ := ((cid:4)σ1, . . . , (cid:4)σn) where (cid:4)σi =
(σi,1, . . . , σi,m) ∈ Fm
r is party i’s input, fC,G ﬁrst com-
i=1 σi,j for j = 1, . . . , m; then fC,G sets
putes αj :=
(cid:4)α := (α1, . . . , αm) and computes (cid:4)P := C((cid:4)α)·G; ﬁnally,
fC,G outputs (cid:4)P. Indeed, if at least one party honestly
provides an input consisting of random ﬁeld elements,
fC,G outputs the encoding of a random evaluation of C.5
Potential approaches. A typical next step is to write
a boolean circuit that evaluates fC,G, and then invoke
an (off-the-shelf or tailored) multi-party protocol for
securely evaluating the circuit. However, the conversion
to a boolean is circuit is expensive, because computing
C((cid:4)α)·G involves (i) the evaluation of the Fr-arithmetic
circuit C, and (ii) h scalar multiplications over the group
G. For example, the number of boolean gates required
to compute C((cid:4)α) alone is ≥ log2 r times larger than the
number of Fr-arithmetic gates for the same task, because
each addition and multiplication in Fr is expanded into
a boolean sub-circuit of size ≥ log2 r. Similarly, each
scalar multiplication over G expands into a boolean sub-
circuit of size ≥ log2 q · log2 r. In sum, the conversion
incurs a blowup of up to ﬁve orders of magnitude
in the number of gates to securely evaluate, because
log2 q, log2 r ≥ 250 (for, e.g., 128 bits of security).
So perhaps we could instead express the computation
via an arithmetic circuit, and use a multi-party protocol
for arithmetic circuits. However, over what ﬁeld should
the arithmetic circuit be deﬁned? While the circuit C is
deﬁned over the ﬁeld Fr, the group G may not be; indeed,
for the application considered in this paper (sampling
of public parameters for zk-SNARKs), the group G is
deﬁned over a prime ﬁeld Fq that is different from
Fr. If we express the computation as an Fr-arithmetic
circuit then, while evaluating C may be efﬁcient, scalar
multiplications over G are not. Conversely, if we express
the computation as an Fq-arithmetic circuit, while scalar
multiplications over G may be efﬁcient, evaluating C is
not. Either way, we again incur the overheads associated
to mismatch of ﬁeld characteristic.
In addition to the above considerations, known multi-
party protocols that are secure against malicious majori-
ties either (i) have round complexity that scales linearly
with circuit depth, or (ii) rely on heavy cryptographic
tools that are unlikely to yield efﬁcient implementations
in the near future. The applications that we consider
5fC,G also checks that none of the parties’ inputs contains a zero.
Forbidding zeros biases the output distribution, but only negligibly,
since r is chosen large enough for discrete log to be hard in Z∗
r.
290290
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:37 UTC from IEEE Xplore.  Restrictions apply. 
involve circuit depths exceeding hundreds of thousands,
so that such works do not seem applicable (see Section II
for discussion and citations).
Our approach. Our approach avoids the overheads
due to mismatch in ﬁeld characteristic, and also has low
round complexity.
We observe that, for particular zk-SNARK construc-
tions (including [21], [25], [31]) the circuit C can (as
discussed in Section I-C2), be written to have a special
form so as to lie in the circuit class CS. We restrict our
attention to implementing fC,G for C ∈ CS.
For such circuits, we design a protocol where parties
jointly homomorphically evaluate the circuit C (avoiding,
in particular, ﬁrst computing (cid:4)β := C((cid:4)α) and then (cid:4)β · G).
First, all parties ﬁrst commit to their shares. Then, for
each multiplication gate, since one of the two gate’s
inputs is also an input to the circuit, every party can, in
sequence, contribute, and prove correct contribution of,
his input share. Additions are done locally (as in many
other multi-party protocols.
A naive realization of the above strategy yields an
enormous number of rounds: n times C’s depth. In
contrast, we show that, via a careful scheduling of when
each party contributes his own share, we can reduce the
number of rounds to only n times C’s S-depth, where S-
depth is a much milder notion of depth (deﬁned later). In
the zk-SNARK application that we consider, depth(C)
grows with size(C) while depthS(C) is a small constant.
We realize the above approach by splitting the con-
struction in two steps. First, we reduce the problem of
sampling the encoding of a random evaluation of C to the
problem of jointly evaluating a related circuit ˜C. Second,
we build a multi-party protocol for securely evaluating
˜C. These two steps simplify providing a formal proof of
security, as well as building a prototype implementation
of the protocol. Section I-D summarizes our construction.
Our implementation is specialized to when G is a
duplex-pairing group, in which case the NIZKs used by
parties can be implemented very efﬁciently via Schnorr
proofs and the Fiat–Shamir heuristic [47].
2) Application to zk-SNARKs
We wish to apply our system to generating public
parameters for two speciﬁc zk-SNARK constructions:
that of [21], [25] and that of [31]. This requires a
procedure for transforming the NP relation (represented
as an instance D of arithmetic or boolean satisﬁability)
given as input to generator, into a corresponding circuit
C ∈ CS such that C((cid:4)α) · G for a random (cid:4)α equals the
distribution of public parameters output by the generator.
Constructing such a circuit C, subject to the restric-
tions of CS (needed for applying our sampling protocol),
is not straightforward for either of the aforementioned
zk-SNARKs. One issue that arises, in both cases, is how
to construct a sub-circuit that, given an input τ ∈ Fr,
evaluates all Lagrange interpolating polynomials at τ;
indeed, the standard linear-size circuit for this operation
involves division gates, which our protocol does not
handle (and are thus not included in CS). Instead of
relying on the standard circuit, we rely on a suitable
FFT-like sub-circuit that avoids the division gates.
D. Construction summary
We summarize our construction of an n-party protocol
for sampling pp := C((cid:4)α) · G, for a random (cid:4)α, that is
secure against up to n − 1 malicious parties. Recall that
we focus on circuits in the class CS, which consists
of circuits C : Fm → Fh for which:
(i) the output of
each (addition or multiplication) gate is an output of the
circuit; (ii) the inputs of each addition gate are outputs
of the circuit; (iii) the two inputs of each multiplication
gate are, respectively, a circuit output and a circuit input.
See Figure 1a for an example of a circuit in CS.
We ﬁrst introduce some ideas for the artiﬁcial special
case of a single party executing the protocol; we then
explain how these ideas can be extend to multiple parties.
A special case. Suppose that a single party wishes
to generate pp in a veriﬁable way: the party outputs a
transcript tr, from which pp can be deduced, such that
anyone can establish validity of the transcript. Informally,
we seek a veriﬁer V and simulator S that satisfy:
(1) syntactical correctness: if V (tr) = 1, there is (cid:4)α ∈ Fm
such that pp = C((cid:4)α) · G; and (2) zero knowledge: tr
reveals no information beyond pp in the sense that S(pp)
is indistinguishable from tr. (At this stage we do not yet
ensure that (cid:4)α is uniformly drawn and unknown.)
The straightforward approach to achieve the above is
to set tr := (pp, π) where π is a NIZK proof (in the
common random string model) for the NP statement
“there exists (cid:4)α such that pp = C((cid:4)α) · G”, and then to let
V be the NIZK veriﬁer and S be the NIZK simulator.
We observe that, since C is in CS, the NP state-
ment above can be “factored” into a collection of sub-
statements so that the proof π can be constructed as the
concatenation of a NIZK sub-proof πg for each gate g
in C. Essentially, for each gate g taken in topological
order: if g is a multiplication gate, then we know that the
encoding P of one of the two inputs has already been
computed (and proved correct) so that, if γ ∈ F denotes
the other input and R the encoded output, the party can
generate a NIZK proof that R = γ ·P; if instead g is an
291291
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:37 UTC from IEEE Xplore.  Restrictions apply. 
ܽ
ܾ
ܿ
5
 
 
 
 
 
 







ܽ
ܾ
ܿ

݀
	
݁
5
 
 
 
4
 
3
 
1
 
 
 
 
 
 



	

(a) Example of a circuit in CS.
(b) Example of a circuit in CE.
Fig. 1: Examples of a circuit in CS and one in CE; in the latter case, the inputs of the circuit are partitioned into
slots. The red contour lines denote (traditional) circuit depth, while blue contour lines denote S-depth and E-depth.
addition gate, the group structure of G enables anyone
to evaluate g so that no NIZK proof is needed.
Extending to multiple parties. Now suppose that there