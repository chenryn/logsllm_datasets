# macOS/iOS Kernel Debugging and Heap Feng Shui
**Min (Spark) Zheng @ Alibaba Mobile Security**

## Outline
- Introduction
- macOS Two-Machine Debugging
- iOS Kernel Debugging
- Debugging Mach_voucher Heap Overflow
- Traditional Heap Feng Shui
- Port Feng Shui
- Conclusion

## Whoami
- **Social Media:**
  - SparkZheng @ Twitter
  - 蒸米spark @ Weibo
- **Professional Background:**
  - Security Expert @ Alibaba
  - PhD, Chinese University of Hong Kong
  - Member of Blue-lotus and Insight-labs
  - Formerly worked at FireEye, Baidu, and Tencent
  - Private Jailbreaks: iOS 9.2.1/9.3.5 (OverSky)

## Co-author
- Xiangyu Liu, Security Engineer @ Alibaba

## Special Thanks
- yang dian, aimin pan, jingle, luca, marcograss, windknown, liangchen, qoobee, etc.

## Introduction to macOS/iOS Kernel
- **XNU Kernel:**
  - Developed by Apple Inc.
  - Used in iOS and macOS
  - Released as open-source software under the Darwin operating system
  - XNU stands for "X is Not Unix"
- **macOS:**
  - XNU is open source and can be compiled and debugged
- **iOS:**
  - XNU is not open source and cannot be officially compiled or debugged
  - Implementation is largely similar to macOS

## macOS Two-Machine Debugging
- **Prerequisites:**
  - Two MacBooks or one MacBook with a VM (different system versions are acceptable)
  - Equipment:
    - Thunderbolt to FireWire * 2
    - Belkin FireWire 800 9/9-Pin cable * 1
    - Thunderbolt 3 (USB-C) to Thunderbolt 2 * 2 (for new 2016 MacBook)
- **Setup:**
  - Install Kernel Debug Kit (KDK) on both MacBooks
  - Connect the MacBooks using the FireWire cable
  - On the host MacBook, execute `fwkdp`
  - On the debug MacBook, copy `kernel.development` from KDK to `System/Library/Kernels/` and run:
    ```bash
    sudo nvram boot-args="debug=0x147 kdp_match_name=firewire fwkdp=0x8000 kcsuffix=development pmuflags=1 -v keepsyms=1"
    sudo kextcache -invalidate /
    sudo reboot
    ```
- **Debugging:**
  - After rebooting the debug MacBook, start debugging on the host MacBook with:
    ```bash
    lldb
    kdp-remote localhost
    ```
  - Use `image list` to get kernel addresses of partial kexts
  - Use `x/nx` to read data in the kernel
  - Set breakpoints using `b *address` (combining offsets of kernelCache + kslide)
  - Pause the debugging machine with `Command+Alt+Control+Shift+Esc`
  - Set breakpoints in XNU source code using `int $3` and print kernel information with `printf()`
  - Load Python scripts in lldb using `command script import` for more useful information
  - Use `showallkexts` to get kernel addresses of all kexts
  - Additional lldb Python commands and implementations can be found in:
    `/Library/Developer/KDKs/XXX/System/Library/Kernels/kernel.development.dSYM/Contents/Resources/Python/`

## iOS Kernel Debugging
### Kernelcache
- **Before iOS 10:**
  - Kernelcaches were encrypted
  - Keys can be found at: [Firmware Keys](https://www.theiphonewiki.com/wiki/Firmware_Keys/9.x)
- **After iOS 10:**
  - No encryption for kernelcaches
  - Unzip and decode the kernel using `img4tool`
  - Extract kernel information using `joker` and `ida`

### Register Info
- **Panic Log:**
  - Get register information from the panic log
  - Delete panic logs if too many:
    ```bash
    rm -rf /var/mobile/Library/Logs/CrashReporter/
    ```
  - Alternatively, reset the device: `General -> Reset -> Erase All Content and Settings`

### Task_for_pid
- **Kernel Memory Read/Write:**
  - Use kernel task port for arbitrary kernel memory read/write
  - If no jailbreak or no `task_for_pid()` patch, use other methods

### Kernel Slide
- **Determine Kernel Text Base and Slide:**
  - In arm32: straightforward
  - In arm64: create an OSObject in the kernel, find its vtable pointer, and search backwards to find the kernel header (refer to Siguza’s `ios-kern-utils`)

### Root and Port Address
- **Gain Root Privilege:**
  - Use kernel R/W (refer to luca’s yalu)
  - Find kernel objects addresses of related ports in memory (port -> kernel address) (refer to ianbeer’s `mach_portal`)

## Debugging Mach_voucher Heap Overflow
- **Vulnerable Code:**
  - `Mach_voucher_extract_attr_recipe_trap()` is a mach trap that can be called inside the sandbox
  - New function added in iOS 10 and macOS 10.12
  - Uses `sz` value to allocate a memory block on the kernel heap
  - Developer forgot `args->recipe_size` was a user mode pointer, leading to a buffer overflow
- **Debugging:**
  - Set breakpoints at `0xffffff8014631540` and `0xffffff8014631545` (before and after `copyio`)
  - Observe before and after heap overflow

## Traditional Heap Feng Shui
- **Mitigation Mechanism:**
  - In iOS 10 and macOS 10.12, Apple added a check for freeing into the wrong zone attack
  - Ian Beer proposed using prealloc mach_port for heap feng shui
- **Technique:**
  - Allocate ipc_kmsg objects using `mach_port_allocate_full()`
  - Use exception port to send and receive data to kernel memory
  - Data is the register values of the crashed thread
  - Create a thread, set register values, and trigger a crash
  - Data sent to: `address of ipc_kmsg object + ikm_size – 0x104`
- **Heap Layout:**
  - Allocate 2000 prealloc ports (each 0x900 size) to ensure continuous layout
  - Free the holder and overflow the first 0x40 bytes of the first_port
  - Use exception msg to change the header of the second_port
  - Leak heap address and reset the second port
  - Allocate AGXCommandQueue UserClient (0xdb8 size) to hold the spot of the second_port
- **Leak Kslide:**
  - Compare dynamic vtable address with vtable in kernelcache to figure out kslide
- **Arbitrary Kernel Memory Read/Write:**
  - Use OSSerialize to create a ROP chain invoking `uuid_copy`
  - Reverse X0 and X1 to get arbitrary kernel memory write ROP
  - Call `IOConnectGetService(Client_port)` to trigger ROP chain
  - Refer to yalu 102 for the latest public kernel patch technique
  - Note: Traditional heap feng shui has a 50% success rate

## Port Feng Shui
- **Mach Message:**
  - Most frequently used IPC mechanism in XNU
  - Use “complicated message” of `MACH_MSG_OOL_PORTS_DESCRIPTOR` to transmit out-of-line ports
- **Technique:**
  - OOL ports saved in mach msg are ipc_object pointers
  - Overflow these pointers to point to a fake ipc_object in user mode
  - Send lots of ool ports messages to ensure new allocated blocks are continuous
  - Receive some messages to dig slots
  - Send more messages to make the overflow point at the middle of the slots
  - Use `mach_voucher` vulnerability to trigger the overflow
- **Exploit:**
  - Set `io_bits` of the fake ipc_object to `IKOT_TASK` and craft a fake task for the fake port
  - Read arbitrary 32 bits kernel memory through `pid_for_task()`
  - Dump kernel ipc_object and kernel task to fake ipc_object and fake task
  - Use `task_get_special_port()` to get the kernel task port
  - Use kernel task port for arbitrary kernel memory read and write

## Conclusion
- **macOS/iOS Kernel Debugging:**
  - Essential for kernel exploit development
- **Traditional Heap Feng Shui:**
  - Requires ROP chains for kernel memory read/write
  - Multiple feng shui steps, not stable
- **Port Heap Feng Shui:**
  - Does not require gadgets, only uses data structures
  - Stable with a high success rate but easy for Apple to fix

## References
1. Yalu 102: [GitHub](https://github.com/kpwn/yalu102)
2. Mach_voucher Bug Report: [Chromium Project Zero](https://bugs.chromium.org/p/project-zero/issues/detail?id=1004)
3. iOS Kernel Utilities: [GitHub](https://github.com/Siguza/ios-kern-utils)

**Thank you!**