WAAS
2
Windows-as-a-Service
WBIO
1
Windows Biometrics
WCDS
1
Wireless LAN
WCM
6
Windows Connection Manager
WDAG
2
Windows Defender Application Guard
WDSC
1
Windows Defender Security Settings
WEBA
2
Web Authentication
WER
3
Windows Error Reporting
WFAS
1
Windows Firewall Application Service
WFDN
3
WiFi Display Connect (MiraCast)
WFS
5
Windows Family Safety
WHTP
2
Windows HTTP Library
WIFI
15
Windows Wireless Network (WiFi) Stack
WIL
20
Windows Instrumentation Library
WNS
1
Windows Notification Service
WOF
1
Windows Overlay Filter
WOSC
9
Windows One Setting Configuration
WPN
5
Windows Push Notifications
WSC
1
Windows Security Center
WSL
1
Windows Subsystem for Linux
WSQM
1
Windows Software Quality Metrics (SQM)
WUA
6
Windows Update
WWAN
5
Wireless Wire Area Network (WWAN) Service
XBOX
116
XBOX Services
CHAPTER 8 System mechanisms
233
WNF state names and storage 
WNF state names are represented as random-looking 64-bit identifiers such as 0xAC41491908517835 and 
then defined to a friendly name using C preprocessor macros such as WNF_AUDC_CAPTURE_ACTIVE. In 
reality, however, these numbers are used to encode a version number (1), a lifetime (persistent versus 
temporary), a scope (process-instanced,  container-instanced, user-instanced, session-instanced, or 
machine-instanced), a permanent data flag, and, for well-known state names, a prefix identifying the 
owner of the state name followed by a unique sequence number. Figure 8-41 below shows this format.
Owner Tag
Version
Permanent
Data
Data
Scope
Name
Lifetime
Sequence Number
32 bits
4 bits
1 bit
4 bits
2 bits
21 bits
FIGURE 8-41 Format of a WNF state name.
As mentioned earlier, state names can be well-known, which means that they are preprovisioned 
for arbitrary out-of-order use. WNF achieves this by using the registry as a backing store, which will 
encode the security descriptor, maximum data size, and type ID (if any) under the HKLM\SYSTEM\
CurrentControlSet\Control\Notifications registry key. For each state name, the information is stored 
under a value matching the 64-bit encoded WNF state name identifier. 
Additionally, WNF state names can also be registered as persistent, meaning that they will remain 
registered for the duration of the system’s uptime, regardless of the registrar’s process lifetime. This 
mimics permanent objects that were shown in the “Object Manager” section of this chapter, and 
similarly, the SeCreatePermanentPrivilege privilege is required to register such state names. These 
WNF state names also live in the registry, but under the HKLM\SOFTWARE\Microsoft\Windows NT\
CurrentVersion\VolatileNotifications key, and take advantage of the registry’s volatile flag to simply 
disappear once the machine is rebooted. You might be confused to see “volatile” registry keys being 
used for “persistent” WNF data—keep in mind that, as we just indicated, the persistence here is within 
a boot session (versus attached to process lifetime, which is what WNF calls temporary, and which 
we’ll see later).
Furthermore, a WNF state name can be registered as permanent, which endows it with the abil-
ity to persist even across reboots. This is the type of “persistence” you may have been expecting 
earlier. This is done by using yet another registry key, this time without the volatile flag set, pres-
ent at HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Notifications. Suffice it to say, the 
SeCreatePermanentPrivilege is needed for this level of persistence as well. For these types of WNF 
states, there is an additional registry key found below the hierarchy, called Data, which contains, for 
each 64-bit encoded WNF state name identifier, the last change stamp, and the binary data. Note that 
if the WNF state name was never written to on your machine, the latter information might be missing.
234 
CHAPTER 8 System mechanisms
Experiment: View WNF state names and data in the registry
In this experiment, you use the Registry Editor to take a look at the well-known WNF names as 
well as some examples of permanent and persistent names. By looking at the raw binary registry 
data, you will be able to see the data and security descriptor information.
Open Registry Editor and navigate to the HKEY_LOCAL_MACHINE\SYSTEM\
CurrentControlSet\Control\Notifications key.
Take a look at the values you see, which should look like the screenshot below.
Double-click the value called 41950C3EA3BC0875 (WNF_SBS_UPDATE_AVAILABLE), which 
opens the raw registry data binary editor.
Note how in the following figure, you can see the security descriptor (the highlighted binary 
data, which includes the SID S-1-5-18), as well as the maximum data size (0 bytes).
Experiment: View WNF state names and data in the registry
In this experiment, you use the Registry Editor to take a look at the well-known WNF names as 
well as some examples of permanent and persistent names. By looking at the raw binary registry 
data, you will be able to see the data and security descriptor information.
Open Registry Editor and navigate to the HKEY_LOCAL_MACHINE\SYSTEM\
CurrentControlSet\Control\Notifications key.
Take a look at the values you see, which should look like the screenshot below.
Double-click the value called 41950C3EA3BC0875 (WNF_SBS_UPDATE_AVAILABLE), which 
opens the raw registry data binary editor.
Note how in the following figure, you can see the security descriptor (the highlighted binary 
data, which includes the SID S-1-5-18), as well as the maximum data size (0 bytes).
CHAPTER 8 System mechanisms
235
Be careful not to change any of the values you see because this could make your system inop-
erable or open it up to attack.
Finally, if you want to see some examples of permanent WNF state, use the Registry Editor to go 
to the HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Notifications\
Data key, and look at the value 418B1D29A3BC0C75 (WNF_DSM_DSMAPPINSTALLED). An example 
is shown in the following figure, in which you can see the last application that was installed on this 
system (MicrosoftWindows.UndockedDevKit).
Finally, a completely arbitrary state name can be registered as a temporary name. Such names have 
a few distinctions from what was shown so far. First, because their names are not known in advance, 
they do require the consumers and producers to have some way of passing the identifier between 
each other. Normally, whoever either attempts to consume the state data first or to produce state data 
instead ends up internally creating and/or using the matching registry key to store the data. However, 
with temporary WNF state names, this isn’t possible because the name is based on a monotonically 
increasing sequence number. 
Be careful not to change any of the values you see because this could make your system inop-
erable or open it up to attack.
Finally, if you want to see some examples of permanent WNF state, use the Registry Editor to go
to the HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Notifications\
Data key, and look at the value 418B1D29A3BC0C75 (WNF_DSM_DSMAPPINSTALLED). An example
is shown in the following figure, in which you can see the last application that was installed on this
system (MicrosoftWindows.UndockedDevKit).
236 
CHAPTER 8 System mechanisms
Second, and related to this fact, no registry keys are used to encode temporary state names—they 
are tied to the process that registered a given instance of a state name, and all the data is stored in 
kernel pool only. These types of names, for example, are used to implement the per-process wake 
channels described earlier. Other uses include power manager notifications, and direct service triggers 
used by the SCM.
WNF publishing and subscription model
When publishers leverage WNF, they do so by following a standard pattern of registering the state 
name (in the case of non-well-known state names) and publishing some data that they want to expose. 
They can also choose not to publish any data but simply provide a 0-byte buffer, which serves as a way 
to “light up” the state and signals the subscribers anyway, even though no data was stored.
Consumers, on the other hand, use WNF’s registration capabilities to associate a callback with a 
given WNF state name. Whenever a change is published, this callback is activated, and, for kernel 
mode, the caller is expected to call the appropriate WNF API to retrieve the data associated with the 
state name. (The buffer size is provided, allowing the caller to allocate some pool, if needed, or perhaps 
choose to use the stack.) For user mode, on the other hand, the underlying WNF notification mecha-
nism inside of Ntdll.dll takes care of allocating a heap-backed buffer and providing a pointer to this 
data directly to the callback registered by the subscriber.
In both cases, the callback also provides the change stamp, which acts as a unique monotonic se-
quence number that can be used to detect missed published data (if a subscriber was inactive, for some 
reason, and the publisher continued to produce changes). Additionally, a custom context can be associ-
ated with the callback, which is useful in C++ situations to tie the static function pointer to its class.
Note WNF provides an API for querying whether a given WNF state name has been reg-
istered yet (allowing a consumer to implement special logic if it detects the producer must 
not yet be active), as well as an API for querying whether there are any subscriptions cur-
rently active for a given state name (allowing a publisher to implement special logic such as 
perhaps delaying additional data publication, which would override the previous state data).
WNF manages what might be thousands of subscriptions by associating a data structure with each 
kernel and/or user-mode subscription and tying all the subscriptions for a given WNF state name 
together. This way, when a state name is published to, the list of subscriptions is parsed, and, for user 
mode, a delivery payload is added to a linked list followed by the signaling of a per-process notification 
event—this instructs the WNF delivery code in Ntdll.dll to call the API to consume the payload (and any 
other additional delivery payloads that were added to the list in the meantime). For kernel mode, the 
mechanism is simpler—the callback is synchronously executed in the context of the publisher.
Note that it’s also possible to subscribe to notifications in two modes: data-notification mode, and 
meta-notification mode. The former does what one might expect—executing the callback when new 
data has been associated with a WNF state name. The latter is more interesting because it sends noti-
fications when a new consumer has become active or inactive, as well as when a publisher has termi-
nated (in the case of a volatile state name, where such a concept exists). 
CHAPTER 8 System mechanisms
237
Finally, it’s worth pointing out that user-mode subscriptions have an additional wrinkle: Because 
Ntdll.dll manages the WNF notifications for the entire process, it’s possible for multiple components 
(such as dynamic libraries/DLLs) to have requested their own callback for the same WNF state name 
(but for different reasons and with different contexts). In this situation, the Ntdll.dll library needs to 
associate registration contexts with each module, so that the per-process delivery payload can be 
translated into the appropriate callback and only delivered if the requested delivery mode matches the 
notification type of the subscriber.
Experiment: Using the WnfDump utility to dump WNF state names
In this experiment, you use one of the book tools (WnfDump) to register a WNF subscription to 
the WNF_SHEL_DESKTOP_APPLICATION_STARTED state name and the WNF_AUDC_RENDER 
state name.
Execute wnfdump on the command line with the following flags:
-i WNF_SHEL_DESKTOP_APPLICATION_STARTED -v
The tool displays information about the state name and reads its data, such as shown in the 
following output:
C:\>wnfdump.exe -i WNF_SHEL_DESKTOP_APPLICATION_STARTED -v 
WNF State Name                                    | S | L | P | AC | N | CurSize | MaxSize  
-------------------------------------------------------------------------------------------
WNF_SHEL_DESKTOP_APPLICATION_STARTED              | S | W | N | RW | I |      28 |     512  
65 00 3A 00 6E 00 6F 00-74 00 65 00 70 00 61 00  e.:.n.o.t.e.p.a. 
64 00 2E 00 65 00 78 00-65 00 00 00              d...e.x.e...
Because this event is associated with Explorer (the shell) starting desktop applications, you will 
see one of the last applications you double-clicked, used the Start menu or Run menu for, or, in 
general, anything that the ShellExecute API was used on. The change stamp is also shown, which 
will end up a counter of how many desktop applications have been started this way since booting 
this instance of Windows (as this is a persistent, but not permanent, event).
Launch a new desktop application such as Paint by using the Start menu and try the wnfdump 
command again. You should see the change stamp incremented and new binary data shown.
WNF event aggregation
Although WNF on its own provides a powerful way for clients and services to exchange state informa-
tion and be notified of each other’s statuses, there may be situations where a given client/subscriber is 
interested in more than a single WNF state name.
For example, there may be a WNF state name that is published whenever the screen backlight 
is off, another when the wireless card is powered off, and yet another when the user is no longer 
physically present. A subscriber may want to be notified when all of these WNF state names have 
Experiment: Using the WnfDump utility to dump WNF state names
In this experiment, you use one of the book tools (WnfDump) to register a WNF subscription to 
the WNF_SHEL_DESKTOP_APPLICATION_STARTED state name and the WNF_AUDC_RENDER
state name.
Execute wnfdump on the command line with the following flags:
-i WNF_SHEL_DESKTOP_APPLICATION_STARTED -v
The tool displays information about the state name and reads its data, such as shown in the 
following output:
C:\>wnfdump.exe -i WNF_SHEL_DESKTOP_APPLICATION_STARTED -v
WNF State Name                                    | S | L | P | AC | N | CurSize | MaxSize 
-------------------------------------------------------------------------------------------
WNF_SHEL_DESKTOP_APPLICATION_STARTED              | S | W | N | RW | I |      28 |     512 
65 00 3A 00 6E 00 6F 00-74 00 65 00 70 00 61 00  e.:.n.o.t.e.p.a.
64 00 2E 00 65 00 78 00-65 00 00 00              d...e.x.e...
Because this event is associated with Explorer (the shell) starting desktop applications, you will 
see one of the last applications you double-clicked, used the Start menu or Run menu for, or, in 
general, anything that the ShellExecute API was used on. The change stamp is also shown, which 
will end up a counter of how many desktop applications have been started this way since booting 
this instance of Windows (as this is a persistent, but not 
persistent, but not 
persistent
permanent, event).
permanent, event).
permanent
Launch a new desktop application such as Paint by using the Start menu and try the wnfdump
command again. You should see the change stamp incremented and new binary data shown.
238 
CHAPTER 8 System mechanisms
been published—yet another may require a notification when either the first two or the latter 
has been published. 
Unfortunately, the WNF system calls and infrastructure provided by Ntdll.dll to user-mode cli-
ents (and equally, the API surface provided by the kernel) only operate on single WNF state names. 
Therefore, the kinds of examples given would require manual handling through a state machine that 
each subscriber would need to implement. 
To facilitate this common requirement, a component exists both in user mode as well as in kernel 
mode that handles the complexity of such a state machine and exposes a simple API: the Common 
Event Aggregator (CEA) implemented in CEA.SYS for kernel-mode callers and EventAggregation.dll 
for user-mode callers. These libraries export a set of APIs (such as EaCreateAggregatedEvent and 
EaSignalAggregatedEvent), which allow an interrupt-type behavior (a start callback while a WNF state 
is true, and a stop callback once the WNF state if false) as well as the combination of conditions with 
operators such as AND, OR, and NOT.
Users of CEA include the USB Stack as well as the Windows Driver Foundation (WDF), which exposes 
a framework callback for WNF state name changes. Further, the Power Delivery Coordinator (Pdc.sys) 
uses CEA to build power state machines like the example at the beginning of this subsection. The 
Unified Background Process Manager (UBPM) described in Chapter 9 also relies on CEA to implement 
capabilities such as starting and stopping services based on low power and/or idle conditions.
Finally, WNF is also integral to a service called the System Event Broker (SEB), implemented in 
SystemEventsBroker.dll and whose client library lives in SystemEventsBrokerClient.dll. The latter exports 
APIs such as SebRegisterPrivateEvent, SebQueryEventData, and SebSignalEvent, which are then passed 
through an RPC interface to the service. In user mode, SEB is a cornerstone of the Universal Windows 
Platform (UWP) and the various APIs that interrogate system state, and services that trigger themselves 
based on certain state changes that WNF exposes. Especially on OneCore-derived systems such as 
Windows Phone and XBOX (which, as was shown earlier, make up more than a few hundred of the well-