}
if x[0] == y[0] {
y = y[1:]
}
x = x[1:]
}
return false
}
示例: 基于标记的XML解码 284
gopl
每次main函数中的循环遇到一个StartElement时，它把这个元素的名称压到一个栈里；并且
每次遇到EndElement时，它将名称从这个栈中推出。这个API保证了StartElement和
EndElement的序列可以被完全的匹配，甚至在一个糟糕的文档格式中。注释会被忽略。当
xmlselect遇到一个CharData时，只有当栈中有序地包含所有通过命令行参数传入的元素名称
时它才会输出相应的文本。
下面的命令打印出任意出现在两层div元素下的h2元素的文本。它的输入是XML的说明文档，
并且它自己就是XML文档格式的。
$ go build gopl.io/ch1/fetch
$ ./fetch http://www.w3.org/TR/2006/REC-xml11-20060816 |
./xmlselect div div h2
html body div div h2: 1 Introduction
html body div div h2: 2 Documents
html body div div h2: 3 Logical Structures
html body div div h2: 4 Physical Structures
html body div div h2: 5 Conformance
html body div div h2: 6 Notation
html body div div h2: A References
html body div div h2: B Definitions for Character Normalization
...
练习 7.17： 扩展xmlselect程序以便让元素不仅仅可以通过名称选择，也可以通过它们CSS样
式上属性进行选择；例如一个像这样
的元素可以通过匹配id或者class同时还有它的名称来进行选择。
练习 7.18： 使用基于标记的解码API，编写一个可以读取任意XML文档和构造这个文档所代
表的普通节点树的程序。节点有两种类型：CharData节点表示文本字符串，和 Element节点
表示被命名的元素和它们的属性。每一个元素节点有一个字节点的切片。
你可能发现下面的定义会对你有帮助。
import "encoding/xml"
type Node interface{} // CharData or *Element
type CharData string
type Element struct {
Type xml.Name
Attr []xml.Attr
Children []Node
}
示例: 基于标记的XML解码 285
gopl
示例: 基于标记的XML解码 286
gopl
7.15. 一些建议
当设计一个新的包时，新手Go程序员总是先创建一套接口，然后再定义一些满足它们的具体
类型。这种方式的结果就是有很多的接口，它们中的每一个仅只有一个实现。不要再这么做
了。这种接口是不必要的抽象；它们也有一个运行时损耗。你可以使用导出机制(§6.6)来限制
一个类型的方法或一个结构体的字段是否在包外可见。接口只有当有两个或两个以上的具体
类型必须以相同的方式进行处理时才需要。
当一个接口只被一个单一的具体类型实现时有一个例外，就是由于它的依赖，这个具体类型
不能和这个接口存在在一个相同的包中。这种情况下，一个接口是解耦这两个包的一个好方
式。
因为在Go语言中只有当两个或更多的类型实现一个接口时才使用接口，它们必定会从任意特
定的实现细节中抽象出来。结果就是有更少和更简单方法（经常和io.Writer或 fmt.Stringer一
样只有一个）的更小的接口。当新的类型出现时，小的接口更容易满足。对于接口设计的一
个好的标准就是 ask only for what you need（只考虑你需要的东西）
我们完成了对methods和接口的学习过程。Go语言对面向对象风格的编程支持良好，但这并
不意味着你只能使用这一风格。不是任何事物都需要被当做成一个对象；独立的函数有它们
自己的用处，未封装的数据类型也是这样。观察一下，在本书前五章的例子中像input.Scan这
样的方法被调用不超过二十次，与之相反的是普遍的函数调用如fmt.Printf。
补充几点 287
gopl
第八章 Goroutines和Channels
并发程序指同时进行多个任务的程序，随着硬件的发展，并发程序变得越来越重要。Web服
务器会一次处理成千上万的请求。平板电脑和手机app在渲染用户画面同时还会后台执行各种
计算任务和网络请求。即使是传统的批处理问题--读取数据，计算，写输出--现在也会用并发
来隐藏掉I/O的操作延迟以充分利用现代计算机设备的多个核心。计算机的性能每年都在以非
线性的速度增长。
Go语言中的并发程序可以用两种手段来实现。本章讲解goroutine和channel，其支持“顺序通
信进程”(communicating sequential processes)或被简称为CSP。CSP是一种现代的并发编程
模型，在这种编程模型中值会在不同的运行实例(goroutine)中传递，尽管大多数情况下仍然是
被限制在单一实例中。第9章覆盖更为传统的并发模型：多线程共享内存，如果你在其它的主
流语言中写过并发程序的话可能会更熟悉一些。第9章也会深入介绍一些并发程序带来的风险
和陷阱。
尽管Go对并发的支持是众多强力特性之一，但跟踪调试并发程序还是很困难，在线性程序中
形成的直觉往往还会使我们误入歧途。如果这是读者第一次接触并发，推荐稍微多花一些时
间来思考这两个章节中的样例。
Goroutines和Channels 288
gopl
8.1. Goroutines
在Go语言中，每一个并发的执行单元叫作一个goroutine。设想这里的一个程序有两个函数，
一个函数做计算，另一个输出结果，假设两个函数没有相互之间的调用关系。一个线性的程
序会先调用其中的一个函数，然后再调用另一个。如果程序中包含多个goroutine，对两个函
数的调用则可能发生在同一时刻。马上就会看到这样的一个程序。
如果你使用过操作系统或者其它语言提供的线程，那么你可以简单地把goroutine类比作一个
线程，这样你就可以写出一些正确的程序了。goroutine和线程的本质区别会在9.8节中讲。
当一个程序启动时，其主函数即在一个单独的goroutine中运行，我们叫它main goroutine。新
的goroutine会用go语句来创建。在语法上，go语句是一个普通的函数或方法调用前加上关键
字go。go语句会使其语句中的函数在一个新创建的goroutine中运行。而go语句本身会迅速地
完成。
f() // call f(); wait for it to return
go f() // create a new goroutine that calls f(); don't wait
下面的例子，main goroutine将计算菲波那契数列的第45个元素值。由于计算函数使用低效的
递归，所以会运行相当长时间，在此期间我们想让用户看到一个可见的标识来表明程序依然
在正常运行，所以来做一个动画的小图标：
gopl.io/ch8/spinner
Goroutines 289
gopl
func main() {
go spinner(100 * time.Millisecond)
const n = 45
fibN := fib(n) // slow
fmt.Printf("\rFibonacci(%d) = %d\n", n, fibN)
}
func spinner(delay time.Duration) {
for {
for _, r := range `-\|/` {
fmt.Printf("\r%c", r)
time.Sleep(delay)
}
}
}
func fib(x int) int {
if x < 2 {
return x
}
return fib(x-1) + fib(x-2)
}
动画显示了几秒之后，fib(45)的调用成功地返回，并且打印结果：
Fibonacci(45) = 1134903170
然后主函数返回。主函数返回时，所有的goroutine都会被直接打断，程序退出。除了从主函
数退出或者直接终止程序之外，没有其它的编程方法能够让一个goroutine来打断另一个的执
行，但是之后可以看到一种方式来实现这个目的，通过goroutine之间的通信来让一个
goroutine请求其它的goroutine，并让被请求的goroutine自行结束执行。
留意一下这里的两个独立的单元是如何进行组合的，spinning和菲波那契的计算。分别在独立
的函数中，但两个函数会同时执行。
Goroutines 290
gopl
8.2. 示例: 并发的Clock服务
网络编程是并发大显身手的一个领域，由于服务器是最典型的需要同时处理很多连接的程
序，这些连接一般来自于彼此独立的客户端。在本小节中，我们会讲解go语言的net包，这个
包提供编写一个网络客户端或者服务器程序的基本组件，无论两者间通信是使用TCP，UDP
或者Unix domain sockets。在第一章中我们使用过的net/http包里的方法，也算是net包的一
部分。
我们的第一个例子是一个顺序执行的时钟服务器，它会每隔一秒钟将当前时间写到客户端：
gopl.io/ch8/clock1
示例: 并发的Clock服务 291
gopl
// Clock1 is a TCP server that periodically writes the time.
package main
import (
"io"
"log"
"net"
"time"
)
func main() {
listener, err := net.Listen("tcp", "localhost:8000")
if err != nil {
log.Fatal(err)
}
for {
conn, err := listener.Accept()
if err != nil {
log.Print(err) // e.g., connection aborted
continue
}
handleConn(conn) // handle one connection at a time
}
}
func handleConn(c net.Conn) {
defer c.Close()
for {
_, err := io.WriteString(c, time.Now().Format("15:04:05\n"))
if err != nil {
return // e.g., client disconnected
}
time.Sleep(1 * time.Second)
}
}
Listen函数创建了一个net.Listener的对象，这个对象会监听一个网络端口上到来的连接，在这
个例子里我们用的是TCP的localhost:8000端口。listener对象的Accept方法会直接阻塞，直到
一个新的连接被创建，然后会返回一个net.Conn对象来表示这个连接。
handleConn函数会处理一个完整的客户端连接。在一个for死循环中，用time.Now()获取当前
时刻，然后写到客户端。由于net.Conn实现了io.Writer接口，我们可以直接向其写入内容。这
个死循环会一直执行，直到写入失败。最可能的原因是客户端主动断开连接。这种情况下
handleConn函数会用defer调用关闭服务器侧的连接，然后返回到主函数，继续等待下一个连
接请求。
示例: 并发的Clock服务 292
gopl
time.Time.Format方法提供了一种格式化日期和时间信息的方式。它的参数是一个格式化模板
标识如何来格式化时间，而这个格式化模板限定为Mon Jan 2 03:04:05PM 2006 UTC-0700。
有8个部分(周几，月份，一个月的第几天，等等)。可以以任意的形式来组合前面这个模板；
出现在模板中的部分会作为参考来对时间格式进行输出。在上面的例子中我们只用到了小
时、分钟和秒。time包里定义了很多标准时间格式，比如time.RFC1123。在进行格式化的逆
向操作time.Parse时，也会用到同样的策略。(译注：这是go语言和其它语言相比比较奇葩的
一个地方。。你需要记住格式化字符串是1月2日下午3点4分5秒零六年UTC-0700，而不像其
它语言那样Y-m-d H:i:s一样，当然了这里可以用1234567的方式来记忆，倒是也不麻烦)
为了连接例子里的服务器，我们需要一个客户端程序，比如netcat这个工具(nc命令)，这个工
具可以用来执行网络连接操作。
$ go build gopl.io/ch8/clock1
$ ./clock1 &
$ nc localhost 8000
13:58:54
13:58:55
13:58:56
13:58:57
^C
客户端将服务器发来的时间显示了出来，我们用Control+C来中断客户端的执行，在Unix系统
上，你会看到^C这样的响应。如果你的系统没有装nc这个工具，你可以用telnet来实现同样的
效果，或者也可以用我们下面的这个用go写的简单的telnet程序，用net.Dial就可以简单地创
建一个TCP连接：
gopl.io/ch8/netcat1
示例: 并发的Clock服务 293
gopl
// Netcat1 is a read-only TCP client.
package main
import (
"io"
"log"
"net"
"os"
)
func main() {
conn, err := net.Dial("tcp", "localhost:8000")
if err != nil {
log.Fatal(err)
}
defer conn.Close()
mustCopy(os.Stdout, conn)
}
func mustCopy(dst io.Writer, src io.Reader) {
if _, err := io.Copy(dst, src); err != nil {
log.Fatal(err)
}
}
这个程序会从连接中读取数据，并将读到的内容写到标准输出中，直到遇到end of file的条件
或者发生错误。mustCopy这个函数我们在本节的几个例子中都会用到。让我们同时运行两个