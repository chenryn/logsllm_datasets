# Effective Detection of Credential Thefts from Windows Memory: Learning Access Behaviors to Local Security Authority Subsystem Service

**Authors:**
- Patrick Ah-Fat, Imperial College London
- Michael Huth, Imperial College London
- Rob Mead, Microsoft
- Tim Burrell, Microsoft
- Joshua Neil, Microsoft

## Abstract
Malicious actors who have already penetrated an enterprise network often exploit their access to launch further attacks. Credential theft is a common preparatory action for such attacks, as it enables privilege escalation or lateral movement. Advanced techniques for extracting credentials from Windows memory have been developed by sophisticated attackers. Current state-of-the-art methods for identifying these techniques rely on malware detection, which can only alert on the presence of specific known malicious executable files. Consequently, attackers can evade detection by modifying their code. In contrast, our work focuses directly on the memory read access behavior of processes that interact with the Local Security Authority Subsystem Service (LSASS), which enforces system security policies.

We use machine learning techniques, driven by data from real enterprise networks, to classify memory read behaviors as either malicious or benign. Given the prevalence of Mimikatz, a popular tool for credential theft observed in Microsoft Defender Advanced Threat Protection (MDATP), our goal is to develop a generic model that detects the techniques it employs. Our classifier is based on novel features of memory read events and the characterization of three popular credential theft techniques. This classifier has been integrated into a detector that is now running in production, protecting MDATP customers. Our experiments demonstrate that this detector has excellent false negative and false positive rates, and it successfully identifies true positives that previous detectors missed.

## 1. Introduction
Over the past decade, there has been a dramatic increase in both the number and sophistication of cyber-attacks. As a result, devices and networks of private citizens, businesses, and government agencies are often no longer fully protected against all types of threats. It is now widely accepted that malicious actors may already be present within a network. Therefore, detecting suspicious or malicious activity within the network perimeter is crucial for containing such activities and mitigating potential damage. Modern enterprise security systems must combine protection with detection to expose intruders who have managed to bypass protective measures and compromise the network's security.

Our research in intrusion detection, like others [2, 9, 11], assumes that an attacker has already compromised a network through a vulnerability such as a security-critical bug in system software. For effective intrusion detection, we need reliable tools to identify actions within the network that likely stem from a malicious actor.

Developing such tools benefits from models of attack intent. For example, if an attacker aims to steal monetary assets from a bank network, we can infer a set and possible sequence of actions the attacker would take. Conversely, identifying malicious actions can help security monitors understand the dynamic intent of an attacker. Some actions are common across many different types of malicious intent, making their detection particularly valuable for identifying internal attacks and providing flexibility in recognizing behaviors common to various attacks.

In this paper, we focus on credential theft, a well-known behavior among attackers who have compromised a machine. Credentials are valuable because they can enable privilege escalation or lateral movement. An attacker who steals security-relevant credentials can use them to gain administrator rights, access other machines on the network, and more. A variety of methods for stealing credentials have been developed, including phishing, keylogging, password spraying, and wireless traffic monitoring.

Our work investigates a specific, advanced technique used by both attackers and forensic analysts to retrieve user credentials by repeatedly reading from machine memory. We focus on this technique within the Windows operating system, although our contributions may be transferable to other operating systems. We chose Windows because:
- It is widely used in private, commercial, and government networks.
- We have the ability to integrate our findings into Windows products.

Given our focus on Windows and its security architecture, we concentrate on detecting malicious memory accesses to the Local Security Authority Subsystem Service (LSASS), a critical system process that enforces security policies. LSASS performs essential tasks such as verifying user logins, managing passwords, and creating access tokens. As such, it contains a significant amount of sensitive data, making it a prime target for credential theft.

It is important to note that not all processes reading from LSASS memory have malicious intent. Many legitimate processes, such as anti-virus and security software, scan LSASS memory during routine checks to detect corrupted or infected files. On average, LSASS memory is read 40 million times daily by thousands of different processes, according to MDATP data.

Our research aims to develop a method to determine whether a process reading from LSASS memory is performing a benign action, such as a virus scan, or attempting to steal sensitive information, notably credentials. This problem suggests the use of machine learning techniques for binary classification.

## Methodology and Contributions
Our methodology and contributions are as follows:

1. **Data-Driven Feature Extraction:** We use real-world data to determine novel features and a model for precise analysis, control, and characterization of LSASS memory access.
2. **Signature Computation:** We demonstrate that these features allow us to compute "signatures" of processes based on their LSASS memory access patterns.
3. **Cluster Analysis:** We show that different sessions of the same process tend to aggregate into a single linearly identifiable cluster of read behavior.
4. **Harvesting Malicious Reads:** We collect malicious read accesses to LSASS memory by gathering reads performed by known penetration testing tools on MDATP customer machines.
5. **Data Characterization:** We characterize the harvested data using linear regressions to distinguish benign from malicious LSASS read accesses.
6. **Detector Design:** Based on this, we design an effective detector capable of identifying suspicious read accesses to LSASS memory.
7. **Experimental Validation:** We experimentally confirm that our detector has low false positive and false negative rates and highlights interesting true positives.
8. **Deployment:** Finally, we deployed this detector in production on MDATP, where it actively protects customers.

These outcomes have the potential to be integrated with online detection tools, enhancing their effectiveness. For example, the machine-learning models of the detector can be updated based on daily statistical data collected from Windows systems and enriched with security-relevant information from external sources such as cyber-intelligence or threat centers. This may also lead to the design of non-linear classifiers in future work.

## Outline of the Paper
- **Section 2:** Reviews related work.
- **Section 3:** Details our methodology.
- **Section 4:** Introduces our novel model for memory reads.
- **Section 5:** Explores patterns in benign read behavior.
- **Section 6:** Describes the harvest and analysis of malicious memory read behavior.
- **Section 7:** Builds and evaluates our detector.
- **Section 8:** Highlights interesting alerts produced by the detector.
- **Section 9:** Studies how our approach deals with Windows updates.
- **Section 10:** Considers the resiliency of our detector against adversarial manipulation.
- **Section 11:** Suggests future work.
- **Section 12:** Discusses our work further.
- **Section 13:** Concludes the paper.

## 2. Related Work

### 2.1 Credential Theft by Memory Dumping
A key method for intruders to retrieve credentials is to read from the LSASS memory. To do so, attackers need the debug privilege to access this protected memory location. We assume that the network has been infiltrated by malicious actors, and thus, they have already gained the debug privilege and are trying to access memory maliciously.

Attackers have designed various tools, such as Lslsass, Windows Credential Editor, and Mimikatz, to read the LSASS process memory and extract credentials. Otherwise benign processes, like procdump or taskmgr, can be abused to perform living-off-the-land attacks by dumping the entire LSASS process memory. These techniques have been used in large-scale cyber-attacks, such as NotPetya and Olympic Destroyer.

Mimikatz is a common tool for stealing Windows credentials and is the most prevalent in MDATP machines worldwide over seven months. It offers various techniques to extract sensitive information, which can be selected via command-line arguments. Mimikatz can also be launched interactively or remotely via PowerShell.

For our work, we focus on the three most popular techniques for stealing credentials from LSASS memory:
- **L1:** Enumerate logon passwords with the command `sekurlsa::logonpasswords`.
- **L2:** Steal Kerberos tickets with the command `sekurlsa::tickets`.
- **L3:** Pass the hash with the command `sekurlsa::pth`.

### 2.2 Memory Dumping Detection
Current detection mechanisms for credential dumping are primarily static. Commonly used antivirus software can detect the presence of the Mimikatz executable file and quarantine it. Yara rules, created by Benjamin Delpy, the author of Mimikatz, can recognize the Mimikatz executable. However, these rules cannot prevent remote execution via PowerShell or process injection. Attackers can also bypass these measures by renaming and recompiling their own custom version of Mimikatz.

Other detection mechanisms, such as honey hashes, aim to raise an alert when stolen credentials are reused. However, this approach leaves customers unprotected if an attacker steals credentials and retains them for future use.

In contrast, our work aims to analyze and detect the actual behavior of processes accessing LSASS memory. This approach directly targets malicious behavior rather than relying on static proxies, making it resilient to countermeasures like process injection and remote execution.

### 2.3 LSASS Architecture
The Local Security Authority Subsystem Service (LSASS) is a system process in Microsoft Windows that provides services for authentication and maintains security information. LSASS stores credentials in memory on behalf of users with active sessions, allowing them to access resources without re-entering passwords.

Credentials can be stored in multiple forms, including NT and LAN Manager hashes and Kerberos tickets. A handle with `PROCESS_VM_READ` can be opened on the LSASS process object to perform cross-process reads of sensitive data. Alternatively, the accessor can hold `SeDebugPrivilege`, granting access to all non-protected processes regardless of their Security Descriptor. Any local administrator can read the LSASS process memory, potentially extracting cached credentials of other users on the domain.

Technologies like LSASS as Protected Process Light (PPL) and Virtualization-Based Security (VBS) have been introduced to prevent this attack vector. However, these technologies are not always enabled due to compatibility issues or hardware requirements, leaving cross-process reads of LSASS memory a viable technique for privilege escalation. Our approach to detection is particularly relevant in environments where PPL and VBS cannot be enabled.

### 2.4 Learning Intruder Behaviors
Previous works have focused on designing detection mechanisms by learning the behavior of legitimate and malicious agents. For example, the work in [20] focuses on intrusion detection by learning patterns in system call sequences. Our approach builds on this by specifically targeting memory read behaviors associated with LSASS, providing a more targeted and effective method for detecting credential theft.