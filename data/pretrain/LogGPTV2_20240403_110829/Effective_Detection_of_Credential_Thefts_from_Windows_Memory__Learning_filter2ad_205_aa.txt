title:Effective Detection of Credential Thefts from Windows Memory: Learning
Access Behaviours to Local Security Authority Subsystem Service
author:Patrick Ah-Fat and
Michael Huth and
Rob Mead and
Tim Burrell and
Joshua Neil
Effective Detection of Credential Thefts from Windows Memory:
Learning Access Behaviours to Local Security Authority Subsystem Service
Patrick Ah-Fat
Imperial College London
Michael Huth
Imperial College London
Rob Mead
Microsoft
Tim Burrell
Microsoft
Joshua Neil
Microsoft
Abstract
Malicious actors that have already penetrated an enterprise
network will exploit access to launch attacks within that net-
work. Credential theft is a common preparatory action for
such attacks, as it enables privilege escalation or lateral move-
ment. Elaborate techniques for extracting credentials from
Windows memory have been developed by actors with ad-
vanced capabilities. The state of the art in identifying the
use of such techniques is based on malware detection, which
can only alert on the presence of speciﬁc executable ﬁles that
are known to perform such techniques. Therefore, actors can
bypass detection of credential theft by evading the static detec-
tion of malicious code. In contrast, our work focuses directly
on the memory read access behaviour to the process that en-
forces the system security policy. We use machine learning
techniques driven by data from real enterprise networks to
classify memory read behaviours as malicious or benign. As
we show that Mimikatz is a popular tool seen across Microsoft
Defender Advanced Threat Protection (MDATP) to steal cre-
dentials, our aim is to develop a generic model that detects
the techniques it employs. Our classiﬁer is based on novel
features of memory read events and the characterisation of
three popular techniques for credential theft. We integrated
this classiﬁer in a detector that is now running in production
and is protecting customers of MDATP. Our experiments
demonstrate that this detector has excellent false negative
and false positive rates, and does alert on true positives that
previous detectors were unable to identify.
1 Introduction
The past ten years have seen a dramatic increase in the number
and sophistication of cyber-attacks. These changes have as a
consequence that the devices and networks of private citizens,
businesses, and government agencies can often no longer be
protected against all types of such threats. That malicious
actors have already inﬁltrated a network of computers and
devices is therefore nowadays a generally accepted wisdom.
This assumption gives great importance to the detection of
suspicious or malicious activity that happens within a network
perimeter, so that security measures can be taken to contain
such activities and the damage they may cause. Modern
enterprise security systems thus must ally protection with
detection in order to be able to expose intruders that have
managed to defeat protection mechanisms and, in doing so,
have already compromised the security of the network.
Our research in intrusion detection, like that of others
[2, 9, 11], therefore assumes that an attacker has already com-
promised a network through some vulnerability such as a
security-critical bug in system software. For effective intru-
sion detection we therefore need reliable tools to identify
actions within the network that very likely stem from an in-
truder who has malicious aims.
The development of such tools will beneﬁt from models of
intent for attacks. For example, if the intent of an attacker is
to steal monetary assets from a bank network, this gives us
an idea of a set and possible sequence of actions an attacker
would take in that network. Conversely, the identiﬁcation of
malicious actions that were taken can help a security monitor
with understanding dynamically the intent of an attacker.
Some of these actions are building blocks of many different
types of malicious intent. Detecting actions that are shared in
many attacks is therefore particularly valuable for identifying
that an actor who already penetrated a network is conducting
an attack from the inside; it also provides ﬂexibility in identi-
fying behaviours that are common to a variety of attacks.
In this paper, we focus on one particular such action known
as credential theft [3, 6, 14, 17–19]. It is well known that cre-
dential theft is a very common behaviour in attackers who
have compromised a machine. Indeed, credentials are sensi-
tive information that are valuable since their possession may
constitute a means of privilege escalation or lateral movement:
an attacker who has managed to steal security-relevant cre-
dentials on a machine within that network could use these
credentials, for example, to get administrator rights on a tar-
geted machine, access rights to other machines on the net-
work, and so forth. It is therefore hardly surprising that a
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    181
large variety of methods have been developed for stealing
credentials [4, 5], including phishing, keylogging, password
spraying, and wireless trafﬁc monitoring.
Our work reported in this paper investigates a speciﬁc,
elaborate technique that advanced attackers, and computer
forensic analysts, have developed in order to retrieve users’
credentials. This technique repeatedly reads from machine
memory in search of credentials [8]. Our focus will be on the
application of that technique within the Windows operating
system, although our contributions may well be transferable
to other operating systems and their security processes and
monitoring environments. We made this choice because:
• Windows is an important operating system used widely
in private, commercial, and government networks, and
• we have the ability to promote the transfer of salient
outcomes of this work into Windows products.
Given our focus on Windows and its Security Architec-
ture, we concentrate on the detection of malicious memory
accesses to a particularly sensitive process, the Local Security
Authority Subsystem Service (LSASS). This critical system
process enforces security policies on Windows machines.
LSASS is responsible for performing essential tasks related
to security such as verifying user logins, managing passwords,
and creating access tokens. As such, this process contains
a considerable amount of very sensitive data in its memory,
making LSASS a prime target on Windows to any internal
attacker that seeks to steal credentials.
For our approach, it is important to note that not only attack-
ers with malicious intent will run a process that reads from
LSASS memory. Other processes may read from LSASS
memory with perfectly good intent, and perform such reads
for the beneﬁt and health of the overall network.
In fact, many anti-virus and security software products
for Windows scan the LSASS process memory during daily
routine checks in order to detect any potentially corrupted
or infected ﬁles. Such benign reads widely occur on Win-
dows networks. Indeed, on average over all data provided by
Microsoft Defender Advanced Threat Protection (MDATP),
the LSASS memory is read 40 million times and by many
thousand different processes a day.
Our work therefore faces the problem that memory reads
to LSASS can be either malicious or benign. The aim of
this research is therefore to develop a method that can decide
whether a process that is reading from LSASS memory is
simply performing a benign action, for example within the
context of a virus scan, or whether it is actually trying to steal
sensitive information, notably credentials.
The nature of this problem suggests the use of techniques
from machine learning, those that can build models for classi-
ﬁcation. In our setting, we particularly seek models for binary
classiﬁcation that can judge whether a process that is reading
from LSASS memory is malicious or not.
We determined a speciﬁc methodology in order to solve
this classiﬁcation problem in a manner that would allow us to
deploy its solution in a Windows product. That methodology
and the contributions made in its execution are described next.
Methodology and Contributions of paper: Our adopted
methodology and contributions are as follows:
1. We use real-world data to determine novel features and
a model for a precise analysis, control, and characterisa-
tion of LSASS memory access.
2. We demonstrate that these features allow us to compute
“signatures” of processes, determined by how these pro-
cesses access LSASS memory.
3. We further show that different sessions of the same pro-
cess will tend to aggregate into a single linearly identiﬁ-
able cluster of such read behaviour.
4. We harvest malicious read accesses to LSASS memory
by collecting the reads performed by known penetration
testing tools run on MDATP customers’ machines.
5. We characterise this harvested data more precisely via
a set of linear regressions that enable us to distinguish
benign LSASS read accesses from malicious ones.
6. Based on this, we design an effective detector that is able
to identify suspicious read accesses to LSASS memory.
7. We experimentally conﬁrm that this detector has low
false positive and false negative rates. Also, our detector
highlights some interesting instances of true positives.
8. Finally, we deployed this detector in production on
MDATP, where it now actively protects customers.
These outcomes of our work also have good potential to be
integrated with online detection tools, so that the latter can
become more effective. For example, the machine-learning
models of the detector may be updated based on daily statis-
tical data collected in Windows systems and enriched with
security-relevant information from external sources such as
cyber-intelligence or cyber-threats centres. This may also
lead to the design of non-linear classiﬁers in future work.
Outline of paper: Related work is reviewed in Section 2.
We detail our methodology in Section 3. Section 4 introduces
our novel model for memory reads. Patterns in benign read
behaviour are explored in Section 5. The harvest and analysis
of malicious memory read behaviour is described in Section 6.
We build and evaluate our detector in Section 7 and highlight
interesting alerts it produces in Section 8. Section 9 studies
how our approach deals with Windows updates. Section 10
considers the resiliency of our detector against adversarial
manipulation. We suggest future work in Section 11, discuss
our work further in Section 12 and conclude in Section 13.
2 Related Work
2.1 Credential Theft by Memory Dumping
An important way for intruders to retrieve credentials is to
read from the LSASS memory. In order to do so, attackers
182    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
are required to have the debug privilege to gain access to this
protected memory location. Since we assume that the network
has been inﬁltrated by malicious actors, we will also assume
that attackers have already gained the debug privilege and are
trying to access memory maliciously.
Attackers have designed a variety of tools [12] that can read
the memory of the LSASS process on Windows machines to
extract credentials – notably, Lslsass, Windows Credential
Editor, and Mimikatz. Otherwise benign processes, e.g. proc-
dump or taskmgr, can be abused to perform living-off-the-land
attacks by dumping the whole of the LSASS process memory.
Such credential theft techniques have been used in large scale
cyber attacks, e.g. NotPetya and Olympic Destroyer [13].
As discussed in Section 3, Mimikatz [1] is a common tool
of choice for attackers that want to steal Windows credentials,
and is the most prevalent of the tools mentioned above in
MDATP machines world-wide in 7 months.
Mimikatz offers a variety of Windows system techniques
in order to extract sensitive information. These different
credential-access techniques can be chosen by passing com-
mand line arguments to the Mimikatz executable. Mimikatz
can also be launched in an interactive mode without the use of
any command line arguments, or it may be invoked remotely
via PowerShell – a Windows command-line shell designed
for system administrators.
For our work, it makes sense to study the three most popular
techniques that can steal credentials from the LSASS memory
of a targeted machine. These three techniques are:
L1 Enumerate logon passwords, with command line argu-
ment sekurlsa::logonpasswords
L2 Steal Kerberos tickets, with command line argument
sekurlsa::tickets
L3 Pass the hash, with the following command line argu-
ment sekurlsa::pth
2.2 Memory Dumping Detection
The current detection mechanisms for such credential dump-
ing activity are mainly static [15, 16]. Commonly used anti-
virus software is able to detect the presence of the executable
ﬁle mimikatz.exe and contains this threat by quarantining it.
Yara rules are used to detect a malicious software by look-
ing for characteristics or pattern in an executable ﬁle. A
speciﬁc set of Yara rules has been written by Benjamin Delpy,
the author of Mimikatz, to recognise Mimkatz executable ﬁle.
These rules are able to prevent the process Mimikatz from
running on a machine. However, these rules cannot be used to
prevent attackers from running Mimikatz through remote exe-
cution via PowerShell or through process injection. Attackers
could also bypass those basic security measures by renaming
and recompiling their own custom version of Mimikatz in
order to circumvent those detection mechanisms.
Other detection mechanisms are based on the use of so
called honey hashes that are meant to be stolen and to raise
an alert at the time they are reused [7]. However, reliance on
that mechanism could leave customers unprotected since this
would not detect whenever an attacker steals credentials and
retains them for future use in a more elaborate attack.
In contrast, the aim of our work reported in this paper is to
analyse and detect the actual behaviour that a process exhibits
when accessing LSASS memory. Our approach therefore
directly aims at detecting malicious behaviour rather than a
static proxy for a malicious actor. Our approach is therefore
also resilient to the aforementioned countermeasures that an
attacker may adopt: process injection and remote execution.
This is so since our approach classiﬁes actual behaviour of
reads, rather than detecting the presence of programs that are
known to facilitate such behaviours.
2.3 LSASS architecture
The Local Security Authority Subsystem Service (LSASS)
is a system process present on Microsoft Windows operating
systems. Its high level roles include providing services to
authenticate to the local computer and domain as well as
maintaining information on aspects of security on a machine.
LSASS stores credentials in memory on behalf of users
with an active session. These cached credentials allow users to
access other resources on a Windows domain that are secured
with the same identity, without the user having to re-enter a
password every time access is required.
These credentials can take multiple forms, including hashes
(NT and LAN Manager) and Kerberos tickets. Credentials
are cached locally inside LSASS process memory when a
user performs an authenticated action on that machine, such
as logging on using Remote Desktop, scheduling a task or
executing a process using ’RunAs’.
A handle with PROCESS_VM_READ can be opened on the
LSASS process object and leveraged to perform a cross-
process read of sensitive data. To do this the Security De-
scriptor of the LSASS process object must explicitly grant
the accessor this right. Alternatively the accessor can hold
SeDebugPrivilege; then access to all non-protected pro-
cesses is granted regardless of their Security Descriptor.
SeDebugPrivilege can be acquired by any member of
the Local Administrator group, therefore allowing any local
administrator to read the memory of the LSASS process. This
technique can be used maliciously to extract from LSASS
the cached credentials of other users on a Windows domain.
These users may hold higher levels of privilege or access to
special resources that the current local administrator does not.
Over the last several years technologies have been intro-
duced to the Windows operating system to prevent this attack
vector, such as LSASS as Protected Process Light (PPL) and
Virtualisation Based Security (VBS). These works do either
prevent access to the LSASS process from a Local Admin-
istrator or move sensitive data out of the process entirely.
However these technologies are not always enabled on a sys-
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    183
tem, as enabling them can present compatibility issues with
custom or third party software – and in the case of VBS –
can require certain hardware which is not always available.
Therefore these technologies are not enabled in all customer
environments, leaving cross-process reads of LSASS process
memory a workable technique to elevate privilege on a Win-
dows domain that can be leveraged by malicious actors. Our
approach to detection thus becomes of particular interest in
the cases where PPL and VBS cannot be enabled.
2.4 Learning Intruder Behaviours
Previous works have focused on designing detection mecha-
nisms by learning the behaviour of legitimate and malicious
agents. The work in [20] focuses on intrusion detection by
learning patterns in system call sequences. It aims at being