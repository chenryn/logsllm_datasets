Chapter 9, Code Quality.
2.9. Conclusion
In this chapter, we have gone through what you need to know to get started with Jenkins. You should
be able to set up a new build job, and setting up reporting on JUnit test results and javadocs. And you
have seen how to add a reporting plugin and keep tabs on code coverage. Well done! But there’s still a
lot more to learn about Jenkins—in the following chapters, we will be looking at how Jenkins can help
you improve your build automation process in many other areas as well.
41
Chapter 3. Installing Jenkins
3.1. Introduction
One of the first things you will probably notice about Jenkins is how easy it is to install. Indeed, in
less than five minutes, you can have a Jenkins server up and running. However, as always, in the real
world, things aren’t always that simple, and there are a few details you should take into account when
installing your Jenkins server for production use. In this chapter, we look at how to install Jenkins onto
both your local machine and onto a fully fledged build server. We will also look at how to take care
of your Jenkins installation once it’s up and running, and how to perform basic maintenance tasks such
as backups and upgrades.
3.2. Downloading and Installing Jenkins
Jenkins is easy to install, and can run just about anywhere. You can run it either as a stand-alone
application, or deployed on a conventional Java application server such as Tomcat or JBoss. This first
option makes it easy to install and try out on your local machine, and you can be up and running with
a bare-bones installation in a matter of minutes.
Since Jenkins is a Java application, you will need a recent version of Java on your machine. More
precisely, you will need at least Java 5. In fact, on your build server, you will almost certainly need the
full features of the Java Development Kit (JDK) 5.0 or better to execute your builds. If you’re not sure,
you can check the version of Java on your machine by executing the java -version command:
$ java -version
java version "1.6.0_17"
Java(TM) SE Runtime Environment (build 1.6.0_17-b04-248-10M3025)
Java HotSpot(TM) 64-Bit Server VM (build 14.3-b01-101, mixed mode)
Jenkins is distributed in the form of a bundled Java web application (a WAR file). You can download
the latest version from the Jenkins website (http://jenkins-ci.org—see Figure 3.1, “You can download
the Jenkins binaries from the Jenkins website”) or from the book website. Jenkins is a dynamic project,
and new releases come out at a regular rate.
For Windows users, there is a graphical Windows installation package for Jenkins. The installer comes
in the form of a ZIP file containing an MSI package for Jenkins, as well as a setup.exe file that
can be used to install the .NET libraries if they have not already been installed on your machine. In
most cases, all you need to do is to unzip the zip file and run the jenkins-x.x.msi file inside (see
Figure 3.2, “Jenkins setup wizard in Windows”). The MSI installer comes bundled with a bundled JRE,
so no separate Java installation is required.
Figure 3.1. You can download the Jenkins binaries from the Jenkins website
Once you have run the installer, Jenkins will automatically start on port 8080 (see Figure 3.3, “The
Jenkins start page”). The installer will have created a new Jenkins service for you, that you can start
and stop just like any other Windows service.
There are also excellent native packages for Mac OS X and most of the major Linux distributions,
including Ubuntu, RedHat (including CentOS and Fedora) and OpenSolaris. We discuss how to install
Jenkins on Ubuntu and Redhat below.
If you are not installing Jenkins using one of the native packages, you can simply download the latest
binary distribution from the Jenkins website. Once you have downloaded the latest and greatest Jenkins
release, place it in an appropriate directory on your build server. On a Windows environment, you might
put it in a directory called C:\Tools\Jenkins (it’s a good idea not to place Jenkins in a directory
containing spaces in the path, such as C:\Program Files, as this can cause problems for Jenkins in
some circumstances). On a Linux or Unix box, it might go in /usr/local/jenkins, /opt/jenkins,
or in some other directory, depending on your local conventions and on the whim of your system
administrator.
44
Figure 3.2. Jenkins setup wizard in Windows
Before we go any further, let’s just start up Jenkins and take a look. If you didn’t try this out in the
previous chapter, now is the time to get your hands dirty. Open a console in the directory containing the
jenkins.war file and run the following command:
$ java -jar jenkins.war
[Winstone 2008/07/01 20:54:53] - Beginning extraction from war file
...
INFO: Took 35 ms to load
...
[Winstone 2008/07/01 20:55:08] - HTTP Listener started: port=8080
[Winstone 2008/07/01 20:55:08] - Winstone Servlet Engine v0.9.10 running:
controlPort=disabled
[Winstone 2008/07/01 20:55:08] - AJP13 Listener started: port=8009
Jenkins should now be running on port 8080. Open your browser at http://localhost:8080 and take a
look. (see Figure 3.3, “The Jenkins start page”).
45
Figure 3.3. The Jenkins start page
3.3. Preparing a Build Server for Jenkins
Installing Jenkins on your local development machine is one thing, but installing Jenkins on a proper
build server deserves a little more forethought and planning.
Before you start your installation, the first thing you will need is a build server. To work well, Jenkins
needs both processor power and memory. Jenkins itself is a relatively modest Java web application.
However, in most configurations, at least some of the builds will be run on the principal build server.
Builds tend to be both memory and processor-intensive operations, and Jenkins can be configured to run
several builds in parallel. Depending on the number of build jobs you are managing, Jenkins will also
need memory of its own for its own internal use. The amount of memory required will depend largely
on the nature of your builds, but memory is cheap these days (at least in non-hosted environments), and
it’s best not to be stingy.
A build server also needs CPU horsepower. As a rule of thumb, you will need one processor per parallel
build, though, in practice, you can capitalize on I/O delays to do a little better than this. It is also in your
best interest to dedicate your build server as much as possible to the task of running continuous builds.
In particular, you should avoid memory or CPU-intensive applications such as test servers, heavily-used
enterprise applications, enterprise databases such as Oracle, enterprise mail servers, and so on.
One very practical option available in many organizations today is to use a virtual machine. This way,
you can choose the amount of memory and number of processors you think appropriate for your initial
installation, and easily add more memory and processors later on as required. However, if you are using a
virtual machine, make sure that it has enough memory to support the maximum number of parallel builds
you expect to be running. The memory usage of a Continuous Integration server is best described as
spiky—Jenkins will be creating additional JVMs as required for its build jobs, and these need memory.
46
Another useful approach is to set up multiple build machines. Jenkins makes it quite easy to set up
“slaves” on other machines that can be used to run additional build jobs. The slaves remain inactive until
a new build job is requested—then the main Jenkins installation dispatches the build job to the slave
and reports on the results. This is a great way to absorb sudden spikes of build activity, for example
just before a major release of your principal product. It is also a useful strategy if certain heavy-weight
builds tend to “hog” the main build server—just put them on their own dedicated build agent! We will
look at how to do this in detail later on in the book.
If you are installing Jenkins on a Linux or Unix build server, it is a good idea to create a special user
(and user group) for Jenkins. This makes it easier to monitor at a glance the system resources being
used by the Jenkins builds, and to troubleshoot problematic builds in real conditions. The native binary
installation packages discussed below do this for you. If you did not use one of these, you can create a
dedicated Jenkins user from the command line as shown here:
$ sudo groupadd build
$ sudo useradd --create-home --shell /bin/bash --groups build jenkins
The exact details may vary depending on your environment. For example, you may prefer to use a
graphical administration console instead of the command line, or, on a Debian-based Linux server (such
as Ubuntu), you might use the more user-friendly adduser and addgroup commands.
In most environments, you will need to configure Java correctly for this user. For example, you can do
this by defining the JAVA_HOME and PATH variables in the .bashrc file, as shown here:
export JAVA_HOME=/usr/local/java/jdk1.6.0
export PATH=$JAVA_HOME/bin:$PATH
You will now be able to use this user to run Jenkins in an isolated environment.
3.4. The Jenkins Home Directory
Before we install Jenkins, however, there are some things you need to know about how Jenkins stores its
data. Indeed, no matter where you store the Jenkins WAR file, Jenkins keeps all its important data in a
special separate directory called the Jenkins home directory. Here, Jenkins stores information about your
build server configuration, your build jobs, build artifacts, user accounts, and other useful information, as
well as any plugins you may have installed. The Jenkins home directory format is backward compatible
across versions, so you can freely update or reinstall your Jenkins executable without affecting your
Jenkins home directory.
Needless to say, this directory will need a lot of disk space.
By default, the Jenkins home directory will be called .jenkins, and will be placed in your home
directory. For example, if you are running a machine under Windows 7, if your username is “john”,
you would find the Jenkins home directory under C:\Users\john\.jenkins. Under Windows XP,
47
it would be C:\Documents and Settings\John\.jenkins. On a Linux machine, it would most
likely be under /home/john/.jenkins. And so on.
You can force Jenkins to use a different directory as its home directory by defining the JENKINS_HOME
environment variable. You may need to do this on a build server to conform to local directory
conventions or to make your system administrator happy. For example, if your Jenkins WAR file is
installed in /usr/local/jenkins, and the Jenkins home directory needs to be in the /data/jenkins
directory, you might write a startup script along the following lines:
export JENKINS_BASE=/usr/local/jenkins
export JENKINS_HOME=/var/jenkins-data
java -jar ${JENKINS_BASE}/jenkins.war
If you are running Jenkins in a Java EE container such as Tomcat or JBoss, you can configure the webapp
to expose its own environments variables. For example, if you are using Tomcat, you could create a file
called jenkins.xml in the $CATALINA_BASE/conf/localhost directory:
In a previous life, Jenkins was known as Hudson. Jenkins remains compatible with previous Hudson
installations, and upgrading from Hudson to Jenkins can be as simple as replacing the old hudson.war
file with jenkins.war. Jenkins will look for its home directory in the following places (by order of
precedence):
1. A JNDI environment entry called JENKINS_HOME
2. A JNDI environment entry called HUDSON_HOME
3. A system property named JENKINS_HOME
4. A system property named HUDSON_HOME
5. An environment variable named JENKINS_HOME
6. An environment variable named HUDSON_HOME
7. The .hudson directory in the user’s home directory, if it already exists
8. The .jenkins directory in the user’s home directory
3.5. Installing Jenkins on Debian or Ubuntu
If you are installing Jenkins on Debian and Ubuntu, it is convenient to install the native binary package
for these platforms. This is easy enough to do, though these binaries are not provided in the standard
48
repositories because of the high frequency of updates. First, you need to add the key to your system
as shown here:
$ wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key \
| sudo apt-key add -
$ sudo echo "deb http://pkg.jenkins-ci.org/debian binary/" > \
/etc/apt/sources.list.d/jenkins.list
Now, update the Debian package repository:
$ sudo aptitude update
Once this is done, you can install Jenkins using the aptitude tool:
$ sudo aptitude install -y jenkins
This will install Jenkins as a service, with a correctly configured startup script in /etc/init.d/
jenkins and a corresponding system user called “jenkins”. If you didn’t already have Java installed on
your server, it will also install the OpenJDK version of Java. By default, you will find the Jenkins WAR
file in the/usr/share/jenkins directory, and the Jenkins home directory in /var/lib/jenkins.
The installation process should have started Jenkins. In general, to start Jenkins, simply invoke this
script:
$ sudo /etc/init.d/jenkins start
Jenkins will now be running on the default port of 8080 (http://localhost:8080/).
You can stop Jenkins as follows:
$ sudo /etc/inid.d/jenkins stop
Jenkins will write log files to /var/log/jenkins/jenkins.log. You can also fine-tune the
configuration parameters in the /etc/default/jenkins file. This is useful if you need to modify
the Java startup arguments (JAVA_ARGS). You can also use this file to configure arguments that will
be passed to Jenkins in this file, such as the HTTP port or web application context (see Section 3.8,
“Running Jenkins as a Stand-Alone Application”).
3.6. Installing Jenkins on Redhat, Fedora, or CentOS
There are also native binary packages available for Redhat, Fedora, and CentOS. First you need to set
up the repository as follows:
$ sudo wget -O /etc/yum.repos.d/jenkins.repo \
http://jenkins-ci.org/redhat/jenkins.repo
$ sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
49
On a fresh installation, you may need to install the JDK:
$ sudo yum install java-1.6.0-openjdk
Next, you can install the package as shown here:
$ sudo yum install jenkins
This will install the latest version of Jenkins into the /usr/lib/jenkins directory. The default Jenkins
home directory will be in /var/lib/jenkins.
Now you can start Jenkins using the service command:
$ sudo service jenkins start
Jenkins will now be running on the default port of 8080 (http://localhost:8080/).
Jenkins’s configuration parameters are placed in the /etc/sysconfig/jenkins file. However at the
time of writing the configuration options are more limited than those provided by the Ubuntu package:
you can define the HTTP port using the JENKINS_PORT parameter, for example, but to specify an
application context you need to modify the startup script by hand. The principal configuration options
are listed here:
JENKINS_JAVA_CMD
The version of Java you want to use to run Jenkins
JENKINS_JAVA_OPTIONS
Command-line options to pass to Java, such as memory options
JENKINS_PORT
The port that Jenkins will to run on
3.7. Installing Jenkins on SUSE or OpenSUSE
Binary packages are also available for SUSE and OpenSUSE, so the installation process on these
platforms is straightforward. First, you need to add the Jenkins repository to the SUSE repository list:
$ sudo zypper addrepo http://pkg.jenkins-ci.org/opensuse/ jenkins
Finally, you simply install Jenkins using the zypper command:
$ sudo zypper install jenkins
As you can gather from the console output, this will install both Jenkins and the latest JDK from Sun, if
the latter is not already installed. OpenSuse installations typically have the OpenJDK version of Java,
50
but Jenkins prefers the Sun variety. When it downloads the Sun JDK, it will prompt you to validate the
Sun Java license before continuing with the installation.
This installation process will also create a jenkins user and install Jenkins as a service, so that it
will start up automatically whenever the machine boots. To start Jenkins manually, you can invoke the
jenkins startup script in the /etc/init.d directory:
$ sudo /etc/init.d/jenkins jenkins start
Jenkins will now be running on the default port of 8080 (http://localhost:8080/).
The configuration options are similar to the Redhat installation (see Section 3.6, “Installing Jenkins on
Redhat, Fedora, or CentOS”). You can define a limited number of configuration variables in the /etc/
sysconfig/jenkins file, but for any advanced configuration options, you need to modify the startup
script in /etc/init.d/jenkins.
The zypper tool also makes it easy to update your Jenkins instance:
$ sudo zypper update jenkins
This will download and install the latest version of Jenkins from the Jenkins website.
3.8. Running Jenkins as a Stand-Alone Application
You can run the Jenkins server in one of two ways: either as a stand-alone application, or deployed as a
standard web application onto a Java Servlet container or application server such as Tomcat, JBoss, or
GlassFish. Both approaches have their pros and cons, so we will look at both here.
Jenkins comes bundled as a WAR file that you can run directly using an embedded servlet container.
Jenkins uses the lightweight Winstone servlet engine to allow you to run the server out of the box,
without having to configure a web server yourself. This is probably the easiest way to get started,
allowing you to be up and running with Jenkins in a matter of minutes. It is also a very flexible option,
and provides some extra features unavailable if you deploy Jenkins to a conventional application server.
In particular, if you are running Jenkins as a stand-alone server, you will be able to install plugins and
upgrades on the fly, and restart Jenkins directly from the administration screens.
To run Jenkins using the embedded servlet container, just go to the command line and type the following:
C:\Program Files\Jenkins>
java -jar jenkins.war
[Winstone 2011/07/01 20:54:53] - Beginning extraction from war file
[Winstone 2011/07/01 20:55:07] - No webapp classes folder found - C:\Users\john\
.jenkins\war\WEB-INF\classes
jenkins home directory: C:\Users\john\.jenkins
...
INFO: Took 35 ms to load
51
...
[Winstone 2011/07/01 20:55:08] - HTTP Listener started: port=8080
[Winstone 2011/07/01 20:55:08] - Winstone Servlet Engine v0.9.10 running: