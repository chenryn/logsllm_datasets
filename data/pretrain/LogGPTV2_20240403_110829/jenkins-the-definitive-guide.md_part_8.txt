### Chapter 9: Code Quality
#### 2.9. Conclusion
In this chapter, we covered the essential aspects of getting started with Jenkins. You should now be able to set up a new build job, configure reporting for JUnit test results and Javadoc, add a reporting plugin, and monitor code coverage. Great job! However, there is still much more to learn about Jenkins. In the following chapters, we will explore how Jenkins can further enhance your build automation process in various other areas.

---

### Chapter 3: Installing Jenkins
#### 3.1. Introduction
One of the first things you will notice about Jenkins is its ease of installation. In less than five minutes, you can have a Jenkins server up and running. However, in real-world scenarios, there are additional considerations for production use. This chapter will guide you through installing Jenkins on both your local machine and a dedicated build server. We will also cover basic maintenance tasks such as backups and upgrades.

#### 3.2. Downloading and Installing Jenkins
Jenkins is straightforward to install and can run on almost any platform. You can run it as a stand-alone application or deploy it on a Java application server like Tomcat or JBoss. The stand-alone option is ideal for quick setup and testing on your local machine.

Since Jenkins is a Java application, you need a recent version of Java (at least Java 5). For build servers, the full features of the Java Development Kit (JDK) 5.0 or higher are recommended. To check your Java version, use the `java -version` command:

```bash
$ java -version
java version "1.6.0_17"
Java(TM) SE Runtime Environment (build 1.6.0_17-b04-248-10M3025)
Java HotSpot(TM) 64-Bit Server VM (build 14.3-b01-101, mixed mode)
```

Jenkins is distributed as a bundled Java web application (a WAR file). You can download the latest version from the Jenkins website (http://jenkins-ci.org) or from the book's website. Jenkins is an active project with regular releases.

For Windows users, a graphical installer is available. The installer comes as a ZIP file containing an MSI package and a `setup.exe` for .NET libraries. Unzip the file and run the `jenkins-x.x.msi` file. The installer includes a bundled JRE, so no separate Java installation is required.

**Figure 3.1.** You can download the Jenkins binaries from the Jenkins website

Once installed, Jenkins will start automatically on port 8080. The installer creates a new Jenkins service that you can manage like any other Windows service.

**Figure 3.2.** Jenkins setup wizard in Windows

Native packages are also available for Mac OS X and major Linux distributions, including Ubuntu, RedHat (including CentOS and Fedora), and OpenSolaris. We will discuss how to install Jenkins on Ubuntu and RedHat below.

If you are not using a native package, download the latest binary distribution from the Jenkins website. Place the downloaded file in an appropriate directory, such as `C:\Tools\Jenkins` on Windows or `/usr/local/jenkins` on Linux/Unix.

**Figure 3.3.** The Jenkins start page

To start Jenkins, open a console in the directory containing the `jenkins.war` file and run:

```bash
$ java -jar jenkins.war
```

Jenkins should now be running on port 8080. Open your browser at `http://localhost:8080` to access the Jenkins start page.

#### 3.3. Preparing a Build Server for Jenkins
While installing Jenkins on a local development machine is straightforward, setting it up on a dedicated build server requires more planning.

First, ensure your build server has sufficient processor power and memory. Jenkins itself is a modest Java web application, but builds can be resource-intensive. Jenkins can run multiple builds in parallel, so the amount of memory and CPU power needed depends on the number and nature of your build jobs.

A practical option is to use a virtual machine, which allows you to easily scale resources as needed. Another approach is to set up multiple build machines. Jenkins makes it easy to configure "slave" nodes to distribute build jobs, which is useful for handling spikes in build activity or for heavy-weight builds.

On a Linux or Unix build server, create a special user and group for Jenkins. This helps in monitoring and troubleshooting. Use the following commands to create a dedicated Jenkins user:

```bash
$ sudo groupadd build
$ sudo useradd --create-home --shell /bin/bash --groups build jenkins
```

Configure Java for this user by setting the `JAVA_HOME` and `PATH` variables in the `.bashrc` file:

```bash
export JAVA_HOME=/usr/local/java/jdk1.6.0
export PATH=$JAVA_HOME/bin:$PATH
```

#### 3.4. The Jenkins Home Directory
Jenkins stores all important data in a special directory called the Jenkins home directory. This directory contains configuration, build jobs, artifacts, user accounts, and plugins. The format is backward-compatible across versions, allowing you to update or reinstall Jenkins without affecting the home directory.

By default, the Jenkins home directory is named `.jenkins` and is placed in the user's home directory. For example, on Windows 7, if your username is "john," the directory would be `C:\Users\john\.jenkins`. On Linux, it would be `/home/john/.jenkins`.

You can change the home directory by defining the `JENKINS_HOME` environment variable. For example, if your Jenkins WAR file is in `/usr/local/jenkins` and the home directory needs to be in `/data/jenkins`, you can write a startup script like this:

```bash
export JENKINS_BASE=/usr/local/jenkins
export JENKINS_HOME=/var/jenkins-data
java -jar ${JENKINS_BASE}/jenkins.war
```

If you are running Jenkins in a Java EE container like Tomcat or JBoss, you can configure the webapp to expose environment variables. For example, in Tomcat, create a `jenkins.xml` file in the `$CATALINA_BASE/conf/localhost` directory.

Jenkins looks for its home directory in the following order:
1. A JNDI environment entry called `JENKINS_HOME`
2. A JNDI environment entry called `HUDSON_HOME`
3. A system property named `JENKINS_HOME`
4. A system property named `HUDSON_HOME`
5. An environment variable named `JENKINS_HOME`
6. An environment variable named `HUDSON_HOME`
7. The `.hudson` directory in the user’s home directory, if it already exists
8. The `.jenkins` directory in the user’s home directory

#### 3.5. Installing Jenkins on Debian or Ubuntu
For Debian and Ubuntu, it is convenient to use the native binary package. First, add the key and repository:

```bash
$ wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -
$ sudo echo "deb http://pkg.jenkins-ci.org/debian binary/" > /etc/apt/sources.list.d/jenkins.list
```

Update the package repository:

```bash
$ sudo aptitude update
```

Install Jenkins:

```bash
$ sudo aptitude install -y jenkins
```

This installs Jenkins as a service with a startup script in `/etc/init.d/jenkins` and a system user called "jenkins." The Jenkins WAR file is in `/usr/share/jenkins`, and the home directory is in `/var/lib/jenkins`.

Start Jenkins:

```bash
$ sudo /etc/init.d/jenkins start
```

Stop Jenkins:

```bash
$ sudo /etc/init.d/jenkins stop
```

Log files are in `/var/log/jenkins/jenkins.log`. Configuration parameters can be fine-tuned in `/etc/default/jenkins`.

#### 3.6. Installing Jenkins on Redhat, Fedora, or CentOS
Native binary packages are available for Redhat, Fedora, and CentOS. Set up the repository:

```bash
$ sudo wget -O /etc/yum.repos.d/jenkins.repo http://jenkins-ci.org/redhat/jenkins.repo
$ sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
```

Install the JDK if needed:

```bash
$ sudo yum install java-1.6.0-openjdk
```

Install Jenkins:

```bash
$ sudo yum install jenkins
```

The Jenkins home directory is in `/var/lib/jenkins`. Start Jenkins:

```bash
$ sudo service jenkins start
```

Configuration parameters are in `/etc/sysconfig/jenkins`. Key options include:
- `JENKINS_JAVA_CMD`: The Java version to use.
- `JENKINS_JAVA_OPTIONS`: Command-line options for Java.
- `JENKINS_PORT`: The port Jenkins will run on.

#### 3.7. Installing Jenkins on SUSE or OpenSUSE
Binary packages are available for SUSE and OpenSUSE. Add the Jenkins repository:

```bash
$ sudo zypper addrepo http://pkg.jenkins-ci.org/opensuse/ jenkins
```

Install Jenkins:

```bash
$ sudo zypper install jenkins
```

This will install Jenkins and the latest JDK from Sun, if not already present. The installation creates a `jenkins` user and sets up Jenkins as a service. Start Jenkins:

```bash
$ sudo /etc/init.d/jenkins start
```

Configuration options are in `/etc/sysconfig/jenkins`. Update Jenkins:

```bash
$ sudo zypper update jenkins
```

#### 3.8. Running Jenkins as a Stand-Alone Application
Jenkins can be run as a stand-alone application or deployed on a Java Servlet container like Tomcat, JBoss, or GlassFish. Both methods have their advantages.

Running Jenkins as a stand-alone application is the easiest way to get started. It uses the lightweight Winstone servlet engine and allows for on-the-fly plugin and upgrade installations, as well as direct restarts from the administration screens.

To run Jenkins as a stand-alone application, go to the command line and type:

```bash
$ java -jar jenkins.war
```

Jenkins will start on port 8080. Access it at `http://localhost:8080`.

**Figure 3.3.** The Jenkins start page

This method provides flexibility and is ideal for quick setup and testing.