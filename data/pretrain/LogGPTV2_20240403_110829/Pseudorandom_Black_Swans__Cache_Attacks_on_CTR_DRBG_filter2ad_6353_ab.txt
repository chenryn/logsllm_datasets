to t1 from random. Similarly, prediction resistance ensures that
there is some time t2 after t1 when no further outputs can be
distinguished from random. Robustness incorporates both of
these guarantees into a single property. Next, while the models
of [22, 87] include an attacker that is able to compromise the
entropy distribution used for sampling entropy to the PRG, we
consider a weaker attacker who is unable to do so. We therefore
obtain a stronger result as our weaker attacker is able break
the PRG despite her inability to corrupt the entropy source.
Instead we assume that the PRG receives entropy samples
drawn uniformly at random from the entropy space, better
matching our real-world scenario. As our attack targets the
prediction resistance guarantee of CTR_DRBG, we provide a
more formal deﬁnition for prediction resistance, from [22].
Prediction Resistance.
As mentioned above, prediction
resistance models a PRG’s ability to recover from state
compromise. We begin by modeling an adversary capable of
compromising the PRG state by allowing the adversary to
execute the following procedures on the PRG.
• get-output. Models an attacker’s ability to query the PRG
for output. Calls generate(S, nbits, addin) where S is the
current state, nbits is the number of bits to output, addin is
known to the attacker, and generate returns the output R.
• set-state. Models an attacker who compromises the state
of the PRG. Gets as input an attacker-chosen value S∗ and
sets the PRG state S ← S∗.
• get-state. Models an attacker who compromises the state
of the PRG. Returns the PRG state S.
• next-ror. Tests an attacker’s ability to distinguish output
from the PRG from uniformly random output. Sets R0 ←
generate(S, nbits, addin) with S as the PRG state, nbits the
number of bits in R0, and addin known by the attacker. It
then sets R1 to a value drawn uniformly at random from the
same domain as R0 and picks a uniform choice bit b ←$
{0, 1}. The procedure returns Rb to the adversary which
outputs a bit b(cid:2).
An adversary’s advantage, and therefore the security strength of
the PRG, is parameterized by the number of calls an adversary
makes to the above procedures along with the adversary’s
probability of guessing the correct challenge bit in the next-
ror game. We use the following security deﬁnition for a PRG:
Deﬁnition 1 (PRG with Input Security). A PRG with input
G is called a (t, qD, qR, δ)−prediction-resistant PRG if for any
adversary A running in time at most t, making at most qD
calls to update with qR calls to next-ror/get-output, and one
call to get-state, which is the last call A is allowed to make
prior to calling next-ror, it holds that
(cid:3)
(cid:2)(cid:2)(cid:2)Pr
b = b(cid:2) | b(cid:2) ← AOP
G (qD, qR)
− 1/2
(cid:4)
(cid:2)(cid:2)(cid:2) ≤ δ
where OP = {next-ror, set-state, get-state, get-output}.
B. NIST SP 800-90 and Related Standards
NIST Special Publication (SP) 800-90 is entitled “Recom-
mendation for Random Number Generation Using Determin-
istic Random Bit Generators” and is the de facto standard
for algorithms for generating random numbers. The document
was ﬁrst published in 2006 and has undergone three revisions:
“800-90 Revised”, published in 2007, “800-90 A”, published in
2012, and “800-90A Rev. 1”, published in 2015. The ﬁrst three
publications contained four pseudorandom number generator
designs, while the last publication contained only three. The
missing design was the infamous DualEC DRBG, which was
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 16:24:55 UTC from IEEE Xplore.  Restrictions apply. 
1243
removed from the publication after Shumow and Ferguson dis-
covered a design ﬂaw that enabled a backdoor [77] which was
later conﬁrmed by Snowden [67]. The three remaining designs
in NIST 800-90A Rev. 1 are HMAC_DRBG, HASH_DRBG
and CTR_DRBG, which are based on HMAC, hash, and block
cipher primitives respectively. For the remainder of this paper,
we will refer to the 2015 publication as SP 800-90A.
C. AES
AES encryptions and decryptions can be decomposed into
rounds, which use round keys derived from the secret key.
Each round, in turn, can be further decomposed into four oper-
ations: AddRoundKey, SubBytes, ShiftRows, and MixColumns.
Performance-optimized software implementations usually use
a series of lookup tables known as “T-tables” to combine the
latter three operations into a single table lookup. The state at
each round is used to index into the T-tables, and the results
are XORed with the round key to produce the state for the
next round. The ﬁnal round of AES uses a different T-table
from earlier rounds as there is no ﬁnal mixing operation in that
round. Unfortunately, by observing the memory access patterns
to these tables, an attacker can recover the cipher’s secret key
within only a few encryptions. Indeed, there is a large body
of work on attacking table-based AES implementations [28,
32, 38, 64, 78, 97]. Finally, most modern processors include
CPU instructions that execute AES operations in hardware
(e.g., AES-NI). In addition to improving performance, these
instructions do not rely on table lookups from system memory,
thereby mitigating side-channel risks.
D. Cache Attacks
Our work contributes to a long line of cache-based side-
channel attacks. These attacks have yielded varied and robust
mechanisms [21, 29, 80] for breaking cryptographic schemes
using information leakage from cache timings. Popular targets
have included digital signature schemes [4, 27] and symmetric
ciphers [64, 69, 93], despite the inclusion of countermeasures
in popular cryptographic implementation libraries [23, 79].
Recent
literature has also begun to examine side-channel
vulnerabilities in environments provided by trusted processor
enclaves, particularly Intel SGX [11, 50, 55, 82, 89, 90], which
are designed to be more secure against even local attackers
who are able to run unprivileged code.
Flush+Reload.
Flush+Reload is a side-channel attack
technique that consists of three steps. In the ﬁrst step, the
attacker ﬂushes or evicts a memory location from the cache.
The attacker then waits a while, allowing the victim to execute.
Finally, in the third step, the attacker reloads the monitored
memory location and measures the reload time. If the victim
has accessed the memory location between the ﬂush and the
reload steps, the location will be cached, and the reload will
be fast. Otherwise, the memory will not be cached and the
reload will be slow. Flush+Reload has been used to attack
symmetric [38] and public key [4, 27, 66, 68, 93] cryptography,
as well as for non-cryptographic and speculative execution
attacks [17, 28, 47, 52, 82, 83, 86, 91].
Prime+Probe. While powerful, Flush+Reload relies on the
victim and the attacker accessing the same memory location
and is thus typically applied to OS-deduplicated pages in
binaries and shared libraries. When shared memory is not
available (e.g., for SGX), we use a different cache attack
technique called Prime+Probe [64, 80].
A Prime+Probe attack consists of three steps. In the ﬁrst, the
attacker primes the monitored cache lines by making enough
memory accesses so that each way (group of cache lines
fetched together) of the targeted cache sets is occupied by
the attacker’s memory value. In the second step, the attacker
yields control to the victim process. In the ﬁnal step, the
attacker probes those same cache lines by reading from the
corresponding memory locations and measuring their access
times. If the victim accessed memory that mapped to the same
cache lines, then the attacker will measure larger latencies for
probes corresponding to those evicted cache lines.
I I I . C T R _ D R B G
CTR_DRBG is a PRG design described in NIST SP 800-
90A. It uses the encryption of an incrementing counter under
a block cipher to generate outputs. The block cipher may be
either 3DES with a 64-bit key or AES with a key of length
128, 192, or 256 bits. The design mixes in additional data
at various stages. A derivation function (commonly the same
block cipher under a different key) can optionally be used to
extract entropy from the additional data. The implementations
we examined all used a derivation function.
Private State and Length Parameters. The private state S
of the PRG is composed of the following:
• A key K ∈ {0, 1}keylen, with bit length keylen matching
that of the underlying cipher.
• A counter V ∈ {0, 1} ≤blocklen that is incremented after each
call to the block cipher, where blocklen is the output length
of the underlying block cipher.
• A reseed counter c that indicates when a reseed is required.
The PRG’s nonce space N is {0, 1}seedlen and the entropy
space is {0, 1}seedlen where seedlen = keylen + blocklen.
PRG Instantiation. CTR_DRBG’s instantiate function takes
as input an entropy sample I and an arbitrary nonce N
chosen by the implementation, of equal length. It computes
a temporary value t as the output for the derivation function
applied to I and N. It then calls a subroutine update, outlined
in Algorithm 1, with inputs K = V = 0 and t as the additional
input. The initial state S0 = (K, V, c) consists of the outputs
(K, V ) from update, and reseed counter c = 1.
State Update.
Each of CTR_DRBG’s functions call a
subroutine update, outlined in Algorithm 1, that updates the
internal state. The routine’s input is a key K, counter V, and
additional data addin. In Lines 4–6 the function increments
the counter V and appends the encryption of V under key K
to a buffer temp. This process is repeated until temp contains
seedlen bytes. The resulting buffer is then XORed with addin
(Line 7). Finally, in Lines 8–9 the function outputs the new key
K (cid:2) as the leftmost keylen bits of the buffer, and new counter
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 16:24:55 UTC from IEEE Xplore.  Restrictions apply. 
1244
Algorithm 1 Update. The update routine is called by the
other routines and passes the current state (and potentially
additional input) into the underlying block cipher. It outputs
new state S = (K, V ) composed of key K and counter V.
1: function U P D AT E(K, V, addin)
2:
3:
4:
5:
6:
7:
8:
9:
10:
temp ← null
while len(temp)  reseed_interval then
return reseed_required
if addin (cid:2) Null then
addin ← df(addin)
(K, V ) ← update(K, V, addin)
Algorithm 2 Generate. The generate function begins by
throwing an error if the reseed counter exceeds the limit, and
otherwise updates the state with the optional additional input,
produces output by encrypting V under K, then increments
V. The encryption and increment steps are repeated until the
speciﬁed length of output has been produced. The state is then
updated again, and the reseed counter is incremented.
1: function G E N E R AT E(S, nbits, addin)
2:
3:
4:
5:
6:
7:
8:
9: