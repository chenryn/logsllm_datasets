的全部内容，并在第一页加了水印。
图13-3 最初的PDF（左边）、水印PDF（中间）以及合并的PDF（右边）
13.1.7 加密PDF
PdfFileWriter对象也可以为PDF文档进行加密。在交互式环境中输入以下代码：
>>> import PyPDF2
>>> pdfFile = open('meetingminutes.pdf', 'rb')
>>> pdfReader = PyPDF2.PdfFileReader(pdfFile)
>>> pdfWriter = PyPDF2.PdfFileWriter()
第13章 处理PDF和Word文档
>>> for pageNum in range(pdfReader.numPages):
pdfWriter.addPage(pdfReader.getPage(pageNum))
 >>> pdfWriter.encrypt('swordfish')
>>> resultPdf = open('encryptedminutes.pdf', 'wb')
>>> pdfWriter.write(resultPdf)
> >> resultPdf.close()
在调用write()方法保存文件之前，调用encrypt()方法，传入口令字符串。PDF可
以有一个用户口令（允许查看这个 PDF）和一个拥有者口令（允许设置打印、注释、
提取文本和其他功能的许可）。用户口令和拥有者口令分别是encrypt()的第一个和第二
个参数。如果只传入一个字符串给encrypt()，它将作为两个口令。
在这个例子中，我们将meetingminutes.pdf的页面拷贝到PdfFileWriter对象。用口
令swordfish加密了PdfFileWriter，打开了一个名为encryptedminutes.pdf的新PDF，将
PdfFileWriter的内容写入新PDF。任何人要查看encryptedminutes.pdf，都必须输入这个
口令。在确保文件的拷贝被正确加密后，你可能会删除原来的未加密的文件。
13.2 项目：从多个 PDF 中合并选择的页面
假定你有一个很无聊的任务，需要将几十个PDF文件合并成一个PDF文件。每
一个文件都有一个封面作为第一页，但你不希望合并后的文件中重复出现这些封
面。即使有许多免费的程序可以合并PDF，很多也只是简单的将文件合并在一起。
让我们来写一个Python程序，定制需要合并到PDF中的页面。
总的来说，该程序需要完成：
 找到当前工作目录中所有PDF文件。
 按文件名排序，这样就能有序地添加这些PDF。
 除了第一页之外，将每个PDF的所有页面写入输出的文件。
从实现的角度来看，代码需要完成下列任务：
 调用os.listdir()，找到当前工作目录中的所有文件，去除掉非PDF文件。
 调用Python的sort()列表方法，对文件名按字母排序。
 为输出的PDF文件创建PdfFileWriter对象。
 循环遍历每个PDF文件，为它创建PdfFileReader对象。
 针对每个PDF文件，循环遍历每一页，第一页除外。
 将页面添加到输出的PDF。
 将输出的PDF写入一个文件，名为allminutes.pdf。
针对这个项目，打开一个新的文件编辑器窗口，将它保存为combinePdfs.py。
第 1步：找到所有PDF文件
首先，程序需要取得当前工作目录中所有带.pdf 扩展名的文件列表，并对它们
Python编程快速上手——让繁琐工作自动化
排序。让你的代码看起来像这样：
#! python3
# combinePdfs.py - Combines all the PDFs in the current working directory into
# into a single PDF.
 import PyPDF2, os
# Get all the PDF filenames.
pdfFiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf'):
 pdfFiles.append(filename)
 pdfFiles.sort(key/str.lower)
 pdfWriter = PyPDF2.PdfFileWriter()
# TODO: Loop through all the PDF files.
# TODO: Loop through all the pages (except the first) and add them.
# TODO: Save the resulting PDF to a file.
在#!行和介绍程序做什么的描述性注释之后，代码导入了os和PyPDF2模块。
os.listdir('.')调用将返回当前工作目录中所有文件的列表。代码循环遍历这个列表，
将带有.pdf 扩展名的文件添加到 pdfFiles 中。然后，列表按照字典顺序排序，调
用sort()时带有key/str.lower关键字参数。
代码创建了一个PdfFileWriter对象，保存合并后的PDF页面。最后，一些注
释语句简要描述了剩下的程序。
第 2步：打开每个PDF文件
现在，程序必须读取pdfFiles中的每个PDF文件。在程序中加入以下代码：
#! python3
# combinePdfs.py - Combines all the PDFs in the current working directory into
# a single PDF.
import PyPDF2, os
# Get all the PDF filenames.
pdfFiles = []
--snip--
# Loop through all the PDF files.
for filename in pdfFiles:
pdfFileObj = open(filename, 'rb')
pdfReader = PyPDF2.PdfFileReader(pdfFileObj)
# TODO: Loop through all the pages (except the first) and add them.
# TODO: Save the resulting PDF to a file.
针对每个PDF文件，循环内的代码调用open()，以'wb'作为第二个参数，用读二进
制的模式打开文件。open()调用返回一个 File 对象，它被传递给PyPDF2.PdfFileReader()，
创建针对那个PDF文件的PdfFileReader对象。
第13章 处理PDF和Word文档
第 3步：添加每一页
针对每个 PDF 文件，需要循环遍历每一页，第一页除外。在程序中添加以
下代码：
#! python3
# combinePdfs.py - Combines all the PDFs in the current working directory into
# a single PDF.
import PyPDF2, os
--snip--
# Loop through all the PDF files.
for filename in pdfFiles:
--snip--
# Loop through all the pages (except the first) and add them.
 for pageNum in range(1, pdfReader.numPages):
pageObj = pdfReader.getPage(pageNum)
pdfWriter.addPage(pageObj)
# TODO: Save the resulting PDF to a file.
for循环内的代码将每个Page对象拷贝到PdfFileWriter对象。要记住，你需要
跳过第一页。因为PyPDF2认为0是第一页，所以循环应该从1开始，然后向上
增长到pdfReader.numPages中的整数，但不包括它。
第 4步：保存结果
在这些嵌套的for循环完成后，pdfWriter变量将包含一个PdfFileWriter对象，
合并了所有PDF的页面。最后一步是将这些内容写入硬盘上的一个文件。在程序中
添加以下代码：
#! python3
# combinePdfs.py - Combines all the PDFs in the current working directory into
# a single PDF.
import PyPDF2, os
--snip--
# Loop through all the PDF files.
for filename in pdfFiles:
--snip--
# Loop through all the pages (except the first) and add them.
for pageNum in range(1, pdfReader.numPages):
--snip--
# Save the resulting PDF to a file.
pdfOutput = open('allminutes.pdf', 'wb')
pdfWriter.write(pdfOutput)
pdfOutput.close()
向open()传入'wb'，以写二进制的模式打开输出PDF文件allminutes.pdf。然后，将
Python编程快速上手——让繁琐工作自动化
得到的File对象传给write()方法，创建实际的PDF文件。调用close()方法，结束程序。
第 5步：类似程序的想法
能够利用其他PDF文件的页面创建PDF文件，这让你的程序能完成以下任务：
 从PDF文件中截取特定的页面。
 重新调整PDF文件中页面的次序。
 创建一个PDF文件，只包含那些具有特定文本的页面。文本由extractText()来确定。
13.3 Word 文档
利用python-docx模块，Python可以创建和修改Word文档，它带有.docx文件
扩展名。运行pip install python-docx，可以安装该模块（附录A介绍了安装第三方
模块的细节）。
注意 OSI 参考模型最初是在 1983 年由国际标准化组织出版，标准号为 ISO 7498。
在第一次用pip安装python-docx时，注意要安装python-docx，而不是docx。安装
名称docx是指另一个模块，本书没有介绍。但是，在导入python-docx模块时，需
要执行import docx，而不是import python-docx。
如果你没有Word软件，LibreOffice Writer和OpenOffice Writer都是免费的替
代软件，它们可以在 Windows、OS X 和 Linux 上打开.docx 文件。可以分别从
https://www.libreoffice.org和http://openoffice.org下载它们。python-docx的完整文档
在https://python-docx.readthedocs.org/。尽管有针对OS X平台的Word版本，但本
章将使用Windows平台的Word。
和纯文本相比，.docx文件有很多结构。这些结构在python-docx中用3种不同
的类型来表示。在最高一层，Document 对象表示整个文档。Document 对象包含
一个Paragraph对象的列表，表示文档中的段落（用户在 Word文档中输入时，如
果按下回车，新的段落就开始了）。每个 Paragraph对象都包含一个Run对象的列
表。图13-4中的单句段落有4个Run对象。
图13-4 一个Paragraph对象中识别的Run对象
Word 文档中的文本不仅仅是字符串。它包含与之相关的字体、大小、颜色和
其他样式信息。在Word中，样式是这些属性的集合。一个Run对象是相同样式文
本的延续。当文本样式发生改变时，就需要一个新的Run对象。
第13章 处理PDF和Word文档
13.3.1 读取Word 文档
让我们尝试使用 python-docx 模块。从 http://nostarch.com/automatestuff/下载
demo.docx，并将它保存在当前工作目录中。然后在交互式环境中输入以下代码：
>>> import docx
 >>> doc = docx.Document('demo.docx')
 >>> len(doc.paragraphs)
7
 >>> doc.paragraphs[0].text
'Document Title'
 >>> doc.paragraphs[1].text
'A plain paragraph with some bold and some italic'
 >>> len(doc.paragraphs[1].runs)
4
 >>> doc.paragraphs[1].runs[0].text
'A plain paragraph with some '
 >>> doc.paragraphs[1].runs[1].text
'bold'
 >>> doc.paragraphs[1].runs[2].text
' and some '
 >>> doc.paragraphs[1].runs[3].text
' italic'
在行，我们在Python中打开了一个.docx文件，调用docx.Document()，传入
文件名demo.docx。这将返回一个Document对象，它有paragraphs属性，是Paragraph
对象的列表。如果我们对 doc.paragraphs 调用 len()，将返回 7。这告诉我们，该文
档有7个Paragraph对象。每个Paragraph对象都有一个text属性，包含该段中文本
的字符串（没有样式信息）。这里，第一个text属性包含'DocumentTitle'，第二个包含
'A plain paragraph with some bold and some italic'。
每个Paragraph对象也有一个runs属性，它是Run对象的列表。Run对象也有
一个 text 属性，包含那个延续中的文本。我们看看第二个 Paragraph 对象中的 text
属性，'A plain paragraph with some bold and some italic'。对这个Paragraph对象调用len()，
结果告诉我们有4个Run对象。第一个对象包含'A plain paragraph with some '。然
后，文本变为粗体样式，所以’bold’开始了一个新的 Run 对象。在这之后，文本
又回到了非粗体的样式，这导致了第三个Run对象，' and some '。最后，第四个
对象包含'italic'，是斜体样式。
有了python-docx，Python程序就能从.docx文件中读取文本，像其他的字符串
值一样使用它。
13.3.2 从.docx文件中取得完整的文本
如果你只关心 Word 文档中的文本，不关心样式信息，就可以利用 getText()函
数。它接受一个.docx 文件名，返回其中文本的字符串。打开一个新的文件编辑器
窗口，输入以下代码，并保存为readDocx.py：
Python编程快速上手——让繁琐工作自动化
#! python3
import docx
def getText(filename):
doc = docx.Document(filename)
fullText = []
for para in doc.paragraphs:
fullText.append(para.text)
return '\n'.join(fullText)
getText()函数打开了 Word 文档，循环遍历 paragraphs 列表中的所有 Paragraph
对象，然后将它们的文本添加到fullText列表中。循环结束后，fullText中的字符串
连接在一起，中间以换行符分隔。
readDocx.py程序可以像其他模块一样导入。现在如果你只需要Word文档中的
文本，就可以输入以下代码：
>>> import readDocx
>>> print(readDocx.getText('demo.docx'))
Document Title
A plain paragraph with some bold and some italic