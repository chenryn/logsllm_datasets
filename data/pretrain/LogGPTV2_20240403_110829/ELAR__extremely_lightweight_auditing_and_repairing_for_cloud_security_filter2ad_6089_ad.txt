domly chosen in Fq for each u ∈ [1, s]. T PA sends
chall to Si.
2. Si computes a response respSi as follows. Firstly, Si
linearly combines s coded blocks being challenged us-
ing the coeﬃcients in chall:
ci =
βu · cibu ∈ Fz+m
q
Then, Si linearly combines corresponding tags:
ti =
βu · tibu ∈ Fq
s)u=1
s)u=1
Si sends its response respSi = {ci, ti} to T PA.
3. T PA veriﬁes Si by checking the following equation:
(12)
ti
βu · PRF(k2, i||bu)
?= k3 · ci +
s)u=1
If the equation holds, Si is healthy; otherwise, Si is
corrupted.
POR.Repair. When a corrupted server (Sr) is detected, the
new server (S′r) is used to replace Sr. Suppose that h healthy
servers used for repairing Sr are Si1 ,··· ,Sih (h < n. Next
section will explain how to choose h).
46
1
coded blocks are required in order to make the linear co-
eﬃcient matrix have full rank. These m coded blocks can
be collected from any h healthy servers. Since each server
stores d coded blocks. Therefore, v1,··· , vm are solvable if
h ≥ ⌈m/d⌉. In other words, F can be retrieved if in any
epoch, the number of healthy servers h ≥ ⌈m/d⌉.
5.1 Attack from T PA
Theorem 2. Given k3 in skT PA = (k2, k3), the probabil-
ity for T PA to derive k1 in skC = (k1, k2) is:
1
qz
qz+m +
Proof. Since k3 = k1 + kφ ∈ Fz+m
PrT PA[k3 ⇒ k1] =
, the probability to
ﬁnd k1 and kφ via a brute force search is 1/qz+m. Be-
sides a brute force search, T PA may search {k1, kφ} via the
OthVecGen algorithm as follows. During the check phase,
T PA can collect enough any m aggregated coded blocks
contained in the servers’ responses. T PA can solve m aug-
mented blocks w1,··· , wm. T PA then runs OthVecGen
(w1,··· , wm) to ﬁnd all basis vectors {B1,··· , Bz}, which
are orthogonal to w1,··· , wm, in order to compute kφ as:
kφ ←!z
where each ri is randomly chosen
in Fq. This means that the probability for T PA to obtain
kφ is 1/qz by searching all z values ri. Therefore, the proba-
bility for T PA to learn k1 is (1/qz+m + 1/qz). If q is chosen
large enough (i.e., 160 bits), the probability to ﬁnd k1 is
(1/2160(z+m) + 1/2160z), which is negligible.
i=1 ri · Bi ∈ Fz+m
(14)
q
q
5.2 Attacks From Servers
5.2.1 Replay Attack
Let SA denote a malicious server which performs a replay
attack.
Theorem 3. The probability for SA to successfully per-
form a replay attack without being detected is:
Pr
)
(replay
attack
SA
* true ← POR.Check(skT PA,S (chall,resp)
true ← POR.Check(skT PA,S (chall′,resp)
A
A
)
+ =
1
(qd)s
(15)
Proof. In epoch 1, T PA challenges SA by chall = {(b1,β 1),
··· , (bs,β s)} where bu is randomly chosen in [1, d] and βu
is randomly chosen in Fq for any u ∈ [1, s]. SA responds
a valid pair resp = {ci, ti}. T PA veriﬁes chall by check-
ing ti = k1ci +!s
u=1 βu · PRF(k2, i||bu). In epoch 2, T PA
challenges SA by chall′ = {(b′1,β ′1),··· , (b′s,β ′s)} where b′u is
randomly chosen in [1, d] and β′u is randomly chosen in Fq
for any u ∈ [1, s]. SA re-uses resp = {ci, ti}. T PA checks
?= k1ci +!s
u=1 β′u · PRF(k2, i||b′u). The equation holds
ti
if and only if ∀u ∈ [1, s], (β′u = βu) ∧ (b′u = bu). Since
βu,β ′u ∈ Fq and bu, b′u ∈ [1, d], the probability for SA to
pass the veriﬁcation is 1/(qd)s.
If the prime q is chosen
large enough (e.g., 160 bits), the probability is 1/(2160d)s,
which is negligible.
5.2.2 Pollution Attack
Let SA denote a malicious server which performs a pollu-
tion attack.
47
)
)
A
Pr
Theorem 4. The probability for SA to successfully per-
form a pollution attack without being detected is:
+ =
, X, index(X))
(pollution
attack
SA
* tX ← HomMac.Tag(skSA
true ← POR.Check(skS′r ,S X,tX
1
qz
(16)
Proof. During the check phase, SA passes the veriﬁca-
tion, and a corrupted Sr is detected. In the repair phase,
suppose that SA is chosen for repairing Sr. The new server
S′r challenges SA by chall = {(b1,β 1),··· , (bu,β u)} where
bu is randomly chosen in [1, d] and βu is randomly cho-
sen in Fq for any u ∈ [1, s]. SA does not provide its ag-
gregated coded block, but injects a polluted value X. Let
φr )) denote the key that SA was
skSA
given in a certain previous repair phase when SA was a new
server. Suppose the index of SA is i. SA then computes a
tag for X using skSA
4 = k1 + k(A)
= (k2, k(A)
as follows:
tX = k(A)
4 X +
βuPRF(k2, i||bu)
(17)
s)u=1
SA responds respSA
key skS′r = (k2, k4 = k1 + kφr ) as follows:
= (X, tX ) to S′r. S′r checks SA using its
tX
?= k4X +
βuPRF(k2, i||bu)
(18)
s)u=1
Since k4 = k1 +kφr = k1 +!z
k1 +!z
φr =
i Bi, the equation holds if and only if ri =
r(A)
,∀i ∈ [1, z]. Thus, the equation holds with the proba-
i
bility 1/qz. If the prime q is chosen large enough (e.g., 160
bits), the probability is 1/(2160z)s, which is negligible.
i=1 riBi and k(A)
4 = k1 +k(A)
i=1 r(A)
= (k2, k(A)
4 = k1 + k(A)
5.2.3 Tag Forgery
Let SA denote a malicious server which performs a tag
forgery. Let skSA
φr )) denote the
key that SA can obtain during a certain repair phase in a
previous epoch when SA was a new server. We now prove
that SA cannot compute a tag for a coded block of new ﬁle
blocks. Note that for a coded block of the current ﬁle blocks,
SA does not have any purpose to compute the tag because
the tag already exist (computed by C in the encode phase).
Theorem 5. Given a new ﬁle block vπ where vπ ̸= v1,··· , vm,
the probability for SA to forge a tag of a coded block cij,
which is encoded from {vπ, v1,··· , vm}, using its key skSA
=
(k2, k(A)
4 = k1 + k(A)
φr ) is:
LinearlyCombine←
Pr
( Tag
forgery)
SA
* cij
(v1,··· , vm, vπ)
tij ← HomMac(skSA
, cij, i||j)
true ← POR.Check(skT PA,S tij
A ) + =
1
qz
(19)
Proof. Given a set of m corresponding augmented blocks
(wπ, w1,··· , wm) ofm ﬁle blocks (vπ, v1,··· , vm), a new
coded block is computed as:
cij =
αijkwk + απwπ ∈ Fz+m
q
(20)
m)k=1
where απ is randomly chosen in Fq. SA forges a tag for cij
using skSA
tij = k(A)
= (k2, k(A)
4 = k1 + k(A)
· cij + PRF(k2, i||j) ∈ Fq
φr ) as:
4
Table 3: Comparison between ELAR and Previous Network-coding-based POR Schemes
[24]
[25]
[26]
ELAR
O(mnd(z + m)ξ)
O(mnd(z + m)ξ)
O(mnd(z + m)ξ) O(mnd(z + m)ξ)
O(nd(z + m)ξ)
O(nd(z + m)ξ))
O(nd(z + m)ξ)
O(1)
O(1)
Computation (Client)
Encode Computation (Server)
Communication
Computation (Client)
Computation (T PA)
Computation (Server)
Communication
Computation (Client)
Computation (New server)
Computation (Healthy-server)
Communication
Check
Repair
O(1)
O(nd(z + m)ξ)
O(n(z + m)ξ)
N/A
O(s(z + m)ξ)
O(n(z + m)ξ)
O(hd(z + m)ξ)
O(1)
O(s(z + m)ξ)
O(1)
O(1)
O(n(z + m)ξ)
O(s(z + m)ξ)
O(n(z + m)ξ)
GenCoef(2hdξ)
O(hd(z + m)ξ
O(d(z + m)ξ
O((h + d)(z + m)ξ) O(hdξ + h(z + m)ξ)
O(1)
O(n(z + m)ξ)
O(d(z + m)ξ)
O(n(z + m)ξ)
O(1)
O(hd(z + m)ξ)
O(d(z + m)ξ)
O(h(z + m)ξ)
O(1)
O(n(z + m)ξ)
O(s(z + m)ξ)
O(n(z + m)ξ)
O(1)
O(hd(z + m)ξ)
O(s(z + m)ξ)
O(h(z + m)ξ)
m: number of ﬁle blocks. n: number of servers. d: number of coded blocks per server. h: number of healthy servers.
s: number of spot-checks per server (s < d). ξ: element size in Fq (in term of bits, ξ = log2 q). z: number of Fq elements in a
ﬁle block. GenCoef(2hdξ): computation cost to generate 2hdξ bits of coeﬃcients in Le et al.
N/A means not applicable due to the lack of support.
= (k1 + k(A)
= (k1 + k(A)
φr ) · cij + PRF(k2, i||j)
φr )(
m!k=1
αijkwk + απwπ) +PRF(k 2, i||j)
φr )απwπ + PRF(k2, i||j)
= k1
αijkwk + (k1 + k(A)
m!k=1
φr wk = 0 but k(A)
Note that k(A)
φr wπ ̸= 0. This is be-
cause SA does not know k(A)
φr ; therefore, SA cannot
generate vπ by itself such that kφwπ = 0. In the check
phase, T PA challenges SA by chall = {(b1,β 1),··· , (bs,β s)}
where bu ∈ [1, d] and βu ∈ Fq for any u ∈ [1, s]. SA responds
respSA
= (cSA
) where:
, tSA
cSA
=
s)u=1
βucibu =
s)u=1
βu(
αibukwk + απwπ)