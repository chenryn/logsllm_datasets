by ﬁnite groups G1, . . . ,Gn, consists of two routines:
• Gen(α, β1, . . . , βn) → (k0, k1). Given a string α ∈ {0, 1}n
and values β1 ∈ G1, . . . , βn ∈ Gn, output two keys.
We can think of the incremental DPF keys as representing
secret shares of the values on the nodes of a tree with
2n leaves and a single non-zero path. Using this view,
α ∈ {0, 1}n is the index of the leaf at the end of the non-zero
path. The values β1, . . . , βn specify the values that the nodes
along the non-zero path take. (For simplicity, we do not
assign a value to the root node of the tree. This is without
loss of generality.)
• Eval(k, x) → ∪n
G(cid:96). Given an incremental DPF key k
(cid:96)=1{0, 1}(cid:96), output a secret-shared value.
If we take the view of incremental DPF keys as shares of
the values of the nodes on a binary tree, Eval(k, x) outputs
a secret sharing of the value on the xth node of the tree,
where we associate each node in the tree with a bitstring in
(cid:96)=1{0, 1}(cid:96) in the natural way.
and string x ∈n
n
(k0, k1) ← Gen(α, β), and values x ∈n
 β(cid:96)
The incremental DPF correctness property states that, for all
strings α ∈ {0, 1}n, output values β1 ∈ G1, . . . , βn ∈ Gn, keys
(cid:96)=1{0, 1}(cid:96), it holds that
if |x| = (cid:96) and
x is a preﬁx of α
otherwise
Eval(k0, x) + Eval(k1, x) =
where |x| = (cid:96) and the addition is computed in the ﬁnite group G(cid:96).
Informally, the DPF security property states that an adversary
that learns either k0 or k1 (but not both) learns no information
about the special point α or the values β1, . . . , βn.
(cid:96)=1
0
,
incremental DPF key has bitlength O(λ · n) +n
We can use standard DPFs in a black-box way to build incre-
mental DPFs: we secret share the values at each of the n levels
of the tree using a single pair of DPF keys. With state-of-the-art
DPFs, the resulting construction has key size and evaluation time
proportional to n2, if α ∈ {0, 1}n.
In contrast, we give a direct construction of incremental
DPFs from pseudorandom generators (PRGs) that has essentially
optimal key size and evaluation time. More speciﬁcally, each
(cid:96)=1 log2 |G(cid:96)|,
when instantiated with a length-doubling PRG that uses λ-bit keys
and achieves Ω(λ)-bit security. We describe our construction in
Section 6.
Using incremental DPFs to implement heavy hitters. We now
explain how to build a system for computing t-private heavy
hitters using incremental DPFs (Protocol 5).
At a high level, each client i produces a pair of incremental
DPF keys that represent the secret sharing of a preﬁx tree that
is zero everywhere, but whose nodes have value 1 on the path
down to client i’s input string αi.
Given incremental DPF keys from all C clients, the two servers
can compute the answers to preﬁx-count queries by publishing a
single message each. To compute the number of client strings
that start with a preﬁx p ∈ {0, 1}∗, each server evaluates all of
the clients’ incremental DPF keys on the preﬁx p and outputs the
sum of these evaluations.
Using this technique, the servers can run the protocol of
Algorithm 3 to ﬁnd all of the t-heavy hitters.
Eﬃciency. The client-to-server communication consists of a
single incremental DPF key. The server-to-server communication
requires a number of ﬁeld elements proportional to the number of
preﬁx-count oracle queries that the servers make. As we argued
in Section 5.1, this is at most n · C/t.
Semi-honest security. If all parties (clients and servers) follow
the protocol, then a semi-honest adversary controlling one of the
two servers learns no more about the client strings (α1, . . . , αC)
that what the servers learn from the heavy-hitters algorithm
of Algorithm 3. Section 7 discusses how to use ideas from
diﬀerential privacy to ameliorate the eﬀects of this leakage. In
principle, it also would be possible for the servers to use a
constant-sized secure two-party computation [47] to reduce the
leakage to a single bit per preﬁx-count oracle query. Since this
approach is substantially more complicated to implement, and
since our protocol’s leakage is already quite modest, we do not
discuss this direction further.
In practice, clients and servers may deviate from the protocol,
which we discuss here:
Protection against malicious clients. As in Section 4, malicious
clients can submit malformed incremental DPF keys with the
goal of corrupting or over-inﬂuencing the output of the protocol.
We can protect against malicious clients here using our tools
from Section 4.
In particular, the servers will run the protocol of Protocol 5,
instantiated with the t-heavy-hitters algorithm of Algorithm 3.
In this protocol, for each preﬁx length (cid:96) = 1, . . . , n, the servers
assemble a set—call it S(cid:96)—of candidate heavy preﬁxes of length
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:14 UTC from IEEE Xplore.  Restrictions apply. 
771
Protocol 5: Private t-heavy hitters (semi-honest secure ver-
sion). Our full protocol uses sketching to achieve security against
malicious clients (Section 4). We elide the sketching step here
for clarity. There are two servers and C clients. Each client i, for
i ∈ [C], holds a string αi ∈ {0, 1}n. The servers want to learn the
set of all t-heavy hitters in (α1, . . . , αC). The incremental DPF
works over the additive group of a ﬁnite ﬁeld F where |F| > C.
The protocol is as follows:
1. Each client i ∈ {1, . . . ,C}, on input string αi ∈ {0, 1}n, sets
β1 = · · · = βn = 1 ∈ F and prepares a pair of incremental
DPF keys as
(k(i)
0 , k(i)
The client sends key k(i)
to Server 1.
After sending this single message to the servers, Client i can
go oﬄine.
1 ) ← Gen(αi, β1, . . . , βn).
to Server 0 and key k(i)
0
1
2. The servers jointly run Algorithm 3. Whenever that algorithm
makes a preﬁx-count oracle query on a preﬁx string p ∈
{0, 1}∗, each server b ∈ {0, 1} computes and publishes the
value
valp,b ← C
i=1
Eval(k(i)
b , p)
∈ F.
Both servers recover the answer to the preﬁx-count oracle
query as
valp ← valp,0 + valp,1
∈ F.
3. The servers output whatever the algorithm of Algorithm 3
outputs.
(cid:96). The servers will then evaluate all of the clients’ incremental
DPF keys at these points.
If the client is honest, the incremental DPF keys evaluated at
the points in S(cid:96) will be shares of a vector that is zero everywhere
with a one at at most a single position. Speciﬁcally, for preﬁx
length (cid:96), client i’s incremental DPF keys should evaluate to
shares of the value “1” on the (cid:96)-bit preﬁx of client i’s string αi.
The keys should evaluate to zero everywhere else.
So now the servers have the same task as in Section 4: the
servers hold secret shares of a client-provided vector and the
servers want to check that this vector is zero everywhere except
that it is “1” at at most a single coordinate. Thus, to prevent
misbehavior my malicious clients, at each level (cid:96) ∈ [n] of the
tree, the servers can use our malicious-secure sketching schemes
from Section 4 to check that this property holds. At each level
of the tree, for each client, the servers perform one round of
malicious-secure sketching.
We use the malicious-secure sketching approach of Section 4.2,
which requires the client to encode its data using a redundant
randomized encoding.
Full security: Protection against malicious servers. Our ﬁnal
task is to analyze the security of the protocol of Protocol 5 against
actively malicious behavior by one the two participating servers.
A malicious server’s only strategy to learn extra information
in Protocol 5 is to manipulate answers to the preﬁx-count oracle
i=1 Eval(k(i)
Server 0 is supposed to publish valp,0 =C
queries using an “additive attack.” For example, in Step 2 of
the protocol, in processing the answer to a preﬁx-oracle query p,
0 , p). If the
server is malicious, it could instead publish the value valp,0 + ∆,
for some non-zero shift ∆ ∈ F.
We capture the power of this attack in our formal security
deﬁnitions (the full version of this work [8]), which quantify
the information that the adversary can learn from such additive
attacks. Intuitively: the adversary can essentially control which
strings are heavy hitters (and can thus learn how many honest
clients hold strings in a small set), but the adversary can do not
much worse than this. As we discuss in Section 7, it is possible to
further limit the power of this leakage using diﬀerential privacy.
Extension: Longer strings. The techniques outlined so far
allow for the private computation of t-heavy hitters over n-bit
strings in which each client sends each server an all-preﬁx DPF
key with domain size n. Each key is roughly λn log2 C bits
in length, where C is the number of participating clients and
λ ≈ 128 is the size of a PRG seed.
In some applications, the servers might want to compute the
most popular values over relatively long strings. For example, an
operating-system vendor might want to learn the set of popular
software binaries running on clients’ machines that touch certain
sensitive system ﬁles. In this application, client i’s string αi ∈
{0, 1}n is an x86 program, which could be megabytes long. So
for this application, n ≈ 220.
When n is much bigger than λ, we can use hashing to reduce
the client-to-server communication from ≈ λn log2 C bits down
to ≈ λ2 log2 C + n bits and the round complexity from ≈ n to ≈ λ.
We describe this extension in the full version of this work [8].
6 Constructing Incremental DPFs
A straightforward way to construct an incremental DPF would
be to generate n independent distributed point function (DPF)
keys, one for each preﬁx length, and to evaluate x ∈ {0, 1}(cid:96)
using the (cid:96)-th key. Given the most eﬃcient DPF solution [11],
this would yield overall key size and computation for all-preﬁx
evaluation (in units of PRG invocations) both quadratic in the
input bit length n. In contrast, our goal is to construct a more
eﬃcient scheme for all-preﬁx DPF in which all these measures
are linear in n. We achieve precisely this goal, leveraging the
speciﬁc structure of the DPF construction of [11].
We give the formal syntax and deﬁnitions in the full version
of this work [8]. (See Section 5.2 for informal deﬁnitions.) In
the remainder of this section, we sketch our construction of
incremental DPF.
Construction. We construct an eﬃcient incremental DPF
scheme, whose key size and generation/evaluation computation
costs in particular grow linearly with the input bit length n.
In the (standard) DPF construction of [11], the evaluation
of a shared point function fα,β(x) : {0, 1}n → Gn traverses a
path deﬁned by the binary representation of x. The procedure
generates a pseudo-random value for each node of the path and
an element of the output group Gn at the termination of the path.
The two matching DPF keys are set up so that the pseudo-random
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:14 UTC from IEEE Xplore.  Restrictions apply. 
772
Key size
Any n
≈ n2λ
DPF [11]
This work ≈ n(λ + m)
2
n = 256 Any n
≈ n2
543 KB
≈ 2n
6.2 KB
2
AES operations
n = 256
32,640 ops.
513 ops.
Table 6: A comparison of the key size and evaluation time of two
alternatives for constructing incremental DPF: using state-of-the-art
DPF as a black box and the incremental DPF construction in this paper.
In all entries of the table the input length is n, the PRG seed length is
λ = 127, the group size in intermediate levels of the tree is 2m, m = 62,
and the group size in the leaves is 22λ, which suﬃces for the extractable
DPF feature. For asymptotic expressions we assume m ≤ λ. The exact
key size in the DPF-based construction is n(n+1)(λ+2)
+ n(λ + m) + 2λ
and in the direct incremental DPF construction the key size is n(λ + m +
2) + 4λ − m.
2
value generated by the ﬁrst key is sampled independently of the
value generated by the other key, for every preﬁx of x which is
also a preﬁx of α. However, when the paths to x and α diverge, the
evaluation procedure programs the two pseudo-random values to
be equal, by using extra information encoded in the keys, which
we refer to as Correction Words (CW). The evaluation procedure
on two identical pseudo-random values generates identical values
along the path to x, and the same group value for the output,
ensuring that the output is 0 if x (cid:44) α. However, if x = α then the
two independent pseudo-random values, which are known at key
generation time, can be corrected to share the desired output β.
We extend the DPF construction of Boyle et al. [11] to further
support preﬁx outputs with small overhead. The main observation
is that the intermediate pseudo-random values generated at
each level of DPF evaluation satisfy the same above-described
property necessary for the ﬁnal output level: namely, also for
a preﬁx (x1, . . . , x(cid:96)) (cid:44) (α1, . . . , α(cid:96)) the intermediate evaluation
generates identical pseudo-random values and for (x1, . . . , x(cid:96)) =
(α1, . . . , α(cid:96)) it generates independent pseudo-random values.
These pseudo-random values cannot be used directly to share
desired intermediate outputs, as this would compromise their
pseudo-randomness required for security of the remaining DPF
scheme (roughly, using them twice as a one-time pad). Instead,
we introduce an extra intermediate step at each level (cid:96), which
ﬁrst expands the intermediate pseudo-random value ˜s((cid:96)) to two
pseudo-random values: a new seed s((cid:96)) which will take the place
of ˜s((cid:96)) in the next steps of the DPF construction, and an element
of the (cid:96)th level output group G(cid:96) which will be used to generate
shares of the desired (cid:96)th output β(cid:96) ∈ G(cid:96).
Ultimately, the new procedure introduces an extra PRG eval-
uation and group operation per level (cid:96), as well as an additional
element W((cid:96))
of the (cid:96)th level group Gi within the key, to provide
the desired pseudo-random to target output correction.
CW
The full pseudocode of our incremental DPF construction
appears in the full version of this work [8]. It yields the following
result:
Proposition 1 (Incremental DPF). The incremental DPF
scheme described in the full version of this work [8] is a
secure Incremental DPF with the following complexities for
Figure 7: Client-side costs in time (left) and communication (right) of
our private heavy-hitters scheme based on our new incremental DPFs,
on standard DPFs, and on linear sketching techniques [40]. Costs for
our scheme are relatively small and grow linearly in the length n of each
client’s string.
(α,(G1, β1), . . . ,(Gn, βn)):
• Key size: λ + (λ + 2)n +
– Gen: 2
– Eval(x):
(cid:96)∈[n] cost((cid:96))
(cid:96)∈[|x|] cost((cid:96))
• Computation: Let cost((cid:96)) := 1+(cid:100)log(|G(cid:96)|)/λ(cid:101). Units given
in evaluation of a PRG G : {0, 1}λ → {0, 1}2λ+2:
j∈[n](cid:100)log |Gj|(cid:101) bits.
We prove Proposition 1 in the full version of this work [8].
In the full version of this work [8], we describe a number of
low-level optimizations that we have implemented to make our