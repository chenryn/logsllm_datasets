ability to drop all packet in messages from the target to the controller. This
prevents the target server from ever re-asserting its old location and causes the
attack to last indeﬁnitely.
Break Network Quarantine. This scenario considers an attacker who has
found useful information (e.g., PII, credit card data, intellectual property, etc.)
but induced a network quarantine in the process, and must transfer that data
to an external server despite the imposed isolation.
In our demonstration of this attack, the Ryu controller is implementing a
ﬁrewall and attempting to quarantine a target host from the rest of the network
by dropping all packets from its port. The attacker is assumed to control an
arbitrary switch in the network and is trying to send traﬃc from the target host
to elsewhere in the network to exﬁltrate discovered data. We use the CD2 bug
for this attack, which causes the controller to enter an inﬁnite loop and become
unresponsive. Eventually, the switches in the network detect the failed connec-
tion and enter standalone mode, at which point they fall back to conventional
Layer-2 Ethernet learning switches. This purges the ﬂow table and enables all-
to-all connectivity, allowing the attacker to exﬁltrate the data. We were able to
successfully demonstrate this attack against Ryu.
Deniable Denial of Service. In this scenario an adversary wishes to degrade
network performance while remaining undetected for as long as possible. Whole-
network eﬀects such as controller crashes are thus undesirable, as are any actions
that are easily traceable to attacker-controlled entities.
We implemented this attack scenario using ONOS. To stealthily disrupt net-
work service, we use an inﬁnite sequence of SD9 bugs. This bug uses a malformed
features reply message to cause disconnection of the malicious switch on the
next ARP ﬂood, which may be a long time after the message was sent. Blame
for the disconnection will be placed on the controller because of the invalid
packet out message that triggers the disconnection, thereby directing suspi-
cion away from the malicious switch. Using this attack, each ARP ﬂood caused
the malicious switch to disconnect from the controller, resulting in about 3 s of
impaired service. ARP ﬂoods occurred 4 times in our tests, but an attacker could
use normal ARP requests for non-existent hosts to increase that by a factor of
10. We successfully tested this attack against ONOS.
5 Discussion and Limitations
BEADS does not ﬁnd fully weaponized attacks ready to launch against a tar-
get. Instead, it identiﬁes strategies that cause signiﬁcant impact on the network
BEADS: Automated Attack Discovery in OpenFlow-Based SDN Systems
329
stemming from one or more bugs much like stack-overﬂow vulnerabilities, there
is still manual eﬀort needed to write an exploit that uses the bug in a targeted
way. This includes ﬁxing the malicious host or switch locations, as the bugs
themselves exist irrespective of network location.
Many of the bugs found by BEADS allow a malicious switch to impact other
switches or hosts indirectly. While a malicious switch always has the ability to
impact such devices directly, there are two reasons it might want to use indirect
methods instead. First, it makes it diﬃcult to identify the malicious party by
making the controller appear responsible for the undesirable behavior. Second,
if a switch does not protect its connection with the controller using TLS, these
bugs allow a Man-In-The-Middle attacker to maliciously control the switch using
OpenFlow alone. Prior work has established that a signiﬁcant number of SDN
switches are not using TLS to protect their communication with the controller,
making this a promising attack avenue [35,36].
Because BEADS is designed to detect bugs in the SDN control plane, we do
not include metrics like latency, throughput, and packet drop rate in our detec-
tion. These are important data plane metrics, but provide little to no information
about the control plane, and thus for our testing.
Our malicious proxy is stateless, and thus cannot coordinate modiﬁcations
of particular requests or responses. Instead, it applies actions based on the type
of each message. This maps well to OpenFlow’s use of separate types for most
requests, responses, and commands and reduces the attack generation search
space. Adding additional state to this proxy could enable the discovery of more
complex attacks, but at the cost of an exponential increase in the search space.
6 Related Work
Network testing and debugging. The work that is closest to ours is
DELTA [24]. DELTA also evaluates the whole SDN system, including both con-
troller and switches. However, it focuses on the SDN controller’s northbound
interface and uses only blind fuzzing without regard for message structure or
probable vulnerabilities on the OpenFlow southbound interface. BEADS focuses
on the southbound interface and uses message format and semantic information
to provide much better test coverage, especially against controller algorithms
like routing and topology detection. As a result, BEADS ﬁnds all the malicious
switch attacks that DELTA ﬁnds and several that DELTA does not.
Other closely related eﬀorts are OFTest [8] and FLORENCE [29]. Both of
these tools test OpenFlow switches using manually written tests focusing on
conformance to the OpenFlow speciﬁcation. Since these tools do not consider
the controller, they are unable to ﬁnd bugs and attacks in the controller software
based on incorrect assumptions about the switches.
Another work related to ours is NICE [6], which uses model checking and
symbolic execution to test SDN controller applications using network invari-
ants. NICE diﬀers from our work in that it focuses on non-malicious SDN test-
ing, while we focus on malicious attacks. NICE was only shown to scale to
330
S. Jero et al.
simple ﬁrst-generation SDN controllers (e.g., NOX). The second generation of
SDN controllers we test, like ONOS and Ryu, include orders of magnitude more
code, which would substantially complicate the symbolic execution. In particu-
lar, topology generation requires the controller to send messages to the switches
on a timer which is not supported in NICE. BEADS successfully tests ONOS
and other large, second-generation SDN controllers. Finally, while NICE models
switches and hosts, our approach uses real (software) switches and real applica-
tions. OFTEN [20] (an extension of NICE) adds real switches, but it cannot test
for performance attacks. Further, neither NICE nor OFTEN consider sending
the switches malformed messages and both are dependent on diﬃcult-to-design
network state invariants for bug detection.
STS [41] is another work looking at network debugging. This work develops
a method to minimize network execution traces containing bugs for OpenFlow
networks. To test their trace minimizing technique, they develop a network event
fuzzer that randomly injects events like link failures or packets into a network and
use it to ﬁnd seven new bugs in ﬁve SDN controllers. Unlike the STS fuzzer, our
work focuses on manipulating the OpenFlow messages themselves and identiﬁes
which of these messages are likely to lead to attacks.
Attacks and defenses in SDN. Work that studies SDN attacks includes explo-
ration of protocol attacks [10], saturation attacks [42,44], and controller-switch
communication attacks [4]. Several defense and veriﬁcation techniques have been
proposed to ensure that ﬂow rules do not violate invariants [1,2,16–18]. These
veriﬁcation approaches focus on logic errors in rules, as opposed to malicious
manipulation of the SDN. The work by Mekky et al. [28] allows eﬃcient inspec-
tion and ﬁltering of higher network layers in SDNs. Kotani and Okabe [19] ﬁl-
ter packet in messages according to predeﬁned rules to protect the controller.
LineSwitch [3] mitigates control plane saturation DoS attacks by applying prob-
abilistic black-listing. Recently, Spiﬀy [14] was proposed to detect link-ﬂooding
DDoS attacks in SDNs by applying rate changes to saturated links. None of
these approaches considers the problem of automatic attack identiﬁcation.
7 Conclusion
We have developed a framework, BEADS, to automatically ﬁnd attacks in SDN
systems. BEADS considers attacks caused by malicious hosts or switches by
using semantically-aware test case generation and considering the whole SDN
system (switches, controllers, and hosts). We used BEADS to automatically
test almost 19,000 scenarios on four controllers and found 831 unique bugs. We
classiﬁed these into 28 categories based on their impact; 10 of which are new. We
demonstrated through 4 attacks how an attacker can use these bugs to impact
high-level network goals such as availability, network topology, and reachability.
Acknowledgements. We thank William Streilein and James Landry for their sup-
port of this work as well as our shepherd, Guofei Gu, and anonymous reviewers for
BEADS: Automated Attack Discovery in OpenFlow-Based SDN Systems
331
their helpful comments on this paper. This material is based in part upon work sup-
ported by the National Science Foundation under Grant Numbers CNS-1654137 and
CNS-1319924. This work is sponsored by the Department of Defense under Air Force
Contract #FA8721-05-C-0002. Opinions, interpretations, conclusions and recommen-
dations are those of the author and are not necessarily endorsed by the United States
Government.
References
1. Al-Shaer, E., Al-Haj, S.: FlowChecker: Conﬁguration analysis and veriﬁcation of
federated OpenFlow infrastructures. In: Proceedings of ACM SafeConﬁg, pp. 37–44
(2010)
2. Al-Shaer, E., Marrero, W., El-Atawy, A., Elbadawi, K.: Network conﬁguration in
a box: towards end-to-end veriﬁcation of network reachability and security. In:
Proceedings of ICNP, pp. 123–132 (2009)
3. Ambrosin, M., Conti, M., De Gaspari, F., Poovendran, R.: LineSwitch: eﬃciently
managing switch ﬂow in software-deﬁned networking while eﬀectively tackling DoS
attacks. In: Proceedings of ASIA CCS, pp. 639–644 (2015)
4. Benton, K., Camp, L.J., Small, C.: OpenFlow vulnerability assessment. In: Pro-
ceedings of HotSDN, pp. 151–152 (2013)
5. Berde, P., Gerola, M., Hart, J., Higuchi, Y., Kobayashi, M., Koide, T., Lantz,
B., O’Connor, B., Radoslavov, P., Snow, W., et al.: ONOS: towards an open,
distributed SDN OS. In: Proceedings of HotSDN, pp. 1–6 (2014)
6. Canini, M., Venzano, D., Peresini, P., Kostic, D., Rexford, J.: A NICE way to test
OpenFlow applications. In: Proceedings of NSDI (2012)
7. Dhawan, M., Poddar, R., Mahajan, K., Mann, V.: SPHINX: detecting security
attacks in software-deﬁned networks. In: Proceedings of NDSS (2015)
8. Floodlight Project: Github - ﬂoodlight/oftest: Openﬂow switch test framework
(2016). https://github.com/ﬂoodlight/oftest
9. Foster, N., Harrison, R., Freedman, M.J., Monsanto, C., Rexford, J., Story, A.,
Walker, D.: Frenetic: a network programming language. ACM SIGPLAN Not. 46,
279–291 (2011)
10. Hong, S., Xu, L., Wang, H., Gu, G.: Poisoning network visibility in software-deﬁned
networks: new attacks and countermeasures. In: Proceedings of NDSS, pp. 8–11
(2015)
11. Jafarian, J.H., Al-Shaer, E., Duan, Q.: OpenFlow random host mutation: trans-
parent moving target defense using software deﬁned networking. In: Proceedings
of HotSDN, pp. 127–132 (2012)
12. Jero, S., Lee, H., Nita-Rotaru, C.: Leveraging state information for automated
attack discovery in transport protocol implementations. In: 45th IEEE/IFIPDSN,
pp. 1–12. IEEE Computer Society (2015)
13. Kampanakis, P., Perros, H., Beyene, T.: SDN-based solutions for moving target
defense network protection. In: Proceedings of WoWMoM (2014)
14. Kang, M.S., Gligor, V.D., Sekar, V.: SPIFFY: inducing cost-detectability tradeoﬀs
for persistent link-ﬂooding attacks. In: Proceedings of NDSS (2016)
15. Katta, N.P., Rexford, J., Walker, D.: Logic programming for software-deﬁned net-
works. In: Workshop on Cross-Model Design and Validation (XLDI), vol. 412
(2012)
332
S. Jero et al.
16. Kazemian, P., Chang, M., Zeng, H., Varghese, G., McKeown, N., Whyte, S.: Real
time network policy checking using header space analysis. In: Proceedings of NSDI,
pp. 99–111 (2013)
17. Kazemian, P., Varghese, G., McKeown, N.: Header space analysis: static checking
for networks. In: Proceedings of NSDI, pp. 113–126 (2012)
18. Khurshid, A., Zhou, W., Caesar, M., Godfrey, P.B.: Veriﬂow: verifying network-
wide invariants in real time. In: Proceedings of NSDI (2013)
19. Kotani, D., Okabe, Y.: A packet-in message ﬁltering mechanism for protection of
control plane in OpenFlow networks. In: Proceedings of ANCS, pp. 29–40 (2014)
20. Kuzniar, M., Canini, M., Kostic, D.: OFTEN testing OpenFlow networks. In: Euro-
pean Workshop on Software Deﬁned Networking (EWSDN), pp. 54–60 (2012)
21. Lantz, B., Heller, B., McKeown, N.: A network in a laptop: rapid prototyping for
software-deﬁned networks. In: Proceedings of HotNets (2010)
22. Leavitt, N.: Internet security under attack: the undermining of digital certiﬁcates.
Computer 44(12), 17–20 (2011)
23. Lee, H., Seibert, J., Hoque, E., Killian, C., Nita-Rotaru, C.: Turret: a platform for
ﬁnding attacks in unmodiﬁed implementations of intrusion tolerant systems. In:
IEEE ICDCS (2014)
24. Lee, S., Yoon, C., Lee, C., Shin, S., Yegneswaran, V., Porras, P.: DELTA: a security
assessment framework for software-deﬁned networks. In: Network and Distributed
System Security Symposium. Internet Society (2017)
25. Lim, S., Ha, J.I., Kim, H., Kim, Y., Yang, S.: A SDN-oriented DDoS blocking
scheme for botnet-based attacks. In: Proceedings of ICUFN, pp. 63–68 (2014)
26. Marlinspike, M.: New tricks for defeating SSL in practice. BlackHat DC, February
2009
27. McCauley, M.: About POX (2013). http://www.noxrepo.org/pox/about-pox/
28. Mekky, H., Hao, F., Mukherjee, S., Zhang, Z.L., Lakshman, T.: Application-aware
data plane processing in SDN. In: Proceedings of HotSDN, pp. 13–18 (2014)
29. Natarajan, S.: Github - snrism/ﬂorence-dev: Sdn security test framework (2016).
https://github.com/snrism/ﬂorence-dev
30. Nelson, T., Ferguson, A.D., Scheer, M.J., Krishnamurthi, S.: Tierless programming
and reasoning for software-deﬁned networks. In: Proceedings of NSDI, pp. 519–531
(2014)
31. Open Networking Foundation: OpenFlow switch speciﬁcation (1.0) (2009)
32. Open Networking Foundation: Conformance test speciﬁcation for OpenFlow switch
speciﬁcation 1.0.1 (2013). https://www.opennetworking.org/images/stories/down
loads/sdn-resources/onf-speciﬁcations/openﬂow-test/conformance-test-spec-open
ﬂow-1.0.1.pdf
33. Open Networking Foundation: OpenFlow switch speciﬁcation (1.5.0) (2014)
34. Open Networking Foundation: Conformance test speciﬁcation for OpenFlow switch
speciﬁcation 1.3.4 - basic single table conformance test proﬁle (2015). https://www.
opennetworking.org/images/stories/downloads/working-groups/OpenFlow1.3.4
TestSpeciﬁcation-Basic.pdf
35. Pickett, G.: Abusing software deﬁned networks. In: Defcon (2014)
36. Pickett, G.: Staying persistent in software deﬁned networks. In: BlackHat (2015)
37. Plummer, D.: Ethernet address resolution protocol: Or converting network protocol
addresses to 48.bit ethernet address for transmission on ethernet hardware. RFC
826 (1982)
38. Porras, P., Cheung, S., Fong, M., Skinner, K., Yegneswaran, V.: Securing the
software-deﬁned network control layer. In: Proceedings of NDSS (2015)
BEADS: Automated Attack Discovery in OpenFlow-Based SDN Systems
333
39. Project Floodlight: Floodlight OpenFlow Controller (2016)
40. Reitblatt, M., Foster, N., Rexford, J., Schlesinger, C., Walker, D.: Abstractions for
network update. In: Proceedings of ACM SIGCOMM, pp. 323–334 (2012)
41. Scott, C., Wundsam, A., Raghavan, B., Panda, A., Or, A., Lai, J., Huang, E.,
Liu, Z., El-Hassany, A., Whitlock, S., Acharya, H., Zariﬁs, K., Shenker, S.: Trou-
bleshooting blackbox SDN control software with minimal causal sequences. In:
Proceedings of SIGCOMM, pp. 395–406. ACM (2014)
42. Shin, S., Gu, G.: Attacking software-deﬁned networks: a ﬁrst feasibility study. In:
Proceedings of HotSDN, pp. 165–166 (2013)
43. Shin, S., Porras, P., Yegneswaran, V., Gu, G.: A framework for integrating secu-
rity services into software-deﬁned networks. In: Proceedings of Open Networking
Summit (2013)
44. Shin, S., Yegneswaran, V., Porras, P., Gu, G.: Avant-guard: scalable and vigilant
switch ﬂow management in software-deﬁned networks. In: Proceedings of CCS, pp.
413–424 (2013)
45. The Ryu Project: Ryu SDN framework using OpenFlow 1.3. Website (2014).
https://osrg.github.io/ryu/