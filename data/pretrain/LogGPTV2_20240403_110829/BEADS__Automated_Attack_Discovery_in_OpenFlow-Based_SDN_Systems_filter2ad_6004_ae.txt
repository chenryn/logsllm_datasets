# BEADS: Automated Attack Discovery in OpenFlow-Based SDN Systems

## 1. Introduction
This section outlines the capabilities and scenarios of attacks that can be facilitated through specific bugs and vulnerabilities within Software-Defined Networking (SDN) systems, particularly focusing on the OpenFlow protocol. The primary aim is to highlight how these vulnerabilities can be exploited and the potential impact on network security.

### 1.1 Packet Dropping to Prevent Location Re-assertion
The ability to drop all packets from a target server to the controller can prevent the server from re-asserting its old location, thereby extending the duration of an attack indefinitely.

### 1.2 Breaking Network Quarantine
An attacker who has discovered valuable information (e.g., PII, credit card data, intellectual property) but has been quarantined by the network must find a way to exfiltrate this data despite the imposed isolation. In our demonstration, the Ryu controller, which implements a firewall, attempts to quarantine a target host by dropping all packets from its port. The attacker, assumed to control an arbitrary switch, uses the CD2 bug to cause the controller to enter an infinite loop, rendering it unresponsive. Consequently, the switches detect the failed connection and revert to standalone mode, purging the flow table and enabling all-to-all connectivity, thus allowing the attacker to exfiltrate the data.

### 1.3 Deniable Denial of Service
In this scenario, an adversary aims to degrade network performance while remaining undetected. Whole-network effects such as controller crashes are undesirable, as are any actions easily traceable to the attacker. We implemented this attack using ONOS, where an infinite sequence of SD9 bugs causes the disconnection of the malicious switch during ARP floods. This directs suspicion away from the malicious switch and onto the controller, resulting in about 3 seconds of impaired service per ARP flood. An attacker can increase the frequency of ARP floods by sending normal ARP requests for non-existent hosts.

## 2. Discussion and Limitations
BEADS identifies strategies that cause significant impact on the network due to one or more bugs, similar to stack-overflow vulnerabilities. However, manual effort is still required to write an exploit that targets these bugs specifically. Many of the bugs found by BEADS allow a malicious switch to indirectly impact other switches or hosts, making it difficult to identify the malicious party and potentially enabling Man-In-The-Middle (MITM) attacks if TLS is not used.

## 3. Related Work
### 3.1 Network Testing and Debugging
- **DELTA**: Evaluates the whole SDN system but focuses on the northbound interface and uses blind fuzzing.
- **OFTest and FLORENCE**: Test OpenFlow switches for conformance but do not consider the controller.
- **NICE and OFTEN**: Use model checking and symbolic execution for non-malicious SDN testing, but do not scale well with large controllers like ONOS and Ryu.
- **STS**: Develops a method to minimize network execution traces containing bugs but does not focus on manipulating OpenFlow messages.

### 3.2 Attacks and Defenses in SDN
- **Protocol and Saturation Attacks**: Various studies have explored these types of attacks and proposed defense mechanisms.
- **Controller-Switch Communication Attacks**: Techniques like filtering packet-in messages and probabilistic black-listing have been proposed to mitigate such attacks.
- **Link-Flooding DDoS Attacks**: Spiï¬€y is a recent proposal to detect and mitigate these attacks by applying rate changes to saturated links.

## 4. Conclusion
We have developed BEADS, a framework to automatically find attacks in SDN systems. BEADS considers attacks caused by malicious hosts or switches and uses semantically-aware test case generation. We tested almost 19,000 scenarios on four controllers, finding 831 unique bugs classified into 28 categories, 10 of which are new. We demonstrated how these bugs can be used to impact high-level network goals such as availability, topology, and reachability.

## 5. Acknowledgements
We thank William Streilein, James Landry, Guofei Gu, and anonymous reviewers for their support and comments. This work was supported by the National Science Foundation and the Department of Defense.

## 6. References
[References listed here as in the original text]

---

This optimized version aims to provide a clearer, more coherent, and professional presentation of the content, ensuring that each section is well-structured and easy to follow.