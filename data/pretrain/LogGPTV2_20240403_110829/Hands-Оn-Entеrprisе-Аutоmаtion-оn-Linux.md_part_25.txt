published content view?
Further reading
For a greater understanding of Katello, please refer to the official Red Hat Satellite 6
documentation as this is the commercial version of Katello and all of the documentation is
usually written for this platform—however, the features and menu structure are almost
identical (https:/​/​access.​redhat.​com/​documentation/​en-​us/​red_​hat_​satellite/​).
[ 267 ]
10
Managing Users on Linux
No Linux server is complete without a method for users to access it. Whether
administrators or end users, and whether using local or centralized credentials, Linux
servers need a mechanism for users (and even tools such as Ansible!) to access them.
User management is, like all good server configuration and maintenance activities, an
ongoing job. Credentials need rotating on a regular basis, to ensure the security and
integrity of systems. Employees come and go, meaning access details must be updated
accordingly. Indeed, access management can, in a busy organization, be a full-time job in
itself!
In this chapter, we will explore, through hands-on examples, how to automate your user
and access management through Ansible, in a way that is consistent with our Standard
Operating Environment (SOE) model.
The following topics will be covered in this chapter:
Performing user account management tasks
Centralizing user account management with Lightweight Directory Access
Protocol (LDAP)
Enforcing and auditing configuration
Technical requirements
This chapter includes examples, based on the following technologies:
Ubuntu Server 18.04 LTS
CentOS 7.6
Ansible 2.8
Managing Users on Linux Chapter 10
To run through these examples, you will need access to two servers or virtual machines
running one each of the operating systems just listed, and also, Ansible. Note that the
examples given in this chapter may be destructive in nature (for example, they add and
remove user accounts, and make changes to server configuration) and, if run as is, are only
intended to be run in an isolated test environment.
Once you are satisfied that you have a safe environment in which to operate, let's get
started on looking at the installation of new software packages with Ansible.
All example code discussed in this chapter is available from GitHub, at the following
URL: https:/​/​github.​com/​PacktPublishing/​Hands-​On-​Enterprise-​Automation-​on-
Linux/​tree/​master/​chapter10.
Performing user account management tasks
At the most fundamental level, every Linux server in your environment will require some
degree of access for users. In an enterprise setting where there could be hundreds, if not
thousands, of servers, a centralized user management system such as LDAP or Active
Directory would be an ideal solution as, taking the examples of a user leaving or changing
their password, they can do this in one place, and it is applied across all servers. We will
explore this aspect of Enterprise Linux management and automation in the next section,
Centralizing user account management with LDAP.
For now, though, let us concern ourselves with local account management—that is,
accounts that are created on each and every Linux server where access is required. Even
when a centralized solution such as LDAP is present, local accounts are still a
requirement—if for no other purpose than to serve as an emergency access solution, should
the directory service fail.
Note that, as with all Ansible examples in this book, they can be run
equally well on 1, 100, or even 1,000 servers. In fact, the use of Ansible
reduces the need for a centralized user management system, as user
account changes can be pushed out across the entire estate of servers with
ease. However, there are good reasons not to rely solely on this—for
example, one server being down for maintenance during an Ansible
playbook run means it will not receive the account changes being made.
In the worst-case scenario, this server could then pose a security risk once
it is brought back into service.
Starting in the next section, we will explore the ways in which Ansible can assist with your
local account management.
[ 269 ]
Managing Users on Linux Chapter 10
Adding and modifying users with Ansible
Whether you are configuring a brand new server for the first time after it has been built or
making changes when a new employee joins the company, adding user accounts to a server
is a commonly required task. Thankfully, Ansible has a module called user, which is
designed to perform user account management tasks, and we shall proceed to use exactly
this.
Throughout our previous examples, we have been very careful to highlight the differences
between platforms such as Ubuntu and CentOS, and user account management requires a
little consideration here too.
Take, for example, the following shell command (which we will later automate in Ansible):
$ useradd -c "John Doe" -s /bin/bash johndoe
This command could be run on either CentOS 7 or Ubuntu Server 18.04, and would yield
the same results, namely:
The user account johndoe would be added with the next free user identification
number (UID) for users.
The account comment would be set to John Doe.
The shell would be set to /bin/bash .
Indeed, you could run this command on just about any Linux system, and it would work.
The differences start, however, when you consider groups, especially built-in ones. For
example, if you wanted this account to be able to use sudo for root access (that is, johndoe
is a system administrator), you would want to put this account into the wheel group on
CentOS 7. On Ubuntu Server, however, there is no wheel group, and attempting to put the
user into such a group would result in an error. Instead, on Ubuntu, this user would go into
the sudo group.
It is subtle differences like this that could trip you up when it comes to automated user
account management across different Linux distributions—however, as long as you remain
mindful of such things, you can easily create Ansible playbooks or roles, to manage your
Linux users with ease.
[ 270 ]
Managing Users on Linux Chapter 10
Let's build on this example, to instead create the johndoe user in an Ansible role, such that
access for them can be rolled out on all Linux servers. The code
for roles/addusers/tasks/main.yml to perform the same function as the shell of the
preceding command should look something like the following:
---
- name: Add required users to Linux servers
user:
name: johndoe
comment: John Doe
shell: /bin/bash
If we run this role in the usual way, we can see that the user account gets created on the
first run, and that no action is taken if we run the playbook a second time. This is denoted
in the following screenshot, which shows the preceding role being run twice—the changed
and ok statuses show when a user account is added, and when no action is taken because it
already exists respectively:
[ 271 ]
Managing Users on Linux Chapter 10
So far, so good—however, this example is rather skeletal in nature—our user has no
password set, no group membership, and no authorized SSH keys. We demonstrated
previously that we can run an Ansible role containing the user module more than once and
changes will only be made if required, and we can leverage this to our advantage. Let's
now expand our example role, to add these things.
Before we get into our next example, we will demonstrate how to generate a password
hash, using Ansible. Here, we will choose the word secure123. The user module of
Ansible is capable of setting and modifying user account passwords, but it does not (for
very good reasons) allow you to specify the password in plaintext. Instead, you must create
a password hash, to send to the machine being configured. In Chapter 6, Custom Builds with
PXE Booting, we looked at a way to do this with a small amount of Python code, and you
are welcome to reuse this method here. However, you can also make use of Ansible's vast
array of filters, to generate a password hash from a string. Run the following command
from the shell:
$ ansible localhost -i localhost, -m debug -a "msg={{ 'secure123' |
password_hash('sha512') }}"
Running this produces a password hash that you can copy and paste into your role, as
shown in the following screenshot:
This is very useful in itself—however, let's bear something in mind: no password hash is
completely secure. Remember that once, MD5 hashes were considered secure, but are now
not. Ideally, you should not be storing the hash in plaintext either, and should regenerate it
on every system as it contains a unique salt. Luckily, we can use the password_hash filter
in a role directly to achieve this.
[ 272 ]
Managing Users on Linux Chapter 10
In the following example, we demonstrate how to store the password string in a variable,
and then, how to use the password_hash filter to generate the hash for the remote system.
In a real-world use case, you would replace the plaintext variable file with an Ansible vault
file so that at no point is either the original password or hash stored unencrypted.
1. First of all, let's create roles/addusers/vars/main.yml, and store John Doe's
password in a variable, as follows:
---
johndoepw: secure123
2. Next, let's create an SSH key pair for this user, in the directory
roles/addusers/files/, by running the following command in that directory:
$ ssh-keygen -b 2048 -t rsa -f ./johndoe_id_rsa -q -N ''
Of course, it is likely in an enterprise setting that the user would generate their
own key pair and provide an administrator with the public key for distribution to
the systems they will use—however, for our example here, it is easier to
demonstrate with a newly generated key pair.
3. Finally, let's say that johndoe is going to administer Ubuntu systems, and so,
should be in the sudo group. Our resulting role should now look like this:
---
- name: Add required users to Linux servers
user:
name: johndoe
comment: John Doe
shell: /bin/bash
groups: sudo
append: yes
password: "{{ johndoepw | password_hash('sha512') }}"
- name: Add user's SSH public key
authorized_key:
user: johndoe
state: present
key: "{{ lookup('file', 'files/johndoe_id_rsa.pub') }}"
4. Running the code yields changed results, as we would expect, and the following
screenshot shows the successful addition of the user and their corresponding
SSH public key:
[ 273 ]
Managing Users on Linux Chapter 10
Note that we have successfully modified the johndoe account here, as we created it earlier
in this section—however, we could also have run this most recent role before the account
creation, and the end result would have been the same. That is the beauty of Ansible—you
don't need to write different code for modifications and additions. There are many other
modifications possible with the user module, and it should serve most of your needs.
Returning briefly to the vars/main.yml file we created earlier, we left this in plaintext for
simplicity in this example. However, we can very easily encrypt our existing file, using the
following command:
$ ansible-vault encrypt main.yml
The following screenshot shows this encryption process in action:
[ 274 ]
Managing Users on Linux Chapter 10
The data is now encrypted at rest! We can still run the playbook without decrypting
it—simply add the --ask-vault-pass parameter to the ansible-playbook command,
and enter your chosen vault password when prompted.
Before concluding this section, it is worth noting that we can also leverage loops, to create
multiple accounts at once. The following example creates two new users with differing
group membership, and with distinct username and matching comments on their accounts.
Expanding this example to address initial passwords and/or SSH keys is left as an exercise
for you, but you should have enough information to build upon to achieve this. The code
can be seen below:
---
- name: Add required users to Linux servers
user:
name: "{{ item.name }}"
comment: "{{ item.comment }}"
shell: /bin/bash
groups: "{{ item.groups }}"
append: yes
state: present
loop:
- { name: 'johndoe', comment: 'John Doe', groups: 'sudo'}
- { name: 'janedoe', comment: 'Jane Doe', groups: 'docker'}
Noting that we created johndoe earlier in this chapter, we can see that if we run this role,
the janedoe user is the only account created as they did not already exist—the following
screenshot shows exactly this. janedoe shows a changed status, informing us that a
change was made—in this case, the account was created. The ok status against the johndoe
user account tells us that no action was performed, as can be seen in the following
screenshot:
[ 275 ]
Managing Users on Linux Chapter 10
In this way, user accounts can be created and managed at scale, across a wide number of
Linux servers. As we can see in the preceding screenshot, in the usual Ansible manner, only
the required changes are made, with existing accounts left unchanged. While adding
accounts is straightforward, we must also consider that employees also leave enterprises
from time to time, and so, account cleanup is also required in this instance.
We will explore the ways in which Ansible can assist with removing user accounts and
tidying up after them, in the next section.
Removing users with Ansible
Although we have shown that it is easy to add and modify user accounts with Ansible, we
must consider removal as a separate case. The reason for this is simple—Ansible assumes
that, if we use the user module in conjunction with a loop to add both johndoe and
janedoe, it will add them if they do not exist; otherwise, it will modify them. If, of course,
they match the state described by the role or playbook, then it will do nothing at all.
However, Ansible assumes nothing about the state prior to it being run. Thus, if we delete
johndoe from the loop described previously and run the playbook again, this account is
not removed. As a direct result of this, we must handle account removal separately.
The following code will remove this user account:
---
- name: Add required users to Linux servers
user:
name: johndoe
state: absent
Now, if we run this command, the output should look something like the following
screenshot:
[ 276 ]
Managing Users on Linux Chapter 10
Running this role is the equivalent of using the userdel command in the shell—the user
account is removed, along with all group memberships. However, the home directory is left
intact. This is normally the safest route, as users might have stored important code or other
data in their home directory, and often, it is best for someone to sanity-check that the
directory is safe to remove, before it is actually removed. If you are sure that you want to
remove the directory (which is best practice, for both security reasons and to free up disk
space), then add the following code to the role we just created:
- name: Clean up user home directory
file:
path: /home/johndoe
state: absent
This performs a recursive delete of the path specified, so use this with care!
With these practical examples and a little additional detail from the documentation, you
should be in a good position to automate your local account tasks with Ansible. In the next
section, we will explore the use of centralized user account management with LDAP.
Centralizing user account management with
LDAP
Although Ansible performs a fine job when it comes to managing user accounts across an
estate of servers, the best practice in an enterprise is to make use of a centralized directory
system. A centralized directory is able to perform a number of tasks that Ansible can
not—for example, enforcing password security criteria, such as length and character types,
password expiry, and account lockout when too many incorrect passwords are tried. As
such, it is highly recommended that such a system be used in the enterprise.
Indeed, many enterprises already have such a system in place, two common ones being
FreeIPA and Microsoft Active Directory (AD). In the following sections, we will explore
the integration of these two systems with your Linux servers.
[ 277 ]
Managing Users on Linux Chapter 10
Microsoft AD
As this is a book on Linux automation, an in-depth discussion of Microsoft AD and its
setup and configuration is well beyond its scope. Suffice to say that in the context of Linux,
AD is best suited to centralized user account management, although, of course, its
capabilities are far greater than this. Most organizations that need an AD server will
already have one set up, and so, our concern is not with this aspect, but with getting our
Linux servers to authenticate against it.
On most modern Linux distributions, the realmd tool is used to join the Linux server in
question to AD. Next, we consider a hypothetical example of joining a CentOS 7 server to
AD—however, every organization, their AD setup, organizational units, and so on will be
different, and so, there is no one-size-fits-all solution here.
As you will no doubt be aware by now, performing this process on
Ubuntu will be very similar, except that you will use the apt module in
place of yum, and the package names could differ. Once realmd and its
required packages are installed, the process is identical.
It is hoped, though, that the following code given provides you with a good basis on which
to develop your own Ansible role to join AD.
1. Before beginning the process of joining the directory, it is vital that the Linux
server is using the correct DNS servers that contain the appropriate Service
(SRV) records for the domain. Often, these DNS servers will be the AD servers
themselves, but that again will vary from organization to organization.
2. The realmd tool must be installed, along with a number of supporting packages.
Let's create a role called realmd, using our familiar roles directory structure.
The roles/realmd/tasks/main.yml should begin with the following code, to
install the required packages:
---
- name: Install realmd packages
yum:
name: "{{ item }}"
state: present
loop:
- realmd
- oddjob