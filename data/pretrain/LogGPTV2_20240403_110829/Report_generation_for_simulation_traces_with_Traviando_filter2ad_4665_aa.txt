title:Report generation for simulation traces with Traviando
author:Peter Kemper
Report Generation for Simulation Traces with Traviando
College of William and Mary
Department of Computer Science
Williamsburg, VA 23187, USA
Peter Kemper
PI:EMAIL
Abstract
Any model-based evaluation of the dependability of a
system requires validation and veriﬁcation to justify that its
results are meaningful. Modern modeling frameworks en-
able us to create and evaluate models of great complexity.
However, we believe that much more can be done to support
a modeler in ensuring that the dynamic behavior of an ex-
ecutable simulation model is consistent with the modeler’s
understanding. In this paper, we describe a new command
line version of Traviando that reads an execution trace of a
discrete event simulation and generates a set of HTML for-
matted web pages to document properties that it recognizes
from its input. Those properties include characteristics of
state variables as well as changes to state variables that are
performed by events. The point is to highlight the content of
a simulation run in a format that is immediately accessible
and understandable.
1. Introduction
Stochastic discrete event dynamic system (DEDS) mod-
els have been in use for many years to conduct a depend-
ability or performance assessment of a system under study.
Although other solution techniques for particular classes of
models exist, discrete event simulation is the most com-
monly applied technique due to its few constraints and
broad applicability. A simulation executes a given model
and derives values for dependability and performance mea-
sures based on a statistical evaluation of the observed dy-
namic behavior. This a very low level technique compared
to how models are speciﬁed in modeling formalisms sup-
ported in modeling tools and most tools hide such details
from a user and come up with results at a level that corre-
sponds to the abstraction level used in modeling. This is
appropriate if a given model is correct. It is attributed to
George Box, that all models are wrong, but some are use-
ful. So it is important to justify conﬁdence in the usefulness
of the considered model and this justiﬁcation is with what
is commonly termed validation and veriﬁcation (V&V) of a
model [9]. Validation relates to the question ”Did we build
the right system?” while veriﬁcation addresses the transfor-
mation of a conceptual model into an implemented, exe-
cutable model with the question ”Did we build the system
right?”. A valid and veriﬁed model is expected to provide
reasonably accurate values for measures of interest that are
consistent with what would be observed for the system of
interest. V&V is a classic topic in simulation and the Win-
ter Simulation Conference devotes a tutorial paper to it in
each year, often by Balci [3] and Sargent [9]. In particular
for model veriﬁcation, Sargent [9] names structured walk-
throughs, correctness proofs and examining the structure
properties of a simulation program for static ”testing” tech-
niques. For dynamic testing he names traces, investigations
on input-output relations, internal consistency checks, and
reprogramming critical components to determine if same
results are obtained. Such steps are embedded in an overall
procedure of model V&V.
In this paper, we focus on tool support for a veriﬁcation
that uses dynamic testing and traces, that is rather experi-
mental, and that cannot guarantee absence of errors with its
results. However, on the positive side, it provides feedback
on truly observed model behavior as documented in a sim-
ulation trace. The tool bridges the gap between the details
of a simulation run and a high-level model speciﬁcation in
a complementary manner to measurement results reported
by a simulator itself and pseudo-realistic animations of the
simulated system which modern simulation frameworks of-
ten provide. We report on a recent extension of Traviando
[8] by a new feature that generates a set of HTML format-
ted web pages which report observations and list warnings.
With the generation of this list of warnings, we attempt to
accumulate ”lessons learned” experiences such that com-
mon errors and pitfalls are detected. The approach is stim-
ulated by the way software development is supported by
static code analysis, where a software tool generates a report
for a given program code that lists locations in the code base
that require further attention based on a set of rules that in-
corporate knowledge on common pitfalls in programming;
see FindBugs as a particular example [7]. In dependabil-
ity modeling, there is no one (or few) common main stream
model notation as it is the case in programming, but there
is a common ground for the execution of stochastic DEDS
models as a state transition system. M¨obius [4] is an ex-
ample of a modeling framework based on the concept of
a state transition system, which allows a modeler to com-
pose models speciﬁed in different formalisms but all share
a common notion of what is a state and a state transforma-
tion by an event. So, we put forward a simulation execution
checker based on observations made from a trace of states
and transitions of a stochastic DEDS model.
In the area of business process modeling, there exists re-
lated work that goes a step further and attempts to identify a
business process model based on a log ﬁle of a workﬂow. To
do so, the workﬂow log contains information on cases and
their corresponding tasks that are logged with a time stamp.
Van der Aalst and coworkers have developed a rich body of
knowledge for similar concerns in business process model-
ing and workﬂows, e.g.
the identiﬁcation of models from
observed behavior, detection of anomalies, equivalence of
models based on observes to name a few. E.g.
in [10],
Weijters and Maruster discuss for which kinds of workﬂow
models it is possible to rediscover a corresponding, equiv-
alent model. This work is very promising for any applica-
tion where events correspond to entities, e.g., as for simula-
tion models that follow a process interaction approach. For
the work presented here, the trace data gives information on
states and events, where in particular the state information
allows us to deduce other properties, e.g., the identiﬁcation
of cyclic behavior. So we focus on a slightly different type
of information and consequently focus on different prop-
erties, in particular properties of states and regularities in
traversing the state space of a model. With respect to model
identiﬁcation, we only conduct an invariant analysis similar
to classical Petri net invariant analysis for a matching subset
of state variables and actions.
The rest of the paper is structured as follows: Section 2
outlines the tool architecture. Section 3 describes the con-
tent of the generated web pages. Section 4 shows how to
identify an error in a model with the information provided
in the generated report. We conclude in Section 5.
2. Tool Architecture
The command line version of Traviando [2] has a min-
imalistic user interface that outputs a report as a set of
HTML-formatted ﬁles for an XML-formatted trace given as
input. In this section, we outline input, output and internal
structure of Traviando.
Input. An input trace ﬁle consists of a preﬁx and a se-
quence part. The preﬁx part contains information on all
state variables and actions that perform changes to state
variables. State variables can be partitioned into subsets
and each subset corresponds to a so-called process. An ac-
tion performs changes to value settings of state variables.
So actions can be partitioned into local actions that change
only values of variables of a single process and so-called
interactions that change values of variables of more than
one process. The sequence part of the trace consists of an
initial state that assigns values to all state variables and a
sequence of events, each described by an action identiﬁer,
a time stamp (optional) and value assignments to state vari-
ables which yield the successor state. We assume that vari-
ables that are not explicitly assigned a new value remain un-
changed (a common inertia rule). The ﬁle format is XML,
for a more detailed description and a document type deﬁni-
tion (DTD), see [2]. This input format has been successfully
used for simulation traces generated with M¨obius [4], NS2
[1], ProC/B toolset [6] and the APNN toolbox [5].
Output. Traviando scans the trace and generates a set
of web pages with a main webpage that provides an outline
with sections on variables, actions, invariants and warnings.
The list of warnings also contains links to static webpages
which provide a generic and detailed description of the ra-
tionale, symptoms and solutions for any particular warning.
We elaborate on the generated content in Section 3.
Architecture. Traviando’s command line version is im-
plemented in Java 1.5 and shares code with the full, interac-
tive version of Traviando, an interactive trace analyzer and
visualizer. The software parses a trace ﬁle (with the help
of a SAX parser) and creates an internal representation in
the size of the trace and conducts a series of analysis steps.
Any graphics are in PNG format and generated with the
jFreeChart library. The code is developed and tested in a
MacOS and a Linux environment. The command-line in-
terface of Traviando minimizes the learning curve to apply
it to a simulation trace. Since knowledge on web browsing
is common, user appreciation of Traviando relies mainly on
the quality of the generated content, its presentation on web
pages, and the scalability of internal algorithms to apply to
lengthy simulation runs. Figure 1 outlines the tool’s archi-
tecture. Traviando makes use of a set of libraries including
a parser support (SAX), graphics (jfreechart), and statistics
(commons-math).
Difference Between Traviando’s Command-line and
GUI version. The new command-line interface draws on
a newly implemented classiﬁcation package that provides
functionality to characterize variables and actions and to
detect anomalies. New functionality includes a basic type
recognition of variables, a check for variables being un-
changed or actions not being performed towards the end of
a trace which may suggest a deadlock situation, a check for
ber of value assignments. The third and the fourth ﬁgure
show characteristics of how the simulation run visits states
in the state space of the model. The third ﬁgure associates
an integer index 1, 2, ... to the sequence of states in an in-
creasing order, such that there is a 1-1 mapping between
states and indices. Fig. 2 shows an example; it shows the
state index as a function of the position in the trace. This
plot indicates if the simulation returns to previously visited
states in a regular manner (which simulation models often
do). The fourth and last ﬁgure shows how the length of any
preﬁx of the simulation run evolves if cycles are removed.
This is called ”progress” in [8] and illustrates in a different
manner if the simulation run returns to previously visited
states. Plots of the progress measure show certain patterns
for certain problematic situations, see [8] for further details.
Figure 2. States visited by a trace of an exam-
ple server model
Finally the page lists links to six further sections (pages),
that give details 1) for all variables, 2) for all actions, 3) for
action invariants observed in the trace, 4) for action invari-
ants calculated from an invariant analysis, 5) for variable in-
variants in a similar manner, and 6) a list of warnings. There
is also an individual page for each variable and action that
includes characteristics and warnings. We will summarize
the contents of those pages in the following paragraphs.
Variables. A state is described by the value settings of
state variables. For state variables, certain characteristics
are straightforward to obtain from a simulation trace, yet
can provide useful feedback. For state variables that are
numbers (integer, ﬂoating point), we can consider the range
of values and the sequence of value assignments. We iden-
tiﬁed three types of variables:
• constants: variables that are initialized and never mod-
iﬁed. Such a variable may hold a parameter value of a
parameterized model in a series of experiments.
• state: variables that change in value, often on a dis-
crete, integer domain. Such a variable may encode the
Figure 1. Commandline version of Traviando
actions performing state transformations to overﬂow a nu-
merical range for integer type variables, the identiﬁcation
of state transformations performed by actions and a detec-
tion of invariants for actions and variables, the generation
of a list of warnings to help a user recognize particular as-
pects of the observed behavior, to name a few. This new
functionality has also been made available in the interactive
GUI of Traviando but in a different format. In providing two
different ways to access the information we extract from a
trace, we want to explore which works better in practice.
There is a clear difference on what the generated HTML
report can provide compared to the interactive GUI. The re-
port is strong at providing a ﬁrsthand feedback with ﬁgures,
statistics, and warnings across the overall trace, but not to
visualize particular states or locations in the trace. The lat-
ter is a strong point of the interactive GUI which provides a
model-checker and a trace browser among other features to
locate areas of interest in a trace which are then visualized
graphically in the style of a message sequence chart.
3. Generated Content
In this section, we describe the structure and content of
the generated web report.
Main Page. The main page provides some aggregated in-
formation and links to other pages. It reports the total num-
ber of variables and actions as well as the number of events
in the trace. It contains a table that lists the number of lo-
cal variables, local actions and interactions for each process.
The numerical entries carry a link to web pages that provide
further information, e.g., the number of local actions of a
particular process links to a page with further information
for all local actions of that process. The page also provides
generated text passages to explain the content of tables and
ﬁgures. The main page further shows a bar chart with the
total number of changes being made by the events in the
trace. This helps in recognizing variables that are changed
very often or very rarely, as well as groups of variables that
are changed in a similar manner. A second chart shows how
often each action occurs, which allows a user to recognize
extremes and patterns as for the previous ﬁgure on the num-
state of a component of a system.
• counters:
variables that are monotonously non-
decreasing (non-increasing). Such a variable may en-
code a way to obtain measurement data from a simula-
tion run.
Of course, variables can turn out to be in one of the cate-
gories due to missing or faulty state transformations. So, we
consider it useful to provide the range of values, statistical
values of mean, mode and variance as well as information
on which action performs what kind of state transformation.
If variables do change in value but not in a monotonous
manner, it is interesting to obtain more detailed informa-
tion on the distribution of values as well as to see if there
is a trend in the sequence of values; for the latter, a de-