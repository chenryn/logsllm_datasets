# Title: Spam Isn't as Diverse as It Seems: Throttling OSN Spam with Templates

## Authors:
- Hongyu Gao
- Yi Yang
- Kai Bu
- Yan Chen
- Doug Downey
- Kathy Lee
- Alok N. Choudhary

### Affiliations:
- **Hongyu Gao, Yi Yang, Yan Chen, Doug Downey, Kathy Lee, Alok N. Choudhary**: Department of Electrical Engineering and Computer Science, Northwestern University
- **Kai Bu**: College of Computer Science and Technology, Zhejiang University

---

## Abstract

In online social networks (OSNs), spam from friends and acquaintances not only diminishes the enjoyment of internet use but also poses a risk to less security-savvy users. Previous countermeasures have tackled OSN spam from various angles. However, due to the diversity of spam, no single existing method can independently detect the majority of OSN spam. In this paper, we empirically analyze the textual patterns of a large collection of OSN spam. We find that 63.0% of the collected spam is generated using underlying templates. Therefore, we propose extracting templates from spam detected by existing methods and matching new messages against these templates for accurate and fast spam detection. We implement this approach in Tangram, an OSN spam filtering system that performs real-time inspection of user-generated messages. Tangram automatically segments OSN spam to construct templates, which are then used to filter future spam. Experimental results show that Tangram is highly accurate, rapidly generating templates to throttle newly emerged campaigns. Specifically, Tangram detects the most prevalent template-based spam with a 95.7% true positive rate, compared to 32.3% for existing template generation approaches. When integrated with an auxiliary spam filter, Tangram achieves an overall accuracy of 85.4% true positive rate and 0.33% false positive rate.

### Categories and Subject Descriptors
J.4 [Computer Applications]: Social and behavioral sciences

### General Terms
Human Factors, Measurement, Security

### Keywords
Online social networks, spam, spam campaigns

---

## 1. Introduction

Spam has been a persistent issue in the internet community for over a decade. With the rise of online social networks (OSNs), spammers have quickly adapted to exploit these platforms. Despite the development of various countermeasures, spammers continue to find ways to evade detection. Research shows that on Twitter, one of the most popular OSNs, more than 4% of collected tweets are spam, slipping through deployed defense mechanisms. Researchers have proposed multiple approaches to combat OSN spam, including analyzing textual content, studying URL redirection chains, and classifying landing pages. However, it remains unclear what techniques spammers use to generate OSN spam and how these techniques evolve. This information is crucial for designing effective spam mitigation systems.

In this paper, our first contribution is to reveal the techniques used to generate OSN spam based on textual patterns (Section 2). We conduct a measurement study, identifying 115 campaigns from over 500,000 spam messages. We find that 63.0% of spam is generated using underlying templates, consistent with previous email spam research. Templates allow spammers to control and customize message semantics, increasing conversion rates while generating diverse messages that are harder to detect. OSN spammers have evolved to use more sophisticated templates, rendering prior email spam template generation methods ineffective. Additionally, spam without underlying templates requires effective countermeasures.

We identify three major challenges that make existing spam template generation techniques ineffective:
1. **Absence of invariant substring in templates**: Prior research assumed that templates contain an invariant substring, but OSN spam templates often do not.
2. **Prevalence of noise**: Spammers add semantically unrelated noise words to diversify messages, making it difficult to identify meaningful text segments.
3. **Spam heterogeneity**: Spam from different templates and spam without any underlying templates mix together, complicating the training set in online detection scenarios.

Our second contribution is Tangram, a system that effectively generates templates to combat OSN spam (Section 3). Many existing methods focus on detecting spammers rather than spam, requiring long observation periods. Other methods rely on URL analysis, which cannot detect spam without URLs. Tangram is the first accurate online OSN spam detection system that can detect spam with or without URLs. It extracts templates from spam detected by existing methods and matches new messages against these templates. Tangram can be deployed with other detection methods to optimize accuracy. Specifically, Tangram is highly accurate due to the following innovations:
1. **Handling the absence of invariant substrings**: Tangram identifies frequently appearing segments within messages and assembles them into templates.
2. **Mitigating noise**: Tangram labels each word as "noise" or "non-noise" and uses only non-noise words to generate templates.
3. **Breaking spam heterogeneity**: Tangram pre-clusters spam and performs template generation within individual partitions, discarding outlier messages.
4. **Building a double defense**: Tangram includes a supplementary module to detect spam with excessive noise words, providing additional protection.

We evaluate Tangram's ability to detect real-time spam on a large Twitter dataset of 17 million tweets (Section 4). Equipped with an auxiliary spam filter, Tangram detects 95.7% of the most prevalent template-based spam. The complete system detects Twitter spam with an 85.4% true positive rate and a 0.33% false positive rate. Tangram reacts quickly to new spam campaigns and is robust against evasion attempts (Section 5). Finally, we discuss related work (Section 6).

---

## 2. Motivation: Revealing Twitter Spam Templates

In this section, we empirically analyze the textual patterns of Twitter spam to quantitatively reveal the techniques used to generate current OSN spam. We find that the majority of spam is generated using underlying templates, motivating the development of Tangram.

### 2.1 Data Collection

We collected a large dataset from Twitter containing about 17 million public tweets generated by 4.2 million users between June 1, 2011, and July 21, 2011. We continuously downloaded popular Twitter Hashtags from the website "What the Trend" and then downloaded all public tweets containing these Hashtags. Our data collection method was biased towards tweets with popular Hashtags, but the numerical account IDs followed a uniform distribution, suggesting the dataset was not overly biased towards specific account groups.

In March 2012, we revisited Twitter to label the collected tweets. For each account that posted tweets in the dataset, we crafted a special URL to access the account's personal profile. We checked if the account had been suspended. We found that 120,386 accounts were suspended, posting 558,706 tweets, all labeled as spam. There were 532,676 unique spam tweets, indicating few duplicates. The other tweets were labeled as legitimate. Using the same method, we collected another smaller dataset from January 2012, containing 46,844 spam tweets. These labeled spam tweets represent spam that Twitter failed to detect when they were generated.

### 2.2 Template-based Spam Dominates

Through mining the textual patterns of spam, we find that 63.0% of the 2011 spam dataset shares underlying templates. Table 1 shows five sample spam tweets from a typical template-based campaign. Each tweet consists of a celebrity name, an eye-catching action, and a URL. The number of unique spam messages that this template can generate increases with the number of components.

**Spam Template Model**: We formally model the spam template as a macro sequence (m1, m2, ..., mk). Macros are either dictionary macros or noise macros. Dictionary macros pick textual content from a predefined list, carrying semantic meanings to lure recipients. Noise macros increase message diversity without conveying meaning. We assume that a template contains at least one dictionary macro and may or may not contain noise macros. Unlike previous work, we do not assume the existence of an invariant substring.

### 2.3 Template-based Spam Continues to Dominate

We categorize spam into two categories: "semantically similar" and "semantically dissimilar." Semantically similar spam forms clusters with the same meaning, while semantically dissimilar spam does not. We further divide semantically similar spam into "template-based" and "paraphrase" spam. Paraphrase spam shares the same meaning but cannot be uniformly divided into semantically equivalent segments. Semantically dissimilar spam includes "no-content" spam with little meaningful content and "other" spam.

Template-based spam continues to dominate, as shown in Table 2. In 2012, the percentage of template-based spam increased to 68.3%, while no-content spam almost vanished. This indicates that our detection method, focusing on template generation, is effective against modern OSN spam.

| Spam Category       | 2011   | 2012   |
|---------------------|--------|--------|
| Template-based      | 63.0%  | 68.3%  |
| Paraphrase          | 14.7%  | 12.9%  |
| No-content          | 8.4%   | 0.3%   |
| Others              | 13.9%  | 18.5%  |

---

## 3. Tangram: Template-based Spam Detection System

In this section, we present Tangram, a template-based spam detection system with high accuracy and speed. We first define the concepts of templates, template matching, and template generation. Then, we detail the online Tangram system.

### 3.1 Template Generation and Matching

Tangram does not require prior knowledge of templates. It automatically segments OSN spam to construct templates and uses these templates to filter future spam. The system consists of the following components:

1. **Template Generation**: Tangram identifies frequently appearing segments within messages and assembles them into templates.
2. **Noise Mitigation**: Tangram labels each word as "noise" or "non-noise" and uses only non-noise words to generate templates.
3. **Spam Heterogeneity Handling**: Tangram pre-clusters spam and performs template generation within individual partitions, discarding outlier messages.
4. **Double Defense**: Tangram includes a supplementary module to detect spam with excessive noise words, providing additional protection.

### 3.2 Online System Architecture

The Tangram framework, as shown in Figure 1, consists of the following steps:
1. **Input Stream**: User-generated messages are fed into the system.
2. **Template Matching**: Messages are matched against existing templates.
3. **Auxiliary Spam Filter**: If a message does not match any template, it is passed to an auxiliary spam filter.
4. **Output**: The system outputs whether a message is spam or not.

Figure 1: Tangram Framework: Overview of template generation and matching.

---

This revised version aims to enhance clarity, coherence, and professionalism while maintaining the original content and structure.