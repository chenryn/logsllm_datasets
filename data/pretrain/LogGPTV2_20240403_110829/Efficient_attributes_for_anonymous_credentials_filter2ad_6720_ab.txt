many bases as attributes, proving that some attribute is set to a spe-
ciﬁc value without revealing any of the other attributes becomes
more involved. Basically, one could commit to each of the attribute
values encoded in the binary vector, prove that these are indeed
the commitments to all the attribute values and then reveal the at-
tribute value in question (or prove a statement about it, e.g., that
the hair color attribute is either blond or brown). This approach,
however, is also linear in the number of attributes. A somewhat
better approach than committing to all the attribute values would
be to employ range proofs, in particular the ones by Boudot [5],
to show that the revealed attribute value is contained in the binary
vector. That is, if the vector looked as (akbkc), where b is the
representation of the attribute that shall be revealed and a and c are
the representations of the remaining attributes, one would provide a
commitment to a and c and then prove (1) that these have the right
binary length and (2) that (akbkc) indeed is signed by the issuer
(without revealing a or c of course). While this solution provides a
proof protocol that does not depend on the number of attributes en-
coded, each range proofs require about 12 commitments plus some
additional values, and one needs to do l + 1 of them if l attributes
are revealed. Thus the computational load for the prover would be
computing these commitments plus doing proofs about (which is
as costly as computing the commitment) In practice would not be
considered efﬁcient any more, in particular if one considers using
anonymous credentials for electronic identity cards. Indeed, for the
scenarios we consider in the application section, it would even be
more efﬁcient to use the other methods we discussed.
In the remainder of this section we will show how to encode
attribute values as (small) prime values such that a number of at-
tributes can be encoded into a single message mj and then how we
can reveal these attribute values selectively and how to make sim-
ple statements about them (OR, AND, and NOT connectives). Our
basic idea is in fact very simple: we set mj equal to the product of
the primes corresponding the values of the different attributes. Now
that allows us to show that an attribute is set to a given value en-
coded by, say prime ej by prooﬁng that ej divides the message con-
tained in the credential and to show it is not set to the given value by
showing that ej does not divide the message. Realizing OR state-
ments, i.e., that the credential encoded either ej or el can be done
by proving that there exists a value that divides both the product of
ej and el as well as the message contained in the credential. As we
will see, this idea gives us very efﬁcient proof statements and leads
to, e.g., an efﬁcient implementation of an electronic identity card.
While we present the method for encoding attributes for the
RSA-based CL credential system [13, 15], it can be applied as well
to other anonymity related schemes such as group signatures, e-
cash systems, or voting schemes.
4.1 The CL Credential System and Attributes
We provide an explanation of how the Camenisch-Lysyanskaya
(CL) credential system [13, 15] works and how attributes can be en-
coded into credentials. This will make it clear how to use the results
presented in the remainder of this section to build a fully ﬂedge cre-
dential systems with all other features with which the basic system
has been extended over the years and as described in the literature
(e.g., revocation [14], k-spendability[12], clone protection [11]).
In the CL credential system each user has a secret identity, i.e.,
a single secret key sU . In contrast to how credentials are issued to
the user in a traditional PKI (e.g, X.509), an issuing party now uses
the CL signature scheme to sign the user’s secret key as well as all
attributes the issuer wants to assert about the user. This signing is
of course done in a “blind” way such the issuer does not learn the
user’s secret key (cf. [13, 15]). Thus, the user will have obtained
L−1 A0εSν0
a signature (A, e, v) such that Z ≡ ±Rsu
(mod n) holds, where a1, . . . , aL−1 are the attested attributes and
(Z, R0, . . . , RL−1, S, n) are the issuer’s public key. How a user
can show that she obtained a credential from some issuer and se-
lectively reveal some of the attributes (or prove statement about
them, e.g., my attested birth date lies further in the past than 21
years) using the proof of knowledge of a signature that we recalled
in the previous section.
1 ··· RaL−1
0 Ra1
As discussed, our approach to achieve efﬁcient encoding and
proving of attributes for the CL credential system, we are going
to encode products of primes into a user’s credential, e.g., we set
a1 as the product of the relevant primes ej. Thus, it remains to
show how the user can selectively reveal attribute values encoded
like this, that one out of a list of attribute values is encoded, or that
an attribute value is not encoded into her credential.
4.2 Set Up
4.4 Proofs About Attributes
We now assume that the user (prover) has obtained a CL creden-
tial containing E, i.e., signature (A, e, v) on messages m0 and m1
with m1 = E (m0 typically encodes the user’s secret key [15]).
Efﬁciently Proving That a Credential Contains an At-
tribute with a Given Value.
Let us ﬁrst discuss has the user can convince the veriﬁer that E
encodes a given attribute, e.g, how she can prove that her identity
card states that her hair color is blond. Assume that the attribute
hair color blond is encoded by the prime ej. Thus to convince the
veriﬁer that she got issues a credential with this attribute, i.e., that
ej divides the E included in her credential, the user engages with
the following proof with the veriﬁer:
PK{(ε, ν
0
0
, µ0, µ
1) :
0εSν0
1 )µ0
(mod n)∧
Z ≡ ±Rµ0
1 A
1 ∈ ±{0, 1}‘m−‘t∧
µ0 ∈ ±{0, 1}‘m ∧ µ
0
ε ∈ [2‘e−1 + 1, 2‘e − 1]} .
0 (Rej
THEOREM 4.1. If a prover is successful in the above protocol,
he was issued a credential encoding the attribute corresponding to
ej.
1 )µ0
0 (Rej
1 A0εSν0
PROOF. It is standard to show that there exists a knowledge ex-
tractor who can extract from a convincing prover values ε, ν0, µ0,
1 such that Z ≡ tRµ0
µ0
(mod n) holds for some
t (see, e.g., [28]). Moreover, as we have chosen n as the prod-
uct of two safe primes, t must be ±1. Now, as CL signature are
unforgeable we can conclude that there must exist some E such
that Z ≡ ±Rµ0
1 =
Rej µ0
(mod n) from which we can conclude that E ≡ e1µ0
1
(mod p0q0). This implies that E = ejµ0
1 must hold over the in-
tegers as we could factor n otherwise. Therefore ej is indeed a
factor of E as claimed.
(mod n). Thus, we have RE
1 A0εSν0
0 RE
1
1
The issuer performs the following setup. On input ‘n, choose an
‘n-bit RSA modulus n such that n = pq, p = 2p0 + 1, q = 2q0 + 1,
where p, q, p0, and q0 are primes. Choose, uniformly at random,
R0, . . . , RL−1, S, Z ∈ QRn. In addition, we require bases g and
h for an integer commitment. For this, we can use the signer’s RSA
modulus as well, thus, let h and g be element of QRn.
The public key becomes (n, R0, . . . , RL−1, S, Z, g, h).
4.3 Encoding
The number of bits we can encode into a message ﬁeld of a CL
signature is ‘m as described in the previous section. Now assume
we wants to encode t attributes into a single message ﬁled. Thus
we can only use primes of length up to ‘m/t. Now, if we each at-
tributes takes at most k different values, then we need choose our
‘m such that there exist tk primes smaller than 2‘m/t (or, alterna-
tively, choose t and encode the attributes into two or more mes-
sages). Let ‘t < ‘m/t be the length of the primes that we will be
using.
Assume we want to encode the attribute vector (a1, ...., at) with
ai ∈ {1, . . . , k} and that we have enumerated all the primes 2 <
ei < 2‘m/t. Now we encode (a1, ...., at) by including the value
E = Qt
j=1 e((j−1)k+aj ) in the credential. This means that the
product E will be one of the messages that the issuer signs. (Here
we assumed that each attribute takes k different values — adapting
the construction to cases where some attributes take fewer values is
straightforward.)
It is not hard to see that one can extend this proof to show that
several attributes are encoded, e.g., that ei, ej, and el are contained
in E all at once:
PK{(ε, ν
0
0
1) :
, µ0, µ
)µ0
0εSν0
Z ≡ ±Rµ0
(mod n) ∧
0 (Reiej el
1 A
µ0 ∈ ±{0, 1}‘m ∧ µ
1 ∈ ±{0, 1}‘m−3‘t ∧
0
ε ∈ [2‘e−1 + 1, 2‘e − 1]} .
1
In other words, we have just shown how to very efﬁciently im-
plement an AND statement over the attributes.
Showing that an attribute is not contained in E, i.e.,
how to prove a NOT relation.
Now, proving that a given ej is not contained in her credential
amounts to show that ej - E is the case. The user can do so by
showing that there exist two integers a and b such that aE + bej =
1. Note that a and b do not exist if ej | E. Also note that a and b
can be computed efﬁciently with the extended Euclidian algorithm.
The protocol that achieves this is as follows:
After having computed a and b, the user chooses a sufﬁciently
large random r (about 80 bits larger n) and computes a commit-
ment D = gEhr mod n. She sends D to the veriﬁer and runs the
following protocol with him (where a and b are the secret denoted
by α and β, respectively). Finally, the user engages with the veriﬁer
in the proof:
PK{(ε, ν
0
0
, µ0, µ1, ρ, α, β, ρ
Z ≡ ±Rµ0
0 Rµ1
) :
0εSν0
(mod n) ∧
D ≡ ±gµ1 hρ mod n ∧ g ≡ ±Dα(gej )βhρ0
mod n ∧
µ0, µ1 ∈ ±{0, 1}‘m ∧ ε ∈ [2‘e−1 + 1, 2‘e − 1]} .
1 A
THEOREM 4.2. If a prover is successful in the above protocol,
then she was issued a credential that does not contain the attribute
encoded by ej.
1 )µ0
0 (Rej
1 A0εSν0
PROOF. It is standard to show that there exists a knowledge ex-
tractor who can extract from a convincing prover values ε, ν0, µ0,
1 such that Z ≡ tRµ0
µ0
(mod n) holds for some
t (see, e.g., [15]). Moreover, as we have chosen n as the product
of two safe primes, t must be ±1. Now, as CL signature are un-
forgeable and we can conclude that there must exist some E such
1 = Rej µ0
that Z ≡ ±Rµ0
1
(mod n) from which we can conclude that E ≡ e1µ0
1 (mod p0q0)
(otherwise n could be factored). This implies that E = ejµ0
1
must hold over the integers as, again, we could factor n otherwise.
Therefore ej is indeed a factor of E as claimed.
(mod n) Thus, we have RE
1 A0εSν0
0 RE
1
Obviously the protocol can be extended to show several attribute
values are not contained in a credential in just one proof by replac-
ing ej by the product of the respective primes.
Showing that one of of a list if attributes is contained
in a credential, i.e., how to prove an OR relation.
Let us now show how we can implement a proof of a statement
such as I’m either a student, a retiree, or unemployed as might
be the case if one would be eligible for a reduce entrance fee to
a museum. More generally, we assume that we are given a list of
encodings {e1, ...., e‘} of attribute values (possibly ranging over
different attributes), for some ‘. The idea we use here is that if a
credential contains an attribute e that is contained in this list, then
there exists an integer a such that ae = Q‘
i ei; if e is not in the list,
then no such integer a as e does not divide the product. Let us ﬁrst
assume that the issuer imposes that only one attribute gets encoded
into a signed message. We will later see how we can extend this to
several attributes.
To prove that her credential contains one of the attributes values
{e1, ...., e‘}, a user can employ the following protocol. First, the
user computes a commitment D to the attribute contained in her
credential (in the same way as for the other protocols), sends it
to the veriﬁer, and then runs with the veriﬁer the following proof
protocol:
0
PK{(ε, ν
0
, µ0, µ1, ρ, α, ρ, ρ
Z ≡ ±Rµ0
0 Rµ1
) :
0εSν0
D ≡ ±gµ1 hρ mod n ∧ gQ‘
1 A
(mod n) ∧
i ei ≡ ±Dαhρ0
mod n ∧
µ0, µ1 ∈ ±{0, 1}‘m ∧ ε ∈ [2‘e−1 + 1, 2‘e − 1]} .
We leave the proof for this protocol to the reader and extend it to
work also in case more than one attribute is encoded into a signed
message. So now, the goal is to show that one of the attribute values
encoded in the credential is contained in the list {e1, ...., e‘}. The
idea here is that the user commits to that attribute value and then
shows that it divides the protocol of the attribute values on the list
as well as the message encoded in the credential. However, we
must take some special care as this statement also holds for ±1
and so we must make sure that the commitment does not contain
±1. To this end we need to employ of further group, i.e., one of
prime order q and two generators g and h of that group such that
logh g is unknown. Now, except the commitment D to the attribute
value in question, say ej, as before, the user further computes the
commitment D = gej hr, where r is a random element from Zq.
Finally, the following proof protocol will achieve our goal:
PK{(ε, ν
0
Z ≡ ±Rµ0
gQ‘
0
, ϕ, γ, ψ, ξ, σ) :
, µ0, µ1, ρ, α, β, δ, ρ, ρ
0 Rµ1
0εSν0
(mod n) ∧ D ≡ ±gαhρ mod n ∧
mod n ∧ 1 ≡ ±Dβgµ1 hρ0
1 A
i ei ≡ ±Dδhρ0
D = gαhϕ ∧ g = (
µ0, µ1 ∈ ±{0, 1}‘m ∧ ε ∈ [2‘e−1 + 1, 2‘e − 1]} .
)γ hψ ∧ g = (gD)σhξ ∧
mod n ∧
D
g
THEOREM 4.3. A user who can successfully run the protocol
above must have been issued a credential that encodes at least one
of the attribute values {e1, ...., e‘}.
PROOF. Again, one can extract from a successful prover values
(ε, ν0, µ0, µ1, ρ, α, β, ρ, ρ0, ϕ, γ, ψ, ξ, σ) such that all the equa-
tions given in the proof protocol speciﬁcation hold. Let us con-
sider what we can derive from these equations. First, consider
the equations D = gαhϕ and g = ( D
g )γ hψ. Assuming the hard-
ness of computing logg h, we have 1 ≡ γ(α − 1) (mod q) from
which we can derive that α 6≡ 1 (mod q). A similar argument
can be made with g = (gD)σhξ regarding the statement α 6≡ −1
(mod q) and hence α 6= ±1 will also hold over the integers.
Now consider D ≡ ±gαhρ mod n and gQ‘
mod n.
Assuming the hardness of factoring, we can conclude from these
that α | Q‘
i ei and thus that α equals one of the ei’s or a prod-
uct of them (as we know that α 6= ±1). Now, from the equa-
tion 1 = Dβgµ1 hρ0
mod n we can derive that βα = µ1 holds
over the integers provided factoring is hard. As we thus have
Z ≡ ±Rµ0
(mod n) it follows that α is encoded in
the credential and there for that at least one of the attribute value