100 Million+
10 Million+
10 Million+
5 Million+
5 Million+
1 Million+
1 Million+
1 Million+
1 Million+
1 Million+
PN
BA

















strategy improves user experience. However, as described
in Section 3.6, due to the design ﬂaws of the event handler
system, such a WUI management strategy is also exposed to
untrusted iframes/popups, and cause security issues.
Traditional and privileged navigation attacks impact
more apps than other DCV attacks. As summarized in the
second and third columns of Table 5, navigation based attacks
are more popular than the other vulnerabilities. It is mainly
because the security assumptions of these two attacks are
more easily satisﬁed. For example, many WebView instances
prefer using the default conﬁguration (e.g., disabling popup-
creation), and suffer from privileged navigation attacks.
The traditional navigation based attack causes more se-
rious consequences in the context of WebView. This type
attack almost affects all potentially vulnerable apps. One im-
portant reason is that the effective defense solution “iframe
sandbox” is hardly used in practice. There are several rea-
sons. First, it may be difﬁcult to add the sandbox attribute to
an iframe, especially considering developers have to ﬁnd the
corresponding web code of that frame from a large amount
of web ﬁles and code. Second, it is difﬁcult to manage the
sandbox conﬁgurations for each iframe. Each iframe has
its own speciﬁc security conﬁgurations, including disabling
JavaScript or navigation. When the iframe number rapidly
rises, the conﬁguration management may become quite difﬁ-
cult. Third, iframe sandbox is not ﬂexible. Its conﬁgurations
are often bound with iframes, rather than origins. If an iframe
is navigated to a different origin, it is hard for developers to
update the sandbox restriction policies.
5.3 Case Studies
We have successfully manually launched DCV attacks in
many popular apps (some examples are shown in Table 6).
Readers can ﬁnd also several video demos at [2] (the website
is anonymized). In this section, we present two example apps
(Skype and Kayak) in detail, and also brieﬂy discuss other
examples listed in Table 6.
5.3.1 Skype
This is a very popular communication app (one billion+ down-
loads). Our study shows it suffers from traditional and privi-
leged main-frame navigation attacks. A possible attack sce-
nario is shown in Figure 11. An attacker sends the victim
user a message containing a benign but vulnerable link (e.g.,
ebay.com). When the user clicks the link, a WebView in-
stance is started to render that link (Figure 11-b). However,
the loaded web page includes third-party untrusted tracking
web content (e.g., double-click) in iframes. The embedded
untrusted content has the ability to secretly navigate the main
frame through traditional or privileged navigation attacks,
which may result in stealthy phishing attacks (Figure 11-d).
We also observe when a web page is opened, its URL (e.g.,
ebay.com) is shown in the top of the app. This is relatively
helpful to mitigate DCV attacks. However, after the web con-
tent is fully loaded by WebView (Figure 11-c), we ﬁnd the
URL is replaced by the title of the loaded web page. After
that, the URL will not be shown again, even when a naviga-
988    28th USENIX Security Symposium
USENIX Association
Figure 10: Distribution of Potentially Vulnerable Apps and Potential Vulnerabilities
app, the untrusted iframe obtains the ability of performing
phishing attacks by leveraging the WUI overlap issue (Figure
12-d).
Figure 11: Attacking Skype
Figure 12: Attacking Kayak
tion event occurs. Hence, when the phishing attack occurs,
the victim user may hardly be aware of it.
5.3.2 Kayak
It is a leading app (ten million+ downloads) for providing
traveling-relevant searching services, which are aimed to help
users ﬁnd better prices of ﬂights, hotels, rental cars, and so
on. However, as shown in Figure 12, it suffers from WebView
UI redressing attacks, which may cause account information
leakage and ﬁnancial losses. Consider a possible scenario
that a user is searching a ﬂight. The user clicks one of the
searching results (Figure 12-a), such as the AA ﬂight, and then
clicks the "View" button to get more details (Figure 12-b).
Next, a customized WebView instance is triggered to show
more ﬂight details from “aa.com” (Figure 12-c). However,
in the AA web page, an extra iframe is embedded to load
third-party tracking content (tag management). In the Kayak
In addition, similar with the Skype app, the Kayak app also
provides a title bar to reduce the UI inconsistencies. However,
this is limited to defend against DCV attacks, since the opened
fake web pages often have the same title content.
5.3.3 More Examples
In addition to Skype and Kayak, more examples listed in
Table 6 are discussed below.
• Facebook Mobile Browser, Facebook, Instagram, and
Facebook Messenger: The Facebook Mobile Browser li-
brary is frequently used in Android apps, such as Face-
book, Instagram, and Facebook Messenger. In our study,
the traditional navigation and WUI overlap vulnerabilities
exist. As shown in Section 1 and Figure 5, an address bar
is provided in the library and is helpful to mitigate DCV
attacks. However, as discussed in Section 5.4, the address
bar may face pixel and race condition ﬂaws. By leverag-
ing these ﬂaws, untrusted sub-frames can still obtain the
ability of launching phishing attacks.
• Kakao Talk: Kakao Talk is a popular instant messaging
app. Although Kakao Talk is not equipped with the Face-
book Mobile Browser library, it is also impacted by the
above race condition ﬂaw (Section 5.4).
• Google News: As introduced in Section 5.2, the Google
News app can show any news websites. When there is
an untrusted sub-frame in the rendered news web page,
which is common in practice, the untrusted sub-frame can
perform traditional or privileged navigation attacks.
• WeChat: WeChat is another popular instant messaging app.
Similar with Skype (Section 5.3.1), WeChat also faces
traditional and privileged navigation vulnerabilities.
• Yelp: The Yelp app are also impacted by traditional and
privileged navigation vulnerabilities. Different with Skype
and WeChat, Yelp’s WebView is triggered by clicking the
USENIX Association
28th USENIX Security Symposium    989
homepage link of a restaurant or a store. When the opened
“homepage” web page contains an untrusted sub-frame, the
untrusted sub-frame can launch traditional or privileged
navigation attacks.
• Uber: Uber’s WebView can be started to show “Terms and
Conditions” from its own website by sequentially clicking
the buttons “menu”, “legal” and “terms&conditions”. Our
analysis shows the term and condition webpage contains
an untrusted iframe for loading third-party tracking con-
tent (market analyst). The untrusted iframe can launch
traditional or privileged navigation attacks.
• ESPN: The ESPN app shows news from its own website.
However, its web pages load third-party tracking content
from Google in an iframe. Hence, the untrusted sub-frame
can also do phishing attacks by leveraging traditional nav-
igation and WUI overlap vulnerabilities.
• McDonald’s: In the app, several events are listed. When
an event link (such as “trick n’ treat”) is clicked, WebView
is started to show more details from its own website. How-
ever, an untrusted sub-frame is also contained that it may
exploit traditional or privileged navigation vulnerabilities.
• Samsung Mobile Print, lastpass, dashlane: These apps
provide an internal web browser to improve user expe-
rience. These internal browsers suffer from main-frame
navigation attacks. Although they also offer address bars,
unfortunately, the length of their address bars is much
short than the average length “29 letters” (Section 5.4.
For example, in the same environment (Nexus 5), Sam-
sung Mobile Print only shows 23 letters, and lastpass only
display 18 letters.
• 1password: DCV-Hunter ﬁnds several paths to WebView
content loading APIs. Because we do not have an account
to login, this app is not fully tested. However, when we
click its discount link, we still ﬁnd a vulnerable WebView
instance is launched. The WebView instance can show any
content, and suffers from traditional or privileged naviga-
tion attacks.
• The U.S., Huntington and Chime Mobile Bank apps: These
bank apps provide WebView to load content from their
websites. Note that some of their WebView can be nav-
igated to any websites. The loaded content can include
third-party (tracking) content, which can launch traditional
or privileged navigation attacks.
• The Facebook React Native library: This library is de-
signed to help JavaScript developers implement cross-
platform mobile apps. In its WebView, the related default
conﬁgurations are applied. It suffers from traditional and
privileged navigation vulnerabilities.
5.4 Security Impacts of Home-Brewed URL
Address Bars
Our study shows that some hybrid apps implement their own
URL address and title bars (such as those in our case studies),
which could reduce the UI inconsistencies between WebView
and regular browsers. To better evaluate the security impacts,
we conducted an empirical study of 100 apps that contain
home-brewed address bars. These apps are collected by ﬁl-
tering the DCV-Hunter analysis results (by checking if there
is a path or ﬂow from WebView’s real-time URLs (such as
the API “WebView.getUrl()” and the second parameter of the
event handler “onPageFinished(view, url)”) to UI components’
updating APIs such as “TextView.setText()”).
We ﬁnd that the home-brewed address bars are ineffective
to prevent DCV attacks, for two main reasons: limited address
bar lengths, and implementation errors.
Limited Address Bar Lengths. In our study on a real phone
(Nexus 5), which has the representative screen width, we ﬁnd
that typical address bars averagely show 29 letters. When
domains, including sub-domains, being accessed exceed that
length, security risks could be caused, even when some ex-
isting solutions such as showing the rightmost/leftmost of
origin/URL are in use (e.g., Chrome/Chromium). This is also
partially veriﬁed by existing work (e.g., [29]).
Implementation Errors. Some apps/libraries, such as "Face-
book Mobile Browser", use very small fonts to show origins
(Figure 5). This mitigates the above length limitation problem.
As Figure 5-c shows, this address bar can effectively mitigate
a DCV attack, such as the WUI overlap attack, since the ad-
dress bar can show the origin of the fake web page in real
time. However, it also has several ﬂaws. First, due to the small
font, it faces the pixel problem. Attackers may build a fake
and confusing URL by replacing few letters of the benign
URL with confusing letters (such as replacing the letter “O”
with the number “0”). The fake URL may still spoof users.
Moreover, in these apps, our analysis ﬁnds a race condition
ﬂaw, which can be utilized to show fake web content in Web-
View, while still presenting the benign URL (e.g., ebay.com)
in the address bar (Figure 5-d). This issue is rooted in the
design ﬂaw that several WUIs share only one address bar,
while all these WUIs have abilities to update the content of
the address bar. Hence, attackers can still perform phishing
attacks by combining a couple of DCV attacks. For exam-
ple, in the Facebook Mobile Browser library, which suffers
from the WUI overlap attack, attackers may open a WUI
to load fake content, and then immediately update the over-
lapped benign WUI in background. As a result, the address
bar only show attackers’ URL in a very short time and is
quickly updated to display the benign URL. In our test, we
ﬁnd sometimes the bad URL may not even appear (see our
online demo [2]). This indicates the blended attack is stealthy.
In practice, the blended attack can be easily launched by using
the code shown in Listing 8.
1 // Opening a fake web page (WUI overlap attack)
2 window.open("https://attacker.com", "_blank")
3 // Refreshing the address bar (Traditional navigation attack)
4 window.open("https://eaby.com", "_top")
Listing 8: Exploit Code of Blended Attacks
990    28th USENIX Security Symposium
USENIX Association
6 Vulnerability Mitigation
6.1 Mitigation Solution
To mitigate DCV attacks, we propose a multi-level solution
that enhances the security of WebView. First, we enhance the
security of event handlers by addressing their design ﬂaws
(Section 3.6). For example, in onCreateWindow(), necessary
information is provided, including the operator origin who is
creating a popup, and the URL the created popup is going to
load. Thus, based on the provided information, developers can
reject an unauthorized request. To ease the deployment of our
solution, we also provide security enforcement. If developers
provide the list of trusted URLs in a conﬁguration ﬁle inside
their apps (located in the app folder “assets”), the untrusted
requests can be automatically denied.
Second, we also mitigate the UI inconsistencies by pro-
viding ﬂoating URL indicators. For example, when the main
frame is navigated to a different domain by an iframe/popup,
the URL indicator can provide users an alert. Furthermore,
when users longly press a WebView instance, the origin of
the main frame being loaded by the WebView instance is
presented.
Note this URL indicator is locally bound with a WUI,
which is helpful to avoid the race condition ﬂaw (Section
5.4). When there are multiple WUIs available, only the fore-
most WUI’s URL indicator is visible.
Third, to mitigate origin-hiding attacks, in critical opera-
tions (e.g., accessing web-mobile bridges), we replace the
“null” origin with the origin who creates the “null” origin.
This makes existing defense solutions effective again, since
they can enforce security checks or policies on the new origin.
Fourth, to counter the WebView UI redressing problem,
changes of the WUI rendering order are monitored. When a
change is performed by an iframe/popup, an alert is offered.
Last, to limit the navigation based attacks, we introduce same
origin restrictions into navigation, and also ﬁx the conﬂict.
6.2 Mitigation Solution Implementation
Our implementation is mainly done by instrumenting the We-
bView library, without modifying the source code of Android
frameworks.
6.2.1 Enhanced Event Handlers
To achieve the goal, event handlers related implementation is
instrumented. Take the event handler onCreateWindow() as
the example. To obtain the origin who is creating a popup, the
call site is scanned to locate the last popup-creation operation.
Next, the corresponding operator’s web frame information
(e.g., origin) is retrieved. However, if the web frame’s origin is
“null”, DCV-Hunter checks the web frame tree to get the real
frame who create the “null” frame. Then, to learn the URL the
created popup is going to load, the parameter of the related
API (e.g., window.open()) is also extracted. Furthermore, to
implement the security enforcement of denying untrusted
requests, the default implement of onCreateWindow() is also
instrumented. When the conﬁguration ﬁle (providing the list
of trusted domains) exists, the trusted URLs are extracted
and also used to match the URLs that trigger popup-creation
requests.
6.2.2 URL Indicators
To present current origin loaded in a WebView instance, the
long-click event of the WebView instance is handled. When
the event occurs, the origin of the main frame is presented as
a notiﬁcation. However, the long-click event may also be used
by developers. To avoid potential conﬂicts, we create an event
handler wrapper, which ﬁrst shows the origin information, and
then calls the essential event handler registered by developers.
To monitor the main-frame navigation, the event handler
“shouldOverrideUrlLoading()” is leveraged. When the event
handler is triggered, the URL is checked. If the main frame
is redirected to a different domain by a sub-frame, an alert
can be given. Furthermore, considering WebView is also a
view group (Section 2.2), we make the indicator local: we
temporary add a text view to WebView as the indicator.
6.2.3 Replacing the “null” Origin
Since the “null” origin is meaningless, we replace it with
the origin who creates the “null” origin. To achieve the goal,
we scan the frame tree from bottom to top, and get the root
frame, or the last frame whose origin is not “null”. Then, the
corresponding origin O is extracted for the replacement.
Next, to replace the “null” origin with O in postMessage,
we instrument the associated methods of the class “Web-