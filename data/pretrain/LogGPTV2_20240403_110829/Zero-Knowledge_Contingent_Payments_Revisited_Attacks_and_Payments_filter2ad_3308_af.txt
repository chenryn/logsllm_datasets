### Table 4: Number of Gates in SHA256 Circuit Implementations

| Circuit | Total Gates | AND Gates |
|---------|-------------|------------|
| Bristol Circuit | 236112 | 90825 |
| Our Circuit | 42029 | 103258 |

### Table 3: Stats for Fair Auditing of Publicly Verifiable Proof of Retrievability (PoR) with SNARKs

| Metric | Value |
|--------|-------|
| Key Generation (pk) | 41959 KB |
| Time (ms) | 14041 |
| Proof Verification (sk) | 13 KB |
| Proof Size | 374 bytes |
| Time (ms) | 37 |

### Implementation Details

The PoR is successful if the server can prove to the client that it knows \( s = (m, \sigma) \) such that \( \text{Ver}(PK, m, \sigma) = 1 \), where \( \text{Ver} \) is the verification algorithm of the BLS signature scheme, and \( PK \) is the public key of the client. We used Protocol 1 described in Section 4.2, where \( f(s) = 1 \) if and only if \( s = (m, \sigma) \) and \( \text{Ver}(PK, m, \sigma) = 1 \). We implemented a Zero-Knowledge Succinct Non-Interactive Argument of Knowledge (ZK-SNARK) to enable the server to prove that it knows \( (s, r) \) such that \( y = F_{f, H}(s, r) \). This proof was implemented in C++ using libsnark [11]. The function \( F \) was described in libsnark as a set of constraints called Rank-One Constraint System (R1CS). Implementing the above \( F \), we obtained an R1CS system with 39,409 constraints. In this setting, we used \( \lambda = 80 \) bits of computational security. See Table 3 for the evaluation of running time and bandwidth.

### Key Generation

The timing results in the tables refer to key generation performed by a trusted party.

### 5.3 A More Efficient SHA256 Circuit Implementation

Cryptographic libraries such as SCAPI require users to supply the circuit for the function they want to compute. Building a circuit file in this format is complex, and there is a library of such circuit files made available by researchers at Bristol University [45].

As part of our implementation, we constructed a new, optimized, reusable Boolean circuit for SHA256. Our circuit may be of independent use for circuit-based Multi-Party Computation (MPC) and Fully Homomorphic Encryption (FHE) protocols that require SHA256 computations.

To the best of our knowledge, the only other reusable circuit implementation openly available for SHA256 was developed by the Bristol circuit. See Table 4 for a comparison of the circuit parameters between the Bristol circuit and ours. Our circuit compares favorably both in terms of the total number of gates and the number of AND gates. The latter parameter is particularly important for Secure Multi-Party Computation (MPC) protocols, where the number of AND gates dominates the total evaluation cost due to a technique called Free-XOR [33], which evaluates XOR gates "for free." In the process of building our SHA256 circuit, we developed a library for semi-automated generation of optimized Boolean circuits, which we believe may be of independent interest. Our contribution here is not the optimizations themselves, as they were mostly straightforward from the SHA2 specification, but rather the optimized implementation of SHA2 in a Boolean circuit format that can be reused by other cryptographic libraries and protocols.

### 6. Acknowledgments

We thank Dario Fiore, Hugo Krawczyk, Arvind Narayanan, Pino Persiano, and Eran Tromer, and the anonymous reviewers for useful discussions and advice. Matteo Campanelli is supported by NSF Grant 1545759. Rosario Gennaro is supported by NSF Grant 1565403. Steven Goldfeder is supported by the NSF Graduate Research Fellowship under grant number DGE-1148900 and NSF award CNS-1651938.

### References

[References are listed as provided, with no changes.]

### Appendix: The Shacham/Waters PoR Scheme

A Proof of Retrievability (PoR) scheme involves a client \( C \) who outsources some data, and a server \( S \) who is supposed to store the data in a way that it can prove to a verifier that it is actually storing the clientâ€™s data. In [43], Shacham and Waters presented two compact PoR schemes: one with private verifiability and another with public verifiability. Both schemes are based on erasure-coded files divided into \( n \) blocks \( m_1, \ldots, m_n \in \mathbb{Z}_p \), where \( p \) is a large prime. The erasure coding ensures that the file can be decoded even in the presence of adversarial or random erasures.

#### Privately Verifiable PoR Scheme

To authenticate each block \( m_i \), the client \( C \) chooses a secret key composed of a random \( \alpha \leftarrow \mathbb{Z}_p \) and a PRF key \( k \) for a function \( f \). For each \( i \in [n] \), the client computes \( \sigma_i := f_k(i) + \alpha m_i \in \mathbb{Z}_p \). The pairs \( \{(m_i, \sigma_i)\}_{i \in [n]} \) are stored on the server. The proof of retrievability between the server and the verifier works as follows:

1. The verifier chooses a challenge set \( I \subset [n] \) with \( |I| = \ell \) and coefficients \( \nu_1, \ldots, \nu_\ell \in \mathbb{Z}_p \). The set \( Q := \{(i, \nu_i)\}_{i \in [\ell]} \) is sent to the server.
2. The server sends back a pair \( (\sigma, \mu) \), where:
   \[
   \sigma \leftarrow \sum_{(i, \nu_i) \in Q} \nu_i \cdot \sigma_i \quad \text{and} \quad \mu \leftarrow \sum_{(i, \nu_i) \in Q} \nu_i \cdot m_i
   \]
3. The verifier checks whether the following holds:
   \[
   \sigma = \alpha \cdot \mu + \sum_{(i, \nu_i) \in Q} \nu_i \cdot f_k(i)
   \]

Note that the secret key is necessary to run the verification.

#### Publicly Verifiable PoR Scheme

Let \( e : G \times G \to G_T \) be a bilinear map, and let \( \mathbb{Z}_p \) be the support of \( G \). The client sets a secret key to be \( x \leftarrow \mathbb{Z}_p \) and the public key to be \( (v := g^x, u) \), where \( g \) and \( u \) are generators of \( G \). For each \( i \in [n] \), the client computes:
\[
\sigma_i := H(i)^x \cdot u^{m_i}
\]
The pairs \( \{(m_i, \sigma_i)\}_{i \in [n]} \) are stored on the server. The proof of retrievability between the server and the verifier works as follows:

1. The verifier chooses a challenge set \( I \subset [n] \) with \( |I| = \ell \) and coefficients \( \nu_1, \ldots, \nu_\ell \in \mathbb{Z}_p \). The set \( Q := \{(i, \nu_i)\}_{i \in [\ell]} \) is sent to the server.
2. The server sends back a pair \( (\sigma, \mu) \), where:
   \[
   \sigma \leftarrow \prod_{(i, \nu_i) \in Q} \sigma_i^{\nu_i} \quad \text{and} \quad \mu \leftarrow \sum_{(i, \nu_i) \in Q} \nu_i \cdot m_i
   \]
3. The verifier checks whether the following holds:
   \[
   e(\sigma, g) = e\left(\prod_{(i, \nu_i) \in Q} H(i)^{\nu_i} \cdot u^\mu, v\right)
   \]

Note that the secret key \( x \) is necessary to create the authenticators \( \{\sigma_i\} \). On the other hand, the public element \( v \) is sufficient to perform the verification.