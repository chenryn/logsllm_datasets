### 优化后的文本

#### T3T_SYSTEM_CODE_NDEF
- **定义**：`T3T_SYSTEM_CODE_NDEF` 的值为 `0x12FC`，表示只有 NDEF 卡会被处理，其他原始数据将直接传递给上层。
- **相关漏洞**：CVE-2019-9358

#### NFC-F 卡模拟应用
- **元数据配置**：在编写 NFC-F 主机卡模拟 (HCE) 应用时，需要在 XML 文件中定义以下元数据。
- **校验过程**：在 `com.android.nfc` 进程中，系统代码会进行校验。值得注意的是，只有以 `4XXX` 形式开头的代码才会被放行（某些例外情况除外）。

#### 漏洞分析
- **解析 NDEF 命令**：
  - **期望行为**：希望解析 NDEF 命令。
  - **实际行为**：不进行解析。
  - **涉及组件**：
    - NFC 栈 (C)
    - 验证器 (Java)
    - `frameworks/base/core/java/android/nfc/cardemulation/NfcFCardEmulation.java`

- **自相矛盾的设计**：这种设计使得该漏洞无法被利用。
- **证明漏洞**：为了向 Google 证明此漏洞，我修改了 Java 代码以绕过校验。
- **实验设置**：使用两部设备，一部作为攻击者，另一部作为受害者。

#### CVE-2019-2034
- **评级与修复**：被评为高危，于 2019-04-01 的补丁中修复。
  - **修复链接**：[https://android.googlesource.com/platform/system/nfc/+/14e2f9df79ecb25db9e88843406d738d607101b4](https://android.googlesource.com/platform/system/nfc/+/14e2f9df79ecb25db9e88843406d738d607101b4)
- **问题描述**：典型的长度问题，在数十个类似漏洞中也有发现。
- **协议栈**：发现于 ISO 15693 协议栈。
- **gki 缓冲区运行特点**：
  - **多层结构**：NFC 协议栈包含多个层次，每一层都有自己的头部。
  - **引入 offset 字段**：当需要剥离某一层头部时，只需增加 offset 并减少 len。
  - **优点**：减少了缓冲区拷贝的频率。
  - **访问原语**：`(uint8_t*)(p_hdr + 1) + p_hdr->offset`
- **漏洞细节**：
  - **缺少对零长度的校验**：导致整数下溢。
  - **下溢影响**：帮助绕过进一步校验，进而导致 `p_resp->len` 下溢。
  - **内存破坏**：溢出的 `p_resp` 被赋值给 `rw_data`，然后传递给回调函数，最终调用 `nfa_rw_store_ndef_rx_buf`，使用损坏的长度进行 `memcpy`，导致内存破坏。
- **零长度缓冲区数据可控性**：
  - **初步观察**：看起来长度为零的缓冲区无法传递用户控制的数据。
  - **深入分析**：gki 管理的内存是基于环形缓冲区的，其布局在一定程度上可以预测和控制。

#### PoC
- **代码示例**：
  ```c
  static uint8_t TSND_GET_CC[sizeof(RSP_GET_CC) * 2 + 2] = {0};
  static uint8_t CMD_NDEF_TLV[] = {
      0x22, 0x20, // flag, cmd code
      UID,
      0x01, // block number
  };
  static uint8_t RSP_NDEF_TLV[] = {
      0x00, // flags
      0x03, // I93_ICODE_TLV_TYPE_NDEF
      0xff, 0xff, 0xff, // 16-bit tlv_len
      0x00, 0x00, 0x00, 0x00,
      0xfe, // terminator
      0xff, 0xff
  };
  static uint8_t TSND_NDEF_TLV[sizeof(RSP_NDEF_TLV) * 2 + 2] = {0};
  ```

#### CVE-2019-2099
- **评级与修复**：被评为高危，于 2019-06-01 的补丁中修复。
  - **修复链接**：[https://android.googlesource.com/platform/system/nfc/+/f0236aa9bd07b26d5f85cb5474561f60156f833f](https://android.googlesource.com/platform/system/nfc/+/f0236aa9bd07b26d5f85cb5474561f60156f833f)
- **问题描述**：发现于 `nfa_rw_store_ndef_rx_buf` 函数。
- **协议栈**：多个协议栈需要在 nfa 中存储临时数据，如 CVE-2019-2034 所示。
- **功能描述**：这些协议允许接收分片数据包。`nfa_rw_store_ndef_rx_buf` 负责将收到的部分内容存储到 `nfa_rw_cb.p_ndef_buf` 中，并增加 `nfa_rw_cb.ndef_rd_offset` 的值来反映当前缓冲区的偏移量。
- **漏洞细节**：
  - **缺少验证**：对 `nfa_rw_cb.ndef_rd_offset` 的值没有进行验证。
  - **堆溢出**：持续发送数据而不挂断当前会话，最终会导致堆溢出。

#### PoC
- **代码示例**：
  ```c
  static uint8_t CMD_READ_NDEF[] = {
      0x22, 0x20, // flag, cmd code
      UID,
      0x00, // tag number
  };
  static uint8_t RSP_READ_NDEF[] = {
      0x00, 0x00, // dontknowwhat
      0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 
      0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 
      ...
  };
  static uint8_t TSND_READ_NDEF[sizeof(RSP_READ_NDEF) * 2 + 2] = {0};
  ```

#### 总结
- **NFC 基础 & Android 上的实现**
- **攻击面探讨 & 攻击目标选择**
- **原理、漏洞发掘手段选择、Proxmark 3**
- **实例研究**

#### 思考
- **难以模糊测试**：难以进行模糊测试。
- **难以利用**：难以利用。
- **物理接触**：需要物理接触。
- **跨设备**：涉及多设备。
- **沙箱化保护**：处理代码位于沙箱化的、开启多种保护的进程中。
- **未来研究方向**：
  - HAL
  - SoC
  - Kernel

#### 参考链接
- [1] [https://github.com/Proxmark/proxmark3](https://github.com/Proxmark/proxmark3)
- [2] [https://developer.android.com/guide/topics/connectivity/nfc/hce](https://developer.android.com/guide/topics/connectivity/nfc/hce)
- [3] [https://smartlockpicking.com/](https://smartlockpicking.com/)

#### 致谢
- 感谢 360 Alpha Team 的成员在研究过程中给予的帮助和激励。

#### 演示
- 感谢聆听。

---

通过上述优化，文本变得更加清晰、连贯和专业，便于读者理解和参考。