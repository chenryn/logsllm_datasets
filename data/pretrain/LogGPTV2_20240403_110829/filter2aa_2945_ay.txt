Notice that performing a mathematical operation (such as the increment
operation) on an enumeration variable changes the internal integer value
of the variable. When the variable is written to the console, the
corresponding enumeration value is displayed.
11. Press Enter to close the program and return to the Visual Studio 2017
programming environment.
12. Modify the first statement in the doWork method to initialize the first
variable to Month.December, as shown in bold here:
Click here to view code image
static void doWork()
{
    Month first = Month.December;
    Console.WriteLine(first);
    first++;
    Console.WriteLine(first);
}
13. On the Debug menu, click Start Without Debugging.
Download from finelybook PI:EMAIL
338
Visual Studio 2017 builds and runs the program. This time, the word
December is written to the console, followed by the number 12.
Although you can perform arithmetic on an enumeration, if the results of
the operation are outside the range of values defined for the
enumeration, all the runtime can do is interpret the value of the variable
as the corresponding integer value.
14. Press Enter to close the program and return to the Visual Studio 2017
programming environment.
Working with structures
Chapter 8 illustrated that classes define reference types that are always
created on the heap. In some cases, the class can contain so little data that the
overhead of managing the heap becomes disproportionate. In these cases, it is
better to define the type as a structure. A structure is a value type. Because
structures are stored on the stack, as long as the structure is reasonably small,
the memory management overhead is often reduced.
Like a class, a structure can have its own fields, methods, and (with one
important exception discussed later in this chapter) constructors.
Common structure types
You might not have realized it, but you have already used structures in
previous exercises in this book. For example, tuples are actually
examples of the System.ValueTuple structure. Rather more interestingly,
in C#, the primitive numeric types int, long, and float are aliases for the
structures System.Int32, System.Int64, and System.Single, respectively.
These structures have fields and methods, and you can actually call
methods on variables and literals of these types. For example, all these
structures provide a ToString method that can convert a numeric value
to its string representation. The following statements are all legal in C#:
Click here to view code image
int i = 55;
Console.WriteLine(i.ToString());
Download from finelybook PI:EMAIL
339
Console.WriteLine(55.ToString());
float f = 98.765F;
Console.WriteLine(f.ToString());
Console.WriteLine(98.765F.ToString());
Console.WriteLine((500, 600).ToString());   // (500, 600) is a
constant tuple
You don’t see this use of the ToString method often because the
Console.WriteLine method calls it automatically when it is needed. It is
more common to use some of the static methods exposed by these
structures. For example, in earlier chapters, you used the static int.Parse
method to convert a string to its corresponding integer value. What you
are actually doing is invoking the Parse method of the Int32 structure:
Click here to view code image
string s = "42";
int i = int.Parse(s); // exactly the same as Int32.Parse
These structures also include some useful static fields. For example,
Int32.MaxValue is the maximum value that an int can hold, and
Int32.MinValue is the minimum value that you can store in an int .
The following table shows the primitive types in C# and their
equivalent types in the Microsoft .NET Framework. Notice that the
string and object types are classes (reference types) rather than
structures.
Keyword
Type equivalent
Class or structure
bool
System.Boolean
Structure
byte
System.Byte
Structure
decimal
System.Decimal
Structure
double
System.Double
Structure
float
System.Single
Structure
int
System.Int32
Structure
long
System.Int64
Structure
Download from finelybook PI:EMAIL
340
object
System.Object
Class
sbyte
System.SByte
Structure
short
System.Int16
Structure
string
System.String
Class
uint
System.UInt32
Structure
ulong
System.UInt64
Structure
ushort
System.UInt16
Structure
Declaring a structure
To declare your own structure type, you use the struct keyword followed by
the name of the type and then enclose the body of the structure between
opening and closing braces. Syntactically, the process is similar to declaring a
class. For example, here is a structure named Time that contains three public
int fields named hours, minutes, and seconds:
Click here to view code image
struct Time
{
    public int hours, minutes, seconds;
}
As with classes, making the fields of a structure public is not advisable in
most cases; there is no way to control the values held in public fields. For
example, anyone could set the value of minutes or seconds to a value greater
than 60. A better idea is to make the fields private and provide your structure
with constructors and methods to initialize and manipulate these fields, as
shown in this example:
Click here to view code image
struct Time
{
    private int hours, minutes, seconds;
    ...
    public Time(int hh, int mm, int ss)
    {
Download from finelybook PI:EMAIL
341
        this.hours = hh % 24;
        this.minutes = mm % 60;
        this.seconds = ss % 60;
    }
    public int Hours()
    {
        return this.hours;
    }
}
Note By default, you cannot use many of the common operators on
your own structure types. For example, you cannot use operators such
as the equality operator (==) and the inequality operator (!=) on your
own structure type variables. However, you can use the built-in
Equals() method exposed by all structures to compare structure type
variables, and you can also explicitly declare and implement operators
for your own structure types. The syntax for doing this is covered in
Chapter 21, “Querying in-memory data by using query expressions.”
When you copy a value type variable, you get two copies of the value. In
contrast, when you copy a reference type variable, you get two references to
the same object. In summary, use structures for small data values for which
it’s just as or nearly as efficient to copy the value as it would be to copy an
address. Use classes for more complex data that is too big to copy efficiently.
Tip Use structures to implement simple concepts whose main feature is
their value rather than the functionality that they provide.
Understanding differences between structures and
Download from finelybook PI:EMAIL
342
classes
A structure and a class are syntactically similar, but they have a few
important differences. Let’s look at some of these variances:
You can’t declare a default constructor (a constructor with no
parameters) for a structure. The following example would compile if
Time were a class, but because Time is a structure it does not:
Click here to view code image
struct Time
{
    public Time() { ... } // compile-time error
    ...
}
The reason you can’t declare your own default constructor for a
structure is that the compiler always generates one. In a class, the
compiler generates the default constructor only if you don’t write a
constructor yourself. The compiler-generated default constructor for a
structure always sets the fields to 0, false, or null—just as for a class.
Therefore, you should ensure that a structure value created by the
default constructor behaves logically and makes sense with these default
values. This has some ramifications that you will explore in the next
exercise.
You can initialize fields to different values by providing a nondefault
constructor. However, when you do this, your nondefault constructor
must explicitly initialize all fields in your structure; the default
initialization no longer occurs. If you fail to do this, you’ll get a
compile-time error. For example, although the following example would
compile and silently initialize seconds to 0 if Time were a class, it fails
to compile because Time is a structure:
Click here to view code image
struct Time
{
    private int hours, minutes, seconds;
    ...
    public Time(int hh, int mm)
    {
        this.hours = hh;
        this.minutes = mm;
Download from finelybook PI:EMAIL
343
    } // compile-time error: seconds not initialized
}
In a class, you can initialize instance fields at their point of declaration.
In a structure, you cannot. The following example would compile if
Time were a class, but it causes a compile-time error because Time is a
structure:
Click here to view code image
struct Time
{
    private int hours = 0; // compile-time error
    private int minutes; private int seconds;
    ...
}
The following table summarizes the main differences between a structure
and a class.
Question
Structure
Class
Is this a value type or a reference
type?
A structure is a
value type.
A class is a
reference type.
Do instances live on the stack or
the heap?
Structure
instances are
called values and
live on the stack.
Class instances
are called objects
and live on the
heap.
Can you declare a default
constructor?
No
Yes
If you declare your own
constructor, will the compiler still
generate the default constructor?
Yes
No
If you don’t initialize a field in
your own constructor, will the
compiler automatically initialize it
for you?
No
Yes
Are you allowed to initialize
instance fields at their point of
declaration?
No
Yes
Download from finelybook PI:EMAIL
344
There are other differences between classes and structures concerning
inheritance. These differences are covered in Chapter 12, “Working with
inheritance.”
Declaring structure variables
After you have defined a structure type, you can use it in the same way as
you do any other type. For example, if you have defined the Time structure,
you can create variables, fields, and parameters of type Time, as shown in this
example:
Click here to view code image
struct Time
{
    private int hours, minutes, seconds;
    ...
}
class Example
{
    private Time currentTime;
    public void Method(Time parameter)
    {
        Time localVariable;
        ...
    }
}
Note As with enumerations, you can create a nullable version of a
structure variable by using the ? modifier. You can then assign the null
value to the variable:
Time? currentTime = null;
Understanding structure initialization
Earlier in this chapter, you saw how you could initialize the fields in a
structure by using a constructor. If you call a constructor, the various rules
Download from finelybook PI:EMAIL
345
described earlier guarantee that all the fields in the structure will be
initialized:
Time now = new Time();
The following illustration depicts the state of the fields in this structure:
However, because structures are value types, you can also create structure
variables without calling a constructor, as shown in the following example:
Time now;
This time, the variable is created, but its fields are left in their uninitialized
state. The following illustration depicts the state of the fields in the now
variable. Any attempt to access the values in these fields will result in a
compiler error:
Note that in both cases, the now variable is created on the stack.
If you’ve written your own structure constructor, you can also use that to
initialize a structure variable. As explained earlier in this chapter, a structure
constructor must always explicitly initialize all its fields. For example:
Click here to view code image
struct Time
{
    private int hours, minutes, seconds;
    ...
Download from finelybook PI:EMAIL
346
    public Time(int hh, int mm)
    {
        hours = hh;
        minutes = mm;
        seconds = 0;
    }
}
The following example initializes now by calling a user-defined
constructor:
Time now = new Time(12, 30);
The following illustration shows the effect of this example:
It’s time to put this knowledge into practice. In the following exercise,
you will create and use a structure to represent a date.
Create and use a structure type
1. In the StructsAndEnums project, display the Date.cs file in the Code and
Text Editor window.
2. Replace the TODO comment with a structure named Date inside the
StructsAndEnums namespace.
This structure should contain three private fields: one named year of
type int, one named month of type Month (using the enumeration you
created in the preceding exercise), and one named day of type int. The
Date structure should look exactly as follows:
Click here to view code image
struct Date
{
    private int year;
    private Month month;
    private int day;
}
Download from finelybook PI:EMAIL
347
Consider the default constructor that the compiler will generate for Date.
This constructor sets the year to 0, the month to 0 (the value of January),
and the day to 0. The year value 0 is not valid (because there was no
year 0), and the day value 0 is also not valid (because each month starts
on day 1). One way to fix this problem is to translate the year and day
values by implementing the Date structure so that when the year field
holds the value Y, this value represents the year Y + 1900 (or you can
pick a different century if you prefer), and when the day field holds the
value D, this value represents the day D + 1. The default constructor will
then set the three fields to values that represent the date 1 January 1900.
If you could override the default constructor and write your own, this
would not be an issue because you could then initialize the year and day
fields directly to valid values. You cannot do this, though, so you have
to implement the logic in your structure to translate the compiler-
generated default values into meaningful values for your problem
domain.
However, although you cannot override the default constructor, it is still
good practice to define nondefault constructors to allow a user to
explicitly initialize the fields in a structure to meaningful nondefault
values.
3. Add a public constructor to the Date structure. This constructor should
take three parameters: an int named ccyy for the year, a Month named
mm for the month, and an int named dd for the day. Use these three
parameters to initialize the corresponding fields. A year field with the
value Y represents the year Y + 1900, so you need to initialize the year
field to the value ccyy – 1900. A day field with the value D represents
the day D + 1, so you need to initialize the day field to the value dd – 1.
The Date structure should now look like this (with the constructor
shown in bold):
Click here to view code image
struct Date
{
    private int year;
    private Month month;
    private int day;
    public Date(int ccyy, Month mm, int dd)
Download from finelybook PI:EMAIL
348
    {
        this.year = ccyy - 1900;
        this.month = mm;
        this.day = dd - 1;
    }
}
4. Add a public method named ToString to the Date structure after the
constructor. This method takes no arguments and returns a string
representation of the date. Remember, the value of the year field
represents year + 1900, and the value of the day field represents day + 1.
Note The ToString method is a little different from the methods
you have seen so far. Every type, including structures and classes
that you define, automatically has a ToString method whether or
not you want it. Its default behavior is to convert the data in a
variable to a string representation of that data. Sometimes the
default behavior is meaningful; other times it is less so. For
example, the default behavior of the ToString method generated for
the Date structure simply generates the string
“StructsAndEnums.Date”. To quote Zaphod Beeblebrox in The
Restaurant at the End of the Universe by Douglas Adams (Pan
Macmillan, 1980), this is “shrewd, but dull.” You need to define a
new version of this method that overrides the default behavior by
using the override keyword. Overriding methods are discussed in
more detail in Chapter 12.
The ToString method should look like this:
Click here to view code image
struct Date
{
    ...
    public override string ToString()
    {
        string data = $"{this.month} {this.day + 1} {this.year +
1900}";
Download from finelybook PI:EMAIL
349
        return data;