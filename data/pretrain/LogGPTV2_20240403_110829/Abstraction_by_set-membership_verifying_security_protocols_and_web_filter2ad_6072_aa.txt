title:Abstraction by set-membership: verifying security protocols and web
services with databases
author:Sebastian M&quot;odersheim
Abstraction by Set-Membership
Verifying Security Protocols and Web Services with Databases
Informatics and Mathematical Modelling, Technical University of Denmark, DK-2800 Kongens Lyngby
∗
Sebastian A. Mödersheim
PI:EMAIL
ABSTRACT
The abstraction and over-approximation of protocols and
web services by a set of Horn clauses is a very successful
method in practice.
It has however limitations for proto-
cols and web services that are based on databases of keys,
contracts, or even access rights, where revocation is pos-
sible, so that the set of true facts does not monotonically
grow with state transitions. We extend the scope of these
over-approximation methods by deﬁning a new way of ab-
straction that can handle such databases, and we formally
prove that the abstraction is sound. We realize a translator
from a convenient speciﬁcation language to standard Horn
clauses and use the veriﬁer ProVerif and the theorem prover
SPASS to solve them. We show by a number of examples
that this approach is practically feasible for wide variety of
veriﬁcation problems of security protocols and web services.
Categories and Subject Descriptors
C.2.2 [Network Protocols]: Protocol veriﬁcation; D.2.4
[Software/Program Veriﬁcation]: Formal methods
General Terms
Veriﬁcation
Keywords
Automated veriﬁcation, abstract interpretation, revocation,
web services, APIs
1.
INTRODUCTION
Tools based on over-approximation like ProVerif have been
very successful on the veriﬁcation of security protocols and
∗The author was partially supported by the EU-Project
AVANTSSAR. This paper was written while the author was
working for IBM Research Zurich. The author thanks Luca
Vigan`o, Hanne Riis Nielson, Flemming Nielson, Graham
Steel and the anonymous reviewers for helpful comments.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
web services [7, 11, 10, 21, 6]. In contrast to conventional
model checking approaches like [15, 4, 1], the over-approxi-
mation methods do not consider a state transition system,
but just a set of derivable (state-independent) facts like in-
truder knowledge (and the intruder never forgets). More-
over, the creation of fresh keys and nonces is replaced by a
function of the context in which they are created. For in-
stance if agent a creates a nonce for use with agent b, this
may simply be n(a, b) in every run of the protocol. The main
advantage is that this kind of veriﬁcation works for an un-
bounded number of sessions, while standard model checking
methods consider a bounded number of sessions. In fact, the
entire interleaving problem of model checking does not oc-
cur in the over-approximation approach, and tools thus also
scale better with the number of protocol steps and repeated
parts of the protocol. Another advantage is that models
of this kind can be represented as a set of ﬁrst-order Horn
clauses for which many existing methods can be used oﬀ the
shelf, e.g. the SPASS theorem prover [21, 22].
A disadvantage of the abstractions are false positives, i.e.
attacks that are introduced by the over-approximation. In
the worst case we may thus fail to verify a correct proto-
col. This problem can sometimes be solved by reﬁning the
abstraction. However, if we turn to more complex systems
that consist of several protocols or web services, the abstrac-
tion approaches reach a limitation. The reason is that we
may consider servers that maintain some form of database,
for instance a key-server maintains a set of keys, to which
agents they belong and what their status is, e.g. valid or
revoked/outdated. Another example is a web service for on-
line shopping that maintains a database of orders that have
been processed and their current status. Further, servers
may maintain a database of access rights and access rights
may be revoked. Common between these examples is that
the set of true facts does not monotonically grow with the
executions of the protocols. Such non-monotonic behavior
simply cannot be expressed in the standard (stateless) ap-
proach of abstracting protocols by a set of Horn clauses,
because deduction is monotonic, i.e. adding facts like a re-
vocation can never lead to fewer deductions.
This work tackles this problem with a diﬀerent kind of
abstraction of the fresh data while maintaining the basic
approach of over-approximating the protocol or web service
by a set of ﬁrst-order Horn clauses. As a basis, we consider
a model where each participant can maintain a database
in which freshly generated data like nonces, keys, or order-
numbers can be stored along with their context, e.g. the
owner and status of a key. To deal with such systems in an
351abstraction approach, we deﬁne the abstraction of all created
data by their status and membership in the databases of
the participants. For instance, suppose there are two agents
a and b which each maintain a set of keys that are either
unknown, valid, or revoked; two concrete keys k1 and k2 are
now mapped to the same abstract key k iﬀ they are equal
in the membership of the databases, e.g. a considers both
keys as revoked, and b considers both as valid.
So, as usual in these approaches, the inﬁnite set of data
is mapped to ﬁnitely many equivalence classes or represen-
tatives (if we have ﬁnitely many participants), but here the
abstraction depends on the current state of the databases.
Consider for example that the intruder knows a message
m containing, as a subterm, the abstract key k mentioned
above. Consider further a transition rule that allows one
to revoke a key at agent b, so that in the abstract model,
the key k should be “transformed” into a key k(cid:48) represent-
ing all the keys that are known as revoked to both a and b.
The idea to handle this in the abstraction is to maintain all
previous facts that contain the key k in its old form and to
add also all these facts with k(cid:48) replaced for k. So everything
the intruder knows with a valid key k (in b’s eyes), he also
knows with a revoked key k(cid:48). The intuitive reason why this is
indeed sound is that—thanks to the over-approximation—
every derivation in the abstract model corresponds to an
unlimited number of executions with concrete data that fall
into the same equivalence class.
The transformation of facts that arises from the state-
transition of the database is expressed by a new kind of
rule, so-called term implication rules that have the form
φ → k →→ k(cid:48). This expresses that, if the clauses in φ hold,
then f [k] implies f [k(cid:48)] for every context f [·]. We show that
these rules can be encoded into standard Horn clauses.
Our contributions are both theoretical and practical. First,
we deﬁne the speciﬁcation language AIF, a variant of the
AVISPA Intermediate Format [3] that allows for a declara-
tive speciﬁcation of the un-abstracted transition system with
fresh data and databases. Second, we deﬁne a novel way to
abstract this speciﬁcation into a set of Horn clauses and
term implication rules, a concept that naturally arises from
this kind of speciﬁcation. Third, we show that this abstrac-
tion is sound, i.e. without excluding attacks. Fourth we
show how to encode also the term implication rules as Horn
clauses without excluding or introducing attacks. Fifth, we
implement this translation from AIF to Horn clauses for the
syntax of the tools SPASS and ProVerif, both of which im-
plement state of the art resolution techniques for ﬁrst-order
(Horn) clauses. This allows us to demonstrate with a num-
ber of non-trivial examples that the approach is practically
feasible. The implementation and a library of AIF examples
with detailed descriptions is available [17].
2. AIF AND THE CONCRETE MODEL
This section introduces the language AIF that we use for
specifying security protocols, web services, and their goals
without the abstraction. It is a variant of the AVISPA Inter-
mediate Format[3] inﬂuenced by the needs of our methods
and adding syntactic sugar for convenience.
2.1 A Running Example
Before we give the formal deﬁnition, we ﬁrst introduce
a simple example that we use throughout this paper. For
simplicity, we limit the example to three agents: the honest
user a, the honest server s, and the dishonest intruder i.
The full speciﬁcation considered in section 7 is parametrized
and can be used with any (but ﬁxed) number of honest and
dishonest users (see also [17]).
Each agent has a database of its own that contains all the
information that this agent has to maintain over a longer
time (i.e., that may span several sessions). In our example,
the user keeps a database of all its valid public/private key
pairs that it currently has registered with the server s. We
denote with inv(k) the private key that belongs to public key
k. Thus, all entries of a’s database are of the form (k, inv(k))
and it is suﬃcient to represent the database entries only by
the public key k (omitting inv(k) in the term representation
of the database). We thus write the set condition k ∈ ring(a)
for every key k in the database of a.
The server stores in its database the registered keys along
with their owner and status, which is either valid or revoked.
One could write for instance (k, a, valid ) ∈ db(s) for a key
k that is stored in the database of s as a valid key owned
by a, but we rather use a slightly diﬀerent representation
and write k ∈ db(s, a, valid ). This is equivalent to think-
ing of a server that maintains for each user two databases,
namely the sets of valid and revoked keys. This represen-
tation is helpful for the abstraction below because all sets
contain only data that can be abstracted (public keys in this
example) rather than a mixture of diﬀerent kinds of data.
An AIF speciﬁcation describes a state transition system
by a set of rules. The ﬁrst rule of our example is an ini-
tialization rule that represents an out of band registration
of the key with a server. (Suppose the user physically visits
the organization that owns the server.)
=[PK ]⇒ PK ∈ ring(a) · PK ∈ db(s, a, valid ) · iknows(PK )
This rule can be taken in any state (because there are no con-
ditions left of the arrow) and will ﬁrst create a fresh value
(that never occurred before) that we bind to the variable
PK , intuitively a public key. In the successor state, PK is
both in the databases of a and of the server as a valid key.
We use iknows(m) to denote that the intruder knows m, so in
this case he learns immediately the new public key PK . The
rule can be applied any number of times to register as many
keys as desired. Note that iknows(·) does not have a pre-
deﬁned meaning in AIF, is rather characterized by intruder
deduction rules reﬂecting the standard Dolev-Yao model,
e.g. iknows(M ).iknows(inv(K)) ⇒ signinv(K)(M ) (which can
be applied to any state that contains facts matching what is
left of ⇒).
The second rule of our example is the transmission of a
new key using a registered valid key:
PK ∈ ring(a) · iknows(P K)
=[NPK ]⇒ NPK ∈ ring(a) · iknows(signinv(PK )(new, a, NPK ))
We do not repeat the condition PK ∈ ring(a) on the RHS;
in AIF this means that this condition gets removed by the
transition, i.e. the user a forgets the key P K (which is a bit
unrealistic and only done for the sake of simplicity).
The third rule is the server receiving such a message, reg-
istering the new key and revoking the old key:
iknows(signinv(PK )(new, a, NPK )) · PK ∈ db(s, a, valid )·
NPK /∈ db(s, a, valid ) · NPK /∈ db(s, a, revoked)
⇒ PK ∈ db(s, a, revoked) · NPK ∈ db(s, a, valid )
·iknows(inv(PK ))
352Here, the intruder learns the private key of the revoked key.
To deﬁne a security goal, we give yet a further rule that
produces the fact attack if the intruder ﬁnds out the private
key of a valid public key of a:
iknows(inv(PK )) · PK ∈ db(s, a, valid ) ⇒ attack
2.2 Formal Deﬁnition of AIF
We use a standard term model of messages, the only spe-
cialty is the distinction of constants and variables that will
be abstracted later.
Deﬁnition 1. Messages are represented as terms over a
signature Σ ∪ A and a set V of variables, where Σ is ﬁnite,
V is countable, and A is a countable set of constant symbols
(namely those that are going to be abstracted later). Σ, A,
and V are non-empty and pairwise disjoint. Let VA ⊂ V be a
set of variables that can only be substituted by constants of
A. Let TA = A∪VA denote the set of all abstractable symbols.
By convention, we use upper-case letters for variables and
lower-case letters for constant and function symbols.
Note that this paper will assume a free algebra interpretation
of terms (i.e. two terms are equal iﬀ they are syntactically
equal). We come back later to this issue when we use SPASS
(which does not consider a ﬁxed interpretation).
Deﬁnition 2. Let Σf be a ﬁnite signature (disjoint from
all sets above) of fact symbols. A fact is a term of the form
f (t1, . . . , tn) where f is a fact symbol of arity n and the ti are
messages. A positive (negative) set condition has the form
t ∈ M (t /∈ M ) where t ∈ TA and M is a set expression,
namely a ground message term in which no symbol of TA
occurs.
The syntactic form of set expressions like M in this deﬁnition
enforces that a speciﬁcation can only use a ﬁxed number of
sets that we denote with N . Also, in all formal arguments in
this paper we will thus simply assume these sets are called
s1, . . . , sN , while in AIF speciﬁcations, one we will use more
intuitive terms like ring(a) for the set of keys known by
agent a.
We now come to the core of the AIF speciﬁcations, namely
the state transition rules.
Deﬁnition 3. A state is a ﬁnite set of facts and positive
set conditions. A transition rule r has the form
LF · S+ · S− =[F ]⇒ RF · RS
where LF and RF are sets of facts, S+ and RS are sets of
positive set conditions, S− is a set of negative set conditions,
and F ⊆ VA. We require that
vars(RF·RS·S−) ⊆ F∪vars(LF·S+) and vars(S−)∩F = ∅ .
Moreover, we require that each t ∈ TA that occurs in S+ or
S− also occurs in LF and each t ∈ TA that occurs in RS
also occurs in RF .1
We say S ⇒r S(cid:48) iﬀ there is a grounding substitution σ
(for all variables of r) such that
• (LF · S+)σ ⊆ S,
1This condition ensures that when we remove set conditions
in rules and states in the abstract model below, the elements
(that will carry the set conditions in their abstraction) still
appear in the normal facts.
• S−σ ∩ S = ∅, S(cid:48) = (S \ S+σ) ∪ RF σ ∪ RSσ,
• F σ are fresh constants from A (i.e. they do not occur
in S or any rule r that we consider).
A state S is called reachable using the set of transition rules
R S. Here ⇒R is the union of ⇒r for all r ∈ R
R, iﬀ ∅ ⇒∗
and ·∗ is the reﬂexive transitive closure. (We generally use
the ∅ as the initial state.)
Intuitively, the left-hand side of a rule describes to which
states the rule can be applied, and the right-hand side de-
scribes the changes to the state after the transition.
There is a subtle diﬀerence to AVISPA IF and other set-
rewriting/multi-set rewriting approaches. In AIF, facts are
persistent, i.e. a fact that holds in one state also holds in all
successor states. The only entities that can be removed from
a state during a transitions are the positive set conditions,
namely by a transition rule that has a positive condition
x ∈ si on the left-hand side that is not repeated on the
right-hand side.
The persistence of facts is a restriction with respect to
other approaches, but one that comes without loss of gener-
ality: a non-persistent fact f (t1, . . . , tn) of AVISPA IF can