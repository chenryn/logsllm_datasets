restriction by using Collide+Probe as a cache-based covert channel
to infer secret values accessed by the kernel. With Collide+Probe,
we can observe µTag collisions based on the secret value that is
leaked and, thus, remove the requirement of shared memory, i.e.,
user memory that is directly accessible to the kernel.
To evaluate Collide+Probe as a covert channel for a Spectre-
type attack, we implement a custom kernel module containing a
Spectre-PHT gadget as illustrated as follows:
1 if (index < bounds) { a = LUT[data[index] * 4096]; }
The execution of the presented code snippet can be triggered
with an ioctl command that allows the user to control the in-
dex variable as it is passed as an argument. First, we mistrain the
branch predictor by repeatedly providing an index that is in bounds,
letting the processor follow the branch to access a fixed kernel-
memory location. Then, we access an address that collides with the
kernel address accessed based on a possible byte-value located at
data[index]. By providing an out-of-bounds index, the processor
ASIA CCS ’20, June 1–5, 2020, Taipei, Taiwan
Lipp, et al.
now speculatively accesses a memory location based on the secret
data located at the out-of-bounds index. Using Collide+Probe, we
can now detect if the kernel has accessed the address based on
the assumed secret byte value. By repeating this step for each of
the 256 possible byte values, we can deduce the actual byte as we
observe µTag conflicts. As we cannot ensure that the processor
always misspeculates when providing the out-of-bounds index, we
run this attack multiple times for each byte we want to leak.
We successfully leaked a secret string using Collide+Probe as a
covert channel on an AMD Ryzen Threadripper 1920X. With our
unoptimized version, we are able to leak the secret bytes with a suc-
cess rate of 99.5 % (σ ¯x = 0.19, n = 100) and a leakage rate of 0.66 B/s
(σ ¯x = 0.00043, n = 100). While we leak full byte values in our proof-
of-concept, other gadgets could allow to leak bit-wise, reducing
the overhead of measuring every possible byte value significantly.
In addition, the parameters for the number of mistrainings or the
necessary repetitions of the attack to leak a byte can be further
tweaked to match the processor under attack. To utilize this side
channel, the attacker requires the knowledge of the address of the
kernel-memory that is accessed by the gadget. Thus, on systems
with active kernel ASLR, the attacker first needs to defeat it. How-
ever, as described in Section 5.2, the attacker can use Collide+Probe
to derandomize the kernel as well.
5.4 Attacking AES T-Tables
In this section, we show an attack on an AES [20] T-table imple-
mentation. While cache attacks have already been demonstrated
against T-table implementations [30, 31, 48, 58, 72] and appropriate
countermeasures, e.g., bit-sliced implementations [43, 62], have
been presented, they serve as a good example to demonstrate the
applicability of the side channel and allow to compare it against
other existing cache side-channels. Furthermore, AES T-tables are
still sometimes used in practice. While some implementations fall
back to T-table implementations [21] if the AES-NI instruction
extension [32] is not available, others only offer T-table-based im-
plementations [45, 55]. For evaluation purposes, we used the T-table
implementation of OpenSSL version 1.1.1c.
In this implementation, the SubBytes, ShiftRows, and MixColumns
steps of the AES round transformation are replaced by look-ups to
4 pre-computed T-tables T0, ..., T3. As the MixColumns operation
is omitted in the last round, an additional T-table T4 is necessary.
Each table contains 256 4-byte words, requiring 1 kB of memory.
In our proof-of-concept, we mount the first-round attack by
Osvik et al. [58]. Let ki denote the initial key bytes, pi the plaintext
bytes and xi = pi ⊕ ki for i = 0, . . . , 15 the initial state of AES. The
initial state bytes are used to select elements of the pre-computed
T-tables for the following round. An attacker who controls the
plaintext byte pi and monitors which entries of the T-table are
accessed can deduce the key byte ki = si ⊕ pi. However, with a
cache-line size of 64 B, it is only possible to derive the upper 4 bit
of ki if the T-tables are properly aligned in memory. With second-
round and last-round attacks [58, 73] or disaligned T-tables [72],
the key space can be reduced further.
Figure 5 shows the results of a Collide+Probe and a Load+Reload
attack on the AMD Ryzen Threadripper 1920X on the first key
byte. As the first key byte is set to zero, the diagonal shows a
0x186800
0x186840
0x186880
0x1868c0
0x186900
0x186940
0x186980
0x1869c0
0x186a00
0x186a40
0x186a80
0x186ac0
0x186b00
0x186b40
0x186b80
0x186bc0
s
s
e
r
d
d
A
99
93
94
96
94
91
94
93
95
95
95
93
90
91
96
88
94
100
87
93
90
90
88
98
91
89
94
93
95
87
93
92
94
90
100
93
92
91
95
91
89
96
88
94
92
91
91
93
94
91
92
100
88
95
95
88
89
90
91
91
94
89
90
96
93
93
95
94
100
89
94
91
90
92
95
90
90
88
94
91
93
88
97
90
90
100
88
89
93
91
91
93
91
93
93
97
92
93
95
93
93
86
100
94
91
96
91
92
90
93
94
89
92
91
92
92
88
91
88
99
92
89
92
94
90
94
90
94
92
91
89
94
94
90
93
87
100
90
93
92
96
87
89
95
94
90
93
95
91
95
89
85
89
100
88
96
97
95
97
84
95
92
93
90
87
93
91
94
91
91
100
90
92
95
95
92
92
91
92
91
96
95
82
91
92
90
94
100
94
91
94
98
92
88
95
94
90
94
90
96
89
91
95
92
100
89
92
91
92
93
87
92
88
93
91
93
90
92
93
91
91
100
95
97
93
89
90
90
90
96
87
90
92
92
92
90
93
87
100
94
91
97
89
91
89
91
92
88
88
93
88
88
93
97
90
100
0x186800
0x186840
0x186880
0x1868c0
0x186900
0x186940
0x186980
0x1869c0
0x186a00
0x186a40
0x186a80
0x186ac0
0x186b00
0x186b40
0x186b80
0x186bc0
195
177
181
180
183
180
185
179
170
181
177
176
175