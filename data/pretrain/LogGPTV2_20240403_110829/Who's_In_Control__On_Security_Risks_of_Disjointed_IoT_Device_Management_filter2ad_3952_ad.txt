### Flaws and Google Play App Installations

| Flaw  | Google Play App Installs |
|-------|-------------------------|
| Flaw 1 | 5k+                     |
| Flaw 2 | 10k+                    |
| Flaw 2 | 500k+                   |
| Flaw 2 | 100k+                   |
| Flaw 5 | 5k+                     |
| Flaw 1 | 10k+                    |
| Flaw 1 | 500k+                   |
| Flaw 1 | 500k+                   |
|        | 10,000k+                |
|        | 500k+                   |
|        | 5,000k+                 |
|        | 50k+                    |

### Devices and Their Corresponding Flaws

- **Abode Alarm Hub**
- **Aqara Camera G2H**
- **August Smart Lock Pro Gen3**
- **iHome Plug**
- **ismartgate Garage Controller**
- **Koogeek Plug**
- **LIFX Bulb**
- **Meross Smart Plug Mini**
- **MiHome Lamp**
- **Philips Hue BLE Bulb**
- **Philips Hue BLE Plug**
- **Philips Hue Bridge**
- **Refoss Smart Wi-Fi Garage Door Opener**
- **Yeelight Lightstrip Plus**
- **MiHome**
- **Yeelight**

### Key Points on Flaw 4

- **M** stands for m-DMC, **H** for HomeKit, **Z** for Z-channel, **S** for smart speaker.
- For the five devices with "N/A" fields in the table, once the owner/victim uses HomeKit, the dangling m-DMC becomes unusable by legitimate users. This is because the device manufacturer's mobile apps can no longer discover or bind with the device. This issue may be due to functionality bugs rather than a security design.
- For the same devices, if the owner uses m-DMC, our exploits using HomeKit succeeded as shown in the table.
- The dangling m-DMC on such devices may still be exploited with additional engineering efforts by the adversary. For example, although MiHome Lamp’s m-DMC no longer advertises its service/existence to the local area network after its HomeKit DMC is used (so the MiHome mobile app cannot automatically discover the device), the m-DMC is not closed. We were able to use a crafted program (by modifying the MiHome mobile app’s binding process) to manually connect with the device on its m-DMC, configure, and control it.

### Discussion on Device Events

- Device events (i.e., push notifications shown on mobile phones when an IoT device is operated) are not a reliable solution to address Codema threats.
- Typically, the events are not available (with mainstream vendors such as August, ismartgate, LIFX, Philips, and Google-Home) or do not provide timely support for mitigating Codema threats.
- All Codema flaws enable attackers to gain device control without the owner's awareness. When the control is exercised (e.g., turning off a plug/siren/door), immediate harm could be done to the owner even if events are issued (e.g., turning off the alarm/lock during a midnight break-in).
- For most exploits (18/25) we performed, under the apps’ default setting, no notification events were observed. For the other six exploits, the owner/victim uses HomeKit-DMC that pushes notifications for device operations, and might notice exploits have occurred. However, to receive HomeKit notifications remotely, the owner must configure a separate Apple TV/iPad as a HomeKit hub [42] in her house. This hardware/configuration requirement raises the bar for using notifications as Codema warnings.
- In our study, the only m-DMC app that pushes notifications for device operations is the Refoss app when the Refoss garage door has a status change. However, the notification is post-exploit (after the garage door is already opened by the adversary), and the miscreants could have entered the building leveraging the Codema exploit.

### Attack Feasibility Study

#### Codema Risk and Human Behaviors

- The Codema risk is related to human behaviors: whether the owner of an IoT device leaves open unused DMCs, whether she tends to grant access to the device to a party not fully trusted, and whether she is informed of the risk.
- We present a study that seeks answers to these questions from both the device owner’s perspective (the way she configures and shares the device) and the manufacturer’s perspective (the way its customers have been instructed).

#### User Perspective

- **User Study**: We conducted an on-site user study to investigate two key issues: (1) how a typical user configures and uses her IoT devices with multiple DMCs, and (2) how likely our pre-conditions for each attack in Section 3 can be satisfied in practice.
- **Recruitment**: Under IRB approval, we recruited 24 participants from our organizations based on their IoT experience, education background, etc. Most participants (18/24) have IoT experience, and all have a technical or related education background. Their ages range from 18 to 40, with 8/24 being female and 16/24 being male.
- **Procedure**: Each participant was asked to freely configure and use an IoT device with user manuals provided. After setup, we recorded the DMC(s) configured and the time taken. Participants then completed a questionnaire covering why they did or did not configure/use both DMCs and under what circumstances they would share Wi-Fi and IoT devices with others.
- **Results**:
  - **C1 (All Flaws)**: 20 participants (83.3%) configured only one DMC. Most expected to spend less than 5 minutes configuring a device, suggesting that an ordinary IoT user might not want to take additional time to configure another DMC.
  - **C2 (Flaw 1, 3, 4)**: Most participants are willing to share their Wi-Fi with others, including Airbnb guests, tenants, babysitters, temporary workers, neighbors, and even strangers who seek help. Even after sharing the Wi-Fi, most participants expect that other users should not be able to access their IoT devices unless explicitly granted access.
  - **C3 (Flaw 3, 4)**: Based on recent studies, IoT users are willing to share smart home devices with other people. One of our attacks (Flaw 3) requires the adversary to get temporary permission for editing devices, which is found to be realistic. Participants were willing to grant such access rights to Airbnb guests, tenants, babysitters, and workers.

#### Vendor Perspective

- **Specifications**: Manuals of IoT devices that support multiple DMCs provide instructions for configuring individual DMCs without requiring users to set up all channels. Some manuals miss DMCs their devices support, possibly due to the complexity of the IoT supply chain.
- **Manufacturer Apps**: Inspecting all IoT appliances' companion apps, we discovered significant differences between a device’s Android app and iOS app, which exposes it to Codema risks. None of the Android apps provide interfaces for managing HomeKit, rendering the channel vulnerable to unnoticed exploits.

### Mitigating Codema

#### Goals and Challenges of Protection

- **Root Causes of Codema Risks**: Our user study shows that a user typically does not bother configuring all supported DMCs on her device and tends to leave some DMCs open. As a result, she cannot have full control and visibility over her device.
- **Ideal Solution and Challenges**: An ideal design of multiple-DMC IoT is expected to have the following characteristics: 

  - **Security**: Ensure that unused DMCs do not pose a threat to the device control.
  - **Usability**: Empower the user to conveniently and effectively manage unused DMCs.
  - **Visibility**: Provide assurance that the DMCs that the user does not choose pose no threat to her device control.

By addressing these challenges, we aim to develop a new protection mechanism called CGuard, which enables systematic and practical cross-DMC access control.