I have not thought it out, but there was a (now cleared out) issue about
`np.nditer` not allowing to access the `it.operands` after the `with`
statement is finished. For return operands, accessing it only after finishing
everything doesn't seem unreasonable though.
EDIT: Example code:
    import numpy as np
    def foo(a):
        it = np.nditer([a, None])
        with it:
            for x,y in it:
                y[...] = x * x
        return it.operands[1]
    b = np.arange(2)
    print(foo(b))
is not currently valid.