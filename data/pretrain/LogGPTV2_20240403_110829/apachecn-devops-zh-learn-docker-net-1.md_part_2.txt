![Docker OVS](img/00007.jpeg)
# Unix 域套接字
在单个主机内，UNIX IPC 机制，尤其是 UNIX 域套接字或管道，也可以用于容器之间的通信:
```
$  docker run  --name c1 –v /var/run/foo:/var/run/foo –d –I –t base /bin/bash 
$  docker run  --name c2 –v /var/run/foo:/var/run/foo –d –I –t base /bin/bash
```
`c1`和`c2`上的应用可以通过以下 Unix 套接字地址进行通信:
```
struct  sockaddr_un address;
address.sun_family = AF_UNIX;
snprintf(address.sun_path, UNIX_PATH_MAX, "/var/run/foo/bar" );
```
| 
C1:服务器
 | 
C2:客户中心
 |
| --- | --- |
| 
```
bind(socket_fd, (struct sockaddr *) &address, sizeof(struct sockaddr_un));
listen(socket_fd, 5);
while((connection_fd = accept(socket_fd, (struct sockaddr *) &address, &address_length)) > -1)
nbytes = read(connection_fd, buffer, 256);
```
 | 
```
connect(socket_fd, (struct sockaddr *) &address, sizeof(struct sockaddr_un));
write(socket_fd, buffer, nbytes);
```
 |
# 链接 Docker 容器
在这个部分，我们介绍了链接两个容器的概念。Docker 在容器之间创建了一个隧道，不需要在容器外部暴露任何端口。它使用环境变量作为将信息从父容器传递到子容器的机制之一。
除了环境变量`env`，Docker 还将源容器的主机条目添加到`/etc/hosts`文件中。以下是主机文件的示例:
```
$ docker run -t -i --name c2 --rm --link c1:c1alias training/webapp /bin/bash
root@:/opt/webapp# cat /etc/hosts
172.17.0.1  aed84ee21bde
...
172.17.0.2  c1alaias 6e5cdeb2d300 c1
```
有两个条目:
*   第一个是容器`c2`的条目，它使用 Docker 容器 ID 作为主机名
*   第二个条目`172.17.0.2 c1alaias 6e5cdeb2d300 c1`使用`link`别名引用`c1`容器的 IP 地址
下图显示了两个容器**容器 1** 和**容器 2** 使用 veth 对连接到带有`--icc=true`的`docker0`桥。这意味着这两个容器可以通过桥相互访问:
![Linking Docker containers](img/00008.jpeg)
## 链接
链接为 Docker 提供服务发现。它们允许容器通过使用标志`-link name:alias`发现并安全地相互通信。通过守护标志`-icc=false`，可以禁用容器间通信。此标志设置为`false`，**容器 1** 不能访问**容器 2** ，除非通过链接明确允许。这是保护容器的一个巨大优势。当两个容器链接在一起时，Docker 会在它们之间创建父子关系，如下图所示:
![Links](img/00009.jpeg)
从外面看，是这样的:
```
# start the database
$  sudo docker run -dp 3306:3306 --name todomvcdb \
-v /data/mysql:/var/lib/mysql cpswan/todomvc.mysql 
# start the app server
$  sudo docker run -dp 4567:4567 --name todomvcapp \ 
--link todomvcdb:db cpswan/todomvc.sinatra 
```
从内部看，它是这样的:
```
$  dburl = ''mysql://root:pa55Word@'' + \ ENV[''DB_PORT_3306_TCP_ADDR''] + ''/todomvc''
$  DataMapper.setup(:default, dburl)
```
# Docker 网络有什么新功能？
Docker 联网处于非常初级的阶段，开发者社区有许多有趣的贡献，例如 Pipework、Weave、Clocker 和 Kubernetes。每一个都反映了 Docker 网络的不同方面。我们将在后面的章节中了解它们。Docker，Inc .还建立了一个新的项目，将网络标准化。它叫 **libnetwork** 。
libnetwork 实现了 **容器网络模型** ( **CNM** )，该模型形式化了为容器提供联网所需的步骤，同时提供了一个可用于支持多个网络驱动程序的抽象。CNM 是建立在三个主要组件上的——沙箱、端点和网络。
## 沙盒
沙箱包含容器网络栈的配置。这包括管理容器的接口、路由表和域名系统设置。沙盒的实现可以是 Linux 网络命名空间、FreeBSD 监狱或其他类似的概念。沙箱可能包含来自多个网络的许多端点。
## 终点
端点将沙箱连接到网络。端点的实现可以是 veth 对、开放式虚拟交换机内部端口或类似的东西。一个端点只能属于一个网络，但可能只属于一个沙盒。
## 网络
网络是一组能够直接相互通信的端点。网络的实现可以是 Linux 桥、VLAN 等等。网络由许多端点组成，如下图所示:
![Network](img/00010.jpeg)
# Docker CNM 模型
CNM 在网络和容器之间提供以下合同:
*   同一网络上的所有容器可以自由地相互通信
*   多个网络是在容器之间划分流量的方式，应该得到所有驱动程序的支持
*   每个容器有多个端点是将一个容器连接到多个网络的方式
*   端点被添加到网络沙箱中，为其提供网络连接
我们将在[第 6 章](6.html#190861-2d417e3c905d4b6c9e03acfd1355cc86 "Chapter 6. Next Generation Networking Stack for Docker: libnetwork")、*Docker:libnetwork*的下一代网络栈中讨论如何实现 CNM 的细节。
# 总结
在这一章中，我们了解了 Docker 网络的基本组件，这些组件是从耦合简单的 Docker 抽象和强大的网络组件(如 Linux 桥和 Open vSwitch)发展而来的。
我们学习了如何用各种模式创建 Docker 容器。在默认模式下，端口映射通过使用 iptables NAT 规则提供帮助，允许到达主机的流量到达容器。在本章的后面，我们介绍了容器的基本链接。我们还谈到了下一代 Docker 网络，称为 libnetwork。