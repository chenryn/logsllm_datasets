DOMMessageEvent” and “MessageEvent”. If the source ori-
gin is speciﬁed as “null”, it will be replaced. Then, the security
of web-mobile bridges is enhanced as follows. Take the event
handler onJsAlert(view, url, ...) as the example. We instrument
the event handler’s relevant caller (i.e., “AwJavaScriptDialog-
Manager::RunJavaScriptDialog”) inside WebView. In the
caller, if url is the data scheme URL, it will be replaced by O.
6.2.4 Popup Indicator
To mitigate the WebView UI redressing problem, all associ-
ated key APIs are monitored, such as addView(). When the
WUI rendering order is changing by a sub-frame, an alert will
be offered (implemented in the associated enhanced event
handlers).
6.2.5 Safe Navigation
To avoid traditional navigation problem, we narrow down
the navigation policy that navigation occurs only when two
frames have the same origins. To achieve the goal, we instru-
ment the key method “LocalDOMWindow::open()” to add
the origin checks.
Furthermore, to ﬁx privileged navigation problem, the con-
ﬂict between WebView features and web APIs is handled.
More speciﬁcally, in the key method “RenderFrameHost
Impl::CreateNewWindow”, we add more security restric-
tions. When the setting “SupportMultipleWindows” is false,
USENIX Association
28th USENIX Security Symposium    991
the popup behavior will be ignored.
6.3 Mitigation Evaluation
In our evaluation, we ﬁrst test the usability of our defense
solution, especially about how easy to deploy and apply our
solution in practice. To do that, we select 10 real-world vul-
nerable apps for testing. We ﬁnd our solution can simply
work, if developers involve our own WebView header ﬁles,
including the declarations of new function prototypes (e.g.,
onCreateWindow()), and also provide the conﬁguration ﬁle
with the list of third-party domains. Please note that because
these real apps lack source code, we repackage them to in-
volve necessary ﬁles.
Next, we verify the correctness of our mitigation solution
by testing above ten apps. We test them in stock (vulnerable)
WebView and the WebView that implements our mitigation
solution, respectively. We ﬁnd that 1) there are no errors
introduced by our mitigation solution. Apps work well as
usual; 2) DCV attacks are mitigated.
Then, we measure the overhead to check if our mitigation
solution impacts user experience. We create a vulnerable app
for testing. In the app, we call the WebView API loadUrl() to
run associate HTML/JavaScript code to trigger all vulnerabili-
ties. Meanwhile, all time costs are recorded. Similarly, we run
the app in stock (vulnerable) WebView and the WebView that
implements our mitigation solution. By comparing time costs,
we ﬁnd our mitigation solution only introduces tiny overhead:
2ms on average.
Last, considering the Android version fragmentation issue,
we also test the compatibility of our mitigation solution by
installing our own WebView library and running above the
created app in major Android versions. The result shows our
solution is available in many major popular Android versions
(5.0+), and covers 89.3% of Android devices in use (based on
the Android version distribution data of May 2019 [1]).
7 Related Work
Iframe/popup Security. In web apps, iframes/popups are of-
ten the cause of security issues, such as frame hijacking [11],
clickjacking [43], and double-click clickjacking [23]. In past
years, in the context of regular browsers, iframe/popup be-
haviors and these security issues were well studied. Many
defense solutions were proposed. For example, the HTTP
header “X-Frame-Options” and the frame busting [43] solu-
tion can prevent being framed. In this work, we mainly focus
on the exploration of the abilities of untrusted iframes/pop-
ups. The more related security mechanisms, such as SOP, and
navigation policies, are discussed in Section 2.1. As shown
in Section 1 and 3, existing solutions are circumscribed to
prevent DCV attacks.
WebView security. WebView security has attracted more
and more attention. [17, 30, 33] generically studied WebView
security. [21, 25, 27, 40, 49, 53] explored the security of web-
mobile bridges, and also discovered several extended attacks.
In Section 3.5, we compare DCV attacks with several related
attacks, and show DCV attacks may have a set of advantages.
Several static analysis based approaches [22, 55] were pro-
posed to vet hybrid apps. However, they were limited to an-
alyze iframe/popup behaviors and event handlers (also see
our discussion in Section 4). Several defense solutions were
designed to provide protection for WebView and web-mobile
bridges, such as NoFrak [21], Draco [49], MobileIFC [45],
WIREframe [18], and HybridGuard [38]. NoFrak and Mo-
bileIFC extended SOP into the mobile layer, while other solu-
tions provided security enforcement on web-mobile bridges.
However, as discussed in Section 1 and 3, they were quite
limited to prevent DCV attacks.
In addition, many solutions [13, 41] are also designed to
mitigate the Android UI deception problems [15,20,35]. How-
ever, as discussed in Section 1 and 3.3, they cannot monitor
the state change of WebView UI, and circumscribed to prevent
WUI redressing attacks.
8 Discussion
Research scope. In this work, we mainly focus on Android,
which is currently the most popular mobile OS. However,
there are also other WebView formats in other platforms (e.g.,
WKWebView for iOS). The research on other platforms would
be complementary to our work, and we leave this as our future
work.
False negatives. DCV-Hunter faces false negatives in some
situations. For example, in mobile apps, some URLs loaded in
WebView are encrypted, some URL related data goes through
implicit ﬂows, and some WebView related code is dynami-
cally loaded. Some of these issues can be simply partially
mitigated. For example, apps can be dynamically tested for
collecting and downloading dynamically loaded code. We
leave the improvement of our tool to reduce all false negatives
as our future work.
9 Conclusion
Iframes/popups are often the root cause of several critical
web security issues, and have been well studied in regular
browsers. However, their behaviors are rarely understood and
scrutinized in WebView, which has a totally new working
environment. In this paper, we ﬁll the gap and identify several
fundamental design ﬂaws and vulnerabilities, named differen-
tial context vulnerabilities (DCVs). We ﬁnd that by exploiting
DCVs, an untrusted iframe/popup becomes very dangerous in
Android WebView. We have designed a novel detection tech-
nique, DCV-Hunter, to assess the security impacts of DCVs
on real-world apps. Our measurement on a large number of
popular apps shows that DCVs are prevalent. We have also
presented a multi-level protection solution to mitigate DCVs,
which is shown to be scalable and effective.
992    28th USENIX Security Symposium
USENIX Association
Acknowledgments
We want to thank our shepherd Yinzhi Cao and the anony-
mous reviewers for their valuable comments. This material is
based upon work supported in part by the National Science
Foundation (NSF) under Grant no. 1642129 and 1700544.
Any opinions, ﬁndings, and conclusions or recommendations
expressed in this material are those of the authors and do not
necessarily reﬂect the views of NSF. We also thank Cong
Zheng and Yuchen Zhou for the helpful discussions about our
threat model and the design of DCV-Hunter.
References
[1] Android version distribution dashboard. https://
developer.android.com/about/dashboards.
[2] Dcv-attacks. https://sites.google.com/view/
dcv-attacks.
[3] Easyprivacy tracking protection list.
https:
//easylist.to/tag/tracking-protection-
lists.html.
[4] iframe - html standard.
https://html.spec.
whatwg.org/dev/iframe-embed-object.html#
attr-iframe-sandbox.
[5] Mcafee mobile threat report. https://www.mcafee.
com/us/resources/reports/rp-mobile-
threat-report-2016.pdf.
[6] Same origin policy. https://en.wikipedia.org/
wiki/Same-origin_policy.
[7] Selenium - web browser automation. https://www.
seleniumhq.org.
[8] Web messaging standard.
https://html.spec.
whatwg.org/multipage/web-messaging.html.
[9] Webview client.
https://developer.
android.com/reference/android/webkit/
WebViewClient.html.
[10] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel,
J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel. Flow-
droid: Precise context, ﬂow, ﬁeld, object-sensitive and
lifecycle-aware taint analysis for android apps. In PLDI,
2014.
[11] A. Barth, C. Jackson, and J. C. Mitchell. Securing frame
communication in browsers. In USENIX Security, 2009.
[12] A. B. Bhavani. Cross-site Scripting Attacks on Android
WebView. IJCSN International Journal of Computer
Science and Network, 2(2):1–5, 2013.
[13] A. Bianchi, J. Corbetta, L. Invernizzi, Y. Fratantonio,
C. Kruegel, and G. Vigna. What the app is that? decep-
tion and countermeasures in the android user interface.
In IEEE Symposium on Security and Privacy, 2015.
[14] T. Bujlow, V. Carela-Español, J. Solé-Pareta, and
P. Barlet-Ros. A survey on web tracking: Mechanisms,
implications, and defenses. Proceedings of the IEEE,
2017.
[15] Q. A. Chen, Z. Qian, and Z. M. Mao. Peeking into your
app without actually seeing it: Ui state inference and
novel android attacks. In USENIX Security, 2014.
[16] E. Chin and D. Wagner. Bifocals: Analyzing webview
vulnerabilities in android applications. In International
Workshop on Information Security Applications, 2013.
[17] E. Chin and D. Wagner. Bifocals: Analyzing webview
vulnerabilities in android applications. In WISA. 2013.
[18] D. Davidson, Y. Chen, F. George, L. Lu, and S. Jha.
Secure integration of web content and applications on
commodity mobile operating systems. In ASIA CCS,
2017.
[19] L. De Moura and N. Bjørner. Z3: An efﬁcient smt
solver. In Proceedings of the Theory and Practice of
Software, 14th International Conference on Tools and
Algorithms for the Construction and Analysis of Systems,
TACAS/ETAPS, pages 337–340. Springer-Verlag, 2008.
[20] Y. Fratantonio, C. Qian, S. P. Chung, and W. Lee. Cloak
and dagger: from two permissions to complete control
of the ui feedback loop. In IEEE Symposium on Security
and Privacy, 2017.
[21] M. Georgiev, S. Jana, and V. Shmatikov. Breaking and
ﬁxing origin-based access control in hybrid web/mobile
application frameworks. In NDSS, 2014.
[22] B. Hassanshahi, Y. Jia, R. H. C. Yap, P. Saxena, and
Z. Liang. Web-to-application injection attacks on an-
In ESORICS,
droid: Characterization and detection.
2015.
[23] L. Huang, A. Moshchuk, H. J. Wang, S. Schecter, and
In
C. Jackson. Clickjacking: Attacks and defenses.
USENIX Security, 2012.
[24] InfoSecurity. Public wiﬁ hotspots ripe for mitm attacks.
https://www.infosecurity-magazine.com/
news/public-wifi-hotspots-ripe-for-mitm-
attacks/.
[25] X. Jin, X. Hu, K. Ying, W. Du, H. Yin, and G. N. Peri.
Code injection attacks on html5-based mobile apps:
In CCS,
Characterization, detection and mitigation.
2014.
[26] A. Lerner, T. Kohno, and F. Roesner. Rewriting history:
Changing the archived web from the present. CCS,
2017.
[27] T. Li, X. Wang, M. Zha, K. Chen, X. Wang, L. Xing,
X. Bai, N. Zhang, and X. Han. Unleashing the walking
dead: Understanding cross-app remote infections on
mobile webviews. In CCS, 2017.
[28] Z. Li, K. Zhang, Y. Xie, F. Yu, and X. Wang. Knowing
your enemy: Understanding and detecting malicious
web advertising. In CCS, 2012.
USENIX Association
28th USENIX Security Symposium    993
[29] M. Luo, O. Starov, N. Honarmand, and N. Nikiforakis.
Hindsight: Understanding the evolution of ui vulnerabil-
ities in mobile browsers. CCS, 2017.
[30] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin. Attacks
on webview in the android system. In ACSAC, 2011.
[31] T. Luo, X. Jin, A. Ananthanarayanan, and W. Du. Touch-
jacking attacks on web in android, iOS, and windows
phone. In Foundations and Practice of Security. 2013.
[32] J. R. Mayer and J. C. Mitchell. Third-party web tracking:
Policy and technology. In IEEE Symposium on Security
and Privacy, 2012.
[33] P. Mutchler, A. DoupÃ, J. Mitchell, C. Kruegel, G. Vi-
gna, A. Doup, J. Mitchell, C. Kruegel, and G. Vigna.
A Large-Scale Study of Mobile Web App Security. In
MoST, 2015.
[34] M. Neugschwandtner, M. Lindorfer, and C. Platzer. A
view to a kill: Webview exploitation. In LEET, 2013.
[35] M. Niemietz and J. Schwenk. Ui redressing attacks on
android devices. Black Hat, 2012.
[36] N. Nikiforakis, L.
Invernizzi, A. Kapravelos,
S. Van Acker, W. Joosen, C. Kruegel, F. Piessens, and
G. Vigna. You are what you include: Large-scale
evaluation of remote javascript inclusions. CCS, 2012.
[37] X. Pan, Y. Cao, and Y. Chen. I do not know what you
visited last summer - protecting users from third-party
web tracking with trackingfree browser. In NDSS, 2015.
[38] P. H. Phung, A. Mohanty, R. Rachapalli, and M. Sridhar.
Hybridguard: A principal-based permission and ﬁne-
grained policy enforcement framework for web-based
mobile applications. In MoST, 2017.
[39] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Mon-
rose. All your iframes point to us. Usenix Security,
2008.
[40] V. Rastogi, R. Shao, Y. Chen, X. Pan, S. Zou, and R. Ri-
ley. Are these Ads Safe: Detecting Hidden Attacks
through the Mobile App-Web Interfaces. NDSS, 2016.
[41] C. Ren, Y. Zhang, H. Xue, T. Wei, and P. Liu. Towards
discovering and understanding task hijacking in android.
In USENIX Security, 2015.
[42] F. Roesner, T. Kohno, and D. Wetherall. Detecting and
defending against third-party tracking on the web. In
NSDI), 2012.
[43] G. Rydstedt, E. Bursztein, D. Boneh, and C. Jackson.
Busting frame busting: a study of clickjacking vulner-
abilities at popular sites.
Security and Privacy, 2010.
In IEEE Oakland Web 2.0
[44] P. Saxena, S. Hanna, P. Poosankam, and D. Song. Flax:
Systematic discovery of client-side validation vulnera-
bilities in rich web applications. In NDSS, 2010.
[45] K. Singh. Practical context-aware permission control
for hybrid mobile applications. In RAID. 2013.
[46] D. F. Somé, N. Bielova, and T. Rezk. Control what you
include! - server-side protection against third party web
tracking. In Engineering Secure Software and Systems,
2017.
[47] S. Son and V. Shmatikov. The postman always rings
twice: Attacking and defending postmessage in html5
websites. In NDSS, 2013.
[48] K. Tian, Z. Li, K. D Bowers, and D. Yao. Framehanger:
Evaluating and classifying iframe injection at large scale.
In SecureComm, 2018.
[49] G. S. Tuncay, S. Demetriou, and C. A. Gunter. Draco:
A system for uniform and ﬁne-grained access control
for web code on android. In CCS, 2016.
[50] R. Wang, L. Xing, X. Wang, and S. Chen. Unautho-
rized origin crossing on mobile platforms: Threats and
mitigation. In CCS, 2013.
[51] T. Wei, Y. Zhang, H. Xue, M. Zheng, C. Ren, and
D. Song. Sidewinder targeted attack against android
in the golden age of ad libraries. In Black Hat. 2014.
[52] M. Weissbacher, W. Robertson, E. Kirda, C. Kruegel,
and G. Vigna. Zigzag: Automatically hardening web
applications against client-side validation vulnerabilities.
In USENIX Security, 2015.
[53] G. Yang, J. Huang, and G. Gu. Automated generation
of event-oriented exploits in android hybrid apps. In
NDSS, 2018.
[54] G. Yang, J. Huang, G. Gu, and A. Mendoza. Study and
mitigation of origin stripping vulnerabilities in hybrid-
postmessage enabled mobile applications. In IEEE Sym-
posium on Security and Privacy, 2018.
[55] G. Yang, A. Mendoza, J. Zhang, and G. Gu. Precisely
and scalably vetting javascript bridge in android hybrid
apps. In RAID, 2017.
[56] A. Zarras, A. Kapravelos, G. Stringhini, T. Holz,
C. Kruegel, and G. Vigna. The dark alleys of madi-
son avenue: Understanding malicious advertisements.
In IMC, 2014.
994    28th USENIX Security Symposium
USENIX Association