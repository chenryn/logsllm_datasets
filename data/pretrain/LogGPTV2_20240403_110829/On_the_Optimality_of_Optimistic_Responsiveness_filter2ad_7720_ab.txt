Definition 5 (Byzantine Broadcast). A Byzantine broadcast proto-
col provides the following three guarantees.
• Agreement. If two honest replicas commit values b and b′ respec-
tively, then b = b′.
• Termination. All honest replicas eventually commit.
• Validity. If the designated sender is honest, then all honest replicas
commit on the value it proposes.
3 A LOWER BOUND ON THE LATENCY OF
OPTIMISTIC RESPONSIVENESS
An optimistically responsive synchronous protocol has two commit
rules – an optimistic commit rule and a synchronous commit rule.
This section presents a lower bound that captures the relationship
between the latencies of the two commit rules. Essentially, it says
that if the optimistic commit rule is too fast, then the synchronous
commit rule has to be correspondingly slower. Specifically, the sum
of the latencies of the two commit rules should be at least 2∆ time.
In a bit more detail, suppose that there exists a protocol with
an optimistic commit rule tolerating max(1, n − 2f ) faults with
a commit latency of  3n/4 honest
replicas along with an honest leader, then the system can commit
in time O(δ) (in an optimistically responsive manner).
Why does our protocol perform better than protocols in the
slow-path–fast-path paradigm? The general strategy employed
in the protocols with back-and-forth slow-path–fast-path paradigm
is to start in one of the two paths, say, the slow path. When the
optimistic conditions are met, an explicit switch is performed to
move to the fast path. Similarly, when a lack of progress is detected
in the fast path, the protocol makes another switch to the slow path.
The explicit switch between the paths incurs a latency of at least ∆
in all of these protocols.
Under minority Byzantine faults, the adversary can attack the
above strategy to worsen the commit latency compared to a protocol
with a single slow path. For example, when the protocol is in slow
path, the adversary responds promptly and the replicas receive
> 3n/4 responses thereby triggering a switch to fast path. Once in
the fast path, the adversary stops responding and prevents progress.
This forces an explicit switch to the slow path again. Under this
attack, a single decision can incur a latency of 4∆ if the replicas are
in the fast path and then switch to the slow path to commit. In the
fast path, replicas never commit if the adversary does not respond.
Our protocol avoids this concern by avoiding an explicit switch.
Instead, both paths are active simultaneously. As a result, when
the leader is honest, the commit latency is 2δ during optimistic
executions and 2∆ otherwise.
View-based execution. Like PBFT [5], our protocol progresses
through a series of numbered views with each view coordinated by
a distinct leader. Views are represented by non-negative integers
with 0 being the first view. The leader of the current view v is
determined by (v mod n). Within each view, also called the steady
state, the leader is expected to propose values and keep making
progress by committing client requests at increasing heights. An
honest replica participates in any one view at a time and moves
to a higher numbered view when the current view fails to make
progress. If the replicas detect equivocation or lack of progress in
a view, they initiate a view-change by blaming the current leader.
When a quorum of replicas have blamed the current leader, they
perform a view-change and replace the faulty leader.
Blocks and block format. Client requests are batched into blocks.
Each block references its predecessor with the exception of the
genesis block which has no predecessor. We call a block’s position
in the chain as its height. A block Bk at height k has the format,
Bk := (bk , H(Bk−1)) where bk denotes a proposed value at height k,
Bk−1 is the block at height k − 1 and H(Bk−1) is the hash digest of
Bk−1. The predecessor for the genesis block is ⊥. A block Bk is said
to be valid if (1) its predecessor block is valid, or if k = 1, predecessor
is ⊥, and (2) client requests in the block meet application-level
validity conditions and are consistent with its chain of requests in
ancestor blocks.
Block extension and equivocation. A block Bk extends a block
Bl (k ≥ l) if Bl is an ancestor of Bk. Note that a block Bk extends
itself. Two blocks Bk and B′
k′ proposed in the same view equivocate
one another if they are not equal to and do not extend one another.
Block certificates. A block certificate represents a set of signatures
on a block by a quorum of replicas. Given a ratio 0 ≤ α < 1, a block
Bk and a view v we denote by Cα
v (Bk) a set of ⌊αn⌋ + 1 signatures
from different replicas on block Bk signed in view v. In this section,
we will use synchronous certificate where α = 1/2, and responsive
certificate where α = 3/4. Whenever the distinction between the
two is not important, we will represent the certificates by Cv(Bk)
v′ (Bk′),C1/2
v (Bk) is not ⊥.
v (Bℓ)) and CC′ = (C3/4
and ignore the superscript α. In the next section, we will also use
full certificates which require all n replicas to sign.
Chain certificates. We use the notion of chain certificates to com-
pare different chains when replicas receive many of them. Most
earlier protocols (e.g., HotStuff [27] or Sync HotStuff [2]) compared
certified chains using just the views and heights. However, in our
protocol, there are two types of certificates, a responsive certificate
and a synchronous certificate, and hence, comparing them is subtle.
As we will see, the rank of a chain will be completely determined by
the block with the highest synchronous certificate from the largest
view and the block’s ancestors’ highest responsive certificate in this
view. A chain certificate comprises of a pair of certificates C3/4
v (Bk)
and C1/2
v (Bℓ). Each element in the pair is either a block certificate
or ⊥ such that (i) if either of them are not ⊥, both certificates are
from the same view, (ii) if not ⊥’s, the first certificate has threshold
3/4, the second has threshold 1/2, and (iii) block Bℓ extends block
Bk, if C3/4
Ranking chain certificates. Given two chain certificates CC =
(C3/4
v (Bk),C1/2
v′ (Bℓ′)), they are
first ranked by views, i.e., CC < CC′ if v < v′. While moving
from view v to any higher view, our protocol ensures that if a
certified block Bk is committed in view v, then all honest replicas
lock on a chain certificate that extends Bk. Hence, a certificate chain
produced in a higher view will always include Bk. Said another
way, a certificate chain CC′ in a higher view will extend Bk; if it
does not, it must be the case that Bk was not committed by any
honest replica in view v. Thus, it is safe to extend CC′.
For chain certificates in the same view v, they are first ranked
based on the height of the responsive certificate, i.e., CC < CC′ if
k < k′. In our protocol, we ensure that if there exists a responsive
certificate for a block Bk′ in view v, i.e., C3/4
v (Bk′) exists, there
cannot exist a responsive certificate for a conflicting block at any
height in view v. Thus, if there is a responsive certificate for Bk in
view v, then Bk′ must extend Bk. Moreover, we also ensure that if
C3/4
v (Bk) exists, no replica will have synchronously committed on
an equivocating block Bℓ with certificate Cv(Bℓ). Thus, any equiv-
ocating chain with chain certificate CC will not contain committed
blocks that are not extended by CC′.
Finally, if both chain certificates are in the same view v and have
a common responsive certificate in the view (or both do not have
a responsive certificate), the chain certificates are ranked by the
heights of synchronous certificates, i.e., CC < CC′ if ℓ < ℓ′. Our
protocol ensures that if Bk is committed synchronously in view v,
then there does not exist an equivocating certified block. Thus, if
equivocating C1/2
v (Bℓ′) exist, both Bℓ and Bℓ′ could
not have been committed. To ease the rule in the case where they