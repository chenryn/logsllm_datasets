### Compiling the C Code

To compile our C code, we use GCC (GNU Compiler Collection), which is included by default in Ubuntu. The command for compilation is as follows:

```sh
georgia@ubuntu:~$ gcc -g -fno-stack-protector -z execstack -o overflowtest overflowtest.c
```

- The `-g` option instructs GCC to include extra debugging information, which is useful when using GDB (the GNU Debugger).
- The `-fno-stack-protector` flag disables GCC's stack protection mechanism, which would otherwise prevent buffer overflows.
- The `-z execstack` option makes the stack executable, thereby disabling another buffer overflow prevention method.
- The `-o overflowtest` option specifies the output file name as `overflowtest`.

### Running the Program

The `main` function of the program takes the first command-line argument and passes it to `function1`, which then copies the value into a five-character local variable. Let's run the program with the command-line argument `AAAA`:

```sh
georgia@ubuntu:~$ ./overflowtest AAAA
Executed normally
```

- We use four `A`s instead of five because a string in C is null-terminated. Using five `A`s would already cause a buffer overflow, albeit by just one character.

As expected, the program runs normally:
- `main` calls `function1`.
- `function1` copies `AAAA` into the buffer.
- `function1` returns execution to `main`.
- `main` prints "Executed normally" before exiting.

### Causing a Crash

Now, let's try giving the program a longer string of `A`s as an argument:

```sh
georgia@ubuntu:~$ ./overflowtest AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Segmentation fault
```

This time, the program crashes with a segmentation fault. The issue lies with the `strcpy` function used in `function1`. `strcpy` copies one string into another without performing any bounds checking. If the source string is too long, it will overwrite adjacent memory addresses on the stack.

### Memory Overwrite and Segmentation Fault

- If the string copied into the buffer is 100 characters long, the extra 95 characters will overwrite data at adjacent memory addresses.
- This can potentially overwrite the rest of `function1`'s stack frame and even higher memory.
- The return address for `main` is stored on the stack. If the buffer overflow is large enough, it will overwrite the return address, causing the CPU to attempt to execute instructions from an invalid memory address (e.g., `41414141` in hexadecimal).

### Debugging with GDB

To see what's happening in memory, we can use GDB. First, open the program in GDB:

```sh
georgia@ubuntu:~$ gdb overflowtest
(gdb)
```

Set breakpoints to pause execution at specific points in the program:

```gdb
(gdb) break 14
Breakpoint 1 at 0x8048433: file overflowtest.c, line 14.
(gdb) break 10
Breakpoint 2 at 0x804840e: file overflowtest.c, line 10.
(gdb) break 11
Breakpoint 3 at 0x8048420: file overflowtest.c, line 11.
(gdb)
```

Run the program with four `A`s and examine the memory:

```gdb
(gdb) run AAAA
Starting program: /home/georgia/overflowtest AAAA
Breakpoint 1, main (argc=2, argv=0xbffff5e4) at overflowtest.c:14
14 function(argv[1]);
```

Use the `x` command to display memory contents in hexadecimal format:

```gdb
(gdb) x/16xw $esp
0xbffff540: 0xb7ff0f50 0xbffff560 0xbffff5b8 0xb7e8c685
0xbffff550: 0x08048470 0x08048340 0xbffff5b8 0xb7e8c685
0xbffff560: 0x00000002 0xbffff5e4 0xbffff5f0 0xb7fe2b38
0xbffff570: 0x00000001 0x00000001 0x00000000 0x08048249
```

Continue to the next breakpoint and examine the memory again:

```gdb
(gdb) continue
Continuing.
Breakpoint 2, function (str=0xbffff74c "AAAA") at overflowtest.c:10
10 strcpy(buffer, str);
(gdb) x/16xw $esp
0xbffff520: 0xb7f93849 0x08049ff4 0xbffff538 0x080482e8
0xbffff530: 0xb7fcfff4 0x08049ff4 0xbffff548 0x08048443
0xbffff540: 0xbffff74f 0xbffff560 0xbffff5b8 0xb7e8c685
0xbffff550: 0x08048470 0x08048340 0xbffff5b8 0xb7e8c685
```

Finally, continue to the third breakpoint and examine the memory:

```gdb
(gdb) continue
Continuing.
Breakpoint 3, function (str=0xbffff74c "AAAA") at overflowtest.c:11
11 }
(gdb) x/16xw $esp
0xbffff520: 0xbffff533 0xbffff74c 0xbffff538 0x080482e8
0xbffff530: 0x41fcfff4 0x00414141 0xbffff500 0x08048443
0xbffff540: 0xbffff74c 0xbffff560 0xbffff5b8 0xb7e8c685
0xbffff550: 0x08048470 0x08048340 0xbffff5b8 0xb7e8c685
```

### Crashing the Program in GDB

Now, let's run the program with a longer string to cause a buffer overflow:

```gdb
(gdb) run $(perl -e 'print "A" x 30')
Starting program: /home/georgia/overflowtest $(perl -e 'print "A" x 30')
Breakpoint 1, main (argc=2, argv=0xbffff5c4) at overflowtest.c:14
14 function(argv[1]);
(gdb) x/16xw $esp
0xbffff520: 0xb7ff0f50 0xbffff540 0xbffff598 0xb7e8c685
0xbffff530: 0x08048470 0x08048340 0xbffff598 0xb7e8c685
0xbffff540: 0x00000002 0xbffff5c4 0xbffff5d0 0xb7fe2b38
0xbffff550: 0x00000001 0x00000001 0x00000000 0x08048249
(gdb) x/1xw $ebp
0xbffff528: 0xbffff598
(gdb) continue
Continuing.
Segmentation fault
```

- The Perl command generates a string of 30 `A`s, which is passed as an argument to the program.
- When `strcpy` attempts to copy this long string into the five-character buffer, it overwrites the return address, leading to a segmentation fault.

### Summary

- The program compiles and runs normally with a short string.
- A longer string causes a buffer overflow, overwriting the return address and leading to a segmentation fault.
- GDB is used to debug and inspect the memory to understand the behavior of the program during the buffer overflow.