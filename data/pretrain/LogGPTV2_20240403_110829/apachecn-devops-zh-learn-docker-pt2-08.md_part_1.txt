# 八、编排容器
在前面的章节中，我们为容器联网的需求、如何在 Docker 容器内运行服务以及如何通过开放网络端口和其他先决条件向外部世界公开该服务奠定了坚实的基础。然而，最近出现了一些先进的机制，一些第三方编排平台进入市场，明智地在分布式和不同功能的容器之间建立动态和决定性的联系，以便为全面而紧凑地包含以流程为中心、多层和企业级的分布式应用构建强大的容器。在这个极其多样化但又相互联系的世界里，编排的概念不能长期远离其应有的突出地位。这一章专门用来解释容器编排的本质，它的直接作用是挑选离散的容器来系统地组成复杂的容器，这些容器更直接地与变化的业务期望和权宜之计保持一致。
在本章中，我们将详细讨论以下主题:
*   链接容器
*   编排容器
*   使用`docker-compose`工具编排容器
由于任务关键型应用绝大多数是通过松散耦合但高度内聚的组件/服务构建的，这些组件/服务注定要在地理上分布的信息技术基础设施和平台上运行，组合的概念正受到越来越多的关注和吸引。为了维持良好开端的容器化之旅，容器的编排被规定为接下来的即时、自适应和智能信息技术时代最关键和至关重要的要求之一。有一些经过验证且有前途的方法和符合标准的工具可以实现神秘的编排目标。
## Docker 内置服务发现
Docker 平台固有地支持使用嵌入式**域名服务** ( **域名系统**)对连接到任何用户定义网络的容器进行服务发现。自版本`1.10`以来，该功能已被添加到 Docker 中。嵌入式域名系统功能使 Docker 容器能够在用户定义的网络中使用它们的名称或别名发现彼此。换句话说，来自容器的名称解析请求首先被发送到嵌入式 DNS。然后，用户定义的网络为嵌入式域名系统使用一个特殊的`127.0.0.11` IP 地址，该地址也在`/etc/resolv.conf`中列出。
以下示例将有助于更好地理解 Docker 的内置服务发现功能:
1.  让我们首先使用以下命令创建一个用户定义的网桥网络`mybridge`:
```
      $ sudo docker network create mybridge
```
2.  检查新创建的网络，了解子网范围和网关 IP:
```
 $ sudo docker network inspect mybridge
 [
 {
 "Name": "mybridge",
 "Id": "36e5e088543895f6d335eb92299ee8e118cd0610e0d023f7c42e6e603b935e17",
 "Created": 
 "2017-02-12T14:56:48.553408611Z",
 "Scope": "local",
 "Driver": "bridge",
 "EnableIPv6": false,
 "IPAM": {
 "Driver": "default",
 "Options": {},
 "Config": [
 {
 "Subnet": "172.18.0.0/16",
 "Gateway": "172.18.0.1"
 }
 ]
 },
 "Internal": false,
 "Attachable": false,
 "Containers": {},
 "Options": {},
 "Labels": {}
 }
 ]
```
这里，分配给`mybridge`网络的子网是`172.18.0.0/16`，网关是`172.18.0.1`。
3.  现在，让我们通过将其连接到`mybridge`网络来创建一个容器，如下所示:
```
      $ sudo docker container run \
 -itd --net mybridge --name testdns ubuntu  
```
4.  继续列出分配给容器的 IP 地址，如下图所示:
```
 $ sudo docker container inspect --format \
 '{{.NetworkSettings.Networks.mybridge.IPAddress}}' \
 testdns 
 172.18.0.2
```
显然，`testdns`容器被分配了一个`172.18.0.2` IP 地址。`172.18.0.2`的 IP 地址来自`mybridge`网络的子网(即`172.18.0.0/16`)。
5.  获得容器的 IP 地址后，我们使用`docker container exec`子命令查看容器的`/etc/resolv.conf`文件的内容，如下所示:
```
 $ sudo docker container exec testdns \
 cat /etc/resolv.conf 
 nameserver 127.0.0.11
 options ndots:0
```
这里`nameserver`配置为`127.0.0.11`，是嵌入式 DNS 的 IP 地址。
6.  作为最后一步，让我们使用`busybox`映像 ping`testdns`容器。我们在这里选择了`busybox`映像，因为`ubuntu`映像发货时没有`ping`命令:
```
 $ sudo docker container run --rm --net mybridge \ 
 busybox ping -c 2 testdns
 PING testdns (172.18.0.2): 56 data bytes
 64 bytes from 172.18.0.2: seq=0 ttl=64 
 time=0.085 ms
 64 bytes from 172.18.0.2: seq=1 ttl=64 
 time=0.133 ms
 --- testdns ping statistics ---
 2 packets transmitted, 2 packets received, 
 0% packet loss
 round-trip min/avg/max = 0.085/0.109/0.133 ms
```
太棒了，不是吗！Docker 背后的人已经把它变得如此简单，以至于我们不费力就能在同一个网络中发现容器。
## 链接容器
在引入用户定义网络的概念之前，容器链接主要用于容器间的发现和通信。也就是说，协作容器可以链接在一起，以提供复杂的业务感知服务。链接的容器具有一种源-接收者关系，其中源容器链接到接收者容器，并且接收者安全地从源容器接收各种信息。但是，源容器对它所链接的收件人一无所知。在安全设置中链接容器的另一个值得注意的特征是，链接的容器可以使用安全隧道进行通信，而无需向外部世界公开用于设置的端口。尽管您会发现许多部署使用容器链接技术，但是它们配置起来既麻烦又耗时。此外，它们容易出错。因此，嵌入式域名系统的新方法比传统的容器链接技术更受青睐。
Docker 引擎在`docker run`子命令中提供了`--link`选项，将源容器链接到接收容器。
`--link`选项的格式如下:
```
--link :
```
这里，``是源容器的名称，``是接收容器看到的名称。容器的名称在 Docker 主机中必须是唯一的，而别名对于收件人容器是非常特定和本地的，因此，别名在 Docker 主机中不必是唯一的。这为在接收者容器中实现和合并具有固定源别名的功能提供了很大的灵活性。
当两个容器链接在一起时，Docker 引擎会自动将一些环境变量导出到接收容器。这些环境变量有明确定义的命名约定，其中变量总是以别名的大写形式作为前缀。例如，如果`src`是给源容器的别名，那么导出的环境变量将以`SRC_`开始。Docker 导出三类环境变量，如下所示:
*   `NAME`:这是第一类环境变量。这些变量采用`_NAME`的形式，它们携带接收者容器的层次名称作为它们的值。例如，如果源容器的别名是`src`，而接收容器的名称是`rec`，那么环境变量及其值将是`SRC_NAME=/rec/src`。
*   `ENV`:这是第二类环境变量，用于通过`docker run`子命令的`-e`选项或`Dockerfile`的`ENV`指令导出源容器中配置的环境变量。这种类型的环境变量采用`_ENV_`的形式。例如，如果源容器的别名是`src`，变量名是`SAMPLE`，那么环境变量就是`SRC_ENV_SAMPLE`。
*   `PORT`:这是最后一类，也是第三类环境变量，用于将源容器的连接细节导出到接收方。Docker 通过`docker run`子命令的`-p`选项或`Dockerfile`的`EXPOSE`指令为源容器公开的每个端口创建一组变量。
这些变量采用`_PORT__`形式。此表单用于将源的 IP 地址、端口和协议共享为一个 URL。例如，如果源容器的别名是`src`，暴露的端口是`8080`，协议是`tcp`，IP 地址是`172.17.0.2`，那么环境变量及其值将是`SRC_PORT_8080_TCP=tcp://172.17.0.2:8080`。该网址进一步分为以下三个环境变量:
*   `_PORT___ADDR`:此表单携带 URL 的 IP 地址部分(例如`SRC_PORT_8080_TCP_ADDR= 172.17.0.2`)
*   `_PORT___PORT`:此表单携带 URL 的端口部分(例如`SRC_PORT_8080_TCP_PORT=8080`)
*   `_PORT___PROTO`:此表单携带 URL 的协议部分(例如`SRC_PORT_8080_TCP_PROTO=tcp`)
除了前面的环境变量之外，Docker Engine 还导出了该类别中的一个变量，即`_PORT`形式的变量，其值将是源容器所有公开端口中最低数量的 URL。例如，如果源容器的别名为`src`，暴露的端口号为`7070`、`8080`和`80`，协议为`tcp`，IP 地址为`172.17.0.2`，则环境变量及其值为`SRC_PORT=tcp://172.17.0.2:80`。
Docker 以结构良好的格式导出这些自动生成的环境变量，以便可以通过编程轻松发现它们。因此，对于接收者容器来说，发现关于源容器的信息变得非常容易。此外，Docker 会自动更新源 IP 地址及其别名，作为收件人的`/etc/hosts`文件中的条目。
在本章中，我们将通过一系列实用的例子深入探讨 Docker Engine 为容器链接提供的上述特性。
首先，让我们选择一个简单的容器链接示例。在这里，我们将向您展示如何在两个容器之间建立链接，并将一些基本信息从源容器传输到接收容器，如以下步骤所示:
1.  我们首先启动一个交互式容器，它可以用作链接的源容器，使用以下命令:
```
      $ sudo docker run --rm --name example -it \
 busybox:latest
```
使用`--name`选项将容器命名为`example`。此外，`--rm`选项用于在您离开容器时清理容器。
2.  使用`cat`命令显示源容器的`/etc/hosts`条目:
```
 / # cat /etc/hosts
 172.17.0.3 a02895551686
 127.0.0.1 localhost
 ::1 localhost ip6-localhost ip6-loopback
 fe00::0 ip6-localnet
 ff00::0 ip6-mcastprefix
 ff02::1 ip6-allnodes
 ff02::2 ip6-allrouters
```
这里，`/etc/hosts`文件中的第一个条目是源容器的 IP 地址(`172.17.0.3`)及其主机名(`a02895551686`)。
3.  我们将继续使用`env`命令显示源容器的环境变量:
```
 / # env
 HOSTNAME=a02895551686
 SHLVL=1
 HOME=/root
 TERM=xterm
 PATH=
 /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
 PWD=/
```
4.  我们现在已经启动了源容器。从同一个 Docker 主机的另一个终端，让我们通过使用`docker run`子命令的`--link`选项将其链接到我们的源容器来启动交互式接收者容器，如下所示:
```
      $ sudo docker run --rm --link example:ex \ 
 -it busybox:latest 