extend and divide the existing one into two disjoint sets, each
assigned to one of the Association Models. For instance, one
may only allow 5 Latin letters for the PE-passkey and only
6 digits for the NC-value. While this may conserve or even
reduce the guessing probability, we argue that this proposal
is harder to amend. The implementation requires a signiﬁcant
change in protocol and device interfaces and affects backward
compatibility signiﬁcantly.
C. Applicability to BT Classic
While we have discussed our attack with a focus on BLE,
we anticipated that it is also applicable to BC.
The commonly accepted secure methods of pairing in BC
are Secure Simple Pairing (SSP) and Secure Connections (SC).
SC is a mode of SSP that enforces higher requirements on the
cryptographic primitives used. SSP itself is virtually equivalent
to LESC with three exceptions:
• SSP uses the P-192 EC as default [1, Vol. 1 Part A 5.3];
only if operating in SC-only mode it uses P-256 (as LESC
always does).
• SSP uses E0 [25] as encryption; only in SC-only mode
it uses AES-CCM [26] (as LESC always does).
• SSP does not support KeyboardDisplay as IOCap.
Otherwise, the Bluetooth speciﬁcation states that the four
Association Models of SSP are functionally equivalent to the
ones of LESC [1, Vol. 1 Part A 5.4.1]. We were made aware
that KeyboardDisplay is not available in BC by the Bluetooth
SIG during the disclosure process. Consequently, our attack
matrix for BC is altered as displayed in Fig. 10. We argue,
therefore,
that our results are transferable between LESC,
SSP, and consequently SC. The comments we received from
the Bluetooth SIG during the disclosure process support this
assumption (Section X).
IX. RELATED WORK
To better contextualize how our attack relates to other attack
schemes, we now present the most relevant ones that were
discussed in prior work.
A. Ofﬂine PIN Crushing in Bluetooth Legacy Pairing
Jakobsson and Wetzel [3] describe how the legacy method
is vulnerable to ofﬂine brute-
of BC’s key establishment
force attacks on the used PIN. Essentially, an attacker may
capture the communication of the key-generation material and
the subsequent authentication handshake. This information is
solely protected by the shared symmetric secret (i.e., the PIN).
The issue roots in the fact that the PIN is the only non-
public information and is also limited in entropy (typically 6
digits). The attacker is, therefore, able to exhaust all possible
PINs; by re-simulating the captured processes for each PIN.
The attacker can terminate when the simulated authentication
handshake was successful. This way, the used PIN can be
found and the long-term secret can be calculated.
This attack was later reﬁned by K¨ugler [27], who exploited
the radio implementation of Bluetooth in combination with the
aforementioned bruteforce attack to establish a MitM position
between the victim devices.
BLE legacy pairing relies on similar methods to exchange
the cryptographic key material and, therefore, suffers from
similar vulnerabilities. Ryan [28] describes how these issues
can be exploited in BLE by a passive attacker.
B. Passkey Entry Reuse Attack
PE is sometimes implemented with a device-speciﬁc but
ﬁxed passkey. This passkey is chosen randomly by the man-
ufacturer and then printed on or stored in the device’s ROM.
Through that, the manufacturer aims to support the PE method
on devices without display or with weak entropy sources.
This way of pairing disregards the Bluetooth SIG’s advice
to not re-use PINs. The attacks proposed by Lindell [4] and
reﬁned by Barnickel et al. [29] target these devices.
An attacker eavesdropping during the Authentication stage
(cf. Section II-A3) may learn P KI , P KR and Cai, Cbi, N ai,
and N bi (where i is the i-th bit of the passkey). Therefore,
an attacker only needs to perform one hashing operation per
passkey-bit to determine if a conﬁrm message Cai / Cbi was
created with rai / rbi set to 0 or 1. The whole passkey can be
recovered in 20 hashing operations. The attacker then inter-
cepts and aborts the pairing process after the Authentication
stage has ended. If the same passkey is now re-used, the
attacker just acts as MitM, pairing both devices as MitM using
the now known passkey.
C. Just Works MitM Attack
In practice, many devices performing SSP, SC or LESC
are not requesting MitM protection during pairing (cf. Section
II-C). This is often the case if devices do not have the
physical interfaces to facilitate MitM-protected pairing modes.
Examples for such devices are In-Ear-Bluetooth headphones or
screenless ﬁtness trackers. According to the Association Model
agreement process, JW is performed in these cases. Therefore,
there is no protection against an active MitM attacker provided.
An attacker may completely take over the communication
with both parties and implement
its PKs into the pairing
process. Examples of such attacks can be found in the work
of Hypponen and Haataja [5].
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:14 UTC from IEEE Xplore.  Restrictions apply. 
1343
InitiatorDisplayYesNoKeyboardOnlyAttacknotapplicableNumericonPasskeyDisplayYesNoPasskeyonNumericAttacknotapplicableResponderKeyboardOnlyD. Downgrade Attacks
The exchange of IOCaps described in Section II-A1 is
vulnerable to interception and tampering. This is due to the
lack of authenticity between the two parties at this point of
pairing. In consequence, an attacker can act as MitM falsifying
the IOCap and, thus, downgrade the authentication method to
JW [5]. Subsequently, an attacker may continue the attack as
described in the previous Section IX-C. However, the MitM-
bit protects against such an attack. We want to point out that
the Method Confusion Attack is fundamentally different from
a downgrade attack. Different from our proposal, downgrade
attacks do not succeed if the MitM-bit is set.
E. Fixed Coordinate Invalid Curve Attack
Biham and Neumann [6] show that all SSP (and as they
argue SC, LESC) pairing methods are vulnerable to a so-called
Fixed Coordinate Invalid Curve Attack. The attack abuses
that only the x-component of the PKs is validated during the
Authentication stage. Therefore, the attacker can manipulate
the y-value during the PK exchange. This way reducing the
possible ECDH keyspace to two possible keys, which can then
be guessed. The Bluetooth SIG addressed this vulnerability
by amending the speciﬁcation [30]. It now requires devices to
validate whether the PKs lie on the ECDH-curve.
F. Attacks not Targeting the Pairing
While the attacks described in this section focus on the
Bluetooth pairing process, there are also other attack vectors.
For example, the KNOB attack [7] focuses on breaking the
encryption itself by downgrading the entropy of a connection.
Fawaz et al. [31] found that many BLE devices do not
properly implement privacy-preserving features, such as device
address randomization. This allows adversaries to track users
through advertisement messages of their BLE devices. The
authors developed BLE-Guardian, which hides the presence
of selected devices from an attacker.
Further, it is a conundrum that Bluetooth applications are
challenging to implement correctly. This is mainly due to the
huge size and complexity of the speciﬁcation. Multiple attacks
resulting from implementation mistakes were uncovered by
careful analysis like [32] and [33].
X. RESPONSIBLE DISCLOSURE PROCESS
We reached out to the Bluetooth SIG as well as to Google
and Apple; the two vendors with the largest market share for
mobile operating systems. We received immediate responses
from all parties and were also contacted by CERT/CC which
takes part
in coordinating the efforts. Google and Apple
informed us that they take the issue very seriously and are
working on a solution, but gave no concrete details. The
Bluetooth SIG pointed out
that certain limitations of our
attack exist for BC. Those comments were incorporated into
this paper’s revision. Otherwise, the SIG acknowledged our
ﬁndings, i.e., the vulnerability of BLE, and agreed that the
same weakness should also apply to BC. They did not approve
to incorporate our proposed ﬁxes into the speciﬁcation:
‘The Bluetooth SIG and the working group concur
with your paper’s ﬁndings that the proposed method
does expose the end-user to a viable man-in-the-
middle attack, however the recommended changes
to mitigate this attack vector at the protocol level
were not approved.’ [excerpt from email 12.3.2020]
They justiﬁed this decision through the lack in backward com-
patibility of our proposed ﬁxes. Instead, the SIG announced
the decision to reach out to their members about the issue with
the help of CERT/CC mid to late March 2020.
XI. CONCLUSION
We demonstrated a novel attack on the BLE pairing in
BT version 5.2. The attack utilizes a method we call Method
Confusion to gain a MitM position between two paired Blue-
tooth devices. It abuses a critical design ﬂaw that – upon our
disclosure – was acknowledged by the Bluetooth SIG (see
Section X).
The attack’s applicability was veriﬁed by adopting a com-
monly used BLE driver into our framework BThack, capable
of performing the MitM attack. Using this, we attacked
multiple smartphones, a smartwatch, and a banking device.
All attacks succeeded and we expect many other devices
to be vulnerable. To verify the real-world impact of the
attack, we also designed an end-to-end PoC that includes an
advertisement jammer.
Furthermore, we evaluated if users are able to notice the
attack by performing a user study with 40 participants. None
of the participants noticed the attack and 92.5% faithfully
completed the pairing leading to a MitM position.
We proposed multiple ﬁxes to this problem. Some of them
can be realized in a backward-compatible fashion. Others
require a change to the speciﬁcation.
Bluetooth is a major wireless communication standard and
especially the number of BLE devices continues to increase
rapidly. Many devices such as point-of-sale terminals and
smartwatches require the protection promised by BLE. Our
ﬁndings enable an attacker to steal and manipulate data and
target otherwise protected APIs of such devices.
We hope that our work contributes to an increase in Blue-
tooth’s security, so that device vendors can continue using it
as a trusted building block for their products.
AVAILABILITY
We intend to publish BThack and our PoC implementa-
tion of the Method Confusion Attack on https://github.com/
maxdos64/BThack.
ACKNOWLEDGMENTS
We would like to thank Matthias Ringwald from Blue-
Kitchen GmbH for granting us permission to use BTstack.
Further, we want to thank Jiska Classen and Constantin Runge
for their constructive feedback on our research, and Yan
Shoshitaishvili and Selcuk Uluagac for shepherding our work.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:14 UTC from IEEE Xplore.  Restrictions apply. 
1344
REFERENCES
[1] Bluetooth Core Speciﬁcation 5.2, Bluetooth Speciﬁcation
Contributors, December 2019.
[2] Bluetooth SIG,
“Bluetooth market update 2019,”
https://3pl46c46ctx02p7rzdsvsg21-wpengine.netdna-
ssl.com/wp-content/uploads/2018/04/2019-Bluetooth-
Market-Update.pdf, 2019.
[3] M. Jakobsson and S. Wetzel, “Security weaknesses in
Bluetooth,” in Cryptographers’ Track at the RSA Con-
ference. Springer, 2001, pp. 176–191.
[4] A. Y. Lindell, “Attacks on the pairing protocol of Blue-
tooth v2.1,” Black Hat USA, Las Vegas, Nevada, 2008.
[5] K. Hypponen and K. Haataja, ““Nino” man-in-the-
middle attack on Bluetooth secure simple pairing,” in
2007 3rd IEEE/IFIP International Conference in Central
Asia on Internet, 2007, pp. 1–5.
[6] E. Biham and L. Neumann, “Breaking the Bluetooth
pairing–ﬁxed coordinate invalid curve attack,” Technion–
Israel Institute of Technology, Tech. Rep., 2018. [Online].
http://www.cs.technion.ac.il/∼biham/BT/bt-
Available:
ﬁxed-coordinate-invalid-curve-attack.pdf
[7] D. Antonioli, N. O. Tippenhauer, and K. B. Rasmussen,
“The KNOB is broken: Exploiting low entropy in the
encryption key negotiation of Bluetooth BR/EDR,” in
28th USENIX Security Symposium (USENIX Security
19), Aug. 2019, pp. 1047–1061.
[8] Bluekitchen GmbH, “Btstack.” [Online]. Available:
http://bluekitchen-gmbh.com/btstack/
[9] R. Cayre, V. Nicomette, G. Auriol, E. Alata,
M. Kaˆaniche, and G. Marconato, “Mirage: Towards
a Metasploit-like framework for IoT,” in 2019 IEEE
30th International Symposium on Software Reliability
Engineering
2019.
[Online]. Available:
https://hal.laas.fr/hal-02346074
(ISSRE),
[10] R. Cayre and B. contributers, “Btlejack ﬁrmware,” https:
//github.com/RCayre/btlejack-ﬁrmware, 2019.
[11] nRF51 Series Reference Manual Version 3.0.1, Nordic
Semiconductor, December 2016.
[13] A. K. Das, P. H. Pathak, C.-N. Chuah,
[12] T. Issoufaly and P. U. Tournoux, “BLEB: Bluetooth Low
Energy botnet for large scale individual tracking,” in
2017 1st International Conference on Next Generation
Computing Applications (NextComp), 2017, pp. 115–120.
and
P. Mohapatra, “Uncovering privacy leakage in BLE
network trafﬁc of wearable ﬁtness trackers,” in 17th
International Workshop on Mobile Computing Systems
and Applications, 2016, p. 99–104. [Online]. Available:
https://doi.org/10.1145/2873587.2873594
[14] B. Cyr, W. Horn, D. Miao,
wearable
and M. Specter,
ﬁtness
of
[Online]. Available:
of
analysis
Massachusetts
(ﬁtbit),”
vol.
“Security
devices
Technology,
https://media.kasperskycontenthub.com/wp-content/
uploads/sites/43/2015/03/20082016/17-cyrbritt-
webbhorn-specter-dmiao-hacking-ﬁtbit.pdf
Institute
2014.
1,
[15] T. Szigeti and C. Hattingh, “Quality of service design
overview,” Cisco, San Jose, CA, Dec, pp. 1–34, 2004.
[16] S. Schechter, “Common pitfalls in writing about security
and privacy human subjects experiments, and how to
avoid them,” https://www.microsoft.com/en-us/research/
wp-content/uploads/2016/02/commonpitfalls.pdf, 2013,
Microsoft Research Technical Report.
[17] K. J. Kuipers and S. J. Hysom, “Chapter 7 – Common
problems and solutions in experiments,” in Laboratory
Experiments in the Social Sciences (Second Edition),
M. Webster and J. Sell, Eds. Academic Press, 2014,
pp. 145 – 177.
[18] Guide to Bluetooth Security, National Institute of Stan-
dards and Technology (NIST), 5 2017, revision 2.
[19] Bluetooth SIG,
“Launch
studio,”
last
31,
April
//launchstudio.bluetooth.com/Listings/Search
[Online].
2020.
Available:
accessed:
https:
[20] IDC, “Shipments of wearable devices reach 118.9