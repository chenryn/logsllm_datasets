with projects in the trusted platform management space.
Terra [16] and vTPM [4] both use virtual machines as
the mechanism for enabling trusted computing. The ar-
chitecture of multiple segregated guest operating systems
running on top of a virtual machine manager is similar to
the Android design of multiple segregated users running
on top of a common OS. However, these approaches both
focus on establishing the user’s trust in the environment
rather than trust between applications running within the
system.
6.5 Web security
Many of the problems of provenance and application
separation addressed in Quire are directly related to
the challenge of enforcing the same origin policy from
within the web browser. Google’s Chrome browser [3,
31] presents one solution where origin content is segre-
gated into distinct processes. Microsoft’s Gazelle [36]
project
takes this idea a step further and builds up
hardware-isolated protection domains in order to protect
principals from one another. MashupOS [19] goes even
further and builds OS level mechanisms for separating
principals while still allowing for mashups.
All of these approaches are more interested in protect-
ing principals from each other than in building up the
communication mechanism between principals. Quire
gets application separation for free by virtue of Android’s
process model, and focuses on the expanding the capa-
bilities of the communication mechanism used between
applications on the phone and the outside world.
6.6 Remote procedure calls
For an overview of some of the challenges and threats
surrounding authenticated RPC, see Weigold et al. [37].
There are many other systems which would allow for se-
cure remote procedure calls from mobile devices. Ker-
beros [22] is one solution, but it involves placing too
much trust in the ticket granting server (the phone man-
ufacturers or network providers, in our case). Another
potential is OAuth [17], where services delegate rights to
one another, perhaps even within the phone. This seems
unlikely to work in practice, although individual Quire
applications could have OAuth relationships with exter-
nal services and could provide services internally to other
applications on the phone.
with one another and with the rest of the Web. Exten-
sions to Quire could also form a substrate for building
a new generation of browsers with smaller trusted com-
puting bases, where the elements that compose a web
page are separated from one another. This contrasts with
Chrome [31], where each web page runs as a monolithic
entity. Our Quire work could lead to infrastructure sim-
ilar, in some respects, to Gazelle [36], which separates
the principals running in a given web page, but lacks our
proposed provenance system or sharing mechanisms.
An interesting challenge is to harmonize the diﬀer-
ences between web pages, which increasingly operate as
applications with long-term state and the need for ad-
ditional security privileges, and applications (on smart-
phones or on desktop computers), where the principle
of least privilege [32] is seemingly violated by running
every application with the full privileges of the user,
whether or not this is necessary or desirable.
7 Future work
8 Conclusion
We see Quire as a platform for conducting a variety of
interesting security research around smartphones.
Usable and secure UI design. The IPC extensions
Quire introduces to the Android operating system can
be used as a building block in the design and imple-
mentation of a secure user interface. We have already
demonstrated how the system can eﬃciently sign every
UI event, allowing for these events to be shared and dele-
gated safely. This existing application could be extended
to attest to the full state of the screen when a security crit-
ical action, such as an OAuth accept/deny dialog, occurs
and prevent UI spooﬁng attacks.
Secure login. Any opportunity to eliminate the need
for username/password dialogs from the experience of a
smartphone user would appear to be a huge win, particu-
larly because it’s much harder for phones to display tra-
ditional trusted path signals, such as modiﬁcations to the
chrome of a web browser. Instead, we can leverage the
low-level client-authenticated RPC channels to achieve
high-level single-sign-on goals. Our PayBuddy applica-
tion demonstrated the possibility of building single-sign-
on systems within Quire. Extending this to work with
multiple CAs or to integrate with OpenID / OAuth ser-
vices would seem to be a fruitful avenue to pursue.
Web browsers. While Quire is targeted at the needs of
smartphone applications, there is a clear relationship be-
tween these and the needs of web applications in modern
browsers. Extensions to Quire could have ramiﬁcations
on how code plugins (native code or otherwise) interact
In this paper we presented Quire, a set of extensions to
the Android operating system that enable applications to
propagate call chain context to downstream callees and
to authenticate the origin of data that they receive in-
directly. These extensions allow applications to defend
themselves against confused deputy attacks on their pub-
lic interfaces and enable mutually untrusting apps to ver-
ify the authenticity of incoming requests with the OS.
When remote communication is needed, our RPC sub-
system allows the operating system to embed attestations
about message origins and the IPC call chain into the re-
quest. This allows remote servers to make policy deci-
sions based on these attestation.
We implemented the Quire design as a backwards-
compatible extension to the Android operating system
that allows existing Android applications to co-exist with
applications that make use of Quire’s services.
We evaluated our implementation of the Quire design
by measuring our modiﬁcations to Android’s Binder IPC
system with a series of microbenchmarks. We also im-
plemented two applications which use these extensions
to provide click fraud prevention and in-app micropay-
ments.
We see Quire as a ﬁrst step towards enabling more se-
cure mobile operating systems and applications. With the
Quire security primitives in place we can begin building
a more secure UI system and improving login on mobile
devices.
References
[1] M. Abadi, M. Burrows, B. Lampson, and G. D. Plotkin. A
calculus for access control in distributed systems. ACM
Transactions on Programming Languages and Systems,
15(4):706–734, Sept. 1993.
[2] A. Barth, C. Jackson, and J. C. Mitchell. Robust defenses
for cross-site request forgery. In 15th ACM Conference
on Computer and Communications Security (CCS ’08),
Alexandria, VA, Oct. 2008.
[3] A. Barth, C. Jackson, and C. Reis.
The secu-
rity architecture of the Chromium browser.
Techni-
cal Report, http://www.adambarth.com/papers/2008/barth-
jackson-reis.pdf, 2008.
[4] S. Berger, R. Cáceres, K. A. Goldman, R. Perez, R. Sailer,
and L. van Doorn. vTPM: virtualizing the trusted plat-
form module. In 15th Usenix Security Symposium, Van-
couver, B.C., Aug. 2006.
[5] D. F. C. Brewer and M. J. Nash. The Chinese wall secu-
rity policy. In Proceedings of the 1989 IEEE Symposium
on Security and Privacy, pages 206–214, Oakland, Cali-
fornia, May 1989.
[6] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, and A.-
R. Sadeghi. XManDroid: A new Android evolution
to mitigate privilege escalation attacks. Technical Re-
port TR-2011-04, Technische Universität Darmstadt, Apr.
2011. http://www.trust.informatik.tu-darmstadt.de/ﬁleadmin/
user_upload/Group_TRUST/PubsPDF/xmandroid.pdf.
[7] M. Castro and B. Liskov. Practical Byzantine fault toler-
ance and proactive recovery. ACM Transactions on Com-
puter Systems (TOCS), 20(4):398–461, 2002.
[8] D. Chaum and E. Van Heyst. Group signatures.
In
Proceedings of the 10th Annual International Conference
on Theory and Application of Cryptographic Techniques
(EUROCRYPT ‘91), pages 257–265, Berlin, Heidelberg,
1991.
[9] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. An-
alyzing inter-application communication in Android. In
Proceedings of the 9th International Conference on Mo-
bile Systems, Applications, and Services (MobiSys 2011),
June 2011.
[10] M. Conti, V. T. N. Nguyen, and B. Crispo. CRePE:
Context-related policy enforcement for Android. In Pro-
ceedings of the Thirteen Information Security Conference
(ISC ’10), Boca Raton, FL, Oct. 2010.
[11] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy.
Privilege Escalation Attacks on Android. In Proceedings
of the 13th Information Security Conference (ISC ’10),
Oct. 2010.
[12] L. Desmet, W. Joosen, F. Massacci, P. Philippaerts,
F. Piessens, I. Siahaan, and D. Vanoverberghe. Security-
by-contract on the .NET platform. Information Security
Technical Report, 13(1):25–32, 2008.
[13] W. Enck, P. Gilbert, C. Byung-gon, L. P. Cox, J. Jung,
P. McDaniel, and S. A. N. TaintDroid: An information-
ﬂow tracking system for realtime privacy monitoring on
smartphones. In Proceeding of the 9th USENIX Sympo-
sium on Operating Systems Design and Implementation
(OSDI ’10), pages 393–408, 2010.
[14] W. Enck, M. Ongtang, and P. McDaniel. On lightweight
mobile phone application certiﬁcation. In 16th ACM Con-
ference on Computer and Communications Security (CCS
’09), Chicago, IL, Nov. 2009.
[15] A. P. Felt, H. J. Wang, A. Moshchuck, S. Hanna, and
E. Chin. Permission re-delegation: Attacks and defenses.
In 20th Usenix Security Symposium, San Fansisco, CA,
Aug. 2011.
[16] T. Garﬁnkel, B. Pfaﬀ, J. Chow, M. Rosenblum, and
D. Boneh. Terra: A virtual machine-based platform for
In Proceedings of the 19th Sympo-
trusted computing.
sium on Operating System Principles (SOSP ’03), Bolton
Landing, NY, Oct. 2003.
[17] E. Hammer-Lahav, D. Recordon, and D. Hardt. The
http://tools.ietf.org/html/draft-ietf-
OAuth 2.0 Protocol.
oauth-v2-10, 2010.
[18] N. Hardy. The confused deputy. ACM Operating Systems
Review, 22(4):36–38, Oct. 1988.
[19] J. Howell, C. Jackson, H. J. Wang, and X. Fan. Mashu-
pOS: Operating system abstractions for client mashups.
In Proceedings of the 11th USENIX Workshop on Hot
Topics in Operating Systems (HotOS ’07), pages 1–7,
2007.
[20] S. Ioannidis, S. M. Bellovin, and J. Smith. Sub-operating
In
systems: A new approach to application security.
SIGOPS European Workshop, Sept. 2002.
[21] B. Kaliski and M. Robshaw. Message authentication with
md5. CryptoBytes, 1:5–8, 1995.
[22] J. T. Kohl and C. Neuman. The Kerberos network authen-
http://www.ietf.org/rfc/rfc1510.txt,
tication service (V5).
Sept. 1993.
[23] M. Migliavacca, I. Papagiannis, D. M. Eyers, B. Shand,
J. Bacon, and P. Pietzuch. DEFCON: high-performance
event processing with information security. In Proceed-
ings of the 2010 USENIX Annual Technical Conference,
Boston, MA, June 2010.
[24] A. C. Myers. JFlow: Practical mostly-static information
ﬂow control. In Proceedings of the 26th ACM SIGPLAN-
SIGACT Symposium on Principles of Programming Lan-
guages (POPL ’99), pages 228–241, 1999.
[25] A. C. Myers and B. Liskov. A decentralized model for in-
formation ﬂow control. ACM SIGOPS Operating Systems
Review, 31(5):129–142, 1997.
[26] A. C. Myers and B. Liskov. Complete, safe information
ﬂow with decentralized labels. In Proceedings of the 1998
IEEE Symposium on Security and Privacy, pages 186–
197, Oakland, California, May 1998.
[27] A. C. Myers and B. Liskov. Protecting privacy using the
decentralized label model. ACM Transactions on Soft-
ware Engineering and Methodology (TOSEM), 9(4):410–
442, 2000.
[28] M. Nauman, S. Khan, and X. Zhang. Apex: extending
Android permission model and enforcement with user-
In Proceedings of the 5th
deﬁned runtime constraints.
ACM Symposium on Information, Computer and Commu-
nications Security, pages 328–332, 2010.
[29] M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel.
Semantically rich application-centric security in Android.
In Proceedings of the 25th Annual Computer Security Ap-
plications Conference (ACSAC ’09), Honolulu, HI, Dec.
2009.
[30] G. Portokalidis, P. Homburg, K. Anagnostakis, and
H. Bos. Paranoid Android: Zero-day protection for smart-
In Annual Computer Security
phones using the cloud.
Applications Conference (ACSAC ’10), Austin, TX, Dec.
2010.
[31] C. Reis, A. Barth, and C. Pizano. Browser security:
lessons from Google Chrome. Communications of the
ACM, 52(8):45–49, 2009.
[32] J. H. Saltzer and M. D. Schroeder. The protection of in-
formation in computer systems. Proceedings of the IEEE,
63(9):1278–1308, Sept. 1975.
[33] S. VanDeBogart, P. Efstathopoulos, E. Kohler, M. Krohn,
C. Frey, D. Ziegler, F. Kaashoek, R. Morris, and D. Maz-
ières. Labels and event processes in the Asbestos oper-
ating system. ACM Transactions on Computer Systems
(TOCS), 25(4), Dec. 2007.
[34] D. S. Wallach and E. W. Felten. Understanding Java stack
inspection. In Proceedings of the 1998 IEEE Symposium
on Security and Privacy, pages 52–63, Oakland, Califor-
nia, May 1998.
[35] D. S. Wallach, E. W. Felten, and A. W. Appel. The se-
curity architecture formerly known as stack inspection: A
security mechanism for language-based systems. ACM
Transactions on Software Engineering and Methodology,
9(4):341–378, Oct. 2000.
[36] H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choud-
hury, and H. Venter. The multi-principal OS construction
of the Gazelle web browser. In Proceedings of the 18th
USENIX Security Symposium, 2009.
[37] T. Weigold, T. Kramp, and M. Baentsch. Remote client
IEEE Security & Privacy, 6(4):36–43,
authentication.
July 2008.
[38] E. Wobber, M. Abadi, M. Burrows, and B. Lampson. Au-
thentication in the Taos operating system. ACM Transac-
tions on Computer Systems (TOCS), 12(1):3–32, 1994.
[39] N. Zeldovich, S. Boyd-Wickizer, and D. Mazières. Secur-
ing distributed systems with information ﬂow control. In
Proceedings of the 5th Symposium on Networked Systems
Design and Implementation (NSDI ’08), San Francisco,
CA, Apr. 2008.