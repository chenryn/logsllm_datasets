title:DeviceVeil: Robust Authentication for Individual USB Devices Using
Physical Unclonable Functions
author:Kuniyasu Suzaki and
Yohei Hori and
Kazukuni Kobara and
Mohammad Mannan
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
DeviceVeil: Robust Authentication for Individual
USB Devices Using Physical Unclonable Functions
Kuniyasu Suzaki∗, Yohei Hori∗, Kazukuni Kobara∗, Mohammad Mannan†
∗National Institute of Advanced Industrial Science and Technology, Japan
†Concordia University, Canada
Abstract—The Universal Serial Bus (USB) supports a diverse
and wide-ranging set of device types. To enable ease of use, USB
devices are automatically detected and classiﬁed by common op-
erating systems, without any authentication. This trust-by-default
design principle can be easily exploited, and led to numerous
attacks in the past (e.g., Stuxnet, BadUSB, BadAndroid), specif-
ically targeting high-value organizations. Administrators’ efforts
to prevent these attacks may also be threatened by unscrupulous
users who may insert any USB device, or malicious users (inside
attackers) who may try to circumvent OS/kernel-enforced pro-
tection mechanisms (e.g., via OS replacement). The root causes
of USB attacks appear to be the lack of robust authentication of
individual USB devices and inadequate tamper-prooﬁng of the
solution mechanism itself. We propose DeviceVeil to address
these limitations. To authenticate individual USB devices, we
utilize the tamper-proof feature of Physical Unclonable Functions
(PUFs); PUFs extract unique features from physical character-
istics of an integrated circuit (IC) at a reasonable cost (less
than 1 USD). To make our authentication mechanism robust,
we implement it as a small hypervisor, and protect it by a novel
combination of security technologies available in commodity PCs,
e.g., Trusted Platform Module (TPM), customized secure boot,
and virtualization support. The OS disk image with all user data
is encrypted by a key sealed in TPM and can be decrypted by
the hypervisor only. Customized secure boot allows the loading
of the legitimate hypervisor and OS kernel only. The hypervisor
enables pre-OS authentication to protect the trust-by-default OS
from USB attacks. The chain of trust continues from power-on to
the insertion of a USB device and disallows all illegitimate USB
devices. DeviceVeil’s PUF authentication takes about 1.7 seconds
during device insertion.
Index Terms—Individual Device Authentication, Hypervisor,
Physical Unclonable Function, Secure Boot, Trusted Computing
I. INTRODUCTION
Current USB standards (2.0 or 3.0) support several so-
phisticated mechanisms but follow the trust-by-default [69]
design principle, connecting many types of devices with
heterogeneous protocols, including, Human Interface Devices
(HID), Mass Storage Class (MSC), Media Transfer Protocol
(MTP) and Picture Transfer Protocol (PTP). The ubiquity and
diversity of USB have enabled many high-proﬁle attacks. For
example, Stuxnet [9], [32] relied on a USB storage device,
and went beyond network air-gap to compromise Iranian
SCADA/nuclear systems. BadUSB [43] camouﬂaged USB
storage as a USB keyboard and inserted malicious commands.
USB attacks are also perpetrated by insiders. The most
famous insider attack that uses USB is possibly the Edward
Snowden incident in 2013 [80]. Another example is, Benesse,
a Japanese education company, which announced the leak
of 29 million customer records by a company engineer in
2014 [25]. Benesse apparently had a prevention mechanism
enforced by Windows ActiveDirectory against illegal use of
Mass Storage Class USB devices. However,
the engineer
allegedly used MTP/PTP of his smartphone to bypass the
protection, highlighting the difﬁculty of designing protection
mechanisms that can withstand malicious insiders. In addition,
an insider can replace a hardened OS/kernel enforcing the
protection with a backup tool, and then restore the system
after connecting an illegal USB device (e.g., to copy sensitive
ﬁles). The insider can also load an unauthorized kernel with
the Linux kexec syscall [46], and thus can bypass OS-bound
defenses including secure boot. However, complete blocking
of USB devices (e.g., by physical means) is a non-solution, as
many machines routinely connect peripheral devices by USB
alone, e.g., a USB keyboard and mouse, although these devices
can be easily exploited, as evident from BadUSB [43].
Despite these high-proﬁle attacks, security awareness re-
garding USB devices is still low. CompTIA [10] reported
that 17% of the dropped unknown USB storage devices were
plugged into PCs in several US business districts. Tischer et
al. [70] dropped 297 USB storage devices in a university
campus (UIUC), and found that HTML ﬁles in 45% of the
devices were opened. These careless and accidental insertions
also must be addressed, especially, in an enterprise solution.
To counter these attacks, the USB 3.0 Type-C speciﬁcation
includes PKI-based authentication with tamper-proof hard-
ware [72]; each product would hold a certiﬁcate issued by the
USB Implementers Forum or an intermediate CA to protect
counterfeit. The speciﬁcation states that “Products should
provide protected tamper-resistant operation and storage for
the private keys to prevent
them from being read.” Nev-
ertheless,
tamper-resistant mechanisms remain unspeciﬁed.
Another drawback of the speciﬁcation is that the proposed
authentication is effective only for each product type, but
not for individual devices. Most access control mechanisms
also support product-level only (e.g., ActiveDirectory and
SELinux). Solutions that support individual device authentica-
tion, mostly rely on USB serial numbers (e.g., USBSec [78]
and GoodUSB [66]). However, USB serial numbers can be
easily modiﬁed to defeat such weak authentication; e.g., see
the attack [44] on USB Raptor [74], which uses USB serial
numbers to lock/unlock Windows. Therefore,
is clearly
evident that a tamper-proof hardware mechanism is required
it
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00041
302
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:52:47 UTC from IEEE Xplore.  Restrictions apply. 
to implement any robust device authentication.
Such robust device authentication technologies have been
available for smart cards for more than a decade now [1],
[37]. For example, Subscriber Identity Module (SIM) cards
for mobile phones use Secure Element [52] as a tamper-
proof technology for individual device authentication. The
speciﬁcation of Secure Element is openly deﬁned by Glob-
alPlatform [19], and the chip is available from several secure
semiconductor vendors (e.g., Gemalto, NXP). Unfortunately,
these device authentication mechanisms based on hardware
tamper-proof technologies are relatively costly and accessible
to some vendors for speciﬁc devices (e.g., mobile phones), and
IT administrators cannot modify SE to use in commodity PCs.
Software tamper-proof technologies can also be used to
protect a device authentication solution. For example, Intel
SGX (Software Guard Extensions) offers software tamper-
prooﬁng; however, SGX cannot handle intermediate device
recognition between a USB device and the OS because SGX
offers Ring-3 isolated execution environment named ”enclave”
and does not have direct access to devices. Virtualization
can also be used to implement
tamper-proof hypervisors,
e.g., HyperSentry [4], HyperSafe [79], TrustVisor [38] and
SecVisor [53]. Unfortunately, they are not designed to protect
OS replacement attacks, such as the Linux kexec syscall [46]
from the userland by insiders.
We propose DeviceVeil to authenticate individual USB
devices using Physical Unclonable Functions (PUFs) with
a hardened thin hypervisor. PUFs do not require additional
tamper-prooﬁng, and extract uniqueness from physical char-
acteristics of integrated circuits. The setting of PUFs can
be managed by enterprise administrators and a challenge-
response authentication pair can be reset even if the pair
is lost/compromised. The thin hypervisor is strengthened by
security technologies in commodity PCs, including Trusted
Platform Module (TPM), secure boot, and virtualization. Our
novel combination of these techniques compensates short-
comings of individual components. The disk image of the
OS is encrypted by a key sealed in the TPM chip, and the
key is extracted by the hypervisor depending only on the
trusted boot technology. However, trusted boot cannot prevent
the re-installation attack, which can be mitigated by secure
boot by allowing the legitimate kernel only. The hypervisor
enables pre-OS authentication in an isolated environment and
protects the existing OS that follows the trust-by-default [69]
design principle of USB authentication. DeviceVeil is pri-
marily targeted for enterprise environments, where a trusted
administrator can conﬁgure employee machines and initialize
all allowed USB devices.
Contributions and Challenges:
1) Individual USB device authentication: DeviceVeil is the
ﬁrst solution that authenticates individual USB devices
by PUF, and thus connecting USB device authentica-
tion to physical characteristics of the USB IC. The use
of PUF provides robust hardware-based identiﬁcation
against
tampering, e.g., unlike device serial number,
which can be easily duplicated, or the use of per-device
unique secret keys, which can be extracted. In addition,
PUF derives different IDs from different sampling points,
and the setting of PUF authentication is controlled by the
administrators in an enterprise environment (i.e., the USB
device manufacturers are not involved in the authentica-
tion process). One challenge for PUF implementation is
the cost of an individual device. We estimate the hardware
cost of our PUF design is less than 1 USD (apparently
reasonable even for low-cost USB devices).
2) Tamper-prooﬁng against inside attackers: DeviceVeil in-
troduces tamper-prooﬁng into both the USB device and
the software components on a client PC. We utilize a
novel combination of TPM, secure boot, and virtualiza-
tion technology—compensating each other’s shortcom-
ings. DeviceVeil encrypts the entire OS including user
data, and the encryption key is sealed in the TPM chip,
i.e., can be extracted from the TPM when the Platform
Conﬁguration Register (PCR) values are extended with
the correct hash of the hypervisor only. Our customized
secure boot allows loading of the hypervisor and the OS
kernel only. The hypervisor includes a pre-OS authen-
tication mechanism and protects the existing OS. Thus,
malicious users cannot reinstall another OS, remove the
DeviceVeil hypervisor, or access content from the OS
through unauthenticated USB devices.
3) Vendor/OS independence: DeviceVeil uses the vendor-
independent
tamper-proof technology, PUFs, allowing
enterprise administrators to conﬁgure challenge-response
pairs. In addition, DeviceVeil hypervisor runs only one
commodity OS and protects it from unauthenticated USB
devices. Authentication is enforced within the hypervisor
before the OS can interact with the actual USB device.
DeviceVeil also utilizes readily-available security tech-
nologies in commodity PCs, aiding deployability.
4) Implementation: We have implemented a prototype of
DeviceVeil by reusing and modifying the code from
several projects, including BitVisor [56] (for the thin
hypervisor), DeviceDisEnabler [62] (parts of TPM man-
agement), and Zuiho [87] (USB-PUF authentication).
The overhead comes from PUF authentication during
device insertion, an average of 1.7 seconds, and zero
performance penalty during the device use.
II. ATTACK TYPES AND THREAT MODEL
In this section, we summarize common attack types against
USB and provide our threat model.
A. Attack types
When a USB device is inserted, the OS recognizes the USB
device based on its descriptor (e.g., vendor ID, class ID, serial
number), and loads a suitable device driver automatically. This
trust-by-default [69] design principle facilitates most attack
types exploiting USB.
BadUSB [43] utilizes a vulnerability in USB ﬁrmware and
customizes it to camouﬂage as a USB keyboard, i.e., identify-
303
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:52:47 UTC from IEEE Xplore.  Restrictions apply. 
ing the device class as a Human Interface Device (HID). The
camouﬂaged keyboard inputs malicious commands. Another
similar attack is USBProxy [59] that uses the USB On-The-
Go speciﬁcation [73] to mimic another (allowed) device type.
USB On-The-Go enables a USB device to switch the roles of
a host and device (for the case of a one-to-one connection).
USBProxy exploits this functionality to enable MITM attacks.
The diverse set of protocols as allowed in USB standards,
are also leveraged in some attacks. As mentioned in Section I,
MTP/PTP has allegedly been used to bypass the protection for
MSC at Benesse [25]. Furthermore, some smartphones offer
“USB Debug Mode”, not protected by ActiveDirectory [77].
BadAndroid [5] spoofs a USB-Ethernet adapter from an An-
droid phone to capture the trafﬁc from a connected computer.
All USB devices typically include a device descriptor to
advertise their features; the descriptor offers information such
as the vendor ID, product ID, class ID, serial number, etc. The
USB speciﬁcations do not require a mandatory, hard-coded
serial number, and thus some products use the same serial
number, or no serial number at all, e.g., USB keyboard/mouse.
Most USB access control tools like ActiveDirectory usually
do not consider the USB serial number because their purpose
is to allow/disallow certain product types (based on device
descriptor); note that ActiveDirectory can be conﬁgured to use
serial numbers.
B. Threat model and assumptions
DeviceVeil has two primary goals: disallow any unautho-
rized USB device, and protect the OS kernel and DeviceVeil
itself from being tampered. We protect DeviceVeil against
different types of inside attackers, including the following. (a)
Attackers with admin privileges of the OS (not the system
administrator who sets up DeviceVeil), may use the kexec