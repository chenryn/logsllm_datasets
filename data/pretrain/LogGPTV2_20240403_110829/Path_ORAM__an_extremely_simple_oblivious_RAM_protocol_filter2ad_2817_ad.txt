hand side of (1) for T with n(T ) = n. To this purpose let
a = (aj)s
j=1 be a sequence of block addresses with working
set size N , i.e., a has N diﬀerent block addresses. Let
s = (a, y = (Yj)s
j=1) be a sequence of load/store
operations. In this section we only provide a proof sketch,
precise arguments are in Section 6.4.
j=1, x = (Xj)s
For each block Yj we wish to determine the probability
that Yj gets evicted from T . We ﬁrst observe that Yj never
gets evicted if Yj ∈ V , the set of leafs in T that are also leafs
in the ORAM tree. Therefore, the expectation of the usage
of T is at most
E[u(RL(Z)[s]; T )|a(s) = a] ≤
E[#Yj ∈ V ] + E[u(RL(Z)[s]; T )|a(s) = a,∀jYj (cid:54)∈ V ].
Since the probability that Yj ∈ V is equal to |V |/2L,
E[#Yj ∈ V ] = N|V |/2L.
(2)
j=1 and (Yj)N
Next we observe that Yj can only get evicted over paths
to leafs with labels Xj, Xj−1, . . . , X1 (which correspond to
the more recent load/store operations). Let uj, as a function
of the label values for Xj, Xj−1, . . . , X1, be the probability
that Yj is evicted from T given Yj (cid:54)∈ V .
In ∞-ORAM
the worst-case address pattern a for a ﬁxed working set
size N does not duplicate block addresses, i.e., s = N and
as a consequence the labels in (Xj)N
j=1 are all
statistically independent of one another: Assuming non-
duplicated block addresses, u1 ≤ u2 ≤ u3 ≤ . . ., hence,
there exist segments U1 = {1, 2, . . . , q1} (cid:54)= ∅, U2 = {q1 +
1, . . . , q1 + q2} (cid:54)= ∅, . . ., such that within each segment Uk
the probabilities uj, j ∈ Uk, are all equal to one another. I.e,
there exists a probability hk such that hk = uj, j ∈ Uk. We
notice that the number of segments Uk with hk  nZ +R. Therefore, since |V | ≤ n and T ’s usage
is at most N , we may constrain |V | ≤ N/Z. For N/2L ≤ 2
and Z ≥ 4, the expectation is at most n/(1−|V |/2L) ≤ 2n. In
the sum of the right-hand side of (1) we bound the probability
that T ’s usage is > nZ + R, which is a multiple larger than
the expectation of the usage in T . This means that we are
able to apply a Chernoﬀ bounding technique to prove the
main theorem: For bucket size Z large enough, we are able
to compensate the 4n term in (1).
6.4 Details of Chernoff Bound
Before getting into proof details, we start by giving some
intuition on how blocks get evicted from a subtree T in ∞-
ORAM. For simplicity we assume T has no leafs with the
ORAM tree in common. Figure 5 gives an example of a
subtree T ; the ﬁgure also shows the boundary nodes that
are at one edge distance from T . When blocks get evicted
from T , they will pass through one of these boundary nodes
to a higher level outside T . X1 is the most recent label of a
block that was read from ORAM and written back with a
new random label Y1. X2 is the next older label of a block
307that was read from ORAM and written back with a new
random label Y2, etc.
We deﬁne Sj as the set of leafs of the ORAM tree that
can be reached through a path that has a boundary node
in common with one of the paths to X1, X2, . . ., or Xj. In
the example: |S1|  j to not have been evicted
from T (since there is one less load/store that could have
evicted an older block to a higher level outside T ; also notice
that buckets in ∞-ORAM are inﬁnitely sized, so, removing
the j-th load/store does not generate extra space that can
be used for storage of older blocks that otherwise would not
have found space). So, to maximize the probability of the
right-hand side of (1), we may assume that a = (aj)s
j=1 is a
sequence of block addresses without duplicates.
Blocks that remain in T with probability 1. Let V be
the set of leafs in T that are also leafs in the ORAM tree.
Notice that if a block corresponds to a Yj ∈ V , then it never
gets evicted from T since the whole path to the leaf with
label Yj is part of T . The probability that m0 out of the N
labels Yj are in V is equal to the binomial
(cid:32)
(cid:33)
p0 = P rob(m0) =
2L )m0 (1 − |V |
|V |
2L )N−m0 .
(
(5)
N
m0
T ’s usage in (1) is upper bounded by the number m0 of Yj’s
that are in V added to T ’s usage after an inﬁnite sequence
of load/store operations, where (1) all Yj (cid:54)∈ V (those Yj that
were in V are replaced by labels not in V and the sequence
is extended with labels not in V ) and (2) labels Xj and Yj
are uniformly distributed and statistically independent.
In (1) we are only interested in a non-zero probability that
T ’s usage is > nZ + R. Therefore, without loss of generality,
we may constrain |V | to lead to such a non-zero probability.
Since |V | ≤ n and T ’s usage is at most the number N of
diﬀerent blocks, we may assume |V |Z ≤ nZ + R ≤ N , hence,
(6)
|V | ≤ N/Z.
Block eviction from T . Consider the inﬁnite sequence
of load/store operations. For each leaf label X we deﬁne
X(T ) as the set of leafs that can be reached from a bucket
b (cid:54)∈ T that is on the path from the root to X. Notice that
X(T ) = ∅ if and only if X ∈ V . Furthermore, the number
of diﬀerent non-empty sets X(T ) is equal to the number of
nodes in the ORAM tree that are one edge away from T :
(7)
i=1Xi(T ).
# distinct non-empty sets X(T ) = 1 + n − 2|V |.
The non-empty sets X(T ) do not intersect with V .
By the deﬁnition of Xi(T ), if ∞-ORAM reads/writes a
path to Xi and Yj ∈ Xi(T ) for j ≥ i, then Yj gets written to
a bucket outside T : The block corresponding to Yj is counted
in T ’s usage if and only if Yj (cid:54)∈ Sj = ∪j
Eviction probability as a function of the sizes |Sj|.
The sizes of sets Sj are uniquely determined by the sequence
w1 = |S1| = . . . = |Sq1|, w2 = |Sq1+1| = . . . = |Sq1+q2|, etc.
By (7), the number of wj is at most 1 + n − 2|V | and if
w1+n−2|V | exists, then its is equal to 2L − |V |.
(Y((cid:80)k−1
) that are (cid:54)∈ S(cid:80)k−1
Let mk be equal to the number of blocks in the subsequence
S(cid:80)k
t=1 qt+1 = . . . =
, in other words, they do not get evicted from T .
Since leaf labels Yj are (cid:54)∈ V , the probability that Yj (cid:54)∈ Sj is
equal to 1 − |Sj|/(2L − |V |), hence,
t=1 qt)+1, . . . , Y(cid:80)k
t=1 qt
t=1 qt
P rob(mk|(wt, qt, mt)k−1
t=1 , wk, qk) = P rob(mk|wk, qk)
(cid:32)
(cid:33)
=
qk
mk
(1 −
wk
2L − |V | )mk (
wk
2L − |V | )qk−mk .
(8)
Probability (8) is zero for k ≥ 1 + n− 2|V |, so we may restrict
k to ≤ n − 2|V |.
Since leaf labels Xj are not constrained, the probability
that Sj has size |Sj| = |Sj−1| is equal to (|Sj−1| + |V |)/2L,
the probability that Xj ∈ Sj−1 ∪ V . Hence,
P rob(qk|(wt, qt, mt)k−1
t=1 , wk) = P rob(qk|wk)
wk + |V |
)qk−1(1 − wk + |V |
= (
).
(9)
2L
2L
The probability that wk takes on a certain value only de-
pends on the previous values wt, t < k, since they determine
the sizes of previously added Xj(T )s and therefore determine
the sizes of sets Xj(T ) that can still be added to Sk−1:
P rob(wk|(wt, qt, mt)k−1
t=1 ) = P rob(wk|(wt)k−1
t=1 ).
(10)
308We combine (8), (9) and (10) by using Bayes rule twice:
and the probability generating function corresponding to pk
(cid:89)
k≥1
P rob((wt, qt, mt)t≥1)
=
P rob(mk|wk, qk)P rob(qk|wk)P rob(wk|(wt)k−1
t=1 )
= P rob((wt)t≥1)
P rob(mk|wk, qk)P rob(qk|wk).
where
(cid:89)
k≥1
is equal to (cid:88)
q≥1
pk where
1 +
= 1 +
If we sum over all possible sequences (wt, qt)t≥1 we obtain
P rob((wt)t≥1) ·
P rob(mk|wk, qk)P rob(qk|wk)
P rob((wt)t≥1) ·
P rob((mt)t≥1)
=
=
(wt,qt)t≥1
(cid:88)
·(cid:89)
(cid:88)
·(cid:89)
k≥1
(wt)t≥1
(cid:88)
k≥1
q≥1
P rob(mk|wk, qk = q)P rob(qk = q|wk).
Substituting (8) and (9) yields
(cid:89)
(cid:88)
)q−1(1 − wk + |V |
P rob((wt)t≥1)
(wt)t≥1
k≥1
) ·
2L
P rob((mt)t≥1) =
(cid:88)