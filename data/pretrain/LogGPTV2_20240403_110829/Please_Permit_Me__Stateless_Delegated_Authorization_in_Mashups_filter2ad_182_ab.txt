### Back-End Adaptation and Mashup Limitations

The back-end system is designed to produce output that is optimized for computer consumption rather than human readability. Additionally, it defines specific limitations for mashups, such as rate limiting (throttling). In the event of a security incident, an audit will help determine whether the incident was caused by the user directly or by a mashup.

### Client-Server Approach for Issuing Permits

We employ a client-server architecture for issuing permits. The system consists of the following components:

#### 1. Permit Grant Service (PGS)
The PGS is responsible for issuing permits. When a mashup requests a permit, the PGS prompts the user with a list of access rights requested by the mashup. The user can then choose which permissions to delegate. These choices are encoded into the permit, which is timestamped and signed by the PGS. The permit is then provided to the mashup, which can attach it to access requests sent to the corresponding back-end service.

#### 2. Permit History Service (PHS)
The PHS allows users to view, renew, and revoke their existing permits.

#### 3. Permit Handler Service
This service runs at the mashup and manages permits once they are received from the PGS.

The PGS and PHS can be either centralized or distributed. In practice, an organization may have multiple permit servers, and users can specify which server to use when registering with a mashup. Users may also use different permit servers for different mashups (e.g., one for official use and another for personal activities).

To facilitate communication between back-end applications and the mashup, a new library API is used. This API allows service requests to be accompanied by permits. On the back-end side, application developers must provide additional code to enable authorization decisions based on the permit descriptors.

### Protocols

#### 3.1.1 Permit Grant Protocol

Suppose a user wants to access a mashup at `https://mycoolapp.com/app`, which in turn accesses back-end services `mybugtracker.com` and `myprojectdb.com`. The user’s PGS is running at `https://permitserver.com/permit`.

The Permit Granting Protocol ensures that the user is presented with a delegate-permissions page the first time they log in to a mashup that requires delegated authorizations. The user can grant or deny each permission request and can choose to have their decisions recorded for future use.

If the user opts to remember their decisions, they receive a signed permanent cookie, so repeated attempts to access the same back-end application with the same access requests do not require another visit to the delegate-permissions page.

**Sequence of Events:**

1. The user navigates to the mashup page at `https://mycoolapp.com/app`.
2. During the login process, the mashup authenticates the user using its Identity Provider (IdP).
3. The mashup checks if the user already has the necessary permits stored in a cookie. If not, it redirects the user's browser to the PGS at `https://permitserver.com/permit?PERMIT_REQUEST_ARGS`, where `PERMIT_REQUEST_ARGS` includes the requested permit descriptors.
4. The browser follows the redirect to the PGS.
5. The PGS authenticates the user, parses the requested permit descriptors, and renders the permission granting page with the list of requested permissions.
6. The user decides whether to delegate the requested permissions and whether to remember these decisions for future sessions.
7. If the user approves the delegation, the PGS issues a signed list of the user's choices, stores them in the permit history cookie, and redirects the browser to the permit handler service at `https://mycoolapp.com/permithandler?PERMIT_RESPONSE_ARGS`.
8. The browser follows the redirect to the permit handler service.
9. The permit handler service reads the permits, stores them in a permit cookie for the mashup’s domain, and redirects the user back to `https://mycoolapp.com/app`.
10. The mashup now has the required permits and sends service requests to `MyBugTracker` and `MyProjectDB`, with each request accompanied by the corresponding permits. If the user did not approve all requested permits, the mashup can provide a restricted service or display an error message.

#### 3.1.2 Permit Review and Revocation Protocol

To review or revoke permits, the user visits the PHS. The protocol for permit history review and revocation is as follows:

1. The user navigates to the PHS at `https://www.permitserver.com/history`.
2. The PHS parses the information in the user’s permit history cookie and presents the list of current permits.
3. The user can request to renew a permit, which causes the PHS to redirect to the PGS with a request to renew the appropriate permits. The renewal process follows steps 3 to 8 of the Permit Grant Protocol.
4. The user can also revoke all or a subset of their permits. Revocation involves removing the permits from the permit cookie belonging to the mashup’s domain. The user selects the revocation option at the PHS, which then redirects to the permit handler service of the chosen mashup with a request to delete the permit.
5. The permit handler service deletes the selected permits from the user’s permit cookie and redirects the user back to the PHS.

### Attack Resistance

A mashup authorization system can be attacked in several ways, including malicious mashup applications or compromised servers. To limit the extent of potential misuse, we store permits as browser-side cookies. A compromised mashup server cannot divulge permits issued prior to the compromise unless it cached the old permit cookies before the attack.

If a user logs into a compromised mashup, the adversary can capture newly issued permits at the permit handler. However, since permits grant limited rights, the attacker can only perform actions allowed by the permits. As permits have a limited lifetime, old permits will expire and become useless. As long as the user does not continue using the compromised server, the adversary has a limited window of opportunity to access the back-end services.

A compromised permit handler can refuse to delete permits or fail to insert new permits into the permit cookie, leading to inconsistencies between the permit history cookie and the actual permit cookie. To mitigate this, permits can be issued for single sessions, requiring reissuance each time the user logs in and having a very limited lifetime.

### Implementation

To demonstrate our approach, we implemented a permit-based authorization system prototype using Java 1.5 and deployed it in a corporate network. We integrated two existing applications, a bug tracking service and a project database system, into a prototype mashup (MyCoolMashup). We used our in-house corporate single sign-on system as the IdP.

For simplicity, we created the PGS and PHS as servlets running under the IdP server, but they could be run as separate services. The permit handler service was implemented as a component servlet running in the mashup server. We stored the permit history in a persistent cookie under the domain of the PHS.

Permits were passed using URLs and GET/POST parameters, and stored in the browser using session cookies (for one-time permits) or permanent cookies (for auto-approved permits).

### Related Work

Mashups have been studied extensively, with researchers exploring their creation, utility, and novel uses. Issues related to mashup security, such as man-in-the-middle attacks and secure cross-domain communication, have also been addressed. However, these works do not focus on mashup authorization and delegation, which is the primary focus of our work.

### Conclusion

As mashups become more prevalent, ensuring a proper authorization model is essential. Our scalable, stateless delegated authorization protocol and practical implementation using delegation permits allow users to fine-tune their release of access rights to mashups. This approach is particularly useful for maintaining stateless servers, either internally or on the Internet.