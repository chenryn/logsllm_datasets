back-end to adapt output for computer consumption instead
of human readability, and to deﬁne limitations speciﬁc to
mashups, e.g. throttling. Also, if a security event occurs, an
audit will at least reveal whether it was the user directly or
a mashup that caused the event.
We use a client-server approach for issuing permits.
As shown in Figure 2, the architecture is composed of the
following components:
Permit Grant Service (PGS). The permit grant service
is responsible for issuing permits. Upon request from a
mashup, it prompts the user with a list of access rights re-
quested by the mashup. The user can choose which per-
missions to delegate to the mashup. The user’s choices are
encoded into the permit, and the permit is timestamped and
signed by the permit granting service. The permit is given
to the mashup, which can attach it to access requests to the
corresponding back-end service.
Permit History Service (PHS). The user can view, renew,
and revoke her existing permits through the permit history
service.
Permit Handler Service. The permit handler service runs
166176
at the mashup and handles permits once they are received
from the permit granting service.
The PGS and PHS services can be centralized or dis-
tributed. In practice, there may be more than one permit
server in an organization, and the user can specify what per-
mit server to use when registering with a mashup. Users
may also use different permit servers for different mashups
(e.g., one for ofﬁcial use, another for personal activities).
To communicate with one another, the back-end applica-
tions and the mashup use a new library API that allows ser-
vice requests to be accompanied by permits. On the back-
end servers’ side of the API, the application writers must
provide additional code so that the applications can make
authorization decisions based on the permit descriptors.
3.1 Protocols
3.1.1 Permit Grant Protocol
Suppose that a user is about to access a mashup run-
ning at https://mycoolapp.com/app, which in turn
accesses back-end services mybugtracker.com and
myprojectdb.com.
The user’s PGS is running at
https://permitserver.com/permit. The Permit
Granting Protocol ensures that the user will always be pre-
sented with a delegate-permissions page the ﬁrst time she
logs in to a mashup that will need delegated authorizations.
The user can grant or deny the mashup’s request for each
permit, and can choose to have her decisions recorded for
longer-term use.
If the user opts to remember her deci-
sions, then she will receive a signed permanent cookie so
that repeated attempts to access the same back-end applica-
tion with the same access requests (or a subset thereof) do
not result in another trip to the delegate-permissions page.
Figure 2 shows the sequence of events that take place
during an invocation of the Permit Grant Protocol:
1. The user points her browser to the mashup page at
https://mycoolapp.com/app. During the lo-
gin process, the mashup authenticates her using its IdP
(this interaction with the IdP is not shown in the ﬁg-
ure).
2. The mashup checks whether the user has the nec-
essary permits already stored in her cookie for the
mashup’s domain.
If not, the mashup redirects her
browser to the PGS at https://permitserver.
com/permit?PERMIT_REQUEST_ARGS, where
PERMIT_REQUEST_ARGS indicates the requested
permit descriptors for all the back-end services it ex-
pects to access on the user’s behalf. The format of this
redirect is described in the Appendix.
3. The browser follows the redirect to the PGS.
4. The PGS authenticates the user and parses the re-
quested permit descriptors and back-end service infor-
Figure 2. Permit-based delegation architecture, and the Permit Grant Protocol.
mation from the redirect URL. Using these permit de-
scriptors, and corresponding human-readable descrip-
tions obtained from the back-end services, the PGS
renders its permission granting page with the list of
requested permissions.
5. The user tells the PGS whether she is willing to del-
egate the requested permissions to the mashup and
whether her decisions should be remembered for fu-
ture sessions.
the
appropriate permits,
6. If the user approves the delegation requests,
stores
the
PGS issues
a
signed list of the user choices in the permit his-
tory cookie for the domain of the PGS, and redi-
rects her browser to the permit handler service at
https://mycoolapp.com/permithandler?
PERMIT_RESPONSE_ARGS.
The format of the
redirect is described in detail in the Appendix.
7. The browser follows the redirect to the permit handler
service.
8. The permit handler service reads the permits, stores
them in a permit cookie for the mashup’s domain, and
then redirects the user to https://mycoolapp.
com/app.
9. Now MyCoolApp can ﬁnd the required permits by
reading the permit cookie for its domain.
It sends
service requests to MyBugTracker and MyProjectDB,
with each request accompanied by the corresponding
permits. (If the user did not approve all the requested
permits, it is up to the mashup developer to decide
what to do. The mashup can choose to provide the
user with a restricted service based on the permissions
granted, or the mashup can display an error message
regarding unavailability of required permits.)
10. MyBugTracker and MyProjectDB extract the corre-
sponding permits from the requests. After validating
the permit signatures with a cached copy of the PGS’s
public key and checking the permits’ expiration time,
they provide the requested service to the mashup.
3.1.2 Permit review and revocation protocol
To review her permits, the user goes to the Permit History
Server. The following protocol is used for permit history
review and revocation:
1. The user points her browser at the PHS at https:
//www.permitserver.com/history.
2. The PHS parses the information in the user’s permit
history cookie for the PHS domain and presents the
list of current permits to the user.
3. The user can ask the PHS to renew a permit. This
causes the PHS to redirect to the PGS along with a
request to renew the appropriate permits. The renewal
is accomplished by redoing steps 3 to 8 of the Permit
Grant Protocol.
4. The user can also revoke all or a subset of her permits.
Revocation in this case means removal of the permits
from the permit cookie belonging to the mashup’s do-
main. To do that, the user selects the revocation op-
tion at the PHS. This causes the PHS to redirect to the
167177
permit handler server of the chosen mashup, with a re-
quest to delete the permit. (The PHS cannot do this
directly as the permit cookie belongs to the mashup’s
domain.)
5. Upon a request from the PHS, the permit handler ser-
vice deletes from the user’s permit cookie those per-
mits that the user wants to revoke.
6. The permit handler service redirects the user back to
the PHS.
3.2 Attack Resistance
A mashup authorization system can be attacked in sev-
eral ways. The mashup application itself may be malicious,
or the server hosting the mashup may be taken over by an
adversary. In that case, we want to limit the extent to which
the adversary can misuse the permits. Since we store the
permits as browser side cookies, a compromised mashup
server cannot divulge permits issued prior to the compro-
mise unless it chose to cache the old permit cookies before
the attack.
If a user logs into the compromised mashup, the adver-
sary can obtain newly issued permits by capturing them at
the permit handler. Since her permits give the mashup a
limited set of rights, the attacker can only take the actions
allowed by the permits. As permits are of limited lifetime,
old permits will expire and become useless. As long as the
user does not continue using the compromised server, the
adversary has a limited window of opportunity to access
the back-end services. Since the PGS authenticates the user
when issuing permits, a compromised mashup cannot send
fake user requests and get permits.
A compromised permit handler can also refuse to delete
permits when requested to do so by the PHS, or could fail
to insert new permits into the permit cookie when requested
to do so by the PGS (denial of service). In those situations,
the permit history cookie can become inconsistent with the
actual permit cookie. A compromised handler could also
update the permit cookie appropriately, but keep a copy of
an old version and substitute it for the correct permit cookie
during a subsequent session. Of course, reuse of revoked
credentials in this manner is only possible within the life-
time of the original credential.
The other defensive measure against a compromised
mashup is to use permits that are only good for a sin-
gle session, as described in more detail in the Appendix.
Such permits have to be reissued each time the user logs
into the mashup, and have a very limited lifetime. There-
fore, the window of opportunity during which the adver-
sary can attack is quite limited. In general, the permit ex-
piration time must be chosen to balance usability (users
should not be prompted for permits too frequently) and risk
(permits should expire quickly enough to prevent a mali-
cious/compromised mashup from misusing old permits).
The user’s own machine can also be compromised and
the user’s browser taken over. We limit the potential for per-
mit leaks under these circumstances by using session cook-
ies for permits stored in the browser. Once the user logs out
and closes her browser, the permit cookies are not available
to the adversary. To be able to impersonate the user at the
mashup and exploit the permit cookies in that manner, the
attacker must be able to authenticate as the user at the IdP,
which will be very hard to do directly. A more effective ap-
proach is to wait until the user has already authenticated at
the IdP and then hijack the user’s session with the mashup.
This same sort of attack can be employed with other ap-
proaches to mashup authorization as well, of course.
Attackers can also launch man-in-the-middle attacks by
listening to the communication between the different com-
ponents. Hence, we require all communication to take place
over SSL. There is still a chance of a DNS spooﬁng attack,
where an adversary spoofs the DNS to hijack the commu-
nication between the various components. However, such
attacks are a problem for all web-based authorization sys-
tems.
Finally, adversaries can launch a denial of service (DOS)
attack by overwhelming the Permit Grant Service. To pre-
vent the PGS from becoming a single point of failure,
our design allows multiple PGSs to be used. By running
the PGS behind a load balancing mechanism such as a
Netscaler [1], we can achieve proper load balancing, and
help to defend against DOS attacks.
3.3 Implementation
To demonstrate our approach, we implemented a permit-
based authorization system prototype using Java 1.5, and
did a test deployment in a corporate network. We chose two
existing applications, a bug tracking service and a project
database system, and wrote a prototype mashup (MyCool-
Mashup) that integrated these two back-end services.
In
our test deployment, we used our in-house corporate single
sign-on system as the identity provider IdP.
For simplicity, we created the permit granting service
and the permit history service as servlets running under
the IdP server. However, we could have used any IdP, or
run the PGS/PHS as a separate service in a different server.
Similarly, we implemented the Permit History Service as a
servlet running under the IdP server. We implemented the
permit handler service as a component servlet running in
the mashup server. We implemented the Permit Granting
Protocol and history access protocols as described earlier.
We stored the permit history in a persistent cookie under
the domain of the PHS, in the user’s browser.
For passing the permit requests and the issued permits,
we used URLs and GET/POST parameters. Permits are
stored in the browser using a session cookie (for one-time
permits) or a permanent cookie (for auto-approved permits)
168178
early proposal for a capability based authorization model
for web-based applications [18]. Chadwick et al. pro-
posed an authorization delegation scheme based on X.509
certiﬁcates [10]. The Grid computing community has ex-
plored approaches to credential delegation for grid services.
The four main approaches for credential delegation are the
delegation services of the Globus Toolkit, EGEE’s gLite,
the Java-based Commodity Grid (CoG) Kit, and MyProxy
[3, 6]. However, none of these allow users to limit the rights
of the recipient of the delegated authorization, which is one
of the key issues in mashup authorization and delegation.
Further, approaches designed for the Grid assume that users
have cryptographic credentials such as X.509 credentials,
which is not the case for most mashup users.
Researchers have also looked at the problem of limit-
ing delegated rights in general. Delegation Logic [23] in-
cludes constructs that can be used to limit the depth of
delegation, i.e., sub-delegation. This does not solve the
more general problem of restricted delegation of authoriza-
tion rights, though this might be useful for building a hier-
archy of mashups. KeyNote [8] and PolicyMaker [7] do
allow further restriction of a delegee’s rights. However,
these are capability based systems that are oriented towards
environments where users have public keys and X.509 or
SPKI/SDSI credentials, whereas with mashups, the users
typically authenticate themselves via usernames and pass-
words at the back-end services, with no public keys.
5 Conclusion
As mashups become more widespread in the Internet, en-
suring a proper authorization model for mashups becomes
essential. In this paper, we presented a scalable, stateless
delegated authorization protocol and a practical implemen-
tation using delegation permits. Our permit based access
delegation model allows users to ﬁne-tune their release of
access rights to mashups, while the authorization servers
and back-end applications do not have to maintain elaborate
state information. This makes our approach scalable. Our
practical implementation of a proof of concept proves the
usability of such a permit based approach. Delegation Per-
mits include a number of features not yet present in OAuth,
and we expect some of them may well inform the devel-
opment of OAuth extensions. While we do not necessarily
expect permits to be adopted by the major players willing to
handle distributed state management, we do believe it will
be a useful model for those interested in maintaining state-
less servers, either internally or on the Internet.
References
[1] Citrix NetScaler: Web application delivery with the
On-
security and performance.
highest availability,
Figure 3. Delegate-permits page from our im-
plementation.
under the domain of the mashup application. Details of the
delegation permit format, permit cookie format, permit his-
tory cookie format, and the various redirect formats can be
found in the Appendix.
The implementation also involved providing an informa-
tive user interface for the delegate-permissions page, and
the permit history page. The design was evaluated by our in-
house user experience group for usability, and found satis-
factory. Figure 3 shows a screenshot of our delegate-permits
page, showing a request from MyCoolMashup for two per-
mits from two back-end services.
4 Related Work
As an emerging application, mashups have been studied
by many researchers [27]. Researchers have investigated
the process of creating a mashup [30], the utility of mashups
for data integration in an enterprise setting [17, 26, 31], a
mashup fabric for intranet applications [5], and the advan-
tages of mashups in learning environments [29]. Novel uses
of mashups include deep web search [14], service composi-
tion [24], and service oriented computing [9].
Issues associated with mashup security have also been
explored by researchers [11, 22]. MashupOS is a set of op-
erating system abstractions for ensuring security and iso-
lation of web services inside a browser [15]. Researchers
have observed the threat of man-in-the-middle attacks for
mashups [19], proposed a secure components model for
mashups [20], and proposed an approach for secure cross-
domain communication in Web mashups [16]. None of
these works addresses mashup authorization and delegation
problems; their main focus is providing security against
cross-site scripting attacks, an important issue that is or-
thogonal to the topic of our work.
A good summary of authentication and authorization
infrastructures can be found in [25]. Kahan offered an
169179
line at http://www.citrix.com/English/ps2/
products/product.asp?contentID=21679.