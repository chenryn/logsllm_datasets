to a value other than what was originally committed.
The crs is chosen uniformly by P3, so the commit-
ment scheme’s binding property guarantees that the
probability of this abort occurring is negligible, so the
hybrids are indistinguishable.3
Conditioned on this additional abort not happening,
we can see that the garbled input X used by P3 has
been computed as:
X = En(e, x1(cid:107)x2(cid:107)x3(cid:107)x4),
where x1 was the value extracted by the simulator in
step (5) as explained above.
Further note that, as long as P3 doesn’t abort in step
(3), we have that the values (F, e, d) are in the support
of Gb(1k, f(cid:48)). The garbling scheme’s correctness prop-
erty holds for all such (F, e, d), and it does not matter
that the random coins used in Gb were inﬂuenced by
P1’s selection of r in step (2).
H3: Same as above, except that in step (6), when the hon-
est parties hand their output to the environment, the
simulator instead hands the environment the value y
computed by the simulated Ff . By the correctness
condition mentioned above, we have that if the sim-
ulator doesn’t abort on behalf of P3 in step (5) then
3), where
the ﬁrst two expressions are what the simulated P2 and
P3 would have output, and the ﬁnal expression is what
Ff computes. Hence hybrids H2 and H3 induce iden-
tical views on the environment.
De(d, Ev(F, X)) =(cid:102)De(Ev(F, X)) = f (x1, x2, x∗
H4: Same as above, except that instead of computing Y via
Ev(F, X) in step (5), the simulator computes Y such
that De(d, Y ) = y, where y is the output obtained
from Ff (this is easy in all practical garbling schemes,
when the simulator knows all the randomness used to
generate the garbled circuit). By the correctness of the
3Note that we still need binding to hold against malicious
senders. The commitments are not necessarily generated
honestly; instead they are generated by having P1 (mali-
ciously) choose r which is expanded via PRF(r,·) to provide
randomness to call Comcrs.
garbling scheme, this is an equivalent way to compute
the same value, so the change has no eﬀect on the
environment’s view.
H5: Note that in hybrid H4, the garbled circuit does not
have to be evaluated during the simulation, hence the
garbled input X is not used. But generating X was the
only place x4 (the secret share of x∗
3) was used. The
3 is sent to P1. In H5 we modify
other share x3 of x∗
the simulator to send a random x3 to P1 in step (1).
The change has no eﬀect on the environment’s view.
The ﬁnal hybrid implicitly deﬁnes our protocol’s simulator.
It sends a random share x3 to P1 in step (1); it aborts in
step (5) if P1 has violated the binding property of any com-
mitment; otherwise it extracts x1 = o ⊕ b[1··· m] and sends
it to the ideal functionality Ff . It receives y, and in step (5)
sends Y to P1 such that De(d, Y ) = y. The eﬀect on the en-
vironment in this ideal interaction is indistinguishable from
the real interaction, by the arguments in the above sequence
of hybrids.
Next, we consider a corrupt P3:
H0: As before, we consider a simulator playing the role
of honest P1 and P2 running on their inputs. The
environment receives the ﬁnal outputs of the simulated
P1 and P2.
H1: Same as above, except for the following change. The
simulator will run an instance of Ff . In step (1) of the
protocol, the simulator will receive x3, x4 from P3, set
3 = x3 ⊕ x4, then send x1, x2, and x∗
x∗
3 to the instance
of Ff . This is merely an internal change, since in this
hybrid the simulator does not yet use the outputs of
Ff in any way. Hence, the two hybrids induce identical
views for the environment.
j where o = b⊕x1(cid:107)···(cid:107)x4.
H2: Same as above, except that the simulated P1 and P2
use uniform randomness rather than pseudorandom-
ness in step (2). The hybrids are indistinguishable by
the security of the PRF and the fact that the PRF
seed r is chosen uniformly by P1 and P2 in step (2).
H3: Same as above, except for the following change. In step
(3), when the simulator is generating the C a
j commit-
ments, it knows in advance which ones will be opened.
These are the commitment C o[j]
We modify the simulator to ﬁrst choose random o ←
{0, 1}4m which index the commitments that will be
opened, and then solve for b = o ⊕ x1(cid:107)···(cid:107)x4 in step
(3b). Note that the simulator indeed has all of the xi
values at this time. Then the simulator commits to
dummy values for the commitments which will not be
opened. The hybrids are indistinguishable by the hid-
ing property of the commitment scheme (which holds
with respect to all values of crs). Note that the simula-
tion now does not use all of the garbled input encoding
information e; rather, it only uses X = En(e, x1(cid:107)··· x4).
H4: In step (6) in the previous hybrid, the simulated P1 and
P2 will abort if De(d, ˜Y ) = ⊥, where ˜Y is the message
sent by P3 in step (5). We modify the simulator so that
it aborts if ˜Y (cid:54)= Ev(F, X), which is what P3 is supposed
596to send. Note that the simulator indeed knows F and
all of X at this point.
By the authenticity property of the garbling scheme,
it is only with negligible probability that P3 (who is
not given decoding information d) would produce ˜Y (cid:54)=
Ev(F, X) such that De(d, ˜Y ) (cid:54)= ⊥. Hence, the two
hybrids are indistinguishable.
H5: Conditioned on the simulator not aborting in step (6),
the correctness of the garbling scheme guarantees that
simulated P1 and P2 will output y = f (x1, x2, x∗
3).
Hence, instead of handing the environment the out-
puts of these simulated P1/P2, we have the simulator
instruct Ff to release output to honest parties if the
simulator hasn’t aborted in step (6), and give the out-
puts from Ff directly to the environment. Again, this
has no eﬀect on the environment’s view.
H6: Same as above, except for the following change. Note
that throughout the simulation in H5, the simulator
uses F , d, but only X = En(e, x1(cid:107)···(cid:107)x4) due to the
previous hybrids.
In particular, it does not use the
other parts of e. We modify the simulator to generate
(F, X, d) using the simulator of the garbling scheme,
rather than the standard Gb, En. The simulator re-
quires y which the simulator knows already in step
(1). The hybrids are indistinguishable by the security
of the garbling scheme.
The simulator implicit in hybrid H6 deﬁnes our ﬁnal simu-
3 = x3 ⊕ x4 in step (1) and sends it to
lator. It extracts x∗
Ff , receiving output y in return. It then generates a sim-
ulated garbled circuit/input (F, X) using y. In step (3) it
chooses random string o and commits to the entries of X as
C o[j]
, while committing to dummy values in the other com-
mitments. In step (4) it opens the commitments indexed by
o. After receiving ˜Y from P3 in step (5), it checks whether
˜Y = Ev(F, X); if so, then it instructs Ff to deliver output
to the honest parties.
j
3.4 Reducing Communication
We can reduce the total communication by essentially
half, as follows: Instead of both P1 and P2 sending the very
long (identical) message to P3 in step 3, we can have only
P1 send this message while P2 simply sends the hash of this
message, under a collision-resistant hash function. P3 can
then simply check the hash received from P2 against the
message received from P1. While this reduces total commu-
nication size, it does not reduce total communication latency
of the protocol in the most common scenario where P1 and
P2 communicate with P3, simultaneously.
To improve on this, we have P1 and P2 treat the message
they send to P3 as a string S, divided into equal halves
S = S1||S2. We then have P1 send S1 and H(S2) and P2
send H(S1) and S2 to P3. This still enables P3 to retrieve S
and also check that P1 and P2 agree on a common S. This
variant not only reduces total communication by half, but
also the communication latency in the scenario that P1 and
P2 run at the same time.
4.
IMPLEMENTATION AND EXPERIMEN-
TAL VALIDATION
4.1 Implementation
Our implementation is written in C++11 with STL sup-
port. For an eﬃcient implementation of a circuit garbling
scheme, we used as a starting point the JustGarble library
[BHKR13], an open-source library licensed under GNU GPL
v3 license. We also used the MsgPack 0.5.8 library to serial-
ize/deserialize data and used the openssl lib (version 1.0.1e-
ﬁps) for our implementation of SHA-256. We implement the
commitment scheme needed for our protocol using SHA-256
as a random oracle.
In our implementation, P3 initializes itself by ﬁrst reading
the circuit description ﬁle from the disk. The description
ﬁle is in JustGarble’s SCD format. Then, P3 listens on a
port via a socket. When Pi (i = 1, 2) connect to the port,
P3 creates a new thread for this connection. The rest of
communication/interaction between P3 and Pi will be within
this thread.
Then, P1 and P2 connect with each other to negotiate
a shared seed and use it to generate a garbled circuit. We
modify JustGarble to support a shared seed for the random-
ness needed in the garbling. As a result, the garbled circuits
generated by P1 and P2 are identical.4
Communication Reduction Techniques. To reduce
communication/serialization costs, we add several optimiza-
tions to JustGarble. First, we enable the free-XOR support
[KS08] in JustGarble and also modify its code to make NOT
gates free (no communication and computation) since the
original JustGarble implementation treats NOT gates like
other non-XOR gates. Additionally, we incorporated sup-
port for the recent half-gate garbling technique of [ZRE15]
which reduces sizes of garbled non-XOR gates to two ci-
phertexts (a 33% reduction compared to the best previous
technique).
Instead of sending each garbled gate ciphertext individu-
ally over a socket, which would signiﬁcantly slow down com-
munication due to overheads, we serialize multiple gates into
a larger buﬀer with a size below the max socket size, and
send it to the server who deserializes the received data. To
further reduce communication size, we have P1 send the ﬁrst
half of the serialized garbled circuit as usual, but only send
a hash of the second half, and have P2 do the reverse. P3
can put together the two unhashed halves to construct the
whole garbled circuits, and uses the hashed halves to check
equality of the two garbled circuits. This technique reduces
communication by a factor of two but requires more work
by all parties in form of hashing the garbled circuits. Note
that hashing operation increases computation cost. In fact,
hashing the garbled circuit using SHA256 is more expensive
than garbling the circuit itself which uses AES-NI instruc-
tions.5 Nevertheless the reduction in communication cost
4While doing so, we identiﬁed a small bug in JustGarbled.
Speciﬁcally,
in the garble() function, the encryption key
garblingContext.dkCipherContext.K .rd key is used without
initialization which resulted in diﬀerent garbled circuits even
when using the same seed.
5AES-NI provides high performance in the case where our
usage of AES does not involve re-keying. One might be
tempted to use AES (perhaps modeled as an ideal cipher)
to construct a collision-resistant hash function in a way that
597(which is the bottleneck) makes this a net win as our exper-
iments show.
4.2 Experiments
The experiments were conducted on Amazon EC2 Cloud
Computing instances. The instances are of type t2.micro
with 1GB memory, and Intel Xeon E5-2670 2.5Ghz CPU
with AES NI and SSE4.2 instruction sets enabled. The in-
stances are interconnected using Amazon’s network. We also
use the iperf v3.1b3 tool to measure the maximum achiev-
able bandwidth of t2.micro instances. The bandwidth is
1Gbits/s. The operating system was Red Hat Enterprise
Linux 7.0 (kernel 3.10.0-123.8.1.el7.x86 64). We run each
experiment 20 times and report the average and standard
deviation for our measurements.
We used 4 diﬀerent circuits for benchmarking our imple-
mentation: AES-128 (with key expansion), SHA-1, MD-
5 and SHA-256. Besides the circuit for AES-128 which
was provided with JustGarble, the description ﬁle for the
other circuits were obtained from http://www.cs.bris.ac.
uk/Research/CryptographySecurity/MPC/. We converted
these ﬁles into JustGarble’s SCD format using the code pro-
vided in [AMPR14].
The AES-128 circuit takes a 128-bit key and a 128-bit
message as input. In our experiments, P1 and P2 indepen-
dently choose 128-bit keys K1 and K2 and set K = K1 ⊕ K2
to be the encryption key; P3 provides the 128-bit message as
input. Hence, the total input length to the AES-128 circuit
is 384 and the output length is 128. The input/output sizes
for all other circuits and the number of AND/XOR/NOT
gates in each is presented in Table 1. Note that none of the
circuits we used contains OR gates and since XOR gates and
NOT gates are free in our implementation, the ultimate cost
driver is the number of AND gates.
Circuit
AES-128
MD-5
SHA-1
SHA-256
AND
7200
29084
37300
90825
NOT
0
34627
45135
103258
XOR Input size Output size
37638
14150
24166
42029
128
128
160
256
384
512
512
512
Table 1: Number of AND/OR/NOT gates , and in-
put/output sizes for each circuit. Input/output sizes
are in bits.
In our ﬁrst experiment, the client and server communicate
via sockets whose max size is set to 10KB. The results are
shown in Table 2. The computation time for P1/P2 measures
the time that P1/P2 need to generate the garbled circuit,
compute the commitments, serialize the data and hash half
of the data. The computation time for P3 measures the
time P3 needs to deserialize the data, compare and verify
the garbled circuits, and evaluate them. The network time
measures the time spent by P1, P2 and P3 to send/receive
data over socket.
Table 3 shows the size of parties’ communication during
the same experiment.
Next, to examine the eﬀect of the half-gate technique on
the performance, we disable it (i.e. only the single row-
reduction is enabled) and run the same experiments. The
results are shown in Tables 4 and 5. As expected, the half-
avoids frequent re-keying. Unfortunately, negative results of
[BCS05] show such a construction to be impossible.
Circuit
AES-128
MD-5
SHA-1
SHA-256
Network
13.30 ± 0.97
29.05 ± 1.12
36.60 ± 2.63
78.46 ± 2.62
P3 Comp.
2.30 ± 0.46
9.05 ± 0.38