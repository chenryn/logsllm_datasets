Xi to all parties.
i , . . . , xm
i } ⊆ {0, 1}∗ from each party Pi.
i=1
Figure 1: PSI ideal functionality.
Parameters: A PRF F and bound t.
Behavior: Wait for input (q1, . . . , qt) from the receiver R. Sample a random PRF seed k and give it
to the sender S. Give (F (k, q1), . . . , F (k, qt)) to the receiver.
Figure 2: The OPRF ideal functionality F F,t
oprf
Parameters: A programmable PRF F , and upper bound n on the number of points to be pro-
grammed, and bound t on the number of queries.
Behavior: Wait for input P from the sender S and input (q1, . . . , qt) from the receiver R, where
P = {(x1, y1), . . . , (xn, yn)} is a set of points. Run (k, hint) ← KeyGen(P) and give (k, hint) to the
sender. Give (hint, F (k, hint, q1), . . . , F (k, hint, qt)) to the receiver.
Figure 3: The OPPRF ideal functionality F F,t,n
opprf
number of OPRF instances, which makes it a particularly good ﬁt for our eventual PSI application that
uses many OPRF instances. Concretely, the amortized cost of each OPRF instance costs roughly 500 bits
in communication and a few symmetric-key operations.
Technically speaking, the protocol of [KKRT16] achieves a slightly weaker variant of OPRF than what
we have deﬁned in Figure 2. In particular, (1) PRF instances are are generated with related keys, and (2)
the protocol reveals slightly more than just the PRF output F (k, q). We stress that in the resulting PRF
of
[KKRT16] the construction remains secure even under these restrictions. More formally, let leak(k, q)
denote the extra information that the protocol leaks to the receiver. [KKRT16] gives a security deﬁnition for
PRF that captures the fact that outputs of F , under related keys k1, . . . , kn, are pseudorandom even given
leak(ki, qi). Our OPPRF constructions are built on this OPRF, and as a result our constructions would
inherit analogous properties as well.
For ease of presentation and reasoning, we work with the cleaner security deﬁnitions that capture the
main spirit of programmable OPRF. We emphasize that, although cumbersome, it is possible to incorporate
all of the [KKRT16] relaxations into the deﬁnitions. We stress that our eventual application of PSI is secure
in the standard sense when built from such relaxed OP[P]RF building blocks.
Programmable PRF. We introduce a new notion of a programmable oblivious PRF. Intuitively, the
functionality is similar to OPRF, with the additional feature that it allows the sender to program the output
of the PRF on a set of points chosen by the sender. Before presenting the deﬁnition of this functionality, we
discuss a PRF that supports being programmed in this way.
A programmable PRF consists of the following algorithms:
• KeyGen(1κ,P) → (k, hint): Given a security parameter and set of points P = {(x1, y1), . . . , (xn, yn)}
with distinct xi-values, generates a PRF key k and (public) auxiliary information hint. We often omit
the security parameter argument when it is clear from context.
• F (k, hint, x) → y: Evaluates the PRF on input x, giving output y. We let r denote the length of y.
A programmable PRF satisﬁes correctness if (x, y) ∈ P, and (k, hint) ← KeyGen(P), then F (k, hint, x) =
y. For the security guarantee, we consider the following experiment/game:
5
Exp
(X, Q, κ):
A
for each xi ∈ X, chose random yi ← {0, 1}r
(k, hint) ← KeyGen(1κ,{(xi, yi) | xi ∈ X})
hint,{F (k, hint, q) | q ∈ Q}(cid:17)
return A(cid:16)
(cid:12)(cid:12)(cid:12) Pr[Exp
A
We say that a programmable PRF is (n, t)-secure if for all |X1| = |X2| = n, all |Q| = t, and all polynomial-
time A:
(X1, Q, κ) ⇒ 1] − Pr[Exp
A
(cid:12)(cid:12)(cid:12)
(X2, Q, κ) ⇒ 1]
is negligible in κ
Intuitively, it is hard to tell what the set of programmed points was, given the hint and t outputs of the PRF,
if the points were programmed to random outputs. Note that this deﬁnition implies that unprogrammed
PRF outputs (i.e., those not set by the input to KeyGen) are pseudorandom.
The reason for including a separate “hint” as part of the syntax is that our protocol constructions will
naturally leak this hint to the receiver (in addition to the receiver’s PRF output). We propose a deﬁnition
that explicitly models this leakage and ensures that it is safe.
Oblivious Programmable PRF (OPPRF). The formal deﬁnition of an oblivious programmable PRF
(OPPRF) functionality is given in Figure 3. It is similar to the plain OPRF functionality except that (1)
it allows the sender to initially provide a set of points P which will be programmed into the PRF; (2) it
additionally gives the “hint” value to the receiver.
We now give several constructions of an OPPRF, with diﬀerent tradeoﬀs in parameters.
3.2 A Construction Based on Polynomials
PRF. Let F be a PRF and deﬁne our new programmable PRF (cid:98)F as follows:
Our polynomial-based construction is presented in Figure 4. We ﬁrst describe the underlying programmable
• KeyGen(P = {(x1, y1), . . . , (xn, yn)}): Choose a random key k for F .
Interpolate a degree n − 1
polynomial p over the points {(x1, y1 ⊕ F (k, x1)), . . . , (xn, yn ⊕ F (k, xn))}. Let hint be the coeﬃcients
of p.
• (cid:98)F (k, hint, q) = F (k, q) ⊕ p(q).
It is not hard to see that (cid:98)F satisﬁes correctness since for xi ∈ P it holds that (cid:98)F (k, hint, xi) = F (k, xi)⊕p(xi) =
Finally, the OPPRF protocol for (cid:98)F is straightforward if there is an OPRF protocol for F : the parties simply
oprf, can compute its output (cid:98)F (k, hint, qi) = F (k, qi)⊕ p(qi).
F (k, xi) ⊕ yi ⊕ F (k, xi). Security follows from the fact that when the yi values are distributed uniformly, so
is the hint p. This is true regardless of the number of queries the receiver makes.
invoke F F,t
receiver. The receiver, obtaining F (k, qi) from F F,t
The description of the OPPRF protocol is given in Figure 4. Simulation is trivial, as the parties’ views in
the protocol are exactly the OPPRF output.
Costs. The main advantage of this construction is that the only message that needs to be sent in addition
to the Foprf protocol is the polynomial p whose length is exactly that of n values. This seems the minimal
communication overhead that is needed to achieve OPPRF from OPRF. On the other hand, the interpolation
of the polynomial takes time O(n2) which can be expensive for large n.
oprf on their inputs. The sender obtains k and uses it to generate the hint as above, and sends it to the
3.3 A Construction Based on Bloom Filters
Garbled Bloom ﬁlters (GBF) were introduced in [DCW13] in the context of PSI protocols. A GBF is an
array GBF [1 . . . N ] of strings, associated with a collection of hash functions h1, . . . , hk : {0, 1}∗ → [N ]. The
GBF implements a key-value store, where the value associated with key x is:
(cid:76)k
j=1 GBF [hj(x)].
((cid:63))
A GBF can be programmed to map speciﬁc keys to chosen values:
6
Input of S: n points P = {(x1, y1), . . . , (xn, yn)}, where xi ∈ {0, 1}∗, xi (cid:54)= xj; and yi ∈ {0, 1}r
Input of R: Q = (q1, . . . , qt) ∈ ({0, 1}∗)t.
Protocol:
1. R sends Q to F F,t
2. S interpolates
oprf. The sender receives k and receiver receives F (k, q) for q ∈ Q.
the unique polynomial p of degree n − 1 over
F (k, x1)), . . . , (xn, yn ⊕ F (k, xn))}.
3. S sends the coeﬃcients of p to R.
4. R outputs (p, F (k, q1) ⊕ p(q1), . . . , F (k, qt) ⊕ p(qt)).
the points {(x1, y1 ⊕
Figure 4: Polynomial-based OPPRF protocol
1. Initialize array GBF with all entries equal to ⊥
2. For each key-value pair (x, v), let J = {hj(x) | GBF [hj(x)] = ⊥} be the relevant positions of GBF
that have not yet been set. Abort if J = ∅. Otherwise, choose random values for GBF [J] subject to
the lookup equation ((cid:63)) equaling the desired value v.
3. For any remaining GBF [j] = ⊥, replace GBF [j] with a randomly chosen value.
It is clear that, unless this procedure aborts, it produces a GBF with the desired key-value mapping.
In [DCW13] it was observed that the procedure aborts when processing item x if and only if x is a false
positive for a plain Bloom ﬁlter containing the previous items (think of the plain Bloom ﬁlter obtained by
interpreting a ⊥ in GBF as 0 and anything else as 1). The false-positive probability for a plain Bloom
In particular, to bound the probability by 2−λ, one can use a table with
ﬁlter has been well analyzed.
N = nλ log2 e entries to store n items. In that case, the optimal number of hash functions is λ. If we set
λ = 40, we get that the table size is about 60n and the number of hash functions is k = 40. In addition,
by doing less hashing[KM08], each insert only requires two hash functions h1(x) and h2(x). The additional
k − 2 hash functions hi(x), i ∈ [3, k], is simulated by hi(x) = h1(x) + i × h2(x).
Given the GBF construction, an OPPRF construction is relatively straightforward and similar to the
polynomial-based construction. Instead of the mappings xi (cid:55)→ yi ⊕ F (k, xi) being stored in a polynomial,
they are stored in a GBF. The construction is deﬁned in Figure 5. Security holds naturally, since if the yi
points are chosen randomly, all positions in the GBF are uniformly distributed.
Costs. The advantage of the Bloom ﬁlter based construction, compared to the polynomial-based con-
struction, is that the insertion algorithm runs in time O(n) rather O(n2), and is also very eﬃcient in practice.
The communication is still O(n) but the constant coeﬃcient is high (the actual communication is 60n items
rather than n) and therefore communication might be a bottleneck, especially on slow networks.
3.4 Table-Based Construction
The previous OPPRF constructions can be instantiated with any underlying OPRF that allows the receiver
to evaluate the PRF on any number t of points. The resulting OPPRF constructions will inherit the same t.
Meanwhile, our most eﬃcient OPRF building block from [KKRT16] only supports t = 1. In this section we
describe a construction tailored for the case of t = 1, and for small values of n (the number of programmed
points).
The main idea behind this construction is as follows. For each pair (xi, yi) the sender S uses F (k, xi) as
an encryption key to encrypt the corresponding value yi. Let T be the collection of these encryptions; then
T comprises the OPPRF hint. At a high level, the receiver can obtain F (k, q) and use it as a key to decrypt
the appropriate ciphertext from T .
The main challenges are: (1) R should not know whether he is getting random or programmed output
values (i.e. whether x = xi for some i), and (2) R must learn which ciphertext from T to decrypt. We
7
Input of S: n points P = {(x1, y1), . . . , (xn, yn)}, where xi ∈ {0, 1}∗, xi (cid:54)= xj and yi ∈ {0, 1}r
Input of R: Q = (q1, . . . , qt) ∈ ({0, 1}∗)t.
Protocol:
1. R sends Q to F F,t
2. S inserts the n pairs
oprf. The sender receives k and receiver receives F (k, q) for q ∈ Q.
{(x1, y1 ⊕ F (k, x1)), . . . , (xn, yn ⊕ F (k, xn))}
into a garbled Bloom ﬁlter denoted as G, with entries which are each r bits long. It ﬁlls the
remaining empty entries with random values.
3. S sends G to R as well as the k hash functions (the functions need not be sent explicitly, and
can be deﬁned by setting some context dependent preﬁxes to inputs of a known hash function).
4. For i = 1 to t, R computes zi = F (k, qi) ⊕(cid:76)k
j=1 G[hj(qi)]. Finally R outputs (G, z1, . . . , zt).
Figure 5: Bloom-ﬁlter-based OPPRF protocol
Input of S: n points P = {(x1, y1), . . . , (xn, yn)}, where xi ∈ {0, 1}∗, xi (cid:54)= xj; and yi ∈ {0, 1}r
Input of R: q ∈ {0, 1}∗.
Parameters: random oracle H : {0, 1}∗ → {0, 1}m, where m = 2(cid:100)log(n+1)(cid:101).
Protocol:
1. R sends q to F F,t
oprf. The sender receives k and receiver receives F (k, q).
2. S samples v ← {0, 1}κ until {H(F (k, xi)(cid:107)v) | i ∈ [n]} are all distinct.
3. For i ∈ [n], S computes hi = H(F (k, xi)(cid:107)v), and sets Thi = F (k, xi) ⊕ yi.
4. For j ∈ {0, 1}m \ {hi | i ∈ [n]}, S sets Tj ← {0, 1}r.
5. S sends T and v to R.
6. R computes h = H(F (k, q)(cid:107)v), and outputs (T, v, Th ⊕ F (k, q)).
Figure 6: Basic table-based OPPRF protocol.
achieve both properties by using F (k, q) to derive a pointer into the table T . In order to achieve property
(1), R must always decrypt some ciphertext of T , even if x (cid:54)= xi.
Concretely, suppose n is 20, so that S needs to program only 20 points. S will make a table T of size
25 = 32 (next power of 2 greater than 20). S will choose a random nonce v ∈ {0, 1}κ until {H(F (k, xi)(cid:107)v) |
i ≤ 20} are all distinct, where H : {0, 1}∗ (cid:55)→ {0, 1}5 is a hash function modeled as a random oracle. For
each i ∈ [n], S computes hi = H(F (k, xi)(cid:107)v), and sets Thi = F (k, xi) ⊕ yi. The remaining entries of T
(32 − 20 = 12 of them in this case) are chosen uniformly. S sends this nonce v together with the table T to
the the receiver as part of the hint.
From the receiver’s point of view, on input x he will use F (k, q) to decrypt the ciphertext in position
H(F (k, q)(cid:107)v) of the table. The distinctness of the H(F (k, xi)(cid:107)v) values allows the sender to place encryptions
of the yi values at appropriate positions in T without any conﬂicts. The details are given in Figure 6. Note
that the OPPRF protocol is restricted to the case of t = 1. Because of that, it suﬃces to use one-time pad
encryption for the table entries.
Security & parameters. The underlying programmable PRF satisﬁes security based on two observa-
tions: The easy observation is that table T itself is uniformly distributed when the yi values are uniformly
distributed (as in the security deﬁnition for programmable PRF).
8
Next, we must argue that the nonce v leaks no information about the set of programmed points. Fix
a candidate v and deﬁne zi = H(F (k, xi)(cid:107)v). The sender tests this candidate v by seeing whether there is
a collision among {zi} values. The receiver sees at most one value of the form F (k, xi). So by the PRF
security of F , at least n− 1 of the other F outputs are distributed randomly from the receiver’s perspective.
Since H is a random oracle, it follows that at least n − 1 of the zi values are distributed independent of the
receiver’s view (even when the receiver has oracle access to H). Finally, the condition of a collision among
randomly chosen {zi} values is independent of any single zi. Hence, the probability of a candidate v being
chosen (and thus the overall distribution of v) is the same regardless of whether the receiver queried F on
one of the sender’s programming points.
It is important to discuss the parameter choice m (length of H output), as it greatly aﬀects performance
(the number of retries in step 2 of the protocol). We can calculate the probability that for a random v, the
{H(si(cid:107)v) | i ∈ [n]} values are distinct:
Prunique =(cid:81)n−1
i=1
(cid:0)1 − i
2m
(cid:1)
(1)
The expected number of restarts when sampling v is 1/Prunique.
Looking ahead to our PSI protocol, the OPPRF will be programmed with n items, where n is the number
of items hashed into a particular bin. Diﬀerent bins will have a diﬀerent number of items. We must set m
in terms of the worst case number of items per bin, so that no bin exceeds 2m items with high probability.
However, on average, a bin will have very few items.
Costs. This OPPRF construction has favorable communication and computational cost.
Concretely, for PSI of 220 items we choose hashing parameters so that no bin exceeds 30 items with high
probability. Hence we set m = 5 (so T has 32 entries). Yet, the expected number of items in a bin is roughly
3. For the vast majority of bins, the sender programs the OPPRF on at most 7 points. In such a bin, only 2
trials are expected before ﬁnding a suitable v.
It requires
communicating a single nonce v along with a table whose length is that of O(n) items. The constant in the
big-O is at most 2 (the number of items is rounded up to the nearest power of 2). The computational cost
of the protocol is to evaluate a random oracle H, nτ times, where τ is the number of restarts in choosing v.
While these computational costs can be large in the worst case, the typical value of τ in our PSI protocol
is a small constant when averaged over all of the instances of OPPRF. Our experiments conﬁrm that this
table-based OPPRF construction is indeed fast in practice.
4 Extending OPPRF to Many Queries
The OPPRF constructions in the previous section are eﬃcient when n (the number of programmed points)
is small. When built from the eﬃcient OPRF protocol of [KKRT16], they allow the receiver to evaluate the
programmable PRF on only t = 1 point. We now show how to use a hashing technique to overcome both of
these limitations. We show how to extend OPPRF constructions described in the previous section to support
both a large n and a large t.
At the high level, the idea is that each party hashes their items into bins. Each bin contains a small
number of inputs which allows the two parties to evaluate OPPRF bin-by-bin eﬃciently. The particular
hashing approach we have in mind is as follows. Suppose the receiver has items (q1, . . . , qt) on which he
wants to evaluate an OPPRF. The sender has a set P = {(x1, y1), . . . , (xn, yn)} of points to program.
Cuckoo hashing. The receiver uses Cuckoo hashing (Section 2.2) to hash his items into bins. We will
use a variant of Cuckoo hashing with k hash functions h1, . . . , hk, and m bins denoted as B[1··· m]. Each
item q is placed in exactly one of {B[h1(q)], . . . , B[hk(q)]}. Based on t and k, the parameter m is chosen
so that every bin can contain at most one item with probability 1 − 2−λ for a security parameter λ. We