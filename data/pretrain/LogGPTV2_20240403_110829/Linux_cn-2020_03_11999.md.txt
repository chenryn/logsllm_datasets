---
author: Moshe Zadka
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 4274
date: '2020-03-15 12:42:00'
editorchoice: true
excerpt: 本文是 Python 之禅特别系列的第二篇，我们将探讨第三和第四条原则：简单与复杂。
fromurl: https://opensource.com/article/19/12/zen-python-simplicity-complexity
id: 11999
islctt: true
largepic: /data/attachment/album/202003/15/124150t4wf3wwgdrijx6xx.jpg
permalink: /article-11999-1.html
pic: /data/attachment/album/202003/15/124150t4wf3wwgdrijx6xx.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 11718
- displayorder: 0
  raid: 12087
reviewer: wxy
selector: lujun9972
summary: 本文是 Python 之禅特别系列的第二篇，我们将探讨第三和第四条原则：简单与复杂。
tags:
- Python
thumb: false
title: 简单是 Python 编程的第一要则
titlepic: true
translator: caiichenr
updated: '2020-03-15 12:42:00'
---

> 本文是 Python 之禅特别系列的第二篇，我们将探讨第三和第四条原则：简单与复杂。

![](/data/attachment/album/202003/15/124150t4wf3wwgdrijx6xx.jpg)

“完美并非无可增，而是不可减。”
— Antoine de Saint-Exupéry, 《风沙星辰》, 1939

在编程中，我们常常需要应对复杂性。每个程序员都能写出令人望而却步的复杂代码，但如果忽略了简繁取舍，《Python 之禅》将失去其精髓。

### 简单胜过复杂

在有选择的情况下，应优先选择简单的方案。尽管 Python 几乎可以实现任何功能，但这并不意味着我们应该设计出复杂的程序来解决简单的问题。因此，在编程时，应当牢记代码的简洁性是最容易丢失且最难恢复的品质。

这意味着在可以用函数表达时不要引入额外的类；避免使用强大的第三方库，有助于你为具体问题编写更简洁的函数。其核心目的是减少对未来变化的过度考虑，专注于解决当前的问题。遵循简单和优雅的原则编写的代码，比那些试图涵盖所有未来可能性的代码更容易维护和修改。

### 复杂胜过错综复杂

理解这条原则的关键在于区分“复杂”（complex）和“错综复杂”（complicated）。**复杂**指的是由许多部分组成，强调的是组成部分的数量；而**错综复杂**则指包含着难以预料的行为，强调的是各部分之间的混乱关系。

在面对困难问题时，可能没有简单的解决方案。此时，最符合 Python 风格的方法是自底向上地构建简单的工具，然后将它们组合起来解决问题。这种方法在对象组合等技术中得到了很好的体现，它通过独立的对象传递方法调用，避免了错综复杂的继承体系。这些对象可以独立测试和部署，最终形成一个整体。

另一个例子是使用单分派泛函数，这样可以抛弃错综复杂的设计，转而使用简单、几乎无行为的对象以及独立的行为。

---

作者：[Moshe Zadka](https://opensource.com/users/moshez)  
选题：[lujun9972](https://github.com/lujun9972)  
译者：[caiichenr](https://github.com/caiichenr)  
校对：[wxy](https://github.com/wxy)

本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出。