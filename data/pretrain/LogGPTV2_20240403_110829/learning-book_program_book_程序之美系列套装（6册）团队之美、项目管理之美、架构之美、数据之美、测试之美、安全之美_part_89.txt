·告知团队计划的原理。无论采用什么控制进度的手段或技巧，都
应该使其称为团队的共同知识。如果每位程序员和测试员都对进度
如何控制，以及当前项目所使用的特定的项目管理策略有个基本的
理解，他们就能提出更好的问题，而且更能理解和相信纳入计划的
事情。
·通过问题空间来衡量团队经验。关于进度安排的神奇变量之一，
就是团队对即将解决的这种问题有多少经验。如果团队要开发一个
由数据库驱动的网站，并且，6名程序员中有5名曾多次做过这种工
作，那么，假设他们在设计和估算工作时，会比从没做过这类项目
494
---
## Page 496
的团队做得更好就很合理。此外，也一定要考虑进度表估算的积极
或保守程度。
·衡量团队合作的信心和经验。虽然估算来自于每个程序员，但在
创建一个完整的事物时，程序员是以一个整体在一起工作。即使团
队中都是超级明星程序员，如果以前从没合作过（或者一起面对困
难挑战），还是难以达到预期的效率。如果采用新组成的团队来完
成大型高风险的项目，或者需要承诺完成非常紧张的进度，那就非
常危险了。
·尽早考虑风险。如果你知道Sally负责实现最复杂的组件，那么在
进度初期就要处理这些挑战。风险越大，你就会需要越多的时间来
处理它。如果到了进度表后期才开始处理风险，就没多少自由度来
应对它了。对于政治、组织或资源相关的风险也是这样。我们将在
第14章的编码管道部分，通过工作项目管理做进一步讨论。
小结
进度表有三种功能：作出承诺、鼓励每人将其工作视为对项目整体
的一部分以及跟踪项目过程。即使进度延误，进度表依然有价值。
应该将大进度表分成小进度表，以最小化风险，同时便于增加调整
的频率。
所有估算都是一种几率。因为进度表是一堆估算的集合，所以也是
几率的集合。由于几率会累积（80%x80%=64%），因此这将影响
进度表的准确度。
越早作估算，准确度就越低。但是，只有进行粗略估算才能拥有一
个起点，以做更好的估算。
应该以怀疑而非乐观的态度来制定进度表。把精力投注在设计上，
使各种假设公开，以产生可靠的信心。
练习
A.如果你使用每日计划，看看昨天的进度表。多少工作是按时并始
的？多少工作是延迟开始的？你犯了哪些错误？
495
---
## Page 497
B.你知道谁的工作总是延迟？你知道他人如何看待他吗？对于他的
工作所需要的时间，你认为他是否应该少些乐观的态度？他是否为
自己的延迟而难受？什么激励可以使他改变自己的习惯？
C.研究一下你最近一个项目最初的进度表。将其与实际发生的情况
进行比较。你曾做了哪些事情，但你现在对其想法改变了吗？在你
的下一个项目中，你将如何利用这些信息？
D.尝试在某一大，你开始和结束每件事情都严格准时。然后，问问
自己，是否值得这样？为什么是或为什么不是？
E.找一个与你工作于不同领域的朋发。他是如何安排项目进度的？
他使用什么工具来估算工作所需时间的？在他的领域内有哪些常见
错误？从他处理这些错误的方法中，你能学到什么？（如果你没有
朋发，可用建造一座建筑、拍一部电影和筹划一次婚礼等任何有趣
的可以比较的事情。）
F.三分法规则是一个粗略的指导，也存在例外。什么项目需要不同
的时间分配规则？是否存在一种项目，只需这三种工作中的一种？
G.许多项目都非常依赖于你无法控制的工作。在创建这种进度表
时，你使用什么技巧来降低这种依赖带来的风险？你如何与众人协
同工作，创建出使两个团队都获得成功的进度表？
H.你的经理正在推动一个特定工作的完成日期，但你的经验告诉你
那是不可能的。你如何使用进度表来向你的经理解释你的看法？
1.如果本章所述的常见错误可以影响大多数项目，对于一个聪明的
项目经理，怎么做才能使团队成员了解这些常见错误？如何奖励那
些避免了这些错误的人员？
[L].我和我的朋友曾去匹兹堡的PizzerlaUno餐厅吃饭，饭店人自告
诉我们等10分钟就可以有位置了。10分钟后，我的朋友Chad
McDaniel问桌子准备好了吗。女老板义告诉我们，10分钟就会准备
好。Chad问道：“这是原来的那个10分钟，还是另外一个10分钟？”
她不明白这个玩笑。
[2]作者BarryBoehm和RichardTurner编写了《BalancingAgility and
Disciphne:AGuideforthePerplexed》（《在敏捷和纪律之间平衡：
496
---
## Page 498
困惑指南》）Addlson-Weslev出版，2003年）一书，其中对软件开
发的传统方法和敏捷方法进行了比较研究。
[3]请参阅Humphrey所著的《ManagingtheSoftwareProcess》
（AddisonWeslev出版，1989年)，其中讲述了软件过程变更的定义、
解释硬管理。
[4]"Understanding and Controlling Software Costs”—文出自《IEEE
Transactions onSoftwareEngineering》，第14巷，第10篇，1998年10
月，第1462-1477页，此外，还出自BarryBoehm的《Software
EngineeringEconomics》（Prentlcehall出版，1991年）。
[5]基于程序员的工作项目而制订的进度表，叫做自下而上进度表
(bottom-up schedule)。基于管理阶层而制订的进度表，叫做由上至
下进度表(top-down schedule)。通常需要对这两种进度表进行协商。
[6].任何实际的进度表只是众多可能的进度表之一。各个进度表依
据所包含的偶发事件（设计失败、政治变动、外星人袭击等）的不
同而不同。没有考虑可能的失败的进度表是不可信的，这种进度表
的作者是缺乏刨新的或是缺乏环疑的。
[Z]大多数项目管理书籍都会谈到如何建立WBS。我将在第14章再
次谈论该主题，但是如果你想了解更多，可以参考
http://en.wikipedia.org/wiki/work_breakdown_structure.xStephen
Devanx所著的《ToralProjectControl》（Wiley出版，1999年）。
[8]Kent Beck所著的《Extreme ProgrammingExplamed》（Addison
Wesley出版，1999年）提供了一个程序员导向模型来分配工作，在
这个模型中，程序员可以自行选择工作项目，这些决定是对以下两
个方面的妥协：什么对项目是最有利的，什么对团队中的个人是最
有利的。
[2]请参考Beck和MartinFowler合著的《PlanningExtreme
Programming》（AddisonWesley出版2002年）一书的第60~62页。
[10]_PERT表示过程评审技术(ProgramEvaluationandReview
Technique)，标准公式是：（最佳估算值+4X最可能估算值+最差估
算值）/6。但是对于如何计算最佳的加权估算值（weighted
estimate），有非常多的变形和理论。
497
---
## Page 499
第3章如何知道该做什么
关于怎么规划项目，没有几个人会意见一致。通常，大部分时间都
花在想办法让众人同意如何来作计划。我想，人们被规划困扰的原
因是作规划时，需要和组织中众多不同的角色接触。当作一个影响
人们数月的重大决策时，每个人都有参与的意愿。其中包括兴奋和
新能量，但同时也令人担忧，如果不采取行动就会失去机会。这种
混合的感情很容易令人以为自己看待世界的观点才是最有用的，或
者可能更糟：认为自已的观点才是唯一值得考虑的。
“制作软件系统最困难的一个部分是决定要构建什么样的系统。在
概念性工作中，建立详细的技术需求是最困难的。其中包括对人、
对机器以及对其他软件系统的接口。没有其他工作像这项工作这
样，一旦做错，将对结果造成极大的伤害。也没有其他工作像这项
工作这样难以修正。因此，软件制造者需要执行的对客户最重要的
事情就是反复精炼产品需求。”
FredBrooks
在我的办公室角落中有很多项目规划相关的书籍，各自的观点彼此
不同，这并不奇怪。这些书籍有些专注于业务策略，有些专注于工
程，还有几个专注于了解客户。但与它们观点存在分歧相比，更令
人烦恼的是这些书不承认存在其他方法。这是很奇怪的，因为业
务、技术、客户等概念都是无法脱离其他而独立存在的。因此，我
确认只有将这些不同的方面加以结合，项目规划才会成功。能看到
存在这些交集的经理，比那些看不到的人拥有更大的优势。
所以，本章介绍的是如何规划流程，并说明如何规划才能达到最大
成功率。首先，我需要澄清一些用于不同规划策略的词汇及概念
（这部分有些枯燥，但在后续的有趣的章节中会用到它）。然后，
我将定义整合这三种不同的视角，研究一个好的规划流程应该回答
的问题，并讨论如何并展日常工作，以完成规划。后续各章将会对
某些交付物做更加详细的说明，例如远景文件（第4章）以及规格
说明书（第7章）。
揭秘软件规划
公司内部网站这样一个人完成的小项目，并不需要与开发容错操作
系统的、涉及300人开发及1000万美元成本的项目有着相同的规划
498
---
## Page 500
流程。通常，需要参与人员的数量越多、复杂度越高，就越需要规
划结构。但是，即使是小型、单人的项目，也可以从规划中受益。
规划可以提供了一个机会，来检查决策、揭开假设、并澄清人员和
组织之间的承诺。由于规划会先解决重要问题，并有时间考虑其他
选择，因此，对于防止任何愚蠢的行为，规划起到了推动的作用。
正如AbrahamLincon所言：“如果我有6个小时砍树，我将花4个小时
来把斧头磨利。"我想要说的是，精明的准备可以把工作量减到最
小。
项目规划涉及回答两个问题。第一个问题是“我们需要做什么？"通
常称为需求搜集；第二个问题是“我们要怎么做？”称为设计或详细
说明（参见图3-1）。需求是对工作必须满足的规则进行说明的、仔
细编写的描述。（例如，关于作一顿饭的需求是使用价格低廉的食
物做出一顿美味、营养的美食。）好需求是易于理解且难以误解
的。可能有多种方式来设计出某种东西以完成需求，但是，当你查
看已完成的工作时，应该很容易判断它是否符合需求。规格说明书
就是用于构建某种东西并使其满足需求的计划。
需求
设计/现格说明书
实现
我们需要做什么？
我们怎么做？
做。
L
图3-1：极其简化却易于应用的规划观点：如果你不知道需要做什么
就想要了解该怎么做，那就太早了
需求收集、设计/详细说明和实现这三项活动都是很深的主题，值得
各自著书讨论（请参见“附录"和“参考资料”）。在接下来的几章
中，我会从项目级别的观点来讨论前两项活动，在本书后面的儿章
（第14、15章）会讨论实现这项活动。
不同类型的项目
下面几项规则会改变需求及设计工作完成方式的性质。我会以三个
简单且不同的项目实例说明这些规则1：
·单个超人。最简单的项目只有一个人。从编写程序代码、市场营
销、业务规划到做自己的午餐，都自己承担，一个人独自完成每件
事情，资金也自己出。
499
---
## Page 501
小型合同团队。客户雇用有5到10名程序员和1名经理的公司，来
并发网站或软件应用程序。他们会草拟合同，定义互相的承诺。当