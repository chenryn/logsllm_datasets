无分支指令的编译方法 
既然函数参数就在寄存器里，那么就不必通过栈访问它们。 
指令清单 12.31  Optimizing GCC 4.9.1 x64 
my_max: 
; RDI=A 
; RSI=B 
; compare A and B: 
  cmp      rdi, rsi 
; prepare B in RAX for return: 
  mov      rax, rsi 
; if A>=B, put A (RDI) in RAX for return. 
; this instruction is idle if otherwise (if AB) 
  cmovle  rax, rdi 
  ret 
MSVC 2013 的编译方法几乎一样。 
ARM64 指令集里有 CSEL 指令。它相当于 ARM 指令集中的 MOVcc 指令，以及 x86 平台的 CMOVcc
指令。它只是名字不同：“Conditional SELect”。 
指令清单 12.32  Optimizing GCC 4.9.1 ARM64 
my_max: 
; X0=A 
; X1=B 
; compare A and B: 
  cmp      x0, x1 
; select X0 (A) to X0 if X0>=X1 or A>=B (Greater or Equal) 
; select X1 (B) to X0 if AB 
  csel     x0, x0, x1, le 
  ret 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 12 章  条件转移指令 
125 
12.4.3 MIPS 
不幸的是，GCC 4.4.5 在编译 MIPS 程序方面的智能化程度有限。 
指令清单 12.33  Optimizing GCC 4.4.5 (IDA) 
my_max: 
; set $v1  $a1$a0): 
                  slt      $v1, $a1, $a0 
; jump, if $v1 iso (or $a1>$a9): 
                  beqz     $v1, locret_10 
; this is branch delay slot 
; prepare $a1 in $v0 in case of branch triggered: 
                  move     $v0, $a1 
; no branch triggered, prepare $a0 in $v0: 
                  move     $v0, $a0 
locret_10: 
                  jr       $ra 
                  or       $at, $zero ; branch delay slot, NOP 
; the min() function is same, but input operands in SLT instruction are swapped: 
my_min 
                  slt      $v1, $a0, $a1 
                  beqz     $v1, locret_28 
                  move     $v0, $a1 
                  move     $v0, $a0 
locret_28: 
                  jr       $ra 
                  or       $at, $zero ; branch delay slot, NOP 
请注意分支延时槽现象：第一个 MOVE 指令“先于”BEQZ 指令运行，而第二个 MOVE 指令仅在不
发生跳转的情况下才会被执行。 
12.5 总结 
条件转移指令的构造大体如下。 
12.5.1 x86 
指令清单 12.34  x86 
CMP register, register/value 
Jcc true ; cc=condition code 
false: 
... some code to be executed if comparison result is false ... 
JMP exit 
true: 
... some code to be executed if comparison result is true ... 
exit: 
12.5.2 ARM 
指令清单 12.35  ARM 
CMP register, register/value 
Bcc true ; cc=condition code 
false: 
... some code to be executed if comparison result is false ... 
JMP exit 
true: 
... some code to be executed if comparison result is true ... 
exit: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
126 
逆向工程权威指南（上册） 
12.5.3 MIPS 
指令清单 12.36  遇零跳转 
BEQZ REG, label 
... 
指令清单 12.37  遇负数跳转 
BLTZ REG, label 
... 
指令清单 12.38  值相等的情况下跳转 
BEQ REG1, REG2, label 
... 
指令清单 12.39  值不等的情况下跳转 
BNE REG1, REG2, label 
... 
指令清单 12.40  第一个值小于第二个值的情况下跳转(signed) 
SLT REG1, REG2, REG3 
BEQ REG1, label 
... 
指令清单 12.41  第一个值小于第二个值的情况下跳转(unsigned) 
SLTU REG1, REG2, REG3 
BEQ REG1, label 
... 
12.5.4 无分支指令（非条件指令） 
如果条件语句十分短，那么编译器可能会分配条件执行指令： 
 编译 ARM 模式的程序时应用 MOVcc 指令。 
 编译 ARM64 程序时应用 CSEL 指令。 
 编译 x86 程序时应用 CMOVcc 指令。 
ARM 
在编译 ARM 模式的程序时，编译器可能用条件执行指令替代条件转移指令。 
指令清单 12.42  ARM (ARM mode) 
CMP register, register/value 
instr1_cc ; some instruction will be executed if condition code is true 
instr2_cc ; some other instruction will be executed if other condition code is true 
... etc ... 
在被执行指令不修改任何标志位的情况下，程序可有任意多条的条件执行指令。 
Thumb 模式的指令集里有 IT 指令。它可以把后续四条指令构成一个指令组，并且在条件表达式为真
的时候运行这组指令。详细介绍请参见本书的 17.7.2 节。 
指令清单 12.43  ARM (Thumb mode) 
CMP register, register/value 
ITEEE EQ ; set these suffixes: if-then-else-else-else 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 12 章  条件转移指令 
127 
instr1   ; instruction will be executed if condition is true 
instr2   ; instruction will be executed if condition is false 
instr3   ; instruction will be executed if condition is false 
instr4   ; instruction will be executed if condition is false 
12.6 练习题 
请使用 CSFL 指令替代指令清单 12.23 中所有的条件转移语句。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 1133 章
章    sswwiittcchh(())//ccaassee//ddeeffaauulltt  
13.1 case 陈述式较少的情况 
本节将围绕这个例子进行讲解： 
#include  
void f (int a) 
{ 
    switch (a) 
    { 
    case 0: printf ("zero\n"); break; 
    case 1: printf ("one\n"); break; 
    case 2: printf ("two\n"); break; 
    default: printf ("something unknown\n"); break; 
    };  
}; 
int main() 
{ 
    f(2); //test 
}; 
13.1.1 x86 
Non-optimizing MSVC 
使用 MSVC 2010 编译上述程序，可得到如下指令。 
指令清单 13.1  MSVC 2010 
tv64 = -4 ; size = 4 
_a$ = 8   ; size = 4 
_f     PROC 
    push   ebp 
    mov    ebp, esp 
    push   ecx 
    mov    eax, DWORD PTR _a$[ebp] 
    mov    DWORD PTR tv64[ebp], eax 
    cmp    DWORD PTR tv64[ebp], 0 
    je     SHORT $LN4@f 
    cmp    DWORD PTR tv64[ebp], 1 
    je     SHORT $LN3@f 
    cmp    DWORD PTR tv64[ebp], 2 
    je     SHORT $LN2@f 
    jmp    SHORT $LN1@f 
$LN4@f: 
    push   OFFSET $SG739 ; 'zero', 0aH, 00H 
    call   _printf 
    add    esp, 4 
    jmp    SHORT $LN7@f 
$LN3@f: 
    push   OFFSET $SG741 ; 'one', 0aH, 00H 
    call   _printf 
    add    esp, 4 
    jmp    SHORT $LN7@f 
$LN2@f: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 13 章  switch()/case/default 
129 
    push   OFFSET $SG743 ; 'two', 0aH, 00H 
    call   _printf 
    add    esp, 4 
    jmp    SHORT $LN7@f 
$LN1@f: 
    push   OFFSET $SG745 ; 'something unknown', 0aH, 00H 
    call   _printf 
    add    esp, 4 
$LN7@f: 
    mov    esp, ebp 
    pop    ebp 
    ret    0  
_f     ENDP 
上面这个函数的源程序相当于： 
void f (int a) 
{ 
    if (a==0) 
  printf ("zero\n"); 
    else if (a==1) 
  printf ("one\n"); 
    else if (a==2) 
  printf ("two\n"); 
    else 
  printf ("something unknown\n"); 
}; 
如果仅从汇编代码入手，那么我们无法判断上述函数是一个判断表达式较少的switch()语句、还是一组
if()语句。确实可以认为，switch()语句是一种旨在简化大量嵌套if()语句而设计的语法糖
①
上面的汇编代码把输入参数a代入了临时的局部变量tv64，其余部分的指令都很好理解。
。 
②
Optimizing MSVC 
若用 GCC 4.4.1 编译器编译这个程序，无论是否启用其最大程度优化的选项“-O3”，生成的汇编代码
也和 MSVC 编译出来的代码没有什么区别。 
经指令“c1 1.c /Fa1.asm /Ox”编译上述程序，可得到如下指令。 
指令清单 13.2  MSVC 
_a$ = 8 ; size = 4 
_f     PROC 
    mov    eax, DWORD PTR _a$[esp-4] 
    sub    eax, 0 
    je     SHORT $LN4@f 
    sub    eax, 1 
    je     SHORT $LN3@f 
    sub    eax, 1 
    je     SHORT $LN2@f 
    mov    DWORD PTR _a$[esp-4], OFFSET $SG791 ; 'something unknown', 0aH, 00H 
    jmp    _printf 
$LN2@f: 
    mov    DWORD PTR _a$[esp-4], OFFSET $SG789 ; 'two', 0aH, 00H 
    jmp    _printf 
$LN3@f: 
    mov    DWORD PTR _a$[esp-4], OFFSET $SG787 ; 'one', 0aH, 00H 
    jmp    _printf 
$LN4@f: 
    mov    DWORD PTR _a$[esp-4], OFFSET $SG785 ; 'zero', 0aH, 00H 
    jmp    _printf 
_f     ENDP 
① 即 syntactic sugar，指代增强代码可读性、降低编程出错率的语法改进措施。 
② MSVC 编译器在处理栈内的局部变量时，按照其需要，可能给这些内部变量分配以 tv 开头的宏变量。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
130 
逆向工程权威指南（上册） 
我们看到，它有以下两处不同。 
第一处：程序把变量 a 存储到 EAX 寄存器之后，又用 EAX 的值减去零。似乎这样做并没有什么道理。但是
这两条指令可以检查 EAX 寄存器的值是否是零。如果 EAX 寄存器的值是零，ZF 标志寄存器会被置 1（也就是说
0−0＝0，这就可以提前设置 ZF 标志位），并会触发第一条条件转移指令 JE，使程序跳转到 $LN4@f，继而在屏幕
上打印“Zero”。如果 EAX 寄存器的值仍然不是零，则不会触发第一条跳转指令、做“EAX＝EAX－1”的运算，
若计算结果是零则做相应输出；若此时 EAX 寄存器的值仍然不是零，就会再做一次这种减法操作和条件判断。 
如果三次运算都没能使 EAX 寄存器的值变为零，那么程序会输出最后一条信息“something unknown”。 
第二处：在把字符串指针存储到变量 a 之后，函数使用 JMP 指令调用 printf()函数。在调用 printf()函
数的时候，调用方函数而没有使用常规的 call 指令。这点不难解释：调用方函数把参数推送入栈之后，的
确通常通过 CALL 指令调用其他函数。这种情况下，CALL 指令会把返回地址推送入栈、并通过无条件转
移的手段启用被调用方函数。就本例而言，在被调用方函数运行的任意时刻，栈的内存存储结构为： 
 ESP——指向 RA。 
 ESP＋4——指向变量 a。 
另一方面，在本例程序调用 printf()函数之前、之后，除了制各第一个格式化字符串的参数问题以外，
栈的存储结构其实没有发生变化。所以，编译器在分配 JMP 指令之前，把字符串指针存储到相应地址上。 
这个程序把函数的第一个参数替换为字符串的指针，然后跳转到 printf()函数的地址，就好像程序没有
“调用”过 f()函数、直接“转移”了 printf()函数一般。当 printf()函数完成输出的使命以后，它会执行 RET 返
回指令。RET 指令会从栈中读取（POP）返回地址 RA、并跳转到 RA。不过这个 RA 不是其调用方函数——
f()函数内的某个地址，而是调用 f()函数的函数即 main()函数的某个地址。换而言之，跳转到这个 RA 地址
后，printf()函数会伴随其调用方函数 f()一同结束。 
除非每个case从句的最后一条指令都是调用printf()函数，否则编译器就做不到这种程度的优化。某种
意义上说这与longjmp()函数
①
OllyDbg 
十分相似。当然，这种优化的目的无非就是提高程序的运行速度。 
ARM 编译器也有类似的优化，请参见本书的 6.2.1 节。 
本节讲解使用 OllyDbg 调试这个程序的具体方法。 
OllyDbg 可以识别 switch()语句的指令结构，而且能够自动地添加批注。最初的时候，EAX 的值、即
函数的输入参数为 2，如图 13.1 所示。 
图 13.1  OllyDbg：观察 EAX 里存储的函数的第一个（也是唯一一个）参数 
EAX 的值（2）减去 0。当然，EAX 里的值还是 2。此后 ZF 标志位被设为 0，代表着运算结果不是零，
如图 13.2 所示。 
执行 DEC 指令之后，EAX 里的值为 1。但是 1 还不是零，ZF 标志位还是 0，如图 13.3 所示。 
① https://en.wikipedia.org/wiki/Setjmp.h。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 13 章  switch()/case/default 
131 
图 13.2  OllyDbg：执行第一个 SUB 指令 
图 13.3  OllyDbg：执行第一条 DEC 指令 
再次执行 DEC 指令，此时 EAX 里的值终成为是零了。因为运算结果为零，ZF 标志位被置位为 1，如
图 13.4 所示。 
图 13.4  OllyDbg：执行第二条 DEC 指令 
OllyDbg 提示将会触发条件转移指令，字符串“two”的指针即刻被推送入栈，如图 13.5 所示。 
图 13.5  OllyDbg：函数的第一个参数被赋值为字符串指针 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
132 
逆向工程权威指南（上册） 
请注意：函数的当前参数是 2，它位于 0x0020FA44 处的栈。 
MOV 指令把地址 0x0020FA44 的指针放入栈中，然后进行跳转。程序将执行文件 MSVCR100.DLL 里
的 printf()函数的第一条指令。为了便于演示，本例在编译程序时使用了/MD 开关，如图 13.6 所示。 
图 13.6  OllyDbg：文件 MSVCR100.DLL 中 printf()函数的第一条指令 
之后，printf()函数从地址 0x00FF3010 处读取它的唯一参数——字符串地址。然后函数会 stdout 设备（一
般来说，就是屏幕）上在打印字符串。 