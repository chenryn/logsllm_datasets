            while ( *(_DWORD *)(v4 + 0x4C) > v10 );
          }
        }
首先会通过type后一字节决定操作次数  
而后通过一个map_info结构体来调用vm_mmap和clear_user  
其中会把调用参数通过printk输出  
map_info:
    00000000 map_info        struc ; (sizeof=0x18, mappedto_3)
    00000000 load_addr       dq ?
    00000008 length          dq ?
    00000010 offset          dq ?
    00000018 map_info        ends
同时可以看到：
    LABEL_12:
            install_exec_creds(v4);
            set_binfmt(&p4format);
            v14 = 0x7FFFFFFFF000LL;
            v15 = __readgsqword((unsigned __int64)&current_task);
            if ( *(_QWORD *)v15 & 0x20000000 )
            {
              v14 = 0xC0000000LL;
              if ( !(*(_BYTE *)(v15 + 131) & 8) )
                v14 = 0xFFFFE000LL;
            }
            v10 = setup_arg_pages(v4, v14, 0LL);
            if ( !v10 )
            {
              finalize_exec(v4);
              start_thread(
                v9 + 16216,
                v13,
                *(_QWORD *)(*(_QWORD *)(__readgsqword((unsigned __int64)&current_task) + 0x100) + 0x28LL));
            }
            return v10;
          }
        }
        v13 = *(_QWORD *)(v4 + 0x58);
        goto LABEL_12;
程序会以文件偏移0x58-0x48=0x10处的值作为程序入口点  
而后执行： install_exec_creds:
    void install_exec_creds(struct linux_binprm *bprm)
    {
        security_bprm_committing_creds(bprm);
        commit_creds(bprm->cred);
        bprm->cred = NULL;
        if (get_dumpable(current->mm) != SUID_DUMP_USER)
            perf_event_exit_task(current);
        security_bprm_committed_creds(bprm);
        mutex_unlock(&current->signal->cred_guard_mutex);
    }
所以可执行文件整体格式:
    "P4\x00"
    (char)type
    (int)map_info_num
    (long)map_info_offset
    (long)entry
    ((map_info struct)map_info)*map_info_num
    the_code_will_exec
因此我们需要想办法使我们的最后code运行在root身份下  
此时code只需执行shell或者直接读取/flag操作即可  
注意到加载过程中根据map_info程序会有clear_user操作：
    if ( v17 & 8 )
              {
                vm_mmap(0LL, v19, v21, (unsigned __int8)v18, 2LL, v20);
                printk("clear_user(addr=0x%llx, length=0x%llx)\n", v16->load_addr, v16->length, v22, v23);
                _clear_user(v16->load_addr, v16->length);
              }
**但是程序并没有检测此处指针  
根据前面的 install_exec_creds，程序会根据commit_creds(bprm->cred)来设置线程权限  
因此我们可以传入clear_user一个指针指向此cred结构体特定位置来覆盖uid和gid来提升线程权限,而后commit_creds(bprm->cred)即会根据我们覆盖后的fake_cred来设置线程权限执行我们的code**  
**关于linux_binprm：**
    struct linux_binprm {
      char buf[BINPRM_BUF_SIZE];
     #ifdef CONFIG_MMU
      struct vm_area_struct *vma;
      unsigned long vma_pages;
     #else
     # define MAX_ARG_PAGES 32
      struct page *page[MAX_ARG_PAGES];
     #endif
      struct mm_struct *mm;
      unsigned long p; /* current top of mem */
      unsigned long argmin; /* rlimit marker for copy_strings() */
      unsigned int
        /*
        * True after the bprm_set_creds hook has been called once
        * (multiple calls can be made via prepare_binprm() for
        * binfmt_script/misc).
        */
        called_set_creds:1,
        /*
        * True if most recent call to the commoncaps bprm_set_creds
        * hook (due to multiple prepare_binprm() calls from the
        * binfmt_script/misc handlers) resulted in elevated
        * privileges.
        */
        cap_elevated:1,
        /*
        * Set by bprm_set_creds hook to indicate a privilege-gaining
        * exec has happened. Used to sanitize execution environment 
       * and to set AT_SECURE auxv for glibc.
        */
        secureexec:1;
     #ifdef __alpha__
      unsigned int taso:1; 
    #endif
      unsigned int recursion_depth; /* only for search_binary_handler() */
      struct file * file; 
     struct cred *cred; /* new credentials */
      int unsafe;   /* how unsafe this exec is (mask of LSM_UNSAFE_*) */
      unsigned int per_clear; /* bits to clear in current-&gt;personality */
      int argc, envc;
      const char * filename; /* Name of binary as seen by procps */
      const char * interp; /* Name of the binary really executed. Most
       of the time same as filename, but could be
       different for binfmt_{misc,script} */
      unsigned interp_flags;
      unsigned interp_data;
      unsigned long loader, exec;
      struct rlimit rlim_stack; /* Saved RLIMIT_STACK used during exec. */
     } __randomize_layout;
**关于cred：**
    struct cred {
        atomic_t    usage;
    #ifdef CONFIG_DEBUG_CREDENTIALS
        atomic_t    subscribers;    /* number of processes subscribed */
        void        *put_addr;
        unsigned    magic;
    #define CRED_MAGIC  0x43736564
    #define CRED_MAGIC_DEAD 0x44656144
    #endif
        kuid_t      uid;        /* real UID of the task */
        kgid_t      gid;        /* real GID of the task */
        kuid_t      suid;       /* saved UID of the task */
        kgid_t      sgid;       /* saved GID of the task */
        kuid_t      euid;       /* effective UID of the task */
        kgid_t      egid;       /* effective GID of the task */
        kuid_t      fsuid;      /* UID for VFS ops */
        kgid_t      fsgid;      /* GID for VFS ops */
        unsigned    securebits; /* SUID-less security management */
        kernel_cap_t    cap_inheritable; /* caps our children can inherit */
        kernel_cap_t    cap_permitted;  /* caps we're permitted */
        kernel_cap_t    cap_effective;  /* caps we can actually use */
        kernel_cap_t    cap_bset;   /* capability bounding set */
        kernel_cap_t    cap_ambient;    /* Ambient capability set */
    #ifdef CONFIG_KEYS
        unsigned char   jit_keyring;    /* default keyring to attach requested
                         * keys to */
        struct key __rcu *session_keyring; /* keyring inherited over fork */
        struct key  *process_keyring; /* keyring private to this process */
        struct key  *thread_keyring; /* keyring private to this thread */
        struct key  *request_key_auth; /* assumed request_key authority */
    #endif
    #ifdef CONFIG_SECURITY
        void        *security;  /* subjective LSM security */
    #endif
        struct user_struct *user;   /* real user ID subscription */
        struct user_namespace *user_ns; /* user_ns the caps and keyrings are relative to. */
        struct group_info *group_info;  /* supplementary groups for euid/fsgid */
        struct rcu_head rcu;        /* RCU deletion hook */
    };
**cred是每个线程记录本线程权限的结构体  
当我们将uid和gid覆盖为0即可使此线程获得root权限  
(root运行下uid和gid皆为0)**
### Debug
关于调试和leak cred  
**首先为了便于调试，将身份改为root，修改init脚本并重新打包文件系统：**
    #!/bin/sh
    mount -t proc none /proc
    mount -t sysfs none /sys
    insmod  /p4fmt.ko  
    sleep 2
    ln -s /dev/console /dev/ttyS0
    cat  ../kirin.cpio.gz
而后从bzImage提取vmlinux便于调试：
    #!/bin/sh
    check_vmlinux()
    {
        # Use readelf to check if it's a valid ELF
        # TODO: find a better to way to check that it's really vmlinux
        #       and not just an elf
        readelf -h $1 > /dev/null 2>&1 || return 1
        cat $1
        exit 0
    }
    try_decompress()
    {
        # The obscure use of the "tr" filter is to work around older versions of
        # "grep" that report the byte offset of the line instead of the pattern.
        # Try to find the header ($1) and decompress from here
        for pos in `tr "$1\n$2" "\n$2="  $tmp 2> /dev/null
            check_vmlinux $tmp
        done
    }
    # Check invocation:
    me=${0##*/}
    img=$1
    if  [ $# -ne 1 -o ! -s "$img" ]