### 404
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021 at 10:48:55 UTC from IEEE Xplore. Restrictions apply.**

### Java Reflection Mechanism
The Java reflection mechanism provides the functionality to obtain all internal information of a known class, such as fields and methods. It also allows the invocation of any field or method of a given object. By reflecting the `FragmentManager` class in the target `Activity`, the corresponding `FragmentTransaction` class can be constructed. The subclasses of `Fragment` involved in the current `Activity` are instantiated using the Java Virtual Machine (JVM) through reflection. These instances are then added to the switch functions of the `FragmentTransaction` class. Finally, the transition between `Fragments` is implemented by executing the `commit` method in the `FragmentTransaction` class. If a new `Fragment` can be accessed via a click event, this explicit clicking process will replace the implicit reflection mechanism and serve as the initial operation for the transition during element generation.

### Case 3 â€“ Reaching a Visited Interface
When the testing app reaches a previously visited interface, FragDroid completes the input fields and retrieves the coordinates of all clickable controls on that interface. Clicking events are then automatically injected by FragDroid, starting from the top-left corner and moving right and down. The possible outcomes of a clicking event are:
- If the interface does not change, the clicking operation continues.
- If a dialog box or menu appears, it is dismissed by clicking on a blank space, and the clicking operation resumes.
- If the interface changes, the new interface is terminated by killing the current execution, and the testing app is restarted to continue under the same click operation until all clicking events are completed.
- If the app crashes, the testing app is restarted to the current interface and continues with the clicking operations.

### Queue Generation & Test Case Generation
For the entire evolutionary test, the UI transition queue is maintained based on the Activity Fragment Transition Model (AFTM) using a breadth-first strategy. Each dynamically generated item in the queue represents the transition from one interface to another. This process can be divided into two core modules: queue update and test case generation.

Initially, FragDroid uses the original AFTM to initialize the UI transition queue. Each item in the queue contains four properties: the method of reaching a certain interface (Activity or Fragment), the start interface, the target interface, and an operation list detailing the specific actions from the start to the target interface. When the AFTM is updated, the queue is also updated.

The test case generation module converts the items in the UI queue into executable test cases using the Robotium library. One of the most challenging parts is generating test cases for mandatory switching to hidden or unvisited `Fragments`. If no explicit operation can be used to reach the target `Fragment`, the Java reflection mechanism is employed. The reflection process involves reflecting the `Activity` class to determine whether it contains `getSupportFragmentManager()` or `getFragmentManager()`, depending on whether the `Activity` inherits from `android.app.Activity` or `android.support.v4.app.Activity`. The corresponding `FragmentManager` is then used to execute `beginTransaction()` and reflect the `Fragment` classes to perform the switch. Finally, the switching function is constructed and executed with the `Fragment` container's resource-ID.

### Test Termination Condition
As shown in Figure 4, FragDroid generates items for the UI queue based on AFTM. These items are compiled into test cases and executed for dynamic testing. The state information from the testing results is used to update AFTM, which triggers the next round of execution. The test terminates when the UI transition queue is empty and AFTM is no longer updated, indicating that all test cases have been tested.

To achieve higher coverage and avoid omissions, if there are unvisited `Activities` (based on the final AFTM), FragDroid forcibly invokes them through empty `Intents`. If the invocation is successful, these `Activities` are added to AFTM and processed normally in the second loop phase. The test ends when the UI queue is empty and AFTM is no longer updated.

### Experiment and Evaluation
We have implemented a full-featured prototype of FragDroid and conducted a series of experiments to evaluate its effectiveness. Additionally, we chose sensitive API call analysis as a showcase to illustrate the practicality of our framework.

#### Dataset
We downloaded and analyzed 217 popular apps (with more than 500,000 downloads) from 27 categories on Google Play. The categories include Tools (21 apps), Entertainment (21 apps), News Magazine (16 apps), Business Office (15 apps), Books and Reference (14 apps), and more. Preliminary code analysis revealed that 91% of these apps use `Fragment` components. However, some apps were encrypted or protected, making them unsuitable for analysis. Others failed in dynamic testing due to permission issues. After excluding these, we selected 15 apps for further analysis.

#### Coverage
FragDroid successfully covered 66% of `Fragments` and 71.94% of `Activities`. Table I shows the coverage rates for `Activities`, `Fragments`, and `Fragments` within visited `Activities`. Each data column in the table consists of three sub-columns: Visited, Sum, and Rate. The "Visited" column records the number of elements (e.g., `Activities`) successfully tested by FragDroid; the "Sum" column summarizes the total number of such elements discovered in the static information extraction phase, and the "Rate" column lists the coverage rate.

#### Activity Coverage Analysis
`Activities` are the primary containers for UI layouts, and `Fragments` cannot exist without `Activities`. Although our focus is on `Fragments`, exploring more `Activities` can lead to a higher coverage rate for `Fragments`. The list of `Activities` is extracted from the app's manifest file during static analysis, and isolated `Activities` (those that cannot be switched to/from other interfaces) are excluded. FragDroid logs the number of visited `Activities`.

However, some factors reduce the coverage rate for `Activities`:
- **Material Design Mode**: Many developers use material design, making direct navigation in the navigation view drawer difficult, such as in `com.cnn.mobile.android.phone` and `com.aircrunch.shopalerts`. We applied mandatory starting in the evolutionary test case generation, but this does not always account for context and `Intent`, leading to undetected `Activities`.
- **Strict Input Requirements**: Some `Activities` require precise input, such as address names, which are not provided manually, causing apps like `com.weather.Weather` to fail testing.
- **Action Bars**: Apps like `com.aircrunch.shopalerts`, `com.where2get.android.app`, and `com.inditex.zara` have action bars, triggering numerous pop operations that interrupt normal test case generation.

#### Fragment Coverage Analysis
The sum of `Fragments` found by FragDroid is based on the method of getting effective `Fragments`. Since `Fragments` rely on `Activities`, inaccessible `Activities` in some apps affect `Fragment` discovery. Our framework calculates and logs all `Fragments` of visited `Activities`.

However, some `Fragments` are instantiated or loaded directly without using `FragmentManager`, making it difficult for FragDroid to determine their loading status, as seen in the failing case `com.mobilemotion.dubsmash`. Another issue is missing parameters in the reflection mechanism, as in `com.inditex.zara`.

#### Fragment in Visited Activity Coverage Analysis
Some `Activities` are not accessible for testing, meaning the `Fragments` in those `Activities` are also inaccessible. In the experiment, the average coverage rate for `Fragments` in visited `Activities` is over 50%, and for a third of the tested apps, this rate reached 100%. This confirms that FragDroid's basic test unit has been specified from `Activity` to `Fragment`, and the framework is compatible with the additional logic introduced by `Fragments`.

#### Sensitive API Invocation Analysis
User privacy disclosure in Android, caused by the abuse of permissions and the transfer of sensitive APIs, is a common concern. Solutions like native permission management and dynamic permission reminders in Android 6.0 help limit authority abuse. However, most sensitive operations are allowed by default at the time of app installation.