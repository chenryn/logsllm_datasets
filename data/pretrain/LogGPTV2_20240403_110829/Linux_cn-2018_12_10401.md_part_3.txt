```
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode 1))
```
#### 驾驭之 Org 模式
我基本上是在 Org 模式下处理工作的。它是我创作文档、记笔记、列任务清单以及 90% 其他工作的首选环境。Org 模式是笔记和待办事项列表的组合工具，最初是由一个在会议中使用笔记本电脑的人构想出来的。我反对在会议中使用笔记本电脑，自己也不使用，所以我的用法与他的有些不同。对我来说，Org 模式主要是一种处理结构中内容的方式。在 Org 模式中有标题和副标题等，它们的作用就像一个大纲。Org 模式允许你展开或隐藏大纲树，还可以重新排列该树。这正合我意，并且我发现用这种方式使用它是一种乐趣。
Org 模式也有很多让生活愉快的小功能。例如，脚注处理非常好，LaTeX/PDF 输出也很好。Org 模式能够根据所有文档中的待办事项生成议程，并能很好地将它们与日期/时间联系起来。我不把它用在任何形式的外部任务上，这些任务都是在一个共享的日历上处理的，但是在创建事物和跟踪我未来需要创建的东西时，它是无价的。安装它，你只要将 `org-mode.el` 放到你的 `lisp` 目录下。如果你想要它基于文档的结构进行缩进并在打开时全部展开的话，在你的 `.emacs` 文件中添加如下代码：
```
;; set up org mode
(setq org-startup-indented t)
(setq org-startup-folded "showall")
(setq org-directory "~/org")
```
最后一行是让 Org 模式知道在哪里查找要包含在议程和其他事情中的文件。我把 Org 模式保存在我的主目录中，也就是说，像前面介绍的一样，它是 Dropbox 目录的一个符号链接。
我有一个总是在缓冲区中打开的 `stuff.org` 文件。我把它当作记事本。Org 模式使得提取待办事项和有期限的事情变得很容易。当你能够内联 Lisp 代码并在需要计算它时，它特别有用。拥有包含内容的代码非常方便。同样，你可以使用 Emacs 访问实际的计算机，这是一种解放。
##### 用 Org 模式进行发布
我关心的是文档的外观及格式。我刚开始工作时是个设计师，而且我认为信息可以，也应该表现得清晰和美丽。Org 模式对将 LaTeX 生成 PDF 支持的很好，LaTeX 虽然也有学习曲线，但是很容易处理一些简单的事务。
如果你想使用字体和样式，而不是典型的 LaTeX 字体和样式，你需要做些事。首先，你要用到 XeLaTeX，这样就可以使用普通的系统字体，而不是 LaTeX 的特殊字体。接下来，你需要将以下代码添加到 `.emacs` 中：
```
(setq org-latex-pdf-process
 '("xelatex -interaction nonstopmode %f"
  "xelatex -interaction nonstopmode %f"))
```
我把这个放在 `.emacs` 中 Org 模式配置部分的末尾，使文档变得更整洁。这让你在从 Org 模式发布时可以使用更多格式化选项。例如，我经常使用：
```
#+LaTeX_HEADER: \usepackage{fontspec}
#+LATEX_HEADER: \setmonofont[Scale=0.9]{Input Mono}
#+LATEX_HEADER: \setromanfont{Maison Neue}
#+LATEX_HEADER: \linespread{1.5}
#+LATEX_HEADER: \usepackage[margin=1.25in]{geometry}
#+TITLE: Document Title Here
```
这些都可以在 `.org` 文件中找到。我们的公司规定的正文字体是 `Maison Neue`，但你也可以在这写上任何适当的东西。我很是抵制 `Maison Neue`，因为这是一种糟糕的字体，任何人都不应该使用它。
这个文件是一个使用该配置输出为 PDF 的实例。这就是开箱即用的 LaTeX 一样。在我看来这还不错，但是字体很平淡，而且有点奇怪。此外，如果你使用标准格式，人们会觉得他们正在阅读的东西是、或者假装是一篇学术论文。别怪我没提醒你。
#### 驾驭之 Ace Jump 模式
这只是一个辅助模式，而不是一个主模式，但是你也需要它。其工作原理有点像之前提到的 Jef Raskin 的 Leap 功能   9  。 按下 `C-c C-SPC`，然后输入要跳转到单词的第一个字母。它会高亮显示所有以该字母开头的单词，并将其替换为字母表中的字母。你只需键入所需位置的字母，光标就会跳转到该位置。我常将它作为导航键或是用来检索。将 `.el` 文件下到你的 `lisp` 目录下，并在 `.emacs` 文件添加如下代码：
```
;; set up ace-jump-mode
(add-to-list 'load-path "which-folder-ace-jump-mode-file-in/")
(require 'ace-jump-mode)
(define-key global-map (kbd "C-c C-SPC" ) 'ace-jump-mode)
```
### 待续
本文已经够详细了，你能在其中得到你所想要的。我很想知道除编程之外（或用于编程）Emacs 的使用情况，及其是否高效。在我使用 Emacs 的过程中，可能存在一些自作聪明的老板式想法，如果你能指出来，我将不胜感激。之后，我可能会写一些更新来介绍其它特性或模式。我很确定我将会向你展示如何在 Emacs 和 Ludwig 模式下使用 Fugue，因为我会将它发展成比代码高亮更有用的东西。更多想法，请在 Twitter 上 [@fugueHQ](https://twitter.com/fugueHQ) 。
### 脚注
---
1. 如果你是位精英，但从没涉及过技术方面，那么 Emacs 并不适合你。对于少数的人来说，Emacs 可能会为他们开辟一条通往计算机技术方面的道路，但这只是极少数。如果你知道怎么使用 Unix 或 Windows 的终端，或者曾编辑过 dotfile，或者说你曾写过一点代码的话，这对使用 Emacs 有很大的帮助。 [↩](#fnref1)
2. 参考链接：  [↩](#fnref2)
3. 我主要是在写作时使用这个模式来进行一些运算。比如说，当我在给一个新雇员写一封入职信时，我想要算这封入职信中有多少个选项。由于我在我的 `.emacs` 为 outstanding-shares 定义了一个变量，所以我只要按下 `M-:` 然后输入 `(* .001 outstanding-shares)` 就能再无需打开计算器或电子表格的情况下得到精度为 0.001 的结果。我使用了 大量 的变量来避免程序间切换。 [↩](#fnref3)
4. 缺少的部分是 web。有个名为 eww 的 Emacs 网页浏览器能够让你在 Emacs 中浏览网页。我用的就是这个，因为它既能拦截广告（LCTT 译注：实质上是无法显示，/laugh），同时也在可读性方面为 web 开发者消除了大多数差劲的选项。这个其实有点类似于 Safari 的阅读模式。不幸的是，大部分网站都有很多令人讨厌的繁琐的东西以及难以转换为文本的导航， [↩](#fnref4)
5. 易用性和易学性这两者经常容易被搞混。易学性是指学习使用工具的难易程度。而易用性是指工具高效的程度。通常来说，这是要差别的，就想鼠标和菜单栏的差别一样。菜单栏很容易学会，但是却不怎么高效，以致于早期会存在一些键盘的快捷键。除了在 GUI 方面上，Raskin 在很多方面上的观点都很正确。如今，操作系统正在将一些合适的搜索映射到键盘的快捷键上。比如说在 OS X 和 Windows 上，我默认的导航方式就是搜索。Ubuntu 的搜索做的很差劲，如同它的 GUI 一样差劲。 [↩](#fnref5)
6. 在有网的情况下，[AWS S3](https://baike.baidu.com/item/amazon%20s3/10809744?fr=aladdin) 是解决文件存储问题的有效方案。数万亿个对象存在 S3 中，但是从来没有遗失过。大部分提供云存储的服务都是在 S3 上或是模拟 S3 构建的。没人能够拥有 S3 一样的规模，所以我将重要的文件通过 Dropbox 存储在上面。 [↩](#fnref6)
7. 目前，你可能会想：“这个人和自行车有什么关系？”……我在各个层面上都喜欢自行车。自行车是迄今为止发明的最具机械效率的交通工具。自行车可以是真正美丽的事物。而且，只要注意点的话，自行车可以用一辈子。早在 2001 年，我曾向 Rivendell Bicycle Works 订购了一辆自行车，现在我每次看到那辆自行车依然很高兴，自行车和 Unix 是我接触过的最好的两个发明。对了，还有 Emacs。 [↩](#fnref7)
8. 这个网站有一个很棒的 Emacs 教程，但不是这个。当我浏览这个页面时，我确实得到了一些对获取高效的 Emacs 配置很重要的知识，但无论怎么说，这都不是个替代品。 [↩](#fnref8)
9. 20 世纪 80 年代，Jef Raskin 与 Steve Jobs 在 Macintosh 项目上闹翻后， Jef Raskin 又设计了 [Canon Cat 计算机](https://en.wikipedia.org/wiki/Canon_Cat)。这台 Cat 计算机是以文档为中心的界面（所有的计算机都应如此），并以一种全新的方式使用键盘，你现在可以用 Emacs 来模仿这种键盘。如果现在有一台现代的，功能强大的 Cat 计算机并配有一个高分辨的显示器和 Unix 系统的话，我立马会用 Mac 来换。[https://youtu.be/oTlEU\_X3c?t=19s](https://youtu.be/o_TlE_U_X3c?t=19s) [↩](#fnref9)
### 
---
via: 
作者：[Josh Stella](https://blog.fugue.co/authors/josh.html) 译者：[oneforalone](https://github.com/oneforalone) 校对：[wxy](https://github.com/wxy), [oneforalone](https://github.com/oneforalone)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出