### 查询选修“张三”老师所授课程的学生中，成绩最高的学生信息及其成绩

#### 1. 查找张三老师所教授的课程
```sql
SELECT c.c_id, c.c_name
FROM Course c
JOIN Teacher t ON c.t_id = t.t_id
WHERE t.t_name = '张三';
```

**结果:**
```
c_id | c_name
-----|-------
02   | 数学
```

#### 2. 查找修读了张三老师所教授课程的学生及其成绩
```sql
SELECT sc.s_id, sc.s_score
FROM Score sc
LEFT JOIN Course c ON sc.c_id = c.c_id
LEFT JOIN Teacher t ON c.t_id = t.t_id
WHERE t.t_name = '张三';
```

**结果:**
```
s_id | s_score
-----|--------
01   | 90
02   | 60
03   | 81
04   | 40
05   | 87
07   | 89
```

#### 3. 使用 `MAX` 函数找出最高分
```sql
SELECT MAX(sc.s_score)
FROM Score sc
LEFT JOIN Course c ON sc.c_id = c.c_id
LEFT JOIN Teacher t ON c.t_id = t.t_id
WHERE t.t_name = '张三';
```

**结果:**
```
MAX(sc.s_score)
----------------
90
```

#### 4. 连接 `Student` 表，查找取得最高分的学生信息
```sql
SELECT s.s_id, s.s_name, s.s_birth, s.s_sex, sc.s_score, c.c_id, c.c_name
FROM Student s
LEFT JOIN Score sc ON s.s_id = sc.s_id
LEFT JOIN Course c ON sc.c_id = c.c_id
WHERE sc.s_score = (SELECT MAX(sc.s_score)
                     FROM Score sc
                     LEFT JOIN Course c ON sc.c_id = c.c_id
                     LEFT JOIN Teacher t ON c.t_id = t.t_id
                     WHERE t.t_name = '张三')
  AND c.c_id IN (SELECT c.c_id
                 FROM Course c
                 JOIN Teacher t ON c.t_id = t.t_id
                 WHERE t.t_name = '张三');
```

**结果:**
```
s_id | s_name | s_birth    | s_sex | s_score | c_id | c_name
-----|--------|------------|-------|---------|------|-------
01   | 张同学 | 1998-08-01 | 男    | 90      | 02   | 数学
```

---

### 题目41：查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩

#### SQL实现
```sql
SELECT a.s_id, a.c_id, a.s_score
FROM Score a
JOIN Score b ON a.c_id != b.c_id
              AND a.s_score = b.s_score
              AND a.s_id = b.s_id;
```

**结果:**
```
s_id | c_id | s_score
-----|------|---------
02   | 03   | 80
01   | 01   | 80
03   | 01   | 80
02   | 03   | 80
```

为了去重，可以使用 `DISTINCT`：
```sql
SELECT DISTINCT a.s_id, a.c_id, a.s_score
FROM Score a
JOIN Score b ON a.c_id != b.c_id
              AND a.s_score = b.s_score
              AND a.s_id = b.s_id;
```

**结果:**
```
s_id | c_id | s_score
-----|------|---------
02   | 03   | 80
01   | 01   | 80
03   | 01   | 80
```

---

### 题目42：查询每门课程成绩最好的前两名

#### 自己的方法
```sql
(SELECT c.c_id, sc.s_id, sc.s_score
 FROM Score sc
 JOIN Course c ON sc.c_id = c.c_id
 WHERE c.c_name = '语文'
 ORDER BY sc.s_score DESC
 LIMIT 2)
UNION
(SELECT c.c_id, sc.s_id, sc.s_score
 FROM Score sc
 JOIN Course c ON sc.c_id = c.c_id
 WHERE c.c_name = '数学'
 ORDER BY sc.s_score DESC
 LIMIT 2)
UNION
(SELECT c.c_id, sc.s_id, sc.s_score
 FROM Score sc
 JOIN Course c ON sc.c_id = c.c_id
 WHERE c.c_name = '英语'
 ORDER BY sc.s_score DESC
 LIMIT 2);
```

**结果:**
```
c_id | s_id | s_score
-----|------|---------
01   | 01   | 80
01   | 03   | 80
02   | 01   | 90
02   | 07   | 89
03   | 01   | 96
03   | 07   | 94
```

#### 参考方法
```sql
SELECT a.c_id, a.s_id, a.s_score
FROM Score a
WHERE (SELECT COUNT(1)
       FROM Score b
       WHERE b.c_id = a.c_id
         AND b.s_score >= a.s_score) <= 2
ORDER BY a.c_id;
```

**结果:**
```
c_id | s_id | s_score
-----|------|---------
01   | 01   | 89
01   | 01   | 76
01   | 01   | 86
01   | 01   | 58
01   | 05   | 76
01   | 09   | 90
02   | 01   | 69
02   | 03   | 81
02   | 04   | 48
02   | 05   | 87
02   | 07   | 89
03   | 01   | 96
03   | 02   | 88
03   | 03   | 85
03   | 04   | 30
03   | 06   | 56
03   | 07   | 94
```

---

### 题目43：统计每门课程的学生选修人数（超过5人的课程才统计）

#### SQL实现
```sql
SELECT c_id, COUNT(s_score) AS num
FROM Score
GROUP BY c_id
HAVING num > 5
ORDER BY num DESC, c_id;
```

**结果:**
```
c_id | num
-----|-----
01   | 6
02   | 5
```

---

### 题目44：检索至少选修两门课程的学生学号

#### SQL实现
```sql
SELECT s_id, COUNT(*) AS num
FROM Score
GROUP BY s_id
HAVING num >= 2;
```

**结果:**
```
s_id | num
-----|-----
01   | 3
02   | 3
03   | 3
04   | 2
05   | 2
06   | 2
07   | 2
```

希望这些优化后的SQL查询和说明能够帮助你更好地理解和解决问题。