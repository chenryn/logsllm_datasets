within the browser. The GO Speed app that the user is asked to
install seems to be benign, as it has been installed by a large
user base (more than 10M users, according to Google Play)
and an analysis of VirusTotal.com reports no anti-virus labels10.
After analyzing the DOM snapshots taken by ChromePic, we
suspect that the attackers are trying to monetize an advertisement
campaign that pays for every new “referred” installation of
the app. For instance,
the attack page contains a link to
click.info-apps[.]xyz and another to tracking.lenzmx[.]com with
a URL query parameter mb_campid=du_cleaner_tier2.
8Assuming the all_frames option is set to true in the manifest ﬁle.
9https://play.google.com/store/apps/details?id=com.gto.zero.zboost&hl=en
10sha1: 811b367c4901642ae41b4b8f0167eac2d3ac4039
8
(a)(b)(c)Fig. 6. Some of the screenshots captured by ChromePic during a phishing attack (the attack URL was ﬁrst reported in PhishTank, submission #4359181).
After a mouse click, the browser is redirected (via HTTP 302
redirections) through those two sites to the ﬁnal market://
URL referring to the GO Speed app. It is likely that the FakeAV-
like advertising tactics employed in this social engineering attack
are simply a way to convince more users to install the app and
(illicitly) increase revenue, in a way similar to how pay-per-install
networks [20], [46] monetize third-party software installations.
There is a small exception to be noted. ChromePic did not
take a screenshot of the alert popup window, which should have
been triggered by the user clicking on the OK button to close
the popup. The reason is that alert windows are rendered “out of
context” w.r.t. to browser tabs, and our current implementation
of ChromePic does not support taking a snapshot when users
interact with such alert windows (we plan to add support for
alert windows in future releases of ChromePic). However, it is
worth noting that by analyzing the DOM snapshots taken as the
user interacted with the attack page (at us.intellectual-82[.]xyz)
we were able to also reconstruct the content of the alert popup:
WARNING ! This Google Pixel C is infected with viruses and
your browser is seriously damaged. You need to remove viruses
and make corrections immediately. It is necessary to remove and
ﬁx now. Don’t close this window. ** If you leave , you will be
at risk **
B. Phishing Attack
Besides tracing-back the steps followed by users who reach
an attack page, ChromePic can also assist in understanding how
the user interacted with the attack itself. For instance, in the case
of phishing attacks, our webshots capture a wealth of information
about what data was leaked by the user. To demonstrate this,
we present an example of a recent phishing attack posted on
PhishTank (submission #435918111).
After using ChromePic to visit the phishing URL, which
impersonates a Brazilian banking website, we simulated the
actions of a user who falls for the attack by providing fake
information (due to format-checking javascript, we had to ﬁgure
out how to provide fake but syntax-compliant data). Figure 6
shows some of the snapshots taken by ChromePic as we interacted
with the attack website. Unlike other phishing attacks, which
are often limited to stealing the victim’s login credentials, this
attack is fairly sophisticated as it attempts to reproduce the entire
banking site. Once the user logs in (by providing his/her CPF12
code), the site claims the balance of the user’s bank account has
been hidden (presumably for security purposes) and must be
11http://www.phishtank.com/phish detail.php?phish id=4359181
12https://en.wikipedia.org/wiki/Cadastro de Pessoas F%C3%ADsicas
recovered. As the user clicks on a menu bar link, the site requires
the victim to ﬁll in a set of security codes, as shown in Figure 6b.
Notice that here the attacker is attempting to essentially steal the
user’s entire security code card13. By doing so, the attackers will
subsequently be able to perform any bank transaction operation
without being blocked by the real bank’s security mechanisms.
Finally, after the user provides the security code card information,
the phishing site also requests the user’s telephone number and
password (Figure 6c). Once this information is provided, the
site shows a “loading” animation that makes the user believe
his/her data is being veriﬁed (not shown in Figure 6 due to space
constraints). But at this point the attack has already succeeded.
C. ClickJacking Attacks
To demonstrate how ChromePic is able to also capture
clickjacking attacks, we reproduced two attacks described in [1]:
the Destabilizing Pointer Perception attack and the Peripheral
Vision attack. The (simulated) attacks, which we adapted from
publicly available code14 by the authors of [1], are available at
https://chromepic.github.io/clickjacking 15.
Destabilizing Pointer Perception: The attack is shown in Figure 7.
In this attack, the user intends to click on a “here” hyperlink.
However, as the mouse pointer approaches the link, the following
events occur: (1) a fake pointer is drawn that has a left-side
displacement error, compared to the real pointer (which is hidden);
(2) as the user brings the fake pointer on top of the link, the real
pointer is actually located on the Facebook Like button; (3)
because the Like button is rendered within a third-party frame,
the attack javascript cannot hide the mouse pointer at this time,
therefore, the attack instead draws other random mouse pointers
to confuse the user and effectively prevent the user from noticing
that the real mouse pointer is over the Like button; (4) as the
user attempts to click on “here,” the real click actually occurs
on the Like button, thus completing the clickjacking attack.
Figure 7 shows the screenshot taken by ChromePic at the
mouse down event. The center of the red circle is the exact
location where the user input event occurred. Notice that the
fake mouse pointers are captured by the screenshot, including
the pointer located over “here.” At the same time, the real mouse
pointer is not captured in the screenshot, because it is drawn by
13An English language explanation of how security code cards are used in
ﬁnancial applications can be found at this link: https://www.interactivebrokers.
com/en/?f=%2Fen%2Fgeneral%2FbingoHelp.php
14http://wh0.github.io/safeclick-blast/list.html
15The original attack code is currently broken due to a missing remote ﬁle;
after analyzing the code we found an easy ﬁx and we were able to recreate the
attacks.
9
(a)(b)(c)Fig. 7. Destabilizing pointer perception clickjacking attack.
Fig. 8. Reconstruction of code for generating fake pointers from ChromePic’s
DOM snapshots.
the OS, not rendered by the browser (only the fake pointers are
rendered by the browser). Nonetheless, the coordinates of the
real input event are recorded in our webshot, and it is therefore
straightforward to ﬁnd the correct location of where the real
mouse pointer was located and draw the red circle accordingly
over the screenshot. Also, by analyzing the DOM snapshots
produced by ChromePic, it is easy to recover the fact that the
mouse is hidden via CSS (using cursor:none), and to also
get the full source code for the javascript functions that enable
the attack, including the creation of fake mouse pointers (see
Figure 8).
Peripheral Vision: In this attack, the objective is to attract the
user’s attention towards an area of the screen that is far from
where the mouse clicks actually occur. To this end, a game is
setup, as shown in Figure 9. In this game, the user needs to
click on the Play button on the bottom left of the screen, so
to catch the moving L or R blocks within the purple box on the
right side of the screen. Because the user’s attention is drawn to
the right side, while the clicks occur on the bottom left, the user
may not notice that at some random convenient time the attacker
may replace the Play button with a Facebook Like button. If
the mouse click occurs when the Like button is displayed, the
clickjacking attack succeeds.
Figure 9 shows two screenshots, taken at two different
mousedown events. In the screenshot on the left, the user clicks
on the real Play button. The screenshot on the right shows that
at the second mousedown event the Play button had temporarily
(for only one second) been replaced with the Like button, which
received the user’s click. As can be seen, ChromePic correctly
captured the two events (the center of the red circle represents
the exact location where the user clicked). Notice that this attack
again has a signiﬁcant visual component that would be difﬁcult
to reconstruct by analyzing only the page DOM, and that we
were able to correctly capture it thanks to ChromePic’s ability
to take screenshots synchronously with the user inputs.
VII. PERFORMANCE EVALUATION
In this section, we present a set of experiments dedicated to
measuring the overhead introduced by webshots.
10
Fig. 9. Two screenshots that capture the peripheral vision clickjacking attack.
A. Experimental Setup
Our ChromePic browser is built upon Chromium’s codebase
version 50.0.2626.2. Our source code modiﬁcations amount to
approximately 2,000 lines of C++, and will be available at
https://chromepic.github.io/chromepic-browser/.
We evaluate ChromePic on both Android 6.0 on a Google
Pixel-C tablet with an Nvidia X1 quad-core CPU and 3GB of
RAM, as well as on two machines running Linux Ubuntu 14.04:
a Dell Optiplex 980 desktop machine with a quad-core Intel
Core-i7 processor and 8GB of RAM, and a Dell Inspiron 15
laptop with a Core-i7 CPU and 8GB of RAM.
B. User Study Setup
User Study 1: To evaluate the overhead imposed by our code
changes to Chromium, we perform a user study involving 22
distinct users (with IRB approval). Speciﬁcally, we compile our
ChromePic browser for both Linux and Android, and ask the
study participants to use the devices described earlier for generic
Internet browsing activities. Users were allowed to freely browse
any site of their choosing. The only restriction we imposed was
to avoid visiting any website containing personal data, such as
online banking sites, their Facebook page, etc., to avoid recording
any sensitive information. Each user was asked to perform one or
more browsing sessions on different devices, with each session
lasting approximately 15 minutes. Each user completed no more
than two separate browsing sessions per device (a few users
used only the Android and Linux laptop devices, and did not
browse on the desktop Linux machine). Overall, we collected
363 minutes of browsing activity on the Android tablet from
16 different users, 346 minutes on the Linux laptop from 15
users, and 286 minutes on the Linux desktop from 11 users
(more than 16.5 hours of browsing overall), which included
several thousands input events per device. The users visited more
than 1,600 different web pages (i.e., URLs) on 204 distinct web
sites (i.e., different effective second-level domains, including
google.com, youtube.com, amazon.com, and several other highly
popular sites), producing close to 6,000 webshots overall. Table I
reports a summary of the data we collected.
For this study, the browser was setup so that webshots are
active only on randomly selected pages. Namely, every time the
user navigates to a new page, the browser “ﬂips a coin” and
decides if the webshot logging capabilities should be activated
or not (other experiments described later had the webshot logs
always on). The reason for this is that we wanted to measure
and compare the time needed by the browser to process input
events with and without our code changes, to demonstrate that
our webshots do not impose any other input processing delay,
function distract() {    var img = document.createElement('img');    img.className = 'random';    img.src = 'http://i.imgur.com/EWmYMN2.png';    img.style.top = Math.random() * 160 + 160 + 'px';    img.style.left = Math.random() * 160 + 240 + 'px';    playarea.appendChild(img);    var dummy = img.clientHeight;    img.style.top = Math.random() * 160 + 160 + 'px';    img.style.left = Math.random() * 160 + 240 + 'px';    setTimeout(function () {        playarea.removeChild(img);    }, RANDOM_MOVE_TIME);}TABLE I.
DATA COLLECTED DURING User Study 1
Platform
# Users
Android
Linux laptop
Linux desktop
Total
16
15
11
22 (unique)
Browsing time
(minutes)
363
346
286
995
Sites visited
92
80
65
204 (unique)
Pages visited
(webshots on)
480
777
369
1626
Pages visited WebShot events
(webshots off)
479
746
404
1629
2428
2145
1376
5949
besides the actual time to record the logs. We comment on the
results of this experiment in Section VII-C (see also Figure 11).
User Study 2: We also performed a smaller targeted user study
involving 4 different users browsing on the Linux laptop device
(with webshots always on). In this study, we asked the users
to login into sites such as Facebook, Gmail, Twitter, Google
Drive, etc., using a “temporary” account we created only for this
study, which therefore contains no true personal information. This
experiment aimed at evaluating ChromePic’s overhead during
activities such as writing emails, writing Facebook/Twitter posts,
writing a GoogleDoc text document, etc. Overall, we collected 53
minutes of browsing time. The experimental results are discussed
in Section VII-C.
User Study 3: Finally, we performed a separate small user study
involving 6 users to evaluate the performance of ChromePicExt,
the extension-based implementation that attempts to record brows-
ing snapshots similar to the webshots recorded by ChromePic
(see Section V). We discuss the related results in Section VII-C.
C. ChromePic Performance Measurements
User Study 1: In Table II, we report a breakdown of the overhead
measurement results performed on browsing traces collected
during our User Study 1. Speciﬁcally, we report the 50th
percentile (i.e., the median) and 98th percentile of the time
required for taking screenshots, “deep” DOM snapshots, and for
the total webshots time. All numbers are in milliseconds.
To better explain how the measurements in Table II are
that occurs at
obtained,
let u(t0) be a user input event
let tsn be the
time t0, which triggers a webshot. Also,
time at which the screen_taken notiﬁcation is sent in
Figure 3 from the GL module to the Browser IO Thread.
Namely, this is the time when the screenshot has actually
been captured, and the user input can be processed (see
Section IV-D). On the other hand, let tsc be the time when
the CopyFromCompositingSurfaceFinished callback
is called. We deﬁne the screenshot notiﬁcation time as (tsn− t0),
the screenshot callback time as (tsc − t0).
Similarly, let td be the time at which the DOM snapshot
has been saved, and the user input can be further processed, as
discussed in Section IV-E (see also Figure 2), and δf be the
time taken to save the DOM snapshot to ﬁle using the MHTML
format. The DOM snapshot time with ﬁle write is computed as
(td − t0), whereas DOM snapshot time w/o ﬁle write is equal
to (td − δf − t0), which therefore excludes the time needed
to copy the snapshot to ﬁle. The reason why we measure this
latter quantity is that with some more engineering effort the
DOM snapshot ﬁle saving process could be moved to a separate
Renderer process thread, thus effectively decreasing the overhead