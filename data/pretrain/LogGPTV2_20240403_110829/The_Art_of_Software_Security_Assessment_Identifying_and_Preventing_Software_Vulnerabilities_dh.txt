registered has a impact on security. For example, take a look at the following server 
registration: 
RpcServerRegisterIfEx(hSpec, NULL, NULL, 0, 20, NULL) 
The preceding registration has fairly relaxed security compared with this one: 
RpcServerRegisterIfEx(hSpec, NULL, NULL, 
                      RPC_IF_ALLOW_LOCAL_ONLY, 20, 
                      MyCallback) 
This registration allows only locally originated requests to be processed and has a 
security callback function. Of course, having a security callback function isn't enough; 
it has to perform its job. You see how this is done in "Authenticating Requests" later 
in this chapter. 
Binding to an Endpoint 
After an interface is registered with the RPC runtime, the server needs to bind to 
endpoints so that clients can contact it, which is a two-step process. The first step is 
to register protocol sequences that the server should accept connections on. These 
protocol sequences are the ones described previously in the "RPC Transports" section. 
They are bound by using the RpcServerUseProtseq() family of functions. Take a look at 
the prototype for RpcServerUseProtseq(): 
RPC_STATUS RPC_ENTRY RpcServerUseProtseq(unsigned char *ProtSeq, 
        unsigned int MaxCalls, void *SecurityDescriptor) 
This function causes the current process to listen for RPC requests over a specific 
protocol, so it affects all RPC servers in the current process. Each call allows you to 
specify one protocol sequence as the first parameter, so an RPC server listening on 
multiple transports needs to call this function multiple times. The protocol sequence 
functions can optionally take a security descriptor for the ncalrpc and ncan_np 
protocol sequences. This security descriptor is the most effective method of 
restricting RPC connections to a specific group of users. 
The RpcServerUseProtseqEx() functions add the capability to include a transport policy 
as part of the protocol registration. Including the transport policy allows developers to 
restrict the allocation of dynamic ports and selectively bind interfaces on multihomed 
computers. Although this level of specificity isn't required for many applications, 
certain deployment environments might necessitate it. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
729 
Up to this point, the RpcServerUseAllProtseqs() family of functions haven't been 
discussed. However, it's important to make note of these functions because their use 
generally presents an unnecessarily high security risk and should be reviewed closely 
when encountered. These functions bind to all available interfaces, potentially 
creating a dangerous exposure of the RPC server. In particular, they might bind to 
interfaces with insufficient access control or interfaces on hostile networks. 
Note 
Don't forget that protocol registration affects all RPC servers in the process. This 
means any servers with differing protocol security must run in different processes. 
The next part of binding involves registering the endpoints for each protocol sequence. 
The endpoint is protocol-specific information required for contacting the RPC server. 
For example, the TCP protocol sequence uses a TCP port for its endpoint. Endpoints 
are registered with the RpcEpRegister() function, which works as shown: 
RPC_STATUS RPC_ENTRY RpcEpRegister(RPC_IF_HANDLE IfSpec, 
        RPC_BINDING_VECTOR *BindingVector, 
        UUID_VECTOR *UuidVector, unsigned char *Annotation) 
This function supplies the endpoint mapper with the endpoints of an RPC interface. 
The first parameter is RPC_IF_HANDLE, mentioned in the previous section. The next two 
parameters contain vectors of binding handles and UUIDs to register with the 
endpoint mapper. 
Some utility methods simplify endpoint registration, however. The 
RpcServerUseProtseqEp() can be used to register the endpoint and protocol sequence 
in a single call. However, the easiest way to handle registration is to use the 
RpcServerUseProtseqIf() functions; they register all endpoints specified in the IDL 
file. 
Listening for Requests 
The only thing left in setting up the server is to listen for RPC requests by using the 
RpcServerListen() function. This function isn't that interesting, except it indicates 
that the server application is expecting requests from that point forward and 
potentially exposed to malicious input. All code to handle those requests is indicated 
in the previous steps of interface registration. 
Authentication 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
730 
As you would expect, the attack surface of an RPC application depends heavily on the 
level of authentication it requires. Windows provides several different levels of 
authentication, which are layered on top of each other. This means each new level of 
authentication performs the authentication of the previous levels and adds some 
requirements. The authentication levels are listed in ascending order: 
RPC_C_AUTHN_LEVEL_DEFAULT Default level of authentication chosen by the 
current OS settings. (This level is not additive.) 
RPC_C_AUTHN_LEVEL_NONE No authentication; any anonymous user can access 
the service 
RPC_C_AUTHN_LEVEL_CONNECT Authentication is done only at connection 
establishment and not for individual calls. 
RPC_C_AUTHN_LEVEL_CALL This level specifies that users must authenticate for 
each procedure call they make. It's intended primarily for use with 
connectionless transports. 
RPC_C_AUTHN_LEVEL_PKT This level ensures that any data received is from the 
client that originally established the connection. No data validation is 
performed, however. 
RPC_C_AUTHN_LEVEL_PKT_INTEGRITY This level is like RPC_C_AUTHN_LEVEL_PKT, 
except it also ensures that no data has been modified en route. 
RPC_C_AUTHN_LEVEL_PKT_PRIVACY This level does the same as 
RPC_C_AUTHN_LEVEL_PKT_INTEGRITY and uses encryption to ensure that third 
parties can't read data being transmitted. 
In addition to the authentication level performed on incoming packets, programmers 
can also select the services for authenticating clients. These authentication services 
include NTLM authentication and Kerberos. There's also the provision for no 
authentication, indicated by the RPC_C_AUTHN_NONE constant. 
Each authentication service must be registered by calling 
RpcServerRegisterAuthInfo() with the appropriate parameters for the service. For 
most applications, RPC_C_AUTHN_GSS_NEGOTIATE provides the best results, as it 
attempts to use Kerberos authentication but can downgrade to NTLM if required. You 
should be wary of any application that doesn't require at least an 
RPC_C_AUTHN_LEVEL_CONNECT authentication, using the RPC_C_AUTHN_GSS_NEGOTIATE 
service or better. 
Authenticating Requests 
You've seen how the server can restrict interfaces and provide a basic authentication 
requirement, but what about authenticating the actual calls and providing 
authorization? RPC authorization and authentication are specific to a binding. You 
know that a server can provide a DACL for a binding, which should be the foundation 
of any RPC security. However, two routines can be used in a security callback (or in a 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
731 
call itself, for that matter) to provide detailed client authentication information from a 
binding handle. The first is as follows: 
RPC_STATUS RPC_ENTRY RpcBindingInqAuthClient( 
        RPC_BINDING_HANDLE ClientBinding, 
        RPC_AUTH_HANDLE *Privs, unsigned char **ServerPrincName, 
        unsigned long *AuthnLevel, unsigned long *AuthnSvc, 
        unsigned long *AuthsSvc) 
The second and third parameters of this function provide all authentication 
information associated with the client's binding handle. The remaining parameters 
cover the authentication of the client requests. When supporting the 
RPC_C_AUTHN_WINNT service, the final parameter is always RPC_C_AUTHZ_NONE. 
The RpcBindingInqAuthClient() function is superseded in Windows XP and later by 
the following function: 
RPCRTAPI RPC_STATUS RPC_ENTRY RpcServerInqCallAttributes( 
        RPC_BINDING_HANDLE ClientBinding, 
        void *RpcCallAttributes) 
This function meets the same requirements as RpcBindingInqAuthClient() and 
provides additional client binding information. This information is returned in the 
second parameter in the RPC_CALL_ATTRIBUTES_V2 structure. In addition to the 
authentication level and service, it indicates whether a NULL session is used, what 
protocol sequence is used, whether the client is local or remote, and a multitude of 
other useful tidbits. Note that this function isn't supported over ncacn_dg protocols, so 
the return values need to be checked to make sure the function was able to obtain the 
correct information. 
Impersonation in RPC 
RPC can impersonate authenticated clients via the same basic infrastructure as 
named pipes. Generally, it's the most effective method for accessing secure objects 
safely in the calling user's context. It allows developers to use the familiar DACL 
structure on objects and place the burden of security enforcement on the OS. An RPC 
server can impersonate a client with one of two functions: RpcImpersonateClient() 
and RpcGetAuthorizationContextForClient(). The prototypes for these functions are 
explained in the following paragraphs. 
The following function impersonates the client indicated by the binding handle: 
RPC_STATUS RPC_ENTRY RpcImpersonateClient( 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
732 
        RPC_BINDING_HANDLE BindingHandle) 
The BindingHandle parameter can be 0, in which case the server impersonates the 
context of the client currently being served by the thread. This function is the primary 
mechanism used for impersonation of a client. 
The main purpose of the following function is to return an 
AUTHZ_CLIENT_CONTEXT_HANDLE structure that represents the client indicated by the 
first parameter: 
RPC_STATUS RPC_ENTRY RpcGetAuthorizationContextForClient( 
        RPC_BINDING_HANDLE ClientBinding, 
        BOOL ImpersonateOnReturn, PVOID Reserved1, 
        PLARGE_INTEGER pExpirationTime, LUID Reserved2, 
        DWORD Reserved3, PVOID Reserved4, 
        PVOID *pAuthzClientContext) 
Of particular interest is the ImpersonateOnReturn parameter. If it's set to true, the 
function impersonates the client indicated by the ClientBinding binding handle, just 
as though RpcImpersonateClient() has been called. 
When auditing RPC applications, you need to be aware of how clients can restrict 
servers' capability to impersonate them. Neglecting to take this step might expose a 
client's credentials to a malicious server. A client application can enforce 
impersonation restrictions on a per-binding basis with RpcBindingSetAuthInfoEx(). 
This function has the following prototype: 
RPC_STATUS RPC_ENTRY RpcBindingSetAuthInfoEx( 
        RPC_BINDING_HANDLE Binding, 
        unsigned char PAPI *ServerPrincName, 
        unsigned long AuthLevel, unsigned long AuthnSvc, 
        RPC_AUTH_IDENTITY_HANDLE AuthIdentity, 
        unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQOS) 
Note the last parameter, which points to an RPC_SECURITY_QOS structure. Although 
there are several variations of this structure, depending on the version, each has an 
ImpersonationType member that indicates what level of impersonation a server can 
use with the connecting client. The legal values for this member are as follows: 
RPC_C_IMP_LEVEL_DEFAULT Use the default impersonation level. 
RPC_C_IMP_LEVEL_ANONYMOUS Use the SecurityAnonymous impersonation level. 
RPC_C_IMP_LEVEL_IDENTIFY Use the SecurityIdentify impersonation level. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
733 
RPC_C_IMP_LEVEL_IMPERSONATE Use the SecurityImpersonate impersonation 
level. 
RPC_C_IMP_LEVEL_DELEGATE Use the SecurityDelegation impersonation level 
(cloaking). 
Of these values, obviously the most dangerous are RPC_C_IMP_LEVEL_IMPERSONATE and 
RPC_C_IMP_LEVEL_DELEGATE. By permitting either impersonation level, the client allows 
the server to make use of its credentials. The delegation impersonation level extends 
the server's capabilities even more than typical impersonations. It allows the server 
to authenticate across the network on behalf of the clientthat is, the server can access 
anything on the network as though it's the connected client. You should inspect any 
code using either value to ensure that impersonation is required and being used 
properly. 
Note 
If the local RPC endpoint is used (ncalrpc), RPC_C_IMP_LEVEL_IMPERSONATE and 
RPC_C_IMP_LEVEL_DELEGATE are equivalent. Even if RPC_C_IMP_LEVEL_IMPERSONATE is 
used, the server is permitted to make network accesses on behalf of the client. 
As with named pipes, failure to check return values of impersonation functions can 
result in an RPC request being given more privileges than it's supposed to have. In 
fact, this type of error is even more relevant in RPC because many factors can cause 
impersonation functions to fail. 
Context Handles and State 
Before you go any further, you need to see how RPC keeps state information about 
connected clients. RPC is inherently stateless, but it does provide explicit mechanisms 
for maintaining state. This state information might include session information 
retrieved from a database or information on whether a client has called procedures in 
the correct sequence. The typical RPC mechanism for maintaining state is the 
context handle, a unique token a client can supply to a server that's similar in 
function to a session ID stored in an HTTP cookie. From the server's point of view, the 
context handle is a pointer to the associated data for that client, so no special 
translation of the context handle is necessary. The server just refers to a context 
handle as though it's a void pointer. Of course, transmitting a pointer to a potentially 
malicious client would be extremely dangerous. Instead, the RPC runtime sends the 
client a unique context token and translates the token back to the original pointer 
value on receipt. Context handles aren't a mandatory part of RPC and aren't required 
to make an RPC program work. However, most RPC services require context handles 
to function properly and prevent disclosing any sensitive information to the client. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
734 
Context handles are useful for maintaining application state; however, they aren't 
intended for maintaining authentication state. A context handle could be exposed to 
malicious users in a variety of ways, such as by sniffing the network transport or 
through the actions of a malicious client. Another RPC interface might even reveal the 
context handle if strict context handles aren't used. This simple interface uses a 
context handle for security purposes: 
BOOL LogonUser([out] PCONTEXT_HANDLE ctx) 
BOOL LogoffUser([in] PCONTEXT_HANDLE ctx) 
BOOL GetTableList([in] PCONTEXT_HANDLE ctx, 
       [out] PTABLE_DESCRIPTOR tables) 
BOOL JoinTable([in] PCONTEXT_HANDLE ctx, [in] int table_id) 
BOOL SitOut([in] PCONTEXT_HANDLE ctx) 
BOOL SetBack([in] PCONTEXT_HANDLE ctx) 
BOOL CashIn([in] PCONTEXT_HANDLE ctx, 
       [in] PCREDIT_CARD ccDetails) 
BOOL CashOut([in] PCONTEXT_HANDLE ctx, 
       [out] PMAIL_INFO mailInfo) 
This interface represents a simple RPC poker game that uses a context handle to 
maintain the session. The first step in using this application is to log in. Like any 
well-behaved RPC service, this application determines the user's identity via native 
RPC authentication, but after that, it relies on the context handle. So your first 
consideration is whether that context handle can be exposed to anyone. For instance, 
most RPC interfaces don't require an encrypted channel, so attackers might be able to 
sniff the context handle over the network. After attackers have the context handle, 
they can take control of the session and steal a player's winnings. 
Strict Context Handles 
Generally, an RPC interface has no need to share a context handle with another 
interface. However, the RPC subsystem has no way of determining this implicitly. So 
the RPC service normally accepts any valid context handle, regardless of the 
originating interface. Developers can prevent this issue by using strict context 
handles defined by using the strict_context_handle attribute. A strict context handle 
is valid only for the originating interface, and the originator doesn't accept context 
handles from any other interface. 
In the poker example, context handles are used to validate authentication. If this 
interface fails to use strict context handles, attackers could go to an unrelated 
interface and receive a valid context handle for the poker interface. A nonstrict 
context handle allows attackers to bypass the authentication system easily because 
the application checks credentials only in the logon method. If attackers provide a 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
735 
handle from another interface, they have implicit access to all methods of the poker 
interface. 
Of course, the poker game probably won't do well if attackers provide a context 
handle from another interface. Effectively, they are just giving the application an 
arbitrary data structure that has no relation to what it expects. This input would 
probably cause a crash or throw some other error. However, what would happen if the 
other interface could be manipulated enough to make the arbitrary structure 
recognizable to the poker game? The following structure represents the context for 
the poker game followed by an implementation of the CashOut() function: 
// Game implementation 
struct GAME_CONTEXT { 
    long iBalance; 
    BOOLEAN isComplete; 
    HAND myHand; 
} 
BOOL CashOut(PCONTEXT_HANDLE ctx, PMAIL_INFO mailInfo) { 
    struct GAME_CONTEXT *game = ctx; 
    if (game->isComplete) { 
        DepositWinnings(game->iBalance); 
        return TRUE; 
    } 
    return FALSE; 
} 
... more game handling functions ... 
Now you need to consider another interface on the same server. Assume the poker 
game is part of a casino application that exposes a separate RPC interface for account 
management. The following code is the context structure for the account 
management interface, along with a function to update account information: 
// Account implementation 
struct ACCT_CONTEXT { 
    long birthDate; 
    char sName[MAX_STR]; 
    char sAcctNum[MAX_STR]; 
} 
void UpdateAcctInfo(PCONTEXT_HANDLE ctx, long bDate, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
736 
                    char *name, char *acctnum) { 
    struct ACCT_CONTEXT *acct = ctx; 
    acct->birthDate = bDate; 
    strncpy(acct->sName, name, MAX_STR - 1); 
    strncpy(acct->sAcctNum, acctnum, MAX_STR - 1); 
} 
... more account management functions ... 
This example is simple, but it should help make the vulnerability apparent. Attackers 
could use these interfaces to build an account structure with an extremely large 
balance. All that's necessary is calling the UpdateAcctInfo() function and passing a 
large value as the bDate parameter. Then attackers can call the CashOut() function on 
the poker interface. This interface pays out the amount passed as bDate in the earlier 
call because birthDate in ACCT_CONTEXT is at the same offset as iBalance in 
GAME_CONTEXT. So attackers can simply log in to the account manager interface, select 
how much money they want, and then cash out of the poker game. This example is 
contrived, but it does demonstrate the point of this attack. A real vulnerability is 
usually more complicated and has a more immediate impact. For example, a context 
handle pointing to a C++ class instance might allow attackers to overwrite vtable and 
function pointers, resulting in arbitrary code execution. 