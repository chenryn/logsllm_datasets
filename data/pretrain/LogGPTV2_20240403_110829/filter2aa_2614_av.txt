入，为了满足这种权限的要求，安装门禁作为访问控制措施。如果一个
普通员工具备了访问资料室的权限，通常是门禁系统的授权管理出现了
错误；如果资料室没有安装门禁或门禁失效，导致普通员工可以进入资
料室，这是访问控制措施的错误。访问控制的本质是防止对未授权资源
的任意访问，保障资源在授权范围内的合理使用。
访问控制通常有三个要素组成：主体、客体、控制策略。
■ 
主体是指访问动作的发起者，一般是某个用户、应用程序以及
API端点。
■ 
客体是指被访问的对象，一般是模块、功能、菜单、按钮、链
接、数据、资源、API端点等。
■ 控制策略是指为了满足授权要求而制定的控制规则。
假设存在着这样一条访问控制规则：外包人员只允许在135:00点之
后才可以进入机房进行维护操作。那么这里的外包人员是主体，客体是
机房及机房中的资源，控制策略是135:00点之后可以访问。
在API安全技术领域，访问控制主要体现在对API端点的访问控制
（如接口调用、限速、限流等）、对API接口中数据的访问控制两个
方面。访问控制机制的缺失或不完善也是导致出现OWASP API安全问
题中失效的对象级访问控制、失效的功能级访问控制两类问题的重要
原因。
8.2 API授权与访问控制技术
授权与访问控制相关的技术在计算机领域有很多应用场景，比如网
络层常用的访问控制列表ACL、主机层常用的iptables、应用层常用的基
于角色的权限访问控制模型RBAC等。授权作为权限管理的决策机制，
明确了权限与用户、角色的关系；访问控制作为执行单元，将权限管理
落实到位。它们共同协作，维护着信息系统的稳定。
在API安全技术中，授权与访问控制相关的技术比较分散，其中典
型的有基于使用者身份或资源的授权协议OAuth和基于使用者角色的授
权与访问控制技术的RBAC模型。下面就这两部分内容，向读者做详细
的介绍。
8.2.1 OAuth 2.0协议
基于HTTP的OAuth协议因用户资源授权和委托访问控制在API技术
应用中被广泛使用，无论是国内互联网厂商还是国外互联网厂商，在它
们的互联网应用中都能看到OAuth的身影，比如微软Azure、亚马逊
AWS、阿里云等。OAuth协议共有两个版本，考虑到协议的安全性和易
用性，这里讨论的OAuth协议的版本为2.0版本。
1.OAuth 2.0协议相关概念
OAuth协议的产生是为了解决无须共享密码的情况下，从第三方应
用程序安全地访问受保护数据、资源的问题。在OAuth协议的核心规范
中，对于OAuth的授权流程定义了不同的角色，通过不同角色之间不同
概念的信息传递对象的交互，完成整个授权流程。在讨论OAuth协议的
技术细节之前，先来了解一下OAuth协议中的几个基本概念。
（1）基本术语
在OAuth协议中，参与授权流程的4个角色分别如下。
■ 资源所有者（Resource Owner）：是指受保护资源的所有者，
当受保护资源被访问时，需要此所有者授予访问者访问权限。如果资源
所有者是一个自然人时，即表示为最终用户。
■ 资源服务器（Resource Server）：是指托管接受保护资源的服
务器，接收访问请求并使用访问令牌保护受保护的资源。
■ 客户端（Client）：通常是指代理用户发起受保护资源请求的客
户端应用程序。
■ 授权服务器（Authorization Server）：客户端通过认证后，授权
服务器会向客户端发布访问令牌并获得授权。
在OAuth协议中，除了43个参与授权流程的角色外，还定义了两个
特殊的信息传递对象，分别如下。
■ 访问令牌（Access Token）：是客户端应用程序访问受保护资源
的凭据，没有访问令牌则无法访问受保护的资源。此令牌通常是授权服
务器颁发的具有一定含义的字符串，包含此次授权的基本信息、授权
范围、授权有效时间等信息。
■ 刷新令牌（Refresh Token）：一般由授权服务器颁发，但有的
授权服务器不颁发刷新令牌。当访问令牌过期或失效时，客户端可以使
用刷新令牌接口来重新获取新的访问令牌，新的访问令牌包含授权信
息、授权范围、持续时间等。对于刷新令牌的使用，其基本流程如图8-
1所示。
（2）授权流程
在这43个角色之间，通过认证、授权、访问令牌等操作，完成基本
的OAuth协议授权交互流程，如图8-2所示。
1）客户端应用程序向资源所有者发送授权请求，这里的客户端是
指普通的Web API、原生移动App、基于浏览器的Web应用以及无浏览
器的嵌入式后端应用，在流程中充当用户行为代理。
2）资源所有者同意授权客户端访问资源，即获得资源所有者的授
权凭据，包含授权范围和授权类型。
●图8-1 使用刷新令牌的工作流程
●图8-2 OAuth协议授权交互流程
3）客户端使用上一步获得的授权凭据，向授权服务器进行身份认
真并申请访问令牌Access Token。
4）授权服务器对客户端进行身份认证，确认身份无误后，下发访
问令牌Access Token。
5）客户端使用上一步获得的访问令牌Access Token，向资源服务器
申请获取受保护的资源。
6）资源服务器确认访问令牌Access Token正确无误后，向客户端开
放所访问的资源。
以上是OAuth协议授权的基本流程，通过对这63个步骤的分析可以
看出，其中资源所有者授权给客户端和颁发访问令牌Access Token在流
程中起到了关键作用。那么详细的授权流程是如何操作的呢？下面一起
来看看OAuth协议的授权过程。
2.OAuth 2.0协议的授权过程
（1）授权方式
OAuth协议核心文档定义了资源所有者给予客户端授权的4种方
式。
■ 授权码模式：通过授权服务器获得授权码作为客户端和资源所有
者之间的中介，再通过资源服务器获得所访问资源。
■ 简化授权模式：即简化的授权码流程，又称隐式流模式，适用于
在浏览器中使用脚本语言的客户端，客户端直接获得访问令牌Access
Token，而无须客户端授权码。
■ 密码模式：资源所有者的认证凭据（即用户名和密码）直接用作
授权以获得访问权限。
■ 客户端凭证模式：采用客户端凭据作为授权依据，获取资源的访
问权限。
（2）授权码模式
授权码模式是OAuth协议中主要的授权流程，相比其他的授权模
式，其流程最为完备，适用于互联网应用的第三方授权场景，典型特点
如下。
■ 
可以同时获得访问令牌Access 
Token和刷新令牌Refresh
Token。
■ 基于重定向的授权流程，客户端网络必须与资源所有者网络环境
联通。
■ 需要通过浏览器交互和资源所有者参与，适用于带有Server端的
应用程序，比如Web应用软件、网站或带有Server端的移动端/桌面客户
端应用程序等。
授权码模式的工作流程如图8-3所示。
●图8-3 授权码模式工作流程
1）用户或资源所有者通过浏览器访问客户端应用程序。
2）客户端应用程序检测是否已获得授权许可，若未授权则通过浏
览器将请求重定向到授权服务器，启动授权码流程。此时的请求报文格
式如下：
此请求必须使用如下参数信息。
■ 
response_type：对于使用授权码方式的客户端，其值设置为
code。
■ client_id：是指客户端应用程序注册时获得，系统应用程序分配
的id值。
■ scope：是用空格分隔的请求范围值列表，指请求的令牌范围。
■ redirect_uri：是将授权通过后的响应发送到的重定向URI，如果
缺省，则默认为客户端应用程序注册时填写的页面。
■ state：随机字符串，用于维持请求和回调之间的状态。不是必选
项，但强烈建议使用此参数。
3）用户确认客户端应用程序的授权许可，如果用户未登录，则一
般显示登录页面提示用户登录后再进行授权许可的确认。
4）授权服务器接收到用户授权许可确认后，携带授权码跳转到客
户端应用程序，进行下一步的访问。如果未授权，则返回错误码。携带
授权码的请求报文格式如下所示：
其中，参数code值为授权码，下一步获取访问令牌Access Token时
将使用该值；state值与第2）步的值一致，用于客户端参数校验。
5）客户端应用程序携带授权码，以授权码方式请求访问令牌
Access Token。此时，一般请求授权服务器的/token路径，请求报告格式
如下所示：
此时，客户端应用程序与所访问资源之间仍然是不透明的，需要将
授权码转换为访问令牌Access Token后才有用。此次的请求有如下两个
特点。
■ 
客户端认证：客户端ID和密码通过Authorization标头传递，同
时，在OAuth协议中，也支持JWT进行身份认证，保证认证信息的机密
性。
■ 使用授权码方式：授权类型改为授权码方式，通过此授权方式获
取访问令牌Access Token的JSON对象值。
这次请求中有3个参数，其信息如下。
■ 
grant_type：使用授权码方式的客户端授权，这里的值为固定
值，填入authorization_code。
■ code：上一步使用的授权码，继续传递给授权服务器。
■ redirect_uri：重复上一步重定向的URI值。
6）请求成功后，授权服务器返回访问令牌Access Token。其应答消
息格式如下所示：
7）客户端应用程序携带访问令牌Access Token，请求受保护资源，
资源服务器将请求转发授权服务器验证Access Token的有效性，如果验
证通过，跳转到之前的请求URL，开放资源访问。如果验证失败，则需
要使用刷新令牌，重新申请访问令牌。使用刷新令牌获取访问令牌的请
求消息格式如下所示：
这次请求中有两个参数，其信息如下。
■ grant_type：这里的值为固定值，填入refresh_token。
■ refresh_token：之前授权服务器授权成功后返回给Server端应用
程序的刷新令牌。
8）资源服务器响应请求，将受保护的资源信息展现给浏览器。
（3）简化授权模式