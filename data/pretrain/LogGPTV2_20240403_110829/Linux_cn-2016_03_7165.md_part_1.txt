---
author: Gabriel Cánepa
category: 技术
comments_data:
- date: '2016-03-29 18:58:06'
  message: "输入 a4yy 复制当前行和接下来的 3 行，进入一个名为 a 的缓存区。我们可以继续编辑我们的文件————我们不需要立即插入刚刚复制的行。&nbsp;
    &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
    &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;\r\n我输入完a,就进入输入模式了。。。。。。。。。。。。。。"
  postip: 61.156.102.15
  username: yiqihaha [Chrome 49.0|Windows 10]
- date: '2016-03-29 19:20:37'
  message: 抱歉，丢了内容了，是 &quot;a 表示名为 a 的缓存区，前面有个双引号。
  postip: 111.197.255.204
  username: linux [Chrome 49.0|Mac 10.11]
- date: '2016-04-19 16:57:55'
  message: a也会进入编辑模式，你可以换个名字啊 比如 b4yy
  postip: 222.223.206.250
  username: 来自河北石家庄的 Chrome 49.0|Windows 7 用户
count:
  commentnum: 3
  favtimes: 9
  likes: 0
  sharetimes: 0
  viewnum: 11597
date: '2016-03-29 08:30:00'
editorchoice: false
excerpt: 在这个部分中，我们会介绍 vi/vim 基本的文件编辑操作，帮助读者理解编辑器中的三个模式，这是 LFCS 认证考试中必须掌握的。
fromurl: http://www.tecmint.com/vi-editor-usage/
id: 7165
islctt: true
largepic: /data/attachment/album/201603/29/053546aftwkut8h2uvhb2f.png
permalink: /article-7165-1.html
pic: /data/attachment/album/201603/29/053546aftwkut8h2uvhb2f.png.thumb.jpg
related:
- displayorder: 0
  raid: 7161
- displayorder: 1
  raid: 7171
reviewer: ''
selector: ''
summary: 在这个部分中，我们会介绍 vi/vim 基本的文件编辑操作，帮助读者理解编辑器中的三个模式，这是 LFCS 认证考试中必须掌握的。
tags:
- LFCS
- vi
- vim
- 编辑器
thumb: false
title: LFCS 系列第二讲：如何安装和使用纯文本编辑器 vi/vim
titlepic: false
translator: GHLandy
updated: '2016-03-29 08:30:00'
---
几个月前， Linux 基金会发起了 LFCS （ Linux 基金会认证系统管理员   （    Linux Foundation Certified System administrator    ） ）认证，以帮助世界各地的人来验证他们能够在 Linux 系统上做基本的中级系统管理任务：如系统支持、第一手的故障诊断和处理、以及何时向上游支持团队提出问题的智能决策。
![Learning VI Editor in Linux](/data/attachment/album/201603/29/053546aftwkut8h2uvhb2f.png)
*在 Linux 中学习 vi 编辑器*
请简要看看一下视频，里边介绍了 Linux 基金会认证的程序。
这篇文章是系列教程的第二讲，在这个部分中，我们会介绍 vi/vim 基本的文件编辑操作，帮助读者理解编辑器中的三个模式，这是 LFCS 认证考试中必须掌握的。
### 使用 vi/vim 执行基本的文件编辑操作
vi 是为 Unix 而生的第一个全屏文本编辑器。它的设计小巧简单，对于仅仅使用过诸如 NotePad++ 或 gedit 等图形界面的文本编辑器的用户来说，使用起来可能存在一些困难。
为了使用 vi，我们必须首先理解这个强大的程序操作中的三种模式，方便我们后边学习这个强大的文本处理软件的相关操作。
请注意，大多数的现代 Linux 发行版都集成了 vi 的变种——— vim（ 改进版 VI   （    Vi IMproved    ） ），相比于 vi，它有更多新功能。所以，我们会在本教程中交替使用 vi 和 vim。
如果你的发行版还没有安装 vim，你可以通过以下方法来安装：
* Ubuntu 及其衍生版：apt-get update && apt-get install vim
* 以 Red-Hat 为基础的发行版：yum update && yum install vim
* openSUSE ：zypper update && zypper install vim
### 我为什么要学习 vi
至少有以下两个理由：
1. 因为它是 POSIX 标准的一部分，所以不管你使用什么发行版 vi 总是可用的。
2. vi 基本不消耗多少系统资源，并且允许我们仅仅通过键盘来完成任何可能的任务。
此外，vi 有着非常丰富的内置帮助手册，程序打开后就可以通过 `:help` 命令来查看。这个内置帮助手册比 vi/vim 的 man 页面包含了更多信息。
![vi Man Pages](/data/attachment/album/201603/29/053547pjeg7wb5qwtzc0rc.png)
*vi Man 页面*
#### 启动 vi
可以通过在命令提示符下输入 vi 来启动。
![Start vi Editor](/data/attachment/album/201603/29/053547utc985cm8c8n52nm.png)
*使用 vi 编辑器*
然后按下字母 i，你就可以开始输入了。或者通过下面的方法来启动 vi：
```
# vi filename
```
这样会打开一个名为 filename 的 缓存区   （    buffer    ） （稍后会详细介绍缓存区），在你编辑完成之后就可以存储在磁盘中了。
#### 理解 vi 的三个模式
1. 在 命令   （    command    ） 模式中，vi 允许用户浏览该文件并输入由一个或多个字母组成的、简短的、大小写敏感的 vi 命令。这些命令的大部分都可以增加一个前缀数字表示执行次数。  
比如：`yy`（或`Y`） 复制当前的整行，`3yy`（或`3Y`） 复制当前整行和下边紧接着的两行（总共3行）。通过 `Esc` 键可以随时进入命令模式（而不管当前工作在什么模式下）。事实上，在命令模式下，键盘上所有的输入都被解释为命令而非文本，这往往使得初学者困惑不已。
2. 在 末行   （    ex    ） 模式中，我们可以处理文件（包括保存当前文件和运行外部程序）。我们必须在命令模式下输入一个冒号（`:`），才能进入这个模式，紧接着是要在末行模式下使用的命令。执行之后 vi 自动回到命令模式。
3. 在 文本输入   （    insert    ） 模式（通常在命令模式下使用字母 `i` 进入这个模式）中，我们可以随意输入文本。大多数的键入将以文本形式输出到屏幕（一个重要的例外是`Esc`键，它将退出文本编辑模式并回到命令模式）。
![vi Insert Mode](/data/attachment/album/201603/29/053548zzn3t0oq01qtfq1a.png)
*vi 文本插入模式*
#### vi 命令
下面的表格列出常用的 vi 命令。文件编辑的命令可以通过添加叹号的命令强制执行（如，`:q!` 命令强制退出编辑器而不保存文件）。
| 关键命令 | 描述 |
| --- | --- |
| `h` 或 ← | 光标左移一个字符 |
| `j` 或 ↓ | 光标下移一行 |
| `k` 或 ↑ | 光标上移一行 |
| `l` (小写字母 L) 或 → | 光标右移一个字符 |
| `H` | 光标移至屏幕顶行 |
| `L` | 光标移至屏幕末行 |
| `G` | 光标移至文件末行 |
| `w` | 光标右移一个词 |
| `b` | 光标左移一个词 |
| `0` (数字零) | 光标移至行首 |
| `^` | 光标移至当前行第一个非空格字符 |
| `$` | 光标移至当前行行尾 |
| `Ctrl-B` | 向后翻页 |
| `Ctrl-F` | 向前翻页 |
| `i` | 在光标所在位置插入文本 |
| `I` (大写字母 i) | 在当前行首插入文本 |
| `J` (大写字母 j) | 将下一行与当前行合并（下一行上移到当前行） |
| `a` | 在光标所在位置后追加文本 |
| `o` (小写字母 O) | 在当前行下边插入空白行 |
| `O` (大写字母 O) | 在当前行上边插入空白行 |
| `r` | 替换光标所在位置的一个字符 |
| `R` | 从光标所在位置开始覆盖插入文本 |
| `x` | 删除光标所在位置的字符 |
| `X` | 立即删除光标所在位置之前（左边）的一个字符 |
| `dd` | 剪切当前整行文本（为了之后进行粘贴） |
| `D` | 剪切光标所在位置到行末的文本（该命令等效于 `d$`） |
| `yX` | 给出一个移动命令 X （如 `h`、`j`、`H`、`L` 等），复制适当数量的字符、单词或者从光标开始到一定数量的行 |
| `yy` 或 `Y` | 复制当前整行 |
| `p` | 粘贴在光标所在位置之后（下一行） |
| `P` | 粘贴在光标所在位置之前（上一行） |
| `.` (句点) | 重复最后一个命令 |
| `u` | 撤销最后一个命令 |
| `U` | 撤销最后一行的最后一个命令，只有光标仍在最后一行才能执行。 |
| `n` | 在查找中跳到下一个匹配项 |
| `N` | 在查找中跳到前一个匹配项 |
| `:n` | 下一个文件，编辑多个指定文件时，该命令加载下一个文件。 |
| `:e file` | 加载新文件来替代当前文件 |