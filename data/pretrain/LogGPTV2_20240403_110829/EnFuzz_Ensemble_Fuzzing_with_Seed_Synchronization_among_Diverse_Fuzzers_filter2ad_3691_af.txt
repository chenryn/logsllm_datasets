### Diversity Calculation
The diversity of a fuzzer can be calculated using the following formula:
\[ \text{diversity} = \frac{1}{n} \sum_{i=1}^{n} (2 - \text{mean}) \]

For example, consider the diversity values for AFLFast, FairFuzz, Radamsa, QSYM, and libFuzzer as shown in Table 14 of the appendix. Compared to AFL, the diversities are:
- AFLFast: 0.040
- FairFuzz: 0.062
- Radamsa: 0.197
- QSYM: 0.271
- libFuzzer: 11.929

Similarly, the deviation in branches covered and bugs detected can be calculated. These three values (diversity, branch coverage deviation, and bug detection deviation) can be combined with different weights to quantify the final diversity. For instance, the bug detection deviation should be given more weight because prior research indicates that coverage metrics (number of paths or branches) do not always correlate well with the number of bugs found.

A more advanced method to evaluate diversity would be to count the number of unique paths, branches, or bugs found by one fuzzer but not by any others.

### Mechanism Scalability
The second potential threat is the scalability of the ensemble architecture. Section 4.2 describes the ensemble architecture design and proposes a globally asynchronous and locally synchronous (GALS) seed synchronization mechanism. This mechanism aims to enhance cooperation among base fuzzers during their fuzzing processes. By sharing seeds, the performance of ensemble fuzzing is significantly improved compared to any individual base fuzzer using the same computing resources.

However, this mechanism can be further improved for better scalability across different applications and fuzzing tasks. Currently, EnFuzz only synchronizes coarse-grained information—interesting seeds—rather than fine-grained information such as execution traces and array index values. Additionally, the selection and mixing of base fuzzers are done manually based on three heuristics. When scaling to an arbitrary number of cores, extensive empirical evaluations are necessary.

A possible solution is to dynamically select and initiate base fuzzers based on the real-time number of paths, branches, and bugs found by each fuzzer. Initially, a set of different base fuzzers is available. EnFuzz then randomly selects \( n \) (configurable) base fuzzers. If a fuzzer does not contribute to coverage for a long time, it is terminated, and a new base fuzzer is initiated, or an existing live fuzzer with better coverage is allocated more cores.

We can also apply effective ensemble mechanisms from machine learning, such as Boosting, to improve scalability. Boosting dynamically reweights the base learners to enhance the performance of the ensemble learner: misclassified examples gain weight, while correctly classified examples lose weight. In the context of ensemble fuzzing, a master thread can monitor the execution statuses of all base fuzzers, record precise information, and reassign interesting seeds accordingly.

### Scalability of Ensemble Fuzzing
The number of base fuzzers and parameters in the ensemble fuzzing implementation is scalable for integrating most fuzzers. Theoretically, the more diverse base fuzzers, the better the ensemble fuzzing performs. In our evaluation, we used four base fuzzers with four CPU cores. More computing resources would lead to higher performance. We have also experimented with different period times, and the results are sensitive to the specific settings, affecting performance primarily at the beginning.

Referring to the GALS system design, we can dynamically allocate different synchronization frequencies for each local fuzzer.

### Conclusion
In this paper, we systematically investigate practical ensemble fuzzing strategies and the effectiveness of combining various fuzzers. By applying the idea of ensemble fuzzing, we bridge two gaps: first, we define the diversity of base fuzzers and propose a method for selecting a diverse set of base fuzzers. Second, inspired by AFL in parallel mode, we implement a concrete ensemble architecture with an effective seed synchronization mechanism. EnFuzz consistently outperforms other popular base fuzzers in terms of unique bugs, path, and branch coverage with the same resource usage. EnFuzz has discovered 60 new bugs in several well-fuzzed projects, and 44 new CVEs have been assigned.

Our future work will focus on three directions: improving the accuracy of diversity quantification, enhancing the ensemble architecture with more advanced mechanisms and fine-grained information synchronization, and optimizing resource allocation with intelligent techniques such as dynamically adjusting the synchronization period and allocating more CPU cores to fuzzers that share more interesting seeds.

### Acknowledgments
We thank the anonymous reviewers and our shepherd Thorsten Holz for their valuable feedback and support from Huawei. Yu Jiang is the corresponding author.

### References
[References are listed as provided, with minor formatting adjustments for clarity and consistency.]

### Preliminary Demonstration of Diversity Among Base Fuzzers
To select base fuzzers with larger diversity, we estimate the diversity between each base fuzzer. Generally, the more differently they perform on different applications, the more diverse they are. We first run each base fuzzer in single mode with one CPU core on Google’s fuzzer-test-suite for 24 hours. Tables 14 and 15 show the number of paths and branches covered by AFL, AFLFast, FairFuzz, libFuzzer, Radamsa, and QSYM. Table 16 shows the corresponding number of unique bugs. Below, we detail the performance effects of the three diversity heuristics proposed in Section 4.1.

1. **Effects of Seed Mutation and Selection Strategy**: The first three columns of Table 14 show the performance of the AFL family tools, which differ in seed mutation and selection strategies. Original AFL performs best on 5 applications but worst on 10. AFLFast performs best on 13 and worst on 4. FairFuzz performs best on 8 and worst on 9. Although the total number of paths covered improves slightly, the performance variation is significant, ranging from -57% to 38%.

   From Tables 15 and 16, we observe similar variations in branch coverage and unique crashes. AFLFast selects seeds that exercise low-frequency paths, which is effective for lcms but not for libarchive. FairFuzz mutates seeds to hit rare branches, effective for libxml2 but not for libarchive. The mutation and selection strategy determines the depth and breadth of coverage.

2. **Effects of Coverage Information Granularity**: The diversity between AFL and libFuzzer lies in their coverage information granularity. According to Table 14, libFuzzer performs better on 17 applications and covers 30.3% more paths. However, Table 15 shows that libFuzzer performs better on only 11 applications, covering more paths but fewer branches. AFL uses edge hit counts, while libFuzzer uses block hit counts, leading to more branches for AFL and more paths for libFuzzer.

### Table 14: Average Number of Paths for Single Mode
| Project              | AFL    | AFLFast | FairFuzz | libFuzzer | Radamsa | QSYM   |
|----------------------|--------|---------|----------|-----------|---------|--------|
| boringssl            | 1207   | 1334    | 72       | 80        | 1268    | 1382   |
| c-ares               | 605    | 656     | 3756     | 3505      | 87      | 64     |
| guetzli              | 5098   | 5762    | 2397     | 2330      | 1947    | 2456   |
| lcms                 | 2439   | 2416    | 32310    | 24501     | 208     | 220    |
| libarchive           | 5084   | 5860    | 15       | 14        | 7748    | 7188   |
| libssh               | 6793   | 6881    | 504      | 466       | 638     | 704    |
| libxml2              | 577    | 170     | 4096     | 4830      | 104     | 141    |
| openssl-1.0.1        | 179    | 180     | 891      | 898       | 2975    | 2959   |
| openssl-1.0.2        | 83575  | 72422   | 3528     | 1682      | 123     | 78     |
| openssl-1.1.0        | 1773   | 1562    | 338      | 550       | 10124   | 4570   |
| pcre2                | 201    | 63      | 19663    | 9392      | 1709    | 2303   |
| proj4                | 1881   | 2108    | 1897     | 2311      | 37850   | 20981  |
| re2                  | 334    | 182     | 6327     | 5418      | 224     | 10     |
| woff2                | 16360  | 9825    | 10800    | 5688      | 564     | 499    |
| freetype2            | 448    | 634     | 493      | 263       | 4593    | 5646   |
| harfbuzz             | 976    | 144     | 431      | 256       | 848     | 875    |
| json                 | 3510   | 3146    | 108884   | 94296     | 1760    | 88     |
| libjpeg              | 1030   | 434     | 1630     | 62        | 8028    | 2285   |
| libpng               | 2040   | 2501    | 36176    | 218       | 5016    | 12     |
| llvm                 | 10714  | 8668    | 408      | 722       | 76      | 5360   |
| openthread           | 127    | 172     | 108884   | 94296     | 1760    | 88     |
| sqlite               | 1030   | 434     | 1630     | 62        | 8028    | 2285   |
| vorbis               | 2040   | 2501    | 36176    | 218       | 5016    | 12     |
| wpantund             | 10714  | 8668    | 408      | 722       | 76      | 5360   |
| Total                | 108884 | 94296   | 1760     | 88        | 1030    | 434    |

This table provides a detailed comparison of the average number of paths covered by each fuzzer in single mode.