7:7!:7"..":4
::!&&!&:":4

71 #(.((:((7"$714414
71 #(.((:("(7"$714414
71 #(.((:"(7"$714414
7 &.%%::("(7"$714414
7 &.%%::((7"$714414


Figure 6: Sample of disposable (I-III) domain names.
names. We will examine some key properties that disposable
domain names have by examining passive DNS datasets
from major zones like google.com. In Figure 6, we can
see a few sample domain names from three zones that are
disposable. These three zones operated under the control of
eSoft (i), McAfee (ii), and Google (iii).
The ﬁrst example is eSoft, which appears to be a service
that employs DNS as a storage communication channel in
order to report CPU load, machine up time, memory usage
and swap disk usage. For the second example, according
to McAfee [5], domains shown in (ii) are used for ﬁle
reputation queries on behalf of their Global Threat Intel-
ligence File Reputation Service. If any suspicious program
executable, Android Application Package File (APK) or
Portable Document Format (PDF) ﬁle is not detected as
malicious by signatures of user’s local Anti-Virus software,
the software will generate DNS queries for ﬁle classiﬁcation
result from the cloud. A suspicious ﬁle is deﬁned to be any
ﬁle with certain characteristics that malware commonly has,
such as whether the executable ﬁle is packed. The queried
name is typically less than 40 byte,
including McAfee
version and product
information, hash of the suspicious
ﬁle, ﬁngerprint information, and environmental information.
The returned answer from McAfee ﬁle reputation server
is typically a non-routable IP address in 127.0.0.0/16,
where different IP address has different meaning. Lastly,
domains shown in (iii) are generated by Google’s IPv6
experiment [4]. A small percentage of Google users are
selected for the experiment. Browsers of selected users
perform cryptographically signed background requests after
users search and get the results. The background requests
record IPv4 and IPv6 addresses, image request latency, and
User-Agent string for browser and operating system.
Examining the zone structures from Figure 6 shows that
the randomly generated part is not always the leftmost child
label of the domain. For example, ipv6-exp.l.google.com
(iii) and avqs.mcafee.com (ii) have the leftmost labels (p2
and 0), which are not “random-looking”. Therefore, we
need to check whether each group of labels between “.” are
generated by an algorithm. Furthermore, disposable domains
under the same section of the DNS zone always have the
same number of periods (“.”) in the domain. This is probably
F
D
C
1.0
0.8
0.6
0.4
0.2
0.0
Cache Hit Rate Distribution
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0
Cache Hit Rate
Disposable
Non-Disposable
Figure 7: Cache hit rate distribution for disposable and
non-disposable zones.
due to the speciﬁc protocol used by the zone operator. For
example, disposable domains under avqs.mcafee.com always
have 11 periods in the domain. We must consider the actual
structure of the domain names in order to generate statistical
features that can be used to identify disposable domains.
B. Motivating the Cache Hit Rate
In general, resource records of disposable domain names
are used only once or up to a few times while they are in the
recursive DNS servers’ cache. This means that disposable
RRs have very low or zero cache hit rates when they are
updated in the cache. On the other hand, we observe that
non-disposable RRs have relatively good cache hit rates.
We manually labeled 398 zones as disposable, and 401
randomly selected 2LD zones from the top 1,000 Alexa
domain names as non-disposable, from trafﬁc observed on
11/10/2011. While there are usually thousands or millions
of unique disposable domains seen under disposable zones,
we took a conservative approach to include zones with
as few as 15 disposable domains because of our limited
observation window. Figure 7 shows that 90% of cache hit
rates from disposable RRs are zero. On the other hand, 45%
of cache hit rates from non-disposable RRs are over 0.58.
Disposable zone operators do not seem to make use of
the caching beneﬁt of recursive DNS infrastructure because
they use their disposable domain names as temporary
domains. Disposable domains are not
strictly looked
up once only, since software making those queries can
sometimes generate the same domain name again. However,
603
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 06:04:42 UTC from IEEE Xplore.  Restrictions apply. 






























Figure 8: An example of a Domain Name Tree.
Figure 9: Domain Name Tree after decoloring two nodes.
when any disposable domain is looked up by anyone in
the lifetime of TTL value, it is highly unlikely that the
same domain name will be used by any other client. Since
disposable zone operators want to have full control over
every record under their zone so they can leverage the
recursive DNS servers as their temporary infrastructure for
purposes other than providing IP addresses. This extra level
of control under the disposable zone is very important when
operators (i.e., eSoft) want to deliver content in the domain
names, use the zone as a channel for customized protocols
(DNSBLs, AntiVirus Companies, DNS Tunneling Services),
or even to collect metrics (Google IPv6 experiment).
However, a non-disposable zone is not likely to exhibit
such overall poor caching performance, given all domains
under the same parent zone. Lookups to non-disposable RRs
are less controlled by the zone operator, since non-disposable
domains do not serve one-time purposes. Consequently,
non-disposable zones would have a more “natural” cache
hit
rate distribution, which looks more like the linear
cumulative distribution for all resource records in Figure 4.
V. MINING DISPOSABLE DOMAINS
In this section we describe the disposable zone miner
we design,
implement and use in order to measure the
prevalence of disposable domain names in ISP networks. We
begin by presenting the necessary features to automatically
discover disposable domain names. We then discuss how
these features can be used in our disposable zone miner.
We conclude this section by providing measurement results
from the actual use of the disposable zone miner in a large
North American ISP.
A. Statistical Features
We ﬁrst present the necessary notation used to describe the
two statistical feature families. Then we present and motivate
the feature families used to transform the DNS zone infor-
mation into statistical vectors for mining disposable zones.
1) Domain Name Tree Deﬁnition: For a given set of
domain names, we generate a domain name tree. The root
of the tree is “.” (root), the children of the root are the
TLDs, the children of the TLDs are the 2LDs, and so on.
We categorize the nodes in the tree as black nodes
or white nodes. We consider a black node to be every
node that has a resource record (RR) in our DNS dataset
within the observation period, and the rest are white nodes.
(

.(.+







.(.


Figure 10: Daily Disposable Zone Ranking Process.
Figure 8 shows the domain name tree for the set of RRs
of following domain names:
structure,
nodes
tree
a.example.com, i.1.a.example.com,
2.a.example.com, 3.a.example.com,
4.b.example.com, and c.example.com.
the
a.example.com,
In
b.example.com and c.example.com are child nodes
of node example.com. Nodes 1.a.example.com,
2.a.example.com and 3.a.example.com are child
nodes of node a.example.com. All
the nodes under
example.com are its descendants. Colored nodes are
black nodes, while the others are white nodes. If any node
is decolored in the tree, it turns from a black node to a
white node. For example, decoloring a.example.com
and c.example.com result in the tree in Figure 9.
Based on the structural observations of disposable domain
names discussed in Section IV-A, we next group nodes
with the same structure. We deﬁne the depth of a black
node as the length of the path up to the root. Nodes within
the same group Gk have the same depth k. For all the
black descendants of the same zone if they have the same
depth, we consider them to have the same structure. For
example, to group black nodes under example.com, we
would get G3={a.example.com, c.example.com},
3.a.example.com,
G4
4.b.example.com}, G5 ={i.1.a.example.com}.
All groups of domain will be classiﬁed either as disposable
or non-disposable by Disposable Domain Classiﬁer module,
as we will see next.
={2.a.example.com,
Our goal is to build statistical features to describe nodes
within the same group. We compute six tree-structure fea-
tures and two cache hit rate features for each set Gk. In order
to compute tree-structure features, we need to get the set of
labels for each Gk to see whether they are algorithmically-
generated. For the previous example, we take the following
sets of labels L3 = {a, c}, L4 = {a, b}, and L5 = {a}, that
are next to the zone under inspection (i.e. example.com).
604
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 06:04:42 UTC from IEEE Xplore.  Restrictions apply. 
2) Feature Families: We now discuss the two feature
families and the main motivation behind their selection.
Tree Structure Features: For each set Gk, we calculate
the corresponding set Lk. Let
the Shannon entropy of
the characters in the label l be H(l). For all the labels
li(i = 1...m) in the set Lk, we compute the entropy values
H(li). We then use as features the cardinality m of the
set Lk,
the maximum, minimum, average, median, and
variance of all H(li) values.
Cache Hit Rate Features: For each set Gk, we
calculate the domain hit rate (as deﬁned in Section III-C2)
and the number of misses for all
the resource records
of domains in the set Gk, to generate the cache hit rate
distribution. From the distribution, we take the median, and
the percentage of RRs that have zero cache hit rate as two
statistical features for this family.
Features and Group Intuition:
In Section IV and
Figure 6, we discussed the main zone structural properties
of disposable domain names. We saw that operators tend
to use algorithms to create domain names “in bulk” under
certain levels of the master zone. With the Gk sets, we may
capture the properties of the nodes being created by the
operators in the same depth from the root of the DNS tree.
The meaning of the entropy features computed over
the labels in the corresponding Lk sets are twofold. First,
we simply want to see if there are any labels generated
by algorithms at the same level of the tree, which could
indicate disposable domain names. Second, we want
to
see if there are outliers in the Lk set using the variance
as a guide. For example, a percentage of the nodes in the
set are used for disposable domain names. However, there
could be some nodes that are created manually and serve
non-disposable domain names. We would like to be able to
capture these zone characteristics during modeling.
Finally, the cache hit rate features are very inﬂuential
in our effort to differentiate between disposable and non-
disposable Gk sets. As we have extensively discussed in
Section IV, median values in the cache hit rate distribution
for resource records of non-disposable domain names are
signiﬁcantly higher than the disposable ones. The cache hit
rate features provide us with the necessary classiﬁcation
signal to properly model disposable domains.
B. Overview of the Mining System
In Figure 10, we present a process to systematically track
and rank zones that facilitate resolutions for disposable
domain names over the period of a day. As the daily DNS
dataset is being collected (Step 1), it is fed into our system.
We ﬁrst build the Domain Name Tree that reﬂects the
current DNS dataset. This is done by the Domain Name Tree
Builder, so the Disposable Domain Classiﬁer can traverse
(Step 2) the zones of the domain name tree, according
to Algorithm 1. The output of the miner is (Step 3) the
disposable classiﬁcation score for each zone in the tree.
Algorithm 1 Disposable domain name classiﬁcation process
given the under inspection zone z.
1: if There is no black descendants for z then
2:
3: end if
4: From all the black descendants of z, identify Gki and
generate Lki, where i = 1, 2, ..., n and n is the number
of different depth values under zone z.
return
)
for j = 1 to m (number of nodes in Gki) do
Decolor nodej in Gki
5: Set classiﬁer threshold θ = 0.9
6: for i = 1 to n do
p, class = C(Gki
7:
if class == disposable and p >= θ then
8:
9:
10:
11:
12:
end if
13:
14: end for