nerable domain names under ownership of the contacted party.
We informed them of our intention to publicly publish these
results, noted that they will not be named, and advised that
they remediate the issue as adversaries can easily repeat our
experiment and compromise their sites. We also explicitly
stated that we did not seek or accept bug bounties for these
notiﬁcations.
We sent the notiﬁcation letters prior to submitting this work
for review, therefore giving the impacted parties reasonably
early notice. As of this writing, 12 of the impacted sites have
implemented mitigations.
Repeatability. One of the authors of this paper is afﬁliated
with a major CDN provider at the time of writing. However,
the work and results we present in this paper do not use any
internal or proprietary company information, or any such infor-
mation pertaining to the company’s customers. We conducted
this work using only publicly available data sources and tools.
Our methodology is repeatable by other researchers without
access to any CDN provider internals.
4 Web Cache Deception Measurement Study
We conducted two measurement studies to characterize web
cache deception (WCD) vulnerabilities on the Internet. In this
ﬁrst study we present in this section, the research questions
we speciﬁcally aim to answer are:
(Q1) What is the prevalence of WCD vulnerabilities on pop-
ular, highly-trafﬁcked domains? (§4.2)
(Q2) Do WCD vulnerabilities expose PII and, if so, what
kinds? (§4.3)
(Q3) Can WCD vulnerabilities be used to defeat defenses
against web application attacks? (§4.3)
(Q4) Can WCD vulnerabilities be exploited by unauthenti-
cated users? (§4.3)
In the following, we describe the data we collected to carry
out the study. We discuss the results of the measurement, and
then consider implications for PII and important web security
defenses. Finally, we summarize the conclusions we draw
from the study. In Section 5, we will present a follow-up
experiment focusing on advanced path confusion techniques.
Table 2: Summary of crawling statistics.
Crawled
1,470,410
124,596
295
Vulnerable
17,293 (1.2%)
93 (0.1%)
16 (5.4%)
Pages
Domains
Sites
Figure 3: Distribution of the measurement data and vulnerable
sites across the Alexa Top 5K.
4.1 Data Collection
We developed a custom web crawler to collect the data used
in this measurement. The crawler ran from April 20-27, 2018
as a Kubernetes pod that was allocated 16 Intel Xeon 2.4 GHz
CPUs and 32 GiB of RAM. Following the methodology de-
scribed in Section 3, we conﬁgured the crawler to identify
vulnerable sites from the Alexa Top 5K at the time of the
experiment. In order to scalably create test accounts, we ﬁl-
tered this initial measurement seed pool for sites that provide
an option for user authentication via Google OAuth. This
ﬁltering procedure narrowed the set of sites considered in
this measurement to 295. Table 2 shows a summary of our
crawling statistics.
4.2 Measurement Overview
Alexa Ranking. From the 295 sites comprising the col-
lected data set, the crawler identiﬁed 16 sites (5.4%) to contain
WCD vulnerabilities. Figure 3 presents the distribution of all
sites and vulnerable sites across the Alexa Top 5K. From this,
we observe that the distribution of vulnerable sites is roughly
proportional to the number of sites crawled; that is, our data
does not suggest that the incidence of WCD vulnerabilities is
correlated with site popularity.
672    29th USENIX Security Symposium
USENIX Association
[1-1K)[1K-2K)[2K-3K)[3K-4K)[4K-5K]AlexaRank020406080100#Sites977644572461312CrawledVulnerableTable 3: Pages, domains, and sites labeled by CDN using HTTP header heuristics. These heuristics simply check for unique
vendor-speciﬁc strings added by CDN proxy servers.
CDN
Cloudﬂare
Akamai
CloudFront
Other CDNs
Crawled
Sites
Pages
Domains
161,140 (11.0%)
4,996 (4.0%) 143 (48.4%)
225,028 (15.3%) 16,473 (13.2%) 100 (33.9%)
10,107 (8.1%) 107 (36.3%)
100,009 (6.8%)
244,081 (16.6%)
2,456 (2.0%) 137 (46.4%)
Pages
16,234 (93.9%)
1,059 (6.1%)
2 (<0.1%)
0 (0.0%)
Vulnerable
Domains
72 (77.4%)
21 (22.6%)
1 (1.1%)
0 (0.0%)
Sites
8 (50.0%)
8 (50.0%)
1 (6.2%)
0 (0.0%)
Total CDN Use 707,210 (48.1%) 33,675 (27.0%) 244 (82.7%) 17,293 (100.0%) 93 (100.0%) 16 (100.0%)
Table 4: Response codes observed in the vulnerable data set.
Response Code
404 Not Found
200 Ok
Pages
17,093 (98.8%)
205 (1.2%)
Domains
82 (88.2%)
19 (20.4%)
Sites
10 (62.5%)
12 (75.0%)
Content Delivery Networks (CDNs). Using a set of
heuristics that searches for well-known vendor strings in
HTTP headers, we labeled each domain and site with the
corresponding CDN. Table 3 shows the results of this label-
ing. Note that many sites use multiple CDN solutions, and
therefore the sum of values in the ﬁrst four rows may exceed
the totals we report in the last row.
The results show that, even though WCD attacks are equally
applicable to any web cache technology, all instances of vul-
nerable pages we observed are served over a CDN. That being
said, vulnerabilities are not unique to any one CDN vendor.
While this may seem to suggest that CDN use is correlated
with an increased risk of WCD, we point out that 82.7% of
sites in our experiment are served over a CDN. A more bal-
anced study focusing on comparing CDNs to centralized web
caches is necessary to eliminate this inherent bias in our ex-
periment and draw meaningful conclusions. Overall, these
results indicate that CDN deployments are prevalent among
popular sites, and the resulting widespread use of web caches
may in turn lead to more opportunities for WCD attacks.
Response Codes. Table 4 presents the distribution of HTTP
response codes observed for the vulnerable sites. This distri-
bution is dominated by 404 Not Found which, while per-
haps unintuitive, is indeed allowed behavior according to
RFC 7234 [21]. On the other hand, while only 12 sites leaked
resources with a 200 OK response, during our manual exam-
ination of these vulnerabilities (discussed below) we noted
that more PII was leaked from this category of resource.
Cache Headers. Table 5 shows a breakdown of cache-
relevant headers collected from vulnerable sites. In partic-
ular, we note that despite the presence of headers whose
semantics prohibit caching—e.g., “Pragma: no-cache”,
“Cache-Control: no-store”—pages carrying these head-
ers are cached regardless, as they were found to be vulnerable
to WCD. This ﬁnding suggests that site administrators indeed
take advantage of the conﬁguration controls provided by web
caches that allow sites to override header-speciﬁed caching
policies.
A consequence of this observation is that user-agents can-
not use cache headers to determine with certainty whether
a resource has in fact been cached or not. This has impor-
tant implications for WCD detection tools that rely on cache
headers to infer the presence of WCD vulnerabilities.
4.3 Vulnerabilities
Table 6 presents a summary of the types of vulnerabilities dis-
covered in the collected data, labeled by manual examination.
PII.
14 of the 16 vulnerable sites leaked PII of various kinds,
including names, usernames, email addresses, and phone num-
bers. In addition to these four main categories, a variety of
other categories of PII were found to be leaked. Broad exam-
ples of other PII include ﬁnancial information (e.g., account
balances, shopping history) and health information (e.g., calo-
ries burned, number of steps, weight). While it is tempting
to dismiss such information as trivial, we note that PII such
as the above can be used as the basis for highly effective
spearphishing attacks [10, 19, 30, 32].
Security Tokens. Using the entropy-based procedure de-
scribed in Section 3, we also analyzed the data for the pres-
ence of leaked security tokens. Then, we manually veriﬁed
our ﬁndings by accessing the vulnerable sites using a browser
and checking for the presence of the tokens suspected to have
been leaked. Finally, we manually veriﬁed representative ex-
amples of each class of leaked token for exploitability using
the test accounts established during the measurement.
6 of the 16 vulnerable sites leaked CSRF tokens valid for
a session, which could allow an attacker to conduct CSRF
attacks despite the presence of a deployed CSRF defense. 3 of
these were discovered in hidden form elements used to protect
POST requests, while an additional 4 were found in inline
JavaScript that was mostly used to initiate HTTP requests. We
also discovered 2 sites leaking CSRF tokens in URL query
USENIX Association
29th USENIX Security Symposium    673
Table 5: Cache headers present in HTTP responses collected from vulnerable sites.
Header
Expires:
Pragma: no-cache
Cache-Control:
max-age=, public
max-age=
must-revalidate, private
max-age=, no-cache, no-store
max-age=, no-cache
max-age=, must-revalidate
max-age=, must-revalidate, no-transform, private
no-cache
max-age=, private
must-revalidate, no-cache, no-store, post-check=, pre-check=
All
(none)
Pages
1,642 (9.5%)
Domains
23 (24.7%)
Sites
13 (81.2%)
652 (3.8%)
11 (11.8%)
6 (37.5%)
1,698 (9.8%)
1,093 (6.3%)
307 (1.8%)
102 (0.6%)
67 (0.4%)
64 (0.4%)
51 (0.3%)
5 (<0.1%)
5 (<0.1%)
3 (<0.1%)
1 (<0.1%)
26 (28.0%)
10 (10.8%)
1 (1.1%)
1 (1.1%)
3 (3.2%)
4 (4.3%)
1 (1.1%)
3 (3.2%)
2 (2.2%)
1 (1.1%)
1 (1.1%)
14 (87.5%)
7 (43.8%)
1 (6.2%)
1 (6.2%)
2 (12.5%)
1 (6.2%)
1 (6.2%)
1 (6.2%)
1 (6.2%)
1 (6.2%)
1 (6.2%)
1,698 (9.8%)
26 (28.0%)
14 (87.5%)
15,595 (90.2%)
67 (72.0%)
3 (18.8%)
Table 6: Types of vulnerabilities discovered in the data.
Leakage
PII
User
Name
Email
Phone
CSRF
JS
POST
GET
Sess. ID / Auth. Code
JS
Total
Pages
17,215 (99.5%)
934 (5.4%)
16,281 (94.1%)
557 (3.2%)
102 (0.6%)
130 (0.8%)
59 (0.3%)
72 (0.4%)
8 (<0.1%)
1,461 (8.4%)
1,461 (8.4%)
Domains
88 (94.6%)
17 (18.3%)
71 (76.3%)
10 (10.8%)
1 (1.1%)
10 (10.8%)
5 (5.4%)
5 (5.4%)
4 (4.3%)
11 (11.8%)
11 (11.8%)
Sites
14 (87.5%)
8 (50.0%)
7 (43.8%)
6 (37.5%)
1 (6.2%)
6 (37.5%)
4 (25.0%)
3 (18.8%)
2 (12.5%)
6 (37.5%)
6 (37.5%)
17,293
93
16
parameters for GET requests, which is somewhat at odds with
the convention that GET requests should be idempotent.
6 of the 16 vulnerable sites leaked session identiﬁers or
user-speciﬁc API tokens in inline JavaScript. These session
identiﬁers could be used to impersonate victim users at the
vulnerable site, while the API tokens could be used to issue
API requests as a victim user.
Authenticated vs. Unauthenticated Attackers. The
methodology we described in Section 3 includes a detection
step intended to discover whether a suspected WCD vulnera-
bility was exploitable by an unauthenticated user by accessing
a cached page without sending any stored session identiﬁers
in the requests. In only a few cases did this automated
check fail; that is, in virtually every case the discovered
vulnerability was exploitable by an unauthenticated user.
Even worse, manual examination of the failure cases revealed
that in each one the crawler had produced a false negative
and that in fact all of the remaining vulnerabilities were
exploitable by unauthenticated users as well. This implies