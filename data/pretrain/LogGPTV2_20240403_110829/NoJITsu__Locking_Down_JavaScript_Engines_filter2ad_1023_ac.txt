restrictions to primitive data objects while JIT code executes,
and enable the protection again when the JIT code transfers
control back to the JavaScript engine itself. We do, however,
enforce protection for sensitive data objects even during JIT
execution. This way, the attacker can no longer manipulate
sensitive objects (e.g., Shapes, Cells, Functions) which are
frequently exploited in real-world attacks. Interestingly, write
accesses to sensitive objects are rare during the JIT execution.
One exception is the lambda function object whose properties
can change dynamically. For this case, we instrument the JIT
code region to grant valid write accesses to sensitive objects
and then enable the protection again, as we do for the static
code region.
IV.
IMPLEMENTATION
We applied our defense to SpiderMonkey 60.0, which was
released in late 2018 [45]. We modiﬁed the source code for
SpiderMonkey’s memory allocation routines to associate the
correct domain keys with each structure and to ensure that
different types are allocated on separate memory pages. We
also instrumented all code locations that require write access
to the bytecode, object tables, JIT IR, JIT code, and JIT data to
enable and disable write access to the appropriate domains. To
separate the JIT code from JIT data, we modiﬁed the JIT linker
and assembler code. Lastly, we modiﬁed SpiderMonkey’s
signal handlers to support our automated instrumentation of
data object accesses and to support our dynamic object-ﬂow
analysis (see Section IV-C2), which we conducted ofﬂine. For
this last step, we used LLVM 8.0.0 to modify and transform
SpiderMonkey’s code automatically [35]. In total, our proto-
type consists of 9000+ added lines of code. We also wrote
1000+ lines of LLVM code and 200+ lines of Python scripts,
which are used for processing results from our dynamic object-
ﬂow analysis.
A. Memory Protection Mechanism
We implemented our domain-based access control on top
of Intel Memory Protection Keys (MPK). MPK is a recently
introduced hardware feature that allows user-space programs
to manage access permissions for up to 16 memory domains.
To change the access permissions for a domain, the program
uses an unprivileged instruction to write to the thread-local
PKRU register. Note that, while the PKRU write instruction
is unprivileged, an adversary has to acquire arbitrary code
execution to set its value. However, as we demonstrate in
Section V, NOJITSU provides protection against a wide variety
of attacks, including arbitrary code execution attacks based on
code injection and code-reuse.
B. JS Engine Compartmentalization
NOJITSU enforces an execute-only memory policy for JIT
code regions and statically generated code. This policy thwarts
JIT-ROP attacks which rely on reading code to discover code-
reuse gadgets. We use MPK to implement this policy. However,
MPK, by itself, does not sufﬁce to implement
the policy
because it can only toggle the write and read permissions
through the PKRU register. To make JIT code execute-only,
we therefore allow SpiderMonkey to allocate the JIT code
cache onto memory pages that are marked as executable in
the page table. We use MPK to make these pages readable
and writable during JIT compilation, and to revoke read and
write permissions when the compilation completes.
1) Jump Table Separation: During JIT compilation, Spider-
Monkey emits jump tables such as those shown in Figure 7a.
The jmp* rip, 2 instruction loads a jump target address
located at offset 2 from the jump instruction, and jumps to the
loaded address. We modiﬁed SpiderMonkey to separate jump
target addresses from the rest of the jump table. This allows
us to make jump addresses read-only and not executable.
Blindly moving the addresses into read-only memory would
require us to reserve an additional register to store the base
address of the jump target region. This could lead to additional
register spilling, which would negatively impact the run-time
performance of the JIT engine. We avoided this performance
hit by designing the JIT code layout in such a way that the
data region directly follows the JIT code region. This way,
the jump target can still be loaded via relative addressing,
without allocating an additional register. Figure 7b shows the
layout of the JIT code after jump table separation. The jump
addresses, constants, and any other data are separated from
the JIT code and moved into a new JIT data section that
immediately follows the original JIT code section. The jump
instructions are patched accordingly.
2) Permission Change Routine: Listing 1 illustrates how
we temporarily change the permission for a permitted write
access. Before writing to a protected region, we insert a call to
set_pkru to change the value of the PKRU register to enable
write access. Although write_pkru is a simple register write
operation and much more efﬁcient than calling mprotect
to change the page access permission, this instruction still
takes longer to execute than a normal arithmetic instruction
(i.e., a WRPKRU instruction takes around 20 cycles because it
ﬂushes the CPU pipeline to prevent a potential memory access
violation caused by out-of-order execution [47]). Thus, instead
of immediately writing to the PKRU register, the set_pkru
function ﬁrst checks if the current PKRU value already has
the write permission. If so,
the function returns without
overwriting the register. If the page does not have the write
7
access other objects from a different compartment. However,
SpiderMonkey only enforces this isolation at the language
level. An adversary that ﬁnds a memory vulnerability can
still access (and potentially overwrite) JavaScript objects in
other compartments. We propose a low-level and precise access
control mechanism for JavaScript objects that works even in
the presence of memory vulnerabilities. The JavaScript objects
that we protect also include shapes which contain the object’s
layout information, script objects that point to bytecode, and
any other objects that are allocated and collected by the
garbage collector (GC).
In SpiderMonkey, the unit of memory managed by the GC
is called a cell. Cells are classiﬁed based on their allocation
kind, which determines the attributes of the object such as
the size and the ﬁnalization behavior. Arenas are the memory
allocation unit (i.e., 4 KB) that accommodates objects of the
same allocation kind. In our design, we assign the key allotted
for JavaScript objects based on its allocation kind (i.e., the
originating arena). For instance, in our prototype we currently
support different MPK domains for sensitive types (script,
shape, function, etc.) and primitive types (scalar and array data
types). Separating these sensitive and non-sensitive objects
into different domains, the attacker cannot exploit vulnerability
in array or any other non-sensitive data objects to corrupt
sensitive ones such as a function object. In Figure 6, for
example, we assign key3 and key4 for different types of
JavaScript objects.
set_pkey(protection, key){
current_pkru = read_pkru()
if(need_to_change_protection(current_pkru,
protection, key)) {
write_pkru(current_pkru, protection, key)
return current_pkru
}
return 0
}
recover_pkru(pkru) {
if(pkru) {
write_pkru(pkru)
}
}
function_A(...) {
...
...
saved_pkru = set_pkru(W,key)
instruction to write on MPK protected region
recover_pkru(saved_pkru)
...
...
}
Listing 1: Permission change routine
C. Instrumenting Memory Accesses
After modifying SpiderMonkey to separate JIT code from
JIT data, and modifying the memory allocation routines to
allocate each data structure into the proper memory domain,
we had to instrument all memory write instructions in the JIT
engine to set the appropriate run-time memory permissions
based on which data types the instruction may access.
Manually instrumenting all instructions that require write
permission is infeasible given the complexity of JavaScript
engines. We therefore implemented a mechanism to automati-
cally identify and record the write accesses introduced by legal
(a) Legacy Memory Layout
(b) NOJITSU Memory Layout
) and
Fig. 7: Memory layouts before and after JIT code (
JIT data (
) separation. We move all readable data —code
pointers, constants, jump target addresses, and the relocation
table— into a separate memory region which immediately
follows the original JIT code region. This data separation
allows the JIT code region to be execute-only and the JIT
data region read-only.
permission, the function overwrites the PKRU register to allow
the subsequent write access and returns the previous PKRU
value which will later be used for PKRU value recovery. After
the write instruction, we call recover_pkru to recover the
previous PKRU value.
Note that values we load into the PKRU register are
encoded directly into the machine code as immediate values,
and thus these values are, in principle, never loaded from
memory. However, the compiler could still spill PKRU values
to the stack. Addressing this corner case is out of scope of this
paper, however, potential mitigations orthogonal to our work
are: i) to avoid spilling of registers containing PKRU values
by assigning it a dedicated register [25], or ii) to randomize
the PKRU values before being spilled to stack and keep the
randomization secret in a dedicated register [11], [16].
3) JavaScript Object Protection: In the JavaScript engine,
the garbage collector (GC) is responsible for allocating and
reclaiming JavaScript objects on the heap. The GC mechanism
in SpiderMonkey already provides a certain level of data
isolation through compartments. JavaScript objects from the
same origin (i.e., objects created from the same website)
are within the same compartment, and JavaScript objects
(including JavaScript function objects) are not allowed to
8
...Relocation TableConstantsCode pointersjmp* rip, 2hltJump addressjmp* rip, 2hltJump addressJIT codeJumptableDataCode......Relocation TableConstantsCode pointersjmp* rip, offsetJump addressjmp* rip, offsetJump addressJIT code / JIT dataJumptablePaddingprogram ﬂow, and we used the recorded information to reﬁne
our instrumentation code in a subsequent step.
Alternatively, we could have used a points-to analysis
technique to identify write operations that may write to
a JavaScript object. However, such analysis techniques are
known to overapproximate the set of operations that may
write to a speciﬁc memory location because they lack run-
time information and/or trade precision off for scalability.
Using overly conservative analysis outputs to support our code
instrumentation would result in larger attack windows in which
illegitimate write accesses to JavaScript objects are possible.
During the course of this research, we studied several
LLVM-based pointer analyses and found these tools have
known implementation bugs that cause false negatives (i.e.,
missing alias relationships) in the analysis output [36], [50],
[60]. For instance, these tools miss tracking pointers passed
as an element of structure type (aggregate) registers. Instru-
menting SpiderMonkey based on analysis outputs with false
negatives would lead to missing run-time permission changes
and would cause legitimate object write accesses to fail and
crash the program.
1) Code Transformation and Signal Handler: Our dynamic
analysis intentionally traps write accesses to the protected
region and catches the resulting segmentation faults in a
custom signal handler. This signal handler records the trap
location, temporarily enables write access, and restarts the
faulting instruction.
write instruction
current_pkey = read_pkey()
if(isChanged(current_pkru))
{
print function_name
set_pkey(R, OBJ_key)
}
Listing 2: Code transformation for dynamic analysis
sig_handler()
{
if(CausedByMPKViolation())
{
set_pkey(W, OBJ_key)
return
}
else
}
goto:legacy sig handler
Listing 3: Signal handler for dynamic analysis
2) Dynamic Object-Flow Analysis: Listing 2 and Listing 3
shows the code transformation and signal handler we use in
our analysis. At the start of the analysis, we only grant read
permission to JavaScript objects. When the JavaScript engine
encounters a write access to the objects, a segmentation fault
will trigger our signal handler. If our signal handler identiﬁes
that the fault is caused by a MPK violation it logs the faulting
code to be processed later by our LLVM passes.
Within the signal handler, we modify the PKRU value so
that we can re-execute this particular write access without
causing another segmentation fault. The challenge here is that
the interrupted process does not share its register state with the
signal handler. Therefore, the signal handling routine cannot
9
directly read or modify the PKRU register of the interrupted
process. We address this issue by locating the PKRU register
saved in memory before the context switch. Before entering
the signal handler,
the OS saves the register state of the
interrupted process in memory and recovers the registers after
the signal handler returns. We therefore directly modify the
PKRU value located in the saved register state so that the
PKRU value modiﬁcation within the signal handler is properly
updated when the register state is recovered. With the updated
PKRU register, program execution then continues with the
write instruction that now successfully writes to the protected
region. After execution ﬁnishes we check if the PKRU register
was modiﬁed from the initially loaded value. If so, we know
that this write access touches the protected region and that this
access should be permitted. We then record this code location.
Lastly, we set the PKRU register back to read-only, such that
future write access to the protected region will trigger our
signal handler again. This way, we can precisely locate and
record functions that require legitimate access to the protected
region without altering the semantics of the scripting engine.
3) Accessor Functions: In the JavaScript engine, only a
limited number of functions can directly write to an object; we
call these functions Accessor Functions. Because of the way
SpiderMonkey’s code base is structured, any other functions
should invoke one of these accessor functions to modify a JS
object—the same is true for any other code bases that respect
the abstraction principle of object-oriented programming and
non-OOP code bases that use abstraction layers to access spe-
ciﬁc types of data. Our dynamic analysis therefore only needs
to ﬁnd these accessor functions and does not require entire
code coverage of the engine. As long as we ensure that each
of the object types (of which there are 29 in SpiderMonkey)
is covered by one of the test cases, accessor functions will
be fully exercised (see Section V-B). Consequently, any other
characteristics of workloads will not affect the coverage of
accessor functions.
Our dynamic analysis naturally captures 300 accessor
functions out of around 100, 000 functions in SpiderMonkey.
We categorize these accessor functions into four groups based
on their behaviors: Member Accessors, Payload Accessors,
Initialization Accessors, and GC Accessors.
Member Accessors are member functions of a JavaScript
object class which write to private variables. Payload Acces-
sors are special member functions to update the actual payload
of a JavaScript object. Every JavaScript object class imple-
ments its payload accessor which either directly stores the
payload or its reference. Initialization Accessors are functions
that initialize JavaScript objects. Most initialization functions
are member functions or constructors of a JavaScript object
class, but there are few cases where an independent func-
tion initializes JavaScript objects, directly writing to public
variables. Most of them are for efﬁciently initializing string
objects. Lastly, GC Accessors update various allocation in-
formation for garbage collection. Apart from the JavaScript
objects themselves, garbage collection also makes heavy use
of object metadata, and hence, requires memory protection
as well. We therefore automatically instrument the JavaScript
engine to lock down metadata access by default, and only
grant legitimate write accesses to such object metadata where
appropriate. Since the behavior of garbage collection could be
different in our proﬁling environment, we conservatively ﬁnd