### Scheduling and Dependency Management in Service Composition

It is essential to schedule various services according to the dependency model. For instance, data backup should be scheduled before hardware replacement, and data restoration should follow. The BPMN process description and SLA (Service Level Agreement) information for different services are analyzed. Both of these are retrieved from the Service Model Repository. Temporal relationships between services are identified based on the process description.

Resource and location dependencies are discovered based on negotiated SLAs. QoS (Quality of Service) and price dependencies are calculated using SLA information and the composite service process structure. During the usage phase, the dependency model supports runtime dependency evaluation tasks, such as determining SLO (Service Level Objective) violation effects or handling SLA renegotiation requests. If renegotiation is required, the model may need to be adjusted accordingly.

While many dependencies can be automatically detected, there is a need to extend the generated dependency model with additional information that cannot be discovered. This is achieved using a dependency model editor, which is part of the Dependency Analysis component. When changes occur in the SLAs related to the composite service or the business process itself, the dependency model must be recomputed using the semi-automatic approach presented. This includes, for example, the expressiveness of technical descriptions and interfaces (e.g., WSDL).

### Dependency Model Management

The Dependency Model Management component handles different instances of dependency models and is responsible for their creation, storage, retrieval, and removal. It integrates with the Dependency Analysis and Runtime Dependency Evaluation components to support their work at both design and runtime. Additionally, it validates the dependency models and associated SLAs, ensuring that only validated models are used for runtime evaluation. It also detects conflicts between different SLAs (e.g., start/end times) based on the dependency model. Thus, while supporting the Dependency Creation & Recomputation and Usage phases, it realizes the Validation and Retirement lifecycle phases.

### Runtime Dependency Evaluation

The Runtime Dependency Evaluation component implements the Usage phase. It uses the dependency model at runtime to evaluate dependencies, such as those that come into effect during SLA renegotiation. The evaluation is triggered by the SLA Negotiation component upon receiving SLA renegotiation requests. Dependency evaluation can also be initiated by the Monitoring Cockpit when it receives information about SLO violations.

### Related Work

#### Frameworks and Tools
WSMF, WSML, WSMT, and WSMO provide frameworks, tools, and integrated modeling environments to describe semantic Web services. Compared to ISE, these approaches focus on using ontologies to enhance the expressiveness of Web service descriptions and their interfaces (e.g., WSDL). While ISE also relies on ontologies, their use extends beyond service interfaces to increase the expressiveness of organizational and IS models, including business rules and human resources.

#### Other Approaches
SoaML, MIDAS, and UML-S follow an MDA (Model-Driven Architecture) approach for service modeling, targeting SOA-based solutions and Web information systems. Unlike ISE, these approaches rely solely on UML models and UML extensions for service modeling. The lack of organizational and IS perspectives, and the purely UML-based approach, make it difficult for business stakeholders (e.g., CEO, CTO, CIO) to participate in defining IoS-based services. Advanced modeling mechanisms, such as business process design based on patterns and context-based modeling, have not yet been explored.

UML-S provides transformation rules between UML-S and adapted Petri nets to verify and validate models. ISE, on the other hand, relies on CCS (Calculus of Communicating Systems) for modeling business processes, as it has proven effective in this domain.

Commercial applications that target the use of multiple models to design services or SOA-based architectures are available from several companies, such as Select Architect, Business Architect, and Enterprise Architect. These typically rely on business motivation modeling, business process modeling, component-based models, and corporate data models to design IS/IT. While they use MDA approaches for code generation, they lack precise mapping and synchronization techniques between models. Since these tools primarily target IS/IT design, they do not directly address business services, and important aspects like pricing models and marketing channels are often missing.

### Conclusion

In this chapter, we presented the ISE framework and its three advanced extensions to meet the requirements emerging from the inherent complexity of IoS-based services. The ISE framework uses separation of concerns and model-driven techniques to manage the complexity in the service engineering process. The process pattern matching approach provides a semi-automatic means to identify suitable services for specific business tasks, while constructing executable service compositions. Semantic context modeling and service description extension enable an ontology-based approach to specify the service context and dynamic properties. Finally, the SLA management approach helps service providers manage dependencies between services to ensure proper execution. Future work includes further case studies to improve the modeling experience and gather requirements from different business service domains.

### References

[References listed here, formatted consistently and alphabetically.]

### Endnotes

1. http://www.eclipse.org/
2. http://www.jcom1.com
3. http://www.cs.sunysb.edu/_cwb/
4. http://www.selectbs.com/adt/analysis-and-design/select-architect
5. http://www.ids-scheer.com/en/Software/ARISSoftware/ARISBusinessArchitect/3731.html
6. http://www.sparxsystems.com.au/

---

This revised version aims to be more coherent, clear, and professional, with improved flow and structure.