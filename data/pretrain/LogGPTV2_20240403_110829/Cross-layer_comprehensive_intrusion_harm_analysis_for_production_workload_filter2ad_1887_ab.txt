take over the workload of ﬁne-grained taint analysis from the
routine execution of production workload servers.
In this
way, the performance of the server systems can be ensured,
without incurring the 10-40x overhead introduced by taint
analysis. Second, replay-based intrusion analysis can take
advantage of the “already-happened” knowledge to reduce
the assessment workload. For instance, intrusion root can
be identiﬁed by logging system calls, generating dependency
graph, and integrating IDS detected intrusion symptoms.
During the ﬁrst run, however, the auxiliary information is
not available yet. Last, by decoupling the intrusion analysis
oﬀ the main server, PEDA oﬀers the ﬂexibility for enterprise
security technicians to either aggressively restart (or con-
tinue running) the service for business continuity (based on
swift system-object-level intrusion propagation assessment)
or conservatively shut down the server for loss constrains
(waiting for comprehensive intrusion analysis). The decou-
pling is implemented by recording the whole system state
and non-deterministic events during the routine execution
of the server.
3.1.1 Checkpointing
PEDA periodically takes a snapshot of the whole server
system to ensure that the replay shares the same initial state
as the ﬁrst run. Diﬀerent checkpoints enable the system ex-
ecution to be replayed at diﬀerent time of the ﬁrst run. This
is feasible and realistic to analyze a speciﬁc event, such as
intrusion, on a long-running server system, because there is
no need to replay the system execution from the very be-
ginning of the ﬁrst run. The checkpoint contains all the
hardware states, such as CPU registers, raw memory, disk,
I/O device, timers, DMA and etc. A naive way to take a
consistent checkpoint of the whole system is to pause the
server system, take a snapshot, and then resume the execu-
tion. However, for production workload servers with large
disk and raw memory, this “stopping-the-world” checkpoint-
ing will cause intolerable service downtime to the servers.
On the other hand, we observed that during 2:00 am to
5:00 am, the amount of service requests are much more de-
graded than that during daytime for Amazon-style servers.
Hence, PEDA is designed to take checkpoint infrequently
(e.g., once per day during the service degradation period).
To further take advantage of the servers’ working style, PEDA
is designed to trade service response time oﬀ for service live
time.
In particular, PEDA initializes a pre-checkpointing
phase, during which the disk and raw memory states are
recorded with the server system “on the ﬂy”. Thereafter,
PEDA pauses the server system and establishes a stop-and-
copy phase. During this phase, PEDA records all the other
device states and the changes to disk as well as memory
since the start of pre-checkpointing phase. Finally, PEDA
commits the end of checkpointing and resumes the execution
of the server. By means of the pre-checkpointing phase, the
heavy workload of storage checkpointing is taken over from
the stop-and-copy phase, thus greatly reducing the service
downtime.
3.1.2 Non-deterministic events logging
For the production workload servers, the non-deterministic
events are mainly the service-requesting network packets,
the administrator’s management keyboard inputs, and the
I/O devices’ interrupts. Meanwhile, the keyboard inputs
happen quite infrequently for such kind of servers. Thus,
it will only introduce little runtime overhead to the servers
to log them directly using emulated keyboard of virtual ma-
chine. However, this is not the case for network packets.
Typically, the production workload server deals with thou-
sands of or even more service-requesting packets everyday.
Hence, it will introduce intolerable overhead to log these
packets by emulated NIC (network interface card) of virtual
machine, because the NIC needs to perform an additional
data transfer per packet.
PEDA successfully solves this problem by leveraging a
router to split the incoming packets and to forward them to
299Figure 2: Xen Devices Emulation
both the target server and the backend server. The backend
server will log the contents of all these packets. Simultane-
ously, the emulated NIC on target server will only record
the header identiﬁcation information of each packet. Dur-
ing the intrusion root identiﬁcation phase, the translation
engine will associate each logged packet with its identiﬁca-
tion information. All the I/O devices’ interrupts to CPU are
logged through the device emulation code of virtual machine.
In order to exactly redeliver the interrupt during replay, we
record the timing semantics at which the interrupt occurs.
For instance, we log the time at which the keyboard input
arrives, and the instruction at which the corresponding in-
terrupt is delivered to CPU. The time is logged by the unit
of CPU clicks, while the instruction is logged using the pro-
gram counter and the number of branches executed [4] by
means of one provided hardware performance counter.
3.2 Heterogeneous VM Migration
Typically, the instruction ﬂow taint analysis needs to be
implemented in the binary translation based VM. Thus,
a direct way to do decoupled analysis is to let the online
server run on top of such kind of VM during routine exe-
cution, and to migrate the recorded VM image onto such
kind of VM with analyzing module when intrusion anal-
ysis is needed. However, the problem with this approach
is the intolerable runtime overhead (3X-4X compared with
native execution [3]) introduced to the production work-
load server by VM binary translation during routine exe-
cution. To minimize the runtime overhead, PEDA runs the
server with underneath logger atop hardware-assisted near
native-speed VM during routine execution. When intrusion
analysis is needed, PEDA replays the recorded VM image
atop binary-translation based VM to capture the infection
propagation.
In particular, PEDA implements heteroge-
neous VM migration functionality to help the latter (binary-
translation based VM) “understand” the system states and
events recorded by underneath logger in the former (hardware-
assisted VM).
Generally, diﬀerent virtual machines use diﬀerent device
emulation techniques, so “translating” the device state of one
VM to that of the other VM is not an easy task. One way to
evade such kind of device state translation is to only consider
the output data ﬂow from each device to CPU. Aftersight
[6] applies this approach by directly recording the data ﬂows
from the devices to CPU and redelivering them to CPU
during replay. However, performance is trade oﬀ for the
“bypass” of the device emulation incompatibility. Logging
raw data out of the device introduces much more runtime
overhead than recording the external inputs to the device,
especially for the large amount of data read from disk (As
also noted in Aftersight [6], to replay a disk read operation,
their method must record the actual data being read from
the emulated disk.).
With much concern of production workload server’s per-
formance, PEDA takes the approach of directly recording
the external inputs to devices, and leverages a translation
engine to eliminate the device emulation incompatibility.
PEDA simpliﬁes the the whole system state translation/migration
work by choosing Xen as hardware-assisted VM and Qemu
as binary translation based VM. The reason is that Xen-
HVM relies a lot on Qemu “device manager” (qemu-dm)
daemon running backend in Domain 0 to provide device I/O
emulation. Figure 2 shows various Xen devices emulated by
qemu-dm. There exist several devices such as CPU registers,
apic and etc., as shown in Figure 2, which are emulated by
Xen-HVM itself. However, they share similar entries with
those emulated by Qemu, and our implementation shows
that the scaling will not consume much time for an experi-
enced programmer. Although translation engine can elimi-
nate the device emulation incompatibility, it cannot handle
hardware diversities without adding new “translation rules”,
such as rtl8139 NIC and e1000 NIC.
3.3 Addressing the Seed-Unknown Challenge
Identifying the intrusion root is a critical step of intrusion
analysis, because it determines where to patch the vulnera-
bilities and what to be audited during analysis. We cannot
simply rely on IDS (Intrusion Detection System) to inform
us the intrusion root, because intrusion symptoms notiﬁed
by IDS often lag behind the actual intrusion breakin. PEDA
identiﬁes the system-object-level (processes or ﬁles) intru-
sion root in a similar way as Backtracking [11]. However, the
system-object-level intrusion root cannot be provided to in-
fection analyzer as taint seed, because dynamic taint track-
ing requires the taint seed at the granularity of memory cell
or disk segment. For instance, if taking a process as taint
seed, then all the operations and the whole address space
of this process should be tainted since it was compromised.
This will generally result in taint explosion [16] through-
out the server system with high false positive, thus hurting
not only the eﬃciency but also the precision (correctness)
of our infection diagnosis. Hence, PEDA implements one-
step-forward auditing to “dip” further down to the memory
buﬀer and identiﬁes the ﬁne-grained intrusion root there. As
shown in Figure 1, PEDA relies on the dependency tracking
engine to do both the system-object-level dependency graph
generation during the auditing phase and ﬁne-grained taint
seed identiﬁcation during the intrusion root identiﬁcation
phase.
3.3.1 Dependency Graph Generation
We specify system object dependency as a source object,
a destination object, and a speciﬁc time. For instance, if
one process reads a ﬁle, then the ﬁle is the source object;
the process is the destination object; while the time is de-
ﬁned as when the process issues the read system call. PEDA
records the process id issuing the system call, parameters of
that system call, and the system call issuing time or se-
quence. Then they are associates with source object, des-
tination object and time respectively. Since system objects
are generally processes and ﬁles, we deﬁne two categories
of system-object dependency: process/process dependency
and process/ﬁle dependency.
Process/Process Dependency Whenever one process af-
fects the operation of the other process, we should mark
these two processes as dependency relationship. The system
call issuer should be marked as source object and the pro-
cess identity speciﬁed in the system call parameters should
be marked as destination object. The time t should be set as
300Figure 3: Dependency Tracking Engine Functionality
the system call issuing time or sequence. Note the creation
of child process through issuing clone system call. We will
apply bi-directional dependency between parent and child
process during the period of address space sharing, because
the parent process and the child process will share the par-
ent’s address space until the child process issues execv sys-
tem call.
Process/File Dependency One process may create, open,
read, write, delete ﬁles, or change the owner, property of
the ﬁles, and etc. The dependency between process and
ﬁle should be established once any of these operations takes
eﬀect. The determination of source object and destination
object depends on the actual data ﬂow as shown in Figure
3(b). Generally, the time t should be set as the system
call issuing time or sequence. However, one process can
map one ﬁle to its address space by issuing mmap system
call, and then read/write the ﬁle directly by using store/load
instructions, which can no longer be captured by system
call level auditing.
In this scenario, we will maintain the
dependency from the time when the mmap is issued to the
time when the corresponding munmap is issued.
Taking the system call auditing records as input, depen-
dency tracking engine can generate system object depen-
dency graph dynamically during auditing phase. Figure
3(b) shows a segment of the dependency graph based on
the system call records in Figure 3(a). Each node denotes
[t]−→
a system object either as source or destination. The
denotes the dependency relationship between the source ob-
ject and the destination object at time t. Since the graph
may grow quite large and produce false positive results on
taint propagation, PEDA performs graph pruning to reduce
the storage size and false dependencies. For instance, we
do not consider situations like independent process termi-
nation, irrelevant signals, or accessing dummy objects like
stdin/stdout or /dev/null.
3.3.2 Coarse-grained and Fine-grained Intrusion Root
Identiﬁcation
When any intrusion symptom is detected by IDS, e.g.,
some maliciously modiﬁed system binaries through integrity
check, the dependency tracking engine switches to intrusion
root identiﬁcation mode. It starts tracing the system-object-
level dependency graph backward from the detected intru-
sion symptoms. The system-object-level intrusion root iden-
tiﬁcation is already studied by Backtracking [11]. Here, we
adopt a similar approach. Figure 3(c) shows the system-
object-level intrusion root identiﬁcation results based on de-
pendency graph segment in Figure 3(b). We locate the de-
tected infected objects from the dependency graph, trace
the dependency chain back with timestamps, and eliminate
uninfected objects from the graph. For production work-
load servers with constrains of physical access, the intrusion
breakin should mainly occur at the network-service-oriented
applications. Therefore, we trace back the intrusion propa-
gation ﬂow, locate the very beginning network-oriented pro-
cess, and identify it as the system-object-level intrusion root.
In addition, system security technicians can also specify a
set of vulnerable services and ports to further reﬁne this
procedure. PEDA also records the intrusion propagation
timestamp when the intrusion root object performs the ﬁrst
operation that eventually propagates to the detected intru-
sion symptoms.
In order to bridge the gap between the system-object-level
intrusion root and the instruction ﬂow taint tracking, we
develop a straightforward but eﬀective method, one-step-
forward auditing, to locate the ﬁne-grained intrusion root
for infection analyzer. Once we have identiﬁed the system-
object-level intrusion root (generally network-oriented pro-
cess), we examine all the system calls issued by it. By
analyzing the parameters of these system calls, we extract