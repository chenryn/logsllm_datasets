---
## Page 363
此脚本的工作原理如下。
到 sampab 库里现在有哪些表，并能让你从 Web 浏览器上交互地查看其中任何一个表的内容。
8.4.4
及http://www.w3.org/Security/Faq上的www安全常见问题。
何使用 SSL来建立安全连接。其他可供参考的信息资源有，Apache使用手册里的安全材料，以
围很广的话题，在这里我很难给出更好的建议，因此你需要自行阅读更多的资料。在之前提及
你很可能还需要建立一个安全连接。这些内容已超出本书的讨论范围。
的方法，容易
太适用于日常使用的脚本。在任何情况下，你都应该知道，这些要求使用者提供用户名和密码
这些值来连接MySQL服务器。这种方法比较适用于那些使用频率不高的系统管理类脚本，不
的用户身份来运行脚本，从而可以编写脚本，从那个只有该用户能读取的选项文件里读取连接
而无法进行数据录入。
的缺陷在于：在使用一个具有只读权限的MySQL账户之后，你编写的脚本只能进行数据检索，
账户连接到你的数据库。第13章将讨论如何创建一个权限受限的MySQL用户账户。这一策略
列在sampdb.cnf文件里。这样便不会存在这样的风险，即允许脚本通过有权修改其表的MySQI
权限的MySQL账户。然后，把这个账户的用户名和密码（并非你自己的MySQL用户名和密码）
的用户可以登录访问你的主机，那么应该考虑创建一个对sampdb数据库拥有只读（即SELECT）
一种安全漏洞，因为它可以防止其他登录到Web服务器主机的用户直接读取这个选项文件。
并把这个文件的访问模式设置为400或600，以阻止其他用户读取它。这种做法可以防止出
的位置更改为你所使用的位置。你还得把选项文件 sampab.cnf 安装到恰当的位置，并在其中
基于DBI的Web脚本使用。其内容如下所示：
参数。
遗
取
容
着
件
把有关
我们第一个基于Web的 MySQL应用程序是一个简单的脚本，db_browse.pl，它能让你看
遗。如果只有你能访问Web服务器主机，那么这个问题无关紧要。但是，如果有其他你信不过
反选项文件的权限，而你用来连接MySQL服务器和访问sampdb数据库的连接参数就此暴露
还有一种编写脚本的方法，
显
从上面几段的内容可以看出，Web脚本安全是一件非常棘手的事情。安全问题是个涉及范
另一种方法是，设法在Apache的 suEXEC机制下执行脚本。如此一来，你便能以指定信任
在Unix下，还应该把这个选项文件的所有者设置为用于运行Apache服务器的那个用户，
示到某个Web页面上。因为那个脚本拥有Web服务器用户的所有权限，所以它完全拥有
另
Web服务
令人遗快
关参数修改为你要使用的MySQL服务器主机名、MySQL账户名和密码。
如果你想在自己的系统上使用本章开发的这些基于Web的脚本，请把各段代码里选项文件
password=secret
user=sampadm
[client]
在 sampdb 发行版里有一个现成的 sampdb.cnf 文件，你可以把它直接安装到系统里，供
一个能安装
基于Web的数据库浏览器
请参考8.2.9节。
驱动器的根目录，待连接成功之后，再切换回原来的那个目录。关于这样做的具体原因
易受到攻击，攻击者会在Web服务器与你的浏览器之间的网络上放置嗅探器，因此
服务器所调用的脚本在执行时，拥有用于运行Web服务器的登录账户的权限。这意
憾的是
装Web脚本的用户，能编写这个脚本，让它打开那个选项文件，并把里面的P
是，那些能在Web服务器上安装并执行脚本的用户，仍然能够读取这个选项
即让脚本要求客户端提供MySQL账户的用户名和密码，并用
8.4使用DBI来开发Web应用程序
343
无
读
大
X
---
## Page 364
需要显示某个特定的表：
个脚本的主体部分会首先生成这个 Web 页面的开头部分，然后检查tbl_name 参数，看看是否
警
344
告
if (!defined ($tbl_name))
print h1 ($title);
my $title = "$db_name Database Browser";
#生成页面的初始部分
my $db_name = "sampdb";
#...建立数据库连接（未显示）…··
use strict;
#db_browse.pl－允许通过Web 浏览 sampdb数据库
#!/usr/bin/perl
假设你还没被上面这段警告吓倒，接下来一起看看ab_browse.pl 脚本是如何工作的。这
pri
口如果在db_browse.pl 被调用时，它发现你已选择了某个表名，那么它会把这个表的内
display_table_names ($dbh, $db_name)
lse
口当你从浏览器第一次请求db_browse.pl脚本时，它将连接到MySQL服务器，检索出
则表明要按该列进行排序。
在URL里查找参数
在继续往前讲解之前，想先提醒大家一下：虽然db_browse.pl脚本很好地说明了Web
ntheader
目录里删除。（或者，把这个脚本安装到一个非信任用户不可访问的私有Web服务器上。）
的信息！因此，在你试用完此脚本，并理解了它是如何工作的之后，请立刻将其从cgi-bin
都能查看这个密码表里的内容，进而可以访问到那些编辑member表的任何条目所必常
member_pass 表里的密码进行控制的。如果到时还用db_browse.pl脚本，那么任何人
史联盟成员通过Web编辑其成员信息的脚本。此脚本对成员条目的访问是由存储
sampdb 数据库里的任何表，这会有麻烦的。例如，在第9章，我们将编写一个能够让
程序设计中的很多重要概念，但是它也展示了一个安全漏洞。这个脚本可以显示
 CGI qw (:standard escapeHTML escape);
发送请求，要求重新显示该表的内容，同时将按你所选择的那个列进行排序。
字。所有表头都被显示为超链接。如果你了选择某个表头，那么浏览器会向Web服务
容检索出来，并展现在你的Web 浏览器里。其中，每列数据的头部即为表里那个列的名
请求，要求db_browse.pl显示该表的内容。
接。当选中这个页面里某个表名所对应的链接时，你的浏览器将向Web服务器发送一个
sampdb库里现有的表，并向浏览器发送一个页面，其中把每一个表都显示成一个超链
DBI;
warnings;
第8章用PerlDBI编写MySQL程序
显示给定表的内容。
(）
param ("tbl_name");
(-title => $title,-bgcolor =>"white"）;
。如果设置了Ssort_col，
需
>
在
美
氏
---
## Page 365
查询结果进行排序：
display_table_contents（）函数，如果还给定了列的名字，那么它会随同一起传递，用以对
并显示出指定表的内容。display_table_names（）函数所生成的结果列表如下所示：
加和标记。此列表里的每一个表名都是一个超链接，点击它可以再次调用此脚本，
目列表，其中每一项即为 sampdb 库里的表名：
容，同时按 sort_col参数指定的那个列进行排序。
的初始调用，脚本会显示一个表的清单。否则，它会显示参数tbl_name 所指定的那个表的内
db_browse.pl脚本的主体部分，该参数被命名为tbl_name。如果它没有值，则说明这是脚本
给脚本的信息内容。我们只需用自己感兴趣的参数的名字来调用 param（）函数即可。在
display_table_names（）函数负责生成初始页面。此函数会检索表列表，并输出成一个项
当调用 db_browse.pl 时，如果tbl_name 参数有值，那么此脚本会把这个值传递给
其中，1i（)函数负责为每个列表项添加和标记，而ul（)函数负责为整组列表添
要获得参数的值很容易，因为CGI.pm模块就能完成所有的工作—弄清Web服务器传递
subdisplay_table_contents
member
grade_event
my（$dbh,
sub display_table_names
print end_html
$sort_clause=
print ul (@item）;
while (my ($tbl_name)= $sth->fetchrow_array ())
#检索由表名构成的单列数组的引用
print p ("Select a table by clicking on its name:");
display_table_contents ($dbh, $db_name, $tbl_name, $sort_col);
($dbh, $db_name, $tbl_name, $sort_col) = @_;
使用函数ul（）（无序列表）和li（）（列表项）来构建一个项目列表，
$sth->execute
push（@item,li（Slink））;
中
$db_name）=@_;
}）;
WHERE TABLE_SCHEMA =?ORDERBY TABLE_NAME
SELECTTABLE_NAMEFROM INFORMATION_SCHEMA.TABLES
(sdb_name);
8.4使用DBI来开发Web应用程序
escape($tbl_name));
345
---
## Page 366
346
my @cells;
my @rows;
print table({-border =>"1"),@rows）;
#显示带边框的表格
push (@rows,
foreachmy $col_name
my $sth = $dbh->prepare(
print p(strong （"Contents of $tbl_name table:"));
if (defined ($sort_col))
#指定了排序列，则使用它来对结果排序
显示表的各行
my $link = a ((-href => $url), escapeHTML ($col_name));
my Surl= sprintf
并按指定的列进行排序。
呈现一个链接，将用户转向表列表页面
$sort_clause ="ORDER BY"
第8章用PerlDBI编写MySQL程序
push (@rows,
foreachmy$val
@cells=（）;
push(@cells,
把数据库表里各个列的名字当作
push (@cells, td ($val）);
#如果为非空，
else
if
$val="&nbsp;";
$val=escapeHTML
(defined
Tr (@cells））;
$dbh->quote_identifier ($db_name, $tbl_name)
"SELECT
Tr（@cells））;
=$sth->fetchrow_array(）)
($val）&&$valne"")
则显示值；否则，显示不间断空格
th（$link））;
让每
(@ary)
escape
escape($tbl_name)
url（），
(@($sth->{NAME}})
个名字都成为一个超链接，
FROM
($val);
($col_name）);
.$dbh->quote_identifier ($sort_col);
"Show Table List"));
---
## Page 367
它会显示出与所选考试事件相关联的分数：
指定，score_browse.pl 会把 grade_event 表里的各个行显示出来供你选择；如果有指定，
顺序进行排列，以便你可以利用这个结果来确定评分曲线。
用户可以选择任意一个考试事件，查看该事件的分数。一个给定事件的分数，会按从高到低的
更为具体，即要检查某次考试或测验分数。初始页面展现的是一个可以选择的考试事件列表，
提供方便。
本可以用有序列表来显示测验或考试分数，这种做法可以为评分曲线的确定和字母等级的分配
数。虽然我们还没有一个方便的分数录入方法，但是我们可以编写脚本来显示这些分数。此脚
脚本要等到下一章才会进行介绍。在这个时候，
成绩。严格来讲，我们应该先想办法录入考分，然后再想方法来检索它们。不过，录入考分的
8.4.5
表列表。然后，你可以从中选择一个数据库，获取它的表列表，并从此继续与前面类似的操作。
库。例如，可以让这个脚本一开始便显示一个服务器里的数据库列表，而不是显示特定库里的
在这种单元格里设置一个不间断空格，
页面，那么其列标题链接将会是下面这个样子的：
接都包含一个显式指定排序列的 sort_col参数。
组成行，最后用table（)函数生成标记，把所有行包在其中。
表格，即用th（）和td（）函数来生成HTML表格的表头和数据单元，然后用Tr（）函数把单元格
可能会出现这种情况。）display_table_contents（）函数将把表里的各行显示为一个HTML
库里的表不太可能发生这种情况；但是如果用这个脚本来显示其他库里的表的内容，那么就有
score_browse.pl脚本只需检查 event_id这一个参数，看是否指定了考试事件。如果未
HTML表格的各个列标题，展示成了超链接，
score_browse.pl与 db_browse.pl 有很多相似之处（即同为信息浏览器），但是其用途
.建立数据库连接（未显示）··
我们要设计的下一个Web脚本是 score_browse.pl,用于显示成绩考评项目所记录的考试
如果想编写一个更为通用的脚本，可以修改db_browse.pl脚本，让它可以浏览多个数据
#如果Sevent_id无值，则显示事件列表。
#此参数用于指明要显示哪次考试事件的分数
print h1 (Stitle);
print header ();
my $title ="Grade-Keeping Project -- Score Browser";
display_table_contents（）函数还使用一个小技巧：把空值转换为一个不间断空格（即
event_id