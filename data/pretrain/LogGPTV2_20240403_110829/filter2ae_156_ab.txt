echo base64_decode($_POST[‘test’]);
POST提交  
test=M#TIzNA==
页面返回  
1234
###  Unicode JSON
在HTTP请求体中传递JSON数据，一般情况下如果网站用的框架，则Content-Type需要指定application/json类型；如果用了三方库，如fastjson，content-type随意即可。
可以将尝试将key或vaule替换成\uxxxx的unicode字符。
    POST /json.do HTTP/1.1
    Host: 127.0.0.1:8081
    Content-Type: application/json
    Content-Length: 68
    {"\u006e\u0061\u006d\u0065":"'\u0072\u006f\u006f\u0074","age":"18"}
    HTTP/1.1 200 OK
    Server: Apache-Coyote/1.1
    Content-Type: text/plain;charset=ISO-8859-1
    Content-Length: 44
    User{name=''root', age=18, contactInfo=null}
这里的unicode关联到JSON，只是一个实际的场景，但可以自己发挥。
###  实体编码 XML
soap之类的协议应该也属于XML类，可以利用这类标记语言的实体编码特性。另外发送请求前考虑一下Content-Type类型。
    POST /xml.do HTTP/1.1
    Host: 127.0.0.1:8081
    Content-Type: application/xml
    Content-Length: 93
    &quot;&apos;&#114;&#111;&#111;&#116;
    HTTP/1.1 200 OK
    Server: Apache-Coyote/1.1
    Content-Type: text/plain;charset=ISO-8859-1
    Content-Length: 31
    Admin{name='"'root', age=null}
###  八进制
还有一个字符表示方式，八进制，如#十六进制的值为23，八进制表示为\43,也是一个可能的点，如在OGNL中就可以使用。
###  同形字
sqlmap的tamper脚本中有个脚本，将’替换为%ef%bc%87，据说是UTF-8全角字符，但是这种说明没有根本地解释这个问题，笔者也不知道什么环境下产生这种利用条件。直到某一天，看到一篇文章，它们之间似乎存在某在联系——[Unicode同形字引起的安全问题](https://paper.seebug.org/77/)，现阶段笔者也只能这样认知这个tamper脚本。
有个趣的网站，它已经整理好了，https://www.irongeek.com/homoglyph-attack-generator.php
**Char** | **同形**  
---|---  
| ᅟ ᅠ ㅤ  
! | ! ǃ ！  
“ | ” ״ ″ ＂  
$ | $ ＄  
% | % ％  
& | & ＆  
‘ | ‘ ＇  
( | ( ﹝ （  
) | ) ﹞ ）  
* | * ⁎ ＊  
+ | \+ ＋  
, | , ‚ ，  
– | – ‐ －  
. | . ٠ ۔ ܁ ܂ ․ ‧ 。 ． ｡  
/ | / ̸ ⁄ ∕ ╱ ⫻ ⫽ ／ ﾉ  
0 | 0 O o Ο ο О о Օ Ｏ ｏ  
1 | 1 I ا １  
2 | 2 ２  
3 | 3 ３  
4 | 4 ４  
5 | 5 ５  
6 | 6 ６  
7 | 7 ７  
8 | 8 Ց ８  
9 | 9 ９  
###  命令、SQL语句等
命令注入方面可以利用bash的特性，SQL注入则利用数据库SQL语法特性，各大知名安全网站已经有足够的资料供大家参考，要讲又需要花费时间，讲不全感觉也没意义，笔者就不描述了。
## 容器语言特性
IIS %，在参数中，如果%后面不是符合URL编码十六进制值，就会忽略该%符合，如id=%%20，等价于id=%20。 IIS asp
中的GET请求方式提交Body表单，后台可接收。 IIS asp的参数污染中，通过,逗号连接污染参数。 Tomcat
路径跳转中允许;符号，/..;/..;/。 PHP $_REQUEST可以接收cookie中的参数。 这块想不到更多的了…
## 匹配缓冲区大小固定
思考一下，WAF拿到一个数据之后，在对其进行内容匹配时，是不是会将其放入一个固定大小的内存空间中，这个空间的大小是有限的。假设HTTP
Request的body部分大小为2333字节，该内存大小为2000字节，那么其核心引擎在做内容匹配时，是不是先处理2000字节，在处理剩下的333字节。至于如何利用，可以发挥自己的想象。
## 白名单
一个是利用URL中的白名单，如图片、JS等静态资源文件。 还可以尝试利用下面这些头部字段
X-Forwarded-For: 127.0.0.1  
X-Client-IP: 127.0.0.1  
Client-IP: 127.0.0.1
另外可以尝试修改Host头部字段。
## 输出角度
前面所讲的都是输入角度，这里我们谈谈输出角度。我们在Request中发送Pyaload，会希望从Response的回显或基于时间这些信息通道来获取Payload执行成功后的相关信息。如果存在某种WAF，检测到Response中的回显数据存在敏感信息，Resonse响应包可能就被阻断掉了。（当然，除了基本的回显数据通道，还有基于时间的数据通道）
###  OOB
遇到这种情况，应对的方法之一就是使用OOB思想来绕过。如XXE OOB、SQL注入OOB、命令注入OOB，等等。
###  Range
假如页面可能有敏感数据返回，而当前攻击场景又利用不了OOB，你可以尝试使用Range方法来绕过防火墙。 普通请求与页面结果：
    POST /test/test.php HTTP/1.1
    Host: 192.168.17.138
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 9
    Range: bytes=10-30
    user=root
    HTTP/1.1 200 OK
    Server: Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.2.17
    Content-Length: 42
    Content-Type: text/html
    SELECT password from user where user = ''
添加了range，请求获取返回页面0到10的数据：
    POST /test/test.php HTTP/1.1
    Host: 192.168.17.138
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 9
    Range: bytes=0-10
    user=root
    HTTP/1.1 206 Partial Content
    Server: Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.2.17
    Content-Range: bytes 0-10/394
    Content-Length: 11
    Content-Type: text/html
    SELECT pass
添加了range，请求获取返回页面10到30的数据：
    POST /test/test.php HTTP/1.1
    Host: 192.168.17.138
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 9
    Range: bytes=10-30
    user=root
    HTTP/1.1 206 Partial Content
    Server: Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.2.17
    Content-Range: bytes 10-30/394
    Content-Length: 21
    Content-Type: text/html
    sword from user where
Range方式应该是所有Web容器默认支持的，这个东西还是有点意思，有点作用。
## 其他参考
###  传输层
看CVE时发现的，[3whs bypass ids](https://www.exploit-db.com/exploits/44247/)
    Attack scenario TCP flow scheme:
    Client    ->  [SYN] [Seq=0 Ack= 0]           ->  Evil Server
    Client      [ACK] [Seq=1 Ack= 84]          ->  Evil Server
    Client    ->  [PSH, ACK] [Seq=1 Ack= 84]     ->  Evil Server
在三次握手未完成之前，服务端返回了数据，可以造成HTTP流量检测的绕过，该种攻击场景可能是被用于挂马、钓鱼之类的。在链接中作者给出了对应的PCAP包，可以下载来看看，算是涨见识。
在传输层这里，还有一些简单而具备实际意义的操作，比如将一个TCP报文分片成很多很多份，一份几个字节，十几个字节，对端服务器能正常接收，而对非嵌入型的WAF就是一个考验；还有，我们知道，TCP是可靠的协议，那么我们再将这些报文进行一个合适的乱序，那么是否也可行。
###  SSL层
对于非嵌入型WAF，在解析SSL数据时，需要该SSL通信端服务器的密钥（非对称）。客户端在与Web服务器进行HTTPS通信时，协商SSL的加密方式可以有很多种，如果其中有一种加密方式恰好是WAF无法识别的，那么WAF就只能睁眼瞎了。
[Bypassing Web-Application Firewalls by abusing
SSL/TLS](https://0x09al.github.io/waf/bypass/ssl/2018/07/02/web-application-firewall-bypass.html)
###  DOS
笔者之前了解到，中小公司的防火墙的流量处理能力是很弱的，所以DOS确实可行，算是最后的方案。
## 结语
本文的模型都是建立在笔者所见所得之上的，另外也开了一些脑洞进行猜想，如有错误欢迎指正。文章中的一些点，笔者并没有在文中详解，但通过参考资料可以很好地理解每一点。
希望对大家有所裨益，本文也算对之前所学有所交代吧.
其他说明，RFC7230对文章中所说的RFC2616的描述未发生修改。 本文参考资料汇总如下
RCF2616 https://tools.ietf.org/html/rfc2616
Bypassing Web-Application Firewalls by abusing SSL/TLS
https://0x09al.github.io/waf/bypass/ssl/2018/07/02/web-application-firewall-bypass.html
WAF Bypass Techniques https://2018.appsec.eu/presos/Hacker _WAF-Bypass-Techniques_ Soroush-Dalili_AppSecEU2018.pptx
Application Security Weekly: Reverse Proxies Using Weblogic, Tomcat, and Nginx
https://www.acunetix.com/blog/web-security-zone/asw-reverse-proxies-using-weblogic-tomcat-and-nginx/
Protocol-Level Evasion of Web Application Firewalls
https://media.blackhat.com/bh-us-12/Briefings/Ristic/BH _US_ 12 _Ristic_
Protocol _Level_ Slides.pdf
Chunked HTTP transfer encoding https://swende.se/blog/HTTPChunked.html
Impedance Mismatch and Base64 https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/impedance-mismatch-and-base64/
HTTP 协议中的 Transfer-Encoding https://imququ.com/post/transfer-encoding-header-in-http.html
浅谈json参数解析对waf绕过的影响 https://xz.aliyun.com/t/306
3whs bypass ids https://www.exploit-db.com/exploits/44247/
Web Application Firewall (WAF) Evasion Techniques
https://medium.com/secjuice/waf-evasion-techniques-718026d693d8
BypassWAF新思路（白名单） https://www.chainnews.com/articles/774551652625.htm
利用分块传输吊打所有WAF https://www.anquanke.com/post/id/169738
HTTP Request Smuggling https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf