The uni-path solution of v2 is T R1 or T R2; both are opti-
mal. However, with multi-path solution, the optimal rout-
ing solution of v2 is the set {T R1, T R2}, which cannot be
achieved as R1 (cid:5)
R2 and v1 will ﬁlter out R2. Therefore,
type-1 isotonicity does not assure optimality in multi-path
solutions.
(cid:2)
Example 5. Again for Figure 9, consider
R1 ≈ R2 but T R1 (cid:5)
(cid:2)
T R2.
This satisﬁes type-2 isotonicity, but not type-1 isotonicity.
With multi-path solutions, the optimal routing solution of
v2 is the set {T R1}, which can be achieved unconditionally
as R1 ≈ R2. However, with uni-path solution, it is not an
optimal routing solution for v2 if v1 selects R2, where the
multi-path solution of v1 becomes {T R2}. Therefore, type-2
isotonicity does not assure optimality in uni-path solutions.
Thus, the above examples motivate the following theo-
rems.
Theorem 7. If a policy structure S satisﬁes type-1 iso-
<
∅
N
1
N
2
tonicity, then uni-path solutions are optimal.
Proof. Suppose there is a uni-path solution that is not
optimal. This implies that there exists v, u ∈ V such that
θv /∈ min(cid:3) P(v, v0) and T ∈ P(v, u) and R1, R2 ∈ P(u, v0),
where T R1 (cid:5)
R2. This violates type-1 iso-
tonicity. Since R1 (cid:5)(cid:5)
R1 or R2 ≈ R1, which
implies T R2 (cid:5) T R1 or T R2 ≈ T R1, if type-1 isotonicity is
satisﬁed. Hence, T R1 (cid:5)(cid:5)
T R2, which is a contradiction.
T R2, but R1 (cid:5)(cid:5)
R2 implies R2 (cid:5)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
Theorem 8. If a policy structure S satisﬁes type-2 iso-
tonicity, then multi-path solutions are optimal.
Proof. Suppose there is a multi-path solution that is not
optimal. This implies that there exists v, u ∈ V such that
Θv (cid:5)⊆ min(cid:3) P(v, v0) and T ∈ P(v, u) and R1, R2 ∈ P(u, v0),
where T R1 ≈ T R2, but R2 (cid:5)
R1. This violates type-2
isotonicity.
(cid:2)
Theorem 9. If a policy structure S satisﬁes strong iso-
tonicity, then the k-best-path solutions are optimal.
Proof. A k-best-path solution may be a multi-path so-
lution for some vertices, but as a set of k best uni-path
solutions for others. By Theorems 7 and 8, strong isotonic-
ity, which implies both type-1 and type-2 isotonicity, assures
the existence of both uni-path and multi-path solutions, and
hence the existence of k-best-path solutions.
6. HIGHER ORDER NON-STRICT
PREFERENCES
In this section, we extend routing solutions beyond uni-
path solution and multi-path solution. This is motivated by
other networking scenarios where there may be ambiguous
preferences among not only pairs of paths (which we call ﬁrst
order non-strict preferences), but also among collections of
sets of paths (which we call higher order non-strict prefer-
ences). First, we present some examples to illustrate the
ideas of higher order non-strict preferences.
6.1 Some Motivating Examples
Example 6. In Figure 10, the task for v1 is to select the
paths to v0 passing through as many as possible of the sub-
networks: N1, N2, N3. This can be in the situation of multi-
casting, where the sub-networks are receivers, or in virtual
private networking, where the sub-networks are extranets.
In these cases, all pairs of paths are equally preferred, since
any pair pass through all the sub-networks. Hence, there is
a non-strict preference among all pairs of paths.
Example 7. Figure 11 shows a diﬀerent topology, induc-
ing a diﬀerent preference. In this case, P3 is not better than
P2, since P2 passes N1 and N3, but P2 only passes N3. How-
ever, a combination of P1 and either P2 or P3 are equally
preferred, as all sub-networks are passed.
Example 8. Figure 12 shows a more complicated prefer-
ence, containing the two previous examples. In this case, all
pairs of paths in {P2, P3, P4} are equally preferred. P2 is not
better than P1, since P2 does not pass N3 as P1 does, but
P1 passes the sub-networks as P2 does. But P1 and either
P3 or P4 are equally preferred.
{ }P
1
{ }P
2
{ }P
3
P
1
P
2
v
1
P
3
{ ,
P P
2
1
}
≈
{ ,
P P
3
1
}
≈
{ ,
P P
3
2
}
N
3
Figure 10: v1 is to select the paths to v0 passing
through as many sub-networks as possible; all pairs
of paths are equally preferred.
<
∅
{ }P
1
{ }P
3
{ }P
2
{ ,
P P
2
1
}
≈
{ ,
P P
3
1
}
N
1
N
2
P
1
P
2
v
1
P
3
N
3
Figure 11: P3 is not better than P2; but a combina-
tion of P1 and either P2 or P3 are equally preferred.
<
∅
N
1
N
2
N
3
{ }P
2
{ }P
1
{ }P
3
{ }P
4
v
1
P
1
P
2
P
3
P
4
{ ,
P P
3
2
}
≈
{ ,
P P
4
2
}
≈
{ ,
P P
4
3
}
N
4
1
1
≈
}
}
{ ,
P P
4
{ ,
P P
3
Figure 12: All pairs of {P2, P3, P4} are equally pre-
ferred. P1 and either P3 or P4 are equally preferred.
In all the above examples, there is ambiguity in sets of
paths. For instance, in Example 7, apart from (P1, P2, P3),
v1 may declare a signature as P to its neighbours, where
n
o
{P1, P2},{P1, P3}
.
P =
n
o
{P1, P3}
P can be interpreted as that v1 has an ambiguous preference
over pairs {P1, P2} and {P1, P3}, so its announcement to
neighbours does not reveal which pair is selected. This is
clearly diﬀerent than the signature
which reveals
a speciﬁc pair. Therefore, it naturally gives rise to second
order non-strict preferences which concern collections of sets
of paths.
6.2 Second Order Bad Triangle
Having seen examples of second order non-strict prefer-
ences, we continue to hunt for second order bad triangle.
Example 9. In Figure 13, for each i = 1, 2, 3, vi tries
to pass through as many sub-networks as possible, but to
avoid Ai. This is equivalent to the setting in Figure 14.
Next we show that there is no solution in the second order
bad triangle of Figure 14.
R
1
v
1
T
2
A
3
A
2
T
1
v
3
v
2
A
1
T
3
R
2
R
3
N
1
N
2
N
3
v1 avoids A1
v2 avoids A2
v3 avoids A3
Figure 13: Each vi tries to pass through as many
sub-networks as possible, but to avoid Ai.
T
1
v
3
v
1
R
3
R
1
T
3
T
2
v
0
R
2
v
2
v1 : {T2R2, R1} < {R1} < etc.
v2 : {T3R3, R2} < {R2} < etc.
v3 : {T1R1, R3} < {R3} < etc.
Figure 14: A second order bad triangle.
We let the solution w.r.t. the second order bad triangle
∈ P(P(vi, v0)) for each i = 1, 2, 3. Assume there is a
as θ2
vi
solution, then there are two cases:
(1) {R1} = θ2
v1 :
(2) {R1} (cid:5)= θ2
v1 :
⇒ {T1R1, R3} = θ2
v3 ⇒ {R2} = θ2
v2 ,
(Because {R2} < {T3T1R1, T3R3}
and {R2} < {T3T1R1, T3R3, R2})
⇒ {T2R2, R1} = θ2
v1 ⇒ {R1} (cid:5)= θ2
v1 .
This is a contradiction.
v3 ⇒ {R3} = θ2
⇒ {T1R1, R3} (cid:5)= θ2
v3
⇒ {T3R3, R2} = θ2
v2 ⇒ {R1} = θ2
v1 ,
(Because {R1} < {T2T3R3, T2R2}
and {R1} < {T2T3R3, T2R2, R1})
This is a contradiction.
i
1
2
3
...
i-th order uni-path sol.
v ∈ P(v, v0)
θ1
e.g. P
v ∈ P(P(v, v0))
θ2
e.g. {P, Q}
n
o
v ∈ P 2(P(v, v0))
θ3
{P, Q},{P, R}
e.g.
...
i-th order multi-path sol.
v ∈ P(P(v, v0))
Θ1
e.g. {P, Q}
n
o
v ∈ P 2(P(v, v0))
Θ2
{P, Q}, {P, R}
e.g.
nn
o
n
oo
v ∈ P 3(P(v, v0))
Θ3
{Q, R}
{P, Q},{P, R}
,
e.g.
...
Table 1: Domains of higher order solutions.
To generalise ﬁrst order solutions, we deﬁne the original
policy structure as the zeroth order policy structure as:
where (cid:6)0 is the subpath relation on P(v0), and the i-th
order policy structure as:
S 0 (cid:3) (cid:2)P(v0), (cid:5)0, (cid:6)0(cid:3),
[
S i (cid:3) (cid:2)Xi ⊆
P i
(P(v, v0)), (cid:5)i, (cid:6)i(cid:3),
v∈V
where (cid:5)i is a preorder for preferences over Xi and (cid:6)i is the
structural dependence over Xi. More precisely, for i ≥ 1, we
write:
• P (cid:5)i Q, if P is at least as good as Q, subject to
P, Q ∈ P i(P(v, v0)) for some v ∈ V,
• P (cid:6)i Q, if some element in Q depends on all the ele-
ments in P. That is, for all p ∈ P, there exists q ∈ Q
such that p (cid:6)i−1 q.
Note that (cid:6)i is always well-deﬁned, but (cid:5)i is speciﬁed by
an individual policy structure.
Using the above deﬁnition of S 1 for Example 9, we can
easily visualise the violation of anti-reﬂexivity on R[S 1] as
in Figure 15, and hence, the absence of solutions. This nat-
urally generalises the prior theorems on zeroth order policy
relations.
Therefore, there is no solution in the second order bad tri-
angle.
In a similar vein as Examples 2 and 3, it is possible to
construct cases where there is no second order multi-path
solution or no second order uni-path solution.
6.3 Higher Order Routing Solutions
{ }R
1
}
{
T R R
1
,
2
2
{ }R
2
{
T R R
2
,
3
3
}
1
(cid:2)
∼
1

∼
{
T R R
3