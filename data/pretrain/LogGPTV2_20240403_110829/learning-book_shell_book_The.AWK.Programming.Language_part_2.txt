117
---
## Page 11
THE AWK PROGRAMMING LANGUAGE
CONTENTS
5.3 Text Processing
119
Text Formatting
Word Counts
119
Maintaining Cros-References in Manuscripts
120
120
Making a KWIC Index
Making Indexes
122
124
5.4 Summary
,130
CHAPTER 6:LITTLE LANGUAGES
131
6.1 An Assembler and Interpreter
132
6.2 A Language for Drawing Graphs
135
6.3 A Sort Generator
. 140
6.4 A Reverse-Polish Calculator
142
6.5 An Infix Calculator
. 145
6.6 Recursive-Descent Parsing
 147
6.7 Summary
152
CHAPTER 7:EXPERIMENTS WITH ALGORITHMS
153
7.1 Sorting
153
Insertion Sort
153
Quicksort
Heapsort
160
162
7.2 Profiling
167
7.3 Topological Sorting
170
Breadth-First Topological Sort
171
Depth-First Search
172
Depth-First Topological Sort
173
7.4 Make: A File Updating Program 
175
7.5 Summary
179
CHAPTER 8: EPILOG
181
8.1 AWK as a Language
181
8.2 Performance
183
8.3 Conclusion
185
APPENDIX A:AWK SUMMARY
187
APPENDIX B:ANSWERS TO SELECTED EXERCISES
193
INDEX
205
---
## Page 12
ANAWKTUTORIAL
applied to a wide variety of computing and data-manipulation tasks. This
quickly as possible. Chapter 2 describes the whole language, and the remaining
chapters show how awk can be used to solve problems from many different
areas. Throughout the book, we have tried to pick examples that you should
find useful, interesting, and instructive.
1.1GettingStarted
Useful awk programs are often short, just a line or two. Suppose you have a
file called emp.data that contains the name, pay rate in dollars per hour, and
number of hours worked for your employees, one employee record per line, like
this:
Beth
4.00
Dan
0
3.75
Kathy
4.00
Mark
5.00
20
10
Mary
Susie
4.25
5.50
18
  sg (sq s   p  s  o nm no m
worked more than zero hours. This is the kind of job that awk is meant for, so
it's casy. Just type this command line:
avk '$3 > 0 (print $1, $2 ·$3 )′enp.data
You should get this output:
Kathy 40
Mary 121
Mark 100
Susie 76.5
This command line tells the system to run awk, using the program inside the
1
---
## Page 13
2ANAWK TUTORIAL
CHAPTER 1
quote characters, taking its data from the input file emp.data. The part inside
the quotes is the complete awk program. It consists of a single pattern-action
statement. The pattern, $3 > 0, matches every input line in which the third
column, or field, is greater than zero, and the action
{print s1,$2+$3 }
prints the first field and the product of the second and third fields of each
matched line.
If you want to print the names of those employees who did not work, type
this command line:
awk 's3 == 0 ( print $1 )′ emp.data
Here the pattern, $3 == 0, matches each line in which the third field is equal
to zero, and the action
(print s1}
prints its first field.
As you read this book, try running and modifying the programs that are
presented. Since most of the programs are short, you'll quickly get an under-
standing of how awk works. On a Unix system, the two transactions above
would look like this on the terminal:
$awk'$3>0(print $1,$2·$3 )′enp.data
Kathy 40
Mark 100
Hary 121
Susie 76.5
S awk
Beth
Dan
$
The $ at the beginning of a line is the prompt from the system; it may be dif-
ferent on your machine.
The Structure of an AwK Program
Let's step back a moment and look at what is going on. In the command
lines above, the parts between the quote characters are programs written in the
awk programming language. Each awk program in this chapter is a sequence of
one or more pattern-action statements:
pattern{action}
pattern
（action}
another, searching for lines that are matched by any of the patterns in the pro-
gram. The precise meaning of the word “match" depends on the pattern in
---
## Page 14
SECTION 1.1
GETTING STARTED
question; for patterns like $3 > 0, it means “the condition is true."
Every input line is tested against each of the patterns in turn. For each pat-
tern that matches, the corresponding action (which may involve multiple steps)
continues until all the input has been read.
$3==0(print $1}
is a single pattern-action statement; for every line in which the third field is
zero, the first field is printed.
Either the pattern or the action (but not both) in a pattern-action statement
may be omitted. If a pattern has no action, for example.
$3 == 0
then each line that the pattern matches (that is, each line for which the condi-
tion is true) is printed. This program prints the two lines from the emp.data
file where the third field is zero:
Beth4.00
。
Dan
3.75
If there is an action with no pattern, for example,
(print s1}
then the action, in this case printing the first field, is performed for every input
line.
to distinguish them from patterns.
Running an AwK Program
There are several ways to run an awk program. You can type a command
line of the form
ndod,
to run the program on each of the specified input files. For example, you could
type
awk'$3 os 0( print $1 }′file1 file2
field is zero.
to print the first field of every line of fi1le1 and file2 in which the third
You can omit the input files from the command line and just type
wpod,xme
In this case awk will apply the program to whatever you type next on your ter-
minal until you type an end-of-file signal (control-d on Unix systems). Here is
a sample of a session on Unix:
---
## Page 15
AN AWK TUTORIAL
CHAPTER 1
s awk's3
0{print $1}
Beth
4.00
Beth
Dan
3.75
Dan
0
Kathy
Kathy
3.75
3.75
10
Kathy
+ + +
The heavy characters are what the computer printed.
This bchavior makes it easy to experiment with awk: type your program,
then type data at it and see what happens. We again encourage you to try the
examples and variations on them.
Notice that the program is enclosed in single quotes on the command line.
This protects characters like s in the program from being interpreted by the
shell and also allows the program to be longer than one line.
This arrangement is convenient when the program is short (a few lines). If
the program is long, however, it is more convenient to put it into a separate file,
say progfile, and type the command line
awk -f progfile optional list of input files
The -f option instructs awk to fetch the program from the named file. Any
filename can be used in place of progfile.
Errors
If you make an error in an awk program, awk will give you a diagnostic
message. For example, if you mistype a brace, like this:
awk '$3ee 0 [ print s1)′emp.data
you will get a message like this:
awk: syntax error at source line 1
context is
><  e p
means that no
recovery was attempted. Sometimes you get a little more help about what the
error was, such as a report of mismatched braces or parentheses.
Because of the syntax error, awk did not try to execute this program.Some
errors, however, may not be detected until your program is running. For cxam-
report the input line number and the line number in the program at which the
division was attempted.
---
## Page 16
SECTION 1.2
SIMPLE OUTPUTS
1.2 Simple Output
The rest of this chapter contains a collection of short, typical awk programs
based on manipulation of the emp.data file above. We'll explain briefly
what's going on, but these examples are meant mainly to suggest useful opera-
tions that are casy to do with awk - printing fields, selecting input, and
transforming data. We are not showing everything that awk can do by any
means, nor are we going into many details about the specific things presented
here. But by the end of this chapter, you will be able to accomplish quite a bit,
and you'll find it much easier to read the later chapters.
We will usually show just the program, not the whole command line. In
every case, the program can be run either by enclosing it in quotes as the first
argument of the awk command, as shown above, or by putting it in a file and
invoking awk on that file with the f option.
There are only two types of data in awk: numbers and strings of characters.
The emp.data file is typical of this kind of information  a mixture of words
and numbers separated by blanks and/or tabs.
Awk reads its input one line at a time and splits each line into fields, where,
by default, a field is a sequence of characters that doesn't contain any blanks or
forth. The entire line is called so. The number of fields can vary from line to
tabs. The first field in the current input line is called s1, the second s2, and so
line.
Often, all we need to do is print some or all of the fields of each line,
perhaps performing some calculations. The programs in this section are all of
that form.
Printing Every Line
If an action has no pattern, the action is performed for all input lines. The
statement print by itself prints the current input line, so the program
(print }
prints all of its input on the standard output. Since $0 is the whole line,
(print $0 }
does the same thing.
Printing Certain Flelds
More than one item can be printed on the same output line with a single
nd eo jo si p e  un d o d s s ad
line is
{ print $1,$3 }
With emp . data as input, it produces
---
## Page 17
AN AWK TUTORIAL
CHAPTER 1
Beth0
Dan 0
Kathy 10
Maxk 20
Susie 18
separated by a single blank when they are printed. Each line produced by
print ends with a newline character. Both of these defaults can be changed;
we'll show how in Chapter 2.
NF,the Number of Flelds
It might appear you must always refer to fields as $1, $2, and so on, but
evaluated and its numeric value is used as the field number. Awk counts the
number of fields in the current input line and stores the count in a built-in vari-
able called NF. Thus, the program
(print NF,$1, $NF }
prints the number of fields and the first and last fields of each input line.
Computing and Printing
You can also do computations on the field values and include the results in
what is printed. The program
(print $1,$2+$3 ）
is a typical example. It prints the name and total pay (rate times hours) for
each employee:
Beth 0
Dan 0
Kathy 40
Mark 100
Mary 121
Susie 76.5
We'll show in a moment how to make this output look better.
Printing Lino Numbers
Awk provides another built-variable, called NR, that counts the number of
lines read so far. We can use NR and $0 to prefix each line of emp.data with
its line number:
(print NR,$0 }
The output looks like this:
---
## Page 18
SECTION 1.3
FANCIER OUTPUT
1 Beth 4.00
2Dan
3.75
3 Kathy 4.00
4Mark 5.00
10
5 Mary 5.50
6 Su8ie 4.25
22
18
Putting Text in the Output
You can also print words in the midst of fields and computed values:
(print “total pay for”,$1，“is”,$2+$3 )
prints
total pay for Beth is 0
total pay for Dan is 0
total pay for Kathy is 40
total pay for Mark is 100
total pay for Mary is 121
total pay for Susie is 76.5
In the print statement, the text inside the double quotes is printed along with
the fields and computed values.
1.3 Fancier Output
The print statement is meant for quick and easy output. To format the
ment. As we shall see in Section 2.4, printf can produce almost any kind of
output, but in this section we'll only show a few of its capabilities.
Lining Up Fields
The printf statement has the form
printf(format, value;, value, -.,value,)
with specifications of how each of the values is to be printed. A specification is
a % followed by a few characters that control the format of a value. The first
specification tells how value is to be printed, the second how value2 is to be
printed, and so on. Thus, there must be as many % specifications in formar as
values to be printed.
Here's a program that uses printf to print the total pay for every
employee:
(printf("total pay for %s is $%.2f\n", $1, $2 + s3))
The specification string in the printf statement contains two % specifications.
---
## Page 19
AN AWK TUTORIAL
CHAPTER 1
The first, %s, says to print the first value, $1,as a string of characters; the
after the decimal point.Everything else in the specification string,including the
second, %.2f, says to print the second value, $2+$3, as a number with 2 digits
dollar sign, is printed verbatim; the An at the end of the string stands for a new-
line, which causes subsequent output to begin on the next line.With
emp . data as input, this program yields:
total pay for Beth is $0.00
total pay for Kathy 1s s40.00
total pay for Dan is s0.00
total pay for Mark is s100.00
total pay for Mary is s121.00
total pay for Susie is $76.50
create them yourself. Don't forget the n.
Here's another program that prints each employee’s name and pay
(printf(*%-8s $%6.2f\n°,s1,$2+$3）)
The first specification, %-8s, prints a name as a string of characters left-
justified in a field 8 characters wide. The second specification, %6 .2f, prints
the pay as a number with two digits after the decimal point, in a field 6 charac-
ters wide:
Beth
$0.00
Dan
$0.00
Kathy
$40.00
Mary
Mark
$100.00
$121.00
Susie
$76.50
We'll show lots more examples of printf as we go along: the full story is in
Section 2.4.
Sorting the Output
Suppose you want to print all the data for each employee, along with his or
her pay, sorted in order of increasing pay. The easiest way is to use awk to pre-
fix the total pay to each employee record, and run that output through a sorting
program. On Unix, the command line
awk ‘(printf("%6.2f xs\n",$2·$3,s0) 1′enp.data sort
pipes the output of awk into the sort command, and produces:
---
## Page 20
SECTION 1.4
SELECTION9
0.00 Beth
0.00
3.75
4.00
0
Dan
0
40.00
Kathy
4.00
10
76.50
Susie
4.25
18
100.00
Mark
121.00
5.50
5.00
22
20
Mary
1.4 Selection