# 十四、无服务器功能
由于可扩展性和降低的管理开销，无服务器计算和无服务器功能在过去几年中获得了巨大的吸引力。Azure Functions、AWS Lambda 和 GCP 云运行等云服务让用户可以非常轻松地将代码作为无服务器函数运行。
**无服务器**这个词指的是任何不需要管理服务器的解决方案。无服务器函数指的是无服务器计算的一个子集，您可以根据需要将代码作为函数运行。这意味着函数中的代码只有在有需求时才会运行和执行。这种架构风格被称为事件驱动架构。在事件驱动的体系结构中，当有事件发生时，会触发事件使用者。在无服务器函数的情况下，事件消费者将是这些无服务器函数。事件可以是任何东西，从队列中的消息到上传到存储的新对象，甚至是一个 HTTP 调用。
无服务器函数经常用于后端处理。无服务器功能的一个常见例子是创建上传到存储器的图片缩略图，如图 14.1*所示。由于您无法预测将上传多少图片以及何时上传，因此很难规划传统基础架构以及您应该有多少服务器可用于此过程。如果您将缩略图的创建实现为无服务器功能，则该功能将在上传的每张图片上调用。你不必计划函数的数量，因为每一张新的图片都会触发一个新的函数来执行。*
![Example architecture of a serverless function to generate thumbnails of images](img/B17338_14_01.jpg)
图 14.1:生成映像缩略图的无服务器函数的示例架构
正如您在前面的示例中看到的，功能将自动扩展以满足增加或减少的需求。此外，每个功能都可以独立于其他功能进行扩展。然而，这种自动缩放只是使用无服务器功能的一个好处。无服务器功能的另一个好处是易于开发。使用无服务器函数，您可以专注于编写代码，而不必处理底层基础架构。无服务器功能允许部署代码，而不用担心管理服务器和中间件。最后，在公共云无服务器功能中，每次执行该功能都要付费。这意味着每次运行您的函数时，您都要付费，并且当您的函数没有运行时，您的空闲时间不收费。
公有云无服务器功能平台的流行导致了多个开源框架的创建，以使用户能够在 Kubernetes 之上创建无服务器功能。在本章中，您将学习如何直接使用开源版本的 Azure Functions 在**Azure Kubernetes Service**(**AKS**)上部署无服务器功能。您将从运行一个基于 HTTP 消息触发的简单函数开始。之后，您将在集群上安装功能**自动缩放器**功能。您还将把部署了 AKS 的应用与 Azure 存储队列集成在一起。我们将涵盖以下主题:
*   不同功能平台概述
*   部署一个 HTTP 触发的函数
*   部署队列触发函数
让我们从探索 Kubernetes 可用的各种功能平台开始这一章。
## 各种功能平台
功能平台，如 Azure Functions、AWS Lambda 和 Google Cloud Functions，已经获得了巨大的普及。运行代码而不需要管理服务器并具有几乎无限的规模的能力非常受欢迎。使用云提供商的功能实现的缺点是，您被锁定在云提供商的基础架构及其编程模型中。此外，您只能在公共云中运行您的功能，而不能在您自己的数据中心中运行。
已经推出了许多开源函数框架来解决这些缺点。有许多流行的框架可以在 Kubernetes 上运行:
*   **Knative**([https://cloud.google.com/knative/](14.html)):Knative 是用 Go 语言编写的无服务器平台，由谷歌开发。您可以在谷歌云或您自己的 Kubernetes 集群上运行完全管理的 Knative 功能。
*   **OpenFaaS**([https://www.openfaas.com/](14.html)):OpenFaaS 是一个无服务器框架，是 Kubernetes 原生的。它可以在 AKS 等托管 Kubernetes 环境中运行，也可以在自托管集群中运行。OpenFaaS 也可以作为托管云服务使用 **OpenFaaSCloud** 。该平台是用 Go 语言编写的。
*   **无服务器**([https://serverless.com/](14.html)):这是一个基于 Node.js 的无服务器应用框架，可以在包括 Azure 在内的多个云提供商上部署和管理功能。Kubernetes 支持通过**kubernetes**提供。
*   **裂变. io**([https://fission.io/](14.html)):裂变是一个由公司平台 9 支持的无服务器框架。它是用围棋语言写的，是 Kubernetes 人的母语。它可以在任何 Kubernetes 集群上运行。
*   **Apacheopen 晶须**([https://openwhisk.apache.org/](14.html)):open 晶须是由 Apache 组织维护的开源、分布式无服务器平台。它可以在 Kubernetes、Mesos 或 Docker Compose 上运行。它主要是用 Scala 语言编写的。
微软对其功能平台采取了一个有趣的策略。微软将 Azure Functions 作为 Azure 上的托管服务进行操作，并开源了完整的解决方案，使其可以在任何系统上运行([https://github.com/Azure/azure-functions-host](14.html))。这也使得 Azure Functions 编程模型在 Kubernetes 之上可用。
微软还与红帽合作发布了一个名为 **Kubernetes 事件驱动自动缩放** ( **KEDA** )的额外开源项目，以使 Kubernetes 上的缩放功能更容易。KEDA 是一个定制的自动缩放器，允许在 Kubernetes 上的部署从零 Pod 向下和向上缩放，这是不可能使用 Kubernetes 中默认的**水平 Pod 自动缩放器** ( **HPA** )实现的。从零扩展到一个 pod 的能力很重要，这样您的应用就可以开始处理事件，但是缩减到零实例对于保留集群中的资源很有用。KEDA 还为 Kubernetes HPA 提供了额外的指标，以便根据集群外部的指标(例如，队列中的消息数量)做出扩展决策。
#### 注意
我们在*第 4 章*、*构建可扩展应用*中介绍并解释了 HPA。
在本章中，您将通过两个示例向 Kubernetes 部署 Azure 函数:
*   一个 HTTP 触发的函数(没有 KEDA)
*   队列触发函数(带 KEDA)
在开始这些功能之前，下一节将考虑这些部署的必要先决条件。
## 设置先决条件
在本节中，您将设置在 Kubernetes 集群上构建和运行函数所需的先决条件。您需要在 Azure 中设置一个 **Azure 容器注册表** ( **ACR** )和一个**虚拟机** ( **VM** )用于开发功能。ACR 将用于存储包含您将开发的功能的自定义容器映像。您还将使用虚拟机来构建函数和创建 Docker 映像，因为您不能从 Azure Cloud Shell 中这样做。
在*容器映像*一节中的*第 1 章*、*容器和 Kubernetes*介绍中介绍了容器映像和容器注册。容器映像包含启动实际运行的容器所需的所有软件。在本章中，您将构建包含您的函数的自定义容器映像。您需要一个地方来存储这些映像，以便 Kubernetes 可以提取它们并按比例运行容器。您将为此使用 ACR。ACR 是一个完全由 Azure 管理的私有容器注册表。
到目前为止，在本书中，您已经在 Azure Cloud Shell 上运行了所有示例。对于本章中的示例，您将需要一个单独的虚拟机，因为 Azure Cloud Shell 不允许您构建容器映像。您将在 Azure 中创建新的虚拟机来执行这些任务。
让我们从创建一个 ACR 开始。
### 蔚蓝容器登记处
Kubernetes 上的 Azure 函数需要一个映像注册表来存储它的容器映像。在本节中，您将创建一个 ACR，并配置您的 Kubernetes 集群以访问该集群:
1.  In the Azure search bar, search for **container registry** and click on Container registries, as shown in *Figure 14.2*:
    ![Navigating to Container registries through the Azure portal](img/B17338_14_02.jpg)
    图 14.2:通过 Azure 门户导航到容器注册服务
2.  Click the Add button at the top to create a new registry. To organize the resources in this chapter together, create a new resource group. To do this, click on Create new under the Resource group field to create a new resource group, and call it **Functions-KEDA**, as shown in *Figure 14.3*:
    ![Creating a new resource group to create the registry](img/B17338_14_03.jpg)
    图 14.3:创建新的资源组
    提供创建注册表的详细信息。注册表名称需要是全局唯一的，因此考虑将您的首字母添加到注册表名称中。建议在与集群相同的位置创建注册表。为了减少演示的开支，您可以将 SKU 更改为基本版。选择底部的审核+创建按钮，创建注册表，如图*图 14.4* :
    ![Review the details provided and hit Review + create to create the registry](img/B17338_14_04.jpg)
    图 14.4:提供创建注册表的细节
    在结果窗格中，单击创建按钮创建注册表。
3.  Once your registry is created, open Cloud Shell so that you can configure your AKS cluster to get access to your container registry. Use the following command to give AKS permissions to your registry:
    az aks 更新-n 握手\
    -g rg-hand onaks-attach-ACR
    这将返回类似于图 14.5 的输出。该图已被裁剪，仅显示输出的顶部:
![Giving AKS permissions on your registry](img/B17338_14_05.jpg)
图 14.5:允许 AKS 集群访问容器注册表
你现在有一个与 AKS 集成的 ACR。在下一节中，您将创建一个用于构建 Azure 函数的虚拟机。
### 创建虚拟机
在本节中，您将创建一个虚拟机，并安装在该计算机上运行 Azure Functions 所需的工具:
*   Docker 运行时
*   蓝色命令行界面
*   天青函数
*   Kubectl
    #### 注意
    为了确保一致的体验，您将在 Azure 上创建一个用于开发的虚拟机。如果您希望在本地计算机上运行该示例，可以在本地安装所有必需的工具。
让我们开始创建虚拟机:
1.  To ensure this example works with the Azure trial subscription, you will need to scale down your cluster to one node. You can do this using the following command:
    az aks 比例尺-n 手摇-g rg-手摇-节点-计数 1
2.  To authenticate to the VM you are going to create, you'll need a set of SSH keys. If you followed the example in *Chapter 9*, *Azure Active Directory pod-managed identities in AKS* in the *Setting up a new cluster with AAD pod-managed identity* section, you will already have a set of SSH keys. To verify that you have SSH keys, run the following command:
    ls ~/.ssh
    这将向您显示 SSH 私钥( **id_rsa** )和公钥( **id_rsa.pub** )的存在，如*图 14.6* 所示:
    ![Verifying the SSH keys that are present](img/B17338_14_06.jpg)
    图 14.6:验证 SSH 密钥是否存在
    如果您还没有这些密钥，您将需要使用以下命令生成一组 SSH 密钥:
    ssh 密钥根
    系统将提示您输入位置和密码。保留默认位置并输入一个空密码。
3.  You will now create the VM. You will create an Ubuntu VM using the following command:
    功能-KEDA-开发机器\
    -image UbuntuLTS-ssh-key-value ~/。ssh/id_rsa.pub \
    -管理员-用户名手柄-标准尺寸 _D1_v2
4.  This will take a couple of minutes to complete. Once the VM is created, Cloud Shell should show you its public IP, as displayed in *Figure 14.7*:
    ![Running the az vm create command and getting the public ip of the VM from the command](img/B17338_14_07.jpg)
    图 14.7:创建开发虚拟机
    使用以下命令连接到虚拟机:
    宋承宪手摇@
    系统会提示您是否信任机器的身份。键入**是**确认。
5.  You're now connected to a new VM on Azure. On this machine, we will begin by installing Docker:
    sudo apt-get 更新
    sudo apt-get install dock . io-y-安装 Docker
    sudo 系统 ctl 启用 docker
    sudo system ctl start dock(sudo 系统 CTL 启动停靠程序)
6.  To make the operation smoother, add the user to the Docker group. This will ensure you can run Docker commands without **sudo**:
    sudo usermod -aG 停靠者 handsonaks
    newgrp Docker
    您现在应该能够运行 **hello-world** 命令:
    docker 运行 hello-world
    这将向您显示类似于图 14.8 的输出:
    ![Verifying that Docker runs on the virtual machine](img/B17338_14_08.jpg)
    图 14.8:验证 Docker 在虚拟机上运行
7.  Next, you will install the Azure CLI on this VM. You can install the CLI using the following command:
    curl-sL https://aka.ms/InstallAzureCLIDeb | sudo bash
8.  Verify that the CLI was installed successfully by signing in:
    登录信息
    这将显示您需要在[https://microsoft.com/devicelogin](14.html)输入的登录代码:
    ![Logging in to the Azure CLI](img/B17338_14_09.jpg)
    图 14.9:登录到 Azure 命令行界面
    浏览到该网站并粘贴提供给您的登录代码，以使您能够登录到 Cloud Shell。请确保在您登录的浏览器中与有权访问您的 Azure 订阅的用户一起执行此操作。
    现在，您可以使用命令行界面向 ACR 验证您的计算机。这可以使用以下命令来完成: