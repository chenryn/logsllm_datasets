COSes, which may not be sufﬁcient in many cloud
environments. Further research is required to study the
use of CAT and its effectiveness as a countermeasure
to LLC-based attacks.
Fine-grained cache partitioning can also be done
dynamically using special load and store instructions
that can lock a security-critical cache line into the cache,
as in the partition-locked cache (PLcache) proposed by
Wang and Lee [40]. However, the PLcache design only
locks data in the cache, it is not clear how it can be
extended to lock instructions.
C. Run-time diversiﬁcation
Other proposals for secure cache designs randomize
the memory-to-cache mapping [40, 41]. This random-
izes resource contention, so an attacker cannot extract
useful information. These designs have been applied
to the L1 data cache without causing performance
degradation, but use on the much larger LLC has not
been investigated to date.
Fuzzy time approaches disrupt the timing measure-
ment by adding noise or slowing it down, or reduce the
accuracy of the clock [18, 37]. The drawback is that it
may impact other benign applications that require the
access to the high-resolution timers.
619
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:03 UTC from IEEE Xplore.  Restrictions apply. 
X. CONCLUSIONS
We have presented a method for implementing an
LLC-based PRIME+PROBE attack. We have demon-
strated that the LLC presents a high-bandwidth channel,
in the worst case exceeding 1 Mb/s. We have then shown
that the approach can be used to mount cross-core,
cross-VM side channel attacks that leak keys effectively
for crypto code with secret-dependent execution paths
as well as with secret-dependent data access. We have
demonstrated these attacks against implementations of
ElGamal decryption in GnuPG. The attack is very
effective, taking a few seconds to break the key when
used against old versions of GnuPG and between 12
and 27 minutes for the latest version.
Our assumptions are minimal: we rely on cache
inclusiveness and utilize large-page mappings in the
attacker, and assume that the VMM uses large frames
to map guest physical memory. Beyond that we make
no assumptions on the environment or the victim, other
than it repeatedly decrypts text using the same key. In
particular, we do not require memory sharing across
VMs, do not exploit VMM weaknesses and show that
the same attack works with different VMMs and differ-
ent hardware platforms.
Given these weak assumptions, we believe that our
attack is eminently practical, and as such presents a
real threat against keys used by cloud-based services.
However, we have not
tested the attack in a noisy
environment, nor in a real cloud settings. Experimenting
in such environments to measure the effects of noise on
the attack is left for future work.
this will result
Given the dependence on large-page mappings, the
easiest countermeasure would be to disable large pages
in the VMM, but
in a performance
penalty for all clients of the cloud provider, whether
or not they are potential targets—the provider will most
likely not be too keen to use this defense. Also, it might
be possible to adapt our attack to work without large
pages (although at a reduced efﬁciency).
While ﬁxing GnuPG would defeat our speciﬁc at-
tacks, this will not prevent information leaks from other
software. In principle, any frequently-executed secret
computation that
is not constant-time is vulnerable
to the attack. Leveraging hardware support for LLC
partitioning might be the most promising defense, but
whether those mechanisms work in practice remains to
be seen.
ACKNOWLEDGMENTS
NICTA is funded by the Australian Government
through the Department of Communications and the
Australian Research Council through the ICT Centre
of Excellence Program. This work was also supported
by DHS/AFRL FA8750-12-2-0295 and NSF CNS-
1218817. We thank Carlos Rozas and Frank Mckeen
from Intel for their support of this work when Fangfei
Liu was an intern at Intel Labs.
HANDLING NOISE IN THE MULTIPLICATION CACHE
APPENDIX A
SET
The technique of Section VII-D relies on identify-
ing the sequence of multiplication operations from the
activity in the multiplication cache set. In the absence
of noise, this is a trivial task. However, two types of
noise complicate the process: occasional gaps within
a single multiplication operation and the merging of
multiple multiplication operations to a single sequence
of activity. We suspect that the former is caused by short
bursts of system activity and that the latter is caused
by our probing process occasionally failing to evict all
victim lines from the multiplication cache set.
To clean this noise, we remove short gaps of inactiv-
ity in the multiplication cache set and break sequences
of activity longer than twice the expected length of
a multiplication operation. We use the cleaned result
to identify multiplication operations. With the multipli-
cation operation identiﬁed, we can generate the trace
patterns by checking for activity in the other probed
cache set during each multiplication operation.
Figure 10 shows an example of a trace of the two
cache sets and the results of identifying the multiplica-
tion operations. The ﬁrst, fourth and ﬁfth multiplications
show no indication of noise in the multiplication cache
set. In the sixth multiplication we notice that no activity
is indicated in the multiplication cache set during the
second time slot. Because this gap is short, we include
this time slot in the multiplication.
The trace captures activity in the multiplication
cache set during time slots 11 to 22. As this period
is longer than twice the expected length of a multipli-
cation, we treat it as the second type of noise and split
it into two multiplications.
Thus, the trace in Figure 10 spans six multiplica-
tions. The other cache set shows activity during the ﬁrst
and sixth of these. That is, the trace pattern from this ﬁg-
ure is 100001. We ignore activity captured in the other
cache set that in time slots outside the multiplication
operations, e.g. in time slot 26.
APPENDIX B
CALCULATING THE NUMBER OF REQUIRED
OBSERVATIONS
We have seen that the attack collects traces for all
the cache sets on LLC during multiple exponentiations.
The question that remains is how many exponentiations
620
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:03 UTC from IEEE Xplore.  Restrictions apply. 
Activity in the multiplication set
Activity in the other set
1
2
3
4
5
6
 0
 10
 20
 30
 40
 50
Time slot
Fig. 10: Traces of the multiplication and another cache
sets, indicating time spans of multiplication operations
(shaded) and the multiplication index.
we need to observe in order to collect enough traces for
the attack.
For effectively identifying multipliers, including re-
dundancy for error correction, we need 10–15 traces
for each multiplier. On our experimental platforms, a
3,072 bit multiplier maps to 6–7 cache sets on the LLC.
If we collect one trace from each cache set with zero
error rate, we expect to obtain processable traces from
6–7 cache sets. However, as shown in Figure 6, some
cache sets are constantly active on our desktop platform,
demonstrating an error rate for a third of all sets. Hence,
we anticipate to obtain four or ﬁve usable traces for
each multiplier during an exponentiation. By collecting
observations for four exponentiations from each cache
set, the expected number of reliable traces for each
multiplier is between 16 and 20, which satisﬁes our
requirements.
REFERENCES
[1] O. Acıiçmez, “Yet another microarchitectural attack: ex-
ploiting I-Cache,” in Comp. Security Arch. WS, Fairfax,
VA, US, Nov 2007, pp. 11–18.
[2] O. Acıiçmez and W. Schindler, “A vulnerability in RSA
implementations due to instruction cache analysis and its
demonstration on OpenSSL,” in CT-RSA, San Francisco,
CA, US, Apr 2008, pp. 256–273.
[3] O. Acıiçmez, Ç. K. Koç, and J.-P. Seifert, “On the power
of simple branch prediction analysis,” in ASIACCS, Sin-
gapore, Mar 2007, pp. 312–320.
[4] O. Acıiçmez, B. B. Brumley, and P. Grabher, “New
results on instruction cache attacks,” in CHES, Santa
Barbara, CA, US, Apr 2010, pp. 110–124.
[5] N. Benger, J. van de Pol, N. P. Smart, and Y. Yarom,
“‘Ooh aah. . . , just a little bit’: A small amount of side
channel can go a long way,” in CHES, Busan, KR, Sep
2014, pp. 75–92.
[6] D. J. Bernstein, T. Lange, and P. Schwabe, “The security
impact of a new cryptographic library,” in Conf. Cyptol-
ogy & Inform. Security Latin America, Santiago, CL, Oct
2012, pp. 159–176.
[7] J. Bos and M. Coster, “Addition chain heuristics,” in
CRYPTO, Santa Barbara, CA, US, Aug 1989, pp. 400–
407.
[8] B. B. Brumley and R. M. Hakala, “Cache-timing tem-
plate attacks,” in ASIACRYPT, 2009, pp. 667–684.
[9] C. Clavier and M. Joye, “Universal exponentiation algo-
rithm a ﬁrst step towards Provable SPA-resistance,” in
CHES, Paris, FR, May 2001, pp. 300–308.
[10] D. Cock, Q. Ge, T. Murray, and G. Heiser, “The last
mile: An empirical study of some timing channels on
seL4,” in CCS, Scottsdale, AZ, US, Nov 2014, pp. 570–
581.
[11] T. ElGamal, “A public key cryptosystem and a signature
scheme based on discrete logarithms,” Trans. Inform.
Theory, no. 4, pp. 469–472, Jul 1985.
[12] D. Genkin, A. Shamir, and E. Tromer, “RSA key ex-
traction via low-bandwidth acoustic cryptanalysis,” in
CRYPTO, Santa Barbara, CA, US, Aug 2014, pp. 444–
461.
[13] D. Genkin, L. Pachmanov, I. Pipman, and E. Tromer,
“Stealing keys from PCs by radio: Cheap electromag-
netic attacks on windowed exponentiation,” Cryptology
ePrint Archive, Report 2015/170, Feb 2015, http://eprint.
iacr.org/.
[14] I. Glover and P. Grant, Digital Communications. Pren-
tice Hall, 2010.
[15] D. M. Gordon, “A survey of fast exponentiation meth-
ods,” J. Algorithms, no. 1, pp. 129–146, Apr 1998.
[16] D. Gullasch, E. Bangerter, and S. Krenn, “Cache games
— bringing access-based cache attacks on AES to prac-
tice,” in Symp. Security & Privacy, Oakland, CA, US,
may 2011, pp. 490–595.
[17] T. Hastie, R. Tibshirani, and J. Friedman, The Elements
of Statistical Learning: Data Mining, Inference and
Prediction, 2nd ed.
New York, NY, US: Springer
Science+Business Media, 2009.
[18] W.-M. Hu, “Reducing timing channels with fuzzy time,”
in Symp. Security & Privacy, Oakland, CA, US, May
1991, pp. 8–20.
[19] R. Hund, C. Willems, and T. Holz, “Practical timing side
channel attacks against kernel space ASLR,” in Symp.
Security & Privacy, San Francisco, CA, US, May 2013,
pp. 191–205.
[20] Intel 64 and IA-32 Architectures Optimization Reference
Manual, Intel Corporation, Apr 2012.
[21] Intel 64 and IA-32 Architectures Software Developer’s
Manual Volume 3B: System Programming Guide, Part
2, Intel Corporation, Jun 2014.
[22] G. Irazoqui, M. S. Inci, T. Eisenbarth, and B. Sunar,
“Wait a minute! a fast, cross-VM attack on AES,” in
RAID, Gothenburg, SE, Sep 2014, pp. 299–319.
[23] G. Irazoqui, T. Eisenbarth, and B. Sunar, “S$A: A
shared cache attack that works across cores and deﬁes
VM sandboxing—and its application to AES,” in IEEE:
Security & Privacy, San Jose, CA, US, May 2015.
[24] T. Kim, M. Peindo, and G. Mainer-Ruiz, “STEALTH-
MEM: System-level protection against cache-based side
channel attacks in the Cloud,” in USENIX Security,
Bellevue, WA, US, Aug 2012.
[25] V. I. Levenshtein, “Binary codes capable of correcting
deletions, insertions and reversals,” Soviet Physics Dok-
lady, p. 707, Feb 1966.
[26] J. Liedtke, N. Islam, and T. Jaeger, “Preventing denial-
of-service attacks on a μ-kernel for WebOSes,” in 6th
HotOS, Cape Cod, MA, US, May 1997, pp. 73–79.
621
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:03 UTC from IEEE Xplore.  Restrictions apply. 
[27] A. J. Menezes, P. C. van Oorschot, and S. A. Vanstone,
Handbook of Applied Cryptography, C. Press, Ed. CRC
Press, 1997.
[28] D. A. Osvik, A. Shamir, and E. Tromer, “Cache attacks
and countermeasures: the case of AES,” http://www.cs.
tau.ac.il/~tromer/papers/cache.pdf, Nov 2005.
[29] C. Paar and J. Pelzl, Understanding Cryptography: A
Springer-
Textbook for Students and Practitioners.
Verlag New York Inc, 2010.
[30] G. Paoloni, How to Benchmark Code Execution Times
on Intel IA-32 and IA-64 Instruction Set Architectures,
Intel Corporation, Sep 2010.
[31] C. Percival, “Cache missing for fun and proﬁt,” http:
//www.daemonology.net/papers/htt.pdf, 2005.
US, 2008.
[39] VMware Inc., “Security considerations and disallowing
[32] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage,
“Hey, you, get off my cloud: Exploring information
leakage in third-party compute clouds,” in CCS, Chicago,
IL, US, Nov 2009, pp. 199–212.
[33] R. L. Rivest, A. Shamir, and L. Adleman, “A method
for obtaining digital signatures and public-key cryptosys-
tems,” CACM, no. 2, pp. 120–126, Feb 1978.
[34] E. Tromer, D. A. Osvik, and A. Shamir, “Efﬁcient cache
attacks in AES, and countermeasures,” J. Cryptology,
no. 2, pp. 37–71, Jan 2010.
[35] J. van de Pol, N. P. Smart, and Y. Yarom, “Just a little
bit more,” in CT-RSA, 2015.
[36] V. Varadarajan, T. Ristenpart, and M. Swift, “Scheduler-
based defenses against cross-VM side-channels,” in
USENIX Security, San Diego, CA, US, Aug 2014, pp.
687–702.
[37] B. C. Vattikonda, S. Das, and H. Shacham, “Eliminating
ﬁne grained timers in Xen,” in CCSW, Chicago, IL, US,
Oct 2011, pp. 41–46.
[38] Large Page Performance, VMware Inc., Palo Alto, CA,
sharing,”
inter-virtual machine
VMware Knowledge Base 2080735 http://kb.vmware.
com/selfservice/microsites/search.do?language=en_US&
cmd=displayKC&externalId=2080735, Oct 2014.
transparent
page
[40] Z. Wang and R. B. Lee, “New Cache Designs for
Thwarting Software Cache-based Side Channel Attacks,”
in ISCA, San Diego, CA, US, Jun 2007, pp. 494–505.
[41] ——, “A Novel Cache Architecture with Enhanced
Performance and Security,” in MICRO, Como, IT, Nov
2008, pp. 83–93.
[42] Z. Wu, Z. Xu, and H. Wang, “Whispers in the hyper-
space: High-speed covert channel attacks in the cloud,”
in USENIX Security, Bellevue, WA, US, 2012, pp. 159–
173.
[43] Y. Xu, M. Bailey, F. Jahanian, K. Joshi, M. Hiltunen, and
R. Schlichting, “An exploration of L2 cache covert chan-
nels in virtualized environments,” in CCSW, Chicago, IL,
US, Oct 2011, pp. 29–40.
[44] Y. Yarom and N. Benger, “Recovering OpenSSL ECDSA
nonces using the FLUSH+RELOAD cache side-channel
attack,” Cryptology ePrint Archive, Report 2014/140,
Feb 2014, http://eprint.iacr.org/.
[45] Y. Yarom and K. Falkner, “FLUSH+RELOAD: a high
resolution, low noise, L3 cache side-channel attack,” in
USENIX Security, San Diego, CA, US, Aug 2014, pp.
719–732.
[46] Y. Zhang, A. Juels, A. Oprea, and M. K. Reiter,
“Homealone: Co-residency detection in the cloud via
side-channel analysis,” in Symp. Security & Privacy,
Berkeley, CA, US, May 2011, pp. 313–328.
[47] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart,
“Cross-VM side channels and their use to extract private
keys,” in CCS, Raleigh, NC, US, Oct 2012, pp. 305–316.
in PaaS
clouds,” in CCS, Scottsdale, AZ, US, Nov 2014, pp. 990–
1003.
“Cross-tenant
side-channel
[48] ——,
attacks
622
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:03 UTC from IEEE Xplore.  Restrictions apply.