However, compared to previous memory decryption attacks
against SEV [24, 25], our work differs primarily in three as-
pects. First, Morbitzer et al. [24, 25] manipulate unprotected
nested page tables to decouple the mapping between the gVAs
and the memory contents, while our decryption oracle directly
replaces memory blocks used in the I/O buffer. The hardware
mechanisms to defend against these two attacks may differ.
Our attack highlights the necessity of mitigating both threats.
Second, instead of exploiting a network-facing application
executed in the guest VM to accept attacker-controlled data,
our attack could make use of any I/O trafﬁc, which is more
general. Our paper suggests that application-speciﬁc defenses,
such pruning secrets after use [24], may not work. Third, the
attack in Morbitzer et al. requires the attacker to actively
generate network trafﬁc to the guest VM, which makes it eas-
ily detectable. In contrast, our decryption oracle can make
use of existing I/O trafﬁc, which can be very stealthy. More-
over, while the memory integrity issues are expected to be
addressed in the next release of SEV CPUs, the fundamen-
tal I/O security problem studied in this paper will remain.
The encryption oracle will not be mitigated unless the tweak
function is completely secured.
Other studies. Mofrad et al. [23] compare Intel SGX and
AMD SEV, in terms of their functionality, use scenarios, secu-
rity, and performance implications. The study suggests SEV
is more vulnerable than SGX as it lacks memory integrity
and has a bloated trust computing base (TCB). Moreover, the
performance comparison suggests AMD SEV technology per-
forms better than Intel SGX. Wu et al. proposes Fidelius [35],
a system that leverages a sibing-based protection mechanism
to partition an untrusted hypervisor into two components, one
for resource management and the other for security protec-
tion. The security of guest VMs is enhanced by the “trusted”
security protection component, which, while interesting and
effective, unfortunately contradicts with SEV’s original in-
tention of eliminating the hypervisor from the TCB. Fidelius
mentioned a method to protect disk I/O that is similar to our
temporary ﬁx (see Section 5.2) but implies that the disk im-
age is shipped to the SEV platform. Thus it requires using the
same Ktek every time the disk image is used. Our proxy-style
solutions in Section 5.2 is a generalization of their approach.
6.2 Security Threats of Intel TEEs
Intel TME and MKTME. Intel’s counterparts of AMD’s
SME and SEV are Total Memory Encryption (TME) and
Multi-Key Total Memory Encryption (MKTME) [18]. The
concept of TME is almost the same as AMD SME: an AES-
XTS encryption engine sits between a direct data path and ex-
ternal memory buses to encrypt data when leaving the proces-
sor and decrypt it when entering the processor. TME supports
a single ephemeral encryption key for the entire processor.
In contrast, MKTME supports multiple keys; it labels each
page table entry with a KeyID to select one of the ephemeral
AES keys generated in the encryption engine. Different from
AMD SEV, guest VMs in MKTME may have more than one
AES key. KeyID0 is used for guest VM to share pages with
hyperviosr. KeyIDN is assigned to guest the Nth VM by hy-
pervisor for guest’s private page. However, the guest VM is
able to obtain other KeyIDs to share memory with another
guest VMs. As we were not able to purchase a machine with
TME and MKTME on the market at the time of writing, we
leave the analysis of these Intel’s technologies to future work.
Intel SGX. Intel Software Guard eXtension (SGX) is an
instruction set architecture extension that supports isola-
tion of memory regions of userspace processes. Through a
microcode-extended memory management unit, memory ac-
cesses to the protected memory regions, dubbed enclaves,
are mediated so that only instructions belonging to the same
enclave are permitted. Software attacks from all privileged
software layers, including operating systems, hypervisors,
system management software, are prevented by SGX. A hard-
ware Memory Encryption Engine sits between the processor
and the memory to encryption memory trafﬁc on the ﬂy, so
that conﬁdentiality of the enclave memory is guaranteed even
with physical attackers. Remote attestation is supported in
SGX to guard the integrity of the enclave code.
Similar to AMD’s SEV, SGX constructs TEE on Intel pro-
cessors. However, it differs from SEV as it only isolates por-
tions of the user processes’ memory space, whereas SEV
encrypts the memory of the entire virtual machine. Develop-
ers of SEV do not need to rewrite the software when using
AMD’s TEE; but SGX developers have to manually partition
applications into trusted and untrusted components, and re-
compile the source code with the SDKs provided by Intel.
SGX machines have been available on market since late 2015.
So far, two major types of attacks have been demonstrated to
SGX applications.
• Side-channel attacks. Prior studies have demonstrated
that enclave secrets in SGX can be exﬁltrated through
side channels on the CPU caches [8, 15, 16, 27], branch
target buffers [22], DRAM’s row buffer contention [34],
page-table entries [33, 34], and page-fault exception han-
dlers [30, 36]. More recently, side-channel attacks ex-
ploiting speculative and out-of-order execution have been
1270    28th USENIX Security Symposium
USENIX Association
shown on SGX as well [10, 32]. Similar to SGX, SEV
is not designed to thwart side-channel attacks. Therefore,
we expect similar attacks can be carried out on AMD’s
SEV as well. Because the attacks demonstrated in this pa-
per already completely breaks the conﬁdentiality of SEV-
protected VMs, there is no need to rely on side channels to
extract secrets. However, in some of the attacks we demon-
strate, side channels do facilitate the attacks. We leave the
discussion on side-channel surface of SEV to future work.
• Memory hijacking attacks. SGX does not guard memory
safety inside the enclaves. Studies [7, 21] have shown
that attackers could exploit vulnerabilities in enclave pro-
grams and perform return-oriented programming (ROP)
attacks [29]. Randomization-based security defenses have
been proposed to mitigate ROP attacks [28]. However,
as pointed out by Biondo et al. [7], SGX runtimes inher-
ently contains memory regions that are hard to randomize,
and thus completely eliminating the threats of memory
hijacking attacks requires eradicating vulnerabilities from
the enclave code. As neither SGX nor SEV is designed
to provide memory safety, memory hijacking attacks are
feasible on SEV as well. We will not further discuss these
attacks on SEV in this paper.
AMD SEV is also vulnerable to these attacks. In this paper,
we have explored a ﬁne-grained page-fault side channel
to locate the memory buffers used in the I/O operations.
We leave a comprehensive study of SEV side-channel and
memory-hijacking attacks to future work.
7 Conclusion
In this paper, we have reported our study of the insecurity of
SEV from the perspective of the unprotected I/O operations in
SEV-enabled VMs. The results of our study are two fold: First,
I/O operations from SEV guests are not secure; second, I/O
operations can be used by the adversary to construct memory
encryption and decryption oracles. The concrete attacks have
been demonstrated in the paper, along with discussion of
potential solutions to the underlying problems.
Acknowledgments. We would like to thank our shepherd
Dave Tan and also the anonymous reviewers for the helpful
comments. The work was supported in part by the NSF grants
1750809, 1718084, 1834213, and 1834216, and research gifts
from Intel and DFINITY foundation to Yinqian Zhang. Yan
Solihin is supported in part by UCF.
References
[1] AMD.
AMD-V nested paging.
http:
//developer.amd.com/wordpress/media/2012/
10/NPT-WP-1%201-final-TM.pdf, 2008.
[2] AMD. Amd64 architecture programmer’s manual vol-
ume 2: System programming, 2017.
[3] AMD. Secure encrypted virtualization api version 0.17,
2018.
[4] AMD. Solving the cloud trust problem with WinMagic
and AMD EPYC hardware memory encryption. White
paper, 2018.
[5] Amazon AWS. Optimizing latency and bandwidth for
AWS trafﬁc, 2016.
[6] Michael Becher, Maximillian Dornseif, and Christian N.
Klein. FireWire: all your memory are belong to us. In
CanSecWest, 2005.
[7] Andrea Biondo, Mauro Conti, Lucas Davi, Tommaso
Frassetto, and Ahmad-Reza Sadeghi. The guard’s
dilemma: Efﬁcient code-reuse attacks against intel SGX.
In 27th USENIX Security Symposium, pages 1213–1227.
USENIX Association, 2018.
[8] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko,
Kari Kostiainen, Srdjan Capkun, and Ahmad-Reza
Sadeghi. Software grand exposure: SGX cache attacks
are practical. In 11th USENIX Workshop on Offensive
Technologies, 2017.
[9] Robert Buhren, Shay Gueron, Jan Nordholz, Jean-Pierre
Seifert, and Julian Vetter. Fault attacks on encrypted
general purpose compute platforms. In 7th ACM on Con-
ference on Data and Application Security and Privacy.
ACM, 2017.
[10] Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian
Zhang, Zhiqiang Lin, and Ten H. Lai. Sgxpectre attacks:
Stealing intel secrets from sgx enclaves via speculative
execution. In 4th IEEE European Symposium on Secu-
rity and Privacy. IEEE, 2019.
[11] CTS.
Severe security advisory on AMD pro-
https://safefirmware.com/amdflaws_
cessors.
whitepaper.pdf, 2017.
[12] Zhao-Hui Du, Zhiwei Ying, Zhenke Ma, Yufei Mai,
Phoebe Wang, Jesse Liu, and Jesse Fang.
Secure
encrypted virtualization is unsecure. arXiv preprint
arXiv:1712.05090, 2017.
[13] Fujian Chuang YI Jia He Digital Inc. Anjian v1.1.0.
www.anjian.com, 2019.
[14] Blaise Gassend, G. Edward Suh, Dwaine Clarke, Marten
van Dijk, and Srinivas Devadas. Caches and hash trees
for efﬁcient memory integrity veriﬁcation. In 9th Inter-
national Symposium on High-Performance Computer
Architecture, 2003.
USENIX Association
28th USENIX Security Symposium    1271
[15] Johannes Götzfried, Moritz Eckert, Sebastian Schinzel,
and Tilo Müller. Cache attacks on intel sgx. In EU-
ROSEC, 2017.
[16] Marcus Hähnel, Weidong Cui, and Marcus Peinado.
High-resolution side channels for untrusted operating
In USENIX Annual Technical Conference,
systems.
2017.
[17] Felicitas Hetzelt and Robert Buhren. Security analy-
sis of encrypted virtual machines. In ACM SIGPLAN
Notices. ACM, 2017.
[18] Intel. Intel architecture: Memory encryption technolo-
gies speciﬁcation, 2017.
[19] David Kaplan. Protecting VM register state with SEV-
ES. White paper, 2017.
[20] David Kaplan, Jeremy Powell, and Tom Woller. AMD
memory encryption. White paper, 2016.
[21] Jae-Hyuk Lee, Jin Soo Jang, Yeongjin Jang, Nohyun
Kwak, Yeseul Choi, Changho Choi, Taesoo Kim, Mar-
cus Peinado, and Brent ByungHoon Kang. Hacking in
darkness: Return-oriented programming against secure
enclaves. In 26th USENIX Security Symposium, 2017.
[22] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim,
Hyesoon Kim, and Marcus Peinado.
Inferring ﬁne-
grained control ﬂow inside SGX enclaves with branch
shadowing. In 26th USENIX Security Symposium, 2017.
[23] Saeid Mofrad, Fengwei Zhang, Shiyong Lu, and Wei-
dong Shi. A comparison study of intel SGX and AMD
memory encryption technology. In 7th International
Workshop on Hardware and Architectural Support for
Security and Privacy. ACM, 2018.
[24] Mathias Morbitzer, Manuel Huber, and Julian Horsch.
Extracting secrets from encrypted virtual machines. In
9th ACM Conference on Data and Application Security
and Privacy. ACM, 2019.
[25] Mathias Morbitzer, Manuel Huber, Julian Horsch, and
Sascha Wessel. SEVered: Subverting AMD’s virtual
machine encryption. In 11th European Workshop on
Systems Security. ACM, 2018.
[26] Brian Rogers, Siddhartha Chhabra, Milos Prvulovic, and
Yan Solihin. Using address independent seed encryption
and bonsai Merkle trees to make secure processors os-
and performance-friendly. In 40th Annual IEEE/ACM
International Symposium on Microarchitecture, 2007.
[28] Jaebaek Seo, Byoungyoung Lee, Seong Min Kim, Ming-
Wei Shih, Insik Shin, Dongsu Han, and Taesoo Kim.
Sgx-shield: Enabling address space layout randomiza-
tion for SGX programs. In 24th Annual Network and
Distributed System Security Symposium, 2017.
[29] Hovav Shacham. The geometry of innocent ﬂesh on
the bone: Return-into-libc without function calls (on
the x86). In 14th ACM Conference on Computer and
Communications Security. ACM, 2007.
[30] Shweta Shinde, Zheng Leong Chua, Viswesh Narayanan,
and Prateek Saxena. Preventing page faults from telling
your secrets. In 11th ACM on Asia Conference on Com-
puter and Communications Security, 2016.
[31] Dawn Xiaodong Song, David Wagner, and Xuqing Tian.
Timing analysis of keystrokes and timing attacks on ssh.
In USENIX Security Symposium, 2001.
[32] Jo Van Bulck, Marina Minkin, Oﬁr Weisse, Daniel
Genkin, Baris Kasikci, Frank Piessens, Mark Silberstein,
Thomas F. Wenisch, Yuval Yarom, and Raoul Strackx.
Foreshadow: Extracting the keys to the intel SGX king-
In 27th
dom with transient out-of-order execution.
USENIX Security Symposium, 2018.
[33] Jo Van Bulck, Nico Weichbrodt, Rüdiger Kapitza, Frank
Piessens, and Raoul Strackx. Telling your secrets with-
out page faults: Stealthy page table-based attacks on
enclaved execution. In 26th USENIX Security Sympo-
sium. USENIX Association, 2017.
[34] Wenhao Wang, Guoxing Chen, Xiaorui Pan, Yinqian
Zhang, XiaoFeng Wang, Vincent Bindschaedler, Haixu
Tang, and Carl A Gunter. Leaky cauldron on the dark
land: Understanding memory side-channel hazards in
sgx. In ACM SIGSAC Conference on Computer and
Communications Security, 2017.
[35] Yuming Wu, Yutao Liu, Ruifeng Liu, Haibo Chen, Binyu
Zang, and Haibing Guan. Comprehensive VM pro-
tection against untrusted hypervisor through retroﬁtted
AMD memory encryption. In International Symposium
on High Performance Computer Architecture, 2018.
[36] Yuanzhong Xu, Weidong Cui, and Marcus Peinado.
Controlled-channel attacks: Deterministic side channels
for untrusted operating systems. In IEEE Symposium
on Security and Privacy. IEEE, 2015.
[27] Michael Schwarz, Samuel Weiser, Daniel Gruss, Clé-
mentine Maurice, and Stefan Mangard. Malware
Guard Extension: Using SGX to Conceal Cache Attacks.
Springer International Publishing, 2017.
[37] Chenyu Yan, B. Rogers, D. Englender, D. Solihin, and
M. Prvulovic. Improving cost, performance, and security
of memory encryption and authentication. In 33rd Inter-
national Symposium on Computer Architecture, 2006.
1272    28th USENIX Security Symposium
USENIX Association