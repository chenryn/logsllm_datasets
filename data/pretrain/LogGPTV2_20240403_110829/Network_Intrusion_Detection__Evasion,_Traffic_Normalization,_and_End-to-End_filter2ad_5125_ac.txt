ICMP responses sent by the router that drops the packets,
but the NIDS needs to hold state to do so, leading to state-
holding attacks on the NIDS. Also, it is not certain that
the NIDS will always see the ICMP responses, due to rate-
limiting and multi-pathing.
Solution: Clear DF on incoming packets.
Effect on semantics: Breaks “Path MTU Discovery.” If
an incoming packet is too large for an internal link, it will
now be fragmented, which could have an adverse effect on
performance—in the router performing the fragmentation,
in the end host performing reassembly, or due to increased
effective packet loss rates on the network links after frag-
mentation occurs [6]. That said, for many network envi-
ronments, these are unlikely to be serious problems.
Issue: Packets arriving with DF set and a non-zero frag-
mentation offset are illegal. However,
it is not clear
whether the end-system will discard these packets.
Solution: Discard such packets.
Effect on semantics: None, ill-formed packet.
Issue: Some network elements (such as ﬁrewalls) may
drop packets with the ECN bits set, because they are not
yet cognizant of the new interpretation of these header bits.
Solution: Clear the bits for all connections unless the con-
nection previously negotiated use of ECN. Optionally, re-
move attempts to negotiate use of ECN.
Effect on semantics: For connections that have not ne-
gotiated use of ECN, no end-to-end effect. Removing at-
tempted negotiation of ECN will prevent connections from
beneﬁting from avoiding packet drops in some circum-
stances.
Total length. If the total length ﬁeld does not match the
actual total length of the packet as indicated by the link
layer, then some end-systems may treat the packet as being
one length, some may treat it as being the other, and some
may discard the packet.
Solution: Discard packets whose length ﬁeld exceeds their
link-layer length. Trim packets with longer link-layer
lengths down to just those bytes indicated by the length
ﬁeld.
Effect on semantics: None, only ill-formed packets are
dropped.
IP Identiﬁer. See
 5.1.
Must Be Zero. The IP speciﬁcation requires that the bit
between “IP Identiﬁer” and “DF” must be zero.
Issue: If the bit is set, then intermediary or end-systems
processing the packet may or may not discard it.
Solution: Clear the bit to zero.
Effect on semantics: None, since the bit is already re-
quired to be zero.
Note: We might think that we could just as well discard
the packet, since it violates the IP speciﬁcation. The ben-
eﬁt of merely clearing the bit is that if in the future a new
use for the bit is deployed, then clearing the bit will permit
connections to continue, rather than abruptly terminating
them, in keeping with the philosophy that Internet proto-
cols should degrade gradually in the presence of difﬁcul-
ties.
More Fragments (MF) ﬂag , Fragment Offset.
We treat these two ﬁelds together because they are inter-
preted together. An ambiguity arises if the NIDS sees two
fragments that overlap each other and differ in their con-
tents. As noted in [14], different operating systems resolve
the ambiguity differently.
Solution: Reassemble incoming fragments in the normal-
izer rather than forwarding them. If required, re-fragment
the packet for transmission to the internal network if it is
larger than the MTU.
Effect on semantics: Reassembly is a valid operation for
a router to perform, although it is not normally done. Thus
this does not affect end-to-end semantics.
Note: A normalizer that reassembles fragments is vulner-
able to stateholding attacks, and requires an appropriate
triage strategy to discard partially reassembled packets if
the normalizer starts to run out of memory.
Issue: Packets where the length plus the fragmentation off-
set exceeds 65535 are illegal. They may or may not be ac-
cepted by the end host. They may also cause some hosts to
crash.
Solution: Drop the packets.
Effect on semantics: Packet is ill-formed, so no effect.
TTL (Time-to-live). As with DF, an attacker can use
TTL to manipulate which of the packets seen by the NIDS
reaches the end-system, per the discussion for Figure 1.
Solution #1: In principle, a NIDS could measure the num-
ber of hops to every end host, and ignore packets that lack
sufﬁcient TTL. In practice, though, at many sites this re-
quires holding a large amount of state, and it is possible
that the internal routing may change (possibly triggered by
the attacker in some way) leaving a window of time where
the NIDS’s measurement is incorrect.
Solution #2: The NIDS may also be able to see ICMP
time-exceeded-in-transit packets elicited by the attack.
However, ICMP responses are usually rate limited, so the
NIDS may still not be able to tell exactly which packets
were discarded.
Solution #3: Conﬁgure the normalizer with a TTL that
is larger than the longest path across the internal site. If
packets arrive that have a TTL lower than the conﬁgured
minimum, then the normalizer restores the TTL to the min-
imum.
Effect on semantics: First,
if a routing loop passes
through the normalizer, then it may be possible for pack-
ets to loop forever, rapidly consuming the available band-
width. Second, restoring TTL will break traceroute
due to its use of limited-TTL packets to discover forward-
ing hops. Third, restoring TTL on multicast packets may
impair the performance of applications that use expanding
ring searches. The effect will be that all internal hosts in
the group appear to be immediately inside the normalizer
from the point of view of the search algorithm.
Protocol. The protocol ﬁeld indicates the next-layer pro-
tocol, such as TCP or UDP. Blocking trafﬁc based on it is
a ﬁrewall function and not a normalizer function. How-
ever, an administrator may still conﬁgure a normalizer to
discard packets that do not contain well-known protocols,
such as those the NIDS understands.
IP header checksum. Packets with incorrect IP header
checksums might possibly be accepted by end-hosts with
dodgy IP implementations.
Solution: In practice this is not a likely scenario, but the
normalizer can discard these packets anyway, which avoids
the NIDS needing to verify checksums itself.
Effect on semantics: Normally, no effect. However, it
might be possible to use corrupted packets to gather infor-
mation on link errors or to signal to TCP not to back off
because the loss is due to corruption and not congestion.
But since routers will normally discard packets with incor-
rect IP checksums anyway, the issue is likely moot.
Source address. If the source address of an IP packet is
invalid in some way, then the end-host may or may not dis-
card the packet. Examples are 127.0.0.1 (localhost),
0.0.0.0 and 255.255.255.255 (broadcast), multi-
cast (class D) and class E addresses.
Solution: Drop the packet.
Effect on semantics: None, packet is ill-formed.
Note: If the incoming packet has a source address belong-
ing to a known internal network, the normalizer might be
conﬁgured to drop the packet. This is more ﬁrewall-type
functionality than normalization, but will generally be de-
sirable. However it would break applications that rely on
“source routing” packets via an external host and back into
the site, such as using traceroute to trace a route from
an external site back into the tracing site. Also, if an out-
going packet has a source address that does not belong to
a known internal network, the normalizer might be conﬁg-
ured to drop the packet.
Destination address. Like source addresses, invalid des-
tination addresses might cause unexpected behavior at
internal hosts. Examples are local broadcast addresses
(“smurf” attacks), the localhost and broadcast addresses
mentioned above, and class E addresses (which are cur-
rently unused).
Solution: Drop the packet.
In addition, the normalizer
should be capable of dropping incoming packets with des-
tination addresses that would not normally be routed to the
site; these might appear as a result of source-routing, and
it is unclear what effect they might have on internal hosts
or routers.
Effect on semantics: None, destination is illegal.
IP options. IP packets may contain IP options that mod-
ify the behavior of internal hosts, or cause packets to be
interpreted differently.
Solution: Remove IP options from incoming packets.
Effect on semantics: For end-to-end connections, pre-
sumably none, as IP options should not have effects vis-
ible at higher layers; except the absence of an option may
impair end-to-end connectivity, for example because the
connectivity requires source routing. For diagnostics tools,
potentially serious.
That said, the reality today is that options generally suf-
fer from poor performance because routers defer their pro-
cessing to the “slow path,” and many sites disable their use
to counter certain security risks. So in practice, removing
IP options should have little ill effect, other than the loss of
source routing for diagnosing connectivity problems. This
last can be addressed (as can all semantic tradeoffs associ-
ated with normalization) through site-speciﬁc policies con-
trolling the normalizer’s operation.
Padding. The padding ﬁeld at the end of a list of IP op-
tions is explicitly ignored by the receiver, so it is difﬁcult
to see that it can be manipulated in any useful way. While
it does provide a possible covert channel, so do many other
header ﬁelds, and thwarting these is not a normalizer task.
Solution: Zero the padding bytes, on the principle that we
perform normalizations even when we do not know of a
corresponding attack.
Effect on semantics: None, ﬁeld is explicitly ignored.
5.1 The IP Identiﬁer and Stealth Port Scans
The IP identiﬁer (ID) of outgoing packets may give away
information about services running on internal hosts.
This issue is not strictly a normalizer problem, but the
normalizer is in a location well suited to deal with the
issue.
One particular problem is the exceedingly devious
stealth port-scanning technique described in [16, 18],
which enables an attacker to probe the services running
on a remote host without giving away the IP address of
the host being used to conduct the scan. Figure 4 il-
lustrates the technique, which we review here to develop
how a normalizer can thwart it. Host
is the victim, and 
is the patsy. The patsy must run an
operating system that increments the IP ID by one2 for
every packet sent, no matter to what destination—many
common operating systems use such a “global” IP ID.
is the attacker,
continually exchanges packets with host 
, ei-
ther through a TCP transfer or simply by pinging it.
Host 
While doing this, the IP IDs of the responses from 
to  normally increment by one from one packet to the
2More generally, advances the ID ﬁeld in a predictable fashion.
.
they
wish to probe, and they fake the source address of the
fakes a TCP SYN to the port on 
next. Now 
packet as being from
If there is no service listening on the port, 
RST to 
the stream of packets from
A
has no associated connection state, 
ignores the RST, and there is no effect on the IP IDs of
. As 
sends a
to
V
ictim
ttacker
P
atsy
+1
Echo request
.
reply, ID=3
Echo request
reply, ID=4
Echo request
reply, ID=5
+1
+1
TCP SYN, src=P, dst port=24
+1
no listener
Echo request
reply, ID=6
+1
Echo request
reply, ID=7
TCP RST
TCP SYN, src=P, dst port=25
no listener
on port 24,
RST generated
listener
exists on port 25,
SYN−ACK generated.
+2
listener
exists!
+1
Echo request
reply, ID=9
Echo request
reply, ID=10
TCP SYN−ACK
TCP RST, ID=8
P has no state for this
connection, so generates
a RST, which increments
the IP ID sequence
Figure 4: Stealth Port Scan
to complete the connection,
. In so doing, the global
increases by one; consequently, in the
, the attacker observes a
step of two (rather than one) in the ID sequence, since
, namely the RST
However, if there is a service listening on the port, 
sends a SYN-ACK to 
rather than a RST.
 has no state for this connection, and
promptly sends a RST back to
ID sequence on
stream of packets from 
to 
it missed one of the packets sent by 
from
Thus
never sees a packet with a source of 
chooses a
different patsy for every port it wishes to check, then this
port scan is very hard to detect.
port-scan, whereas in fact it is completely innocent.
appears to be the host conducting the
to 
and not
. If 
.
The solution for patsies is for the normalizer to scram-
ble (in a cryptographically secure, but reversible fash-
ion) the IP IDs of incoming and outgoing packets. This
prevents internal hosts from being used as patsies for
such scans. The effect on semantics is that any diagnos-
tic protocol that reports the IP IDs of incoming packets
back to the sender may break. ICMP messages can still
function if the normalizer applies the unscrambling to
the embedded ID ﬁelds they carry.





The solution for victims is to use the “reliable RST”
technique (see  6.1 below). The normalizer transmits a
“keep-alive” acknowledgment (ACK) packet behind ev-
ery RST packet it forwards out of the site. When the
ACK arrives at the patsy, the patsy will reply with a RST,
just as it does in the SYN-ACK case. Consequently, the
IP ID sequence as seen by the attacker will jump by two
in both cases, whether the victim is running the given
service or not.
Sending keep-alives for reliable RSTs generates extra
trafﬁc, but has no effect on end-to-end semantics, since
the keep-alive ACK following the RST is guaranteed to
be either rejected by the victim (if it ﬁrst received the
RST) or ignored (if the RST was lost and the connection
remains open).
6 Examples of TCP Normalizations
We applied the same “walk the header” methodology as
in the previous section to TCP, UDP, and ICMP. How-
ever, due to space limitations we defer the detailed anal-
ysis to [4], and in this section focus on three examples
for TCP that illuminate different normalization issues:
reliable RSTs, cold start for TCP, and an example of a
TCP ambiguity that a normalizer cannot remove.
6.1 Reliable RSTs
With TCP, the control signals for connection establish-
ment and completion (SYN and FIN, respectively) are
delivered reliably, but the “abrupt termination” (RST)
signal is not. This leads to a signiﬁcant problem:
in
general, both a normalizer and a NIDS needs to tear
down state for an existing connection once that connec-
tion completes, in order to recover the associated mem-
ory. But it is not safe to do so upon seeing a RST, be-
cause the RST packet might be lost prior to arriving at
the receiver, or might be rejected by the receiver.
Thus, a monitor cannot tell whether a given RST does
in fact terminate its corresponding connection.
If the
monitor errs and assumes it does when in fact it did not,
then an attacker can later continue sending trafﬁc on the
connection, and the monitor will lack the necessary state
(namely, that the connection is still established, and with
what sequence numbers, windows, etc.) to correctly in-
terpret that trafﬁc. On the other hand, if the monitor as-
sumes the RST does not terminate the connection, then it
is left holding the corresponding state potentially indef-
initely. (Unfortunately, RST-termination is not uncom-
mon in practice, so even for benign trafﬁc, this state will
grow signiﬁcantly over time.)
The RST might fail to arrive at the receiver because of
normal loss processes such as buffer overﬂows at con-
gested routers, or because of manipulation by an at-
tacker, such as the TTL games discussed in the context
of Figure 1. In addition, the rules applied by receivers to
determine whether a particular RST is valid vary across
different operating systems, which the NIDS likely can-