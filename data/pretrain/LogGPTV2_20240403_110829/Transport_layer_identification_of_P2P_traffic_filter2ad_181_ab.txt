limited number of packets, since our monitors were used to
capture 44 bytes for each packet (e.g., TCP options will push
payload bytes out of the captured segment. Limitations for
our older traces are described in detail in section 7).
HTTP requests: Several P2P protocols use HTTP re-
quests and responses to transfer ﬁles, and it can be impos-
sible to distinguish such P2P traﬃc from typical web traﬃc
given only 16 bytes of payload, e.g., “HTTP/1.1 206 Partial
Content” could represent either HTTP or P2P .
Encryption : An increasing number of P2P protocols rely
on encryption and SSL to transmit packets and ﬁles. Pay-
load string matching misses all P2P encrypted packets.
Other P2P protocols: The widespread use of ﬁle-sharing
and P2P applications yields a broad variety of P2P proto-
cols. Thus our analysis of the top nine P2P protocols cannot
guarantee identiﬁcation of all P2P ﬂows, especially given the
diversity of the OC48 backbone link. However, our experi-
ence with P2P applications and traﬃc analysis convinces
us that these nine protocols represent the vast majority of
current P2P traﬃc.
Unidirectional traces: Some of our traces reﬂect only
one direction of the monitored link. In these cases we cannot
identify ﬂows that carry the TCP acknowledgment stream
of a P2P download, since there is no payload. Even if we
monitored both directions of the link, asymmetric routing
renders it unlikely to ﬁnd both streams (data and acknowl-
edgment) of a TCP ﬂow on the same link.
We can overcome these limitations with our nonpayload
methodology described in section 5.
4.2 Methodology
Our analysis is based on identifying speciﬁc bit strings
in the application-level user data. Since documentation for
1Privacy issues and agreement with the ISP prohibit the
examination of more bytes of user payload.
Table 2: Strings at the beginning of the payload of P2P
protocols. The character “0x” below implies Hex strings.
P2P Protocol
eDonkey2000
Fasttrack
BitTorrent
Gnutella
String
0xe319010000
0xc53f010000
“Get /.hash”
0x270000002980
“0x13Bit”
“GNUT”, “GIV”
“GND”
MP2P
GO!!, MD5, SIZ0x20
Direct Connect
“$MyN”,”$Dir”
Ares
“$SR”
“GET hash:”
“Get sha1:”
Trans. prot. Def. ports
4661-4665
TCP/UDP
TCP
UDP
TCP
TCP
UDP
TCP
TCP
UDP
TCP
1214
6881-6889
6346-6347
41170 UDP
411-412
-
P2P protocols is generally poor, we empirically derived a set
of distinctive bit strings for each case by monitoring both
TCP and UDP traﬃc using tcpdump[31] after installing var-
ious P2P clients. Table 2 lists a subset of these strings for
some of the analyzed protocols for TCP and UDP. Table 2
also presents the well-known ports for these P2P protocols.
The complete list of bit strings we used is in [18].
We classify packets into ﬂows, deﬁned by the 5-tuple source
IP, destination IP, protocol, source port and destination
port. We use the commonly accepted 64-second ﬂow time-
out [6], i.e., if no packet arrives in a speciﬁc ﬂow for 64 sec-
onds, the ﬂow expires. To address the limitations described
in the previous section, we apply three diﬀerent methods to
estimate P2P traﬃc, listed by increasing levels of aggres-
siveness as to which ﬂows it classiﬁes as P2P :
M1:
If a source or destination port number of a ﬂow
matches one of the well-known port numbers (Table 2) the
ﬂow is ﬂagged as P2P.
M2: We compare the payload (if any) of each packet in a
ﬂow against our table of strings. In case of a match between
the 16-byte payload of a packet and one of our bit strings,
we ﬂag the ﬂow as P2P with the corresponding protocol,
e.g., Fasttrack, eDonkey, etc. If none of the packets match,
we classify the ﬂow as non-P2P.
M3: If a ﬂow is ﬂagged as P2P, both source and destina-
tion IP addresses of this ﬂow are hashed into a table. All
ﬂows that contain an IP address in this table are ﬂagged
as “possible P2P” even if there is no payload match. To
avoid recursive misclassiﬁcation of non-P2P ﬂows as P2P,
we perform this type of IP tracking only for host IPs that
M2 identiﬁed as P2P .
In all P2P networks, P2P clients maintain a large number
of connections open even if there are no active ﬁle transfers.
There is thus increased probability that a host identiﬁed as
P2P from M2 will participate in other P2P ﬂows. These
ﬂows will be ﬂagged as “possible P2P” in M3. On the other
hand, a P2P user may be browsing the web or sending email
while connected to a P2P network. Thus, to minimize false
positives we exclude from M3 all ﬂows whose source or des-
tination port implies web, mail, FTP, SSL, DNS (i.e., ports
80, 8000, 8080, 25, 110, 21, 22, 443, 53) for TCP and online
gaming and DNS (e.g., 27015-27050, 53) for UDP 2.
In general, we believe that M3 will provide an estimate
closer to the real intensity of P2P traﬃc, especially with lim-
2Since nothing prevents P2P clients from using these ports
also, excluding speciﬁc protocols by looking at port numbers
may result in underestimating P2P ﬂows.
ited 4-byte payload traces, while M2 provides a loose lower
bound on P2P volume. M3 takes advantage of our ability to
identify IPs participating in P2P ﬂows as determined by M2,
facilitating identiﬁcation of ﬂows for which payload analysis
fails. M3 is used only in section 7, where we examine the
evolution of the volume of P2P traﬃc. In that section, we
use M3 to overcome the problem of the limited 4-byte payload
in our older traces. For all other analysis, payload P2P esti-
mates are strictly based on payload string matching, namely
M2.
Recently, Sen et al. developed a similar signature-based
payload methodology [28]. The authors concentrate on TCP
signatures that characterize ﬁle downloads in ﬁve P2P proto-
cols and identify P2P traﬃc based on the examination of all
user payload bytes. [28] describes a subset of the signatures
included in our methodology, since we also use UDP-based
as well as protocol signaling signatures for a larger number
of P2P protocols/networks (e.g., the WinMx/OpenNap net-
work is not analyzed in [28], although it corresponds to a
signiﬁcant portion of P2P traﬃc [17]). On the other hand,
[28] presents the advantage of examining all user payload
bytes. While examining all bytes of the payload should in-
crease the amount of identiﬁed P2P traﬃc, we expect only
a minimum diﬀerence in the number of identiﬁed P2P ﬂows
between [28] and the methodology described in this section.
First, characteristic signatures or bit strings of P2P packets
appear at the beginning of user payload; thus, 16 bytes of
payload should be suﬃcient to capture the majority of P2P
ﬂows. Second, we expect that missed ﬂows due to the pay-
load limitation will be identiﬁed by our M3 method and/or
by TCP and UDP control traﬃc originating from the speciﬁc
IPs.
5. NONPAYLOAD IDENTIFICATION OF P2P
TRAFFIC
We now describe our nonpayload methodology for P2P
traﬃc proﬁling (PTP). Our method only examines the packet
header to detect P2P ﬂows, and does not in any way exam-
ine user payload. To our knowledge, this is a ﬁrst attempt to
identity P2P ﬂows on arbitrary ports without any inspection
of user payload.
Our heuristics are based on observing connection patterns
of source and destination IPs. While some of these patterns
are not unique to P2P hosts, examining the ﬂow history of
IPs can help eliminate false positives and reveal distinctive
features.
We employ two main heuristics that examine the behavior
of two diﬀerent types of pairs of ﬂow keys. The ﬁrst exam-
ines source-destination IP pairs that use both TCP and UDP
to transfer data (TCP/UDP heuristic, section 5.1). The sec-
ond is based on how P2P peers connect to each other by
studying connection characteristics of {IP, port} pairs (sec-
tion 5.2). A high level description of our algorithm is as
follows:
• Data processing: We build the ﬂow table as we observe
packets cross the link, based on 5-tuples, similar to the
payload method. At the same time we collect infor-
mation on various characteristics of {IP, port} pairs,
including the sets of distinct IPs and ports that an
{IP, port} pair is connected to, packet sizes used and
transferred ﬂow sizes.
Table 3: Excluded ports for TCP/UDP IP pairs heuristic.
Ports
135,137,139,445
53
123
500
554,7070,1755,6970,5000,5001
7000, 7514, 6667
6112, 6868, 6899
Application
NETBIOS
DNS
NTP
ISAKMP
streaming
IRC
gaming
3531
p2pnetworking.exe
• Identiﬁcation of potential P2P pairs: We ﬂag potential
ﬂows as P2P based on TCP/UDP usage and the {IP,
port} connection characteristics.
• False positives: We eliminate false positives by com-
paring ﬂagged P2P ﬂows against our set of heuristics
that identify mail servers, DNS ﬂows, malware, etc.
5.1 TCP/UDP IP pairs
Our ﬁrst heuristic identiﬁes source-destination IP pairs
that use both TCP and UDP transport protocols. Six out
of nine analyzed P2P protocols use both TCP and UDP as
layer-4 transport protocols. These protocols include eDon-
key, Fasttrack, WinMx, Gnutella, MP2P and Direct Con-
nect. Generally, control traﬃc, queries and query-replies
use UDP, and actual data transfers use TCP. To identify
P2P hosts we can thus look for pairs of source-destination
hosts that use both transport protocols (TCP and UDP).
While concurrent usage of both TCP and UDP is deﬁ-
nitely typical for the aforementioned P2P protocols, it is also
used for other application layer protocols such as DNS or
streaming media. To determine non-P2P applications in our
traces that use both transport protocols, we examined all
source-destination host pairs for which both TCP and UDP
ﬂows exist. We found that besides P2P protocols, only a few
applications use both TCP and UDP transport protocols:
DNS, NETBIOS, IRC, gaming and streaming, which collec-
tively typically use a small set of port numbers such as 135,
137, 139, 445, 53, 3531, etc. Table 3 lists all such applica-
tions found, together with their well-known ports. Port 445
is related to the Microsoft NETBIOS service. Port 3531 is
used by an application called p2pnetworking.exe which is au-
tomatically installed by Kazaa. Although p2pnetworking.exe
is related to P2P traﬃc, we choose to exclude it from our
analysis since it is not under user control3 and speciﬁc only
to the Kazaa client. Excluding ﬂows using ports presented in
Table 3, 98.5% of the remaining IP source-destination pairs
that use both TCP and UDP in our traces are P2P, based
on the payload analysis with M2 described in Section 4. In
summary, if a source-destination IP pair concurrently uses
both TCP and UDP as transport protocols, we consider ﬂows
between this pair P2P so long as the source or destination
ports are not in the set in Table 3.
5.2 {IP, port} pairs
patterns of {IP, port} pairs.
Our second heuristic is based on monitoring connection
Since the lawsuit against Napster, the prevalence of cen-
tralized P2P networks has decreased dramatically, and dis-
tributed or hybrid P2P networks have emerged. To connect
to these distributed networks, each P2P client maintains a
3The user cannot change the port number or control its
functionality, and all ﬂows of p2p.networking.exe use port
3531.
Figure 1: Initial connection from a new P2P host A to the P2P network. Host A connects to a superpeer picked from its
host cache. Peer A informs the superpeer of its IP address and the port willing to accept connections from other peers. The
superpeer propagates the {IP, port} pair to the rest of the P2P network. Peers willing to connect to host A, use the advertised
{IP, port} pair. For the {IP, port} pair {A,1}, the number of distinct IPs (C,B) connected to it is equal to the number of
distinct ports (10,15) used to connect to it. Our {IP, port} pair heuristic is based on such equality between the number of
distinct ports and the number of distinct IPs aﬃliated with a pair in order to identify potential P2P pairs.
starting host cache. Depending on the network, the host
cache may contain the IP addresses of other peers, servers
or supernodes/superpeers.4 This pool of hosts facilitates
the initial connection of the new peer to the existing P2P
network.
As soon as a connection exists to one of the IPs in the host
cache (we will henceforth refer to these IPs as superpeers),
the new host A informs that superpeer of its IP address and
port number at which it will accept connections from peers.
Host A also provides other information speciﬁc to each P2P
protocol but not relevant here. While in ﬁrst-generation
P2P networks the listening port was well-deﬁned and spe-
ciﬁc to each network, simplifying P2P traﬃc classiﬁcation,
newer versions of all P2P clients allow the user to conﬁg-
ure a random port number (some clients even advise users
to change the port number to disguise their traﬃc). The
superpeer must propagate this information, mainly the {IP,
port} pair of the new host A, to the rest of the network. This
{IP, port} pair is essentially the new host’s ID, which other
peers need to use to connect to it. In summary, when a P2P
host initiates either a TCP or a UDP connection to peer A,
the destination port will also be the advertised listening port
of host A, and the source port will be an ephemeral random