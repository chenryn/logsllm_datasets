# Spring Cloud Function SPEL表达式注入漏洞
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 漏洞描述
Spring框架为现代基于java的企业应用程序(在任何类型的部署平台上)提供了一个全面的编程和配置模型。
Spring Cloud 中的 serveless框架 Spring Cloud Function 中的 RoutingFunction 类的 apply
方法将请求头中的“spring.cloud.function.routing-expression”参数作为 Spel
表达式进行处理，造成Spel表达式注入，攻击者可通过该漏洞执行任意代码。
## 利用条件
3.0.0.RELEASE 
    4.0.0
    org.springframework.boot
    spring-boot-starter-parent
    2.6.5
    com.example
    demo
    0.0.1-SNAPSHOT
    demo
    Demo project for Spring Boot
    17
    2021.0.1
    org.springframework.cloud
    spring-cloud-function-context
    org.springframework.cloud
    spring-cloud-starter
    org.springframework.cloud
    spring-cloud-starter-task
    org.springframework.boot
    spring-boot-starter-test
    test
    org.springframework.cloud
    spring-cloud-starter-function-webflux
    org.springframework.cloud
    spring-cloud-function-dependencies
    3.2.2
    pom
    org.springframework.cloud
    spring-cloud-function-web
    3.2.2
    org.springframework.cloud
    spring-cloud-dependencies
    ${spring-cloud.version}
    pom
    import
    org.springframework.boot
    spring-boot-maven-plugin
最后访问 http://127.0.0.1:8080. 出现以下页面表示成功。
## 漏洞复现
### **漏洞原理**
apply方法会将http头部中的Spel表达式进行解析，从而造成Spel表达式注入。
查看官方diff(https://github.com/spring-cloud/spring-cloud-function/commit/0e89ee27b2e76138c16bcba6f4bca906c4f3744f)
进入springframework/cloud/function/context/config/RoutingFunction文件。进入调试模式、将断点添加到apply()方法。
进入到apply()方法后、会调用route() 在该方法中会去判读input是否为 message的实例，function 是否为空、然后进入else
if 去获取头信息、获取key值 spring.cloud.function.routing-expression
、在中间会对有无空格做判断。然后继续向下走。
会进入到springframework/cloud/function/context/config/RoutingFunction/functionFromExpression()方法。
routingExpression 会做为参数传入到
springframework/expression/common/TemplateAwareExpressionParser/parseExpression()方法中。
判读其context是否为none值 在进入
springframework/expression/spel/standard/SpelExpressionParser/doPareExpression()
会new 一个 InternalSpelExpressionParser 类调用 doPareExpression() 继续跟进。
在springframeworl/expression/spel/stand/InternalSpelExpressionParser/doParseExpression()方法中、会在tokenizer.process()中
对token进行 源码与字节码的判断操作、继续向下。
会new 一个SpelExpression() 跟进到
springframwork/expression/spel/standard/SpelExpression/SpelExpression()。
在SpelExpression()方法中会将将表达式赋值到 this.expression 继续跟进 return到
springframework/expression/spel/standard/SpelpressionParser/doParseExpression()、继续return到springframework/expression/common/TemplateAwareExpressionPareser/pareExpression()、return
springframework/cloud/function/context/config/RoutingFunction/functionFromExpression()
在functionFromExpression()方法中会进入MessageUtils.toCaseInsensitiveHeadersStructure()。
调用MessageStructureWithCaseInsensitiveHeaderKeys()，进入到putAll()方法 获取message中头信息。
最后会进入漏洞触发点。
### **漏洞测试**
Payload 的构造可以参考官方测试用例。
本次利用创建文件测试。使用payload touch /tmp/xxxxxx.test.test。
## 修复建议
官方已经发布漏洞补丁。(https://github.com/spring-cloud/spring-cloud-function/commit/0e89ee27b2e76138c16bcba6f4bca906c4f3744f)
目前还暂未更新版本。