for a = 1 to nq do
Vi ← 0
C = (C1, . . . , Cn) ← challenge(κ)
for j = 1 to n do
if j ∈ At then
Rj ← A(“respond”, Cj , ˆF (j)
else Rj ← respond(j, Cj, ˆF (j)
)
if verify(κ, j, {Ci, Ri}n
for j = 1 to n do
)
t
t
i=1) = 1 then
/* output ﬁle F */
/* compute ﬁle shares */
/* set of corrupted servers */
/* number of correct replies for Si */
/* generate nq challenges */
/* challenge all servers */
/* A responds for
corrupted servers */
/* verify all responses */
Vj ← Vj + 1
Scorr ← Φ
for j = 1 to n do
/* Sj replied correctly */
/* servers with small fraction of incorrect replies */
/* compute fraction of correct replies */
if
Vj
nq
≥ 1 − q then
Scorr ← Scorr ∪ {j}
i=1 ← { ˆF (i)
t+1}n
t+1}n
i=1 ← redistribute(κ, t, { ˆF (i)
if Scorr = {1, 2, . . . , n} then
t }n
{F (i)
else {F (i)
i=1
/* Sj ’s incorrect replies below q */
/* shares remain the same */
t }n
i=1)
if decode(κ, T, { ˆF (i)
else output 1
T }n
i=1) = F output 0 /* F can be recovered */
/* F is corrupted */
Figure 2: HAIL security experiment.
construct a stronger security model for HAIL in which the ﬁle could
be extracted through the challenge-response protocol if decoding
fails. However, the stronger model would only beneﬁt in extracting
of ﬁle fragments for those b servers corrupted by an adversary in
an epoch (the other n − b servers have a correct code base). We do
not investigate this model further in the paper.
5. BUILDING BLOCKS
We introduce the main technical building blocks of HAIL. Proofs
for all claims can be found in the full version of the paper [5].
5.1 UHFs and Reed-Solomon codes
Let I denote a ﬁeld with operations (+,×). For example, in our
prototype implementation, we work with GF [2128].
A UHF [9] is an algebraic function h : K × I (cid:3) → I that com-
presses a message m ∈ I (cid:3) into a compact digest based on a key
κ ∈ K such that the hash of two different messages is different
with overwhelming probability over keys. A related notion is that
of almost exclusive-or universal (AXU) hash functions. Formally:
DEFINITION 1. h is an -universal hash function family if for
h is an -AXU family if for any x (cid:8)= y ∈ I (cid:3), and for any z ∈ I:
any x (cid:8)= y ∈ I (cid:3): P rκ←K[hκ(x) = hκ(y)] ≤ .
P rκ←K[hκ(x) ⊕ hκ(y) = z] ≤ .
Many common UHFs are also linear, meaning that for any mes-
sage pair (m1, m2), it is the case that hκ(m1)+hκ(m2) = hκ(m1+
m2). In fact, it is possible to construct a UHF based on a linear
error-correcting code (ECC). An (n, (cid:4), d) ECC encodes messages
of length (cid:4) into codewords of size n such that the minimum distance
between any two codewords is d. An (n, (cid:4), d) code can correct up
to d − 1 errors and (cid:11) d−1
For example, a UHF may be based on a (n, (cid:4), n − (cid:4) + 1)-Reed-
Solomon code over I. Let (cid:7)m = (m1, m2, . . . , m(cid:3)), where mi ∈ I.
(cid:7)m may be viewed in terms of a polynomial representation of the
form p (cid:5)m(x) = m(cid:3)x(cid:3)−1 +m(cid:3)−1x(cid:3)−2 +. . .+m1. A Reed-Solomon
code, then, may be deﬁned in terms of a vector (cid:7)a = (a1, . . . , an).
The codeword of a message (cid:7)m is the evaluation of polynomial p (cid:5)m
at points (a1, . . . , an): (p (cid:5)m(a1), p (cid:5)m(a2), . . . , p (cid:5)m(an)).
(cid:12) erasures.
2
A UHF of interest, then, is simply hκ(m) = p (cid:5)m(κ) with key
space K = I.
It is well known that this construction, denoted
RS-UHF (and typically referred as the polynomial evaluation UHF),
is indeed a good UHF [34]:
FACT 1. RS-UHF is a (cid:3)−1
2α -AXU family).
a (cid:3)−1
5.2 MACs obtained from UHFs
2α -universal hash family (and, as such,
A UHF, however, is not a cryptographically secure primitive.
That is, it is not generally collision-resistant against an adversary
that can choose messages after selection of κ. Thus a UHF is not in
general a message-authentication code (MAC). A MAC is formally
deﬁned as:
DEFINITION 2. A Message Authentication Code MA = (MGen,
MTag, MVer) is given by algorithms: κ ← MGen(1λ) generates
a secret key given a security parameter; τ ← MTagκ
(m) com-
putes a tag on message m with key κ; MVerκ(m, τ ) outputs 1 if
τ is a valid tag on m, and 0 otherwise. For adversary A, we deﬁne:
Advuf-mac
MVerκ(m, τ ) = 1 ∧ m not tagged before].
(A) = Pr[κ ← MGen(1λ); (m, τ ) ← AMTagκ(·),MVerκ(·,·) :
We denote by Advuf-mac
(q1, q2, t) the maximum advantage of all
adversaries making q1 queries to MTag, q2 queries to MVer and
running in time at most t.
MA
MA
It is well known that a MAC may be constructed as the straightfor-
ward composition of a UHF with a pseudorandom function (PRF)
[35, 24, 30, 34]. A PRF is a keyed family of functions g : KPRF ×
D → R that is, intuitively, indistinguishable from a random family
of functions from D to R.
We deﬁne the prf-advantage of an adversary A for family g as
g (A) = | Pr[κ ← KPRF : Agκ(·) = 1] − Pr[f ← F D→R :
Advprf
Af (·) = 1]|, where FD→R
is the set of all functions from D to
g (q, t) the maximum prf-advantage of an
R. We denote by Advprf
adversary making q queries to its oracle and running in time t.
Given a UHF family h : KUHF × I (cid:3) → I and a PRF family g :
KPRF × L → I, we construct the MAC UMAC = (UGen, UTag,
(cid:2)) uniformly at ran-
UVer) such as: UGen(1λ) generates key (κ, κ
dom from KUHF × KPRF; UTag : KUHF × KPRF × I (cid:3) → L × I is
deﬁned as UTagκ,κ(cid:2) (m) = (r, hκ(m) + gκ(cid:2) (r)); UVer : KUHF ×
KPRF × I (cid:3) × L × I is deﬁned as UVerκ,κ(cid:2) (m, (c1, c2)) = 1 if and
only if hκ(m) + gκ(cid:2) (c1) = c2. The tagging algorithm of UMAC
outputs, in addition to the composition of UHF and PRF, a unique
counter r ∈ L incremented at each invocation. Thus, the UMAC is
stateful and its properties are as follows [34].
FACT 2. Assume that h is an UHF-AXU family of hash func-
tions and g is a PRF family. Then UMAC is a stateful MAC with
advantage: Advuf-mac
(q1, q2, t) ≤ Advprf
g (q1 + q2, t) + UHFq2.
UMAC
Remark. For the composition of a UHF and PRF to be a MAC, it
is important that the nonces used as input into the PRF be unique.
In our HAIL implementation, when computing the MAC for a ﬁle
block, we use as input to the PRF a hash of the ﬁle name and the
block offset in the ﬁle instead of a counter.
5.3 Aggregating MACs
In our HAIL protocol, we aggregate MACs on a set of ﬁle blocks
for bandwidth efﬁciency. We deﬁne here generic composite MAC
algorithms that apply to any MAC outputing tags in a ﬁeld.
Let MTag : K × J → N be the tagging algorithm of a MAC
MA = (MGen, MTag, MVer) deﬁned on messages from ﬁeld J
that outputs tags in a ﬁeld N. Let (cid:7)M = (m1, . . . , mv) ∈ J v be a
192vector of messages and let (cid:7)A = (α1, . . . , αv) ∈ J v be a vector of
scalar values with αi (cid:8)= 0. We deﬁne τ =
v
(mi)
i=1 αiMTagκ
as the composite MAC of (cid:7)M for coefﬁcients α1, . . . , αv.
If τ
is as above, we deﬁne the composite MAC veriﬁcation algorithm
CMVerκ({mi, αi}v
i=1, τ ) to output 1.
(cid:2)
Consider an adversary that has access to MTag and CMVer or-
acles. Intuitively, a composite MAC has the property that the ad-
versary can generate a vector of messages and a composite MAC
with small probability if it does not query the MTag oracle for all
component messages of the vector.
We give a formal deﬁnition of composite MACs below, the ﬁrst
in the literature to the best of our knowledge.
MA
DEFINITION 3. Let MA = (MGen, MTag, MVer) be a MAC
algorithm and CMVer the composite MAC veriﬁcation algorithm
deﬁned above. For adversary A, we deﬁne:
Advc-mac
: CMVerκ({mi, αi}v
AMTagκ(·),CMVerκ(·,·)
[1, v] for which mi was not queried to MTagκ
i=1, τ ) = 1 ∧ ∃i ∈
(q1, q2, t) the maximum success proba-
bility of all adversaries making q1 queries to MTag, q2 queries to
CMVer and running in time t.
(A) = Pr[κ ← MGen(1λ); ({mi, αi}v
i=1, τ ) ←
(·)].
We denote by Advc-mac
MA
LEMMA 1. Given a MAC MA on ﬁeld J, MA extended to J v
(q1 + vq2 + v − 1, 0, (v + 1)t).
as above is a composite MAC with advantage:
Advc-mac
(q1, q2, t) ≤ vAdvuf-mac
MA
MA
v
We deﬁne a linear composite MAC to be such that a composite
MAC can be veriﬁed from a linear combination of messages: (cid:7)m =
(cid:2)
i=1 αimi (without access to individual messages {mi}v
DEFINITION 4. A composite MAC algorithm is linear if there
exists an algorithm CMVer-Lin such that CMVerκ({mi, αi}v
i=1, τ )
= 1 if and only if CMVer-Linκ(
i=1 αimi, τ ) = 1.
i=1).
(cid:2)
v
LEMMA 2. If the nonces input to the PRF in the UMAC con-
struction are known, the composite MAC deﬁned from UMAC is
linear.
5.4 An integrity-protected error-correcting
code (IP-ECC)
Typically, a MAC is appended to a message. Our goal in this sec-
tion is to deﬁne a cryptographic primitive that acts both as a MAC
and an error-correcting (or erasure) code. Moreover, we leverage
the redundancy added by the error-correcting code for construct-
ing the MAC. Such a primitive allows efﬁcient checking of server
response in our HAIL protocol.
DEFINITION 5. For n ≥ (cid:4), we deﬁne an (n, (cid:4), d)-integrity-
protected error-correcting code (denoted IP-ECC) as a tuple of al-
gorithms IC = (KGenECC, MTagECC, MVerECC) such that:
- KGenECC(1λ) selects a random key κ from key space K;
- MTagECC : K×I (cid:3) → I n on input key κ and message m ∈ I (cid:3)
outputs an integrity-protected codeword c ∈ I n that acts as an
encoding of m, and contains an integrity tag for m. The minimum
(Hamming) distance between two codewords is d.
- MVerECC : K × I n → ({I (cid:3)∪ ⊥},{0, 1}) on input a key
κ and an integrity-protected codeword c ∈ I n outputs a message
m ∈ I (cid:3) (or ⊥ upon decoding failure), as well as a one-bit with
value 1 if c contains a valid integrity tag on m, and 0 otherwise.
For an adversary A, we deﬁne: Advuf-ecc
(A) = Pr[κ ←
KGenECC(1λ); c ← AMTagECCκ(·),MVerECCκ(·) : MVerECCκ(c) =
(m, 1) ∧ m not queried to MTagECCκ
(·)].
IC
We denote by Advuf-ecc
IC
(q1, q2, t) the maximum advantage of all
adversaries making q1 queries to MTagECC, q2 queries to MVerECC
and running in time at most t.
- KGenECC(1λ) selects keys (cid:7)κ = {{κi}n
Similarly, integrity-protected erasure codes can be deﬁned.
We give now a construction of an IP-ECC code ECCd based on
a (n, (cid:4), n − (cid:4) + 1) Reed-Solomon (R-S) code. Intuitively, to tag a
message, we encode it under the R-S code, and then apply a PRF to
the last s code symbols (for 1 ≤ s ≤ n a parameter in the system),
effectively obtaining a MAC on each of those s code symbols us-
ing the UMAC construction. A codeword is considered valid if at
least one of its last s symbols are valid MACs under UMAC on its
decoding m. More speciﬁcally, the IP-ECC (n, (cid:4), d = n − (cid:4) + 1)
code construction ECCd is deﬁned as:
i}n
i=1,{κ
i=n−s+1} at
(cid:2)
random from space K = I n × (KPRF)s. The security parameter λ
speciﬁes the size of I, as well as the length of the keys in KPRF. The
keys {κi}n
i=1 deﬁne a Reed-Solomon code as described in Section
5.1 (they deﬁne the points at which polynomials are evaluated when
constructing a codeword). The keys {κ
i}n
(cid:2)
i=n−s+1 are used as PRF
keys in the UMAC construction.
- MTagECCκ
RS-UHFκi ( (cid:7)m), i = [1, n−s] and ci = UTagκi,κ
(ri)), i = [n − s + 1, n].
(ri, RS-UHFκi ( (cid:7)m) + gκ
(cid:2)
i
- MVerECCκ(c1, . . . , cn) ﬁrst strips off the PRF from cn−s+1,
(ri), i = [n − s + 1, n], and then decodes
i = ci − gκ
(cid:2)
. . . , cn as: c
(cid:2)
(cid:2)
(c1, . . . , cn−s, c
n) using the decoding algorithm of
n−s+1, . . . , c
Reed-Solomon codes to obtain message (cid:7)m = (m1, . . . , m(cid:3)). If the
decoding algorithm of the R-S code deﬁned by points {κi}n
i=1 fails
(when the number of corruptions in a codeword is beyond (cid:11) d−1
(cid:12)),
then MVerECC outputs (⊥, 0).
If one of the last s symbols of
(c1, . . . , cn) is a valid MAC on (cid:7)m under UMAC, MVerECC out-
puts ( (cid:7)m, 1); otherwise it outputs ( (cid:7)m, 0).