One of the benefits of using `{ loose: ["es6.modules"] }` is that `import`
statements don't have to appear at the top level.
However, references to variable bindings created by nested `import` statements
appear not to be rewritten:
    function test() {
      import x, {y as z} from "some/module";
      console.log(x, z);
    }
becomes
    "use strict";
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
    function test() {
      var _someModule = require("some/module");
      var _someModule2 = _interopRequireDefault(_someModule);
      console.log(x, z);
    }
I would expect this code to become something like
    function test() {
      var _someModule = require("some/module");
      var _someModule2 = _interopRequireDefault(_someModule);
      console.log(_someModule2["default"], _someModule.y);
    }