                kfree_skb(skb);
                return -EINVAL;
            }
            if (sk->sk_no_check_tx) {
                kfree_skb(skb);
                return -EINVAL;
            }
            if (skb->ip_summed != CHECKSUM_PARTIAL || is_udplite ||
                dst_xfrm(skb_dst(skb))) {
                kfree_skb(skb);
                return -EIO;
            }
            if (datalen > cork->gso_size) {
                skb_shinfo(skb)->gso_size = cork->gso_size;
                skb_shinfo(skb)->gso_type = SKB_GSO_UDP_L4;
                skb_shinfo(skb)->gso_segs = DIV_ROUND_UP(datalen,
                                     cork->gso_size);
            }
            goto csum_partial;
        }
        // 进入UDP-LITE 校验和计算, 可通过指定校验长度容忍报文出错现象
        if (is_udplite)                   /*     UDP-Lite      */
            csum = udplite_csum(skb);
        // 不进行校验
        else if (sk->sk_no_check_tx) {             /* UDP csum off */
            // CHECKSUM_NONE指不需要校验
            skb->ip_summed = CHECKSUM_NONE;
            goto send;
        } else if (skb->ip_summed == CHECKSUM_PARTIAL) { /* UDP hardware csum */
    csum_partial:
            // CHECKSUM_PARTIAL表示硬件实现部分校验和计算(udp数据校验)
            udp4_hwcsum(skb, fl4->saddr, fl4->daddr);
            goto send;
        } else
            // 软件实现校验和计算(udp数据校验)
            csum = udp_csum(skb);
        /* add protocol-dependent pseudo-header */
        // 设置伪ip头, 计算udp报文校验和与伪ip头的校验和
        uh->check = csum_tcpudp_magic(fl4->saddr, fl4->daddr, len,
                          sk->sk_protocol, csum);
        if (uh->check == 0)
            uh->check = CSUM_MANGLED_0;
    send:
        // 将skb传递至网络层(IP层), 详细见4.4
        err = ip_send_skb(sock_net(sk), skb);
        if (err) {
            if (err == -ENOBUFS && !inet->recverr) {
                UDP_INC_STATS(sock_net(sk),
                          UDP_MIB_SNDBUFERRORS, is_udplite);
                err = 0;
            }
        } else
            UDP_INC_STATS(sock_net(sk),
                      UDP_MIB_OUTDATAGRAMS, is_udplite);
        return err;
    }
###  2.4.6 udp_push_pending_frames
    int udp_push_pending_frames(struct sock *sk)
    {
        struct udp_sock  *up = udp_sk(sk);
        struct inet_sock *inet = inet_sk(sk);
        struct flowi4 *fl4 = &inet->cork.fl.u.ip4;
        struct sk_buff *skb;
        int err = 0;
        skb = ip_finish_skb(sk, fl4);
        if (!skb)
            goto out;
        err = udp_send_skb(skb, fl4, &inet->cork.base);
    out:
        up->len = 0;
        up->pending = 0;
        return err;
    }
## 3\. recv(运输层)
> 大多数api在send中已经提及, 不再次讲解
>
> __sys_recvfrom -> sock_recvmsg -> sock_recvmsg_nosec -> inet_recvmsg ->
> udp_recvmsg (层层封装)
    int __sys_recvfrom(int fd, void __user *ubuf, size_t size, unsigned int flags,
               struct sockaddr __user *addr, int __user *addr_len)
    {
        ...
        err = sock_recvmsg(sock, &msg, flags);
        if (err >= 0 && addr != NULL) {
            // 将客户端地址返回给用户态
            err2 = move_addr_to_user(&address,
                         msg.msg_namelen, addr, addr_len);
            if (err2 msg_name);
        struct sk_buff *skb;
        unsigned int ulen, copied;
        int off, err, peeking = flags & MSG_PEEK;
        int is_udplite = IS_UDPLITE(sk);
        bool checksum_valid = false;
        // 从socket错误队列接收错误信息
        if (flags & MSG_ERRQUEUE)
            return ip_recv_error(sk, msg, len, addr_len);
    try_again:
        // MSG_PEEK表示预读, 此处获得预读长度
        off = sk_peek_offset(sk, flags);
        // 从缓存队列中获得skb, 详细见2.1.1
        skb = __skb_recv_udp(sk, flags, noblock, &off, &err);
        if (!skb)
            return err;
        // 获得skb内数据长度
        ulen = udp_skb_len(skb);
        copied = len;
        // 如果待接收数据大于skb缓存数据, 截断输入
        if (copied > ulen - off)
            copied = ulen - off;
        else if (copied msg_flags |= MSG_TRUNC;
        /*
         * If checksum is needed at all, try to do it while copying the
         * data.  If the data is truncated, or if we only want a partial
         * coverage checksum (UDP-Lite), do it before the copy.
         */
        // CHECKSUM_UNNECESSARY表示硬件已完成数据校验, 无需再次校验
        // 待接收数据小于缓冲区数据&开启预读机制&开启udplite机制情况下如果skb需要进行校验则调用__udp_lib_checksum_complete进行校验
        if (copied partial_cov)) {
            checksum_valid = udp_skb_csum_unnecessary(skb) ||
                    !__udp_lib_checksum_complete(skb);
            // 校验未通过丢弃数据
            if (!checksum_valid)
                goto csum_copy_err;
        }
        // 如果校验成功或未开启校验则直接复制数据
        if (checksum_valid || udp_skb_csum_unnecessary(skb)) {
            // 如果skb中数据都存在线性区域直接调用copy_linear_skb, 否则使用skb_copy_datagram_msg
            if (udp_skb_is_linear(skb))
                err = copy_linear_skb(skb, copied, off, &msg->msg_iter);
            else
                err = skb_copy_datagram_msg(skb, off, msg, copied);
        } 
        // 此处代码对全部数据做校验
        else {
            // 在复制数据时做完整性校验
            err = skb_copy_and_csum_datagram_msg(skb, off, msg);
            if (err == -EINVAL)
                goto csum_copy_err;
        }
        // 发生错误释放skb, 直接返回
        if (unlikely(err)) {
            if (!peeking) {
                atomic_inc(&sk->sk_drops);
                UDP_INC_STATS(sock_net(sk),
                          UDP_MIB_INERRORS, is_udplite);
            }
            kfree_skb(skb);
            return err;
        }
        if (!peeking)
            UDP_INC_STATS(sock_net(sk),
                      UDP_MIB_INDATAGRAMS, is_udplite);
        sock_recv_ts_and_drops(msg, sk, skb);
        // 根据skb填充客户端数据
        /* Copy the address. */
        if (sin) {
            sin->sin_family = AF_INET;
            sin->sin_port = udp_hdr(skb)->source;
            sin->sin_addr.s_addr = ip_hdr(skb)->saddr;
            memset(sin->sin_zero, 0, sizeof(sin->sin_zero));
            *addr_len = sizeof(*sin);
            // 涉及bpf
            if (cgroup_bpf_enabled)
                BPF_CGROUP_RUN_PROG_UDP4_RECVMSG_LOCK(sk,
                                (struct sockaddr *)sin);
        }
        // 解析控制信息
        if (udp_sk(sk)->gro_enabled)
            udp_cmsg_recv(msg, sk, skb);
        if (inet->cmsg_flags)
            ip_cmsg_recv_offset(msg, sk, skb, sizeof(struct udphdr), off);
        err = copied;
        if (flags & MSG_TRUNC)
            // 如果开启MSG_TRUNC, 会接收skb中全部数据（在用户缓冲区最大处截断）
            err = ulen;
        skb_consume_udp(sk, skb, peeking ? -err : err);
        return err;
    csum_copy_err:
        if (!__sk_queue_drop_skb(sk, &udp_sk(sk)->reader_queue, skb, flags,
                     udp_skb_destructor)) {
            UDP_INC_STATS(sock_net(sk), UDP_MIB_CSUMERRORS, is_udplite);
            UDP_INC_STATS(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
        }
        kfree_skb(skb);
        /* starting over for a new packet, but check if we need to yield */
        cond_resched();
        msg->msg_flags &= ~MSG_TRUNC;
        goto try_again;
    }
### 3.1.1 __skb_recv_udp
    struct sk_buff *__skb_recv_udp(struct sock *sk, unsigned int flags,
                       int noblock, int *off, int *err)
    {
        struct sk_buff_head *sk_queue = &sk->sk_receive_queue;
        struct sk_buff_head *queue;
        struct sk_buff *last;
        long timeo;
        int error;
        // 获得缓存队列
        queue = &udp_sk(sk)->reader_queue;
        // 确定是否为非阻塞IO
        flags |= noblock ? MSG_DONTWAIT : 0;
        // 返回阻塞IO时间戳
        timeo = sock_rcvtimeo(sk, flags & MSG_DONTWAIT);
        do {
            struct sk_buff *skb;
            // 清空错误报告
            error = sock_error(sk);
            if (error)
                break;
            error = -EAGAIN;
            do {
                // 禁止CPU软中断
                spin_lock_bh(&queue->lock);
                // 尝试获得skb, 详细见2.1.1.1
                skb = __skb_try_recv_from_queue(sk, queue, flags,
                                udp_skb_destructor,
                                off, err, &last);
                if (skb) {
                    // 获得skb后开启软中断
                    spin_unlock_bh(&queue->lock);
                    return skb;
                }
                // 获取skb失败后, 无锁判断sock接收队列是否为空
                if (skb_queue_empty_lockless(sk_queue)) {
                    spin_unlock_bh(&queue->lock);
                    goto busy_check;
                }
                /* refill the reader queue and walk it again
                 * keep both queues locked to avoid re-acquiring
                 * the sk_receive_queue lock if fwd memory scheduling
                 * is needed.
                 */
                spin_lock(&sk_queue->lock);
                // 链接sk_queue进入queue
                skb_queue_splice_tail_init(sk_queue, queue);
                // 再次尝试获取skb
                skb = __skb_try_recv_from_queue(sk, queue, flags,
                                udp_skb_dtor_locked,
                                off, err, &last);
                spin_unlock(&sk_queue->lock);
                spin_unlock_bh(&queue->lock);
                if (skb)
                    return skb;
    busy_check:
                if (!sk_can_busy_loop(sk))
                    break;
                sk_busy_loop(sk, flags & MSG_DONTWAIT);
            } while (!skb_queue_empty_lockless(sk_queue));
            // 直到sk_queue为空, 跳出循环
            /* sk_queue is empty, reader_queue may contain peeked packets */
        } while (timeo &&
             !__skb_wait_for_more_packets(sk, &error, &timeo,
                              (struct sk_buff *)sk_queue));
        // 如果sock接收队列sk_queue为空, 且需要等待, 在此处等待
        *err = error;
        return NULL;
    }
### 3.1.1.1 __skb_try_recv_from_queue
    struct sk_buff *__skb_try_recv_from_queue(struct sock *sk,
                          struct sk_buff_head *queue,
                          unsigned int flags,
                          void (*destructor)(struct sock *sk,
                                   struct sk_buff *skb),
                          int *off, int *err,
                          struct sk_buff **last)
    {
        bool peek_at_off = false;
        struct sk_buff *skb;
        int _off = 0;
        if (unlikely(flags & MSG_PEEK && *off >= 0)) {
            peek_at_off = true;
            _off = *off;
        }
        *last = queue->prev;
        // 遍历队列
        skb_queue_walk(queue, skb) {
            if (flags & MSG_PEEK) {
                // 如果预读的字节数大于skb数据长度, 则更新待预读字节数且更换skb
                if (peek_at_off && _off >= skb->len &&
                    (_off || skb->peeked)) {
                    _off -= skb->len;
                    continue;
                }
                // skb非空, 设置为预读模式
                if (!skb->len) {
                    skb = skb_set_peeked(skb);
                    if (IS_ERR(skb)) {
                        *err = PTR_ERR(skb);
                        return NULL;
                    }
                }
                refcount_inc(&skb->users);
            } else {
                // 将skb从队列中取出
                __skb_unlink(skb, queue);
                // 如果定义了销毁函数则调用
                if (destructor)
                    destructor(sk, skb);