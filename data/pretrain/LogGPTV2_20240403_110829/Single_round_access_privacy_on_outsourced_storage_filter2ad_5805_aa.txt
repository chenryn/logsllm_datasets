title:Single round access privacy on outsourced storage
author:Peter Williams and
Radu Sion
Single Round Access Privacy on Outsourced Storage
Peter Williams and Radu Sion
Network Security and Applied Cryptography Lab
Stony Brook University, Stony Brook, NY, USA
{petertw,sion}@cs.stonybrook.edu
ABSTRACT
We present SR-ORAM,1 the ﬁrst single-round-trip polylog-
arithmic time Oblivious RAM that requires only logarithmic
client storage. Taking only a single round trip to perform a
query, SR-ORAM has an online communication/computation
cost of O(log n log log n), and an oﬄine, overall amortized
per-query communication cost of O(log2 n log log n), requir-
ing under 2 round trips. The client folds an entire inter-
active sequence of Oblivious RAM requests into a single
query object that the server can unlock incrementally, to
satisfy a query without learning its result. This results in
an Oblivious RAM secure against an actively malicious ad-
versary, with unprecedented speeds in accessing large data
sets over high-latency links. We show this to be the most ef-
ﬁcient storage-free-client Oblivious RAM to date for today’s
Internet-scale network latencies.
Categories and Subject Descriptors
D.0 [Software]: General; E.3 [Data Encryption]
Keywords
Access Privacy, Cloud Computing, Oblivious RAM
1.
INTRODUCTION
Oblivious RAM (ORAM) allows a client to read and write
data hosted by an untrusted party, while hiding both the
data and the access pattern from this untrusted host. Ac-
cess pattern privacy is a critical component of data privacy.
Without access pattern privacy, the act of reading and writ-
ing remote data leaks potentially essential information about
the data itself, making it impossible to achieve full data
conﬁdentiality. Since the introduction of the ﬁrst Oblivious
RAM in [6], approaches to increase query throughput have
been relentlessly sought. Nevertheless, and despite the wide
1A preliminary version of this paper appeared in the ACNS
Industrial Track [18].
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
range of potential applications, practical Oblivious RAM
constructions have remained elusive until very recently.
One of the most signiﬁcant challenges to providing practi-
cal ORAM is that these interactive protocols require a large
number of client-server round trips, resulting in large, often
impractical, online query latencies. For example, the con-
struction presented by Goodrich et al.
[8] requires log2 n
round trips, translating to an online cost alone of over 1200-
1500ms per query on a 1 terabyte database (e.g., for 10KB
blocks), assuming a network link with a latency of just 50ms.
This paper provides a simple and direct solution to the
challenge: SR-ORAM, a single-round-trip ORAM. Querying
requires a single message to be sent from the client to the
server and thus incurs a single round-trip (for a total online
cost of 50ms in the example above). Moreover, SR-ORAM
does not greatly aﬀect the oﬄine, amortized cost.
The basic idea behind SR-ORAM is to fold the interactive
queries into a single non-interactive request without sacriﬁc-
ing privacy. The client constructs a set of values (a “query
object”) that allows the server to selectively decrypt pieces,
depending on new values obtained during its traversal of
the database. Each component of the query object unlocks
only a speciﬁc single new component—which allows server
database traversal progress while preventing it from learning
anything about the overall success of the query.
Our construction is based on the Bloom ﬁlter ORAM
of [19], since it lends itself conveniently to use of a non-
interactive query object and provides defenses against ac-
tively malicious adversaries (not only curious). We also
make use of the randomized shell sort deﬁned in [9], since
it allows the more stringent client storage requirements of
SR-ORAM (when compared to [19]).
Other ORAMs with constant numbers of round trips ex-
ist; Section 3 reviews recent solutions. However, SR-ORAM
is the ﬁrst to provide a constant-round-trip polylogarithmic
time construction assuming only logarithmic client storage.
2. MODEL
A capacity-constrained client desires to outsource storage
to an untrusted party (the server). The client has enough
local non-volatile storage to manage keys and certiﬁcates,
plus enough volatile RAM to run the ORAM client software
(logarithmic in the size of the outsourced data). Moreover,
since the client reads and writes sensitive data, it needs to
hide both the data content and access pattern. Thus, the
client needs low-latency, private access to this remote disk.
Data is accessed in “blocks”, a term used to denote a ﬁxed-
size record. “Block” is used instead of “word” to convey tar-
293get applications broader than memory access (ﬁle system
and database outsourcing, in particular, are lucrative tar-
gets). Block IDs are arbitrary bit sequences sized O(log n).
Participants
Communication between the user and the ORAM Client
is secured, e.g., with access controls on inter-process com-
munication if they are on the same machine, or with SSL
otherwise. Communication between the ORAM Client and
ORAM Server is also secured, e.g., with a transport-layer
protocol such as SSL.
ORAM Client: the trusted party providing the follow-
ing (self-explanatory) interface to the user: read(id): val;
write(id, val). The Client-Server protocol details are imple-
mentation speciﬁc (and typically optimized to the instance
to minimize network traﬃc and the number of round trips).
The client keeps track of two values between queries: its
secret key and the current access count. From this, the
current level keys, and the reshuﬄe count of each level, can
be derived.
ORAM Server: the untrusted party providing the storage
backend, ﬁlling requests from the instance.
Security Deﬁnitions
We will defend against curious, potentially malicious (not
constrained to follow the protocol) polynomially bounded
adversaries. We operate in the random oracle model2. The
actively malicious defense is inherited from the underlying
ORAM, described by Williams et al. [19].
For simplicity, timing attacks are not discussed here. De-
fenses include the introduction of client-side delays to uni-
formize query times—which can be done without aﬀecting
overall protocol complexity. Additionally, SR-ORAM as-
sumes semantically secure symmetric encryption primitives
and secure hash functions.
Notation
Throughout the paper, n refers to the database size,
in
blocks. The client secret key is sk. The number of times
a given level has been shuﬄed (i.e. reconstructed) is called
the “generation,” and is abbreviated as gen. Oblivious RAM
is ORAM; Bloom Filter is BF. Key size and hash function
output size are both assumed to be c0; c1 is the Bloom ﬁlter
security parameter.
To represent computational and communication costs in a
comparable manner, complexities are represented in words,
not bits. It is assumed that each word can hold an entire
identiﬁer, e.g., O(log n) bits.
3. BACKGROUND
We start with an review of ORAM, and in particular,
Bloom-ﬁlter-based ORAMs. We next review the highly in-
teractive Bloom-ﬁlter-based ORAM [19], which provides a
convenient construction to build SR-ORAM from. Finally,
we look at recent approaches to reduce the round trip cost.
3.1 ORAM Overview
Oblivious RAM[6] provides access pattern privacy to a
single client (or software process) accessing a remote database
2For an ORAM that does not assume access to a random
oracle, we refer the reader to the construction and analysis
by Damg˚ard et al. [5]
(or RAM). The amortized communication and computa-
tional complexities of the construction by Goldreich and
Ostrovsky [6] are O(log3 n) for a database sized n. This
construction requires only logarithmic storage at the client.
We now begin a review of their logarithmic construction,
on which our own is modeled. The server-hosted database is
a set of n semantically secure encrypted blocks (with a secret
key held by the client). Supported operations are read(id),
and write(id, newvalue). The data is organized into log2(n)
levels, as a pyramid. Level i consists of up to 2i blocks; each
block is assigned to one of the 2i buckets at this level as
determined by a hash function.3 Due to hash collisions each
bucket may contain from 0 to O(log n) blocks. 4
ORAM Reads. To obtain the value of block id, a client
must perform a read query in a manner that maintains two
invariants: (i) it never reveals which level the desired block
is at, and (ii) it never looks twice in the same spot for the
same block. To maintain (i), the client always scans a single
bucket in every level, starting at the top (Level 0, 1 bucket)
and working down. The hash function informs the client
of the candidate bucket at each level, which the client then
scans. Once the client has found the desired block, the client
still proceeds to each lower level, scanning random buckets
instead of those indicated by their hash function. For (ii),
once all levels have been queried, the client re-encrypts the
query result with the secret key and a diﬀerent nonce (so it
looks diﬀerent to the server) and places it in the top level.
This ensures that when it repeats a search for this block, it
will locate the block immediately (in a diﬀerent location),
and the rest of the search pattern is randomized. The top
level quickly ﬁlls up; how to dump the top level into the one
below is described later.
ORAM Writes. Writes are performed identically to reads
in terms of the data traversal pattern, with the exception
that the new value is inserted into the top level at the end.
Inserts are performed identically to writes, since no old value
will be discovered in the query phase. Note that semantic
security properties of the re-encryption function ensure the
server is unable to distinguish between reads, writes, and
inserts, since the access patterns are indistinguishable.
Level Overﬂow. Once a level is full, it is emptied into
the level below. This second level is then re-encrypted and
re-ordered, according to a new hash function. Thus, ac-
cesses to this new generation of the second level will hence-
forth be completely independent of any previous accesses.
Each level overﬂows once the level above it has been emp-
tied twice. The resulting re-ordering must be performed
obliviously: once complete, the adversary must be unable
to make any correlation between the old block locations and
the new locations. A sorting network (e.g., [1] or [9]) is used
to re-order the blocks thusly.
To enforce invariant (i), note also that all buckets must
contain the same number of blocks. For example, if the
bucket scanned at a particular level has no blocks in it, then
the adversary would be able to determine that the desired
block was not at that level. Therefore, each re-order pro-
cess ﬁlls all partially empty buckets to the top with fake
3log4(n) levels sized 4i in the original, but for simplicity we
use a branch factor of 2.
4This was originally speciﬁed as log n blocks, with a non-
negligible probability of bucket overﬂow, in which case a
new hash function is tried. It was later shown [13] that this
results in an information leak.
294blocks. Recall that since every block is encrypted with a se-
mantically secure encryption function, the adversary cannot
distinguish between fake and real blocks.
3.2 Bloom ﬁlters
Bloom ﬁlters [3] oﬀer a compact representation of a set of
data items. They allow for relatively fast set inclusion tests.
Bloom ﬁlters are one-way, in that, the “contained” set items
cannot be enumerated easily (unless they are drawn from a
ﬁnite, small space). Succinctly, a Bloom ﬁlter can be viewed
as a string of b bits, initially all set to 0. To insert a certain
element x, the ﬁlter sets to 1 the bit values at index posi-
tions H1(x), H2(x), . . . , Hk(x), where H1, H2, . . . , Hk are a
set of k crypto-hashes. Testing set inclusion for a value
y is done by checking that the bits for all bit positions
H1(y), H2(y), . . . , Hk(y) are set.
By construction, Bloom ﬁlters feature a controllable rate
of false positives r for set inclusion tests—this rate depends
on the input data set size z, the size of the ﬁlter b and the
number of cryptographic hash functions k deployed in its
(cid:2)
(cid:3)k
.
construction: r =
1 − (1 − 1/b)
kz
As will be seen below, the SR-ORAM Bloom ﬁlters are
constrained by two important considerations. First, we need
to minimize k, since this determines directly the number of
disk reads required per lookup. Second, we need to guar-
antee that with high probability, there will be no false pos-
itives; i.e., r must be negligible to prevent a privacy leak,
since a false positive reveals lookup failure to the server.
Encrypted Bloom Filters. The idea behind remotely-
stored encrypted Bloom ﬁlters is to store their bit repre-
sentation encrypted while still allowing client-driven Bloom
ﬁlter lookups. This can be achieved, e.g., by storing the
Bloom ﬁlters as bit strings XORed with client-side PRNG-
driven key strings, or with individual bits stored and en-
crypted separately with semantic security (at the expense of
additional storage).
As will be shown, in SR-ORAM, instead of storing an
encrypted bit for each position of the Bloom ﬁlter, we store
part of a decryption key. Since the server cannot distinguish
between the keys for bit-values of 1 and the keys for bit-
values of 0, we retain the property that the server does not
learn the success of the Bloom ﬁlter lookup.
3.3 Bloom ﬁlter-based ORAMs