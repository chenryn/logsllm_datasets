For a project, I plan to develop an application on Google App Engine with the following features:

1. Discussion Leaders can register using their email address, OpenID, or Google Account directly on the website.
2. From the application's admin page, leaders can create group discussions and add participants by their email addresses.
3. If these participants do not already have an account, they should receive generated account details that allow them to log in and join the discussion.

I want to avoid requiring Discussion Leaders to have a Google Account or OpenID for registration, and all user accounts must be created by the Discussion Leader. However, it appears that Google App Engine primarily supports Google Accounts and OpenID. 

**Question:**
- How can I implement this functionality within Google App Engine while still supporting the GAE User API?
- Is there a known pattern or best practice for creating leader-accounts and generating user-accounts in this manner?

**Response:**

If you do not want to require a Google Account or OpenID for registration, you will need to implement a custom account system. This approach provides the flexibility you need but comes with additional responsibilities, such as managing password security and user authentication.

### Considerations:
1. **Custom Authentication System:**
   - Develop a custom user management system that allows users to register and log in using their email addresses.
   - Implement secure password storage (e.g., using bcrypt or Argon2) and handle password resets.
   - Ensure that your custom system is compliant with security best practices, such as using HTTPS, implementing rate limiting, and protecting against common web vulnerabilities.

2. **Integrating with GAE User API:**
   - While the GAE User API is designed to work with Google Accounts and OpenID, you can still use it for other parts of your application where Google or OpenID accounts are acceptable.
   - For the custom accounts, you can create a separate authentication mechanism and integrate it with your application logic.

3. **User Experience:**
   - Provide a seamless experience for both types of users (those with Google/OpenID accounts and those with custom accounts).
   - Clearly communicate the registration and login options to your users to avoid confusion.

### Recommended Approach:
- **Reconsider the Requirement:**
  - Evaluate whether the requirement to avoid Google Accounts and OpenID is essential. Both provide robust and secure authentication mechanisms and are widely used.
  - OpenID, in particular, offers a flexible and secure way to authenticate users without requiring them to manage multiple passwords. It also supports a wide range of identity providers, including Google, Microsoft, and others.

- **Hybrid Solution:**
  - Offer both options: allow users to register with Google Accounts or OpenID, and provide a fallback option for custom email-based registration.
  - This approach gives you the best of both worlds: the security and ease of use of established identity providers, along with the flexibility of a custom solution.

By carefully considering these factors, you can design a robust and user-friendly authentication system for your application on Google App Engine.