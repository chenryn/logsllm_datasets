title:SGUARD: Towards Fixing Vulnerable Smart Contracts Automatically
author:Tai D. Nguyen and
Long H. Pham and
Jun Sun
2021 IEEE Symposium on Security and Privacy (SP)
SGUARD: Towards Fixing Vulnerable Smart
Contracts Automatically
Tai D. Nguyen, Long H. Pham, Jun Sun
PI:EMAIL, {longph1989, sunjunhqq}@gmail.com
Singapore Management University, Singapore
7
5
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
Abstract—Smart contracts are distributed, self-enforcing pro-
grams executing on top of blockchain networks. They have
the potential to revolutionize many industries such as ﬁnancial
institutes and supply chains. However, smart contracts are
subject to code-based vulnerabilities, which casts a shadow on
its applications. As smart contracts are unpatchable (due to the
immutability of blockchain), it is essential that smart contracts
are guaranteed to be free of vulnerabilities. Unfortunately, smart
contract languages such as Solidity are Turing-complete, which
implies that verifying them statically is infeasible. Thus, alterna-
tive approaches must be developed to provide the guarantee.
In this work, we develop an approach which automatically
transforms smart contracts so that they are provably free of
4 common kinds of vulnerabilities. The key idea is to apply run-
time veriﬁcation in an efﬁcient and provably correct manner.
Experiment results with 5000 smart contracts show that our
approach incurs minor run-time overhead in terms of time (i.e.,
14.79%) and gas (i.e., 0.79%).
I. INTRODUCTION
Blockchain is a public list of records which are linked
together. Thanks to the underlying cryptography mechanism,
the records in the blockchain can resist against modiﬁcation.
Ethereum is a platform which allows programmers to write
distributed, self-enforcing programs (a.k.a smart contracts)
executing on top of the blockchain network. Smart con-
tracts, once deployed on the blockchain network, become
an unchangeable commitment between the involving parties.
Because of that,
to revolutionize
many industries such as ﬁnancial institutes and supply chains.
However, like traditional programs, smart contracts are subject
to code-based vulnerabilities, which may cause huge ﬁnancial
loss and hinder its applications. The problem is even worse
considering that smart contracts are unpatchable once they are
deployed on the network. In other words, it is essential that
smart contracts are guaranteed to be free of vulnerabilities
before they are deployed.
they have the potential
In recent years, researchers have proposed multiple ap-
proaches to ensure smart contracts are vulnerability-free.
These approaches can be roughly classiﬁed into two groups,
i.e., veriﬁcation and testing. However, existing efforts do not
provide the required guarantee. Veriﬁcation of smart contracts
is often infeasible since smart contracts are written in Turing-
complete programming languages (such as Solidity which is
the most popular smart contract language), whereas it is known
that testing (of smart contracts or otherwise) only shows the
presence not the absence of vulnerabilities.
In this work, we propose an approach and a tool, called
SGUARD, which automatically ﬁxes potentially vulnerable
smart contracts. SGUARD is inspired by program ﬁxing tech-
niques for traditional programs such as C or Java, and yet
are designed speciﬁcally for smart contracts. First, SGUARD
is designed to guarantee the correctness of the ﬁxes. Existing
program ﬁxing approaches (e.g., GenFrog [1], PAR [2], Sap-
ﬁx [3]) often suffer from the problem of weak speciﬁcations,
i.e., a test suite is taken as the correctness speciﬁcation. A ﬁx
driven by such a weak correctness criteria may over-ﬁt the
given test suites and does not provide correctness guarantee
in all cases. Furthermore, ﬁxes for smart contracts may suffer
from not only time overhead but also gas overhead (i.e., extra
fees for running the additional code) and SGUARD is designed
to minimize the run-time overhead in terms of time and gas
introduced by the ﬁxes.
Given a smart contract, at the high level, SGUARD works in
two steps. In the ﬁrst step, SGUARD ﬁrst collects a ﬁnite set
of symbolic execution traces of the smart contract and then
performs static analysis on the collected traces to identify po-
tential vulnerabilities. As of now, SGUARD supports 4 types of
common vulnerabilities. Note that our static analysis engine is
built from scratch as extending existing static analysis engines
for smart contracts (e.g., Securify [4] and Ethainter [5]) for
our purpose is infeasible. For instance, their sets of semantic
rules are incomplete and sometimes produce conﬂicting results
(i.e. a contract both complies and violates a security rule).
In addition, they perform abstract interpretation locally (i.e.,
context/path-insensitive analysis) and thus suffer from many
false positives. A contract ﬁxed based on the analysis results
from these tools may introduce unnecessary overhead.
In the second step, SGUARD applies a speciﬁc ﬁxing pattern
for each type of vulnerability on the source code to guarantee
that the smart contract is free of those vulnerabilities. Our
approach is proved to be sound and complete on termination
for the vulnerabilities that SGUARD supports.
To summarize, our contribution in this work is as follows.
• We propose an approach to ﬁx 4 types of vulnerabilities
in smart contracts automatically.
• We prove that our approach is sound and complete for
the considered vulnerabilities.
• We implement our approach as a self-contained tool,
which is then evaluated with 5000 smart contracts. The
experiment results show that SGUARD ﬁxes 1605 smart
contracts. Furthermore, the ﬁxes incur minor run-time
© 2021, Tai Duy Nguyen. Under license to IEEE.
DOI 10.1109/SP40001.2021.00057
1215
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:22 UTC from IEEE Xplore.  Restrictions apply. 
overhead in terms of time (i.e., 14.79% on average) and
gas (i.e., 0.79%).
The remainder of the paper is organized as follows. In
Section II, we provide some background about smart contracts
and illustrate how our approach works through examples. The
problem is then deﬁned formally in Section III. In Section IV,
we present the details of our approach. The experiment results
are presented in Section V. We discuss related work in
Section VI and conclude in Section VII.
II. BACKGROUND AND OVERVIEW
In this section, we introduce relevant background on smart
contracts and illustrate how our approach addresses the prob-
lem of smart contract vulnerabilities through examples.
A. Smart Contract
The concept of smart contracts came into being with
Ethereum [6], i.e., a digital currency platform with the ca-
pability of executing programmable code. It is subsequently
supported by platforms such as RSK [7] and Hyperledger [8].
In this work, we focus on Ethereum smart contracts as it
remains the most popular smart contracts platform.
Intuitively speaking, an Ethereum smart contract
imple-
ments a set of rules for managing digital assets in Ethereum
accounts. In the Ethereum platform, there are two type of
accounts, i.e., externally owned accounts (EOAs) and contract
accounts. Both types of accounts have a 256-bit unique address
and a balance which represents the amount of Ether (a.k.a.
Ethereum currency unit) in the account. Contract accounts
are the ones which are associated with smart contracts that
can be used to perform certain predeﬁned tasks. A smart
contract is similar to a class in object-oriented programming
languages such as Java or C#. It contains persistent data
such as storage variables and functions that can modify these
variables (including a constructor which initializes them).
Functions that are declared public can be invoked from other
accounts (either EOAs or other contract accounts) through
transactions, i.e., a sequence of function invocations.
The Etherum platform supports multiple programming lan-
guages for smart contracts programming. Currently, the most
popular one is Solidity, i.e., a Turing-complete programming
language. For instance, Figure 1(a) shows a public function
in a contract named SmartMesh written in Solidity. Once
invoked, the function transfers certain amount of tokens from
an account (at address from) to another account (at address
to). A Solidity contract is compiled into Ethereum bytecode.
With the bytecode, a transaction is then executed by the
Ethereum Virtual Machine (EVM) on miners’ machines. In
its essence, EVM is a stack-based machine. Its details can be
referred to in Section III-A.
Solidity programs have a number of language features which
are speciﬁc to smart contracts and are often associated with
vulnerabilities. For instance, a public function marked with
keyword payable is allowed to receive Ether when it
is
invoked. The amount of Ether received is represented in the
value of variable msg.value. That is, if an account invokes a
payable function of a contract and sets the value of msg.value
greater than 0, Ether is transferred from the invoking account
to the invoked account. Besides that, Ether can also be sent
to other contracts using function send() or transf er() which
are globally deﬁned. Note that in such a case, a speciﬁc no-
name function, called the f allback function, is executed if it is
deﬁned in the receiving contract. Note that a f allback function
is meant to be a safety valve when a non-existing function is
called upon the contract, although it seems to be a source of
problems instead. Furthermore, to prevent the harmful exploit
of the network such as running inﬁnite loops, each bytecode
instruction (called opcode) is associated with a running cost
called gas, which is paid from the caller’s account.
B. Vulnerabilities
Just like traditional programs, smart contracts are subject
to code-based vulnerabilities. A variety of vulnerabilities have
been identiﬁed in real-world smart contracts, some of which
have been exploited by attackers and have caused signiﬁcant
ﬁnancial losses (e.g., [9], [10]). In the following, we introduce
two kinds of vulnerabilities through examples.
Example II.1. One category of vulnerabilities is arithmetic
vulnerability, e.g., overﬂow. For instance, in April 2018, an
attacker exploited an integer overﬂow bug in a smart contract
named SmartMesh and stole a massive amount of tokens
(i.e., digital currency). The same bug affected 9 tradable tokens
at that time and was named as ProxyOverflow. Figure 1(a)
shows the (simpliﬁed) function transferProxy in the
SmartMesh contract which contains the bug. The function is
designed for transferring tokens from one account to another,
while paying certain fee to the sender (see lines 6 and 7). The
developer was apparently aware of potential overﬂow and in-
troduced relevant checks at lines 2, 4 and 5. Unfortunately, one
subtle bug is missed by the checks. That is, if fee+value is
0 (due to overﬂow) and balances[from]=0, the attacker
is able to bypass the check at line 2 and subsequently increase
the balance of msg.sender and to (see lines 6 and 7) by
an amount more than balances[from]. During the attack,
this bug was exploited to create tokens out of air. This example
highlights that manually-written checks could be error-prone.
Example II.2. Reentrancy vulnerability is arguably the most
infamous vulnerability for smart contracts. It happens when a
smart contract C invokes a function of another contract D and
subsequently a call back (e.g., through the f allback function
in contract D) to contract C is made while it is in an incon-
sistent state, e.g., the balance of contract C is not updated.