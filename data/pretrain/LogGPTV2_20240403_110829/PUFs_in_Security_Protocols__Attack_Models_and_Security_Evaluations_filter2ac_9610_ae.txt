### Communicating PUF and Security Measures

#### 1. One-Time Use and Shielding
To ensure the security of Physical Unclonable Functions (PUFs), it is often assumed that PUFs should be used only once, and potentially malicious parties must be prevented from accessing the PUF after its initial use. This one-time use requirement, combined with continuous shielding until the PUF's destruction, imposes significant practical and economic challenges. These measures are both costly and non-trivial, leading to the question of whether alternative approaches exist to counteract the PUF re-use model and the presence of bad PUFs.

### Erasable and Certifiable PUFs

#### 2. Direct Countermeasures
Two direct countermeasures against the PUF re-use model and bad PUFs are Erasable and Certifiable PUFs.

**Erasable PUFs:**
- **Definition:** Erasable PUFs are Strong PUFs with the additional feature that individual responses can be permanently erased without affecting other responses.
- **First Consideration:** The concept was first introduced by Rührmair, Algasinger, and Jaeger [26], who proposed an implementation based on crossbar structures. However, this implementation is highly area-consuming, and more efficient implementations have not yet been developed.
- **Challenges:** Traditional Strong PUF designs, such as Arbiter PUFs [30] and optical PUFs [20], involve multiple subparts interacting to generate a response. Altering or erasing a single response would typically affect other responses, making these designs unsuitable for Erasable PUFs. Similarly, Reconfigurable PUFs [16] alter all responses simultaneously, making them unsuitable as well.

**Logically Reconfigurable PUFs (LR-PUFs):**
- **Alternative Approach:** LR-PUFs, introduced by Katzenbeisser et al. [13], allow the manufacturer to collect a Challenge-Response Pair (CRP) list that remains valid even after multiple reconfigurations. This can help in ensuring the security of certain protocols in the PUF re-use model.
- **Assumptions:** However, LR-PUFs introduce additional assumptions, such as the impossibility of tampering with the control logic around the underlying Strong PUF.

**Certiﬁable PUFs:**
- **Definition:** Certifiable PUFs allow offline certification that they possess only the properties expected by honest parties. They can be verified to have been drawn faithfully from the expected PUF distribution and not modified in any way.
- **Importance:** Offline certification is crucial because continuous communication with a trusted authority for every protocol execution would render PUFs obsolete. Currently, no methods for achieving such authentication have been proposed in the literature.

### Combining Erasability and Certifiability

#### 3. Open Challenges
Combining certifiability and erasability (or variants like logical erasability/reconfigurability) in a single piece of hardware presents a highly relevant but challenging open problem for the PUF hardware community. Solving this would restore the full applicability of Strong PUFs as a general, broadly, and efficiently usable cryptographic tool. It would enable PUF protocols in complex environments without additional computational assumptions and without the economically unrealistic one-time use of PUFs.

### Summary and Future Work

#### 4. New Attack Models
We introduced several new attack models for Strong PUF protocols, including the "PUF re-use model" and the "bad PUF model." These models represent practically relevant and hard-to-detect attack strategies, particularly for real-world PUF usage scenarios.

#### 5. Analysis of Known Protocols
We analyzed the security of several known protocols, including Oblivious Transfer (OT), Bit Commitment (BC), and Key Exchange (KE) protocols for Strong PUFs. Our results, summarized in Section I, show that all analyzed protocols can be successfully attacked in the bad PUF model and/or the PUF re-use model. This includes schemes by Rührmair [22], van Dijk [5], Brzuska et al. [1], and Ostrovsky et al. [18].

#### 6. Potential Countermeasures
- **Classical Computational Assumptions:** Using classical computational assumptions in combination with strict one-time use and continuous shielding of PUFs is one approach. However, this is very costly and difficult to implement, and it diminishes the appeal of PUFs as a new, independent, and post-quantum cryptographic primitive.
- **Certiﬁable and Erasable PUFs:** A second, more promising approach is the use of Certifiable and Erasable PUFs. These PUFs can be certified offline for their genuineness and allow the selective erasure of individual responses without affecting others. If Erasable PUFs remain hard to realize, variants such as logical erasability/reconfigurability could be considered. Combining erasability and certifiability in a single piece of hardware is a central challenge for future research.

### Relation to Other PUF Applications

#### 7. PUF-Based Key Storage and Identification
- **Key Storage:** PUFs are also used as tamper-sensitive key storage elements, sometimes referred to as "physically obfuscated keys" (POKs) or "Weak PUFs" [11]. In this context, PUF responses remain internal and can only be accessed by the system itself to derive an internal secret key. This makes the PUF re-use and bad PUF models less relevant.
- **Identification Protocols:** For Strong PUF-based identification protocols, such as those by Pappu et al. [20, 19], the use of bad PUFs appears less relevant, and the PUF re-use model does not pose a significant threat. However, a manufacturer using a simulatable PUF can impersonate the PUF-carrying hardware.

### Future Research Directions

#### 8. Theoretical and Practical Research
- **Theoretical Research:** Develop new attack models and security definitions, such as in the Universal Composability (UC) framework. This includes formal definitions of Erasable and Certifiable PUFs, and the investigation of "PUF attestation" as a standard protocol step.
- **Practical Research:** Focus on the development of efficient Erasable and Certifiable PUFs. Combining these features in a single piece of hardware is highly non-trivial and poses a central challenge for the PUF hardware community.

### Acknowledgements
The authors thank Jürg Wullschleger for enjoyable discussions and contributions on the bad PUF model and challenge-logging PUFs.

### References
[References listed as provided in the original text]

This revised version aims to provide a clearer, more structured, and professional presentation of the content.