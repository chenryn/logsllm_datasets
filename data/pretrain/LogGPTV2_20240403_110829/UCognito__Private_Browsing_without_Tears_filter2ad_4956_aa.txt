# UCognito: Private Browsing without Tears

**Authors:**  
Meng Xu, Yeongjin Jang, Xinyu Xing, Taesoo Kim, and Wenke Lee  
School of Computer Science, Georgia Institute of Technology  
{meng.xu, yeongjin.jang, taesoo}@gatech.edu, {xinyu.xing, wenke}@cc.gatech.edu

## Abstract
While private browsing is a standard feature in modern web browsers, its implementation has been inconsistent and often fails to provide adequate privacy protection. For example, browser extensions and add-ons can undermine the intended privacy goals. In this paper, we present a systematic study of private browsing. We developed a method to identify traces left behind by private browsing sessions and found that both Chrome and Firefox fail to clear some of these traces. Our analysis of the source code revealed that the current implementation relies on scattered decision points throughout the codebase, which makes it prone to errors. Based on this, we propose a new approach called UCOGNITO, which overlays the actual filesystem with a sandbox filesystem during private browsing, preventing unintended data leakage and persistent modifications. UCOGNITO does not require changes to the browser or OS kernel and incurs negligible performance overhead. Evaluations show that UCOGNITO effectively stops known privacy leaks in Chrome and Firefox.

## Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—Security and Protection; K.4.1 [Computers and Society]: Public Policy Issues—Privacy

## Keywords
private browsing, browser implementation, filesystem sandbox

## 1. Introduction
Private browsing mode is a security feature implemented in major web browsers like Firefox, Chrome, and Opera. It aims to allow users to browse the web without storing local data that could reveal their activities. However, prior studies have shown that adversaries can easily compromise this privacy goal. For instance, Aggarwal et al. demonstrated that browser extensions and add-ons can undermine the security of private browsing.

In this paper, we examine the security of private browsing in Google Chrome and Mozilla Firefox. We develop an automatic tool to identify traces left behind by private browsing sessions and find that both browsers fail to clear some of these traces. This undermines the goals of private browsing, as an adversary can infer visited websites from the remaining traces, such as the OCSP cache.

To address these issues, we design and implement UCOGNITO, a universal framework for private browsing. UCOGNITO overlays the actual filesystem with a sandbox filesystem, ensuring that no unintended data is stored or leaked. This approach does not require changes to the browser or OS kernel and incurs minimal performance overhead. We evaluate UCOGNITO on Linux and show that it effectively prevents privacy violations with negligible overhead.

## 2. Background: Private Browsing
### 2.1 Private Browsing Mode
Private browsing mode is generally perceived as a way to provide additional privacy protection for users' browsing activities. However, the specific protections vary among different browsers. For example, Chrome offers two modes: Incognito Mode and Guest Mode, with Guest Mode providing stronger privacy protection. Other browsers, like Safari, allow persisting per-site permissions in private mode, while others do not.

### 2.2 Privacy Goals
Given the heterogeneity in the interpretation of private browsing, we define the high-level properties of private browsing:
- **Stealthiness:** Data in private mode should not be stored unless explicitly agreed upon by the user.
- **Freshness:** Persistent data from previous sessions should not be used in private mode unless explicitly agreed upon by the user.

### 2.3 Complexity of Implementation
A naive implementation of private browsing would disable all features that store data. However, this would make it easy for websites to detect if a user is in private mode. Instead, browsers use a "mimicking" approach, where they create non-persistent versions of features to maintain indistinguishability. This approach increases code complexity and can lead to privacy issues.

## 3. Threat Model and Security Goals
We assume a host-guest threat model where both parties can be malicious. The guest uses private mode to prevent the host from inferring their browsing activity, while the host restricts the guest to prevent their own activity from being inferred. The security goals are stealthiness and freshness, as defined in Section 2.2.

## 4. Design of UCOGNITO
UCOGNITO addresses the limitations of existing private browsing implementations by overlaying the actual filesystem with a sandbox filesystem. This ensures that no unintended data is stored or leaked. UCOGNITO provides a set of privacy policies, allowing each browser to implement private browsing according to its own definition.

## 5. Implementation and Evaluation
We implement UCOGNITO on Linux and evaluate its functionality and performance. Our evaluations show that UCOGNITO effectively prevents privacy violations with negligible overhead, making it a viable solution for enhancing private browsing.

## 6. Extensibility and Related Work
UCOGNITO is designed to be extensible, allowing for customization to suit different privacy needs. We also discuss related work in the field of private browsing and compare UCOGNITO's approach with existing solutions.

## 7. Conclusion
In conclusion, UCOGNITO provides a robust and efficient solution for private browsing. By overlaying the actual filesystem with a sandbox filesystem, it ensures that no unintended data is stored or leaked, thereby enhancing the privacy and security of users' browsing activities.

---

This revised version of the text is more structured and coherent, with a clearer flow of ideas and a more professional tone.