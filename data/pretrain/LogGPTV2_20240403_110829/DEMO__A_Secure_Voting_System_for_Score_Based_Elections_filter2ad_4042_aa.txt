# Title: DEMO: A Secure Voting System for Score-Based Elections

## Authors
- Lihi Dery, Ariel Cyber Innovation Center, Ariel University, Israel (Email: [PI:EMAIL])
- Tamir Tassa, The Open University, Israel (Email: [PI:EMAIL])
- Avishay Yanai, VMware Research, Israel (Email: [PI:EMAIL])
- Arthur Zamarin, The Open University, Israel (Email: [PI:EMAIL])

## Abstract
Dery et al. recently proposed a secure voting protocol for score-based elections, where independent talliers perform the tallying procedure. The protocol ensures perfect ballot secrecy, revealing only the identity of the winner(s) while keeping all other information confidential, even from the talliers. This high level of privacy, which may encourage voters to vote truthfully, and the protocol's extremely lightweight nature make it an ideal and powerful tool for democracies of any size. We have implemented this system and describe its components—election administrators, voters, and talliers—and its operation. Our implementation is in Python and is open source. We view this demo as a crucial step towards convincing decision-makers in communities that practice score-based elections to adopt it as their election platform.

### CCS Concepts
- **Security and Privacy**: Social aspects of security and privacy; Privacy protections.
- **Applied Computing**: Voting/election technologies.

### Keywords
Electronic Voting, Secure Multiparty Computation, Perfect Ballot Secrecy, Voting Protocols, Computational Social Choice

### ACM Reference Format
Lihi Dery, Tamir Tassa, Avishay Yanai, and Arthur Zamarin. 2021. DEMO: A Secure Voting System for Score-Based Elections. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3460120.3485343

## 1. Introduction
Ballot secrecy is a fundamental goal in the design of voting systems. When voters are concerned about their privacy, they might vote differently from their true preferences or abstain from voting altogether. Dery et al. [3] presented a secure protocol with perfect ballot secrecy for computing election results in score-based voting rules. Perfect ballot secrecy [1] means that, given any coalition of voters, the protocol does not reveal any information on the ballots beyond what can be inferred from the published results.

In score-based elections over \( M \) candidates, \( C = \{C_1, \ldots, C_M\} \), each voter \( V_n \in V = \{V_1, \ldots, V_N\} \) submits a ballot vector \( w_n := (w_n(1), \ldots, w_n(M)) \) containing the scores given to each candidate. The winner is the candidate with the highest aggregated score from all voters (or the top \( K \) candidates if the election requires selecting \( K \geq 1 \) candidates).

Each rule in this family defines the allowed ballot vectors. For example:
- **Plurality**: Each ballot vector must contain a single 1-entry, with the remaining \( M-1 \) entries being 0. The 1-entry is placed in the position corresponding to the voter's favorite candidate.
- **Approval**: The ballot vector includes 1-entries for approved candidates and 0-entries otherwise.
- **Veto**: The ballot vector includes a 1-entry for the least preferred candidate and 0-entries for all others.
- **Range**: The ballot vector contains scores within a preset range \([0, L]\).
- **Borda**: The ballot vector \( w_n \) is a permutation of \(\{0, 1, \ldots, M-1\}\) describing the voter's ranking of the candidates.

The protocol involves a set of talliers \( T = \{T_1, \ldots, T_D\} \) to whom voters send shares of their ballot vectors. The talliers validate the legality of the cast ballots, aggregate them, and compute the final results using secure multiparty sub-protocols, ensuring that the talliers never access the actual ballots or intermediate computational results. The protocol is secure under the assumption that the talliers have an honest majority. Employing more talliers (higher values of \( D \)) increases costs but enhances security against coalitions of corrupted talliers. Such perfect ballot privacy, by which ballots and aggregated scores are not disclosed even to the talliers, may increase voter confidence and encourage truthful voting.

## 2. The Protocol
Protocol 1 provides a high-level description of the protocol presented in [3]. All computations are carried out in a finite field \( \mathbb{Z}_p \). The core of the protocol is in Steps 4 and 6.

- **Step 4**: The talliers run an MPC (Multi-Party Computation) sub-protocol to validate the legality of the ballot \( w_n \) without constructing it. For example, in Plurality, each ballot entry must be either 0 or 1, validated by computing \( w_n(m) \cdot (w_n(m) - 1) \) for all \( m \in [M] \). These validations are carried out using the MPC sub-protocol of Damgård and Nielsen [2] for computing products of shared values.

- **Step 6**: The talliers sort the vector of aggregated scores \( \hat{w} \) (where the sum goes over all legal ballots) to find the \( K \) largest entries. This is done by computing an arithmetic circuit [5] that performs an MPC comparison of two secret values \( u, v \in \mathbb{Z}_p \). Each tallier \( T_d \) holds shares \( u_d \) and \( v_d \) in \( u \) and \( v \), respectively, in a Shamir’s \( D' \)-out-of-\( D \) secret sharing scheme [6], where \( D' := \lfloor (D + 1)/2 \rfloor \). The circuit outputs a bit indicating whether \( u < v \). This allows the talliers to determine the winning candidates without learning any other information about the ballots or the aggregated scores.

**Protocol 1: A Protocol for Secure Score-Based Voting**
- **Input**: Ballot vectors \( w_n \), \( n \in [N] := \{1, \ldots, N\} \).
- **Output**: The \( K \) candidates with the highest aggregated scores.
  1. Each voter \( V_n \) constructs a ballot vector \( w_n \) according to the voting rule.
  2. Each voter \( V_n \) generates a random polynomial \( g_{n,m} \) of degree \( D' - 1 \), where \( D' = \lfloor (D + 1)/2 \rfloor \) and \( g_{n,m}(0) = w_n(m) \), \( \forall m \in [M] \). Then, she creates the share vector \( w_{n,d} = (g_{n,1}(d), \ldots, g_{n,M}(d)) \) for each \( d \in [D] \).
  3. Voter \( V_n \) sends \( w_{n,d} \) to tallier \( T_d \), \( \forall d \in [D] \).
  4. The talliers jointly validate the legality of each cast ballot \( w_n \) without revealing them.
  5. Tallier \( T_d \) computes \( \hat{w}_d = \sum w_{n,d} \), where the sum is over all \( n \in [N] \) for which \( w_n \) is legal.
  6. The talliers jointly find the \( K \) indices with the largest entries in \( \hat{w} \).

## 3. Implementation
We implemented a demo of a voting system based on Protocol 1. The demo illustrates the three modules of the system: election administrator, voters, and talliers. It provides a simple interface for the administrator and voters and demonstrates the efficiency of the protocol. The system is implemented in Python for cross-platform support, and the code is fully open source: https://github.com/arthurzam/SecureVoting.

### 3.1. The Election Administrator
The first module, the election administrator, initiates a new election campaign and determines:
- The election title (e.g., "Electing a new faculty dean").
- The set of candidates \( C = \{C_1, \ldots, C_M\} \) and their indexing.
- The set of eligible voters \( V = \{V_1, \ldots, V_N\} \) with their email addresses and unique identifiers.
- The voting rule.
- The number \( K \) of candidates to be elected.
- The number \( D \) of talliers and their TCP/IP ports/addresses.
- The election termination condition (e.g., a specified time).

After setting up the election, the administrator receives a `config.json` file containing all configuration details. This file is sent to all talliers, and a shortened version (without voter details) is sent to each voter.

### 3.2. The Voter Module
The voter module can be executed on various devices (laptops, tablets, smartphones) and is designed for non-expert users. The main goal is to keep the module simple for easy migration between platforms and to provide a clear, user-friendly interface.

The graphical interface presents the list of candidates and instructions for entering the ballot. For example, in Plurality, the voter selects one candidate. In Range, the voter assigns a score within a given range to each candidate. In Borda, the voter ranks the candidates from most to least favorite.

Once the voter has entered their ballot, the module uses the `config.json` file to create the proper ballot vector (Step 1 in Protocol 1), generate shares (Step 2), and send these shares, signed and encrypted using SSL, to the talliers' addresses listed in the configuration file (Step 3).

To support various types of voting devices, we developed a specialized version of the voter module using client-side web code. It receives election information through URL parameters, presents it to the user, manages vote casting, and connects to the talliers. This module is implemented using HTML and JavaScript and can run on any browser on any device.

### 3.3. The Tallier Module
The tallier module is the most complex, establishing a synchronized network with other talliers, collecting ballot shares from all voters (Step 3 in Protocol 1), validating their legality (Step 4), aggregating shares of all legal ballots (Step 5), and participating in an MPC sub-protocol to determine the winner(s) (Step 6).

This module handles heavy network transport and significant computational tasks, making it a critical component of the system.