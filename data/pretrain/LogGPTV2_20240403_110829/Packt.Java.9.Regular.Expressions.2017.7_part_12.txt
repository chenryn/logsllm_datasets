by using the union and intersection of character classes.
In the next chapter, we will discuss the pitfalls of some poorly written regular expressions,
and you will learn ways to avoid them. You will also learn some important optimizing tips
and performance improvement methods for writing complex regular expressions.
[ 118 ]
8
Regular Expression Pitfalls,
Optimization, and Performance
Improvements
Regular expressions, if not written well may perform poorly. They may run slowly, and
when they are executed frequently in some code, they may be the source of high CPU
utilization. To avoid these problems, regular expressions have to be crafted carefully,
understanding the possible pitfalls, and they also have to be tested thoroughly. We will be
covering the following topics in this chapter:
Common pitfalls and ways to avoid them while writing regular expressions
How to test your regex functionality and performance
Optimization and performance enhancing tips
Catastrophic backtracking and how to avoid it
Common pitfalls and ways to avoid them
while writing regular expressions
Let's discuss some common mistakes people make while building regular expressions to
solve various problems.
Regular Expression Pitfalls, Optimization, and Performance Improvements
Do not forget to escape regex metacharacters
outside a character class
You learned that all the special metacharacters, such as *, +, ?, ., |, (, ), [, {, ^, $, and so
on, need to be escaped if the intent is to match them literally. I often see cases where
programmers leave them unescaped, thus giving a totally different meaning to the regular
expression. The Java regex API that we discussed in Chapter 5, Introduction to Java Regular
Expressions APIs - Pattern and Matcher Classes, throws a non-checked exception if a regex
pattern is wrongly formatted and cannot be compiled.
Avoid escaping every non-word character
Some programmers overdo escaping, thinking that they need to escape every non-word
character such as colon, hyphen, semicolon, forward slash, and whitespace, which is not
correct. They end up writing a regular expression as follows:
^https?\:\/\/(www\.)?example\.com$
The preceding regex pattern uses excessive escaping. This pattern still works, but it is not
very readable. The colon and forward slash have no special meaning in regex; hence, it is
better to write this regex in the following way:
^https?://(www\.)?example\.com$
Avoid unnecessary capturing groups to reduce
memory consumption
We come across so many examples of regular expressions on the internet that promote
unnecessary capturing groups. If we are not extracting any substring or not using a group
in backreferences, then it is better to avoid capturing groups by using one or more of the
following ways:
1. We can use character classes in certain cases. Consider the following capturing
group:
(a|e|i|o|u)
So, instead of using the preceding regex, we can use the following:
[aeiou]
[ 120 ]
Regular Expression Pitfalls, Optimization, and Performance Improvements
2. We can use a non-capturing group by placing a ?: at the start of the group.
Consider the following regex:
(red|blue|white)
Instead of the previous regex, we can use the following:
(?:red|blue|white)
3. To write a regex to match an integer or decimal number there is no need to use
the following regex:
^(\d*)(\.?)(\d+)$
We can just rewrite it by removing unnecessary groups, as follows:
^\d*\.?d+$
4. Sometimes, a regex may contain multiple problems, such as the ones we
discussed in the previous subsection:
^https?\:\/\/(www\.)?example\.com$
Not only does this regex use excessive escaping but there is also an unnecessary
capturing group in this regex. Hence, by applying these fixes, the preceding regex
can be better written as follows:
^https?://(?:www\.)?example\.com$
However, don't forget to use the required group
around alternation
Often, we see regex patterns that use alternation, and around the alternation, we use
anchors or boundary matchers without safeguarding the alternation expression in a group.
Note that the ^, $, \A, \Z, \z anchors and the \b boundary matcher have a higher
precedence than the alternation character, | (pipe)
So, consider a regular expression written as follows:
^com|org|net$
[ 121 ]
Regular Expression Pitfalls, Optimization, and Performance Improvements
It will also match computer, organization, and internet, though the intent probably
was to match only com, net, and org. This is because the start anchor, ^, is being applied to
com only and the end anchor, $, is being applied to net, whereas org is not anchored at all.
This regular expression should be written as follows to match only com, org, and net
correctly:
^(?:com|org|net)$
Use predefined character classes instead of
longer versions
We discussed predefined character classes and Unicode character classes in Chapter 2,
Understanding the Core Concepts of Java Regular Expressions. We need to make good use of it.
So use \d instead of [0-9] or \D instead of [^0-9], and use \w instead of [a-zA-Z_0-9]
or \W instead of [^a-zA-Z_0-9].
Use the limiting quantifier instead of repeating a
character or pattern multiple times
The MAC address of a computer is a unique identifier assigned to network interfaces at the
time of manufacturing. MAC addresses are 6 bytes or 48 bits in length and are written in the
nn:nn:nn:nn:nn:nn format, where each n represents a hexadecimal digit. To match a
MAC address, one can write the following regex:
^[A-F0-9]{2}:[A-F0-9]{2}:[A-F0-9]{2}:[A-F0-9]{2}:[A-F0-9]{2}:[A-F0-9]{2}$
However, it is much cleaner and more readable to write the regex as follows:
^(?:[A-F\d]{2}:){5}[A-F\d]{2}$
Note how short and readable this regex pattern has become when compared to the previous
regex.
[ 122 ]
Regular Expression Pitfalls, Optimization, and Performance Improvements
Do not use an unescaped hyphen in the middle of
a character class
We know that most of the special regex metacharacters are treated literally inside the
character class and we do not need to escape them inside the character class. However, if an
unescaped hyphen is used between two characters, then it makes it a range between the
previous and the next character of the hyphen.
As an illustrative example, let's consider this character class expression to match the four
basic math operators, +,-,*,/:
[*+-/]
The way it is written, this character class has a hyphen between the + and / characters. This
makes the character class match all the characters that fall between + (0x2A) and / (0x2F),
as per the ASCII table. Due to this reason, the preceding pattern will also match the comma
(,), that is, 0x2C, and DOT (.), that is, 0x2E, characters.
An unescaped hyphen can be safely used at the first or last positions in a character class to
avoid making a range. With that in mind, we can correct this character class by using any of
the following forms:
[-*+/]
[*+/-]
[*+\-/]
The mistake of calling matcher.goup() without a
prior call to matcher.find(), matcher.matches(), or
matcher.lookingAt()
This annoying mistake is found in many programs. As the heading says, these are cases
where programmers call any of the group() methods without a prior call to the find,
matches, or lookingAt methods. A matcher is created using the
pattern.matcher(String) method call, but we need to invoke one of these three
methods to perform a match operation.
[ 123 ]
Regular Expression Pitfalls, Optimization, and Performance Improvements
If we call matcher.group() without calling one of these three methods, then the code will
throw a java.lang.IllegalStateException exception, as the following code is doing:
package example.regex;
import java.util.regex.*;
public class MissingMethodCall
{
public static void main(String[] args)
{
final Pattern p = Pattern.compile("(\\d*)\\.?(\\d+)");
final String input = "123.75";
Matcher m = p.matcher(input);
System.out.printf("Number Value [%s], Decimal Value [%s]%n",
m.group(1), m.group(2));
}
}
Note that the code calls m.group(1) and m.group(2) right after it instantiates the matcher
object from a pattern instance. Once compiled and executed, this code will throw an
unwanted java.lang.IllegalStateException exception, indicating that the matcher
instance is not in the correct state to return group information.
In order to fix this code, insert a call to any one of the three methods (find, matches, or
lookingAt) to perform a match operation, as shown in the following code:
package example.regex;
import java.util.regex.*;
public class RightMethodCall
{
public static void main(String[] args)
{
final Pattern p = Pattern.compile("(\\d*)\\.?(\\d+)");
final String input = "123.75";
Matcher m = p.matcher(input);
if (m.find()) // or m.lookingAt() or m.matches()
{
System.out.printf("Integer Part [%s], Fractional Part [%s]%n",
m.group(1), m.group(2));
}
}
}
[ 124 ]
Regular Expression Pitfalls, Optimization, and Performance Improvements
Now, this code will produce the correct output, as follows:
Integer Part [123], Fractional Part [75]
Do not use regular expressions to parse XML /
HTML data
Using regular expressions to parse XML or HTML text is probably the most frequently
committed mistake. Although regular expressions are very useful, they have their
limitations and these limits are usually met when trying to use them for XML or HTML
parsing. HTML and XML are not regular languages by nature.
Luckily, there are other tools in Java for that purpose. The JDK contains readily available
classes to parse these formats and convert them to Document Object Model (DOM), or to
work with them on the fly using the SAX parsing model.
Do not use regular expressions for certain tasks when there are more specific parsers for the
purpose. The fact that there are other readily available tools gives you a hint that probably
regular expressions, in such a case, are not the best tools. After all, that is the reason why
the programmers of the XML and HTML parsers started their work.
How to test and benchmark your regular
expression performance
There are several free online regular expression tools available that tell you the number of
steps to match a regex pattern against a given set of inputs and also provide you valuable
debug info. You should also write your unit test cases. Here is a list of some online tools
that can be used:
Use jshell available with Java 9 to quickly test your regex
Use RegexMatchers, a utility class with static methods, to test your regex in JUnit;
check http://matchers.jcabi.com/regex-matchers.html
regex101.com
www.regexplanet.com
www.rexegg.com
www.debuggex.com
regexper.com
[ 125 ]
Regular Expression Pitfalls, Optimization, and Performance Improvements
regexbuddy.com (not free)
Use the Java/JUnit regex-tester library from
https://github.com/nickawatts/regex-tester
In addition to these tools, you can yourself write your own comprehensive unit test cases
using JUnit in your favorite Java IDE and check the timings and other matching
information.
Here is an example of JUnit code using the RegExMatchers library:
package example.regex;
import com.jcabi.matchers.RegexMatchers;
import org.hamcrest.MatcherAssert;
import org.junit.Test;
public class RegexTest
{
@Test
public void matchesDecimalNumberPattern()
{
MatcherAssert.assertThat(
"[+-]?\\d*\\.?\\d+",
RegexMatchers.matchesPattern("-145.78")
);
}
}
You are encouraged to use this library to build your own test cases and ensure that your
regex passes all the edge cases.
Catastrophic or exponential backtracking
Regular expression engines can be broadly categorized into two types:
1. The Non-deterministic Finite Automation (NFA) engine
2. The Deterministic Finite Automation (DFA) engine
The DFA engines do not evaluate each character more than once to find a match. On the
other hand, the NFA engines support backtracking, which means that each character in the
input can be evaluated multiple times by the regex engine. The Java regular expression
engine is an NFA engine.
[ 126 ]
Regular Expression Pitfalls, Optimization, and Performance Improvements
Regex engines backtrack or give back one position at a time to make various attempts to
match a given pattern when using the greedy quantifier or trying alternations. Similarly,
when using lazy quantifiers, the regex engine moves forward one position at a time to
attempt matching.
Regex engines usually take less time to find a positive match in the given input as
compared to returning a failure for a non-match. The NFA regex engines need to evaluate
all the possible permutations before returning a failure.
For example, in a regular expression that uses nested repetition quantifiers, the regex
engine backtracks excessively while matching a long input text. A catastrophic backtracking
problem usually occurs when the regex engine fails to make a negative match towards the
end of the string and after attempting far too many permutations.
As an example, check the following regex with nested quantifiers:
^(\w+)*$
Suppose we test it against an input text that does not have a word character in the end, such
as this input string:
abcdefghijklmno:
We know that due to the presence of a non-word character (colon) at the end of the input,
the match will fail. However, due to the presence of nested compound quantifiers, (\w+)*,
the regex engine backtracks excessively and makes a lot of attempts to match the input
before giving up.
Excessive backtracking may also be caused by two or more alternatives that are mutually
exclusive and can match the same string in the input. For example, having a regex pattern
like this one to match the text between the %% tags:
%%(.|\s)+%%
This regex may also cause catastrophic backtracking for failed cases, such as the following
input string with a missing closing tag:
%% something here abcd 123
The problem here is that the alternations in (.|\s) are not mutually exclusive, as dot can
also match the same whitespace that is matched by \s, except the newline character.
[ 127 ]
Regular Expression Pitfalls, Optimization, and Performance Improvements
Here is a complete program listing that demonstrates a dynamically building regex getting
slower with every iteration of the loop and eventually causing catastrophic backtracking:
package example.regex;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class CatastropicBacktracking
{
public static void main(String[] args)
{
final int MAX = 30;
for (int i = 1; i  0; j--)
{
sb1.append('a');
sb2.append("a?");
}
sb2.append(sb1);
final Pattern p = Pattern.compile("^" + sb2.toString() + "$");
Matcher m = p.matcher(sb1.toString());
long start = System.nanoTime();
m.matches();
long end = System.nanoTime();
System.out.printf("%s:: ( %sms ) :: Pattern ,
Input %n", i, (end - start)/1_000_000, sb2, sb1);
}
}
}
When you compile and run the preceding program and look at the generated output, you
will note an output as follows:
1:: ( 0ms ) :: Pattern , Input 
2:: ( 0ms ) :: Pattern , Input 
3:: ( 0ms ) :: Pattern , Input 
4:: ( 0ms ) :: Pattern , Input 
5:: ( 0ms ) :: Pattern , Input 
6:: ( 0ms ) :: Pattern , Input 
7:: ( 0ms ) :: Pattern , Input 
8:: ( 0ms ) :: Pattern , Input 
9:: ( 0ms ) :: Pattern , Input 
10:: ( 0ms ) :: Pattern , Input
11:: ( 0ms ) :: Pattern , Input
[ 128 ]
Regular Expression Pitfalls, Optimization, and Performance Improvements
12:: ( 0ms ) :: Pattern , Input
13:: ( 10ms ) :: Pattern , Input
14:: ( 1ms ) :: Pattern , Input
15:: ( 15ms ) :: Pattern ,
Input 
16:: ( 18ms ) :: Pattern
, Input
17:: ( 29ms ) :: Pattern
, Input
18:: ( 22ms ) :: Pattern
, Input
19:: ( 51ms ) :: Pattern
, Input
20:: ( 97ms ) :: Pattern
, Input
21:: ( 188ms ) :: Pattern
, Input