要为优化 CPU 性能配置程序，您需要了解：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    系统的拓扑（组件是如何连接的），
    :::
-   ::: para
    执行程序的核，以及
    :::
-   ::: para
    最接近的内存条位置。
    :::
:::
::: para
红帽企业版 Linux 6
附带大量可以帮助您找到这个信息并根据您的发现调整系统的工具。以下小节对概述了用于
CPU 性能调节有帮助的工具。
:::
::: section
::: titlepage
### [⁠]{#main-cpu.html#idm140329771426048}4.1.2.1. 使用 [**taskset**]{.application} 设置 CPU 亲和性 {.title}
:::
::: para
[**taskset**]{.application} 搜索并设定运行进程的 CPU 亲和性（根据进程
ID）。它还可用于启动给定 CPU 亲和性的进程，这样就可将指定的进程与指定的
CPU 或者一组 CPU 捆绑。但 [**taskset**]{.application}
不保证本地内存分配。如果您需要本地内存分配的额外性能利益，我们建议您使用
[**numactl**]{.application}，而不是
[**taskset**]{.application}。详情请查看 [第 4.1.2.2 节 "使用
[**numactl**]{.application} 控制 NUMA
策略"](#main-cpu.html#s-cpu-tuning-numactl){.xref}。
:::
::: para
CPU 亲和性使用位掩码表示。最低位对应第一个逻辑
CPU，且最高位对应最后一个逻辑 CPU。这些掩码通常是十六进制，因此
`0x00000001`{.literal} 代表处理器 0，`0x00000003`{.literal} 代表处理器 3
和 1。
:::
::: para
要设定运行进程的 CPU
亲和性，请执行以下命令，使用处理器或者您要捆绑到的处理器掩码替换
*mask*，使用您要更改亲和性的进程的进程 ID 替换 *pid*。
:::
``` screen
# taskset -p mask pid
```
::: para
要启动给定亲和性的进程，请运行以下命令，使用处理器或者您要捆绑的处理器的掩码替换
*mask*，使用程序、选项以及您要运行的程序参数替换 *program*。
:::
``` screen
# taskset mask -- program
```
::: para
与其将处理器指定为位码，您还可以使用 `-c`{.option}
选项提供逗号分开的独立处理器，或者一组处理器列表，类似如下：
:::
``` screen
# taskset -c 0,5,7-9 -- myprogram
```
::: para
有关 [**taskset**]{.application} 的详情请参考 man
page：`man taskset`{.literal}。
:::
:::
::: section
::: titlepage
### [⁠]{#main-cpu.html#s-cpu-tuning-numactl}4.1.2.2. 使用 [**numactl**]{.application} 控制 NUMA 策略 {.title}
:::
::: para
`numactl`{.command}
使用指定的调度或者内存放置策略运行进程。所选策略是为那个进程及其所有子进程设定。`numactl`{.command}
还可以为共享内存片段或者文件设定永久策略，并设定 CPU
亲和性和进程的内存亲和性。它使用 `/sys`{.filename}
文件系统决定系统拓扑。
:::
::: para
`/sys`{.filename} 文件系统包含有关 CPU、内存和外设是如何通过 NUMA
互联连接的。特别是 `/sys/devices/system/cpu`{.filename}
目录中包含有关系统的 CPU
是如何互相连接的信息。`/sys/devices/system/node`{.filename}
目录包含有关系统中 NUMA 节点以及那些节点间相对距离的信息。
:::
::: para
在 NUMA
系统中，处理器和内存条之间的距离越大，处理器访问那个内存条的速度就越慢。应将对性能敏感的程序配置为可以从最接近的内存条分配内存。
:::
::: para
还应将对性能敏感的程序配置为执行一组核，特别是在多线程程序的情况下。因为以及缓存一般都很小，如果在一个核中执行多个线程，每个线程可有可能逐出由之前线程访问的缓冲的数据。当操作系统尝试在这些线程间执行多任务，且线程继续逐出每个其他的缓存的数据时，则其执行时间的很大比例将用于缓存线替换。这个问题也称[*缓存贬值*]{.emphasis}。因此建议您将多线程的程序捆绑到节点而不是单一核，因为这样可以让线程在多个层级（第一、第二和最后以及缓存）共享缓存线，并尽量减小缓存填充操作的需要。但如果所有线程都访问同一缓存的数据，则将程序捆绑到单一核可能获得高性能。
:::
::: para
[**numactl**]{.application} 可让您将程序捆绑到特定核或者 NUMA
节点，同时要将内存分配到与那个程序关联的核或者一组核。numactl
提供的一些有用选项有：
:::
::: variablelist
[*`--show`*]{.term}
:   ::: para
    显示当前进程的 NUMA
    策略设置。这个参数不需要进一步的参数，且可按以下方式使用：`numactl --show`{.command}。
    :::
[*`--hardware`*]{.term}
:   ::: para
    显示系统中可用节点清单。
    :::
[*`--membind`*]{.term}
:   ::: para
    只从指定节点分配内存。当使用这个参数时，如果这些节点中的内存不足则分配会失败。这个参数的用法为
    `numactl --membind=nodes program`{.command}，其中 *nodes*
    是您要从中分配内存的节点列表，*program*
    是要从那个节点分配内存的程序。节点号可以采用用逗号分开的列表、范围或者两者的结合方式提供。有关详情请参考
    [**numactl**]{.application} man page： `man numactl`{.command}
    :::
[*`--cpunodebind`*]{.term}
:   ::: para
    只执行属于指定节点的 CPU 中的命令（及其子进程）。这个参数的用法为
    `numactl --cpunodebind=nodes program`{.command}，其中 *nodes*
    是指定程序（*program*）要捆绑的 CPU
    所属节点列表。节点号可以采用用逗号分开的列表、范围或者两者的结合方式提供。有关详情请参考
    [**numactl**]{.application} man page： `man numactl`{.command}
    :::
[*`--physcpubind`*]{.term}
:   ::: para
    只执行指定 CPU 中的命令（及其子进程）。这个参数的用法为
    `numactl --physcpubind=cpu program`{.command}，其中 *cpu*
    是用逗号分开的物理 CPU 号列表，这些数据在 `/proc/cpuinfo`{.filename}
    的 processor 字段中显示，*program* 是应只在哪些 CPU
    中执行的程序。还要将 CPU 指定为与当前 `cpuset`{.literal}
    关联。详情请参考 [**numactl**]{.application} man
    page：`man numactl`{.command}。
    :::
[*`--localalloc`*]{.term}
:   ::: para
    指定永远要在当前节点中分配的内存。
    :::
[*`--preferred`*]{.term}
:   ::: para
    在可能的情况下分配到指定节点中的内存。如果内存无法分配到指定的节点，则返回其他节点。这个选项只能有一个节点号，例如：`numactl --preferred=node`{.command}。详情请参考
    numactl man page：`man numactl`{.command}。
    :::
:::
::: para
[numactl]{.package} 软件包中包含的 [**libnuma**]{.application}
程序库为内核支持的 NUMA 策略提供编程界面。这比
[**numactl**]{.application} 程序可更详细地调节系统。有关详情请参考 man
page：`man numa(3)`{.literal}。
:::
:::
:::
::: section
::: titlepage
## [⁠]{#main-cpu.html#s-memory-numastat}4.1.3. numastat {.title}
:::
::: {.important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**重要**
:::
::: admonition
::: para
之前 [**numastat**]{.application} 工具是由 Andi Kleen 编写的 Perl
脚本。在红帽企业版 Linux 6.4 中对其进行了重大修改。
:::
::: para
虽然默认命令（`numastat`{.command}，没有任何选项或者参数）可保持与之前版本的严格兼容性，但请注意在这个命令中使用选项或者参数会极大更改输出结果内容及其格式。
:::
:::
:::
::: para
`numastat`{.command} 显示进程以及每个 NUMA
节点中操作系统的内存统计数据（比如分配成功数和失败数）。默认情况下，`numastat`{.command}
显示每个节点中的以下事件分类所占内存页数。
:::
::: para
低 `numa_miss`{.literal} 和 `numa_foreign`{.literal} 值表示最佳 CPU
性能。
:::
::: para
这个更新的 [**numastat**]{.application}
版本还显示是在系统间分配进程内存，还是使用 [**numactl**]{.application}
在具体的节点中集中使用。
:::
::: para
[**numastat**]{.application} 输出结果与每个 CPU [**top**]{.application}
输出结果对比确定进程线程在分配了内存的同一节点中运行。
:::
::: variablelist
**默认跟踪分类**
[numa_hit]{.term}
:   ::: para
    为这个节点成功的分配尝试数。
    :::
[numa_miss]{.term}
:   ::: para
    由于在目的节点中内存较低而尝试为这个节点分配到另一个节点的数目。每个
    `numa_miss`{.systemitem} 事件都在另一个节点中有对应的
    `numa_foreign`{.systemitem} 事件。
    :::
[numa_foreign]{.term}
:   ::: para
    最初要为这个节点但最后分配个另一个节点的分配数。每个 每个
    `numa_foreign`{.systemitem} 事件都在另一个节点中有对应的
    `numa_miss`{.systemitem} 事件。
    :::
[interleave_hit]{.term}
:   ::: para
    成功分配给这个节点的尝试交错策略数。
    :::
[local_node]{.term}
:   ::: para
    这个节点中的进程成功在这个节点中分配内存的次数。
    :::
[other_node]{.term}
:   ::: para
    这个节点中的进程成功在另一个节点中分配内存的次数。
    :::
:::
::: para
提供任意以下选项可将显示内存单位更改为
MB（四舍五入为两位十进制数），并将其他具体 [**numastat**]{.application}
行为更改如下。
:::
::: variablelist
[`-c`{.option}]{.term}
:   ::: para
    横向紧凑地显示信息表。这对有大量 NUMA
    节点的系统很有用，但栏宽度以及栏间空间有时无法预测。使用这个选项时，会将内存值四舍五入到最接近的
    MB 数。
    :::
[`-m`{.option}]{.term}
:   ::: para
    显示每个节点中系统范围内的内存使用信息，类似
    `/proc/meminfo`{.filename} 中的信息。
    :::
[`-n`{.option}]{.term}
:   ::: para
    显示与原始 `numastat`{.command} 命令类似的信息（numa_hit, numa_miss,
    numa_foreign, interleave_hit, local_node, and
    other_node），采用更新的格式，使用 MB 作为测量单位。
    :::
[`-p pattern`{.option}]{.term}
:   ::: para
    为指定的模式显示每个节点的内存信息。如果 *pattern*
    值由数字组成，[**numastat**]{.application}
    假设它是一个数字进程识别符。否则 [**numastat**]{.application}
    会为指定的模式搜索进程命令行。
    :::
    ::: para
    假设在 `-p`{.option}
    选项值后输入的命令行参数是过滤器的附加模式。附加模式要扩大而不是缩小过滤范围。
    :::
[`-s`{.option}]{.term}
:   ::: para
    以降序模式排列显示的数据以便让最大内存消耗者（根据
    `total`{.systemitem} 栏）列在首位。
    :::
    ::: para
    您也可以指定 *node*，并根据 *node*
    栏排列表格。当使用这个选项时，*node* 值后必须立即跟上一个
    `-s`{.option} 选项，如下所示：
    :::
    ``` screen
    numastat -s2
    ```
    ::: para
    不要在该选项及其数值之间有空格。
    :::
[`-v`{.option}]{.term}