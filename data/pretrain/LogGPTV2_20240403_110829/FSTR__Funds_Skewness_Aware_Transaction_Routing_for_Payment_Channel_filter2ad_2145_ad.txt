actions is called stabilization overhead. Analogous to
transaction overhead, we use the number of packets
generated during this process to represent stabilization
overhead. Although stabilization overhead does not affect
a single transaction, it is a non-negligible metric for long-
term transactions.
In this paper, we do not focus on improving concurrency,
instead, we adopt the same pessimistic concurrency model
which is used in SilentWhispers [14] and SpeedyMurmurs
[18]. An in-depth discussion on concurrency of the payment
networks can be found in [32].
D. Experiment Results
According to the design of evaluation scheme, we conduct
experimental simulation to obtain results and analyze them.
1) Evaluation of Funds Skewness: We select the success
ratio as the observation metric, and then collect the experi-
mental results and plot them in Fig. 3. The abscissa represents
the number of transaction periods, where we deﬁne every 100
transactions as a period, and the ordinate represents the success
ratio. Therefore, a certain point (x, y) in Fig. 3 represents
that for the transactions in period x, the ratio of the actual
success ratio to the success ratio of the Ford-Fulkerson max-
ﬂow algorithm is y. The black curve in Fig. 3 shows the
success ratio of the Ford-Fulkerson algorithm, which remains
100% as the baseline. The other three curves correspond to the
experimental results of three skewness calculation methods.
We can observe that the success ratio after adding the funds
skewness based path selection scheme has been signiﬁcantly
improved compared with Ford-Fulkerson, even 100% higher
at some point. It is not hard to ﬁnd that after integrating the
skewness factor into the algorithm, the routing will choose the
path that is most favorable for reducing the skewness, so as
to optimize the balanced state of payment channel network
continuously and route more transactions successfully. In the
early stage of transactions periods,
there is no signiﬁcant
improvement in the success ratio of three calculation methods
because of the large scale of our network. As for a large
network, the probability of overlapping paths between trans-
actions is small, especially in the early stages, so our funds
skewness based path selection scheme has not had an effect
on transactions. When the transaction period reaches 600, the
success ratio begin to show a signiﬁcant increase. During the
number of periods from 800 to 1300, there is a fast increase,
which is due to the low success ratio of the Ford-Fulkerson
algorithm in this interval. For example, if Ford-Fulkerson has
a 70% success ratio and our algorithm has an 80% success
ratio, our algorithm increases by 14.3%. And if the success
ratio of Ford-Fulkerson is 40% and the success ratio of our
algorithm is 80%, then the improvement is 100%. Therefore,
there is no obvious trend for the improved success ratio of
our experiment, resulting from the fact that the success ratio
of Ford-Fulkerson itself is variable. In addition, according to
Fig. 3, we can observe that three different skewness calculation
methods have different improvement effects in the success
ratio of transactions on the network, and the Method (ii)
outperforms the other two methods obviously, so we choose
the Method (ii) as part of FSTR.
2) Comparison to Other Algorithms: According to the
evaluation scheme, we conduct experiments for FSTR, Ford-
Fulkerson, and SpeedyMurmurs, and compare them in terms
of the success ratio,
the length of the path that execute
the transaction, and the number of packets generated for
transaction and stabilization.
First, we plot the results of the success ratio in Fig. 4. We
can observe that Ford-Fulkerson remains 100% as the baseline,
and FSTR has a higher success ratio than SpeedyMurmurs
at almost every period. In fact, the routing algorithm design
like SpeedyMurmurs determines its low success ratio to some
extent. Firstly, because of the interlaced complexity of the
network and the acyclic structure of the tree, it is impossible
to include all the paths of the network into the landmark-
based spanning trees. Secondly, only if every tree can ﬁnd
a feasible path, the transaction will be successful. However,
this is not easy to guarantee. Thirdly, SpeedyMurmurs updates
the tree structure periodically, but within a period, the ﬁxed
tree structure may lead to large funds skewness, which may
cause routing failures and consequently transactions failures.
Unlike SpeedyMurmurs, FSTR improves the probability of
ﬁnding a feasible path by learning the on-demand pathﬁnding
approach of on-demand routing. More importantly, the funds
skewness based path selection scheme of FSTR reduces the
funds skewness of the network and consequently increases the
probability of successful routing.
Fig. 5 shows the comparison of different algorithms in
the length of the transaction path. Ford-Fulkerson always has
a longer path length than FSTR and SpeedyMurmurs. We
think there are mainly the following two reasons. Firstly, the
goal of the Ford-Fulkerson max-ﬂow algorithm is to ﬁnd the
feasible path that support the largest transaction amount rather
than the shortest path. Secondly, we view that because Ford-
Fulkerson does not take into account the funds skewness of
the network, some transactions cannot continue to route on
the original path and have to ﬁnd a longer feasible path.
As for FSTR,
least one
hop compared to Ford-Fulkerson, thanks to #probe duration
and #accept duration in FSTR. They limit
the duration
of the routing probe and the time interval for the route
selection to accept REQ, respectively. At the same time,
for concurrent pathﬁnding process, they also limit the length
of the path, because when ignoring external factors such as
experimental environment, pathﬁnding time and path length
it reduces the path length by at
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:32:17 UTC from IEEE Xplore.  Restrictions apply. 
472
Fig. 3. Evaluation of Funds Skewness
Fig. 5. The Comparison of the Path Length
Fig. 4. The Comparison of Success Ratio
Fig. 6. The Comparison of the Number of Packets Generated for Transactions
are positively correlated. SpeedyMurmurs has a shorter path
length than Ford-Fulkerson and FSTR because of the spanning
tree, which limits the path length and reduces the possibility
of ﬁnding longer paths. In addition, in the early transactions,
each algorithm has a shorter path. This is because in this
stage, the topology of the network is relatively simple, and
many transactions can be completed within a single payment
channel. As new payment channels have been added,
the
network has grown in size, allowing many transactions to be
routed over multi-hop paths.
Fig. 6 shows the comparison of different algorithms in
terms of the number of packets generated for transactions.
As expected, Ford-Fulkerson exhibits prohibitive transaction
overhead due to its algorithmic complexity [26]. SpeedyMur-
murs performs the best on the number of packets generated
for transactions because it uses spanning trees to ﬁnd paths
quickly and thus avoid a lot of probing. It is worth noting,
however, among the three algorithms, only SpeedyMurmurs
incurs additional stabilization overhead which cannot be ig-
nored. And FSTR sits somewhere in between, since FSTR
combines the pathﬁnding process of on-demand routing and
the routing table of static routing to put its probes between
Ford-Fulkerson and SpeedyMurmurs. Speciﬁcally, the number
of packets generated for transaction of FSTR is twelve times
more than SpeedyMurmurs, but four hundred times less than
Ford-Fulkerson.
In order to compare the performance of different algorithms
more clearly, we summarize the average values of experi-
ment results in Table II. As the benchmark algorithm, Ford-
Fulkerson maintains a success ratio of 100%, but its average
path length and transaction overhead are signiﬁcantly worse
than the other two algorithms. SpeedyMurmurs performs well
in average path length and transaction overhead, but poorly in
success ratio, about 22%, only one third of the success ratio
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:32:17 UTC from IEEE Xplore.  Restrictions apply. 
473
COMPARISON OF DIFFERENT ALGORITHMS
TABLE II
Algorithm
Ford-Fulkerson
SpeedyMurmurs
FSTR
Success
Ratio
Path
Length
1
0.22
0.68
3.8
2.4
2.6
Transaction
Overhead
516820
103
1287
Stabilization
Overhead
0
2600
0
of FSTR. Moreover, only SpeedyMurmurs requires additional
stabilization overhead to maintain the structure of spanning
trees. Thus, combining transaction overhead and stabilization
overhead, we can see that FSTR has the least overhead which
is only half of that of SpeedyMurmurs and 0.25% of that
of Ford-Fulkerson. Besides, both FSTR and SpeedyMurmurs
have ideal average path length, so they have excellent per-
formance in transaction delay. In summary, FSTR performs
the best
in the overall performance in terms of success
ratio, transaction delay, transaction overhead, and stabilization
overhead.
VI. CONCLUSION AND FUTURE WORK
In this work, we design FSTR, a payment network rout-
ing algorithm that selects paths base so as to reduce funds
skewness and increase transaction success probability. As a
hybrid routing algorithm, FSTR combines routing table and
on-demand route searching, so that it can achieve both high
success ratio and low overhead. We conduct experiments using
the real-world dataset of Ripple. The experiment results show
that, FSTR outperforms existing routing algorithms, in terms
of success ratio, transaction delay, transaction overhead, and
stabilization overhead.
In the future, we hope to improve the success ratio of
the transactions to a higher level. We will consider breaking
large transactions into smaller transactions so as to increase
the transaction success probability. We will also look for a
better balance between on-demand routing and static routing
according to the performance characteristics of the payment
channel networks in different periods so as to further improve
system performance.
ACKNOWLEDGMENT
This research is partially supported by The National
Key Research and Development Program of China (No
2018YFB0203803), National Natural Science Foundation of
China (U1711263, U1801266, U1811461), and Guangdong
Natural Science Foundation (2018B030312002).
We thank our shepherd Prof. Yair Amir and the anonymous
reviewers for their comments that improved the paper.
REFERENCES
[1] S. Nakamoto et al., “Bitcoin: A peer-to-peer electronic cash system,”
2008.
[2] S. Underwood, “Blockchain beyond bitcoin,” Communications of the
ACM, vol. 59, no. 11, pp. 15–17, 2016.
[3] M. Crosby, P. Pattanayak, S. Verma, V. Kalyanaraman et al., “Blockchain
technology: Beyond bitcoin,” Applied Innovation, vol. 2, no. 6-10, p. 71,
2016.
[4] M. Swan, Blockchain: Blueprint for a new economy. ” O’Reilly Media,
Inc.”, 2015.
[5] Z. Zheng, S. Xie, H. Dai, X. Chen, and H. Wang, “An overview of
blockchain technology: Architecture, consensus, and future trends,” in
2017 IEEE International Congress on Big Data (BigData Congress).
IEEE, 2017, pp. 557–564.
[6] G. Wood et al., “Ethereum: A secure decentralised generalised trans-
action ledger,” Ethereum project yellow paper, vol. 151, no. 2014, pp.
1–32, 2014.
[7] F. Armknecht, G. O. Karame, A. Mandal, F. Youssef, and E. Zenner,
“Ripple: Overview and outlook,” in Trust and Trustworthy Computing -
8th International Conference, TRUST 2015, Heraklion, Greece, August
24-26, 2015, Proceedings, 2015, pp. 163–180. [Online]. Available:
https://doi.org/10.1007/978-3-319-22846-4 10
[8] “Stellar website.” https://www.stellar.org/.
[9] K. Croman, C. Decker, I. Eyal, A. E. Gencer, A. Juels, A. Kosba,
A. Miller, P. Saxena, E. Shi, E. G. Sirer et al., “On scaling decentralized
blockchains,” in International Conference on Financial Cryptography
and Data Security. Springer, 2016, pp. 106–125.
[10] J. Poon and T. Dryja, “The bitcoin lightning network: Scalable off-chain
instant payments,” 2016.
[11] S. Dziembowski, L. Eckey, S. Faust, and D. Malinowski, “Perun: Virtual
payment hubs over cryptocurrencies,” in 2019 IEEE Symposium on
Security and Privacy (SP).
IEEE, 2019, pp. 106–123.
[12] C. Decker and R. Wattenhofer, “A fast and scalable payment network
with bitcoin duplex micropayment channels,” in Symposium on Self-
Stabilizing Systems. Springer, 2015, pp. 3–18.
[13] “Raiden network.” accessed July 2017. http://raiden.network/.
[14] G. Malavolta, P. Moreno-Sanchez, A. Kate, and M. Maffei, “Silentwhis-
pers: Enforcing security and privacy in credit networks,” in Network and
Distributed System Security Symposium, 2017.
[15] S. Thomas and E. Schwartz, “A protocol for interledger payments,” URL
https://interledger.org/interledger.pdf, 2015.
[16] M. Herlihy, “Atomic cross-chain swaps,” in Proceedings of the 2018
ACM Symposium on Principles of Distributed Computing. ACM, 2018,
pp. 245–254.
[17] L. R. Ford and D. R. Fulkerson, “Maximal ﬂow through a network.”
Canadian Journal of Mathematics, vol. 8, pp. 243–248, 1956.
[18] S. Roos, P. Moreno-Sanchez, A. Kate, and I. Goldberg, “Settling
payments fast and private: Efﬁcient decentralized routing for path-based
transactions,” NDSS, 2018.
[19] P. Wang, H. Xu, X. Jin, and T. Wang, “Flash: efﬁcient dynamic
routing for offchain networks,” in Proceedings of the 15th International
Conference on Emerging Networking Experiments And Technologies,
2019, pp. 370–381.
[20] A. Post, V. Shah, and A. Mislove, “Bazaar: Strengthening user reputa-
tions in online marketplaces,” in Proceedings of NSDI, vol. 11, 2011, p.
183.
[21] B. Viswanath, M. Mondal, K. P. Gummadi, A. Mislove, and A. Post,
“Canal: Scaling social network-based sybil tolerance schemes,” in Pro-
ceedings of the 7th ACM european conference on Computer Systems.
ACM, 2012, pp. 309–322.
[22] P. Prihodko, S. Zhigulin, M. Sahno, A. Ostrovskiy, and O. Osuntokun,
“Flare: An approach to routing in lightning network,” White Paper, 2016.
[23] P. F. Tsuchiya, “The landmark hierarchy: a new hierarchy for routing
in very large networks,” in ACM SIGCOMM Computer Communication
Review, vol. 18, no. 4. ACM, 1988, pp. 35–42.
[24] C. H. Papadimitriou and D. Ratajczak, “On a conjecture related to
geometric routing,” Theoretical Computer Science, vol. 344, no. 1, pp.
3–14, 2005.
[25] S. Roos, M. Beck, and T. Strufe, “Anonymous addresses for efﬁcient
and resilient routing in f2f overlays,” in IEEE INFOCOM 2016-The 35th
Annual IEEE International Conference on Computer Communications.
IEEE, 2016, pp. 1–9.
[26] H. S. Wilf, Algorithms and complexity. AK Peters/CRC Press, 2002.
[27] V. Sivaraman, S. B. Venkatakrishnan, M. Alizadeh, G. Fanti, and
P. Viswanath, “Routing cryptocurrency with the spider network,” arXiv
preprint arXiv:1809.05088, 2018.
[28] M. Al-Fares, S. Radhakrishnan, B. Raghavan, N. Huang, A. Vahdat
et al., “Hedera: dynamic ﬂow scheduling for data center networks.” in
Nsdi, vol. 10, no. 2010, 2010.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:32:17 UTC from IEEE Xplore.  Restrictions apply. 
474
[29] A. R. Curtis, J. C. Mogul, J. Tourrilhes, P. Yalagandula, P. Sharma, and
S. Banerjee, “Devoﬂow: Scaling ﬂow management for high-performance
networks,” in ACM SIGCOMM Computer Communication Review,
vol. 41, no. 4. ACM, 2011, pp. 254–265.
[30] R. Khalil and A. Gervais, “Revive: Rebalancing off-blockchain payment
networks,” in Proceedings of the 2017 ACM SIGSAC Conference on
Computer and Communications Security. ACM, 2017, pp. 439–453.
[31] S. Roos, M. Beck, and T. Strufe, “Voute-virtual overlays using tree
embeddings,” arXiv preprint arXiv:1601.06119, 2016.
[32] G. Malavolta, P. Moreno-Sanchez, A. Kate, M. Maffei, and S. Ravi,
“Concurrency and privacy with payment-channel networks,” in Pro-
ceedings of
the 2017 ACM SIGSAC Conference on Computer and
Communications Security. ACM, 2017, pp. 455–471.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:32:17 UTC from IEEE Xplore.  Restrictions apply. 
475