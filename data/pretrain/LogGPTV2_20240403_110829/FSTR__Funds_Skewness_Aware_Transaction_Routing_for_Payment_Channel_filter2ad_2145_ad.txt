### Stabilization Overhead
Stabilization overhead, analogous to transaction overhead, is quantified by the number of packets generated during the stabilization process. While this overhead does not impact individual transactions, it becomes a significant metric for long-term transaction performance.

In this paper, we do not focus on improving concurrency. Instead, we adopt the same pessimistic concurrency model used in SilentWhispers [14] and SpeedyMurmurs [18]. For a detailed discussion on the concurrency of payment networks, refer to [32].

### D. Experimental Results

#### 1. Evaluation of Funds Skewness
We selected the success ratio as the primary observation metric and collected experimental results, which are plotted in Figure 3. The x-axis represents the number of transaction periods, with each period defined as 100 transactions. The y-axis represents the success ratio. A point (x, y) in Figure 3 indicates that for the transactions in period x, the actual success ratio relative to the Ford-Fulkerson max-flow algorithm's success ratio is y. The black curve in Figure 3 shows the success ratio of the Ford-Fulkerson algorithm, which remains at 100% as the baseline. The other three curves correspond to the experimental results of three different skewness calculation methods.

We observe that the success ratio after incorporating the funds skewness-based path selection scheme is significantly improved compared to the Ford-Fulkerson algorithm, even reaching 100% higher at some points. This improvement is due to the routing algorithm choosing paths that reduce skewness, thereby continuously optimizing the balanced state of the payment channel network and successfully routing more transactions. In the early stages of the transaction periods, there is no significant improvement in the success ratio for the three calculation methods because of the large scale of our network. For a large network, the probability of overlapping paths between transactions is low, especially in the initial stages, so the funds skewness-based path selection scheme has little effect. When the transaction period reaches 600, the success ratio begins to show a significant increase. From periods 800 to 1300, there is a rapid increase, attributed to the low success ratio of the Ford-Fulkerson algorithm in this interval. For example, if the Ford-Fulkerson algorithm has a 70% success ratio and our algorithm has an 80% success ratio, our algorithm increases by 14.3%. If the Ford-Fulkerson success ratio is 40% and ours is 80%, the improvement is 100%. Therefore, the improvement in the success ratio of our experiment is not consistent, reflecting the variability in the Ford-Fulkerson success ratio. Additionally, Figure 3 shows that the three different skewness calculation methods have varying effects on the success ratio, with Method (ii) outperforming the others. Thus, we choose Method (ii) as part of FSTR.

#### 2. Comparison with Other Algorithms
According to the evaluation scheme, we conducted experiments for FSTR, Ford-Fulkerson, and SpeedyMurmurs, comparing them based on the success ratio, the length of the transaction path, and the number of packets generated for transactions and stabilization.

First, we plot the results of the success ratio in Figure 4. We observe that Ford-Fulkerson remains at 100% as the baseline, while FSTR has a higher success ratio than SpeedyMurmurs in almost every period. The design of SpeedyMurmurs inherently leads to a lower success ratio due to several factors:
1. The interlaced complexity of the network and the acyclic structure of the tree make it impossible to include all network paths in the landmark-based spanning trees.
2. Success is guaranteed only if every tree can find a feasible path, which is not always easy to ensure.
3. SpeedyMurmurs updates the tree structure periodically, but within a period, the fixed tree structure may lead to high funds skewness, causing routing failures and transaction failures.

In contrast, FSTR improves the probability of finding a feasible path by adopting the on-demand pathfinding approach of on-demand routing. More importantly, the funds skewness-based path selection scheme of FSTR reduces the funds skewness of the network, increasing the probability of successful routing.

Figure 5 compares the different algorithms in terms of the length of the transaction path. Ford-Fulkerson consistently has a longer path length than FSTR and SpeedyMurmurs. This is due to two main reasons:
1. The goal of the Ford-Fulkerson max-flow algorithm is to find the feasible path that supports the largest transaction amount, not necessarily the shortest path.
2. Ford-Fulkerson does not account for the funds skewness of the network, leading to some transactions having to find longer feasible paths.

FSTR, thanks to its #probe duration and #accept duration, limits the duration of the routing probe and the time interval for route selection, respectively. This, combined with concurrent pathfinding, also limits the path length. SpeedyMurmurs, using spanning trees, has a shorter path length than Ford-Fulkerson and FSTR, reducing the likelihood of finding longer paths. In the early stages, each algorithm has a shorter path because the network topology is simpler, and many transactions can be completed within a single payment channel. As new payment channels are added, the network grows, allowing for multi-hop paths.

Figure 6 compares the number of packets generated for transactions. As expected, Ford-Fulkerson exhibits high transaction overhead due to its algorithmic complexity [26]. SpeedyMurmurs performs best in terms of the number of packets generated, as it uses spanning trees to quickly find paths and avoid extensive probing. However, SpeedyMurmurs incurs additional stabilization overhead. FSTR, combining the pathfinding process of on-demand routing and the routing table of static routing, generates fewer packets than Ford-Fulkerson but more than SpeedyMurmurs. Specifically, FSTR generates twelve times more packets than SpeedyMurmurs but four hundred times fewer than Ford-Fulkerson.

To clearly compare the performance of different algorithms, we summarize the average values of the experimental results in Table II. Ford-Fulkerson maintains a 100% success ratio but has significantly worse average path length and transaction overhead. SpeedyMurmurs performs well in average path length and transaction overhead but poorly in success ratio, achieving only about 22%, one-third of FSTR's success ratio. Only SpeedyMurmurs requires additional stabilization overhead to maintain the spanning tree structure. Combining transaction and stabilization overhead, FSTR has the least overhead, only half of SpeedyMurmurs and 0.25% of Ford-Fulkerson. Both FSTR and SpeedyMurmurs have ideal average path lengths, making them excellent in terms of transaction delay. Overall, FSTR performs the best in terms of success ratio, transaction delay, transaction overhead, and stabilization overhead.

### VI. Conclusion and Future Work
In this work, we designed FSTR, a payment network routing algorithm that selects paths to reduce funds skewness and increase transaction success probability. As a hybrid routing algorithm, FSTR combines routing tables and on-demand route searching, achieving both high success ratios and low overhead. Experiments using real-world Ripple data show that FSTR outperforms existing routing algorithms in terms of success ratio, transaction delay, transaction overhead, and stabilization overhead.

In future work, we aim to further improve the transaction success ratio. We will consider breaking large transactions into smaller ones to increase the success probability. We will also seek a better balance between on-demand and static routing based on the performance characteristics of payment channel networks in different periods to enhance system performance.

### Acknowledgment
This research is partially supported by The National Key Research and Development Program of China (No 2018YFB0203803), National Natural Science Foundation of China (U1711263, U1801266, U1811461), and Guangdong Natural Science Foundation (2018B030312002). We thank our shepherd Prof. Yair Amir and the anonymous reviewers for their comments that improved the paper.

### References
[References listed here as per the original text]

---

This optimized version aims to provide a clearer, more coherent, and professional presentation of the content.