---
title: Semantic Versioning
date: 20211215
author: Lyz
---
[Semantic Versioning](https://semver.org/) is a way to define your program's
version based on the type of changes you've introduced. It's defined as
a three-number string (separated with a period) in the format of
`MAJOR.MINOR.PATCH`.
Usually, it starts with 0.0.0. Then depending on the type of change you make to
the library, you increment one of these and set subsequent numbers to zero:
* `MAJOR` version if you make backward-incompatible changes.
* `MINOR` version if you add a new feature.
* `PATCH` version if you fix bugs.
The version number in this context is used as a contract between the library
developer and the systems pulling it in about how freely they can upgrade. For
example, if you wrote your web server against `Django 3`, you should be good to
go with all `Django 3` releases that are at least as new as your current one.
This allows you to express your Django dependency in the format of `Django >=
3.0.2,  0) MUST be incremented if only backwards
  compatible bug fixes are introduced. A bug fix is defined as an internal
  change that fixes incorrect behavior.
* Minor version Y (x.Y.z | x > 0) MUST be incremented if new, backwards
  compatible functionality is introduced to the public API. It MUST be
  incremented if any public API functionality is marked as deprecated. It MAY be
  incremented if substantial new functionality or improvements are introduced
  within the private code. It MAY include patch level changes. Patch version
  MUST be reset to 0 when minor version is incremented.
* Major version X (X.y.z | X > 0) MUST be incremented if any backwards
  incompatible changes are introduced to the public API. It MAY include minor
  and patch level changes. Patch and minor version MUST be reset to 0 when major
  version is incremented.
!!! note "Encoding this information in the version is just an extremely lossy, but very
fast to parse and interpret, which may lead into
[issues](#semantic-versioning-system-problems.)
By using this format whenever you rebuild your application, youâ€™ll automatically
pull in any new feature/bugfix/security releases of Django, enabling you to use
the latest and best version that still [in
theory](#semantic-versioning-system-problems.) guarantees to works with your
project.
This is great because:
* You enable automatic, compatible security fixes.
* It automatically pulls in bug fixes on the library side.
* Your application will keep building and working in the future as it did today
    because the significant version pin protects you from pulling in versions
    whose API would not match.
# [Commit message guidelines](https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines)
If you like the idea behind Semantic Versioning, it makes sense to follow the
Angular commit convention to automate the [changelog maintenance](changelog.md)
and the program version bumping.
Each commit message consists of a header, a body and a footer. The header has
a defined format that includes a type, a scope and a subject:
```
(): 
```
The *header* is mandatory and the *scope* of the header is optional.
Any line of the commit message cannot be longer 100 characters.
The *footer* could contain a [closing reference to an
issue](https://help.github.com/articles/closing-issues-via-commit-messages/).
Samples:
```
docs(changelog): update changelog to beta.5
fix(release): need to depend on latest rxjs and zone.js
The version in our package.json gets copied to the one we publish, and users need the latest of these.
docs(router): fix typo 'containa' to 'contains' (#36764)
Closes #36763
PR Close #36764
```
## Change types
Must be one of the following:
* `feat`: A new feature.
* `fix`: A bug fix.
* `test`: Adding missing tests or correcting existing tests.
* `docs`: Documentation changes.
* `chore`: A package maintenance change such as updating the requirements.
* `bump`: A commit to mark the increase of the version number.
* `style`: Changes that do not affect the meaning of the code (white-space,
    formatting, missing semi-colons, etc).
* `ci`: Changes to our CI configuration files and scripts.
* `perf`: A code change that improves performance.
* `refactor`: A code change that neither fixes a bug nor adds a feature.
* `build`: Changes that affect the build system or external dependencies.
## Subject
The subject contains a succinct description of the change:
* Use the imperative, present tense: "change" not "changed" nor "changes".
* Don't capitalize the first letter.
* No dot (.) at the end.
## Body
Same as in the subject, use the imperative present tense. The body should
include the motivation for the change and contrast this with previous behavior.
## Footer
The footer should contain any information about Breaking Changes and is also the
place to reference issues that this commit Closes.
Breaking Changes should start with the word `BREAKING CHANGE:` with a space or
two newlines. The rest of the commit message is then used for this.
## Revert
If the commit reverts a previous commit, it should begin with `revert:` , followed
by the header of the reverted commit. In the body it should say: `This reverts
commit .`, where the hash is the SHA of the commit to revert.
## Helpers
### Use tool to bump your program version
You can use the [commitizen](https://github.com/commitizen-tools/commitizen)
tool to:
* Automatically detect which type of change you're introducing and decide
    which should be the next version number.
* [Update the changelog](changelog.md)
By running `cz bump --changelog --no-verify`.
The `--no-verify` part is required [if you use pre-commit
hooks](https://github.com/commitizen-tools/commitizen/issues/164).
Whenever you want to release `1.0.0`, use `cz bump --changelog --no-verify
--increment MAJOR`. If you are on a version `0.X.Y`, and you introduced
a breaking change but don't want to upgrade to `1.0.0`, use the `--increment
MINOR` flag.
### Use tool to create the commit messages
To get used to make correct commit messages, you can use the
[commitizen](https://commitizen-tools.github.io/commitizen/) tool, that guides
you through the steps of making a good commit message. Once you're used to the
system though, it makes more sense to ditch the tool and write the messages
yourself.
In Vim, if you're using Vim fugitive you can [change the
configuration](https://vi.stackexchange.com/questions/3670/how-to-enter-insert-mode-when-entering-neovim-terminal-pane)
to:
```vimrc
nnoremap gc :terminal cz c
nnoremap gr :terminal cz c --retry
" Open terminal mode in insert mode
if has('nvim')
    autocmd TermOpen term://* startinsert
endif
autocmd BufLeave term://* stopinsert
```
If some pre-commit hook fails, make the changes and then use `gr` to
repeat the same commit message.
### Pre-commit
To ensure that your project follows these guidelines, add the following
to your [pre-commit configuration](ci.md):
!!! note "File: .pre-commit-config.yaml"
    ```yaml
    - repo: https://github.com/commitizen-tools/commitizen
      rev: master
      hooks:
        - id: commitizen
          stages: [commit-msg]
    ```
# When to do a major release
Following the Semantic Versioning idea of a major update is problematic because:
* You can quickly get into the [high version number](#high-version-numbers) problem.
* The fact that [any change may break the users