proves or disproves every assertion (which we also call
query)
in the contract. We assume that safety proper-
ties to verify are expressed as the assert statements in
the program. In our application to arithmetic safety, as-
sertions can be automatically generated; for example, for
each addition a+b and multiplication a*b, we gener-
ate assert(a+b>=a) and assert(a==0||(a!=0 &&
(a*b)/a==b)), respectively.
Notation: We use the lambda notation for functions. For
example, λx.x + 1 is the function that takes x and returns
x + 1. We write FOL for the set of ﬁrst-order formulas in the
combined theory of ﬁxed-sized bitvectors, arrays with exten-
sionality, and equality with uninterpreted functions. When e
is an expression or a formula, we write e[y/x] for the new
expression where x gets replaced by y. We write FV(e) for
the set of free variables in e.
A. Algorithm Overview
VERISMART departs signiﬁcantly from existing analyzers
for smart contracts [7], [8], [9], [10], [11], [12], [18], [19],
[20], [21] in that VERISMART applies a CEGIS-style veriﬁ-
cation algorithm that iteratively searches for hidden invariants
that are required for verifying safety properties.
1
2
3
4
5
6
7
8
9
contract RunningExample {
uint public n;
constructor () { n = 1;}
function f () public {
assert (n + 1 >= n);
n = n + 1;
if (n >= 100) { n = 1; }
}
}
Fig. 4. Example contract.
candidate invariants
Generator
Validator
Solidity 
Program
unproven queries
Solver
Veriﬁcation 
Result
Fig. 5. Algorithm overview.
(cid:4)
(cid:4)
Invariants of Smart Contracts: We consider two kinds of
invariants for smart contracts: transaction and loop invariants.
We say a formula is a transaction invariant if it is valid at
the end of the constructor and the validity is preserved by
the execution of public functions that can be invoked by
transactions. Loop invariants are more standard; a formula
is an invariant of a loop if the formula is valid at the entry
of the loop and is preserved by the loop body. Transaction
invariant is global and thus it is a single formula, whereas
loop invariants are local and must be separately given for each
loop in the program. Thus, our algorithm aims to discover a
pair (ψ, μ), where ψ ∈ FOL is a transaction invariant and
μ ∈ Label → FOL is a mapping from loop labels to formulas.
for pointwise conjoining operation between two
We write
μ2 = λl ∈ Label.μ1(l)∧μ2(l).
mappings μ1 and μ2, i.e., μ1
Example 1: Consider the contract in Figure 4. The program
has one global variable n, which is initialized to 1 in the
constructor. The function f can be invoked from the outside
of the contract; it increases the value of n by 1 every time
it is called, but resets it to 1 whenever n is 100. Note that
n ≤ 100 is a transaction invariant: 1) it holds at the end of
the constructor, and 2) supposing that n ≤ 100 holds before
entering f, we can prove that it also holds when exiting the
function. Our algorithm automatically discovers the invariant
n ≤ 100 and succeeds to prove that the assertion at line 5 is
safe; upon entering f, n ≤ 100 holds and n ≤ 100 → n + 1 ≥
n is valid in the theory of unsigned 256 bitvector arithmetic.
Algorithm Structure: Figure 5 describes the overall struc-
ture of our algorithm. The input is a smart contract written in
Solidity, and the output is a veriﬁcation result that indicates
whether each query (i.e., assertion) in the program is proven
safe or not. The algorithm consists of two components, a
validator and a generator, where the validator has a solver
as a subcomponent.
The algorithm aims to ﬁnd contract-speciﬁc invariants that
are inductive and strong enough to prove all provable queries
in the given contract. The role of the generator is to produce
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:39:38 UTC from IEEE Xplore.  Restrictions apply. 
1681
candidate invariants that help the validator to prove as many
queries as possible. Given a candidate invariant, the validator
checks whether the invariant is useful for proving the queries.
If it fails to prove the queries, it provides the set of unproven
queries as feedback to the generator. The generator uses this
feedback to reﬁne the current invariant and generate new ones.
This way, the validator and generator form an iterative loop
that continuously reﬁnes the analysis results until the program
is proven to be safe or the given time budget is exhausted.
Upon termination, all unproven queries are reported to users
as potential safety violations.
Algorithm 1 shows our veriﬁcation algorithm. It uses a
workset (W ) to maintain candidate invariants, which initially
contains the trivial invariant (true, λl.true) (line 1): the trans-
action invariant ψ is true and the loop invariant mapping μ
maps every label (l) to true. The repeat-until loop at lines
2–11 correspond to the feedback loop in Figure 5. At lines 3
and 4, the algorithm chooses and removes a candidate invariant
(ψ, μ) from the workset. We choose a candidate invariant that
is the smallest in size. At line 5, we run the validator to check
whether the current candidate is inductive and strong enough
to prove queries, which returns a pair of the boolean variable
inductive, indicating whether the current candidate invariant
is inductive or not, and the set U of unproven queries. If U
is empty (line 6), the algorithm terminates and the contract is
completely proven to be safe. Otherwise (line 8), we generate
a new set of candidate invariants and add them to the workset.
Finally, when the current candidate fails to prove some queries
but is known to be at least inductive (line 9), we strengthen the
remaining candidate invariants using it (line 10), because we
can potentially prove more queries with stronger invariants. By
doing so, we can ﬁnd useful invariants more efﬁciently. The
algorithm iterates until it times out or the workset becomes
empty. We assume that the algorithm implicitly maintains
previously generated invariants to avoid redundant trials.
Technical Contributions: Although the overall algorithm
follows the general framework of CEGIS [13], [14], [15],
we provide an effective, domain-speciﬁc instantiation of the
framework in the context of smart contract analysis. Now
we describe the details of this instantiation: validator (III-B),
generator (III-C), and solver (III-D).
B. Validator
The goal of the validator is to check whether the current
candidate invariant (ψ, μ) is inductive and strong enough to
prove safety of the queries. The input to the validator is an
annotated program (c, ψ, μ), i.e., smart contract c annotated
with transaction (ψ) and loop (μ) invariants. The validator
proceeds in three steps.
Basic Path Construction: Given an annotated program
(c, ψ, μ), we ﬁrst break down the program into a ﬁnite set
of basic paths [22]. A basic path is a sequence of atomic
statements that begins at the entry of a function or a loop, and
ends at the exit of a function or the entry of a loop, without
passing through other loop entries. We represent a basic path p
by the ﬁve components: ((l1, φ1), a1; . . . ; an, (l2, φ2)), where
Algorithm 1 Our Veriﬁcation Algorithm
Input: A smart contract c to verify
Output: Veriﬁcation success or potential safety violations
1: W ← {(true, λl.true)}
2: repeat
3:
4:
5:
6:
7:
8:
9:
10:
Choose a candidate invariant (ψ, μ) from W
W ← W \ {(ψ, μ)}
(inductive, U ) ← VALIDATOR(c, ψ, μ)
if U = ∅ then veriﬁcation succeeds
else
W ← W ∪ GENERATOR(U, ψ, μ)
if inductive then
11: until W = ∅ or timeout
12: return potential safety violations
W ← {(ψ(cid:3) ∧ ψ, μ(cid:3) (cid:4)
μ) | (ψ(cid:3), μ(cid:3)) ∈ W}
l1 is the label of the starting point (i.e., function or loop
entry) of the path, φ1 ∈ FOL is the invariant annotated at
l1, a1, . . . , an are atomic statements, l2 is the label of the
end point (i.e., function exit or loop entry) of the path, and
φ2 ∈ FOL is the invariant annotated at l2. The basic path
satisﬁes the following properties:
1) If l1 is a function entry, φ1 = ψ (i.e.,
transaction
invariant). An exception: φ1 = true if l1 is entry of
constructor. If l2 is a function exit, φ2 = ψ.
2) Otherwise, i.e., when l1 and l2 are labels of loops, φ1 =
μ(l1) and φ2 = μ(l2) (i.e., considering loop invariants).
Note that our construction of basic paths is exhaustive as we
consider all paths of the program by summarizing the effects
of transactions and loops with their invariants. The basic paths
can be computed by traversing control ﬂows of the program.
Example 2: Consider the contract in Figure 4 annotated with
the transaction invariant ψ = n ≤ 100. We do not consider
loop invariants as the contract does not have any loops. The
annotated program is converted into three basic paths:
p1 : ((entry 0, true), n := 1, (exit 0, n ≤ 100))
p2 : ((entry f , n ≤ 100), a1, (exit f , n ≤ 100))
p3 : ((entry f , n ≤ 100), a2, (exit f , n ≤ 100))
where a1 = assert(n + 1 ≥ n); n := n + 1; assume(n ≥
100); n := 1 and a2 = assert(n + 1 ≥ n); n := n +
1; assume(n  e are rarely used in practice. Finally, we deﬁne
REFINET and REFINEL using (cid:3)X,C as follows:
REFINEL(ψ, a) = {ψ(cid:3) | ψ (cid:3)vars(a),const(a) ψ(cid:3)}
REFINET(φ, a) = {φ(cid:3) | φ (cid:3)globals,cnstr∪const(a) φ(cid:3)}
where vars(a) and const(a) are the variables and constants
appearing in the atomic statements a, respectively. globals and
cnstr represent the set of global variables and constants in the
constructor function, respectively. We instantiate the sets X
and C differently because transaction invariants often involve
global state variables and constants of the entire contract while
loop invariants involve local and global variables and constants
that appear in the enclosing function. In both cases, we reduce
the search space by focusing on local variables and constants
to those of the current basic path (a).
D. Solver
The last component is the solver that is used by the val-
idator to discharge the veriﬁcation conditions. The solver
ultimately uses an off-the-shelf SMT solver (we use Z3 [23])
but performs domain-speciﬁc preprocessing and optimization
steps before using it, which we found important to make
our approach practical for real-world contracts. For a basic
path p, we assume its veriﬁcation condition F (either the
inductiveness condition, i.e., F = GENVC(p).1, or the safety
condition of a query, i.e., F ∈ GENVC(p).2) is given.
Preprocessing: Since F may contain symbols (i.e., sum)
that conventional SMT solvers cannot understand, we must
preprocess F so that all such uninterpretable symbols get
replaced by equi-satisﬁable formulas in conventional theories.
For example, let F contains sum as follows:
F = ··· ∧ sum(x) = n ∧ x[i] = v1 ∧ x[j] = v2 ∧ ···
where we elide portions of F that are irrelevant to the mapping
variable x (i.e., x is only accessed with i and j in the given
basic path p). Our idea to translate F into a formula without
sum is to instantiate the symbol with respect to the context
where F is evaluated. In this example, we can translate the
formula F into the following:
··· ∧ F1 ∧ F2 ∧ x[i] = v1 ∧ x[j] = v2 ∧ ···
where F1 = (i (cid:3)= j → x[i] + x[j] + Rx = n)∧ (i = j → x[i] +
Rx = n) asserts that the sum of distinct elements of x equals
n. Because x is used in the given basic path with two index
variables i and j, we consider two cases: i = j and i (cid:3)= j.
When i (cid:3)= j, we replace sum(x) = n by x[i] + x[j] + Rx = n,
where Rx is a fresh variable denoting the sum of x[k] for all
k ∈ domain(x) \ {i, j}, where domain(x) is the domain of
the mapping. The other case (i = j) is handled similarly. F2
is the additional assertion that guarantees the validity of F1:
F2 = (i (cid:3)= j → x[i] + x[j] ≥ x[j] ∧ x[i] + x[j] + Rx ≥
Rx) ∧ (i = j → x[i] + Rx ≥ Rx) ∧ Bx, where Bx is a
fresh propositional variable, meaning that the summations in
Rx do not overﬂow. The general method for our preprocessing
is given in Appendix A.
Note that the veriﬁcation condition after preprocessing can
be checked by a conventional SMT solver. However, we found
that the resulting formulas are often too complex for modern
SMT solvers to handle efﬁciently, so we apply the following
optimization techniques.
Efﬁcient
Invalidity Checking: Most
importantly, we
quickly decide invalidity of formulas without invoking SMT
solvers. We observed that even state-of-the-art SMT solvers
can be extremely inefﬁcient when our veriﬁcation conditions
are invalid. For example, consider the following formula:
true → (a−b = 0)∨(a−b (cid:3)= 0∧((a−b)∗255)/(a−b) = 255).
It is easy to see that the formula is invalid in the theory of
256-bit arithmetic (e.g., it does not hold when a = 2255 and
b = 0). Unfortunately, however, the latest version of Z3 [23]
(ver 4.8.4) and CVC4 [24] (ver 1.7) takes more than 3 minutes
to conclude the formula is invalid.
To mitigate this problem, we designed a simple decision
procedure based on the free variables of formulas; given a
VC of the form p → q, we conclude that it is invalid if
FV(p) (cid:3)⊇ FV(q). The intuition is that p must include more vari-
ables than q, as a necessary condition to be stronger than q. In
the above example, we conclude the formula is invalid because
FV(true) (cid:3)⊇ FV(a = 0 ∨ (a (cid:3)= 0 ∧ (a ∗ b)/a = b)) = {a, b}.
In practice, we found that this simple technique improves
the scalability of the veriﬁcation algorithm signiﬁcantly as it
avoids expensive calls to SMT solvers.