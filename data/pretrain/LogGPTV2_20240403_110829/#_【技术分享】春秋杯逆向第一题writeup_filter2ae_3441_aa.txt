# 【技术分享】春秋杯逆向第一题writeup
|
##### 译文声明
本文是翻译文章，文章来源：weiyiling.cn
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
最近被春秋杯逆向题坑了两天，记录一下解题过程。
程序一运行，就弹个控制台窗口，啥也没有，拖进IDA看了才知道，是在等待用户输入验证的key：
程序的主框架很简单，就是一运行后初始化一些数据，等待用户输入验证的key，之后对输入数据进行验证，验证通过就输出“success”，否则输出“fail”：
直接进入验证函数，看到对一个初始设定的64位大数值"0x1BEBAAB51"不断进行扣减操作，直到满足指定的条件（结果小于等于0），而输入的key用来影响减法操作。从循环的次数以及最后的一个判断条件可以推测，key的长度应该是169（=1014/6)：
从循环扣减的算法进行分析，循环一共进行了1014次，每次从一个大数组里取到一个64位数值进行扣减。这个大数组是验证key之前就初始化好的“随机”二维矩阵，矩阵的大小是1014*1014，每个元素为一个8字节的64位数值。而每次循环对数值的选取，受函数“getstep”的影响。该函数的参数是输入字符（每循环6次使用一个输入的字符）和当前循环的次数，返回结果为0或者1，意为判断是否向前递进，因为结果被v5进行累加，而v5则直接影响二维数据矩阵每次在该行上对数值的坐标选取。依此分析，大致的选取方法如下，最终能够选取到的数在矩阵的下三角部分：
到这里大概明白验证算法选数的过程，结合下图题目给出的提示，很容易想到我们的解题思路应该是要从二维矩阵里找出一条选数路径，使得路径上的数加起来最大，而取值的范围受上述图的限制，不能超越下三角部分。
先来看看这个二维矩阵具体长什么样吧，在IDA里按x对大数组“big_array0”找交叉引用，发现在一个初始化函数里进行了赋值：
该初始化算法是一个双重循环，但仔细观察第二重循环的条件“j
0x1BEBAAB51），二是这个程序使用该函数生成的数值是固定下来的，即无论程序运行几次，生成的二维矩阵是固定的同一个，里面的值不会发生变化，这样我们就可以专心去从这个矩阵里找最大和路径了。
回到如何从二维矩阵里找出最大和路径的问题上，搜索一下“二维矩阵 路径
最大值”这些关键字，确定了这个问题是个坑爹的动态规划题（对于我这种大学算法没认真学的选手比较坑），没办法，只好现学现卖，发现动态规划就是一个数学迭代的思想，比如想求最大值MAX(n)，就假设一个次最大值MAX(n-1)，加上最后一个数NUM(n)就可得到最大值，这样不断的逆向推导可以到达第一个数MAX(1)=NUM(1)。按照这个思路，参考一下网上的代码，根据题目要求的路径走向，迭代计算每个网格元素能够取到的最大和（s[i-0][j-0]
= a[i-0][j-0] + max(s[i-1][j-0],
s[i-1][j-1])，a为二维矩阵，s为对应的最大和点阵，i、j代表行和列），也“比较容易”编程得到求出最大值的路径，注意这里的动态规划有一些限制条件，即“i>=j”，保证只计算二维网格的下三角部分数据：
    //输入二维矩阵的大数组和二维矩阵的边长，打印选择路径并返回路径节点和最大值__int64 get_max_sum(unsigned char * buf, int len) {
        __int64 *num = (__int64 *)buf;
        __int64 *r_sum = new __int64[len * len];
        memcpy(r_sum, num, len * len * 8);
        for (int i=0; i= 0)
                {
                    val1 = r_sum[(i - 1) * len + j]; //上方节点，当前节点来源之一
                    if (j - 1 >= 0)
                    {
                        val2 = r_sum[(i - 1) * len + j - 1]; //左上方节点，当前节点来源之一
                    }
                }
                if (i > j)//限制条件，下三角数据
                {
                    r_sum[i * len + j] += (val1 > val2 ? val1 : val2); 
                }
                else if (i == j)//边界数据
                {
                    r_sum[i * len + j] += r_sum[(i - 1) * len + j - 1]; 
                }
                else
                {
                    //
                }         }
        } 
        __int64 max_sum = 0;
        __int64 pos_max = 0;
        for (int i=0; i0; )