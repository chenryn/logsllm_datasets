.... u
~t
QJ=
= ~r'-l
~
.=t
= ~8
"0
:I
't:l
QJ
~ ~~ ~= ~U z
vi
12
vi
8
vi
U:I
~~
=
"0
=
~~ ~~
~:I =e
QJQ.
:I t:
Q. ....
~~
~8
12
8
strates that TAPe can be applied to very different file sys(cid:173)
tems. One advantage with ext3 is that we have verified our
re u t by rea in ext3 ource co e.
5.6. Discussion
U in TAPC to characterize
y tern behavior yie
0
for han in corruption. If NTFS an ext3
on, they can comp ete y recover from over
many e
fo ow the e e
55% an 40% corruption cmario re pective y We i cu
te re ate to TAPC an corruption han in .
enera i
epen
ke ihoo
Fir t, TAPC oe not con i er the ke ihoo of ifferent
va ue u e for corruption. Thi
on the
curce of corruption. For examp e,ifthe corruption va ue
are arbitrary, more than 99% of the va ue wi be out-of(cid:173)
bounds, while corruption due to bit flips will imply that the
corrupt va ue i "c 0 er" to the correct va ue. Whi e our
ke ihoo -a no tc approach oe not provi e probabi itie
for file system failures due to corruption, it provides inter(cid:173)
esting insights into how a file system handles corruption.
Secon ,a que tbn that ari e from the re uti whether
anity check are the ri ht technique to u e, e (cid:173)
type an
invo \e . Whi eit i
pecia ywhen there are many pitfa
true that the u e of check urn ( ke in ZFS [8]) mi ht
i(cid:173)
nificantly improve corruption handling, it does not subsume
the protection offere by type an
anity check . For exam(cid:173)
ple, checksums cannot protect against file system bugs that
p ace the wron pointer va uean check urn it a we
.
Thir , it i non-trivia to a
check urn an other pro(cid:173)
tection to a file system without changing the on-disk format.
Type-aware pointer corruption he p i entify potentia
an(cid:173)
ity check that can be u e without format chan e .
6. Related Work
Software fault injection: A u ftu e of software fau 1(cid:173)
injection techniques an fra e works have been eve <pe
over the years [6, 9, 15, 16, 17,27]. The FTAPE [27] fra e(cid:173)
ost re ae to our work - it consists of a work oa
work is
generator an a evice- river- eve
isk-fau tinjector. The
fau t-injection fra e works an techniques have been e (cid:173)
p oye in various stu ies of rea syste s. For exa p e, Gu
et a . [14] exa in e the behavior of the Linux keme when
errors are injecte into the instruction strea .
0
static-ana ysis an
File system studies: Recent research efforts [29, 30]
e -chect«ng techniques
have use
instead of fault injection to extract bugs in file-system code.
to previous fau t-injection-base
Our stu y is a so re ae
fai ure-behavior ana )Bes [2, 18] fro
our research group.
These ana yses use type infor ation for fau t injection in
or er to un erstan the behavior of syste s for
isk errors
isk b oc~, whi ethis paper ex(cid:173)
an ran 0
a ines the effects of corrupt pointers an ana yzes NTFS
in detail; indeed, we obtain new insights into file-system
behavior. Type-aware pointer corruption an so e initia
NTFS experi ents are iscusse in our position paper [4].
y-corrupte
Pointer
Block bitmap
Inode bitmap
Inode table
Journal superblock
Root directory
Directory data
File data
Total
Total recoverable
1
5
13
13
11
11
1
55
19
2
3
13
38
20
2
3
13
38
20
0
0
0
0
0
0
vi
Table 7. Ext3 System Behavior Summary. The ta(cid:173)
ble summarizes observed ext3 behavior on corruption. The
columns are the same as in Table 6.
i k
cck ein pointe to after corruption), we 0 -
(the
erve that the y te
cra h happen whenever the a oca(cid:173)
tion status bits corresponding to the system files $Quota,
$0 jI
an $Repar e happen to e zero (in tea of one),
re u tin in their MFT entrie
ettin re-u e (an hence
corrupte ). Thu ,a particu ar erie of operation (mount,
CreateFile) can be performed on specifically corrupted
file system images to cause crashes. Such malicious disk
become a ecurity threat with the u e of
ima e [29] cou
portable flash drives and disk image downloads.
epen on the actua
In certain pointer corruption cmario, the u er-vi ib e
ata pre ent in variou c u (cid:173)
re u t
ter . Corruptin MFTBi tmap with the location of a file
ata c u ter(Fi eData) i an examp e. Depen in on the
exact values of bits in the file data cluster, there may be a
y tern cra h, or ata mi ht be 0 t
5.5. Ext3 Results
.
We corrupt 7 primary ext3 pointer with 14 va ue each,
cho enin imi ar fa hion to NTFS. Tab e7 pre mt a urn(cid:173)
mary of ext3 re u t
• Un ke NTFS, ext3 re e more on ani1y check than
on type checks. For example, it verifies that bitmap and
ino e tab e pointer point within the b cck roup. A Q
when allocating inodes ext3 verifies that the inode bitmap
"re erve " ino e a a ocate ,un ke NTFS'
ha marke
it of MFTBi tmap. However, ack of type
(mi JIan
irectory ata.
check cau e ext3 to u e the uperb ocka
utre that the cuter
• Like NTFS, ext3 typica y a
pointe to (rather than the pointer) i corrupt.
• Even thou h ext3 rep icate the
roup e crirtor ,it
never u e the e rep ica even when a pointer in the primary
copy i
etecte a corrupt.
• The typica reaction on etectin corruption i
to report
an error and remount the file system as read-only. Ext3 does
not recover even in one corruption cenario.
In urnmary, our ana y i ofext3 how that it i no better
0 emon-
than NTFS in pointer protection. Our ana y i a
1-4244-2398-9/08/$20.00 ©2008 IEEE
510
DSN 2008: Bairavasundaram et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:08:01 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
Pointer integrity: Research efforts have ooke at pro(cid:173)
pointer errors. Particu (f y re ae are
tecting syste s fro
research on ata-structure re un ancy [25] an
ata protec(cid:173)
tion in high y-avai ab e;yste s using checksu s [5]. Vari(cid:173)
ous file systems have been built to protect data and metadata
using checksu s [8, 18, 23]. It wou
be interesting to use
TAPC on Sun ZFS [8] to un erstan the tricky etai s of
using checksu
ing . Another re ae effort is on type-safe
disks [20] which ensure that file systems do not use corrupt
on- isk pointers to access ata.
7. Conclusion
Fi e y tern re yon on-di k pointer to acce
data. A
file systems employ different and newer techniques to pro(cid:173)
tect again t corrupt pointer , we need to under 1and how
the e technique perform in rea ty.
We deve op type-aware pointer corruption a a way to
rapid yand y tematica yana yze the corruption-hand ng
capability of file systems. We apply type-aware pointer cor(cid:173)
ruption to NTFS and ext3, and find that despite their po(cid:173)
tentia to recover from many pointer-corruption cenario,
they do not, causing data loss, unmountable file systems,
and y tern cra he . We u e thi
tudy to earn important
e on on how to hand e corrupt pointer .
We believe that future file systems should be more care(cid:173)
ful in implementing pointer protection techniques. A first
tep wou dbe to deve op a con i tent corruption-hand ing
po cy and the corre ponding machinery that can be u ed
by all file system components.
Acknowledgments
Thi materia i ba ed upon work upported by the Na(cid:173)
tiona Science Foundation under the fo (Wing grant
: CCF(cid:173)
0621487, CNS-0509474, CCR-0133456, a we a by gen(cid:173)
erou donation from Network App iance and Sun Mi(cid:173)
cro y tern . We wou d ike to thank our hepherd Marco
Vieira and the anonymou reviewer for their detai ed com(cid:173)
ments that helped improve the paper. Any opinions, find(cid:173)
edin thi
ing ,and conc u bn or recommendation expre
materia are tho e of the author and do not nece
ari )re(cid:173)
flect the views of NSF or other institutions.
References
[1] D. Anderson, 1. Dykes, and E. Riedel. More Than an Inter(cid:173)
face: SCSI vs. ATA. In FAST '03, Apr. 2003.
[2] L. N. Bairavasundaram, A. C. Arpaci-Dusseau, and R. H.
Arpaci-Dusseau. Dependability Analysis of Virtual Memory
Systems. In DSN '06, June 2006.
[3] L. N. Bairavasundaram, G. R. Goodson, B. Schroeder, A. C.
Arpaci-Dusseau, and R. H. Arpaci-Dusseau. An Analysis of
Data Corruption in the Storage Stack. In FAST'08, 2008.
[4] L. N. Bairavasundaram, M. Rungta, A. C. Arpaci-Dusseau,
and R. H. Arpaci-Dusseau. Limiting Trust in the Storage
Stack. In StorageSS '06, June 2006.
[5] W. Bartlett and L. Spainhower. Commercial Fault Tolerance:
IEEE Trans. on Dependable and
A Tale of Two Systems.
Secure Computing, 1(1):87-96, Jan. 2004.
[6] J. Barton, E. Czeck, Z. Segall, and D. Siewiorek. Fault Injec(cid:173)
tion Experiments Using FIAT. IEEE Transactions on Com(cid:173)
puters, 39(4):1105-1118, April 1990.
[7] S. Best.
JFS Overview.
www.ibm.comJ
developerworks/library/l-jfs.html, 2000.
[8] 1. Bonwick. ZFS: The Last Word in File Systems. http://
www.opensolaris.org/os/community/zfs/docs/zfsJast.pdf.
[9] 1. Carreira, H. Madeira, and 1. G. Silva. Xception: A Tech(cid:173)
nique for the Experimental Evaluation of Dependability in
Modem Computers. IEEE Trans. on Software Engg., 1998.
[10] A. Chou, 1.-F. Yang, B. Chelf, S. Hallem, and D. E. gler. An
Empirical Study of Operating System Errors. In SOSP '01.
[11] D. Engler, D. Y. Chen, S. Hallem, A. Chou, and B. C. helf.
Bugs as Deviant Behavior: A General Approach to Inferring
Errors in Systems Code. In SOSP '01.
[12] S. Ghemawat, H. Gobioff, and S.-T. Leung. The Google File
System. In SOSP '03, Bolton Landing, NY, October 2003.
[13] R. Green. EIDE Controller Flaws Version 24. http:// mind(cid:173)
prod.comJjgloss/eideflaw.html, Feb. 2005.
[14] W. Gu, Z. Kalbarczyk, R. K. Iyer, and Z. Yang. Characteri(cid:173)
zation of Linux Kernel Behavior Under Error. In DSN '03,
pages 459--468, San Francisco, CA, June 2003.
[15] S. Han, K. G. Shin, and H. A. Rosenberg. DOCTOR: An
Integrated Software Fault Injection Environment for Dis(cid:173)
tributed Real-Time Systems. In Proceedings ofIPDS'95.
[16] G. A. Kanawati, N. A. Kanawati, and 1. A. Abraham. FER(cid:173)
RARI: A Flexible Software-Based Fault and Error Injection
System. IEEE Transactions on Computing, 44(2), 1995.
[17] W. lun Kao, R. K. Iyer, and D. Tang. FINE: A Fault Injection
and Monitoring Environment for Tracing the UNIX System
Behavior Under Faults.
In IEEE Transactions on Software
Engineering, pages 1105-1118, 1993.
[18] V. Prabhakaran, L. N. Bairavasundaram, N. Agrawal, H. S.
Gunawi, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau.
IRON File Systems. In SOSP '05.
[19] T. 1. Schwarz, Q. Xin, E. L. Miller, D. D. L. a nd
Andy Hospodor, and S. Ng. Disk Scrubbing in Large
Archival Storage Systems. In MASCOTS '04.
[20] G. Sivathanu, S. Sundararaman, and E. Zadok. Type-Safe
Disks. In OSDI '06, Seattle, WA, November 2006.
[21] M. Sivathanu, V. Prabhakaran, F.
I. Popovici, T. E.
Denehy, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau.
Semantically-Smart Disk Systems. In FAST '03.
[22] D. A. Solomon.
Inside Windows NT. Microsoft Program(cid:173)
ming Series. Microsoft Press, 2nd edition, 1998.
[23] C. A. Stein, 1. H. Howard, and M. I. Seltzer. Unifying File
System Protection. In USENIX '01, June 2001.
[24] R. Sundaram.
The Private Lives of Disk Drives.
http://www.netapp.com/go/techontap/matl/sample/
0206toLresiliency.html, February 2006.
[25] D. J. Taylor, D. E. Morgan, and 1. P. Black. Redundancy in
Data Structures: Improving Software Fault Tolerance. IEEE
Trans. on Software Engg., 6(6), 1980.
[26] The Data Clinic.
Hard Disk Failure.
www.dataclinic.co.uk/hard-disk-failures.htm. 2004.
http://
[27] T. K. Tsai and R. K. Iyer. Measuring Fault Tolerance with
the FTAPE Fault Injection Tool. In MASCOTS '95.
[28] S. C. Tweedie. Journaling the Linux ext2fs File System. In
The 4th Annual Linux Expo, Durham, NC, May 1998.
[29] J. Yang, C. Sar, P. Twohey, C. Cadar, and D. Engler. Auto(cid:173)
matically Generating Malicious Disks using Symbolic Exe(cid:173)
cution. In IEEE Security and Privacy, May 2006.
[30] J. Yang, P. Twohey, D. Engler, and M. Musuvathi. Using
In
Model Checking to Find Serious File System Errors.
OSDI '04, San Francisco, CA, December 2004.
1-4244-2398-9/08/$20.00 ©2008 IEEE
511
DSN 2008: Bairavasundaram et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:08:01 UTC from IEEE Xplore.  Restrictions apply.