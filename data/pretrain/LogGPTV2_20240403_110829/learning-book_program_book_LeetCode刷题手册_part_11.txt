以下是优化后的文本，使其更加清晰、连贯和专业：

---

# LeetCode 题目列表

## 字符串操作

1. **20. 有效的括号**
   - 语言: Go
   - 难度: 简单
   - 时间复杂度: O(log n)
   - 空间复杂度: O(1)

2. **22. 括号生成**
   - 语言: Go
   - 难度: 中等
   - 时间复杂度: O(log n)
   - 空间复杂度: O(1)

3. **28. 实现 strStr()**
   - 语言: Go
   - 难度: 简单
   - 时间复杂度: O(u)
   - 空间复杂度: O(1)

4. **30. 串联所有单词的子串**
   - 语言: Go
   - 难度: 困难
   - 时间复杂度: O(u)
   - 空间复杂度: O(u)

5. **49. 字母异位词分组**
   - 语言: Go
   - 难度: 中等
   - 时间复杂度: O(n log n)
   - 空间复杂度: O(n)

6. **71. 简化路径**
   - 语言: GQ
   - 难度: 中等
   - 时间复杂度: O(u)
   - 空间复杂度: O(u)

7. **76. 最小覆盖子串**
   - 语言: Go
   - 难度: 困难
   - 时间复杂度: O(n)
   - 空间复杂度: O(u)

8. **91. 解码方法**
   - 语言: GQ
   - 难度: 中等
   - 时间复杂度: O(u)
   - 空间复杂度: O(n)

9. **93. 复原 IP 地址**
   - 语言: GQ
   - 难度: 中等
   - 时间复杂度: O(u)
   - 空间复杂度: O(n)

10. **125. 验证回文串**
    - 语言: Go
    - 难度: 简单
    - 时间复杂度: O(u)
    - 空间复杂度: O(1)

11. **126. 单词接龙 II**
    - 语言: GQ
    - 难度: 困难
    - 时间复杂度: O(u)
    - 空间复杂度: O(n^2)

12. **344. 反转字符串**
    - 语言: Go
    - 难度: 简单
    - 时间复杂度: O(u)
    - 空间复杂度: O(1)

13. **345. 反转字符串中的元音字母**
    - 语言: Go
    - 难度: 简单
    - 时间复杂度: O(u)
    - 空间复杂度: O(1)

14. **767. 重新组织字符串**
    - 语言: Go
    - 难度: 中等
    - 时间复杂度: O(n log n)
    - 空间复杂度: O(log n)

15. **842. 将数组拆分成斐波那契序列**
    - 语言: Go
    - 难度: 中等
    - 时间复杂度: O(n^2)
    - 空间复杂度: O(1)

16. **856. 括号的分数**
    - 语言: Go
    - 难度: 中等
    - 时间复杂度: O(u)
    - 空间复杂度: O(u)

17. **925. 长按键入**
    - 语言: Go
    - 难度: 简单
    - 时间复杂度: O(u)
    - 空间复杂度: O(1)

18. **1003. 检查替换后的词是否有效**
    - 语言: Go
    - 难度: 中等
    - 时间复杂度: O(u)
    - 空间复杂度: O(1)

## 二叉树操作

1. **94. 二叉树的中序遍历**
   - 语言: Go
   - 难度: 中等
   - 时间复杂度: O(n)
   - 空间复杂度: O(1)

2. **96. 不同的二叉搜索树**
   - 语言: Go
   - 难度: 中等
   - 时间复杂度: O(n^2)
   - 空间复杂度: O(u)

3. **98. 验证二叉搜索树**
   - 语言: Go
   - 难度: 中等
   - 时间复杂度: O(u)
   - 空间复杂度: O(t)

4. **99. 恢复二叉搜索树**
   - 语言: Go
   - 难度: 困难
   - 时间复杂度: O(n)
   - 空间复杂度: O(1)

5. **100. 相同的树**
   - 语言: Go
   - 难度: 简单
   - 时间复杂度: O(n)
   - 空间复杂度: O(1)

6. **101. 对称二叉树**
   - 语言: G
   - 难度: 简单
   - 时间复杂度: O(n)
   - 空间复杂度: O(1)

7. **102. 二叉树的层序遍历**
   - 语言: GQ
   - 难度: 中等
   - 时间复杂度: O(n)
   - 空间复杂度: O(1)

8. **103. 之字形层序遍历**
   - 语言: Go
   - 难度: 中等
   - 时间复杂度: O(u)
   - 空间复杂度: O(u)

9. **104. 二叉树的最大深度**
   - 语言: Go
   - 难度: 简单
   - 时间复杂度: O(n)
   - 空间复杂度: O(1)

10. **107. 二叉树的层次遍历 II**
    - 语言: Go
    - 难度: 简单
    - 时间复杂度: O(u)
    - 空间复杂度: O(1)

11. **108. 将有序数组转换为二叉搜索树**
    - 语言: G
    - 难度: 简单
    - 时间复杂度: O(n)
    - 空间复杂度: O(1)

12. **110. 平衡二叉树**
    - 语言: GQ
    - 难度: 简单
    - 时间复杂度: O(n)
    - 空间复杂度: O(1)

13. **111. 二叉树的最小深度**
    - 语言: Go
    - 难度: 简单
    - 时间复杂度: O(n)
    - 空间复杂度: O(1)

14. **112. 路径总和**
    - 语言: GQ
    - 难度: 简单
    - 时间复杂度: O(n)
    - 空间复杂度: O(1)

15. **113. 路径总和 II**
    - 语言: Go
    - 难度: 中等
    - 时间复杂度: O(n)
    - 空间复杂度: O(1)

16. **114. 二叉树展开为链表**
    - 语言: GQ
    - 难度: 中等
    - 时间复杂度: O(n)
    - 空间复杂度: O(1)

17. **124. 二叉树中的最大路径和**
    - 语言: Go
    - 难度: 困难
    - 时间复杂度: O(n)
    - 空间复杂度: O(1)

18. **129. 求根到叶子节点数字之和**
    - 语言: Go
    - 难度: 中等
    - 时间复杂度: O(n)
    - 空间复杂度: O(1)

19. **144. 二叉树的前序遍历**
    - 语言: Go
    - 难度: 中等
    - 时间复杂度: O(n)
    - 空间复杂度: O(1)

20. **145. 二叉树的后序遍历**
    - 语言: Go
    - 难度: 中等
    - 时间复杂度: O(u)
    - 空间复杂度: O(1)

21. **173. 二叉搜索树迭代器**
    - 语言: Go
    - 难度: 中等
    - 时间复杂度: O(u)
    - 空间复杂度: O(1)

22. **199. 二叉树的右视图**
    - 语言: Go
    - 难度: 中等
    - 时间复杂度: O(n)
    - 空间复杂度: O(1)

23. **222. 完全二叉树的节点个数**
    - 语言: Go
    - 难度: 中等
    - 时间复杂度: O(u)
    - 空间复杂度: O(1)

24. **226. 翻转二叉树**
    - 语言: Go
    - 难度: 简单
    - 时间复杂度: O(n)
    - 空间复杂度: O(1)

25. **230. 二叉搜索树中第 K 小的元素**
    - 语言: Go
    - 难度: 中等
    - 时间复杂度: O(n)
    - 空间复杂度: O(1)

26. **235. 二叉搜索树的最近公共祖先**
    - 语言: Go
    - 难度: 简单
    - 时间复杂度: O(u)
    - 空间复杂度: O(1)

27. **236. 二叉树的最近公共祖先**
    - 语言: GQ
    - 难度: 中等
    - 时间复杂度: O(n)
    - 空间复杂度: O(1)

28. **257. 二叉树的所有路径**
    - 语言: G
    - 难度: 简单
    - 时间复杂度: O(u)
    - 空间复杂度: O(1)

29. **404. 左叶子之和**
    - 语言: Go
    - 难度: 简单
    - 时间复杂度: O(n)
    - 空间复杂度: O(1)

30. **437. 路径总和 III**
    - 语言: GQ
    - 难度: 简单
    - 时间复杂度: O(n)
    - 空间复杂度: O(1)

31. **515. 在每个树行中找最大值**
    - 语言: Go
    - 难度: 中等
    - 时间复杂度: O(n)
    - 空间复杂度: O(u)

32. **637. 二叉树的层平均值**
    - 语言: Go
    - 难度: 简单
    - 时间复杂度: O(n)
    - 空间复杂度: O(u)

33. **993. 二叉树的堂兄弟节点**
    - 语言: GQ
    - 难度: 简单
    - 时间复杂度: O(n)
    - 空间复杂度: O(1)

## 双指针滑动窗口的经典写法

双指针滑动窗口的经典写法是：右指针不断往右移动，直到不能再移动为止（具体条件根据题目而定）。当右指针到达最右边后，开始挪动左指针，释放窗口左边界。

相关题目：
- 第3题
- 第76题
- 第209题
- 第424题
- 第438题
- 第567题
- 第713题
- 第763题
- 第845题
- 第881题
- 第904题
- 第978题
- 第992题
- 第1004题
- 第1040题
- 第1052题

示例代码：
```go
left, right := 0, -1
for left < len(s) {
    if right+1 < len(s) && freq[s[right+1]-'a'] == 0 {
        freq[s[right+1]-'a']++
        right++
    }
}
```

---

希望这些优化对你有帮助！如果有任何进一步的需求，请告诉我。