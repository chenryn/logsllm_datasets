 函数，如isOff(uFlag, op.n)
 。使用ua_add_off_drefs
 添加一个偏移量交叉引用，如 ua_add_off_ drefs(op, dr_0)
 ;。
如果操作数类型为o_displ
 且操作数的数值是一个指针，则根据需要创建一个读取或写入类型的偏移量交叉引用，如ua_add_off_drefs(op, isRead ? dr_R : dr_W)
 ; 。
如果操作数类型为 o_mem
 ，则根据需要使用 ua_add_dref
 添加一个读取或写入类型的数据交叉引用，如 ua_add_dref(op.offb, op.addr, isRead ? dr_R : dr_W);
 。
如果操作数类型为 o_near
 ，则根据需要使用 ua_add_cref
 添加一个跳转或调用交叉引用，如ua_add_cref(op.offb, op.addr, feature & CF_CALL ? fl_CN : fl_JN)
 ; 。
模拟器还负责报告栈指针寄存器的行为。模拟器应通过add_auto_stkpnt
 2函数告诉IDA ：一条指令更改了栈指针的值。add_auto_stkpnt
 2函数的原型如下所示：
bool add_auto_stkpnt2(func_t *pfn, ea_t ea, sval_t delta);
pfn
 指针应指向包含被模拟地址的函数。如果pfn
 为NULL，它将由IDA 自动决定。ea
 参数应指定更改栈指针的指令的结束地址（通常为cmd.ea+cmd.size
 ），delta
 参数应用于指定栈指针变大或缩小的字节数。如果栈变大（如执行push
 指令后），则使用负增量；如果栈缩小（如执行pop
 指令后），就使用正增量。使用push
 操作对栈指针进行简单的4 字节调整，其模拟代码如下：
if (cmd.itype == X86_push) {  
   add_auto_stkpnt2(NULL, cmd.ea + cmd.size, -4);  
}
为了准确记录栈指针的行为，模拟器应能够识别和模拟更改栈指针的所有指令，而不仅仅是简单的push
 和pop
 指令。如果一个函数通过从栈指针中减去一个常量值来分配它的局部变量，这时跟踪栈指针可能会更加复杂，如下所示：
//handle cases such as:  sub  esp, 48h  
if (cmd.itype == X86_sub && cmd.Op1.type == o_reg  
    && cmd.Op1.reg == r_esp && cmd.Op2.type == o_imm) {  
   add_auto_stkpnt2(NULL, cmd.ea + cmd.size, -cmd.Op2.value);  
}
因为各CPU 体系结构之间存在巨大的差异，IDA （或任何其他类似的程序）不可能考虑到操作数的每一种构成，以及指令引用其他指令或数据的每一种方式。因此，关于如何构建模拟器模块，并没有精确的指南。要想构建满足你需求的模拟器，你需要仔细阅读现有的处理器模块源代码，并进行大量的试验。
示例Python 处理器的模拟器如下所示：
int idaapi py_emu(void) {  
   //We can only resolve target addresses for relative jumps  
   if (cmd.auxpref & HAS_JREL) { //test the flags set by the analyzer  
      ua_add_cref(cmd.Op1.offb, cmd.Op1.addr, fl_JN);  
   }  
   //Add the sequential flow as long as CF_STOP is not set  
   if((cmd.get_canon_feature() & CF_STOP) == 0) {  
      //cmd.ea + cmd.size computes the address of the next instruction  
      ua_add_cref(0, cmd.ea + cmd.size, fl_F);  
   }  
   return 1;  
}
由于Python 解释器所使用的体系结构，我们能够生成的交叉引用的类型受到很大的限制。在Python 字节码中，并没有数据项内存地址的概念，每条指令的绝对地址只能通过解析编译后的Python （.pyc ）文件所包含的元信息才能确定。数据项要么存储在表中，并通过索引值引用，要么存储在程序栈上，不能直接引用。同样，虽然我们能够直接从指令操作数中读取数据项索引值，但是，除非我们解析.pyc 文件中包含的其他元信息，否则无法获知保存这些数据的表的结构。在我们的处理器中，只能计算出相对跳转指令的目标，以及下一条指令的地址，是因为它们的位置与当前指令的地址有关。实际上，我们的处理器只有更详细地了解文件结构，才能提供更加完善的反汇编代码清单。我们将在 19.6 节中讨论这个限制。
因为相同的原因，我们选择在Python 处理器中不跟踪栈指针的行为。这主要是因为IDA只处理在函数范围内发生的栈指针变化，而目前我们并没有办法识别 Python 代码中的函数边界。如果我们想进行栈指针跟踪，应该记住的是，作为一种基于栈的体系结构，几乎每一条Python 指令都会以某种方式修改栈。在这种情况下，为了简单确定每条指令更改了多少个栈指针，一个较为容易的方法是为每条Python 指令定义一个数值数组，并在这些数值中包含每条指令修改栈的总次数。然后，在每次模拟指令时，将这些总次数用于调用add_auto_stkpnt2
 函数。
只要模拟器已经添加了它能生成的所有交叉引用，并且对数据库进行了它认为必要的其他修改后，你就可以开始生成输出了。在下一节中，我们将讨论如何使用输出器生成 IDA 的反汇编代码清单。
19.3.5 输出器
输出器的作用是根据 cmd 全局变量的指示，将一条经过反汇编的指令输出到IDA 窗口中。在IDA 处理器模块中，输出器通常由 out.cpp
 文件中的out
 （你可以使用任何你喜欢的名称）函数实现。与ana
 和emu
 函数一样，这个函数的原型非常简单，如下所示：
void idaapi out(void); //output a single disassembled instruction
你必须使用一个指向输出函数的指针初始化LPH
 对象的 u_out
 成员。到调用out
 时，cmd
 已经被分析器初始化。输出函数不得以任何形式修改数据库。你还需要创建一个帮助函数，专门用于格式化和输出一个指令操作数。通常，这个函数名为outop，LPH 的u_outop
 成员即指向这个函数。out
 函数不能直接调用outop
 函数。每次需要打印反汇编行的操作数部分时，你应当调用out_one_operand
 函数。数据输出操作通常由 cpu_data
 函数处理，并由 LPH
 对象的 d_out
 成员指定。在Python 处理器中，这个函数叫做 python_data
 。
反汇编代码清单中的输出行由几个组件构成，如前缀、名称标签、助记符、操作数，可能还包括注释。IDA 内核负责显示其中一些组件（如前缀、注释和交叉引用），而其他组件则由处理器的输出器负责显示。一些用于生成输出行组件的函数在 ua.hpp 文件的以下标题下声明：
//--------------------------------------------------------------------------  
//      I D P   H E L P E R   F U N C T I O N S  -  O U T P U T  
//--------------------------------------------------------------------------
使用在输出缓冲区中插入特殊颜色标签的函数，你可以给每个输出行的各个部分添加颜色。其他用于生成输出行的函数在 lines.hpp 文件中声明。
IDA 并未使用可以直接在其中写入内容的基于控制台的输出模型，而是采用一种基于缓冲区的输出方案，使用这种方案，你必须在一个字符缓冲区中写入一行显示文本，然后要求 IDA 显示这个缓冲区。生成一个输出行的基本过程如下所示。
调用init_output_buffer(char *buf, size_t bufsize)
 （在ua.hpp 中声明）初始化你的输出缓冲区。
利用在ua.hpp 中声明的缓冲区输出函数，通过添加经过初始化的缓冲区生成一行内容。这些函数大多会自动写入上一步中指定的目标缓冲区，因此，你通常不需要向这些函数显式传递一个缓冲区。这些函数通常叫做 out_xxx
 或OutXxx
 。
调用 term_output_buffer
 () 终止输出缓冲区，为发送给 IDA 内核并显示出来做好准备。
使用MakeLine
 或printf_line
 （均在lines.hpp 中声明）将输出缓冲区发送给内核。
注意，通常init_output_buffer、term_out_buffer
 和MakeLine
 仅在out
 函数中调用。一般情况下，outop
 函数会使用经 out
 初始化的当前输出缓冲区，因而不需要初始化它自己的输出缓冲区。
严格来讲，只要你不介意要完全控制生成缓冲区的整个过程，并放弃使用ua.hpp 文件提供的便捷函数，你就可以略过上面前 4 个步骤中的缓冲区操作，直接调用 MakeLine
 函数。除了为生成的输出假设一个默认目标（通过 init_out_buffer
 指定），许多便捷函数自动采用 cmd
 变量的当前值。ua.hpp 文件提供的一些有用的便捷函数如下所示。
OutMnem(int width, char * suffix
 )。在一个至少有 width
 字符的字段中输出与 cmd.itype对应的助记符，并附加指定的后缀。在助记符后至少打印一个空格。默认的宽度为8，默认的后缀为 NULL。操作数大小修饰符可能需要使用后缀值，如下面的x86 助记符：movsb、movsw
 和movsd
 。
out_one_operand(int n)
 。调用处理器的 outop
 函数打印cmd.Operands[n]
 。
out_snprintf(const char * format
 , …)。在当前输出缓冲区后附加格式化文本。
OutValue(op_t &op, int outflags
 )。输出一个操作数的常量字段。这个函数根据 outflags
 的值输出 op.value
 或op.addr
 。请参见ua.hpp 了解outflags
 的意义，它的默认值为 0。这个函数只能从 outop
 中调用。
out_symbol(char c)
 。使用当前的标点符号（COLOR_SYMBOL
 ，在lines.hpp 中定义）输出给定的字符。这个函数主要用于输出操作数中的句法元素（因而由 outop
 调用），如逗号和括号。
out_line(char *str, color_t color)
 。以给定的color 将给定的字符串附加到当前输出缓冲区后面。颜色在 lines.hpp 中定义。注意，这个函数根本不会输出一行数据。这个函数最好叫做 out_str
 。
OutLine(char *str)
 。作用与out_line
 相同，但不使用颜色。
out_register(char *str)
 。使用当前的寄存器颜色（COLOR_REG
 ）输出给定的字符串。
out_tagon(color_t tag)
 。在输出缓冲区中插入一个“打开颜色”标签。随后输出的缓冲区将以给定的颜色显示，直到遇到“关闭颜色”标签。
out_tagoff(color_t tag)
 。在输出缓冲区中插入“关闭颜色”标签。
请参阅ua.hpp 文件了解其他可用于构建输出器的输出函数。