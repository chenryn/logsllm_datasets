## 沉浸式学习PostgreSQL|PolarDB 23: 数据寻龙点穴-通过数据热度分析寻找商机   
### 作者    
digoal    
### 日期    
2023-10-27    
### 标签    
PostgreSQL , PolarDB , 数据库 , 教学    
----    
## 背景    
欢迎数据库应用开发者参与贡献场景, 在此[issue](https://github.com/digoal/blog/issues/121)回复即可, 共同建设《沉浸式数据库学习教学素材库》, 帮助开发者用好数据库, 提升开发者职业竞争力, 同时为企业降本提效.    
- 系列课程的核心目标是教大家怎么用好数据库, 而不是怎么运维管理数据库、怎么开发数据库内核. 所以面向的对象是数据库的用户、应用开发者、应用架构师、数据库厂商的产品经理、售前售后专家等角色.    
本文的实验可以使用永久免费的阿里云[云起实验室](https://developer.aliyun.com/adc/scenario/f55dbfac77c0467a9d3cd95ff6697a31)来完成.    
如果你本地有docker环境也可以把镜像拉到本地来做实验:    
x86_64机器使用以下docker image:    
- [《amd64 image》](../202307/20230710_03.md)    
ARM机器使用以下docker image:    
- [《arm64 image》](../202308/20230814_02.md)    
## 业务场景1 介绍: 数据寻龙点穴-通过数据热度分析寻找商机   
商机和什么有关? 需求    
市场规模与什么有关? 消费目标人数, 客单价    
投入产出和什么有关? 对精准人群的规模化转化    
回答完以上三个问题, 以线下门店选址为例, 我们需要做的是根据目标人群画像, 找到人群聚集位置, 在对应位置开店从而实现规模化转化.    
### 实现和对照      
传统数据库GIS能力较弱, 不适合做时空数据分析.  
#### 传统方法 设计和实验    
无.  
#### PolarDB|PG新方法1 设计和实验     
1、创建测试表1, 存储多边形数据, 每个多边形表示小区、商圈、写字楼等AOI数据.  
```    
create unlogged table t1 (    
  gid int,   -- 多边形ID（用户定义的小区、商圈、写字楼等）    
  face box   -- 空间信息，实际使用时，可以使用PostGIS的geometry类型    
);    
```  
生成1万个面测试数据, 其中位置边界为`(0,0), (100,100)` ,创建GIS索引    
```  
insert into t1 select row_number() over(), box (point(x,y),point(x+1,y+1)) from generate_series(0,99) t1(x),generate_series(0,99) t2(y);    
create index idx_t1_face on t1 using gist(face);    
```    
样本如下:   
```  
postgres=# select * from t1 limit 10;  
 gid |     face       
-----+--------------  
   1 | (1,1),(0,0)  
   2 | (1,2),(0,1)  
   3 | (1,3),(0,2)  
   4 | (1,4),(0,3)  
   5 | (1,5),(0,4)  
   6 | (1,6),(0,5)  
   7 | (1,7),(0,6)  
   8 | (1,8),(0,7)  
   9 | (1,9),(0,8)  
  10 | (1,10),(0,9)  
(10 rows)  
```  
2、创建测试表2, 存储对象的位置、轨迹等数据  
例如:    
- 打车上下车点   
- 人的轨迹点/线数据   
```    
create unlogged table t2 (    
  uid int,   -- 对象ID    
  pos point,   -- 位置，实际使用时，可以使用PostGIS的geometry类型    
  att text   -- 其他属性，可以有更多其他属性    
);    
```  
生成100万用户的1000万个点测试数据, 其中位置边界为`(0,0), (100,100)`    
```  
insert into t2 select ceil(random()*1000000)::int, point(random()*100, random()*100) from generate_series(1,10000000) t(id);    
```   
样本如下:   
```  
postgres=# select * from t2 limit 10;  
  uid   |                   pos                   | att   
--------+-----------------------------------------+-----  
 624480 | (69.87993638998837,99.62866543892659)   |   
 214726 | (64.99721386704991,30.363436819672884)  |   
 979519 | (12.80339924893319,72.84033470132627)   |   
 760628 | (94.706555334308,64.62020709007525)     |   
 728898 | (93.81539819852414,10.88097702423454)   |   
 891585 | (31.675784937903728,4.798317400419094)  |   
 148367 | (45.395582637999254,73.38459322142725)  |   
 664177 | (3.931702280385707,30.175398899784156)  |   
 152051 | (5.4986871854556085,50.902328906649075) |   
 326881 | (94.07026426204013,14.140696778935435)  |   
(10 rows)  
```  
3、创建人的标签表, 表示人的特征(例如年龄、消费能力、喜好等)  
```  
create unlogged table users (  
  uid int primary key,  -- 用户ID  
  tags int[]  -- 10个标签, 标签ID取值范围 1,1000   
);  
```  
生成测试数据100万, 并创建标签GIN 索引.  
```  
create or replace function gen_rand_arr (int,int) returns int[] as $$  
  select array(select ceil(random()*$1)::int from generate_series(1,$2) group by 1);  
$$ language sql strict;    
insert into users select generate_series(1,1000000), gen_rand_arr(1000,10);  
```  
样本如下:   
```  
postgres=# select * from users limit 10;  
 uid |                    tags                      
-----+--------------------------------------------  
   1 | {695,240,131,308,513,782,311,129,789,678}  
   2 | {743,175,58,6,11,630,565,53,604,905}  
   3 | {787,639,690,476,902,306,858,919,961,712}  
   4 | {443,525,5,396,389,29,872,897,998,82}  
   5 | {874,305,761,387,210,686,939,533,792,395}  
   6 | {814,419,972,505,634,892,754,218,631,586}  
   7 | {775,942,577,785,611,114,11,572,482,327}  
   8 | {344,676,521,911,577,800,829,631,402,339}  
   9 | {294,84,249,39,374,970,45,810,135,348}  
  10 | {222,194,442,470,518,484,697,510,1000,993}  
(10 rows)  
```  
4、根据人群特征条件, 生成网格式热力图  
横竖各100个刻度组成10000个格子的热力图.     
用到操作符:  
```  
 pg_catalog | &&   | anyarray      | anyarray       | boolean     | overlaps  
```  
```  
select     
  width_bucket(pos[0], 0, 101, 100),  -- 该位置落在x轴的哪列bucket    
  width_bucket(pos[1], 0, 101, 100),  -- 该位置落在y轴的哪列bucket    
  count(*)    
from t2 join users using (uid)  
  where users.tags && array[1,2,3]  -- 用户特征为包含1,2,3标签的任意一个.    
  group by 1,2  
  order by 1,2;    
 width_bucket | width_bucket | count   
--------------+--------------+-------  
            1 |            1 |    27  -- 表示在格子1,1内符合特征的点数量为27个.    
            1 |            2 |    44  
            1 |            3 |    29  