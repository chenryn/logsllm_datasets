    defer handle.Close()
    if err := handle.SetBPFFilter(filter); err != nil {
        log.Panicln(err)
    }   
    source := gopacket.NewPacketSource(handle, handle.LinkType())
    fmt.Println("Capturing packets")
    for packet := range source.Packets() {
        networkLayer := packet.NetworkLayer() w
        if networkLayer == nil {
            continue
        }
        transportLayer := packet.TransportLayer()
        if transportLayer == nil {
            continue
        }
        srcHost := networkLayer.NetworkFlow().Src().String() x
        srcPort := transportLayer.TransportFlow().Src().String()
        if srcHost != target { y
            continue
        }
        results[srcPort] += 1 z
    }   
}
前沿信安资讯阵地  公众号：i nf osrc
Raw Packet Processing   183
func main() {
    if len(os.Args) != 4 { 
        log.Fatalln("Usage: main.go   ")
    }   
    devices, err := pcap.FindAllDevs()
    if err != nil {
        log.Panicln(err)
    }   
    iface := os.Args[1]
    for _, device := range devices {
        if device.Name == iface {
            devFound = true
        }
    }   
    if !devFound {
        log.Panicf("Device named '%s' does not exist\n", iface)
    }   
    ip := os.Args[2]
    go capture(iface, ip) {
    time.Sleep(1 * time.Second)
    ports, err := explode(os.Args[3])
    if err != nil {
        log.Panicln(err)
    }   
    for _, port := range ports { |
        target := fmt.Sprintf("%s:%s", ip, port)
        fmt.Println("Trying", target)
        c, err := net.DialTimeout("tcp", target, 1000*time.Millisecond) }
        if err != nil {
            continue
        }
        c.Close()
    }
    time.Sleep(2 * time.Second)
    for port, confidence := range results { ~
        if confidence >= 1 {
            fmt.Printf("Port %s open (confidence: %d)\n", port, confidence)
        }
    }
}
/* Extraneous code omitted for brevity */
Listing 8-6: Scanning and processing packets with SYN-flood protections (/ch-8 /syn-flood/main.go)
前沿信安资讯阵地  公众号：i nf osrc
184   Chapter 8
Broadly speaking, your code will maintain a count of packets, grouped 
by port, to represent how confident you are that the port is indeed open. 
You’ll use your filter to select only packets with the proper flags set. The 
greater the count of matching packets, the higher your confidence that the 
service is listening on the port.
Your code starts by defining several variables for use throughout u. 
These variables include your filter and a map named results that you’ll 
use to track your level of confidence that the port is open. You’ll use target 
ports as keys and maintain a count of matching packets as the map value.
Next you define a function, capture(), that accepts the interface name 
and target IP for which you’re testing v. The function itself bootstraps the 
packet capture much in the same way as previous examples. However, you 
must use different code to process each packet. You leverage the gopacket 
functionality to extract the packet’s network and transport layers w. If 
either of these layers is absent, you ignore the packet; that’s because the 
next step is to inspect the source IP and port of the packet x, and if there’s 
no transport or network layer, you won’t have that information. You then 
confirm that the packet source matches the IP address that you’re target-
ing y. If the packet source and IP address don’t match, you skip further 
processing. If the packet’s source IP and port match your target, you incre-
ment your confidence level for the port z. Repeat this process for each sub-
sequent packet. Each time you get a match, your confidence level increases.
In your main() function, use a goroutine to call your capture() function {. 
Using a goroutine ensures that your packet capture and processing logic 
runs concurrently without blocking. Meanwhile, your main() function pro-
ceeds to parse your target ports, looping through them one by one | and 
calling net.DialTimeout to attempt a TCP connection against each }. Your 
goroutine is running, actively watching these connection attempts, looking 
for packets that indicate a service is listening. 
After you’ve attempted to connect to each port, process all of your results 
by displaying only those ports that have a confidence level of 1 or more 
(meaning at least one packet matches your filter for that port) ~. The code 
includes several calls to time.Sleep() to ensure you’re leaving adequate time 
to set up the sniffer and process packets. 
Let’s look at a sample run of the program, shown in Listing 8-7.
$ go build -o syn-flood && sudo ./syn-flood enp0s5 10.1.100.100 
80,443,8123,65530
Capturing packets
Trying 10.1.100.100:80
Trying 10.1.100.100:443
Trying 10.1.100.100:8123
Trying 10.1.100.100:65530
Port 80 open (confidence: 1)
Port 443 open (confidence: 1)
Listing 8-7: Port-scanning results with confidence ratings
前沿信安资讯阵地  公众号：i nf osrc
Raw Packet Processing   185
The test successfully determines that both port 80 and 443 are open. 
It also confirms that no service is listening on ports 8123 and 65530. (Note 
that we’ve changed the IP address in the example to protect the innocent.)
You could improve the code in several ways. As learning exercises, 
we challenge you to add the following enhancements:
1. 
Remove the network and transport layer logic and source checks from 
the capture() function. Instead, add additional parameters to the 
BPF filter to ensure that you capture only packets from your target 
IP and ports.
2. Replace the sequential logic of port scanning with a concurrent alter-
native, similar to what we demonstrated in previous chapters. This will 
improve efficiency.
3. Rather than limiting the code to a single target IP, allow the user to 
supply a list of IPs or network blocks.
Summary
We’ve completed our discussion of packet captures, focusing primarily 
on passive sniffing activities. In the next chapter, we’ll focus on exploit 
development.
前沿信安资讯阵地  公众号：i nf osrc
前沿信安资讯阵地  公众号：i nf osrc
9
W R I T ING A N D P OR T ING 
E X PL O I T CODE
In the majority of the previous chapters, 
you used Go to create network-based 
attacks. You’ve explored raw TCP, HTTP, 
DNS, SMB, database interaction, and passive 
packet capturing. 
This chapter focuses instead on identifying and exploiting vulnerabili-
ties. First, you’ll learn how to create a vulnerability fuzzer to discover an 
application’s security weaknesses. Then you’ll learn how to port existing 
exploits to Go. Finally, we’ll show you how to use popular tools to create 
Go-friendly shellcode. By the end of the chapter, you should have a basic 
understanding of how to use Go to discover flaws while also using it to 
write and deliver various payloads.
前沿信安资讯阵地  公众号：i nf osrc
188   Chapter 9
Creating a Fuzzer
Fuzzing is a technique that sends extensive amounts of data to an applica-
tion in an attempt to force the application to produce abnormal behavior. 
This behavior can reveal coding errors or security deficiencies, which you 
can later exploit. 
Fuzzing an application can also produce undesirable side effects, such 
as resource exhaustion, memory corruption, and service interruption. Some 
of these side effects are necessary for bug hunters and exploit developers 
to do their jobs but bad for the stability of the application. Therefore, it’s 
crucial that you always perform fuzzing in a controlled lab environment. As 
with most of the techniques we discuss in this book, don’t fuzz applications 
or systems without explicit authorization from the owner.
In this section, you’ll build two fuzzers. The first will check the capacity 
of an input in an attempt to crash a service and identify a buffer overflow. 
The second fuzzer will replay an HTTP request, cycling through potential 
input values to detect SQL injection.
Buffer Overflow Fuzzing
Buffer overflows occur when a user submits more data in an input than the 
application has allocated memory space for. For example, a user could submit 
5,000 characters when the application expects to receive only 5. If a program 
uses the wrong techniques, this could allow the user to write that surplus data 
to parts of memory that aren’t intended for that purpose. This “overflow” cor-
rupts the data stored within adjacent memory locations, allowing a malicious 
user to potentially crash the program or alter its logical flow. 
Buffer overflows are particularly impactful for network-based programs 
that receive data from clients. Using buffer overflows, a client can disrupt 
server availability or possibly achieve remote code execution. It’s worth 
restating: don’t fuzz systems or applications unless you are permitted to do 
so. In addition, make sure you fully understand the consequences of crashing 
the system or service.
How Buffer Overflow Fuzzing Works
Fuzzing to create a buffer overflow generally involves submitting increas-
ingly longer inputs, such that each subsequent request includes an input 
value whose length is one character longer than the previous attempt. A 
contrived example using the A character as input would execute according 
to the pattern shown in Table 9-1.
By sending numerous inputs to a vulnerable function, you’ll eventually 
reach a point where the length of your input exceeds the function’s defined 
buffer size, which will corrupt the program’s control elements, such as its 
return and instruction pointers. At this point, the application or system 
will crash. 
By sending incrementally larger requests for each attempt, you can pre-
cisely determine the expected input size, which is important for exploiting 
the application later. You can then inspect the crash or resulting core dump 
前沿信安资讯阵地  公众号：i nf osrc
Writing and Porting Exploit Code   189
to better understand the vulnerability and attempt to develop a working 
exploit. We won’t go into debugger usage and exploit development here; 
instead, let’s focus on writing the fuzzer.
Table 9-1: Input Values in a Buffer Overflow Test
Attempt
Input value
1
A
2
AA
3
AAA
4
AAAA
N
A repeated N times
If you’ve done any manual fuzzing using modern, interpreted languages, 
you’ve probably used a construct to create strings of specific lengths. For 
example, the following Python code, run within the interpreter console, 
shows how simple it is to create a string of 25 A characters:
>>> x = "A"*25
>>> x
'AAAAAAAAAAAAAAAAAAAAAAAAA'
Unfortunately, Go has no such construct to conveniently build strings 
of arbitrary length. You’ll have to do that the old-fashioned way—using a 
loop—which would look something like this:
var (
        n int
        s string
)
for n = 0; n < 25; n++ {
    s += "A"
}
Sure, it’s a little more verbose than the Python alternative, but not 
overwhelming. 
The other consideration you’ll need to make is the delivery mechanism 
for your payload. This will depend on the target application or system. In 
some instances, this could involve writing a file to a disk. In other cases, 
you might communicate over TCP/UDP with an HTTP, SMTP, SNMP, FTP, 
Telnet, or other networked service. 
In the following example, you’ll perform fuzzing against a remote FTP 
server. You can tweak a lot of the logic we present fairly quickly to operate 
against other protocols, so it should act as a good basis for you to develop 
custom fuzzers against other services.
Although Go’s standard packages include support for some common 
protocols, such as HTTP and SMTP, they don’t include support for client-
server FTP interactions. Instead, you could use a third-party package that 
前沿信安资讯阵地  公众号：i nf osrc
190   Chapter 9
already performs FTP communications, so you don’t have to reinvent the 
wheel and write something from the ground up. However, for maximum 
control (and to appreciate the protocol), you’ll instead build the basic FTP 
functionality using raw TCP communications. If you need a refresher on 
how this works, refer to Chapter 2.
Building The Buffer Overflow Fuzzer
Listing 9-1 shows the fuzzer code. (All the code listings at the root location 
of / exist under the provided github repo https://github.com/blackhat-go/
bhg/.) We’ve hardcoded some values, such as the target IP and port, as well 
as the maximum length of your input. The code itself fuzzes the USER prop-
erty. Since this property occurs before a user is authenticated, it represents 
a commonly testable point on the attack surface. You could certainly extend 
this code to test other pre-authentication commands, such as PASS, but keep in 
mind that if you supply a legitimate username and then keep submitting 
inputs for PASS, you might get locked out eventually. 
func main() {
    u for i := 0; i < 2500; i++ {
        v conn, err := net.Dial("tcp", "10.0.1.20:21")
        if err != nil {
            w log.Fatalf("[!] Error at offset %d: %s\n", i, err)
        }   
        x bufio.NewReader(conn).ReadString('\n')
        user := ""
        y for n := 0; n <= i; n++ {
            user += "A" 
        }   
        raw := "USER %s\n"
        z fmt.Fprintf(conn, raw, user)
        bufio.NewReader(conn).ReadString('\n')
        raw = "PASS password\n"
        fmt.Fprint(conn, raw)
        bufio.NewReader(conn).ReadString('\n')
        if err := conn.Close(){; err != nil {
            | log.Println("[!] Error at offset %d: %s\n", i, err)
        }   
    }   
}
Listing 9-1: A buffer overflow fuzzer (/ch-9/ftp-fuzz /main.go)
The code is essentially one large loop, beginning at u. Each time the 
program loops, it adds another character to the username you’ll supply. In 
this case, you’ll send usernames from 1 to 2,500 characters in length. 
For each iteration of the loop, you establish a TCP connection to the 
destination FTP server v. Any time you interact with the FTP service, 
前沿信安资讯阵地  公众号：i nf osrc
Writing and Porting Exploit Code   191
whether it’s the initial connection or the subsequent commands, you 
explicitly read the response from the server as a single line x. This allows 
the code to block while waiting for the TCP responses so you don’t send 
your commands prematurely, before packets have made their round trip. 
You then use another for loop to build the string of As in the manner 
we showed previously y. You use the index i of the outer loop to build 
the string length dependent on the current iteration of the loop, so that 
it increases by one each time the program starts over. You use this value 
to write the USER command by using fmt.Fprintf(conn, raw, user) z. 
Although you could end your interaction with the FTP server at this 
point (after all, you’re fuzzing only the USER command), you proceed to 
send the PASS command to complete the transaction. Lastly, you close your 
connection cleanly {. 
It’s worth noting that there are two points, w and |, where abnormal 
connectivity behavior could indicate a service disruption, implying a poten-
tial buffer overflow: when the connection is first established and when the 
connection closes. If you can’t establish a connection the next time the pro-
gram loops, it’s likely that something went wrong. You’ll then want to check 
whether the service crashed as a result of a buffer overflow. 
If you can’t close a connection after you’ve established it, this may 
indicate the abnormal behavior of the remote FTP service abruptly discon-
necting, but it probably isn’t caused by a buffer overflow. The anomalous 
condition is logged, but the program will continue.
A packet capture, illustrated in Figure 9-1, shows that each subsequent 
USER command grows in length, confirming that your code works as desired.
Figure 9-1: A Wireshark capture depicting the USER command growing by one letter 
each time the program loops 
You could improve the code in several ways for flexibility and conve-
nience. For example, you’d probably want to remove the hardcoded IP, 
port, and iteration values, and instead include them via command line 
arguments or a configuration file. We invite you to perform these usability 
updates as an exercise. Furthermore, you could extend the code so it fuzzes 