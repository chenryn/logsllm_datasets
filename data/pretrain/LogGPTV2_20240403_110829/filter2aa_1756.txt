Increasing the security of 
your election by ﬁxing it
Daniel C. Silverstein
Damon McCormick
PI:EMAIL
PI:EMAIL
Part One:
Disaster Strikes
The 2000 US Presidential Election led 
many to question the accuracy of paper 
ballot systems
Several companies seized 
on this opportunity to 
promote electronic 
voting systems:
• Election Systems & Software
• Diebold Election Systems
• Hart InterCivic
• Sequoia Voting Systems
• “...three independent but redundant 
memory paths ensure that no votes will 
ever be lost or altered.” [1]
• “...World-class encryption techniques 
utilized to store election results.” [2]
• “Proprietary ﬁrmware on closed system 
prevents hacker access.” [3]
Lofty Promises Made
• Trust Us!
• We know what we’re doing!
• Of course we don't have bugs!
• Don't have security holes either!
• And, even if we did, (which we don’t) nobody 
could ever actually exploit them
The Message?
And so, Democracy was made safe from evil hackers
The End
If it looks like snake oil...
And it smells like snake oil...
And it tastes like snake oil...
It’s probably snake oil [4]
Or Not
Q: What’s the ﬁrst thing you do after rooting a box?
Q: What’s the second thing you do after rooting a box?
Pop Quiz 1
A: Hide your presence
A: Patch the hole you came in through
(so nobody else can use it)
Q: How do you tell that someone rooted your box?
Pop Quiz 2
A: Good question!
Forensics analysis is hard!
You can't trust information from a compromised machine.
Q: How do you tell that someone tampered with the 
electronic voting machine you just used to vote?
A: You don’t
Pop Quiz 3
• The major commercial electronic voting 
machines do not produce a voter veriﬁable 
paper trail
• Though, thanks in part to the work of David Dill [5], 
some of the vendors are testing prototypes that do
• Without a paper trail, thre is no way to 
detect tampering
No Paper Trail
• The major commercial electronic voting 
systems are proprietary platforms, protected 
as trade secrets
• Members of the security community at large 
cannot scrutinize the machines without signing 
prohibitive Non-Disclosure Agreements
• We must trust the vendors to detect machine 
tampering or malfunction
• In practice, security through obscurity doesn't help
• Just look at Microsoft's security record
Setec Astronomy
• There is little public data on how electronic 
voting systems behave in a real election setting
• Not possible to verify the tally in a secret ballot
• Performing a realistic test would be difﬁcult
• Require thousands of volunteers
• Expensive
• Easy to cheat
• Independent third parties can't verify operation 
of systems without signing an NDA
• No way to publish results!
Too Little Data
• Electronic voting systems 
may be worse than paper 
systems!
• There are numerous 
avenues of attack on 
computer ballot systems 
that simply have no 
analogue in a paper ballot 
system
The Big Problem
• Electronic voting raises 
unique security issues
• Failure to understand 
these issues could leave 
US State and Federal 
elections open to 
unprecedented fraud!
The Big Problem
“If paramilitary rebels were to take over a voting kiosk 
and force computer scientists to work day and night, 
they would still not be able to lodge a single false ballot 
or affect the outcome.”
--Tommaso Sciortino, ASUC Elections Chair [6]
Part Two:
The Associated Students of  the 
University of California (ASUC)
Online Election System (OES)
• OES represents a unique opportunity to analyze 
the security of an electronic voting system
• Though not fully open, the source to OES was 
available on request and without an NDA
• Over 30,000 students were eligible to vote in the 
election
• Approximately 9,000 votes were cast
• We reviewed OES in April 2003; this was its ﬁrst run.
Online Election System
• Ballot Server
• Authentication Layer 
(CalNet, CalNetAWS)
• Polling Stations
OES Architecture
• The Ballot Server hosts a simple web application 
students access via a web browser at one of the 
polling stations
• The voting application works as follows:
• If necessary, redirect user to CalNet for authentication
• Perform sanity checks (has user already voted?)
• Record users vote
• The Ballot Server ran Red Hat 8
• OES was implemented with Macromedia 
ColdFusionMX on Apache 2.0, using MySQL as a 
backend database.
Ballot Server
• CalNet [7] is UC Berkeley’s central Kerberos 
authentication system
• Implemented via Microsoft Active Directory
• Polling station clients authenticate via 
Kerberos web proxy
• Upon successful authentication, a signed 
authentication token is passed to the clients 
web browser
Authentication Layer (CalNet)
Polling Stations
• Polling stations consist of 
three to ten Apple 
iBooks behind an 
inexpensive home 
router/gateway 
performing DHCP and 
NAT
• Entire polling station sits 
behind one IP address
• Trafﬁc that polling station clients exchange 
with CalNet and the Ballot Server is sent via 
https
• In principle, this should make it impossible to 
read or alter trafﬁc
• The security of the election hinges on the 
security of the CalNet system
OES Security Assumptions
• Physical security emphasized
• Election ofﬁcials seemed to have serious concerns 
that someone would try to break into the server 
room and steal the server
• Basic network security aspects ignored
• The database listened for requests from external 
hosts
• Access was not restricted exclusively to web trafﬁc 
originating from one of the known polling stations
Ballot Server Defense
• It is trivial to tamper with a machine with 
physical access
• Election ofﬁcials implemented strong physical 
security measures
• Physical security doesn’t protect against social 
engineering
• As initially conﬁgured, the open database 
port was the most obvious point of attack
Ballot Server Attacks
• Adding a ﬁrewall raised the bar considerably
• Only trafﬁc from the polling stations on ports 
80 and 443 was allowed through
• An attack would require preparing an exploit in 
advance, storing it on removable media, and 
running it from a polling station client
Ballot Server Attacks
• CalNet is not written or managed by the 
OES developers
• CalNet authentication tokens are 
timestamped, and have a limited lifetime
CalNet Defense
• Compromising any of the CalNet machines would 
be a bad idea
• Capturing authentication tokens does not require 
compromising CalNet’s servers
• Regardless of the short lifetime, tokens can be replayed
CalNet Attacks
• The election staff originally planned to use 
computers rented from students for the 
polling stations
• We suggested that election ofﬁcials create 
an unprivileged account on the iBooks that 
only had permissions to run a web browser
• Default passwords on the router/gateway 
boxes were changed
Polling Station Defense
• Had election ofﬁcials actually used rented 
student computers, one could give them a 
trojaned machine
• Even with machines that are reasonably well 
locked down, it is virtually impossible to 
protect a machine from tampering if the 
user has physical access
• Polling stations were monitered, but voters were 
supposed to have private voting booths.
Polling Station Attacks
• The key idea here is the need for trusted endpoints
• Proving the trustworthiness of a machine is incredibly 
difﬁcult.
• Conventional hardware is not designed to be tamper 
resistant
• Tampering with individual clients would be time 
consuming.
• 70+ machines spread across 15 polling stations.
• Is it possible to compromise an entire polling station 
in one fell swoop?
Polling Station Attacks
Part Three:
Man-in-the-Middle 
Attack on OES
• We want to acquire CalNet tokens so that 
we can replay them to the Ballot Server to 
cast fraudulent votes
• It is not possible to sniff the tokens because 
clients access CalNet and Ballot Server over 
https
• But we can trick the client into giving us a 
valid token by making it believe that our 
man-in-the-middle is the Ballot Server
Summary
The Attack
• We  will construct a man-in-the-middle box, 
which we refer to as fakeballot
• Fakeballot is a drop-in replacement for the 
router/gateways that perform NAT at each 
polling station
• For this attack, we will need:
1 x86 PC
2 network interfaces
1 GNU/Linux distro (Debian)
1 DNS server (djbdns)
1 DHCP server (ISC DHCP)
1 web server with ssl support (apache + mod_ssl)
1 SSL certiﬁcate featuring the FQDN of the Ballot Server 
signed with a bogus CA (Verisign Inc.) [8]
Ingredients
• Conﬁguring linux to perform simple NAT is 
an iptables one-liner
• The external IP of fakeballot will be the IP of the 
polling station we will compromise
• The internal IP of fakeballot will be 192.168.1.1
• fakeballot runs a DHCP daemon that 
returns its own IP as the only nameserver
NAT and DHCP
• DNS behaves normally for all hostnames, 
except that of the Ballot Server
• DNS returns the internal IP of fakeballot 
whenever a request is made for the Ballot 
Server’s hostname
DNS Spooﬁng
• Apache listens on fakeballot’s internal IP
• We wrote a small perl script to proxy trafﬁc 
to and from Ballot Server
• We simply make standard https requests from 
Ballot Server, and pass the returned data directly 
to the client
• We have the user’s authentication token
• It is sent via http post in most Ballot Server requests
• When the voting forms are submitted, we 
dynamically change the user’s votes.
Conﬁguring Apache
• fakeballot’s SSL certiﬁcate is signed by a 
bogus certiﬁcate authority
• This leads to ugly warning messages
What about SSL?
• Count on user behavior
• Browser warnings not that scary, typical users just ‘Click Ok’
• Only one user needs to accept the certiﬁcate
• Attacker can add certiﬁcate
• ASUC poll workers easy to social engineer
• Browser bugs
• At the time, Safari would accept any cert signed by a valid 
authority, regardless of the name speciﬁed [9] 
• Similar bugs appeared in Netscape and IE
Why SSL Doesn’t Matter
Part Four:
Lessons Learned
Critical Vulnerabilities in OES
• OES suffered from multiple critical security 
vulnerabilities
• Easy to ﬁnd and exploit
• Common ‘beginner’ blunders
• More subtle holes yet to be found?
OES vs. Commercial Systems?
• OES differs from the commercial systems in 
a number of important ways
• Commercial electronic voting systems don’t 
connect to the internet
• At least, we sincerely hope not
• OES source is available for review
• Expected lifetime for OES is much shorter
• Commercial systems could be in use for decades
• In light of OES’ ﬂaws, existence of similar bugs in 
commercial systems is plausible
• Commercial systems are closed
• Ampliﬁes damage resulting from a security breach
• Increases time before holes are discovered
• Vendors appear new to computer security
• Mistakes likely
• Higher Stakes
• Commercial systems will be used to elect the President
Cause for Concern?
• Endorse VeriﬁedVoting.org’s Resolution on 
Electronic Voting [10]
• Write to Congress
• Emphasize need for voter veriﬁed paper ballot
• Encourage the use of open source voting 
systems
• Talk to local ofﬁcials
• Purchasing decisions for voting hardware are 
often made at the county level
What you can do
1. http://www.essvote.com/pdf/iv101502.pdf 
2. http://www.diebold.com/solutions/election/accuvote_ts.htm
3. http://www.sequoiavote.com/productGuide.php
4. See Bruce Schneier’s excellent crypto snake oil rant                               
http://www.counterpane.com/crypto-gram-9902.html#snakeoil
5. http://www.veriﬁedvoting.org/
6. Daily Californian, 2/11/2003                                                                  
http://www.dailycal.org/article.asp?id=10858
7. http://calnet.berkeley.edu
8. The real Verisign is Verisign, Inc.
9. Safari Common Name veriﬁcation bug                                                   
http://www.secunia.com/advisories/8756/
10. http://www.veriﬁedvoting.org/resolution.asp
References