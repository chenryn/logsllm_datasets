# Enhancing Election Security: Addressing the Vulnerabilities

## Authors
- Daniel C. Silverstein
- Damon McCormick

## Contact
- PI: EMAIL
- PI: EMAIL

## Part One: The Initial Crisis

### The 2000 US Presidential Election
The 2000 US Presidential Election raised significant concerns about the accuracy and reliability of paper ballot systems. In response, several companies promoted electronic voting systems as a more secure alternative:

- **Election Systems & Software**
- **Diebold Election Systems**
- **Hart InterCivic**
- **Sequoia Voting Systems**

These companies made bold claims about their systems:
- "Three independent but redundant memory paths ensure that no votes will ever be lost or altered." [1]
- "World-class encryption techniques are used to store election results." [2]
- "Proprietary firmware on a closed system prevents hacker access." [3]

### Promises and Reality
Despite these assurances, the message conveyed was one of unwavering trust in the technology. However, such promises often sound too good to be true, much like snake oil. 

### Pop Quiz
- **Q: What’s the first thing you do after rooting a box?**
  - **A: Hide your presence.**
- **Q: What’s the second thing you do after rooting a box?**
  - **A: Patch the hole you came in through (so nobody else can use it).**
- **Q: How do you tell that someone rooted your box?**
  - **A: Forensics analysis is challenging, and you can't trust information from a compromised machine.**
- **Q: How do you tell that someone tampered with the electronic voting machine you just used to vote?**
  - **A: You don’t.**

### Lack of Paper Trail
Major commercial electronic voting machines do not produce a voter-verifiable paper trail. Although some vendors, influenced by the work of David Dill [5], are testing prototypes that do, the absence of a paper trail means there is no way to detect tampering.

### Proprietary Platforms
Commercial electronic voting systems are proprietary platforms protected as trade secrets. This makes it difficult for the security community to scrutinize them without signing restrictive Non-Disclosure Agreements (NDAs). Consequently, we must trust the vendors to detect machine tampering or malfunction, which is problematic given the history of security issues in similar closed systems.

### Insufficient Data
There is limited public data on how electronic voting systems perform in real election settings. Realistic testing is both expensive and logistically challenging, requiring thousands of volunteers. Additionally, independent third parties cannot verify the operation of these systems without signing NDAs, making it impossible to publish results.

### The Big Problem
Electronic voting systems may be less secure than paper systems. There are numerous attack vectors in computer-based systems that have no analog in paper ballot systems. Failure to address these unique security issues could leave state and federal elections vulnerable to unprecedented fraud.

## Part Two: Case Study - ASUC Online Election System (OES)

### Overview
The OES represents a unique opportunity to analyze the security of an electronic voting system. While not fully open, the source code was available upon request without an NDA. Over 30,000 students were eligible to vote, and approximately 9,000 votes were cast. We reviewed OES in April 2003, its first run.

### OES Architecture
- **Ballot Server**: Hosts a simple web application accessed via a web browser at polling stations.
- **Authentication Layer (CalNet, CalNetAWS)**: UC Berkeley’s central Kerberos authentication system.
- **Polling Stations**: Consist of Apple iBooks behind an inexpensive home router/gateway performing DHCP and NAT.

### Ballot Server
- **Functionality**: Redirects users to CalNet for authentication, performs sanity checks, and records votes.
- **Implementation**: Red Hat 8, Macromedia ColdFusionMX on Apache 2.0, MySQL backend.

### Authentication Layer (CalNet)
- **System**: Central Kerberos authentication via Microsoft Active Directory.
- **Process**: Polling station clients authenticate via Kerberos web proxy, and a signed authentication token is passed to the client's web browser.

### Polling Stations
- **Setup**: 3-10 iBooks behind a router/gateway, all traffic sent via HTTPS.
- **Security**: Physical security emphasized, but basic network security aspects were ignored.

### Security Assumptions and Attacks
- **Physical Security**: Strong measures implemented, but physical security doesn't protect against social engineering.
- **Network Security**: Open database port was a significant vulnerability, mitigated by adding a firewall.
- **CalNet Defense**: Timestamped tokens with limited lifetimes, but capturing and replaying tokens is possible.
- **Polling Station Defense**: Unprivileged accounts created, default passwords changed, and monitoring implemented.

### Key Takeaways
- **Trusted Endpoints**: Proving the trustworthiness of a machine is incredibly difficult.
- **Hardware Vulnerability**: Conventional hardware is not designed to be tamper-resistant.
- **Compromise Risk**: Compromising an entire polling station in one fell swoop is possible.

## Part Three: Man-in-the-Middle Attack on OES

### Objective
Acquire CalNet tokens to cast fraudulent votes by tricking the client into believing our man-in-the-middle is the Ballot Server.

### Ingredients
- **Hardware**: x86 PC with 2 network interfaces.
- **Software**: GNU/Linux (Debian), DNS server (djbdns), DHCP server (ISC DHCP), web server with SSL support (Apache + mod_ssl).
- **SSL Certificate**: Signed with a bogus CA (Verisign Inc.).

### Configuration
- **NAT and DHCP**: Simple NAT configuration, internal IP 192.168.1.1, DHCP daemon returns its own IP as the only nameserver.
- **DNS Spoofing**: Returns the internal IP of the man-in-the-middle when a request is made for the Ballot Server’s hostname.
- **Apache Configuration**: Listens on the internal IP, proxies traffic to and from the Ballot Server, and dynamically changes user votes.

### SSL Considerations
- **Bogus Certificate Authority**: Leads to warning messages, but users often ignore them.
- **User Behavior**: Typical users click "OK" on warnings, and browser bugs can be exploited.

## Part Four: Lessons Learned

### Critical Vulnerabilities
- **OES**: Suffered from multiple critical security vulnerabilities, easy to find and exploit, common beginner blunders.
- **Commercial Systems**: Similar vulnerabilities are plausible due to closed nature and longer expected lifetimes.

### Concerns
- **Higher Stakes**: Commercial systems will be used to elect the President, amplifying the damage from a security breach.
- **Vendor Experience**: Vendors new to computer security are likely to make mistakes.

### Recommendations
- **Endorse VerifiedVoting.org’s Resolution on Electronic Voting** [10].
- **Write to Congress**: Emphasize the need for voter-verified paper ballots.
- **Encourage Open Source**: Use open-source voting systems.
- **Local Engagement**: Talk to local officials, as purchasing decisions are often made at the county level.

## References
1. http://www.essvote.com/pdf/iv101502.pdf
2. http://www.diebold.com/solutions/election/accuvote_ts.htm
3. http://www.sequoiavote.com/productGuide.php
4. See Bruce Schneier’s excellent crypto snake oil rant: http://www.counterpane.com/crypto-gram-9902.html#snakeoil
5. http://www.verifiedvoting.org/
6. Daily Californian, 2/11/2003: http://www.dailycal.org/article.asp?id=10858
7. http://calnet.berkeley.edu
8. The real Verisign is Verisign, Inc.
9. Safari Common Name verification bug: http://www.secunia.com/advisories/8756/
10. http://www.verifiedvoting.org/resolution.asp

This revised version aims to provide a clearer, more professional, and coherent presentation of the original text.