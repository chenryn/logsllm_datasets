competing connection to slow down repeatedly. We found this
attack class against both Ubuntu 11.10 and Ubuntu 16.10. For
both versions, this behavior is best induced by preventing an
increase of the cumulative acknowledgement in Fast Recovery,
preventing recovery of losses and causing an RTO.
Ampliﬁed Bursts (new). This class of attack operates by
collecting acknowledgement packets and then sending them
together in a burst. This additional burstiness often causes more
frequent losses in the competing connection which causes it to
slow down and our target ﬂow to increase its throughput. We
found this attack class against Ubuntu 11.10 with a strategy
that collected acknowledgement packets to send them in bursts
during Congestion Avoidance and optimistically acknowledged
data during Slow Start, increasing the size of cwnd. It is
interesting to note that without our model-guided strategy
generation we would have been extremely unlikely to ﬁnd
this attack. This is because delaying acknowledgements and
sending them in bursts is only a good idea during Congestion
Avoidance. During Slow Start, cwnd is small enough that
leading to a connection stall. Similarly,
there may not be enough acknowledgements in ﬂight to make
a single burst,
in
Fast Recovery, the sender needs to get acknowledgements as
soon as possible so that it can recover from the loss and
keep sending data. Delaying acknowledgements and collecting
enough for a single burst tends to cause the connection to stall.
This attack bears signiﬁcant resemblance to the Induced-
Shrew Attack [25]. However, that attack seeks to manipulate
a TCP connection to cause catastrophic throughput reduction
on other competing connections while maintaining a minimal
sending rate itself. Instead, the Ampliﬁed Burst attack focuses
on increasing the throughput of our target connection.
B. Off-path Attacks
An off-path attacker can observe network trafﬁc but cannot
directly modify such trafﬁc. As a result, they are limited to
injecting new (possibly spoofed) packets into the network. In
addition to increasing throughput, possibly as part of a denial
of service attack, an off-path attacker might be interested in
decreasing the throughput or stalling some target connection.
Our model-guided strategy generation produced 753 strate-
gies based on injecting spoofed packets. As shown in Table I,
our system marked between 425 and 564 of these strategies
(depending on implementation) as attacks. A few of these
marked attacks turned out to be false positives. These are
mostly cases where, due to imprecision from testing real
implementations, the target connection does not see its ﬁrst
loss for an abnormally long time, leading to a higher sending
rate than normal. We present a summary in Table II.
Ack Lost Data (new). This class of attacks contains a
wide range of operations that cause lost data to be perceived
as acknowledged at some point in the connection. This occurs
when an attacker injects a spoofed acknowledgement packet
acknowledging data above the current cumulative acknowl-
edgement when the network is about to enter Fast Recovery.
In this case, at least some of the lost data will be deemed
acknowledged by the victim, causing that data to never be
retransmitted. At this point, anything the sender retransmits or
sends will not cause the receiver to increase the cumulative
acknowledgement and the connection permanently stalls. We
found a wide variety of strategies in this attack class against
all implementations we tested.
11
Slow Injected Acks (new). These attacks operate by in-
jecting spoofed acknowledgements that increase their acknowl-
edgment number at a slow and constant rate. As these acknowl-
edgement packets are injected, each one causes TCP to send a
few packets–equivalent to the amount of data acknowledged–
, due to TCP’s self-clocking design. This essentially causes
TCP to bypass congestion control and cwnd entirely and
send at the rate at which the spoofed acknowledgements are
acknowledging data: ack amount ∗ injection f requency.
This rate can be made much slower than TCP would otherwise
achieve. Additionally, due to the spoofed acknowledgements,
any real acknowledgements for data will be considered old and
ignored. We found this class of attacks against Ubuntu 11.10.
Sawtooth Ack (new). These attacks also operate using
spoofed acknowledgements that increase their acknowledge-
ment number at a steady pace. However, these packets may
acknowledge more data and occasionally reset their acknowl-
edgment number to the true cumulative acknowledgement
point. This starting over, typically at a state transition from
Congestion Avoidance to Fast Recovery or back, results in
a long string of spoofed acknowledgements with increasing
acknowledgement numbers that eventually reaches the previ-
ous high acknowledgement, at which point the sender begins
sending new data. This causes a very prominent sawtooth
pattern in a time sequence graph of the connection. Due to
the increasing number of acknowledgements that must be sent
to reach the highest acknowledgement each time, the sending
rate of a connection under this type of attack continuously
decreases. We found this class of attacks against Ubuntu
16.10, Ubuntu 14.04, Ubuntu 11.10, and Windows 8.1 using
a variety of strategies. In our tests, this attack usually resulted
in approximately a 12x reduction in throughput. The attacker
is required to expend approximately 40Kbps for this attack.
Dup Ack Injection (new). This class of attack operates by
repeatedly injecting three or more spoofed duplicate acknowl-
edgements into the target connection in hopes of spuriously
triggering Fast Recovery and slowing the connection down.
We have found this class of attack to be very effective against
Windows 8.1 and Debian 2. Newer Linux versions are not
vulnerable to this attack due the use of DSACK [7] to detect
spurious retransmissions and a mechanism to dynamically
adjust
threshold needed to
trigger Fast Recovery [42]. In our tests,
this attack often
resulted in approximately a 12x reduction in throughput when
using Windows 8.1 or Debian 2. The connection repeatedly
enters Fast Recovery and needlessly retransmits signiﬁcant
data. The attacker needs only 40Kbps to launch this attack.
the duplicate acknowledgement
Ack Ampliﬁcation (new). This class of attack operates
similarly to Slow Injected Acks. Instead of sending spoofed
acknowledgements with increasing sequence numbers slowly,
the attacker sends them very quickly. Each one causes the
sender to send a large burst of packets, effectively bypassing
congestion control and cwnd completely. This effect is even
more pronounced in Slow Start, where the sender can send
two bytes for every one acknowledged. Additionally, since any
losses are masked by the spoofed acknowledgements, TCP
will never slow down. This results in a very powerful class
of attack where an attacker can cause the target connection
to consume all available bandwidth up to the network and/or
sending system capacity by simply sending acknowledgements
at around 40Kbps. In our tests, the competing connection was
left starved for bandwidth, with throughput near zero, and often
doing repeated RTOs for the duration of the attack. The low
bandwidth required makes this ideal for a denial of service
attack. We found a wide variety of strategies in this attack class
against Ubuntu versions 16.10, 14.04, 11.10, and Windows 8.1.
Off-path Repeated Slow Start (new). This class of attacks
is very similar to the On-path Repeated Slow Start attacks
discussed previously. We found this attack in Ubuntu 11.10.
VII. RELATED WORK
Attacks on congestion control. Previous work manually
identiﬁed several attacks against TCP congestion control. First
work in this area is [22] which identiﬁed the Desynchroniza-
tion Attack which causes the sender and receiver to become
desynchronized with respect to the location of the cumulative
acknowledgement, resulting in a connection stall. Three attacks
were shown in
[37]: Optimistic Ack, Ack Division, and
Dup Ack Spooﬁng. These attacks allow a malicious receiver
or on-path attacker to increase the throughput of a target
connection by modifying how it acknowledges data, either
acknowledging more data than it should, acknowledging it
in many little pieces, or repeatedly acknowledging the same
data. Ack Division and Dup Ack Spooﬁng has since been
widely mitigated by applying Appropriate Byte Counting [3]
and similar implementation-level mitigations.
The work in [26] and [25] introduced two attacks which
degrade TCP throughput along some target link while expend-
ing minimal bandwidth in an attempt to avoid detection.
A security analysis of TCP commissioned by the British
Government [12] identiﬁed two additional attacks available
to a blind attacker. These are the Blind Flooding Attack and
Blind Throughput Reduction Attack. Both operate by sending
spoofed acknowledgements which will cause the receiver to
send a duplicate acknowledgment if the packet is out of the
acceptable sequence window.
Finally, [2] identiﬁed the Ack Storm attack where the
injection of data into a target connection prevents further data
transfer and generates an inﬁnite series of acknowledgements,
as both parties respond to what they consider to be an invalid
acknowledgement with an acknowledgement.
In contrast to these, TCPWN performs an automated anal-
ysis of TCP congestion control, based on a state machine
description, to identify potential attacks and then automatically
tests real implementations of TCP for possible attacks.
Automated vulnerability discovery in protocols. Prior work
has looked at automatically ﬁnding vulnerabilities in network
protocols by using fuzzing. While random fuzz testing [29]
is often effective in ﬁnding interesting corner case errors, the
probability of “hitting the jackpot” is low because it typically
mutates the well-formed inputs and tests the program on the
resulting inputs. To overcome this inherent problem of fuzzing,
a set of works like SNOOZE [6], KiF [1], and SNAKE [21]
leverage the protocol state machines to cover deeper and
more relevant portions of the search space. They require the
end users to provide the protocol speciﬁcation (e.g., message
format, state machines) and various fault injection scenarios
to discover vulnerabilities in stateful protocols. These tools
12
primarily search for crashes or other fatal errors. In contrast,
TCPWN aims to automatically discover attacks on the runtime
performance of TCP congestion control by leveraging a model-
guided search technique.
Several other research efforts [14], [24], [38], [36], [5]
leverage program analysis, for example, symbolic execution,
to ﬁnd vulnerabilities in protocol implementations. MAX [24]
focuses on two-party protocols to ﬁnd performance attacks
mounted by a compromised participant that can manipulate
the victim’s execution control ﬂow. However, MAX relies on
user speciﬁed information about a known vulnerability of the
code to limit the search space during symbolic execution.
In contrast, TCPWN relies on vulnerable actions common
to the protocol state machine, not speciﬁc to a particular
implementation. MACE [14] combines symbolic execution
with concrete execution to infer the protocol state machine
and use it as a search space map to allow deep exploration for
bugs. While these state machines can represent the behavior
of protocols with various message types (e.g., RFB, SMB),
they cannot capture the different aspects of TCP congestion
control because the number of messages (e.g., ACKs) plays a
signiﬁcant role in lieu of types. Therefore, TCPWN utilizes the
congestion control state machine derived from the speciﬁca-
tions to generate an effective, but reduced, set of test scenarios.
VIII. CONCLUSION
Today, the testing of congestion control and the discovery
of attacks against it is mostly a manual process performed
by protocol experts. We developed TCPWN, a system to
automatically test real implementations of TCP by searching
for attacks against their congestion control. TCPWN uses a
model-guided attack generation strategy to generate abstract
attack strategies which are then converted to concrete attack
scenarios made up of message-based actions or packet in-
jections. Finally, these concrete attack scenarios are applied
in our testing environment, which leverages virtualization to
run real implementations of TCP independent of operating
system, programming language, or libraries. We evaluated 5
TCP implementations including both open- and closed- source
systems, using TCPWN. We found 2,436 attack strategies
which could be grouped into 11 classes, of which 8 are new.
ACKNOWLEDGMENT
This material is based in part upon work supported by
the National Science Foundation under Grant Numbers CNS-
1600266, CNS-1617728, and CNS-1409191. Any opinions,
ﬁndings, and conclusions or recommendations expressed in
this material are those of the authors and do not necessarily
reﬂect the views of the National Science Foundation.
REFERENCES
[1] H. Abdelnur, R. State, and O. Festor, “KiF: A stateful SIP fuzzer,” in
International Conference on Principles, Systems and Applications of IP
Telecommunications, 2007, pp. 47–56.
[2] R. Abramov and A. Herzberg, “TCP ack storm DoS attacks,” in IFIP
International Information Security Conference, 2011, pp. 29–40.
[3] M. Allman, “TCP Congestion Control with Appropriate Byte Counting
(ABC),” RFC 3465 (Experimental), 2003.
[4] M. Allman, V. Paxson, and E. Blanton, “TCP congestion control,” RFC
5681 (Draft Standard), 2009.
[5] R. Banabic, G. Candea, and R. Guerraoui, “Finding trojan message
vulnerabilities in distributed systems,” in International Conference
on Architectural Support for Programming Languages and Operating
Systems, 2014, pp. 113–126.
[6] G. Banks, M. Cova, V. Felmetsger, K. Almeroth, R. Kemmerer, and
G. Vigna, “SNOOZE: Toward a stateful network protocol fuzzer,” in
International Conference on Information Security, 2006, pp. 343–358.
[7] E. Blanton and M. Allman, “Using TCP Duplicate Selective Ac-
knowledgement (DSACKs) and Stream Control Transmission Protocol
(SCTP) Duplicate Transmission Sequence Numbers (TSNs) to Detect
Spurious Retransmissions,” RFC 3708 (Experimental), 2004.
[8] E. Blanton, M. Allman, L. Wang, I. Jarvinen, M. Kojo, and Y. Nishida,
“A Conservative Loss Recovery Algorithm Based on Selective Ac-
knowledgment (SACK) for TCP,” RFC 6675 (Proposed Standard),
2012.
[9] L. S. Brakmo, S. W. O’Malley, and L. L. Peterson, “TCP vegas: New
techniques for congestion detection and avoidance,” in Conference on
Communications Architectures, Protocols and Applications, 1994.
[10] Y. Cao, Z. Qian, Z. Wang, T. Dao, S. V. Krishnamurthy, and L. M. Mar-
vel, “Off-path TCP exploits: Global rate limit considered dangerous,”
in USENIX Security Symposium, 2016, pp. 209–225.
[11] N. Cardwell, Y. Cheng, C. S. Gunn, S. H. Yeganeh, and V. Jacobson,
“BBR: Congestion-based congestion control,” ACM Queue, vol. 14,
September-October, pp. 20 – 53, 2016.
[12] Centre for the Protection of National Infrastructure, “Security assess-
ment of the transmission control protocol,” Centre for the Protection of
National Infrastructure, Tech. Rep. CPNI Technical Note 3/2009, 2009.
[13] Y. Cheng, N. Cardwell, and N. Dukkipati, “RACK: a time-based fast
loss detection algorithm for TCP,” draft-ietf-tcpm-rack-01.txt, 2016.
[15]
[14] C. Cho, D. Babic, P. Poosankam, K. Chen, E. Wu, and D. Song,
“MACE: Model-inference-assisted concolic exploration for protocol and
vulnerability discovery,” in USENIX Conference on Security, 2011.
J. Chu, N. Dukkipati, Y. Cheng, and M. Mathis, “Increasing TCP’s
Initial Window,” RFC 6928 (Experimental), 2013.
J. de Ruiter and E. Poll, “Protocol state fuzzing of TLS implementa-
tions,” in USENIX Security Symposium, 2015.
[16]
[17] N. Dukkipati, N. Cardwell, and Y. Cheng, “Tail Loss Probe (TLP): An
Algorithm for Fast Recovery of Tail Losses,” draft-dukkipati-tcpm-tcp-
loss-probe-01.txt, 2013.
[18] Y. Gilad and A. Herzberg, “Off-path attacking the web,” in WOOT,
2012, pp. 41–52.
[19] T. Henderson, S. Floyd, A. Gurtov, and Y. Nishida, “The NewReno
modiﬁcation to TCP’s fast recovery algorithm,” RFC 6582 (Proposed
Standard), 2012.
[20] V. Jacobson, “Congestion avoidance and control,” ACM SIGCOMM
Computer Communication Review, vol. 18, no. 4, pp. 314–329, 1988.
[21] S. Jero, H. Lee, and C. Nita-Rotaru, “Leveraging State Information for
Automated Attack Discovery in Transport Protocol Implementations,”
in IEEE/IFIP International Conference on Dependable Systems and
Networks, 2015.
[22] L. Joncheray, “A simple active attack against TCP,” in USENIX Security
Symposium, 1995.
[23] S. Kent and K. Seo, “Security Architecture for the Internet Protocol,”
RFC 4301 (Proposed Standard), 2005.
[24] N. Kothari, R. Mahajan, T. Millstein, R. Govindan, and M. Musuvathi,
“Finding Protocol Manipulation Attacks,” ACM SIGCOMM Computer
Communication Review, vol. 41, no. 4, 2011.
[25] V. A. Kumar, P. S. Jayalekshmy, G. K. Patra, and R. P. Thangavelu,
“On remote exploitation of TCP sender for low-rate ﬂooding denial-
of-service attack,” IEEE Communications Letters, vol. 13, no. 1, pp.
46–48, 2009.
[26] A. Kuzmanovic and E. Knightly, “Low-rate TCP-targeted denial of
service attacks and counter strategies,” IEEE/ACM Transactions on
Networking, vol. 14, no. 4, pp. 683–696, 2006.
[27] H. Lee, J. Seibert, E. Hoque, C. Killian, and C. Nita-Rotaru, “Turret:
A platform for automated attack ﬁnding in unmodiﬁed distributed
system implementations,” in International Conference on Distributed
Computing Systems, 2014, pp. 660–669.
13
[28] M. Mathis, N. Dukkipati, and Y. Cheng, “Proportional Rate Reduction
for TCP,” RFC 6937 (Experimental), 2013.
[29] B. Miller, L. Fredriksen, and B. So, “An empirical study of the reliability
of unix utilities,” Communications of the ACM, vol. 33, no. 12, 1990.
[30] G. Nelson and D. Oppen, “Fast decision procedures based on congru-
ence closure,” J. ACM, vol. 27, no. 2, pp. 356–364, 1980.
[31]