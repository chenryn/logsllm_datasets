by δ. This is a natural extension of Lemma 2.4 of [28].
Given this, to obtain full malicious security [28] demonstrates
that it is sufficient to prove that δ = 0. This is accomplished by ex-
tending Protocol 2.24 (Triple Verif. Using Another Without Opening)
of [28] to the arithmetic setting.
that z = xy( mod 2k) and an addition uniformly distributed triple
Parameters: The parties hold a triple ((cid:74)x(cid:75)A,(cid:74)y(cid:75)A,(cid:74)z(cid:75)A) to verify
((cid:74)a(cid:75)A,(cid:74)b(cid:75)A,(cid:74)c(cid:75)A) such that c = ab( mod 2k).
1. Each party locally compute(cid:74)ρ(cid:75)A := (cid:74)x(cid:75)A −(cid:74)a(cid:75)A and(cid:74)σ(cid:75)A :=
(cid:74)y(cid:75)A −(cid:74)b(cid:75)A.
2. The parties run the malicious secure open((cid:74)ρ(cid:75)A) and open((cid:74)σ(cid:75)A)
3. The parties run the malicious secure δ = open((cid:74)z(cid:75)A −(cid:74)c(cid:75)A −
σ(cid:74)a(cid:75)A − ρ(cid:74)b(cid:75)A − σ ρ) protocol and output ⊥ if δ! = 0 or if the
protocols and output ⊥ if either open protocol fails.
open protocol fails. Otherwise the parties output accept.
Figure 5: Malicious secure arithmetic multiplication proto-
col Πmal−arith−mult.
Theorem 1. If ((cid:74)a(cid:75)A,(cid:74)b(cid:75)A,(cid:74)c(cid:75)A) is a correct multiplication triple
and the honest parties agree on their common shares of(cid:74)x(cid:75)A,(cid:74)y(cid:75)A,(cid:74)z(cid:75)A,
but ((cid:74)x(cid:75)A,(cid:74)y(cid:75)A,(cid:74)z(cid:75)A) is not a correct triple, then all honest parties
output ⊥ in Protocol Πmal−arith−mult of Figure 5.
proof sketch. We note that the proof is a immediate extension
of Lemma 2.25 of [28]. Namely, the values of ρ, σ held by the honest
parties are the same and correct or the parties would have aborted
in the open protocols. Given this, expanding the computation of w
results in difference z − xy which is zero if the triple is correct and
non-zero otherwise.
(cid:3)
D.2 Malicious Secure Fixed-Point
Multiplication
Remarks: Observe that step 3 of the online phase need not be per-
formed before step 4. Instead it can be performed in the following
round and before any values dependent of the output(cid:74)z(cid:75)A are re-
vealed. This observation allows the effective round complexity of
the fixed-point multiplication protocol to be 1, conditioned on the
next operation not to be revealing a value resulting from z.
1, r1 to parties 1,3.
reveal r′
(r1, r2, r3).
Parameters: A single 2-out-of-3 (or 3-out-of-3) share (cid:74)x′(cid:75)A =
(x′
3) over the ring Z2k and a integer d < k.
2, x′
1, x′
Preprocess:
1. All parties locally compute(cid:74)r′(cid:75)B ← Rand((Z2)k).
2. Define the sharing(cid:74)r(cid:75)B to be the k − d most significant shares of
(cid:74)r′(cid:75)B, i.e. r = r′/2d .
2(cid:75)B,(cid:74)r′
3. The parties compute (cid:74)r′
3(cid:75)B ← Rand((Z2)k) and
(cid:74)r2(cid:75)B,(cid:74)r3(cid:75)B ← Rand((Z2)k−d). r′
3(cid:75)B,(cid:74)r1(cid:75)B :=(cid:74)r(cid:75)B −(cid:74)r2(cid:75)B −(cid:74)r3(cid:75)B and
(cid:74)r′
2(cid:75)B −(cid:74)r′
1(cid:75)B :=(cid:74)r′(cid:75)B −(cid:74)r′
5. Define the preprocessed shares as(cid:74)r′(cid:75)A := (r′
3),(cid:74)r(cid:75)A :=
1, r′
2, r′
Online: On input(cid:74)x(cid:75)A,(cid:74)y(cid:75)A,
2, r2 is revealed to party 1,2 and
4. Using a ripple carry subtraction circuit, the parties jointly compute
r′
3, r3 to parties 2,3 using the RevealOne routine.
1. The parties run the malicious secure multiplication protocol of
[28, Protocol 4.2] where operations are performed over Z2k . This
includes:
1. Run the semi-honest multiplication protocol [28, Section 2.2]
and ∧ operations are replaced with +, ∗ respectively.
on(cid:74)x(cid:75)A,(cid:74)y(cid:75)A to obtain a sharing of(cid:74)z′(cid:75)A :=(cid:74)x(cid:75)A(cid:74)y(cid:75)A. ⊕
protocol of [28, Protocol 2.24] using ((cid:74)x(cid:75)A,(cid:74)y(cid:75)A,(cid:74)z′(cid:75)A).
to party i + 1 (performed
i − r′
i −r′
i)
i) with party i +2. If they saw different
in step 1a), party i sends (z′
and runs compareview(z′
i −r′
values both parties send ⊥ to all other parties and abort.
2. In the same round that party i sends z′
i
3. Before any shares are revealed, party i +1 locally computes (z′
2. Before any shares are revealed, run the triple verification
i) to party i + 2.
4. All parties compute (z′ − r′) =3
5. Output(cid:74)z(cid:75)A :=(cid:74)r(cid:75)A + (z′ − r′)/2d .
i =1(zi − r′
i).
Figure 6: Single round share malicious secure fixed-point
multiplication protocol Πmal−mult.
Theorem 2. Protocol Πmal−mult of Figure 6 securely computes
ℱmult with abort, in the presence of one malicious party, where ℱmult
is defined as the functionality induced by Πmal−mult in the semi-
honest setting (steps 1a and 3 of the online phase can be omitted).
i
i
i − r′
Now observe that sending z′
proof sketch: The security of this protocol can easily be re-
duced to the security of [28]. First observe that the preprocessing
phase makes only black box use of [28] and outputs a valid sharing
of a uniformly distributed value r′ ∈ Z2k .
reveals no information about
x, y, z′ due to r′ being uniformly distributed. What remains to be
shown is that if a malicious party i sends an incorrect value for
z′
i − r′
, the honest parties will abort before any private information
is revealed. By the correctness of step 1b, party i + 1 will hold the
correct value of zi. As such, party i +1 can compute the correct value
of z′
+r′
i) with party i +2. Conditioned
on not aborting, both agree on the correct value of z′ + r′. Note
i
that compareview is a general technique for ensuring both parties
agree on the specified value. We refer interested readers to [28] for
more details. Should the parties abort, no information is revealed
due to the prohibition on revealing any private values before step
3 of the online phases completes.
(cid:3)
and run compareview(z′
i
+r′
i
Session 1B: PrivacyCCS’18, October 15-19, 2018, Toronto, ON, Canada51D.3 Security of Malicious Share Conversions
Theorem 3. The Bit Decomposition protocol of Section 5.3 securely
converts an arithmetic sharing of x ∈ Z2k to a boolean sharing with
abort, in the presence of one malicious party.
proof sketch: It is sufficient to show that(cid:74)x1(cid:75)B,(cid:74)x2(cid:75)B,(cid:74)x3(cid:75)B
are valid secret shares and that computing and gates on these shares
does not reveal any information. Correctness follows from the triple
verification check and that only black box use of [28] is made. First,
there is no need for randomization which follows from Claim 2.1
of [28]. Namely, the shares of corrupt party and the secret fully
determine the other share. Secondly, computing an and gate with
these shares is private due to the protocol randomizing the product
share. That is, the view of the corrupt party i after performing
the and gate protocol of [28] contains a uniformly distributed
share (since αi−1 of Section 3.1.1 is uniformly distributed) sent by
Party i − 1 along the triple verification messages which is similarly
distributed. In the case of an xor gate no information is exchanged
and therefore can trivially be simulated.
(cid:3)
Theorem 4. The Bit Extraction protocol of Section 5.3 securely
converts an arithmetic sharing of x ∈ Z2k to a boolean sharing of the
ith bit with abort, in the presence of one malicious party.
proof sketch: Trivially follows from Theorem 3.
(cid:3)
Theorem 5. The Bit Composition protocol of Section 5.3 securely
converts a binary sharing of x ∈ Z2k to a arithmetic sharing with
abort, in the presence of one malicious party.
proof sketch: Follows from black box use of [28].
(cid:3)
Theorem 6. The Joint Yao Input protocol of Section 5.3 securely
generate with abort a Yao secret share(cid:74)x(cid:75)Y where x ∈ {0, 1}m is the
private input of two parties, in the presence of one malicious party.
proof sketch: First, the case where x is the input of Party 2
and 3 is trivial since no messages are exchanged and the resulting
wire labels are will defined by the simulator. Note that the simulator
need not sample the non-active wire labels and therefore compatible
with proof of [42].
Without loss of generality let us assume party 1 and 2 know the
input bit x. If Party 3 is corrupt and sends incorrect messages, Party
1 will always abort. So will the simulator. If party 2 is corrupt then if
either commitment is incorrect then party 1 will abort independent
of x when comparing the commitments. If the label encoding x is
incorrect then party 1 will abort. Note that the adversary knows x
and therefore it is ok to abort based on x. The simulator will do the
same.
The proof for when the linear combination optimization is used
follows the same logic except that one of the sums will satisfy on of
the abort conditions above (with overwhelming probability). When
party 2 is corrupt the probability that party 1 received an incorrect
label and this test passes is 2−λ. In particular, consider that one of
the garblers sends an incorrect input label. To have the ith linear
combination pass, either this input label must not be in the sum
(happens with Pr. 1/2) or was canceled out by another incorrect
label ℓ (canceling out using multiple incorrect labels only reduces
adversaries winning probability). Fixing all previous labels, the
probability that ℓ is included in the sum is 1/2. As a result, with
either strategy (including additional incorrect labels, or not), the
probability of undetected cheating in one linear combination is
bounded by 1/2. We therefore have that cheating is caught with
probability 1 − 2−λ.
(cid:3)
Theorem 7. The Yao to Binary protocol of Section 5.3 securely
converts a binary sharing of x ∈ {0, 1} to a Yao sharing with abort,
in the presence of one malicious party.
0
r
y
r
y
proof sketch: In the case of a malicious party 1, party 1 and
2 sample r ← {0, 1} and kr
r ← {0, 1}κ. Party 1 is supposed to
x ⊕ kr
sends k
r to party 3. If they send the incorrect value
y := kx
y
party 3 will always abort. The simulator will do the same. For the
commitment to k
y , a commitment to a random string is given. Note
y
that in the view of party 1 all values which depend on x are masked
by a uniform value and therefore can be simulated.
0
In the case of a malicious party 2, they are supposed to send k
′ = k
r
r ⊕ c instead the parties abort. Let us
0
to party 3. If they send k
x ⊕ kr
y := kx
begin with the case that c (cid:44) ∆. When party 1 sends k
y
′ ⊕ k
′ ⊕
y is not contained in {k
0
0
0
party 3 will observe that k
r , k
r
r
x ⊕ k
r ⊕ (x∆)
r ⊕ ∆} = {k
r ⊕ c ⊕ k
r ⊕ c ⊕ k
0
0
0
0
0
0
y
y = k
k
r , k
and c (cid:44) ∆. In the case that c = ∆, then when party 1 attempts to
y but will fail since this commitment is to
decommit Cpx⊕x ⊕r to k
y
y ⊕ ∆ = k
0
r to party 3, party 2 is
y
k
supposed to send C0, C1 to party 1. If either of this is incorrect party
1 will observe that the C0, C1 sent from party 3 do not match and
abort. In either case one of the parties will abort and the simulator
will emulate this process.
y ⊕ c. In addition to sending k
r ⊕ ∆} since k
0
Finally, in the case of a malicious party 3, they are supposed to
send the commitments C0, C1. If either of these values are incorrect
party 1 will abort and so will the simulator. Note that r is uniformly
distributed in the view of party 3 and therefore allows the simulation
without knowledge of x.
(cid:3)
Theorem 8. The Binary to Yao protocol of Section 5.3 securely
converts a binary sharing of x ∈ {0, 1} to a Yao sharing with abort,
in the presence of one malicious party.
proof sketch: The correctness of(cid:74)x1(cid:75)Y,(cid:74)x2(cid:75)Y,(cid:74)x3(cid:75)Y follows
from Theorem 6. The security of the rest of the protocol follows
from the security of [42].
(cid:3)
Theorem 9. The Yao to Arithmetic protocol of Section 5.3 securely
converts a Yao sharing of x ∈ Z2k to an arithmetic sharing with abort,
in the presence of one malicious party.
proof sketch: Given that x2, x3 being chosen uniformly and
the sharing of them is correct via Theorem 6, the overall simulation
follows from the black box use of [42].
(cid:3)
Theorem 10. The Arithmetic to Yao protocol of Section 5.3 securely
converts an arithmetic sharing of x ∈ Z2k to a Yao sharing with abort,
in the presence of one malicious party.
proof sketch: Given that the sharing of x1, x2, x3 are correct
via Theorem 6, the overall simulation follows from the black box
use of [42].
(cid:3)
Session 1B: PrivacyCCS’18, October 15-19, 2018, Toronto, ON, Canada52