# Typora XSS 到 RCE（下）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言：
上一篇文章讲了我通过黑盒测试从输出点入手挖到的 Typora
可以导致远程命令执行的XSS，并分析了漏洞原因。那么今天就讲一下我从代码入手挖到的另外两个XSS。
## 漏洞二&三：
###  从解析Markdown的代码入手：
我们知道容易导致 XSS 的一种情况就是，用户可以控制的内容未经处理直接拼接进 HTML 。那么我们这一次直接在代码中寻找这样的位置。
通过上一次的分析，我们已经大概知道了 Typora 将 Markdown 解析成 HTML 的过程，其中负责将 Markdown 语法转换成 HTML
的主要函数就是`ce.prototype.output`
，既然这次要从代码入手找漏洞，我们当然就需要对这个函数有一定的了解，这里简要对这个函数的主要逻辑做一个分析：
    ce.prototype.output = function(
     String e, //输入的内容 .eg:~~del~~ 
     Function t, //生成HTML的规则函数
     Bool n, //开关，决定要不要对格式为：[xxx]() 中的特殊字符(\=,\*,\\,\[,\_)进行替换
     Object r, //输入内容type, .eg:{"attr":true}
     Object o //记录游标信息的对象
     ) {
     t = t || this.options.decorate, // 如果t为null，则使用 this.options.decorate 作为生成HTML的规则函数
     ......
     function S(Array e){ //参数e的结构在后面说
     ......
     // 将传入的数组中的对象，分别使用函数t处理，生成HTML
     for (var n = "", i = 0; i " + e.pattern + "" + svgCache[e.text] + "" + e.pattern + "" : "" + e.pattern + "" + e.text + "" + e.pattern + "";
那么就有了我们的漏洞二，poc 如下：
    $$
当用户打开包含上述代码的文档时，就会弹出一个计算器：
###  扩大战果：
这时候别高兴得太早，我们还能扩大战果：大家看到`inline_math`
这个名字有没有敏感的想到，既然有行内公式，就一定也有行间(块)公式，既然行内公式有漏洞，那么行间公式会不会也有问题呢？而我们当前的`s.decorate`
函数中只有对行内元素的处理，于是分别尝试全局搜索:`block_math`、`display_math,`、`math_block`
等关键词，最终找到了对`math_block` 的处理：
    case o.math_block:
     var F = document.createElement("script");
     return F.textContent = this.get("text") || "",
     F.setAttribute("type", "math/tex; mode=display"),
     "" + d.replace("{type}", $.localize.getString("Math", "Menu")) + "" + F.outerHTML + "";
我们看到，这里创建了一个 `type` 属性为`math/tex; mode=display` 的`script`
标签`F`，然后将待处理的文字内容（`this.get("text")`）直接赋值作为`textContent`，随后又将`F.outHTML` 拼接进了
HTML 代码中返回，问题就出在这里。本来将内容作为`textContent`，是不会导致XSS的，但是经过`F.outerHTML`
后再拼接回去，就和直接拼接 HTML 代码无异了。于是有了漏洞三，poc只需把漏洞二的 `$` 改成 `$$` 即可：
    $$$$
截止目前（2019.2.11），漏洞二已经在 v0.9.64 中被修复，而漏洞三在提交16天过后仍未修复。
## 结语：
这是我第一次挖掘 Webapp 的漏洞，思路和方法都难免有些不是很成熟的地方，欢迎并感谢大家讨论和指教 。