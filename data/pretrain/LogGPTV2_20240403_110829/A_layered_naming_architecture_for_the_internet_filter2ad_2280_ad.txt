many of the mechanisms therein. Moreover, as discussed above, we
think our proposal provides a set of primitives that endpoints can
use for network-level protection. At the application level, trade-
offs again arise. Our proposal sacriﬁces some convenience—one
cannot tell by looking at an SID whether it corresponds to one’s
“intended” target—but achieves stronger security properties, since
one’s computer can tell by looking at an SID or EID whether the
accompanying meta-data is correct. These issues are discussed in
more depth in Section 4.2 and in [37, 59].
We now turn to an issue we’ve ignored until now: how can one
effectively handle a ﬂat namespace?
4. COPING WITH FLAT NAMES
As we argued in Section 2, ﬂat names are uniquely able to pro-
vide persistence for all uses. However, ﬂat names also pose sig-
niﬁcant problems. Several systems have been designed to meet
these challenges, such as the Globe project [4], Open Network Han-
dles [37], and SFR [59]. Here we discuss two troubling aspects of
ﬂat names: they are hard to resolve and they aren’t human-readable.
We discuss these issues in turn.
4.1 Resolution
DNS achieves scalability through hierarchy.
It has been an
assumption, often implicit, that scalable resolution required such
structure. As a result, most network architecture proposals shied
away from requiring new global namespaces. The advent of
distributed hash tables (DHTs) suggests that ﬂat namespaces can
indeed be scalably resolved with a resilient, self-organizing, and
extensible distributed infrastructure. The literature on DHTs is
large and rapidly growing, so we don’t review the technical details
here. However, we note the following challenges, and possible
remediations, that come from our use of DHTs (or of any other
ﬂat-namespace resolution method).
DHTs arose in the context of peer-to-peer (P2P) systems,
but an unmanaged and untrusted P2P system would be unsuitable
for a crucial piece of the Internet infrastructure.
Instead, we
envision a well-managed, distributed collection of machines
providing the name resolution service using a DHT or other ﬂat
namespace resolution algorithm.
DNS’s hierarchical delegation naturally ensures each name is
unique and controlled by the relevant authority; ﬂat names make
these goals harder, but not impossible, to achieve. Several mecha-
nisms exist for global uniqueness (see [29, 43] for example). Data
integrity (i.e., ensuring that no one else can change the resolu-
tion of an entity’s name) is also challenging but possible (see,
e.g. [37, 58, 59]).
typical
resolution time—O(log n) for an n node
system—would be unacceptable for most name resolutions, par-
ticularly in comparison to DNS, since DNS often returns results
from a local name server. This latency issue can be addressed on
DHTs’
two levels. First, many DHT-style routing algorithms, either by
design or through caching, have far better than O(log n) perfor-
mance; see, for example, [21, 22, 39]. Second, a DHT-based reso-
lution infrastructure can be designed using local proxies [59], lo-
cal replication [24] or two-layered resolvers [29] that enable hosts
within a local network to ﬁnd local instances of entries written from
within the network; these schemes also provide fate-sharing in that
if an organization is disconnected from the rest of the Internet, its
hosts can still gain access to entries written locally. See [29,59] for
a detailed explanation of these issues.
One advantage of the DNS infrastructure is that it has a built-
in economic and trust model: domains provide their own name
servers. The central facilities required (the root servers) are mini-
mal and inexpensive. In contrast, our resolution infrastructure does
not have the “pay-for-your-own” model, as names are stored at es-
sentially random nodes. Our model raises the questions of who
will pay and why users should trust the infrastructure.
It would
be foolhardy to predict the eventual economic model of such an
infrastructure, but one could easily envision a future in which reso-
lution service providers (RSPs) form a competitive yet cooperating
commercial market much like current ISPs. Customers could pay
for lookups and for storing, likely a ﬂat fee for a reasonable num-
ber of accesses. The various RSPs would have mutual “peering”
relationships to exchange updates, much as the tier-1 ISPs all in-
terconnect today. Since each RSP would be judged by how well
it served its customers, the RSPs would have incentives to process
requests honestly.
4.2 Living in an Opaque World
More troubling than the performance and economic issues is the
lack of semantics in the names themselves. A ﬂat namespace is
highly versatile but provides no user-readable hints. Although this
fact poses little challenge for EIDs, which are replacing almost
equally opaque IP addresses, difﬁculty arises when dealing with
data and services for which the human-readability of URLs has
been crucial. This issue is addressed at length (in somewhat dif-
ferent ways) in the various proposals mentioned above, so here we
make only two comments. The ﬁrst relates to how users obtain an
SID. Users often ﬁnd URLs through search engines rather than di-
rectly typing them into a browser; search engines could continue
to perform the same function were services and data identiﬁed by
SIDs. Moreover, third-parties could offer directory services map-
ping human-readable canonical names to SIDs. The advantage of
these canonical names is that they are not part of the infrastructure
and thus can be offered by multiple competing entities.
Our second comment is that users need some assurance that the
SID they have in hand points to the intended target. A URL like
http://www.nytimes.com provides hints (sometimes false) about
its target but an opaque bit string gives no such assurance. Here,
bit strings could be accompanied by meta-data that includes cryp-
tographic statements like “Authority A says that this SID points to
the newspaper New York Times.” Again, authorities like Authority
A would not be part of the resolution infrastructure but instead part
of a competitive market of SID authenticators.
In addition,
embedding cryptographic meaning in the
identiﬁers—e.g., by deriving an identiﬁer
from a collision-
resistant hash of a public key [28]—allows users to verify that the
output of the resolution step is the “correct” result for the given
identiﬁer.
5. RELATED WORK
Our work, as noted in Section 1, borrows heavily from three
projects—HIP, SFR, and i3—and can be seen as synthesizing these
works, each of which has a narrower goal, into a larger whole.
However, many other works describe related ideas—so many that
here we can only present a superﬁcial overview.
Saltzer [44] was one among many [8,9,17,26,27,46] to make ﬁne
distinctions among network elements; the most common, and least
practiced, of these distinctions is between a host’s identiﬁer and
its address (see [26] for a comprehensive discussion of this topic).
This distinction is embedded in two recent proposals: Peernet [13]
and UIP [14] (from which we also borrow the EID mechanism).
Both use overlays with DHT-inspired routing algorithms: Peernet
serves mobile networks, and UIP seeks to interconnect heteroge-
neous networks, using all nodes in the network as routers. Our ap-
proach differs from UIP’s in that while we look for mechanisms to
accommodate middleboxes, UIP’s overlay of peers makes certain
classes of middleboxes, like NATs, transparent.
The Internet Indirection Infrastructure (i3) [53] uses ﬂat iden-
tiﬁers and supports intermediaries and service composition. The
chief difference between i3 and what we describe here is when the
binding between identiﬁer (SID or EID) and IP address is done. i3
uses late binding, having each packet (in the general case) sent to
the resolution infrastructure, whereas the approach here uses early
binding with the lookup occurring before packets are transmitted.
However, the distinction between these approaches is blurred when
i3 uses extensive caching or when our approach re-resolves on ev-
ery packet.
Creating location-independent and persistent names for objects,
and an accompanying infrastructure for resolution, has long been
the goal of the URN literature [23, 50, 51]. In addition, the Open
Network Handles work [36, 37] argues for ﬂat, unfriendly domain
names for Web sites. The Globe project [4, 58] envisions a single
infrastructure for mapping from (possibly human-unfriendly) per-
sistent object identiﬁers to current locations.
There are an increasing number of proposals that range from
architectural enhancements to radical refactorings. These include
earlier proposals like PIP [16], IPv6 [12], Dynamic Networks [38],
Active Networks [55], Nimrod [7], and more recent proposals like
Smart Packets [45], Network Pointers [56], Predicate Routing [41],
Role-Based Network Architecture [5], and Ephemeral State Pro-
cessing [6]. While each of these proposals shares at least some of
our goals, they all differ in two respects: ﬁrst, they would (in their
full glory) require signiﬁcant modiﬁcations to all network elements,
not just hosts and middleboxes. Second, while some of these pro-
posals are intended to obsolete middleboxes, none is intended to
accommodate them.
Five other proposals deserve special mention. The authors of
TRIAD [20] share nearly all of our motivations. They observe that
data should be ﬁrst-class objects in the modern Internet, capable
of being addressed, and they, like many others, create location-
independent end-host identiﬁers. The technical details of TRIAD’s
solution and our own are quite different:
in TRIAD, the resolu-
tion step and the routing step are conﬂated, thereby improving la-
tency, and at the shim layer between IP and transport, they use
forward and reverse tokens that record the path taken, instead of
stacks. However, the main difference between our proposals is that
identiﬁers in TRIAD, both of hosts and data, are derived from do-
main names, and indeed, the TRIAD approach relies on the seman-
tics and hierarchy of domain names to aggregate routes to content
names. As we hold the conviction that persistent names ought to
be ﬂat, and as we have two layers of such names, our technical
problems differ from those of TRIAD (and vice-versa).
IPNL [18] also shares many of our motivations. It creates sepa-
rate end-host identiﬁers and leaves the core IPv4 routing infrastruc-
ture untouched. Under IPNL, the end-host identiﬁers are domain
names, though the authors acknowledge that a ﬂat, cryptograph-
ically strong identiﬁer, as in HIP, may be preferable for security
reasons.
FARA [8] is a meta-architecture that actual network architectures
could “instantiate.” In FARA, the basic unit of communication is
the entity (analogous to our service), and packets are logically de-
livered from one entity to another, with no explicit invocation of
the hosts underneath the entities or between them. The details of
the exact mapping of our concepts to FARA’s are beyond this pa-
per’s scope, but this mapping reveals that while our proposal could
be viewed as an instantiation of, or consistent with, FARA, two as-
pects contradict FARA’s spirit: ﬁrst, FARA avoids notions of host
identity. Second, FARA’s AId (which identiﬁes a connection be-
tween two entities) is supposed to have only local scope, whereas
our analogous construct (the SID) is a global identiﬁer.
P6P [57, 62] proposes a DHT-based infrastructure as a way to
deploy IPv6: sites send IPv6 packets to their gateway DHT node,
which treats the IPv6 destination address as a ﬂat identiﬁer, uses
this identiﬁer to look up the IPv4 address of a counterpart DHT
gateway, and then sends the packet over traditional IPv4 to this
counterpart, where the encapsulation is inverted and the packet is
delivered to its destination. P6P shares many of our motivations but
does not give hosts persistent names (if a site changes ISPs, all of
the identiﬁers at the site change).
Mobile IP [34] creates host identiﬁers out of IP addresses,
thereby separating location and identity, in some measure. Mo-
bile IP also uses a form of delegation, but a limited one: when a
given host is not in its home network, then an intermediary (called
the home agent) must receive all packets logically destined for the
host in question, and the intermediary is required to be in the host’s
home network.
6. DISCUSSION
This paper proclaims four design principles and derives from
them a layered naming architecture that alleviates some of the In-
ternet’s current problems. Services and data could be named per-
sistently yet ﬂexibly, elevating them to ﬁrst-class network elements.
Middleboxes, long the bane of network architects, would be virtu-
ously reincarnated as either application- or network-level interme-
diaries. Mobility would be seamless, and there would be modest,
but by no means complete, protection against denial-of-service at-
tacks.
While we believe in our proposal, the details are less important
than three deeper messages we now emphasize. The ﬁrst is that
DHTs allow us, for the ﬁrst time, to contemplate using ﬂat names-
paces in an architecture. While the transition to such namespaces
is hardly painless, the payoff is profound. Once a ﬂat namespace
is established, it can be used to name anything. No longer will our
old namespaces, DNS names and IP addresses, encumber network
elements with their underlying structure. New applications will no
longer face a Devil’s choice between accepting the strictures of an
existing but inappropriate namespace or bearing the overhead of
creating a new one; instead, with a ﬂat namespace, all new network
elements can be effortlessly incorporated.
The second message is that the extra naming layers will shield
applications from the underlying routers. One of the great frustra-
tions of network architects is how quickly the Internet went from a
ﬂexible academic playground to an ossiﬁed commercial infrastruc-
ture. It feels, to many, as if a work-in-progress has been prema-
turely but permanently frozen in time. Perhaps one day signiﬁcant
changes will come to this infrastructure, or a general-purpose over-
lay will render it irrelevant. In the meantime, however, it seems cru-
cial to insulate applications and protocols from this underlying in-
frastructure. Our layered naming architecture binds to IP addresses