The format of tracepoints is sabsystem:eventname (for example, kmem:kmalloc) [47]. Tracers refer
to the first component using different terms: as a system, subsystem, class, or provider.
2.9.1Adding Tracepoint Instrumentation
As an example of a tracepoint, this section explains how sched:sched_proces_exec is added to the
kernel.
There are header files for tracepoints in include/trace/events. This is from sched.h:
define TRACE_SYSTEN sched
[...]
/*
* Tracepoint for execi
TRACE_EVENT (sched_process_exec,
*/
24 Id call it *best-effort 
---
## Page 91
54
Chapter 2 Technology Background
TP_oro (struct task_struct *p, pid_t old_pid,
struct 1inux_binprm *bpm),
TP_ARGs (p, o1d_pld, bpxn),
TP_STRUCT_entry 1
_string 1
filenant,
bpcn=>filename)
_fie1d (
pid_t,
p1d
_field (
prd
old_pid
TP_fast_assign [
_assign_str (fi.lename,
bprn=>filename) 
__entry=>p1d
rpdold_pid
pdp[o =
3 
TP_printk (*fllenane=ls pid=\d old_pld=td",
_entry->pid,
_entry->old_pid)
) 
This code defines the trace system as sched and the tracepoint name as sched_process_exec. The
lines that follow define metadata, including a “format string° in TP_printk(—a helpful summary
that is included when tracepoints are recorded with the perf(1) tool.
The previous information is also available at runtime via the Ftrace framework in /sys, via format
files for each tracepoint. For example:
 cat /sys/kezne1/debug/tracing/events/sched/sched_process_exec/fornat
nane1 sched_process_exec
86Z =0I
format1
fleld:unslqned shoxt conmon_type:
offset:0;
size:2; slgned:0
fieldiunsigned char cormon_flagsr
offset:2
size:1; signed:0;
field:unslgned chaz cormon_preenpt_count
offset:3; size:l; slgned:0;
field:int conmon_pid;
offset:4;
size:4;
signed:1;
field:_data_loc
char[] filenase
offset:B;
size14; signed:1
field:pld_t pld,
offset:12;
s1ze:4;
s1gned:1;
fieldipid_t old_pid;
offset:16
size14
signed:1;
print fmt: *filenane=s pid=id old_pid=4d*,
_get_str (filename)  REC>pid,
REC=>o1d_p1d
---
## Page 92
2.9  Tracepoints
55
This format file is processed by tracers to understand the metadata associated with a tracepoint.,
The following tracepoint is called from the kernel source in fs/exec.c, via trace_sched_process_exec():
static int exec_binprn(struct linux_binprm *bprm)
pid_t old_pid, old_vpid;
int ret:
/* Keed to Cetch pid befoxe load_binaxy changes 1t */
o1d_pid = current=>pid;
rcu_read_lock () 
old_vpid = task_pid_nr_ns(current., task_active_pid_ns (current->parent) 
rcu_read_unlock (1 
ret = search_binary_handler (bpzn) :
if (ret >= 0) 
 (uxdq) uxda1tpne
trace_sched_process_exec(current, old_pid, bprm) :
ptrace_event (PTRACE_EVENT_EXEC,_o1ld_vpia) 
proc_exec_connector (current) 
[- - - ]
The trace_sched_process_exec() function marks the location of the tracepoint.
2.9.2How Tracepoints Work
It is important that the not-enabled overhead of tracepoints be as tiny as possible, to avoid paying
a performance tax for something that is not in use. Mathieu Desnoyers accomplished this by
using a technique called *static jump patching. It works like this, provided that a necessary
compiler feature is available (asm goto):
1. At kernel compile time, an instruction is added at the tracepoint location that does
nothing. The actual instruction used depends on the architecture: For x86_64, it is a 5-byte
no-operation (nop) instruction. This size is used so that it can be later replaced with a
5-byte jump (jmp) instruction.
2. A tracepoint handler (trampoline) is also added to the end of the function, which iterates
over an array of registered tracepoint probe callbacks. This increases the instruction
text size a litle (as a trampoline, it is a small routine, so execution jumps in and then
immediately bounces out), which may have a small impact on the instruction cache
fow to a tracepoimt [Desnyers 09[Desnyers 096]; however, this wos not upstreamed, in favor of jump patching
25 Earlier versions used load immediate in
---
## Page 93
56
Chapter 2 Technology Background
3. At runtime, when a tracer enables the tracepoint (it may already be in use by other running
tracers):
a. The array of tracepoint callbacks is modified to add a new callback for the tracer,
synchronized through RCU.
b. If the tracepoint was previously disabled, the nop location is rewritten to a jump to the
tracepoint trampoline.
4. When a tracer disables the tracepoint:
a. The array of tracepoint callbacks is modified to remove the callback, synchronized
through RCU.
b. If the last callback is removed, the static jump is rewritten back to a nop.
This minimizes the overhead of the not-enabled tracepoint such that it should be negligible.
If asm goto is not available, a fallback technique is used: Instead of patching a nop with a jmp, a
condlitional branch is used, based on a variable read from memory.
2.9.3 Tracepoint Interfaces
There are two interfaces for tracepoints:
■ Ftrace-based, via /sys/kernel/debug/tracing/events: which has subdirectories for each
tracepoint system, and files for each tracepoint itself (tracepoints can be enabled and
disabled by writing to these files.)
perf_event_open(): as used by the perf(1) tool and, more recently, by BPF tracing (via the
perf_tracepoint pmu).
2.9.4Tracepoints and BPF
Tracepoints provide kernel static instrumentation for BCC and bpftrace. The interfaces are:
• BCC: TRACEPOINT_PROBE0
 bpftrace: The tracepoint probe type
BPF supported tracepoints in Linux 4.7, but I developed many BCC tools prior to that support and
had to use kprobes instead. This means that there are fewer tracepoint examples in BCC than I
would like, due simply to the order in which support was developed.
An interesting example of BCC and tracepoints is the tcplife(8) tool. It prints one-line summaries
of TCP sessions with various details (and is covered in more detail in Chapter 10):
: tep1ife
PIDCOMM
LADDR
LPORT RADDR
RPORT TX_KB RX_KB MS
22597 recozdPzog 127,0.0.1
46644 127.0.0.1
28527
EZ*0 0
3277redis-serr 127,0.0.1
28527 127,0.0.1
46644
0 0.28
22598 cux1
100 , 66. 3.172
61620 52.205,89.26
80
6L*16 1
---
## Page 94
2.9  Tracepoints
57
22604 cur1
100 , 66, 3.172
44400 52.204,43,121
80
1121.38
22624 recordProg 127,0.0.1
46648 127,0.0.1
28527
0 0.22
[...]
I wrote this tool before a suitable tracepoint existed in the Linux kernel, so I used a kprobe on the
tcp_set_state() kernel function. A suitable tracepoint was added in Linux 4.16: sock:inet_sock_set,
state. I modified the tool to support both so that it would run on both older and newer kernels.
The tool defines two programsone for tracepoints and one for kprobes—and then chooses
which to run with the following test:
if (BPF,tracepoint_exists (*sock*, *inet_sock_set_state*)} 1
bpf_text += bpf_text_tzacepoint
e1se :
qoxdxxsgdq =+ 1xegdq
As an example of bpftrace and tracepoints, the following one-liner instruments the sched:sched_
process_exec tracepoint shown earlier:
+ bpftrace -e 'tracepoint:sched:scbed_process_exec ( printf ("exec by 3s\n", comm) : 1
Attaching 1 pzobe..
exec by 1s
exec by sleep
exec by date
°C
This bpftrace one-liner prints out the process names that called exec().
2.9.5 BPF Raw Tracepoints
Alexei Starovoitov developed a new interface for tracepoints called BPF_RAW_TRACEPOINT,
which was added to Linux 4.17 in 2018. It avoids the cost of creating the stable tracepoint
arguments, which may not be needed, and exposes the raw arguments to the tracepoint. In a
way, this is like accessing tracepoints as though they were kprobes: You end up with an unstable
API, but you get access to more fields, and don’t pay the usual tracepoint performance taxes. It is
also a little more stable than using kprobes, since the tracepoint probe names are stable, and only
the arguments are not.
Alexei showed that the performance with BPF_RAW_TRACEPOINT was better than with both
kprobes and standard tracepoints, with results from a stress test [48]:
sanples/bpf/test_overhesd performance on 1 cpu:
tracepoint
base
kprobe+bpf tracepoint+bpf rax_tracepoint+bpf
task_renane
1.1H
T69K
947K
1 . 0M
urandon_resd
1789K
697K
750K
755K
---
## Page 95
58
Chapter 2 Technology Background
This may be especially interesting for technologies that instrument tracepoints 24x7, to minimize
the overhead of enabled tracepoints.
2.9.6 Additional Reading
For more information, see Documentation/trace/tracepoints.rst in the kernel source, by Mathieu
Desnoyers [47]-
2.10USDT
User-fevel statically alefined tracing (USDT) provides a user-space version of tracepoints. USDT
has been implemented for BCC by Sasha Goldshtein, and for bpftrace by myself and Matheus
Marchini.
There are numerous tracing or logging technologies for user-level software, and many
applications come with their own custom event loggers that can be enabled when needed. What
makes USDT different is that it relies on an external system tracer to activate. The USDT points
in an application can’t be used, and they do nothing, without an external tracer.
USDT was made popular by the DTrace utility from Sun Microsystems, and it is now available
in many applications.° Linux has developed a way to make use of USDT, which came from
the SystemTap tracer. The BCC and bpftrace tracing tools make use of this work, and both can
instrument USDT events.
One leftover from DTrace is still evident: Many applications do not compile USDT probes
by default but require a configuration option such as -enab1edt.race=probes or
--v1 th-dtxace,
2.10.1Adding USDT Instrumentation
USDT probes can be added to an application either using the headers and tools from the
systemtap-sdlt-dev package, or with custom headlers. These probes define macros that can be
palosd g a1 supod uogequaumnsu 1s aeauo ot apoo no u suogeoo [eogo[ e paoed
Susn papduoo aq ueo qom aqdures1psn/saduexa apun apdurexa apoo 1sn e surequo
I step through an example of using Folly.
systemtap-sdt-dev headers or headers from Facebook's Folly~ C++ library [11]. In the next section,
Folly
The steps to add USDT instrumentation using Folly are:
1.Add the header file to the target source code:
include *folly/tracing/StaticTracepoint.h*
26 In some small pert, this ocurred through my omn effrts: I promoted USDT added USOT probes to Firefx fr
JavsScript inspection and other applications, and supported development efforts for other USDT providers.
27 Folly is a lose scrorym of facebook Open Souroe Library:
---
## Page 96
2.10USDT
59
2. Add USDT probes to the target locations, of the format:
FO1LY_sot(provider, nane, argl, arg2, ..-)
The *provider* groups the probes, the *name” is the name of the probe, and then optional
arguments are listed. The BCC USDT example contains:
F0LLY_SDT (usdt_sanple_libl, operation_start, operationId,
regoest.input () -c_str 11) 
This defines the probe as usdlt_sample_lib1:operation_start, with the two arguments
provided. The USDT example also contains an operation_end probe,
3. Build the software. You can check that the USDT probe exists by using readelf(1):
S reade1f -n usdt_sample_1ib1/1ibusdt_sample_1ib1.s0
[..-]
Displaying notes found in: -note,stapsdt
Ovner
stapsdt
Dx00oo0047 NT_sTAPSDT (SystenTap probe descxlptors)
Data slze
Descriptlon
Provider: usdt_sample_1ib1
Yase: operation_end
Location: 0x00oo0oo0oo00cdd2, Baae: 0x00o0oo0ooooooo0, Senapbhoxe:
0x0000000000000000
Axgunents: =Bg1rbx =8@rax
stapsdt
0x0000004f
 NT_STAPsDT (SystenTap probe descxlptors)
Provider: usdt_sample_1ib1
Yane: operation_start
Location: 0x00o000000000tebe, Base: 0x0o00o000000000o0, Senapboxe:
0x0000000000000000
xexsée-[dqxs] +ot-B8-1sueumbxy
The n option to readelf(1) prints the notes section, which should show information about
the compiled USDT probes.
4. Optional: Sometimes the arguments you'd like to add to a probe are not readily available
at the probe location, and must be constructed using CPU-expensive function calls. To
avoid making these calls all the time when the probe is not in use, you can add a probe
semaphore to the source file outside of the function:
FOLLY_SDT_DEFINE_SENAPHORE (provider, nane)
Then the probe point can become:
if (FOLL_SDT_IS_ENABLED (provider, nane)1[
... expensive argument processing ...
FOLLY_SDT_WITH_SEMAPBoRE (provider, name, argl, arg2,..-))
Now the expensive argument processing occurs only when the probe is in use (enabled). The
pasn st aqod ap uaum u as ueo sjoo Supen pue (t)gapeau u aqsta aq Im ssauppe anoudeas
This does complicate tracing tools a little: When semaphore-protected probes are in use, these
tracing tools typically need to have a PID specified so that they set the semaphore for that PID.
---
## Page 97
60
Chapter 2 Technology Background
2.10.2
How USDT Works
W'hen applications are compiled, a no-operation (nop) instruction is placed at the address of
the USDT probe. This address is then dynamically changed by the kernel to a breakpoint when
instrumented, using uprobes.
As with uprobes, I can illustrate USDT in action, although it's a little more work. The location
of the probe from the previous readelf(1) output was Ox6a2. This is the offset from the binary
segment, so you must first learn where that begins. This can vary thanks to position independent
executables (PIE), which make more effective use of address space layout randomization (ASLR):
LC d- qpb +
[..-]
(gdb)info proc mappings
process 4777
Mapped address spaces:
Start Addr
xppY pu3
Size
offset objfile
0x55a75372a000
0x55a75372b000
0x1000
0x0/home/bgreg/Lang/c/tick
0x55a75392a000
0x55a75392b000
0x1000
0x0/home/bgregg/Lang/c/tick
Dx55a75392b000
0x55a75392c000
0x1000
0x100o/home/bgregg/Lang/c/tick
...]
The start address is 0x55a75372a000. Printing out the instruction at that address plus the offset of
the probe, 0x6a2:
[gdb) d1sas 0x55a75372a000 + Dx6a2
[...]
0x000055aT53T2a695 : m0v
rs1, =0x20 (5bp)
0x000055a75372a699 : mov]
(4q)x-*gx0$
Dx000055a75372a6a0 : jnp
0x000055a75372af6s2 : nop
0x55a75372a6cT 
0x000055a75372afa3 : 0v
-0×4 (5xbp), 5eax
0x000055a75372afa6 : mov
Resx, tesi
0x000055aT5372a6a8 : 1ea
xb5 (5x1p), d
#0x55a75372a764
[.. 
And now with the USDT probe enabled:
(gdb)disas 0x55a75372a000 + 0x6s2
[. - -]
0x000055a75372a695 : mov
$rsi, =0x20 (bp)
0x000055aT53T2a699 : mov1
$0x0, -0x4 (1rbp)
0x00055a75372afa0 : jnp
0x55a75372a6c7 
0x000055a75372a6a2 : int3
---
## Page 98
2.11 Dynamic USDT
61
0x000055a75372afs3 : mov
0x4 (3rbp), $eax
0x000055a753T2a6a6 : m0v
leax, les1
0x000055a75372afa8 : lea
0xb5 13rip) , 3di
0×55a75372a764
[. - -]
The nop instruction has changed to int3 (x86_64 breakpoint). When this breakpoint is hit, the
kernel executes the attached BPF program with the arguments for the USDT probe. The nop
instruction is restored when the USDT probe is deactivated.
2.10.3 BPF and USDT
USDT provides user-level static instrumentation for BCC and bpftrace. The interfaces are: