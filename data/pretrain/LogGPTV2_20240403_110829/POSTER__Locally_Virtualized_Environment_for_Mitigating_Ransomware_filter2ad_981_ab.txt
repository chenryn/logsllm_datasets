### 3. SYSTEM DETAILS

**System:**
Our solution, called **FileTracker**, employs a distributed client-server architecture. The client component comprises a user-mode analytics module and an event monitoring kernel module, as depicted in Figure 1. The kernel module is further divided into a file system filter driver and a process monitoring driver. 

- **File System Filter Driver:** This driver provides I/O event notifications, access to raw read/write buffers, and the ability to virtualize I/O calls.
- **Process Monitoring Driver:** This module is responsible for notifying process-related events and performing event-based integrity scans of running processes and file system filter layers.

The FileTracker server aggregates all system events from each node and constructs a global model of normal and abnormal file access and modification behavior. These behavior models are then shared with each local node at regular intervals.

**Figure 1: Client Component**

**Feature Extraction & Selection:**
Feature selection is crucial as it directly impacts the accuracy and performance of the system. We spent a month observing 50 users to build our normal behavior model. For the malicious behavior model, we ran existing and new families of ransomware on systems with our solution installed. Based on our observations, we categorized suspicious features into three broad categories:

1. **Category 1 (C1):** Features related to files (subject).
2. **Category 2 (C2):** Features related to processes (actor).
3. **Category 3 (C3):** Features related to impact (action).

Table 2 lists the most commonly exhibited behavioral traits.

**Attack Detection:**
Detecting a kernel-mode ransomware that operates at a lower altitude than the detector is challenging because all read and write operations appear normal to the detector. However, on 64-bit Windows 7 and above, this mode is only possible if the OS is running in testing mode and User Account Control (UAC) is disabled or bypassed. To detect such ransomware, we use our process monitoring component, which looks for changes in the filter driver hierarchy.

For detecting more common user-mode attacks, we employ a two-pronged strategy involving behavioral and structural analysis. The detector module looks for the behavioral traits listed in Tables 1 and 2. A process is considered potentially harmful if it exhibits at least three of these traits. Once a candidate is identified, structural analysis is performed to detect known patterns or extract new ones.

To differentiate between normal and malicious mass deletions, we use path diversity and MIME diversity. Path diversity helps reduce false positives, as normal processes tend to deal with less diverse paths. Entropy density indicates the accumulation of encrypted content in a folder. All anomalous behaviors are notified to the user and the server for corrective actions and model updates.

**Table 2: Additional Behavioral Traits**

**Virtualization:**
The file system filter driver provides virtualization, which can operate in either local or quarantine mode.

- **Local Mode:** Reroutes all I/O to a pre-designated folder.
- **Quarantine Mode:** Creates a sparse file and reroutes all I/O to it.

In the case of suspicious file system activity, the filter driver creates a virtual view of the resources under attack for the suspected process. For all reads from the suspected process, it first checks if a version exists in the virtual view; if so, that version is presented. Otherwise, the original file is presented. All file write system calls go to the virtual view. This virtualization prevents further losses and aids in real-time discovery of new behavioral traits.

**Culprit Identification:**
Some ransomware variants, including existing ones, inject themselves into normal processes. If the host process is a system process, its termination may destabilize the entire system. For known processes, our system detects injected modules by comparing the checksums of all loaded modules with those of uninfected processes. In the case of a positive result, we attempt to unload the injected module or terminate the process if it is not a system process. Additionally, we analyze the process command line and payload, if available, to detect virtual machine-based variants and provide more informative messages to the user, enhancing our global model.

**Table 2: Behavioral Traits**

| Feature | Strain 1 | Strain 2 | Strain 3 |
|---------|----------|----------|----------|
| File Attributes (C1) | (cid:88)(cid:88) | (cid:88) | (cid:88)(cid:88) |
| Path Diversity (C2) | (cid:88) | (cid:88)(cid:88) | (cid:88)(cid:88) |
| Process Hierarchy (C2) | (cid:88)(cid:88) | (cid:88) | (cid:88)(cid:88) |
| Bytes Read (C2) | (cid:88)(cid:88) | (cid:88) | (cid:88)(cid:88) |
| Bytes Written (C2) | (cid:88)(cid:88) | (cid:88) | (cid:88)(cid:88) |
| File Handles (C2) | (cid:88) | (cid:88) | (cid:88)(cid:88) |
| Entropy Density (C3) | (cid:88) | (cid:88)(cid:88) | (cid:88)(cid:88) |
| Rate of Creation (C3) | (cid:88)(cid:88) | (cid:88) | (cid:88)(cid:88) |
| Rate of Modification (C3) | (cid:88)(cid:88) | (cid:88) | (cid:88)(cid:88) |
| Rate of Size Change (C3) | (cid:88)(cid:88) | (cid:88) | (cid:88)(cid:88) |
| Rate of MIME Change (C3) | (cid:88)(cid:88) | (cid:88) | (cid:88)(cid:88) |

### 4. RESULTS & CONCLUSION

We executed all ransomware samples on real machines, as some have built-in protection against virtual environments. We profiled our solution for CPU, memory, and disk usage on machines with Intel i5 4310U @2 & @2.6 GHz, 4 GB RAM, and running Windows 7 64-bit with TESTSIGNING ON. Preliminary results are promising, as we detected all existing and new variants without losing more than 20 files. CPU usage was no more than 1-2%, and memory usage did not exceed 40 MB. There was a slight delay, in the order of milliseconds, in disk activity due to the rerouting of I/O calls to user mode for analysis.

Refer to Table 2 for the behavioral traits exhibited by Strains 1, 2, and 3. We achieved optimal detection performance by using Category 3 for screening, Category 2 for confirmation, and Category 1 for cross-validation. We reduced false positives from applications like 7z archiver by using path diversity and observing them in the virtual view.

In this work, we have demonstrated that new ransomware variants are possible. We have extended the existing literature by adding new behavioral traits for these variants. As ransomware evolves, new behaviors will emerge. The current use of static behavior indicators will either result in high false positives or missed detections. To mitigate this, we used file system virtualization to minimize losses and learn new behaviors during an attack. In future work, we will harden our identification logic and make the virtualization layer more robust.

### 5. REFERENCES

1. Symantec. An ISTR Special Report: Ransomware and Businesses 2016. http://goo.gl/CjH90k, 2016.
2. Washington Post. LA Hospital Pays Hackers After Ransomware Attack. https://goo.gl/IVx60L, 2016.
3. Young et al. Cryptovirology: Extortion-based security threats and countermeasures. In Symposium on Security and Privacy, pages 129–140. IEEE, 1996.
4. Scaife et al. Cryptolock (and drop it): stopping ransomware attacks on user data. In International Conference on Distributed Computing Systems. IEEE, 2016.
5. Kharraz et al. Unveil: A large-scale, automated approach to detecting ransomware. USENIX Security Symposium, 2016.
6. Ma et al. Shadow attacks: automatically evading system-call-behavior based malware detection. Journal in Computer Virology, 8(1-2):1–13, 2012.
7. Kharraz et al. Cutting the gordian knot: a look under the hood of ransomware attacks. In International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment, pages 3–24. Springer, 2015.
8. Shukla et al. Poster: Winover enterprise dark data. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015.