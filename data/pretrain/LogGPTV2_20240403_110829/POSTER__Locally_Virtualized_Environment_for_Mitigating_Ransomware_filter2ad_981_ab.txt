3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14: end procedure
(content, metadata) := read ﬁle
buﬀer(cid:48) := read high entropy ﬁle
buﬀer := encrypt content & metadata
ﬁle(cid:48) := create new ﬁle (cid:46) Fixed or random path
write buﬀer in f ile(cid:48)
update path database with ﬁle(cid:48)
high entropy ﬁle := ﬁle(cid:48)
end for
create a remover process
Apart from these, we created other variants depicting mul-
titude of diﬀerent behaviors, including one which operates
as a kernel ﬁlter driver.
3. SYSTEM DETAILS
System: Our solution, called FileTracker, has a distributed
client-server architecture. The client consists of a user mode
analytics component and an event monitoring kernel mod-
ule, shown in Figure 1. The kernel module is further com-
posed of a ﬁle system ﬁlter driver and a process monitoring
driver. The ﬁlter driver provides the I/O event, access to
raw read/write buﬀer and capability to virtualize the I/O
calls. The process monitoring module is responsible for no-
tifying process related events. Also, it performs event based
integrity scan of the running processes and ﬁle system ﬁl-
ter layers. The FileTracker server aggregates all the system
events from each node and builds a global model of normal
and abnormal ﬁle access and modiﬁcation behavior. These
behavior models are then shared with each local node at
regular intervals.
Figure 1: Client Component
Feature Extraction & Selection: Feature selection is
one of the important point as it directly aﬀects the accuracy
and performance of the system. We spent a months time in
observing 50 users for building our normal behavior model.
Whereas, the malicious behavior model was built by running
existing and new families of ransomware on systems with our
solution installed. Based on our observation we have divided
the suspicious features in three broad categories. Category
1 (C1), consists of features directly related to ﬁles (subject),
To HardwareI/O ManagerFilter ManagerFilter Manager(FileTracker)Filter Manager(Anti Virus)Filter Manager(BitLocker)File System DriverUser I/O RequestDecreasing Altitude OrderDetectKernel SpaceUser SpaceLooks suspicious?VirtualizeIdentifyUpdate ModelTerminate/Unload/VirtualizeYesNoFileTrackerProcess Monitoring DriverFileTracker Server1785Category 2 (C2), consists of features related to a process
(actor), and ﬁnally, Category 3 (C3), consists of features
related to impact (action). Features shown in Table 2 are
the most commonly exhibited behavioral traits.
Attack Detection: A kernel mode ransomware at lower
altitude than the detector is much harder to detect as all the
read and writes appear normal to the detector. Although,
on 64 bit Windows 7 and above, this mode is only possi-
ble if the OS is running in testing mode and User Account
Control (UAC) is disabled or bypassed. To detect this kind
of ransomware we use our process monitoring component
which looks for any ﬁlter driver hierarchy change. For de-
tecting user mode attacks, which are much more common,
we applied a two pronged strategy consisting of behavioral
and structural analysis. The detector module looks for the
behavioral traits listed in Table 1 and 2. A process is consid-
ered potentially harmful if it exhibits at least 3 traits. Once
a candidate is found then structural analysis is performed
for detecting known patterns or extracting new ones. For
diﬀerentiating between normal and malicious mass deletions
we use path diversity along with mime diversity. Path diver-
sity helped us in reducing false positives as normal processes
tend to deal with less diverse paths. Similarly, entropy den-
sity indicates the accumulation of encrypted content in a
folder. All anomalous behaviors are notiﬁed to the user and
the server for corrective actions and model update.
Strain 1 Strain 2 Strain 3
(cid:88)(cid:88) : Observed Behavior, (cid:88) : Possible Behavior
Table 2: Additional Behavioral Traits
Virtualization: The virtualization aspect is provided by
the ﬁle system ﬁlter driver and operates in local or quar-
antine mode.
In local mode, it reroutes all I/O to a pre-
designated folder. Whereas in quarantine mode it creates a
sparse ﬁle and reroute all I/O to it. In case of suspicious
ﬁle system activity the ﬁlter driver creates a virtual view of
the resources under attack for the suspected process. For all
the reads from the suspected process, it ﬁrst checks whether
there exist a version in the virtual view, if yes then that
is presented, otherwise original ﬁle is presented. The ﬁle
write system calls always go to the virtual view. The vir-
tualization of ﬁle system prevent further losses and helps in
discovering new behavioral traits in real time.
Culprit Identiﬁcation: Some variants, including the ex-
isting ones, operate by injecting themselves into a normal
process. If the host process turns out to be a system process
then its termination may destabilize the complete system.
For known processes our system currently supports detec-
tion of injected module by comparing the checksum of all
the loaded modules with the checksum of modules of unin-
Features
File Attributes (C1)
Path Diversity (C2)
Process Hierarchy (C2)
Bytes Read (C2)
Bytes Written (C2)
File Handles (C2)
Entropy Density (C3)
Rate of Creation (C3)
Rate of Modiﬁcation (C3)
Rate of Size Change (C3)
Rate of Mime Change (C3)
(cid:88)(cid:88)
(cid:88)
(cid:88)(cid:88)
(cid:88)(cid:88)
(cid:88)(cid:88)
(cid:88)(cid:88)
(cid:88)(cid:88)
(cid:88)(cid:88)
(cid:88)
(cid:88)
(cid:88)(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)(cid:88)
(cid:88)
(cid:88)
(cid:88)(cid:88)
(cid:88)(cid:88)
(cid:88)(cid:88)
(cid:88)(cid:88)
(cid:88)
(cid:88)
(cid:88)(cid:88)
fected process. In case of positive result we try to unload the
injected module or terminate if it is not a system process.
Furthermore, we also analyze process command line and the
payload if it is available. This last step helps us in detecting
virtual machine based variants and allows us to show more
helpful message to user and enhance our global model.
4. RESULTS & CONCLUSION
We executed all ransomwares on real machines as some of
them have inbuilt protection against virtual environments.
We proﬁled our solution for CPU, memory and disk usage
on machines with Intel i5 4310U @2 & @2.6 GHz with 4 GB
RAM and running Windows 7 64 bit with TESTSIGNING
ON. The preliminary results seem promising as we were able
to detect all of the existing and the new variants without los-
ing more than 20 ﬁles. The CPU usage was not more than
1-2% and memory usage not more than 40 MB. There was
slight delay observed, in magnitude of milliseconds, in disk
activity as we rerouted I/O calls to user mode for analy-
sis. Refer to Table 2 for behavioral traits exhibited by the
Strains 1, 2 & 3. We got optimal detection performance by
using category 3 as screening, category 2 as conﬁrmation
and category 1 as cross validation step. We have reduced
false positives from applications like 7z archiver by using
path diversity and observing it in virtual view.
In this work we have shown that new variants of ran-
somware are possible. We have extended the existing lit-
erature by adding new behavioral traits for new variants.
As ransomware will evolve more new behaviors are bound
to be seen. The current usage of static behavior indicators
will either result in high false positives or missed detection.
To mitigate that, we have used ﬁle system virtualization to
minimize losses and learn new behaviors during an attack.
In the future work we will harden our identiﬁcation logic
and will make the virtualization layer more robust.
5. REFERENCES
[1] Symantec. An ISTR Special Report: Ransomware and
Businesses 2016. http://goo.gl/CjH90k, 2016.
[2] Washington Post. LA Hospital Pays Hackers After
Ransomware Attack . https://goo.gl/IVx60L, 2016.
[3] Young et.al. Cryptovirology: Extortion-based security
threats and countermeasures. In Symposium on
Security and Privacy, pages 129–140. IEEE, 1996.
[4] Scaife et.al. Cryptolock (and drop it):stopping
ransomware attacks on user data. In International
Conference on Distributed Computing Systems. IEEE,
2016.
[5] Kharraz et.al. Unveil: A large-scale, automated
approach to detecting ransomware. USENIX Security
Symposium, 2016.
[6] Ma et.al. Shadow attacks: automatically evading
system-call-behavior based malware detection. Journal
in Computer Virology, 8(1-2):1–13, 2012.
[7] Kharraz et.al. Cutting the gordian knot: a look under
the hood of ransomware attacks. In International
Conference on Detection of Intrusions and Malware,
and Vulnerability Assessment, pages 3–24. Springer,
2015.
[8] Shukla et.al. Poster: Winover enterprise dark data. In
Proceedings of the 22nd ACM SIGSAC Conference on
Computer and Communications Security. ACM, 2015.
1786