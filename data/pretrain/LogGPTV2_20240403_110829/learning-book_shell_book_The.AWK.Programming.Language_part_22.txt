We, being the authors, “knew" how the language was supposed to be used, and
so we only wrote one-liners.
181
---
## Page 192
182EPILOG
CHAPTER 8
Awk quickly spread to other groups and users pushed hard on the language.
programming language; our first reaction to a program that didn’t fit on one
page was shock and amazement. What had happened was that many people
awk.Rather than writing in a “real" programming language, they were
restricted their use of the computer to the shell (the command language) and to
stretching the tools they liked.
The idea of having each variable maintain both a string and a numeric
representation of its value, and use the form appropriate to the context, was an
only one set of operators, but have them work correctly in the face of ambiguity
about strings and numbers. The goal was largely met, but there are still occa-
sional surprises for the unwary. The rules in Chapter 2 for resolving ambiguous
cases evolved from user experience.
Associative arrays were inspired by SNOBOL4 tables, although they are not
as general. Awk was born on a slow machine with a small memory, and the
properties of arrays were a result of that environment. Restricting subscripts to
be strings is one manifestation, as is the restriction to a single dimension even
with syntactic sugar).A more general implementation would allow multi-
dimensional arrays, or at least allow arrays to be array elements.
Major facilities were added to awk in 1985, largely in response to user
demand. These additions included dynamic regular expressions, new built-in
variables and functions, multiple input streams, and, most importantly, user-
defined functions.
The new substitution functions, match, and dynamic regular expressions
provided useful capabilities with a only smallincrease in complexity for users.
Before getline the only kind of input was the implicit input loop implied
by the pattern-action statements. That was fairly constricting. In the original
language, a program like the form-letter generator that has more than one
source of input required setting a flag variable or some similar trick to read the
sources. In the new language, multiple inputs can be naturally read with
get1ine's in the BEGIN section. On the other hand, get1ine is overloaded,
and its syntax doesn't match the other expressions. Part of the problem is that
getline needs to return what it reads, and also some indication of success or
failure.
The implementation of user-defined functions was a compromise. The chief
difficulties arose from the initial design of awk. We did not have, or want,
declarations in the language. One result is the peculiar way of declaring local
variables as extra formal parameters.Besides looking strange, this is error
prone in large programs. In addition, the absence of an explicit concatenation
operator, an advantage for short programs, now requires the opening parenthesis
of a function call to follow the function name with nc intervening blanks.
Nevertheless, the new facilities made awk significantly better for larger applica
tions.
---
## Page 193
SECTION 8.2
PERFORMANCE
183
8.2Performance
In a way, awk is seductive  it is often quite easy to write a program that
does what you want, and for modest amounts of data, is fast enough, especially
when the program itself is still undergoing changes.
But as a working awk program is applied to bigger and bigger files, it gets
slower and slower. Rationally this must be so, but waiting for your results may
be too much to bear. There are no simple solutions, but this section contains
suggestions that might be helpful.
When programs take too long to run,there are several things to think about
doing, besides just putting up with it. First, it is possible that the program can
be made faster, either by a better algorithm or by replacing some frequently
executed expensive construction with a cheaper one. You have already scen in
Chapter 7 how much difference a good algorithm can make - the difference
between a linear algorithm and a quadratic one grows dramatically even with
modest increases in data. Second, you can use other, faster programs along
with awk, restricting awk's role. Third, you can rewrite the entire program in
some other language.
Before you can improve the behavior of a program, you need to understand
where the time is going.Even in languages where cach operation is close to the
underlying hardware, people's initial estimates of where time is being spent are
notoriously unreliable. Such estimates are even trickier in awk, since many of
its operations do not correspond to conventional machine operations. Among
these are pattern matching. field splitting, string concatenation, and substitu-
tion. The instructions that awk executes to implement these operations vary
from machine to machine, and so do their relative costs in awk programs.
Awk has no built-in tools for timing. Thus it's up to the user to understand
what's expensive and what's cheap in the local environment. The easiest way to
do this is to make differential measurements of various constructs.For exam-
ple, how much does it cost to read a line or increment a variable? We made
measurements on a variety of computers, ranging from a PC to a mainframe.
We ran three programs on an input file of 10,000 lines (500,000 characters), as
well as the Unix command wc for comparison. The results are summarized in
this table:
PROGRAM
AT&T
DEC VAX
AT&T
SUN-3
DEC VAX
6300+
11-750
3B2/600
8550
END ( print NR }
30
17.4
5.9
4.6
1.6
(n++); END (print n}
45
24.4
8.4
6.5
2.4
{ i = NF }
59
34.8
12.5
9.3
3.3
wC command
30
8.2
2.9
3.3
1.0
The first program takes 1.6 seconds on a DEC VAX 8sso; this means that it
takes 0.16 milliseconds to read a line.
Thc second program shows that it takes
---
## Page 194
184EPIL00
CHAPTER 8
another 0.08 milliseconds to increment a variable. The third program shows
that it takes 0.33 milliseconds to split each line into fields. By contrast, it takes
one second to count the 10,00o lines with a C program (the Unix program wc),
or 0.1 milliseconds per line.
about the same as the regular cxpression match s1-/xxx/. The cost of match-
regular expressions can be more expensive, since it may be necessary to re-
create a recognizer for each test.
Concatenating lots of strings is expensive:
print $1 "* $2 ** $3"* $4"* $5
takes twice as long as
print $1,$2,$3,$4,$5
As we hinted earlier, arrays have complex behavior. As long as there are
not too many elements in an array.accessing an element takes a constant
amount of time. After that the amount of time increases roughly linearly with
operating system may get involved, looking for memory to store things in. Thus,
e  e     iso     e   
     e s    n   s s
The second line of attack is to restructure the computation so that some of
the work is done by other programs. Throughout this book, we made extensive
use of the system sort command, for example, rather than writing our own
sort in awk. If you have to search a big file to isolate a small amount of data,
use grep or egrep for the searching and awk for the processing. If there are
a large number of substitutions (for example, the cross-reference program of
Chapter 5), you might use a stream editor like sed for that part. In other
words,break the job into separate picces, and apply the most appropriate tool to
each piece.
The last resort is to rewrite the offending program in some other language.
routines, and otherwise use much the same structure as the original program.
Don’t attempt to simulate exactly what awk does. Instead provide just enough
for the problem at hand. A useful exercise is to write a small library that pro-
vides field-splitting, associative arrays,and regular expression matching: in
routines that allocate and free strings conveniently. With this library in hand,
converting an awk program into something that will run faster is quite feasible.
Awk makes easy many things that are hard in conventional languages, by
The penalty paid is that an awk program using these features, however easy to
---
## Page 195
SECTI0N 8.3
CONCLUSION
185
write, is not as efficient as a carefully written C program for the same task.
Frequently efficiency is not critical, and so awk is both convenient to use, and
fast enough.
When awk isn’t fast enough, it is important to measure the pieces of the job,
to see where the time is going. The relative costs of various operations differ
from machine to machine, but the measurement techniques can be used on any
machine. Finally, even though it is less convenient to program in lower-level
or else the new program will be both harder to write and less efficient.
8.3 Conclusion
Awk is not a solution to every programming problem, but it's an indispens-
able part of a programmer's toolbox, especially on Unix, where easy connection
of tools is a way of life. Although the larger examples in the book might give a
different impression, most awk programs are short and simple and do tasks the
form to another, adding up numbers, extracting information for reports.
For tasks like these,where program development time is more important
d  e o n  o   p s    
action paradigm simplify and often entirely eliminate control flow. Field split-
ting parses the most common forms of input, while numbers and strings and the
coercions between them handle the most common data types. Associative arrays
provide both conventional array storage and the much richer possibilities of
patterns of text. Default initialization and the absence of declarations shorten
programs.
What we did not anticipate were the less conventional applications. For
gradual: the absence of the syntactic baggage of conventional languages like C
or Pascal makes awk easy enough to learn that it has bcen the first language for
a surprising number of people.
led to a variety of unexpected applications, like small database systems and
The features added in 1985, especially the ability to define functions, have
compilers for little languages. In many cases, awk is used for a prototype, an
experiment to demonstrate feasibility and to play with features and user inter-
faces, although sometimes the awk program remains the production version.
Awk has even been used for software engineering courses, because it's possible
Of course, one must be wary of going too far - any tool can be pushed
beyond its limits - but many people have found awk to be valuable for a wide
range of problems. We hope we have suggested ways in which awk might be
useful to you as well.
---
## Page 196
186EPILOG
CHAPTER8
Bibliographic Notes
The original version of awk was described by the authors in “AWK-a pat-
and Experience, April 1979. This article also contains a technical discussion of
the design of the language.
Much of the syntax of awk is derived from C, described in The C Program-
ming Language, by B. W. Kernighan and D. M. Ritchie (Prentice-Hall, 1978).
The regular expressions used in the programs egrep, lex, and sed are
described in Section 2 of The Unix Programmer's Manual. Chapter 3 of Com-
pilers: Principles, Techniques,and Tools,by Aho, Sethi,and Ullman
(Addison-Wesley, 1986) contains a description of the regular expression
pattern-matching technique used in the new version of awk.
You might find it interesting to compare awk with similar languages. Cer-
tainly the patriarch of the family is SNOBOL4, described in The SNOBOL4 Pro-
gramming Language, by R. Griswold, J. Poage, and I. Polonsky (Prentice-Hall,
1971).Although SNOBOL4 suffers from an unstructured input language,it is
powerfuland expressive.ICON，described in The ICON Programming
Language by R. Griswold and M. Griswold (Prentice-Hall, 1983), is a lineal
descendant of SNOBOL, with a nicer syntax and a better integration of the pat-
tern facilities with the rest of the language. The REXX command interpreter
 noe s ss s u su oe si ss  o 
more emphasis on its role as a shell or command interpreter; see, for example,
M. F. Cowlishaw's The REXX Language (Prentice-Hall, 1985).
---
## Page 197
AWKSUMMARY
This appendix contains a summary of the awk language. In syntactic rules, com-
ponents enclosed in brackets I.] are optional.
Command-line
The option -Fs sets the field separator variable FS to s. If there are no filenames, the
standard input is read. A filename can be of the form var=text, in which case it is
treated as an assignment of texr to the variable var, performed at the time when that
argument would be accessed as a file.
AWK programs
An awk program is a sequence of pattern-action statements and function definitions.
A pattern-action statement has the form:
pattern(action}
An omitted pattern matches all input lines; an omitted action prints a matched line.
A function definition has the form:
function name(parameter-list)(statement }
Pattern-action statements and function definitions are separated by newlines or semi-
colons and can be intermixed.
Patterns
END
/regular expression/
paltern &5 pattern
pattern 11pattern
Ipattern
(pattern)
pattern,pattern
The last pattern is a range pattern, which cannot be part of another pattern. Similarly,
BEGIN and END do not combine with other patterns.
187
---
## Page 198
188
AWK SUMMARY
APPENDIX A
Actions
An action is a sequence of statements of the following kinds:
break
continue
delete array-element
do statement while (expresion)
exit [expression]
1f（expression）statemenr [else statemenr]
expression
input-output statement
for （expression;expression;expression）statement
for (variable in array)statement
next
return [expression]
while （expression)statement
(statements )
A semicolon by itself denotes the empty statement. In an if-else statement, the first
statement must be terminated by a semicolon or enclosed in braces if it appears on the
same line as else. Similarly, in a do statement, statemenr must be terminated by a
semicolon or enclosed in braces if it appears on the same line as whi1e.
Program format
Statements are separated by newlines or semicolons or both. Blank lines may be
inserted before or after any statement, pattern-action statement, or function definition.
 s   o pu sdo pe pas q  se e s
after a comma, left brace, &6, 11, do, else, and the right parenthesis in an if or for
statement. A comment beginning with # can be put at the end of any line.
Input-output
close(expr)
close file or pipe denoted by expr
getline
set $0 from next input record; set NF, NR, FNR
getline fle
print expressions on file
printf fmt, expr-list
format and print on file
format and print
printf fmt,expr-list >file
system(cmd-line)
execute command cmd-line, return status
parenthesized.In print and printf,>>fle appends to the file,andcommand
The expr-list following print and the fmr, expr-list following printf may be
writes on a pipe. 
Similarly, command 1 getline pipes into getline. The funetion
get1ine returns 0 on end of file, and 1 on error.
---
## Page 199
AWK SUMMARY
APPENDIX A
189
Printf format conversions
%c
ASCI1 character
%d
decimal number
%e
[-]d.ddddddg[+-]dd
%
[-]ddd.dddddd
%g
e or f conversion, whichever is shorter,
with nonsignificant zeros suppressed
%o
unsigned octal number
8%
unsigned bexadecimal number
string
Xx
X%
print a %; no argument is converted
Additional parameters may lie between the % and the control letter:
left-justify expression in its field
width
pad field to this width as needed; leading 0 pads with zeros
-prec
maximum string width or digits to right of decimal point 
Built-in variables
The following built-in variables can be used in any expression:
ARGC
number of command-line arguments
ARGV
array of command-line arguments (ARGV[ o. .ARGC-1])
PILENAME
name of current input file
PNR
input record number in current file
FS
input field separator (default blank)
&N
number of fields in current input record
NR
input record number since beginning
OFNT
output format for numbers (default “%.6g")
OFS
output field separator (default blank)
ORS
outputrecord separator(default newline）
RLENGTH
length of string matched by regular expression in match
RS
input record separator (default newline)
RSTART
beginning position of string matched by match
SUBSEP
separator for array subscripts of form [i,j...1 (default *\034)
ARGC and ARGv include the name of the invoking program (usually awk) but not the
program arguments or options. RSTART is also the value returned by match.
The current input record is named $0. The fields in the current input record are
named $ 1, $2, , $NF.
Built-in string functions
In the following string functions, s and t represent strings, 7 a regular expression,
and i and x integers.
p oq kq paoeda sj qns pue qns u s Suns sus sui u y uy
string: \& yields a literal ampersand.
---
## Page 200
190
AWK SUMMARY
APPENDIX A
gsub(r,s,1)
 kq pueu 1 jo guunsns qoes aoj r nsqns keqo8
return number of substitutions; if t is omitted, $0 is used
index(s,1)
return the index of r in s, or 0 if s does not contain r
length(s)
return the length of s
match(s,r)
return index of where s matches r or O if there is no match;
set RSTART and RLENGTH
split(s,a/s)
split s into array α on fs, return number of fields;
if fs is omitted, s is used in its place
sprintf (fmt, expr-list)
like gsubexcept onlythefirstmatched sbstring isreplaced
return expr-list formatted according to fmt
e s o s    xs
sub(r,5,)
if n is omitted, return the suffix of s starting at /
Built-in arithmetic functions
atan2(y,x)
arctangent of y/x in radians in the range = to 
cos(x)
cosine (angle in radians)
exp(x)
cxponential e
int(x)
truncate to integer
1og(x)
natural logarithm
rand()
pseudo-random number r, 0 ≤< 1
sin(x)
sine (angle in radians)
sqrt(x)
set new seed for random number generator;
square root
srand(x)
uses time of day if no x given
Expression operators (increasing in precedence)
Expressions may be combined with the following operators:
+=
/=%==
assignment
7 :
conditional expression
11
logical OR
&6
array membership
logical AND
in
1