title:Towards asymmetric searchable encryption with message recovery and
flexible search authorization
author:Qiang Tang and
Xiaofeng Chen
Towards Asymmetric Searchable Encryption with Message
Recovery and Flexible Search Authorization
Qiang Tang
APSIA group, SnT, University of Luxembourg
6, rue Richard Coudenhove-Kalergi, L-1359
Luxembourg
PI:EMAIL
Xiaofeng Chen
State Key Laboratory of Integrated Service
Networks (ISN)
Xidian University, Xian 710071, P.R. China
PI:EMAIL
ABSTRACT
When outsourcing data to third-party servers, searchable
encryption is an important enabling technique which simul-
taneously allows the data owner to keep his data in en-
crypted form and the third-party servers to search in the
ciphertexts. Motivated by an encrypted email retrieval and
archive scenario, we investigate asymmetric searchable en-
cryption (ASE) schemes which support two special features,
namely message recovery and ﬂexible search authorization.
With this new primitive, a data owner can keep his data
encrypted under his public key and assign diﬀerent search
privileges to third-party servers. In the security model, we
deﬁne the standard IND-CCA security against any outside
attacker and deﬁne adapted ciphertext indistinguishability
properties against inside attackers according to their func-
tionalities. Moreover, we take into account the potential
information leakage from trapdoors, and deﬁne two trap-
door security properties. Employing the bilinear property
of pairings and a deliberately-designed double encryption
technique, we present a provably secure instantiation of the
primitive based on the DLIN and BDH assumptions in the
random oracle model.
Categories and Subject Descriptors
E.3 [Data Encryption]: Public Key Cryptosystems
Keywords
Cloud Computing; Data Outsourcing; Searchable Encryp-
tion; Privacy
1.
INTRODUCTION
To protect outsourced data and services in the cloud com-
puting environment, cryptographic researchers have devoted
a lot of eﬀorts to searchable encryption techniques. Such
techniques are particularly interesting because they allow
a data owner to encrypt his data and outsource the ci-
pheretxts while still being able to let third-party service
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIA CCS’13, May 8–10, 2013, Hangzhou, China.
Copyright 2013 ACM 978-1-4503-1767-2/13/05 ...$15.00.
providers search on his behalf without leaking any unneces-
sary information. Roughly speaking, searchable encryption
schemes fall into two categories. One category is symmet-
ric searchable encryption (SSE) schemes, represented by the
work of Song, Wagner, and Perrig [12].
In this category,
only the data owner can contribute searchable contents. The
other category is asymmetric searchable encryption (ASE)
schemes, represented by the work of Boneh et al. [4]. In this
category, the concept of public key encryption is employed
so that every entity can contribute searchable contents. A
detailed survey and analysis of existing searchable encryp-
tion (both SSE and ASE) schemes can be found in [13].
Motivated by an encrypted email retrieval and archive
scenario, as described below, we investigate ASE schemes
which support two special features: message recovery and
ﬂexible search authorization. The message recovery feature
requires that a ciphertext not only allows the data owner to
recover the plaintext but also allows third-party servers to
search in it. The ﬂexible searchable authorization feature
requires that the data owner can authorize a third-party
server in three diﬀerent ways: (1) authorize the server to
search any message at the data owner’s interest by assign-
ing a message-dependent trapdoor (i.e. the server can only
determine whether the message encoded in the trapdoor is
equal to the plaintext inside a ciphertext); (2) authorize the
server to search any message at the server’s interests by as-
signing a master trapdoor (i.e. the server can choose a mes-
sage at its will and see whether it is equal to the plaintext
inside any ciphertext); (3) authorize the server to perform
both types of searches. Throughout the paper, we refer to
this new type of ASE schemes as ASE††.
1.1 Encrypted Email Retrieval and Archive
Suppose that Bob is an employee of the company COM
and emails sent to him are required to be encrypted and
stored in an email server managed by COM. Suppose that
Alice wants to send an email to Bob, then she can encrypt
the email using Bob’s public key and send the ciphertext to
COM’s email server. Note that, here, Bob is the owner of
his emails.
In practice, the underlying encryption scheme
should satisfy the following requirements.
1. When Bob is traveling around, he may want to selec-
tively retrieve and read his emails from COM’s email
server. Thus, the encryption scheme should allow the
email server to search on Bob’s behalf to identify those
at his interests.
2. A malicious user can send Bob encrypted emails, which
contain malwares or viruses. Thus, the encryption
scheme should allow the email server to scan the en-
crypted emails to identify malicious contents.
model, only IND-CPA security is considered and the notion
of soundness is also weaker than that in this paper.
3. Bob may change his job over the time, so that he may
want to archive his emails during diﬀerent jobs in a
cloud server, such as Gmail. Bob can simply forward
all his encrypted emails to the archive server. Later
on, Bob may need to selectively retrieve some of the
emails, therefore, the encryption scheme should allow
the cloud server to search on Bob’s behalf as in the
ﬁrst requirement.
With an ASE†† scheme, the message recovery feature guar-
antees that only Bob can decrypt the encrypted emails while
he can still authorize the servers to search on his behalf. The
ﬂexible search authorization feature allows Bob to assign a
master trapdoor to COM’s email server so that the latter can
scan malicious contents inside the encrypted emails, and this
feature also allows Bob to assign message-dependent trap-
doors to COM’s email server and the cloud server to search
emails at his interests.
1.2 Related Work
As surveyed in [13], the majority of existing ASE schemes
are index-based, which means that they only aim at support-
ing search over scrambled keywords and typically do not al-
low the data owner to recover the keywords. By deﬁnition,
these schemes do not allow the servers to search directly
over the contents, therefore their functionality is far from
what an ASE†† scheme is aimed for. On the other hand, an
ASE†† scheme fulﬁlls the purpose of these index-based ASE
schemes.
Fuhr and Paillier [7] and Hofheinz and Weinreb [8] inves-
tigated the concept of ASE with message recovery. Their
formulations only allow the data owner to assign message-
dependent trapdoors to third-party servers, thus provide less
functionality than ASE††. As to the security models, the au-
thors only consider information leakage from ciphertexts and
allow the servers to easily recover the information encoded
in the trapdoors. In [7], if a match is found then the server
immediately knows the plaintext in the ciphertext, while, in
[8], the to-be-searched message is sent to the server in plain-
text. In practice, this may be regarded as a serious security
weakness.
Ibraimi et al. [9] pushed forward the concept of ASE with
message recovery and proposed a new primitive PKEDS,
namely public key encryption with delegated search. With
a PKEDS scheme, a data owner can authorize third-party
servers in two ways: (1) authorize a server to search any
message at the server’s interests by assigning a master trap-
door; (2) authorize a server to search messages at the data
owner’s interests by assigning message-dependent trapdoors.
In their formulation, authorization (2) implies authorization
(1), because search based on message-dependent trapdoors
also requires a master trapdoor as input. In other words,
the data owner must assign a master trapdoor to a server in
order to ask the latter to perform any search. This fact con-
ﬂicts with the least privilege principle in information secu-
rity and is undesirable. For instance, in the aforementioned
application scenario, Bob may not want to assign a master
trapdoor to the cloud server to let the latter probe all his
emails.
Recently, Tang et al. in [14] reﬁned PKEDS and proposed
a primitive similar to ASE††. However, in their security
1.3 Contribution
In this paper, we formulate a new primitive, namely ASE††.
With an ASE†† scheme, the data owner can keep data in
encrypted form while still be able to recover the plaintext
and authorize third-party servers to search on his behalf.
The authorization to a server is through assigning the ap-
propriate trapdoors: message-dependent trapdoors, master
trapdoors, or both types of trapdoors.
In contrast to [9],
a search based on a message-dependent trapdoor does not
require a master trapdoor as input, and this implies a signif-
icant security improvement. In practice, the data owner can
authorize diﬀerent servers based on their trustworthiness.
With respect to the functionality of ASE††, we provide
a comprehensive deﬁnition for the soundness property. The
property guarantees that not only the encryption/decryption
algorithms work well but also the decryption and the test
algorithms are bilaterally consistent with each other. We
present a ﬁne-grained security model by considering four cat-
egories of attackers, including an outside attacker and three
types of curious servers based on the trapdoors they receive.
We deﬁne the standard IND-CCA security against an out-
side attacker, and deﬁne adapted ciphertext indistinguisha-
bility security properties against the curious servers. More-
over, we deﬁne two trapdoor security properties to model
the possible information leakages from message-dependent
trapdoors. This security model is stronger than that in [14].
The soundness property turns out to be very diﬃcult to be
satisﬁed. Hybrid constructions (e.g. [1, 16]) and other con-
structions (e.g. [14]) do not satisfy this property. Based on
bilinear pairing techniques and a deliberately-designed dou-
ble encryption technique, we propose a new ASE†† scheme
and prove its security based on DLIN and BDH assumptions
in the random oracle model.
1.4 Organization
In Section 2, we formulate the concept of ASE†† and deﬁne
the soundness property.
In Section 3, we present a ﬁne-
grained security model for ASE††. In Section 4, we present
an IND-CCA secure scheme and analyse its security.
In
Section 5, we conclude the paper.
2. DEFINITION OF ASE††
Throughout the paper, we use the following notation. x||y
means the concatenation of x and y, P.P.T. means proba-
bilistic polynomial time, x ∈R X means that the element
x is chosen from the set X uniformly at random, and x $←
A(m1, m2, · · · ; O1, O2, · · · ) means that x is the output of
the algorithm A which runs with the input m1, m2, · · · and
access to the oracles O1, O2, · · · .
2.1 Primitive Formulation
In general, an ASE†† scheme involves the following enti-
ties. In each server category, there can be multiple servers,
but we only consider one for the simplicity of description.
• A data owner, who is supposed to receive encrypted
messages. This entity is also referred to as receiver in
encryption schemes.
• Type-I server S1, which receives message-dependent
trapdoors from the data owner. It can test whether the
message encoded in a trapdoor is equal to the plaintext
inside any given ciphertext.
3. For any ciphertext c, Decrypt(c, SKr) = w if and only
if Test2(c, w, t∗,s, SKs) = 1.
• Type-II server S2, which receives a master trapdoor
from the data owner. It can choose a message at its
will and test whether it is equal to the plaintext inside
any given ciphertext.
• Hybrid server Sh, which is both Type-I and Type-II.
• Senders, who may send messages to the data owner.
Let λ be the security parameter. Formally, an ASE††
scheme consists of the following algorithms.
• rKeyGen(λ): Run by the data owner, it outputs a pub-
lic/private key pair (P Kr, SKr). Let the message space
be denoted as W.
• Encrypt(w, P Kr) Run by a message sender, it outputs
a ciphertext cw for a message w ∈ W.
• Decrypt(cw, SKr): Run by the data owner, it outputs
the plaintext w or an error message ⊥.
In the above deﬁnition, the ﬁrst condition means that the
encryption/decryption functionality works well. The sec-
ond and the third conditions deﬁne the bilateral consistency
property between the decryption and test algorithms.
The ”if” condition guarantees that any matched ciphertext
by the test algorithms can be successfully decrypted and the
resulted plaintext will be equal to that assumed in the test
algorithms. For instance, if a test algorithm indicates c is
an encryption of w, then the decryption algorithm will not
output w′ 6= w or an error ⊥. Basically, this property guar-
antees that there is no ”false positive” in the search process.
The ”only if” condition guarantees that if a ciphertext can
be successfully decrypted then the test algorithms should be
able to properly match it. This property guarantees that no
targeted ciphertext will be missed by the test algorithms.
Take the encrypted email retrieval and archive scenario as
example, this property is crucial for the email server not to
miss any malicious contents in the encrypted emails.
• sKeyGen(λ): Run by a server (S1, S2, or Sh), it outputs
3. THE SECURITY MODEL
a public/private key pair (P Ks, SKs)
• TrapGen1(w, P Ks, SKr): Run by the data owner, it
generates a message-dependent trapdoor tw,s for the
server with public key P Ks.
• Test1(cw, tw′ ,s, SKs): Run by the server with message-
dependent trapdoor tw′ ,s and private key SKs, it re-
turns 1 if w′ = w and 0 otherwise.
• TrapGen2(P Ks, SKr): Run by the data owner, it out-
puts a master trapdoor t∗,s for the server with public
key P Ks.
• Test2(cw, w′, t∗,s, SKs): Run by the server with the
master trapdoor t∗,s and private key SKs, it returns 1
if w′ = w and 0 otherwise.
Note that (rKeyGen, Encrypt, Decrypt) deﬁne a standard
PKE scheme. As indicated in [4], the trapdoors should be
transmitted to the servers through a secure channel (with
conﬁdentiality), otherwise any attacker will be able to obtain
the trapdoors and search over the ciphertexts. However,
this issue has not been formally addressed in the primitive
formulation and security model in [4]. Here, we explicitly
provide the sKeyGen algorithm so that potential servers can
run this algorithm to generate a key pair, with which the
data owner can generate trapdoors in an encrypted form by
running the TrapGen1 and TrapGen2 algorithms.
2.2 Soundness Property
Similar to the case for other primitives, the ﬁrst property
we want is soundness, deﬁned as follows.
Definition 1. An ASE†† scheme is sound if, for any
(P Kr, SKr) = rKeyGen(λ) and (P Ks, SKs) = sKeyGen(λ),
the following conditions are satisﬁed.
1. For any w ∈ W, Decrypt(Encrypt(w, P Kr), SKr) = w
always holds.
2. For any ciphertext c, Decrypt(c, SKr) = w if and only
if Test1(c, tw,s, SKs) = 1.
We assume that the message senders possess a valid copy
of the receiver’s public key and the receiver possesses valid
copies of the public keys of the servers. How to securely dis-
tribute these public keys should follow some standard prac-
tice, and we skip the discussion in this paper.
As to the security of an ASE†† scheme, there are two main
privacy concerns.
• One concern is the leakage of plaintext information
from ciphertexts, which is a standard concern for all
encryption schemes. Given ciphertexts, an attacker
can try to deduce information about the encrypted
plaintexts. Particularly, for an ASE†† scheme, knowl-
edge about the (un-encrypted) master trapdoors or
message-dependent trapdoors will provide additional
advantage to the attacker. Therefore, we will consider
the following types of attackers.
– Outside attacker: This type of attacker is not as-
signed with any type of (unencrypted) trapdoors.
– Curious Type-I server S1: This type of attacker
has been assigned with only message-dependent
trapdoors generated under its public key.
– Curious Type-II server S2: This type of attacker
has only been assigned with a master trapdoor
generated under its public key.
– Curious hybrid server Sh: This type of attacker
has been assigned with a master trapdoor and
message-dependent trapdoors generated under its
public key.
It is clear that a hybrid server is more powerful than
others. However, due to the fact that the data owner
may employ all three types of servers, it is necessary
to consider the maximal level of security against each
of them independently.
• The other concern is information leakage from message-
dependent trapdoors. For example, the Type-I server
S1 receives message-dependent trapdoors so that it
knows which ciphertext matches a received trapdoor.
However, S1 should not know the message encoded
in the trapdoor, or equivalently, S1 should not know
what is the plaintext of the matched ciphertext. Fur-
thermore, any entity other than S1 should not learn
anything about the trapdoor. The same security re-
quirement applies to a hybrid server Sh because it also
gets message-dependent trapdoors from the receiver.
To facilitate our security deﬁnitions, we ﬁrst detail all the
potential oracles accessible to an attacker. Based on our as-
sumption that there is only one server of every type, so that
each key generation oracle (sKeyGen1, sKeyGen2, sKeyGenh)
can only be queried once. Trivially, the key request oracles
can only be queried after the corresponding key generation
oracles have been queried.
• sKeyGen1: The challenger runs the sKeyGen algorithm
to generate (P Ks1 , SKs1 ) for the Type-I server S1, and
returns P Ks1 .
• sKeyReq1: The challenger returns SKs1 .
• sKeyGen2: The challenger runs the sKeyGen algorithm
to generate (P Ks2 , SKs2 ) for the Type-II server S2,
and returns P Ks2 .
• sKeyReq2: The challenger returns SKs2 .
• sKeyGenh: The challenger runs the sKeyGen algorithm
to generate (P Ksh , SKsh ) for the hybrid server Sh,
and returns P Ksh .
• sKeyReqh: The challenger returns SKsh .
• TrapGen1 query with a message w and P Ks as in-
put: The challenger returns TrapGen1(w, P Ks, SKr).
In this case s can be either s1 or sh
• TrapGen2 query with a public key P Ks: The challenger
In this case s can be
returns TrapGen2(P Ks, SKr).
either s2 or sh
• rKeyReqr: The challenger returns the receiver’s private