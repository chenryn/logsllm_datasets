title:A Framework for the Application of Association Rule Mining in Large
Intrusion Detection Infrastructures
author:James J. Treinen and
Ramakrishna Thurimella
A Framework for the Application of Association
Rule Mining in Large Intrusion Detection
Infrastructures
James J. Treinen1 and Ramakrishna Thurimella2
1 IBM Global Services, Boulder, CO 80301, USA
PI:EMAIL
2 University of Denver, Denver, CO 80208, USA
PI:EMAIL
Abstract. The high number of false positive alarms that are generated
in large intrusion detection infrastructures makes it diﬃcult for opera-
tions staﬀ to separate false alerts from real attacks. One means of re-
ducing this problem is the use of meta alarms, or rules, which identify
known attack patterns in alarm streams. The obvious risk with this ap-
proach is that the rule base may not be complete with respect to every
true attack proﬁle, especially those which are new. Currently, new rules
are discovered manually, a process which is both costly and error prone.
We present a novel approach using association rule mining to shorten the
time that elapses from the appearance of a new attack proﬁle in the data
to its deﬁnition as a rule in the production monitoring infrastructure.
Keywords: Association Rules, Data Mining, Intrusion Detection, Graph
Algorithms.
1 Introduction
Attempts to compromise networked computing resources generally consist of
multiple steps. The ﬁrst of these is the reconnaissance phase, consisting of the
identiﬁcation of target operating systems, port scanning, and vulnerability enu-
meration. This is followed by the exploitation of the weaknesses discovered during
the initial intelligence gathering process. A successful attack often ends with the
installation of back door channels so that the attacker can easily gain access to
the system in the future [29].
If an intrusion detection infrastructure is in use at the victim network during
this process, each action by the attacker has the potential to raise an alarm,
alerting the security staﬀ to the presence of malicious activity in the network.
Generally speaking, intrusion detection sensors do not have the ability to ag-
gregate the alarms for the discrete activities into an end-to-end attack proﬁle.
Given that an alarm is raised for each perceived malicious action, the typical
intrusion detection sensor can generate many thousands of alarms per day. Un-
fortunately, the vast majority of these alarms are false positives [20], and the
task of separating the real attacks from false alarms quickly becomes daunting.
D. Zamboni and C. Kruegel (Eds.): RAID 2006, LNCS 4219, pp. 1–18, 2006.
c(cid:2) Springer-Verlag Berlin Heidelberg 2006
2
J.J. Treinen and R. Thurimella
As noted by Lippmann, et al. in [26], the deployment of an inaccurate Intrusion
Detection Sensor (IDS) can have undesirable eﬀects in addition to simply missing
certain types of attacks. The ﬁrst of these is the potential to reduce the level
of vigilant monitoring by security operations staﬀ, due to the false sense of
security provided by the IDS. Secondly, using operations staﬀ to examine all of
the alarms produced in a day can make the deployment of a typical IDS system
extremely expensive in terms of support and labor costs. These issues are further
compounded in large monitoring infrastructures where the number of managed
sensors can easily reach into the thousands, generating millions of alerts per
day.
The context for our experiments is that of a large Managed Security Ser-
vice Provider (MSSP). Our experiments were conducted on a production data
set that was generated by roughly 1000 IDS sensors. The sensor technologies
used to generate the data set represented multiple vendors and versions of their
software, and were installed across 135 distinct customer networks. The alarm
logs generated by the sensors were consolidated at a Security Operations Center
(SOC) which used a third party Enterprise Security Manager (ESM) with the
ability to monitor the incoming alarm stream and match the alarms against a
predeﬁned set of meta rules. It is these meta rules which the operations staﬀ
use to detect intrusions across the networks they monitor. Similar to signature
based intrusion detection sensors, the ESM uses pattern matching to detect pre-
deﬁned patterns in the incoming alarm streams. If the base alarms arriving at
the ESM consolidation point match a predeﬁned attack rule in the monitoring
engine, a meta alarm is triggered and displayed on the operations staﬀ’s console
for inspection.
Because new vulnerabilities are discovered every day, new alarm signatures are
continuously installed on the intrusion detection sensors. This highly dynamic
environment produces a genuine challenge in terms of keeping the rule base in
the ESM current. Our framework provides a means of reducing the amount of
labor required to keep the rules current in the ESM, while at the same time
signiﬁcantly reducing the amount of time which elapses from the appearance of
a new attack proﬁle in the data to installation of the corresponding rule in the
production monitoring environment.
The time from the appearance of new attack proﬁles to the time when new
rules describing them are implemented is critical. Any delay in updating the
rule base could result in potentially undetected attacks. The amount of man-
ual inspection currently required to discover new rules makes staﬃng to meet
these time demands very expensive. We have found that using our framework
to automate this task drastically decreases the amount of manual inspection re-
quired. This in turn has the net eﬀect of decreasing the time from discovery to
implementation as well as decreasing the over all cost of maintenance.
The concept of association rule mining for intrusion detection was introduced
by Lee, et al. in [22], and is extended in [6,24,27]. Their approach is to use the
rules returned by the association rule algorithm to prove that causal relation-
ships exist between a user, and the type of entries that are logged in the audit
A Framework for the Application of Association Rule Mining
3
data as a result of their actions on the system. Our research has shown that in
the same manner that [22,24] were able to demonstrate the existence of causal
relationships between users and the entries logged in system audit data as a
result of their actions, it is possible to show causal relationships between an at-
tacker and the combination of alarms which are generated in intrusion detection
logs as a result of their behavior in a network. We were then able to use the
patterns which were discovered using our data mining technique to conﬁgure
new rules for the ESM system in a rapid and economical way. As a means of
demonstrating this, we include examples of attack activity which answer the
following questions:
1. What techniques did the attacker employ?
2. How were these techniques manifested as patterns in the IDS alarm logs?
3. Was our framework able to detect these patterns?
4. How did the discovered patterns result in a new rule in the ESM?
As with all data mining solutions, much up-front work must be done adjusting
the parameters for the algorithm so that optimal results are obtained. There is
no silver bullet conﬁguration, and it is noted throughout the literature that when
using association rule mining, the features which are chosen for examination are
critical to the success of the algorithm [24,30].
The remainder of this paper is organized as follows. Related work is discussed
in Section 2. Section 3 provides an overview of the experimental environment,
a brief description of data mining terminology, and a discussion of representing
alarms as directed graphs. Section 4 deﬁnes our approach, including a novel
alarm ﬁltering technique. Section 5 describes our results, and provides example
rules which were generated using our framework. Section 6 presents concluding
remarks.
2 Related Work
Many data mining techniques have been applied to intrusion detection. The vast
majority of the research has concentrated on mining various types of system
audit data, or raw network traﬃc in order to build more accurate IDS devices
[6,13,22,23,24,25,30,33,34,35].
The use of data mining has also been employed to examine alarm logs, specif-
ically using cluster analysis to classify alarms into attack and benign categories
[20,24] and to perform root cause analysis regarding the cause of false alarms in
[17,18,20,21]. The results obtained using cluster analysis can vary widely depend-
ing on which algorithm and distance measure is used. These issues are discussed
at length in [10,14,20,22,24,30,33,37].
In order to be truly eﬀective, the use of data mining techniques must be one
step in an over all Knowledge Discovery in Databases (KDD) process. This case
is made repeatedly in the literature, e.g. [30] who use cluster analysis solely as the
initial step in their data exploration. It is reiterated in [17,18,20,21] that although
4
J.J. Treinen and R. Thurimella
the research tends to focus on the mining algorithm employed, it is only one step
in the overall KDD process. They also note that without all of these steps, data
mining runs a high risk of ﬁnding meaningless or uninteresting patterns. It is for
this reason that [37] propose their end-to-end KDD architecture. Julisch outlines
the basic KDD steps as follows in [18], as condensed from their original deﬁnition
in [9] :
1. Understand the application domain
2. Data integration and selection
3. Data mining
4. Pattern evaluation
5. Knowledge presentation
A similar outline is made in [30], who also note that once a group of domain
experts is consulted, the entire process should be automated.
3 Preliminaries
3.1 Experimental Environment
Figure 1 describes our data mining architecture. As the alarms arrive at the
SOC, they are stored temporarily in a database on the monitoring engine. From
this database we extracted the set of all alarms generated in a single day for
all networks and loaded them into a data warehouse. It is on this warehouse
that we executed the data mining algorithms with the goal of generating new
monitoring rules for installation in the ESM.
Sensor 1
Sensor 2
Sensor n
Analytical
Warehouse
Association Rule
Data Mining
Temporary
Alarm
Storage
Enterprise Security Management
System
Fig. 1. The Association Rules Data Mining Architecture
Security Operations Analyst
A Framework for the Application of Association Rule Mining
5
3.2 Data Mining Terminology
In our analysis, we employ the use of association rule mining [1]. Because the ﬁeld
of data mining is very mature, rather than focusing on improving existing rule
algorithms, we make use of the functionality that is available in DB2 Intelligent
Miner for Modeling v8.2, which provides a fast algorithm for ﬁnding association
rules. The main goal of association rule mining is to locate non-obvious interrela-
tionships between members of a large data set [16]. The goal of our analysis is to
ﬁnd associations between the various attack signatures and IP addresses which
constitute true attacks on the network, and capture them as rules in the ESM
rule engine so that the SOC can easily detect future instances of the attack. The
association rules algorithm generates rules in the following form, as well as some
statistics which describe their strength and quality.
[x][y] → [z]
Support = 50
Conf idence = 80
This rule indicates that a relationship exists between the items x, y and z.
Speciﬁcally, the rule states that whenever x and y were present in a given group-
ing, known as a transaction, then z was present as well. The Support value states
that this speciﬁc grouping of three items represents 50 percent of the transac-
tions which were examined. The Conﬁdence value states that 80 percent of the
time that the items x and y were found together, the item z was also found [16].
Formally, let I = {i1, i2, ..., in} be a set of items. Given a set of transactions
D, where each transaction is deﬁned as a set of items T ⊆ I, a transaction T
contains X if X ⊆ T . An association rule is an implication X ⇒ Y , where X ⊂ I,
Y ⊂ I, and X ∩ Y = ∅. The association rule X ⇒ Y holds in the transaction set
D with a Conﬁdence c if c percent of transactions in D which contain X also
contain Y . The association rule X ⇒ Y has a Support value s in the transaction
set D if s percent of the transactions in D contain X ∪ Y [1].
In our results, the Support values are typically less than 5 percent. This is due
to the fact that thousands of signatures exist in the monitoring infrastructure,
and generally the rules which are discovered cover only a small percentage of the
total signature set for a given day.
3.3 Modeling Alarms as Directed Graphs
In order to facilitate a novel technique for ﬁltering the number of alarms which
must be analyzed during the mining process, we generated a directed graph
which modeled the alarms to be examined. Each entry in the data warehouse
included both the source IP address and destination IP address for which the
alarm was raised. We deduced the direction of each potential attack from this
information. We then generated a directed graph G = (V, E) such that each IP
address was represented as a vertex in the graph, and each edge was represented
6
J.J. Treinen and R. Thurimella
Table 1. Typical Intrusion Detection Alarms
Network ID
Source IP Destination IP
Signature
Network A
Network A
Network A
Network A
Network A
Network A
Network A
Network A
Network A
Network A
10.0.0.1
10.0.0.2
10.0.0.3
10.0.0.5
10.0.0.6
10.0.0.7
10.0.0.9
10.0.0.10
10.0.0.11
10.0.0.12
10.0.0.4
10.0.0.4
10.0.0.4
10.0.0.7
10.0.0.7
10.0.0.8
10.0.0.13
10.0.0.13
10.0.0.13
10.0.0.13
Signature 1
Signature 1
Signature 2
Signature 2
Signature 2
Signature 2
Signature 3
Signature 4
Signature 5
Signature 6
by a detected alarm. The edge was drawn from the source IP address toward the
destination IP address, corresponding to the direction of the alarm.
The results are such that the IDS alarms which are shown in Table 1 are
modeled as the directed graph shown in Figure 2.
10.0.0.1
10.0.0.2
10.0.0.3
10.0.0.5
10.0.0.6
10.0.0.9
10.0.0.10
10.0.0.4
10.0.0.13
10.0.0.11
10.0.0.12
10.0.0.7
10.0.0.8
Fig. 2. Intrusion Detection Alarms as a Directed Graph With Three Connected Com-
ponents
3.4 Data Set Reduction Using the Connected-Component