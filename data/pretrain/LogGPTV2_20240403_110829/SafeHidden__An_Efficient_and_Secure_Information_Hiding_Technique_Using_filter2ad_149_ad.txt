3Recent CPUs supporting the WRGSBASE/WRFSBASE instructions allow
setting the %gs and %fs base directly, but they are restricted by the Linux
kernel to use in user mode.
Figure 5: Overview of kernel page-table isolation.
the safe area, the physical pages are not changed. After
migrating each safe area (not triggered by the TLB miss
event), GuestKM will invoke do mmap() with the protec-
tion ﬂag PROT NONE to set the original safe area to be a trap
area. For multi-threaded programs, when the execution of
a thread triggers a randomization (not triggered by the TLB
miss event), the safe areas of all threads need to be random-
ized. To ensure the correctness, GuestKM needs to block all
threads before randomizing all (or thread-shared) safe areas.
Although all safe areas used in existing defenses in Table
1 are position-independent, we do not rule out the possibility
that future defenses may store some position-dependent data
in the safe area. However, as any data related to an absolute
address can be converted to the form of a base address with
an offset, they can be made position independent. Therefore,
after randomizing all safe areas, SafeHidden just needs to
modify the values of the dedicated registers to point to the
new locations of the safe areas.
Loading TLB entries under KPTI. The kernel page table
isolation (KPTI) feature [1] was introduced into the main-
stream Linux kernels to mitigate the Meltdown attack [32].
For each procecss, it splits the page table into a user-mode
page table and a kernel-mode page table (as shown in Figure
5). The kernel-mode page table includes both kernel-space
and user-space addresses, but it is only used when the sys-
tem is running in the kernel mode. The user-mode page table
used in the user mode contains all user-space address map-
pings and a minimal set of kernel-space mappings for serv-
ing system calls, handling interrupts and exceptions. When-
ever entering or exiting the kernel mode, the kernel needs to
switch between the two page tables by setting the CR3 reg-
ister. To accelerate the page table switching, the roots of the
page tables (i.e., PGD kernel and PGD user in Figure 5) are
placed skillfully in the physical memory so that the kernel
only needs to set or clear the bit 12 of CR3.
Moreover, to avoid ﬂushing TLB entries when switching
page tables, the kernel leverages the Process Context Identi-
ﬁer (PCID) feature [2]. When PCID is enabled, the ﬁrst 12
bits (bit 0 to bit 11) of the CR3 register represents the PCID
of the process which is used by the processor to identify the
USENIX Association
28th USENIX Security Symposium    1247
CR3[12] = 0User SpaceKernel SpaceUser SpaceKernel SpaceKernel ModeUser ModePGDKernelPGDUser… …… …kPCIDuPCID-0x1000+0x800CR3[11] = 1physicalmemoryowner of a TLB entry. The kernel assigns different PCIDs to
the user and kernel modes (i.e., kPCID and uPCID in the ﬁg-
ure). When entering or exiting the kernel mode, the kernel
needs to switch between kPCID and uPCID. To accelerate
this procedure, kPCID and uPCID of the same process only
differ in one bit. Therefore, the kernel only needs to set or
clear the bit 11 of CR3.
1 // .S file
2 .globl asm_load_pte_irqs_off
3 .align 0x1000
4 asm_load_pte_irqs_off:
5 /* 1. Get CR3 (kernel-mode page table with kPCID) */
6
7 /* 2. Switch to kernel-mode page table with uPCID */
8
mov %cr3, %r11
bts 63, %r11 // set noflush bit
bts 11, %r11 // set uPCID bit
mov %r11, %cr3 // set CR3
10
11 /* 3. Access user-mode pages to load pte into TLB */
12
stac // Allow user-mode pages accesses
movb (%rdi), %al // Read a byte from user-mode page
clac // Disallow user-mode pages accesses
13
9
20
21
26
27
28
29
30
31
32
33 }
14
15 /* 4. Get uPCID value */
16
mov %r11, %rax
and $0xfff, %rax
17
18 /* 5. Switch to kernel-mode page table with kPCID */
19
bts 63, %r11 // set noflush bit
btc 11, %r11 // clear uPCID bit
mov %r11, %cr3 //set CR3
retq //return uPCID
22
23 // .c file
24 void load_pte_into_TLB(unsigned long addr) {
25
unsigned long flags, uPCID;
// disable preemption and interrupts
get_cpu(); local_irq_save(flags);
uPCID = asm_load_pte_irqs_off(addr);
// flush the TLB entries for a given pcid and addr
invpcid_flush_one(uPCID, asm_load_pte_irqs_off);
// enable preemption and interrupts
local_irq_restore(flags); put_cpu();
Listing 1: The code snippet to load the TLB entries under KPTI.
As mentioned in Section 4.3, SafeHidden needs to load
PTEs of the safe areas into the TLB every time it randomizes
the safe areas. However, it is challenging to make SafeHid-
den compatible with KPTI. This is because SafeHidden only
runs in the kernel mode—it uses the kernel-mode page table
with kPCID, but the TLB entries of the safe areas must be
loaded from the user-mode page table using uPCID.
An intuitive solution is to map SafeHidden into the kernel
space portion of the user-mode page tables. Then the PTE
loading is performed with uPCID. However, this method in-
troduces more pages into the user-mode page tables and thus
increases the attack surface of the Meltdown attack.
We propose the following alternative solution: SafeHid-
den still runs in the kernel mode using the kernel-mode page
table. Before loading the TLB entries of the safe areas, it
switches from kPCID to uPCID temporarily. Then without
switching to the user-mode page table, it accesses the safe
area pages to load the target PTEs into the TLB with uPCID.
There is no need to switch to the user-mode page table for
two reasons: (1) TLB entries are only tagged with PCIDs
and virtual addresses; (2) the user-space addresses are also
mapped in the kernel-mode page table. After the PTE load-
ing, SafeHidden switches back to kPCID and then ﬂushes
the TLBs of the instruction/data pages related to the loading
operation. This is to avoid these TLB entries (tagged with
uPCID) to be exploited by the Meltdown attack.
Listing 1 illustrates the details of how to load user PTEs
into the TLB from the kernel mode code under KPTI. Line
24 shows the function deﬁnition of this loading operation.
Line 27 disables interrupts and preemptions to avoid unin-
tended context switches. Line 28 invokes the assembly code
for the loading operation. Line 6 reads the current CR3 regis-
ter which contains the root of the kernel-mode page table and
the kPCID. Line 8-10 switch to use uPCID (but keeping the
kernel-mode page table unchanged). Line 8 sets the noﬂush
bit to avoid ﬂushing the target PCID’s TLB entries when set-
ting the CR3 register. Line 12 enables data access to user
pages by disabling SMAP temporarily. Line 13-14 load the
target PTE into TLB with uPCID by reading a byte from this
page. Line 16-21 switch back to kPCID. Because line 12-21
code runs under the kernel-mode page table with uPCID, this
code page mapping will be loaded into the TLB that can be
accessed by user-mode code later. This page content could
be leaked from the malicious process using the Meltdown
attack. So line 30 ﬂushes the mapping from the TLB.
Reloading TLB entries after randomization. SafeHidden
uses Intel TSX to test which PTEs of the safe areas are
loaded in the TLB. The implementation is very similar to
the method of loading the user-mode TLB entries. The only
difference is that SafeHidden encloses the code of line 13
(Listing 1) into a transaction (between xbegin and xend in-
structions). In fact, not all PTEs of the safe area need to be
tested. SafeHidden only tests the PTEs that were reloaded in
the last re-randomization.
Tracking GPT updates. The GPT entries of safe areas
will be updated dynamically.
In order to track such up-
dates efﬁciently, we choose to integrate the Linux MMU
notiﬁer mmu notifier register in GuestKM. The MMU
notiﬁer provides a collection of callback functions to notify
two kinds of page table updates: invalidation of a physical
page and migration of a physical page. But it does not issue
a callback when OS maps a physical page to a virtual page.
To address this problem, we handle it in a lazy way by inter-
cepting the page fault exception to track this update. Once
GuestKM is notiﬁed about these updates, GuestKM makes
the modiﬁed entry invalid or valid, and then issues a hyper-
call to notify the hypervisor to synchronize all EPTs.
Creating and destructing thread-private EPT. If a thread
has no thread-local safe area, it shares its parent’s EPT. If
it is the main thread, it will be conﬁgured to use the default
EPT. If a thread has a thread-local safe area, GuestKM will
1248    28th USENIX Security Symposium
USENIX Association
issue a hypercall to notify the hypervisor to initialize an EPT
for this thread. When initializing an EPT, SafeHidden will
conﬁgure the entries based on other threads’ local safe areas
by walking the GPT to ﬁnd all physical pages in the safe ar-
eas. Meanwhile, SafeHidden will also modify the entries of
other thread’s EPT to make all thread-local safe areas iso-
lated from each other. Whenever SafeHidden changes other
thread’s EPT, it will block the other threads ﬁrst. GuestKM
also intercepts the exit() system call to monitor a thread’s
destruction. Once a thread with a private EPT is killed,
GuestKM notiﬁes the hypervisor to recycle its EPT.
Monitoring context switches. When a thread is switched
out, GuestKM will be notiﬁed through the sched out() and
it will switch to the default EPT assigned to the correspond-
ing VCPU. When GuestKM knows a new thread is switched
in through the sched in(), it will check whether the thread
has a private EPT or not, and switches to its EPT in if it does.
Monitoring illegal accesses. GuestKM intercepts all system
calls in Table 2 and checks their access areas by analyzing
their arguments. If there is an overlap between their access
areas with any of the trap areas, the safe areas, or the shielded
areas, GuestKM will trigger a security alarm. Because there
is no physical memory allocated to the trap areas, any mem-
ory access to those areas will be captured by intercepting the
page fault exception. With the isolation of the thread-local
safe area, any memory access to the shielded areas will trig-
ger an EPT violation exception, which will be captured by
the hypervisor (that notiﬁes GuestKM). GuestKM triggers a
security alarm in cases of any of these events.
Handling security alarms. How these security alarms are
handled depends on the applications. For example, when
SafeHidden is applied in browsers to prevent exploitation us-
ing JS code, it could mark the website from which the JS
code is downloaded as malicious and prevent the users from
visiting the websites. When SafeHidden is used to protect
web servers, alarms can be integrated with application ﬁre-
walls to block the intrusion attempts.
6 Evaluation
We implemented SafeHidden on Ubuntu 18.04 (Kernel
4.20.3 with KPTI enabled by default) that runs on a 3.4GHZ
Intel(R) Core(TM) i7-6700 CPU with 4 cores and 16GB
RAM. To evaluate the security and performance of SafeHid-
den, we implemented by ourselves two defenses that use safe
areas, OCFI and SS. OCFI is a prototype implementation of
O-CFI [40], which uses thread-shared safe areas (Table 1).
OCFI ﬁrst randomizes the locations of all basic blocks and
then instruments all indirect control transfer instructions that
access the safe areas, i.e., indirect calls, indirect jumps, and
returns. Each indirect control transfer instruction has an en-
try in the safe areas, which contains the boundaries of possi-
ble targets. For each instrumented instruction, OCFI obtains
Figure 6: The distribution of probing times before being captured
(10,000 probes launched).
its jump target and checks if it is within the legal range.
SS is our implementation of a shadow stack, which is an
example of the thread-local safe areas (see Table 1). Shadow
stacks are used in Safe Stack [30], ASLR-Guard [36], and
RERANZ [57]. SS adopts a compact shadow stack scheme
[41] (in contrast to a parallel shadow stack scheme). In our
implementation, the pointer (i.e., offset) to the stack top is
stored at the bottom of the shadow stack. To be compatible
with uninstrumented libraries, SS instruments function pro-
logues and epilogues to access the shadow stacks (i.e., the
safe areas). Listing 2 shows the function prologue for oper-
ating shadow stacks. The epilogue is similar but in an inverse
order. The epilogue additionally checks if the return address
has been modiﬁed.
In both cases, the size of the safe area is set to be 8 MB. To
use SafeHidden with SS and OCFI, one only needs to specify
in SafeHidden that the %gs register points to the safe areas.
No other changes are needed.
1 mov (%rsp), %rax //get the return address
2 mov %gs:0x0, %r10 //get the shadow stack (ss) pointer
3 mov %rax, %gs:(%r10) //push the return address into ss
4 mov %rsp, %gs:0x8(%r10) //push the stack frame into ss
5 add $0x10, %gs:0x0//increment the shadow stack pointer
Listing 2: The shadow stack prologue.
6.1 Security Evaluation
We evaluated SafeHidden in four experiments. Each experi-
ment evaluates its defense against one attack vector.
In the ﬁrst experiment, we emulated an attack that uses
the allocation oracles [43] to probe Firefox browsers un-
der OCFI’s protection. The prerequisite of this attack is the
ability to accurately gauge the size of the unmapped areas
around the safe areas. To emulate this attack, we inserted
a shared library into Firefox to gauge the size of the un-
mapped areas. When SafeHidden is not deployed, the at-
tack can quickly locate the safe area with only 104 attempts.
Then we performed 10,000 trials of this attack on Firefox
protected by OCFI and SafeHidden. The result shows that
all the 10,000 trials failed, but in two different scenarios:
In the ﬁrst scenario (9,217 out of 10,000 trials), the attacks
failed to gauge the size of the unmapped areas even when the
powerful binary search method is used. The prerequisite of a
USENIX Association
28th USENIX Security Symposium    1249
Figure 7: Performance overhead of SPEC and Parsec-2.1 benchmarks brought by SafeHidden when applied to the SS and OCFI defenses.
binary search is that the location of the target object does not
change. However, SafeHidden’s re-randomization confuses
the binary search because the safe area moves continuously.
In the second scenario, even though the attacks can gauge
the exact size of an unmapped area, they always stumble into
one of the trap areas when accessing the surroundings of the
unmapped area, which triggers security alarms.
In the second experiment, we launched 10,000 trials of
CROP attacks [19] to probe a Firefox protected by OCFI.
The result shows that the attacks always successfully iden-
tiﬁed the location of the safe area when SafeHidden is not
deployed. The time required is less than 17 minutes with no
more than 81,472,151 probes. However, the attacks always
fail when SafeHidden is deployed. Figure 6 (a) shows the
distribution of the number of probes before an attack is de-
tected by hitting a trap area. We can see that the distribution
is concentrated in the range between [2000, 9000]. This ex-
periment shows that SafeHidden can prevent the continuous
probing attacks effectively.
In the third experiment, we launched 10,000 trials of the
CROP attack using thread spraying to probe Firefox pro-
tected by SS. We sprayed 214 (=16,384) threads with more
than 16,384 thread-local safe areas, and then scanned the
Firefox process with a CROP attack. The result shows that
when SafeHidden is not deployed, the attacks can probe the
locations of the safe areas successfully. The time taken is