### Code Design and Implementation Issues

Code can be either designed or implemented incorrectly (commission) or simply omitted (omission). In a comprehensive study, Maxion found that most exception handling failures in his test groups were due to omissions, primarily because of a lack of knowledge and exposure to exceptions, exceptional conditions, and exception handling [30]. To address this, Maxion provided the experimental groups with detailed information on exceptions, exceptional conditions, and a mnemonic to aid their understanding and memory. This intervention led to significant improvements in the exception handling characteristics of the treatment group's software compared to a control group.

### Importance of Addressing Robustness

Understanding why robust systems are not being built today is a critical issue. Before we can help developers create robust software systems, we need better insights into the underlying reasons. This section examines how well experienced developers understand the exception handling characteristics of their code, rather than just the robustness of the code itself.

### Case Study: Java Components

We analyzed a series of Java components written by various corporate development groups within one of Carnegie Mellon’s large corporate research partners, known for producing robust software. Data was collected on how developers expected their code to respond to exceptional conditions and compared it with the actual robustness as measured by Ballista.

#### Methodology

To enable the development groups to report on their components' expected responses to exceptional conditions, a taxonomy of failures was developed, based on Maxion’s work [30], with minor adjustments to fit Java's object and safety models.

Three components, comprising 46 discrete methods, were rated by the development teams and tested using Ballista. The components, labeled A, B, and C, were written by Teams 1, 2, and 3, respectively.

Expected failure rates were calculated from the data provided by the programming teams. The method used to compute these rates involved correlating the types of failures the developers expected to handle improperly with the incidence rate of those failures in the test cases.

#### Results

- **Components A and B**: Overall average failure rates were 5% and 0%, respectively. Teams 1 and 2 accurately classified their code. One method suffered from an abort failure due to invalid data (memory reference), but some conditions marked as semi-robust could not occur due to language constraints.
  
- **Component C**: The overall average failure rate was 24.5%. The methods were classified into two categories: those that perform calculations and those that return object data in a specific form or data type. Team 3 had more difficulty determining the robustness of their code. Component C suffered abort failures in about 60% of its methods, primarily due to common issues like memory reference/data corruption and failing to handle legal but degenerate data conditions.

### Conclusions

Our findings indicate that generic robustness hardening wrappers can effectively handle all detected robustness failures in several different software interfaces. Using a software caching technique for robustness checks, the amortized cost of exception checking can be minimized, often to only a percent or two of execution time. This scalable approach has formed the basis of a low-cost, generic robustness hardening wrapper. Although our system removed most detectable failures, residual failures may still exist. The results suggest that there is little reason for developers to avoid building robust systems based on performance concerns.

Additionally, we measured the ability of experienced professional developers to classify the exception handling abilities of their software. For this case study, Maxion’s hypothesis that developers without specific training might not fully grasp exceptional conditions holds true. Training developers in robustness improvement techniques appears to be an effective way to enhance software robustness.

### Acknowledgments

Support for this research was provided by an IBM Research Fellowship and a grant from AT&T Shannon Research Laboratory. Special thanks to P. Santhanam at IBM T. J. Watson Research Center for the joint research partnership.

### References

[1] Austin, T.M.; Breach, S.E.; Sohi, G.S., “Efficient detection of all pointer and array access errors,” Conference on Programming Language Design and Implementation (PLDI) ACM SIGPLAN ‘94
...
[38] Ziles, C.B., Emer, J.S., Sohi, G.S., “The use of multithreading for exception handling,” 32nd Annual International Symposium on Microarchitecture, 1999

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.