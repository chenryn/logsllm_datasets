With annotations instrumented and legitimate jump targets
identiﬁed, the in-enclave workload undertaken by the bootstrap
enclave side has been signiﬁcantly reduced. Still, it needs to
be properly conﬁgured to enforce the policy (P0) that cannot
be implemented by the code generator. Following we elaborate
how these critical operations are supported by our design.
Enclave conﬁguration to enforce P0. To enforce the input
constraint, we need to conﬁgure the enclave by deﬁning certain
public ECalls in Enclave Deﬁnition Language (EDL) ﬁles
for data and code secure delivery. Note such a conﬁguration,
together with other security settings, can be attested to the
remote data owner or code provider. The computation result
of the in-enclave service is encrypted using a shared session
key after the remote attestation and is sent out through a
customized OCall. For this purpose, DEFLECTION only de-
ﬁnes allowed system calls (e.g., send/recv) in the EDL
ﬁle, together with their wrappers for security control (e.g.,
verifying the system call arguments). To support the basic
CCaaS setting, send and recv need to be communicated
to the data owner.
We use entropy control to mitigate covert-channels. Since
the data owner is the recipient of an enclave’s output, all a
malicious enclave program can do is to signal to the untrusted
OS the content of the data through covert channels, e.g.,
through system call interfaces. To address this type of covert
channel leak, we control the enclave program’s input and
output behaviors. Specially, the wrapper for send encrypts
the message to be delivered and pads it to a ﬁxed length.
Further, the wrapper can put a constraint on the length of the
result to control the amount of information disclosed to the
code provider: e.g., only 8 bits can be sent out.
Dynamic code loading and unloading. The target binary is
delivered into the enclave as data through an ECall, processed
by the wrapper placed by DEFLECTION, which authenticates
the sender and then decrypts the code before handing it over
to the dynamic loader. The primary task of the loader is to
rebase all symbols of the binary according to its relocation
information (Section IV-C). For this purpose, the loader ﬁrst
parses the binary to retrieve its relocation tables, then updates
symbol offsets, and further reloads the symbols to designated
addresses. During this loading procedure, the indirect branch
label list is “translated” to in-enclave addresses, which are
considered to be legitimate branch targets and later used for
policy compliance veriﬁcation.
As mentioned earlier (Section IV-C), the code section of
the target binary is placed on pages with RWX privileges, since
under SGXv1, the page permissions cannot be changed during
an enclave’s operation, while the data sessions (stack, heap)
are assigned to the pages with RW privileges. These code pages
for the binary are guarded against any write operation by the
annotations for enforcing P4. Other enclave code, including
that of the code consumer, is under the RX protection through
enclave conﬁguration. Further the loader assigns two non-
writable blank guard pages right before and after the target
binary’s stack for enforcing P2, and also reserves pages for
hosting the list of legitimate branch targets and the shadow
stack for enforcing P5.
Just-enough disassembling and veriﬁcation. After loading
and relocating, the target binary is passed to the veriﬁer for
a policy compliance check. Such a veriﬁcation is meant to
be highly efﬁcient, together with a lightweight disassembler.
Speciﬁcally, our disassembler is designed to leverage the
assistance provided by the code generator. It starts from the
program entry discovered by the parser and follows its control
ﬂow until an indirect control ﬂow transfer, such as indirect
jump or call, is encountered. Then, it utilizes all the legitimate
target addresses on the list to continue the disassembly and
control-ﬂow inspection. In this way, the whole program will
be quickly and comprehensively examined.
For each indirect branch, the veriﬁer checks the annotation
code right before the branch operation, which ensures that
the target is always on the list at runtime. Also, these target
addresses, together with direct branch targets, are compared
with all guarded operations in the code to detect any attempt
to evade security annotations. To simplify the veriﬁcation of
the CFI policy compliance, the veriﬁer utilizes hints (i.e.,
the symbol name on the list) to identify the set of possible
targets for calls/jumps. For this purpose, the veriﬁer scans the
machine code to ensure that these identiﬁers appear only at
the beginning of basic blocks. The veriﬁcation of P6 for covert
channel mitigation is done one basic block at a time, and
on the basic-block exit the veriﬁer checks whether all policy-
compliance instrumentations are in position at the entries to all
possible successor blocks. With such veriﬁcation, no hidden
control transfers will be performed by the binary, allowing
further inspection of other instrumented annotations. These
annotations are expected to be well formatted and located
around the critical operations as described in Section IV-C.
More details are given in Section V-A.
V. IMPLEMENTATION
We implemented the prototype on Linux/x86 arch. Specif-
ically, we implemented the code generator with LLVM 9.0.0,
and built other parts on an SGX environment. The LLVM
passes consist of several types of instrumentations for the
code generator. Besides, we implemented the bootstrap enclave
based on Capstone [22] as the disassembler.
A. Multi-level Instrumentation
The code generator we built is mainly based on LLVM
(Fig. 4), and the assembly-level instrumentation is the core
module. More speciﬁcally, we implemented modules for
Fig. 4: Workﬂow of ﬂexible code generation
j a
1 pushq
2 pushq
l e a q
3
4 movq
5 cmpq
6
7 movq
8 cmpq
9
10 popq
11 popq
12 movq
j b
; s a v e e x e c u t i o n s t a t u s
%rbx
%r a x
[ r e g +imm ] , %r a x ; l o a d t h e o p e r a n d
$0x3FFFFFFFFFFFFFFF , %rbx
%rbx , %r a x
e x i t
l a b e l
$0x4FFFFFFFFFFFFFFF , %rbx
%rbx , %r a x
e x i t
l a b e l
%r a x
%rbx
reg ,
[ r e g +imm ]
; s e t bounds
; s e t bounds
Fig. 5: Store instruction instrumentation
checking memory writing instructions, RSP modiﬁcation,
indirect branches and for building shadow stack. We also
reformed an instrumentation module to generate side-channel-
resilient annotations. To support ﬂexible control of different
security policies, we implanted a set of switches into our
code generator. These switches work on the IR level and
their on/off states can be passed down to the target code level
for further control, depending on the policies to be enforced.
On the in-enclave veriﬁer side, we also use this separating
mechanism and policy design, allowing for smooth integration
of a loading-time pass that supports a new mitigation scheme.
More speciﬁcally, we provide high-level APIs that allows the
developers to implement their instrumentation and validation
passes and plug them into the loader [23].
Here is an example (Figure 5). The main function of
the module for checking explicit memory write instructions
(P1) is to insert annotations before them. Suppose there is
such a memory write instruction in the target program, ‘mov
reg, [reg+imm]’, the structured annotation ﬁrst sets the
upper and lower bounds as two temporary Imms (0x3ffffffffffff
and 0x4ffffffffffff), and then compares the address of the
destination operand with the bounds. The real upper/lower
bounds of the memory write instruction are speciﬁed by the
loader later. If our instrumentation ﬁnds the memory write
instruction trying to write data to illegal space, it will cause
the program to exit at runtime.
B. Building Bootstrap Enclave
Following the design in Section IV-D, we implemented
a Dynamic Loading after RA mechanism for the bootstrap
enclave. The enclave is initiated based upon a conﬁguration
ﬁle (a.k.a. the manifest ﬁle), which speciﬁes the system calls
the enclave is allowed to make in compliance with security
policies, the protection enforced through instrumented OCall
stubs. During the whole service, the data owner can only
7
Source CodeClangLLVM IRLLVMAssemblyBackend PassShadow StackinstrumentationForward-edge branchinstrumentationMemory storinginstrumentationRSP modifyinginstrumentationIR PassSwitchesSSA monitoringinstrumentation...see the attestation messages related to the bootstrap’s enclave
quote, but learn nothing about service provider’s code.
Fig. 6: Detailed workﬂow of the dynamic loader
Remote attestation. Once the bootstrap enclave is initiated,
it needs to be attested. We leverage the RA-TLS routine [42]
and adjust it to our implementation. The conception of “Role”
(code owner or data owner) is incorporated in RA-TLS, to
make sure the bootstrap enclave can distinguish the two parties
and communicate with them using different schemes. The
RA procedures are invoked inside the bootstrap enclave after
secret provision between parties. After obtaining a quote of the
bootstrap enclave, the remote data owner submits the quote to
IAS and obtains an attestation report.
Dynamic loader. When the RA is ﬁnished,
trust be-
tween the data owner and the bootstrap enclave is es-
tablished. The user
then can locally/remotely call Ecall
(ecall_receive_binary) to load the service binary in-
strumented with security annotations and the indirect branch
list without knowing the code. User data is loaded from
untrusted memory into the trusted enclave memory when the
user remotely calls Ecall (ecall_receive_userdata), to
copy the data to the section reserved for it.
Then, the dynamic loader in the bootstrap enclave loads
and relocates the generated code. The indirect branch list,
which is comprised of symbol names that will be checked in
indirect branch instrumentations, will be resolved at the very
beginning. The memory size of our bootstrap enclave when
initialing is about 96 MB by default, including 1 MB reserved
for shadow stack, 1 MB for indirect branch targets, 64 MB for
data, 28 MB for service binary code, and less than 2 MB of the
loader/veriﬁer. After loading the service binary, the memory
cost would be the size of the service binary plus the necessary
libraries (e.g., libc, mbedtls, etc.).
Policy veriﬁer. The policy-compliance veriﬁer, is composed
of three components - a clipped disassembler, a veriﬁer, and
an immediate operand rewriter.
• Clipped disassembler. We enforce each policy at assembly
level. Thus, we incorporate a lightweight disassembler inside
the enclave. To implement it, we remove unused components
of this existing wide-used framework, and use Recursive
Descent Disassembly to traverse the code. When dealing with
8
conditional branching instructions, we add call/jump target
instructions to a list of deferred code to be disassembled
at
later time using the recursive descent algorithm. As a
control ﬂow-based algorithm, it can provide very complete
code coverage with minimal code. Also, we use the diet mode,
making the engine size at least 40% smaller [43]. The clipped
Capstone consists of 9.1 KLoC as the base of our veriﬁer.
• Policy veriﬁer. The veriﬁer and the following rewriter do
the work just right after the target binary is disassembled.
The veriﬁer uses a simple scanning algorithm to ensure that
the policies are applied in assembly language instrumentation.
Speciﬁcally, the veriﬁer scans the whole assembly recursively
along with the disassembler. It follows the clipped disassem-
bler to scan instrumentations before/after certain instructions
are in place, and checks if there is any branch target pointing
between instructions in those instrumentations.
• Imm rewriter. One last but not least step before executing the
target binary code is to resolve and replace the Imm operands
in instrumentations, including the base of the shadow stack,
and the addresses of indirect branch targets (i.e. legal jump
addresses). For example, the genuine base address of shadow
stack is the start address __ss_start of the memory space
reserved by the bootstrap enclave for the shadow stack. The
ranges are determined using functions of Intel SGX SDK
during dynamic loading (Section IV-D).
VI. ANALYSIS AND EVALUATION
A. Security Analysis
TCB analysis. The hardware TCB of DEFLECTION includes
the TEE-enabled platform, i.e. the SGX hardware. The soft-
ware TCB includes the components shown in Table I. Security
and privacy are guaranteed by the lightweight in-enclave veri-
ﬁer (in TCB), even if the code generator has mis-compilation
errors. The correctness of our veriﬁer can be formally veriﬁed,
using memory safety veriﬁcation tools such as SMACK and
model checking tools such as SPIN.
The loader we implemented consists of less than 600 lines
of code (LoCs) and the veriﬁer includes less than 700 LoCs,
also integrating the SGX SDK and part of Capstone libraries.
The binary sizes of shielded runtimes such as Graphene-SGX
increase to 2.5 times or more compared to ours. Currently,
Occlum has not integrated the SFI feature in its latest ver-
sion [44], thus we can only know the lower bound of its TCB
size. Altogether, our software TCB contains a self-contained
enclave binary (1.9 MB) with a shim libc (2.6 MB). By
comparison, most solutions are at least an order of magnitude
larger as compared to DEFLECTION.
Policy analysis. Here we show how the policies on the
untrusted code, once enforced, prevent information leaks from
the enclaves. In addition to side channels,
there are two
possible ways for a data operation to go across the enclave
boundaries: bridge functions [13] and memory write.
• Bridge functions. With the enforcement of P0, the loaded
code can only invoke our OCall stubs, which prevents the leak
RelocatableTarget ProgramIndirect Branch ListRelocatableTarget ProgramLoader / VeriﬁerReserved OthersEnclaveIndirectBranch ListHeap forRelocatedProgramIndirect Branch ListLoader / VeriﬁerOthersEnclaveShadow Stack1. Receive withECALLs2. In-enclaveRebaseRWXwithDEPRelocatedProgramTABLE I: TCB comparison with other solutions
Shielding runtimes
Ryoan
SCONE
Graphene-SGX
Occlum
DEFLECTION
Core components
Eglibc
NaCl sandbox
Naclports
Glibc
LibPAL
Graphene LibOS
Occlum shim libc
Veriﬁer
OS Shield and shim libc
Occlum LibOS and PAL
Loader/Veriﬁer
RA/Encryption
Shim libc
Capstone base
Other dependencies
Size(MB)
> 19