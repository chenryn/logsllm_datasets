dictable behavior, we intend to randomize each inter-arrival time. To
this end, we propose an inter-arrival time randomized mechanism,
denoted by R(·), that is attached to the scheduler to add random
noise. The inter-arrival time randomized mechanism is defined as:
the 𝑗𝑡ℎ inter-arrival time of the task 𝜏𝑖
R(𝜏𝑖, 𝑗) = ⌊ 𝜂𝑖( 𝑗) + 𝑌 ⌉
(2)
random noise drawn from some distribution centered at 0
where 𝜏𝑖 ∈ Γ, 𝑗 ∈ N represent the 𝑗𝑡ℎ inter-arrival time of the task
𝜏𝑖. 𝑌 is a random noise value drawn from some distribution centered
at 0. Note that the noise 𝑌 is presented separately for the purpose of
illustration. Such a representation is the same as drawing a random
value from some distribution centered at 𝜂𝑖( 𝑗) – which is what the
𝜖-Scheduler is eventually based on. The outcome is rounded to the
nearest integer and taken as the randomized inter-arrival time.
The added random noise 𝑌 creates inconsistent inter-arrival
times for a task and breaks a task’s periodicity. Yet, without specify-
ing a noise distribution, it may be insufficient to obscure the task’s
behavior, for example, when the noise’s variance is insignificant.
Before examining the noise addition mechanism, we first formally
define indistinguishability in our context.
4.2 Inter-Arrival Time Indistinguishability
As introduced in Section 3.3, we are concerned with job/task-level
indistinguishabilities. To analyze such indistinguishabilities with
the mechanism defined in Equation 2, we use a concept that’s similar
to the notion of differential privacy [18, 19].
Definition 4.1. (𝜖-Indistinguishability Inter-Arrival Time Ran-
domized Mechanism.) An inter-arrival time randomized mechanism
R(·) is 𝜖-indistinguishable if
any randomized inter-arrival time for any given task 𝜏
Pr[ R(𝜏, 𝑗) ∈ S] ≤ 𝑒𝜖Pr[ R(𝜏′, 𝑗′) ∈ S]
any randomized inter-arrival time of any given task 𝜏′
(3)
for all 𝜏, 𝜏′ ∈ Γ, 𝑗, 𝑗′ ∈ N and S ⊆ Range(R).
■
That is, R(·) enables inter-arrival time indistinguishability for a
single job instance if Equation 3 is satisfied.
Note that Definition 4.1 is general enough to consider both the
job-level and task-level indistinguishabilities. When 𝜏 ≠ 𝜏′, task-
level indistinguishability is implied; when 𝜏 = 𝜏′, job-level indis-
tinguishability is implied. It is worth noting that we can maintain
an independent 𝜖𝑖 value for each task 𝜏𝑖 and each of them achieves
their own 𝜖𝑖-indistinguishability. The indistinguishability for the
whole task set is determined by the worst of the 𝜖𝑖 values [46] (that
corresponds to the task-level indistinguishability).
4.3 Inter-Arrival Time Sensitivity and Noise
To determine the degree of noise to be added to make two inter-
arrival times indistinguishable, We define “inter-arrival time sensi-
tivity”. Intuitively, the value of the inter-arrival time sensitivity is
	ℛ#(𝜂!,𝑗)	ℛ#(𝜂!,𝑗+1)	ℛ#(𝜂!,𝑗+2)	ℛ#(𝜂!,𝑗+3)…	ℛ#(𝜂!,𝑗)=𝐿#(𝜂!𝑗,2𝐽!Δ𝜂!𝜖!,𝑇!",𝑇!#)Inter-Arrival Time Randomized Mechanism:Session 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea670assigned by the largest possible difference between two inter-arrival
times. However, the true assignment depends on the protection
goal (i.e., whether to achieve the job-level indistinguishability or
the task-level indistinguishability), as explained below.
Definition 4.2. (Inter-Arrival Time Sensitivity.) This reflects the
sensitivity of the function 𝜂𝜏 (·) defined, depending on the desired
indistinguishability goal, as:
(i) Job-level indistinguishability: the inter-arrival time sensitivity
for the job-level indistinguishability, denoted by Δ𝜂𝜏, for a given
task 𝜏, is defined as
distance between any two inter-arrival times of the task 𝜏
| 𝜂𝜏 ( 𝑗) − 𝜂𝜏 ( 𝑗′) |
(4)
Δ𝜂𝜏 =: max
𝑗,𝑗′∈N
𝑗≠𝑗′
that is task-specific.
(ii) Task-level indistinguishability: the inter-arrival time sensitivity,
denoted by Δ𝜂Γ, is defined as:
distance between any two inter-arrival times
of any two tasks in the task set Γ
Δ𝜂Γ =: max
𝜏,𝜏′∈Γ
𝑗,𝑗′∈N
| 𝜂𝜏 ( 𝑗) − 𝜂𝜏′( 𝑗′) |
that is task-set-dependent.
(5)
■
For simplicity, we use Δ𝜂 to represent either of the sensitivi-
ties when the context is clear. Then, the use of the Laplace dis-
tribution Lap(𝜂𝜏, Δ𝜂
𝜖 ) for generating the randomized inter-arrival
times preserves the 𝜖-indistinguishability from Definition 4.1 for
a single job instance. This property can be easily proved by ex-
panding Equation 3 with the probability density function of the
Lap(𝜂𝜏, Δ𝜂
𝜖 ) distribution [19, Theorem 3.6]. Therefore, the job-level
indistinguishability is achieved when Δ𝜂 = Δ𝜂𝜏 and the task-level
indistinguishability can be achieved when Δ𝜂 = Δ𝜂Γ.
4.4 𝜖-Indistinguishability in J Instances
The randomized mechanism R(·) with Laplace noise Lap( Δ𝜂
𝜖 ) of-
fers 𝜖-indistinguishability for a single instance. However, an at-
tacker typically observes a longer sequence from the schedule.
Therefore, we are more interested in the conditions for achieving
𝜖-indistinguishability for a certain duration (as opposed to a single
point in time). As a noise draw occurs for every job instance, based
on the theorem of Sequential Composition [46, Theorem 3], the
privacy degradation is cumulative as the number of draws increases.
A smart attacker may be able to sort out the distribution by col-
lecting sufficient samples. Therefore, it is crucial to understand the
condition for providing the required level of indistinguishability
for a certain duration. To this end, we measure the duration in
the number of job instances (that corresponds to the number of
noise draws for the corresponding inter-arrival times). Then we
use the following theorem to determine the scale of the noise for
preserving 𝜖-indistinguishability up to 𝐽 job instances.
Theorem 4.3. The Laplace randomized mechanism R(·) with the
■
is 𝜖-indistinguishable up to 𝐽 job instances.
scale 𝐽 Δ𝜂
𝜖
This theorem can be proved by expanding Equation 3 with 𝐽
invocations of R(·). The proof is given in Appendix A for reference.
The assignment of 𝐽 for a given task set is discussed in Section 5.3.
4.5 Bounded Laplace Randomized Mechanism
While the introduced Laplace randomized mechanism offers 𝜖-
indistinguishability, the unbounded output domain for the random-
ized inter-arrival times makes it infeasible to adopt in real systems.
To address this problem, we introduce the “bounded Laplace ran-
domized mechanism”, i.e., the randomized inter-arrival time drawn
from a Laplace distribution is bounded by a given range. There are
typically two solutions for bounding the value drawn from a distri-
bution: (i) truncation and (ii) bounding [40]. Truncation projects
values outside the domain to the closest value within the domain.
Bounding, used in this paper, is to continue sampling indepen-
dently from the distribution until a value within the specified range
is returned. Let’s denote such a bounded Laplace distribution by
(cid:101)𝐿(𝜇, 𝑏,𝑇⊥,𝑇⊤) of which the drawn value is in the range [𝑇⊥,𝑇⊤].
Using such a bounded Laplace distribution allows a mechanism
to return randomized inter-arrival times within a range that’s feasi-
ble for the given constraints. However, it is known that the bounded
Laplace distribution cannot preserve the same level of probabilistic
guarantee (i.e., the 𝜖-indistinguishability in our context) with the
same scale parameter as a pure Laplace distribution and a doubling
of the noise variance is required to compensate for the loss [29, 40].
Based on this condition and Theorem 4.3, we define the bounded
inter-arrival time Laplace randomized mechanism as follows:
Definition 4.4. (Bounded Inter-Arrival Time Laplace Random-
ized Mechanism.) Let [𝑇⊥
,𝑇⊤
𝑖 ] be the feasible inter-arrival time
range for a given task 𝜏𝑖, the bounded inter-arrival time Laplace
randomized mechanism is defined as
𝑖
𝑗𝑡ℎ inter-arrival time of 𝜏𝑖
(cid:101)R(𝜏𝑖, 𝑗) =(cid:101)𝐿( 𝜂𝑖( 𝑗) ,
scale of the noise distribution
2𝐽𝑖 Δ𝜂𝑖
𝜖𝑖
, 𝑇⊥
𝑖
, 𝑇⊤
𝑖
)
(6)
where(cid:101)𝐿(·) is the bounded Laplace distribution of which the drawn
bounds for randomized inter-arrival time
𝑖
,𝑇⊤
𝑖 ] based on a pure Laplace
■
values are bounded in the range [𝑇⊥
distribution Lap(𝜂𝑖( 𝑗),
2𝐽𝑖 Δ𝜂𝑖
).
𝜖𝑖
The variables 𝑇⊥, 𝑇⊤, Δ𝜂𝑖, 𝐽𝑖 and 𝜖𝑖 are extended task parameters
of 𝜏𝑖 to be formalized in Section 5.1. Following Theorem 4.3, the
bounded inter-arrival time Laplace randomized mechanism(cid:101)R(𝜏𝑖, 𝑗)
is 𝜖-indistinguishable up to 𝐽 job instances.
5 𝜖-SCHEDULER
With the components described in Section 4, we now introduce
our proposed real-time scheduler, the 𝜖-Scheduler. In each task’s
arrival (the beginning of a new instance), the 𝜖-Scheduler uses(cid:101)R(·)
for generating the task’s next arrival time (i.e., randomizing inter-
arrival times). In this section we first introduce an extended RTS task
model that supports such an 𝜖-Scheduler, followed by discussion
for how the extended task parameters can be determined for a given
system to achieve job/task-level indistinguishability.
Session 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea671𝑖
𝑖
𝑖
,𝑇⊤
, Δ𝜂𝑖, 𝐽𝑖, 𝜖𝑖) where [𝑇⊥
Scheduler invokes(cid:101)R(𝜏𝑖, 𝑗) =(cid:101)𝐿(𝜂𝑖( 𝑗),
5.1 Extended Task Model
The basic task model presented in Section 3.2 is extended to include
parameters necessary for an 𝜖-Scheduler to achieve the desired
indistinguishability. In 𝜖-Scheduler, a task 𝜏𝑖 is characterized by
(T𝑖, D𝑖, 𝐶𝑖, 𝜂𝑖,𝑇⊥
,𝑇⊤
𝑖 ] is a range of toler-
able periods, Δ𝜂𝑖 ≥ 0 is the inter-arrival time sensitivity parameter,
𝐽𝑖 is the task’s effective protection duration, and 𝜖𝑖 > 0 is the
indistinguishability scale parameter. At each new job arrival, the 𝜖-
,𝑇⊤
𝑖 ) to determine
the next job’s randomized arrival time point.
In this extended task model, the parameters T𝑖, D𝑖, 𝐶𝑖, 𝜂𝑖,𝑇⊥
𝑖
and 𝑇⊤
𝑖 are obtained from the system dynamics. The additional
parameters Δ𝜂𝑖, 𝐽𝑖 and 𝜖𝑖 are to be given by the system designer.
As the degree of noise added to a task’s inter-arrival time relies
on the extended parameters, it is crucial to assign proper values
based on the desired indistinguishability goal. We now discuss the
considerations for determining these values.
,𝑇⊥
2𝐽𝑖 Δ𝜂𝑖
𝜖𝑖
𝑖
5.2 Determining Inter-Arrival Time Sensitivity
Δ𝜂𝑖 represents the degree of random noise needed to make two inter-
arrival times indistinguishable and can be determined based on
Definition 4.2. The value of Δ𝜂𝑖 should be fixed for an execution in-
stance once assigned. In the case that we intend to achieve job-level
indistinguishability is to achieve for a given task 𝜏𝑖, the value of
Δ𝜂𝑖 is determined solely by the task’s set of periods, T𝑖. In this case,
each task’s sensitivity is independent of each other. On the other
hand, task-level indistinguishability requires that the sensitivity re-
flects all tasks in the system. Hence, the sensitivity for the task-level
indistinguishability is task set specific and all tasks are assigned
with the same sensitivity value. It is straightforward to see that
task-level sensitivity will be greater than job-level sensitivity of
any task (and hence larger noise will be added). It is up the system
designer to decide, taking potential performance degradation into
account, which type of indistinguishability should be achieved.
5.3 Calculating Protection Duration
Using the bounded Laplace mechanism,(cid:101)R(·), an 𝜖-Scheduler is able
to preserve 𝜖𝑖-indistinguishability up to 𝐽𝑖 job instances for a given
task. As pointed out in Section 4.4, the more noise samples collected,