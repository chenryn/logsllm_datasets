It seems that the local cache feature introduced in `v3.1.10` breaks the
propagation of exceptions via `celery.result.AsyncResult.get` if the result is
serialized with JSON (and possibly others, except `pickle`).
To reproduce:
    # test.py
    import sys
    import traceback
    from celery import Celery
    app = Celery('test')
    class Config:
        BROKER_URL = 'amqp://guest:guest@127.0.0.1:5672/celery'
        CELERY_RESULT_BACKEND = 'amqp'
        CELERY_RESULT_SERIALIZER = 'json'
    app.config_from_object(Config)
    @app.task
    def exception_raising_task(to_raise=None):
        if to_raise is not None:
            raise RuntimeError(to_raise)
        return True
    if __name__ == '__main__':
        result = exception_raising_task.delay()
        result.get()    # returns True
        result = exception_raising_task.delay('test')
        try:
            result.get()    # raises TypeError at celery.backends.base:exception_to_python
                            # displayed by print_exception() below
        except Exception as e:
            traceback.print_exception(*sys.exc_info())
        finally:
            result.get()    # correctly raises RuntimeError propagated from the task
The exact traceback of the broken propagation is:
    >>> result = exception_raising_task.delay('test')
    >>> result.get()
    Traceback (most recent call last):
      File "", line 1, in 
      File "/opt/celery-dev/local/lib/python2.7/site-packages/celery-3.1.10-py2.7.egg/celery/result.py", line 171, in get
        self._get_task_meta()  # update self._cache
      File "/opt/celery-dev/local/lib/python2.7/site-packages/celery-3.1.10-py2.7.egg/celery/result.py", line 332, in _get_task_meta
        return self._set_cache(meta)
      File "/opt/celery-dev/local/lib/python2.7/site-packages/celery-3.1.10-py2.7.egg/celery/result.py", line 339, in _set_cache
        d['result'] = self.backend.exception_to_python(d['result'])
      File "/opt/celery-dev/local/lib/python2.7/site-packages/celery-3.1.10-py2.7.egg/celery/backends/base.py", line 171, in exception_to_python
        from_utf8(exc['exc_type']), __name__)(exc['exc_message'])
    TypeError: sequence index must be integer, not 'str'
Upon inspection, this seems to be caused by a duplicate call of
`celery.result.AsyncResult._set_cache` in
`celery.result.AsyncResult._get_task_meta`, which could be left there by a
mistake:
    # celery/result.py
        def _get_task_meta(self):
            if self._cache is None:
                meta = self.backend.get_task_meta(self.id)
                if meta:
                    state = meta['status']
                    if state == states.SUCCESS or state in states.PROPAGATE_STATES:
                        self._set_cache(meta)   # <--- this call substitutes meta['result'] field, so the following will fail
                        return self._set_cache(meta)
                return meta
            return self._cache
So, the problem should be fixed by removing the line highlighted above (works
for my local environment).