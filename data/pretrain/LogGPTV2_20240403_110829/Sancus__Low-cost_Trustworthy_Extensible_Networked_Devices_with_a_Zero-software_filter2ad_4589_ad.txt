openMSP430 architecture is 16 bit, an 8 bit buffer and
a tiny ﬁnite state machine are required to make the hash
488  22nd USENIX Security Symposium 
USENIX Association
RTRTRTimplementation and the processor work together.
All the keys used by the processor are 128 bits long.
The node key KN is ﬁxed when the hardware is synthe-
sized and should be created using a secure random number
generator. When a module SM is loaded, the processor
will ﬁrst derive KN,SP using the HKDF implementation
which is then used to derive KN,SP,SM. The latter key will
then be stored in the hardware MAL instantiation for the
loaded module. Note that we have chosen to cache the
module keys instead of calculating them on the ﬂy when-
ever they are needed. This is a trade-off between size
and speed which we feel is justiﬁed because SPONGENT-
128/128/8 needs about 8.75 cycles per input bit. Since
the module key is needed for every remote attestation and
whenever the module’s output needs to be signed, having
to calculate it on the ﬂy would introduce a runtime over-
head that we expect to be too high for most applications.
Under assumptions on the underlying hash function,
HMAC is known to be a pseudo-random function [4]. It
is shown [28, Section 3] that this is sufﬁcient for a key
derivation function, provided that the key to the pseudo-
random function (in our notation the ﬁrst input to kdf(., .))
is uniformly random or pseudo-random. This is the case
in our application, hence there is no need to use the more
elaborate “extract-and-expand” construction [28].
Core modiﬁcations. The largest modiﬁcation that had
to be made to the core is the decoding of the new instruc-
tions. We have identiﬁed a range of opcodes, starting at
0x1380, that is unused in the MSP430 instruction set and
mapped the new instructions in that range.
Further modiﬁcations include routing the needed sig-
nals, like the memory address bus, into the access rights
modules as well as connecting the violation signal to the
internal reset. Note that the violation signal is stored into
a register before connecting it to the reset line to avoid
the asynchronous reset being triggered by combinational
glitches from the MAL circuit.
Figure 6 gives an overview of the added hardware
blocks when synthesized with support for two protected
modules. In order to keep the ﬁgure readable, we did
not add the input and output signals of the MAL blocks
shown in Figure 5.
4.2 The compiler
Although the hardware modiﬁcations enable software
developers to create protected modules, doing this cor-
rectly is tedious, as the module can have only one en-
try point, and as modules may need to implement their
own call-stack to avoid leaking the content of stack allo-
cated variables to unprotected code or to other modules.
Hence, we have implemented a compiler extension based
on LLVM [37] that deals with these low-level details. We
have also implemented a support library that offers an API
to perform some commonly used functions like creating
a MAC of data.
Our compiler compiles standard C ﬁles.8 To beneﬁt
from Sancus, a developer only needs to indicate which
functions should be part of the protected module being
created, which functions should be entry points and what
data should be inside the protected section. For this pur-
pose, we offer three attributes – SM FUNC, SM ENTRY and
SM DATA – that can be used to annotate functions and
global variables.
Entry points. Since the hardware supports a single en-
try point per module only, the compiler implements multi-
ple logical entry points on top of the single physical entry
point by means of a jump table. The compiler assigns
every logical entry point a unique ID. When calling one
of the logical entry points, the ID of that entry point is
placed in a register before jumping to the physical entry
point of the module. The code at the physical entry point
then jumps to the correct function based on the ID passed
in the register.
When a module calls a function outside its text section,
the same entry point is also used when this function re-
turns. This is implemented by using a special ID for the
“return entry point”. If this ID is provided when enter-
ing the module, the address to return to is loaded from
the module’s stack. Of course, this is only safe if stack
switching is also used.
Stack switching. As discussed in Section 3.3, it is
preferable to place the runtime stack of software mod-
ules inside the protected data section. Our compiler auto-
matically handles everything needed to support multiple
stacks. For every module, space is reserved at a ﬁxed
location in its protected section for the stack. The ﬁrst
time a module is entered, the stack pointer is loaded with
the address of this start location of the stack. When the
module is exited, the current value of the stack pointer is
stored in the protected section so that it can be restored
when the module is reentered.
Exiting modules. Our compiler ensures that no data
is leaked through registers when exiting from a module.
When a module exits, either by calling an external func-
tion or by returning, any register that is not part of the
calling convention is cleared. That is, only registers that
hold a parameter or a return value retain their value.
Secure linking. Calls to protected modules are auto-
matically instrumented to verify the called module. This
8We use Clang [36] as our compiler frontend. This means any
C-dialect accepted by Clang is supported.
USENIX Association  
22nd USENIX Security Symposium  489
Instruction
parameters
hmac mab
mem in
mem out
5× 16
16
16
HMAC control
16
4× 16
l
o
r
t
n
o
c
M
S
MAL
KSM1
MAL
KSM2
16
SPONGENT
8
Data selection
C
A
M
H
128
KSP
KN
128
128
128
Key selection
Figure 6: Overview of the hardware blocks added to the openMSP430 core.
includes automatically calculating any necessary module
keys and MACs. Of course, a software provider needs to
provide its key to the compiler for this function to work.
4.3 Deployment
Since the identity of a SM is dependent on its load ad-
dresses on node N, SP must be aware of these addresses
in order to be able to calculate KN,SP,SM. Moreover, any
MACs needed for secure linking will also be dependent
on the load addresses of other modules. Enforcing static
load addresses is obviously not a scalable solution given
that we target systems supporting dynamic loading of
software modules by third-party software providers.
Given these difﬁculties, we felt the need to develop
a proof-of-concept software stack providing a scalable
deployment solution. Our stack consists of two parts:
a set of tools used by SP to deploy SM on N and host
software running on N. Note that this host software is
not part of any protected module and, hence, does not
increase the size of the TCB.
We will now describe the deployment process imple-
mented by our software stack. First, SP creates a relocat-
able Executable and Linkable Format (ELF) ﬁle of SM
and sends it to N. The host software on N receives this
ﬁle, ﬁnds a free memory area to load SM and relocates it
using a custom made dynamic ELF loader. Then, hard-
ware protection is enabled for SM and a symbol table is
sent back to SP. This symbol table contains the addresses
of any global functions9 as well as the load addresses of
all protected modules on N. Using this symbol table, SP
is able to reconstruct the exact same image of SM as the
one loaded on N. This image can then be used to calcu-
late KN,SP,SM and any needed MACs. These MACs can
then be sent to N to be loaded in memory. Note that this
deployment process has been fully automated.
After SM has been deployed, the host software on N
provides an interface to be able to call its entry points.
This can be used by SP to attest that SM has not been
compromised during deployment and that the hardware
protection has been correctly activated.
5 Evaluation
In this section we evaluate Sancus in terms of runtime
performance, power consumption, impact on chip size
and provided security. All experiments were performed
using a Xilinx XC6SLX9 Spartan-6 FPGA running at
20MHz.
Performance A ﬁrst important observation from the
point of view of performance is that our hardware modiﬁ-
cations do not impact the processor’s critical path. Hence,
the processor can keep operating at the same frequency,
and any code that does not use our new instructions runs at
the same speed. This is true independent of the number of
software modules NSM supported in the processor.10 The
performance results below are also independent of NSM.
To quantify the impact on performance of our exten-
sions, we ﬁrst performed microbenchmarks to measure
the cost of each of the new instructions. The get-id and
unprotect instructions are very fast: they both take one
clock cycle. The other three instructions compute hashes
or key derivations, and hence their run time cost depends
linearly on the size of the input they handle. We summa-
rize their cost in Table 2. Note that since MAC-seal and
MAC-verify both compute the HMAC of the input data,
one might expect that they would need the same number
9For example, libc functions and I/O routines.
10We veriﬁed this experimentally for values of NSM up to 8.
490  22nd USENIX Security Symposium 
USENIX Association
Table 2: The number of cycles needed by the new instruc-
tions for various input sizes. The input for the instructions
is as follows: protect: the text section of the software
module being protected; MAC-seal: the data to be signed;
and MAC-verify: the text section of the software module
to be veriﬁed.
103
102
101
d
a
e
h
r
e
v
O
1st run
nth run
Instruction
protect
MAC-seal
MAC-verify
256B
30,344
24,284
24,852
512B
48,904
42,848
43,416
1024B
86,016
79,968
80,536
of cycles. However, since MAC-verify includes the lay-
out of the module to be veriﬁed in the input to HMAC, it
has a ﬁxed overhead of 568 cycles.
To give an indication of the impact on performance in
real-world scenarios, we performed the following macro
benchmark. We conﬁgured our processor as in the exam-
ple shown in Figure 4. We measured the time it takes from
the moment a request arrives at the node until the response
is ready to be sent back. More speciﬁcally, the following
operations are timed: (1) The original request is passed,
together with the nonce, to SMi; (2) SMi requests SMS for
sensor data; (3) SMi performs some transformation on the
received data; and (4) SMi signs its output together with
the nonce. The overhead introduced by Sancus is due to
a call to MAC-verify in step (2) and a call to MAC-seal
in step (4) as well as the entry and exit code introduced
by the compiler. Since this overhead is ﬁxed, the amount
of computation performed in step (3) will inﬂuence the
relative overhead of Sancus. Note that the size of the text
section of MS is 218 bytes and that nonces and output data
signed by Mi both have a size of 16 bits.
By using the Timer A module of the MSP430, we
measured the ﬁxed overhead to be 28,420 cycles for the
ﬁrst time data is requested from the module. Since the
call to MAC-verify in step (2) is not needed after the
initial veriﬁcation, we also measured the overhead of any
subsequent requests, which is 6,341 cycles. Given these
values, the relative overhead can be calculated in function
of the number of cycles used during the computation in
step (3). The result is shown in Figure 7.
We believe that these numbers are clear evidence of the
practicality of our approach.
Area The unmodiﬁed Spartan-6 FPGA implementation
of the openMSP430 uses 998 slice registers and 2,322
slice LUTs. The ﬁxed overhead11 of our modiﬁcation is
586 registers and 1,138 LUTs. For each protected module,
there is an additional overhead of 213 registers and 307
LUTs.
100
0
2
3
4
1
Cycles
5
·104
Figure 7: Relative overhead, in function of the number
of cycles used for calculations, of Sancus on the macro
benchmark. The nth run is signiﬁcantly faster due to the
secure linking optimization discussed in Section 3.5.
There are two easy ways to improve these numbers.
First, if computational overhead is of lesser concern, the
module key may be calculated on the ﬂy instead of storing
it in registers. Second, in applications with lower security
requirements, smaller keys may be used reducing the
number registers used for storage as well as the internal
state of the SPONGENT implementation. Exploring other
improvements is left as future work.
Power Our static power analysis tool12 predicts an in-
crease of power consumption for the processor of around
6% for the processor running at 20MHz. We measured
power consumption experimentally, but could not detect
a signiﬁcant difference between an unmodiﬁed processor
and our Sancus prototype. Of course, since Sancus intro-
duces a runtime overhead, the total overhead in energy
consumption will be accordingly.
Security We provide an informal security argument for
each of the security properties Sancus aims for (see Sec-
tion 2.3).
First, software module isolation is enforced by the
memory access control logic in the processor. Both the
access control model as well as its implementation are
sufﬁciently simple to have a high assurance in the correct-
ness of the implementation. Moreover, Agten et al. [1]
have shown that higher-level isolation properties (similar
to isolation between Java components) can be achieved by
compiling to a processor with program-counter dependent
memory access control. Sancus does not protect against
vulnerabilities in the implementation of a module. If a
module contains buffer-overﬂows or other memory safety
related vulnerabilities, attackers can exploit them using
well-known techniques [15] to get unintended access to
11That is, the overhead when NSM = 0.
12We used Xilinx XPower Analyzer.
USENIX Association  
22nd USENIX Security Symposium  491
data or functionality in the module. Dealing with such vul-
nerabilities is an orthogonal problem, and a wide range of
countermeasures for addressing them has been developed
over the past decades [47].
The security of remote attestation and secure commu-
nication both follow from the following key observation:
the computation of MACs with the module key is only
possible by a module with the correct identity running on