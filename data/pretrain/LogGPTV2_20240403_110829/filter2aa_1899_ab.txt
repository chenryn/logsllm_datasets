### Port Destruction and Type Confusion Vulnerabilities

#### 3. Destroying the kmsg leads to msg_port destruction
- `ipc_kmsg_clean_body`
- `ipc_kmsg_clean`
- `ipc_kmsg_destroy`
- `ipc_object_destroy`
- `ipc_port_release_receive`
- `ipc_port_destroy`

##### How to destroy the special_reply_port?
There is a simplified version:
- `kdata.sync_inheritor_port`
- `kdata.ip_imp_task`
- `special_reply_port`
- `io_references`
- `dst_port`
- `io_bits`
- `ip_tempowner=1` (Note: `kdata` is a union)

**What happened?**
- `ipc_importance_task_release(dst_port)` causes a type confusion between `ipc_port` and `ipc_importance_task_t`.
- This confusion results in the decrement of `iie_bits` instead of `io_bits`.

**Consequence of the type confusion:**
- `ipc_importance_task_release` decrements `iie_bits`, leading to a decrease in `dst_port’s io_bits`.

**How the panic happened:**
- `IO_BITS_ACTIVE (0x80000000)`: Indicates if the object is alive.
- The `io_bits` value changes from `0x80000000` to `0x7fffffff` due to the type confusion, causing the port to be marked as inactive.

**Summary:**
- The code decreases `dst_port’s io_bits` by 1, leading to a potential kernel panic.

### Exploits and Attack Vectors

#### Attack 1: (In)Direct Function Pointers
- **Vtable**: Many kernel objects contain (in)direct function pointers.
- **Exploit**: If we have a kernel object with controllable values at specific offsets, we can cast its port to a target type and hijack the control flow on pre-PAC devices.

**Example:**
- Ideal object with controllable values at gray offsets.
- Cast to the target type and hijack the control flow.

#### Attack 2: Info Leak via processor_info()
- **convert_port_to_processor**: Only performs a type check.
- **processor_info()**: Fetches CPU information based on the `cpu_id` value in the processor object (offset 76).
- **Exploit**: Use a semaphore with fully controllable value at offset 76 to leak information.

**Example:**
- Semaphore with controllable value at offset 76.
- Leaks CPU information via `processor_info()`.

#### Attack 3: Steal IOUserClients
- **Common Attack Path**: Achieve ROP/JOP execution in a system service within a less restrictive sandbox, open an IOUserClient, and exploit kernel vulnerabilities in the kernel extension.
- **Challenges**: More services require specific entitlements, and IOUserClient ports cannot be sent across tasks.
- **Exploit**: Change `IKOT_IOKIT_OBJECT` to `IKOT_IOKIT_CONNECT` to traverse the IOService tree and use any IOUserClient instance freely.

**Examples:**
- **AppleH10CamInUserClient**: Requires `com.apple.camera.iokit-user-access` entitlement. Stack overflow in selector 77.
- **ApplePPMUserClient**: Requires `com.apple.private.ppm.client` and `com.apple.private.ppm.superclient`. Heap overflow in `ApplePPMUserClient::sRegisterClient` (selector 26).

#### Attack 4: Spoofed NMS
- **host_security_set_task_token**: Can change a task's security token.
- **Exploit**: Reset the token to the kernel token to send NMS to any port.

**Examples:**
- **Voucher UAF**: `ipc_voucher_notify` called when a voucher object receives NMS. `ipc_voucher_release` decreases the reference counter and deallocates the voucher object.
- **Semaphore UAF**: `semaphore_notify` called when a semaphore object receives NMS. `semaphore_dereference` decreases the `ref_count` and deallocates the semaphore object.

#### Attack 5: Spoofed NMS + Type Confusion
- **Exploit**: Change a port type to `IKOT_SEMAPHORE` and send NMS multiple times to decrease the value at offset 72.
- **Out-of-bounds Decreasement**: Change the iterator port from `IKOT_IOKIT_OBJECT` to `IKOT_SEMAPHORE` and send NMS to the port.

**Example:**
- Spray `OSArray` with capacity=4 to allocate array buffers at `default.kalloc.32`.
- Decrease `ref_count` of `IOUserIterator` multiple times.

#### Attack 6: Trick kuncd
- **kuncd**: User space service that handles mach messages from the kernel.
- **Exploit**: Send a mach message to kuncd to launch terminal as root.

#### Attack 7: Access to Any Mach Services
- **Exploit**: Query the kernel with `pid/p_idversion` and set the token to `launchd’s` token to bypass the mach-lookup sandbox check.

**Example:**
- Before resetting the token: `err = 1100, service_port=0`.
- After resetting the token: Access to `applecamerad` and other Mach services.

### Conclusion
- **Variant Analysis**: Brings surprises and reveals new attack vectors.
- **Port Type Confusion**: Forms a large attack surface.
- **Vulnerability Exploitation**: A single vulnerability can be exploited in multiple ways.

Thank you!