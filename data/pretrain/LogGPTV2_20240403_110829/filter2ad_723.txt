title:POSTER: Enhancing Security and Privacy with Google Glass
author:Johannes Krupp and
Dominique Schr&quot;oder and
Mark Simkin
Enhancing Security and Privacy with Google Glass
Johannes Krupp
Saarland University
Germany
Dominique Schröder
Saarland University
Germany
Mark Simkin
Saarland University
Germany
ABSTRACT
In the past years wearable computing devices, such as head-
mounted displays, and ubiquitous computing increasingly
gained importance. Head-mounted displays are comprised of
a front-facing camera and a little screen in front of the user’s
eye. They provide their users with a seamless extension of
their perceptual abilities in an unobtrusive and user-friendly
manner. The Ubic-framework combines these new devices
with mathematically sound digital cryptographic primitives
and resource-friendly computer vision techniques to provide
users with novel security and privacy guarantees in their ev-
eryday life. In our hands-on demo we show how Ubic allows
users to read encrypted and verify digitally signed physical
documents. In addition, we present an identiﬁcation scheme,
which is secure against real-world attacks, such as skimming
and shoulder-surﬁng, but remains user friendly and easily
deployable in current infrastructures. The Ubic-framework
ﬁrst appeared at ESORICS 2014.
1.
INTRODUCTION
Cryptographic primitives, such as digital signatures or en-
cryption schemes are widely deployed to secure all-digital
communication. Most of these primitives are inspired by an
analogue counterpart in the physical world: The analogue of
a handwritten signature is a digital signature scheme and it
is used to prove the authenticity of documents resp. digital
information. Interestingly, many cryptographic primitives,
such as digital signatures, oﬀer stronger security guarantees
in the digital world than their counterparts in the physical
world. Consider the following examples:
Authentication. Most authentication systems deployed
in practice rely on the two-factor authentication paradigm.
The basic idea of this paradigm is that a user authenticates
himself by a possession and a knowledge component. The
most prominent example of a deployed system are ATMs,
where the user inserts a credit or debit card in the ATM
and proves knowledge of the corresponding secret personal
identiﬁcation number (PIN) in order to gain access to his
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
ACM 978-1-4503-2957-6/14/11.
http://dx.doi.org/10.1145/2660267.2662374.
account. This system, however, is 50 years old and is vulner-
able to various attacks such as skimming [1]. A skimming
attacks consists of two parts: ﬁrst, the attacker mounts a
camera that captures the PIN pad and second, a card reader
is mounted on top of the actual reader in order to copy the
card. The main weakness of this system is the fact that
ﬁxed credentials are used to authenticate users and thus, a
single compromised ATM allows the attacker to learn the
credentials of many users.
Hand-written signatures. Legally binding agreements
between several parties are made by letting the parties sign
the documents. The correctness of the signatures is usually
veriﬁed by comparing each signature to a second signature
that has been approved by some legal authority, i.e., that is
contained in a passport. However, verifying that the signa-
ture is indeed correct is diﬃculty. In fact, verifying whether
a hand-written signature has been forged requires external
professional help, which is expensive, time consuming, and
therefore not practical. In addition, hand-written signatures
do not depend on the content itself, which means that copy-
ing a hand-written signature from one document to a second
one still yields a valid signature. The assumption here is that
copying a signature should be diﬃcult.
Data privacy. Nowadays, people do no longer work in spe-
ciﬁc oﬃces or buildings, but have mobile working places.
Examples include people working from coﬀee shops, hotels,
airports, and other public places. Another example are mod-
ern working practices such as “hot-desking” and “bring your
own device” that are meant to increase the employee’s sat-
isfaction, productivity, and mobility. However, these mo-
bile working environments introduce new serious privacy
threats as sensitive data may leak to unauthorized individu-
als. These privacy issues have been investigated in a recent
survey [2] of IT professionals and it shows that the threat of
information theft constantly gains importance: On the one
hand, 85% of those surveyed admitted they had looked at
other’s displays in public places and learned sensitive infor-
mation. And on the other hand 80% believe that sensitive
information may have leaked from their devices while work-
ing in public places.
1.1 Ubic
The Ubic-framework [3] shows how to use modern mobile
computing devices to provide a stronger integration of digi-
tal cryptographic primitives into everyday interactions. Us-
ing head-mounted displays, such as Google Glass, in combi-
nation with mathematically sound cryptographic primitives,
1445Poster: Poster:Figure 1: Visualization of the Ubic authentication
scheme using an optical input device (ﬁgure taken
from [3]).
Ubic provides stronger security and privacy guarantees for
all of the aforementioned scenarios.
Google Glass is comprised of a little screen mounted in
front of the user’s eye and a front-facing camera that ﬁlms
the users view.
2. THE DEMO
We give a hands-on demo of the Ubic framework that
appeared at ESORICS 2014 [3] using Google Glass; partici-
pants of the conference will be able test our system.
The framework’s setting considers a user who communi-
cates with a possibly corrupted physical token over an inse-
cure physical channel. It covers three scenarios, namely au-
thentication, signature veriﬁcation, and content hiding, each
of which will be described below. This demo concentrates on
an implementation of the aforementioned framework using
the visual channel in connection with HMDs, such as Google
Glass.
We deploy a developer version of the Google Glass, which
features a camera recording the user’s view and a small dis-
play in front of his right eye, and which is computationally
as powerful as a smartphone. The current developer version
still allows an observer to capture the information displayed
by looking at the device from the front. However, this issue
can easily be ﬁxed by making the display non-transparent,
since it only occludes a small part of the user’s ﬁeld of view.
We would like to stress though, that this only aﬀects the
content hiding scenario.
2.1 Authentication
The Ubic authentication mechanism allows a user to se-
curely authenticate himself in front of a token, e.g. an ATM
or terminal serving a Login-page, even if the whole authen-
tication process can be observed. Furthermore, even a cor-
rupted token may not learn any secret credentials.
This is achieved by combining a CCA2 secure public-key
encryption scheme Πpke = (Gen, Enc, Dec) and an unforge-
able signature scheme DS = (Kg, Sig, Vf). It is assumed that
the user’s public key is known to the party he authenticates
against and that the party’s public key is known to the user.
This can be achieved by making the key-exchange a manda-
tory step during registration. Communication between the
token and the user happens over a physical channel. When-
ever a message is sent from the token to the user, it has to
be encoded before sending and decoded upon receiving. As
stated before, Ubic uses the visual channel, e.g. using QR
codes as the visual encoding, for its communication.
Figure 2: Screenshot of the Ubic authentication
taken by the Google Glass.
The authentication mechanism is a challenge-and-
response protocol shown in Figure 1.
In the ﬁrst step, the user sends his public identiﬁer id to
the token. The token retrieves the corresponding public key
from a trusted database and checks its validity. It then gen-
erates a random challenge ch ← {0, 1}n and encrypts it us-
ing the public-key encryption scheme Πpke. This encrypted
challenge is then embedded into a package also containing a
token indentiﬁer, an user identiﬁer, a timestamp and addi-
tional information, such as the token’s GPS location. The
entire package is then signed by the token. The package and
its signature are then encoded and presented to the user.
The user then decodes this package, checks the validity of
the signature and decrypts the challenge.
In a ﬁnal step,
the user transmits the decrypted challenge back to the to-
ken, which will then check it against the created challenge.
In our demo, the encoded package is displayed as a QR
code on the token’s screen, which is then captured by the
Google Glass’ camera (see Figure 2). Entering the challenge
back to the token is realized using a keyboard.
2.2 Content Veriﬁcation
The Ubic content veriﬁcation functionality allows to cre-
ate and verify digitally signed physical documents. This
allows to provide documents, such as receipts or paychecks,
with mathematically proven unforgeability guarantees. A
user can, upon receiving such a signed document, use the
Ubic-app to verify the validity of the given document by
scanning it with his head-mounted display.
In general, scanning human-readable text requires the use
of a technique called optical character recognition (OCR).
In practice, this is a challenging task, since current state-
of-the-art OCR algorithms rarely achieve a recognition rate
of 100%. This means, that certain characters may either be
recognized incorrectly or not recognized at all. The implica-
tions are two-fold: Firstly, the meaning of a document may
change (“Alice gets $ 1.00” vs. “Alice gets $ 100”). Secondly,
a digital signature will no longer verify the scanned text.
To tackle these problems, the Ubic framework introduced
a novel document format, called VeriDoc, which combines
human-readable text with machine-readable auxiliary infor-
mation and digital signatures. The VeriDoc-format consists
of a header and a body, which in turn is comprised of para-
graphs and digital signatures thereof. This auxiliary infor-
mation, encoded into the document’s header as a QR code,
TokenUserencGenChallenge)ch+!{0,1}n++++c+!Encid(ch)++++++σ++!Sign(sk,c)++++enc+!Encode(c,+σ)Verify)resp+=+ch?Physical+channelDecode)(c,σ)+!Decode(enc))If+Vrfy(pk,enc,σ)=1+and+check+GPS+ch+!Decsk(c)respInitializeid1446Poster:Figure 3: Overview of the Ubic processing and interaction pipeline for content veriﬁcation.
contains metadata about the document’s formatting, such
as font, fontsize, and structure as well as the signer’s iden-
tity. This additional information will be parsed and used
during the scanning procedure to improve the recognition
rate of the OCR algorithm.
The process is depicted in Figure 3. The users initiates
the veriﬁcation process by scanning the header-code, which
contains general information about the document and its
structure. He is then proceeds by scanning the individ-
ual paragraphs and their signatures one by one. After each
scanned block, the user is given visual feedback on whether
the signature authenticates the content. In the end, after
all blocks were scanned, the user is also given feedback on
whether the document as a whole is valid, based on a sig-
nature stored in the header. A detailed description of the
underlying cryptographic protocol is given in [3].
Although the additional
information encoded into the
VeriDoc format signiﬁcantly improves the recognition rate of
the OCR algorithm, in some cases we still may not achieve
100%. To address this problem, we determine the passages
of the scanned text for which the OCR engine outputs a low
conﬁdence value and iterate over all possible replacements
for those. In case a replacement validates against the given
signature, the text passage is displayed back to the user, who
is then asked to compare the recognized passage against its
physical counterpart.
2.3 Content Hiding
The Ubic content hiding mechanism allows a user to
read sensitive and conﬁdential documents in a secure man-
ner in the presence of eavesdroppers.
This is espe-
cially important in todays emerging trend of mobile work
places, which poses novel security and privacy threats that
could not have been dealt with by current approaches.
Ubic makes use
the
HMDs, which allow to dis-
play information right
in
front of the user’s eye, unob-
servable to any bystanders.
of
Rather than handing out
documents
in plain, Ubic
uses a hybrid encryption
scheme in combination with
a visual encoding to pro-
tect the document’s content
from information theft in in-
secure environments. A hy-
brid encryption scheme com-
bines public- and privacy-
key encryption schemes to
Figure
encrypted document
Ubic-
4:
obtain a public-key encryption scheme with short cipher-
texts and fast encryption/decryption.
At ﬁrst, a randomly generated key for a private-key en-
cryption scheme is encrypted under the recipient’s public key
and stored in the document header. The document body is
split into text blocks and each one is separately encrypted
under this private key. The advantages of this approach are
manifold. Firstly, one is able to store a larger amount of
content in a single document. Secondly, each text block can
be decrypted individually and displayed back to the user
immediately, without the need to decrypt the whole docu-
ment ﬁrst. Furthermore, even if parts of the documents are
damaged or lost, we can still decrypt the remaining parts.
An example of a full encrypted document is depicted
in Figure 4.
3.
IMPLEMENTATION
In our demo we present a full prototype implementation of
the Ubic-framework for Google Glass. Our developer version
features a TI OMAP 4430 SoC running at 1.2 GHz with 1GB
of RAM and Android 4.4 as its operating systems. It has
a 640×360 optical head-mounted display and an egocentric
1280×720 camera.
Cryptographic primitives were implemented using Bouncy
Castle Crypto API 1.50, QR codes were recognized using zx-
ing 3.1.0, further image processing was done with OpenCV
2.4.8. Our optical character recognition is based on Tesser-
act OCR 3.03.
Our Ubic implementation is deployed as an Android-App
using Google’s GDK.
Acknowledgements. This work is supported by the Ger-
man Federal Ministry of Education and Research (BMBF)
through funding for the Center for IT-Security, Privacy, and
Accountability (CISPA; see www.cispa-security.org). Do-
minique Schr¨oder is supported by an Intel Early Career Fac-
ulty Honor Program Award.
4. REFERENCES
[1] Bankrate. Skimming the cash out of your account, 2002.
[2] E. A. for Visual Data Security. Visual Security White
Paper. 2012.
[3] M. Simkin, D. Schr¨oder, A. Bulling, and M. Fritz.
Bridging the gap between digital cryptography and the
physical world. In European Symposium on Research in
Computer Security (ESORICS), pages 56–75.
Springer-Verlag, 2014.
1447Poster: