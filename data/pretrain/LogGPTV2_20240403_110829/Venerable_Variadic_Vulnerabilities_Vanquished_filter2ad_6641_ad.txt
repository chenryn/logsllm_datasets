29
424
485
2911
Tot.
Program
241
Firefox
30225 1664 5.5 421
Chromium 83792 1728 2.1 794
396
FreeBSD 189908 7508 3.9 1368 197 367
41
Apache
38
CPython
nginx
14
15
OpenSSL
110
Wireshark
perlbench
18
3
bzip2
31
gcc
3
mcf
milc
8
8
namd
8
gobmk
soplex
2
1042
16
povray
5
671
hmmer
3
sjeng
253
libquantum 74
7
13
432
h264ref
2
11
lbm
omnetpp
340
19
4
42
astar
5
731
sphinx3
xalancbmk
19
4
Ind. % Tot. A.T. Proto Tot. A.T.
1.75 0.07
2.01 0.11
3.73 0.53
2.29 0.71
10.05 0.00
1.86 0.00
1.53 0.00
4.26 0.01
3.33 0.11
1.00 0.00
4.03 0.00
1.00 0.00
2.63 0.00
3.00 0.25
4.38 0.00
1.00 0.50
2.81 0.63
1.80 0.20
1.33 0.00
13.00 0.00
6.54 0.38
1.50 0.00
2.53 1.21
1.00 0.25
4.00 0.00
1.00 0.50
29
0
0
0
1
2
0
0
0
0
2
0
1
10
1
0
0
5
0
23
1
0
2
0
0
0
1
0
1
0
55
0
0
0
0
0
40
7
0
0
0
0
0
0
0
0
0
0
0
0
94
382
26
0.02 23
469
0.07 60
0
3
1.5 125
3
0
0
21
24
0
35
0
0
2
45
3.8
9
1
4
0
0
91
85
0
3
0
0
48
4
0
20
0
0
4
6
Table 2: Statistics of Variadic Functions for Different
Benchmarks. The second and third columns are vari-
adic call sites broken into “Tot.” (total) and “Ind.” (indi-
rect); % shows the percentage of variadic call sites. The
ﬁfth and sixth columns are for variadic functions. “A.T.”
stands for address taken. “Proto.” is the number of dis-
tinct variadic function prototypes. “Ratio” indicates the
function-per-prototypes ratio for variadic functions.
Call sites. The number of function calls targeting vari-
adic functions. We report the total number and how
many of them are indirect, since they are of particular
interest for an attack scenario where the adversary can
override a function pointer.
Variadic functions. The number of variadic functions.
We report their total number and how many of them
have their address taken, since CFI mechanism cannot
prevent functions with their address taken from being
reachable from indirect call sites.
Variadic prototypes. The number of distinct variadic
function prototypes in the program.
Functions-per-prototype. The average number of vari-
adic functions sharing the same prototype. This mea-
sures how many targets are available, on average, for
each indirect call sites targeting a speciﬁc prototype.
In practice, this the average number of permitted des-
tinations for an indirect call site in the case of a perfect
CFI implementation. We report this value both consid-
ering all the variadic functions and only those whose
address is taken.
Interestingly, each benchmark we analyzed contains
calls to variadic functions and several programs (Fire-
fox, OpenSSL, perlbench, gcc, povray, and hmmer) even
contain indirect calls to variadic functions. In addition to
calling variadic functions, each benchmark also deﬁnes
numerous variadic functions (421 for Firefox, 794 for
Chromium, 1368 for FreeBSD, 469 for Wireshark, and
382 for CPython). Variadic functions are therefore preva-
lent and used ubiquitously in software. Adversaries have
plenty of opportunities to modify these calls and to at-
tack the implicit contract between caller and callee. The
compiler is unable to enforce any static safety guaran-
tees when calling these functions, either for the number
of arguments, nor their types. In addition, many of the
benchmarks have variadic functions that are called indi-
rectly, often with their address being taken. Looking at
Firefox, a large piece of software, the numbers are even
more staggering with several thousand indirect call sites
that target variadic functions and 241 different variadic
prototypes.
The prevalence of variadic functions leaves both a
large attack surface for attackers to either redirect vari-
adic calls to alternate locations (even if defense mecha-
nisms like CFI are present) or to modify the arguments so
that callees misinterpret the supplied arguments (similar
to extended format string attacks).
In addition, the compiler has no insight into these
functions and cannot statically check if the programmer
supplied the correct parameters. Our sanitizer identi-
ﬁed three interesting cases in omnetpp, one of the SPEC
CPU2006 benchmarks that implements a discrete event
simulator. The benchmark calls a variadic functions with
a mismatched type, where it expects a char * but re-
ceives a NULL, which has type void *. Listing 5 shows
the offending code.
We also identiﬁed a bug in SPEC CPU2006’s
perlbench. This benchmark passes the result of a sub-
traction of two character pointers as an argument to a
USENIX Association
26th USENIX Security Symposium    193
static sEnumBuilder _EtherMessageKind(
"EtherMessageKind",
JAM_SIGNAL, "JAM_SIGNAL",
ETH_FRAME, "ETH_FRAME",
ETH_PAUSE, "ETH_PAUSE",
ETHCTRL_DATA, "ETHCTRL_DATA",
ETHCTRL_REGISTER_DSAP,
"ETHCTRL_REGISTER_DSAP",
ETHCTRL_DEREGISTER_DSAP,
"ETHCTRL_DEREGISTER_DSAP",
ETHCTRL_SENDPAUSE, "ETHCTRL_SENDPAUSE",
0, NULL
);
Listing 5: Variadic violation in omnetpp.
variadic function. At the call site, this argument is a ma-
chine word-sized integer (i.e., 64-bits integer on our test
platform). The callee truncates this argument to a 32-
bit integer by calling va arg(list, int). HexVASAN
reports this (likely unintended) truncation as a violation.
6.4 Firefox
We evaluate the performance of HexVASAN by in-
strumenting Firefox (51.0.1) and using three differ-
ent browser benchmark suites: Octane, JetStream, and
Kraken. Table 3 shows the comparison between the Hex-
VASAN instrumented Firefox and native Firefox. To re-
duce variance between individual runs, we averaged ﬁf-
teen runs for each benchmark (after one warmup run).
For each run we started Firefox, ran the benchmark, and
closed the browser. HexVASAN incurs only 1.08% and
1.01% overhead for Octane and JetStream respectively
and speeds up around 0.01% for Kraken. These num-
bers are indistinguishable from measurement noise. Oc-
tane [4] and JetStream measure the time a test takes to
complete and then assign a score that is inversely pro-
portional to the runtime, whereas Kraken [3] measures
Benchmark
Octane
JetStream
Kraken
AVERAGE
STDDEV
OVERHEAD
AVERAGE
STDDEV
OVERHEAD
AVERAGE [ms]
STDDEV [ms]
OVERHEAD
Native
31241.80
2449.82
200.76
0.66
832.48
7.41
HexVASAN
30907.73
2442.82
-1.08%
198.75
1.68
-1.01%
832.41
12.71
0.01%
Table 3: Performance overhead on Firefox benchmarks.
For Octane and JetStream higher is better, while for
Kraken lower is better.
Figure 2: Run-time overhead of HexVASAN in the
SPECint CPU2006 benchmarks, compared to baseline
LLVM 3.9.1 performance.
the speed of test cases gathered from different real-world
applications and libraries.
6.5 SPEC CPU2006
We measured HexVASAN’s run-time overhead by run-
ning the SPEC CPU2006 integer (CINT2006) bench-
marks on an Ubuntu 14.04.5 LTS machine with an Intel
Xeon E5-2660 CPU and 64 GiB of RAM. We ran each
benchmark program on its reference inputs and measured
the average run-time over three runs. Figure 2 shows the
results of these tests. We compiled each benchmark with
a vanilla clang/LLVM 3.9.1 compiler and optimization
level -O3 to establish a baseline. We then compiled the
benchmarks with our modiﬁed clang/LLVM 3.9.1 com-
piler to generate the HexVASAN results.
The geometric mean overhead in these benchmarks
indistinguishable from measurement
was just 0.45%,
noise. The only individual benchmark result that stands
out is that of libquantum. This benchmark program per-
formed 880M variadic function calls in a run of just 433
seconds.
6.6 Micro-benchmarks
Besides evaluating large benchmarks, we have also
measured HexVASAN’s runtime overhead on a set of
micro-benchmarks. We have written test cases for vari-
adic functions with different number of arguments, in
which we repeatedly invoke the variadic functions. Ta-
ble 4 shows the comparison between the native and
HexVASAN-instrumented micro-benchmarks. Overall,
HexVASAN incurs runtime overheads of 4-6x for vari-
adic function calls due to the additional security checks.
In real-world programs, however, variadic functions are
invoked rarely, so HexVASAN has little impact on the
overall runtime performance.
194    26th USENIX Security Symposium
USENIX Association
0.90.9511.051.1NativeHexVASAN# calls Native [µs] HexVASAN [µs]
Variadic function
argument count: 3
Variadic function
argument count: 12
1
100
1000
1
100
1000
0
2
20
0
6
55
0
12