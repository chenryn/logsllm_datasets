code, we can now call functions defined in C, and we call the
C.box() function, which executes the function defined in the
body of our C code ❹.
Build the sample code by using go build. When executed,
you should get a message box.
NOTE
Though the CGO package is extremely convenient, allowing you to call C
libraries from Go code as well as call Go libraries from C code, using it
gets rid of Go’s memory manager and garbage disposal. If you want to
reap the benefits of Go’s memory manager, you should allocate memory
within Go and then pass it to C. Otherwise, Go’s memory manager won’t
know about allocations you’ve made using the C memory manager, and
those allocations won’t be freed unless you call C’s native free() method. Not
freeing the memory correctly can have adverse effects on your Go code.
Finally, just like opening file handles in Go, use defer within your Go function
to ensure that any C memory that Go references is garbage collected.
Building Go into C
Just as we can embed C code into Go programs, we can embed
Go code into C programs. This is useful because, as of this
writing, the Go compiler can’t build our programs into DLLs.
That means we can’t build utilities such as reflective DLL
injection payloads (like the one we created earlier in this
chapter) with Go alone.
However, we can build our Go code into a C archive file,
and then use C to build the archive file into a DLL. In this
section, we’ll build a DLL by converting our Go code into a C
archive file. Then we’ll convert that DLL into shellcode by
using existing tools, so we can inject and execute it in
memory. Let’s start with the Go code (Listing 12-25), saved in
a file called main.go.
package main
❶ import "C"
import "fmt"
❷ //export Start
❸ func Start() {
fmt.Println("YO FROM GO")
}
❹ func main() {
}
Listing 12-25: The Go payload (/ch-12/dllshellcode/main.go)
We import C to include CGO into our build ❶. Next, we
use a comment to tell Go that we want to export a function in
our C archive ❷. Finally, we define the function we want to
convert into C ❸. The main() function ❹ can remain empty.
To build the C archive, execute the following command:
> go build -buildmode=c-archive
We should now have two files, an archive file called
dllshellcode.a and an associated header file called
dllshellcode.h. We can’t use these quite yet. We have to build
a shim in C and force the compiler to include dllshellcode.a.
One elegant solution is to use a function table. Create a file
that contains the code in Listing 12-26. Call this file scratch.c.
#include "dllshellcode.h"
void (*table[1]) = {Start};
Listing 12-26: A function table saved in the scratch.c file (/ch-
12/dllshellcode/scratch.c)
We can now use GCC to build the scratch.c C file into a
DLL by using the following command:
> gcc -shared -pthread -o x.dll scratch.c dllshellcode.a -lWinMM -lntdll -
lWS2_32
To convert our DLL into shellcode, we’ll use sRDI
(https://github.com/monoxgas/sRDI/), an excellent utility that
has a ton of functionality. To begin, download the repo by
using Git on Windows and, optionally, a GNU/Linux machine,
as you may find GNU/Linux to be a more readily available
Python 3 environment. You’ll need Python 3 for this exercise,
so install it if it’s not already installed.
From the sRDI directory, execute a python3 shell. Use the
following code to generate a hash of the exported function:
>>> from ShellCodeRDI import *
>>> HashFunctionName('Start')
1168596138
The sRDI tools will use the hash to identify a function from
the shellcode we’ll generate later.
Next, we’ll leverage PowerShell utilities to generate and
execute shellcode. For convenience, we will use some utilities
from PowerSploit
(https://github.com/PowerShellMafia/PowerSploit/), which is
a suite of PowerShell utilities we can leverage to inject
shellcode. You can download this using Git. From the
PowerSploit\CodeExecution directory, launch a new
PowerShell shell:
c:\tools\PowerSploit\CodeExecution> powershell.exe -exec bypass
Windows PowerShell
Copyright (C) 2016 Microsoft Corporation. All rights reserved.
Now import two PowerShell modules from PowerSploit
and sRDI:
PS C:\tools\PowerSploit\CodeExecution> Import-Module .\Invoke-Shellcode.ps1
PS C:\tools\PowerSploit\CodeExecution> cd ..\..\sRDI
PS C:\tools\sRDI> cd .\PowerShell\
PS C:\tools\sRDI\PowerShell> Import-Module .\ConvertTo-Shellcode.ps1
With both modules imported, we can use ConvertTo-Shellcode
from sRDI to generate shellcode from the DLL, and then pass
this into Invoke-Shellcode from PowerSploit to demonstrate the
injection. Once this executes, you should observe your Go
code executing:
PS C:\tools\sRDI\PowerShell> Invoke-Shellcode -Shellcode (ConvertTo-
Shellcode
-File C:\Users\tom\Downloads\x.dll -FunctionHash 1168596138)
Injecting shellcode into the running PowerShell process!
Do you wish to carry out your evil plans?
[Y] Yes [N] No [S] Suspend [?] Help (default is "Y"): Y
YO FROM GO
The message YO FROM Go indicates that we have
successfully launched our Go payload from within a C binary
that was converted into shellcode. This unlocks a whole host
of possibilities.
SUMMARY
That was quite a lot to discuss, and yet it just scratches the
surface. We started the chapter with a brief discussion about
navigating the Windows API documentation so you’d be
familiar with reconciling Windows objects to usable Go
objects: these include functions, parameters, data types, and
return values. Next, we discussed the use of uintptr and
unsafe.Pointer to perform disparate type conversions necessary
when interacting with the Go syscall package, along with the
potential pitfalls to avoid. We then tied everything together
with a demonstration of process injection, which used various
Go system calls to interact with Windows process internals.
From there, we discussed the PE file format structure, and
then built a parser to navigate the different file structures. We
demonstrated various Go objects that make navigating the
binary PE file a bit more convenient and finished up with
notable offsets that may be interesting when backdooring a PE
file.
Lastly, you built a toolchain to interoperate with Go and
native C code. We briefly discussed the CGO package while
focusing on creating C code examples and exploring novel
tools for creating native Go DLLs.
Take this chapter and expand on what you’ve learned. We
urge you to continuously build, break, and research the many
attack disciplines. The Windows attack surface is constantly
evolving, and having the right knowledge and tooling will
only help to make the adversarial journey more attainable.
13
HIDING DATA WITH
STEGANOGRAPHY
The word steganography is a combination of the Greek words
steganos, which means to cover, conceal, or protect, and
graphien, which means to write. In security, steganography
refers to techniques and procedures used to obfuscate (or hide)
data by implanting it within other data, such as an image, so it
can be extracted at a future point in time. As part of the
security community, you’ll explore this practice on a routine
basis by hiding payloads that you’ll recover after they are
delivered to the target.
In this chapter, you’ll implant data within a Portable
Network Graphics (PNG) image. You’ll first explore the PNG
format and learn how to read PNG data. You’ll then implant
your own data into the existing image. Finally, you’ll explore
XOR, a method for encrypting and decrypting your implanted
data.
EXPLORING THE PNG FORMAT
Let’s start by reviewing the PNG specification, which will
help you understand the PNG image format and how to
implant data into a file. You can find its technical specification
at http://www.libpng.org/pub/png/spec/1.2/PNG-
Structure.html. It provides details about the byte format of a
binary PNG image file, which is made up of repetitive byte
chunks.
Open a PNG file within a hex editor and navigate through
each of the relevant byte chunk components to see what each
does. We’re using the native hexdump hex editor on Linux,
but any hex editor should work. You can find the sample
image that we’ll open at https://github.com/blackhat-
go/bhg/blob/master/ch-13/imgInject/images/battlecat.png;
however, all valid PNG images will follow the same format.
The Header
The first 8 bytes of the image file, 89 50 4e 47 0d 0a 1a 0a,
highlighted in Figure 13-1, are called the header.
Figure 13-1: The PNG file’s header
The second, third, and fourth hex values literally read PNG
when converted to ASCII. The arbitrary trailing bytes consist
of both DOS and Unix Carriage-Return Line Feed (CRLF).
This specific header sequence, referred to as a file’s magic
bytes, will be identical in every valid PNG file. The variations
in content occur in the remaining chunks, as you’ll soon see.
As we work through this spec, let’s start to build a
representation of the PNG format in Go. It’ll help us expedite
our end goal of embedding payloads. Since the header is 8
bytes long, it can be packed into a uint64 data type, so let’s go
ahead and build a struct called Header that will hold the value
(Listing 13-1). (All the code listings at the root location of /
exist under the provided github repo
https://github.com/blackhat-go/bhg/.)
//Header holds the first UINT64 (Magic Bytes)
type Header struct {
Header uint64
}
Listing 13-1: Header struct definition (/ch-13/imgInject/pnglib/commands.go)
The Chunk Sequence
The remainder of the PNG file, shown in Figure 13-2, is
composed of repeating byte chunks that follow this pattern:
SIZE (4 bytes), TYPE (4 bytes), DATA (any number of bytes), and
CRC (4 bytes).
Figure 13-2: The pattern of the chunks used for the remainder of the image data
Reviewing the hex dump in further detail, you can see that
the first chunk—the SIZE chunk—consists of bytes 0x00 0x00
0x00 0x0d. This chunk defines the length of the DATA chunk
that’ll follow. The hexadecimal conversion to ASCII is 13—so
this chunk dictates that the DATA chunk will consist of 13
bytes. The TYPE chunk’s bytes, 0x49 0x48 0x44 0x52, convert to an
ASCII value of IHDR in this case. The PNG spec defines
various valid types. Some of these types, such as IHDR, are
used to define image metadata or signal the end of an image
data stream. Other types, specifically the IDAT type, contain the
actual image bytes.
Next is the DATA chunk, whose length is defined by the SIZE
chunk. Finally, the CRC chunk concludes the overall chunk
segment. It consists of a CRC-32 checksum of the combined
TYPE and DATA bytes. This particular CRC chunk’s bytes are
0x9a 0x76 0x82 0x70. This format repeats itself throughout the
entire image file until you reach an End of File (EOF) state,
indicated by the chunk of type IEND.
Just as you did with the Header struct in Listing 13-1, build a
struct to hold the values of a single chunk, as defined in
Listing 13-2.
//Chunk represents a data byte chunk segment
type Chunk struct {
Size uint32
Type uint32
Data []byte
CRC uint32
}
Listing 13-2: Chunk struct definition (/ch-13/imgInject/pnglib/commands.go)
READING IMAGE BYTE DATA
The Go language handles binary data reads and writes with
relative ease, thanks in part to the binary package (which you
may remember from Chapter 6), but before you can parse
PNG data, you’ll need to open a file for reading. Let’s create a
PreProcessImage() function that will consume a file handle of type
*os.File and return a type of *bytes.Reader (Listing 13-3).
//PreProcessImage reads to buffer from file handle
func PreProcessImage(dat *os.File) (*bytes.Reader, error) {
❶ stats, err := dat.Stat()
if err != nil {
return nil, err
}
❷ var size = stats.Size()
b := make([]byte, size)
❸ bufR := bufio.NewReader(dat)
_, err = bufR.Read(b)
bReader := bytes.NewReader(b)
return bReader, err
}
Listing 13-3: The PreProcessImage() function definition (/ch-
13/imgInject/utils/reader.go)
The function opens a file object in order to obtain a FileInfo
structure ❶ used to grab size information ❷. Immediately
following are a couple of lines of code used to instantiate a
Reader instance via bufio.NewReader() and then a *bytes.Reader
instance via a call to bytes.NewReader() ❸. The function returns a
*bytes.Reader, which positions you to start using the binary
package to read byte data. You’ll first read the header data and
then read the chunk sequence.
Reading the Header Data
To validate that the file is actually a PNG file, use the first 8
bytes, which define a PNG file, to build the validate() method
(Listing 13-4).
func (mc *MetaChunk) validate(b *bytes.Reader) {
var header Header
if err := binary.Read(b, binary.BigEndian, &header.Header)❶; err != nil {
log.Fatal(err)
}
bArr := make([]byte, 8)
binary.BigEndian.PutUint64(bArr, header.Header)❷
if string(bArr[1:4])❸ != "PNG" {
log.Fatal("Provided file is not a valid PNG format")
} else {
fmt.Println("Valid PNG so let us continue!")
}
}
Listing 13-4: Validating that the file is a PNG file (/ch-
13/imgInject/pnglib/commands.go)
Although this method may not seem overly complex, it
introduces a couple of new items. The first, and the most
obvious one, is the binary.Read() function ❶ that copies the first
8 bytes from the bytes.Reader into the Header struct value. Recall
that you declared the Header struct field as type uint64 (Listing
13-1), which is equivalent to 8 bytes. It’s also noteworthy that
the binary package provides methods to read Most Significant Bit
and Least Significant Bit formats via binary.BigEndian and
binary.LittleEndian, respectively ❷. These functions can also be
quite helpful when you’re performing binary writes; for
example, you could select BigEndian to place bytes on the wire
dictating the use of network byte ordering.
The binary endianness function also contains the methods
that facilitate the marshaling of data types to a literal data type
(such as uint64). Here, you’re creating a byte array of length 8
and performing a binary read necessary to copy the data into a
unit64 data type. You can then convert the bytes to their string
representations and use slicing and a simple string comparison
to validate that bytes 1 through 4 produce PNG, indicating that
you have a valid image file format ❸.
To improve the process of checking that a file is a PNG
file, we encourage you to look at the Go bytes package, as it
contains convenience functions that you could use as a
shortcut to compare a file header with the PNG magic byte
sequence we mentioned earlier. We’ll let you explore this on
your own.
Reading the Chunk Sequence
Once you validated that your file is a PNG image, you can
write the code that reads the chunk sequence. The header will
occur only once in a PNG file, whereas the chunk sequence
will repeat the SIZE, TYPE, DATA, and CRC chunks until it
reaches the EOF. Therefore, you need to be able to
accommodate this repetition, which you can do most
conveniently by using a Go conditional loop. With this in
mind, let’s build out a ProcessImage() method, which iteratively
processes all the data chunks up to the end of file (Listing 13-
5).
func (mc *MetaChunk) ProcessImage(b *bytes.Reader, c
*models.CmdLineOpts)❶ {
// Snip code for brevity (Only displaying relevant lines from code block)
count := 1 //Start at 1 because 0 is reserved for magic byte
❷ chunkType := ""
❸ endChunkType := "IEND" //The last TYPE prior to EOF
❹ for chunkType != endChunkType {
fmt.Println("---- Chunk # " + strconv.Itoa(count) + " ----")
offset := chk.getOffset(b)
fmt.Printf("Chunk Offset: %#02x\n", offset)
chk.readChunk(b)
chunkType = chk.chunkTypeToString()
count++
}
}
Listing 13-5: The ProcessImage() method (/ch-13/imgInject/pnglib/commands.go)
You first pass a reference to a bytes.Reader memory address
pointer (*bytes.Reader) as an argument to ProcessImage() ❶. The
validate() method (Listing 13-4) you just created also took a
reference to a bytes.Reader pointer. As convention dictates,
multiple references to the same memory address pointer
location will inherently allow mutable access to the referenced
data. This essentially means that as you pass your bytes.Reader
reference as an argument to ProcessImage(), the reader will have
already advanced 8 bytes as a result of the size of the Header
because you’re accessing the same instance of bytes.Reader.
Alternatively, had you not passed a pointer, the bytes.Reader
would have either been a copy of the same PNG image data or
separate unique instance data. That’s because advancing the
pointer when you read the header would not have advanced
the reader appropriately elsewhere. You want to avoid taking
this approach. For one, passing around multiple copies of data
when unnecessary is simply bad convention. More
importantly, each time a copy is passed, it is positioned at the
start of the file, forcing you to programmatically define and
manage its position in the file prior to reading a chunk
sequence.
As you progress through the block of code, you define a
count variable to track how many chunk segments the image
file contains. The chunkType ❷ and endChunkType ❸ are used as
part of the comparative logic, which evaluates the current
chunkType to endChunkType’s IEND value designating an EOF
condition ❹.
It would be nice to know where each chunk segment starts
—or rather, each chunk’s absolute position within the file byte
construct, a value known as the offset. If you know the offset
value, it will be much easier to implant a payload into the file.
For example, you can give a collection of offset locations to a
decoder—a separate function that collects the bytes at each
known offset—that then unwinds them into your intended
payload. To get the offsets of each chunk, you’ll call the
mc.getOffset(b) method (Listing 13-6).
func (mc *MetaChunk) getOffset(b *bytes.Reader) {
offset, _ := b.Seek(0, 1)❶
mc.Offset = offset
}
Listing 13-6: The getOffset() method (/ch-13/imgInject/pnglib/commands.go)
The bytes.Reader contains a Seek() method that makes deriving
the current position quite simple. The Seek() method moves the
current read or write offset and then returns the new offset
relative to the start of the file. Its first argument is the number
of bytes by which you want to move the offset and its second
argument defines the position from which the move will occur.
The second argument’s optional values are 0 (Start of File), 1
(Current Position), and 2 (End of File). For example, if you
wanted to shift 8 bytes to the left from your current position,
you would use b.Seek(-8,1).
Here, b.Seek(0,1) ❶ states that you want to move your offset
0 bytes from the current position, so it simply returns the
current offset: essentially retrieving the offset without moving
it.
The next methods we detail define how you read the actual
chunk segment bytes. To make things a bit more legible, let’s
create a readChunk() method and then create separate methods for
reading each chunk subfield (Listing 13-7).