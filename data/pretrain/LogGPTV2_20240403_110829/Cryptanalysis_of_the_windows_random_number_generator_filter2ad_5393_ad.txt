examine the values of State and R when the WRNG is used
by IE. In all but a few invocations they were assigned to the
same stack location and retained their state between invo-
cations. In the few times that they were assigned to other
locations, their values were correlated.
We do not know how to explain this “loose” management
of the state, and cannot tell whether it is a feature or a bug.
In the attacks we describe in Section 3 we show how to com-
pute previous states assuming that State and R retain their
state between invocations of the generator. These attacks
are relevant even given the behavior we inspected above, for
two reasons: (1) We observed that in IE the WRNG almost
always retains the values of State and R. When it does not,
the values of these variables seem to be rather predictable.
The attacker can therefore continue with the attack until
it notices that it cannot reproduce the WRNG output any-
more. The attacker should then enumerate over the most
likely values of State and R until it can continue the attack.
(This attack requires an additional analysis of State and R,
but it does seem feasible.) (2) Other applications might use
the WRNG is such a way that the stack locations in which
the values of State and R are stored are never overwritten.
Initialization of RC4 states. As noted above, the diﬀerent
RC4 instances used by the same WRNG instance are ini-
tialized one after the other by vectors of system data which
are quite correlated. This is also true, to a lesser extent, for
two instances of the WRNG run by two processes. On the
other hand, the VeryLargeHash function which is applied
to these values is based on the SHA-1 hash function, and
is likely to destroy any correlation between related inputs.
We have not examined the entropy sources in detail, and
have not found any potential correlation of the outputs of
the VeryLargeHash function.
The output of VeryLargeHash is used as a key for two
RC4 encryption of the variables Seed and KSecDD, respec-
tively, and the result is used to initialize the RC4 state of
the WRNG. Even if an attacker knows the values of Seed
and KSecDD, they do not help it to predict the output of
VeryLargeHash, and consequently predict the initialization
of the RC4 state. The RC4 algorithm itself is known to
be vulnerable to related key attacks, and it is known that
its ﬁrst output bytes are not uniformly distributed [6]. We
were not able, however, to use these observations to attack
the WRNG, since it applies SHA-1 to its state before out-
putting it.6
Although we were not able to attack the RC4 initializa-
tion process, it seems that a more reasonable initialization
procedure would have gathered system entropy once, and
used it to generate initialization data to all eight RC4 in-
stances. (Say, by running the ﬁnal invocation of RC4 in the
initialization procedure to generate 8 × 256 = 2048 bytes
which initialize all eight RC4 instances.)
5. COMPARISON TO THE LINUX PRNG
The pseudo-random number generator used in the Linux
operating system (denoted LRNG) was analyzed in [10].
The analysis of the WRNG shows that it diﬀers from the
LRNG in several major design issues.
Kernel versus User mode. The LRNG is implemented
entirely in kernel mode while a large part of the WRNG is
running in user mode.
Security implication: An application which runs in
Windows and uses the WRNG can read the entire state of
the WRNG, while the LRNG is hidden from Linux applica-
tions. This means that, compared to Linux, it is easier for
an attacker to obtain a state of the WRNG.
Reseeding timeout. The LRNG is feeding the state with
system based entropy in every iteration and whenever sys-
tem events happen, while the WRNG is reseeding its state
only after generating 128 KBytes of output.
Synchronization. The collection of entropy in the LRNG is
asynchronous: whenever there is an entropy event the data
6We note that the distribution of the ﬁrst output bytes of
RC4 is known to be slightly biased, and the output of the
WRNG is computed by applying SHA-1 to a function of
RC4, State and R. Therefore, an attacker which knows the
values of State and R knows that there is a slight bias in the
distribution of the output of the WRNG. However, this bias
seems to be too weak to be useful.
is accumulated in the state of the generator. In the WRNG
the entropy is collected only for a short period of time before
the state is reseeded. In the long period between reseedings
there is no entropy collection.
Scoping. The LRNG runs a single copy of the generator
which is shared among all users running on the same ma-
chine. In Windows, on the other hand, a diﬀerent instance
of the generator is run for every process on the machine.
Eﬃciency of attacks. The best forward security attack on
the LRNG requires O(264) work. The attack on the forward
security of the WRNG is therefore more eﬃcient by a fac-
tor of about 240 (it has an overhead of O(223) compared to
O(264)).
Security implication: The impact of the previous four
properties is that forward and backward security attacks are
more severe when applied to the WRNG. The attacks are
more eﬃcient by twelve orders of magnitude. They reveal
the outputs of the generator between consecutive reseedings,
and these reseedings are much more rare in the case of the
WRNG. In some cases, reseeding the LRNG happens every
few seconds, while the WRNG is reseeded every few days, if
it is reseeded at all.
Blocking. The LRNG implements an entropy estimation
counter which is used to block it from generating output
when there is not enough system entropy within the gen-
erator. This leads to situations where the generator halts
until suﬃcient system entropy is collected. Hence, this also
leads to easy denial of service attacks when one consumer
of pseudo-random bits can empty the system entropy pools
and block other users. The WRNG does not use entropy
measurements, and is therefore not blocking.
Security implication: Unlike the LRNG, the WRNG is
not vulnerable to denial of service attacks.
6. CONCLUSIONS
6.1 Conclusions
WRNG design. The paper presents a clear description of
the WRNG, the most frequently used PRNG. The WRNG
has a complex layered architecture which includes entropy
rekeying every 128 KBytes of output, and uses RC4 and
SHA-1 as building blocks. Windows runs the WRNG in
user space, and keeps a diﬀerent instance of the generator
for every process.
Attacks. The WRNG depends on the use of RC4, which
does not provide any forward security. We used this fact to
show how an adversary which learns the state of the WRNG
can compute past and future outputs of the generator. The
attacker can learn future outputs in O(1) time and com-
pute past outputs in O(223) time. These attacks can be
run within seconds or minutes on a modern PC and enable
such an attacker to learn the values of cryptographic keys
generated by the generator. The attacks on both forward
and backward security reveal all outputs until the time the
generator is rekeyed with system entropy. Given the way
in which the operating system operates the generator, this
means that a single attack reveals 128 KBytes of generator
output for every process.
Code analysis. Our research is based on studying the
WRNG by examining its binary code. We were not provided
with any help from Microsoft and were only using the binary
versions of Windows. To verify our ﬁndings we developed a
user mode simulator which captures WRNG states and com-
putes future and past outputs of the WRNG. We validated
the simulator output against real runs of the WRNG.
WRNG versus LRNG. We compared between the pseudo-
random generators used by Windows and Linux (WRNG
vs. LRNG). The forward security attack on the WRNG is
faster by a factor of O(240) compared to the attack on the
LRNG. In addition, our ﬁndings show that the LRNG has
better usage of operating system entropy, uses asynchronous
entropy feedings, uses the extraction process as an entropy
source, and shares its output between multiple processes.
As a result, a forward security attack on the WRNG reveals
longer sequences of generator output, compared to an attack
on the LRNG.
6.2 Recommendations
Forward security. The most obvious recommendation is
to change the algorithm used by the WRNG to one which
provides forward security. This can be done by making local
changes to the current implementation of the generator, or
by replacing RC4 with a function which provides forward
security. Alternatively, it is possible to use the transforma-
tion of [4] which transforms any standard generator to one
providing forward security. We believe however that it is
preferable to replace the entire algorithm used by the gener-
ator with a simpler algorithm which is rigorously analyzed.
A good approach is to adopt the Barak-Halevi construction.
That construction, suggested in [2], is a simple construction
of entropy based PRNGs. Its implementation is simpler than
the current WRNG implementation, and, assuming that its
building blocks are secure, it provably preserves both for-
ward and backward security. It can be implemented using,
say, AES and a simple entropy extractor.
Frequency of entropy based rekeys. The generator should
rekey its state more often. We also suggest that rekeys are
forced based on the amount of time that has passed since the
last rekey. It is important to note that entropy based rekeys
are required in order to limit the eﬀect of attacks mounted
by an adversary which obtains the state of the generator.
The risk of an adversary getting hold of the state seems
to be more dependent on the amount of time the system
runs, than on the length of the output of the generator.
It therefore makes sense to force rekeys every some time
interval, rather than deciding whether to rekey based on the
amount of output produced by the generator.
6.3 Open Problems
Extending our research to additional Windows platforms.
Our entire research was conducted on a speciﬁc Windows
2000 build. We did several early checks on additional binary
versions of Windows but that work is only in its beginning.
The important operating systems to examine are the main
Windows releases such as Windows XP and Windows Vista,
as well as systems which have fewer sources of entropy, such
as Windows CE.
State initialization. As we stated in our analysis, the inter-
nal RC4 states are initialized and rekeyed with very similar
entropy parameters. These are hashed by a procedure which
uses SHA-1 and propagates a change in the value of a single
input bit to all output bits. The result of this procedure
initializes the RC4 algorithm. We were not able to use this
ﬁnding, but it seems that additional research is needed here.
The research should examine the diﬀerent entropy sources
and the hashing algorithm, and check if they result in any
related key attack on RC4. We also noted that the state
variables State and R are not explicitly initialized but rather
take the current values stored in the stack. More research is
needed to examine in detail the distribution of these values.
Acknowledgments
We would like to thank Dag Arne Osvik and Werner
Schindler for their helpful comments regarding this paper.
7. REFERENCES
[1] AIS 20: Functionality classes and evaluation
methodology for deterministic random number
generators. Application Notes and Interpretations of
the Scheme (AIS) Version 1, Bundesamt f¨ur Sicherheit
in der Informationstechnik, Dec. 1999.
[2] B. Barak and S. Halevi. An architecture for robust
pseudo-random generation and applications to
/dev/random. In Proc. ACM Conf. on Computing and
Communication Security (ACM CCS), 2005.
[3] D. Beaver and S. Haber. Cryptographic protocols
provably secure against dynamic adversaries. In
EUROCRYPT ’92, pages 307–323, 1992.
[4] M. Bellare and B. S. Yee. Forward-security in
private-key cryptography. In M. Joye, editor, CT-RSA
’03, volume 2612 of Lecture Notes in Computer
Science, pages 1–18. Springer, 2003.
[5] T. de Raadt, N. Hallqvist, A. Grabowski, A. D.
Keromytis, and N. Provos. Cryptography in openbsd:
An overview. In USENIX Annual Technical Conf.,
FREENIX Track, pages 93–101, 1999.
[6] S. R. Fluhrer, I. Mantin, and A. Shamir. Weaknesses
in the key scheduling algorithm of RC4. In SAC ’01,
pages 1–24. Springer-Verlag, 2001.
[7] I. Goldberg and D. Wagner. Randomness in the
netscape browser. Dr. Dobb’s Journal, January 1996.
[8] P. Gutmann. Software generation of practically strong
random numbers. In Proc. of 7th USENIX Security
Symposium, 1998. An updated version appears in
http://www.cypherpunks.to/~peter/06_random.pdf.
[9] Z. Gutterman and D. Malkhi. Hold your sessions: An
attack on java session-id generation. In CT-RSA ’05,
volume 3376 of LNCS, pages 44–57. Springer, 2005.
[10] Z. Gutterman, B. Pinkas, and T. Reinman. Analysis
of the linux random number generator. In IEEE
Symp. on Security and Privacy, Oakland, CA, USA,
May 2006.
[11] M. Howard and D. LeBlanc. Writing Secure Code.
Microsoft Press, 2 edition, April 2002.
[12] J. Kelsey. Entropy and entropy sources in x9.82.
http://csrc.nist.gov/CryptoToolkit/RNG/
Workshop/EntropySources.pdf, July 2004.
[13] J. Kelsey, B. Schneier, D. Wagner, and C. Hall.
Cryptanalytic attacks on pseudorandom number
generators. In Fast Software Encryption ’98, volume
1372 of LNCS, pages 168–188. Springer, 1998.
[14] M. R. V. Murray. An implementation of the Yarrow
PRNG for FreeBSD. In S. J. Leﬄer, editor, BSDCon,
pages 47–53. USENIX, 2002.
[15] D. A. Osvik. personal communication, 2007.
[16] T. Ts’o. random.c — linux kernel random number
generator. http://www.kernel.org.
Table 1: Entropy sources
Source
CircularHash
KSecDD
GetCurrentProcessID()
GetCurrentThreadID()
GetTickCount()
GetLocalTime()
QueryPerformanceCounter()
GlobalMemoryStatus()
GetDiskFreeSpace()
GetComputerName()
GetUserName()
GetCursorPos()
GetMessageTime()
Size in bytes requested
256
256
8
8
8
16
24
16
40
16
257
8
16
NTQuerySystemInformation calls
ProcessorTimes
Performance
Exception
Lookaside
ProcessorStatistics
ProcessesAndThreads
48
312
16
32
up to the remaining length
up to the remaining length
APPENDIX
A. RC4
RC4 is a stream cipher. It is initialized by the following
key scheduling algorithm (KSA). (The array key holds the
key, keylength is the key size in bytes.)
for i from 0 to 255
S [ i ] := i
j := 0
for i from 0 to 255
j := ( j + S [ i ]
+ key [ i mod k e y l e n g t h ]) mod 256
swap ( S [ i ] , S [ j ])
Following is the algorithm used by RC4 to generate pseudo
random output. This output is xored with the clear text for
encryption.
i := 0
j := 0
while G e n e r a t i n g O u t p u t :
i := ( i + 1) mod 256
j := ( j + S [ i ]) mod 256
swap ( S [ i ] , S [ j ])
output S [( S [ i ] + S [ j ]) mod 256]
RC4 has no forward security: Suppose we are given its
state just before the tth iteration of the output generation
algorithm (namely, the values of St, it and jt). It is easy to
compute the previous state, and consequently the previous
output, by running the following operations:
swap ( S [ i ] , S [ j ])
j := ( j - S [ i ]) mod 256
i := ( i - 1) mod 256
Therefore, given the state of RC4 at a speciﬁc time, it is
easy to compute all its previous states and outputs.