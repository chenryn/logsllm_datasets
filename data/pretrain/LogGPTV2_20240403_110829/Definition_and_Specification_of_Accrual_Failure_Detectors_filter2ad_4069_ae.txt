Algorithm 3 Transforming an accrual failure detector into a binary one using two thresholds.
1: Initialization:
2:
3: when queried about process p
4:
5:
6:
7:
8:
sl := sl qp(t)
if sl > T (t) and status = trust then
if sl ≤ T0(t) and status = suspect then
status := suspect
status := trust
{current status (trust or suspect)}
{get current suspicion level}
{suspect if level beyond high threshold}
{trust if level below low threshold (or equal)}
16
PROOF.
(for Theorem 1). The proof is straightforward for DT1 and DT2:
DT2 suspects p at t ⇒ sl qp(t) > T2(t)
⇒ sl qp(t) > T1(t) ⇒ DT1 suspects p at t
T2. Consider a time t when D0
T1 and D0
The proof is more complicated for D0
T2 suspects p. Let
t0 be the time of the preceding S-transition (or the time of the ﬁrst query if there is no preceding S-
transition) and t1  T2(t0)
⇒ sl qp(t0) > T1(t0) ⇒ D0
T1 suspects p at t0
We then prove by induction that both failure detectors suspect p at tk = t as well. The induction
step is the following, for any k = 1, . . . , K:
(D0
T2 suspects p at tk−1 ⇒ D0
T2 suspects p at tk) ⇒ sl qp(tk) > T0(tk)
As t was chosen arbitrarily, this completes the proof.
⇒ (D0
T1 suspects p at tk−1 ⇒ D0
T1 suspects p at tk)
(cid:3)Theorem 1
(for Theorem 4)
Let the query preceding the query at time t happen at time t0. We know that D0
PROOF.
suspects p at t0, hence sl qp(t) ≤ T0(t). Theorem 1 ensures that also D0
sl qp(t) ≤ T0(t) implies that also D0
T1 makes a T-transition at t.
T2 trusts p at t but
T1 suspects p at t0. This and
(cid:3)Theorem 4
A.4 Simple implementation in a partially synchronous model
We now describe, in further details, the simple implementation outlined in Section 5.1, and show that it
implements an accrual failure detector of class ♦P ac in a partially synchronous system model. Notice
that the algorithm described in this section is intended as a simple illustration.
Partially synchronous system model. We extend the model of Section 2, by considering that pro-
cesses communicate only by message-passing. We assume that processes have their own memory
space.7 Also, channels are reliable, and we consider only crash failures of processes. We assume
a partially synchronous model, as deﬁned by Chandra and Toueg [7], where some unknown bounds
on process speed and message delays hold after some unknown time called GST (stands for global
stabilization time).8 We also assume a local clock that has a bounded drift from global time after
GST . The local clock is accessed by the function now. More precisely, the bounded drift means that
now(t0) − now(t) > θ · (t0 − t) for all t0 > t > GST and some θ > 0.
Algorithm. The algorithm (Algorithm 4) is based on heartbeats and is actually quite simple. The code
of the algorithm, identical for all processes, is expressed for some arbitrary process q ∈ Π. A monitored
process sends heartbeat messages on a regular basis, according to its own local clock. Heartbeats are
sequence numbered. A monitoring process q keeps track of the time of arrival Tlast(p) (according to its
own local clock) of the most recent heartbeat message from a monitored process p. The value of the
function sl qp(t) is given by the time elapsed since the arrival of the most recent heartbeat (according to
the local clock of the monitoring process).
7This means that variables are not shared between processes. Although the same variable name (say, Tlast ) may be em-
ployed by two different processes (say, p and q), this always refers to two distinct variables (that is, Tlast of p and Tlast of
q).
8This model is in fact a simple variation over the deﬁnitions of partial synchrony due to Dwork et al. [14].
17
Tlast(p) := start
SNlast(p) := 0
start := now
next sn := 1
forall p in Π − {q} do
Algorithm 4 Simple implementation of an accrual failure detector.
code of some process q ∈ Π:
1: Initialization:
2:
3:
4:
5:
6:
7: when receive (heartbeat, sn) from p
8:
9:
10:
11: periodically do
12:
13:
14: when queried about process p at time t
15:
16:
17:
18:
broadcast (heartbeat, next sn)
next sn := next sn + 1
if p 6= q then
sl qp(t) := t − Tlast(p)
Tlast(p) := now
SNlast(p) := sn
if sn > SNlast(p) then
sl qp(t) := 0
else
{Sequence number for the next heartbeat}
{Arrival time of the last heartbeat from each process}
{Seq. number of the last heartbeat received}
{receive heartbeat with sequence number sn}
{rounded to the precision }
Lemma 13 Algorithm 4 satisﬁes Prop. 1 (Accruement) for sl qp , where p and q are two distinct pro-
cesses in Π.
PROOF. Let process p be faulty. It is sufﬁcient to prove that after some stabilization time, sl qp(t) is
increasing, and that it only remains constant during a bounded number of queries.
Since p crashes, it can send only a ﬁnite number of heartbeat messages. Let t0 be the time when the
heartbeat with the greatest sequence number ever received arrives. At this time, the algorithm updates
Tlast(p) to now(t0) (i.e., t0 in local time) and this value never changes again. It follows that, for any
time t after t0, sl qp(t) = now(t) − now(t0).
This function is increasing after t0. We still have to ﬁnd a number of queries Q such that sl qp
increases at least once every Q queries (after t0):
sl qp(tquery
q
(k + Q)) − sl qp(tquery
q
(k)) ≥ 
Using that the drift of the local clock is bounded by θ, and that at least δ time elapses between
queries (see Section 2), we obtain a lower bound for sl qp(tquery
q
(k + Q)) − sl qp(tquery
q
(k)):
(k + Q)) − now(tquery
q
now(tquery
We need to ensure that this lower bound is at least . Thus Q = d/δθe is a suitable choice for
(cid:3)Lemma 13
ensuring that sl qp(t) increases at least once every Q queries.
q
q
q
(k + Q)) > θ · (tquery
(k + Q) − tquery
(k)) ≥ θ · (Q · δ)
Lemma 14 Algorithm 4 satisﬁes Prop. 2 (Upper Bound) for sl qp , where p and q are two distinct
processes in Π.
PROOF. Let process p be correct. We must prove that sl qp(t) is bounded. All times that appear are in
local time.
sl qp(t) is bounded by t1 − start.
Let t1 be the time when the ﬁrst heartbeat message H1 sent after GST arrives. Clearly, until t1,
18
After t1, only heartbeat messages with a higher sequence number than H1, hence sent after H1, are
taken into account. It follows that they are subject to the synchrony assumptions of the model. Let ∆
be the end-to-end upper bound on transmission time, and ∆0 the maximal interval between the sending
of two consecutive heartbeats. It follows that the largest interval that elapses between receiving two
consecutive heartbeats is ∆ + ∆0.
Combining the two parts, we obtain that sl qp(t) is bounded by max(t1 − start, ∆ + ∆0).
(cid:3)Lemma 14
Theorem 15 Algorithm 4 implements an accrual failure detector of class ♦P ac.
PROOF.
arbitrarily chosen pair of processes.
The proof follows directly from Lemma 13 and Lemma 14, as these lemmas hold for an
(cid:3)Theorem 15
A.5 Discussion on the Accruement property
When deﬁning the suspicion level function in Section 3.1, we mentioned that there was a simple alter-
native to Accruement (Property 1):
Property 3 (Weak Accruement) If process p is faulty, then eventually, the suspicion level sl qp(t) is
monotonously increasing and goes to inﬁnity:
t→+∞ sl qp(t) = +∞
lim
We now prove that this property is not strong enough for our purposes. In particular, it does not allow
the implementation of a ♦P binary failure detector on top of a ♦P ac accrual failure detector (deﬁned
with Weak Accruement).
For simplicity, we present the proof for two processes p and q, with q monitoring p. Consider
any algorithm A that implements ♦P, and an adversary that controls the suspicion level sl qp. Let the
adversary reply to queries using the following strategy:
1. If the algorithm A suspects p, then keep sl qp constant, i.e., return the result of the previous query.
2. If the algorithm A trusts q, then increase sl qp by  with respect to the result of the previous query.
At any time t, the history of the accrual failure detector produced by the adversary satisﬁes both
Properties 2 and 3. Nevertheless, algorithm A does not implement a ♦P failure detector. The proof is
indirect: suppose that A implements a ♦P failure detector.
1. If p is faulty, A must eventually suspect p forever. Suppose that A suspects p from time t on. sl qp
will be constant after t, and thus it does not go to inﬁnity. Hence Weak Accruement (Property 3)
does not hold, and thus p must be correct.
2. If p is correct, A must eventually trust p forever. Suppose that A trusts p from time t on. After t,
sl qp will grow by  upon every query, hence it goes to inﬁnity. Hence Upper Bound (Property 2)
does not hold, and thus p must be faulty.
rithm A can implement a ♦P binary failure detector on top of our adversary.
We have come to a contradiction whether p is correct or faulty, hence we have shown that no algo-
Finally, note why this adversary does not work with ♦P ac accrual failure detectors deﬁned by Ac-
cruement (Property 1). The reason is that it keeps sl qp constant for an arbitrarily long period if p is
faulty, whereas the Accruement property disallows this: sl qp may only remain constant during a limited
number of queries if p is faulty (although the limit is unknown).
19
View publication stats
View publication stats