reverse proxy is the only host communicating with the
Metasploit listener. You can also confirm that the Host header
is set appropriately to attacker1.com (for the listener on port
10080) and attacker2.com (for the listener on port 20080).
That’s it. You’ve done it! Now, take it up a notch. As an
exercise for you, we recommend you update the code to use a
staged payload. This likely comes with additional challenges,
as you’ll need to ensure that both stages are properly routed
through the proxy. Further, try to implement it by using
HTTPS instead of cleartext HTTP. This will further your
understanding and effectiveness at proxying traffic in useful,
nefarious ways.
SUMMARY
You’ve completed your journey of HTTP, working through
both client and server implementations over the last two
chapters. In the next chapter, you’ll focus on DNS, an equally
useful protocol for security practitioners. In fact, you’ll come
close to replicating this HTTP multiplexing example using
DNS.
5
EXPLOITING DNS
The Domain Name System (DNS) locates internet domain
names and translates them to IP addresses. It can be an
effective weapon in the hands of an attacker, because
organizations commonly allow the protocol to egress restricted
networks and they frequently fail to monitor its use
adequately. It takes a little knowledge, but savvy attackers can
leverage these issues throughout nearly every step of an attack
chain, including reconnaissance, command and control (C2),
and even data exfiltration. In this chapter, you’ll learn how to
write your own utilities by using Go and third-party packages
to perform some of these capabilities.
You’ll start by resolving hostnames and IP addresses to
reveal the many types of DNS records that can be enumerated.
Then you’ll use patterns illustrated in earlier chapters to build
a massively concurrent subdomain-guessing tool. Finally,
you’ll learn how to write your own DNS server and proxy, and
you’ll use DNS tunneling to establish a C2 channel out of a
restrictive network!
WRITING DNS CLIENTS
Before exploring programs that are more complex, let’s get
acquainted with some of the options available for client
operations. Go’s built-in net package offers great functionality
and supports most, if not all, record types. The upside to the
built-in package is its straightforward API. For example,
LookupAddr(addr string) returns a list of hostnames for a given IP
address. The downside of using Go’s built-in package is that
you can’t specify the destination server; instead, the package
will use the resolver configured on your operating system.
Another downside is that you can’t run deep inspection of the
results.
To get around this, you’ll use an amazing third-party
package called the Go DNS package written by Miek Gieben.
This is our preferred DNS package because it’s highly
modular, well written, and well tested. Use the following to
install this package:
$ go get github.com/miekg/dns
Once the package is installed, you’re ready to follow along
with the upcoming code examples. You’ll begin by performing
A record lookups in order to resolve IP addresses for
hostnames.
Retrieving A Records
Let’s start by performing a lookup for a fully qualified domain
name (FQDN), which specifies a host’s exact location in the
DNS hierarchy. Then we’ll attempt to resolve that FQDN to an
IP address, using a type of DNS record called an A record. We
use A records to point a domain name to an IP address. Listing
5-1 shows an example lookup. (All the code listings at the root
location of / exist under the provided github repo
https://github.com/blackhat-go/bhg/.)
package main
import (
"fmt"
"github.com/miekg/dns"
)
func main() {
❶ var msg dns.Msg
❷ fqdn := dns.Fqdn("stacktitan.com")
❸ msg.SetQuestion(fqdn, dns.TypeA)
❹ dns.Exchange(&msg, "8.8.8.8:53")
}
Listing 5-1: Retrieving an A record (/ch-5/get_a/main.go)
Start by creating a new Msg ❶ and then call fqdn(string) to
transform the domain into a FQDN that can be exchanged with
a DNS server ❷. Next, modify the internal state of the Msg
with a call to SetQuestion(string, uint16) by using the TypeA value to
denote your intent to look up an A record ❸. (This is a const
defined in the package. You can view the other supported
values in the package documentation.) Finally, place a call to
Exchange(*Msg, string) ❹ in order to send the message to the
provided server address, which is a DNS server operated by
Google in this case.
As you can probably tell, this code isn’t very useful.
Although you’re sending a query to a DNS server and asking
for the A record, you aren’t processing the answer; you aren’t
doing anything meaningful with the result. Prior to
programmatically doing that in Go, let’s first review what the
DNS answer looks like so that we can gain a deeper
understanding of the protocol and the different query types.
Before you execute the program in Listing 5-1, run a
packet analyzer, such as Wireshark or tcpdump, to view the
traffic. Here’s an example of how you might use tcpdump on a
Linux host:
$ sudo tcpdump -i eth0 -n udp port 53
In a separate terminal window, compile and execute your
program like this:
$ go run main.go
Once you execute your code, you should see a connection
to 8.8.8.8 over UDP 53 in the output from your packet capture.
You should also see details about the DNS protocol, as shown
here:
$ sudo tcpdump -i eth0 -n udp port 53
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on ens33, link-type EN10MB (Ethernet), capture size 262144 bytes
23:55:16.523741 IP 192.168.7.51.53307 > 8.8.8.8.53:❶ 25147+ A?❷
stacktitan.com. (32)
23:55:16.650905 IP 8.8.8.8.53 > 192.168.7.51.53307: 25147 1/0/0 A
104.131.56.170 (48) ❸
The packet capture output produces a couple of lines that
require further explanation. First, a query is being placed from
192.168.7.51 to 8.8.8.8 by using UDP 53 ❶ while requesting
a DNS A record ❷. The response ❸ is returned from
Google’s 8.8.8.8 DNS server, which contains the resolved IP
address, 104.131.56.170.
Using a packet analyzer such as tcpdump, you’re able to
resolve the domain name stacktitan.com to an IP address. Now
let’s take a look at how to extract that information by using
Go.
Processing Answers from a Msg struct
The returned values from Exchange(*Msg, string) are (*Msg, error).
Returning the error type makes sense and is common in Go
idioms, but why does it return *Msg if that’s what you passed
in? To clarify this, look at how the struct is defined in the
source:
type Msg struct {
MsgHdr
Compress bool `json:"-"` // If true, the message will be compressed...
❶ Question []Question // Holds the RR(s) of the question section.
❷ Answer []RR // Holds the RR(s) of the answer section.
Ns []RR // Holds the RR(s) of the authority section.
Extra []RR // Holds the RR(s) of the additional section.
}
As you can see, the Msg struct holds both questions and
answers. This lets you consolidate all your DNS questions and
their answers into a single, unified structure. The Msg type has
various methods that make working with the data easier. For
example, the Question slice ❶ is being modified with the
convenience method SetQuestion(). You could modify this slice
directly by using append() and achieve the same outcome. The
Answer slice ❷ holds the response to the queries and is of type
RR. Listing 5-2 demonstrates how to process the answers.
package main
import (
"fmt"
"github.com/miekg/dns"
)
func main() {
var msg dns.Msg
fqdn := dns.Fqdn("stacktitan.com")
msg.SetQuestion(fqdn, dns.TypeA)
❶ in, err := dns.Exchange(&msg, "8.8.8.8:53")
if err != nil {
panic(err)
}
❷ if len(in.Answer)  0 {
❺ cfqdn = cnames[0]
❻ continue // We have to process the next CNAME.
}
❼ ips, err := lookupA(cfqdn, serverAddr)
if err != nil {
break // There are no A records for this hostname.
}
❽ for _, ip := range ips {
results = append(results, result{IPAddress: ip, Hostname: fqdn})
}
❾ break // We have processed all the results.
}
return results
}
First, define a slice to store results ❶. Next, create a copy
of the FQDN passed in as the first argument ❷, not only so
you don’t lose the original FQDN that was guessed, but also
so you can use it on the first query attempt. After starting an
infinite loop, try to resolve the CNAMEs for the FQDN ❸. If
no errors occur and at least one CNAME is returned ❹, set
cfqdn to the CNAME returned ❺, using continue to return to the
beginning of the loop ❻. This process allows you to follow
the trail of CNAMES until a failure occurs. If there’s a failure,
which indicates that you’ve reached the end of the chain, you
can then look for A records ❼; but if there’s an error, which
indicates something went wrong with the record lookup, then
you leave the loop early. If there are valid A records, append
each of the IP addresses returned to your results slice ❽ and
break out of the loop ❾. Finally, return the results to the caller.
Our logic associated with the name resolution seems sound.
However, you haven’t accounted for performance. Let’s make
our example goroutine-friendly so you can add concurrency.
Passing to a Worker Function
You’ll create a pool of goroutines that pass work to a worker