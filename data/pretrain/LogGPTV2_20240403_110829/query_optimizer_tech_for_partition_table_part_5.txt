Figure11:(a)Executiontimes,(b)Optimizationtimes,(c)MemoryusageforTPC-HqueriesoverPS-Cwithpartitionsize128MB
Figure12:(a)Executiontimes,(b)Optimizationtimes,(c)MemoryusageaswevarythepartitionsizeforTPC-Hqueries5and8
like the Basic optimizer. The Advanced optimizer utilizes both
partitionpruningandpartition-wisejoinstofindbetter-performing
plans.Considertheproblemofpickingthebestpartitioningscheme
foragivenqueryworkload.Thebestqueryperformancecanbeob-
tainedeitherfrom(a)partitionpruning(PS-Pisbestforquery8in
Figure10),or(b)frompartition-awarejoinprocessing(PS-Jisbest
forquery5inFigure10),or(c)fromacombinationofbothdueto
someworkloadordataproperties. Inallcases,theAdvancedopti-
mizerenablesfindingtheplanwiththebestpossibleperformance.
8.3 ResultsfromConstrainedSchemes
AsdiscussedinSection1,externalconstraintsorobjectivesmay
limitthepartitioningschemethatcanbeused. Forinstance, data
arrivalratesmayrequirethecreationofdailyorweeklypartitions;
file-systempropertiesmayimposeamaximumpartitionsizetoen- Figure13:Executiontimesaswevarythetotaldatasize
surethateachpartitionislaidoutcontiguously;oroptimizerlimi-
tationsmayimposeamaximumnumberofpartitionspertable. partition size increases (and the number of partitions decreases),
ForaTPC-Hscalefactorof30,biweeklypartitionsofthefactta- the optimization time decreases for both optimizers. We observe
bleleadtoa128MBpartitionsize.Wewillimposeamaximumpar- that (i) the optimization times for the Advanced optimizer scale
titionsizeof128MBtocreatethepartitioningschemePS-Cusedin inasimilarwayasfortheBasicoptimizer, and(ii)theoverhead
thissection(seeTable3).Figure11showstheresultsfortheTPC- introducedbythecreationofthepartition-wisejoinsremainssmall
H queries executed over a database with the PS-C scheme. The (around12%)inallcases.
constraintimposedonthepartitioningschemedoesnotallowfor The overhead added by our approach remains low due to two
anyone-to-onepartition-wisejoins. Hence,theIntermediateopti- reasons. First, Clustering bounds the number of child joins for
mizerproducesthesameplansasBasic,andisexcludedfromthe R (cid:46)(cid:47) S to min(number of partitions in R,S); so we cause only a
figuresforclarity.Onceagain,theAdvancedoptimizerwasableto linear increase in paths enumerated per join. Second, optimizers
generateabetterplanthantheBasicoptimizerforallqueries,pro- haveotheroverheadslikeparsing,rewrites,scanpathenumeration,
vidingover2xspeedupfor50%ofthem.Theaverageoptimization catalogandstatisticsaccess,andcardinalityestimation.Letuscon-
timeandmemoryoverheadswerejust7.9%and3.6%respectively. siderQuery5fromFigure12(b). Query5joins5tables,including
ordersandlineitemwith72and336partitionsrespectively. Inthis
8.4 EffectofSizeandNumberofPartitions case, Basic enumerated 2317 scan and join paths in total, while
In this section, we evaluate the performance of the optimizers Advanced enumerated 2716 paths. The extra 17% paths are for
aswevarythesize(andthusthenumber)ofpartitionscreatedfor the 72 partition-wise joins created by Advanced. The trends are
eachtable,usingthePS-Cscheme. Aswevarythepartitionsize similarforthememoryconsumptionoftheoptimizersasseenin
from64MBto256MB,thenumberofpartitionsforthefacttable Figure12(c).
vary from 336 to 84. Figure 12(b) shows the optimization times Decreasing the partition size for the same total data size has a
taken by the two optimizers for TPC-H queries 5 and 8. As the positiveeffectonplanexecutiontimesasseeninFigure12:smaller
Figure 14: (a) Execution times, (b) Optimization times, (c) Memory usage as we vary the number of tables joined on the same
attributeforamodifiedTPC-Hschemaandqueries2and5
Figure15:(a)Executiontimes,(b)Optimizationtimes,(c)Memoryusageforenablinganddisablingclustering
partitionsizesforcefiner-grainedpartitionranges,leadingtobetter partitioningschemawherethetablespartandordersfromTPC-H
partitionpruningandjoinexecution.Lookingintoexecutiontimes arepartitionedverticallyintofourtableseach. Onceagain,weuse
atthesubplanlevel,weobservedthatPostgreSQLwasmoreeffec- thePS-Cschemewithapartitionsizeof128MB.
tiveinourexperimentalsettingswhenitaccessedpartitionsinthe WemodifiedTPC-Hqueries2and5tojoinalltheverticaltables
64MB range. It is worth noting that current partitioning scheme forpartandordersrespectively. Figure14(a)showstheexecution
recommenders[2,18,26]donotconsiderpartitionsizetuning. timesforthetwoquerieswithincreasingnumberofjoiningtables.
8.5 EffectofDataSize WeobservehowtheAdvancedoptimizerwasagainabletogenerate
plansthatareuptoanorderofmagnitudebettercomparedtothe
We used the PS-C scheme with a partition size of 128 MB to
plansselectedbytheBasicoptimizer.Itisinterestingtonotethatas
studytheeffectsoftheoveralldatasizeonqueryperformance.Fig-
thenumberofjoiningtablesinthequeryincreases,theexecution
ure13showsthequeryexecutiontimesastheamountofdatastored
times for the plans from the Advanced optimizer increase barely
inthedatabaseincreases. Formanyqueries,theplansselectedby
(due to efficient use of child joins); unlike the Basic optimizer’s
theBasicoptimizerleadtoaquadraticorexponentialincreasein
planswhoseexecutiontimesincreasedrastically.
execution time as data size increases linearly. We observed that
Figures14(b)and14(c)showtheoptimizationtimesandmem-
joinsforlargedatasizescausetheBasicoptimizertofrequentlyre-
oryconsumption,respectively,asthenumberof“same-key-joining”
sorttoindexnestedloopjoins(thesystemhas7.5GBRAMonly).
tables in the query increases. Both metrics increase non-linearly
On the other hand, the Advanced optimizer is able to generate
forbothoptimizers;buttheincreaseismoreprofoundfortheAd-
smaller partition-wise joins that use more efficient join methods
vanced optimizer. The increasing optimization overhead comes
(likehashandmergejoins); leadingtothedesiredlinearincrease
fromthenon-linearcomplexityofthepathselectionprocessused
in execution time as data size increases linearly. For the queries
bytheregularPostgreSQLqueryoptimizer(whichwebelievecan
wheretheBasicoptimizerisalsoabletoachievealineartrend,the
be fixed through engineering effort unrelated to our work). With
slope is much higher compared to the Advanced optimizer. Fig-
optimizationtimesstillinmilliseconds,theadditionaloverheadis
ure 13 shows that the benefits from our approach become more
certainlyjustifiedbythedrasticreductioninexecutiontimes.
important for larger databases. Note that optimization times and
memoryconsumptionareindependentofthedatasize. 8.7 EffectoftheClusteringAlgorithm
8.6 StressTestingonaSyntheticBenchmark Clustering(Section5)isanessentialphaseinouroverallpartition-
Thereexistpracticalscenarioswheremultipletablesmaysharea awareoptimizationapproachthatismissingfromthedatalocaliza-
commonjoiningkey.InWebanalytics,forexample,customerdata tion approach discussed in Section 2. When matching is applied
may reside in multiple tables—storing information such as page without clustering, our optimizer implements a rough equivalent
clicks, favorites, preferences, etc.—that have to be joined on the ofthefour-phaseapproachtodistributedqueryoptimization[16].
customerkey. However,intraditionalstarandsnowflakeschemas, Figures15(b)and15(c)comparetheoptimizationtimeandmem-
thefacttablesjoinwiththedimensiontablesondifferentattributes; oryconsumptionoftheoptimizerwhenclusteringisenabledand
soitishardtocreaten-waychildjoinsforn≥3.NoTPC-Hquery disabledinadatabasewiththePS-Cscheme. Disablingclustering
plan, regardless of the partitioning schema, contains n-way child causeshighoverhead—asseeninbothfigures—sincetheoptimizer
joins for n ≥ 4. To evaluate our approach in non-star schemas, mustnowgeneratejoinpathsforeachchildjoinproducedbythe
aswellastostress-testourapproach,wecameupwithasynthetic matchingphase. Thisissueshowswhyclusteringisessentialfor
11. REFERENCES
[1] A.Abouzeid,K.Bajda-Pawlikowski,D.Abadi,A.Rasin,and
A.Silberschatz.HadoopDB:AnArchitecturalHybridofMapReduce
andDBMSTechnologiesforAnalyticalWorkloads.InVLDB,2009.
[2] S.Agrawal,V.Narasayya,andB.Yang.IntegratingVerticaland
HorizontalPartitioningintoAutomatedPhysicalDatabaseDesign.In
ACMSIGMOD,2004.
[3] AsternCluster.www.asterdata.com/product/ncluster_cloud.php.
[4] C.Baldwin,T.Eliassi-Rad,G.Abdulla,andT.Critchlow.The
EvolutionofaHierarchicalPartitioningAlgorithmforLarge-Scale
ScientificData:ThreeStepsofIncreasingComplexity.SSDB,2003.
[5] F.Bancilhon,D.Maier,Y.Sagiv,andJ.D.Ullman.MagicSetsand
OtherStrangeWaystoImplementLogicPrograms.InProc.ofthe
5thACMSymp.onPrinciplesofDatabaseSystems,1986.
Figure16:Estimated(andactual)numberofrecordsofTPC-H [6] C.K.Baru,G.Fecteau,A.Goyal,H.Hsiao,A.Jhingran,
queriesoverPS-C S.Padmanabhan,G.P.Copeland,andW.G.Wilson.DB2Parallel
Edition.IBMSystemsJournal,34(2),1995.
ouroptimizertoperformwellinthepresenceofhundredsofparti- [7] P.Bizarro,S.Babu,D.J.DeWitt,andJ.Widom.Content-based
tionspertable(e.g.,dailypartitionsforayear). Routing:DifferentPlansforDifferentData.InVLDB,2005.
[8] S.CeriandG.Gottlob.OptimizingJoinsBetweentwoPartitioned
Figure15(a)showstheexecutiontimesfortheplansgenerated
RelationsinDistributedDatabases.JournalofParalleland
whenenablinganddisablingclustering.Inallcasesshown,theplan
DistributedComputing,3,1986.
generatedwithoutclusteringisworsethantheplangeneratedwhen
[9] T.H.Cormen,C.E.Leiserson,R.L.Rivest,andC.Stein.
clustering is used, since the generated plans scan the same parti- IntroductiontoAlgorithms.TheMITPressandMcGraw-Hill
tions multiple times (in different joins). The queries that are not OsborneMedia,2ndedition,2003.
shownfailedtocompletebecausethesystemrunsoutofmemory [10] A.Deshpande,C.Guestrin,W.Hong,andS.Madden.Exploiting
duringplanexecution. Notethatwithmultidimensionalpartition- CorrelatedAttributesinAcquisitionalQueryProcessing.InICDE,
2005.
ing and without clustering, literally thousands of child join paths
[11] E.Friedman,P.Pawlowski,andJ.Cieslewicz.SQL/MapReduce:A
arecreated,eachrequiringasmallamountofmemoryduringtheir
PracticalApproachtoSelf-Describing,Polymorphic,and
initializationphase. Weconcludethattheuseofclusteringiscru-
ParallelizableUser-DefinedFunctions.InVLDB,2009.
cialforfindinggoodexecutionplans. [12] L.GiakoumakisandC.Galindo-Legaria.TestingSQLServer’s
8.8 ImpactonCardinalityEstimation QueryOptimizer:Challenges,TechniquesandExperiences.InIEEE
DataEngineeringBulletin.IEEEComputerSociety,2008.
Anadditionalbenefitthatchildjoinsbringisbettercardinality [13] IBMDB2.Partitionedtables,2007.
estimationforcostingduringpathcreation. Cardinalityestimation http://publib.boulder.ibm.com/infocenter/db2luw/v9r7/topic/com.
for filter and join conditions is based on data-level statistics kept ibm.db2.luw.admin.partition.doc/doc/c0021560.html.
bythedatabasesystemforeachtable(e.g.,distributionhistograms, [14] A.Y.Levy,I.S.Mumick,andY.Sagiv.QueryOptimizationby
PredicateMove-Around.InVLDB,1994.
minimum and maximum values, number of distinct values). For
[15] T.Morales.Oracle(R)DatabaseVLDBandPartitioningGuide11g
partitioned tables, databases like Oracle and PostgreSQL collect
Release1(11.1).OracleCorporation,2007.http://download-uk.
statisticsforeachindividualpartition. Whentheoptimizerconsid-
oracle.com/docs/cd/B28359_01/server.111/b32024/toc.htm.
ersjoiningunionsofpartitions,thecardinalityestimatesneededare [16] T.M.OzsuandP.Valduriez.PrinciplesofDistributedDatabase
derivedbyaggregatingstatisticsoverpartitions. Systems.PrenticeHall,1999.
Figure16showstheestimatedandactualnumberofrecordsof [17] N.Polyzotis.Selectivity-basedPartitioning:ADivide-and-union
TPC-HqueriesoverthePS-Cscheme.FortheBasicOptimizer,we ParadigmforEffectiveQueryOptimization.InCIKM,2005.
observe large cardinality errors. In contrast, partition-wise joins [18] J.Rao,C.Zhang,N.Megiddo,andG.M.Lohman.Automating
PhysicalDatabaseDesigninaParallelDatabase.InSIGMOD,2002.
provide much more accurate cardinality estimation because these
[19] P.G.Selinger,M.M.Astrahan,D.D.Chamberlin,R.A.Lorie,and
joinsincreasethechancesofusingpartition-levelstatisticsdirectly
T.G.Price.AccessPathSelectioninaRelationalDatabase
forcosting.Thesamepatternwasobservedwithallthepartitioning
ManagementSystem.InACMSIGMOD,1979.
schemesandqueriesused. [20] Sybase,Inc.PerformanceandTuning:OptimizerandAbstractPlans,
9. SUMMARY 2003.http://infocenter.sybase.com/help/topic/com.sybase.dc20023\
_1251/pdf/optimizer.pdf.
Queryoptimizationtechnologyhasnotkeptpacewiththegrow-
[21] R.Talmage.PartitionedTableandIndexStrategiesUsingSQL
ingusageandusercontroloftablepartitioning. Weaddressedthis
Server2008.Microsoft,2009.
gapbydevelopingnovelpartition-awareoptimizationtechniquesto http://msdn.microsoft.com/en-us/library/dd578580.aspx.
generateefficientplansforSQLqueriesoverpartitionedtables.We [22] Teradata.http://www.teradata.com.
extendedthesearchspacetoincludeplanswithmultiwaypartition- [23] TPC.TPCBenchmarkHStandardSpecification,2009.
wise joins, and provided techniques to find the optimal plan effi- http://www.tpc.org/tpch/spec/tpch2.9.0.pdf.
ciently. Our techniques are designed for easy incorporation into [24] B.ZellerandA.Kemper.ExperienceReport:ExploitingAdvanced
DatabaseOptimizationFeaturesforLarge-ScaleSAPR/3
bottom-upqueryoptimizers.Anextensiveexperimentalevaluation
Installations.InVLDB,2002.
showed that our optimizer, with low optimization-time overhead,
[25] J.Zhou,P.-Å.Larson,andR.Chaiken.IncorporatingPartitioningand
cangenerateplansthatareanorderofmagnitudebetterthanplans
ParallelPlansintotheSCOPEOptimizer.InICDE,2010.
generatedbycurrentoptimizers.
[26] D.Zilio,A.Jhingran,andS.Padmanabhan.PartitioningKey
SelectionforaShared-NothingParallelDatabaseSystem.IBM
10. ACKNOWLEDGMENTS
ResearchReportRC19820,1994.
WethankJohnCieslewiczandEricFriedmanofAsterDatafor [27] C.Zuzarte,othersPartitioninginDB2UsingtheUNIONALLView.
introducingustotheproblemandformanyvaluablediscussions. IBMdeveloperWorks,2002.http://www.ibm.com/developerworks/
We thank the anonymous reviewers and shepherd for helping us data/library/techarticle/0202zuzarte/0202zuzarte.pdf.
improvethepaperinmanyways.
|---|----------------------------------------------------------------------------|
| 0 | Efﬁcient pruning of unneeded data during query processing                  |
| 1 | Parallel data access (partitioned parallelism) during query processing     |
| 2 | Reducing data contention during query processing and administrative
tasks. Faster data loading, archival, and backup                                                                            |
| 3 | Efﬁcient statistics maintenance in response to insert, delete, and update
rates. Better cardinality estimation for subplans that access few partitions                                                                            |
| 4 | Prioritized data storage on faster/slower disks based on access patterns   |
| 5 | Fine-grained control over physical design for database tuning              |
| 6 | Efﬁcient and online table and index defragmentation at the partition level |