scripting attacks [54, 56, 61]. Some researchers have also
combined dynamic taint analysis with static analysis to ﬁnd
bugs in Web applications [5, 62]. Sekar [56], introduced taint
inference, a technique that applies syntax and taint-aware
policies to block injection attacks.
Taint Performance & Frameworks. The ever-growing need
for more efﬁcient dynamic taint analyses was initially met
by binary instrumentation frameworks [21, 52]. Due to the
high overhead of binary instrumentation techniques, more
efﬁcient compiler-based [42, 64] and hardware-based [25,
26, 59, 60] approaches were later proposed. Recent results
show that a dynamic software-based approach, augmented
by static analysis introduce minimal overhead, and thus can
be practical [20].
Extensions to Taint Analysis. Our rules assume data is
either tainted or not. For example, Newsome et al. have
proposed a generalization of taint analysis that quantiﬁes the
inﬂuence that an input has on a particular program statement
based on channel capacity [49].
VI. CONCLUSION
Dynamic program analyses have become increasingly
popular in security. The two most common — dynamic
taint analysis and forward symbolic execution — are used
in a variety of application domains. However, despite their
widespread usage, there has been little effort to formally
deﬁne these analyses and summarize the critical issues that
arise when implementing them in a security context.
In this paper, we introduced a language for demonstrating
the critical aspects of dynamic taint analysis and forward
symbolic execution. We deﬁned the operational semantics
for our language, and leveraged these semantics to formally
deﬁne dynamic taint analysis and forward symbolic exe-
cution. We used our formalisms to highlight challenges,
techniques and tradeoffs when using these techniques in a
security setting.
VII. ACKNOWLEDGEMENTS
We would like to thank Dawn Song and the BitBlaze team
for their useful ideas and advice on dynamic taint analysis
and forward symbolic execution. We would also like to thank
our shepherd Andrei Sabelfeld, JongHyup Lee, Ivan Jager,
and our anonymous reviewers for their useful comments and
suggestions. This work is supported in part by CyLab at
Carnegie Mellon under grant DAAD19-02-1-0389 from the
Army Research Ofﬁce. The views expressed herein are those
of the authors and do not necessarily represent the views of
our sponsors.
REFERENCES
[1] Binary analysis platform (BAP). http://bap.ece.cmu.edu.
[2] BitBlaze binary analysis project. http://bitblaze.cs.berkeley.
edu, 2007.
[3] Andrew Appel. Modern Compiler Implementation in ML.
Cambridge University Press, 1998.
[4] Gogul Balakrishnan. WYSINWYX: What You See Is Not What
You eXecute. PhD thesis, Computer Science Department,
University of Wisconsin at Madison, August 2007.
[5] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic, E. Kirda,
C. Kruegel, and G. Vigna. Saner: Composing static and
dynamic analysis to validate sanitization in web applications.
In Proceedings of
the IEEE Symposium on Security and
Privacy, 2008.
[6] Clark Barrett and Sergey Berezin. CVC Lite: A new imple-
mentation of the cooperating validity checker. In Proceedings
of the Conference on Computer Aided Veriﬁcation, 2004.
[7] Ulrich Bayer, Paolo Milani Comparetti, Clemens Hlauschek,
Christopher Kruegel, and Engin Kirda. Scalable, behavior-
In Proceedings of the Network
based malware clustering.
and Distributed System Security Symposium, 2009.
[8] Ulrich Bayer, Andreas Moser, Christopher Kruegel, and Engin
Journal in
Kirda. Dynamic analysis of malicious code.
Computer Virology, 2(1):66–77, 2006.
[9] P. Boonstoppel, C. Cadar, and D. Engler. RWset: Attack-
ing path explosion in constraint-based test generation.
In
Proceedings of the International Conference on Tools and
Algorithms for Construction and Analysis of Systems, 2008.
[10] David Brumley, Juan Caballero, Zhenkai Liang, James New-
some, and Dawn Song. Towards automatic discovery of
deviations in binary implementations with applications to
In Proceedings
error detection and ﬁngerprint generation.
of the USENIX Security Symposium, August 2007.
[11] David Brumley, Cody Hartwig, Min Gyung Kang, Zhenkai
Liang, James Newsome, Pongsin Poosankam, and Dawn
Song. Bitscope: Automatically dissecting malicious binaries.
Technical Report CS-07-133, School of Computer Science,
Carnegie Mellon University, March 2007.
[12] David Brumley, Cody Hartwig, Zhenkai Liang, James New-
some, Pongsin Poosankam, Dawn Song, and Heng Yin.
Automatically identifying trigger-based behavior in malware.
In Botnet Detection, volume 36 of Countering the Largest
Security Threat Series: Advances in Information Security.
Springer-Verlag, 2008.
[13] David Brumley, James Newsome, Dawn Song, Hao Wang,
Towards automatic generation of
In Proceedings of the IEEE
and Somesh Jha.
vulnerability-based signatures.
Symposium on Security and Privacy, pages 2–16, 2006.
[14] David Brumley, James Newsome, Dawn Song, Hao Wang,
and Somesh Jha. Theory and techniques for automatic gener-
ation of vulnerability-based signatures. IEEE Transactions on
Dependable and Secure Computing, 5(4):224–241, October
2008.
[15] David Brumley, Hao Wang, Somesh Jha, and Dawn
Song. Creating vulnerability signatures using weakest pre-
In Proceedings of the IEEE Computer Security
conditions.
Foundations Symposium, 2007.
[16] Juan Caballero, Heng Yin, Zhenkai Liang, and Dawn Song.
Polyglot: Automatic extraction of protocol message format
using dynamic binary analysis. In Proceedings of the ACM
Conference on Computer and Communications Security, Oc-
tober 2007.
[17] Cristian Cadar, Daniel Dunbar, and Dawson Engler. Klee:
Unassisted and automatic generation of high-coverage tests
the
for complex systems programs.
USENIX Symposium on Operating System Design and Im-
plementation, 2008.
In Proceedings of
[18] Cristian Cadar and Dawson Engler. Execution generated test
cases: How to make systems code crash itself. In Proceedings
of the International SPIN Workshop on Model Checking of
Software, 2005.
[19] Cristian Cadar, Vijay Ganesh, Peter Pawlowski, David Dill,
EXE: A system for automatically
and Dawson Engler.
generating inputs of death using symbolic execution.
In
Proceedings of the ACM Conference on Computer and Com-
munications Security, October 2006.
[20] Walter Chang and Calvin Lin.
Efﬁcient and extensible
security enforcement using dynamic data ﬂow analysis.
In
Proceedings of the ACM Conference on Computer and Com-
munications Security, pages 39–50, 2008.
[21] James Clause, Wanchun Li, and Alessandro Orso. Dytan: a
In International
generic dynamic taint analysis framework.
Symposium on Software Testing and Analysis, 2007.
[22] Manuel Costa, Miguel Castro, Lidong Zhou, Lintao Zhang,
and Marcus Peinado. Bouncer: Securing software by blocking
the ACM Symposium on
bad input.
Operating System Principles, October 2007.
In Proceedings of
[23] Manuel Costa, Jon Crowcroft, Miguel Castro, Antony Row-
stron, Lidong Zhou, Lintao Zhang, and Paul Barham. Vigi-
lante: End-to-end containment of internet worms. In Proceed-
ings of the ACM Symposium on Operating System Principles,
2005.
[24] Jedidiah Crandall, Zhendong Su, S. Felix Wu, and Frederic
Chong. On deriving unknown vulnerabilities from zero-day
polymorphic and metamorphic worm exploits. In Proceedings
of the ACM Conference on Computer and Communications
Security, 2005.
[25] Jedidiah R. Crandall and Fred Chong. Minos: Architectural
support for software security through control data integrity.
In Proceedings of the International Symposium on Microar-
chitecture, December 2004.
[26] Michael Dalton, Hari Kannan, and Christos Kozyrakis. Rak-
sha: a ﬂexible information ﬂow architecture for software
security. In Proceedings of the 34th International Symposium
on Computer Architecture, 2007.
[27] E.W. Dijkstra. A Discipline of Programming. Prentice Hall,
Englewood Cliffs, NJ, 1976.
[28] Manuel Egele, Christopher Kruegel, Engin Kirda, Heng Yin,
and Dawn Song. Dynamic spyware analysis. In Proceedings
of the USENIX Annual Technical Conference, June 2007.
[29] Michael Emmi, Rupak Majumdar, and Koushik Sen. Dynamic
In Interna-
test input generation for database applications.
tional Symposium on Software Testing and Analysis, 2007.
[30] Jeanne Ferrante, Karl J. Ottenstein, and Joe D. Warren. The
program dependence graph and its use in optimization. ACM
Transactions on Programming Languages and Systems, 1987.
[31] C. Flanagan and J.B. Saxe. Avoiding exponential explosion:
Generating compact veriﬁcation conditions. In Proceedings
of the Symposium on Principles of Programming Languages,
2001.
[32] Jeffrey Foster, Manuel Fahndrich, and Alexander Aiken. A
theory of type qualiﬁers. In Proceedings of the ACM Confer-
ence on Programming Language Design and Implementation,
1999.
[33] Vijay Ganesh and David L. Dill. A decision procedure for
bit-vectors and arrays. In Proceedings on the Conference on
Computer Aided Veriﬁcation, 2007.
[34] Patrice Godefroid. Compositional dynamic test generation. In
Proceedings of the Symposium on Principles of Programming
Languages, 2007.
[35] Patrice Godefroid, Adam Kiezun, and Michael Levin.
In Proceedings of the
Grammar-based whitebox fuzzing.
ACM Conference on Programming Language Design and
Implementation, 2008.
[36] Patrice Godefroid, Nils Klarlund, and Koushik Sen. DART:
In Proceedings of the
Directed automated random testing.
ACM Conference on Programming Language Design and
Implementation, 2005.
[37] Patrice Godefroid, Michael Levin, and David Molnar. Auto-
mated whitebox fuzz testing. In Proceedings of the Network
and Distributed System Security Symposium, February 2008.
[38] Patrice Godefroid, Michael Levin, and David A. Molnar.
the ACM
Active property checking.
international conference on Embedded software, 2008.
In Proceedings of
[39] Vivek Haldar, Deepak Chandra, and Michael Franz. Dynamic
In Proceedings of the Annual
taint propagation for java.
Computer Security Applications Conference, pages 303–311,
2005.
[40] William G. J. Halfond, Ro Orso, and Panagiotis Manolios.
Using positive tainting and syntax-aware evaluation to counter
SQL injection attacks. In Proceedings of the ACM SIGSOFT
Symposium on Foundations of Software Engineering. ACM
Press, 2006.
[41] Ivan Jager and David Brumley. Efﬁcient directionless weak-
est preconditions. Technical Report CMU-CyLab-10-002,
Carnegie Mellon University CyLab, February 2010.
[42] Lap Chung Lam and Tzi-cker Chiueh. A general dynamic in-
formation ﬂow tracking framework for security applications.
In Proceedings of the Annual Computer Security Applications
Conference, 2006.
[43] K. Rustan M. Leino. Efﬁcient weakest preconditions. Infor-
mation Processing Letters, 93(6):281–288, 2005.
[44] Zhenkai Liang and R. Sekar. Fast and automated generation of
attack signatures: A basis for building self-protecting servers.
In Proceedings of the ACM Conference on Computer and
Communications Security, 2005.
[45] Andreas Moser, Christopher Kruegel, and Engin Kirda. Ex-
In
ploring multiple execution paths for malware analysis.
Proceedings of the USENIX Security Symposium, 2007.
[46] George C. Necula, Scott McPeak, and Westley Weimer.
CCured: type-safe retroﬁtting of legacy code. In Proceedings
of the Symposium on Principles of Programming Languages,
2002.
[47] James Newsome, David Brumley, Dawn Song, Jad Cham-
cham, and Xeno Kovah. Vulnerability-speciﬁc execution
ﬁltering for exploit prevention on commodity software.
In
Proceedings of the Network and Distributed System Security
Symposium, 2006.
[48] James Newsome, Brad Karp, and Dawn Song. Polygraph:
Automatically generating signatures for polymorphic worms.
In Proceedings of
the IEEE Symposium on Security and
Privacy, May 2005.
[49] James Newsome, Stephen McCamant, and Dawn Song. Mea-
suring channel capacity to distinguish undue inﬂuence.
In
Proceedings of the ACM Workshop on Programming Lan-
guages and Analysis for Security, 2009.
[50] James Newsome and Dawn Song. Dynamic taint analysis
for automatic detection, analysis, and signature generation
In Proceedings of
of exploits on commodity software.
the Network and Distributed System Security Symposium,
February 2005.
[51] Anh Nguyen-tuong, Salvatore Guarnieri, Doug Greene, Jeff
Shirley, and David Evans. Automatically hardening web
In Proceedings of IFIP
applications using precise tainting.
International Information Security Conference, 2005.
[52] Feng Qin, Cheng Wang, Zhenmin Li, Ho-Seop Kim,
Yuanyuan Zhou, and Youfeng Wu. Lift: A low-overhead
practical information ﬂow tracking system for detecting se-
curity attacks. In Proceedings of the 39th Annual IEEE/ACM
Symposium on Microarchitecture, 2006.
[53] Andrei Sabelfeld and Andrew C. Myers. Language-based
IEEE Journal on Selected Areas
information-ﬂow security.
in Communications, 21:2003, 2003.
[54] Prateek Saxena, Steve Hanna, Pongsin Poosankam, and Dawn
Song. FLAX: systematic discovery of client-side validation
vulnerabilities in rich web applications. Proceedings of the
Network and Distributed System Security Symposium, 2010.
[55] Fred B. Schneider. Enforceable security policies. ACM
Transactions on Information and System Security, 3(1):30–
50, February 2000.
[56] R. Sekar. An efﬁcient black-box technique for defeating
web application attacks. In Proceedings of the Network and
Distributed System Security Symposium, 2009.
[57] K. Sen, D. Marinov, and G. Agha. CUTE: A concolic unit
testing engine for C. In Proceedings of the joint meeting of
the European Software Engineering Conference and the ACM
Symposium on the Foundations of Software Engineering,
2005.
[58] Monirul Sharif, Andrea Lanzi, Jonathon Gifﬁn, and Wenke
Lee. Automatic reverse engineering of malware emulators. In
Proceedings of the IEEE Symposium on Security and Privacy,
2009.
[59] G. Edward Suh, Jaewook Lee, and Srinivas Devadas. Secure
program execution via dynamic information ﬂow tracking. In
Proceedings of the International Conference on Architectural
Support for Programming Languages and Operating Systems,
2004.
[60] Shobha Venkataraman, Avrim Blum, and Dawn Song. Limits
of learning-based signature generation with adversaries.
In
Proceedings of the Network and Distributed System Security
Symposium, February 2008.
[61] Philipp Vogt, Florian Nentwich, Nenad Jovanovic, Engin
Kirda, Christopher Kruegel, and Giovanni Vigna. Cross-site
scripting prevention with dynamic data tainting and static
In Proceedings of the Network and Distributed
analysis.
System Security Symposium, 2007.
[62] Yao wen Huang, Fang Yu, Christian Hang, Chung hung Tsai,
D. T. Lee, and Sy yen Kuo. Securing web application code
by static analysis and runtime protection. In Proceedings of
the 13th conference on World Wide Web, 2004.
[63] Gilbert Wondracek, Paolo Milani Comparetti, Christopher
Kruegel, and Engin Kirda. Automatic network protocol
In Proceedings of the Network and Distributed
analysis.
System Security Symposium, 2008.
[64] Wei Xu, Eep Bhatkar, and R. Sekar. Taint-enhanced policy
enforcement: A practical approach to defeat a wide range of
attacks. In Proceedings of the USENIX Security Symposium,
2006.
[65] Heng Yin, Dawn Song, Manuel Egele, Christopher Kruegel,
and Engin Kirda. Panorama: Capturing system-wide informa-
tion ﬂow for malware detection and analysis. In Proceedings
of the ACM Conference on Computer and Communications
Security, October 2007.