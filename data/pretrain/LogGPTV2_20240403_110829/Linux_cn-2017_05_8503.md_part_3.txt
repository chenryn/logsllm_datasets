它们节省了您在描述工单和合并请求的时间，并标准化了需要持续跟踪的重要信息。它确保了你需要的一切都在你的掌控之中。
你可以创建许多模版，用于不同的用途。例如，你可以有一个提供功能建议的工单模版，或者一个 bug 汇报的工单模版。在 [GitLab CE project](https://gitlab.com/gitlab-org/gitlab-ce/issues/new) 中寻找真实的例子吧！
![issues and MR templates - dropdown menu screenshot](/data/attachment/album/201705/13/140919st1wi11b6t6ei1i6.png)
#### 里程碑
[里程碑](https://about.gitlab.com/2016/08/05/feature-highlight-set-dates-for-issues/#milestones) 是 GitLab 中基于共同的目标、详细的日期追踪你队伍工作的最好工具。
不同情况下的目的是不同的，但是大致是相同的：你有为了达到特定的目标的工单的集合以及正在编码的合并请求。
这个目标基本上可以是任何东西——用来结合团队的工作，在一个截止日期前完成一些事情。例如，发布一个新的版本，启动一个新的产品，在某个日期前完成，或者按季度收尾一些项目。
![milestone dashboard](/data/attachment/album/201705/13/140919hzssbzusscfkufss.png)
### 专业技巧
#### 工单和 MR
* 在工单和 MR 的描述中:
	+ 输入 `#` 来触发一个已有工单的下拉列表
	+ 输入 `!` 来触发一个已有 MR 的下拉列表
	+ 输入 `/` 来触发[斜线命令](https://docs.gitlab.com/ce/user/project/slash_commands.html)
	+ 输入 `:` 来出发 emoji 表情 (也支持行中评论)
* 通过按钮“附加文件”来添加图片（jpg、png、gif) 和视频到行内评论
* 通过 [GitLab Webhooks](https://docs.gitlab.com/ce/web_hooks/web_hooks.html) [自动应用标签](https://about.gitlab.com/2016/08/19/applying-gitlab-labels-automatically/)
* [构成引用](https://about.gitlab.com/2016/07/22/gitlab-8-10-released/#blockquote-fence-syntax): 使用语法 `>>>` 来开始或者结束一个引用
```
>>>
Quoted text
Another paragraph
>>>
```
* 创建[任务列表](https://docs.gitlab.com/ee/user/markdown.html#task-lists)：
```
- [ ] Task 1
- [ ] Task 2
- [ ] Task 3
```
##### 订阅
你是否发现你有一个工单或者 MR 想要追踪？展开你的右边的导航，点击[订阅](https://about.gitlab.com/2016/03/22/gitlab-8-6-released/#subscribe-to-a-label)，你就可以在随时收到一个评论的提醒。要是你想要一次订阅多个工单和 MR？使用[批量订阅](https://about.gitlab.com/2016/07/22/gitlab-8-10-released/#bulk-subscribe-to-issues)。
##### 添加代办
除了一直留意工单和 MR，如果你想要对它预先做点什么，或者不管什么时候你想要在 GitLab 代办列表中添加点什么，点击你右边的导航，并且[点击**添加代办**](https://about.gitlab.com/2016/06/22/gitlab-8-9-released/#manually-add-todos)。
##### 寻找你的工单和 MR
当你寻找一个在很久以前由你开启的工单或 MR——它们可能数以十计、百计、甚至千计——所以你很难找到它们。打开你左边的导航，并且点击**工单**或者**合并请求**，你就会看到那些分配给你的。同时，在那里或者任何工单追踪器里，你可以通过作者、分配者、里程碑、标签以及重要性来过滤工单，也可以通过搜索所有不同状态的工单，例如开启的、合并的，关闭的等等。
#### 移动工单
一个工单在一个错误的项目中结束了？不用担心，点击**Edit**，然后[移动工单](https://about.gitlab.com/2016/03/22/gitlab-8-6-released/#move-issues-to-other-projects)到正确的项目。
#### 代码片段
你经常在不同的项目以及文件中使用一些相同的代码段和模版吗？创建一个代码段并且使它在你需要的时候可用。打开左边导航栏，点击**[Snipptes](https://gitlab.com/dashboard/snippets)**。所有你的片段都会在那里。你可以把它们设置成公开的，内部的（仅为 GitLab 注册用户提供），或者私有的。
![Snippets - screenshot](/data/attachment/album/201705/13/140920b4gt4dvh6vd6v1g1.png)
### GitLab 工作流用户案例概要
作为总结，让我们把所有东西聚在一起理顺一下。不必担心，这十分简单。
让我们假设：你工作于一个专注于软件开发的公司。你创建了一个新的工单，这个工单是为了开发一个新功能，实施于你的一个应用中。
**标签策略**
为了这个应用，你已经创建了几个标签，“讨论”、“后端”、“前端”、“正在进行”、“展示”、“就绪”、“文档”、“营销”以及“产品”。所有都已经在工单看板有它们自己的列表。你的当前的工单已经有了标签“讨论”。
在工单追踪器中的讨论达成一致之后，你的后端团队开始在工单上工作，所以他们把这个工单的标签从“讨论”移动到“后端”。第一个开发者开始写代码，并且把这个工单分配给自己，增加标签“正在进行”。
**编码 & 提交**
在他的第一次提交的信息中，他提及了他的工单编号。在工作后，他把他的提交推送到一个功能分支，并且创建一个新的合并请求，在 MR 描述中，包含工单关闭模式。他的团队复审了他的代码并且保证所有的测试和建立都已经通过。
**使用工单看板**
一旦后端团队完成了他们的工作，他们就删除“正在进行”标签，并且把工单从“后端”移动到“前端”看板。所以，前端团队接到通知，这个工单已经为他们准备好了。
**发布到演示**
当一个前端开发者开始在该工单上工作，他（她）增加一个标签“正在进行”，并且把这个工单重新分配给自己。当工作完成，该实现将会被发布到一个**演示**环境。标签“正在进行”就会被删除，然后在工单看板里，工单卡被移动到“演示”列表中。
**团队合作**
最后，当新功能成功实现，你的团队把它移动到“就绪”列表。
然后，就是你的技术文档编写团队的时间了，他们为新功能书写文档。一旦某个人完成书写，他添加标签“文档”。同时，你的市场团队开始启动并推荐该功能，所以某个人添加“市场”。当技术文档书写完毕，书写者删除标签“文档”。一旦市场团队完成他们的工作，他们将工单从“市场”移动到“生产”。
**部署到生产环境**
最后，你将会成为那个为新版本负责的人，合并“合并请求”并且将新功能部署到**生产**环境，然后工单的状态转变为**关闭**。
**反馈**
通过[周期分析](https://about.gitlab.com/solutions/cycle-analytics/)，你和你的团队节省了如何从点子到产品的时间，并且开启另一个工单，来讨论如何将这个过程进一步提升。
### 总结
GitLab 工作流通过一个单一平台帮助你的团队加速从点子到生产的改变：
* 它是**有效的**：因为你可以获取你想要的结果
* 它是**高效的**：因为你可以用最小的努力和成本达到最大的生产力
* 它是**高产的**：因为你可以非常有效的计划和行动
* 它是**简单的**：因为你不需要安装不同的工具去完成你的目的，仅仅需要 GitLab
* 它是**快速的**：因为你不需要在多个平台间跳转来完成你的工作
每一个月的 22 号都会有一个新的 GitLab 版本释出，让它在集成软件开发解决方案上变得越来越好，让团队可以在一个单一的、唯一的界面下一起工作。
在 GitLab，每个人都可以奉献！多亏了我们强大的社区，我们获得了我们想要的。并且多亏了他们，我们才能一直为你提供更好的产品。
还有什么问题和反馈吗？请留言，或者在推特上@我们[@GitLab](https://twitter.com/gitlab)!
---
via: 
作者：[Marcia Ramos](https://twitter.com/XMDRamos) 译者：[svtter](https://github.com/svtter) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出