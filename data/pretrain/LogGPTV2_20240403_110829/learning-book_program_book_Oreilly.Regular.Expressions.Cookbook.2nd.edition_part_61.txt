 Query
(?\?[a-z0-9\- -_~%!$&′()*+,;==@/?]*)？
Fragnent
(?\#[a-z0-9\- ._"%!$&′()*+,;=:é/?]*)?
Z
Regex options: Free-spacing, case insensitive
Regexflavers: .NET, Perl 5.10, Ruby 1.9
\A
(# Scheme
(?[a-z][a-z0-9+\- ]*):
(# Authority & path
448 | Chapter 8: URLs, Paths, and Intemet Addresses
---
## Page 465
//
(?[a-z0-9\- ._"%!$&′()*+,;=]+@)?
# User
(?[a-z0-9\-._]+
# Named host
\[[a-f0-9:-]+\]
# IPvFuture host
# IPv6 host
\[v[a-f0-9][a-20-9\- -_%!$&’()*+,;=: ]+\])
(?:[0-9]+)?
# Port
(?(/[a-z0-9\- -_%!$&’()*+,μ=:é]+)*/?)
# Path
# Path without authority
(?/?[a-z0-9\- -_~%!$&’()*+,;==é]+
(/[a-20-9-._%!$&′()*+,;==é]+)*/?)？
[# Relative URL (no scheme or authority)
(?
# Relative path
[a-20-9)-._%!$&′()*+,;=@]+(/[a-z0-9-._%!$&’()*+,;=:é]+)*/?
[# Absolute path
(/[a-20-9\-._%!ss’()*+,;=:@]+)+/?
）
1
Quexy
(?\?[a-z0-9\--_~%!$&′()*+,;==@/?]*)？
(?\#[a-z0-9\-._%!$&′()*+,;==é/?]*)?
# Fragnent
Z
Regex options: Free-spacing, case insensitive
Regexflavers: .NET, Java 7, PCRE 7, Perl 5.10, Ruby 1.9
(# Scheme
(?P[a-z][a-z0-9+\- ]*) :
(# Authority & path
//
(?P[a-z0-9\--_~%!$&’()*+,;=]+@)?
# User
(?P[a-z0-9\--_~%]+
# Named host
\[[a-f0-9:-]+]
# IPv6 host
\[v[a-f0-9][a-20-9\- -_%!$&’()*+,;=: ]+\])
# IPvFuture host
(+[6-0]:d)
# Poxt
[ Path without authority
(?P(/[a-z0-9\-._%!$&′()*+,;=:@]+)*/？)
# Path
(?P/?[a-z0-9\--_%!$&’()*+,;=:é]+
(/[a-z0-9\--_"%!$&′()*+,;=:é]+)*/?)？
|# Relative URL (no scheme or authority)
(?P
# Relative path
[a-20-9)-._%!$&′()*+,;=@]+(/[a-z0-9-._%!$&’()*+,;=:é]+)*/?
[#Absolute path
（/[a-20-9}-_%!ss’()*+,;=:@]+）+/?
8.7 Validating Generic URLs 1 449
---
## Page 466
(?P\?[a-z0-9\- ._%!$&′()*+,;=:8/]*)?
#Query
#Fragnent
(?P\#[a-z0-9\- . _%!$&′()*+,;=:@/?]*)?
Regex options: Free-spacing, case insensitive
Regexflavers: PCRE 4 and later, Perl 5.10, Python
([a-z][a-z0-9+\- .]*:(\/\/([a-z0-9)- ._%!$&′()*+,;=]+é)?([a-z0-9\- ._%]+| 
[[a-f0-9: .]+\]1\[v[a-f0-9][a-z0-9\-._%!$&′()*+,;=:]+\])(:[0-9]+)?
（\/[a-z0-9\-._%!s&′（)*+,;==@]+)*\/>1（/？[a-z0-9\-._%!$8()*+,;=:@]++
(\/[a-z0-9\-._%!$&′()*+,;==e]+)*\/?)？)1([a-z0-9\--_%!$8*()*+,;=@]+
（\/[a-z0-9）-._%1s&′()*+,;=:e]+)*\/²(V/[a-z0-9\-._%!$&'()*+,;==é]+)+
((/+
(\？[a-z0-9\--_~%!$&′()*+,;=:@\/?]*)?(#[a-20-9\- -_~%!$&°()*+,;=:é\/>]*)?$
Regex options: Case insensitive
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python
Discussion
Most of the preceding recipes in this chapter deal with URLs, and the regular expres-
sions in those recipes deal with specific kinds of URLs. Some of the regexes are adapted
to specific purposes, such as determining whether punctuation is part of the URL. or
the text that quotes the URL.
The regular expressions in this recipe deal with generic URLs. They're not intended for
searching for URIs in larger text, but for validating strings that are supposed to hold
URLs, and for splitting URLs into their various pars. They accomplish these tasks for
any kind of URL, but in practice, you'll likely want to make the regexes more specific.
The recipes after this one show examples of more specific regexes.
RFC 3986 describes what a valid URL should look like It covers every possible URL,
including relative URL.s and URLs for schemes that haven’t even been invented yet. As
a result, RFC 3986 is very broad, and a regular expression that implements it is quite
long, The regular expressions in this recipe only implement the basics. They're enough
to reliably split the URL into its various parts, but not to validate each of those parts.
Validating all the parts would require specific knowledge of each URL scheme anyway.
RFC 3986 does not cover all URLs that you may encounter in the wild. For example,
many browsers and web servers accept URLs with literal spaces in them, but RFC 3986
requires spaces to be escaped as %20.
An absolute URL must begin with a scheme, such as http: or ftp:. The first character
of the scheme must be a letter. The following characters may be letters, digits, and a
few specific punctuation characters. We can easily match that with two character
classes: .
450 | Chapter 8: URLs, Paths, and Intemet Adreses
---
## Page 467
Many URL schemes require what RFC 3986 calls an *authority."* The authority is the
domain name or IP address of the server, optionally preceded by a usermame, and op-
tionally followed by a port number.
The usermame can consist of letters, digits, and a bunch of punctuation. It must be
delimited from the domain name or IP address with an (@ sign.  is all we need.
If an authority is specified, it must be followed by either an absolute path or no path
at al. An absolute path starts with a forward slash, followed by one or more segments
delimited by forward slashes. A segment consists of one or more letters, digits, or
punctuation characters. There can be no consecutive forward slashes. The path may
end with a forward slash.  matches such paths.
If the URL does not specify an authority, the path can be absolute, relative, or omitted.
Absolute paths start with a forward slash, whereas relative paths don’t. Because the
leading forward slash is now optional, we need a slightly longer regex to match both
absolute and relative paths: .
Relative URLs do not specify a scheme, and therefore no authority. The path becomes
mandatory, and it can be absolute or relative. Since the URL does not specify a scheme,
the first segment of a relative path cannot contain any colons. Otherwise, that colon
would be seen as the delimiter of the scheme. So we need two regular expressions to
match the path of a relative URL. We match relative paths with [a-z0-9\- -_"%!$8′()*
+,;=@]+(/[a-zo-9\- _α%!$&′()*+,;=:@]+)*/?>. This is very similarto the regex forpaths
8.7 Validating Generic URLs | 451
---
## Page 468
with a scheme but no authority. The only differences are the optional forward slash at
the start, which is missing, and the first character class, which does not include the
colon. W’e match absolute paths with , This is
the same regex as the one for paths in URLs that specify a scheme and an authority,
except that the asterisk that repeats the segments of the path has become a plus. Relative
URLs require at least one path segment.
The query part of the URL is optional. If present, it must start with a question mark.
The query runs until the first hash sign in the URL or until the end of the URL. Since
the hash sign is not among valid punctuation characters for the query part of the URL,
we can easily match this with  matches
this.
To make it easier to work with the various parts of the URL, we use named capturing
groups. Recipe 2.11 explains how named caprure works in the different regex flavors
discussed in this book. Perl 5.10, Ruby 1.9, and .NET allow multiple named capruring
groups to share the same name. This is very handy in this situation, because our regex
has multiple ways of matching the URL's path, depending on whether the scheme and/
or the authority are specified. If we give these three groups the same name, we can
simply query the *path" group to get the path, regardless of whether the URL has a
scheme and/or an authority.
The other flavors don’t support this behavior for named capture, even though most
support the same syntax for named capture. For the other flavors, the three capturing
groups for the path all have different names. Only one of them will actually hold the
URL's path when a match is found. The other rwo won’t have participated in the match.
SeeAlso
Recipe 3.9 shows code to get the text matched by a particular part (capruring group)
of a regex. Use this to get the parts of the URL you want.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.5 explains anchors. Recipe 2.8 explains
altermation. Recipe 2.9 explains grouping. Recipe 2.11 explains named capruring
groups. Recipe 2.12 explains repetition. Recipe 2.18 explains how to add comments.
Recipe 8.1 provides a simpler solution that follows more liberal rules for valid URLs
used by the major web browsers, rather than strictly adhering to RFC 3986.
452 | Chapter 8: URLs, Paths, and IntemetAddresses
---
## Page 469
8.8Extracting theSchemefromaURL
Problem
You want to extract the URL scheme from a string that holds a URL. For example, you
want to extract http from http: //wn, regexcookbook, com.
Solution
Extract the scheme from a URL known to be valid
^([a-z][a-z0-9+\- ]*) :
Regexoptions: Case insensitive
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Extract the scheme while validating the URL
A
([a-z][a-20-9+\- . ]*):
(# Authority & path
//
([a-z0-9\-._"%!$&′()*+,;=]+@)？
# UseT
([a-z0-9\-._%]+
 Named host
[[[a-fo-9:.]+\]
\[v[a-f0-9][a-20-9\-._~%!s&'()*+,;=: ]+\])
# IPv6 host
# IPvFuture host
(+[6-0]:)
# Port
(/[a-z0-9\-._~%!$&′()*+,;=:@]+)*/?
# Path
|# Path without authority
(/?[a-20-9\- -_%!$&’()*+,;=:é]+(/[a-z0-9\-._%!$&′()*+,;==e]+)*/？)？
Query
([/θ:=+(),g$i%-\6-0z-e]\)
Fragnent
 (Recipe 2.3).
The scheme is delimited from the rest of the URL with a colon. We add this colon to
the regex to make sure we match the scheme only if the URL actually starts with a
scheme. Relative URLs do not start with a scheme. The URL syntax specified in RFC
3986 makes sure that relative URLs don’t contain any colons, unless those colons are
preceded by characters that aren’t allowed in schemes. That'’s why we had to exclude
the colon from one of the character classes for matching the path in Recipe 8.7. If you
use the regexes in this recipe on a valid but relative URL, they won’t find a match at all.
Since the regex matches more than just the scheme itself(it includes the colon), we've
added a capturing group to the regular expression. When the regex finds a match, you
can retrieve the text matched by the first (and only) capturing group to get the scheme
without the colon. Recipe 2.9 tells you all about capturing groups. See Recipe 3.9 to
leam how to retrieve text matched by capruring groups in your favorite programming
language.
If you don’t already know that your subject text is a valid URL, you can use a simplified
version of the regex from Recipe 8.7. Since we want to extract the scheme, we can
exclude relative URLs, which don’t specify a scheme. That makes the regular expression
slightly simpler.
Since this regex matches the whole URL, we added an extra capturing group around
the part of the regex that matches the scheme. Retrieve the text matched by capturing
group number 1 to get the URL's scheme.
SeeAlso
Recipe 3.9 shows code to get the text matched by a particular part (capruring group)
of a regex. Use this to get the URL scheme.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.5 explains anchors. Recipe 2.8 explains
altermation. Recipe 2.9 explains grouping. Recipe 2.11 explains named capturing
groups. Recipe 2.12 explains repetition. Recipe 2.18 explains how to add comments.
454 | Chapter 8: URLs, Paths, and IntemetAddresses
---
## Page 471
8.9Extracting theUserfrom aURL
Problem
You want to extract the user from a string that holds a URL. For example, you want to
extract Jan from ftp: //jan@uww.regexcookbook.con.
Solution
Extract the user from a URL known to be valid
[a-20-9+\- - ]+://([a-20-9\- -_%!$&’()*+,;=]+)e
Regexoptions: Case insensitive
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Extract the user while validating the URL
[a-z][a-z0-9+\-- ]*://
A
# Schene
(+[={+(),g$i%-\6-0z-e])
# User
([a-20-9\-._~%]+
# Named host
[[a-fo-9:.]+\]
 IPv6 host
1[v[a-f0-9][a-z0-9\- ._%!$&′()*+,;=:]+])
 aaa #
(+[6-0]:)
↓x0d #
（/[a-20-9\--_%!$&'()*+,;=:@]+)*/?
# Path
（[/:=+（），g$i%--\6-0z-e]\)
# Query
（[/@:=+(),g$i%-√6-0z-e]#)
 Fragnent