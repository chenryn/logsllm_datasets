multi-permitter setting, processors can submit any number
of requests for each key at each timeslot, but they must all
satisfy the condition that A = ∅.
PoW protocols will generally be best modelled in the untimed,
unsized and single-permitter settings. They are best modelled in the
untimed setting, because a processor’s probability of being granted
permission to broadcast a block at timeslot t (even if that block has
a different timestamp) depends on their resource balance at t, rather
than at any other timeslot. They are best modelled in the unsized
setting, because one does not know in advance of the protocol
execution the amount of mining which will take place at a given
timeslot in the future. They are best modelled in the single-permitter
setting, so long as permission to broadcast is block-specific.
PoS protocols are generally best modelled in the timed, sized
and multi-permitter settings. They are best modelled in the timed
setting, because blocks will generally have non-manipulable times-
tamps, and because a processor’s ability to broadcast a block may
be determined at a timestamp t even through the probability of
success depends on their resource balance at t′ other than t. They
are best modelled in the sized setting, because the resource pool
is known from the start of the protocol execution. They are best
modelled in the multi-permitter setting, so long as permission to
broadcast is not block-specific, i.e. when permission is granted, it
is to broadcast a range of permissible blocks at a given position in
the blockchain.
All of this means that it will generally be straightforward to
classify protocols with respect to the theorems from this paper that
apply to them. Since Bitcoin and Prism [2] are PoW protocols, for
example, Theorem 5.1 applies to those protocols. Since Snow White,
Ouroboros [11] and Algorand are PoS protocols, Theorems 3.3 and
5.6 apply to those protocols. Note that there are a large number
of protocols, such as Tendermint [4] and Hotstuff [18], which are
formally described as permissioned protocols, but which can be
implemented as PoS protocols so that Theorems 3.3 and 5.6 will
then apply.
2.7 Defining liveness
There are a number of papers that successfully describe liveness and
security notions for blockchain protocols [10, 16]. Our interest here
is in identifying the simplest definitions that suffice to express our
later results. To this end, it will be convenient to give a definition
of liveness that is more fine-grained than previous definitions, in
the sense that it allows us to separate out the security parameter
and the number of timeslots in the duration (in previous accounts
the number of timeslots in the duration is a function of the security
parameter). Consider a protocol with a notion of confirmation C,
and let |C(M )| denote the number of blocks in C(M ) for any message
state M. For timeslots t1  l1. For any duration D, let |D|
be the number of timeslots in D. For ℓε,D which takes values in
N depending on ε and D, let us say that ℓε,D is sublinear in D if,
for each ε > 0 and each α ∈ (0, 1), ℓε,D  0 and duration D, there exists ℓε,D, which is sublin-
ear in D, and such that for each pair of timeslots t1  0 and duration D, there exists ℓε,D,
which is sublinear in D, and such that the following holds with
probability at least 1 − ε: For all pairs of timeslots t1  0, for every p1, p2
and for all timeslots t1, t2 in the duration: With probability > 1 − ε,
all blocks which are confirmed for p1 at t1 are compatible with all
those which are confirmed for p2 at t2.
The following stronger notion will also be useful.
Definition 2.4 (Uniform Security). A protocol is uniformly se-
cure if the following holds for every choice of security parameter
ε > 0: With probability > 1 − ε, there do not exist incompatible
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1013blocks B1, B2, timeslots t1, t2 and p1, p2 such that Bi is confirmed
for pi at ti for i ∈ {1, 2}.
The difference between security and uniform security is that the
latter requires the probability of even a single disagreement to be
bounded, while the former only bounds the probability of disagree-
ment for each pair of processors at each timeslot pair. Just as for
liveness and uniform liveness, it does not follow from the Union
Bound that security is essentially equivalent to uniform security.
In Section 4 we will perform a detailed analysis of the relationship
between these notions.
3 CERTIFICATES IN THE PARTIALLY
SYNCHRONOUS SETTING
The definitions of this and subsequent sections are all new to this
paper, unless explicitly stated otherwise. The rough idea is that
‘certificates’ should be proofs of confirmation. Towards formalising
this idea, let us first consider a version which is too weak.
Definition 3.1. If B ∈ C(M ) then we refer to M as a subjective
certificate for B.
We will say that a set of messages M is broadcast if every member is
broadcast, and that M is broadcast by timeslot t if every member of
M is broadcast at a timeslot ≤ t (different members potentially being
broadcast at different timeslots). If M is a subjective certificate for B,
then there might exist M′ ⊃ M for which B (cid:60) C(M′). So the fact that
M is broadcast does not constitute proof that B is confirmed with
respect to any processor. When do we get harder forms of proof
than subjective certificates? Definition 3.2 below gives a natural
and very simple way of formalising this.
Definition 3.2. We say that a protocol with a notion of confirma-
tion C produces certificates if the following holds with probability
> 1 − ε when the protocol is run with security parameter ε: There
do not exist incompatible blocks B1, B2, a timeslot t and M1, M2
which are broadcast by t, such that Bi ∈ C(Mi ) for i ∈ {1, 2}.
It is important to stress that, in the definition above, the Mi’s are
not necessarily the message states of any processor, but are rather
arbitrary subsets of the set of all broadcast messages. The basic idea
is that, if a protocol produces certificates, then subjective certifi-
cates constitute proof of confirmation. Algorand is an example of a
protocol which produces certificates: The protocol is designed so
that it is unlikely that two incompatible blocks will be produced
at any point in the duration together with appropriate committee
signatures verifying confirmation for each.
Our next aim is to show that, in the partially synchronous setting,
producing certificates is equivalent to security. In fact, producing
certificates is clearly at least as strong as uniform security, so it
suffices to show that if a protocol is secure then it must produce
certificates.
Theorem 3.3. If a protocol is secure in the partially synchronous
setting then it produces certificates.
Proof. Towards a contradiction, suppose that the protocol with
notion of confirmation C is secure in the partially synchronous
setting, but that there exists a protocol instance12
In1 with security
12See Section 2.5 for the definition of a protocol instance.
parameter ε, such that the following holds with probability ≥ ε:
There exist incompatible blocks B1, B2, a timeslot t and M1, M2
which are broadcast by t, such that Bi ∈ C(Mi ) for i ∈ {1, 2}.
This means that the following holds with probability ≥ ε for tlast,
which is the last timeslot in the duration: There exist incompatible
blocks B1, B2 and M1, M2 which are broadcast by tlast, such that
Bi ∈ C(Mi ) for i ∈ {1, 2}. Consider the protocol instance In2 which
has the same values for determined variables as In1, the same state
transition diagram for the processor of the adversary and the same
set of processors with the same set of public keys, except that
now there are two extra processors p1 and p2. Suppose that the
resource pool for In2 is the same as that for In1 when restricted to
public keys other than those in Up1 and Up2, and that all keys in
Up1 and Up2 have zero resource balance throughout the duration.
Suppose further, that the timing rule for In2 is the same as that
for In1 when restricted to tuples (p, p′, m, t ) such that p (cid:60) {p1, p2}
and p′ (cid:60) {p1, p2}, but that now all timeslots are asynchronous.
According to the definition of Section 2.2, and since all keys in Up1
and Up2 have zero resource balance throughout the duration, it
follows by induction on timeslots that the probability distribution
on the set of broadcast messages is the same at each timeslot for
In2 as for In1, independent of which messages are received by p1
and p2. It therefore holds for the protocol instance In2 that with
probability ≥ ε there exist incompatible blocks B1, B2, and M1, M2
which are broadcast by tlast, such that Bi ∈ C(Mi ) for i ∈ {1, 2}.
Now suppose that p1 and p2 do not receive any messages until
tlast, and then receive the message sets M1 and M2 (if they exist)
respectively. This suffices to demonstrate that the definition of
security is violated with respect to tlast, ε, p1 and p2.
□
Corollary 3.4. Security and uniform security are equivalent in
the partially synchronous setting.
Proof. This follows from Theorem 3.3 and the fact that produc-
□
ing certificates clearly implies uniform security.
4 SECURITY AND UNIFORM SECURITY IN
THE SYNCHRONOUS SETTING
Having dealt with the partially synchronous setting, our next task
is to consider the synchronous setting. To do so, however, we first
need to formalise the notion of a recalibration.
4.1 Defining recalibrations
Theorem 3.3 seems to tie things up rather neatly for the partially
synchronous setting. In particular, the equivalence of security and
uniform security meant that we were spared having to carry out a
separate analysis for each security notion. It is not difficult to see,
however, that the two security notions will not be equivalent in
the synchronous setting. To see this, we can consider the example
of Bitcoin. Suppose first that we operate in the standard way for
Bitcoin, and use a notion of confirmation C that depends only on the
security parameter ε, and not on the duration D, so that the number
of blocks required for confirmation is just a function of ε. In this
case, the protocol is secure in the synchronous setting [10]. It is also
clear, however, that this protocol will not be uniformly secure in a
setting where the adversary controls a non-zero amount of mining
power: If a fixed number of blocks are required for confirmation
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1014then, given enough time, the adversary will eventually complete a
double spend (i.e. the adversary will double spend with probability
tending to 1 as the number of timeslots tends to infinity). That said,
it is also not difficult to see how one might ‘recalibrate’ the protocol
to deal with different durations – to make the protocol uniformly
secure, the number of blocks required for confirmation should be a
function of both ε and D.
The point of this subsection is to formalise the idea of recali-
bration and to show that, if a protocol is secure, then (under fairly
weak conditions) a recalibration will be uniformly secure. The basic
idea is very simple – one runs the initial (unrecalibrated) protocol
for smaller values of ε as the duration increases, but one has to be
careful that the resulting ℓε,D is sublinear in D.
Definition 4.1. We say (P2, C2) is a recalibration of the extended
protocol (P1, C1) if running P2 given certain inputs means running
P1 for a computable transformation of those inputs, and then ter-
minating after |D| many steps are complete.
So, if running P2 with security parameter ε and for n many timeslots
means running P1 with input parameters that specify a security
parameter ε/10 and that specify a duration consisting of 2n many
timeslots, and then terminating after n many timeslots have been
completed, then P2 is a recalibration of P1.13 Note also, that we
allow the recalibration to use a different notion of confirmation.
In the following, we say that ℓε,D is independent of D if ℓε,D =
ℓε,D′ for all ε > 0 and all D, D′. When ℓε,D is independent of D,
we will often write ℓε for ℓε,D.
Definition 4.2. In the bounded user setting we assume that
there is a finite upper bound on the number of processors, which
holds for all protocol instances.14
Proposition 4.3. Consider the synchronous and bounded user
setting. Suppose P satisfies liveness with respect to ℓε,D, that ℓε,D
is independent of D, and that for each α > 0, ℓε  0. If P is secure, there exists a recalibration of P
that is uniformly live and uniformly secure.
ε
The conditions on ℓε,D in the statement of Proposition 4.3 can
reasonably be regarded as weak, because existing protocols which
are not already uniformly secure will normally satisfy the con-
ditions that: (†a ) ℓε,D is independent of D, and; (†b ) For some
constant c and any ε ∈ (0, 1), we have ℓε < cln 1
. The example of