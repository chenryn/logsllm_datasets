### Display and Controls in Design View

The text and controls are displayed as they appear in the Design View window of Visual Studio. This is the optimal size of the form as it was designed.

13. **Resize the Window to Minimum Width:**
    - Resize the window displaying the Customer app to its minimum width.
    - Much of the form will disappear, and some of the TextBlock content will wrap, making the form unusable in this view.

14. **Stop Debugging:**
    - Return to Visual Studio and, on the Debug menu, click Stop Debugging.
    - This exercise highlights the importance of careful layout design. While the app looks fine at the original Design View size, it becomes less useful or even completely useless when resized to a narrower view. Additionally, the app assumes a landscape orientation. To see how the form would look in portrait mode, temporarily switch the Design View window to the 12” Tablet form factor and click the Portrait orientation button. (Remember to switch back to the 13.3” Desktop form factor afterward.)

### Using the Simulator for UWP App Testing

Even if you don't have a tablet, you can test your Universal Windows Platform (UWP) apps using the Simulator provided with Visual Studio 2017. The Simulator mimics a tablet device, allowing you to emulate user gestures such as pinching, swiping, rotating, and changing the resolution.

**To Run an App in the Simulator:**
1. Open the Debug Target drop-down list box on the Visual Studio toolbar.
2. By default, the debug target is set to Local Machine, which runs the app full-screen on your computer. Select Simulator from the list to start the Simulator when debugging.
3. You can also set the debug target to a different computer for remote debugging, which will prompt you for the network address of the remote computer.

**Simulator Toolbar:**
- The toolbar on the right side of the Simulator window contains tools for emulating user gestures with the mouse. For testing the layout, the most important tools are Rotate Clockwise, Rotate Counterclockwise, and Change Resolution.

**Testing the Layout:**
- Run the Customers app in the Simulator and maximize it to occupy the full screen.
- Use the Rotate Clockwise and Rotate Counterclockwise buttons to test the app in both landscape and portrait orientations.
- Use the Change Resolution button to test the app at different resolutions, such as 1366 x 768 (representing a 10.6-inch display) and 2560 x 1440 (a typical resolution for a 27-inch monitor).

**Stopping the Simulator:**
- To stop the Simulator, click the Windows button in the Simulator, then click Power, and select Disconnect.

**Emulators for Specific Devices:**
- Visual Studio also supports emulators for specific mobile devices. Some may be listed in the Simulator drop-down list, and new emulators can be installed by selecting Download New Emulators.

### Implementing a Tabular Layout with Grid Control

You can use the Grid control to create a tabular layout. A Grid contains rows and columns, and you can specify where other controls should be placed. The key feature of the Grid control is that row and column sizes can be specified as relative values, allowing the grid to adapt to different form factors and orientations.

**Example: Customers App Layout**
- The UI of the Customers app can be divided into two main areas: a heading and a body.
- The heading row is twice as high as the spacer below it, the body row is ten times as high as the spacer, and the bottom margin is twice the height of the spacer.

**Creating the Grid:**
1. Add another Grid inside the existing Grid element in the XAML pane for the Customers app. Set a margin of 10 pixels from the left and right edges and 20 pixels from the top and bottom.
2. Define the rows and columns for the new Grid. Use the * operator to indicate relative sizes.
3. Move the TextBlock control containing "Adventure Works Customers" into the new Grid and set its Grid.Row attribute to 0.
4. Remove the Margin property and set the HorizontalAlignment and VerticalAlignment properties to Center.
5. Add a nested Grid control for the body of the form and set its Grid.Row property to 2.
6. Define the rows and columns for the nested Grid.
7. Move the TextBlock controls for ID, Title, First Name, and Last Name inside the nested Grid and set their Grid.Row and Grid.Column properties.
8. Move the TextBox and ComboBox controls inside the nested Grid and set their Grid.Row and Grid.Column properties.
9. Adjust the alignment and spacing properties as needed.

**Testing the Layout in the Simulator:**
1. In the Debug Target list, select Simulator.
2. Start the app in the Simulator and maximize it.
3. Test the layout at different resolutions and orientations to ensure the controls are evenly spaced and the layout adapts correctly.

By following these steps, you can create a scalable and adaptable user interface for your UWP app.