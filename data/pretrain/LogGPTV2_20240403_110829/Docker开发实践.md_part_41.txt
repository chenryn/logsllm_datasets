FROM node:0.10-onbuild
# replace this with your application's default port
18
EXPOSE 8888
260 附录A 常见镜像
然后构建镜像和启动容器：
docker build -t my-nodejs-app .
docker run -it --rm --name my-running-app my-nodejs-app
需要注意的是，项目必须包含package.json文件，用于列举出项目的依赖库。
也可以采用Dockerfile方式构建Node.js镜像，其Dockerfile的内容为：
FROM buildpack-deps:jessie
# verify gpg and sha256: http://nodejs.org/dist/v0.10.30/SHASUMS256.txt.asc
# gpg: aka "Timothy J Fontaine (Work) "
# gpg: aka "Julien Gilli "
RUN gpg --keyserver pool.sks-keyservers.net --recv-keys 7937DFD2AB06298B2293C3187D33FF9D0246406D
114F43EE0176B71C7BC219DD50A3051F888C628D
ENV NODE_VERSION 0.8.28
ENV NPM_VERSION 2.4.1
RUN curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz" \
&& curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" \
&& gpg --verify SHASUMS256.txt.asc \
&& grep " node-v$NODE_VERSION-linux-x64.tar.gz\$" SHASUMS256.txt.asc | sha256sum -c - \
&& tar -xzf "node-v$NODE_VERSION-linux-x64.tar.gz" -C /usr/local --strip-components=1 \
&& rm "node-v$NODE_VERSION-linux-x64.tar.gz" SHASUMS256.txt.asc \
&& npm install -g PI:EMAIL \
&& npm install -g npm@"$NPM_VERSION" \
&& npm cache clear
# note: we have to install npm 1.4.28 first because we can't go straight from 1.2 -> 2.0
# see also https://github.com/docker-library/node/issues/15#issuecomment-57879931
CMD [ "node" ]
A.4.6 Go
Go语言是Google公司在2009年推出的一款编程语言，主要针对多处理器系统应用程序的编程
进行了优化，它不仅在执行速度上不比C/C++逊色，而且增加了垃圾回收、动态类型以及库管理
等功能。Go语言常用于网络服务器的开发中，Google的App Engine以及Docker都是采用Go语言进
行开发的。
使用Go容器最简单的方式是将它作为编译和运行的环境，此时只需要在项目的根目录下添
加如下Dockerfile即可：
FROM golang:1.3-onbuild
虽然只有简单的一行代码，但通过该Dockerfile构建的镜像具有ONBUILD触发器，它将会执
行COPY . /usr/src/app、RUN go get -d -v 、RUN go install -v和CMD["app"]等命令，分别对项
目源码进行复制、编译、安装和运行。
通过下面的命令构建镜像和启动容器：
docker build -t my-golang-app .
docker run -it --rm --name my-running-app my-golang-app
附录A 常见镜像 261
如果你只是想通过它编译项目而不是在容器内部运行该项目，则可以通过下面的命令： 1
docker run --rm -v "$(pwd)":/usr/src/myapp -w /usr/src/myapp golang:1.3 go build -v
2
该命令将当前目录映射到容器内的/usr/src/myapp，并将该目录作为工作目录，go build则仅
编译项目，并将项目输出到/usr/sr/myapp中。
3
如果你的项目有Makefile，则可以通过下面的命令进行编译：
docker run --rm -v "$(pwd)":/usr/src/myapp -w /usr/src/myapp golang:1.3 make 4
除了编译本地机器运行的程序外，还可以用Go进行交叉编译。例如，在Linux/amd64位机器
5
上编译Windows/386目标的代码如下：
docker run --rm -v "$(pwd)":/usr/src/myapp -w /usr/src/myapp -e GOOS=windows -e GOARCH=386
6
golang:1.3-cross go build -v
不仅如此，你还可以一次性编译出所有平台下的目标，具体为：
7
docker run --rm -it -v "$(pwd)":/usr/src/myapp -w /usr/src/myapp golang:1.3-cross bash
$ for GOOS in darwin linux; do
9
> for GOARCH in 386 amd64; do
> go build -v -o myapp-$GOOS-$GOARCH
> done
8
> done
最后，我们给出Go镜像的Dockerfile：
10
FROM buildpack-deps:jessie-scm
# gcc for cgo
10
RUN apt-get update && apt-get install -y \
gcc libc6-dev make \
--no-install-recommends \
11
&& rm -rf /var/lib/apt/lists/*
ENV GOLANG_VERSION 1.4.1
RUN curl -sSL https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz \
13
| tar -v -C /usr/src -xz
RUN cd /usr/src/go/src && ./make.bash --no-clean 2>&1
ENV PATH /usr/src/go/bin:$PATH
14
RUN mkdir -p /go/src
ENV GOPATH /go
ENV PATH /go/bin:$PATH
15
WORKDIR /go
COPY go-wrapper /usr/local/bin/
16
17
18
262 附录B Docker API列表
附录 B
Docker API列表
为了更好地让读者查阅Docker的API，我们在这一章中按照容器相关和镜像相关两个部分来
说明Docker的API。
B.1 容器相关的API
容器相关的API主要是对容器的操作，包括列出容器、创建容器、查看容器、获取容器日志、
启动和停止容器等操作。
1. 列出容器
方法：GET /containers/json
用例请求：GET /containers/json?all=1&before=8dfafdbc3a40&size=1 HTTP/1.1
用例返回：
HTTP/1.1 200 OK
Content-Type: application/json
[
{
"Id": "8dfafdbc3a40",
"Image": "base:latest",
"Command": "echo 1",
"Created": 1367854155,
"Status": "Exit 0",
"Ports":[{"PrivatePort": 2222, "PublicPort": 3333, "Type": "tcp"}],
"SizeRw":12288,
"SizeRootFs":0
},
...
]
请求参数
 all ：其值为1/True/true或0/False/false，表示是否显示所有容器。其值若为真，则会
显示所有容器，其中包含已经停止的容器，否则只显示正在运行的容器。其默认值为0。
附录B Docker API列表 263
 limit：仅显示最新建立的几个容器。 1
 since：显示比指定Id的容器更晚创建的容器。
 before：显示比指定Id的容器更早创建的容器。 2
 size ：其值为1/True/true或者0/False/false，表示是否显示容器的大小。
 filters ：使用JSON格式的条件过滤容器，例如退出码（exited=），status运行状
3
态（status=restarting|running|paused|exited）。
状态码 4
 200：返回正常。
5
 400：参数错误。
 500：服务器错误。
6
curl操作：
curl -X GET http://localhost:2376/containers/json?all=1 7
2. 创建容器
9
方法：POST /containers/create
用例请求：
8
POST /containers/create HTTP/1.1
Content-Type: application/json 10
{
"Hostname":"",
"Domainname": "", 10
"User":"",
"Memory":0,
"MemorySwap":0, 11
"CpuShares": 512,
"Cpuset": "0,1",
"AttachStdin":false,
13
"AttachStdout":true,
"AttachStderr":true,
"Tty":false,
14
"OpenStdin":false,
"StdinOnce":false,
"Env":null,
15
"Cmd":[
"date"
],
16
"Entrypoint": "",
"Image":"base",
"Volumes":{
17
"/tmp": {}
},
"WorkingDir":"",
18
"NetworkDisabled": false,
264 附录B Docker API列表
"MacAddress":"12:34:56:78:9a:bc",
"ExposedPorts":{
"22/tcp": {}
},
"SecurityOpts": [""],
"HostConfig": {
"Binds":["/tmp:/tmp"],
"Links":["redis3:redis"],
"LxcConf":{"lxc.utsname":"docker"},
"PortBindings":{ "22/tcp": [{ "HostPort": "11022" }] },
"PublishAllPorts":false,
"Privileged":false,
"Dns": ["8.8.8.8"],
"DnsSearch": [""],
"VolumesFrom": ["parent", "other:ro"],
"CapAdd": ["NET_ADMIN"],
"CapDrop": ["MKNOD"],
"RestartPolicy": { "Name": "", "MaximumRetryCount": 0 },
"NetworkMode": "bridge",
"Devices": []
}
}
用例返回：
HTTP/1.1 201 Created
Content-Type: application/json
{
"Id":"e90e34656806"
"Warnings":[]
}
JSON参数
 Hostname：容器内系统的主机名。
 Domainname：容器内系统的域名。
 User：容器内用户。
 Memory：内存（字节）。
 MemorySwap：包含Swap交换存储在内的总存储量。
 AttachStdin：是否附加到标准输入。
 AttachStdout：是否附加到标准输出。
 AttachStderr：是否附加到标准错误输出。
 Tty：是否需要附加伪终端。
 Env：环境变量，形如VAR=value。
 Cmd：容器要运行的命令。
 Entrypoint：容器的入口点。
 Image：容器基于的镜像。
附录B Docker API列表 265
 Volumes：数据卷。 1
 WorkingDir：默认工作目录。
 NetworkDisabled：是否打开网络。 2
 ExposedPorts：暴露端口，形如"ExposedPorts": { "/: {}" }。
 SecurityOpts：安全选项，例如配置SELinux。
3
 HostConfig：子项配置。
 Binds：数据卷配置，形如host_path:container_path:ro。
4
 Links：容器连接，形如container_name:alias。
 PortBindings：端口映射，形如{ /: [{ "HostPort": "" }] }。
5
 PublishAllPorts：是否给容器所有开放端口都随机映射到主机端口。
 Privileged：是否给予容器root权限访问宿主主机。
6
 Dns：Dns列表。
 DnsSearch：Dns搜索域。
7
 VolumesFrom：数据容器引用，形如[:]。
 CapAdd：容器所使用的内核机制列表。
9
 Capdrop：容器不适用的内核机制列表。
 RestartPolicy：容器退出时的重启机制。
8
 NetworkMode：容器的网络类型，支持bridge、host和container:。
请求参数 10
 name：容器的名字。
10