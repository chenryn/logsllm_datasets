which in turn forwards the LLDP packet to S2. Subsequently, S2 en-
capsulates the LLDP packet in an OpenFlow packet_in and sends
it to the controller, allowing the LDS to discover a unidirectional
link from S1 to S2. Following the same approach, the controller can
also infer whether a reverse link exists, i.e., from S2 to S1. This pro-
cedure is performed regularly in order to account for the dynamics
of SDN networks. Existing inter-switch links are removed (i) if a
switch detects a port disconnection or (ii) if no LLDP packets are
received during a certain amount of time.
Figure 1: Procedure to discover a unidirectional link from S1
to S2 using the OpenFlow Discovery Protocol (OFDP).
3.2 Existing topology attacks and defences
In this section, we summarise the existing topology attacks and the
defences that have been proposed to mitigate them.
Topology attacks typically assume that adversaries have some
knowledge of the network topology and can learn the network
identifiers of the victim host(s). These are realistic assumptions.
The network topology information can be recovered using standard
path tracing tools (e.g., traceroute) or applying reconnaissance
techniques (e.g., [41]). Similarly, as SDN networks use the same
(insecure) protocols as traditional networks (e.g., ARP or DHCP), it
is relatively simple for adversaries to obtain the network identifiers
of the victim host(s).
3.2.1 TopoGuard (NDSS’15). Hong et al. identified two topol-
ogy attacks called host location hijacking and link fabrication which
have received significant attention in the last few years [15]. Hong
et al. also introduced TopoGuard, a security solution that impedes
adversaries from executing both attacks. TopoGuard considers ad-
versaries who can control one or more hosts, i.e., the controller and
the switches are fully trusted. TopoGuard also assumes the use of
SSL/TLS to protect the control channel between the controller and
each of the switches.
Attacks. In a host location hijacking attack, adversaries aim
to convince the controller that a victim’s host moved to another
network location. For this purpose, adversaries who control one or
more hosts can send packets using the network identifiers (e.g., the
IP and/or MAC address) of the victim host. This causes the HTS
to update the network location information of the victim’s host.
This attack can be successfully launched for as long as the victim
host remains idle. On the other hand, in a link fabrication attack
the goal of adversaries is to create fake links between switches.
Figure 2 shows several ways for adversaries to create such fake links.
For example, adversaries can modify legitimate LLDP packets or
even craft valid ones. Another approach consists of relaying LLDP
packets between two network locations using either an in-band or
an out-of-band channel. In all these cases, the adversary manages
to trick the controller into believing that there is a new inter-switch
link when the link does not actually exist. All packets that traverse
this link will be dropped or intercepted by the adversary.
SDNControllerSwitchS1SwitchS2Port 22LLDP packetPort 11PACKET_OUTwith LLDP packet3PACKET_INwith LLDP packetOpenFlowTMlinkData linkTo prevent link fabrication attacks, Hong et al. proposed to (i)
protect the integrity of LLDP packets and (ii) avoid hosts’ partici-
pation in the LLDP propagation process. To ensure LLDP integrity,
a controller-signed field – computed over the DPID and the port
number of the source switch – is added within LLDP packets. This
prevents adversaries from crafting fake LLDP packets. To guaran-
tee that LLDP packets are sent only to switches, a port-labelling
strategy was designed to identify which type of device is connected
to each switch port. This approach considers three possible states:
(i) HOST, (ii) SWITCH or (iii) ANY. HOST means that there is a host
connected to the switch port, SWITCH refers to the case where a
switch is connected, whereas ANY is used if no device is connected.
Initially, all switch ports are labelled as ANY. The port label is up-
dated based on the first type of traffic received by the switch on
each port. However, it is also important for their approach to be able
to “forget” the port type. Recall that SDN networks are expected to
be used in dynamic environments where a host can be unplugged
and replaced by a switch (or vice versa). This requirement can be
satisfied by resetting the port type to ANY every time a port-down
event is detected, i.e., when the host disconnects from the switch.
This port-labelling strategy prevents adversaries who control more
than one host from relaying LLDP packets, since these packets are
only sent to switch ports.
3.2.2 TopoGuard+ (DSN’18). Skowyra et al. presented two new
topology attacks called port amnesia and port probing that can be
successfully conducted even in the presence of TopoGuard [40]. Fur-
thermore, Skowyra et al. designed and implemented an extension
of TopoGuard, called TopoGuard+, which not only prevents port
amnesia attacks but also detects link fabrication attacks based on re-
laying LLDP packets through an out-of-band channel. TopoGuard+
defends against adversaries who control one or several hosts. The
controller and the switches are assumed to be trusted.
Attacks. In the port amnesia attack, the goal of the adversary
is to bypass the port-labelling technique proposed in TopoGuard.
Adversaries can disconnect and reconnect the network interfaces
of their hosts to reset the switch ports to ANY. This can let the
hosts emulate the behaviour of switches to transmit (fake) LLDP
packets to the controller.
In the port probing attack, the adversary circumvents the mecha-
nisms used in TopoGuard to thwart host location hijacking attacks
by exploiting the time it takes for a victim’s host to migrate to a
new network location. This attack leverages the fact that the host’s
identifiers are not bound to any network location while hosts are
in transit. A technique was proposed to stealthily and accurately
detect the moment that the victim’s host leaves its network location.
Even more, the authors demonstrated that a host migration can be
maliciously triggered remotely.
Countermeasures. TopoGuard+ extends TopoGuard by includ-
ing two new modules: (i) the Control Message Monitor (CMM) and
(ii) the Link Latency Inspector (LLI). The CMM enables the con-
troller to identify suspicious port-type resets during LLDP prop-
agation. For this purpose, the controller monitors the traffic and
raises an alert if port-up or port-down are received while a LLDP
packet is in progress. This makes TopoGuard+ resistant to port
amnesia attacks. Nevertheless, the CMM module cannot detect link
(a) Link fabrication attack where H2 relays LLDP
packets to H1 using an out-of-band channel.
(b) Link fabrication attack where H1 crafts and sends
LLDP packets identical to those that originate from S3
port 1.
Figure 2: Link fabrication attack performed using two differ-
ent methodologies: (2a) relaying LLDP packets over an out-
of-band channel (2b) forging LLDP packets. In both cases,
the controller believes that there is a unidirectional link
from S3 port 1 to S1 port 1.
Countermeasures. Regarding the host location hijacking at-
tack, Hong et al. proposed to check pre- and post-conditions before
accepting a host migration as valid. The intuition behind this ap-
proach is that all genuine host migrations produce a series of events
that need to occur sequentially. Essentially, this implies that a host
needs to first leave its current network location before being able to
connect to a new switch. More specifically, the controller first waits
to receive a port-down from the switch where the host is initially
connected, and then it checks whether the host is still reachable at
the initial network location. Only if these conditions are satisfied,
the controller accepts the migration as valid and the host can send
packets from its new network location. Despite this being a very
simple countermeasure, it enables detection of attacks where a host
appears to be in two locations simultaneously.
SwitchS2p1 SwitchS1SwitchS3Host1Host2p2p1 p2 p2 p1 43215SDNControllerOpenFlowTMlinkDatalinkFake data linkOut-of-band channelLLDPpacketSwitchS21p1 SwitchS1SwitchS3Host1Host2p2p1 p2 p2 234p1 SDNControllerOpenFlowTMlinkDatalinkFake data linkLLDP packetfabrication attacks that rely on the use of an out-of-band channel.
To defend against such attacks, the LLI module is used. This module
detects fake links by keeping track of the latencies of the genuine
links between switches.
3.2.3 Stealthy Probing-Based Verification (ESORICS’18).
Alimohammadifar et al. presented SPV, a stealthy probing-based
verification approach for detecting any type of link fabrication
attack [4]. Similarly to most existing work, SPV assumes that the
SDN controller is trusted and that the control channels between the
SDN controller and the switches are protected. In contrast to other
works, SPV considers adversaries who can control not only hosts
but also a few switches within the network. The authors assume
that adversaries can use a low-bandwidth out-of-band channel to
create fake inter-switch links. However, the authors acknowledge
the fact that SPV cannot defend against adversaries who forward
all traffic through the out-of-band channel, since this would create
a link that actually resembles genuine links in the network.
Countermeasures. To verify the legitimacy of inter-switch
links, SPV relies on the use of probing packets that are indistin-
guishable from normal traffic. For this, SPV listens to the network
traffic and maintains a list of reference packets sent by hosts. This
also includes the DPIDs of the switches from where these packets
were sent. For validating a link, SPV chooses a reference packet at
random from the ones previously stored in the list. To guarantee
the security of SPV, the reference packet cannot be a packet that has
previously been used by any of the two switches involved in this
link. SPV proposes using probing packets where some fields match
those of normal traffic and some fields are randomised. Specifically,
the probing packet takes the Ethernet_type and Payload length from
the randomly-chosen reference packet while the source and desti-
nation MAC/IP addresses are chosen at random. Similarly to the
OFDP protocol, SPV sends the probing packet to the sender switch
which in turn forwards it to the destination switch. Upon receiving
the probing packet, the destination switch sends it back to the con-
troller. The core idea of their approach is simple yet effective; if the
probing packet returns to the controller, there exists a link between
these switches. Otherwise, SPV concludes that the link is fake and
removes it from the network topology view at the controller.
Additionally, a mechanism was designed to handle lost probing
packets (e.g., due to link failures). In such a case, SPV generates a
new probing packet by fetching the first probing packet and using
the LineSweep algorithm [21, 32]. The new probing packet, which
is just slightly different from the first one, is then sent to the sender
switch following the procedure previously described.
3.2.4 SecureBinder (USENIX’17). Jero et al. discovered an at-
tack called Persona Hijacking that takes advantage of the inherent
weaknesses in the identifier binding mechanisms in SDN [19]. Be-
sides proposing a very effective and dangerous attack, Jero et al.
introduced SecureBinder, a defence mechanism that can be used to
defeat host location hijacking attacks, including the port probing
attack introduced in TopoGuard+. SecureBinder assumes that ad-
versaries can control one or more hosts. The rest of the network
components are considered to be trusted.
Attacks. Persona Hijacking comprises two phases: (i) IP takeover
and (ii) flow poisoning. In the IP takeover phase, the goal of the
adversary is to break the binding between the IP address and the
MAC address of the victim’s host. The adversary can successfully
launch this attack if it convinces the DHCP server to release the
victim’s IP address so that it can bind its own MAC address to it. The
flow poisoning phase is needed only when the DHCP server checks if
the IP address is in use before assigning it to a new host. This phase
consists of all the necessary steps to break the binding between
the victim’s MAC address and its network location. Essentially, the
adversary exploits a flow rule inconsistency on a switch to redirect
traffic to itself. This attack can let adversaries fully takeover and
become the owner of the victim’s identifiers.
Countermeasures. SecureBinder binds together all hosts’ iden-
tifiers using a modified legacy version of the 802.1x authentication
protocol [34] that additionally checks if the hosts MAC addresses
are valid, i.e., within the list of authorised hosts. The controller
takes the role of the authenticator, allowing the host (i.e., the suppli-
cant) to access the network after authenticating successfully. The
authenticator server, which is connected to the controller, contains
a database that binds each host’s MAC address with its certificate.
In addition, SecureBinder leverages the SDN architecture to en-
sure that all binding control traffic is sent directly to the controller
(instead of being broadcasted to the network). This prevents adver-
saries from sniffing the control packets exchanged to establish those
bindings and allows the controller to perform several cross-layer
checks for validating the bindings when they are updated.
4 LABORATORY SETUP
Figure 3: Our hardware SDN network is composed of three
switches (i.e., Raspberry Pi 3 Model B) connected with each
other through a linear topology, a controller (i.e., Apple Mac-
Book Pro) and several hosts (not shown in the image) con-
nected to the end of the Ethernet cables. All inter-switch and
controller-switch links are 100 Mb/s.
In the next sections, we analyse the security of the state-of-the-
art topology defences and the topology core services in Floodlight.
For this, we have performed experiments in an emulated environ-
ment using Mininet 2.3.0 [43] and in a hardware SDN network. Our
hardware SDN network, shown in Figure 3, comprises three Rasp-
berry Pi 3 Model B [12] acting as OpenFlow switches, a controller
running on an Apple computer and several hosts that are imple-
mented either in other Raspberries or in a fixed Desktop PC using
Linux. To allow multiple SDN-enabled switches to communicate
with the controller, we used a traditional L2 Ethernet switch whose
only function is to forward the OpenFlow packets from the con-
troller to the switches (and vice versa). We chose to use the Open
vSwitch [13] version 2.5.5 LTS as a switch2, while our controller is
based on Floodlight [30]. The choice of Floodlight was motivated
by the fact that most existing topology defences are implemented
on it. The controller was installed on a 64-bit Ubuntu 14.04 VM
with two cores of 2,8 GHz Intel Core i7 and 8GB of RAM.
5 SECURITY ANALYSIS OF THE
TOPOLOGY DEFENCES
In this section, we evaluate the security and propose new attacks
against TopoGuard, TopoGuard+, SPV and SecureBinder.
5.1 TopoGuard/TopoGuard+
As TopoGuard+ integrates all the security mechanisms used by
TopoGuard, we refer to the joint solution as TopoGuard+. One
of the main design goals of TopoGuard+ is to preclude any link
fabrication attack regardless of its nature. Despite TopoGuard+
mitigating relay-based link fabrication attacks to a large extent, we
identified two new vulnerabilities in the mechanisms to track link
latencies as well as in the LLDP packet generation.
To exploit the weaknesses in the mechanisms to track link laten-
cies, we need to overload switches to increase the latency of the
inter-switch links. Intuitively, this could be a possible limitation of
our attacks since SDN-enabled hardware switches could incorpo-
rate mechanisms to defend against overloading by malicious hosts.
However, we want to stress that our findings and attacks can be
extrapolated to real-world SDN networks for several reasons. First,
SDN-enabled hardware switches contain simple CPUs, which re-
strict their capabilities for parsing and processing packets [10, 46].
Second, SDN-enabled hardware switches have a small flow table
space that can only accommodate from hundreds to a few thousand
flow rules [10, 20, 26]. For example, a widely used SDN-enabled
hardware switch like Pica8 can only support 8192 flow entries [1].
Likewise, the rate at which flow tables can be updated is limited. As
a result, SDN-enabled hardware switches can only handle 100-200
flow rule updates per second [9, 14, 20, 41, 47, 48]. The previous two