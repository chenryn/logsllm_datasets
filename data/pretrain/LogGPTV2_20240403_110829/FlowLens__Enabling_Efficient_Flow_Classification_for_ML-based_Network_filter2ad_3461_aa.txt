title:FlowLens: Enabling Efficient Flow Classification for ML-based Network
Security Applications
author:Diogo Barradas and
Nuno Santos and
Lu&apos;ıs Rodrigues and
Salvatore Signorello and
Fernando M. V. Ramos and
Andr&apos;e Madeira
FlowLens: Enabling Efﬁcient Flow Classiﬁcation for
ML-based Network Security Applications
Diogo Barradas, Nuno Santos, Lu´ıs Rodrigues, Salvatore Signorello†, Fernando M. V. Ramos, Andr´e Madeira
{diogo.barradas, nuno.m.santos, ler, fvramos, andre.madeira}@tecnico.ulisboa.pt
INESC-ID, Instituto Superior T´ecnico, Universidade de Lisboa
†LASIGE, Faculdade de Ciˆencias, Universidade de Lisboa
PI:EMAIL
Abstract—An  emerging  trend  in  network  security  consists  in 
the  adoption  of  programmable  switches  for  performing  various 
security tasks in large-scale, high-speed networks. However, since 
existing solutions are tailored to speciﬁc tasks, they cannot accom-
modate a growing variety of ML-based security applications, i.e., 
security-focused  tasks  that  perform  targeted  ﬂow  classiﬁcation 
based on packet size or inter-packet frequency distributions with 
the  help  of  supervised  machine  learning  algorithms.  We  present 
FlowLens,  a  system  that  leverages  programmable  switches  to 
efﬁciently support multi-purpose ML-based security applications. 
FlowLens  collects  features  of  packet  distributions  at  line  speed 
and  classiﬁes  ﬂows  directly  on  the  switches,  enabling  network 
operators  to  re-purpose  this  measurement  primitive  at  run-
time  to  serve  a  different  ﬂow  classiﬁcation  task.  To  cope  with 
the  resource  constraints  of  programmable  switches,  FlowLens 
computes  for  each  ﬂow  a  memory-efﬁcient  representation  of 
relevant  features,  named  “ﬂow  marker”.  Despite  its  small  size, 
a ﬂow marker contains enough information  to perform accurate 
ﬂow  classiﬁcation.  Since  ﬂow  markers  are  highly  customizable 
and  application-dependent,  FlowLens  can  automatically  param-
eterize  the  ﬂow  marker  generation  guided  by  a  multi-objective 
optimization  process  that  can  balance  their  size  and  accuracy. 
We evaluated our system in three usage scenarios: covert channel 
detection, website ﬁngerprinting, and botnet chatter detection. We 
ﬁnd  that  very  small  markers  enable  FlowLens  to  achieve  a  150 
fold increase in monitoring capacity for covert channel detection 
with  an  accuracy  drop  of  only  3%  when  compared  to  collecting 
full  packet  distributions.
I.
INTRODUCTION
Recently,  several  systems  have  been  proposed  for  tackling 
security  concerns  in  modern  high-speed  networks  [90,  33,  49, 
82].  By  leveraging  the  capabilities  offered  by  programmable 
switches,  these  systems  can  process  packets  at  line  speed 
directly  on  the  switch  hardware,  bringing  relevant  beneﬁts 
for  network  security,  such  as  decreased  reaction  times  to 
attacks,  avoidance  of  network  bottlenecks,  and  decreased  costs 
associated to equivalent centralized server-based infrastructures. 
So  far,  the  proposed  systems  target  very  speciﬁc  security-
driven  tasks.  These  tasks  include  the  ability  to  mitigate  DDoS 
attacks  [90],  enforce  context-aware  security  policies  [33], 
obfuscate  network  topologies  [49],  ﬁlter  spoofed  trafﬁc  [37], 
or  detect  data  exﬁltration  through  timing  covert  channels  [82].
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2021
21-25  February  2021, Virtual 
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24067
www.ndss-symposium.org
However, besides the speciﬁc tasks tackled by the previous
work, there is currently a lack of support for a new range of
security applications that resort to machine learning (ML) to
classify ﬂows in real time [92, 27]. This brand of applications
has become more relevant as a result of a global trend towards
encrypting all Internet trafﬁc [20, 58], which has rendered
deep-packet inspection (DPI) increasingly ineffective. As an
alternative to DPI, the use of ML-based techniques has proved
useful to classify ﬂows with high accuracy for a wide range
of scenarios, such as multimedia covert channel detection [7],
website ﬁngerprinting [40], botnet trafﬁc identiﬁcation [53],
malware tracking [2], IoT device behavioral analysis [59, 79],
or detection of DRM-protected streaming [26, 68, 66].
Most of these ML-based applications rely on supervised
machine learning algorithms [7, 40, 68, 53] that need to collect
ﬂow features such as packet length and/or inter-packet time
frequency distributions. However, both the set of features and
ML algorithms used are highly application-dependent. As such,
a general service to enable the implementation of ML-based
security applications must be versatile enough to accommodate
application-speciﬁc requirements without impairing its ability
to produce accurate classiﬁcation results. In addition, it must
efﬁciently use the limited switch resources to maximize the
number of ﬂows that can be probed, scale to large networks
comprising numerous switches,
introduce minimal switch
downtime caused by upgrades of switch programs, and require
low maintenance effort.
We present FlowLens, a system that enables efﬁcient ﬂow
classiﬁcation for multi-purpose ML-based security applications.
At the heart of our system lies a set of software components
that run on the network switches’ data plane and control plane.
These components are responsible for collecting compact, but
meaningful, features of the ﬂows going past the data plane, and
for running the ML-based algorithms responsible for classifying
the ﬂows on the control plane in real time. By performing both
these tasks on the switches in a fully decentralized fashion,
FlowLens does not depend on a centralized service that could
introduce bottlenecks for operations in the critical path. To
deliver the best performance, these software components must
be ﬁne-tuned for each speciﬁc ML-based security application.
FlowLens includes the mechanisms to generate (and upload to
the switches) application-dependent conﬁgurations that strike
a good balance between classiﬁcation accuracy and switch
resource utilization efﬁciency. Because these conﬁgurations
can be automatically generated, the maintenance effort of our
system is greatly reduced.
A key challenge in fully ofﬂoading ML-based ﬂow analysis
onto the switches is tied to the hardware and programming
restrictions of modern programmable switches. Ideally, we
would like to collect the full packet length and inter-packet
arrival time frequency distributions for every ﬂow traveling
through the switches. This approach would allow us to collect
full per-ﬂow information (on the data plane) which different
applications could then process in order to extract relevant
features and running speciﬁc ML classiﬁers (on the control
plane). However, given that the amount of stateful switch
memory is very limited, an information-lossless scheme for
collecting ﬂow data would considerably reduce the coverage of
our system, i.e., the number of simultaneous ﬂows that could
be probed. In alternative, one could employ a lossfull scheme
where the amount of dedicated memory allocated per ﬂow
is reduced thereby increasing ﬂow coverage. Such a scheme,
however, must be such that (1) the collected information does
not deteriorate the accuracy of ﬂow classiﬁcation, (2) it can be
implemented with a small set of basic hardware instructions
and within few compute cycles as imposed by the switch, and
(3) it precludes the need to frequently reprogram the switch as
it would cause switch downtime in the order of seconds.
To address this challenge, we make two core technical
contributions. First, we devised a new compact representation
of packet length and inter-time packet arrival distributions
which is small yet provides enough information to perform
accurate application-speciﬁc trafﬁc classiﬁcation. We name such
representations ﬂow markers. We then developed a primitive
named Flow Marker Accumulator (FMA) which generates ﬂow
markers while depending on simple and efﬁcient operations
that can be implemented on modern programmable switches.
The FMA consists of a parameterizable data structure deployed
on the data plane pipeline such that, for each incoming packet,
it performs two simple operations, namely quantization and
truncation, which adjust the granularity of the ﬂow’s frequency
distribution intervals in bins (quantization), and select the bins
considered to be the most relevant features for ﬂow classiﬁcation
(truncation). As shown in Figure 1, the set of resulting bins for
each ﬂow constitutes the respective ﬂow marker, which will
then be processed by the classiﬁcation algorithm.
Second, we developed an automatic proﬁler to ﬁnd adequate
quantization and truncation parameters of the FMA for a given
application. Because there is a large space of conﬁgurations that
present different trade-offs between switch memory savings
and ﬂow classiﬁcation accuracy, manually setting up these
parameters for each application would both be cumbersome and
render sub-optimal results. Our proﬁler relies on well-known
Bayesian optimization techniques [24] for ﬁnding suitable
conﬁgurations by iteratively testing only a small subset of
the possible FMA conﬁgurations. It can be tuned to ﬁnd
parameterizations according to different criteria, including (a)
the maximization of a user-deﬁned trade-off between space-
efﬁciency and accuracy, (b) the smallest marker able to achieve a
classiﬁcation accuracy above a given threshold, or (c) the marker
that maximizes the accuracy given some space constraint.
We have implemented FlowLens on a Barefoot/Intel Toﬁno
programmable switch and evaluated our system in three use case
applications: covert channel detection, website ﬁngerprinting,
and botnet detection. When comparing the classiﬁcation scores
achieved by FlowLens against those computed over raw packet
2
Figure 1. Histograms of packet size distribution for a single ﬂow. A ﬂow
consists of a stream of packets identiﬁed by the same 5-tuple of TCP/IP header
ﬁelds, at increasing degrees of compactness: a) the raw packet size distribution;
b) the quantized representation, where packet sizes are aggregated into bins of
size 24 bytes; c) the ﬂow marker generated through truncation of the quantized
representation which comprises the most relevant 10 bins for the detection of
covert channels mounted through multimedia protocol tunneling.
length distributions, FlowLens offers similar accuracy scores
while using signiﬁcantly less memory, e.g., covert channels
can be detected with at most 3% loss in accuracy using only
a 20-byte memory footprint per ﬂow. When compared with
related methods for capturing compressed packet frequency
distributions [22, 55], FlowLens consistently outperforms them
in terms of the classiﬁcation accuracy under similar memory
restrictions. FlowLens also achieves considerable bandwidth
savings when compared to network telemetry approaches [74]
that rely on a server infrastructure responsible for ﬂow analysis.
II. MOTIVATION AND DESIGN GOALS
This section motivates our work by characterizing a set of
emerging ML-based security applications and discussing the
technical constraints of modern programmable switches. It then
provides an overview of FlowLens’s design goals.
A. ML-based Network Security Applications
In recent years, generalized interest has grown in detecting
atypical network ﬂows using ML classiﬁcation algorithms [58].
To deliver accurate ﬂow classiﬁcation results, these algorithms
depend on a range of features that require the collection of
the packet length/inter-packet timing frequency distributions.
Below, we present three examples of applications in the realm of
network security that rely on the analysis of such distributions
for performing trafﬁc classiﬁcation. These examples are chosen
to showcase the versatility of FlowLens in accommodating
different classiﬁcation algorithms. We will further use them to
validate the classiﬁers’ accuracy when deployed on FlowLens.
Covert channel detection: Capturing packet distributions
makes it possible to detect covert channels, thereby providing
a valuable asset for cyberforensic investigations. To achieve
stealthy data transmissions, advanced covert channel tools tend
to obfuscate covert ﬂows such that their high-level features (e.g.
packet lengths) resemble those of regular ﬂows [81, 6, 38, 47].
However, recent work [7] has shown that these tools can be
defeated or severely weakened due to subtle differences in
packet distributions which can be detected by ML techniques.
Website ﬁngerprinting: Privacy-enhancing technologies like
OpenSSL or OpenVPN allow users to hide the destination
address behind a proxy and the content of website visits from
external observers through the use of encryption. However,
it may still be possible to identify which sites they access
by collecting the ﬂows’ packet length distributions [40, 29]
and feeding them to ML classiﬁcation algorithms for website
0250500750100012501500a) Raw Packet Size Bins100101102103Packet Count0102030405060708090b) Quantized Bins (QL=4)100101102103Packet Count6789101112135459c) Truncated Bins (Top-10)101102103Packet Countﬁngerprinting purposes. This technique may help authorities
respond against individuals engaged in illegal activities.
Botnet chatter detection: Botnets [35] can jeopardize the se-
curity of multiple organizations, emerging as a highly proﬁtable
activity for malicious actors [63]. Unfortunately, due to their
decentralized P2P architectures and stealthy communication
patterns, botnets have become incredibly resistant to takedown
attempts. Nevertheless, state-of-the-art approaches to analyzing
botnet trafﬁc are able to identify the presence of bots through
the combined analysis of packet lengths and inter-packet timing
distributions of network hosts [48, 53]. Being able to employ
these techniques can help network administrators prevent and
mitigate botnet threats to an organization’s network.
B. Design Goals
In this work, our goal is to use programmable switches
to collect packet frequency distributions and provide a multi-
purpose ﬂow classiﬁcation platform for implementing a variety
of ML-based security applications. By using our solution, a
network operator will be able to scan local trafﬁc in near real-
time and look for speciﬁc ﬂows that match a set of application-
speciﬁc trafﬁc patterns, such as those presented in Section II-A.
In summary, we are driven by the following design goals:
Scalability: We aim at monitoring ﬂows in very large and
fast networks (at the Tbps scale), comprised of many switches,
while reducing the costs of the network telemetry infrastructure.
To this end, we aim to avoid relying either on edge-based
solutions, which capture the trafﬁc through middleboxes [61], or
solutions that collect packet features on the switches but ofﬂoad
them for further processing and classiﬁcation on dedicated
servers [73, 74]. Reducing the bandwidth consumed with the
ofﬂoading of telemetry data is also a crucial point as the amount
of collected data grows with the increasingly high link speeds
and becomes substantial for large scale networks [87].
Accuracy: We aim at collecting a compact representation of