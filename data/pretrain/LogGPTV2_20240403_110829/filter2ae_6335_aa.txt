# 概述
DA145x软件平台利用了由Riviera Waves许可的小型高效实时内核，内核提供以下功能：
  1. 任务创建和状态转换。
  2. 任务之间的消息交换。
  3. 计时器管理。
  4. 动态内存分配。
  5. BLE事件的调度和处理
# 基础数据结构
本节主要分析Riviera Waves系统中常用的一些数据结构
## co_list链表实现
### 数据结构
co_list就是一个单向链表，DA145x代码里面会使用co_list来存放各种数据，比如消息数据.
核心的数据结构如下
    //链表中的节点
    struct co_list_hdr
    {
        /// 指向下一个链表节点
        struct co_list_hdr *next;
    };
    /// 链表头的结构
    struct co_list
    {
        // 链表头节点
        struct co_list_hdr *first;
        // 链表尾节点
        struct co_list_hdr *last;
        // 链表中的节点个数
        uint32_t cnt;
        // 链表中最多节点数
        uint32_t maxcnt;
        // 链表中最少节点数
        uint32_t mincnt;
    };
co_list表示链表头，存放了整个链表的一些元数据，链表节点为co_list_hdr，应用程序使用co_list时会在其特定结构体内部嵌入co_list_hdr和co_list。
### 链表初始化
co_list_init用于初始化一个链表
    void __fastcall co_list_init(struct co_list *list)
    {
      list->first = 0;
      list->last = 0;
      list->cnt = 0;
      list->maxcnt = 0;
      list->mincnt = -1;
    }
### 插入节点
`co_list_push_back`用于将节点`list_hdr`插入到链表`list`的尾部
    void __fastcall co_list_push_back(struct co_list *list, struct co_list_hdr *list_hdr)
    {
      uint32_t cnt; // r1
      if ( list->first )
      {
        list->last->next = list_hdr;
      }
      else
      {
        list->first = list_hdr;
      }
      list->last = list_hdr;
      list_hdr->next = 0;
      cnt = list->cnt + 1;
      list->cnt = cnt;
      if ( list->maxcnt maxcnt = cnt;
      }
    }
  1. 如果`list->first`为空，就把`list_hdr`放到链表头`list->first`，否则就把该list_hdr放到最后一个节点的末尾
  2. 最后更新`list->last`和`list->cnt`
`co_list_push_front`用于将节点`list_hdr`插入到链表`list`的头部
    void __fastcall co_list_push_front(struct co_list *list, struct co_list_hdr *list_hdr)
    {
      co_list_hdr *v2; // r2
      uint32_t v3; // r1
      v2 = list->first;
      if ( !list->first )
      {
        list->last = list_hdr;
      }
      list_hdr->next = v2;
      list->first = list_hdr;
      v3 = list->cnt + 1;
      list->cnt = v3;
      if ( list->maxcnt maxcnt = v3;
      }
    }
逻辑类似，就是把`list_hdr`放到链表`list->first`，然后修正`list`中相关的字段
节点出链表
co_list_pop_front将头节点出链表
    struct co_list_hdr *__fastcall co_list_pop_front(struct co_list *list)
    {
      struct co_list_hdr *item; // r1
      co_list_hdr *v2; // r2
      uint32_t v3; // r2
      item = list->first;
      if ( list->first )
      {
        v2 = item->next;
        list->first = item->next;
        if ( !v2 )
        {
          list->last = 0;
        }
        v3 = list->cnt - 1;
        list->cnt = v3;
        if ( list->mincnt > v3 )
        {
          list->mincnt = v3;
        }
      }
      return item;
    }
就是把`list->first`的元素取出，然后修改list的相关信息。
### 取出节点
`co_list_extract`函数用于在`list`中取出从`list_hdr`开始的`nb_following`个节点。
    bool __fastcall co_list_extract(struct co_list *list, struct co_list_hdr *list_hdr, int nb_following)
    {
      bool has_found; // r5
      co_list_hdr *pre; // r4
      co_list_hdr *cur; // r3
      co_list_hdr *new_next; // r1
      uint32_t v7; // r1
      has_found = 0;
      pre = 0;
      for ( cur = list->first; cur; cur = cur->next )
      {
        if ( cur == list_hdr )                      // 首先找到 list_hdr 节点
        {
          has_found = 1;
          while ( nb_following > 0 )                // 从list_hdr开始取出nb_following个节点
          {
            cur = cur->next;
            --nb_following;  // 如果 nb_following 超过链表长度，就会空指针...
            --list->cnt;
          }
          new_next = cur->next;
          if ( pre )                                // list_hdr开始的nb_following个节点出链表
          {
            pre->next = new_next;
          }
          else
          {
            list->first = new_next;
          }
          if ( list->last == cur )
          {
            list->last = pre;
          }
          v7 = list->cnt - 1;
          list->cnt = v7;
          if ( list->mincnt > v7 )
          {
            list->mincnt = v7;
          }
          return has_found;
        }
        pre = cur;
      }
      return has_found;
    }
主要逻辑就是找到list_hdr节点cur，然后从cur开始取出nb_following个节点。
### 查找节点
co_list_find就是遍历链表找到list_hdr节点
    bool __fastcall co_list_find(struct co_list *list, struct co_list_hdr *list_hdr)
    {
      do
      {
        list = list->first;
      }
      while ( list != list_hdr && list );
      return list == list_hdr;
    }
### 链表合并
co_list_merge把两个链表合并为一个链表，实际就是把`list2`的元素挂在`list1`的末尾
    void __fastcall co_list_merge(struct co_list *list1, struct co_list *list2)
    {
      list1->last->next = list2->first;
      list1->last = list2->last;
      list2->first = 0;
      list1->cnt += list2->cnt;
      list2->cnt = 0;
    }
# 事件调度机制
Riviera Waves中实现了事件调度机制，一个任务可以在处理完事情后，通知特定的事件处理函数去进行具体的事物处理。
## 相关API实现
本节主要分析事件调度相关函数的实现
### ke_event_init
该函数主要就是初始化了一个全局变量
    void ke_event_init()
    {
      memset(p_ke_event_table, 0, sizeof(ke_event_table_struct));
    }
p_ke_event_table指向一个全局的 **事件调度管理结构** ，经过逆向分析其结构体定义如下
    struct ke_event_table_struct
    {
      int pending_event_bits;
      int callback_list[6];
    };
其中pending_event_bits其中的一些bit用于表示特定的事件是否已经处于pending状态等待系统处理。
callback_list表示每个事件的处理函数的地址
### ke_event_callback_set
该函数实际就是向系统注册 event_type 事件对应的处理函数， event_type最大为5，及系统共支持6个事件。
    uint8_t __fastcall ke_event_callback_set(uint8_t event_type, void (*p_callback)(void))
    {
      unsigned int idx; // r2
      uint8_t result; // r0
      idx = event_type;
      result = 3;
      if ( idx callback_list[idx] = p_callback;
        result = 0;
      }
      return result;
    }
### ke_event_schedule
`ke_event_schedule`会检查`p_ke_event_table->pending_event_bits`中所有事件的状态，如果事件对应的`bit`为1，就调用对应的回调函数，关键代码如下
    unsigned int ke_event_schedule()
    {
      v0 = p_ke_event_table;
      while ( 1 )  // 检查所有事件的状态
      {
        result = v0->pending_event_bits;
        // 根据pending_event_bits找到对应的回调函数
        event_callback = *(v0->callback_list + ((4 * (31 - v3)) & 0x3FF));
        if ( event_callback )
        {
          event_callback(); // 调用事件的回调函数
        }
`ke_event_schedule`会在系统运行的特定时机被调用，比如定时器或者某些任务主动调用来让系统处理事件。
此外该函数不会设置事件对应的`bit`，所以在事件的处理函数，如果事件得到处理要调用ke_event_clear设置对应事件的bit为0.
### ke_event_clear
设置某个事件的状态位为0.
    bool __fastcall ke_event_clear(unsigned int event)
    {
      unsigned int v1; // r1
      _BOOL4 result; // r0
      v1 = __get_CPSR();
      _R2 = 1;
      __asm { MSR.W           PRIMASK, R2 }
      if ( event pending_event_bits &= ~(1 << event);
      }
      result = v1 != 0;
      __asm { MSR.W           PRIMASK, R0 }
      return result;
    }
### ke_event_set
设置某个事件的状态位为1，即通知系统该事件需要处理，ke_event_schedule函数中会调用事件对应的回调函数来处理事件。
    bool __fastcall ke_event_set(unsigned int a1)