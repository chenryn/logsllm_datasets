### 优化后的文本

#### 图11：参与排序的路由器百分比（Rocketfuel拓扑）
在flat2hier场景下，Rocketfuel拓扑中参与排序的路由器百分比。其他场景的结果类似。

#### 图12：计算排序所需的时间（Rocketfuel拓扑）
在flat2hier场景下，计算排序所需的时间。其他场景的结果类似。

环路问题主要涉及那些不参与骨干网的路由器。这些路由器通常位于网络边缘（如BGP边界路由器或MPLS PE），并且在网络中吸引大部分流量。因此，计算一个它们不会参与环路的排序非常重要。迁移环路的数量取决于拓扑结构，可以通过我们的设计方法进行影响。然而，结果表明，在任意网络中随机顺序迁移路由器是不可行的。此外，对于全球网络的迁移，最好按区域进行，即在迁移其他区域的路由器之前，先迁移同一区域内的所有路由器（例如，一个大陆）。我们观察到这是可行的，因为在Rocketfuel和实际网络拓扑中，所有出现的环路都发生在同一区域内的路由器之间，或者发生在骨干路由器与外围区域的路由器之间。因此，通常可以计算出按区域的排序。这些考虑进一步推动了我们寻找无环路的路由器迁移排序的努力。

在我们分析的实际ISP拓扑中，结果略有不同。对于两个分层的ISP，在所考虑的场景中几乎没有或只有少量迁移环路出现。这主要是由于层次结构设计合理。我们在第8节中讨论了一些简化IGP迁移的设计指南。另一方面，从一个糟糕的设计迁移到一个良好的设计时，可能会出现大量问题。在hier2flat场景中，tier1.A中可能出现超过2000个环路，涉及多达10个路由器。这种大量的环路主要是由于我们构建层次结构的方式造成的。

作为第二组实验，我们在Rocketfuel拓扑上运行了排序算法。以下结果展示的是flat2hier场景，但其他场景的结果和考虑类似。图11显示了每个拓扑中需要按特定顺序迁移的路由器百分比（这意味着其他路由器可以按任意顺序迁移）。如果某个点缺失，则表示相应的算法无法为该拓扑找到无环路的排序。枚举算法总能在所有情况下找到无环路的排序。在最坏的情况下，计算出的排序涉及网络中超过20%的路由器。我们认为，为如此多的路由器找到排序约束在实际操作中是不切实际的。这突显了我们算法的重要性。路由树启发式算法在11个拓扑中的9个找到了无环路排序。图11还强调了依赖贪心子程序的好处，因为没有它时，启发式算法只能解决6个拓扑的问题。

图12绘制了每个算法在50次独立运行中计算时间的中位数。对于环枚举算法，标准偏差始终小于40，除了拓扑1239的两个情况，其标准偏差约为450。此外，路由树启发式算法的标准偏差始终小于25。尽管环枚举算法是正确且完整的，但对于大型拓扑来说效率较低。启发式算法总是快一个数量级。在图12中，环枚举算法所花费时间的绝对值较低，这可以由Rocketfuel拓扑的相对较小规模来解释。然而，对于tier1.A拓扑，环枚举算法耗时超过11小时才能完成。为了进一步评估完整算法的性能退化，我们扩大了tier1.B和tier2的拓扑规模。具体操作是多次复制一个外围区域的结构，并将这些额外的区域附加到网络中，以达到与tier1.A相似的规模。在这些实验中，我们发现即使路由器可以按任意顺序迁移，环枚举算法也耗时数小时，而启发式算法始终耗时不到1.5分钟。通常，排序算法所花费的时间在我们的方法中并不是关键因素，因为可以在实际迁移前预先计算出无环路的路由器迁移顺序。然而，时间效率对于支持高级功能（如快速响应迁移过程中可能发生的故障）非常重要（见第5.2节）。

### 7.3 配置系统
我们通过一个案例研究评估了配置系统主要组件的性能。在这个案例研究中，我们对泛欧研究网络Geant进行了flat2hier迁移，使用了一个主要路由器供应商的操作系统镜像进行仿真。具体来说，我们模拟了从扁平IS-IS配置到分层OSPF的迁移。Geant的拓扑结构是公开的[32]，包含36个路由器和53条链路。为了案例研究，我们根据路由器的地理位置及其互连关系人为地构建了区域[33]。除了骨干网（12个路由器）外，我们定义了三个外围区域：西南地区（6个路由器）、东北地区（11个路由器）和东南地区（17个路由器）。我们将IGP链路权重设置为与链路带宽成反比。通过执行环枚举算法（见第5.1节），我们发现该拓扑中可能有8个不同的环路指向5个不同的目的地。

我们进行了两次实验。在第一次实验中，我们依赖于环枚举算法计算的排序；在第二次实验中，我们采用了随机顺序。为了获得统计上相关的结果，我们分别重复了每次实验多次。