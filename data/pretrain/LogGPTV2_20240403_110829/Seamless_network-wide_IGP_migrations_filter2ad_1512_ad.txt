2
1
y
t
i
c
,
9
3
2
1
t
n
o
c
,
9
3
2
1
y
t
i
c
,
5
5
7
1
t
n
o
c
,
5
5
7
1
y
t
i
c
,
7
5
2
3
t
n
o
c
,
7
5
2
3
y
t
i
c
,
7
6
9
3
t
n
o
c
,
7
6
9
3
y
t
i
c
,
1
6
4
6
t
n
o
c
,
1
6
4
6
y
t
i
c
,
7
6
9
3
t
n
o
c
,
7
6
9
3
y
t
i
c
,
5
5
7
1
t
n
o
c
,
5
5
7
1
y
t
i
c
,
1
2
2
1
y
t
i
c
,
1
6
4
6
t
n
o
c
,
1
6
4
6
y
t
i
c
,
7
5
2
3
t
n
o
c
,
7
5
2
3
y
t
i
c
,
9
3
2
1
t
n
o
c
,
9
3
2
1
0.01
Figure 11: Percentage of routers involved in the or-
dering in ﬂat2hier (Rocketfuel topologies). Results
for other scenarios are similar.
Figure 12: Time taken to compute an ordering in
ﬂat2hier (Rocketfuel topologies). Results for other
scenarios are similar.
ity of loops concerns traﬃc destined to routers that do not
participate in the backbone. These routers are at the bor-
der of the network (e.g., BGP border routers or MPLS PEs)
and normally attract most of the traﬃc in ISP networks. It
is, thus, important to compute an ordering in which they
are not involved in loops. The number of migration loops
is topology dependent, hence it can be inﬂuenced by our
design approach. However, these results clearly show that
migrating routers in a random order is not a viable option in
arbitrary networks. Additionally, it is desirable that migra-
tions of world-wide networks be carried out on a per-zone
basis, that is, migrating all the routers in the same zone (e.g.,
a continent) before routers in other zones. We observe that
this is indeed possible since all the loops that occur, in both
Rocketfuel and real-world topologies, arise between routers
in the same zone or between backbone routers and routers
in a peripheral zone. Thus, it is often possible to compute
per-zone orderings. These considerations further motivate
our eﬀort to ﬁnd a router migration ordering which is guar-
anteed to be loop-free. We found slightly diﬀerent results
on the real ISP topologies we analyzed. For the two hier-
archical ISPs, none or few migration loops can arise in the
considered scenarios. This is mainly due to a sensible design
of the hierarchy. We discuss simple design guidelines that
ease IGP migrations in Section 8. On the other hand, we
found that huge number of problems could arise in a mi-
gration from a poor design to a neat one. In the hier2f lat
scenario, more than 2000 loops, involving up to 10 routers,
might arise within the tier1.A. Such a large number of loops
is mainly a consequence of the way we built the hierarchy.
As a second group of experiments, we ran the ordering
algorithms on the Rocketfuel topologies. In the following,
we present results for the f lat2hier scenario but similar re-
sults and considerations hold for the other scenarios. Fig. 11
shows for each topology the percentage of routers that need
to be migrated in a speciﬁc order according to each algo-
rithm (implying that other routers can be migrated in any
order). When a point is missing, it means that the corre-
sponding algorithm was not able to ﬁnd a loop-free ordering
for the topology. The enumeration algorithm was always
able to ﬁnd a loop-free ordering in all situations.
In the
worst case, the computed ordering involves more than 20%
of the routers in the network. We believe that ﬁnding order-
ing constraints for such a number of routers is not practical
at a glance. This stresses the importance of our algorithms.
The Routing Trees Heuristic, instead, found a loop-free or-
dering on 9 topologies out of 11. Fig. 11 also highlights the
gain of relying on the greedy subprocedure, as the heuristic
could ﬁnd a solution for only 6 topologies without it.
Fig. 12 plots the median of the computation time taken
by each algorithm over 50 separated runs. Standard devia-
tion is always under 40 for the loop enumeration algorithm,
except for the two cases corresponding to topology 1239. In
that cases, the standard deviation is around 450. Moreover,
the standard deviation of the time taken by the Routing
Trees Heuristic is always less than 25. Even if correct and
complete, the Loop Enumeration Algorithm is ineﬃcient,
especially for large topologies. The heuristic is always one
order of magnitude faster. In Fig. 12, the low absolute value
of the time taken by the Loop Enumeration Algorithm can
be explained by the relatively small size of the Rocketfuel
topologies. Nevertheless, for the tier1.A topology, the Loop
Enumeration Algorithm took more than 11 hours to com-
plete. To further evaluate the performance degradation of
the complete algorithm, we enlarged tier1.B’s and tier2’s
topologies. The operation consisted in replicating multiple
times the structure of one peripheral zone, and attaching
these additional zones to the network in order to reach a
size similar to tier1.A. In such experiments, we found that
the Loop Enumeration Algorithm took several hours even if
routers can be migrated in any order, while the heuristics
always took less than 1.5 minutes. Typically, the time taken
by the ordering algorithm is not a critical factor in our ap-
proach, since a loop-free router migration ordering can be
computed before actually performing the migration. How-
ever, time eﬃciency is highly important to support advanced
abilities like promptly reacting to failures that could happen
during the migration (see Section 5.2).
7.3 Provisioning System
We evaluated the performance of the main components of
our provisioning system by means of a case study. In the
case study, we performed a f lat2hier migration of Geant,
the pan-european research network, that we emulated by
322i
g
n
p
d
e
l
i
a
f
f
o
#
median
95%
5%
random order
computed order
0
0
0
1
0
0
8
0
0
6
0
0
4
0
0
2
0
0
5
10
15
20
25
30
35
migration steps
Figure 13: Our system guarantees that no packet is
lost during migration while long-lasting connectivity
disruptions can happen with a naive approach.
using a major router vendor routing operative system im-
age. In particular, we simulated the migration from a ﬂat
IS-IS conﬁguration to a hierarchical OSPF. Geant’s topol-
ogy is publicly available [32]. It is composed of 36 routers
and 53 links. For the case study, we artiﬁcially built zones
on the basis of the geographical location of the routers and
their interconnections [33].
In addition to the backbone
(12 routers), we deﬁned three peripheral zones: the south
west area (6 routers), the north east area (11 routers) and
the south east area (17 routers). We deﬁned the IGP link
weights to be inversely proportional to the bandwidth of
the links. By executing the Loop Enumeration Algorithm
(see Section 5.1), we found that 8 diﬀerent loops towards 5
diﬀerent destinations could arise on that topology.
We ran two experiments. In the ﬁrst experiment, we relied
on the ordering computed by the Loop Enumeration Algo-
rithm, while in the second we adopted a random order. In
order to have statistically relevant data, we repeated each