mechanism can provide complete mediation over attempted accesses
at arbitrarily fine granularities, down to the memory references
contained in individual lines of code. It is tamper proof, meaning
that the reference monitoring cannot be disabled during operation.
Due to its small size, the reference monitor has been verified to
operate correctly. Critically, this reference monitor is able to op-
erate securely and correctly without the use of hardware-based
protection – that is, it executes in the same protection ring [63]
as the tasks that it mediates – allowing it to restrict the privileges
of other Ring 0 code. However, while the mechanism for privilege
separation is assumed to be present, the optimal security policy for
minimizing the privilege of the attacker is unknown.
4 DESIGN GOALS
The aim of µSCOPE is to systematically analyze fine-grained, whole-
system privileges within monolithic trust environments. Specifi-
cally, it aims to enable (1) comprehensive privilege analysis and
policy derivation, (2) automated instead of manual analysis, and
(3) exploration of the continuum of privilege-performance points
rather than a handful of single points in the space.
4.1 Comprehensive Privilege Coverage
Prior work has focused on manual or semi-automated compartmen-
talization by experts [12, 24, 29, 37, 47, 58, 67, 72]. In general, these
2 The recent Project Zero iOS zero click radio exploit is an example of such a vulnera-
bility that allows circumvention of all mitigations in a monolithic kernel [10].
Figure 2: The (simplified) struct cred data structure used by the Linux
kernel for task access control and privilege management.
privileges that user space subjects (e.g., processes, users) have to
system resources (e.g., tasks, files, sockets) [20]. As such, malicious
manipulation of this structure is a common vector for privilege
escalation. For example, a recent vulnerability can be exploited to
change the UID field of a user space process’ credential structure
to that of root, thus gaining root privilege and access to all system
resources [60].
In a monolithic kernel, the attack surface for struct cred alone
is enormous: this field could be modified by any of the 104,240
potentially unsafe write instructions in the kernel; i.e., any bug
that allows an attacker to control one of the more than a hundred
thousand possibly unsafe write instructions could become a vector
to manipulate its contents. However, as our analysis identifies, only
113 write instructions from 31 functions should legitimately have
access to struct cred objects. The other 104,127 write instructions
(99.89%) hold excess privilege that reduce the security of the entire
system. In other words, this privilege escalation attack is made
possible because a compromised kernel component has privileges
beyond those required to do its job.
2.1 Our Approach: Quantifying Privilege
This example illustrates a concrete way to quantify privilege and
overprivilege: we can count the number of instructions that strictly
require a given privilege, then compare that count to the number
that the system actually allows. Further, if we were to divide the
kernel into compartments such that only writes within a compart-
ment with legitimate need could access struct cred objects, we
could quantify the reduction in writes (privileges) that came from
that particular compartmentalization. Reducing the number of in-
structions with privilege to write to struct cred makes it harder
to find a vulnerability that can be exploited to corrupt struct cred,
reducing its attack surface. If there is, on average, one exploitable
security vulnerability in the code every 1,000 writes [9, 31, 51], a
system with a hundred thousand privileged write instructions has
a 1 − (1 − 10−3)105=1 − 3.5 × 10−46 ≈ 100% chance of having an
exploitable vulnerability, while a compartment with only 100 such
write instructions has only a 1 − (1 − 10−3)102
Of course, even if we limit the code that can directly write into
struct cred objects, an attacker could launch a confused deputy
attack and invoke one of the 31 authorized functions in an attempt
to manipulate that function into making the desired change. Since
Linux is a monolithic kernel, any of the 51,258 other functions could
conceivably be manipulated to call one of those 31 authorized func-
tions. However, there are actually only 26 “secondary” functions
with legitimate need to call those struct cred-authorized functions.
Allowing the other 51,222 functions access is, again, overprivilege.
= 9.5% chance.
298RAID ’21, October 6–8, 2021, San Sebastian, Spain
Roessler and Dautenhahn, et al.
approaches selectively (1) sandbox buggy components (e.g., parsers)
or (2) protect a limited subset of sensitive data (code-pointers or
secret keys). However, considering the capabilities and objectives
of our attacker, such an approach is not sufficient because it only
restricts the privileges of one or two critical components. Our so-
lution must be able to define a privilege policy that assures that
the attacker’s privileges will be always be restricted, even at an
arbitrary and unknown entry point into the system.
4.2 Automated Analysis
Today’s state-of-the-art in privilege reduction is based on manual,
expert analysis to identify what excess privileges the system should
remove. As code bases grow in age and complexity, the demand for
experts outstrips their availability and capability. For the largest of
code bases, many of which are decades old, no single person is an
expert on the whole system and all of its interactions. For example,
today’s Linux kernel contains 28 million Lines-of-Code, contributed
by over 19,000 developers [1], leaving it susceptible to a wide range
of vulnerabilities [11]. Accepting that experts may not be available
and may be fallible, our solution must take an automated approach
to privilege analysis.
4.3 Privilege Continuum
Between a fully-separated, least-privilege design and a monolithic
design, there is a vast set of possible decompositions at various
points in the security vs. performance tradeoff space. With current
manual and semi-automated compartmentalization techniques, it
is prohibitively expensive to explore even a fraction of this space
because each point requires (1) expert analysis and (2) significant
engineering to evaluate the viability of the choice. Furthermore, a
common concern is that privilege separation is not viable at fine
granularities due to performance costs, which deters practitioners
and researchers alike from even considering such options. Instead,
our solution must systematically explore a wide range of points in
the compartmentalization continuum. The tools we develop must
be flexible and easily integrate expert domain-specific knowledge,
to the extent available, through parameter adjustment or by placing
constraints on the search space.
5 THE µSCOPE METHODOLOGY
In this section, we present the generic µSCOPE methodology. We
show its concrete application to Linux in Sec. 6.
5.1 Privilege Model and CAPMAP
The µSCOPE privilege model is based on mapping software com-
ponents into subject and object domains in order to track their
access privileges at runtime. In object-oriented languages, innate
definitions for subject and object emerge based on the language’s
structure. However, such definitions are not apparent in procedural
languages such as C. Moreover; our objective is to evaluate a contin-
uum of privilege separation tradeoffs, some of which may conflict
with the object-oriented abstraction. Instead, we define a privilege
as an ISA-level operation (memory read, memory write, function
call, return, and memory deallocation) that may be performed by a
subject (instruction) on an object (virtual address region of mem-
ory). We choose this low-level representation due to its generality;
all access privileges can be reduced to instruction- and byte-level,
regardless of the program language.
Def. 1 (Privilege). A privilege allows an instruction, i ∈ I, to
perform a low-level operation, op ∈ Ops, on object, o ∈ O. I is the set
of all instructions, O the set of all objects, and Ops, the set of low-level
operations.
This instruction-level privilege separation represents the finest-
grained separation that we identify in µSCOPE (Sec. 5.3.1). For this
finest-grained definition, the machine instructions I form our sub-
ject domain. For allocations and frees, we use the instruction that
performs the call to the allocator/free routine as the identifier for
that subject. Objects are likewise labeled by the instruction that
calls the allocator routine. However, each instruction is also an ob-
ject since it can be called (and potentially written, in case of mutable
code), allowing us to capture privileges needed to make individual
calls and returns. Aside from dynamically loaded or generated code
(considered in Sec. 11), identifying dynamically allocated objects
with allocating instructions means the set of object classes are lim-
ited to the set of statically allocated objects and statically known
allocation instructions. Therefore, the set of instructions and ob-
jects can be determined at compile time and do not change during
execution.
For context sensitive privilege analysis, it is possible to extend
the subject tuple to include separation contexts, such as the call
chain or kernel entry point. For practical reasons (e.g., state explo-
sion in the dynamic tracing system) we leave such exploration to
future work. Note, however, that the metrics presented here can eas-
ily accommodate context sensitivity. Our algorithmic approaches
(Sec. 6.2) can also handle context-sensitive subjects as is, but further
specialization may be needed to exploit context to its fullest extent.
Next, we define a privilege predicate priv(i, o, op) that indicates
if instruction i is allowed to perform op op on object o. Different def-
initions of the function priv(i, o, op) represent candidate policies on
the continuum of the privilege separation design space. priv(i, o, op)
is an embodiment of Lampson’s access matrix [41]. This simple
operation matches the minimal conditions that Lampson identifies
for isolated execution, selected because of its generality expressing
privileges and its ability to easily map to compiler IR or assembly
level operations.
Def. 2 (Privilege Set). The Privilege Set (PS) is the set of all
privileges for which priv(i, o, op) is true for a program.
A given PS can be modeled as a graph that encodes the whole-
system privileges of the associated program. The instructions i ∈ I,
and objects o ∈ O, are vertices in the graph, while priv(i, o, op)
defines whether or not there is an edge of type op ∈ Ops between
the nodes i and o. Alternately, PS can be modeled as an access matrix
where rows are instructions and objects are rows and columns while
op will appear in cell(i, o) if priv(i, o, op) is true.
Given the notion of privilege sets, it would clearly be valuable to
identify PSmin, the minimum privilege set needed in order for the
program to run. Our system will derive PSmin dynamically through
the notion of CAPMAPs:
Def. 3 (CAPMAP). The Context-Aware Privilege Memory Access
Pattern (CAPMAP) is the minimum PS necessary for a program to run
during the course of an observed execution. That is, capmap(i, o, op) is
299µSCOPE: A Methodology for Analyzing Least-Privilege Compartmentalization in Large Software Artifacts
RAID ’21, October 6–8, 2021, San Sebastian, Spain
Figure 3: µSCOPE Overview. A software system S with unknown privilege separability is instrumented to trace its operations (read, write, call, return, and free)
at the level of instructions and data objects. The trace is then transformed into a CAPMAP, a low-level representation of the privilege required by the software
system. An analysis engine operates on the CAPMAP, allowing it to explore a range of compartmentalization hypotheses. We define new metrics to measure the
privilege permitted by a given compartmentalization and use a simple analytical model to estimate the performance cost of enforcing the compartmentalization
with a range of possible hardware mechanisms.
the least privilege definition of priv(i, o, op); if any privilege (i, o, op)
is removed from the CAPMAP, the program cannot perform its task.
As a lower bound for capmap(i, o, op), we include all privileges
observed during one to many dynamic executions of the program
(Sec. 7); we discuss the potential threats to validity posed by our
dynamic analysis based approach in Sec. 11.
in that subject group, thereby achieving high security but
imposing per-access costs.
• Unmediated access between subject and object groupings
mean that any instruction for the particular op from the sd to
any object in the od will be permitted without fine-grained
runtime monitoring. Unmediated edges represent a coarse-
grained relaxation of privilege, but allow frequently inter-
acting components to reduce costs. This matches a virtual-
memory protection model where a subject domain maps in
the object domain.
We can think of each sd and the set of ods to which it has unmedi-
ated access as a compartment. This allows each od to exist within
multiple compartments. The mediation type may differ with the
op type to allow different operational privileges; for example an od
group that is only read by an sd may be mapped Unmediated for
read but Not for write, call, return, and free. The SD and ODs form
nodes in the coarser compartmentalization graph.
Def. 4 (Compartmentalization). A compartmentalization is a
division of instructions and objects into Subject Domain and Object
Domain sets and an assignment of edge types, Type(sd, od, op), to one
of {Not, Mediated, Unmediated} for all (sd, od, op) triplets.
We can reflect the privilege reduction of a given compartmental-
ization back to instruction-level privileges by consulting this coarse
compartmentalization graph:
In other words, the compartmentalized graph starts with all the
minimum privileges observed in the CAPMAP. Then, additional
unmediated edges are added between all instructions in sd and
5.2 Compartmentalization Model
While PSmin privilege is ideal from a security perspective, instruction-
level least privilege is a single (and, perhaps, impractical) point in
the privilege-performance continuum. Instead, our compartmental-
ization model gathers individual instructions and primitive objects
together into larger groupings. We call a grouping of instructions
a Subject Domain (sd ∈ SD) and a grouping of objects an Object
Domain (od ∈ OD), each of which is a collection of primitive in-
structions and objects, respectively.
We divide the entire code into a set of groups, sd ∈ SD. Each
instruction, i, goes in exactly one sd. Similarly, we divide the data
into groups with each object, o, in exactly one od. Recall that, since
each instruction is also an object, each sd is also an od (or SD ⊂ OD).
Our basic compartmentalization model must specify for each
operation op whether access from an sd to an od is: Not allowed,
allowed but Mediated, or allowed Unmediated. The table in Fig. 3
shows one particular decision of an algorithm. Specifically, we
define the mediation types as the following:
• Not access is appropriate when the subject group does not
use an operation on an object group; we grant no privileges
between sd and od for op.
• Mediated operations are dynamically validated against the
CAPMAP at the fine-grained instruction and object level.
This supports CAPMAP allowed, least-privilege access with-
out allowing unnecessary access from other instructions
privcompar t(i, o, op) = capmap(i, o, op) ∨
(cid:16) (o ∈ od) ∧ (i ∈ sd)∧