##### ISSUE TYPE
  * Performance problem
##### COMPONENT NAME
Inventory
##### ANSIBLE VERSION
Present in any version of ansible after 2.2.2, including 2.4 rc5 and devel as
of Sep 18 2017. The profiles below were captured in v2.4.0.0-0.5.rc5, but are
similar to profiles in 2.3 and current devel.
    ansible 2.4.0.0
      config file = /Users/tpepper/.ansible.cfg
      configured module search path = [u'/Users/tpepper/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']
      ansible python module location = /usr/local/lib/python2.7/site-packages/ansible
      executable location = /usr/local/bin/ansible
      python version = 2.7.13 (default, Apr  4 2017, 08:47:57) [GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.38)]
##### CONFIGURATION
Default
##### OS / ENVIRONMENT
OS X Sierra and CentOS 7
##### SUMMARY
Ansible's ability to run simple commands (e.g. ansible * --list-hosts) becomes
geometrically slower as host counts in inventory increase. This becomes a
major concern in large environments. For example, a 5,000 test host inventory
takes ~57s to parse. At 10,000 it takes over 6 minutes. Ansible 2.2 and
earlier performed the same feat @ 26,000 hosts in less than 4 seconds.
##### STEPS TO REPRODUCE
First, create a large simple inventory, e.g.:
    rm foo; for i in {1..9000}; do echo "host-$i.foo.com" >> foo; done
Then, profile via e.g.:
    python -m cProfile -s cumtime /usr/local/bin/ansible -i foo \* --list-hosts
##### EXPECTED RESULTS
In 2.2 and earlier, we'd regularly process static and dynamic host inventories
with 26,000 hosts and ~338 groupings (and groups of groups) in about 5s.
##### ACTUAL RESULTS
At 1,000 hosts, things are reasonable @ 3s:
       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.002    0.002    3.084    3.084 ansible:21()
            1    0.002    0.002    2.080    2.080 adhoc.py:93(run)
            1    0.000    0.000    2.034    2.034 __init__.py:767(_play_prereqs)
            1    0.000    0.000    2.034    2.034 manager.py:120(__init__)
            1    0.000    0.000    2.032    2.032 manager.py:193(parse_sources)
            1    0.000    0.000    1.652    1.652 manager.py:217(parse_source)
            1    0.000    0.000    1.652    1.652 ini.py:96(parse)
            1    0.004    0.004    1.650    1.650 ini.py:136(_parse)
         1000    0.002    0.000    1.562    0.002 __init__.py:82(populate_host_vars)
         1000    0.108    0.000    1.560    0.002 data.py:176(add_host)
    1005/1004    0.006    0.000    0.820    0.001 group.py:140(get_hosts)
    1002/1001    0.459    0.000    0.814    0.001 group.py:146(_get_hosts)
      1498500    0.638    0.000    0.740    0.000 host.py:39(__eq__)
         2000    0.207    0.000    0.720    0.000 group.py:114(add_host)
            1    0.001    0.001    0.669    0.669 constants.py:6()
            1    0.000    0.000    0.630    0.630 manager.py:162(__init__)
            1    0.000    0.000    0.620    0.620 __init__.py:87(safe_load)
            1    0.004    0.004    0.620    0.620 __init__.py:64(load)
            1    0.000    0.000    0.616    0.616 constructor.py:35(get_single_data)
            1    0.000    0.000    0.589    0.589 composer.py:29(get_single_node)
            1    0.000    0.000    0.589    0.589 composer.py:50(compose_document)
       3924/1    0.011    0.000    0.589    0.589 composer.py:63(compose_node)
        546/1    0.006    0.000    0.589    0.589 composer.py:117(compose_mapping_node)
        12449    0.015    0.000    0.546    0.000 parser.py:94(check_event)
        29732    0.036    0.000    0.447    0.000 scanner.py:113(check_token)
            1    0.004    0.004    0.378    0.378 data.py:105(reconcile_inventory)
         1001    0.003    0.000    0.373    0.000 data.py:225(add_child)
         6242    0.021    0.000    0.334    0.000 scanner.py:153(fetch_more_tokens)
      1009000    0.263    0.000    0.320    0.000 host.py:47(__hash__)
          380    0.002    0.000    0.266    0.001 composer.py:99(compose_sequence_node)
At 5,000 hosts, things are slowing down substantially to about a minute:
       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.002    0.002   57.737   57.737 ansible:21()
            1    0.009    0.009   56.702   56.702 adhoc.py:93(run)
            1    0.000    0.000   56.461   56.461 __init__.py:767(_play_prereqs)
            1    0.000    0.000   56.461   56.461 manager.py:120(__init__)
            1    0.000    0.000   56.460   56.460 manager.py:193(parse_sources)
            1    0.000    0.000   45.775   45.775 manager.py:217(parse_source)
            1    0.000    0.000   45.775   45.775 ini.py:96(parse)
            1    0.046    0.046   45.772   45.772 ini.py:136(_parse)
         5000    0.014    0.000   45.119    0.009 __init__.py:82(populate_host_vars)