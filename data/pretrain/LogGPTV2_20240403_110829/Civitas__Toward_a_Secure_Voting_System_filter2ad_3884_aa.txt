# Civitas: Toward a Secure Voting System

**Authors:**  
Michael R. Clarkson, Stephen Chong, and Andrew C. Myers  
Department of Computer Science, Cornell University  
{clarkson, schong, andru}@cs.cornell.edu

**Abstract**  
Civitas is the first electronic voting system that is coercion-resistant, universally and voter-verifiable, and suitable for remote voting. This paper describes the design and implementation of Civitas. Security is ensured through formal proofs in the design phase and information-flow security analysis in the implementation phase. Experimental results provide a quantitative evaluation of the trade-offs between time, cost, and security.

## 1. Introduction
Electronic voting has become a reality, but so have the numerous errors and vulnerabilities in commercial electronic voting systems [2, 8, 48, 73]. Voting systems are challenging to make trustworthy because they must meet strong, often conflicting, security requirements:
- **Integrity**: The election results must be assured, and any attempt to corrupt the integrity of an election must be detected and correctly attributed.
- **Confidentiality**: Voters' privacy must be protected to prevent vote selling and to defend against coercion.

While integrity can be achieved through a public show of hands, this method compromises confidentiality. Conversely, secret ballots ensure confidentiality but do not guarantee integrity. Given the civic importance of elections, violations of these requirements can have significant consequences.

Many security experts have expressed skepticism about electronic voting [25, 28, 41, 53, 63], arguing that achieving assurance in such systems is too difficult and that their deployment poses unacceptable risks. Our work, however, was inspired by the potential for electronic voting systems to be more trustworthy than their non-electronic predecessors. This paper describes and evaluates Civitas, a prototype system we developed to explore this potential. Although not yet suitable for national elections, Civitas enforces verifiability (an integrity property) and coercion resistance [45] (a confidentiality property). Civitas does not rely on trusted supervision of polling places, making it a remote voting system.

To ensure the security of Civitas, we employed principled techniques:
- **Security Proofs**: The design of Civitas refines a cryptographic voting scheme by Juels, Catalano, and Jakobsson [45], who proved their scheme secure; we extend the proof to account for our modifications.
- **Secure Information Flow**: The implementation of Civitas is in Jif [54, 56], a language that enforces information-flow security policies.

This validation supports our argument that Civitas is secure.

The security provided by Civitas comes with trade-offs. There are balances to be struck between the level of security, the time required for tabulation, and the monetary cost. To better understand these trade-offs, we conducted performance studies. The results show that, with reasonable security and time parameters, the marginal cost of tabulation is as low as 4¢ per voter. Since the current cost of a government election in a stable Western democracy is $1 to $3 per voter [38], Civitas can provide increased security at a minimal additional cost.

**Contributions of Civitas:**
- A provably secure voter registration protocol that distributes trust over a set of registration authorities.
- A scalable design for vote storage that ensures integrity without expensive fault tolerance mechanisms.
- A performance study demonstrating the scalability of secure tabulation.
- A coercion-resistant construction for implementing a ranked voting method.
- A concrete, publicly available specification of the cryptographic protocols required to implement a coercion-resistant, verifiable, remote voting scheme, leveraging many results in the cryptographic and voting literature.

Civitas is the first voting system to implement a scheme proven to satisfy both coercion resistance and verifiability, taking an important step toward making secure electronic voting a reality.

**Organization of the Paper:**
- Section 2 discusses the Civitas security model.
- Section 3 presents the design of Civitas.
- Section 4 evaluates the security of Civitas.
- Section 5 describes the implementation of cryptographic components.
- Section 6 analyzes the scalability of tabulation.
- Section 7 details the Jif implementation.
- Section 8 presents our performance study.
- Section 9 reviews related work.
- Section 10 identifies remaining challenges.
- Section 11 concludes the paper.

## 2. Security Model
The Civitas security model includes the environment in which Civitas is used, the security properties it must satisfy, and the capabilities of the adversary attempting to subvert those properties.

### Remote Voting
Electronic voting systems are often designed for supervised voting, which assumes trusted human supervision of the voters, procedures, hardware, and software in polling places. However, this contradicts the trend toward enabling interactions from anywhere at any time. For example, Oregon now uses postal mail for all voting, and many states receive a substantial fraction of their ballots by mail. Internet voting is also increasingly used by groups such as Debian, the ACM, and the IEEE. Estonia even conducts legally binding national elections online.

Postal and internet voting are instances of remote voting, which does not assume trusted supervision of polling places. Remote voting is a more general and challenging problem than supervised voting. Given the evident interest in remote voting, we believe it is the right problem to solve. One of our goals was to strike a reasonable compromise between enabling remote voting and ensuring strong security properties. This led to two requirements:
- In some circumstances, voters must register at least partly in person.
- Voters must trust the computational device they use to submit votes, though unlike conventional supervised voting, Civitas allows each voter to choose their own supplier and device. These requirements are discussed further in Section 4.

### Security Properties
To meet the integrity requirement, Civitas must satisfy:
- **Verifiability**: The final tally must be verifiably correct. Each voter can check that their vote is included in the tally (voter verifiability). Anyone can check that all votes cast are counted, only authorized votes are counted, and no votes are changed during counting (universal verifiability) [45, 66].

Verifiability improves upon the integrity properties commonly offered by real-world voting systems, which rarely allow individual voters to verify their votes or the tally. For example, the commercial electronic voting systems currently deployed in California offer no guarantees that votes are counted correctly [73].

To meet the confidentiality requirement, a voting system might guarantee anonymity, meaning that the information released by the system never reveals how a voter voted. However, for remote voting, anonymity is insufficient. Voters might gain additional information during voting that could enable the buying and selling of votes or be used to coerce them. In remote voting, the coercer could even be the voter’s employer or domestic partner, physically present and controlling the entire voting process. Therefore, for confidentiality, Civitas must satisfy:
- **Coercion Resistance**: Voters cannot prove whether or how they voted, even if they can interact with the adversary while voting [45, 6].

A third security requirement could be the availability of the voting system and tabulation results. While essential for a national voting system, we do not require our prototype to satisfy any availability property. Some aspects of availability, such as fault tolerance, can be addressed by well-known techniques, but defending against selective denial-of-service attacks remains an open problem.

### Threat Model
We require Civitas to be secure against an adversary with the following capabilities:
- The adversary may corrupt a threshold of the election authorities, mutually distrusting agents who conduct the election. Agents might be humans, organizations, or software components.
- The adversary may coerce voters, demand their secrets, and control their behavior—remotely or in their physical presence. However, the adversary may not control a voter throughout the entire election.
- The adversary may control all public channels on the network. We also assume the existence of anonymous and untappable channels.
- The adversary may perform any polynomial-time computation.

## 3. Design
Civitas refines and implements a voting scheme, referred to as JCJ, developed by Juels, Catalano, and Jakobsson [45]. The differences between our design and JCJ are discussed in Section 9.

### 3.1. Agents
There are five types of agents in the Civitas voting scheme: a supervisor, a registrar, voters, registration tellers, and tabulation tellers. Some of these are depicted in Figure 1. The agents other than voters are election authorities:
- **Supervisor**: Administers the election, including specifying the ballot design, tellers, and starting and stopping the election.
- **Registrar**: Authorizes voters.
- **Registration Tellers**: Generate the credentials that voters use to cast their votes.
- **Tabulation Tellers**: Tally the votes.

These agents use an underlying log service that implements publicly readable, insert-only storage. The integrity of messages in the log is ensured by digital signatures. Agents may sign messages they insert, ensuring that the log service cannot forge new messages. The log service must sign its responses to reads, ensuring that attempts to present different views of the log are detectable.