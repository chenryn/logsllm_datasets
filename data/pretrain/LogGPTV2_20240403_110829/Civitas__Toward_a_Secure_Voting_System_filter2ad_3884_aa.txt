title:Civitas: Toward a Secure Voting System
author:Michael R. Clarkson and
Stephen Chong and
Andrew C. Myers
2008 IEEE Symposium on Security and Privacy
Civitas: Toward a Secure Voting System
Michael R. Clarkson
Stephen Chong Andrew C. Myers
Department of Computer Science, Cornell University
{clarkson,schong,andru}@cs.cornell.edu
Abstract
Civitas is the ﬁrst electronic voting system that
is
coercion-resistant, universally and voter veriﬁable, and suit-
able for remote voting. This paper describes the design and
implementation of Civitas. Assurance is established in the
design through security proofs, and in the implementation
through information-ﬂow security analysis. Experimental
results give a quantitative evaluation of the tradeoffs be-
tween time, cost, and security.
1. Introduction
Electronic voting is now a reality—and so are the many er-
rors and vulnerabilities in commercial electronic voting sys-
tems [2,8,48,73]. Voting systems are hard to make trustwor-
thy because they have strong, conﬂicting security require-
ments:
• Integrity of election results must be assured so that all
voters are convinced that votes are counted correctly.
Any attempt to corrupt the integrity of an election must
be detected and correctly attributed.
• Conﬁdentiality of votes must be assured to protect vot-
ers’ privacy, to prevent selling of votes, and to defend
voters from coercion.
Integrity is easy to obtain through a public show of hands,
but this destroys conﬁdentiality. Conﬁdentiality can be ob-
tained by secret ballots, but this fails to assure integrity. Be-
This work was supported by the Department of the Navy, Ofﬁce of Naval
Research, ONR Grant N00014-01-1-0968; Air Force Ofﬁce of Scientiﬁc
Research, Air Force Materiel Command, USAF, grant number F9550-06-
0019; National Science Foundation grants 0208642, 0133302, 0430161,
and CCF-0424422 (TRUST); and a grant from Intel Corporation. Michael
Clarkson was supported by a National Science Foundation Graduate Re-
search Fellowship and an Intel PhD Fellowship; Andrew Myers was sup-
ported by an Alfred P. Sloan Research Fellowship. The views and con-
clusions contained herein are those of the authors and should not be in-
terpreted as necessarily representing the ofﬁcial policies or endorsements,
either express or implied, of these organizations or the U.S. Government.
The U.S. Government is authorized to reproduce and distribute reprints for
Governmental purposes notwithstanding any copyright notation thereon.
cause of the civic importance of elections, violations of these
requirements can have dramatic consequences.
Many security experts have been skeptical about elec-
tronic voting [25, 28, 41, 53, 63], arguing that assurance in
electronic voting systems is too hard to obtain and that their
deployment creates unacceptable risks. Our work, however,
was inspired by the possibility that electronic voting systems
could be more trustworthy than their non-electronic prede-
cessors. This paper describes and evaluates Civitas, the pro-
totype system we built to explore that possibility. Although
not yet suitable for deployment in national elections, Civi-
tas enforces veriﬁability (an integrity property) and coercion
resistance [45] (a conﬁdentiality property). Civitas does not
rely on trusted supervision of polling places, making it a re-
mote voting system.
To obtain assurance in the security of Civitas, we em-
ployed principled techniques:
• Security proofs. The design of Civitas reﬁnes a cryp-
tographic voting scheme1 due to Juels, Catalano, and
Jakobsson [45], who proved their scheme secure; we
extend the proof to account for our changes.
• Secure information ﬂow. The implementation of
Civitas is in Jif [54, 56], a language which enforces
information-ﬂow security policies.
This validation of the design and implementation supports
our argument that Civitas is secure.
The security provided by Civitas is not free. Tradeoffs
exist between the level of security provided by Civitas tab-
ulation, the time required for tabulation, and the monetary
cost of tabulation. To better understand these tradeoffs, we
studied the performance of Civitas. The results reveal that
(with reasonable security and time parameters), the marginal
cost of tabulation is as low as 4¢ per voter. Since the current
cost of a government election in a stable Western democ-
racy is $1 to $3 per voter [38], Civitas can provide increased
security at little additional cost.
1For clarity, we deﬁne voting systems as implementations, voting
schemes as cryptographic protocols, and voting methods as algorithms that
aggregate voters’ preferences to produce a collective decision.
978-0-7695-3168-7 /08 $25.00 © 2008 IEEE
DOI 10.1109/SP.2008.32
354
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:14:20 UTC from IEEE Xplore.  Restrictions apply. 
Developing Civitas led to several contributions:
• A provably secure voter registration protocol, which
distributes trust over a set of registration authorities.
• A scalable design for vote storage that ensures integrity
without expensive fault tolerance mechanisms.
• A performance study demonstrating the scalability of
secure tabulation.
• A coercion-resistant construction for implementing a
ranked voting method.
• A concrete, publicly available speciﬁcation of the cryp-
tographic protocols required to implement a coercion-
resistant, veriﬁable, remote voting scheme. This speci-
ﬁcation leverages many results in the cryptographic and
voting literature.
Moreover, Civitas is the ﬁrst voting system to implement a
scheme proved to satisfy coercion resistance and veriﬁabil-
ity. Thus, Civitas takes an important step toward bringing
secure electronic voting to reality.
We proceed as follows. Section 2 discusses the Civitas
security model. The design of Civitas is presented in Sec-
tion 3. Section 4 evaluates the security of Civitas. The im-
plementation of cryptographic components is described in
Section 5, and the scalability of tabulation is analyzed in
Section 6. The Jif implementation is described in Section 7.
Section 8 presents our performance study. Related work is
reviewed in Section 9, and some remaining challenges are
identiﬁed in Section 10. Section 11 concludes.
2. Security Model
The Civitas security model comprises the environment in
which Civitas is used, the security properties we require Civ-
itas to satisfy, and the capabilities we ascribe to the adver-
sary attempting to subvert those properties.
Remote voting. Electronic voting systems are often de-
signed for supervised voting, which assumes trusted human
supervision of the voters, procedures, hardware, and soft-
ware in polling places. But this contradicts society’s trend
toward enabling interactions from anywhere at any time. For
example, voters in the state of Oregon now vote only by
postal mail, and all states receive a substantial fraction—
enough to change the outcome of many elections—of their
ballots by mail as absentee ballots. As another example, In-
ternet voting is increasingly used by groups such as Debian,
the ACM, and the IEEE. Estonia even conducts legally bind-
ing national elections using the Internet.
Postal voting and Internet voting are instances of remote
voting, which does not assume trusted supervision of polling
places. Remote voting is thus a more general problem, and a
harder problem, than supervised voting. Because of the evi-
dent interest in remote voting, we believe that remote voting
is the right problem to solve. One of our goals was there-
fore to strike a reasonable compromise between enabling
remote voting and guaranteeing strong security properties.
This compromise led to two requirements. First, in some
circumstances, voters must register at least partly in per-
son. Second, voters must trust the computational device they
use to submit votes—though unlike conventional supervised
voting, in which voters must trust the particular device sup-
plied by their local election authorities, Civitas enables each
voter to choose a supplier and device. We discuss these re-
quirements in Section 4.
Security properties. To fulﬁll the integrity requirement of
Section 1, we require Civitas to satisfy:
Veriﬁability. The ﬁnal tally is veriﬁably correct. Each
voter can check that their own vote is included in the
tally (voter veriﬁability). Anyone can check that all
votes cast are counted, that only authorized votes are
counted, and that no votes are changed during count-
ing (universal veriﬁability).2
We deﬁne “veriﬁability” informally for simplicity, but Civi-
tas satisﬁes the formal deﬁnition given by Juels et al. [45].3
Veriﬁability improves upon the integrity properties com-
monly offered by real-world voting systems. For example,
real-world systems rarely allow individual voters to verify
that their own votes were included in the tally, or to verify
the tally themselves. As another example, the commercial
electronic voting systems currently deployed in California
offer no guarantees that votes are counted correctly [73].
To fulﬁll the conﬁdentiality requirement of Section 1, a
voting system might guarantee anonymity, meaning that the
information released by the system never reveals how a voter
voted. However, for remote voting, anonymity is too weak.
Voters might gain additional information during voting that
could enable the buying and selling of votes. Such informa-
tion could also be used to coerce voters. In remote voting,
the coercer could even be the voter’s employer or domes-
tic partner, physically present with the voter and controlling
the entire voting process. Against such coercers, it is nec-
essary to ensure that voters can appear to comply with any
behavior demanded of them. Further, conﬁdentiality must
be maintained even when voters collude with the adversary.
Thus, for conﬁdentiality, we require Civitas to satisfy:
Coercion Resistance. Voters cannot prove whether
or how they voted, even if they can interact with the
adversary while voting.4
2Universal veriﬁability was originally deﬁned by Sako and Kilian [66].
3Veriﬁability could be formulated as the correctness property of secure
multi-party computation [33]. Intuitively, this requires that no adversary
can change the results of tabulation to be different than if all votes were
announced and tabulated publicly.
4Removing interaction with the adversary results in receipt-freeness, a
weaker property originally deﬁned by Benaloh [6].
355
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:14:20 UTC from IEEE Xplore.  Restrictions apply. 
We deﬁne “coercion resistance” informally5 for simplicity,
but Civitas again satisﬁes the formal deﬁnition given by
Juels et al. [45].6 This formal deﬁnition requires Civitas
to defend against attacks in which the adversary demands
secrets known to the voter, and attacks in which the adver-
sary demands that the voter submits a value chosen by the
adversary. This value might be a legitimate vote or a ran-
dom value. The adversary may even demand that the voter
abstain by submitting no value at all.7
A third security requirement that could be added is avail-
ability of the voting system and tabulation results. Although
this would be essential for a national voting system, we do
not require our prototype to satisfy any availability prop-
erty. Some aspects of availability, such as fault tolerance,
could be addressed by well-known techniques. Other as-
pects, such as defending against selective denial-of-service
attacks intended to disenfranchise particular groups of vot-
ers, are open problems.
Threat model. We require Civitas to be secure with re-
spect to an adversary (essentially due to Juels et al. [45])
with the following capabilities:
• The adversary may corrupt a threshold (made precise
in Section 4) of the election authorities, mutually dis-
trusting agents who conduct an election. Agents might
be humans, organizations, or software components.
• The adversary may coerce voters, demand their secrets,
and demand any behavior of them—remotely or in the
physical presence of voters. But the adversary may not
control a voter throughout an entire election, otherwise
the voter could never register or vote.
• The adversary may control all public channels on the
network. However, we also assume the existence of
some anonymous channels, on which the adversary
cannot identify the sender, and some untappable chan-
nels, which the adversary cannot use at all.8
• The adversary may perform any polynomial-time com-
putation.
3. Design
Civitas reﬁnes and implements a voting scheme, which we
refer to as JCJ, developed by Juels, Catalano, and Jakobs-
5“Coercion resistance” is used informally throughout the literature.
Juels et al. [45] and Delaune et al. [22] give formal deﬁnitions in the compu-
tational and symbolic models, respectively, of cryptography. The informal
deﬁnition given above is consistent with both.
6Coercion resistance could be formulated as the privacy property of se-
cure multi-party computation. Intuitively, this requires that no adversary
can learn any more about votes than is revealed by the results of tabulation.
7Note that the requirement to defend voters from forced-abstinence at-
tacks is incompatible with a public record of who has voted.
8An untappable channel must provide perfect secrecy, perhaps by being
physically untappable or by implementing a one-time pad.
Figure 1. Civitas architecture
son [45]. The differences between our design and JCJ are
discussed in Section 9.
3.1. Agents
There are ﬁve kinds of agents in the Civitas voting scheme:
a supervisor, a registrar, voters, registration tellers, and tab-
ulation tellers. Some of these are depicted in Figure 1. The
agents other than voters are election authorities:
• The supervisor administers an election. This includes
specifying the ballot design and the tellers, and starting
and stopping the election.
• The registrar authorizes voters.
• Registration tellers generate the credentials that voters
use to cast their votes.
• Tabulation tellers tally votes.
These agents use an underlying log service that imple-
ments publicly readable, insert-only storage.
Integrity of
messages in a log is ensured by digital signatures. Agents
may sign messages they insert, ensuring that the log service
cannot forge new messages. The log service must sign its re-
sponses to reads, ensuring that attempts to present different