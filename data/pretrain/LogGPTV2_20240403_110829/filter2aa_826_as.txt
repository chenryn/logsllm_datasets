96. (‐p|‐‐payload)
97. _values'payload'$(__msfvenom_payloads)
98. ;;
99.
100. (‐l|‐‐list)
101. locallists=('payloads''encoders''nops''platforms''archs''encrypt'
102. 'formats''all')
103.
104. _values'list'$lists
105. ;;
第三十课：解决msfvenom命令自动补全
-230-
本文档使用书栈(BookStack.CN)构建
106.
107. (‐encrypt)
108. localencrypts=('aes256''base64''rc4''xor')
109. _values'encrypt'$encrypts
110. ;;
111.
112. (‐a|‐‐arch)
113. _values'arch'$(__msfvenom_archs)
114. ;;
115.
116. (‐platform)
117. _values'platform'$(__msfvenom_platforms)
118. ;;
119.
120. (‐f|‐‐format)
121. _values'format'$(__msfvenom_formats)
122. ;;
123.
124. (‐e|‐‐encoder)
125. _values'encoder'$(__msfvenom_encoders)
126. ;;
127.
128. (‐o|‐‐out|‐x|‐‐template|‐c|‐‐add‐code)
129. _files
130. ;;
131.
132. (*)
133.
134. ;;
135.
136. esac
137. }
138.
139. __msfvenom_payloads(){
140. localmsf_payloads
141.
142. #wecachethelistofpackages(originallyfromthemacportsplugin)
143. venom‐cache‐payloads
144. msf_payloads=`cat$VENOM_CACHE_FILE`
145.
146. forlinein$msf_payloads;do
147. echo"$line"
第三十课：解决msfvenom命令自动补全
-231-
本文档使用书栈(BookStack.CN)构建
148. done
149. }
150.
151. __msfvenom_archs(){
152. localarchs
153. archs=(
154. 'aarch64'
155. 'armbe'
156. 'armle'
157. 'cbea'
158. 'cbea64'
159. 'cmd'
160. 'dalvik'
161. 'firefox'
162. 'java'
163. 'mips'
164. 'mips64'
165. 'mips64le'
166. 'mipsbe'
167. 'mipsle'
168. 'nodejs'
169. 'php'
170. 'ppc'
171. 'ppc64'
172. 'ppc64le'
173. 'ppce500v2'
174. 'python'
175. 'r'
176. 'ruby'
177. 'sparc'
178. 'sparc64'
179. 'tty'
180. 'x64'
181. 'x86'
182. 'x86_64'
183. 'zarch'
184. )
185.
186. forlinein$archs;do
187. echo"$line"
188. done
189.
第三十课：解决msfvenom命令自动补全
-232-
本文档使用书栈(BookStack.CN)构建
190. }
191.
192. __msfvenom_encoders(){
193. localencoders
194. encoders=(
195. 'cmd/brace'
196. 'cmd/echo'
197. 'cmd/generic_sh'
198. 'cmd/ifs'
199. 'cmd/perl'
200. 'cmd/powershell_base64'
201. 'cmd/printf_php_mq'
202. 'generic/eicar'
203. 'generic/none'
204. 'mipsbe/byte_xori'
205. 'mipsbe/longxor'
206. 'mipsle/byte_xori'
207. 'mipsle/longxor'
208. 'php/base64'
209. 'ppc/longxor'
210. 'ppc/longxor_tag'
211. 'ruby/base64'
212. 'sparc/longxor_tag'
213. 'x64/xor'
214. 'x64/xor_dynamic'
215. 'x64/zutto_dekiru'
216. 'x86/add_sub'
217. 'x86/alpha_mixed'
218. 'x86/alpha_upper'
219. 'x86/avoid_underscore_tolower'
220. 'x86/avoid_utf8_tolower'
221. 'x86/bloxor'
222. 'x86/bmp_polyglot'
223. 'x86/call4_dword_xor'
224. 'x86/context_cpuid'
225. 'x86/context_stat'
226. 'x86/context_time'
227. 'x86/countdown'
228. 'x86/fnstenv_mov'
229. 'x86/jmp_call_additive'
230. 'x86/nonalpha'
231. 'x86/nonupper'
第三十课：解决msfvenom命令自动补全
-233-
本文档使用书栈(BookStack.CN)构建
232. 'x86/opt_sub'
233. 'x86/service'
234. 'x86/shikata_ga_nai'
235. 'x86/single_static_bit'
236. 'x86/unicode_mixed'
237. 'x86/unicode_upper'
238. 'x86/xor_dynamic'
239. )
240.
241. forlinein$encoders;do
242. echo"$line"
243. done
244. }
245.
246. __msfvenom_platforms(){
247. localplatforms
248. platforms=(
249. 'aix'
250. 'android'
251. 'apple_ios'
252. 'bsd'
253. 'bsdi'
254. 'cisco'
255. 'firefox'
256. 'freebsd'
257. 'hardware'
258. 'hpux'
259. 'irix'
260. 'java'
261. 'javascript'
262. 'juniper'
263. 'linux'
264. 'mainframe'
265. 'multi'
266. 'netbsd'
267. 'netware'
268. 'nodejs'
269. 'openbsd'
270. 'osx'
271. 'php'
272. 'python'
273. 'r'
第三十课：解决msfvenom命令自动补全
-234-
本文档使用书栈(BookStack.CN)构建
274. 'ruby'
275. 'solaris'
276. 'unix'
277. 'unknown'
278. 'windows'
279. )
280.
281. forlinein$platforms;do
282. echo"$line"
283. done
284. }
285.
286. __msfvenom_formats(){
287. localformats
288. formats=(
289. 'asp'
290. 'aspx'
291. 'aspx‐exe'
292. 'axis2'
293. 'dll'
294. 'elf'
295. 'elf‐so'
296. 'exe'
297. 'exe‐only'
298. 'exe‐service'
299. 'exe‐small'
300. 'hta‐psh'
301. 'jar'
302. 'jsp'
303. 'loop‐vbs'
304. 'macho'
305. 'msi'
306. 'msi‐nouac'
307. 'osx‐app'
308. 'psh'
309. 'psh‐cmd'
310. 'psh‐net'
311. 'psh‐reflection'
312. 'vba'
313. 'vba‐exe'
314. 'vba‐psh'
315. 'vbs'
第三十课：解决msfvenom命令自动补全
-235-
本文档使用书栈(BookStack.CN)构建
316. 'war'
317. 'bash'
318. 'c'
319. 'csharp'
320. 'dw'
321. 'dword'