executed during regular use of program instead of being kept
idle and raising suspicions.
2These gadgets may be intended code pieces of the program
or unintended instruction sequences in the middle of some
code session (in case of CISC instruction set).
 main: … call function1  … function1: …  … call function2 …  ret function3: … …  … retwatermarking trigger … call function3  … function2: …  retregular control flowwatermarking control flowROP gadgetsTo give an example, suppose that we are to embed the
watermark “007” into the target program by putting it into
a 4-byte character string S (see Figure 2). In this example,
payload construction involves preparing a sequence control-
ling the following gadgets and variables on the heap (shaded
area in Figure 2):
Figure 2: A simple example of ROP-based watermarking
• An initiating stub to store the current stack pointer
and the address to return to, and to modify the stack
pointer to point to the watermarking code;
• The watermarking code consisting of three gadgets
, , and
 which complete a mem-
ory writing chain;
• A constant 3616816 (corresponding to the ASCII code
of string “007”) and the address of string S which will
be used by the memory writing gadgets;
• A terminating stub that recovers the original stack lay-
out and goes back to regular program execution.
When the watermark extraction procedure is triggered,
the embedded ROP ﬁrst loads 3616816 and the address of S
into register eax and ebx, respectively, then updates S to
the watermark message “007”3.
Typically, executing a well-designed ROP relies on inject-
ing the payload on the stack in advance of turning to the
gadgets, to ensure not only that the gadgets are given all
operands they required but also that the indirect control in-
structions correctly ﬁnd their successors so that gadgets are
executed in the exact sequence as planned. Therefore, the
way to construct and plant payload is a critical link of ROP.
In malicious exploits, this is usually done by inputting exter-
nal data to the program via some vulnerable routines, and
the injected payload corrupts the original stack environment
without concerning potential consequences (e.g., segmenta-
tion fault after the ROP execution). However, in case of
software watermarking, the following issues have to be con-
sidered:
1. since the embedded ROP is for presenting a water-
mark, the payload has to be built all by the program
itself;
3Note that it is only for simplicity that the watermark mes-
sage is directly written in the ROP payload.
In real im-
plementation, this can be easily avoided with more complex
gadget combinations.
2. code used in constructing the payload should not ap-
pear to be suspicious when compared to the original
program;
3. after retrieving the watermark, ROP should return
control to normal execution without sabotaging the
program’s normal execution.
Besides these, we also need to bypass protection mecha-
nisms, e.g., Address Space Layout Randomization (ASLR).
Clearly the old-fashioned way of launching an ROP for ma-
licious attack is inappropriate in ROP-based watermarking.
Instead, we need to propose a customized technique for our
purposes. In the following subsections, we present each step
of our scheme in more detail.
3.3 Locating watermarking gadgets
As mentioned in Section 3.2, ROP execution is constructed
on the basis of instruction pieces called gadgets located from
existing code regions, thus our ﬁrst step is to ﬁnd gadgets
useful in watermark generation. However, using instructions
inside the program itself is susceptible to simple program
transformation attacks (as discussed in Section 2.3).
To provide resistance to the transformation attacks, we
make use of the shared libraries (e.g. libc.so for UNIX
and kernel32.dll for Windows). Such libraries are linked
to almost any programs and cannot be easily modiﬁed. There-
fore, we choose to search for watermarking gadgets from
these system libraries, since semantic-preserving transforma-
tions on the watermarked program cannot prevent it from
correctly targeting gadgets inside such legacy code.
Because we are using ROP only to hide watermarking
behavior, gadgets to be executed needs to have no more
than the following functions:
Register loading to load watermark messages and target
memory addresses into registers. Note that this may
not be as simple as a  sequence. Arith-
metic/logical/shifting operations are also included.
Memory writing to write the value of source register to
the memory area pointed to by the address in the tar-
get register, e.g., .
Stack shifting to control stack pointer, allowing water-
marking ROP to be linked without being redirected
with additional code. These are basically special regis-
ter loading gadgets, since their only target is the stack
pointer register.
Transferring to record the current position of instruction
pointer when the program is directed to ROP, and to
recover after the watermarking code is executed. Be-
sides a speciﬁc combination of the former types of gad-
gets, we speciﬁcally exploit register exchange gadgets
like  here since they can store
the current stack pointer for later usage.
Since the introduction of ROP, many have proposed au-
tomatic searching of useful instruction sequences [15,26,29].
We make use of these existing techniques to locate the gad-
gets we need from system libraries. To be compatible with
ASLR-enabled systems, we record gadgets by their oﬀsets
from entries of certain functions in the libraries, so that at
runtime their absolute address can be computed easily with
the assistant of function pointers.
string Sprogram routinewatermarking triggerprogram routine3616816initiating stuboffset: S0x300x300x370x00control transferdata updatingterminating stubProjects/libs
Size(KB)
bzip2
hmmer
lbm
mcf
sjeng
soplex
libc.so.6
kernel32.dll
63.488
204.288
24.064
18.432
105.984
306.688
1335.56
857.6
Register loading Memory writing
Stack shifting Transferring
Gadget types
22
8
8
8
12
24
9
13
2
NA
NA
NA
1
NA
5
2
2
NA
NA
NA
1
NA
2
8
1
1
1
1
1
1
4
3
Table 1: Number of available gadgets in projects and libraries
We search these four types of gadgets in a collection of
SPECint-2006 benchmark projects as well as two system
libraries libc.so.6 and kernel32.dll. Only gadgets
that complete a functional chain are recorded as available.
Results shown in Table 1 conﬁrm that both system libraries
provide fully functional gadget sets for watermarking, while
the same searching on small program modules are likely to
fail.
In addition, we found that typically gadgets of the
equivalent function can be found at more than one locations,
which could provide ﬂexibility in formatting the payload.
3.4 Distributive and dynamic construction
of watermarking payload
Constructing a reasonable watermark in ROP typically
requires to execute dozens of gadgets, thus the payload used
to chain the gadgets up would be of notable length. The code
used to construct such payload would then be even longer,
leaving potential targets for attackers. However, as brieﬂy
mentioned in Section 1, an important advantage of our ROP-
based watermarking technique is to be able to spread out the
watermarking components throughout the execution path
to minimize suspicion from program analysis. Our design
splits the watermarking payload into small segments to be
constructed in diﬀerent functions of the program which we
called “carriers”. With a number of carriers, we managed
to embed just a small piece of code in each carrier that
controls only a few gadgets, largely reducing the suspicion
raised since the inserted code is almost negligible compared
to the size of the original carriers. Refer to Section 4 for
security evaluations on this.
We use TEMU, the dynamic analysis component of Bit-
Blaze binary analysis platform [30], to trace the execution
of the program with the secret input and to record all func-
tions that are executed on the path along with their size,
invoking frequency, and a call graph showing the control
ﬂow among them. Each function on this execution path is
a carrier candidate for the watermarking payload. We sort
the carriers by their size and embed longer segments of the
payload in larger carriers since they provide better cover for
the additional code.
Instead of storing the watermarking payload inside static
data region, we construct the payload segments “on the ﬂy”.
That is, only when a carrier is executed will the payload seg-
ment it carries be created in the program’s heap area (we
choose not to do this in carriers’ stack frame in order to
minimize the aﬀect to program’s normal execution caused
by watermarking). We diversify the forms in which the pay-
load segments are constructed to make it harder to recognize
a pattern that indicates watermarking. Payload segments
could be arranged as
• Integer arrays;
• Character strings;
• Selected variables of newly created instances of com-
posite data structures (e.g., C structs and C++ classes).
Figure 3 shows examples on how the watermarking pay-
load stored in a linear memory space can be built with diﬀer-
ent types of program objects. As we can see, the same piece
of payload corresponding to the gadget 
could stand in diﬀerent ways: an integer array with two el-
ements, two variables next to each other in an instance of
a struct/class. We construct the payload based on the data
structures that are already in the subject program and do
not create new types of structures serving solely for water-
marking which could be targets for attackers.
Furthermore, since the payload segments are formatted as
heap-allocated data pieces, it’s easy to use them in comput-
ing other variables owned by the program. Doing so creates
active connections between the watermark components and
the subject program, making them more diﬃcult to be dis-
abled even if they are somehow spotted by the adversary.
3.5 Payload chaining via stack pointer
manipulation
Although splitting watermarking payload into short seg-
ments and distributing them among multiple carriers im-
prove security, we still need a way to ensure that the dis-
cretely distributed payload pieces can be chained into a
continuous stream during watermark extraction so that the
ROP execution under their control works correctly.
As shown in Figure 4, when the watermarking payload
is cut into segments, we attach stack-shifting gadgets at the
end of them. In this way, each of the segments is responsible
to relocate the stack frame correctly to the exact memory
address of the next one, so that the watermarking payload
works as if it were a continuous piece.
As discussed in the previous subsection, segments of the
watermarking payload are constructed dynamically. During
runtime whene one of them is constructed, the watermarked
program checks if its previous and/or following segment had
already been constructed. If either of them exists, the pro-
gram chains the segments together by updating their stack
shifting gadgets. Since the segments are generated one after
Figure 3: The diversity of payload formatting in ROP-based watermarking
aﬀect the rest of the program. Upon inputting the secret
input, the value of trigger is overwritten to point to the ﬁrst
gadget of the initiating stub (while the other parts of this
stub will be pushed on the stack later by the trigger). Later
when the trigger is invoked, gadgets of the initiating stub get
executed, which save the current environment and transfer
control to the ﬁrst segment of watermarking payload.
The next question is how to encode the trigger condition
(testing the secret input). A simple solution is to use a
conditional block (e.g., an if statement) to compare current
program input with the constant secret input. However,
such conditional block introduces branching in the control
ﬂow graph and could attract attention of program analysis.
Here we propose a novel idea to conceal such branching, see
Figure 5. We exploit the right shifting operation so that only
when Input equals to Key will the variable x be set to 0.
As a result, the program is able to conditionally determine
the function pointer’s value without explicitly introducing
control ﬂow transfer instructions.
void RopTrigger_A (int Input, int Key)
{
int a=Input-Key;
int b=Key-Input;
a>>31;
b>>31:
/* if Input==Key, then x=0, otherwise x
=-1 */
int x=a^b;
/* overwriting */
&funcPt=addressA*(0-x)+addressB*(1+x);
funcPt(Initial_Gadgets);
}
Figure 5: Testing trigger condition without branching
Note that the above example is only a raw implementa-
tion of our watermark trigger. In practice there are many
ways to build the same function in more complex form so
that the embedded trigger is harder to locate or analyze.
For example, we can use the hash value of Key to com-
pute a and b as similarly suggested in [28]. Simple right
shifting can be replaced with equivalent arithmetic combi-
nations. Pointer aliasing may also be applied to the function
pointer overwriting. Finally, code block of the trigger can
be taken apart and merged with another functional module
to decrease its visibility.
Figure 4: Chaining discrete payload segments via stack shift-
ing gadgets (The dash arrows indicate stack pointer reloca-
tion while solid arrows indicate ROP execution ﬂow)
another (although they may not be in the strict order as
when they are used), each of them would either link itself to
its neighbors or get linked by the neighbors.