---
author: Julia Evans
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 1690
date: '2023-08-12 10:18:28'
editorchoice: false
excerpt: 如果在过去一到三年内，你刚刚不再害怕使用命令行了，是什么帮助了你？
fromurl: https://jvns.ca/blog/2023/08/08/what-helps-people-get-comfortable-on-the-command-line-/
id: 16085
islctt: true
largepic: /data/attachment/album/202308/12/101712ivlgozjogfvfczcg.jpg
permalink: /article-16085-1.html
pic: /data/attachment/album/202308/12/101712ivlgozjogfvfczcg.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 如果在过去一到三年内，你刚刚不再害怕使用命令行了，是什么帮助了你？
tags:
- 命令行
thumb: false
title: 如何在命令行上舒适地生存？
titlepic: true
translator: ChatGPT
updated: '2023-08-12 10:18:28'
---
![](/data/attachment/album/202308/12/101712ivlgozjogfvfczcg.jpg)
有时我与一些害怕使用命令行的朋友交谈，我感到自己给不出好的建议（我已经使用命令行太长时间了），因此我向一些 [Mastodon](https://social.jvns.ca/@b0rk/110842645317766338) 上的人提出了以下问题：
> 
> 如果在过去一到三年内，你刚刚不再害怕使用命令行了，是什么帮助了你？
> 
> 
> （如果你不记得，或者你已经使用命令行舒适地工作了 15 年，则无需回答——这个问题不适用于你 ?）
> 
> 
> 
这个列表还不如我希望的那么长，但我希望通过发布它来收集更多的答案。显然，并没有一个单一的方法适用于所有人，不同的人会选择不同的路径。
我认为舒适使用命令行有三个方面：**减少风险**、**动机**和**资源**。我将先谈谈减少风险，然后是一些动机，并列出一些资源。
### 减少风险的方式
很多人（没错！）对在命令行上意外执行了一些无法撤销的破坏性操作感到担心。
以下是一些人们提到的帮助他们减少风险的策略：
* 定期备份（有人提到他们在上周的一个命令行错误中意外删除了整个家目录，但很幸运他们有备份）。
* 对于代码，尽可能多地使用 `git`。
* 将 `rm` 设置为类似 `safe-rm` 或 `rmtrash` 这样的工具的别名，这样你就不会意外删除不应删除的内容（或者就设置别名到 `rm -i`）。
* 尽量避免使用通配符，使用制表符键补全代替（我的 Shell 会使用 `TAB` 键补全 `rm *.txt` 并显示我将要删除的内容）。
* 使用精美的终端提示符，可以显示当前目录、计算机名称、`git` 分支和你是否具有 root 权限。
* 如果你计划对文件运行未经测试或危险的命令，先备份文件副本。
* 拥有一台专用的测试机器（如便宜的旧 Linux 计算机或树莓派）进行特别危险的测试，例如测试备份软件或分区。
* 对于危险命令，如果有的话，使用 `--dry-run` 选项来查看执行结果而不实际执行操作。
* 在你的 Shell 脚本中构建自己的 `--dry-run` 选项。
这些策略有助于降低在命令行上引发不可逆操作的风险。
### 杀手级应用程序
一些人提到了一个“杀手级命令行应用程序”，这激励他们开始花更多时间在命令行上。例如：
* [ripgrep](https://github.com/BurntSushi/ripgrep)
* jq
* wget / curl
* git（一些人发现他们更喜欢使用 git 命令行界面而不是使用图形界面）
* ffmpeg（用于视频处理）
* yt-dlp
* 硬盘数据恢复工具（来自 [这个精彩的故事](https://github.com/summeremacs/public/blob/main/20230629T180135--how-i-came-to-use-emacs-and-other-things__emacs_explanation_linux_origin_raspberrypi_story_terminal.org)）
还有一些人提到他们对图形界面工具感到失望（例如使用了所有内存，并使计算机崩溃的重型集成开发环境），并因此有动机用更轻量级的命令行工具替代它们。
### 激发人们的命令行技巧
有人提到被其他人在命令行上展示的酷炫功能所激励，例如：
* [命令行工具可以比你的 Hadoop 集群快 235 倍](https://adamdrake.com/command-line-tools-can-be-235x-faster-than-your-hadoop-cluster.html)
* [Gary Bernhardt 的这个“命令行链锯”演讲](https://www.youtube.com/watch?v=ZQnyApKysg4&feature=youtu.be)
### explainshell
有几个人提到了 [explainshell](https://explainshell.com/)，它可以让你粘贴任何命令行指令，并将其分解成不同的部分解释。
### 命令历史、制表符补全等等
有很多小技巧和窍门可以使在命令行上工作更容易，例如：
* 使用向上箭头查看先前的命令
* 使用 `Ctrl+R` 搜索你的 Bash 历史记录
* 使用快捷键在行内导航：`Ctrl+w` （删除一个单词）、`Ctrl+a`（跳转到行首）、`Ctrl+e`（跳转到行尾），以及 `Ctrl+left arrow` / `Ctrl+right arrow`（向前/向后跳转一个单词）
* 将 Bash 历史记录设置为无限制
* 使用 `cd -` 返回上一个目录
* 文件名和命令名的制表符自动补全
* 学习如何使用像 `less` 这样的分页工具阅读手册页或其他大型文本文件（如搜索、滚动等）
* 在 macOS 上使用 `pbcopy`/`pbpaste` 将剪贴板内容复制/粘贴到 stdout/stdin
* 在编辑配置文件之前备份它们
### fzf
很多人提到使用 [fzf](https://github.com/junegunn/fzf) 作为模糊搜索 Shell 历史记录的更好方法。除了作为更好的模糊搜索 Shell 历史记录的工具，人们还提到了一些其他用途：
* 选择 `git` 分支（`git checkout $(git for-each-ref --format='%(refname:short)' refs/heads/ | fzf)`）
* 快速查找要编辑的文件（`nvim $(fzf)`）
* 切换 Kubernetes 上下文（`kubectl config use-context $(kubectl config get-contexts -o name | fzf --height=10 --prompt="Kubernetes Context> ")`）
* 从测试套件中选择要运行的特定测试
一般的模式是使用 `fzf` 来选择某个对象（文件、`git` 分支、命令行参数），`fzf` 将所选对象输出到标准输出，然后将其插入作为另一个命令的命令行参数。
你还可以将 `fzf` 用作工具，自动预览输出并快速迭代，例如：
* 自动预览 `jq` 的输出（`echo '' | fzf --preview "jq {q} < YOURFILE.json"`）
* 自动预览 `sed` 的输出（`echo '' | fzf --preview "sed {q} YOURFILE"`）
* 自动预览 `awk` 的输出（`echo '' | fzf --preview "awk {q} YOURFILE"`）
你可以参考这个思路。
通常，人们会为 `fzf` 的使用定义别名，比如输入 `gcb` 或其他命令，以快速选择要检出的 `git` 分支。
### 树莓派