ma ← Sid, “M SG”, A, EncKDF2(ka)(m), ca1, . . . , autha1, . . .
be a message sent from user A ∈ P . The adversary cannot distinguish EncKDF2(ka)(m) from random after every
participant i ∈ P has processed a receipt from A, acknowledging ma, and A has processed a receipt form i
acknowledging ma. First we show that every ephemeral private key eskia used to compute ciphertext block cai will
never be used again and thus can be deleted. Then we show that without eskia the adversary cannot distinguish
EncKDF2(ka)(m) from random similar to message conﬁdentiality.
The ciphertext block cai is computed using a’s ephemeral private key eskai and i’s ephemeral public key epkia.
ai and can safely delete eskai, so all eskai have been deleted
In cai, a distributes a new ephemeral public key epk(cid:48)
after sending ma.
Now we show eskia can be deleted after i has sent a receipt that acknowledges ma and processed a receipt
from a acknowledging ma. Let the receipt from i be:
ri ← Sid, “RCP T ”, I, ci1, . . . , authi1, . . .
Ciphertext block cia is generated using ephemeral private key eskia and ephemeral public key epk(cid:48)
ai. In cia, i
distributes a new ephemeral public key epk(cid:48)
ia. Let ra be the receipt from a acknowledging ma. The ephemeral
private key eskia can be deleted after i processes both ri and ra. Since receipts do not enforce an order, a may
use eskia when sending ra. After a sends ra she may only send a broadcast message or group update message,
which acknowledges ri and thus uses epk(cid:48)
ia. This shows that eskai and eskia can be deleted after a and i process
the receipts ra and ri.
After keys have been ratcheted Mobile CoWPI provides the same message conﬁdentially property as discussed
previously.
D. Backward Secrecy
Backward secrecy is the property that compromising prior long-term and ephemeral key material does not break
the conﬁdentiality of future messages. If Alice’s long-term or ephemeral state are revealed, all broadcast messages
following Alice’s next receipt provide backward secrecy. Similar to forward secrecy we need to show that Alice’s
compromised ephemeral private keys are not used in the next broadcast message.
Let eskai be Alice’s compromised ephemeral key used for the two-party ciphertext block with user i. We show
that after Alice’s next receipt, the following broadcast message does not use eskai. Let Alice’s receipt be:
ra ← Sid, “RCP T ”, Alice, ca1, . . . , autha1, . . .
Recall that the ciphertext block cai is encrypted with a key generated from eskai and contains a new ephemeral
key esk(cid:48)
ai be the ciphertext block of the broadcast message. Since all messages must acknowledge all prior
receipts, c(cid:48)
ia must use Alice’s ephemeral key epk(cid:48)
ai from her receipt.
ai. Let c(cid:48)
Similar to forward secrecy, after keys have been ratcheted Mobile CoWPI provides message conﬁdentiality as
discussed previously.
E. Participant Consistency
Participant consistency is the property that all users agree on the set of participants in a conversation. We provide
participant consistency under a strong adversarial model. The adversary controls the network and may compromise
all but one provider or other participants. The adversary wins if she can cause two honest users to have different
sets of users for session Sid after processing a setup or group update message and not terminating. Since setup
and group update messages in Mobile CoWPI are part of the protocol transcript and Mobile CoWPI provides
conversation integrity, Mobile CoWPI also provides participant consistency.
13
F. Conversation Integrity
Conversation integrity is the property that all honest participant in a conversation see the same conversation.
That is all honest participants agree on the order of all setup, broadcast, and group change messages. Conversation
integrity considers an adversary that controls the network, can compromise all but one provider, and can compromise
participants in the conversation. The adversary is not allowed to compromise all the providers, otherwise breaking
conversation integrity is trivial, irregardless of the protocol. If all of the providers are compromised the adversary
can simply partition the group.
Consider a conversation between Alice, Bob, and Charlie. After Alice sets up the conversation the adversary
can partition the conversation by never forwarding messages from Charlie to Alice or Bob, and similarly never
forwarding any messages, after the setup message, from Alice or Bob to Charlie. Alice and Bob will believe Charlie
has never come online and continue the conversation, while Charlie will believe Alice and Bob are always ofﬂine
and continue the conversation alone. Thus, at least one provider must be honest.
If at least one provider is honest, to break conversation integrity the adversary must send a message:
Sid, “M SG”, A, EncKDF2(ka)(m), c∗, . . . , auth∗, . . .
where two honest users (Alice and Bob), decrypt different key inputs values from their respective ciphertext that
both decrypt EncKDF2k∗ (m) to different valid plaintext. Let c, d be arbitrary strings; then the probability int that
Deck(c, d) (cid:54)=⊥ for a random key k must be negligible, since an adversary can win the IN T − CT XT game by
simply submitting c, d as a ciphertext query. This holds even when c = Enck(cid:48)(m, d) for some ﬁxed k(cid:48). Thus if the
adversary makes at most q queries to KDF2, the probability of ﬁnding a k(cid:48) = KDF2(k) breaking conversation
integrity in this way is at most qint.
If the adversary cannot ﬁnd a valid ciphertext under two random keys, to break conversation integrity the
adversary must convince two participants to accept different messages as the ith message of conversation Sid. The
honest participants only accept a message after receiving it from all providers and an honest provider will forward
all messages in a consistent order to all participants. The adversary must be able to send a message to an honest
participant A as if it came from honest provider S. If the adversary can inject such a message, it must be able to
do one of the following:
1)
2)
Compute a two-party NAXOS key between A and S in their two-party channel, allowing the adversary to
send any message to A.
Break the INT-CTXT property of the AEAD scheme of the two-party channel between A and S.
G. Deniability
Recall deniability as discussed in Section II. Deniability is provided if a single user can run a simulator and
produce a simulated transcript that is indistinguishable from transcript of a real protocol execution. The simulator
must only take as input information that is known to a single user. The distinguisher is given all of the long-term
secret information and any secret state information of the simulating user. This requires the simulator to also output
any state information of the user.
We now detail the simulator. Let Alice be the party running the simulator. She acts as all parties in the
conversation and behaves as normal expect when performing NAXOS key agreements. The NAXOS key agreements
are the only part of the Mobile CoWPI protocol that Alice cannot perform honestly as she does not have the secret
key material of all participants. Their are two cases of the NAXOS key agreement she needs to simulate:
1) When she is a participant of the NAXOS key agreement.
2) When she is not a participant of the NAXOS key agreement.
In the ﬁrst case let Bob be the other participant. Alice may have a valid ephemeral public key of the other
participant if she is sending the SETUP message. Otherwise she generates an ephemeral key epkb for the other
participant as a random group element. She then computes the NAXOS key as she normally would.
If she has a valid ephemeral key for Bob the NAXOS key agreement is a real key agreement. If she generates
a random key from Bob the distinguisher must distinguish between the random key and a real NAXOS ephemeral
key epkb ← gH({0,1}l,lskb). Since H is modeled as a random oracle the distinguisher can only win if it queries the
random oracle on all 2l possible ephemeral secret keys with Bob’s long-term secret key. Thus the adversary cannot
tell epkb apart from a random group element with less than 2l oracle queries.
14
Fig. 1: The wallclock and cpu time (25th, 50th, and 90th percentile) to send a protocol message.
In the second case let Bob and Charlie be the two participants. Alice will have a valid ephemeral public key
for one of them if they are sending a SETUP message. Alice will generated any ephemeral keys she does not have
as random group elements as before. She then generates the NAXOS key as a random symmetric key.
As before, the distinguisher cannot tell if the randomly generated ephemeral keys are real with less than 2l
oracle queries. Since the distinguisher does not know the ephemeral secret key of either party it cannot distinguish
between a random key and a real NAXOS key.
Using these NAXOS simulators, Alice can simulate all parties of a Mobile CoWPI protocol session and produce
a simulated transcript that is indistinguishable from a real transcript. Thus, Mobile CoWPI provides message and
participant deniability.
1) Message Unlinkability: Message unlinkability is the property that proving authorship of any one message
does not prove authorship of any additional message. This property has not been formally deﬁned previously. It
was ﬁrst discussed in relation to mpOTR [8], as mpOTR is considered not to provide message unlinkability. This
is due to mpOTR using the same ephemeral signing key to sign every message. Thus, the distinguisher having
knowledge of the ephemeral veriﬁcation key can verify every message sent by a user. Since Mobile CoWPI does
not use signatures and all authentication material is only used for a single message Mobile CoWPI provides message
unlinkability. In Appendix A, we prove a stronger version of message unlinkability that provides the distinguisher
with a protocol message from a real transcript but can still not distinguish the full transcript from a simulated
transcript.
H. Anonymity Preserving
A protocol preserves anonymity if the protocol does not undermine any anonymity features of the underlying
transport protocol. The adversarial model for this property is that of a passive network adversary, e.g. the user’s
internet service provider. Mobile CoWPI preserves anonymity as it does not reveal the identity or long-term key
of a user in plaintext. This is achieved by using anonymous Difﬁe-Hellman to initiate the connections between the
clients and providers.
If an adversary can break the anonymity preserving property they must be able to do one of the following:
1)
2)
Compute the anonymous DH shared secret between the client and provider.
Break the IND$-CPA property of the AEAD scheme.
V. EVALUATION
We implemented Mobile CoWPI as a Java server and client library. Since all protocol messages can be processed
without interaction between clients the overhead of Mobile CoWPI is low. To measure the run time overhead we
deployed Mobile CoWPI with two servers, a routing server and a single mirror. Only two servers are necessary
since conversation integrity only requires a single honest provider. The routing server is run on a $10 dollar/month
linode [12] virtual private server hosted in New Jersey. The mirror is hosted at University of Tennessee, Knoxville
15
01020304050Group Size050100150200Time (ms)Wall TimeCPU TimeSend Protocol Message TimeFig. 2: The message size in bytes to send a message.
on a desktop computer with an Intel Core i7-6700K processor. The client recording measurements was running
on a desktop computer at the University of Minnesota, with an Intel Xeon processor. The network round-trip-time
between all locations is 31ms. We ran the measurements with 2 to 50 participants in a conversation and sent
100 messages for each size of conversation. These measurements show Mobile CoWPI is practical for real world
deployments.
Figure 1 shows the time in milliseconds that it takes for a user to send a protocol message and receive a protocol
message. This represents the time it takes to display the message. Figure 2 shows the outgoing message size in
bytes when sending a message. All outgoing messages are O(n + s) in size where n is the number of participants
and s is the number of servers. This is due to the authentication being pairwise with all receivers. We discuss why
this overhead is necessary in Section VI. Pairwise ciphertext blocks does allow for very little overhead to receive
a message. Broadcast and receipt messages are constant size while setup and group update message must be O(n)
in size to distribute the list of participants. The overhead of Mobile CoWPI for incoming messages is less than 300
bytes.
VI. LIMITATIONS
In this section we detail the limitations of Mobile CoWPI along with restrictions enforced by the system model.
A. Pairwise Ciphertext Blocks
The pairwise ciphertext blocks attached to every protocol message cause the most overhead in Mobile CoWPI.
We use these pairwise ciphertext blocks to provide deniable message author authentication. We argue that the
pairwise nature of our solution seems to be an inherent result of the system properties of deniability and authorship
authentication. In particular, we now sketch a proof that a scheme in which each user uses a single public and
private key pair to deniably authenticate messages to the full group is impossible.
Consider the system model property that a participant should be able to authenticate the author of a message
even when all other participants are ofﬂine. This means message authentication must be non-interactive. Also recall
that deniability requires a user to be able to simulate a conversation even if the distinguisher has access to the
long-term private keys of all participants. It must be the case that a user can simulate an authorship authentication
that the distinguisher will accept but a real user will reject. However, the distinguisher has the real users’ secret
keys and can use the same veriﬁcation method to distinguish the simulated authorship authentication from a real
one. A more detailed discussion is provided in Appendix A
Laguillaumie and Vergnaud provide a multi-designated veriﬁer signatures [10] scheme providing signatures that
can be validated by anyone and that provide a source hiding property that the signature was either generated by the
author or the group of receivers. This scheme could be used for deniable group messaging, however it is a weaker
form of deniability than Mobile CoWPI provides since simulation requires all users. Additionally, Mobile CoWPI
is built on well understood efﬁciently implementable primitives.
16
01020304050Group Size200040006000BytesSend Protocol Message SizesB. Multiple Providers
Requiring multiple providers for conversation integrity adds difﬁculty to deploying Mobile CoWPI. However,
if this requirement cannot be met the conversation integrity property could be modiﬁed to include a time aspect.
Most users are expected to only be ofﬂine for short periods of time, for example less than one week. It is also the
case that after Alice receives a receipt from Bob, she can be conﬁdent that Bob’s transcript provides conversation
integrity with her transcript. Thus, if every user sends a receipt after every message, we can add a time constraint to
the conversational integrity property and warn users after a time limit (one week) of not having seen a receipt from
every other participant. We chose to require multiple providers for Mobile CoWPI as it provides much stronger
conversation integrity for every message. (And at least one providers is required for ofﬂine participants to receive
messages)
C. Denial of Service
Mobile CoWPI does not protect against denial of service attacks from compromised servers: a server can simply
not forward conversation messages to a participant. Since the participant must receive the message from every server,
the participant will simply keep waiting and not make progress. A potential solution to this problem would be to
have multiple servers perform a byzantine agreement on the messages of a conversation and then participants could
process a message after receiving it from a majority of servers. This changes the trust model from a single honest
server to a majority of honest servers and it is not straight forward how this modiﬁcation would affect the deniability
properties of the conversation.
Mobile CoWPI also does not offer denial of service protection against a compromised participant. A compro-
mised participant can send an invalid ciphertext block c∗ to a victim. The victim will terminate the session and
all non-victims will not know of the attack. The implementation should warn the user of the attack allowing them
to notify the other participants out-of-band. It may be possible to mitigate this issue by modifying the ciphertext
blocks to provide zero knowledge proofs of correctness that the servers can verify. However, we do not know of
an efﬁcient mechanism that would allow for this and also preserve message deniability and unlinkability.
These denial of service limitations are not unique to Mobile CoWPI. All existing protocols in the literature and
in wide deployment are also vulnerable to denial of service by the server or participants.
D. Receipt Ordering
As described in Section III, receipts do not acknowledge other receipts. To explain why we made this decision,
consider the case where receipts are required to acknowledge all previous receipts. Upon receiving a broadcast
message, all users will attempt to send a receipt immediately but only one receipt will be accepted. The remaining
n− 1 will be rejected as they do not acknowledge the accepted receipt. Then the remaining n− 1 users will attempt
to send the another receipt with only one being accepted. This issue continues until all users have a receipt accepted
and creates a signiﬁcant amount of wasted trafﬁc which delays conversation progress.
VII. RELATED WORK
Off-The-Record (OTR) [3] is the ﬁrst academic work to look at providing private instant messaging. OTR
provides message conﬁdently, integrity, authentication, repudiation, and unlinkability. However OTR does not
provide participant repudiation or conversation integrity. The main limitation of OTR is it only supports conversations
between two individuals. There is not a straight forward mechanism to apply OTR in a group setting.
Multiparty OTR (mpOTR) [8] tries to provide the properties of OTR for group conversations. At a high
level it works as follows. First, All participants setup pairwise secure channels using a deniable authenticated
key agreement (DAKE). Then over the secure channels the participants execute a Group Key Agreement (GKA) to
compute an ephemeral encryption key. The users also distribute ephemeral veriﬁcation keys used to sign conversation
messages. The participants also compare a hash of the group information to enforce participant consistency. When
Alice wants to send a message to the group she encrypts the message with the ephemeral group key then signs the
ciphertext with her ephemeral veriﬁcation key. Then broadcasts the ciphertext and signature to all participants of the
conversation. All recipients can verify the signature is from Alice and decrypt the message. To enforce conversation
integrity, at the end of a conversation the participants execute a byzantine agreement on a lexographically ordered list
of the messages. Even though mpOTR provides participant repudiation via the DAKE during setup it does not provide
message unlinkability due to the use of the veriﬁcation keys. With knowledge of a veriﬁcation key a distinguished
can verify all messages authored by a particular user. mpOTR also lacks strong conversation integrity since the
transcript consistency is not checked until the conversation has ended and is only checked on a lexographically
order transcript. This requires mpOTR to operate in the non-mobile, synchronous, model with static participants.
17
Group Off-The-Record (GOTR)[13] utilizes a “hotplugable” Bermister-Desmedt GKA to provide secure mes-
saging for dynamic groups. To set up a conversation all the users ﬁrst set up secure pairwise channels. Then over
those channels the participants execute the GKA. When sending a message Alice encrypts the message with her
sending key generated by the GKA. Then periodically the participants perform a transcript consistency check to