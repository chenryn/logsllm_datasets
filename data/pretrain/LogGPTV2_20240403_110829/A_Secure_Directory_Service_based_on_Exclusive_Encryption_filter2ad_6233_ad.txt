encrypted 
name 
Decrypt 
with F–1 
encrypted 
case info
Decrypt 
with E–1 
encoded name 
case info 
t
n
e
i
l
c
s
p
e
t
s
Decode 
reversed name 
Reverse 
decased name 
Restore 
case 
mapped name 
Demap 
name 
Figure 3. Exclusive encryption procedure 
Figure 4. Exclusive decryption procedure 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:31:41 UTC from IEEE Xplore.  Restrictions apply. 
4.3.  Examples 
5.
Other issues 
Table  1  presents  two  prefix  tables  for  a  very  limited 
alphabet,  in  which  the  only  legal  characters  are  ‘a’,  ‘b’, 
underscore, period, and space (shown with the symbol (cid:0) ).  
Since period and space are not legal trailing characters, the 
code table for the first character (after reversing the string) 
has no codes for these characters.  
With neither reserved strings nor case information, and 
using an identity function as a 4-bit block cipher, Table 2 
shows  the  exclusively  encrypted  ciphertext  for  all  legal 
one- and two-character names.  It also shows the plaintext 
for all possible values of a single ciphertext block. 
Walking through one example, the name “bb” reverses 
to itself, and it has no trailing underscores.  The first ‘b’ of 
the reversed name is encoded using the first code table to 
1,  and  the  second  ‘b’  is  encoded  using  the  standard  code 
table to 01, from which the trailing one is removed since it 
is  the  last  character.    The  encoded  name  is  thus  0  (no 
trailing underscores) 1 (‘b’) 0 (‘b’ less the trailing one) = 
010.  This is encrypted by prepending a one, preceded by 
no zero bits to pad it up to a multiple of 4 bits.  Applying 
the identity function yields 1010. 
Table 1. Example prefix codes for 5-character alphabet 
Character  First prefix code  Std. prefix code
_ 
a 
b 
. 
00 
01 
1 
000 
001 
01 
10 
11 
Table 2. Encryptions and decryptions with identity cipher 
Plaintext  Ciphertext    Ciphertext  Plaintext 
_ 
a 
b 
_ _ 
_a 
_b 
a_ 
aa 
ab 
b_ 
ba 
bb 
._ 
.a 
.b 
(cid:0) _ 
(cid:0) a 
(cid:0) b 
0001 
0100 
0010 
0011 
1100 
0110 
0010 0000  
0010 0100  
0001 0100  
0001 0000  
0001 0010  
1010 
1000 
1001 
0101 
0001 0001  
0001 0011  
1011 
0000 
0001 
0010 
0011 
0100 
0101 
0110 
0111 
1000 
1001 
1010 
1011 
1100 
1101 
1110 
1111 
illegal 
_ 
b 
_ _ 
a 
.b 
_b 
_ _ _ 
._ 
.a 
bb 
(cid:0) b 
_a 
_.b 
__b 
_ _ _ _ 
In this section, we discuss several somewhat tangential 
issues,  such  as  preventing 
leakage  of  name-length 
information,  providing  privacy  of  information  other  than 
entry  names,  dealing  with  revisions  to  the  Unicode 
standard,  and  offering  the  Windows  semantics  of  making 
ownership not necessarily imply read or write access. 
5.1.  Hiding name-length information 
Although  exclusive  encryption  prevents  unauthorized 
readers  from  knowing  the  name  of  an  entry,  it  leaks  the 
approximate  length  of  the  name.    Specifically,  the  length 
(in blocks) of the ciphertext name places upper and lower 
bounds on the length (in characters) of the plaintext name.  
We  can  prevent  this  leakage,  at  the  expense  of  placing  a 
somewhat quirky restriction on the length of entry names, 
by modifying the procedure as follows. 
First,  we  must  establish  a  length  L  that  all  ciphertext 
names  will  have.    This  must  be  a  multiple  of  the  block 
size, and it in turn limits the length of plaintext names in a 
convoluted  manner:    Since  characters  are  encoded  using 
variable-bit-length encoding, the length of the ciphertext is 
only approximately related to the length of the plaintext. 
Before encrypting, rather than padding a name to bring 
its total length up to a multiple of the cipher block size, we 
pad it so as to bring its length up to L, unless the encoded 
name  is  too  long,  in  which  case  it  cannot  be  encrypted 
using this technique.  The padding is the same as before: a 
one bit preceded by as many zero bits as necessary. 
This  technique  is  surjective  except  that  it  cannot 
produce a padded value that is all zeroes.  However, rather 
than  using  a  modified  cipher  that  enables  the  server  to 
check for this case, it is simpler to map this special case to 
a valid legal name that is too long to be encrypted by the 
standard  procedure.    One  obvious  candidate  is  the  string 
whose encoding is L zero bits followed by a one bit. 
If  we  use  an  all-or-nothing  transform  [33]  to  hide 
partial  name  matches,  it  should  be  applied  to  the  string 
after it is padded, rather than before; otherwise, it will leak 
length information through matching zero prefix blocks. 
5.2.  Obfuscating non-name information 
Although our directory service provides privacy against 
unauthorized  readers,  this  privacy  only  concerns  entry 
names.  It would be nice if we could also prevent leakage 
of other data, such as file sizes, timestamps, attributes, and 
directory  structure  (all  of  which  are  above  lumped  into 
“reference”  information),  as  well  as  access  authorization.  
Sizes  and  timestamps  seem  impossible  to  hide  from  the 
servers,  because  the  servers  themselves  directly  witness 
the data represented by these fields, namely when a file is 
created  or  written  and  how  much  space  it  consumes.    On 
the other hand, attributes are straightforward to hide using 
standard encryption.  For items that fit neither of these two 
classes, one approach to improving privacy is obfuscation. 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:31:41 UTC from IEEE Xplore.  Restrictions apply. 
(cid:0)
Obfuscating  access  authorization  is  straightforward.  
The owner of a directory can insert ACEs for unauthorized 
users  and  set  their  encrypted  directory  keys  to  garbage 
values, and the server has no way of knowing  whether or 
not the ACEs belong to authorized readers.  Furthermore, 
the owner can insert ACEs for randomly generated public 
keys that correspond to no actual user, and for these it can 
even  set  the  write-authorization  bit,  since  no  one  (other 
than the owner) knows the corresponding private keys. 
Obfuscating structural information about the number of 
entries in a directory is a considerably harder problem; in 
fact, we do not currently have a solution.  To hide the size 
of  a  large  directory  by  splitting  it  into  smaller  directories 
requires  a  means  of  partitioning  the  entries  that  still 
enables  the  servers  to  enforce  directory-wide  name 
uniqueness  but  does  not  divulge  the  logical  coherence  of 
the partitions to the servers.  Furthermore, maintaining the 
guarantee that no two correct clients see different views of 
the  same  directory  requires  a  means  for  enforcing 
consistent  access  controls  among  all  partitions  of  a 
directory,  again  without  betraying  this  coherence  to  the 
servers.    Even  if  we  were  to  devise  such  a  mechanism,  it 
seems likely that traffic analysis could obviate any benefit 
from this obfuscation. 
5.3.  Unicode revision and case insensitivity 
In  developing  this  directory  service,  we  discovered  a 
problem inherent in the use of case-insensitive comparison 
for determining duplicate entry names.  Since the Unicode 
standard  [41]  is  evolving,  many  character  codes  are  not 
yet  defined.    Windows  allows  directory  entry  names  to 
contain undefined characters (and this is in fact necessary 
for  portability  between  systems  with  different  language 
packs installed), but it makes case-insensitive comparisons 
only for characters that have been defined (and installed).  
This can lead to a situation in which two names are not at 
first determined to be identical but then are later judged to 
be  identical  following  a  revision  of  the  Unicode  standard 
(and installation of a language pack). 
There are three options for dealing with this issue: 
  Abandon the guarantee that no two entries in the same 
(cid:127)
directory have the same name. 
  Abandon case-insensitive name comparison. 
(cid:127)
  Partition the set of allowed characters into two subsets, 
(cid:127)
one case-insensitive and the other case-sensitive. 
The  first  of  these  options  is  what  Windows  does; 
however,  it  breaks  a  reasonable  guarantee  upon  which 
applications may rely.  It is not clear that this poses a true 
security  risk,  but  since  it  has  been  shown  that  violating  a 
system’s  assumptions  about  its  input  data  can  provide  an 
entrée for attackers [32], we are uncomfortable taking this 
approach. 
The second option is sensible and internally consistent, 
but  it  changes  the  semantics  that  most  Windows  users 
expect  from  their  file  systems,  and  it  threatens  backward 
compatibility  for  the  large  installed  base  of  applications 
that have evolved with the current semantics. 
The  third  option,  though  somewhat  counterintuitive,  is 
our  chosen  approach.   There are  two  obvious  alternatives 
for  selecting  a  case-insensitive  subset:    First,  we  could 
implement case insensitivity for a particular version of the 
Unicode  standard,  (e.g.,  3.2.0  [42]),  thereby  providing 
broad linguistic coverage.  Second, we could select a small 
subset – such as Basic Latin or Latin-1 – that we expect to 
cover the majority of use for actual directory entry names.  
In  particular,  the  Basic  Latin  subset  is  so  important  for 
backward compatibility that the UTF-8 standard [44]  was 
developed  specifically  to  address  this  concern.    This 
second  alternative  has  the  additional  merit  of  drastically 
reducing  the  required  size  for  code  tables  if  a  two-stage 
prefix encoding is employed, since the vast majority of the 
character space can be encoded with the identity function. 
5.4.  Ownership without read or write access 
Windows  allows  the  owner  of  a  directory  not  to  have 
read or write access, which our directory service does not.  
We require the owner to have read access; otherwise, she 
could  not  re-key  the  directory  when  removing  a  reader.  
However, in Windows, an owner always has authorization 
to  grant  herself  read  or  write  access,  so  lack  of  access  is 
merely  a  convenience  to  prevent  unintentional  reading  or 
writing.   We can easily provide a similar convenience by 