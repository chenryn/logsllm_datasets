# Pseudo Constant Time Implementations of TLS Are Only Pseudo Secure

**Authors:**
- Eyal Ronen, Weizmann Institute of Science, eyal.ronen@weizmann.ac.il
- Kenneth G. Paterson, Royal Holloway, University of London, k.paterson@rhul.ac.uk
- Adi Shamir, Weizmann Institute of Science, adi.shamir@weizmann.ac.il

## Abstract
Despite the long history of attacks and the availability of better options (e.g., AES-GCM), approximately 10% of TLS connections still use CBC-mode cipher suites. In this work, we present three new types of attacks against four popular, fully patched implementations of TLS (Amazon’s s2n, GnuTLS, mbed TLS, and wolfSSL) that have adopted "pseudo constant time" countermeasures against the Lucky 13 attack on CBC-mode. Our attacks combine several variants of the PRIME+PROBE cache timing technique with a new extension of the original Lucky 13 attack. These attacks are effective in a cross-VM setting and can recover most of the plaintext with only a moderate number of TLS connections. Additionally, we uncovered serious but easily patchable bugs in all four TLS implementations, which in three cases lead to Lucky 13-style attacks that can be mounted remotely without access to a shared cache. Our findings highlight that adopting pseudo constant time countermeasures is insufficient to achieve real security in TLS implementations using CBC mode.

**Keywords:** Lucky 13 attack, TLS, Side-channel cache attacks, Plaintext recovery

## 1. Introduction
"All secure implementations are alike; each insecure implementation is buggy in its own way." – after Leo Tolstoy, Anna Karenina.

### 1.1 Background
The celebrated Lucky 13 attack on TLS [3] builds on Vaudenay's padding oracle attack [33,9] and exploits small timing variations in the decryption processing of CBC-mode cipher suites. This enables remote plaintext recovery of TLS-protected data, such as HTTP cookies, that are sent repeatedly in predictable locations within a connection. The timing variations arise from TLS's MAC-then-pad-then-encrypt construction in CBC mode, where padding must be removed before integrity checks are performed. An attacker can exploit CBC-mode's "cut and paste" property to place target ciphertext blocks at the end of TLS records, leading to timing differences between good and bad padding. These differences can be translated into information about the target plaintext blocks. Similar techniques were used in the POODLE attack [29], specific to SSL's padding construction.

Implementation-specific variants of the Lucky 13 attack have also been discovered [2,5,4]. The TLS developer community responded in various ways. OpenSSL, used in Apache and NGINX, and its BoringSSL fork used by Google, added approximately 500 lines of code to implement fully constant-time, constant-memory-access decryption processing. Despite this, an initial patch for AES hardware support was not properly applied, enabling an even worse attack [32].

Other implementations, such as Amazon’s s2n, GnuTLS, and wolfSSL, adopted "pseudo constant time" solutions. For example, s2n attempted to equalize MAC verification time by adding dummy HMAC computations and including a random timing delay. However, Irazoqui et al. [5] demonstrated how to re-enable the Lucky 13 attack in a cross-VM setting using cache-based "FLUSH+RELOAD" attacks. Their attacks work on deduplication-enabled platforms (e.g., those implementing Kernel SamePage Merging, KSM, or related technologies). While PolarSSL (now mbed TLS) patched against this attack, GnuTLS and wolfSSL did not. However, since deduplication is currently disabled across different VMs by Infrastructure-as-a-Service (IaaS) providers [23], no practical cross-VM attack is currently known.

More broadly, the Lucky 13 attack and vulnerabilities in RC4-based cipher suites led developers to implement and deploy TLS 1.2 with AES-GCM-based cipher suites. Today, more than 80% of TLS connections use AES-GCM. However, over 10% of TLS traffic still relies on CBC-mode cipher suites in the original MAC-then-pad-then-encrypt construction (see Table 1).

| Cipher Suite | Percentage |
|-------------|------------|
| RSA AES 256 CBC SHA | 4.4% |
| RSA AES 128 CBC SHA | 1.7% |
| ECDHE RSA AES 256 CBC SHA384 | 1.2% |
| ECDHE RSA AES 256 CBC SHA | 1.2% |
| ECDHE RSA AES 128 CBC SHA | 1.1% |
| ECDHE RSA AES 128 CBC SHA256 | 1.1% |

**Table 1: Distribution of CBC-mode TLS cipher suites.**
**Source: ICSI Certificate Notary, 24/04/2018 [1]**

Notably, CBC-mode cipher suites relying on HMAC with SHA-384 for integrity have become more popular than those using SHA-256 and SHA-1, possibly due to the faster per-byte performance of SHA-384 on modern 64-bit CPUs. This 10% figure underscores the ongoing importance of securing CBC-mode cipher suites and highlights the need for continued study and potential elimination if new vulnerabilities are found.

### 1.2 Our Contributions
Our main contribution is the presentation of novel cache timing attacks on a representative set of TLS implementations that did not adopt the fully constant-time/constant-memory-access approach to address Lucky 13 but instead used pseudo constant time fixes. We demonstrate practical attacks on these fully patched implementations, including those previously resistant to cache-based attacks like [5].

We assume the existence of a co-located adversary running on the same CPU as the victim's process or VM, with a shared Last Level Cache (LLC). Unlike [5], our attacks do not rely on memory deduplication technologies like KSM, which are currently disabled by IaaS providers [23]. We use three different LLC side-channel based attack techniques to target s2n, GnuTLS, mbed TLS, and wolfSSL, providing proof-of-concept (PoC) attacks for each. Our attacks leverage leakage about the amount of TLS padding in the plaintext underlying a chosen ciphertext. Using standard "JavaScript in the browser" methods, this leakage can be exploited for plaintext recovery, such as TLS cookies. We show how to fine-tune the attacks to improve performance by three orders of magnitude. We also introduce a novel variant of the Lucky 13 attack that uses long TLS padding patterns, which should be of independent interest.

**Implementation Bugs in Lucky13 Countermeasures:**
As a secondary contribution, we identify that all reviewed pseudo constant time implementations of TLS (s2n, GnuTLS, mbed TLS, wolfSSL) have bugs in their pseudo-constant-time code when SHA-384 is selected as the hash algorithm in HMAC. These bugs, which can be fixed by changing constants related to the SHA-384 hash size, render the decryption operations non-constant time and vulnerable to simple plaintext recovery attacks. Moreover, we show that GnuTLS remains vulnerable to a new variant of the original Lucky 13 attack even for SHA-256, despite being specifically patched against it.

**New Variants of the PRIME+PROBE Attack:**
1. **Synchronized Probe PRIME+PROBE Attack:** This attack can sense the time between an event controlled by the attacker (e.g., sending a message to the target) and a non-constant-time memory access. By synchronizing the cache probing, we can get an oracle for the secret value.
2. **Delayed Probe PRIME+PROBE Attack:** This attack is useful when the side-channel probing resolution is not high enough to perform multiple measurements in a short interval. By introducing a delay, we can distinguish between two possible memory access times.
3. **PostFetch Attack:** This attack helps overcome large cache lines that reduce cache attack resolution. By probing the cache line containing the bytes after the array, we can distinguish between accessing just the first few bytes and accessing most of the array.

### 1.3 Implications of Our Results
Our results are surprising given the extensive efforts to correct and verify CBC-mode and HMAC implementations in TLS over the past five years. For example, s2n was repeatedly patched in response to Lucky 13-style attacks [2,4]. Its principal author, Colm MacCarthaigh, wrote a detailed blog post explaining AWS's approach to defending against such attacks [24], emphasizing the balance between code simplicity and security. The vulnerable s2n HMAC code had also passed formal verification [13,10]. Our work shows that nothing short of the full "belt and braces" approach adopted in OpenSSL is sufficient to provide robust defense against all forms of Lucky 13-style attacks. While our cache-based timing attacks differ from previous methods, they highlight the need for a more comprehensive and robust approach to security in TLS implementations.

### 1.4 Disclosure
We disclosed the vulnerabilities to all vendors mentioned in the paper and suggested a coordinated public disclosure on July 25, 2018. The status of these disclosures is as follows:
- **wolfSSL:** Switched to the full constant-time solution in release 3.15.37 (released June 20, 2018).
- **mbed TLS:** Released a security advisory on July 25, 2018. CVEs 2018-0497 and 2018-0498 were assigned to the SHA-384 bug and the cache-based timing attacks, respectively. Both CVEs were rated "high severity," and users were advised to upgrade to new releases or disable the CBC-mode cipher suite if not possible. New releases provide interim fixes, with a full solution to follow.
- **GnuTLS:** Made changes to their code on June 12, 2018, and in releases 3.6.3, 3.5.19, and 3.3.30 on July 16, 2018. These changes address the SHA-384 constants and adopt a new variant of the pseudo constant-time approach. However, we believe the GnuTLS code is still vulnerable to the attacks presented in our paper due to padding-dependent memory accesses. Red Hat assigned CVEs 2018-10844, 2018-10845, and 2018-10846 to the issues.
- **Amazon’s s2n:** Plans to remove CBC-mode cipher suites from their list of preferred ciphers and replace their implementation of CBC-mode decryption with the fully constant-time one from BoringSSL.

### 1.5 Paper Structure
- **Section 2:** Provides further background on the Lucky 13 attack and cache attacks.
- **Section 3:** Describes the bugs we found in the various implementations of the Lucky 13 countermeasures.
- **Section 4:** Details the main contribution of our paper, including the new cache timing attacks and their implications.