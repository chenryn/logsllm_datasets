title:Securing Memory Encryption and Authentication Against Side-Channel
Attacks Using Unprotected Primitives
author:Thomas Unterluggauer and
Mario Werner and
Stefan Mangard
Securing Memory Encryption and Authentication Against
Side-Channel Attacks Using Unprotected Primitives
Thomas Unterluggauer, Mario Werner, and Stefan Mangard
Graz University of Technology
Email: {ﬁrstname.lastname}@iaik.tugraz.at
ABSTRACT
Memory encryption is used in many devices to protect mem-
ory content from attackers with physical access to a device.
However, many current memory encryption schemes can be
broken using Diﬀerential Power Analysis (DPA). In this work,
we present Meas—the ﬁrst Memory Encryption and Authen-
tication Scheme providing security against DPA attacks. The
scheme combines ideas from fresh re-keying and authentica-
tion trees by storing encryption keys in a tree structure to
thwart ﬁrst-order DPA without the need for DPA-protected
cryptographic primitives. Therefore, the design strictly limits
the use of every key to encrypt at most two diﬀerent plaintext
values. Meas prevents higher-order DPA without changes to
the cipher implementation by using masking of the plaintext
values. Meas is applicable to all kinds of memory, e.g., NVM
and RAM, and has memory overhead comparable to existing
memory authentication techniques without DPA protection,
e.g., 7.3% for a block size ﬁtting standard disk sectors.
Keywords
side-channel attacks; DPA; memory; encryption; authentica-
tion
1.
INTRODUCTION
Memory encryption is the standard technique to protect
data and code against attackers with physical access to
a memory.
It is widely deployed in state-of-the-art sys-
tems, such as in iOS [2], Android [15], Mac OS X [1], Win-
dows [12], and Linux [26, 32]. Typical encryption schemes
employed in these systems are Cipher-Block-Chaining with
Encrypted Salt-Sector IV (CBC-ESSIV) [13], Xor-Encrypt-
Xor (XEX) [37], and XEX-based Tweaked codebook mode
with ciphertext Stealing (XTS) [21]. These schemes success-
fully prevent attackers from accessing memory content when
the device is shut oﬀ and the encryption key is not present
on the device, e.g., an encryped USB ﬂash drive.
Contrary to that, in many situations in the Internet of
Things (IoT), a physical attacker is in possession of a running
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02 - 06, 2017, Abu Dhabi, United Arab Emirates
c(cid:13) 2017 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3052985
device, or can turn a device on. In such cases, the attacker
can, for example, observe and tamper with data in RAM. As
a result, memory encryption and tree-based authentication
techniques, e.g., Merkle trees [30], Parallelizable Authenti-
cation Trees [18] (PAT) and Tamper Evident Counter [11]
(TEC) trees, are increasingly deployed to protect data in
RAM. As one prominent example, RAM encryption and au-
thentication was only recently adopted in consumer products
with Intel SGX [17]. Similarly, there are eﬀorts to encrypt
RAM on AMD [23] and ARM systems [20] as well.
However, whenever a physical attacker has access to a
running device, the attacker is also capable of performing
side-channel attacks. This means that the attacker cannot
just read and tamper with the memory, but is also capable
of measuring side-channel information, such as the power
consumption of the hardware, during the encryption and
authentication of the memory. The attacker can then exploit
such side-channel information to learn the secret key used for
memory encryption and authentication. In practice, an at-
tacker performing both passive, e.g., bus probing, and active,
e.g., data spooﬁng, attacks on the memory, is also capable
of observing side-channel information, e.g., by attaching an
osilloscope for measuring the power, during the actual en-
cryption or authentication process. As such, side-channel
attacks are realistic for any physical attacker when given
access to a running device. One particularly strong class
of side-channel attacks is Diﬀerential Power Analysis [25]
(DPA), which allows successful key recovery from observ-
ing the power consumption during the en-/decryption of
several diﬀerent data inputs. DPA attacks eﬀectively accu-
mulate side-channel information about the key being used
by observing multiple en-/decryptions under the same key.
However, contemporary memory encryption and authen-
tication schemes that protect memory against physical at-
tackers, e.g., [10, 17, 34, 38, 42, 43], lack the consideration of
side-channel attacks and DPA in particular. More concretely,
the security of contemporary schemes is build upon the as-
sumption of a microchip that is secure against active and
passive adversaries and which does not leak any informa-
tion about the key via side channels. However, as pointed
out before, the assumption that side-channel attacks on mi-
crochips are infeasible is too strong. In fact, DPA attacks
were quite recently shown to pose a serious threat to memory
encryption on general-purpose CPUs. While the DPA pre-
sented in [45] breaks many contemporary memory encryption
schemes, the practical attacks in [3, 27, 40, 45] document the
feasibility of DPA on memory encryption and authentication
on state-of-the-art systems.
690In principle, there exist techniques to protect cryptographic
primitives against DPA attacks. For example, an implemen-
tation can be protected by changing the hardware such as
by applying masking techniques [8, 16], which use random-
ization to make the side-channel information independent
from the actually processed value. However, protecting im-
plementations of cryptographic primitives against DPA is
expensive and a tough problem in an active ﬁeld of research
existing for almost two decades. The massive overheads for
DPA-protected implementations range between a factor of
four and a few hundred [4, 7, 33, 35] and would thus render
current memory encryption and authentication schemes in
latency sensitive applications impractical. In contrast, more
eﬃcient solutions are in sight when considering side-channel
protection throughout the cryptographic design and looking
for potential synergies.
Contribution. In this paper, we solve the problem of
protecting data in memory against physical attackers in
possession of a running device. More concretely, we solve
the stringent problem of DPA attacks on memory encryption
and authentication without additional memory overhead over
conventional schemes.
We approach the topic with a detailed analysis of the
security of fresh re-keying [24, 29] as a promising mechanism
to prevent DPA on memory encryption. While re-keying
completely thwarts DPA on the cryptographic key, our major
result here is that re-keying provides merely ﬁrst-order DPA
security for the memory content itself.
In particular, we
show that the read-modify-write access patterns inevitably
occuring in encrypted memory allow for proﬁled, higher-
order DPA attacks that leak constant plaintext data when
re-keying is applied to memory encrpytion.
Second, we build on our analysis and present Meas—the
ﬁrst Memory Encryption and Authentication Scheme secure
against DPA attacks. The scheme is suitable for all kinds of
memory including random access memory (RAM) and non-
volatile memory (NVM). By making use of synergies between
fresh re-keying and authentication trees [11, 18, 30], Meas
simultaneously oﬀers security against ﬁrst-order DPA and
random access to all memory blocks. In more detail, Meas
uses separate keys for each memory block that are stored in
a tree structure and changed on every write access in order
to strictly limit the use of each key to the encryption of two
diﬀerent plaintexts at most. For higher-order DPA security,
Meas performs data masking by splitting the plaintext values
into shares and storing the encrypted shares in memory. This
allows to ﬂexibly extend DPA protection to higher orders in
trade for additional memory. For all DPA protection levels,
Meas does not require DPA-protected implementations of the
cryptographic primitives, making Meas suitable for common
oﬀ-the-shelf (COTS) systems equipped with unprotected
cryptographic accelerators. However, Meas is also an ideal
choice for constructing a DPA-secure system from scratch as
engineers do not have to cope with complex DPA protection
mechanisms within the cipher implementation.
Finally, we show that memory encryption and authentica-
tion using Meas adds protection against the very powerful
DPA attacks, and still features the same memory overhead as
state-of-the-art schemes which completely lack side-channel
protection. For example, instantiating 4-ary, ﬁrst-order DPA
secure Meas for standard disk architectures results in a very
low memory overhead of 7.3%. Contrary to that, protecting
cryptographic implementations against DPA to make use of
state-of-the-art schemes would result in massive overheads
making memory encryption and authentication infeasible.
Outline. This work is organized as follows. In Section 2,
we ﬁrst state our threat model and requirements, and we
then discuss the state of the art on memory encryption and
authentication. The state of the art on side-channel attacks
and countermeasures is content of Section 3. We analyze the
re-keying countermeasure in terms of memory encryption
in Section 4 and use the results to present our ﬁrst-order
DPA secure Meas in Section 5. Section 6 then presents
data masking to achieve higher-order DPA security in Meas.
An evaluation of Meas is done in Section 7 and we ﬁnally
conclude in Section 8.
2. MEMORY ENCRYPTION AND
AUTHENTICATION
The encryption and authentication of memory is an impor-
tant measure to prevent attackers with physical access from
learning and/or modifying the memory content. There are
several schemes for memory encryption and authentication
available, but none of them takes the risk of side-channel
attacks into account.
In this section, we deﬁne two threat models: the non-
leaking chip model restates the state of the art [10, 17, 34, 38,
42, 43], and the extended leaking chip model further takes
side-channel leakage into account. Moreover, we summarize
present techniques for memory encryption and authentication
and its requirements.
2.1 Threat Model and Requirements
The non-leaking chip model in previous works assumes a
single, secure microchip performing all relevant computations,
e.g., a CPU. An attacker cannot perform any kind of active or
passive attacks against this chip. All other device components
outside this chip, e.g., buses, RAM modules and HDDs, are
under full control of the adversary. Therefore, a physical
attacker can, e.g., probe and tamper with buses, exchange
peripherals, or turn the whole device on and oﬀ. For oﬀ-chip
memory, this means that an attacker with physical access is
capable of freely reading and modifying the memory content.
While reading can give an attacker access to conﬁdential
data stored inside the memory, modiﬁcation breaks memory
authenticity in several ways [10]: In spooﬁng attacks, an
attacker simply replaces an existing memory block with
arbitrary data, in splicing attacks, the data at address A is
replaced with the data at address B, and in replay attacks,
the data at a given address is replaced with an older version
of the data at the same address.
Our leaking chip model extends the non-leaking chip model
by considering passive side-channel attacks. It assumes that
the microchip performing all relevant computations leaks in-
formation on the processed data via side channels, e.g., power
and electromagnetic emanation (EM). Physical attackers can
observe this leakage and perform side-channel attacks.
Hence, cryptographic schemes protecting the conﬁdential-
ity and authenticity of oﬀ-chip memory in the leaking chip
model have to fulﬁll three main requirements.
1. The only information an adversary can learn from mem-
ory is whether a memory block (i.e., ciphertext) has
changed or not.
2. Prevention of spooﬁng, splicing, and replay attacks.
3. Protection against side-channel attacks.
691In addition, fast random access to all memory blocks, high
throughput (fast bulk encryption), and low memory overhead
are desired.
2.2 Memory Encryption
Memory encryption schemes usually split the memory
address space into blocks of predeﬁned size, e.g., sector size,
page size, or cache line size. Each of these blocks is then
encrypted independently using a suitable encryption scheme.
The partitioning of the address space into memory blocks
aims to provide fast random access on block level and fast
bulk encryption within the instantiated encryption scheme.
Hereby, the chosen block size strongly aﬀects possible trade-
oﬀs w.r.t. metadata overhead, access granularity, and speed.
So far, several memory encryption schemes have been
proposed in the non-leaking chip model and are being used
nowadays, e.g., the tweakable encryption modes XEX [37]
and XTS [21], CBC with ESSIV [13], and counter mode
encryption [38, 42].
2.3 Memory Authentication
Like for memory encryption, memory authentication schemes
split the memory address space into blocks and aim for sepa-
rate authentication of each of these blocks. Several memory
authentication schemes have been proposed in the non-leaking
chip model.
For example, a keyed Message Authentication Code (MAC)
using the block address information can protect against spoof-
ing and splicing attacks. However, it still allows for replay
attacks. In order to protect against replay attacks, authen-
ticity information must be stored in a trusted environment,
e.g., in secure on-chip memory, that an attacker cannot
modify. Authentication trees minimize this demand for se-
cure on-chip storage, namely, only the tree’s root is stored
in secure memory, while the remaining tree nodes can be
stored in public memory. Such trees therefore protect against
spooﬁng, splicing, and replay attacks. Authentication trees
over m memory blocks with arity a have logarithmic height
l = loga(m). Three prominent examples of authentication
trees are Merkle trees [30], Parallelizable Authentication
Trees [18] (PAT), and Tamper Evident Counter [11] (TEC)
trees. We give a detailed description of them in Appendix A.
3. SIDE-CHANNEL ATTACKS
Present memory encryption and authentication schemes
are designed to protect oﬀ-chip memory against adversaries
with physical access assuming a microchip that is secure
against all active and passive attacks. However, in IoT sce-
narios, the assumption that the microchip is secure against
all passive attacks is often too strong since, in practice, a
microchip running an algorithm leaks information on the
processed data via various side channels, such as power,
timing, and electromagnetic emanation (EM). This allows
adversaries perform passive side-channel attacks, which can
reveal secret keys that are used in cryptographic implemen-
tations. There exist two basic classes of passive side-channel
attacks [25]: Simple Power Analysis (SPA) and Diﬀerential
Power Analysis (DPA). Originally, SPA and DPA have been
introduced for the power side-channel, but their basic princi-
ple is is applicable to all kinds of side channels such as power,
EM, and timing. Therefore, we will use the terms SPA and
DPA throughout the paper, but note that our elaborations
apply to all kinds of side channels.
3.1 Simple Power Analysis
In SPA attacks, the adversary tries to learn the secret
value processed inside a device from observing side channels
during a single processing of the secret value to be revealed,
e.g., the adversary tries to learn the encryption key from a
power trace observed during a single encryption. However,
the adversary is allowed to observe the same encryption
multiple times to reduce measurement noise. Clearly, an
implementation that cannot keep a key secret for a single
encryption is worthless. Therefore, bounded side-channel
leakage for a single encryption and thus security against SPA
attacks is a necessary precondition for any implementation.
3.2 Differential Power Analysis
Quite naturally, the amount of information learned about
a secret value from side-channel information increases with