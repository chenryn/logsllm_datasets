在拥有稳定性和业务问题方面，我们仍有一个主要障碍需要克服。随着更多 SWE 和现在生产工程师致力于扩展服务，SRO 在服务故障期间继续成担任运维支持，并全天候响应警报。SRO 开始构建一个自动化框架， 我们命名为 FBAR【FaceBook Auto Remediation】解决了在生产中运行服务时的主要难点之一：移除发生故障的服务器并用健康的替换它们。SRO 继续增长，而该系统成熟时，未来将这一运维任务移交给由 PE 和 SWE 编写的自动化工具。经过几年的 PE 团队建设，也雇佣了更多 SRO，我们的基础架构复杂性增长得如此之大，以至于我们的集中式 SRO 团队不再容易理解每个服务是如何工作的。他们响应故障的速度开始迟缓，甚至 SRO 开始担心他们可能不是解决老问题，而是可能导致新问题。我们意识到我们需要解散 SRO 团队，并将完整的 24x7 的运维所有权 交给 PE 和 SWE 团队。SRO 在接下来的 18 个月中与 PE 和 SE 一起编写在 FBAR 上运行的代码，以处理许多需要 SRO 响应的服务器问题。当我们的 PE 与 SWE 配对成功时，他们可以共同担当相关系统的轮值责任。当 SWE 不能与 PE 合作时，他们就独立负责相关系统的轮值。在这 18 个月结束时，集中的 SRO 团队被解散，其成员转移到 PE 团队。从 SRE 和 AppOps 到彻底的生产工程师模式 的过渡大约用了四年时间。大卫：让我们来谈谈结构。某些 SRE 模型有这样一种概念，即软件团队在 SWE 完成一定量的工作后才开始获得 SRE。SRE 来自不完全独立的组，不属于产品组或服务组，他们属于独立的组织。 你如何看待围绕生产工程师的组织？生产工程师与更大的组织有何关系？
佩德罗：我们的模型借鉴了一些公司的独立组织结构以及某些 SRE 和运营团队的嵌入性质，他们向产品组或业务单位报告。我们有一个集中的汇报结构和分散的座位结构。
运维的功能需要确保它在所有工程职能中平稳运行。有时，这可能受到向最高层高管（例如，首席执行官）报告的人员的相互竞争的优先事项的阻碍。在许多公司中，最高级别的运营主管（运维主管）通常希望向 CEO 报告，我相信这会导致的问题比解决的更多。我认为运维主管应该向最资深的软件工程主管（工程主管）报告。这实际上使运维主管成为其他软件工程组的对等方，而不是工程主管的对等方。这也使得工程主管负责运维的成功。从绩效评估的角度来说，如果运维团队不成功，则工程主管不会成功。在我看来，这解决了“开发与运维”的很多对立面，因为 Ops 现在是 Dev 的一部分。我认识到，有很多大公司已经分散了他们的运维团队，转而各自向其业务单位的负责人汇报。我确信在某些情况下，这行得通，但很难使工作好。我中看到的更多情况是，业务单位的负责人迫使运维团队做出承诺，而在需要处理分歧时，问题的上报路径非常模糊。
因此，为了防止这些不稳定因素，我们保留了集中报告结构，原因如下：
灵活性
我们的生产工程师可以处理硬件设计、UI、后端软件以及两者之间的一切。例如，一个生产工程团队设计并构建了用于无线移动电话测试的 Farady 网架。我们开发了一个带有移动设备的专用机架，工程师可以在各种类型的移动硬件上运行他们的软件，并进行设备测试。集中式报告结构使我们能够灵活地设定自己的目标，并决定我们“应该做什么”的工作，而不是被特定业务单位领导告知需要完成哪些工作。从事 PE 工作的人员编制与更广泛的工程人员编制分开管理，因此 PE 领导层可以确保这项工作不会（由可能有着不同看法的业务主管）重新指定优先级。动机
PE 经理能够根据他们试图解决的问题来激励其团队完成工作，而不是专注于发布产品或服务。评估生产工程师有一个定性和定量方面，而激励生产工程中个人的某些因素不一定是激励软件工程师的因素。PE 管理团队能够指导人们面对不断变动的环境，让有运维意识的人真正擅长于在需要时解决问题，并在需要关注软件工程问题时解决它们。
我发现，有些人像我一样，会跑向一个问题，而不是离开。我很确定我选择不走纯软件路线的原因之一是我喜欢环境的变动。我发现，即使喜欢 PE 型工作的人可能会抱怨环境的切换，但他们实际上喜欢它。还有推动他们的还有一些自豪感，就是当他们最终发现在系统中的一个小细节，能够疏通问题，恢复服务，允许每个人恢复平静，并回到工作。我一直发现，雇佣和管理 PE 的最佳方式是找出什么让他们对这类工作感到兴奋，并雇佣能够理解其个性的这一方面的经理。过去执行相同（或类似）角色通常会增加这些管理者成功激励他们的可能性。相反，我发现，许多真正只想思考算法和编写纯软件的管理者面临着如何管理和激励 PE 的挑战。具有轻微紧张感的共同责任
我们聘请外部软件工程师，这些工程师可能来自传统的开发到 QA 到运营模型，并且认为操作应该执行软件工程师不想做的事情。独立的组织结构为生产工程领导团队在操作稳定性和功能之间创建缓冲。SWE 和 PE 团队需要联合起来，构建稳定、可靠、安全、高效且功能丰富的服务。如果软件工程经理和生产工程经理有分歧，我们需要确保他们共同努力解决问题。软件工程经理不能对 PE 团队说：“你应该为我完成所有运维工作。”生产工程经理也不能对 SWE 团队说：“你只应致力于稳定性和可靠性。”在这两个相互竞争的优先事项之间需要取得平衡。我们的结构提供了健康的紧张和共同的责任，以做需要的事情，而不是什么可以定义由一个经理的责任。在 Facebook，我们有一句谚语：“代码赢得争论。”我们应用了类似的模型，在运维负载和新功能之间存在分歧时，让团队承担责任。当这种情况发生时，我们将 SWE 和 PE 的经理和技术主管召集在一起，与各自组织的高级领导讨论他们的观点。这些经理和技术主管提供运营指标，帮助我们了解在系统和服务中哪些不工作，以及团队将优先改进这些指标。讨论还需要讨论基于此优先级可能会延迟哪些功能。这样，所有领导者都了解对业务的潜在影响，并可以做出明智的决策。最终，我和我的 SWE 团队的同行由我们的经理协调，一起构建功能丰富、稳定且可操作的系统。由于我们所有人都在相同的层次上相遇，如果我们不做好我们的工作，我们的绩效就会受到影响。在我看来，这样的搭配给我们带来了两个领域的优势。分散的嵌入式模型赋予我们更大的能力来影响服务的构建方式。PE 就坐在 SWE 同行的旁边。他们去他们的会议和场外；它们可用于走廊对话和关于体系结构的特别讨论。SWE 和 PE 经理都致力于服务路线图的外观、使服务更可靠以及实现增长所需的功能。它们在功能和稳定性之间妥协。
通过这种嵌入式结构，软件团队也得到了生产工程师的不断警惕，以及指出正在积极发生和需要解决的问题的交互作用。当生产中出现问题时，SWE 和 PE 会挤在一起，肩并肩地解决问题。当软件工程师轮值时，生产工程师和他们坐在一起，软件工程师也可以转身问：“嘿，我不知道现在如何在生产中做这个运维。你能和我一起，帮助我，教我如何做到这一点，这样我将来才能更有效吗？”
我确信，这不是唯一有效的方法，并且可能还有其他组织模型可以以同样的方式执行，并且不需要与共存人员具有相同的报告结构。这是我们在Facebook 发现最适合自己的方式。大卫：  早些时候你在 PE 组织的故事中提到了轮值，但我想你说过软件工程师在轮值，PE 不在轮值状态。总是这样吗？
佩德罗：不，不是总是这样。我经常使用的一句话是：“如果你编写代码并释放它到生产环境，恭喜你拥有它。”这意味着我们需要让 SWE 负责保持其服务在生产中，并承担主要轮值责任。对于我们不拥有或不直接构建的服务，PE 没有主要的轮值责任。当我们与 SWE 团队嵌入时，我们有一个共享的待命模型，并且共同承担轮值责任。在大多数情况下，它是每周轮换。有一个软件工程师在一周轮值，然后下周有一个 PE 轮值，依此类推。在某些情况下，由于认知差异或基础结构当前难以管理，某些团队会缩短几天的轮值时间。我们只有两种方案，即只有软件工程师或生产工程师可以轮值：
没有嵌入式生产工程师的软件工程团队。在这种情况下，他们别无选择，因为他们必须待命的服务。
生产工程师在环境中自主地构建一切。生产工程师在环境中自主地构建一切。
大卫：像基础设施，DNS团队，这样的事情？
佩德罗：是的，PE 实际上完全拥有几个基础结构，如用于预配服务器或管理生产中的服务器更换的软件。 （FBAR）。FBAR 是一个自动化系统，可处理重复性问题，以便工程师（SWE 和 PE）能够专注于解决和防止更大、更复杂的站点故障。我们还构建了在维护期间自动执行服务迁移的系统，而另一个系统侧重于从头开始构造新的群集。我们拥有并构建了位于第七层的负载均衡器和 Web 服务器之间的第四层的负载均衡器。对于我前面提到的 Faraday 机架，我们构建了增强式流量控制【ATC】，允许开发人员在不同的网络条件下测试其移动应用程序，轻松模拟高速的、移动运营商环境的，甚至严重受损的网络环境。