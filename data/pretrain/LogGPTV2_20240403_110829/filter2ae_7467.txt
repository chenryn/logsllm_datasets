# 【技术分享】TrickBot银行木马Web Injects分析

## 译文声明
本文为翻译文章，原文来源于uperesia.com。译文仅供参考，具体内容及含义以原文为准。
- 译者：[blueSky](http://bobao.360.cn/member/contribute?uid=1233662000)
- 预估稿费：200 RMB
- 投稿方式：发送邮件至linwei#360.cn，或登录网页版在线投稿

## 前言
目前已有大量关于TrickBot（一种被认为是Dyre银行恶意软件继承者的木马）的分析报告，但鲜有文章深入探讨其核心组件——Web injects。本文将对TrickBot使用的Web injects进行详细研究和分析。

## Web Injects概述
Web injects通常是一段HTML或JavaScript代码，这些代码被注入到浏览器中打开的网页（主要是银行网站），允许木马更改或替换页面内容，或在页面上显示其他字段。攻击者利用Web injects窃取用户输入的登录凭证，或诱骗用户提供其他敏感信息（如PIN码）。因此，Web injects是一种高级的技术手段，使攻击者能够实施社会工程攻击或自动篡改受害者的金融交易。

与Dyre木马类似，TrickBot使用两种类型的Web injects：“Web伪造”和“服务器端注入”。TrickBot将其Web injects定义并存储在一个类似XML的树结构中，每个配置项都指定了目标银行网站、Web inject类型以及托管Web inject服务器的IP地址。图1展示了在TrickBot进程内存中找到的一个配置列表。

### Web伪造
TrickBot的Web伪造技术在受害者浏览银行网站时将其重定向到恶意服务器。通过伪造银行网站的登录页面，恶意服务器将受感染的用户从真实的银行网站引诱到伪造的恶意网站。在TrickBot的Web injects配置列表中，Web伪造使用`sinj`标签定义。当受害者尝试登录伪造的银行网站时，会看到一个“请等待”消息。一旦用户输入登录凭证，这些数据便会被发送给攻击者（见图2）。

![图2：伪造银行登录网页](path_to_image)

伪造服务器在发送登录凭据时会触发警报，允许攻击者使用窃取的凭证登录真实银行网站上的受害者账户。此时，受害者仍在伪造服务器上耐心等待，而攻击者已经开始查看受害者的银行账户和交易限制信息。异常漫长的等待时间可能是受害者判断是否遭受攻击的一个指标。由于浏览器的URL地址栏仍显示合法银行网站的域名，因此重定向不会留下任何视觉痕迹，即使受害者检查SSL证书，也只会看到真实银行网站的证书。

当攻击者希望从受害者的银行账户转移资金时，他们通常会在银行业务会话中面临额外的安全问题。通过控制面板，欺诈者可以与受害者互动，而受害者只看到一个“请等待”消息。在攻击者的操作下，“请等待”消息页面会被其他伪造页面替换，这些页面用于窃取执行电子诈骗所需的信息。这些伪造请求页面精心设计，诱导受害者回答，答案通常包含签名令牌，这是攻击者需要的最后一条信息。

#### 检测Web伪造
Web伪造也被称为重定向攻击，由于与合法银行服务器的唯一连接是由木马本身建立的（受害者的连接被重定向到恶意服务器），这种攻击很难从银行服务器端检测。通常，受害者浏览银行网站时与合法银行服务器建立的连接会在浏览器的URL地址栏中显示“安全连接”图标，并显示合法银行网站的SSL证书。

TrickBot在其重定向攻击中生成的初始SSL连接可能在银行网站的服务器日志中被检测到。当客户浏览网上银行平台时，浏览器会加载欢迎或登录门户页面及其所有资源（如图像、外部脚本等）。每个资源请求都会在服务器日志中生成条目。然而，TrickBot的SSL连接似乎并未加载所有这些资源。这种缺少资源的异常加载现象可能是一个有用的特征，用于检测TrickBot。

### 服务器端注入
TrickBot的服务器端注入技术将额外的客户端代码（如HTML、JavaScript）插入到目标网页中。在TrickBot的Web injects配置列表中，服务器端注入使用`dinj`标签定义。当受害者浏览目标网站（即银行网站）时，银行服务器的响应在发送给用户之前被TrickBot拦截（见图3），然后银行的响应被发送到攻击者的服务器（见图4）。攻击者的服务器将额外的代码注入网页，并将注入后的结果发送给受害者。

![图3：服务器端注入过程](path_to_image)
![图4：攻击者服务器获取到银行发来的响应](path_to_image)

首先，将整个页面发送到攻击者服务器（只是为了注入恶意代码）可能会导致大量不必要的开销。这与其他较老的银行木马（如Zeus和SpyEye）使用的客户端Web injects策略不同，后者可以减少攻击者服务器所需的带宽和处理能力。较旧的银行特洛伊木马通常将注入代码作为其配置的一部分，使用`data_before/data_ends`标签和`data_inject`标签定义。但客户端注入的缺点是，安全研究人员可以通过解析接收到的配置来判断目标网站是否被注入了恶意代码。因此，服务器端注入是一种较为隐蔽的手法，可以尽可能隐藏其配置方案，以免遭安全专业人员的分析。

服务器端注入的代码通常用于实施社会工程学攻击，例如Web伪造。另一种流行的注入代码策略是“表单抓取”。与键盘记录不同，“表单抓取”代码用于获取HTML表单中的信息，允许木马捕获并窃取表单中存在的敏感信息，而键盘记录则会捕获用户输入的所有数据。此外，抓取的数据会被标记（如密码），简化了提取过程。键盘记录通常会在其日志中生成大量垃圾数据，分析人员需要花费大量时间查找有用信息。此外，表单抓取在执行过程中不需要实时响应。例如，表单抓取器可以捕获在亚马逊网络商店提交的信用卡号码，并将其存储在数据库中以供将来使用。图5展示了服务器端Web injects攻击的过程，其中使用了社会工程学和表单抓取。在这种情况下，受害者一直在“等待”服务器的响应，而攻击者则在后台对其账户实施网络攻击。

![图5：服务器端Web injects攻击的过程](path_to_image)

#### 服务器端注入的检测
由于浏览器呈现的大部分代码仍来自银行的合法服务器，从银行的角度来看，服务器端的Web injects比Web伪造更容易检测。由于银行服务器能够指定部分渲染的代码，它也可以指定浏览器对渲染的代码进行完整性检查。这种完整性检查可以是一个集成在银行门户网页上的JavaScript，用于检查网页是否被注入恶意代码（如“表单抓取”代码）。负责完整性检查的代码当然也可以被攻击者通过注入“反完整性检查”的代码绕过，因此这种检测方法的关键在于良好地隐藏检查或经常改变其实现。这种技术在一篇博士论文中被称为“防范基于浏览器的数据渗透攻击”，详情请点击[这里](https://d.lib.msu.edu/etd/1716/datastream/OBJ/download/Defending_against_browser_based_data_exfiltration_attacks.pdf)。与此类似，该网站上阐述的[代码修改检测技术](https://security.stackexchange.com/questions/36716/how-do-some-sites-detect-adblock-plus)也可以用来检查网页是否被注入恶意代码。

在我调查TrickBot时，注意到有时TrickBot会创建一个不由银行服务器设置的cookie（见图6）。这个名为`tknz_referrer`的cookie似乎存储了与注入页面相关的进度或状态信息。由于默认情况下，浏览器会将请求中的所有Cookie绑定在一起发送给服务器，因此检测银行服务器端的这种cookie似乎是识别网页是否被TrickBot感染的一种理想方法。

![图6：TrickBot 生成的“tknz_referer”cookie](path_to_image)