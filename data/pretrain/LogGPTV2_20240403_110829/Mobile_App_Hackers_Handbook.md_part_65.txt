insecurely by constructing queries by basic string concatenation with no metacharacter escaping. All it would
take in each of the vulnerable examples is for the attacker to place an apostrophe (') in his controlled value,
thereby breaking out of the intended SQL statement with the possibility of altering the meaning of the SQL
query itself. Consider the following safe and unsafe examples. The unsafe patterns, of course, allow SQL
injection, assuming attackerInput is indeed an attacker-controlled string.
Safe
var db = new SQLiteConnection(Path.Combine(
ApplicationData.Current.LocalFolder.Path, "test.db"));
[ ... ]
SQLiteCommand cmd = db.CreateCommand(
"select * from Stock where Symbol = ?", attackerInput);
// get all stock items with name in question
List stockList = cmd.ExecuteQuery();
// and then display the names and stock IDs
foreach(Stock item in stockList) {
MessageBox.Show(item.Symbol + " has item ID:" + item.Id);
}
Vulnerable
var db = new SQLiteConnection(Path.Combine(
ApplicationData.Current.LocalFolder.Path, "test.db"));
[ ... ]
SQLiteCommand cmd = db.CreateCommand(
"select * from Stock where Symbol = '" + attackerInput + "'");
// get all stock items with name in question
List stockList = cmd.ExecuteQuery();
// and then display the names and stock IDs
foreach(Stock item in stockList) {
MessageBox.Show(item.Symbol + " has item ID:" + item.Id);
}
Safe
[ ... ]
// get all stock items with name in question
List results = db.Query(
"select * from Stock where Symbol = ?", attackerInput);
// and then display the names and stock IDs
foreach(Stock item in results) {
MessageBox.Show(item.Symbol + " has item ID:" + item.Id);
}
[ ... ]
Vulnerable
// get all stock items with name in question
List results = db.Query(
"select * from Stock where Symbol =
'" + attackerInput + "'");
// and then display the names and stock IDs
foreach(Stock item in results) {
MessageBox.Show(item.Symbol + " has item ID:" + item.Id);
}
[ ... ]
Running either of the preceding vulnerable code samples with attackerInput being equal to “aaaaaa’aaa” results
in a SQLiteException being thrown due to a SQL syntax error, as shown in Figure 11.14.
Figure 11.14 SQLite syntax error
SQL injection bugs are easy to spot when code is available or assemblies have been extracted from a device and
reversed to recover code (that is, using .NET reflector). If you’re manually testing an application for SQL
injection, and insertion of an apostrophe (') causes a crash, there’s a decent chance that SQLite threw a
SQLiteException, which went unhandled and resulted in the app crashing. In these cases, you may have a SQL
injection bug on your hands, which you’ll want to look into to verify whether an injection issue exists or not.
If you’re unsure of whether a SQL injection bug exists, you can use conditional clauses and observe whether the
app’s behavior changes in the way you expect. For example, if a SQL injection bug existed in a query to select the
employee with a certain email address, and you injected,
PI:EMAIL' OR 1=1—
and the app attempted to return all users in its database, you would be fairly certain you’ve just hit a SQL
injection bug. Moreover, this may be interesting from the attacker’s perspective in terms of information leakage
by the app. Equally, if you injected:
PI:EMAIL' AND 1=1—
and you knew that PI:EMAIL existed in the database, you could then compare the behavior with
what happens when you inject:
PI:EMAIL' AND 1=2—
That is, in the second case, where you injected AND 1=2—, you would expect the query to return nothing (let’s
assume the query is simple), because 1=2 is obviously false, and the conditional was concerned with “and” logic.
The potential for entry points into potentially injectable SQL queries is worth considering; think XAML page
entry points (that is, OnNavigatedTo and resulting code paths) via toast notifications and protocol handlers. For
example, imagine a part of an app responsible for looking up all contacts with a certain surname. Code similar to
the following could easily appear in an XAML page’s OnNavigatedTo() entry point:
protected override void OnNavigatedTo(NavigationEventArgs e) {
string surname;
if (this.NavigationContext.QueryString.ContainsKey("surname"))
{
phoneNumber = this.NavigationContext.QueryString["surname"];
SQLiteCommand cmd = db.CreateCommand(
"select * from Contacts where surname = '" + attackerInput + "'");
List stockList = cmd.ExecuteQuery();
[ ... ]
}
}
In a real-world app, this method could be reached via a toast notification, for example, or via a protocol handler
that the app has registered.
Apps may also use data pulled in via HTTP API requests in insecure SQL query formation, as well.
It’s worth noting before we move on to another section that when you’re using SQLite’s Windows Phone engine
and Krueger’s wrapper, stacked queries are not enabled, and the load_extension() function is disabled, so the
interesting exploitation techniques described here
(https://sites.google.com/site/0x7674/home/sqlite3injectioncheatsheet) are not applicable.
Attacking File Handling
As with applications for any modern smartphone platform, apps running on Windows Phone 8.x may need to
write files to disk, and then manipulate, read, and delete them.
Developers occasionally make mistakes in handling file I/O, which can lead to some interesting security bugs.
We’ll talk about how file handling is done generally here, and then move on to discovering and possibly
exploiting directory traversal bugs.
Introduction to File Handling
Since the introduction of Windows Phone 8, the main APIs for dealing with file I/O are the Windows.Storage
and Windows.Storage.Streams namespaces. You can find full documentation on both of these APIs at their
respective MSDN pages at http://msdn.microsoft.com/en-
us/library/windowsphone/develop/windows.storage.aspx and http://msdn.microsoft.com/en-
us/library/windowsphone/develop/windows.storage.streams.aspx.
As we’ve stressed a number of times before, third-party apps are subject to filesystem sandboxing restraints, and
as such can read and write only from and to specific locations. Broadly, apps have read and write access to their
application data directory tree and read-only access to their install directory, which houses application binaries,
the manifest, and other assets. These directories reside at the following file paths:
Application data—C:\Data\Users\DefApps\APPDATA\{GUID}\...
Install directory—C:\Data\Programs\{GUID}\Install\...
The majority of apps tend to use the folder named Local in their app data folder to store useful data. All files in
this directory (and other directories in their application data tree) are readable and writeable only by the app
itself and the operating system.
An application can retrieve a StorageFolder instance for its local folder easily using the Windows.Storage API:
StorageFolder myLocalFolder = ApplicationData.Current.LocalFolder;
An app can also retrieve the physical file path of its local folder, as well:
string localPath = StorageFolder localFolder =
ApplicationData.Current.LocalFolder;
The StorageFolder provides convenient APIs for creating new files and folders as shown here:
StorageFolder myLocalFolder = ApplicationData.Current.LocalFolder;
// create new folder called "myFolder", overwriting a previous
// one if it existed
StorageFolder newFolder = await myLocalFolder.CreateFolderAsync(
"myFolder", CreationCollisionOption.ReplaceExisting);
// now create a new file named "myFile" in the newly created folder
StorageFile myNewFile = await newFolder.CreateFileAsync(
"myFile", CreateCollisionOption.ReplaceExisting);
After a StorageFile object exists for a created file, data can be written to it using an API such as DataWriter
using code like the following:
// create new file
StorageFile myFile = await newFolder.CreateFileAsync("myFile",
CreateCollisionOption.ReplaceExisting);
// open with r/w access
using (IRandomAccessStream fileStream =
await myFile.OpenAsync(FileAccessMode.ReadWrite))
{
using (DataWriter myDataWriter = new DataWriter(fileStream))
{
// write our data to the file
myDataWriter.WriteString(contents);
// ensure contents are stored
await myDataWriter.StoreAsync();
}
}
Note that the preceding CreateFileAsync() call specifies the ReplaceExisting enum; this tells the
CreateFileAsync() method that an existing file with the same name should be overwritten. This is an important
flag to bear in mind when auditing for potential file-handling bugs.
Alternatively, if the file to be written to already existed, a StorageFile object to the file could instead be
obtained using GetFileAsync() as opposed to CreateFileAsync():
StorageFile myFile = await localFolder.GetFileAsync("myFile");
A file that already exists can similarly be opened to read data out from. For example, a developer could easily use
the DataReader class to read the entire contents of a file like this:
StorageFolder localFolder = ApplicationData.Current.LocalFolder;
StorageFile myFile = await localFolder.GetFileAsync("myFile");
string fileContents;
using (IRandomAccessStream fileStream = await myFile.OpenReadAsync())
{
using (DataReader dataReader = new DataReader(fileStream))
{
uint textLength = (uint)fileStream.Size;
await datareader.LoadAsync(textLength);
fileContents = dataReader.ReadString(textLength);
}
}
Code with a StorageFile object can delete the corresponding file using the DeleteAsync() method:
await myFile.DeleteAsync();
Other useful miscellaneous APIs for handling are available, but the preceding covers the most basic patterns of
file I/O: file creation, file deletion, opening, reading, and writing.
Directory Traversal Attacks
Directory (or path) traversal vulnerabilities have been quite common in server applications over the years—
particularly web servers. Web apps have also been plagued with directory traversal bugs, and the consequences
have ranged from file disclosure to privilege escalation by overwriting important files.
Path traversal vulnerabilities typically present themselves when filenames are attacker-influenced, and the app
fails to prevent the use of “..” and “../” in the filename itself. This can represent a danger because “..” refers to
the directory one level back from the current directory.
For example, an app could want to save a file, and take a partial filename from an untrusted source. As a result
of no sanitization of the filename, the full filename string could end up looking like this:
[OMITTED]\Local\Images\..\traversed.jpg
The “..” portion of the filename would instruct the underlying API to place traversed.jpg in the Local folder,
instead of the current folder, Images, like the application developer had intended.
Consider a hypothetical application used for managing affiliates that receives data about each of the company’s
affiliates in JSON format (say, from a web service), and later uses this information for creating basic affiliate
profiles, which can later be viewed in the app.
In this case, the app receives JSON, as shown here for one of its clients, Acme Corp:
{
"Company": {
"Name": "Acme Inc",
"ContactNumber": "111-222-3333",
"CEO": "Joe Exec",
"CTO": "John Techie",
"COO": "James Operations",
"Logo": {
"URL": "http://www.acme.com/logo.jpg",
"fileName": "acmeLogo.jpg"
}
}
}
To avoid regularly downloading all logo images for each affiliate for performance and offline usage reasons, the
app parses the JSON structure for each affiliate company, and downloads the company’s logo file, saving it in an
images directory for later usage.
To avoid name clashes due to generic names like logo.jpg being used, the web service being called specifies a
filename to use for the image file, which was earlier specified by the affiliate in the Content Disposition request
it used to upload the logo to the server-side web service. This idea seems quite logical, and after the logo image
file has been downloaded and loaded into a DataReader, the application attempts to save the file to its image
directory in its sandboxed application data folder, Local\AffiliateLogos. Assume the code looks like this:
// download image file to a stream
Stream imageData = await DownloadAffiliateLogo(downloadUrl);
string fileName = getFilenameFromJson(affiliateData);
StorageFolder myLocalFolder = ApplicationData.Current.LocalFolder;
// open the folder where the logo files are stored
StorageFolder imageFolder = await myLocalFolder.GetFolderAsync(
"AffiliateLogos");
// create new file with name supplied in json
StorageFile imageFile = await imageFolder.CreateFileAsync(fileName,
CreationCollisionOption.ReplaceExisting);
// write the binary image data out to the new file
using (var photoOutputStream =
await imageFile.OpenStreamForWriteAsync())
{
await imageData.CopyToAsync(photoOutputStream);
}
This sort of code outline would work well, except that it does absolutely no sanitization of the filename string
parsed out from the affiliate’s JSON data.
With a badly designed affiliate registration system in place, assume that a malicious affiliate’s JSON data ends
up looking like this:
{
"Company": {
"Name": "Acme Inc",
"ContactNumber": "111-222-3333",
"CEO": "Joe Exec",
"CTO": "John Techie",
"COO": "James Operations",
"Logo": {
"URL": "http://www.acme.com/logo.jpg",
"fileName": "..\portal.html"
}
}
}
In trying to save the file to the app’s Local\AffiliateLogos folder, the app would effectively call
CreateFileAsync()like this:
StorageFile imageFile = await imageFolder.CreateFileAsync(
"..\portal.html", CreationCollisionOption.ReplaceExisting);
This would result in the downloaded data being saved to the Local folder as portal.html, instead of in
Local\AffiliateLogos like the developer had intended. Further, because CreateFileAsync()was called with the
ReplaceExisting enum, any file that existed in Local named portal.html will now have been overwritten with
the data that was just downloaded by the application.
In the context of this app, assume that the app at some earlier point had saved a page to Local\portal.html that
it uses for providing an interface in a WebBrowser control. In the hypothetical attack scenario we’ve laid out,
this HTML file has now been overwritten with attacker-controlled data.
Referring to the earlier section, “Local Scripting Attacks,” you may recall that JavaScript executing in the local
origin context is capable of file-stealing attacks, due to the code’s origin being the local filesystem itself. In a
vulnerability scenario like this, a rogue affiliate would be in a position to steal sensitive and otherwise
interesting files from the device within the application’s sandboxing restrictions.
Applications might also implement file I/O functionality which is vulnerable to path traversal attacks in other
entry points that are reachable by would-be attackers, but the scenario presented in this section hopefully gives
a reasonable example of a potentially dangerous situation. The moral of the story is that potentially untrusted
data should not be used without sanitization for filenames, and certainly shouldn’t be allowed to contain “..”
patterns.
Patching .NET Assemblies
Sometimes during an assessment of a Windows Phone app you’ll need to apply patches to the app to gain
greater insight into how it works and what it’s doing internally with data. You might also need to remove
superficial security controls such as screen lock password prompts and UI-based restrictions.
In these cases you can make modifications to the .NET assemblies to achieve your goal. Two very useful tools
that work in conjunction together are .NET reflector and Reflexil, both of which were mentioned briefly in
Chapter 10. .NET reflector is a general-purpose tool for converting a .NET assembly’s Common Intermediate
Language (CIL) code to a form that is easily readable—usually C#.
Reflexil is a plug-in for .NET reflector that allows .NET assemblies to be modified and then saved with their new
patches applied.
You can obtain both of these tools from their respective authors’ websites: .NET reflector at http://www.red-
gate.com/products/dotnet-development/reflector/, and Reflexil at http://reflexil.net/.