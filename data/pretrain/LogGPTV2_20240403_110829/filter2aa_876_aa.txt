 0xcsandker
 csandker
 RSS Feed
//Posts
//History of Windows
//Archive
//Tags & Search
//ME
 Switch Theme
Debugging and Reversing ALPC
29 May 2022
>> Introduction & Disclaimer
>> Environment Preparation
>> Getting Off The Ground
>> From User to Kernel Land
>> Hunting An ALPC Object
This post is an addendum to my journey to discover and verify the internals of ALPC,
which I’ve documented in Offensive Windows IPC Internals 3: ALPC. While preparing
this blog I gured a second post, explaining the debugging steps I took to verify and
discover ALPC behaviour, could be useful to all of us that are beginners in the eld
of reverse engineering and/or debugging.
Contents:
Introduction & Disclaimer
While I’ve certainly used the techniques and methods shown in this post below,
these where not my only resources and tools to dive into ALPC. Even implying this
would undermine the important and major work of other researchers that have
documented and reversed ALPC internals in the past, like Alex Ionescu and many
others. Hence this disclaimer. 
TL;DR: The techniques below are practical and useful, but I was only able to apply
them due to the work of others.
Another important disclaimer is: I am - by no means - an experienced reverse
engineer and this blog post is not meant to be an introduction into ‘how to become
a reverse engineer’ or show a smart way to get in this eld. This is a ‘use Windows
debugging to stumble into a topic and make your way to look around’ post.
In order to follow the steps shown below you want to set up a kernel debugging
environment. If you already have a kernel debugging environment set up, feel free
to skip to section Getting Off The Ground. If you don’t, you’ve got two basic choices
for this setup:
>> Local live kernel debugging
>> Remote kernel debugging
Although the local kernel debugging option only requires a single test machine
(virtual VM) and only a single command and a reboot to set you up, I nevertheless
recommend starting two machines (VMs) and set up for remote debugging. The
reason for this is that local live kernel debugging comes with some constrains and
you can’t use the full debugging feature set and can’t go all routes. I’ll nevertheless
include the steps to set up local kernel debugging as well, in case you only have a
single machine at hand in your test environment. 
Setup local kernel debugging 
The following steps needs to be done:
1. Start up your testing machine or VM
2. If you do not already have WinDbg installed, download and install the
WindowsSDK from here to install WinDbg. 
Alternatively you can also use the WinDbg Preview from the Windows Store App.
3. Open up PowerShell with administrative privileges and run the following
command to enable local kernel debugging: PS:> bcdedit /debug on &
bcdedit /dbgsettings local
4. Reboot your machine
5. Open up WinDbg and enter local kernel debugging mode by running the
following command: .\windbg.exe -kl  
Alternatively you can also open up the WinDbg GUI, click File » Kernel Debug
(Ctrl+K) » Local (Tab) » Ok
Environment Preparation
Local Kernel Debugging with WinDbg
A note about the customized layout shown above 
In my case I like to have my debugging windows positioned and aligned in a certain
way (and also have the colors mimic a dark theme). You can do all of that by
starting WinDbg, open up and position all Windows the way you like them, change
the coloring (if you want) under View » Options » Colors and nally save all your
Workspace setup via File » Save Workspace to File. Once done, you can open up your
local kernel debugging WinDbg with your customized Workspace as follows:
.\windbg.exe -WF .WEW -kl  
All WinDbg command line switches can be found here
Setup remote kernel debugging 
1. Start your rst testing machine or VM that you want to debug, this will be
referred to as debuggee machine.
2. If you do not already have kdnet.exe installed, download and install the
WindowsSDK from here to install it.
3. Open up PowerShell with administrative privileges and run the following
command: cd "C:\\Program Files (x86)\\Windows
Kits\\10\\Debuggers\\x64\\\" && .\kdnet.exe 
'  
I usually use *51111 as port number. This command will give you command
line instructions to use from your debugger, see step 6.*
4. Start your second testing machine or VM that you want to use to debug your
rst VM, this will be referred to as debugger machine.
5. If you do not already have WinDbg installed, download and install the
WindowsSDK from here to install it. 
Alternatively you can also use the WinDbg Preview from the Windows Store App.
6. Run the following command to start WinDbg and attach it to your debuggee
machine: cd "C:\\Program Files (x86)\\Windows
Kits\\10\\Debuggers\\x64\\" && .\windbg.exe -k  . 
The command to paste from kdnet.exe (Step 3.), will look something like this:
net:port=,key=....  
You will see a prompt indicating that the debugger is set up and is waiting to
be connected.
7. Reboot the debuggee machine. Switch back to your debugger machine, which
will connect during the boot process of your debuggee.
You may have noted that I’ve mentioned the WinDbg Preview store app as an
alternative to the classic WinDbg debugger. This preview version is a facelift version
of the classic debugger and comes with quite a different UI experience (including a
built-in dark-theme). If you’re looking at a one-time setup and are not emotionally
attached to the old/classic WinDbg I encourage you to try the WinDbg Preview. The
only reason I’m not using it yet is due to the fact that you can’t export your
Workspace setup (window layout), which is a crucial feature for me in my lab (which
i rebuild frequently). 
As a result of that I will be using classic WinDbg in the below
Setting up symbols
Once you’ve setup WinDbg the last preparation step you’ll need to take is to setup
your debugger to pull debugging symbols form Microsoft’s ofcial symbol server.
Run the following set of commands within WinDbg to set up symbols:
1. Within WinDbg run .sympath  to show your current symbol path
conguration. 
If it looks similar to the below, which species that you want your symbols to
be loaded from Microsoft’s symbol server and cache those in C:\Symbols,
you’re good to go…
WinDbg .sympath check
2. If your output does not look like this and you simply want to pull all your
symbols from Microsoft’s ofcial symbol server, run the following command
within WinDbg: .sympath
srv*https://msdl.microsoft.com/download/symbols
More about symbol servers, caching and the how & why can be found in Microsoft’s
documentation page here.
Let’s say we know nothing at all about ALPC and want to start digging and
understanding how ALPC works under the hood. As ALPC is undocumented we
cannot start our journey by sticking our head into Microsoft’s rich documentation
catalogues, but instead we have to a apply a methodology that is based on a loop of
reversing, making assumptions, testing assumptions and verication/falsication of
assumptions to nally build our picture of ALPC.
Getting Off The Ground
Alright, if we do not know anything about a technology beside its name (ALPC), we
can ring up our WinDbg kernel debugger and start to get some information about
it by resolving function calls that contain the name “ALPC” - this might not be the
smartest starting point, but that doesn’t matter, we start somewhere and make our
way… 
The WinDbg command we need for this is: kd:> x *!*Alpc*
Listing ALPC functions
This command will resolve function names of the following pattern
[ModuleName]![FunctionName] , where we can use wildcards (‘*’) for both the
module and function names. In this case that means we’re resolving all functions
that contain the word “Alpc” in their names within all loaded modules. 
In case it’s your rst time with WinDbg (or you’re like me and tend to forget what
certain commands mean), you can always use WinDbg’s help menu to lookup a
command via: kd:> .hh [Command] , as shown below:
WinDbg's help menu
Side note: Although the command you’ve entered is pre-selected you actually have to
click the ‘Display’ button. Another option is to lookup the Debugger commands online
here.
If you get an error saying that that something could not be resolved, you likely do
not have your symbol path set up. Ensure you have your symbols either stored
locally or pulling from https://msdl.microsoft.com/download/symbols (or both). You
can check your sympath with: .sympath
WinDbg .sympath command
If you have your symbol path setup correctly, you’ll receive a good amount of results
showing all sorts of functions that contain the name “ALPC”. If things take too long
(because you made a typo, or things can’t be resolved or any other problem occurs)
you can always hit + or open the Debug menu and click Break to stop
the current action:
WinDbg's 'Break' command
From here you should copy all the resolved functions into an editor of your choice (I
use VisualStudio Code) and sort these by name to get a feeling for which Alpc
functions exists in which modules and may belong to which components. The
strong naming convention applied to the Windows codebase will help you a lot
here, so let’s have a look at this:
Example of function naming convenction in Windows
To make this more readable:
00007ff9`49498c54       >> The function address 
ntdll                   >> The module name ("ntddl" in this case) 
!                       >> The seperator 
Tp                      >> Abbreviation of the component ("Thread Poo
l" in this case) 
p                       >> Abbreviation of the function type ("privat
e") 
AllocAlpcCompletion     >> Descriptive name of the functions 
Looking only at this very rst resolved function call we can make the assumption
that this function is a private function within the ThreadPool component within
ntdll.dll, which likely does some allocation of some memory for something.
Applying this knowledge to all listed functions, we can sort and organize the
resolved functions to create a rough picture of where (in the codebase) these are
implemented:
Sorted ALPC functions
The value of this step is not being a 100 percent accurate or getting a label
assigned to each function, but instead create a rough mapping of which parts of the
OS are concerned with ALPC and which of these modules and function names sound
familiar and which don’t.
From here on we can drill down into modules that sound familiar (or interesting) to
us. For example we have spotted the ntdll  module, which we know is the
userland border gateway for calling native system (kernel) services (functions). So
we can assume that Windows allows userland processes to call certain ALPC
functions, which comes down the the assumption of “ALPC is usable from userland
applications”. 
Looking only at “*Alpc*” functions inside the ntdll module we can nd that there are
4 types of functions:
>> No-component functions, e.g.: ntdll!AlpcRegisterCompletionList
>> Nt-component functions, e.g.: ntdll!NtAlpcCreateResourceReserve
>> Zw-component functions, e.g.: ntdll!ZwAlpcCreateResourceReserve
>> Tp-Component functiosn, e.g.: ntdll!TppAllocAlpcCompletion