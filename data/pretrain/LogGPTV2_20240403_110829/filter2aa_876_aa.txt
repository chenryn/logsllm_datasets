# Debugging and Reversing ALPC
**Published: 29 May 2022**

## Introduction & Disclaimer

This post is an addendum to my journey of discovering and verifying the internals of ALPC, which I have documented in "Offensive Windows IPC Internals 3: ALPC." While preparing this blog, I realized that a second post explaining the debugging steps I took to verify and discover ALPC behavior could be useful for beginners in the field of reverse engineering and/or debugging.

**Disclaimer:** The techniques and methods shown in this post are practical and useful, but they were not my only resources and tools. I owe much of my understanding to the work of other researchers who have documented and reversed ALPC internals, such as Alex Ionescu and many others. This post is not intended as an introduction to becoming a reverse engineer, but rather as a guide on how to use Windows debugging to explore a topic and navigate through it.

## Environment Preparation

To follow the steps below, you need to set up a kernel debugging environment. If you already have one, feel free to skip to the "Getting Off The Ground" section. Otherwise, you have two basic choices:

### Local Live Kernel Debugging
- **Requirements:** A single test machine (virtual VM).
- **Steps:**
  1. Start your testing machine or VM.
  2. Install WinDbg from the [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/) or use the WinDbg Preview from the Windows Store.
  3. Open PowerShell with administrative privileges and run:
     ```powershell
     bcdedit /debug on
     bcdedit /dbgsettings local
     ```
  4. Reboot your machine.
  5. Open WinDbg and enter local kernel debugging mode by running:
     ```powershell
     .\windbg.exe -kl
     ```
     Alternatively, you can use the WinDbg GUI: `File > Kernel Debug (Ctrl+K) > Local (Tab) > Ok`.

### Remote Kernel Debugging
- **Requirements:** Two machines (VMs), one for the debuggee and one for the debugger.
- **Steps:**
  1. Start the debuggee machine.
  2. Install `kdnet.exe` from the [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/).
  3. Open PowerShell with administrative privileges and run:
     ```powershell
     cd "C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\" && .\kdnet.exe
     ```
     Use `*51111` as the port number.
  4. Start the debugger machine.
  5. Install WinDbg from the [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/) or use the WinDbg Preview from the Windows Store.
  6. Run the following command to start WinDbg and attach it to the debuggee machine:
     ```powershell
     cd "C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\" && .\windbg.exe -k net:port=51111,key=<your_key>
     ```
  7. Reboot the debuggee machine. The debugger will connect during the boot process.

**Note:** The WinDbg Preview store app is a modern version with a built-in dark theme, but it lacks the ability to export workspace setups. For this reason, I recommend using the classic WinDbg if you frequently rebuild your lab.

### Setting Up Symbols

Once WinDbg is set up, configure it to pull symbols from Microsoft's official symbol server. Run the following commands within WinDbg:

1. Check your current symbol path configuration:
   ```powershell
   .sympath
   ```
2. If the output does not specify the symbol server, set it with:
   ```powershell
   .sympath srv*https://msdl.microsoft.com/download/symbols
   ```

## Getting Off The Ground

If we know nothing about ALPC, we can start by resolving function calls that contain the name "ALPC" using WinDbg. This might not be the smartest starting point, but it provides a foundation to build upon.

### Listing ALPC Functions

Use the following WinDbg command to list all functions containing "ALPC":
```powershell
x *!*Alpc*
```
This command resolves function names in the format `[ModuleName]![FunctionName]`, where wildcards (`*`) can be used for both module and function names.

### Analyzing the Output

If you encounter an error, ensure your symbol path is correctly set. Once resolved, copy the results into an editor (e.g., Visual Studio Code) and sort them by name to understand which ALPC functions exist in which modules and components.

For example:
```
00007ff9`49498c54       ntdll!TpAllocAlpcCompletion
```
- **Function Address:** `00007ff9`49498c54`
- **Module Name:** `ntdll`
- **Component Abbreviation:** `Tp` (Thread Pool)
- **Function Type:** `p` (private)
- **Function Name:** `AllocAlpcCompletion`

By analyzing these functions, you can create a rough mapping of which parts of the OS are concerned with ALPC and which modules and function names sound familiar.

### Drilling Down into Modules

From the listed functions, you can focus on familiar modules like `ntdll`, which is the userland gateway for calling native system (kernel) services. This suggests that ALPC can be used from userland applications.

In the `ntdll` module, you will find four types of ALPC functions:
- **No-component functions:** e.g., `ntdll!AlpcRegisterCompletionList`
- **Nt-component functions:** e.g., `ntdll!NtAlpcCreateResourceReserve`
- **Zw-component functions:** e.g., `ntdll!ZwAlpcCreateResourceReserve`
- **Tp-component functions:** e.g., `ntdll!TppAllocAlpcCompletion`

This categorization helps in understanding the different roles and functionalities of ALPC in the Windows operating system.