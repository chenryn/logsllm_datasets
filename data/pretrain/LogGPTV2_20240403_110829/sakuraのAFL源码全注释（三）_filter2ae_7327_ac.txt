###  __afl_maybe_log
直接看汇编，还是很好理解的
  * 首先检查`_afl_area_ptr`是否为0，即是否共享内存已经被设置了。 **换句话说，只有第一个__afl_maybe_log会执行这个if里的代码**
    * 如果`_afl_area_ptr`为0，即共享内存还没被设置，则判断`_afl_setup_failure`是否为真，如果为真，则代表setup失败，直接返回。 
      * 读取`_afl_global_area_ptr`的值 
        * 如果不为0，则赋值给`_afl_area_ptr`
        * 否则 
          * 首先读取环境变量`__AFL_SHM_ID`，默认是个字符串，atoi转一下，得到shm_id，然后通过shmat启动对该共享内存的访问，并把共享内存连接到当前进程的地址空间，将得到的地址，保存到`_afl_area_ptr`和`_afl_global_area_ptr`中。
          * 然后通过`FORKSRV_FD+1`即199这个文件描述符，向状态管道中写入4个字节的值，用来告知afl fuzz，fork server成功启动，等待下一步指示。
          * 进入`__afl_fork_wait_loop`循环，从`FORKSRV`即198中读取字节到`_afl_temp`，直到读取到4个字节，这代表afl fuzz命令我们新建进程执行一次测试。 
            * fork出子进程，原来的父进程充当fork server来和fuzz进行通信，而子进程则继续执行target。
            * 父进程即fork server将子进程的pid写入到状态管道，告知fuzz。
            * 然后父进程即fork server等待子进程结束，并保存其执行结果到`_afl_temp`中，然后将子进程的执行结果，从`_afl_temp`写入到状态管道，告知fuzz。
            * 父进程不断轮询`__afl_fork_wait_loop`循环，不断从控制管道读取，直到fuzz端命令fork server进行新一轮测试。
  * 如果`_afl_area_ptr`不为0，即共享内存已经被设置好了。那么就跳过上面的if，只执行`__afl_store`逻辑，伪代码如下: 
    * 简单的说，就是将上一个桩点的值(prev_location)和当前桩点的值(`R(MAP_SIZE)`)异或，取值后，使得 **共享内存里对应的槽** 的值加一，然后将prev_location设置为`cur_location >> 1;`
    * 因此，AFL为每个代码块生成一个随机数，作为其“位置”的记录；随后，对分支处的”源位置“和”目标位置“进行异或，并将异或的结果作为该分支的key，保存每个分支的执行次数。用于保存执行次数的实际上是一个哈希表，大小为MAP_SIZE=64K，当然会存在碰撞的问题；但根据AFL文档中的介绍，对于不是很复杂的目标，碰撞概率还是可以接受的。 
                cur_location = ;
        shared_mem[cur_location ^ prev_location]++; 
        prev_location = cur_location >> 1;
    * 另外，比较有意思的是，AFL需要将cur_location右移1位后，再保存到prev_location中。官方文档中解释了这样做的原因。假设target中存在A->A和B->B这样两个跳转，如果不右移，那么这两个分支对应的异或后的key都是0，从而无法区分；另一个例子是A->B和B->A，如果不右移，这两个分支对应的异或后的key也是相同的。
    char __usercall _afl_maybe_log@(char a1@, __int64 a2@, __int64 a3@, __int64 a4@, __int64 a5@, __int64 a6@, __int64 a7@, __int64 a8@, __int64 a9@, __int64 a10@, __int64 a11@, __int64 a12@, __int64 a13@, __int64 a14@, __int64 a15@, __int64 a16@, __int64 a17@, __int64 a18@)
    {
      ...
      v19 = _afl_area_ptr;
      if ( !_afl_area_ptr )
      {
        if ( _afl_setup_failure )
          return v18 + 127;
        v19 = _afl_global_area_ptr;
        if ( _afl_global_area_ptr )
        {
          _afl_area_ptr = _afl_global_area_ptr;
        }
        else
        {
          ...
          v22 = getenv("__AFL_SHM_ID");
          if ( !v22 || (v23 = atoi(v22), v24 = shmat(v23, 0LL, 0), v24 == (void *)-1LL) )
          {
            ++_afl_setup_failure;
            v18 = v29;
            return v18 + 127;
          }
          _afl_area_ptr = (__int64)v24;
          _afl_global_area_ptr = v24;
          v28 = (__int64)v24;
          if (write(199, &_afl_temp, 4uLL) == 4 )
          {
            while ( 1 )
            {
              v25 = 198;
              if (read(198, &_afl_temp, 4uLL) != 4 )
                break;
              LODWORD(v26) = fork();
              if ( v26 > 1;
      ++*(_BYTE *)(v19 + v20);
      return v18 + 127;
    }
## 其他
  * strrchr 
    * `char *strrchr(const char *str, int c)` 在参数 str 所指向的字符串中搜索最后一次出现字符 c（一个无符号字符）的位置。
  * strlen 
    * `unsigned int strlen (char *s)` 用来计算指定的字符串s的长度，不包括结束字符”\0”。
    * 注意：strlen() 函数计算的是字符串的实际长度，遇到第一个’\0’结束。如果你只定义没有给它赋初值，这个结果是不定的，它会从首地址一直找下去，直到遇到’\0’停止。而sizeof返回的是变量声明后所占的内存数，不是实际长度，此外sizeof不是函数，仅仅是一个操作符，strlen()是函数。
  * DFL_ck_strdup 
    * Create a buffer with a copy of a string. Returns NULL for NULL inputs.
    * `size = strlen((char*)str) + 1;`
                ALLOC_MAGIC_C1-> 00 ff 00 ff   size-> 2e 00 00 00   ret-> 2f 55 73 65   72 73 2f 73   │ ····.···/Users/s │
        61 6b 75 72   61 2f 67 69   74 73 6f 75   72 63 65 2f   │ akura/gitsource/ │
        41 46 4c 2f   63 6d 61 6b   65 2d 62 75   69 6c 64 2d   │ AFL/cmake-build- │
        64 65 62 75   67 00 ALLOC_MAGIC_C2-> f0 00   00 00 00 00   00 00 00 00   │ debug··········· │
  * snprintf() 
    * `int snprintf(char *str, int n, char * format [, argument, ...]);`函数用于将格式化的数据写入字符串
    * str为要写入的字符串；n为要写入的字符的最大数目，超过n会被截断；format为格式化字符串，与printf()函数相同；argument为变量。
    * 
      * 重点理解snprintf函数的返回值，不是实际打印出来的长度，而是实际应该打印的长度。
    * 
      * snprintf的可能的一种实现，及其可能存在的安全问题。
  * DFL_ck_alloc 
    * Allocate a buffer, returning zeroed memory. 
      * DFL_ck_alloc_nozero 
                        00 ff 00 ff   35 00 00 00   00 00 00 00   00 00 00 00   │ ····5··········· │
            00 00 00 00   00 00 00 00   00 00 00 00   00 00 00 00   │ ················ │
            00 00 00 00   00 00 00 00   00 00 00 00   00 00 00 00   │ ················ │
            00 00 00 00   00 00 00 00   00 00 00 00   00 f0 00 00   │ ················ │
  * alloc_printf 
    * User-facing macro to sprintf() to a dynamically allocated buffer 
      * ck_alloc:分配内存
      * snprintf:写入格式化字符串 
                        00 ff 00 ff   35 00 00 00   2f 55 73 65   72 73 2f 73   │ ····5···/Users/s │
            61 6b 75 72   61 2f 67 69   74 73 6f 75   72 63 65 2f   │ akura/gitsource/ │
            41 46 4c 2f   63 6d 61 6b   65 2d 62 75   69 6c 64 2d   │ AFL/cmake-build- │
            64 65 62 75   67 2f 61 66   6c 2d 61 73   00 f0 00 00   │ debug/afl-as···· │
  * access 
    * `int access(const char * pathname, int mode)` 检查调用进程是否可以对指定的文件执行某种操作。
    * 成功执行时，返回0。失败返回-1，errno被设为以下的某个值
  * strncmp
  * `int strncmp ( const char * str1, const char * str2, size_t n );`若str1与str2的前n个字符相同，则返回0；若s1大于s2，则返回大于0的值；若s1 若小于s2，则返回小于0的值。
  * strcmp
  * `int strcmp(const char *s1, const char *s2);`若参数s1 和s2 字符串相同则返回0。s1 若大于s2 则返回大于0 的值。s1 若小于s2 则返回小于0 的值。
  * strstr 
    * `char *strstr(const char *haystack, const char *needle)`在字符串 haystack 中查找第一次出现字符串 needle 的位置，不包含终止符 ‘\0’。
    * 返回该函数返回在 haystack 中第一次出现 needle 字符串的位置，如果未找到则返回 null。
  * gettimeofday 
    * `int gettimeofday(struct timeval *tv, struct timezone *tz)`gettimeofday()会把目前的时间用tv结构体返回，当地时区的信息则放到tz所指的结构中。
    * timeval 
                _STRUCT_TIMEVAL
        {
          __darwin_time_t         tv_sec;         /* seconds */
          __darwin_suseconds_t    tv_usec;        /* and microseconds */
        };
  * srandom 
    * 设置随机种子，注意只需要设置一次即可
    * 1、生产随机数需要种子（Seed），且如果种子固定，random()每次运行生成的随机数（其实是伪随机数）也是固定的；因为返回的随机数是根据稳定的算法得出的稳定结果序列，并且Seed就是这个算法开始计算的第一个值。
    * 2、srandom()可以设定种子，比如srandom(0) 、srandom(1)等等。如果srandom设定了一个固定的种子，那么random得出的随机数就是固定的；  
如果程序运行时通过srandom(time(NULL))设定种子为随机的，那么random()每次生成的随机数就是非固定的了。
  * open 
    * [open函数的简要介绍](http://c.biancheng.net/cpp/html/238.html)