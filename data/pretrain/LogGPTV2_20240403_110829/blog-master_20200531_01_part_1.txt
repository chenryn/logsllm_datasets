## C
### 作者
digoal
### 日期
2020-05-31
### 标签
PostgreSQL , C
----
## 背景
C回忆录.  
#### 1、for, while, do 几个循环中, 只有do至少会执行一次. 只有do在末尾需要分号结尾  
```  
for ( variable initialization; condition; variable update ) {  
  Code to execute while the condition is true  
}  
while ( condition ) {   
  Code to execute while the condition is true   
}   
do {  
} while ( condition );  
```  
#### 2、break 用来终止当前循环块. continue用来继续当前循环块的下一次循环;   
#### 3、boolean值, 0为false, 非0为true.    
#### 4、int main(xx) 函数return 0表示执行成功     
#### 5、switch case: , 命中后如果不加break 跳出block的话, 后面的case也会被执行, 直到遇到break. 建议加个default:.   
```  
switch (  ) {  
case this-value:  
  Code to execute if  == this-value  
  break;  
case that-value:  
  Code to execute if  == that-value  
  break;  
...  
default:  
  Code to execute if  does not equal the value following any of the cases  
  break;  
}  
```  
#### 6、```&& ||的优先级, 先&&后|| ```  
#### 7、```! 非 ```  
#### 8、```不等于  != ```  
#### 9、point   
```  
定义  
type *ptr   (type表示这个指针指向的内存中存什么类型)  
ptr 表示指针(存储内存地址)   
*ptr 表示指针指向的内存地址中存储的内容   
```  
#### 10、普通类型的 reference   
```  
定义  
type var  
var 表示内容  
&var 表示存储var的起始内存地址  
```  
#### 11、申请内存     
```  
*ptr = malloc(sizeof(*ptr))  
float *ptr;   
/* hundreds of lines of code */   
ptr = malloc( sizeof(*ptr) );   
```  
#### 12、释放内存   
```  
free(ptr)  
-- double free  
free( ptr );  
```  
#### 13、不用的指针, 建议将内容设置为0, 即让它指向null地址.     
```  
ptr = 0 ;   
```  
#### 14、文件操作  
```  
fopen  
fclose  
fread  
fwrite  
fprintf  
fgetc  
fgets  
r  - open for reading  
w  - open for writing (file need not exist)  
a  - open for appending (file need not exist)  
r+ - open for reading and writing, start at beginning  
w+ - open for reading and writing (overwrite file)  
a+ - open for reading and writing (append if file exists)  
b  - binary open  
```  
binary open  
This code will open test.txt for reading in text mode.   
To open a file in a binary mode you must add a b to the end of the mode string;   
for example, "rb" (for the reading and writing modes, you can add the b either after the plus sign - "r+b" - or before - "rb+")    
#### 15、文件操作的隐藏杀机  
#### 16、结构  
```  
struct Tag {  
  Members  
};  
struct Tag name_of_single_structure;  
```  
#### 17、指针结构, 访问  
```  
name_of_single_structure.name_of_variable;  
struct xampl *ptr;   
ptr->x   
```  
#### 18、数组  
```  
char astring[100];   
[] =    
多维数组  
[][] = ;  
```  
数组变量名表示指针, 指向第一个元素内存位置. array变量名 = 指向数组第一个元素的地址  
#### 19、字符串  
```  
char *ptr;  
char str[40];  
ptr = str;  /* Gives the memory address without a reference operator(&) */  
```  
As opposed to  
```  
int *ptr;  
int num;  
ptr = &num; /* Requires & to give the memory address to the ptr */  
```  
#### 20、字符串 \\0 结束  
#### 21、数组或char指针都可以用来存储字符串  
```  
char string[50];  只能存储49个字符  
```  
```  
char *arry;   
arry = malloc( sizeof(*arry) * 256 );    
free ( arry );   
```  
#### 22、往字符串变量填充内容  
```  
char *fgets (char *str, int size, FILE* file);  
```  
```  
#include   
int main()  
{  
    /* A nice long string */  
    char string[256];                                 
    printf( "Please enter a long string: " );  
    /* notice stdin being passed in */  
    fgets ( string, 256, stdin );             
    printf( "You entered a very long string, %s", string );  
    getchar();  
}  
```  
\\n结束输入, 但是\\n会存入字符串变量. 将\\n替换为\\0 结束字符串.   
https://faq.cprogramming.com/cgi-bin/smartfaq.cgi?answer=1044652485&id=1043284385  
```  
char input[256];  
int i;  
fgets( input, 256, stdin );  
for ( i = 0; i  File Name: extern.c  
    > Author: GatieMe  
    > Mail: PI:EMAIL   
    > Created Time: 2015年03月27日 星期五 16时11分50秒  
 *********************************************************/  
#include   
#include   
extern int ex_num = 20; // 作为变量定义会有警告  
int num = 30;  
int value;  
char str[81] = "abcdefg";  
```  
main.c  
```  
/**********************************************************  
    > File Name: main.c  
    > Author: GatieMe  
    > Mail: PI:EMAIL   
    > Created Time: 2015年03月27日 星期五 16时12分14秒  
 *********************************************************/  
#include   
#include   
extern int num;         //  声明一个外部变量，定义时使用int num = 30;  
extern int ex_num;      //  声明一个外部变量,定义时2使用extern int ex_num = 20;  
extern int value;       //  声明一个外部变量,定义时使用int value;  
extern char str[81];  
int a;                  //  既是声明也是定义  
extern int b;           //  只是声明不是定义              
int c = 10;             //  只是定义不是声明  
extern int d = 20;      //  只是定义不是声明, 但是作为变量定义会有警告  
int main(void)  
{  
    printf("num = %d\n", num);  
    printf("ex_num = %d\n", ex_num);  
    printf("value = %d\n", value);  
    printf("str = %s\n", str);  
    printf("a = %d\n", a);  
//  printf("%d\n", b);  // ERROR, 链接错误，找不到变量定义  
    printf("c = %d\n", c);  
    printf("d = %d\n", d);  
    return EXIT_SUCCESS;  
}  
```  
Makefile  
```  
#Makefile  
main:extern.o main.o  
    gcc $^ -o $@  
extern.o:extern.c  
    gcc  -c $^ -o $@   
main.o:main.c  
    gcc  -c $^ -o $@   