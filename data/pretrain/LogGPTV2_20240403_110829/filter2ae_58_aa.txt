**作者：fate0  
来源：[小米安全中心](https://mp.weixin.qq.com/s/uoM5xlxufULvRmaVq72uiQ "小米安全中心") **
**相关阅读：  
[《爬虫基础篇[Web 漏洞扫描器]》](https://paper.seebug.org/537/ "《爬虫基础篇\[Web 漏洞扫描器\]》")  
[《爬虫调度篇[Web 漏洞扫描器]》](https://paper.seebug.org/730/ "《爬虫调度篇\[Web 漏洞扫描器\]》")  
[《漏洞扫描技巧篇 [Web 漏洞扫描器]》](https://paper.seebug.org/1018/ "《漏洞扫描技巧篇 \[Web
漏洞扫描器\]》")**
#### 0x00 前言
上一篇主要讲了如何通过修改 Chromium 代码为 Web 漏洞扫描器的爬虫打造一个稳定可靠的 headless 浏览器。这篇我们从浏览器底层走到上层，从
C++ 切换到 JavaScript，讲一下如何通过向浏览器页面注入 JavaScript 代码来尽可能地获取页面上的链接信息。
#### 0x01 注入 JavaScript 的时间点
首先我们要解决的第一个问题是：在什么时间点向浏览器页面注入 JavaScript 代码？
答案非常简单， 在页面加载前，我们希望能够注入一段 JavaScript 代码以便于能够 Hook、备份各种未被污染的函数，
在页面加载后，我们希望能够注入一段 JavaScript 代码以便于能够进行遍历各个元素、触发各种事件、获取链接信息等操作。
那么下一个问题又来了：怎么定义页面加载前、页面加载后？
页面加载前的定义非常简单，只要能在用户代码执行前执行我们注入的 JavaScript
代码即可，也就是在页面创建之后、用户代码执行之前的时间段对于我们来说都算是页面加载前，CDP 刚好提供了这么一个 API
`Page.addScriptToEvaluateOnNewDocument` 能够让我们在页面加载前注入 JavaScript 代码。
接下来考虑一下该如何定义页面加载后。最简单的方法就是不管三七二一，每个页面都加载 30s
(即便是空白的页面)，随后再注入我们的代码，但很明显这会浪费很多资源，我们需要根据每个页面的复杂度来控制加载时间。可能会有同学说我们可以监听 `load`
事件，等待页面加载结束之后再注入代码，那我们考虑一个比较常见的场景，在某个页面上刚好有那么一两个图片字体资源加载速度特别慢，导致 `load`
迟迟未被触发(甚至不触发)，但这些资源其实我们并不在乎，完全可以直接注入我们代码，所以只等待 `load` 事件也并不是一个特别好的选择。
我们先看一下加载一个页面的过程，除了会触发 `load` 事件之外还会触发什么事件：
下面我们简单地介绍一下上面几个我们会用到的事件
之前解释过 `load` 事件可能对我们来说太晚了，但是现在 `DOMContentLoaded`
事件对我们来说又太早了，因为用户代码也可能会绑定这个事件然后操作 DOM，我们肯定是希望能够在页面稳定之后再注入我们的代码，所以在 `load` 和
`DOMContentLoaded`
之间某个时间点对我们来说比较合适，可惜并没有这样一个特别的事件存在，所以我个人觉得比较好的方案是将上面各个事件结合一起使用。
我们先说一下这几个事件的触发顺序，首先这几个事件触发顺序不一定，例如触发时间 `load` 事件不一定比 `DOMContentLoaded`
晚，`load` 也不一定比 `networkAlmostIdle` 晚。唯一能确定的就是 `networkAlmostIdle` 一定比
`networkIdle` 晚。在一般的情况下时间顺序是 `DOMContentLoaded` -> `networkAlmostIdle` ->
`networkIdle` -> `load`。
所以一般的解决方案：
  1. 等待 `load`，同时设定等待超时时间，`load` 超时直接注入代码，同时等待 `DOMContentLoaded`事件
  2. `DOMContentLoaded` 事件触发，接着等待 `networkAlmostIdle`，同时设定等待超时时间，超时直接注入代码
  3. `networkAlmostIdle` 事件触发，接着等待 `networkIdle` 同时设定等待超时时间，超时直接注入代码
如果 `load` 事件在其他事件前触发，那就直接注入代码。
#### 0x02 DOM 构建前
解决了在什么时候注入 JavaScript 代码的问题，接下来我们该开始考虑第一阶段该注入什么代码了。
由于在第一阶段的时间点，DOM 树还未构建，所以我们所注入的代码均不能操作 DOM，能干的事情也就只有 Hook、备份 BOM 中的函数。
##### basic
我们先把一些会导致页面阻塞、关闭的函数给 Hook 了，例如：
同时也需要在 CDP 中处理 `Page.javascriptDialogOpening` 事件，因为还有类似 `onbeforeunload`
这样的弹窗。
##### location
还记得我们上一篇通过修改 Chromium 代码将 `location` 变成可伪造的事情了吗？就是为了能够在这里对 `location` 直接
Hook，直接看代码：
这里还需要注意的是 `doucment.location` 需要等待 DOM 构建结束之后才能 hook, 所以需要注册
`DOMContentLoaded` 事件来 hook `document.location`。
##### 网络
因为之前我们修改了 `Chromium` 代码使得 `window.open` 无法新建窗口，这样在 CDP 中也没法获取 `window.open`
想打开的链接信息，所以我们还需要在代码中 Hook `window.open` 函数：
还有我们比较常用的 AJAX：
hook XHR 时要考虑的问题就是在 XHR 正在发送请求的时候，需不需要暂停我们的其他操作（如触发事件）？
我们注入的代码的下一个操作可能会中断正在发送的 XHR 请求，导致更多链接的丢失， 比较典型的例子就是：[AJAX
Demo](http://testphp.vulnweb.com/AJAX/index.php "AJAX Demo")，这个问题没有标准答案。
`WebSocket`、`EventSource`、`fetch` 和 XHR 差不多：
###### 时间
我们还需要 hook 两个定时器函数：
  * `setTimeout`
  * `setInterval`
因为可能用户代码会延迟或者定期做一些操作，我们可能等不来那么长的时间，所以我们要给这些定时器做一个加速， 也就是 Hook 之后修改相对应的 delay
为更小的值，同时加速之后也要 hook Date 类来同步时间。
##### 锁定
我们可以 hook 这些函数，那么其他人也可以继续 hook 这些函数，但一般对这些函数进行 hook 的人都不是什么好人， 被别人继续 hook
之后可能会影响到我们的代码，所以我们还需要锁定这些基础函数。
例子：
结果：
第一阶段我们能做的事情也做得差不多了，剩下的事情就交给第二阶段的代码干了。
#### 0x03 遍历节点
第二阶段，也就是页面稳定后，我们肯定是要先遍历 DOM 中的各个节点， 然后才能获取节点上的链接信息，以及触发节点上绑定的事件，所以这里我们看一下获取
DOM 中所有的节点，有哪些方法：
  * CDP 的 `DOM.querySelectorAll`
  * document.all
  * document.querySelectorAll
  * TreeWalker
我们一个一个的排除， 首先排除 CDP，因为如果使用 CDP 遍历各个节点，那就意味着后续的对节点的操作也要继续使用 CDP 才能进行，其速度远没有在一个
Context 内的代码操作 DOM 快。 接着排除 `document.all`(`HTMLAllCollection`，动态元素集合) 和
`document.querySelectorAll`(`NodeList`, 静态元素集合)，因为这两个都只是元素集合，而不是节点集合， 并不包含
text, comment 节点。最后就剩下 TreeWalker 了。
TreeWalker 也有两种玩法，一种是先获取所有的节点，然后在触发各个节点上的事件，另外一种是边遍历节点，边触发事件。
可能会有同学觉得第二种方法比较优雅，我们看一下使用第二种方法的一种情况：
结果：
是的，如果 TreeWalker 刚好走到一个节点，触发了事件使得该节点离开了 DOM 树，那 TreeWalker 就走不下去了，
所以比较保险的方法就是在页面稳定后收集一份静态的节点列表，再触发事件，也就是使用 TreeWalker 的第一种玩法。
#### 0x04 事件触发