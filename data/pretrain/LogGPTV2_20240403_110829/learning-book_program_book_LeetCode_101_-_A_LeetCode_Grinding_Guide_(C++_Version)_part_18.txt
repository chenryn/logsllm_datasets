或者链表，表示第1个节点连向的其它节点。邻接矩阵空间开销比邻接链表大，但是邻接链表不
支持快速查找i和j是否相连，因此两种表示方法可以根据题目需要适当选择。除此之外，我们
也可以直接用一个m×2的矩阵储存所有的边。
15.2二分图
二分图算法也称为染色法，是一种广度优先搜索。如果可以用两种颜色对图中的节点进行着
色，并且保证相邻的节点颜色不同，那么图为二分。
785.Is Graph Bipartite? (Medium)
---
## Page 140
15.3拓扑排序
135/143 -
题目描述
给定一个图，判断其是否可以二分，
输人输出样例
输入是邻接链表表示的图（如位置0的邻接链表为[1.3]，表示0与1、0与3相连）：输出是
一个布尔值，表示图是否二分。
Input: [[1,3], [0,2], [1,3], [0,2]]
1
3-
2
Output: true
在这个样例中，我们可以把{0,2}分为一组，把{1,3}分为另一组。
题解
利用队列和广度优先搜索，我们可以对未染色的节点进行染色，并且检查是否有颜色相同的
相邻节点存在。注意在代码中，我们用0表示未检查的节点，用1和2表示两种不同的颜色。
boolisBipartite(vector>& graph)(
int n = graph.size ();
if (n == 0) {
vector color(n, 0);
queue q;
for (int i = 0; i  findOrder(int numCourses, vector>& prerequisites) {
vector> graph(numCourses, vector());
vector indegree(nunCourses, 0), res;
for (const auto & prerequisite: prerequisites){
graph [prerequisite[1]] . push_back (prerequisite [0]);
++indegree [prerequisite [o]] ;
queue q;
for (int i = O; i ();
return res;
15.4练习
基础难度
1059.All Paths from Source Lead to Destination (Medium)
虽然使用深度优先搜索可以解决大部分的图遍历间题，但是注意判断是否陷人了环路。
进阶难度
1135.Connecting Cities With Minimum Cost (Medium)
笔者其实已经把这道题的题解写好了，才发现这道题是需要解锁才可以看的题目，为了避
免版权纠纷，故将其移至练习题内。本题考察最小生成树（minimum spanning tree，MST）的求
法，通常可以用两种方式求得：Prim's Algorithm，利用优先队列选择最小的消耗：以及Kruskals
Algorithm，排序后使用并查集。
882.Reachable Nodes In Subdivided Graph (Hard)
这道题笔者考虑了很久，最终决定把它放在练习题而非详细讲解。本题是经典的节点最短距
离问题，常用的算法有Bellman-Ford 单源最短路算法，以及Dijkstra无负边单源最短路算法。虽
然经典，但是LeetCode很少有相关的题型，因此这里仅供读者自行深入学习。
---
## Page 143
第16章更加复杂的数据结构
内容提要
引言
复合数据结构
并查集
16.1引言
目前为止，我们接触了大量的数据结构，包括利用指针实现的三剑客和C++自带的STL等。
对于一些题目，我们不仅需要利用多个数据结果解决问题，还需要把这些数据结构进行嵌套和联
动，进行更为复杂、更为快速的操作。
16.2并查集
并查集（union-find，或disjoint set）可以动态地连通两个点，并且可以非常快速地判断两个
点是否连通。假设存在n个节点，我们先将所有节点的父亲标为自己：每次要连接节点i和j时，
我们可以将1的父亲标为]：每次要查询两个节点是否相连时，我们可以查找i和j的祖先是否最
终为同一个人。
a
P
b
?
e
b
d
e
图16.l：并查集样例，其中union 操作可以将两个集合连在一起，find操作可以查找给定节点的祖先，并且
如果可以的话，将集合的层数高度降低
---
## Page 144
16.2并查集
139/143 -
684.Redundant Connection (Medium)
题目描述
在无向图找出一条边，移除它之后该图能够成为一棵树（即无向无环图），如果有多个解，返
回在原数组中位置最靠后的那条边。
输人输出样例
输入是一个二维数组，表示所有的边（对应的两个节点）：输出是一个一维数组，表示需要
移除的边（对应的两个节点）。
Input: [[1,2], [1,3], [2,3]]
1
/
2 - 3
Output:[2,3]
题解
因为需要判断是否两个节点被重复连通，所以我们可以使用并查集来解决此类问题。具体实
现算法如下所示。
class UF {
vector id;
public:
UF(int n): id(n){
iota（id.begin(），id.end()，0）；//iota函数可以把数组初始化为0到n-1
int find(int p){
while (p != id[p]) {
p = id[p];
return p;
void connect(int p, int q） {
id[find(p)] - find(q);
boolisConnected(int p,int q){
return find(p) == find(q);
}；
class Solution {
public:
vector findRedundantConnection(vector>& edges){
int n = edges.size();
UF uf (n + 1);
for (auto e: edges){
int u = e[0], v = e[1];
---
## Page 145
16.3复合数据结构
140/143 -
if (uf .isConnected(u,v)){
return e;
uf .connect (u, v);
return vector{-1, -1};
};
为了加速查找，我们可以使用路径压缩和按秩合并来优化并查集。其具体写法如下所示
cla8s UF {
vector id, size;
public:
UF(int n) : id(n) , size (n, 1) {
iota（id.begin()，id.end()，0);//iota函数可以把数组初始化为0到n-1
int find(int p) {
while (p != id[p]) {
id[p]-id[id[p]]；//路径压缩，使得下次查找更快
p = id[p];
return p;
void connect(int p, int q） {
int i = find(p), J = find(q);
if (i != j) {
//按秩合并：每次合并都把深度较小的集合合并在深度较大的集合下面
if (size[i]>来储存信息的key和 value，链表的链接顺序即为最
近使用的新旧顺序，最新的信息在链表头节点。同时我们需要一个嵌套着链表的选代器的un-
ordered_map进行快速搜索，存选代器的原因是方便调用链表的
splice函数来直接更新查找成功（cashhit）时的信息，即把选代器对应的节点移动为链表的头节
点。
class LRUCache{
unordered_map>::iterator> hash;
list> cache;
int size;
public:
LRUCache(int capacity) :size(capacity){}
int get(int key) {
auto it = hash.find(key);
if (it == hash.end()) {
return -1;
cache.splice(cache.begin() , cache, it->gecond) ;
return it->second->second;
void put(int key, int value) {
auto it = hash.find(key);
if (it != hash.end()) {
it->second->second = value;
---
## Page 147
16.4练习
142/143 -
return cache.splice (cache.begin() , cache, it->second) ;
cache.insert (cache.begin() , make_pair (key, value));
hash [key] = cache.begin () ;
if (cache.size() > size){
hash.erase (cache.back () .first) ;
cache .pop_back();
16.4练习
基础难度
1135.Connecting Cities With Minimum Cost (Medium)
使用并查集，按照Kruskal'sAlgorithm把这道题再解决一次吧。
380.Insert Delete GetRandom O(1) (Medium)
设计一个插入、删除和随机取值均为0（1)时间复杂度的数据结构。
进阶难度
432.All O°one Data Structure (Hard)
设计一个 increaseKey，decreaseKey，getMaxKey，getMinKey 均为O(1)时间复杂度的数据结
构。
716.Max Stack (Easy)
设计一个支持 push，pop，top，getMax和 popMax的 stack。可以用类似 LRU 的方法降低时
间复杂度，但是因为想要获得的是最大值，我们应该把unordered_map换成哪一种数据结构呢？
---
## Page 148
第17章后记
本书节选和改编于作者的个人笔记整理，其含有更多内容，但缺少相关的题解，作者一般用
其来巩固基础知识。
如果您觉得这本书对您有帮助，不妨打赏一下作者哟～
图17.1：微信打赏二维码
另外，如果您有任何建议和咨询，也可以加作者的微信imsocalledifestyle。我会尽快回复您
的信息。
---