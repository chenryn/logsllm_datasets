  65	
§  Shells	
  à	
  0	
  shells	
  L	
§  Scan	
  eme	
  à	
  1h37m23s	
Every	
  response	
  200	
  OK	
§  No	
  change	
  in	
  discoveries	
§  All	
  points	
  discovered	
  -­‐	
  per	
  baseline	
§  79	
  Informaeon	
  Points	
§  65	
  Vulnerabiliees	
§  0	
  Shells	
§  Scan	
  eme	
  à	
  9h56m55s	
§  Lots	
  more	
  to	
  check	
  ;)	
Every	
  response	
  404	
  Not	
  Found	
§  Less	
  to	
  scan	
  ==	
  Less	
  to	
  ﬁnd	
§  False	
  negaeves	
§  44	
  Informaeon	
  Points	
  (-­‐35)	
§  37	
  Vulnerabiliees	
  (-­‐28)	
§  Scan	
  eme	
  à	
  7m13s	
§  Much	
  quicker	
  scan	
§  Less	
  paths	
  traversed	
Every	
  response	
  500	
§  Server	
  Error	
  ==	
  OMG	
  VULN!	
§  False	
  posieves+++	
§  9540	
  Informaeon	
  points	
  (+9461)	
§  9526	
  Vulnerabiliees	
  (+9461)	
Random	
  Status	
  Codes	
§  Muleple	
  test	
  runs	
§  All	
  tests	
  produced	
  False	
  posieves++	
§  avg.	
  619	
  Informaeon	
  points	
  (+540)	
§  avg.	
  550	
  Vulnerabiliees	
  (+485)	
§  Avg.	
  scan	
  eme	
  à	
  11m37s	
§  Ooen	
  much	
  quicker	
  scans	
§  Lots	
  of	
  variaeon	
  in	
  scan	
  emes	
Random	
  Status	
  Codes	
§  Skipﬁsh	
  +	
  $random_status	
  =	
  chaos	
§  False	
  Posieves	
  +	
  False	
  Negaeves	
§  Scan	
  jobs	
  killed	
  (due	
  to	
  lack	
  of	
  scanner	
  resources)	
§  Scan	
  emes	
§  1st	
  scan	
  eme	
  à	
  10h3m35s	
§  2nd	
  scan	
  eme	
  à	
  0h0m4s	
§  3rd	
  scan	
  eme	
  à	
  16h47m41s	
Slowing	
a]ackers	
down!	
#5.3	
What	
  does	
your	
  WAF	
really	
  do?	
§ 
OMG	
  A]ack	
§ 
Block	
  /	
  Return	
  error	
§ 
403,500,	
  …	
§ 
Proﬁt???	
Why?	
Remember	
  that	
  list	
of	
  status	
  codes	
browsers	
  don’t	
handle	
  well?	
Yeah	
  well,	
  scanners	
don’t	
  usually	
  handle	
them	
  well	
  either!	
Especially	
  the	
1XX	
  codes	
§  Remember	
  LaBrea	
  tarpit?	
§ 
Tim	
  Liston	
  2001	
  *	
§ 
Designed	
  to	
  slow	
  spread	
  of	
  Code	
  Red	
§ 
Slows	
  down	
  scans	
  /	
  a]ackers	
*	
  h]p://labrea.sourceforge.net	
How	
  about	
  an	
HTTP	
  Tarpit!	
HTTP	
  Tarpit	
  Scenario	
§  WAF	
  detects	
  scan	
  /	
  a]ack	
§  Adds	
  source	
  IP	
  to	
  “naughty”	
  list	
§  Rewrite	
  all	
  responses	
  from	
  the	
  server	
§ 
100|101|102	
  status	
  codes	
  only	
  (random)	
§ 
204|304	
  might	
  also	
  be	
  useful	
  (no	
  content)	
Let’s	
  do	
some	
science!*	
*	
  Science	
  not	
  included	
vs.	
  the	
  HTTP	
  TARPIT	
NIKTO	
Baseline	
HTTP	
  Tarpit	
Scan	
  eme	
2m	
  18s	
Findings	
18	
14h	
  33m	
  2s	
10	
vs.	
  the	
  HTTP	
  TARPIT	
W3AF	
Baseline	
HTTP	
  Tarpit	
Scan	
  eme	
1h	
  37m	
  23s	
Findings	
65	
18m	
  10s	
0	
vs.	
  the	
  HTTP	
  TARPIT	
SKIPFISH	
Baseline	
HTTP	
  Tarpit	
Scan	
  eme	
18m	
  10s	
Findings	
Low:	
  2519	
Med:	
  2522	
High:	
  12	
Low:	
Med:	
High:	
05s	
0	
0	
3	
vs.	
  the	
  HTTP	
  TARPIT	
ACUNETIX	
Baseline	
HTTP	
  Tarpit	
Scan	
  eme	
1h	
  19m	
Findings	
Info:	
  1104	
Low:	
  30	
Med:	
  32	
High:	
  24	
Info:	
Low:	
Med:	
High:	
33m	
3	
3	
1	
0	
HTTP	
  Tarpit	
§  HTTP	
  Tarpit	
  Results	
  *	
§ 
Slow	
  down	
  scans	
  (nikto)	
§ 
340x	
  as	
  long	
§ 
Other	
  give	
  up	
  quicker	
  ;)	
§ 
Unreliable	
  /	
  aborted	
  scans	
§ 
Up	
  to	
  100%	
  less	
  ﬁndings	
*	
  Not	
  scieneﬁcally	
  sound	
  ;)	
Blocking	
successful	
exploitae0n	
#5.4	
We’ve	
  made	
  it	
hard	
  to	
  ﬁnd	
  the	
vulnerabiliees	
We’ve	
  made	
  it	
Ome	
  consuming	
for	
  a]ackers	
Now	
  let’s	
  stop	
  the	
sk1dd13s	
  using	
Metasploit	
  to	
  pop	
$hells	
Q:	
  How	
  ooen	
  does	
  Metasploit	
  reference	
status	
  codes?	
  rgrep	
  -­‐E	
  'res[p|ponse]?\.code'	
  *	
à	
  958	
  *	
*	
  Not	
  scieneﬁcally	
  sound	
  ;)	
rgrep	
  -­‐E	
  'res[p|ponse]?\.code'	
  *	
Lots	
  of	
dependency	
  on	
status	
  codes*	
*	
  yep,	
  even	
  the	
  stuﬀ	
  I	
  wrote	
  if	
  (res.code	
  =	
  300)	
  case	
  res.code	
  when	
  401	
  print_warning("Warning:	
  The	
  web	
  site	
  asked	
  for	
  authentication:	
  #{res.headers	
  ['WWW-­‐Authenticate']	
  ||	
  res.headers 	
  ['Authentication']}")	
  end	
  fail_with(Exploit::Failure::Unknown,	
  "Upload	
  failed	
  on	
  #{path_tmp}	
  [#{res.code}	
  #{res.message}]")	
  end	
No	
  match,	
No	
  shell*	
*	
  exploit	
  dependent	
#6	
]	
[	
  RE VIEW 
§  Using	
  status	
  codes	
  to	
  our	
  beneﬁt	
  is	
  fun	
§ 
…	
  and	
  useful!	
§  Browsers	
  can	
  be	
  quirky	
§  Scanners	
  /	
  a]ack	
  toolkits	
  are	
  someemes	
set	
  in	
  their	
  ways	
§ 
Take	
  the	
  easy	
  route	
§ 
Easy	
  to	
  fool	
§  WAFs	
  need	
  to	
  get	
  more	
  oﬀensive	
  about	
their	
  defense	
§ 
More	
  than	
  just	
  blocking	
  a	
  request	
§ 
Even	
  if	
  you	
  use	
  a	
  snazzy	
  message	
§ 
Hacking	
  back	
  is	
  bad	
§ 
Slowing	
  down	
  known	
  a]acks	
  is	
  good	
§ 
Make	
  life	
  harder	
  for	
  skiddies	
  is	
  pricele$$	
§  Current	
  tools	
  are	
  much	
  the	
  same	
  as	
  APT	
§ 
APT	
  (Adequate	
  Persistent	
  Threat)	
§ 
Only	
  as	
  advanced	
  as	
  they	
  NEED	
  to	
  be	
…because	
  screwing	
with	
  sk1dd13s	
is	
  fun!	
Implementaeon	
#6.1	
§  Ge]o	
  implementaeon	
§ 
PHP	
  (the	
  lowest	
  common	
  denominator)	
§ 
auto-­‐prepend-­‐ﬁle	
§ 
Limited	
  to	
  resources	
  PHP	
  handles	
§ 
MITMdump	
§ 
MITMproxy	
  ==	
  memory	
  hog	
§ 
Reverse	
  proxy	
  mode	
§  Usable	
  implementaeon	
§ 
Nginx	
  as	
  reverse	
  proxy	
§ 
Requires:	
  ngx_lua	
§ 
ngx.status	
  =	
  XXX	
§ 
Bugs	
  in	
  non-­‐git	
  version	
§ 
203,	
  305,	
  306,	
  414,	
  505,	
  506	
  return	
  nil	
h]ps://github.com/ChrisJohnRiley/Random_Code/blob/master/nginx/nginx.conf	
§  Ease	
  adopeon	
§  Implement	
  into	
  mod-­‐security	
§ 
Not	
  a	
  simple	
  task	
§ 
Already	
  been	
  discussed	
  many	
  emes	
§ 
Help	
  wanted	
  ;)	
Countering	
this	
  research	
#6.2	
§  Less	
  reliance	
  on	
  status	
  codes	
§  More	
  reliance	
  on	
  content	
  /	
  headers	
§  Pros 	
§ 
Be]er	
  matching	
  /	
  intelligence	
§  Cons	
§ 
Slower?	
  (regex	
  matching)	
§ 
More	
  resource	
  intensive	
Queseons?	
CODE	
  /	
  SCRIPTS	
  AVAILABLE	
HTTP://GITHUB.COM/CHRISJOHNRILEY/RANDOM_CODE	
Thanks	
  for	
  coming	
h]p://c22.cc	
@ChrisJohnRiley	
  PI:EMAIL