子句指定更新对象的UPDATE语句称为搜索型UPDATE语句。
● UPDATE语句可以将列的值更新为NULL。
● 同时更新多列时，可以在UPDATE语句的SET子句中，使用逗号分隔更
新对象的多个列。
语句的基本语法
UPDATE
使用INSERT语句向表中插入数据之后，有时却想要再更改数据，
例如“将商品销售单价登记错了”等的时候。这时并不需要把数据删除之
KEYWORD 后再重新插入，使用UPDATE语句就可以改变表中的数据了。
●UPDATE语句
和INSERT语句、DELETE语句一样，UPDATE语句也属于DML
语句。通过执行该语句，可以改变表中的数据。其基本语法如下所示。
语法4-4 改变表中数据的UPDATE语句
UPDATE 
SET  = ;
KEYWORD 将更新对象的列和更新后的值都记述在SET子句中。我们还是以
●SET子句
Product（商品）表为例，由于之前我们删除了“销售单价大于等于
4000日元”的2行数据，现在该表中只剩下了6行数据了（表4-2）。
表4-2 Product表
product_id product_name product_type sale_price purchase_price regist_date
（商品编号） （商品名称） （商品种类） （销售单价） （进货单价） （登记日期）
0001 T恤衫 衣服 1000 500 2009-09-20
0002 打孔器 办公用品 500 320 2009-09-11
0004 菜刀 厨房用具 3000 2800 2009-09-20
0006 叉子 厨房用具 500 2009-09-20
0007 擦菜板 厨房用具 880 790 2008-04-28
0008 圆珠笔 办公用品 100 2009-11-11
● 134 第4章 数据更新
接下来，让我们尝试把regist_date列（登记日期）的所有数据
统一更新为“2009-10-10”。具体的SQL语句请参见代码清单4-15。
代码清单4-15 将登记日期全部更新为“2009-10-10”
UPDATE Product
SET regist_date = '2009-10-10';
表中的数据有何变化呢？我们通过SELECT语句来确认一下吧。
-- 确认更新内容
SELECT * FROM Product ORDER BY product_id;
执行结果
product_id | product_name | product_type | sale_price | purchase_price | regist_date
-----------+--------------+--------------+-----------+---------------+-----------
0001 | T恤衫 | 衣服 | 1000 | 500 | 2009-10-10
0002 | 打孔器 | 办公用品 | 500 | 320 | 2009-10-10
0004 | 菜刀 | 厨房用具 | 3000 | 2800 | 2009-10-10
0006 | 叉子 | 厨房用具 | 500 | | 2009-10-10
0007 | 擦菜板 | 厨房用具 | 880 | 790 | 2009-10-10
0008 | 圆珠笔 | 办公用品 | 100 | | 2009-10-10
所有行的数据都被更新为“2009-10-10”
此时，连登记日期原本为NULL的数据行（运动T恤）的值也更新
为2009-10-10了。
0003 | 运动T恤 | 衣服 | 4000 | 2800 |
➡
0003 | 运动T恤 | 衣服 | 4000 | 2800 | 2 009-10-10
指定条件的 语句（搜索型 ）
UPDATE UPDATE
接下来，让我们看一看指定更新对象的情况。更新数据时也可以像
DELETE语句那样使用WHERE子句，这种指定更新对象的UPDATE语
KEYWORD 句称为搜索型UPDATE语句。该语句的语法如下所示（与DELETE语句
●搜索型UPDATE
十分相似）。
语法4-5 更新部分数据行的搜索型UPDATE
UPDATE 
SET  = 
WHERE ;
4-3 数据的更新（UPDATE语句的使用方法） 135 ●
例如，将商品种类（product_type）为厨房用具的记录的销售单
价（sale_price）更新为原来的10倍，请参见代码清单4-16。
代码清单4-16 将商品种类为厨房用具的记录的销售单价更新为原来的10倍
UPDATE Product
SET sale_price = sale_price * 10
WHERE product_type = '厨房用具';
我们可以使用如下SELECT语句来确认更新后的内容。
-- 确认更新内容
SELECT * FROM Product ORDER BY product_id;
执行结果
product_id | product_name | product_type | sale_price | purchase_price | regist_date
-----------+--------------+--------------+-----------+---------------+-----------
0001 | T恤衫 | 衣服 | 1000 | 500 | 2009-10-10
0002 | 打孔器 | 办公用品 | 500 | 320 | 2009-10-10
0004 | 菜刀 | 厨房用具 | 30000 | 2800 | 2009-10-10
0006 | 叉子 | 厨房用具 | 5000 | | 2009-10-10
0007 | 擦菜板 | 厨房用具 | 8800 | 790 | 2009-10-10
0008 | 圆珠笔 | 办公用品 | 100 | | 2009-10-10
仅厨房用具的价格更新为原来的10倍了
该语句通过WHERE子句中的“product_type = '厨房用具'”
条件，将更新对象限定为3行。然后通过SET子句中的表达式sale_
price * 10，将原来的单价扩大了10倍。SET子句中赋值表达式的右
边不仅可以是单纯的值，还可以是包含列的表达式。
使用 进行更新
NULL
使用UPDATE也可以将列更新为NULL（该更新俗称为NULL清
空）。此时只需要将赋值表达式右边的值直接写为NULL即可。例如，我
KEYWORD 们可以将商品编号（product_id）为0008的数据（圆珠笔）的登
●NULL清空
记日期（regist_date）更新为NULL（代码清单4-17）。
代码清单4-17 将商品编号为0008的数据（圆珠笔）的登记日期更新为NULL
UPDATE Product
SET regist_date = NULL
WHERE product_id = '0008';
-- 确认更新内容
SELECT * FROM Product ORDER BY product_id;
● 136 第4章 数据更新
执行结果
product_id | product_name | product_type | sale_price | purchase_price | regist_date
-----------+--------------+--------------+-----------+---------------+-----------
0001 | T恤衫 | 衣服 | 1000 | 500 | 2009-10-10
0002 | 打孔器 | 办公用品 | 500 | 320 | 2009-10-10
0004 | 菜刀 | 厨房用具 | 30000 | 2800 | 2009-10-10
0006 | 叉子 | 厨房用具 | 5000 | | 2009-10-10
0007 | 擦菜板 | 厨房用具 | 8800 | 790 | 2009-10-10
0008 | 圆珠笔 | 办公用品 | 100 | |
登记日期被更新为NULL
和INSERT语句一样，UPDATE语句也可以将NULL作为一个值来
使用。
但是，只有未设置NOT NULL约束和主键约束的列才可以清空为
NULL。如果将设置了上述约束的列更新为NULL，就会出错，这点与
INSERT语句相同。
法则4-6
使用UPDATE语句可以将值清空为NULL（但只限于未设置NOT NULL约束的列）。
多列更新
UPDATE语句的SET子句支持同时将多个列作为更新对象。例如我们
刚刚将销售单价（sale_price）更新为原来的10倍，如果想同时将进货
单价（purchase_price）更新为原来的一半，该怎么做呢？最容易想到
的解决办法可能就是像代码清单4-18那样，执行两条UPDATE语句。
代码清单4-18 能够正确执行的繁琐的UPDATE语句
-- 一条UPDATE语句只更新一列
UPDATE Product
SET sale_price = sale_price * 10
WHERE product_type = '厨房用具';
UPDATE Product
SET purchase_price = purchase_price / 2
WHERE product_type = '厨房用具';
虽然这样也能够正确地更新数据，但执行两次UPDATE语句不但
有些浪费，而且增加了SQL语句的书写量。其实，我们可以将其合并为
4-3 数据的更新（UPDATE语句的使用方法） 137 ●
一条UPDATE语句来处理。合并的方法有两种，请参见代码清单4-19和
代码清单4-20。
方法①：代码清单4-19 将代码清单4-18的处理合并为一条UPDATE语句
-- 使用逗号对列进行分隔排列
UPDATE Product
SET sale_price = sale_price * 10,
purchase_price = purchase_price / 2
WHERE product_type = '厨房用具';
方法②：代码清单4-20 将代码清单4-18的处理合并为一条UPDATE语句
-- 将列用()括起来的清单形式
UPDATE Product
SET (sale_price, purchase_price) = (sale_price * 10, 
purchase_price / 2)
WHERE product_type = '厨房用具';
表示下一行接续本行，只是由于版面所限而换行。
执行上述两种UPDATE语句，都可以得到相同的结果：只有厨房用
具的销售单价（sale_price）和进货单价（purchase_price）被
更新了。
-- 确认更新内容
SELECT * FROM Product ORDER BY product_id;
执行结果
product_id | product_name | product_type | sale_price | purchase_price | regist_date
-----------+--------------+--------------+-----------+---------------+-----------
0001 | T恤衫 | 衣服 | 1000 | 500 | 2009-10-10
0002 | 打孔器 | 办公用品 | 500 | 320 | 2009-10-10
0004 | 菜刀 | 厨房用具 | 300000 | 1400 | 2009-10-10
0006 | 叉子 | 厨房用具 | 50000 | | 2009-10-10
0007 | 擦菜板 | 厨房用具 | 88000 | 395 | 2009-10-10
0008 | 圆珠笔 | 办公用品 | 100 | |
厨房用具的销售单价更 厨房用具的进货单价更新为
新为原来的10倍 原来的一半
当然，SET子句中的列不仅可以是两列，还可以是三列或者更多。
需要注意的是第一种方法——使用逗号将列进行分隔排列（代码清单
4-19），这一方法在所有的DBMS中都可以使用。但是第二种方法——将
列清单化（代码清单4-20），这一方法在某些DBMS中是无法使用的A。因
注A
此，实际应用中通常都会使用第一种方法。
可以在PostgreSQL和DB2中使用。
● 138 第4章 数据更新
第4章 数据更新
4-4
事务
● 事务是需要在同一个处理单元中执行的一系列更新处理的集合。通过使用
学习重点
事务，可以对数据库中的数据更新处理的提交和取消进行管理。
● 事务处理的终止指令包括COMMIT（ 提交处理）和ROLLBACK（取消处
理）两种。
● DBMS的事务具有原子性（Atomicity）、一致性（Consistency）、隔离性
（Isolation）和持久性（Durability）四种特性。通常将这四种特性的首字母
结合起来，统称为ACID特性。
什么是事务
KEYWORD 估计有些读者对事务（transaction）这个词并不熟悉，它通常被用于
●事务
商务贸易或者经济活动中，但是在RDBMS中，事务是对表中数据进行更
新的单位。简单来讲，事务就是 需要在同一个处理单元中执行的一系列更
新处理的集合 。
如前几节所述，对表进行更新需要使用INSERT、DELETE或者
UPDATE三种语句。但通常情况下，更新处理并不是执行一次就结束了，
而是需要执行一系列连续的操作。这时，事务就能体现出它的价值了。
说到事务的例子，请大家思考一下下述情况。
现在，请大家把自己想象为管理Product（商品）表的程序员或者
软件工程师。销售部门的领导对你提出了如下要求。
“某某，经会议讨论，我们决定把运动T恤的销售单价下调1000日元，
同时把T恤衫的销售单价上浮1000日元，麻烦你去更新一下数据库。”
由于大家已经学习了更新数据的方法——只需要使用UPDATE进行
更新就可以了，所以肯定会直接回答“知道了，请您放心吧”。
此时的事务由如下两条更新处理所组成。
4-4 事务 139 ●
●更新商品信息的事务
① 将运动T恤的销售单价降低1000日元
UPDATE Product
SET sale_price = sale_price - 1000
WHERE product_name = '运动T恤';
② 将T恤衫的销售单价上浮1000日元
UPDATE Product
SET sale_price = sale_price + 1000
WHERE product_name = 'T恤衫';
上述①和②的操作一定要作为同一个处理单元执行。如果只执行了①
的操作而忘记了执行②的操作，或者反过来只执行了②的操作而忘记了执
行①的操作，一定会受到领导的严厉批评。遇到这种需要在同一个处理单
元中执行一系列更新操作的情况，一定要使用事务来进行处理。
法则4-7
事务是需要在同一个处理单元中执行的一系列更新处理的集合。
一个事务中包含多少个更新处理或者包含哪些处理，在DBMS中并
没有固定的标准，而是根据用户的要求决定的（例如，运动T恤和T恤衫
的销售单价需要同时更新这样的要求，DBMS是无法了解的）。
创建事务
如果想在DBMS中创建事务，可以按照如下语法结构编写SQL语句。
语法4-6 事务的语法
事务开始语句;
DML语句①;
DML语句②;
DML语句③;
.
.
.
事务结束语句（COMMIT或者ROLLBACK）;
使用事务开始语句和事务结束语句，将一系列DML语句（INSERT/
UPDATE/DELETE语句）括起来，就实现了一个事务处理。
● 140 第4章 数据更新
这时需要特别注意的是事务的开始语句A。实际上，在标准SQL中
注A 并没有定义事务的开始语句，而是由各个DBMS自己来定义的。比较有
与之相对，事务结束语句只有
代表性的语法如下所示。
COMMIT和ROLLBACK两种，
在所有的RDBMS中都是通用的。
●SQL Server、PostgreSQL
KEYWORD BEGIN TRANSACTION
●BEGIN TRANSACTION
●START TRANSACTION ●MySQL
START TRANSACTION
●Oracle、DB2
无
例如使用之前的那两个UPDATE（①和②）创建出的事务如代码清
单4-21所示。
代码清单4-21 更新商品信息的事务
SQL Server PostgreSQL
BEGIN TRANSACTION;
-- 将运动T恤的销售单价降低1000日元
UPDATE Product
SET sale_price = sale_price - 1000
WHERE product_name = '运动T恤';
-- 将T恤衫的销售单价上浮1000日元
UPDATE Product
SET sale_price = sale_price + 1000