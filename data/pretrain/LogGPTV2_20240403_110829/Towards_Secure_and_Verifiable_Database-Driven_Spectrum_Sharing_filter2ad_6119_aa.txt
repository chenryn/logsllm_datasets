title:Towards Secure and Verifiable Database-Driven Spectrum Sharing
author:Zhili Chen and
Lin Chen and
Hong Zhong
2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Towards Secure and Veriﬁable
Database-driven Spectrum Sharing
Zhili Chen1, Lin Chen2, Hong Zhong1
1School of Computer Science and Technology, Anhui University, 230601 Hefei, China
2Lab. Recherche Informatique (LRI-CNRS UMR 8623), Univ. Paris-Sud, 91405 Orsay, France
Email: PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract—Database-driven spectrum access is regarded as
an effective spectrum redistribution mechanism. However, dia-
loguing with the spectrum database requires both primary and
secondary users to reveal their sensitive data to the spectrum
database manager (SDM), leading to serious privacy concerns. In
this paper, we show that the SDM can perform database opera-
tions (both updates and queries) without knowing any informa-
tion about the users’ sensitive inputs and the database contents,
by combining garbled circuits and secret sharing. Our design uses
data-oblivious sorting networks to leverage parallelism of query
operations, yielding an efﬁcient query algorithm. We further
combine secure computations with authentication techniques to
get a veriﬁcation mechanism for correctness checking. As far as
we know, our proposal is the ﬁrst secure and veriﬁable database-
driven spectrum sharing scheme protecting both primary users’
(PUs’) and secondary users’ (SUs’) privacies. Finally, we fully
implement our system, and demonstrate that even on commodity
PC, our implementation suffers mild performance overhead.
I.
INTRODUCTION
The ever increasing spectrum demand for emerging wire-
less applications and the unbalanced utilization of radio spec-
trum resource have prompted spectrum redistribution, where
unlicensed secondary users (SUs) use or buy idle spectrum
from licensed primary users (PUs). For spectrum redistribu-
tion, two ways are applied to determine channel availability:
spectrum sensing and white space database. In the former, an
SU ﬁnds an available channel by listening and analyzing the
PU’s signal in the channel, while in the latter, an SU queries
a database to get spectrum availability information (SAI) at
its location. It has been shown that database-driven spectrum
access usually leads to more efﬁcient spectrum utilization
over spectrum sensing, due to the large margins in incumbent
detection thresholds in spectrum sensing imposed by regulation
authorities [1]. Therefore, FCC recently designated the white
space database as a requisite for cognitive radio devices [2].
in spectrum redistribution,
database-driven spectrum access also faces new security threat-
s [3], as summarized in the following.
• PUs’ Operational Privacy Threats. In order to update
its channel states, each PU should provide its operational
information (e.g. transmitter ID, location, antenna param-
eter, power, time of operation, etc [3]) to the spectrum
database; this may expose the PUs’ sensitive information
to the spectrum database and may bring security vulner-
ability if the spectrum database manager is not a trusted
party. PUs’ operational privacy threats have become even
effectiveness
Despite
its
more important and urgent due to the recent calls in the
United States by Federal Communications Commission
(FCC) for sharing federal government (including military)
spectrum in the 3.5 GHz band with non-government
systems [4].
• SUs’ Location Privacy Threats. Before picking a chan-
nel to use, each SU should query spectrum availability in-
formation from the spectrum database with its geographic
location; this may lead to location privacy disclosure of
SUs in case of intrusted spectrum database manager. Note
that location information is normally regarded as a user’s
sensitive information, which can also be used to infer the
user’s other sensitive information, e.g., health condition,
lifestyle and so on. The location privacy threats have been
widely acknowledged in the literature, e.g., [5][6][7][8].
Furthermore, if the database manager is malicious, he may
not perform database updates correctly, or he may return
outdated or false query results. Therefore,
is important
to investigate how we can build a database-driven spectrum
sharing framework under which both PUs and SUs do not
reveal their inputs in the clear and the correctness of database
operations is veriﬁable, which is the focus of this paper.
it
There exist a number of approaches for protecting users’
location privacy in traditional location based services, such
as k-anonymity approach, or collaborative location privacy
protection [5][6][7]. However, these approaches either requires
a trusted server or incur extra overhead in user cooperation, and
hence cannot be directly applied in database-driven spectrum
sharing. Recently, a scheme called PriSpectrum is proposed in
[9] to protect the location privacy of SUs in database-driven
spectrum sharing. However, as far as we know, there is no
existing work that addresses the problem of the operational
privacy of PUs and the correctness veriﬁcation of database
operations in this context.
Motivated by the above arguments, in this paper we de-
vise a secure and veriﬁable database-driven spectrum sharing
scheme, protecting both PUs’ operational privacy and SUs’
location privacy while ensuring correctness veriﬁcation of
database operations. It is not a priori clear whether spectrum
sharing can be performed practically in such a manner that
both PUs’ and SUs’ privacies are protected, and the correctness
of database operations is veriﬁed. There are three main chal-
lenges associated with this task. First, to address the privacy
concerns raised above, spectrum sharing should be performed
without the spectrum database manager ever learning the PUs’
operational information and the SUs’ location information, and
2158-3927/17 $31.00 © 2017 IEEE
DOI 10.1109/DSN.2017.17
285
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:30 UTC from IEEE Xplore.  Restrictions apply. 
even the spectrum database. This requirement is key, since any
leakage of such information could lead to serious privacy dis-
closure. Second, such a secure algorithm ought to be efﬁcient,
and scale gracefully with the number of operations. Third,
an appropriate veriﬁcation mechanism should be conceived to
defend against malicious attacks, while does not damage the
running efﬁciency much. The privacy requirements imply that
our spectrum sharing algorithm ought to be data-oblivious:
its execution ought to not depend on the user input. Both
efﬁciency and veriﬁcation requirements mean that the secure
algorithm should be elaborately designed.
Our main contributions are articulated as follows.
• Secure and veriﬁable protocol: We design a secure proto-
col for database-driven spectrum sharing that meets all the
above requirements: privacy, efﬁciency and veriﬁability.
The resulted protocol is hybrid, combing garbled circuits
with secret sharing. We then prove that our protocol is
cryptographically secure against semi-honest adversaries,
and demonstrate that it also defends against several ma-
licious attacks.
• Data-oblivious algorithm: We propose and use in our
design an efﬁcient data-oblivious database query algorith-
m yielding a complexity O(M log M ), where M is the
number of query operations. This is with log M factor
of query operations in the clear, and achieved by using
sorting networks, leveraging parallelism in operations.
• Correctness veriﬁcation: We combine secure computa-
tions and MAC techniques to design a correctness veriﬁ-
cation mechanism for both update and query operations.
The proposed veriﬁcation can defend against various
malicious attacks tampering the spectrum database or
returning false query results.
• Experimental evaluation: We fully implement our secure
database-driven spectrum sharing system, and carry out
extensive experiments to evaluate its performance. Exper-
imental results demonstrate that our scheme is practical
in term of computation and communication performance.
The remainder of this paper is organized as follows. Section
II and III provide problem formulation and technical prelimi-
naries. We present in detail our secure and veriﬁable database-
driven spectrum sharing protocol in Section IV, and prove its
security in both semi-honest and malicious setting in Section
V. In Section VI, we implement our protocol, and evaluate
the performance in terms of computation and communication
overhead. Section VII brieﬂy reviews related work. Finally, the
paper is concluded in Section VIII.
II. SYSTEM MODEL AND PROBLEM FORMULATION
A. System Model
We consider a generic database-driven spectrum sharing
framework consisting of the following three entities:
transmission right.
• Primary users (PUs):
licensed users with exclusive
• Secondary users (SUs): unlicensed users seeking spec-
• Spectrum database manager (SDM): agent managing
the spectrum database and making the spectrum allocation
trum resource unused or leased by PUs.
decision to SUs based on the spectrum availability infor-
mation from the database. The SDM can be a spectrum
broker or a decision making agent on a base station of a
cognitive radio cellular network.
The network terrain is divided into non-overlapping n × n
squares denoted by S = {sij}n×n, where sij denotes the
square (i, j). The spectrum availability information (SAI) of
the network is stored in the spectrum database, which is
represented by a n × n matrix M = {mij}n×n, where mij
indicates the SAI of the square sij. More speciﬁcally, mij
is a K-element vector {ij
}K with 1 ≤ k ≤ K, where ij
k
denotes the SAI of channel k in square sij. Given square
sij and channel k, ij
k can be a single-bit value indicating
whether channel k is occupied (1) or not (0), or a multi-bit
value indicating the signal level of channel k. Without loss of
generality, we apply the former for simplicity in this paper.
k
We denote the number of PUs and SUs by Np and Ns, and
assume that each PU k provides a channel k for simplicity (it
is simple to extend to the case with multiple channels), i.e.
Np = K. This implies that we regard transmitter ID as public
knowledge. The spectrum access and sharing is performed in
rounds. At the beginning of each round, the following actions
are performed:
• Each PU decides whether or not
to use his channel
during the coming round, computes its service contour
(the geographical range where the channel cannot be
reused) using its operational information (e.g. location,
antenna parameter, power, etc.), and sends his update
request to the SDM. We denote the update request of PU
k by (k,Ck), where Ck = {cij}n×n is an n× n bit matrix
with all elements being 0 (null update) or describing the
service contour of channel k (update), where cij = 1
means that square sij overlaps with the service contour
and cij = 0 otherwise.
• Any SU wishing to use a particular channel (or several
channels) for the coming round sends a query request
containing its location (i.e. its located square) to the SDM.
• The SDM updates the spectrum database based on update
requests submitted by PUs and queries in the database
given the query requests submitted by SUs.
B. Security Goals and Threat Models
We introduce a new entity crypto-service provider (CSP)
to cooperate with SDM to carry out two-party secure compu-
tations (as illustrated in Fig. 1), and aim at designing a secure
and veriﬁable spectrum sharing scheme as long as SDM and
CSP do not collude with each other.
We ﬁrstly focus on the semi-honest (a.k.a. honest but
curious) threat model where SDM and CSP follow the protocol
we develop but may analyze protocol
transcripts to infer
additional information. The proposed protocol should not leak
any illegitimate information to any entity. By entities we refer
to PUs, SUs, SDM and CSP. By illegitimate information
we refer to any sensitive information related to other agent.
Speciﬁcally, the following security requirements should be
satisﬁed:
• No other entity can learn anything about the operational
information except the public knowledge transmitter ID,
286
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:30 UTC from IEEE Xplore.  Restrictions apply. 
SUs
PUs
Update
CSP
Shared
Database
SDM
Shared
Database
Query
Fig. 1.
and database are secretly shared between SDM and CSP.
Secure and veriﬁable spectrum sharing architecture: inputs, outputs
of any PU;
query result of any SU;
• No other entity can learn anything about the location and
• No entity can learn anything about the spectrum database
• Any external entity cannot learn any information about
except that each PU knows its current channel state;
the spectrum sharing.
We then also consider the malicious threat model where an
attacker can deviate from the protocol arbitrarily, and require
that the correctness of all update and query processing should
be well veriﬁed in the presence of malicious SDM or CSP.
III. TECHNICAL PRELIMINARIES
A. Garbled Circuits
Garbled circuits (a.k.a Yao’s protocol) [10][11] is a generic
method for secure two-party computation. We give a brief
overview of garbled circuits via an illustrative example in
which two parties securely compute a function f (x1, x2) (rep-
resented by a boolean circuit) in the presence of semi-honest
adversaries. Party i (i ∈ {1, 2}) holds an input vi. Each party
privately provides its input, and both parties cooperatively run
a garbled circuit evaluating f (v1, v2) so that no party learns
more than what is revealed from the output. The protocol
requires that both parties do not collude with each other.
The core idea of garbled circuits relies in the circuit
encoding. One party (as garbler) associates two random cryp-
tographic keys, K 0
wi, to each wire wi of the boolean
circuit computing f, corresponding to the bit-values bi = 0 and
bi = 1. For each binary gate g with input wires wi and wj,
and output wire wk, the garbler computes the four ciphertexts
(e.g., the AND gate as illustrated in Fig. 2)
wi and K 1
Enc(K
bi
wi ,K
bj
wj
)(K g(bi,bj )
wk
) for bi, bj ∈ {0, 1}.
The above four randomly ordered ciphertexts deﬁne the gar-
bled gate g. Composed of a series of garbled gates, a garbled
circuit can be securely evaluated by the other party (as evalu-
ator).
In our context, all inputs are secretly shared, and ﬁnally
the garbled output and its decoding information are held
by evaluator and garbler, respectively. Continuing with the
previous example, let party 1 as garbler holding input shares
[v1]1 and [v2]1 and party 2 as evaluator holding [v1]2 and [v2]2,
our garbled circuit protocol can be outlined as follows.
ib
jb
0 0
0 1
1 0
1 1
j
0
w
0
w
i
)
g b b Garbled value
( ,
i
0
)k
w
0
)k
w
0
)k
w
1
)k
w
K K K
K K K
K K K
K K K
Enc
(
Enc
(
Enc
(
Enc
(
0
0
0
1
(
(
(
(
0
w
i
1
w
i
1
w
0
w
,
,
,
,
)
)
)
)
1
w
i
1
w
j
j
j
j
Fig. 2.
Illustration of a garbled AND gate (i.e., g(bi, bj ) = bi ∧ bj).
• Garbler: generates a garbled circuit computing f, garbles
its input shares [v1]1 and [v2]1, and sends the garbled
circuit, garbled [v1]1 and [v2]1 to the evaluator, while
holds the output decoding information itself.
• Evaluator: upon receiving the garbled circuit, garbled
[v1]1 and [v2]1, the evaluator computes the garbled inputs
from the received garbled values and its input shares [v1]2
and [v2]2, and then feeds the garbled inputs to the garbled
circuit to obtain the garbled output.
Note that with inputs secretly shared, the garbled circuit
protocol can work without a 1-out-of-2 oblivious transfer
protocol [12].
B. XOR Secret Sharing
In this paper, we apply the XOR secret sharing [13] to split
a bit vector into two shares. Formally, the XOR secret sharing
scheme in the case of two sharing parties can be described as
Deﬁnition 1.
Deﬁnition 1 (XOR Secret Sharing). A bit vector x ∈ {0, 1}K
can be dispersed into 2 shares as follows:
• The ﬁrst share [x]1 is randomly chosen in {0, 1}K;
• The second share is [x]2 ∈ {0, 1}K with [x]1 ⊕ [x]2 = x,
and thus [x]2 = [x]1 ⊕ x.
The deﬁnition has a very straightforward security property:
if an adversary obtains merely a share of x, he gets nothing
about x except the bit length of x.
C. Sorting Networks
(cid:2)