∀j ∈ [n] \ {i} : rj ← G
tA ← {0, 1}∗
mA ← A(tA)
ri = mA (cid:9) Hi((rj)j(cid:54)=i)
sA,i = Key(tA, mB,i)
Figure 8: The ﬁgure depicts a 1 out of n OT using a UKA = (A, B, Key) and n random oracles,
where for all j ∈ [n], Hj : Gn−1 → G and G is a group with operations ⊕, (cid:9). By the correctness
In case of a one-round UKA the messages can be sent
of the UKA scheme, kA,i = kB,i holds.
simultaneously.
Proof. Follows straigthforwardly from the deﬁnition of F U
F coin, which outputs a random string to both parties.
OT and the ideal coin tossing functionality
As we have shown, endemic security allows to obtain any of the other notions eﬃciently. But
as we show in the following lemmas, there can not be a one-round OT that achieves receiver or
sender chosen message security. An adversary is at least able to tweak the distribution of the OT
messages. As we will show in the upcoming section, there are OT protocols with a single round
based on one-round key agreement.
Lemma 3.8. There is no sender chosen message secure two message OT where the sender sends
its message ﬁrst.
Lemma 3.9. There is no receiver chosen message secure two message OT where the receiver sends
its message ﬁrst.
Intuitively, if a malicious sender or receiver can choose its message in a two message protocol
after seeing the message of the other party, he can bias the output distribution by resampling his
message after observing what the learned OT message would be. We refer the reader for the formal
argument to Appendix B.
4 From Key Agreement to Oblivious Transfer
In Figure 8, we present the generic construction from any two round key agreement to a two
round OT. In Theorem 4.1, we show that both constructions yield an endemically secure OT. We
emphasize that the protocol can be easily adapted to yield an all but one OT (see Appendix C).
In our security analysis for a malicious receiver, the simulator will rewind the malicious receiver.
Hence we only obtain stand-alone security against a malicious receiver. In Appendix E, we show
UC security against malicious receivers for our two-round construction and the one-round OT based
on the Diﬃe-Hellman key agreement under a stronger variant of the DDH assumption.
Theorem 4.1. Given a correct and secure UKA scheme, then the 1 out of n oblivious transfer in
Figure 8 is an endemic OT1,n with stand-alone security in the programmable random oracle model.
Proof. We start with proving that the scheme is secure against a malicious sender.
13
Claim 4.2. Given a δ correct and (n− 1)-multi-instance -uniform UKA scheme, then it holds that
in the programmable random oracle model for any ppt adversary A, there exists a ppt adversary A’
such that for any ppt distinguisher D and any polynomial size auxiliary input z,
OT)) = 1]| ≤  + (1 − δ),
| Pr[D(z, (A, R)Π) = 1] − Pr[D(z, (A(cid:48),F E
where all algorithms receive input 1κ and R additionally receives input S.
Proof. We deﬁne A(cid:48) as follows. It generates (rj)j∈[n] by sampling r1, . . . , rn ← G. Then, it samples
for all j ∈ [n], tA,j ← {0, 1}∗ and mA,j ← A(tA,j). Finally it programs the random oracle for
all of the j ∈ [n] points (ri)i(cid:54)=j such that ri ⊕ Hi((ri)i(cid:54)=j) = mA,i. Now A(cid:48) invokes A, answers
his random oracle queries straightforwardly, sends (rj)j∈[n] and receives (mB,j)j∈[n] from A.
It
computes sA,j ← Key(tA,j, mB,j) for all j ∈ [n] and submits (sA,j)j∈[n] to F E
OT. A(cid:48) outputs the
output of A.
We show, that if there is a distinguisher D that distinguishes the distribution (A, R)Π from
(A(cid:48),F E
OT), then there is an distinguisher DUKA against the n-multi-instance uniformity of the UKA
scheme.
DUKA has access to an oracle O that either outputs uniform strings or messages of the UKA
protocol. For all j ∈ [n]\{i}, DUKA follows the description of A(cid:48) with the diﬀerence that instead of
sampling mA,j ← A(tA,j), it samples mA,j from O. Given (rj)j(cid:54)=i, it samples mA,i ← A(tA,i) and sets
ri such that ri ⊕ Hi((rj)j(cid:54)=i) = mA,i. As A(cid:48), it computes sA,i ← Key(tA,i, mB,i) which is R’s output.
It now invokes distinguisher D on R’s output sA,i and the output of A. In the end, it outputs the
output of D.
We now analyze the distributions. First, notice that the distribution of (ri, mA,i) when sampling
ri ← G and then programming the random oracle ri ⊕ Hi((rj)j(cid:54)=i) = mA,i is identical to the
distribution when sampling Hi((rj)j(cid:54)=i) and choosing ri such that ri ⊕ Hi((rj)j(cid:54)=i) = mA,i, both
are the uniform distribution over G × G conditioned to their sum being mA,i. Therefore it follows
straightforwardly from the deﬁnition of O, R and A(cid:48) that when O outputs uniform messages, the
output of A is distributed as when interacting with R while when O outputs UKA messages, it is
distributed as the output of A(cid:48). Hence, if there is a distinguisher D for any z that distinguishes the
output distribution of A given sA,i, i.e.
D ≤ | Pr[D(z, (A, sA,i)
) = 1] − Pr[D(z, (A, sA,i)D
Ou
UKA
) = 1]|
OA
D
UKA
then it implicitly breaks the (n − 1)-multi-instance uniformity of the UKA protocol, i.e.

OA
UKA(z)) = 1] − Pr[DOu
UKA(z) = 1]|
:= | Pr[D
= | Pr[D(z, (A, sA,i)
≥ D.
OA
D
UKA
) = 1] − Pr[D(z, (A, sA,i)D
Ou
UKA
) = 1]|
For ﬁnishing the proof of the claim, we now need to show that given the output of A, D cannot
distinguish the output of R, i.e. sA,i, from the output of F E
OT, which is identical to sB,i. This
follows from the δ correctness of the UKA scheme. By a union bound, we can lower bound  of our
distinguisher against the UKA protocol by  ≥ OT − (1 − δ).
We ﬁnish the proof of the theorem by showing that the OT protocol is secure against a malicious
receiver.
14
Claim 4.3. Given a δ correct, Q-multi-instance u-uniform, (Q, n − 1)-multi-instance k-key in-
distinguishable UKA scheme, where Q upper bounds the amount of random oracle queries by an
adversary then it holds that in the programmable random oracle model for any ppt adversary A,
there exists a ppt adversary A’ such that for any ppt distinguisher D and any polynomial size
auxiliary input z,
| Pr[D(z, (S,A)Π) = 1] − Pr[D(z, (F E
OT,A(cid:48))) = 1]| ≤ u + k + (1 − δ),
where all algorithms receive input 1κ and A’ is expected to rewind A Q times.
Proof. Intuitively, we need to argue that all the mA,j for which R does not learn sA,j, sA,j is
indistinguishable from uniform. To do this, we ﬁrst exploit the uniformity of UKA to argue that
mA,j looks like an actual message of UKA. Afterwards, we can exploit the key-indistinguishability
of UKA. To achieve this, we need to carefully program the random oracle.
We start by giving a description of A’. A’ guesses a query index α ∈ [Q], where Q is an upper
bound on the amount of oracle queries of A. Then A’ invokes A. If later this guess turns out to
be incorrect, A’ aborts the current run with A, rewinds A and makes a new guess.
When A makes an oracle query q to Hi for an i ∈ [n] and the query number is less or equal
to α, A’ responds with a random group element Hi(q) ← G. If the query number equals α, A’
i∗−1, g∗
stores i∗ := i and (g∗
n) := qα. For all following random oracle queries, i.e.
the query number j is higher than α, A’ responds with a random group element Hi(q) ← G if
i = i∗ or for all g ∈ G qj (cid:54)= (g∗
i . Otherwise A’ samples random
i∗−1, g, g∗
tape tj ← {0, 1}∗ and computes mj ← A(tj).
i . When A
OT. A’ computes
sends (ri)i∈[n], A’ aborts if qα (cid:54)= (r1, . . . , ri∗−1, ri∗+1, . . . , rn). A’ sends i∗ to F E
for all i ∈ [n] mA,i := ri ⊕ Hi((r(cid:96))(cid:96)(cid:54)=i), tB,i ← {0, 1}∗ and mB,i ← B(tB,i, mA,i). It also computes
OT, (mB,i)i∈[n] to A and outputs the output of A.
sB,i∗ := Key(tB,i∗, mA,i∗). A’ sends sB,i∗ to F E
In case of one-round OT, A’ generates and sends (mB,i)i∈[n] to A in the very beginnning. This
concludes the description of A’. In total, A’ is expected to rewind A Q times.
i∗+1, . . . , g∗
It responds with Hi(qj) := mj (cid:9) g∗
i∗+1, . . . , g∗
1, . . . , g∗
1, . . . , g∗
n) \ g∗
Let there be a distinguisher D with
D := | Pr[D(z, (S,A)Π) = 1] − Pr[D(z, ((sB,i)i∈[n],A(cid:48))) = 1]|,
where (sB,i)i∈[n] are the outputs of Key(tB,i, mA,i). Then there is a distinguisher Du breaking the Q-
multi-instance uniformity of the UKA protocol. Du gets access to an oracle O which either outputs
uniform messages, i.e. Ou or messages of the form mA ← A(tA) for tA ← {0, 1}∗. Du invokes D and
creates its input as follows. It invokes A and interacts with him as A’ does with the diﬀerence that
mj are requested from O rather than computing them. After receiving the output, Du uses it as
input for D together with (sB,i)i∈[n], where sB,i ← Key(tB,i, mA,i). Du outputs the output of D.
If O is oracle Ou, all mj are uniform and hence all random oracle queries q are answered with
a uniformly random Hi(q) ∈ G. Otherwise, A’ is identical with S as well as (sB,i)i∈[n] are identical
with the output of S. Hence
u = | Pr[DOA
= | Pr[D(z, ((sB,i)i∈[n],A)
u (z)] = 1] − P r[DOu
u (z) = 1]|
OA
) = 1]
D
− Pr[D(z, ((sB,i)i∈[n],A)D
) = 1]|
Ou
u
u
≥ D.
Next, we assume that there is a distinguisher D with
D := | Pr[D(z, (sB,i)i∈[n],A) = 1] − Pr[D(z, SB,i∗,A) = 1]|,
15
where for all i ∈ [n], si is sampled uniformly from the key space of UKA and SB,i∗ := (s1, . . . , si∗−1, sB,i∗, si∗+1, . . . , sn).
Then there is a distinguisher Dk that breaks the (Q, n − 1)-multi-instance key-indistinguishability
of the UKA protocol. Dk has access to oracles O(cid:104)A,B(cid:105) and O which is either Ou or Ok. Dk invokes
D and creates its input as follows. Dk invokes A and interacts with it as A(cid:48) does with the diﬀer-
B,j) from O(cid:104)A,B(cid:105) and setting
ence, that Dk generates mj by querying a transcript (cid:104)A, B(cid:105) = (m(cid:48)
mj = m(cid:48)
A,j. A’ computes for all i ∈ [n] \ {i∗}
A,j, m(cid:48)
A,i := ri ⊕ Hi((r(cid:96))(cid:96)(cid:54)=i) = m(cid:48)
m(cid:48)
A,j
where there exists a j ∈ [Q] such that the last equality holds. It also uses oracle O to query for all
i ∈ [n] \ {i∗} the n − 1 corresponding keys ki that match with the transcripts containing mA,i. Dk
B,j and sB,i := ki. It creates mB,i∗ and sB,i∗ as A’ does. It sends (mB,i)i∈[n] to A to
sets mB,i := m(cid:48)
receive its output which it uses together with (sB,i)i∈[n] as input for D. Dk outputs D’s output.
k = | Pr[D
Ok
k (z)] = 1] − P r[DOu
k (z) = 1]|
Ok
D
k
) = 1]|
= | Pr[D(z, ((sB,i)i∈[n],A)
−P r[D(z, (SB,i∗,A)D
Ou
k
) = 1]
≥ D.
For the last step, we need to replace sB,i∗ with sA,i∗. We use the same argument as in Claim C.2
using the correctness of the scheme. Hence we obtain
OT = | Pr[D(z, (S,A)Π) = 1] − Pr[D(z, (F E
OT,A)) = 1]|
≤ u + | Pr[D((sB,i)i∈[n],A) = 1] − Pr[D(SB,i∗,A) = 1]|
≤ u + k + (1 − δ),
where SA,i∗ := (s1, . . . , si∗−1, sA,i∗, si∗+1, . . . , sn).
5 OT Extension
) ∈ F2 × Fm
2 while R will receive (tj
Next we review the OT extension protocol of [KOS15, OOS17, ALSZ17] which we describe in
Figure 9. The base OTs are performed on inputs that are sampled uniformly at random where
the roles of the sender and receiver are reversed with respect to the OTs that are output by the
extension. That is, S will receive (bj, tj
2 for
bj
j ∈ [nC].
R forms two matrices T0, T1 ∈ Fm×nC
by concatenating the base OT messages as column vectors,
i.e. Ti := (t1
). R then encodes their 1-out-
of-N selections w1, ..., wm into a matrix C ∈ Fm×nC
. Each row ci is the codeword C(wi), where
C is a binary code of length nC, dimension kC = log2 κ and minimum distance dC ≥ κ. R sends
the matrix U = T0 + T1 + C to S. Observe that U encodes the selections of R but the selection is
perfectly masked/encrypted due to the j-th column of U being masked by the column tj
which
is uniformly distributed in the view of S. Upon receiving U , S computes Q ∈ Fm×nC where the j-th
column is deﬁned as qj := bj · uj + tj
i ). Similarly, S forms the matrix Tb := (t1
b1
= bj · cj + tj
1) ∈ Fm
2 × Fm
...tnC
bnC
i ...tnC
bj
0. It holds that
2
2
0, tj
1−bj
qi = ci (cid:12) b + ti
16
where (cid:12) is bitwise multiplication, ti, qi is the i-th row of T0, Q, respectively, and b := (b1, ..., bnC ) ∈
FnC
2 . R will output vi,wi := H(i, ti). S can then generate any OT message by computing vi,w :=
H(i, qi + C(w) (cid:12) b). Correctness of this operation follows from