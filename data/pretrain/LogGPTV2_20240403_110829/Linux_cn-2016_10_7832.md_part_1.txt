---
author: Matt Makai
category: 软件开发
comments_data:
- date: '2016-10-11 10:15:39'
  message: 不太看得懂，按照这个步骤走了，但是发消息后，确没有收到回复，不知道问题出在哪里
  postip: 123.124.240.12
  username: 来自北京的 Chrome 53.0|Windows 7 用户
count:
  commentnum: 1
  favtimes: 4
  likes: 0
  sharetimes: 0
  viewnum: 21052
date: '2016-10-04 10:53:00'
editorchoice: false
excerpt: 聊天机器人（Bot） 是一种像 Slack 一样的实用的互动聊天服务方式。如果你之前从来没有建立过聊天机器人，那么这篇文章提供了一个简单的入门指南，告诉你如何用
  Python 结合 Slack API 建立你第一个聊天机器人。
fromurl: https://www.fullstackpython.com/blog/build-first-slack-bot-python.html
id: 7832
islctt: true
largepic: /data/attachment/album/201610/04/075901vg9gcch17v3ghvg4.png
permalink: /article-7832-1.html
pic: /data/attachment/album/201610/04/075901vg9gcch17v3ghvg4.png.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 聊天机器人（Bot） 是一种像 Slack 一样的实用的互动聊天服务方式。如果你之前从来没有建立过聊天机器人，那么这篇文章提供了一个简单的入门指南，告诉你如何用
  Python 结合 Slack API 建立你第一个聊天机器人。
tags:
- Python
- 聊天机器人
- Slack
thumb: false
title: 如何运用 Python 建立你的第一个 Slack 聊天机器人？
titlepic: true
translator: jiajia9llinuxer
updated: '2016-10-04 10:53:00'
---
[聊天机器人（Bot）](https://www.fullstackpython.com/bots.html) 是一种像 [Slack](https://slack.com/) 一样的实用的互动聊天服务方式。如果你之前从来没有建立过聊天机器人，那么这篇文章提供了一个简单的入门指南，告诉你如何用 Python 结合 [Slack API](https://api.slack.com/) 建立你第一个聊天机器人。
我们通过搭建你的开发环境, 获得一个 Slack API 的聊天机器人令牌，并用 Pyhon 开发一个简单聊天机器人。
![](/data/attachment/album/201610/04/075901vg9gcch17v3ghvg4.png)
### 我们所需的工具
我们的聊天机器人我们将它称作为“StarterBot”，它需要 Python 和 Slack API。要运行我们的 Python 代码，我们需要：
* [Python 2 或者 Python 3](https://www.fullstackpython.com/python-2-or-3.html)
* [pip](https://pip.pypa.io/en/stable/) 和 [virtualenv](https://virtualenv.pypa.io/en/stable/) 来处理 Python [应用程序依赖关系](https://www.fullstackpython.com/application-dependencies.html)
* 一个可以访问 API 的[免费 Slack 账号](https://slack.com/)，或者你可以注册一个 [Slack Developer Hangout team](http://dev4slack.xoxco.com/)。
* 通过 Slack 团队建立的官方 Python [Slack 客户端](https://github.com/slackhq/python-slackclient)代码库
* [Slack API 测试令牌](https://api.slack.com/tokens)
当你在本教程中进行构建时，[Slack API 文档](https://api.slack.com/) 是很有用的。
本教程中所有的代码都放在 [slack-starterbot](https://github.com/mattmakai/slack-starterbot) 公共库里，并以 MIT 许可证开源。
### 搭建我们的环境
我们现在已经知道我们的项目需要什么样的工具，因此让我们来搭建我们所的开发环境吧。首先到终端上（或者 Windows 上的命令提示符）并且切换到你想要存储这个项目的目录。在那个目录里，创建一个新的 virtualenv 以便和其他的 Python 项目相隔离我们的应用程序依赖关系。
```
virtualenv starterbot
```
激活 virtualenv：
```
source starterbot/bin/activate
```
你的提示符现在应该看起来如截图：
![已经激活的 starterbot 的 virtualenv的命令提示符](/data/attachment/album/201610/04/075915hjmmhg3mgn407ajj.png)
这个官方的 slack 客户端 API 帮助库是由 Slack 建立的，它可以通过 Slack 通道发送和接收消息。通过这个 `pip` 命令安装 slackclient 库：
```
pip install slackclient
```
当 `pip` 命令完成时，你应该看到类似这样的输出，并返回提示符。
![在已经激活的 virtualenv 用 pip 安装 slackclient 的输出](/data/attachment/album/201610/04/075916edc4570t15ry811o.png)
我们也需要为我们的 Slack 项目获得一个访问令牌，以便我们的聊天机器人可以用它来连接到 Slack API。
### Slack 实时消息传递（RTM）API
Slack 允许程序通过一个 [Web API](https://www.fullstackpython.com/application-programming-interfaces.html) 来访问他们的消息传递通道。去这个 [Slack Web API 页面](https://api.slack.com/) 注册建立你自己的 Slack 项目。你也可以登录一个你拥有管理权限的已有账号。
![使用 Web API页面的右上角登录按钮](/data/attachment/album/201610/04/075919ubkbh0ddscggvh8g.png)
登录后你会到达 [聊天机器人用户页面](https://api.slack.com/bot-users)。
![定制聊天机器人用户页面](/data/attachment/album/201610/04/075920oosiasao55i6l258.png)
给你的聊天机器人起名为“starterbot”然后点击 “Add bot integration” 按钮。
![添加一个bot integration 并起名为“starterbot”](/data/attachment/album/201610/04/075921uiicc9skl4yzng0i.jpg)
这个页面将重新加载，你将看到一个新生成的访问令牌。你还可以将标志改成你自己设计的。例如我给的这个“Full Stack Python”标志。
![为你的新 Slack 聊天机器人复制和粘贴访问令牌](/data/attachment/album/201610/04/075924ei6rqzoo0li1jz0k.png)
在页面底部点击“Save Integration”按钮。你的聊天机器人现在已经准备好连接 Slack API。
Python 开发人员的一个常见的做法是以环境变量输出秘密令牌。输出的 Slack 令牌名字为`SLACK_BOT_TOKEN`：
```
export SLACK_BOT_TOKEN='你的 slack 令牌粘帖在这里'
```
好了，我们现在得到了将这个 Slack API 用作聊天机器人的授权。
我们建立聊天机器人还需要更多信息：我们的聊天机器人的 ID。接下来我们将会写一个简短的脚本，从 Slack API 获得该 ID。
### 获得我们聊天机器人的 ID
这是最后写一些 Python 代码的时候了! 我们编写一个简短的 Python 脚本获得 StarterBot 的 ID 来热身一下。这个 ID 基于 Slack 项目而不同。
我们需要该 ID，当解析从 Slack RTM 上发给 StarterBot 的消息时，它用于对我们的应用验明正身。我们的脚本也会测试我们 `SLACK_BOT_TOKEN` 环境变量是否设置正确。
建立一个命名为 print*bot*id.py 的新文件，并且填入下面的代码：
```
import os
from slackclient import SlackClient
BOT_NAME = 'starterbot'
slack_client = SlackClient(os.environ.get('SLACK_BOT_TOKEN'))
if __name__ == "__main__":
    api_call = slack_client.api_call("users.list")
    if api_call.get('ok'):
        # retrieve all users so we can find our bot
        users = api_call.get('members')
        for user in users:
            if 'name' in user and user.get('name') == BOT_NAME:
                print("Bot ID for '" + user['name'] + "' is " + user.get('id'))
    else:
        print("could not find bot user with the name " + BOT_NAME)
```
我们的代码导入 SlackClient，并用我们设置的环境变量 `SLACK_BOT_TOKEN` 实例化它。 当该脚本通过 python 命令执行时，我们通过会访问 Slack API 列出所有的 Slack 用户并且获得匹配一个名字为“satrterbot”的 ID。
这个获得聊天机器人的 ID 的脚本我们仅需要运行一次。
```
python print_bot_id.py
```
当它运行为我们提供了聊天机器人的 ID 时，脚本会打印出简单的一行输出。
![在你的 Slack 项目中用 Python 脚本打印 Slack 聊天机器人的 ID](/data/attachment/album/201610/04/075926oyi5jz3whikq23gd.png)
复制这个脚本打印出的唯一 ID。并将该 ID 作为一个环境变量 `BOT_ID` 输出。
```