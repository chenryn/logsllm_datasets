compare our distributed Known-Index SPFSS variant (Protocol 3)
with the SPFSS implementation of Doerner and Shelat [23] in order
to demonstrate the efficiency gain we can obtain in settings where
the index might be known to one of the parties, e.g., semi-private
accesses. The results are shown in Figure 3. Our implementation
performs better for all vector lengths we tested. For short vectors,
this is not surprising given that our protocol does not require ex-
pensive garbled circuits, but only log(ùëõ) oblivious transfers. Even
for large vectors, where both protocols take time approximately
linear in ùëõ, our implementation remains very efficient, which is
made possible by the simplicity of our construction.
8.3.2 Vector-OLE computation. We also measure the time it takes to
generate a full Vector-OLE. Here, we compare our implementation
of Protocol 6 against three baselines. First, the approach proposed
in [9], i.e., using FLORAM‚Äôs FSS implementation in each bucket,
but using our probabilistic batch codes. Second, our variant of
MPFSS, but using naive batching by repeatedly evaluating over
the whole domain. And third, our own implementation of Gilboa‚Äôs
multiplication protocol [31]. We already heavily optimized this
second baseline. In particular, we employ all of the optimizations
from [44], and our time per single-element multiplication is lower
than the one reported in [44].
Figure 4 (left) shows a comparison of wall-clock running times of
all three approaches. First, it becomes obvious that using FLORAM
is not practical when compared to either of the alternatives. While
its asymptotic running time matches ours, it is consistently slower
by a large factor. Our second baseline, known-indices MPFSS with
naive batching, outperforms FLORAM for small vectors, but it is
Figure 3: Comparison of our single-point FSS variant (Sec-
tion 4) with the implementation of [23].
worse than both Gilboa and our VOLE in terms of asymptotics
as well as concrete efficiency. As for the third baseline, Gilboa‚Äôs
multiplication is faster than our protocol for vector lengths below
300k (finite fields) and 2M (integer rings). The large discrepancy
here is due to the fact that in addition to the reduced computational
overhead from the lack of modular reductions, using 64-bit integers
directly allows us to use correlated OT [3].
8.3.3 Communication Experiments. We also investigate the com-
munication overhead of both our VOLE implementation and Gilboa
multiplication. To that end, we artificially limit the bandwidth of
our machine to 100Mbit/s, which is about the download bandwidth
of a consumer household connection. We measure running time
and the number of bytes sent by both parties during the protocol
execution. The results are shown in Figure 4 (middle) and (right).
Compared to Figure 4 (left), the cutoff point where our protocol
outperforms Gilboa is lower, at about 200k for finite fields, and 400k
for integer rings.
8.3.4 Parallelization of VOLE. Finally, we investigate the effect of
parallelization on our VOLE protocol. Figure 5 shows the results for
ùëõ = 220. With 8 threads we observe a speedup of about 5x, with 32
threads this increases to over 10x. While we did not run experiments
on more than 32 cores, the slope of the plot suggests that the running
time can be further reduced with additional hardware parallelism.
9 CONCLUSION
Our work presents a new protocol for shared randomness gener-
ation in the form of a random vector oblivious linear evaluation,
which generates vectors with linear correlations. On the way to
our final construction we also developed several new protocols,
which are of independent interest, in the areas of random OT, pri-
vate puncturable PRFs, and function secret sharing for single and
multi-point functions with known indices. We showed how our
VOLE construction can be leveraged in the context of several secure
computation constructions, and compare them experimentally with
two alternatives.
A possible improvement can be found in our lowest-level prim-
itive, (ùëõ ‚àí 1)-out-of-ùëõ-ROT. While our construction is based on
13
214216218220222224Vectorlengthn0.01s0.02s0.05s0.1s0.2s0.5s1s2s5s10sRunningTimeSPFSSvs.FLORAM-FSS(computation)FLORAM-FSSSPFSSFigure 4: (Left) running time of our Vector-OLE implementation (VOLE) for generating a single random Vector-OLE. We com-
pare against three baselines: A variant using our batching techniques, but the DPF implementation proposed by Boyle et al. [9],
which is also used in FLORAM [23]; our known-indices MPFSS, but using naive batching (cf. Section 5); and Gilboa multipli-
cation [31], which is also commonly used in the literature to implement two-party multiplications [22, 44]. We also compare
two multiplication types: a 60-bit finite field (NTL::zz_p), and a 64-bit integer ring (uint64_t). It can be seen that VOLE out-
performs the first two baselines, and is faster than Gilboa for vector lengths above 300k (prime field) and 2M (integer ring).
(Middle) running time of our VOLE and Gilboa multiplication in a bandwidth-constrained setting. Here, our implementation
is already more efficient for much smaller vectors, at 200k in the prime field, and 400k in the integer ring. (Right) communi-
cation overhead of our Vector-OLE and Gilboa multiplication. The cutoff points where our implementation outperforms the
baseline are similar to the running time plot in the middle.
ACKNOWLEDGMENTS
We would like to give special thanks to Benny Pinkas for his help
during the development of this paper. We also thank Geoffroy
Couteau and Mike Rosulek for helpful discussions. Adri√† Gasc√≥n‚Äôs
work on this paper was done while at The Alan Turing Institute,
supported by EPSRC grant EP/N510129/1, and funding from the
UK Government‚Äôs Defence & Security Programme in support of
the Alan Turing Institute.
Figure 5: Running time of a Vector-OLE with varying num-
ber of threads.
GGM trees with arbitrary arity, our implementation is limited to
binary trees and 1-out-of-2-OT. We believe that using efficient
(ùëò ‚àí 1)-out-of-ùëò-OT sub-protocols from homomorphic encryption
for larger ùëò, we can gain additional concrete efficiency.
In terms of asymptotics, to our knowledge, ours is the first imple-
mentation of Vector OLE with sub-linear communication. However,
it does not reach the asymptotical guarantees that alternative con-
structions (in particular the dual version by Boyle et al.) provide,
namely poly-logarithmic communication. This is due to the lack
of concretely efficient, LPN-friendly encoding schemes, and we
believe that if such encoding schemes become available, our imple-
mentation can yield poly-logarithmic communication complexity
while staying concretely efficient.
14
REFERENCES
[1] Sebastian Angel, Hao Chen, Kim Laine, and Srinath T. V. Setty. 2018. PIR with
Compressed Queries and Amortized Query Processing. In IEEE Symposium on
Security and Privacy. IEEE, 962‚Äì979.
[2] Benny Applebaum, Ivan Damg√•rd, Yuval Ishai, Michael Nielsen, and Lior Zichron.
2017. Secure Arithmetic Computation with Constant Computational Overhead.
In CRYPTO (1). Springer, 223‚Äì254.
[3] Gilad Asharov, Yehuda Lindell, Thomas Schneider, and Michael Zohner. 2013.
More efficient oblivious transfer and extensions for faster secure computation.
In CCS. ACM, 535‚Äì548.
[4] Gilad Asharov, Yehuda Lindell, Thomas Schneider, and Michael Zohner. 2015.
More Efficient Oblivious Transfer Extensions with Security for Malicious Adver-
saries. In EUROCRYPT (1). Springer, 673‚Äì701.
In CRYPTO. Springer, 420‚Äì432.
Private Computations. In STOC. ACM, 479‚Äì488.
[7] Avrim Blum, Adam Kalai, and Hal Wasserman. 2003. Noise-tolerant learning, the
parity problem, and the statistical query model. J. ACM 50, 4 (2003), 506‚Äì519.
[8] Dan Boneh, Kevin Lewi, and David J. Wu. 2017. Constraining Pseudorandom
Functions Privately. In Public Key Cryptography (2). Springer, 494‚Äì524.
Vector OLE. In CCS. ACM, 896‚Äì912.
[10] Elette Boyle, Geoffroy Couteau, Niv Gilboa, Yuval Ishai, Lisa Kohl, Peter Rindal,
and Peter Scholl. 2019. Efficient Two-Round OT Extension and Silent Non-
Interactive Secure Computation. In CCS. ACM, 291‚Äì308.
[11] Elette Boyle, Geoffroy Couteau, Niv Gilboa, Yuval Ishai, Lisa Kohl, and Peter
Scholl. 2019. Efficient Pseudorandom Correlation Generators: Silent OT Extension
and More. In CRYPTO (3). Springer, 489‚Äì518.
EUROCRYPT (2). Springer, 337‚Äì367.
ments and Extensions. In CCS. ACM, 1292‚Äì1303.
[13] Elette Boyle, Niv Gilboa, and Yuval Ishai. 2016. Function Secret Sharing: Improve-
[12] Elette Boyle, Niv Gilboa, and Yuval Ishai. 2015. Function Secret Sharing. In
[5] Donald Beaver. 1991. Efficient Multiparty Protocols Using Circuit Randomization.
[6] Donald Beaver. 1996. Correlated Pseudorandomness and the Complexity of
[9] Elette Boyle, Geoffroy Couteau, Niv Gilboa, and Yuval Ishai. 2018. Compressing
214216218220222224Vectorlengthn0.01s0.1s1s10s1m10m1hRunningTimeVOLEvs.Gilboa(10Gbit/s)FLORAM-VOLEGilboa(NTL::zzp,60)Gilboa(uint64t,64)MPFSS(NaiveBatching)VOLE(NTL::zzp,60)VOLE(uint64t,64)214216218220222224Vectorlengthn0.01s0.1s1s10s1m10m1hRunningTimeVOLEvs.Gilboa(100Mbit/s)214216218220222224Vectorlengthn1071081091010BytessentbybothpartiesVOLEvs.Gilboa(communication)12481632Numberofthreads0.5s1s2s5s10sRunningTimeE(cid:128)ectofparallelismonVOLE(computation)VOLE(NTL::zzp,60),n=220VOLE(uint64t,64),n=220[14] Ran Canetti. 2000. Security and Composition of Multiparty Cryptographic Proto-
[16] Benny Chor, Oded Goldreich, Eyal Kushilevitz, and Madhu Sudan. 1995. Private
[15] Hao Chen, Kim Laine, and Peter Rindal. 2017. Fast Private Set Intersection from
cols. J. Cryptology 13, 1 (2000), 143‚Äì202.
Homomorphic Encryption. In CCS. ACM, 1243‚Äì1255.
Information Retrieval. In FOCS. IEEE Computer Society, 41‚Äì50.
[17] Leonardo Dagum and Ramesh Menon. 1998. OpenMP: An industry-standard API
for shared-memory programming. Computing in Science & Engineering 1 (1998),
46‚Äì55.
[18] Ivan Damg√•rd, Marcel Keller, Enrique Larraia, Valerio Pastro, Peter Scholl, and
Nigel P. Smart. 2013. Practical Covertly Secure MPC for Dishonest Majority - Or:
Breaking the SPDZ Limits. In ESORICS. Springer, 1‚Äì18.
Practical? IACR Cryptology ePrint Archive (2012), 699.
[20] Ivan Damg√•rd, Valerio Pastro, Nigel P. Smart, and Sarah Zakarias. 2012. Mul-
tiparty Computation from Somewhat Homomorphic Encryption. In CRYPTO.
Springer, 643‚Äì662.
[21] Daniel Demmler, Peter Rindal, Mike Rosulek, and Ni Trieu. 2018. PIR-PSI: Scaling
[19] Ivan Damg√•rd and Sunoo Park. 2012. Is Public-Key Encryption Based on LPN
Private Contact Discovery. PoPETs 2018, 4 (2018), 159‚Äì178.
[22] Daniel Demmler, Thomas Schneider, and Michael Zohner. 2015. ABY - A Frame-
work for Efficient Mixed-Protocol Secure Two-Party Computation. In NDSS. The
Internet Society.
[23] Jack Doerner and abhi shelat. 2017. Scaling ORAM for Secure Computation. In
CCS. ACM, 523‚Äì535.
[24] Nico D√∂ttling, Satrajit Ghosh, Jesper Buus Nielsen, Tobias Nilges, and Roberto
Trifiletti. 2017. TinyOLE: Efficient Actively Secure Two-Party Computation from
Oblivious Linear Function Evaluation. In CCS. ACM, 2263‚Äì2276.
[25] Nico D√∂ttling, Daniel Kraschewski, and J√∂rn M√ºller-Quade. 2012. David & Goliath
Oblivious Affine Function Evaluation - Asymptotically Optimal Building Blocks
for Universally Composable Two-Party Computation from a Single Untrusted
Stateful Tamper-Proof Hardware Token. IACR Cryptology ePrint Archive (2012),
135.
[26] Michael J. Freedman, Carmit Hazay, Kobbi Nissim, and Benny Pinkas. 2016.
Efficient Set Intersection with Simulation-Based Security. J. Cryptology 29, 1
(2016), 115‚Äì155.
[27] Michael J. Freedman, Yuval Ishai, Benny Pinkas, and Omer Reingold. 2005. Key-
word Search and Oblivious Pseudorandom Functions. In TCC. Springer, 303‚Äì324.
[28] Adri√† Gasc√≥n, Phillipp Schoppmann, Borja Balle, Mariana Raykova, Jack Doerner,
Samee Zahur, and David Evans. 2017. Privacy-Preserving Distributed Linear
Regression on High-Dimensional Data. PoPETs 2017, 4 (2017), 345‚Äì364.
Secure Private Set Intersection. In EUROCRYPT (3). Springer, 154‚Äì185.
[29] Satrajit Ghosh and Tobias Nilges. 2019. An Algebraic Approach to Maliciously
[30] Niv Gilboa. [n. d.]. Private Communication.
[31] Niv Gilboa. 1999. Two Party RSA Key Generation. In CRYPTO. Springer, 116‚Äì129.
[32] Oded Goldreich, Shafi Goldwasser, and Silvio Micali. 1986. How to construct
random functions. J. ACM 33, 4 (1986), 792‚Äì807.
[35] Yuval Ishai, Joe Kilian, Kobbi Nissim, and Erez Petrank. 2003. Extending Oblivious
[33] Ga√´l Guennebaud, Beno√Æt Jacob, et al. 2010. Eigen v3. http://eigen.tuxfamily.org.
[34] Stefan Heyse, Eike Kiltz, Vadim Lyubashevsky, Christof Paar, and Krzysztof
Pietrzak. 2012. Lapin: An Efficient Authentication Protocol Based on Ring-LPN.
In FSE. Springer, 346‚Äì365.
Transfers Efficiently. In CRYPTO. Springer, 145‚Äì161.
and their applications. In STOC. ACM, 262‚Äì271.
ed.). Chapman and Hall/CRC Press.
[37] Jonathan Katz and Yehuda Lindell. 2014. Introduction to Modern Cryptography (2
[38] Marcel Keller, Emmanuela Orsini, and Peter Scholl. 2016. In CCS. ACM, 830‚Äì842.
[39] Marcel Keller, Valerio Pastro, and Dragos Rotaru. 2018. Overdrive: Making SPDZ
[36] Yuval Ishai, Eyal Kushilevitz, Rafail Ostrovsky, and Amit Sahai. 2004. Batch codes
Great Again. In EUROCRYPT (3). Springer, 158‚Äì189.
20‚Äì31.
[40] Joe Kilian. 1988. Founding Cryptography on Oblivious Transfer. In STOC. ACM,
[41] Adam Kirsch, Michael Mitzenmacher, and Udi Wieder. 2009. More Robust Hash-
[43] Yehuda Lindell and Benny Pinkas. 2009. A Proof of Security of Yao‚Äôs Protocol for
ing: Cuckoo Hashing with a Stash. SIAM J. Comput. 39, 4 (2009), 1543‚Äì1561.
[42] Vladimir Kolesnikov, Ranjit Kumaresan, Mike Rosulek, and Ni Trieu. 2016. Ef-
ficient Batched Oblivious PRF with Applications to Private Set Intersection. In
CCS. 818‚Äì829.
Two-Party Computation. J. Cryptology 22, 2 (2009), 161‚Äì188.
[44] Payman Mohassel and Yupeng Zhang. 2017. SecureML: A System for Scalable
Privacy-Preserving Machine Learning. In IEEE Symposium on Security and Privacy.
IEEE Computer Society, 19‚Äì38.
[45] Moni Naor and Benny Pinkas. 1999. Oblivious Transfer and Polynomial Evalua-
[46] Moni Naor and Benny Pinkas. 2006. Oblivious Polynomial Evaluation. SIAM J.
[47] Rasmus Pagh and Flemming Friche Rodler. 2004. Cuckoo hashing. J. Algorithms
tion. In STOC. ACM, 245‚Äì254.
Comput. 35, 5 (2006), 1254‚Äì1281.
51, 2 (2004), 122‚Äì144.
[48] Benny Pinkas, Thomas Schneider, and Michael Zohner. 2014. Faster Private Set
Intersection Based on OT Extension. In USENIX Security Symposium. USENIX
Association, 797‚Äì812.
[49] Benny Pinkas, Thomas Schneider, and Michael Zohner. 2018. Scalable Private
Set Intersection Based on OT Extension. ACM Trans. Priv. Secur. 21, 2 (2018).
[50] Michael O. Rabin. 1981. How To Exchange Secrets with Oblivious Transfer. TR-81
edition, Aiken Computation Lab, Harvard University (1981).
[51] Phillipp Schoppmann, Adri√† Gasc√≥n, Mariana Raykova, and Benny Pinkas. 2019.
Make Some ROOM for the Zeros: Data Sparsity in Secure Distributed Machine
Learning. In CCS. ACM.
shoup.net/ntl.
[52] Victor Shoup et al. 2001. NTL: A library for doing number theory. https://www.
[53] Abraham Waksman. 1968. A Permutation Network. J. ACM 15, 1 (1968), 159‚Äì163.
[54] Xiao Wang, Alex J. Malozemoff, and Jonathan Katz. 2016. EMP-toolkit: Efficient
MultiParty computation toolkit. https://github.com/emp-toolkit.
[55] Robert S. Winternitz. 1984. A Secure One-Way Hash Function Built from DES. In
[56] Andrew Chi-Chih Yao. 1986. How to Generate and Exchange Secrets (Extended
IEEE Symposium on Security and Privacy. IEEE Computer Society, 88‚Äì90.
Abstract). In FOCS. IEEE Computer Society, 162‚Äì167.
A SECURITY PROOFS