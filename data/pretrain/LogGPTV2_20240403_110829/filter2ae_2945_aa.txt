有幸参加了 今年的 wctf，被虐的不要不要的，比赛的题目质量很高，想着都找时间复现总结一下，希望自己可以复现完吧 :)
rswc 是 binja 出的 题目，可以说的唯一的一道应用层的pwn了，主要是一个 mmap 内存布局相关的知识点
### 功能分析
    Try your best to get the flag     
    IP : 172.16.13.11                 
    Port : 31348
题目文件如下
    ❯ tree                                            
    .                                                 
    ├── docker                                        
    │   ├── Dockerfile                                
    │   ├── launch.sh                                 
    │   ├── rswc                                      
    │   └── xinetd                                    
    ├── libc.so.6_5d8e5f37ada3fc853363a4f3f631a41a    
    ├── README.md                                     
    └── rswc.zip
主要程序 是 docker 目录下的 rswc， 还给了libc， 版本2.23
    Arch:     amd64-64-little            
      RELRO:    Partial RELRO              
      Stack:    No canary found            
      NX:       NX enabled                 
      PIE:      No PIE (0x400000)
64 bit 程序， no pie
    ❯ ./rswc          
    0. alloc          
    1. edit           
    2. show           
    3. delete         
    9. exit
程序有4个功能, 经典的选单程序
  * alloc 传入size
  * edit 根据index 和 alloc 的size 保存数据
  * show 根据 index 和 alloc 的size write
  * delte 根据 index delete
功能都和平时做题目差不多，这里的堆的管理机制不同，他是用mmap 自己模拟了堆管理的机制
ida 看看功能吧
#### **main函数**
    void __fastcall main(__int64 a1, char **a2, char **a3)
    {
      init_400DB3();
      while ( 1 )
      {
        menu();
        switch ( readint() )
        {
          case 0:
            all_400F15();
            break;
          case 1:
            edit_400FB3();
            break;
          case 2:
            show_401051();
            break;
          case 3:
            del_401104();
            break;
          case 9:
            _exit(0);
            return;
          default:
            puts("huh?");
            break;
        }
        puts(byte_4013A8);
      }
    }
主要就是根据 op 选择对应的功能，没有整数溢出等，这里主要关注 init_400DB3 这个函数，对于堆模拟的一个初始化
    int init_400DB3()
    {
      setbuf(stdin, 0LL);
      setbuf(stdout, 0LL);
      setbuf(stderr, 0LL);
      if ( mmap(0LL, 0x1000uLL, 0, 34, -1, 0LL) == (void *)-1LL )// 随机mmap 内存
      {
        perror("mmap");
        _exit(1);
      }
      manager_6020B8 = (__int64)mmap(0LL, 0x1000uLL, 3, 34, -1, 0LL);
      if ( manager_6020B8 == -1 )
      {
        perror("mmap");
        _exit(1);
      }
      mmapsome_400866(0x3000uLL);                   //  heap 块 0x3000
      return seccomp_400BE4();
    }
    /*----------------------------------------------------------*/ void *__fastcall mmapsome_400866(size_t size)
    {
      void **top; // rbx
      top = (void **)manager_6020B8;
      *top = mmap(0LL, size, 3, 34, -1, 0LL);
      if ( *(_QWORD *)manager_6020B8 == -1LL )
      {
        perror("mmap");
        _exit(1);
      }
      *(_QWORD *)(manager_6020B8 + 8) = *(_QWORD *)manager_6020B8;
      *(_QWORD *)(manager_6020B8 + 16) = size;
      *(_QWORD *)(manager_6020B8 + 24) = 0LL;
      return memset((void *)(manager_6020B8 + 0x20), 0, 0xFE0uLL);// 初始化
    }
堆管理器的初始化，mmap 了一段 大小 0x1000 no rwx 的内存, 用于防止溢出
然后mmap 0x1000 rw 内存保存指针等，类似 arena
接着 mmap 0x3000 的 内存 作为 堆分配的区域 ， 并在 arena 里面保存好初始化指针,
使用 seccomp 限制只能使用 orw
在自己的电脑上测试是这样的
    0x7ffff7ff2000     0x7ffff7ff6000 rw-p     4000 0
    0x7ffff7ff6000     0x7ffff7ff7000 ---p     1000 0 
    pwndbg> x/10gx 0x7ffff7ff2000                                        
    0x7ffff7ff2000: 0x0000000000000000      0x0000000000000000
    0x7ffff7ff2010: 0x0000000000000000      0x0000000000000000
    0x7ffff7ff2020: 0x0000000000000000      0x0000000000000000
    0x7ffff7ff2030: 0x0000000000000000      0x0000000000000000
    0x7ffff7ff2040: 0x0000000000000000      0x0000000000000000
    pwndbg> x/10gx 0x7ffff7ff5000                                        
    0x7ffff7ff5000: 0x00007ffff7ff2000/*heap 起始*/    0x00007ffff7ff2000 /* top chunk 指针*/
    0x7ffff7ff5010: 0x0000000000003000/*heap size*/    0x0000000000000000 /* chunk number */
    0x7ffff7ff5020: 0x0000000000000000      0x0000000000000000
    0x7ffff7ff5030: 0x0000000000000000      0x0000000000000000
    0x7ffff7ff5040: 0x0000000000000000      0x0000000000000000
arena 上 先保存 heap 的起始地址， top chunk 指针， 当前的heap 的size 固定 0x3000,
chunk number 也就是当前可用chunk 的数量
后面的每一次分配，都是在arena 里面保存起始指针以及size，类似下面
    pointer  | size
    pointer  | size
#### **allocate 函数**
    int all_400F15()
    {
      unsigned int size; // eax
      int result; // eax
      __int64 p; // [rsp+0h] [rbp-10h]
      __int64 v3; // [rsp+8h] [rbp-8h]
      printf("size: ");
      size = readint();
      v3 = size;
      if ( !size || (unsigned __int64)size + 16  chunkA(0) -> chunkB(1)
  * alloc new chunkC
  * malloc 成功: current ---> chunkC(0) -> chunkA(1)-> chunkB(2)
再 mmap 块上分割内存的操作
    __int64 __fastcall mmap_alloc_400920(unsigned __int64 size)
    {
      __int64 v2; // ST10_8
      unsigned __int64 index; // [rsp+18h] [rbp-10h]
      unsigned __int64 v4; // [rsp+20h] [rbp-8h]
      v4 = size;
      if ( !size )
        return 0LL;
      if ( size & 0xF )
        v4 = (size & 0xFFFFFFFFFFFFFFF0LL) + 0x10; // 0x10 对齐
      if ( v4  index; ++index )
      {  // 查看是否有free 的chunk
        if ( !(*(_QWORD *)(16 * (index + 2) + manager_6020B8 + 8) & 1LL)// free 状态
          && *(_QWORD *)(16 * (index + 2) + manager_6020B8 + 8) >= v4 )
        {                                           // &1==1 表示free
          *(_QWORD *)(16 * (index + 2) + manager_6020B8 + 8) |= 1uLL;// 换成 allocated
          return *(_QWORD *)(16 * (index + 2) + manager_6020B8);// 如果存在就返回这个地址
        }
      }
      if ( *(_QWORD *)manager_6020B8 + *(_QWORD *)(manager_6020B8 + 0x10)  x/4gx 0x7ffff7ff2000
    0x7ffff7ff2000: 0x0000000000000000      0x0000000000000018
    0x7ffff7ff2010: 0x0000000000000000      0x0000000000000000
    pwndbg> x/10gx 0x7ffff7ff5000                                 
    0x7ffff7ff5000: 0x00007ffff7ff2000      0x00007ffff7ff2030
    0x7ffff7ff5010: 0x0000000000003000      0x0000000000000001
    0x7ffff7ff5020: 0x00007ffff7ff2000      0x0000000000000031
    0x7ffff7ff5030: 0x0000000000000000      0x0000000000000000
#### **edit 函数**
    int edit_400FB3()
    {
      unsigned int index; // [rsp+Ch] [rbp-14h]
      __int64 v2; // [rsp+10h] [rbp-10h]
      unsigned int i; // [rsp+1Ch] [rbp-4h]
      printf("index: ");
      index = readint();
      v2 = current_6020B0;
      for ( i = 0; v2 && i < index; ++i )
        v2 = *(_QWORD *)v2;
      if ( !v2 )
        return puts("not found");
      printf("content: ");
      return (unsigned __int64)fgets((char *)(v2 + 0x10), *(_QWORD *)(v2 + 8), stdin);// 根据已有的保存的 size
    }
edit 函数根据chunk 头保存的size 来获取 input, 因为 fgets 只会接收 size-1 的数据，没有溢出
#### **show 函数**
    int show_401051()
    {
      unsigned int index; // [rsp+Ch] [rbp-14h]
      _QWORD *v2; // [rsp+10h] [rbp-10h]
      unsigned int i; // [rsp+1Ch] [rbp-4h]
      printf("index: ");
      index = readint();