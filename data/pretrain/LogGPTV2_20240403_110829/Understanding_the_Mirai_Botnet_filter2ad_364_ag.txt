ate technical and policy-based defenses for today’s IoT
ecosystem, we draw on the experience of dealing with
desktop worms from the 2000s.
Security hardening
The Mirai botnet demonstrated
that even an unsophisticated dictionary attack could com-
promise hundreds of thousands of Internet-connected de-
vices. While randomized default passwords would be a
ﬁrst step, it is likely that attacks of the future will evolve
to target software vulnerabilities in IoT devices much like
the early Code Red and Conﬁckr worms [8, 70]. To miti-
gate this threat before it starts, IoT security must evolve
away from default-open ports to default-closed and adopt
security hardening best practices. Devices should con-
sider default networking conﬁgurations that limit remote
address access to those devices to local networks or spe-
ciﬁc providers. Apart from network security, IoT de-
velopers need to apply ASLR, isolation boundaries, and
principles of least privilege into their designs. From a
compliance perspective, certiﬁcations might help guide
consumers to more secure choices as well as pressure
manufacturers to produce more secure products.
1106    26th USENIX Security Symposium
USENIX Association
Automatic updates
Automatic updates—already
canonical in the desktop and mobile operating system
space—provide developers a timely mechanism to patch
bugs and vulnerabilities without burdening consumers
with maintenance tasks or requiring a recall. Automatic
updates require a modular software architecture by de-
sign to securely overwrite core modules with rollback
capabilities in the event of a failure. They also require
cryptographic primitives for resource-constrained devices
and building PKI infrastructure to support trusted updates.
Apart from these challenges, patching also requires the
IoT community to actively police itself for vulnerabilities,
a potentially burdensome responsibility given the sheer
diversity of devices. Bug bounties can help in this respect:
roughly 25% of all vulnerabilities patched by Chrome
and Firefox came from bug bounties in 2015 [28], while
Netgear launched a bug bounty for its router software in
January, 2017 [75]. In the event of a zero-day exploit that
disables automatic updates, IoT developers must provide
a secure fallback mechanism that likely requires physical
access and consumer intervention.
The Deutsche Telekom infection and subsequent ﬁx
provide an excellent case study of this point. DT’s routers
had a vulnerability that enabled the botnet to spread via its
update mechanism, which provides a reminder that basic
security hardening should be the ﬁrst priority. However,
since DT did have an automatic update mechanism, it was
also able to patch devices rather swiftly, requiring mini-
mal user intervention. Implementing automatic updates
on IoT devices is not impossible, but does take care to do
correctly.
Notiﬁcations Notiﬁcations via out-of-band channels
serve as a fallback mechanism to bring devices back into
security compliance or to clear infections. Recent ex-
amples include alerting device administrators via CERT
bulletins, emailing the abuse contact in WHOIS records,
and in-browser warnings to site owners that a page is
compromised [24, 56, 57]. Notiﬁcations in the IoT space
are complicated to say the least. IoT devices lack both a
public indication of ownership and an established com-
munication channel to reach consumers. Were consumers
reachable, there must also be a clear and simple update
path to address the problem. As a minimum alternative,
IoT devices could be required to register an email address
with the manufacturer or with a uniﬁed, interoperable
monitoring platform that can alert consumers of serious
issues. This is a space where IoT requires non-technical
intervention. The usability challenge of acting on notiﬁ-
cations remains an open research problem.
Facilitating device identiﬁcation
Even when device
models or ﬁrmware versions are known to be vulnerable,
detecting such devices on the network can be extremely
difﬁcult. This made our investigation more challenging,
but it also makes it hard for network operators to detect
vulnerabilities in their or their customers’ devices. To
mitigate this, IoT manufacturers could adopt a uniform
way of identifying model and ﬁrmware version to the
network— say, encoding them in a portion of the device’s
MAC address. Disclosing this information at layer 2
would make it visible to local network operators (or to
the user’s home router), which could someday take auto-
mated steps to disable remote access to known-vulnerable
hardware until it is updated. Achieving this in a uniform
way across the industry would likely require the adoption
of standards.
Defragmentation
Fragmentation poses a security (and
interoperability) risk to maintaining and managing IoT de-
vices. We observed numerous implementations of Telnet,
FTP, and HTTP stacks during scanning. The IoT commu-
nity has responded to this challenge by adopting a handful
of operating systems, examples of which include Android
Thing, RIOT OS, Tock, and Windows for IoT [30]. This
push towards defragmentation would abstract away the
security nuances required of our prescriptive solutions.
End-of-life
Even with security best practices in mind,
end-of-life can leave hundreds of thousands of in-use IoT
devices without support. Lack of long-term support will
yield a two class system of protected and unprotected
devices similar to the current state of Windows XP ma-
chines [63]. Over time, the risk that these devices pose to
the Internet commons will only grow unless taken ofﬂine.
8 Related Work
Since as early as 2005, the security community has
been working to understand, mitigate, and disrupt bot-
nets [17]. For example, Zand et al. proposed a detection
method based on identifying command and control sig-
natures [97], and Gu et al. focused on analyzing network
trafﬁc to aid in detection and mitigation [32, 33]. Unfortu-
nately, mitigation remains a difﬁcult problem as botnets
often evolve to avoid disruption [6].
This work follows in a long line studies that have ana-
lyzed the structure, behavior, and evolution of the botnet
ecosystem [12,37,76,84,85,91,96]. Bailey et al. note that
each technique used in understanding botnets has a unique
set of trade offs, and only by combining perspectives can
we fully analyze the entire picture [11]. This observation
and the seminal work of Rajab et al., implicating botnet
activity in 27% of all network telescope trafﬁc, inspire
our approach [2].
Botnets have historically been used to launch DDoS
attacks, and there exists a parallel set of studies focusing
on characterizing and defending against these attacks [66,
67], as well as estimating their effect [69]. In response to
the recent growth of ampliﬁcation attacks, there have been
USENIX Association
26th USENIX Security Symposium    1107
several studies investigating vulnerable ampliﬁers [20, 51,
79]. As DDoS attacks and infrastructure are becoming
more commonplace, attention has turned to exploring the
DDoS for hire ecosystem [40].
Since the emergence of IoT devices, security re-
searchers have warned of their many inherent security
ﬂaws [80]. Researchers have found that IoT devices con-
tain vulnerabilities from the ﬁrmware level [18, 19] up
to the application level [26, 29, 73, 78]. Mirai is also
not the ﬁrst of its kind to target IoT devices—several
precursors to Mirai exist, all of which exploit the weak
password nature of these devices [38, 52, 59, 62, 72]. As a
result of these widespread security failures, the security
community has been quick to design systems to secure
these kinds of devices. In one example, Fernandes et al.
proposed Flowfence, which enables data ﬂow protection
for emerging IoT frameworks [27]. Much more work
is needed if we are to understand and secure this new
frontier.
In this work, we utilize a multitude of well-established
botnet measurement perspectives, which substantiate con-
cerns about IoT security. We demonstrate the damage
that an IoT botnet can inﬂict upon the public Internet,
eclipsing the DDoS capabilities of prior botnets. We use
previously introduced solutions as guidelines for our own
proposals for combating the Mirai botnet, and IoT botnets
at large.
9 Conclusion
The Mirai botnet, composed primarily of embedded and
IoT devices, took the Internet by storm in late 2016 when
it overwhelmed several high-proﬁle targets with some of
the largest distributed denial-of-service (DDoS) attacks
on record. In this work, we provided a comprehensive
analysis of Mirai’s emergence and evolution, the devices
it targeted and infected, and the attacks it executed. We
ﬁnd that while IoT devices present many unique security
challenges, Mirai’s emergence was primarily based on
the absence of security best practices in the IoT space,
which resulted in a fragile environment ripe for abuse. As
the IoT domain continues to expand and evolve, we hope
Mirai serves as a call to arms for industrial, academic, and
government stakeholders concerned about the security,
privacy, and safety of an IoT-enabled world.
Acknowledgments
The authors thank David Adrian, Brian Krebs, Vern Pax-
son, and the Censys Team for their help and feedback.
This work was supported in part by the National Sci-
ence Foundation under contracts CNS-1345254, CNS-
1409505, CNS-1518888, CNS-1505790, CNS-1530915,
CNS-1518741 and through gifts from Intel and Google.
The work was additionally supported by the U.S. Depart-
ment of Commerce grant 2106DEK, Air Force Research
Laboratory/Defense Advanced Research Projects Agency
grant 2106DTX, the Department of Homeland Security
Science and Technology Directorate FA8750-12-2-0314,
and a Google Ph.D. Fellowship. Any opinions, ﬁndings,
conclusions, or recommendations expressed in this mate-
rial are those of the authors and do not necessarily reﬂect
the views of their employers or the sponsors.
References
[1] Team Cymru. http://www.team-cymru.org/.
[2] M. Abu Rajab, J. Zarfoss, F. Monrose, and A. Terzis. A multi-
faceted approach to understanding the botnet phenomenon. In 6th
ACM Internet Measurement Conference, 2006.
[3] Akamai. Q4 2016 state of the Internet - connectivity report. https://
www.akamai.com/us/en/multimedia/documents/state-of-the-
internet/q4-2016-state-of-the-internet-connectivity-report.pdf.
[4] Anna-senpai.
[FREE] world’s largest net:Mirai botnet, client,
echo loader, CNC source code release. https://hackforums.net/
showthread.php?tid=5420472.
[5] M. Antonakakis, R. Perdisci, D. Dagon, W. Lee, and N. Feamster.
Building a dynamic reputation system for DNS. In 19th USENIX
Security Symposium, 2010.
[6] M. Antonakakis, R. Perdisci, Y. Nadji, N. Vasiloglou, S. Abu-
Nimeh, W. Lee, and D. Dagon. From throw-away trafﬁc to bots:
Detecting the rise of DGA-based malware. In 21st USENIX Secu-
rity Symposium, 2012.
[7] Arbor Networks.
Worldwide infrastructure security re-
https://www.arbornetworks.com/images/documents/
port.
WISR2016_EN_Web.pdf.
[8] H. Asghari, M. Ciere, and M. J. G. Van Eeten. Post-mortem of
a zombie: Conﬁcker cleanup after six years. In 24th USENIX
Security Symposium, 2015.
[9] M. Bailey, E. Cooke, F. Jahanian, and J. Nazario. The Internet
Motion Sensor - A Distributed Blackhole Monitoring System. In
12th Network and Distributed Systems Security Symposium, 2005.
[10] M. Bailey, E. Cooke, F. Jahanian, and D. Watson. The Blaster
worm: Then and now. IEEE Security & Privacy, 2005.
[11] M. Bailey, E. Cooke, F. Jahanian, Y. Xu, and M. Karir. A survey
of botnet technology and defenses. In Cybersecurity Applications
& Technology Conference For Homeland Security, 2009.
[12] P. Barford and V. Yegneswaran. An Inside Look at Botnets. 2007.
[13] BBC. Router hacker suspect arrested at Luton airport. http://
www.bbc.com/news/technology-37510502.
[14] K. Beaumont. "Shadows Kill"–—Mirai DDoS botnet testing
large scale attacks, sending threatening messages about UK and
attacking researchers. https://medium.com/@networksecurity/
shadows-kill-mirai-ddos-botnet-testing-large-scale-attacks-
sending-threatening-messages-about-6a61553d1c7.
[15] J. Blackford and M. Digdon. TR-069 issue 1 amendment
https://www.broadband-forum.org/technical/download/TR-
5.
069_Amendment-5.pdf.
[16] CAIDA: Center for Applied Internet Data Analysis. AS ranking.
http://as-rank.caida.org/?mode0=as-ranking&n=100&ranksort=
3, 2017.
1108    26th USENIX Security Symposium
USENIX Association
[17] E. Cooke, F. Jahanian, and D. McPherson. The zombie roundup:
Understanding, detecting, and disrupting botnets. In 1st USENIX
Steps to Reducing Unwanted Trafﬁc on the Internet Workshop,
2005.
[18] A. Costin, J. Zaddach, A. Francillon, and D. Balzarotti. A large-
scale analysis of the security of embedded ﬁrmwares. In 23rd
USENIX Security Symposium, 2014.
[19] A. Costin, A. Zarras, and A. Francillon. Automated dynamic
ﬁrmware analysis at scale: A case study on embedded web inter-
faces. In 11th ACM Asia Conference on Computer and Communi-
cations Security, 2016.
[20] J. Czyz, M. Kallitsis, M. Gharaibeh, C. Papadopoulos, M. Bailey,
and M. Karir. Taming the 800 pound gorilla: The rise and de-