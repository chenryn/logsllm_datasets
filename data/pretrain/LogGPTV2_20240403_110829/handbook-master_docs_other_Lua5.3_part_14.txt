### luaL_loadstring
[-0, +1, –]
int luaL_loadstring (lua_State *L, const char *s);
将一个字符串加载为 Lua 代码块。 这个函数使用 lua_load 加载一个零结尾的字符串 s。
此函数的返回值和 lua_load 相同。
也和 lua_load 一样，这个函数仅加载代码块不运行。
### luaL_newlib
[-0, +1, e]
void luaL_newlib (lua_State *L, const luaL_Reg l[]);
创建一张新的表，并把列表 l 中的函数注册进去。
它是用下列宏实现的：
     (luaL_newlibtable(L,l), luaL_setfuncs(L,l,0))
数组 l 必须是一个数组，而不能是一个指针。
### luaL_newlibtable
[-0, +1, e]
void luaL_newlibtable (lua_State *L, const luaL_Reg l[]);
创建一张新的表，并预分配足够保存下数组 l 内容的空间（但不填充）。 这是给 luaL_setfuncs 一起用的 （参见 luaL_newlib）。
它以宏形式实现， 数组 l 必须是一个数组，而不能是一个指针。
### luaL_newmetatable
[-0, +1, e]
int luaL_newmetatable (lua_State *L, const char *tname);
如果注册表中已存在键 tname，返回 0 。 否则， 为用户数据的元表创建一张新表。 向这张表加入 __name = tname 键值对， 并将 [tname] = new table 添加到注册表中， 返回 1 。 （__name项可用于一些错误输出函数。）
这两种情况都会把最终的注册表中关联 tname 的值压栈。
### luaL_newstate
[-0, +0, –]
lua_State *luaL_newstate (void);
创建一个新的 Lua 状态机。 它以一个基于标准 C 的 realloc 函数实现的内存分配器 调用 lua_newstate 。 并把可打印一些出错信息到标准错误输出的 panic 函数（参见 §4.6） 设置好，用于处理致命错误。
返回新的状态机。 如果内存分配失败，则返回 NULL 。
### luaL_openlibs
[-0, +0, e]
void luaL_openlibs (lua_State *L);
打开指定状态机中的所有 Lua 标准库。
### luaL_optinteger
[-0, +0, v]
lua_Integer luaL_optinteger (lua_State *L,
                             int arg,
                             lua_Integer d);
如果函数的第 arg 个参数是一个 整数（或可以转换为一个整数）， 返回该整数。 若该参数不存在或是 nil， 返回 d。 除此之外的情况，抛出错误。
### luaL_optlstring
[-0, +0, v]
const char *luaL_optlstring (lua_State *L,
                             int arg,
                             const char *d,
                             size_t *l);
如果函数的第 arg 个参数是一个 字符串，返回该字符串。 若该参数不存在或是 nil， 返回 d。 除此之外的情况，抛出错误。
若 l 不为 NULL， 将结果的长度填入 *l 。
### luaL_optnumber
[-0, +0, v]
lua_Number luaL_optnumber (lua_State *L, int arg, lua_Number d);
如果函数的第 arg 个参数是一个 数字，返回该数字。 若该参数不存在或是 nil， 返回 d。 除此之外的情况，抛出错误。
### luaL_optstring
[-0, +0, v]
const char *luaL_optstring (lua_State *L,
                            int arg,
                            const char *d);
如果函数的第 arg 个参数是一个 字符串，返回该字符串。 若该参数不存在或是 nil， 返回 d。 除此之外的情况，抛出错误。
### luaL_prepbuffer
[-?, +?, e]
char *luaL_prepbuffer (luaL_Buffer *B);
等价于 luaL_prepbuffsize， 其预定义大小为 LUAL_BUFFERSIZE。
### luaL_prepbuffsize
[-?, +?, e]
char *luaL_prepbuffsize (luaL_Buffer *B, size_t sz);
返回一段大小为 sz 的空间地址。 你可以将字符串复制其中以加到缓存 B 内 （参见 luaL_Buffer）。 将字符串复制其中后，你必须调用 luaL_addsize 传入字符串的大小，才会真正把它加入缓存。
### luaL_pushresult
[-?, +1, e]
void luaL_pushresult (luaL_Buffer *B);
结束对缓存 B 的使用，将最终的字符串留在栈顶。
### luaL_pushresultsize
[-?, +1, e]
void luaL_pushresultsize (luaL_Buffer *B, size_t sz);
等价于 luaL_addsize，luaL_pushresult。
### luaL_ref
[-1, +0, e]
int luaL_ref (lua_State *L, int t);
针对栈顶的对象，创建并返回一个在索引 t 指向的表中的 引用 （最后会弹出栈顶对象）。
此引用是一个唯一的整数键。 只要你不向表 t 手工添加整数键， luaL_ref 可以保证它返回的键的唯一性。 你可以通过调用 lua_rawgeti(L, t, r) 来找回由 r 引用的对象。 函数 luaL_unref 用来释放一个引用关联的对象
如果栈顶的对象是 nil， luaL_ref 将返回常量 LUA_REFNIL。 常量 LUA_NOREF 可以保证和 luaL_ref 能返回的其它引用值不同。
### luaL_Reg
typedef struct luaL_Reg {
  const char *name;
  lua_CFunction func;
} luaL_Reg;
用于 luaL_setfuncs 注册函数的数组类型。 name 指函数名，func 是函数指针。 任何 luaL_Reg 数组必须以一对 name 与 func 皆为 NULL 结束。
### luaL_requiref
[-0, +1, e]
void luaL_requiref (lua_State *L, const char *modname,
                    lua_CFunction openf, int glb);
如果 modname 不在 package.loaded 中， 则调用函数 openf ，并传入字符串 modname。 将其返回值置入 package.loaded[modname]。 这个行为好似该函数通过 require 调用过一样。
如果 glb 为真， 同时也讲模块设到全局变量 modname 里。
在栈上留下该模块的副本。
### luaL_setfuncs
[-nup, +0, e]
void luaL_setfuncs (lua_State *L, const luaL_Reg *l, int nup);
把数组 l 中的所有函数 （参见 luaL_Reg） 注册到栈顶的表中（该表在可选的上值之下，见下面的解说）。
若 nup 不为零， 所有的函数都共享 nup 个上值。 这些值必须在调用之前，压在表之上。 这些值在注册完毕后都会从栈弹出。
### luaL_setmetatable
[-0, +0, –]
void luaL_setmetatable (lua_State *L, const char *tname);
将注册表中 tname 关联元表 （参见 luaL_newmetatable） 设为栈顶对象的元表。
### luaL_Stream
typedef struct luaL_Stream {
  FILE *f;
  lua_CFunction closef;
} luaL_Stream;
标准输入输出库中用到的标准文件句柄结构。
文件句柄实现为一个完全用户数据， 其元表被称为 LUA_FILEHANDLE （LUA_FILEHANDLE 是一个代表真正元表的名字的宏）。 这张元表由标准输入输出库（参见 luaL_newmetatable）创建。
用户数据必须以结构 luaL_Stream 开头； 此结构其后可以包含任何其它数据。 f 域指向一个 C 数据流 （如果它为 NULL 表示一个没有创建好的句柄）。 closef 域指向一个在关闭或回收该流时需要调用的 Lua 函数。 该函数将收到一个参数，即文件句柄。 它需要返回 true（操作成功）或 nil 加错误消息（出错的时候）。 一旦 Lua 调用过这个域，该域的值就会修改为 NULL 以提示这个句柄已经被关闭了。
### luaL_testudata
[-0, +0, e]
void *luaL_testudata (lua_State *L, int arg, const char *tname);
此函数和 luaL_checkudata 类似。 但它在测试失败时会返回 NULL 而不是抛出错误。
### luaL_tolstring
[-0, +1, e]
const char *luaL_tolstring (lua_State *L, int idx, size_t *len);
将给定索引处的 Lua 值转换为一个相应格式的 C 字符串。 结果串不仅会压栈，还会由函数返回。 如果 len 不为 NULL ， 它还把字符串长度设到 *len 中。
如果该值有一个带 "__tostring" 域的元表， luaL_tolstring 会以该值为参数去调用对应的元方法， 并将其返回值作为结果。
### luaL_traceback
[-0, +1, e]
void luaL_traceback (lua_State *L, lua_State *L1, const char *msg,
                     int level);
将栈 L1 的栈回溯信息压栈。 如果 msg 不为 NULL ，它会附加到栈回溯信息之前。 level 参数指明从第几层开始做栈回溯。
### luaL_typename
[-0, +0, –]
const char *luaL_typename (lua_State *L, int index);
返回给定索引处值的类型名。
### luaL_unref
[-0, +0, –]
void luaL_unref (lua_State *L, int t, int ref);
释放索引 t 处表的 ref 引用对象 （参见 luaL_ref ）。 此条目会从表中移除以让其引用的对象可被垃圾收集。 而引用 ref 也被回收再次使用。
如果 ref 为 LUA_NOREF 或 LUA_REFNIL， luaL_unref 什么也不做。
### luaL_where
[-0, +1, e]
void luaL_where (lua_State *L, int lvl);
将一个用于表示 lvl 层栈的控制点位置的字符串压栈。 这个字符串遵循下面的格式：
     chunkname:currentline:
0 层指当前正在运行的函数， 1 层指调用正在运行函数的函数， 依次类推。
这个函数用于构建错误消息的前缀。
# 标准库
标准库提供了一些有用的函数, 它们都是直接用 C API 实现的。 其中一些函数提供了原本语言就有的服务 （例如，type 与 getmetatable）； 另一些提供和“外部”打交道的服务（例如 I/O ）； 还有些本可以用 Lua 本身来实现，但在 C 中实现可以满足关键点上的性能需求 （例如 table.sort）。
所有的库都是直接用 C API 实现的，并以分离的 C 模块形式提供。 目前，Lua 有下列标准库：
- 基础库 (§6.1);
- 协程库 (§6.2);
- 包管理库 (§6.3);
- 字符串控制 (§6.4);
- 基础 UTF-8 支持 (§6.5);
- 表控制 (§6.6);
- 数学函数 (§6.7) (sin ，log 等);
- 输入输出 (§6.8);
- 操作系统库 (§6.9);
- 调试库 (§6.10).
除了基础库和包管理库， 其它库都把自己的函数放在一张全局表的域中， 或是以对象方法的形式提供。
要使用这些库， C 的宿主程序需要先调用一下 luaL_openlibs 这个函数， 这样就能打开所有的标准库。 或者宿主程序也可以用 luaL_requiref 分别打开这些库： luaopen_base （基础库）， luaopen_package （包管理库）， luaopen_coroutine （协程库）， luaopen_string （字符串库）， luaopen_utf8 （UTF8 库）， luaopen_table （表处理库）， luaopen_math （数学库）， luaopen_io （I/O 库）， luaopen_os （操作系统库）， luaopen_debug （调试库）。 这些函数都定义在 lualib.h 中。
## 基础函数