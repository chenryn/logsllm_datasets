现在让我们赶快运行二进制文件并观察输出。你应该会得到下面的输出：
**代码覆盖**
**WinAFL**
由于要测试的库是闭源的，所以我们将通过 WinAFL 使用 DynamoRIO 的代码覆盖库功能：
    C:DRIObin32drrun.exe -c winafl.dll -debug -coverage_module msxml6.dll -target_module xmlvalidate.exe -target_method main -fuzz_iterations 10 -nargs 2 -- C:xml_fuzz_initialxmlvalidate.exe C:xml_fuzz_initialnn-valid.xml
WinAFL 将执行二进制文件十次。一旦完成，请返回到 winafl 的文件夹并检查日志文件：
从输出中我们看到运行似乎一切正常！在文件的右侧，那些点描述了 DLL
的覆盖范围，如果你向下滚动，将会看到我们确实覆盖了许多的函数，因为我们在整个文件中获得了更多的点。我们在搜索大量的代码时，这是一个非常好的迹象，我们已经快要正确地定位到
MSXML6 的库。
**Lighthouse- IDA Pro 的代码覆盖资源管理器**
这个插件将帮助我们更好地了解我们命中的函数，并使用 IDA 对覆盖范围进行了很好的概述。这是一个很好的插件，且具有良好的文档，由 Markus
Gaasedelen (@gaasedelen) 所开发。请确保下载了最新版的 [DynamoRIO
7](https://github.com/DynamoRIO/dynamorio/releases/download/release_7_0_0_rc1/DynamoRIO-Windows-7.0.0-RC1.zip)，并按照[这里](https://github.com/gaasedelen/lighthouse)的说明进行安装。幸运的是，我们从文档中获得了两个样本测试用例，一个有效一个无效。让我们输入有效的一个并观察覆盖情况。为此，运行下面的命令：
    C:DRIO7bin64drrun.exe -t drcov -- xmlvalidate.exe nn-valid.xml
下一步启动 IDA，加载 msxml6.dll 并确保获得了符号！现在，检查是否有一个 .log 文件被创建，并在 IDA 中依次点击
File -> Load File -> Code Coverage File(s) 打开它。一旦覆盖文件被加载，它将高亮出测试用例命中的所有函数。
**测试用例最小化**
现在是时候测试 XML 文件了（尽可能小）。我使用了一个稍微偏黑客的 joxean find_samples.py
版本的脚本。一旦你得到了几个测试用例，就可以最小化初始 seed 文件。可以使用下面的命令完成：
    python winafl-cmin.py --working-dir C:winaflbin32 -D C:DRIObin32 -t 100000 -i C:xml_fuzzsamples -o C:minset_xml -coverage_module msxml6.dll -target_module xmlvalidate.exe -target_method fuzzme -nargs 1 -- C:xml_fuzzxmlvalidate.exe @@
你会看到下面的输出：
    corpus minimization tool for WinAFL by  
    Based on WinAFL by  
    Based on AFL by  
    [+] CWD changed to C:winaflbin32. 
    [*] Testing the target binary... 
    [!] Dry-run failed, 2 executions resulted differently: 
    Tuples matching? False 
    Return codes matching? True
我不太确定，但我认为 winafl-cmin.py 脚本期望初始 seed
文件指向相同的代码路径，也就是我们必须一次有效的测试用例，和一次无效的测试用例。可能是我错了，也可能是有一个 bug。
我们使用下面的 bash 脚本来确定一下“好的”和“坏的”XML 测试用例。
    $ for file in *; do printf "==== FILE: $file =====n"; /cygdrive/c/xml_fuzz/xmlvalidate.exe $file ;sleep 1; done
下面的截图显示了我的运行结果：
随意尝试一下，看看是哪些文件导致了这个问题（你的可能会有所不同）。一旦确定，再次运行上面的命令，希望你能得到下面的结果：
你看，初始用例包含 76 个文件，最小化后缩减至 26 个。感谢 Axel！
使用最小化后的测试用例，我们来编写一个可以自动化执行所有代码覆盖的 python 脚本：import sys
    import os
    testcases = []
    for root, dirs, files in os.walk(".", topdown=False):
        for name in files:
            if name.endswith(".xml"):
                testcase =  os.path.abspath(os.path.join(root, name))
                testcases.append(testcase)
    for testcase in testcases:
        print "[*] Running DynamoRIO for testcase: ", testcase
        os.system("C:\DRIO7\bin32\drrun.exe -t drcov -- C:\xml_fuzz\xmlvalidate.exe %s" % testcase)
上面的脚本在我使用的用例里生成了下面的输出：
和前面一样，使用 IDA 打开 File -> Load File -> Code Coverage File(s) 菜单下的所有 .log 文件。
有趣的是，请注意存在多少个 parse 函数，如果你在覆盖范围内徘徊，将会看到我们已经设法得到了大量有趣的代码。  
由于我们确实得到了不错的代码覆盖率，让我们继续前进，最终 fuzz 它！
**  
**
**我所做的就是 fuzz，fuzz，fuzz**
让我们启动 fuzzer：
    afl-fuzz.exe -i C:minset_xml -o C:xml_results -D C:DRIObin32 -t 20000 -- -coverage_module MSXML6.dll -target_module xmlvalidate.exe -target_method main -nargs 2 -- C:xml_fuzzxmlvalidate.exe @@
运行上面的命令后得到下面的输出：
正如你看到的，初始代码就是做这个工作，但速度非常慢。每三秒执行一次将消耗大量的时间才能得到正确的结果。有趣的是，我曾经就是在这种速度下（在
afl/winafl 时代之前，使用 python 和 radamsa），在三天的测试中发现了 bug！  
让我们尽可能地从拖慢 fuzz 速度的部分解脱出来。如果你曾经做过 Windows 编程，就会知道下面一行初始化了一个 COM 对象，这可能就是速度的瓶颈：
    HRESULT hr = CoInitialize(NULL);
这一行确实是一个主要的问题，因此我们来重构代码，我们将创建一个 fuzzme 方法，该方法将在 COM
初始化调用之后接受文件名作为一个参数。重构的代码如下：
    --- cut ---    extern "C" __declspec(dllexport) _bstr_t fuzzme(wchar_t* filename);
    _bstr_t fuzzme(wchar_t* filename)
    {
        _bstr_t bstrOutput = validateFile(filename);
        //bstrOutput += validateFile(L"nn-notValid.xml");
        //MessageBoxW(NULL, bstrOutput, L"noNamespace", MB_OK);
        return bstrOutput;
    }
    int main(int argc, char** argv)
    {
        if (argc n", argv[0]);
            return 0;
        }
        HRESULT hr = CoInitialize(NULL);
        if (SUCCEEDED(hr))
        {
            try
            {
                _bstr_t bstrOutput = fuzzme(charToWChar(argv[1]));
            }
            catch (_com_error &e)
            {
                dump_com_error(e);
            }
            CoUninitialize();
        }
        return 0;
    }
    --- cut ---
你可以从[这里](https://symeonp.github.io/assets/files/xmlvalidate.cpp)得到重构后的版本。使用重构的二进制文件我们来再一次运行
fuzzer，看看是否正确。这一次，我们将传递 fuzzme 作为 target_method，而不是
main，并且只使用一个参数，即文件名。这里，我们使用 lcamtuf 的
xml.dic，来自[这里](https://raw.githubusercontent.com/google/oss-fuzz/master/projects/libxml2/xml.dict)。
    afl-fuzz.exe -i C:minset_xml -o C:xml_results -D C:DRIObin32 -t 20000 -x xml.dict -- -coverage_module MSXML6.dll -target_module xmlvalidate.exe -target_method fuzzme -nargs 1 -- C:xml_fuzzxmlvalidate.exe @@
一旦你运行脚本，在 VMWare 中几秒钟就出现了下面的输出：  
好多了，现在我们让它运行起来然后等待崩溃吧！
**  
**
**结果 – 崩溃分类和分析**
****通常，我会尝试用不同的测 试用例来 fuzz 这个二进制文件，但幸运的是我不断得到 NULL pointer dereference 的
bug。下面的截图显示了大约 12 天后的结果：  
请注意，总共执行了 33 万次，并发现了 26 次不同的崩溃！
为了给结果分类，我使用了 SkyLined 的 [Bugid](https://github.com/SkyLined/BugId)
工具，这是一个很棒的工具，能为你提供关于崩溃和崩溃利用的详细报告。
下面是我的 python 代码：
    import sys
    import os
    sys.path.append("C:\BugId")
    testcases = []
    for root, dirs, files in os.walk(".\fuzzer01\crashes", topdown=False):
        for name in files:
            if name.endswith("00"):
                testcase =  os.path.abspath(os.path.join(root, name))
                testcases.append(testcase)
    for testcase in testcases:
        print "[*] Gonna run: ", testcase