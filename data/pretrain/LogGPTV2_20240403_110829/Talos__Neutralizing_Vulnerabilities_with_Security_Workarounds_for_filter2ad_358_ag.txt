We view Talos as a ﬁrst step towards addressing the pre-
patch vulnerability window. Given its simple implementation
and conservative assumptions, we ﬁnd these results encourag-
ing. We believe the best avenue for improving the effectiveness
of SWRRs is improving the identiﬁcation of error-handling
code or other safe code paths that SWRRs can redirect
execution to, which will give SWRRs better basic coverage
and thus also increase their effective coverage.
[4] “Bug 3841 - Possible symlink race when applying UserOwner to newly
created directory,” http://bugs.proftpd.org/show bug.cgi?id=3841.
[5] “Bugzilla For ProFTPD,” http://bugs.proftpd.org.
[6] “Common Vulnerabilities and Exposures,” http://cve.mitre.org.
[7] “Critical Patch Updates and Security Alerts,” http://www.oracle.com/
technetwork/topics/security/alerts-086861.html#SecurityAlerts.
[8] “CVE Details,” http://www.cvedetails.com.
[9] “Database Speed Comparison,” http://www.sqlite.org/speed.html.
[10] “Debian bug tracking system,” http://bugs.debian.org.
[11] “lighttpd Vulnerability Exploit,” http://www.exploit-db.com/exploits/
[12] “Microsoft
Security Bulletin,”
http://technet.microsoft.com/en-us/
[13] “National Vulnerability Database,” http://nvd.nist.gov.
[14] “ProFTPD Backdoor Unauthorized Access,” http://www.osvdb.org/
18295/.
security/bulletin/.
69562.
ACKNOWLEDGEMENTS
We thank our shepherd Gang Tan and the anonymous
reviewers for their constructive comments. We also thank
Ashvin Goel, Ding Yuan, Michelle Wong, Sukwon Oh for their
helpful suggestions and feedback. Financial support for this
work was provided in part by funds from a Canada Research
Chair and an NSERC Discovery Grant.
REFERENCES
[1] “Apache HTTP server benchmarking tool,” http://apache.org/docs/2.2/
[2] “Apache httpd 2.4 vulnerabilities,” http://httpd.apache.org/security/
[3] “Apache httpd Vulnerability Exploit,” http://www.exploit-db.com/
programs/ab.html.
vulnerabilities 24.html.
exploits/34133.
[15] “pyftpd - Extremely fast and scalable Python FTP server library,” http:
//code.google.com/p/pyftpdlib/.
[16] “Red Hat Bugzilla,” http://bugzilla.redhat.com.
[17] “SecurityTracker,” http://securitytracker.com.
[18] “Squid Invalid Version Number Vulnerability,” http://security-tracker.
debian.org/tracker/CVE-2009-0478.
[19] “Squid Range Headers Vulnerability Workaround,”
http://www.
squid-cache.org/Advisories/SQUID-2014 2.txt.
[20] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-
the 12th ACM Conference on
ser. CCS ’05. New
[Online]. Available:
ﬂow integrity,” in Proceedings of
Computer and Communications Security,
York, NY, USA: ACM, 2005, pp. 340–353.
http://doi.acm.org/10.1145/1102120.1102165
[21] O. H. Alhazmi, Y. K. Malaiya, and I. Ray, “Measuring, analyzing
and predicting security vulnerabilities in software systems,” Comput.
Secur., vol. 26, no. 3, pp. 219–228, May 2007. [Online]. Available:
http://dx.doi.org/10.1016/j.cose.2006.10.002
[22] F. Araujo, K. W. Hamlen, S. Biedermann, and S. Katzenbeisser,
“From patches to honey-patches: Lightweight attacker misdirection,
deception, and disinformation,” in Proceedings of
the 2014 ACM
SIGSAC Conference on Computer and Communications Security, ser.
CCS ’14. New York, NY, USA: ACM, 2014, pp. 942–953. [Online].
Available: http://doi.acm.org/10.1145/2660267.2660329
[23] L. Bilge and T. Dumitras, “Before we knew it: An empirical study of
zero-day attacks in the real world,” in Proceedings of the 2012 ACM
Conference on Computer and Communications Security, ser. CCS ’12.
New York, NY, USA: ACM, 2012, pp. 833–844. [Online]. Available:
http://doi.acm.org/10.1145/2382196.2382284
[24] A. Carzaniga, A. Gorla, A. Mattavelli, N. Perino, and M. Pezz`e,
“Automatic recovery from runtime failures,” in Proceedings of
the
2013 International Conference on Software Engineering, ser. ICSE
’13. Piscataway, NJ, USA: IEEE Press, 2013, pp. 782–791. [Online].
Available: http://dl.acm.org/citation.cfm?id=2486788.2486891
[25] S. Clark, M. Collis, M. Blaze, and J. M. Smith, “Moving targets:
Security and rapid-release in ﬁrefox,” in Proceedings of
the 2014
ACM SIGSAC Conference on Computer and Communications Security,
ser. CCS ’14. New York, NY, USA: ACM, 2014, pp. 1256–1266.
[Online]. Available: http://doi.acm.org/10.1145/2660267.2660320
633633
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:48 UTC from IEEE Xplore.  Restrictions apply. 
[26] M. Costa, M. Castro, L. Zhou, L. Zhang, and M. Peinado, “Bouncer:
Securing software by blocking bad input,” in Proceedings of Twenty-ﬁrst
ACM SIGOPS Symposium on Operating Systems Principles, ser. SOSP
’07. New York, NY, USA: ACM, 2007, pp. 117–130. [Online].
Available: http://doi.acm.org/10.1145/1294261.1294274
[27] J. Criswell, N. Dautenhahn, and V. Adve, “KCoFI: Complete
Control-Flow Integrity for Commodity Operating System Kernels,” in
Proceedings of the 2014 IEEE Symposium on Security and Privacy,
ser. SP ’14. Washington, DC, USA: IEEE Computer Society, 2014,
pp. 292–307. [Online]. Available: http://dx.doi.org/10.1109/SP.2014.26
[28] Q. Gao, W. Zhang, Y. Tang, and F. Qin, “First-aid: Surviving
and preventing memory management bugs during production runs,”
in Proceedings of the 4th ACM European Conference on Computer
Systems, ser. EuroSys ’09. New York, NY, USA: ACM, 2009, pp. 159–
172. [Online]. Available: http://doi.acm.org/10.1145/1519065.1519083
[29] H. S. Gunawi, C. Rubio-Gonz´alez, A. C. Arpaci-Dusseau, R. H. Arpaci-
Dusseau, and B. Liblit, “EIO: Error Handling is Occasionally Correct,”
in Proceedings of the Sixth USENIX Conference on File and Storage
Technologies (FAST ’08), San Jose, CA, February 2008.
[30] Z. Huang and D. Lie, “Ocasta: Clustering conﬁguration settings for
error recovery,” in Dependable Systems and Networks (DSN), 2014 44th
Annual IEEE/IFIP International Conference on, June 2014, pp. 479–
490.
[31] C. Le Goues, M. Dewey-Vogt, S. Forrest, and W. Weimer, “A systematic
study of automated program repair: Fixing 55 out of 105 bugs for $8
each,” in Proceedings of the 2012 International Conference on Software
Engineering, June 2012, pp. 3–13.
[32] C. Le Goues, T. Nguyen, S. Forrest, and W. Weimer, “GenProg: A
generic method for automatic software repair,” Software Engineering,
IEEE Transactions on, vol. 38, no. 1, pp. 54–72, Jan 2012.
[33] F. Long, V. Ganesh, M. Carbin, S. Sidiroglou, and M. Rinard,
“Automatic input rectiﬁcation,” in Proceedings of the 34th International
Conference on Software Engineering, ser. ICSE ’12.
Piscataway,
NJ, USA:
[Online]. Available:
http://dl.acm.org/citation.cfm?id=2337223.2337233
IEEE Press, 2012, pp. 80–90.
[34] F. Long, S. Sidiroglou-Douskos, D. Kim, and M. Rinard, “Sound input
ﬁlter generation for integer overﬂow errors,” in Proceedings of the 41st
ACM SIGPLAN-SIGACT Symposium on Principles of Programming
Languages, ser. POPL ’14. New York, NY, USA: ACM, 2014, pp. 439–
452. [Online]. Available: http://doi.acm.org/10.1145/2535838.2535888
[35] F. Long, S. Sidiroglou-Douskos, and M. Rinard, “Automatic runtime
error repair and containment via recovery shepherding,” in Proceedings
of the 35th ACM SIGPLAN Conference on Programming Language
Design and Implementation, ser. PLDI ’14. New York, NY, USA:
ACM, 2014, pp. 227–238. [Online]. Available: http://doi.acm.org/10.
1145/2594291.2594337
[36] Microsoft, “Data Execution Prevention (DEP),” http://support.microsoft.
com/kb/875352/EN-US/, 2006.
[37] G. Morrisett, G. Tan, J. Tassarotti, J.-B. Tristan, and E. Gan,
“RockSalt: better, faster, stronger SFI for the x86,” in Proceedings
of the 2012 ACM SIGPLAN conference on Programming Language
’12. New York,
Design and Implementation (PLDI), ser. PLDI
NY, USA: ACM, 2012, pp. 395–404.
[Online]. Available: http:
//doi.acm.org/10.1145/2254064.2254111
[38] S. Neuhaus, T. Zimmermann, C. Holler, and A. Zeller, “Predicting
vulnerable software components,” in Proceedings of
the 14th ACM
Conference on Computer and Communications Security, ser. CCS ’07.
New York, NY, USA: ACM, 2007, pp. 529–540. [Online]. Available:
http://doi.acm.org/10.1145/1315245.1315311
[39] H. D. T. Nguyen, D. Qi, A. Roychoudhury, and S. Chandra, “Semﬁx:
Program repair via semantic analysis,” in Proceedings of
the 2013
International Conference on Software Engineering, ser. ICSE ’13.
Piscataway, NJ, USA:
IEEE Press, 2013, pp. 772–781.
[Online].
Available: http://dl.acm.org/citation.cfm?id=2486788.2486890
[40] B. Niu and G. Tan, “Monitor Integrity Protection with Space Efﬁciency
and Separate Compilation,” in Proceedings of the 2013 ACM SIGSAC
Conference on Computer and Communications Security, ser. CCS ’13.
New York, NY, USA: ACM, 2013, pp. 199–210. [Online]. Available:
http://doi.acm.org/10.1145/2508859.2516649
[41] ——, “Rockjit: Securing just-in-time compilation using modular
control-ﬂow integrity,” in Proceedings of
the 2014 ACM SIGSAC
Conference on Computer and Communications Security, ser. CCS ’14.
New York, NY, USA: ACM, 2014, pp. 1317–1328. [Online]. Available:
http://doi.acm.org/10.1145/2660267.2660281
2.0
Targets
“Stagefright
Device,”
[42] PC Magazine,
Android
Every
Single
http://mobile.pcmag.com/networking/
60449-stagefright-2-dot-0-targets-nearly-every-single-android-device,
2015.
[43] ——,
About
58468-theres-almost-nothing-you-can-do-about-stagefright, 2015.
Do
http://mobile.pcmag.com/news/
Stagefright,”
(Almost)
“There’s
Nothing
Nearly
You
Can
[44] J. H. Perkins, S. Kim, S. Larsen, S. Amarasinghe, J. Bachrach,
M. Carbin, C. Pacheco, F. Sherwood, S. Sidiroglou, G. Sullivan, W.-F.
Wong, Y. Zibin, M. D. Ernst, and M. Rinard, “Automatically patching
errors in deployed software,” in Proceedings of
the ACM SIGOPS
22Nd Symposium on Operating Systems Principles, ser. SOSP ’09.
New York, NY, USA: ACM, 2009, pp. 87–102. [Online]. Available:
http://doi.acm.org/10.1145/1629575.1629585
[45] M. Rinard, C. Cadar, D. Dumitran, D. M. Roy, T. Leu, and W. S.
Beebee, Jr., “Enhancing server availability and security through failure-
oblivious computing,” in OSDI’04: Proceedings of the 6th conference on
Symposium on Opearting Systems Design & Implementation. Berkeley,
CA, USA: USENIX Association, 2004, pp. 21–21.
[46] M. C. Rinard, “Living in the comfort zone,” in Proceedings of
the 22nd Annual ACM SIGPLAN Conference on Object-oriented
Programming Systems and Applications, ser. OOPSLA ’07. New
York, NY, USA: ACM, 2007, pp. 611–622.
[Online]. Available:
http://doi.acm.org/10.1145/1297027.1297072
[47] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh,
“On the Effectiveness of Address-Space Randomization,” in Proceedings
of the 11th ACM Conference on Computer and Communications Security
(CCS), Oct. 2004, pp. 298–307.
[48] H. Shahriar
and M. Zulkernine,
“Mitigating program security
vulnerabilities: Approaches and challenges,” ACM Computing Surveys,
vol. 44, no. 3, pp. 11:1–11:46, Jun. 2012.
[Online]. Available:
http://doi.acm.org/10.1145/2187671.2187673
[49] M. Shahzad, M. Z. Shaﬁq, and A. X. Liu, “A large scale exploratory
analysis of software vulnerability life cycles,” in Proceedings of the
34th International Conference on Software Engineering, ser. ICSE
’12. Piscataway, NJ, USA: IEEE Press, 2012, pp. 771–781. [Online].
Available: http://dl.acm.org/citation.cfm?id=2337223.2337314
[50] Y. Shin, A. Meneely, L. Williams, and J. A. Osborne, “Evaluating
complexity, code churn, and developer activity metrics as indicators
of software vulnerabilities,” IEEE Trans. Softw. Eng., vol. 37, no. 6,
pp. 772–787, Nov. 2011. [Online]. Available: http://dx.doi.org/10.1109/
TSE.2010.81
[51] S. Sidiroglou, G. Giovanidis, and A. Keromytis, “Using execution
transactions to recover from buffer overﬂow attacks,” 2004. [Online].
Available: citeseer.ist.psu.edu/707478.html
[52] S. Sidiroglou, O. Laadan, C. Perez, N. Viennot, J. Nieh, and A. D.
Keromytis, “Assure: automatic software self-healing using rescue
points,” in ASPLOS ’09: Proceeding of the 14th international conference
on Architectural support for programming languages and operating
systems. New York, NY, USA: ACM, 2009, pp. 37–48.
[53] M. S¨ußkraut and C. Fetzer, “Robustness and security hardening of
COTS software libraries,” in The 37th Annual IEEE/IFIP International
Conference on Dependable Systems and Networks, DSN 2007, 25-28
June 2007, Edinburgh, UK, Proceedings, 2007, pp. 61–71. [Online].
Available: http://doi.ieeecomputersociety.org/10.1109/DSN.2007.84
[54] J. Swanson, M. B. Cohen, M. B. Dwyer, B. J. Garvin, and J. Firestone,
“Beyond the rainbow: Self-adaptive failure avoidance in conﬁgurable
systems,” in Proceedings of the 22Nd ACM SIGSOFT International
Symposium on Foundations of Software Engineering, ser. FSE 2014.
New York, NY, USA: ACM, 2014, pp. 377–388. [Online]. Available:
http://doi.acm.org/10.1145/2635868.2635915
[55] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway,
´U. Erlingsson,
L. Lozano, and G. Pike, “Enforcing Forward-Edge Control-Flow
Integrity in GCC & LLVM,” in 23rd USENIX Security Symposium
(USENIX Security 14).
San Diego, CA: USENIX Association,
Aug. 2014, pp. 941–955. [Online]. Available: https://www.usenix.org/
conference/usenixsecurity14/technical-sessions/presentation/tice
[56] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham, “Efﬁcient
software-based fault isolation,” in ACM SIGOPS Operating Systems
Review, vol. 27, no. 5, 1994, pp. 203–216.
[57] H.
J. Wang, C. Guo, D. R. Simon,
and A. Zugenmaier,
“Shield: Vulnerability-driven network ﬁlters for preventing known
vulnerability exploits,” in Proceedings of
the 2004 Conference
on Applications, Technologies, Architectures, and Protocols
for
634634
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:48 UTC from IEEE Xplore.  Restrictions apply. 
Computer Communications,
NY, USA: ACM,
2004,
http://doi.acm.org/10.1145/1015467.1015489
ser. SIGCOMM ’04.
pp.
193–204.
New York,
[Online]. Available:
[58] Y. Wei, Y. Pei, C. A. Furia, L. S. Silva, S. Buchholz, B. Meyer, and
A. Zeller, “Automated ﬁxing of programs with contracts,” in Proceedings
of the 19th International Symposium on Software Testing and Analysis,
ser. ISSTA ’10. New York, NY, USA: ACM, 2010, pp. 61–72.
[Online]. Available: http://doi.acm.org/10.1145/1831708.1831716
[59] W. Weimer, T. Nguyen, C. Le Goues, and S. Forrest, “Automatically
ﬁnding patches using genetic programming,” in Proceedings of
the
31st International Conference on Software Engineering, ser. ICSE ’09.
Washington, DC, USA: IEEE Computer Society, 2009, pp. 364–374.
[Online]. Available: http://dx.doi.org/10.1109/ICSE.2009.5070536
[60] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy,
S. Okasaka, N. Narula, and N. Fullagar, “Native client: A sandbox for
portable, untrusted x86 native code,” in Security and Privacy, 2009 30th
IEEE Symposium on, 2009, pp. 79–93.
[61] D. Yuan, Y. Luo, X. Zhuang, G. R. Rodrigues, X. Zhao, Y. Zhang, P. U.
Jain, and M. Stumm, “Simple testing can prevent most critical failures:
An analysis of production failures in distributed data-intensive systems,”
in Proceedings of the 11th Symposium on Operating Systems Design and
Implementation (OSDI), 2014, pp. 249–265.
[62] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant,
D. Song, and W. Zou, “Practical Control Flow Integrity and Randomiza-
tion for Binary Executables,” in Security and Privacy (SP), 2013 IEEE
Symposium on, May 2013, pp. 559–573.
[63] M. Zhang and R. Sekar,
“Control Flow Integrity for COTS
Binaries,” in Presented as part of
the 22nd USENIX Security
Symposium (USENIX Security 13). Washington, D.C.: USENIX, 2013,
pp. 337–352. [Online]. Available: https://www.usenix.org/conference/
usenixsecurity13/technical-sessions/presentation/Zhang
[64] S. Zhang and M. D. Ernst, “Automated diagnosis of
conﬁguration errors,” in Proceedings of
Conference on Software Engineering, ser. ICSE ’13.
NJ, USA:
http://dl.acm.org/citation.cfm?id=2486788.2486830
IEEE Press, 2013, pp. 312–321.
software
the 2013 International
Piscataway,
[Online]. Available:
635635
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:48 UTC from IEEE Xplore.  Restrictions apply.