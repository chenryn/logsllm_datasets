I have a growing bootstrap tasklist that sets up a common environment across
all of my hosts -- things like ssh_authorized_keys, switching users' shells to
their preferred, and most recently setting up a base set of monitoring rules
in my Nagios infrastructure.
The last bit led me to exploring `delegate_to` to set up rules on the nagios
host which reference the nrpe rules installed on each host. Simple stuff,
really. nrpe has a configuration variable which is used to restrict who can
connect to it, based on IP address: `allowed_hosts=127.0.0.1,{{
hostvars['monitor.rix.si']['ansible_default_ipv4']['address'] }}`
This fact doesn't exist because setup hasn't (necessarily) run on that host to
populate hostvars, so let's grab it:
    - name: Pull facts for monitor since we need them in nrpe config
      action: setup
      delegate_to: monitor.rix.si
Nope, this doesn't work, in fact:
    TASK: [debug] *****************************************************************
    failed: [web1.rix.si] => {"failed": true, "item": ""}
    msg: {'inventory_hostname': 'monitor.rix.si', 'inventory_hostname_short': 'monitor', 'machine_type': 'server', 'group_names': ['nagios']}
If I was working at a playbook-level scope I could just do this:
    - hosts: monitor.rix.si
      - name: Pull facts for monitor since we need them in nrpe config
        action: setup
And that would work, but I don't think it's sane to have to add that to every
playbook when I specifically have this bootstrap to not have to do that, and
converting the bootstrap to a playbook with `hosts: all` sucks, since it would
have to run for every host when I run a host-specific playbook.
From my POV, delegate_to should set up hostvars, but I don't know much of the
architecture of Ansible enough to dig in to the code and figure out how to
make this stick.
Is it possible that there is another way to tackle this?