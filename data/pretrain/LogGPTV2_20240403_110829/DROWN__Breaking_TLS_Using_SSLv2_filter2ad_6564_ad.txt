the ciphertext with (cid:29)k known bytes of clear_key_data.
The oracle decision is simple:
• If the ciphertext is valid, the ServerVerify mes-
sage will reflect a master_key consisting of those
(cid:29)k known bytes.
• If the ciphertext is invalid, the master_key will be
replaced with (cid:29)k random bytes (by following the
countermeasure against the Bleichenbacher attack),
resulting in a different ServerVerify message.
This oracle decision requires one connection to the
server and one ServerVerify computation. After the
attacker has found a valid ciphertext corresponding to a
(cid:29)k-byte encrypted key, they recover the (cid:29)k plaintext bytes
by repeating the key recovery attack from above. Thus
our oracle OSSLv2-extra-clear(c) requires one connection to
determine whether c is valid. After (cid:29)k connections, the
attacker additionally learns the (cid:29)k least significant bytes of
m. We model this as a single oracle call, but the number of
server connections will vary depending on the response.
5.2 MITM attack against TLS
Special DROWN is fast enough that it can decrypt a TLS
premaster secret online, during a connection handshake.
A man-in-the-middle attacker can use it to compromise
connections between modern browsers and TLS servers—
even those configured to prefer non-RSA cipher suites.
The MITM attacker impersonates the server and sends
a ServerHello message that selects a cipher suite with
RSA as the key-exchange method. Then, the attacker uses
special DROWN to decrypt the premaster secret. The
main difficulty is completing the decryption and produc-
ing a valid ServerFinished message before the client’s
connection times out. Most browsers will allow the hand-
shake to last up to one minute [1].
The attack requires targeting an average of 100 connec-
tions, only one of which will be attacked, probabilistically.
The simplest way for the attacker to facilitate this is to use
JavaScript to cause the client to connect repeatedly to the
victim server, as described in Section 3. Each connection
is tested against the oracle with only small number of
fractions, and the attacker can discern immediately when
he receives a positive response from the oracle.
Note that since the decryption must be completed on-
line, the Leaky Export oracle cannot be used, and the
attack uses only the Extra Clear oracle.
5.2.1 Constructing the attack
We will use SSL_DES_192_EDE3_CBC_WITH_MD5 as the
cipher suite, allowing the attacker to recover 24 bytes of
key at a time. The attack works as follows:
0. The attacker causes the victim client to connect re-
peatedly to the victim server, with at least 100 con-
nections.
1. The attacker uses the fractional trimmers as de-
scribed in Section 3.2.1 to convert one of the TLS
ciphertexts into an SSLv2 conformant ciphertext c0.
2. Once the attacker has obtained a valid SSLv2 cipher-
text c1, they repeatedly use the shifting technique
described in Section 3.2.2 to rotate the message by
25 bytes each iteration, learning 27 bytes with each
shift. After several iterations, they have learned the
entire plaintext.
3. The attacker then transforms the decrypted SSLv2
plaintext into the decrypted TLS plaintext.
USENIX Association  
25th USENIX Security Symposium  697
9
Using 100 fractional trimmers, this more efficient ora-
cle attack allows the attacker to recover one in 100 TLS
session keys using only about 27,000 connections to the
server, as described in Appendix A.6. The computation
cost is so low that we can complete the full attack on a
single workstation in under one minute.
5.3 The OpenSSL “leaky export” oracle
In addition to the extra clear implementation bug, the
same set of OpenSSL versions also contain a separate bug,
where they do not follow the correct algorithm for their
implementation of the Bleichenbacher countermeasure.
We now describe this faulty implementation:
• The SSLv2 ClientKeyExchange message contains
the mkclear bytes immediately before the ciphertext c.
Let p be the buffer starting at the first mkclear byte.
• Decrypt c in place. If the decryption operation suc-
ceeds, and c decrypted to a plaintext of a correct
padded length, p now contains the 11 mkclear bytes
followed by the 5 mksecret bytes.
• If c decrypted to an unpadded plaintext k of incorrect
length, the decryption operation overwrites the first
j = min(|k|,5) bytes of c with the first j bytes of k.
• If c is not SSLv2 conformant and the decryption
operation failed, randomize the first five bytes of p,
which are the first five bytes of mkclear.
This behavior allows the attacker to distinguish be-
tween these three cases. Suppose the attacker sends 11
null bytes as mkclear. Then these are the possible cases:
1. c decrypts to a correctly padded plaintext k of
the expected length, 5 bytes. Then the following
master_key will be constructed:
[00 00 00 00 00 00 00 00 00 00 00 k[1] k[2] k[3] k[4] k[5]]
2. c decrypts to a correctly padded plaintext k of a
wrong length. Let r be the five random bytes the
server generated. The yielded master_key will be:
[r[1] r[2] r[3] r[4] r[5] 00 00 00 00 00 00 k[1] k[2] k[3] k[4] k[5]]
when |k| ≥ 5. If |k| < 5, the server substitutes the
first |k| bytes of c with the first |k| bytes of k. Using
|k| = 3 as an example, the master_key will be:
[r[1] r[2] r[3] r[4] r[5] 00 00 00 00 00 00 k[1] k[2] k[3] c[4] c[5]]
3. c is not SSLv2 conformant, and hence the decryption
operation failed. The resulting master_key will be:
[r[1] r[2] r[3] r[4] r[5] 00 00 00 00 00 00 c[1] c[2] c[3] c[4] c[5]]
The attacker detects case (3) by performing an exhaus-
tive search over the 240 possibilities for r, and checking
whether any of the resulting values for the master_key
correctly decrypts the observed ServerVerify message.
If no r value satisfies this property, then cd starts with
bytes 0x00 02. The attacker then distinguishes between
cases (1) and (2) by performing an exhaustive search
over the five bytes of k, and checking whether any of the
resulting values for mk correctly decrypts the observed
ServerVerify message.
As this oracle leaks information when using export
ciphers, we have named it the Leaky Export oracle.
In conclusion, OSSLv2-export-leaky allows an attacker to
obtain a valid oracle response for all ciphertexts which de-
crypt to a correctly-padded plaintext of any length. This
is in contrary to the previous oracles OSSLv2-extra-clear and
OSSLv2-export, which required the plaintext to be of a spe-
cific length. Each oracle query to OSSLv2-export-leaky re-
quires one connection to the server and 241 offline work.
Combining the two oracles. The attacker can use the
Extra Clear and Leaky Export oracles together in order to
reduce the number of queries required for the TLS decryp-
tion attack. They first test a TLS conformant ciphertext for
divisors using the Leaky Export oracle, then use fractions
dividing the plaintext with both oracles. Once the attacker
has obtained a valid SSLv2 ciphertext c1, they repeatedly
use the shifting technique described in Section 3.2.2 to
rotate the message by 25 bytes each iteration while choos-
ing 3DES as the symmetric cipher, learning 27 bytes with
each shift. After several iterations, they have learned the
entire plaintext, using 6,300 queries (again for a 2048-bit
modulus). This brings the overall number of queries for
this variant of the attack to 900 + 16∗ 4 + 6,300 = 7,264.
These parameter choices are not necessarily optimal. We
give more details in Appendix A.7.
6 Extending the attack to QUIC
DROWN can also be extended to a feasible-time man-in-
the-middle attack against QUIC [26]. QUIC [10, 39] is a
recent cryptographic protocol designed and implemented
by Google that is intended to reduce the setup time to
establish a secure connection while providing security
guarantees analogous to TLS. QUIC’s security relies on
a static “server config” message signed by the server’s
public key. Jager et al. [26] observe that an attacker who
can forge a signature on a malicious QUIC server config
once would be able to impersonate the server indefinitely.
In this section, we show an attacker with significant re-
sources would be able to mount such an attack against a
server whose RSA public keys is exposed via SSLv2.
A QUIC client receives a “server config” message,
signed by the server’s public key, which enumerates con-
nection parameters: a static elliptic curve Diffie-Hellman
public value, and a validity period. In order to mount a
man-in-the-middle attack against any client, the attacker
wishes to generate a valid server config message contain-
ing their own Diffie-Hellman value, and an expiration
date far in the future.
The attacker needs to present a forged QUIC config to
the client in order to carry out a successful attack. This is
698  25th USENIX Security Symposium 
USENIX Association
10
Pro-
tocol
Attack Oracle
type
SSLv2
TLS Decrypt
Special
TLS Decrypt
TLS MITM Special
QUIC MITM SSLv2
QUIC MITM Special
QUIC MITM Special
SSLv2 Offline
connec-
work
tions
41,081
7,264
27,000
225
225
217
250
251
215
265
225
258
See
§
4.2
5.3
5.2
6.1
6.2
6.2
Table 3: Summary of attacks. “Oracle” denotes the ora-
cle required to mount each attack, which also implies the
vulnerable set of SSLv2 implementations. SSLv2 denotes
any SSLv2 implementation, while “Special” denotes an
OpenSSL version vulnerable to special DROWN.
straightforward, since QUIC discovery may happen over
non-encrypted HTTP [19]. The server does not even need
to support QUIC at all: an attacker could impersonate
the attacked server over an unencrypted HTTP connec-
tion and falsely indicate that the server supports QUIC.
The next time the client connects to the server, it will
attempt to connect using QUIC, allowing the attacker to
present the forged “server config” message and execute
the attack [26].
6.1 QUIC signature forgery attack based on
general DROWN
The attack proceeds much as in Section 3.2, except that
some of the optimizations are no longer applicable, mak-
ing the attack more expensive.
The first step is to discover a valid, PKCS conformant
SSLv2 ciphertext. In the case of TLS decryption, the
input ciphertext was PKCS conformant to begin with; this
is not the case for the QUIC message c0. Thus for the first
phase, the attacker iterates through possible multiplier
values s until they randomly encounter a valid SSLv2
message in c0 · sd. For 2048-bit RSA keys, the probability
of this random event is Prnd ≈ 2−25; see Section 3.2.
Once the first SSLv2 conformant message is found, the
attacker proceeds with the signature forgery as they would
in Step 2 of the TLS decryption attack. The required
number of oracle queries for this step is roughly 12,468
for 2048-bit RSA keys.
Attack cost. The overall oracle query cost is dominated
by the 225 ≈ 34 million expected queries in the first phase,
above. At a rate of 388 queries/second, the attacker would
finish in one day; at a rate of 12 queries/second they would
finish in one month.
For the SSLv2 export padding oracle, the offline com-
putation to break a 40-bit symmetric key for each query
requires iterating over 265 keys. At our optimized GPU
implementation rate of 515 million keys per second, this
would require 829,142 GPU days. Our experimental GPU
hardware retails for $400. An investment of $10 million
to purchase 25,000 GPUs would reduce the wall clock
time for the attack to 33 days.
Our implementation run on Amazon EC2 processed
about 174 billion keys per g2.2xlarge instance-hour,
so at a cost of $0.09/instance-hour the full attack would
cost $9.5 million and could be parallelized to Amazon’s
capacity.
6.2 Optimized QUIC signature forgery based
on special DROWN
For targeted servers that are vulnerable to special
DROWN, we are unaware of a way to combine the two
special DROWN oracles; the attacker would have to
choose a single oracle which minimizes his subjective
cost. For the Extra Clear oracle, there is only negligi-
ble computation per oracle query, so the computational
cost for the first phase is 225. For the Leaky Export or-
acle, as explained below, the required offline work is
258, and the required number of server connections is
roughly 145,573. Both oracles appear to bring this at-
tack well within the means of a moderately provisioned
adversary.
Mounting the attack using Leaky Export. For a 2048-
bit RSA modulus, the probability of a random mes-
sage being conformant when querying OSSLv2-export-leaky
is Prnd ≈ (1/256)2 ∗ (255/256)8 ∗ (1− (255/256)246) ≈
2−17. Therefore, to compute cd when c is not SSLv2 con-
formant, the attacker randomly generates values for s and
tests c· se against the Leaky Export oracle. After roughly
217 ≈ 131,000 queries, they obtain a positive response,
and learn that cd · s starts with bytes 0x00 02.
Naïvely,
it would seem the attacker can then ap-
ply one of the techniques presented in this work, but
OSSLv2-export-leaky does not provide knowledge of any
least significant plaintext bytes when the plaintext length
is not at most the correct one. Instead, the attacker pro-
ceeds directly according to the algorithm presented in [4].
Referring to Table 1 in [4], OSSLv2-export-leaky is denoted
with the term FFT, as it returns a positive response for a
correctly padded plaintext of any length, and the median
number of required queries for this oracle is 14,501. This
number of queries is dominated by the 131,000 queries
the attacker has already executed. As each query requires
testing roughly 241 keys, the required offline work is ap-
proximately 258.
Future changes to QUIC. In addition to disabling
QUIC support for non-whitelisted servers, Google have
informed us that they plan to change the QUIC standard,
so that the “server config” message will include a client
nonce to prove freshness. They also plan to limit QUIC
discovery to HTTPS.
USENIX Association  