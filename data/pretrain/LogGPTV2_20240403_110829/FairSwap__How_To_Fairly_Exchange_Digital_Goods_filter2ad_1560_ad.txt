and the coins will be sent to S.
jc
Sender Fairness Sender fairness means that R shall not be able to learn the witness x unless
the honest sender S is guaranteed to be payed. From the secrecy property of our encoding scheme
and the hiding property of the commitment, it follows directly that R cannot read the content of
17
The protocol consists of descriptions of the behavior of the honest sender S and receiver R.
Initialize
S: Upon receiving input (sell , id , φ, p, x) in round 1, S samples k ← Gen(1κ), computes
(c, d) ← Commit(k) and z = Encode(φ, x, k). Then he sends (sell , id , z, φ, c) to R
and (init, id , p, c, rφ, rz) to GL,H
, where rφ = root(Mtree(φ)) and rz = root(Mtree(z)).
Then he continues to the reveal phase.
jc
R: Upon receiving input (buy, id , φ), R checks if he received message (sell , id , z, c) from S in
round 1 and computes rz = root(Mtree(z)) and rφ = root(Mtree(φ)). Upon receiving
(init, id , p, c, rφ, rz) from GL,H
, R responds with (accept, id ) and proceeds to the reveal
phase.
jc
S: Upon receiving (active, id ) from GL,H
the payout phase. If no (active, id ) message was received from GL,H
he instead terminates the protocol.
jc
jc
Reveal
, S responds with (reveal , id , d, k) and proceeds to
in the third round,
R : Upon receiving (revealed , id , d, k) from GL,H
if no (revealed , id , d, k) message was received from GL,H
protocol.
jc
jc
, R proceeds to the payout phase. Otherwise,
in round 4, R terminates the
Payout
R: The receiver runs (x, π) = Extract(φ, z, k). If π = ⊥, he sends message (ﬁnalize, id )
, otherwise he sends (complain, id , π) instead. Then he outputs (bought, id , x)
to GL,H
and terminates the protocol execution.
jc
S: Upon receiving (sold , id ) or (not sold , id ) from GL,H
, S outputs this message and termi-
nates the protocol. If no message has been received in round 4, he sends (ﬁnalize, id )
to GL,H
jc
.
jc
Figure 5: Formal protocol description for honest S and R
the encrypted witness before S publishes the decryption key k. At the point, when k is revealed,
the coins have been successfully frozen for the execution of the smart contract GL,H
. Now, that the
exchange of the witness is initiated, an honest S is guaranteed to receive the payment, even if R
aborts. Lastly it remains to show that a malicious R cannot forge a proof π, which is accepted by
the judge contract, although S behaved honestly and φ(x) = 1. Forging such a proof would require
R to forge a Merkle proof over a false element of z. Informally speaking, this is not possible unless
he ﬁnds a collision in the hash function H.
jc
If S sends the encoding z, R continues with the protocol until the coins
Receiver Fairness.
are frozen for the execution of the smart contract GL,H
. To prove fairness for an honest receiver
R, we have to show that a malicious sender S cannot send a wrong witness x(cid:48) /∈ L such that R
jc
18
is not able to generate a correct proof of misbehavior, which is accepted by the GL,H
contract.
In order to successfully execute such an attack, S must be able to ﬁnd an encoding z such that
Extract(z, k, φ) = (x(cid:48), π(cid:48)) but the judge on input of π does not accept the complaint. The probabil-
ity of S ﬁnding such values is negligible, since this would require him to break collision resistance
of the underlying hash function. Therefore, R is guaranteed, that as soon as S publishes k he will
either receive the witness x with φ(x) = 1, or he has the guarantee that by executing GL,H
on a
valid proof of misbehavior he will get p + q coins. Therefore Π satisﬁes receiver fairness.
jc
jc
Formal security deﬁnition In order to formally state the security of our protocol Π we use the
previously introduced GUC-style security notion.
Theorem 1. There exists an eﬃcient two party protocol Π, which GUC-realizes the ideal fair
cfe in the judge smart contract (Gjc,L,H)-hybrid world, where H is modeled
exchange functionality F L
as a global programmable random oracle.
jc
In the Appendix we formally prove the Theorem 1 in the global UC model using the judge smart
and a global programmable random oracle H. We start by giving some background
contract GL,H
on the global programmable random oracle model (c.f. Appendix A) and provide deﬁnitions of
the cryptographic building blocks and explain how to construct them in the programmable random
oracle (c.f. Appendix B). In Appendix C follows a brief overview about simulation in the UC Model
and a detailed description of the four simulators that are needed to prove the above theorem.
5 Application and performance
The eﬃciency of the protocol Π can vary for diﬀerent circuits φ, where circuits with small instruction
alphabets Γ and fan-in (cid:96) are the most promising candidates. For such circuits the overhead of the
encoding is small and the judge contract can run at low costs. In this section we show how to use
our general protocol for digital ﬁle sale and highlight its use for distributed peer-to-peer ﬁle sharing.
Additionally, we will give performance indicators for our protocol and costs of our implementation
for the judge contract in Ethereum.
Eﬃcient and fair ﬁle transfer Our protocol can be used whenever two parties want to exchange
data that is identiﬁed via its Merkle hash. In this case the witness that the receiver wants to buy
would be the ﬁle x = (x1, . . . , xn), which is split up into n parts, where each xi is of some short
length and the circuit φ checks if the Merkle Hash root of this ﬁle equals some given value h (i.e.,
φ(x) = 1, if f Mtree(x) = h). The instruction alphabet of φ consists of the operations H(x, y) and
eq(x, h), where H is the Hash function used for the Merkle tree and eq(x, y) is a function that
outputs 1 if x = y. Figure 6 shows such a circuit for a ﬁle with n = 8 elements of size λ. Let
us next provide some further details on the application of our protocol for fair ﬁle exchange with
coins.
Instantiated with the above “ﬁle hashing” circuit our protocol provides an elegant solution for
the so-called free-riders problem, which is a major drawback in distributed ﬁle sharing systems.
The free-riding problem states that a system for digital ﬁle exchange suﬀers if enough peers only
beneﬁt without providing content. Surveys like [41, 42] show that free-riding is a common problem
in decentralized systems whenever creating identities is cheap and users can dynamically join and
leave the system. In [1] researchers found that at one point 75% of users of the popular platform
19
g1
x1
g2
x2
g3
x3
g4
x4
g5
x5
g6
x6
g7
x7
g8
x8
λ
λ
λ
λ
λ
λ
λ
λ
g
9
H(·, ·)
g
1
0
H(·, ·)
g
1
1
H(·, ·)
g
1
2
H(·, ·)
32
32
32
32
g
1
4
H(·, ·)
32
g
1
3
H(·, ·)
32
g
1
5
H(·, ·)
32
g16
eq(·, h)
1
Figure 6: Exemplary circuit φ for exchange of x = (x1, . . . , x8) with hash h = root(Mtree(x))
gnutella were free-riders. Some incentive mechanisms have been proposed to make free-riding less
attractive [26], e.g., by introducing payments and let users pay small fees to the senders of ﬁles.
However, such approaches do not address the case when a malicious user oﬀers content that is
incorrect (i.e., it does not belong to the ﬁle that the receiver intends to download).
A natural solution to the free-rider problem is to use cryptocurrencies that support smart
contracts since they provide a decentralized trust platform which handles payments. One possible
solution already discussed in the introduction is to use ZKCP, but this only works well for small
inputs as otherwise the users would suﬀer from huge eﬃciency penalties. For instance, in [25]
the authors show that proving in zero knowledge the correctness of a single evaluation of a hash
function (SHA256) on a witness of 64 bytes requires 3 MB of additional data transfer between the
parties. On the other hand our protocols also solves the fairness problems of digital ﬁle exchange,
but results only in small overheads for the users in terms of computation and data transfer.
5.1 Implementation
To benchmark the runtime and execution costs of our protocol, we implemented the protocol for
the ﬁle sale application5 using the ﬁle sale circuit (cf. Figure 6). A nice property of this circuit is
the small size of the instruction alphabet (|Γ| = 2), and the small fan-in of operations ((cid:96) = 2). This
allows us to provide a highly eﬃcient smart contract implementation for this particular use case.
The advantage of the small instruction alphabet is that the contract can derive the operation of
gate gi from the index i (indeed there is only one operation in the entire circuit φ except for the
very last instruction). This allows us to implement the veriﬁcation without committing, sending
and verifying φi. Additionally, for the special case of a Merkle tree circuit we have that the input
5The sourcecode of the solidity contract can be found at github.com/lEthDev/FairSwap
20
to all gates (i.e., hash function evaluations) are natural siblings in the encoding in z. This means
that in the concise proof of misbehavior to verify the correct evaluation of one hash functions on
two inputs, we only need one (slightly modiﬁed) Merkle proof veriﬁcation, which veriﬁes both input
values in one step. Thus, the proof π only includes two input values of at most length λ, one output
hash of length µ and two Merkle proofs – one for the two input elements and one for the output of
the gate.
In our implementation the users have the ability to change the parameters of the protocol,
namely the number of ﬁle chunks n, which directly relates to two other parameters in our applica-
tion: the length of each ﬁle chunk |xi| = λ and the depth of the Merkle Tree δ (again we assume a
full tree for simplicity). We can observe the following relation of the parameters:
|x|
n
=
|x|
2δ
λ =
The hash function optimized in the Ethereum virtual machine language is keccak256, which outputs
hashes of size µ = 32 bytes. Since the instruction set of Solidity is currently limited, but provides
a relatively cheap (in gas costs) and easy hashing, we use this hash function to implement our
encryption scheme. Since the judge contract needs the possibility to decrypt each element zi ∈ z
without knowledge of the whole vector z we use a variant of the plain counter mode for symmetric
encryption, for which keccak256 is evaluated on input of a key k and index i, and the ciphertext
is the bitwise XOR of the plaintext with this hash output taking as input the key and the current
counter. From the construction of the encryption scheme, it follows that the ﬁle chunk length λ
should be a multiple of 32 bytes to allow eﬃcient encryption and decryption.
The judge contract implementations oﬀers four diﬀerent options for R to call during the payout
phase. The function nocomplain allows R to accept the ﬁle transfer and directly send p coins
to S, the copmlainAboutRoot function is used whenever R complains about a false output of the
circuit, namely that zm (cid:54)= h. The functions complainAboutLeaf and complainAboutNode allow R
to complain about the computation of two input gates gi, gi+1, i ∈ 1 . . . , n or the computation of
some other gates gi, gj+1 where n < j ≤ m respectively. The reason for these diﬀerent complain
functions is that each of them requires a diﬀerently sized input.
5.2 Benchmarks
The costs for running the protocol consist of the fees, which need to be payed to the miners of the
cryptocurrency – in case of our implementation this will be Ethereum. In the ﬁrst round the sender
deploys the FairSwap contract including the Ethereum addresses of S and R, the price value p,
the commitment c and the roots rφ and rz. The main gas costs result from this deployment, which
costs roughly 1050000 gas, which for a gas price of 3 GWei translates to 0.00315 Ether or 1.57 USD
for an exchange rate of 500 USD/Ether. The price for the execution of the functions deploy, accept,
reveal, refund and no complain stays almost constant for diﬀerent parameters, but the cost of the
complain function varies highly, depending on the kind of complaint, the choice of the ﬁle chunk
size λ and the Merkle depth δ. The data, which needs to be sent to the blockchain (as part of π)
increases with the size of λ. Figure 7 shows the costs for optimistic (green) and pessimistic (red)
execution costs for diﬀerent ﬁle chunk lengths for a ﬁle of one GByte size. Optimistic means, that
the protocol continues until the payout phase, where R accepts the encoding without complaint,
whereas pessimistic means, that R complains to the judge contract about the wrong computation of
21
|
x
|
/
|
z
|
d
a
e
h
r
e
v
O
g
n
i
d
o
c
n
E
2
1.8