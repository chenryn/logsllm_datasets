a symbolic offset, or zeroing a value by subtracting it 
from itself. 
4.2. Memory 
in 
locations.  During 
Spector  represents  memory  as  a  collection  of 
independent  sparse  segments,  each  based  off  of  a 
different  symbolic  value.  It  also  has  a  segment  for 
concrete  memory 
initialization, 
Spector  loads  information  about  various  libraries  and 
functions  into  a  number  of  memory  segments.  It  then 
places the shell code in a segment with “code” as the 
base symbolic value and sets the instruction pointer to 
the  value  “code”.  While  the  shell  code  is  running, 
Spector  assumes  all  memory  writes  succeed  (no  page 
faults),  and  stores 
its 
corresponding  memory  segment.  This  is  a  reasonable 
assumption  because  shell  code  is  designed  to  run 
without crashing and alerting the user. 
the  appropriate  value 
If  the  shell  code  reads  an  address  that  has  not 
previously  been written, then it also succeeds, but the 
result is represented as an unknown value. This occurs 
most often in the case of unaligned reads at the end of a 
memory  segment.  These  reads  can  produce  bit  masks 
where the later bytes are unknown. In general, the use 
of  unknown  values  could  lead  to  non-deterministic 
behavior. Because one major goal of shell code is to be 
portable and reliable, it tries to avoid performing non-
deterministic  operations.  This  intuition  proved  to  be 
correct for our experiments, where we did not witness 
any  shell  code  that  performed  important  operations, 
such  as  branches  and  memory  writes,  using  unknown 
values.  
The  memory  module  does  not  support  addressing 
with  expressions  that  contain more than one symbolic 
value. Memory locations are usually based off of only 
one variable. Combination of two symbols is likely to 
506506
produce  an  unpredictable  result.  This  would  be 
equivalent  to  adding  and  dereferencing  the  values  of 
two  unrelated  pointers  in  C  code,  which  is  likely  to 
yield undesirable behavior. 
Spector  also  assumes  that  reads  and  writes  to 
different  segments  do  not  overlap  with  one  another. 
This is a reasonable assumption for shell code because 
if  it  were  to  write  to  a  memory  offset  that  was  large 
enough  to  overlap  into  a  different  segment  (e.g. 
subtracting  a  big  enough  value  from  the  stack  to  run 
into  the  heap),  then  it  would  probably  cause  a 
segmentation fault or other nondeterministic error in a 
real application environment. 
4.3. Conditional Branching 
Currently,  Spector  only  supports  deterministic 
execution.  This  means  that  it  is  only  able  to  execute 
conditional branches for which it knows the truth value 
of  the  condition  or  has  been  supplied  with  the  truth 
value during initialization. Fortunately, shell code tends 
to  execute  in  a  deterministic  manner  due  to  its  small 
size and limited functionality. This trend is reinforced 
by  the  fact  that  Spector  was  able  to  successfully 
execute  all  of  the  shell  code  samples  during  the 
evaluation process without running into problems from 
non-deterministic branches. 
is 
the  value  of 
In  most  cases,  the  condition  in  a  branch  statement 
will  evaluate  to  a  concrete  Boolean  value.  For  these 
results,  determining  the  correct  branch  behavior  is 
easy.  However,  there  are  some  cases  where  the 
condition  may  depend  on  a  symbolic  value.  One 
prominent  example 
the  process 
environment  block  (PEB)  pointer  (discussed  more  in 
the  next  section).  A  lot  of  shell  code  will  check  the 
highest  bit  of  this  value  to  determine  what  version  of 
Windows  is  running  and  thus  the  structure  of  the 
process  environment  block.  To  deal  with 
these 
situations,  Spector  supports  known  truth  values  for 
conditional  statements 
involving  symbolic  values. 
When  it  encounters  a  branch  that  is  conditional  on  a 
symbolic expression, such as “PEB < 0”, Spector will 
look up its truth value, which is false in this case, from 
a  list  of  known  expression  values,  which  contains  an 
entry  that  states  “’PEB  <  0’  is  false.”  These  known 
expression values are set during initialization. 
There  are  some  conditional  branch  cases  that 
Spector  does  not  handle.  An  example  is  “fake”  non-
determinism where there is a branch conditional upon 
an unknown value that just skips over NOP-equivalent 
instructions  (e.g.  “if  unknown  ==  0:  x  =  x  *  1”). 
Although  the  execution  path  is  unknown  in  this  case, 
the code converges to deterministic behavior. Luckily, 
the  above  example  and 
similar  scenarios  are 
pathological cases with no legitimate purpose, and thus 
did  not  appear  shell  code  that  we  saw  during  our 
evaluation. In the future we hope to extend Spector so 
that  it  is  able  to  handle  a  significant  class  of  non-
deterministic  execution  paths.  This  problem  has  been 
partially  addressed 
in  prior  work  on  symbolic 
execution  [5,  9,  28]  by  using  methods  that  should  be 
equally  applicable  to  Spector,  such  as  forking  a  new 
process to explore each conditional branch path. Other 
techniques that could be applied to the problem include 
data  flow  analysis  to  eliminate  useless  branches  and 
solve data flow equations to help flatten loops [6].  
4.4. Process Environment 
All of the shell code that we analyzed with Spector 
was  designed  to  run  in  the  Microsoft  Windows 
operating system. In order for it to execute in Spector 
the  same  way  that  it  would  in  a  real  system,  it  is 
necessary  to  replicate  certain  parts  of  a  standard 
Windows process environment. The most essential part 
of 
the  process  environment,  which  shell  code 
references  directly,  is  the  process  environment  block 
(PEB).  The  process  environment  block  is  always  in  a 
static memory location (7FFDF000 on Windows 2000 
and XP), and contains a linked list of pointers to library 
modules. In turn, the headers of these library modules 
contain  the  actual  names  and  addresses  of  Windows 
API  functions  such  as  CreateFile,  CreateProcess, 
LoadLibrary, etc. Shell code will typically traverse the 
pointers in the process environment block to get the list 
of  functions  in  the  main  Windows  API  library, 
that 
kernel32.dll.  (Alternatively,  some  shell  code 
targets  specific  versions  will  directly 
reference 
LoadLibrary  and  GetProcAddress.)  It  will  then  iterate 
through the list of function names and extract pointers 
to the functions it wishes to call. 
To accurately recreate important parts of the process 
environment,  Spector  copies  them  from  information 
gathered by an actual process running on Windows XP. 
This  process  will read data from its own environment 
and  output  memory  segments  that contain all the data 
needed for shell code to obtain API function pointers, 
replacing  concrete  function  pointers  with  symbolic 
values so that Spector is later able to identify API calls. 
In addition, Spector will place symbolic values for the 
LoadLibrary  and  GetProcAddress  functions  at  static 
locations  that  are  referenced  by  some  shell  code.  A 
diagram of the kernel32.dll module header can be seen 
in  Figure  4.  As  you  can  see,  the  header  contains 
pointers in fixed locations to lists of function pointers, 
function  name  pointers,  and 
indexes, 
respectively. 
function 
507507
Figure 4. The structure of a library module header for kernel32.dll. 
4.5. API Function Calls 
For 
stub 
Application  programming  interface  (API)  function 
calls  play  a  critical  role  for  shell  code;  they  are  the 
portal  for  interacting  with  objects  and  entities  outside 
of  the  infected  process.  Shell  code  will  typically  use 
network,  file  system,  and  process  API  calls 
to 
download a large secondary payload, write it to a local 
file,  and  execute  it  in  a  new  process  (although  some 
shell code behaves differently). Because API calls are 
central  to  shell  code  execution,  it  is  essential  that 
Spector emulates them properly so that they behave the 
same  as  they  would  in  a  real  process environment. In 
order to perform this emulation, API calls are replaced 
with 
our 
implementation, we only created stub functions for API 
calls  that  we  saw  in  real  shell  code  samples.  Adding 
new  API  function  call  stubs  is  a  straightforward 
process,  and  we  expect  the  methods  outlined  in  this 
section to apply to calls for which we have yet to write 
a  stub  function.  We  wrote  stub  functions  for  23 
different  API  calls  in  our  implementation  of  Spector, 
most of which just returned a single symbolic value. 
hand-written 
functions. 
The return values from API calls must indicate that 
their  execution  was  successful.  Otherwise,  some  shell 
code  will  terminate  prematurely.  For  most  functions, 
this  simple;  the  return  value  just  needs  to  contain  a 
“success”  status  code.  However,  some  functions  need 
to return handles to newly created objects such as files 
or network sockets. In this case, Spector function stubs 
will return symbolic values. These symbols will aid in 
generating  meaningful  output  (e.g.  WriteFile(fHandle, 
…)  instead  of  WriteFile(598323,  …)),  and  are  also 
necessary  for  functions  where  the  return  values  are 
used  for  future  operations,  such  as  malloc()  and 
LoadLibrary().  To  deal  with  conditional  branches 
based on the actual values of these symbols, we added 
special rules stating that the symbols are not zero (e.g. 
“fHandle  !=  0”).  This  will  make  it  so  shell  code  that 
check for handle validity will behave properly. 
The  socket  recv  function  (as  well  as  ReadFile, 
which  is  sometimes  used  to  read  a  piped  socket)  is  a 
special  case  that  must  return  a  value  other  than  a 
success indicator. recv is typically used by shell code to 
retrieve the binary of a secondary payload and write it 
out to a file. It will take a buffer size as input and return 
the number of bytes read over the network, or zero if 
the transaction is complete. In Spector, the call stub for 
recv will return the size of the input buffer on its first 
invocation  (indicating  that  recv  filled  up  the  whole 
buffer),  and  then  return  0  on  future  calls  (indicating 
that  the  connection  has  been  closed).  It  will  not 
populate  the  receive  buffer  with  “unknown”  values. 
This  approach  worked  for  all  the  shell  code  we  saw 
during  our  experiments,  but  it  has  some  limitations. 
First, the shell code may expect more than one buffer-
full  of  data  and  exit  prematurely.  Second,  it  may 
directly  use  the  contents  of  the  receive  buffer  and 
encounter  unknown  data, 
incorrect 
execution. Finally, the shell code will fail if it tries to 
execute the contents of the receive buffer. (Shell code 
that  executes  the  contents  of  the  receive  buffer  is 
sometimes referred to as “inline egg” shell code.) We 
did not encounter any shell code during our evaluation 
that  did  not  work  with  our  receive  implementation. 
However, one way of supporting such code would be to 
connect  the  network  stub  functions  to  real  network 
calls.  However,  doing  so  would 
inline 
execution  of  Spector  in  real  time,  and  also  raises 
leading 
require 
to 
508508
liability  concerns  in  the  case  of  malicious  network 
connections that may lead to a denial-of-service attack. 
We  plan  to  investigate  these  issues  and  look  into  the 
possibility of performing real network I/O from Spector 
in the future. 
5. Implementation 
This  section  describes  issues  involved  with  the 
implementation  of  the  Spector  symbolic  execution 
engine. More specifically, we take a look at the set of 
supported  x86  instructions,  methods  of  optimizing 
Spector’s performance for real shell code, and how to 
generate output that helps categorize the shell code as 
well as provide detailed information to the user. 
5.1. Optimizing Performance 
up 
can 
function 
implementations 
When running shell code, a majority of the executed 
instructions  are  usually  inside  of  tight  loops  while 
addresses.  Home-grown 
looking 
GetProcAddress 
sometimes 
account for over 99% of the execution time in Spector. 
In order to optimize these procedures, Spector searches 
for  known  instruction  sequences  during  execution. 
When it finds a GetProcAddress-equivalent instruction 
sequence,  it  will  instead  execute  a  function  inside  of 
the engine that recreates the post-conditions given the 
pre-conditions.  This  function  will  essentially  take  a 
function  hash  value  and  look  up  the  corresponding 
symbolic function pointer in a hash table that Spector 
creates during initialization. This O(1) lookup inside of 
Spector  significantly  reduces  the  number  of  emulated 
instructions  and  total  execution  time.  In  one  case,  it 
reduced  the  emulated  instructions  from  approximately 
100,000  to  1,000  and  reduced  execution  time  from 
approximately 100 seconds to 1 second. 
The  GetProcAddress  optimization,  however,  is  not 
resistant  to  polymorphism  techniques  that  affect  code 
inside  of  the  shell  code’s  GetProcAddress  routine  (it 
still  works  for  polymorphism  outside,  such  as  in  the 
decoder). However, for the 23,169 shell code samples 
that we saw during our evaluation, we did not witness 
any polymorphism inside of GetProcAddress routines. 
Furthermore, Spector will still run properly in the case 
of polymorphic GetProcAddress code, it will just take 
longer for it to emulate the entire execution path. 
The  GetProcAddress  optimization  requires  manual 
indexing  of  known  implementations.  Indexing  entails 
determining  the  GetProcAddress  instructions,  input 
parameter locations (i.e., register name or stack offset), 
and  output  destination.  Even 
though  human 
intervention  is  required  for  this  optimization,  it  only 
took us about 5 minutes to add a new GetProcAddress 
seven  different 
function,  and  we 
GetProcAddress implementations for over 23,000 shell 
code samples. 
found  only 
Every  time  Spector  finishes  analyzing  a  piece  of 
shell  code,  it  creates  a  byte-matching  signature  and 
inserts  it  into  a  database.  This  allows  Spector  to  skip 
shell code that is exactly the same, other than possibly 
having  different  API  call  parameters.  The  signature 
will  match  referenced  memory  locations  inside  of  the 
code segment directly, with the exception of immediate 
and  string  parameters  to  function  calls.  For  string 
parameters,  the  signature  will  match  and  extract  a 
variable  number  of  non-null  characters.  These 
signatures 
significantly  by 