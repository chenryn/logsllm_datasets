## 引言
虽然“前端挖矿脚本”是近一个月才从业内报告中进入公众视野的词汇，但在“一棒子打死”型各大媒体站的“详细分析”下，我看到满是“黑客恶意植入”、“占用CPU”、“非法牟利”等负面评价的所谓“分析”和传说中的可笑“查杀检查方法”，鲜有对此技术从各层面分析和冷静判断的文章或者新闻，这么好一个转换流量变现，或者说用来进行机器人验证的“硬算力”方式，却被直接贴上“非法”标签，对于做技术和饱含极客精神的人们，真是不友好。。
于是你现在看到的，就是我这个“为前端技术和匿名算法叫冤”的“和事老”，从一个更有趣的角度，以较为通俗的语言、尽量全面的解析、外加合理改造和白利用姿势，用来“科普”的一篇赚稿费的“水文”。
## 词汇解释
>
> 区块链：分布式数据存储、P2P传输、共识机制、加密算法等计算机技术的新型应用模式。其中共识机制指区块链系统中实现不同节点之间建立信任、获取权益的数学算法。（理解为你工作的绩效评定方法）
>
> 钱包：用来记录个人用户电子货币资产、操作交易、用于收发货币的一个"hash"地址。（理解为汇款地址或者你的工资卡吧）
>
> 矿池：相关电子货币根据区块链，同一分配“生产”任务的发布平台，同时也是算力效验的对接平台。（理解为你的工作单位）
>
> 挖矿：此处指利用设备算力按特定电子货币生产计算方法和矿池分配方式产生的经济价值。（理解为努力工作的这个行为）
>
>
> 前端挖矿：从挖矿技术来说，是没有前后端的，此处前端也是指的浏览器前端，而本文前端挖矿，就是说“浏览器内实现、通过用户访问实施挖矿”的一种方式。（理解成工作偷懒让别人干活的方式吧
> ⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄ ）
（抱歉如果文章里还有不懂却未提到的请自行网上查询）
## 概念分析
在进入正题的时候我们必须理解一个概念，那就是正常挖矿和前端挖矿的区别，技术，以及意义。
金镐子银镐子，挖矿方便才是好镐子！ :)
区别：
> 一般挖矿：用户以主动方式，直接使用C或者其他语言构造的miner客户端进行CPU或GPU计算，得到算力价值。
>
> 前端挖矿：用户以被动（或主动）方式，在不知情（或知情）情况下，由浏览者产生的CPU或GPU计算，得到算力价值。
技术：
> 一般挖矿：利用CPU或GPU本身的高速浮点计算能力，进行挖矿工作。而一般挖矿选取有更优秀浮点计算能力的GPU进行操作。
>
>
> 前端挖矿：利用asm.js或webAssembly前端解析器中介，在浏览器端被动使用用户的CPU完成挖矿，或者利用Html5新规范WebGL利用浏览器完成GPU挖矿操作。
意义：
>
> 一般挖矿：从行为和实现方式看，是一种主动在自己设备完成的挖矿行为（排除非法控制他人设备情况），c实现的工具直接使用OS的底层驱动和接口，无论操作内存、CPU或GPU，流程损耗低计算速度更快。
>
>
> 前端挖矿：从行为和实现方式看，可以是一种以被动方式在其他用户浏览到某网页情况下，在非己设备上发生的挖矿行为，通过将算力任务分担给其他浏览用户，来实现“分布式”计算（其实更应该叫，利用多设备优势，提高单一时间内，单目标多任务并发能力）
## Coinhive脚本分析
关键字： `WebSocket` / `worker` / `asm.js` / `WebAssembly`
传送门：[coinhive.min.js](https://coinhive.com/lib/coinhive.min.js)
    https://coinhive.com/lib/
    .
    |—— coinhive.min.js                            // wss矿池通信，分配worker，交互实现
    |   :.. (CoinHive.CONFIG.WEBSOCKET_SHARDS)     // WebSocket地址，连接pool进行任务发布等功能
    |   :.. (CoinHive.CRYPTONIGHT_WORKER_BLOB)     // 以CreateURL形式动态生成Blob链接，对worker内容实现
    |—— cryptonight.wasm                           // WebAssembly实现，预计源cryptonight.c & keccak.c 等
    |—— cryptonight-asmjs.min.js                   // 兼容方案asmjs实现，内容worker除外从L4851算法开始
    |__ cryptonight-asmjs.min.js.mem               // 浏览器中asmjs所需模拟内存实现
通过阅读脚本，可以在Blob构造的worker实例（下文中称worker.js）看到如下对运行平台的判断：
worker.js ( L21 .. L50 )
    var Module;
    if (!Module) Module = (typeof Module !== "undefined" ? Module : null) || {};
    var moduleOverrides = {};
    for (var key in Module) {
        if (Module.hasOwnProperty(key)) {
            moduleOverrides[key] = Module[key]
        }
    }
    var ENVIRONMENT_IS_WEB = false;
    var ENVIRONMENT_IS_WORKER = false;
    var ENVIRONMENT_IS_NODE = false;
    var ENVIRONMENT_IS_SHELL = false;
    if (Module["ENVIRONMENT"]) {
        if (Module["ENVIRONMENT"] === "WEB") {
            ENVIRONMENT_IS_WEB = true
        } else if (Module["ENVIRONMENT"] === "WORKER") {
            ENVIRONMENT_IS_WORKER = true
        } else if (Module["ENVIRONMENT"] === "NODE") {
            ENVIRONMENT_IS_NODE = true
        } else if (Module["ENVIRONMENT"] === "SHELL") {
            ENVIRONMENT_IS_SHELL = true
        } else {
            throw new Error("The provided Module['ENVIRONMENT'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.")
        }
    } else {
        ENVIRONMENT_IS_WEB = typeof window === "object";
        ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
        ENVIRONMENT_IS_NODE = typeof process === "object" && typeof require === "function" && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
        ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER
    }
看来其实coinhive支持包括本地挖矿的其他兼容方式，野心不小呀。
再来看实现过程对兼容性的处理:
worker.js ( L1169 .. L1179 )
    function integrateWasmJS(Module) {
        var method = Module["wasmJSMethod"] || "native-wasm";
        Module["wasmJSMethod"] = method;
        var wasmTextFile = Module["wasmTextFile"] || "cryptonight.wast";
        var wasmBinaryFile = Module["wasmBinaryFile"] || "cryptonight.wasm";
        var asmjsCodeFile = Module["asmjsCodeFile"] || "cryptonight.temp.asm.js";
        if (typeof Module["locateFile"] === "function") {
            wasmTextFile = Module["locateFile"](wasmTextFile);
            wasmBinaryFile = Module["locateFile"](wasmBinaryFile);
            asmjsCodeFile = Module["locateFile"](asmjsCodeFile)
        }
从容地概括本地挖矿和浏览器内前端挖矿，并对不同浏览器对WebAssembly的支持情况进行兼容。
cryptonight.wasm & cryptonight-asmjs.min.js
    我知道怎么从file.c转化成file.wasm或者file.asm.js，但是你让我挑出来给你分析这俩文件的内容？
    你自己去下下来看看你就知道为什么本文不做分析了…… :)
    但是如果非要问，我可以告诉你文件主要就是cryptonight算法的实现，和一般Miner并无两样，只是参数传入传出方式由前端方式二次构造。
    目测来源项目：ccminer 或 stak CPU miner
    example1： https://github.com/tsiv/ccminer-cryptonight/tree/master/crypto
    example2： https://github.com/jquesnelle/xmr-stak-cpu/tree/master/crypto
对于worker队列内的一些实现，你也可以跟我一起过一遍他们的代码，目前看来虽然并未提起开源，但也还不是webpack打包的js，函数名没有替换流程也相对清晰，一步步看下来你也能说出个大概。
听人千言不如亲眼所见，一定要养成强迫自己阅读别人代码，并记录他人书写中优美片段的好习惯。
如果你还非得要我分析算法构成？真巧，我研究的时候顺便翻译了一下CryptoNight的白皮书，Mark在Freebuf今后自己回头来学习。
## CryptoNight 文档
### 概要
CryptoNote Standards 介绍了一种点对点的匿名支付系统，本文档是 CryptoNote Standards 的一部分，定义了
CryptoNote 的缺省工作量证明散列函数，CryptoNight。
### 版权及授权说明
版权所有（c）2013 CryptoNote。 本文档可在知识共享署名3.0许可证（国际）许可权限范围内查询。
许可副本 ：
### 目录
    1. 算法介绍
      2. 名词解释
      3. 初始化流程
      4. 内存处理流程
      5. 结果计算流程
      6. 参考内容
### 1.算法介绍
CryptoNight是一个使用物理内存的高强度hash算法函数。
它的设计适用于GPU，FPGA和ASIC架构上的有效性算力。流程的第一步是初始化大型暂存器与伪随机数据；下一步是算法对暂存器中包含伪随机地址的大量的读/写计算操作；最后一步是将整个暂存器的hash值进行hash效验，验证本次计算产生的价值。
### 2\. 算法定义
hash函数：映射数据的有效计算函数，对于固定大小的数据、构造特定算法行为，产生类似随机数结果
暂存器：在算法过程中，申请用于存储计算时中间值的部分内存
### 3\. 初始化流程
首先，使用参数 `b = 1600` 和 `c = 512` .对输入内容进行Keccak计算 [ KECCAK
]。计算结果的0..31字节用作AES-256密钥[AES]，并扩展为10个循环密钥；申请一个分配了2097152字节（2
MB）空间的暂存器；从计算结果的64..191字节处，提取出来数据并分割成8个块，每个块16字节。使用以下步骤对每个块进行加密：
    for i = 0..9 do:
    block = aes_round(block, round_keys[i])
`aes_round()` 函数执行一轮AES加密，对本块执行 `SubBytes` ，`ShiftRows` 和 `MixColumns`
步骤，其结果与round_key进行异或运算。但这不同于AES加密算法，第一轮计算和最后一轮计算没什么不同。
一轮下来得到的计算结果，写入暂存器的前128个字节，然后这些结果再次代入加密循环，再把这次循环结果写入暂存器的第二个128字节里。这里每次往暂存器里写入下一个128字节，都代表对先前写入的128字节内容在新一轮加密的结果。流程一直循环，直到暂存器写满。至此，一次算法的初始化就完成了。
该图表示暂存器初始化：
    +-----+
                                   |Input|
                                   +-----+
                                      |
                                      V
                                 +--------+
                                 | Keccak |
                                 +--------+
                                      |
                                      V
       +-------------------------------------------------------------+
       |                         Final state                         |
       +-------------+--------------+---------------+----------------+
       | Bytes 0..31 | Bytes 32..63 | Bytes 64..191 | Bytes 192..199 |
       +-------------+--------------+---------------+----------------+
              |                             |
              V                             |
       +-------------+                      V
       | Round key 0 |------------+---+->+-----+
       +-------------+            |   |  |     |
       |      .      |            |   |  |     |
       |      .      |            |   |  | AES |
       |      .      |            |   |  |     |
       +-------------+            |   |  |     |
       | Round key 9 |----------+-|-+-|->+-----+                 +---+
       +-------------+          | | | |     |                    |   |
                                | | | |     +------------------->|   |
                                | | | |     |                    |   |
                                | | | |     V                    |   |
                                | | | +->+-----+                 |   |
                                | | |    |     |                 | S |
                                | | |    |     |                 |   |
                                | | |    | AES |                 | c |
                                | | |    |     |                 |   |
                                | | |    |     |                 | r |
                                | | +--->+-----+                 |   |
                                | |         |                    | a |
                                | |         +------------------->|   |
                                | |         .                    | t |
                                | |         .                    |   |