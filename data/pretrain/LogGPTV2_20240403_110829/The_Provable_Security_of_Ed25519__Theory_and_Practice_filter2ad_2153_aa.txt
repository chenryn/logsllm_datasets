title:The Provable Security of Ed25519: Theory and Practice
author:Jacqueline Brendel and
Cas Cremers and
Dennis Jackson and
Mang Zhao
2
4
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
The Provable Security of Ed25519:
Theory and Practice
Jacqueline Brendel1, Cas Cremers1, Dennis Jackson2, and Mang Zhao1
1CISPA Helmholtz Center for Information Security
2Department of Computer Science, ETH Zurich
Abstract—A standard requirement for a signature scheme
is that it is existentially unforgeable under chosen message
attacks (EUF-CMA), alongside other properties of interest such
as strong unforgeability (SUF-CMA), and resilience against key
substitution attacks.
Remarkably, no detailed proofs have ever been given for these
security properties for EdDSA, and in particular its Ed25519
instantiations. Ed25519 is one of the most efﬁcient and widely
used signature schemes, and different instantiations of Ed25519
are used in protocols such as TLS 1.3, SSH, Tor, ZCash, and
WhatsApp/Signal. The differences between these instantiations
are subtle, and only supported by informal arguments, with many
works assuming results can be directly transferred from Schnorr
signatures. Similarly, several proofs of protocol security simply
assume that Ed25519 satisﬁes properties such as EUF-CMA or
SUF-CMA.
In this work we provide the ﬁrst detailed analysis and security
proofs of Ed25519 signature schemes. While the design of
the schemes follows the well-established Fiat-Shamir paradigm,
which should guarantee existential unforgeability, there are many
side cases and encoding details that complicate the proofs, and
all other security properties needed to be proven independently.
Our work provides scientiﬁc rationale for choosing among
several Ed25519 variants and understanding their properties, ﬁlls
a much needed proof gap in modern protocol proofs that use these
signatures, and supports further standardisation efforts.
I. INTRODUCTION
The Ed25519 signature scheme was introduced in 2011
by Bernstein, Duif, Lange, Schwabe, and Yang in the paper
“High-speed high-security signatures” [1]. The efﬁciency of the
scheme has led to a global uptake in modern applications, and
it is now used in TLS 1.3, SSH, Tor, ZCash, and messaging
protocols based on the Signal protocol such as WhatsApp.
For modern digital signature schemes the quintessential
property is existential unforgeability under chosen message
attacks (EUF-CMA) [2]. This property basically requires that
an adversary cannot construct a signature for a message that
the key owner did not sign previously.
A stronger property that can be met by signature schemes, is
that of strong unforgeability under chosen message attacks
(SUF-CMA). This property additionally requires that
the
adversary cannot construct an alternative signature for a given
signed message. A high-proﬁle example exploiting the absence
of this property is the Mt. Gox attack on Bitcoin [3]. In this
attack, signatures on transactions were mauled by an adversarial
recipient before being stored on the blockchain. The recipient
would then claim that the transaction failed. The sender would
check the blockchain, and would indeed not ﬁnd their exact
signature (due to mauling), conclude that it apparently failed,
and start a new transfer. Yet both signatures would be valid and
the recipient would thus receive the double amount. This attack
would not have been possible with a strongly unforgeable (SUF-
CMA) signature scheme as this notion prohibits malleability.
Additionally, in many practical systems, it is highly desirable
that signature schemes resist key substitution attacks [4], [5].
In such attacks the adversary computes speciﬁc public keys,
e.g., based on observed signatures of honest signers, such
that these honest signatures can also be veriﬁed under the
adversary’s new public keys. This has been shown to lead to
attacks on protocols such as Let’s Encrypt Certiﬁcate Issuance
and SOAP’s WS-Security [4].
Surprisingly, full proofs of any of these security properties
have never been given for Ed25519. The original publica-
tions [1], [6] focused on efﬁciency of computation, and do
not contain a precise statement on the security property that is
offered by the scheme, which in the following we will refer
to as Ed25519-Original. Because the scheme is said to be
constructed via the Fiat-Shamir transform, it should follow that
Ed25519-Original at least provides EUF-CMA security, but full
details were never provided. The papers do refer to malleability
and argue that is not relevant for the standard deﬁnitions of
signature scheme security, but their deﬁnition of malleability
does not agree with the common usage of the term. It also
transpires that, whilst the source code presented alongside the
paper accepts mangled signatures (hence is not SUF-CMA),
the additional check included in the paper’s description but
not the source code, is actually sufﬁcient to prove SUF-CMA,
as we will show. This further adds to the confusion around the
security properties enjoyed by Ed25519.
While the original papers came with a full implementation
of Ed25519-Original,
later implementations made various
modiﬁcations. Notably, the Ed25519-IETF version that was
standardized by the Internet Engineering Task Force (IETF)
in [7] includes a check that is claimed to prevent malleability,
thereby implicitly suggesting that Ed25519-IETF is strongly
unforgeable (SUF-CMA). Later versions, such as the ones used
by LibSodium [8] and ZCash [9] included additional group
element checks. We return to the details of these differences
in Section IV-A. This leads to the obvious question: which
exact properties are actually provided by the various Ed25519
schemes? This question is especially timely as Ed25519 is
© 2021, Jacqueline Brendel. Under license to IEEE.
DOI 10.1109/SP40001.2021.00042
1659
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:29 UTC from IEEE Xplore.  Restrictions apply. 
currently proposed for inclusion in the USA’s National Institute
of Standards and Technology (NIST) standard for Digital
Signature Schemes [10]–[12] and was recently included in
the TLS 1.3 standard [13].
Over the last years, several published works reported security
proofs of systems that use Ed25519, but require speciﬁc
cryptographic security notions from their signature schemes,
such as computational proofs of TLS 1.3’s properties [14]–[17].
These proofs assume that Ed25519-IETF satisﬁes EUF-CMA,
leaving a proof gap. A claimed computational proof of
SSH [18] requires that all supported signature schemes provide
SUF-CMA. However, SSH implementations also allow the
use of the malleable Ed25519-Original, which leads to a
counterexample to the security statement. The Signal protocol
library implements yet another variant of the Ed25519 signature
scheme. Adding to the confusion, a recent work [19] claims
that the results on Schnorr signatures in prime order groups
implies Ed25519-Original enjoys SUF-CMA and resistance to
key substitution attacks. We will see in Section V-C that this
is not the case.
In this work we remedy these proof gaps, and establish
further properties of Ed25519 signature schemes. As we will
see, the devil is in the detail: the speciﬁc details of Ed25519
(e.g., small subgroup elements, scalar clamping) require subtle
tailoring of the proof details, and lead to mismatches such as
the lack of SUF-CMA security for Ed25519-Original despite its
similarities to Fiat-Shamir applied to the Schnorr identiﬁcation
scheme, which ‘should’ imply that SUF-CMA security holds.
These subtleties also manifest themselves in the requirements
of various checks. Thus, our work not only ﬁlls these highly-
needed proof gaps, but also provides additional insight into
the subtle differences between Ed25519 schemes which are
summarized in Table I.
Our main contributions are the following.
• We
detailed
provide
ﬁrst
the
proof
that
Ed25519-Original [1] is indeed EUF-CMA secure.
• We provide the ﬁrst proof that Ed25519-IETF [7] is
actually SUF-CMA secure.
• We prove that all Ed25519 schemes are resilient against
if small subgroup
key substitution attacks, and that
keys are rejected as in LibSodium, a signature uniquely
identiﬁes a message, even for malicious keys.
• In a wider sense, our results retroactively support the stan-
dardisation of Ed25519-IETF, and support the ongoing
standardisation by NIST.
Overview: In Section II we present related work, and Section III
recalls background knowledge. Section IV presents Ed25519
signature schemes and their subtle differences from Schnorr
identiﬁcation schemes. We provide the security proofs in
Section V and we conclude in Section VI.
II. RELATED WORK
A. History of EdDSA and Ed25519
Ed25519-Original
is just one instantiation of the more
general EdDSA signature scheme, which was introduced in
the same paper [1], [6]. EdDSA is itself a variant of the
well-known Schnorr signature scheme [20], [21]. Ed25519 is
EdDSA instantiated over curve Edwards25519 [1] and remains
by far the most popular instantiation of EdDSA, despite its
later extension to support alternative curves [7], [22].
EdDSA instantiations such as Ed25519-Original can sign
and verify signatures substantially faster than almost all other
signatures schemes at similar security levels. For schemes that
have comparable speeds, Ed25519-Original further provides
considerably smaller signatures, producing 64-byte signatures
and 32-byte public keys. Additionally, EdDSA is widely
considered to provide better resistance to side-channel attacks
than alternative schemes. However, the original papers [1],
[6] contain no formal statements (and consequently, no actual
proofs) of its security properties.
By virtue of its outstanding performance with respect to
efﬁciency and bandwidth, EdDSA was standardised by the IETF
between 2015 and 2017 [7]. In 2019, EdDSA was proposed to
also be adopted as part of NIST’s Digital Signature Standard
(DSS) [10], [11]. In early 2020, the public call for comments
was closed [12], but as of writing, no new version has appeared.
B. Related proofs
The Fiat-Shamir paradigm was proposed by Fiat and
Shamir [23] as a generic approach to derive a secure signature
scheme from a canonical identiﬁcation schemes (CID). A
vast body of work followed this seminal result and the
aforementioned Schnorr signatures [20], [21], on which EdDSA
was built, is probably one of the most famous examples
of the transform’s power to build efﬁcient and provably-
secure signatures. Here we merely present some of the many
milestones related to Fiat-Shamir that are most relevant for
our work. While the original presentation [23] lacked security
proofs, Pointcheval and Stern [24], [25] closed this gap by
providing proofs in the (then) relatively new random oracle