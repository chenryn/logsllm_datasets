    PFORMAT_STRING ProcString;
    const unsigned short* FmtStringOffset;
    const STUB_THUNK* ThunkTable;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
    } MIDL_SERVER_INFO, *PMIDL_SERVER_INFO;
通常情况下，我们可以使用IDA Pro遍历导入地址表（IAT）来定位`DispatchTable`，如下图所示：
图4. 使用IDA Pro遍历IAT寻找RPC公开的API
定位到UTC的接口API（前缀为`UtcApi`，如图4所示）后，我们尝试判断这些接口API中是否涉及到ACL（Access Control
List，访问控制列表）相关API，比如`SetNamedSecurityInfo`以及`SetSecurityInfo`等。之所以对这些ACL
API感兴趣，是因为更改对象（包括文件、目录以及注册表等）的DACL（discretionary access
control，自主访问控制）安全描述符时会用到这些API。IDA Pro中还有另一个有用的功能，就是Proximity
view，可以在一张图中显示出某个函数例程的调用图。我们可以使用Proximity view来寻找ACL API中引用或者调用的函数例程。
图5. IDA的Proximity view可以显示`SetSecurityInfo`与`diagtrack.dll`中函数例程的关系
然而，当我们想去寻找`SetSecurityInfo`与`UtcApi`之间的关系时，IDA
Pro并没有给出任何结果。进一步研究后，我们发现`UtcApi`会将客户端的RPC请求放入异步线程工作队列中进行处理。如图5所示，当触发`Microsoft::Diagnostic::EscalationWorkItem::Execute`时，就会执行`SetSecurityInfo`。这是一个回调函数，用来处理堆积在工作队列中、来自RPC客户端的请求。
此时，我们需要澄清如何提交请求。分析各种应用后，我们找到了Microsoft Feedback Hub，这是一个UWP（Universal Windows
Platform，通用Windows平台）应用程序，已在Windows
10默认安装。有些情况下，调试UWP应用能够给我提供很多信息。不幸的是，我们无法使用WinDbg直接打开或者attach
UWP应用。然而，我们可以使用Windows 10 SDK中Windows
Debugger包含的PLMDebug工具来启用UWP应用调试功能。首先我们可以通过Powershell内置cmdlet来确定Feedback
Hub的完整包名：
    PS C:Usersresearcher> Get-AppxPackage | Select-String -pattern "Feedback"
    Microsoft.WindowsFeedbackHub_1.1809.2971.0_x86__8wekyb3d8bbwe
    PS C:Usersresearcher> cd "c:Program FilesWindows Kits10Debuggersx86"
    PS C:Program FilesWindows Kits10Debuggersx86>
    PS C:Program FilesWindows Kits10Debuggersx86> .plmdebug.exe /query 
    Microsoft.WindowsFeedbackHub_1.1809.2971.0_x86__8wekyb3d8bbwe
    Package full name is Microsoft.WindowsFeedbackHub_1.1809.2971.0_x86__8wekyb3d8bbwe.
    Package state: Unknown
    SUCCEEDED
    PS C:Program FilesWindows Kits10Debuggersx86>
获取完整包名后，我们可以再次使用PLMDebug，启用Feedback Hub的UWP调试功能：
    c:Program FilesWindows Kits10Debuggersx86>plmdebug.exe /enabledebug Microsoft.WindowsFeedbackHub_1.1809.2971.0_x86__8wekyb3d8bbwe "c:program fileswindows kits10Debuggersx86windbg.exe"
    Package full name is Microsoft.WindowsFeedbackHub_1.1809.2971.0_x86__8wekyb3d8bbwe.
    Enable debug mode
    SUCCEEDED
下次启动Feedback Hub时，应用就会自动attach到WinDbg。
图6. 根据Process Monitor Event Properties窗口确定API调用的偏移地址
启动Feedback Hub后，我们可以遵循应用在屏幕上给出的提示进行操作，然后就能在Process
Monitor中观察各种活动记录。这是个好兆头，表明我们的方向没有问题。当我们分析`SetSecurityFile`事件的调用栈时，我们发现`SetSecurityInfo`这个ACL
API 的偏移地址为`0x15A091`（我们可以在Event
Properties窗口的Process选项卡中找到`diagtrack.dll`的基址）。这个偏移地址位于`Microsoft::Diagnostics::Utils::FileSystem::SetTokenAclOnFile`例程中，如图6所示，我们也可以在图5的Proximity
view中找到这个值。这些信息表明我们可以利用Feedback Hub，最终得到我们想要的代码路径。
除此之外，从Process
Monitor输出信息中，我们还知道这个事件会尝试设置文件对象的DACL，但如果想通过静态代码分析来找出文件对象的获取方式可能是一件非常耗时的事情。幸运的是，我们可以将本地调试器attach到`svchost.exe`程序上，这是因为该进程不受PPL（Protected
Process Light）机制的保护，并且托管了具备管理员权限的UTC服务。这样我们就可以灵活地动态调试UTC服务，理解文件路径的获取过程。
将反馈信息通过Feedback
Hub提交后，所有的反馈信息和相关附件都会保存在临时目录中，格式为`%DOCUMENTS%\FeedbackHub\\diagtracktempdir`。其中在`diagtracktempdir`后的十进制随机数使用`BCryptGenRandom`
API生成，这意味着所生成的随机数基本上无法预测。然而符号链攻击中非常重要的一环就是要预测文件或者目录的名称，因此随机生成的`diagtracktempdir`的确增加了符号链漏洞利用的难度。因此，我们需要深入其他例程，寻找其他潜在的漏洞。
当我们尝试理解如何设置`diagtracktempdir`安全描述符时，我们发现目标会使用显式安全描述符字符串（即`O:BAD:P(A;OICI;GA;;;BA)(A;OICI;GA;;;SY)`）来创建目录，这意味着对象的DACL只会绑定到Administrator以及本地系统用户。然而，如果设置了如下注册表键值，系统就会忽略显式安全描述符：
    HKEY_LOCAL_MACHINE\Software\Microsoft\Diagnostics\DiagTaskTestHooks\Volatile
    “NoForceCopyOutputDirAcl” = 1
简而言之，如果不存在如上表项，那么`diagtracktempdir`就会强制使用显式安全描述符，否则就会在目录上应用默认的DACL。这可能会引发一些安全问题，因为文件创建过程中不会使用任何模拟（impersonation）令牌。无论如何，如果我们具备注册表任意写入漏洞，就可以绕过该目录中显式安全描述符的限制。但这并不是我们想要的结果，因此我们最好还是回到Process
Monitor：
图7. 设置DACL，重命名`diagtracktempdir`目录
我们可以将图7的操作过程总结如下：
1、以本地系统权限授予当前登录用户对`diagtracktempdir`的访问权限；
2、通过模拟方式重命名`diagtracktempdir`目录；
3、通过模拟方式撤销当前登录用户对`diagtracktempdir`的访问权限。
图7的操作过程可以通过如下代码段来表示：
    bQueryTokenSuccessful = UMgrQueryUserToken(hContext, v81, &hToken);
    if ( hToken && hToken != -1 )
    {
    // This will GRANT access of the current logged in user to the directory in the specified handle
    bResultCopyDir = Microsoft::Diagnostics::Utils::FileSystem::SetTokenAclOnFile(&hToken, hDir, Sid, GRANT_ACCESS)
    if ( !ImpersonateLoggedOnUser(hToken) ) 
    {
    bResultCopyDir = 0x80070542;
    }
    }
    // Rename diagtracktempdir to GUID-styled folder name
    bResultCopyDir = Microsoft::Diagnostics::Utils::FileSystem::MoveFileByHandle(SecurityDescriptor, v65, Length);
    if ( bResultCopyDir >= 0 )
    {
    boolRenamedSuccessful = 1;
    // This will REVOKE access of the current logged in user to the directory in the specified handle
    bSetAclSucessful = Microsoft::Diagnostics::Utils::FileSystem::SetTokenAclOnFile(&hToken, hDir, Sid, REVOKE_ACCESS)if (bSetAclSucessful)
    {
    // Cleanup and RevertToSelf
    return;
    }
    }
    else
    {
    lambda_efc665df8d0c0615e3786b44aaeabc48_::operator_RevertToSelf(&hTokenUser);
    // Delete diagtracktempdir folder and its contents
    lambda_8963aeee26028500c2a1af61363095b9_::operator_RecursiveDelete(&v83);
    }
代码3：授予并取消当前用户对`diagtracktempdir`的访问权限
从代码3中，我们可知文件重命名操作会在什么情况下失败。如果`bResultCopyDir`的值小于0，那么执行流程就会调用`RecursiveDelete`函数。此外还需要注意的是，在调用`RecursiveDelete`函数之前，程序会先调用`RevertToSelf`函数来停止模拟，这意味着系统会使用本地系统权限来删除目标目录及目录内容。因此，如果我们能使用符号链接来将`diagtracktempdir`重定向到一个任意目录，就可以实现任意文件删除目标。幸运的是，微软已经消除了这个潜在的问题。如果目录设置了`FILE_ATTRIBUTE_REPARSE_POINT`标志（`junction`目录通常会设置该标志），那么`RecursiveDelete`函数就会显式跳过这些目录。因此我们可以确定，这个删除操作并不会带来任何安全风险。
由于我们无法实现任意文件删除，我们决定分享一下如何将任意文件写入`diagtracktempdir`目录中。查看代码，我们发现在递归删除操作完成后，UTC服务并不会撤销当前用户对`diagtracktempdir`目录的安全描述符。这是系统有意为之的行为，因为我们并不需要在一个即将被删除的目录上附加新的DACL，这是多余的操作。然而这也为攻击者提供了一个潜在的竞争条件机会，攻击者可以在同一个目录中创建带有独占文件句柄的文件来避免系统删除`diagtracktempdir`目录。当`RecursiveDelete`函数尝试打开和删除带有独占文件句柄的文件时，就会碰到共享冲突，然后正常退出执行。最终，攻击者可以将文件释放到受限目录（如`C:\WINDOWS\System32`）的`diagtracktetempdir`目录中并加以执行。
那么下一个问题就是，我们如何让文件重命名操作失败？查看`Microsoft::Diagnostics::Utils::FileSystem::MoveFileByHandle`的底层实现后，我们可以看到这本质上是一个封装函数，用来调用`SetFileInformationByHandle`
API。我们发现派生自该API的底层内核函数似乎总会获取到父目录的一个可写权限文件句柄。比如，如果文件句柄当前指向的是`c:\blah\abc`，那么系统就会尝试获取`c:\blah`目录具备可写权限的文件句柄。然而，如果我们我们指定当前登录用户不具备写入权限的某个目录，那么`Microsoft::Diagnostics::Utils::FileSystem::MoveFileByHandle`就可能无法正常执行。我们可以使用如下目录，因为这些目录不允许普通用户账户执行目录创建操作。
    C:\WINDOWS\System32
    C:\WINDOWS\tasks
由于请求过程中需要将大量log文件写入我们可控的`diagtracktempdir`目录中，这需要一定时间来处理，因此我们应该有较大的把握能够在竞争条件中获胜。因此，如果我们在目标目录中创建了独占文件句柄，那么大部分时间内，在搭载多核处理器的操作系统上我们应该都能完成任务。
接下来，我们需要找到办法，以编程方式使用`UtcApi`所需的正确参数来触发这条代码路径。由于我们能够在RPC函数上调试并设置断点，Feedback
Hub中的`NdrClientCall`函数可以让我们的工作更加轻松。从调试器中我们可以知道Scenario
ID，也可以知道需要发送给`UtcApi`的文件路径。在本例中，我们准备使用的Scenario
ID为`{1881A45E-01FD-4452-ACE4-4A23666E66E3}`，貌似`UtcApi_EscalateScenarioAsync`例程被触发时都能看到这个值，并且也能触及RPC服务器上我们所需的代码路径。需要注意的是，我们还可以使用这个文件路径来控制`diagtracktempdir`的具体创建位置。
    Breakpoint 0 hit
    eax=0c2fe7b8 ebx=032ae620 ecx=0e8be030 edx=00000277 esi=0c2fe780 edi=0c2fe744
    eip=66887154 esp=0c2fe728 ebp=0c2fe768 iopl=0 nv up ei pl nz na po nc
    cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202
    Helper+0x37154:
    66887154 ff15a8f08866 call dword ptr [Helper!DllGetActivationFactory+0x6d31 (6688f0a8)] ds:0023:6688f0a8={RPCRT4!NdrClientCall4 (76a74940)}
    0:027> dds esp l9
    0c2fe728 66892398 Helper!DllGetActivationFactory+0xa021
    0c2fe72c 66891dca Helper!DllGetActivationFactory+0x9a53
    0c2fe730 0e8be030
    0c2fe734 1881a45e // Scenario ID
    0c2fe738 445201fd
    0c2fe73c 234ae4ac
    0c2fe740 e3666e66
    0c2fe744 00000000
    0c2fe748 032ae620 // Escalation path
    0:027> du 032ae620
    032ae620 "E:\researcher\Documents\Feedback"
    032ae660 "Hub\{e04b7a09-02bd-42e8-a5a8-666"
    032ae6a0 "b5102f5de}\{e04b7a09-02bd-42e8-a"
    032ae6e0 "5a8-666b5102f5de}"
`UtcApi_EscalateScenarioAsync`的函数原型如下所示：
    long UtcApi_EscalateScenarioAsync (
    [in] GUID SecnarioID, 
    [in] int16 unknown, 
    [in] wchar_t* wszEscalationPath
    [in] long unknown2, 
    [in] long unknown3, 
    [in] long num_of_keyval_pairs, 
    [in] wchar_t **keys, 
    [in] wchar_t **values)
结合以上信息，我们的PoC代码操作过程可以分为如下几个步骤：
1、创建一个循环线程，监视我们的目标目录（如`C:\WINDOWS\SYSTEM32`），以便及时捕捉到`diagtracktempdir`的目录名；
2、创建另一个循环线程，该线程会创建`C:\WINDOWS\SYSTEM32\diagtracktempdir{random_decimal}\z`的一个独占句柄；
3、调用`UtcApi_EscalateScenarioAsync(1881A45E-01FD-4452-ACE4-4A23666E66E3)`，触发`Microsoft::Diagnostic::EscalationWorkItem::Execute`；
4、随后，攻击者可以向`C:\WINDOWS\SYSTEM32\diagtracktempdir{random_decimal}`目录中写入并执行任意文件，与此同时合法程序会认为`%SYSTEM32%`目录中只包含合法的OS文件。
我们的PoC演示了一种潜在利用方法，可以利用UTC服务在受限目录的静态目录中创建任意文件及目录。
图8. 可以在`diagtracktempdi`目录中创建任意文件的PoC代码
重申一下，如MSRC所述，如果不能控制或者重命名`diagtracktempdir`目录，这个PoC并不会对Windows系统带来安全风险。然而，恶意软件开发者通常会使用各种不同的技术（如UAC绕过技术），将文件写入Windows系统目录中，以便绕过启发式检测器。实际上，在探索PoC中可以使用的潜在文件路径时，我们发现`C:\WINDOWS\SYSTEM32\Tasks`目录包含普通用户账户的写入和执行权限，但没有读取权限，这也是为什么该目录经常会被恶意软件开发者用来存储恶意文件。
## 四、总结
在本文中，我们与大家分享了如何使用不同的工具和在线资源来寻找Windows
RPC服务器中的潜在安全风险。我们同样演示了逆向分析RPC服务器所需的一些基础知识。我们相信RPC服务器中还有其他潜在的安全风险尚未发掘，因此，我们将进一步加强Windows
RPC服务器的安全性。在下一篇文章中，我们会继续调查。改进我们的方法，继续发现其他RPC服务器漏洞。