title:PoWerStore: proofs of writing for efficient and robust storage
author:Dan Dobre and
Ghassan Karame and
Wenting Li and
Matthias Majuntke and
Neeraj Suri and
Marko Vukolic
PoWerStore: Proofs of Writing for Efﬁcient
and Robust Storage
Dan Dobre1 Ghassan O. Karame1 Wenting Li1 Matthias Majuntke2 Neeraj Suri3 Marko Vukoli´c4
1NEC Laboratories Europe
Heidelberg, 69115, Germany
{dan.dobre, ghassan.karame, wenting.li}@neclab.eu
2Capgemini Deutschland
Berlin, 10785, Germany
PI:EMAIL
3TU Darmstadt
Darmstadt, 64289, Germany
PI:EMAIL
4EURECOM
Biot, 06410, France
PI:EMAIL
ABSTRACT
Existing Byzantine fault tolerant (BFT) storage solutions
that achieve strong consistency and high availability, are
costly compared to solutions that tolerate simple crashes.
This cost is one of the main obstacles in deploying BFT
storage in practice.
In this paper, we present PoWerStore, a robust and eﬃ-
cient data storage protocol. PoWerStore’s robustness com-
prises tolerating network outages, maximum number of Byzan-
tine storage servers, any number of Byzantine readers and
crash-faulty writers, and guaranteeing high availability (wait-
freedom) and strong consistency (linearizability) of read-
/write operations. PoWerStore’s eﬃciency stems from com-
bining lightweight cryptography, erasure coding and meta-
data write-backs, where readers write-back only metadata
to achieve strong consistency. Central to PoWerStore is the
concept of “Proofs of Writing” (PoW), a novel data storage
technique inspired by commitment schemes. PoW rely on
a 2-round write procedure, in which the ﬁrst round writes
the actual data and the second round only serves to “prove”
the occurrence of the ﬁrst round. PoW enable eﬃcient im-
plementations of strongly consistent BFT storage through
metadata write-backs and low latency reads.
We implemented PoWerStore and show its improved per-
formance when compared to existing robust storage proto-
cols, including protocols that tolerate only crash faults.
Categories and Subject Descriptors
D.4.5 [Operating Systems]: Reliability – Fault tolerance.
Keywords
Byzantine-Fault Tolerance; Secure Distributed Storage; Strong
Consistency.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516750.
1.
INTRODUCTION
Byzantine fault-tolerant (BFT) distributed protocols have
attracted considerable research attention, due to their ap-
pealing promise of masking various system issues ranging
from simple crashes, through software bugs and misconﬁg-
urations, all the way to intrusions and malware. However,
the use of existing BFT protocols is questionable in practice
due to, e.g., weak guarantees under failures [41] or high cost
in performance and deployment compared to crash-tolerant
protocols [27]. This can help us derive the following require-
ments for the design of future BFT protocols:
• A BFT protocol should be robust, i.e., it should tol-
erate Byzantine faults and asynchrony (modeling net-
work outages) while maintaining correctness (data con-
sistency) and providing sustainable progress (availabil-
ity) even under worst-case conditions that still meet
the protocol assumptions. This requirement has often
been neglected in BFT protocols that focus primarily
on common, failure-free operation modes (e.g., [22]).
• Such a robust protocol should be eﬃcient. For exam-
ple, virtually all BFT protocols resort to data write-
backs, in which a reader must ensure that a value it is
about to return is propagated to a suﬃcient number
of servers before a read completes—eﬀectively, this en-
tails repeating a write after a read [5] and results in
performance deterioration. We believe that the eﬃ-
ciency of a robust BFT protocol is best compared to
the eﬃciency of its crash-tolerant counterpart.
Ide-
ally, a robust protocol should not incur signiﬁcant per-
formance and resource cost penalty with respect to a
crash-tolerant implementation, hence making the re-
placement of a crash-tolerant protocol a viable option.
In this paper, we present PoWerStore, a robust and eﬃ-
cient asynchronous BFT distributed read/write storage pro-
tocol. The notion of robustness subsumes [5]: (i) high avail-
ability, or wait-freedom [23], where read/write operations
invoked by correct clients always complete, and (ii) strong
consistency, or linearizability [24] of read/write operations.
At the heart of PoWerStore is a novel data storage tech-
nique we call Proofs of Writing (PoW). PoW are inspired
by commitment schemes; PoW incorporate a 2-round write
procedure, where the second round of write eﬀectively serves
to “prove” that the ﬁrst round has actually been completed
before it is exposed to a reader. The second write round in
PoW is lightweight and writes only metadata; however, it is
powerful enough to spare readers of writing back the data
allowing them to only write metadata to achieve strong con-
sistency.1 We construct PoW using cryptographic hash func-
tions and eﬃcient message authentication codes (MACs); in
addition, we also propose an instantiation of PoW based on
polynomial evaluation.
PoWerStore’s eﬃciency is reﬂected in (i) metadata write-
backs where readers write-back only metadata, avoiding ex-
pensive data write-backs, (ii) use of lightweight cryptographic
primitives (such as hashes and MACs), (iii) optimal re-
silience, i.e., ensuring correctness despite the largest possible
number t of Byzantine server failures; this mandates using
3t + 1 servers [35]. Moreover, PoWerStore achieves these
desirable properties with optimal latency: namely, we show
that no robust protocol, including crash-tolerant ones, that
uses a bounded number of servers and avoids data write-
backs can achieve better latency than PoWerStore. More
speciﬁcally, in the single writer (SW) variant of PoWerStore,
this latency is two rounds of communication between a client
and servers for both reads and writes.
In addition, PoWerStore employs erasure coding at the
client side to oﬄoad the storage servers and to reduce net-
work traﬃc. Furthermore, PoWerStore tolerates an un-
bounded number of Byzantine readers and unbounded num-
ber of writers that can crash.
Finally, while our SW variant of PoWerStore demonstrates
the eﬃciency of PoW, for practical applications we propose
a multi-writer (MW) variant of PoWerStore (referred to
as M-PoWerStore). M-PoWerStore features 3-round writes
and reads, where the third read round is invoked only un-
der active attacks. M-PoWerStore also resists attacks spe-
ciﬁc to multi-writer setting that exhaust the timestamp do-
main [6]. We evaluate M-PoWerStore and demonstrate its
superiority even with respect to existing crash-tolerant ro-
bust atomic storage implementations. Our results show that
in typical settings, the peak throughput achieved by M-
PoWerStore improves over existing robust crash-tolerant [5]
and Byzantine-tolerant [34] atomic storage implementations,
by 50% and 100%, respectively.
The remainder of the paper is organized as follows.
In
Section 2, we outline our system and threat model. Sec-
tion 3 outlines the main intuition behind Proofs of Writing.
In Section 4, we introduce PoWerStore and we analyze its
correctness. In Section 5, we present the multi-writer variant
of PoWerStore, M-PoWerStore. In Section 6, we evaluate an
implementation of M-PoWerStore. In Section 7, we overview
related work and we conclude the paper in Section 8.
2. MODEL
We consider a distributed system that consists of three
disjoint sets of processes: a set servers of size S = 3t + 1,
where t is the failure threshold parameter, containing pro-
cesses {s1, ..., sS}; a set writers w1, w2, ... and a set read-
ers r1, r2, etc. The set clients is the union of writers and
readers. We assume the data-centric model [12, 40] with bi-
directional point-to-point channels between each client and
each server. Servers do not communicate among each other,
1As proved in [17],
“write”, i.e., modify the state of storage servers.
in any robust storage readers must
nor send messages other than in reply to clients’ messages.
In fact, servers do not even need to be aware of each other.
2.1 Threat Model
We model processes as probabilistic I/O automata [43]
where a distributed algorithm is a set of such processes. Pro-
cesses that follow the algorithm are called correct. Similar
to [3, 4, 16, 34], we assume that any number of honest writ-
ers that may fail by crashing while allowing any number of
readers and up to t servers to exhibit Byzantine [29] (or
arbitrary [25]) faults.
We assume a strong adversary that can coordinate the
Byzantine servers and readers to compromise the system.
We further assume that the adversary controls the network
and as such controls the scheduling of all transmitted mes-
sages in the network, resulting in asynchronous communica-
tion. However, we assume that the adversary cannot prevent
the eventual delivery of messages between correct processes.
We opt not to focus on Byzantine writers because they can
always obliterate the storage by constantly overwriting data
with garbage, even in spite of (expensive) techniques that
ensure that each individual write leaves a consistent state
(e.g., [10,19,22,31]. As a consequence, with Byzantine writ-
ers and asynchronous message schedule, the adversary can
make a correct reader return arbitrary data at will. There-
fore, we assume appropriate access control mechanisms to
prevent untrusted writers from having appropriate creden-
tials to modify data.
Finally, we assume that the adversary is computationally
bounded and cannot break cryptographic hash functions or
forge message authentication codes. In this context, we as-
sume the existence of a cryptographic (i.e., one way and
collision resistant) hash function H(·), and a secure message
authentication function M ACk(·), where k is a λ-bit sym-
metric key. We further assume that each server si pre-shares
one symmetric group key with each writer in W ; in the fol-
lowing, we denote this key by ki.2 Note that, in this paper,
we do not address the conﬁdentiality of the outsourced data.
2.2 Atomic Storage
We focus on a read/write storage abstraction [28] which
exports two operations: write(v), which stores value v and
read(), which returns the stored value. We assume that the
initial value of a storage is a special value ⊥, which is not a
valid input value for a write operation. While every client
may invoke the read operation, we assume that writes are
invoked only by writers.
We say that an operation (invocation) op is complete if the
client receives the response, i.e., if the client returns from
the invocation.
In any execution of an algorithm, we say
that a complete operation op2 follows op1 if the invocation
of op2 follows the response of op1 in that execution. We
further assume that each correct client invokes at most one
operation at a time (i.e., does not invoke the next operation
until it receives the response for the current operation).
We focus on robust storage with the strongest storage
progress consistency and availability semantics, namely lin-
earizability [24] (or atomicity [28]) and wait-freedom [23].
2Sharing group keys is not a requirement for the main func-
tionality of the single-writer nor the multi-writer versions of
PoWerStore. As we show in Section 5, this requirement is
only needed to prevent a speciﬁc type of DoS attack where
malicious readers exhaust the timestamp space.
Construction costs
Veriﬁcation costs
Hash-based PoW
1 hash
Polynomial-based PoW O(|t3|) modular exponentiations O(|t2|) modular exponentiations
O(|M|) modular exponentiations O(|M|) modular exponentiations
RSA signatures
1 hash
Table 1: Construction and veriﬁcation costs of our PoW instantiations. Here, t is the failure threshold, M (cid:29) t
is the modulus used in RSA signatures.
(a) Complete Write
(b) Incomplete Write
Figure 1: Complete vs.
S = 4).
Incomplete writes (t = 1,
Wait-freedom states that if a correct client invokes an oper-
ation op, then op eventually completes. Linearizability pro-
vides the illusion that a complete operation op is executed
instantly at some point in time between its invocation and
response, whereas the operations invoked by faulty clients
appear either as complete or not invoked at all.
Finally, we measure the time-complexity of an atomic stor-
age implementation in terms of number of communication
round-trips (or simply rounds) between a client and servers.
Intuitively, a round consists of a client sending the message
to (a subset of) servers and receiving replies. A formal def-
inition can be found in, e.g., [18].
3. PROOFS OF WRITING
In this section, we give the main intuition behind Proofs
of Writing (PoW) and describe two possible instantiations
of PoW: (i) a hash-based variant of PoW that oﬀers compu-
tation security, and (ii) a polynomial evaluation-based PoW
variant that provides information theoretic guarantees.
3.1
Intuition behind PoW
A distributed storage that tolerates failures and asyn-
chrony must prevent clients from blocking while waiting
for t possibly faulty servers to reply. As depicted in Fig-
ure 1(a), this implies that operations by clients must return
after probing a quorum of S − t servers. Intuitively, by look-
ing at a strict subset of the servers, a reader cannot obtain
a global view of the system state and in particular, diﬀeren-
tiate a complete write from an incomplete write.
For example, in Figure 1, reader Alice cannot tell apart
a complete write (Fig. 1(a)) where one Byzantine server
deletes the data, from an incomplete write without Byzan-
tine servers (Fig. 1(b)). To ensure strong consistency, i.e.,
that a subsequent read by Bob does not observe stale data
(Fig. 1(b)), Alice must ensure that the data she is about
to read is propagated to a suﬃcient number of servers be-
fore her read completes. Essentially, Alice must complete
the write herself by performing a data write-back, involv-
ing a full write of the data she reads [5] in both executions.
However, if she somehow knew that the write in Figure 1(a)
was in fact complete, Alice could safely skip data writeback,
since Bob would anyway observe recent data.
In the context of BFT storage, data write-backs by readers
are undesirable for two reasons: (i) the overhead of crypto-
graphic schemes related to preventing malicious readers from
exploiting such write-backs to jeopardize the storage by over-
writing data with garbage, and (ii) the inherent bandwidth
and latency cost associated with writing-back data. In addi-
tion, when combined with erasure coded storage, data write-
backs are computationally expensive since readers may need
to erasure code data.
Essentially, since the data write-back technique is driven
by readers’ uncertainty in diﬀerentiating between a complete
write and an incomplete write, we aim at an eﬃcient tech-
nique that would allow readers to tell incomplete and com-
plete writes apart. Such a technique would allow readers
to safely discard incomplete writes altogether, obviating the
need for writing-back data. Currently, the most widespread
technique to achieve this diﬀerentiation would be to have
writers send an authenticated acknowledgement (e.g., by us-
ing digital signatures) upon completion of the write.
At the heart of PoWerStore is a novel storage technique we
call Proofs of Writing (PoW) which enables to achieve this
diﬀerentiation more eﬃciently. PoW are inspired by com-
mitment schemes [21]; similar to commitment schemes, PoW
consist of two rounds: (i) in the ﬁrst round, the writer com-
mits to a random value of its choice, whereas (ii) in the sec-
ond round, the writer “opens” his commitment. Unlike com-
mitment schemes, PoW are constructed by honest writers
and stored along with the data in a set of servers, enabling
them to collectively convince a reader that the requested
data has been stored in suﬃciently many correct servers.
Furthermore, we show that PoW can be constructed with-
out relying on any public-key infrastructure while incurring
little cost when compared to digital signatures (Table 1).
PoW obviate the need for writing-back data, allowing