    def add_round_key(self, s, k):
        for i in range(4):
            for j in range(4):
                s[i][j] ^= k[i][j]
    def sr_encrypt(self, plaintext, key):
        state_matrix = text2matrix(plaintext)
        key_matrix = text2matrix(key)
        self.round_encrypt(state_matrix, key_matrix)
        return matrix2text(state_matrix)
    def round_encrypt(self, state_matrix, key_matrix):
        self.sub_bytes(state_matrix)
        self.shift_rows(state_matrix)
        self.mix_columns(state_matrix)
        self.add_round_key(state_matrix, key_matrix)
    def sr_decryptlast(self, plaintext, key):
        state_matrix = text2matrix(plaintext)
        key_matrix = text2matrix(key)
        self.add_round_key(state_matrix, key_matrix)
        self.inv_shift_rows(state_matrix)
        self.inv_sub_bytes(state_matrix)
        return matrix2text(state_matrix)
    def sr_decrypt(self, plaintext, key):
        state_matrix = text2matrix(plaintext)
        key_matrix = text2matrix(key)
        self.round_decrypt(state_matrix, key_matrix)
        return matrix2text(state_matrix)
    def round_decrypt(self, state_matrix, key_matrix):
        self.add_round_key(state_matrix, key_matrix)
        self.inv_mix_columns(state_matrix)
        self.inv_shift_rows(state_matrix)
        self.inv_sub_bytes(state_matrix)
    def sub_bytes(self, s):
        for i in range(4):
            for j in range(4):
                s[i][j] = Sbox[s[i][j]]
    def x_sub_bytes(self, s):
        s = text2matrix(s)
        self.sub_bytes(s)
        return matrix2text(s)
    def x_mix_columns(self, s):
        s = text2matrix(s)
        self.mix_columns(s)
        return matrix2text(s)
    def x_inv_sub_bytes(self, s):
        s = text2matrix(s)
        self.inv_sub_bytes(s)
        return matrix2text(s)
    def x_inv_mix_columns(self, s):
        s = text2matrix(s)
        self.inv_mix_columns(s)
        return matrix2text(s)
    def x_inv_shift_rows(self, s):
        s = text2matrix(s)
        self.inv_shift_rows(s)
        return matrix2text(s)
    def x_shift_rows(self, s):
        s = text2matrix(s)
        self.shift_rows(s)
        return matrix2text(s)
    def inv_sub_bytes(self, s):
        for i in range(4):
            for j in range(4):
                s[i][j] = InvSbox[s[i][j]]
    def shift_rows(self, s):
        s[0][1], s[1][1], s[2][1], s[3][1] = s[1][1], s[2][1], s[3][1], s[0][1]
        s[0][2], s[1][2], s[2][2], s[3][2] = s[2][2], s[3][2], s[0][2], s[1][2]
        s[0][3], s[1][3], s[2][3], s[3][3] = s[3][3], s[0][3], s[1][3], s[2][3]
    def inv_shift_rows(self, s):
        s[0][1], s[1][1], s[2][1], s[3][1] = s[3][1], s[0][1], s[1][1], s[2][1]
        s[0][2], s[1][2], s[2][2], s[3][2] = s[2][2], s[3][2], s[0][2], s[1][2]
        s[0][3], s[1][3], s[2][3], s[3][3] = s[1][3], s[2][3], s[3][3], s[0][3]
    def mix_single_column(self, a):
        # please see Sec 4.1.2 in The Design of Rijndael
        t = a[0] ^ a[1] ^ a[2] ^ a[3]
        u = a[0]
        a[0] ^= t ^ xtime(a[0] ^ a[1])
        a[1] ^= t ^ xtime(a[1] ^ a[2])
        a[2] ^= t ^ xtime(a[2] ^ a[3])
        a[3] ^= t ^ xtime(a[3] ^ u)
    def mix_columns(self, s):
        for i in range(4):
            self.mix_single_column(s[i])
    def inv_mix_columns(self, s):
        # see Sec 4.1.3 in The Design of Rijndael
        for i in range(4):
            u = xtime(xtime(s[i][0] ^ s[i][2]))
            v = xtime(xtime(s[i][1] ^ s[i][3]))
            s[i][0] ^= u
            s[i][1] ^= v
            s[i][2] ^= u
            s[i][3] ^= v
        self.mix_columns(s)