available to the adversary to inject energy becomes too small,
signiﬁcantly reducing its chances of success.
The room-per-pulse, R, available to the adversary to enlarge
the distance thus lies in-between the received signal and Γ,
and is calculated in dB as:
R = f (D1 + D2)− ( f (D1) + E)
(11)
where E represents other channel degrading factors, and the
distances D1 and D2 (in meters) are respectively the true
distance between both devices, and the extra distance the
adversary intends to add. This room is thus expressed as:
ζ = 10R/10
(12)
Figure 10 plots ζ at various distance ratios D2/D1.
Recall that the adversary may succeed to annihilate some
of the pulses falling in Binα. But since Binβ in the authentic
code have nothing but noise, adding pulses into those will
result in an increase in the overall aggregate energy. As such,
this available energy room in (11) by itself does not give a
perfect indication to the adversary’s chances of success.
4.5 A Numerical Example
Figure 11 shows an example veriﬁcation code, expanded from
Fig. 6, where the adversary injects k = 10 random-phased
pulses. For simplicity, the ﬁgure assumes N = 0. If the dis-
tance between the sender and receiver is D1 = 4 m, and the
adversary is trying to enlarge it by D2 = 4.5 m to make it
D1 + D2 = 8.5 m, and assuming (λsent)2 = 7.6 µW , then the
receiver expects a best case received power of:
(λb)2 = (λsent)2 10 f (D1+D2)/10
= 7.67× 10 f (8.5)/10 = 2.4 µW
(13)
80    28th USENIX Security Symposium
USENIX Association
Sent (after path loss):
Adversary injects:
Receiver gets:
1
0
1
1
2
-1
1
0
3
0
4
0
0
0
5
0
-1
-1
6
-1
-1
7
1
1
2
8
0
-1
-1
9
0
1
1
10
0
11
0
0
0
12
0
-1
-1
13
1
1
2
14
0
15
-1
16
0
0
-1
0
17
0
-1
-1
18
0
-1
Γ = α (λb)2 = 12 µW
k = 10 pulses
-1 α(λreceived)2 = 17µW
Figure 11: An example of the random-phased Binα pulses (dark gray) reordered following the permutation in Fig. 6. After the
adversary injects k = 10 random-phased pulses at random positions, the receiver will get the summation at each pulse position.
From (10) at N = 0 and α = 5 (as in Fig. 11), it then calculates
the threshold as:
Γ = α (λb)2 = 12 µW
At E = −10 dB, the actual signals are received as:
(λw)2 = (λsent)2 10( f (D1)+E)/10 ≈ 1 µW
(14)
(15)
Now assuming the adversary is D3 = 6 m away from the
receiver, and uses a random-phased pulse with transmission
power of (λadversary
)2 = 15.77 µW . At E = −10 dB, the re-
ceiver would receive the adversary’s signals as:
sent
(λ(cid:48))2 = (λadversary
sent
)2 10( f (D3)+E)/10 ≈ 1 µW
(16)
So in the best case for the adversary, where the signal is
highly deteriorated, the adversary would then have a per-pulse
room of R = 3.45 dB to add energy, which amounts to 7 µW
more, i.e., up to Γ = 12µW . In Fig. 11, after the adversary
injects its k = 10 pulses at the example random positions and
with the random phases shown, it results in annihilating a
single pulse (at position 2), amplifying two pulses (at posi-
tions 7 and 13), and adding seven more 1 µW pulses for an
increase of the overall aggregate to be 17 µW . This exceeds
Γ = 12 µW , and this attack would thus be detected.
5 Evaluation
We evaluate UWB-ED by deriving the probability of success
for an adversary enlarging the distance. We also validate that
model using simulations in Section 5.2.
5.1 Probability of a Successful Attack
The adversary hides the authentic code by having the aggre-
gate of the r pulses that the receiver chooses from Binβ exceed
Binα. The adversary must also avoid injecting too much en-
ergy to not exceed Γ. Not knowing which pulse belongs to
which bin, the adversary injects k pulses at random positions
thus affecting k of the n pulses in the code.
To that end, the probability of mounting a successful attack,
Psa, is the intersection of the probability of two events (the
checks in Fig. 8): the aggregate of the energy pulses chosen
from Binβ (bβ) exceeds that of Binα (bα), and the added
energy is ≤ Γ:
Psa(α,β,r,Γ,k) = Pbβ>bα(α,β,r,k)∩ P≤Γ(α,β,k)
(17)
5.1.1 Probability of successfully evading the Robust
Code Veriﬁcation check (Pbβ>bα)
To evade this, the adversary must have an energy aggregated
from Binβ exceed Binα. When the adversary injects k pulses
into the channel, x will fall into Binα, and the remaining k− x
into Binβ. Pbβ>bα is then the probability of this distribution
occurring multiplied by the probability of the attack succeed-
ing under this distribution, for all possible such distributions
0 ≤ x ≤ α and 0 ≤ k − x ≤ β. To calculate the probability
of the distribution occurring, consider the general case of a
bucket containing two types of objects (e.g., colored pearls): I
of the ﬁrst type, and J of the second. If ψ objects are selected
at random, the probability that i and j of the ψ are respectively
of the ﬁrst and second type (i + j = ψ) is:
(18)
where(cid:0)n
i(cid:1)(cid:0)J
(cid:0)I
j(cid:1)
(cid:0)I+J
i+ j(cid:1)
r(cid:1) denotes n choose r and is given by:
r(cid:19) =
(cid:18)n
r!(n− r)! , 0 ≤ r ≤ n
otherwise
n!
0,
Similarly, the probability that x and k− x of the adversary’s
k pulses respectively affect the α in Binα and β in Binβ is:
For all possible such distributions, we have:
Pbβ>bα(α,β,r,k) =
(cid:0)α
x(cid:1)(cid:0) β
k−x(cid:1)
(cid:0)α+β
k (cid:1)
x=0(cid:32)pα,β,r,k(x)·(cid:0)α
k (cid:1) (cid:33) (19)
x(cid:1)(cid:0) β
k−x(cid:1)
(cid:0)α+β
α
∑
where pα,β,r,k(x) is the probability bβ > bα given the adver-
sary affected x and k− x pulses in Binα and Binβ respectively.
To derive pα,β,r,k(x), we assume for simplicity a unity
power-per pulse, i.e., the sender’s and the adversary’s pulses
USENIX Association
28th USENIX Security Symposium    81
reach the receiver after path loss and other factors at a con-
stant energy of ±1µW .2 This is similar to the example given
in Fig. 11. Every adversary-added pulse in Binβ will result
in a 1 µW of added energy from the receiver’s point of view
since the receiver’s aggregation is agnostic to a pulse’s phase.
For Binα, after the adversary affects x pulses, some will be
annihilated while others will be ampliﬁed. From the receiver’s
point of view, after the adversary’s pulses are injected, Binα
will have a mix of 22 = 4µW and 0 µW (adversary-affected)
pulses, as well as the original 1 µW unaffected pulses.
More 0 µW (annihilated) pulses in Binα raises the chances
that bβ > bα, which is in the adversary’s favor. Since every
affected pulse in Binα will either result in a 0 µW or a 4 µW
pulse, there are 2x possible outcomes. Of those, there are
the x adversary-injected pulses that fell in Binα result in a
(cid:0)x
g(cid:1) ways that g 0 µW pulses will occur. The probability that
g(cid:1)/(2x). For all possible num-
annihilation of g pulses is thus(cid:0)x
bers of annihilated pulses 0 ≤ g ≤ x, the adversarial success
probability in the event that x fell in Binα is:
pα,β,r,k(x) =
x
g(cid:1)2x (cid:33)
g=0(cid:32)pα,β,r,k,x(g)·(cid:0)x
∑
(20)
where pα,β,r,k,x(g) is the probability bβ > bα given g annihi-
lated pulses in Binα.
When Binα has g annihilated (0 µW ), x− g ampliﬁed (4
µW ), and α− x unaffected pulses (1 µW ), the probability of
bβ > bα in the event x fell in Binα, and g of the x pulses were
annihilated is the probability that an aggregate of m− 1 is
chosen from Binα and an aggregate of ≥ m is chosen from
Binβ. For each possible 0 ≤ y1,y2 ≤ r, we have:
pα,β,r,k,x(g) =
∑
y1=0
r
r
r
·
∑
i=m(cid:0)k−x
∑
y2=0(cid:32)(cid:0) g
y2(cid:1)(cid:0) α−x
y1(cid:1)(cid:0)x−g
r−y1−y2(cid:1)
(cid:0)α
r(cid:1)
i (cid:1)(cid:0)β−(k−x)
r−i (cid:1)
(cid:0)β
r(cid:1)
m = 02 × y1 + 22 × y2 + 12 × (r− (y1 + y2)) + 1
= r− y1 + 3y2 + 1
where m is:
(cid:33)
(21)
(22)
At r = α (i.e., selecting all Binα pulses) and α ≤ β, we get:
(23)
pα,β,r,k,x(g) =
r
i=m(cid:48)(cid:0)k−x
∑
i (cid:1)(cid:0)β−(k−x)
r−i (cid:1)
(cid:0)β
r(cid:1)
where m(cid:48) is:
m(cid:48) = 22 × (x− g) + 12 × (α− x) + 1
= 4(x− g) + (α− x) + 1
(24)
Figure 12 plots Pbβ>bα, where α = 50. From these results,
increasing β is not necessarily effective for the Robust Code
2Analogous analysis applies for non-constant energy.
1
)
α
b
>
β
b
P
(
y
t
i
l
i
b
a
b
o
r
P
0
0
r=1
r=4
r=2
r=8
50
100
# of adversary pulses (k)
1
)
α
b
>
β
b
P
(
y
t
i
l
i
b
a
b
o
r
P
0
150
0
r=1
r=4
r=2
r=8
20
40
# of adversary pulses (k)
60
(a) β = 100
(b) β = 10
Figure 12: Probability that the Robust Code Veriﬁcation check
fails to detect the adversary’s attack, plotted using (19) in
Section 5.1.1, at α = 50 and 0 ≤ k ≤ α + β.
Veriﬁcation check to detect attacks, since the adversary main-
tains its success probability by increasing k proportionally;
there is a visually similar pattern of adversarial success proba-
bility in both Fig. 12a and 12b. As such, the advantage of the
empty pulses in Binβ does not quite manifest in the Robust
Code Veriﬁcation check, rather the Attack Plausibility check.
Another observation is that higher r lowers the adversary’s
success probability. For example at β = 100 (Fig. 12a), the
adversary has a 27% chance at r = 2 (which occurs at k =
135), versus 5.85% at r = 8 (at k = 130). In Section 5.1.3, we
show that at r = α, we get the optimal security results.
5.1.2 Final Probability of Adversary’s Success
In (17), the event that the aggregate energy after the adver-
sary’s pulses is ≤ Γ and the event that bβ > bα are dependent,
and thus their intersection is not their product. Recall that in
(20), g is the number of annihilated pulses, x−g is the number
of ampliﬁed pulses in Binα, and k− x is the number of added
pulses in Binβ. The aggregate-energy does not exceed Γ when
the adversary’s pulses satisfy the inequality:
(k− x) (λ(cid:48) + N)2 + (x− g) (λ(cid:48) + λw + N)2+
(α− x) (λw + N)2 + (β− (k− x) + g) (N)2 ≤ Γ
(25)
where λ(cid:48) is deﬁned as in (16), and Γ in (10).
If the adversary uses a variable pulse power randomly cho-
sen from a distribution with a mean much different from λw,
authentic pulses colliding with their reciprocal will not be
fully annihilated. The adversary thus sets its power such that
its mean at the receiver matches the sender, i.e., (λ(cid:48))2 = (λw)2.
Assuming (λw)2 = (λ(cid:48))2 in (25), we get:
α λ2
b − ε
λ2
w
k + 2x− 4d + α ≤
(26)
where ε is a representation of noise, and evaluates to:
ε = N (λw (2k + 2α− 4g)− λb(2α))
82    28th USENIX Security Symposium
USENIX Association
As ε → 0, (26) becomes:
k + 2x− 4d ≤ α(cid:18) λ2
b
λ2
w − 1(cid:19)
From (13) and (15), we have: