observed service times in TW . Indeed, whenever speciﬁc
information on the workload processed by a system is avail-
able, these values can be increased or decreased according
to the characteristics of the workload. The threshold LT is
updated by assuming that the value of the conditional prob-
ability P [L|L]j at some large lag j is representative of the
overall tendency of the system to delay jobs.
In the implementation considered in the paper, we adjust
the parameter k which deﬁnes LT = µ−1(1 + k · CV ) with
1. initialize: µ ← 0, CV ← 0, k ← 1, and adj ← 0.5;
2. set LT ← µ−1(1 + k · CV );
3. for each request in a updating window TW do
a. upon each job completion at the autocorrelated server
I.
compute observed conditional probabilities:
P [L|L]j, for 1 ≤ j  LTmax, then LT ← LTmax;
V.
if LT < LTmin, then LT ← LTmin;
Figure 2. Description of how to self-adjust LT .
step adj according to the following scheme. Let QT be the
current queue-length at the server with SWAP scheduling.
We evaluate P [L|L]j for the large lag j = ⌊QT /2⌋ and
if P [L|L]j ≥ P [S|L]j, then SWAP is assumed to be too
aggressive, since it may delay at the next round1 a number
of jobs up to ⌊QT /2⌋. In this case we set k = k + adj,
which reduces the number of jobs identiﬁed to be long. A
similar procedure is performed for the case j = ⌊QT /10⌋,
where if P [L|L]j ≥ P [S|L]j, we conventionally assume
that SWAP is too conservative; in this case we set k =
k − adj which increases the number of jobs estimated as
large. Throughout experiments we have always observed
that the LT online algorithm does not show instability prob-
lems and always provide effective choices of LT which lead
to consistent performance gains as discussed in the next sec-
tion.
3 Performance Evaluation of SWAP
In this section, we present representative case studies il-
lustrating the effectiveness and the robustness of SWAP. For
all simulations, we generate the service time traces with 10
million samples. Simulations stop only after all the ser-
vice times have been used. Throughout all experiments, we
stress that SWAP never changes the statistical distribution
of the service times and the ratio between long and short
jobs. Instead, SWAP only reorders the service times while
keeping the distribution intact. We stress that although we
1Here we implicitly assume that the conditional probabilities P [L|L]
are decreasing in j which indeed is the typical case for workloads where
large service times are a minority compared to the small service times.
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE339DSN 2008: Mi et al.F
C
A
 0.5
 0.45
 0.4
 0.35
 0.3
 0.25
 0.2
 0.15
 0.1
 0.05
 0
−0.05
ACF1
ACF2
ACF3
 1  100  200  300  400  500  600  700  800  900  1000
lag(k)
Figure 3. The ACF of the service process that gener-
ates the autocorrelated ﬂows in the system, where the ser-
vice times are drawn from MMPP(2) with ACF1, ACF2 and
ACF3, respectively.
simulate a closed system with jobs that cycle in the two
servers, every time when a job arrives in a service station
we cast a random number to generate its service time. Thus,
in our simulations we never re-cycle short jobs and never
change the distribution of service times.
We use simulation to evaluate the performability im-
provement of SWAP in a network with M ﬁrst-come-ﬁrst-
served (FCFS) servers in series. We assume that there is
only one server with temporal dependence in its service pro-
cess and denote that queue as QACF . Throughout experi-
ments, the service process at QACF is always a two-state
Markov-Modulated Poisson Process (MMPP(2)) [13] with
identical distribution having mean rate µ = 1 and squared
coefﬁcient of variation CV 2 = 20. Let ρj be the lag-j auto-
correlation coefﬁcient. For the MMPP(2) we consider three
different autocorrelation proﬁles:
• ACF1: ρ1 = 0.47 decays to zero beyond lag j = 1400;
• ACF2: ρ1 = 0.46 decays to zero beyond lag j = 240;
• ACF3: ρ1 = 0.45 decays to zero beyond lag j = 100.
Figure 3 shows the ACF for the three proﬁles. These ACFs
are typical and representative of real workloads measure-
ments in storage systems [14], multi-tier architectures [12],
Exp,
and grids [9]. The other M − 1 queues, denoted as Qi
have exponentially distributed service times with mean rate
λi, 1 ≤ i < M . We focus on the case where a constant
workload of N requests circulates in the network, i.e., the
model is a closed queueing network. Simple networks of
this type are often used to model real systems, e.g., multi-
tier architectures [11, 16].
3.1 Performance Improvement
We ﬁrst simulate a network with two queues: the expo-
nential queue Q1
Exp has mean service rate λ1 = 2; the auto-
correlated queue QACF uses the MMPP(2) described above
with autocorrelation structure ACF1. The model population
is set to N = 500, the delay limit is D = 100. Sensitivity
to the most important experiment parameters is explored in
the next subsections.
We compare system capacity under SWAP as measured
by the system throughput with the throughputs observed
when QACF uses FCFS or SJF scheduling. Indeed, larger
throughput means that the system can sustain more load and
it is protected from the degradation of sudden bursts of re-
quests, which improves the overall availability of the sys-
tem. FCFS performance is used for a baseline in compari-
son. We recall that our stated goal is to show that SWAP is
competitive to SJF which would show that the knowledge
required by SJF can be inferred effectively from the tempo-
ral dependence of workloads.
FCFS
SWAP
SJF
TPUT
% improv.
0.71 job/sec
0.92 job/sec
1.01 job/sec
baseline
29.6%
40.8%
Table 1. Mean system throughput (TPUT) and relative
improvement over FCFS for a network with M = 2 queues,
N = 500 jobs, λ1 = 2 and autocorrelation proﬁle ACF1.
Overall RTT
short RTT
long RTT
FCFS
701 sec
548 sec
3326 sec
SWAP
540 sec
314 sec
4279 sec
SJF
473 sec
70 sec
7270 sec
Table 2. Mean round trip time (RTT) of all jobs, short
jobs, and long jobs, for a network with M = 2 queues,
N = 500 jobs, λ1 = 2 and autocorrelation proﬁle ACF1.
Table 1 shows the mean throughput of the different poli-
cies and the relative improvement with respect to FCFS.
Throughput is measured at an arbitrary point of the net-
work, since for the topology under consideration through-
put at steady state must be identical everywhere [4]. The
table shows that, although we are not reducing the overall
amount of work processed by the system, both with SJF and
SWAP the capacity is signiﬁcantly better than with FCFS.
Noticeably, SJF and SWAP perform closely, thus suggest-
ing that the SWAP approximation of SJF is very effective.
Table 2 further presents the mean round trip times
(RTTs) of short and long jobs. The mean round trip times of
all jobs for different policies are presented as well. Round
trip time is measured as the sum of response times at all M
queues. Table 2 shows that under both SJF and SWAP poli-
cies, the overall performance is signiﬁcantly better than un-
der FCFS. Because of the inexact information used, SWAP
does not improve the performance of short jobs as much as
SJF does. On the other hand, SWAP does not degrade the
performance of long jobs as worse as the SJF does. By giv-
ing the higher priority to short jobs, SJF achieves the long
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE340DSN 2008: Mi et al.)
%
(
f
d
c
c
 100
 10
 1
 0.1
 0.01
 0.001
(a)
F
C
A
(b)
 0.5
 0.45
 0.4
 0.35
 0.3
 0.25
 0.2
 0.15
 0.1
 0.05
 0
FCFS
SWAP
SJF
 1
 10
 100  1000  1e4  1e5  1e6  1e7
round trip time
FCFS
SWAP
SJF
 0  100  200  300  400  500  600  700  800  900 1000
lag(k)
Figure 4. Comparative evaluation of SWAP, SJF and
FCFS: (a) CCDF of RTTs, (b) autocorrelation (ACF) of ser-
vice times at QACF .
tail in the distribution of round trip times for long jobs.
Further conﬁrmation of this intuition comes from Figure
4(a), which shows the complementary cumulative distribu-
tion function (CCDF) of the round trip times (RTTs), i.e.,
the probability that the round trip times experienced by in-
dividual jobs are greater than the value on the horizontal
axis. The plot shows that the largest part of job experiences
the lowest RTTs when the scheduling is SJF or SWAP. In-
deed, the part of the workload whose execution is delayed
at QACF receives increased response times, but the num-
ber of penalized requests amounts to less than 3% of the
total. Observe also that the performance of SJF and SWAP
is extremely close. The only signiﬁcant difference is that in
SJF a small fraction of jobs (less than 0.5%) receives much
worse RTTs than in SWAP. We attribute such difference to
the unavoidable forecasting errors in SWAP, which may oc-
casionally fail in identifying jobs as long also if their ac-
tual service requirement is large, thus resulting in a smaller
CCDF tail than SJF.
Other interesting observations arise from Figure 4(b).
This ﬁgure shows the autocorrelation of the service times at
QACF under the different scheduling disciplines. Temporal
dependence is much less pronounced under SJF and SWAP,
thus suggesting that both techniques are able to break the
strong temporal locality of the original process.
3.2 Sensitivity to Device Relative Speeds
From now on, we investigate the robustness of SWAP
performance to changes in the experimental parameters. We
ﬁrst focus on evaluating networks with varying process-
ing speeds, i.e., we consider the model in Section 3.1 and
vary the service rate at the exponential queue Q1
Exp while
t
u
p
h
g
u
o
r
h
t
 1.1
   1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
FCFS
SWAP
SJF
40.8% 15.1% 16.2%
29.6%
52.7%
29.8%
Exp1
Exp2
Exp5
Figure 5. Sensitivity to service process ratio in a network
with M = 2, N = 500, and ACF1. The numbers on the
top of bars are the improvements with respect to FCFS.
keeping ﬁxed the speed at QACF . Figure 5 presents the
average system throughput for three experiments, labeled
Exp1, Exp2, and Exp5, where we set λ = 1, 2, and 5,
respectively. For ease of comparison, and only for this ex-
periment, we have rescaled in experiments the mean service
rate at QACF to µ = 2. Thus, in Exp1 the slowest bottle-
neck queue is Q1
Exp, in Exp2 the two queues have identical
speed, while in Exp5 the bottleneck is QACF . The relative
capacity improvement with respect to FCFS scheduling is
marked above each bar in the ﬁgure. The interpretation of
the experimental results leads to the following observations.
First, SWAP improves the system throughput across all
experiments and is better for smaller values of λ. The in-
tuition behind this result is that if Q1
Exp is the bottleneck,
then delaying a job produces less overhead, i.e., a job put in
the tail of QACF can yet reach the head of the queue quite
rapidly since most of the network population is enqueued at
the other resource Q1
Exp. In this way, the cost of delaying
becomes negligible and the network can beneﬁt more of the
reordering of jobs sizes.
A second important observation is that, as λ increases,
SWAP performance converges to SJF performance. This
suggests that SWAP forecasting is very accurate since in
Exp5 almost all population in the network is queueing at
QACF and SJF sorts nearlt perfectly a large population
close to N jobs according to their exact size. The fact that
SWAP achieves similar performance indicates that the same
accurate ordering is obtained if forecasting is based on tem-
poral dependence.
As a ﬁnal remark, it is interesting to observe that SWAP
can be more effective than hardware upgrades. For instance,
the throughput under SWAP in Exp2 (white bar, Exp2)
is more than the expected throughout with FCFS in Exp5
(black bar, Exp5). That is, under temporal dependent work-
loads, it can be more effective to adopt SWAP than doubling
the hardware speed of Q1
Exp.
We conclude the experiment showing in Figure 6 the
CCDF of RTTs for the previous experiments. The CCDF
tail behavior observed in the previous subsection persists
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE341DSN 2008: Mi et al.(a) Exponential service rate 1