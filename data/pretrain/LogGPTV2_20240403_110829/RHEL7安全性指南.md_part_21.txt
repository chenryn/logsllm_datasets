```
:::
:::
::: section
::: titlepage
#### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#Removing_a_Custom_Rule_Using_the_Direct_Interface}4.5.14.6.2. 用直接接口移除一个自定义规则 {.title}
:::
::: para
以 `root`{.systemitem} 用户身份按照以下格式发布一个命令，从
["[IN_public_allow]{.quote}"]{.quote} 链移除一个自定义规则：
``` screen
~]# firewall-cmd --direct --remove-rule ipv4 filter IN_public_allow \
      0 -m tcp -p tcp --dport 666 -j ACCEPT
```
:::
:::
::: section
::: titlepage
#### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#Listing_Custom_Rules_Using_the_Direct_Interface}4.5.14.6.3. 用直接接口列出自定义规则 {.title}
:::
::: para
以 `root`{.systemitem} 用户身份按照以下格式发布一个命令，列出
["[IN_public_allow]{.quote}"]{.quote} 链中的规则：
``` screen
~]# firewall-cmd --direct --get-rules ipv4 filter IN_public_allow
```
:::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#Configuring_Complex_Firewall_Rules_with_the_Rich-Language_Syntax}4.5.15. 给复杂防火墙规则配置"Rich Language\" 语法 {.title}
:::
::: para
通过 ["[rich language]{.quote}"]{.quote}
语法，可以用比直接接口方式更易理解的方法建立复杂防火墙规则。此外，还能永久保留设置。这种语言使用关键词值，是
[**iptables**]{.application}
工具的抽象表示。这种语言可以用来配置分区，也仍然支持现行的配置方式。
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#Format_of_the_Rich_Language_Commands}4.5.15.1. 多语言命令的格式 {.title}
:::
::: para
在这个部分，所有命令都必须以 `root`{.systemitem}
用户身份运行。增加一项规则的命令格式如下：
``` synopsis
firewall-cmd [--zone=zone] --add-rich-rule='rule' [--timeout 9=seconds]
```
这样将为 *zone* 分区增加一项多语言规则 *rule*
。这个选项可以多次指定。如果分区被省略，将使用默认分区。如果出现超时，规则将在指定的秒数内被激活，并在之后被自动移除。
:::
::: para
移除一项规则：
``` synopsis
firewall-cmd [--zone=zone] --remove-rich-rule='rule'
```
这将为 *zone* 分区移除一项多语言规则 （*rule*）
。这个选项可以多次指定。如果分区被省略，将使用默认分区。
:::
::: para
检查一项规则是否存在：
``` synopsis
firewall-cmd [--zone=zone] --query-rich-rule='rule'
```
这将复查是否已经为区域（*zone*） 增加一个多语言规则 （*rule*）
。如果可用，屏幕会显示 `yes`{.literal}，退出状态为 `0`{.literal}；
否则，屏幕显示 `no`{.literal}，退出状态为 `1`{.literal}。如果省略
zone，默认区域将被使用。
:::
::: para
使用在分区配置文件里的多语言表述的相关信息，可查阅
`firewalld.zone(5)`{.filename} 说明。
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#Understanding_the_Rich_Rule_Structure}4.5.15.2. 理解多规则结构 {.title}
:::
::: para
多规则命令的格式或结构如下所示：
``` screen
rule [family=""]
    [ source address="" [invert="True"] ]
    [ destination address="" [invert="True"] ]
    [  ]
    [ log [prefix=""] [level=""] [limit value="rate/duration"] ]
    [ audit ]
    [ accept|reject|drop ]
```
:::
::: para
一个规则是关联某个特定分区的，一个分区可以有几个规则。如果几个规则互相影响或者冲突，则执行和数据包相匹配的第一个规则。如果提供了规则系列，它可以是
`ipv4`{.literal} 或者 `ipv6`{.literal} 。规则系列把规则限定在
`IPv4`{.systemitem} 或 `IPv6`{.systemitem} 。如果没有提供规则系列， 将为
`IPv4`{.systemitem} 和 `IPv6`{.systemitem}
增加规则。如果源地址或者目标地址在一个规则中被使用，那么必须提供规则系列。端口转发也存在这种情况。
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#Understanding_the_Rich_Rule_Commands}4.5.15.3. 理解多规则命令 {.title}
:::
::: variablelist
[`source`{.option}]{.term}
:   ::: para
    通过制定源地址，一个尝试连接的源头可以被限制在源地址中。一个源地址或者地址范围是一个为
    `IPv4`{.systemitem} 或者 `IPv6`{.systemitem} 做掩护的 IP
    地址或者一个网络 IP 地址。网络系列（ `IPv4`{.systemitem} 或
    `IPv6`{.systemitem} ）将被自动覆盖。针对 `IPv4`{.systemitem}
    的伪装可以是一个网络伪装或者一个普通数字。针对 `IPv4`{.systemitem}
    的伪装是一个简单数字。不支持使用主机名。可以通过增加
    `invert`{.option}=\"*true*\" 或 `invert`{.option}=\"*yes*\"
    来颠倒源地址命令的意思。所有提供的地址都匹配。
    :::
[`destination`{.option}]{.term}
:   ::: para
    通过制定目的地址，目标可以被限制在目的地址中。目标地址使用跟源地址相同的语法。原地址和目标地址的使用是有选择的，不可能目标地址的所有要素都使用。这取决于目标地址的使用，例如在服务项中，这个要素只可以是以下要素类型之一：
    `service`{.literal} ， `port`{.literal} ， `protocol`{.literal} ，
    `masquerade`{.literal} ， `icmp-block`{.literal} 和
    `forward-port`{.literal} 。
    :::
[`service`{.option}]{.term}
:   ::: para
    服务名称是 [**firewalld**]{.application}
    提供的其中一种服务。要获得被支持的服务的列表，输入以下命令：
    `firewall-cmd --get-services`{.command}
    。如果一个服务提供了一个目标地址，它将和规则中的目标地址冲突，并且导致一个错误。使用内部目的地址的服务大多是使用了多路传送的服务。命令为以下形式：
    ``` synopsis
    service name=service_name
    ```
    :::
[`port`{.option}]{.term}
:   ::: para
    端口既可以是一个独立端口数字，又或者端口范围，例如，5060-5062。协议可以指定为
    `tcp`{.literal} 或 `udp`{.literal} 。命令为以下形式：
    ``` synopsis
    port port=number_or_range protocol=protocol
    ```
    :::
[`protocol`{.option}]{.term}
:   ::: para
    协议值可以是一个协议 ID 数字，或者一个协议名。预知可用协议，请查阅
    `/etc/protocols`{.filename}。命令为以下形式：
    ``` synopsis
    protocol value=protocol_name_or_ID
    ```
    。
    :::
[`icmp-block`{.option}]{.term}
:   ::: para
    用这个命令阻绝一个或多个 `ICMP`{.systemitem} 类型。
    `ICMP`{.systemitem} 类型是 [**firewalld**]{.application} 支持的
    `ICMP`{.systemitem} 类型之一。要获得被支持的 `ICMP`{.systemitem}
    类型列表，输入以下命令：
    ``` screen
    ~]$ firewall-cmd --get-icmptypes
    ```
    在此，指定一个动作是不被允许的。`icmp-block`{.command} 在内部使用
    `reject`{.literal} 动作。命令为以下形式：
    ``` synopsis
    icmp-block name=icmptype_name
    ```
    :::
[`masquerade`{.option}]{.term}
:   ::: para
    打开规则里的 IP
    伪装。用源地址而不是目的地址来把伪装限制在这个区域内。在此，指定一个动作是不被允许的。
    :::
[`forward-port`{.option}]{.term}
:   ::: para
    从一个带有指定为 `tcp`{.literal} 或 `udp`{.literal}
    协议的本地端口转发数据包到另一个本地端口，或另一台机器，或另一台机器上的另一个端口。
    `port`{.option} 和 `to-port`{.option}
    可以是一个单独的端口数字，或一个端口范围。而目的地址是一个简单的 IP
    地址。在此，指定一个动作是不被允许的。 `forward-port`{.command}
    命令使用内部动作 `accept`{.literal} 。这个命令为以下形式：
    ``` screen
    forward-port port=number_or_range protocol=protocol /
                to-port=number_or_range to-addr=address
    ```
    :::
[`log`{.option}]{.term}
:   ::: para
    注册含有内核记录的新的连接请求到规则中，比如系统记录。您可以定义一个前缀文本------可以把记录信息作为前缀加入。记录等级可以是
    `emerg`{.literal} 、 `alert`{.literal} 、 `crit`{.literal} 、
    `error`{.literal} 、`warning`{.literal} 、 `notice`{.literal} 、
    `info`{.literal} 或者 `debug`{.literal}
    中的一个。可以选择记录的用法，可以按以下方式限制注册：
    ``` synopsis
    log [prefix=prefix text] [level=log level] limit value=rate/duration
    ```
    等级用正的自然数 \[1, ..\] 表达，持续时间的单位为 `s`{.literal} 、
    `m`{.literal} 、 `h`{.literal} 、 `d`{.literal} 。 `s`{.literal}
    表示秒， `m`{.literal} 表示分钟， `h`{.literal} 表示小时，
    `d`{.literal} 表示天。最大限定值是 `1/d`{.literal}
    ，意为每天最多有一条日志进入。
    :::
[`audit`{.option}]{.term}
:   ::: para
    审核为发送到 `auditd`{.systemitem}
    服务的审核记录来注册提供了另一种方法。审核类型可以是
    `ACCEPT`{.literal} 、 `REJECT`{.literal} 或 `DROP`{.literal}
    中的一种，但不能在 `audit`{.command}
    命令后指定，因为审核类型将会从规则动作中自动收集。审核不包含自身参数，但可以选择性地增加限制。审核的使用是可选择的。
    :::
[`accept|reject|drop`{.option}]{.term}
:   ::: para
    可以是 `accept`{.option} 、`reject`{.option} 或 `drop`{.option}
    中的一个行为。规则中仅仅包含一个要素或者来源。如果规则中包含一个要素，那么行为可以处理符合要素的新连接。如果规则中包含一个来源，那么指定的行为可以处理来自源地址的一切内容。
    ``` synopsis
    accept | reject [type=reject type] | drop
    ```
    选择 `accept`{.option} 所有新的连接请求都会被允许。选择
    `reject`{.option}
    ，连接将被拒绝，连接来源将接到一个拒绝信息。拒绝的类型可以被设定为使用另一种值。选择
    `drop`{.option} ，
    所有数据包会被丢弃，并且不会向来源地发送任何信息。
    :::
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#Using_the_Rich_Rule_Log_Command}4.5.15.4. 使用多规则登录命令 {.title}
:::
::: para
使用 [**Netfilter**]{.application}
登录目标可以完成登录，也可以使用审核目标。用
["[*zone*\_log]{.quote}"]{.quote} 格式命名的新链可以加入到所有分区，其中
*zone* 为该分区名。在 `deny`{.literal}
链之前进行该项处理，以便获得适当的排序。根据规则的行为，整个规则或者部分规则会按照规则被分别放置在独立链中，如下所示：
:::
``` screen
zone_log
zone_deny
zone_allow
```
::: para
所有登录规则将放在 ["[*zone*\_log]{.quote}"]{.quote}
链中，这会最先被解析。所有 `reject`{.literal} 和 `drop`{.literal}
规则都被放置在 ["[*zone*\_deny]{.quote}"]{.quote}
链，在登录链之后被解析。所有 `accept`{.literal} 规则被放在
["[*zone*\_allow]{.quote}"]{.quote} 链里，它将在 `deny`{.literal}
链之后被解析。如果规则中既包含了 `log`{.literal} ，又有 `deny`{.literal}
或者 `allow`{.literal} ，各部分将被放在相应的链中。
:::
::: section
::: titlepage
#### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#Using_the_Rich_Rule_Log_Command_Example_1}4.5.15.4.1. 多规则登录命令使用示例 1 {.title}
:::
::: para
为认证报头协议 `AH`{.systemitem} 使用新的`IPv4`{.systemitem} 和
`IPv6`{.systemitem} 连接：