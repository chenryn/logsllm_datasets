# 【技术分享】OS X内核大揭秘之基础篇
|
##### 译文声明
本文是翻译文章，文章来源：theori.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[天鸽](http://bobao.360.cn/member/contribute?uid=145812086)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
****
传送门
[【技术分享】OS X内核大揭秘之利用篇](http://bobao.360.cn/learning/detail/4500.html)
**前言**
虽然近年来的许多研究都集中在 Windows 操作系统上，但在安全性方面，iPhone 上的 iOS 和 MacBook 上的 macOS
操作系统也不容忽视。在本系列博客中，我们将探讨 OS X 内核中的 bug 分析和漏洞利用技术。
**  
**
**（１）寻找内核bug**
我们可以使用模糊测试和代码审计的方法找到在内核级执行中的 bug，如 **BSD** 、 **Mach** 和 **IOKit** 。
**BSD：** 内核的 BSD 部分提供了大多数系统调用、网络和文件系统的功能。源自 FreeBSD 5。
**Mach：** 来自 CMU 开发的 Mach 3.0 微内核。实现了内核映射和 IPC 等基本服务。用户空间应用程序可以通过 Mach Trap 访问
Mach 服务。
**IOKit：** IOKit 是一个用 C++ 编写的框架，它为 XNU 提供了驱动程序，而 Apple 提供了自己的运行时系统 libkern。
**  
**
**（２）初步利用**
任意读／写可用于获取利用此漏洞必要的数据，或者在内核区域中创建任意数据。
由于每个 bug 都有自己独特的数据，所以应该读／写可以用于该漏洞利用的数据。
**  
**
**（３）内核权限获取和AAR/AAW**
为了获得 **kernel_task** (pid=0) 权限所需的值，我们先遍历内核中的所有进程以获取 ipc object 和 kernel
task，然后将数据转储到用户空间。
你可以使用它进行内核级的读／写。
**  
**
**（４）获得root权限**
由于每个进程都被加载到内核内存中，所以我们可以捕获目标进程，并将下面的进程权限结构的 CR_RUID(Credential Real UID) 更改为 0。
    [bsd/sys/ucred.h]
    /*
     * In-kernel credential structure.
     *
     * Note that this structure should not be used outside the kernel, nor should
     * it or copies of it be exported outside.
     */
    struct ucred {
        TAILQ_ENTRY(ucred)  cr_link; /* never modify this without KAUTH_CRED_HASH_LOCK */
        u_long  cr_ref;         /* reference count */
    struct posix_cred {
        /*
         * The credential hash depends on everything from this point on
         * (see kauth_cred_get_hashkey)
         */
        uid_t   cr_uid;         /* effective user id */
        uid_t   cr_ruid;        /* real user id */
        uid_t   cr_svuid;       /* saved user id */
        short   cr_ngroups;     /* number of groups in advisory list */
        gid_t   cr_groups[NGROUPS]; /* advisory group list */
        gid_t   cr_rgid;        /* real group id */
        gid_t   cr_svgid;       /* saved group id */
        uid_t   cr_gmuid;       /* UID for group membership purposes */
        int cr_flags;       /* flags on credential */
    } cr_posix;
        struct label    *cr_label;  /* MAC label */
        /*
         * NOTE: If anything else (besides the flags)
         * added after the label, you must change
         * kauth_cred_find().
         */
        struct au_session cr_audit;     /* user auditing data */
    };
更改完成后，该进程将返回到 root 目录。
于是，如果你运行 system("/bin/bash");，将可以获得 root 权限的 shell。
**  
**
**背景知识**
**Kernel Zone**
在 OS X 中，内核使用一个称为 Zone 的结构来分配堆。
Zone 使用 zalloc(zone) 和 kalloc(size) 进行分配，使用 zfree(zone,ptr) 和 kfree(ptr,size)
进行释放。
当调用 kalloc 时，zalloc 在内部被调用。kalloc zone 可以通过 sudo zprint kalloc 找到。
zone metadata：第一页中包含的 zone 信息有 size、page_count、alloc_element、free_element 等。
**OOL(Out-Of-Line) Port**
在 IPC 通信中加载的非内联数据包
它保存在内核中，直到它收到 OOL 的数据。
在做 OS X 内核利用时，可以通过 OOL 的 Leak 进行 fakeport 攻击。
**  
**
**OS X 内核漏洞缓解技术**
**LASLR**
引导时内核内存地址随机化
Kext(Kernel Extension) 和内核共享相同的 kslide
旁路攻击：kslide地址计算（kslide=kernel_base – kernel text base)
**DEP**
防止内核中的 RWX 权限
旁路攻击：ROP
**SMEP/SMAP**
Intel CPU 提供的内核内存保护计算
SMEP(Supervisor Mode Execution Protection)：无法在用户地址空间中执行内核代码
SMAP(Supervisor Mode Access Protection)：不允许在用户地址空间中访问内存。仅在支持的 CPU 体系结构上可用。
旁路攻击：启用 ROP 绕过内核
**vm_map_copy()更改**
OS X 10.11 El Capitan 以前的内核中，可以使用溢出漏洞捕获 kdata 指针和 vm_map_copy 的
size，从而读取任意的数据，但这里 vm_map_copy 结构体发生了变化。(osfmk/vm/vm_map.h)
// 更改前
    struct vm_map_copy{
        int type;
        #define VM_MAP_COPY_ENTRY_LIST      1
        #define VM_MAP_COPY_OBJECT          2
        #define VMMAP_COPY_KERNEL_BUFFER    3
        vm_object_offset_t offset;
        vm_map_size_t size;
        union {
            struct vm_map_header    hdr;
            vm_object_t             object;
            struct { // <<= Before Change
                void *kdata;
                vm_size_t kalloc_size;