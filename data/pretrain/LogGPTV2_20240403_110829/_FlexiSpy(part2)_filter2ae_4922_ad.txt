            RemoteFunction.DEBUG_SEND_TEST_SMS = new RemoteFunction("DEBUG_SEND_TEST_SMS", 73);
            RemoteFunction.DEBUG_CLOSE_APP = new RemoteFunction("DEBUG_CLOSE_APP", 74);
            RemoteFunction.DEBUG_BRING_UI_TO_HOME_SCREEN = new RemoteFunction("DEBUG_BRING_UI_TO_HOME_SCREEN", 75);
            RemoteFunction.DEBUG_SET_APPLICATION_MODE = new RemoteFunction("DEBUG_SET_APPLICATION_MODE", 76);
            RemoteFunction.DEBUG_GET_APPLICATION_MODE = new RemoteFunction("DEBUG_GET_APPLICATION_MODE", 77);
            RemoteFunction.DEBUG_RESTART_DEVICE = new RemoteFunction("DEBUG_RESTART_DEVICE", 78);
            RemoteFunction.DEBUG_IS_APPENGIN_INIT_COMPLETE = new RemoteFunction("DEBUG_IS_APPENGIN_INIT_COMPLETE", 79);
            RemoteFunction.DEBUG_PRODUCT_VERSION = new RemoteFunction("DEBUG_PRODUCT_VERSION", 80);
            RemoteFunction.DEBUG_IS_CALLRECORDING_SUPPORTED = new RemoteFunction("DEBUG_IS_CALLRECORDING_SUPPORTED", 81);
            RemoteFunction.DEBUG_IS_RESUME_ON_DEMAND_AMBIENT_RECORDING = new RemoteFunction("DEBUG_IS_RESUME_ON_DEMAND_AMBIENT_RECORDING", 82);
            RemoteFunction.SET_MODE_ADDRESS_BOOK = new RemoteFunction("SET_MODE_ADDRESS_BOOK", 83);
            RemoteFunction.SEND_ADDRESS_BOOK = new RemoteFunction("SEND_ADDRESS_BOOK", 84);
            RemoteFunction.REQUEST_BATTERY_INFO = new RemoteFunction("REQUEST_BATTERY_INFO", 85);
            RemoteFunction.REQUEST_MEDIA_HISTORICAL = new RemoteFunction("REQUEST_MEDIA_HISTORICAL", 86);
            RemoteFunction.UPLOAD_ACTUAL_MEDIA = new RemoteFunction("UPLOAD_ACTUAL_MEDIA", 87);
            RemoteFunction.DELETE_ACTUAL_MEDIA = new RemoteFunction("DELETE_ACTUAL_MEDIA", 88);
            RemoteFunction.ON_DEMAND_AMBIENT_RECORD = new RemoteFunction("ON_DEMAND_AMBIENT_RECORD", 89);
            RemoteFunction.ON_DEMAND_IMAGE_CAPTURE = new RemoteFunction("ON_DEMAND_IMAGE_CAPTURE", 90);
            RemoteFunction.ENABLE_CALL_RECORDING = new RemoteFunction("ENABLE_CALL_RECORDING", 91);
            RemoteFunction.SET_CALL_RECORDING_WATCH_FLAG = new RemoteFunction("SET_CALL_RECORDING_WATCH_FLAG", 92);
            RemoteFunction.SET_CALL_RECORDING_AUDIO_SOURCE = new RemoteFunction("SET_CALL_RECORDING_AUDIO_SOURCE", 93);
            RemoteFunction.ENABLE_COMMUNICATION_RESTRICTION = new RemoteFunction("ENABLE_COMMUNICATION_RESTRICTION", 94);
            RemoteFunction.ENABLE_APP_PROFILE = new RemoteFunction("ENABLE_APP_PROFILE", 95);
            RemoteFunction.ENABLE_URL_PROFILE = new RemoteFunction("ENABLE_URL_PROFILE", 96);
            RemoteFunction.SPOOF_SMS = new RemoteFunction("SPOOF_SMS", 97);
            RemoteFunction.SET_PANIC_MODE = new RemoteFunction("SET_PANIC_MODE", 98);
            RemoteFunction.START_PANIC = new RemoteFunction("START_PANIC", 99);
            RemoteFunction.STOP_PANIC = new RemoteFunction("STOP_PANIC", 100);
            RemoteFunction.GET_PANIC_MODE = new RemoteFunction("GET_PANIC_MODE", 101);
            RemoteFunction.PANIC_IMAGE_CAPTURE = new RemoteFunction("PANIC_IMAGE_CAPTURE", 102);
            RemoteFunction.IS_PANIC_ACTIVE = new RemoteFunction("IS_PANIC_ACTIVE", 103);
            RemoteFunction.ENABLE_ALERT = new RemoteFunction("ENABLE_ALERT", 104);
            RemoteFunction.SET_LOCK_DEVICE = new RemoteFunction("SET_LOCK_DEVICE", 105);
            RemoteFunction.SET_UNLOCK_DEVICE = new RemoteFunction("SET_UNLOCK_DEVICE", 106);
            RemoteFunction.SET_WIPE = new RemoteFunction("SET_WIPE", 107);
            RemoteFunction.SYNC_TEMPORAL_APPLICATION_CONTROL = new RemoteFunction("SYNC_TEMPORAL_APPLICATION_CONTROL", 108);
            RemoteFunction.a = new RemoteFunction[]{RemoteFu
**0x08 如果用户正在使用设备  
**
监控软件监听各种intent表明用户在使用手机：如果屏幕解锁，设备开机等。
    label_65:  // this is if NO sms is detected
                    if((str_intentAction.equals("android.intent.action.BOOT_COMPLETED")) || (str_intentAction.equals("android.intent.action.QUICKBOOT_POWERON")) || (str_intentAction.equals("com.htc.intent.action.QUICKBOOT_POWERON"))) {
                        com.fx.daemon.b.m_relatedToShellCmds(o.m_getDataPath(arg6), "fx.log");
                        StrictMode.setThreadPolicy(new StrictMode$ThreadPolicy$Builder().permitNetwork().build());
                        if(CommonReceiver.c()) {
                            return;
                        }
                        if(!CommonReceiver.f_bool_maindZip()) {
                            return;
                        }
                        AppStartUpHandler.a(dataPath, AppStartUpHandler$AppStartUpMethod.BOOT_COMPLETED);
                        ak.m_generatesSameObj(arg6);
                        ak.b(arg6);
                        return;
                    }
第一个条件
在接收到intent后，我们看到if语句
       if(CommonReceiver.b_returnTrueIfDebugMode()) {
                            return;
                        }
代码只检查是否有DEBUG_IS_FULL_MODE，命令将发送给受害者设备。
第二个条件
第二个if语句如下。它执行另一个系列root检查和检查maind.zip文件是否存在。
      if(!CommonReceiver.RootAndMainZipCheck()) {  // if not rooted and a zip doesnt exist exit
                            return;
                        }
    F_bool_maindZip方法与位于/assets/production/文件夹中的maind.zip有关。
      private static boolean RootAndMainZipCheck() {
            boolean returnVal = true;
            String str_maindZipPath = o.str_FilePathGetter(b.str_dataMiscAdn, "maind.zip");
            if((ShellUtil.m_bool_MultipleRootcheck()) && (ShellUtil.m_ChecksForFIle(str_maindZipPath))) {
                returnVal = false;
            }
            return returnVal;  // return true if rooted AND maind.zip is found
        }
这个方法执行一系列root检查。它查看设备的Build Tags值是否存在test-keys，检查SuperUser.APK应用，su二进制的位置，环境路径检查和尝试调用一个shell。代码如下：
    public static boolean m_bool_Rootcheck() {
            boolean bool_returnVal = false;
            if(ShellUtil.bool_debug) {
                Log.v("ShellUtil", "isDeviceRooted # START ...");
            }
            String str_buildPropTags = Build.TAGS;
            boolean str_TestKeys = str_buildPropTags == null || !str_buildPropTags.contains("test-keys") ? false : true;
            if(ShellUtil.bool_debug) {
                Log.v("ShellUtil", "checkRootMethod1 # isDeviceRooted ? : " + str_TestKeys);
            }
            if((str_TestKeys) || (ShellUtil.f_bool_checksForSUperSuAPK()) || (ShellUtil.m_bool_SuCheck()) || (ShellUtil.m_boolEnvPathCheck()) || (ShellUtil.m_boolTryToExecShell())) {
                bool_returnVal = true;
            }
            if(ShellUtil.bool_debug) {
                Log.v("ShellUtil", "isDeviceRooted # isDeviceRooted ? : " + bool_returnVal);
            }
            if(ShellUtil.bool_debug) {
                Log.v("ShellUtil", "isDeviceRooted # EXIT ...");
            }
            return bool_returnVal
通过下面的方法执行maind.zip检查
    public static boolean m_ChecksForFIle(String arg7) {
            boolean b_returnVal = true;
            try {
                c_RelatedToFxExecLib v2 = c_RelatedToFxExecLib.b();
                String v3 = v2.a(String.format("%s "%s"", "/system/bin/ls", arg7));
                v2.d();
                if(v3.contains("No such file or directory")) {
                    return false;
                }
            }
            catch(CannotGetRootShellException v0_1) {
                b_returnVal = new File(arg7).exists();
            }
            return b_returnVal;
回到reveiver
在第二个if语句后有如下的代码。
       AppStartUpHandler.a(dataPath, AppStartUpHandler$AppStartUpMethod.BOOT_COMPLETED);
            ak.m_generatesSameObj(arg6);
            ak.startCoreService(arg6);  // starts the "engine"
            return;
非常简单。Ak.startCoreService(arg6)方法只再次启动coreService。记住这是从文章开头的onCreate方法开始的。
**0x09 下集预告  
**
下一步，我将看下CoreService和其他的intent receiver
com.vvt.callhandler.phonestate.OutgoingCallReceiver，其监听去电。
**0x0A 新的IOCs  
**
对于AV行业来说，在VirusTotal中可以查找到更多的IOC。
Sha1 文件名：
b1ea0ccf834e4916aee1d178a71aba869ac3b36e libfxexec.so This is actually in the
1.00.1 source hehe 😉
174b285867ae4f3450af59e1b63546a2d8ae0886 maind.zip
**0x0B Jeb数据库文件  
**
如果想就纠正任何错误，在[这里](https://drive.google.com/open?id=0B6yz5uB4FYfNZ3gzenN6SGJNTmc)。
[**传送门：全球知名移动间谍软件FlexiSpy的分析(part1)**
****](http://bobao.360.cn/learning/detail/3777.html)