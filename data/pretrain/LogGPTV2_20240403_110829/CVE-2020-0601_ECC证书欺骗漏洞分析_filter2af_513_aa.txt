# CVE-2020-0601 ECC证书欺骗漏洞分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：Strawberry @ QAX A-TEAM
2020年1月15日，微软公布了1月份的补丁更新列表，其中包括一个椭圆曲线密码(ECC)证书检测绕过相关的漏洞(CVE-2020-0601)，该漏洞由NSA发现并汇报给微软。攻击者可利用这个漏洞伪造合法证书，进一步可实现对恶意软件及恶意网站证书的签名。奇安信CERT第一时间发布了该漏洞的修补通告，并于次日对该漏洞进行原理分析及复现。本文主要参考Trend
Micro于上月发布的文章《An In-Depth Technical Analysis of CurveBall
(CVE-2020-0601)》对此漏洞进行进一步分析，如有不足之处，欢迎批评指正。
声明：本篇文章由 Strawberry@ QAX A-TEAM原创，仅用于技术研究，不恰当使用会造成危害，严禁违法使用 ，否则后果自负。
2020年1月15日，微软公布了1月份的补丁更新列表，其中包括一个椭圆曲线密码(ECC)证书检测绕过相关的漏洞(CVE-2020-0601)，该漏洞由NSA发现并汇报给微软。攻击者可利用这个漏洞伪造合法证书，进一步可实现对恶意软件及恶意网站证书的签名。奇安信CERT第一时间发布了该漏洞的修补通告，并于次日对该漏洞进行原理分析及复现。本文主要参考Trend
Micro于上月发布的文章《An In-Depth Technical Analysis of CurveBall
(CVE-2020-0601)》对此漏洞进行进一步分析。
## 前置基础
### 一、证书结构
数字证书是用来认证公钥持有者身份合法性的电子文档，由 CA（Certifacate
Authority）来负责签发。数字证书结构的ASN.1语法描述如下，应包括证书内容、签名算法标识符以及对证书内容的签名，其中，签名算法为CA对tbsCertificate进行签名时所使用的算法：
    Certificate: :=SEQUENCE {
        tbsCertificate TBSCertificate,
        signatureAlgorithm AlgorithmIdentifier,
        signatureValue BIT STRING
    }
证书内容 (tbsCertificate) 是需要被CA签名的信息，其ASN.1语法描述如下：
    TBSCertificate: :=SEQUENCE {
        version[0] EXPLICIT Version DEFAULT v1,
        serialNumber CertificateSerialNumber,
        signature AlgorithmIdentifier,
        issuer Name,
        validity Validity,
        subject Name,
        subjectPublicKeyInfo SubjectPublicKeyInfo,
        issuerUniqueID[1] IMPLICIT UniqueIdentifier OPTIONAL,
        subjectUniqueID[2] IMPLICIT UniqueIdentifier OPTIONAL,
        extensions[3] EXPLICIT Extensions OPTIONAL
    }
证书的签发者 (issuer) 和证书主体 (subject)
分别标识了签发证书的CA实体和证书持有者实体。证书主体公钥信息(subjectPublicKeyInfo)给出了证书所绑定的加密算法和公钥。其ASN.1描述如下：
    SubjectPublicKeyInfo::=SEQUENCE{
    algorithm AlgorithmIdentifier,
    subjectPublicKey BIT STRING
    }
其中，algorithm中包含加密算法的OID以及可选的算法参数，OID为对象标识符，可以唯一地确定网络中的对象（不仅仅是加密算法）。比如1.2.840.10045.2.1对应了
id-ecPublicKey，表示椭圆曲线密码算法。
    AlgorithmIdentifier: :=SEQUENCE {
        algorithm OBJECT IDENTIFIER,
        parameters ANY DEFINED BY algorithm OPTIONAL
    }
在parameters中，可以通过指定“命名曲线”的方式来指定椭圆曲线参数（隐式指定）。
    EcpkParameters: :=CHOICE {
        ecParameters ECParameters,
        namedCurve OBJECT IDENTIFIER,
        implicitlyCA NULL
    }
使用openssl工具可解析证书结构，这里使用Windows系统中的ECC证书Microsoft ECC Product Root Certificate
Authority 2018。可以看出其 Subject 和 Issuer 字段内容是一致的，因为它是自签名的根证书。其公钥信息为04 c7 11 16
2a … f4 01 07 ac，指定的椭圆曲线为secp384r1：
    ➜  ~ openssl x509 -in cert.cer -text -noout
    Certificate:
        Data:
            Version: 3 (0x2)
            Serial Number:
                14:98:26:66:dc:7c:cd:8f:40:53:67:7b:b9:99:ec:85
            Signature Algorithm: ecdsa-with-SHA384
            Issuer: C = US, ST = Washington, L = Redmond, O = Microsoft Corporation, CN = Microsoft ECC Product Root Certificate Authority 2018
            Validity
                Not Before: Feb 27 20:42:08 2018 GMT
                Not After : Feb 27 20:50:46 2043 GMT
            Subject: C = US, ST = Washington, L = Redmond, O = Microsoft Corporation, CN = Microsoft ECC Product Root Certificate Authority 2018
            Subject Public Key Info:
                Public Key Algorithm: id-ecPublicKey
                    Public-Key: (384 bit)
                    pub:
                        04:c7:11:16:2a:76:1d:56:8e:be:b9:62:65:d4:c3:
                        ce:b4:f0:c3:30:ec:8f:6d:d7:6e:39:bc:c8:49:ab:
                        ab:b8:e3:43:78:d5:81:06:5d:ef:c7:7d:9f:ce:d6:
                        b3:90:75:de:0c:b0:90:de:23:ba:c8:d1:3e:67:e0:
                        19:a9:1b:86:31:1e:5f:34:2d:ee:17:fd:15:fb:7e:
                        27:8a:32:a1:ea:c9:8f:c9:7e:18:cb:2f:3b:2c:48:
                        7a:7d:a6:f4:01:07:ac
                    ASN1 OID: secp384r1
                    NIST CURVE: P-384
            X509v3 extensions:
                X509v3 Key Usage: critical
                    Digital Signature, Certificate Sign, CRL Sign
                X509v3 Basic Constraints: critical
                    CA:TRUE
                X509v3 Subject Key Identifier: 
                    43:EF:70:87:B8:9D:BF:EC:88:19:DC:C6:C4:6B:75:0D:75:34:33:08
                1.3.6.1.4.1.311.21.1: 
                    ...
                X509v3 Certificate Policies: 
                    Policy: X509v3 Any Policy
                    Policy: 1.3.6.1.4.1.311.76.509.1.1
                      CPS: http://www.microsoft.com/pkiops/Docs/Repository.htm
        Signature Algorithm: ecdsa-with-SHA384
             30:66:02:31:00:a1:c0:49:44:5d:32:55:27:cc:3e:90:6e:25:
             22:9d:24:5b:9b:51:35:c7:91:49:49:2a:a3:f9:6f:4f:1c:cd:
             dd:9c:e1:b5:57:c9:9e:c2:22:45:9b:06:15:70:1c:45:bf:02:
             31:00:c5:d3:28:eb:72:c7:3e:b0:ac:27:09:7f:62:3d:60:79:
             e5:92:f1:45:2a:b9:a5:02:e4:60:bb:fe:7a:2b:9c:60:a7:b5:
             99:14:f2:b0:be:f0:bb:05:96:56:56:8f:c1:68
### 二、ECC椭圆曲线密码算法
ECC椭圆曲线密码(Elliptic curve
cryptography)是由Miller和Koblitz提出的一种基于有限域上椭圆曲线的公钥密码学。ECC所基于的数学问题为椭圆曲线离散对数问题。椭圆曲线可形象地被描述为bizzaro台球游戏(，椭圆曲线方程可看作台球边界。
E: y² = x³+ ax + b (mod p)
现有两个点A和B，如果要计算A+B，则将球放在A点，然后朝B点射击。当它撞击曲线，球将以平行于y轴的方向反弹至曲线的另一侧，得到结果C。通过相同的原理可计算出D(A+C)、E(A+D)。
如果要计算2A(也就是A+A)，就需要选择非常靠近A的点A’并朝其射击。随着A’越来越靠近A，它们之间的连接线也越来越靠近A的切线。也就是说，则将球放在A点，沿着椭圆曲线过A点的切线射击，球在撞击曲线后反弹至曲线的另一侧，得到结果2A。以和上图同样的思路可以计算
A+2A = 3A、A+3A = 4A 等。
当球放在已知的点
G（称为生成器或基点）上时，玩家可选择一个次数d-1，然后按照以上规则从切线方向开始连续从点G射击d-1次（即计算d*G），最终球在停在Q点，其它人很难猜测到这个次数d-1，除非他一直在场。而且如果这个次数很大，那需要的观看时间相应就会很长。在椭圆曲线密码算法中，Q
=
d×G，d称为私钥，而Q称为公钥。通过d和G计算Q很容易，但是给定Q和G很难确定d（如果d已知，可以采用快速算法得到Q，而如果给定公钥Q和基点G去求d的话，只能从头开始挨个验证，当数据量很大时，是很难推测出私钥d的）。但这只在基点G确定的情况下才成立，因为如果起点G允许任意选取，猜测者可以选取任意的G’和d’，使得d’
×G’ = Q。最简单的思路是，猜测者声称球根本没有移动，即最终球位置Q就是初始位置G’，令G’= Q、d’= 1，可使得 d’×G’= 1×Q =
Q。有了这个新的基点，攻击者就拥有了和公钥Q相对应的新的私钥d’，如果系统不验证参数G，攻击者就可以使用这个假的私钥d’来伪造他人的签名。
ECC不仅支持隐式指定椭圆曲线参数，还允许自定义ecParameters，可以显式指定曲线的所有参数，这为伪造证书提供了基础。下面为ECParameters的ASN.1结构：
    ECParameters: :=SEQUENCE {--Elliptic curve parameters
        version ECPVer,
        fieldID FieldID,
        curve Curve,
        base ECPoint,
        --Base point G
        order INTEGER,
        --Order n of the base point
        cofactor INTEGER OPTIONAL
    }--The integer h = #E(Fq) / n
由于之前解析的根证书的ECC参数为secp384r1，我们来看一下该曲线的标准参数，然后对伪造的证书进行解析。比较两者的算法参数，发现除了基点G都可以匹配的上，而伪造证书中的参数G和其公钥值是一样的。所以可以通过检测ECC证书中的Generator
(uncompressed)字段和其公钥值是否相同，来判定该证书是否是非法的：
    Certificate:
        Data:
            Version: 3 (0x2)
            Serial Number:
                24:ef:d1:58:53:74:56:5e:41:4d:c0:88:3b:eb:89:61:a1:90:69:fe
            Signature Algorithm: ecdsa-with-SHA256
            Issuer: C = US, ST = Washington, L = Redmond, O = Microsoft Corporation, CN = Microsoft ECC Product Root Certificate Authority 2018
            Validity
                Not Before: Mar  3 12:18:09 2020 GMT
                Not After : Apr  2 12:18:09 2020 GMT
            Subject: C = US, ST = Washington, L = Redmond, O = Microsoft Corporation, CN = Microsoft ECC Product Root Certificate Authority 2018
            Subject Public Key Info:
                Public Key Algorithm: id-ecPublicKey
                    Public-Key: (384 bit)
                    pub:
                        04:c7:11:16:2a:76:1d:56:8e:be:b9:62:65:d4:c3:
                        ce:b4:f0:c3:30:ec:8f:6d:d7:6e:39:bc:c8:49:ab:
                        ab:b8:e3:43:78:d5:81:06:5d:ef:c7:7d:9f:ce:d6:
                        b3:90:75:de:0c:b0:90:de:23:ba:c8:d1:3e:67:e0:
                        19:a9:1b:86:31:1e:5f:34:2d:ee:17:fd:15:fb:7e:
                        27:8a:32:a1:ea:c9:8f:c9:7e:18:cb:2f:3b:2c:48:
                        7a:7d:a6:f4:01:07:ac
                    Field Type: prime-field
                    Prime:
                        00:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:
                        ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:
                        ff:ff:fe:ff:ff:ff:ff:00:00:00:00:00:00:00:00:
                        ff:ff:ff:ff
                    A:   
                        00:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:
                        ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:
                        ff:ff:fe:ff:ff:ff:ff:00:00:00:00:00:00:00:00:
                        ff:ff:ff:fc
                    B:   
                        00:b3:31:2f:a7:e2:3e:e7:e4:98:8e:05:6b:e3:f8:
                        2d:19:18:1d:9c:6e:fe:81:41:12:03:14:08:8f:50:
                        13:87:5a:c6:56:39:8d:8a:2e:d1:9d:2a:85:c8:ed:
                        d3:ec:2a:ef
                    Generator (uncompressed):