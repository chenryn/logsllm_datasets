# 前言
接上一篇，继续来分析如何使用angr挖掘出UAF和double free漏洞
UAF，即use after
free，一般是由未清空的堆指针再次被重用导致的漏洞，uaf有两种，一种是重用被free堆块进行写数据的操作，另一种是重用被free堆块进行读数据的操作
double free则是对同一块堆空间free操作两次而产生的漏洞，这种漏洞会导致内存破坏，根据不同的环境造成的破坏效果也不一样
同样以一个例子开头
    #include 
    #include 
    char bss[0x10]={0};
    int main(int argc, char const *argv[])
    {
        char buf[0x10]={0};
        int times=4;
        unsigned long *ptr=&bss;
        while(times--)
        {
            puts("input:");
            read(0,buf,8);
            switch(atoi(buf))
            {
                case 1: 
                    puts("malloc!");
                    *ptr=malloc(0x30);
                    // printf("%p,%p,%p\n", &ptr,ptr,*ptr);
                    break;
                case 2:
                    if (*ptr)
                    {
                        puts("free!");
                        free(*ptr);
                    }
                    else
                    {
                        puts("fail to free");
                        return;
                    }
                    break;
                case 3:
                    if (*ptr)
                    {
                        puts("edit!");
                        read(0,*ptr,8);
                    }
                    else
                    {
                        puts("fail to edit");
                        return;
                    }
                    break;
                case 4:
                    if (*ptr)
                    {
                        puts("show!");
                        write(1,*ptr,8);
                    }
                    else
                    {
                        puts("fail to show");
                        return;
                    }
                    break;
            }
        }
        return 0;
    }
这种类型是典型的堆漏洞题型，一般通过菜单选项的方式，可以造成uaf读写和double free
如果用unconstrained状态来找漏洞的话，你会发现，即使遍历完所有路径也不会出一个unconstrained
# 挖掘思路
这里分两步来分析如何挖掘double free和uaf
## double free
首先是挖掘double
free，这种漏洞的成因很简单，就是free了同一个堆块两次，那么我们只需要使用某种方法记录下每次malloc和free的目标堆空间，就能判断出是否发生了double
free
angr提供了hook的功能，可以任意hook glibc中的函数，通过hook
malloc函数，使用全局变量malloc_list字典来记录每次得到的堆地址
    from angr.sim_type import SimTypeTop,SimTypeLength
    class malloc_hook(angr.procedures.libc.malloc.malloc):
        def run(self, sim_size):
            self.argument_types = {0: SimTypeLength(self.state.arch)}
            self.return_type = self.ty_ptr(SimTypeTop(sim_size))
            addr=self.state.heap._malloc(sim_size)#申请得到的堆块地址
            size=self.state.solver.eval(sim_size)#申请得到的堆块大小
            if "malloc_list" in self.state.globals:
                malloc_list=self.state.globals["malloc_list"]
            else:
                self.state.globals["malloc_list"]={}
                malloc_list=self.state.globals["malloc_list"]
            malloc_list[addr]=size#以字典的方式存储进路径全局变量
            return addr
同样的，还需要hook free函数
    class free_hook(angr.procedures.libc.free.free):      
        def run(self, ptr):
            self.argument_types = {0: self.ty_ptr(SimTypeTop())}
            f_ptr=self.state.solver.eval(ptr)#即将要free的堆块地址
            if "free_list" in self.state.globals:
                free_list=self.state.globals["free_list"]
                if f_ptr in free_list:
                    print("double free:")
                    print("stdout:\n",self.state.posix.dumps(1))
                    print("stdin:\n",self.state.posix.dumps(0))
            else:
                self.state.globals["free_list"]={}
                free_list=self.state.globals["free_list"]
                if "malloc_list" in self.state.globals:
                    malloc_list=self.state.globals["malloc_list"]
                    if f_ptr in malloc_list:
                        free_list[f_ptr]=malloc_list[f_ptr]
            return self.state.heap._free(ptr)
首先要判断当前路径是否存在全局变量字典free_list，如果存在说明该路径至少调用了一次free函数，那么就直接遍历free_list，康康当前要被free的地址f_ptr是否存在于free_list中，如果存在了那么说明发生了
double free
如果不存在free_list，那么说明该路径下是第一次调用free函数，那么进行free_list字典的初始化，然后再判断即将要free的堆地址f_ptr
是否存在于malloc_list中，只有存在才能进行`free_list[f_ptr]=malloc_list[f_ptr]`
确保不会free一些奇怪的地址
完整angr脚本如下
    import angr
    from angr.sim_type import SimTypeTop,SimTypeLength
    from angr import sim_options as so
    class malloc_hook(angr.procedures.libc.malloc.malloc):
        def run(self, sim_size):
            self.argument_types = {0: SimTypeLength(self.state.arch)}
            self.return_type = self.ty_ptr(SimTypeTop(sim_size))
            addr=self.state.heap._malloc(sim_size)
            size=self.state.solver.eval(sim_size)
            if "malloc_list" in self.state.globals:
                malloc_list=self.state.globals["malloc_list"]
            else:
                self.state.globals["malloc_list"]={}
                malloc_list=self.state.globals["malloc_list"]
            malloc_list[addr]=size
            return addr
    class free_hook(angr.procedures.libc.free.free):
        def run(self, ptr):
            self.argument_types = {0: self.ty_ptr(SimTypeTop())}
            f_ptr=self.state.solver.eval(ptr)
            if "free_list" in self.state.globals:
                free_list=self.state.globals["free_list"]
                if f_ptr in free_list:
                    print("double free:")
                    print("stdout:\n",self.state.posix.dumps(1))
                    print("stdin:\n",self.state.posix.dumps(0))
            else:
                self.state.globals["free_list"]={}
                free_list=self.state.globals["free_list"]
                if "malloc_list" in self.state.globals:
                    malloc_list=self.state.globals["malloc_list"]
                    if f_ptr in malloc_list:
                        free_list[f_ptr]=malloc_list[f_ptr]
            return self.state.heap._free(ptr)
    if __name__ == '__main__':
        filename="./heap1"
        p = angr.Project(filename,auto_load_libs=False)#
        p.hook_symbol('malloc',malloc_hook())
        p.hook_symbol('free',free_hook())
        extras = {so.REVERSE_MEMORY_NAME_MAP, so.TRACK_ACTION_HISTORY,so.ZERO_FILL_UNCONSTRAINED_MEMORY}
        state=p.factory.entry_state(add_options=extras)
        simgr = p.factory.simulation_manager(state,save_unconstrained=True)
        simgr.use_technique(angr.exploration_techniques.Spiller())
        while simgr.active:
            simgr.step()
运行大概五分钟就出了几个double free的结果
## uaf
接下来就是挖掘UAF了，UAF的核心在于对已经free过的地址进行读或者写的操作，同样可以利用hook
的方法来记录已经free的地址，然后再通过angr提供的action的方法来查看对内存地址的读写操作，如果对应的读写操作地址恰好是已经free过的地址，那么可以认为是产生了UAF漏洞
新增两个函数专门用于检测UAF_R和UAF_W
    def Check_UAF_R(state):
        if "free_list" not in state.globals:
            if "before_free" in state.globals:
                before_free=state.globals["before_free"]
            else:
                state.globals["before_free"]=[]
                before_free=state.globals["before_free"]
            action_now=reversed(state.history.actions.hardcopy)
            for act in action_now:
                if act not in before_free:
                    before_free.append(act)