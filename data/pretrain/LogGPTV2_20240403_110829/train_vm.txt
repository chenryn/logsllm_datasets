.br eacces
in
.ir errno .
.ip
the default value in this file is 0.
setting the value to 1 avoids a longstanding class of security issues
based on time-of-check, time-of-use races when accessing symbolic links.
.tp
.ir /proc/sys/fs/suid_dumpable " (since linux 2.6.13)"
.\" the following is based on text from documentation/sysctl/kernel.txt
the value in this file is assigned to a process's "dumpable" flag
in the circumstances described in
.br prctl (2).
in effect,
the value in this file determines whether core dump files are
produced for set-user-id or otherwise protected/tainted binaries.
the "dumpable" setting also affects the ownership of files in a process's
.ir /proc/[pid]
directory, as described above.
.ip
three different integer values can be specified:
.rs
.tp
\fi0\ (default)\fp
.\" in kernel source: suid_dump_disable
this provides the traditional (pre-linux 2.6.13) behavior.
a core dump will not be produced for a process which has
changed credentials (by calling
.br seteuid (2),
.br setgid (2),
or similar, or by executing a set-user-id or set-group-id program)
or whose binary does not have read permission enabled.
.tp
\fi1\ ("debug")\fp
.\" in kernel source: suid_dump_user
all processes dump core when possible.
(reasons why a process might nevertheless not dump core are described in
.br core (5).)
the core dump is owned by the filesystem user id of the dumping process
and no security is applied.
this is intended for system debugging situations only:
this mode is insecure because it allows unprivileged users to
examine the memory contents of privileged processes.
.tp
\fi2\ ("suidsafe")\fp
.\" in kernel source: suid_dump_root
any binary which normally would not be dumped (see "0" above)
is dumped readable by root only.
this allows the user to remove the core dump file but not to read it.
for security reasons core dumps in this mode will not overwrite one
another or other files.
this mode is appropriate when administrators are
attempting to debug problems in a normal environment.
.ip
additionally, since linux 3.6,
.\" 9520628e8ceb69fa9a4aee6b57f22675d9e1b709
.i /proc/sys/kernel/core_pattern
must either be an absolute pathname
or a pipe command, as detailed in
.br core (5).
warnings will be written to the kernel log if
.i core_pattern
does not follow these rules, and no core dump will be produced.
.\" 54b501992dd2a839e94e76aa392c392b55080ce8
.re
.ip
for details of the effect of a process's "dumpable" setting
on ptrace access mode checking, see
.br ptrace (2).
.tp
.i /proc/sys/fs/super\-max
this file
controls the maximum number of superblocks, and
thus the maximum number of mounted filesystems the kernel
can have.
you need increase only
.i super\-max
if you need to mount more filesystems than the current value in
.i super\-max
allows you to.
.tp
.i /proc/sys/fs/super\-nr
this file
contains the number of filesystems currently mounted.
.tp
.i /proc/sys/kernel
this directory contains files controlling a range of kernel parameters,
as described below.
.tp
.i /proc/sys/kernel/acct
this file
contains three numbers:
.ir highwater ,
.ir lowwater ,
and
.ir frequency .
if bsd-style process accounting is enabled, these values control
its behavior.
if free space on filesystem where the log lives goes below
.i lowwater
percent, accounting suspends.
if free space gets above
.i highwater
percent, accounting resumes.
.i frequency
determines
how often the kernel checks the amount of free space (value is in
seconds).
default values are 4, 2, and 30.
that is, suspend accounting if 2% or less space is free; resume it
if 4% or more space is free; consider information about amount of free space
valid for 30 seconds.
.tp
.ir /proc/sys/kernel/auto_msgmni " (linux 2.6.27 to 3.18)"
.\" commit 9eefe520c814f6f62c5d36a2ddcd3fb99dfdb30e (introduces feature)
.\" commit 0050ee059f7fc86b1df2527aaa14ed5dc72f9973 (rendered redundant)
from linux 2.6.27 to 3.18,
this file was used to control recomputing of the value in
.ir /proc/sys/kernel/msgmni
upon the addition or removal of memory or upon ipc namespace creation/removal.
echoing "1" into this file enabled
.i msgmni
automatic recomputing (and triggered a recomputation of
.i msgmni
based on the current amount of available memory and number of ipc namespaces).
echoing "0" disabled automatic recomputing.
(automatic recomputing was also disabled if a value was explicitly assigned to
.ir /proc/sys/kernel/msgmni .)
the default value in
.i auto_msgmni
was 1.
.ip
since linux 3.19, the content of this file has no effect (because
.ir msgmni
.\" fixme must document the 3.19 'msgmni' changes.
defaults to near the maximum value possible),
and reads from this file always return the value "0".
.tp
.ir /proc/sys/kernel/cap_last_cap " (since linux 3.2)"
see
.br capabilities (7).
.tp
.ir /proc/sys/kernel/cap\-bound " (from linux 2.2 to 2.6.24)"
this file holds the value of the kernel
.i "capability bounding set"
(expressed as a signed decimal number).
this set is anded against the capabilities permitted to a process
during
.br execve (2).
starting with linux 2.6.25,
the system-wide capability bounding set disappeared,
and was replaced by a per-thread bounding set; see
.br capabilities (7).
.tp
.i /proc/sys/kernel/core_pattern
see
.br core (5).
.tp
.i /proc/sys/kernel/core_pipe_limit
see
.br core (5).
.tp
.i /proc/sys/kernel/core_uses_pid
see
.br core (5).
.tp
.i /proc/sys/kernel/ctrl\-alt\-del
this file
controls the handling of ctrl-alt-del from the keyboard.
when the value in this file is 0, ctrl-alt-del is trapped and
sent to the
.br init (1)
program to handle a graceful restart.
when the value is greater than zero, linux's reaction to a vulcan
nerve pinch (tm) will be an immediate reboot, without even
syncing its dirty buffers.
note: when a program (like dosemu) has the keyboard in "raw"
mode, the ctrl-alt-del is intercepted by the program before it
ever reaches the kernel tty layer, and it's up to the program
to decide what to do with it.
.tp
.ir /proc/sys/kernel/dmesg_restrict " (since linux 2.6.37)"
the value in this file determines who can see kernel syslog contents.
a value of 0 in this file imposes no restrictions.
if the value is 1, only privileged users can read the kernel syslog.
(see
.br syslog (2)
for more details.)
since linux 3.4,
.\" commit 620f6e8e855d6d447688a5f67a4e176944a084e8
only users with the
.br cap_sys_admin
capability may change the value in this file.
.tp
.ir /proc/sys/kernel/domainname " and " /proc/sys/kernel/hostname
can be used to set the nis/yp domainname and the
hostname of your box in exactly the same way as the commands
.br domainname (1)
and
.br hostname (1),
that is:
.ip
.in +4n
.ex
.rb "#" " echo \(aqdarkstar\(aq > /proc/sys/kernel/hostname"
.rb "#" " echo \(aqmydomain\(aq > /proc/sys/kernel/domainname"
.ee
.in
.ip
has the same effect as
.ip
.in +4n
.ex
.rb "#" " hostname \(aqdarkstar\(aq"
.rb "#" " domainname \(aqmydomain\(aq"
.ee
.in
.ip
note, however, that the classic darkstar.frop.org has the
hostname "darkstar" and dns (internet domain name server)
domainname "frop.org", not to be confused with the nis (network
information service) or yp (yellow pages) domainname.
these two
domain names are in general different.
for a detailed discussion
see the
.br hostname (1)
man page.
.tp
.i /proc/sys/kernel/hotplug
this file
contains the pathname for the hotplug policy agent.
the default value in this file is
.ir /sbin/hotplug .
.tp
.\" removed in commit 87f504e5c78b910b0c1d6ffb89bc95e492322c84 (tglx/history.git)
.ir /proc/sys/kernel/htab\-reclaim " (before linux 2.4.9.2)"
(powerpc only) if this file is set to a nonzero value,
the powerpc htab
.\" removed in commit 1b483a6a7b2998e9c98ad985d7494b9b725bd228, before 2.6.28
(see kernel file
.ir documentation/powerpc/ppc_htab.txt )
is pruned
each time the system hits the idle loop.
.tp
.ir /proc/sys/kernel/keys/*
this directory contains various files that define parameters and limits
for the key-management facility.
these files are described in
.br keyrings (7).
.tp
.ir /proc/sys/kernel/kptr_restrict " (since linux 2.6.38)"
.\" 455cd5ab305c90ffc422dd2e0fb634730942b257
the value in this file determines whether kernel addresses are exposed via
.i /proc
files and other interfaces.
a value of 0 in this file imposes no restrictions.
if the value is 1, kernel pointers printed using the
.i %pk
format specifier will be replaced with zeros unless the user has the
.br cap_syslog
capability.
if the value is 2, kernel pointers printed using the
.i %pk
format specifier will be replaced with zeros regardless
of the user's capabilities.
the initial default value for this file was 1,
but the default was changed
.\" commit 411f05f123cbd7f8aa1edcae86970755a6e2a9d9
to 0 in linux 2.6.39.
since linux 3.4,
.\" commit 620f6e8e855d6d447688a5f67a4e176944a084e8
only users with the
.br cap_sys_admin
capability can change the value in this file.
.tp
.i /proc/sys/kernel/l2cr
(powerpc only) this file
contains a flag that controls the l2 cache of g3 processor
boards.
if 0, the cache is disabled.
enabled if nonzero.
.tp
.i /proc/sys/kernel/modprobe
this file contains the pathname for the kernel module loader.
the default value is
.ir /sbin/modprobe .
the file is present only if the kernel is built with the
.b config_modules
.rb ( config_kmod
in linux 2.6.26 and earlier)
option enabled.
it is described by the linux kernel source file
.i documentation/kmod.txt
(present only in kernel 2.4 and earlier).
.tp
.ir /proc/sys/kernel/modules_disabled " (since linux 2.6.31)"
.\" 3d43321b7015387cfebbe26436d0e9d299162ea1
.\" from documentation/sysctl/kernel.txt
a toggle value indicating if modules are allowed to be loaded
in an otherwise modular kernel.
this toggle defaults to off (0), but can be set true (1).
once true, modules can be neither loaded nor unloaded,
and the toggle cannot be set back to false.
the file is present only if the kernel is built with the
.b config_modules
option enabled.
.tp
.ir /proc/sys/kernel/msgmax " (since linux 2.2)"
this file defines
a system-wide limit specifying the maximum number of bytes in
a single message written on a system v message queue.
.tp
.ir /proc/sys/kernel/msgmni " (since linux 2.4)"
this file defines the system-wide limit on the number of
message queue identifiers.
see also
.ir /proc/sys/kernel/auto_msgmni .
.tp
.ir /proc/sys/kernel/msgmnb " (since linux 2.2)"
this file defines a system-wide parameter used to initialize the
.i msg_qbytes
setting for subsequently created message queues.
the
.i msg_qbytes
setting specifies the maximum number of bytes that may be written to the
message queue.
.tp
.ir /proc/sys/kernel/ngroups_max " (since linux 2.6.4)"
this is a read-only file that displays the upper limit on the
number of a process's group memberships.
.tp
.ir /proc/sys/kernel/ns_last_pid " (since linux 3.3)"
see
.br pid_namespaces (7).
.tp
.ir /proc/sys/kernel/ostype " and " /proc/sys/kernel/osrelease
these files
give substrings of
.ir /proc/version .
.tp
.ir /proc/sys/kernel/overflowgid " and " /proc/sys/kernel/overflowuid
these files duplicate the files
.i /proc/sys/fs/overflowgid
and
.ir /proc/sys/fs/overflowuid .
.tp
.i /proc/sys/kernel/panic
this file gives read/write access to the kernel variable
.ir panic_timeout .
if this is zero, the kernel will loop on a panic; if nonzero,
it indicates that the kernel should autoreboot after this number
of seconds.
when you use the
software watchdog device driver, the recommended setting is 60.
.tp
.ir /proc/sys/kernel/panic_on_oops " (since linux 2.5.68)"
this file controls the kernel's behavior when an oops
or bug is encountered.
if this file contains 0, then the system
tries to continue operation.
if it contains 1, then the system
delays a few seconds (to give klogd time to record the oops output)
and then panics.
if the
.i /proc/sys/kernel/panic
file is also nonzero, then the machine will be rebooted.
.tp
.ir /proc/sys/kernel/pid_max " (since linux 2.5.34)"
this file specifies the value at which pids wrap around
(i.e., the value in this file is one greater than the maximum pid).
pids greater than this value are not allocated;
thus, the value in this file also acts as a system-wide limit
on the total number of processes and threads.
the default value for this file, 32768,
results in the same range of pids as on earlier kernels.
on 32-bit platforms, 32768 is the maximum value for
.ir pid_max .
on 64-bit systems,
.i pid_max
can be set to any value up to 2^22
.rb ( pid_max_limit ,
approximately 4 million).
.\" prior to 2.6.10, pid_max could also be raised above 32768 on 32-bit
.\" platforms, but this broke /proc/[pid]
.\" see http://marc.theaimsgroup.com/?l=linux-kernel&m=109513010926152&w=2
.tp
.ir /proc/sys/kernel/powersave\-nap " (powerpc only)"
this file contains a flag.
if set, linux-ppc will use the "nap" mode of
powersaving,
otherwise the "doze" mode will be used.
.tp
.i /proc/sys/kernel/printk
see
.br syslog (2).
.tp
.ir /proc/sys/kernel/pty " (since linux 2.6.4)"
this directory contains two files relating to the number of unix 98
pseudoterminals (see
.br pts (4))
on the system.
.tp
.i /proc/sys/kernel/pty/max
this file defines the maximum number of pseudoterminals.
.\" fixme document /proc/sys/kernel/pty/reserve
.\"     new in linux 3.3
.\"     commit e9aba5158a80098447ff207a452a3418ae7ee386
.tp
.i /proc/sys/kernel/pty/nr
this read-only file
indicates how many pseudoterminals are currently in use.
.tp
.i /proc/sys/kernel/random
this directory
contains various parameters controlling the operation of the file
.ir /dev/random .
see
.br random (4)
for further information.
.tp
.ir /proc/sys/kernel/random/uuid " (since linux 2.4)"
each read from this read-only file returns a randomly generated 128-bit uuid,
as a string in the standard uuid format.
.tp
.ir /proc/sys/kernel/randomize_va_space " (since linux 2.6.12)"
.\" some further details can be found in documentation/sysctl/kernel.txt
select the address space layout randomization (aslr) policy for the system
(on architectures that support aslr).
three values are supported for this file:
.rs
.ip 0 3
turn aslr off.
this is the default for architectures that don't support aslr,
and when the kernel is booted with the
.i norandmaps
parameter.
.ip 1
make the addresses of
.br mmap (2)
allocations, the stack, and the vdso page randomized.
among other things, this means that shared libraries will be
loaded at randomized addresses.
the text segment of pie-linked binaries will also be loaded
at a randomized address.
this value is the default if the kernel was configured with
.br config_compat_brk .
.ip 2
(since linux 2.6.25)
.\" commit c1d171a002942ea2d93b4fbd0c9583c56fce0772
also support heap randomization.
this value is the default if the kernel was not configured with
.br config_compat_brk .
.re
.tp
.i /proc/sys/kernel/real\-root\-dev
this file is documented in the linux kernel source file
.i documentation/admin\-guide/initrd.rst
.\" commit 9d85025b0418163fae079c9ba8f8445212de8568
(or
.i documentation/initrd.txt
before linux 4.10).
.tp
.ir /proc/sys/kernel/reboot\-cmd " (sparc only)"
this file seems to be a way to give an argument to the sparc
rom/flash boot loader.
maybe to tell it what to do after
rebooting?
.tp
.i /proc/sys/kernel/rtsig\-max
(only in kernels up to and including 2.6.7; see
.br setrlimit (2))
this file can be used to tune the maximum number
of posix real-time (queued) signals that can be outstanding
in the system.
.tp
.i /proc/sys/kernel/rtsig\-nr
(only in kernels up to and including 2.6.7.)
this file shows the number of posix real-time signals currently queued.
.tp
.ir /proc/[pid]/sched_autogroup_enabled " (since linux 2.6.38)"
.\" commit 5091faa449ee0b7d73bc296a93bca9540fc51d0a
see
.br sched (7).
.tp
.ir /proc/sys/kernel/sched_child_runs_first " (since linux 2.6.23)"
if this file contains the value zero, then, after a
.br fork (2),
the parent is first scheduled on the cpu.
if the file contains a nonzero value,
then the child is scheduled first on the cpu.
(of course, on a multiprocessor system,
the parent and the child might both immediately be scheduled on a cpu.)
.tp
.ir /proc/sys/kernel/sched_rr_timeslice_ms " (since linux 3.9)"
see
.br sched_rr_get_interval (2).
.tp
.ir /proc/sys/kernel/sched_rt_period_us " (since linux 2.6.25)"
see
.br sched (7).
.tp
.ir /proc/sys/kernel/sched_rt_runtime_us " (since linux 2.6.25)"
see
.br sched (7).
.tp
.ir /proc/sys/kernel/seccomp " (since linux 4.14)"
.\" commit 8e5f1ad116df6b0de65eac458d5e7c318d1c05af
this directory provides additional seccomp information and
configuration.
see
.br seccomp (2)
for further details.
.tp
.ir /proc/sys/kernel/sem " (since linux 2.4)"
this file contains 4 numbers defining limits for system v ipc semaphores.
these fields are, in order:
.rs
.ip semmsl 8
the maximum semaphores per semaphore set.
.ip semmns 8
a system-wide limit on the number of semaphores in all semaphore sets.
.ip semopm 8
the maximum number of operations that may be specified in a
.br semop (2)
call.
.ip semmni 8
a system-wide limit on the maximum number of semaphore identifiers.
.re
.tp
.i /proc/sys/kernel/sg\-big\-buff
this file
shows the size of the generic scsi device (sg) buffer.
you can't tune it just yet, but you could change it at
compile time by editing
.i include/scsi/sg.h
and changing
the value of
.br sg_big_buff .
however, there shouldn't be any reason to change this value.
.tp
.ir /proc/sys/kernel/shm_rmid_forced " (since linux 3.1)"
.\" commit b34a6b1da371ed8af1221459a18c67970f7e3d53
.\" see also documentation/sysctl/kernel.txt
if this file is set to 1, all system v shared memory segments will
be marked for destruction as soon as the number of attached processes
falls to zero;
in other words, it is no longer possible to create shared memory segments
that exist independently of any attached process.
.ip
the effect is as though a
.br shmctl (2)
.b ipc_rmid
is performed on all existing segments as well as all segments
created in the future (until this file is reset to 0).