### /proc/sys/fs/eaccess

- **Default Value:** The default value in this file is `0`.
- **Security Considerations:** Setting the value to `1` mitigates a long-standing class of security issues based on time-of-check, time-of-use (TOCTOU) races when accessing symbolic links.

### /proc/sys/fs/suid_dumpable (since Linux 2.6.13)

- **Description:** This file determines whether core dump files are produced for set-user-id or otherwise protected/tainted binaries. It also affects the ownership of files in a process's `/proc/[pid]` directory.
- **Values:**
  - **0 (default):** Core dumps are not produced for processes that have changed credentials (e.g., by calling `seteuid(2)`, `setgid(2)`, or executing a set-user-id or set-group-id program) or whose binary does not have read permission enabled.
  - **1 ("debug"):** All processes can produce core dumps. The core dump is owned by the filesystem user ID of the dumping process, and no security is applied. This mode is insecure as it allows unprivileged users to examine the memory contents of privileged processes.
  - **2 ("suidsafe"):** Binaries that would normally not be dumped (as in "0") are dumped but readable only by root. This allows the user to remove the core dump file but not to read it. For security reasons, core dumps in this mode will not overwrite one another or other files.

### /proc/sys/kernel/core_pattern (since Linux 3.6)

- **Description:** This file must either be an absolute pathname or a pipe command. If the `core_pattern` does not follow these rules, warnings will be written to the kernel log, and no core dump will be produced.

### /proc/sys/fs/super-max

- **Description:** This file controls the maximum number of superblocks, and thus the maximum number of mounted filesystems the kernel can handle. You need to increase `super-max` only if you need to mount more filesystems than the current value allows.

### /proc/sys/fs/super-nr

- **Description:** This file contains the number of filesystems currently mounted.

### /proc/sys/kernel

- **Description:** This directory contains files controlling a range of kernel parameters.

### /proc/sys/kernel/acct

- **Description:** This file contains three numbers: `highwater`, `lowwater`, and `frequency`. These values control the behavior of BSD-style process accounting. If free space on the filesystem where the log lives goes below `lowwater` percent, accounting suspends. If free space gets above `highwater` percent, accounting resumes. `frequency` determines how often the kernel checks the amount of free space (in seconds). Default values are `4`, `2`, and `30`.

### /proc/sys/kernel/auto_msgmni (Linux 2.6.27 to 3.18)

- **Description:** This file was used to control the recomputing of the value in `/proc/sys/kernel/msgmni` upon the addition or removal of memory or upon IPC namespace creation/removal. Since Linux 3.19, the content of this file has no effect, and reads from this file always return the value `0`.

### /proc/sys/kernel/cap_last_cap (since Linux 3.2)

- **Description:** See `capabilities(7)`.

### /proc/sys/kernel/cap-bound (from Linux 2.2 to 2.6.24)

- **Description:** This file held the value of the kernel capability bounding set (expressed as a signed decimal number). Starting with Linux 2.6.25, the system-wide capability bounding set disappeared and was replaced by a per-thread bounding set; see `capabilities(7)`.

### /proc/sys/kernel/core_pattern

- **Description:** See `core(5)`.

### /proc/sys/kernel/core_pipe_limit

- **Description:** See `core(5)`.

### /proc/sys/kernel/core_uses_pid

- **Description:** See `core(5)`.

### /proc/sys/kernel/ctrl-alt-del

- **Description:** This file controls the handling of Ctrl-Alt-Del from the keyboard. When the value is `0`, Ctrl-Alt-Del is trapped and sent to the `init(1)` program to handle a graceful restart. When the value is greater than zero, the system will immediately reboot without syncing its dirty buffers.

### /proc/sys/kernel/dmesg_restrict (since Linux 2.6.37)

- **Description:** This file determines who can see kernel syslog contents. A value of `0` imposes no restrictions. If the value is `1`, only privileged users can read the kernel syslog. Since Linux 3.4, only users with the `cap_sys_admin` capability may change the value in this file.

### /proc/sys/kernel/domainname and /proc/sys/kernel/hostname

- **Description:** These files can be used to set the NIS/YP domain name and the hostname of your system. For example:
  ```sh
  echo "darkstar" > /proc/sys/kernel/hostname
  echo "mydomain" > /proc/sys/kernel/domainname
  ```
  This has the same effect as:
  ```sh
  hostname "darkstar"
  domainname "mydomain"
  ```

### /proc/sys/kernel/hotplug

- **Description:** This file contains the pathname for the hotplug policy agent. The default value is `/sbin/hotplug`.

### /proc/sys/kernel/htab-reclaim (before Linux 2.4.9.2) (PowerPC only)

- **Description:** If this file is set to a nonzero value, the PowerPC htab is pruned each time the system hits the idle loop.

### /proc/sys/kernel/keys/*

- **Description:** This directory contains various files that define parameters and limits for the key-management facility. These files are described in `keyrings(7)`.

### /proc/sys/kernel/kptr_restrict (since Linux 2.6.38)

- **Description:** This file determines whether kernel addresses are exposed via `/proc` files and other interfaces. A value of `0` imposes no restrictions. If the value is `1`, kernel pointers printed using the `%pk` format specifier will be replaced with zeros unless the user has the `cap_syslog` capability. If the value is `2`, kernel pointers will be replaced with zeros regardless of the user's capabilities. The initial default value was `1`, but it was changed to `0` in Linux 2.6.39. Since Linux 3.4, only users with the `cap_sys_admin` capability can change the value in this file.

### /proc/sys/kernel/l2cr (PowerPC only)

- **Description:** This file contains a flag that controls the L2 cache of G3 processor boards. If `0`, the cache is disabled. If nonzero, the cache is enabled.

### /proc/sys/kernel/modprobe

- **Description:** This file contains the pathname for the kernel module loader. The default value is `/sbin/modprobe`. The file is present only if the kernel is built with the `CONFIG_MODULES` option enabled.

### /proc/sys/kernel/modules_disabled (since Linux 2.6.31)

- **Description:** This toggle value indicates if modules are allowed to be loaded in an otherwise modular kernel. The toggle defaults to `0` (off), but can be set to `1` (on). Once set to `1`, modules can neither be loaded nor unloaded, and the toggle cannot be set back to `0`. The file is present only if the kernel is built with the `CONFIG_MODULES` option enabled.

### /proc/sys/kernel/msgmax (since Linux 2.2)

- **Description:** This file defines a system-wide limit specifying the maximum number of bytes in a single message written on a System V message queue.

### /proc/sys/kernel/msgmni (since Linux 2.4)

- **Description:** This file defines the system-wide limit on the number of message queue identifiers. See also `/proc/sys/kernel/auto_msgmni`.

### /proc/sys/kernel/msgmnb (since Linux 2.2)

- **Description:** This file defines a system-wide parameter used to initialize the `msg_qbytes` setting for subsequently created message queues. The `msg_qbytes` setting specifies the maximum number of bytes that may be written to the message queue.

### /proc/sys/kernel/ngroups_max (since Linux 2.6.4)

- **Description:** This is a read-only file that displays the upper limit on the number of a process's group memberships.

### /proc/sys/kernel/ns_last_pid (since Linux 3.3)

- **Description:** See `pid_namespaces(7)`.

### /proc/sys/kernel/ostype and /proc/sys/kernel/osrelease

- **Description:** These files give substrings of `/proc/version`.

### /proc/sys/kernel/overflowgid and /proc/sys/kernel/overflowuid

- **Description:** These files duplicate the files `/proc/sys/fs/overflowgid` and `/proc/sys/fs/overflowuid`.

### /proc/sys/kernel/panic

- **Description:** This file gives read/write access to the kernel variable `panic_timeout`. If this is `0`, the kernel will loop on a panic; if nonzero, it indicates that the kernel should autoreboot after this number of seconds. When using the software watchdog device driver, the recommended setting is `60`.

### /proc/sys/kernel/panic_on_oops (since Linux 2.5.68)

- **Description:** This file controls the kernel's behavior when an oops or bug is encountered. If this file contains `0`, the system tries to continue operation. If it contains `1`, the system delays a few seconds (to give `klogd` time to record the oops output) and then panics. If the `/proc/sys/kernel/panic` file is also nonzero, the machine will be rebooted.

### /proc/sys/kernel/pid_max (since Linux 2.5.34)

- **Description:** This file specifies the value at which PIDs wrap around (i.e., the value in this file is one greater than the maximum PID). PIDs greater than this value are not allocated, so the value in this file also acts as a system-wide limit on the total number of processes and threads. The default value is `32768`, resulting in the same range of PIDs as on earlier kernels. On 32-bit platforms, `32768` is the maximum value for `pid_max`. On 64-bit systems, `pid_max` can be set to any value up to `2^22` (approximately 4 million).

### /proc/sys/kernel/powersave-nap (PowerPC only)

- **Description:** This file contains a flag. If set, Linux-PPC will use the "nap" mode of power saving; otherwise, the "doze" mode will be used.

### /proc/sys/kernel/printk

- **Description:** See `syslog(2)`.

### /proc/sys/kernel/pty (since Linux 2.6.4)

- **Description:** This directory contains two files relating to the number of Unix 98 pseudoterminals (see `pts(4)`) on the system.

### /proc/sys/kernel/pty/max

- **Description:** This file defines the maximum number of pseudoterminals.

### /proc/sys/kernel/pty/nr

- **Description:** This read-only file indicates how many pseudoterminals are currently in use.

### /proc/sys/kernel/random

- **Description:** This directory contains various parameters controlling the operation of the file `/dev/random`. See `random(4)` for further information.

### /proc/sys/kernel/random/uuid (since Linux 2.4)

- **Description:** Each read from this read-only file returns a randomly generated 128-bit UUID, as a string in the standard UUID format.

### /proc/sys/kernel/randomize_va_space (since Linux 2.6.12)

- **Description:** Selects the Address Space Layout Randomization (ASLR) policy for the system (on architectures that support ASLR). Three values are supported:
  - **0:** Turn ASLR off. This is the default for architectures that don't support ASLR and when the kernel is booted with the `norandmaps` parameter.
  - **1:** Make the addresses of `mmap(2)` allocations, the stack, and the VDSO page randomized. This means shared libraries will be loaded at randomized addresses, and the text segment of PIE-linked binaries will also be loaded at a randomized address. This value is the default if the kernel was configured with `CONFIG_COMPAT_BRK`.
  - **2:** (since Linux 2.6.25) Also support heap randomization. This value is the default if the kernel was not configured with `CONFIG_COMPAT_BRK`.

### /proc/sys/kernel/real-root-dev

- **Description:** This file is documented in the Linux kernel source file `Documentation/admin-guide/initrd.rst` (or `Documentation/initrd.txt` before Linux 4.10).

### /proc/sys/kernel/reboot-cmd (SPARC only)

- **Description:** This file seems to be a way to give an argument to the SPARC ROM/flash boot loader, possibly to tell it what to do after rebooting.

### /proc/sys/kernel/rtsig-max (up to and including Linux 2.6.7)

- **Description:** This file can be used to tune the maximum number of POSIX real-time (queued) signals that can be outstanding in the system.

### /proc/sys/kernel/rtsig-nr (up to and including Linux 2.6.7)

- **Description:** This file shows the number of POSIX real-time signals currently queued.

### /proc/[pid]/sched_autogroup_enabled (since Linux 2.6.38)

- **Description:** See `sched(7)`.

### /proc/sys/kernel/sched_child_runs_first (since Linux 2.6.23)

- **Description:** If this file contains the value `0`, then, after a `fork(2)`, the parent is first scheduled on the CPU. If the file contains a nonzero value, the child is scheduled first on the CPU. On a multiprocessor system, the parent and the child might both immediately be scheduled on a CPU.

### /proc/sys/kernel/sched_rr_timeslice_ms (since Linux 3.9)

- **Description:** See `sched_rr_get_interval(2)`.

### /proc/sys/kernel/sched_rt_period_us (since Linux 2.6.25)

- **Description:** See `sched(7)`.

### /proc/sys/kernel/sched_rt_runtime_us (since Linux 2.6.25)

- **Description:** See `sched(7)`.

### /proc/sys/kernel/seccomp (since Linux 4.14)

- **Description:** This directory provides additional seccomp information and configuration. See `seccomp(2)` for further details.

### /proc/sys/kernel/sem (since Linux 2.4)

- **Description:** This file contains four numbers defining limits for System V IPC semaphores:
  - **semmsl:** The maximum semaphores per semaphore set.
  - **semmns:** A system-wide limit on the number of semaphores in all semaphore sets.
  - **semopm:** The maximum number of operations that may be specified in a `semop(2)` call.
  - **semmni:** A system-wide limit on the maximum number of semaphore identifiers.

### /proc/sys/kernel/sg-big-buff

- **Description:** This file shows the size of the generic SCSI device (SG) buffer. You can't tune it just yet, but you could change it at compile time by editing `include/scsi/sg.h` and changing the value of `sg_big_buff`. However, there shouldn't be any reason to change this value.

### /proc/sys/kernel/shm_rmid_forced (since Linux 3.1)

- **Description:** If this file is set to `1`, all System V shared memory segments will be marked for destruction as soon as the number of attached processes falls to zero. In other words, it is no longer possible to create shared memory segments that exist independently of any attached process. The effect is as though a `shmctl(2)` `IPC_RMID` is performed on all existing segments as well as all segments created in the future (until this file is reset to `0`).