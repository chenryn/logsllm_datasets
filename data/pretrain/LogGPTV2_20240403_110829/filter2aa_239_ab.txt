表达式体方法参见第3章。
0.3.3 表达式体属性
与表达式体方法类似，只有get存取器的单行属性可以用lambda语法编写：
C# 5
    public string FullName
    {
      get
      {
        return FirstName + " " + LastName;
      }
    }
C# 6
    public string FullName => FirstName + " " + LastName;
表达式体属性参见第3章。
0.3.4 自动实现的属性初始化器
自动实现的属性可以用属性初始化器来初始化：
C# 5
    public class Person
    {
      public Person()
      {
        Age = 24;
      }
      public int Age {get; set; }
    }
C# 6
    public class Person
    {
      public int Age {get; set; } = 42;
    }
自动实现的属性初始化器参见第3章。
0.3.5 只读的自动属性
为了实现只读属性，C# 5需要使用完整的属性语法；而在C# 6中，可以使用自动实现
的属性：
C# 5
    private readonly int _bookId;
    public BookId
    {
      get
      {
        return _bookId;
      }
    }
C# 6
    public BookId {get; }
只读的自动属性参见第3章。
0.3.6 nameof运算符
使用新的nameof运算符，可以访问字段名、属性名、方法名或类型名。这样，在重构
时，就不会遗漏名称的改变：
C# 5
    public void Method(object o)
    {
      if (o == null) throw new ArgumentNullException("o");
C# 6
    public void Method(object o)
    {
      if (o == null) throw new ArgumentNullException(nameof(o));
nameof运算符参见第8章。
0.3.7 空值传播运算符
空值传播运算符简化了空值的检查：
C# 5
    int? age = p == null ? null : p.Age;
C# 6
    int? age = p? .Age;
新语法也有触发事件的优点：
C# 5
    var handler = Event;
    if (handler != null)
    {
      handler(source, e);
    }
C# 6
    handler?.Invoke(source, e);
空值传播运算符参见第8章。
0.3.8 字符串插值
字符串插值删除了对string.Format的调用，它不在字符串中使用编号的格式占位符，
占位符可以包含表达式：
C# 5
    public override ToString()
    {
      return string.Format("{0}, {1}", Title, Publisher);
    }
C# 6
    public override ToString() => $"{Title} {Publisher}";
与C# 5语法相比，C# 6示例的代码减少了许多，不仅因为它使用了字符串插值，还使
用了表达式体方法。
字符串插值还可以使用字符串格式，把它分配给FormattableString时会获得特殊的功
能。字符串插值参见第10章。
0.3.9 字典初始化器
字典现在可以用字典初始化器来初始化，类似于集合初始化器。
C# 5
    var dict = new Dictionary();
    dict.Add(3, "three");
    dict.Add(7, "seven");
C# 6
    var dict = new Dictionary()
    {
      [3] = "three",
      [7] = "seven"
    };
字典初始化器参见第11章。
0.3.10 异常过滤器
异常过滤器允许在捕获异常之前过滤它们。
C# 5
    try
    {
      //etc.
    }
    catch (MyException ex)
    {
      if (ex.ErrorCode ! =405) throw;
      // etc.
    }
C# 6
    try
    {
      //etc.
    }
    catch (MyException ex) when (ex.ErrorCode == 405)
    {
      // etc.
    }
新语法的一大优势是，它不仅减少了代码的长度，而且没有改变堆栈跟踪——在C# 5
中会改变堆栈跟踪。异常过滤器参见第14章。
0.3.11 Catch中的await
await现在可以在catch子句中使用。C# 5需要一种变通方法：
C# 5
    bool hasError = false;
    string errorMessage = null;
    try
    {
      //etc.
    }
    catch (MyException ex)
    {
      hasError = true;
      errorMessage = ex.Message;
    }
    if (hasError)
    {
      await new MessageDialog().ShowAsync(errorMessage);
    }
C# 6
    try
    {
      //etc.
    }
    catch (MyException ex)
    {
      await new MessageDialog().ShowAsync(ex.Message);
    }
这个功能不需要增强的C#语法，现在就能工作。这个增强需要微软公司大量的投资
才能实现，但是否使用这个平台真的没有关系。对用户来说，这意味着需要更少的代码
——仅仅是比较两个版本。
  注意： 新的C# 6语言特性参见后面的章节，本书的所有章节都使用了新的C#
语法。
0.4 UWP的新内容
Windows 
8引入一种新的编程API: 
Windows运行库（Windows 
Runtime）。使用
Windows运行库的应用程序可以通过Microsoft 
Store来使用，且有许多不同的名称。最初
称它为Metro应用程序或Metro样式的应用程序，也称为Modern应用程序、Windows Store
应用程序（尽管它们也可以通过PowerShell脚本来安装，不使用商店）和Universal应用程
序。这里可能遗漏了一些名字。如今，这些都只是Windows应用程序，运行在
UWP（Universal Windows Platform，通用Windows平台）上。
这些应用程序的理念是，让最终用户很容易通过Microsoft商店找到它们，提供便于触
屏的环境，这个环境是现代的用户界面，看起来很干净、光滑，并允许流畅地交互，而且
应用程序是可以信任的。更重要的是，已经了解Windows用户界面的用户应该被新的环境
所吸引。
第1版的设计准则有诸多限制，有一些缺陷。如何在应用程序中寻找东西？许多用户
在右边找不到工具栏，却发现它允许搜索许多应用程序。Windows 8.1把搜索功能搬到桌
面的一个搜索框中。同时，如果用户不在屏幕上从上扫到下或从下扫到上，就经常找不到
位于顶部或底部的应用栏。
Windows 
10使设计更加开放。可以使用对应用程序有用的东西，在用户界面上做出
决定，因为它与用户和应用程序最匹配。当然，它仍然最适合创建出好看的、光滑的、流
畅的设计。最好让用户与应用程序愉快地交互，确定如何完成任务应该不是很难。
新的Windows运行库是Windows运行库3.0，它基于以前的版本，定义了XAML用户界
面，实现了应用程序的生命周期，支持后台功能，在应用程序之间共享数据等。事实上，
新版本的运行库在所有区域都提供了更多的功能。
Windows应用程序现在使用.NET Core。通过NuGet包与Windows应用程序可以使用相
同的.NET库。最后，本地代码编译后，应用程序启动更快，消耗的内存更少。
与提供的附加功能相比，可能更重要的是现在可用的普遍性。Visual Studio 2013的第
一次更新为Windows 8应用程序包括了一个新的项目类型：通用（Universal）应用程序。
在这里，通用应用程序用3个项目实现：一个项目用于Windows应用程序，一个项目用于
Windows 
Phone应用程序，另一个是共享的代码项目。甚至可以在这些平台之间共享
XAML代码。新的通用项目模板包括一个项目。相同的二进制代码不仅可以用于Windows
和Windows Phone，还可以用于Xbox、物联网（Internet of Things, IoT）设备和HoloLens
等。当然，这些不同的平台所提供的功能不可能用于所有地方，但是使用这个不同的功
能，仍然可以创建二进制图像，在每个Windows 10设备上运行。
0.5 编写和运行C#代码的环境
.NET 
Core运行在Windows、Linux和Mac操作系统上。使用Visual 
Studio
Code（https://code. 
visualstudio.com），可以在任何操作系统上创建和构建程序。最好用
的开发工具是Visual 
Studio 
2015，也是本书使用的工具。可以使用Visual 
Studio
Community 2015版（https://www. visualstudio.com），但本书介绍的一些功能只有Visual
Studio的企业版提供。需要企业版时会提到。Visual Studio 2015需要Windows操作系统，
要求使用Windows 8.1或更高版本。
要构建和运行本书中的WPF应用程序，需要Windows平台。Windows 
7仍支持运行
WPF应用程序。
要构建通用的Windows应用程序，可以使用Windows 8.1和Visual Studio，但要测试和
运行这些应用程序，就需要Windows 10设备。
0.6 本书的内容
本书首先在第1章介绍.NET的整体体系结构，给出编写托管代码所需要的背景知识。
此后概述不同的应用程序类型，学习如何用新的开发环境CLI编译程序。之后本书分几部
分介绍C#语言及其在各个领域中的应用。
第I部分——C#语言
该部分给出C#语言的良好背景知识。尽管这一部分假定读者是有经验的编程人员，
但它没有假设读者拥有任何特定语言的知识。首先介绍C#的基本语法和数据类型，再介
绍C#的面向对象特性，之后介绍C#中的一些高级编程主题，如委托、lambda表达式、语
言集成查询（LINQ）、反射和异步编程。
第Ⅱ部分——.NET Core与Windows Runtime
该部分首先介绍全世界C#开发人员都使用的主要IDE: Visual Studio 2015。第17章学
习Visual Studio企业版可用的工具。
第18章还要学习C#编译器的工作原理，以及如何使用.NET编译器平台以编程方式修
改代码。
用C#代码创建功能时，不要跳过创建单元测试的步骤。一开始需要更多的时间，但
随着时间的推移，添加功能和维护代码时，就会看到其优势。第19章介绍如何创建单元测
试、网络测试和编码的UI测试。
第20～28章介绍独立于应用程序类型的.NET Core和Windows运行库。第20章学习如
何从应用程序中写出也可以在生产环境中使用的诊断信息。第21章和第22章介绍了使用任
务并行库（Task Parallel Library, TPL）进行并行编程，以及用于同步的各种对象。第23章
学习如何访问文件系统，读取文件和目录，了解如何使用System.IO名称空间中的流和
Windows运行库中的流来编写Windows应用程序。第24章利用流来了解安全性，以及如何
加密数据，允许进行安全的转换。还将学习使用套接字和使用更高级别的抽象（如
HttpClient，见第25章）的联网的核心基础。第26章讨论了Microsoft Composition，它允许
创建容器和部件之间的独立性。第27章论述如何将对象序列化到XML和JSON中，以及用
于读取和编写XML的不同技术。最后，第28章学会使用本地化的技术本地化应用程序，
该技术对Windows和Web应用程序都非常重要。
第Ⅲ部分——Windows应用程序
该部分的主题是使用XAML语法构建应用程序——UWP（通用Windows应用程序）和
WPF。第29章介绍XAML的基础，包括XAML语法、依赖属性，以及标记扩展（可以创建
自己的XAML语法）。第30章学习如何给基于XAML的应用程序指定样式。第31章主要关
注MVVM（Model-View-View Model）模式，学习利用基于XAML的应用程序中的数据绑
定特性，允许在很多UWP应用程序和WPF应用程序之间共享代码。使用Xamarin也可以为
iPhone和Android平台分享很多开发代码。然而，本书不探讨如何使用Xamarin进行开发。
论述UWP应用程序和WPF应用程序的介绍性章节后，有两章的内容讨论UWP应用程序的
具体特征，另外两章讨论WPF应用程序。第32章和第33章介绍具体的XAML控件与UWP
应用程序，如RelativePanel和AdaptiveTrigger、新编译的绑定、应用程序生命周期、共享
数据和创建后台任务。第34章和第35章论述WPF专用特性，如Ribbon控件，显示分层数据
的TreeView、WPF专用的数据绑定功能，创建流和固定文档，创建XPS（XML 
Paper
Specification）文件。
该部分的最后，第36章使用ClickOnce部署WPF应用程序，且包含在商店中获得UWP
应用程序的信息。
第Ⅳ部分——Web应用程序和服务
该部分阐述Web应用程序和服务，还包含关于ADO.NET的两章内容。虽然也可以在
客户应用程序中使用ADO.NET（第37章）和Entity Framework（第38章），但通常这些技
术在服务器上使用，从客户端调用服务。
第39章学习如何创建自己的Windows服务，操作系统启动时，Windows服务就会运
行。
ASP.NET的新版本ASP.NET Core 1.0参见第40章。其中讨论了ASP.NET的基础，以及
如何使用这些基础知识建立ASP.NET MVC 6。ASP.NET MVC 6的特点参见第41章。
  注意： 本书没有介绍ASP.NET Web Forms，尽管ASP.NET 4.6为ASP.NET
Web Forms提供了新特性。本书只论述使用ASP.NET Core 1.0的ASP.NET新技术版本。
第42章讨论了ASP.NET MVC 6的REST服务特性：ASP.NET Web API。Web应用程序
的发布和订阅技术使用ASP.NET技术WebHooks和SignalR的形式，在第43章中讨论。第44
章讨论了使用SOAP和WCF与服务交流的旧技术。
与前一部分一样，该部分的最后讨论部署，包括部署运行在互联网信息服务器
（Internet Information Server, IIS）上的网站，或使用Microsoft Azure托管网站。
0.7 如何下载本书的示例代码
在读者学习本书中的示例时，可以手工输入所有的代码，也可以使用本书附带的源代
码文件。本书使用的所有源代码都可以从本书合作站点
http://www.wrox.com/go/professionalcsharp6上下载。登录到站点http://www.wrox.com/上，
使用Search工具或书名列表就可以找到本书。接着单击本书细目页面上的Download Code
链接，就可以获得所有的源代码。也可以扫描封底的二维码获取本书的源代码。
  注意： 许多图书的书名都很相似，所以通过ISBN查找本书是最简单的，本
书英文版的ISBN是978-1-119-09660-3。
在下载了代码后，只需要用自己喜欢的解压缩软件对它进行解压缩即可。另外，也可
以进入http://www.wrox.com/dynamic/books/download.aspx上的Wrox代码下载主页，查看本
书和其他Wrox图书的所有代码。
.NET 
Core更新很快，所以本书的源代码也可以在
http://www.github.com/ProfessionalCSharp上获得。注意，GitHub上的源代码提供了实时的
源文件，它们会与Visual Studio的次要更新版本一起更新，还有新的实验性C#特性。为了
在本书出版后，更新源代码和额外的示例，可以查看GitHub网站。对应本书印刷版本的稳
定的源代码可以从Wrox网站上获得。
0.8 勘误表