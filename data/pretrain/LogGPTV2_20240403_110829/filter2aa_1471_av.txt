(UMPO) service to allow tracking and 
aggregation of energy usage across a 
variety of hardware and associating it on 
a per-application basis.
FilterCommunicationPort, 
FilterConnectionPort
Underlying objects backing the IRP-
based interface exposed by the Filter 
Manager API, which allows 
communication between user-mode 
services and applications, and the mini-
filters that are managed by Filter 
Manager, such as when using 
FilterSendMessage.
Partition
Enables the memory manager, cache 
manager, and executive to treat a region 
of physical memory as unique from a 
management perspective vis-à-vis the 
rest of system RAM, giving it its own 
instance of management threads, 
capabilities, paging, caching, etc. Used 
by Game Mode and Hyper-V, among 
others, to better distinguish the system 
from the underlying workloads.
Profile
Used by the profiling API that allows 
capturing time-based buckets of 
execution that track anything from the 
Instruction Pointer (IP) all the way to 
low-level processor caching information 
stored in the PMU counters.
RawInputManager
Represents the object that is bound to an 
HID device such as a mouse, keyboard, 
or tablet and allows reading and 
managing the window manager input 
that is being received by it. Used by 
modern UI management code such as 
when Core Messaging is involved.
Session
Object that represents the memory 
manager’s view of an interactive user 
session, as well as tracks the I/O 
manager’s notifications around 
connect/disconnect/logoff/logon for 
third-party driver usage.
Terminal
Only enabled if the terminal thermal 
manager (TTM) is enabled, this 
represents a user terminal on a device, 
which is managed by the user mode 
power manager (UMPO).
TerminalEventQueue
Only enabled on TTM systems, like the 
preceding object type, this represents 
events being delivered to a terminal on a 
device, which UMPO communicates 
with the kernel’s power manager about.
UserApcReserve
Similar to IoCompletionReserve in that 
it allows precreating a data structure to 
be reused during low-memory 
conditions, this object encapsulates an 
APC Kernel Object (KAPC) as an 
executive object.
WaitCompletionPacket
Used by the new asynchronous wait 
capabilities that were introduced in the 
user-mode Thread Pool API, this object 
wraps the completion of a dispatcher 
wait as an I/O packet that can be 
delivered to an I/O completion port.
WmiGuid
Used by the Windows Management 
Instrumentation (WMI) APIs when 
opening WMI Data Blocks by GUID, 
either from user mode or kernel mode, 
such as with IoWMIOpenBlock.
 Note
The executive implements a total of about 69 object types (depending on
the Windows version). Some of these objects are for use only by the
executive component that defines them and are not directly accessible by
Windows APIs. Examples of these objects include Driver, Callback, and
Adapter.
 Note
Because Windows NT was originally supposed to support the OS/2
operating system, the mutex had to be compatible with the existing design
of OS/2 mutual-exclusion objects, a design that required that a thread be
able to abandon the object, leaving it inaccessible. Because this behavior
was considered unusual for such an object, another kernel object—the
mutant—was created. Eventually, OS/2 support was dropped, and the
object became used by the Windows 32 subsystem under the name mutex
(but it is still called mutant internally).
Object structure
As shown in Figure 8-31, each object has an object header, an object body,
and potentially, an object footer. The Object Manager controls the object
headers and footer, whereas the owning executive components control the
object bodies of the object types they create. Each object header also contains
an index to a special object, called the type object, that contains information
common to each instance of the object. Additionally, up to eight optional
subheaders exist: The name information header, the quota information
header, the process information header, the handle information header, the
audit information header, the padding information header, the extended
information header, and the creator information header. If the extended
information header is present, this means that the object has a footer, and the
header will contain a pointer to it.
Figure 8-31 Structure of an object.
Object headers and bodies
The Object Manager uses the data stored in an object’s header to manage
objects without regard to their type. Table 8-16 briefly describes the object
header fields, and Table 8-17 describes the fields found in the optional object
subheaders.
Table 8-16 Object header fields
F
ie
l
d
Purpose
H
a
n
dl
e 
c
o
u
nt
Maintains a count of the number of currently opened handles to the 
object.
P
oi
nt
er 
c
o
u
nt
Maintains a count of the number of references to the object 
(including one reference for each handle), and the number of usage 
references for each handle (up to 32 for 32-bit systems, and 32,768 
for 64-bit systems). Kernel-mode components can reference an 
object by pointer without using a handle.
S
e
c
Determines who can use the object and what they can do with it. 
Note that unnamed objects, by definition, cannot have security.
u
ri
ty 
d
e
s
cr
ip
to
r
O
bj
e
ct 
ty
p
e 
in
d
e
x
Contains the index to a type object that contains attributes common 
to objects of this type. The table that stores all the type objects is 
ObTypeIndexTable. Due to a security mitigation, this index is 
XOR’ed with a dynamically generated sentinel value stored in 
ObHeaderCookie and the bottom 8 bits of the address of the object 
header itself.
I
n
f
o 
m
a
s
k
Bitmask describing which of the optional subheader structures 
described in Table 8-17 are present, except for the creator 
information subheader, which, if present, always precedes the 
object. The bitmask is converted to a negative offset by using the 
ObpInfoMaskToOffset table, with each subheader being associated 
with a 1-byte index that places it relative to the other subheaders 
present.
F
la
g
s
Characteristics and object attributes for the object. See Table 8-20 
for a list of all the object flags.
L
o
c
k
Per-object lock used when modifying fields belonging to this object 
header or any of its subheaders.
T
ra
c
e 
F
la
g
s
Additional flags specifically related to tracing and debugging 
facilities, also described in Table 8-20.
O
bj
e
ct 
C
re
at
e 
I
n
f
o
Ephemeral information about the creation of the object that is 
stored until the object is fully inserted into the namespace. This 
field converts into a pointer to the Quota Block after creation.
In addition to the object header, which contains information that applies to
any kind of object, the subheaders contain optional information regarding
specific aspects of the object. Note that these structures are located at a
variable offset from the start of the object header, the value of which depends
on the number of subheaders associated with the main object header (except,
as mentioned earlier, for creator information). For each subheader that is
present, the InfoMask field is updated to reflect its existence. When the
Object Manager checks for a given subheader, it checks whether the
corresponding bit is set in the InfoMask and then uses the remaining bits to
select the correct offset into the global ObpInfoMaskToOffset table, where it
finds the offset of the subheader from the start of the object header.
These offsets exist for all possible combinations of subheader presence,
but because the subheaders, if present, are always allocated in a fixed,
constant order, a given header will have only as many possible locations as
the maximum number of subheaders that precede it. For example, because
the name information subheader is always allocated first, it has only one
possible offset. On the other hand, the handle information subheader (which
is allocated third) has three possible locations because it might or might not
have been allocated after the quota subheader, itself having possibly been
allocated after the name information. Table 8-17 describes all the optional
object subheaders and their locations. In the case of creator information, a
value in the object header flags determines whether the subheader is present.
(See Table 8-20 for information about these flags.)
Table 8-17 Optional object subheaders
Na
me
Purpose
B
it
Offset
Cr
eat
or 
inf
or
ma
tio
n
Links the object into a list for all the objects of the 
same type and records the process that created the 
object, along with a back trace.
0 
(
0
x
1
)
ObpInf
oMask
ToOffs
et[0])
Na
me 
inf
or
ma
Contains the object name, responsible for making 
an object visible to other processes for sharing, and 
a pointer to the object directory, which provides the 
hierarchical structure in which the object names are 
stored.
1 
(
0
x
2
)
ObpInf
oMask
ToOffs
et[Info
Mask 
& 0x3]
tio
n
Ha
ndl
e 
inf
or
ma
tio
n
Contains a database of entries (or just a single 
entry) for a process that has an open handle to the 
object (along with a per-process handle count).
2 
(
0
x
4
)
ObpInf
oMask
ToOffs
et[Info
Mask 
& 0x7]
Qu
ota 
inf
or
ma
tio
n
Lists the resource charges levied against a process 
when it opens a handle to the object.
3 
(
0
x
8
)
ObpInf
oMask
ToOffs
et[Info
Mask 
& 
0xF]
Pro
ces
s 
inf
or
ma
tio
n
Contains a pointer to the owning process if this is 
an exclusive object. More information on exclusive 
objects follows later in the chapter.
4 
(
0
x