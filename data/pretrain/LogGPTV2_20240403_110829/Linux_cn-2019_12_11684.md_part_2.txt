#### awk 中的数组
你已经知道如何通过使用 `$` 符号和字段编号来收集特定字段的值，但是在这种情况下，你需要将其存储在数组中而不是将其打印到终端。这是通过 `awk` 数组完成的。`awk` 数组的重要之处在于它包含键和值。 想象一下有关本文的内容；它看起来像这样：`author:"seth",title:"How to sort with awk",length:1200`。诸如作者、标题和长度之类的元素是键，跟着的内容为值。
在排序的上下文中这样做的好处是，你可以将任何字段分配为键，将任何记录分配为值，然后使用内置的 `awk` 函数 `asorti()`（按索引排序）按键进行排序。现在，随便假设你*只*想按第二个字段排序。
*没有*被特殊关键字 `BEGIN` 或 `END` 引起来的 `awk` 语句是在每个记录都要执行的循环。这是脚本的一部分，该脚本扫描数据中的模式并进行相应的处理。每次 `awk` 将注意力转移到一条记录上时，都会执行 `{}` 中的语句（除非以 `BEGIN` 或 `END` 开头）。
要将键和值添加到数组，请创建一个包含数组的变量（在本示例脚本中，我将其称为 `ARRAY`，虽然不是很原汁原味，但很清楚），然后在方括号中分配给它键，用等号（`=`）连接值。
```
{   # dump each field into an array
    ARRAY[$2] = $R;
}
```
在此语句中，第二个字段的内容（`$2`）用作关键字，而当前记录（`$R`）用作值。
### asorti() 函数
除了数组之外，`awk` 还具有一些基本函数，你可以将它们用作常见任务的快速简便的解决方案。GNU awk中引入的函数之一 `asorti()` 提供了按键（*索引*）或值对数组进行排序的功能。
你只能在对数组进行填充后对其进行排序，这意味着此操作不能对每个新记录都触发，而只能在脚本的最后阶段进行。为此，`awk` 提供了特殊的 `END` 关键字。与 `BEGIN` 相反，`END` 语句仅在扫描了所有记录之后才触发一次。
将这些添加到你的脚本：
```
END {
    asorti(ARRAY,SARRAY);
    # get length
    j = length(SARRAY);
    for (i = 1; i &lt;= j; i++) {
        printf("%s %s\n", SARRAY[i],ARRAY[SARRAY[i]])
    }
}
```
`asorti()` 函数获取 `ARRAY` 的内容，按索引对其进行排序，然后将结果放入名为 `SARRAY` 的新数组（我在本文中发明的任意名称，表示“排序的 ARRAY”）。
接下来，将变量 `j`（另一个任意名称）分配给 `length()` 函数的结果，该函数计算 `SARRAY` 中的项数。
最后，使用 `for` 循环使用 `printf()` 函数遍历 `SARRAY` 中的每一项，以打印每个键，然后在 `ARRAY` 中打印该键的相应值。
### 运行该脚本
要运行你的 `awk` 脚本，先使其可执行：
```
$ chmod +x sorter.awk
```
然后针对 `penguin.list` 示例数据运行它：
```
$ ./sorter.awk penguins.list
antipodes Megadyptes;antipodes;Milne-Edwards;1880;Yellow-eyed
chrysocome Eudyptes;chrysocome;Viellot;1816;Sothern Rockhopper
demersus Spheniscus;demersus;Brisson;1760;African
forsteri Aptenodytes;forsteri;Miller,JF;1778;Emperor
linux Torvaldis;linux;Ewing,L;1996;Tux
minor Eudyptula;minor;Bonaparte;1867;Little Blue
papua Pygoscelis;papua;Wagler;1832;Gentoo
```
如你所见，数据按第二个字段排序。
这有点限制。最好可以在运行时灵活选择要用作排序键的字段，以便可以在任何数据集上使用此脚本并获得有意义的结果。
### 添加命令选项
你可以通过在脚本中使用字面值 `var` 将命令变量添加到 `awk` 脚本中。更改脚本，以使迭代子句在创建数组时使用 `var`：
```
{ # dump each field into an array
    ARRAY[$var] = $R;
}
```
尝试运行该脚本，以便在执行脚本时使用 `-v var` 选项将其按第三字段排序：
```
$ ./sorter.awk -v var=3 penguins.list
Bonaparte Eudyptula;minor;Bonaparte;1867;Little Blue
Brisson Spheniscus;demersus;Brisson;1760;African
Ewing,L Torvaldis;linux;Ewing,L;1996;Tux
Miller,JF Aptenodytes;forsteri;Miller,JF;1778;Emperor
Milne-Edwards Megadyptes;antipodes;Milne-Edwards;1880;Yellow-eyed
Viellot Eudyptes;chrysocome;Viellot;1816;Sothern Rockhopper
Wagler Pygoscelis;papua;Wagler;1832;Gentoo
```
### 修正
本文演示了如何在纯 GNU awk 中对数据进行排序。你可以对脚本进行改进，以便对你有用，花一些时间在`gawk` 的手册页上研究 [awk 函数](https://www.gnu.org/software/gawk/manual/html_node/Built_002din.html#Built_002din)并自定义脚本以获得更好的输出。
这是到目前为止的完整脚本：
```
#!/usr/bin/awk -f
# GPLv3 appears here
# usage: ./sorter.awk -v var=NUM FILE
BEGIN { FS=";"; }
{ # dump each field into an array
    ARRAY[$var] = $R;
}
END {
    asorti(ARRAY,SARRAY);
    # get length
    j = length(SARRAY);
    for (i = 1; i &lt;= j; i++) {
        printf("%s %s\n", SARRAY[i],ARRAY[SARRAY[i]])
    }
}
```
---
via: 
作者：[Seth Kenlon](https://opensource.com/users/seth) 选题：[lujun9972](https://github.com/lujun9972) 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出