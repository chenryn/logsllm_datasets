# 验收测试环境
根据我们的需要，我们可以通过在本地 Docker 主机上运行应用(就像我们在上一章中所做的那样)或者使用远程登台环境来测试应用。前一种解决方案更接近生产中发生的情况，因此可以认为是更好的解决方案。这与前一章*方法 1:Jenkins-第一次验收测试*部分中介绍的内容非常接近。唯一的区别是，现在我们将应用部署在远程 Docker 主机上。
为此，我们可以使用带有`-H`参数的`docker`(或`docker-compose`命令)，该参数指定远程 Docker 主机地址。这将是一个很好的解决方案，如果您不打算使用 Ansible 或任何其他配置管理工具，那么这就是应该走的路。然而，由于本章已经提到的原因，使用 Ansible 是有益的。在这种情况下，我们可以在持续交付管道中使用`ansible-playbook`命令。
```
stage("Deploy to staging") {
    steps {
        sh "ansible-playbook playbook.yml -i inventory/staging"
    }
}
```
如果`playbook.yml`和 docker-compose.yml 看起来与在*中一样，那么将应用及其依赖项部署到暂存环境中就足够了。*
`Acceptance test`阶段看起来和上一章完全一样。唯一的调整可以是转移环境(或其负载平衡器)的主机名。还可以针对运行在登台环境中的应用添加性能测试或其他非功能测试的阶段。
所有测试通过后，是时候发布应用了。
# 释放；排放；发布
生产环境应该尽可能靠近登台环境。发布的 Jenkins 步骤也应该非常类似于将应用部署到登台环境的阶段。
在最简单的场景中，唯一的区别是清单文件和应用配置(例如，在 Spring Boot 应用的情况下，我们将设置不同的 Spring 配置文件，这导致采用不同的属性文件)。在我们的例子中，没有应用属性，所以唯一的区别是清单文件。
```
stage("Release") {
    steps {
        sh "ansible-playbook playbook.yml -i inventory/production"
    }
}
```
In reality, the release step can be a little more complex if we want to provide zero downtime deployment. More on that topic is presented in the next chapters.
发布完成后，我们可能会认为一切都完成了；然而，还有一个缺失的阶段，一个烟雾测试。
# 烟雾测试
冒烟测试是验收测试的一个非常小的子集，它的唯一目的是检查发布过程是否成功完成。否则，我们可能会遇到应用完全正常的情况；然而，在发布过程中有一个问题，所以我们可能会以一个不工作的产品结束。
烟雾测试通常以与验收测试相同的方式定义。所以管道中的`Smoke test`阶段应该是这样的:
```
stage("Smoke test") {
    steps {
        sleep 60
        sh "./smoke_test.sh"
    }
}
```
设置好一切后，持续交付构建应该自动运行，应用应该发布到生产环境中。通过这一步，我们已经以最简单但最高效的形式完成了持续交付管道。
# 完成 Jenkins 文件
总而言之，在最近的章节中，我们已经创建了相当多的阶段，这导致了一个完整的持续交付管道，可以在许多项目中成功使用。
接下来，我们看到计算器项目的完整 Jenkins 文件:
```
pipeline {
  agent any
  triggers {
    pollSCM('* * * * *')
  }
  stages {
    stage("Compile") { steps { sh "./gradlew compileJava" } }
    stage("Unit test") { steps { sh "./gradlew test" } }
    stage("Code coverage") { steps {
      sh "./gradlew jacocoTestReport"
      publishHTML (target: [
              reportDir: 'build/reports/jacoco/test/html',
              reportFiles: 'index.html',
              reportName: "JaCoCo Report" ])
      sh "./gradlew jacocoTestCoverageVerification"
    } }
    stage("Static code analysis") { steps {
      sh "./gradlew checkstyleMain"
      publishHTML (target: [
              reportDir: 'build/reports/checkstyle/',
              reportFiles: 'main.html',
              reportName: "Checkstyle Report" ])
    } }
    stage("Build") { steps { sh "./gradlew build" } }
    stage("Docker build") { steps {
      sh "docker build -t leszko/calculator:${BUILD_TIMESTAMP} ."
   } }
    stage("Docker push") { steps {
      sh "docker push leszko/calculator:${BUILD_TIMESTAMP}"
    } }
    stage("Deploy to staging") { steps {
      sh "ansible-playbook playbook.yml -i inventory/staging"
      sleep 60
    } }
    stage("Acceptance test") { steps { sh "./acceptance_test.sh" } }  
    // Performance test stages
    stage("Release") { steps {
      sh "ansible-playbook playbook.yml -i inventory/production"
      sleep 60
    } }
    stage("Smoke test") { steps { sh "./smoke_test.sh" } }
  }
}
```
You can find this Jenkinsfile on GitHub at [https://github.com/leszko/calculator/blob/master/Jenkinsfile](https://github.com/leszko/calculator/blob/master/Jenkinsfile).
# 练习
在本章中，我们已经介绍了持续交付管道的许多新方面；为了更好地理解这一概念，我们建议您进行以下练习:
1.  添加一个性能测试，用于测试“hello world”服务:
    *   “你好世界”服务可以从上一章中获取
    *   创建一个`performance_test.sh`脚本，并行调用 100 次，检查平均请求-响应时间是否低于 1 秒
    *   您可以对脚本使用黄瓜或`curl`命令
2.  创建一个 Jenkins 管道，将“hello world”web 服务构建为版本化的 Docker 映像，并执行性能测试:
    *   创建`Docker build`阶段，用“hello world”服务构建 Docker 映像，并添加时间戳作为版本标记
    *   创建一个使用 Docker 映像的可移植剧本
    *   添加`Deploy to staging`阶段，将映像部署到远程机器中
    *   增加`Performance testing`阶段，执行`performance_test.sh`
    *   运行管道并观察结果
# 摘要
在本章中，我们已经完成了持续交付管道，它最终发布了应用。以下是本章的要点:
*   为了实现持续交付，两个环境是不可或缺的:准备和生产。
*   非功能测试是持续交付过程的重要组成部分，应该始终被视为管道阶段。
*   不适合持续交付过程的非功能测试应该被视为周期性任务，以便监控整体性能趋势。
*   应用应始终进行版本控制；但是，版本控制策略取决于应用的类型。
*   最小的持续交付管道可以实现为一系列脚本，以两个阶段结束:发布和冒烟测试。
*   烟雾测试应始终作为持续交付管道的最后阶段添加，以检查发布是否成功。
在下一章中，我们将看一下 Docker Swarm 工具，它帮助我们创建一个 Docker 主机集群。**