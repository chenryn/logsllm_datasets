w=0
  kn
(d) Walk scheme S4
  2n
(cid:17)(cid:17)(cid:17)
  1n
w=1
w=0
1i(cid:16)v
iv
w=1
w=1
w=1
  kn
  2n
(h) Walk scheme S8
  3n
(cid:17)(cid:17)(cid:17)
1{ ,
(cid:32) { ,
1,
r
1(cid:32)
, }k
, }
,
r
Resources (e.g. Files and 
Network Connections)
w
 Walk Weight
Previous
Node
Current
Node
Neighbor 
Node
Process
Node
Resource
Node
Dependency
Previous
Step
Next Possible 
Step
1n
w=0
w=0
iv
w=1
w=1
1i(cid:16)v
2i(cid:16)v
kn
(cid:17)(cid:17)(cid:17)
1r
(e) Walk scheme S5
1{ ,
{ ,11,1(cid:32)
{ ,
v
(cid:32)
, }
, },,
v
i
v
v1
1
1
w=0
2n
w=0
1n
iv
2i(cid:16)v
1i(cid:16)v
w=1
w=0
  2n
w=0
w=0
3n
kn
(f) Walk scheme S6
(cid:17)(cid:17)(cid:17)
Walk Route 
Produced So Far
1{ ,
{ ,1,1(cid:32)
n
(cid:32)
, }k
, },
n
 Neighbors of 
iv
Fig. 5: Hierarchical walk schemes, where w denotes the walk weight.
bors and the global process lineage trees to ensure that
intimate processes are more likely to be sampled into the
same walk route, and thus they will have the similar contexts.
For each process node p, DEPCOMM examines p’s one-hop
neighbor nodes, and associates p with: x parent process node,
y child process nodes, and z accessed resource nodes. In
particular, we observe that for a process pr and its child
process pc,
if pc starts to spawn its own child processes
(typically more than one child processes), pc is very likely to
initiate a new system task and the spawned child processes
do not cooperate with pr. Thus, the child processes of pc
should be in a different community from pr’s. To identify such
creations of child processes, DEPCOMM searches the global
process lineage trees and associates each process node with {
its lowest ancestor that has multiple child processes.
With the information collected from the neighbors of the
processes and the global process lineage trees (i.e.,xyz{),
DEPCOMM employs 8 hierarchical walk schemes to generate
walk routes. Speciﬁcally, when the walker starts at a process
node v1, it assigns equal weights to each of neighbors and
randomly move to one of them. After this initial step, the
walker chooses the next node based on 8 hierarchy walk
schemes, as shown in Fig. 5. Without loss of generality, we
assume that the walker is currently at the node vi, the walk
route produced so far is Wv1 = {v1,··· , vi}, the neighbors
is a set of nodes N = {n1,··· , nk}, R(v) returns
of vi
the resources accessed by a process node v, and L(v) ﬁnds
the process node v’s lowest ancestor that has multiple child
processes. We next describe the walk schemes in detail:
• Scheme S1: Consider that vi−1 presents the parent process
of vi. If N contains other neighbor nodes except vi−1, the
walker will randomly walk to one of these neighbors, i.e.,
∀nj ∈ N, nj (cid:9)= vi−1, w(vi, nj) = 1, w(vi, vi−1) = 0. If
vi has only one neighbor (i.e., vi−1), to avoid the early
termination of the walk, the walker will return to vi−1, i.e.,
w(vi, vi−1) = 1.
• Scheme S2: Consider that vi−1 represents a child process
of vi. In this case, other child processes of vi may not
belong to the same community as vi−1, unless they have
data dependencies with vi−1. Thus, if there are other child
processes that access the same resources as vi−1, the walker
will walk to the child process nodes with a high probability,
i.e., ∀nj ∈ N, nj (cid:9)= vi−1, R(nj)∩ R(vi−1) (cid:9)= ∅, w(vi, nj) =
1, w(vi, vi−1) = 0. Otherwise, the walker will return to
vi−1, i.e., w(vi, vi−1) = 1, w(vi, nj) = 0.
• Scheme S3: Consider that vi−1 represents a child process
of vi and vi−1 is the only child process of vi. This indicates
that vi and vi−1 cooperate to process some data, and thus
they belong to the same community. Thus, if there are other
neighbors except vi−1, the walker will continue to explore
(cid:9)= vi−1, w(vi, nj) =
without return,
1, w(vi, vi−1) = 0. Otherwise, to avoid the early termi-
nation of the walk, the walker will return to vi−1, i.e.,
w(vi, vi−1) = 1.
i.e., ∀nj ∈ N, nj
• Scheme S4: Consider that vi−1 is a process node and vi
is a resource node. The processes accessing vi may belong
to the vi−1’s community if vi−1 and these processes have
a common parent process. Thus, we let the walker walk to
the neighbors that share the same parent process as vi−1
with a high probability, i.e., ∀nj ∈ N, nj (cid:9)= vi−1, L(nj) =
L(vi−1), w(vi, nj) = 1, w(vi, vi−1) = 0. Otherwise, the
walker will return to vi−1, i.e., w(vi, vi−1) = 1, w(vi, nj) =
0.
• Scheme S5: Consider that vi−1 is a resource node, vi is a
process node with more than one child processes, and vi−2
is the child process of vi. In this case, other child processes
of vi may not belong to the community as vi−2, unless they
have data dependencies with vi−2. Thus, the walker will
walk to vi−2 and the child process nodes that access the
same resources as vi−2, i.e., ∀nj ∈ N, nj (cid:9)= vi−1, nj (cid:9)=
vi−2, R(nj) ∩ R(vi−2) (cid:9)= ∅, w(vi, nj) = 1, w(vi, vi−2) = 1,
and the weights of the other neighbors are set to 0.
• Scheme S6: Consider that vi−1 is a resource node, vi is a
process node with more than one child processes, and vi−2
is not the child process of vi. In this case, we treat vi as
a master process of a community, and the child processes
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:11 UTC from IEEE Xplore.  Restrictions apply. 
546
of vi and vi−2 do not belong to the same community.
Thus, the walker will return to vi−1, i.e., ∀nj ∈ N, nj (cid:9)=
vi−1, w(vi, nj) = 0, w(vi, vi−1) = 1.
• Scheme S7: Consider that vi−1 is a resource node, vi is
a process node with more than one child processes, and
vi−2 = vi. This indicates that vi−1 is the end of an
information ﬂow. To increase the efﬁciency of sampling
intimate processes, the walker will walk without return, i.e.,
∀nj ∈ N, nj (cid:9)= vi−1, w(vi, nj) = 1, w(vi, vi−1) = 0.
• Scheme S8: Consider that vi−1 is a resource node and vi
is a process node with at most one child process. In this
case, if vi has other neighbor nodes except vi−1, the walker
will walk to the neighbor nodes without return, i.e., ∀nj ∈
N, nj (cid:9)= vi−1, w(vi, nj) = 1, w(vi, vi−1) = 0. If vi−1 is the
only neighbor of vi, to avoid the early termination of the
walk, the walker will return to vi−1, i.e., w(vi, vi−1) = 1.
2) Process Node Representation. We make an analogy
by regarding nodes in a dependency graph as words and
walk routes as ordered sequences of words. DEPCOMM
employs SkipGram [62], a widely-used word representation
learning algorithm, to learn the behavior representation of
process nodes in walk routes. More speciﬁcally, given a
process node p and a contextual window size t, SkipGram
extracts the sub-sequence Wp = {vi−t,··· , vi,··· , vi+t}
that consists of vi = p and its contextual nodes vi+k
(k ∈ (−t, t)) from each walk route containing p. Then, the
d-dimension vector Φ(vi) of vi is learned by maximizing the
log-probability of any node appearing in the sub-sequences,
i.e., logP r({vi−t,··· , vi−1, vi+1,··· , vi+t}|Φ(vi)). The op-
timization process aims to learn similar behavior represen-
tations for intimate process nodes with the similar con-
textual nodes. However,
the optimization problem is NP-
hard. To make the optimization problem tractable, we as-
sume that the probabilities of choosing each node are con-
ditional
independent, and the objective function is con-
P r(vi+k|Φ(vi). Further, the ob-
verted into: log
−t≤k≤t,k(cid:3)=0
jective function is modeled using the softmax function:
exp(Φ(vi+k)·Φ(vi))
v∈V exp(Φ(v)·Φ(vi)) [37]. However, it is still
(cid:2)
log
expensive to solve this optimization for a large graph, and
thus we further use NEG (Negative Sampling) function [63]
to approximate it. The model parameters for Φ(vi) is adjusted
using stochastic gradient ascent.
−t≤k≤t,k(cid:3)=0
(cid:2)
(cid:2)
3) Process Node Clustering. To compute the overlapping
clustering for process nodes based on their behavior represen-
tations, DEPCOMM employs a soft clustering method, FCM
(Fuzzy C-Means) [64]. Unlike the hard clustering method
(i.e., K-means) that classiﬁes a process node to only one
cluster, FCM outputs the membership degree of each process
node in each cluster by minimizing the objection function:
ij||vi − cj||2, where uij denotes the
J =
degree of a process node vi belonging to a community cj.
vi is classiﬁed to cj, if uij is higher than a given thresh-
old. Following the recent work [65], we set the threshold
λ = 0.8 · maxj{uij}. If a process node is labeled with
(cid:3)|Vp|
(cid:3)|C|
j=1 u2
i=1
P1
P1
P2
P2
P0
P1
P1
P2
P2
F1
...
P1
P1
P2
P2
P0
P1*
P1*
P2*
P2*
F1
P0
F1
F1
F2
F2
...
Fn
Fn
P1
P0
F*
P1
(a)
(b)
j=1
i=1 u2
(cid:3)|Vp|
Fig. 6: Community compression based on (a) a process-
based pattern and (b) a resource-based pattern
multiple communities (i.e., overlapping), we create multiple
replicas of the node, and assign one replica to each com-
munity. In addition, DEPCOMM determines the number of
communities |C| according to the fuzzy partition coefﬁcient
(FPC) F (|C|) = 1/|Vp| (cid:3)|C|
ij [66], which is used to
measure the cluster validity for different numbers of clusters.
As a higher value of FPC indicates a better description for the
data distribution, DEPCOMM selects the number of clusters
|C| with the maximum FPC, i.e., |C| = argmax(F (|C|)).
Resource Node Association. Given a resource node r and a
process node p, if they are connected by an edge, then v is
associated to the community that p belongs to. If a resource
node are connected with multiple process nodes from different
communities, this resource node is an overlapping node, and
we create replicas of the resource node and assign a replica
to each community.
Dependencies across Communities. We categorize depen-
dencies across communities as edge-based dependencies (i.e.,
the dependency represented by an inter-community edge be-
tween communities) and node-based dependencies (i.e., the
dependency represented by overlapping nodes). As these nodes
lack visible information ﬂow directions for security analysts,
DEPCOMM creates a directed edge to connect the replicas
(e.g., the blue dashed arrows in Fig. 1). Speciﬁcally, given
two replicas v1(1) and v1(2) of a node v1, where v1(1) is in
the community Ci and v1(2) is in the community Cj, if v1(1)
has an in-edge e1, v1(2) has an out-edge e2, and the start time
of e1 is earlier than the end time of e2, then we create an
directed edge from v1(1) to v1(2).
D. Community Compression
Process-based Patterns. Process-based patterns describe
repetitive activities that spawn same set of processes to process
some resources. Fig. 6(a) shows an example: a process P0
repetitively spawns the child processes named P1 and P2 to
write the ﬁle F1. But keeping repetitive activities do not provide
extra values for security analysts. Thus, DEPCOMM aims to
identify such patterns and merge the repeated nodes and edges.
This process includes the following four steps:
• Step 1: Building process lineage tree. Given a process-
centric community, DEPCOMM builds a process lineage tree
rooted from the master process of the community by travers-
ing the process nodes inside the community. The process
lineage tree can present processes’ spawning behaviors.
• Step 2: Association with Accessed Resources. To capture
the resource usage of each process in the process lineage
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:11 UTC from IEEE Xplore.  Restrictions apply. 
547
tree, DEPCOMM inspects the events inside the community
to identify the resources accessed by these processes. Specif-
ically, each process is associated with the representative
attributes of the accessed resources (i.e., ﬁle names for ﬁles
and IPs for network connections) and the operation types
on these resources.
• Step 3: Mining Process-based Patterns. A process-based
pattern in the process lineage tree is the repeated bottom-
up sub-trees [67]. , where a bottom-up sub-tree includes
a node and all its descendants. Unlike induced sub-tree
and embedded sub-tree that have partial descendants [68], a
bottom-up sub-tree can present a complete process spawning
activity. Specially, DEPCOMM uses the process lineage
tree to generate a sub-tree for each process node. Then,
DEPCOMM encodes a sub-tree to a string by appending
the associated resource attributes of the process nodes in
the sub-tree, and identiﬁes identical strings (i.e., repeated
subtrees).
• Step 4: Compression based on the Patterns. The identiﬁed
repeated sub-trees may have different parent nodes. To
ensure the dependencies between the sub-trees and their
parent nodes are not broken, DEPCOMM selects only the
repeated sub-trees having the same parent node, and merges
the selected sub-trees into one sub-tree. The attributes of
each node and edge in the merged sub-tree are the unions
of the attributes of the original nodes and edges.
Resource-based Patterns. A resource pattern identiﬁes re-
sources that are repetitively accessed by a same set of pro-
cesses. To identify such patterns, DEPCOMM ﬁrst associates
the processes with their accessed resources, and then search
each resource to identify the repetitive accesses. Based on the
found patterns, the resource nodes are merged into one node,
and the attributes of the merged nodes are the union of the
attributes of the original resource nodes.