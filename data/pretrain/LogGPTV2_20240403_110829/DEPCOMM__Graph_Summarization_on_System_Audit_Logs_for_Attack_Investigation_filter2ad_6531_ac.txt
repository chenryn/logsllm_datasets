program.tar→tar→../data.csv 
[0.4941]
(cid:38)(cid:82)(cid:80)(cid:80)(cid:88)(cid:81)(cid:76)(cid:87)(cid:92)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)
(cid:36)(cid:87)(cid:87)(cid:68)(cid:70)(cid:78)(cid:16)(cid:53)(cid:72)(cid:79)(cid:68)(cid:87)(cid:72)(cid:71)(cid:3)(cid:40)(cid:89)(cid:72)(cid:81)(cid:87)(cid:86)
(cid:38)(cid:82)(cid:80)(cid:80)(cid:88)(cid:81)(cid:76)(cid:87)(cid:92)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:82)(cid:88)(cid:87)(cid:3)
(cid:36)(cid:87)(cid:87)(cid:68)(cid:70)(cid:78)(cid:16)(cid:53)(cid:72)(cid:79)(cid:68)(cid:87)(cid:72)(cid:71)(cid:3)(cid:40)(cid:89)(cid:72)(cid:81)(cid:87)(cid:86)
(cid:40)(cid:71)(cid:74)(cid:72)(cid:16)(cid:69)(cid:68)(cid:86)(cid:72)(cid:71)(cid:3)
(cid:39)(cid:72)(cid:83)(cid:72)(cid:81)(cid:71)(cid:72)(cid:81)(cid:70)(cid:92)
(cid:49)(cid:82)(cid:71)(cid:72)(cid:16)(cid:69)(cid:68)(cid:86)(cid:72)(cid:71)(cid:3)
(cid:39)(cid:72)(cid:83)(cid:72)(cid:81)(cid:71)(cid:72)(cid:81)(cid:70)(cid:92)
Fig. 2: Summary graph for the dependency graph in Fig. 1
for security analysts to understand the dependencies among
nodes by inspecting such a large graph.
In this paper, we design DEPCOMM to summarize a large
dependency graph into a compact graph that can facilitate at-
tack investigation. DEPCOMM includes three key components:
(1) community detection, (2) community compression, and (3)
community summarization.
Community Detection. DEPCOMM ﬁrst partitions the depen-
dency graph into 10 process-centric communities (C1–C10), as
shown in Fig. 1. Each community consists of a set of intimate
process nodes and their accessed resource nodes. For example,
in C3, leak spawns tar, bzip2, gpg and curl, and thus leak
has parent-child relationships with these child process nodes.
Moreover, the resource nodes ../upload.tar, ../upload.tar.bz2
, ../upload and xxx->xxx are accessed by these process nodes
and thus are classiﬁed into C3. Additionally, dependencies
betwen communities are either (1) edge-based dependencies
that represent the inter-community edges (e.g., bdoor→bash
between C1 and C2) or (2) node-based dependencies (blue
ovals in Fig. 1) that indicate the input/output relationships
between communities (e.g., leak in C2 and C3).
Community Compression. To further decrease the size of
each community yet preserving their semantics, DEPCOMM
compresses less-important and redundant dependencies in a
community, including nodes and edges represented with the
stacked shapes and the hollow arrows in Fig. 1. For example,
in C9, bash repetitively spawns python (12 times) and vim (13
times) to read and write ../adjust.py and /dev/null, which can
be summarized as a process-based pattern (i.e., bash creating
many python and vim nodes) and a resource-based pattern (e.g.,
../adjust.py accessed by many python and vim nodes). After
compression, the number of edges of C9 decreases to 33 from
108 (69.4% compression rate). Similarly, C5 is compressed
into 2 edges from 58 edges (96.5% compression rate).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:11 UTC from IEEE Xplore.  Restrictions apply. 
543
OS-level 
Audit Events
POI Event
Causality 
Analysis
Dependency Graph 
Generation
Dependency 
Graph
Edge Merge
Filtering 
Read-only File
Dependency Graph 
Pre-processing
Pre-processed 
Dependency 
Graph
Intimate Process 
Clustering
Resource 
NodeAssociation
Community Detection
Summary 
Graph
InfoPaths 
Extraction
InfoPaths 
Prioritization
Community Summarization
Compressed 
Process-centric
Community Graph
Process-based 
Pattern Compression
Resource-based 
Pattern Compression
Community Compression
Fig. 3: The architecture of DEPCOMM
Process-centric 
Community 
Graph
Community Summarization. As shown in Fig. 2), for each
community, DEPCOMM generates a summary, which consists
of three parts: (1) a master process node that is the source
of a community’s behaviors (e.g., leak in C3), (2) the time
span between the start time of the earliest event and the end
time of the latest event in a community, and (3) the top-ranked
InfoPaths to show major information ﬂows of a community.
The top-ranked InfoPath is a dependency path from leak
to xxx->xxx: leak→tar→../ upload.tar→bzip2→../upload.tar
.bz2→gpg→../upload→curl→xxx->xxx, which has the highest
priority because it includes the POI event curl→xxx->xxx.
Attack Investigation. We next show how to use the summary
graph in Fig. 2 to investigate an attack from the POI event curl
→xxx->xxx in C3. First, by inspecting all of the edges from
other communities (C2, C4, C6, C7, C8) to C3, we ﬁnd that the
edge from C2 is more relevant to the master process node leak
of C3 and the top-1 InfoPath of C3 than those from the other
communities. Thus, C2 is considered to have attack-related
events that lead to the POI event. Next, for the edges between
C2 and other communities, we identify the edge bdoor→bash
from C1 is more relevant than the edge from C5. Moreover,
there exists no dependencies from other communities to C1.
Therefore, C1 is likely to represent the initial steps of the
attack. In summary, we identify 35 attack-related events by
inspecting only 53 nodes and 8 InfoPaths, which shows a great
reduction of manual efforts.
III. OVERVIEW AND THREAT MODEL
Fig. 3 shows the architecture of DEPCOMM. DEPCOMM
consists of ﬁve components: (1) Dependency Graph Genera-
tion, (2) Dependency Graph Pre-processing, (3) Community
Detection, (4) Community Compression, and (5) Community
Summarization.
The dependency graph generation component
leverages
causality analysis to compute a dependency graph from sys-
tem audit events (Section IV-A). The dependency graph pre-
processing component processes the graph by merging the
same types of edges between two nodes and ﬁltering out
read-only ﬁle nodes (Section IV-D). The community detection
component partitions the graph into multiple process-centric
communities and associates the resource nodes to the commu-
nities (Section IV-C). The community compression component
compresses the nodes and the edges in each community based
on the identiﬁed process-based patterns and resource-based
patterns (Section IV-D). The community summarization com-
ponent extracts InfoPaths for each community and prioritizes
these InfoPaths. Finally, DEPCOMM generates a summary
graph with top-ranked InfoPaths (Section IV-E).
Threat Model: We follow the same threat model as the
previous works on security investigation [8, 9, 25, 50, 51].
OS-level events are collected from the system kernel. We
assume that the system kernel is trusted and not tampered by
adversaries [52, 53]. Any kernel-level attacks that deliberately
compromise security auditing systems are beyond the scope
of this work, and existing software and kernel hardening
techniques [50, 54–56] can be used to better protect
log
storage. We also do not consider the attacks performed using
side channels or inter-procedural communications (IPC) that
cannot be captured by the underlying provenance tracker.
Finer-grained auditing tools that capture memory traces or
side channel analysis techniques can be used to address these
attacks and they are not the focus of this work.
DEPCOMM clusters the system behaviors into communities
and prioritizes InfoPaths that represent the information ﬂows
across communities. Thus, attackers who have full knowledge
of DEPCOMM’s summarization approach may deliberately
limit their attack within a few processes and ﬁles, minimizing
their traces within a community and across communities. Such
attacks typically compromise the processes by manipulating
the memories of the processes (e.g., code reuse attacks [57]),
and specialized techniques such as memory randomization [58,
59] can be applied to strengthen the memory protection.
Attackers may also ﬂood system audit logs by performing
activities that generate a large amount of logs, e.g., creating
lots of temporary ﬁles. To defend against such attacks, existing
log compression techniques [26, 27, 33, 60] can be employed
to compress system audit logs, and DEPCOMM can work
seamlessly on the compressed logs since these compressed log
preserve the dependencies. Furthermore, anomaly detection
techniques [14, 61] can be deployed to raise alerts for such
unexpected spikes in log collection.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:11 UTC from IEEE Xplore.  Restrictions apply. 
544
TABLE I: Attributes of system entities
Entity
Process
File
Network
Attributes
PID, Name, User, Cmd
Name, Path
IP, Port, Protocol
TABLE II: Attributes of system events
Attributes
Event
Process Event
File Event
Network Event
Start time, End time, Subject ID, Object ID,
Operations (execve, fork, clone)
Start time, End time, Subject ID, Object ID,
Operations (write, read, rename, readv, writev)
Start time, End time, Subject ID, Object ID,
Operations (write, read, recvmsg, sendto, recvfrom)
IV. DESIGN OF DEPCOMM
A. Dependency Graph Generation
DEPCOMM uses system monitoring tools that run on main-
stream operation systems (e.g., Windows, Linux, Mac OS and
Android) to collect system audit events, including process
events, ﬁle events, and network events. For each collected
entity and event, DEPCOMM records the attributes that are
essential for security analysis (e.g., PID, ﬁle name and IP
for entities; start time, end time and operation for events),
as shown in Table I and Table II. Given a POI event (e.g., an
alert about a ﬁle download), DEPCOMM builds a dependency
graph by performing backward causal analysis to track the
dependencies. Starting from the POI event, the causal analysis
iteratively ﬁnds the events that have dependencies to the POI
event and happen before the POI event. These found events
(i.e., edges) form the dependency graph for the POI event,
such as the graph shown in Fig. 1.
B. Dependency Graph Pre-processing
Edge Merge: A dependency graph often has many paral-
lel edges between a process node and a ﬁle/network node,
indicating repetitive read/write operations in a short period.
This is because OS typically performs a read/write task by
distributing the data proportionally to multiple system calls.
As shown in the recent study [26], these parallel edges do
not offer extra useful information for attack investigation, and
thus DEPCOMM directly merges the parallel edges of the same
operation type into one edge.
Filtering Read-only ﬁle nodes: As shown in recent stud-
ies [33, 51], a dependency graph has many read-only ﬁles,
which are typically libraries, conﬁguration ﬁles, and resources
(e.g., /lib64/libdl.so.2) for process initialization that do not
contain useful attack-related information [33]. Thus, DEP-
COMM ﬁlters out read-only ﬁles and retains the processes to
preserve the semantics of major system activities.
C. Community Detection
DEPCOMM identiﬁes a group of intimate processes as a
process-centric community. A process-centric community is
a graph that contains (1) one master process node, (2) a
set of child process nodes that represent a subset of the
master process’ spawned child processes such that these
child processes have data dependencies among each other,
and (3) a set of resource nodes accessed by the master
processes and these child processes.. For example, leak in
...
file
child
...
...
master
child
child
master
file
child
child
child
child
master
child
...
file
(a)
child
master
file
(b)
child
...
child
child
...
file
master
(c)
Fig. 4: Three types of overlapping nodes
Fig. 1 is the master process of C3, which spawns the child
processes tar, bzip, gpg, and curl to compress and upload a
ﬁle. These child processes have data dependencies with at least
another child process, as reﬂected by the following path in the
dependency graph: tar→../upload.tar→bzip2 →../upload.tar
.bz2→gpg→../upload→curl→xxx->xxx. Additionally, there are
processes or resources that can belong to more than one com-
munities and are referred as overlapping nodes. For example,
in Fig. 1, leak ﬁrst cooperates with curl to accomplish the
execution of the script leak.sh in C2, and then spawns child
processes tar, bzip2, gpg and curl to compress and upload a
ﬁle in C3. In this case, leak is the overlapping node in both
C2 and C3. We categorize overlapping nodes into three types
as shown in Fig. 4:
a(cid:7) a process node that cooperates with different sets of child
b(cid:7) a process node that cooperates with its siblings to ac-
complish a system activity, and meanwhile spawns child
processes to accomplish a different system activity;
c(cid:7) a resource node accessed by process nodes from different
processes for different system activities;
communities.
We next describe the two phases of the community detection
component of DEPCOMM: process-centric community detec-
tion and resource node association.
Process-Centric Community Detection. DEPCOMM per-
forms random walks on each process node based on our
proposed hierarchical walk schemes to generate walk routes,
and then applies a word2vec model [62] to learn the behavior
representation based on the walk routes for each process node.
Based on the behavior representations, DEPCOMM clusters
the process nodes with similar representations into the same
communities. We next describe each step in detail.
1) Hierarchical Random Walk. A random walk rooted
from a node v1 generates a walk route of a speciﬁc length
W = {v1,··· , vl}, where vi ∈ W is randomly chosen with a
transition probability [34]. The transition probability from vi
to its neighbor node n is P r(vi, n) = w(vi, n)/WN (vi), where
w(vi, n) denotes the walk weight from vi to n, and WN (vi)
denotes the sum of walk weights among all the neighbors of
vi. Unlike existing random walk algorithms that treat neighbor
nodes with equal probabilities [34], the walker in DEPCOMM
gives higher probabilities to vi’s neighbors that are more likely
to be its intimate processes.
Speciﬁcally, the walker considers both the processes’ neigh-
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:11 UTC from IEEE Xplore.  Restrictions apply. 
545
1i(cid:16)v
w=0
iv
w=1
1n
w=1
w=1
kn
(a) Walk scheme S1
2n
(cid:17)(cid:17)(cid:17)
(cid:17)(cid:17)(cid:17)
w=0
1n
iv
w=0
1i(cid:16)v
w=0
2n
w=1
kn
(cid:17)(cid:17)(cid:17)
1r
(b) Walk scheme S2
1n
iv
w=1
w=1
(cid:17)(cid:17)(cid:17)
kn
w=0
1i(cid:16)v
w=1
2n
(c) Walk scheme S3
1n
w=1
|i
v v
i(cid:16)
2
1i(cid:16)v
w=0
w=1
2n
w=1
w=1
3n
kn
(g) Walk scheme S7
(cid:17)(cid:17)(cid:17)
ancestor
1i(cid:16)v
w=0
  1n
  iv
w=1
w=0