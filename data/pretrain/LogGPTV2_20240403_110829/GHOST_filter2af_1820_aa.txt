# GHOST漏洞解析与题解
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 漏洞描述
  * glibc的__nss_hostname_digits_dots存在缓冲区溢出漏洞，导致使用gethostbyname系列函数的某些软件存在代码执行或者信息泄露的安全风险
  * 通过gethostbyname()函数或gethostbyname2()函数，将可能产生一个堆上的缓冲区溢出
  * 经由gethostbyname_r()或gethostbyname2_r()，则会触发调用者提供的缓冲区溢出
  * 漏洞产生时至多sizeof(char* )个字节可被覆盖
  * 影响范围：2.2 
    struct hostent * gethostbyname(const char * hostname);   //根据输入的主机名，查找IP地址
    /* Glibc2  also  has  reentrant  versions  gethostent_r(),  gethostbyaddr_r(),  gethostbyname_r()  and gethostbyname2_r().  
       The caller supplies a hostent structure ret which will be filled in on success,  and  a  temporary work  buffer  buf  of size buflen.  
       After the call, result will point to the result on success. */
    int gethostbyname_r(                            //和gethostbyname原理一样，只是内存分配交给用户
                            const char *name,         //要解析的名字
                            struct hostent *ret,     //保存返回值的地方
                            char *buf,                 //这个函数运行时的缓冲区
                            size_t buflen,             //缓冲区长度
                            struct hostent **result,//如果失败，则result为null，如果成功则指向ret
                            int *h_errnop            //保存错误代码
                      );
  * 结构体
    /* Description of data base entry for a single host.  描述一个地址最基本的条目 */
    struct hostent
    {
      char *h_name;            /* Official name of host.  正式主机名*/
      char **h_aliases;        /* Alias list.  别名*/
      int h_addrtype;        /* Host address type.  IP地址类型*/
      int h_length;            /* Length of address.  地址长度*/
      char **h_addr_list;        /* List of addresses from name server.  IP地址列表*/
    };
  * 用法
    #include 
    #include 
    #include 
    int main(int argc, char** argv){
        char* name = argv[1];
        struct hostent* host = gethostbyname(name);
        if(host==NULL)
            printf("error\n");
        else{
            printf("%s\n", host->h_name);
            for(int i=0; host->h_aliases[i]!=NULL; i++)
                printf("\t%s\n", host->h_aliases[i]);
            printf("IP type %d, IP addr len %d\n", host->h_addrtype, host->h_length);
            char buffer[INET_ADDRSTRLEN];
            for(int i=0; host->h_addr_list[i]!=NULL; i++){
                char* ip = inet_ntop(host->h_addrtype, host->h_addr_list[i], buffer, sizeof(buffer));
                printf("\t%s\n", ip);
            }
        }
    }
  * 特殊点：`如果name输入的是IP地址，则不会去DNS查询，而是直接写入到hostent指向的内存区中，`这里因为没有进行合法性判断，所以输入奇怪的IP，比如检测代码中的一串0。它会被直接写入tmp.buffer，一同写入的还包括解析的主机信息。所以就很容易超过tmp.buffer的长度，造成溢出。
POC
    #include 
    #include 
    #include 
    #include 
    #include 
    #define CANARY "in_the_coal_mine"
    struct
    {
       char buffer[1024];
       char canary[sizeof(CANARY)];
    } temp = {"buffer", CANARY};
    int main(void)
    {
       struct hostent resbuf;
       struct hostent *result;
       int herrno;
       int retval;
       /*** strlen (name) = size_needed - sizeof (*host_addr) - sizeof (*h_addr_ptrs) - 1; ***/
       size_t len = sizeof(temp.buffer) - 16 * sizeof(unsigned char) - 2 * sizeof(char *) - 1;
       char name[sizeof(temp.buffer)];
       memset(name, '0', len);
       name[len] = '\0';
        retval = gethostbyname_r(name, &resbuf, temp.buffer, sizeof(temp.buffer), &result, &herrno);
       if (strcmp(temp.canary, CANARY) != 0)
       {
          puts("vulnerable");
          exit(EXIT_SUCCESS);
       }
       if (retval == ERANGE)
       {
          puts("not vulnerable");
          exit(EXIT_SUCCESS);
       }
       puts("should not happen");
       exit(EXIT_FAILURE);
    }
## 源码分析
gethostbyname函数入口点在inet/gethsbynm.c系列文件中
    #define LOOKUP_TYPE	struct hostent
    #define FUNCTION_NAME	gethostbyname
    #define DATABASE_NAME	hosts
    #define ADD_PARAMS	const char *name
    #define ADD_VARIABLES	name
    #define BUFLEN		1024
    #define NEED_H_ERRNO	1
    #define HANDLE_DIGITS_DOTS	1
    #include  //通过宏达到模版展开的效果
  * nss/getXXbyYY.c也先通过__nss_hostname_digits_dots()判断是否为IP, 
    * 如果要解析IP的话就直接结束
    * 如果是域名那么后面调用__gethostbyname_r()进行解析
    //根据宏定义, 会自动被展开为一个函数定义, 这里会展开为gethostbyname()的定义
    LOOKUP_TYPE *FUNCTION_NAME(const char *name) //函数定义
    {
        static size_t buffer_size; //静态缓冲区的长度
        static LOOKUP_TYPE resbuf;
        LOOKUP_TYPE *result;
    #ifdef NEED_H_ERRNO
        int h_errno_tmp = 0;
    #endif
        /* Get lock.  */
        __libc_lock_lock(lock);
        if (buffer == NULL) //如果没有缓冲区就自己申请一个
        {
            buffer_size = BUFLEN;
            buffer = (char *)malloc(buffer_size);
        }
    #ifdef HANDLE_DIGITS_DOTS
        if (buffer != NULL)
        {
            /*
                - 发生漏洞的函数
                - __nss_hostname_digits_dots()先对name进行预处理
                    - 如果要解析的name就是IP, 那就复制到resbuf中, 然后返回1
                    - 如果是域名, 那么就复制到resbuf中, 返回0
                - 如果返回1, 说明解析的就是IP, 你那么进入done, 解析结束
            */
            if (__nss_hostname_digits_dots(name,         //传入的参数: 域名
                                           &resbuf,      //解析结果
                                           &buffer,      //缓冲区
                                           &buffer_size, //缓冲区大小指针
                                           0,            //缓冲区大小
                                           &result,      //存放结果的指针
                                           NULL,         //存放状态的指针
                                           AF_VAL,       //地址族
                                           H_ERRNO_VAR_P //错误代码
                                           ))
                goto done;
        }
    #endif
        /* DNS域名解析，宏展开
       *    (INTERNAL(REENTRANT_NAME)(ADD_VARIABLES, &resbuf, buffer, buffer_size, &result H_ERRNO_VAR) 
       * => (INTERNAL(gethostbyname_r)(name, &resbuf, buffer, buffer_size, &result, &h_errno_tmp) 
       * => (INTERNAL1(gethostbyname_r)(name, &resbuf, buffer, buffer_size, &result, &h_errno_tmp) 
       * => __gethostbyname_r(name, &resbuf, buffer, buffer_size, &result, &h_errno_tmp)
      */
        while (buffer != NULL && (INTERNAL(REENTRANT_NAME)(ADD_VARIABLES, &resbuf, buffer, buffer_size, &result H_ERRNO_VAR) == ERANGE)
    #ifdef NEED_H_ERRNO
               && h_errno_tmp == NETDB_INTERNAL
    #endif
        )
        {
            char *new_buf;
            buffer_size *= 2;
            new_buf = (char *)realloc(buffer, buffer_size);
            if (new_buf == NULL)
            {
                /* We are out of memory.  Free the current buffer so that the
             process gets a chance for a normal termination.  */
                free(buffer);
                __set_errno(ENOMEM);
            }
            buffer = new_buf;
        }
        if (buffer == NULL)
            result = NULL;
    #ifdef HANDLE_DIGITS_DOTS
    done:
    #endif
        /* Release lock.  */
        __libc_lock_unlock(lock);
    #ifdef NEED_H_ERRNO
        if (h_errno_tmp != 0)
            __set_h_errno(h_errno_tmp);
    #endif
        return result;
    }
  * 漏洞函数：nss/digits_dots.c :__nss_hostname_digits_dots(name, resbuf, buffer, …) 
    * 这个函数负责处理name为IP地址的情况, 当name为域名时只是进行一些复制工作
    * name指向要解析的字符串
    * resbuf指向存放解析结果的hostennt结构体
    * buffer则为解析时所分配的空间, resbuf中的指针指向buffer分配的空间
    int __nss_hostname_digits_dots(const char *name,        //要解析的名字
                                   struct hostent *resbuf,    //存放结果的缓冲区
                                   char **buffer,            //缓冲区
                                   size_t *buffer_size,        //缓冲区长度 1K
                                   size_t buflen,            //0
                                   struct hostent **result, //指向结果指针的指针
                                   enum nss_status *status, //状态 NULL
                                   int af,                    //地址族
                                   int *h_errnop)            //错误代码
    {
        int save;
        //...
        /*
       * disallow names consisting only of digits/dots, unless they end in a dot.
       * 不允许name只包含数字和点，除非用点结束
       */
        if (isdigit(name[0]) || isxdigit(name[0]) || name[0] == ':') //name开头是十进制字符/十六进制字符/冒号，就判断为IP地址
        {
            const char *cp;
            char *hostname;
            //host_addr是一个指向16个unsignned char数组的指针
            typedef unsigned char host_addr_t[16];
            host_addr_t *host_addr;
            //h_addr_ptrs就是一个指向两个char*数组的指针
            typedef char *host_addr_list_t[2];
            host_addr_list_t *h_addr_ptrs;
            //别名的指针列表
            char **h_alias_ptr;
            //需要的空间
            size_t size_needed;
            //根据地址族计算IP地址长度
            int addr_size;
            switch (af)
            {
            case AF_INET:              //IPV4
                addr_size = INADDRSZ; //INADDRSZ=4
                break;
            case AF_INET6:               //IPV6
                addr_size = IN6ADDRSZ; //IN6ADDRSZ=16
                break;
            default:
                af = (_res.options & RES_USE_INET6) ? AF_INET6 : AF_INET;
                addr_size = af == AF_INET6 ? IN6ADDRSZ : INADDRSZ;
                break;
            }
            //计算函数运行所需要的缓冲区大小，这里出了问题，没有给h_alias_ptr分配空间，因此产生溢出
            size_needed = (sizeof(*host_addr) + sizeof(*h_addr_ptrs) + strlen(name) + 1); //16 + 16 + strlen(name) + 1
            //如果buffer_size指针为空, 并且buflen还不够, 那么重新申请缓冲区时就没法更新buffer_size, 只能报错
            if (buffer_size == NULL)
            {
                if (buflen  0;