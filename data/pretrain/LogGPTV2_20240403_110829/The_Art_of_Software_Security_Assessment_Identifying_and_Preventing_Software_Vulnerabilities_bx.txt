This code incorrectly supplies the buffer's total size rather than the remaining size, 
thus allowing someone who can control the username argument to overflow the buffer. 
A more subtle mistake can be made when using strncat(). As stated previously, the 
size argument represents how many bytes remain in the buffer. This statement was 
slightly oversimplified in that the size doesn't account for the trailing NUL byte, which 
is always added to the end of the string. Therefore, the size parameter needs to be 
the amount of space left in the buffer less one; otherwise, the NUL byte is written one 
byte past the end of the buffer. The following example shows how this mistake 
typically appears in application code: 
int copy_data(char *username) 
{ 
    char buf[1024]; 
    strcpy(buf, "username is: "); 
    strncat(buf, username, sizeof(buf)  strlen(buf)); 
    log("%s\n", buf); 
    return 0; 
} 
This code doesn't account for the trailing NUL byte, so it's an off-by-one vulnerability. 
Note that even when supplying the correct length parameter to strncat (that is, 
sizeof(buf) strlen(buf) 1), an integer underflow could occur, also resulting in a 
buffer overflow. 
strlcpy() 
The strlcpy() function is a BSD-specific extension to the libc string APIs. It attempts 
to address the shortcomings of the strncpy() function. Specifically, it guarantees NUL 
byte termination of the destination buffer. This function is one of the safest 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
415 
alternatives to strcpy() and strncpy(); however, it's not used a great deal for 
portability reasons. The following list summarizes the strlcpy() function: 
Function size_t strlcpy(char *dst, char *src, size_t n) 
API libc (BSD) 
Similar functions None 
Purpose strlcpy() acts exactly the same as strncpy() except it guarantees 
that the destination buffer is NUL-terminated. The length argument includes 
space for the NUL byte. 
When auditing code that uses strlcpy(), be aware that the size returned is the length 
of the source string (not including the NUL byte), so the return value can be larger 
than the destination buffer's size. The following example shows some vulnerable 
code: 
int qualify_username(char *username) 
{ 
    char buf[1024]; 
    size_t length; 
    length = strlcpy(buf, username, sizeof(buf)); 
    strncat(buf, "@127.0.0.1", sizeof(buf)  length); 
    ... do more stuff ... 
} 
The length parameter returned from strlcpy() is used incorrectly in this code. If the 
username parameter to this function is longer than 1024 bytes, the strlcat() size 
parameter underflows and allows data to be copied out of the buffer's bounds. 
Vulnerabilities such as this aren't common because the return value is usually 
discarded. However, ignoring the result of this function can result in data truncation. 
strlcat() 
The strlcat() function, summarized in the following list, is another BSD-specific 
extension to the libc API that is intended to address the shortcomings of the strncat() 
function: 
Function size_t strlcat(char *dst, char *src, size_t n) 
API libc (BSD) 
Similar functions None 
Purpose strlcat() concatenates two strings together in much the same way 
as strncat(). 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
416 
The size parameter has been changed so that the function is simpler for developers to 
use. The size parameter for strlcat() is the total size of the destination buffer instead 
of the remaining space left in the buffer, as with strncat(). The strlcat() function 
guarantees NUL-termination of the destination buffer. Again, this function is one of 
the safest alternatives to strcat() and strncat(). Like strlcpy(), strlcat() returns 
the total number of bytes required to hold the resulting string. That is, it returns the 
string length of the destination buffer plus the string length of the source buffer. One 
exception is when the destination string buffer is already longer than the n parameter, 
in which case the buffer is left untouched and the n parameter is returned. 
Common Issues 
Parsing text at the character level can be a complicated task. Small oversights made 
by application developers can result in buffer overflows, operating on uninitialized 
memory regions, or misinterpretations of the content. Code auditors need to focus on 
code regions that manipulate text, particularly write operations because careless 
writes pose the most immediate threat to application security. The following sections 
introduce fundamental concepts and provide some common examples of text 
processing issues. 
Unbounded Copies 
The easiest unbounded copies to spot are those that simply don't do any checking on 
the bounds of destination buffers, much like the vulnerable use of strcpy() in 
"Unbounded String Functions." Listing 8-3 shows an example. 
Listing 8-3. Strcpy()-like Loop 
if (recipient == NULL 
    && Ustrcmp(errmess, "empty address") != 0) 
  { 
  uschar hname[64]; 
  uschar *t = h->text; 
  uschar *tt = hname; 
  uschar *verb = US"is"; 
  int len; 
  while (*t != ':') *tt++ = *t++; 
   *tt = 0; 
Listing 8-3 shows a straightforward vulnerability. If the length of the source string is 
larger than the size of hname, a stack overflow occurs when the bolded code runs. It's 
a good idea to note functions that make blatantly unchecked copies like this and see 
whether they are ever called in a vulnerable manner. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
417 
Character Expansion 
Character expansion occurs when software encodes special characters, resulting in a 
longer string than the original. This is common in metacharacter handling, as 
discussed over the course of this chapter, but it can also occur when raw data is 
formatted to make it human readable. Character expansion code may be vulnerable 
when the resulting expanded string is too large to fit in the destination buffer, as in 
the example in Listing 8-4. 
Listing 8-4. Character Expansion Buffer Overflow 
int write_log(int fd, char *data, size_t len) 
{ 
    char buf[1024], *src, *dst; 
    if(strlen(data) >= sizeof(buf)) 
        return -1; 
    for(src = data, dst = buf; *src; src++){ 
        if(!isprint(*src)){ 
            sprintf(dst, "%02x", *src); 
            dst += strlen(dst); 
        } else 
            *dst++ = *src; 
    } 
    *dst = '\0'; 
    ... 
} 
In Listing 8-4, you can see that if nonprintable characters are encountered, the 
bolded section of the code writes a hexadecimal representation of the character to the 
destination buffer. Therefore, for each loop iteration, the program could write two 
output characters for every one input character. By supplying a large number of 
nonprintable characters an attacker can cause an overflow to occur in the destination 
buffer. 
Incrementing Pointers Incorrectly 
Security vulnerabilities may occur when pointers can be incremented outside the 
bounds of the string being operated on. This problem happens primarily in one of the 
following two cases: when a string isn't NUL-terminated correctly; or when a NUL 
terminator can be skipped because of a processing error. You saw in Listing 8-2 that 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
418 
strncpy() can be the cause of a string not being NUL-terminated. Often when a string 
isn't terminated correctly, further processing on the string is quite dangerous. For 
example, consider a string being searched with the strchr() function for a particular 
separator. If the NUL terminator is missing, the search doesn't stop at the end of the 
user-supplied data as intended. The character being searched for may be located in 
uninitialized memory or adjacent variables, which is a potential vulnerability. The 
following example shows a similar situation: 
int process_email(char *email) 
{ 
    char buf[1024], *domain; 
    strncpy(buf, email, sizeof(buf)); 
    domain = strchr(buf, '@'); 
    if(!domain) 
        return -1; 
    *domain++ = '\0'; 
    ... 
    return 0; 
} 
The example neglects to NUL-terminate buf, so the subsequent character search 
might skip outside the buffer's bounds. Even worse, the character being searched for 
is changed to a NUL byte, so variables or program state could possibly be corrupted. 
Another interesting implication of neglecting to NUL-terminate a buffer is that a buffer 
overflow condition might be introduced if the programmer makes assumptions about 
the maximum length of the string in the buffer. The following code shows a common 
example of making this assumption: 
int process_address(int sockfd) 
{ 
    char username[256], domain[256], netbuf[256], *ptr; 
    read_data(sockfd, netbuf, sizeof(netbuf)); 
    ptr = strchr(netbuf, ':'); 
    if(ptr) 
        *ptr++ = '\0'; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
419 
    strcpy(username, netbuf); 
    if(ptr) 
        strcpy(domain, ptr); 
    ... 
} 
The process_address() function is written with the assumption that read_data() 
correctly NUL-terminates the netbuf character array. Therefore, the strcpy() 
operations following it should be safe. If the read_data() function doesn't properly 
terminate the buffer, however, the length of the data read in to netbuf can be longer 
than 256 depending on what's on the program stack after it. Therefore, the strcpy() 
operations could overflow the username buffer. 
There's also the odd situation of code that's processing text strings failing to identify 
when it has encountered a NUL byte because of an oversight in the processing. This 
error might happen because the code searches for a particular character in a string 
but fails to check for a NUL byte, as shown in the following example: 
// locate the domain in an e-mail address 
for(ptr = src; *ptr != '@'; ptr++); 
Notice that this loop is searching specifically for an @ character, but if none are in the 
string, the loop keeps incrementing past the end of the string until it finds one. There 
are also slight variations to this type of error, as in this example: 
// locate the domain in an e-mail address 
for(ptr = src; *ptr && *ptr != '@'; ptr++); 
ptr++; 
This second loop is formed more correctly and terminates when it encounters the @ 
symbol or a NUL byte. However, after the loop is completed, the programmer still 
made the assumption that it stopped because it found an @ symbol, not a NUL byte. 
Therefore, if the @ symbol is not found the pointer is incremented past the NUL byte. 
The third example of incrementing outside a buffer's bounds usually occurs when 
programmers make assumptions on the content of the buffer they're parsing. An 
attacker can use intentionally malformed data to take advantage of these 
assumptions and force the program into doing something it shouldn't. Say you have 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
420 
a string containing variables submitted by a form from a Web site, and you want to 
parse and store these variables. This process involves decoding hexadecimal 
sequences in the form %XY; X and Y are hexadecimal characters (09, af, and AF) 
representing a byte value. If the application fails to ensure that one of the two 
characters following the % is a NUL terminator, the application might attempt to 
decode the hexadecimal sequence and then skip the NUL byte and continue 
processing on uninitialized memory. Listing 8-5 shows an example of this error. 
Listing 8-5. Vulnerable Hex-Decoding Routine for URIs 
/* 
 * Decoding URI-encoded strings 
 */ 
void 
nmz_decode_uri(char *str) 
{ 
    int i, j; 
    for (i = j = 0; str[i]; i++, j++) { 
        if (str[i] == '%') { 
            str[j] = decode_uri_sub(str[i + 1], str[i + 2]); 
            i += 2; 
        } else if (str[i] == '+') { 
            str[j] = ' '; 
        } else { 
            str[j] = str[i]; 
        } 
    } 
    str[j] = '\0'; 
} 
This code contains a simple mistake in the bolded line: The developer makes the 
assumption that two valid characters follow a % character, which also assumes that 
the string doesn't terminate in those two bytes. Strings can often have a more 
complicated structure than the developer expects, however. Because there are 
multiple state variables that affect how the parsing function interprets text, there are 
more possibilities to make a mistake such as this one. Listing 8-6 shows another 
example of this type of error. It's taken from the mod_dav Apache module and is used 
to parse certain HTTP headers. 
Listing 8-6. If Header Processing Vulnerability in Apache's mod_dav Module 
while (*list) { 
  /* List is the entire production (in a URI scope) */ 
switch (*list) { 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
421 
  case '')) 
        == NULL) { 
    /* ### add a description to this error */ 
      return dav_new_error(r->pool, HTTP_BAD_REQUEST, 
                             DAV_ERR_IF_PARSE, NULL); 
    } 
    if ((err = dav_add_if_state(r->pool, ih, state_token, 
         dav_if_opaquelock, condition, locks_hooks)) 
          != NULL) { 
        /* ### maybe add a higher level description */ 
      return err; 
    } 
    condition = DAV_IF_COND_NORMAL; 
    break; 
  case 'N': 
    if (list[1] == 'o' && list[2] == 't') { 
      if (condition != DAV_IF_COND_NORMAL) { 
        return dav_new_error(r->pool, HTTP_BAD_REQUEST, 
                               DAV_ERR_IF_MULTIPLE_NOT, 
                               "Invalid \"If:\" header: " 
                               "Multiple \"not\" entries " 
                               "for the same state."); 
      } 
      condition = DAV_IF_COND_NOT; 
    } 
    list += 2; 
    break; 
  case ' ': 
  case '\t': 
    break; 
  default: 
    return dav_new_error(r->pool, HTTP_BAD_REQUEST, 
                           DAV_ERR_IF_UNK_CHAR, 
                           apr_psprintf(r->pool, 
                           "Invalid \"If:\" " 
                           "header: Unexpected " 
                           "character encountered " 
                           "(0x%02x, '%c').", 
                         *list, *list)); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
422 
  } 
  list++; 
} 
break; 
This code fails to check for NUL terminators correctly when it encounters an N 
character. The N case should check for the presence of the word "Not" and then skip 
over it. However, the code skips over the next two characters anytime it encounters 
an N character. An attacker can specify a header string ending with an N character, 
meaning an N character followed by a NUL character. Processing will continue past the 
NUL character to data in memory adjacent to the string being parsed. The vulnerable 
code path is demonstrated by the bolded lines in the listing. 
Simple Typos 
Text-processing vulnerabilities can occur because of simple errors that almost defy 
classification. Character processing is easy to mess up, and the more complex the 
code is, the more likely it is that a developer will make mistakes. One occasional 
mistake is a simple pointer use error, which happens when a developer accidentally 
dereferences a pointer incorrectly or doesn't dereference a pointer when necessary. 
These mistakes are often the result of simple typos, and they are particularly common 
when dealing with multiple levels of indirection. Listing 8-7 shows an example of a 
failure to dereference a pointer in Apache's mod_mime module. 
Listing 8-7. Text-Processing Error in Apache mod_mime 
while (quoted && *cp != '\0') { 
    if (is_qtext((int) *cp) > 0) { 
        cp++; 
  } 
  else if (is_quoted_pair(cp) > 0) { 
     cp += 2; 
    } 
  ... 
This code block is in the analyze_ct() function, which is involved in parsing MIME 
(Multipurpose Internet Mail Extensions) content. If the is_quoted_pair() function 
returns a value greater than zero, the cp variable is incremented by two. The 