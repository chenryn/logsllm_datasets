(gdb) x/i $eip
0x95336963 :mov DWORD PTR [ecx+0xe],edx
As of the writing of this book, this bug is still within QuickTime Player. In
general, determining the exploitability of a bug is very diffi cult. Can you control
the data that is used when overwriting? Can you reliably set up something inter-
esting to overwrite? We’ll cover these topics in more detail later in the book.
Conclusion
This chapter addressed different techniques for fi nding vulnerabilities in appli-
cations. First we covered the topic of source-code analysis. After that, the utility
of generating and analyzing code-coverage data was demonstrated. Next we
presented some practical methods that utilize the way Apple software is con-
structed, including looking at updates in the open-source software it utilizes,
as well as keeping an eye on the public source-code repositories it employs.
Finally, we presented the technique known as dynamic analysis, or fuzzing,
including case studies involving network fuzzing and fi le fuzzing. Bugs were
found and some initial analysis was performed.
9955336633cc0055..iinndddd 113333 11//2255//0099 44::4411::0077 PPMM
134 Part II ■ Discovering Vulnerabilities
References
https://www.blackhat.com/presentations/bh-usa-07/Miller/
Presentation/bh-usa-07-miller.pdf
http://www.milw0rm.com/exploits/4648
http://www.apple.com/support/downloads/quicktime731forleopard
.html
http://archives.neohapsis.com/archives/dailydave/2008-q1/0158
.html
http://www.defcon.org/images/defcon-15/dc15-presentations/
dc-15-miller.pdf
http://cansecwest.com/csw08/csw08-miller.pdf
http://research.microsoft.com/research/pubs/view
.aspx?type=Technical%20Report&id=1300
http://www.vdalabs.com/tools/efs.html
http://www.amazon.com/Fuzzing-Brute-Force-Vulnerability-
Discovery/dp/0321446119
http://theartoffuzzing.com/joomla/index.php?option=com_content
&task=view&id=21&Itemid=40
9955336633cc0055..iinndddd 113344 11//2255//0099 44::4411::0077 PPMM
CHAPTER
6
Reverse Engineering
In earlier chapters you learned how to peer inside a running process on Mac OS
X to see what is happening. This involved using a couple of dynamic-analysis
tools. In this chapter, you will continue to investigate the inner workings of
Mac OS X binaries, this time by looking at the static disassembly of Mach-O
binaries. To this end, we’ll show you some techniques to help clean up some of
the most common problems that IDA Pro encounters with this fi le format. We
will then discuss some particulars of disassembling binaries originating from
Objective-C (Obj-C). Finally, we’ll walk you through an analysis of a binary and
illustrate how you can change the core functionality of binaries rather easily
once you understand how they work.
Disassembly Oddities
When looking at Mac OS X x86 binaries in IDA Pro that don’t come from
Objective-C code, you realize that they look pretty much like binaries from
other operating systems. Objective-C binaries look quite a bit different, and
we’ll describe those later in this chapter. You’ll run into a few issues for which
IDA Pro fails to provide optimum disassembly. We discuss these as well.
135
9955336633cc0066..iinndddd 113355 11//2255//0099 44::4411::2266 PPMM
136 Part II ■ Discovering Vulnerabilities
EIP-Relative Data Addressing
One unusual construct you’ll notice when disassembling Mac OS X binaries
typically occurs at the beginning of each function. You’ll see that data is often
referred to neither globally nor as an offset from the beginning of the function,
but from some other point, which we’ll call an anchor point; see Figure 6-1.
In this assembly listing, there is a call made at 0x1dbe to the next instruction,
followed by a pop ebx instruction. This has the effect of storing the current pro-
gram counter in the ebx register. In this respect, every function looks like shell-
code! After the call and pop instructions, the code wants to refer to a string at
address 0x3014 in the disassembly. The code does this by referring to the string
as an offset from the anchor, stored in EBX. This EIP-relative data addressing is
the default addressing mode on x86-64 for position-independent code, where it
is called RIP-relative data addressing. The call/push EBX is a port of this con-
vention to 32-bit, where you cannot directly access the value of the instruction
pointer. IDA Pro doesn’t know how to deal with this type of data addressing
effectively, which makes understanding the disassembly more diffi cult.
Sometimes, instead of this inline version of getting the current program coun-
ter, you’ll see an actual function call, but the result is the same. Check out the
number of references to this function in Figure 6-2.
Figure 6-1: A common Mac OS X function prologue
Figure 6-2: Storing a data anchor into the ECX register
9955336633cc0066..iinndddd 113366 11//2255//0099 44::4411::2266 PPMM
Chapter 6 ■ Reverse Engineering 137
Messed-Up Jump Tables
The fact that these data anchors are used doesn’t merely make the disassembly
harder to read; it can greatly affect the way IDA Pro disassembles the binary.
For example, if a jump table is referred to from an anchor, IDA Pro won’t know
how to locate the table and, consequently, won’t be able to determine where
the jumps may occur. This means you will get no cross-references, and many
portions of code will fail to disassemble correctly. Figure 6-3 shows a basic
block from the CoreGraphics library, where a jump coming from a jump table
is unknown to IDA Pro.
Figure 6-3: IDA Pro cannot deal with this jump because it comes from EIP-relative data.
In this case, the data anchor is stored in the EBX register and the beginning of
the jump table is located at EBX+0xe9. Cameron Hotchkies and Aaron Portnoy
wrote a small IDA Python function that can be used to add the missing cross-
references that will cause IDA Pro to disassemble at those points.
def rebuild_jump_table(fn_base, jmp_table_offset, address=None):
jmp_table = jmp_table_offset + fn_base
print “Jump table starts at %x” % jmp_table
if not address:
address = ScreenEA()
counter = 0;
entry = Dword(jmp_table + 4*counter) + fn_base
while NextFunction(address) == NextFunction(entry):
counter += 1
AddCodeXref(address, entry, fl_JN)
entry = Dword(jmp_table + 4*counter) + fn_base
print “0x%08x: end jump table” % (jmp_table + 4*counter)
Save this function to a text fi le and load it into IDA Pro with the File ➯
Python File menu option. To use it, place the cursor on the assembly line that
9955336633cc0066..iinndddd 113377 11//2255//0099 44::4411::2266 PPMM
138 Part II ■ Discovering Vulnerabilities
has the jmp instruction. Then select File ➯ Python Command. In the dialog
that shows up, type
rebuild_jump_table(ANCHOR_POINT, OFFSET_TO_JUMP_TABLE)
where ANCHOR_POINT is the address of the anchor point (in this case, the
value stored in the EBX register) and OFFSET_TO_JUMP_TABLE is the value
that takes you from the anchor point to the jump table, in this case 0xe9. For
this example, you would enter
rebuild_jump_table(0xdf5f, 0xe9)
After this command, IDA Pro will add the necessary cross-references for this
switch statement and improve the corresponding disassembly of the code in
the function; see Figure 6-4.
Figure 6-4: After you run the script, IDA Pro finds all the possible jump destinations for
this switch statement.
Identifying Missed Functions
Overall, IDA Pro does an excellent job disassembling Mach-O binaries, even
compared to a year ago. However, one simple but important thing it often fails
to do is identify all the functions in the binary. For example, take the iMovie
HD binary and disassemble it with IDA Pro. It fi nds 8,672 functions, but misses
some that are rather obvious; see Figure 6-5.
Again, Hotchkies and Portnoy provide a simple script that can help locate
these missed functions. The basic idea is to look for the common function
prologue.
push ebp
mov ebp, esp
Then declare that a function exists at these spots. IDA Pro takes a more con-
servative approach when looking for functions and fails to fi nd many of them
9955336633cc0066..iinndddd 113388 11//2255//0099 44::4411::2266 PPMM
Chapter 6 ■ Reverse Engineering 139
from Mach-O binaries. The following IDA Python script looks for these two
instructions, which indicate the beginning of a function.
def rebuild_functions_from_prologues():
seg_start = SegByName(“__text”)
seg_end = SegEnd(seg_start)
cursor = seg_start
while cursor < seg_end:
cursor = find_not_func(cursor, 0x1)
# push EBP; mov EBP,ESP
if (Byte(cursor) == 0x55 and Byte(cursor+1) == 0x89 and
Byte(cursor+2)==0xE5):
MakeFunction(cursor, BADADDR)
else:
cursor = FindBinary(cursor, 0x1, “55 89 E5”, 16)
if (GetFunctionName(cursor) == “”):
MakeFunction(cursor, BADADDR)
rebuild_functions_from_prologues()
Figure 6-5: IDA Pro fails to identify many functions in Mach-O binaries.
Save this text in a fi le. Within IDA Pro, choose File ➯ Python File, and select
the fi le. When executed, in this case the script fi nds an additional 1,047 func-
tions. Notice in the overview area in IDA Pro that there are far fewer red lines
than before running the script, indicating IDA Pro has placed almost all the
code into functions; see Figure 6-6.
9955336633cc0066..iinndddd 113399 11//2255//0099 44::4411::2266 PPMM
140 Part II ■ Discovering Vulnerabilities
Figure 6-6: IDA Pro now knows where almost all the functions begin.
Reversing Obj-C
We discussed some basics of Obj-C in Chapter 1, “Mac OS X Architecture.” Recall
that this language is used in a number of Mac OS X applications, so it is impor-
tant to understand it. At fi rst glance, the way the Obj-C runtime functions does
not lend itself to reverse engineering. A typical Obj-C binary will make all of its
calls to class methods through just a few functions, usually objc_msgSend, but
sometimes objc_msgSend_fpret, objc_msgSend_stret, or objc_msgSendSuper.
For this discussion, we’ll focus on objc_msgSend, but everything discussed can
be generalized. objc_msgSend dynamically determines what code to call based
on the arguments passed to it. Therefore, disassembling a function gives very
little information about what other functions it calls. In Chapter 1 you examined
a simple Obj-C program which took two numbers passed as arguments, added
9955336633cc0066..iinndddd 114400 11//2255//0099 44::4411::2277 PPMM
Chapter 6 ■ Reverse Engineering 141
the fi rst to twice the second, and printed the result to standard output. Looking
at the main function from this program in IDA Pro, it is hard to determine that
this is what the function does; see Figure 6-7.
Figure 6-7: When reversing Obj-C binaries it can be hard to determine the execution
flow, as many calls appear just as calls to objc_msgSend.
All you see is a couple of calls to atoi and a bunch of calls to objc_msgSend.
There are also various Obj-C data structures that are not well understood by
the IDA Pro parsing engine. We’ll discuss ways to disassemble an Obj-C binary
in a more reverse-engineering-friendly way.
Cleaning Up Obj-C
One of the things you’ll notice the fi rst time you disassemble an Obj-C binary is
that there are many segments that don’t normally show up in a C or C++ binary;
see Figure 6-8. In IDA Pro you can view the program’s segments by pressing
Shift+F7. These new segments include __class, __meta_class, and __instance
vars. These segments contain Obj-C-specifi c information, but IDA Pro doesn’t
go out of its way to display it in a friendly fashion. Instead it simply identifi es
these as generic data structures; see Figure 6-9.
9955336633cc0066..iinndddd 114411 11//2255//0099 44::4411::2277 PPMM
142 Part II ■ Discovering Vulnerabilities
Figure 6-8: A list of segments from an Obj-C binary. There are many segments you don’t
normally see in a binary.
Figure 6-9: The Integer class before you clean it up
Looking at this class doesn’t tell you much. But looking at the eighth element
in the structure, 0x30e0, you see some data that includes a list of the class’s
methods (Figure 6-10).
Figure 6-10: A list of methods for the Integer class
9955336633cc0066..iinndddd 114422 11//2255//0099 44::4411::2277 PPMM
Chapter 6 ■ Reverse Engineering 143
The fi rst couple of dwords seem to have to do with describing the number of
methods to expect. In the fi rst entry after those, you see a structure that consists
of an address to a string that names the function set_integer:, an address to
some strange string @12@0:4i8, and fi nally an address to the executable code.
The fi rst and third elements are pretty straightforward, but the second requires
some more explanation. This string is actually a description of the types used
in the method. The following is a list of different codes you may encounter in
these type encodings.
Code Meaning
c A char
i A int
s A short
l A long
q A long long
C An unsigned char
I An unsigned int
L An unsigned long
Q An unsigned long long
f A float
d A double
v A void
* A charactrer string (char*)
@ An object (whether statically typed or typed id)
# A class objec (Class)
: A method selector (SEL)
[…] An array
{…} A structure
(…) A union
bnum A bitfield of num bits
^type A pointer to type
? An unknown type
Looking at @12@0:4i8, you can begin to decipher this string. The colon in the
middle of the string indicates it is a method, and from there you need to work
outward. The numbers all refl ect the offsets to the locations of the variables
on the stack (from which their size can be calculated). The @12 indicates that
the return value is a pointer to an object and that the fi nal argument (the int
from before) requires four bytes of memory. 0 refers to the fi rst variable, the
recipient. The 4 refl ects that this fi rst variable is 4 bytes long. The i8 indicates
that the third argument (the fi rst to this method) is an integer and that the
previous argument (the selector) is 4 bytes long. This makes sense since the
selector should be a pointer to a string. Breaking this all out, you can write the
prototype for this method as
- (object) method: (int) argument
9955336633cc0066..iinndddd 114433 11//2255//0099 44::4411::2277 PPMM
144 Part II ■ Discovering Vulnerabilities
This pretty much agrees with the real prototype from the source code.
- (id) set_integer: (int) _integer
All of these Obj-C data structures can be very confusing. Luckily, there is
an IDC script that cleans up some of this Obj-C data and makes it clearer for
the reverse engineer. It is called fi xobjc.idc and can be found at http://www.
nah6.com/~itsme/cvs-xdadevtools/ida/idcscripts/, along with some other
useful scripts. To use it, load the program in IDA Pro and then select File ➯
IDC File and choose the fi xobjc.idc fi le. It will rename many of the classes and
variables. Figure 6-11 shows the same Integer-class structure after it has been
cleaned up a bit.
Figure 6-11: The Integer class after being cleaned up with fixobjc.idc
Basically, it renamed the address to class_Integer and it named three of the
offsets in the structure: metaclass_Integer, ivars_Integer, and methods_Integer.
These three structures contain information about the metaclass, member vari-
ables, and methods, respectively. The appearance of the other structures has also
been improved. Such improvements can make a big difference when looking at
a complicated class; see Figure 6-12.
Figure 6-12: A list of methods for a couple of Obj-C classes after cleanup
Furthermore, in the very simple case where hard-coded offsets are used as
addresses to objc_msgSend, it makes the disassembly easier to read by explicitly
naming the strings being used as arguments to the function; see Figure 6-13.
9955336633cc0066..iinndddd 114444 11//2255//0099 44::4411::2277 PPMM
Chapter 6 ■ Reverse Engineering 145
Figure 6-13: Once you have parsed the Obj-C structures, the calls to objc_msgSend can
be understood by looking at the nearby strings. This works only when these strings are
addressed directly.
Looking at Figure 6.13, it is now clear that the calls to objc_msgSend are
actually going to be resolved to calls to NSBundle::mainBundle, NSBundle::
pathForResource:ofType, and NSWorkspace::sharedWorkspace. This is possible
only in this case because these strings are referenced directly and not through
EIP-relative addressing. You’ll see in the next section how to handle the more
generic case.
Shedding Light on objc_msgSend Calls
The IDC script helped demystify some of the calls to objc_msgSend, but in many
cases it didn’t help, as in the example in Figure 6-7. In these cases, you still end
up with a bunch of calls to objc_msgSend, where at fi rst glance, it is not obvious
where they go. To make matters worse, due to this calling mechanism, you lose
out on useful cross-reference information; see Figure 6-14. In this fi gure, only
one cross-reference exists, and it is a data cross-reference (to the Obj-C struc-
tures). This makes tracing code execution diffi cult. This is true even for calls that
9955336633cc0066..iinndddd 114455 11//2255//0099 44::4411::2277 PPMM
146 Part II ■ Discovering Vulnerabilities
used fi xed offsets such that fi xobjc.idc made it easier to read; the cross-references
are still broken. In this way, IDA Pro is reduced to a GUI for otool.
Figure 6-14: An Obj-C method typically has no CODE cross-references since it is called
via a data structure by objc_msgSend.
Luckily, you can oftentimes fi x these defi ciencies; you just need to do some-
thing a little more precise. On the surface, this seems like a pretty straightfor-
ward problem to fi x because the information needed to resolve which function