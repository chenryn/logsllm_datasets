as c ← H(r , m).
where internally the challenge is computed as c ← H(r , m).
VerifyH((y, k), p) = 1,
Scheme 2: Generic description the Fish and Picnic signature schemes. In both schemes Prove is implemented with ZKB++, in
Fish it is made non-interactive with the FS transform, while in Picnic, Unruh’s transform is used.
5 THE PICNIC SIGNATURE SCHEME
The Picnic signature scheme is the same as Fish, except for the trans-
form used to make ZKB++ noninteractive. Unruh [83] presents an
alternative to the FS transform that is provably secure in the QROM.
Indeed, Unruh even explicitly presents a construction for a signa-
ture scheme and proves its security given a secure a Σ−protocol.
Unruh’s construction requires a Σ−protocol and a hard instance
generator, but he does not give an instantiation. We use his approach
to argue that with a few modifications, our signature scheme is
also provably secure in the QROM. One interesting aspect is that,
while on first observation Unruh’s transform seems much more
expensive than the standard FS transform, we show how to make
use of the structure of ZKB++ to reduce the cost significantly.
Unruh’s Transform: Overview. At a high level, Unruh’s trans-
form works as follows: Given a Σ-protocol with challenge space
C, an integer t, a statement x, and a random permutation G, the
prover will
(1) Run the first phase of the Σ-protocol t times to produce
r1, . . . , rt .
(2) For each i ∈ {1, . . . , t}, and for each j ∈ C, compute the
response sij for ri and challenge j. Compute дij = G(sij).
(3) Compute H(x, r1, . . . , rt , д11, . . . , дt |C |) to obtain a set of
indices J1, . . . , Jt .
(4) Output π = (r1, . . . , rt , s1J1 , . . . , st Jt , д11, . . . , дt |C |).
Similarly, the verifier will verify the hash, verify that the given si Ji
values match the corresponding дi Ji values, and that the si Ji values
are valid responses w.r.t. the ri values.
Informally speaking, in Unruh’s security analysis, zero knowl-
edge follows from HVZK of the underlying Σ-protocol: the simu-
lator just generates t transcripts and then programs the random
oracle to get the appropriate challenges. The proof of knowledge
property is more complex, but the argument is that any adversary
who has non-trivial probability of producing an accepting proof
will also have to output some дij for j (cid:44) Ji which is a correct re-
sponse for a different challenge - then the extractor can invert G
and get the second response, which by special soundness allows it
to produce a witness.
To instantiate the function G in the protocol, Unruh shows that
one does not need a random oracle that is actually a permutation.
Instead, as long as the domain and co-domain of G have the same
length, it can be used, since it is indistinguishable from a random
permutation.
Applying the Unruh transform to ZKB++: The Direct Ap-
proach. We can apply Unruh to ZKB++ in a relatively straight-
forward manner by modifying our protocol. Although ZKB++ has
3-special soundness, whereas Unruh’s transform is only proven for
Σ-protocols with 2-special soundness, the proof is easily modified
to 3-special soundness.
Since ZKB++ has 3-special soundness, we would need at least
three responses for each iteration. Moreover, since there only are
three possible challenges in ZKB++, we would run Unruh’s trans-
form with C = {1, 2, 3}, i.e., every possible challenge and response.
We would then proceed as follows:
Let G : {0, 1}|si j | → {0, 1}|si j | be a hash function modeled as a
random oracle.8 Non-interactive ZKB++ proofs would then proceed
as follows:
(1) Run the first ZKB++ phase t times to produce r1, . . . , rt .
(2) For each i ∈ {1, . . . , t}, and for each j ∈ 1, 2, 3, compute the
response sij for ri and challenge j. Compute дij = G(sij).
(3) Compute H(x, r1, . . . , rt , д11, . . . , дt3) to obtain a set of in-
dices J1, . . . , Jt .
(4) Output π = (r1, . . . , rt , s1J1 , . . . , st Jt , д11, . . . , дt3).
While this works, it comes as a significant overhead in the size of
the proof. That is, we have to additionally include д11, . . . , дt3. Each
дij is a permutation of an output share and there are 3t such values,
so in particular the extra overhead would yield a proof size of
t · [c + 2κ + log2(3) + ℓ · (2/3 · m + b)]+
3t · [2κ + ℓ · (2/3 · m + b)] =
t · [c + 8κ + loд2(3) + ℓ · (8/3m + 4b)].
Since for most functions, the size of the proof is dominated by t · ℓb,
this proof is roughly four times as large as in the FS version. To
this end, we again introduce some optimizations.
O1: Making Use of Overlapping Responses. We can make use
of the structure of the ZKB++ proofs to achieve a significant reduc-
tion in the proof size. Although we refer to three separate challenges,
in the case of the ZKB++ protocol, there is a large overlap between
the contents of the responses corresponding to these challenges. In
particular, there are only three distinct views in the ZKB++ protocol,
two of which are opened for a given challenge.
Instead of computing a permutation of each response, sij, we can
compute a permutation of each view, vij. For each i ∈ {1, . . . , t},
and for each j ∈ {1, 2, 3}, the prover computes дij = G(vij).
The verifier checks the permuted value for each of the two views
in the response. In particular, for challenge i ∈ {1, 2, 3}, the verifier
will need to check that дij = G(vij) and дi(j+1) = G(vi(j+1)).
8Actually, the size of the response changes depending on what the challenge is. If the
challenge is 0, the response is slightly smaller as it does not need to include the extra
input share. So more precisely, this is actually two hash functions, G0 used for the
0-challenge response and G1,2 used for the other two.
8
O2: Omit Re-Computable Values. Moreover, since G is a public
function, we do not need to include G(vij) in the transcript if we
have included vij in the response. Thus for the two views (corre-
sponding to a single challenge) that the prover sends as part of the
proof, we do not need to include the permutations of those views.
We only need to include G(vi(j +2)), where vi(j+2) is the view that
the prover does not open for the given challenge.
Putting it Together: New Proof Size. Combining these two mod-
ifications yields a major reduction in proof size. For each of the t
iterations of ZKB++, we include just a single extra G(v) than we
would in the FS transform.
As G is a permutation, the per-iteration overhead of ZKB++/Unruh
over ZKB++/FS is the size of a single view. This overhead is less
that one-third of the overhead that would be incurred from the
naive application of Unruh as described before. In particular, the
expected proof size of our optimized version is then
t · [c + 2κ + log2(3) + ℓ · (2/3 · m + b)]+
t · [κ + ℓ · (1/3 · m + b)] =
t · [c + 3κ + loд2(3) + ℓ · (m + 2b)].
The overhead depends on the circuit. For LowMC, we found the
overhead ranges from 1.6 to 2 compared to the equivalent ZKB++/FS
proof.
Security of the Modified Unruh Transform. For zero knowl-
edge, we can take the same approach as in Unruh [84]: to simulate
the proof we choose the set of challenges J1, . . . , Jt , run the (2,3)-
decomposition simulator to obtain views for each pair of dishonest
parties Ji , Ji +1, honestly generate дi Ji and дi Ji +1 and the commit-
ments to those views, and choose дJi +2 and the corresponding com-
mitment at random. Then we program the random oracle to output
J1, . . . , Jt on the resulting tuple. The analysis follows exactly as
in [84].
For the soundness argument, our protocol has two main differ-
ences from Unruh’s general version: (1) the underlying protocol we
use only has 3-special soundness, rather than the normal 2-special
soundness, and (2) we have one commitment for each view, and one
G(v) for each view, rather than having a separate G(viewi , viewi +1)
for each i.
As mentioned above, the core of Unruh’s argument [84, Lemma
17], says that the probability that the adversary can find a proof
such that the extractor cannot extract but the proof still verifies is
negligible.
For our case, the analysis is as follows: For a given tuple of com-
mitments r1 . . . rt , and G-values д11, дt |C | that is queried to the
random oracle either one of the following is true: (1) There is some
i for which (G−1(дi1), G−1(дi2)), (G−1(дi2), G−1(дi3)), (G−1(дi3),
G−1(дi1)), are valid responses for challenges 1, 2, 3 respectively9,
or (2) For all i at least one of these pairs is not a valid response. In
particular this means that if this is the challenge produced by the
hash function, A will not be able to produce an accepting response.
From that, we can argue that if the extractor cannot extract from
a given tuple, then the probability (over the choice of a RO) that
there exists an accepting response for A to output is at most (2/3)t .
Then, we can rely on [84, Lemma 7], which tells us that given qH
9In fact G is not exactly a permutation, but we ignore that here. We can make this
formal exactly as in Unruh’s proof, by considering the set of pre-images.
queries, the probability that A produces a tuple from which we
cannot extract but A can produce an accepting response is at most
2(qH + 1)(2/3)t .
and we obtain the following:
The rest of our argument can proceed exactly as in Unruh’s proof
Corollary 5.1. Scheme 2 instantiated with ZKB++, a secure per-
mutation and one-way function yields an EUF-CMA secure signature
scheme in the QROM.
The full proof is given in Appendix F. The security reduction in
our proof is non-tight, the gap is proportional to the number of RO
queries.
Unruh’s Transform with Constant Overhead? We conjecture
that we may be able to further reduce the overhead of Unruh’s
transform to a fixed size that does not depend on the circuit being
used. We leave this as a conjecture for now as it does not follow
from Unruh’s proof, and we have not proved it.
If we were to include just the hash using G of the seeds (and
the third input share that is not derivable from its seed), it seems
that this would be enough for the extractor to produce a witness.
Combining this with the previous optimizations, we only need to
explicitly give the extractor a permutation of the input share of the
third view. For the first two views, the views are communicated in
the open, and the extractor can compute the permutation himself.
This would reduce the overhead when compared to FS from about
1.6x to 1.16x.
6 SELECTING AN UNDERLYING PRIMITIVE
We require one or more symmetric primitives suitable to instanti-
ate a one-way function. We now first investigate how choosing a
primitive with certain properties impacts the instantiations of our
schemes. From this, we derive concrete requirements, and present
our choice, LowMC.
6.1 Survey of Suitable Primitives
The signature size depends on constants that are close to the secu-
rity expectation (cf. Section 7 for our choices). The only exceptions
are the number of binary multiplication gates, and the size of the
rings, which all depend on the choice of the primitive. Hence we
survey existing designs that can serve as a one-way function sub-
sequently.
Standardized General-Purpose Primitives. The smallest known
Boolean circuit of AES-128 needs 5440 AND gates, AES-192 needs
6528 AND gates, and AES-256 needs 7616 AND gates [20]. An AES
circuit in F24 might be more efficient in our setting, as in this case
the number of multiplications is lower than 1000 [25]. This results
in an impact on the signature size that is equivalent to 4000 AND
gates. Even though collision resistance is often not required, hash
functions like SHA-256 are a popular choice for proof-of-concept
implementations. The number of AND gates of a single call to the
SHA-256 compression function is about 25000 and a single call to
the permutation underlying SHA-3 is 38400.
Lightweight Ciphers. Most early designs in this domain focused
on small area when implemented in hardware where an XOR gate
is by a small factor larger than an AND or NAND gate. Notable
designs with a low number of AND gates at the 128-bit security
9
level are the block ciphers Noekeon [29] (2048) and Fantomas [50]
(2112). Furthermore, one should mention Prince [19] (1920), or the
stream cipher Trivium [33] (1536 AND gates to compute 128 output
bits) with 80-bit security.
Custom Ciphers with a Low Number of Multiplications. Mo-
tivated by applications in SHE/FHE schemes, MPC protocols and
SNARKs, recently a trend to design symmetric encryption primi-
tives with a low number of multiplications or a low multiplicative
depth started to evolve. This is a trend we can take advantage of.
We start with the LowMC [6] block cipher family. In the most
recent version of the design [4], the number of AND gates can be be-
low 500 for 80-bit security, below 800 for 128-bit security, and below
1400 for 256-bit security. The stream cipher Kreyvium [24] needs
similarly to Trivium 1536 AND gates to compute 128 output bits,
but offers a higher security level of 128 bits. Even though FLIP [69]
was designed to have especially low depth, it needs hundreds of
AND gates per bit and is hence not competitive in our setting.
Last but not least there are the block ciphers and hash functions
around MiMC [5] which need less than 2· s multiplications for s-bit
security in a field of size close to 2s. Note that MiMC is the only
design in this category which aims at minimizing multiplications
in a field larger than F2. However, since the size of the signature
depends on both the number of multiplications and the size of
the field, this leads to a factor 2s2 which, for all arguably secure
instantiations of MiMC, is already larger than the number of AND
gates in the AES circuit.
LowMC has two important advantages over other designs: It has
the lowest number of AND gates for every security level: The closest
competitor Kreyvium needs about twice as many AND gates and
only exists for the 128-bit security level. The fact that it allows for
an easy parameterization of the security level is another advantage.
We hence use LowMC for our concrete proposal and discuss it in
more detail in the following.
6.2 LowMC
LowMC is a flexible block cipher family based on a substitution-
permutation network. The block size n, the key size k, the number
of 3-bit S-boxes m in the substitution layer and the allowed data
complexity d of attacks can independently be chosen. To reduce
the multiplicative complexity, the number of S-boxes applied in
parallel can be reduced, leaving part of the substitution layer as the
identity mapping. The number of rounds r needed to achieve the
goals is then determined as a function of all these parameters. For
the sake of completeness we include a brief description of LowMC
in Appendix B.
To minimize the number of AND gates for a given k and d, we
want to minimize r·m. A natural strategy would be to set m to 1, and
to look for an n that minimizes r. Examples of such an approach are
already given in the document describing version 2 of the design [4].
In our setting, this approach may not lead to the best results, as
it ignores the impact of the large amount of XOR operations it
requires. To find the most suitable parameters, we thus explore a
larger range of values for m.
Whenever we want to instantiate our signature scheme with
LowMC with s-bit PQ-security, we set k = n = 2 · s. This choice to
double the parameter in the quantum setting takes into account cur-
rent knowledge of quantum-cryptanalysis for models that are very
generous to the attacker [59, 60]. Note that setting s = 64, 96, 128
matches the requirements of the upcoming NIST selection pro-
cess10 for security levels 1, 3 and 5, respectively. Section 7 gives
benchmarks for levels 1, 3, and 5.
Furthermore, we observe that the adversary only ever sees a sin-
gle plaintext-ciphertext pair. In the security proof given in Appendix
D, we build a distinguisher that only needs to see one additional
pair. This is why we can set the data complexity d = 1.11
7 IMPLEMENTATION AND PARAMETERS
We pursue two different directions. First, we present a general pur-
pose implementation for the Fish signature scheme.12 This library
exposes an API to generate LowMC instances for a given parameter
set, as well as an easy to use interface for key generation, signa-
ture generation/verification in both schemes. Using this library we
explore the whole design space of LowMC to find the most suit-
able instances. Second, we present a library which implements the
Picnic signature scheme13. This implementation is parameterized
with the previously selected LowMC instance, since the QROM
instantiation imposes a constant overhead which is independent
of the LowMC instance. Both libraries are implemented in C using
the OpenSSL14 and m4ri15 libraries. We have released both our
libraries as open source under the MIT License.
7.1 Implementation of Building Blocks
The building blocks in the protocol are instantiated similar to the
implementation of ZKBoo [44]. In Appendix C and D, we give more
formal arguments regarding our choices.
PRG. Random tapes are generated pseudorandomly using AES
in counter mode, where the keys are generated using OpenSSL’s
secure random number generator. In the linear decomposition of
the AND gates we use a function that picks the random bits from
the bit stream generated using AES. Since the number of AND
gates is known a-priori, we can pre-compute all random bits at the
beginning. Concretely, we assume that AES-256 in counter mode
provides 128 bits of PRG security, when used to expand 256-bit
seeds to outputs ≈ 1kB in length.
Commitments. The commitment function (used to commit to the
views) is implemented using SHA-256.
Challenge Generation. For both schemes the challenge is com-
puted with a hash function H : {0, 1}∗ → {0, 1, 2}t implemented
using SHA-256 and rejection sampling: we split the output bits of
SHA-256 in pairs of two bits and reject all pairs with both bits set.
One-Way Function. The OWF function family { fk}k ∈Kκ used
for key generation in both signature schemes is instantiated with
LowMC. Concretely, we instantiate { fk} using a block cipher with
fk(x) (cid:66) Enc(x, k),
10http://csrc.nist.gov/groups/ST/post-quantum-crypto/
11d is given in units of log2(n), where n is the number of pairs. Thus setting d = 1
corresponds to 2-pairs, which is exactly what we need for our signature schemes.
12https://github.com/IAIK/fish-begol
13https://github.com/Microsoft/Picnic
14https://openssl.org
15https://bitbucket.org/malb/m4ri
10
where Enc(x, k) denotes the LowMC encryption of a single block