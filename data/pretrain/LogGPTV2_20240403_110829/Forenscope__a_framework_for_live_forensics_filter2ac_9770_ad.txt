cess. Although Forenscope doesn’t restore the contents of
the debug registers faithfully, this doesn’t pose a problem
for most normal applications because only debuggers typi-
cally use this functionality.
Phalanx B6: Phalanx hijacks the system call table by di-
rectly writing to memory via the /dev/mem memory device.
It works by scanning the internal symbol table of the kernel
and redirecting control ﬂow to its own internal functions.
Informant detects Phalanx while checking the system call
table and common kernel pointers. Neutralizer restores the
correct pointers to inoculate Phalanx.
Adore: Adore 8 is a classic rootkit which hijacks kernel point-
ers to deceive tools such as ps and netstat. It works by over-
writing pointers in the /proc ﬁlesystem to redirect control
ﬂow to its own functions rather than modifying the syscall
table directly. Informant detects that the pointers used by
Adore do not belong to the original read-only program code
segment of the kernel and Neutralizer restores the correct
pointers. Restoration of the original pointers is simple and
safe because the overwritten VFS function operations tables
point to static functions such as proc readdir, while Adore
has custom handlers located in untrusted writable kernel
module address space.
Mood-NT: Mood-NT is a versatile multi-mode rootkit that
can hook the system call table, use debug registers and mod-
ify kernel pointers. Because of its versatility, the attacker
can customize it for diﬀerent purposes. Like the rootkits de-
scribed previously, Forenscope detects Mood-NT in various
modes. Our experiments indicate that Mood-NT hooks 44
system calls and Forenscope detects all of these alterations.
Furthermore, each hook points out of the kernel’s read-only
program code address space and into the untrusted memory
area occupied by the rootkit.
Size: Forenscope is written in a mixture of C and x86 as-
sembly code. Table 5 shows that Forenscope is a very small
program. It consumes less than 48 KB in code and 125 KB
in running memory footprint. The lines of code reported
in the table are from the output of the sloccount [29] pro-
gram. We break down the size of each component into core C
and assembly code, hardware-speciﬁc restoration code and
module code. To minimize its size, Forenscope reuses ex-
isting kernel code to reinitialize the disk and network; the
size of this kernel code is device-speciﬁc and therefore ex-
cluded from the table, since these components are not part
of Forenscope. The small compiled size of Forenscope and
its modules implies that a minimal amount of host memory
is overwritten when Forenscope is loaded onto the system.
Furthermore, the diminutive size of the code base makes it
more suitable for auditing and veriﬁcation.
5. DISCUSSION
While evaluating Forenscope, we observed diﬀerent be-
havior of rootkits on virtual machines and physical hard-
ware. Our observations conﬁrm the results of Garﬁnkel et
al [17] that virtual machines cannot emulate intricate hard-
ware nuances faithfully and as a result some malware fails to
activate on a virtual machine. For example, malware such
as the Storm worm and Conﬁcker [30] intentionally avoid
activation when they sense the presence of virtualization to
thwart the analysis process. Hence analyzing a system for
rootkits using a virtual machine may not only cause some
rootkits to slip under the radar but also alert them to de-
tection attempts. Since Forenscope continues to run the
system without exposing any of the issues raised by running
virtualization systems, we argue that the system is unlikely
to tip oﬀ an attacker to the presence of forensic software.
Legally, the jury is still out on the use of live forensic tools
because of the issues of taint and blurriness. While some
recent cases [2] suggest that courts are starting to recognize
the value of the contents of volatile memory, the validity
of the evidence is still being contested. A recent manual
on collecting evidence in criminal investigations released by
8http://stealth.openwall.net
314Table 6: Eﬀectiveness against rootkit threats
Rootkit
Description
Sanitization action
Uses debug registers to hook system calls Rebooting clears debug registers
DR
Phalanx b6 Uses /dev/kmem to hook syscalls
Mood-NT
Adore
Multi-module RK using /dev/kmem/
Kernel module hooks /proc VFS layer
Restore clean syscall table
Clear debug regs, restore pointers
Restore original VFS pointers
the Department of Justice [6], instructs that no limitations
should be placed on the forensic techniques that may be used
to search and also states that use of forensic software, no
matter how “sophisticated,” does not aﬀect constitutional
requirements. Although we do not make strict claims of le-
gal validity in the courts, we are encouraged by the above
guidelines to collect as much volatile information as possi-
ble. We objectively compare our tool against the state of
the art and ﬁnd that it does collect more forms of evidence
with better ﬁdelity than existing tools.
Countermeasures: Although Forenscope provides deep
forensic analysis of a system in a wide variety of scenar-
ios, there are countermeasures that attackers and criminals
can use to counter the use of Forenscope. From an incident
response perspective, we assume that the machine is con-
trolled by the owner and that the attacker does not have
physical access to it. This means that only software-based
anti-forensic techniques are feasible, although some of these
techniques may involve changing hardware settings through
software. Most of the hardware and software state involved
in these anti-forensic techniques are cleared upon reboot or
rendered harmless in Forenscope’s clean environment. In in-
vestigation, the adversary may elect to use a BIOS password,
employ a secure bootloader, disable booting from external
devices or change BIOS settings to clear memory at boot
time. These mitigation techniques may work, but if the
investigator is sophisticated enough, he can try techniques
suggested by Halderman et al [19] to cool the memory chips
and relocate them to another machine which is conﬁgured
to preserve the contents of DRAM at boot time. One other
avenue for working around a password-protected BIOS is to
engage the bootloader itself. We found that some bootload-
ers such as GRUB allow booting to external devices even
if the functionality is disabled in the BIOS. The only mit-
igation against this channel is use password protection on
GRUB itself, which we believe is not frequently used.
Limitations: The only safe harbor for malware to evade
Forenscope is in conventional memory itself because the act
of rebooting pollutes the contents of the lower 640 KB of
memory considerably thus potentially erasing evidence. How-
ever, we contend that although this technique is possible, it
is highly unlikely for three reasons: ﬁrst, for such malware
to persist and alter the control ﬂow, the kernel must map in
this memory area in the virtual address space. This requires
a change in the system page tables which is easily detectable
by Forenscope since most modern operating systems do not
map the conventional memory space into their virtual mem-
ory space. Secondly, such malware would have to inject a
payload into conventional memory and if the payload is cor-
rupted by the reboot process, the system will crash. Finally,
such malware won’t survive computer hibernation because
conventional memory is not saved in the process. Even if
Forenscope is unable to restore the system due to extenu-
ating circumstances, we still have an intact memory dump
and disk image to analyze. Although Forenscope has been
designed with investigation in mind, we have not designed it
to be completely transparent. For instance, malware might
detect the presence of Forenscope by checking BitBlocker
write latencies or scanning conventional memory.
6. RELATED WORK
Forenscope uses many technologies to achieve a high ﬁ-
delity forensic analysis environment through introspection,
data structure analysis and integrity checking. Many of
the introspective techniques used by Forenscope were in-
spired by similar functionality in debuggers and simulators.
VMware’s VMsafe protects guest virtual machines from mal-
ware by using introspection. A virtual machine infrastruc-
ture running VMsafe has a security monitor which period-
ically checks key structures in the guest operating system
for alteration or corruption. Projects such as Xenaccess [22]
take the idea further and provide a way to list running pro-
cesses, open ﬁles and other items of interest from a running
virtual machine in a Xen environment. Although Xenaccess
and Forenscope provide similar features, Xenaccess depends
on the Xen VMM, but the investigator cannot rely on its
presence or integrity. On some older critical infrastructure
machines, legacy software requirements make it impractical
to change the software conﬁguration. Forenscope does not
have such requirements. Forenscope’s techniques to recover
operating system state from structures such as the process
list have been explored in the context of analyzing mem-
ory dumps using data structure organization derived from
reverse-engineered sources [14,27]. Attestation shows that a
machine is running with an approved software and hardware
conﬁguration by performing an integrity check. Forenscope
builds upon work from the VM introspection community to
allow forensic analysis of machines that are not prepared a
priori for such introspection. It provides a transparent anal-
ysis platform that does not alter the host environment and
Forenscope supports services such as BitBlocker that allow
an investigator to explore a machine without inducing taint.
The techniques used by Forenscope for recovering run-
ning systems are well grounded in the systems community
and have been studied previously in diﬀerent scenarios. The
original Intel 286 design allowed entry into protected mode
from real mode, but omitted a mechanism to switch back.
Microsoft and IBM used an elegant hack involving memory
remanence to force re-entry into real mode by causing a re-
boot to service BIOS calls. This technique was described by
Bill Gates as ”turning the car oﬀ and on again at 60 mph”
[24]. Some telecommunications operating systems such as
Chorus [25] are designed for quick recovery after a watch-
dog reset and simply recover existing data from the running
operating system rather than starting afresh. David [13]
showed that it is possible to recover from resets triggered by
the watchdog timer on cell phones. BootJacker [11] showed
that it is possible for attackers to recover and compromise a
running operating system by using a carefully crafted forced
reboot. Forenscope applies these techniques in the context
of forensic analysis and our work presents the merits and
limitations of using such techniques to build a forensic tool.
315Devices such as the Trusted Platform Module and Intel
trusted execution technology (TXT) provide boot time and
run-time attestation respectively. Although TPM may be
available for some machines, the protection aﬀorded by a
TPM may not be adequate for machines which are meant
to run continuously for months. These machines perform an
integrity check when they boot up, but their lengthy uptime
results in a long time of check to time of use (TOCTTOU)
that extends the duration for breaches to remain undetected.
Hardware solutions such as Copilot [23] are available to
check system integrity.
In contrast, Forenscope performs
an integrity assessment at the time of use; which allows the
investigator to collect evidence with better ﬁdelity.
7. CONCLUDING REMARKS
Forenscope explores live forensic techniques and the is-
sues of evidence preservation, non-intrusiveness and ﬁdelity
that concern such approaches. Measured against existing
tools, our experiments show that Forenscope can achieve
better compliance within the guidelines prescribed by the
community. Forenscope shows that volatile state can be
preserved and the techniques embodied in Forenscope are
broadly applicable. We encourage further development of
tools based on our high-ﬁdelity analysis framework and be-
lieve that it can enable the advancement of analysis tools
such as KOP [9]. Extensive evaluation of our techniques has
shown that they are safe, practical and eﬀective by mini-
mally tainting the system, while causing no disruption to
critical systems. We believe that these techniques can be
used in cases where traditional tools are unable to meet the
needs of modern investigations. To continue the develop-
ment of this tool, we plan to work closely with partners to
better evaluate use of this tool in real-world scenarios such
as incident response in a variety of contexts.
Acknowledgements We would like to thank the anony-
mous reviewers, Winston Wan, Mirko Montanari and Kevin
Larson for their valuable feedback. This research was sup-
ported by grants from DOE DE-OE0000097 under TCIPG
(tcip.iti.illinois.edu) and a Siebel Fellowship. The opinions
expressed in this paper are those of the authors alone.
8. REFERENCES
[1] SANS Top 7 New IR/Forensic Trends In 2008.
http://computer-forensics.sans.org/community/top7_
forensic_trends.php.
[2] Columbia Pictures Indus. v. Bunnell, U.S. Dist. LEXIS
46364. C.D. Cal. http://www.eff.org/cases/
columbia-pictures-industries-v-bunnell, 2007.
[3] Prosecuting Computer Crimes, pages 141–142. US
Department of Justice, 2007.
[4] Electronic Crime Scene Investigation: A Guide for First
Responders. pages 25–27, 2008.
[5] Ramdisks - Now We are Talking Hyperspace!
http://www.linux-mag.com/cache/7388/1.html, 2009.
[6] Searching and Seizing Computers and Obtaining Electronic
Evidence in Criminal Investigations, pages 79,89.
Computer Crime and Intellectual Property Section
Criminal Division, 2009.
[7] K. Amari. Techniques and Tools for Recovering and
Analyzing Data from Volatile Memory, 2009.
[8] D. Brezinski and T. Killalea. Guidelines for Evidence
Collection and Archiving. RFC 3227 (Best Current
Practice), Feb. 2002.
[9] M. Carbone, W. Cui, L. Lu, W. Lee, M. Peinado, and
X. Jiang. Mapping kernel objects to enable systematic
integrity checking. In CCS ’09: Proceedings of the 16th
ACM conference on Computer and communications
security, pages 555–565, New York, NY, USA, 2009. ACM.
[10] C. C. Center. How the FBI Investigates Computer Crime.
http://www.cert.org/tech_tips/FBI_investigates_
crime.html, 2004.
[11] E. Chan, J. Carlyle, F. David, R. Farivar, and
R. Campbell. BootJacker: Compromising Computers using
Forced Restarts. In Proceedings of the 15th ACM
conference on Computer and Communications Security,
pages 555–564. ACM New York, NY, USA, 2008.
[12] D. Dai Zovi. Hardware Virtualization Rootkits. BlackHat
Brieﬁngs USA, August, 2006.
[13] F. M. David, J. C. Carlyle, and R. H. Campbell. Exploring
Recovery from Operating System Lockups. In USENIX
Annual Technical Conference, Santa Clara, CA, June 2007.
[14] B. Dolan-Gavitt. The VAD tree: A Process-eye View of
Physical Memory. Digital Investigation, 4:62–64, 2007.
[15] Edge, Jake. DR rootkit released under the GPL.
http://lwn.net/Articles/297775/.
[16] Fuzen Op. The FU rootkit.
http://www.rootkit.com/project.php?id=12.
[17] T. Garﬁnkel, K. Adams, A. Warﬁeld, and J. Franklin.
Compatibility is not transparency: VMM detection myths
and realities. In Proceedings of the 11th Workshop on Hot
Topics in Operating Systems (HotOS-XI), May 2007.
[18] P. Gutmann. Secure Deletion of Data from Magnetic and
Solid-State Memory. In Proceedings of the 6th USENIX
Security Symposium, pages 77–90, July 1996.
[19] J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson,
W. Paul, and J. A. Calandrino. Lest We Remember: Cold
Boot Attacks on Encryption Keys. In Proc of the 17th
USENIX Security Symposium, San Jose, CA, July 2008.
[20] S. T. King, P. M. Chen, Y.-M. Wang, C. Verbowski, H. J.
Wang, and J. R. Lorch. SubVirt: Implementing malware
with virtual machines. In Proceedings of the IEEE
Symposium on Security and Privacy, pages 314–327,
Washington, DC, USA, 2006. IEEE Computer Society.
[21] W. Link and H. May. Eigenshaften von
MOS-Ein-Transistorspeicherzellen bei tieften
Temperaturen. In Archiv fur Elektronik und
Ubertragungstechnik, pages 33–229–235, June 1979.
[22] B. Payne, M. de Carbone, and W. Lee. Secure and ﬂexible
monitoring of virtual machines. In Proceedings of 23rd
Annual Computer Security Applications Conference, pages
385–397, 2007.
[23] N. Petroni, T. Fraser, J. Molina, and W. Arbaugh.
Copilot-A Coprocessor-based Kernel Runtime Integrity
Monitor. In Proceedings of the 13th USENIX Security
Symposium, pages 179–194, 2004.
[24] J. Pournelle. OS | 2: What is is, What is isn’t – and some
of the Alternatives. Infoworld, 1988.
[25] M. Rozier, V. Abrossimov, F. Armand, I. Boule, M. Gien,
M. Guillemont, F. Herrmann, C. Kaiser, S. Langlois,
P. Lonard, and W. Neuhauser. Overview of the CHORUS
Distributed Operating Systems. Computing Systems,
1:39–69, 1991.
[26] A. Savoldi and P. Gubian. Blurriness in Live Forensics: An
Introduction. In Proceedings of Advances in Information
Security and Its Application: Third International
Conference, Seoul, Korea, page 119. Springer, 2009.
[27] A. Schuster. Searching for Processes and Threads in
Microsoft Windows Memory Dumps. The Proceedings of
the 6th Annual Digital Forensics Research Workshop, 2006.
[28] S. Sparks and J. Butler. Raising The Bar for Windows
Rootkit Detection. Phrack, 11(63), 2005.
[29] D. A. Wheeler. SLOCCount.
http://www.dwheeler.com/sloccount.
[30] B. Zdrnja. More tricks from Conﬁcker and VM detection.
http://isc.sans.org/diary.html?storyid=5842, 2009.
316