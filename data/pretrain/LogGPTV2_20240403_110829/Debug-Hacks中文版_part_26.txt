## Page 213
通过这种方式，可以判断该事件是仅在特定情况下发生，还是频繁出现。尽管路径设计初衷并非用于此目的，但其输出信息能够直观地进行确认，这是一大优势。`WARN_ON()` 是内核中的一个宏，用于显示栈跟踪以引起注意。在这里，我们使用 `WARN_ON()` 来验证函数调用。

### 3-1. 使用 `WARN_ON()` 进行验证
如果某个 inode 在创建时即被 `iput()` 释放，那么我们可以利用 `WARN_ON()` 来确认这一过程。inode 是一种缓存机制，能够加速对同一文件的访问。因此，在反复进行文件创建和删除操作后，需要执行 `clear_inode()` 和 `destroy_inode()` 来彻底删除这个 inode。

`iput()` 函数的功能是给 inode 标记为已释放，并从管理列表中移除。由于涉及大量 inode，逐一验证会非常耗时，所以首先需要调查一下具体的情况。

### 考虑图 5-5 中的进程 X
许多路径都会调用 `iput()`，而 `iput()` 又会进一步调用其他函数。下面我们将分步骤来验证这些路径。

#### 3. 确认路径 1
首先要调查源代码，以确定假设是否成立。编写测试程序来验证当进程 X 和 Y 发生互斥时，是否会引发 panic 或其他故障。为了验证这一点，我们需要编写相应的测试代码。

#### 2. 调查源代码
将互斥的原理总结如图 5-5 所示。我们需要确认路径 1 是否会被执行。启用 `CONFIG_PREEMPT` 后，等待获取 `inode_lock` 的进程可能会自行切换，导致其他 CPU 获取到 `inode_lock`。

```c
truncate_inode_pages(&inode->i_data, 0);
if (inode->i_data.nrpages)
    spin_unlock(&inode_lock);
```

---

## Page 214
文件系统类型为 ext3。通过设置较小的文件大小（例如 10MB），可以更好地观察 inode 的行为和原理。应用以下补丁后，重新编译内核：

```diff
@@ -1035,6 +1036,7 @@ static void generic_forget_inode(struct inode *inode)
     write_inode_now(inode, 1);
     if (!sb || (sb->s_flags & MS_ACTIVE))
         WARN_ON(1);
     spin_unlock(&inode_lock);
     inodes_stat.nr_unused++;
     return;
```

### 图 5-5 互斥的原理
进程 X 和进程 Y 之间的互斥可能导致问题。通过以下命令模拟高负载情况：

```bash
# stress --hdd 1 --hdd-bytes 10M
# umount /mnt/10
# cd -
# rm -rfv *
# stress --hdd 5 --hdd-bytes 10M --hdd-noclean -t 5
# cd /mnt/10
# mount /dev/sda10 /mnt/10
```

---

## Page 216
在内存不足的情况下，prune_icache() 会被调用以释放无用的 inode。根据源代码，我们可以确认 prune_icache() 的执行路径。调查结果如图 5-6 所示。

### 4. 确认路径 2
卸载文件系统时也会调用 iput()。这是因为卸载过程中会执行 sync 操作，相关的缓存会被清除。通过以下命令模拟卸载过程：

```bash
# umount /mnt/10
# cd -
# rm -rfv *
# stress --hdd 5 --hdd-bytes 10M --hdd-noclean -t 5
# cd /mnt/10
# mount /dev/sda10 /mnt/10
```

---

## Page 217
接下来，我们将删除 generic_forget_inode() 中的 WARN_ON(1)，并使用 WARN_ON() 来确认 prune_icache() 是否被执行。补丁如下：

```diff
@@ -1035,7 +1036,6 @@ static void generic_forget_inode(struct inode *inode)
     write_inode_now(inode, 1);
     if (!sb || (sb->s_flags & MS_ACTIVE))
         WARN_ON(1);
     spin_unlock(&inode_lock);
     inodes_stat.nr_unused++;
     return;
```

### 调整参数 vfs_cache_pressure
通常，shrink_icache_memory() 只处理未使用的 inode 数量 nr_unused。通过调整 `/proc/sys/vm/vfs_cache_pressure` 参数，可以增加 shrink_icache_memory() 的执行频率。增大该值可以提高 inode 的释放率。

```bash
# echo 5000 > /proc/sys/vm/vfs_cache_pressure
```

---

## Page 218
为了提高复现率，我们在代码中添加了 mdelay() 延迟 50 毫秒。mdelay() 不会导致进程调度，只进行简单的延迟。

### 5-1. 在正常内核上进行复现试验
在不包含 WARN_ON() 的正常内核上执行脚本几个小时，看看 bug 是否能复现。同时执行通过路径 1 的 umount 命令和通过路径 2 的复现测试程序。

```c
@@ -1035,6 +1036,7 @@ static void generic_forget_inode(struct inode *inode)
     write_inode_now(inode, 1);
     if (!sb || (sb->s_flags & MS_ACTIVE))
         WARN_ON(1);
     spin_unlock(&inode_lock);
     inodes_stat.nr_unused++;
     return;
```

---

## Page 220
应用内核 2.6.12 的补丁后，这个 bug 就被修复了。利用加入了 mdelay() 的内核和改进后的测试程序，几分钟后 bug 就复现了。下面是具体的 backtrace 信息：

```bash
crash> bt
#15 [10042975f50] error_exit at fffffff8011d9d
#14 [10042975ef0] sys_newstat at fffffff80182a44
PID: 4733 TASK: 100139c27f0
#
ORIG_RAX: ffffffffffffffff CS: 0010 SS: 0018
R13: 000001013ab46800 R14: 000001013a187d78 R15: 0000010042975d58
[10042975ed0] sys_umount at ffff80195217
[10042975e50] ext3_put_super at ffffffa00913dd
[10042975d50] write_inode_now_err at ffffffff80199204
[10042975d10]
RIP: ffffffff80199088 RSP: 0000010042975d18 RFLAGS: 00010246
[exception RIP: _writeback_single_inode+643]
[10042975ea0]
[10042975e80]g
[10042975db0] generic_drop_inode at ffffffff80193388
[10042975c00] find_get_pages_tag at fffffff8015b24c
[10042975b80] do_page_fault at fffffff80123978
[10042975b70] try_crashdump at ffffff8014bd01
[10042975b40] start_disk_dump at fffffffa01a336d
[10042975eb0]d
10042975dd0]i
```

确认即使加入 mdelay() 也不会复现 bug，是非常重要的一步。