necessary information for the analyzer. Further, it maps code
to the binary, and also sets up the communication wrapper for
the recorder. While recompiling, we instruct the compiler to
inject code at method call and return points. This is supported
by gcc and clang, with function instrumentation and header
inclusion in every compile unit before any other include.
The injected code will read a counter value from a suitable
source, like the software counter provided by the recorder, and
collect the address of the call or return. Further, the injected
code sets up a log, which is used to collect the performance
measurement. The log is set up before any of the measured
code is being executed. We can link the setup and tear down
code either statically or dynamically.
At a high-level, the log structure consists of the log header
and multiple log entries. Figure 2 (a) shows the log header
format. The header stores ﬂags, version number of the log
structure, the memory address mapping of the shared memory,
the process ID of the proﬁled application, the maximum size
of the log structure, an index to the tail of the log for the next
log entry write, and a pointer to a well known function entry
(address of proﬁler).
The ﬂags contain for example, if the measurement is cur-
rently active, and which events should be measured. These
ﬂags are stored in a data structure, which can be atomically
read and written by the underlying hardware (HW) platform.
This allows to change the ﬂags while the application is exe-
cuted, without introducing critical sections into the execution,
which could become a bottleneck and alter the performance
characteristics of the measured application. While the ﬂags
can be changed during the execution, and thereby control
the recorder, the version number is used to support different
415
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:15:59 UTC from IEEE Xplore.  Restrictions apply. 
64
63
17
16
0
Counter value
Active
Flags
Multi
thread
Version
Untrusted host memory
Trusted Execution Environment
Fn(A)
Recorder
Fn(B)
Process ID
Log size
64
63
0
Call
/ Ret
Counter value
Index of next write
Call/Ret instr. address
Software 
counter 
Counter 
value
Call B
Write log
Call B
Ret
Ret
Write log
Address of profiler in memory
Thread ID
Log header
Log entry #1
Log entry #2
(a) Log header format
(b) Log entry format
Figure 2: Log format of TEE-PERF
Shared memory
Figure 3: Recorder overview
log structure layouts in the analyzer and is static after it is
written once. Therefore, the version number does not have to
be accessible atomically.
The process ID is used to differentiate multiple runs or
multiple application from each other in the analyzing phase.
The maximum size of the log is determined at the beginning,
and afterwards it is immutable. It is used in the recorder to
know when the log is full, and for the analyzer to dismiss
records, which might be wrong at the end of the log.
The pointer to the tail of the log has to be incremented
atomically, and it stores the ﬁrst position of the ﬁrst empty
entry. Any thread which wants to write to the log executes
a fetch-and-add instruction on the pointer, guaranteeing that
each possible entry is only written once. Since the order
of call/returns is only important within the same thread, the
possibility of unfair access to the tail does not change the
result of the analyzer.
We also added a pointer to a method, which is added by
the recorder, to be able to easily determine the mapping offset
of relocatable code. This information is necessary to correlate
an instruction pointer (IP) with a function in the object and
DWARF ﬁle.
Each log entry itself consists of 4 data ﬁelds (see Figure 2
(b)), storing if the executed instruction was a call or return, the
current timestamp, the call or return address, and the threadID
of the thread executing the instruction. (We also support multi-
threaded applications (see §II-C), which means we also need
to record the thread ID as part of the recorded log.)
Stage #2: Recorder. The recorder is the run-time component
of TEE-PERF. It consists of two parts (See Figure 3): the code
injected in the compiler phase, and the recorder wrapper. The
recorder wrapper sets up a shared memory region between
the measured application and the wrapper. Since the shared
memory is mapped between the TEE and the host, it should
not increase the TEE’s memory, which is usually limited.
The linked in library maps the shared memory region into
the measured applications address space and announces its
position through a globally accessible variable. Furthermore,
the library will initialize the shared memory to a known state
before any of the records can be written.
When a call or return instruction is executed, the program
instead of jumping directly to the call/return address will
jump to the injected code, i.e. function instrumentation. The
instrumented code writes the address of the call/return target,
the type of the instruction: call or return, instruction together
with the current timestamp, and the threadID into the shared
memory (see the log entry in Figure 3). Since the log header
allows to increase the tail atomically, the injected code can
reserve a log entry in the shared memory before writing the
entry itself; thus, the writing process to the log is lock-free.
While we designed the log in such a way that it can be
used lock-free with atomic instructions, TEE-PERF does not
actually rely on the availability of these instruction and can use
alternative ways of synchronization. The tracing of call/return
address can be dynamically de-/activated by the user at any
time. Since TEE-PERF is designed for the development phase,
and not production environment,
the
recorder leaks information into the host memory.
is acceptable,
it
that
After the measurement, the recorder wrapper writes the
entire log to the persistent storage, allowing the analyzer
to read the log ﬁle. Additionally,
the recorder process is
responsible for making the hardware counters accessible for
measurement. If no hardware counters are available, for the
TEE measurements, the recorder uses a software counter. This
software counter is implemented by a thread incrementing a
counter in a tight loop. While this sacriﬁces an entire core
to the counter, it also provides a ﬁne and accurate enough
clock to be used for measurements. TEE-PERF does method-
level relative proﬁling, thus perfectly accurate counter are not
necessary. Furthermore, since the loop is very small and only
accesses the header of the log, the cache footprint is very
small, which should minimize the performance impact of the
counter incrementation on the measured application.
Stage #3: Analyzer. The analyzer reads the entire log ﬁle, and
thereafter, it groups the call and return entries together. The
grouping is done for each thread independently. Since a thread
ID is stored in each log entry, the analyzer is able to determine
416
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:15:59 UTC from IEEE Xplore.  Restrictions apply. 
the run of each thread. We can then use the call and returns
to build a call stacks for each method. Furthermore, we have
the counter at the method entry and the method exit, using
this information the analyzer calculates the time spent in the
method. It is also able to subtract the time of the method called
by the method and infer the real time spent in the method.
Thereafter, it then adds the time of each function execution
together for each method. This information is then presented
in a sorted way to the programmer. Additionally, the analyzer
provides a rich declarative query interface (§II-C), which
allows to do more queries on the collected data, giving the
developer the tools to investigate further, e.g. which thread
called which method how often.
Stage #4: Visualizer. Lastly, we have integrated the output
of the analyzer with Flame Graph [1], a popular visualization
tool that allows identiﬁcation of the most frequent code paths
quickly and accurately.
C. Additional Design Features
We next present the additional design features supported by
TEE-PERF.
Multithreading support. Our TEE-PERF tool supports per-
formance measurements of multi-threaded applications. To do
so, we extended the log ﬁle format by writing a threadID to the
log ﬁle. The analyzer can then reconstruct a progress ﬂow of
each thread by sorting the log entries by the threadID. While
our tool cannot guarantee that each recorded method enter and
exit event is correctly ordered in the log, it can guarantee that
for each single thread, as the recorder holds the execution of
the thread until the corresponding log entry is written.
Note that the access to the log, while recording, is lock-
free, due to the append only nature and the use of atomic
instructions. Therefore, we keep the overhead of writing to
the log to a minimum.
Call stack. We further support full reconstruction of the call
stack. Since the recorder writes every method enter and exit
into the log, we are able to fully reconstruct the call stack of
every single call. This not only allows us to make accurate
timing calculation for every method, but also allows us to
support more complicated queries, e.g. performance depending
on the call history of a method.
Queries. After the analyzer has read the log, the user can issue
further queries. We support a rich query interface for analyzing