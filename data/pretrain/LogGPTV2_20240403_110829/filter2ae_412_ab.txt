    package com.longofo;
    import java.lang.instrument.ClassFileTransformer;
    import java.lang.instrument.IllegalClassFormatException;
    import java.lang.instrument.Instrumentation;
    import java.security.ProtectionDomain;
    public class SufMainAgent {
        static {
            System.out.println("SufMainAgent static block run...");
        }
        public static void agentmain(String agentArgs, Instrumentation instrumentation) {
            System.out.println("SufMainAgent agentArgs: " + agentArgs);
            Class[] classes = instrumentation.getAllLoadedClasses();
            for (Class cls : classes) {
                System.out.println("SufMainAgent get loaded class: " + cls.getName());
            }
            instrumentation.addTransformer(new DefineTransformer(), true);
        }
        static class DefineTransformer implements ClassFileTransformer {
            @Override
            public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
                System.out.println("SufMainAgent transform Class:" + className);
                return classfileBuffer;
            }
        }
    }
MANIFEST.MF
    Manifest-Version: 1.0
    Can-Redefine-Classes: true
    Can-Retransform-Classes: true
    Agent-Class: com.longofo.SufMainAgent
TestSufMainAgent
    package com.longofo;
    import com.sun.tools.attach.*;
    import java.io.IOException;
    import java.util.List;
    public class TestSufMainAgent {
        public static void main(String[] args) throws IOException, AgentLoadException, AgentInitializationException, AttachNotSupportedException {
            //获取当前系统中所有 运行中的 虚拟机
            System.out.println("TestSufMainAgent start...");
            String option = args[0];
            List list = VirtualMachine.list();
            if (option.equals("list")) {
                for (VirtualMachineDescriptor vmd : list) {
                    //如果虚拟机的名称为 xxx 则 该虚拟机为目标虚拟机，获取该虚拟机的 pid
                    //然后加载 agent.jar 发送给该虚拟机
                    System.out.println(vmd.displayName());
                }
            } else if (option.equals("attach")) {
                String jProcessName = args[1];
                String agentPath = args[2];
                for (VirtualMachineDescriptor vmd : list) {
                    if (vmd.displayName().equals(jProcessName)) {
                        VirtualMachine virtualMachine = VirtualMachine.attach(vmd.id());
                        virtualMachine.loadAgent(agentPath);
                    }
                }
            }
        }
    }
Testmain
    package com.longofo;
    public class TestMain {
        static {
            System.out.println("TestMain static block run...");
        }
        public static void main(String[] args) {
            System.out.println("TestMain main start...");
            try {
                for (int i = 0; i [] classes = instrumentation.getAllLoadedClasses();
            for (Class cls : classes) {
                System.out.println("SufMainAgent get loaded class: " + cls.getName());
            }
            instrumentation.addTransformer(new DefineTransformer(), true);
        }
        static class DefineTransformer implements ClassFileTransformer {
            @Override
            public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
                System.out.println("SufMainAgent transform Class:" + className);
                return classfileBuffer;
            }
        }
    }
WeblogicTestSufMainAgent：
    import com.sun.tools.attach.*;
    import java.io.IOException;
    import java.util.List;
    public class WeblogicTestSufMainAgent {
        public static void main(String[] args) throws IOException, AgentLoadException, AgentInitializationException, AttachNotSupportedException {
            //获取当前系统中所有 运行中的 虚拟机
            System.out.println("TestSufMainAgent start...");
            String option = args[0];
            List list = VirtualMachine.list();
            if (option.equals("list")) {
                for (VirtualMachineDescriptor vmd : list) {
                    //如果虚拟机的名称为 xxx 则 该虚拟机为目标虚拟机，获取该虚拟机的 pid
                    //然后加载 agent.jar 发送给该虚拟机
                    System.out.println(vmd.displayName());
                }
            } else if (option.equals("attach")) {
                String jProcessName = args[1];
                String agentPath = args[2];
                for (VirtualMachineDescriptor vmd : list) {
                    if (vmd.displayName().equals(jProcessName)) {
                        VirtualMachine virtualMachine = VirtualMachine.attach(vmd.id());
                        virtualMachine.loadAgent(agentPath);
                    }
                }
            }
        }
    }
列出正在运行的Java应用程序：
进行attach：
Weblogic输出：
假如在进行Weblogic
t3反序列化利用时，如果某个类之前没有被加载，但是能够被Weblogic找到，那么利用时对应的类会通过Agent的transform，但是有些类虽然在Weblogic目录下的某些Jar包中，但是weblogic不会去加载，需要一些特殊的配置Weblogic才会去寻找并加载。
#### Instrumentation局限性
大多数情况下，使用Instrumentation都是使用其字节码插桩的功能，笼统说是 **类重转换** 的功能，但是有以下的局限性：
  1. premain和agentmain两种方式修改字节码的时机都是类文件加载之后，就是说必须要带有Class类型的参数，不能通过字节码文件和 **自定义的类名** 重新定义一个本来 **不存在** 的类。这里需要注意的就是上面提到过的重新定义，刚才这里说的 **不能重新定义** 是指不能重新换一个类名，字节码内容依然能重新定义和修改，不过字节码内容修改后也要满足第二点的要求。 
  2. 类转换其实最终都回归到类重定义Instrumentation#retransformClasses()方法，此方法有以下限制：   
1.新类和老类的父类必须相同；  
2.新类和老类实现的接口数也要相同，并且是相同的接口；  
3.新类和老类访问符必须一致。 新类和老类字段数和字段名要一致；  
4.新类和老类新增或删除的方法必须是private static/final修饰的；  
5.可以删除修改方法体。
实际中遇到的限制可能不止这些，遇到了再去解决吧。如果想要重新定义一全新类（类名在已加载类中不存在），可以考虑基于类加载器隔离的方式：创建一个新的自定义类加载器去通过新的字节码去定义一个全新的类，不过只能通过反射调用该全新类的局限性。
#### 小结
  * 文中只是描述了JavaAgent相关的一些基础的概念，目的只是知道有这个东西，然后验证下之前遇到的一个问题。写的时候也借鉴了其他大佬写的几篇文章[4]&[5]
  * 在写文章的过程中看了一些如[一类PHP-RASP实现的漏洞检测的思路](https://c0d3p1ut0s.github.io/%E4%B8%80%E7%B1%BBPHP-RASP%E7%9A%84%E5%AE%9E%E7%8E%B0/)[6]，利用了污点跟踪、hook、语法树分析等技术，也看了几篇大佬们整理的Java RASP相关文章[2]&[3]，如果自己要写基于RASP的漏洞检测/利用工具的话也可以借鉴到这些思路
代码放到了[github](https://github.com/longofo/learn-javaagent)上，有兴趣的可以去测试下，注意pom.xml文件中的jdk版本，在切换JDK测试如果出现错误，记得修改pom.xml里面的JDK版本。
#### 参考
1.  
2.  
3.  
4.  
5.  
6.
* * *