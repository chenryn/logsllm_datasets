Stack frames and the instrumented code for sample functions F7
and F8 are shown in Figures 4 and 5 respectively. Our solution im-
poses memory overhead that is approximately linear to the runtime
depth of the callstack. More details can be found in Section 6.
Figure 3: Pivoting within the stack region. A call-preceded
gadget in some_func is abused as a pivot gadget through a
vulnerability in function F6.
unintended gadgets [28, 29] and the state-of-the-art in CFI make
similar assumptions [44, 45].
Consider Figure 3 where the attacker injects payload into a
function’s stack frame and exploits a vulnerability to invoke the
call-preceded gadget in another function to pivot the stack pointer.
These attacks can manifest as payload injection in one frame and
exploit in another frame, and are known to be practical [15]. While
pivoting-based solutions [14, 32] can not defend against such at-
tacks, they are well within the scope of our solution.
4 SPI – OVERVIEW
4.1 SPI – Property
This work is driven by the observation that code-reuse attacks violate
the intended use of the stack pointer. In attacks that use stack pointer
in the ULB sequence, the stack pointer is abused to assume the role
of an instruction pointer, whereas in the case of modern COOP-type
attacks, the intended use of stack pointer is violated and results in
mis-alignment in stack frames.
We define the integrity of stack pointer using properties that
capture its normal behavior. We define SPI using two sub-properties:
P1 Stack Localization: The stack pointer always resides within
the stack region allocated for the current context (i.e., thread)
of execution. That is:
StackBaseT hr ead :push rbpmov rbp, rspsub rsp, 0x88 jmp *rbx  add rsp, 0x88retPayload in arrayF6() s frame:push rbpmov rbp, rspsub rsp, 0x18 call funccall_prec_gadget:add rsp, 0x18pop rbpret0x880x18F7() { int x, y;  return;}128-byte AlignedReturn AddrRBPm[0]...m[0x5f]...128-byte Alignedn[0]...n[0x5f]...128-byte AlignedRSP0RSP1F8() { char m[0x60]; char n[0x60];  call foo();  return;}dummy_var128-byte AlignedReturn AddrRBPxy...128-byte AlignedRSP0RSP1119I1 Within a function body, the stack pointer will be n-byte
I2 No local variable will occupy an n-byte aligned memory
aligned.
location.
I2 is essential to ensure that an attacker does not inject payload
into an n-byte aligned local variable, and then pivot to that location
using a gadget. Further, by setting n to be a power of 2, SPIglass
can quickly sanitize the stack pointer using a single instruction,
which greatly reduces enforcement overhead. A detailed evaluation
of performance with respect to alignment is presented in Section 6.
During compilation, the compiler sets up a stack frame to ac-
commodate local variables in a function. SPIglass enlarges each
stack frame to occupy one or more n-byte aligned frames. This
ensures that the stack pointer will be n-byte aligned at all times
except during function prologue and epilogue (i.e., stack allocation
and deallocation). Further, because the enlarged frame extends be-
yond already allocated variables, relative offsets of variables within
a frame remain unchanged. Code to sanitize the stack pointer is
inserted after each allocation and before each deallocation of stack
frame to assert n-byte alignment.
5.2 Function Frames Smaller than n bytes
If the stack space required by a function is less than the alignment
size, SPIglass assigns a single aligned stack frame for the function.
Furthermore, appropriate adjustments (a multiple of DWORD_SIZE)
is added to accommodate the storage of return address and callee
saved registers on the stack. This results in a memory overhead
which is evaluated in Section6.
5.3 Large Function frames
If the stack size required by the function is greater than the align-
ment size, it is possible for a local variable to be allocated on n-byte
alignment, which violates I2. In such cases, SPIglass partitions the
function’s stack frame into multiple n-byte aligned frames.
Frame partitioning. An algorithm to partition large stack frames
is presented in Algorithm 1. It is a simplified version of the knapsack
algorithm. Each partition contains local variables of the function
and a dummy variable in each n-byte aligned address. Procedure
InsertDummyVars allocates variables into frames until the n-byte
boundary is reached. Then, a new aligned frame is allocated and a
dummy variable is inserted at the boundary. The process is repeated
until all the variables in the function are allocated.
Although the dummy variable is not directly referenced in the
code, it might be possible for an attacker to overflow one of the
local variables to inject a payload beginning at the dummy variable.
In order to prevent such attacks, SPIglass sanitizes all the dummy
variables in a function before any direct or indirect branch instruc-
tion (line 30 in Algorithm 1). Because the number of functions with
large frames is relatively low, the overhead incurred in sanitizing
dummy variables is low.
Furthermore, if a variable of a function (e.g., a large array or
a structure) is larger than the aligned frame size, overlap on to
subsequent frames can not be avoided. Such functions can therefore
not be protected. In Section 6, we provide a distribution of stack
frame size, and make recommendations for optimal alignment.
Figure 5: Assembly code for unprotected and protected func-
tion F7. The stack allocation (sub) and deallocation (add) are
modified to adjust allocation to alignment boundaries, and
the stack pointer is sanitized in the function prologue and
epilogue. A dummy variable is inserted in F8, and is sani-
tized before any control transition. An adjustment of two
DWORD_SIZE is made in order to accommodate the saved
RBP register and the return address.
Interoperability: Support for interoperability means the ability for
protected and unprotected modules to seamlessly invoke function-
ality within each other. In order to support interoperability between
protected and unprotected modules, we detect entry points within
the protected module and generate wrappers that (1) save the stack
pointer, (2) align the stack pointer to n byte boundary, (3) invoke
the functionality in the protected module, and (4) restore the stack
pointer before returning control to the unprotected module.
Backward Compatibility: We provide an implementation of SPI
in SPIglass, an LLVM-based prototype. SPIglass generates programs
that can execute without any modifications to the hardware or the
operating system.
5 STACK-POINTER INTEGRITY (SPI)
5.1 Defense Policy
SPIglass reserves each n-byte aligned address for the stack pointer.
Therefore, the function frame allocation and deallocation occur in
multiples of n-byte frames where n is a power of 2. This allows
low-overhead sanity checks on stack pointer.
Stack pointer invariant. After the allocation and deallocation of
each function frame, the following invariants hold:
:push rbpmov rbp, rspsub rsp, 0x10  add rsp, 0x10pop rbpret:push rbpmov rbp, rspsub rsp, (2n–2*DWORD_SIZE)and rsp, MASK(n) mov dummy, $0x0call/jmp loc mov dummy, $0x0and rsp, MASK(n)add rsp, (2n–2*DWORD_SIZE)pop rbpadd rsp, (DWORD_SIZE)and rsp, MASK(n)sub rsp, (DWORD_SIZE)ret:push rbpmov rbp, rspsub rsp, 0xD0 call/jmp loc  add rsp, 0xD0pop rbpret:push rbpmov rbp, rspsub rsp, (n–2*DWORD_SIZE)and rsp, MASK(n) and rsp, MASK(n)add rsp, (n–2*DWORD_SIZE)pop rbpadd rsp, (DWORD_SIZE)and rsp, MASK(n)sub rsp, (DWORD_SIZE)ret1205.4 Interoperability
While the unprotected modules do expose an attack surface, and
may be used by an attacker for pivoting, interoperability between
protected and unprotected modules is essential for practical use.
Firstly, it allows incremental deployment of the defense where
some modules are protected and some or not. Second, it allows
enforcement strategies where a trade-off between risk and mem-
ory overhead can be made. For example, protections can only be
applied to those modules that show high occurrences of explicit SP-
update instructions. We identify two interaction scenarios between
modules:
Protected to Unprotected (P2U): this control transition occurs when
a protected module invokes functionality in an unprotected mod-
ule. For example, if libc is not protected and a protected module
invokes functions in libc, the control transitions from a protected
module to an unprotected module (e.g., calls to printf, malloc). P2U
is inherently supported by SPIglass. Because the stack pointer is
not sanitized in the unprotected module, and the stack frame is
conserved when the control returns to the protected module, the
sanity checks in the protected module are unaffected by the call
and return from the unprotected module.
Unprotected to Protected (U2P): this control transition occurs when
an unprotected module invokes functionality in the protected mod-
ule. Because the unprotected module does not align the stack pointer,
the sanity checks in the protected module will corrupt the stack
pointer before returning control to the unprotected module. In order
to prevent stack pointer corruption, SPIglass intercepts the control
at all the entry points in the protected module, and aligns the stack
pointers to the n-byte boundary before resuming the execution at
the entry point.
Entry points in the protected module. We identify four types
of entry points to a module:
(1) Entry point function: This is the main function of an exe-
cutable or the init function of a library.
(2) Exported functions: Exported functions are explicit entry
points to a module that are stored in the EXPORT table of a
module. They are retrieved during compilation.
(3) Constructors and destructors of global objects: In C++, glob-
ally declared objects must be constructed before the main
function begins execution. In case of LLVM-clang, for each
global variable, the compiler front-end (clang) generates
a corresponding cxx_global_var_init function. Further-
more, global_ctors and global_dtors—lists of global con-
structors and destructors—are generated. These functions
are retrieved during compilation.
(4) Call-back functions: In some cases, function pointers are
passed from one module to another to be invoked at a later
point in execution. For example, the qsort function in the
standard C library accepts a comparator function that is in-
voked during comparison of two elements. If unhandled, the
invocation of the comparator function results in a U2P tran-
sition and leads to stack corruption. Functions that invoke
function pointers are identified during compilation, and the
potential targets are captured as entry points.
return
▷ Large objects must not be partitioned.
for each Func in Proдram do
Algorithm 1 Algorithm to partition large frames in a program.
1: procedure PartitionFrames(Proдram, Aliдnment)
2:
if Func.LarдestV ar .Size ≥ Aliдnment then
3:
4:
5:
6:
7:
8:
9:
10:
11:
12: end procedure
end if
if Func.FrameSize > Aliдnment then
InsertDummyV ars (Func)
SanitizeDummyV ars (Func)
end for
return
end if
13: procedure InsertDummyVars(Func)
14:
used ← CalleeSavedReдs.Size () ▷ Return addr, RBP, other
for each var in Func do
callee saved registers.
if used + var .Size ≥ Aliдnment then
frame boundary, so start a new frame.
▷ var crosses
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26: end procedure
end for
N ewFrame ← Func.AddAliдnedFrame ()
dummy = CreateV arAt (N ewFrame.start )
Func.dummy_vars.add (dummy)
Func.CurrentFrame ← N ewFrame
used ← dummy.Size
end if
Func.CurrentFrame.add (var )
used ← used + var .size
for each dummy in Func.dummy_vars do
N ewInsts.add (CreateInst (MOV(dummy,0x0)))
end for
for each Inst in Func do
27: procedure SanitizeDummyVars(Func)
28:
29:
30:
31:
32:
33:
34:
35:
36: end procedure
InsertBe f ore (Inst, N ewInsts)
end for
end if
if Inst .isDirectOrIndirectBranch() then
Entry points are encapsulated in wrapper code that (1) saves the
current value of stack pointer, (2) aligns the stack pointer to the
next n-byte boundary, and (3) calls the corresponding entry point.
Upon return from the entry point, the wrapper restores the stack
pointer and returns the control back to the unprotected calling
module.
5.5 Dynamic allocation using alloca
Functions may request for dynamic allocation of stack space through
a call to alloca. In such cases, the function frame size is unknown
at compile time. Stack space is allocated during runtime either as
a call to alloca, or as an inlined function where an absolute SP-
update instruction is used to update the stack pointer. In either
121case, after alloca completes execution, SPIglass sanitizes the stack
pointer by forcing it to the next largest n-byte boundary. Dealloca-
tion of the stack frame is unaffected because the stack pointer is
restored to the caller frame using an absolute SP-update instruc-
tion, and like any other deallocation, stack pointer is sanitized by
SPIglass. Furthermore, SPIglass can not inject dummy variables to
protect functions that use alloca if their frame size is larger than
n-bytes. A detailed discussion is presented in Section 7.2.
5.6 Abnormal Flows
setjmp and longjmp. SPIglass provides implicit support for setjmp
and longjmp. When a call to setjmp is encountered, the current
state including the instruction pointer and stack pointer are saved
into a buffer. Upon execution of longjmp the saved values are re-
stored. Because the stack pointer is n-byte aligned before the call
to setjmp (due to I1), it remains n-byte aligned after longjmp.
C++ Exceptions. Both clang and gcc follow Itanium C++ ABI to
implement exceptions in C++[1]. After an exception is thrown,
_Unwind_RaiseException is invoked to perform stack unwinding.
It unwinds one frame at a time and updates the stack pointer and
program counter until it reaches the frame with the exception
handler. This process eventually restores the appropriate execution
state including the stack pointer’s value before transferring control
to the landing pad. As a result, stack pointer integrity is consistent
before and after the exception.
JIT code transitions. If a browser is protected with SPI, but the
generated Just-In-Time (JIT) code is not, transition from the JIT
code to browser code results in a U2P transition. While we do not
support JIT code in the current iteration of SPIglass, one solution
is to identify and wrap entry points for such U2P transitions. A
more effective and robust solution would be to alter the JIT engine
to incorporate SPI in the JIT code.
5.7 SPIglass vs PBlocker and EMET
SPIglass accommodates a significantly larger attack space than
PBlocker and Microsoft’s EMET. First, PBlocker and EMET only
defend against inter-stack pivoting where the payload is located
outside the stack, whereas SPIglass can defend against all attacks
that violate SPI. Second, PBlocker cannot defend against stack-
aligned payloads that are injected through stack overflow (Section
4.3 in [32]). SPIglass can protect against such attacks because each
potential gadget in modules protected by SPIglass contains code
that sanitizes the stack pointer and forces it to n-byte alignment,
disallowing control transitions between gadgets.
5.8 Defeating COOP
Whenever the number of arguments passed in the main-loop gadget
is not equal to the number of arguments accepted by a gadget
(virtual function), the stack conservation property is violated, and
as such SPIglass will stop such attacks. However, in x86-64, because
the first few arguments are passed in registers (rdi, rsi, rdx, rcx, r8,
r9), the misalignment of the stack pointer can be avoided for gadgets
with 6 or fewer arguments. While SPIglass does not stop such cases