1130969123 *:*  164.254.133.198:80/tcp
1130990210 *:*  164.254.133.194:*
1130992153 54.75.124.72:19150/tcp  164.254.133.146:* 977 K 79 MB large ﬂow
1130999627 164.254.132.247:80/tcp  *:*
986 K 823 MB large src internal
1.07 M 654 MB large dst internal
1.12 M 357 MB large dst internal
Event Flags
Pkts
Bytes
164.254.132.227:*  *:*
164.254.133.198:80/tcp  *:*
164.254.132.247:80/tcp  *:*
71.213.72.252:80/tcp  164.254.133.56:*
*:80/tcp  164.254.132.88:*
*:*  164.254.133.194:*
1.02 M 781 MB large src internal
1.90 M 1.47 GB large src internal
1.84 M 1.22 GB large src internal
1.21 M 968 MB large src internal
498 K 522 MB large ﬂow
459 K 479 MB large dst internal
1.35 M 427 MB large dst internal
nections, or bytes), HH generates a Bro event reporting this fact and removes the cor-
responding trafﬁc from the coarser-grained table entries. Note that more speciﬁc tables
generally use lower thresholds than more generic ones.
Table 2 shows the tables maintained by HH. The speciﬁcity ﬁeld orders the tables from
more speciﬁc (higher numbers) to more general. The mnemonics sa stands for “source
address,” dp for “destination port,” etc. We use Bro’s state management capabilities to
automatically remove table entries after a period of inactivity (no read or write).
Output. Table 3 shows an example of a report generated by HH (with anonymized
network addresses). The ﬁrst 5 lines were produced in real-time at the given timestamp.
The remaining lines are produced upon termination The ﬂags ﬁeld states whether the
reported host belongs to the list of hosts belonging to the internal network being mon-
itored (a user-conﬁgurable parameter); it is omitted for macroﬂows whose granularity
includes both an internal and an external host.
Finally, we note that we can extend this sort of analysis using additional macroﬂow
attributes, such as packet symmetry [14] or the ratio of control segments to data seg-
ments. Due to limited space, we defer discussion of these to [11].
5.3 Backdoor Detection
Another example of analysis enabled by the Secondary Path is our implementation of
previous work on using packet ﬁlters to efﬁciently detect backdoors [26]. That work
286
J.M. Gonzalez and V. Paxson
Table 4. Performance of Generic Backdoor Detector, Main Path vs. Secondary Path
Approach
Main Path, no analyzers
Main Path-based generic backdoor analyzer
Main Path, SP-based generic backdoor analyzer
SP-based generic backdoor analyzer, no Main Path
Run Time
890 sec
+406 sec
+289 sec
284 sec
deﬁnes a backdoor as an application not running on its standard, well-known port, and
proposes two different mechanisms to detect these.
The ﬁrst mechanism consists of looking for indications of interactive trafﬁc by ana-
lyzing the timing characteristics of small (less than 20 bytes of payload) packets. This
approach comes from the intuition that interactive connections will manifest by the
presence of short keystrokes (large proportion of small packets) caused by human re-
sponses (frequent delays between consecutive small packets).
The second mechanism consists of extracting signatures of particular protocols
(SSH, FTP, Gnutella, etc.) and looking for instances of these on ports other than the
protocol’s usual one.
We implemented both approaches in Bro using our Secondary Path mechanism. Do-
ing so is quite simple, and provides an operational capability of considerable value for
integrating into Bro’s mainstream analysis.
Keystroke-based Backdoor Detection. Bro already includes an implementation of
the “generic algorithm” for detecting interactive backdoors. In creating an implemen-
tation based on the Secondary Path, our goals were increased ease-of-expression and
performance.
See [11] for details regarding our implementation. We veriﬁed its correctness by
comparing its results with that of the original detector. As our evaluation trace, tcp-
1, had almost no backdoor-like interactive trafﬁc (just some AOL Instant Messenger),
we checked how well each detector performed for discovering the trace’s well-known
interactive connections, namely SSH trafﬁc. (The site no longer allows Telnet or Rlogin
trafﬁc over the Internet.) We did so by removing 22/tcp from the list of well-known ports
where the detector does not carry any processing. We also had to adjust the original
algorithm’s notion of “small” packet upwards from 20 bytes to 50 bytes due to how
SSH pads packets with small payloads.
We measured four different conﬁgurations on the tcp-1 trace, as shown in Table 4.
The extra time incurred by the original detector is 406 seconds, while the extra time
incurred by the SP-based version is 289 seconds.
Signature-Based Backdoor Detection. We also implemented the signature-based
backdoor detectors developed in [26], except we discarded the Rlogin and Telnet ones
because we have found from subsequent experience (running the detectors 24x7 for
several years at LBNL) they are too broad. For example, in tcp-1, 50 K packets match
the Rlogin signature, and 92 match the Telnet one.
Again, we gain both ease-of-implementation and performance by using the Sec-
ondary Path. Regarding the former, Figure 5 shows full code for a Secondary Path
implementation to detect SSH backdoors.
Enhancing Network Intrusion Detection
287
Table 5. Performance of Signature-Based Backdoor Detector
time
Approach
890 sec
Main Path, no analyzers
+769 sec
Main Path-based backdoor analyzer
Main Path, Secondary Path-based backdoor analyzer +174 sec
Secondary Path-based backdoor analyzer only
327 sec
# The following gobbledygook comes from Zhang’s paper:
const ssh_sig_filter = "
tcp[(tcp[12]>>2):4] = 0x5353482D and
(tcp[((tcp[12]>>2)+4):2] = 0x312e or tcp[((tcp[12]>>2)+4):2] = 0x322e)";
# Don’t report backdoors seen on these ports.
const ignore_ssh_backdoor_ports = { 22/tcp, 2222/tcp } &redef;
event backdoor_ssh_sig(filter: string, pkt: pkt_hdr)
{
# Discard traffic using well-known ports.
if ( ["ssh-sig", pkt$tcp$sport] in ignore_ssh_backdoor_ports ||
["ssh-sig", pkt$tcp$dport] in ignore_ssh_backdoor_ports )
return;
print fmt("%s SSH backdoor seen, %s:%s -> %s:%s", network_time(),
pkt$ip$src, pkt$tcp$sport, pkt$ip$dst, pkt$tcp$dport);
}
# Associate the event handler with the filter.
redef secondary_filters += { [ssh_sig_filter] = backdoor_ssh_sig };
Fig. 5. SSH Backdoor Detector Example
Regarding the latter, we ran four experiments using the tcp-1 trace, for which Table 5
shows the corresponding performance. The extra cost caused by the original, Bro-event-
based backdoor detector implementation is 769 sec. In comparison, the Secondary Path
implementation (which is basically several pieces of the form depicted in Figure 5) adds
only 174 sec. The ﬁnal row shows that the analyzer by itself requires more time than
just the 174 sec, since it must also read the entire (very large) trafﬁc stream into user
memory prior to ﬁltering it, which for the third row has already been done by the Main
Path.
We might also consider coupling this detector with BPF state tables (Section 3.2)
to activate the Main Path when a backdoor uses a protocol that the NIDS knows how
to analyze. For example, if the analyzer detects an SSH connection on a non-standard
port, it could add a new entry to a BPF table that captures packets for particular connec-
tions, and label the trafﬁc accordingly so that the Main Path knows it must use its SSH
analyzer to process trafﬁc from that connection. A signiﬁcant challenge with doing so,
however, is the race condition in changing the ﬁlter’s operation, and the NIDS’s appli-
cation analyzer missing the beginning of the connection. Concurrent work by Dreger et
al pursues this functionality using a different approach [4].
288
J.M. Gonzalez and V. Paxson
Finally, we have explored extending this approach further to implement the P2P
Trafﬁc Proﬁling scheme proposed by Karagiannis et al [13]. See [11] for discussion.
6 Conclusions
We have described the Secondary Path, an alternate packet-capture channel for sup-
plementing the analysis performed by a network intrusion detection system. The Sec-
ondary Path supports analyzers oriented towards analyzing individual, isolated packets,
rather than stateful, connection-oriented analysis.
The power of the Secondary Path depends critically on the richness of packet capture
that we can use it to express. To this end, we presented enhancements to the standard
BPF packet-capture framework [16] to support random sampling, and retention of state
between packets (similar in spirit to that of xPF [12]) and in response to user-level
control.
Our implementation within the Bro intrusion detection system exhibits good perfor-
mance, with a rule-of-thumb being that the Secondary Path does not signiﬁcantly impair
Bro’s overall performance provided that we keep the volume of trafﬁc captured with it
below 1% of the total trafﬁc stream.
We illustrated the additional power that Secondary Path processing provides with
three examples: disambiguating the size of large TCP connections, ﬁnding dominant
trafﬁc elements (“heavy hitters”), and integrating into Bro previous work on detecting
backdoors [26]. While none of these by itself constitutes a “killer application,” the va-
riety of types of analysis they aid in addressing bodes well for the additional ﬂexibility
that we gain using Secondary Path processing.
Acknowledgments
This work was made possible by the U.S. National Science Foundation grant STI-
0334088, for which we are grateful.
References
1. B. H. Bloom. Space/time trade-offs in hash coding with allowable errors. Communications
of the ACM, 13(7):422–426, 1970.
2. J.L. Carter and M.N Wegman. Universal classes of hash functions. In Journal of Computer
and Systems Sciences, volume 18, Apr 1979.
3. S. Crosby and D. Wallach. Denial of service via algorithmic complexity attacks. In Proceed-
ings of the 12th USENIX Security Symposium, pages 29–44, Aug 2003.
4. H. Dreger, A. Feldmann, M. Mai, V. Paxson, and R. Sommer. Dynamic application-layer
protocol analysis for network intrusion detection. Technical report, in submission, 2006.
5. H. Dreger, A. Feldmann, V. Paxson, and R. Sommer. Operational experiences with high-
volume network intrusion detection. In Proceedings of CCS, 2004.
6. N. Dufﬁeld, C. Lund, and M. Thorup. Properties and prediction of ﬂow statistics from sam-
In Proceedings of the 2nd ACM SIGCOMM Workshop on Internet
pled packet streams.
Measurement, pages 159–171. ACM Press, 2002.
Enhancing Network Intrusion Detection
289
7. N. Dufﬁeld, C. Lund, and M. Thorup. Estimating ﬂow distributions from sampled ﬂow statis-
tics. In Proceedings of the 2003 Conference on Applications, Technologies, Architectures,
and Protocols for Computer Communications, pages 325–336. ACM Press, 2003.
8. C. Estan, S. Savage, and G. Varghese. Automatically inferring patterns of resource consump-
tion in network trafﬁc. In Proceedings of the 2003 Conference on Applications, Technologies,
Architectures, and Protocols for Computer Communications, pages 137–148. ACM Press,
2003.
9. C. Estan and G. Varghese. New directions in trafﬁc measurement and accounting. In Pro-
ceedings of the 2002 Conference on Applications, Technologies, Architectures, and Protocols
for Computer Communications, pages 323–336. ACM Press, 2002.
10. R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee. RFC
2616: Hypertext transfer protocol – HTTP/1.1, June 1999. Status: INFORMATIONAL.
11. J.M. Gonzalez. Efﬁcient Filtering Support for High-Speed Network Intrusion Detection. PhD
thesis, University of California, Berkeley, 2005.
12. S. Ioannidis, K. Anagnostakis, J. Ioannidis, and A. Keromytis. xpf: packet ﬁltering for
lowcost network monitoring. In Proceedings of the IEEE Workshop on High-Performance
Switching and Routing (HPSR), pages 121–126, 2002.
13. T. Karagiannis, A. Broido, M. Faloutsos, and K.C. Claffy. Transport layer identiﬁcation of
In IMC ’04: Proceedings of the 4th ACM SIGCOMM conference on Internet
p2p trafﬁc.
measurement, pages 121–134, 2004.
14. C. Kreibich, A. Warﬁeld, J. Crowcroft, S. Hand, and I. Pratt. Using packet symmetry to
curtail malicious trafﬁc. In Proceedings of the Fourth Workshop on Hot Topics in Networks
(HotNets-IV) (to appear). ACM SIGCOMM, 2005.
15. W. Lee, J.B.D. Cabrera, A. Thomas, N. Balwalli, S. Saluja, and Y. Zhang. Performance
adaptation in real-time intrusion detection systems. In RAID, pages 252–273, 2002.
16. S. McCanne and V. Jacobson. The BSD packet ﬁlter: A new architecture for user-level packet
capture. In USENIX Winter, pages 259–270, 1993.
17. S. K. Park and K. W. Miller. Random number generators: good ones are hard to ﬁnd. Com-
munications of the ACM, 31(10):1192–1201, 1988.
18. V. Paxson. Bro: A system for detecting network intruders in real-time. Proceedings of the
7th USENIX Security Symposium, 1998.
19. T. H. Ptacek and T. N. Newsham. Insertion, evasion, and denial of service: Eluding network
intrusion detection. Technical report, Secure Networks, Inc., Calgary, Alberta, Canada, 1998.
20. R. Rivest. RFC 1321: The MD5 message-digest algorithm, April 1992. Status: INFORMA-
TIONAL.
21. M. Roesch. Snort: Lightweight intrusion detection for networks. In Proceedings of the 13th
USENIX Conference on System Administration, pages 229–238. USENIX Association, 1999.
22. B. Schneier. Applied Cryptography: Protocols, Algorithms, and Source Code in C. John
Wiley & Sons, Inc., New York, NY, USA, 1995.
23. C. Shannon, D. Moore, and K. C. Claffy. Beyond folklore: Observations on fragmented
trafﬁc. IEEE/ACM Transactions on Networking, 10(6):709–720, 2002.
24. J. van der Merwe, R. Caceres, Y. Chu, and C. Sreenan. mmdump: a tool for monitoring
internet multimedia trafﬁc. In SIGCOMM Computer Communications Review, volume 30,
pages 48–59, 2000.
25. M. Yuhara, B. N. Bershad, C. Maeda, and J. E. B. Moss. Efﬁcient packet demultiplexing for
multiple endpoints and large messages. In USENIX Winter, pages 153–165, 1994.
26. Y. Zhang and V. Paxson. Detecting backdoors. In Proceedings of the 9th USENIX Security
Symposium, pages 157–170, August 2000.
WIND: Workload-Aware INtrusion Detection
Sushant Sinha, Farnam Jahanian, and Jignesh M. Patel
Electrical Engineering and Computer Science,
University of Michigan,
Ann Arbor, MI-48109
{sushant, farnam, jignesh}@umich.edu
Abstract. Intrusion detection and prevention systems have become es-
sential to the protection of critical networks across the Internet. Widely
deployed IDS and IPS systems are based around a database of known ma-
licious signatures. This database is growing quickly while at the same time
the signatures are getting more complex. These trends place additional
performance requirements on the rule-matching engine inside IDSs and
IPSs, which check each signature against an incoming packet. Existing
approaches to signature evaluation apply statically-deﬁned optimizations
that do not take into account the network in which the IDS or IPS is de-
ployed or the characteristics of the signature database. We argue that for
higher performance, IDS and IPS systems should adapt according to the
workload, which includes the set of input signatures and the network traﬃc
characteristics. To demonstrate this idea, we have developed an adaptive
algorithm that systematically proﬁles attack signatures and network traf-
ﬁc to generate a high performance and memory-eﬃcient packet inspection
strategy. We have implemented our idea by building two distinct compo-
nents over Snort: a proﬁler that analyzes the input rules and the observed
network traﬃc to produce a packet inspection strategy, and an evaluation
engine that pre-processes rules according to the strategy and evaluates
incoming packets to determine the set of applicable signatures. We have
conducted an extensive evaluation of our workload-aware Snort implemen-
tation on a collection of publicly available datasets and on live traﬃc from
a border router at a large university network. Our evaluation shows that
the workload-aware implementation outperforms Snort in the number of
packets processed per second by a factor of up to 1.6x for all Snort rules
and 2.7x for web-based rules with reduction in memory requirements. Sim-
ilar comparison with Bro shows that the workload-aware implementation
outperforms Bro by more than six times in most cases.
Keywords: Intrusion detection and prevention, deep packet inspection,
workload aware, adaptive algorithm.
1 Introduction
New critical software vulnerabilities are a common occurrence today. Symantec
documented 1,896 new software vulnerabilities from July 1, 2005 to December
31, 2005, over 40% more than in 2004 [1]. Of these, 97% were considered moder-
ately or highly severe, and 79% were considered easy to exploit. To address this
rapid increase in vulnerabilities, organizations around the world are turning to
D. Zamboni and C. Kruegel (Eds.): RAID 2006, LNCS 4219, pp. 290–310, 2006.
c(cid:1) Springer-Verlag Berlin Heidelberg 2006
WIND: Workload-Aware INtrusion Detection
291
Intrusion Detection Systems (IDS) and Intrusion Prevention Systems (IPS) to
detect and prevent attacks against networked devices.
The core component of popular IDSs, like Snort [2], is a deep packet inspec-
tion engine that checks incoming packets against a database of known signatures
(also called rules). The performance of this signature-matching system is criti-
cal to the scalability of IDS and IPS systems, including packet per second rate.
The dominant factor in determining the performance of this signature matching
engine, whether implemented in software or hardware, is the number and com-
plexity of the signatures that must be tested against incoming packets. However,
both the number and complexity of rules appears to be increasing. For example,
the recent Windows Meta-File (WMF) exploit [3] required inspecting and decod-
ing more than 300 bytes into the HTTP payload which could quickly overwhelm
the CPU of the IDS or IPS, causing massive packet drops [4].
As a result, there has been signiﬁcant eﬀort in developing methods for eﬃcient
deep packet inspection. Current IDSs like Snort and Bro attempt to evaluate as
few rules as possible in a highly parallel way. For example, Snort pre-processes
rules to separate them by TCP ports, and then parallelizes the evaluation based
on port. However, these groupings can be ineﬃcient because all of the rules in
a given group do not apply to incoming packets. Moreover, separating rules by