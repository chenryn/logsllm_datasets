offending job can be punished.
Handling interrupts. On interrupts, the exception engine has to
store the current state of the running job in a way that execution can
be resumed at a later point. For this, the exception engine needs to
distinguish whether the current execution is of an unprotected ap-
plication or whether an enclave is being executed. For unprotected
applications, the behavior of the exception engine is the same as for
regular platforms where usually only the current program counter
and potential state registers need to be saved on the program‚Äôs
stack. Since the running program is unprotected, the process of
Exceptiontype?Interruptsenabled?Push CPU state to enclaveMark enclave as interruptedClear CPU stateGetexceptionhandlerPass control to handlerExecutingenclave?Push program counterand platform-dependentstate registers to stackViolationInterruptNoYesYesNoMark violation inCPU stateSession 5A: Control System Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1362storing the program state in the application‚Äôs memory region can
be a responsibility of the scheduler and be done in software.
For protected applications, however, i.e., enclaves, the exception
engine needs to store all context information of the running job in
the enclave‚Äôs protected memory. Depending on the implementation
platform, the context information usually entails all CPU registers.
This process is done in hardware because the enclaved scheduler
should not have access to the protected memory of the interrupted
enclave and can thus not perform this process in software. After
storing the context information in the enclave, all context infor-
mation is cleared before handing execution over to the enclaved
scheduler. Since enclaves can only ever be entered through pre-
defined call gates, the enclave‚Äôs entry routines must on their next
execution, furthermore, also be able to detect whether the enclave
was interrupted previously. Thus, the exception engine also leaves
a marker for the enclave that it should restore its execution con-
text instead of accepting potential execution parameters that could
overwrite a currently running execution flow. The specifics of this
marker can be left to the implementation of Aion, e.g., storing a
single bit at a known location is sufficient.
Handling violations. In contrast to interrupts, violations do not
occur during the normal behavior of a platform but are usually
the result of an unauthorized attempt by an adversarial job. We
consider two types of violations that are both handled by the excep-
tion engine: security and availability violations. Security violations
are defined by the TEE architecture and revolve around the hard-
ware protections of the TEE such as protecting memory regions or
preventing illegal jumps into the middle of protected regions. Avail-
ability violations on the other hand are introduced by the atomicity
monitor and occur whenever a program attempts to enter too long
atomic periods or attempts to illegally prolong the current atomic
period. We explain the atomicity monitor and how it enforces an
upper bound on all atomic periods below.
For both types of violation, we can assume that they are not
usually triggered by a benign job and it can be assumed that if
a job experiences one, it is either controlled by the adversary, a
victim of the adversary, or being tricked by the adversary, e.g., to
access another protected memory region through an unchecked
pointer [39]. Since the last example can be ruled out by proper input
vetting of enclave code, we design Aion around the assumption that
any violation is the result of an adversary. To alleviate the impact
this may have on applications that do suffer a policy violation during
benign behavior, we additionally introduce a violation marker that
is set on enclave violations in the CPU context to inform the enclave
that it recently suffered a violation. The exact implementation is
left to architecture specifics, but any available bit in a status register
suffices as long as it cannot be set by software.
Figure 3 shows the behavior of storing violations on the left
side. After setting the violation marker, the whole CPU state is
stored as it would be for an interrupt. On its next entry, the enclave
can check that its last operation was aborted due to a violation.
However, if interrupts were not enabled at the time of the violation,
the exception engine does not perform this context save to ensure
that it not accidentally overwrites an old interrupt context. This
is needed since attackers could otherwise call into enclaves and
create an availability violation at the cost of the called application.
Figure 4: Representation of the desired behavior of bounded
atomic sections. clix instructions temporarily disable inter-
rupts but cannot be nested. On enclave entry, a short atomic
period is started which can be prolonged with a clix.
If a violation occurs during the process of storing the CPU con-
text, this process is aborted and the exception engine jumps ahead
to clearing the CPU state. This ensures that the hardware cannot
be tricked into performing memory writes to areas that the current
enclave is not privileged to access.
3.3 Atomicity Monitor
To prevent attackers from impacting the availability of the system, it
is necessary to block all attempts that completely disable interrupts.
At the same time, the enclaved scheduler in Aion is the main driver
of the resource CPU time and requires special privileges in regards
to this resource. As such, the scheduler in Aion is the only entity
that has the capabilities to disable interrupts on the platform. Since
the scheduler is crafted carefully, this privilege does not change the
availability guarantees of the system.
While denying any program aside from the scheduler the ability
to disable interrupts is beneficial to the availability guarantees of
the system, it is certainly not desirable to also prevent all benign
usages of atomic sections. In addition to functionality issues that
may arise for shared resources if they are interrupted in a critical
state, there are also additional concerns in the context of enclaved
programs. During entry of an enclave, atomic sections are crucial
Clock(a)Normalclixoperationdisablesinterruptsforxcyclesinstructionclix2Inst1Inst2Inst3interruptsenabled(b)Nestedclixinstructionsresultinanatomicityviolationinstructionclix10Inst1clix10ATOMVIOLinterruptsenabled(c)InterruptsaredisabledonenclaveentriesforseveralcyclesinstructionjEntryInst1InstnInstn+1interruptsenabledenclaveentryatomicentryperiod(d)Duringtheatomicsectiononenclaveentries,aclixcanbeusedinstructionjEntryInst1clix10Inst2interruptsenabledenclaveentryatomicentryperiod(e)AttemptingtoprolongtheatomicentryleadstoaviolationinstructionjEntryInst1jEntryATOMVIOLinterruptsenabledenclaveentryatomicentryperiodSession 5A: Control System Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1363to allow the enclave to restore its interrupt context from memory
before another interrupt context can be written over the current one.
To overcome this limitation, we introduce a special clix instruction
similar to the design of Masti et al. [25] which starts a bounded
atomic period. Figure 4 shows the use and several edge cases of
this clix instruction. When issuing a clix, the hardware disables
interrupts for exactly ùë• cycles after which it automatically enables
interrupts again (Figure 4.a). Programs can choose ùë• individually up
to an upper bound that is set by the platform designer depending on
the deployed shared resources. Any clix instruction that requests
a number of cycles larger than the upper bound and any attempt
to nest clix periods trigger an atomicity violation (Figure 4.b). We
design atomicity violations to be handled by the exception engine
as described previously and assume that the atomicity monitor
clears all current state when experiencing a violation such as the
current count of remaining cycles left in the clix period. Issuing
atomicity violations ensures that attackers cannot perform clix
instructions that are out of the bounds of the system‚Äôs designers
chosen acceptable worst-case latency between two interrupts. It,
furthermore, ensures that attackers can never prolong their granted
atomic period without at least experiencing one cycle of enabled
interrupts in which an incoming event can be processed.
While the clix instruction technically allows to perform the
critical part of an enclave entry in an atomic section, adversaries
could still issue an interrupt right at the moment when an enclave is
entered. This may lead to issues as an existing interrupt context in
the enclave could be overwritten by the adversary‚Äôs interrupt with
a new context that points to the start of the enclave entry. Such a
data loss and integrity violation is not acceptable. To prevent this,
the atomicity monitor additionally ensures that on each entry of
an enclave, i.e., on each context switch into a new protected region,
interrupts are disabled for a very limited amount of cycles as shown
in Figure 4.c. This gives the enclave entry code enough time to issue
a clix instruction of the length it needs to restore its interrupt
context. Since the exact cycle duration that each application needs
to be interruptible again may vary, we allow applications to define
this cycle length via the clix instruction rather than automatically
issuing a long atomic period at each enclave entry. Furthermore, this
dynamic clix length at enclave entry allows each enclave to decide
whether it wants to utilize several cycles of hardware-guaranteed
progress before the scheduler could preempt this application again.
For some applications, such a guaranteed immediate progress may
be more valuable than other progress longer after the deadline. As
can be seen in Figure 4.d, issuing a clix during the few cycles of
an atomic entry period terminates the atomic entry and seamlessly
proceeds into a clix period. However, any attempt to prolong this
atomic entry is prevented with atomicity violations (Figure 4.e).
Our atomicity design serves two main purposes: First, Aion
allows the use of atomic sections while at the same time maintaining
hard limits on the activation latency of an arriving interrupt. Second,
the length of issued atomic sections are purely in the responsibility
of software under the restriction enforced by the hardware. This
helps in the potential attestation of code that uses atomic sections
and increases the performance of benign applications that do not
always have to enter a long atomic period if this is not necessary.
A complete overview of the atomicity state machine can be seen
in Figure 6 in Appendix A.
3.4 Enclaved Scheduler
The previous core elements of Aion have laid the foundation for
a trusted scheduler that is in full control of the shared resource
CPU time. The exception engine ensures that all state is cleared
and control is handed over to the scheduler on all interrupts and
violations. The atomicity monitor limits the atomic periods of any
job besides the scheduler itself. To enable a scheduler to utilize this
foundation and provide trusted scheduling, however, the scheduler
must itself also be protected by the TEE architecture and, hence, run
inside an enclave. This is crucial as the scheduler can only provide
consistent and fair scheduling decisions if it is unaffected by any
attempts of the adversary and if control is always deterministically
returned to the same scheduler entry code. With the combination of
these properties, the enclaved scheduler can provide a fair real-time
scheduling of dynamic applications on an open system.
Practical implementations of Aion benefit of a timer peripheral
that is solely controlled by the scheduler. This allows the scheduler
to ensure fair scheduling for configurable time periods and can also
be used as a basis for a trusted time service for applications.
4 PROTOTYPE IMPLEMENTATION
We implemented Aion on top of the Sancus TEE and the RIOT
operating system, specifically Sancus 2.0 as presented by Noor-
man et al. [30] and RIOT in major version 2019.10 which bases
on the original work of Baccelli et al. [3, 4]. We chose this com-
bination as Sancus is an open-source architecture based on the
16-bit TI MSP430, running at 8 MHz, and RIOT is equally available
as open-source and has support for MSP430 processors. Sancus
already provides the desired confidentiality and integrity guaran-
tees. However, certain modifications were still necessary, especially
surrounding the additional requirements Aion makes on the TEE
architecture (cf. Section 3.1). Furthermore, because RIOT is designed
to be a highly modular priority-based operating system, certain
adjustments were required to the scheduler and the way threads
are handled to implement an open system with this OS.
In the following we briefly describe Sancus and RIOT, and then
discuss how we adapt these systems to implement our solution.
The full source code of Aion and the modified toolchains of Sancus
and RIOT are available as open-source1.
4.1 Background: Sancus and RIOT
The Sancus TEE. Sancus [28, 30] is an open-source embedded
TEE [24] with a hardware-only TCB that extends the memory access
logic and instruction set of a low-cost, low-power openMSP430 [15]
microcontroller. Sancus supports multiple mutually distrusting soft-
ware components that each consist of two contiguous memory
sections in a shared single-address-space. A hardware-level pro-
gram counter-based access control mechanism [38] enforces that
an enclave‚Äôs private data section can only be accessed by its cor-
responding code section, which can only be entered through a sin-
gle entry point. Sancus‚Äôs generic memory isolation primitive can,
furthermore, be used to provide secure driver enclaves with exclu-
sive ownership over MMIO peripheral devices that are accessed
through the address space. Since Sancus modules only feature a
1https://github.com/sancus-tee/sancus-riot
Session 5A: Control System Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1364single contiguous private data section, however, secure I/O on San-
cus platforms requires these small driver modules to be entirely
written in assembly code, using only registers for data storage [29].
Sancus also provides hardware-level authenticated encryption,
key derivation, and key storage functionality by extending the CPU
with a cryptographic core. This cryptographic core can be used to
implement secure communication as well as both local and remote
attestation by employing a key hierarchy between the infrastructure
provider, the application developer, and individual enclaves. Finally,
Sancus comes with a dedicated C compiler that automates the
process of enclave creation and hides low-level concerns such as
secure linking, private call stack switching, and multiplexing user-
defined entry functions through the single physical entry point.
RIOT OS. RIOT is an open-source operating system for the IoT,
which puts special emphasis on supporting real-time applications
on resource-constrained devices [3, 4]. In contrast to other embed-
ded OS kernels, RIOT provides the full set of features expected
from an OS, ranging from hardware abstraction, kernel capabilities,
system libraries, to tooling.
RIOT is designed to be tickless, which means that the scheduler
is not executed at specific intervals but instead only when neces-
sary. The standard RIOT model is a cooperative scheduling model
where it is assumed that applications actively yield whenever they
wish to pass control over to the next application. However, to also
support periodic events, RIOT allows jobs to set timers to sleep
for a period of time. For this, RIOT accesses the timer peripheral,
tracks the passed time of the system, and maintains a list of active
timers and the thread they are connected to. This setup is ideal for
mixed-criticality systems as the highest priority job will always
be scheduled next and can run as long as necessary until it either
cooperatively yields to pass control over to the next job or until
an interrupt arrives and stops the job. For applications of the same
priority, however, RIOT assumes a fair and cooperative schedul-
ing through yields which places all other applications of the same
priority within an application‚Äôs TCB.
The RIOT scheduler can provide scheduling decisions in constant
time, i.e., in O(1) due to its reliance on a bitmask that depends on
the amount of configured priority levels. Sleeping is implemented
in O(n) due to an unlimited amount of possible timers.
4.2 Modifications to Sancus
We made multiple changes to the Sancus hardware to implement
Aion. All of these changes are made under the assumption that a
scheduler has a fixed enclave hardware ID of 1, i.e., the scheduler
is the first enclave that is loaded. Specifically, we (i) modified the
exception engine to handle interrupts and violations according to
Section 3.2, (ii) implemented an atomicity monitor component ac-
cording to Section 3.3, (iii) placed restrictions on parts of the status
register to only be modified by the scheduler, and (iv) made crypto-
graphic operations interruptible (in an abandon-restart fashion).
All changes to the Sancus architecture are backwards-compatible
with Sancus 2.0 [30] and the MSP430 specification. This was vali-
dated with the default tests provided by the OpenMSP430 project
that Sancus is based on and with new tests for cases where we
added functionality. To provide full backwards-compatibility with
Figure 5: Overview of the status register and our changes.
Bits highlighted in blue (bits 3-7) are restricted to the sched-
uler. Bit 15 marks whether the last interrupt occurred dur-
ing an enclave. Bit 14 marks whether a violation occurred.
the specification, our availability restrictions do not come into effect
before the first enclave, i.e., the scheduler, is initialized.
In the following, we focus only on the essential aspects of our
implementation that are not immediately derived from the design
of Aion as presented in Section 3. Specifically, this applies to the
exception engine, the status register, and the cryptographic core.
Sancus exception engine. Sancus 2.0 originally only supports the
preemption of non-enclave code. Thus, we extend the exception
engine to perform the tasks as outlined in Section 3.2. In our imple-
mentation, we utilize a configurable location in the enclave data
region to store the CPU context plus a violation marker when re-
ceiving an interrupt or a violation respectively. The context-saving
hardware logic is subject to the same access-control checks as the
interrupted enclave, and any violations during the processing of
an interrupt or another violation lead to the abort of the context
saving as shown in Figure 3.
In MSP430, an Interrupt Vector Table (IVT) at a fixed location in
the memory layout is used to determine the handler of an interrupt.
In our implementation, we assume that the scheduler registers itself
for all interrupts and violations, and then locks the IVT by wrapping
it in the protected section of a small driver enclave, thus preventing
any further access to the IVT.
Status register modifications. The MSP430 status register con-
tains multiple flags e.g., for arithmetic operations and is stored on
interrupts and restored together with the program counter on a
reti instruction. However, in addition to these flags, the MSP430
status register also contains flags that are considered sensitive in
Aion. Figure 5 shows an overview of the status register and our
modifications. Most obvious, we restrict the disabling of the Global
Interrupt Enable (GIE) bit to the scheduler. However, we allow the
setting of this bit at all times which allows applications to terminate
their own clix or atomic entry period ahead of schedule. Addi-
tionally, we also restrict bits 4 to 7 to the scheduler which could be
used to completely switch off the platform, such as the CPUOFF
flag, or which switch off the internal oscillator that is used as a
timer. Furthermore, we add two flags to the reserved portion of the
status register that are set by hardware and cannot be written from
software: the IRQ flag (in bit 15) and the violation flag (in bit 14).
The violation flag in bit 14 is set by the exception engine when it
processes a violation and is the implementation of the violation
marker as described in Section 3.2.
Modified status register11Direct manipulation of these bitsis restricted to schedulerIRQ bit that markswhether the last interruptoccured during an enclaveVReservedSCG1OSCOFFGIE09101513123456712148SCG0CPUOFFNZCIRQVIOViolation bit that markswhether the last interruptoccurred due to a violationSession 5A: Control System Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1365The IRQ flag in contrast exists for purely functional reasons and
helps the scheduler to restore jobs as either unprotected code or as
enclaves. Since by default the scheduler has no reliable method of
deducing whether the hardware interrupted an enclave or unpro-
tected code, the exception engine sets the IRQ flag after clearing
the CPU state and before handing control to the scheduler.
Cryptographic core. Finally, we changed the behavior of Sancus‚Äôs
cryptographic instructions to update the Zero flag (bit 1) in the
status register to indicate whether the operation completed or was
aborted due to an interrupt arrival. The resulting abandon-restart