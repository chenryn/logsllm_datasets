### Communication and Network Architecture

1. **Application Network:**
   - All communications on the Application Network are initiated from external sources and involve only a single service on a single host.
   - An exception to this rule is the mail server, which can initiate outgoing connections.

2. **Administration Network:**
   - All communications on the Administration Network are initiated by the Administration Server.
   - Each communication involves only the Administration Server and a single Application Server.

3. **Security Network:**
   - Communications on the Security Network can be initiated by either the Application Server or the Security Server.
   - Data flow must be strictly between the Application Server and the Security Server, in either direction.

4. **Internal Data Server:**
   - Communications on the internal data server are initiated only by the Application Server.
   - Interactions between the application and internal data sources must be explicitly defined in terms of both connections and content.

### Security Policies

1. **Authentication and Encryption:**
   - All internal communications within the Poly2 system must be authenticated and encrypted.

2. **Flood Protection:**
   - A compromised Application Server should not be able to flood any internal network to the point that other services are disabled or become unstable.

3. **External User Access:**
   - External users can only access Application Servers and must initiate the connection to the Application Server through the gateway.
   - External users cannot log onto or access any services on the Security, Administrative, or Internal Data Servers.

4. **Administrative User Access:**
   - Administrative users can access Application Servers only through the Administration Servers.
   - Direct access to Application Servers without going through the Administration or Security Server is not allowed.
   - Any action that modifies security policy or enforcement mechanisms must be performed through a trusted administrative account, requiring physical logon to the server hardware and two-person integrity controls.

### Specialized Operating System Through Minimization

#### 3.6. Specialized Operating System Through Minimization

An operating system can be viewed as an organized collection of software components that control access to hardware resources and provide an environment for program execution. The control routines and utilities supported by an operating system are largely dependent on the needs of the target environment. General-purpose operating systems, designed for a wide range of environments, often include more functionality than is necessary for a simplified server architecture like Poly2. This excess code poses a security risk.

**Initial Research in Poly2:**
- Commodity software, including modern operating systems based on the 4.4BSD kernel and common UNIX applications, is used for immediate usability, psychological acceptability, and experimental repeatability.
- The goal is to minimize the general-purpose operating system to support only the specific services required, thereby eliminating vulnerabilities in unnecessary subsystems.

**Primary Research Areas:**
- Determining which layers and levels of functionality to remove.
- Key areas for minimization include the network stack and file system.

#### 3.6.1. Network Stack Stripping

The network communication subsystem of the 4.4BSD kernel, including various protocols and utilities, constitutes nearly 30% of the kernel (measured in lines of code). Systems like Poly2, with well-defined structure and functionality, need only a subset of these protocols. Retaining ARP, IP, TCP, UDP, ICMP, and DNS is sufficient, reducing the kernel size by over 20%.

**Protocol Features Pruning:**
- Fragmentation and reassembly components of the IP protocol can be removed, as they are unnecessary in the Poly2 environment.
- Removing these features prevents the exploitation of vulnerabilities such as Ping o’ Death, Teardrop, Jolt2, and Bonk.
- Additional pruning can be done for ARP and DNS, as physical addresses of all machines are known and do not need dynamic resolution.

#### 3.6.2. File System Stripping

The stability of applications and the content they deliver can be leveraged to reduce extraneous functionality in the file system. For example, a web server delivering static web pages does not need the ability to create or delete files, directories, or links. This eliminates potential vulnerabilities and reduces the attack surface.

**File System Customization:**
- Using a read-only file system to prevent an attacker from remounting it with write privileges.
- Removing the capability to create symbolic links, which have been a source of vulnerabilities in many applications.
- Approximately 12,000 lines of code in the 4.4BSD kernel manage vnodes and support file system operations. If write access is not needed, this code can be eliminated, further reducing the attack surface.

### Implementation

#### 4.1. Network Service Architecture

**Poly2 Architecture:**
- Each network application runs on an individual server with a minimal operating system and is connected to four physically separate networks.
- Specialized systems include a Security system and an Administration system, each connected only to the Security and Administration networks.
- The Security Server handles all security-related tasks, while the Administration Server manages maintenance, operation, upgrading, and patching of Application Servers.

**Communication Directionality:**
- Application Servers can send and receive traffic on the Application Network.
- They can only send traffic to the Security Server on the Security Network and receive traffic from the Administration Server on the Administration Network.
- The Security Server receives traffic from Application Servers and the Administration Server on the Security Network.
- The Administration Server sends traffic to Application Servers and the Security Server on the Administration Network.

**Enforcement:**
- Firewall rules on individual servers enforce this directionality.
- Future plans include adopting technology similar to the Data-Diode for enhanced security.

#### 4.2. Operating System Minimization Methodology

**Stages of Minimization:**
1. **Services and Utilities:**
   - Remove unnecessary language tools, database utilities, desktop utilities, development tools, gaming tools, networking utilities, and system tools.
2. **Libraries:**
   - Retain only the libraries required by the server application.
3. **System Calls:**
   - Remove unused system calls to limit access to the kernel.
4. **Library Functions:**
   - Retain only the necessary functions in a library to avoid vulnerabilities.
5. **Kernel Subsystems:**
   - Remove unnecessary kernel subsystems to reduce the attack surface.

### Quantitative Assessment of Poly2’s Security Properties

**Vulnerability Metrics:**
- The first metric measures the number of ways an unauthorized user can remotely gain superuser privileges.
- This includes directly exploiting remotely exploitable vulnerabilities and using a combination of remote and local vulnerabilities.

**Hypothetical Attack Scenarios:**
- These scenarios help understand and quantify the security properties of Poly2, providing numerical feedback on improvements and allowing impact assessment of proposed measures.