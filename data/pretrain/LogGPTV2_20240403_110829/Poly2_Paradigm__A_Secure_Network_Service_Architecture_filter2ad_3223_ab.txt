(a) All communications on the Application Network
are initiated from the outside, and involve only
a single service on a single host. An exception to
this is a mail server, which initiates outgoing con-
nections.
(b) All communications on the administration net-
work are initiated by the Administration Server.
Each communication only involves the Adminis-
tration Server and a single Application Server.
(c) Communications on the Security network can be
initiated by either the Application Server or the
Security Server. It must ﬂow only from the Ap-
plication Server to the Security Server, or from
the Security Server to the Application Server.
(d) Communications on the internal data server are
initiated only by the application server. Further,
any interactions between the application and in-
ternal data sources must be explicitly deﬁned,
both in terms of connections, and content.
5. All communications inside the Poly2 system must be
authenticated and encrypted.
6. A compromised application server should not be able
to ﬂood any internal network to the point that other ser-
vices are disabled or become unstable.
7. External users can only access Application Servers,
must initiate the connection to the Application Server,
and must connect only through the gateway. External
users cannot log onto or access any services on the se-
curity, administrative, or internal data servers.
8. Administrative users can access Application Servers
only through the Administration Servers. They can-
not directly log onto or access any services on an Ap-
plication Server through any network without going
through the Administration or Security Server. Any ac-
tion which modiﬁes the security policy or enforcement
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:35:14 UTC from IEEE Xplore.  Restrictions apply. 
mechanisms must be done through a trusted adminis-
trative account which requires physical logon to the
server hardware and two person integrity controls.
3.6. Specialized Operating System Through Mini-
mization
An operating system may be viewed as an organized col-
lection of software components that controls access to the
hardware resources and provides an environment for the ex-
ecution of programs. The control routines and utilities sup-
ported by an operating system are to a great extent depen-
dent on the needs of the target environment. The ubiquitous
use of computing systems in a variety of environments has
given rise to general-purpose operating systems that typi-
cally combine support for all the target environments into
one assorted collection of software artifacts. Such general-
purpose operating systems provide more functionality than
is needed in a simpliﬁed server architecture such as Poly2.
This unnecessary code poses a security risk.
The initial research in Poly2 incorporates commodity
software, (modern operating systems based on the 4.4BSD
kernel [8] and common UNIX applications) for reasons of
immediate usability, psychological acceptability, and exper-
imental repeatability. The goal is to minimize a general-
purpose operating system such that it supports only those
speciﬁc services that are supposed to run on a system, thus
eliminating the threat from vulnerabilities in unnecessary
subsystems of the operating system that can be removed.
The process of determining what layers and levels of func-
tionality to remove is one of the primary research areas.
While there are many areas in which unnecessary function-
ality can be removed, the following highlights two simple
candidates: network stack and ﬁle system stripping.
3.6.1. Network Stack Stripping The network communi-
cation subsystem of the 4.4BSD kernel that includes net-
work protocols and generic network utilities constitutes
nearly 30 percent of the kernel (measured in lines of code)
[8]. The protocol suite includes internet protocols, ISO pro-
tocols, X.25 protocols, and XNS protocols. Systems with
well-deﬁned structure and functionality operating in a very
speciﬁc environment such as Poly2 would need only a small
subset of these protocols. A combination of ARP, IP, TCP,
UDP, ICMP, and DNS is sufﬁcient to provide the necessary
network communication support. Retaining only these pro-
tocols will reduce the kernel size by more than 20 percent.
Certain protocol features can also be pruned depending
on the functioning environment. Consider the fragmenta-
tion and reassembly component of the IP protocol. Because
fragmentation and reassembly can be done at the gateway
to Poly2, and the maximum transmission units (MTU) of
all the networks within the framework is deﬁned in ad-
vance, no internal components need this functionality on
the application network. Reassembly algorithms are com-
plex and their faulty implementations have led to several
vulnerabilities including Ping o’ Death (CVE-1999-0128),
Teardrop (CAN-1999-0015), Jolt2 (CVE-2000-0305), and
Bonk (CAN-1999-0258) [9]. Fragmentation capability on
a system can help exploit such vulnerabilities in other sys-
tems. Eliminating these features on systems where they are
unnecessary will prevent the perpetration and propagation
of related attacks.
Additional areas in which protocol stripping will be use-
ful include ARP and DNS. The physical addresses of all
machines are known and do not need to be resolved dynam-
ically.
3.6.2. File System Stripping The stability of applications
and the content they deliver can also be leveraged to reduce
extraneous functionality in the ﬁle system. Consider a web
server application delivering static web pages. Such a sys-
tem would not need the ability to create or delete ﬁles, di-
rectories, or links, meaning that the supporting kernel for
this application system would not require the code to pro-
vide this functionality. This not only eliminates the vulner-
abilities that might be present in kernel code but also elimi-
nates functionality that could be used by an attacker to store
tools or conceal activity.
A conventional technique for the web server application
might be to use a ﬁle system mounted as read-only, relying
on the kernel to enforce the read-only policy. If an attacker
is able to take control of the system through elevated privi-
leges then she will be able to re-mount the ﬁle system with
write privileges, thus circumventing the policy. In contrast,
the kernel operating in the Poly2 architecture does not pos-
sess the ability to re-mount or otherwise alter the ﬁle sys-
tem. The same attacker in this scenario would not be able
alter the ﬁle system—even with elevated privileges. The re-
moval of extraneous code in Poly2 effectively isolates the
attacker.
The mishandling of symbolic links has been, and con-
tinues to be, a source of vulnerabilities in many applica-
tions [9]. Vulnerabilities in Kerberos 4 (CAN-2001-0417),
mgetty (CVE-2001-0141), and Perl (CVE-1999-1386) al-
low an attacker to delete arbitrary ﬁles. An attacker can ele-
vate privileges through a symbolic link vulnerability in the
FreeBSD mount union command (CVE-1999-0963) and
can cause a denial of service in many versions of the Linux
kernel (CAN-2001-0907) via a series of deeply nested sym-
bolic links. By removing the capability to create symbolic
links when an application does not need them, this class of
vulnerabilities is eliminated from Poly2.
Approximately twelve thousand lines of code are used in
the 4.4BSD kernel to manage vnodes and support ﬁle sys-
tem operations [8]. Of these, roughly fourteen hundred lines
relate speciﬁcally to the write system call. This does not
include the various write permission checks that are made
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:35:14 UTC from IEEE Xplore.  Restrictions apply. 
in other portions of the ﬁle system code. If the application
does not need write access, all of this code can be elimi-
nated from the kernel without sacriﬁcing application func-
tionality. Further, any programming errors or vulnerabilities
present in this kernel code are also removed.
All application systems in the Poly2 architecture with
different ﬁle system requirements can be similarly cus-
tomized to deliver only the functionality necessary. The ag-
gregate customized systems contain fewer code vulnerabili-
ties than conventional systems built on general-purpose O/S
platforms. Also, individual application environments be-
come hostile to attackers because they do not provide the
needed resources to propagate and conceal attacks.
4. Implementation
The initial implementation of the Poly2 architecture fo-
cuses on network services and operating system minimiza-
tion. These areas are discussed below in the context of
mechanisms satisfying the security policy.
4.1. Network Service Architecture
Application Network
Security Network
Administrative Network
Storage Network
A − Application System
S − Security System
FS − File System
Ad − Administrative System
G − Gateway
G
S
Ad
A1
A2
A3
A4
G
FS1
FS2
FS3
Figure 1. Poly2 architecture with a single ap-
plication running on each system. The DMZ
has four physically separate networks and
separate Security and Administration sys-
tems
Figure 1 illustrates the Poly2 architecture. Each network
application runs on an individual server with a minimal op-
erating system and is connected to all the four networks.
Additionally, there are two specialized systems: a Secu-
rity system and Administration system. Both these systems
are connected only to the Security and Administration net-
works.
The Security Server consolidates all the security-related
tasks and can be host to a variety of security tools includ-
ing intrusion detection systems and integrity checkers. Ap-
plication Servers send all the security-related trafﬁc (such as
audit logs and alerts) to the Security Server on the Security
Network. The Administration Server consolidates all activi-
ties related to maintaining, operating, upgrading, and patch-
ing the Application Servers. Trafﬁc related to these tasks is
limited to the Administration Network.
The directionality of communication (from the perspec-
tive of Application Servers) in the Poly2 framework is logi-
cally represented in Figure 2 in a simpliﬁed form. Applica-
tion Servers can send and receive trafﬁc on the Application
Network. This is how users from both the Internet and in-
tranet access the network services. The Application Servers
can only send trafﬁc to the Security Server on the Security
Network and can only receive trafﬁc through their Admin-
istration Network interfaces from the Administration Server
alone. The Security Server can only receive trafﬁc from the
Application Servers and Administration Server on the Secu-
rity Network interface and can only receive trafﬁc from the
Administration Server on the Administration Network in-
terface. The Administration Server can only send trafﬁc to
the Application Servers and Security Server on the Admin-
istration Network and only send security-related trafﬁc to
the Security Server on the Security Network.
This directionality is enforced using ﬁrewall rules on in-
dividual servers. While the long-term goal is to adopt tech-
nology similar to the Data-Diode, in the near-future separate
ﬁrewall systems for each individual server in the framework
will be used. This separation is necessary because the ﬁre-
wall rules enforced within a server cannot be trusted if the
server is subverted.
4.2. Operating System Minimization Methodology
An application binary and its dependencies are the only
essential components for an application to execute on a
system. These dependencies include dynamically linked li-
braries, system calls, and any necessary subsystems of the
kernel. All other code on the system is superﬂuous.
Five stages of operating system minimization are in pro-
cess. The completion of each stage results in an increase
in difﬁculty for an attacker to compromise the individual
server. The work ranges from simple (utility and unneeded
application removal) through difﬁcult (the removal of un-
necessary system calls and functionality). The completion
of each stage is intended to increase the work factor of an
attacker [15]. The early stages will force the attacker who
has successfully exploited a vulnerability in a service appli-
cation to import her own utilities to further compromise a
server, whereas completion of the later stages may force the
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:35:14 UTC from IEEE Xplore.  Restrictions apply. 
(from dynamic libraries) does not increase the disk
storage required by each application server.
3. System Calls: System calls provide user applications
access to routines in kernel space. Many system calls,
however, have stubs or wrapper routines as part of a li-
brary. An operating system typically has over a hun-
dred system calls (FreeBSD currently has 323 system
calls), but applications require only a small subset of
these. Removing the system calls not used by an appli-
cation limits access to the kernel, eliminating access to
functionality that may be exploited by an attack.
4. Library Functions: A library for a particular envi-
ronment encapsulates several functions that might be
required in that programming environment. For ex-
ample, libc contains all the standard functions re-
quired while programming in the C language. Simi-
larly, libcrypt contains encryption/decryption rou-
tines. An application might use only a small subset
of all the functions in any given library. By retaining
only those necessary functions in a library, vulnerabil-
ities can be avoided in other parts of the library code
as well as prevent attack code from using unneeded li-
brary routines.
5. Kernel Subsystems: The operating system kernel has
numerous routines that perform process management,
memory management, ﬁle-system management, inter-
process communication, and I/O handling. A wide
range of devices, ﬁle-systems, and protocols are sup-
ported to enable the operating system to be general-
purpose. Removing those kernel subsystems that are
of no use to the single application running on a server
will not effect its operation. An attacker needing func-
tionality not remaining in the minimized server will be
forced to replace the O/S kernel—a task that may re-
quire physical access to the machine.
5. Quantitative Assessment of Poly2’s Secu-
rity Properties
A signiﬁcant research contribution is an evaluation of the
increased Poly2 security compared to conventional network
service architectures. To answer “why” and “how much”,
work is underway to deﬁne measurable contributions and
beneﬁts of Poly2’s architecture. A quantitative assessment
provides numerical feedback of the improvements and al-
lows impact assessment of any proposed measure. Two vul-
nerability metrics and two hypothetical attack scenarios that
can be used to understand and quantify the security proper-
ties of Poly2 are discussed below.
Figure 2. Logical diagram of Poly2 architec-
ture indicating the directionality of informa-
tion ﬂow among the Security, Administration,
and Application Servers
attacker to obtain physical access to the server in order to
compromise its security.
1. Services and Utilities: A variety of language tools
(such as assemblers, compilers, interpreters, and de-
buggers), database utilities, desktop utilities (such
as desktop environments, browsers, email, and
chat clients), development
(such as edi-
tors and shells), gaming tools, networking utilities
(such as DHCP, DNS, FTP, SSH, and Telnet), and sys-
tem tools (such as system conﬁguration, monitoring,
and security tools) are part of standard installa-
tions of most operating systems. None of these are
required once an application is running and can be re-
moved.
tools
2. Libraries: A collection of libraries is part of many op-
erating systems. The goal is to offer users access to
standard implementations of functions required in var-
ious programming environments instead of burdening
them with the development of their own versions. Un-
less the library dependencies of a program are stat-
ically linked, they are resolved at run-time. No li-
braries, except for those required by the server applica-
tion, are needed and can be removed. For example, the
Apache web server needs only three libraries: libc,
libcrypt, and libmm at runtime in addition to the
various modules that implement SSL, PHP, and other
features. Most common applications can be statically
linked and therefore, many, if not all, of the dynamic
libraries can be removed. Since only single applica-
tion is running on a server, the removal of shared code
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:35:14 UTC from IEEE Xplore.  Restrictions apply. 
5.1. Vulnerability Metrics
The ﬁrst metric indicates the number of possible ways
an unauthorized user can remotely gain superuser privi-
leges. For purposes of this metric, only two attributes of
vulnerabilities—their range (locally versus remotely ex-
ploitable) and the extent of privilege escalation they pro-
vide (user versus superuser) are considered.
An unauthorized user can remotely gain superuser priv-
ileges on a system in two ways: directly through remotely
exploitable vulnerabilities that result in superuser access or
by ﬁrst targeting remotely exploitable vulnerabilities that
provide user-level access and then exploiting local vulnera-
bilities that give superuser rights. Therefore, the number of
ways by which an unauthorized user can exploit one appli-
cation to obtain superuser privileges can be denoted by the
equation: