        # fapolicyd --debug
        ```
        因为 `fapolicyd --debug`{.literal}
        命令的输出非常详细，所以您可以将错误输出重定向到文件中：
        ``` screen
        # fapolicyd --debug 2> fapolicy.output
        ```
    :::
:::
::: itemizedlist
**删除 `fapolicyd`{.literal} 数据库**
-   要解决与 `fapolicyd`{.literal}
    数据库相关的问题，请尝试删除数据库文件：
    ``` screen
    # systemctl stop fapolicyd
    # fapolicyd-cli --delete-db
    ```
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    不要删除 `/var/lib/fapolicyd/`{.literal} 目录。`fapolicyd`{.literal}
    框架只自动恢复这个目录下的数据库文件。
    :::
:::
::: itemizedlist
**转储 `fapolicyd`{.literal} 数据库**
-   `fapolicyd`{.literal}
    包含了所有启用的信任源的条目。您可以在转储数据库后检查条目：
    ``` screen
    # fapolicyd-cli --dump-db
    ```
:::
::: itemizedlist
**应用程序管道**
-   在个别情况下，删除 `fapolicyd`{.literal} 管道文件可以解决锁定问题：
    ``` screen
    # rm -f /var/run/fapolicyd/fapolicyd.fifo
    ```
:::
::: itemizedlist
**其他资源**
-   `fapolicyd-cli(1)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening.html#_additional_resources_4}其他资源 {.title}
:::
::: itemizedlist
-   使用 `man -k fapolicyd`{.literal} 命令列出与 `fapolicyd`{.literal}
    相关的手册页。
-   [FOSDEM 2020
    fapolicyd](https://rsroka.fedorapeople.org/fapolicyd-fosdem.pdf){.link}
    演示。
:::
:::
:::
[]{#protecting-systems-against-intrusive-usb-devices_security-hardening.html}
::: chapter
::: titlepage
# []{#protecting-systems-against-intrusive-usb-devices_security-hardening.html#protecting-systems-against-intrusive-usb-devices_security-hardening}第 13 章 保护系统免受入侵 USB 设备的攻击 {.title}
:::
可以使用 spyware、malware 或 trojans 加载 USB
设备，这可能会给您的系统造成破坏。作为 Red Hat Enterprise Linux
管理员，您可以使用[**USBGuard**]{.strong} 来防止此类 USB 攻击。
::: section
::: titlepage
# []{#protecting-systems-against-intrusive-usb-devices_security-hardening.html#usbguard_protecting-systems-against-intrusive-usb-devices}USBGuard {.title}
:::
借助 USBGuard 软件框架，您可以根据内核中的 USB
设备授权功能，使用允许和禁止设备的基本列表来防止系统免受入侵 USB
设备的攻击。
USBGuard 框架提供以下组件：
::: itemizedlist
-   带有用于动态交互和策略实施的进程间通信(IPC)接口的系统服务组件
-   与正在运行的 `usbguard`{.literal} 系统服务交互的命令行接口
-   编写 USB 设备授权策略的规则语言
-   用于与共享库中实施的系统服务组件交互的 C++ API
:::
`usbguard`{.literal}系统服务配置文件（`/etc/usbguard/usbguard-daemon.conf`{.literal}）包括授权用户和组使用
IPC 接口的选项。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
系统服务提供 USBGuard 公共 IPC 接口。在 Red Hat Enterprise Linux
中，对此接口的访问默认只限于 root 用户。
考虑设置 `IPCAccessControlFiles`{.literal} 选项（推荐）或
`IPCAllowedUsers`{.literal} 和 `IPCAllowedGroups`{.literal}
选项，来限制对 IPC 接口的访问。
确保您没有未配置 Access Control List(ACL)，因为这会将 IPC
接口公开给所有本地用户，允许他们操作 USB 设备的授权状态，并修改 USBGuard
策略。
:::
:::
::: section
::: titlepage
# []{#protecting-systems-against-intrusive-usb-devices_security-hardening.html#installing-usbguard_protecting-systems-against-intrusive-usb-devices}安装 USBGuard {.title}
:::
使用这个流程来安装并启动 `USBGuard`{.literal} 框架。
::: orderedlist
**步骤**
1.  安装 `usbguard`{.literal} 软件包：
    ``` screen
    # dnf install usbguard
    ```
2.  创建初始规则集：
    ``` screen
    # usbguard generate-policy > /etc/usbguard/rules.conf
    ```
3.  启动 `usbguard`{.literal} 守护进程，并确保它会在引导时自动启动：
    ``` screen
    # systemctl enable --now usbguard
    ```
:::
::: orderedlist
**验证**
1.  验证 `usbguard`{.literal} 服务是否正在运行：
    ``` screen
    # systemctl status usbguard
    ● usbguard.service - USBGuard daemon
       Loaded: loaded (/usr/lib/systemd/system/usbguard.service; enabled; vendor preset: disabled)
       Active: active (running) since Thu 2019-11-07 09:44:07 CET; 3min 16s ago
         Docs: man:usbguard-daemon(8)
     Main PID: 6122 (usbguard-daemon)
        Tasks: 3 (limit: 11493)
       Memory: 1.2M
       CGroup: /system.slice/usbguard.service
               └─6122 /usr/sbin/usbguard-daemon -f -s -c /etc/usbguard/usbguard-daemon.conf
    Nov 07 09:44:06 localhost.localdomain systemd[1]: Starting USBGuard daemon...
    Nov 07 09:44:07 localhost.localdomain systemd[1]: Started USBGuard daemon.
    ```
2.  列出 `USBGuard`{.literal} 识别的 USB 设备 ：
    ``` screen
    # usbguard list-devices
    4: allow id 1d6b:0002 serial "0000:02:00.0" name "xHCI Host Controller" hash...
    ```
:::
::: itemizedlist
**其他资源**
-   `usbguard(1)`{.literal} 和 `usbguard-daemon.conf(5)`{.literal}
    手册页。
:::
:::
::: section
::: titlepage
# []{#protecting-systems-against-intrusive-usb-devices_security-hardening.html#blocking-and-authorizing-a-usb-device-using-cli_protecting-systems-against-intrusive-usb-devices}使用 CLI 阻止和授权 USB 设备 {.title}
:::
此流程概述了如何使用 `usbguard`{.literal} 命令授权和阻止 USB 设备。
::: itemizedlist
**先决条件**
-   `usbguard`{.literal} 服务已安装并运行。
:::
::: orderedlist
**步骤**
1.  列出 `USBGuard`{.literal} 识别的 USB 设备 ：
    ``` screen
    # usbguard list-devices
    1: allow id 1d6b:0002 serial "0000:00:06.7" name "EHCI Host Controller" hash "JDOb0BiktYs2ct3mSQKopnOOV2h9MGYADwhT+oUtF2s=" parent-hash "4PHGcaDKWtPjKDwYpIRG722cB9SlGz9l9Iea93+Gt9c=" via-port "usb1" with-interface 09:00:00
    ...
    6: block id 1b1c:1ab1 serial "000024937962" name "Voyager" hash "CrXgiaWIf2bZAU+5WkzOE7y0rdSO82XMzubn7HDb95Q=" parent-hash "JDOb0BiktYs2ct3mSQKopnOOV2h9MGYADwhT+oUtF2s=" via-port "1-3" with-interface 08:06:50
    ```
2.  授权设备 [*6*]{.emphasis} 与系统进行交互：
    ``` screen
    # usbguard allow-device 6
    ```
3.  取消授权并删除设备 [*6*]{.emphasis} ：
    ``` screen
    # usbguard reject-device 6
    ```
4.  取消授权并保留设备 [*6*]{.emphasis} ：
    ``` screen
    # usbguard block-device 6
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`USBGuard`{.literal} 使用 [*block*]{.emphasis} 和 [*reject*]{.emphasis}
术语，其含义如下：
::: itemizedlist
-   [*block*]{.emphasis} ：暂时不要与此设备进行交互。
-   [*reject*]{.emphasis} ：如果设备不存在就忽略它。
:::
:::
::: itemizedlist
**其他资源**
-   `usbguard(1)`{.literal} 手册页。
-   使用 `usbguard --help`{.literal} 命令列出内置的帮助信息。
:::
:::
::: section
::: titlepage
# []{#protecting-systems-against-intrusive-usb-devices_security-hardening.html#permanently-blocking-and-authorizing-a-usb-device_protecting-systems-against-intrusive-usb-devices}永久阻止和授权 USB 设备 {.title}
:::
您可以使用 `-p`{.literal} 选项永久阻止和授权 USB
设备。这会在当前策略中添加一条特定于设备的规则。
::: itemizedlist
**先决条件**
-   `usbguard`{.literal} 服务已安装并运行。
:::
::: orderedlist
**步骤**
1.  配置 SELinux，以允许 `usbguard`{.literal} 守护进程编写规则。
    ::: orderedlist
    1.  显示与 `usbguard`{.literal} 相关的 `semanage`{.literal} 布尔值。
        ``` screen
        # semanage boolean -l | grep usbguard
        usbguard_daemon_write_conf     (off  ,  off)  Allow usbguard to daemon write conf
        usbguard_daemon_write_rules    (on   ,   on)  Allow usbguard to daemon write rules
        ```
    2.  可选：如果 `usbguard_daemon_write_rules`{.literal}
        布尔值已关闭，请打开它。
        ``` screen
        # semanage boolean -m --on usbguard_daemon_write_rules
        ```
    :::
2.  列出 [**USBGuard**]{.strong} 识别的 USB 设备：
    ``` screen
    # usbguard list-devices
    1: allow id 1d6b:0002 serial "0000:00:06.7" name "EHCI Host Controller" hash "JDOb0BiktYs2ct3mSQKopnOOV2h9MGYADwhT+oUtF2s=" parent-hash "4PHGcaDKWtPjKDwYpIRG722cB9SlGz9l9Iea93+Gt9c=" via-port "usb1" with-interface 09:00:00
    ...
    6: block id 1b1c:1ab1 serial "000024937962" name "Voyager" hash "CrXgiaWIf2bZAU+5WkzOE7y0rdSO82XMzubn7HDb95Q=" parent-hash "JDOb0BiktYs2ct3mSQKopnOOV2h9MGYADwhT+oUtF2s=" via-port "1-3" with-interface 08:06:50
    ```
3.  永久授权设备 [*6*]{.emphasis} 与系统进行交互：
    ``` screen
    # usbguard allow-device 6 -p
    ```
4.  永久取消授权并删除设备 [*6*]{.emphasis} ：
    ``` screen
    # usbguard reject-device 6 -p
    ```
5.  永久取消授权并保留设备 [*6*]{.emphasis} ：
    ``` screen
    # usbguard block-device 6 -p
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}