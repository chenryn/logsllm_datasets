可以使用外带数据通道提取数据，先用file://或php://filter获取目标文件的内容，然后将内容以http请求发送到接收数据的服务器（攻击服务器）
    %dtd;
    %send;
    ]>
evil.dtd的内容，内部的`%`号要进行实体编码成`&#x25;`。
    "
    >
    %all;
## 5.XXE审计函数
XML解析一般在导入[配置](http://www.liuhaihua.cn/archives/tag/%e9%85%8d%e7%bd%ae)、数据传输接口等场景可能会用到，涉及到XML文件处理的场景可查看XML解析器是否禁用外部实体，从而判断是否存在XXE。部分XML解析接口（常见漏洞出现函数）如下：
**JAVA**
    javax.xml.parsers.DocumentBuilderFactory;
    javax.xml.parsers.SAXParser
    javax.xml.transform.TransformerFactory
    javax.xml.validation.Validator
    javax.xml.validation.SchemaFactory
    javax.xml.transform.sax.SAXTransformerFactory
    javax.xml.transform.sax.SAXSource
    org.xml.sax.XMLReader
    DocumentHelper.parseText
    DocumentBuilder
    org.xml.sax.helpers.XMLReaderFactory
    org.dom4j.io.SAXReader
    org.jdom.input.SAXBuilder
    org.jdom2.input.SAXBuilder
    javax.xml.bind.Unmarshaller
    javax.xml.xpath.XpathExpression
    javax.xml.stream.XMLStreamReader
    org.apache.commons.digester3.Digester
    rg.xml.sax.SAXParseExceptionpublicId
**PHP**
使用不安全的XML解析函数，SimpleXMLElement、simplexml_load_string函数解析body
## **6.XXE漏洞代码示例**
**JAVA**
JAVA解析XML的方法越来越多，常见有四种，即：[DOM](http://www.liuhaihua.cn/archives/tag/dom)、DOM4J、JDOM
和SAX。下面以这四种为例展示XXE漏洞。
1）DOM Read XML
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {      
            String result="";
            try {
                //DOM Read XML
                DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();     
                DocumentBuilder db = dbf.newDocumentBuilder();                  
                Document doc = db.parse(request.getInputStream());
                String username = getValueByTagName(doc,"username");
                String password = getValueByTagName(doc,"password");
                if(username.equals(USERNAME) && password.equals(PASSWORD)){
                    result = String.format("%d%s",1,username);
                }else{
                    result = String.format("%d%s",0,username);
                }
            } catch (ParserConfigurationException e) {
                e.printStackTrace();
                result = String.format("%d%s",3,e.getMessage());
            } catch (SAXException e) {
                e.printStackTrace();
                result = String.format("%d%s",3,e.getMessage());
            }
            response.setContentType("text/xml;charset=UTF-8");
            response.getWriter().append(result);
        }
2)DOM4J Read XML
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {          
            String result="";
            try {
                //DOM4J Read XML
                SAXReader saxReader = new SAXReader();
                Document document = saxReader.read(request.getInputStream());
                String username = getValueByTagName2(document,"username");
                String password = getValueByTagName2(document,"password");
                if(username.equals(USERNAME) && password.equals(PASSWORD)){
                    result = String.format("%d%s",1,username);
                }else{
                    result = String.format("%d%s",0,username);
                }                
            } catch (DocumentException  e) {
                System.out.println(e.getMessage());
            } 
            response.setContentType("text/xml;charset=UTF-8");
            response.getWriter().append(result);
        }
3)JDOM2 Read XML
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {             
            String result="";
            try {
                //JDOM2 Read XML    
                SAXBuilder builder = new SAXBuilder();  
                Document document = builder.build(request.getInputStream());
                String username = getValueByTagName3(document,"username");
                String password = getValueByTagName3(document,"password");
                if(username.equals(USERNAME) && password.equals(PASSWORD)){
                    result = String.format("%d%s",1,username);
                }else{
                    result = String.format("%d%s",0,username);
                }
            } catch (JDOMException  e) {
                System.out.println(e.getMessage());
            } 
            response.setContentType("text/xml;charset=UTF-8");
            response.getWriter().append(result);
        }
4)SAX Read XML
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {      
            //https://blog.csdn.net/u011024652/article/details/51516220
            String result="";
            try {
                //SAX Read XML
                SAXParserFactory factory  = SAXParserFactory.newInstance(); 
                SAXParser saxparser = factory.newSAXParser();  
                SAXHandler handler = new SAXHandler();  
                saxparser.parse(request.getInputStream(), handler);
                //为简单，没有提取子元素中的数据，只要调用parse()解析xml就已经触发xxe漏洞了
                //没有回显  blind xxe
                 result = String.format("%d%s",0,1);
            } catch (ParserConfigurationException e) {
                e.printStackTrace();
                result = String.format("%d%s",3,e.getMessage());
            } catch (SAXException e) {
                e.printStackTrace();
                result = String.format("%d%s",3,e.getMessage());
            }
            response.setContentType("text/xml;charset=UTF-8");
            response.getWriter().append(result);
        }
其他：
0x1:
    public class XXE {
        @RequestMapping(value = "/xmlReader", method = RequestMethod.POST)
        @ResponseBody
        public  String xxe_xmlReader(HttpServletRequest request) {
            try {
                String xml_con = getBody(request);
                System.out.println(xml_con);
                XMLReader xmlReader = XMLReaderFactory.createXMLReader();
                xmlReader.parse( new InputSource(new StringReader(xml_con)) );  // parse xml
                return "ok";
            } catch (Exception e) {
                System.out.println(e);
                return "except";
            }
        }
0x2:
    @RequestMapping(value = "/SAXBuilder", method = RequestMethod.POST)
        @ResponseBody
        public  String xxe_SAXBuilder(HttpServletRequest request) {
            try {
                String xml_con = getBody(request);
                System.out.println(xml_con);
                SAXBuilder builder = new SAXBuilder();
                org.jdom2.Document document = builder.build( new InputSource(new StringReader(xml_con)) );  // cause xxe
                return "ok";
            } catch (Exception e) {
                System.out.println(e);
                return "except";
            }
        }
0x3:
    @RequestMapping(value = "/SAXReader", method = RequestMethod.POST)
        @ResponseBody
        public  String xxe_SAXReader(HttpServletRequest request) {
            try {
                String xml_con = getBody(request);
                System.out.println(xml_con);
                SAXReader reader = new SAXReader();
                org.dom4j.Document document = reader.read(  new InputSource(new StringReader(xml_con)) ); // cause xxe
                return "ok";
            } catch (Exception e) {
                System.out.println(e);
                return "except";
            }
        }
0x4:
    @RequestMapping(value = "/SAXParser", method = RequestMethod.POST)
        @ResponseBody
        public String xxe_SAXParser(HttpServletRequest request) {
            try {
                String xml_con = getBody(request);
                System.out.println(xml_con);
                SAXParserFactory spf = SAXParserFactory.newInstance();
                SAXParser parser = spf.newSAXParser();
                parser.parse(new InputSource(new StringReader(xml_con)), new DefaultHandler());  // parse xml
                return "test";
            } catch (Exception e) {
                System.out.println(e);
                return "except";
            }
        }
0x5:
    // 有回显的XXE
        @RequestMapping(value = "/DocumentBuilder_return", method = RequestMethod.POST)
        @ResponseBody
        public String xxeDocumentBuilderReturn(HttpServletRequest request) {
            try {
                String xml_con = getBody(request);
                System.out.println(xml_con);
                DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
                DocumentBuilder db = dbf.newDocumentBuilder();
                StringReader sr = new StringReader(xml_con);
                InputSource is = new InputSource(sr);
                Document document = db.parse(is);  // parse xml
                // 遍历xml节点name和value
                StringBuffer buf = new StringBuffer();
                NodeList rootNodeList = document.getChildNodes();
                for (int i = 0; i loadXML($aa, LIBXML_NOENT | LIBXML_DTDLOAD);
    $creds = simplexml_import_dom($dom);
    $user = $creds->user;