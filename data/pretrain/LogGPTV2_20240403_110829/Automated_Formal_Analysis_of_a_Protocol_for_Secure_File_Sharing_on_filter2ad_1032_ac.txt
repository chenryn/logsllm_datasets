### Code for Writers

```plaintext
out(net, (lk , sk , sn)) 
(* initiate a writer w for group g *)
(* send write key request *)
(* obtain lk, sk, and signed modulus *)
(* create data to write *)
(* encrypt *)
(* sign *)
(* assert that data m has been written by w for group g at version v *)
(* send content to file system *)
(* receive corrupt request for w *)
(* assert that w has been corrupted for group g at version v *)
(* leak lk, sk, and signed modulus *)

event corrupt(w, g, v);
```

### Code for Readers

```plaintext
out(net, (rkeyreq, r, g));
in(rprivchannel(r), (= g, v, lk, ownerpubkey));

( in(fs, (= g, vx, n, sn, encx, sencx));
if hash(n) = exp(sn, ownerpubkey) then
  if (v, vx) = (succ(zero), zero) then
    let lk = exp(lk, ownerpubkey) in
    let vk = (genExp(n, lk), n) in
    if hash(encx) = exp(sencx, vk) then
      let x = dec(encx, lk) in
      event gets(r, x, g, vx)
)

(* initiate a reader r for group g *)
(* send read key request *)
(* obtain lk and owner’s public key *)
(* obtain header and content from file system *)
(* verify signature in header *)
(* unwind lk *)
(* derive vk *)
(* verify signature of encryption*)
(* decrypt to obtain data *)
(* assert that reader r read data x for group g and version vx *)
(* receive corrupt request for r *)
(* assert that r has been corrupted for group g at version v *)
(* leak lk *)

event corrupt(r, g, v);
out(net, lk);
```

### Explanation of Reader Code

Figure 3 shows the code for readers. A reader for group \( g \) at version \( v \) obtains the lockbox key for \( v \) from the owner of \( g \) (lines 64–65). To read data, an honest reader obtains content from the file system (line 67) and parses that content to obtain a signed encryption and a header that contains \( g \), a version number \( vx \), and a signed modulus. It verifies the signature of the modulus with the owner’s public key (line 68), generates the verify key for \( vx \) from the modulus and the lockbox key (lines 69–71), verifies the signature of the encryption with the verify key (line 72), and decrypts the encryption with the lockbox key (line 73).

The generation of the verify key for \( vx \) from the modulus for \( vx \) and the lockbox key for \( v \) follows the outline in Section 2: the lockbox key \( lk \) for \( vx \) is obtained from the lockbox key for \( v \) by unwinding it \( v - vx \) times (line 70), after which `genExp` generates the required exponent (line 71). In Figure 3, we detail only the case where \( v = 1 \) and \( vx = 0 \) (lines 69–75), in which case we unwind the lockbox key once (line 70). The ProVerif script includes a similar block of code for each \( vx \leq v \leq maxrev \), located at line 76 and omitted in Figure 3.

The event `gets(r, x, g, vx)` asserts that an honest reader \( r \) for group \( g \) receives data \( x \) from the file system using keys for version \( vx \).

In contrast, a dishonest reader leaks the lockbox key (line 81); the adversary can use this information to act for that reader. The event `corrupt(r, g, v)` asserts that a reader \( r \) in group \( g \) is corrupt at version \( v \).

### Security Results on Plutus

We now specify secrecy and integrity properties of Plutus in ProVerif and verify those properties (showing proofs or attacks) using ProVerif. We propose corrections where attacks are possible and clarify several security-relevant details of the design along the way.

#### Correspondences

Properties of the protocol are specified as correspondences [41]. The verifier ProVerif can prove such correspondences [14]. A simple example is the correspondence \( e(M_1, \ldots, M_n) \Rightarrow e'(M'_1, \ldots, M'_n) \), which means that in any trace of the protocol in the presence of an adversary, the event \( e(M_1, \ldots, M_n) \) must not be executed unless the event \( e'(M'_1, \ldots, M'_n) \) is executed. More generally, correspondences may include equality tests of the form \( M = M' \), atoms of the form \( \text{pred}(M_1, \ldots, M_n) \) that rely on user-defined predicates (such as `geq` and `member`), and atoms of the form `attacker(M)`, which mean that the attacker knows the term \( M \).

**Definition 4.1 (Correspondences):** Let \( T \) range over traces, \( \sigma \) over substitutions, and \( \phi \) over formulas of the form `attacker(M)`, `e(M_1, \ldots, M_n)`, `pred(M_1, \ldots, M_n)`, \( M = M' \), \( \phi_1 \land \phi_2 \), or \( \phi_1 \lor \phi_2 \).

- \( T \) satisfies `attacker(M)` if the message \( M \) has been sent on a public channel in \( T \).
- \( T \) satisfies `e(M_1, \ldots, M_n)` if the event `e(M_1, \ldots, M_n)` has been executed in \( T \).
- \( T \) satisfies \( M = M' \) if \( M = M' \) modulo the equations that define the function symbols.
- \( T \) satisfies `pred(M_1, \ldots, M_n)` if the atom `pred(M_1, \ldots, M_n)` is true.
- \( T \) satisfies \( \phi_1 \land \phi_2 \) if \( T \) satisfies both \( \phi_1 \) and \( \phi_2 \).
- \( T \) satisfies \( \phi_1 \lor \phi_2 \) if \( T \) satisfies \( \phi_1 \) or \( \phi_2 \).

Let an `Init-adversary` be an adversary whose initial knowledge is `Init`. A process \( P \) satisfies the correspondence \( \phi \Rightarrow \phi' \) against `Init-adversaries` if and only if, for any trace \( T \) of \( P \) in the presence of an `Init-adversary`, for any substitution \( \sigma \), if \( T \) satisfies \( \sigma\phi \), then there exists a substitution \( \sigma' \) such that \( \sigma'\phi = \sigma\phi \) and \( T \) satisfies \( \sigma'\phi' \) as well.

In a correspondence \( \phi \Rightarrow \phi' \), the variables of \( \phi \) are universally quantified (because \( \sigma \) is universally quantified), and the variables of \( \phi' \) that do not occur in \( \phi \) are existentially quantified (because \( \sigma' \) is existentially quantified). ProVerif can prove correspondences \( \phi \Rightarrow \phi' \) of a more restricted form, in which \( \phi \) is of the form `attacker(M)` or `e(M_1, \ldots, M_n)`. This corresponds to the formal definition of correspondences proved by ProVerif given in [14, Definition 3], except for two extensions: we allow atoms of the form `attacker(M)`, \( M = M' \), and `pred(M_1, \ldots, M_n)` to occur in \( \phi' \) and we do not require that \( \phi' \) be in disjunctive normal form.

#### Proving Correspondences

To prove correspondences, ProVerif translates the process and the actions of the adversary into a set of Horn clauses \( R \). In these clauses, messages are represented by patterns, which are terms in which names \( a \) have been replaced with functions \( a[...] \). Free names are replaced with constants \( a[ ] \), while bound names created by restrictions are replaced with functions of the messages previously received and of session identifiers that take a different value at each execution of the restriction—so that different names are represented by different patterns. The clauses use the following kinds of facts:

- `attacker(p)`, which means that the adversary may have the message \( p \).
- `message(p, p')`, which means that the message \( p' \) may be sent on channel \( p \).
- `event(e(p_1, \ldots, p_n))`, which means that \( e(p_1, \ldots, p_n) \) may have been executed.
- `m-event(e(p_1, \ldots, p_n))`, which means that the event \( e(p_1, \ldots, p_n) \) must have been executed.
- The facts `geq(p, p')` and `member(p, p')`, which are defined in Section 3.2.1.

The clauses that define `geq` and `member` are shown in Section 3.2.1. The other clauses in \( R \) are generated automatically by ProVerif from the process and from the definitions of the function symbols; see [14, Section 5.2] for details. ProVerif establishes security properties by proving that certain facts are derivable from these clauses only if certain hypotheses are satisfied. The derivability properties are determined by a resolution-based algorithm, described in [14, Section 6].

Specifically, ProVerif computes a function `solveP,Init(F)` that takes as argument a process \( P \), the initial knowledge of the adversary `Init`, and a fact \( F \), and returns a set of Horn clauses that determines which instances of \( F \) are derivable. More precisely, let \( F_{me} \) be any set of `m-event` facts, which are supposed to hold. An instance \( F' \) of \( F \) is derivable from \( R \cup F_{me} \) if and only if there exist a clause \( H \Rightarrow C \) in `solveP,Init(F)` and a substitution \( \sigma' \) such that \( F' = \sigma'C \) and the facts in \( \sigma'H \) are derivable from \( R \cup F_{me} \). In particular, if `solveP,Init(F) = ∅`, then no instance of \( F \) is derivable from \( R \cup F_{me} \) for any \( F_{me} \). Other values of `solveP,Init(F)` give information on which instances of \( F \) are derivable and under which conditions. In particular, the `m-event` facts in the hypotheses of clauses in `solveP,Init(F)` must be in \( F_{me} \) in order to derive an instance of \( F \) (since \( R \) contains no clause that concludes `m-event` facts), so the corresponding events must have been executed.

We can then prove the following theorem, which provides a technique for establishing correspondences.

**Theorem 4.2 (Correspondences):** Let \( P \) be a closed process. Let \( \phi \Rightarrow \phi' \) be a correspondence, where \( \phi \) is `attacker(M)` or `e(M_1, \ldots, M_n)`. Let \( F = \text{attacker}(p) \) if \( \phi = \text{attacker}(M) \) and \( F = \text{event}(e(p_1, \ldots, p_n)) \) if \( \phi = e(M_1, \ldots, M_n) \), where \( p, p_1, \ldots, p_n \) are the patterns obtained from the terms \( M, M_1, \ldots, M_n \) respectively, by replacing names \( a \) with patterns \( a[ ] \). Let \( \psi' \) be the formula obtained from \( \phi' \) by replacing names \( a \) with patterns \( a[ ] \).

Suppose that, for all \( H \Rightarrow C \in \text{solveP,Init}(F) \), there exists a substitution \( \sigma \) such that \( C = \sigma F \) and \( H \vdash \sigma \psi' \), where:

- \( H \vdash e(p_1, \ldots, p_n) \) if and only if `m-event(e(p_1, \ldots, p_n))` ∈ \( H \).
- \( H \vdash p = p' \) if and only if \( p = p' \) modulo the equations that define the function symbols.
- \( H \vdash \text{pred}(p_1, \ldots, p_n) \) (where `pred` is a user-defined predicate or `attacker`) if and only if `pred(p_1, \ldots, p_n)` is derivable from the facts in \( H \), the clauses that define user predicates, the clauses that express the initial knowledge of the adversary, and the clauses that express that the adversary can apply functions.
- \( H \vdash \psi_1 \land \psi_2 \) if and only if \( H \vdash \psi_1 \) and \( H \vdash \psi_2 \).
- \( H \vdash \psi_1 \lor \psi_2 \) if and only if \( H \vdash \psi_1 \) or \( H \vdash \psi_2 \).

Then \( P \) satisfies the correspondence \( \phi \Rightarrow \phi' \) against `Init-adversaries`.

This theorem is an extension of [14, Theorem 4] to the case in which \( \phi' \) may contain atoms `attacker(M)`, \( M = M' \), and `pred(M_1, \ldots, M_n)`, and \( \phi' \) may not be in disjunctive normal form. Intuitively, if \( T \) satisfies \( \sigma_M \phi \), then \( \sigma_p F \) is derivable, where \( \sigma_p \) is the substitution on patterns that corresponds to the substitution on terms \( \sigma_M \). So there exist a clause \( H \Rightarrow C \) in `solveP,Init(F)` and a substitution \( \sigma' \) such that \( \sigma_p F = \sigma' C \) and the facts \( \sigma' H \) are derivable. Since \( H \vdash \sigma \psi' \), we also have \( \sigma' \sigma \psi' \). Moreover, \( C = \sigma F \), so \( \sigma_p F = \sigma' \sigma F \). So, letting \( \sigma_p' = \sigma' \sigma \), we have \( \sigma_M \phi = \sigma_p' F \) and \( T \) satisfies \( \sigma_p' \psi' \), so \( \sigma_M \phi = \sigma_p' \sigma_M \phi' \), where \( \sigma_M \) is the substitution on terms that corresponds to the substitution \( \sigma_p' \) on patterns. Hence the correspondence \( \phi \Rightarrow \phi' \) is satisfied.

In this paper, we use the more general language of correspondences of Definition 4.1, and show how to exploit the more limited queries that ProVerif can prove in order to prove the correspondences that we need.

#### Main Security Properties of Plutus

We study secrecy and integrity properties of Plutus by specifying correspondences in ProVerif. Our security proofs with ProVerif assume `maxrev = 5`, that is, they apply to a model where at most five revocations are possible for any group. The attacks assume `maxrev = 1` and remain valid for any `maxrev ≥ 1`. Running times of ProVerif appear later in the section. Recall that ProVerif does not terminate at this level of detail if the number of versions is unbounded. Nevertheless, we expect the results below to hold in that case as well.

We begin with secrecy. Specifically, we are interested in the secrecy of some fresh data \( m \) written by an honest writer for group \( g \) using keys for version \( v \). We cannot expect \( m \) to be secret if a dishonest reader for \( g \) at \( v \) colludes with the adversary at \( v \)—but is it necessary that such a reader collude with the adversary in order to leak \( m \)? In order to determine that, we tentatively specify secrecy as follows: a secret \( m \) written by an honest writer for \( g \) at \( v \) is leaked only if a reader for \( g \) is corrupt at \( v \), i.e., the process modeling Plutus satisfies the correspondence:

\[ \text{puts}(w, m, g, v) \land \text{attacker}(m) \Rightarrow \text{corrupt}(r, g, v) \land \text{isreader}(r, g, v) \]

Unfortunately, here writers can act for readers (see Section 2), so a corrupt writer at \( v \) leaks (at least) as much information as a corrupt reader at \( v \). Note that, on the contrary, it is intended in [32] that read access be disjoint from write access. Moreover, since the read key for \( v \) can be obtained from the read key for any \( v' \geq v \) by unwinding, even a corrupt reader (or writer) at such \( v' \) leaks as much information as a corrupt reader at \( v \). Of course, if the set of readers does not increase, a reader at \( v' \) is already a reader at \( v \), so this situation is not surprising. (Indeed, this is the case that motivates key rotation in [32].) On the other hand, increasing the set of readers can lead to additional security concerns.