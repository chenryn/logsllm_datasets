48
49
50
51
52
53
54
55
56
57
58
59
60
61
)
).
)
|
( in(net, = (corrupt, w));
event corrupt(w , g, v);
out(net, (lk , sk , sn))
(* initiate a writer w for group g *)
(* send write key request *)
(* obtain lk, sk, and signed modulus *)
(* create data to write *)
(* encrypt *)
(* sign *)
(* assert that data m has been written by w for group g at version v *)
(* send content to ﬁle system *)
(* receive corrupt request for w *)
(* assert that w has been corrupted for group g at version v *)
(* leak lk, sk, and signed modulus *)
Figure 2. Code for writers
out(net, (rkeyreq, r , g));
in(rprivchannel(r), (= g, v , lk , ownerpubkey));
(
( in(fs, (= g, vx , n, sn, encx , sencx));
if hash(n) = exp(sn, ownerpubkey) then
( if (v , vx) = (succ(zero), zero) then
( let lk = exp(lk , ownerpubkey) in
let vk = (genExp(n, lk), n) in
if hash(encx) = exp(sencx , vk) then
let x = dec(encx , lk) in
event gets(r , x , g, vx)
62 let processRdr =
63 ! in(net, (r , g));
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
)
. . .
)
).
)
|
( in(net, = (corrupt, r));
event corrupt(r , g, v);
out(net, lk)
(* initiate a reader r for group g *)
(* send read key request *)
(* obtain lk and owner’s public key *)
(* obtain header and content from ﬁle system *)
(* verify signature in header *)
(* unwind lk *)
(* derive vk *)
(* verify signature of encryption*)
(* decrypt to obtain data *)
(* assert that reader r read data x for group g and version vx *)
(* receive corrupt request for r *)
(* assert that r has been corrupted for group g at version v *)
(* leak lk *)
Figure 3. Code for readers
Finally, Figure 3 shows the code for readers. A reader
for group g at version v obtains the lockbox key for v from
the owner of g (lines 64–65). To read data, an honest reader
obtains content from the ﬁle system (line 67), and parses
that content to obtain a signed encryption and a header that
contains g, a version number vx, and a signed modulus. It
veriﬁes the signature of the modulus with the owner’s pub-
lic key (line 68); it then generates the verify key for vx from
the modulus and the lockbox key (lines 69–71), veriﬁes the
signature of the encryption with the verify key (line 72), and
decrypts the encryption with the lockbox key (line 73). The
generation of the verify key for vx from the modulus for vx
and the lockbox key for v follows the outline in Section 2:
the lockbox key lk for vx is obtained from the lockbox key
for v by unwinding it v − vx times (line 70), after which
genExp generates the required exponent (line 71). In Fig-
ure 3, we detail only the case where v = 1 and vx = 0
(lines 69–75), in which case we unwind the lockbox key
once (line 70); the ProVerif script includes a similar block
of code for each vx ≤ v ≤ maxrev, located at line 76
and omitted in Figure 3. The event gets(r, x, g, vx) asserts
that an honest reader r for group g receives data x from the
ﬁle system using keys for version vx.
In contrast, a dis-
honest reader leaks the lockbox key (line 81); the adversary
can use this information to act for that reader. The event
corrupt(r, g, v) asserts that a reader r in group g is corrupt
at version v.
4. Security results on Plutus
We now specify secrecy and integrity properties of Plu-
tus in ProVerif, and verify those properties (showing proofs
or attacks) using ProVerif. We propose corrections where
attacks are possible, and clarify several security-relevant de-
tails of the design along the way.
4.1. Correspondences
1, . . . , M0
1, . . . , M0
Properties of the protocol are speciﬁed as correspon-
dences [41]. The veriﬁer ProVerif can prove such corre-
spondences [14]. A simple example is the correspondence
e(M1, . . . , Mn)   e0(M0
n0), which means that in
any trace of the protocol in the presence of an adversary, the
event e(M1, . . . , Mn) must not be executed unless the event
e0(M0
n0) is executed. More generally, correspon-
dences may include equality tests of the form M = M0,
atoms of the form pred(M1, . . . , Mn) that rely on user-
deﬁned predicates pred (such as geq and member), and
atoms of the form attacker(M), which mean that the at-
tacker knows the term M.
Deﬁnition 4.1 (Correspondences). Let T range over traces,
σ over substitutions, and φ over formulas of the form
attacker(M), e(M1, . . . , Mn), pred(M1, . . . , Mn), M =
M0, φ1 ∧ φ2, or φ1 ∨ φ2.
• T satisﬁes attacker(M) if the message M has been
sent on a public channel in T .
• T satisﬁes e(M1, . . . , Mn) if the event e(M1, . . . ,
Mn) has been executed in T .
• T satisﬁes M = M0 if M = M0 modulo the equations
that deﬁne the function symbols.
• T satisﬁes pred(M1, . . . , Mn) if the atom pred(M1,
. . . , Mn) is true.
• T satisﬁes φ1 ∧ φ2 if T satisﬁes both φ1 and φ2.
• T satisﬁes φ1 ∨ φ2 if T satisﬁes φ1 or T satisﬁes φ2.
Let an Init-adversary be an adversary whose initial
knowledge is Init. A process P satisﬁes the correspondence
φ   φ0 against Init-adversaries if and only if, for any trace
T of P in the presence of an Init-adversary, for any substi-
tution σ, if T satisﬁes σφ, then there exists a substitution σ0
such that σ0φ = σφ and T satisﬁes σ0φ0 as well.
In a correspondence φ   φ0, the variables of φ are
universally quantiﬁed (because σ is universally quantiﬁed),
and the variables of φ0 that do not occur in φ are exis-
tentially quantiﬁed (because σ0 is existentially quantiﬁed).
ProVerif can prove correspondences φ   φ0 of a more re-
stricted form, in which φ is of the form attacker(M) or
e(M1, . . . , Mn). This corresponds to the formal deﬁnition
of correspondences proved by ProVerif given in [14, Deﬁ-
nition 3], except for two extensions: we allow atoms of the
form attacker(M), M = M0, and pred(M1, . . . , Mn) to
occur in φ0 and we do not require that φ0 be in disjunctive
normal form.
In order to prove correspondences, ProVerif translates
the process and the actions of the adversary into a set of
Horn clauses R. In these clauses, messages are represented
by patterns3 p, which are terms in which names a have been
replaced with functions a[. . .]. Free names are replaced
with constants a[ ], while bound names created by restric-
tions are replaced with functions of the messages previously
received and of session identiﬁers that take a different value
at each execution of the restriction—so that different names
are represented by different patterns. The clauses use the
following kinds of facts:
• attacker(p), which means that the adversary may have
the message p;
• message(p, p0), which means that the message p0 may
be sent on channel p;
3Note that the meaning of “pattern” in this context is different from the
usual meaning, e.g. in Section 3.2.2.
• event(e(p1, . . . , pn)), which means that
e(p1, . . . , pn) may have been executed;
the event
• m-event(e(p1, . . . , pn)), which means that the event
e(p1, . . . , pn) must have been executed;
• the facts geq(p, p0) and member(p, p0), which are de-
ﬁned in Section 3.2.1.
The clauses that deﬁne geq and member are shown in Sec-
tion 3.2.1. The other clauses in R are generated automat-
ically by ProVerif from the process and from the deﬁni-
tions of the function symbols; see [14, Section 5.2] for de-
tails. ProVerif establishes security properties by proving
that certain facts are derivable from these clauses only if
certain hypotheses are satisﬁed. The derivability properties
are determined by a resolution-based algorithm, described
in [14, Section 6]. Speciﬁcally, ProVerif computes a func-
tion solveP,Init(F ) that takes as argument a process P , the
initial knowledge of the adversary Init, and a fact F , and re-
turns a set of Horn clauses that determines which instances
of F are derivable. More precisely, let Fme be any set of
m-event facts, which are supposed to hold. An instance F0
of F is derivable from R ∪ Fme if and only if there ex-
ist a clause H ⇒ C in solveP,Init(F ) and a substitution
σ0 such that F0 = σ0C and the facts in σ0H are deriv-
able from R ∪ Fme. In particular, if solveP,Init(F ) = ∅,
then no instance of F is derivable from R ∪ Fme for any
Fme. Other values of solveP,Init(F ) give information on
which instances of F are derivable and under which condi-
tions. In particular, the m-event facts in the hypotheses of
clauses in solveP,Init(F ) must be in Fme in order to derive
an instance of F (since R contains no clause that concludes
m-event facts), so the corresponding events must have been
executed.
We can then prove the following theorem, which pro-
vides a technique for establishing correspondences.
Theorem 4.2 (Correspondences). Let P be a closed pro-
cess. Let φ   φ0 be a correspondence, where φ is
attacker(M) or e(M1, . . . , Mn). Let F = attacker(p)
if φ = attacker(M) and F = event(e(p1, . . . , pn)) if
φ = e(M1, . . . , Mn), where p, p1, . . . , pn are the patterns
obtained from the terms M, M1, . . . , Mn respectively, by
replacing names a with patterns a[ ]. Let ψ0 be the formula
obtained from φ0 by replacing names a with patterns a[ ].
Suppose that, for all H ⇒ C ∈ solveP,Init(F ), there
exists a substitution σ such that C = σF and H ‘ σψ0,
where
• H ‘ e(p1, . . . , pn) if and only if m-event(e(p1, . . . ,
pn)) ∈ H
• H ‘ p = p0 if and only if p = p0 modulo the equations
that deﬁne the function symbols.
• H ‘ pred(p1, . . . , pn) (where pred is a user-deﬁned
predicate or attacker) if and only if pred(p1, . . . , pn)
is derivable from the facts in H, the clauses that de-
ﬁne user predicates, the clauses that express the initial
knowledge of the adversary, and the clauses that ex-
press that the adversary can apply functions.
• H ‘ ψ1 ∧ ψ2 if and only if H ‘ ψ1 and H ‘ ψ2
• H ‘ ψ1 ∨ ψ2 if and only if H ‘ ψ1 or H ‘ ψ2.
Then P satisﬁes the correspondence φ   φ0 against Init-
adversaries.
This theorem is an extension of [14, Theorem 4] to the
case in which φ0 may contain atoms attacker(M), M =
M0, and pred(M1, . . . , Mn), and φ0 may not be in disjunc-
tive normal form. Intuitively, if T satisﬁes σM φ, then σpF
is derivable, where σp is the substitution on patterns that
corresponds to the substitution on terms σM . So there ex-
ist a clause H ⇒ C in solveP,Init(F ) and a substitution
σ0 such that σpF = σ0C and the facts σ0H are deriv-
able. Since H ‘ σψ0, we also have σ0σψ0. Moreover,
C = σF , so σpF = σ0σF . So, letting σ0
p = σ0σ, we have
M φ and T satisﬁes
pψ0, so σM φ = σ0
σpF = σ0
σ0
M φ0, where σ0
M is the substitution on terms that corre-
sponds to the substitution σ0
p on patterns. Hence the corre-
spondence φ   φ0 is satisﬁed.
pF and σ0
In this paper, we use the more general language of cor-
respondences of Deﬁnition 4.1, and show how to exploit
the more limited queries that ProVerif can prove in order to
prove the correspondences that we need.
4.2. Main security properties of Plutus
We study secrecy and integrity properties of Plutus
by specifying correspondences in ProVerif. Our security
proofs with ProVerif assume maxrev = 5, that is, they ap-
ply to a model where at most ﬁve revocations are possible
for any group. The attacks assume maxrev = 1, and re-
main a fortiori valid for any maxrev ≥ 1. Running times
of ProVerif appear later in the section. Recall that ProVerif
does not terminate at this level of detail if the number of
versions is unbounded. Nevertheless, we expect the results
below to hold in that case as well.
We begin with secrecy. Speciﬁcally, we are interested in
the secrecy of some fresh data m written by an honest writer
for group g using keys for version v. We cannot expect m
to be secret if a dishonest reader for g at v colludes with the
adversary at v—but is it necessary that such a reader collude
with the adversary in order to leak m? In order to determine
that, we tentatively specify secrecy as follows: a secret m
written by an honest writer for g at v is leaked only if a
reader for g is corrupt at v, i.e., the process modeling Plutus
satisﬁes the correspondence
puts(w, m, g, v) ∧ attacker(m)  
corrupt(r, g, v) ∧ isreader(r, g, v)
Unfortunately, here writers can act for readers (see Sec-
tion 2), so a corrupt writer at v leaks (at least) as much in-
formation as a corrupt reader at v. Note that on the contrary,
it is intended in [32] that read access be disjoint from write
access. Moreover, since the read key for v can be obtained
from the read key for any v0 ≥ v by unwinding, even a cor-
rupt reader (or writer) at such v0 leaks as much information
as a corrupt reader at v. Of course, if the set of readers does
not increase, a reader at v0 is already a reader at v, so this
situation is not surprising. (Indeed, this is the case that mo-
tivates key rotation in [32].) On the other hand, increasing