branch of OpenSSL’s source code on May 20th, 2018,
before this paper was published.
2 Background
Long-lasting operations (such as large-integer square and
multiply operations) facilitate matching by producing
numerous signals samples even when the signal is col-
lected at a limited sample rate.
A representative example is RSA’s decryption, which
at its core performs modular exponentiation of the ci-
phertext c with a secret exponent (d) modulo m or, in
more a efﬁcient implementation that rely on the Chi-
nese Reminder Theorem (CRT), two such exponentia-
tions, with secret exponents dp and dq with modulo p
and q, respectively. The side-channel analysis thus seeks
to recover either d or, in CRT-based implementations, dp
and dq, using side-channel measurements obtained while
exponentiation is performed.
The exponentiation is implemented as either left-to-
right (starting with the most signiﬁcant bits) or right-
to-left (starting with the least signiﬁcant bits) traversal
USENIX Association
27th USENIX Security Symposium    587
/ /
r
s t a r t s o u t as 1
/ /
r = r∗ r mod m
/ / For each b i t o f e x p o n e n t d
f or ( b= b i t s −1;b >=0;b−−){
r e s u l t
1
2 BN one ( r ) ;
3
4
5
6
7
8
9
10
Figure 1: A simple implementation of large-number
modular exponentiation
BN mod mul ( r , r , r ,m) ;
i f ( B N i s b i t s e t ( d , b ) )
r = r∗ c mod m
BN mod mul ( r , r , c ,m) ;
/ /
}
of the bits of the exponents, using large-integer modu-
lar multiplication to update the result until the full expo-
nentiation is complete. Left-to-right implementations are
more common, and without loss of generality we use c
to denote the ciphertext, d for the secret exponent, and m
for the modulus. A simple implementation of exponen-
tiation considers one exponent bit at a time, as shown in
Figure 1, which is adapted from OpenSSL’s source code.
The BN preﬁx in Figure 1 stands for “Big Number” (i.e.
large integer). Each large integer is represented by a vec-
tor of limbs, where a limb is an ordinary (machine-word-
sized) integers. The BN is bit set(d,b) function re-
turns the value (0 or 1) of the b-th bit of large-integer
exponent d, which only requires a few processor instruc-
tions: compute the index of the array element that con-
tains the requested bit, load that element, then shift and
bit-mask to keep only the requested bit. The instructions
that implement the loop, the if statement, and function
call/return are also relatively few in number.
However, the BN mod mul operation is much more
time-consuming: it requires numerous multiplication in-
structions that operate on the limbs of the large-integer
multiplicands. Large integers c, d, and m (or, in CRT-
based implementations the dq, dp and the corresponding
moduli), all have O(n) bits and thus O(n) limbs, where n
is the size of the RSA cryptographic key. A grade-school
implementation of BN mod mul thus requires O(n2) limb
multiplications, but the Karatsuba multiplication algo-
rithm [30] is typically used to reduces this to O(nlog23) ≈
O(n1.585), In most modern implementations a signiﬁcant
further performance improvement is achieved by con-
verting the ciphertext to a Montgomery representation,
using Montgomery multiplication for BN mod mul dur-
ing exponentiation, and at the end converting the result r
back to the standard representation.
Even with Montgomery multiplication, however, the
vast majority of execution time for large-number expo-
nentiation is spent on large-number multiplications, so
performance optimizations focus on reducing the num-
ber of these multiplications. Likewise, most of the side-
channel measurements (e.g.
signal samples) collected
during large-number exponentiation correspond to large-
number multiplication activity, so existing side channel
cryptanalysis approaches tend to target multiplication ac-
tivity.
One class of attacks focuses on distinguishing be-
tween squaring (r ∗ r) and multiplication (r ∗ c) opera-
tions, and recovering information about the secret ex-
ponent from the sequence in which they occur. Ex-
amples of such attacks include FLUSH+RELOAD [45]
(which uses instruction cache behavior) and Percival’s
attack [39], which uses data cache behavior. In the naive
implementation above, an occurrence of squaring tells
the attacker that the next bit of the exponent is being
used, and an occurrence of multiplication indicates that
the value of that bit is 1, so an attack that correctly re-
covers the square-multiply sequence can trivially obtain
all bits of the secret exponent.
To improve performance, most modern implementa-
tions use window-based exponentiation, where squaring
is needed for each bit of the exponent, but a multipli-
cation is needed only once per a multi-bit group (called
a window) of exponent bits. A left-to-right (starting at
the most signiﬁcant bit) sliding-window implementation
scans the exponent bits and forms windows of varying
length. Since a window that contains only zero bits re-
quires no multiplication (and thus cannot beneﬁt from
forming multi-bit windows), only windows that begin
and end with 1-valued bits are allowed to form multi-
bit windows, whereas zero bits in-between these win-
dows are each treated as their own single-bit windows
that can omit multiplication. A sliding-window imple-
mentation is shown in Figure 2, using code adapted from
OpenSSL’s source code for sliding-window modular ex-
ponentiation. The sliding-window approach chooses a
maximum size wmax for the windows it will use, pre-
computes a table ct that contains the large-integer value
cwvalmodm for each possible value wval up to wmax
length, and then scans the exponent, forming windows
and updating the result for each window.
In this algorithm, a squaring (lines 7 and 26 in Fig-
ure 2) is performed for each bit while the multiplication
operation (line 29) is performed only at the (1-valued)
LSB of a non-zero window. Thus the square-multiply
sequence reveals where some of the 1-valued bits in
the exponent are, and additional bits of the exponent
have been shown to be recoverable [10] by analyzing
the number of squaring between each pair of multiplica-
tions. The fraction of bits that can be recovered from the
square-multiply sequence depends on the maximum win-
dow size wmax, but commonly used values of wmax are
relatively small and prior work [10] has experimentally
demonstrated recovery of 49% of the exponent’s bits on
average when wmax = 4 based on the square-multiply se-
quence. Additional techniques [10, 28] have been shown
588    27th USENIX Security Symposium
USENIX Association
break ;
/ / Don ’ t go below e x p o n e n t ’ s LSB
i f ( w s t a r t −i =0){
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
Figure 2: Sliding-window implementation of large-
number modular exponentiation
/ / M u l t i p l y window ’ s
/ /
BN mod mul ( r , r , c t [ wval >>1],m) ;
/ / Begin a new window
w s t a r t −=w;
/ /
i f ( B N i s b i t s e t ( d , w s t a r t −i ) ){
I f 1 e x t e n d window t o i t
wval =( wval =0){
wval =0;
3
/ / Scan t h e window ,
4
/ /
5
f o r ( i =0; i <w; i ++) {
6
7
8
9
10
11
12
13
14
15
Figure 3:
number modular exponentiation
i n t o t h e o v e r a l l
}
BN mod mul ( r , r , r ,m) ;
wval <<=1;
wval+= B N i s b i t s e t ( d , b ) ;
b−−;
}
/ / M u l i t p l y window ’ s
/ /
r e s u l t
BN mod mul ( r , r , c t [ wval ] ,m) ;
r e s u l t
Fixed-window implementation of
large-
value (which consists of the bits from the secret expo-
nent) directly determines which elements of ct are ac-
cessed. These elements are each a large integers, each of
which is typically stored as an array or ordinary integers
(e.g. OpenSSL’s “Big Number” BN structure). Since
each such array is much larger than a cache block, differ-
ent large integers occupy distinct cache blocks, and thus
the address the cache set that is accessed when reading
the elements of the ct array reveals key material. Perci-
val’s attack [39], for example, can note the sequence in
which the cache sets are accessed by the victim during
ﬁxed-window exponentiation, which reveals which win-
dow values were used and in what sequence, which in
turns yields the bits of the secret exponent. To mitigate
such attacks, the implementation in OpenSSL has been
changed to store ct such that each of the cache blocks it
contains parts from a number of ct elements, and there-
fore the sequence of memory blocks that are accessed in
each ct[wval] lookup leak none or very few bits of that
lookup’s wval.
Another broad class of side channel attacks relies on
choosing the ciphertext such that the side-channel be-
havior of the modular multiplication reveals which of
the possible multiplicands is being used. For example,
Genkin et al. [23, 24] construct a ciphertext that produces