title:Design and implementation of an Android host-based intrusion prevention
system
author:Mingshen Sun and
Min Zheng and
John C. S. Lui and
Xuxian Jiang
Design and Implementation of an Android Host-based
Intrusion Prevention System
§
Mingshen Sun
, Xuxian Jiang
† The Chinese University of Hong Kong, § Qihoo 360 & NC State University
{mssun, mzheng, cslui}@cse.cuhk.edu.hk, PI:EMAIL
†
, John C.S. Lui
∗ †
†
, Min Zheng
ABSTRACT
Android has a dominating share in the mobile market and
there is a signiﬁcant rise of mobile malware targeting An-
droid devices. Android malware accounted for 97% of all
mobile threats in 2013 [26]. To protect smartphones and
prevent privacy leakage, companies have implemented vari-
ous host-based intrusion prevention systems (HIPS) on their
Android devices. In this paper, we ﬁrst analyze the imple-
mentations, strengths and weaknesses of three popular HIPS
architectures. We demonstrate a severe loophole and weak-
ness of an existing popular HIPS product in which hackers
can readily exploit. Then we present a design and imple-
mentation of a secure and extensible HIPS platform — “Pa-
tronus”. Patronus not only provides intrusion prevention
without the need to modify the Android system, it can also
dynamically detect existing malware based on runtime in-
formation. We propose a two-phase dynamic detection algo-
rithm for detecting running malware. Our experiments show
that Patronus can prevent the intrusive behaviors eﬃciently
and detect malware accurately with a very low performance
overhead and power consumption.
1.
INTRODUCTION
We now live in a mobile digital era and smartphones are
becoming indispensable as they are being used as personal
communication and computing devices. Unfortunately, smart-
phones are also becoming hackers’ biggest target [44]. An-
droid is an open source operating system for mobile devices.
Its market share has reached around 80 percent of all smart-
phone shipments in the second quarter of 2013 [35]. Due to
its large market share, it becomes the major target for hack-
ers. A recent report [26] indicated that 97 percent of these
threats targeted Android devices. Furthormore McAfee [39]
showed that 17,000 new Android malware were found in the
second quarter of 2013. All these indicate that Android de-
vices are facing an explosive growth of malware threat.
∗
Part of this work was done during his internship at Qihoo 360.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
ACSAC ’14, December 08–12 2014, New Orleans, LA, USA
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3005-3/14/12 ...$15.00
http://dx.doi.org/10.1145/2664243.2664245
Permission mechanism is the primary security protection
in Android. When an Android user installs a mobile appli-
cation (app for short), the system will alert the user about
the required permissions of that app. But this mechanism
does not provide an adequate level of security. As shown
in [28, 31, 38, 16], there are plenty of Android permission
abuses. Due to the working mechanism and the open source
nature of Android system, it is easy to write malware vari-
ants which can bypass the detection of anti-virus software.
Recently, researchers [59, 48] have shown that some of the
existing anti-virus software cannot eﬀectively detect mal-
ware variants which were generated by simple transforma-
tions. Most of the existing anti-virus engines are using static
analysis and malware signatures [62, 32] for detection. To
make up for the limitations of static analysis, several sys-
tems [24, 55, 8] aim to detect the runtime behaviors by us-
ing dynamic analysis. However, these systems are mainly for
post-mortem analysis and with a high likelihood, the mal-
ware under investigation may have already infected many
devices. Furthermore, for these dynamic analysis systems,
how to automatically trigger the malicious behaviors is still
an ongoing research problem [58, 47]. Therefore, the security
community has been advocating the use of a host-based in-
trusion prevention system (HIPS), which is an installed soft-
ware on a mobile device to monitor suspicious activities, and
to block and report malicious behaviors by analyzing events
at realtime. HIPS can be installed on mobile devices to pro-
vide protection against apps which have runtime malicious
behaviors. HIPS can also dynamically intercept the apps
at runtime and notify users when the malware invoke some
dangerous application program interfaces (APIs).
In fact,
the use of HIPS is gaining popularity and has been imple-
mented in products like Jinshan Mobile Duba [9], LBE [10],
360 Mobile Safe [13], etc.
In general, there are three approaches to implement HIPS
in Android, they are: (1) system patching, (2) application
repackaging and (3) API hooking. System patching is to
modify the Android operating system with new permission
management functions. Application repackaging is to disas-
semble a mobile app, add new policy enforcement to it, and
then repackage the mobile app as a new app. API hooking
is to intercept mobile app’s API calls at runtime so as to in-
spect malicious behaviors. Each of these approaches has its
own limitations and may bring new vulnerabilities. In Sec-
tion 3, we present in detail the implementation issues as well
as weaknesses of these three popular HIPS implementations.
Given the limitations of static and/or dynamic analysis,
as well as weaknesses of existing HIPS products, we propose
an enhanced HIPS called Patronus, which not only performs
a secure policy enforcement, but can also dynamically detect
existing malware using runtime information. To guarantee
the ease of deployment, Patronus does not require any mod-
iﬁcations on the Android ﬁrmware or mobile apps. Patronus
performs runtime policy enforcement on the system level to
inspect malicious behaviors. Moreover, Patronus provides a
host-based runtime detection which can halt malicious be-
haviors execution. We make the following contributions:
• To the best of our knowledge, this is the ﬁrst work
which systematically analyzes three popular frameworks
of HIPS and exposes various security vulnerabilities of
these existing HIPS architectures. We also illustrate
how to exploit the vulnerability of a popular HIPS
product so as to bypass malware detection.
• We design and implement a secure architecture Pa-
tronus, which can prevent mobile malware intrusions
and can detect malware at runtime. Patronus ad-
dresses the security issues we reveal in the current
HIPS products and eﬀectively prevent intrusions.
• We design and implement a two-phase detection algo-
rithm based on the runtime intrusion information to
detect existing malware. The algorithm can determine
and prevent malware at runtime (online), while tradi-
tional signature-based static method can only achieve
this in an oﬄine manner.
The rest of the paper is organized as follows: Section 2
introduces the necessary background on Android.
In Sec-
tion 3, we present the strengths and weaknesses of three
popular HIPS implementations.
In Section 4, we propose
our Patronus system, and describe the method to prevent
intrusions as well as proposing a two-phase algorithm for
dynamic malware detection.
In Section 5, we present our
experimental results to illustrate the eﬀectiveness and per-
formance of Patronus. Section 6 presents the related work
and the conclusion is given in Section 7.
2. BACKGROUND
In this section, we introduce the architecture of Android
system, its binder inter-process communication mechanism,
as well as the Dalvik Virtual Machine and the Native Develop-
ment Kit in Android. This background is essential to un-
derstand how one can create a HIPS for Android devices.
2.1 Android Architecture
Android is an open source operating system for mobile de-
vices developed by Google. The system consists of ﬁve func-
tional layers: (1) kernel, (2) libraries, (3) runtime support,
(4) application framework and (5) applications. Figure 1
presents the Android architecture. Android utilizes Linux
as the core kernel with various drivers for hardware commu-
nication. The libraries layer contains native libraries such as
libc or OpenGL so as to support higher application layers.
The runtime layer consists of the Dalvik Virtual Machine
(DVM) with various runtime libraries. DVM is a special
Java virtual machine to execute Android apps. Application
framework layer contains basic services to provide activity
management, SMS management, etc. Lastly, all Android
apps are running on top of these layers.
Android apps are mostly written in Java using the An-
droid SDK , and DVM is responsible for interpreting and
executing these apps. Each app is running within its own
DVM. The Android system assigns a unique ID for each
Figure 1: Architecture of Android system.
DVM to achieve process (or app) isolation. This sandboxing
mechanism provides the basic security protection between
apps. Android also provides a special inter-process commu-
nication mechanism called the Binder. Each app has to go
through the Binder (which is in the kernel layer) so as to
communicate with other apps or services.
Besides using DVM sandbox, permission is another secu-
rity mechanism provided by Android. Only when an app has
explicitly declared its permissions in its AndroidManifest.xml
ﬁle, then the app can use the corresponding APIs. Moreover,
when installing an app, the system will display a dialog win-
dow to alert users about the declared permissions of that
app. However, most users usually accept these permission
alerts without paying much attention at installation. Once
the installation is completed, the system will not warn users
in later invocations. Many Android malware take advantage
that most users are negligent and simply accept the permis-
sion alerts, so the malware can often obtain enhanced per-
missions (e.g., sending premium SMS messages to subscribe
chargeable service in the background).
2.2 Binder Mechanism
Binder is a specialized inter-process communication (IPC)
mechanism in Android. Since apps are running in their own
DVM sandboxes, they need to communicate through the
Binder so as to utilize others’ services. Figure 2 shows the
basic ﬂow of the Binder mechanism. For instance, if an
app wants to send an SMS message, it should ﬁrst (1) con-
tact the Service Manager which contains the information
of all registered services. The Service Manager will provide
a handler to communicate with the ISms Service which is
responsible for sending SMS messages. Once the app has
the handler, it can (2) ask the ISms Service to send SMS
messages, then (3) the ISms Service will process the re-
quest and send the message through the SMS Driver. Note
that all communications have to go through the Binder by
sending transactions with the required information (i.e., the
parcel). Transaction is a communication procedure between
two processes. In Android, the Binder transaction is used
to send service requests (which is represented by a transac-
tion code) to the corresponding processes. There are two
stages to complete a transaction. First, the Binder will de-
liver a data parcel to the destination process containing the
receiver information (i.e., transaction descriptor). Secondly,
after completing the request, the received process will save
the result in a reply parcel. In the above example of send-
ing an SMS message, there are two transactions and they
are completed in three steps. The ﬁrst transaction requests
for the ISms Service handler. The second transaction re-
quests for sending an SMS message.
In the second trans-
action, the data parcel contains the ISms Service descriptor
(com.android.internal.telephony.ISms) and information
Figure 2: Binder IPC mechanism.
(e.g., destination address and text content) for sending an
SMS message.
In the third step, the ISms Service sends
the request and saves the result in a reply parcel.
Note that this procedure is similar to the client-server
communication model. Apps are on the client side and they
are executing within their own sandboxes, while various ser-
vices are on the server side and they are managed by the
Service Manager. The System Services are a group of ser-
vices related to the Android system (e.g., Account Manager
Service, Battery Service and Network Management Service).
Moreover, an app can export its service to the public by
registering to the Service Manager. This special Binder
mechanism not only provides a ﬂexible inter-process com-
munication framework, but also isolates apps and services
so as to protect the system.
2.3 DVM & Native Development Kit
Dalvik Virtual Machine (DVM) is a special component in
the Android system. The apps are written in Java and com-
piled into a bytecode ﬁle (i.e., class ﬁle) with Android SDK.
These bytecodes will be converted to Dalvik executable ﬁles
(i.e., dex ﬁle) before installation. To instantiate an app,
the DVM will interpret and run the app in a diﬀerent vir-
tual machine. In order to integrate with other C/C++ na-
tive libraries, Android provides the Native Development Kit
(NDK) for developers to implement parts of the app using
native code such as C/C++. Moreover, Java Native In-
terface (JNI) provides a bridge between the Java code and
C/C++ code so developers can invoke native code easily.
Therefore, for the system, DVM can use native libraries
(e.g., OpenGL, libbinder, libc) to support its execution.
3. HIPS
In this section, we discuss three popular frameworks to
implement host-based intrusion prevention systems (HIPS):
(1) system patching, (2) application repackaging and (3) API
hooking.
In particular, we present their implementations,
strengths and weaknesses. We also demonstrate how to by-
pass a popular HIPS product.
3.1 System Patching
Before Android 4.3, there was no HIPS integrated in the
Android OS, and users have experienced various forms of
permission abuses since malware can take advantage of the
system loopholes to achieve permission escalation. Because
Android is an open source project, researchers and compa-
nies have developed patches for the Android system [53].
In fact, some third-party system images [7] have integrated
with these patches and they can manage the permission us-
age for each app. Some mobile phone vendors (e.g., Huawei)
also provide patched images for their phones and users can
install these modiﬁed images on their devices. In Android
4.3, Google also provides system patching. For example,
there is a hidden function called App Ops [45], which is a
form of HIPS and by using App Ops, one can disable cer-
tain permissions of an app. However, this App Ops has been
removed in Android 4.4.
To install these HIPS in Android, users need to update to
Android 4.3, or install the patched system image from their
vendors. However, as shown in the latest report [30], only
10% of Android phones are powered by Android 4.3 or 4.4.
Furthermore, if users want to install any patched image,
they have to ﬁnd the appropriate third-party system im-
ages which match with their phone models. For this reason,
many users often opt not to install these patches. These im-
ply that there are a large percentage of smartphones which
are vulnerable. Moreover, because one has to use App Ops
to disable permission before launching the apps, systems like
App Ops cannot prevent intrusions at runtime. Hence, even
with system patches, many Android phones are still vulner-
able to malware attack.
3.2 Application Repackaging
Android application package ﬁle (or apk ﬁle) is a zip ﬁle
which contains Dalvik executable ﬁle (classes.dex) and
other resource ﬁles (e.g., images or audio). An app needs to
declare its permission usage in the AndroidManifest.xml ﬁle
within the apk package so as to use the corresponding APIs.
Thus, to prevent an app using sensitive APIs, one can delete
certain permission declarations in the AndroidManifest.xml
and repackage it as a new apk ﬁle. App Shield [5] is an app
to manage app permission using this technique.
Since the Dalvik executable ﬁle is converted from the Java
bytecode, it is easy to be reversed to readable codes.
In
fact, several tools [14, 4, 25] provide assembling and disas-
sembling functions on dex ﬁles. Hence, one can disassemble
the dex ﬁle into readable codes, modify the program logic
and then assemble and repackage it into a new apk ﬁle. By
using this repackaging method, HIPS can be implemented
by inserting stubs around sensitive Android APIs so as to
perform policy enforcement without modifying the Android
system. For instance, if an app needs to get the current loca-
tion by utilizing the GPS function, it has to use the request
LocationUpdates API. So one can add code into the app to
check the GPS permission before invoking this API. Aura-
sium [54] and RetroSkeleton [21] are two projects using this
form of application repackaging to inspect sensitive APIs to
reinforce the Android permission policy.
Although application repackaging does not need to mod-
ify the Android system, there are some major drawbacks.
The ﬁrst major drawback is on incomplete security cover-
age. Since a function can be implemented by diﬀerent ap-
proaches (i.e., calling diﬀerent APIs), so it is possible to
miss policy enforcement unless we know all possible APIs
in realizing a function. For example, using the Java Reﬂec-
tion, one can invoke APIs and bypass the stubs. Secondly,
disassembling technique can only work on dex ﬁle.
If ap-
plication developers use native code (e.g., binary libraries