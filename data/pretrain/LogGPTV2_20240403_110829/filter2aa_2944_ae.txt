The set of threats that you consider relevant to your API is known as your threat model,
and the process of identifying them is known as threat modeling. 
DEFINITION
Threat modeling is the process of systematically identifying threats
to a software system so that they can be recorded, tracked, and mitigated.
There is a famous quote attributed to Dwight D. Eisenhower:
Plans are worthless, but planning is everything.
It is often like that with threat modeling. It is less important exactly how you do threat
modeling or where you record the results. What matters is that you do it, because the
process of thinking about threats and weaknesses in your system will almost always
improve the security of the API. 
 There are many ways to do threat modeling, but the general process is as follows:
1
Draw a system diagram showing the main logical components of your API.
2
Identify trust boundaries between parts of the system. Everything within a trust
boundary is controlled and managed by the same owner, such as a private data-
center or a set of processes running under a single operating system user.
3
Draw arrows to show how data flows between the various parts of the system.
4
Examine each component and data flow in the system and try to identify threats
that might undermine your security goals in each case. Pay particular attention
to flows that cross trust boundaries. (See the next section for how to do this.)
5
Record threats to ensure they are tracked and managed.
The diagram produced in steps one to three is known as a dataflow diagram, and an
example for a fictitious pizza ordering API is given in figure 1.6. The API is accessed
by a web application running in a web browser, and also by a native mobile phone app,
so these are both drawn as processes in their own trust boundaries. The API server
runs in the same datacenter as the database, but they run as different operating system
accounts so you can draw further trust boundaries to make this clear. Note that the
operating system account boundaries are nested inside the datacenter trust boundary.
For the database, I’ve drawn the database management system (DBMS) process sepa-
rately from the actual data files. It’s often useful to consider threats from users that
have direct access to files separately from threats that access the DBMS API because
these can be quite different.
IDENTIFYING THREATS
If you pay attention to cybersecurity news stories, it can sometimes seem that there are
a bewildering variety of attacks that you need to defend against. While this is partly
true, many attacks fall into a few known categories. Several methodologies have been
18
CHAPTER 1
What is API security?
developed to try to systematically identify threats to software systems, and we can use
these to identify the kinds of threats that might befall your API. The goal of threat
modeling is to identify these general threats, not to enumerate every possible attack.
One very popular methodology is known by the acronym STRIDE, which stands for:
 Spoofing—Pretending to be somebody else
 Tampering—Altering data, messages, or settings you’re not supposed to alter
 Repudiation—Denying that you did something that you really did do
 Information disclosure—Revealing information that should be kept private
 Denial of service—Preventing others from accessing information and services
 Elevation of privilege—Gaining access to functionality you’re not supposed to
have access to
Each initial in the STRIDE acronym represents a class of threat to your API. General
security mechanisms can effectively address each class of threat. For example, spoof-
ing threats, in which somebody pretends to be somebody else, can be addressed by
requiring all users to authenticate. Many common threats to API security can be elim-
inated entirely (or at least significantly mitigated) by the consistent application of a
few basic security mechanisms, as you’ll see in chapter 3 and the rest of this book.
LEARN ABOUT IT
You can learn more about STRIDE, and how to identify spe-
cific threats to your applications, through one of many good books about
threat modeling. I recommend Adam Shostack’s Threat Modeling: Designing for
Security (Wiley, 2014) as a good introduction to the subject.
Datacenter cluster
API user account
Smartphone
Web browser
Database user account
Web
app
Mobile
app
Pizza ordering
API
DBMS
Data
Internal processes
Data store
External process
Trust boundaries
Figure 1.6
An example dataflow diagram, showing processes, data stores and the flow of 
data between them. Trust boundaries are marked with dashed lines. Internal processes are 
marked with rounded rectangles, while external entities use squared ends. Note that we 
include both the database management system (DBMS) process and its data files as 
separate entities.
19
Security mechanisms
1.5
Security mechanisms
Threats can be countered by applying security mechanisms that ensure that particular
security goals are met. In this section we will run through the most common security
mechanisms that you will generally find in every well-designed API:
 Encryption ensures that data can’t be read by unauthorized parties, either when
it is being transmitted from the API to a client or at rest in a database or filesys-
tem. Modern encryption also ensures that data can’t be modified by an attacker.
 Authentication is the process of ensuring that your users and clients are who they
say they are.
 Access control (also known as authorization) is the process of ensuring that every
request made to your API is appropriately authorized.
 Audit logging is used to ensure that all operations are recorded to allow account-
ability and proper monitoring of the API.
 Rate-limiting is used to prevent any one user (or group of users) using all of the
resources and preventing access for legitimate users.
Figure 1.7 shows how these five processes are typically layered as a series of filters that
a request passes through before it is processed by the core logic of your API. As dis-
cussed in section 1.3.1, each of these five stages can sometimes be outsourced to an
external component such as an API gateway. In this book, you will build each of them
from scratch so that you can assess when an external component may be an appropri-
ate choice.
Pop quiz
3
What do the initials CIA stand for when talking about security goals?
4
Which one of the following data flows should you pay the most attention to when
threat modeling?
a
Data flows within a web browser
b
Data flows that cross trust boundaries
c
Data flows between internal processes 
d
Data flows between external processes
e
Data flows between a database and its data files
5
Imagine the following scenario: a rogue system administrator turns off audit log-
ging before performing actions using an API. Which of the STRIDE threats are
being abused in this case? Recall from section 1.1 that an audit log records who
did what on the system.
The answers are at the end of the chapter.
20
CHAPTER 1
What is API security?
1.5.1
Encryption
The other security mechanisms discussed in this section deal with protecting access to
data through the API itself. Encryption is used to protect data when it is outside your
API. There are two main cases in which data may be at risk:
 Requests and responses to an API may be at risk as they travel over networks,
such as the internet. Encrypting data in transit is used to protect against these
threats.
 Data may be at risk from people with access to the disk storage that is used for
persistence. Encrypting data at rest is used to protect against these threats.
TLS should be used to encrypt data in transit and is covered in chapter 3. Alternatives
to TLS for constrained devices are discussed in chapter 12. Encrypting data at rest is a
complex topic with many aspects to consider and is largely beyond the scope of this
book. Some considerations for database encryption are discussed in chapter 5. 
User
Clients
Web browser
Your API
Audit log
Authentication
Access control
Rate-limiting
Mobile app
Security controls
requests when the
API is overloaded.
Authentication ensures
users are who they
say they are.
An audit log records
who did what and when.
Access control decides
whether a request is
allowed or denied.
Rejected
requests
Encryption prevents data
being stolen or modiﬁed in
transit or at rest.
HTTPS
Application
logic
Rate-limiting rejects
Figure 1.7
When processing a request, a secure API will apply some standard steps. Requests and 
responses are encrypted using the HTTPS protocol. Rate-limiting is applied to prevent DoS attacks. 
Then users and clients are identified and authenticated, and a record is made of the access attempt 
in an access or audit log. Finally, checks are made to decide if this user should be able to perform this 
request. The outcome of the request should also be recorded in the audit log.
21
Security mechanisms
1.5.2
Identification and authentication
Authentication is the process of verifying whether a user is who they say they are. We
are normally concerned with identifying who that user is, but in many cases the easiest
way to do that is to have the client tell us who they are and check that they are telling
the truth. 
 The driving test story at the beginning of the chapter illustrates the difference
between identification and authentication. When you saw your old friend Alice in the
park, you immediately knew who she was due to a shared history of previous interac-
tions. It would be downright bizarre (not to mention rude) if you asked old friends for
formal identification! On the other hand, when you attended your driving test it was
not surprising that the examiner asked to see your driving license. The examiner has
probably never met you before, and a driving test is a situation in which somebody
might reasonably lie about who they are, for example, to get a more experienced
driver to take the test for them. The driving license authenticates your claim that you
are a particular person, and the examiner trusts it because it is issued by an official
body and is difficult to fake.
 Why do we need to identify the users of an API in the first place? You should always
ask this question of any security mechanism you are adding to your API, and the
answer should be in terms of one or more of the security goals that you are trying to
achieve. You may want to identify users for several reasons:
 You want to record which users performed what actions to ensure accountability.
 You may need to know who a user is to decide what they can do, to enforce con-
fidentiality and integrity goals. 
 You may want to only process authenticated requests to avoid anonymous DoS
attacks that compromise availability. 
Because authentication is the most common method of identifying a user, it is com-
mon to talk of “authenticating a user” as a shorthand for identifying that user via
authentication. In reality, we never “authenticate” a user themselves but rather claims
about their identity such as their username. To authenticate a claim simply means to
determine if it is authentic, or genuine. This is usually achieved by asking the user to
present some kind of credentials that prove that the claims are correct (they provide
credence to the claims, which is where the word “credential” comes from), such as pro-
viding a password along with the username that only that user would know. 
AUTHENTICATION FACTORS
There are many ways of authenticating a user, which can be divided into three broad
categories known as authentication factors:
 Something you know, such as a secret password
 Something you have, like a key or physical device
 Something you are. This refers to biometric factors, such as your unique finger-
print or iris pattern.
22
CHAPTER 1
What is API security?
Any individual factor of authentication may be compromised. People choose weak
passwords or write them down on notes attached to their computer screen, and they
mislay physical devices. Although biometric factors can be appealing, they often have
high error rates. For this reason, the most secure authentication systems require two
or more different factors. For example, your bank may require you to enter a pass-
word and then use a device with your bank card to generate a unique login code. This
is known as two-factor authentication (2FA) or multi-factor authentication (MFA).
DEFINITION
Two-factor authentication (2FA) or multi-factor authentication (MFA)
require a user to authenticate with two or more different factors so that a
compromise of any one factor is not enough to grant access to a system.
Note that an authentication factor is different from a credential. Authenticating with
two different passwords would still be considered a single factor, because they are both
based on something you know. On the other hand, authenticating with a password
and a time-based code generated by an app on your phone counts as 2FA because the
app on your phone is something you have. Without the app (and the secret key stored
inside it), you would not be able to generate the codes.
1.5.3
Access control and authorization
In order to preserve confidentiality and integrity of your assets, it is usually necessary
to control who has access to what and what actions they are allowed to perform. For
example, a messaging API may want to enforce that users are only allowed to read
their own messages and not those of anybody else, or that they can only send messages
to users in their friendship group. 
NOTE
In this book I’ve used the terms authorization and access control inter-
changeably, because this is how they are often used in practice. Some authors
use the term access control to refer to an overall process including authentica-
tion, authorization, and audit logging, or AAA for short.
There are two primary approaches to access control that are used for APIs:
 Identity-based access control first identifies the user and then determines what they
can do based on who they are. A user can try to access any resource but may be
denied access based on access control rules.
 Capability-based access control uses special tokens or keys known as capabilities to
access an API. The capability itself says what operations the bearer can perform
rather than who the user is. A capability both names a resource and describes
the permissions on it, so a user is not able to access any resource that they do
not have a capability for.
Chapters 8 and 9 cover these two approaches to access control in detail.
23
Security mechanisms
It is even possible to design applications and their APIs to not need any access control
at all. A wiki is a type of website invented by Ward Cunningham, where users collabo-
rate to author articles about some topic or topics. The most famous wiki is Wikipedia,
the online encyclopedia that is one of the most viewed sites on the web. A wiki is
unusual in that it has no access controls at all. Any user can view and edit any page,
and even create new pages. Instead of access controls, a wiki provides extensive version
control capabilities so that malicious edits can be easily undone. An audit log of edits
provides accountability because it is easy to see who changed what and to revert those
changes if necessary. Social norms develop to discourage antisocial behavior. Even so,
large wikis like Wikipedia often have some explicit access control policies so that arti-
cles can be locked temporarily to prevent “edit wars” when two users disagree strongly
or in cases of persistent vandalism.
1.5.4
Audit logging
An audit log is a record of every operation performed using your API. The purpose of
an audit log is to ensure accountability. It can be used after a security breach as part of
a forensic investigation to find out what went wrong, but also analyzed in real-time by
log analysis tools to identity attacks in progress and other suspicious behavior. A good
audit log can be used to answer the following kinds of questions:
 Who performed the action and what client did they use?
 When was the request received?
 What kind of request was it, such as a read or modify operation?
 What resource was being accessed?
 Was the request successful? If not, why?
 What other requests did they make around the same time?
Capability-based security
The predominant approach to access control is identity-based, where who you are
determines what you can do. When you run an application on your computer, it runs
with the same permissions that you have. It can read and write all the files that you
can read and write and perform all the same actions that you can do. In a capability-
based system, permissions are based on unforgeable references known as capa-
bilities (or keys). A user or an application can only read a file if they hold a capability
that allows them to read that specific file. This is a bit like a physical key that you
use in the real world; whoever holds the key can open the door that it unlocks. Just
like a real key typically only unlocks a single door, capabilities are typically also
restricted to just one object or file. A user may need many capabilities to get their
work done, and capability systems provide mechanisms for managing all these capa-
bilities in a user-friendly way. Capability-based access control is covered in detail in
chapter 9.
24
CHAPTER 1
What is API security?
It’s essential that audit logs are protected from tampering, and they often contain per-
sonally identifiable information that should be kept confidential. You’ll learn more about
audit logging in chapter 3.
DEFINITION
Personally identifiable information, or PII, is any information that
relates to an individual person and can help to identify that person. For
example, their name or address, or their date and place of birth. Many coun-
tries have data protection laws like the GDPR, which strictly control how PII
may be stored and used.
1.5.5
Rate-limiting
The last mechanisms we will consider are for preserving availability in the face of mali-
cious or accidental DoS attacks. A DoS attack works by exhausting some finite resource
that your API requires to service legitimate requests. Such resources include CPU time,
memory and disk usage, power, and so on. By flooding your API with bogus requests,
these resources become tied up servicing those requests and not others. As well as send-
ing large numbers of requests, an attacker may also send overly large requests that con-
sume a lot of memory or send requests very slowly so that resources are tied up for a
long time without the malicious client needing to expend much effort.
 The key to fending off these attacks is to recognize that a client (or group of cli-
ents) is using more than their fair share of some resource: time, memory, number of
connections, and so on. By limiting the resources that any one user is allowed to con-
sume, we can reduce the risk of attack. Once a user has authenticated, your applica-
tion can enforce quotas that restrict what they are allowed to do. For example, you
might restrict each user to a certain number of API requests per hour, preventing
them from flooding the system with too many requests. There are often business rea-
sons to do this for billing purposes, as well as security benefits. Due to the application-
specific nature of quotas, we won’t cover them further in this book.
DEFINITION
A quota is a limit on the number of resources that an individual
user account can consume. For example, you may only allow a user to post
five messages per day.
Before a user has logged in you can apply simpler rate-limiting to restrict the number
of requests overall, or from a particular IP address or range. To apply rate-limiting, the
API (or a load balancer) keeps track of how many requests per second it is serving.
Once a predefined limit is reached then the system rejects new requests until the rate
falls back under the limit. A rate-limiter can either completely close connections when
the limit is exceeded or else slow down the processing of requests, a process known as
throttling. When a distributed DoS is in progress, malicious requests will be coming
from many different machines on different IP addresses. It is therefore important to
be able to apply rate-limiting to a whole group of clients rather than individually. Rate-
limiting attempts to ensure that large floods of requests are rejected before the system
is completely overwhelmed and ceases functioning entirely.
25
Answers to pop quiz questions
DEFINITION
Throttling is a process by which a client’s requests are slowed
down without disconnecting the client completely. Throttling can be achieved
either by queueing requests for later processing, or else by responding to the
requests with a status code telling the client to slow down. If the client doesn’t
slow down, then subsequent requests are rejected.
The most important aspect of rate-limiting is that it should use fewer resources than
would be used if the request were processed normally. For this reason, rate-limiting is
often performed in highly optimized code running in an off-the-shelf load balancer,
reverse proxy, or API gateway that can sit in front of your API to protect it from DoS
attacks rather than having to add this code to each API. Some commercial companies
offer DoS protection as a service. These companies have large global infrastructure
that is able to absorb the traffic from a DoS attack and quickly block abusive clients.
 In the next chapter, we will get our hands dirty with a real API and apply some of
the techniques we have discussed in this chapter.
Answers to pop quiz questions
1
c, e, and f. While other aspects of security may be relevant to different APIs,
these three disciplines are the bedrock of API security.
2
d. An API gateway is a specialized type of reverse proxy.
3
Confidentiality, Integrity, and Availability.
4
b. Data flows that cross trust boundaries are the most likely place for threats to
occur. APIs often exist at trust boundaries.
5
Repudiation. By disabling audit logging, the rogue system administrator will later