However since the commitments are secure, and only the
chosen edge is opened, the protocol is computational ZK.
However it is not forward deniable8.
Indeed the prover’s
state contains the openings of the commitments, and thus
the prover can produce information showing that a real tran-
script is indeed real (it contains a real 3-coloring).
A after executing λ on input m.
8Although we deﬁned forward deniability in the context of
authentication, the deﬁnition can be extended to any two-
party protocol.
This problem is shared by all the computational ZK pro-
tocols we know and thus shared by any protocol that proves
deniability by reduction to such problems. In the full ver-
sion, we show a deniable authentication protocol whose se-
curity is based on a reduction to a NP-complete language,
and for that reason not forward deniable.
The only way in which forward deniability could be
achieved is if Alice “forgets” about how she computed the
commitments. I.e. erases her internal state (apart from her
secret key) after the execution of the protocol. From the
argument given in the previous Remark, it would appear in
Alice’s interest to do so. However this makes the assumption
on the model that such erasures are indeed possible. This is
a very strong assumption to make (e.g. see [18] for a survey
on the diﬃculty of erasing data). Thus while we assume that
Alice behaves honestly during the protocol (and has all the
motivation to do so) we also assume that it is hard for her
to erase traces of her past executions of the protocol from
her memory.
3. FIRST CLASS OF SOLUTIONS
Multi-trapdoor Commitment Schemes. A commit-
ment is the digital equivalent of a “sealed envelope”. A party
commits to a value by placing it into a sealed envelope (this
is the “committing phase”), so that the same party may
later reveal the value by opening the envelope (the “open-
ing phase”). Further, the envelope cannot be opened by
another party before the opening phase (this is known as
“secrecy” or “hiding” property) and its content cannot be
altered (this is known as “binding” property).
A Trapdoor Commitment Scheme (TCS) is a commitment
scheme where there exists a trapdoor the knowledge of which
allows to open a commitment in any possible way (we will
refer to this also as equivocate the commitment). Obvi-
ously this trapdoor should be hard to compute.
In this
way the privacy property of the commitment is information-
theoretically guaranteed (i.e., given the commitment the re-
ceiver, even with inﬁnite computing power, cannot guess the
committed message better than at random). On the other
hand, the binding property can be only be computational
(for the existence of the trapdoor).
A Multi-Trapdoor Commitment Scheme,
introduced
in [12], consists of a family of TCS with a specially deﬁned
binding property. He we are going to introduce a deﬁnition
of Adaptive Multi-Trapdoor Commitment (AMTC) Scheme.
It is inspired by the notion of Simulation-Sound Commit-
ments9 (SSC) in [11, 24]. In the full version of this paper,
we elaborate on the diﬀerences between this deﬁnition and
the deﬁnition of SSC in [24].
An Adaptive Multi-Trapdoor Commitment
(AMTC)
Scheme consists of ﬁve algorithms: CKG, Sel, Tkg, Com and
Equiv with the following properties:
• CKG is the master key generation algorithm: given a
security parameter it outputs a pair (PK, TK), where
PK is the master public key associated with the family
of commitment schemes and TK is the master trapdoor
key;
9They use the name of Simulation-Sound Trapdoor Com-
mitments (SSTC) for their schemes but we prefer to not use
the attribute “trapdoor” for some observations present only
in the full version of this paper.
• Sel is the algorithm that select a particular scheme in
the family: given PK it outputs a pk that identiﬁes one
of the schemes;
• Tkg is the algorithm that permit the generation of the
trapdoors: given the triple (PK, pk, TK) it outputs the
trapdoor information tk relative to pk;
• Com is the commitment algorithm: on input PK, pk
and a message M it outputs C(M ) = Com(PK, pk, M,
R) where R is the coin tosses. To open a commitment
the sender reveals (M, R) and the receiver veriﬁes us-
ing Com to recompute the commitment;
• Equiv is the algorithm that permit to open a commit-
ment in any possible way given another opening and a
trapdoor key (the master or the speciﬁc one): it takes
in input PK, pk, a commitment C of a message M , the
opening (M, R), a diﬀerent message M 0
6= M and a
trapdoor T ; if T = TK or T = tk then Equiv out-
puts a R0, uniformly chosen among all R0 such that
C = Com(PK, pk, M 0, R0).
The notion of AMTC requires the following security prop-
erties:
Information Theoretic Security For every message
pair (M, M 0) the distributions of the commitments
C(M ) and C(M 0) are statistically close;
AMTC Secure Binding Consider the following game:
the adversary A is given a public key PK for a multi-
trapdoor commitment family, generated with the same
distribution as the ones generated by CKG. Also, A is
given access to an oracle EQ (for Equivocator). This or-
acle gets as input string (C = Com(PK, pk, M, R), M,
R, M 0) with message M 0 6= M and outputs a R0 such
that C = Com(PK, pk, M 0, R0) (that is the oracle cre-
ates openings with an arbitrary message M 0). The
adversary A wins if it outputs (pk, M, R, M 0, R0) such
that Com(PK, pk, M, R) = Com(PK, pk, M 0, R0), M 0 6=
M and pk is diﬀerent from all the public keys used
during the accesses to the oracle EQ (in other words,
A must never have used the oracle EQ to equivocate a
commitment on the scheme with public key pk). We
requires that for all the eﬃcient algorithms A, the
probability that A wins is negligible in the security
parameter.
We are going to present in the next section an eﬃcient
authentication method based on the notion of AMTC. This
notion can be weakened, obtaining the static variant intro-
duced by Gennaro in [12]. We shall refer to it as (Static)
Multi-Trapdoor Commitment (MTC). Brieﬂy, in the MTC
we have a diﬀerent Binding game where the adversary must
choose the public keys to use with the oracle before seeing
the master public key PK. In the full version of this work,
we introduce some alternative MTC-based authenticators.
For the weaker notion of MTC, these methods are less ef-
ﬁcient than AMTC-based one. On the other side, known
MTC schemes are more eﬃecient than known AMTC’s.
3.1 AMTC-based authenticators
Here we present a deniable authenticator λAMTC based on
the notion of Adaptive Multi-Trapdoor Commitments
(AMTC). First we prove that it is an authenticator then
we verify the deniability of the scheme.
Let’s start from the initialization function I of the pro-
tocol λAMTC . For each party Pi, the master key generation
algorithm of the AMTC scheme is invoked obtaining the
pair (PKi, TKi). Further, a hash function Hi is chosen from
the family of UOWHFs such that it outputs strings with the
same distribution of the algorithm Sel10. The public key
of Pi is P Ki = (PKi, Hi) and the secret key is the master
trapdoor key TKi. So, the public information I0 is simply
the collection of all the public keys:
Theorem 3. If the underlying commitment scheme is an
AMTC, then protocol λAMTC is a secure message authenti-
cator.
Implementations. The number-theoretic constructions of
simulation-sound commitments in [24] can be shown to be
AMTC’s and thus can be used in our protocol. They are
based on the Strong RSA assumption and the security of the
DSA signature scheme. We can’t however use the generic
construction based on one-way function as that does not
satisfy the notion of AMTC.
I0 = P K1, . . . , P Kn
3.1.1 Deniability
and the secret information of the player Pi is Ii = TKi.
Next, when activated, within party Pi and with external
request to send message m to party Pj , protocol λAMTC in-
vokes a two-party sub-protocol ˆλAMTC between Pi and Pj .
Since the sub-protocol ˆλAMTC involves only two parties, we
use the names A and B instead of Pi and Pj for simplicity.
In this context, with (PK, H) and TK we indicate the public
and secret keys of A.
The protocol ˆλAMTC works as follow: ﬁrst A uses the hash
function H to select a speciﬁc scheme from the family of
AMTC schemes in the following way: pk = H(m, B) where
m is the message to send and B is the identity of the receiver.
After that a random string a is selected from the space of
the messages of the AMTC scheme and another random
string r is chosen. The commitment algorithm associated to
the public key pk is used to commit the string a with coin
tosses r obtaining C = Com(PK, pk, a, r). Finally, A sends
‘message:m, C’ to B and outputs ‘A sent message m to
B’.
Upon receipt of ‘message:m, C’ from A, party B chooses
a random string c (for challenge) from the space of the mes-
sages of the AMTC scheme and sends it to A as ‘challenge:
m, c’.
Upon receipt of ‘challenge:m, c’ from B, party A uses
the master trapdoor key TK to equivocate the commitment
C so that the message committed becomes the challenge
string c. He computes r0 = Equiv(PK, pk, C, a, r, c, TK) so
that (c, r0) becomes another opening of the commitment C
(remember that the ﬁrst opening is (a, r)). A replies to B
with ‘reply:m, r0’.
When B receives the reply, he simply checks if the pair
(c, r0) is an opening for the commitment C, that is if C =
Com(PK, pk, c, r0). Note that B can compute the speciﬁc
public key pk by himself using the hash function H.
If
the check is correct, then B accepts m and outputs ‘B
received m from A’. Otherwise, B rejects this message
and terminates this invocation of ˆλAMTC
11. Note that the
length of strings to commit a, c should be long enough so
it’s infeasible to guess them (for example, 80 bits). A picto-
rial representation of a complete invocation of ˆλAMTC for a
message m can be seen in ﬁgure 1 at the end of the paper.
10This hash function is related to the multi-trapdoor com-
mitment scheme, but for all the actually known AMTC and
MTC schemes such kind of functions exist and they are ef-
ﬁciently computable.
11One does not need to send the message m in each of the
ﬂows of the protocol. A can send it in the ﬁrst ﬂow only, or
even in the last ﬂow only.
λAMTC is deniable for an honest receiver. Indeed in that
case the simulator could: (i) compute the public key pk
associated to the particular commitment scheme of the ses-
sion as pk = H(m, B); (ii) choose at random the challenge
string c and the randomness r0; (iii) compute the commit-
ment C = Com(PK, pk, c, r0).
But for a dishonest veriﬁer the way in which λAMTC au-
thenticates the messages is actually not deniable. Here is
a strategy from a dishonest veriﬁer B who tries to get a
transcript that A can’t later deny. B could compute c =
hash(C) for some complicated hash function hash after see-
ing the original commitment C. Now the above simulator
will be in trouble as it chooses c before seeing C.
We modify the protocol in order to make it deniable. We
assume that the public key of A contains the public key t
for a regular trapdoor commitment scheme. The idea is to
have B use t to commit to the challenge in advance. The
protocol appears in Figure 2.
Theorem 4. Protocol Den-ˆλAMTC is a forward deniable
authenticator if used sequentially.
Remark: Concurrent Executions. First we point out that
the modiﬁed protocol Den-λAMTC remains an authenticator
even if used in a concurrent setting. This is remarkable, as
we need to use rewinding in the proof of its unforgeability.
On the other hand the rewinding in the proof of deniability is
more troublesome and in a concurrent setting the adversary
can create a scheduling which will result in a running time
exponential in the number of open sessions (see [10]). Thus
we can only use the protocol with a logarithmic number of
such sessions open at any time, and this can be enforced
by using timing assumptions as in [10]. Notice that if the
parties are not concerned about deniability then unbounded
number of executions can be performed concurrently.
4. SECOND SOLUTION
Here we show an authenticator (later proven deniable)
whose security is based on the diﬃculty of the DDH problem
in some groups.
Number Theory. In the following we denote with p, q two
prime numbers such that q|(p−1). We consider the subgroup
p of order q and let g1, g2 be two generators12 for
Gq of Z ∗
Gq. All computations are mod p unless otherwise noted.
We are going to assume that the well-known Decisional
Diﬃe-Hellman Assumption holds in Gq, namely that the
12The reciprocal discrete-logs of the two generators must be
secret for security reasons.
DDH problem is diﬃcult on this group. There are several
equivalent formulations of the DDH problem. Let
the message for A is ‘challenge:m, u1, u2, h1’.14 Upon re-
ceipt of ‘challenge:m, u1, u2, h1’ from B, party A:
= {(g1, g2, gr
DDH
Random = {(g1, g2, gr1
1, gr
1 , gr2
2) | r∈RZq} ,
2 ) | r1, r2∈RZq}
The assumption that we use claims that no polynomial-time
algorithm given as input the four values (g1, g2, u1, u2) can
decide if it was drawn from DDH or Random.
Hash functions. We shall use two kinds of hash functions.
First we will denote with H a function chosen randomly in
a set of Universal One-way hash functions (UOWHFs) [26].
Also we consider a hash function H : Gq → {0, 1}2k,
where k is a security parameter, such that 2−k is consid-
ered negligible. H must have the following property: the
distribution of H(x) when x∈RGq should be indistinguish-
able from the uniform distribution over {0, 1}2k. An exam-
ple of such a function is a function H randomly chosen over
a set of 2-universal family [5]:
in this case assuming that
|q| > 2k + 2δ we have that the distribution {H(x)}x∈RGq
is 2−δ statistically close to the uniform one over {0, 1}2k.
To avoid choosing such a large q, one could use a crypto-
graphic hash function like SHA1, and explicitly assume that
the distribution {SHA1(x)}x∈RGq is computationally indis-
tinguishable from the uniform one. In the future we shall
denote with dHe(x) the ﬁrst k-bits of H(x) and with bHc(x)
the remaining k-bits.
The protocol. We construct the DDH-based authentica-
tor λDDH: the choice of the primes p, q and of the generators
g1, g2 can be seen as the ﬁrst phase of the initialization13
function I of the protocol λDDH. To conclude the initial-
ization phase, for each party a pair of keys (P K, SK) is
generated as follows. Consider a generic party Pi: random
elements x1, x2, y1, y2 ∈ Zq are chosen and the group ele-
ments
c = gx1
1 gx2
2
, d = gy1
1 gy2