### 深度分析使用高级反调试和反hook的Android Rootnik Malware，Part II：Java层分析
原作者：Kai Lu  
译者：[BlackTrace](http://www.kejidi.net)  
> [原文链接](https://blog.fortinet.com/2017/01/24/deep-analysis-of-android-rootnik-malware-using-advanced-anti-debug-and-anti-hook-part-ii-analysis-of-the-scope-of-java)

在第一部分中，我们深入分析了恶意软件的native层，并成功解密了第二个dex文件。在本篇中，我们将继续探讨该解密后的dex文件。

## IV. 第二个dex文件

下图展示了通过multidex方案动态加载的解密后的第二个dex文件。它以jar文件格式存在。

**图25. 解密后的第二个apk文件包含dex文件**

解压`decrypt.dump`后，可以看到名为`classes.dex`的文件。

**图26. 名为classes.dex**

接下来，我们对这个`classes.dex`文件进行详细分析。

**图27. 反编译第二个dex文件和AndroidManifest.xml文件**

从上图可以看出，`classes.dex`是名为“File Helper”的恶意应用程序的主要逻辑。

### FileManagerActivity类中的OnCreate方法

**图28. FileManagerActivity类里的OnCreate方法**

**图29. initadv()方法**

**图30. Nws类**

在`Nws`类中的`getStart`方法用于启动`com.hg.mer.PG`服务。下面是`PG`服务类的定义：

**图31. service com.hg.mer.PG类**

当`startService()`方法被调用时，会依次调用`OnCreate`方法和`OnHandleIntent`方法。在上图中，我们用红色标记了四行关键代码，接下来将逐一分析这些代码。

#### 1. `readDex()` 方法

**图32. readDex()方法**

根据我的分析，`Sheu`类是base64的实现类，因此`Sheu.decode("S0suYmlu")`的结果是字符串“KK.bin”。程序随后打开位于assets文件夹中的`KK.bin`文件，并读取其内容以提取有用信息。

**图33. assets文件夹里的KK.bin文件**

程序从`KK.bin`文件的末尾提取了一些信息。有七个使用base64编码的字符串存储在一个数组列表中。`getAppid()`方法用于解码这些字符串。

**图34. 解码字符串**

这七个字符串解码后的结果如下：
- `Pls.Kbin: wddex.jar`
- `Pls.OI: xdt`
- `Pls.PL: com.svq.cvo.Rtow`
- `Pls.Jr: getDex`
- `Pls.Wv: sgdex`
- `Pls.As: dos.jar`
- `Pls.NQ: KK.bin`

#### 2. `dxfile()` 方法

**图35. dxfile()方法**

**图36. UnZipFolder()方法**

`Pls.UnZipFolder()`方法从`KK.bin`中提取加密内容。这部分加密内容从偏移量0x20到0x1CDB，并保存到`/data/data/com.web.sdfile/files/wddex.jar`。这部分内容使用DES算法加密。

`dxfile()`方法解密`/data/data/com.web.sdfile/files/wddex.jar`的内容，并将其写入`/data/data/com.web.sdfile/app_sgdex/dos.jar`。

#### 3. `DexClassLoader()` 方法

`DexClassLoader`方法的构造如下：
- `dexPath` 参数值为 `/data/data/com.web.sdfile/app_sgdex/dos.jar`
- `optimizedDirectory` 参数值为 `/data/data/com.web.sdfile/app_xdt`

此方法用于从`.jar`和`.apk`类型的文件内部加载`classes.dex`文件。通过这种方式，可以执行非安装的程序代码作为程序的一部分运行。优化后的dex文件将写入`/data/data/com.web.sdfile/app_xdt`目录中的`dos.dex`。

在从`/data/data/com.web.sdfile/app_sgdex/dos.jar`加载完成后，程序将删除该文件。

#### 4. 动态调用 `com.svq.cvo.Rtow` 类的 `getDex()` 方法

接下来，让我们检查一下`dos.dex`。

**图37. 反编译dos.dex**

**图38. 类 `com.svq.cvo.Rtow` 的 `getDex` 方法**

**图39. 类 `Dwol` 的结构**

在`com.kdw.xoa.Dwol`类的结构中，一个新的文件`mda.ico`被创建到`/data/data/com.web.sdfile/files/`目录中。这里调用了`downloadFile`方法从远程服务器`http://gt[.]rogsob[.]com/stmp/ad.png`下载payload，并将其保存到`/data/data/com.web.sdfile/files/mda.ico`。该payload使用DES算法加密。

**图40. downloadFile方法**

**图41. initData()方法**

下面是`silentInstall`方法的定义。

**图42. silentInstall方法**

上图中的五处红色标记解释如下：
a. `Dwol`类的`dxfile`方法用于解密`/data/data/com.web.sdfile/files/mda.ico` payload。解密后的payload保存到`/data/data/com.web.sdfile/app_snex/dkt.jar`。
b. `Ngss`类的`upZipFile`方法用于解压解密后的payload `dkt.jar` 到`/data/data/com.web.sdfile/files/`目录。它包含以下文件：
   **图43. payload的文件**
c. 解压完成后，删除`/data/data/com.web.sdfile/app_snex/dkt.jar`、`/data/data/com.web.sdfile/files/mda.ico`文件以及`/data/data/com.web.sdfile/app_snex/`目录。
d. 重命名`/data/data/com.web.sdfile/files/`目录中的`classes.dex`为`wsh.jar`。
e. 动态加载`/data/data/com.web.sdfile/files/wsh.jar`中的类，并优化`app_outdex`目录，将dex缓存文件存储为`wsh.dex`。
f. 调用`com.rootdex.MainActivity`类的`getDex`方法。

接下来，我们深入看看`wsh.dex`，它主要用于运行root工具以获取设备的root权限，并将应用安装到系统app文件夹中。

**图44. 反编译wsh.dex**

**图45. 类 `com.rootdex.MainActivity` 的 `getDex` 方法**

a. `GetActivie`方法用于收集设备信息并将这些信息发送到远程服务器`http://grs[.]gowdsy[.]com:8092/active.do`。以下是捕获的网络包：
   **图46. 发送收集的信息到远程服务器**
b. 检查`/data/data/com.web.sdfile/files/`目录中的文件，并将它们的文件名添加到数组列表中，准备下一步的root操作。
c. 在设备上运行root工具。

接下来，在`run()`方法中调用`HandleRoot()`方法。

**图48. copyRootFile方法**

通过上述步骤，恶意软件能够成功获取设备的root权限并执行进一步的操作。