接上篇：[深度分析使用高级反调试和反hook的Android Rootnik Malware，Part
I：在Native层调试](http://paper.seebug.org/204/)
原作者：Kai Lu
译者：[BlackTrace](http://www.kejidi.net)
> [原文链接](https://blog.fortinet.com/2017/01/24/deep-analysis-of-android-> rootnik-malware-using-advanced-anti-debug-and-anti-hook-part-ii-analysis-of-> the-scope-of-java)
>
> 在Part
> I中，我们分析了native层和获得了解密后的第二个dex文件，在PartⅡ中我们将继续分析它。为了保持文章的连续性，我们将继续保持从part
> I中的章节序号。
## IV. 第二个dex文件
下图是解密后的文件，它是jar文件格式。这个就是通过multidex方案动态加载的第二个dex文件
图25. 解密后的第二个apk文件包含dex文件
解压"decrypt.dump",你会看见名为"classes.dex"的文件在这个文件夹里。
图26. 名为classes.dex
接下来，我们分析这个classes.dex
图27. 反编译第二个dex文件和AndroidManifest.xml文件
从上图，我们可以看出classes.dex是名为“file Helper”的恶意app的主要逻辑。
下图是com.sd.clip.activity. FileManagerActivity类里的"OnCreate"方法
图28. FileManagerActivity类里的OnCreate方法
图29. initadv()方法
图30. Nws类
在Nws类中的getStart方法是用来开启com.hg.mer.PG服务。下图是类PG的定义
图31. service com.hg.mer.PG类
在startService()方法被调用后，OnCreate方法被调用，紧接着是调用OnHandleIntent()方法。在上图中，我们用红色标记了4行关键代码，我们接下来依次分析这4行关键代码。
### 1\. readDex()
下图是readDex()方法的代码片段
图32. readDex()方法
基于我的分析，类Sheu是base64的实现类，因此Sheu.decode("S0suYmlu")的结果是字符串“KK.bin”。接着，程序打开在程序的assets文件夹里的KK.bin，并且读取它的内容，提取一些有用的信息。
下面是KK.bin的文件内容
图33. assets文件夹里的KK.bin文件
这个程序从KK.bin文件的结尾提取了一下信息。有7个使用base64编码的字符串存储在数组列表中。这里的getAppid()方法就是用来解码这些字符串的。
图34. 解码字符串
这7个字符串解码后的结果如下
> Pls.Kbin: wddex.jar
>
> Pls.OI: xdt
>
> Pls.PL: com.svq.cvo.Rtow
>
> Pls.Jr: getDex
>
> Pls.Wv: sgdex
>
> Pls.As: dos.jar
>
> Pls.NQ: KK.bin
### 2.dxfile()
下面是dxfile()方法的代码片段
图35. dxfile()方法
图36. UnZipFolder()方法
方法
Pls.UnZipFolder()提取来自KK.bin的加密内容。这部分加密内容开始于KK.bin文件偏移0x20到偏移0x1CDB，这部分内容被保存到/data/data/com.web.sdfile/files/wddex.jar。这部分内容是使用DES算法加密的。
这个程序在dxfile()解密/data/data/com.web.sdfile/files/wddex.jar文件的内容到/data/data/com.web.sdfile/app_sgdex/dos.jar文件。
### 3.DexClassLoader()
这个方法的构造如下 
在这个方法的调用，形参dexPath的值是“/data/data/com.web.sdfile/app_sgdex/dos.jar”，形参optimizedDirectory
的值是“/data/data/com.web.sdfile/app_xdt”。
这个方法是用来从.jar和.apk类型的文件内部加载classes.dex文件。通过这种方式可以用来执行非安装的程序代码，作为程序的一部分进行运行。优化后的dex文件写入文件夹
data/data/com.web.sdfile/app_xdt中的dos.dex。
在从/data/data/com.web.sdfile/app_sgdex/dos.jar加载完之后，这个程序将删除这个文件。
### 4.动态调用类com.svq.cvo.Rtow的getDex()方法
接下来，让我们检查一下dos.dex
图37. 反编译dos.dex
下图是类class com.svq.cvo.Rtow的getDex方法：
图38. 类class com.svq.cvo.Rtow的getDex方法
图39. 类Dwol的结构
在类com.kdw.xoa.Dwol的结构中，有一个新文件mda.ico被创建到/data/data/com.web.sdfile/files/文件夹中。这里，它是调用downloadFile方法去远程服务器[http://gt[.]rogsob[.]com/stmp/ad.png]()下载payload，并把payload保存到/data/data/com.web.sdfile/files/mda.ico。这个payload使用的是DES算法加密。
图40. downloadFile方法
图41. initData()方法
下面是silentInstall方法的定义。 
图42. silentInstall方法
上图中的5处红色的标记解释依次如下。
a.
类Dwol的方法dxfile是被用来解密/data/data/com.web.sdfile/files/mda.ico这个payload的。这个解密后的payload保存到了/data/data/com.web.sdfile/app_snex/dkt.jar。
b. 类Ngss的upZipFile方法是被用来解压解密后的payload dkt.jar到
/data/data/com.web.sdfile/files/ 文件夹中。它包含以下文件：
图43.payload的文件
c. 解压完后，它会删除 /data/data/com.web.sdfile/app_snex/dkt.jar 和
/data/data/com.web.sdfile/files/mda.ico 这两个文件和
/data/data/com.web.sdfile/app_snex/ 这个目录。
d. 重命名 /data/data/com.web.sdfile/files/ 文件夹里的 classes.dex 为wsh.jar。
e. 动态加载/data/data/com.web.sdfile/files/wsh.jar里的classes，并且优化app_outdex
目录，存储这个dex缓存文件到wsh.dex。
f. 调用类 com.rootdex.MainActivity 类的getDex方法。
接下来，我们深入的看看这个wsh.dex，它主要运行root工具去root设备并且安装应用到系统app文件夹里。
图44. 反编译wsh.dex
下面是类com.rootdex.MainActivity的getDex方法的定义。
图45. 类com.rootdex.MainActivity的getDex方法
a.
方法GetActivie是用来收集设备信息并把这些信息发送到远程服务器上。远程服务器的URL是[http://grs[.]gowdsy[.]com:8092/active.do]()。下面是这个操作的捕获的包：
图46. 发送收集的信息到远程服务器
b. 检查一下文件是否存在于 /data/data/com.web.sdfile/files/
文件夹里，并把他们的文件名字加到数组列表中，用来准备下一步的ruut设备。
c. 在这个设备上运行root工具。
接下来，在run()方法里的HandleRoot()方法被调用。
方法。
下面是copyRootFile方法的关键代码片段。
图48. copyRootFile方法