```
然后，我们将使用 netstat 显示活动端口:
![Figure 3.18 – Host netstat showing port 8080 is not in use ](img/Fig_3.17_B15514.jpg)
图 3.18–主机 netstat 显示端口 8080 未被使用
如您所见，主机上唯一打开的端口是 SSH 自容器停止以来，港口`8080`已经关闭。
## 使用桥接网络暴露端口
似乎使用`host network`选项使得暴露端口变得容易，因为你不需要实际做任何事情来暴露它们。这在最初看起来很有吸引力，但是如果您在一个主机上运行多个容器，并且多个容器被配置为在同一个端口上运行，例如我们的 NGINX 容器的端口 8080，由于端口冲突，您将被限制在单个容器中。
当一个选项看起来更容易时，它通常不太健壮或不太可配置，这就是为什么它在开始时看起来更容易。这是使用主机网络公开端口与桥接网络公开端口的情况，但是一旦您理解了我们如何以及为什么使用桥接网络公开端口，您就会明白为什么它提供了更好的全方位解决方案。
当您想要公开使用桥接网络的容器上的端口时，您只需要指定启动容器时要打开的端口。如果您有多个网桥，您还需要提供网络名称，但是在我们的示例中，我们假设您使用的是内置网桥网络。
在 Docker 中公开端口时，需要使用`incoming port:destination port`语法提供传入(Docker 主机)端口和目的(容器)端口。通常情况下，为了简单起见，数字是相同的，但是在的场景中，可能需要使用不同的端口。
如果您只为目的地提供一个端口，将会采用 TCP 连接。您可能需要为容器公开 UDP 端口，要将端口公开为 UDP 端口，只需将`/udp`添加到目的端口分配中。所以，你的语法会变成`incoming port:destination port/udp`。
使用我们的示例 web 服务器，我们将使用端口`8080`上的默认网桥监听启动容器，使用带有端口`-p`选项的`docker run`命令；也就是`docker run -p 8080:8080 -p 8443:8443`:
![Figure 3.19 – Exposing port 8080 ](img/Fig_3.18_B15514.jpg)
图 3.19–暴露端口 8080
为了验证容器是否正在运行，我们将使用`docker ps`命令并注意`PORTS`列，该列显示了容器的映射端口:
![Figure 3.20 – docker ps output showing assigned ports ](img/Fig_3.19_B15514.jpg)
图 3.20–显示分配端口的 docker ps 输出
在这里，我们可以看到容器正在运行，并且我们已经将传入的主机端口`8080`和`8443`映射到容器端口`8080`和`8443`。在任何接口(0.0.0.0)上对`8080`和`8443`上的 Docker 主机的任何传入请求都将被转发到容器。
就像我们使用主机网络时一样，我们可以看到主机正在使用 netstat 监听`8080`和`8443`:
![Figure 3.21 – Host netstat showing port 8080 ](img/Fig_3.20_B15514.jpg)
图 3.21–主机 netstat 显示端口 8080
您的项目现在需要另一个开发站点的第二个 web 服务器，并且您想要部署另一个 NGINX 容器。该映像使用端口`8080`和`8443`，但是这两个端口都被我们的第一个 NGINX 容器使用。尝试在主机上使用`8080`和`8443`运行另一个容器将导致端口已分配错误:
![Figure 3.22 – Port conflict example ](img/Fig_3.21_B15514.jpg)
图 3.22–端口冲突示例
一种解决方案是创建另一个监听不同端口的容器，例如`8081`和`8444`，但这开始变得难以维护。相反，请记住，当您公开一个端口时，您要指定传入端口和目的端口。我们希望使用相同的 NGINX 映像，因此不能更改容器端口，但可以更改主机上的传入端口。当我们开始我们的第二个容器时，我们将每个港口增加一个，以避免与现有的`8080`和`8443`规则冲突，但是我们仍然将港口转发到新容器上的`8080`和`8433`。这听起来可能有些混乱，所以更容易看到一个示例`docker run`命令；也就是`docker run -p 8081:8080 -p 80444:8443 –name nginx2 bitnami/nginx:latest`:
![Figure 3.23 – Example of assigning ports 8081 and 8443 ](img/Fig_3.22_B15514.jpg)
图 3.23–分配端口 8081 和 8443 的示例
由于 Docker 返回了新的容器 ID，我们可以看到，通过将传入端口增加 1，我们不再有任何冲突的端口。
列出当前运行的容器将显示 NGINX 容器和端口映射:
![Figure 3.24 – docker ps showing both running NGINX servers ](img/Fig_3.23_B15514.jpg)
图 3.24–显示两台运行 NGINX 服务器的 docker ps
从网络上的另一台机器通过端口 8081 浏览到主机将显示默认的 NGINX 欢迎页面:
![Figure 3.25 – Browsing example to NGINX on port 8081 ](img/Fig_3.24_B15514.jpg)
图 3.25–浏览端口 8081 上的 NGINX 示例
查看 netstat，可以看到所有四个端口都在监听主机上的:
![Figure 3.26 – Host netstat showing the four assigned NGINX ports ](img/Fig_3.25_B15514.jpg)
图 3.26–显示四个分配的 NGINX 端口的主机网络状态
如果您需要运行另一个 NGINX 容器，您可以使用另一个主机端口，可能是`8082`或`8445`。主要的要点是，主机上的传入端口必须是唯一的，以避免端口冲突。容器的端口可以是相同的，因为每个容器都在自己的名称空间中运行，并且每个容器都有自己的资源和端口。
# 总结
在本章中，您学习了 IP 套接字以及主机如何使用端口与服务器建立连接。您了解到套接字是一个 IP 地址和端口的组合，它在主机上必须是唯一的。然后，我们介绍了 Docker 提供的每种网络类型和每种类型的用例，以及何时使用默认桥接网络、自定义桥接网络、主机网络或不使用网络。最后，您学习了如何向外部用户公开容器。
在下一章中，我们将开始探索 Kubernetes，方法是探索 Kubernetes 集群，查看其控制平面，了解`kublet`和 API 之间的区别，了解工作节点如何工作，以及查看超过 25 个 Kubernetes 对象。
# 问题
1.  Since Docker creates a default bridge network, there is no reason to create a custom bridge.
    A.真实的
    B.错误的
2.  Which of the following is an example of a socket?
    A.`http:192.168.100.10`
    B.`192.168.100.10`
    C.`192.168.100.10:80`
    D.`https://192.168.100.10`
3.  How would you start a container running a web server on port `8080` named `nginx-web` on a host that already has its host port (`8080`) bound to another container?
    A.`docker run -d nginx-web bitnami/nginx`
    B.`docker run -p 8080:8080 -d nginx-web bitnami/nginx –force`
    C.`docker run -p 8081:8080 -d nginx-web bitnami/nginx`
    D.由于端口`8080`绑定在主机上，您不能在端口`8080`上运行容器
4.  You suspect an image may contain malware. You need to run the image safely to look at its contents. What Docker command will mitigate any network impact?
    A.`docker run -isolate -it badimage bash`
    B.`docker run -p 0:0 -it badimage bash`
    C.`docker run -it badimage bash`
    D.`docker run --network=none -it badimage bash`
5.  Once a container is connected to a custom bridge network, you cannot change the connected network.
    A.真实的
    B.错误的
6.  What is the highest IP port number you can expose on a container?
    A.没有限制
    B.65535
    C.65530
    D.65532
    E.65435