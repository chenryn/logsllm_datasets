            if (!(lParam & 0x80000000)) //lParam的第31位bit位的值代表按键是按下还是释放，0->press 1->release
            {
                GetModuleFileNameA(NULL, szPath, MAX_PATH);
                p = strrchr(szPath, '\\'); //如果使用TCHAR的字符数组要把项目使用的字符集改为多字节字符集
                //strrchr函数：在一个字符串中查找目标字符串末次出现的位置
                if (!_stricmp(p + 1, PROCESS_NAME)) //判断当前进程是否为notepad
                //stricmp函数：比较两个字符串，比较过程不区分大小写
                 {
                    return 1;
                }
            }
        }
        return CallNextHookEx(g_Hook, nCode, wParam, lParam); //如果当前进程是notepad就将消息传递给下一个程序
    }
### 导出函数HookStart()与HookStop()：
这两个函数就是后面将被导出到主程序中使用的开启Hook和卸载Hook的函数，本次的复现中写的很简单，就是调用了一个建立钩子进程的API，但是还有些地方需要注意
在我们使用VS编写DLL时，生成的源文件后缀是.cpp，也就是C++文件，但是有些函数是只能在C语言下解析，所以我们使用C++中解析C语言的一个模式：
    #ifdef __cplusplus
    extern "C" {
    #endif // __cplusplus
    .
    .
    .
    #ifdef __cplusplus
    }
    #endif // __cplusplus
当我们需要在DLL中导出函数时，要用一个前缀标识这个函数为导出函数，如下：
    __declspec(dllexport)
这个前缀标识后面的函数为DLL的导出函数，默认的调用约定是_srdcall
在HookStart创建钩子进程时会调用一个API：SetWindowsHookEx，它在MSDN中可以查询到：
    HHOOK SetWindowsHookExA(
      [in] int       idHook,
      [in] HOOKPROC  lpfn,
      [in] HINSTANCE hmod,
      [in] DWORD     dwThreadId
    );
拥有四个参数：
  * idHook：表示需要安装的挂钩进程的类型，有很多，具体可以在MSDN上查，这次主要使用 **WH_KEYBOARD** 这个类型（安装监视击键消息的挂钩过程）
  * lpfn：指向钩子过程的指针
  * hmod：关于钩子进程的实例化句柄
  * dwThreadId：指向一个线程标识符，如果当前的钩子进程与现存的线程相关，那么它的值就是0
这一部分的代码及注释如下：
    #ifdef __cplusplus
    extern "C" { //后面的导出函数将使用C语言进行解析
    #endif // __cplusplus
        __declspec(dllexport) void HookStart() //创建钩子进程
        {
            g_Hook = SetWindowsHookEx(WH_KEYBOARD, KeyboardProc, g_hInstance, 0); //创建钩子进程
        }
        __declspec(dllexport) void HookStop() //卸载钩子进程
        {
            if (g_Hook)
            {
                UnhookWindowsHookEx(g_Hook); //卸载钩子进程
                g_Hook = NULL;
            }
        }
    #ifdef __cplusplus
    }
    #endif // __cplusplus
## WindowsMessageHook：
还是先看总的源码：
    #include"stdio.h"
    #include"Windows.h"
    #include"conio.h"
    #define DLL_NAME "KeyHook.dll"
    #define HOOKSTART "HookStart"
    #define HOOKSTOP "HookStop"
    typedef void(*FN_HOOKSTART)();
    typedef void(*FN_HOOKSTOP)();
    void main()
    {
        HMODULE hDll = NULL;
        FN_HOOKSTART HookStart = NULL;
        FN_HOOKSTOP HookStop = NULL;
        hDll = LoadLibraryA(DLL_NAME);
        HookStart = (FN_HOOKSTART)GetProcAddress(hDll, HOOKSTART);
        HookStop = (FN_HOOKSTOP)GetProcAddress(hDll, HOOKSTOP);
        HookStart();
        printf("press 'q' to quit this hook procdure");
        while (_getch() != 'q');
        HookStop();
        FreeLibrary(hDll);
    }
程序流程也比较简单：
  1. 通过LoadLibraryA加载前面编写好的DLL
  2. 通过GetProcAddress获取DLL中的函数地址后赋给前面定义好的函数指针
  3. 启动钩子进程
  4. 等待程序结束
  5. 卸载钩子进程
### LoadLibraryA加载DLL：
这个操作很简单，就是调用LoadLibraryA这个API加载DLL，它在MSDN中可以查到为：
    HMODULE LoadLibraryA(
      [in] LPCSTR lpLibFileName
    );
只有一个参数，就是需要载入的模块的名称，这里还要着重讲一下前面的一些操作：
    typedef void(*FN_HOOKSTART)();
    typedef void(*FN_HOOKSTOP)();
这个typedef看起来跟平时用到的typedef有点不一样，按照正常的理解，typedef应该是给一个什么东西“取别名”，那么这里就应该是给void取别名为*FN_HOOKSTART，但这样用起来就很奇怪。
其实正确的理解与上面说到的相差不是很大。由于后面会使用GetProcAddress来获取DLL中导出函数的地址，我们要调用就需要一个指向这个的指针。而要导出的两个函数都是参数为void，返回值也是void的函数，所以这里typedef的其实就是一个返回值为void参数也是void的
**函数指针**
这一部分的代码和注释如下：
    #include"stdio.h"
    #include"Windows.h"
    #include"conio.h"
    #define DLL_NAME "KeyHook.dll" //定义需要加载的动态库名称
    #define HOOKSTART "HookStart" //定义HookStart的全局名称
    #define HOOKSTOP "HookStop" //定义HookStop的全局名称
    typedef void(*FN_HOOKSTART)(); //定义一个返回值为void参数也是void的函数指针
    typedef void(*FN_HOOKSTOP)(); //原理同上
    void main()
    {
        HMODULE hDll = NULL; //模块载入句柄，用来加载DLL
        hDll = LoadLibraryA(DLL_NAME); //加载DLL
    }
### 通过GetProcAddress获取DLL中的函数地址：
在前面的文章中调试程序时经常都会看到LoadLibrary和GetProcAddress这两个函数的联合使用，它们的功能就是在程序中导入外部DLL得函数，这GetProcAddress在MSDN上查到为：
    FARPROC GetProcAddress(
      [in] HMODULE hModule,
      [in] LPCSTR  lpProcName
    );
这个API有两个参数：
  * hModule：需要查找的目的模块的实例化句柄
  * lpProcName：需要查找的函数的名称
通过这个API获取到的函数需要使用前面定义的函数指针强转一下类型才能正常的赋值给指针使用。
这一部分的代码与注释如下：
    HookStart = (FN_HOOKSTART)GetProcAddress(hDll, HOOKSTART); //获取DLL中HookStart的地址，并赋给前面定义好的函数指针
    HookStop = (FN_HOOKSTOP)GetProcAddress(hDll, HOOKSTOP); //与上面同理
### 钩子进程的安装与卸载：
这一部分所使用的函数和流程都比较简单，不在过多赘述，直接看代码和注释：
    HookStart(); //启动钩子进程
        printf("press 'q' to quit this hook procdure");
        while (_getch() != 'q'); //_getch为包含在conin.h库中的一个函数，功能与getchar差不多，但是没有回显
        HookStop(); //卸载钩子进程
        FreeLibrary(hDll); //卸载DLL模块
唯一需要注意的就是在结束钩子进程后要将DLL从进程中卸载，也就是要使用FreeLibrary。
# 运行测试：
**由于这个钩子程序在win10和win7运行会有一点小bug（有时候系统会卡住），所以我们在XP下运行和调试这个程序**
首先打开Hook程序：
然后打开notepad：
此时在记事本中是无法输入任何内容的，打开ProcessExplorer看一下DLL的加载情况：
可以看见KeyHook.dll已经被强行注入到notepad中了
# 调试测试：
下面是使用OD调试一下这个键盘钩子程序
## WindowsMessageHook：
使用OD打开程序：
很经典的VC++启动流程，一个call和一个向上的jmp跳转。我们事先知道这个程序是有一个按键提示的，所以我们直接搜索这个字符串：
找到了函数的主要流程，其中有使用到的两次GetProcAddress，后面有卸载DLL时的FreeLibrary，跟随这个CALL进入调用的HookStart函数函数：
可以找到在DLL中设置和写在键盘钩子的函数SetWindowsHookEx，地址在0x10000000开始后的位置上，因为DLL的默认加载位置为0x10000000.
## KeyHook：
先在OD中打开nootepad，更改OD的调试设置为（快捷键按alt+O）：
设置中断于新模块，也就是当DLL加载入内存时断下程序，然后打开Hook程序运行，由于系统不同可能不会第一次就加载KeyHook，需要要在notepad中进行键盘输入，直到模块窗口出现KeyHook：
双击进入这个模块查看：
在本次加载中的加载地址为0x1281000，在这个位置下一个断点，然后我们每次调试运行notepad时，发生键盘输入后程序就会停在这里。
# 参考资料及工具：
参考资料：《逆向工程核心原理》 [韩] 李承远
工具：ProcessExplorer：