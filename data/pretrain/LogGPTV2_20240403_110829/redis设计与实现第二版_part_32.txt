口主服务器的复制偏移量（replication offset）和从服务器的复制偏移量。
部分重同步功能由以下三个部分构成：
状态。
的值加上 N。
个字节的数据时，就将自己的复制偏移量
offset = 10119
主服务器
图 15-8 更新偏移量之后的主从服务器
传播33字节数据
传播33字节数据
传播33字节数据
图15-7拥有相同偏移量的主服务器和它的
offset = 10086
offset = 10119
 offset = 10119
offset = 10119
主服务器
从服务器C
从服务器 B
从服务器A
三个从服务器
第15章复
offset = 10086
offset = 10086
从服务器C
从服务器 B 
从服务器A
制
·205
---
## Page 210
206◆第三部分多机数据库的实现
列，默认大小为1MB。
15.4.2复制积压缓冲区
和复制积压缓冲区有关。
话，主服务器又如何补偿从服务器A在断线期间丢失的那部分数据呢？以上问题的答案都
这时，主服务器应该对从服务器执行完整重同步还是部分重同步呢？如果执行部分重同步的
务器将向主服务器发送PSYNC命令，报告从服务器A当前的复制偏移量为10086，那么
复制偏移量仍然停留在10086，这说明从服务器A与主服务器并不一致，如图15-9所示。
3 的固定长度先进先出队列里面，那么‘h'、‘e'、'l＇三个字符将首先被放入队列：
出，而新元素会被放入队列。
先出队列的长度是固定的，当入队元素的数量大于队列长度时，最先入队的元素会被弹
边进入队列，而旧元素从另一边弹出队列。
当主服务器进行命令传播时，它不仅会将写命令发送给所有从服务器，还会将写命令人
复制积压缓冲区是由主服务器维护的一个固定长度（fixed-size）先进先出（FIFO）队
假设从服务器A在断线之后就立即重新连接主服务器，并且成功，那么接下来，从服
举个例子，如果我们要将‘h"、‘e‘、‘l"、‘l‘、‘’五个字将放进一个长度为
和普通先进先出队列随着元素的增加和减少而动态调整长度不同，固定长度先进
接着，‘’的入队会引起＂e’的出队，队列变成：
但是当后一个‘1’字符要进入队列时，队首的‘h’字符将被弹出，队列变成：
['h', 'e', 'l'] 
固定长度先进先出队列的入队和出队规则跟普通的先进先出队列一样：新元素从一
以上就是固定长度先进先出队列的运作方式。
[.o.'.T.‘..]
['e', '1', '1"]
offset = 10119
主服务器
图15-9因为断线而处于不一致状态的从服务器A
固定长度先进先出队列
传播33字节数据
传播 33字节数据
 offset = 10119
offset = 10119
 offset = 10086
从服务器C
从服务器 B
从服务器A
---
## Page 211
操作：
offset 发送给主服务器，主服务器会根据这个复制偏移量来决定对从服务器执行何种同步
压缓冲区会为队列中的每个字节记录相应的复制偏移量，就像表15-4展示的那样。
队到复制积压缓冲区里面，如图15-10 所示。
字节值
偏移
口相反，如果offset 偏移量之后的数据已经不存在于复制积压缓冲区，那么主服务
 如果offset 偏移量之后的数据（也即是偏移量offset+1 开始的数据）仍然存在
当从服务器重新连上主服务器时，从服务器会通过PSYNC命令将自己的复制偏移量
因此，主服务器的复制积压缓冲区里面会保存着一部分最近传播的写命令，并且复制积
口主服务器收到从服务器发来的PSYNC命令以及偏移量10086之后，主服务器将检
口 当从服务器 A 断线之后，它立即重新连接主服务器，并向主服务器发送 PSYNC命
回到之前图15-9展示的断线后重连接例子：
器将对从服务器执行完整重同步操作。
***
·*
令，报告自己的复制偏移量为10086。
于复制积压缓冲区里面，那么主服务器将对从服务器执行部分重同步操作。
重同步模式来进行。
然存在，于是主服务器向从服务器发送+CONTINUE回复，表示数据同步将以部分
查偏移量10086之后的数据是否存在于复制积压缓冲区里面，结果发现这些数据仍
10087
+**
图15-10主服务器向复制积压缓冲区和所有从服务器传播写命令数据
命令传播程序
10088
3
"\r`
10089
将写命令放人队列
"\'
10090
：
表 15-4复制积压缓冲区的构造
主服务器
"s"
16001
10092
复制积压缓冲区
发送写命令
发送写命令
发送写命令
10093
"\r'
"n'
10094
's'
10095
从服务器C
从服务器B
从服务器A
'E’
10096
第15章
‘r’
10097
复
制·207
** =
---
## Page 212
208◆ 第三部分多机数据库的实现
(run ID):
15.4.3服务器运行ID
size 选项的说明。
per_second，这样可以保证绝大部分断线情况都能用部分重同步来处理。
除了复制偏移量和复制积压缓冲区之外，实现部分重同步还需要用到服务器运行ID
秒才能重新连接上主服务器，那么复制积压缓冲区的大小就不能低于5MB。
来估算：
正常发挥作用，因此，正确估算和设置复制积压缓冲区的大小非常重要。
如果复制积压缓冲区的大小设置得不恰当，那么 PSYNC命令的复制重同步模式就不能
令，又或者主从服务器断线后重连接所需的时间比较长，那么这个大小也许并不合适。
为了安全起见，可以将复制积压缓冲区的大小设为2* secondwrite_size_
复制积压缓冲区的最小大小可以根据公式 second *write_size_per_second
口从服务器只要接收这33字节的缺失数据，就可以回到与主服务器一致的状态，如
口接着主服务器会将复制积压缓冲区10086偏移量之后的所有数据（偏移量为10087
至于复制积压缓冲区大小的修改方法，可以参考配置文件中关于 repl-backlog-
例如，如果主服务器平均每秒产生1MB的写数据，而从服务器断线之后平均要5
口
Redis 为复制积压缓冲区设置的默认大小为1 MB，如果主服务器需要执行大量写命
至10119）都发送给从服务器。
口
图15-11所示。
(协议格式的写命令的长度总和）。
而 write_size_per_second 则是主服务器平均每秒产生的写命令数据量
其中 second 为从服务器断线后重新连接上主服务器所需的平均时间（以秒计算)。
offset - 10119
主服务器
图 15-11
根据需要调整复制积压缓冲区的大小
1主服务器向从服务器发送缺失的数据
发送断线时缺失的
33字节数据
offset = 10119
offset = 10119
 offset = 10119
从服务器 C
从服务器 B
从服务器A
---
## Page 213
部分重同步的实现原理之后，我们现在可以来了解PSYNC命令的完整细节了。
因为那时我们还未了解服务器运行ID、复制偏移量、复制积压缓冲区这些东西，在学习了
15.5
从服务器将向主服务器发送这个运行ID，主服务器根据自己的运行ID是否53b9b28df80
cbbbabff1d5dce2b3的主服务器，那么在网络断开，从服务器重新连接上主服务器之后，
前保存的运行ID：
而从服务器则会将这个运行ID保存起来。
当从服务器断线并重新连上一个主服务器时，从服务器将向当前连接的主服务器发送之
到目前为止，本章在介绍 PSYNC命令时一直没有说明 PSYNC 命令的参数以及返回值，
 如果主服务器返回+FULLRESYNC回复，那么表示主服务
根据情况，接收到PSYNC命令的主服务器会向从服务器返回以下三种回复的其中一种
口相反地，如果从服务器已经复制过某个主服务器，那么从服务器在开始一次新的复
如果从服务器以前没有复制过任何主服务器，或者之前执行过 SLAVEOFnoone
PSYNC命令的调用方法有两种：
举个例子，假设从服务器原本正在复制一个运行ID为53b9b28df8042fdc9ab5e3f
口 相反地，如果从服务器保存的运行 ID 和当前连接的主服务器的运行 ID 并不相同,
口 如果从服务器保存的运行ID 和当前连接的主服务器的运行ID 相同，那么说明从服
当从服务器对主服务器进行初次复制时，主服务器会将自己的运行ID传送给从服务器
口运行ID 在服务器启动时自动生成，由 40个随机的十六进制字符组成，例如 53b9b
口每个 Redis 服务器，不论主服务器还是从服务，都会有自已的运行 ID。
个命令的主服务器会通过这两个参数来判断应该对从服务器执行哪种同步操作。
务器将对从服务器执行完整重同步操作。
28df8042fdc9ab5e3fcbbbabff1d5dce2b3。
主服务器当前的复制偏移量，从服务器会将这个值作为自己的初始化偏移量。
服务器会将这个ID 保存起来，在下一次发送PSYNC命令时使用；而offset则是
器将与从服务器执行完整重同步操作：其中runid是这个主服务器的运行ID，从
复制的主服务器的运行 ID，而off set 则是从服务器当前的复制偏移量，接收到这
制时将向主服务器发送 PSYNC命令：其中runid是上一次
主动请求主服务器进行完整重同步（因为这时不可能执行部分重同步）。
命令，那么从服务器在开始一次新的复制时将向主服务器发送PSYNC？-1命令，
PSYNC命令的实现
那么说明从服务器断线之前复制的主服务器并不是当前连接的这个主服务器，主服
分重同步操作。
务器断线之前复制的就是当前连接的这个主服务器，主服务器可以继续尝试执行部
1
第 15章  复 
制·209
---
## Page 214
210第三部分多机数据库的实现
服务器，并再次对主服务器进行复制。
偏移量为20000的时候，主从服务器之间的网络连接中断了，这时从服务器将重新连接主
则是主服务器当前的复制偏移量。
中 53b9b28df8042fdc9ab5e3fcbbbabff1d5dce2b3是主服务器的运行 ID， 而 10086
回 +FULLRESYNC 53b9b28df8042fdc9ab5e3fcbbbabff1d5dce2b3 10086 回复，其
执行完整重同步操作。
第一次执行复制操作，那么从服务器将向主服务器发送PSYNC？-1命令，请求主服务器
127.0.0.1:6379，从服务器的地址为127.0.0.1:12345。
假设完整重同步成功执行，并且主从服务器在一段时间之后仍然保持一致，但是在复制
主服务器在收到完整重同步请求之后，将在后台执行BGSAVE命令，并向从服务器返
如果客户端向从服务器发送命令SLAVEOF127.0.0.16379，并且假设从服务器是
因为之前曾经对主服务器进行过复制，所以从服务器将向主服务器发送命令 PSYNC
首先，假设有两个 Redis 服务器，它们的版本都是 Redis 2.8，其中主服务器的地址为
为了熟悉PSYNC命令的用法，让我们来看一个完整的复制——网络中断一
流程图15-12总结了PSYNC命令执行完整重同步和部分重同步时可能遇上的情况。
口 如果主服务器返回-ERR 回复，那么表示主服务器的版本低于Redis 2.8，它识别不
口如果主服务器返回+CONTINUE回复，那么表示主服务器将与从服务器执行部分重
同步操作，从服务器只要等着主服务器将自己缺少的那部分数据发送过来就可以了。
步操作。
了 PSYNC命令，从服务器将向主服务器发送 SYNC命令，并与主服务器执行完整同
图15-12PSYNC 执行完整重同步和部分重同步时可能遇上的情况
+FULLRESYNC
从服务器接到客户端发来的SLAVEOF命令
向主服务器发送
执行完整重同步
PSYNC ？ -1
主服务器返回
这是从服务器第一次执行复制？
PSYNc  
否
主服务器返回+CONTINUE
向主服务器发送
否
执行部分重同步
是
一重复制例子
5
---
## Page 215
收，而实际的复制工作将在OK 返回之后才真正开始执行。
置工作之后，从服务器将向发送SLAVEOF命令的客户端返回OK，表示复制指令已经被接
保存到服务器状态的masterhost 属性和masterport属性里面：
15.6.1步骤1：设置主服务器的地址和端口
15.6
偏移量之后的所有数据发送给从服务器，主从服务器将再次回到一致状态。
表示将与从服务器执行部分重同步操作，之后主服务器会将保存在复制积压缓冲区 20000
查偏移量为20000之后的数据是否存在于复制积压缓冲区里面，结果发现数据仍然存在。
ID 和主服务器的运行 ID 相同，于是主服务器继续读取从服务器传来的偏移量 20000，检
9b28df8042fdc9ab5e3fcbbbabff1d5dce2b3 和主服务器自身的运行ID，结果显示该
3b9b28df8042fdc9ab5e3fcbbbabff1d5dce2b3 20000，请求进行部分重同步。
确认运行 ID 相同并且数据存在之后，主服务器将向从服务器返回+CONTINUE 回复，
主服务器在接收到从服务器的PSYNC命令之后，首先对比从服务器传来的运行ID53b
图 15-13展示了 SLAVEOF 命令执行之后，从服务器的服务器状态。
 struct redisServer {
从服务器首先要做的就是将客户端给定的主服务器IP地址127.0.0.1以及端口6379
127.0.0.1:12345> SLAVEOF 127.0.0.1 6379
当客户端向从服务器发送以下命令时：
为例，展示 Redis2.8或以上版本的复制功能的详细实现步骤。
SLAVEOF 127.0.0.1 6379
本节将以从服务器127.0.0.1:12345接收到命令：
SLAVEOF  
通过向从服务器发送SLAVEOF命令，我们可以让一个从服务器去复制一个主服务器：
复制的实现
int masterport;
//主服务器的端口
//主服务器的地址
图15-13从服务器的服务器状态
"127.0.0.1"
masterhost
redisserver
masterport
6379
第 15章  复 
划·211
---
## Page 216
212·第三部分多机数据库的实现
15-16所示。
一件事就是向主服务器发送一个PING命令，如图
15.6.3
行，所以理解“从服务器是主服务器的客户端”这一点非常重要。
发送命令请求，而主服务器则会向从服务器返回命令回复，如图15-15所示。
服务器将同时具有服务器（server）和客户端（client）两个身份：从服务器可以向主服务器
创建相应的客户端状态，并将从服务器看作是一个连接到主服务器的客户端来对待，这时从
务器的套接字连接之后，将为该套接字
传播来的写命令，诸如此类。
如接收 RDB 文件，以及接收主服务器
处理器将负责执行后续的复制工作，比
处理复制工作的文件事件处理器，这个
务器将为这个套接字关联一个专门用于
连接（connect）到主服务器，那么从服
服务器的套接字连接，如图15-14所示。
15.6.2步骤2：建立套接字连接
在 SLAVEOF命令执行之后，从服务器将根据命令所设置的IP 地址和端口，创建连向主
如果从服务器创建的套接字能成功