### Case Study: CVE-2019-0567

#### Root Cause
The vulnerability in question, CVE-2019-0567, is a type confusion issue in the Chakra JavaScript engine. The following code snippet demonstrates the root cause:

```javascript
function opt(obj1, obj2) {
    obj1.b = 1;
    let tmp = { __proto__: obj2 };
    obj1.a = 0x1234;
}

let obj1 = { a: 1, b: 2 };
let obj2 = {};
for (let i = 0; i < 10000; i++) {
    opt(obj1, obj2);
}
```

In this code, `obj1` and `obj2` are manipulated in a way that can lead to type confusion. Specifically, the `__proto__` property is used to create a prototype chain that can be exploited.

#### Exploit

##### Step-by-Step Breakdown

1. **Exploit Memory Layout â€“ R/W Primitive**
   - The memory layout for the exploit involves several objects and their properties:
     - `obj1` (DynamicObject)
     - `obj3` (DynamicObject)
     - `dv1` (DataView)
     - `dv2` (DataView)

   - The properties of these objects are as follows:
     - `obj1`: `{ a: 1, b: 2, c: dv1 }`
     - `obj3`: `{ a, b, c, d, e, f, g, h }`
     - `dv1` and `dv2` are DataViews with specific buffer and byte offset properties.

2. **Step 2: Set `obj3->auxSlots = dv1`**
   - This step involves setting the `auxSlots` of `obj3` to `dv1`:
     ```javascript
     obj1.c = dv1;
     ```

3. **Step 3: Set `dv1->buffer = dv2`**
   - In this step, the buffer of `dv1` is set to `dv2`:
     ```javascript
     obj3.h = dv2;
     ```

4. **Step 4: Get Arbitrary R/W Primitive by Corrupting `dv2`'s Buffer**
   - By corrupting the buffer of `dv2`, an arbitrary read/write primitive can be achieved:
     ```javascript
     dv1.setUint32(0x38, addr_lo, true);
     dv1.setUint32(0x3c, addr_hi, true);
     ```

#### Leak Chakra Base Address
- A demonstration of how to leak the base address of the Chakra engine can be provided, but it is not included here for security reasons.

### Conclusion

- **Flash Vulnerabilities**: Flash has been a primary target for attackers. With Adobe ceasing updates at the end of 2020, the number of Flash zero-day attacks may decrease.
- **Script Engines**: In 2018, older script engines like VBScript and JScript began to be targeted. It is likely that more zero-day vulnerabilities will be discovered in these engines in the future.
- **VBSEmulator**: This tool can be used for deobfuscating VBScript and detecting potential unknown exploits.
- **Chakra Engine**: The new JavaScript engine, Chakra, appears to be vulnerable, particularly its JIT compiler. Type confusion is a common and easily exploitable issue.

Thank you!

**Browser Script Engine Zero Days in 2018**

@elli0tn0phacker  
Elliot Cao  
PI:EMAIL