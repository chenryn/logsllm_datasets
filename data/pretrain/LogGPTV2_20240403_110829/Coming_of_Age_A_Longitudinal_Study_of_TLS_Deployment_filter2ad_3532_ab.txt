but only the DH parameters. To mitigate this vulnerability, both
clients and servers should disable export cipher suites.
Sweet32 (31/08/2016) The DES and Triple-DES (3DES) ciphers
with their 64-bit block size are vulnerable to a birthday-bound
attack on CBC-mode which makes it possible for an MITM attacker
to recover plaintext from long-duration connections [18, 37]. To
counter this attack it is necessary to stop using 64-bit block ciphers
or to re-key the session frequently.
Other Attacks. Besides the aforementioned attacks, other TLS
vulnerabilities such as CRIME [28], SLOTH [35] and DROWN [36]
were also publicly disclosed. They are not included in our study
because we are not able to study them in detail using our dataset .
3 DATASETS
This section introduces the datasets used in our study.
3.1 ICSI SSL Notary
The main data source for this study is the ICSI SSL Notary [12]. The
Notary passively collects metadata about outgoing SSL/TLS connec-
tions on all ports from several universities and research networks
mainly located in North America. The dataset consists of 319.3B
Version Release Date
SSL 2
Feb. 1995
Nov. 1996
SSL 3
TLS 1.0
Jan. 1999
Apr. 2006
TLS 1.1
Aug. 2008
TLS 1.2
TLS 1.3
Aug. 2018
Table 1: Release dates of all SSL/TLS versions.
connections collected over 6 years, from February 2012 to March
2018. During this period it collected 31.5M unique certificates. This
number excludes short-lived certificates used by GRID Computing
and Tor [68].
The Notary uses the Bro Network Security Monitor [1] to collect
its data. We significantly extended the TLS-related features in Bro
since we started our data collection back in 2012.
The Notary dataset is fundamentally different from active scan
datasets because it focuses on connections instead of servers. It
captures how TLS is actually used on the Internet and includes
the interplay between clients and servers. It also emphasizes con-
nections to services that users commonly use and de-emphasizes
services rarely accessed by users.We consider this a feature since it
shows the current makeup of the traffic on the Internet.
We note that our dataset exhibits artifacts of the collection pro-
cess that are beyond our control. As we leverage operational setups
that run our analysis on top of their normal duties, we must accept
occasional outages, packets drops (e.g., due to CPU overload) and
misconfigurations. As such our data collection effort is designed
as a “best effort” process: we take what we get but generally can-
not quantify what we miss. However, given the large total volume
across the sites, we consider the aggregate as representative of
many properties of real-world SSL/TLS activity.
3.2 Censys
We complement the passive Notary dataset with active scans from
Censys [42]. Censys performs periodic Internet-wide TLS scans and
provides a search engine to explore the collected scan data. Censys
uses a combination of ZMap [46] and ZGrab [4] for data collection.
We use multiple Censys datasets: First, we use TLS scans of
the IPv4 address space on TCP port 443 covering 46M hosts and
535M unique certificates. Second, we use HTTPS scans of the top
1M Alexa most popular websites. Both scans offer the same set of
cipher suites as a 2015 version of Chrome including a number of
strong ciphers such as AES-GCM cipher suites with forward secrecy,
as well as weaker CBC, RC4, and 3DES cipher suites. Finally, we
use weekly scans of the IPv4 address space on TCP port 443 that
offer SSL 3 as the sole supported protocol version and other scans
that look for Export-grade cipher suite support. Censys scans are
available starting from August 22nd 2015; in our paper we use the
data till May 13 2018.
These datasets provide a temporal view of publicly-reachable TLS
servers active in the IPv4 address space over 32 months, allowing us
to study how the choices of SSL/TLS versions and cipher suites by
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
Kotzias et al.
servers change over time, and whether these changes correspond
to attack disclosures and vulnerability reports.
3.3 Ethical Considerations
The passive data collection performed by the ICSI SSL Notary was
cleared by the responsible parties at each contributing institution.
Note that the ICSI SSL Notary specifically excludes or anonymizes
sensitive information, such as client IP addresses. Censys performs
a number of steps to make sure that data is collected ethically; these
are outlined in [42].
4 TLS CLIENT FINGERPRINTING
As of May 2018, IANA has registered almost 200 cipher suites, 28
TLS extension, and 35 elliptic curves values [56,57]. The different
combinations of these parameters in a Client Hello message (see §2)
can reveal the client from which a given TLS flow has emanated.
Matching client fingerprints against the Notary dataset allows us
to analyze the evolution of TLS usage of specific applications, e.g.,
to see how they react to discovered TLS vulnerabilities.
In this work, a TLS client fingerprint is the concatenation of four
features extracted from the Client Hello: (i) the cipher suite list,
(ii) the list client extensions, (iii) Supported Elliptic Curves (EC),
and (iv) the Supported EC Point Formats extension. All features are
stored in the order they appear in the Client Hello.
Some Google software like Chrome uses a feature called GREA-
SE [38] that adds a list of invalid values to these fields to improve
server tolerance of future new extensions. We identify and remove
these values from handshakes.
Our feature selection is similar to the feature selection of pre-
vious work, albeit slightly more constrained because a few items
are not available in our passive dataset. Prior work has included
additional fields like the client TLS version, compression methods,
and signature algorithms [22,45]. We plan adding these fields to the
Notary in the future. Fingerprints with more fields allow a more
specific identification of client software. To determine the impact
we take the fingerprints of [22] and apply our more restrictive
methodology to them. Originally 2.4% of the fingerprints collide;
with our methodology this increases to 7.3%. Thus, our collection
gives slightly less distinct results.
Each fingerprint in our database maps to a program or library
and the version range that the fingerprint covers. When a collision
with a different kind of software or library occurs we remove the
fingerprint from the database; it cannot uniquely identify a client.
When a collision between a specific software and a library occurs we
assume that the software uses the library. Due to this, e.g., Chrome
on Android is just identified as “Android SDK”, conflict resolution
is performed manually.
We build our fingerprint database from several sources: we use
the data of previous research studies [45,71], use BrowserStack [2]
to gather the fingerprints of browsers and mobile devices, compile
multiple versions of OpenSSL to gather their data, and manually
identify TLS clients by examining the hosts they connect to.
4.0.1 TLS Client Fingerprint Coverage. As discussed in §3.1, the
Notary gradually incorporated new TLS-related features since its
initial deployment in February 2012. The fields necessary for fin-
gerprinting have been introduced in February 2014. As a result, we
Type (Examples)
Libraries (OpenSSL, MS CryptoAPI)
Browsers (Chrome, Firefox)
OS Tools and Services (Apple Spotlight)
Mobile apps (Facebook, Hola VPN)
Dev. tools (Flux, git)
AV (Avast, Bluecoat Proxy, Kaspersky)
Cloud Storage (Dropbox)
Email (Apple mail, Thunderbird)
Malware & PUP (Zbot, InstallMoney)
All
№ FPs Coverage
46.49%
15.63%
2.29%
1.35%
0.88%
0.85%
0.71%
0.58%
0.48%
69.23%
Table 2: Fingerprint summary. The table reports number of
unique fingerprints, and amount of matching Notary con-
nections for each class.
700
193
13
489
12
44
29
33
49
1,684
can only match our fingerprints to 191.9G (60%) total flows con-
taining the necessary information. When applied on those 191.9G
TLS connections, our 1,684 fingerprints allow us to identify the TLS
client originating 69.23% of them. Table 2 summarizes our finger-
print database. The whole Notary dataset contains 69,874 unique
TLS connection fingerprints. The coverage follows a power law
distribution: the 10 most common fingerprints explain 25.9% of the
total Notary traffic. These 10 fingerprints are associated to popular
web browsers such as Chrome and Safari and OS-provided libraries
(mainly Android and iOS). The most common unlabeled fingerprint
is responsible for only 1% of remaining traffic. This indicates that
obtaining more fingerprints associated with unpopular TLS clients
may not translate in significantly improving our coverage.
4.1 Software use over time
As far as we are aware, our work is the first time that TLS finger-
printing is used on a large-scale dataset covering several years. A
few interesting questions that arise in this scenario are: How long
do we see specific TLS fingerprints? Do fingerprints commonly only
appear for short periods of time (which might indicate frequent
client updates) or are a lot of them unchanged for years?
In our dataset we have 69,874 usable fingerprints (for which all
needed features that we are using are present), starting from Oct.
2014. We define the duration a fingerprint was seen as the time
between the first time and the last time it was seen. The maximum
duration in our dataset is 1,235 days (3 years, 4 months). The median
duration a fingerprint was seen is 1 day, the mean 158.8 days, the
3rd quantile 171 days and the standard deviation is 302.31 days.
It is interesting that a lot of fingerprints are only seen very
briefly and do not reappear later. Our dataset reveals an extreme
bias with 42,188 of the 69,874 fingerprints only appearing on a single
day. These 42,188 fingerprints are only responsible for 801,232 of
the 191B total connections for which we have fingerprints. We
are not sure which software these fingerprints originate from. One
possibility is that there is software that does not send its ciphersuites
in a fixed order (due to a bug, perhaps), causing an explosion of
fingerprints.
Looking at the other end reveals a different picture. There are
1,203 fingerprints that we see for more than 1,200 days. These
Coming of Age: A Longitudinal Study of TLS Deployment
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
fingerprints are responsible for 21.75% of connections (for which
we have fingerprints). We were able to identify the software for 343
of these (responsible for 18.08% of connections). The top software
identified is iPad Air (library), Safari, Android SDK, as well as
Chrome, Firefox, and the MacOs Mail App.
Figure 1: Negotiated SSL/TLS Versions. Vertical lines show
dates of high-profile attacks.
Figure 2: Negotiated connections using RC4, CBC or AEAD
cipher suites.
Figure 3: Connections with client advertising support for
RC4, DES, 3DES or AEAD cipher suites. Total CBC-mode is
always above 99%.
can be seen as having spurred the adoption of TLS 1.2. The best
defense against POODLE is to disable SSL 3 completely (since it also
enables attacks against later versions of TLS due to TLS fallback
behavior).
This indicates that significant numbers of connections are caused
by software that has either not been updated since 2014 or not
changed its fingerprints since then. The latter seems unlikely since it
takes significant effort to not change the fingerprint at all, especially
since doing so prevents adoption of new features.
5 VULNERABILITY ANALYSIS
In this section, we analyze the TLS ecosystem evolution by exam-
ining negotiated TLS parameters in TLS connections in the Notary
dataset, as well as client TLS configurations. We view our analysis
through the prism of the disclosed TLS attacks listed in §2.2. We
examine if and how server and client configurations change, and
how traffic patterns shift.
5.1 Legacy SSL Versions
Old protocol versions, especially SSL 2 and 3, are no longer con-
sidered secure [78,81]. Our passive traffic shows that there is still
a marginal number of connections that use SSL 2 or 3. For exam-
ple, we saw 1.2K SSL 2, as well as 360.1K (< 0.01% of total) SSL 3
connections in February 2018. We have not observed SSL 3 in a sig-
nificant amount of connections since mid-2014 and never observed
significant numbers of SSL 2 connections.
All observed SSL 2 connections terminate at servers of a single
University; some of them on the Nagios port, a piece of system
monitoring software. SSL 3 paints a more varied picture—we see
connections to 1,789 different servers indicating use of it; 30 servers
receive more than 1,000 connections. The 4 servers receiving more
than 50,000 connections belong to Symantec and Wayport.
Looking at Censys data for server support shows that in Sep-
tember 2015, more than 45% of servers still supported SSL 3. The
number has decreased since then—as of the beginning of May 2018,
less than 25% of servers support SSL 3. However, considering that
TLS 1.0 was standardized in 1999 (Table 1) and that SSL 3 has been
considered badly broken since the POODLE attack in 2014 (on top
of the RC4 attacks), this still seems like a large number. Censys
does not scan using SSL 2 and we have no information about its
support.
5.2 CBC Attacks