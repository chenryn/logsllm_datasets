 **Migrated issue, originally created by Anonymous**
If you define a default ordering in a relation and do a query on that relation
using a different ordering the result is not what you would expect. In my code
I define a mapper like this:
    orm.mapper(Desktop, desktop_table, properties=dict(
        status_history = orm.relation(DesktopStatus,
                                      backref="desktop",
                                      order_by=DesktopStatus.updated,
                                      lazy="dynamic"),
        ))
In one method of the Desktop class I need use the last entry in that list. A
slice results in all entries being fixed, so I did this:
        status=self.status_history.order_by(DesktopStatus.updated.desc()).limit(1).first().updated
which resulted in this SQL query:
    10:55:38,427 INFO  [sqlalchemy.engine.base.Engine.0x..ec](sqlalchemy.engine.base.Engine.0x..ec) SELECT desktop_status.id AS desktop_status_id, desktop_status.desktop_id AS desktop_status_desktop_id, desktop_status.old_status AS desktop_status_old_status, desktop_status.new_status AS desktop_status_new_status, desktop_status.updated AS desktop_status_updated 
    FROM desktop_status 
    WHERE %(param_1)s = desktop_status.desktop_id ORDER BY desktop_status.updated, desktop_status.updated DESC 
     LIMIT 1 OFFSET 0
notice how desktop_status.updated appears twice in the ORDER BY clause. The
first one takes precedence, so the explicit ordering from my query is ignored.
This is somewhat related to #1079. I felt that this specific issue is
different enough to warrant a separate bugreport.