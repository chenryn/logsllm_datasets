# The Abuser Inside Apps: Finding the Culprit Committing Mobile Ad Fraud

## Authors
- Joongyum Kim
- Jung-hwan Park
- Sooel Son

### Affiliation
School of Computing, KAIST

### Contact
- PI: EMAIL (for all authors)

## Abstract
Mobile ad fraud is a significant threat that undermines the app market ecosystem by victimizing app publishers and their users. Previous research on detecting mobile ad fraud has focused on predefined test scenarios that exclude user involvement. However, these approaches have neglected to track which app modules and user interactions are responsible for observed ad fraud. 

This paper introduces FraudDetective, a dynamic testing framework designed to identify ad fraud activities. FraudDetective focuses on fraudulent activities that occur without any user interaction. It computes a full stack trace from an observed ad fraud activity to a user event, generating causal relationships between user inputs and the fraudulent activity. We modified the Android Open Source Project (AOSP) to emit detected ad fraud activities along with their full stack traces, helping to pinpoint the app modules responsible for the observed fraud.

We evaluated FraudDetective on 48,172 apps from the Google Play Store. Our results show that 74 apps were responsible for 34,453 ad fraud activities, with 98.6% of these activities originating from embedded third-party ad libraries. Our evaluation demonstrates that FraudDetective can accurately identify ad fraud via reasoning based on observed suspicious behaviors, even in the absence of user interactions. Additionally, our findings suggest that abusive ad service providers use their ad libraries to actively engage in ad fraud.

## I. Introduction
The mobile ad industry has been a driving force for innovation in app development. In 2020, the mobile ad market reached $187 billion, comprising 30.5% of the global ad market budget [49]. However, ad fraud has become a major security threat, with losses estimated at 9%-20% of the annual market budget for global mobile advertising [47], [52], [73]. For example, ZeroAccess, the world's largest botnet, generates $100,000 daily through ad fraud [64].

To protect users from mobile ad fraud, Google has implemented policies and actively identifies apps with abusive behaviors [30], [54]. Previous studies, such as MAdFraud [25] and MAdLife [21], have proposed dynamic testing frameworks to detect ad fraud in Android apps. While effective, these frameworks do not track which user interactions and app modules cause the fraud. MAdFraud tests apps without user interaction, while MAdLife focuses on full-screen ads that appear immediately after an app starts. These contextual testing environments limit the testing of target app functionalities.

### Our Contributions
We design and implement FraudDetective, a dynamic testing framework that identifies mobile ad fraud initiated by Android apps. We define an ad fraud activity as:
1. A click URL request submission where the targeted ad service counts user clicks.
2. An invocation of a different app in the foreground without any explicit user interaction.

Figure 1 illustrates an example of the latter type, where a fraudulent app invokes the Samsung browser with a Bithumb signup page without user input. Identifying an ad fraud activity requires computing the causality between the fraudulent activity and explicit user interaction, such as a touch or drag event.

Prior approaches [21], [25] have two main issues:
1. They do not model the causality between observed fraud activities and user interactions.
2. They cannot track which app modules conduct the observed ad fraud.

To address these issues, we compute a full stack trace to capture causal relationships. A full stack trace is a sequence of callees from an execution entry to a statement committing an ad fraud activity. This helps identify the source classes and modules responsible for the fraud.

However, stack traces for fraud activities are often fragmented due to multiple threads, message queues, and external Chromium WebView instances. To compute a non-fragmented full stack trace, we revised the Android Open Source Project (AOSP) corresponding to Android Oreo [5] to emit execution logs of ad fraud activities and their stack traces. FraudDetective uses this AOSP for dynamic testing, connects fragmented stack traces, and identifies ad fraud activities.

We evaluated FraudDetective on 48,172 apps from the Google Play Store. It identified 74 apps responsible for 34,453 ad fraud activities, with 98.6% originating from embedded ad libraries. This highlights the role of abusive ad library providers in committing ad fraud by exploiting user devices. Our findings also reveal that one app forcibly invoked YouTube and Naver apps in the foreground, redirecting users to promotional content. FraudDetective, through full stack trace analysis, found that the culprits were abusive ad libraries using cross-app Intents.

By computing full stack traces, FraudDetective improves the precision of ad fraud detection, making it an essential tool for vetting mobile apps in app stores and protecting users from ad fraud campaigns.

## II. Background

### A. Mobile Ad Ecosystem
Serving mobile ads is a common method for monetizing apps. App developers integrate mobile ad libraries, such as AdMob, which render ads within the app. Key participants in the mobile ad ecosystem include:
1. **Publisher**: An app developer who monetizes their app by integrating an ad library.
2. **Advertiser**: Designs ad campaigns and requests launches from ad service providers.
3. **Ad Service Provider**: Connects advertisers' needs with publishers' offers and provides ad libraries for integration.

Ad service providers charge advertisers using methods like CPM (cost-per-mile), CPC (cost-per-click), and CPI (cost-per-install).

### B. Mobile Ad Fraud
Mobile ad fraud involves generating unwanted ad traffic, including impressions, clicks, or conversions, to generate fraudulent revenue. This paper focuses on two types of ad fraud:
1. **Click Fraud**: Generating illegitimate clicks to deplete an advertiser's budget.
2. **Impression Fraud**: Rendering invisible or hidden ads to charge advertisers without user exposure.

## III. Motivation
Maintaining the integrity of app markets, such as the Google Play Store, is crucial for protecting user security and privacy. Google uses the Bouncer framework to detect malware, security vulnerabilities, and ad-abusing apps [39], [67], [54]. Given the large number of Android apps, automated analysis is essential for scalable detection.

Previous research, such as MAdFraud [25] and MAdLife [21], has proposed dynamic testing frameworks to identify ad fraud. However, these frameworks have limitations:
1. **Causal Relationships**: Unable to manifest causal relationships between user interactions and fraudulent activities.
2. **Module Identification**: Cannot pinpoint which app module conducts ad fraud.
3. **Limited Coverage**: Do not interact with the app, leading to limited testing coverage.
4. **Emulator Limitations**: May not observe ad fraud activities that only appear on real devices.

These limitations highlight the need for a next-generation dynamic testing framework. We define an ad fraud activity as a click URL request submission or an invocation of other apps via cross-app Intents without genuine user interaction. FraudDetective addresses these challenges by computing full stack traces and identifying the source of ad fraud activities.