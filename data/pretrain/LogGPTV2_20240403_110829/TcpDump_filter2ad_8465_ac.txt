    如果不指定type 修饰符, id默认的修饰符为host.
    dir 修饰符描述id 所对应的传输方向, 即发往id 还是从id 接收
    （nt: 而id 到底指什么需要看其前面的type 修饰符）.
    可取的方向为: src, dst, src 或 dst, src并且dst.
    (nt:分别表示, id是传输源, id是传输目的, id是传输源或者传输目的, id是传输源并且是传输目的).
    例如, src foo,
    dst net 128.3, src or dst port ftp-data.
    (nt: 分别表示符合条件的数据包中, 源主机是foo, 目的网络是128.3, 源或目的端口为 ftp-data).
    如果不指定dir修饰符, id 默认的修饰符为src 或 dst.
    对于链路层的协议,比如SLIP(nt: Serial Line InternetProtocol, 串联线路网际网络协议), 以及linux下指定
    any 设备, 并指定cooked(nt | rt: cooked 含义未知, 需补充) 抓取类型, 或其他设备类型,
    可以用inbound 和 outbount 修饰符来指定想要的传输方向.
    proto 修饰符描述id 所属的协议. 可选的协议有: 
    ether, fddi, tr, wlan, ip, ip6, arp, rarp, decnet, tcp以及 upd.
    (nt | rt: ether, fddi, tr, 具体含义未知, 需补充. 可理解为物理以太网传输协议, 光纤分布数据网传输协议,
    以及用于路由跟踪的协议.  wlan, 无线局域网协议; ip,ip6 即通常的TCP/IP协议栈中所使用的ipv4以及ipv6网络层协议;
    arp, rarp 即地址解析协议, 反向地址解析协议; decnet, Digital Equipment Corporation
    开发的, 最早用于PDP-11 机器互联的网络协议; tcp and udp, 即通常TCP/IP协议栈中的两个传输层协议).
     例如, ether src foo, arp net 128.3, tcp port 21, udp portrange 7000-7009分别表示 
    从以太网地址foo 来的数据包,发往或来自128.3网络的arp协议数据包, 
    发送或接收端口为21的tcp协议数据包, 发送或接收端口范围为7000-7009的udp协议数据包.
    如果不指定proto 修饰符, 则默认为与相应type匹配的修饰符. 例如, src foo 含义是 
    (ip or arp or rarp) src foo (nt: 即, 来自主机foo的ip/arp/rarp协议数据包, 默认type为host),net bar 含义是
    (ip  or  arp  or rarp) net bar(nt: 即, 来自或发往bar网络的ip/arp/rarp协议数据包),
    port 53 含义是 (tcp or udp) port 53(nt: 即, 发送或接收端口为53的tcp/udp协议数据包).
    (nt: 由于tcpdump 直接通过数据链路层的 BSD 数据包过滤器或 DLPI(datalink provider interface, 数据链层提供者接口)
    来直接获得网络数据包, 其可抓取的数据包可涵盖上层的各种协议, 包括arp, rarp, icmp(因特网控制报文协议),
    ip, ip6, tcp, udp, sctp(流控制传输协议).
    对于修饰符后跟id 的格式,可理解为, type id 是对包最基本的过滤条件: 即对包相关的主机, 网络, 端口的限制;
    dir 表示对包的传送方向的限制; proto表示对包相关的协议限制)
    fddi(nt: Fiber Distributed Data Interface) 
    实际上与ether 含义一样: tcpdump 会把他们当作一种指定网络接口上的数据链路层协议.
    如同ehter网(以太网), FDDI 的头部通常也会有源, 目的, 以及包类型, 从而可以像ether
    网数据包一样对这些域进行过滤. 此外, FDDI 头部还有其他的域, 但不能被放到表达式中用来过滤
    同样, tr 和 wlan 也和 ether 含义一致, 上一段对fddi 的描述同样适用于tr(Token Ring) 和
    wlan(802.11 wireless LAN)的头部. 对于802.11 协议数据包的头部, 目的域称为DA, 源域称为 SA;
    而其中的 BSSID, RA, TA 域(nt | rt: 具体含义需补充)不会被检测(nt: 不能被用于包过虑表达式中).
    除以上所描述的表达元(primitive)， 还有其他形式的表达元, 并且与上述表达元格式不同.
    比如: gateway, broadcast, less, greater
    以及算术表达式(nt: 其中每一个都算一种新的表达元). 下面将会对这些表达元进行说明.
    表达元之间还可以通过关键字and, or 以及 not 进行连接, 从而可组成比较复杂的条件表达式. 
    比如,host foo and not port ftp and not port ftp-data
    (nt: 其过滤条件可理解为, 数据包的主机为foo,并且端口不是ftp(端口21) 和ftp-data
    (端口20, 常用端口和名字的对应可在linux 系统中的/etc/service 文件中找到)).
    为了表示方便, 同样的修饰符可以被省略, 如tcp dst port ftp or ftp-data or domain与以下的表达式
    含义相同tcp dst port ftp or tcp dst port ftp-data or tcp dst port domain.
    (nt: 其过滤条件可理解为, 包的协议为tcp, 目的端口为ftp 或 ftp-data 或 domain(端口53) ).
**0x06 Tcpdump常用命令实例**
默认启动
    tcpdump
普通情况下，直接启动tcpdump将监视第一个网络接口上所有流过的数据包。
监听网卡eth0
    tcpdump -i eth0
这个方式最简单了，但是用处不多，因为基本上只能看到数据包的信息刷屏，压根看不清，可以使用ctrl+c中断退出，如果真有需求，可以将输出内容重定向到一个文件，这样也更方便查看。
监听指定的主机
    tcpdump -i eth0 -nn 'host 192.168.168.2'
这样的话，192.168.168.2这台主机接收到的包和发送的包都会被抓取。
    tcpdump -i eth0 -nn 'src host 192.168.168.2'
这样只有192.168.168.2这台主机发送的包才会被抓取。
    tcpdump -i eth0 -nn 'dst host 192.168.168.2'
这样只有192.168.168.2这台主机接收到的包才会被抓取。
监听指定端口
    tcpdump -i eth0 -nnA 'port 80'
上例是用来监听主机的80端口收到和发送的所有数据包，结合-A参数，在web开发中，真是非常有用。
监听指定主机和端口
    tcpdump -i eth0 -nnA 'port 80 and src host 192.168.168.2'
多个条件可以用and，or连接。上例表示监听192.168.168.2主机通过80端口发送的数据包。
监听除某个端口外的其它端口
    tcpdump -i eth0 -nnA '!port 22'
如果需要排除某个端口或者主机，可以使用“!”符号，上例表示监听非22端口的数据包。
抓取特定目标ip和端口的包
    tcpdump host 192.168.168.2 and tcp port 8000
捕获的数据太多，不断刷屏，可能需要将数据内容记录到文件里，需要使用-w参数：
    tcpdump -X -s 0 -w A.cap host 192.168.168.2 and tcp port 8000
则将之前显示在屏幕中的内容，写入tcpdump可执行文件同级目录下的A.cap文件中。
文件查看方式如下，需要使用-r参数：
    tcpdump -X -s 0 -r test.cap host 192.168.168.2 and tcp port 8000
使用tcpdump抓取HTTP包
    tcpdump  -XvvennSs 0 -i eth0 tcp[20:2]=0x4745 or tcp[20:2]=0x4854
0x4745 为"GET"前两个字母"GE",0x4854 为"HTTP"前两个字母"HT"。
tcpdump 对截获的数据并没有进行彻底解码，数据包内的大部分内容是使用十六进制的形式直接打印输出的。显然这不利于分析网络故障，通常的解决办法是先使用带-w参数的tcpdump
截获数据并保存到文件中，然后再使用其他程序(如Wireshark)进行解码分析。当然也应该定义过滤规则，以避免捕获的数据包填满整个硬盘。
**0x07 tcpdump 与wireshark**
Wireshark(以前是ethereal)是Windows下非常简单易用的抓包工具。但在Linux下很难找到一个好用的图形化抓包工具。
还好有Tcpdump。我们可以用Tcpdump + Wireshark 的完美组合实现：在 Linux 里抓包，然后在Windows 里分析包。
tcpdump tcp -i eth1 -t -s 0 -c 100 and dst port ! 22 and src net
192.168.1.0/24 -w ./target.cap
(1)tcp: ip icmp arp rarp 和 tcp、udp、icmp这些选项等都要放到第一个参数的位置，用来过滤数据报的类型
(2)-i eth1 : 只抓经过接口eth1的包
(3)-t : 不显示时间戳
(4)-s 0 : 抓取数据包时默认抓取长度为68字节。加上-S 0 后可以抓到完整的数据包
(5)-c 100 : 只抓取100个数据包
(6)dst port ! 22 : 不抓取目标端口是22的数据包
(7)src net 192.168.1.0/24 : 数据包的源网络地址为192.168.1.0/24
(8)-w ./target.cap : 保存成cap文件，方便用ethereal(即wireshark)分析