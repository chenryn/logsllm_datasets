3. Check the CRC checksum
4. Check if the private ID is correct
5. Compare the counters to the last saved state:
– Accept the OTP if the session counter has been incremented or
– If the session counter has not been incremented, accept the OTP if the
usage counter has increased
uiduseCtrtstpsessionCtrrndcrc623122Bytesconstantpredictablerandom / nearly randomIf the OTP does not meet one of the previous conditions, it is considered
invalid and the authentication fails. The conditions for the counters are in place
to avoid replay attacks.
2.3 Hardware of the Yubikey 2
The Yubikey 2 is mono-block molded and thus hermetically sealed. To ﬁnd out
which kind of µC is used in the Yubikey 2, we dissolved the casing with fuming
nitric acid to gain access to the silicon die (cf. Fig. 5a). The position of the µC was
known from a promotional video about the production of the Yubikey [29], from
which we extracted the picture of the Printed Circuit Board (PCB) shown in
Fig. 5a. On the die, we found the label ”SUNPLUSIT” (cf. Fig. 5c) which seems
to belong to Sunplus Innovation Technology Inc. based in Taiwan [24]. We were
unable to exactly ﬁnd out which controller was used, as there is no Sunplus part
related to the label ”AV7011”. However, all Human Interface Device (HID) µCs
produced by Sunplus employ an 8-bit architecture. This fact is important when
searching for a suitable power model for the SCA.
(a) PCB from [29]
(b) Complete die
(c) Die label
Fig. 5: Die of the µC in the Yubikey 2
3 Measurement Setup
To record power traces for an SCA, we built a simple adaptor to get access to the
USB power and data lines, cf. Fig. 6a. Note that the developed measurement
adaptor is not speciﬁc for the Yubikey, but can be used in general for power
measurements of USB devices. The basic setup gives simple access to the USB
lines and provides a pin to insert a shunt resistor for power measurements. The
D+ and D- lines are directly connected to the PC’s USB port. A 60 Ω resistor was
inserted into the ground line to measure the power consumption of the Yubikey.
In our ﬁrst experiments, we used Vcc provided by the USB port as power
supply for the Yubikey, however, this resulted in a high amount of measure-
ment noise. Therefore, an external power supply was added to reduce the noise
(a) USB adaptor
(b) EM probe
Fig. 6: Measurement methods: USB adaptor with shunt resistor and EM probe
at the position with maximal signal amplitude on the Yubikey 2
caused by the PC’s power supply. Figure 7a depicts the overall structure of the
measurement setup.
(a) Schematic
(b) Yubikey 2 with wire for
simulating button presses
Fig. 7: Setup for measuring the power consumption and EM emanation
A custom ampliﬁer was added to amplify the measured voltage drop over the
resistor. This was necessary because the measured (unampliﬁed) voltage was too
low to ﬁll the minimal input range of ±100 mV of the utilized oscilloscope, a
Picoscope 5204 Digital Storage Oscilloscope (DSO) [22]. All measurements were
recorded at a sample rate of 500 MHz. Initially, to perform the proﬁling of the
DUT described in Sect. 4, we focused on the power consumption measured via
the shunt resistor. However, in subsequent experiments and for improving the
key recovery described in Sect. 5, we also recorded the EM emanation of the DUT
by placing a commercially available near-ﬁeld probe [13] on an experimentally
determined position on the package of the Yubikey 2. The resulting signal was
ampliﬁed by 30 dB using an ampliﬁer made by Langer EMV [14]. The EM probe
on the casing to the Yubikey is depicted in Fig. 6b. The overall cost for the setup
used in this paper is approximately $ 3000. Hence, the attack described in Sect. 5
can be performed at low cost without sophisticated, expensive lab equipment.
3.1 Controlling the Yubikey
To initiate an encryption on the Yubikey, a capacitive button on top of the token
has to be pressed. This button is basically a open plate-type capacitor whose
capacitance changes when a ﬁnger is placed on top. For our purposes of automatic
measurements, manually pressing the button is not an option. However, the
ﬁnger can be “simulated” by connecting the blank metal contact on top of the
Yubikey 2 to ground. For this purpose, we used a MOSFET transistor controlled
by an ATXMega µC. The Yubikey with the controlling wire is depicted in Fig. 7b.
Note that this setup is not fully stable. This can lead to false button presses or
failures to press the button at all. Thus, the measurement software was prepared
to handle these problematic cases.
4 Side-Channel Proﬁling
The data acquisition of the DSO was triggered using a large drop within the
power consumption of the device caused by the status LED of the Yubikey
being turned oﬀ. A level dropout trigger–ﬁring when the signal has been below
a certain level for a deﬁned period of time–was employed. Note that the DUT
needs at least 2.6 seconds to “recover” after a button press. Incidentally, this
signiﬁcantly slows down the measurement process (and thus the overall attack)
because the speed of the data acquisition is limited by this property of the
Yubikey.
There are glitches regularly occuring in the power traces. These glitches are
apparently generated by the DUT and do not occur when simply measuring the
supply voltage without the DUT being connected. They follow a constant interval
of 1 ms, but do not have a constant oﬀset to the voltage drop. Because of this,
they might be caused by the USB Start Of Frame (SOF) packets that are sent
by the PC in an 1 ms interval actively polling the DUT. These glitches turned
out to be problematic because they have a large inﬂuence on the amplitude of
the trace and disturb the statistical methods used in the subsequent analysis. In
order to solve this problem, a MATLAB function was developed to detect these
wide glitches and discard the respective power trace. As a result, the eﬀective
number of power traces usable for SCA is approximately 65 % of the overall
number of recorded traces.
4.1 Locating the AES Encryption
When initially examining the power trace of the DUT, the signiﬁcant voltage
drop caused by shutting oﬀ the LED was used as a reference point. Right before
the voltage drop, a pattern can be observed that resembles a structure with ten
rounds, each approximately 200 µs long, cf. Fig. 8.
Fig. 8: Ten-round pattern in the power traces before the LED being shut oﬀ
Since the AES-128 employed on the Yubikey has ten rounds, it is likely that
this part of the trace belongs to the AES encryption. This is further conﬁrmed by
Fig. 9 showing an average trace computed using 1000 power traces. The ”rounds”
are clearly visible, and even diﬀerent operations are distinguishable within one
round. Note that, however, we were unable to observe single instructions within
one round, rather, it appears the traces are in some way low-pass ﬁltered. This
may, for instance, be due to a voltage regulator of the µC or decoupling capaci-
tors. Additionally, the tenth round at approximately 2.1 ms is 70 µs shorter than
the others, which agrees with the fact that the ﬁnal round of the AES algorithm
misses the MixColumns step.
Fig. 9: Average over 1000 ampliﬁed traces of the part suspected to belong to the
AES encryption
We recorded 20,000 traces of the part presumably belonging to the AES
operation. The 128-bit AES key was set to ad 5c 43 c5 2f 25 a7 4a 94 41
c2 1f 35 5b 43 09. The used sample rate was 500 MHz as mentioned in Sect. 3.
Experimentally, we found that (digitally) downsampling the traces by a factor
of ten does not aﬀect the success rate of the subsequent attack presented in
Sect. 5. Hence, to reduce the data and computation complexity, all experiments
described in the following included this pre-processing step.
We tested diﬀerent models for the power consumption of the device. An 8-
bit HW model for single bytes of the intermediate values within the AES turned
out to be suitable, conﬁrming the assumption that an 8-bit µC is used in the
Yubikey 2. To identify the diﬀerent AES operations within the rounds, a CPA
using the HW of certain output bytes of the S-boxes in round nine and of certain
input bytes to round ten as the power model (cf. Sect. 1.3) was performed. The
correlation results (after 6,400 power traces) can be exemplarily seen for byte 13
and 16 in Fig. 10.
The horizontal blue lines at ±0.05 indicate the expected “noise level” of
√
#traces. A correlation exceeding this boundary is considered signiﬁcant, i.e.,
4/
means that the DUT performs a computation involving the predicted value (in
this case state bytes in round nine and ten) at the respective point in time.
The rationale for this condition is given in [15]: For wrong predictions, the
correlation coeﬃcient follows a Gaussian distribution with standard deviation
√
σ = 1/
#traces. 99.99% of the samples taken from this distribution are within
√
±4σ, which yields the boundary of 4/
#traces.
Fig. 10: Correlation for byte 13 and 16, HW of the S-box output in round nine
(green, 10 . . . 25 µs) and HW of the input to round ten (red, 50 . . . 60 µs) using
6,400 traces
4.2 EM Measurements
As mentioned in Sect. 3, we also captured the EM emanation of the DUT at
the same time as the power consumption in subsequent experiments. The EM
traces mainly showed a clock signal at a frequency of 12 MHz. However, digitally
amplitude-demodulating [23] this signal yielded a trace not exhibiting the low-
pass ﬁltered shape observed for the power consumption traces. Figure 11 depicts
a power consumption trace (blue, bottom) and the corresponding demodulated
EM trace (green, top). In both cases, the round structure is discernible. Yet,
the EM trace allows to separately observe every clock cycle, while the power
consumption trace only shows the overall round structure.
Fig. 11: Power consumption trace (blue, bottom) and demodulated EM trace
(green, top). Vertical scaling and oﬀset changed to compare general signal shape
Similar to the power consumption traces, we also observed distorted EM
traces. However, the overall number of “usable” traces was higher compared to
the power consumption measurement: only 25 % of the EM traces had to be
discarded, compared to about 35 % for the power consumption traces.
5 Practical Attack: Extracting the AES Key
Having analysed the round structure and identiﬁed the points in time when the
leakage occurs, we continued with trying to recover the secret AES key. Initially,
we used the power traces, but switched to EM traces later to reduce the number
of required measurements and thus the time needed for the attack.
5.1 Key Recovery using Power Consumption Traces
We computed the correlation coeﬃcient for all 256 candidates for each key bytes
using 10,000 traces. The hypothetical power consumption hi (cf. Sect. 1.3) was
computed as hi = HW(cid:0)SBOX−1 (Ci ⊕ rk)(cid:1), with Ci a ciphertext byte (for
measurement i) and rk the corresponding byte of the round key (dropping the
byte index for better readability). The correlation coeﬃcients for the ﬁrst, sec-
ond, eighth and ninth key byte are exemplarily shown in Fig. 12. Evidently, the
maximum absolute value for the correlation coeﬃcient occurs for the correct key
candidate. This observation also holds for the remaining bytes, for which the
results are not depicted in Fig. 12.
To get an estimate of how many traces are needed to clearly distinguish the
correct key candidate from the wrong ones, the maximum correlation coeﬃcient
Fig. 12: Correlation coeﬃcient for all candidates for the key bytes 1, 2, 8, and 9
(left to right) after 10,000 traces. Red: correct key candidate, gray: wrong key
candidates
(at the point of leakage) for each candidate after each trace was saved. The
result after 10,000 traces is exemplarily depicted in Fig. 13 for the ﬁrst, second,
eighth and ninth key byte. The maximum correlation for all key bytes is shown
in Fig. 15 in Appendix 6.2.
Fig. 13: Evolution of the maximum correlation (vertical axis) over the number
of used traces (horizontal axis) for key bytes 1, 2, 8, and 9 (left to right). Red:
Correct key candidate
To estimate the number of traces needed to recover the key, we used the
ratio between the maximum correlation for the correct key candidate and the
highest correlation for the “second best” wrong candidate as a metric, cf. for
instance [20]. We then used the number of traces for which this ratio is greater
than 1.1 as the minimum number of required traces given in Table 1.
We were able to clearly determine the full 128-bit AES key using approx-
imately 4,500 traces. In this regard, it turned out that the number of traces
needed to recover a key byte diﬀers: For byte 1, 4, and 16, less than 1,000 traces
were suﬃcient. For byte 8, 9, 10, 11, 13, and 14, less than 3,000 traces suﬃced to
determine the correct value. For byte 2, 3, 5, 6, 7, 12, and 15, a number between
3,100 and 4,500 traces lead to the correct key byte being found.
Note that the pre-selection of the traces necessary due to the glitches men-
tioned in Sect. 4 eﬀectively requires more traces to be recorded: for 4,500 usable
traces, approximately 7,000 traces had to be measured in total. With our current
2
3
5
6
7
8
4
200
12
Key byte
# Required traces
1
700
9
4,400 3,300
11
10
Key byte
15
# Required traces 2,800 2,100 2,300 4,500 1,400 1,100 3,100
Table 1: Approximate number of required traces to recover respective bytes of
the AES key using power consumption traces. Metric: Ratio between correlation
for correct key candidate and second highest correlation greater than 1.1
4,100 4,200 4,300 2,200
16
13
500
14
measurement setup, 1,000 traces can be acquired in about 1.5 h, i.e., at a rate
of 11.1 traces/min. Thus, to obtain 7,000 traces in total, approximately 10.5 h of
access to the DUT were necessary.
The “spread” correlation peak with a width of 8.3 µs would translate to a
clock frequency of approximately 120 kHz. At this clock frequency, the execution
time of about 2.5 ms (cf. Fig. 9) would imply that the AES is performed in only
300 clock cycles. Considering that even highly optimized AES implementations
require about 3,000 cycles on similar (and probably more powerful) 8-bit µCs [3],
it appears that the leakage is distributed over several clock cycles, presumably