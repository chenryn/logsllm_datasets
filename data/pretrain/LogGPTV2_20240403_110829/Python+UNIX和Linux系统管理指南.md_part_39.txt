定一个自定义的安装目录，例如一个NFS挂载点，正如前一个示例所演示的一样。
境中，默认的安装目录是site-packages，你可以在这个目录中执行命令，但是也可以指
当你实际运行install命令时，它会复制build目录下的所有内容到安装目录。在Python环
面这样：
最后，当发布创建的包时，你会希望当你准备安装包时能够自行定义安装目录。通常创
构建rpm：
需要时就可以进行创建。
276
 python setup.py install
 python setup.py bdist_sdux
Ad-adrise/2is uouad/zuu/=aseq-pnq-- prsnq Ad-dnzas uoud
python setup.py bdist_rpm
python setup.py bdist_pkgtool
gzip-f9 dist/distutils_example-0.1.tar
tar -cf dist/distutils_example-0.1.tar distutiis_example-0.1
creating dist
hard linking setup.py distutils_example-0.1
hard linking README.txt distutils_example-0.1
第9章
www.TopSage.com
(and everything under it)
PDG
---
## Page 291
文件。如果不使用buildout.cfg文件运行bootstrap.py脚本，会得到以下的输出结果：
Plone，Plone是一个企业级的内容管理系统，其后有巨大的开发社区支持。在Buildout出
Buildout用户必须进行阅读。
得Buildout最新信息。事实上，这个文档与你获得的Buildout文档一样全面，对于一名
行开发。也建议你阅读Buildout手册（http://pypi.,python.org/pypi/zc.buildout），可以获
的依赖。在接下来的一节，我们将讨论分为两个部分：使用Buildout和使用Buildout进
复杂的应用，这些复杂的应用如果有bootstrap.Py和config文件存在，对自举会有复杂
Buildout是一个非常引人注目的新的包管理工具，且Python中提供支持。Buildout允许
第二步：定义一个简单的buildout.cfg文件。正如之前提到的，
具，称为liten，它可从中心Python库中找到（PyPI）。我们将使用Buildout来启动一个
演示Buildout最好的方法是使用它来进行安装。Noah已经写了一个de-duplicate命令行工
智能的软件，使用时仅需要你做两件事情：
可以使用Buildout来管理Python环境，这是许多人还不知道的事情。Buildout是一个非常
现之前，安装Plone是极度复杂的。现在，Buildout使得Plone的安装非常简便。
Buildout是一个被推荐的机制，Plone就是通过该机制进行部署的。可能你还不熟悉
尽管许多使用Zope技术的人会注意到Buildout，但其对于Python世界仍是一个秘密。
使用Buildout
第一步：下载bootstrap.py脚本。
Python环境，然后运行这个工具。
PublishingEnvironment的创建者，以及Zope公司的CTO。
Jim Fulton是Zope Object Database的创建者与维护者之一。 Jim同时也是Zope Object 
curl http://svn.zope.org/*checkout*/zc.buildout/trunk/
mkdir -p~/src/buildout_demo
具有“recipes”或“eggs”项的buildout.cfg文件来进行安装。
最新的bootstrap.py的副本。你可以在以下地址进行下载：http://svn.zope.org/
*checkout*/zc.buildout/trunk/bootstrap/bootstrap.py.
名人简介：BUILDOUT
www.TopSage.com
 Jim Fulton
，Buildout需要buildout.cfg
包管理丨277
PDG
---
## Page 292
278
$ 1s -1 bin
Got liten 0.1.3.
例9-5：运行Buildout并测试安装
现在，我们最终将Buildout工具安装完毕。可以运行它，前面定义的egg也会起作用。参
如果打开新创建的目录，会发现可执行的、包含在bin目录中的一个自定义的Python解释
如果我们以buildout.cfg保存这个文件，然后再次运行bootstrap.py脚本，会得到这样
例如，我们在例9-3中创建了配置文件。
>>>
Generated interpreter
$ bin/buildout
见例9-5。
器
Creating
Creating
例9-4：测试buildout环境
的输出结果如例9-4所示。
eggs =liten
[mypython]
parts = mypython
[buildout]
例9-3：创建配置文件示例
-rwxr-xr-x
-rWxI-xr-x
total 24
$ ls -1 bin
Error: Couldn't open /Usexs/ngift/src/buildout_demo/buildout.cfg
$ python bootstrap.py
第9章
directory
directory
1 ngift
'/Users/ngift/src/buildout_demo/bin'.
'/Users/ngift/src/buildout_demo/bin/mypython'.
staff
staff
651 Mar
362 Mar
www.TopSage.com
4 22:23 mypython
4 22:17 buildout
DG
---
## Page 293
Buildout会在它每次重运行时重新创建。
有一些命令行选项，在这个示例中，使用“-N”
现在，这是egg和解释器被删除后的Buildout再次运行的情况。值得注意的是，Buildout
例9-6：Buildout 配置文件
buildout.cfg文件来查找指令。这表示如果我们删除了列出的egg，它会有效删除命令行工
目或环境的正确依赖。为了真正显示Buildout的强大之处，我们应该看一下Buildout的另
这是一个非常强大而简单的示例，演示了buidlout如何创建一个独立的环境并自动部署项
一点，会看到接下来的输出结果：
了本地Buildout的bin目录中的模块外，能够自动安装一个控制台脚本。如果希望查看这
最后，因为liten与进入点一起被创建（进人点在本章前面部分已经介绍过），所以egg除
parts=
具和库，参见例9-6。
一个方面。Buildout对运行的目录有完全的控制权，并且每次Buildout运行时，它会读取
>>> import liten
$bin/mypython
-rWXI-Xr-X
total 24
[buildout]
IWXI-XI-x
X-IX-IXMI-
$ bin/buildout -N
plain number defaultst
Options:
A command-line tool for detecting duplicates using md5 checksums.
Usage:liten[starting directory][options]
$ bin/liten
/Users/ngift/src/buildout_demo
$pwd
Path to store duplication report.Default CWD
-rREPORT,
-q,_--quiet
--version
1
1ngift
1 ngift
--size=SIZE
1 ngift
--report=REPORT
staff
staff
staff
Runs doctest.
to MB (1 = 1MB)
File Size Example: 10bytes,
show program's version number and exit
show
258 Mar
362 Mar
651 Mar
www.TopSage.com
4 22:23 mypython
4 22:23 liten
4 22:17 buildout
，表示仅修改变化的文件。通常，
，10KB, 10MB,10GB,10TB, 0I
包管理”279
PDG
---
## Page 294
280
环境”。virtualenv解决的基本问题是消除了包冲突问题。通常会有这样的情况，某个工
根据Python Package Index页面的描述，
virtualenv
似下述配置文件，可以如同之前描述的那样运行Buildout：
控制的开发包上进行开发。开发者检查项目顶级的src目录。在src目录中，具有一个类
最一般的情况是，Buildout可以方便地使用。一个开发者或许是在一个独立的具有版本
我们已经介绍了一个简单地创建和销毁Buildout控制环境的示例，我们现在进一步创建
使用Buildout进行开发
它没有解释器：
如果我们查看eggs目录，可以看到安装了egg但没有激活。但是，我们不能运行它，因为
工具：
当我们查看bin目录时，发现解释器和命令行工具不见了。仅剩下实际的Buildout命令行
一个Buildout控制开发环境。
recipe
[test]
eggs=${config:mypkgs}
[scripts]
eggs =${config:mypkgs]
recipe = zc.recipe.egg
parts = test
develop=
drwxr-xr-x
total 640
$ ls -l eggs
-rwxr-xr-x 1 ngift staff 362 Mar 4 22:17 buildout
total 8
$ ls -1 bin/
recipe=
interpreter=python
[python]
[buildout]
X-IX-IXMIP
--I--I-MI-
drwxr-xr-x
第9章
= zc.recipe.testrunner
5ngift
7ngift
1
ngift
staff
staff 324858 Feb
staff
136 Mar
238Mar
www.TopSage.com
“virtualenv是一个工具，可以创建独立的Python
4 22:23 zc.recipe.egg-1.0.0-py2.5.egg
1623:47
4 22:54 liten-0.1.3-py2.5.egg
PDG
---
## Page 295
的操作的步骤：
装。一种方法是创建多个virtualenv脚本，可以与多个Python版本协同工作。该方法只需
如果你计划仅通过单一版本的Python来使用virtualenv，这个方法非常有用。如果在你
virtualenv都扩展使用了setuptools，目前 setuptools的维护者是Phillip J.Eby。
工作是非常相似的，虽然Buildout使用一个声明的配置文件。应该注意的是，Buildout和
virtualenv允许开发者通过自定义的环境配置来启动一个虚拟环境。这与Buildout所做的
site-packages目录隔离开。
下载最新的virtualenv版本，并且创建一个对第一个Python版本的别名即可。以下是具体
才能使工作正常进行，因为一次只能有一个virtualenv脚本可以在相同的脚本目录中安
Python3000，它们会共享相同的bin主目录（例如/usr/bin），那么需要一个可选的方法
的主机上有许多已经安装的Python版本，例如Python 2.4、Python2.5、Python2.6或
消除之前诸多问题的非常好的方式，因为它允许创建新的发送箱，这或许彻底地与全局
使用virtualenv来保持一个独立的、与系统Python相分离的virtualenv。virtualenv是一个
一种可选的方法是，一个开发者不具有对一个全局sit-packages目录的写权限，并且可以
的工具，
况：因为一些人无意地修改全局site-packages目录，以希望通过升级包来运行一个不同
具需要一个包版本，而另一个工具却需要另一个不同的包版本。这会产生一种危险的情
 sudo easy_install virtualenv
sudo cp virtualenv.py /usr/localbin/virtualenv.py;
 curl http://svn.colorstudy.com/virtualenv/trunk/virtualenv.py > virtualenv.py :
一个web应用就很可能被破坏。
ianbicking.org/.
SQLObject等。你可以在这里阅读他的非常有名的博客：http://blog.
Webob，这是Google App Engine的一部分，还有Paste、virtualenv、
Ian Bicking负责许多Python包，进行追踪都有些困难了。他编写了
名人简介：VIRTUALENV
www.TopSage.com
lan Bicking
包管理丨281
---
## Page 296
sandbox，而不需要键入全路径。这是一个可以使用的可选工具，不是必须的，因为总
另一个可选方法是，使用位于virtualenv中的bin目录下的活动脚本来设置环境，以使用
到虚拟环境的全路径：
最后值得注意的是，有两种方法可以与你创建的虚拟环境协同工作。你可以明确地调用
创建Python2.5虚拟环境：
创建Python2.4虚拟环境：
以下是一个示例，演示了具体实现。
在多脚本环境背后，
282
一个明显的特点是easy_install脚本，允许通过easy_install将包安装到虚拟环境中。
录。在bin目录中是Python解释器，使用lib目录作为它自己的本地site-packages目录。另
如果查看命令的输出结果，可以看到virtualenv创建了一个相对的bin目录和相对的lib目
 $ /src/virtualenv-py24/bin/python2.4
$ virtualenv-py24 /tmp/sandbox/py24ENV
activate
$1s /tmp/sandbox/py25ENV/bin/
bin/
Python 2.5.1 (r251:54863, Jan 17 2008,19:35:17)
Newpython executablein/tmp/sandbox/py25ENV/bin/python
$virtualenv-py25/tmp/sandbox/py25ENV
1s /tmp/sandbox/py25ENV/
activate
$ 1s/tmp/sandbox/py24ENV/bin/
Python 2.4.4 (#1, Dec 24 2007,.15:02:49)
alias virtualenv-py26="/usr/bin/python2.6 /usr/local/bin/virtualenv.py*
alias virtualenv-py24="/usr/bin/python2.4 /usr/local/bin/virtualenv.py"
在你的Bash或zsh中创建两个别名：
第9章
/lib/
'copyright",
，可以继续为每一个需要处理的Python版本创建多个virtualenv容器。
easy_install*
easy_install*
build 5465)
"credits"
www.TopSage.com
OT
OI
easy_install-2.5* python*
easy_install-2.4* python*
I "license" for more information.
"license" for more information.
python2.5@
python2.4@
---
## Page 297
我们不带任何参数执行liten-bootstrap.-py，我们会得到下面的输出结果：
时，我们会有一个liten-bootstrap-py文件，该文件可以发布给开发者或是终端用户。如果
码创建了一个bootstrap-py文件，并且这个bootstrap-py文件需要被运行。在执行这个脚本
中写一个新文件，然后加人一个自定义的模块liten的easy_install。值得注意的是，代
从本质上说，以上代码告诉after_install函数在当前称为liten-bootstrap-py的工作目录