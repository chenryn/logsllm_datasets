be converted to remote procedure calls. Figure 1 shows the archi-
tecture of ARMlock. ARMlock has two collaborating components:
a kernel module and a user library. The kernel module operates
on the (privileged) hardware to create and manage domains and
to facilitate inter-domain communication. It extends the kernel’s
system call interface to expose its services to applications. The
user library wraps ARMlock’s services in an easy-to-use API. The
host application uses this library to set up sandboxes and perform
inter-module calls. In ARMlock, untrusted modules are compiled
as position-independent shared libraries so that they can be loaded
at any suitable locations 1. After loading the module into memory,
the host requests the kernel to set up the sandbox for the module by
specifying its base address, length, and domain ID. The kernel then
goes through the host’s page table and updates the domain ID of
the entries associated with the sandbox. At run-time, the host and
the sandbox use the library to execute inter-module calls with the
help of the kernel.
2.3 Fault Domain
Each domain is allocated a block of memory with a unique do-
main ID. ARMlock manages the domain assignment and domain
access control register (DACR) independently for each process: do-
main IDs are assigned in the page table. They are naturally updated
when the page table is switched during context switch, and DACR
is saved and restored in the thread control block during context
1They have to be loaded at addresses that are 1MB-aligned because
only the ﬁrst-level page table entries contain the domain ID ﬁeld.
Figure 1: The architecture of ARMlock
switch. As such, each process is free to assign domains and control
their access rights. No overhead will be incurred to processes that
do not use ARMlock. At run-time, ARMlock updates DACR dur-
ing domain switch so that only the currently running domain is ac-
cessible. Speciﬁcally, it sets the current domain (and the kernel 2)
to the Client access right and all other domains to No Access.
Any attempt to access other domains will lead to a domain fault
and be trapped by the hardware. The trap is then routed to the host
application, which can respond by destroying the sandbox or ter-
minating the whole process. Note that multithreading is naturally
supported in ARMlock. First, each CPU core has its own DACR
register. The domain access right is thus determined individually
by each core. One core can run in the sandbox and another in the
host application. Second, each thread has its own DACR setting
that is saved in the thread control block. Switching thread will save
the current thread’s DACR and load the next thread’s DACR. If a
thread running in the sandbox preempts another one running in the
host, the former cannot access the host memory as determined by
its DACR.
Data can be legitimately exchanged across domains using the
kernel-assisted memory copy or shared memory.
In the former,
the owner of the memory provides an unforgeable token [11] to
the target domain, which then passes the token to the kernel along
with a destination buﬀer address. The kernel veriﬁes authenticity of
the token and copies the memory on behalf of the target domain if
veriﬁed. Speciﬁcally, the kernel temporarily makes both domains
accessible in DACR and copies the memory into the destination
buﬀer (there is no race condition in doing so because DACR is
saved and restored during thread context switch.) After that, DACR
is restored to the original value. In the latter, the memory shared
by those domains bears a third domain ID. This domain is set to
be accessible by both the host and the sandbox in DACR. In both
cases, the host should treat data from a sandbox as untrusted and
careful sanitize it. The application can choose which method to
use for data exchange. Particularly, the shared memory method has
better performance but may require more careful input sanitation.
Untrusted modules are compiled as the position-independent shared
libraries. Function calls inside a domain proceed as usual without
any performance penalty. Inter-module calls (line 2 and 5 in Fig-
ure 1) require help from the kernel because their target function lies
in a diﬀerent domain and is not directly accessible from the current
domain. To this end, ARMlock installs in each domain an entry
gate and a return gate. Those two gates are the only entry points
into a domain. ARMlock also creates a stub for each imported ex-
ternal function. To make an inter-module call, the caller calls the
stub (line 1 in Figure 1), which saves the current states and loads
the target function address and the parameters into registers before
calling the kernel for help (line 2). The kernel, instead of directly
2The kernel needs to be always available. It is protected from the
user-space by the hardware (not memory domains).
KernelARMlockThe HostFault DomainStubTargetEntryRetCaller123456RetEntryInter-Domain TransferIntra-Domain TransferSyscall Interpositionjumping to the target function, dispatches it through the entry gate
(line 3). When the remote function returns (line 4), the entry gate
in the target domain asks the kernel to return back to the original
domain (line 5), which then returns to the caller (line 6). In this
way, the kernel only needs to know the entry and return gates of a
domain but not any of the exported functions. Inter-module calls
involve delicate operations on the program states. The complicity
is handled for the programmers by the user library as described in
Section 3.1.
ARMlock imposes no constraints on the instructions that can be
executed by the untrusted module including system call instruc-
tions. Each sandbox has an associated in-kernel run-time environ-
ment managed by ARMlock to support system call and signal. Sys-
tem call is the interface for applications to request a wide range of
kernel services. For example, recent versions of the Linux kernel
have more than 330 system calls. Most of these system calls are
not used by a particular application (or untrusted module) but re-
main accessible thus unnecessarily exposing a large attack surface.
On the other hand, discreetly selected system calls can be safely
allowed to simplify implementation as well as to improve perfor-
mance. For example, an untrusted module can be allowed to receive
and send data on existing sockets created by the host application,
but not to create new ones. Each domain (including the host) has
its own system call interposition settings. The ARMlock kernel
module swaps this setting during domain switch.
The host and the sandboxed modules can specify their own sig-
nal handlers. ARMlock updates the signal handlers during domain
switches. To deliver a signal, the kernel needs to manipulate the
user-space memory (particularly the stack) and registers. A signal
can only be delivered to the currently active domain because other
domains are inaccessible. ARMlock allows only synchronous sig-
nals (i.e., signals caused directly by the execution of instructions
such as SIGSEGV, the segment fault) to be delivered to a sandbox.
Asynchronous signals currently are not allowed for sandboxes be-
cause the domain may have changed before the signal is delivered.
For example, the alarm function in libc schedules the SIGALRM
signal to be sent to the process in the future. The signal may be de-
livered to an unrelated domain (whichever domain is active at the
time of signal delivery). In ARMlock, asynchronous signals can
only be handled by the host. When running in a sandbox, those
signals will be re-routed to the host for processing.
2.4 A Programming Model for Sandbox: Corou-
tine
To take full advantage of SFI systems (ARMlock included), pro-
grammers need to shift the programming paradigm to which mod-
ules with diﬀerent privileges, origins, or security requirements are
isolated from each other [45]. Isolating untrusted modules can sig-
niﬁcantly lower the risk of the host application being compromised.
However, cross-domain access is rather unnatural and clumsy. No-
tice that in ARMlock, the stub issues a system call to perform an
inter-module call (line 2 in Figure 1). This system call enters in one
domain (the host) but emerges from another domain (a sandbox).
This structure can naturally support a more intuitive programming
model for sandboxing, namely coroutine, in which a set of routines
can collaborate by voluntarily ceding CPU time to others. Corou-
tines are useful in solving many problems such as state machines,
producer-consumer problems, and generators [6]. ARMlock pro-
vides built-in support for coroutines.
ARMlock introduces two primitives, yield and resume, to sup-
port coroutines. Yield explicitly gives CPU to the collaborating
routine, while resume resumes execution of the previous routine.
Figure 2 contains a simple program to demonstrate how to use
producer(fd)
while (i = yield()) (cid:44) -1 do
1: procedure consumer(fd)
2:
3:
use(i)
4:
end while
5:
6: end procedure
7:
8: procedure producer(fd) /*untrusted, sandboxed*/
9:
10:
11:
12:
13:
end for
14:
15:
return(-1)
16: end procedure
read_and_decrypt(fd, buf)
resume()
for p = bu f ; p < end_o f _bu f ; p++ do
ch = decode_next(buf, &p)
resume(ch)
Figure 2: Coroutine example
coroutines in ARMlock. In this example, the host consumes data
generated by the producer, which uses a “complex” algorithm to
parse the untrusted input ﬁle. Consumer cedes the CPU time to
producer in line 3, and producer parses the next input item and
returns it to consumer in line 13. The execution continues at line
3 as if yield has returned with the data passed to resume in line
13. With coroutines, the sandboxed code can be expressed in its
natural logic. For example, producer can loop through the input
and simply return each item implicitly using resume. Also, closely
related states can be kept together (e.g., buf, p, and end_of_buf
are all in the sandbox). An advantage of ARMlock is that corou-
tines can be implemented solely in the user library by leveraging
the ARMlock kernel interface. No additional kernel modiﬁcation
is required to support yield and resume. The implementation de-
tails are described in Section 3.2.
The use of coroutines in ARMlock-protected programs is op-
tional. Programmers can use either coroutines or the traditional
function calls for the sandbox, whichever suits the problem better.
In section 4, we give some examples of using coroutines to simplify
refactoring of some existing applications.
3.
IMPLEMENTATION
In this section, we give details about our prototype of ARM-
lock for Linux. The prototype supports the ARMv6 and ARMv7
sub-architectures due to their popularity and the support of mem-
ory domain. These two sub-architectures cover a wide variant of
ARM processors from the low-end ARM11 processors in Rasp-
berry Pi [29] to the powerful Cortex A9 and Cortex A15 processors
that are popular in high-end mobile devices and a potential com-
petitor in data centers [4].
3.1 ARMlock Kernel Module
ARMlock leverages the hardware feature to isolated untrusted
modules, and thus requires the kernel privilege to change important
hardware/software states (e.g., the page table). Our prototype has a
kernel module and a user library that collaborate to provide SFI for
applications. The kernel module has a compact design to avoid sig-
niﬁcant increase to the kernel’s TCB (design goal 3) and to enable
fast domain switch (design goal 2). Our prototype introduces less
than 500 lines of code in the kernel, and the main kernel remains
intact except for two minor changes (in 5 lines) to address incom-
patibility with ARMlock: ﬁrst, there is a small section of kernel
memory wrongfully set to the user domain (domain 2). Two lines
are changed in the kernel memory conﬁguration table (mem_types
in arch/arm/mm/mmu.c) to correct it. Second, the kernel consid-
ers every domain fault as a kernel exception and panics upon one (a
reasonable design since no other components used memory domain
before.) Three lines are added in arch/arm/mm/fsr-2level.c to
deliver them to the application if they happen in the user mode.
ARMlock’s kernel module is responsible for creating and switch-
ing domains. The host application can specify the settings for a
fault domain, including the memory region and its domain ID, the
address of the entry gate and the return gate, the initial stack (each
domain has its own stack), as well as allowed system calls. Given
those parameters, the kernel creates the sandbox by manipulating
the host’s page table. Speciﬁcally, it locates the ﬁrst-level page
table entries that map the memory of the sandbox, and sets their
memory domain to the provided one. However, the main kernel is
not aware of ARMlock. It might overwrite the domain ID when up-
dating its page table, for example, to swap out and swap in pages.
To address this problem, ARMlock registers a callback to the MMU
notiﬁer (change_pte) so that ARMlock will be notiﬁed whenever
those page table entries have been changed. ARMlock can then re-
cover their domain IDs. The host application also needs to provide
its own entry and return gate addresses to the kernel so the untrusted
module can remotely call the host’s functions. Once the sandbox
has been set up, the host issues an ENABLE_ARMlock command
to the kernel that will prevent any further changes to the sandbox.
That is, the sandbox cannot call the kernel to change itself.
The second responsibility of ARMlock’s kernel module is to fa-
cilitate inter-module calls. To this end, it provides two commands,
ARMlock_CALL for inter-module calls, and ARMlock_RET for inter-
module returns. In both cases, ARMlock ﬁrst modiﬁes DACR to
make the current domain inaccessible and the next domain acces-
sible. It then updates the signal handlers and system call interpo-
sition. Finally, it manipulates the saved application states so that
execution will continue at the next domain when the system call re-
turns. Speciﬁcally, the kernel saves the user registers to the kernel
stack (struct pt_regs) when entering the kernel. These saved
registers can be located by ARMlock. To switch domains, ARM-
lock overwrites the saved stack pointer (r13) and program counter
(r15) with those of the next domain. When kernel returns from the
system call, it restores the saved registers and returns to the user-
space. The execution continues at the restored program counter
with the restored stack, and transits to the next domain. From the
application’s point of view, those two system calls enter from one
domain but emerge from the other domain (instead of the original
domain as normal system calls do). This provides the necessary
structure to support coroutines. Moreover, the other registers are
not modiﬁed by ARMlock. They can be used to pass parameters for
inter-module calls. It is important for the current domain to clear
unused registers to prevent cross-domain information leakage.
ARMlock’s kernel module only recognizes the entry and return
gates of a domain. It does not need to know any of the exported
functions. Particularly, the ARMlock_CALL command always tran-
sits to the entry gate of the next domain, which further dispatches
the execution to the target function. ARMlock_RET always tran-
sits to the return gate of the caller domain, which subsequently re-
turns to the original caller. As such, the kernel is oblivious of how
function calls are dispatched or returned. The application needs to
maintain adequate states for inter-module calls. For example, the
caller could push the return address (in r14) to the stack and load
the target function address in one of the registers. The details of
inter-domain calls are handled by the user library and are mostly
transparent to the programmers (Section 3.2). The entry and the
return gates are the only two entry points to a domain. This pro-