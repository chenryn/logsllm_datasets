example has been executed on a Windows Server system.) To confirm this, just copy the file from 
the tiered disk to a fast SSD volume. You should see a slow transfer speed (usually between 160 
and 250 MB/s depending on the rotating disk speed):
EXPERIMENT: Witnessing file pinning in tiered volumes
As we have described in the previous section, the NTFS allocator uses a specific algorithm to 
decide which tier to allocate from. In this experiment, you copy a big file into a tiered volume 
and understand what the implications of the File Pinning operation are. After the copy finishes, 
open an administrative PowerShell window by right-clicking on the Start menu icon and select-
ing Windows PowerShell (Admin) and use the Get-FileStorageTier command to get the tier 
information for the file:
PS E:\> Get-FileStorageTier -FilePath 'E:\Big_Image.iso' | FL FileSize, 
DesiredStorageTierClass, FileSizeOnPerformanceTierClass, FileSizeOnCapacityTierClass, 
PlacementStatus, State
FileSize
: 4556566528
DesiredStorageTierClass
: Unknown
FileSizeOnPerformanceTierClass : 0
FileSizeOnCapacityTierClass    : 4556566528
PlacementStatus
: Unknown
State
: Unknown
The example shows that the Big_Image.iso file has been allocated from the Capacity Tier. (The 
example has been executed on a Windows Server system.) To confirm this, just copy the file from 
the tiered disk to a fast SSD volume. You should see a slow transfer speed (usually between 160 
and 250 MB/s depending on the rotating disk speed):
650
CHAPTER 11
Caching and file systems
You can now execute the “pin” request through the Set-FileStorageTier command, like in the 
following example:
PS E:\> Get-StorageTier -MediaType SSD | FL FriendlyName, Size, FootprintOnPool, UniqueId 
FriendlyName    : SSD 
Size            : 128849018880 
FootprintOnPool : 128849018880 
UniqueId
: {448abab8-f00b-42d6-b345-c8da68869020} 
PS E:\> Set-FileStorageTier -FilePath 'E:\Big_Image.iso' -DesiredStorageTierFriendlyName 
'SSD'
PS E:\> Get-FileStorageTier -FilePath 'E:\Big_Image.iso' | FL FileSize, 
DesiredStorageTierClass, FileSizeOnPerformanceTierClass, FileSizeOnCapacityTierClass, 
PlacementStatus, State 
FileSize
: 4556566528 
DesiredStorageTierClass
: Performance 
FileSizeOnPerformanceTierClass : 0 
FileSizeOnCapacityTierClass    : 4556566528 
PlacementStatus
: Not on tier 
State
: Pending
The example above shows that the file has been correctly pinned on the Performance 
tier, but its content is still stored in the Capacity tier. When the Tiering Engine scheduled task 
runs, it moves the file extents from the Capacity to the Performance tier. You can force a Tier 
Optimization by running the Drive optimizer through the defrag.exe /g built-in tool:
PS E:> defrag /g /h e:
Microsoft Drive Optimizer
Copyright (c) Microsoft Corp.
Invoking tier optimization on Test (E:)...
Pre-Optimization Report:
Volume Information:
Volume size
= 2.22 TB
Free space
= 1.64 TB
Total fragmented space
= 36%
Largest free space size     = 1.56 TB
Note: File fragments larger than 64MB are not included in the fragmentation statistics.
The operation completed successfully.
Post Defragmentation Report:
Volume Information:
Volume size
= 2.22 TB
Free space
= 1.64 TB
Storage Tier Optimization Report:
You can now execute the “pin” request through the Set-FileStorageTier command, like in the 
following example:
PS E:\> Get-StorageTier -MediaType SSD | FL FriendlyName, Size, FootprintOnPool, UniqueId
FriendlyName    : SSD
Size            : 128849018880
FootprintOnPool : 128849018880
UniqueId
: {448abab8-f00b-42d6-b345-c8da68869020}
PS E:\> Set-FileStorageTier -FilePath 'E:\Big_Image.iso' -DesiredStorageTierFriendlyName 
'SSD'
PS E:\> Get-FileStorageTier -FilePath 'E:\Big_Image.iso' | FL FileSize, 
DesiredStorageTierClass, FileSizeOnPerformanceTierClass, FileSizeOnCapacityTierClass, 
PlacementStatus, State
FileSize
: 4556566528
DesiredStorageTierClass
: Performance
FileSizeOnPerformanceTierClass : 0
FileSizeOnCapacityTierClass    : 4556566528
PlacementStatus
: Not on tier
State
: Pending
The example above shows that the file has been correctly pinned on the Performance 
tier, but its content is still stored in the Capacity tier. When the Tiering Engine scheduled task 
runs, it moves the file extents from the Capacity to the Performance tier. You can force a Tier 
Optimization by running the Drive optimizer through the defrag.exe /g built-in tool:
PS E:> defrag /g /h e:
Microsoft Drive Optimizer
Copyright (c) Microsoft Corp.
Invoking tier optimization on Test (E:)...
Pre-Optimization Report:
Volume Information:
Volume size
= 2.22 TB
Free space
= 1.64 TB
Total fragmented space
= 36%
Largest free space size     = 1.56 TB
Note: File fragments larger than 64MB are not included in the fragmentation statistics.
The operation completed successfully.
Post Defragmentation Report:
Volume Information:
Volume size
= 2.22 TB
Free space
= 1.64 TB
Storage Tier Optimization Report:
CHAPTER 11
Caching and file systems
651
% I/Os Serviced from Perf Tier  Perf Tier Size Required
100%
28.51 GB *
95%
22.86 GB 
...
20%
2.44 GB
15%
1.58 GB
10%
873.80 MB
5%
361.28 MB
* Current size of the Performance tier: 474.98 GB
Percent of total I/Os serviced from the Performance tier: 99%
Size of files pinned to the Performance tier: 4.21 GB
Percent of total I/Os: 1%
Size of files pinned to the Capacity tier: 0 bytes
Percent of total I/Os: 0%
The Drive Optimizer has confirmed the “pinning” of the file. You can check again the “pinning” 
status by executing the Get-FileStorageTier command and by copying the file again to an SSD 
volume. This time the transfer rate should be much higher, because the file content is entirely 
located in the Performance tier.
PS E:\> Get-FileStorageTier -FilePath 'E:\Big_Image.iso' | FL FileSize, DesiredStorageTierClass, 
FileSizeOnPerformanceTierClass, FileSizeOnCapacityTierClass, PlacementStatus, State
FileSize
: 4556566528
DesiredStorageTierClass
: Performance
FileSizeOnPerformanceTierClass : 0
FileSizeOnCapacityTierClass    : 4556566528
PlacementStatus
: Completely on tier
State
: OK
You could repeat the experiment in a client edition of Windows 10, by pinning the file in the 
Capacity tier (client editions of Windows 10 allocate file’s clusters from the Performance tier by 
default). The same “pinning” functionality has been implemented into the FsTool application 
available in this book’s downloadable resources, which can be used to copy a file directly into a 
preferred tier.
% I/Os Serviced from Perf Tier  Perf Tier Size Required
100%
28.51 GB *
95%
22.86 GB 
...
20%
2.44 GB
15%
1.58 GB
10%
873.80 MB
5%
361.28 MB
* Current size of the Performance tier: 474.98 GB
Percent of total I/Os serviced from the Performance tier: 99%
Size of files pinned to the Performance tier: 4.21 GB
Percent of total I/Os: 1%
Size of files pinned to the Capacity tier: 0 bytes
Percent of total I/Os: 0%
The Drive Optimizer has confirmed the “pinning” of the file. You can check again the “pinning” 
status by executing the Get-FileStorageTier command and by copying the file again to an SSD 
Get-FileStorageTier command and by copying the file again to an SSD 
Get-FileStorageTier
volume. This time the transfer rate should be much higher, because the file content is entirely 
located in the Performance tier.
PS E:\> Get-FileStorageTier -FilePath 'E:\Big_Image.iso' | FL FileSize, DesiredStorageTierClass, 
FileSizeOnPerformanceTierClass, FileSizeOnCapacityTierClass, PlacementStatus, State
FileSize
: 4556566528
DesiredStorageTierClass
: Performance
FileSizeOnPerformanceTierClass : 0
FileSizeOnCapacityTierClass    : 4556566528
PlacementStatus
: Completely on tier
State
: OK
You could repeat the experiment in a client edition of Windows 10, by pinning the file in the 
Capacity tier (client editions of Windows 10 allocate file’s clusters from the Performance tier by 
default). The same “pinning” functionality has been implemented into the FsTool application 
available in this book’s downloadable resources, which can be used to copy a file directly into a 
preferred tier.
652
CHAPTER 11
Caching and file systems
TS file system driver
As described in Chapter 6 in Part I, in the framework of the Windows I/O system, NTFS and other file 
systems are loadable device drivers that run in kernel mode. They are invoked indirectly by applica-
tions that use Windows or other I/O APIs. As Figure 11-28 shows, the Windows environment subsystems 
call Windows system services, which in turn locate the appropriate loaded drivers and call them. (For a 
description of system service dispatching, see the section “System service dispatching” in Chapter 8.)
Environment
subsystem
or DLL
User mode
Kernel mode
Kernel
Object
manager
Security
reference
monitor
Windows
executive
…
Advanced
local
procedure
call
facility
Memory
manager
Windows system services
NTFS driver
Volume
manager
Disk driver
I/O manager
FIGURE 11-28 Components of the Windows I/O system.
The layered drivers pass I/O requests to one another by calling the Windows executive’s I/O man-
ager. Relying on the I/O manager as an intermediary allows each driver to maintain independence so 
that it can be loaded or unloaded without affecting other drivers. In addition, the NTFS driver interacts 
with the three other Windows executive components, shown in the left side of Figure 11-29, which are 
closely related to file systems.
The log file service (LFS) is the part of NTFS that provides services for maintaining a log of disk 
writes. The log file that LFS writes is used to recover an NTFS-formatted volume in the case of a system 
failure. (See the section “Log file service” later in this chapter.)
CHAPTER 11
Caching and file systems
653
Log file
service
Write the
cache
Cache
manager
Access the mapped
file or flush the cache
Memory
manager
Flush the
log file
Log the
transaction
Read/write the file
Load data
from disk
into
memory
Read/write a
mirrored or
striped volume
Read/write
the disk
Disk driver
Volume
manager
NTFS driver
I/O manager
FIGURE 11-29 NTFS and related components.
As we have already described, the cache manager is the component of the Windows executive that 
provides systemwide caching services for NTFS and other file system drivers, including network file sys-
tem drivers (servers and redirectors). All file systems implemented for Windows access cached files by 
mapping them into system address space and then accessing the virtual memory. The cache manager 