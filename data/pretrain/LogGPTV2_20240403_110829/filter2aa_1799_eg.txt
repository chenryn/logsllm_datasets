### Experiment: Observing File Pinning in Tiered Volumes

In the previous section, we discussed how the NTFS allocator uses a specific algorithm to determine which tier to allocate from. In this experiment, you will copy a large file into a tiered volume and observe the implications of the File Pinning operation.

#### Step 1: Copy the File
1. Copy a large file (e.g., `Big_Image.iso`) to a tiered volume.
2. Open an administrative PowerShell window by right-clicking the Start menu icon and selecting "Windows PowerShell (Admin)".
3. Use the `Get-FileStorageTier` command to get the tier information for the file:

```powershell
PS E:\> Get-FileStorageTier -FilePath 'E:\Big_Image.iso' | FL FileSize, DesiredStorageTierClass, FileSizeOnPerformanceTierClass, FileSizeOnCapacityTierClass, PlacementStatus, State
```

Example output:
```
FileSize                     : 4556566528
DesiredStorageTierClass      : Unknown
FileSizeOnPerformanceTierClass : 0
FileSizeOnCapacityTierClass    : 4556566528
PlacementStatus              : Unknown
State                        : Unknown
```

This output indicates that `Big_Image.iso` has been allocated from the Capacity Tier. To confirm, copy the file from the tiered disk to a fast SSD volume. You should observe a slow transfer speed, typically between 160 and 250 MB/s, depending on the rotating disk speed.

#### Step 2: Pin the File to the Performance Tier
1. Use the `Set-FileStorageTier` command to pin the file to the Performance Tier:

```powershell
PS E:\> Set-FileStorageTier -FilePath 'E:\Big_Image.iso' -DesiredStorageTierFriendlyName 'SSD'
```

2. Verify the pinning status using the `Get-FileStorageTier` command again:

```powershell
PS E:\> Get-FileStorageTier -FilePath 'E:\Big_Image.iso' | FL FileSize, DesiredStorageTierClass, FileSizeOnPerformanceTierClass, FileSizeOnCapacityTierClass, PlacementStatus, State
```

Example output:
```
FileSize                     : 4556566528
DesiredStorageTierClass      : Performance
FileSizeOnPerformanceTierClass : 0
FileSizeOnCapacityTierClass    : 4556566528
PlacementStatus              : Not on tier
State                        : Pending
```

This output shows that the file is correctly pinned to the Performance Tier, but its content is still stored in the Capacity Tier. The Tiering Engine scheduled task will move the file extents from the Capacity to the Performance Tier. You can force a Tier Optimization by running the Drive Optimizer with the `defrag.exe /g` command:

```powershell
PS E:\> defrag /g /h e:
```

#### Step 3: Verify the Pinning
1. Run the `Get-FileStorageTier` command again to check the pinning status:

```powershell
PS E:\> Get-FileStorageTier -FilePath 'E:\Big_Image.iso' | FL FileSize, DesiredStorageTierClass, FileSizeOnPerformanceTierClass, FileSizeOnCapacityTierClass, PlacementStatus, State
```

Example output:
```
FileSize                     : 4556566528
DesiredStorageTierClass      : Performance
FileSizeOnPerformanceTierClass : 4556566528
FileSizeOnCapacityTierClass    : 0
PlacementStatus              : Completely on tier
State                        : OK
```

2. Copy the file again to an SSD volume. This time, the transfer rate should be much higher because the file content is entirely located in the Performance Tier.

#### Additional Notes
- You can repeat this experiment on a client edition of Windows 10, where files are allocated from the Performance Tier by default.
- The same pinning functionality is available in the FsTool application, provided in the downloadable resources of this book, which can be used to copy a file directly into a preferred tier.

### NTFS and Related Components

As described in Chapter 6, NTFS and other file systems in the Windows I/O system are loadable device drivers that run in kernel mode. They are invoked indirectly by applications using Windows or other I/O APIs. Figure 11-28 illustrates the components of the Windows I/O system.

**Figure 11-28: Components of the Windows I/O System**

The layered drivers pass I/O requests to one another through the Windows executiveâ€™s I/O manager, allowing each driver to maintain independence. The NTFS driver interacts with several other Windows executive components, as shown in Figure 11-29.

**Figure 11-29: NTFS and Related Components**

The log file service (LFS) is a part of NTFS that maintains a log of disk writes, used for recovery in case of a system failure. The cache manager provides system-wide caching services for NTFS and other file system drivers, including network file system drivers. All file systems access cached files by mapping them into system address space and then accessing virtual memory.