title:Stealthy Tracking of Autonomous Vehicles with Cache Side Channels
author:Mulong Luo and
Andrew C. Myers and
G. Edward Suh
Stealthy Tracking of Autonomous Vehicles with 
Cache Side Channels
Mulong Luo, Andrew C. Myers, and G. Edward Suh, Cornell University
https://www.usenix.org/conference/usenixsecurity20/presentation/luo
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Stealthy Tracking of Autonomous Vehicles with Cache Side Channels
Mulong Luo
Cornell University
PI:EMAIL
Andrew C. Myers
Cornell University
PI:EMAIL
G. Edward Suh
Cornell University
PI:EMAIL
Abstract
Autonomous vehicles are becoming increasingly popular,
but their reliance on computer systems to sense and operate
in the physical world introduces new security risks. In this
paper, we show that the location privacy of an autonomous ve-
hicle may be compromised by software side-channel attacks
if localization software shares a hardware platform with an
attack program. In particular, we demonstrate that a cache
side-channel attack can be used to infer the route or the lo-
cation of a vehicle that runs the adaptive Monte-Carlo local-
ization (AMCL) algorithm. The main contributions of the
paper are as follows. First, we show that adaptive behaviors
of perception and control algorithms may introduce new side-
channel vulnerabilities that reveal the physical properties of a
vehicle or its environment. Second, we introduce statistical
learning models that infer the AMCL algorithm’s state from
cache access patterns and predict the route or the location of
a vehicle from the trace of the AMCL state. Third, we imple-
ment and demonstrate the attack on a realistic software stack
using real-world sensor data recorded on city roads. Our ﬁnd-
ings suggest that autonomous driving software needs strong
timing-channel protection for location privacy.
1 Introduction
Recent years have seen signiﬁcant efforts to develop au-
tonomous vehicles. Autonomous unmanned aerial vehicles
(UAVs) have already been used in some cases for commercial
parcel delivery [21]. Today’s passenger vehicles include many
advanced driver assistance features, and future vehicles are
expected to have even more autonomous driving capabilities.
For example, Tesla vehicles include the Autopilot [14] system,
which enables autonomous cruise on freeways. Uber [15] and
Waymo [18] are testing commercial taxicab services using
fully autonomous vehicles. While autonomous vehicles can
enable many exciting applications, they also introduce new
security risks by allowing a computing system to sense and
control the physical system.
In this paper, we show that the location privacy of an au-
tonomous vehicle may be compromised by software side-
channel attacks when the vehicle’s driving software and the
attack software share a hardware platform. In particular, we
demonstrate that a cache side-channel attack can be used to
infer the route/location of a vehicle that uses the adaptive
Monte-Carlo localization (AMCL) algorithm [35] for local-
ization. Previous studies on traditional computer systems have
demonstrated many cache side-channel attacks for inferring
conﬁdential information, so it is not surprising to ﬁnd cache
side channels in the computing platforms of autonomous ve-
hicles. What is novel and interesting about our attack is that
the cache side channel can be used to infer a victim vehicle’s
physical state, exploiting the correlation between the physical
state of the vehicle and the cache access patterns of the ve-
hicle’s control software. Moreover, our experimental results
show that this information leak is sufﬁcient to identify the
vehicle’s route from a set of routes in the known environment,
and even the location of a vehicle if an attacker knows the
vehicle’s initial location.
In autonomous vehicles, perception and control algorithms
are often adaptive in order to improve their efﬁciency and
accuracy. The adaptive algorithms perform more computation
when there is more uncertainty in the environment or an event
that affects the vehicle’s state, such as a new obstacle showing
up or the vehicle making a turn; conversely, they perform
less computation when there is no signiﬁcant change. These
adaptive behaviors are natural and important for efﬁciency.
However, they also create strong correlation between the al-
gorithm’s memory access patterns and a vehicle’s physical
movement and environment. For example, we found that the
amount of data accessed by the AMCL algorithm, commonly
used for localization, reveals when the algorithm’s uncertainty
on the vehicle’s location changes. This correlation allows our
cache side-channel attack to infer when a vehicle is turning.
While the observation that the AMCL algorithm’s cache
behavior is strongly correlated to a vehicle’s physical state is
interesting by itself, we found that cache side-channel attacks
on an autonomous vehicle’s control software introduce new
challenges that do not exist in traditional cache side-channel
attacks. Unlike cryptograhic keys in memory, the physical
state of a vehicle changes continuously as the vehicle moves.
Work on inferring AES keys via cache side channels has ag-
gregated results from multiple measurements [55]. However,
USENIX Association
29th USENIX Security Symposium    859
it is difﬁcult to measure the fast-changing physical state of a
vehicle multiple times using a cache side channel. Moreover,
physical environments are inherently noisy. As a result, cache
timing measurements are affected not only by noise in the
computing system but also by physical noise.
In this paper, we address these challenges and demonstrate
an end-to-end cache side-channel attack on the location pri-
vacy of an autonomous vehicle. Speciﬁcally, we demonstrate
that an unprivileged user-space program, without access to
sensor inputs or protected state of control software, can pre-
dict the route or the location of an autonomous vehicle using
a prime-and-probe cache timing channel attack on the control
software. Our attacks differ from many previous cache side
channel attack in that we use timing measurements over a
period of time when a vehicle is moving. We introduce a
statistical learning model based on random forests to predict
the route or the location of a vehicle from cache timing mea-
surements while dealing with noise. The experimental results
based on both a simulated robot and recorded data from a
real-world vehicle show that this attack can fairly accurately
predict the vehicle’s route or location.
Our results show that the location privacy of an autonomous
vehicle can be compromised when its perception and control
software share hardware resources with less trusted software.
Without new processor designs that provide strong isolation
guarantees regarding timing channels, our ﬁndings suggest
that separate platforms should be used for autonomous driving
software and the rest of the system.
The following summarizes the main contributions of the
paper:
• We show that the adaptive behaviors of perception and
control algorithms may introduce a new security vulner-
ability that reveals the physical properties of a vehicle
or its environment through side channels.
• We introduce statistical-learning models that predict the
AMCL algorithm’s state from its cache access patterns,
and infer the route or the location of a vehicle from the
trace of the predicted AMCL state.
• We implement and demonstrate the attack on a realistic
software stack using both simulated environments and
real-world sensor data recorded from a vehicle.
The rest of paper is organized as follows. Section 2 dis-
cusses the threat model. Section 3 discusses the background
on autonomous vehicles and cache side channels. Section 4
describes the attack implementation. Section 5 describes our
testbeds and evaluates the attack’s effectiveness. Section 6
discusses the implications of the attack, and Section 7 reviews
related work. Finally, we conclude the paper in Section 8.
Figure 1: The threat model. The attack software runs on the
same processor with the autonomous-driving software, and
learns the route of the vehicle through cache side channels.
2 Threat Model
The goal of the attacker is to infer the location information
of a vehicle based on cache side channels. In particular, the
attacker predicts the route that an autonomous vehicle takes
from a set of known routes.
Figure 1 illustrates the threat model discussed in this paper.
While the ﬁgure shows a passenger vehicle as an example, we
note that the proposed attack method and principle may be
applied to other autonomous vehicles such as delivery robots
or drones. We assume that the attacker is an entity that can
deploy a software module on the vehicle. We refer to the soft-
ware module as “attack software” or “attack process”. In this
paper, we use process, program, and software interchangeably.
The victim is an autonomous vehicle (the “victim vehicle”)
whose route information needs to be protected. Localiza-
tion software on the victim vehicle (the “victim software”
or “victim process”) has direct access to sensors and to its
location-related information, and is the target of our cache-
side channel attack. The attacker has no physical access to
the victim vehicle, and performs its attack only through the
attack software. We assume that the attack software cannot
circumvent the access controls of the operating system and
has no direct access to the location information.
Assumptions on the attacker. We assume that the attacker
knows details of the victim vehicle including the software and
hardware conﬁguration of its computing platform as well as
the mechanical system. We also assume that an attacker has
detailed knowledge of the environment in which the victim
vehicle operates and knows a set of routes that the victim may
take. For example, the attacker should have the map of the
victim’s environment, and may use another vehicle to collect
detailed sensor measurements of the area in order to train its
prediction models. The aim of the attack is to infer the victim
vehicle’s route or location in a known environment, rather
than to track the victim vehicle in an unknown environment.
To make cache side-channel attacks possible, we assume
860    29th USENIX Security Symposium
USENIX Association
HospitalAirportRestaurantVictim processAttack processLidar, GPS, etc.Route orlocation CacheComputerHome: Vehicle’s starting locationRoute 03Route 01Route 02that attack software can run on the same processor where
victim software runs. This co-location may be achieved by
compromising less safety-critical software components that
are already on the victim or via untrusted applications that is
allowed to be installed. The attack software is also assumed to
be able to send the vehicle’s location information to a remote
attacker once it acquires the information. On the other hand,
we assume that the operating system securely prevents the
attack software from directly reading sensors or the location.
Assumptions on the victim. We consider an autonomous
vehicle that is controlled by an onboard computer. We as-
sume that the autonomous-driving software uses an adap-
tive algorithm, such as adaptive Monte-Carlo localization
(AMCL) [35] for localization or Faster R-CNN [59] for object
detection, whose compute requirements change depending
on the vehicle’s movements or environments. Our attack ex-
ploits the fact that memory access patterns of these adaptive
algorithms are affected by the victim vehicle’s movements.
Assumptions on the environment. We assume that the
environment has unique characteristics that enable identiﬁca-
tion of the vehicle’s position and route. Analogously, humans
can localize themselves in a known city using visual details
such as buildings or signage. Our work exploits variability in
possible vehicle paths to guess the route of the vehicle from
the turns it takes.
Out-of-scope attacks. We do not consider any physical
attacks on a vehicle. As we assume that the attack software
does not have permission to access sensor data, we do not
consider any attacks that rely on direct access to the physical
measurements of an environment [48,49] (e.g., inferring loca-
tions based on local temperature, light intensity, etc.). Besides,
we do not consider traditional attacks that exploit software
vulnerabilities to compromise an operating system or the driv-
ing software itself. We assume that the driving software is
not malicious or compromised, and do not consider covert-
channel attacks where the driving software intentionally leaks
the vehicle location.
3 Background
3.1 Autonomous Vehicle Architecture
Autonomous vehicles perform tasks in the physical world
without human intervention. As shown in Figure 2, an au-
tonomous vehicle comprises three main hardware subsys-
tems: sensors/information collectors, an onboard computer,
and actuators/command executors. Sensors are used to collect
information from the physical world. The collected data are
then processed by the onboard computer, which generates ac-
tuation commands. The actuation commands are executed by
the actuators, which usually have observable and intentional
effects on the physical world, such as turning the steering
wheel of the vehicle. Both sensors and actuators are con-
nected to the onboard computer using a bus protocol such as
Figure 2: General hardware and software architecture of an
autonomous vehicle.
USB, PCIe, GPIO, or CAN bus [31].
The navigation software stack hosted on the onboard com-
puter reads preprocessed sensor data from device drivers and
writes commands to the controller driver. There are two major
tasks performed by the navigation software:
• Perception/estimation. This is the process of convert-
ing the sensor data (e.g., timestamps returned by a GPS
receiver) into the most likely physical state (e.g., loca-
tion on the earth). This is needed for two reasons. First,
sensor data contain noise from measurements. Thus, an
estimation algorithm is needed to remove the noise and
get a statistically sound state. Second, the actual phys-
ical state (e.g., location of a vehicle on a map) cannot
be directly measured from sensors (e.g., LiDAR signal,
which is a vector of distances to obstacles in its scan-
ning directions). An estimation algorithm (e.g., adaptive
Monte-Carlo localization [34]) infers the most probable
location based on the LiDAR data.
• Control/decision. This is the process of determining
a sequence of control commands that optimize a cer-
tain objective function (expected arrival time, distance
to travel, etc.) given the estimated state. For example,
given an estimation of the current location and the ﬁnal
destination on a map, the controller should determine
a trajectory to the destination and issue a sequence of
acceleration, stop, and steering commands so that the
vehicle follows the planned path.
As shown in Figure 2, the state estimation module in the
navigation stack needs to read data from sensors such as GPS,
LiDAR, camera, and LTE/5G to make correct state estima-
tions. Estimated state, such as the vehicle location, is used by
the path planning module, which makes decisions on which
trajectory to take and sends commands to the controller. There
is also a collision avoidance module, which can override the
commands to the controller when there is a safety issue.
USENIX Association
29th USENIX Security Symposium    861
GPS driverLidardriverControllerdriverState estimationPath planningCollision avoidanceLTE/5GdriverInfo-tainmentVideo recordingOnboard computerNavigation stackOS kernel spaceUtility stackRemote control serverCameradriverGPS receiverLidarCameraLTE/5GAthenaSteering controllerThrottlecontrollerBrakecontrollerSensors/Info collectorsActuators/command executorsUSB/PCIe/GPIO/CANSyscallsThere is also a utility software stack, which performs
vehicle-speciﬁc tasks that are not critical to safety. For ex-
ample, a passenger vehicle may have an infotainment system
providing a music streaming service, while an autonomous
video-recording drone may have software to control a high-
resolution camera. Because the utility stack is not safety-
critical, it should not have unnecessary access to sensors or
actuators. For example, a music streaming app may require
access to the LTE/5G network to download music, but should
not be able to access or record GPS data. This can be enforced