在b数据库中创建表, 新建数据.    
```  
psql  
\c b postgres  
create table test (id int, info text, ts timestamp);  
insert into test select generate_series(1,10000), md5(random()::text), clock_timestamp();  
insert into test values (0,'test',now());  
```  
创建还原点, 记住还原点名称, 后面恢复要用到. 恢复到还原点时, 以上数据应该都在.    
```  
postgres=# select md5(now()::text);  
               md5                  
----------------------------------  
 551cfacd27dbd7de0de6da6ccfa9486b  
(1 row)  
postgres=# select pg_create_restore_point('551cfacd27dbd7de0de6da6ccfa9486b');  
 pg_create_restore_point   
-------------------------  
 0/2A06E330  
(1 row)  
```  
在b数据库中创建表, 并进行一些修改. 恢复到还原点时, 以下数据应该都不在.    
```  
psql  
\c b postgres  
insert into test values (-1,'test-1',now());   
create table tbl (like test);  
insert into tbl select generate_series(1,10000), md5(random()::text), clock_timestamp();  
insert into tbl values (0,'test',now());  
```  
切换wal日志文件. (确保归档)  
```  
b=# checkpoint;  
CHECKPOINT  
b=# select pg_switch_wal();  
 pg_switch_wal   
---------------  
 0/2A17D408  
(1 row)  
b=# checkpoint;  
CHECKPOINT  
b=# select pg_switch_wal();  
 pg_switch_wal   
---------------  
 0/2B0000F0  
(1 row)  
```  
停止原库, 删除集群及所有表空间文件   
```  
pg_ctl stop -m fast  
rm -rf $PGDATA/*  
rm -rf /tmp/tbsa/*  
rm -rf /tmp/tbsb/*  
rm -rf /tmp/tbsc/*  
```  
## 当前备份能不能将b表空间恢复到还原点位置?  
还原system, b表空间文件   
```  
cp -r /tmp/backup/pgdata/* $PGDATA/  
cp -r /tmp/backup/tbsb/* /tmp/tbsb/  
```  
```  
postgres@dcdaa877dadd:~/14/pgdata$ ll $PGDATA/pg_tblspc  
total 12K  
lrwxrwxrwx 1 postgres postgres    9 Jan  7 12:29 16385 -> /tmp/tbsb  
lrwxrwxrwx 1 postgres postgres    9 Jan  7 12:29 16384 -> /tmp/tbsa  
drwx------ 2 postgres postgres 4.0K Jan  7 12:29 .  
drwx------ 1 postgres postgres 4.0K Jan  7 12:29 ..  
```  
配置recovery.conf (12版本开始, 这个配置已经在postgresql.conf中了)     
```  
vi $PGDATA/postgresql.conf  
# 注释归档  
#archive_mode = on   
#archive_command = 'test ! -f /tmp/arch/%f && cp %p /tmp/arch/%f'  
# 恢复配置  
restore_command = 'cp /tmp/arch/%f %p'  
recovery_target_name = '551cfacd27dbd7de0de6da6ccfa9486b'  
recovery_target_inclusive = on  
recovery_target_timeline = 'latest'  
recovery_target_action = 'pause'  
# 开启standby模式  
hot_standby = on  
# 配置 zero_damaged_pages 跳过错误的块    
zero_damaged_pages = on  
```  
配置恢复模式  
```  
touch $PGDATA/standby.signal  
```  
[《PostgreSQL 12 preview - recovery.conf 合并入 postgresql.conf后的HOT STANDBY配置(standby.signal , recovery.signal)》](../201905/20190503_05.md)   
启动实例, 开始恢复   
```  
pg_ctl start  
```  
查看是否已恢复  
```  
postgres@dcdaa877dadd:~/14/pgdata$ psql  
psql (14.10 (Debian 14.10-1.pgdg110+1))  
Type "help" for help.  
postgres=# \l  
                               List of databases  
   Name    |  Owner   | Encoding | Collate |   Ctype    |   Access privileges     
-----------+----------+----------+---------+------------+-----------------------  
 a         | postgres | UTF8     | C       | en_US.UTF8 |   
 b         | postgres | UTF8     | C       | en_US.UTF8 |   
 c         | postgres | UTF8     | C       | en_US.UTF8 |   
 postgres  | postgres | UTF8     | C       | en_US.UTF8 |   
 template0 | postgres | UTF8     | C       | en_US.UTF8 | =c/postgres          +  
           |          |          |         |            | postgres=CTc/postgres  
 template1 | postgres | UTF8     | C       | en_US.UTF8 | =c/postgres          +  
           |          |          |         |            | postgres=CTc/postgres  
(6 rows)  
-- 当前处于恢复模式  
b=# select pg_is_in_recovery();  
 pg_is_in_recovery   
-------------------  
 t  
(1 row)  
-- 已恢复到目标位置, 处于暂停恢复状态  
b=# select * from pg_get_wal_replay_pause_state();  
 pg_get_wal_replay_pause_state   
-------------------------------  
 paused  
(1 row)  
b=# select pg_is_wal_replay_paused();  
 pg_is_wal_replay_paused   
-------------------------  
 t  
(1 row)  
-- 链接到b数据库正常  
postgres=# \c b postgres  
You are now connected to database "b" as user "postgres".  
b=# \dt  
              List of relations  
 Schema |       Name       | Type  |  Owner     
--------+------------------+-------+----------  
 public | pgbench_accounts | table | postgres  
 public | pgbench_branches | table | postgres  
 public | pgbench_history  | table | postgres  
 public | pgbench_tellers  | table | postgres  
 public | test             | table | postgres  
(5 rows)  
-- 经查询, 恢复位置之前的数据都在, 之后的数据不存在.   
b=# select * from test where id=0;  
 id | info |             ts               
----+------+----------------------------  
  0 | test | 2024-01-07 12:24:16.015474  
(1 row)  
b=# select * from test where id=-1;  
 id | info | ts   
----+------+----  
(0 rows)  
```  
c库是备份后创建的, 所以有完整的wal, c库被正常恢复出来了.   
```  
b=# \c c postgres  
You are now connected to database "c" as user "postgres".  
c=# \dt  
              List of relations  
 Schema |       Name       | Type  |  Owner     
--------+------------------+-------+----------  
 public | pgbench_accounts | table | postgres  
 public | pgbench_branches | table | postgres  
 public | pgbench_history  | table | postgres  
 public | pgbench_tellers  | table | postgres  
(4 rows)  
c=# select count(*) from pgbench_accounts ;  
  count    
---------  
 1000000  
(1 row)  
c=# select count(*) from pgbench_branches;  
 count   
-------  
    10  
(1 row)  
```  
但是a库是备份前已经存在的, 原来有文件, 恢复过程需要data page+wal, 因为没有备份所以恢复不了a库  
```  
c=# \c a postgres  
connection to server on socket "/var/lib/postgresql/14/pgdata/.s.PGSQL.1921" failed: FATAL:  "pg_tblspc/16384/PG_14_202107181/16386" is not a valid data directory  
DETAIL:  File "pg_tblspc/16384/PG_14_202107181/16386/PG_VERSION" is missing.  
Previous connection kept  
```  
## 参考
[《PostgreSQL recovery target introduce》](../201301/20130130_01.md)  详细介绍了PITR恢复参数的概念. 
[《PostgreSQL Selectivity Tablespace PITR - 部分表空间恢复》](../201204/20120426_01.md)    
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 开源数据库](https://openpolardb.com/home "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's Github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")