USENIX Association
QuestionAnalyzerYes/NoQuestionInstruction QuestionSelectionQuestionMix QuestionWhQuestionQ: Are you ready?A: [yes, no]Q: For any information on how to use the skill, just say: Help me.A: [help me]Q: To get started, you can get a quote or listen to the daily briefing.A: [get a quote, listen to the daily briefing]Q: What is your gender ?A: [male, female]Q: Please responds by saying lenses or glasses.A: [lenses, glasses]Question exampleAnswer Generatordom. Choose a station.”. Users can answer the question by
saying “CHOI-FM Radio X 98.1 from Canada” or directly
say the number “one”. To automatically extract answers,
for Selection_CC questions, SkillExplorer checks the con-
stituent parsing tree to ﬁnd parallel structures connected by
CC (Coordinating conjunction) which may be corresponding
to the words, phrases, and clauses. For Selection_SC ques-
tions, SkillExplorer checks the leaf nodes of the parallel struc-
tures in the constituent parsing tree to judge whether the serial
indicators (i.e., numbers or letters) exist there and have the
same format. If so, SkillExplorer will enumerate the found
indicators to explore the behaviors.
Wh questions. As mentioned previously, users commonly
answer Wh questions according to their knowledge or un-
derstanding, instead of obtaining answers directly from the
questions. So our idea to answer Wh questions is to ﬁrst
build a knowledge database and then extract answers from the
knowledge database. However, if the knowledge database is
designed to include all kinds of knowledge, it will be too large
to construct. Considering that our purpose is to detect whether
a skill impacts users’ privacy or conﬂicts with Amazon’s de-
velopment rules [6] (also related to users’ privacy), we design
the knowledge database from the viewpoint of users’ privacy.
After analyzing Amazon’s development rules, we try to
create some virtual users with different proﬁles for answering
the privacy-related questions raised by skills. For other ques-
tions, although they are not our focus, we still try to answer
them by constructing a noun database (common nouns in
Wh questions) or feeding questions to online chatbots (e.g.,
Mitsuku [4] and Cleverbot [12]) and using their answers. For
each virtual user, the private information of the user should
be created to build the proﬁle. Such information includes the
full name, ﬁrst name, gender, birthday, etc. Some ﬁelds are
shown in Table 2, and more details are shown in Appendix D.
Note that such information cannot be randomly generated.
Otherwise, the skill may identify the inconsistency or some
illogical problems (e.g., an 8-year boy may not like to have a
driver’s license number), which will impact behavior explo-
ration. So the proﬁles should be created to be close to real
situations. Since some questions from skills may be related to
the relationship between the users (e.g., ask a child the name
of his mother), the knowledge database should also consider
such a situation.
Info
Value
Social Security Number
Full Name
Gender
Date of Birth
City
State Full
Zip Code
James C Washington
male
6/19/1980
066-80-6240
Buffalo
New York
14214
Phone Number
716-780-4085
Table 2: An example of the virtual user
We ﬁrst build several virtual users (VUs) according to
decades of age since skills may react differently to differ-
ent ages. For users of the same age, we also create two VUs:
male and female. Then we continue to give them other private
information. To make such information representative, we
have searched on the Internet for other ﬁelds. Note that, some
ﬁelds in the table have logic connections (e.g., address and
zip code). So we search them together to ﬁnd the logic con-
nected data after the logic connections are manually marked.
Also, some ﬁelds (e.g., phone number, credit card number)
have a speciﬁc format. A randomly generated phone number
could not be accepted by skills. Therefore, we use an on-
line information generator which can generate such fake yet
correct-format information [13]. At last, after collecting all
the information, we manually check whether there are some
inconsistencies. Then we add the social connection between
them including husband and wife, parent and children, etc.
Then by searching keywords in the knowledge database,
SkillExplorer will return the answers from a random proﬁle
(for the ﬁrst question) and use other ﬁelds in the proﬁle for
answering other future questions. Note that for the same ques-
tion, to explore its different behaviors, SkillExplorer will use
different proﬁles to answer and observe the behaviors of the
skills. If a skill reacts differently, SkillExplorer will continue
to explore the behaviors. Otherwise, it will stop using more
proﬁles to respond to this question. For example, the skill
“Preventive Health Care Services” will have different behav-
iors according to the age of 13 and 18. False negatives may
happen since SkillExplorer cannot enumerate all possible pro-
ﬁles. One possible solution is to extend the possible values
(e.g., different addresses) for each ﬁeld in the proﬁle, which
at the same time brings extra time spent on communicating
with skills. For some behaviors that are really hard to trigger,
little impact will they bring on users.
Mix questions. Mix questions include more than one type of
question in the output of skills, which are also very common
since developers can organize the outputs from skills in any
way. To deal with such questions, a simple idea is to mark
the types, generate answers according to each type, and feed
back all the answers together. However, it may waste lots of
unnecessary time due to that many answers are unaccepted to
the skills. For example, in the question “You can ask some-
thing, such as what’s your name.”, the user’s name (extracted
as the answer to the Wh question) is not the answer to the Mix
question. So we need to select the question types to answer
from all the sentences in Mix questions.
We should select the questions to answer according to their
types. First, we hope to generate the rules from studies on lin-
guistics. However, we do not ﬁnd any useful rules. So we have
to generate the rules by ourselves. Considering that Mix ques-
tions are designed for users to answer, the question should be
understood by the majority of users. So we authors play the
role of users to understand the questions and try to generate
the rules. We randomly sample 2,000 Mix questions from the
USENIX Association
29th USENIX Security Symposium    2655
Rule
R1
R2
R3
R4
R5
Situation
∃ Y
∃ S_SC & ∃ I
(I&S_CC) in Q∗
∃ I
∃ S
Type
Y
S_SC&I
I&SC_CC
I
S
Table 3: Rules to generate answers for Mix questions
Basic Corpus of Replies and manually answer them. From
the answers, we summarize the rules as shown in Table 3,
and evaluate the accuracy. We randomly select the other 200
Mix questions, utilize the rules to generate answers, and com-
pare them to human answers. The accuracy is 91%. The rest
9% (misunderstandings) are mainly due to grammar errors
or parsing errors from the NLP tool. In the table, Y means
Yes/No type, I means Instruction type and S means Selection
type. S_SC and S_CC are Selection_SC and Selection_CC,
respectively. According to R1, if there is a Yes/No type in Mix
questions, we just answer “yes” or “no”. According to R2, if
Selection_SC type and Instruction type exist at the same time,
both types need to be processed. According to R3, if Selec-
tion_CC and Instruction are included in the same sentence,
they should be replied together. For example, “say next or
previous”. R4 means that if there is an Instruction type, Skill-
Explorer will just answer this type. For example, the question
“You can say what is the weather like today” contains the In-
struction question and Wh question. It should be marked as
an Instruction question. Based on our evaluation, the rules are
accurate to extract answers from Mix questions.
3.5 Behavior Exploration
By leveraging the previous approaches, SkillExplorer can
explore one execution path of the skill. To explore all its
behaviors, SkillExplorer should further record the branches
and explore those un-executed ones. We also introduce an
approach to speed up the interaction.
Record and traverse branches. For a given question, there
could be multiple answers. For example, there are two an-
swers for Yes/No questions and two or more answers for
selection questions. For an answer, a further output will be re-
sponded from the skill, which serves as a new question expect-
ing further answers or simply ending the conversation. Con-
tinuing this process will form a tree-like structure to record
questions and answers. So we design an interactive tree (i-tree
for short) to represent the status of exploration. Each node in
the i-tree represents a single interaction (include an input and
corresponding output). While SkillExplorer communicates
with the skill, an i-tree is drawn simultaneously. The node
will be marked as visited if it is explored. If an execution path
in the i-tree is explored to the end, and there are unvisited
nodes, SkillExplorer will re-start from the beginning to the
unvisited nodes. Note that there could be more than one roots
in the i-tree, due to several utterances extracted. SkillExplorer
will end the execution path in the i-tree if one of the follow-
ing situations happens. (1) No answer can be generated for
a given output (e.g., “That’s our information, bye.”). (2) An
exception happens (e.g., the operation needs to be performed
on the mobile phone5). (3) For the same node in different
executions, the questions are different. For example, a skill
can generate different quizzes. There is no need to enumerate
all the quizzes.
Figure 5: An example of itree
Figure 5 gives an example when SkillExplorer analyzes a
skill. When the ﬁrst utterance “open c. s. n. premier collision”
in N_0 is sent to the skill, the returned output is “...To learn
more, say, about us, services, mobile app, phone number, ad-
dress, or website. You can say, repeat or stop, at any time”.
SkillExplorer parses the output as a question and generates
eight answers: “about us”, “services”, “mobile app”, “phone
number”, “address”, “website”, “repeat” and “stop” (in the
nodes from N1_0 to N1_7, respectively). The ﬁrst answer is
fed to the skill to continue the process of exploration. When
the last question is reached, the process of exploration will
end. At this time, SkillExplorer check whether there are any
unvisited nodes (white node). If so, SkillExplorer will ﬁnd a
path to the node in the i-tree and restart from the root. This
process will continue until there is no unvisited node left.
Speed up the interaction. In the process of exploration, the
real execution could be very time-consuming due to the fol-
lowing reasons. Firstly, some skills raise questions which
have already been asked. If the question is parsed again for
further exploration, the i-tree may not end. In other words, in
an i-tree, if the output in a new node (i.e., a leaf node) is the
same as a visited one (which may or may not be in the same
execution path), the node should not be explored again.
Secondly, when SkillExplorer restarts from the root of an
i-tree, some paths in the i-tree are repeatedly executed, which
further makes the speaker to read the outputs many times.
When the outputs are long, it will be very time-consuming,
especially when the output is at the beginning part of the i-tree.
For example, the output in N_0 with 39 words will take 18
seconds to read. When the skill is explored, it will be executed
at least 8 times. More than 2 minutes will be spent on the node.
To solve this problem, SkillExplorer does not need to wait
until the reading of the whole output is ﬁnished. For a node in
the i-tree representing the output from a skill, if this node is
5A special exception is the network error. When this situation happens,
SkillExplorer exits the current execution and restarts from the root node.
2656    29th USENIX Security Symposium
USENIX Association
N_0N1_0N1_7N2_0N2_1I: about us O: …Would you like to learn more?I: open c. s. n. premier collisionO:  … To learn more, say, about us, services, mobile app, phone number, address, or website. You can say, repeat or stop, at any time.…I: yesO: ……visited, SkillExplorer can directly utilize the generated inputs
in the last execution to answer the output. For the previous
example in the second execution, SkillExplorer will directly
feed the input stored in N1_0 to the skill before the reading
of the whole output is ﬁnished.
Implementation
3.6
We build a crawl to collect skills from Amazon and Google
markets and build SkillExplorer to explore the behaviors of
these skills. The project includes more than 7,000 lines of
Python code.
In the process of analyzing questions and generating an-
swers, SkillExplorer builds the parse tree using NLTK (natural
language toolkit) [28] and Stanford NLP Parser [29]6. Both
of the two tools are popularly used in the ﬁeld of natural
language processing. To build the interactive system, one
possible approach is to feed the utterances and the answers di-
rectly to the smart speakers (e.g., Amazon Echo), then record
the outputs and transform them into texts by using speech
recognition tools (e.g., Google TTS). However, this approach
is too time-consuming7. Instead, our idea is to use the simula-
tors provided by markets, which are often used by developers
to test their skills. Both Amazon and Google have their own
simulators. In particular, the simulator allows developers to
communicate with skills using texts. That is to say, developers
can directly feed text inputs to a skill and observe its outputs
also in texts, which does not need any tools to translate a voice
question to the texts, saving the exploring time. Regarding
the chat robots for answering Wh questions, after trying some
famous chatbots, we choose to use Mitsuku [4] and Clever-
bot [12] due to their better performance. In the process of
acquiring outputs from skills, the outputs will be returned one
by one. The time interval equals the time to read the previous
output. So if the ﬁrst output is long, we should wait for long
for the second output. Here, we set up a timeout (10 minutes)
for waiting. If the timeout is reached, SkillExplorer will stop
the current exploration and start a new path in the i-tree.
3.7 Evaluation
Coverage. SkillExplorer is designed to traverse the behaviors
of skills. So the coverage of behaviors is important to evaluate
the effectiveness of SkillExplorer. The ideal way to evaluate
behavior coverage is to analyze the source codes and compare
them with the behaviors explored by SkillExplorer. However,
it is very hard to ﬁnd open-source projects of skills from the
Internet. An alternative way is to manually communicate with
the skills, and try to collect as many behaviors as possible.
6We download NLTK v3.4.5 from [14] and Stanford NLP Parser v3.9.2
from [15].
7It will also exceed the time limit given to the user for feedback. Usually,
the time limit is 6 seconds [34]. If the time of waiting for the user’s response
is too long, the smart speaker will automatically turn off itself.
Yes/No
Instruction
0%
8%
Selection Wh Mix
5% 9%
8%
Table 4: The rate of incorrect answers
Such collected behaviors can be used as the ground truth for
comparison with the behaviors explored by SkillExplorer. For
simplicity, each node in the i-tree can be viewed as a behavior.