title:Vetting Single Sign-On SDK Implementations via Symbolic Reasoning
author:Ronghai Yang and
Wing Cheong Lau and
Jiongyi Chen and
Kehuan Zhang
Vetting Single Sign-On SDK Implementations 
via Symbolic Reasoning
Ronghai Yang, The Chinese University of Hong Kong, Sangfor Technologies Inc.; 
 Wing Cheong Lau, Jiongyi Chen, and Kehuan Zhang, The Chinese University of Hong Kong
https://www.usenix.org/conference/usenixsecurity18/presentation/yang
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.Vetting Single Sign-On SDK Implementations via Symbolic Reasoning
Ronghai Yang1,2, Wing Cheong Lau1, Jiongyi Chen1, and Kehuan Zhang1
1The Chinese University of Hong Kong,
2Sangfor Technologies Inc.
Abstract
Encouraged by the rapid adoption of Single Sign-On
(SSO) technology in web services, mainstream identity
providers, such as Facebook and Google, have devel-
oped Software Development Kits (SDKs) to facilitate
the implementation of SSO for 3rd-party application de-
velopers. These SDKs have become a critical foun-
dation for web services. Despite its importance, little
effort has been devoted to a systematic testing on the
implementations of SSO SDKs, especially in the pub-
lic domain.
In this paper, we design and implement
S3KVetter (Single-Sign-on SdK Vetter), an automated,
efﬁcient testing tool, to check the logical correctness and
identify vulnerabilities of SSO SDKs. To demonstrate
the efﬁcacy of S3KVetter, we apply it to test ten popular
SSO SDKs which enjoy millions of downloads by ap-
plication developers. Among these carefully engineered
SDKs, S3KVetter has surprisingly discovered 7 classes
of logic ﬂaws, 4 of which were previously unknown.
These vulnerabilities can lead to severe consequences,
ranging from the snifﬁng of user activities to the hijack-
ing of user accounts.
1
Introduction
Single Sign-On (SSO) protocols like OAuth2.0 and
OpenID Connect have been widely adopted to simplify
user authentication and service authorization for third-
party applications. According to a survey conducted by
Janrain [29], 75% users choose to use SSO services, in-
stead of traditional passwords, to login applications. As a
conservative estimate in [49], 405 out of Top-1000 appli-
cations support SSO services, indicating that SSO login
has already become a mainstream authentication method
and still continues its strong adoption.
Motivated by the prevalence of SSO services, main-
stream Identity Providers (IdPs) like Google and Face-
book, have provided their Software Development Kits
(SDKs) to facilitate the implementation of third party
services (e.g.
IMBD and Uber), which are referred to
as the Relying Parties (RP) under the SSO framework.
To further enhance ﬂexibility, some high-proﬁle open
source projects [3, 21] have integrated SSO SDK mod-
ules from different IdPs so that an RP application can
readily support multiple IdPs at the same time. These
SDKs are the core component of SSO services and have
enjoyed millions of downloads (see Table 1).
Typically, an SSO SDK provider would release the
source code of its SDK and provide documentations, to-
gether with simple usage examples.
It then leaves the
rest to the RP developers. Without fully understanding
the SDK internals, most RP developers simply follow
the sample codes to invoke the SDK functions. As such,
one important question is that: Is an SSO SDK itself se-
cure? Note that if the internals of a SDK already contain
vulnerabilities, then all RP applications using the vulner-
able SDK become susceptible. Given the popularity of
these SDKs and the nature of SSO services, any secu-
rity breach can lead to critical implications. For exam-
ple, an attacker may be able to log into billions of user
accounts [48].
The goal of this work is to systematically test whether
an SSO SDK is vulnerable by itself. We will focus on
the logic vulnerabilities of a SDK, which allow an at-
tacker to log into RP applications as a victim. To the
best of our knowledge, this is the ﬁrst work to ana-
lyze the SSO SDKs. Most existing work on SSO se-
curity does not analyze the code of the SSO system,
let alone the SDK. More speciﬁcally, there are mainly
two types of work in the literature. The ﬁrst type rea-
sons about the speciﬁcation of the standard SSO pro-
tocols [23, 39] by different methods including model
checking [5,7,15,19], cryptographic proof [11] and man-
ual analyses [34]. The other type aims to discover vulner-
abilities of real-world SSO implementations via network
trafﬁc analysis [43, 44, 47, 48] and large-scale automated
testing [18,33,49,51]. The former does not care about the
USENIX Association
27th USENIX Security Symposium    1459
SSO implementation, and the latter treats the implemen-
tation as a black box. Consequently, both cannot detect
logic ﬂaws buried deep in the SSO SDKs.
To this end, this paper introduces S3KVetter, a tool
which automatically identiﬁes vulnerabilities in the SSO
SDK internals. Our key insight is to leverage dynamic
symbolic execution, a widely used technique for pro-
gram analysis (e.g., [9, 22]), to track feasible execution
paths and the associated predicates of the SSO SDK un-
der test. For each path, S3KVetter then utilizes a the-
orem prover1 to check whether the predicates violate
SSO security properties. Although these techniques have
been heavily studied, they cannot be directly applied to
SSO-like applications due to the multi-party nature and
multiple-lock-step operations of SSO services. We have
thus developed new techniques including request order
scheduling and multi-party coordination for this kind of
multi-party applications.
We have implemented a full-featured prototype of
S3KVetter and applied it to check 10 popular SSO SDKs.
These SDKs are all carefully engineered and enjoy a
large number of downloads (see Table 1). They support
different SSO protocols (OAuth2.0 or OpenID Connect)
and various grant ﬂows (authorization code ﬂow and im-
plicit ﬂow). To our surprise, S3KVetter has discovered,
among these security-focused SDKs, 7 classes of seri-
ous logic vulnerabilities and 4 of them are previously un-
known. The security impact can range from snifﬁng user
activities at the RP, to the total hijacking of the victim’s
RP account. In summary, we have made the following
contributions:
• Measurement study and new ﬁndings. We have sys-
tematically conducted an in-depth security analy-
sis on 10 commercially deployed SSO SDKs, the
ﬁrst of this kind. We discover 7 types of serious
logic vulnerabilities, 4 of which are previously un-
known. We demonstrate these vulnerabilities can
lead to critical security implications. Our ﬁndings
show that the overall security quality of SSO SDKs
(and thus their deployment) is worrisome.
• Effective vulnerability detection for distributed sys-
tems via symbolic reasoning. We have designed and
implemented S3KVetter to perform security anal-
ysis of SDK internals based on dynamic symbolic
execution and a theorem prover. In particular, we
develop a set of new techniques, including sym-
bolizing request orders and multi-party coordina-
tion, to improve symbolic execution for multi-party
distributed systems with multiple-lock-step interac-
tions.
The remainder of this paper is organized as follows:
Section 2 introduces the background. Section 3 presents
1We will use the terms theorem prover, constraint solver and Satis-
ﬁability Module Theories (SMT) solver interchangeably.
Figure 1: OAuth 2.0 authorization code ﬂow
• Dash lines represent symbolic links that can be controlled by an attacker.
the overview of S3KVetter. Section 4 discusses its de-
tailed design. Additional implementation considerations
are given in Section 5. We evaluate the performance of
S3KVetter in Section 6 and detail the discovered vulner-
abilities in Section 7. We discuss the lessons learned in
Section 8 and summarize related works in Section 9. We
conclude the paper in Section 10.
2 Background
OAuth2.0 [23] and OpenID Connect [39] (OIDC) have
become the de facto SSO standard protocols. Therefore,
in this paper, we only focus on these two protocols2. In
an SSO ecosystem, there are three parties: a User, a Re-
lying Party server (RP server) and an Identity Provider
server (IdP server)3. The goal of SSO services is to al-
low the user to log into the RP via the IdP. To achieve
this goal, the IdP issues an access token (as in the case
of OAuth2.0), and sometimes together with an id token
(as in the case of OIDC), to the RP so that the latter can
retrieve the user identity information hosted by the IdP.
To complete the process, both SSO protocols have de-
veloped multiple authorization grant ﬂows, but only two
of them, namely, the authorization code ﬂow and the im-
plicit ﬂow, are commonly deployed in practice. While
S3KVetter supports both protocols and both authoriza-
tion ﬂow types for the web and mobile platforms, we use
the authorization code ﬂow of OAuth2.0 under the web
platform as the running example throughout this paper.
2.1 Authorization Code Flow of OAuth2.0
Fig. 1 presents the authorization code ﬂow of OAuth2.0.
At a high level, the call ﬂow consists of the following ﬁve
phases:
I. (Step 1-3) The user initiates the Single-Sign-On
process with the RP and gives the IdP his approval
regarding the permissions requested by the RP;
2We use SSO to represent these two protocols, if not speciﬁed oth-
erwise.
3For the ease of presentation, we use the terms IdP server and IdP,
as well as, RP server and RP interchangeably.
1460    27th USENIX Security Symposium
USENIX Association
RP serverClient device    IdP server1) Req0: User visits RP 2) redirect_uri+state (optional)3) User authentication and grant permission5) Req1: code + state4) code + state (optional)e.g7) access token + refresh token (optional)6) access-token req: code + client_id + client_secret 9) user data 8) user-profile req: access token + client_secret (optional)  10). Req2: user profile req 11). user profileFigure 2: S3KVetter architecture
II. (Step 4-5) The IdP returns an intermediate proof
(code) to the RP via the user;
III. (Step 6-7) The RP approaches the IdP with this
proof and its own credentials to exchange for an ac-
cess token ;
IV. (Step 8-9) The RP can then use this token to access
the information of the user hosted by the IdP ;
V. (Step 10-11) The user can then access his informa-
tion hosted by the RP.
Refer to Appendix A for detailed descriptions of the in-
dividual steps in Fig. 1. Notice that, from the perspective
of the RP, the messages exchanged in Fig. 1 are typically
handled by the SSO SDK. While we will use Fig. 1 as an
illustrative example throughout this paper, our work ac-
tually goes beyond Fig. 1. For example, we will discuss
the vulnerability associated with MAC key (Section 7.4)
that is not presented in Fig. 1.
3 Overview
In this paper, we focus on analyzing the authentication
issues of an SSO SDK. In particular, we use S3KVetter
to analyze whether the implementation of a target SDK
contains errors that would allow an attacker to login as
victims. It is worth to note that S3KVetter can also be
extended to study the security of other multi-party appli-
cations like payment services as discussed in Section 6.5.
Threat Model
We assume the attacker has the following capabilities:
(1) The attacker can lure the victim to visit a malicious
RP (mRP)4. (2) The attacker can setup an external ma-
chine and use his/her own account to freely communicate
with the client, IdP and RP server. (3) If the victim does
not use HTTPS, the attacker can eavesdrop the commu-
nication of the victim’s client device. Besides that, the
attacker does not have any other advantages (e.g., he/ she
does not have the source code or binary executable of the
remote IdP server).
4For the web platform, mRP is a malicious web page. For mobile
platforms, mRP can be an APK ﬁle installed on the victim’s mobile
device. Regardless, mRP does not require any privileged permissions.
System Architecture
Fig. 2 presents the high-level system architecture of
S3KVetter, which contains three components: an ex-
tended concolic (dynamic symbolic) execution engine, a
predicate translator and a theorem prover. The concolic
execution engine aims to explore the target SSO SDK
exhaustively and output all the feasible program paths in
the form of a predicate tree. To support formal reasoning,
the predicate translator then expresses this predicate tree
using a precise syntax that lends itself to precise seman-
tics. Finally, taking the translated predicate tree and our
manually developed list of security properties as inputs,
the theorem prover reasons about each program path for
security property violation. If there is no satisﬁable so-
lution, then the SDK is considered to be secure. Other-
wise, the theorem prover outputs the concrete inputs (in
the form of SSO handshake messages and parameters)
that can trigger the violation.
Figure 3: The Role of S3KVetter
Fig. 3 shows the setup of the overall system in which
S3KVetter simulates the client device to communicate
with the RP server (i.e., SDK) and IdP server. S3KVetter
also acts as the attacker to intercept and manipulate the
victim’s messages (e.g., via malicious RP or eavesdrop-
ping). These messages are then fed to the SDK for sym-
bolic exploration. Since the open-source SDK is freely
available online, the analyst can build a local RP server
to symbolically explore the SDK.
4 Design of S3KVetter
In this section, we present the innovations introduced by
S3KVetter to tackle the special technical challenges of
testing multi-party systems with multiple-lock-step oper-
ations. We will also illustrate how conventional dynamic
symbolic execution schemes, without our extensions, can
incur false positives, miss bugs, or get stuck at shallow,
USENIX Association
27th USENIX Security Symposium    1461
Module 1: Extracting Program PredicatesCompiled SDKConcolic ExecutionPredicate TranslatorTheorem ProverMultiple Party CoordinationViolationsSecurity PropertiesExtracted PredicatesRequest Order SchedulingModule 2: Translating PredicatesModule 3: Reasoning PredicatesLocal RP serverRemoteIdentity Provider (IdP)     S3KVetterClient deviceAttackerOpen SourceSDK under Studynon-core error-processing paths, when analyzing multi-
party protocols/ systems.
4.1 Symbolic Exploration of SDKs
Based on dynamic symbolic execution, S3KVetter can
track how the operations on speciﬁc symbolic ﬁelds/
variables affect the ﬁnal computation result. We lever-
age these messages to build a so-called symbolic pred-
icate tree. One example is presented in Fig. 4, which
represents the conditional-checkings of the Request-
OAuthLib SDK [3], a popular SSO SDK. Here, the non-
leaf nodes in the tree represent symbolic constraints en-
forced by the corresponding path, and the leaf nodes rep-
resent the ﬁnal computation results (e.g., an access to-
ken or the identity of a logged-in user in the context of
SSO). For the ease of presentation, we have simpliﬁed
the tree by omitting numerous branches, nodes and re-
moving multiple constraints (shown as dashed lines in
the ﬁgure). This SDK involves 649 different execution
paths5, which would require laborious manual effort by
testers/ developers to generate. By contrast, S3KVetter,
leveraging high-coverage symbolic execution, automati-
cally explores different corner-case situations.
Intuitively, the symbolic predicate tree has captured
rich semantic information: The leftmost path in Fig. 4
corresponds to the case where the user skips Req0 (i.e.,
Step 1 in Fig. 1) and directly sends Req1 (Step 5) to the
SDK. Upon receiving Req1, the SSO SDK under test
ﬁrst checks whether the communication uses HTTPS,
followed by verifying the existence of a code parameter
in the URI. If these conditions are satisﬁed, the SDK will
send an access-token request (Step 7) to the IdP server.
Such semantic information is essential and effective for
vulnerability detection. For example, this leftmost path
does not check the state variable but still allows a user
to login successfully. This corresponds to the vulnerabil-
ity of use-before-assignment of the state variable, as to
be detailed in Section 7.3.
4.1.1 Symbolizing Request Orders
An SSO system requires multiple interactions with the
user to complete a task (e.g., authentication and autho-
rization). To be realistic, S3KVetter should allow at-
tackers to randomly and symbolically select execution
orders such as making out-of-order requests, skipping/
replaying requests. Although existing symbolic execu-
tion studies [10, 31, 40] have proposed different tech-
niques to support asynchronous event/ request orders,
they require expert-level domain knowledge of the ap-
plication under test to provide all the possible external
5We only consider OAuth-related paths without counting those non-
core paths, e.g., those related to encoding.
Figure 4: One example of symbolic predicate tree
events (e.g., atomic rule updates and ﬂow independence
reduction for OpenFlow application [10]). In short, their
approaches cannot be readily generalized for other ap-
plications. more thoroughly, S3KVetter should allow at-
tackers to randomly, symbolically select execution orders
such as making out-of-order requests, skipping/ replay-
ing requests.
We develop a general and simple scheduling algo-
rithm, which does not require any application-speciﬁc
heuristic from the analyst, to systematically explore ex-
ecution paths by generating inputs and schedules (i.e.,
request orders) one by one. The algorithm ﬁrst guides
S3KVetter to run the SDK under test with the sample in-
put and the normal schedule. Then the algorithm does the
following loop to sweep possible schedules and feasible
program paths: (1) it tries to explore all the feasible pro-
gram paths of the SDK under the selected schedule; (2)
it then generates a new schedule with the goal to explore
different program paths.
The remaining issue is to generate a new schedule
based on the normal one. Recall that we are interested in
the authentication property only, which is typically com-
pleted by the last request in the call-ﬂow. Therefore, all
of our generated schedules end with the last request. We
use Fig. 5, which contains three requests Req0, Req1 and
Req2, to illustrate how to generate a new schedule as fol-
lows:
1. Develop the power set of the normal execution order
and exclude the empty set or those subsets which do
not contain the last request. The resultant schedule
includes: {Req2}, {Req1,Req2}, {Req0, Req2},
{Req0, Req1, Req2}
2. Consider the ordering in the remaining subsets. For
example, a subset {Req0, Req1, Req2} can mean
two possible execution orders: {Req0, Req1, Req2}
and {Req1, Req0, Req2}. Note that we keep the
order of the last request (i.e., Req2).
3. Put all the well-ordered subsets into a scheduling
queue. For Fig 5, we have 5 schedules in total.
The intuition behind this scheme is that S3KVetter