tions’ system architecture and should apply to proprietary
software, for which source code is usually not available.
• Forensically Correct. Any modiﬁcations made to the
whole-system provenance graph by our solution must sup-
port existing causal analysis queries and preserve the prop-
erties of validity, soundness, and completeness.
C. OmegaLog
Fig. 5 presents a high-level overview of the OmegaLog
system, which requires that both system-level logging and
application event logging be enabled. OmegaLog’s function-
ality is divided into three phases: static binary analysis (§VI),
runtime (§VII), and investigation (§VIII). In the static analysis
phase, ( 1 ) OmegaLog ﬁrst analyzes all application binaries
to extract all log message strings (LMSes) that describe event-
logging statements in the code, and then uses control ﬂow
analysis to identify all possible temporal paths of LMS in
different executions of the program. ( 2 ) All
those LMS
control ﬂow paths are stored in a database that is input to a
log parser to bootstrap interpretation of application events. At
runtime, ( 3 ) OmegaLog captures all the application events
and augments them with the application’s PID/TID and a
6
timestamp of log event through kernel module that intercepts
write syscalls. Simultaneously, ( 4 ) OmegaLog collects system
logs from the underlying whole-system provenance tracker
and associates them with the appropriate application events by
using the PID/TID as a disambiguator; and store them into a
uniﬁed log. Upon attack investigation, ( 5 ) OmegaLog passes
that universal log and the LMS control ﬂow paths database to
a log parser that partitions associated processes in the whole-
system graph by inserting a new app log vertex. This vertex
is connected to the corresponding partitioned process and
annotated with log messages in that particular execution unit
of the process. The semantic-aware and execution-partitioned
graph is called universal provenance graph (UPG), which is
presented to the investigator.
VI. OMEGALOG: STATIC BINARY ANALYSIS PHASE
The static analysis routine proﬁles application binaries
before their execution. During static analysis, OmegaLog per-
forms several passes over the binary’s control ﬂow graph
(CFG) to identify logging behaviors and generate all possible
LMS paths that are possible during execution of that binary.
Speciﬁcally, we leverage the Angr [53] toolchain to build
the CFG, and then introduce new methods to automatically
identify logging procedures in the binary (§VI-A). Next, we
concretize LMS (§VI-B) using the identiﬁed logging proce-
dure, and ﬁnally we generate all possible LMS control ﬂow
paths that can occur during execution of the binary (§VI-D).
Those steps are also shown in Fig. 5.
As highlighted in earlier work [19], binary analysis imposes
high costs, especially when symbolic execution and emulation
are necessary. In what follows, we describe how OmegaLog
avoids prohibitive analysis costs while proﬁling application-
logging behaviors. Although, OmegaLog works on application
binaries, for convenience, we explain static analysis procedures
by using source code snippets. Algorithm 1 offers a high-level
overview of our static analysis routines.
A. Identifying Logging Procedures
The ecosystem of event-logging frameworks is diverse and
heterogeneous; to overcome the resulting issues, OmegaLog
identiﬁes logging procedures in a binary by using two heuris-
tics. 1) Applications use either well-known libraries (e.g.,
syslog [27], log4c [6]) or functionally-similar custom
routines to produce, store, and ﬂush log messages to a log
/* /src/networking.c */while(...) { //EVENT HANDLING LOOP /* Wait for TCP connection */ cfd = anetTcpAccept(server.neterr, fd,     cip, sizeof(cip), &cport); serverLog(LL_VERBOSE,"Accepted %s:%d", cip, cport); ... /*Process request here*/ serverLog(LL_VERBOSE, "Client closed connection");}/* /src/backend/tcop/postgres.c */static void exec_simple_query(const char *query_string){   errmsg("statement: %s", query_string); ...}void PostgresMain(int argc, char *argv[],... ){    ...  for(;;) { //EVENT HANDLING LOOP    ...    exec_simple_query(query_string);    ...} }(a) Redis(b) PostgreSQLsshpam_err = pam_set_item(sshpam_handle, PAM_CONV,    (const void *)&passwd_conv);if (sshpam_err != PAM_SUCCESS)  fatal("PAM: %s: failed to set PAM_CONV: %s", __func__,          pam_strerror(sshpam_handle, sshpam_err));sshpam_err = pam_authenticate(sshpam_handle, flags);sshpam_password = NULL;if (sshpam_err == PAM_SUCCESS && authctxt->valid) {  debug("PAM: password authentication accepted for %.100s",            authctxt->user);  return 1;} else {  debug("PAM: password authentication failed for %.100s: %s",        authctxt->valid ? authctxt->user : "an illegal user",        pam_strerror(sshpam_handle, sshpam_err));  return 0;}(c) OpenSSHFig. 5: OmegaLog architecture overview. During the ofﬂine phase, OmegaLog ﬁrst generates control ﬂow graph and extracts log message strings
(LMSes) from application’s binary and then contructs LMS control ﬂow paths. During the runtime phase, OmegaLog combines application
event logs and audit logs together into universal provenance logs. Finally, during the investigation phase, OmegaLog uses LMS control ﬂow
paths to parse universal provenance log into universal provenance graphs.
ﬁle. The libraries leverage the I/O procedures of Libc, such
as fprintf or snprintf, to write the log messages to disk.
OmegaLog can thus identify candidate logging procedures
through a backward traversal of the CFG from these proce-
dures call sites. 2) Most applications that create event logs
store messages in the /var/log/ directory by default. Thus,
OmegaLog can differentiate log I/O from other I/O based on
the ﬁle path and consider all the procedures that write to
/var/log/ directory as logging procedures. Combining these
two heuristics was sufﬁcient to identify logging behaviors for
applications in our evaluation dataset. Nevertheless, Omega-
Log also provides an interface that sysadmins can use to add
the names of their logging procedures, if the binary does not
follow the aforementioned conventions.
B. Extracting Log Message Strings (LMS)
Once we have identiﬁed all the logging procedure names
in the previous step, we assign a unique identiﬁer for each
logging procedure callsite. We need to generate an LMS
that describes the format speciﬁer arguments (template) of
the log message. This step requires OmegaLog to extract
the binary’s full control ﬂow graph and perform symbolic
execution [35] to extract the values of such arguments. We
henceforth refer to this process as concretization. However,
performing a complete symbolic execution over the binary is
a computationally expensive operation that leads to the path
explosion problem, especially for applications with complex
compile-time optimizations. In fact, while experimenting with
the applications listed in Table III, we realized that most
applications are compiled with at
the -O2 compiler
optimization level, which greatly complicated the task of CFG
extraction and symbolic execution. For example, when we used
the Angr toolset, extracting the CFG and performing symbolic
execution on the openssh server binary quickly exhausted 64
GB of memory on our experimental machine and did not return
a conclusive result, even after running for several hours.
least
To overcome that problem, we ﬁrst note that our ex-
clusive purpose is to obtain the format speciﬁer arguments
for logging function calls; any symbolic execution operation
that does not serve this purpose is unnecessary. Therefore,
OmegaLog ﬁrst references the CFG built without symbolic
execution (referred to as a FastCFG in Angr toolset), which is
generated by traversing the binary and using several heuristics
to resolve indirect jumps; that approach greatly reduces the
CFG computational and memory requirements [53]. Using the
FastCFG, we identify the basic blocks that contain function
calls or jumps to logging procedures, and thus we can focus
our attention solely on such blocks. Nevertheless, unlike the
full CFG, the FastCFG does not retain any state about the
binary that would allow OmegaLog to concretize the values of
the logging procedures’ arguments.
To complete our analysis, we introduce an optimized
concretization we refer to as peephole concretization. While
studying the code of the open-source programs shown in
Table III, we observed that for the most part, format speciﬁer
arguments to logging procedures are passed either (1) as direct
constant strings or (2) through constant variables deﬁned near
the procedure call. For example, consider the call
to the
debug logging procedure in the OpenSSH application shown
in Fig. 4. The LMS we are interested in extracting is the mes-
sage ‘‘PAM: password authentication accepted for
%.100s’’ passed directly as a constant to the function call. At
the machine instructions level, that observation reﬂects the fact
that LMSes are typically deﬁned within the same basic block
that ends with the call or jump instruction to the address of
a logging function, or in a nearby preceding block.
Using peephole concretization, we only need to perform
local symbolic execution starting from the basic blocks iden-
tiﬁed in the previous step, stopping directly after execut-
ing the call instruction to the target logging procedure. We
show the pseudocode for our peephole concretization step
in Algorithm 1. If the symbolic execution task of a given
basic block b fails to concretize LMS values, OmegaLog
then launches new symbolic execution tasks from each of b’s
predecessors (referred to as b.predecessors() in Algorithm 1).
We refer to the operation of restarting symbolic execution
from a basic block’s predecessors as backtracing. OmegaLog
bounds the computational resources employed for the con-
cretization step by halting symbolic execution after performing
maxBackTrace backtrace operations from a given block b. If
symbolic execution fails to produce concretized LMS values
after maxBackTrace operations, OmegaLog marks the func-
tion as unresolved and thus produces incomplete LMS paths.
7
Log Parser& Graph Generator1. Identifying Logging ProceduresLog1: “Opened ﬁle “%fname””Log8: “Accepted certiﬁcate ID "%s" signed by %s CA”3. Building LMS Regular Expressions 2. Extracting Log Message Strings (LMS)logMsg(…);ap_log_error(…);AppBinary1log4log1log2log3log5log1log5Universal Provenance graphu1u2iku3u1u2jUniversalLog2345Static Binary Analysis PhaseInvestigation PhaseRuntime Phase4. Generating LMS Control Flow PathsLog1: “Opened ﬁle “.*””SymptomLMS Paths DBkernel spaceLinux AuditApp ProcessKernel ModuleAugmentedLMSUser spaceWhole-systemProvenancewrite syscallinterceptionsyscallAlgorithm 1: Static Binary Analysis
Func GETLMS(Binary B, Log functions F)
/* Overall process to build the LMS paths
g ← ANGRGETFASTCFG(B)
C ← EXTRACTCALLSITES(g, F)
/* Concretization step
V ← PEEPHOLECONCRETIZATION(g, C)
/* Building the LMS paths step
G ← BUILDLMSPATHS(g, V, F)
Func EXTRACTCALLSITES(cfg, F)
C ← Φ
foreach basic block b ∈ cfg do
/* Check if the basic block jumps into a logging function
if b.jump target address ∈ F .addresses then
C ← C ∪ {b}
end
end
return C
Func PEEPHOLECONCRETIZATION(cfg, call sites, maxBackTrace)
V ← Φ
V ← {(b, 0) for b ∈ call sites}
while V (cid:54)= Φ do
(b, backtrace) ← V.pop()
/* L is of the form {(LMS (cid:96), call stack cs)}
L ← SYMBOLICEXECUTION(g, v)
if L (cid:54)= Φ then
foreach ((cid:96), cs) ∈ L do
/* Taking care of context sensitivity
topBlock ← cs.top()
if ((cid:96), topBlock) /∈ V then
V ← V ∪ {((cid:96), topBlock)}
end
end
end
else if backtrace ≤ maxBackTrace then
V ← V ∪ {(v, backtrace + 1) for v ∈
b.predecessors()}
end
end
return V
Func BUILDLMSPATHS(cf g, V, F)
/* E is the set of paths between LMS
E ← Φ
foreach f ∈ cf g.f unctions()\{F} do
/* Extract the entry points and external returns
entries ← f.entry points()
returns ← f.jumps()
E ← E ∪ GETLOCALPATHS(V, f )
end
*/
*/
*/
*/
*/
*/
*/
*/
Our algorithm may yield ambiguous LMS paths in the rare
cases in which the function call can have different format
speciﬁers based on the sequence of basic blocks that lead to
it (i.e., context sensitivity). We address that challenge during
the peephole concretization step by recording the call stack
that produced each LMS. If two different call stacks produce
different LMS for the logging function call, we create a new
LMS for each call and then associate it with the topmost
basic block on each corresponding function call. That process
will guarantee that we do not miss any LMS and that we do
not over-approximate the reachability between LMSes when
constructing the LMS control ﬂow paths. We note, however,
that making format speciﬁers to logging procedures context-
dependent is not a frequently observed programming practice;
in fact, we encountered this issue only when processing the
transmission and CUPSD applications.
8
C. Building LMS Regular Expressions
Finally, once an LMS has been concretized, we can extract
a regex that can be used to match event messages at runtime.
The resulting regex describes the format speciﬁers in the LMS
that depend on runtime context (e.g., %s, %d, %%s). Each format
speciﬁer is replaced with a suitable regex, e.g., “%d” with
“[0-9]+” and “%s” with “.”. For example, one LMS we
encounter in OpenSSH is
PAM: password from user %.12s accepted.
After extraction, that yields the regex
PAM: password from user .* accepted.
D. Generating LMS Control Flow Paths
After concretizing LMS with selective symbolic execution,
OmegaLog can continue to use the FastCFG to enumerate
the valid sequences of LMS that can appear in a typical
lifecycle of the application. Extraction of all the possible paths
is not a direct application of depth-ﬁrst traversal (DFS); DFS
renders an under-approximation of the possible paths for the
following reasons. (1) The same basic blocks can be called
from different callees and thus must be traversed multiple
times. (2) Function calls (i.e., call instructions) must be
matched with their appropriate return or jump instructions.
Finally, (3) the applications we study use an abundance of
loops and recursive functions that must be traversed multiple
times in order to avoid skipping over loop paths. Instead, our
approach addresses (1) and (2) by using caching and tempo-
rary nodes, and (3) by using ﬁxed-point iterations. Pseudo-
code for OmegaLog’s control ﬂow path building algorithm
(BUILDLMSPATHS) is given in Algorithm 1.
Instead of traversing the full binary’s CFG, OmegaLog
subdivides the path identiﬁcation task into several function-
local traversals that generate subgraphs for each function in
the binary. It then links these subgraphs by following call
and return/jump instructions to build the full LMS paths.
For each function f in the binary’s functions (referred to as
cf g.f unctions() in Algorithm 1), OmegaLog identiﬁes f’s
entry points, in which control ﬂow passes into the function, and
its exit points, in which control ﬂow crosses the f’s local body,
creating dummy LMS nodes for these points. Then, OmegaLog
performs a local traversal of f’s subgraph; starting from f’s
entry points, we traverse the control ﬂow edges between the
basic blocks that do not leave f’s address space.
Every time OmegaLog encounters a basic block containing
an LMS, that block is added to the path, and its outgoing
edges are traversed. To accurately capture looping behavior,
we perform a ﬁxed-point iteration over the loop edges until no
further changes occur to the LMS path being built. In other
words, we keep traversing the same loop edge until no further
LMS paths are detected; we then consider the loop edge to
be exhausted and move to the next control ﬂow edge. Finally,
to speed up the traversal, OmegaLog caches processed basic
blocks so that it needs to only traverse them once if multiple
paths coincide. Note that we do not consider any loops that
do not contain any syscalls because such loops do not produce
audit logs and thus cannot be used for execution partitioning.
Fig. 6: On the right, LMS control ﬂow paths representation is shown
for the code snippet on the left.
After building the function-local subgraphs, OmegaLog
resolves the call and jump instructions in each of them to
complete the full LMS paths. For each function call that is
on an LMS path, OmegaLog injects the callee’s subgraph into
the path by creating links between the caller’s basic block and
the callee’s entry points and between the callee’s exit points
(return blocks and jump instructions targeting the caller) and
the callee’s return basic block. Using that approach, OmegaLog
completes the full LMS paths while also handling recursive
functions by creating self-cycles. Subsequently, OmegaLog
compresses the graph by removing the dummy nodes created
by the BUILDLMSPATHS function and merging their fan-in
and fan-out edges. The resulting compressed graph will then
contain all the detected LMS paths. Fig. 6 shows an example
of LMS control ﬂow paths from a code snippet. The code is
shown on the left, and the corresponding LMS paths are shown
on the right. The backedge from log3 to log2 just shows that
these logs are inside a loop and can appear more than one time.
LMS control ﬂow paths guide OmegaLog to partition
universal provenance log into execution units; however, in
some applications printed LMSes in the event-handling loop
are not precise enough to partition the loop. For example, Redis
event-handling loop shown in Figure 4 prints two LMSes in
each iteration of the event-handling loop. The ﬁrst LMS is
printed after the accept syscall and if we partition the event-
handling loop based on the both ﬁrst and second LMSes, then
we will miss that accept syscall in the execution unit and
only capture syscalls that happened in between two LMSes.
However, if we partition the event-handling loop only on the
second LMS then we will generate correct execution units
because there is no syscall after second LMS in the event-
handling loop.
Thus, during LMS control ﬂow paths construction Omega-
Log marks all the LMSes present inside the loops that do not
have any syscalls before or after in that loop. Such marking
helps OmegaLog to make correct execution partitioning of
universal provenance log during investigation phase. If there
is no such LMS inside the loop then OmegaLog keeps track
of either all the syscalls present after the last LMS (loop-
ending LMS) in the loop or all the syscalls present before the
ﬁrst LMS (loop-starting LMS) in the loop whichever has least
number of syscalls. OmegaLog uses such syscall mappings
during investigation phase to make correct execution units.
E. Discussion of Static Analysis Limitations
Our approach is agnostic to the underlying binary analysis
tool, but in this work, we used Angr tool, which came with its
own set of limitations. Below we discuss these limitations and,
in some cases, how we handled them to recover LMS paths.
False Positives & False Negatives. For more information