·给出一些字母变量的倍数关系，问给出任意两个字母的倍数是多少。
queries = [ ["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"] ].
?
values = [2.0, 3.0],
equations = [ ["a", "b"], ["b", "c"] ］,
样做呢？因为 A/B= 2，C/B=1/3，那么A/C=（A/B)/(C/B）即
== parents[A] == B，那么就用 parents[A]/parents[C] = 2/(1/3） = 6。为什么可以这
那么把 B 作为 parent 节点，parents[A] = {B， 2}，parents[B] = {B， 1}，B指向自己是
再来看看并查集的做法。先将每两个有倍数关系的节点做并查集 union(）操作。例如 A/B= 2,
节点集里面，也输出-1。
所有有向边权值的累乘结果。如果不存在这条路径，就返回-1。如果给的起点和终点不在给出的
以看做成一个节点，给出的 équations 关系可以看成两个节点之间的有向边。每条有向边都有权
这一题可以用 DFS 或者并查集来解题。先来看看 DFS 的做法。先建图。每个字母或者字母组合可
处理成C/B= 1/3，即 parents[C］= {B，1/3}。这样把所有有关系的字母都union（）起
1。还有一个关系是 B/C=3，由于 B 已经在并查集中了，所以这个时候需要把这个关系反过来,
值。那么问题可以转换成是否存在一条从起点节点到终点节点的路径，如果存在，输出这条路径上
---
## Page 486
代码
func (suf stringunionFind) union(x, y string, v float64) {
func (suf stringunionFind) find(x string) string 
func (suf stringunionFind) add(x string)
type stringUnionFind struct 
package leetcode
ifx!=p{
if v, ok := suf.parents[x]; ok {
.=:d
suf.vals[px] = v * suf.vals[y] / suf.vals[x] 
// 由上面 2个式子就可以得出 px=＊vals[y］／ vals[x]
suf.add(y)
}else {
suf.vals[x] = 1.0 
suf.parents[x] = x
if
 parents map[string]string 
// x / px = vals[x] 
suf.parents[px] = py
px, py := suf.find(x), suf.find(y)
suf.add(x)
return x
if 
vals 
parents[A]/parents[C] = 2/(1/3) = 6。
p=x
return v
V, ok := suf.parents[x]; ok { 
suf.parents[x] = pp 
suf.vals[x] *= suf.vals[p]
pp := suf.find(p) 
return
 map[string]float64
了
---
## Page 487
 Each LED represents a zero or one, with the least significant bit on the right.
 bottom represent the minutes (0-59).
A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the 
题目
401. Binary Watch
map[string]string{}, vals: map[string]float64{}}
[]float64 { 
func calcEquation(equations [][]string, values []float64, queries [][]string)
return res
for i := O; i  1 && res[0] == '0' {
res = res[:len(res)-k]
for i := O; i  0 && len(res) > 0 && c = O; i-- {
str := "" 
var bitArr []string
mp := map[int]string{
if num<O{ 
 str += bitArr[i] 
10: "a", 11: "b", 12: "c", 13: "d", 14: "e", 15: "f"
 num += 1 << 32 
return "o"
num /= 16 
bitArr = append(bitArr, mp[num%16])
---
## Page 496
题目
410. Split Array Largest Sum
代码
解题思路
中，请注意区分大小写。比如"Aa"不能当做一个回文字符串。注意:假设字符串的长度不会超过1010。
给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。在构造过程
题目大意
package leetcode
·这也是一题水题，先统计每个字符的频次，然后每个字符能取2个的取2个，不足2个的并且当
·给出一个字符串，
func longestPalindrome(s string) int {
One longest palindrome that can be built is "dccaccd", whose length is 7.
Explanation: 
output:
"abccccdd"
Input:
return answer
for -, r := range s { 
 counter := make(map[rune]int)
文串。
的？
answer := 0
前构造中的回文串是偶数的情况下(即每 2个都配对了)，可以取1个。最后组合出来的就是最长回
 counter[r]++ 
if answer%2 == 0 && v%2 == 1 { 