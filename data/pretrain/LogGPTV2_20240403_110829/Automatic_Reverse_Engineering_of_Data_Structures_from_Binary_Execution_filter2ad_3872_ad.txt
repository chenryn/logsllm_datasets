### 动态分配类型与动态执行类型

#### REWARDS 准确性
- **堆变量准确性**：
  - 基准程序：REWARDS、MemTrace 和正常执行的对比。
- **全局变量准确性**：
  - 基准程序：REWARDS、MemTrace 和正常执行的对比。

#### 性能开销
- **用户**：
  - REWARDS
  - MemTrace
  - 正常执行
- **性能开销图示**（图2(d)）：
  - REWARDS 相比 MemTrace 慢约十倍，相比正常执行慢数千至数万倍。

#### 空间开销
- **用户**：
  - REWARDS
  - MemTrace
  - 正常执行
- **空间开销图示**（图2(e)）：
  - 阴影内存消耗大约在10MB左右。特别地，ping程序使用较少的内存，因为其函数调用和内存分配较少。

### 评估结果
- **动态执行函数**
- **动态暴露类型**
- **REWARDS 准确性**

#### 准确性分析
尽管 REWARDS 的准确性存在一些不足，但在目标应用场景（如内存取证和漏洞模糊测试）中仍然适用。例如，虽然 REWARDS 输出的全局和栈变量布局是扁平的，但我们仍可以进行漏洞模糊测试，因为绝对偏移量足够；并且我们可以通过获取指针类型来构建内存镜像的层次视图。

#### 效率评估
我们也测量了 REWARDS 的时间和空间开销，并将其与标准内存跟踪工具 MemTrace（随 PIN-2.6 提供）以及程序的正常执行进行了比较。结果显示在图2(d)中。注意，正常执行的数据几乎不可见，因为它们非常小（大约在0.01秒级别）。我们可以观察到，REWARDS 的速度比 MemTrace 慢约十倍，比正常执行慢数千至数万倍。

对于空间开销，我们关注阴影类型集和约束集的空间消耗。因此，我们跟踪了阴影内存消耗的峰值。结果显示在图2(e)中。我们可以观察到，这些基准测试的阴影内存消耗大约在10MB左右。一个特殊情况是 ping 程序，它使用的内存较少，因为它具有较少的函数调用和内存分配，这也是为什么它在图2(d)中运行得比其他程序快得多的原因。

### 应用场景
REWARDS 可以应用于多种场景。本节中，我们将展示 REWARDS 如何为以下两个应用提供独特的优势：
1. **内存镜像取证**
   - 内存镜像取证是从内存转储中提取有意义信息的过程。例如，应用程序正在通信的IP地址和访问的文件。数据结构定义在提取过程中起着关键作用。REWARDS 使我们能够分析没有符号信息的二进制文件的内存转储。在这个案例研究中，我们展示了如何使用 REWARDS 对可达内存和部分不可达内存（即死内存）进行类型化。
2. **二进制漏洞模糊测试**

#### 内存镜像取证
- **对可达内存进行类型化**
  - 在这个案例研究中，我们展示了如何使用 REWARDS 从内存转储中发现 IP 地址。我们运行了一个 web 服务器 nullhttpd-0.5.1，并通过 wget (wget-1.10.2) 与其通信。客户端 IP 为 10.0.0.11，服务器 IP 为 10.0.0.4。内存转储是在系统调用关闭客户端连接时获得的。从内存转储中，人类检查员很难识别这些 IP 地址，而 REWARDS 通过推导数据结构定义并构造层次视图来帮助识别这些 IP 地址。

相关部分的重构视图如图4(a)所示。根节点表示全局段中的一个指针变量。根节点的出边指向被指向的数据结构。边标签“struct 0x0804dd4f *”表示这是一个堆数据结构，其分配 PC（也是其抽象）为 0x0804dd4f。根据视图构造方法，被指向的内存区域根据 0x0804dd4f 表示的数据结构定义进行类型化，从而形成图4(a)中的第二层。内存区域从 0x08052170 开始，由带有地址标签的节点表示。各个子节点表示结构的不同字段，例如第一个字段是线程ID（根据语义标签 pthread_t），第四个字段（偏移量 +12）表示...

### 内存转储示例
```
...
08052170  b0 5b fe b7 b0 5b fe b7  05 00 00 00 02 00 92 7e  
08052180  0a 00 00 0b 00 00 00 00  00 00 00 00 c7 b0 af 4a
08052190  c7 b0 af 4a 00 00 00 00  58 2a 05 08 00 00 00 00
080521a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
...
08052a50  00 00 00 00 59 31 01 00  4b 65 65 70 2d 41 6c 69
08052a60  76 65 00 00 00 00 00 00  00 00 00 00 00 00 00 00
08052a70  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 
*
08052ee0  00 00 00 00 00 00 00 00  00 00 00 00 31 30 2e 30
08052ef0  2e 30 2e 34 00 00 00 00  00 00 00 00 00 00 00 00
08052f00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
*
08052fe0  00 00 00 00 00 00 00 00  00 00 00 00 48 54 54 50
08052ff0  2f 31 2e 30 00 00 00 00  00 00 00 00 00 00 00 00
08053000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
*
08053470  00 00 00 00 00 00 00 00  00 00 00 00 31 30 2e 30
```

通过上述优化，文本变得更加清晰、连贯和专业。希望这对你有帮助！