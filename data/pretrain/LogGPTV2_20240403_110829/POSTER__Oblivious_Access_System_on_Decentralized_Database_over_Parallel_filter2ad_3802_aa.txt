title:POSTER: Oblivious Access System on Decentralized Database over Parallel
Smart Contract Model
author:Zhong-Yi Guo and
Yu-Chi Chen and
Hsiu-Ping Lin
POSTER: Oblivious Access System on Decentralized Database
over Parallel Smart Contract Model
Zhong-Yi Guo
Yuan Ze University
Taoyuan, Taiwan
PI:EMAIL
Yu-Chi Chen
Yuan Ze University
Taoyuan, Taiwan
PI:EMAIL
Hsiu-Ping Lin
National Taiwan University
Taipei, Taiwan
PI:EMAIL
ABSTRACT
Data stored on centralized cloud servers may have some risks. More-
over, it may leak the data access pattern when accessing data on
cloud servers. Oblivious RAM (ORAM) is a candidate solution to
hide the data access pattern, but it inherently induces some over-
heads of accessing data. In this paper, we address the issues above,
and propose the oblivious access system on decentralized data-
base over parallel smart contract model. The proposed system can
slightly reduce the overhead of ORAM and overcome the problem
from centralized servers. The main techniques are to use parallel
smart contract model to improve the performance of smart contract
execution and garbled circuit to reduce the cost of communication.
CCS CONCEPTS
• Security and privacy → Management and querying of en-
crypted data; • Information systems → Distributed storage;
Distributed database transactions; • Computer systems orga-
nization → Client-server architectures.
KEYWORDS
Smart contract, Blockchain, Oblivious RAM, Garbled circuit
ACM Reference Format:
Zhong-Yi Guo, Yu-Chi Chen, and Hsiu-Ping Lin. 2020. POSTER: Oblivious
Access System on Decentralized Database over Parallel Smart Contract
Model. In Proceedings of the 15th ACM Asia Conference on Computer and
Communications Security (ASIA CCS ’20), October 5–9, 2020, Taipei, Taiwan.
ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3320269.3405436
1 INTRODUCTION
In traditional IoT systems, the collected data will be stored in cen-
tralized cloud servers. Hence, users have to trust that the centralized
cloud servers protect their sensitive and private data, which are
normally unencrypted. Therefore, centralized IoT systems might
face some challenges. Data stored in centralized cloud servers has a
risk of being modified or deleted. Furthermore, If centralized cloud
servers stop working, the entire system will face the risk of getting
paralyzed.
Blockchain, which is first proposed by Nakamoto[5], is a dis-
tributed timestamp ledger of blocks which is utilized to share and
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
© 2020 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-6750-9/20/10.
https://doi.org/10.1145/3320269.3405436
store data. It may be a promising technique to resolve the problems
which centralized IoT systems are facing because of its superior
properties (decentralization, tamper resistance, anonymity, security
and privacy). Owing to the invention of smart contracts [7], which
is an executable codes on the blockchain, the blockchain has now
evolved into a platform for developing decentralized applications.
Among these applications, decentralized data management has at-
tracted widespread attentions from computer science and academic
fields. Therefore, smart contracts can be regarded as decentralized
cloud servers. Suppose data is encrypted by users before uploading
to the smart contract. If users access the identical data multiple
times, the smart contract will learn the data is important to users.
Thus, even if the data is encrypted, attackers can infer sensitive
information from the data access pattern.
To address this issue, Oblivious RAM (ORAM), firstly introduced
by Goldreich and Ostrovsky [2], is a method to hide the data ac-
cess pattern. It allows clients to store data on an untrusted server.
The protocol guarantees that the server learns nothing about the
client’s access pattern or data. In recent years, plenty of ORAM
frameworks(e.g., [3, 4, 6, 8]) have been introduced to increase the
efficiency. In general, users must keep a position map on the local-
side. Therefore, ORAM actually induces some communication and
memory storage overheads of data access.
We propose the oblivious access system on decentralized data-
base over parallel smart contract model, aiming to provide the
service of decentralized cloud storage which hides the data access
pattern and overcomes the overheads above. In our oblivious struc-
ture, we follow the tree-based ORAMs [6, 8] which store data in
the binary tree and rely on the position map to access the data.
Specially, the position map is not held by users, it is stored on the
smart contract, instead. Besides, we garble some fields on the po-
sition map and use garbled circuit [9] to return the data. Through
the techniques above, it reduces the cost of communication and
memory storage. Furthermore, Yu et al.[10] proposed a parallel
smart contract (PSC) model. It uses multi-thread technology [1] to
execute smart contracts in parallel. Using this new model to process
transactions may reduce the average time cost and improve the
performance.
2 PRELIMINARIES
2.1 Parallel Smart Contract Model
Yu et al.[10] propose a parallel smart contract model on blockchain
which has a better performance in transaction processing. This
paper uses multi-thread technology to implement the proposed
model where transactions are executed in parallel. With this model,
it can at least save 23.8% in time cost. This model consists of two
phases as follows:
Poster Session ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan895• TransSplit(𝑇1, . . . ,𝑇𝑛): It groups the transactions and leaves
no shared variables for each transaction group. It takes as
input the transactions 𝑇1,...,𝑇𝑛, then outputs the transaction
sets 𝑇𝑆𝑒𝑡1
, . . . ,𝑇𝑆𝑒𝑡𝑝 .
, . . . ,𝑇𝑆𝑒𝑡𝑝): It takes as input the transac-
• MultiProcess(𝑇𝑆𝑒𝑡1
tion sets𝑇𝑆𝑒𝑡1
, . . . ,𝑇𝑆𝑒𝑡𝑝 , then outputs the threads 𝑡ℎ1, . . . , 𝑡ℎ𝑝
to execute the transaction sets parallelly.
2.2 Garbled Circuit
Garbled circuit, which was first introduced by Yao, [9] is a crypto-
graphic technique to hide the circuit and input. It mainly consists
of two phases as follows:
• CreateGC(1𝜆, 𝐶): It takes as input a security parameter 𝜆
and a circuit 𝐶, then outputs a garbled circuit(cid:101)𝐶 and(cid:101)𝑤, which
• EvalGC((cid:101)𝐶,(cid:101)𝑤𝑖): It takes as input a garbled circuit(cid:101)𝐶 and a set
of garbled input(cid:101)𝑤𝑖, then outputs the evaluated value 𝑦.
is a set of input labels for each input wire of C.
3 THE PROPOSED SYSTEM
3.1 Building Blocks
3.1.1 Data Block Format. Similar to existing ORAMs, we store data
in blocks, and a data block is the basic unit for read or write opera-
tions by the user. A plain-text data block consists of the ID of the
data block, denoted as 𝑖𝑑𝑛 and the content of the data block, denoted
as 𝑏𝑛. Before being uploaded to the service-side, the plain-text data
block are encrypted with the secret key k. Thus, the encrypted data
block which is denoted as 𝐵𝑛 has the following format:
𝐵𝑛 = (𝑖𝑑𝑛, 𝑏𝑛)
Service-side Storage Organization. We follow the tree-based
3.1.2
ORAMs structure and take it as our oblivious structure. The service-
side storage is organized into a binary tree. Moreover, each node in
the binary tree is a data bucket which stores up to 𝑂(log 𝑁) data
blocks. In order to access the data from the service-side storage, the
user must create a position map 𝑝𝑜𝑠 which is related to the data
position. The illustration of accessing data is shown in Fig. 1.
Figure 1: Accessing data from the service-side storage
Service-side. Here, smart contract(SC) is the service-side.
3.1.3
The specific algorithms on the service-side are formal described as
follows:
outputs a transaction 𝑇𝐼 and an oblivious database ODB.
• SC-KeyGen(1𝜎, 𝑖𝑑𝑈 ) : It take as input a security parameter
𝜎 and the user’s ID 𝑖𝑑𝑈 , then outputs the user’s private key
𝑠𝑘𝑈 and the user’s public key 𝑝𝑘𝑈 .
• SC-Sign(𝑠𝑘𝑈 ,𝑇) : It takes as input the user’s private key 𝑠𝑘𝑈
and a transaction 𝑇 , then outputs a digital signature of the
transaction 𝜎.
• SC-Vrfy(𝑝𝑘𝑈 , 𝜎,𝑇) : It takes as input the user’s public key
𝑝𝑘𝑈 , the digital signature of the transaction 𝜎 and a transac-
tion 𝑇 , then outputs a verification of the transaction 𝑣.
which is the location of target data’s ID on the position map.
• 𝑇𝑟𝑒𝑎𝑑(𝑙𝑜𝑐𝑖𝑑) : It takes as input the location of target data’s
ID on the position map 𝑙𝑜𝑐𝑖𝑑, then outputs a transaction 𝑇𝑅
and a set of the cipher-text data blocks {𝐵𝑖}.
• 𝑇𝑖𝑛𝑖𝑡𝑖𝑎𝑙𝑖𝑧𝑒({𝐵𝑛} ,(cid:103)𝑝𝑜𝑠,(cid:101)𝐶𝑒𝑣𝑎𝑙 ,(cid:101)𝐶𝑟𝑒𝑝𝑙𝑎𝑐𝑒) : Its take as input a set
of cipher-text data blocks {𝐵𝑛}, the garbled position map(cid:103)𝑝𝑜𝑠,
a garbled circuit(cid:101)𝐶𝑒𝑣𝑎𝑙 and a garbled circuit(cid:101)𝐶𝑟𝑒𝑝𝑙𝑎𝑐𝑒, then
• 𝑇𝑒𝑣𝑎𝑙 ((cid:101)𝑤𝑖𝑑,(cid:103)𝑝𝑜𝑠,(cid:101)𝐶𝑒𝑣𝑎𝑙) : It takes as input a garbled label of
target data’s ID(cid:101)𝑤𝑖𝑑, the garbled position map(cid:103)𝑝𝑜𝑠 and a
garbled circuit(cid:101)𝐶𝑒𝑣𝑎𝑙, then outputs a transaction 𝑇𝐸 and 𝑙𝑜𝑐𝑖𝑑
(cid:9) , 𝑝) : It takes as input re-encrypted data blocks
• 𝑇𝑤𝑟𝑖𝑡𝑒((cid:8)𝐵∗
(cid:8)𝐵∗
(cid:9) and a random path 𝑝, then outputs a transaction 𝑇𝑊
• 𝑇𝑟𝑒𝑝𝑙𝑎𝑐𝑒((cid:103)𝑝𝑜𝑠,(cid:101)𝐶𝑟𝑒𝑝𝑙𝑎𝑐𝑒) : It takes as input the garbled posi-
tion map(cid:103)𝑝𝑜𝑠 and a garbled circuit(cid:101)𝐶𝑟𝑒𝑝𝑙𝑎𝑐𝑒, then outputs a
transaction 𝑇𝑅𝑃 and(cid:103)𝑝𝑜𝑠∗ as the garbled position map to the
• 𝑇𝑢𝑝𝑑𝑎𝑡𝑒((cid:101)𝐶∗