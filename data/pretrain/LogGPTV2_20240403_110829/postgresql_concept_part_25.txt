### Recreating and Reloading Databases

To recreate and reload all databases, you can use `pg_dump` files. Individual databases can be reloaded by creating a new database and loading it using `psql`. For example, Figure 20.3 demonstrates how to create an exact copy of the `test` database. The contents of the database are dumped into the file `/tmp/test.dump`, and a new database called `newtest` is created. The dump file is then loaded into the new database.

Dump files contain ordinary SQL queries and `COPY` commands. Since these files contain sensitive database information, they should be created with permissions that restrict access to authorized users only. For more information about the `pg_dump` and `pg_dumpall` commands, refer to their respective manual pages.

### Server Start-up and Shutdown

The PostgreSQL server uses two distinct programs: `postmaster` and `postgres`. The `postmaster` process accepts all requests for database access, handles authentication, and starts a `postgres` process to handle each connection. The `postgres` process executes user queries and returns results. Figure 20.4 illustrates this relationship.

A typical PostgreSQL installation has many `postgres` processes but only one `postmaster` process. Each `postgres` process corresponds to an open database session.

Once administrators start the `postmaster`, it will start `postgres` backends as connection requests arrive. The `postmaster` can be started from the command line, a script, or automatically via operating system start-up scripts. Another way to start the `postmaster` is using `pg_ctl`, which provides easy starting and stopping of the `postmaster`. For more information, see the `pg_ctl` manual page.

To stop the `postmaster`, you can send a signal to the process using `kill` or use `pg_ctl`.

### Monitoring

Both `postmaster` and `postgres` produce useful information for administrators. They have many flags to control the output. If desired, they can show user connection information, SQL queries, and detailed performance statistics.

When the `postmaster` starts, its output should be directed to a file in the PostgreSQL home directory. This file can be used to monitor database activity. For a complete list of output options, see the `postmaster` and `postgres` manual pages. To specify the flags to be passed to each `postgres` process, use the `postmaster -o` flag.

Another way to monitor the database is by using the `ps` command, which displays information about processes, including data about the `postmaster` and `postgres` processes. This tool is helpful for analyzing PostgreSQL activity, particularly for diagnosing problems. The `ps` command can display the following aspects of a process:

- Current CPU usage
- Total CPU usage
- Start time
- Memory usage
- Disk operations (on some operating systems)

Each operating system uses different `ps` flags to output these values. A typical display might look like this:

```
USER   PID %CPU  TIME  STARTED  VSZ  INBLK  OUBLK  COMMAND
...
postgres  18923  45.4  0:27.79  1:15PM  2140  34     1      /usr/local/postgres/ ...
```

In this case, process 18923 is using 45.4% of the CPU, has used 27.79 seconds of CPU time, was started at 1:15 PM, has read 34 blocks, and has written 1 block.

To identify who is using each `postgres` process, most operating systems allow `ps` to display the following connection information:

- Username
- User’s network address
- Database
- SQL command keyword (e.g., SELECT, INSERT, UPDATE, DELETE, CREATE, idle, etc.)

The `ps` command displays this information next to the name of each `postgres` process. A typical display might look like this:

```
PID TT STAT  TIME  COMMAND
...
18923  ??  S     0:27.79  /usr/local/postgres/bin/postgres demouser localhost test SELECT
...
```

In this example, `demouser`, using process ID 18923, is connecting from the local machine to the `test` database and executing a `SELECT` query. Administrators can use `ps` to analyze who is connected to each database, the query being run, and the system resources used.

### Performance

Chapter 11 covered the performance of SQL queries. This chapter discusses more general performance considerations.

One of the most important administrative tasks is scheduling the `vacuumdb -a` command, which vacuums all databases. It should be run when the databases are least busy. Section 11.4 describes the purpose of vacuuming. Additionally, `vacuum analyze` should be performed periodically; it is covered in Section 11.5. The `vacuumdb` command can also perform analysis. For more information, see the `vacuumdb` manual page.

Both `postmaster` and `postgres` have several flags that can improve performance. In PostgreSQL release 7.0 and earlier, the `postgres -F` flag prevents the database server from flushing all data to disk at the end of each transaction. This improves performance but can leave the database in an inconsistent state if the operating system shuts down abnormally. Later releases may not use this flag.

The `postmaster -B` flag controls the amount of shared buffer memory allocated, and the `postgres -S` flag controls the amount of sort memory allocated. While these flags consume system resources, they improve performance by reducing disk access.

### System Tables

A great deal of data is stored in PostgreSQL system tables. These tables begin with `pg_` and contain information about data types, functions, operators, databases, users, and groups. Table 20.1 shows the most commonly used system tables.

- `pg_aggregate`: Aggregates
- `pg_attribute`: Columns
- `pg_class`: Tables
- `pg_database`: Databases
- `pg_description`: Comments
- `pg_group`: Groups
- `pg_index`: Indexes
- `pg_log`: Transaction status
- `pg_operator`: Operators
- `pg_proc`: Functions
- `pg_rewrite`: Rules and views
- `pg_shadow`: Users
- `pg_trigger`: Triggers
- `pg_type`: Types

The `pg_log` table is a binary file rather than a real table. The `pg_shadow` table contains user passwords and is not visible to ordinary users. The `pg_user` table (not listed in Table 20.1) is a view of `pg_shadow` that does not display the password field. Several other system views are available as well. Most system tables are joined using Object Identifiers (OIDs). The `psql \dS` command lists all system tables and views.

### Internationalization

PostgreSQL supports several features important for international use. Multibyte encoding allows non-ASCII character sets to be accurately stored in the database. It can be specified during PostgreSQL initialization, at database creation, or inside `psql`. PostgreSQL can also be installed to support international character sets, known as locales.

PostgreSQL can read and display dates in various formats. The default date format can be specified as a `postgres` flag, using `SET DATESTYLE` from inside `psql`, or using the `PGDATESTYLE` environment variable.

### Upgrading

The process of upgrading from previous PostgreSQL releases is covered in the documentation distributed with each version. Sometimes the `pg_upgrade` utility can be used. In other cases, a `pg_dumpall` and reload are required.

### Summary

This chapter summarizes the basic administrative tasks. Each utility has many other options not covered here. Administration can be challenging and requires skill and experience. This chapter provides enough information to start exploring topics of interest. The manual pages and Administrator’s Guide mentioned in Appendix A.2 contain even more valuable information.

### Appendix A: Additional Resources

#### A.1 Mailing List Support

There are various mailing lists available for discussing PostgreSQL topics, getting help, and reporting bugs. This information can be found at http://www.postgresql.org/lists/mailing-list.html.

#### A.2 Supplied Documentation

PostgreSQL comes with a variety of documentation, including a general user guide, specific guides for administrators and programmers, and a tutorial. These can be found at http://www.postgresql.org/docs/index.html.

#### A.3 Commercial Support

Currently, commercial support is provided by the following companies:
- PostgreSQL, Inc., http://www.pgsql.com/
- Software Research Associates, http://osb.sra.co.jp/
- GreatBridge LLC, http://www.greatbridge.com/

#### A.4 Modifying the Source Code

PostgreSQL allows users access to all of its source code. The Web page is at http://www.postgresql.org/docs/index.html. It has a Developers section with many developer resources.

#### A.5 Frequently Asked Questions (FAQs)

**General Questions**

1.1) What is PostgreSQL?
1.2) What is the copyright on PostgreSQL?
1.3) What Unix platforms does PostgreSQL run on?
1.4) What non-Unix ports are available?
1.5) Where can I get PostgreSQL?
1.6) Where can I get support?
1.7) What is the latest release?
1.8) What documentation is available?
1.9) How do I find out about known bugs or missing features?
1.10) How can I learn SQL?
1.11) Is PostgreSQL Y2K compliant?
1.12) How do I join the development team?
1.13) How do I submit a bug report?
1.14) How does PostgreSQL compare to other DBMSs?

**User Client Questions**

2.1) Are there ODBC drivers for PostgreSQL?
2.2) What tools are available for hooking PostgreSQL to web pages?
2.3) Does PostgreSQL have a graphical user interface? A report generator? An embedded query language interface?
2.4) What languages are available to communicate with PostgreSQL?

**Administrative Questions**

3.1) Why does `initdb` fail?
3.2) How do I install PostgreSQL somewhere other than `/usr/local/pgsql`?
3.3) When I start the `postmaster`, I get a "Bad System Call" or "core dumped" message. Why?
3.4) When I try to start the `postmaster`, I get "Ipc Memory Create" errors. Why?
3.5) When I try to start the `postmaster`, I get "Ipc Semaphore Create" errors. Why?
3.6) How do I prevent other hosts from accessing my PostgreSQL database?
3.7) Why can’t I connect to my database from another machine?
3.8) Why can’t I access the database as the root user?
3.9) All my servers crash under concurrent table access. Why?
3.10) How do I tune the database engine for better performance?
3.11) What debugging features are available?
3.12) I get "Sorry, too many clients" when trying to connect. Why?
3.13) What are the `pg_sorttempNNN.NN` files in my database directory?

**Operational Questions**

4.1) Why is the system confused about commas, decimal points, and date formats?
4.2) What is the exact difference between binary cursors and normal cursors?
4.3) How do I `SELECT` only the first few rows of a query?
4.4) How do I get a list of tables or other things I can see in `psql`?
4.5) How do you remove a column from a table?
4.6) What is the maximum size for a row, table, or database?
4.7) How much database disk space is required to store data from a typical text file?
4.8) How do I find out what indices or operations are defined in the database?
4.9) My queries are slow or don’t make use of the indexes. Why?
4.10) How do I see how the query optimizer is evaluating my query?
4.11) What is an R-tree index?
4.12) What is Genetic Query Optimization?
4.13) How do I do regular expression searches and case-insensitive regular expression searches?
4.14) In a query, how do I detect if a field is `NULL`?
4.15) What is the difference between the various character types?
4.16.1) How do I create a serial/auto-incrementing field?
4.16.2) How do I get the value of a `SERIAL` insert?
4.16.3) Don’t `currval()` and `nextval()` lead to a race condition with other users?
4.17) What is an OID? What is a TID?
4.18) What is the meaning of some of the terms used in PostgreSQL?
4.19) Why do I get the error "FATAL: palloc failure: memory exhausted"?
4.20) How do I tell what PostgreSQL version I am running?
4.21) My large-object operations get "invalid largeobj descriptor." Why?
4.22) How do I create a column that will default to the current time?
4.23) Why are my subqueries using `IN` so slow?
4.24) How do I do an outer join?

**Extending PostgreSQL**

5.1) I wrote a user-defined function. When I run it in `psql`, why does it dump core?
5.2) What does the message "NOTICE: PortalHeapMemoryFree: 0x402251d0 not in alloc set!" mean?
5.3) How can I contribute some nifty new types and functions to PostgreSQL?
5.4) How do I write a C function to return a tuple?
5.5) I have changed a source file. Why does the recompile not see the change?