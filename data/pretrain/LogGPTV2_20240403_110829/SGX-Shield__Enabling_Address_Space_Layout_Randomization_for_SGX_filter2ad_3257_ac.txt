to correctly point to the shuffled locations for randomization
units A and B, respectively.
Considering controlled side-channel attacks [61], our design
also randomizes control-flow dependencies upon data values
during the secure in-enclave loading phase. More precisely, the
secure in-enclave loader randomizes the order of loading and
relocation so that simply observing memory access patterns at
page granularity would not leak information on which data or
code is being loaded or relocated. Actual runtime behaviors
3. Secure in-enclave loading … jg  A* jmp C* if else 2. Bootstrapping RU A RU B if else RU C … jg  A 1. Preparation if else … jg  A jmp C … jg  A jmp C RU A RU B RU C RU A RU B RU C RU A RU B RU C (a) Intel SGX SDK
(b) SGX-Shield
Fig. 4: Runtime memory layouts of an enclave under Intel SGX SDK and SGX-Shield. Both are taken by running Windows 10, but they are
similar to those for Linux. After going through secure in-enclave loading phase, SGX-Shield randomizes all code and data pages to maximize
the entropy aspects of ASLR as well as implementing software-DEP and SFI.
of the target program might be vulnerable, however, and we
describe and evaluate more details of this aspect in §VI-A1
and §VII.
D. Software DEP in Enclaves
As noted in §IV-C, the multistage loading scheme of
SGX-Shield leaves code pages both writable and executable.
In this subsection, we describe how SGX-Shield removes read
and write permissions from code pages by using software-based
DEP. Specifically, code pages are granted not only execution
but also read and write permissions. As such, SGX-Shield
eliminates read and write permissions on code pages once
the secure in-enclave loading is finished (i.e., after the target
program is randomly mapped to the memory). The key idea
behind this is enforcing the NRW boundary (i.e., Non Readable
and Writable boundary), which is a virtual barrier between
code and data pages (See Figure 4). SGX-Shield guarantees
this by (1) shepherding all memory access instructions and (2)
ensuring only aligned control transfers are made.
Shepherding memory access. In general, there are two types
of memory access instructions: (1) explicit memory accessing
instructions (e.g., mov, inc, add instructions with memory
operands in x86) and (2) stack accessing instructions (e.g.,
implicit stack pointer adjusting instructions including push, pop,
call, ret, etc., or explicit stack pointer adjusting instructions
including sub, add, etc. with a stack register operand).
In order to prevent read or write attempts through the first
type of instruction, SGX-Shield makes sure that a memory
address to be accessed is always higher than the NRW
boundary (i.e., the operand should not point to code pages).
To avoid extra memory dereferences and thus optimize the
performance, SGX-Shield reserves the register r15 to hold the
NRW boundary, which is initialized by the secure in-enclave
loader before executing the target program. To minimize the
1 ; Before enforcing non-writable code
2 mov [rdx+0x10], rax
3
4 ; After enforcing non-writable code
5 ; (r15 is initialized to hold the NRW boundary)
6 ; (enforce rdx >= r15)
7 lea r13, [rdx+0x10]
8 sub r13, r15
9 mov r13d, r13d
10 mov [r15 + r13], rax
Fig. 5: Instrumenting explicit memory access instructions to enforce
non-writable code. Since the instruction tries to write to where rdx
points, SGX-Shield enforces that rdx always points to the location
higher than the NRW-boundary. r15 is initialized to hold the NRW
boundary value by the secure in-enclave loader. It is assumed that
r13 is an available register (or spilled beforehand) and thus used as a
temporary register.
; r13 = rdx+0x10
; r13 = r15 - r13
; r13 = r13 & 0xffffffff
; *(r15+r13) = rax
number of instrumented instructions, we transform the original
instruction such that it accesses memory using a positive offset
from the NRW boundary. We then enforce that the maximum
positive offset is smaller than 232 − 1 to ensure that the
instruction never accesses memory beyond the NRW boundary.
Figure 5 shows how an mov instruction that writes to address
rdx+0x10 is instrumented. SGX-Shield enforces that rdx+0x10
is always higher than r15. For this, it first moves the value of
rdx+0x10 to r13 (line 7), subtracts it from r15 (line 8), and
clears high 32-bits of r13 (line9). After this point, if rdx+0x10
≥ r15, r13 will hold the positive offset from the NRW boundary,
and the next instruction (line 10) performs the memory write
operation as intended. Otherwise, if rdx+0x10 ≤ r15, r13 will
hold the AND-masked value (line 9) because a subtraction in
line 8 results in a negative value (i.e., the most-significant bit
is set). Therefore, this offense is properly guarded, as it does
not overwrite the code page under SGX-Shield.
To enforce non-writable code pages on stack accessing
instructions, SGX-Shield makes sure that a stack pointer (i.e.,
7
Heap Code TCS TLS C4.  SSA Frame Stack C3. RWX TCS* RW Guard Guard Guard BASE + 0x2001000 BASE + 0x2011000 BASE + 0x2012000 BASE + 0x2013000 BASE + 0x2023000 BASE + 0x2025000 BASE + 0x2035000 BASE + 0x2045000 BASE + 0x2000000 BASE (4KB aligned) Enclave C2. EPC pages = r15)
7 sub
8 sub
9 mov
10 lea
Fig. 6: Instrumenting stack access instructions to enforce non-writable
code. Since a value of rsp is changing, SGX-Shield enforces that rsp
≥ NRW-boundary always holds.
; rsp = rsp - r15
; rsp = rsp - 0x40
; rsp = rsp & 0xffffffff
; rsp = rsp + r15
rsp, r15
rsp, 0x40
esp, esp
rsp, [rsp + r15]
rax
1 ; Before enforcing aligned indirected branch
2 jmp
3
4 ; After enforcing aligned indirected branch
5 ; (enforce rax % [random unit size] = 0)
6 and
7 jmp
Fig. 7: Instrumenting indirect branches to enforce aligned jumps. This
makes sure that there is no branch to an offset in the middle of bundled
instructions, i.e., bypassing the enforcement of the non-writable code.
; rax = rax && 0xffffffffffffffe0
; jump to the address pointed by rax
rax, $-0x20
rax
rsp) never points to code pages. To handle instructions that
adjust stack pointers implicitly, we simply map a guard page
(i.e., no permission is granted) at the top and bottom of
the stack area. Because these instructions shift
the stack
pointer with a small fixed offset and access the stack, the
guard page would always be hit if any of them accesses
beyond the legitimate stack range. Note, this guarded page
scheme on stack instructions optimizes the performance of
SGX-Shield. This is because conceptually it replaces a large
number of instrumented instructions with two guarded memory
pages along with retrofitting the existing exception handling
mechanism. In the case of instructions explicitly adjusting stack
pointers, SGX-Shield explicitly instruments them, as shown
in Figure 6. This is similar to our instrumentation techniques
for explicit memory accesses in that both of them compute the
positive offset values from the NRW-boundary.
Ensuring aligned control transfer. Because x86 and x86-
64 ISA have variable length instructions, code alignment
is critical; unexpected instructions can be executed when
alignment is broken. This would violate our enforcement on
memory accesses, as these instructions would perform memory
accesses not guarded by SGX-Shield. SGX-Shield resolves this
issue by restricting the control transfers only to the entry point
of the randomization unit. As a result, it enforces that there
is only one way to decode instructions, ensuring that only
shepherded memory access takes place. This enforcement is
performed for all control transfer instructions, including indirect
branches as well as return instructions. In the case of indirect
branches, masking operations are added as shown in Figure 7
so that the destination only points to one of the randomization
unit’s entry points. In the case of a return instruction, it is first
replaced with equivalent instructions, pop reg and jmp reg,
where reg can be any available register. Then, the latter jmp
instruction is instrumented as it is done for indirect branch
instructions. Finally, to enable efficient masking on control
transfer, our implementation aligns the randomization unit to
its size (i.e., if the size of a randomization unit is 32-bytes, an
entry point address of a randomization unit ends with five zero
bits).
8
E. Isolating Access to Security-Critical Data
By its design, SGX places the page for the State Save Area
(SSA) at a known location and does not permit its relocation, as
described in C4 (§III). In order to prevent attackers from abusing
this non-randomizable data location, SGX-Shield implements
software fault isolation (SFI) to isolate SSA. In particular, since
we already mark the memory page for SSA as non-executable,
we prevent the target enclave program from reading or writing
to SSA.
We found that SGX-Shield can easily retrofit its software
data execution prevention (DEP) mechanism (§IV-D) to achieve
this requirement. Our software DEP mechanism ensures that
no read or write accesses are permitted to pages lower than
the NRW boundary. Therefore, as shown in §IV-D, we place
SSA below the NRW boundary, thereby isolating SSA from
being read or written.
F. Performance Optimization
A general goal of our optimization is to reduce the number
of checks while preserving the same security guarantees, as the
checks instrumented by SGX-Shield directly impact runtime
performance. In particular, we focus on two types of checks,
both of which were identified as major performance bottlenecks
during our preliminary performance evaluation: (1) masking
operations onto memory read/write instructions for software-
DEP (§IV-D) and (2) a jump operation replacing fall-through
cases for randomization units (§IV-C).
First, we remove redundant masking operations within a
loop. More precisely, we observed that the target address of a
memory read or write instruction within a loop either reuses the
same address or simply increases through the loop counter, for
example, functions manipulating string or buffer (e.g., memset,
memcpy, memmove) loops over a buffer using a pointer convoluted
with a loop counter. Therefore, we develop a simple loop
analysis considering data dependency, which identifies a range
of addresses referenced inside. Next, if such a range can be
found conservatively, then we replace masking operations inside
a loop with two masking operations outside a loop — masking
only on the minimum and maximum address value before
entering the loop. It is worth noting that this replacement has
to be performed in the same randomization unit or more strict
control-flow integrity has to be given to this randomization unit.
Otherwise, an adversary may jump into the randomization unit,
which allows avoiding masking operations before executing
memory read/write instructions.
Second, we also minimize the number of fall-through cases
if possible. Specifically, we instructed the compiler to avoid
emitting jump or switch tables, as we observed that these were
a major source of conditional jumps, which results in a huge
number of fall-through cases.
V.
IMPLEMENTATION
SGX-Shield consists of 23,068 lines of code (see Table II),
where 2,753 lines of code contributes to the secure in-enclave
loader that is running within an enclave. We implement secure
in-enclave loaders (i.e., dynamic loaders) for both Linux and
Windows, where the ELF format is used to build an enclave
Preparation
Bootstrapping∗
Secure in-enclave loader∗
Windows version
Others
Total
# of Files
13
19
15
12
71
130
Base Framework
LLVM Backend
Intel SGX SDK
Intel SGX SDK
Intel SGX SDK
-
-
∗ indicates Linux version of SGX-Shield
LoC
2,304
1,625
2,753
3,514
12,872
23,068
TABLE II: The implementation complexity of SGX-Shield. We
implement the preparation based on LLVM 4.0. We implement the
runtime supports (i.e., bootstrapping and secure in-enclave loader)
both in Linux and Windows.
program2. Once the enclave program is compiled as an ELF
format, we can run it regardless of the platform.
Preparation. The preparation phase includes an LLVM
compiler 4.0, a static linker, and a sign tool of Intel SGX
SDK for Linux. By modifying the backend of LLVM [6],
we insert two kinds of instructions: (1) unconditional jump
instructions (instead of fallthrough) at the end of randomization
units and (2) instructions to enforce the software-DEP (i.e.,
masking the target memory address to access). In addition, the
LLVM emits each randomization unit as a symbol. The fine-
grained symbol information is used in the secure in-enclave
loading. The software-DEP currently enforces only the memory
write protection. To prevent reading the code, the code page
is added as writable and executable, but not readable, through
EADD. As the relocation does not read the code, non-readable
code pages do not cause faults.
The current version of SGX-Shield supports only static linking.
We implement a static linker from scratch. While linking
relocatables generated by the LLVM, it keeps the fine-grained
symbol and relocation information for the fine-grained ASLR.
We modify Intel SGX SDK for Linux to provide the enclave
program with sufficient code and data pages for shuffling. We
embed the binary of enclave program into the binary of secure
in-enclave loader as a section using the objcopy command.
Since the source code for Intel SGX SDK for Windows is not
available, we implement a PE editor that adds dummy memory
sections to the secure in-enclave loader to provide enough code
and data regions.
Bootstrapping. The bootstrapping simply creates an enclave
and loads the secure in-enclave loader to the enclave. We
implemented a simple program that conducts the bootstrapping
in both Linux and Windows.
Secure in-enclave loader. The secure in-enclave loader
is a dynamic loader that conducts the randomization unit-
level memory object loading and relocations. It resolves the
relocation information for all the memory references including
the absolute addresses and the PC-relative addresses. We
implemented these from scratch and made a best effort to
reduce the size of the trusted computing base. In the current
version, the core part (i.e., parsing the ELF file, randomly
loading, and relocation) is written in a single C file with 384
LoC.
2 In Windows, the secure in-enclave loader is compiled as a PE format, but
it loads the ELF format executable.
9
; src. of memcpy(), the address in enclave to leak
; dst. of memcpy(), the address in host
; jump to gadget2
1 ; gadget #1
2 pop rdi
3 pop rsi
4 ret
5
6 ; gadget #2
7 pop rdx
8 ret
Fig. 8: Gadgets for CFI-bypassing ROP. The attacker needs to correctly
guess four address values to launch a successful attack: the address of
gadget #1, gadget #2, and memcpy(), and the address in the enclave
to leak (i.e., rdi). We assume that an attacker already knows the
implementation details of memcpy() in that rsi, rdi, and rdx were
used for corresponding function parameters.