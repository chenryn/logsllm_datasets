3:
Π := Π ∪ {Ci}
4:
end if
5:
6: end for
if ∃s ∈ Ci . T (s) (cid:54)= T (s) or ∃C ∈ Π . Succ(Ci) ∩
C (cid:54)= ∅ then
s
Let pmax
be the maximum probability for state s com-
puted previously on M and pmax
the one we need to
compute after the changes occur. The SCC-based value
iteration algorithm of Section II-C can be adapted to handle
changes in probabilities by replacing Π by Π and initialising
s
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:42:25 UTC from IEEE Xplore.  Restrictions apply. 
364pmax
s
as follows:
pmax,0
s
:=
1
0
pmax
s
0
s ∈ Sy
s ∈ Sn
s ∈ S? and s ∈ C for some C ∈ Π\Π
otherwise
In addition, before we recompute the probability for an
SCC C in Π, we perform a test on its successor set Succ(C).
This test checks the following conditions:
1) for every state s ∈ Succ(C), its probability is not
affected by the changes, i.e.:
∀s ∈ Succ(C) . pmax
s = pmax
s
,
(1)
2) all distributions from a state in C are not affected by
the changes, i.e.:
∀s ∈ C . T (s) = T (s).
If both conditions hold, there is no need to perform recom-
putation in this SCC, i.e.:
∀s ∈ C . pmax
s = pmax
s
.
s
Although the above test can eliminate unnecessary recom-
putation for SCCs that might be affected by the changes,
condition (1) is quite restrictive since it requires all states
in the successor set to have the same probability as before
the changes occurred. Recomputation is executed even if,
for all states in Succ(C), there are only tiny changes, e.g.,
|pmax
s − pmax
In this case, the change in the probability for a state in C
is bounded by  with respect to its original value. If  is less
than the required accuracy, we can use pmax
for state
s in C, which speeds up the recomputation by introducing a
small approximation error. Lemma 4.1 formalises this idea.
in condi-
|  0.
1) If the condition pmax
s − pmax
s = pmax
s
tion (1) is replaced by |pmax
succeeds, then:
Lemma 4.1:
as pmax
s
s
s
∀x ∈ C . |pmax
|  1) states s1, . . . , sm ∈ S such that µ(si) > 0 for
1 ≤ i ≤ m. The new distribution µ(cid:48) in a is such that,
for 1 ≤ i ≤ m − 1, we keep half of the value,
i.e.,
µ(cid:48)(si) = µ(s)/2; for i = m, we increase the value such
that µ(cid:48)(sm) = µ(sm) +(cid:80)m−1
i=1 µ(si)/2.
Times for the incremental value iteration algorithm, de-
scribed in Section IV, are reported in the ﬁnal two columns
of Table I. This includes both the sequential and parallel
versions. We do not consider the time for SCC computation,
since this does not need to repeated. Even when ignoring
this, we see that
the times for incremental value itera-
tion represent signiﬁcant speed-ups compared to the non-
incremental (SCC-based) version: they are always faster, up
to 50 times faster in some cases. The sequential version
works particularly well; for models where a small number
of SCCs need to be updated, the gains for the parallel version
are less impressive.
VI. SYMBOLIC SCC-BASED VERIFICATION
In the previous sections, we have demonstrated that the
SCC-based incremental veriﬁcation can be very fast. A prob-
lem with the implementation, however, is that the explicit-
state data structures used to store the state space and transi-
tion relation can limit the size of models that can be handled.
A successful approach for alleviating this in the context of
veriﬁcation is to use symbolic implementations, based on
binary decision diagrams (BDDs) [25] and extensions such
as multi-terminal BDDs (MTBDDs).
is that
the Tarjan algorithm
for identifying SCCs is known to be poorly suited to
symbolic implementation. Various SCC decomposition algo-
rithms have been proposed, speciﬁcally for implementation
with BDDs [8], [9]. Unfortunately, they do not explore SCCs
in reverse topological order, and it is very slow to generate
this order once the SCCs are stored as BDDs.
A problem here,
though,
In this section, we adapt the Tarjan algorithm to the case
where model information is stored using BDDs. We omit
here low-level details of how BDDs can be used to represent
and manipulate sets of states and transition relations (see
e.g. [26]). Here, it sufﬁces to know that some operations
are efﬁcient in this form and others are not. For example,
some operations in the original Tarjan algorithm cannot be
performed efﬁciently with BDDs, notably association and
update of an integer index to a state. We propose a novel
hybrid adaption of the algorithm that combines symbolic
and explicit-state data structures. Keeping overhead to a
minimum for efﬁciency is non-trivial. We maintain:
• the non-probabilistic transition relation E and the union
allsccs of all visited SCCs, stored as BDDs;
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:42:25 UTC from IEEE Xplore.  Restrictions apply. 
366PERFORMANCE COMPARISON FOR SCC-BASED TECHNIQUES.
Table I
Model
Para-
meters
States
Total
time (s)
Original
Precomp.
time (s)
Val. iter.
time (s)
SCC pre
Total
time (s)
SCC comp.
time (s)
SCC no-pre
Sequential
time (s)
Parallel
time (s)
Incremental
Sequential
time (s)
Parallel
time (s)
1, 10
1, 14
2, 10
2, 14
3, 10
3, 14
4, 10
4, 14
2, 4
2, 8
2, 12
2, 16
2, 20
3, 1
3, 2
3, 3
2
3
4
5
292,733
422,636
665,567
1,061,771
949,912
1,735,014
976,247
2,288,771
9,062
16,870
24,678
32,486
40,294
72,9337
1,418,545
2,259,817
28,480
96,302
345,000
1,295,218
129
184
368
605
614
1,143
733
1,768
4.1
33.2
112