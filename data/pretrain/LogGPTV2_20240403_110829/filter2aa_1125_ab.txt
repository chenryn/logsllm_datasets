# Security Enhancements in the Linux Kernel

## Introduction
### `open_port` Function
```c
static int open_port(struct inode *inode, struct file *filp) {
    return capable(CAP_SYS_RAWIO) ? 0 : -EPERM;
}
```

### Module Insertion Control
```c
asmlinkage unsigned long sys_create_module(const char *name_user, size_t size) {
    char *name;
    long namelen, error;
    struct module *mod;

    if (!capable(CAP_SYS_MODULE))
        return -EPERM;

    // Further code...
}
```

## What Must We Protect?
- **Memory:**
  - Processes (memory tampering, IPC, network communications, etc.)
  - Kernel configuration (firewall rules, etc.)
- **Storage:**
  - Files
  - Metadata (filesystems, partition tables, etc.), boot loaders, etc.
- **Hardware:**
  - Devices (ioctl, raw access, etc.)
  - EPROMs, configurable hardware, etc.

## How to Protect?
- **Kernel Control:**
  - Queries are done only via the kernel.
  - System calls, sysctls, and device drivers are key points for controlling accesses.
  - Modify their behavior consistently to enforce a complete security policy.

## Modular Architecture for Kernel Calls
- **Components:**
  - **Enforcer Component:**
    - Intercepts and modifies system calls.
  - **Decider Component:**
    - Implements various access control policies (DAC, MAC, ACL, RBAC, IBAC, etc.).

## Adding Enforcer Code to Kernel Calls
- **Methods:**
  - **Kernel Call Interception:**
    - Example: Medusa DS9
    ```c
    linux/arch/i386/kernel/entry.S
    [...]
    GET_CURRENT(%ebx)
    cmpl $(NR_syscalls),%eax
    jae badsys
    #ifdef CONFIG_MEDUSA_SYSCALL
    btl %eax,med_syscall(%ebx)
    jnc 1f
    pushl %ebx
    pushl %eax
    call SYMBOL_NAME(medusa_syscall_watch)
    cmpl $1, %eax
    popl %eax
    popl %ebx
    jc 3f
    jne 2f
    1:
    #endif
    testb $0x20,flags(%ebx)
    jne tracesys
    [...]
    ```
    - **Advantages:**
      - General system
      - Low cost patch
    - **Drawbacks:**
      - Duplication of every syscall
      - Need to interpret parameters for each different syscall
      - Architecture dependent

  - **Kernel Call Modification:**
    - Example: LIDS
    ```c
    asmlinkage long sys_utime(char *filename, struct utimbuf *times) {
        int error;
        struct nameidata nd;
        struct inode *inode;
        struct iattr newattrs;

        error = user_path_walk(filename, &nd);
        if (error)
            goto out;
        inode = nd.dentry->d_inode;
        error = -EROFS;
        if (IS_RDONLY(inode))
            goto dput_and_out;

        #ifdef CONFIG_LIDS
        if (lids_load && lids_local_load) {
            if (lids_check_base(nd.dentry, LIDS_WRITE)) {
                lids_security_alert("Try to change utime of %s", filename);
                goto dput_and_out;
            }
        }
        #endif

        newattrs.ia_valid = ATTR_CTIME | ATTR_MTIME | ATTR_ATIME;
        if (times) {
            // Further code...
        }
    }
    ```
    - **Advantages:**
      - Syscall parameters already interpreted and checked
      - Great tuning power; can alter specific parts of the syscall
    - **Drawbacks:**
      - Many of the 200+ syscalls must be altered

## Upcoming in the Kernel: LSM
- **LSM (Linux Security Modules):**
  - Set of hooks in the kernel syscalls.
  - Provides the enforcer component.
  - Modular enough for the decider component to become a Loadable Kernel Module (LKM).

## Existing Projects
- **Openwall:**
  - Non-executable user stack area
  - Restricted links in `/tmp`
  - Restricted FIFOs in `/tmp`
  - Restricted `/proc`
  - Special handling of fd 0, 1, and 2
  - Enforce `RLIMIT_NPROC` on `execve`

- **GrSecurity:**
  - Kernel hardening from Openwall
  - ACL system

- **LIDS:**
  - Self-protection
  - Processes protection
  - Files protection
  - Online administration
  - Special features (e.g., dedicated mailer in the kernel, portscan detector)

- **Medusa DS9:**
  - Extends the standard Linux (Unix) security architecture with a user-space authorization server.
  - Layers:
    - Layer 1: Hooks in the original kernel code
    - Layer 2: Kernel space code called from hooks
    - Layer 3: Communication layer with a user-space daemon

- **RSBAC:**
  - Based on the Generalized Framework for Access Control (GFAC)
  - All security-relevant system calls extended by security enforcement code
  - Different access control policies implemented as kernel modules (MAC, ACL, RC, FC, MS, etc.)

- **LOMAC:**
  - Low Water-Mark Integrity
  - Initialization and execution rules for high and low directories and processes

- **SE Linux:**
  - Based on the Flask architecture
  - Enforcer/decider components
  - Focuses on changing the access control policy (revocation)

## Conclusion
- **Contact Information:**
  - You can reach me at [contact information].
  - These slides are available at: [http://www.cartel-securite.fr/pbiondi/](http://www.cartel-securite.fr/pbiondi/)

Thank you for your attention!