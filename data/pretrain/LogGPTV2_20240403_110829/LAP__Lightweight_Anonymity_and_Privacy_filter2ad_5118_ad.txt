hand, installs dedicated LAP routers where each of them has
a publicly-accessible address, and conﬁgures every gateway
router to route LAP packets (whose LAP-ﬂag is set) to the
nearest LAP router. Figure 7 illustrates a scenario where
AD1 and AD3 are legacy ADs, and AD2 and AD4 are LAP-
enabled ADs. X and Y represent the LAP routers in AD2
and AD4, respectively.
When Alice (whose IP address is A) wants to diffuse her
topological location for her communication with Bob (whose
IP address is B), she installs a LAP application proxy on
her machine. To obtain an e-path, this proxy prepares a LAP
request packet and encapsulates it in an IP packet. Then,
this IP packet is initiated with srcIP = A and destIP = B.
7Several potential approaches exist to add LAP to the current IP header.
One approach would be to add a LAP IP options ﬁeld, however, this would
constrain the length of the LAP header and possibly also slow down packet
processing at legacy routers. Another approach would be to use a bit in the
current IP header to indicate presence of a LAP header. We could use bit 0
of the 3-bit FLAGS ﬁeld, which is currently unused. Another potential use
could be a bit within the TYPE OF SERVICE OR DIFFERENTIATED SERVICE
byte, since the PRECEDENCE or the ECN bits are rarely used. Yet another
approach would be to set the PROTOCOL ﬁeld to indicate that the next
header is a LAP protocol header. In the two latter cases, the LAP header
could be placed between the IP and TCP or UDP headers.
Encrypted path establishment.
The request packet
sets up an anonymous return path by which Bob can reach
Alice without knowing her IP address. When a gateway in
the LAP-enabled AD2 receives a LAP-ﬂagged request
packet, it routes the packet to the dedicated LAP router X.
X then encrypts the srcIP to generate its e-path segment
O2 and appends O2 to the encapsulated LAP packet. X
also updates the srcIP = X in the IP header but destIP
remains the same. Similarly, AD4 process the packet in the
same way. When Bob, receives a packet whose srcIP = Y
and destIP = B, he sends a reply packet with srcIP =
B and destIP = Y . We assume that the LAP-ﬂag and
LAP header are preserved in the reply packet. When router
Y receives the reply, it veriﬁes O4, extracts the IP of
the previous LAP router (i.e., X) from O4, and updates the
destination address to be X. Similarly, router X retrieves A
from O2 and updates destIP = A.
Forwarding.
Alice obtains an e-path from the reply
packet. To send a data packet to Bob, Alice prepares a LAP
data packet that contains the e-path and encapsulates it
in an IP packet whose srcIP = ∅ and destIP = B. Upon
receiving a LAP data packet, Bob returns data packets using
the embedded e-path, as described above. Note that ADs can
distinguish forward and return data packets based on the
TYPE ﬁeld and adjust the OFFSET correctly.
AD1
A
AD2
X
AD3
❶ A → B: request
B
X
A
B
A
AD4
Y
B
Y
A
B
X
A
X
Y
❷ A ← B: reply
B
A
A
X
B
A
Y
A
X
Y
0
B
A
X
X
Y
1
B
A
Y
X
Y
2
legacy AD
address
LAP-enabled AD
e-path
segment
offset
Figure 7.
Incremental deployment.
Asymmetric paths. Another advantage of LAP integrated
with the current Internet is that it can support asymmetric
inter-domain paths, which may exist in BGP due to routing
policies, because in this instantiation LAP path is deﬁned
by a list of IP addresses instead of interfaces.
513
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:13 UTC from IEEE Xplore.  Restrictions apply. 
B. Integrating LAP into SCION
In this section, we show that LAP can be seamlessly
integrated into SCION [9], a high-availability network archi-
tecture. LAP only requires an overhead for path establish-
ment and encryption/decryption of packet-carried forward-
ing information, because packet-carried forwarding state and
encrypted path publishing/downloading can be embedded
into the existing SCION framework.
Background of SCION routing.
SCION groups ADs into
Trust Domains (TDs), where each TD aggregates ADs that
agree on a common root of trust, usually mapping to an
area of uniform legal jurisdiction. Each TD has a TD core
consisting of the tier-1 ISPs within this trust domain. TD
cores are in charge of two tasks. First, they periodically
broadcast Path Construction Beacons (PCBs) by which an
AD can learn one or more paths to/from this AD’s TD
core. Second, TD cores manage authoritative servers such as
SCION path servers. Upon receiving PCBs, an AD selects
multiple paths along which it can be reached from its TD
core, and publishes these (downstream) paths to a path
server. To create an end-to-end routing path, a source queries
a path server for the destination’s downstream paths and then
splices one of its upstream paths with one of the destination’s
downstream paths.
Path encryption requests.
SCION ADs route packets
using (unencrypted) packet-carried forwarding state and
verify the forwarding information using MACs. Hence,
running LAP with SCION requires adding symmetric en-
cryption/decryption functions to routers. In SCION, a source
obtains a set of paths to reach the destination for source-
selection routing. Hence, Alice embeds a request packet
inside a SCION packet by specifying one of the (unen-
crypted) paths for an e-path construction. Upon receiving
this packet, an intermediate AD (ADi) appends its Oi and
removes the (unencrypted) previous hop information to erase
the trace. The reply and data forwarding can be done as
described in the LAP protocol section (Section IV-B).
Path server and rendezvous points in TD cores.
The
design of SCION requires a path server to store ADs’
downstream paths, as an end-to-end path is constructed
by splicing a source-to-core path with a core-to-destination
(downstream) path. Similarly, LAP also requires a path
server that stores encrypted paths to certain rendezvous
points. Hence, SCION path servers can manage both SCION
paths and LAP’s encrypted paths. In this manner, a TD
core becomes a default rendezvous point since all paths can
traverse the TD core. Note that for the sake of efﬁciency
(shorter paths), SCION may permit shortcuts that bypass a
TD core by comparing and ﬁnding the intersection of the
upstream and downstream paths. However, in LAP, ﬁnding
such common intersections (common links or ADs) when
the intersections are encrypted is fundamentally infeasible
because an attacker could take the intersection ﬁnding algo-
rithm as an oracle to decipher encrypted paths. Fortunately,
the semi-encrypted paths (constructed by setting a small
HOP-TO-ENCRYPT value in the request) in LAP enable
part of a path to be encrypted for a sufﬁcient degree of
privacy with the other half remaining unencrypted to enable
shortcut construction.
C. Integrating LAP into MobilityFirst
To further illustrate the ﬂexibility of LAP, we now
describe how it can also be integrated into a mobility-
centric future Internet architecture called MobilityFirst [10].
MobilityFirst retains a distributed routing control plane
similar to that of BGP, while providing a clean separation of
network “entities” and routable addresses. Privacy is a major
concern for mobility-centric architectures since they allow
humans, via devices they carry or drive, to be continuously
connected to the broader Internet. Hence both control-
plane reachability updates as well as content generated by
these devices have the potential to breach privacy. Low-
stretch privacy solutions that cleanly integrate with mobility-
centric architectures can give end users privacy with minimal
disruption. As with SCION, LAP naturally complements
MobilityFirst and adds little overhead.
Background of MobilityFirst. MobilityFirst is a clean-
slate Internet architecture designed to address challenges
brought about by an increase in the number of mobile,
wireless devices. At its core, MobilityFirst provides a mech-
anism to abstract network entities important to applications,
and bind those abstractions into routable network addresses.
Speciﬁcally, entities such as an individual laptop, a vehicle,
a piece of content, or a group of people each obtain a
globally unique identiﬁer, or GUID, that the application
uses for communication. When data destined for a GUID
is received by a MobilityFirst router, the router will either
attempt to directly route on the GUID or bind the GUID
to a routable address via a massively distributed global
name resolution service, or GNRS. All publicly available
entities are responsible for ensuring that their GUID-to-
network address mapping is up-to-date in the GNRS. The
GNRS is accessible from all MobilityFirst routers and hence
GUIDs can easily be re-bound deeper in the network if the
destination’s network address has changed. In addition to
separating naming from addressing, MobilityFirst heavily
utilizes in-network storage and hop-by-hop transfer of large
data chunks to react to network and host mobility.
Path encryption requests. MobilityFirst’s low-level rout-
ing plane is similar to that of BGP, with the exception of IP
preﬁx announcements. Since the GNRS handles the “who
is in what network” question, MobilityFirst routing simply
needs to exchange AD-level reachability information. A
LAP path encryption request will occur after a MobilityFirst
router (e.g., the border router of the source AD) queries the
514
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:13 UTC from IEEE Xplore.  Restrictions apply. 
destination GUID for a destination network address. The
destination network address can be used as the destination
of a path encryption request. This process, as described in
Section IV-B, can then proceed as it would with BGP.
number of Internet users; thus, N is the maximum size of an
anonymity set. Nt is the number of Tor users and Nt ≤ N.
In practice, Nt (cid:7) N because Nt is between 105 – 106 [28]
while N is on the order of 109 [29].
Path server and rendezvous points.
The GNRS is
responsible for binding GUIDs to routable addresses, and
hence is a perfect match for the LAP path server. Using LAP,
the GNRS will bind a GUID (which may be a pseudonym) to
an e-path leading to a rendezvous point. Therefore, a router
wishing to route towards a destination GUID will make a
GNRS query and either get back the destination network
address or an e-path leading to a rendezvous point. Mobili-
tyFirst networks, however, do not have a strict hierarchy, and
hence choosing a rendezvous point is less intuitive. However,
since the GNRS is capable of handling multi-homed GUIDs,
multiple rendezvous points can be uploaded and bound to
the same GUID. If the destination also provides hints, such
as “use encrypted path 3 if in North America”, this can
alleviate stretch problems at the expense of some decrease
in location privacy.
Handling mobility.
In order to dynamically respond to
mobility and disconnection deep within the network, the
destination GUID is always available as the authoritative
header on a piece of data. Routers detecting a problem with
a destination network address can always query the GNRS
and re-bind the GUID to a new destination address. LAP
integration does not change this, as the destination GUID
can always be re-bound to a new e-path obtained from the
GNRS.
VII. SECURITY ANALYSIS
We analyze how LAP conceals end-hosts’ topological lo-
cations for an intermediate level of anonymity, and achieves
session unlinkability. We also describe how LAP defends
against attacks.
A. Sender/Receiver Anonymity Analysis
In this analysis, we consider a scenario where Alice and
Bob communicate with each other along an AD path AD1,
AD2, · · · , ADn and quantitatively analyze the degree of
anonymity with respect to an adversary, adv, at various
vantage points on the path.
We compare LAP with three related anonymous systems:
Tor [1], Tor Instead of IP [14], and AHP [7]. We show that
LAP provides a competitive degree of anonymity compared
to low-latency anonymity systems in the presence of LAP-
setting adversaries. Also, LAP guarantees much stronger
anonymity properties compared to AHP, which provides a
limited level of protection due to a small anonymity set and
does not support receiver anonymity.
Notation. We denote Aadv
(x) as the sender anonymity
set of user x with respect to adversary adv. The receiver
anonymity set Aadv
is deﬁned similarly. Let N be the total
s
r
Assumptions.
As mentioned in Section II-A, a sender
can achieve stronger anonymity if its identity is hidden
in a larger anonymity set. For the analysis, we assume
equiprobability for subjects in an anonymity set. That is, an
adversary can determine who may have sent or received a
packet within a given anonymity set but cannot tell whether
one is more likely to send/receive than the others in the
same set. We consider a LAP-setting adversary, who can
leverage topological information but not timing information
and cannot compromise the ﬁrst-hop AD of a victim. An
adversary with the knowledge of the AD-level topology
can narrow down the anonymity set of a packet based,
for example, on the length of the packet header and the
packet’s incoming interface. For this analysis, we assume
full deployment of LAP, Tor Instead of IP, and AHP.
We summarize our analysis in Table II, where the ﬁrst
column describes the adversary’s location and the following
(Bob)|) for LAP, Tor,
columns present (|Aadv
Tor instead of IP, and AHP. Below, we justify the table.
(Alice)|, |Aadv
s
r
1) LAP:
In this analysis, we consider LAP with full
path encryption (Alice’s e-path + Bob’s e-path through a
rendezvous AD ADv in Tier 1) and optimal padding. Hence,
a malicious AD can conclude that the sender (or receiver)
must reside in an AD that is reachable from the incoming (or
outgoing) interface. However, because of optimal padding,
an attacker cannot obtain identiﬁable information from the
size of the header.
In LAP, only the ﬁrst- or last-hop AD knows the identity
of the sender or receiver, respectively. Hence an adversary
cannot link the sender and the receiver in LAP unless he
controls both the ﬁrst and the last ADs along the path (adv8
in Table II), which is, however, outside our threat model.
Moreover, the degree of anonymity increases with the length
of the e-path. In other words, the farther away an attacker
is from the user, the higher the degree of anonymity. For
example, if Bob is an attacker (adv1 in Table II), Alice’s
sender anonymity set is N, because Bob has no knowledge
of the interface information, and every Internet user could
be the sender from Bob’s point of view. On the other hand,
if Alice’s ﬁrst-hop AD is the attacker (adv7), her anonymity
set is 1.
Generally, the degree of anonymity strictly increases as
the attacker’s position moves toward ADv (adv3), because
for each additional AD between Alice and the attacker, users