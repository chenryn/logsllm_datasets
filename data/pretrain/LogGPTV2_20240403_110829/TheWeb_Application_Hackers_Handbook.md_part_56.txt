cc1111..iinndddd 442200 88//1199//22001111 1122::1111::4455 PPMM
20 Stuttard c11.indd V2 - 07/26/2011 Page 421
Chapter 11 n Attacking Application Logic 421
The Attack
The SQL injection defense works by doubling any quotation marks appearing
within user input, so that within each pair of quotes, the fi rst quote acts as an
escape character to the second. However, the developers did not consider what
would happen to the sanitized input if it was then handed to the truncation
function.
Recall the SQL injection example in a login function in Chapter 9. Suppose
that the application doubles any single quotation marks contained in user input
and also then imposes a length limit on the data, truncating it to 128 characters.
Supplying this username:
admin’--
now results in the following query, which fails to bypass the login:
SELECT * FROM users WHERE username = ‘admin’’--’ and password = ‘’
However, if you submit a following username (containing 127 a’s followed
by a single quotation mark):
aaaaaaaa[...]aaaaaaaaaaa’
the application fi rst doubles up the single quotation mark and then truncates the
string to 128 characters, returning your input to its original value. This results
in a database error, because you have injected an additional single quotation
mark into the query without fi xing the surrounding syntax. If you now also
supply the password:
or 1=1--
the application performs the following query, which succeeds in bypassing the
login:
SELECT * FROM users WHERE username = ‘aaaaaaaa[...]aaaaaaaaaaa’’ and
password = ‘or 1=1--’
The doubled quotation mark at the end of the string of a’s is interpreted
as an escaped quotation mark and, therefore, as part of the query data. This
string effectively continues as far as the next single quotation mark, which
in the original query marked the start of the user-supplied password value.
Thus, the actual username that the database understands is the literal string
data shown here:
aaaaaaaa[...]aaaaaaaaaaa’and password =
Hence, whatever comes next is interpreted as part of the query itself and can
be crafted to interfere with the query logic.
cc1111..iinndddd 442211 88//1199//22001111 1122::1111::4455 PPMM
Stuttard c11.indd V2 - 07/26/2011 Page 422
422 Chapter 11 n Attacking Application Logic
TIP You can test for this type of vulnerability without knowing exactly what
length limit is being imposed by submitting in turn two long strings of the fol-
lowing form:
‘’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’and so on
a’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’and so on
and determining whether an error occurs. Any truncation of escaped input will
occur after either an even or odd number of characters. Whichever possibility
is the case, one of the preceding strings will result in an odd number of single
quotation marks being inserted into the query, resulting in invalid syntax.
HACK STEPS
Make a note of any instances in which the application modifi es user input, in
particular by truncating it, stripping out data, encoding, or decoding. For any
observed instances, determine whether a malicious string can be contrived:
1. If data is stripped once (nonrecursively), determine whether you can
submit a string that compensates for this. For example, if the application
filters SQL keywords such as SELECT, submit SELSELECTECT and see if
the resulting filtering removes the inner SELECT substring, leaving the
wordSELECT.
2. If data validation takes place in a set order and one or more validation
processes modifies the data, determine whether this can be used to beat
one of the prior validation steps. For example, if the application performs
URL decoding and then strips malicious data such as the  tag, it
may be possible to overcome this with strings such as:
%3cscript%3ealert(1)%3c/
script%3e
NOTE Cross-site scripting fi lters frequently inadvisably strip all data that
occurs between HTML tag pairs, such as aaaaa. These are
often vulnerable to this type of attack.
Example 10: Abusing a Search Function
The authors encountered this logic fl aw in an application providing subscription-
based access to fi nancial news and information. The same vulnerability was
later found in two completely unrelated applications, illustrating the subtle and
pervasive nature of many logic fl aws.
cc1111..iinndddd 442222 88//1199//22001111 1122::1111::4455 PPMM
22 Stuttard c11.indd V2 - 07/26/2011 Page 423
Chapter 11 n Attacking Application Logic 423
The Functionality
The application provided access to a huge archive of historical and current
information, including company reports and accounts, press releases, market
analyses, and the like. Most of this information was accessible only to paying
subscribers.
The application provided a powerful and fi ne-grained search function that
all users could access. When an anonymous user performed a query, the search
function returned links to all documents that matched the query. However, the
user was required to subscribe to retrieve any of the actual protected documents
his query returned. The application’s owners regarded this behavior as a useful
marketing tactic.
The Assumption
The application’s designer assumed that users could not use the search function
to extract any useful information without paying for it. The document titles
listed in the search results were typically cryptic, such as “Annual Results 2010,”
“Press Release 08-03-2011,” and so on.
The Attack
Because the search function indicated how many documents matched a given
query, a wily user could issue a large number of queries and use inference to
extract information from the search function that normally would need to be
paid for. For example, the following queries could be used to zero in on the
contents of an individual protected document:
wahh consulting
>> 276 matches
wahh consulting “Press Release 08-03-2011” merger
>> 0 matches
wahh consulting “Press Release 08-03-2011” share issue
>> 0 matches
wahh consulting “Press Release 08-03-2011” dividend
>> 0 matches
wahh consulting “Press Release 08-03-2011” takeover
>> 1 match
wahh consulting “Press Release 08-03-2011” takeover haxors inc
>> 0 matches
wahh consulting “Press Release 08-03-2011” takeover uberleet ltd
>> 0 matches
wahh consulting “Press Release 08-03-2011” takeover script kiddy corp
>> 0 matches
wahh consulting “Press Release 08-03-2011” takeover ngs
>> 1 match
cc1111..iinndddd 442233 88//1199//22001111 1122::1111::4466 PPMM
Stuttard c11.indd V2 - 07/26/2011 Page 424
424 Chapter 11 n Attacking Application Logic
wahh consulting “Press Release 08-03-2011” takeover ngs announced
>> 0 matches
wahh consulting “Press Release 08-03-2011” takeover ngs cancelled
>> 0 matches
wahh consulting “Press Release 08-03-2011” takeover ngs completed
>> 1 match
Although the user cannot view the document itself, with suffi cient imagi-
nation and use of scripted requests, he may be able to build a fairly accurate
understanding of its contents.
TIP In certain situations, being able to leach information via a search
function in this way may be critical to the security of the application itself,
effectively disclosing details of administrative functions, passwords, and tech-
nologies in use.
TIP This technique has proven to be an effective attack against internal
document mana gement software. The authors have used this technique to
brute-force a key password from a confi guration fi le that was stored in a wiki.
Because the wiki returned a hit if the search string appeared anywhere in the
page (instead of matching on whole words), it was possible to brute-force the
password letter by letter, searching for the following:
Password=A
Password=B
Password=BA
...
Example 11: Snarfi ng Debug Messages
The authors encountered this logic fl aw in a web application used by a fi nancial
services company.
The Functionality
The application was only recently deployed. Like much new software, it still con-
tained a number of functionality-related bugs. Intermittently, various operations
would fail in an unpredictable way, and users would receive an error message.
To facilitate the investigation of errors, developers decided to include detailed,
verbose information in these messages, including the following details:
n The user’s identity
n The token for the current session
n The URL being accessed
n All the parameters supplied with the request that generated the error
cc1111..iinndddd 442244 88//1199//22001111 1122::1111::4466 PPMM
24 Stuttard c11.indd V2 - 07/26/2011 Page 425
Chapter 11 n Attacking Application Logic 425
Generating these messages had proven useful when help desk personnel
attempted to investigate and recover from system failures. They also were help-
ing iron out the remaining functionality bugs.
The Assumption
Despite the usual warnings from security advisers that verbose debug messages
of this kind could potentially be misused by an attacker, the developers reasoned
that they were not opening any security vulnerability. The user could readily
obtain all the information contained in the debugging message by inspecting
the requests and responses processed by her browser. The messages did not
include any details about the actual failure, such as stack traces, so conceivably
they were not helpful in formulating an attack against the application.
The Attack
Despite their reasoning about the contents of the debug messages, the develop-
ers’ assumption was fl awed because of mistakes they made in implementing
the creation of debugging messages.
When an error occurred, a component of the application gathered all the
required information and stored it. The user was issued an HTTP redirect to a
URL that displayed this stored information. The problem was that the applica-
tion’s storage of debug information, and user access to the error message, was
not session-based. Rather, the debugging information was stored in a static
container, and the error message URL always displayed the information that was
last placed in this container. Developers had assumed that users following the
redirect would therefore see only the debug information relating to their error.
In fact, in this situation, ordinary users would occasionally be presented with
the debugging information relating to a different user’s error, because the two
errors had occurred almost simultaneously. But aside from questions about
thread safety (see the next example), this was not simply a race condition. An
attacker who discovered how the error mechanism functioned could simply
poll the message URL repeatedly and log the results each time they changed.
Over a period of few hours, this log would contain sensitive data about numer-
ous application users:
n A set of usernames that could be used in a password-guessing attack
n A set of session tokens that could be used to hijack sessions
n A set of user-supplied input, which may contain passwords and other
sensitive items
The error mechanism, therefore, presented a critical security threat. Because
administrative users sometimes received these detailed error messages, an
cc1111..iinndddd 442255 88//1199//22001111 1122::1111::4466 PPMM
Stuttard c11.indd V2 - 07/26/2011 Page 426
426 Chapter 11 n Attacking Application Logic
attacker monitoring error messages would soon obtain suffi cient information
to compromise the entire application.
HACK STEPS
1. To detect a flaw of this kind, first catalog all the anomalous events and
conditions that can be generated and that involve interesting user-specific
information being returned to the browser in an unusual way, such as a
debugging error message.
2. Using the application as two users in parallel, systematically engineer
each condition using one or both users, and determine whether the other
user is affected in each case.
Example 12: Racing Against the Login
This logic fl aw has affected several major applications in the recent past.
The Functionality
The application implemented a robust, multistage login process in which users
were required to supply several different credentials to gain access.
The Assumption
The authentication mechanism had been subject to numerous design reviews
and penetration tests. The owners were confi dent that no feasible means existed
of attacking the mechanism to gain unauthorized access.
The Attack
In fact, the authentication mechanism contained a subtle fl aw. Occasionally,
when a customer logged in, he gained access to the account of a completely
different user, enabling him to view all that user’s fi nancial details, and even
make payments from the other user’s account. The application’s behavior ini-
tially appeared to be random: the user had not performed any unusual action to
gain unauthorized access, and the anomaly did not recur on subsequent logins.
After some investigation, the bank discovered that the error was occurring when
two different users logged in to the application at precisely the same moment. It
did not occur on every such occasion—only on a subset of them. The root cause
was that the application was briefl y storing a key identifi er about each newly
authenticated user within a static (nonsession) variable. After being written, this
variable’s value was read back an instant later. If a different thread (processing
another login) had written to the variable during this instant, the earlier user
would land in an authenticated session belonging to the subsequent user.
cc1111..iinndddd 442266 88//1199//22001111 1122::1111::4466 PPMM
26 Stuttard c11.indd V2 - 07/26/2011 Page 427
Chapter 11 n Attacking Application Logic 427
The vulnerability arose from the same kind of mistake as in the error message
example described previously: the application was using static storage to hold
information that should have been stored on a per-thread or per-session basis.
However, the present example is far more subtle to detect and is more diffi cult
to exploit because it cannot be reliably reproduced.
Flaws of this kind are known as “race conditions” because they involve a
vulnerability that arises for a brief period of time under certain specifi c circum-
stances. Because the vulnerability exists only for a short time, an attacker “races”
to exploit it before the application closes it again. In cases where the attacker is
local to the application, it is often possible to engineer the exact circumstances
under which the race condition arises and reliably exploit the vulnerability
during the available window. Where the attacker is remote to the application,
this is normally much harder to achieve.
A remote attacker who understood the nature of the vulnerability could
conceivably have devised an attack to exploit it by using a script to log in con-
tinuously and check the details of the account accessed. But the tiny window
during which the vulnerability could be exploited meant that a huge number
of requests would be required.
It was not surprising that the race condition was not discovered during normal
penetration testing. The conditions in which it arose came about only when the
application gained a large-enough user base for random anomalies to occur, which
were reported by customers. However, a close code review of the authentication
and session management logic would have identifi ed the problem.
HACK STEPS
Performing remote black-box testing for subtle thread safety issues of this
kind is not straightforward. It should be regarded as a specialized undertak-
ing, probably necessary only in the most security-critical of applications.
1. Target selected items of key functionality, such as login mechanisms,
password change functions, and funds transfer processes.
2. For each function tested, identify a single request, or a small number
of requests, that a given user can use to perform a single action. Also
find the simplest means of confirming the result of the action, such as
verifying that a given user’s login has resulted in access to that person’s
account information.
3. Using several high-spec machines, accessing the application from differ-
ent network locations, script an attack to perform the same action repeat-
edly on behalf of several different users. Confirm whether each action has
the expected result.
4. Be prepared for a large volume of false positives. Depending on the
scale of the application’s supporting infrastructure, this activity may well
amount to a load test of the installation. Anomalies may be experienced
for reasons that have nothing to do with security.
cc1111..iinndddd 442277 88//1199//22001111 1122::1111::4466 PPMM
Stuttard c11.indd V2 - 07/26/2011 Page 428
428 Chapter 11 n Attacking Application Logic
Avoiding Logic Flaws
Just as there is no unique signature by which logic fl aws in web applications
can be identifi ed, there is also no silver bullet that will protect you. For example,
there is no equivalent to the straightforward advice of using a safe alternative
to a dangerous API. Nevertheless, a range of good practices can be applied to
signifi cantly reduce the risk of logical fl aws appearing within your applications:
n Ensure that every aspect of the application’s design is clearly documented
in suffi cient detail for an outsider to understand every assumption the
designer made. All such assumptions should be explicitly recorded within
the design documentation.
n Mandate that all source code is clearly commented to include the follow-
ing information throughout:
n The purpose and intended uses of each code component.
n The assumptions made by each component about anything that is
outside of its direct control.
n References to all client code that uses the component. Clear documenta-