# Map
```mermaid
classDiagram
    Map 1.空数组有无初始化，没有的话初始化；
>2.如果通过 key 的 hash 能够直接找到值，跳转到 6，否则到 3；
>3.如果 hash 冲突，两种解决方案：链表 or 红黑树；
>4.如果是链表，递归循环，把新元素追加到队尾；
>5.如果是红黑树，调用红黑树新增的方法；
>6.通过 2、4、5 将新元素追加成功，再根据 onlyIfAbsent 判断是否需要覆盖；
>7.判断是否需要扩容，需要扩容进行扩容，结束。
```java
final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
               boolean evict) {
    Node[] tab; Node p; int n, i;
    // 如果数组为空，那就初始化数组
    if ((tab = table) == null || (n = tab.length) == 0)
        n = (tab = resize()).length;
    // 如果根据hashCode得到的索引位置为空，直接将新节点放到该节点
    if ((p = tab[i = (n - 1) & hash]) == null)
        tab[i] = newNode(hash, key, value, null);
    else {
        Node e; K k;
        // 如果现在索引位置的hash值与key都相等，直接将新节点放在这里
        if (p.hash == hash &&
            ((k = p.key) == key || (key != null && key.equals(k))))
            e = p;
        // 否则就需要追加节点到当前索引位置节点的后面（链表或者红黑树）
        // 如果是红黑树，那就调用红黑树的增加方法
        else if (p instanceof TreeNode)
            e = ((TreeNode)p).putTreeVal(this, tab, hash, key, value);
        else {
            // 否则就是链表，进行遍历
            for (int binCount = 0; ; ++binCount) {
                if ((e = p.next) == null) {
                    p.next = newNode(hash, key, value, null);
                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st
                        treeifyBin(tab, hash);
                    break;
                }
                // 当遍历的节点hash值与key都相等时，那新节点就是放在这里
                if (e.hash == hash &&
                    ((k = e.key) == key || (key != null && key.equals(k))))
                    break;
                p = e;
            }
        }
        // 这里的e如果不为null，那就代表插入的这个key中是有值得，根据传入的onlyIfAbsent决定是否覆盖
        if (e != null) { // existing mapping for key
            V oldValue = e.value;
            if (!onlyIfAbsent || oldValue == null)
                e.value = value;
            afterNodeAccess(e);
            return oldValue;
        }
    }
    // 维护HashMap的其他状态信息
    ++modCount;
    if (++size > threshold)
        // size达到一定的程度，就需要扩容
        resize();
    afterNodeInsertion(evict);
    return null;
}
```
**链表转为红黑树**
只有当链表长度大于等于8，并且整个数组长度大于等于64时，才会进行链表转红黑树
至于为什么是8，链表查询的时间复杂度是 O (n)，红黑树的查询复杂度是 O (log (n))。在链表数据不多的时候，使用链表进行遍历也比较快，只有当链表数据比较多的时候，才会转化成红黑树，但红黑树需要的占用空间是链表的 2 倍，考虑到转化时间和空间损耗，8是最合适的
在元素放置过程中，恶意构造哈希冲突的数据是有可能的，针对于JDK8之前使用链表来存储相同哈希的数据可以进行哈希碰撞拒绝服务攻击，消耗服务端的CPU
**红黑树的插入**
```java
final TreeNode putTreeVal(HashMap map, Node[] tab,
                               int h, K k, V v) {
    Class kc = null;
    boolean searched = false;
    // 找到根节点
    TreeNode root = (parent != null) ? root() : this;
    // 遍历
    for (TreeNode p = root;;) {
        int dir, ph; K pk;
        // 说明应该插在当前遍历节点的右子树
        if ((ph = p.hash) > h)
            dir = -1;
        // 说明应该插在当前遍历节点的左子树
        else if (ph  q, ch;
                searched = true;
                if (((ch = p.left) != null &&
                     (q = ch.find(h, k, kc)) != null) ||
                    ((ch = p.right) != null &&
                     (q = ch.find(h, k, kc)) != null))
                    return q;
            }
            dir = tieBreakOrder(k, pk);
        }
        // 插入新节点
        TreeNode xp = p;
        if ((p = (dir  xpn = xp.next;
            TreeNode x = map.newTreeNode(h, k, v, xpn);
            if (dir )xpn).prev = x;
            moveRootToFront(tab, balanceInsertion(root, x));
            return null;
        }
    }
}
```
着色是指红黑树的节点着上红色或黑色，旋转是为了让红黑树更加平衡，提高查询的效率，总的来说都是为了满足红黑树的 5 个原则：
1. 节点是红色或黑色
2. 根是黑色
3. 所有叶子都是黑色
4. 从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点
5. 从每个叶子到根的所有路径上不能有两个连续的红色节点
- 查找
```
1.根据 hash 算法定位数组的索引位置，equals 判断当前节点是否是我们需要寻找的 key，是的话直接返回，不是的话往下。
2.判断当前节点有无 next 节点，有的话判断是链表类型，还是红黑树类型。
3.分别走链表和红黑树不同类型的查找方法
```
链表查找
```java
do {
    // 遍历，看遍历的节点的key是否与查找的key相等
    if (e.hash == hash &&
        ((k = e.key) == key || (key != null && key.equals(k))))
        return e;
} while ((e = e.next) != null);
```
红黑树查找
```java
final TreeNode find(int h, Object k, Class kc) {
    TreeNode p = this;
    do {
        int ph, dir; K pk;
        TreeNode pl = p.left, pr = p.right, q;
        // hash比当前节点小，往左子树寻找
        if ((ph = p.hash) > h)
            p = pl;
        // hash比当前节点大，往左右树寻找
        else if (ph < h)
            p = pr;
        // 找到了
        else if ((pk = p.key) == k || (k != null && k.equals(pk)))
            return p;
        // 左子树为空，所以只能向右子树找
        else if (pl == null)
            p = pr;
        // 右子树为空，所以只能左右子树找
        else if (pr == null)
            p = pl;
        // 使用compareTo比较