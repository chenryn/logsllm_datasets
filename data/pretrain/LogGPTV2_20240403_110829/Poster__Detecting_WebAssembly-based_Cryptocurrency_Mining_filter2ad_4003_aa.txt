title:Poster: Detecting WebAssembly-based Cryptocurrency Mining
author:Weikang Bian and
Wei Meng and
Yi Wang
POSTER: Detecting WebAssembly-based Cryptocurrency Mining
Weikang Bian
Chinese University of Hong Kong
PI:EMAIL
Wei Meng
PI:EMAIL
Chinese University of Hong Kong
Southern University of Science and
Yi Wang
Technology
PI:EMAIL
ABSTRACT
In-browser cryptojacking is an emerging threat to web users. The
attackers can abuse the users’ computation resources to perform
cryptocurrency mining without obtaining their consent. Moreover,
the new web feature –WebAssembly (Wasm)– enables efficient in-
browser cryptocurrency mining and has been commonly used in
mining applications. In this work, we use the dynamic Wasm in-
struction execution trace to model the behavior of different Wasm
applications. We observe that the cryptocurrency mining Wasm
programs exhibit very different execution traces from other Wasm
programs (e.g., games). Based on our findings, we propose a novel
browser-based methodology to detect in-browser Wasm-based cryp-
tojacking.
CCS CONCEPTS
• Security and privacy → Browser security; Malware and its
mitigation.
KEYWORDS
WebAssembly; Cryptojacking; Cryptocurrency mining
ACM Reference Format:
Weikang Bian, Wei Meng, and Yi Wang. 2019. POSTER: Detecting WebAssembly-
based Cryptocurrency Mining. In 2019 ACM SIGSAC Conference on Com-
puter and Communications Security (CCS ’19), November 11–15, 2019, London,
United Kingdom. ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/
3319535.3363287
1 INTRODUCTION
In-browser cryptocurrency mining draws increasing attention from
cybercriminals for the rising value of cryptocurrencies [7]. Accord-
ing to a report from Cyber Threat Alliance in 2018 [1], there had
been a 459 percent increase in illicit cryptocurrency mining mal-
ware detection since 2017. Several studies have shown that website
owners deploy cryptocurrency mining code for extra profit [3, 9, 11].
Many websites do not obtain any consent from the users before
running the mining code. Such malicious practice is called crypto-
jacking, which is often implemented using WebAssembly (Wasm)
for its great computation efficiency. Recently, researchers have
started to investigate cryptojacking in the wild [2, 8] and proposed
several detection strategies [4–6, 10].
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-6747-9/19/11.
https://doi.org/10.1145/3319535.3363287
In this work, we aim to detect in-browser Wasm-based crypto-
jacking, where a website automatically starts the cryptocurrency
mining procedure after it is loaded. We assume that a remote at-
tacker controls the website that a victim user may visit. Thus the
attacker can execute arbitrary JavaScript code and Wasm code in
the victim user’s browser. The attacker uses the JavaScript code
to manage the in-browser mining tasks and communicate with a
remote server to submit the mining results and request for new
tasks. The Wasm code is mainly used for cryptocurrency mining
which is computationally intensive.
We further assume that the attacker may leverage various tech-
niques to evade the existing detection methods. One of the most
commonly used techniques is code obfuscation. In other words,
simply computing a code signature is not reliable to identify a min-
ing script. Methods that use the function names to build a script
signature are also likely to be bypassed. Furthermore, the attacker
may apply throttling mechanism on the number of mining threads
or the mining speed, to circumvent detection methods that monitor
CPU usage. Finally, the attacker may communicate with his/her
own custom servers instead of the servers of publicly known mining
service providers to bypass detection methods which rely on match-
ing the hostnames of WebSocket or XHR communication targets in
some community-maintained public blacklists (e.g., NoCoin).
To reliably identify Wasm-based cryptojacking code, we have
to find other behavioral/semantic features that can well represent
the nature of the mining activities. In this work, we study and
propose to use the subsequences of Wasm instruction execution
trace as a signature to identify Wasm programs running a known
cryptocurrency mining algorithm.
2 METHODOLOGY
In this section, we present a new approach to dynamically detect-
ing in-browser cryptojacking behavior. We focus on the websites
that use Wasm to perform cryptocurrency mining on the user’s
device, because Wasm offers great performance and is platform
independent.
We first describe how we model the behavior of Wasm programs
using the subsequences of Wasm instruction execution trace (§2.1).
Then we discuss how we leverage the model to detect in-browser
Wasm-based cryptojacking (§2.2).
2.1 Modeling Wasm Program Behavior
In this section, we investigate the feasibility of using the Wasm
instruction execution trace to model the behavior of Wasm programs,
and to differentiate a cryptocurrency mining Wasm program from
other benign Wasm programs. Intuitively, one can use the full trace
to model a program. However, it is not practical because a program
may not always generate the same trace in multiple runs. Therefore,
CryptoLoot
Tanks
Percentage
Inst. Sequences
Inst. Sequences
Rank
1
2
3
4
5
6
7
8
9
10
add xor shl add xor
shl add xor shl add
xor shl add xor xor
xor shl add xor shl
add shl add xor shl
shl add shl add xor
xor xor add shl add
shl add xor xor add
add xor xor add shl
add shl add shl add
Percentage
4.90%
3.97%
3.91%
3.83%
3.83%
3.83%
3.83%
3.08%
2.45%
2.43%
Table 1: The frequency distribution of top instructions of Cryp-
toLoot and Tanks.
11.20% shl shr_s eqz shl shr_s
11.20% shl shr_s add shl shr_s
5.60% shr_s add shl shr_s ne
5.60% shr_s eqz shl shr_s add
4.56% eqz shl shr_s add shl
4.56% add shl shr_s eqz shl
3.11% add shl shr_s ne or
3.11% add add add add add
3.11% shl shr_s shl shr_s eq
2.07% add gt_u add gt_u or
we try to determine if the subsequences of the trace can be used as
a distinguishing feature to model the program behavior.
We collect and compare the Wasm instruction execution traces
of several different Wasm-based web applications with a custom
Chromium browser. In particular, we set a small sliding window/group
of consecutive numeric instructions1. We denote Ninst as the size
of the sliding window. We terminate a sliding window at a control
instruction to ensure that the instructions within the window are
always executed consecutively.
We present the frequency distribution of the top 10 subsequences
(groups) of https://crypto-loot.org/ – a popular cryptocurrency min-
ing service provider, and https://webassembly.org/demo/Tanks/ –
a web tank battling game developed in Wasm and Unity WebGL,
in Table 1. Specifically, we set Ninst to 5. It is obvious that the top
instruction subsequences of the two applications are quite distinct.
We also draw the accumulate frequency distribution of the top 10
instruction groups over time of the two applications in Figure 1
and Figure 2, respectively. The Y axis represents the accumulate
percentage of each group of Wasm instructions out of the 10 groups.
We vary the size of the instruction trace in the X axis to demon-
strate how the distribution may change over time. On the one hand,
the distribution of Tanks does change over time. On the other hand,
as expected, we observe a very stable distribution for CryptoLoot,
which had to repetitively calculate the proof of work for cryptocur-
rency mining. This suggests that the distribution of the top groups
of Ninst instructions is potentially a good feature to represent the
runtime behavior of Wasm programs and to differentiate between
different Wasm programs.
2.2 Detecting Cryptocurrency Mining
Programs
As we observed in §2.1, the frequency distribution of the top instruc-
tion groups of CryptoLoot is very stable over time. We thus check
in runtime if another Wasm program exhibits a very similar dis-
tribution. Nevertheless, as is evident in Figure 1, the accumulative
distribution is not always constant over time.
To capture potential variation of the mining activities and to
enable fast detection, we calculate the frequency distribution of
the top Nдroup groups of Ninst instructions of a mining sample
1http://webassembly.github.io/spec/core/binary/instructions.html
Figure 1: The frequency distribution of top instructions of Cryp-