::: para
在系统启动过程中，会提示输入密码短语。提供正确的密码短语后，系统将继续正常引导。如果在多个加密设备中使用不同密码短语，可能需要在启动过程中输入多个密码短语。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
考虑在一个给定系统中为所有加密块设备使用同一密码短语。这可简化系统启动过程，且只需要记住几个密码短语。只要确定选择好的密码短语！
:::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#Disk_Encryption_Guide.html#idm139817208822016}C.2.3. 选择一个安全性好的密码 {.title}
:::
::: para
虽然 dm-crypt/LUKS 支持同时密码和密码短语，anaconda
安装程序只支持使用密码短语在安装过程中生成和访问加密的块设备。
:::
::: para
LUKS
支持密码短语加强，但最好还是选择一个好密码短语（就是说\"难猜的\"）。请注意：使用单词\"passphrase\"与\"password\"完全不同。这是全球通用的。短语中包含多个单词以便增加数据的安全性是非常重要的。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#Disk_Encryption_Guide.html#idm139817175460800}C.3. 在 Anaconda 中创建加密块设备 {.title}
:::
::: para
可以在系统安装过程中创建加密块设备。这样可以轻松使用加密分区配置系统。
:::
::: para
要块设备加密，请在选择自动分区时点选\"加密系统\"复选框或者在创建独立分区、软件
RAID
阵列或者逻辑卷时点选\"加密\"复选框。完成分区后，会提示输入加密密码短语。访问加密设备时会需要这个密码短语。如果有
LUKS
设备，并在安装过程中为其提供正确密码短语，密码短语对话框仍会包含一个复选框。点选这个复选框表示要为每个现有加密块设备的可用插槽添加新的密码短语。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
在\"自动分区\"页面中点选\"加密系统\"复选框并选择\"创建自定义布局\"不会自动加密任何块设备。
:::
:::
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
可使用 `kickstart`{.command} 为每个新加密的块设备设置单独的密码。
:::
:::
:::
::: section
::: titlepage
## [⁠]{#Disk_Encryption_Guide.html#idm139817217909280}C.3.1. 可以加密什么类型的块设备？ {.title}
:::
::: para
大多类型的块设备都可使用 LUKS 加密。可使用 anaconda 加密分区、LVM
物理卷、LVM 逻辑卷以及软件 RAID 阵列。
:::
:::
::: section
::: titlepage
## [⁠]{#Disk_Encryption_Guide.html#Disk_Encryption_Guide-Saving_Passphrases}C.3.2. 保存密码短语 {.title}
:::
[]{#Disk_Encryption_Guide.html#idm139817206106192
.indexterm}[]{#Disk_Encryption_Guide.html#idm139817197764208 .indexterm}
::: para
如果在安装过程中使用 kickstart
文件，则可以将安装过程中使用的密码短语自动保存到本地文件系统的加密文件（*escrow
packet*）中。要使用这个特性，就必须在 [**anaconda**]{.application}
可访问的位置有可用的 X.509 证书。要为这个证书指定 URL，请为任意
`autopart`{.command}、`logvol`{.command}、`part`{.command} 或者
`raid`{.command} 命令添加*`--escrowcert`*
参数。在安装过程中，指定设备的加密密钥保存在 `/root`{.filename}
目录下的文件中并与证书一同加密。
:::
::: para
只有在使用 kickstart 文件时，方可在安装过程中保存 escrow packet -
详情请参考 [第 32 章 *Kickstart
安装*](#ch-kickstart2.html){.xref}。虽然可使用
[**volume_key**]{.application} 工具在已安装的系统中创建 escrow
packet，但不能在交互式安装过程中保存 escrow
packet。[**volume_key**]{.application} 工具也允许使用 escrow packet
中保存的信息恢复对加密卷的访问。详情请参考
[**volume_key**]{.application} 的 man page。
:::
:::
::: section
::: titlepage
## [⁠]{#Disk_Encryption_Guide.html#Disk_Encryption_Guide-Creating_and_Saving_Backup_Passphrases}C.3.3. 创建并保存备份密码短语 {.title}
:::
[]{#Disk_Encryption_Guide.html#idm139817173881568
.indexterm}[]{#Disk_Encryption_Guide.html#idm139817113236896
.indexterm}[]{#Disk_Encryption_Guide.html#idm139817180647488
.indexterm}[]{#Disk_Encryption_Guide.html#idm139817138080640 .indexterm}
::: para
如果在安装过程中使用 kickstart 文件，[**anaconda**]{.application}
可为系统的每个块设备添加随机生成的备份密码短语，并将每个密码短语保存到本地文件系统的加密文件中。请按照
[第 C.3.2 节
"保存密码短语"](#Disk_Encryption_Guide.html#Disk_Encryption_Guide-Saving_Passphrases){.xref}
中的描述使用 *`--escrowcert`* 参数指定这个证书的
URL，并为每个要生成备份密码短语的设备关联的 kickstart 命令附加
*`--backuppassphrase`* 参数。
:::
::: para
请注意这个特性只能在执行 kickstart 安装时可用。详情请参考 [第 32 章
*Kickstart 安装*](#ch-kickstart2.html){.xref}。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#Disk_Encryption_Guide.html#idm139817112542528}C.4. 安装完成后在系统上创建加密的块设备。 {.title}
:::
::: para
加密块设备可在安装完成后创建和分配。
:::
::: section
::: titlepage
## [⁠]{#Disk_Encryption_Guide.html#idm139817215608384}C.4.1. 创建块设备 {.title}
:::
::: para
使用 `parted`{.command}、`pvcreate`{.command}、`lvcreate`{.command} 和
`mdadm`{.command} 创建要加密的块设备。
:::
:::
::: section
::: titlepage
## [⁠]{#Disk_Encryption_Guide.html#randomize_device}C.4.2. 可选项：使用随机数据填充设备 {.title}
:::
::: para
加密前使用随机数据填充\（例如：`/dev/sda3`{.filename}）可大大提高加密强度。然后这会花很长的时间。
:::
::: {.warning xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**警告**
:::
::: admonition
::: para
以下的命令将会破坏该设备上的所有已存在数据。
:::
:::
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    最好的方法，就是提供高质量的随机数据但是时间较长（多数系统中一个 G
    需要几分钟）：
    :::
    ``` programlisting
    dd if=/dev/urandom of=
    ```
-   ::: para
    最快的方法是提供低质量随机数据：
    :::
    ``` programlisting
    badblocks -c 10240 -s -w -t random -v 
    ```
:::
:::
::: section
::: titlepage
## [⁠]{#Disk_Encryption_Guide.html#idm139817112031504}C.4.3. 将设备格式化为 dm-crypt/LUKS 加密设备 {.title}
:::
::: {.warning xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**警告**
:::
::: admonition
::: para
以下命令将破坏该设备中所有现存数据。
:::
:::
:::
``` programlisting
cryptsetup luksFormat 
```
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
要了解更多信息，请阅读`cryptsetup(8)`{.command} man page。
:::
:::
:::
::: para
输入两次密码后设备将格式化，之后就可使用了。使用如下命令进行验证：
:::
``` programlisting
cryptsetup isLuks  && echo Success
```
::: para
使用以下命令来查看设备的加密信息：
:::
``` programlisting
cryptsetup luksDump 
```
:::
::: section
::: titlepage
## [⁠]{#Disk_Encryption_Guide.html#idm139817212266768}C.4.4. 创建一个映射允许访问设备中解密的内容 {.title}
:::
::: para
要访问设备中解密的内容，必须使用内核 `device-mapper`{.command}
建立映射。
:::
::: para
为映射起个有实际意义的名字是很有用的。LUKS 为每个设备都提供了
UUID（通用唯一识别符，Universally Unique
Identifier）。这个与设备名不同（例如：`/dev/sda3`{.filename}），只要
LUKS 标头完整，UUID 会保持不变。使用以下命令查找 LUKS 设备的 UUID：
:::
``` programlisting
cryptsetup luksUUID 
```
::: para
`luks-`{.command}
是一个可靠、富含信息且唯一的映射名称示例，其中使用设备 LUKS UUID 替换
\（例如：`luks-50ec957a-5b5a-47ee-85e6-f8085bbc97a8`{.command}）。这个命名规则看来很繁琐，但并不需要经常输入。
:::
``` programlisting
cryptsetup luksOpen  
```
::: para
应该有一个设备节点 `/dev/mapper/`{.filename}
代表加密的设备。这个块设备可与其他未加密块设备一样进行读、写操作。
:::
::: para
使用以下命令查看有关映射设备的信息：
:::
``` programlisting
dmsetup info 
```
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
详情请阅读 `dmsetup(8)`{.command} man page。
:::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#Disk_Encryption_Guide.html#idm139817197573920}C.4.5. 在映射设备中创建文件系统或者继续构建复杂存储构架 {.title}
:::
::: para
使用映射设备节点（`/dev/mapper/`{.filename}）作为其他块设备。要在映射设备中创建
`ext2`{.command} 文件系统，请使用以下命令：
:::
``` programlisting
mke2fs /dev/mapper/
```
::: para
要将这个文件系统挂载到 `/mnt/test`{.filename}，请使用以下命令：
:::
::: {.important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**重要**
:::
::: admonition
::: para
执行这个命令前目录 `/mnt/test`{.filename} 必须已经存在。
:::
:::
:::
``` programlisting
mount /dev/mapper/ /mnt/test
```
:::