### 3.6.2 COMPARE

The `COMPARE` procedure performs an exact byte-by-byte comparison of two large objects (LOBs) for a given length at specified offsets. The LOBs being compared must be of the same data type.

#### Syntax
```sql
status INTEGER COMPARE(
    lob_1 { BLOB | CLOB },
    lob_2 { BLOB | CLOB }
    [, amount INTEGER [, offset_1 INTEGER [, offset_2 INTEGER ]]])
```

#### Parameters
- **lob_1**: Large object locator of the first LOB to be compared. Must be the same data type as `lob_2`.
- **lob_2**: Large object locator of the second LOB to be compared. Must be the same data type as `lob_1`.
- **amount**:
  - For `BLOB`: The number of bytes to compare.
  - For `CLOB`: The number of characters to compare.
  - Default: The maximum size of the LOB.
- **offset_1**: Position within the first LOB to begin the comparison. The first byte/character is offset 1. Default is 1.
- **offset_2**: Position within the second LOB to begin the comparison. The first byte/character is offset 1. Default is 1.
- **status**:
  - 0 if both LOBs are exactly the same for the specified length and offsets.
  - Non-zero if the LOBs are not the same.
  - NULL if `amount`, `offset_1`, or `offset_2` are less than zero.

### 3.6.3 CONVERTTOBLOB

The `CONVERTTOBLOB` procedure converts character data (CLOB) to binary data (BLOB).

#### Syntax
```sql
CONVERTTOBLOB(
    dest_lob IN OUT BLOB,
    src_clob CLOB,
    amount INTEGER,
    dest_offset IN OUT INTEGER,
    src_offset IN OUT INTEGER,
    blob_csid NUMBER,
    lang_context IN OUT INTEGER,
    warning OUT INTEGER)
```

#### Parameters
- **dest_lob**: BLOB large object locator where the character data will be converted.
- **src_clob**: CLOB large object locator containing the character data to be converted.
- **amount**: Number of characters from `src_clob` to be converted.
- **dest_offset IN**: Position in bytes in the destination BLOB where writing should begin. The first byte is offset 1.
- **dest_offset OUT**: Position in bytes in the destination BLOB after the write operation completes.
- **src_offset IN**: Position in characters in the source CLOB where conversion should begin. The first character is offset 1.
- **src_offset OUT**: Position in characters in the source CLOB after the conversion operation completes.
- **blob_csid**: Character set ID of the converted, destination BLOB.
- **lang_context IN**: Language context for the conversion. Default value is 0.
- **lang_context OUT**: Language context after the conversion completes.
- **warning**: 
  - 0 if the conversion was successful.
  - 1 if an inconvertible character was encountered.

### 3.6.4 CONVERTTOCLOB

The `CONVERTTOCLOB` procedure converts binary data (BLOB) to character data (CLOB).

#### Syntax
```sql
CONVERTTOCLOB(
    dest_lob IN OUT CLOB,
    src_blob BLOB,
    amount INTEGER,
    dest_offset IN OUT INTEGER,
    src_offset IN OUT INTEGER,
    blob_csid NUMBER,
    lang_context IN OUT INTEGER,
    warning OUT INTEGER)
```

#### Parameters
- **dest_lob**: CLOB large object locator where the binary data will be converted.
- **src_blob**: BLOB large object locator containing the binary data to be converted.
- **amount**: Number of bytes from `src_blob` to be converted.
- **dest_offset IN**: Position in characters in the destination CLOB where writing should begin. The first character is offset 1.
- **dest_offset OUT**: Position in characters in the destination CLOB after the write operation completes.
- **src_offset IN**: Position in bytes in the source BLOB where conversion should begin. The first byte is offset 1.
- **src_offset OUT**: Position in bytes in the source BLOB after the conversion operation completes.
- **blob_csid**: Character set ID of the converted, destination CLOB.
- **lang_context IN**: Language context for the conversion. Default value is 0.
- **lang_context OUT**: Language context after the conversion completes.
- **warning**:
  - 0 if the conversion was successful.
  - 1 if an inconvertible character was encountered.

### 3.6.5 COPY

The `COPY` procedure copies one large object to another. The source and destination LOBs must be of the same data type.

#### Syntax
```sql
COPY(
    dest_lob IN OUT { BLOB | CLOB },
    src_lob { BLOB | CLOB },
    amount INTEGER
    [, dest_offset INTEGER [, src_offset INTEGER ]])
```

#### Parameters
- **dest_lob**: Large object locator of the LOB to which `src_lob` will be copied. Must be the same data type as `src_lob`.
- **src_lob**: Large object locator of the LOB to be copied to `dest_lob`. Must be the same data type as `dest_lob`.
- **amount**: Number of bytes/characters of `src_lob` to be copied.
- **dest_offset**: Position in the destination LOB where writing should begin. The first position is offset 1. Default is 1.
- **src_offset**: Position in the source LOB where copying should begin. The first position is offset 1. Default is 1.

### 3.6.6 ERASE

The `ERASE` procedure erases a portion of a large object. For BLOBs, it replaces the specified portion with zero-byte fillers. For CLOBs, it replaces the specified portion with spaces. The actual size of the LOB is not altered.

#### Syntax
```sql
ERASE(
    lob_loc IN OUT { BLOB | CLOB },
    amount IN OUT INTEGER
    [, offset INTEGER ])
```

#### Parameters
- **lob_loc**: Large object locator of the LOB to be erased.
- **amount IN**: Number of bytes/characters to be erased.
- **amount OUT**: Number of bytes/characters actually erased. This value can be smaller than the input value if the end of the LOB is reached before the specified amount of bytes/characters have been erased.
- **offset**: Position in the LOB where erasing should begin. The first byte/character is position 1. Default is 1.

### 3.6.7 GET_STORAGE_LIMIT

The `GET_STORAGE_LIMIT` function returns the limit on the largest allowable large object.

#### Syntax
```sql
size INTEGER GET_STORAGE_LIMIT(lob_loc BLOB)
size INTEGER GET_STORAGE_LIMIT(lob_loc CLOB)
```

#### Parameters
- **size**: Maximum allowable size of a large object in this database.
- **lob_loc**: This parameter is ignored but is included for compatibility.

### 3.6.8 GETLENGTH

The `GETLENGTH` function returns the length of a large object.

#### Syntax
```sql
amount INTEGER GETLENGTH(lob_loc BLOB)
amount INTEGER GETLENGTH(lob_loc CLOB)
```

#### Parameters
- **lob_loc**: Large object locator of the LOB whose length is to be obtained.
- **amount**: Length of the LOB in bytes for BLOBs or characters for CLOBs.

### 3.6.9 INSTR

The `INSTR` function returns the location of the nth occurrence of a given pattern within a large object.

#### Syntax
```sql
position INTEGER INSTR(
    lob_loc { BLOB | CLOB },
    pattern { RAW | VARCHAR2 } [, offset INTEGER [, nth INTEGER ]])
```

#### Parameters
- **lob_loc**: Large object locator of the LOB in which to search for the pattern.
- **pattern**: Pattern of bytes or characters to match against the LOB. `pattern` must be `RAW` if `lob_loc` is a BLOB. `pattern` must be `VARCHAR2` if `lob_loc` is a CLOB.
- **offset**: Position within `lob_loc` to start the search for the pattern. The first byte/character is position 1. Default is 1.
- **nth**: Search for the pattern, nth number of times starting at the position given by `offset`. Default is 1.
- **position**: Position within the LOB where the pattern appears the nth time specified by `nth` starting from the position given by `offset`.

### 3.6.10 READ

The `READ` procedure reads a portion of a large object into a buffer.

#### Syntax
```sql
READ(
    lob_loc { BLOB | CLOB },
    amount IN OUT BINARY_INTEGER,
    offset INTEGER,
    buffer OUT { RAW | VARCHAR2 })
```

#### Parameters
- **lob_loc**: Large object locator of the LOB to be read.
- **amount IN**: Number of bytes/characters to read.
- **amount OUT**: Number of bytes/characters actually read. If there is no more data to be read, `amount` returns 0 and a `DATA_NOT_FOUND` exception is thrown.
- **offset**: Position to begin reading. The first byte/character is position 1.
- **buffer**: Variable to receive the LOB. If `lob_loc` is a BLOB, then `buffer` must be `RAW`. If `lob_loc` is a CLOB, then `buffer` must be `VARCHAR2`.

### 3.6.11 SUBSTR

The `SUBSTR` function returns a portion of a large object.

#### Syntax
```sql
data { RAW | VARCHAR2 } SUBSTR(
    lob_loc { BLOB | CLOB }
    [, amount INTEGER [, offset INTEGER ]])
```

#### Parameters
- **lob_loc**: Large object locator of the LOB to be read.
- **amount**: Number of bytes/characters to be returned. Default is 32,767.
- **offset**: Position within the LOB to begin returning data. The first byte/character is position 1. Default is 1.
- **data**: Returned portion of the LOB. If `lob_loc` is a BLOB, the return data type is `RAW`. If `lob_loc` is a CLOB, the return data type is `VARCHAR2`.

### 3.6.12 TRIM

The `TRIM` procedure truncates a large object to the specified length.

#### Syntax
```sql
TRIM(
    lob_loc IN OUT { BLOB | CLOB },
    newlen INTEGER)
```

#### Parameters
- **lob_loc**: Large object locator of the LOB to be trimmed.
- **newlen**: Number of bytes/characters to which the LOB is to be trimmed.

### 3.6.13 WRITE

The `WRITE` procedure writes data into a large object. Any existing data in the LOB at the specified offset for the given length is overwritten by the data given in the buffer.

#### Syntax
```sql
WRITE(
    lob_loc IN OUT { BLOB | CLOB },
    amount BINARY_INTEGER,
    offset INTEGER,
    buffer { RAW | VARCHAR2 })
```

#### Parameters
- **lob_loc**: Large object locator of the LOB to be written.
- **amount**: The number of bytes/characters in `buffer` to be written to the LOB.
- **offset**: The offset in bytes/characters from the beginning of the LOB (origin is 1) for the write operation to begin.
- **buffer**: Contains data to be written to the LOB. If `lob_loc` is a BLOB, then `buffer` must be `RAW`. If `lob_loc` is a CLOB, then `buffer` must be `VARCHAR2`.

### 3.6.14 WRITEAPPEND

The `WRITEAPPEND` procedure appends data to the end of a large object.

#### Syntax
```sql
WRITEAPPEND(
    lob_loc IN OUT { BLOB | CLOB },
    amount BINARY_INTEGER,
    buffer { RAW | VARCHAR2 })
```

#### Parameters
- **lob_loc**: Large object locator of the LOB to which data is to be appended.
- **amount**: Number of bytes/characters from `buffer` to be appended to the LOB.
- **buffer**: Data to be appended to the LOB. If `lob_loc` is a BLOB, then `buffer` must be `RAW`. If `lob_loc` is a CLOB, then `buffer` must be `VARCHAR2`.

### 3.7 DBMS_LOCK

Advanced Server provides support for the `DBMS_LOCK.SLEEP` procedure.

#### Function/Procedure
- **SLEEP(seconds)**: Suspends a session for the specified number of seconds.

#### Description
- Advanced Server's implementation of `DBMS_LOCK` is a partial implementation compared to Oracle's version. Only `DBMS_LOCK.SLEEP` is supported.

### 3.7.1 SLEEP

The `SLEEP` procedure suspends the current session for the specified number of seconds.

#### Syntax
```sql
SLEEP(seconds NUMBER)
```

#### Parameters
- **seconds**: Specifies the number of seconds for which you wish to suspend the session. `seconds` can be a fractional value; for example, enter 1.75 to specify one and three-fourths of a second.

### 3.8 DBMS_MVIEW

Use procedures in the `DBMS_MVIEW` package to manage and refresh materialized views and their dependencies. Advanced Server provides support for the following `DBMS_MVIEW` procedures:

#### Procedures
- **GET_MV_DEPENDENCIES(list VARCHAR2, deplist VARCHAR2)**: Returns a list of dependencies for a specified view.
- **REFRESH(list VARCHAR2, method VARCHAR2, rollback_seg VARCHAR2, push_deferred_rpc BOOLEAN, refresh_after_errors BOOLEAN, purge_option NUMBER, parallelism NUMBER, heap_size NUMBER, atomic_refresh BOOLEAN, nested BOOLEAN)**: Refreshes all views named in a comma-separated list of view names.
- **REFRESH(tab dbms_utility.uncl_array, method VARCHAR2, rollback_seg VARCHAR2, push_deferred_rpc BOOLEAN, refresh_after_errors BOOLEAN, purge_option NUMBER, parallelism NUMBER, heap_size NUMBER, atomic_refresh BOOLEAN, nested BOOLEAN)**: Refreshes all views named in a table of `dbms_utility.uncl_array` values.
- **REFRESH_ALL_MVIEWS(number_of_failures BINARY_INTEGER, method VARCHAR2, rollback_seg VARCHAR2, refresh_after_errors BOOLEAN, atomic_refresh BOOLEAN)**: Refreshes all materialized views.
- **REFRESH_DEPENDENT(number_of_failures BINARY_INTEGER, list VARCHAR2, method VARCHAR2, rollback_seg VARCHAR2, refresh_after_errors BOOLEAN, atomic_refresh BOOLEAN, nested BOOLEAN)**: Refreshes all views that are dependent on the views listed in a comma-separated list.
- **REFRESH_DEPENDENT(number_of_failures BINARY_INTEGER, tab dbms_utility.uncl_array, method VARCHAR2, rollback_seg VARCHAR2, refresh_after_errors BOOLEAN, atomic_refresh BOOLEAN, nested BOOLEAN)**: Refreshes all views that are dependent on the views listed in a table of `dbms_utility.uncl_array` values.

#### Description
- Advanced Server's implementation of `DBMS_MVIEW` is a partial implementation compared to Oracle's version. Only the functions and procedures listed above are supported.

### 3.8.1 GET_MV_DEPENDENCIES

When given the name of a materialized view, `GET_MV_DEPENDENCIES` returns a list of items that depend on the specified view.

#### Syntax
```sql
GET_MV_DEPENDENCIES(
    list IN VARCHAR2,
    deplist OUT VARCHAR2)
```

#### Parameters
- **list**: Specifies the name of a materialized view, or a comma-separated list of materialized view names.
- **deplist**: A comma-separated list of schema-qualified dependencies. `deplist` is a `VARCHAR2` value.

#### Example
```sql
DECLARE
    deplist VARCHAR2(1000);
BEGIN
    DBMS_MVIEW.GET_MV_DEPENDENCIES('public.emp_view', deplist);
    DBMS_OUTPUT.PUT_LINE('deplist: ' || deplist);
END;
```
This example displays a list of the dependencies on a materialized view named `public.emp_view`.

### 3.8.2 REFRESH

Use the `REFRESH` procedure to refresh all views specified in either a comma-separated list of view names or a table of `DBMS_UTILITY.UNCL_ARRAY` values. The procedure has two signatures; use the first form when specifying a comma-separated list of view names.

#### Syntax
```sql
REFRESH(
    list IN VARCHAR2,
    method IN VARCHAR2 DEFAULT NULL,
    ...
)
```

#### Parameters
- **list**: Specifies the name of a materialized view, or a comma-separated list of materialized view names.
- **method**: Specifies the method to use for refreshing the views. Default is `NULL`.

Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved.