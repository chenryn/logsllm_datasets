### Introduction to the Malware Deception Approach

Traditional methods for deceiving malware often assume that the malicious software will perform a specific set of actions, leading to the deployment of all possible deception tactics in advance. In contrast, our approach dynamically analyzes the current execution of the malware and activates only the necessary deception ploys to counteract the specific task the malware is currently performing.

### Related Work

In [15], the authors proposed a framework for extracting deception parameters—environmental variables that attackers rely on to achieve their malicious goals. These parameters can be altered or misrepresented to create cyber deception. However, this framework does not support real-time deception or automated orchestration. Similarly, in [26] and [44], the authors introduced an autonomous deception system capable of generating deception schemes by identifying potential HoneyThing candidates and orchestrating a deceptive environment. This approach, however, provides static deception orchestration and is limited to deceiving specific behaviors related to credential stealing. Additionally, the API-to-behavior mapping was manually created by human experts, limiting its flexibility.

Our method, SODA, overcomes these limitations by providing configurable, real-time deception as a service and automated dynamic orchestration. We also automate the API(MSG)-to-MITRE mapping to understand the ongoing context within the malware's execution, enabling the selection of appropriate deception ploys at runtime. It is worth noting that while Scarecrow [47] focuses on one of the 4D goals (deflect, distort, deplete, and discover), SODA is capable of addressing all four.

Other research has utilized decoy files or honey accounts to detect ransomware [25, 37], general malware [9, 20], and DDoS attacks [34]. For instance, in [10] and [11], researchers employed honeypots and honeytokens to detect and prevent web-based attacks. These strategies, however, are primarily focused on detection rather than deception and are designed to target specific types of malware. Our approach, on the other hand, is generic and applicable to any malware with known malicious behaviors. The MSG extraction in our method is similar to the malware behavior graph proposed in [33], but it serves a different purpose: MSG is used for deception, whereas malware behavior graphs are used for detection. In [39] and [14], the authors attempted to detect malware capabilities using the MITRE ATT&CK framework, but their mappings were manually created. Our tool automates the mapping from malware behavior to the MITRE ATT&CK framework.

### Discussion and Conclusion

This paper introduces SODA, a dynamic cyber deception orchestration system capable of analyzing real-world malware, discovering attack techniques, constructing Deception Playbooks, and orchestrating the environment to deceive malware. SODA advances the state-of-the-art by providing dynamic, real-time deception and customization options for users to choose their own deception ploys. Our proposed method of MSG extraction, followed by MSG-to-MITRE mapping, has shown promising results in bridging the gap between malware traces and the MITRE ATT&CK framework. The extracted MSGs and MSG-to-MITRE mapping can play a vital role in improving existing tools.

We conducted rigorous evaluations to validate SODA’s efficiency and scalability against 225 recent malware samples, achieving an accuracy of 95% in deceiving them. Additionally, our approach extracted MSGs with a 97% recall, and our MSG-to-MITRE mapping attained a top-1 accuracy of 88.75%.

### Technical Challenges

We acknowledge several technical challenges in our approach. First, automated API-to-MITRE mapping is challenging due to the semantic gap between API descriptions and MITRE ATT&CK descriptions. Additionally, since SODA relies on existing malware detection approaches, which are imperfect, it can occasionally impact normal usage of benign processes if they are misclassified as malicious. However, existing detection systems have a reasonably low false-positive rate, which can mitigate this issue. Furthermore, malware evasion is a significant concern for SODA. As we use API hooking for deception, if any malware can detect and evade API hooking, SODA will be unable to deceive it. To address this, the SODA framework can leverage existing techniques resistant to malware evasion, such as the API Call Tracer built on Barebox [32], which traces system calls via kernel-level hooking. Such improvements are left for future work. Finally, implementing API hooking can be challenging, as even a small mistake can disrupt the system.

### Acknowledgments

This work is partially supported by the Office of Naval Research under Grant No. N00014-21-1-2171/N00014-19-1-2371, the Army Research Office under Grant No. W911NF2110032, and the National Science Foundation under Grant No. OAC-1931541. The authors would like to thank Nishit Mengar and Saurabh Pathak from Carnegie Mellon University for their help in implementation.

### References

[References listed here]

### MITRE Tactics and Techniques

| MITRE Tactics | MITRE Techniques | Tools |
|---------------|------------------|-------|
| Execution     | Rundll32, Command-line Interface, Service Execution, PowerShell, WMI, Shared Module, Registry Run/Keys, Start Folder, New Service, Modify Existing Service, Hooking, Scheduled Tasks, Image File Execution, Create or Modify System Process, Boot or Logon Autostart Execution, Process Injection | FORECAST, DodgeTron, SODA, Kris et al. [39] |
| Persistence   | -                | -     |
| Privilege Escalation | - | - |
| Defense Evasion | - | - |
| Credential Access | - | - |
| Discovery     | - | - |
| Lateral Movement | - | - |
| Collection    | - | - |
| Exfiltration  | - | - |
| C&C           | - | - |

---

This optimized text aims to provide a clear, coherent, and professional presentation of the research and its contributions.