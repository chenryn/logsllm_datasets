the malware. Because these approaches assume the malware will
perform a specific set of malicious actions, hence they deploy all
possible deception ploys ahead of time. Our approach considers the
malware’s current execution and only activates the deception ploys
required to deceive the task malware is currently performing.
In [15], authors proposed a framework to extract deception pa-
rameters - the environmental variables on which the attackers rely
to achieve their malicious goal. These deception parameters can be
altered or misrepresented to achieve cyber deception. However, the
framework neither supports real-time deception nor automated or-
chestration. In both [26, 44], the authors presented an autonomous
deception system capable of creating deception schemes by identi-
fying potential HoneyThing candidates and orchestrating a decep-
tive environment with these HoneyThings. However, the approach
provides static deception orchestration using HoneyThings and
can only deceive a few malicious behaviors specific to credential
stealing. Furthermore, as the approach focuses on deceiving a few
malicious behaviors, the API to behavior mapping was limited and
created by human experts. In contrast, our method outperforms
both mentioned approaches by providing configurable deception
as service (in real-time) and automated dynamic orchestration. We
also automated the API(MSG)-to-MITRE mapping in order to un-
derstand the ongoing context within malware execution to be able
to select the appropriate deception ploys at run-time. We note that
Scarecrow [47] covers one of the 4D goals (deflect, distort, deplete,
and discover), while SODA is capable of all 4D goals.
An orthogonal line of works utilized decoy files or honey ac-
counts to detect ransomware [25, 37], general malware [9, 20], or
DDoS attacks [34]. In [10] and [11], researchers employed hon-
eypots and honeytokens to detect and prevent web-based attacks.
Such strategies are out of the scope of our work as they mainly focus
on detection where we are interested in deception. Moreover, these
techniques are designed to detect only a particular type of malware
(ransomware, banking trojans). Our approach is generic and appli-
cable to any malware as long as it has the malicious behaviors for
which we designed deception ploys. Our MSG extraction approach
is similar to malware behavior graph proposed in [33] but we have
a different purpose: MSG is used for deception while malware be-
havior graphs are used for malware detection. In [39] and [14], the
authors attempted to detect malware capabilities and presented
them in the form of MITRE ATT&CK framework. However, their
mappings were created manually based on their domain knowledge,
where our tool can perform automatic malware behavior to MITRE
ATT&CK framework mapping.
7 DISCUSSION AND CONCLUSION
This paper presents SODA, a dynamic cyber deception orchestra-
tion system capable of analyzing real-world malware, discovering
attack techniques, constructing Deception Playbooks, and orches-
trating the environment to deceive malware. SODA advances the
state-of-the-art by providing dynamic real-time deception and cus-
tomization options to the users to choose their own deception
ploys. Our proposed method of MSG extraction, followed by MSG-
to-MITRE mapping, showed a promising result in bridging the gap
between malware traces and the MITRE ATT&CK framework. Our
extracted MSGs and MSG-to-MITRE mapping can play a vital role
in improving the existing tools.
We conducted rigorous evaluations to validate SODA’s efficiency
and scalability against 225 recent malware and observed an accuracy
of 95% in deceiving them. In addition, our approach extracted MSGs
with a 97% recall and our MSG-to-MITRE mapping attained a top-1
accuracy of 88.75%.
We acknowledge a few technical challenges regarding our ap-
proach. First, automated API-to-MITRE mapping is challenging
because of the semantic gap between API description and MITRE
ATT&CK description. In addition, Since SODA relies on existing
malware detection approaches that are imperfect, it can occasion-
ally impact normal usage of benign processes if they are misclassi-
fied as malicious. However, we note that existing detection systems
have a reasonably low false-positive rate, which can alleviate the
problem. Moreover, malware evasion is an important and practical
issue for SODA. As we implemented deception using API hooking,
if any malware can detect and evade API hooking, SODA will be
unable to deceive it. However, the SODA framework can leverage
existing techniques that are resistant to malware evasion. For exam-
ple, the API Call Tracer can be built on top of Barebox[32], which
traces system calls via kernel-level hooking. We leave such improve-
ments for future work. Finally, API hooking implementation can
be challenging, as one simple mistake can break the system.
ACKNOWLEDGMENTS
This work is partially supported by Office of Naval Research un-
der Grant No. N00014-21-1-2171/N00014-19-1-2371, Army Research
Office under Grant No. W911NF2110032, and National Science Foun-
dation under Grant No. OAC-1931541. The authors would like to
thank Nishit Mengar and Saurabh Pathak from Carnegie Mellon
University for their help in implementation.
686SODA: A System for Cyber Deception Orchestration and Automation
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
REFERENCES
[1] Online. Any.run. https://any.run/
[2] Online. Cuckoo Monitor. https://github.com/cuckoosandbox/monitor
[3] Online. Cuckoo Sandbox. https://cuckoosandbox.org/
[4] Online.
Dissecting the Windows Defender Driver - WdFilter (Part 1).
https://www.n4r1b.com/posts/2020/01/dissecting-the-windows-defender-
driver-wdfilter-part-1/
[5] Online. EasyHook - The reinvention of Windows API Hooking. https://github.com/
[6] Online. Keylogger-Screen-Capture. https://github.com/ajayrandhawa/Keylogger-
EasyHook/EasyHook
Screen-Capture
[7] Online. Malshare is a free Malware repository providing researchers access to
samples, malicious feeds, and Yara results. https://malshare.com/
[8] Online. VirusTotal Public vs Premium API. https://developers.virustotal.com/v3.
0/reference#public-vs-premium-api
[9] Mitsuaki Akiyama, Takeshi Yagi, Kazufumi Aoki, Takeo Hariu, and Youki
Kadobayashi. 2013. Active credential leakage for observing web-based attack cy-
cle. In International Workshop on Recent Advances in Intrusion Detection. Springer,
223–243.
[10] Mitsuaki Akiyama, Takeshi Yagi, Takeo Hariu, and Youki Kadobayashi. 2018.
HoneyCirculator: distributing credential honeytoken for introspection of web-
based attack cycle.
International Journal of Information Security 17, 2 (2018),
135–151.
[11] Mitsuaki Akiyama, Takeshi Yagi, Takeshi Yada, Tatsuya Mori, and Youki
Kadobayashi. 2017. Analyzing the ecosystem of malicious URL redirection
through longitudinal observation from honeypots. computers & security 69
(2017), 155–173.
[12] Ehab Al-Shaer. 2011. Toward Network Configuration Randomization for Moving
Target Defense. Springer New York, 153–159.
[13] Ehab Al-Shaer, Jinpeng Wei, W Kevin, and Cliff Wang. 2019. Autonomous Cyber
Deception. Springer.
[14] Omar Alrawi, Moses Ike, Matthew Pruett, Ranjita Pai Kasturi, Srimanta Barua,
Taleb Hirani, Brennan Hill, and Brendan Saltaformaggio. 2021. Forecasting Mal-
ware Capabilities From Cyber Attack Memory Images. In 30th USENIX Security
Symposium.
[15] Mohammed Noraden Alsaleh, Jinpeng Wei, Ehab Al-Shaer, and Mohiuddin
Ahmed. 2018. gextractor: Towards automated extraction of malware decep-
tion parameters. In Proceedings of the 8th Software Security, Protection, and Reverse
Engineering Workshop. 1–12.
[16] Lance Alt, Robert Beverly, and Alberto Dainotti. 2014. Uncovering network tarpits
with degreaser. In Proceedings of the 30th Annual Computer Security Applications
Conference. 156–165.
[17] Kostas G Anagnostakis, Stelios Sidiroglou, Periklis Akritidis, Konstantinos Xini-
dis, Evangelos Markatos, and Angelos D Keromytis. 2005. Detecting targeted
attacks using shadow honeypots. (2005).
[18] Frederico Araujo, Kevin W. Hamlen, Sebastian Biedermann, and Stefan Katzen-
beisser. 2014. From Patches to Honey-Patches: Lightweight Attacker Misdirection,
Deception, and Disinformation. In Proceedings of the 2014 ACM SIGSAC Con-
ference on Computer and Communications Security (Scottsdale, Arizona, USA)
(CCS ’14). Association for Computing Machinery, New York, NY, USA, 942–953.
https://doi.org/10.1145/2660267.2660329
[19] Steven Bird, Ewan Klein, and Edward Loper. 2009. Natural language processing
with Python: analyzing text with the natural language toolkit. " O’Reilly Media,
Inc.".
[20] Brian M Bowen, Pratap Prabhu, Vasileios P Kemerlis, Stelios Sidiroglou, Angelos D
Keromytis, and Salvatore J Stolfo. 2010. Botswindler: Tamper resistant injection
of believable decoys in vm-based hosts for crimeware detection. In International
Workshop on Recent Advances in Intrusion Detection. Springer, 118–137.
[21] Matthew L Bringer, Christopher A Chelmecki, and Hiroshi Fujinoki. 2012. A
survey: Recent advances and future trends in honeypot research. International
Journal of Computer Network and Information Security 4, 10 (2012), 63.
[22] Fabio De Gaspari, Sushil Jajodia, Luigi V. Mancini, and Agostino Panico. 2016.
AHEAD: A New Architecture for Active Defense. In Proceedings of the 2016
ACM Workshop on Automated Decision Making for Active Cyber Defense (Vienna,
Austria) (SafeConfig ’16). Association for Computing Machinery, New York, NY,
USA, 11–16. https://doi.org/10.1145/2994475.2994481
[23] Qi Duan, Ehab Al-Shaer, Mazharul Islam, and Haadi Jafarian. 2018. Conceal:
A strategy composition for resilient cyber deception-framework, metrics and
deployment. In 2018 IEEE Conference on Communications and Network Security
(CNS). IEEE, 1–9.
[24] Kimberly J Ferguson-Walter, Maxine M Major, Chelsea K Johnson, and Daniel H
Muhleman. 2021. Examining the Efficacy of Decoy-based and Psychological
Cyber Deception. In 30th {USENIX} Security Symposium ({USENIX} Security
21).
[25] Ziya Alper Genç, Gabriele Lenzini, and Daniele Sgandurra. 2019. On Deception-
Based Protection Against Cryptographic Ransomware. In DIMVA.
[26] Md Mazharul Islam and Ehab Al-Shaer. 2020. Active deception framework: an
extensible development environment for adaptive cyber deception. In 2020 IEEE
Secure Development (SecDev). IEEE, 41–48.
[27] Md Mazharul Islam, Qi Duan, and Ehab Al-Shaer. 2019. Specification-driven
moving target defense synthesis. In Proceedings of the 6th ACM Workshop on
Moving Target Defense. 13–24.
[28] Md Mazharul Islam, Ashutosh Dutta, Md Sajidul Islam Sajid, Ehab Al-Shaer,
Jinpeng Wei, and Sadegh Farhang. 2021. CHIMERA: Autonomous Planning and
Orchestration for Malware Deception. In 2021 IEEE Conference on Communications
and Network Security (CNS). IEEE.
[29] Sushil Jajodia, Anup K. Ghosh, V. S. Subrahmanian, Vipin Swarup, Cliff Wang,
and X. Sean Wang. 2012. Moving Target Defense II: Application of Game Theory
and Adversarial Modeling. Springer.
[30] Sushil Jajodia, Anup K. Ghosh, Vipin Swarup, Cliff Wang, and X. Sean Wang.
2011. Moving Target Defense: Creating Asymmetric Uncertainty for Cyber Threats
(1st ed.). Springer Publishing Company, Incorporated.
[31] Maziar Janbeglou, Mazdak Zamani, and Suhaimi Ibrahim. 2010. Redirecting
network traffic toward a fake DNS server on a LAN. In 2010 3rd International
Conference on Computer Science and Information Technology, Vol. 2. IEEE, 429–
433.
[32] Dhilung Kirat, Giovanni Vigna, and Christopher Kruegel. 2011. Barebox: efficient
malware analysis on bare-metal. In Proceedings of the 27th Annual Computer
Security Applications Conference. 403–412.
[33] Clemens Kolbitsch, Paolo Milani Comparetti, Christopher Kruegel, Engin Kirda,
Xiaoyong Zhou, and XiaoFeng Wang. 2009. Effective and Efficient Malware
Detection at the End Host. In Proceedings of the 18th Conference on USENIX
Security Symposium (Montreal, Canada) (SSYM’09). USENIX Association, USA,
351–366.
[34] Lukas Krämer, Johannes Krupp, Daisuke Makita, Tomomi Nishizoe, Takashi
Koide, Katsunari Yoshioka, and Christian Rossow. 2015. Amppot: Monitoring
and defending against amplification ddos attacks. In International Symposium on
Recent Advances in Intrusion Detection. Springer, 615–636.
[35] Sukwha Kyung, Wonkyu Han, Naveen Tiwari, Vaibhav Hemant Dixit, Lakshmi
Srinivas, Ziming Zhao, Adam Doupé, and Gail-Joon Ahn. 2017. HoneyProxy:
Design and implementation of next-generation honeynet via SDN. In 2017 IEEE
Conference on Communications and Network Security (CNS). IEEE, 1–9.
[36] Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. 2013. Efficient
estimation of word representations in vector space. arXiv preprint arXiv:1301.3781
(2013).
[37] Chris Moore. 2016. Detecting ransomware with honeypot techniques. In 2016
Cybersecurity and Cyberforensics Conference (CCC). IEEE, 77–81.
[38] Amirreza Niakanlahiji, Jafar Haadi Jafarian, Bei-Tseng Chu, and Ehab Al-Shaer.
2020. HoneyBug: Personalized Cyber Deception for Web Applications. In 53rd
Hawaii International Conference on System Sciences, HICSS 2020, Maui, Hawaii,
USA, January 7-10, 2020. ScholarSpace, 1–10. http://hdl.handle.net/10125/63972
[39] Kris Oosthoek and Christian Doerr. 2019. Sok: Att&ck techniques and trends
in windows malware. In International Conference on Security and Privacy in
Communication Systems. Springer, 406–425.
[40] popescuadi. 2017. Ransomware - Simple C++ ransomware, prove the concept.
https://github.com/popescuadi/Ransomware.
[41] Niels Provos et al. 2004. A Virtual Honeypot Framework.. In USENIX Security
Symposium, Vol. 173. 1–14.
[42] Niels Provos and Thorsten Holz. 2007. Virtual honeypots: from botnet tracking to
intrusion detection. Pearson Education.
[43] J Rrushi. 2019. Honeypot evader: Activity-guided propagation versus counter-
evasion via decoy os activity. In Proceedings of the 14th IEEE International Confer-
ence on Malicious and Unwanted Software.
[44] Md Sajidul Islam Sajid, Jinpeng Wei, Md Rabbi Alam, Ehsan Aghaei, and Ehab Al-
Shaer. 2020. DodgeTron: Towards Autonomous Cyber Deception Using Dynamic
Hybrid Analysis of Malware. In 2020 IEEE Conference on Communications and
Network Security (CNS). IEEE, 1–9.
[45] Alexander Vetterl and Richard Clayton. 2018. Bitter harvest: Systematically
fingerprinting low-and medium-interaction honeypots at internet scale. In 12th
{USENIX} Workshop on Offensive Technologies ({WOOT} 18).
[46] Jim Yuill, Mike Zappe, Dorothy Denning, and Fred Feer. 2004. Honeyfiles: decep-
tive files for intrusion detection. In Proceedings from the Fifth Annual IEEE SMC
Information Assurance Workshop, 2004. IEEE, 116–122.
[47] Jialong Zhang, Zhongshu Gu, Jiyong Jang, Dhilung Kirat, Marc Stoecklin, Xiaokui
Shu, and Heqing Huang. 2020. Scarecrow: Deactivating Evasive Malware via Its
Own Evasive Logic. In 2020 50th Annual IEEE/IFIP International Conference on
Dependable Systems and Networks (DSN). IEEE, 76–87.
[48] Mikhail Zolotukhin and Timo Hämäläinen. 2014. Detection of zero-day malware
based on the analysis of opcode sequences. In CCNC.
687ACSAC ’21, December 6–10, 2021, Virtual Event, USA
MITRE Tactics
MITRE Techniques
Sajid, et al.
Tools
FORECAST DodgeTron
SODA Kris et
al. [39]
Execution
Persistance
Privilege
Escalation
Defense
Evasion
Credential
Access
Discovery
Lateral
Movement
Collection
Exfiltration
C&C
Execution Through API
Rundll32
Command-line Interface
Service Execution
Powershell
WMI
Shared Module
Registry Run/Keys Start Folder
New Service
Modify Existing Service
Hooking
Scheduled Tasks
Image File Execution
Create of Modify System Process
Boot or Logon Autostart Execution
Process Injection
Access Token Manipulation
Exploitation for Privilege Escalation
Deobfuscated/Decode Files
Obfuscated Files
Software Packing
Masquerading
DLL Side-Loading
Modify Registry
File Deletion
Virtualization/Sandbox Evasion
File Deletion
Input Capture
Credential Dumping
Data from local system
Unsecured Credentials:
Credentials in Files
Credentials from Password Stores:
Credentials from Web Browsers
Unsecured Credentials:
Credentials in Registry
Query Registry
Security Software Discover
Process Discovery
System Information Discovery
System Network Configuration
Discovery
File and Directory Discovery
Application Window Discovery
System Service Discovery
System Owner/User Discovery
Software Discovery
Remote File Copy
Remote Desktop Connection
Replication Through Removeable
Media
Clipboard Data
Screen Capture
Email Collection
Audio Collection
Video Collection
Generic
Generic
File Transfer Protocols
Ingression Tool Transfer
System Shutdown/Reboot
✓
✓