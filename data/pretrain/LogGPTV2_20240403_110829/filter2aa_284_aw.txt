Design
Are logs logging personal information, passwords or other sensitive information?
Logging and 
Auditing
Do audit logs log connection attempts (both successful and failures)?
Logging and 
Auditing
Is there a process(s) in place to read audit logs for unintended/malicious behaviors?
Logging and 
Auditing
Is all PI and sensitive information being sent over the network encrypted form.
Cryptography
Does application design call for server authentication (anti-spoofing measure)?
Authorization
Does application support password expiration?
Authorization
Does application use custom schemes for hashing and or cryptographic?
Cryptography
Code Review Checklist
198
Classes that contain security secrets (like passwords) are only accessible through protected API’s
General
Classes that contain security secrets (like passwords) are only accessible through protected API’s
General
Keys are not held in code.
Cryptography
Plain text secrets are not stored in memory for extended periods of time.
General
Array bounds are checked.
General
All sensitive information used by application has been identified
General
CATEGORY
DESCRIPTION
PASS
FAIL
Are cryptographic functions used by the application the most recent version of these protocols, 
patched and process in place to keep them updated?
Cryptography
Are external libraries, tools, plugins used by the application functions the most recent version of 
these protocols, patched and process in place to keep them updated?
General
Does are there any special kind of request skipped from validation?
Cryptography
User and role based privileges are documented
User Management 
and Authentication
Authentication cookies are not persisted
User Management 
and Authentication
Authentication cookies are encrypted
User Management 
and Authentication
Authentication credentials are not passed by HTTP GET
User Management 
and Authentication
Authorization checks are granular (page and directory level)
User Management 
and Authentication
Authorization based on clearly defined roles
User Management 
and Authentication
Authorization works properly and cannot be circumvented by parameter manipulation
User Management 
and Authentication
Authorization cannot be bypassed by cookie manipulation
User Management 
and Authentication
No session parameters are passed in URLs
Session 
Management
Session cookies expire in a reasonable short time
Session 
Management
Session cookies are encrypted
Session 
Management
Session data is validated
Session 
Management
Session id is complex
Session 
Management
Session storage is secure
Session 
Management
Code Review Checklist
199
CATEGORY
DESCRIPTION
PASS
FAIL
Session inactivity timeouts are enforced
Session 
Management
Data is validated on server side
Data Management
Is all XML input data validated against an agreed schema?
Data Management
Web service endpoints address in Web Services Description Language (WSDL) is checked for validity
Web Services
Web service protocols that are unnecessary are disable (HTTP GET and HTTP POST
Web Services
Has the correct encoding been applied to all data being output by the application
Data Management
HTTP headers are validated for each request
Data Management
Are all of the entry points and trust boundaries identified by the design and are in risk analysis 
report?
Business Logic and 
Design
Is output that contains untrusted data supplied input have the correct type of encoding (URL 
encoding, HTML encoding)?
Data Management
Web service has documentation protocol is disable if the application does not need dynamic 
generation of WSDL.
Web Services
Code Review Checklist
200
THREAT MODELING EXAMPLE
Step 1 Decompose the Application
The goal of decomposing the application is to gain an understanding of the application and how it interacts 
with external entities. Information gathering and documentation achieve this goal. The information gathering 
process is carried out using a clearly defined structure, which ensures the correct information is collected. This 
structure also defines how the information should be documented to produce the threat model.
Description
The college library website is the first implementation of a website to provide librarians and library patrons 
(students and college staff) with online services. As this is the first implementation of the website, the function-
ality will be limited. There will be three users of the application:
1. Students
2. Staff
The first item in the threat model is the general information relating to the threat model. This must include 
the following: 
1. Application Name: The name of the application
2. Application Version: The version of the application
3. Description: A high level description of the application
4. Document Owner: The owner of the threat modeling document
5. Participants: The participants involved in the threat modeling process for this application
6. Reviewer: The reviewer(s) of the threat model
General Information 
Figure 13
THREAT MODEL 
INFORMATION
V2.0
OWNER - DAVID LOWRY  
PARTICIPANTS - DAVID ROOK
REVIEWER - EOIN KEARY
Figure 14
Threat Modeling Example
201
3. Librarians Staff and students will be able to log in and search for books, and staff members can request 
books. Librarians will be able to log in, add books, add users, and search for books.
Entry points should be documented as follows:
1. ID
A unique ID assigned to the entry point. This will be used to cross reference the entry point with any threats or 
vulnerabilities that are identified. In the case of layer entry points, a major, minor notation should be used.
2. Name
A descriptive name identifying the entry point and its purpose.
3. Description
A textual description detailing the interaction or processing that occurs at the entry point.
4. Trust Levels
The level of access required at the entry point is documented here. These will be cross-referenced with the trusts 
levels defined later in the document.
Entry Points
Figure 15
Assets are documented in the threat model as follows:
1. ID
A unique ID is assigned to identify each asset. This will be used to cross reference the asset with any threats or 
vulnerabilities that are identified.
2. Name
A descriptive name that clearly identifies the asset.
3. Description
A textual description of what the asset is and why it needs to be protected.
4. Trust Levels
The level of access required to access the entry point is documented here. These will be cross-referenced with the 
trust levels defined in the next step.
Assets
Figure 16
Threat Modeling Example
202
Trust levels are documented in the threat model as follows:
1. ID
A unique number is assigned to each trust level. This is used to cross reference the trust level with the entry points 
and assets.
2. Name
A descriptive name that allows identification of the external entities that have been granted this trust level.
3. Description
A textual description of the trust level detailing the external entity who has been granted the trust level.
Trust Levels
By using the understanding learned on the college library website architecture and design, the data flow dia-
gram can be created as shown in figure X.
Figure 17
LIBRARIANS
USERS
WEB PAGES
ON DISK
DATABASE
FILES
WEB SERVER / DATABASE BOUNDARY
USER / WEBSERVER BOUNDARY
REQUEST
REQUEST
RESPONSES
RESPONSES
COLEGE
LIBRARY
DATABASE
COLEGE
LIBRARY
DATABASE
SQL QUERY CALLS
PAGES
DATA
DATA
DATA
Figure 18
Threat Modeling Example
203
Specifically the user login data flow diagram will appear as in figure 19.
A threat list of generic threats organized in these categories with examples and the affected security con-
trols is provided in the following table:
Stride
Threat Modeling Example: Step 2a Threat Categorization
The first step in the determination of threats is adopting a threat categorization. A threat categorization pro-
vides a set of threat categories with corresponding examples so that threats can be systematically identified in 
the application in a structured and repeatable manner.
LOGIN
PROCESS
USERS
WEB
PAGES
DATABASE
FILES
AUTHENTICATE
USER SQL
QUERY RESULT
AUTHENTICATE
USER SQL
QUERY RESULT
PAGES
WEB
SERVER
COLEGE
LIBRARY
DATABASE
LOGIN REQUEST
LOGIN RESPONSE
AUTHENTICATE USER ()
AUTHENTICATE USER RESULT
DATA
DATA
USER / WEBSERVER BOUNDARY
WEB SERVER / 
DATABASE BOUNDARY
Example 
application threat 
model of the user 
login
Figure 19
Threat Modeling Example
204
By referring to the college library website it is possible to document sample threats related to the use cases such 
as:
Threat: Malicious user views confidential information of students, faculty members and librarians.
1. Damage potential
Threat to reputation as well as financial and legal liability:8
2. Reproducibility 
Fully reproducible:10
3. Exploitability
Require to be on the same subnet or have compromised a router:7
4. Affected users
Affects all users:10
5. Discoverability
Can be found out easily:10
Overall DREAD score: (8+10+7+10+10) / 5 = 9
In this case having 9 on a 10 point scale is certainly an high risk threat.
Microsoft DREAD threat-risk ranking model 
Threat Modeling Example: Step 2b Ranking of Threats
Threats tend to be ranked from the perspective of risk factors. By determining the risk factor posed by the 
various identified threats, it is possible to create a prioritized list of threats to support a risk mitigation strategy, 
such as deciding on which threats have to be mitigated first. Different risk factors can be used to determine 
which threats can be ranked as High, Medium, or Low risk. In general, threat risk models use different factors 
to model risks. 
Threat Modeling Example
205
This appendix gives practical examples of how to carry out code crawling in the following programming languages:
• .Net
• Java
• ASP
• C++/Apache
Searching for Code in .NET
Firstly one needs to be familiar with the tools one can use in order to perform text searching, following this one needs to know 
what to look for.
One could scan through the code looking for common patterns or keywords such as “User”, “Password”, “Pswd”, “Key”, “Http”, 
etc... This can be performed using the “Find in Files” tool in VS or using findstring as follows: findstr /s /m /i /d:c:\projects\code-
base\sec “http” *.*
HTTP Request Strings
Requests from external sources are obviously a key area of a security code review. We need to ensure that all 
HTTP requests received are data validated for composition, max and min length, and if the data falls within the 
realms of the parameter whitelist. Bottom-line is this is a key area to look at and ensure security is enabled.
STRING TO SEARCH
request.accesstypes
request.httpmethod
request.cookies
request.url
request.browser
request.querystring
request.certificate
request.urlreferrer
request.TotalBytes
request.BinaryRead
request.headers
request.form
request.servervariables
request.userlanguages
request.files
request.item
request.rawurl
request.useragent
STRING TO SEARCH
response.write
HttpUtility
HtmlEncode
UrlEncode
innerText