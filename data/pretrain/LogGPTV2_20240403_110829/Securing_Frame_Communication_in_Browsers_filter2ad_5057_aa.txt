# Securing Frame Communication in Browsers

## Authors
- Adam Barth, Stanford University, PI:EMAIL
- Collin Jackson, Stanford University, PI:EMAIL
- John C. Mitchell, Stanford University, PI:EMAIL

## Abstract
Many websites embed third-party content within frames, relying on the browser's security policies to protect them from malicious content. However, frames are often insufficient as isolation mechanisms because most browsers allow framed content to manipulate other frames through navigation. We evaluate existing frame navigation policies and advocate for a stricter policy, which we have deployed in open-source browsers. While this strict isolation policy prevents undesirable interactions, it also hinders communication between cooperating frames. We analyze two techniques for inter-frame communication: fragment identifier messaging and postMessage. Fragment identifier messaging provides confidentiality but lacks authentication, an issue we address using concepts from a well-known network protocol. The second method, postMessage, provides authentication, but we discovered an attack that breaches confidentiality. We modified the postMessage API to provide confidentiality, and our modifications have been standardized and adopted in browser implementations.

## 1. Introduction
Isolating untrusted or partially trusted software components while enabling secure inter-component communication is a recurring problem in computer systems. When a website integrates third-party content, such as advertisements, maps, or photo albums, it risks incorporating malicious content. Without proper isolation, malicious content can compromise the confidentiality and integrity of the user’s session with the integrator. Although the browser's "same-origin policy" restricts script running in one frame from manipulating another frame, the browser uses a different policy to determine whether one frame can navigate (change the location of) another frame. Restricting navigation is essential for providing isolation, but navigation also enables one form of inter-frame communication used in mashup frameworks from leading companies. We show that an attacker can use frame navigation to attack another inter-frame communication mechanism, postMessage.

### Web Content Integration
Websites often include content from sources of varying trustworthiness, such as third-party advertising networks, Flickr albums, Facebook badges, and personalized home pages. More advanced uses of third-party components include Yelp’s integration of Google Maps and the Windows Live Contacts gadget. A website combining content from multiple sources is called a mashup, with the party combining the content called the integrator and the integrated content called gadgets. In simple mashups, the integrator does not intend to communicate with the gadgets and only requires the browser to isolate them. In more complex mashups, the integrator needs to communicate securely with the gadgets.

### Isolation and Navigation Policies
We examine the browser frame as an isolation primitive. Because frames can contain untrusted content, the browser's security policy restricts frame interactions. Many browsers, however, insufficiently restrict the ability of one frame to navigate another frame to a new location. These overly permissive frame navigation policies lead to various attacks, which we demonstrate against the Google AdSense login page and the iGoogle gadget aggregator. To prevent these attacks, we propose tightening the browser's frame navigation policy while maintaining compatibility with existing web content. We have collaborated with browser vendors to deploy this policy in Firefox 3 and Safari 3.1. As the policy is already implemented in Internet Explorer 7, it is now deployed in the three most-used browsers.

### Inter-Frame Communication
With strong isolation, frames are limited in their interactions, raising the issue of how isolated frames can cooperate as part of a mashup. We analyze two techniques for inter-frame communication: fragment identifier messaging and postMessage. The results of our analysis are summarized in Table 1.

- **Fragment Identifier Messaging:** This technique uses characteristics of frame navigation to send messages between frames. It was not designed for communication, so it has less-than-desirable security properties: messages are confidential but senders are not authenticated. We draw an analogy between this communication channel and a network channel where senders encrypt their messages to the recipient’s public key. We examine the Microsoft.Live.Channels library, which uses fragment identifier messaging to let the Windows Live Contacts gadget communicate with its integrator. We discover an attack on this protocol, related to Lowe’s anomaly in the Needham-Schroeder protocol, where a malicious gadget can impersonate the integrator to the Contacts gadget. We suggest a solution based on Lowe’s improvement to the Needham-Schroeder protocol, and Microsoft implemented and deployed our suggestion within days.
  
- **postMessage:** This is a new browser API designed for inter-frame communication. postMessage is implemented in Opera, Internet Explorer 8, Firefox 3, and Safari. Although postMessage has been deployed since 2005, we demonstrate an attack on the channel’s confidentiality using frame navigation. In light of this attack, the postMessage channel provides authentication but lacks confidentiality, analogous to a channel where senders cryptographically sign their messages. To secure the channel, we propose a change to the postMessage API. We implemented our change in patches for Safari and Firefox, and our proposal has been adopted by the HTML 5 working group, Internet Explorer 8, Firefox 3, and Safari.

## 2. Threat Model
In this paper, we focus on securing in-browser interactions from malicious attackers. We assume an honest user employs a standard web browser to view content from an honest website. A malicious "web attacker" attempts to disrupt this interaction or steal sensitive information. Typically, a web attacker places malicious content (e.g., JavaScript) in the user’s browser and modifies the state of the browser, interfering with the honest session. To study the browser’s security policy, which determines the privileges of the attacker’s content, we define the web attacker threat model below.

### Web Attacker
A web attacker is a malicious principal who owns one or more machines on the network. To study the security of browsers when rendering malicious content, we assume that the browser gets and renders content from the attacker’s website.

- **Network Abilities:** The web attacker has no special network abilities. They can send and receive network messages only from machines under their control, possibly acting as a client or server in network protocols of their choice. The web attacker can obtain SSL certificates for domains they own; certificate authorities such as instantssl.com provide such certificates for free. The web attacker’s network abilities are weaker than the usual network attacker considered in studies of network security because they cannot eavesdrop on messages sent to other recipients nor forge messages from other network locations. For example, a web attacker cannot act as a "man-in-the-middle."

- **Interaction with Client:** We assume the honest user views the attacker’s website in at least one browser window, thereby rendering the attacker’s content. We make this assumption because we believe that an honest user’s interaction with an honest site should be secure even if the user separately visits a malicious site in a different browser window. We assume the web attacker is constrained by the browser’s security policy and does not employ a browser exploit to circumvent the policy. The web attacker’s host privileges are weaker than an attacker who can execute arbitrary code on the user’s machine with the user’s privileges. For example, a web attacker cannot install or run a system-wide key logger or botnet client.

### Gadget Attacker
A gadget attacker is a web attacker with one additional ability: the integrator embeds a gadget of the attacker’s choice. This assumption lets us accurately evaluate mashup isolation and communication protocols because the purpose of these protocols is to let an integrator embed untrusted gadgets safely. In practice, a gadget attacker can either wait for the user to visit the integrator or can redirect the user to the integrator’s website from the attacker’s website.

### Out-of-Scope Threats
Although phishing can be described informally as a "web attack," the web attacker defined above does not attempt to fool the user by choosing a confusing domain name or using other social engineering. We do not assume that a user treats the attacker’s website as if it were a different site. The attacks presented in this paper are "pixel-perfect" in the sense that the browser provides the user no indication whatsoever that an attack is underway. The attacks do not display deceptive images over the browser security indicators nor do they spoof the location bar or the lock icon. We do not consider cross-site scripting attacks, in which an attacker exploits a bug in an honest principal’s website to inject malicious content into another security origin. Instead, we focus on the privileges the browser itself affords the attacker to interact with honest sites.

## 3. Frame Isolation
Netscape Navigator 2.0 introduced the HTML `<frame>` element, which allows web authors to delegate a portion of their document’s screen real estate to another document. These frames can be navigated independently of the rest of the main content frame and can, themselves, contain frames, further delegating screen real estate and creating a frame hierarchy. Most modern frames are embedded using the more flexible `<iframe>` element, introduced in Internet Explorer 3.0. In this paper, we use the term "frame" to refer to both `<frame>` and `<iframe>` elements. The main, or top-level, frame of a browser window displays its location in the browser’s location bar. Subframes are often indistinguishable from other parts of a page, and the browser does not display their location in its user interface. Browsers decorate a window with a lock icon only if every frame contained in the window was retrieved over HTTPS but do not require the frames to be served from the same host. For example, if `https://bank.com/` embeds a frame from `https://attacker.com/`, the browser will decorate the window with a lock icon.

### Organization
- **Section 3.1:** Reviews browser security policies.
- **Section 3.2:** Describes cross-window frame navigation attacks and defenses.
- **Section 3.3:** Details same-window attacks that are not impeded by the cross-window defenses.
- **Section 3.4:** Analyzes stricter navigation policies and advocates the "descendant policy."
- **Section 3.5:** Documents our implementation and deployment of the descendant policy in major browsers.

### 3.1 Background
#### Scripting Policy
Most web security focuses on the browser’s scripting policy, which answers the question: "When is script in one frame permitted to manipulate the contents of another frame?" The scripting policy is the most important browser security policy because the ability to script another frame means complete control over its appearance and behavior. For example, if `otherWindow` is another window’s frame, the following script attempts to steal the user’s password in the other window:

```javascript
var stolenPassword = otherWindow.document.forms[0].password.value;
```

Modern web browsers permit one frame to read and write all the DOM properties of another frame only when their content was retrieved from the same origin, i.e., when the scheme, host, and port number of their locations match. If the content of `otherWindow` was retrieved from a different origin, the browser’s security policy will prevent this script from accessing `otherWindow.document`.

#### Navigation Policy
Every browser must answer the question: "When is one frame permitted to navigate another frame?" Prior to 1999, all web browsers implemented a permissive policy:

**Permissive Policy:**
- A frame can navigate any other frame.

For example, if `otherWindow` includes a frame, the following script can navigate it:

```javascript
otherWindow.location.href = 'http://malicious.com';
```

**Top-Level Frames:**
- Top-level frames are often exempt from certain restrictions due to their importance in the user experience.