title:Securing Frame Communication in Browsers
author:Adam Barth and
Collin Jackson and
John C. Mitchell
Securing Frame Communication in Browsers
Adam Barth
Stanford University
PI:EMAIL
Collin Jackson
Stanford University
PI:EMAIL
John C. Mitchell
Stanford University
PI:EMAIL
Abstract
Many web sites embed third-party content in frames, re-
lying on the browser’s security policy to protect them
from malicious content. Frames, however, are often in-
sufﬁcient isolation primitives because most browsers let
framed content manipulate other frames through naviga-
tion. We evaluate existing frame navigation policies and
advocate a stricter policy, which we deploy in the open-
source browsers. In addition to preventing undesirable
interactions, the browser’s strict isolation policy also hin-
ders communication between cooperating frames. We
analyze two techniques for inter-frame communication.
The ﬁrst method, fragment identiﬁer messaging, pro-
vides conﬁdentiality without authentication, which we
repair using concepts from a well-known network pro-
tocol. The second method, postMessage, provides
authentication, but we discover an attack that breaches
conﬁdentiality. We modify the postMessage API to
provide conﬁdentiality and see our modiﬁcations stan-
dardized and adopted in browser implementations.
1
Introduction
isolate frames. In more complex mashups, the integra-
tor does intend to communicate with the gadgets and re-
quires secure inter-frame communication.
In this paper, we study the contemporary web ver-
sion of a recurring problem in computer systems: isolat-
ing untrusted, or partially trusted, software components
while providing secure inter-component communication.
Whenever a site integrates third-party content, such as
an advertisement, a map, or a photo album, the site runs
the risk of incorporating malicious content. Without iso-
lation, malicious content can compromise the conﬁden-
tiality and integrity of the user’s session with the inte-
grator. While the browser’s well-known “same-origin
policy” [34] restricts script running in one frame from
manipulating content in another frame, the browser uses
a different policy to determine whether one frame is al-
lowed to navigate (change the location of) another frame.
Although restricting navigation is essential to providing
isolation, navigation also enables one form of inter-frame
communication used in mashup frameworks from lead-
ing companies. Furthermore, we show that an attacker
can use frame navigation to attack another inter-frame
communication mechanism, postMessage.
Web sites contain content from sources of varying trust-
worthiness. For example, many web sites contain third-
party advertising supplied by advertisement networks or
their sub-syndicates [6]. Other common aggregations
of third-party content include Flickr albums [12], Face-
book badges [9], and personalized home pages offered
by the three major web portals [15, 40, 28]. More ad-
vanced uses of third-party components include Yelp’s
use of Google Maps [14] to display restaurant locations
and the Windows Live Contacts gadget [27]. A web
site combining content from multiple sources is called a
mashup, with the party combining the content called the
integrator and integrated content called a gadget. In sim-
ple mashups, the integrator does not intend to communi-
cate with the gadgets and requires only that the browser
Isolation. We examine the browser frame as an iso-
lation primitive. Because frames can contain untrusted
content, the browser’s security policy restricts frame in-
teractions. Many browsers, however, insufﬁciently re-
strict the ability of one frame to navigate another frame
to a new location. These overly permissive frame nav-
igation policies lead to a variety of attacks, which we
demonstrate against the Google AdSense login page and
the iGoogle gadget aggregator. To prevent these attacks,
we propose tightening the browser’s frame navigation
policy while maintaining compatibility with existing web
content. We have collaborated with browser vendors to
deploy this policy in Firefox 3 and Safari 3.1. As the
policy is already implemented in Internet Explorer 7, the
policy is now deployed in the three most-used browsers.
USENIX Association  
17th USENIX Security Symposium 
17
Fragment identiﬁer channel
postMessage channel
postMessage (our proposal)
Conﬁdentiality Authentication
Network Analogue
Public Key Encryption
Public Key Signatures
SSL/TLS
Table 1: Security properties of frame communication channels
Communication. With strong isolation, frames are
limited in their interactions, raising the issue of how iso-
lated frames can cooperate as part of a mashup. We
analyze two techniques for inter-frame communication:
fragment identiﬁer messaging and postMessage. The
results of our analysis are summarized in Table 1.
• Fragment identiﬁer messaging uses characteristics
of frame navigation to send messages between
frames. As it was not designed for communica-
tion, the channel has less-than-desirable security
properties: messages are conﬁdential but senders
are not authenticated. To understand these prop-
erties, we draw an analogy between this commu-
nication channel and a network channel in which
senders encrypt
their messages to their recipi-
ent’s public key. For concreteness, we examine
the Microsoft.Live.Channels library [27],
which uses fragment identiﬁer messaging to let
the Windows Live Contacts gadget communicate
with its integrator. The protocol used by Win-
dows Live is analogous to the Needham-Schroeder
public-key protocol [29]. We discover an attack
on this protocol, related to Lowe’s anomaly in the
Needham-Schroeder protocol [23], in which a mali-
cious gadget can impersonate the integrator to the
Contacts gadget. We suggested a solution based
on Lowe’s improvement to the Needham-Schroeder
protocol [23], and Microsoft implemented and de-
ployed our suggestion within days.
• postMessage is a new browser API designed for
inter-frame communication [19]. postMessage
is implemented in Opera, Internet Explorer 8, Fire-
fox 3, and Safari. Although postMessage has
been deployed since 2005, we demonstrate an attack
on the channel’s conﬁdentiality using frame navi-
gation. In light of this attack, the postMessage
channel provides authentication but lacks conﬁden-
tiality, analogous to a channel in which senders
cryptographically sign their messages.
To se-
cure the channel, we propose a change to the
postMessage API. We implemented our change
in patches for Safari and Firefox. Our proposal has
been adopted by the HTML 5 working group, Inter-
net Explorer 8, Firefox 3, and Safari.
Organization. The remainder of the paper is organized
as follows. Section 2 details the threat model for these at-
tacks. Section 3 surveys existing frame navigation poli-
cies and converges browsers on a secure policy. Sec-
tion 4 analyzes two frame communication mechanisms,
demonstrates attacks, and proposes defenses. Section 5
describes related work. Section 6 concludes.
2 Threat Model
In this paper, we are concerned with securing in-browser
interactions from malicious attackers. We assume an
honest user employs a standard web browser to view con-
tent from an honest web site. A malicious “web attacker”
attempts to disrupt this interaction or steal sensitive infor-
mation. Typically, a web attacker places malicious con-
tent (e.g., JavaScript) in the user’s browser and modiﬁes
the state of the browser, interfering with the honest ses-
sion. To study the browser’s security policy, which deter-
mines the privileges of the attacker’s content, we deﬁne
the web attacker threat model below.
Web Attacker. A web attacker is a malicious princi-
pal who owns one or more machines on the network. In
order to study the security of browsers when rendering
malicious content, we assume that the browser gets and
renders content from the attacker’s web site.
• Network Abilities. The web attacker has no spe-
cial network abilities. In particular, the web attacker
can send and receive network messages only from
machines under his or her control, possibly acting
as a client or server in network protocols of the at-
tacker’s choice. Typically, the web attacker uses at
least one machine as an HTTP server, which we
refer to for simplicity as attacker.com. The
web attacker can obtain SSL certiﬁcates for do-
mains he or she owns; certiﬁcate authorities such
as instantssl.com provide such certiﬁcates for
free. The web attacker’s network abilities are decid-
edly weaker than the usual network attacker consid-
ered in studies of network security because the web
attacker can neither eavesdrop on messages sent to
other recipients nor forge messages from other net-
work locations. For example, a web attacker cannot
act as a “man-in-the-middle.”
1  
17th USENIX Security Symposium 
USENIX Association
• Interaction with Client. We assume the honest
user views attacker.com in at least one browser
window, thereby rendering the attacker’s content.
We make this assumption because we believe that
an honest user’s interaction with an honest site
should be secure even if the user separately vis-
its a malicious site in a different browser window.
We assume the web attacker is constrained by the
browser’s security policy and does not employ a
browser exploit to circumvent the policy. The web
attacker’s host privileges are decidedly weaker than
an attacker who can execute a arbitrary code on the
user’s machine with the user’s privileges. For exam-
ple, a web attacker cannot install or run a system-
wide key logger or botnet client.
Attacks accessible to a web attacker have signiﬁcant
practical impact because the attacks can be mounted
without any complex or unusual control of the network.
In addition, web attacks can be carried out by a standard
man-in-the-middle network attacker, provided the user
visits a single HTTP site, because a man-in-the-middle
can intercept HTTP requests and inject malicious content
into the reply, simulating a reply from attacker.com.
There are several techniques an attacker can use to
drive trafﬁc to attacker.com. For example, an at-
tacker can place web advertisements, display popular
content indexed by search engines, or send bulk e-mail to
attract users. Typically, simply viewing an attacker’s ad-
vertisement lets the attacker mount a web-based attack.
In a previous study [20], we purchased over 50,000 im-
pressions for $30. During each of these impressions, a
user’s browser rendered our content, giving us the access
required to mount a web attack.
We believe that a normal, but careful, web user who
reads news and conducts banking, investment, and re-
tail transactions, cannot effectively monitor or restrict the
provenience of all content rendered in his or her browser,
especially in light of third-party advertisements. In other
words, we believe that the web attacker threat model is an
accurate representation of normal web behavior, appro-
priate for security analysis of browser security, and not
an assumption that users promiscuously visit all possible
bad sites in order to tempt fate.
Gadget Attacker. A gadget attacker is a web attacker
with one additional ability: the integrator embeds a gad-
get of the attacker’s choice. This assumption lets us ac-
curately evaluate mashup isolation and communication
protocols because the purpose of these protocols is to let
an integrator embed untrusted gadgets safely. In practice,
a gadget attacker can either wait for the user to visit the
integrator or can redirect the user to the integrator’s web
site from attacker.com.
Out-of-Scope Threats. Although phishing [11, 7] can
be described informally as a “web attack,” the web
attacker deﬁned above does not attempt to fool the
user by choosing a confusing domain name (such as
bankofthevvest.com) or using other social engi-
neering.
In particular, we do not assume that a user
treats attacker.com as if it were a site other than
attacker.com. The attacks presented in this paper
are “pixel-perfect” in the sense that the browser provides
the user no indication whatsoever that an attack is under-
way. The attacks do not display deceptive images over
the browser security indicators nor do they spoof the lo-
cation bar and or the lock icon. In this paper, we do not
consider cross-site scripting attacks, in which an attacker
exploits a bug in an honest principal’s web site to inject
malicious content into another security origin. None of
the attacks described in this paper rely on the attacker
injecting content into another principal’s security origin.
Instead, we focus on privileges the browser itself affords
the attacker to interact with honest sites.
3 Frame Isolation
Netscape Navigator 2.0 introduced the HTML 
element, which allows web authors to delegate a portion
of their document’s screen real estate to another doc-
ument. These frames can be navigated independently
of the rest of the main content frame and can, them-
selves, contain frames, further delegating screen real es-
tate and creating a frame hierarchy. Most modern frames
are embedded using the more-ﬂexible  ele-
ment, introduced in Internet Explorer 3.0. In this paper,
we use the term frame to refer to both  and
 elements. The main, or top-level, frame of
a browser window displays its location in the browser’s
location bar. Subframes are often indistinguishable from
other parts of a page, and the browser does not display
their location in its user interface. Browsers decorate a
window with a lock icon only if every frame contained
in the window was retrieved over HTTPS but do not re-
quire the frames to be served from the same host. For ex-
ample, if https://bank.com/ embeds a frame from
https://attacker.com/, the browser will deco-
rate the window with a lock icon.
Organization. Section 3.1 reviews browser security
policies.
Section 3.2 describes cross-window frame
navigation attacks and defenses. Section 3.3 details
same-window attacks that are not impeded by the cross-
window defenses. Section 3.4 analyzes stricter naviga-
tion policies and advocates the “descendant policy.” Sec-
tion 3.5 documents our implementation and deployment
of the descendant policy in major browsers.
USENIX Association  
17th USENIX Security Symposium 
1
3.1 Background
Scripting Policy. Most web security is focused on the
browser’s scripting policy, which answers the question
“when is script in one frame permitted to manipulate the
contents of another frame?” The scripting policy is the
most important browser security policy because the abil-
ity to script another frame is the ability to control its
appearance and behavior completely. For example, if
otherWindow is another window’s frame,
var stolenPassword =
otherWindow.document.forms[0].
password.value;
attempts to steal the user’s password in the other win-
dow. Modern web browsers permit one frame to read
and write all the DOM properties of another frame only
when their content was retrieved from the same ori-
gin, i.e. when the scheme, host, and port number of
their locations match. If the content of otherWindow
was retrieved from a different origin, the browser’s se-
curity policy will prevent this script from accessing
otherWindow.document.
Navigation Policy. Every browser must answer the
question “when is one frame permitted to navigate an-
other frame?” Prior to 1999, all web browsers imple-
mented a permissive policy:
Permissive Policy
A frame can navigate any other frame.
For example, if otherWindow includes a frame,
Top-level Frames. Top-level frames are often exempt