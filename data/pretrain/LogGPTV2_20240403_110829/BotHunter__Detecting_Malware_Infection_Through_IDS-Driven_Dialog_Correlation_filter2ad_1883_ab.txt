### Egg Download and Infection Process

1. **Egg Download**
   - The initial step involves the download of a small, obfuscated piece of code (the "egg") that is used to initiate the infection process.

2. **IRC Connection (Port 6668)**
   - The egg establishes an IRC connection to a Command and Control (C&C) server on port 6668.

3. **C&C Server Communication**
   - **Inbound (E1):** The C&C server sends instructions to the infected host.
   - **Scan:** The host scans for vulnerabilities in other systems.
   - **A-to-V (Attack to Victim):** The infected host attempts to exploit vulnerabilities in target systems.
   - **Inbound (E2):** The C&C server sends further instructions or updates.
   - **Infection:** The host infects other systems with the bot.
   - **A-to-V (Attack to Victim):** The infected host continues to propagate the infection.
   - **V-to-A (Victim to Attacker):** The newly infected system communicates back to the C&C server.
   - **Egg Download (E3):** The full malicious binary instance of the bot is downloaded.
   - **V-to-* (Victim to Any):** The infected host can now communicate with other hosts.
     - **Type I:** The infected host immediately moves to outbound scanning and attack propagation.
     - **V-to-C (Victim to C&C):** The infected host coordinates with the C&C server.
     - **Outbound (E5):** The host conducts outbound scanning.
     - **Scan:** The host scans for new targets.
     - **V-to-* (Victim to Any):** The infected host can now communicate with other hosts.
       - **Type II:** The infected host first coordinates with the C&C server before attempting self-propagation.
     - **C&C Communications (E4):** The infected host communicates with the C&C server.

### Phatbot Dialog Summary

- The egg downloads and instantiates a full malicious binary instance of the bot (E3).
- Once the full binary instance is retrieved and executed, two potential dialog paths are possible, referred to as Type I and Type II bots.
  - **Type II Bots:** The infected host proceeds to C&C server coordination (E4) before attempting self-propagation.
  - **Type I Bots:** The infected host immediately moves to outbound scanning and attack propagation (E5), representing a classic worm infection.

### Bot Infection Model

- The bot dialog sequence analysis must be robust to the absence of some dialog events, allow for multiple contributing candidates for each phase, and not require strict sequencing of outbound dialog.
- For Type II infections, significant time delays (several hours) between initial infection events (E1 and E2) and subsequent outbound dialog events (E3, E4, and E5) are common.
- The model must also be robust to failed E1 and E2 detections, possibly due to insufficient IDS fidelity or malware infections through non-remote exploits.

### Weighted Event Threshold System

- To address sequence order and event omission, a weighted event threshold system is used.
- This system captures the minimum necessary and sufficient sparse sequences of events under which bot profile declarations can be triggered.
- **Condition 1:** Evidence of local host infection (E2) AND evidence of outward bot coordination or attack propagation (E3-E5).
- **Condition 2:** At least two distinct signs of outward bot coordination or attack propagation (E3-E5).

### BotHunter: System Design

- **BotHunter** is a passive monitoring system designed to recognize bidirectional warning signs of local host infections and correlate this evidence against the dialog infection model.
- **Components:**
  - **Snort IDS:** Monitors in- and out-bound traffic flows using an extensive set of malware-specific signatures.
  - **SCADE (Statistical Scan Anomaly Detection Engine):** Detects inbound and outbound scan anomalies.
  - **SLADE (Statistical Payload Anomaly Detection Engine):** Conducts byte-distribution payload anomaly detection for inbound packets.
  - **BotHunter Correlator:** Manages the state of all dialog warnings per local host and produces bot infection profiles when the threshold is crossed.

### SCADE: Statistical Scan Anomaly Detection Engine

- **Inbound Scan Detection:**
  - Tracks failed connection attempts to high-severity (HS) and low-severity (LS) ports.
  - Anomaly score: \( s = w_1 F_{hs} + w_2 F_{ls} \), where \( F_{hs} \) and \( F_{ls} \) are the numbers of cumulative failed attempts at HS and LS ports, respectively.
- **Outbound Scan Detection:**
  - Uses a voting scheme (AND, OR, or MAJORITY) based on three parallel anomaly detection models:
    - **Outbound scan rate (s1):** Detects high-rate scans across large sets of external addresses.
    - **Outbound connection failure rate (s2):** Detects abnormally high connection fail rates, with sensitivity to HS port usage.
    - **Normalized entropy of scan target distribution (s3):** Identifies uniformly distributed scan target patterns.

### SLADE: Statistical Payload Anomaly Detection Engine

- **Payload Exploit Detection:**
  - Examines the payload of every request packet sent to monitored services.
  - Outputs an alert if the lossy n-gram frequency deviates from an established normal profile.
  - Similar to PAYL, which uses a 1-gram byte distribution anomaly detection scheme.
  - Constructs a normal profile by calculating the average and standard deviation of the feature vector of normal traffic to the port.

### Conclusion

- The BotHunter system provides a comprehensive approach to detecting and correlating bot infections by leveraging multiple sensor inputs and a weighted event threshold system.
- The system is designed to be robust to various challenges, including event omissions and time delays, and provides detailed infection profiles for further analysis and reporting.