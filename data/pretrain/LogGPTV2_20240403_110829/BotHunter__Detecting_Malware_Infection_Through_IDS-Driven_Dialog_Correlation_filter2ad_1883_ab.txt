Egg download
4
IRC connection (port 6668)
C&C Server
E1: Inbound
Scan
A-to-V
E2: Inbound
Infection
A-to-V
V-to-A
E3: Egg
Download
V-to-*
Type I
V-to-C
E5:
Outbound
Scan
V-to-*
Type II
E4: C&C
Communica-
tions
5
Outbound Scanning
TCP 2745,135,1025,445,3127,6129,5000
Figure 1: Phatbot Dialog Summary
loads and instantiates a full malicious binary instance of
the bot (E3). Once the full binary instance of the bot is re-
trieved and executed, our model accommodates two po-
tential dialog paths, which Rajab et al. [33] refer to as the
bot Type I versus Type II split. Under Type II bots, the
infected host proceeds to C&C server coordination (E4)
before attempting self-propagation. Under a Type I bot,
the infected host immediately moves to outbound scan-
ning and attack propagation (E5), representing a classic
worm infection.
We assume that bot dialog sequence analysis must be
robust to the absence of some dialog events, must al-
low for multiple contributing candidates for each of the
various dialog phases, and must not require strict se-
quencing on the order in which outbound dialog is con-
ducted. Furthermore, in practice we have observed that
for Type II infections, time delays between the initial in-
fection events (E1 and E2) and subsequent outbound di-
alog events (E3, E4, and E5) can be signiﬁcant—on the
order of several hours. Furthermore, our model must be
robust to failed E1 and E2 detections, possibly due to in-
sufﬁcient IDS ﬁdelity or due to malware infections that
occur through avenues other than direct remote exploit.
One approach to addressing the challenges of se-
quence order and event omission is to use a weighted
event threshold system that captures the minimum nec-
essary and sufﬁcient sparse sequences of events under
which bot proﬁle declarations can be triggered. For ex-
ample, one can deﬁne a weighting and threshold scheme
for the appearance of each event such that a minimum
set of event combinations is required before bot detec-
tion. In our case, we assert that bot infection declaration
requires a minimum of
Condition 1: Evidence of local host infection (E2),
AND evidence of outward bot coordination or attack
propagation (E3-E5); or
Condition 2: At least two distinct signs of outward
bot coordination or attack propagation (E3-E5).
Figure 2: Bot Infection Dialog Model
In our description of the BotHunter correlation en-
gine in Section 4, we discuss a weighted event threshold
scheme that enforces the above minimum requirement
for bot declaration.
4 BotHunter: System Design
We now turn our attention to the design of a passive mon-
itoring system capable of recognizing the bidirectional
warning signs of local host infections, and correlating
this evidence against our dialog infection model. Our
system, referred to as BotHunter, is composed of a trio
of IDS components that monitor in- and out-bound traf-
ﬁc ﬂows, coupled with our dialog correlation engine that
produces consolidated pictures of successful bot infec-
tions. We envision BotHunter to be located at the bound-
ary of a network, providing it a vantage point to observe
the network communication ﬂows that occur between the
network’s internal hosts and the Internet. Figure 3 illus-
trates the components within the BotHunter package.
Our IDS detection capabilities are composed on top
of the open source release of Snort [35]. We take full
advantage of Snort’s signature engine, incorporating an
extensive set of malware-speciﬁc signatures that we de-
veloped internally or compiled from the highly active
Snort community (e.g., [10] among other sources). The
signature engine enables us to produce dialog warnings
for inbound exploit usage, egg downloading, and C&C
patterns, as discussed in Section 4.1.3. In addition, we
have developed two custom plugins that complement the
Snort signature engine’s ability to produce certain dialog
warnings. Note that we refer to the various IDS alarms
as dialog warnings because we do not intend the individ-
ual alerts to be processed by administrators in search of
bot or worm activity. Rather, we use the alerts produced
by our sensors as input to drive a bot dialog correlation
analysis, the results of which are intended to capture and
report the actors and evidence trail of a complete bot in-
fection sequence.
170
16th USENIX Security Symposium
USENIX Association
o
t
t
r
o
P
n
a
p
S
e
c
i
v
e
D
t
e
n
r
e
h
t
E
Statistical payLoad
Anomaly Detection
Engine (SLADE)
Statistical sCan
Anomaly Detection
Engine (SCADE)
e2: Payload Anomalies
e1: Inbound Malware Scans
e5: Outbound Scans
Rule-based
Detection
botHunter
Ruleset
e2: Exploits
e3: Egg Downloads
e4: C&C Trafﬁc
Snort
r
e
s
r
a
p
g
o
l
t
r
o
n
s
Java
botHunter
Correlator
n
o
i
t
u
b
i
r
t
s
i
D
A
T
C
e
c
i
v
r
e
S
bot Infection Profile:
• Conﬁdence Score
• Victim IP
• Attacker IP List (by prevalence)
• Coordination Center IP (by prevalence)
• Full Evidence Trail: Sigs, Scores, Ports
• Infection Time Range
Figure 3: BotHunter System Architecture
Our two custom BotHunter plugins are called SCADE
and SLADE. SCADE, discussed in Section 4.1.1, pro-
vides inbound and outbound scan detection warnings
that are weighted for sensitivity toward malware-speciﬁc
scanning patterns. SLADE, discussed in Section 4.1.2,
conducts a byte-distribution payload anomaly detection
of inbound packets, providing a complementary non-
signature approach in inbound exploit detection.
Our BotHunter correlator is charged with maintaining
an assessment of all dialog exchanges, as seen through
our sensor dialog warnings, between all local hosts com-
municating with external entities across the Internet. The
BotHunter correlator manages the state of all dialog
warnings produced per local host in a data structure we
refer to as the network dialog correlation matrix (Fig-
ure 4). Evidence of local host infection is evaluated and
expired from our correlator until a sufﬁcient combination
of dialog warnings (E1–E5) crosses a weighted thresh-
old. When the bot infection threshold is crossed for a
given host, we produce a bot infection proﬁle (illustrated
in Figure 7).
Finally, our correlator also incorporates a module that
allows users to report bot infection proﬁles to a remote
repository for global collection and evaluation of bot ac-
tivity. For this purpose, we utilize the Cyber-TA privacy-
enabled alert delivery infrastructure [32]. Our delivery
infrastructure ﬁrst anonymizes all source-local addresses
reported within the bot infection proﬁle, and then de-
livers the proﬁle to our data repository through a TLS
over TOR [15] (onion routing protocol) network connec-
tion. These proﬁles will be made available to the research
community, ideally to help in the large-scale assessment
of bot dialog behavior, the sources and volume of vari-
ous bot infections, and for surveying where C&C servers
and exploit sources are located.
4.1 A Multiple-Sensor Approach to Gathering In-
fection Evidence
4.1.1 SCADE: Statistical sCan Anomaly Detection
Engine
Recent measurement studies suggest that modern bots
are packaged with around 15 exploit vectors on average
[33] to improve opportunities for exploitation. Depend-
ing on how the attack source scans its target, we are likely
to encounter some failed connection attempts prior to a
successful infection.
To address this form aspect of malware interaction,
we have designed SCADE, a Snort preprocessor plug-
in with two modules, one for inbound scan detection (E1
dialog warnings) and another for detecting outbound at-
tack propagations (E5 dialog warnings) once our local
system is infected. SCADE E1 alarms provide a poten-
tial early bound on the start of an infection, should this
scan eventually lead to a successful infection.
Inbound Scan Detection: SCADE is similar in prin-
ciple to existing scan detection techniques like [35, 24].
However, SCADE has been speciﬁcally weighted toward
the detection of scans involving the ports often used by
malware.
It is also less vulnerable to DoS attacks be-
cause its memory trackers do not maintain per-source-IP
state. Similar to the scan detection technique proposed
in [48], SCADE tracks only scans that are speciﬁcally
targeted to internal hosts, bounding its memory usage
to the number of inside hosts. SCADE also bases its
E1 scan detection on failed connection attempts, further
narrowing its processing. We deﬁne two types of ports:
HS (high-severity) ports representing highly vulnera-
ble and commonly exploited services (e.g., 80/HTTP,
135,1025/DCOM, 445/NetBIOS, 5000/UPNP, 3127/My-
Doom) and LS (low-severity) ports.2 Currently, we deﬁne
2Based on data obtained by analyzing vulnerability reports, mal-
USENIX Association
16th USENIX Security Symposium
171
26 TCP and 4 UDP HS ports and mark all others as LS
ports. We set different weights to a failed scan attempt
to different types of ports. An E1 dialog warning for a
local host is produced based on an anomaly score that is
calculated as s = w1Fhs + w2Fls, where Fhs and Fls
indicate numbers of cumulative failed attempts at high-
severity and low-severity ports, respectively.
Outbound Scan Detection: SCADE’s outbound scan
detection coverage for E5 dialog warnings is based on a
voting scheme (AND, OR or MAJORITY) of three par-
allel anomaly detection models that track all external out-
bound connections per internal host:
• Outbound scan rate (s1): Detects local hosts that con-
duct high-rate scans across large sets of external ad-
dresses.
• Outbound connection failure rate (s2): Detects ab-
normally high connection fail rates, with sensitivity to
HS port usage. We calculate the anomaly score s2 =
(w1Fhs + w2Fls)/C, where C is the total number of
scans from the host within a time window.
• Normalized entropy of scan target distribution (s3):
Calculates a Zipf (power-law) distribution of outbound
address connection patterns [3]. A uniformly distributed
scan target pattern provides an indication of a potential
outbound scan. We use an anomaly scoring technique
is H = −Pm
based on normalized entropy to identify such candidates:
s3 = H
ln(m), where the entropy of scan target distribution
i=1 pi ln(pi), m is the total number of scan
targets, and pi is the percentage of the scans at target i.
Each anomaly module issues a subalert when si ≥ ti,
where ti is a threshold. SCADE then uses a user-
conﬁgurable “voting scheme”, i.e., AND, OR, or MA-
JORITY, to combine the alerts from the three modules.
For example, the AND rule dictates that SCADE issues
an alert when all three modules issue an alert.
4.1.2 SLADE: Statistical PayLoad Anomaly
Detection Engine
SLADE is an anomaly-based engine for payload ex-
ploit detection. It examines the payload of every request
packet sent to monitored services and outputs an alert if
its lossy n-gram frequency deviates from an established
normal proﬁle.
SLADE is similar
to PAYL [46], which is a
payload-based 1-gram byte distribution anomaly detec-
tion scheme. PAYL examines the 1-gram byte distri-
bution of the packet payload, i.e., it extracts 256 fea-
tures each representing the occurrence frequency of one
of the 256 possible byte values in the payload. A nor-
mal proﬁle for a service/port, e.g., HTTP, is constructed
by calculating the average and standard deviation of the
feature vector of the normal trafﬁc to the port. PAYL
ware infection vectors and analysis reports of datasets collected at
Dshield.org and other honeynets.
A natural concern of using such a lossy data structure
is the issue of accuracy: how many errors (false pos-
172
16th USENIX Security Symposium
USENIX Association
d(x, y) = P255