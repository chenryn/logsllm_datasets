-- fi1e1.txt 2008-12-23 06:40:13.000000000 -0500
+++ fi1e2. txt 200812-23 06:40 : 34.000000000 0500
00 -1,4 +1,4 00
b
d
+e
上下文模式和统一模式之间最显著的差异就是重复上下文的消除，这就使得统一模式的输
出结果要比上下文模式的输出结果简短。在我们上迹实例中，我们看到类似于上下文模式中的
文件时间截，其紧紧跟随字符串@@-1.4+1,4@@。这行字符申表示了在更改组中描述的第一
个文件中的文本行和第二个文件中的文本行。这行字符串之后就是文本行本身，与三行默认的
上下文。每行以可能的三个字符中的一个开头：
字符
意思
空格
两个文件都包含这一行。
在第一个文件中删除这一行。
+
添加这一行到第一个文件中。
表21-6:diff统一模式更改指示符
294
---
## Page 296
21.4.3  patch
这个patch程序被用来把更改应用到文本文件中。它接受从dif程序的输出，并且通常被用来
把较老的文件版本转变为较新的文件版本。让我们考虑一个著名的例子。Linux内核是由一个
大型的，组织松散的贡献者团队开发而成，这些责献者会提交固定的少量更改到源码包中。这
个Linux内核由几百万行代码组成，虽然每个贡献者每次所做的修改相当少。对于一个责献者
来说，每做一个修改就给每个开发者发送整个的内核源码树，这是没有任何意义的。相反，提
交一个dif文件。一个diff文件包含先前的内核版本与带有贡献者修改的新版本之间的差异。
然后一个接受者使用patch程序，把这些更改应用到他自己的源码树中。使用dif/patch组合
提供了两个重大优点：
1.一个dif文件非常小，与整个源码树的大小相比较而言。
2.一个dif文件简洁地显示了所做的修改，从而允许程序补丁的审阅者能快速地评估它。
当然，dif/patch能工作于任何文本文件，不仅仅是源码文件。它同样适用于配置文件或任
意其它文本。
准备一个dif文件供patch程序使用.GNU文档（查看下面的拓展阅读部分）建议这样使
用diff命令：
diff Haur old_file nev_file > diff_file
old_file和new_file部分不是单个文件就是包含文件的目录。这个r选项支持递归目录树。
一旦创建了dif文件，我们就能应用它，把旧文件修补成新文件。
patch  unix_file
这里的dos_file是需要被转换的文件，unix_file是转换后的结果。这种形式的命令使用转
义序列\r来代表回车符。查看tr命令所支持地完整的转义序列和字符类别列表，试试下面的
命令：
dog-- x s[-xoqnutoou]
ROT13:不那么秘密的编码环
基于一种简易的替换暗码的加密类型。把ROT13称为“加密”是过誉了：称其为
“文本模糊处理”则更准确些。有时候它被用来隐藏文本中潜在的攻击内容。这个方
法就是简单地把每个字符在字母表中向前移动13位。因为移动的位数是可能的26
个字符的一半，所以对文本再次执行这个算法，就恢复到了它最初的形式。通过tr
命令来执行这种编码：
echo “secret text"tr a-zA-Z n-za-mN-ZA-M
297
---
## Page 299
frperg grkg
再次执行相同的过程，得到翻译结果：
-VZ-Nm-ez Z-Vz- 8xus Suad, oa
secret text
大量的email程序和USENET新闻读者都支持ROT13编码。Wikipedia上面
有一篇关于这个主题的好文章：
http://en.wikipedia.org/wiki/ROT13
tr也可以完成另一个技巧。使用-s选项，tr命令能“挤压”（删除）重复的字符实例：
abccc
这里我们有一个包含重复字符的字符串。通过给tr命令指定字符集“ab”，我们能够消除字
符集中字母的重复实例，然而会留下不属于字符集的字符（“e”）无更改。注意重复的字符必须
是相邻的。如果它们不相邻：
qe s-z 1 ,oqeoqe>qe, oqpas[- xoqxnutgou]
abcabcabc
那么挤压会没有效果。
21.5.2 sed
名字sed是streameditor（流编辑器）的简称。它对文本流，即一系列指定的文件或标准输入
进行编辑。sed是一款强大的，并且有些复杂的程序（有整本内容都是关于sed程序的书籍），
所以在这里我们不会详尽的讨论它。
总之，sed的工作方式是要不给出单个编辑命令（在命令行中）要不就是包含多个命令的脚
本文件名，然后它就按行来执行这些命令。这里有一个非常简单的sed实例：
298
---
## Page 300
/xeq/4uoxg/s, pas1,quoxy。oqpa$[- xoqxutgou]
back
在这个例子中，我们使用echo命令产生了一个单词的文本流，然后把它管道给sed命令
sed，依次，对流文本执行指令s/front/back/，随后输出“back”。我们也能够把这个命令认为
是相似于vi中的“替换”（查找和替代）命令。
sed中的命令开始于单个字符。在上面的例子中，这个替换命令由字母来代表，其后跟着
查找和替代字符串，斜杠字符做为分隔符。分隔符的选择是随意的。按照惯例，经常使用斜杠
字符，但是sed将会接受紧随命令之后的任意字符做为分隔符。我们可以按照这种方式来执行
相同的命令：
xeq²uox², pos 1,uoxy. oq s[- xoqxuou]
back
通过紧跟命令之后使用下划线字符，则它变成界定符。sed可以设置界定符的能力，使命令
的可读性更强，正如我们将看到的
sed中的大多数命令之前都会带有一个地址，其指定了输入流中要被编辑的文本行。如果省
略了地址，然后会对输人流的每一行执行编辑命令。最简单的地址形式是一个行号。我们能够
添加一个地址到我们例子中：
/e/quoxg/st, ps1 ,quoxy, opas[- xoqxutou]
back
给我们的命令添加地址1，就导致只对仅有一行文本的输入流的第一行执行替换操作。如果
我们指定另一个数字：
/x/,p1,x,os[-xou]
front
我们看到没有执行这个编辑命令，因为我们的输入流没有第二行。地址可以用许多方式来
表达·这里是最常用的：
299
---
## Page 301
地址
说明
n
行号，n是一个正整数。
$
最后一行。
/regexp/
所有匹配一个POSIX基本正则表达式的文本行。注意正则
表达式通过斜杠字符界定。选择性地，这个正则表达式可能
由一个备用字符界定，通过\cregexpc来指定表达式，这里
c就是一个备用的字符。
addr1,addr2
从addr1到addr2范围内的文本行，包含地址addr2在内。
地址可能是上述任意单独的地址形式。
first~step
匹配由数字first 代表的文本行，然后随后的每个在step间
隔处的文本行。例如12是指每个位于奇数行号的文本行，
55则指第五行和之后每五行位置的文本行。
addr1,+n
匹配地址addr1和随后的n个文本行。
addr!
匹配所有的文本行，除了addr之外，addr可能是上远任意
的地址形式。
表21-7:sed地址表示法
通过使用这一章中早前的distros.txt文件，我们将演示不同种类的地址表示法。首先，一
系列行号：
qx4'soxastp ,dg*t, u- pos s[- xoqxnusteou]
3S0S
10.2
12/07/2006
Fedora
10
11/25/2008
SUSE
11.0
06/19/2008
Ubuntu
8.04
04/24/2008
Fedora
8
11/08/2007
在这个例子中，我们打印出一系列的文本行，开始于第一行，直到第五行。为此，我们使用
p命令，其就是简单地把匹配的文本行打印出来。然而为了高效，我们必须包含选项-n（不自
动打印选项），让sed不要默认地打印每一行。
下一步，我们将试用一下正则表达式：
300
---
## Page 302
qxq*soxsstp ,d/asns/, u- pos $[- xoqxmustgou]
3S0S
10.2
12/07/2006
11.0
06/19/2008
10.3
10/04/2007
SUSE
10.1
05/11/2006
通过包含由斜杠界定的正则表达式\/SUSE\/.我们能够孤立出包含它的文本行，和grep
程序的功能是相同的。
最后，我们将试着否定上面的操作，通过给这个地址添加一个感叹号：
4x4*soxqstp ,di/asns/, u- pos s[- xoqxnustsou]
Fedora
10
11/25/2008
Ubuntu
8.04
04/24/2008
Fedora
8
11/08/2007
Ubuntu
6.10
10/26/2006
Fedora
7
05/31/2007
Ubuntu
7.10
10/18/2007
Ubuntu
7.04
04/19/2007
Fedora
6
10/24/2006
Fedora
9
05/13/2008
Ubuntu
6.06
06/01/2006
Ubuntu
8.10
10/30/2008
Fedora
6
03/20/2006
这里我们看到期望的结果：输出了文件中所有的文本行，除了那些匹配这个正则表达式的文
本行。
目前为止，我们已经知道了两个sed的编辑命令，s和p。这里是一个更加全面的基本编辑
命令列表：
命令
说明
=
输出当前的行号。
a
在当前行之后追加文本。
d
删除当前行。
i
在当前行之前插入文本。
301
---
## Page 303
P
打印当前行。默认情况下，sed程序打印每一行，并且只是
编辑文件中匹配指定地址的文本行。通过指定-n选项，这
个默认的行为能够被忽略。