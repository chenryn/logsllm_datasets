134 (66.01%)
Context of app development†
2 (01.0%)
19 (09.5%)
28 (14.0%)
40 (20.0%)
37 (18.5%)
4 (02.0%)
Figure 1: Primary sources for finding libraries among our
survey participants
Self-taught
On the job
Online coding course
Class in university
Class in school
Other
Company
Self-employed
Hobby
< 10 employees
100+ employees
10–50 employees
50–100 employees
1–5 apps
6–10 apps
11–50 apps
51–100 apps
100+ apps
Company size
Number of apps worked on
x= 13.188± 4.42 apps
182 (89.66%)
66 (32.51%)
38 (18.72%)
25 (12.32%)
8 (03.94%)
0 (00.00%)
72 (35.47%)
78 (38.42%)
125 (61.58%)
27 (37.50%)
16 (22.22%)
7 (09.72%)
22 (30.56%)
101 (50.00%)
50 (24.75%)
44 (21.78%)
5 (02.48%)
2 (00.99%)
† Multiple choice, sum does not need to equal 100%
2.3 Q1: Workflow and Integration
In the first part of the survey we seek to answer how app develop-
ers choose and integrate libraries into their apps. Figure 1 shows
the primary sources of the participants to search for libraries. It
is evident that the majority of app developers use search engines,
followed by the project hoster GitHub. The relatively small num-
ber of dedicated Android community websites, such as Android
Arsenal or Android Weekly, underlines the lack of a central library
marketplace/package manager such as Cocoapods for iOS or npm
for JavaScript. Being asked about library selection criteria (see Fig-
ure 2), 79.7% of all participants named functionality as main criteria.
Open source (61.7%) and good documentation (52.3%) are further
criteria for library selection. In general, recommendations and user
ratings are less important. Security (26.6%) and particularly the use
of permissions (29.7%) are among the least important criteria, which
is particularly surprising after news reports and scientific research
on permission misuse of advertisement libraries [8, 19, 35, 39].
Besides information about how libraries are chosen, it is impor-
tant to know the preferred development platform and integration
Figure 2: Reported criteria for library selection among our
survey participants
Figure 3: Primary development environment of our survey
participants
approach by developers. Figure 3 suggests that Android Studio is the
preferred IDE for app development (61%), followed by application
generator frameworks such as Xamarin or Cordova (17.2%) and
Eclipse with the Android plugin (13.3%). A small fraction of app
developers (8.4%) prefers different environments such as NetBeans
or even the command line. Similar to development platforms, there
are different possibilities to integrate a library (see Figure 4). The
Android Gradle plugin, introduced in 2014, is a powerful depen-
dency manager and the default in Android Studio. Although two
thirds of app developers use Gradle, more than half of them also
resort to manual inclusion or use a combination of different ap-
proaches. Build systems such as Maven (14%) or Ant (3.9%) are not
widespread in Android app development. Users of Xamarin prefer
to use its convenient package manager NuGet.
2.4 Q2: Application and Library Maintenance
In the second part of the survey, we asked the participants about
app release frequency, whether they update their dependencies, and
about their main motivation to perform app and library updates
(see Figure 5). 78% of the app developers release new app updates
on a variable schedule, while only 22% rely on a fixed schedule,
11122244777112685Friends/ColleaguesGradleMavenAndroid WeeklyCommunityLibrary developer websiteOther appsPackage ManagerAndroid ArsenalForumsOtherStackoverflowGithubGoogle0255075Where do you search for libraries?0 (0%)4 (3.12%)34 (26.56%)37 (28.91%)38 (29.69%)41 (32.03%)45 (35.16%)58 (45.31%)67 (52.34%)79 (61.72%)102 (79.69%)Closed SourceOtherSecurityRatingsUse of Android PermissionsRecommendationsUpdate FrequencyPopularityDocumentationOpen SourceFunctionality04080120Chose libraries according to specific criteria?17 (8.37%)27 (13.3%)35 (17.24%)124 (61.08%)OtherEclipseApplication GeneratorAndroid Studio050100150How do you develop your apps?Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2189Figure 4: Used library integration techniques by our survey
participants
Figure 5: Questions and responses for Q2 regarding app/li-
brary release frequency.
Figure 6: Interval at which our participants release their app
updates
e.g., app developers at companies with a fixed release schedule. The
majority of developers releases new updates within a time period of
one to three months. However, there is also a considerable number
of developers (39.9%) that provides updates at most twice a year.
The main motivation to release new app versions is to provide
new functionality and fixing bugs (see Figure 7). Only one third
of the developers explicitly names library updates as a reason to
provide a new app version. This is contrary to the main motivation
to update the apps’ libraries where the dominant answer is bug
fixing (only three developers did not name this). Functionality is
only the third most common reason (56.5%), right behind security
fixes (57.6%). Of all app developers, 66% update at least some of
their libs regularly, while 30% completely abstain from updating
the dependencies. Changelogs and release announcements are an
effective means to reach app developers, since 70% of the developers
read them at least sporadically.
Figure 7: Reasons why our survey participants update apps
and their apps’ libraries
Figure 8: Usability satisfaction of our participants with the
Gradle build system
Figure 9: Self-reported reasons why the participants’ apps
would include an outdated library
2.5 Q3: Reasons for Outdated Libs
The last part of the survey asked questions about problems that
might be a reason for not updating libraries. We also requested
a self-reporting on reasons for outdated libraries and asked the
developers for their opinion on possible solutions.
Since Gradle is the default dependency management system in
Android, we asked about Gradle’s usability and drawbacks. While
the majority of the participants likes Gradle (65.3% in Figure 8)
or only sees minor limitations (31%), only three participants are
unhappy with Gradle’s usability. The most frequently named draw-
backs include a weak build performance with more complex apps
and a steep learning curve compared to the simplicity of adding
libraries manually. We then explicitly asked for reasons that their
apps contain outdated libraries (see Figure 9). For 57% of the par-
ticipants there is no incentive to update the library as it works as
intended. Half of the participants are afraid of experiencing incom-
patibilities, for instance, through modified or renamed library APIs,
or they refrain from updating due to an expected high integration
effort. Another reason is that app developers are just unaware of
library updates (33%).
Figure 10 shows a selection of potential approaches to facilitate
better library management. Of all participants, 65.6% wish to have
5 (3.91%)6 (4.69%)12 (9.38%)18 (14.06%)67 (52.34%)84 (65.62%)AntDo not knowOtherMavenAdd JAR fileGradle0255075100How do you integrate libraries into your app?78%22%0255075100ResponseNoYesIs your app updated on a fixed schedule?30%3%46%20%0255075100ResponseNoI don't knowYes, some of themYes, all of themDo you update the libraries in your app regularly?18%2%66%14%0255075100ResponseNeverI don't knowSometimesRegularlyDo you read changelogs/announcements for new library versions?6 (2.96%)8 (3.94%)44 (21.67%)64 (31.53%)32 (15.76%)32 (15.76%)17 (8.37%)WeeklyBi−weeklyMonthlyQuarterlyTwice per yearYearlyNever0204060At which interval do you release app updates?10 (4.93%)67 (33%)169 (83.25%)183 (90.15%)OtherLibrary updatesBug fixingNew functionality050100150200For which reason do you update your app?2 (2.35%)2 (2.35%)48 (56.47%)49 (57.65%)82 (96.47%)I don't knowOtherNew featuresSecurityBug fixing0255075Why do you update your apps' libraries?64%64%64%64%31%31%31%31%4%4%4%4%0255075100ResponseNoI don't knowSomewhatYesAre you happy with Gradle's usability?3 (2.34%)8 (6.25%)9 (7.03%)13 (10.16%)17 (13.28%)34 (26.56%)42 (32.81%)64 (50%)73 (57.03%)I don't knowOtherI don't careBad/missing library documentationMissing update documentationToo much effortUnaware of updatesPrevent incompatibilitiesLibrary was still working0255075Reason why your app would include outdated libraries?Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2190Figure 10: Preferred improvements for making library up-
dates easier
Figure 11: Acceptance of automatic library updates on end-
user devices among our participants
better development tools, for instance, an improved IDE integra-
tion. Among the app developers, 78.9% like the idea of having a
central library market place or package manager, similar as in other
ecosystems, such as iOS or JavaScript. Many library developers dis-
tribute their libraries via different channels, such as Maven Central
or Bintray. For those who host their library only on their website,
developers would welcome additional, potentially more convenient,
distribution channels.
Finally, we asked whether participants would accept an auto-
mated on-device library patching via the Android OS, as long as it
would not break app functionality. Half of the responses fully agreed
with such a solution, while about 12% were not sure whether this
is a good idea. About 23% clearly disagreed with such an approach,
while another 12% did not mind.
2.6 Limitations
As with any user study, our results should be interpreted in con-
text. We chose an online study because it is difficult to recruit
Google Play developers for an in-person study at a reasonable cost.
Choosing to conduct an online study gave us less control over the
recruitment process; however, it allowed us to recruit a large and
geographically diverse sample. Because we targeted Google Play
developers, we could not easily take advantage of services like
Amazon’s Mechanical Turk or survey sampling firms. Managing
online study payments outside such infrastructures is very chal-
lenging; as a result, we did not offer compensation and instead
asked participants to generously donate their time. As might be
expected, the combination of unsolicited recruitment emails and
no compensation led to a strong self-selection effect, and we expect
that our results represent Android developers who are interested
and motivated enough to participate.
In any online study, some participants may not provide full effort,
or may answer haphazardly. In this case, the lack of compensation
reduces the motivation to answer in a constructive manner; those
who are not motivated will typically not participate in the first
place. We attempt to remove any obviously low-quality data (e.g.,
responses that are entirely invective) before analysis, but we cannot
discriminate perfectly.
3 LIBRARY RELEASE ANALYSIS
The survey results indicate that 77% of app developers update at
most a strict subset of their included libraries (see Figure 5). One
of the main reasons for this is that there is no obvious need to
update the library when it works as intended. The survey suggests
that bugfixes and security fixes would be a reason to update if
new library versions would provide dedicated patch-only changes
and would not mix bugfixes with new functionality. Another more
alarming reason is that libraries are not updated due to the fear of
experiencing incompatibilities and an expected high integration
effort. This raises the question how library developers release new
versions and whether their current release strategy could be a con-
tributing factor to poor library adoption. In the following, we seek
to answer this question by analyzing how often library versions
change existing APIs and provide versions with mixed types of
changes, i.e., security fixes and new functionality. A related but pre-
viously uncovered aspect is how library developers communicate
these changes, i.e., which changes might an app developer expect
given a library version number and do these expectations match
the actual changes made in code and API.
3.1 Semantic Versioning
The concept of classifying a version number into different cate-
gories to infer the expected effort of integration was proposed as
Semantic Versioning (SemVer) by Preston-Werner [36]. It comprises
a set of simple rules that dictate how library developers assign and
increment new version numbers. The basic idea is that if library
developers adhere to these rules, the library consumer (typically
the app developer) can assess, just by looking at the version string,
whether or not a library update can be performed without addi-
tional implementation and code adaption effort. Semantic Versioning
works as follows: First, the lib developer declares the public API, e.g.,
by documenting it. Then, any changes in the documented public
API are communicated with the version number. The version format
consists of three numbers X.Y.Z (Major.Minor.Patch). Whenever
a new version includes bug fixes or code-only changes that do not
affect the API, the patch version number is incremented. Backwards
compatible API additions/changes increment the minor version and
backwards incompatible API changes (removed methods, incom-
patible argument types) increase the major number. Intuitively, a
library without further dependencies can be updated without ad-
ditional effort if a new version is a minor/patch version. A major
version might require additional integration effort, depending on
the changes of APIs in use.
3.2 Android Library Versioning
To investigate the status quo in Android library versioning we con-
duct an empirical study of expected changes versus actual changes
to confirm or disprove that library developers can be a contributing
factor to the problem of a poor library adaptation in the Android
app ecosystem. To this end, we build on and extend the library
database of the LibScout project [4]. In total, we analyze 89 distinct
libraries with 1,971 versions with a minimum set of 10 versions per
library. In our test set all libraries make use of the X.Y.Z versioning
scheme, except OrmLite which uses an X.Y scheme. In addition,
Dropbox (v2.0.5.1) and FasterXML-Jackson (v2.4.1.1) include a single
12 (9.38%)23 (17.97%)39 (30.47%)62 (48.44%)84 (65.62%)OtherDifferent distribution channelsSystem service or package managerCentral library marketplaceBetter IDE integration0255075100What would help making library updates easier for app developers?23%12%12%52%0255075100ResponseNoI don't knowI do not mindYesWould you accept automatic library updates on user devices in cases where they do not break functionality?Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2191library version with a sub-patch level. However, due to the absence
of a changelog for these versions, we can not properly assess the
necessity of such version numbers. In the following, we describe in
more detail how we determine the actual changes in code and the
expected changes conveyed by the version number.
Expected Changes. We extend the LibScout tool and integrate
a version parser that classifies version changes expressed by the
version string into patch, minor, and major releases. By comparing
consecutive library versions we then retrieve a list of expected
changes, e.g., a version 2.4.1 immediately following version 2.3.7 is
classified as minor release.
Actual Changes. Semantic Versioning requires that the public
library API has to be properly defined at some point, either via an
explicit documentation or via the code itself. Since some libraries
either lack a full documentation or do not provide a history of their
API reference, we programmatically extract the public API from
the original library SDKs. The public API set of the first version of
each library in our dataset is used as a baseline.
1. Filtering undocumented APIs: Undocumented public meth-
ods are not meant to be used by an app developer and hence should
not be considered part of the public API. By extracting the public
API programmatically, we have to filter such methods in a best
effort approach (see also Section 5). To this end, we exclude public
methods that reside in subpackages named internal. Moreover,
we conservatively filter classes (and their declared methods) that