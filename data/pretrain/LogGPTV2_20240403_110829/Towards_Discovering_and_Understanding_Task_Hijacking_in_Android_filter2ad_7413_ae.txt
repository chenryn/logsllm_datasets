### Task Control Features and Their Usage

The task control features, as detailed in the table, are widely popular among both app developers and users. For instance, the "singleTask" launch mode and the NEW_TASK intent flag are frequently used to manage the association of new activities with tasks. The customization of the "back" button, facilitated by the onBackPressed() callback function, is particularly prevalent (adopted by up to 62% of apps). This is often employed by ad libraries for data cleanup before an activity is destroyed. Additionally, a significant number of activities can be hidden from the overview screen by defining the "excludeFromRecents" attribute or setting the EXCLUDE_FROM_RECENTS intent flag.

### Case Study: Task Affinity

Task affinity is a feature that, if misused, can lead to severe security vulnerabilities. Our study found that 3.96% of the analyzed apps explicitly declare task affinity. Notably, 1.6% of all apps set their activities' taskAffinity string without including their own package names. This means that these 109,000 apps may interfere with each other's multitasking behaviors in case of task affinity conflicts. Furthermore, some apps intentionally set the taskAffinity string to the package name of other apps, which can cause even more significant disruptions. We identified 3,293 such apps, and Table 6 lists the top package names used as task affinities by these apps.

### Reverse Engineering Findings

By reverse engineering several of these apps, we discovered that setting the task affinity to another app's package name is particularly useful for "plug-in" apps. These apps provide complementary features to existing, usually popular, apps, similar to browser plug-ins. By sharing the same task, the "plug-in" app can modify the user experience and enhance functionality within the context of the host app. For example, the phone call recorder app FonTel displays control buttons on the screen during a call, allowing users to manage call recording. The control buttons are part of a mostly transparent activity, and by setting its task affinity to com.android.phone, it appears on top of the Android telephony task, enabling simultaneous access to both the recording controls and the telephony activity.

### Summary

Despite the security risks, Android multitasking features are widely adopted and have become essential for many apps that offer valuable functionalities.

### Defense Discussion

Given the extensive use of "security-sensitive" task control features, simply disabling them would significantly impact app functionality and user experience. Mitigating task hijacking threats requires a balance between security and multitasking features.

#### 7.1 Detection in Application Review

Existing app vetting processes, such as Bouncer, could inspect "sensitive" task control features as a lightweight defense strategy. However, formulating guidelines that balance security and features is challenging. For example, a tentative guideline could be that the taskAffinity attribute should follow a strict format, including the app's package name followed by a developer-defined affinity name, and should not contain any other app's package name unless the two apps share the same developer. While this would reduce hijacking risks, it also restricts useful features and contradicts the principle of giving activities the freedom to live in their preferred tasks, even if they are from different apps. This contradiction cannot be resolved solely through app review; system support is also necessary.

Moreover, detecting problematic behaviors, such as those in the onBackPressed() method, is difficult. Static analysis cannot identify all possible program behaviors, and dynamic analysis is limited since certain behaviors may only occur after the app has passed review. Thus, completely mitigating task hijacking risks while preserving existing features remains a challenge.

#### 7.2 Secure Task Management

An alternative approach involves enhancing the security of Android's task management mechanism. Introducing additional security guidelines or logic can raise developers' awareness of security risks and limit the attack surface. For example, an additional boolean attribute could be introduced for each app to determine whether it allows activities from other apps to have the same task affinity. If set to "false" (the default), the system would not unconditionally relocate "alien" activities to the app's task, even if they declare the same task affinity. Similarly, a finer-grained boolean attribute could be used for the allowParentReparenting attribute, determining whether to allow "alien" activities to be re-parented to the app's task. Such enhancements are worth considering, especially for the most privileged system apps.

Completely defeating task hijacking is not easy, as identifying the exact behavior of pressing "back" in an activity during app review is challenging. For these popular and security-sensitive features, more powerful runtime monitoring mechanisms are required to fully mitigate task hijacking threats.

In summary, we advocate for future support for security guidance and mechanisms that can protect Android apps from task hijacking threats, ensuring a secure and feature-rich multitasking environment for users and developers.

### Related Work

**GUI Security:** GUI security has been extensively studied in traditional desktop and browser environments, including UI spoofing and clickjacking. Android, however, has unique GUI subsystems. Research has shown that Android's GUI confidentiality can be breached through various methods, such as taking screenshots due to ADB flaws, embedding malicious UIs, and exploiting side channels. This paper focuses on the fundamental design flaws of the task management mechanism, which organizes and manages all UI components in the Android system.

**Android Vulnerability:** The security threats in inter-component communication (ICC) have been widely studied. There is also considerable prior work on emerging Android vulnerabilities and their mitigation measures. However, the critical Android multitasking mechanism and the Activity Manager Service (AMS) have not been deeply studied. This paper fills this gap by systematically examining Android multitasking and its security implications.

**Android Malware:** Many efforts have focused on large-scale detection of malicious or high-risk Android apps using fingerprinting, heuristic-based methods, machine learning, and data flow analysis. The attack surface discovered in this paper can be easily exploited to create new malware. We report our threat assessment based on over 6 million market apps and provide defense suggestions to prevent the outburst of task hijacking threats.

### Conclusion

This paper systematically investigates the security implications of Android's task design and task management mechanism. We discover numerous task hijacking opportunities that can lead to serious security consequences, affecting all recent versions of Android. Most of our proof-of-concept attacks can target all installed apps, including the most privileged system apps. We analyzed over 6.8 million apps and found task hijacking risk to be prevalent. We notified the Android team about these issues and discussed possible mitigation techniques.

### Acknowledgment

We thank anonymous reviewers for their comments, which helped improve the quality of this paper. We also thank Dr. Sencun Zhu and Dr. Dinghao Wu from Pennsylvania State University for their valuable feedback. Chuangang Ren was supported in part by ARO W911NF-09-1-0525 (MURI). Peng Liu was supported by ARO W911NF-09-1-0525 (MURI) and ARO W911NF-13-1-0421 (MURI).

### References

[References listed here as provided in the original text]