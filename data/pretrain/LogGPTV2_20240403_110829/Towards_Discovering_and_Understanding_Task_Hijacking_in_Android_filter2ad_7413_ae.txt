the task control knobs respectively. As shown in the ta-
ble, a majority of the task control features are popular
with app developers and users. For example, “single-
Task” launch mode and NEW_TASK intent ﬂag are used
in a signiﬁcant portion of apps to control the association
of new activities with tasks. The ﬂexibility of “back”
button customization is widely adopted (as high as 62%
apps). One reason is that the onBackPressed() call-
back function is heavily used by ad libs (which embed
ads in app activities) for data clean-up before the activi-
ties are destroyed. In addition, a signiﬁcant portion of ac-
tivities can hide their associated tasks from the overview
screen (by deﬁning “excludeFromRecents” attribute or
setting EXCLUDE_FROM_RECENTS intent ﬂag).
Case Study - Task Afﬁnity: Since task afﬁnity can be
abused in the most dreadful attacks, we are particularly
interested in its use. 3.96% apps we studied explicitly
declare task afﬁnity. A considerable portion (1.6% of all
apps) set their activities’ taskAfﬁnity string without con-
taining their own package names. It means that, if there
are task afﬁnity conﬂicts, these 1.6% apps (totally 109
thousand apps) may interfere with the multitasking be-
haviors of one another. They may even affect other apps
if the task afﬁnity attributes are intentionally set to the
package name of other apps (recall that the taskAfﬁn-
ity string can be set arbitrarily). We are especially inter-
ested in the latter case, and in our analysis, we ﬁnd a total
of 3293 apps of this kind. Table 6 lists the top package
names designated as task afﬁnity by these apps.
By reverse engineering a number of these apps, we
ﬁnd that intentionally setting the task afﬁnity as another
app is particularly useful in a class of “plug-in” apps,
i.e. apps that provide complementary features to exist-
ing (and usually popular) apps just like a web browser’s
plug-ins (except that here the “plug-in” itself is imple-
mented in a separate app). By being in the same task
with the popular app, the “plug-in” app can change nor-
mal user experience and fulﬁll its feature functionality
in the context of the app it serves. For example, an
phone call recorder app namely FonTel can display an
array of buttons on screen whenever there is a phone
call, letting users to control phone call recording. The
control buttons are contained in an mostly transparent
activity. By setting the task afﬁnity of the activity to
com.android.phone, it can be pushed on top of the
Android telephony task when a phone call occurs, such
that users can access both the recording control buttons
and telephony activity at the same time.
In summary, despite the security risks, Android mul-
titasking features are popular with developers and even
become indispensable to the normal functions of a sig-
niﬁcant number of apps that provide favorable features.
7 Defense Discussion
Given the pervasive use of the “security-sensative” task
control features, simply disabling these features would
greatly hurt app functions and user experience. Mitigat-
ing the task hijacking threats become a trade-off between
956  24th USENIX Security Symposium 
USENIX Association
12
app security and multitasking features.
7.1 Detection in Application Review
Existing app vetting processes such as Bouncer [31] may
conduct a inspection over the “sensitive” task control
knobs, a light-weight defense strategy without signiﬁ-
cantly affecting existing multitasking features.
However, specifying a guideline balancing the secu-
rity/feature trade-off is non-trivial. For example, a ten-
tative guideline could be: taskAffinity attribute
should be speciﬁed in a strict format, e.g., with app pack-
age name followed by developer-deﬁned afﬁnity name
(now task afﬁnity can be any string); and the task afﬁnity
should not contain any other app’s package name, except
that the two apps are from the same developer. This ef-
fectively eliminates a big portion of hijacking state tran-
sitions where a malicious activity speciﬁes the victim app
as its preferred afﬁnity. However, this rule also restricts
useful features and contradicts with an important princi-
ple of Android multitasking design - give an activity the
freedom to live in its preferred task even though they are
from different apps. This contradiction cannot be solved
by app review alone in this case. We need system sup-
port together with app review to achieve a good balance
of security/feature trade-off.
Moreover, detecting problematic events can be some-
times difﬁcult for the app review. For instance, one
could conﬁne the behaviors in onBackPressed(),
preventing it from generating potential hijacking tran-
sition event. However, discovering all possible pro-
gram behaviors using static analysis is an undecid-
able problem. A skillful attacker can replace class
methods (onBackPressed() method in Activity
class) with another method by changing Dalvik inter-
nals using native code during runtime, and static anal-
ysis does not know this by simply looking at the original
onBackPressed() method. Dynamic analysis is of
little help as well since this behavior can be triggered
only after passing the app review.
As a result, completely mitigating task hijacking risks
and without affecting existing features in app review re-
mains challenging.
7.2 Secure Task Management
An alternative approach involves security enhancement
to the task management mechanism of Android system.
A more secure task management could introduce ad-
ditional security guides or logic, which draws develop-
ers’ awareness of the security risk and limits the attacker
surface. Take the above task afﬁnity for example, an
additional boolean attribute can be introduced for each
app to decide if it allows the activities from other apps
to have the same afﬁnity as the app. If the boolean is
“false” (also by default), the system would not uncondi-
tionally relocate the “alien” activities to the app’s task or
vice versa, even though the “alien” activities declare to
have the same task afﬁnity as the app. Likewise, a ﬁner-
grained boolean attribute can be further employed for
allowParentReparenting attribute - determining
if to allow “alien” activities to be re-parented to the app’s
task (even though deﬁning the same task afﬁnity is per-
mitted). For other “security-sensative” features, we sug-
gest ﬁrst consider the same approach. Considering the
serious security hazards that can be prevented, it is well
worth of making such changes. At the very least, en-
hanced security scheme like this has to be applied to as-
sure the security of the most privileged system apps.
Completely defeating task hijacking is not easy. As
we have discussed in the last section, it is difﬁcult to
identify the exact behavior of pressing “back” in an ac-
tivity during app review phase. For these popular and
security-sensitive features, more powerful runtime mon-
itoring mechanism is required to fully mitigate task hi-
jacking threats.
In summary, we advocate future support for security
guidance and/or mechanism, which can protect Android
apps from task hijacking threats and bring along a both
secure and feature-rich multitasking environment for An-
droid users and developers.
8 Related Work
GUI security : GUI security has been extensively stud-
ied in traditional desktop and browser environments [14,
29], e,g., UI spooﬁng [9], clickjacking [3, 17], etc. An-
droid, on the other hand, is unique in the design of its
GUI sub-systems. It has been shown that the GUI conﬁ-
dentiality in Android can be breached by stealthily taking
screen shots due to adb ﬂaws [22], via embedded mali-
cious UIs [28, 24], or through side channels, e.g. shared-
memory side channel [8] or reading device sensors infor-
mation [25, 34]. In contrast to existing work, this paper
focuses on the fundamental design ﬂaws of the task man-
agement mechanism (supported by the AMS), the control
center that organizes and manages all existing UI compo-
nents in the Android system.
Android Vulnerability: The security threats in the inter-
component communication (ICC) has been widely stud-
ied [13, 23, 10, 20, 32]. Moreover, there has been con-
siderable prior work on emerging Android vulnerabili-
ties and their mitigation measures in many aspects [38,
40, 18, 33, 27, 7, 30, 15, 21]. However, the critical An-
droid multitasking mechanism and the feature provider,
the AMS, have not been deeply studied before. This pa-
per ﬁlls in this gap by systematically studying the An-
USENIX Association  
24th USENIX Security Symposium  957
13
droid multitasking and the security implications of this
design.
Android Malware: Many prior efforts focus on
large-scale detection of malicious or high-risk Android
apps [39], e.g., ﬁngerprinting or heuristic-based meth-
ods [26, 41, 16], malware classiﬁcation based on ma-
chine learning techniques [37, 6], and in-depth data ﬂow
analysis for app behaviors [11, 35, 36, 6]. The attack sur-
face discovered in this paper can be easily employed by
attackers to create a wide spectrum of new malwares, as
discussed in Section 5. We report our threat assessment
based on over 6 million market apps and provide defense
suggestions in order to prevent the outburst of task hi-
jacking threats in advance.
9 Conclusion
This paper systematically investigated the security im-
plications of Android task design and task management
mechanism. We discover a plethora of task hijacking op-
portunities for attackers to launch different attacks that
may cause serious security consequences. We ﬁnd that
these security hazards can affect all recent versions of
Android. Most of our proof-of-concept attacks are able
to attack all installed apps including the most privileged
system apps. We analyzed over 6.8 million apps and
found task hijacking risk prevalent. We notiﬁed the An-
droid team about these issues and we discussed possible
mitigation techniques.
10 Acknowledgment
We would like to thank anonymous reviewers whose comments
help us improve the quality of this paper. We thank Dr. Sen-
cun Zhu and Dr. Dinghao Wu from Pennsylvania State Uni-
versity for providing valuable feedback. Chuangang Ren was
supported in part by ARO W911NF-09-1-0525 (MURI). Peng
Liu was supported by ARO W911NF-09-1-0525 (MURI) and
ARO W911NF-13-1-0421 (MURI).
References
[1] Task and Back Stack.
http://developer.android.
com/guide/components/tasks-and-back-stack.
html.
[2] App Manifest.
http://developer.android.com/
guide/topics/manifest/activity-element.
html.
[3] AKHAWE, D., HE, W., LI, Z., MOAZZEZI, R., AND SONG, D.
Clickjacking Revisited: A Perceptual View of UI Security.
In
Proceedings of the USENIX Workshop on Offensive Technologies
(WOOT) (2014).
[4] Android Activity.
http://developer.android.com/
reference/android/app/Activity.html.
[5] Simplocker: First Conﬁrmed File-Encrypting Ransomware for
Android, 2014. http://www.symantec.com/connect/
blogs/simplocker-first-confirmed.
[6] ARP, D., SPREITZENBARTH, M., HUBNER, M., GASCON, H.,
AND RIECK, K. Drebin: Effective and Explainable Detection of
Android Malware in Your Pocket. In Proceedings of Network and
Distributed System Security Symposium (NDSS) (2014).
[7] CHEN, E., PEI, Y., CHEN, S., TIAN, Y., KOTCHER, R., AND
TAGUE, P. OAuth Demystiﬁed for Mobile Application Develop-
ers. In Proceedings of ACM Conference on Computer and Com-
munications Security (CCS) (2014).
[8] CHEN, Q. A., QIAN, Z., AND MAO, Z. M. Peeking into Your
App without Actually Seeing It: UI State Inference and Novel
Android Attacks. In Proceedings of the USENIX Security Sym-
posium (2014).
[9] CHEN, S., MESEGUER, J., SASSE, R., WANG, H., AND WANG,
Y. A Systematic Approach to Uncover Security FLaws in GUI
Logic. In Proceedings of IEEE Symposium on Security and Pri-
vacy (S&P) (2007).
[10] CHIN, E., FELT, A. P., GREENWOOD, K., AND WAGNER, D.
Analyzing Inter-Application Communication in Android. In Pro-
ceedings of the International Conference on Mobile Systems, Ap-
plications, and Services (MobiSys) (2011).
[11] ENCK, W., GILBERT, P., CHUN, B., COX, L. P., JUNG, J., MC-
DANIEL, P., AND SHETH, A. TaintDroid: An Information-Flow
Tracking System for Realtime Privacy Monitoring on Smart-
phones.
In Proceedings of USENIX Symposium on Operating
Systems Design and Implementation (OSDI) (2010).
[12] FELT, A. P., CHIN, E., HANNA, S., SONG, D., AND WAGNER,
D. Android Permissions Demystiﬁed. In Proceedings of ACM
Conference on Computer and Communications Security (CCS)
(2011).
[13] FELT, A. P., WANG, H. J., MOSHCHUK, A., HANNA, S., AND
CHIN, E. Permission Re-delegation: Attacks and Defenses. In
Proceedings of the USENIX Security Symposium (2011).
[14] FESKE, N., AND HELMUTH, C. A Nitpickers Guide to a
In Proceedings of Annual
Minimal-complexity Secure GUI.
Computer Security Applications Conference (ACSAC) (2005).
[15] GRACE, M., ZHOU, Y., WANG, Z., AND JIANG, X. Systematic
Detection of Capability Leaks in Stock Android Smartphones. In
Proceedings of Network and Distributed System Security Sympo-
sium (NDSS) (2012).
[16] GRACE, M., ZHOU, Y., ZHANG, Q., ZOU, S., AND JIANG, X.
RiskRanker: Scalable and Accurate Zero-day Android Malware
Detection.
In Proceedings of the International Conference on
Mobile Systems, Applications, and Services (MobiSys) (2012).
[17] HUANG, L., MOSHCHUK, A., WANG, H. J., SCHECHTER, S.,
AND JACKSON, C. Clickjacking: Attacks and Defenses. In Pro-
ceedings of the USENIX Security Symposium (2012).
[18] JIN, X., HU, X., YING, K., DU, W., AND YIN, H. Code Injec-
tion Attacks on HTML5-based Mobile Apps: Characterization,
Detection and Mitigation. In Proceedings of ACM Conference on
Computer and Communications Security (CCS) (2014).
[19] K. W. Y. AU AND Y. ZHOU AND Z. HUANG AND D. LIE.
PScout: Analyzing the Android Permission Speciﬁcation. In Pro-
ceedings of ACM Conference on Computer and Communications
Security (CCS) (2012).
[20] KANTOLA, D., CHIN, E., HE, W., AND WAGNER, D. Reducing
attack surfaces for intra-application communication in android.
In Proceedings of the ACM workshop on Security and privacy in
smartphones and mobile devices (SPSM) (2012).
958  24th USENIX Security Symposium 
USENIX Association
14
[21] LI, T., ZHOU, X., XING, L., LEE, Y., NAVEED, M., WANG,
X., AND HAN, X. Mayhem in the Push Clouds: Understand-
ing and Mitigating Security Hazards in Mobile Push-Messaging
Services. In Proceedings of ACM Conference on Computer and
Communications Security (CCS) (2014).
[22] LIN, C., LI, H., ZHOU, X., AND WANG, X. Screenmilker:
How to Milk Your Android Screen for Secrets. In Proceedings
of Network and Distributed System Security Symposium (NDSS)
(2014).
[23] LU, L., LI, Z., WU, Z., LEE, W., AND JIANG, G. CHEX:
Statically Vetting Android Apps for Component Hijacking Vul-
nerabilities.
In Proceedings of ACM Conference on Computer
and Communications Security (CCS) (2012).
[24] LUO, T., HAO, H., DU, W., WANG, Y., AND YIN, H. Attacks
on WebView in the Android System. In Proceedings of Annual
Computer Security Applications Conference (2011).
[25] MILUZZO, E., VARSHAVSKY, A., AND BALAKRISHNAN, S.
TapPrints: Your Finger Taps Have Fingerprints. In Proceedings
of the International Conference on Mobile Systems, Applications,
and Services (MobiSys) (2012).
[26] PENG, H., GATES, C., SARMA, B., LI, N., QI, Y.,
POTHARAJU, R., NITA-ROTARU, C., AND MILLOY, I. Using
Probabilistic Generative Models for Ranking Risks of Android
Apps.
In Proceedings of ACM Conference on Computer and
Communications Security (CCS) (2012).
[27] POEPLAU, S., FRATANTONIO, Y., BIANCHI, A., KRUEGEL, C.,
AND VIGNA, G. Execute This! Analyzing Unsafe and Malicious
Dynamic Code Loading in Android Applications. In Proceedings
of Network and Distributed System Security Symposium (NDSS)
(2014).
[28] ROESNER, F., AND KOHNO, T. Securing Embedded User In-
terfaces: Android and Beyond. In Proceedings of the USENIX
Security Symposium (2013).
[29] SHAPIRO, J., VANDERBURGH, J., NORTHUP, E., AND CHIZ-
In
MADIA, D. Design of the EROS Trusted Window System.
Proceedings of the USENIX Security Symposium (2004).
[30] SOUNTHIRARAJ, D., SAHS, J., GREENWOOD, G., LIN, Z.,
AND KHAN, L. SMV-HUNTER: Large Scale, Automated Detec-
tion of SSL/TLS Man-in-the-Middle Vulnerabilities in Android
Apps. In Proceedings of Network and Distributed System Secu-
rity Symposium (NDSS) (2014).
[31] Android and Security, 2012.
http://googlemobile.
blogspot.com/2012/02/android-and-security.
html.
[32] WEI, F., ROY, S., OU, X., AND ROBBY. Amandroid: A Precise
and General Inter-component Data Flow Analysis Framework
for Security Vetting of Android Apps. In Proceedings of ACM
Conference on Computer and Communications Security (CCS)
(2014).
[33] WU, L., GRACE, M., ZHOU, Y., WU, C., AND JIANG, X. The
Impact of Vendor Customizations on Android Security. In Pro-
ceedings of ACM Conference on Computer and Communications
Security (CCS) (2013).
[34] XU, Z., BAI, K., AND ZHU, S. TapLogger: Inferring User Inputs
on Smartphone Touchscreens Using On-board Motion Sensors.
In Proceedings of the ACM Conference on Security and Privacy
in Wireless and Mobile Netowrks (WiSec) (2012).
[35] YANG, W., XIAO, X., ANDOW, B., LI, S., XIE, T., AND ENCK,
W. AppContext: Differentiating Malicious and Benign Mobile
App Behavior under Contexts. In Proceedings of International
Conference on Software Engineering (ICSE) (2015).
[36] YANG, Z., YANG, M., ZHANG, Y., GU, G., NING, P., AND
WANG, X. S. AppIntent: Analyzing Sensitive Data Transmission
in Android for Privacy Leakage Detection. In Proc. CCS13.
[37] ZHANG, M., DUAN, Y., YIN, H., AND ZHAO, Z. Semantics-
Aware Android Malware Classiﬁcation Using Weighted Contex-
tual API Dependency Graphs. In Proc. CCS14.
[38] ZHOU, X., DEMETRIOU, S., HE, D., NAVEED, M., PAN, X.,
WANG, X., GUNTER, C., AND NAHRSTEDT, K. Identity, Lo-
cation, Disease and More: Inferring Your Secrets from Android
Public Resources. In Proceedings of ACM Conference on Com-
puter and Communications Security (CCS) (2013).
[39] ZHOU, Y., AND JIANG, X. Dissecting Android Malware: Char-
acterization and Evolution. In Proceedings of IEEE Symposium
on Security and Privacy (S&P) (2012).
[40] ZHOU, Y., AND JIANG, X. Detecting Passive Content Leaks and
In Proceedings of Network
Pollution in Android Applications.
and Distributed System Security Symposium (NDSS) (2013).
[41] ZHOU, Y., WANG, Z., ZHOU, W., AND JIANG, X. Hey, You,
Get Off of My Market: Detecting Malicious Apps in Ofﬁcial and
Alternative Android Markets.
In Proceedings of Network and
Distributed System Security Symposium (NDSS) (2012).
USENIX Association  
24th USENIX Security Symposium  959
15