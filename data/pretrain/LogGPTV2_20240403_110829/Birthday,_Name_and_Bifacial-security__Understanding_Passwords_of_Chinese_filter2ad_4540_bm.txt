IEEE S&P 2009, pp. 391–405.
[59] D. Wheeler, “zxcvbn: Low-budget password strength estima-
tion,” in Proc. USENIX SEC 2016, pp. 157–173.
is Gbt3fC79ZmMEFUFJ a weak password?,
[60] Why
2019,
why-is-gbt3fc79zmmefufj-a-weak-password.
Jan.
https://security.stackexchange.com/questions/201210/
[61] R. Williams, The UX of a blacklist, Mar. 2018, https://news.
ycombinator.com/item?id=16434266.
[62] J. Yan, A. F. Blackwell, R. J. Anderson, and A. Grant, “Password
memorability and security: Empirical results.” IEEE Secur. Priv.,
vol. 2, no. 5, pp. 25–31, 2004.
[63] C. Zuo, W. Wang, R. Wang, and Z. Lin, “Automatic forgery
of cryptographically consistent messages to identify security
vulnerabilities in mobile services,” in Proc. NDSS 2016.
APPENDIX
A Justiﬁcation for our cleaning approach
Contaminated datasets. Interestingly, we observe that
there is a non-negligible overlap between the Tianya
dataset and 7k7k dataset. We were ﬁrst puzzled by the
fact that the password “111222tianya” was originally
in the top-10 most popular list of both datasets. We
manually scrutinized the original datasets (i.e., before
removing the email addresses and user names) and are
1552    28th USENIX Security Symposium
USENIX Association
surprised to ﬁnd that there are around 3.91 million (actu-
ally 3.91*2 million due to a split representation of 7k7k
accounts, as we will discuss later) joint accounts in both
datasets. We posit that someone probably has copied
these joint accounts from one dataset to the other.
Our cleaning approach. Now, a natural question aris-
es: From which dataset have these joint accounts been
copied? We conclude that these joint accounts were
copied from Tianya to 7k7k, mainly for two reasons.
Firstly, it is unreasonable for 0.34% users in 7k7k to in-
sert the string “tianya” into their 7k7k passwords, while
users from tianya.cn naturally include the site name
“tianya” into their passwords for convenience. The
following second reason is quite subtle yet convincing.
In the original Tianya dataset, the joint accounts are of
the form {user name, email address, password}, while in
the original 7k7k dataset such joint accounts are divid-
ed into two parts: {user name, password} and {email
address, password}. The password “111222tianya”
occurs 64822 times in 7k7k and 48871 times in Tianya,
and one gets that 64822/2 < 48871. Thus, it is more
plausible for users to copy some (i.e., 64822/2 of a
total of 48871) accounts using “111222tianya” as the
password from Tianya to 7k7k, rather than to ﬁrst copy
all the accounts (i.e., 64822/2) using “111222tianya”
as the password from 7k7k to Tianya and then reproduces
16460(= 48871− 64822/2) such accounts.
After removing 7.82 million joint accounts from 7k7k,
we found that all of the passwords in the remaining
7k7k dataset occur even times (e.g., 2, 4 and 6). This
is expected, for we observe that in 7k7k half of the
accounts are of the form {user name, password}, while
the rest are of the form {email address, password}. It is
likely that both forms are directly derived from the form
{user name, email address, password}. For instance,
both {wanglei, wanglei123} and {PI:EMAIL,
wanglei123} are actually derived from the single account
{wanglei, PI:EMAIL, wanglei123}. Conse-
quently, we further divide 7k7k into two equal parts
and discard one part. The detailed information on data
cleaning is summarized in Table 1.
Previous studies. In 2014, Li et al. [34] has also exploit-
ed the datasets Tianya and 7k7k. However, contrary to
us, they think that the 3.91M joint accounts are copied
from 7k7k to Tianya. Their main reason is that, when