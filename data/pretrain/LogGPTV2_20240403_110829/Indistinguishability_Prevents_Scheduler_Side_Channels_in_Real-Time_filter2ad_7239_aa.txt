title:Indistinguishability Prevents Scheduler Side Channels in Real-Time
Systems
author:Chien-Ying Chen and
Debopam Sanyal and
Sibin Mohan
Indistinguishability Prevents Scheduler Side Channels
in Real-Time Systems
Chien-Ying Chen‚àó
PI:EMAIL
University of Illinois at
Urbana-Champaign
Illinois, USA
Debopam Sanyal
PI:EMAIL
University of Illinois at
Urbana-Champaign
Illinois, USA
PI:EMAIL
Oregon State University
Sibin Mohan‚àó
Oregon, USA
ABSTRACT
Scheduler side-channels can leak critical information in real-time
systems, thus posing serious threats to many safety-critical applica-
tions. The main culprit is the inherent determinism in the runtime
timing behavior of such systems, e.g., the (expected) periodic behav-
ior of critical tasks. In this paper, we introduce the notion of ‚Äúsched-
ule indistinguishability‚Äù, inspired by work in differential privacy,
that introduces diversity into the schedules of such systems while
offering analyzable security guarantees. We achieve this by adding a
sufficiently large (controlled) noise to the task schedules in order to
break their deterministic execution patterns. An ‚Äúùúñ-Scheduler‚Äù then
implements schedule indistinguishability in real-time Linux. We
evaluate our system using two real applications: (a) an autonomous
rover running on a real hardware platform (Raspberry Pi) and (b) a
video streaming application that sends data across large geographic
distances. Our results show that the ùúñ-Scheduler offers better pro-
tection against scheduler side-channel attacks in real-time systems
while still maintaining good performance and quality-of-service
(QoS) requirements.
CCS CONCEPTS
‚Ä¢ Security and privacy ‚Üí Operating systems security.
KEYWORDS
Scheduler Side-Channels, Real-Time Systems, Indistinguishability
ACM Reference Format:
Chien-Ying Chen, Debopam Sanyal, and Sibin Mohan. 2021. Indistinguisha-
bility Prevents Scheduler Side Channels in Real-Time Systems. In Proceedings
of the 2021 ACM SIGSAC Conference on Computer and Communications Secu-
rity (CCS ‚Äô21), November 15‚Äì19, 2021, Virtual Event, Republic of Korea. ACM,
New York, NY, USA, 19 pages. https://doi.org/10.1145/3460120.3484769
1 INTRODUCTION
Real-time systems (RTS) have existed for decades in numerous forms,
such as avionics systems, nuclear power plants, automobiles, space
‚àóThe majority of this work was done when Chien-Ying and Sibin were at the University
of Illinois at Urbana-Champaign. Chien-Ying is now with NVIDIA Corporation, USA.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea
¬© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484769
vehicles, medical devices, power generation and distribution sys-
tems as well as industrial robots. Today, however, with the advent
of new domains such as autonomous cars, drones, the Internet-of-
Things (IoT), and remote monitoring and control, RTS have moved
front and center in modern society. Most such systems have safety-
critical properties, i.e., any problems at run-time could result in
significant harm to humans, the system, or even the environment.
Imagine a situation in which your car‚Äôs airbag, a real-time system
with stringent timing constraints, fails to deploy in time; such a fail-
ure can have disastrous results. Despite their importance, security
has rarely received adequate attention in the design of real-time
cyber-physical systems (CPS). There are many reasons for the lack
of robust security: the use of custom hardware/software/protocols,
a lack of computing power and memory, and even the notion that
such systems lack inherent value to adversaries have limited the de-
velopment of security mechanisms for them. Since many RTS now
use commodity-off-the-shelf (COTS) components and are often
connected to each other or even the Internet, they expose addi-
tional attack surfaces. In fact, over the past decade, there has been
a significant uptick in attacks against cyber-physical systems with
real-time properties (e.g., [11, 15, 35, 47, 50, 52, 54, 62]).
RTS have stringent timing requirements for ensuring their correct
operation. For instance, a typical window for airbag deployment,
after a collision is detected, is around 50‚Äì60 ms [31] (less than
the time it takes to blink!). Such requirements, often driven by
the physical constraints on the system1 require that systems be
deterministic at run-time. Hence, designers take great care to ensure
that (a) their constituent software tasks execute in an expected
manner [39], e.g., to exhibit periodic behavior as shown in Figure 2;
(b) interrupts are carefully managed [64]; (c) memory management
is deterministic [37]; and (d) running time, on specific processor
platforms, is analyzed very carefully at compile/run time (e.g., [9,
12, 26, 60]). However, timing and design constraints further inhibit
the addition of security solutions to RTS.
In fact, the very determinism that is an inherent characteristic of
RTS can be used against them as an attack surface, say, via timing-
based side channels. Figure 7(a) shows the discrete Fourier transform
(DFT) of a real-time system. The graph shows that the determinis-
tic behavior, coupled with the periodic design of RTS, results in a
clear demarcation of frequencies (and hence timing behaviors) of
critical real-time tasks. This property ‚Äî that RTS have determin-
istic behavior ‚Äî has been used to leak critical information using
side channels such as scheduling behavior [14, 53], power con-
sumption traces [33], electromagnetic (EM) emanations [3] and
1E.g., if a physical component must be actuated at a certain frequency, then some
software tasks must also match the rate.
Session 3A: Side Channel CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea666Figure 1: A high-level overview of this paper. The task schedule on the top left depicts a periodic execution pattern (hence
predictable and distinguishable) that can be seen in many real-time systems. With the ùúñ-Scheduler introduced in this paper,
the task schedule is injected with uncertainty (based on Laplace distributions), as depicted on the bottom left. ùúñ-Scheduler
offers analyzable security and is effective in protecting RTS against scheduler-focused side-channel attacks.
temperature [5]. In particular, ScheduLeak [14], demonstrated (a)
how to leak timing information from real-time schedules and (b)
how an adversary can use it to compromise autonomous CPS (i.e.,
take control of them, or cause them to crash).
Intuitively, one way to reduce determinism (and hence, poten-
tially, increase indistinguishability) in systems is by adding noise
to system components, for instance, to the schedule. Figures 7(c)
and 7(d) show the result of adding Laplacian noise to the system
in Figure 7(a). It thereby becomes much more difficult to identify
the frequencies of certain tasks because no peaks stand out among
the amplitudes. Adding noise to reduce the identification of an
individual in a database has been explored in the area of differential
privacy [18, 19]. The concept of ùúñ-differential privacy is used to
measure the confidence with which an individual can be identified
in the context of statistical queries in a database. The privacy pro-
tection is then quantifiable based on the foundations of mechanisms
used to increase the randomness, e.g., drawing noise to be added to
the output from, say, the Laplace distributions. Hence, we propose
similar ideas to protect RTS by increasing the indistinguishability
of system behaviors, e.g., the schedule. Hence, at a high level, we
propose that:
Systems with predictable behaviors are highly suscep-
tible to side-channel attacks; we can protect them by
reducing the ability to discern deterministic properties.
To that end, we introduce the notion of ‚Äúùúñ-indistinguishability‚Äù (Sec-
tion 4) to measure the probability of: information leakage by ob-
servation of system behaviors such as schedules and other timing
information.
We introduce indistinguishability and noise models in the re-
source management algorithms and, in particular, schedulers in real-
time CPS. Those components form the core of any RTS and control
the precise timing and scheduling behaviors of tasks and resources.
Hence, they are the ideal vehicle for (i) introducing noise into the
system, and (ii) measuring the probability of information leakage.
We also develop a class of ‚Äúùúñ-schedulers‚Äù that incorporate the notion
of ùúñ-indistinguishability (Section 4). Figure 1 shows an overview of
the concepts in this paper using a real world attack from literature.
While some work (e.g., [4, 36, 61]) has proposed the use of ad
hoc randomization methods in real-time schedulers, their effect
is severely restricted since they must adhere to all of the timing
constraints in RTS; for instance, these solutions are not allowed to
miss even a single deadline. In addition, they do not work well in
heavily loaded (i.e., high utilization) systems. This, in conjunction
with their ad hoc nature, also limits the calculation of any formal
security guarantees w.r.t. the degree of protection offered. In con-
trast, our ùúñ-schedulers, (a) can protect a wider class of RTS, since
we propose a modified system model (Section 5.1) that allows for
some deadlines to be missed, (b) can provide formal guarantees
(Section 4.2) built off the body of work in differential privacy and
(c) works on all types of systems, including heavily loaded ones.
The ùúñ-Scheduler is implemented on Linux, on both: a hardware
platform (Raspberry Pi) running real-time Linux as well as a sim-
ulation platform. We evaluate our work using two real applica-
tions (an autonomous rover and a video streaming application). We
further evaluate the ùúñ-Scheduler using simulations to explore the
design space as well as potential limitations of our system. The
results demonstrate that ùúñ-Scheduler is able to not only offer a
higher degree of protection (as compared to the state-of-the-art,
see Section 8.2), but also do so with actual guarantees while still
maintaining a high degree of performance and quality-of-service
(QoS). In summary, the main contributions of this paper are:
(1) the notion of schedule indistinguishability that captures the
difficulty of identifying information about individual tasks
in a task schedule [Section 3.3].
(2) an ùúñ-Scheduler that implements the schedule indistinguisha-
bility concepts based on bounded Laplace distributions [Sec-
tion 4 and 5].
(3) Implementation on a real hardware platform running real-
time Linux that is open-sourced [Section 6].
Note: Our aim is to modify system states to deter side-channel attacks
and not the leakage of private data, the latter being the typical use
case for differential privacy.
2 BACKGROUND AND RELATED WORK
2.1 Real-Time Systems and Scheduler
Side-Channels
Real-Time Systems. Time-critical systems such as self-driving
cars, medicine/vaccine delivery drones, space rovers (e.g., NASA‚Äôs
Defense	Enabled	by	ùúñ-Schedulerwith	a	typicalRTS	schedulerwith	ùúñ-Schedulerpossible	arrival	time	instantsbased	on	a	bounded	Laplace	distributionPDFInsight	into	ùúñ-Schedulerperiodic	execution	patternBreakingPeriodicitydiversified	execution	patternObstructing Predictabilityindistinguishable	scheduledeterministic,	predictable	schedule122331221221332212121223312212213322121212233122122133221212122331221221332212121223312212213322121221231322122121233221122322231223132121223213212212212233122113221312122231232122212123232121332212212periodicscheduleIllustration of a Task‚Äôs ScheduleDemonstrative	ApplicationsAutonomousRoverVideoStreamingSession 3A: Side Channel CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea667Opportunity and Spirit), industrial robots, autonomous tractors and
unmanned aerial vehicles (UAV), etc., play a vital role in shaping
today‚Äôs technological evolution from everyday living to space ex-
ploration. In such systems, tasks2 delivering critical functionality
rely on an operating system (typically an operating system that
supports a real-time scheduling policy) to fulfill their timing require-
ments (e.g., the task must complete within a predefined time limit).
Oftentimes, these tasks (e.g., system heartbeat keepers, PID control
processes, sensor data collectors, motor actuators, etc.) are designed
to execute in a periodic fashion to guarantee responsiveness. Such
real-time tasks are usually associated with a set of predefined timing
constraints such as (a) minimum inter-arrival times (i.e., periods),
(b) deadlines and (c) worst-case execution times (WCET). They
are scheduled using well-known real-time scheduling algorithms
e.g., fixed-priority preemptive scheduling, earliest deadline first
scheduling [39]. These real-time constraints help system designers
ensure that all safety guarantees are met (e.g., no real-time tasks
will miss their deadlines). As a result, the system schedule becomes
deterministic and highly predicable.
Scheduler Side-Channels. The aforementioned determinism and
predictability, though favorable for the system safety, is a double-
edged sword ‚Äì they create side-channels in RTS. There has been an
increasing focus (e.g., [22, 23, 34, 53, 55, 56, 58, 63]) on studying and
demonstrating the existence of side-channels and covert-channels
(as consequences of the determinism) in RTS. In this paper, we are
particularly interested in the side-channels that leak system timing
behavior via task schedules. In the RTS domain, Chen et al. [14] first
introduced the scheduler side-channels using the ScheduLeak algo-
rithms. They extract execution behavior of critical real-time tasks
from an observed task schedule at run-time. Liu et al. [42] used the
same attack surface (i.e., the task schedule) and showed that precise
timing values of critical real-time tasks can be uncovered using
frequency spectrum analysis (e.g., Discrete Fourier Transform, DFT,
analysis) as shown in Figure 7. Such timing information, while
seemingly subtle, is a crucial stepping stone to launching many
attacks against RTS. Consequently, additional side-channels such as
power consumption traces [33], schedule preemptions [14, 53], elec-
tromagnetic (EM) emanations [3] and temperature [5] have been