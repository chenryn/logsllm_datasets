# Fingerprinting and Cracking Java Obfuscated Code
**Author:** Yiannis Pavlosoglou  
**Total Slides:** 36

## Brief Outline
1. **Background**
2. **Motivation**
3. **Methodology**
4. **Fingerprinting Tool**
5. **Examples**
6. **Conclusions**

### 1. Background
#### 1.1 Java Bytecode
- **Java Virtual Machine (JVM) Architecture:**
  - **Platform Independence:** JVM abstracts the underlying hardware, enabling Java to run on any system.
  - **Components:**
    - **Class Loader:** Loads and verifies bytecode.
    - **Execution Engine:** Executes bytecode.
    - **Native Method Calls:** Interfaces with the host operating system.
  - **Bytecode Execution:**
    - `MyProject.jar` → `MyProject.class` → Bytecode

#### 1.2 Language Security Mechanisms
- **Type, Memory, and Control Flow Checks:**
  - Instruction sets of the virtual machine [1]
  - Privilege escalation [2]
- **Exception Handling:**
  - Verification (format, type, other violations) [3]
- **Security Vulnerabilities:**
  - lsd-pl.net [4]

#### 1.3 HelloWorld in Bytecode
- **Compilation and Disassembly:**
  - `HelloWorld.java` → `javac` → `HelloWorld.class` → `javap` → `HelloWorld.bc`

#### 1.4 Bytecode to Source
- **Java's Platform Independence:**
  - Simplifies reverse engineering compared to C/C++.
- **Popular Java Decompilers:**
  - Tools like JD-GUI, CFR, and Procyon [5].
- **Obfuscators and Decompilers:**
  - Some obfuscators are designed to counteract decompilation [6].

#### 1.5 What Do Obfuscators Offer?
- **Operations:**
  - Less human-readable code
  - Removal of debug information
  - Alteration of control flow
  - Encryption of constants
  - Restructuring of simple logic
  - Injection of unnecessary code
- **Usability:**
  - Used in applications delivered to users
  - Common in J2SE Applets and installed applications
  - Not typically used in Java Enterprise Environments

### 2. Motivation
- **Basic Obfuscation Techniques:**
  - Renaming of objects and methods
  - Extending classes
  - Removing line numbers
  - Encoding string values
  - Variable splitting techniques
- **Reverse Engineering Particulars:**
  - Understanding the challenges and methods of reverse engineering.
- **Who is Using Obfuscators?**
  - Developers and organizations concerned with protecting their code.

### 3. Methodology
- **Approach to Fingerprinting and Cracking:**
  - Analyzing bytecode patterns
  - Identifying obfuscation techniques
  - Reverse engineering and deobfuscation

### 4. Fingerprinting Tool
- **Introduction to Elucidate:**
  - A tool for fingerprinting and cracking Java obfuscators.
- **Usage:**
  - `perl elucidate.pl -h`
  - `elucidate.pl [-options *]`
  - `-h`: Print usage message
  - `-v`: Verbose option
  - `-o`: Print supported obfuscators
  - `-t`: Test current Java environment
  - `-f file`: Specify class file to identify
  - `-j jar file`: Specify jar file to identify
  - `-d directory`: Specify directory to identify
- **Examples:**
  - `elucidate.pl -f MyClass.class`
  - `elucidate.pl -d MyJar.jar`
- **Target Deliverables:**
  - Identify the obfuscator used
  - Recover known strings within the file
  - Estimate the complexity
  - Provide a map of the application

### 5. Examples
- **Commercial Tools Examined:**
  - Zelix KlassMaster (4.5.0)
  - JShrink (2.3.7)
  - RetroGuard (2.2.0)

#### 5.1 Zelix KlassMaster 4.5.0
- **String Literals:**
  - Three levels: Normal, Aggressive, and Flow Obfuscate
  - Example:
    - `PasswordCheck.class` through `javap`:
      - `ldc #8; //String ,bw:)qiqv,=\\"`
      - `ldc #6; //String (km:N}?ps&,"`
      - `ldc #3; //String ,oa(-↓#wDecoded: Password Correct!`
  - **Tableswitch:**
    - `tableswitch { //0 to 3`
    - `0: 96; 1: 101; 2: 105; 3: 109; default: 114 }`
  - **Algorithm:**
    - The algorithm appears identical across all three levels, but keys change with each obfuscation attempt.

#### 5.2 JShrink 2.3.7
- **New Package Creation:**
  - Creates a new package with a single class.
  - Replaces string code with:
    - `bipush 62`
    - `invokestatic #48; //Method I/I.I:(I)Ljava/lang/String;`
    - `invokevirtual #7; //Method java/lang/String.equals:(Ljava/lang/Object;)Z`
  - Equivalent to: `( I.I.I( 79 ) );`
- **Contents of Package I:**
  - Includes a file called `I.gif`, which is not an image file.
  - Decryption method:
    - `public static synchronized final String I(int int1){ ... }`
  - **Encryption:**
    - Uses an invalid GIF file to store encrypted strings.
    - Decryption is performed by a separate class and method.
    - Strings are replaced with: `I.I(int)` e.g., `I.I(97)`.
    - Does not alter static and final strings.
    - Introduces exceptions for incorrect integer arguments.

#### 5.3 RetroGuard 2.2.0
- **String Encryption:**
  - Offers string encryption.
  - Quote from creators: "Obfuscation is not encryption."

### 6. Conclusions
- **Static Obfuscation:**
  - Currently at a primitive level.
  - Encrypted strings provide an entry point into understanding the application.
- **Identifying Cryptography:**
  - Yields the obfuscator tool used.
  - Helps in predicting changes in code snippets.
- **Proposed Improvements:**
  - Polymorphic obfuscation.
  - Developers should map out critical elements.
  - Obfuscator behavior should vary based on the file.
  - Different treatment for UI and protocol implementation.
  - Algorithms should vary according to key files.
- **Questions:**
  - How many ways can you write a `for/while` loop?

**Contact Information:**
- PI: EMAIL