Stuttard c03.indd V3 - 07/22/2011 Page 58
58 Chapter 3 n Web Application Technologies
common core of technologies. However, these have been built upon in various,
diverse ways, and the ways in which applications leverage client-side technol-
ogy has continued to evolve rapidly in recent years.
HTML
The core technology used to build web interfaces is hypertext markup language
(HTML). Like XML, HTML is a tag-based language that is used to describe the
structure of documents that are rendered within the browser. From its simple
beginnings as a means of providing basic formatting for text documents, HTML
has developed into a rich and powerful language that can be used to create
highly complex and functional user interfaces.
XHTML is a development of HTML that is based on XML and that has a stricter
specifi cation than older versions of HTML. Part of the motivation for XHTML
was the need to move toward a more rigid standard for HTML markup to avoid
the various compromises and security issues that can arise when browsers are
obligated to tolerate less-strict forms of HTML.
More details about HTML and related technologies appear in the following
sections.
Hyperlinks
A large amount of communication from client to server is driven by the user’s
clicking on hyperlinks. In web applications, hyperlinks frequently contain preset
request parameters. These are items of data that the user never enters; they are
submitted because the server places them into the target URL of the hyperlink
that the user clicks. For example, a web application might present a series of
links to news stories, each having the following form:
What’s happening?
When a user clicks this link, the browser makes the following request:
GET /news/8/?redir=/updates/update29.html HTTP/1.1
Host: mdsec.net
...
The server receives the redir parameter in the query string and uses its value
to determine what content should be presented to the user.
Forms
Although hyperlink-based navigation is responsible for a large amount of client-
to-server communications, most web applications need more fl exible ways
to gather input and receive actions from users. HTML forms are the usual
cc0033..iinndddd 5588 88//1199//22001111 1122::0033::4455 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 59
Chapter 3 n Web Application Technologies 59
mechanism for allowing users to enter arbitrary input via their browser. A
typical form is as follows:
username: 
password: 
When the user enters values into the form and clicks the Submit button, the
browser makes a request like the following:
POST /secure/login.php?app=quotations HTTP/1.1
Host: wahh-app.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 39
Cookie: SESS=GTnrpx2ss2tSWSnhXJGyG0LJ47MXRsjcFM6Bd
username=daf&password=foo&redir=/secure/home.php&submit=log+in
In this request, several points of interest refl ect how different aspects of the
request are used to control server-side processing:
n Because the HTML form tag contains an attribute specifying the POST
method, the browser uses this method to submit the form and places the
data from the form into the body of the request message.
n In addition to the two items of data that the user enters, the form contains
a hidden parameter (redir) and a submit parameter (submit). Both of
these are submitted in the request and may be used by the server-side
application to control its logic.
n The target URL for the form submission contains a preset parameter (app),
as in the hyperlink example shown previously. This parameter may be
used to control the server-side processing.
n The request contains a cookie parameter (SESS), which was issued to the
browser in an earlier response from the server. This parameter may be
used to control the server-side processing.
The preceding request contains a header specifying that the type of content in
the message body is x-www-form-urlencoded. This means that parameters are
represented in the message body as name/value pairs in the same way as they
are in the URL query string. The other content type you are likely to encoun-
ter when form data is submitted is multipart/form-data. An application can
request that browsers use multipart encoding by specifying this in an enctype
attribute in the form tag. With this form of encoding, the Content-Type header
in the request also specifi es a random string that is used as a separator for the
cc0033..iinndddd 5599 88//1199//22001111 1122::0033::4455 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 60
60 Chapter 3 n Web Application Technologies
parameters contained in the request body. For example, if the form specifi ed
multipart encoding, the resulting request would look like the following:
POST /secure/login.php?app=quotations HTTP/1.1
Host: wahh-app.com
Content-Type: multipart/form-data; boundary=------------7d71385d0a1a
Content-Length: 369
Cookie: SESS=GTnrpx2ss2tSWSnhXJGyG0LJ47MXRsjcFM6Bd
------------7d71385d0a1a
Content-Disposition: form-data; name=”username”
daf
------------7d71385d0a1a
Content-Disposition: form-data; name=”password”
foo
------------7d71385d0a1a
Content-Disposition: form-data; name=”redir”
/secure/home.php
------------7d71385d0a1a
Content-Disposition: form-data; name=”submit”
log in
------------7d71385d0a1a--
CSS
Cascading Style Sheets (CSS) is a language used to describe the presentation of a
document written in a markup language. Within web applications, it is used to
specify how HTML content should be rendered on-screen (and in other media,
such as the printed page).
Modern web standards aim to separate as much as possible the content of a
document from its presentation. This separation has numerous benefi ts, includ-
ing simpler and smaller HTML pages, easier updating of formatting across a
website, and improved accessibility.
CSS is based on formatting rules that can be defi ned with different levels
of specifi city. Where multiple rules match an individual document element,
different attributes defi ned in those rules can “cascade” through these rules so
that the appropriate combination of style attributes is applied to the element.
CSS syntax uses selectors to defi ne a class of markup elements to which
a given set of attributes should be applied. For example, the following
CSS rule defi nes the foreground color for headings that are marked up using
 tags:
h2 { color: red; }
cc0033..iinndddd 6600 88//1199//22001111 1122::0033::4455 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 61
Chapter 3 n Web Application Technologies 61
In the earliest days of web application security, CSS was largely overlooked
and was considered to have no security implications. Today, CSS is increasingly
relevant both as a source of security vulnerabilities in its own right and as a
means of delivering effective exploits for other categories of vulnerabilities (see
Chapters 12 and 13 for more information).
JavaScript
Hyperlinks and forms can be used to create a rich user interface that can easily
gather most kinds of input that web applications require. However, most appli-
cations employ a more distributed model, in which the client side is used not
simply to submit user data and actions but also to perform actual processing
of data. This is done for two primary reasons:
n It can improve the application’s performance, because certain tasks can
be carried out entirely on the client component, without needing to make
a round trip of request and response to the server.
n It can enhance usability, because parts of the user interface can be dynami-
cally updated in response to user actions, without needing to load an
entirely new HTML page delivered by the server.
JavaScript is a relatively simple but powerful programming language that
can be easily used to extend web interfaces in ways that are not possible using
HTML alone. It is commonly used to perform the following tasks:
n Validating user-entered data before it is submitted to the server to avoid
unnecessary requests if the data contains errors
n Dynamically modifying the user interface in response to user actions — for
example, to implement drop-down menus and other controls familiar
from non-web interfaces
n Querying and updating the document object model (DOM) within the
browser to control the browser’s behavior (the browser DOM is described
in a moment)
VBScript
VBScript is an alternative to JavaScript that is supported only in the Internet
Explorer browser. It is modeled on Visual Basic and allows interaction with
the browser DOM. But in general it is somewhat less powerful and developed
than JavaScript.
Due to its browser-specifi c nature, VBScript is scarcely used in today’s web
applications. Its main interest from a security perspective is as a means of
delivering exploits for vulnerabilities such as cross-site scripting in occasional
situations where an exploit using JavaScript is not feasible (see Chapter 12).
cc0033..iinndddd 6611 88//1199//22001111 1122::0033::4455 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 62
62 Chapter 3 n Web Application Technologies
Document Object Model
The Document Object Model (DOM) is an abstract representation of an HTML
document that can be queried and manipulated through its API.
The DOM allows client-side scripts to access individual HTML elements by
their id and to traverse the structure of elements programmatically. Data such
as the current URL and cookies can also be read and updated. The DOM also
includes an event model, allowing code to hook events such as form submission,
navigation via links, and keystrokes.
Manipulation of the browser DOM is a key technique used in Ajax-based
applications, as described in the following section.
Ajax
Ajax is a collection of programming techniques used on the client side to create
user interfaces that aim to mimic the smooth interaction and dynamic behavior
of traditional desktop applications.
The name originally was an acronym for “Asynchronous JavaScript and
XML,” although in today’s web Ajax requests need not be asynchronous and
need not employ XML.
The earliest web applications were based on complete pages. Each user action,
such as clicking a link or submitting a form, initiated a window-level navigation
event, causing a new page to be loaded from the server. This approach resulted
in a disjointed user experience, with noticeable delays while large responses
were received from the server and the whole page was rerendered.
With Ajax, some user actions are handled within client-side script code and
do not cause a full reload of the page. Instead, the script performs a request “in
the background” and typically receives a much smaller response that is used to
dynamically update only part of the user interface. For example, in an Ajax-based
shopping application, clicking an Add to Cart button may cause a background
request that updates the server-side record of the user’s shopping cart and a
lightweight response that updates the number of cart items showing on the
user’s screen. Virtually the entire existing page remains unmodifi ed within the
browser, providing a much faster and more satisfying experience for the user.
The core technology used in Ajax is XMLHttpRequest. After a certain consolida-
tion of standards, this is now a native JavaScript object that client-side scripts can
use to make “background” requests without requiring a window-level naviga-
tion event. Despite its name, XMLHttpRequest allows arbitrary content to be sent
in requests and received in responses. Although many Ajax applications do use
XML to format message data, an increasing number have opted to exchange data
using other methods of representation. (See the next section for one example.)
Note that although most Ajax applications do use asynchronous communica-
tions with the server, this is not essential. In some situations, it may actually make
cc0033..iinndddd 6622 88//1199//22001111 1122::0033::4455 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 63
Chapter 3 n Web Application Technologies 63
more sense to prevent user interaction with the application while a particular
action is carried out. In these situations, Ajax is still benefi cial in providing a
more seamless experience by avoiding the need to reload an entire page.
Historically, the use of Ajax has introduced some new types of vulnerabili-
ties into web applications. More broadly, it also increases the attack surface of
a typical application by introducing more potential targets for attack on both
the server and client side. Ajax techniques are also available for use by attack-
ers when they are devising more effective exploits for other vulnerabilities. See
Chapters 12 and 13 for more details.
JSON
JavaScript Object Notation (JSON) is a simple data transfer format that can
be used to serialize arbitrary data. It can be processed directly by JavaScript
interpreters. It is commonly employed in Ajax applications as an alternative to
the XML format originally used for data transmission. In a typical situation,
when a user performs an action, client-side JavaScript uses XMLHttpRequest to
communicate the action to the server. The server returns a lightweight response
containing data in JSON format. The client-side script then processes this data
and updates the user interface accordingly.
For example, an Ajax-based web mail application may contain a feature to
show the details of a selected contact. When a user clicks a contact, the browser
uses XMLHttpRequest to retrieve the details of the selected contact, which are
returned using JSON:
{
“name”: “Mike Kemp”,
“id”: “8041148671”,
“email”: “PI:EMAIL”
}
The client-side script uses the JavaScript interpreter to consume the JSON
response and updates the relevant part of the user interface based on its contents.
A further location where you may encounter JSON data in today’s applications
is as a means of encapsulating data within conventional request parameters. For
example, when the user updates the details of a contact, the new information
might be communicated to the server using the following request:
POST /contacts HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 89
Contact={“name”:”Mike Kemp”,”id”:”8041148671”,”email”:”pikey@
clappymonkey.com”}
&submit=update
cc0033..iinndddd 6633 88//1199//22001111 1122::0033::4455 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 64
64 Chapter 3 n Web Application Technologies
Same-Origin Policy
The same-origin policy is a key mechanism implemented within browsers that
is designed to keep content that came from different origins from interfering
with each other. Basically, content received from one website is allowed to read
and modify other content received from the same site but is not allowed to
access content received from other sites.
If the same-origin policy did not exist, and an unwitting user browsed to a
malicious website, script code running on that site could access the data and
functionality of any other website also visited by the user. This may enable the
malicious site to perform funds transfers from the user’s online bank, read his
or her web mail, or capture credit card details when the user shops online. For
this reason, browsers implement restrictions to allow this type of interaction
only with content that has been received from the same origin.
In practice, applying this concept to the details of different web features and
technologies leads to various complications and compromises. Here are some
key features of the same-origin policy that you need to be aware of:
n A page residing on one domain can cause an arbitrary request to be made
to another domain (for example, by submitting a form or loading an
image). But it cannot itself process the data returned from that request.
n A page residing on one domain can load a script from another domain and
execute this within its own context. This is because scripts are assumed
to contain code, rather than data, so cross-domain access should not lead
to disclosure of any sensitive information.
n A page residing on one domain cannot read or modify the cookies or
other DOM data belonging to another domain.
These features can lead to various cross-domain attacks, such as inducing
user actions and capturing data. Further complications arise with browser
extension technologies, which implement same-origin restrictions in different
ways. These issues are discussed in detail in Chapter 13.
HTML5
HTML5 is a major update to the HTML standard. HTML5 currently is still under
development and is only partially implemented within browsers.
From a security perspective, HTML5 is primarily of interest for the follow-
ing reasons:
n It introduces various new tags, attributes, and APIs that can be lever-
aged to deliver cross-site scripting and other attacks, as described in
Chapter 12.
cc0033..iinndddd 6644 88//1199//22001111 1122::0033::4455 PPMM
Stuttard c03.indd V3 - 07/22/2011 Page 65
Chapter 3 n Web Application Technologies 65
n It modifi es the core Ajax technology, XMLHttpRequest, to enable two-way
cross-domain interaction in certain situations. This can lead to new cross-
domain attacks, as described in Chapter 13.
n It introduces new mechanisms for client-side data storage, which can lead
to user privacy issues, and new categories of attack such as client-side SQL
injection, as described in Chapter 13.
“Web 2.0”
This buzzword has become fashionable in recent years as a rather loose and
nebulous name for a range of related trends in web applications, including the
following: