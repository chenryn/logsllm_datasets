# Data Management Mechanisms for Embedded System Gateways

**Authors:** Justin Ray and Philip Koopman  
**Institution:** Carnegie Mellon University, Pittsburgh, Pennsylvania, USA  
**Contact:** justinr2@cmu.edu, koopman@cmu.edu  
**DOI:** 978-1-4244-4421-2/09/$25.00 Â©2009 IEEE  
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021 at 09:57:51 UTC from IEEE Xplore. Restrictions apply.**

## Abstract

As traditional embedded systems are increasingly connected to the Internet for remote monitoring, high-level control, and integration, it is essential to protect each part of the interconnected system from faults and attacks that can propagate from the other side. One architectural approach is to add a gateway to the embedded system to receive Internet traffic and distribute data to the embedded system. However, there is no clear recipe for building such gateways. Since Internet routers commonly use queues to manage traffic, we examine the effectiveness of queues in the context of embedded system gateways. We perform a series of experiments to evaluate the performance of queue mechanisms and various queue management techniques. Our results show that queues can exhibit poor performance in real-time embedded system gateways due to issues with message latency and dropped messages. We then introduce the concept of a filter mechanism and demonstrate that a simple filter mechanism can outperform queue mechanisms when managing real-time, state-oriented data streams.

## 1. Introduction

Embedded systems, which traditionally operated in isolation or on closed networks, are now being connected to the Internet or other networked systems to increase functionality and consolidate operations. An embedded system gateway is the device that manages the flow of information between these two networks. For the system to be survivable, the gateway must control the flow of information in a way that meets the requirements of the system and does not adversely affect local traffic on the individual networks [6]. Because these networks have different timing properties, normal (non-faulty) timing of message arrival on the Internet side may cause the gateway to fail to meet real-time requirements on the embedded side. Standard security and survivability practices, while important, are not designed to protect against these types of faults. Gateways must be designed to provide isolation against timing variations and faults between the two networks to maintain the dependability of the interconnected systems. However, there is very little guidance in the literature on how to do this.

This paper presents an initial investigation into the mechanisms that can be used in a gateway for timing fault containment, which is a first step toward developing survivable gateways. A gateway is conceptually similar to routers used in Internet infrastructure. Since queues are commonly used to manage packet flows in Internet routers, we begin by using queues as data management mechanisms in gateways. We explore various design parameters for queues, including queue length and queue management policies. To evaluate the performance of data management mechanisms in the gateway, we developed a simulation framework that models the gateway and the timing characteristics of the two networks attached to it. Using this simulation, we are able to study and compare different mechanisms under repeatable conditions.

We use this framework to model the scenario of periodic state variable data being transmitted from a server on an enterprise network via a gateway to an embedded control system on an embedded network. We begin by exploring the design space of queuing mechanisms and evaluating the effectiveness with which queues with various parameters can mitigate timing differences. Based on our experimental results, we show that queue mechanisms do not perform well in this scenario because of the latency they introduce and because of dropped messages. Analysis of the queue mechanism yields an important insight: queue underflow is a significant source of delay because it results in lost bandwidth for messages delivered in the real-time network. Based on this analysis, we propose a filter mechanism to overcome the shortcomings of queue mechanisms.

The remainder of this paper is organized as follows: Section 2 expands on the concept of an embedded system gateway and describes the constraints under which these systems operate. Section 3 highlights previous work related to this paper. Section 4 describes queue mechanisms and their design parameters. Section 5 describes our experimental approach, and Section 6 presents the results of our evaluation of queue mechanisms. Section 7 offers insights into the shortcomings of queue mechanisms and how those shortcomings can be mitigated. Section 8 defines filter mechanisms, and Section 9 offers experimental results comparing filters and queues. Section 10 summarizes our contributions and outlines future directions for this research.

## 2. Background

A gateway is a system entity that manages the flow of information between two networks. Figure 1 shows an example of two networks interconnected by a gateway. To implement communication between two networks, there must be a device with interfaces on both networks to effect message passing between them. In addition to the physical interfaces, the gateway must also determine which messages are forwarded, if any translation or repackaging will take place, and when to send the messages based on the network schedules.

While all of the gateway logic could be included in a dual-homed device, it is also possible to allocate some of the decision-making behavior to individual nodes on the two networks. Therefore, the term "gateway" as we will use it in this paper refers to the abstract concept that includes not only a dual-homed device but also the logic governing gateway operation, regardless of where that logic is located.

Embedded system gateways go beyond traditional routers because they connect two different types of networks. Different networks can have different timing requirements due to the different methods they use for access control and error correction. For example, TCP/IP over Ethernet uses retransmission mechanisms to ensure reliable delivery, but packets have highly variable latency, which is unbounded in the worst case. A Controller Area Network (CAN) has bit-arbitrated message prioritization, so the latency of any message is affected by the schedule of all higher-priority messages [10]. FlexRay [2] and the Time-Triggered Protocol (TTP) [13] are time-division multiplex access (TDMA) networks that execute periodic schedules and make strict real-time guarantees for periodic schedules.

There are several scenarios where a gateway might be used, and the requirements for the gateway will likely differ in each scenario. A gateway in a real system might be responsible for several data flows, which could encompass more than one of these scenarios:

- **Enterprise-to-Embedded**: Data is sent to the gateway over enterprise networks (such as the Internet or a LAN). The gateway then sends this data out on a real-time embedded network. An example of this system is a supervisory control application that runs on a corporate LAN and connects via a gateway to a factory control network.
- **Embedded-to-Enterprise**: The gateway receives data from a real-time embedded network and then sends it to a server or personal computer over an enterprise network. This scenario might arise if an embedded system (such as a thermostat on a home automation network) reports its status to an Internet server.
- **Embedded-to-Embedded**: The gateway connects two embedded networks that are of a different type. The two networks could also be of the same type but configured to run at different speeds or with different schedules. For example, many automobiles have several embedded networks. These networks could be interconnected to implement new system features.

A data management mechanism is the part of the gateway that handles the transfer of data from the input interface to the output interface. When we refer to a mechanism in this paper, we are referring to these data management mechanisms. The mechanism determines the order in which messages are sent out and which messages (if any) are dropped. It also encompasses whatever storage is required for pending messages. A mechanism only handles messages of one type, such as messages related to one state variable. If there are multiple data streams in the gateway, each stream has its own data management mechanism.

At a high level, a gateway performs a task similar to that of Internet routers. These routers commonly use queue mechanisms to manage packet flows, so we begin our examination of data management mechanisms with queue mechanisms.