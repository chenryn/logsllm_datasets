it also controls the data entering or exiting the enclave, e.g.,
through SGX ECalls/OCalls to perform data sanitization.
Data owner. The data owner uploads sensitive data to use
in-enclave services and intends to keep her data secret during
the computation.
Code provider. The code provider (owner) can be the service
provider, and in this case, her target binary (the service code)
can be directly handed over to the bootstrap enclave for
compliance check. So, similar to the data owner, she can
also request a ﬂexible/portable remote attestation to verify the
bootstrap enclave before delivering her binary to the enclave
for a compliance check.
Key agreement procedure. Both parties, a service provider
(code provider) and a remote user (data owner), inspect and
agree on the implementation details of the bootstrap enclave.
The data owner and the code provider can both attest that the
bootstrap loader is correctly running on SGX platforms using
remote/local attestation. In particular, data owner and code
provider both generate a measurement of the bootstrap enclave,
which acts as the trust anchor of their agreement and is
required for veriﬁcation during SGX remote/local attestation.
After the two attestations are done and shared session keys
are negotiated by Difﬁe–Hellman key exchange, all messages
can be transferred through the two trusted channels. Since
the data owner already knows the measurement/hash of the
service code. The bootstrap enclave ﬁrst extracts and veriﬁes
the measurement/hash of the service code, and then sends the
measurement/hash to the data owner. After the data owner is
sure about the authenticity of the service code, she can begin
to feed data into the service.
3
DataCodeCode ProviderBootstrap EnclaveAttestation ServiceData OwnerB. Guidelines
To instantiate a DEFLECTION System on a real-world TEE
such as SGX, we expect the following requirements to be met
by the design:
Minimizing TCB and resource consumption. Today’s TEEs
operate under resource constraints. Particularly, SGX is char-
acterized by a limited Enclave Page Cache (EPC). To maintain
reasonable performance, we expect the software stack of the
DEFLECTION model to control its resource use.
Controlling portable code loading. The target binary is
dynamically loaded and inspected by the bootstrap enclave.
However, the binary may further sideload other code during
its runtime. So the target binary, itself loaded dynamically, is
executed on the enclave’s heap space. Preventing it from side-
loading requires a data execution prevention (DEP) scheme to
guarantee the W ⊕ X privilege.
Preventing malicious control ﬂows. Software stack should be
designed to prevent the code from escaping policy enforcement
by redirecting its control ﬂow or tampering with the bootstrap
enclave’s critical data structures. Particularly, previous work
shows that special instructions like ENCLU could form unique
gadgets for control ﬂow redirection [25], which therefore need
proper protection.
Minimizing performance impact. In all application scenar-
ios, the data owner and the code provider expect a quick
turnaround from code veriﬁcation. Also the target binary’s
performance should not be signiﬁcantly undermined by the
runtime compliance check.
C. Threat Model
• We do not trust the service code (target binary) and the
platform hosting the enclave. In CCaaS, the platform may
deliberately run vulnerable code to exﬁltrate sensitive data,
by exploiting known vulnerabilities during the computation.
• We assume that the code of the bootstrap enclave can be
inspected to verify its functionalities and correctness. Also we
consider the TEE hardware, its attestation protocol, and all
underlying cryptographic primitives to be trusted.
IV. DESIGN
In this section we present our design, which elevates the
SGX platform with the support for the DEFLECTION model.
This is done using an in-enclave software layer – the boot-
strap enclave running the code consumer and an out-enclave
auxiliary – the code generator.
A. Architecture Overview
Fig. 2: System overview
4
The code generator and the binary/proof it produces are all
considered untrusted. The code consumer in the TCB is with
two components: a dynamic-loader operating a rewriter for re-
locating the target binary, and a proof veriﬁer running a dis-
assembler for checking the correct instrumentation of security
annotations. These components are all made public and can
therefore be measured for a remote attestation (Section V-B).
They are designed to minimize their code size, by moving
most workload to the code producer.
We present
the workﬂow of DEFLECTION in Figure 3.
The target program (the service code) is ﬁrst instrumented
by the code producer, which runs a customized LLVM-based
compiler (step 1). Then the target binary with the proof are
delivered to the enclave. The code is ﬁrst parsed (step 2)
and then disassembled from the binary’s entry along with its
control ﬂow traces. After that, the proof with the assembly is
relocated and activated by the dynamic loader (step 3), further
inspected by the veriﬁer and if correct (step 4) before some
immediates being rewriten (step 5). Finally, after the bootstrap
transfers the execution to the target program, the service begins
and policies are checked at runtime.
B. Security Policies
Without exposing its code for veriﬁcation, the target binary
needs to be inspected for compliance with security policies by
the bootstrap enclave. These policies are meant to protect the
privacy of sensitive data, to prevent its unauthorized disclosure.
The current design supports following categories.
Enclave entry and exit control. DEFLECTION can mediate
the content imported to or exported from the enclave, through
the ECall and OCall interfaces, for the purposes of reducing
the attack surface and controlling information leaks. Another
objective here is to mitigate covert channel leaks through the
interface between the enclave and the OS, making the attempt
to covertly using users’ data to modulate events (e.g., system
call arguments, I/O trafﬁc statistics) hard to succeed.
• P0: Input constraint, output encryption and entropy control.
We restrict the ECall interfaces to just serving the purposes
of uploading data and code, which perform authentication,
decryption and optionally input sanitization (or a simple
length check). Also only some types of system calls are
allowed through OCalls. Particularly, all network communica-
tion through OCalls should be encrypted with proper session
keys (for the data owner or the code provider).
Memory leak control. Information leak can happen through
unauthorized write to the memory outside the enclave, which
should be prohibited through the code inspection.
• P1: Preventing explicit out-of-enclave memory stores. This
policy prevents the target binary from explicit memory writes.
It can be enforced by security annotations through mediation
on the destination addresses of memory store instructions
(such as MOV) to ensure that they are within the enclave
address range ELRANGE).
• P2: Preventing implicit out-enclave memory stores. Illicit
RSP register save/spill operations can also leak sensitive
Bootstrap EnclaveCode ProducerCode Generator(LLVM)Source ProgramSecurity PoliciesTarget binary with ProofCode(Target binary)+Proof(Security annotation,Indirect branch target)Loader and VerifierTrusted SGX-enabled PlatformUntrusted tRTS LibraryCode ConsumerFig. 3: Detailed framework and workﬂow
information to the out-enclave memory by pushing a register
value to the address speciﬁed by the stack pointer, which is
prohibited through inspecting the RSP content [38].
• P3: Preventing unauthorized change to security-critical data
within the bootstrap enclave. This policy ensures that the
security-critical data would never be tampered with by the
untrusted code.
• P4: Preventing runtime code modiﬁcation. Since the target
code is untrusted and loaded into the enclave during its
operation, under SGXv1, the code can only be relocated to
pages with RWX properties. DEP protection should, therefore,
be in place to prevent the target binary from changing itself
or uploading other code at runtime.
Control-ﬂow management. To ensure that security annota-
tions and other protection cannot be circumvented at runtime,
the control ﬂow of the target binary should not be manipulated.
For this purpose, the following policy should be enforced:
• P5: Preventing manipulation of indirect branches to violate
policies P1 to P4. This policy is to protect the integrity of the
target binary’s control ﬂow, so security annotations cannot be
bypassed. To this end, we need to mediate all indirect control
transfer instructions, including indirect calls and jumps, and
return instructions.
AEX based side/covert channel mitigation. In addition to
the covert channel through software interfaces like system
calls, we further studied the potential to mitigate the covert
channel threat through SGX hardware interfaces. It is well
known that SGX’s user-land TEE design exposes a large side-
channel surface, which cannot be easily eliminated. Examples
include the controlled side channel attack [30] that relies on
triggering page faults, and the attacks on L1/L2 caches [39],
which requires context switches to schedule between the attack
thread and the enclave thread, when Hyper-threading is turned
off or a co-location test is performed before running the bi-
nary [40]. Such protection can be integrated into DEFLECTION
to mitigate side- or covert-channel attacks in this category,
closing an important attack surface.
• P6: Controlling the AEX frequency. The policy requires
the total number of the AEX concurrences to keep below a
threshold during the whole computation. Once the AEX is
found to be too frequent, above the threshold, the execution
is terminated to prevent further information leak.
C. Policy-Compliant Code Generation
As mentioned earlier, the design of DEFLECTION is to move
the workload from in-enclave veriﬁcation to out-enclave gen-
eration of policy-compliant binary and its proof. In this section
we describe the design of the code generator, particularly how
it analyzes and instruments the target program so that security
policies (P1-P6, see Section IV-B) can be enforced during
the program’s runtime. Customized policies for purposes other
than privacy can also be translated into proof and be enforced
ﬂexibly, e.g., to verify code logic and its functionalities.
Enforcing P1. The code generator is built on top of the LLVM
compiler framework (Section V-A). When compiling the target
program (in C) into binary,
the code generator identiﬁes
(through the LLVM API MachineInstr::mayStore())
all memory storing operation instructions (e.g., MOV, Scale-
Index-Base (SIB) instructions) and further inserts annotation
code before each instruction to check its destination address
and ensure that it does not write outside the enclave at runtime.
The boundaries of the enclave address space can be obtained
during dynamic code loading, which is provided by the loader
(Section IV-D). The correct instrumentation of the annotation
is later veriﬁed by the code consumer inside the enclave.
Enforcing P2. The generator locates all
instructions that
explicitly modify the stack pointer (the RSP in x86 arch)
from the binary (e.g., a MOV changing its content) and inserts
annotations to check the validity of the stack pointer after
them. This protection, including the content of the annota-
tions and their placement, is veriﬁed by the code consumer
(Section IV-D). Note that RSP can also be changed implicitly,
e.g., through pushing oversized objects onto the stack. This
violation is prevented by the loader (Section IV-D), which adds
guard pages (pages without permission) around the stack.
Enforcing P3. Similar to the enforcement of P1 and P2, the
code generator inserts security annotations to prevent (both
explicit and implicit) memory write operations on security-
critical enclave data (e.g., SSA/TLS/TCS) once the untrusted
code is loaded and veriﬁed.
Enforcing P4. To prevent
the target binary from chang-
the code generator instru-
ing its own code at runtime,
ments all
its write operations (as identiﬁed by the APIs
readsWritesVirtualRegister() and mayStore())
with the annotations that disallow alternation of code pages.
Note that the code of the target binary has to be placed on
RWX pages by the loader under SGXv1 and its stack and heap
are assigned to RW pages, so runtime code modiﬁcation cannot
be stopped solely by page-level protection.
Enforcing P5. To control indirect calls or indirect jumps in
the target program, the code generator extracts all labels from
5
Policy-Compliant Code GenerationDynamic Code LoadingCompliance Verification1. Compiling and LinkingPolicies on Memory OperationsPolicies on CFIPolicies on Side/ Covert ChannelsAttested Bootstrap EnclaveTarget Binary with Proof“0101010101010101001010101001001011100....”Source Code...int main() {    ...}ELF headerHeader tableSection 12. Binary ParsingAssembly“... subq$8, (%r11) movq(%r10), %r11 cmpq%r11, (%rsp) jneexit_label ret ...”5. Imms RewritingELF headerHeader tableSegment 1...3. Relocation4. Policy Checking...“... subq$8, (%r11) movq(%r10), %r11 cmpq%r11, (%rsp) jneexit_label--------------------------- ret ...”its binary during compilation and instruments security annota-
tions before related instructions to ensure that only these labels
can serve as legitimate jump targets. The locations of these
labels should not allow instrumented security annotations to
be bypassed. Also to prevent the backward-edge control ﬂow
manipulation (through RET), the generator injects annotations
after entry into and before return from every function call to
operate on a shadow stack, which is allocated during code
loading. All the legitimate labels are also replaced by the
loader when relocating the target binary. Such annotations are
then inspected by the veriﬁer when disassembling the binary
to ensure that protection will not be circumvented by control-
ﬂow manipulation (Section IV-D).
Enforcing P6 with SSA inspection. We incorporated Hyper-
race [40] to enforce P6. When an exception or interrupt takes
place during enclave execution, an AEX is triggered by the
hardware to save the enclave context (such as general registers)
to the state saving area (SSA). This makes the occurrence of
the AEX visible [40], [41]. Speciﬁcally, the code generator
enforces the policy by instrumenting every basic block with
an annotation that sets a marker in the SSA and monitors
whether the marker is overwritten, which happens when the
enclave context in the area has been changed, indicating that an
AEX has occurred. The instrumented code inspects the marker
every q instructions within a basic block, which guarantees
that the consecutive AEX(s) triggered will be detected and
counted at least once. If an AEX is detected, a co-location
test via data race probability will be performed to check co-
location of the two threads. Through counting the number of
consecutive AEXes, the protected target binary can be aborted
if the counted number of AEXs exceeds a preset threshold. The
threshold, as a tradeoff of performance and security, can be
set by proﬁling the enclave program in benign environments
under reasonable workload. Meanwhile, we parameterized the
threshold to control the possibility of an attack is co-located.
We empirically evaluated the accuracy of the co-location
tests. As the primary goal of the co-location test is to raise
alarms when the two threads are not co-located, we deﬁne
a false positive α as a false alarm (i.e., the co-location test
fails) when the two threads are indeed scheduled on the same
physical core. We run the same co-location test code on four
different processors (i.e., i7-6700, E3-1280 v5, i7-7700HQ,
and i5-6200U). Accuracy values are estimated by conducting
25,600,000 unit tests and results are on the same order of
magnitude. We believe it is reasonable to select a desired α
value to approximate false positives in practice. More details
can be found at our previous work [40].
Code loading support. Loading the binary is a procedure that
links the binary to external libraries and relocates the code.
For a self-contained function (i.e., one does not use external
elements), compiling and sending the bytes of the assembled
code is enough. However, if the function wants to use external
elements but not supported inside an enclave (e.g., a system
call), a distributed code loading support mechanism is needed.
In our design, the loading procedure is divided into two parts,
6
one (linking) outside and the other (relocation) inside the
enclave. Our code generator assembles all the symbols of the
entire code (including necessary libraries and dependencies)
into one relocatable ﬁle via static linking. While linking all
object ﬁles generated by the LLVM, it keeps all symbols
and relocation information held in relocatable entries. The
relocatable ﬁle, as above-mentioned target binary, is expected
to be loaded for being relocated later (Section IV-D).
D. Conﬁguration, Loading and Veriﬁcation