(cid:19)
(cid:19)− inst(f )
(cid:18) α(f )
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
β
β
(cid:80)inst∈c
minst(c) ×(cid:80)|f|
β −
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) inc(f )
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
β −
(cid:80)|f|
(cid:18) α(f )
β
minc(c) =
1The term misuse detector is used with a slightly diﬀerent
meaning than the classic IDS terminology
Figure 1: Overall Approach
exploiting coarse network activity logs, the system ﬁrst ana-
lyzes machines’ behavior in order to detect potential anoma-
lies, by means of the Anomaly Detection component. In pres-
ence of anomalies in the network, a second layer of analysis
is activated to assess if a misuse is ongoing. For this pur-
pose, the Misuse Detector initially identiﬁes and records the
“normal behavior” of each monitored machine, in absence
of anomalies. Then, in order to detect anomalies it peri-
odically compares the current machine behavior with the
normal one. As soon as a machine or network misuse is
detected, the Reasoner is activated. The Reasoner uses the
information collected through the ﬁrst two layers augmented
with additional data, to perform reasoning.
2.1 The ReasONets Components
Anomaly Detector. The Anomaly Detector (AD) is de-
signed to be computationally light and extremely fast. Its
goal is to identify potential anomalies and trigger alerts in
presence of suspicious network traﬃc, rather than detect in-
cidents and intrusions. The AD implements a two-variate
model to check whether the reported suspicious traﬃc is
in fact representative of anomalies. Two type of anoma-
lies are detected: (1) single machines that open connection
toward unknown domains/machines, or toward known do-
mains/machines but using unusual protocols or port num-
bers; (2) subset of machines with same sequence of connec-
tions toward speciﬁc unknown domains/machines, not nec-
essarily in the same order. Here, as unknown domain/machine
we mean a web domain or machine external to the monitored
network, never visited/contacted before by any internal ma-
chine. In order to improve the eﬃciency of our AD, we ﬁlter
out ordinary traﬃc by training the model. New modules
may be added to address other anomalies or patterns, by
exploiting the modularity of our system.
We focus on these anomalies since malicious activities are
likely to exhibit some speciﬁc communication pattern that
is diﬀerent from the norm, e.g. misusing protocols, or us-
ing uncommon port number or destination addresses that
internal host have never used before [4]. We group the ma-
chines’ behavior in clusters, to account for situations wherein
a group of hosts is infected or compromised. With the ﬁrst
type of anomaly-based detection approach we address any
other case in which only one machine is involved, for exam-
ple attacks to an internal machine, or an internal machine
running forbidden software like torrent clients.
1011Where α(f ) represents the maximum value ever registered
for the feature f, and β is the maximum possible distance
between the measured values. Both are parameters used
for normalization. inc(f ) and inst(f ) represent respectively
the measured value of f for the current incident inc and
the instance inst ∈ c. Finally, minst(c) is the membership
degree of the instance inst for the case c.
2. Verify the presence of a dominant case. We select
the ﬁrst k Near Neighbor cases from the set of ordered cases
and check how cohesive the k-NN set is, in search of a clear
dominant case. If a dominant case is found, we model the
incident as an instance of it.
3. Apply fuzzy ranking. If no dominant case is found, we
compute an additional ranking for each case in the previous
k-NN set. The fuzzy ranking algorithm calculates minc(c)
as follows:
 |f|(cid:88)
rc×pc×
wc(f ) × Defuzzy [β − ||Fuzzy (inc(f )) − Fuzzy (c(f ))||]
This ranking algorithm assigns a diﬀerent weight wc(f ) to
each speciﬁc feature. A risk parameter rc and a likelihood
parameter pc, are also taken into account to classify the
incident with a greater accuracy.
Fuzziﬁcation and defuzziﬁcation steps of the measured fea-
tures - represented in the equation by mean of F uzzy and
Def uzzy functions - are employed in accordance with the
Fuzzy Theory [5].
4. Create a new case. If after step 3, it is still not possi-
ble to ﬁnd a dominant case, we classify the incident as new
case by starting the case proﬁling process and storing it.
5. Merge cases. The model is periodically optimized: if
several incidents with same features are mapped on the same
subset of cases, we merge them in a single case.
2.2 Architectural Deployment
ReasONets is deployed on two machines: the Network Log-
ger, in charge of intercepting all the traﬃc generated within
the network, logging the network activity; and the Engine,
in charge of performing analysis and reasoning, basing on
collected data. Since single devices can change IP addresses
frequently, a mapping of the IP address back to MAC ad-
dresses or Device ID is performed through DHCP logs.
Inputs to the system are represented by data obtained
from monitoring devices connected to the network, whereas
outputs are detailed indications about the suspected nature
of incidents, their severity, and the conﬁdence associated
with these assessments. Feedback and possible actions to
complete in order to address the incident are also provided
to the network administrator, as shown by the admin’s con-
trol panel presented in Figure 2.
We have conducted a preliminary study of scalability for
the presented solution. We have used, as Engine and as
Network Logger, two machines equipped with an Intel(R)
Core(TM) i7-2720QM CPU @ 2.20Ghz and 4 GB of RAM.
They were running Windows 7 Ultimate OS (32 bit). Sev-
enty clients (both laptops and mobile devices) were con-
nected to the system. A script generating random net-
work traﬃc was running on each client during the evalu-
ation. This allowed to simulate a high network rate activity.
Clients had a mean log rate of 10,000 lines per minute. The
Engine had an incident rate up to 50 incidents per minute.
Our ﬁndings suggest that the Engine is able to handle a
network of 35 devices, on high rate activity, without any
performance degeneration or delay.
Figure 2: ReasONets Graphical User Interface
However, an increase of the number of devices monitored,
from 35 to 50 causes a delay of roughly 1 minute (mean val-
ues) on data processing by the Engine. The results show
a similar behavior for the Network Logger, which has a
slightly higher capacity, being able to handle up to 70 ma-
chines without recording any performance degeneration. We
believe that by using server machines, with more compu-
tational power, we will be able to handle a network with
at least 100 devices. In large deployments, hardware-based
appliances or load balancing approaches to scale to larger
networks may be needed.
3. CONCLUSION
We presented ReasONets, a network monitoring system
developed as part of an HP-funded research project bridg-
ing situational awareness with incident detection systems.
The demo will demonstrate the behavior of our prototype
in absence of incident ﬁrst, and after in presence of incidents,
both known and unknown.
Acknowledgment: This work was partly supported by
Hewlett-Packard Innovation Award 2011, “Analytics for Sit-
uational Awareness”.
4. REFERENCES
[1] J. M. Est´evez-Tapiador, P. Garcia-Teodoro, and J. E.
D´ıaz-Verdejo. Measuring normality in http traﬃc for
anomaly-based intrusion detection. Computer Networks,
45(2):175–193, 2004.
[2] R. Guha, O. Kachirski, D. Schwartz, S. Stoecklin, and
Y. Yilmaz. Case-based agents for packet-level intrusion
detection in ad hoc networks. In Proceedings of the 17th
International Symposium on Computer and Information
Sciences, pages 315 – 320. CRC Press, October 2002.
[3] D. B. Leake. Case-based reasoning. The Knowledge Engineering
Review, 9(01):61–64, 1994.
[4] R. Perdisci, W. Lee, and N. Feamster. Behavioral clustering of
http-based malware and signature generation using malicious
network traces. In NSDI, pages 391–404, 2010.
[5] T. J. Ross. Fuzzy Logic, pages i–xxi. John Wiley Sons, Ltd,
2010.
[6] M. West-Brown, D. Stikvoort, K.-P. Kossakowski, G. Killcrece,
R. Rueﬂe, and M. Zajicek. Handbook for computer security
incident response teams (csirts). Technical Report
CMU/SEI-2003-HB-002, 2003.
1012