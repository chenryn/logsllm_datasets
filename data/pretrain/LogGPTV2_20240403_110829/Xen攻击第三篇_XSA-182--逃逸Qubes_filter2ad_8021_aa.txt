# Xen攻击第三篇:XSA-182--逃逸Qubes
|
##### 译文声明
本文是翻译文章，文章来源：Au2o3t@360云安全团队
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
原链: [http://blog.quarkslab.com/xen-exploitation-part-3-xsa-182-qubes-escape.html](http://blog.quarkslab.com/xen-exploitation-part-3-xsa-182-qubes-escape.html)
作者: Jeremie Boutoille、Gabriel Campana
译者: Au2o3t@360云安全团队
审校: Terence@360云安全团队
其它两篇译文见:
[http://bobao.360.cn/learning/detail/2932.html](http://bobao.360.cn/learning/detail/2932.html)
[http://bobao.360.cn/learning/detail/2931.html](http://bobao.360.cn/learning/detail/2931.html)
**Xen作现代虚拟化平台的一个重要代表,它的安全性值得全世界黑客的关注。这是Xen攻击系列关于Xen安全的最后一篇[1][2]。本文讲述通过我们自己发现的漏洞(XSA-182)[0](CVE-2016-6258)转而在
Qubes 系统项目中实现攻击利用。**
我们会先阐述发现漏洞的方法,再来探讨 Qubes 系统上的利用。需要强调说明的是,该漏洞并不在 Qubes 系统代码中,但由于 Qubes
系统依赖Xen,因此受此漏洞影响。
详细内容见 Qubes 的安全公告 #24 [8]。
截图显示的是新装的 Qubes 系统。终端在攻击者获得访问的不可信虚拟机中运行。利用漏洞,其可以完全控制 dom0。由此便能用 shell 脚本在 dom0
执行任意命令(如图中灰色边框和标题的计算器),从而访问其它虚拟机。
**  
**
**漏洞发现**
写完 XSA-148[2] 的利用,我们对半虚拟化客户机的内存管理内幕感到好奇。由于 PV 客户机内核运行在3环,任何特权操作必须通过超级调用实现。Xen
必须模拟一些机制来保护运行在3环的内核。对于半虚拟化来说,从3环跳到0环也就意味着虚拟机逃逸。
**  
**
**GDT** **的例子**
举个有趣的例子:全局描述符表(GDT)。GDT
包含内存段的信息,也包含调用门,陷阱门,任务切换段(TSS)和任务门。这些机制允许特权转换。某些机制是很复杂的,应严格验证任何对 GDT 的更新。作为
GDT 条目传给 alloc_segdesc_page 函数的每一页由 check_descriptor 函数作检查。这个不太长的函数没一句是多余的:
    /* Returns TRUE if given descriptor is valid for GDT or LDT. */
    int check_descriptor(const struct domain *dom, struct desc_struct *d)
    {
        u32 a = d->a, b = d->b;
        u16 cs;
        unsigned int dpl;
        /* A not-present descriptor will always fault, so is safe. */
        if ( !(b & _SEGMENT_P) )
            goto good;
        /* Check and fix up the DPL. */
        dpl = (b >> 13) & 3;
        __fixup_guest_selector(dom, dpl);
        b = (b & ~_SEGMENT_DPL) | (dpl > 16;
        if ( !guest_gate_selector_okay(dom, cs) )
            goto bad;
        /*
         * Force DPL to zero, causing a GP fault with its error code indicating
         * the gate in use, allowing emulation. This is necessary because with
         * native guests (kernel in ring 3) call gates cannot be used directly
         * to transition from user to kernel mode (and whether a gate is used
         * to enter the kernel can only be determined when the gate is being
         * used), and with compat guests call gates cannot be used at all as
         * there are only 64-bit ones.
         * Store the original DPL in the selector's RPL field.
         */
        b &= ~_SEGMENT_DPL;
        cs = (cs & ~3) | dpl;
        a = (a & 0xffffU) | (cs a = a;
        d->b = b;
        return 1;
     bad:
        return 0;
    }
仔细看看这段令人抓狂的代码,Intel 文档是唯一能让你了解每一位含义的帮手。热心读者会发现代码中的注释:调用门通过强制设置 DPL
描述符为0,导致一般保护错误来仿真。相信我,调用门的代码仿真是个噩梦(好奇的读者参见函数 emulate_gate_op)。
既然我们没发现 GDT 管理的漏洞,那么接下来就再看看页表管理吧。
**  
**
**页表管理**
首先,我们模糊测试 HYPERVISOR_mmu_update
这个超级调用。我们的想法是生成一个随机页表条目并更新,若能成功的话,检查新映射是否危险。我们需要定义一个危险映射的列表,如:
·一个L1条目以 USER 和 RW 标志映射另一个 Lx 表,
·一个 L2/L3/L4 条目以 PSE,USER和 RW 标志映射另一个Lx表,
·一个 Ly 条目以 USER和 RW 标志映射另一个 Lx 表,且 x != y-1。
模糊测试前,我们先手动检查是否可以建立这样的映射。最后一种情况很有趣,且必须解释一下。让我们想象一个 L4 条目以 RW
标志映射它自身。使用特定的虚拟地址,L4 变为可写,Xen “不变性”被绕过。这样建立的映射能通过 Xen 的安全检查:
    #define define_get_linear_pagetable(level)                                  
    static int                                                                  
    get_##level##_linear_pagetable(                                             
        level##_pgentry_t pde, unsigned long pde_pfn, struct domain *d)         
    {                                                                           
        unsigned long x, y;                                                     
        struct page_info *page;                                                 
        unsigned long pfn;                                                      
        if ( (level##e_get_flags(pde) & _PAGE_RW) )                             
        {                                                                       
            MEM_LOG("Attempt to create linear p.t. with write perms");          
            return 0;                                                           
        }                                                                       
        if ( (pfn = level##e_get_pfn(pde)) != pde_pfn )                         
        {                                                                       
            /* Make sure the mapped frame belongs to the correct domain. */     
            if ( unlikely(!get_page_from_pagenr(pfn, d)) )                      
                return 0;                                                       
            /*                                                                  
             * Ensure that the mapped frame is an already-validated page table. 
             * If so, atomically increment the count (checking for overflow).   
             */                                                                 
            page = mfn_to_page(pfn);                                            
            y = page->u.inuse.type_info;                                        
            do {                                                                
                x = y;                                                          
                if ( unlikely((x & PGT_count_mask) == PGT_count_mask) ||        
                     unlikely((x & (PGT_type_mask|PGT_validated)) !=            
                              (PGT_##level##_page_table|PGT_validated)) )       
                {                                                               
                    put_page(page);                                             
                    return 0;                                                   
                }                                                               
            }                                                                   
            while ( (y = cmpxchg(&page->u.inuse.type_info, x, x + 1)) != x );   
        }                                                                       
        return 1;                                                               
    }
上面代码定义了用于创建检查给定等级页表自映射条目的函数的宏。若 RW 位为1的条目被直接创建,管理程序会返回错误。但
XSA-148[2]中有设置安全标志的快速路径。这样更新的条目因被认为是安全的,不会检查“不变性”。 _PAGE_REW