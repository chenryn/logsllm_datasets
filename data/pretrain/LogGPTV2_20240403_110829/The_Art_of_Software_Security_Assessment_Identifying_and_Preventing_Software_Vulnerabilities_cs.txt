Another classic example of a file descriptor leak vulnerability is OpenBSD 2.3's chpass 
program, which had a local root vulnerability discovered by Oliver Friedrichs from NAI 
(archived at http://seclists.org/bugtraq/1998/Aug/0071.html). chpass is a setuid 
root application that allows nonprivileged users to edit information about their 
accounts. 
In OpenBSD, user account information is stored in a database file in /etc/pwd.db. It 
can be read by everyone and contains public information about user accounts. 
Sensitive information, such as password hashes, is stored in the root-owned, mode 
0600 database /etc/spwd.db. The system administrator works with these databases 
by editing the text file /etc/master.passwd, which resembles the shadow password file 
in other UNIX systems. After an administrator edits this file, administrative tools can 
use the pwd_mkdb program behind the scenes to propagate the master.passwd file's 
contents into the pwd.db and spwd.db password databases and to a /etc/passwd file in 
a compatible format for general UNIX applications to use. Chpass is one of these 
administration tools: It lets users edit their account information, and then it uses 
pwd_mkdb to propagate the changes. 
Chpass first creates a writeable, unique file in /etc called /etc/ptmp. When chpass is 
almost finished, it fills /etc/ptmp with the contents of the current master.passwd file, 
making any changes it wants. Chpass then has pwd_mkdb turn /etc/ptmp in the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
601 
master.passwd file and propagates its information to the system password databases. 
The /etc/ptmp file also serves as a lock file because while it's present on the file 
system, no other programs will attempt to manipulate the password database. The 
following code (slightly edited) is taken from the vulnerable version of chpass: 
tfd = pw_lock(0); 
if (tfd  
#include  
int main(int argc, char **argv) 
{ 
    int i; 
    for (i=0; ip_fd, i); 
             /* 
              * Ensure that stdin, stdout, and stderr are 
              * already allocated. You do not want 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
606 
              * userland to accidentally allocate 
              * descriptors in this range, which has 
              * implied meaning to libc. 
              * 
              * XXX - Shouldn't the exec fail if you can't 
              *       allocate resources here? 
              */ 
             if (fp == NULL) { 
                     short flags = FREAD | 
                         (i == 0 ? 0 : FWRITE); 
                     struct vnode *vp; 
                     int indx; 
                     if ((error = falloc(p, &fp, &indx)) != 0) 
                             break; 
                     if ((error = cdevvp( 
                         getnulldev(), &vp)) != 0) { 
                             fdremove(p->p_fd, indx); 
                             closef(fp, p); 
                             break; 
                     } 
                     if ((error = VOP_OPEN(vp, flags, 
                         p->p_ucred, p)) != 0) { 
                             fdremove(p->p_fd, indx); 
                             closef(fp, p); 
                             vrele(vp); 
                             break; 
                   } 
                   ... 
            } 
     } 
This code goes through file descriptors 0, 1, and 2 in a new setuid or setgid process to 
ensure that all the standard file descriptors are allocated. If they aren't present and 
fd_getfile() returns NULL, the rest of the code opens the null device for each 
unallocated file descriptor. The null device is a special device that discards everything 
it reads; it's typically accessed in userland via the device driver /dev/null. This code 
seems to do the trick for setuid and setgid applications, as any unallocated file 
descriptor in position 0, 1, or 2 is allocated with a reference to the /dev/null file. 
The problem with this code is that if any of the three file operations fail, the code 
breaks out of the loop and continues running the new program. The developers were 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
607 
aware of this potential problem, as evidenced by the comment about exec() failing. 
The bug ended up being locally exploitable to gain root access. The described attack 
is this: If attackers fill up the kernel's global file descriptor table by opening many 
pipes, they can cause the falloc() call (bolded) in the code to fail. The for loop is 
broken out of, and a setuid program can be spawned with a low-numbered file 
descriptor closed. The author, FozZy, was able to exploit the /usr/bin/skeyaudit 
program by running it so that file descriptor 2 was unallocated. skeyaudit opened 
/etc/skeykeys as file descriptor 2, and then proceeded to write attacker-controllable 
error messages in the file and consequently allowing attackers to gain root access. 
Georgi Guninski found a similar problem in FreeBSD's code to prevent this issue. The 
code was basically the same as the previous example, except in certain conditions, 
the kernel system call closed a file descriptor later in the processing. Guninski was 
able to open a file as file descriptor 2 that the kernel would later close if the file that 
the descriptor references is /proc/curproc/mem. By running /usr/bin/keyinit with this 
file assigned to descriptor 2, he was able to get a string of his choosing inserted into 
/etc/skeykeys, which equated to a root compromise. This vulnerability is documented 
at www.ciac.org/ciac/bulletins/m-072.shtml. 
From an auditing perspective, you should consider this vulnerability for 
cross-platform UNIX applications. Arguably, the OS should handle it in the kernel or 
standard libraries, but a case could definitely be made for cross-platform programs 
needing a more defensive approach. OpenBSD, FreeBSD, NetBSD, and Linux have 
patched this issue in recent versions, but the status of older versions of these OSs and 
commercial UNIX versions is less certain. 
Environment Arrays 
A process maintains a set of data known as its environment or environment variables, 
which is a collection of configuration strings that programs reference to determine 
how a user wants certain actions to be performed. A process's environment is usually 
maintained by the standard library, but the UNIX kernel provides special mechanisms 
for transferring a process environment across the execve() system call. 
The environment is represented in memory as an array of pointers to C strings. The 
last element in this array is a NULL pointer that terminates the list. The array is 
pointed to by the global libc variable environ. Each pointer in the environment array 
is a pointer to a separate NULL-terminated C string, which is called an environment 
variable. Figure 10-3 shows a process environment in a program running on a UNIX 
system. 
Figure 10-3. Environment of a process 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
608 
When a process calls execve() to run a new program, it provides a pointer to the new 
program's environment using the envp parameter. If a process passes a pointer to its 
own array of environment strings, the UNIX kernel takes responsibility for 
transferring that environment over to the new process image. Environment variables 
are transferred to the new process in a particular way by the execve() system call. A 
UNIX kernel goes through the provided environment array and copies each 
environment string to the new process in a tightly packed format. Then it builds a 
corresponding array of pointers to these strings by walking through the adjacent 
strings it placed together. Figure 10-4 shows what the process environment depicted 
in Figure 10-3 might look like after an execve(). Notice how all the environment 
variables are adjacent in memory, and they are placed in order of their appearance in 
the original environment. Don't pay too much attention to the addresses. On a real 
UNIX system, the environment strings would likely be next to the program argument 
strings, at the top of the program stack. 
Figure 10-4. Process environment immediately after an execve() 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
609 
After the kernel has finished setting up the process, it's up to the standard system 
libraries to manage the environment. These libraries maintain a global variable called 
environ that always points to the array of strings composing the process's 
environment. The first piece of runtime glue code that's called when a new program 
runs immediately sets environ to point to the array of environment variables set up by 
the kernel at the top of the stack. 
As a process runs, it can add, modify, and delete its environment variables. When 
additions are made, the environment manipulation functions (described momentarily) 
are responsible for finding new memory to store the environment list and the strings 
when required. They do so by using memory from the heap, allocated with malloc() 
and resized with realloc(). 
Different UNIX implementations have different semantics for handling the 
environment. In general, processes use five main functions to manipulate their 
environment: getenv(), used to retrieve environment variables; setenv(), used to set 
environment variables; putenv(), a different interface for setting environment 
variables; unsetenv(), used for deleting an environment variable; and clearenv(), 