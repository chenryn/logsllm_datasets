mov     [esi+4], eax 
.text:64404C2D       
mov      eax, [edi+8] 
.text:64404C30       
mov     [esi+8], eax 
.text:64404C33       
lea      eax, [edi+0Ch] 
.text:64404C36       
push     eax 
.text:64404C37       
lea      ecx, [esi+0Ch] 
; demangled name:  ATL::CStringT::operator=(class ATL::CStringT ... &) 
.text:64404C3A       
call     ds:mfc90_817 
.text:64404C40       
mov      eax, [edi+10h] 
.text:64404C43       
mov      [esi+10h], eax 
.text:64404C46       
mov      al, [edi+14h] 
.text:64404C49       
mov      [esi+14h], al 
.text:64404C4C       
mov      al, [edi+15h] ; copy byte from 0x15 offset 
.text:64404C4F       
mov      [esi+15h], al ; to 0x15 offset in CDwsGui object 
上述函数的调用方函数是 CDwsGui::CopyOptions。这些名字都是参照调试信息命名的。 
但是在整理程序流程之后，我们会发现在“时间上”第一次调用上述函数的调用方函数是 CDWsGui::Init()： 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 80 章  SAP 
791 
.text:6440B0BF loc_6440B0BF: 
.text:6440B0BF      
mov      eax, [ebp+arg_0] 
.text:6440B0C2      
push     [ebp+arg_4] 
.text:6440B0C5      
mov      [esi+2844h], eax 
.text:6440B0CB      
lea      eax, [esi+28h] ; ESI is pointer to CDwsGui object 
.text:6440B0CE      
push     eax 
.text:6440B0CF      
call     CDwsGui__CopyOptions 
综合上述分析可知：由 load_command_line()函数填充的数组，是 CDwsGui class（类）的一部分。这
个数组的地址是 this+0x28。0x15+0x28＝0x3D。这应该就是数据被传递的终点站。 
接下来，我们在程序里查找“使用偏移量 0x3D 的指令”。我们发现 CDwsGui::SapguiRun 函数（根据
调试信息进行命名）就使用了这个偏移量： 
.text:64409D58   
cmp      [esi+3Dh], bl  
; ESI is pointer to CDwsGui object 
.text:64409D5B   
lea      ecx, [esi+2B8h] 
.text:64409D61   
setz     al 
.text:64409D64   
push     eax  
; arg_10 of CConnectionContext::  
     CreateNetwork 
.text:64409D65   
push     dword ptr [esi+64h] 
; demangled name: const char* ATL::CSimpleStringT::operator PCXSTR 
.text:64409D68   
call     ds:mfc90_910 
.text:64409D68   
; no arguments 
.text:64409D6E   
push     eax 
.text:64409D6F   
lea     ecx, [esi+2BCh] 
; demangled name: const char* ATL::CSimpleStringT::operator PCXSTR 
.text:64409D75   
call   
   ds:mfc90_910 
.text:64409D75   
; no arguments 
.text:64409D7B   
push     eax 
.text:64409D7C   
push     esi 
.text:64409D7D   
lea     ecx, [esi+8] 
.text:64409D80   
call     CConnectionContext__CreateNetwork 
而后，验证我们的推测：把“setz al”换为“xor eax, eax / nop”指令，清除环境变量 TDW_NOCOMPRESS，
然后再次运行 SAPGUI。此后，令人不快的提示窗口果然不见了，而且 Wireshark 显示网络包不再压缩了！
显然，这种修改可以对 CConnectionContext 对象的压缩标识进行直接操作。 
可见，压缩标识传递到了 CConnectionContext::CreateNetwork 的第五个参数。不过这个构造函数还调
用了其他函数： 
... 
.text:64403476   
push     [ebp+compression] 
.text:64403479   
push     [ebp+arg_C] 
.text:6440347C   
push     [ebp+arg_8] 
.text:6440347F   
push     [ebp+arg_4] 
.text:64403482   
push     [ebp+arg_0] 
.text:64403485   
call     CNetwork__CNetwork 
压缩标识接着被传递到构造函数 CNetwork::CNetwork 的第五个参数。根据这个参数，构造函数
CNetwork 在对象体 CNetwork 设置标识、并设置另一个与压缩传输可能有关的变量。这个构造函数的有关
操作如下： 
.text:64411DF1   
cmp     [ebp+compression], esi 
.text:64411DF7   
jz      short set_EAX_to_0 
.text:64411DF9   
mov      al, [ebx+78h]    ; another value may affect compression? 
.text:64411DFC   
cmp      al, '3' 
.text:64411DFE   
jz      short set_EAX_to_1 
.text:64411E00   
cmp      al, '4' 
.text:64411E02   
jnz      short set_EAX_to_0 
.text:64411E04 
.text:64411E04 set_EAX_to_1: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
792 
逆向工程权威指南（下册） 
.text:64411E04   
xor      eax, eax 
.text:64411E06   
inc      eax  
    ; EAX -> 1 
.text:64411E07   
jmp      short loc_64411E0B 
.text:64411E09 
.text:64411E09 set_EAX_to_0: 
.text:64411E09 
.text:64411E09   
xor      eax, eax          ; EAX -> 0 
.text:64411E0B 
.text:64411E0B loc_64411E0B: 
.text:64411E0B   
mov      [ebx+3A4h], eax ; EBX is pointer to CNetwork object 
综上，我们可以确定 CNetwork class 存储压缩标识的相对地址是 this+0x3A4。 
然后我们以 0x3A4 为着手点，继续分析 SAPguilib.dll。这个偏移量再次出现在 CDwsGui::OnClientMessageWrite
里。当然，笔者还是通过调试信息才能确定构造函数的准确名称： 
.text:64406F76 loc_64406F76: 
.text:64406F76     
mov     ecx, [ebp+7728h+var_7794] 
.text:64406F79     
cmp     dword ptr [ecx+3A4h], 1 
.text:64406F80     
jnz     compression_flag_is_zero 
.text:64406F86     
mov     byte ptr [ebx+7], 1 
.text:64406F8A     
mov     eax, [esi+18h] 
.text:64406F8D     
mov     ecx, eax 
.text:64406F8F     
test    eax, eax 
.text:64406F91     
ja      short loc_64406FFF 
.text:64406F93     
mov     ecx, [esi+14h] 
.text:64406F96     
mov     eax, [esi+20h] 
.text:64406F99 
.text:64406F99 loc_64406F99: 
.text:64406F99     
push    dword ptr [edi+2868h] ; int 
.text:64406F9F     
lea     edx, [ebp+7728h+var_77A4] 
.text:64406FA2     
push    edx                ; int 
.text:64406FA3     
push    30000              ; int 
.text:64406FA8     
lea     edx, [ebp+7728h+Dst] 
.text:64406FAB     
push    edx                ; Dst 
.text:64406FAC     
push    ecx                ; int 
.text:64406FAD     
push    eax                ; Src 
.text:64406FAE     
push    dword ptr [edi+28C0h] ; int 
.text:64406FB4     
call    sub_644055C5         ; actual compression routine 
.text:64406FB9     
add     esp, 1Ch 
.text:64406FBC     
cmp     eax, 0FFFFFFF6h 
.text:64406FBF     
jz      short loc_64407004 
.text:64406FC1     
cmp     eax, 1 
.text:64406FC4     
jz       loc_6440708C 
.text:64406FCA     
cmp     eax, 2 
.text:64406FCD     
jz      short loc_64407004 
.text:64406FCF     
push    eax 
.text:64406FD0     
push    offset aCompressionErr ; "compression error [rc = \%d]- program wi" ... 
.text:64406FD5     
push    offset aGui_err_compre ; "GUI_ERR_COMPRESS" 
.text:64406FDA     
push    dword ptr [edi+28D0h] 
.text:64406FE0     
call    SapPcTxtRead 
由此可见，压缩网络数据的关键函数是 sub_644055C5。这个函数分别调用了 memcpy()函数，以及函
数 sub_64417440（IDA 显示的函数名）。而 sub_64417440 的指令是： 
.text:6441747C     
push    offset aErrorCsrcompre ; "\nERROR: CsRCompress: invalid  handle" 
.text:64417481     
call    eax ; dword_644F94C8 
.text:64417483     
add     esp, 4 
到此为止，我们完整地分析了压缩网络数据包的函数。参照笔者先前的分析
①
① http://conus.info/utils/SAP_pkt_decompr.txt。 
可知，这个网络包压缩
函数是SAP和开源项目MaxDB的公用函数（上述两个产品都是SAP开发的）。因此，实际上我们可以找到它
的源代码。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 80 章  SAP 
793 
最后要分析的是： 
.text:64406F79     
cmp     dword ptr [ecx+3A4h], 1 
.text:64406F80     
jnz     compression_flag_is_zero 
把此处的 JNZ 替换为无条件转移指令 JMP，删除环境变量 TDW_NOCOMPRESS。瞧！再用 WireShark
分析网络数据包时，我们就会发现 SAPGUI 不再压缩网络数据了。 
综上，在找到环境变量与数据压缩功能的切合点之后，我们可以强行启用这个功能，也可以强制程序
关闭这项功能。 
80.2  SAP 6.0 的密码验证函数 
某天，在 VMware 平台上打开 SAP 6.0 IDES 时，笔者发现自己忘记 SAP 账户名了。几经周折找到了
账户名之后，我尝试着用常用密码进行登录。结果可想而知，笔者最终遇到了提示信息“Password logon no 
longer possible-too many failed attempts”，再也无法登录。 
好消息是 SAP 官方提供了完整的 disp+work.pdb 文件。这个 PDB 文件涵盖的信息还十分全面：函数名、
结构体、类型、局部变量及参数名等等，简直是应有尽有。 
为了便于挖掘信息，笔者使用TYPEINFODUMP程序
①
① http://www.debuginfo.com/tools/typeinfodump.html。 
，把PDB文件转换为了人类可读的文本文件。 
转换后的文本文件含有函数名称、函数参数、局部变量等信息： 
FUNCTION ThVmcSysEvent 
  Address:   
    10143190 Size:  
   675 bytes   Index:     60483  TypeIndex:     60484 
  Type: int NEAR_C ThVmcSysEvent (unsigned int, unsigned char, unsigned short*) 
Flags: 0 
PARAMETER events 
  Address: Reg335+288 Size:          4 bytes   Index:    60488  TypeIndex:   60489 
  Type: unsigned int 
Flags: d0 
PARAMETER opcode 
  Address: Reg335+296 Size:          1 bytes   Index:    60490  TypeIndex:   60491 
  Type: unsigned char 
Flags: d0 
PARAMETER serverName 
  Address: Reg335+304 Size:          8 bytes   Index:    60492  TypeIndex:   60493 
  Type: unsigned short* 
Flags: d0 
STATIC_LOCAL_VAR func 
  Address:          12274af0 Size:          8 bytes  Index:     60495  TypeIndex:   60496 
  Type: wchar_t* 
Flags: 80 
LOCAL_VAR admhead 
  Address: Reg335+304 Size:          8 bytes  Index:    60498  TypeIndex:     60499 
  Type: unsigned char* 
Flags: 90 
LOCAL_VAR record 
  Address: Reg335+64 Size:      204 bytes  Index:    60501  TypeIndex:      60502 
  Type: AD_RECORD 
Flags: 90 
LOCAL_VAR adlen 
  Address: Reg335+296 Size:        4 bytes  Index:    60508  TypeIndex:      60509 
  Type: int 
Flags: 90 
不仅如此，它还解释了结构体的有关信息： 
STRUCT DBSL_STMTID 
Size: 120  Variables: 4  Functions: 0  Base classes: 0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
794 
逆向工程权威指南（下册） 
MEMBER moduletype 
  Type:  DBSL_MODULETYPE 
  Offset:          0   Index:        3  TypeIndex:    38653 
MEMBER module 
  Type:  wchar_t module[40] 
  Offset:          4   Index:        3  TypeIndex:       831 
MEMBER stmtnum 
  Type: long 
  Offset:         84   Index:        3  TypeIndex:       440 
MEMBER timestamp 
  Type:  wchar_t timestamp[15] 
  Offset:         88   Index:        3  TypeIndex:      6612 
此外，调试呼叫（debugging calls）也可提供大量信息。 
不久，笔者就注意到设置日志详细程度的全局变量 ct_level。SAP 官方对这个变量有详细的解释：
http://help.sap.com/saphelp_nwpi71/helpdata/en/46/962416a5a613e8e10000000a155369/content.htm。 
disp+work.exe 文件保留了大量的调试信息： 
cmp      cs:ct_level, 1 
jl       short loc_1400375DA 
call    DpLock 
lea     rcx, aDpxxtool4_c ; "dpxxtool4.c" 
mov     edx, 4Eh          ; line 
call    CTrcSaveLocation 
mov     r8, cs:func_48 
mov     rcx, cs:hdl      ; hdl 
lea     rdx, aSDpreadmemvalu ; "%s: DpReadMemValue (%d)" 
mov     r9d, ebx 
call    DpTrcErr 
call    DpUnlock 
如果 ctl_level 的值大于或等于程序预设的某个阈值，那么程序将会按照相应的详细程度记录 dev_wo、
dev_disp 等 dev-日志文件。 
在使用 TYPEINFODUMP 程序把 PDB 文件转换为文本文件之后，我们使用 grep 指令搜索与密码有关
的函数名称： 