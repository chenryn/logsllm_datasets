q
C
T
s i n
e   n
p   5 .   U
c
n
e
u
Fig. 6. Illustration of the Mitnick Attack
It should be noted that an intrusion detection system running exclusively at either
host will not detect this multi-phased and distributed attack. At best, Host A’s IDS would
see a relatively short lived Syn Flood attack, and Host B’s IDS might observe an attempt
to infer TCP sequence numbers, although this may not stand out from other non-intrusive
but ill-formed TCP connection attempts.
The following example illustrates the utility of our ontology, as well as the importance
of forming coalitions of IDSs. In our model, all of the IDSs share a common ontology
and utilize a secure communications infrastructure that has been optimized for IDSs. We
present such a communications infrastructure in [45].
Consider the case of the instance of the Syn Flood attack presented in Section 6.1, and
that it was directed against Host A in our example scenario. Since the IDS responsible for
130
J. Undercoffer, A. Joshi, and J. Pinkston
Host A is continually monitoring for anomalous behavior, asserting and de-asserting data
as necessary, it detects the occurrence of an inordinate number of partially established
TCP connections, and transmits the instance of the Syn Flood illustrated in Figure 5 to
the other IDSs in its coalition.
This instance is converted into a set of N-Triples and asserted into the knowledge
base of each IDS in the coalition. (Note: those same N-Triples will be de-asserted when
the responsible IDS transmits a message stating that the particular host is no longer
the victim of a Syn Flood attack.) Since this situation, especially in conjunction with
Host B being subjected to a series of probes meant to determine its TCP sequencing,
is anomalous and may be the prelude to a distributed attack the, current and pending
connections are also asserted into the knowledge base.
Figure 7 lists the set of DAML+OIL statements describing those connections that
were used in our experiments:
Fig. 7. DAML+OIL Notation for an Instances of Connections
Figure 8 illustrates the DAML+OIL notation specifying the Mitnick attack. Notice
that it is a subclass of both the class deﬁning a Denial of Service attack and the TCP
subclass, with a restriction on the property indicating that the target of the attack has
established a connection with the victim of the Denial of Service Attack.
DAML+OIL, like any other notation language, does not have the functionality to
perform mathematical operations. Consequently, when querying for the existence of a
Mitnick type of attack, we must deﬁne a rule that tests for concomitance between the
DoS attack and the establishment of the connection with the target of the DoS attack.
The following query performs that test:
(defrule isMitnick
(PropertyValue
(p http://security.umbc.edu/IntrOnt#Mitnick )(s ?eventNumber)(o "true"))
(PropertyValue
(p http://security.umbc.edu/IntrOnt#Int_time)(s ?eventNumber)(o ?Int_Time))
(PropertyValue
(p http://security.umbc.edu/IntrOnt#Conn_time)(s ?eventNumber)(o ?Conn_Time))
=>
(if (>=
(printout t ‘‘event number: ‘‘ ?eventnumber ‘‘ is a Mitnick Attack: crlf)))
?Conn_Time ?Int_Time) then
Modeling Computer Attacks: An Ontology for Intrusion Detection
131
Fig. 8. DAML+OIL Speciﬁcation of the Mitnick Attack
This query makes the correlation between event Number 00043, the connection occurring
at 15:44:17, with the host at IP address 130.85.112.23, and event number 00038, the
Denial of Service attack. The query, in conjunction with the other queries, produced the
following response:
attack is:
The synflood attack is:
http://security.umbc.edu/Intrusion#00038
The dos
http://security.umbc.edu/Intrusion#00038
The event number of the connection is:
http://security.umbc.edu/Intrusion#00043
The mitnick attack is:
http://security.umbc.edu/Intrusion#genid21
A connection with 130.85.112.231 was
made at 15:44:17 on 02/22/2003
where event number genid21 was generated through a chain of implication based upon
events 00038 and 00043 and the speciﬁcation of the Mitnick attack in the ontology.
At this point, it is important to review the sequence of events leading up to the
discovery of the Mitnick attack. Recall that the IDS responsible for the victim of the
Syn Flood attack queried its knowledge base for an instance of a DoS denial of service
attack. The query returned an instance of a Syn Flood, which was instantiated solely
on the condition that a Syn Flood is a subclass of both the DoS and Network classes
restricted to the value of Exced T being true.
The instance (its properties) of the Syn Flood attack was transmitted in the form
of a set of DAML+OIL statements to the other IDSs in the coalition. In turn, these
IDSs converted the DAML+OIL notated instance into a set of N-Triples and asserted
them into their respective knowledge bases. As a Syn Flood is a precursor to a more
insidious attack, instances of established and pending connections were asserted into
132
J. Undercoffer, A. Joshi, and J. Pinkston
the knowledge base. As the state of the knowledge base is dynamic, due to the assertions
and de-assertions, the rule set of each IDS is continually applied to the knowledge base.
Finally, the instance of the Mitnick attack was instantiated by the knowledge base,
based upon the existence of both the instance of the TCP connection and the instance of
the DoS attack.
6.3 Buffer Overﬂow Attack
The “C” strcpy() function is one of several functions that needs to be bounded in order
to prevent a buffer overﬂow attack. A buffer overﬂow attack occurs when deliberately
constructed code is placed onto the stack frame, overwriting the return address from
the current function. When a function is called, input parameters to the function, the
frame pointer(ebp register) and the return address (the current eip + the length of the
call instruction) are pushed onto the stack. Like all instructions, they are located in the
Text address space of memory.
As previously stated, we have instrumented the Linux kernel and are able to intercept
any given process at each system call, and examine the contents of its registers and stack
frame. Consequently, we are able to deﬁne the characteristics of a buffer overﬂow attack
such that the instruction pointer references a memory location that is outside of the
boundaries of the Text segment. Figure 9 presents the DAML+OIL notation for the class
Buffer Overﬂow and one of its properties.
Fig. 9. DAML+OIL Notation Specifying the Buffer Overﬂow SubClass
Similar to the previous two examples, querying the knowledge base with the follow-
ing will yield all instances of a buffer overﬂow.
Modeling Computer Attacks: An Ontology for Intrusion Detection
133
(defrule isBufferOverflow
(PropertyValue
(p http://www.w3.org/1999/02/22-rdf-syntax-ns#type)
(s ?var)
(o http://security.umbc.edu/IntrOnt#Buff_OF))
=>
(printout t ‘‘A Buffer Overflow has occurred.’’
crlf
‘‘with ID number: ‘‘ ?var))
7 Conclusion and Future Work
We have stated the case for transitioning from taxonomies and the languages (event,
correlation and recognition) employed by them to ontologies and ontology representa-
tion languages for use in Intrusion Detection Systems. We have constructed and have
presented an initial ontology, which is available at: http://security.cs.umbc.edu/Intrusion
.daml.
We have used the ontology speciﬁcation language DAML+OIL to implement our
ontology and to distribute information regarding system state within a distributed coali-
tion. In the Mitnick example, the ontology (DAML+OIL) and an inference engine was
initially employed as an event recognition language, by discerning that a type of Denial
of Service attack was taking place. Secondly, DAML+OIL was used as a reporting lan-
guage to communicate that fact to other systems. Finally, the ontology (DAML+OIL)
and the inference engine were used as an event aggregation language to fuse the exis-
tence of the Denial of Service attack, a network connection, and session establishment
to deduce that a Mitnick type attack had occurred.
Moreover, the only prerequisite for the disparate systems with the distributed coali-
tion is that they share the same ontology.
We are continuing our research, initiating attacks in a controlled environment in order
to capture their low level kernel attributes at the system, process and network levels in
order to further specify our ontology.
References
1. J. Allen, A. Christie, W. Fithen, J. McHugh, J. Pickel, and E. Stoner. State of the Practice
of Intrusion Detection Technologies. Technical Report 99tr028, Carnegie Mellon - Software
Engineering Institute, 2000.
2. E. G. Amoroso. Fundamentals of Computer Security Technology. Prentice-Hall PTR, 1994.
3. T. Aslam, I. Krusl, and E. Spafford. Use of a Taxonomy of Security Faults. In Proceedings
of the 19th National Information Systems Security Conference, October 1996.
4. D. Brickley and R. Guha. RDF Vocabulary Description Language 1.0: RDF Schema.
http://www.w3c.org/TR/rdf-schema/, 2003.
5. P. C.Mahalanobis. On Tests and Meassures of Groups Divergence. International Journal of
the Asiatic Society of Bengal, 1930.
6. D. Curry and H. Debar. “intrusion detection message exchange format data model and
extensible markup language (xml) document type deﬁnition. http://www.ietf.org/internet-
drafts/draft-ietf-idwg-idmef-xml-10.txt, January 2003.
7. R. Davis, H. Shrobe, and P. Szolovits. What is Knowledge Representation? AI Magazine,
14(1):17 – 33, 1993.
134
J. Undercoffer, A. Joshi, and J. Pinkston
8. J. Doyle, I. Kohane, W. Long, H. Shrobe, and P. Szolovits. Event Recognition Beyond
Signature and Anomaly. In 2nd IEEE-SMC Information Assurance Workshop, June 2001.
9. S. Eckmann, G. Vigna, and R. Kemmerer. STATL: An Attack Language for State-based
Intrusion Detection. Journal of Computer Security, 10(1/2):71 – 104, 2002.
10. R. Feiertag, C. Kahn, P. Porras, D. Schackenberg, S. Staniford-Chen, and B. Tung. A Common
Intrusion Speciﬁcation Language. http://www.isi.edu/ brian/cidf/drafts/language.txt, June
1999.
11. R. Fikes and D. L. McGuinness. An Axiomatic Semantics for RDF, RDF-S, and DAML+OIL.
http://www.w3.org/TR/daml+oil-axioms, December 2001.
12. G. Frank, J. Jenkins, and R. Fikes. JTP: An Object Oriented Modular Reasoning System.
http://kst.stanford.edu/software/jtp.
13. E. J. Friedman-Hill. Jess, The Java Expert System Shell.
http://herzberg.ca.sandia.gov/jess/docs/52/, November 1977.
14. R. L. Glass and I. Vessey. Contemporary Application-Domain Taxonomies. IEEE Software,
pages 63 – 76, July 1995.
15. G. Golub and C. Loan. Matrix Computations. The Johns Hopkins University Press, 1989.
16. J. Goubault-Larrecq. An Introduction to LogWeaver (v2.8).
http://www.lsv.ens-cachan.fr/ goubault/DICO/tutorial.pdf, September 2001.
17. T. F. Gruber. A Translation Approach to Portable Ontologies. Knowledge Acquisition,
5(2):199–220, 1993.
18. B. Guha and B. Mukherjee. Network Security via Reverse Engineering of TCP Code: Vulner-
ability Analysis and Proposed Solutions. In IEEE Networks, pages 40 – 48. IEEE, July/August
1997.
19. V. Haarslev and R. Moller. RACER: Renamed ABox and Concept Expression Reasoner.
http://www.cs.concordia.ca/ faculty/haarslev/racer/index.html, June 2001.
20. J. W. Haines, L. M. Rossey, R. P. Lippman, and R. K. Cunningham. Extending the DARPA
Off-Line Intrusion Detection Evaluations. In DARPA Information Survivability Conference
and Exposition II, volume 1, pages 77 – 88. IEEE, 2001.
21. I. Horrocks, U. Sattler, and S. Tobies. Reasoning with Individuals for the Description Logic
SHIQ. In Proceedings of the 17th International Conference on Automated Deduction, number
1831. Springer-Verlag, 2000.
22. J. Hendler. DARPA Agent Markup Language+Ontology Interface Layer.
http://www.daml.org/2001/03/daml+oil-index, 2001.
23. A. Joshi and J. Undercoffer. On web semantics and data mining: Intrusion detection as a
case study. In Proceedings of the National Science Foundation Workshop on Next Generation
Data Mining, 2002.
24. C. Kahn, D. Bolinger, and D. Schackenberg. Communication in the Common Intrusion
Detection Framework v 0.7. http://www.isi.edu/ brian/cidf/drafts/communication.txt, June
1998.
25. R. A. Kemmerer and G. Vigna. Intrusion Detection: A Brief History and Overview. Security
and Privacy a Supplement to IEEE Computer Magazine, pages 27 – 30, April 2002.
26. K. Kendall. A Database of Computer Attacks for the Evaluation of Intrusion Detection
Systems. Master’s thesis, MIT, 1999.
27. D. Koller and A. Pfeffer. Probabilistic Frame-Based Systems. In Proceedings of the Fifteenth
National Conference on Artiﬁcal Intelligence, pages 580 – 587, Madison, Wisconsin, July
1998. AAAI.
28. J. Kopena. DAMLJessKB. http://edge.mcs.drexel.edu/ assemblies/software/damljesskb/
articles/DAMLJessKB-2002.pdf, October 2002.
29. R. Krishnapuram, A. Joshi, O. Nasraoui, and L. Yi. Low-Complexity Fuzzy Relational Clus-
tering Algorithms for Web Mining. In IEEE transactions on Fuzzy Systems, volume 9, August
2001.
Modeling Computer Attacks: An Ontology for Intrusion Detection
135
30. I. Krusl. Software Vulnerability Analysis. PhD thesis, Purdue, 1998.
31. C. E. Landwehr, A. R. Bull, J. P. McDermott, and W. S. Choi. A Taxonomy of Computer
Program Security Flaws. ACM Computing Surveys, 26(3):211 – 254, September 1994.
32. O. Lassila and R. R. Swick. Resource Description Framework (RDF) Model and Syntax
Speciﬁcation. http://www.w3.org/TR/1999/REC-rdf-syntax-19990222/, February 1999.
33. U. Lindqvist and E. Jonsson. How to Systematically Classify Computer Security Intrusions.
In Proceedings of the 1997 IEEE Symposium on Security and Privacy, pages 154 – 163, May
1997.
34. U. Lindqvist and P.A. Porras. Detecting computer and network misuse through the production-
based system toolset (p-best). In Proceedings of the 1999 IEEE Symposium on Security and
Privacy, pages 146 – 161. IEEE, May 1999.
35. R. Lippmann, D. Fried, I. Graf, J. Haines, K. Kendall, D. McClung, D. Weber, S. Webster,
D. Wyschogrod, R. Cunningham, and M. Zissman. Evaluating Intrusion Detection Systems:
The 1998 DARPA Off-line Intrusion Detection Evaluation. In Proceedings of the DARPA
Information Survivability Conference and Exposition,2000, pages 12 – 26.
36. J. McHugh. Testing Intrusion Detection Systems: A Critique of the 1998 and 1999 DARPA
Intrusion Detection System Evaluations as Performed by Lincoln Laboratory. ACM Transac-
tions on Information and System Security, November 2000.
37. P. Ning, S. Jajodia, and X. S. Wang. Abstraction-Based Intrusion in Distributed Environments.
ACM Transactions on Information and Systems Security, 4(4):407 – 452, November 2001.
38. N. F. Noy and D. L. McGuinnes. Ontology development 101: A guide to creating your ﬁsrt
ontology. Stanford University.
39. V. Paxson. Bro: A system for Detecting Network Intruders in Real Time. In Proceedings of
the 7th Symposium on USENIX Security, 1998.
40. V. Raskin, C. F. Hempelmann, K. E. Triezenberg, and S. Nirenburg. Ontology in Information
In Proceedings of
Security: A Useful Theoretical Foundation and Methodological Tool.
NSPW-2001, pages 53 – 59. ACM.
41. M. Roesch. Snort, version 1.8.3. availble via www.snort.org, August 2001. an open source
NIDS.
42. M. Roger and J. Goubault-Larrecq. Log Auditing through Model Checking. In Proceedings
of 14th the IEEE Computer Security Foundations Workshop (CSFW’01), pages 220 – 236,
2001.
43. S. Staab and A. Maedche. Ontology Engineering Beyond the Modeling of Concepts and
Relations. In Proceedings of the 14th European Congress on Artiﬁcial Intelligence, 2000.
44. G. G. Sumpson. Principals of Animal Taxonomy. Columbia University Press, 1961.
45. J. Undercoffer, F. Perich, A. Cedilnik, L. Kagal, and A. Joshi. A Secure Infrastructure for
Service Discovery and Access in Pervasive Computing. Mobile Networks and Applications:
Special Issue on Security, 8(2):113 – 126, 2003.
46. J. Undercoffer and J. Pinkston. An Empirical Analysis of Computer Attacks and Intrusions.
Technical Report TR-CS-03-11, University of Maryland, Baltimore County, 2002.
47. W3C. Extensible Markup Language. http://www.w3c.org/XML/, 2003.
48. WEBSTERS, editor. Merriam-Webster’s Collegiate Dictionary. Merriam-Webster, Inc., tenth
edition, 1993.
49. C. Welty. Towards a Semantics for the Web.
www.cs.vassar.edu/faculty/welty/papers/dagstuhl-2000.pdf, 2000.