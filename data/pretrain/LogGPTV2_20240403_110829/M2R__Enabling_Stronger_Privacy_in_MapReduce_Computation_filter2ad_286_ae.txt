Aggregate job, and the cost for executing mixT. Input sizes (number
of ciphertexts per input) varies from 2 to 106.
a second overhead even for millions of input tuples. The
number of invocations to the other components (mixT
and groupT) is much smaller (8−59) and the each invo-
cation operates on large inputs of a few gigabytes; there-
fore the dominant cost is not that of context-switches, but
that of the cost of multi-step shufﬂing operation itself and
the I/O overheads.
6.3 Results: Security & Porting Effort
Porting effort. We ﬁnd that the effort to adapt all bench-
marks to M2R is modest at best. For each benchmark, we
report the number of Java LoC we changed in order to
invoke the trusted components in M2R, measured using
the sloccount tool 6. Table 1 shows that all applica-
tions except for KMeans need to change fewer than 43
LoC. Most changes are from data marshaling before and
after invoking the mapT and reduceT units. KMeans
is more complex as it is a part of the Mahout distribution
and depends on many other utility classes. Despite this,
the change is only 113 LoC, or merely 7% of the original
KMeans implementation.
TCB increase. We deﬁne our TCB increase as the to-
tal size of the four trusted components. This represents
the additional code running on top of a base TCB, which
in our case is Xen. Note that our design can eliminate
the base TCB altogether in the future by using SGX en-
claves, and only retain the main trusted components we
propose in M2R. The TCB increase comprises the per-
application trusted code and platform trusted code. The
former consists of the code for loading and executing
mapT, reduceT units (213 LoC) as well as the code
for implementing their logic. Each map/reduce codebase
itself is small, fewer than 200 LoC, and runs as trusted
components in the baseline system itself. The platform
trusted code includes that of mixT and groupT, which
amounts to 90 LoC altogether. The entire Hadoop soft-
ware stack is over 190K LoC and M2R avoids moving all
of it into the TCB. Table 1 shows that all jobs have TCB
increases of fewer than 500 LoC, merely 0.16% of the
Hadoop codebase.
Security. M2R achieves stronger privacy than previous
6http://www.dwheeler.com/sloccount
458  24th USENIX Security Symposium 
USENIX Association
12
Job
Wordcount
Index
Grep
Aggregate
Join
Pagerank
KMeans
Baseline (additional leakage)
M2R
# unique words + count word-ﬁle relationship
# unique words + count word-ﬁle relationship
nothing
# groups + group size
# groups + group size
node in-degree
nothing
nothing
record-group relationship
record-group relationship
whole input graph
nothing
Table 3: Remaining leakage of M2R applications, compared with that
in the baseline system.
platforms that propose to use encrypted computation for
big-data analysis. Our deﬁnition allows the adversary to
observe an admissible amount of information, captured
by Ψ, in the computation but hides everything else. It is
possible to quantitatively analyze the increased privacy
in information-theoretic terms, by assuming the proba-
bility distribution of input data [37, 53]. However, here
we present a qualitative description in Table 3 highlight-
ing how much privacy is gained by the techniques in-
troduced in M2R over the baseline system. For instance,
consider the two case studies that incur most perfor-
mance overhead (Wordcount, Index). In these examples,
merely encrypting the map/reduce tuples leaks informa-
tion about which ﬁle contains which words. This may
allow adversaries to learn the speciﬁc keywords in each
In M2R, this leakage is reduced to
ﬁle in the dataset.
learning only the total number of unique words in the
complete database and the counts of each, hiding in-
formation about individual ﬁles. Similarly, M2R hides
which records are in which group for database opera-
tions (Aggregate and Join). For Pagerank, the baseline
system leaks the complete input graph edge structure,
giving away which pair of nodes has an edge, whereas
M2R reduces this leakage to only the in-degree of graph
vertices. In the two remaining case studies, M2R provides
no additional beneﬁt over the baseline.
7 Related Work
Privacy-preserving data processing. One of M2R’s goal
is to offer large-scale data processing in a privacy pre-
serving manner on untrusted clouds. Most systems with
this capability are in the database domain, i.e.
sup-
porting SQL queries processing. CryptDB [47] takes a
purely cryptographic approach, showing the practicality
of using partially homomorphic encryption schemes [3,
15, 45, 46, 54]. CryptDB can only work on a small set
of SQL queries and therefore is unable to support ar-
bitrary computation. Monomi [59] supports more com-
plex queries, by adopting the download-and-compute ap-
proach for complex queries. As shown in our evaluation,
such an approach incurs an order of magnitude larger
overheads.
There exist alternatives supporting outsourcing of
query processing to a third party via server-side trusted
hardware, e.g. IBM 4764/5 cryptographic co-processors.
TrustedDB [7] demonstrated that a secure outsourced
database solution can be built and run at a fraction of
the monetary cost of any cryptography-enabled private
data processing. However, the system requires expensive
hardware and a large TCB which includes the entire SQL
server stack. Cipherbase improves upon TrustedDB by
considering encrypting data with partially homomorphic
schemes, and by introducing a trusted entity for query
optimization [6]. M2R differs to these systems in two
fundamental aspects. First, it supports general compu-
tation on any type of data, as opposed to being restricted
to SQL and structured database semantics. Second, and
more importantly, M2R provides conﬁdentiality in a dis-
tributed execution environment which introduces more
threats than in a single-machine environment.
VC3 is a recent system offering privacy-preserving
general-purpose data processing [49].
It considers
MapReduce and utilizes Intel SGX to maintain a small
TCB. This system is complementary to M2R, as it fo-
cuses on techniques for isolated computation, key man-
agement, etc. which we do not consider. The privacy
model in our system is stronger than that of VC3 which
does not consider trafﬁc analysis attacks.
GraphSC offers a similar security guarantee to that
of M2R for specialized graph-processing tasks [42].
It
provides a graph-based programming model similar to
GraphLab’s [36], as opposed to the dataﬂow model ex-
posed by M2R. GraphSC does not employ trusted prim-
itives, but it assumes two non-colluding parties. There
are two main techniques for ensuring data-oblivious and
secure computation in GraphSC: sorting and garbled cir-
cuits. However, these techniques result in large perfor-
mance overheads: a small Pagerank job in GraphSC is
200,000×−500,000× slower than in GraphLab without
security. M2R achieves an overhead of 2×−5× increase
in running time because it leverages trusted primitives for
computation on encrypted data. A direct comparison of
oblivious sorting used therein instead of our secure shuf-
ﬂer is a promising future work.
Techniques for isolated computation. The current im-
plementation of M2R uses a trusted hypervisor based on
Xen for isolated computation. Overshadow [14] and
CloudVisor [63] are techniques with large TCB, whereas
Flicker [38] and TrustVisor [39] reduce the TCB at the
cost of performance. Recently, Minibox [32] enhances a
TrustVisor-like hypervisor with two-way protection pro-
viding security for both the OS and the applications (or
PALs). Advanced hardware-based techniques include In-
tel SGX [40] and Bastion [12] provide a hardware pro-
tected secure mode in which applications can be exe-
cuted at hardware speed. All these techniques are com-
plementary to ours.
USENIX Association  
24th USENIX Security Symposium  459
13
Mix networks. The concept of mix network is ﬁrst de-
scribed in the design of untraceable electronic mail [13].
Since then, a body of research has concentrated on build-
ing, analyzing and attacking anonymous communication
systems [16, 19]. Canetti presents the ﬁrst deﬁnition of
security that is preserved under composition [11], from
which others have shown that the mix network is secure
under Canetti’s framework [10, 60]. Security properties
of cascaded mix networks were studied in [30]. We use
these theoretical results in our design.
8 Conclusion & Future Work
In this paper, we deﬁned a model of privacy-preserving
distributed execution of MapReduce jobs. We analyzed
various attacks channels that break data conﬁdentiality
on a baseline system which employs both encryption
and trusted computing primitives. Our new design re-
alizes the deﬁned level of security, with a signiﬁcant step
towards lower performance overhead while requiring a
small TCB. Our experiments with M2R showed that the
system requires little effort to port legacy MapReduce
applications, and is scalable.
Systems such as M2R show evidence that specialized
designs to hide data access patterns are practical alterna-
tives to generic constructions such as ORAM. The ques-
tion of how much special-purpose constructions beneﬁt
important practical systems, as compared to generic con-
structions, is an area of future work. A somewhat more
immediate future work is to integrate our design to other
distributed dataﬂow systems. Although having the simi-
lar structure of computation, those systems are based on
different sets of computation primitives and different ex-
ecution models, which presents both opportunities and
challenges for reducing the performance overheads of
our design. Another avenue for future work is to real-
ize our model of privacy-preserving distributed computa-
tion in the emerging in-memory big-data platforms [64],
where only very small overheads from security mecha-
nisms can be tolerated.
9 Acknowledgements
The ﬁrst author was funded by the National Research
Foundation, Prime Minister’s Ofﬁce, Singapore, under
its Competitive Research Programme (CRP Award No.
NRF-CRP8-2011-08). A special thanks to Shruti Tople
and Loi Luu for their help in preparing the manuscript.
We thank the anonymous reviewers for their insightful
comments that helped us improve the discussions in this
work.
References
[1] Apache hadoop. http://hadoop.apache.org.
[2] Trusted
computing
group.
www.
trustedcomputinggroup.org.
[3] R. Agrawal, J. Kiernan, R. Srikant, and Y. Xu. Order pre-
serving encryption for numeric data. In SIGMOD, pages
563–574, 2004.
[4] M. Alizadeh, A. Greenberg, D. A. Maltz, J. Padhye, P. Pa-
tel, B. Prabhakar, S. Sengupta, and M. Sridharan. Data
center tcp (dctcp). In SIGCOMM, 2010.
[5] T. Alves and D. Felton. Trustzone: integrated hardware
and software security. AMD white paper, 2004.
[6] A. Arasu, S. Blanas, K. Eguro, M. Joglekar, R. Kaushik,
D. Kossmann, R. Ramamurthy, P. Upadhyaya, and
R. Venkatesan. Secure database-as-a-service with ci-
pherbase. In SIGMOD, pages 1033–1036, 2013.
[7] S. Bajaj and R. Sion. TrustedDB: a trusted hardware
based database with privacy and data conﬁdentiality. In
SIGMOD, pages 205–216, 2011.
[8] A. Baumann, M. Peinado, and G. Hunt. Shielding ap-
plications from an untrusted cloud with haven. In OSDI,
2014.
[9] M. Blanton, A. Steele, and M. Alisagari. Data-oblivious
graph algorithms for secure computation and outsourcing.
In ASIACCS, pages 207–218. ACM, 2013.
[10] J. Camenisch and A. Mityagin. Mix-network with
In Privacy Enhancing Technologies,
stronger security.