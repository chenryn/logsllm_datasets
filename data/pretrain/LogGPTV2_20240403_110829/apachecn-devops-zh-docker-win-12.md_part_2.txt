`Image2Docker` is an open source project. The source is on GitHub – use the following short link to view it: [https://github.com/docker/communitytools-image2docker-win](https://github.com/docker/communitytools-image2docker-win). The tool has not been updated recently, as Docker now have a commercial alternative called Docker Application Convertor (DAC). DAC has a much greater feature set since it supports Linux and Windows applications. You can see it demonstrated in DockerCon sessions on YouTube: [https://is.gd/sLMOa1](https://is.gd/sLMOa1).
# 让其他利益攸关方参与进来
成功的 PoC 应该在几天内就能实现。其输出将是一个在 Docker 中运行的示例应用，以及一组实现该概念验证所需的额外步骤。如果您在一个 DevOps 环境中工作，在这个环境中，您的团队拥有您项目的交付，您可以同意进行投资，转移到 Docker 进行生产。
对于更大的项目或更大的团队，您需要与其他利益相关方合作，进一步推进您的 PoC。您的对话类型将取决于您的组织结构，但有一些主题侧重于您通过 Docker 获得的改进:
*   当需要部署应用时，运营团队在从开发到移交的过程中经常会遇到摩擦。Docker 工件、Docker 文件和 Docker 组合文件是开发和操作可以一起工作的中心点。不存在运营团队无法部署升级的风险，因为升级将是已经尝试和测试过的 Docker 映像。
*   大公司的安全团队经常需要证明出处。他们需要证明在生产中运行的软件没有被篡改，并且实际上正在运行单片机中的代码。现在这可能是流程驱动的，但是有了映像签名和 Docker 内容信任，就可以明确证明这一点。在某些情况下，安全性还需要证明一个系统只能在经过认证的硬件上运行，而在 Docker Swarm 中使用安全标签和约束很容易做到这一点。
*   产品所有者经常试图平衡大量积压和长时间的发布时间表。企业号.NET 项目通常很难部署——升级过程缓慢、手动且有风险。有一个部署阶段，然后是用户测试阶段，在此期间，应用对普通用户是离线的。相比之下，使用 Docker 的部署是快速、自动化和安全的，这意味着您可以更频繁地进行部署，在功能准备就绪时添加功能，而不是等待几个月等待下一个计划的发布。
*   管理团队将关注产品和运行产品的成本。Docker 通过更高效地利用计算资源和降低许可成本来帮助降低基础架构成本。它有助于降低项目成本，让团队更高效地工作，消除环境之间的差距，从而使部署保持一致。它还有助于提高产品质量，因为自动打包和滚动更新意味着您可以更频繁地部署，更快地添加功能和修复缺陷。
您可以通过为您的概念验证运行**社区版** ( **CE** )来开始使用 Docker，这是您在 Windows 10 上使用 Docker Desktop 获得的。您组织中的其他利益相关者将希望了解对容器中运行的应用的支持。Docker 企业引擎包含在 Windows Server 2016 或 2019 许可成本中，因此您可以免费获得微软和 Docker，Inc .的支持。运营和安全团队可能会在整个 Docker Enterprise 套件中看到很多好处，该套件为您提供了**通用控制平面** ( **UCP** )和 **Docker 可信注册中心** ( **DTR** )。
Docker recently announced that they will be shipping Docker Desktop Enterprise for Mac and Windows. It will have the same great user experience as Docker Desktop, but with support on Windows 10 and the ability to run the same version of the Docker Enterprise Engine locally that your organization is running in production.
PoC 中的 Docker 文件和 Docker 映像在所有这些版本中都将以相同的方式工作。Docker CE、Docker 企业引擎和通用控制平面都共享同一个底层平台。
# 实现 Docker 的案例研究
我将通过三个真实案例研究来结束这一章，在这些案例中，我将 Docker 引入到现有的解决方案中，或者准备了一个路线图来将 Docker 引入到项目中。这些是生产场景，从拥有数十个用户的小公司项目到拥有超过一百万用户的大型企业项目。
# 案例研究 1–内部网络表单应用
几年前，我接受了一家租车公司的网络表单应用的支持。该应用由大约 30 人的团队使用，这是一个小规模的部署——他们有一台服务器托管数据库，一台服务器运行网络应用。虽然很小，但它是业务的核心应用，他们所做的一切都是从这个应用运行的。
该应用有一个非常简单的架构:只有一个网络应用和一个 SQL Server 数据库。最初，我做了大量工作来提高应用的性能和质量。在那之后，它变成了一个管理员角色，我每年会管理两到三个版本，添加新功能或修复旧 bug。
这些发布总是比需要的更加困难和耗时。发布通常包括以下内容:
*   带有更新应用的网络部署包
*   一组带有模式和数据更改的 SQL 脚本
*   验证新特性和检查回归的手动测试指南
部署是在办公时间之外完成的，以便给我们一个时间窗口来解决我们发现的任何问题。我会使用**远程桌面** **协议** ( **RDP** )访问他们的服务，复制工件，并手动运行 Web Deploy 包和 SQL 脚本。发布之间通常需要几个月的时间，所以我会依赖我写的文档来提醒我这些步骤。然后，我会浏览测试指南并检查主要特性。有时，会出现问题，因为我缺少一个 SQL 脚本或 web 应用的依赖项，我需要尝试跟踪一个我之前没有看到的问题。
直到最近，该应用还在 Windows Server 2003 上运行，而 Windows Server 2003 早已不再受支持。当公司想升级 Windows 时，我建议迁移到 Windows Server 2016 Core 和 Docker。我的建议是使用 Docker 来运行 web 应用，让 SQL Server 在自己的服务器上本地运行，但是使用 Docker 作为分发机制来部署数据库升级。
转到 Docker 非常简单。我对生产服务器使用 Image2Docker 来生成一个初始 Dockerfile，然后通过添加运行状况检查和环境变量来进行配置。在 Visual Studio 中，我已经有了一个用于该模式的 SQL Server 项目，因此我添加了另一个 Dockerfile，以便用数据库的部署脚本来打包 Dacpac。只花了两天时间就完成了 Docker 工件，并让新版本在测试环境中运行。这是 Docker 的架构:
![](img/afda574a-1c76-4071-b661-d169f2139a59.png)
*   **1**:web 应用运行在 Windows Docker 容器中。在生产环境中，它连接到一个单独的 SQL Server 实例。在非生产环境中，它连接到在容器中运行的本地 SQL Server 实例。
*   **2** :基于 SQL Server Express 将数据库打包成 Docker 映像，并与数据库模式一起部署在一个 Dacpac 中。在生产中，任务容器从映像运行，以将模式部署到现有数据库。在非生产环境中，运行后台容器来托管数据库。
从那以后，部署变得简单明了，并且总是遵循相同的步骤。我们在 Docker Hub 上有一组私有存储库，其中存储了版本化的应用和数据库映像。我将我的本地 Docker CLI 配置为使用他们的 Docker 引擎，然后执行以下操作:
1.  停止 web 应用容器。
2.  从新数据库映像运行一个容器来升级 SQL Server。
3.  使用 Docker Compose 将网络应用更新为新映像。
迁移到 Docker 的最大好处是快速可靠的发布和减少的基础架构需求。该公司目前正在考虑用更多更小的服务器替换他们当前数量的大型服务器，这样他们就可以运行 Docker Swarm 并实现零停机升级。
另一个好处是发布过程简单。因为部署已经过尝试和测试，使用了将在生产中使用的相同 Docker 映像，所以没有必要让了解应用的人来跟踪问题。该公司的信息技术支持人员现在就发布，没有我的帮助他们也能做到。
I'm working with the same company again to manage their upgrade to the latest Docker Enterprise on Windows Server 2019\. The plan is very simple—I've already built their application and database images on top of the latest Windows Server 2019 Core images and verified that they work with a suite of end-to-end tests. Now, they can perform the server upgrades and deploy the new versions using the same tools and be confident of a successful release.
# 案例研究 2–数据库集成服务
我为一家金融公司开发了一个大型复杂的网络应用。这是一款面向内部的应用，管理着大量交易。前端在 ASP.NET MVC 中，但大部分逻辑在服务层，用 WCF 编写。服务层也是许多第三方应用的门面，隔离了 WCF 层的集成逻辑。
大多数第三方应用都有我们可以使用的 XML web 服务或 JSON REST APIs，但其中一个较旧的应用没有集成选项。我们只将它用于参考数据，因此外观被实现为数据库级集成。WCF 服务公开了封装良好的端点，但是实现直接连接到外部应用数据库来提供数据。
数据库集成很脆弱，因为您必须依赖私有数据库模式而不是公共服务合同，但有时没有其他选择。在这种情况下，模式很少改变，我们可以管理中断。不幸的是，发布过程是由后向前的。运营团队将首先在生产中发布数据库的新版本，因为该应用只有生产中的供应商提供支持。当一切正常时，他们会在开发和测试环境中复制该版本。
有一个版本的数据库模式改变了，破坏了我们的集成。任何使用第三方应用参考数据的功能都停止了工作，我们必须尽快修复。修复很简单，但是 WCF 应用是一个巨大的整体，它需要大量的回归测试，然后我们才能确信这个变化不会影响其他领域。我的任务是将 Docker 视为管理数据库依赖关系的更好方法。