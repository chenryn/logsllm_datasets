### A5 - Security Misconfiguration

#### Request Filtering in IIS
Request Filtering was introduced in IIS 7 and has replaced the functionality of the UrlScan add-on for IIS 6.0. This built-in security feature allows filtering of undesired URL requests and can be configured for various types of filtering. Understanding how the IIS pipeline processes a request is crucial. The following diagram illustrates the order in which these modules are executed:

```
HTTP REQUEST
BEGIN REQUEST
AUTHENTICATE REQUEST
AUTHORIZE REQUEST
RESOLVE CACHE
END REQUEST
REQUEST FILTERING (HIGH PRIORITY)
URL REWRITE MODULE (MEDIUM PRIORITY)
HTTP RESPONSE
```

**Figure 8: IIS Request Filtering Pipeline** (Yakushev, 2008)

Request filtering can be set up through the IIS interface or by modifying the `web.config` file. Here is an example configuration:

```csharp
using System;
using System.Text;
using Microsoft.Web.Administration;

internal static class Sample
{
    private static void Main()
    {
        using (ServerManager serverManager = new ServerManager())
        {
            Configuration config = serverManager.GetWebConfiguration("Default Web Site");
            ConfigurationSection requestFilteringSection = config.GetSection("system.webServer/security/requestFiltering");
            ConfigurationElementCollection denyUrlSequencesCollection = requestFilteringSection.GetCollection("denyUrlSequences");

            ConfigurationElement addElement = denyUrlSequencesCollection.CreateElement("add");
            addElement["sequence"] = @"..";
            denyUrlSequencesCollection.Add(addElement);

            ConfigurationElement addElement1 = denyUrlSequencesCollection.CreateElement("add");
            addElement1["sequence"] = @":";
            denyUrlSequencesCollection.Add(addElement1);

            ConfigurationElement addElement2 = denyUrlSequencesCollection.CreateElement("add");
            addElement2["sequence"] = @"\";
            denyUrlSequencesCollection.Add(addElement2);

            serverManager.CommitChanges();
        }
    }
}
```

**Sample 11.18: Configuring Request Filtering in `web.config`**

#### Double-Encoded Requests
Double-encoding is an attack technique where user request parameters are encoded twice in hexadecimal format to bypass security controls or cause unexpected behavior. This works because web servers accept and process client requests in multiple encoded forms.

By double-encoding, attackers can bypass security filters that only decode user input once. The second decoding process is handled by the backend platform, which may not have the necessary security checks in place.

For example, the "dot-dot-slash" (`../`) used in Path Traversal attacks is represented as `%2E%2E%2f` in hexadecimal. When the `%` symbol is encoded again, it becomes `%25`, resulting in the double-encoded form `%252E%252E%252F`.

To prevent IIS from serving double-encoded requests, use the following configuration (IIS Team, 2007):

**Sample 11.20: Preventing Double-Encoded Requests**

#### Filtering High Bit Characters
This feature allows or rejects all requests to IIS that contain non-ASCII characters. If this filter is triggered, error code 404.12 is displayed to the user. The equivalent setting in UrlScan (IIS6 add-on) is `AllowHighBitCharacters`.

#### Filtering Based on File Extensions
You can allow or deny requests based on file extensions. The error code logged is 404.7. The `AllowExtensions` and `DenyExtensions` options are the equivalents in UrlScan.

#### Filtering Based on Request Limits
IIS can reject requests based on the following limits:
- **404.13**: Content is too long.
- **404.14**: URL is too large.
- **404.15**: Query string is too long.

This can be used to limit long query strings or excessive content sent to an application.

**Sample 11.21: Configuring Request Limits**

#### Filtering by Verbs
When IIS rejects a request based on verb filtering, the error code logged is 404.6. This corresponds to the `UseAllowVerbs`, `AllowVerbs`, and `DenyVerbs` options in UrlScan. To restrict the verbs, first set `allowUnlisted` to `false` and then specify the allowed verbs.

**Sample 11.22: Configuring Verb Filtering**

#### Filtering Based on URL Sequences
This feature defines a list of sequences that IIS can reject when they appear in a request. The error code logged is 404.5. This corresponds to the `DenyUrlSequences` feature in UrlScan.

**Sample 11.23: Configuring URL Sequence Filtering**

#### Filtering Out Hidden Segments
If you want IIS to serve content in a binary directory but not the binary itself, you can apply this configuration.

#### Password Protection and Sensitive Information
The `web.config` file may contain sensitive information such as database passwords and mail server usernames. Sections that should be encrypted include:
- `<appSettings>`: Contains custom application settings.
- `<connectionStrings>`: Contains connection strings.
- `<identity>`: Can contain impersonation credentials.
- `<sessionState>`: Contains the connection string for the out-of-process session state provider.

Passwords and usernames in the `<connectionStrings>` section should be encrypted. ASP.NET provides the `aspnet_regiis` utility for encryption, found in the `.NET Framework` folder.

**Sample 11.26: Encrypting Sections in `web.config`**

#### IIS Configurations
Depending on the IIS version, certain settings need to be reviewed for security. For example, the trust level, which is a set of Code Access Security permissions granted to an application, can be set to FULL, HIGH, MEDIUM, LOW, or MINIMAL.

**Sample 11.27: Locking Trust Levels**

#### Strongly Named Assemblies
Strong naming is a method to sign an assembly's identity using its text name, version number, culture information, a public key, and a digital signature. It guarantees a unique name for the assembly and protects its version lineage. Strong names also provide a strong integrity check and prevent spoofing.

However, strong names do not imply a level of trust like a digital signature and supporting certificate. If the GAC is not being used, strong names may provide fewer benefits.

**Sample 11.28: Using Strong Naming in Visual Studio**

#### References
- Yakushev, R. (2008). "IIS 7.0 Request Filtering and URL Rewriting." Available at: [Link](http://www.iis.net/learn/extensions/url-rewrite-module/iis-request-filtering-and-url-rewriting)
- OWASP. (2009). "Double Encoding." Available at: [Link](https://www.owasp.org/index.php/Double_Encoding)
- IIS Team. (2007). "Use Request Filtering." Available at: [Link](http://www.iis.net/learn/manage/configuring-security/use-request-filtering)
- Aguilar, C. (2006). "The New Configuration System in IIS 7." Available at: [Link](http://blogs.msdn.com/b/carlosag/archive/2006/04/25/iis7configurationsystem.aspx)
- MSDN. (2013). "How to: Lock ASP.NET Configuration Settings." Available at: [Link](http://msdn.microsoft.com/en-us/library/ms178693.aspx)
- Solis, J. (2012). "Strong-Named Assemblies." Available at: [Link](http://example.com/strong-named-assemblies)

This revised text is more structured, clear, and professional, with improved formatting and organization.