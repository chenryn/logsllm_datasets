KD(𝐾, 𝑋) = 𝐹𝐾
(︀𝑋 ‖ 0*)︀ ,
(︀𝑋 ‖ 0 ‖ 0*)︀ ‖ 𝐹𝐾
(︀𝑋 ‖ 1 ‖ 0*)︀ .
From the fact that 𝐹 is a good PRF and thanks to the use of the domain separation, KD is also a
good PRF.
6 Better Online AE Schemes
In this section, we give two alternative canonical online AE schemes that are better than SE1.
6.1 Scheme SE2
The scheme. Let 𝛱 = (K, E, D) be a conventional AE scheme of 𝑘-bit key length. We associate
to it an encoding mechanism ⟨·⟩ that turns a triple (𝑃, 𝑖, 𝑎) of a nonce prefix 𝑃, a counter 𝑖, and a
flag 𝑎 into a nonce of 𝛱. Assume that under this encoding, a nonce prefix must have bit length ℓ.
For example, if we instantiate 𝛱 via GCM and use four bytes to encode a counter and one byte for
the flag as in Tink, then ℓ = 56. Let KD : 𝒦 × 𝒩 → {0, 1}𝑘 × {0, 1}ℓ be a key-derivation function.
The scheme SE2[KD, 𝛱] = (𝒦,ℰ,𝒟) of the same key space as KD is specified in Fig. 11; it uses the
message space 𝒩 of KD as its nonce space.
Informally, SE2 is similar to SE1, but we use KD to digest the entire nonce. Moreover, each nonce
prefix 𝑃 is a part of KD’s output, instead of a part of the nonce 𝑁.
Analysis of SE2. The following result shows that SE2[KD, 𝛱] meets the nOAE2 notion, provided
that KD is a good PRF and 𝛱 is a good conventional AE scheme. The proof, which is in Appendix E,
is similar to the proof of Theorem 1.
Theorem 3. Let 𝛱 = (K, E, D) be a conventional AE scheme, and let KD : 𝒦 × 𝒩 → {0, 1}𝑘 ×
{0, 1}ℓ be a key-derivation function. For any adversary 𝒜 attacking SE2[KD, 𝛱] that makes at most
𝑞 queries, we can construct adversaries ℬ and ℬ′ of about the same efficiency as 𝒜 such that
Advnoae2
SE2[KD,𝛱](𝒜) ≤ Advae
𝛱(ℬ) + Advprf
KD(ℬ′) .
Adversary ℬ makes the same number of encryption queries as 𝒜, and at most as many decryption
queries as the total number of ciphertext segments in 𝒜’s decryption queries. Adversary ℬ′ makes the
same number of queries as the number of (partial) streams that 𝒜 encrypts or decrypts. Moreover,
with probability at least 1 − 2−ℓ, adversary ℬ is max{4ℓ, 4𝑞/2ℓ}-repeating.
18
procedure ℰ.init(𝐾, 𝑁)
(𝐿, 𝑃 ) ← KD(𝐾, 𝑁)
return (𝐿, 𝑃, 1)
procedure ℰ.next(𝑆, 𝐴, 𝑀)
(𝐿, 𝑃, 𝑖) ← 𝑆; 𝑆 ← (𝐿, 𝑃, 𝑖 + 1)
𝐶 ← E𝐿(⟨𝑃, 𝑖, 0⟩, 𝐴, 𝑀)
return (𝐶, 𝑆)
procedure ℰ.last(𝑆, 𝐴, 𝑀)
(𝐿, 𝑃, 𝑖) ← 𝑆
𝐶 ← E𝐿(⟨𝑃, 𝑖, 1⟩, 𝐴, 𝑀)
return 𝐶
procedure 𝒟.init(𝐾, 𝑁)
(𝐿, 𝑃 ) ← KD(𝐾, 𝑁)
return (𝐿, 𝑃, 1)
procedure 𝒟.next(𝑆, 𝐴, 𝐶)
(𝐿, 𝑃, 𝑖) ← 𝑆; 𝑆 ← (𝐿, 𝑃, 𝑖 + 1)
𝑀 ← D𝐿(⟨𝑃, 𝑖, 0⟩, 𝐴, 𝐶)
return (𝑀, 𝑆)
procedure 𝒟.last(𝑆, 𝐴, 𝐶)
(𝐿, 𝑃, 𝑖) ← 𝑆
𝑀 ← D𝐿(⟨𝑃, 𝑖, 1⟩, 𝐴, 𝐶)
return 𝑀
Fig. 11: The canonical online AE scheme SE2[KD, 𝛱] = (𝒦,ℰ,𝒟) that is built on top on a conven-
tional AE scheme 𝛱 = (K, E, D) and a key-derivation function KD.
Discussion. Note that in Theorem 3, the constructed adversary ℬ is max{4ℓ, 4𝑞/2ℓ}-repeating,
provided that nonces for each user are unique. This makes SE2 more robust to randomness failure
KD(ℬ′))
than SE1. However, this claim is under an implicit assumption (lying beneath the term Advprf
that the master key is 256-bit long, Note that derived subkeys 𝐿 can still be of 128-bit if one wants
to use AES-128 for GCM.
As Tink aims to support both AES-GCM-128 and AES-GCM-256, KD may have to produce 39
bytes. The simplest way is to instantiate KD via HMAC-SHA384. (If one wants to instantiate KD
via HMAC-SHA256 then it may require two hash calls.)
For applications that can tolerate 15-byte nonces then one can instantiate KD via the XOR con-
struction in Section 5. Specifically, suppose that we are given a PRF 𝐹 : 𝒦 × {0, 1}127 → {0, 1}128
which we can directly instantiate via the XOR construction. For a string 𝑋 with |𝑋| < 127, let
𝑋 ‖ 0* denote 𝑋 ‖ 0127−|𝑋|. If 𝑘 = 128 and ℓ = 56 then
KD(𝐾, 𝑋) ← 𝐹𝐾(𝑋 ‖ 0 ‖ 0*) ‖ 𝐹𝐾(𝑋 ‖ 1 ‖ 0*)[1 : 56] .
If 𝑘 = 256 and ℓ = 56 then we let KD(𝐾, 𝑋) to be
𝐹𝐾(𝑋 ‖ 00 ‖ 0*) ‖ 𝐹𝐾(𝑋 ‖ 01 ‖ 0*) ‖ 𝐹𝐾(𝑋 ‖ 10 ‖ 0*)[1 : 56] .
(1)
(2)
Hence we would need 2 or 3 calls to the XOR construction, which amounts to 4 or 6 (fully paralel-
lizable) AES calls. Thus KD has the same speed as the key-derivation of AES-GCM-SIV [13].
19
<NKLͳͲͳʹAͳAʹMͳMʹCͳCʹELELPPPprocedure ℰ.init(𝐾, 𝑁)
(𝑅, 𝑃 ) ← 𝑁; (𝐿, 𝑋) ← KD(𝐾, 𝑅)
𝑃 * ← 𝑋 ⊕ 𝑃
return (𝐿, 𝑁, 𝑃 *, 1)
procedure ℰ.next(𝑆, 𝐴, 𝑀)
(𝐿, 𝑁, 𝑃 *, 𝑖) ← 𝑆
𝑆 ← (𝐿, 𝑁, 𝑃 *, 𝑖 + 1)
𝐶 ← E𝐿(⟨𝑃 *, 𝑖, 0⟩, 𝐴, 𝑀)
return (𝐶, 𝑆)
procedure ℰ.last(𝑆, 𝐴, 𝑀)
(𝐿, 𝑁, 𝑃 *, 𝑖) ← 𝑆
𝐶 ← E𝐿(⟨𝑃 *, 𝑖, 1⟩, 𝐴, 𝑀)
return 𝐶
procedure 𝒟.init(𝐾, 𝑁)
(𝑅, 𝑃 ) ← 𝑁; (𝐿, 𝑋) ← KD(𝐾, 𝑅)
𝑃 * ← 𝑋 ⊕ 𝑃
return (𝐿, 𝑁, 𝑃 *, 1)
procedure 𝒟.next(𝑆, 𝐴, 𝐶)
(𝐿, 𝑁, 𝑃 *, 𝑖) ← 𝑆
𝑆 ← (𝐿, 𝑁, 𝑃 *, 𝑖 + 1)
𝑀 ← D𝐿(⟨𝑃 *, 𝑖, 0⟩, 𝐴, 𝐶)
return (𝑀, 𝑆)
procedure 𝒟.last(𝑆, 𝐴, 𝐶)
(𝐿, 𝑁, 𝑃 *, 𝑖) ← 𝑆
𝑀 ← D𝐿(⟨𝑃 *, 𝑖, 1⟩, 𝐴, 𝐶)
return 𝑀
Fig. 12: The canonical online AE scheme SE3[KD, 𝛱] = (𝒦,ℰ,𝒟) that is built on top of a conven-
tional AE scheme 𝛱 = (K, E, D) and a key-derivation function KD.
For applications that need longer nonces, it is unclear how to build a beyond-birthday-bound KD
efficiently via AES; we leave it as an open problem. In Section 6.2, we give an alternative canonical
online AE scheme SE3 that has the best of both worlds: (i) its nOAE2 security is as good as SE2,
and (ii) it supports long nonces, say 22 bytes, and (iii) its key-derivation can be built as indicated
in Eq. (1) and Eq. (2).
6.2 Scheme SE3
The scheme. Let 𝛱 = (K, E, D) be a conventional AE scheme of 𝑘-bit key length. We associate
to it an encoding mechanism ⟨·⟩ that turns a triple (𝑃, 𝑖, 𝑎) of a nonce prefix 𝑃, a counter 𝑖, and a
flag 𝑎 into a nonce of 𝛱. Assume that under this encoding, a nonce prefix must have bit length ℓ.
For example, if we instantiate 𝛱 via GCM and use four bytes to encode a counter and one byte
for the flag as in Tink, then ℓ = 56. Let KD : 𝒦 × {0, 1}𝑠 → {0, 1}𝑘 × {0, 1}ℓ be a key-derivation
function. The scheme SE3[KD, 𝛱] = (𝒦,ℰ,𝒟) of the same key space as KD is specified in Fig. 12;
its nonce space is {0, 1}𝑠 × {0, 1}ℓ.
Informally, a nonce 𝑁 in SE3 is still a pair (𝑅, 𝑃) and we feed only 𝑅 to KD, as in SE1. However, in
addition to a subkey 𝐿, we also derive a secret mask 𝑋, and use that to whiten the nonce prefix 𝑃,
obtaining an effective nonce prefix 𝑃 * ← 𝑃 ⊕ 𝑋. Nonces for the conventional AE scheme 𝛱 are
based on 𝑃 * instead.
20
<RKLͳͲͳʹAͳAʹMͳMʹCͳCʹELELPȗPȗPPȗͲIn instantiating KD, one can let 𝑠 = 120 and ℓ = 56, meaning that nonces of SE3 are 22-byte long.
One then can instantiate KD as indicated in Eq. (1) and Eq. (2). Again, we recommend using a
256-bit key for KD to resist key-collision attacks.
Analysis of SE3. Theorem 4 below confirms that SE3 is as good as SE2. Below, we sketch some
proof ideas; the full proof is in Appendix E.
Theorem 4. Let 𝛱 = (K, E, D) be a conventional AE scheme, and let KD : 𝒦 × {0, 1}𝑠 →
{0, 1}𝑘 × {0, 1}ℓ be a key-derivation function. For any adversary 𝒜 attacking SE3[KD, 𝛱] that
makes at most 𝑞 queries, we can construct adversaries ℬ and ℬ′ of about the same efficiency as 𝒜
such that
Advnoae2
SE3[KD,𝛱](𝒜) ≤ Advae
𝛱(ℬ) + Advprf
KD(ℬ′) + 2−ℓ .
Adversary ℬ makes the same number of encryption queries as 𝒜, and at most as many decryption
queries as the total number of ciphertext segments in 𝒜’s decryption queries. Adversary ℬ′ makes the
same number of queries as the number of (partial) streams that 𝒜 encrypts or decrypts. Moreover,
adversary ℬ is max{4ℓ, 4𝑞/2ℓ}-repeating.
Proof ideas. It is tricky to prove that the constructed adversary ℬ is 𝑑-repeating, where 𝑑 =
max{4ℓ, 4𝑞/2ℓ}.
First, one can only use balls-into-bins analysis here if 𝒜 non-adaptively picks its queries. If the
adversary somehow can adaptively learn the effective nonce prefixes via its queries then it can
make ℬ’s nonces repeat among as many users as it likes. To deal with this issue, we employ a trick
in [18] for constructing ℬ. Specifically, ℬ keeps track of the max load of its bin, and terminates
prematurely with output 1 when some bin contains 𝑑 balls. In the real world, ℬ is supposed to
output 1, and thus the premature termination only increases the chance that its guess is correct. In
the ideal world of ℬ, whatever 𝒜 receives are independent of the effective nonce prefixes, and thus
its queries are non-adaptive. We will then use a balls-into-bins argument to bound the probability
of premature termination in the ideal world.
Next, we cannot immediately use Lemma 2 because in our situation, the throws are dependent. For
example, for two encryption queries of the same user with nonces 𝑁1 = (𝑅, 𝑃1) and 𝑁2 = (𝑅, 𝑃2)
such that 𝑃1 ̸= 𝑃2, their effective nonce prefixes 𝑃 *
2 must be different, meaning that the
corresponding two balls must go to different bins. To resolve this issue, we observe that in this
setting, for any 𝑑 balls, the chance that they all go to the same bin is at most 2(1−𝑑)ℓ. This is
actually the only hypothesis that the proof of Lemma 2 in [17] needs, although its statement is
given for uniformly thrown balls.
1 and 𝑃 *
7 Conclusions
We give a multi-user analysis of the streaming encryption in Google’s Tink library, by viewing it
as a canonical online AE scheme SE1. We show that SE1 is secure for any proper way to generate
nonces, but Tink’s choice of random nonces, coupled with a nonce-based key-derivation function KD,
indeed improves the concrete security bound. Motivated by the fact that SE1’s design is not robust
against randomness failure, we propose better designs SE2 and SE3. In addition, instead of relying
on HMAC-SHA256, we show how to efficiently instantiate KD from AES via the XOR construction.
Our instantiation of KD is as fast as the key-derivation function of AES-GCM-SIV.