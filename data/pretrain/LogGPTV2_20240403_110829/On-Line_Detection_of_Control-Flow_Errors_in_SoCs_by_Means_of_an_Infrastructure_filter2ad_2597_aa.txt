# Title: On-Line Detection of Control-Flow Errors in SoCs Using an Infrastructure IP Core

# Authors:
Paolo Bernardi, Letícia Maria Veiras Bolzani, Maurizio Rebaudengo, Matteo Sonza Reorda, Fabian Vargas, and Massimo Violante

# Affiliations:
1. Universidade Federal do Rio Grande do Sul, Escola de Engenharia, Departamento de Engenharia Elétrica
2. Universidade Federal do Rio Grande do Sul, Instituto de Informática, Departamento de Informática Aplicada
3. Politecnico di Torino, Dipartimento di Automatica e Informatica

# Contact:
Email: {calisboa, carro}@inf.ufrgs.br, {massimo.violante, matteo.sonzareorda}@polito.it

## Abstract
The time-to-market demands of embedded systems necessitate the reuse of software and hardware components. However, the increasing sensitivity of hardware to soft errors requires effective error detection techniques, even in general-purpose systems. Control flow error detection techniques are typically either hardware or software intrusive, requiring modifications to the processor architecture or changes in the application software. This paper proposes a non-intrusive and low-cost technique for System-on-Chip (SoC) designs that can detect errors affecting the program counter with minimal area and performance overheads, without any changes to the core processor hardware or the application software.

## 1. Introduction
The growing demands and competitive needs of the embedded systems market, with ever-shrinking time-to-market requirements, have made the use of SoCs incorporating previously tested Intellectual Properties (IPs) or FPGAs with built-in factory-supplied processors, preferred alternatives for fast product deployment. The use of standard library applications, for which the source code is not always available, provides another path to rapid product development.

Simultaneously, the evolution of technology towards nanoscale has increased the sensitivity of hardware to radiation-induced soft errors, caused by particle collisions with silicon. These events generate transient pulses that may change the logic output value of the affected gate, potentially propagating through an open logic path and being stored in a memory element. While this was formerly a concern only for mission-critical or space applications, the increase in the soft error rate of circuits manufactured with new technologies has turned this into a challenge for system designers.

Many different techniques for mitigating soft errors have been proposed, but most require modifications to the hardware or software of the SoC's core processor, or both. These techniques often impose significant area and/or performance penalties, which may be unacceptable for certain applications.

This paper proposes the use of an infrastructure IP (I-IP) that can be inserted into the SoC without any changes to the core processor architecture. This I-IP can monitor the execution of the application and detect control flow errors generated by transient faults affecting the program counter of the core processor. The proposed technique does not require any modification of the application software, making it non-intrusive from both hardware and software perspectives.

In fault injection tests of the proposed solution, performed on a SoC based on a pipelined RISC core processor running a benchmark application, all errors affecting the program counter were detected.

This paper is organized as follows: Section 2 provides an overview of generic and control flow error detection techniques. Section 3 describes the proposed approach, and Section 4 presents the results obtained with one implementation of the I-IP for a MIPS-based SoC. Section 5 summarizes the conclusions and points to future work.

## 2. Transient Error Detection Techniques
This section focuses on techniques for detecting transient errors, which are temporary faults that can affect the behavior of a system, allowing it to eventually recover and return to a consistent state. Recovery techniques are beyond the scope of this paper.

### 2.1. Generic Online Error Detection Techniques
Many online, or concurrent, error detection techniques have been proposed to detect errors that occur during normal operation and cannot be detected by manufacturing test procedures. These techniques can be divided into circuit-level and system-level approaches based on the architectural level at which they are applied. Circuit-level techniques include self-checking circuits, error-detecting codes, and parity schemes, while system-level approaches include replication and watchdog processors.

Another classification divides these techniques into hardware-based, software-based, and hybrid techniques. Hardware-based solutions generally involve redundancy or reconfiguration, such as triple modular redundancy (TMR), checker circuits, and spare units. The main drawback of these approaches is the need to modify the system's hardware, which precludes their use in hardening tested IP core processors or commercial off-the-shelf processors embedded in FPGAs, commonly used in SoCs to shorten time-to-market.

In [2], a hardware-based technique using an external infrastructure IP (I-IP) that monitors the core processor buses was proposed. This approach does not require modification of the core processor architecture or the application software. Using consistency checks for data processing instructions and control flow, the implementation of this solution on an 8051 microcontroller detected more than 81% of errors when one instruction was hardened and more than 87% with two hardened instructions.

Software-based techniques are also system-level and generally require modification of the application, which may not always be feasible. These solutions require additional memory and have significant performance penalties. Hybrid techniques aim to leverage the strengths of both hardware and software-based approaches to optimize area and performance overheads according to the target market and application.

### 2.2. Specific Techniques for Control Flow Error Detection
This work focuses on techniques aimed at protecting the system against transient faults that cause single-event upsets (SEUs) in the program counter of a processor, leading to control flow errors. Control flow error detection techniques are generally based on assertions or signature analysis.

The use of watchdog processors is sometimes suggested for control flow checking. In [11], an active watchdog processor executes the program concurrently with the core processor, checking if its program flow matches that of the main processor. This approach, however, has heavy performance and area penalties. Alternative approaches using a passive watchdog processor that computes a signature while observing the main processor’s bus and performs consistency checks at basic block boundaries are proposed in [12, 13]. These approaches have smaller area overheads but still introduce performance penalties.

In [14], a combination of two software-based and one hardware-based mechanism was used to provide increased fault tolerance, detecting 93% of control flow errors. This work showed improvements over the use of individual techniques but did not provide overhead analysis.

In [15], a technique called Enhanced Control-Flow Checking Using Assertions (ECCA) was proposed, combining application and system-level mechanisms for online control flow error detection. Tested with benchmark applications, ECCA detected an average of 98% of control flow errors, with a minimum of 78.5% and a maximum of 100%. Although the authors claim minimal memory and performance overheads, exact figures were not provided. The technique requires modification of the application software and a non-trivial performance/overhead analysis, leading the authors to propose a preprocessor for the gcc compiler to insert assertions.

Control Flow Checking by Software Signatures (CFCSS) is another important software-based technique proposed in [8], which significantly reduced undetected control flow errors in benchmark applications. This technique also requires modification of the application code and does not detect all control flow errors due to limitations in certain types of error detection.

The use of control flow assertions was also proposed in [9]. This software-based approach introduces additional executable assertions to check the control flow. Tests on 16 benchmarks showed improvements over CFCSS and ECCA, but the technique is very expensive in terms of memory and performance overhead.

The hardware-based technique proposed in [2] aims to protect a core processor against transient faults, using SEU in the memory elements as the fault model. This technique does not focus solely on control flow error detection but also includes consistency checks for data processing instructions. As a non-intrusive technique, it does not require modifications to the application software or the core processor hardware, eliminating the need to access the source code of the application. However, the technique did not detect all control flow errors.