title:On-Line Detection of Control-Flow Errors in SoCs by Means of an Infrastructure
IP Core
author:Paolo Bernardi and
Let&apos;ıcia Maria Veiras Bolzani and
Maurizio Rebaudengo and
Matteo Sonza Reorda and
Fabian Vargas and
Massimo Violante
A non-intrusive on-line control flow error detection technique for SoCs
E. L. Rhod1, C. A. Lisbôa2, L. Carro2, M. Violante3, M. Sonza Reorda3
1Universidade Federal do Rio Grande do Sul, Escola de Engenharia, Dep. Engenharia Elétrica
2Universidade Federal do Rio Grande do Sul, Instituto de Informática, Dep. Informática Aplicada
3Politecnico di Torino, Dipartimento di Automatica e Informatica
PI:EMAIL,{calisboa, carro}@inf.ufrgs.br,{massimo.violante,matteo.sonzareorda}@polito.it
Abstract
systems.  Control 
The  time  to  market  demands  of  embedded  systems
make the reuse of software and hardware components a
mandatory  design  approach,  while 
the  growing
sensitivity of hardware to soft errors requires effective
error  detection  techniques  to  be  used  even  in  general
purpose 
flow  error  detection
techniques  are  usually  either  hardware  or  software
intrusive,  requiring  modification  of 
the  processor
architecture  or  changes  in  the  application  software.
This  paper  proposes  a  non-intrusive  and  low  cost
technique  to  be  used  in  SoC  designs,  that  is  able  to
detect  errors  affecting  the  program  counter  with  very
small  area  and  performance  overheads,  without  the
need  of  any  changes  in  the  core  processor  hardware
nor in the application software.
1. Introduction
The growing demands and competitive needs of the
embedded systems market, with ever shrinking time to
market  requirements,  has  made  the  use  of  SoCs
incorporating  previously  tested  IPs,  or  the  use  of
FPGAs  with  built-in  factory  supplied  processors,
preferred    alternatives  to  provide    fast  deployment  of
new  products.  As  to  the  software  of  SoCs,  the  use  of
standard library applications, for which the source code
is  not  always  available,  provides  another  path  to  fast
product development.
At the same time, the technology evolution towards
nanoscale  brings  along  higher  sensitivity  of 
the
hardware  to  radiation  induced  soft  errors,  caused  by
collisions  of  particles  with  the  silicon.  These  events
generate  transient  pulses  that  may  change  the  logic
output  value  of  the  affected  gate  and  the  wrong  value
may  be  propagated  through  an  open  logic  path  in  the
circuit, and eventually be stored in a memory element.
Formerly  a  concern  only  for  mission  critical  or  space
applications,  the  increase  of  the  soft  error  rate  of
circuits manufactured with new technologies turned this
topic into a challenge for system designers.
Many different techniques for soft errors mitigation
have  already  been proposed, but  most  of  them  require
modification of the hardware or software of the SoC’s
core  processor,  or  even  both.  Besides  that,  these
techniques 
imply  heavy  area  and/or
frequently 
performance  penalties,  that  may  not  be  bearable  for  a
given application.
This  paper  proposes  the  use  of  an  infrastructure  IP
(I-IP)  that  can  be  inserted  in  the  SoC  without  any
change in the core processor architecture, and is able to
monitor  the  execution  of  the  application  and  detect
control  flow  errors  generated  by 
transient  faults
affecting the program counter of the core processor. The
proposed  technique  does  not  require  any  modification
of  the  application  software,  being  non-intrusive  from
both hardware and software standpoints.
In  fault  injection  tests  of  the  proposed  solution,
performed for an implementation of the I-IP for a SoC
based  on  a  pipelined  RISC  core  processor,  running  a
benchmark application, all errors affecting the program
counter have been detected.
This  paper  is  organized  as  follows.  Section  2
presents an overview of generic and control flow error
detection  techniques,  section  3  describes  the  proposed
approach,  and  section  4  presents  the  results  obtained
with one implementation of the I-IP for a MIPS based
SoC. Section 5 summarizes the conclusions and points
to future works.
2. Transient errors detection techniques
This section focuses on techniques to detect transient
errors,  i.e.,  those  resulting  from  faults  that  may  affect
the behavior of a system in a temporary fashion, thereby
allowing the system to eventually recover from the error
and return to a consistent state. Recovery techniques are
beyond the scope of this paper.
2.1. Generic online error detection techniques
Many  on-line,  or  concurrent,  error  detection
techniques have been proposed so far. Those techniques
aim  to  detect  errors  that  occur  during  the  normal
operation of systems, and therefore cannot be detected
by test procedures in the manufacturing process.
system-level 
According  to  the  architectural  level  at  which  the
technique  is  applied,  they  can  be  divided  into  circuit-
level  and 
techniques.  Self-checking
circuits,  error  detecting  codes,  and  parity  schemes  are
examples  of  circuit-level  techniques,  while  replication
and  watchdog  processors  are  system-level  approaches
[1].
Another  usual  classification  of  those  techniques
divides them into hardware based, software based, and
hybrid techniques [2].
Hardware based solutions generally imply the use of
redundancy  or  reconfiguration  [3].  Examples  are  the
triple modular redundancy approach (TMR) [4], the use
of  checker  circuits  that  run  in  parallel  with  the  main
processor  to  verify  its  operations  [5],  and  the  use  of
spare units that can replace a faulty one when an error is
detected [6]. The main drawback of those approaches is
the  need  to  modify  the  hardware  of  the  system  to  be
hardened, which precludes their use to harden tested IP
core processors or commercial off-the-shelf processors
embedded in FPGA chips, which are frequently used in
SoCs designs as a means to shorten the time to market
of products.
that  monitors 
infrastructure  IP 
In  [2],  a  hardware  based  technique  that  uses  an
external 
the  core
processor  buses  to  harden  applications,  and  therefore
does  not  require  modification  of  the  core  processor
architecture  nor  of  the  application  software,  was
proposed. Using consistency check for data processing
instructions  and  also  checking  the  core  processor
control  flow,  the  implementation  of  the  proposed
solution to harden one application running on an 8051
microcontroller was proven to detect more than  81% of
errors when only one instruction was hardened by the I-
IP, and more than 87% with two hardened instructions.
Software based techniques are also system-level. In
general, they imply modification of the application to be
hardened, and this requires changes and/or additions to
the source code of the application, which is not always
available.  Besides  that,  solutions  in  this  class  require
additional  memory  to  store  the  hardened  application,
and  also  have  significant  performance  penalties  [7,  8,
9].
Hybrid techniques, such as [10, 14], try to leverage
on the strengths of hardware and software based ones,
the  area  and  performance
in  order 
overheads  according 
to 
target  market  and
application.
to  optimize 
the 
2.2. Specific  techniques  for  control  flow  error
detection
This  work  focuses  specifically  on  those  techniques
aiming to protect the system against transient faults that
cause  SEUs  in  the  program  counter  of  a  processor
during  its  operation,  thereby  causing  control  flow
errors, which are a subset of the types of errors that may
occur during the normal operation of a system. Control
flow  error  detection  techniques  are  generally  based  in
the use of assertions or signature analysis [3], and some
of them are commented in the following paragraphs.
The  use  of  watchdog  processors  is  sometimes
suggested also for control flow check. In [11], an active
watchdog processor executes the program concurrently
with the core processor, and checks if its program flow
proceeds  as  that  executed by  the  main  processor.  This
approach, however, has heavy penalties both in terms of
application  performance  and 
the  additional  area
required  for  the  watchdog  processor.  Two  alternative
approaches,  using  a  passive  watchdog  processor  that
to 
computes  a  signature  while  observing 
the  main
processor’s  bus  and  performs  consistency  checks
whenever  the  program  enter  or  leaves  a  basic  block
within  the  program  graph,  are  proposed  in  [12,  13].
While their area overhead is much smaller than that of
active  watchdog  processors,  there  is  a  performance
overhead 
to
communicate with the watchdog.
instructions  needed 
introduced  by 
tolerance 
In [14], two software based and one hardware based
mechanisms  have  been  combined,  in  order  to  provide
increased 
this
arrangement  allowed  the  detection  of  93%  of  the
control flow errors. This work presented improvements
obtained  with  the  combination  of  the  three  techniques
over  the  use  of  them  separately,  but  no  overhead
analysis was provided.
faults,  and 
transient 
In  [15],  a  technique  called  Enhanced  Control-Flow
Checking  Using  Assertions  (ECCA),  which  combines
the use of application and system level mechanisms to
provide  on-line  detection  of  control  flow  errors,  was
proposed. Tested with a set of benchmark applications,
the  ECCA  technique  was  able  to  detect  an  average  of
98%  of  the  control  flow  errors,  with  a  minimum  of
78.5% and a maximum of 100% obtained for one of the
benchmarks.  Although  the  authors  claim  that  this
technique implies in minimal memory and performance
overheads,  the  exact  figures  are  not  presented  in  the
paper.  However,  the  implementation  of  the  technique
requires modification of the application software and a
non trivial performance/overhead analysis, and for this
reason the authors themselves propose the development
of  a  preprocessor  for  the  gcc  compiler  to  insert  the
assertions in the code blocks to be fortified.
Control  Flow  Checking  by  Software  Signatures
(CFCSS) is another important software based technique
proposed in [8], which provided a dramatic reduction in
the  number  of  undetected  control  flow  errors  when
tested  with  a  set  of  benchmark  applications.  This
technique also requires modification of the application
code, and does not detect all control flow errors, due to
some  limitations  in  the  detection  of  certain  types  of
errors [9].
The use of control flow assertions was also proposed
in  [9].  This  software  based  approach  requires  the
introduction of additional executable assertions to check
the control flow of the program. A set of 16 benchmarks
has  been  hardened  against  transient  errors  using  the
proposed technique, and tested with SEU fault injection
in  the  bits  of  the  immediate  operands  of  branch
instructions. The results have shown that this approach
has an improvement over CFCSS [8] and ECCA [15],
however the technique proved to be very expensive in
terms  of  memory  and  performance  overhead,  even
though the overheads are application dependent.
The hardware based technique proposed in [2] aims
to protect a core processor against transient faults, using
the SEU in the memory elements of the processor as the
fault model. As mentioned above, this technique did not
focus  only  in  the  control  error  detection,  but  also  in
consistency check for the execution of data processing
instructions. Being a non-intrusive  technique  that does
not  require  modifications  either  in  the  application
software  nor  in  the  hardware  of  the  core  processor,
there  is  no  need  to  access  the  source  code  of  the
application.  However,  the  technique  did  not  detect  all