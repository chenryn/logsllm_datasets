to include break statements. In other languages, execution often continues 
through each of the cases until the code reaches a break statement or the end 
of the switch. Go will execute no more than one matching or default case.
Go also contains a special variation on the switch called a type switch 
that performs type assertions by using a switch statement. Type switches 
are useful for trying to understand the underlying type of an interface. 
Go Fundamentals   15
For example, you might use a type switch to retrieve the underlying type 
of an interface called i:
func foo(iu interface{}) {
    switch v := i.(type)v {
    case int:
        fmt.Println("I'm an integer!")
    case string:
        fmt.Println("I'm a string!")
    default:
        fmt.Println("Unknown type!")
    }
}
This example uses special syntax, i.(type) v, to retrieve the type of the 
i interface variable u. You use this value in a switch statement in which each 
case matches against a specific type. In this example, your cases check for 
int or string primitive types, but you could very well check for pointers or 
user-defined struct types, for instance. 
Go’s last flow control structure is the for loop. The for loop is Go’s 
exclusive construct for performing iteration or repeating sections of code. 
It might seem odd to not have conventions such as do or while loops at your 
disposal, but you can re-create them by using variations of the for loop syn-
tax. Here’s one variation of a for loop:
for i := 0; i child"`
}
The string values, wrapped in backticks and following the struct fields, 
are field tags. Field tags always begin with the tag name (xml in this case), 
followed by a colon and the directive enclosed in double quotes. The direc-
tive defines how the fields should be handled. In this case, you are supply-
ing directives that declare that Bar should be treated as an attribute named 
id, not an element, and that Baz should be found in a subelement of parent, 
named child. If you modify the previous JSON example to now encode the 
structure as XML, you would see the following result:
Hello Shabado
20   Chapter 1
The XML encoder reflectively determines the names of elements, using 
the tag directives, so each field is handled according to your needs. 
Throughout this book, you’ll see these field tags used for dealing 
with other data serialization formats, including ASN.1 and MessagePack. 
We’ll also discuss some relevant examples of defining your own custom 
tags, specifically when you learn how to handle the Server Message Block 
(SMB) Protocol.
Summary
In this chapter, you set up your Go environment and learned about the 
fundamental aspects of the Go language. This is not an exhaustive list of 
all Go’s characteristics; the language is far too nuanced and large for us 
to cram it all into a single chapter. Instead, we included the aspects that 
will be most useful in the chapters that follow. We’ll now turn our atten-
tion to practical applications of the language for security practitioners 
and hackers. Here we Go! 
Let’s begin our practical application of Go 
with the Transmission Control Protocol (TCP), 
the predominant standard for connection-
oriented, reliable communications and the 
foundation of modern networking. TCP is everywhere,  
and it has well-documented libraries, code samples, and 
generally easy-to-understand packet flows. You must 
understand TCP to fully evaluate, analyze, query, and 
manipulate network traffic. 
As an attacker, you should understand how TCP works and be able to 
develop usable TCP constructs so that you can identify open/closed ports, 
recognize potentially errant results such as false-positives—for example, syn-
flood protections—and bypass egress restrictions through port forwarding. 
In this chapter, you’ll learn basic TCP communications in Go; build a concur-
rent, properly throttled port scanner; create a TCP proxy that can be used for 
port forwarding; and re-create Netcat’s “gaping security hole” feature.
2
T CP,  SC A N N E R S, A N D PROX IE S
22   Chapter 2
Entire textbooks have been written to discuss every nuance of TCP, 
including packet structure and flow, reliability, communication reassem-
bly, and more. This level of detail is beyond the scope of this book. For 
more details, you should read The TCP/IP Guide by Charles M. Kozierok 
(No Starch Press, 2005).
Understanding the TCP Handshake
For those who need a refresher, let’s review the basics. Figure 2-1 shows how 
TCP uses a handshake process when querying a port to determine whether 
the port is open, closed, or filtered.
Server
Client
Server
Client
Server
Client
syn
syn-ack
ack
Open Port
syn
rst
Closed Port
syn
Filtered Port
Firewall
Timeout
Figure 2-1: TCP handshake fundamentals 
If the port is open, a three-way handshake takes place. First, the client 
sends a syn packet, which signals the beginning of a communication. The 
server then responds with a syn-ack, or acknowledgment of the syn packet 
it received, prompting the client to finish with an ack, or acknowledgment 
of the server’s response. The transfer of data can then occur. If the port 
is closed, the server responds with a rst packet instead of a syn-ack. If the 
traffic is being filtered by a firewall, the client will typically receive no 
response from the server. 
TCP, Scanners, and Proxies   23
These responses are important to understand when writing network-
based tools. Correlating the output of your tools to these low-level packet 
flows will help you validate that you’ve properly established a network con-
nection and troubleshoot potential problems. As you’ll see later in this 
chapter, you can easily introduce bugs into your code if you fail to allow 
full client-server TCP connection handshakes to complete, resulting in 
inaccurate or misleading results.
Bypassing Firewalls with Port Forwarding
People can configure firewalls to prevent a client from connecting to certain 
servers and ports, while allowing access to others. In some cases, you can cir-
cumvent these restrictions by using an intermediary system to proxy the con-
nection around or through a firewall, a technique known as port forwarding.
Many enterprise networks restrict internal assets from establishing HTTP 
connections to malicious sites. For this example, imagine a nefarious site 
called evil.com. If an employee attempts to browse evil.com directly, a fire-
wall blocks the request. However, should an employee own an external 
system that’s allowed through the firewall (for example, stacktitan.com), 
that employee can leverage the allowed domain to bounce connections 
to evil.com. Figure 2-2 illustrates this concept. 
stacktitan.com
Client
evil.com
Request
stacktitan.com
Request
traverses
firewall
Traffic proxied
to evil.com
Figure 2-2: A TCP proxy 
A client connects, through a firewall, to the destination host stacktitan.com. 
This host is configured to forward connections to the host evil.com. While 
a firewall forbids direct connections to evil.com, a configuration such as the 
one shown here could allow a client to circumvent this protection mecha-