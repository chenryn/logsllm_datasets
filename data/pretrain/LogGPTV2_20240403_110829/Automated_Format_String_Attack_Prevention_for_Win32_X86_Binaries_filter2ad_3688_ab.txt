to the two original input arguments. Because vprintf-like
functions use a separate pointer to refer to the input argu-
ment list, this pointer can be passed through layers of wrap-
per functions before it is actually de-referenced. As a re-
sult, the function in which a va list structure is prepared
may not directly call the function in which the arguments in
the va list structure are accessed. Accordingly, Lisbon
needs to identify the function whose stack frame actually
holds the list of input arguments, and puts bound checking
into the function it calls. Let’s use the following example to
illustrate Lisbon’s list bound checking mechanism. Assume
an application calls a function user wrapper, which
prepares a va list structure and calls another function
vprintf wrapper, which in turn calls vprintf. Lisbon
needs to identify the function in which the va list data
structure is prepared, in this example, the user wrapper
function, and puts the list bound check into the function that
user wrapper calls, in this case vprintf wrapper.
void user_wrapper(
const char *fmt, ...
void vprintf_wrapper (
const char *fmt,
va_list ap
va_list ap;
... ...
va_start(ap, fmt);
vprintf_wrapper(fmt, ap);
va_end (ap);
... ...
)
{
}
... ...
vprintf (fmt, ap);
... ...
)
{
}
To identify the function in whose stack frame the
va list data structure of a vprintf-like function call is
stored, Lisbon ﬁrst constructs a function call graph of the
given binary [16], and traces backward from the vprintf-
like function being called. In this trace-back process, Lis-
bon performs a backward def-use data ﬂow analysis starting
from the vprintf-like function’s pointer argument, to iden-
tify where its value is ﬁrst created. As a heuristic, Lisbon
searches for a speciﬁc instruction sequence corresponding
to the macro ‘‘va start(ap, fmt)".
3.3. Detecting List Bound Violation
One way to detect argument list bound violation for
fprintf-like functions is to count the number of arguments at
the call site, compare that count with the number of conver-
sion speciﬁers in the format string, and declare a violation
if the latter is larger than the former. This method requires
one to interpret the format string in the same way as the
fprintf-like functions. Although it is conceptually simple,
there are two disadvantages. First, this approach requires
the same format string handling engine in the C runtime li-
brary. Otherwise, any discrepancies might leave a loophole
for attackers to exploit. Second and more importantly, it is
not always possible to get an accurate count of the number
of arguments for every function call in a binary program.
Therefore, this approach cannot easily be applied to binary
programs.
Lisbon takes a more general approach to checking argu-
ment list bound violation. More concretely, for each fprintf-
401401
like or vprintf-like function call, it identiﬁes its input ar-
gument list, reserves a canary word [7] immediately after
the list’s end, and checks if the called function accesses the
canary word at run time. Even though a format string at-
tack could use the “%n” directive to tamper with any ar-
bitrary memory location in the victim application, such an
attack needs to put the target memory location’s address in
the victim variadic function call’s input argument list ﬁrst.
However, the proposed input argument list bound checking
approach could detect and stop accesses to the memory ad-
dress arguments associated with the “%n” directives, and
thus effectively prevent such tampering.
The proposed scheme enforces the following invariant:
the canary word associated with the input argument list of
an fprintf-like or vprintf-like function call should never be
accessed by the called function and its descendants in the
function call graph. Because a called fprintf-like or vprintf-
like function may access the caller’s stack frame through
a pointer passed in as an input argument, it is not safe to
mark an existing word in the caller’s stack frame as a ca-
nary word. Instead, Lisbon creates a stub wrapper function
that copies the original arguments, reserves a canary word
above the argument list, then calls the callee function, and
ﬁnally cleans up and returns after the callee returns. Fig-
ure 2 shows how the stack layout associated with a printf()
call changes as a result of the introduction of this stub wrap-
per function.
Canary
Figure 2. The stack frames before and after
Lisbon’s stub wrapper function
This stub wrapper function is introduced immediately
above the fprintf-like function in the case of an fprintf-
like function call, and immediately below the function in
which the va list data structure is created in the case of
a vprintf-like function call.
A key challenge in protecting executable binaries from
format string attacks is to infer the number of arguments
in each call to a printf-like function. Lisbon solves this
problem by shifting the focus to the protection of callers
of printf-like functions, as it is more important to protect
the local variables of a caller of a printf-like function than
to stop the printf-like function from stepping outside its in-
put argument list. So the research question becomes how
to identify the local variable region of a caller to a printf-
like function so that Lisbon can copy everything between
the end of the caller’s local variable region and the current
stack pointer to the stub wrapper function and set up the
canary word accordingly. The Visual C++ compiler on the
Windows platform follows the convention that when a func-
tion is called, it ﬁrst allocates its local variable region on the
stack, and then grows the stack further when the function
actually calls other functions. This convention allows Lis-
bon to treat the stack region that is immediately allocated
after a function’s prolog to be its local variable region. Us-
ing this approach, which is applicable to both fprintf-like
and vprintf-like functions, Lisbon does not need to know the
exact number of arguments used in each printf-like function
call, and still can effectively protect the caller’s stack from
being overﬂowed by a format string attack.
4. Implementation
4.1. Binary Analysis and Instrumentation
Infrastructure
Because the design goal of Lisbon is to protect
Win32/X86 binaries from format string attacks, it is built
on top of a Win32/X86 binary analysis and instrumentation
infrastructure called BIRD [17], which is speciﬁcally de-
signed as a platform for developing systems that enhance
software security. BIRD supports DLLs, exception han-
dlers, and multi-thread programming. The overall system
architecture of BIRD is shown in Figure 3.
Checking
Engine
Dynamic
Disassembler
BIRD Runtime Engine
Instrumentation
Engine
Static−patched Binary
Exe. Aux. File Info
Static Disassembler
Win32 Exe. File X
Figure 3. The system architecture of BIRD
BIRD targets at Win32 binaries on the Intel X86 ar-
chitecture, which state-of-the-art disassemblers such as
IDAPro cannot achieve both 100% disassembly cover-
age and accuracy. However,
to safely instrument exe-
cutable binaries requires 100% disassembly accuracy. To
achieve 100% disassembly accuracy, BIRD performs both
static and dynamic disassembly. Although BIRD may not
402402
achieve 100% coverage, it does guarantee that every in-
struction in an executable binary will be properly exam-
ined/transformed before it is executed. That is, BIRD may
miss those instructions that never get executed in a particu-
lar run, but these instructions do not matter exactly because
they are not executed.
More concretely, BIRD ﬁrst statically disassembles a bi-
nary ﬁle as much as it can, and defers the part that it can-
not disassemble statically to a dynamic disassembler at run
time. The part that can be statically disassembled is called
the known area, while the rest is the unknown area. A pro-
gram’s control starts in the known area and can only be
transferred to the unknown area through indirect branch or
call instructions. By checking if the target address of every
indirect branch and call lies in the unknown area, BIRD can
determine whether it should invoke dynamic disassembling
on the target instruction. As a program runs, its known area
grows and its unknown area shrinks.
BIRD also supports binary instrumentation when the
user speciﬁes an instrumentation point speciﬁcation (e.g.,
function prolog) and an instrumentation routine. More
speciﬁcally, BIRD adds a new section to the input program
that contains the instrumentation code, and replaces the in-
struction at each instrumentation point with a jump to the
corresponding instrumentation instruction sequence. Be-
cause static disassembling cannot achieve 100% code cov-
erage, BIRD performs both static and dynamic instrumen-
tation.
The essential functionalities of BIRD’s run-time disas-
sembling and instrumentation are implemented as a dy-
namic linked library called dyncheck.dll which is
functionally independent of the applications to be instru-
mented. The instrumented application’s import table is
modiﬁed to include dyncheck.dll so that it is always
loaded automatically at start-up time.
In order to get the
control of the program when the program is executed, BIRD
also instruments the program’s entry point [3] so that any
instrumented binary program will start with BIRD’s initial-
ization and monitoring engine ﬁrst.
Normally, only functions without explicit call sites are
left to dynamic disassembling and analysis. For format
string attack detection, most of the interesting interception
and analysis is actually done statically because callers to
printf-like functions can be recognized statically. However,
BIRD’s dynamic interception capability is still useful be-
cause it allows Lisbon to detect callers to printf-like func-
tions through indirect calls such as function pointers.
4.2. Identiﬁcation of Printf-like Functions
To identify call sites to printf-like functions, Lisbon ﬁrst
needs to identify the entry point of such functions. This step
is required for any systems that aim to protect Win32 bina-
ries from format string attacks, and is largely independent
of the internal working of Lisbon. There are two cases. If
a printf-like function is statically linked into an application,
its instructions are contained in the application’s binary. If a
printf-like function is dynamically linked, the application’s
binary only contains a link to its instructions, which are
stored in a separate ﬁle.
When the instruction sequence of a printf-like function
is already contained in an application’s binary ﬁle, it is not
easy to recognize its entry point because the binary ﬁle typ-
ically does not include any symbolic name associated with
the printf-like function. To solve this problem, we extract
the body of each printf-like function from the standard li-
brary. For example, in Visual C++, the C runtime library
functions come from libraries such as LIBC.LIB, which
maintains each library function’s name, body and reloca-
tion information. Therefore, one can search LIBC.LIB
with a printf-like function’s name to retrieve its function
body, derive a function signature from its body, and use this
function-speciﬁc signature to search an application binary
for the entry point of this printf-like function.
If a printf-like function is dynamically linked into an ap-
plication at load-time, the application’s binary contains a
link to the function’s body in its import table. A caller
to a dynamically linked function uses an indirect call to
transfer control to the target function, whose target address
is stored in the import table entries. Therefore, to iden-
tify callers to dynamically linked printf-like functions in
an application binary, Lisbon ﬁrst locates the import ta-
ble entries corresponding to these printf-like functions, and
then searches the binary for functions that use indirect calls
whose operand matches one of these import table entries.
4.3. Bound Checking Implementation
A key innovation in Lisbon is its use of debug register in
detecting bound violation of input argument accesses. De-
bug register hardware is universally supported by most if
not all mainstream CPUs such as Intel’s 32-bit and 64-bit
X86, ARM, SPARC, MIPS, PowerPC, etc. In addition, the
interfaces these CPUs expose to the software are largely the
same. In this paper, we will focus only on the Intel X86
processor [13]. However, the technique described below is
equally applicable to other processors without much modi-
ﬁcation.
The original purpose of having debug registers is to sup-
port instruction and data breakpointing functions required
by software debuggers. In the X86 architecture, there are
totally eight debug registers (DB0 through DB7) and two
model-speciﬁc registers (MSRs). Among them, DB4 and
DB5 are reserved. DB6 keeps the debugger status while
DB7 is for control/conﬁguration. DB0 to DB3 are used
to hold memory addresses or I/O locations that the debug-
403403
ger wants to monitor. If being enabled, whenever a mem-
ory or instruction address matches the contents of one of
these four registers, the processor raises a debug exception.
With this support, the debugger does not need to perform
expensive intercept-and-check in software. The hardware
compares every instruction/data memory address with these
breakpoint addresses in parallel with the normal virtual to
physical address translation, thus it incurs no additional per-
formance overhead. Please refer to the IA32 architectural
manual [13] for the detailed layout of these DR registers
and their usage.
Previously, only debuggers such as GDB, KDB and em-
bedded debugger in Visual C++ take advantage of these de-
bug registers. They allow programmers to monitor the ac-
cesses to speciﬁc instruction/memory locations in the pro-
grams being debugged. Whenever these locations are ex-
ecuted, read or written to, a debug exception is generated
and the debugger is invoked to inspect the program state
and handles the exception accordingly.
Accessing debug registers requires ring0 privilege, so a
user program can manipulate them only by making a sys-
tem call. The Windows operating system does not provide
any system call that can directly modify the debug regis-
ters [15]. However, it does provide two Win32 library func-
tions, SetThreadContext and GetThreadContext,
For debuggers to set instruction/data breakpoints, which are
the only known ways to access debug registers from the user
space. The templates of these two functions are as follows:
BOOL SetThreadContext(
BOOL GetThreadContext(
HANDLE hThread,
const CONTEXT* lpContext
);
HANDLE hThread,
const CONTEXT* lpContext
);
Both functions take a thread handle and a pointer to
CONTEXT data structure as arguments. A thread handle
speciﬁes the thread whose context is going to be set or re-
trieved. The CONTEXT data structure includes almost all
the thread’s state that is visible to user-level applications,
including those debug registers. SetThreadContext
delivers a user-speciﬁed thread context to the kernel while
GetThreadContext copies the designated thread’s con-
text from the kernel back to the user space. Although these
two functions allow Lisbon to read/write debug registers,
unfortunately they carry serious performance penalty, be-
cause whenever a debug register is enabled, the kernel will
set the application in the debug mode and the application is
slowed down signiﬁcantly due to extra checking and inter-
ception whenever the kernel gets control. The same perfor-
mance problem exists in Linux as well [7].
Because the exact implementation of these two func-
tions in the Windows operating system is not known, it
is not possible to modify it to eliminate this performance
problem. Consequently, we decide to implement a sep-
arate debug register management mechanism that directly
reads/writes the debug registers in a way that is independent
of SetThreadContext/GetThreadContext. This debug regis-
ter management scheme consists of two components: (1) a
low-overhead system call that sets or clears the debug regis-
ters according to user speciﬁcation, and (2) a kernel routine
that is invoked at every context switch to properly maintain
the state of the debug registers across context switches. In
terms of implementation complexity, these two components
together take fewer than 200 lines of C code.
The ﬁrst component is implemented as an interrupt han-
dler for a software interrupt instruction int 20. Be-
cause this interrupt handler does not invoke the usual ar-
gument check and state saving/restoration procedure asso-
ciated with system calls, it incurs a lower overhead than sys-
tem calls. In particular, Lisbon communicates the addresses
of canary words to the interrupt handler through general-
purpose registers.
Without the second component, the debug registers set
by the ﬁrst component for one process will be effec-
tive for all processes.
As the Windows kernel is not
aware of Lisbon’s modiﬁcation of these debug registers,
it will not save/restore them across context switches. To
solve this problem, Lisbon intercepts Windows’ context
switching function, SwapContext, which is responsible
for switching the processor to a new thread.
Lisbon
tricks the Windows kernel to call a Lisbon routine called
SwapDebugContext whenever it calls SwapContext.
SwapDebugContext saves the debug registers of the old
thread that is going to be switched out and restores the de-
bug registers of the new thread that is going to be switched
in. Consequently, the debug registers become an integral
part of a thread’s context, and properly get saved/restored
during context switch.
5. Evaluation
The project goal of Lisbon is to provide an effective,
transparent and efﬁcient way to protect commercially dis-
tributed Win32 binaries from all known forms of format
string attacks. In this section, we evaluate the effectiveness
of Lisbon in protecting real Windows applications that are
known to be vulnerable to format string attack, and then the
efﬁciency of Lisbon in terms of run-time overheads.
5.1. Eﬀectiveness
We used the following four Window binaries that
are known to be vulnerable to format string attack
in the effectiveness and efﬁciency evaluation of Lis-
bon: SHOUTcast[4] (a popular audio streaming server),
ProFTPD[26] (a free FTP daemon program), Peercast[25]
(a popular peer-to-peer streaming media server), Pﬁnger
404404
client[1] (a free ﬁnger client). All of them have format
string vulnerabilities [5, 23, 21, 22].
For each of these test programs, we either used an exist-
ing exploit or wrote a new one, and then created a Lisbon
version from its binary. Then we ran each binary twice,
once with the original binary and the other with the Lisbon
version. When each test program ran, we launched the cor-
responding exploit code against it to check if it can detect
the attack.