the completeness of this paper, we discuss the vulnerability
here as we later on describe how one can implement reen-
trancy’s detection in our tool Oyente in Section 5.
In Ethereum, when a contract calls another, the current
execution waits for the call to ﬁnish. This can lead to an
issue when the recipient of the call makes use of the inter-
mediate state the caller is in. This may not be immediately
obvious when writing the contract if possible malicious be-
havior on the side of the callee is not considered.
Attack example. We can see an example of this attack
in sendBalance (Figure 7). The contract being called by
sendBalance can simply call it again, since the balance for
this contract has not yet been set to zero.
In Figure 7,
Line 11 sends the current balance of the withdrawer — as
indicated by the internal variable userBalances — to the
contract address wishing to withdraw its balance. How-
ever, the variable userBalances is only zeroed after the call is
made, which means that the persistent storage of the con-
tract which records users’ balances has not yet been altered.
The callee contract of the call in Line 11, using its default
function, can call withdrawBalance until the contract is emp-
tied of Ether — or it depletes available gas — whichever
comes ﬁrst.
4. TOWARDS A BETTER DESIGN
We formalize a “lightweight” semantics for Ethereum in
Section 4.1, and then build on this formalism in Section 4.2
to recommend solutions to the security issues identiﬁed in
Section 3. Despite being lightweight, our formalism rigor-
ously captures interesting features of Ethereum, exposing
the subtleties in its semantics, which further enables us to
state our proposed solutions precisely.
We use the following notation: ← to denote assignment,
• to denote an arbitrary element (when the speciﬁc value
is important), ⇓ to denote big-step evaluation, and ; to
denote small-step evaluation. Finally, a[i (cid:55)→ v] returns a
new array identical to a, but on position i contains the value
v; this notation of array update also applies to nested arrays.
4.1 Operational Semantics of Ethereum
(cid:48)
(cid:48)
.
T−→ σ
Recall (from Section 2) that a canonical state of Ethereum,
denoted by σ, is a mapping between addresses and account
states. We write a valid transition from σ to σ
via transac-
tion T as σ
Formation and Validation of a Block. To model the
formation of the blockchain and the execution of blocks, we
deﬁne a global Ethereum state as a pair (cid:104)BC, σ(cid:105), where BC
is the current block chain and σ is as before. Γ denotes the
stream of incoming new transactions. For simplicity, we do
not model miner rewards.
TXs ← Some transaction sequence (T1 . . . Tn) from Γ
B ← (cid:104)blockid ; timestamp ; TXs ; . . .(cid:105)
proof-of-work(B, BC)
Ti−→ σi
∀ i, 1 ≤ i ≤ n : σi−1
(cid:104)BC, σ0(cid:105) ⇓ (cid:104)B · BC, σn(cid:105)
Remove T1 . . . Tn from Γ and broadcast B
Receive B ≡ (cid:104)blockid ; timestamp ; TXs ; . . .(cid:105)
TXs ≡ (T1 . . . Tn)
Ti−→ σi
∀ i, 1 ≤ i ≤ n : σi−1
(cid:104)BC, σ0(cid:105) ⇓ (cid:104)B · BC, σn(cid:105)
Remove T1 . . . Tn from Γ and broadcast B
Propose
Accept
Figure 8: Proposing and Accepting a Block
The actions of the miners to form and validate blocks
are given in Figure 8. Only one “elected leader” executes
successfully the Propose rule at a time. Other miners use
Ti−→ σi after
the Accept rule to “repeat” the transitions σi−1
the leader broadcasts block B.
Security Issues: As discussed earlier, the issue of timestamp-
dependence arises because the elected leader has some slack
in setting the timestamp, yet other miners still accept the
block. On the other hand, the issue of transaction-ordering-
dependence exists because of some inevitable order among
Ti; yet we have shown that when dealing with Ether (or
money), this might lead to undesirable outcomes.
Transaction Execution. A transaction can activate the
code execution of a contract. In Ethereum, the execution
can access to three types of space in which to store data:
(1) an operand LIFO stack s; (2) an auxiliary memory l,
an inﬁnitely expandable array; and (3) the contract’s long-
term storage str, which is part of σ[id] for a given contract
address id. Unlike stack and auxiliary memory, which reset
after computation ends, storage persists as part of σ.
We deﬁne a virtual machine’s execution state µ as a conﬁg-
uration (cid:104)A, σ(cid:105), where A is a call stack (of activation records)
and σ is as before. The activation record stack is deﬁned as:
A ∆= Anormal | (cid:104)e(cid:105)exc · Anormal
∆= (cid:104)M, pc, l, s(cid:105) · Anormal | 
Anormal
where  denotes an empty call stack; (cid:104)e(cid:105)exc denotes that an
exception has been thrown; and each part of an activation
record (cid:104)M, pc, l, s(cid:105) has the following meaning:
M :
pc :
l :
s :
the contract code array
the address of the next instruction to be executed
an auxiliary memory (e.g. for inputs , outputs)
an operand stack.
Though a transaction in Ethereum is a complex structure
and speciﬁes a number of ﬁelds, we abstract it to a triple
(cid:104)id, v, l(cid:105) where id is the identiﬁer of the to-be-invoked con-
tract, v is the value to be deposited to the contract, and l
is an data array capturing the values of input parameters.
Thus a transaction execution can be modeled with the rules
in Figure 9: the ﬁrst rule describes an execution that ter-
minates successfully (or “normal halting”) while the second
rule describes one that terminates with an exception.
Note that the execution of a transaction is intended to
follow the “transactional semantics” of which two important
properties are: (1) Atomicity, requiring that each transac-
tion be “all or nothing”. In other words, if one part of the
transaction fails, then the entire transaction fails and the
state is left unchanged; and (2) Consistency, ensuring that
any transaction will bring the system from one valid state to
another. We will show, later in this section, how these prop-
erties might be violated, when we discuss the operational
semantics of EVM instructions.
T ≡ (cid:104)id, v, l(cid:105)
(cid:48)
σ
M ← Lookup(σ, id)
← σ[id][bal (cid:55)→ (σ[id][bal] + v)]
(cid:104)(cid:104)M, 0, l, (cid:105) · , σ
T−→ σ
(cid:105) ;∗
(cid:104), σ
(cid:105)
σ
(cid:48)(cid:48)
(cid:48)
(cid:48)(cid:48)
TX-success
TX-exception
(cid:48)
T ≡ (cid:104)id, v, l(cid:105)
σ
(cid:104)(cid:104)M, 0, l, (cid:105) · , σ
σ
M ← Lookup(σ, id)
← σ[id][bal (cid:55)→ (σ[id][bal] + v)]
(cid:105) ;∗
(cid:104)(cid:104)e(cid:105)exc · ,•(cid:105)
T−→ σ
(cid:48)
Figure 9: Rules for Transaction Execution. Lookup(σ,id) ﬁnds
the associated code of contract address id in state σ; σ[id][bal]
refers to the balance of the contract at address id in state σ.
Execution of EVM Instructions. We have distilled EVM
into a language EtherLite, which is a stack machine aug-
mented with a memory and some Ethereum-like features.
The instructions ins ∈ instruction of EtherLite are:
ins ∆= push v | pop | op | bne |
mload | mstore | sload | sstore |
call | return | suicide | create | getstate
The push instruction takes an argument v ∈ value which is
either a numeric constant z, code label λ, memory address
α, or contract/recipient address γ and adds it to the top of
the “operand stack”. The pop instruction removes (forgets)
the top element of the operand stack. The op instruction,
representing all of the arithmetic and logical etc. operations,
pops its arguments, performs the operation, and pushes the
result. Conditional branch bne is a standard “branch if not
equal to zero”. It pops two elements z and λ from the top of
the operand stack; if z is nonzero then the program counter
is set to λ, otherwise it is the program counter is incre-
mented. The load and store instructions respectively reads
from and writes to memory in the natural way. However,
here we have two types of load and store, dealing with two
types of memory mentioned above. While mload and mstore
deal with the auxiliary memory l, sload and sstore respec-
tively assesses and updates the contract storage str, i.e., the
state of the contract.
Let us now discuss more interesting instructions inspired
from Ethereum. The key instructions are call and return,
whose operational semantics are provided in Table 12. Each
row describes the conditions under which an execution can
(cid:48)
move from conﬁguration µ to conﬁguration µ
.
The ﬁrst column indicates the instruction form captured by
the rule. If the instruction about to be executed matches
that form and all the (side) conditions in the second column
are satisﬁed, then a step may be made from a conﬁguration
matching the pattern in the third column to a conﬁguration
matching the pattern in the last column.
, i.e. µ ; µ
(cid:48)
A call instruction is roughly analogous to a remote pro-
cedure call3. The arguments placed on the operand stack,
are the destination γ, amount of Ether to transfer z, and two
values st and sz (for “start address” and “size”) to specify a
slice of memory which contains additional function-speciﬁc
parameters. The next two values in the operand stack simi-
larly specify a place for the return value(s); they are exposed
(in the rules) when the call is returned, or an exception has
occurred. Unlike the operand stack, which has no ﬁxed max-
imum size, the call stack has a maximum size of 1, 024. If
the call stack is already full then the remote call will cause
an exception (second rule for call). When the remote call
returns, a special ﬂag is placed onto the operand stack, with
1 indicating a successful call (second rule for return) and 0
indicating an unspeciﬁed exception (rule EXC).
There are two important points to note. First, an excep-
tion at a callee is not limited to (call) stack overﬂow. It could
be due to various reasons such as gas exhaustion, division by
zero, etc. Second, exceptions are not propagated automat-
ically. Contract writers who wish to do so must explicitly
check for the 0 and then raise a new exception, typically
by jumping to an invalid label. For certain high-level com-
mands in Solidity, a code snippet to perform these steps is
inserted by the compiler.
Security Issues: Recall the security issues discussed in Sec-
tion 3.3, in particular when exceptions are mishandled. The
root cause of the problem is in the inconsistency of how ex-
ceptions inﬂuence the ﬁnal state, depending whether a con-
tract method is invoked as a transaction, or via the call
instruction. In the former case, rule TX-exception in Fig-
ure 9, the execution is aborted ; while in the latter case, row
exc Table 1, a ﬂag 0 is pushed into the operand stack of the
caller. The way that an exception occurs at a callee, and
is converted into a ﬂag 0 (and the execution continues nor-
mally) indeed breaks the atomicity property. In other words,
Ethereum transactions do not have atomicity in their seman-
tics. This can lead to serious consequences, especially given
2For completeness, operational semantics of other instruc-
tions are provided in the Appendix.
3Ethereum has several additional variants of call, includ-
ing CALLCODE and DELEGATECALL which we do not model in
EtherLite.
Table 1: Operational Semantics of call and return. EXC stands for “Exception”.
M [pc]
Conditions
µ
(cid:48)
µ
(cid:48)
← (cid:104)M, pc, l, s(cid:105)
(cid:48)
← Lookup(σ, γ)
← σ[id][bal (cid:55)→ σ[id][bal] − z]
[γ][bal (cid:55)→ σ[id][bal] + z]
← σ
id ← address of the executing contract
(cid:48)
a
M
(cid:48)
σ
(cid:48)(cid:48)
σ
id ← address of the executing contract
σ[id][bal] < v or |A| = 1023
(cid:48)
(cid:48)
(cid:48)
· s
(cid:105)
, l
a
, pc
(cid:48)
n ← min(sz
, sz)
(cid:48)
0 ≤ i < n : l
i+1 ← l
+ i (cid:55)→ l[st + i]]
exceptional halting of callee
· sz
(cid:48)
(cid:48)
i[st
≡ (cid:104)M
(cid:48)
0, st
(cid:48)
(cid:48)
(cid:48)
call
call
return
return
EXC
(cid:104)(cid:104)M, pc, l, γ · z · st · sz · s(cid:105) · A, σ(cid:105)
(cid:48)
, 0, l
(cid:48)
(cid:48)
, (cid:105) · a
(cid:104)(cid:104)M
· A, σ
(cid:48)(cid:48)
(cid:105)
(cid:104)(cid:104)M, pc, l,• · v · • · • · • · • · s(cid:105) · A, σ(cid:105)
(cid:104)(cid:104)M, pc,•,•(cid:105) · , σ(cid:105)
(cid:48)
(cid:104)(cid:104)M, pc, l, st · sz · s(cid:105) · a
(cid:104)(cid:104)e(cid:105)exc · (cid:104)M, pc, l, st · sz · s(cid:105) · A, σ(cid:105)
· A, σ(cid:105)
(cid:104)(cid:104)M, pc + 1, l, 0 · s(cid:105) · A, σ(cid:105)
(cid:104), σ(cid:105)
(cid:48)
(cid:104)(cid:104)M
(cid:104)(cid:104)M, pc + 1, l, 0 · s(cid:105) · A, σ(cid:105)
(cid:48)
(cid:48)
n, 1 · s
+ 1, l
, pc
(cid:48)
(cid:105) · A, σ(cid:105)
that money transfers in Ethereum are mostly done using the
call instruction.
There are three remaining instructions: suicide, cre-
ate, and getstate. The suicide instruction transfers all of
the remaining Ether to recipient γ and then terminates the
contract; although somewhat similar to call in that Ether
changes hands, it does not use the call stack. The create
instruction creates a new contract account, taking three ar-
guments from the operand stack. They are the amount of
Ether to be put in the new contract, and two values to spec-
ify a slice of memory which contains the bytecode for the
new contract. It proceeds in three steps:
1. Creating a new address and allocating storage for the
new contract. The speciﬁed amount of Ether is also
deposited into the contract.
2. Initializing the contract’s storage.
3. Depositing the associated code body into the contract.
If the contract creation is successful, the address of new
contract is pushed onto the operand stack; otherwise, a ﬂag
value of 0 is pushed. The three above-mentioned steps rely
on certain helper procedures, which we will not attempt to
capture with our formalism. Note that: (1) while the initial-
ization code is executing, the newly created address exists
but with no intrinsic body code; and (2) if the initialization
ends up with an exception then the state is left with a “zom-
bie” account, and any remaining balance will be locked into
the account forever.
In other words, an unsuccessful con-
tract creation might lead to an invalid contract residing in
the system, breaking the consistency property of the “trans-
actional semantics”. This issue might not directly lead to
some security attacks, it is clearly undesirable in the cur-
rent design of Ethereum.
Lastly, getstate is an abstract instruction of which the
concrete instance related to the security problem in 3.2 is
to get the current block timestamp. A getstate instruction