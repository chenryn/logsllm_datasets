message includes the MAC address of the sending node. 
When the target node receives the Neighbor Solicitation message, it updates its neighbor cache 
(equivalent to the ARP cache) with an entry for the source address and MAC address included in the 
Neighbor Solicitation message. Next, the target node sends a unicast Neighbor Advertisement 
message with its MAC address to the sender of the Neighbor Solicitation message. 
Chapter 2 – Architectural Overview of the TCP/IP Protocol Suite 
TCP/IP Fundamentals for Microsoft Windows  
Page: 39 
After receiving the Neighbor Advertisement from the target, the sending host updates its neighbor 
cache with an entry for the target node based upon the included MAC address. At this point, the 
sending host and the target of the neighbor solicitation can send unicast IPv6 traffic. 
Router Discovery 
Router discovery is the process through which hosts attempt to discover the set of routers on the local 
subnet. In addition to configuring a default router, IPv6 router discovery also configures the following: 
The default setting for the Hop Limit field in the IPv6 header. 
A determination of whether the node should use an address configuration protocol, such as Dynamic 
Host Configuration Protocol for IPv6 (DHCPv6), for addresses and other configuration parameters. 
The list of subnet prefixes defined for the link. Each subnet prefix contains both the IPv6 subnet prefix 
and its valid and preferred lifetimes. If indicated, the host uses the subnet prefix to create an IPv6 
address configuration without using an address configuration protocol. A subnet prefix also defines the 
range of addresses for nodes on the local link. 
The IPv6 router discovery processes are the following: 
IPv6 routers periodically send multicast Router Advertisement messages on the subnet advertising their 
existence as routers and other configuration parameters such as address prefixes and the default hop 
limit. 
IPv6 hosts on the local subnet receive the Router Advertisement messages and use their contents to 
configure addresses, a default router, and other configuration parameters.  
A host that is starting up sends a multicast Router Solicitation message. Upon receipt of a Router 
Solicitation message, all routers on the local subnet send a unicast Router Advertisement message to 
the host that sent the router solicitation. The host receives the Router Advertisement messages and 
uses their contents to configure addresses, a default router, and other configuration parameters. 
Address Autoconfiguration 
A highly useful aspect of IPv6 is its ability to automatically configure itself without the use of an address 
configuration protocol, such as Dynamic Host Configuration Protocol for IPv6 (DHCPv6). By default, an 
IPv6 host can configure an address for use on the subnet for each interface. By using router discovery, 
a host can also determine the addresses of routers, additional addresses, and other configuration 
parameters. Router Advertisement messages indicate whether an address configuration protocol 
should be used. RFC 4862 defines IPv6 address autoconfiguration. 
For more information about IPv6 address autoconfiguration, see Chapter 6 “Dynamic Host 
Configuration Protocol.” 
Multicast Listener Discovery (MLD) 
MLD is the IPv6 equivalent of IGMP version 2 for IPv4. MLD is a set of ICMPv6 messages exchanged 
by routers and nodes, enabling routers to discover the set of IPv6 multicast addresses for which there 
are listening nodes for each attached interface. Like IGMPv2, MLD discovers only those multicast 
addresses that include at least one listener, not the list of individual multicast listeners for each 
multicast address. RFC 2710 defines MLD. 
Chapter 2 – Architectural Overview of the TCP/IP Protocol Suite 
TCP/IP Fundamentals for Microsoft Windows  
Page: 40 
Unlike IGMPv2, MLD uses ICMPv6 messages instead of defining its own message structure. The three 
types of MLD messages are: 
Multicast Listener Query  Routers use Multicast Listener Query messages to query a subnet for 
multicast listeners. 
Multicast Listener Report   Multicast listeners use Multicast Listener Report messages to either report 
interest in receiving multicast traffic for a specific multicast address or to respond to a Multicast Listener 
Query message. 
Multicast Listener Done  Multicast listeners use Multicast Listener Done messages to report that they 
might be the last multicast group member on the subnet. 
Windows Server 2008 and Windows Vista also support MLD version 2 (MLDv2), specified in RFC 3810, 
which allows IPv6 hosts to register interest in source-specific multicast traffic with their local multicast 
routers. A host running Windows Server 2008 or Windows Vista can register interest in receiving IPv6 
multicast traffic from only specific source addresses (an include list) or from any source except specific 
source addresses (an exclude list). 
Chapter 2 – Architectural Overview of the TCP/IP Protocol Suite 
TCP/IP Fundamentals for Microsoft Windows  
Page: 41 
Transmission Control Protocol (TCP) 
TCP is a reliable, connection-oriented delivery service. Connection-oriented means that a connection 
must be established before hosts can exchange data. Reliability is achieved by assigning a sequence 
number to each segment transmitted. TCP peers, the two nodes using TCP to communicate, 
acknowledge when they receive data. A TCP segment is the protocol data unit (PDU) consisting of the 
TCP header and the TCP payload, also known as a segment.  For each TCP segment sent containing 
data, the receiving host must return an acknowledgment (ACK). If an ACK is not received within a 
calculated time, the TCP segment is retransmitted. RFC 793 defines TCP. 
Table 2-8 lists and describes the key fields in the TCP header. 
Field 
Description 
Source Port 
TCP port of sending application. 
Destination Port 
TCP port of destination application. 
Sequence Number 
Sequence number of the first byte of data in the TCP 
segment. 
Acknowledgment Number 
Sequence number of the next byte the sender expects 
to receive from its TCP peer. 
Window 
Current size of a memory buffer on the host sending 
this TCP segment to store incoming segments. 
Checksum 
A simple mathematical calculation that is used to 
check for bit-level errors in the TCP segment. 
Table 2-8  Key fields in the TCP header 
TCP Ports 
To use TCP, an application must supply the IP address and TCP port number of the source and 
destination applications. A port provides a location for sending segments. A unique number identifies 
each port. TCP ports are distinct and separate from UDP ports even though some of them use the 
same number. Port numbers below 1024 are well-known ports that the Internet Assigned Numbers 
Authority (IANA) assigns. Table 2-9 lists a few well-known TCP ports. 
TCP Port Number 
Description 
20 
FTP (data channel) 
21 
FTP (control channel) 
23 
Telnet 
80 
HTTP used for the World Wide Web 
139 
NetBIOS session service 
Table 2-9  Well-known TCP Ports 
For a complete list of assigned TCP ports, see http://www.iana.org/assignments/port-numbers.  
Chapter 2 – Architectural Overview of the TCP/IP Protocol Suite 
TCP/IP Fundamentals for Microsoft Windows  
Page: 42 
TCP Three-Way Handshake 
A TCP connection is initialized through a three-way handshake. The purpose of the three-way 
handshake is to synchronize the sequence number and acknowledgment numbers of both sides of the 
connection and to exchange TCP window sizes. The following steps outline the process for the 
common situation when a client computer contacts a server computer: 
1. The client sends a TCP segment to the server with an initial sequence number for the connection and 
a window size indicating the size of a buffer on the client to store incoming segments from the server. 
2. The server sends back a TCP segment containing its chosen initial sequence number, an 
acknowledgment of the client’s sequence number, and a window size indicating the size of a buffer 
on the server to store incoming segments from the client. 
3. The client sends a TCP segment to the server containing an acknowledgment of the server’s 
sequence number. 
TCP uses a similar handshake process to end a connection. This guarantees that both hosts have 
finished transmitting and that all data was received. 
Chapter 2 – Architectural Overview of the TCP/IP Protocol Suite 
TCP/IP Fundamentals for Microsoft Windows  
Page: 43 
User Datagram Protocol (UDP) 
UDP provides a connectionless datagram service that offers unreliable, best-effort delivery of data 
transmitted in messages. This means that neither the arrival of datagrams nor the correct sequencing of 
delivered packets is guaranteed. UDP does not retransmit lost data. UDP messages consist of a UDP 
header and a UDP payload, also known as a message. RFC 768 defines UDP. 
Applications use UDP if they do not require an acknowledgment of receipt of data, and they typically 
transmit small amounts of data at one time. NetBIOS name service, NetBIOS datagram service, and 
SNMP are examples of services and applications that use UDP.  
Table 2-10 lists and describes the key fields in the UDP header. 
Field 
Description 
Source Port 
UDP port of sending application. 
Destination Port 
UDP port of destination application. 
Checksum 
A simple mathematical calculation that is used to 
check for bit-level errors in the UDP message. 
Table 2-10  Key Fields in the UDP Header 
UDP Ports 
To use UDP, an application must supply the IP address and UDP port number of the source and 
destination applications. A port provides a location for sending messages. A unique number identifies 
each port. UDP ports are distinct and separate from TCP ports even though some of them use the 
same number. Just like TCP ports, UDP port numbers below 1024 are well-known ports that IANA 
assigns. Table 2-11 lists a few well-known UDP ports. 
UDP Port Number 
Description 
53 
Domain Name System (DNS) name queries 
69 
Trivial File Transfer Protocol (TFTP) 
137 
NetBIOS name service 
138 
NetBIOS datagram service 
161 
SNMP 
Table 2-11  Well-known UDP ports 
For a complete list of assigned UDP ports, see http://www.iana.org/assignments/port-numbers. 
Chapter 2 – Architectural Overview of the TCP/IP Protocol Suite 
TCP/IP Fundamentals for Microsoft Windows  
Page: 44 
Packet Multiplexing and Demultiplexing 
When a sending host sends an IPv4 or IPv6 packet, it includes information in the packet so that the 
data within the packet can be delivered to the correct application on the destination. The inclusion of 
identifiers so that data can be delivered to one of multiple entities in each layer of a layered architecture 
is known as multiplexing. Multiplexing information for IP packets consists of identifying the node on the 
network, the IP upper layer protocol, and for TCP and UDP, the port corresponding to the application to 
which the data is destined. The destination host uses these identifiers to demultiplex, or deliver the data 
layer by layer, to the correct destination application. The IP packet also includes information for the 
destination host to send a response. 
IP contains multiplexing information to do the following: 
Identify the sending node (the Source IP Address field in the IPv4 header or the Source Address field in 
the IPv6 header). 
Identify the destination node (the Destination IP Address field in the IPv4 header or the Destination 
Address in the IPv6 header). 
Identify the upper layer protocol above the IPv4 or IPv6 Internet layer (the Protocol field in the IPv4 
header or the Next Header field of the IPv6 header). 
For TCP segments and UDP messages, identify the application from which the message was sent (the 
Source Port in the TCP or UDP header). 
For TCP segments and UDP messages, identify the application to which the message is destined (the 
Destination Port in the TCP or UDP header). 
TCP and UDP ports can use any number between 0 and 65,535. Port numbers for client-side 
applications are typically dynamically assigned when there is a request for service, and IANA pre-
assigns port numbers for well-known server-side applications. The complete list of pre-assigned port 
numbers is listed on http://www.iana.org/assignments/port-numbers. 
All of this information is used to provide multiplexing information so that: 
The packet can be forwarded to the correct destination. 
The destination can use the packet payload to deliver the data to the correct application. 
The receiving application can send a response. 
When a packet is sent, this information is used in the following ways: 
The routers that forward IPv4 or IPv6 packets use the Destination IP Address field in the IPv4 header or 
the Destination Address in the IPv6 header to deliver the packet to the correct node on the network. 
The destination node uses the Protocol field in the IPv4 header or the Next Header field of the IPv6 
header to deliver the packet payload to the correct upper-layer protocol.  
For TCP segments and UDP messages, the destination node uses the Destination Port field in the TCP 
or UDP header to demultiplex the data within the TCP segment or UDP message to the correct 
application.  
Chapter 2 – Architectural Overview of the TCP/IP Protocol Suite 
TCP/IP Fundamentals for Microsoft Windows  
Page: 45 
Figure 2-5 shows an example of a DNS Name Query Request message in an IPv4 packet with a 
destination IP address of 131.107.89.223 being demultiplexed to the DNS service. 
Figure 2-5  Example of IPv4 packet demultiplexing 
Chapter 2 – Architectural Overview of the TCP/IP Protocol Suite 
TCP/IP Fundamentals for Microsoft Windows  
Page: 46 
Application Programming Interfaces 
Windows networking applications use two main application programming interfaces (APIs) to access 
TCP/IP services in Windows: Windows Sockets and NetBIOS. Figure 2-6 shows these APIs and the 
possible data flows when using them. 
Figure 2-6  Architecture of the Windows Sockets and NetBIOS APIs 
Some architectural differences between the Windows Sockets and NetBIOS APIs are the following: 
NetBIOS over TCP/IP (NetBT) is defined for operation over IPv4. Windows Sockets operates over both 
IPv4 and IPv6. 
Windows Sockets applications can operate directly over the IPv4 or IPv6 Internet layers, without the 
use of TCP or UDP. NetBIOS operates over TCP and UDP only. 
Windows Sockets 
Windows Sockets is a commonly used, modern API for networking applications in Windows. The 
TCP/IP services and tools supplied with Windows are examples of Windows Sockets applications. 
Windows Sockets provides services that allow applications to use a specific IP address and port, initiate 
and accept a connection to a specific destination IP address and port, send and receive data, and close 
a connection.  
Chapter 2 – Architectural Overview of the TCP/IP Protocol Suite 
TCP/IP Fundamentals for Microsoft Windows  
Page: 47 
There are three types of sockets: 
A stream socket, which provides a two-way, reliable, sequenced, and unduplicated flow of data using 
TCP. 
A datagram socket, which provides bidirectional flow of data using UDP. 
A raw socket, which allows protocols to access IP directly, without using TCP or UDP. 
A socket functions as an endpoint for network communication. An application creates a stream or 
datagram socket by specifying three items: the IP address of the host, the type of service (TCP for 
connection-based service and UDP for connectionless), and the port the application is using. Two 
sockets, one for each end of the connection, form a bidirectional communications path. For raw 
sockets, the application must specify the entire IP payload. 
NetBIOS 
NetBIOS is an older API that provides name management, datagram, and session services to NetBIOS 
applications. An application program that uses the NetBIOS interface API for network communication 
can be run on any protocol implementation that supports the NetBIOS interface. Examples of Windows 
applications and services that use NetBIOS are file and printer sharing and the Computer Browser 
service. 
NetBIOS also defines a protocol that functions at the OSI Session layer. This layer is implemented by 
the underlying protocol implementation, such as NetBIOS over TCP/IP (NetBT), which RFCs 1001 and 
1002 define. The NetBIOS name service uses UDP port 137. The NetBIOS datagram service uses 
UDP port 138. The NetBIOS session service uses TCP port 139. 
For more information about NetBIOS and NetBT, see Chapter 11, "NetBIOS over TCP/IP." 
Chapter 2 – Architectural Overview of the TCP/IP Protocol Suite 
TCP/IP Fundamentals for Microsoft Windows  
Page: 48 
TCP/IP Naming Schemes in Windows 
Although IP is designed to work with the 32-bit (IPv4) and 128-bit (IPv6) addresses of sending and 
destination hosts, computers users are much better at using and remembering names than IP 