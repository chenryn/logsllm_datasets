### Chapter 2 – Architectural Overview of the TCP/IP Protocol Suite
#### TCP/IP Fundamentals for Microsoft Windows
**Page: 39**

**Neighbor Discovery in IPv6**

- **Neighbor Solicitation Message**: This message includes the MAC address of the sending node. When the target node receives this message, it updates its neighbor cache (equivalent to the ARP cache) with an entry for the source address and MAC address included in the Neighbor Solicitation message.
- **Neighbor Advertisement Message**: The target node then sends a unicast Neighbor Advertisement message, including its MAC address, to the sender of the Neighbor Solicitation message.
- **Update of Neighbor Cache**: After receiving the Neighbor Advertisement, the sending host updates its neighbor cache with an entry for the target node based on the included MAC address.
- **Unicast IPv6 Traffic**: At this point, the sending host and the target can exchange unicast IPv6 traffic.

**Router Discovery**

- **Purpose**: Router discovery is the process through which hosts identify the set of routers on the local subnet. It also configures:
  - The default setting for the Hop Limit field in the IPv6 header.
  - Whether the node should use an address configuration protocol, such as DHCPv6, for addresses and other configuration parameters.
  - The list of subnet prefixes defined for the link, including their valid and preferred lifetimes. If indicated, the host uses the subnet prefix to create an IPv6 address configuration without using an address configuration protocol. A subnet prefix also defines the range of addresses for nodes on the local link.

- **Process**:
  - **Router Advertisement Messages**: IPv6 routers periodically send multicast Router Advertisement messages on the subnet, advertising their existence and other configuration parameters such as address prefixes and the default hop limit.
  - **Host Configuration**: IPv6 hosts on the local subnet receive these messages and use their contents to configure addresses, a default router, and other parameters.
  - **Router Solicitation Messages**: A host that is starting up sends a multicast Router Solicitation message. Upon receipt, all routers on the local subnet send a unicast Router Advertisement message to the host. The host then uses these messages to configure addresses, a default router, and other parameters.

**Address Autoconfiguration**

- **Automatic Configuration**: IPv6 can automatically configure itself without the need for an address configuration protocol like DHCPv6. By default, an IPv6 host can configure an address for each interface.
- **Router Discovery Usage**: A host can determine the addresses of routers, additional addresses, and other configuration parameters using router discovery. Router Advertisement messages indicate whether an address configuration protocol should be used.
- **RFC Reference**: RFC 4862 defines IPv6 address autoconfiguration.

- **For more information about IPv6 address autoconfiguration, see Chapter 6 “Dynamic Host Configuration Protocol.”**

**Multicast Listener Discovery (MLD)**

- **Purpose**: MLD is the IPv6 equivalent of IGMP version 2 for IPv4. It enables routers to discover the set of IPv6 multicast addresses for which there are listening nodes for each attached interface.
- **Message Types**:
  - **Multicast Listener Query**: Routers use these messages to query a subnet for multicast listeners.
  - **Multicast Listener Report**: Multicast listeners use these messages to report interest in receiving multicast traffic for a specific multicast address or to respond to a Multicast Listener Query message.
  - **Multicast Listener Done**: Multicast listeners use these messages to report that they might be the last multicast group member on the subnet.
- **MLDv2 Support**: Windows Server 2008 and Windows Vista support MLDv2 (RFC 3810), allowing IPv6 hosts to register interest in source-specific multicast traffic with their local multicast routers. A host can register interest in receiving IPv6 multicast traffic from only specific source addresses (an include list) or from any source except specific source addresses (an exclude list).

**Transmission Control Protocol (TCP)**

- **Overview**: TCP is a reliable, connection-oriented delivery service. It establishes a connection before data exchange and ensures reliability by assigning sequence numbers to each segment transmitted.
- **TCP Segment**: A TCP segment consists of the TCP header and the TCP payload.
- **Acknowledgment (ACK)**: For each TCP segment sent containing data, the receiving host must return an acknowledgment (ACK). If an ACK is not received within a calculated time, the TCP segment is retransmitted.
- **RFC Reference**: RFC 793 defines TCP.

- **Key Fields in the TCP Header**:
  - **Source Port**: TCP port of the sending application.
  - **Destination Port**: TCP port of the destination application.
  - **Sequence Number**: Sequence number of the first byte of data in the TCP segment.
  - **Acknowledgment Number**: Sequence number of the next byte the sender expects to receive from its TCP peer.
  - **Window**: Current size of a memory buffer on the host sending this TCP segment to store incoming segments.
  - **Checksum**: A simple mathematical calculation to check for bit-level errors in the TCP segment.

- **TCP Ports**:
  - **Well-Known Ports**: Port numbers below 1024 are well-known ports assigned by IANA. Table 2-9 lists a few well-known TCP ports.

- **TCP Three-Way Handshake**:
  - **Initialization**: A TCP connection is initialized through a three-way handshake to synchronize sequence and acknowledgment numbers and to exchange TCP window sizes.
  - **Steps**:
    1. The client sends a TCP segment to the server with an initial sequence number and a window size.
    2. The server sends back a TCP segment with its chosen initial sequence number, an acknowledgment of the client’s sequence number, and a window size.
    3. The client sends a TCP segment to the server containing an acknowledgment of the server’s sequence number.

- **Connection Termination**: TCP uses a similar handshake process to end a connection, ensuring both hosts have finished transmitting and all data was received.

**User Datagram Protocol (UDP)**

- **Overview**: UDP provides a connectionless datagram service that offers unreliable, best-effort delivery of data. It does not guarantee the arrival or correct sequencing of packets and does not retransmit lost data.
- **UDP Message**: A UDP message consists of a UDP header and a UDP payload.
- **RFC Reference**: RFC 768 defines UDP.

- **Key Fields in the UDP Header**:
  - **Source Port**: UDP port of the sending application.
  - **Destination Port**: UDP port of the destination application.
  - **Checksum**: A simple mathematical calculation to check for bit-level errors in the UDP message.

- **UDP Ports**:
  - **Well-Known Ports**: Port numbers below 1024 are well-known ports assigned by IANA. Table 2-11 lists a few well-known UDP ports.

**Packet Multiplexing and Demultiplexing**

- **Multiplexing**: When a sending host sends an IPv4 or IPv6 packet, it includes information to deliver the data to the correct application on the destination. This is known as multiplexing.
- **Identifiers**:
  - **Source and Destination IP Addresses**: Identify the sending and receiving nodes.
  - **Upper Layer Protocol**: Identifies the protocol above the IPv4 or IPv6 Internet layer.
  - **Source and Destination Ports**: For TCP and UDP, identify the applications from which the message was sent and to which it is destined.

- **Demultiplexing**: The destination host uses these identifiers to demultiplex, or deliver the data layer by layer, to the correct destination application.

- **Port Numbers**: TCP and UDP ports can use any number between 0 and 65,535. Client-side applications typically have dynamically assigned port numbers, while server-side applications have pre-assigned port numbers.

- **Data Flow**:
  - **Routers**: Use the Destination IP Address to deliver the packet to the correct node.
  - **Destination Node**: Uses the Protocol field to deliver the packet payload to the correct upper-layer protocol.
  - **TCP/UDP**: Uses the Destination Port to demultiplex the data to the correct application.

**Application Programming Interfaces (APIs)**

- **Windows Sockets and NetBIOS**:
  - **Windows Sockets**: A modern API for networking applications in Windows, supporting both IPv4 and IPv6. It allows applications to use a specific IP address and port, initiate and accept connections, and send and receive data.
  - **NetBIOS**: An older API providing name management, datagram, and session services. It operates over TCP and UDP and is used for file and printer sharing and the Computer Browser service.

- **Types of Sockets**:
  - **Stream Socket**: Provides a two-way, reliable, sequenced, and unduplicated flow of data using TCP.
  - **Datagram Socket**: Provides bidirectional flow of data using UDP.
  - **Raw Socket**: Allows protocols to access IP directly, without using TCP or UDP.

- **NetBIOS Over TCP/IP (NetBT)**: Defined for operation over IPv4, using UDP port 137 for the name service, UDP port 138 for the datagram service, and TCP port 139 for the session service.

- **For more information about NetBIOS and NetBT, see Chapter 11, "NetBIOS over TCP/IP."**

**TCP/IP Naming Schemes in Windows**

- **IP Addresses vs. Names**: While IP is designed to work with 32-bit (IPv4) and 128-bit (IPv6) addresses, users find names easier to remember and use.