(cid:25)(cid:22)(cid:1)
(cid:24)(cid:27)(cid:1)
(cid:24)(cid:22)(cid:1)
(cid:23)(cid:27)(cid:1)
(cid:23)(cid:22)(cid:1)
(cid:27)(cid:1)
(cid:22)(cid:1)
(cid:4)(cid:14)(cid:12)(cid:12)(cid:19)(cid:13)(cid:11)(cid:10)(cid:9)(cid:17)(cid:14)(cid:13)(cid:1)
(cid:4)(cid:14)(cid:12)(cid:15)(cid:19)(cid:16)(cid:9)(cid:17)(cid:14)(cid:13)(cid:1)
(cid:7)(cid:8)(cid:6)(cid:21)(cid:4)(cid:2)(cid:1) (cid:3)(cid:5)(cid:7)(cid:8)(cid:6)(cid:1)
(cid:7)(cid:8)(cid:6)(cid:21)(cid:4)(cid:2)(cid:1) (cid:3)(cid:5)(cid:7)(cid:8)(cid:6)(cid:1)
(cid:7)(cid:8)(cid:6)(cid:21)(cid:4)(cid:2)(cid:1) (cid:3)(cid:5)(cid:7)(cid:8)(cid:6)(cid:1)
(cid:7)(cid:8)(cid:6)(cid:21)(cid:4)(cid:2)(cid:1) (cid:3)(cid:5)(cid:7)(cid:8)(cid:6)(cid:1)
(cid:7)(cid:8)(cid:6)(cid:21)(cid:4)(cid:2)(cid:1) (cid:3)(cid:5)(cid:7)(cid:8)(cid:6)(cid:1)
(cid:23)(cid:22)(cid:22)(cid:1)
(cid:24)(cid:22)(cid:22)(cid:1)
(cid:25)(cid:22)(cid:22)(cid:1)
(cid:3)(cid:7)(cid:20)(cid:5)(cid:1)(cid:11)(cid:6)(cid:1)(cid:7)(cid:10)(cid:12)(cid:18)(cid:15)(cid:1)(cid:14)(cid:5)(cid:15)(cid:1)
(cid:26)(cid:22)(cid:22)(cid:1)
(cid:27)(cid:22)(cid:22)(cid:1)
Figure 7: Comparison of BFPSI and PSI-CA protocol perform-
ance.
peated the tests on a different device model (Samsung Galaxy S3).
The resulting measurements were 0.12 mAh and 0.38 mAh for
BFPSI and PSI-CA, respectively. Thus, we conclude that ratio of
power consumption between BFPSI and PSI-CA remains the same
across different device models.
Discussion. Instantiating Common Friends with BFPSI clearly of-
fers improved performance compared to using PSI-CA. BFPSI re-
quires fewer computations (constant vs linear number of public-key
operations), lower bandwidth and power consumption. As a result,
the use of BFPSI in Common Friends service is likely to offer a bet-
ter user experience and support more frequent runs. On the other
hand, if one only wants to disclose the number of common friends,
then one needs to tolerate the additional overhead incurred by the
use of PSI-CA.
Finally, observe that traditional PSI and PSI-CA protocols incur
similar complexities (e.g., they both require a number of public-key
operations linear in set sizes). Therefore, we can expect that, when
applied to ﬁnding common friends, BFPSI will exhibit performance
gains over traditional PSI protocols very close to those observed
over PSI-CA. This conﬁrms our intuition that, while PSI protocols
are designed to deal with low-entropy input sets, we do not need
their full security in the context of ﬁnding common friends, thus
enabling appreciably improved efﬁciency.
6. RELATED WORK
Motivated by the increasing inﬂuence of social networks, a few
techniques have focused on secure operations on users’ social net-
work proﬁles, such as, matching of common attributes, interests,
and (similar to our work) friends. Li et al. [39] formally analyze
the problem of privacy-preserving personal proﬁle matching and
propose a set of protocols that leverage PSI and/or PSI-CA to se-
curely match attribute sets of different users. Dong et al. [19] rep-
resent a user’s proﬁle as a vector and measure social proximity via
private vector dot product [31], while Zhang et al. [53] extends it to
improve its granularity with ﬁner grained attributes.
Zhang et al. [52] also propose a privacy-preserving veriﬁable
proﬁle matching scheme which is based on symmetric cryptosys-
tem and thus improves efﬁciency.
It relies on a pre-determined
ordered set of attributes and uses it as a common secret shared by
users. However, the scheme is not applicable to unordered sets of
attributes such as random capabilities (as in our case).
In VENETA [50], Von Arb et al. use PSI for privacy-preserving
matching of common entries in the users’ address books to sup-
port decentralized SMS-messaging via Bluetooth. VENETA does
not address the problem of malicious users claiming non-existent
friendships, but only suggests to limit the size of input sets to 300.
Huang et al. [28] present an Android app that instantiates PSI with
166
Figure 5: Power Consumption of BFPSI protocol.
Figure 6: Power Consumption of PSI-CA protocol.
garbled circuits and lets users privately ﬁnd common entries in their
address books. Besides being vulnerable to the same potential at-
tack as in VENETA, the work in [28] reports timing values of 150
seconds to match 128 contacts, thus raising concerns about its prac-
ticality, even though Carter et al. [12] recently present a faster pro-
totype implementation based on specialized secure function evalu-
ation protocols.
De Cristofaro et al. [16] present a framework for private dis-
In their scheme, users need
covery of common social contacts.
to provide a proof of prior relationship to claim a given friend-
ship (speciﬁcally, a cryptographic certiﬁcate). Common friends
are privately discovered following a technique resembling Secret
Handshakes [6, 40], where validity of certiﬁcates is veriﬁed oblivi-
ously to guarantee privacy while enforcing authenticity. However,
this scheme incurs signiﬁcantly higher computation overhead com-
pared to our solutions relying on bearer capabilities and BFPSI.
Speciﬁcally, [16] incurs a number of expensive modular exponen-
tiations linear in the number of friends (and a quadratic number of
modular multiplications) and a communication overhead similar to
traditional PSI techniques.
Our previous work [5] presents a framework for resource shar-
ing (e.g., Internet connectivity) in ad-hoc mobile networks where
users enforce access control based on whether users are friends in
a given social networks or at least have some friends in common.
In [5], we mentioned the possibility of using a social network ap-
plication to exchange capabilities between social network users as
proofs of the friendship relation, and using these capabilities with
available PSI schemes to determine common friends. In contrast,
besides actually constructing and implementing a framework for
secure discovery of common friends, this work shows that tradi-
tional PSI techniques, designed to work with low-entropy set items,
are actually an “overkill.” More efﬁcient solutions, such as the one
based on Bloom ﬁlters presented in Sec. 2.4, can be used to sig-
niﬁcantly reduce communication complexity and remove the need
for a linear number of public-key operations. Also, we present the
design of the Common Friends framework, which is intended to en-
able developers to integrate it in their application and use it, e.g.,
to support trust and access control decision based on social prox-
imity. We verify practicality of proposed techniques with an exper-
imental evaluation which shows the signiﬁcant performance gains
of using BFPSI over traditional PSI protocols designed for low-
entropy items. We also integrate our Common Friends service into
the tethering application sketched in [5], which supports sharing of
tethering connections, and present a full-blown implementation.
Bloom ﬁlters have been used in the context of secure protocols
in a number of other scenarios. For instance, privacy-preserving in-
formation matching based on encrypted Bloom ﬁlters has been pro-
posed by Bellovin and Cheswick [9] for privacy-preserving data-
base search. Kerschbaum [36] applies them for the protection of
supply chain integrity and mitigate risks of industrial espionage.
Also, Eppstein and Goodrich [20] propose Privacy-enhanced In-
vertible Bloom Filters for secure comparison of compressed DNA
sequences. Clearly, none of these techniques apply Bloom ﬁlters
to securely discover common friends and/or for efﬁcient, privacy-
preserving intersection of high-entropy items.
Finally, a few techniques [30, 22, 25, 34, 21] have focused on
improving performance of PSI by introducing assumptions such as
the presence of trusted hardware tokens. Such tokens might need
to be trusted by both parties [30, 22, 25], by only one party [34], or
even untrusted [21]. While efﬁcient, these protocols require hand-
ing over the hardware token, and hence are inapplicable in scen-
arios like ﬁnding common friends between stranger devices.
7. CONCLUSION
This paper presented the Common Friends service, a framework
supporting secure discovery of mutual friends, which protects pri-
vacy of non-common friends and guarantees authenticity of friend-
ships. We ﬁrst presented a generic construction that reduces the
problem of ﬁnding friends to private set intersection, while ensur-
ing authenticity of claimed friends via bearer capabilities. Next,
we introduced a very efﬁcient instantiation, based on Bloom ﬁl-
ters, that only incurs a constant number of public-key cryptography
operations. We also integrated Common Friends with an existing
application for sharing Internet connection, whereby users decide
whether or not to share based on the existence of common friends.
A comprehensive experimental evaluation attested to the practical-
ity of proposed techniques.
The protocols described in this paper allow user to detect whether
another user is two hops away in a social graph. As part of future
work, we plan to generalize them to detect friends who are more
than two hops away. We also intend to extend the infrastructure
proposed in this paper to detect other common attributes between
two users, such as shared interests and group membership, and ex-
plore the use of social proximity to support additional access con-
trol decisions (e.g., for cab/ride sharing, routing, impromptu online
dating, or multimedia content dissemination). Finally, whether or
not we can design an efﬁcient Bloom ﬁlter based PSI-CA variant
for high-entropy items remains an open question.
Acknowledgements: We thank Elena Reshetova for contributing
to the implementation of the original tethering app [5], Thomas
Schneider for collaborating on the idea of using capabilities with
PSI protocols, and Mark Manulis and Bertram Poettering for their
fruitful collaboration. Marcin Nagy’s work was supported by the
SCAMPI project (grant number 258414) of the EU Seventh Frame-
work Programme. The work done at University of Helsinki and
Aalto University was partially supported, respectively, by a dona-
tion from Nokia Research Center and a Google Research Award.
167
8. REFERENCES
[1] Bandwagon. http://bandwagon.io.
[2] Sidecar—My ride is your ride. http://side.cr/.
[3] Zoosk. http://zoosk.com.
[4] AGRAWAL, R., EVFIMIEVSKI, A., AND SRIKANT, R. Information
sharing across private databases. In SIGMOD (2003).
[5] ASOKAN, N., DMITRIENKO, A., NAGY, M., RESHETOVA, E.,
SADEGHI, A.-R., SCHNEIDER, T., AND STELLE, S. Crowdshare:
Secure mobile resource sharing. In ACNS (2013).
[6] BALFANZ, D., DURFEE, G., SHANKAR, N., SMETTERS, D. K.,
STADDON, J., AND WONG, H.-C. Secret Handshakes from
Pairing-Based Key Agreements. In S&P (2003).
[7] BELLARE, M. New proofs for NMAC and HMAC: Security without
collision-resistance. In CRYPTO (2006).
[8] BELLARE, M., NAMPREMPRE, C., POINTCHEVAL, D., AND
SEMANKO, M. The One-More-RSA-Inversion Problems and the
Security of Chaum’s Blind Signature Scheme. Journal of Cryptology
16, 3 (2003).
[9] BELLOVIN, S. M., AND CHESWICK, W. R. Privacy-Enhanced
Searches Using Encrypted Bloom Filters. Tech. Rep. CUCS-034-07,
Columbia University and AT&T, 2004.
https://mice.cs.columbia.edu/getTechreport.php?techreportID=483.
[10] BLOOM, B. H. Space/time trade-offs in hash coding with allowable
errors. Communications of the ACM 13, 7 (1970).
[11] CAMENISCH, J., AND ZAVERUCHA, G. Private intersection of
certiﬁed sets. In Financial Cryptography (2009).
[12] CARTER, H., AMRUTKAR, C., DACOSTA, I., AND TRAYNOR, P.
For your phone only: custom protocols for efﬁcient secure function
evaluation on mobile devices. Security and Communication Networks
(2013).
[13] DANEZIS, G., AND MITTAL, P. Sybilinfer: Detecting Sybil Nodes
using Social Networks. In NDSS (2009).
[14] DE CRISTOFARO, E., GASTI, P., AND TSUDIK, G. Fast and Private
Computation of Cardinality of Set Intersection and Union. In CANS
(2012).
[15] DE CRISTOFARO, E., KIM, J., AND TSUDIK, G. Linear-Complexity
Private Set Intersection Protocols Secure in Malicious Model. In
ASIACRYPT (2010).
[16] DE CRISTOFARO, E., MANULIS, M., AND POETTERING, B.
Private Discovery of Common Social Contacts. In ACNS (2011).
[17] DE CRISTOFARO, E., AND TSUDIK, G. Practical Private Set
Intersection Protocols with Linear Complexity. In Financial
Cryptography (2010).
[18] DE CRISTOFARO, E., AND TSUDIK, G. Experimenting with Fast
Private Set Intersection. In TRUST (2012).
[19] DONG, W., DAVE, V., QIU, L., AND ZHANG, Y. Secure friend
discovery in mobile social networks. In INFOCOM (2011).
[20] EPPSTEIN, D., GOODRICH, M. T., AND BALDI, P.
Privacy-Enhanced Methods for Comparing Compressed DNA
Sequences. http://arxiv.org/abs/1107.3593, 2011.
[21] FISCHLIN, M., PINKAS, B., SADEGHI, A.-R., SCHNEIDER, T.,
AND VISCONTI, I. Secure Set Intersection with Untrusted Hardware
Tokens. In CT-RSA (2011).
[22] FORT, M., FREILING, F. C., PENSO, L. D., BENENSON, Z., AND
KESDOGAN, D. TrustedPals: Secure Multiparty Computation
Implemented with Smart Cards. In ESORICS (2006).
[23] FREEDMAN, M. J., NISSIM, K., AND PINKAS, B. Efﬁcient Private
Matching and Set Intersection. In EUROCRYPT (2004).
[24] HARDT, D. The OAuth 2.0 authorization framework. RFC 6749,
RFC Editor, 2012.
[25] HAZAY, C., AND LINDELL, Y. Constructions of truly practical
secure protocols using standard smartcards. In CCS (2008).
[26] HAZAY, C., AND LINDELL, Y. Efﬁcient protocols for set
intersection and pattern matching with security against malicious and
covert adversaries. In TCC (2008).
[27] HOHENBERGER, S., AND WEIS, S. Honest-Veriﬁer Private
Disjointness Testing Without Random Oracles. In PETS (2006).
[28] HUANG, Y., CHAPMAN, E., AND EVANS, D. Privacy-preserving
applications on smartphones. In HotSec (2011).
[29] HUANG, Y., EVANS, D., AND KATZ, J. Private Set Intersection: Are
Garbled Circuits Better than Custom Protocols? In NDSS (2012).
[30] ILIEV, A., AND SMITH, S. More Efﬁcient Secure Function
Evaluation Using Tiny Trusted Third Parties. Tech. Rep.
TR2005-551, Dartmouth College, 2005.
[31] IOANNIDIS, I., GRAMA, A., AND ATALLAH, M. A Secure Protocol
for Computing Dot-Products in Clustered and Distributed
Environments. In ICPP (2002).
[32] JARECKI, S., AND LIU, X. Efﬁcient Oblivious Pseudorandom
Function with Applications to Adaptive OT and Secure Computation
of Set Intersection. In TCC (2009).
[33] JARECKI, S., AND LIU, X. Fast Secure Computation of Set
Intersection. In SCN (2010).
[34] JÄRVINEN, K., KOLESNIKOV, V., SADEGHI, A.-R., AND
SCHNEIDER, T. Embedded SFE: Ofﬂoading Server and Network
Using Hardware Tokens. In Financial Cryptography (2010).
[35] JOHNSON, A., SYVERSON, P., DINGLEDINE, R., AND
MATHEWSON, N. Trust-based anonymous communication:
Adversary models and routing algorithms. In CCS (2011).
[36] KERSCHBAUM, F. Public-key encrypted bloom ﬁlters with
applications to supply chain integrity. In CODASPY (2011).
[37] KISSNER, L., AND SONG, D. X. Privacy-Preserving Set Operations.
In CRYPTO (2005).
[38] KOSTIAINEN, K., RESHETOVA, E., EKBERG, J.-E., AND ASOKAN,
N. Old, new, borrowed, blue – a perspective on the evolution of
mobile platform security architectures. In CODASPY (2011).
[39] LI, M., CAO, N., YU, S., AND LOU, W. FindU: Privacy-preserving
personal proﬁle matching in mobile social networks. In INFOCOM
(2011).
[40] MANULIS, M., PINKAS, B., AND POETTERING, B.
Privacy-Preserving Group Discovery with Linear Complexity. In
ACNS (2010).
[41] MITTAL, P., WRIGHT, M., AND BORISOV, N. Pisces: Anonymous
Communication Using Social Networks. In NDSS (2013).
[42] MOHAISEN, A., TRAN, H., CHANDRA, A., AND KIM, Y.
Trustworthy distributed computing on social networks. In ASIACCS
(2013).
[43] NAGY, M., ASOKAN, N., AND OTT, J. PeerShare: A System
Secure Distribution of Sensitive Data Among Social Contacts. In
NordSec (2013).
[44] NIST. http://www.nsa.gov/ia/_ﬁles/nist-routines.pdf.
[45] NORCIE, G., DE CRISTOFARO, E., AND BELLOTTI, V.
Bootstrapping Trust in Online Dating: Social Veriﬁcation of Online
Dating Proﬁles. In USEC (2013).
[46] RANTALA, E., KARPPANEN, A., GRANLUND, S., AND
SAROLAHTI, P. Modeling energy efﬁciency in wireless Internet
communication. In MobiHeld (2009).
[47] RECORDON, D., AND REED, D. OpenID 2.0: a platform for
user-centric identity management. In DIM (2006).
[48] TANENBAUM ET AL., A. S. Using Sparse Capabilities in a
Distributed Operating System. In ICDCS (1986).
[49] THIAGARAJAN, N., AGGARWAL, G., NICOARA, A., BONEH, D.,
AND SINGH, J. P. Who killed my battery?: Analyzing mobile
browser energy consumption. In WWW (2012).
[50] VON ARB, M., BADER, M., KUHN, M., AND WATTENHOFER, R.
VENETA: Serverless friend-of-friend detection in mobile social
networking. In WiMob (2008).
[51] YAO, A. C. How to Generate and Exchange Secrets. In FOCS
(1986), pp. 162–167.
[52] ZHANG, L., AND LI, X.-Y. Message in a Sealed Bottle: Privacy
Preserving Friending in Social Networks.
http://arxiv.org/abs/1207.7199, 2012.
[53] ZHANG, R., ZHANG, Y., SUN, J., AND YAN, G. Fine-grained
private matching for proximity-based mobile social networking. In
INFOCOM (2012).
168