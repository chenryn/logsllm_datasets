the DDH assumption of BC as a generic assumption
over two function symbols, an extractor ext and a com-
biner comb, such that, for any names n1, n2, n3 we have
(cid:0)ext(n1),ext(n2),comb(ext(n1), n2),comb(ext(n2), n1)(cid:1)
∼(cid:0)ext(n1),ext(n2),
ext(n3)(cid:1).
For a cyclic group with generator g, the extractor function
would be ext(n) := gn and the combiner comb(t, u) := tu,
and the DDH over the group assumption implies our generic
assumption over the functions.
Example 5 (OTP assumption). For the exclusive-or operator
⊕, we only assume that it is a binary function symbol such
that for any term t and fresh name n, it allows for a one-time
For any security proof of a protocol that uses ⊕, one
typically does not need to specify that ⊕ may be associative and
commutative. Such a proof then gives us security guarantees,
regardless of whether the concrete implementation of ⊕ is
associative or not.
pad, i.e.,(cid:0)(t ⊕ n) ∼ n(cid:1).
To summarize, for proving with BC the full (computational)
security of a protocol that uses concretely instantiated prim-
itives, we ﬁrst require a proof that the primitives instantiate
cryptographic assumptions. Then, we use a translation of those
assumptions in the BC proof to prove properties of the protocol.
For example, to give a computational proof of a signed Difﬁe-
Hellman protocol that uses Ed25519 signatures, we would use
the proof that Ed25519 signatures satisfy EUF-CMA, and
then use the corresponding EUF-CMA rule in the BC proof.
Note that it is also not uncommon to leave this question
unanswered: i.e., to propose a protocol that relies on an
assumption (e.g., PRF), for which we do not know an
instantiation that provably meets it, and the guarantee is then
phrased as “assuming that primitive X is a PRF, . . .”. Such a
proof can still be meaningful since it proves the absence of a
class of attacks, or anticipates a future provable instantiation.
E. The SQUIRREL Prover
The SQUIRREL Prover mechanizes the BC logic, and offers
additional features not present in BC. Two downsides of the
original BC logic, which are solved by SQUIRREL, are:
1) to prove the security of a protocol, one must make a proof
for each possible action orderings of the protocol, and
2) the logic only considers ﬁnite protocols, and therefore
notably only a bounded number of sessions.
As the security proof of a protocol may be very similar for
many action orderings, which are also called (symbolic) traces,
the ﬁrst point implies a lot of tedious repetitions inside proofs.
The second point can be solved by performing induction over
the number of sessions, but this cannot be done inside the BC
logic, and instead requires external mathematical reasoning.
1) Protocol Speciﬁcation: The SQUIRREL prover’s protocol
speciﬁcation language is close to the well-known applied pi-
calculus. In Fig. 4 we give a simpliﬁed version of a key
exchange protocol based on asymmetric encryption. An Initiator
Fig. 3. Final BC simulation of attacker/protocol interactions. Note the
recomputation of, e.g., Tatt0 .
for any other attacker computation step, this ﬁnal distinguisher
does not inherit any states from the previous attacker calls, but
it may recompute those states if it is given the same arguments.
Consider two protocols: one can build as previously de-
scribed two sequences of terms that correctly capture all the
behaviours of their interactions with an attacker. If there exists
an attacker that can distinguish the two protocols, then there is
a set of attacker Turing machines {Tatti} that shows that the
simulation of the two sequences of terms can be distinguished,
and thus that ∼ does not hold over them. This constitutes the
soundness of the BC logic.
Finally, one needs to prove the soundness of the logical
reasoning rules by using reductions. For instance, a simple
reduction would prove that a rule such as IF-F from Example 3
is indeed a valid rule to reason about ∼.
The rules presented in this example can be proven sound for
any Turing machine attacker, without limiting its computational
power. Such rules form the core of the logic, and are referred
to as structural rules. In addition, one also needs to integrate
the classical cryptographic assumptions inside the logic.
D. Cryptographic assumptions
In BC, cryptographic assumptions are encoded as rules (also
referred to as axioms). BC includes provenly-sound rules to
encode assumptions such as PRF, IND-CCA, EUF-CMA,
ENC-KP, INT-CTXT, OTP, and DDH. Given a crypto-
graphic assumption, one can translate it into a BC rule using
terms: proving soundness of such a rule is done by providing
a reduction showing that if there exists a model that breaks
the BC assumption, then there exists an attacker that breaks
the original cryptographic assumption. As the translation is
often natural, the soundness proofs of the axioms are relatively
straightforward, and are usually fully black-box reductions. We
refer the reader to [7], [46] for the soundness proofs of the
rules corresponding to the main cryptographic assumptions.
Example 4 (DDH assumption).
the full
DDH assumption is not usually made: the encoded as-
In BC proofs,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:09 UTC from IEEE Xplore.  Restrictions apply. 
5129
skI , kI , pkR
INITIATOR
skR, kR
RECEIVER
pkI , enc(kI , pkR)
enc(kR, pkI )
Derive key:= h(s, kI ) ⊕ h(s, kR)
Fig. 4. Encryption based key exchange
2) The SQUIRREL meta-logic: The SQUIRREL paper [5]
introduces a meta-logic that introduces universal quantiﬁcation
over the possible traces of a protocol, as well as its number of
sessions. As one can then reason at an abstract level on the
traces, a single proof in the meta-logic covers multiple traces
of the protocol, and it is now possible to consider unbounded
protocols, thus solving both previous issues.
To do so, the logic is extended with timestamp variable τ
to quantify over possible points in a trace, and macros that
depend on a protocol P , such as:
with secret and public keys (sk I , pk I ) sends some encrypted
ephemeral secret kI to a responder with keys (sk R, pk R), that
answers with its own encrypted ephemeral share kR. Then,
a shared key is derived as h(s, kI ) ⊕ h(s, kR), where h is
a PRF hash function and s a public seed. The derived key
should only be computable by the intended peer. The protocol
does not offer any explicit authentication. A possible implicit
authentication guarantee could be: If a party X derives a key
k with intended peer Y, then whoever can also compute the
key must be Y, and agree on the communication partners.
A basic model of this protocol is expressed in SQUIRREL
as illustrated in Listing 1. The hash and aenc instructions
declare function symbols that respectively satisfy either the
PRF assumption or the IND-CCA assumption, and the name
command declares fresh values. In the process declarations,
out and in specify outputs and inputs, new speciﬁes sampling
fresh values, and | is for parallel composition. In the last
step of the Initiator, the instruction sIR:= is used to store the
derived key in a state. The last line of this example captures a
security property, which we discuss in next Section.
Note that the threat model is part of the input ﬁle, and
SQUIRREL can be used to verify many scenarios. For instance,
more complex versions of this running example that will be
discussed in Section V-C can include an unbounded number of
sessions and participants, and pk(skI ) may not be hard-coded
inside the Responder process but received as an input.
hash H
aenc enc,dec,pk
name s,skI,skR,kIR : message
process Initiator =
enc(kI, rI,pk(skR)) );
new kI; new rI;
out(cI,
in(cR,ctR);
let kR = dec(ctR,skI) in
sIR :=
H(s,kI) XOR H(s,kR).
process Responder =
new kR;
new rR;
in(cI, ctI);
out(cR, enc(kR, rR, pk(skI))).
system [KE] out(cI,s); (Responder | Initiator).
equiv [KE] forall t, frame@t,sIR ~ frame@t,kIR.
Listing 1. Simpliﬁed key exchange in SQUIRREL
• inputP @τ, to refer to the input received by the protocol
P at timestamp τ;
• outputP @τ for the output;
• frameP @τ for the full frame for the protocol up to this
point, which is the sequence of all previous outputs.
If we denote by pre(τ ) the function that points to the previous
timestamp in the trace, and abstracting away some details,
frameP @τ would expand to frameP @pre(τ ), outputP @τ.
The indistinguishability of two protocols P and Q can
be expressed in a single meta-logic formula frameP @τ ∼
frameQ@τ. This meta-logic formula then holds if for all
possible traces of the protocol, and all possible τ over those
traces, the BC frames of the protocol are indistinguishable.
In the example of the KE protocol of Listing 1, the last line
declares the security goal expressing the fact that the key
derived by the initiator is indistinguishable from some fresh
value kIR, even given all the messages sent over the network.
The proof in SQUIRREL of this goal will be described at a
high-level in Section V-C3.
We remark however that even though this implies a proof of
security for each possible number of sessions, it does not imply
the classical security for an unbounded number of sessions
because no concrete security bounds are obtained. Over this
meta-logic, there are two sets of rules. The ﬁrst allows proving
that some probabilistic statement is true with overwhelming
probability, and the second is for proving indistinguishability
properties. These two sets interact: for instance, one can ﬁrst
prove authentication properties of a key exchange using rules
from the ﬁrst set, and then rely on these properties to prove
the secrecy of the key using the second set.
3) SQUIRREL’s mechanization: The SQUIRREL prover is
available at [2], along with the code of the running example
and the case studies. It is an interactive prover with some
built-in tactics that simplify low-level reasoning.
From a high-level point of view, most proofs inside SQUIR-
REL follow the following schema:
1) prove a set of probabilistic statements inside the dedicated
prover, such as matching conversations, or that some bad
states cannot be reached;
2) prove the desired indistinguishability, using the probabilis-
tic statements as lemmas.
The second step often relies on an induction over the length of
the trace. Concretely, the proof is usually done by assuming that
frameP @pre(τ ) ∼ frameQ@pre(τ ) is true, and proving that
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:09 UTC from IEEE Xplore.  Restrictions apply. 
6130
frameP @τ ∼ frameQ@τ holds. By deﬁnition of the frame,
this is equal to proving that
frameP @pre(τ ), outputP @τ ∼ frameQ@pre(τ ), outputQ@τ
and making a case distinction over possible values of output.
As a concrete example: Fig. 4 in SQUIRREL takes 20 lines
to model, 20 lines of proof, and is then proved by SQUIRREL
in under a second.
III. ADAPTING THE BC LOGIC AND SQUIRREL TO THE
POST-QUANTUM WORLD
Proofs in the BC logic as presented in the previous section
do not guarantee security against quantum attackers.
Recall that computational proofs rely on (i) computational
assumptions, and (ii) reductions. In the context of the BC
logic, the computational assumptions are the easiest to deal
with when going to the post-quantum world: if we know that
no post-quantum secure instantiations exist for a particular
assumption, we can no longer use it in proofs. For example,
if a previous proof relied on an axiom that states that integer
factorization is hard, the proof is unsound as we can no longer
use this axiom in the post-quantum setting.
The complexity of adapting the reductions that follow from
the logic mostly revolves around revisiting the assumptions
around the term interpretation and the proof rules, which
implicitly encode attacker manipulations. Where previously the
attacker was modeled using polynomial time Turing machines,
we now need to change this to a quantum attacker.
It turns out that this modiﬁcation is less straightforward than
we expected. As explained previously, the classical BC logic
uses a term representation that essentially corresponds to a
tree in which computations, including those of the attacker,
are performed in a purely local fashion. In the classical BC
setting, this allows for modeling a single attacker using multiple
local attackers: instead of explicitly communicating, subsequent
local attackers effectively recompute the results of previous
ones. This recomputation was possible since we made all
operations deterministic and moved the probabilistic aspects (of
both protocol and attacker) to two explicit random tapes. This
modeling relies on a classical result for modeling probabilistic
Turing machines as deterministic machines with a random tape.
However, for a quantum polynomial time attacker, we have
no corresponding result. Notably, a quantum attacker may
produce internal random state that we cannot inﬂuence nor
extract. This phenomenon manifests itself in the so-called no-
cloning theorem [61]: We cannot duplicate the quantum state
of a quantum machine, nor can we run a quantum machine
twice and expect to obtain the same inner state.
This directly breaks the stability of the previous interpreta-
tion, and for instance, the evaluation of Fig. 2 could now return
false. Furthermore, in the interpretation of Fig. 3, we would not
be able to recompute inside Tatt1 the same attacker state as
the one computed during Tatt0, and therefore this evaluation
would not correspond to the run of a single interactive quantum
attacker, as was the case for classical attacker. Similarly,
the classical BC interpretation also allows for rewinding the
Fig. 5. Quantum compatible simulation of attacker/protocol interactions
without recomputation in PQ-BC. Compare this to Fig. 3.
attacker, which is impossible for quantum attackers based on
the same no-cloning theorem.
We solve these issues by deﬁning an interpretation where the
attacker is a single black-box interactive machine, as opposed
to a set of one-shot Turing machines. This allows us to verify
a set of conditions that when met, ensure that we can provide
a sound interpretation for a quantum attacker. Concretely, to
interpret att0, we query the interactive machine once, and
to interpret att1(t), we interpret t, and give it as input to
the same interactive machine. This effectively changes the
term interpretation from a tree to a directed acyclic graph.
We will formally deﬁne such an interpretation later, but it
would intuitively be pictured as in Fig. 5. Changing the term
interpretation in this fashion leads to a wide range of subtle
changes throughout the logic.
We provide three conditions to ensure that we can give a
sound interpretation for a quantum attacker. We provide intu-
ition for them below, and formally deﬁne them in Section IV.
Condition 1 - Consistency: In the classical BC logic, the
attackers need not be consistent. We provide a concrete example,
that intuitively corresponds to the simulation of rewinding the
attacker. For two distinct terms u, v, consider the sequence of
terms att1(att0(), u), att1(att0(), v). This corresponds
to running att0, running its continuation with u, and then
making it forget that we ever gave it u (rewind the attacker)
and calling it on v.