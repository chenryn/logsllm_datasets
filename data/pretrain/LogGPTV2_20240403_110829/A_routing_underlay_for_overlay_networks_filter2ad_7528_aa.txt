title:A routing underlay for overlay networks
author:Akihiro Nakao and
Larry L. Peterson and
Andy C. Bavier
A Routing Underlay for Overlay Networks
Akihiro Nakao, Larry Peterson and Andy Bavier
Department of Computer Science
Princeton University
ABSTRACT
We argue that designing overlay services to independently probe the Inter-
net –with the goal of making informed application-speciﬁc routing decisions–
is an untenable strategy. Instead, we propose a shared routing underlay that
overlay services query. We posit that this underlay must adhere to two high-
level principles. First, it must take cost (in terms of network probes) into
account. Second, it must be layered so that specialized routing services can
be built from a set of basic primitives. These principles lead to an underlay
design where lower layers expose large-scale, coarse-grained static infor-
mation already collected by the network, and upper layers perform more
frequent probes over a narrow set of nodes. This paper proposes a set of
primitive operations and three library routing services that can be built on
top of them, and describes how such libraries could be useful to overlay
services.
Category and Subject Descriptors: C.2.0
General Terms: Design, Algorithm
Keywords: Overlay Networks, Routing, Infrastructure
1.
INTRODUCTION
Overlays are increasingly being used to deploy network services
that cannot practically be embedded directly in the underlying In-
ternet [21, 22]. Examples include ﬁle sharing and network-embedded
storage [18, 27, 13], content distribution networks [34], routing and
multicast overlays [28, 9, 12], QoS overlays [33], scalable object
location [10, 26, 32, 24], and scalable event propagation [14].
One common characteristic of these overlay services is that they
implement an application-speciﬁc routing strategy. For example,
object location systems construct logical topologies using distributed
hash tables, multicast overlays build distribution trees that mini-
mize link usage, and robust routing overlays attempt to ﬁnd alter-
natives to Internet-provided routes. These overlays often probe the
Internet, for example using ping and traceroute, in an effort to
learn something about the underlying topology, thereby allowing
them to construct more efﬁcient overlay topologies. Some overlays
also employ active measurement techniques in an effort to contin-
uously monitor dynamic attributes like bandwidth and loss. Even
overlays that construct purely logical topologies probe the Internet
to select logical neighbors that are also physically nearby.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’03, August 25–29, 2003, Karlsruhe, Germany.
Copyright 2003 ACM 1-58113-735-4/03/0008 ...$5.00.
While having a single overlay probe the Internet in an attempt
to discover its topology is not necessarily a problem, the strategy
is not likely to scale. This is for two fundamental reasons. First,
aggressive probing mechanisms that monitor dynamic attributes do
not scale in the number of nodes that participate in the overlay.
For example, the designers of RON [9] indicate that their approach
does not scale beyond roughly 50 nodes. Second, when multiple
overlays run on a single node (as is the case in an overlay-hosting
platform like PlanetLab [22]) or on the same subnet (as might be
the case if a site participates in multiple overlay services) it is not
uncommon to see a measurable fraction of the trafﬁc generated by
a node being ping. On PlanetLab, for example, we recently mea-
sured 1GB-per-day of ping trafﬁc (outbound only), corresponding
to a little over one ping per second per node across approximately
125 nodes. Although it is difﬁcult to quantify how many concurrent
overlays a network could support—or what percentage of overall
trafﬁc should be allowed to be ping—having every overlay inde-
pendently probe the network is difﬁcult to defend architecturally.
The advantage that broad-coverage services like the ones cited
above gain over traditional client-server applications is that, by be-
ing geographically distributed over the world, they have multiple
vantage points of the network from which they are able to construct
application-speciﬁc packet forwarding strategies. It should not be
forgotten, however, that the network itself already has the advan-
tage of these multiple viewpoints, and already has a fairly complete
picture of the network. It is redundant for a single overlay network
to re-discover this information for itself. It is architecturally silly
for each overlay to duplicate this effort.
In response to this problem, we propose a new architectural ele-
ment—a routing underlay—that sits between overlay networks and
the underlying Internet. Overlay networks query the routing under-
lay when making application-speciﬁc routing decisions. The un-
derlay, in turn, extracts and aggregates topology information from
the underlying Internet. In addition to making a case for the rout-
ing underlay, this paper sketches one possible underlay design and
evaluates its feasibility.
2. ARCHITECTURE
This section motivates our routing underlay architecture by ﬁrst
observing that many existing overlays could be implemented on top
of a shared set of topology discovery services. It does not attempt
to deﬁne a comprehensive set of services, sufﬁcient to support all
overlays, but rather, it identiﬁes the kinds of high-level operations
that overlays might effectively employ. The section then proposes
a set of low-level primitives that an underlay would need to support
to implement these operations. The section concludes by sketching
a layered architecture suggested by this discussion.
2.1 Useful Services
Looking at the problem from the top-down, we observe that many
recently proposed overlay services use similar approaches to topol-
ogy discovery and self-organization, and for this reason, could ben-
eﬁt from a shared routing underlay. Such an underlay might also
help some overlays take more scalable approaches to resource dis-
covery. Below, we discuss a few representative overlays and iden-
tify some underlay services that they could exploit.
The RON routing overlay [9] aims to discover good-quality paths
through an overlay of routing nodes, as well as to quickly fail-over
to an alternate path when the current path goes down or becomes
congested. RON organizes the N participating nodes into a clique
and probes each of the N 2 edges to discover its latency; it then
runs a link-state routing algorithm over the fully-connected logi-
cal topology to discover the lowest-cost routes through the overlay.
However, the authors report that this approach does not scale for
N > 50 nodes due to the amount of probes generated. A rout-
ing underlay could help the situation by providing RON with a
sparsely connected routing mesh of overlay nodes; probing a mesh
instead of a clique could reduce the total probing cost by an order
of N. Alternatively, RON could be redesigned to probe the net-
work at connection setup time, that is, on-demand. The underlay
could return some (constant) number of disjoint paths through the
network between the ingress and egress RON nodes for the con-
nection, and RON could probe just these paths to select the best
one. Since the paths would be disjoint, their performance should
be independent; periodic probes of each path would allow RON to
switch paths should the performance of one decline.
An end-system multicast (ESM) overlay [12, 11] organizes end-
hosts into a mesh and then runs a minimum spanning tree algo-
rithm on the mesh to produce a multicast tree. ESM would beneﬁt
from an underlay operation that allowed it to ﬁnd the overlay nodes
that are the nearest neighbors to a given node prior to building the
mesh. Alternatively, the underlay could provide a ready-built rout-
ing mesh based on knowledge of the underlying network topology,
with ESM then pruning this mesh if necessary before running the
MST algorithm. Nodes in peer-to-peer systems like ﬁle sharing
networks are also interested in ﬁnding their nearest neighbors in
order to peer with them. Conversely, a fault-tolerant P2P ﬁle sys-
tem may want to ﬁnd a far-away neighbor for data replication, in
order to ensure that local disasters do not affect all copies.
The three candidate underlay services that we have suggested—
ﬁnding the nearest neighbors to a node, ﬁnding disjoint paths be-
tween two nodes, and building a routing mesh—are by no means
the only ones that could be shared among a wide number of over-
lays. However, we believe that they represent an interesting initial
set from which to explore the space.
2.2 Topology Discovery
Looking at the problem from the bottom-up, we ask ourselves
what can be known about the underlying network topology. This
question is immediately complicated by the fact that the underlying
network topology is often nested, with a link at one level actually
implemented by a multi-link path at another level. It is likely that
different overlays will need to see the topology at different reso-
lutions. For example, one overlay might be satisﬁed to know that
two nodes are connected to different autonomous systems (AS),
while another overlay might need to know that two physical links
between a pair of nodes do not go through the same harbor tunnel.
Although we would like to claim that we can justify a set of
primitives for discovering network topology from ﬁrst principles,
the truth is that we can only propose an initial candidate set based
on our experiences to-date. This set is also inﬂuenced by what we
Service Overlay Networks
Library of Routing Services
Topology Probing Kernel
...raw topology information...
Primitives
Figure 1: Structure of the Routing Underlay
understand how to implement using the raw topology information
already available in the underlying Internet. With these caveats in
mind, we propose three primitives that the routing underlay should
support:
(cid:15) it should provide a graph of the known network connectivity
at a speciﬁed resolution (e.g, ASes, routers, physical links)
and scope (e.g., the Internet, some AS, everything within a
radius of N hops);
(cid:15) it should expose the actual route (path) a packet follows from
one point to another, again at a speciﬁed resolution (e.g., a
sequence of ASes, routers, or links);
(cid:15) it should report topological facts about speciﬁc paths be-
tween a pair of points, according to a speciﬁed metric (e.g.,
AS hops, router hops, measured latency).
Keep in mind that these primitives represent an ideal interface;
a real underlay implementation may not be able to provide all of
it. Some information may be unavailable or incomplete. For exam-
ple, the administrator of a particular domain may be unwilling to
provide a feed from their BGP router to our underlay, and so the un-
derlay cannot have knowledge of AS-level paths originating in that
domain. Similarly, a carrier might not be willing to reveal the fact
that seemingly independent links are carried in the same bundle.
We could attempt to collect this information for ourselves, for ex-
ample using network tomography [30, 19, 29], but such techniques
are designed to drive simulation models rather than enable routing
decisions, and may be too expensive. We have to deal with the re-
ality that gathering more accurate topological information comes
with a cost.
2.3 Layered Routing
Combining these top-down and bottom-up perspectives, we pro-
pose a layered approach to constructing the routing underlay. The
primary feature of this approach is cost-consciousness: our under-
lay uses infrequent probes of the entire network at lower layers, and
higher layers reduce the scope of the probes while increasing their
frequency. Our hope is that a service overlay making application-
speciﬁc routing decisions using our underlay will consider only a
small, ﬁxed-sized subset of the total set of overlay nodes. Typi-
cally, this means that lower layers use static information about the
network (i.e., that needs to be probed infrequently) while upper
layers probe dynamically changing network conditions.
Figure 1 depicts the structure of our routing underlay, which we
summarize as follows:
(cid:15) The bottom-most layer, which we label the topology probing
kernel, provides the underlay primitives described in Sec-
tion 2.2 using the raw topology information that is already
available in, or can be directly extracted from, the underly-
ing Internet. This layer hides the fact that probes are sent
to remote sites, and it caches the results of previous probes.
Note that while there is a cost to retrieve raw topology in-
formation from a remote site, we assume that accessing this
information from within the local site is free since the in-
formation is already being collected as part of the Internet’s
normal operation.
(cid:15) The second level provides a library of routing services. These
services answer higher-order questions about the overlay it-
self, such as those discussed in Section 2.1, using the primi-
tives exported by the topology probing layer. Our prototype
library uses heuristics that are inexpensive in terms of probes,
robust in the face of incomplete information provided by the
primitives, and produce good results.
In other words, the
topology probing layer provides the small set of “facts” that
the underlay has learned about the Internet’s topology, while
the routing services library represents the higher-level “con-
clusions” one might derive based up on those facts. Of course
a wide range of library services are possible to support the
special needs of different overlay networks.
(cid:15) The overlay services themselves represent the top-most layer.
They are primarily distinguished from library services in that
they are typically used directly by application programs rather
than by other services.
Note that we have used the terms “kernel” and “library” to denote
the fact that we assume a single topology probing layer running
on each node (thus sharing state across a set of overlays), while we
expect different library services to be linked into each overlay (thus
not sharing state between overlays). There may be value in sharing
topology library state among overlays, but we do not pursue this
question any further in this paper.
The interesting question is whether we can actually enforce the
use of the routing underlay, or if overlay applications will bypass
the topology discovery primitives and directly probe the Internet
themselves. On an infrastructure-based overlay like PlanetLab, we
can enforce use of the underlay by implementing the probing layer
in the OS kernel, and in doing so, pace the rate and limit the range
of various probes. For pure end-system overlays, universal kernel
enforcement is not likely, so we must fall back to two incentive-
based arguments. First, the services offered by the routing under-
lay are so convenient that application writers will choose to use
them, implying that the primary reason they currently use ping and
traceroute is that these are the only tools available. Second, to
the extent excessive probing trafﬁc becomes a widely-recognized
problem, the same social pressures that encourage the use of TCP-
friendly congestion control will encourage the use of a sane routing
underlay. In fact, this “encouragement” is likely to take the form
of ISPs and network administrators blocking ping and traceroute
trafﬁc in an effort to limit excess probing. We can only hope to
introduce an acceptable probing layer into the architecture before
this happens.
3. TOPOLOGY PROBING KERNEL
The topology probing layer supports a set of primitive opera-
tions that report connectivity information about the Internet. We
envision these primitives being supported on every overlay node.
Much of the information exported by this layer is at the granularity
of autonomous systems (AS), and is relatively static. This section
identiﬁes three such primitives, brieﬂy sketches their implementa-
tion, and discusses their costs.
For the sake of this discussion, we assume each overlay node has
access to the BGP routing table at a nearby BGP router. For multi-
homed sites, a BGP speaker within the site could provide this rout-
60000
50000
40000
30000
20000