character ('), which allows them to supply the closing quote and include their own 
SQL statements. Of course, a single quote isn't the only way to manipulate an SQL 
query. Dealing with unbounded integer fields (or any data not enclosed in quotes) 
might cause problems, too. Developers don't expect these fields to contain 
nonnumeric data, so they often don't check for other data types, particularly if the 
data is taken from a hidden field or cookie. Take a look at this example: 
$order_id = $HTTP_POST_VARS ['hid_order_id']; 
$query = "SELECT * FROM orders WHERE id=" 
This example is similar to the previous one, except the order_id value is received in 
a hidden variable that should contain an integer value. This statement could be 
compromised by supplying a value such as "1 OR 1=" for hid_order_id. In this case, 
you could expect the application to return all orders in the system. 
Note 
PHP and MySQL provide mechanisms for cleaning strings to help mitigate the risk of 
this attack. Some examples of filtering functions are mysql_real_escape_string(), 
dbx_escape_string(), and pg_escape_string(). However, filtering isn't the most 
reliable method of addressing this issue, as it is still in-band representation and could 
be vulnerable to unforeseen attack vectors and errors in the filtering routines. 
Chapter 17(? [????.]) discusses parameterized queries as an out-of-band query 
method that provides a more effective method of protection. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
451 
The impact of SQL injection vulnerabilities varies depending on the RDBMS and 
database structure. Some databases limit injected queries to the scope of the initial 
statement; for instance, a vulnerability in an Oracle SELECT statement allows injecting 
only additional SELECTS or function calls. On the other end of the spectrum, some 
databases allow the injected statement almost unlimited functionality; Microsoft SQL 
Server allows terminating the current statement with a semicolon, and then 
appending another statement. 
In many cases, the database contents are attackers' final goal, so they are happy with 
any vulnerability that grants arbitrary database interaction. However, the attack 
could also be extended to the hosting system. Many RDBMS implementations have 
stored procedures for running system commands or arbitrary processes. Attackers 
can use these procedures unless the database session is explicitly denied access. 
Failing that approach, the RDBMS implementation itself might expose vulnerabilities. 
Many stored procedures and functions are implemented in other languages, which 
can expose a host of other potential vulnerabilities (discussed more in Chapter 17(? 
[????.])). 
You might also need to consider truncation issues that could result in SQL injection, as 
in file handling. This error can occur in languages using fixed-size buffers; attackers 
can fill a buffer enough to eliminate trailing clauses. Of course, most developers 
prefer to use languages with counted string classes when handling SQL queries. Still, 
it's worth keeping this attack in mind if you encounter C/C++ front ends that 
manipulate SQL. Listing 8-21 shows an example. 
Listing 8-21. SQL Truncation Vulnerability 
int search_orders(char *post_detail, char *sess_account) 
{ 
    char buf[1024]; 
    int rc; 
    post_detail = escape_sql(post_detail); 
    sess_account = escape_sql(sess_account); 
    snprintf(buf, sizeof(buf), 
        "SELECT * FROM orders WHERE detail LIKE " \ 
        "\'%%%s%%\' AND account = \'%s\'", 
        post_detail, sess_account); 
    rc = perform_query(buffer); 
    free(post_detail); 
    free(sess_account); 
    if(rc > 0) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
452 
        return 1; 
    return 0; 
} 
Assume that the search_orders() function in Listing 8-21 allows users to search 
through their own orders, but no one else's. The escape_sql() function prevents users 
from injecting any control characters, and the sess_account variable is provided from 
the session. This means users can manipulate only the length and content of the 
post_detail variable. However, they can pad post_detail with enough percent signs 
(%) that it causes snprintf() to cut off the AND clause that restricts the query to 
current users. The resulting query then retrieves all orders, regardless of the user. 
7.4.5 Metacharacter Filtering 
The potential issues associated with metacharacters often necessitates a more 
defensive coding strategy. Generally, this strategy involves attempting to detect 
potential attacks or sanitize input before it's interpreted. There are three basic 
options: 
Detect erroneous input and reject what appears to be an attack. 
Detect and strip dangerous characters. 
Detect and encode dangerous characters with a metacharacter escape 
sequence. 
Each of these options has its uses, and each opens the potential for new 
vulnerabilities. The first two options attempt to eliminate metacharacters outright, so 
they share certain commonalties addressed in the next section. The third option 
involves a number of unique concerns, so it is addressed separately in "Escaping 
Metacharacters." 
Eliminating Metacharacters 
Rejecting illegal requests and stripping dangerous characters are similar strategies; 
they both involve running user data through some sort of sanitization routine, often 
using a regular expression. If the disallowed input is rejected, any request containing 
illegal metacharacters is simply discarded. This approach usually includes some sort 
of error indicating why the input wasn't allowed, as shown in this example: 
if($input_data =~ /[^A-Za-z0-9_ ]/){ 
    print "Error! Input data contains illegal characters!"; 
    exit; 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
453 
In this example, the input_data variable is checked for any character that isn't 
alphanumeric, an underscore, or a space. If any of these characters are found, an 
error is signaled and processing terminates. 
With character stripping, the input is modified to get rid of any violations to the 
restrictions, and then processing continues as normal. Here's a simple modification of 
the previous example: 
$input_data =~ s/[^A-Za-z0-9]/g; 
Each option has its strengths and weaknesses. Rejection of dangerous input lessens 
the chance of a breach because fewer things can go wrong in handling. However, a 
high false-positive rate on certain inputs might cause the application to be particularly 
unfriendly. Stripping data elements is more dangerous because developers could 
make small errors in implementing filters that fix up the input stream. However, 
stripping input may be considered more robust because the application can handle a 
wide variety of input without constantly generating errors. 
Both approaches must account for how strong their filter implementation is; if they 
don't catch all the dangerous input, nothing that happens afterward matters much! 
There are two main types of filters: explicit deny filters (black lists) and explicit 
allow filters (white lists). With an explicit deny filter, all data is assumed to be 
legal except the specific characters deemed dangerous. Listing 8-22 is an example of 
an explicit deny filter implementation. 
Listing 8-22. Character Black-List Filter 
int islegal(char *input) 
{ 
    char *bad_characters = "\"\\\|;<>&-*"; 
    for(; *input; input++){ 
        if(strchr(bad_characters, *input) 
            return 0; 
    } 
    return 1; 
} 
As you can see, this filter allows any characters except those in the bad_characters 
set. Conversely, an explicit allow filter checks for characters known to be legal, and 
anything else is assumed illegal, as shown in Listing 8-23. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
454 
Listing 8-23. Character White-List Filter 
int islegal(char *input) 
{ 
    for(; *input; input++){ 
        if(!isalphanum(*input) && *input != '_' && !isspace(*input)) 
            return 0; 
    } 
    return 1; 
} 
This example is similar to Listing 8-22, except it's testing for the existence of each 
character in a set of legal characters, as opposed to checking for illegal characters. 
White-list filters are much more restrictive by nature, so they are generally 
considered more secure. When the accept set is large, however, using an explicit 
deny filter might be more appropriate. 
When reviewing code containing filters of either kind, you must determine whether 
the application has failed to account for any dangerous input. To do this, you should 
take these steps: 
1.  Make a list of every input the filter allows. 
2.  Make a list of every input that's dangerous if left in the input stream. 
3.  Check whether there are any results from the intersection of these two lists. 
Step 1 is straightforward and can be done from just reading the code; however, step 
2 might require more creativity. The more knowledge you have about the component 
or program interpreting the data, the more thorough analysis you can perform. It 
follows, therefore, that a good code auditor should be familiar with whatever data 
formats they encounter in an assessment. For example, shell programming and SQL 
are metadata formats commonly used in web applications. 
Insufficient Filtering 
When you already have a thorough knowledge of the formats you deal with, there's 
usually the temptation to not make allowed input lists. You might instead choose to 
draw on your existing knowledge to assess the filter's strength. This approach may be 
adequate, but it also increases your chances of missing subtle vulnerabilities, just as 
the application developer might. For example, take a look at Listing 8-24, which 
demonstrates a filtering vulnerability in the PCNFSD server. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
455 
Listing 8-24. Metacharacter Vulnerability in PCNFSD 
int suspicious (s) 
char *s; 
{ 
    if(strpbrk(s, ";|&<>`'#!?*()[]^") != NULL) 
        return 1; 
    return 0; 
} 
A filter is constructed to strip out dangerous characters before the data is passed to 
popen(). The developers have a fairly complete reject set, but they missed a character. 
Can you see what it is? That's right: it's the newline (('\n') character. If a newline 
character is inserted in the input stream, the shell treats the data before it as one 
command and the data after it as a new command, thus allowing attackers to run 
arbitrary commands. This example is interesting because the newline character is 
often forgotten when filtering data for shell execution issues. People think about other 
command separators, such as semicolons, but often neglect to filter out the newline 
character, demonstrating that even experienced programmers can be familiar with a 
system yet make oversights that result in vulnerabilities. 
Even when you're familiar with a format, you need to keep in mind the different 
implementations or versions of a program. Unique extensions might introduce the 
potential for variations of standard attacks, and data might be interpreted more than 
once with different rules. For example, when sanitizing input for a call to popen(), you 
need to be aware that any data passed to the program being called is interpreted by 
the command shell, and then interpreted again differently by the program that's 
running. 
Character Stripping Vulnerabilities 
There are additional risks when stripping illegal characters instead of just rejecting 
the request. The reason is that there are more opportunities for developers to make 
mistakes. In addition to missing potentially dangerous characters, they might make 
mistakes in implementing sanitization routines. Sometimes implementations are 
required to filter out multicharacter sequences; for example, consider a CGI script 
that opens a file in a server-side data directory. The developers want to allow users to 
open any file in this directory, and maybe even data in subdirectories below that 
directory. Therefore, both dot (.) and slash (/) are valid characters. They certainly 
don't want to allow user-supplied filenames outside the data directory, such 
as ../../../etc/passwd; so the developers strip out occurrences of the ../ sequence. 
An implementation for this filter is shown in Listing 8-25. 
Listing 8-25. Vulnerability in Filtering a Character Sequence 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
456 
char *clean_path(char *input) 
{ 
   char *src, *dst; 
   for(src = dst = input; *src; ){ 
       if(src[0] == '.' && src[1] == '.' && src[2] == '/'){ 
          src += 3; 
           memmove(dst, src, strlen(src)+1); 
           continue; 
       } else 
           *dst++ = *src++; 
   } 
   *dst = '\0'; 
   return input; 
} 
Unfortunately, this filtering algorithm has a severe flaw. When a ../ is encountered, 
it's removed from the stream by copying over the ../ with the rest of the path. 
However, the src pointer is incremented by three bytes, so it doesn't process the 
three bytes immediately following a ../ sequence! Therefore, all an attacker needs to 
do to bypass it is put one double dot exactly after another, because the second one is 
missed. For example, input such as ../../test.txt is converted to ../test.txt. 
Listing 8-26 shows how to fix the incorrect filter. 
Listing 8-26. Vulnerability in Filtering a Character Sequence #2 
char *clean_path(char *input) 
{ 
    char *src, *dst; 
    for(src = dst = input; *src; ){ 
        if(src[0] == '.' && src[1] == '.' && src[2] == '/'){ 
            memmove(dst, src+3, strlen(src+3)+1); 
            continue; 
        } else 
            *dst++ = *src++; 
    } 
    *dst = '\0'; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
457 
    return input; 
} 
Now the algorithm removes ../ sequences, but do you see that there's still a problem? 
What happens if you supply a file argument such as ....//hi? Table 8-2 steps 
through the algorithm. 
Table 8-2. Desk-Check of clean_path with Input ....//hi 
Iteration 
Input 
Output 
1 
....//hi 
. 
2 
...//hi 
.. 
3 
..//hi 
.. (Nothing is written) 
4 
/hi 
../ 
5 
hi 
../h 
6 
i 
../hi 
This algorithm demonstrates a subtle issue common to many multicharacter filters 
that strip invalid input. By supplying characters around forbidden patterns that 
combine to make the forbidden pattern, you have the filter itself construct the 
malicious input by stripping out the bytes in between. 
Auditing Tip 
When auditing multicharacter filters, attempt to determine whether building illegal 
sequences by constructing embedded illegal patterns is possible, as in Listing 8-26. 
Also, note that these attacks are possible when developers use a single substitution 
pattern with regular expressions, such as this example: 
$path =~ s/\.\.\///g; 
This approach is prevalent in several programming languages (notably Perl and PHP). 
Escaping Metacharacters 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
458 
Escaping dangerous characters differs from other filtering methods because it's 
essentially nondestructive. That is, it doesn't deny or remove metacharacters but 
handles them in a safer form. Escaping methods differ among data formats, but the 
most common method is to prepend an escape metacharacter (usually a backslash) 
to any potentially dangerous metacharacters. This method allows these characters to 
be safely interpreted as a two-character escape sequence, so the application won't 
interpret the metacharacter directly. 
When reviewing these implementations, you need to be mindful of the escape 
character. If this character isn't treated carefully, it could be used to undermine the 
rest of the character filter. For example, the following filter is designed to escape the 
quote characters from a MySQL query using the backslash as an escape 
metacharacter: 
$username =~ s/\"\'\*/\\$1/g; 
$passwd =~ s/\"\'\*/\\$1/g; 
... 
$query = "SELECT * FROM users WHERE user='" . $username 
  . "' AND pass = '" . $passwd . "'"; 
This query replaces dangerous quote characters with an escaped version of the 
character. For example, a username of "bob' OR user <> 'bob" would be replaced with 
"bob\' OR user <> \'bob". Therefore, attackers couldn't break out of the single quotes 
and compromise the application. The regular expression pattern neglects to escape 
the backslash character (\), however, so attackers still have an avenue of attack by 
submitting the following: 
username = bob\' OR username = 
passwd = OR 1= 
This input would create the following query after being filtered: 
SELECT * FROM users WHERE user='bob\\' OR username = ' 
  AND pass = ' OR 1= 
The MySQL server interprets the double-backslash sequence after bob as an escaped 
backslash. This prevents the inserted backslash from escaping the single quote, 
allowing an attacker to alter the query. 
Note 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
459 
Escape characters vary between SQL implementations. Generally, the database 
supports the slash-quote (\') or double-apostrophe ('') escape sequences. However, 
developers might confuse which escape sequence is supported and accidentally use 
the wrong sequence for the target database. 
Metacharacter Evasion 
One of the most interesting security ramifications of escaping metacharacters is that 
the encoded characters can be used to avoid other filtering mechanisms. As a code 