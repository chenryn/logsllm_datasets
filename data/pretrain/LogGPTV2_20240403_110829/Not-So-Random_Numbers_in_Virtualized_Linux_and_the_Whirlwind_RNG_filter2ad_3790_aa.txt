title:Not-So-Random Numbers in Virtualized Linux and the Whirlwind RNG
author:Adam Everspaugh and
Yan Zhai and
Robert Jellinek and
Thomas Ristenpart and
Michael M. Swift
2014 IEEE Symposium on Security and Privacy
Not-So-Random Numbers in Virtualized Linux and the Whirlwind RNG
Adam Everspaugh, Yan Zhai, Robert Jellinek, Thomas Ristenpart, Michael Swift
Department of Computer Sciences
University of Wisconsin-Madison
{ace, yanzhai, jellinek, rist, swift}@cs.wisc.edu
Abstract—Virtualized environments are widely thought to
cause problems for software-based random number generators
(RNGs), due to use of virtual machine (VM) snapshots as
well as fewer and believed-to-be lower quality entropy sources.
Despite this, we are unaware of any published analysis of the
security of critical RNGs when running in VMs. We ﬁll this
gap, using measurements of Linux’s RNG systems (without the
aid of hardware RNGs, the most common use case today) on
Xen, VMware, and Amazon EC2. Despite CPU cycle counters
providing a signiﬁcant source of entropy, various deﬁciencies in
the design of the Linux RNG makes its ﬁrst output vulnerable
during VM boots and, more critically, makes it suffer from
catastrophic reset vulnerabilities. We show cases in which the
RNG will output the exact same sequence of bits each time it
is resumed from the same snapshot. This can compromise, for
example, cryptographic secrets generated after resumption. We
explore legacy-compatible countermeasures, as well as a clean-
slate solution. The latter is a new RNG called Whirlwind that
provides a simpler, more-secure solution for providing system
randomness.
Keywords-random number generator; virtualization
I. INTRODUCTION
Linux and other operating systems provide random num-
ber generators (RNGs) that attempt to harvest entropy from
various sources such as interrupt
timings, keyboard and
mouse events, and ﬁle system activity. From descriptions
of events related to these sources, an RNG attempts to
extract (by way of cryptographic hashing) bit strings that are
indistinguishable from uniform for computationally bounded
attackers. While recent system RNGs can make use of
hardware RNGs such as Intel’s rdrand instruction, security
still relies on software sources either exclusively (e.g., on
older CPUs) or in part (e.g., because of uncertainty about
the efﬁcacy of closed-source hardware RNGs [19]).
There exists signiﬁcant folklore [14,16,27] that system
RNGs such as Linux’s may provide poor security in vir-
tualized settings, which are increasing in importance due
to adoption of cloud computing services such as Amazon’s
EC2. Stamos, Becherer, and Wilcox [28] hypothesized that
the Linux RNG, when run within the Xen virtualization
platform on EC2, outputs predictable values very late in
the boot process. Garﬁnkel and Rosenblum [8] ﬁrst hy-
pothesized vulnerabilities arising from the reuse of random
numbers when using virtual machine snapshots. Ristenpart
and Yilek [26] were the ﬁrst to show evidence of these
and called them reset vulnerabilities. They demonstrated that
user-level cryptographic processes such as Apache TLS can
suffer a catastrophic loss of security when run in a VM that
is resumed multiple times from the same snapshot. Left as an
open question in that work is whether reset vulnerabilities
also affect system RNGs. Finally, common folklore states
that software entropy sources are inherently worse on virtu-
alized platforms due to frequent lack of keyboard and mouse,
interrupt coalescing by VM managers, and more. Despite
all this, to date there have been no published measurement
studies evaluating the security of Linux (or another common
system RNG) in modern virtualized environments.
Our ﬁrst contribution is to ﬁll this gap. We analyze a
recent version of Linux and its two RNGs,
the kernel-
only RNG (used for stack canaries and address-space layout
randomization) as well as the more well-known RNG under-
lying the /dev/urandom and /dev/random devices. Via careful
instrumentation, we capture all inputs to these RNGs in a
variety of virtualized settings, including on local Xen and
VMware platforms as well as on Amazon EC2 instances.
We then perform various analyses to estimate the security
of the RNGs. Our work reveals that:
• Contrary to folklore, we estimate that software entropy
sources, in particular (virtualized or non-virtualized)
cycle counters provide signiﬁcant uncertainty from an
adversary’s perspective during normal operation of the
system (i.e., after it has booted).
• However, when booting a VM the ﬁrst use of the kernel-
only RNG as well as the ﬁrst use of /dev/urandom are
both vulnerable. There exists a boot-time entropy hole,
where insufﬁcient entropy has been collected before
use of the RNGs. Later outputs of the RNG, however,
appear intractable to predict, suggesting the concerns of
Stamos et al. are unwarranted.
• Finally,
the /dev/urandom RNG suffers from catas-
trophic snapshot reset vulnerabilities, which unfortu-
nately answers the open question of [26] in the positive
and obviates a countermeasure suggested for the user-
level vulnerabilities previously discovered [26]. We
show that resets can lead to exposure of secret keys
generated after snapshot resumption.
Our results are qualitatively the same across the different
VM management environments, though note that EC2 does
not currently support snapshots and therefore does not (yet)
© 2014, Adam Everspaugh. Under license to IEEE.
DOI 10.1109/SP.2014.42
559
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:43 UTC from IEEE Xplore.  Restrictions apply. 
RNG
Linux GRI
Linux /dev/(u)random
FreeBSD /dev/random
Windows rand s()
Whirlwind
Reset
Security
No
No
No
No
Yes
No
No
Unknown
Unknown
Yes
Boot
Security
Tracking
Security
No
Yes
Yes
Yes
Unknown
Figure 1.
Security comparison of system RNGs. Reset security refers
to safety upon VM snapshot resumption, boot security means sufﬁcient
entropy is generated prior to ﬁrst use, and tracking security is forward- and
backward-security in the face of compromise, and resistance to checkpoint-
ing attacks. See Section II-C for more details.
suffer from reset vulnerabilities.
We also perform limited experiments with FreeBSD and
Windows, and speciﬁcally demonstrate that reset vulnerabil-
ities affect FreeBSD’s /dev/random and Microsoft Windows
rand s() as well. This suggests that problems with virtual-
ized deployments are not conﬁned to the Linux RNGs.
We move on to offer a new RNG design and implementa-
tion (for Linux), called Whirlwind. It directly addresses the
newly uncovered deﬁciencies, as well as other long-known
problems with the Linux RNG. Here we are motivated by,
and build off of, a long line of prior work: pointing out
the troubling complexity of the /dev/random and /dev/uran-
dom RNG system [6,11,18]; showing theoretical weaknesses
in the entropy accumulation process [6]; designing multi-
pool RNGs without explicit entropy counters [13,21]; and
showcasing the utility of instruction and operation timing to
quickly build entropy [1,23,24].
Whirlwind combines a number of previously suggested
techniques in a new way, along with several new tech-
niques. It serves as a drop-in replacement for both of the
Linux RNGs, and provides better security (see Figure 1).
In addition to security, the design focuses on simplicity,
performance, theoretical soundness, and virtualization safety
(though it will perform well for non-virtualized settings as
well). At its core is a new cryptographic hashing mode,
inspired by but different from the recent construction of
Dodis et al. [6], plus: a simple two-pool system, simpler in-
terface, streamlined mostly-CPU-lock-free entropy addition,
a method for bootstrapping entropy during boot and VM
resumption, direct compatibility with hypervisor-provided
randomness, and support for the rdrand instruction when it
is available. We emphasize that the security of Whirlwind
never relies on any one feature in particular (e.g., using
rdrand by itself), and instead uses multiple inputs sources
to ensure the highest possible uncertainty even in the face
of some entropy sources being compromised.
In terms of performance, Whirlwind matches the current
Linux /dev/urandom, and in some cases performs better.
We also show experimentally that
it suffers from none
of the problems for virtualized settings that render the
current Linux RNG vulnerable. We do caution that more
analysis will be needed before widespread deployment, since
the Linux RNGs must work in diverse environments. For
example, future analysis will include low-end embedded
systems, another problematic setting [11,12,23]. Towards
this, we are in the process of making Whirlwind ready for
public, open-source release.
Finally, we explore hypervisor-based countermeasures for
legacy guest VMs with the old RNG. In particular, we
investigate whether the hypervisor can defend against reset
vulnerabilities by injecting entropy into the guest RNG
via (artiﬁcially generated) interrupts during resumption. We
show that either a user-level guest daemon or the hypervisor
can force Linux /dev/random to refresh itself and reduce
the window of vulnerability from minutes to a few seconds.
While much better than current systems, this is still below
the security offered by Whirlwind. Due to space constraints,
we defer the details of these countermeasures to the full
version of the paper, which will be available from the
authors’ websites.
II. BACKGROUND
A. The Linux RNGs
The Linux kernel provides three RNG interfaces which are
designed to provide cryptographically strong random values:
/dev/random, /dev/urandom, and get random int (GRI).
The /dev/(u)random RNG. The Linux kernel exposes two
pseudo-devices that implement interfaces to what we call
the /dev/(u)random RNG. The ﬁrst, /dev/random, may until
enough entropy is available, while the second, /dev/urandom,
is non-blocking. On the systems we examined, applications
and the Linux operating system itself use exclusively /de-
v/urandom and never read from /dev/random. The RNG
consists of (1) entropy gathering mechanisms that produce
descriptions of system events; (2) several entropy pools to
which these descriptions are mixed with a cryptographically
weak generalized feedback shift register; (3) logic for how
and when entropy ﬂows between pools (described below);
and (4) APIs for consumers to query to obtain randomness.
To retrieve random numbers, an application opens one of the
device ﬁles, performs a read, and (presumed-to-be) random
bytes are returned. Additionally, an application may write to
either device, in which case the /dev/(u)random RNG mixes
the contents of the write buffer into both secondary entropy
pools (also described below) but does not update any entropy
estimates. For example, during boot a ﬁle containing output
from /dev/urandom during the preceding shutdown is written
back into the /dev/(u)random. Read and write requests are
always made in units of bytes. The /dev/urandom RNG also
has a kernel-only interface get random bytes() that does
not use the pseudo-device but is functionally identical to
/dev/urandom.
An entropy pool is a ﬁxed-size buffer of random data
stored in kernel memory along with associated state vari-
ables. These variables include the current mixing location
560
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:43 UTC from IEEE Xplore.  Restrictions apply. 
disk, k/m
IP
ints
IntP
RP
UP
/dev/random
/dev/urandom
P + J + CC
S
HV
+
MD5
HV[0..32]
Figure 2. The Linux RNGs. (Left) Data ﬂow through the /dev/(u)random RNG and (Right) the kernel-only RNG GRI.
for new inputs and an entropy count measured in bits. There
are four pools as shown on Figure 2. In the below, we omit
details regarding the cryptographic extraction function and
the non-cryptographic mixing functions. Detailed descrip-
tions appear in [6,18].
Interrupt pool (IntP): The kernel IRQ handler adds a de-
scription of each interrupt to a 128-bit interrupt pool (called
a “fast pool” in the source code). There is one IntP per
CPU to eliminate contention. Each interrupt delivery takes
a description (cycle counter xor’d with kernel timer, IRQ
number, instruction pointer that was interrupted) and mixes
it into the pool using a cryptographically weak function. The
entire contents of each IntP are mixed into the input pool IP
using another (more complex generalized feedback register)
mixing function every 64 interrupts or if a second has passed
since the last mixing into IP. At the same time, the input
pool entropy count denoted IP.ec is incremented (credited)
by one (bit), which represents a conservative estimate .
Input pool (IP): The 4096-bit input pool has the interrupt
pool mixed into it as just mentioned, and as well has device-
speciﬁc event descriptions (kernel timer value, cycle counter,
device-speciﬁc information) of keyboard, mouse, and disk
events mixed in using the more complex cryptographically
weak function. We will only consider settings with no
keyboard or mouse (e.g., servers), and so only disk events
are relevant. (Network interrupts go to IntP.)
for
8n bits
of
pool
for
a
(UP): A 1024-bit
pool
non-blocking
Non-blocking
the
request
is
used
/dev/urandom interface.
Upon
randomness,
let
αu = min(min(max(n, 8), 128),(cid:2)IP.ec/8(cid:3) − 16).
If
UP.ec < 8n and 8 ≤ αu the RNG transfers data from the
input pool IP to UP. Put another way, a transfer occurs only
if UP.ec < 8n and IP.ec ≥ 192. If a transfer is needed,
the RNG extracts αu bytes from IP and mixing the result
into UP, decrementing IP.ec by 8αu, and incrementing
UP.ec by 8αu. If a transfer is not needed or not possible
(by the restrictions above), then UP is left alone. In the
end, the RNG decrements UP.ec by 8n, extracts 8n bits
from UP, and return those bits to the calling process.
Blocking pool (RP): A 1024-bit pool is used for the block-
ing /dev/random interface. Upon a request for 8n bits of ran-
domness, let αr = min(min(max(n, 8), 128),(cid:2)IP.ec/8(cid:3)).
If RP.ec ≥ 8n then it immediately extracts 8n bits from
RP, decrements RP.ec by 8n, and returns the extracted bits.
Otherwise it checks if αr ≥ 8 and, if so, transfers αr bytes
Transfer
IntP → IP
IP → UP
IP → RP
When
Interrupt arrival
n bytes requested
from /dev/urandom
n bytes requested
from /dev/random
Condition
64 interrupts or 1 second
UP.ec < 8n
IP.ec ≥ 192
RP.ec ≤ 8n
IP.ec ≥ 64
Figure 3. Conditions for transfers between entropy pools.