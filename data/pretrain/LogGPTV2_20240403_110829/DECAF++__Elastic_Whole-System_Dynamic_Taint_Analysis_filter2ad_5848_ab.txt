ory load operation. For store, DECAF stores the taint status
of the destination operand of the current instruction to its
corresponding shadow memory along with the memory store
operation. In both cases, the load (or store) is to (or from) a
global variable named temp_idx.
3.3 Taint Analysis Overhead
We analyzed the current sources of slowdown in DECAF.
There are three sources of slowdown in DECAF:
• The QEMU emulation overhead that is not inherent to
the DECAF taint analysis approach but rather an in-
evitable overhead that enables dynamic whole system
analysis. That said, QEMU is faster than other emulators
like Bochs [20] by several orders of magnitude [2].
• The taint propagation overhead as explained in §3.1.
• The taint status checking as explained in §3.2.
After applying DECAF tainting instrumentation, the ﬁnal
binary code is on average 3 times the original QEMU gener-
ated code according to Table 1. Clearly, the additional inserted
instructions (after the instrumentation) impose an overhead.
Table 1: The statistical summary of the blownup rate after the
instrumentations. The numbers show the ratio of the code size
to a baseline after an instrumentation. QEMU baseline is the
guest binary code, and DECAF baseline is QEMU IR code.
DECAF increases the already inﬂated QEMU generated code
size around 3 times on average.
System Component
QEMU
lifting binary
to tcg
taint checking
& propagation
DECAF
Min Median Mean Max
3.33
28.00
6.75
7.13
1.25
3.12
2.94
5.14
We systematically analyzed the overheads of DECAF
framework, i.e., taint propagation and taint status checking.
To measure each overhead, we isolated the codes from DE-
CAF that would cause the overhead by removing other parts.
For taint propagation overhead measurement, we removed the
shadow memory operations by disabling the memory load
and store patching functionality of DECAF that adds the
shadow memory operations. For taint status checking over-
head measurement, we removed the taint propagation func-
tionality from DECAF by deactivating the instrumentation
that implements the taint propagation rules.
We measured the performance of the isolated versions of
DECAF using nbench benchmark on a windows XP guest
image with a given 1024MB of RAM. The experiment was
performed on an Ubuntu 18 i686 host with a Core i7 3.5GH
CPU and 8GB of RAM. Figure 2 illustrates the result of our
analysis. Figure 2 reports the geometric mean of the nbench
reported indexes normalized using a baseline. The baseline
is the DECAF without the taint analysis functionality out-
right, that is, DECAF with only Virtual Machine Introspec-
tion (VMI). The result shows that on nbench, taint analysis
slows down the system 400%. But more important than that,
Figure 2 shows that taint propagation alone slows down the
system about 1.8 times while taint status checking alone adds
a 2.5 times slowdown.
movi_i32     tmp0,$0x7000 mov_i32      esp,tmp0 movi_i32     tmp4,$0xe070 st_i32           tmp4,env,$0x4c(a) Optimized Qemugenerated tcgcodemovi_i32    tmp23,$0x0movi_i32     tmp0,$0x7000 mov_i32      taint_esp,tmp23 mov_i32      esp,tmp0 movi_i32     tmp24,$0x0 movi_i32     tmp4,$0xe070 st_i32           tmp4,env,$0x4c(b) DECAF instrumentation for tainting34          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX AssociationFigure 2: Breakdown of overhead given the DECAF VMI as
baseline.
4 Elastic Taint Propagation
4.1 Overview
Elastic taint propagation aims to remove the taint propagation
overhead whenever possible. It is based on the intuition that
taint analysis can be skipped if the taint analysis operation
does not change any taint status value. Taint analysis opera-
tions can possibly result in a change only when either of the
source or the destination operand of an instruction is tainted.
Two modes Based on the above intuition, we deﬁne two
modes with and without the taint propagation overhead. We
name the mode with taint propagation operations track mode,
and the mode without taint propagation operations check
mode. At any given time, the execution mode depends on
whether any CPU register is tainted.
Mode transition When the system starts, no tainted data
exists in the system, so the system runs in the check mode.
The execution switches to the track mode when there is an
input from a taint source. The taints propagate in the track
mode until the propagation converges and the shadow regis-
ters are all zero (clear taint status). At this point, the execution
switches back to the check mode. Finally, either based on
an input or a data load from a tainted memory address the
execution switches back to the track mode. Figure 3 shows
when transition occurs between the track and the check mode.
4.2 Execution Modes
An execution mode determines the way a block should be
instrumented. Each mode has its set of translation blocks.
Further, each mode has its own cache tables. The execution in
a mode can ﬂow only within the same mode translation blocks.
This means that blocks only from the same mode would be
Figure 3: State transitions between check mode and track
mode
chained together. We determine the mode using a ﬂag variable.
Based on the mode, the ﬁnal code would be instrumented with
or without the taint propagation instructions. The generated
code will be reused for execution based on the execution mode
unless invalidated. A cache invalidation request invalidates the
generated codes regardless of the mode. The set of translation
blocks and code caches virtually form an exclusive copy of
the translated code for the execution mode.
Check mode The generated code in the check mode is the
original guest code (program under analysis) plus the instru-
mentation code for memory load and memory store. For mem-
ory load, shadow memory is checked, and if any byte is tainted,
the mode is switched to the track. In §5, we further explain
how we efﬁciently perform this checking. For memory store,
the destination operand taint status will be cleaned because
any propagation in this mode is safe.
Track mode Code generated in track mode is the same as
the one generated in the original DECAF. Readers can refer
to §3.1 and §3.2 for further details.
4.3 Transition
A key challenge after having two execution modes in place is
to decide when and how the transition between the two modes
should occur. The transition between the two modes should
affect neither the emulation nor the taint analysis correctness.
The execution should immediately stall in the check mode and
resume in the track mode when there is a data load from a taint
source. Further, this mode switch should happen smoothly
without panicking the CPU.
We need to monitor data ﬂow from the taint sources and
the shadow registers for timely transition between the modes.
In the check mode, we only monitor the taint sources. This
is a key design choice for performance because monitoring
registers for timely transition is very costly. Note that to imple-
ment register monitoring in the check mode, we would need
to check the register taint statuses before every instruction.
Thus, in the check mode, to reduce the overhead, we only
monitor the taint sources without loosing the precision. In
the track mode, we can check the registers less often because
0%50%100%150%200%250%300%350%400%450%Full TaintingTaint CheckingTaint PropagationVMI (baseline)Check ModeTrack ModeRead tainted memoryTaint sourceRegisters are cleanUSENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 35longer execution in this mode neither affects the taint analysis
precision nor the emulation correctness.
Input devices monitoring The taint sources are generally
memory addresses of the input devices like keyboards or
network cards. For the input devices, DECAF++ relies on the
monitoring functionality implemented in DECAF. However,
we slightly modify the code to raise an exception whenever
there is an input. This exception tells the system that it is in
an unsafe state because of the user input and the track mode
should be activated if not before.
Memory monitoring In addition to the input devices, we
should also monitor the memory load operations. This is
because after processing the data from an input device, the
data might propagate to other memory locations and pollute
them. We need to track the propagation in the check mode
as soon as a tainted value is loaded from memory for further
processing. Efﬁcient design and implementation of memory
monitoring is a key to our elastic instrumentation solution.
We elaborate on how we do this efﬁciently in §5.
Registers monitoring Monitoring the registers is a key to
identifying when we can stop the taint propagation. If none of
the registers carry a tainted value, no machine operations ex-
cept the memory load can result in a tainted value. Henceforth,
we can safely stop the execution in the track mode and resume
the execution in the check mode while carefully monitoring
the memory load operations as explained earlier.
We point out that monitoring registers in the track mode
has low overhead. This is because in the track mode, we can
tolerate missing the exact time that the registers are clean
without affecting either the safety or the precision (we would
propagate zero). Therefore, DECAF++ can check the clean-
ness of the registers in the track mode at block (instead of
instruction) granularity.
We check the registers’ taint status either after the execution
of a chain of blocks, or when there is an execution exception
(including the interrupts). Our experiments conﬁrm that this
is a ﬁne granularity given its lower overhead comparing to
an instruction level granularity approach. If all the registers
have a clean taint status, we resume the execution for the next
blocks in the check mode.
Transition from check mode to track mode Unlike the
transition from the track mode to the check mode (always in
the beginning of a block), the transition from the check to
the track can happen anywhere in the block depending on the
position of an I/O read or a load instruction. However, the
execution of a single guest instruction should start from the
beginning to the end, note that a single guest instruction might
be translated to several TCG instructions 1; otherwise, the
result of the analysis would be both invalid and unsafe. This
is because the block code copies in each mode are different
and the current instruction might have dependency on the
former instructions that are not executed in the current mode.
To have a smooth transition, the following steps should be
followed:
(1) Restore CPU state: before we switch the code caches,
we need to restore the CPU state to the last successfully
executed instruction. We need to restore the CPU state
to avoid state inconsistency. Since the corresponding ex-
ecution block in the other mode is different, we can not
resume the execution from the same point; the same point
CPU state is not consistent with the new mode block in-
structions. To restore the CPU state, we re-execute the
instructions from the beginning of the block to the last
successfully executed guest instruction. This will create
a CPU state that can be resumed in the other mode.
(2) Raise exception: after restoring the CPU state, we emulate
a custom exception: mem_tainted. We set the exception
number in the exception_index of the emulated CPU data
structure. After that, we make a long jump to the QEMU
main loop (cpu-exec loop).
(3) Switch mode: in the QEMU main execution loop, we
check the exception_index and change the execution
mode if the exception is mem_tainted. We switch the
mode by changing mode ﬂag value that instructs us how
we should instrument the guest code (track or check).
After switching the modes, QEMU safely resumes the cor-
responding block execution in the new mode because we
restored the CPU state in the step 1.
5 Elastic Taint Status Checking
The main idea behind reducing the taint status checking over-
head is to avoid unnecessary interactions with the shadow
memory. In DECAF, the taint status checking happens for ev-
ery memory operation. However, we can avoid the overhead
per memory address if we perform the check for a larger set of
memory addresses. Thus, if the larger set doesn’t contain any
tainted byte we can safely skip the check per address within
that set. The natural sets within a system are physical memory
pages.
DECAF++ scans physical pages while loading them in
TLB, and decides whether or not to further inspect the indi-
vidual memory addresses. We modiﬁed the TLB ﬁlling logic
of QEMU according to Figure 4. The modiﬁcations are high-
lighted. The ﬁgure illustrates that if the page contains any
tainted byte, DECAF++ sets a shadow memory handler for
1 For instance, a single x86 "ADD m16, imm16" instruction will be
translated to three TCG IR instructions; one load, one add and one store
36          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Associationory address of the destination referenced memory address.
Similar to memory loads, we perform the shadow memory
store operation only when the TLB entry control bits for the
referenced address page indicate so. That said, there is a sub-
tle difference that makes memory stores costlier than memory
loads. Figure 5b shows how we update the shadow memory
alongside the memory store operations. In particular, there
will be three cases:
• If the source operand for the store operation has a zero
taint status, and the page TLB entry does not indicate a
tainted page, we do nothing. This happens both in the
check mode all the time, and in the track mode when the
page to be processed does not contain any tainted byte.
• If the page TLB entry ﬂags us to inspect the shadow
memory, we check the TLB control bits in the TLB miss
handler and update the shadow memory if the shadow
memory handler is set (see Figure 5b).
• If the taint status of the source operand is not zero, even if
the page is not registered with a shadow memory handler,
we still update the shadow memory. This can only hap-
pen in the track mode, because in the check mode there
is no taint propagation, and hence the source operand
taint status is always zero. We update the TLB entry
when this is the ﬁrst time there is a non-zero taint value
store to the page. Since the page now contains at least a
tainted byte, all the next memory operations involving
this page should go through the shadow memory han-
dler. We update the TLB entry and register the shadow
memory handler for the future operations.
Propagation of non-tainted bytes A special case of the
taint status store is when a tainted memory address is over-
written with non-tainted data. This case happens when the
TLB entry for the page ﬂags shadow memory operation even
when the source operand is not tainted. In such a case, the
memory address taint status would be updated to zero but the
page is still processed as unsafe; the memory operations still
will go through the taint handler. For performance reason, we
do not immediately reclaim the data structure containing the
taint value, but rely on a garbage collection (see Appendix B)
mechanism that would be activated based on an interval. The
page remains unsafe until the garbage collector is called. The
garbage collector walks through the shadow memory data
structure and frees the allocated memory for a page if no byte
within the page is tainted. After this point, Fill TLB routine
will not set the taint handler for the page anymore, and any
processing involving the page will take the fast path.
6 Evaluation
In this section, we evaluate DECAF++, a prototype based
on the elastic whole system dynamic taint analysis idea. DE-
CAF++ is a fork of DECAF project including the introduced
Figure 4: Fill TLB routine
the page through some of the TLB entry control bits. After-
wards, whenever this page is accessed, DECAF++ redirects
the requests to the shadow memory handler. In the following
paragraphs, we explain how we handle memory load and store
operations separately because of their subtle differences.
Memory load During memory load operations, we should
load the taint status of the source memory address operands as
well. We load the taint status value from the shadow memory
only when the TLB entry for the page contains the shadow
memory handler. In other cases, we can safely assume that
the taint status is zero. Based on this notion, we modify the
QEMU memory load operation logic as shown in Figure 5a.
In particular, two cases might occur:
• If the TLB entry control bits for the page contain the
shadow memory handler, the address translation process
for the memory load operations results in a TLB miss. In
the TLB miss handler routine, if the control bits indicate
that the shadow memory handler should be invoked we
do so and load the taint status for the referenced address
from the shadow memory. If the execution is not already
in the track mode, and the loaded status is not zero we
quickly switch to the track mode.
• If the address translation process for the load operation
results in a TLB hit, we check whether we are in the
track mode, and if so we load zero as the taint value
status. Otherwise, we don’t need to load the taint status
since it will not be used for taint propagation.
Based on the locality principle, a majority of accesses
should go through the fast path shown in the Figure 5a. Our
elastic taint status checking is designed not to add overhead
to this fast path, and hence a performance boost is expected.
Memory store During memory store operations, we should
store the taint status of the source operand to the shadow mem-
StartLoad the pagePage contains any tainted byte?Set the handler address for the TLB entryEndSet the taint handler address for the TLB entryRegister I/O handler?YesNoYesNoUSENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 37(a) QEMU load memory operation