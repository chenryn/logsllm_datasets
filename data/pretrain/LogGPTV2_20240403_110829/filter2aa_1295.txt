1 ⼆二次“登陆”导致的权限提升
1.1 “登陆”的实现
  登陆功能应该是Web项⽬目⾥里里⻅见到的⽐比较多的业务模块的，通常会跟session会话结合，完成对应的操
作，常⻅见的实现过程如下：
  session本身是⼀一个容器器，⾥里里⾯面可以存放类似⽤用户身份等权限控制所需的元素，在对应的接⼝口完成对
应的鉴权功能。最简单的例例如如果在当前会话session中没有找到对应的登陆凭证，说明⽤用户没有登录
或者登录失效，如果找到了了证明⽤用户已经登录可执⾏行行后⾯面操作，防⽌止接⼝口的未授权访问。或者是权限细
粒度覆盖业务接⼝口，将业务相关的关键参数（例例如userid、ﬁleid等）与当前⽤用户的身份凭证（⼀一般是
session）进⾏行行绑定，防⽌止越权操作。
  正常业务场景下，⽤用户在进⾏行行身份认证后，便便使⽤用当前会话进⾏行行业务操作了了，例例如查询个⼈人信息，
进⾏行行下订单等。此时若尝试使⽤用当前会话，继续访问登陆认证接⼝口进⾏行行⼆二次“登陆”，⼜又可能会发⽣生什什么
事情呢？重复登录⼜又可能对session中的内容造成什什么样的影响呢？
1.2 ⼆二次"登陆"带来的权限提升
  在某次审计过程中，发现了了这样的⼀一个有趣的安全问题，在进⾏行行身份认证后，尝试再使⽤用当前会
话，继续访问登陆认证接⼝口使⽤用错误的账号密码进⾏行行⼆二次“登陆”，然后发现当前会话的⻆角⾊色权限提升
了了，部分管理理员接⼝口可以进⾏行行访问并进⾏行行业务操作了了。以下是相关过程。
  ⾸首先是登陆认证的接⼝口：
@RequestMapping(value={"auth"}，method=RequestMethod.POST)
  ⾸首先检查⽤用户关键输⼊入（⽤用户名密码）是否为null，然后通过service层⽅方法进⾏行行⽤用户密码的有效性
检查，返回对应的user对象。如果返回的对象不不为null那么在session中存⼊入当前user对象，并且设置登
录状态loginStatus为true。否则清空当前session中的user，提示⽤用户名密码错误。简单的流程如下：
  再来看⼀一下相关权限控制的安全防护：
  通过拦截器器对于接⼝口的访问进⾏行行控制，结合登陆成功后的loginStatus内容，防⽌止在⾮非登陆情况下进
⾏行行未授权访问：
@ResponseBody
public JsonResponse LoginInterface(String username,String 
password,HttpServletRequest request,HttpSession session,Model model){
    if(username==null||username.toString().equals("")){
        return JsonResponse.fail("请输⼊入⽤用户名！")；
    }
    if(password==null||password.toString().equals("")){
         return JsonResponse.fail("请输⼊入密码！")；
    }
    //查询⽤用户
    SysUser user = null;
    try{
        user = userservice.find(username,password);
    }catch(Exception e){
        user = null;
    }
    if(user==null||user.isEmpty()){
        session.removeAttribute("user");
        return JsonResponse.fail("⽤用户名密码错误！")；
    }
    session.setAttribute("user",user);
    session.setAttribute("loginStatus",true);
    return JsonResponse.succ("success");
}
  查看下查询⽤用户绑卡信息的接⼝口：
  可以看到这⾥里里跟管理理员admin的查询接⼝口是复⽤用的。如果当前登陆⽤用户不不是admin，则调⽤用service层
的ﬁndByUser⽅方法，返回当前⽤用户绑定的卡号信息。否则返回所有⽤用户的绑卡信息（admin管理理员查
询）。以查看下查询⽤用户绑卡信息业务为例例，相关流程如下：
public class LoginedInterceptor extends HandlerInterceptorAdapter{
    @Override
    public boolean preHandle(HttpServletRequest request,HttpServletResponse 
response,Object handler) throws Exception{
      HttpSession session = request.getSession();
      boolean loginStatus = 
session.getAttribute(SystemBaseConstant.LOGIN_STATUS);
      if(loginStatus==null||"".equals(loginStatus)||!loginStatus){
            //如果登陆态loginStatus不不为true，同样也返回登陆⻚页⾯面
 request.getRequestDispathcer("/login").forward(request,response);
            return false;
      }
    }
    return true;
}
@RequestMapping({"/cardInfo"})
public JsonResponse UserQuery(HttpSession session){
    User user = session.getAttribute("user");
    if(!user.getUserName.equals("admin")&&user!=null){
        CardInfo info = cardservice.findByUser(user);
    }else{
        CardInfo info = cardservice.findAll();
    }
    return JsonResponse.res(info);
}
  这么梳理理下来乍⼀一看还是合理理的，业务接⼝口在⾮非登陆状态下不不可未授权访问，同时获取业务数据时
候与当前会话的⽤用户⻆角⾊色进⾏行行了了绑定，防⽌止通过类似userid=xxx的⽅方式越权查看别⼈人的卡号信息。
  有⼀一个关键点，在查询⽤用户绑卡信息的接⼝口，这⾥里里默认认为当前是可以从当前会话中取得到user，
当user=null的时候，不不满⾜足if条件，此时直接查询返回所有⽤用户的绑卡信息：
  那么追溯到啊user的初始化，是在登陆成功后存储到session容器器中的：
  因为登陆成功后，才会把user存储到session容器器中，同时虽然⾮非登陆状态时user为null，也满⾜足直
接查询返回所有⽤用户的绑卡信息（admin权限）的条件，但是由于此时loginStatus为⾮非登陆状态，在拦
截器器的作⽤用下并不不能满⾜足接⼝口业务的访问。这么⼀一看逻辑好像没啥⼤大问题。
  这⾥里里整个过程都是跟登陆以及会话相关的，上述的所有场景都是建⽴立在⼀一次普通⽤用户登陆的场景下
去讨论的。那么如果⼆二次“登陆”的情况下，会是怎么样⼀一样场景呢。
  ⾸首先假设以tkswifty⽤用户进⾏行行登陆，当前会话cookie为：
  登陆成功后，此时session容器器的存储内容为：
if(!user.getUserName.equals("admin")&&user!=null){
    CardInfo info = cardservice.findByUser(user);
}else{
    CardInfo info = cardservice.findAll();
}
    //查询⽤用户
    SysUser user = null;
    try{
        user = userservice.find(username,password);
    }catch(Exception e){
        user = null;
    }
    if(user==null||user.isEmpty()){
        session.removeAttribute("user");
        return JsonResponse.fail("⽤用户名密码错误！")；
    }
    session.setAttribute("user",user);
    session.setAttribute("loginStatus",true);
JSESSIONID=19997B1355BFFF12CAD862232C273505
  此时访问/cardInfo接⼝口，应该是只能查询到tkswifty本身的卡号绑定信息的。
  此时做如下操作，继续使⽤用刚刚记录的会话cookie：
JSESSIONID=19997B1355BFFF12CAD862232C273505，使⽤用不不存在的⽤用户sec-in以及随意密码进⾏行行
登录：
  很明显此时调⽤用userservice.ﬁnd(username,password)返回的结果应该为null（没有sec-in这个账户
信息），那么根据登陆逻辑，会默认把当前session中的user清除。那么此时session容器器的存储内容
为：
  这⾥里里根据前⾯面的分析，已经满⾜足了了直接查询返回所有⽤用户的绑卡信息（admin权限）的条件，user为
null，并且此时我们的账户状态loginStatus为true，拦截器器认为这是⼀一个登陆的合法请求。那么此时会话
⾥里里的⽤用户就处于⼀一种游离态了了，并且其已经达到了了⼀一个权限提升的效果，再次访问/cardInfo接⼝口，此时
应该会返回所有⽤用户的绑卡信息了了。⼤大致的攻击利利⽤用流程如下：
1.3 修复及思考
  整个过程还是⽐比较“诡异”，在开发过程中并没有对上述的⼆二次“登陆”场景考虑，结合种种条件，导致
了了越权问题。在业务开发过程中还是⽐比较值得注意的：
⾮非空判断的时机
  上述问题很多地⽅方均存在⾮非空判断的逻辑，尤其是在查询接⼝口/cardInfo中：
loginStatus=true
user=封装tkswifty⽤用户信息的Bean
if(user==null||user.isEmpty()){
        session.removeAttribute("user");
        return JsonResponse.fail("⽤用户名密码错误！")；
    }
loginStatus=true
user=null
  这⾥里里⾮非空判断的位置是值得考究的，如果是如下的逻辑，那么就不不会存在上述的缺陷了了：
session容器器存储属性
  session作为⼀一个容器器辅助进⾏行行权限校验是很常⻅见的⼀一种使⽤用⽅方式，但是属性是否冗余，不不同情景下
如何创建销毁同样也值得考量量。
  例例如上述缺陷，loginStatus是否可以由user代替。如果每次登陆校验成功后均会有⼀一个user对象⼀一
⼀一对应，那么拦截其的代码修改如下，便便可以达到防护效果：
  同时也避免了了上述的游离态的⽤用户，解决了了对应的安全缺陷。
  再者loginStatus可能业务需要，例例如涉及到跨平台架构等⽆无法由user代替，那么在多账号同⼀一会话
登陆时，若登陆失败也需及时修改当前会话的登陆认证状态。⽽而不不是仅仅清除⽤用户user即可了了：
if(!user.getUserName.equals("admin")&&user!=null){
    CardInfo info = cardservice.findByUser(user);
}else{
    CardInfo info = cardservice.findAll();
}
if(user!=null){
    //业务处理理
}else{
    //⽆无法绑定对话属性，抛出异常
}
User users = session.getAttribute("user");
if(user==null||user.isEmpty()){
      //如果登陆态loginStatus不不为true，同样也返回登陆⻚页⾯面
      request.getRequestDispathcer("/login").forward(request,response);
      return false;
}
if(user==null||user.isEmpty()){
        session.removeAttribute("user");
        session.removeAttribute("loginStatus");
        return JsonResponse.fail("⽤用户名密码错误！")；
    }
  最后，在进⾏行行身份认证后，尝试再使⽤用当前会话，继续访问登陆认证接⼝口使⽤用错误的账号密码进⾏行行
⼆二次“登陆”，这种业务场景的确很多时候在⿊黑盒⽩白盒测试中经常会遗漏漏，也是个挖掘和审计的思路路，毕
竟越复杂的设计、越多的参数，往往可能暗藏不不少业务逻辑问题。