### Environment
SQLAlchemy: 1.3.5 or 1.3.11  
PostgreSQL: 9.6  
Python: 3.7.4
### Problem
When delete parent model which has a relationship to children via secondary
table, and a relationship to secondary table directly, duplicated delete
queries on same instance have been emitted and report SAWarning.
IMO, Unexpectedly `db.session.deleted` keep deleted instance after delete
record in secondary table automatically.
Following logs are outputted when delete parent record. (Some comments are my
opinion)
    # Delete automatically by secondary relationship
    # https://docs.sqlalchemy.org/en/13/orm/cascades.html#delete
    2019-11-19 14:30:03,653 INFO sqlalchemy.engine.base.Engine DELETE FROM user_assignments WHERE user_assignments.user_id = %(user_id)s AND user_assignments.account_id = %(account_id)s
    2019-11-19 14:30:03,654 INFO sqlalchemy.engine.base.Engine ({'user_id': 8, 'account_id': 6}, {'user_id': 8, 'account_id': 51})
    # Delete automatically by explicitly cascade
    # Unexpectedly db.session.deleted keep deleted instance?
    2019-11-19 14:30:03,655 INFO sqlalchemy.engine.base.Engine DELETE FROM user_assignments WHERE user_assignments.user_id = %(user_id)s AND user_assignments.account_id = %(account_id)s
    2019-11-19 14:30:03,656 INFO sqlalchemy.engine.base.Engine ({'user_id': 8, 'account_id': 6}, {'user_id': 8, 'account_id': 51}, {'user_id': 8, 'account_id': 987})
    # Report SAWarning due to part of user_assignments are already deleted.
    /home/centos/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sqlalchemy/orm/persistence.py:1367: SAWarning: DELETE statement on table 'user_assignments' expected to delete 3 row(s); 1 were matched.  Please set confirm_deleted_rows=False within the mapper configuration to prevent this warning.
### Reproduce
We have two models `Account` and `User`.  
These models have many-to-many relation via `UserAssignment` model which has
data for email confirmation status.
    class Account(db.Model):
      users = db.relationship('User', secondary='user_assignments', back_populates='accounts', lazy='dynamic',
                               secondaryjoin='''and_(User.id == UserAssignment.account_id,
                                                     UserAssignment.confirmed_at.isnot(None))''')
      assignments = db.relationship('UserAssignment', cascade='all, delete-orphan', lazy='dynamic')
    select * from user_assignments where user_id = 8;
     user_id | account_id |         confirmed_at          
    ---------+------------+-------------------------------
           8 |          6 | 2017-05-19 16:21:38.938036+00 
           8 |        987 |                               
           8 |         51 | 2019-09-27 05:38:53.467833+00 
    user = User.query.get(8)
    db.session.delete(user)
    db.session.deleted
    # IdentitySet([, , , ])
    db.session.flush()