得到更多的信息，就需要翻翻代码实现了。
数据库中依旧可以正常处理，命名还是不会冲突。
表里。
InnoDB 自 MySQL 5.5.5版本开始就是作为默认的存储引擎，而 MySQL 8.0版本的一
所以这个问题的初步理解就是为了在数据字典层面作为一种清晰的标识，而如果想
mysql> select count(*)from tmp ;
那么插入的数据到了哪里呢，
1 row in set (0.00 sec)
mysql> show create table tmp ;
查看 tmp 的定义信息，很明显 drop 的 tmp 是临时表。
Query OK，0
mysql> drop table tmp ;
删除成功，但是这个时候我们还需要其他的信息来佐证。
所以我们用排除的方式来验证，我们删掉tmp，然后查看剩下的数据到底在哪里？
这个时候插入一条记录，显示成功，但是我们却没有办法判断到底是插入到了哪个
Query OK, 0 rows affected (0.00 sec)
我们继续换个思路，定义两个表，
Query OK, 0 rows affected (0.09 sec)
则默认情况下也是不会冲突的，尽管tables是在数据字典层面的一个表，但是在其他
row in set (0.o0 sec)
count(*）
ENGINE=InnoDB DEFAULT
Table 丨 Create Table
InnoDB体系结构
name
create
0一
varchar(30)
1CREATE TABLE
rows affected (0.00 sec)
DEFAULT NULL
一查便知，显示为0，则很显然数据是插入到了临时表tmp中。
CHARSET=utf8丨
tmp
（id INT ）;
（1d
一个是大写的 TABLES，一个是小写的 tables。
tmp
INT
sec)
(id int,name varchar(30));
---
## Page 73
对应缓存读取的数据（比如 page cache）。通过缓存可以提高 MySQL 读写数据的效率。
个层里面又会不断地细分，在MySQL里面存储的单位是页，大小是16k。
2.3.1
成的事情了。
小目标：能够理解命令 show engine innodb status 的输出内容和基本含义。
所以我们学习MySQL就更需要好好掌握InnoDB了。
居住，而房客的生活就是在基础的服务之上，显然目前MySQL 的发展更偏重于InnoDB,
房东提供了基础的服务，其中包括房屋协议（类似 MySQL 协议），也可以支持多个房客
我们学习MySQL重点需要了解的存储引擎。
个亮点就是事务性数据字典，完全脱离 MyISAM 存储引擎，所以 InnoDB 宝刀不老，是
缓存层包含 buffer 和 cache,其中 buffer 对应缓存修改过的数据（比如 insert buffer）,cache
InnoDB 的体系结构其实很大很杂，而如果要很快地掌握 InnoDB，推荐大家树立一个
关于MySQL Server和 InnoDB 的关系，可以举个通俗的例子，就好比是房东和房客，
，这个小目标看起来很简单，如果我们梳理清楚了的话，后续学习 InnoDB 就是水到渠
这个图分为三个部分，
double write buffer
ro11back segment
double write buffer
insert buffer
page cache
我们先来看一下 InnoDB 的体系结构图，如图 2-27所示。
insert buffer
date pae
InnoDB 体系结构图
hash index
上面的是缓存层，中间是线程层，下面是系统文件层。在每
data01.ibd
data02.ibd
data03.ibd
1ock info
图2-27
redo 1og buffer
double write buffer
additional poo1
redo01
redo02
第2章理解MySQL体系结构|51
binlog01
binlog02
---
## Page 74
52丨MySQL DBA 工作笔记：数据库管理、架构优化与运维开发
--plugin-dir=/usr/locai/mysql/lib/plugin
/usr/local/mysql/bin/mysqld_safe
的结果不是实时的，如果要想查看上一次的命令结果该怎么办呢，这里有一个小技巧。
上下翻屏去找相应的信息，很显然这些内容我们并没有保留下来，show engine innodb status
们要读取 InnoDB 的状态毫无疑问是用命令的方式来触发，很多时候我们执行了命令，然后
status 命令的输出要丰富的多。
schema，同样可以提供一些InnoDB 不同维度的信息，但是相比而言，show engine innodb
INNODB_BUFFER_POOL_STATS 和 INNODB_BUFFER_PAGE_LRU）和新版本中的 sys
看到这个命令的输出不是实时的结果。
innodb status。
2.3.2
InnoDB状态的分析会有本质的差别。
操作高效组织起来，使得InnoDB 可以提供完整的数据服务。
层的，放在这里是因为和InnoDB 有密切的关系。
目前来看，似乎没有专门工具来解读命令 show engine innodb status 的输出信息，那么我
当然还有其他查看的方式，例如 information_schema中 INNODB_XX 的数据字典（如
学习InnoDB 需要明确：InnoDB 是基于表的存储引擎，明白了这一点，我们后续对
多线程设计是InnoDB 的一大亮点，通过多线程的方式可以把缓存层与系统文件层的
mysql
root
mysal>show engine innodb statusG
Per second averages calculated from the last 34 seconds
对于这个命令，第一段是头部信息，如下：
MySQL 中如果要查看 InnoDB 的状态，强烈推荐的方式就是使用命令 show engine
# ps -eflgrep mysqldlgrep -v grep,
首先查看 mysqld 的进程号。
我们可以通过 mysqld 的进程号在系统层面来找到句柄的信息。
内容包括当前的日期和时间，以及自上次输出以来经过的时长；可以从时间和描述
Status:
Type: InnoDB
系统文件层是相应的数据字典、数据文件和日志文件，其中 binlog 是 MySQL Server
edir=/usr/
Name
查看 InnoDB 状态的小技巧
2382
2122
019:54
pid
19:54
？
-datadir=
00:00:00
--user=mysql
=/data/mysql
/bin/sh
---
## Page 75
2.3.3
status 的输出结果，即文件/tmp/ibuuKHaH 映射到的 4号文件。
/tmp/ibq9KpG4 (deleted)
--socket=/tmp/mysql.sock
--log-error=/data/mysql/mysqld.log
需要注意第7 列，这是唯一
mysqld
mysqld
前面说到了InnoDB是多线程设计的，那么多线程在报告中如何体现呢。
后续可以基于这些内容来做更多的定制和解析。
srv master_thread 1og flush and writes: 12799
srv_master_thread
BACKGROUND THREAD
Per second averages calculated from the last 22 seconds
2018-09-12 23:28:26 0x7f8e7bf74700 INNODB MONITOR OUTPUT
#cat4
如果要查看命令的完整内容，
#114
mysqld
可以看到会根据lsof的方式来输出句柄信息。
那么哪个文件才是我们要找的呢？可以通过lsof来间接印证。
在这么多的文件里，我们看到文件都是序号，会映射到指定目录下面。
在操作系统层面我们来看下句柄的信息，可以看到输出了如下一个列表。
在这里就是找 mysqld 的进程号，即 2382。
rwx-
rwx-
InnoDB的多线程技术
- 1 root root 64 Sep 12 23:29 4 -> /tmp/ibuuKHaH (deleted)
2382
2382 mysql
2382
2382
一
root
root
root root
mysql
mysql
mysql
loops: 6 srv_active,
root
root
root
一个句柄内容非空的，在这个场景里就是 show engine innodb
1lu
，需要查看的就是4号文件。
6
4u
Sep
Sep
REG
REG
REG
REG
12
23:29
 0 srv_shutdown, 12793 srv_idle
--pid-file=/data/mysql/dev01.pid
—>
/tmp/ib1XzG2A(deleted)
/tmp/ibET4ZCa
tmp
253,0
253,0
253,0
253,0
253,0
第2章理解MySQL体系结构|53
(deleted)
3942 1576539
01576541
01576540
01576543
1576542
ted
---
## Page 76
54丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
线程的循环次数，每次循环时会选择一种状态（active、shutdown、idle）执行，其中 Active
master 线程中独立出来，自 MySQL 5.6.2 版开始引入了 Page cleaner thread。
栈线程，后来逐步做了拆分，自 MySQL 5.5版开始引入了 purge thread，将 purge 任务从
Thread.
Page Cleaner Thread
Purge Thread
10 Thread
Master Thread
Master Thread是 InnoDB 的核心线程，早期的很多事情都是由它来做的，算是一个全
这是一个测试环境的输出结果,没有什么负载,其中 sry_master_thread loops 是 Master
srv_master_thread
BACKGROUND THREAD
其中 Master Thread 的信息在命令输出中如下：
可能看到这里还不够清晰，我们可以记住我们的小目标：通过命令来匹配信息。
这些线程的作用和描述如下表 2-3 所示。
InnoDB 的线程主要分为 4类:Master Thread、IO Thread、Purge Thread 和 Page Cleaner
我们需要聊一下 InnoDB 的后台线程，可以使用如下图 2-28 所示的思维导图来解释。
线程
为1，最大为64
高到4，加快标记为废弃undo页的回收速度
执行 buffer pool 里面脏页刷新操作，可以进行调整，默认
事务提交后回收已经使用并分配的 undo页，线程数从1提
负责处理不同类型的I0请求回调
使用了异步IO模型
是核心的后台线程，主要负责异步刷新和数据一致性处理
InnoDB线程
功能描述
Page Cleaner Thread
图2-28
Master Thread
表2-3
Purge Thread
10 Thread
0 srv_shutdown, 91981 srv_idle
Log thread
Insert Buffer thread
Read thread
Writethread
innodb_page_cleaners
innodb_purge _threads.
innodb_write_io_threads
innodb_read_io_threads
相关数据库参数
---
## Page 77
示的示意图。
同数据库里的含义是相似的。
有大量的 buffer和 cache 的术语，在学习的时候非常容易混淆。
2.3.4
Cleaner Thread 需要调整一下了。
个 purge thread 去回收空间，随着时间的推移会使得数据恢复的难度大大增加。
对于空间重用机制和Oracle 等数据库不同，如果执行了truncate和 drop 操作，因为开启了多
各1个，read和 wrtie线程都可以根据参数进行调整。
们可以看到相关的IO 线程和数量：FILE I/O
srv_idle
越繁忙。
过对比 active和 idle 的值，来获得系统整体负载情况，如果 Active 的值越大，证明服务
数量增加与数据变化有关，与查询无关，可以通过 srv_active 和 srv_idle 的差异看出；通
计算机领域中处理磁盘 IO 读写的时候，基于 CPU、Memory 和 Disk 有如图 2-29 所
Buffer 的本意是缓冲，cache 是缓存，计算机术语里面有 buffer cache和 page cache,
在开始这部分内容之前，我们需要理清 buffer 和 cache 的差别，因为在数据库层面会
Page Cleaner thread 默认值为1，如果在 MySQL日志中看到如下的信息，说明我们的
Purge thread默认会开启4个线程，提高了回收效率，但是也会带来一些副作用，MySQL
IO thread 相对简单清晰一些，它们都是异步IO 请求，在日志里面已经很清楚了，我
 srv_master_thread log flush and writes: 15199037
其中 read thread 默认为 4个，write thread 默认为 4个,log thread 和 insert buffer thread
一
I/O thread0 state:waiting forcompletedaio requests(insertbufferthread)
srv_master_thread
BACKGROUND THREAD
一个相对比较繁忙的数据库的输出如下，可以看到Active 的数据远远高于 idle:
Othread
O
O
C
C
O
InnoDB的缓存池管理技术
thread
thread
thread
thread
thread
thread
during the time.)
9state:
state:
state:
state: waiting
state:
waiting for
loops:
waiting
waiting
waiting
wal
waiting
ing
ng
14921578
for
for
for
for
completed aio requests (write thread)
completed aio requests
completed
comp