User: 为了实现日志查询分析需求，编写了一段 SPL 语句，请你从专家角度，逐步思考分析需求，尽量详细的解释语句内容是如何实现需求的。

## 分析需求
Windows_AD数据，编写查询语句实现如下分析场景非工作时间用户登录明细，注意去除系统用户账号，展示前 10 条

## SPL 语句
appname:windows AND (json.event_id:4624 OR json.event_id:4625 ) AND NOT (json.username:*$ OR json.username:SYSTEM)
|eval time=formatdate(timestamp)
|eval hour = tolong(formatdate(timestamp,"HH"))
|eval day = tolong(formatdate(timestamp,"ee"))
|where day >5 || (hour <8 || hour >19)
|stats count() as cnt by json.username | sort by cnt |limit 10

## 具体解释

Assistant: 从所提供的分析需求和SPL语句中，我们可以理解需要实现的目标是在非工作时间从Windows_AD数据中查询非系统用户账号的登录明细，并且仅展示前10条记录。以下是对整个SPL语句的详细分析和解释：

### 第一步：数据过滤

`appname:windows AND (json.event_id:4624 OR json.eventid:4625)`

这部分代码主要做两件事：

1. 筛选`appname`为`windows`的数据，表明只对Windows相关的事件进行操作。
2. 选择`json.event_id`为`4624`或`4625`的事件。这两个事件ID通常与用户登录活动相关。

### 第二步：去除系统用户账号

`AND NOT (json.username:*$ OR json.username:SYSTEM)`

这部分代码是为了排除系统用户账号。具体来说，它排除了`json.username`字段包含“$”符号的任何用户以及直接标记为“SYSTEM”的用户。

### 第三步：提取和转换时间信息

接下来的三行代码是为了提取和转换时间信息：

`|eval time=formatdate(timestamp)`
`|eval hour = tolong(formatdate(timestamp,"HH"))`
`|eval day = tolong(formatdate(timestamp,"ee"))`

这三行代码做了以下工作：

1. `eval time=formatdate(timestamp)`：将时间戳格式化为更易读的日期时间格式。
2. `eval hour = tolong(formatdate(timestamp,"HH"))` 和 `eval day = tolong(formatdate(timestamp,"ee"))`：提取小时和星期几的信息，并将其转换为长整型数字。

### 第四步：过滤非工作时间

`|where day >5 || (hour <8 || hour >19)`

这部分代码用于过滤出非工作时间的数据。具体来说，它排除了周六、周日以及晚上8点之前和早上9点之后的数据。

### 第五步：统计和排序

`|stats count() as cnt by json.username | sort by cnt |limit 10`

这部分代码做了以下操作：

1. `stats count() as cnt by json.username`：按`json.username`字段统计每个用户的登录次数，并将计数结果命名为`cnt`。
2. `sort by cnt`：根据登录次数进行排序。
3. `limit 10`：仅展示前10条记录。

### 总结

整个SPL语句的逻辑是：首先从Windows_AD数据中筛选出特定的事件ID和用户类型，然后提取和转换时间信息，过滤出非工作时间的数据，最后统计每个用户的登录次数，并按登录次数排序，最终展示前10条记录。这样的查询逻辑能够有效地满足非工作时间用户登录明细的分析需求，同时排除了系统用户账号的影响。