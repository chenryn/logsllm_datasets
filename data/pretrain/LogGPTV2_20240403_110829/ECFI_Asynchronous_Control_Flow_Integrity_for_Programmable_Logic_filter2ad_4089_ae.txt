then checks each jump targets against the CFG. Finally, MoCFI
uses exception handlers and loops in its CFG verification, making
it unsuitable for a real-time PLC. In contrast, CFR [38] is a fine-
grained CFI instrumentation technique for ARM-based iOS devices.
CFR injects its monitoring code to the iOS apps during compilation
time by using an LLVM addon. Such approach eliminates the need
for disassembly and construction of a CFG. Similar to MoCFI, CFR
widely uses extensive loops for CFG verification and as a result,
cannot be utilized in a PLC with real-time constraints.
A FreeRTOS fork named as TrackOS suggested a CFI system
to Micro-controllers(MCU) without any MMU/MPU support [39].
However, TrackOS does not actively monitor the application control
flow. Instead, it reads the application control flow data (e.g., register
values, stack values) from the kernel-space and performs checks in
a fixed, periodic manner. This approach makes it possible to bypass
the TrackOS due to deterministic checking periods. Furthermore,
TrackOS does not provide any overhead measurements at all.
Some other CFI solutions focused more generically on embedded
systems with a specific family of CPUs [45, 52] but none tackled the
challenge of developing an enforcement approach for PLCs. CFI-
Mon [52] leverages the pervasively available hardware support for
performance monitoring unit (PMU) in commercial processors, to
detect the control-flow deviation of a running application. CFIMon
was never considered as a CFI for embedded systems, but since
similar hardware functionalities (PMU) exist for most of the em-
bedded processors, we recognize it as a CFI for embedded systems.
However, the CFIMon approach was found unreliable due to its
significant false negatives and false positives rates [53].
Finally, a relevant stream of work suggested verifying control-
flow integrity in an asynchronous way for non-real-time systems.
For example, kBouncer [36] verifies the control-flow of the ap-
plication using Intel LBR (Last Branch Record). The verification
mechanism is invoked whenever there is a call to suspicious APIs
and by checking. The asynchronous verification then read the last
16 entries of the LBR to check whether a control flow violation
occurred. Unlike kBouncer, ECFI works in a real-time environment,
and there is no condition for checking the ring buffer except hav-
ing resources for it. Additionally, CPU cycle monitoring in ECFI
checks whether an attacker tries to exploit the system resources
to manipulate the ring buffer. ShadowReplica [23] is another im-
plementation which uses the concept of asynchronous verification
but in the concept of Data Flow Tracking (DFT) for dynamic taint
analysis and shadow memory-based analysis [31]. ShadowReplica
decouples the DFT from application execution by using spare CPU
cores to accelerate the task. Speck [32] is a system that makes it
feasible to execute expensive security checks from an application
by decoupling the checks from the application runtime. For doing
this, Speck (similar to ShadowReplica) uses the other CPU cores for
executing the security checks. Additionally, Speck holds the output
buffer of the application (e.g., output to screen or the network) and
will not release it until the security checks are finished. Obviously,
Speck mechanism in real-time systems causes priority inversion
and other predictability issues.
8 CONCLUSION
From the practical viewpoint, we believe that the most interesting
attack techniques against PLCs are control-flow hijacking attacks.
Indeed when we consider existing attacks and defenses for PLCs,
we can find control-flow hijacking attacks more relevant since no
defense has been devised for this family of attacks against PLCs.
Therefore, in this paper, we introduced the first PLC-compatible
CFI approach, which is a non-blocking CFI design that respects
real-time requirements of PLC. Our evaluation shows that it is fea-
sible to deploy traditional control-flow protection mechanisms in a
PLC with real-time constraints and limited hardware. We believe
that in any attack against PLCs, control-flow integrity verification
measures will pose a notable hindrance to attackers, significantly
reducing their success rate and add a barrier for attackers to ex-
ecute their post-exploitation techniques such as the Pin Control
Attack [2].
ACKNOWLEDGMENTS
We are immensely grateful to Marina Krotofil, Tim van de Kamp,
Moritz Contag, Christine Utz, Andre Pawlowski, Tim Blazytko,
Teemu Rytilahty, Sergej Schumilo, Cornelius Aschermann, and
Dennis Tatang for their insights on the manuscript. We thank the
anonymous reviewers and our shepherd Vasileios P. Kemerlis for
their valuable feedback. This work was partly supported by the
Franco-German BERCOM Project (FKZ: 13N13741) co-funded by
the German Federal Ministry of Education and Research (BMBF).
The work of the fourth author has been partially supported by the
Netherlands Organization for Scientific Research (NWO), through
SpySpot project (no. 628.001.004).
REFERENCES
[1] Martín Abadi, Mihai Budiu, Ulfar Erlingsson, and Jay Ligatti. 2005. Control-flow
integrity. In ACM Conference on Computer and Communications Security (CCS).
[2] Ali Abbasi and Majid Hashemi. 2016. Ghost in the PLC Designing an Undetectable
Programmable Logic Controller Rootkit via Pin Control Attack. Black Hat Europe
(2016).
[3] Ali Abbasi, Jos Wetzels, Wouter Bokslag, Emmanuele Zambon, and Sandro Etalle.
2014. On Emulation-Based Network Intrusion Detection Systems. In Symposium
on Recent Advances in Intrusion Detection (RAID). https://doi.org/10.1007/978-
3-319-11379-119
[4] Ali Abbasi, Jos Wetzels, Wouter Bokslag, Emmanuele Zambon, and Sandro Etalle.
2017. µShield: configurable code reuse attack mitigation for embedded systems.
In International Conference on Network and System Security. Springer, 694–709.
[5] F. Adelstein, M. Stillerman, and D. Kozen. 2002. Malicious code detection for
open firmware. In Annual Computer Security Applications Conference (ACSAC).
https://doi.org/10.1109/CSAC.2002.1176312
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
Ali Abbasi, Thorsten Holz, Emmanuele Zambon, and Sandro Etalle
[33] Ben Niu and Gang Tan. 2014. Modular Control-flow Integrity. SIGPLAN Not. 49,
6 (June 2014), 577–587. https://doi.org/10.1145/2666356.2594295
[34] Ben Niu and Gang Tan. 2014. RockJIT: Securing Just-In-Time Compilation
Using Modular Control-Flow Integrity. In Proceedings of the 2014 ACM SIGSAC
Conference on Computer and Communications Security. ACM, New York, NY, USA,
1317–1328.
[35] OpenPLC. 2014. The OpenPLC Project. (2014). http://www.openplcproject.com
[36] Vasilis Pappas, Michalis Polychronakis, and Angelos D Keromytis. 2013. Trans-
parent ROP exploit mitigation using indirect branch tracing. In USENIX Security
Symposium.
[37] Daniel Peck and Dale Peterson. 2009. Leveraging ethernet card vulnerabilities in
field devices. In SCADA Security Scientific Symposium (S4).
[38] Jannik Pewny and Thorsten Holz. 2013. Control-flow Restrictor: Compiler-
based CFI for iOS. In Annual Computer Security Applications Conference (ACSAC).
https://doi.org/10.1145/2523649.2523674
[39] Lee Pike, Pat Hickey, Trevor Elliott, Eric Mertens, and Aaron Tomb. 2016. TrackOS:
A Security-Aware Real-Time Operating System. In International Conference on
Runtime Verification. Springer, 302–317.
[40] R Pozo and BR Miller. 2016. SciMark 2. http://math.nist.gov/scimark2/. (2016).
Calculating the maximum execu-
[41] P. Puschner and Ch. Koza. 1989.
Real-Time Systems 1, 2 (1989). https:
tion time of real-time programs.
//doi.org/10.1007/BF00571421
[42] Douglas C Schmidt, Sumedh Mungee, Sergio Flores-Gaitan, and Aniruddha
Gokhale. 2001. Software architectures for reducing priority inversion and non-
determinism in real-time object request brokers. Real-Time Systems 21, 1-2 (2001),
77–125.
[43] Felix Schuster, Thomas Tendyck, Jannik Pewny, Andreas Maaß, Martin Steeg-
manns, Moritz Contag, and Thorsten Holz. 2014. Evaluating the effectiveness
of current anti-ROP defenses. In Research in Attacks, Intrusions and Defenses,
Angelos Stavrou, Herbert Bos, and Georgios Portokalidis (Eds.). Springer, 88–108.
[44] Moses D Schwartz, John Mulder, Jason Trent, and William D Atkins. 2010. Control
system devices: Architectures and supply channels overview. Sandia Report
SAND2010-5183, Sandia National Laboratories, Albuquerque, New Mexico (2010).
[45] David Sehr, Robert Muth, Cliff Biffle, Victor Khimenko, Egor Pasko, Karl Schimpf,
Bennet Yee, and Brad Chen. 2010. Adapting Software Fault Isolation to Contem-
porary CPU Architectures. In USENIX Security Symposium.
[46] Hovav Shacham. 2007. The geometry of innocent flesh on the bone: Return-into-
libc without function calls (on the x86). In ACM Conference on Computer and
Communications Security (CCS).
[47] Mario de Sousa. 2012. MATIEC-IEC 61131-3 compiler, 2014. (2012).
[48] K Stouffer, S Lightman, V Pillitteri, M Abrams, and A Hahn. 2014. NIST special
publication 800-82, revision 2: Guide to industrial control systems (ICS) security.
National Institute of Standards and Technology (2014).
[49] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar
Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing forward-edge control-
flow integrity in GCC & LLVM. In USENIX Security Symposium.
[50] Victor van der Veen, Dennis Andriesse, Enes Göktaş, Ben Gras, Lionel Sambuc,
Asia Slowinska, Herbert Bos, and Cristiano Giuffrida. 2015. Practical context-
sensitive CFI. In ACM Conference on Computer and Communications Security
(CCS).
[51] David E Whitehead, Kevin Owens, Dennis Gammel, and Jess Smith. 2014. Ukraine
Cyber-Induced Power Outage: Analysis and Practical Mitigation Strategies. https:
//selinc.com/api/download/117044/. (2014).
[52] Yubin Xia, Yutao Liu, H. Chen, and B. Zang. 2012. CFIMon: Detecting vi-
olation of control flow integrity using performance counters. In IEEE/IFIP
International Conference on Dependable Systems and Networks (DSN). https:
//doi.org/10.1109/DSN.2012.6263958
[53] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Szekeres, Stephen Mc-
Camant, Dong Song, and Wei Zou. 2013. Practical control flow integrity and
randomization for binary executables. In IEEE Symposium on Security and Privacy.
[54] Mingwei Zhang and R Sekar. 2015. Control flow and code integrity for COTS
binaries: An effective defense against real-world ROP attacks. In Annual Computer
Security Applications Conference (ACSAC).
[6] Zachry Basnight, Jonathan Butts, Juan Lopez Jr., and Thomas Dube. 2013.
Firmware modification attacks on programmable logic controllers.
Interna-
tional Journal of Critical Infrastructure Protection 6, 2 (2013), 76 – 84. https:
//doi.org/10.1016/j.ijcip.2013.04.004
[7] Tyler Bletsch, Xuxian Jiang, and Vince Freeh. 2011. Mitigating Code-reuse Attacks
with Control-flow Locking. In Annual Computer Security Applications Conference
(ACSAC). https://doi.org/10.1145/2076732.2076783
[8] Defense Use Case. 2016. Analysis of the Cyber Attack on the Ukrainian Power
Grid. (2016).
[9] Yueqiang Cheng, Zongwei Zhou, Miao Yu, Xuhua Ding, and Robert H Deng. 2014.
ROPecker: A generic and practical approach for defending against ROP attacks.
In Symposium on Network and Distributed System Security (NDSS).
[10] Hind Chfouka, Hamed Nemati, Roberto Guanciale, Mads Dam, and Patrik Ekdahl.
2015. Trustworthy Prevention of Code Injection in Linux on Embedded Devices.
In European Symposium on Research in Computer Security (ESORICS). https:
//doi.org/10.1007/978-3-319-24174-65
[11] Matjaž Colnarič, Wolfgang A Halang, and Marek Wkegrzyn. 2005. Real-Time
Programming 2004. Gulf Professional Publishing.
[12] Lucas Davi, Alexandra Dmitrienko, Manuel Egele, Thomas Fischer, Thorsten
Holz, Ralf Hund, Stefan Nürnberger, and Ahmad-Reza Sadeghi. 2012. MoCFI: A
Framework to Mitigate Control-Flow Attacks on Smartphones.. In Symposium
on Network and Distributed System Security (NDSS).
[13] Arnaldo Carvalho de Melo. 2009. Performance counters on Linux. In Linux
Plumbers Conference.
[14] DigitalBond. 2012.
3S CoDeSys, Project Basecamp.
(2012).
http:
//www.digitalbond.com/tools/basecamp/3s-codesys/
[15] B. S. Doerr, T. Venturella, R. Jha, C. D. Gill, and D. C. Schmidt. 1999. Adaptive
scheduling for real-time, embedded information systems. In Digital Avionics
Systems Conference. https://doi.org/10.1109/DASC.1999.863703
[16] Loïc Duflot, Yves-Alexis Perez, and Benjamin Morin. 2011. What if you can not
trust your network card?. In Symposium on Recent Advances in Intrusion Detection
(RAID).
[17] Nicolas Falliere, Liam O Murchu, and Eric Chien. 2011. W32. stuxnet dossier.
White paper, Symantec Corp., Security Response 5 (2011).
[18] Aurélien Francillon, Daniele Perito, and Claude Castelluccia. 2009. De-
fending Embedded Systems Against Control Flow Attacks. In First ACM
Workshop on Secure Execution of Untrusted Code (SecuCode ’09). 8. https:
//doi.org/10.1145/1655077.1655083
[19] Bundesamt fÃĳr Sicherheit in der Informationstechnik. 2014. Die Lage der
IT-Sicherheit in Deutschland 2014. http://bit.ly/13cGiGL. (2014).
[20] Xinyang Ge, Nirupama Talele, Mathias Payer, and Trent Jaeger. 2016. Fine-grained
control-flow integrity for kernel software. In Security and Privacy (EuroS&P), 2016
IEEE European Symposium on. 179–194.
[21] Z. S. Huang and I. G. Harris. 2012. Return-oriented vulnerabilities in ARM exe-
cutables. In IEEE International Symposium on Technologies for Homeland Security.
https://doi.org/10.1109/THS.2012.6459817
[22] ICS-CERT. 2016. Rockwell Automation MicroLogix 1100 PLC Overflow Vulnera-
bility. (2016). https://ics-cert.us-cert.gov/advisories/ICSA-16-026-02
[23] Kangkook Jee, Vasileios P Kemerlis, Angelos D Keromytis, and Georgios Por-
tokalidis. 2013. ShadowReplica: efficient parallelization of dynamic data flow
tracking. In ACM Conference on Computer and Communications Security (CCS).
235–246.
[24] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz. 2014.
SoK: Auto-
mated Software Diversity. In IEEE Symposium on Security and Privacy. https:
//doi.org/10.1109/SP.2014.25
[25] Robert M Lee, Michael J Assante, and Tim Conway. 2014. German steel mill
cyber attack. Industrial Control Systems 30 (2014).
[26] Joseph YT Leung. 2004. Handbook of scheduling: algorithms, models, and perfor-
mance analysis. CRC Press.
[27] D. Locke, L. Sha, R. Rajikumar, J. Lehoczky, and G. Burns. 1988. Priority Inversion
and Its Control: An Experimental Investigation. In Second International Workshop
on Real-time Ada Issues (IRTAW ’88). 4. https://doi.org/10.1145/58612.59374
[28] T. C. Maxino and P. J. Koopman. 2009. The Effectiveness of Checksums for Embed-
ded Control Networks. IEEE Transactions on Dependable and Secure Computing
(2009). https://doi.org/10.1109/TDSC.2007.70216
[29] Stephen McLaughlin and Patrick McDaniel. 2012.
SABOT: Specification-
based Payload Generation for Programmable Logic Controllers. In ACM
Conference on Computer and Communications Security (CCS).
https:
//doi.org/10.1145/2382196.2382244
[30] Stephen E McLaughlin. 2011. On Dynamic Malware Payloads Aimed at Pro-
grammable Logic Controllers. In HotSec.
[31] Nicholas Nethercote and Julian Seward. 2007. Valgrind: a framework for heavy-
weight dynamic binary instrumentation. In ACM Sigplan notices, Vol. 42. 89–100.
[32] Edmund B Nightingale, Daniel Peek, Peter M Chen, and Jason Flinn. 2008. Paral-
lelizing security checks on commodity hardware. In ACM Sigplan Notices, Vol. 43.
ACM, 308–318.