    当系统启动时，必须手动将 rcu
    线程移动至对延迟不敏感的内核，这种情况下为 0 内核。
    :::
    ``` screen
    # for i in `pgrep rcu` ; do taskset -pc 0 $i ; done
    ```
-   ::: para
    在内核命令行上使用 *`isolcpus`*
    参数来将特定的内核与用户空间任务隔离开。
    :::
-   ::: para
    可以选择性地为辅助性内核设置内核回写式 bdi-flush 线程的 CPU 关联：
    :::
    ``` screen
    echo 1 > /sys/bus/workqueue/devices/writeback/cpumask
    ```
:::
::: para
验证动态无时钟配置是否正常运行，执行以下命令，其中 *stress* 是在 CPU
中运行 1 秒的程序。
:::
``` screen
# perf stat -C 1 -e irq_vectors:local_timer_entry taskset -c 1 stress -t 1 -c 1
```
::: para
可替代 *stress* 的是一个脚本，该脚本的运行类似
`while :; do d=1; done`{.code}
。以下链接中的程序是另一个合适的替代程序：
。
:::
::: para
默认的内核计时器配置在繁忙 CPU 中显示 1000 次滴答记号：
:::
``` screen
# perf stat -C 1 -e irq_vectors:local_timer_entry taskset -c 1 stress -t 1 -c 1
1000 irq_vectors:local_timer_entry
```
::: para
动态无时钟内核配置下，用户只会看到一次滴答记号：
:::
``` screen
# perf stat -C 1 -e irq_vectors:local_timer_entry taskset -c 1 stress -t 1 -c 1
1 irq_vectors:local_timer_entry
```
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_suggestions-Setting_hardware_performance_policy_x86_energy_perf_policy}3.3.2. 设置硬件性能策略 {.title}
:::
::: para
[**x86_energy_perf_policy**]{.application}
工具允许管理员定义性能与能效的相对重要性。当处理器在性能与能效间权衡选择时，此信息可用来改变支持这一特征的处理器。
:::
::: para
默认情况下适用于所有在 `performance`{.literal}
模式下的处理器，它要求处理器的支持，由 `CPUID.06H.ECX.bit3`{.literal}
显示，且必须在有 root 特权的情况下运行。
:::
::: para
[**x86_energy_perf_policy**]{.application} 由 [kernel-tools]{.package}
数据包提供。如何使用
[**x86_energy_perf_policy**]{.application}，详情请见 ＜[第 A.10 节
"x86_energy_perf_policy"](#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference-x86_energy_perf_policy){.xref}＞
或参见手册页：
:::
``` screen
$ man x86_energy_perf_policy
```
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_suggestions-Setting_process_affinity_with_taskset}3.3.3. 使用 taskset 设置处理器关联 {.title}
:::
::: para
[**taskset**]{.application} 工具由 [util-linux]{.package}
数据包提供。[**Taskset**]{.application}
允许管理员恢复和设置进程中的处理器关联，或通过特定的处理器关联来启动一个进程。
:::
::: {.important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**重要**
:::
::: admonition
::: para
[**taskset**]{.application}
不能保证本地的内存配置。若需要本地内存配置的额外性能收益，红帽推荐使用
[**numactl**]{.application} 来替代 [**taskset**]{.application}。
:::
:::
:::
::: para
关于 [**taskset**]{.application} 的更多信息，请见 ＜[第 A.16 节
"taskset"](#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference-taskset){.xref}＞
或手册页：
:::
``` screen
$ man taskset
```
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_suggestions-Managing_NUMA_affinity_with_numactl}3.3.4. 使用 numaactl 管理 NUMA 关联 {.title}
:::
::: para
管理员可以通过特定的调度或内存安置策略来使用 [**numactl**]{.application}
运行进程。[**Numactl**]{.application}
也可以为共享内存片段或文件设置永久性策略，并设置处理器关联和进程的内存关联。
:::
::: para
在 NUMA
拓扑系统中，处理器访问内存的速度会由于处理器和存储体之间距离的增加而减慢。因此，重要的是要对性能敏感的应用程序进行配置，以便它们能够从最近的且可能的存储体分配内存。最好是使用在同一
NUMA 节点的内存和 CPU。
:::
::: para
对性能敏感的多线程应用程序经配置后在特定的 NUMA
节点上运行会比在特定的处理器上运行好处更多。这是否适合则取决于用户系统及应用程序的需求。如果多个应用程序线程访问同一缓存数据，那么对那些线程进行配置，使其在同一处理器上运行可能是合适的。但是，如果在同一处理器上运行的多线程访问及缓存的是不同数据，那么每个线程可能会收回之前线程访问的缓存数据。这就意味着每个线程会"缺失"缓存，会浪费运行时间来从磁盘中获取数据并在缓存中替代它。用户可以使用
[**perf**]{.application} 工具，收录于 ＜[第 A.7 节
"perf"](#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference-perf){.xref}＞
中，用它来查看大量的缓存缺失。
:::
::: para
[**Numactl**]{.application}
提供大量的选择来协助管理处理器及内存关联。详情请见 ＜[第 A.12 节
"numastat"](#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference-numastat){.xref}＞
或手册页：
:::
``` screen
$ man numactl
```
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
[**numactl**]{.application} 数据包包括 `libnuma`{.systemitem}
库。这个库提供了一个简单的编程接口至内核支持的 NUMA 策略，比起
[**numactl**]{.application}
应用程序，它可以用来进行更细致的调节。更多信息请参见手册页：
:::
``` screen
$ man numa
```
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_suggestions-Automatic_NUMA_affinity_management_with_numad}3.3.5. 使用 numad 进行自动化 NUMA 关联管理 {.title}
:::
::: para
`numad`{.systemitem} 是一种自动化的 NUMA 关联管理后台程序。它对系统中的
NUMA 拓扑及资源用量进行监控，以便动态地改善 NUMA 资源配置及管理。
:::
::: para
[**numad**]{.application}
也同样提供预先安置咨询服务，这一服务可以通过不同的作业管理系统来查询，并为处理器
CPU 的初始绑定及内存资源提供帮助。无论 numad
是以可执行程序或服务在运行，这一预先安置咨询都可用。
:::
::: para
使用 [**numad**]{.application} 的方法，请见 ＜[第 A.14 节
"numad"](#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference-numad){.xref}＞
或参见手册页：
:::
``` screen
$ man numad
```
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_suggestions-Tuning_scheduling_policy}3.3.6. 调节调度策略 {.title}
:::
::: para
Linux
调度器执行大量的调度原则，以此决定线程运行的位置和时长。调度原则主要有两类：普通原则和实时原则。普通线程用于普通优先级任务，实时原则用于具有时效性且必须无中断完成的任务。
:::
::: para
实时线程不受时间间隔的控制，这意味着它们将一直运行直至它们阻拦、退出、主动让步或是被更高优先权的线程预先安置。最低优先权的实时线程会先于其他普通原则的线程进行调度。
:::
::: section
::: titlepage
### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tuning_scheduling_policy-Scheduling_policies}3.3.6.1. 调度原则 {.title}
:::
::: section
::: titlepage
#### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Scheduling_policies-Static_priority_scheduling_with_SCHED_FIFO}3.3.6.1.1. SCHED_FIFO 静态优先级调度 {.title}
:::
::: para
`SCHED_FIFO`{.systemitem}
（也叫做静态优先级调度）是一项实时策略，定义了每个线程的固定优先级。这一策略让管理员能改进事件响应的时间并减少延迟，这一策略建议无法运行较长时间且具有时效性的任务使用。
:::
::: para
在使用 `SCHED_FIFO`{.systemitem} 时，调度器会按优先级顺序扫描所有的
`SCHED_FIFO`{.systemitem}
线程，并对准备运行的最高优先级线程进行调度。一个
`SCHED_FIFO`{.systemitem} 线程的优先级级别可以是 1 至 99
之间的任何整数，99
是最高优先级。红帽建议一开始使用较小的数字，在确定了延迟问题后再增加优先级。
:::
::: {.warning xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**警告**
:::
::: admonition
::: para
由于实时线程不受时间间隔的控制，红帽不推荐设置 99
优先级。这会使同优先级的进程成为迁移线程或监控线程，如果线程进入一个计算机回路且这些线程被阻拦，它们将无法运行。这种情况下，单处理器系统最终会暂停。
:::
:::
:::
::: para
管理员可以限制 `SCHED_FIFO`{.systemitem}
的带宽以防止实时应用程序的程序员启用独占处理器的实时任务。
:::
::: variablelist
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Static_priority_scheduling_with_SCHED_FIFO-procsyskernelsched_rt_period_us}[/proc/sys/kernel/sched_rt_period_us]{.term}
:   ::: para
    该参数以微秒为单位来定义时间，是百分之百的处理器带宽。默认值为
    `1000000`{.literal} μs, 或1秒。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Static_priority_scheduling_with_SCHED_FIFO-procsyskernelsched_rt_runtime_us}[/proc/sys/kernel/sched_rt_runtime_us]{.term}
:   ::: para
    该参数以微秒为单位来定义时间，用来运行实时线程。默认值为
    `950000`{.literal} μs, 或0.95秒。