(2)如果打印机空闲并且有任务正在等待队列中:
1从打印队列中移除下一个打印任务并且将其提交给打印机;
2从当前秒中减去“时间邮戳”值,计算得到该任务的等待时间;
3将该任务的等待时间添加到一个列表中,以用于后续操作;
4基于打印任务的页数,求出需要多长的打印时间。
(3)如果此时打印机在工作中，那对于打印机而言，就工作了一秒钟；对于打印任务而言,它离打
印结束又近了一秒钟(剩余打印时间减1)。
(4)如果此时打印任务已经完成,也即是剩余打印时间为0时，打印机就进入空闲状态。
3、在整个模拟算法完成后，依据生成的等待时间列表中的数据，计算平均打印时间。
3.4.7 PYTHON 实现
当我们设计这个模拟程序时,我们需要为描述前述的三个真实世界的对象：打印机(Printer)、打印
任务(Task)和打印队列(PrintQueue)来自定义一些类。模拟打印机的类Printer(代码2)需要实时监测是
否正在执行打印任务。如果是，则表示打印机正忙(13—17行)，需要的等待时间可以由当前任务的打
印张数求得。同时初始构造函数还要能完成单位时间打印张数的初始化设置。方法tick用于减去内设
任务的完成所需时间，并在一次任务结束后将打印机设为闲置(11行)。
class Printer:
def __init__(self, ppm):
self.pagerate = ppm
self.currentTask = None
self.timeRemaining = 0
def tick(self):
if self.currentTask != None:
self.timeRemaining = self.timeRemaining - 1
if self.timeRemaining >> import random
>>> random.randrange(1,21)
18
>>> random.randrange(1,21)
8
from pythonds.basic.queue import Queue
averageWait=sum(waitingtimes)/len(waitingtimes)
import random
print("Average Wait %6.2f secs %3d tasks remaining."%(averageWait,printQueue.size()))
def simulation(numSeconds, pagesPerMinute):
def newPrintTask():
labprinter = Printer(pagesPerMinute)
num = random.randrange(1,181)
printQueue = Queue()
if num == 180:
waitingtimes = []
return True
else:
for currentSecond in range(numSeconds):
return False
if newPrintTask():
task = Task(currentSecond)
for i in range(10):
printQueue.enqueue(task)
simulation(3600,5)
if (not labprinter.busy()) and (not printQueue.isEmpty()):
nexttask = printQueue.dequeue()
waitingtimes.append(nexttask.waitTime(currentSecond))
labprinter.startNext(nexttask)
labprinter.tick()
代码4
当我们运行模拟器时，每次的结果将会是不同的，这是由于随机数具有概率属性。我们应该关
心的是当我们调整模拟器的参数时，结果会有什么变化趋势。下面是一些结果。
首先我们让模拟器运行一个60分钟(3600秒)每分钟打印五张的情况。而且，我们将要进行五次
独立的试验。因为模拟器通过随机数进行测试，所以每次运行会返回不同的结果。
>>>for i in range(10):
simulation(3600,5)
Average Wait 165.38 secs 2 tasks remaining.
Average Wait 95.07 secs 1 tasks remaining.
Average Wait 65.05 secs 2 tasks remaining.
Average Wait 99.74 secs 1 tasks remaining.
Average Wait 17.27 secs 0 tasks remaining.
Average Wait 239.61 secs 5 tasks remaining.
Average Wait 75.11 secs 1 tasks remaining.
Average Wait 48.33 secs 0 tasks remaining.
Average Wait 39.31 secs 3 tasks remaining.
Average Wait 376.05 secs 1 tasks remaining.
运行10次之后后我们可以看到平均等待时间是122.155秒。我们还可以观察到平均等待的时间
有很大差异的，从最小平均17.27秒到最大平均239.61秒。还可以看到在所有情况中只有两次任务
被全部完成了。
现在，我们将打印速度调整到每分钟10页，然后再运行十次。有了更快的打印速度，我们希望
在一小时的时限中能有更多的任务被完成。
运行模拟器的结果如下：
>>>for i in range(10):
simulation(3600,10)
Average Wait 1.29 secs 0 tasks remaining.
Average Wait 7.00 secs 0 tasks remaining.
Average Wait 28.96 secs 1 tasks remaining.
Average Wait 13.55 secs 0 tasks remaining.
Average Wait 12.67 secs 0 tasks remaining.
Average Wait 6.46 secs 0 tasks remaining.
Average Wait 22.33 secs 0 tasks remaining.
Average Wait 12.39 secs 0 tasks remaining.
Average Wait 7.27 secs 0 tasks remaining.
Average Wait 18.17 secs 0 tasks remaining.
from pythonds.basic.queue import Queue
import random
class Printer:
def __init__(self, ppm):
self.pagerate = ppm
self.currentTask = None
self.timeRemaining = 0
def tick(self):
if self.currentTask != None:
self.timeRemaining = self.timeRemaining - 1
if self.timeRemaining <= 0:
self.currentTask = None
def busy(self):
if self.currentTask != None:
return True
else:
return False
def startNext(self,newtask):
self.currentTask = newtask
self.timeRemaining = newtask.getPages() * 60/self.pagerate
class Task:
def __init__(self,time):
self.timestamp = time
你可以自己运行以下代码中的模拟器。
self.pages = random.randrange(1,21)
def getStamp(self):
return self.timestamp
def getPages(self):
return self.pages
def waitTime(self, currenttime):
return currenttime - self.timestamp
def simulation(numSeconds, pagesPerMinute):
labprinter = Printer(pagesPerMinute)
printQueue = Queue()
waitingtimes = []
for currentSecond in range(numSeconds):
if newPrintTask():
task = Task(currentSecond)
printQueue.enqueue(task)
if (not labprinter.busy()) and (not printQueue.isEmpty()):
nexttask = printQueue.dequeue()
waitingtimes.append( nexttask.waitTime(currentSecond))
labprinter.startNext(nexttask)
labprinter.tick()
averageWait=sum(waitingtimes)/len(waitingtimes)
print("Average Wait %6.2f secs %3d tasks remaining."%(averageWait,printQueue.size()))
def newPrintTask():
num = random.randrange(1,181)
if num == 180:
return True
else:
return False
for i in range(10):
simulation(3600,5)
代码5 打印队列的模拟
3.4.8. 讨论
我们想要回答的问题是，现有的打印机如果被设置成打印品质较高而打印速度较低的模式，是
否可以完成打印任务。我们采用的方法是用一个模拟程序来模拟打印任务，它是页数和任务生成时
间可变的随机事件。
以上结果表明每分钟打印5页时,平均等待时间从最少17秒到最多376秒(约6分钟)不等。当打
印速度加快时,最少平均等待时间缩短到1秒,最多仅28秒。此外，以5页每秒的速度打印时，10次
试验中有8次在1小时结束时仍有任务遗留在队列中（未完成）。
因此,我们可以得出结论:降低打印速度以获得更好的打印品质或许不是一个好方法。学生们不能
因为打印而等待太长时间，尤其是在需要赶去上下一节课时，对他们来说6分钟的等待时间似乎太
长了。
这种模拟分析可以让我们回答许多“如果......会怎样”的问题。我们所要做的只是改变模拟中的各
种参数，便可以模拟出任何规模的有趣的行为。例如:
●如果注册的学生人数增加，平均学生数增加了20人会怎样?
●如果周六时学生不需要去上课会怎样?他们等待得起吗?