`mul!` normally works for arbitary matrixs.  
The product of two triangular matrixs is itself triangular.  
But if i specify the storage destination as being a triangular matrix `mul!`
errors.
    julia> using LinearAlgebra
    julia> X = LowerTriangular(rand(10,10));
    julia> Y = LowerTriangular(rand(10,10));
    julia> Z = LowerTriangular(rand(10,10));
    julia> mul!(Z, X, Y)
    ERROR: MethodError: no method matching lmul!(::LowerTriangular{Float64, Matrix{Float64}}, ::LowerTriangular{Float64, Matrix{Float64}})
    Closest candidates are:
      lmul!(::Tridiagonal, ::LinearAlgebra.AbstractTriangular) at /usr/local/src/julia/julia-master/usr/share/julia/stdlib/v1.6/LinearAlgeb
    ra/src/triangular.jl:683
      lmul!(::Diagonal, ::AbstractVecOrMat{T} where T) at /usr/local/src/julia/julia-master/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/d
    iagonal.jl:210
      lmul!(::UniformScaling, ::AbstractVecOrMat{T} where T) at /usr/local/src/julia/julia-master/usr/share/julia/stdlib/v1.6/LinearAlgebra
    /src/uniformscaling.jl:286
      ...
    Stacktrace:
     [1] mul!(C::LowerTriangular{Float64, Matrix{Float64}}, A::LowerTriangular{Float64, Matrix{Float64}}, B::LowerTriangular{Float64, Matri
    x{Float64}})
       @ LinearAlgebra /usr/local/src/julia/julia-master/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/triangular.jl:700
     [2] top-level scope
       @ REPL[5]:1
If i make it store in a normal matrix it is fine
    julia> mul!(collect(Z), X,  Y)
    10Ã—10 Matrix{Float64}:
     0.476498  0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0
     0.480309  0.159117  0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0
     1.38858   0.480959  0.0549959  0.0       0.0       0.0       0.0       0.0       0.0       0.0
    ...
I guess the reasonable thing to do is to define it to operate on the parent of
the destination then rewrap it?