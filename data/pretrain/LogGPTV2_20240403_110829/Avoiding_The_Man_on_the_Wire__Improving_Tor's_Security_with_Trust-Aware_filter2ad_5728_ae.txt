are not the most secure choice. Similar results are shown for
time to complete the downloads, for Web clients in Figure 5b
and bulk clients in Figure 5c. Also, performance differences are
consistent across the αw settings for both Web and bulk clients,
which we would expect because our path-selection algorithm
is the same in both cases.
Our experiments resulted in decreasing performance as αw
decreases. We expect this to be the case since any deviation
from Tor’s default bandwidth-weighted algorithm will result
in suboptimal load balancing. However, our results indicate
that a clear performance-security trade-off is possible in TAPS
and that the algorithm can be tuned to a desired level of
performance while still removing the least secure relays from
consideration.
A side effect of the decrease in performance is fewer
completed downloads by each client over the course of the
experiment due to our behavior models, as evident in ﬁgure 5d.
Related to download times, there is a signiﬁcant reduction in
the number of downloads for clients (and a long neck for about
20 percent of Web clients). This is likely due to the fact that
11
these clients, because of their location, consistently choose
low capacity guards and exits that cause their downloads to
receive bad performance. (Clients in the long neck of number
of downloads are also in the long tail of download times.) This
is also a result of our behavior models, in which clients do not
start a new download until the previous one ﬁnishes. A richer
behavior model in which some clients start multiple downloads
at a time (e.g., representing users opening multiple tabs or
starting multiple background ﬁle transfers) could alleviate this
artifact.
As shown in Figure 5e, the reduction in the number of
downloads also reduces total aggregate network throughput
(bytes written summed across all relays every second). This
again indicates a reduction in the ability of Tor to properly
balance load when all clients in the network use TAPS. Again,
αw = 1.0 performs the closest to vanilla Tor and does not
result in a signiﬁcant loss in performance, despite removing
the least secure relays during path selection.
Finally, Figure 5f shows the cumulative fraction of band-
width weight from relays that fall outside of the safe thresholds
but that were still considered during path selection. These
relays represent those that were within the acceptable thresh-
olds but not within the safe thresholds. Recall that TrustAll
selects relays in this acceptable zone one at a time, from most
to least secure, until the desired consensus weight fraction
αw is reached. As expected, the more performance that is
demanded (i.e., as αw increases),
the more relays outside
of the safe thresholds must be used to reach the desired
performance. Our results indicate that there are settings of
αw that result in performance nearly as good as Tor’s default
performance-optimized algorithm, while also taking security
into consideration.
D. TrustAll Against Countries
The experimental results discussed above were obtained
using The Man policy. For completeness, we also experi-
mented with the same parameters using the Countries policy.
We conﬁrmed that the same trends are present against the
Countries policy as were discussed above, and the results
increased our conﬁdence in the conclusions drawn about the
performance of TAPS. (The full set of graphs are excluded for
space reasons.)
E. Trading Security for Performance
Figure 6 demonstrates how TAPS directly trades perfor-
mance for security according to the parameter αw. Figure 6a
shows the security-performance tradeoffs of TrustAll against
The Man policy for various values of αw. Shown in the ﬁgure
are two performance metrics: “Client Download Time” rep-
resents the median across all clients of the median download
time for each client; “Relay Throughput” represents the median
application throughput in terms of bytes written per second,
accross all relays over all seconds during the experiments. Both
of these metrics are normalized with respect to vanilla Tor,
meaning that values closer to 1.0 indicates that TAPS achieves
performance more similar to that achieved by vanilla Tor. Also
shown in Figure 6a are the “Probability of Compromise” and
the “Stream Compromise Rate” as metrics of security. The
metrics are again normalized with respect to vanilla Tor, so
that values closer to 0 are less similar to vanilla Tor and
indicate higher security. As is clear in the ﬁgure, as the tradeoff
parameter αw increases, both of the performance metrics
improve while both of the security metrics get worse. This
(a) Time to ﬁrst byte of download per client
(b) Time to last byte of 320KiB download per client (c) Time to last byte of 5MiB download per client
(d) Number of downloads per client
(e) Aggregate relay throughput per second
(f) Unsafe consensus weights considered
Fig. 5: Performance of the TrustAll variation of TAPS against The Man policy, varying required bandwidth fraction αw
is expected: as more relays are used to reach the performance
requirements of αw, it is more likely that insecure relays or
relays that exist on insecure paths will be selected and used in
a circuit.
A similar analysis applies to the Countries policy, the
results for which are shown in Figure 6b. The security metrics
include the median fraction of “Unnecessarily Compromised
Streams”, where the source and destination of a stream do
not exist in the same country and yet the stream was still
compromised, and the median number of countries with which
the client unnecessarily had a compromised circuit. The per-
formance metrics are as above. The same basic trends hold
for the Countries policy: as αw increases and the number of
potentially unsafe relays considered for a path increases, so
does the number of avoidable stream compromises and the
number of countries to which a given client is unnecessarily
compromised. In all cases, however, security improves with
respect to vanilla Tor while performance decreases depending
on the tunable setting of the tradeoff parameter αw.
F. TrustOne Against The Man
In order for TrustAll to be effective, most clients must use
it. If only a minority of clients use trust, then they should use
TrustOne in order to blend in with vanilla-Tor users. They can
also take advantage of their minority status by using higher-
security parameters without affecting Tor’s load balancing
much.
We demonstrate the performance of TrustOne by conﬁgur-
ing 68 of our Web clients and 5 of our bulk clients to run the
e ∈ {0.005, 1.0};
TrustOne algorithm with αw
the other parameter settings are as in the TrustAll experiments.
g = 0.005 and αw
metric
Time to First Byte
Time to Last Byte 320KiB
Time to Last Byte 5MiB
Tor Throughput (MiB/s)
αw = 0.005
0.870, 1.548
3.806, 3.785
39.825, 29.342
98.635, 4.893
αw = 1.0
0.783, 1.694
2.685, 3.255
35.203, 14.395
99.699, 5.387
vanilla
0.690, 1.419
2.172, 2.597
35.777, 20.658
100.660, 4.250
TABLE II: Statistical summary (median, standard deviation) of
performance for TrustOne
All other clients use the vanilla-Tor path-selection algorithm.
Thus the TrustOne clients choose secure guards, and they
either choose exits identically to vanilla-Tor users in order
to blend in (αw
e = 1.0) or don’t attempt to hide their use of
e = 0.005).
TrustOne and instead choose exits very securely (αw
Table II provides a statistical summary of the performance
of the vanilla and trust clients. Note that
the results for
αw ∈ {0.005, 1.0} come from two separate TrustOne experi-
ments, the vanilla-Tor results come from another experiment
with no TrustOne clients, and the reported download times
for αw ∈ {0.005, 1.0} are only for TrustOne clients. Across
all three client performance metrics (time to ﬁrst byte, and
time to last byte of Web and bulk downloads), we see only
a small drop in client performance for both settings tested.
Although our sample size is small, both settings of αw
e resulted
in similar performance for the trusted user set. This indicates
that performance for those clients was due to the capacity
and congestion of their guard nodes (which they chose using
a secure value of αw
g ). Also shown in Table II are results
showing that relay throughput in the TrustOne experiments
was not signiﬁcantly lower than in the vanilla Tor experiment
(relay throughput is over all relays and thus in the TrustOne
12
024681012DownloadTime(s)0.00.20.40.60.81.0CumulativeFractionvanillaαw=1.0αw=0.7αw=0.4αw=0.1051015202530DownloadTime(s)0.00.20.40.60.81.0CumulativeFractionvanillaαw=1.0αw=0.7αw=0.4αw=0.1050100150200250300DownloadTime(s)0.00.20.40.60.81.0CumulativeFractionvanillaαw=1.0αw=0.7αw=0.4αw=0.1020406080100NumberofDownloads0.00.20.40.60.81.0CumulativeFractionvanillaαw=1.0αw=0.7αw=0.4αw=0.1406080100120Throughput(MiB/s)0.00.20.40.60.81.0CumulativeFractionvanillaαw=1.0αw=0.7αw=0.4αw=0.10.00.20.40.60.81.0UnsafeConsensusWeightFraction0.00.20.40.60.81.0CumulativeFractionαw=1.0αw=0.7αw=0.4αw=0.1adversary.
These client properties are combined with various adver-
saries, which may or may not match the client’s beliefs and
policies:
Type 0: The adversary is The Man adversary described above.
Type 1: The probability of compromise is increased, relative to
The Man, by a factor of 1.25 for AS/IXP organizations, lone
ASes, and relay families. This reﬂects the possibility that the
client uniformly underestimates the adversary’s capabilities.
Type 2a: This is the same as The Man except ASes that are
not part of any organization are not compromised.
Type 2b: This is the same as The Man except ASes that are
not part of any organization are compromised with probability
0.05.
Type 3: For each run, half of the AS organizations and half of
the IXP organizations are compromised with probability 0.15,
and the others are compromised with probability 0.05. For
efﬁciency, an AS that is not part of an AS organization is only
assigned a compromised status when it is ﬁrst encountered
on a virtual link during analysis. Upon its initial observation,
such an AS is assigned one of 0.15 and 0.05 as a compromise
probability using a fair coin, and then it is compromised with
that probability.
Type 4: The adversary is the same as The Man except longer
uptime increases the compromise probability for a relay family
(e.g., because of the increased chance of unpatched software).
In particular, the compromise probability for a relay family
with uptime tf is 0.1 − (0.1 − 0.02)/(tf + 1).
Type 5: The adversary compromises each relay with probability
0.1 and each virtual link with probability 0.3439 = 1 − 0.94.
(The latter value is chosen to approximate the probability of
compromising ASes/IXPs independently. On the virtual links
that we consider, the median number of ASes/IXPs is four,
although these are not necessarily from distinct organizations.)
Type 6: The adversary is the same as The Man for ASes/IXPs.
For relays and relay families,
the adversary compromises
nontrivial families with probability 0.1 and individual relays
that are not part of a nontrivial family is 0.05.
Type 7: The adversary is the same as The Man for ASes/IXPs.
For relays and relay families,
the adversary compromises
families with probability pmax − (pmax − pmin)2−(fsize−1),
where pmin and pmax are the minimum (0.02) and maximum
(0.1) probabilities of family compromise for The Man and
fsize is the number of relays in the family.
Table III shows the median time to ﬁrst compromise
(TTFC) in days and the probability that some circuit is com-
promised for the three different client types and nine different
adversary distributions noted above. In each case, we take the
client to be in AS 6128. The data are obtained from 10,000
simulations of client behavior from 12/1/13 to 12/7/13. Values
of “> 7” for the TTFC indicate that the value is at least seven
days, the length of these experiments.
Table IV shows various compromise statistics for a Typical
client who chooses paths based on beliefs that match The
Man against three different adversary distributions. For each
of the 401 client locations, we ran 10,000 simulations and
took the median TTFC, compromise probability, and fraction
of compromised paths for that location. The table shows the
minimum, median, and maximum of these per-location median
values. Values of “> 1” for the TTFC indicate that the value
is at least one day, the length of these experiments.
13
(a) The Man Policy
Fig. 6: Trading performance and security in TrustAll with αw
(b) Countries Policy
experiments includes trafﬁc from both trust-aware and vanilla
clients). This is attributable to a relatively small change in
the load balancing across the network since only the trust
users deviate from the optimized load balancing algorithm.
Our results indicate that little performance is lost from using
the TrustOne algorithm when a relatively small set of users
are doing so.
VIII. TRUST ERRORS
Because the client’s paths depend on her beliefs and may
not be accurate, it is important to investigate the effects of
errors in the client’s beliefs on her security. Here, we do
that experimentally by considering a variety of mismatches
between client trust beliefs and the actual adversary. We look at
three client behaviors against nine different actual adversaries
for a single location (AS 6128) over one week. We also look
at our Typical client in 401 different locations (the client ASes
observed by Juen [23] and in our AS-level map for December
2013) with trust beliefs corresponding to The Man, but where
the actual adversary distribution is one of a selected set of
other behaviors.
The client might also have beliefs about the structure of
the network. Errors in those may have signiﬁcant impacts on
the client’s security if, for example, the client believes that an
untrustworthy AS organization does not contain an AS that it
actually does. We focus our experiments here on errors in trust
beliefs, however.
We consider three different client behaviors: The Typical
and IRC clients with The Man policy are as described above.
We also consider a client with Typical network behavior who
chooses paths based on trust beliefs that match the Countries
0.10.20.30.40.50.60.70.80.91.0TradeoffParameterαw0.00.20.40.60.81.0NormalizedMetricProbabilityofCompromiseStreamCompromiseRate0.00.20.40.60.81.0ClientDownloadTimeRelayThroughput0.10.20.30.40.50.60.70.80.91.0TradeoffParameterαw0.00.20.40.60.81.0NormalizedMetricUnnecess.Comp.StreamsCountrieswithUnnecess.Comp.0.00.20.40.60.81.0ClientDownloadTimeRelayThroughputAdv.→
TTFC
Prob.
Adv.→
TTFC
Prob.
Adv.→
TTFC
Prob.
0
> 7
.4
0
> 7
.41
0
.38
.58
Client: Typical, against The Man
4
2a
> 7 > 7 > 7 > 7
.4
.47
.41
2b
.4
3
Client: IRC, against The Man
4
2b
2a
3
1
> 7
.49
1
.5
4.17 > 7 > 7 > 7 > 7
.48
Client: Typical, against Countries
.41
.41
.41
3
.38
.57
4
.26
.6
1
.01
.66
2a
.38
.56
2b