### Performance and Security Trade-offs in TAPS

#### A. Performance Analysis
The experimental results indicate that certain configurations are not the most secure choices. Similar trends are observed for download completion times, as shown in Figure 5b for web clients and in Figure 5c for bulk clients. The performance differences remain consistent across different settings of \(\alpha_w\) for both web and bulk clients, which is expected given that the path-selection algorithm is the same in both cases.

As \(\alpha_w\) decreases, the overall performance also decreases. This is anticipated because any deviation from Tor's default bandwidth-weighted algorithm will result in suboptimal load balancing. However, our results show that a clear performance-security trade-off is possible with TAPS, allowing the algorithm to be tuned to achieve a desired level of performance while excluding the least secure relays.

A side effect of this decrease in performance is a reduction in the number of completed downloads per client over the course of the experiment, as evident in Figure 5d. This is likely due to the fact that some clients, due to their location, consistently choose low-capacity guards and exits, leading to poor performance. (Clients experiencing long download times are also those with fewer completed downloads.) This behavior is a result of our model, where clients do not start a new download until the previous one finishes. A more sophisticated behavior model, where some clients initiate multiple downloads simultaneously (e.g., representing users opening multiple tabs or starting multiple background file transfers), could mitigate this issue.

Figure 5e shows that the reduction in the number of downloads also leads to a decrease in total aggregate network throughput (measured in bytes written per second across all relays). This indicates a reduction in Tor's ability to balance load effectively when all clients use TAPS. Notably, \(\alpha_w = 1.0\) performs closest to vanilla Tor and does not result in a significant loss in performance, despite removing the least secure relays during path selection.

Finally, Figure 5f illustrates the cumulative fraction of bandwidth weight from relays that fall outside the safe thresholds but were still considered during path selection. These relays are within the acceptable but not the safe thresholds. TrustAll selects relays in this acceptable zone, from most to least secure, until the desired consensus weight fraction \(\alpha_w\) is reached. As expected, higher performance demands (i.e., as \(\alpha_w\) increases) require the use of more relays outside the safe thresholds. Our results show that there are \(\alpha_w\) settings that achieve performance nearly as good as Tor's default performance-optimized algorithm, while also considering security.

#### B. TrustAll Against Different Policies
The experimental results discussed above were obtained using The Man policy. For completeness, we also conducted experiments with the Countries policy. We confirmed that the same trends are present under the Countries policy, reinforcing our confidence in the conclusions about TAPS performance. (The full set of graphs is excluded for space reasons.)

#### C. Trading Security for Performance
Figure 6 demonstrates how TAPS trades performance for security according to the parameter \(\alpha_w\). Figure 6a shows the security-performance trade-offs of TrustAll against The Man policy for various values of \(\alpha_w\). Two performance metrics are presented: "Client Download Time" (median across all clients of the median download time for each client) and "Relay Throughput" (median application throughput in terms of bytes written per second across all relays). Both metrics are normalized with respect to vanilla Tor, with values closer to 1.0 indicating performance similar to vanilla Tor. Also shown are the "Probability of Compromise" and "Stream Compromise Rate" as security metrics, normalized with respect to vanilla Tor, where values closer to 0 indicate higher security. As \(\alpha_w\) increases, both performance metrics improve, while both security metrics worsen, as expected.

A similar analysis applies to the Countries policy, as shown in Figure 6b. The security metrics include the median fraction of "Unnecessarily Compromised Streams" and the median number of countries with which the client unnecessarily had a compromised circuit. The same basic trends hold: as \(\alpha_w\) increases, the number of potentially unsafe relays considered for a path increases, leading to more avoidable stream compromises and more countries to which a given client is unnecessarily compromised. In all cases, security improves relative to vanilla Tor, while performance decreases depending on the tunable setting of \(\alpha_w\).

#### D. TrustOne Against The Man
For TrustAll to be effective, most clients must use it. If only a minority of clients use trust, they should use TrustOne to blend in with vanilla-Tor users. They can also take advantage of their minority status by using higher-security parameters without significantly affecting Tor’s load balancing.

We demonstrate the performance of TrustOne by configuring 68 of our web clients and 5 of our bulk clients to run the TrustOne algorithm with \(\alpha_w \in \{0.005, 1.0\}\); other parameter settings are as in the TrustAll experiments. Table II provides a statistical summary of the performance of the vanilla and trust clients. Across all three client performance metrics (time to first byte, and time to last byte of web and bulk downloads), we see only a small drop in client performance for both settings tested. Although our sample size is small, both settings of \(\alpha_w\) resulted in similar performance for the trusted user set, indicating that performance was influenced by the capacity and congestion of their guard nodes. Relay throughput in the TrustOne experiments was not significantly lower than in the vanilla Tor experiment, suggesting that the load balancing was minimally affected.

#### E. Trust Errors
It is crucial to investigate the effects of errors in the client’s beliefs on her security. We experimentally consider a variety of mismatches between client trust beliefs and the actual adversary. We look at three client behaviors against nine different actual adversaries for a single location (AS 6128) over one week. We also examine our Typical client in 401 different locations (the client ASes observed by Juen [23] and in our AS-level map for December 2013) with trust beliefs corresponding to The Man, but where the actual adversary distribution is one of a selected set of other behaviors.

Table III shows the median time to first compromise (TTFC) in days and the probability that some circuit is compromised for the three different client types and nine different adversary distributions. Table IV presents various compromise statistics for a Typical client who chooses paths based on beliefs that match The Man against three different adversary distributions. The table shows the minimum, median, and maximum of these per-location median values.

In conclusion, our results indicate that TAPS can be tuned to balance performance and security, with specific settings of \(\alpha_w\) achieving near-vanilla Tor performance while enhancing security. TrustOne is effective for a minority of clients, and trust errors can significantly impact security, highlighting the importance of accurate belief models.