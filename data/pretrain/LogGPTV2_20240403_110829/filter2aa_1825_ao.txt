• There is no built-in way to save the output to a file rather than just see it in the debugger. if using
DebugView, it allows saving its output to a file.
The output from DbgPrint(Ex) is limited to 512 bytes. Any remaining bytes are lost.
The DbgPrintEx function (and the associated KdPrintEx macro) were added to provide some filtering
support for DbgPrint output:
Chapter 5: Debugging and Tracing
117
ULONG DbgPrintEx (
_In_ ULONG ComponentId,
_In_ ULONG Level,
_In_z_ _Printf_format_string_ PCSTR Format,
...);
// any number of args
A list of component Ids is present in the  header (common to user and kernel mode), currently
containing 155 valid values (0 to 154). Most values are used by the kernel and Microsoft drivers, except for
a handlful that are meant to be used by third-party drivers:
• DPFLTR_IHVVIDEO_ID (78) - for video drivers.
• DPFLTR_IHVAUDIO_ID (79) - for audio drivers.
• DPFLTR_IHVNETWORK_ID (80) - for network drivers.
• DPFLTR_IHVSTREAMING_ID (81) - for streaming drivers.
• DPFLTR_IHVBUS_ID (82) - for bus drivers.
• DPFLTR_IHVDRIVER_ID (77) - for all other drivers.
• DPFLTR_DEFAULT_ID (101) - used with DbgPrint or if an illegal component number is used.
For most drivers, the DPFLTR_IHVDRIVER_ID component ID should be used.
The Level parameter indicates the severity of the message (error, warning, information, etc.), but can
technically mean anything you want. The interpretation of this value depends on whether the value is
between 0 and 31, or greater than 31:
• 0 to 31 - the level is a single bit formed by the expression 1  defines a few constants that can be used as is for Level:
#define DPFLTR_ERROR_LEVEL
0
#define DPFLTR_WARNING_LEVEL 1
#define DPFLTR_TRACE_LEVEL
2
#define DPFLTR_INFO_LEVEL
3
You can define more (or different) values as needed. The final result of whether the output will make its
way to its destination depends on the component ID, the bit mask formed by the Level argument, and on
a global mask read from the Debug Print Filter Registry key at system startup. Since the Debug Print Filter
key does not exist by default, there is a default value for all component IDs, which is zero. This means that
actual level value is 1 (1  are DbgQueryDebugFilterState and
DbgSetDebugFilterState. These are still undocumented, but at least their declaration is
available. They use the same parameters and return type as their native invokers. This means
you can call these APIs from the driver itself if desired (perhaps based on configuration read
from the Registry).
Chapter 5: Debugging and Tracing
119
Using Dbgkflt
Running Dbgkflt with no arguments shows its usage.
To query the effective level of a given component, add the component name (without the prefix or suffix).
For example:
dbgkflt default
This returns the effective bits for the DPFLTR_DEFAULT_ID component. To change the value to
something else, specify the value you want. It’s always ORed with 0x80000000 so that the bits you
specify are directly used, rather than interpreting numbers lower than 32 as (1 
ULONG Log(LogLevel level, PCSTR format, ...) {
va_list list;
va_start(list, format);
return vDbgPrintEx(DPFLTR_IHVDRIVER_ID,
static_cast(level), format, list);
}
ULONG LogError(PCSTR format, ...) {
va_list list;
va_start(list, format);
return vDbgPrintEx(DPFLTR_IHVDRIVER_ID,
static_cast(LogLevel::Error), format, list);
}
The use of static_cast in the above code is required in C++, as scoped enums don’t
automatically convert to integers. You can use a C-style cast instead, if you prefer. If you’re
using pure C, change the scoped enum to a standard enum (remove the class keyword).
The return value from the various DbgPrint variants is typed as a ULONG, but is in fact a
standard NTSTATUS.
Chapter 5: Debugging and Tracing
121
The implementation uses the classic C variable arguments ellipsis (...) and implements these as you
would in standard C. The implementation calls vDbgPrintEx that accepts a va_list, which is necessary
for this to work correctly.
It’s possible to create something more elaborate using the C++ variadic template feature. This
is left as an exercise to the interested (and enthusiastic) reader.
The above code can be found in the Booster2 project, part of the samples for this chapter. As part of that
project, here are a few examples where these functions are used:
// in DriverEntry
Log(LogLevel::Information, "Booster2: DriverEntry called. Registry Path: %wZ\n"\
,
RegistryPath);
// unload routine
LogInfo("Booster2: unload called\n");
// when an error is encountered creating a device object
LogError("Failed to create device object (0x%08X)\n", status);
// error locating thread ID
LogError("Failed to locate thread %u (0x%X)\n",
data->ThreadId, status);
// success in changing thread priority
LogInfo("Priority for thread %u changed from %d to %d\n",
data->ThreadId, oldPriority, data->Priority);
Other Debugging Functions
The previous section used vDebugPrintEx, defined like so:
ULONG vDbgPrintEx(
_In_ ULONG ComponentId,
_In_ ULONG Level,
_In_z_ PCCH Format,
_In_ va_list arglist);
It’s identical to DbgPrintEx, except its last argument is an already constructed va_list. A wrapper
macro exists as well - vKdPrintEx (compiled in Debug builds only).
Lastly, there is yet another extended function for printing - cDbgPrintExWithPrefix:
Chapter 5: Debugging and Tracing
122
ULONG vDbgPrintExWithPrefix (
_In_z_ PCCH Prefix,
_In_ ULONG ComponentId,
_In_ ULONG Level,
_In_z_ PCCH Format,
_In_ va_list arglist);
It adds a prefix (first parameter) to the output. This is useful to distinguish our driver from other drivers
using the same functions. It also allows easy filtering in tools such as DebugView. For example, this code
snippet shown earlier uses an explicit prefix:
LogInfo("Booster2: unload called\n");
We can define one as a macro, and use it as the first word in any output like so:
#define DRIVER_PREFIX "Booster2: "
LogInfo(DRIVER_PREFIX "unload called\n");
This works, but it could be nicer by adding the prefix in every call automatically, by calling vDbgPrint-
ExWithPrefix instead of vDbgPrintEx in the Log implementations. For example:
ULONG Log(LogLevel level, PCSTR format, ...) {
va_list list;
va_start(list, format);
return vDbgPrintExWithPrefix("Booster2", DPFLTR_IHVDRIVER_ID,
static_cast(level), format, list);
}
Complete the implementation of the Log functions variants.
Trace Logging
Using DbgPrint and its variants is convenient enough, but as discussed earlier has some drawbacks.
Trace logging is a powerful alternative (or complementary) that uses Event Tracing for Windows (ETW)
for logging purposes, that can be captured live or to a log file. ETW has the additional benefits of being
performant (can be used to log thousands of events per second without any noticeable delay), and has
semantic information not available with the simple strings generated by the DbgPrint functions.
Chapter 5: Debugging and Tracing
123
Trace logging can be used in exactly the same way in user mode as well.
ETW is beyond the scope of this book. You can find more information in the official
documentation or in my book “Windows 10 System Programming, Part 2”.
To get started with trace logging, an ETW provider has to be defined. Contrary to “classic” ETW, no
provider registration is necessary, as trace logging ensures the even metadata is part of the logged
information, and as such is self-contained.
A provider must have a unique GUID. You can generate one with the Create GUID tool available with
Visual Studio (Tools menu). Figure 5-11 shows a screenshot of the tool with the second radio button selected,
as it’s the closest to the format we need. Click the Copy button to copy that text to the clipboard.
Figure 5-11: The Create GUID tool
Paste the text to the main source file of the driver and change the pasted macro to TRACELOGGING_-
DEFINE_PROVIDER to look like this:
Chapter 5: Debugging and Tracing
124
// {B2723AD5-1678-446D-A577-8599D3E85ECB}
TRACELOGGING_DEFINE_PROVIDER(g_Provider, "Booster", \
(0xb2723ad5, 0x1678, 0x446d, 0xa5, 0x77, 0x85, 0x99, 0xd3, 0xe8, 0x5e, 0xcb\
));
g_Provider is a global variable created to represent the ETW provider, where “Booster” is set as its
friendly name.
You will need to add the following #includes (these are common with user-mode):
#include 
#include 
In DriverEntry, call TraceLoggingRegister to register the provider:
TraceLoggingRegister(g_Provider);
Similarly, the provider should be deregistered in the unload routine like so:
TraceLoggingUnregister(g_Provider);
The logging is done with the TraceLoggingWrite macro that is provided a variable number of
arguments using another set of macros that provide convenient usage for typed properties. Here is an
example of a logging call in DriverEntry:
TraceLoggingWrite(g_Provider, "DriverEntry started",
// provider, event name
TraceLoggingLevel(TRACE_LEVEL_INFORMATION),
// log level
TraceLoggingValue("Booster Driver", "DriverName"),
// value, name
TraceLoggingUnicodeString(RegistryPath, "RegistryPath"));
// value, name
The above call means the following:
• Use the provider described by g_Provider.
• The event name is “DriverEntry started”.
• The logging level is Information (several levels are defined).
• A property named “DriverName” has the value “Boster Driver”.
• A property named “RegistryPath” has the value of the RegistryPath variable.
Notice the usage of the TraceLoggingValue macro - it’s the most generic and uses the type inferred by
the first argument (the value). Many other type-safe macros exist, such as the TraceLoggingUnicode-
String macro above that ensures its first argument is indeed a UNICODE_STRING.
Here is another example - if symbolic link creation fails:
Chapter 5: Debugging and Tracing
125
TraceLoggingWrite(g_Provider, "Error",
TraceLoggingLevel(TRACE_LEVEL_ERROR),
TraceLoggingValue("Symbolic link creation failed", "Message"),
TraceLoggingNTStatus(status, "Status", "Returned status"));
You can use any “properties” you want. Try to provide the most important details for the event.
Here are a couple of more examples, taken from the Booster project part of the samples for this chapter:
// Create/Close dispatch IRP
TraceLoggingWrite(g_Provider, "Create/Close",
TraceLoggingLevel(TRACE_LEVEL_INFORMATION),
TraceLoggingValue(
IoGetCurrentIrpStackLocation(Irp)->MajorFunction == IRP_MJ_CREATE ?
"Create" : "Close", "Operation"));
// success in changing priority
TraceLoggingWrite(g_Provider, "Boosting",
TraceLoggingLevel(TRACE_LEVEL_INFORMATION),
TraceLoggingUInt32(data->ThreadId, "ThreadId"),
TraceLoggingInt32(oldPriority, "OldPriority"),
TraceLoggingInt32(data->Priority, "NewPriority"));
Viewing ETW Traces
Where do all the above traces go to? Normally, they are just dropped. Someone has to configure listening to
the provider and log the events to a real-time session or a file. The WDK provides a tool called TraceView
that can be used for just that purpose.
You can open a Developer’s Command window and run TraceView.exe directly. If you can’t locate it, it’s
installed by default in a directory such as C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64.
You can copy the executable to the target machine where the driver is supposed to run. When you run
TraceView.exe, an empty window is shown (figure 5-12).
Chapter 5: Debugging and Tracing
126
Figure 5-12: The TraceView.exe tool
Select the File / Create New log Session menu to create a new session. This opens up the dialog shown in
figure 5-13.
Chapter 5: Debugging and Tracing
127
Figure 5-13: New session dialog with a new provider
TraceView provides several methods of locating providers. We can add multiple providers to the same
session to get information from other components in the system. For now, we’ll add our provider by using
the Manually Entered Control GUID option, and type in our GUID (figure 5-14):
Chapter 5: Debugging and Tracing
128
Figure 5-14: Adding a provider GUID manually
Click OK. A dialog will pop up asking the source for decoding information. Use the default Auto option,
as trace logging does not require any outside source. You’ll see the single provider in the Create New Log
Session dialog. Click the Next button. The last step of the wizard allows you to select where the output
should go to: a real-time session (shown with TraceView), a file, or both (figure 5-15).
Chapter 5: Debugging and Tracing
129
Figure 5-15: Output selection for a session
Click Finish. Now you can load/use the driver normally. You should see the output generated in the main
TraceView window (figure 5-16).
Figure 5-16: ETW real-time session in action
You can see the various properties shown in the Message column. When logging to a file, you can open
the file later with TraceView and see what was logged.
There are other ways to use TraceView, and other tools to record and view ETW information. You could
Chapter 5: Debugging and Tracing
130
also write your own tools to parse the ETW log, as the events have semantic information and so can easily
be analyzed.
Summary
In this chapter, we looked at the basics of debugging with WinDbg, as well as tracing activities within the
driver. Debugging is an essential skill to develop, as software of all kinds, including kernel drivers, may
have bugs.
In the next chapter, we’ll delve into some kernel mechanisms we need to get acquainted with, as these
come up frequently while developing and debugging drivers.