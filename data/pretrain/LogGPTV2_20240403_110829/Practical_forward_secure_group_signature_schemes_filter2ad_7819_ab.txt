documents on behalf of the group is called a group member.
A group manager (GM) controls the group membership and
assigns group signing keys to group members which allow
group members to sign documents on behalf of the group.
A traditional group signature scheme consists of ﬁve proce-
dures: SETUP, JOIN, SIGN, VERIFY, and OPEN. We add
another procedure, EVOLVE, for the forward-secure group
signature scheme. Below is a brief description of the six
procedures in a forward-secure group signature scheme.
• SETUP: On input a security parameter (cid:14), this proba-
bilistic procedure outputs the system parameters, the
group public key and the secret key for the group man-
ager.
• JOIN: For a user to join the group, the group manager
and the user execute this protocol interactively. The
user receives a group signing key and becomes a new
group member.
3
• EVOLVE: Given input of a group signing key for time
period i, this procedure outputs the corresponding group
signing key for time period i + 1.
• SIGN: Given input of a group public key, a member’s
group signing key, a message m and a time period i,
this probabilistic procedure outputs a signature (cid:2)i, s(cid:3)
on message m.
• VERIFY: Given input of a group public key, a group
signature (cid:2)i, s(cid:3) and a message m, this procedure veri-
ﬁes whether s is a valid group signature on m signed
with a group signing key of time period i.
If s is a
valid group signature signed with a group signing key
of time period i, we say (cid:2)i, s(cid:3) is a signature valid for
time period i.
• OPEN: Given input of a message, a valid group sig-
nature on the message, a group public key and the
group manager’s secret key, this procedure determines
the identity of the signer.
A traditional group signature scheme should satisfy the
following properties:
• Correctness: Signatures produced by a group member
using SIGN must be accepted by VERIFY.
• Unforgeability: Only group members are able to sign
messages on behalf of the group.
• Anonymity: Given a valid signature of a message, it
is computationally hard for everybody but the group
manager to identify the actual signer.
• Unlinkability:
It is computationally hard for every-
body but the group manager to decide whether two
diﬀerent valid signatures were computed by the same
group member.
• Exculpability: Neither a coalition of group members
nor the group manager can generate signatures that
will be opened by the OPEN procedure as generated
from another group member. This means a group
member cannot be blamed to have generated a sig-
nature that he actually did not generate.
• Traceability: A trusted entity can always open a valid
signature using the OPEN procedure and identify the
actual signer. This trusted entity can either be the
group manager or some other entity, usually called
the revocation manager. For simplicity we assume this
trusted entity is the group manager in this case.
If
a separate entity is desired, the scheme can be easily
adapted to support a separate revocation manager.
We deﬁne two degrees of forward security:
• Weak Forward security: Assume a set of group sign-
ing keys Φ = {ki,ti}1≤i≤L where ki,ti represents the
group signing key of member i for time period ti, and
t = min(t1, . . . , tL). We call Ω(Φ) is the weak-span
of Φ where Ω(Φ) represents the set of group signing
keys {ki,wi}1≤i≤L,t≤wi≤T . We say the group signature
scheme satisﬁes the weak forward security if an at-
tacker given a set of group signing keys Φ cannot gen-
erate a valid group signing key not in Ω(Φ).
227• Strong Forward security: Given a set of group signing
keys Φ = {ki,ti}1≤i≤L where ki,ti represents the group
signing key of member i for time period ti, we call
Ψ(Φ) is the span of Φ where Ψ(Φ) represents the set
of group signing keys {ki,wi}1≤i≤L,ti≤wi≤T . Then the
group signature scheme satisﬁes the strong forward se-
curity if an attacker given a set of group signing keys Φ
cannot generate a valid group signing key not in Ψ(Φ).
In this paper, we also discuss the following desired security
properties:
• Time-limited membership: The group manager can
limit a member’s group membership by issuing him
group signing keys which can only generate group sig-
natures valid for some periods of time.
• Retroactive public revokability and backward unlinka-
bility: At a time period i, the group manager can ex-
clude a group signing key starting from time period
j such that any signatures generated using this group
signing key after time period j become invalid to any
veriﬁer. Moreover, all signatures generated using this
group signing key before time period j should still re-
main anonymous and unlinkable to everybody but the
group manager.
Finally the scheme should be eﬃcient. In particular, the
signature size and key lengths should be independent of the
number of group members and the number of time peri-
ods during the lifetime of the public key. Furthermore, in
the scheme to support public revokability, the signature size
should be independent of the number of revoked members.
3. PRELIMINARIES
Our schemes rely on the strong RSA assumption [5, 22]
and the decisional Diﬃe-Hellman assumption [20, 7]. Let
n = pq be an RSA-like modulus and let G be a cyclic sub-
group of Z∗
n. The strong RSA assumption is that given n and
z ∈ G, it is computationally hard to ﬁnd v ∈ G and e ∈ Z>1
such that z ≡ ve( mod n). Let G = (cid:2)g(cid:3) be a cyclic group
generated by g. The decisional Diﬃe-Hellman assumption
is that given g, gx, gy, and gz, it is computationally hard to
decide whether gxy and gz are equal.
We use several existing zero-knowledge proof protocols as
building blocks in our scheme. These zero-knowledge proto-
cols can be performed non-interactively using an ideal hash
function (a.k.a. the Fiat-Shamir heuristics [21]) and we refer
to the resulting constructs as signatures of knowledge [13].
Due to space limitation, we do not review the details of these
protocols here. We give the references to these protocols and
introduce the notations we use in the paper here. To sim-
plify the representation, we use PK to represent that the
protocol is a signature of knowledge protocol, Greek letters
to denote the secret knowledge that is being proved, and all
other parameters are known to the prover and the veriﬁer.
• Signature of knowledge of the discrete logarithm:
Let G = (cid:2)g(cid:3) denote a group of prime order q and y ∈ G.
We use PK{(α) : y = gα}(m) to denote the signature
of knowledge of logg y in group G. This protocol was
designed by [29, 15] and shown to be zero-knowledge
in the auxiliary string model [19].
(cid:4)
(cid:4)
+ 1, q = 2q
in case y is a quadratic residue.
• Signature of knowledge of the discrete logarithm in
(cid:4)
QRn:
(cid:4)
+ 1, and p, q, p
Let n = pq, where p = 2p
and q
are all primes. Let g be the generator of QRn,
and y ∈ QRn. We use PK{(α) : y = gα}(m) to denote
the signature of knowledge of logg y in group QRn [22].
In general, it is not easy to for the prover to prove
that y is a quadratic residue. So we use the protocol
PK{(α) : y2 = (g2)α} instead since logg2 y2 = logg y
• Signature of knowledge of a representation:
v }(m) denote a
Let PK{(α1, . . . , αv) : y = gα1
signature of knowledge of a representation of an ele-
ment y ∈ G with respect to bases g1, . . . , gv ∈ G [15].
• Signature of knowledge of equality of discrete loga-
rithm:
Let PK{(α) : y1 = gα ∧ y2 = hα}(m) denote a signa-
ture of knowledge of equality of discrete logarithms of
two group elements y1, y2 ∈ G to the bases g ∈ G and
h ∈ G [14, 17].
··· gαv
1
• Signature of knowledge of ranges:
Let PK{(α) : y = gα ∧ α ∈ [a, b]}(m) denote a sig-
nature of knowledge of a discrete logarithm of y ∈ G
with respect to g ∈ G such that logg y lies in the inte-
ger interval [a, b]. This protocol can be eﬃciently done
under the strong RSA assumption and if the prover is
not provided the factorization of the modulus [8].
4. FORWARD SECURE GROUP
SIGNATURE I
4.1 The Scheme
(cid:4)
+1 and q = 2q
SETUP Procedure. The group manager (GM) chooses
(cid:4)
(cid:4)
two ((cid:14)n/2)-bit primes p = 2p
+1 where p
and
(cid:4)
are also primes. Set n := pq. GM also randomly chooses
q
elements a, d, g, g1 ∈R QRn, a secret element x ∈R Z
∗
p(cid:1)q(cid:1) ,
and set y := gx mod n. It stores (p, q, x) as its secret key
and publishes (n, a, d, g, g1, y) as the group public key.
It
also divides the time during which the group public key is
valid into T time period and makes the time intervals public.
In the rest of the paper, we also use the following notation.
Let Γ and Λ denote integer intervals: Γ = (−2(cid:20)Γ , 2(cid:20)Γ ), Λ =
(2(cid:20)Λ , 2(cid:20)Λ+1), where (cid:14)Λ > T + (cid:14)Γ + 2.
Intuition. The intuition of the scheme is as the following.
When a user U joins the group, he and GM randomly se-
lect xu ∈R Γ together such that U knows xu and GM only
knows yu := axu . The group manager then randomly selects
a prime eu ∈ Λ, computes cu,0 := (yud)1/(eu2T ) mod n, and
sends U (cu,0, eu). Thus (xu, cu,0, eu) is U ’s group signing
key. Under the strong RSA assumption, nobody can gen-
erate valid group signing keys except the group manager.
The group members then evolve group signing keys using
In particular, U ’s
squaring as a public one-way function.
group signing key for time period i is (xu, cu,i, eu) where
cu,i = c2
u,i−1 mod n. To sign a message m for time pe-
riod i, U produces non-interactive proofs of knowledge that
)eu = daxu , xu ∈ Γ,
he knows (xu, cu,i, eu) such that (c2T −i
and eu ∈ Λ, where the challenge in the non-interactive proof
ui
4
228is dependent on m as in the standard Fiat-Shamir heuris-
tics [21]. To enable the OPEN procedure, the signer also
encrypts cu,i with the public key of the group manager and
produces the non-interactive proof that the encryption is of
the correct form. In case of a dispute, the group manager
can simply decrypt the value of cu,i to identify the actual
signer.
JOIN Procedure
1. When a user U joins the group, he ﬁrst generates a
secret ru ∈R Γ, r1 ∈R {0, 1}2(cid:20)n , and sends GM s1 :=
gru gr1
1 . U proves to GM that s1 is formed correctly:
1 }.
PK{(α, β) : s1 = gαgβ
2. GM then randomly select rm ∈R Γ and send U rm.
U then computes xu = (ru + rm mod (2(cid:20)Γ+1 − 1)) −
2(cid:20)Γ + 1, yu = axu . U then sends GM yu.
(cid:14) and selects r2 ∈R {0, 1}2(cid:20)n ,
U computes s2 = (cid:13) ru+rm
2(cid:7)Γ+1−1
sets s3 := gs2 gr2
1 , and sends s3 to GM. Then U proves
to GM that yu is formed correctly:
PK{(α, β, γ, δ, , θ) : s1 = gαgβ
s1grm−2(cid:7)Γ +1s
1 ∧ s3 = gγgδ
1 ∧
= gg1θ ∧ yu = a}.
−(2(cid:7)Γ+1−1)
3
3. GM then randomly selects a prime eu ∈ Λ, computes
cu,0 := (yud)1/(eu2T ) mod n, and sends U (cu,0, eu).
U veriﬁes that axu d ≡ ceu2T
u,0 mod n. (cu,0, eu, xu) is
U ’s group signing key.
EVOLVE Procedure. Assume U has group signing key
(cu,j, eu, xu) at time period j. Then at time period j + 1, his
group signing key becomes (cu,j+1, eu, xu), where cu,j+1 :=
c2
u,j mod n.
SIGN and VERIFY Procedures. Assume U has group
signing key (cu,j, eu, xu) at time period j. To sign a mes-
sage m in time period j, he ﬁrst chooses r1 ∈R {0, 1}2(cid:20)n ,
computes A = cu,jyr1 , B = gr1 , and generates
PK{(α, β, δ, ) : d2 = (A2T −j+1
B2 = (g2) ∧ 1 = (B2T −j+1
)α(1/(g2))δ ∧ β ∈ Γ∧ α ∈ Λ}(m).
A veriﬁer simply checks the validity of the above signature
)α(1/(a2))β(1/(y2))δ ∧
of knowledge.
OPEN Procedure. In the event that the actual signer
must be subsequently identiﬁed (e.g., in case of a dispute),
GM ﬁrst checks the validity of the signature via the VER-
IFY procedure, and then recover cu,0 (and thus the identity
of U ) as cu,0 = (A/Bx)1/2j
mod n. GM also proves that