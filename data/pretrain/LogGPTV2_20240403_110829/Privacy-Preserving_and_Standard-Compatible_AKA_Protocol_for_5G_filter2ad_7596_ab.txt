this attack, they propose three countermeasures to enhance
the SQN concealment mechanism while preserving the com-
patibility with SN, which include encrypting SQNUE with
symmetric and asymmetric encryption schemes, as well as
using a freshly generated random number to conceal SQNUE.
However, these ﬁxes cannot prevent the encrypted SUPI re-
play attack given by Fouque et al. [35] and Koutsos [43].
To eliminate all linkability attacks, Koutsos [43] proposes
an AKA+ protocol for 5G communication, which is resistant
to all known privacy threats by re-arranging the message ﬂow
of 5G-AKA. However, AKA+ changes the protocol ﬂow and
terms of messages of 5G-AKA signiﬁcantly. For UE, SQNUE
is encrypted together with SUPI, and SQNHN is no longer
parsed and checked. The UE’s operation of AKA+ cannot
be implemented with the standardized commands provided
by SIM cards, which implies that all subscribers’ SIM cards
must be replaced. The terms of messages in AKA+ cannot be
USENIX Association
30th USENIX Security Symposium    3597
Resistant to linkability attacks
em
Compatibility
Failure Message
Linkability [22, 24]
Sequence Number Encrypted SUPI
Replay [35, 43]
Inference [26]
SIM card
Serving Network
Pseudonym-based proposals [41, 42, 55]
Encrypt the failure reason [22]
Enhance the SQN concealment mechanism [26]
AKA+ [43]
DH-based proposals [23, 45]
5G-AKA(cid:48)(This work)






























Table 2: The proposals for improving the privacy of 5G-AKA
UE
HN
SUCI
The initiation phase.
The challenge-response phase.
(RAND,AUTN)
1. Check the validity of RAND
MAC_Failure
2. Check the freshness of RAND
(Sync_Failure, AUTS)
3. Calculate RES and Kseaf
(RES)
Figure 2: An overview of 5G-AKA
handled by the currently deployed SNs. The migration from
5G-AKA to AKA+ requires that all users must change their
SIM cards and all SNs are needed to modify their implemen-
tations accordingly. In the proposals for 5G-AKA by Arkko
et al. [23] and Liu et al. [45], a Difﬁe-Hellman (DH) key
exchange procedure is introduced on the basis of 4G-AKA
for the purpose of privacy-preserving. However, they require
extra round trips for key exchange, which does not only sig-
niﬁcantly increase latency, but is also incompatible with the
SIM cards and SNs’ implementations.
3 Background
In this section, we ﬁrst present an important component of
5G-AKA, ECIES, in a component based manner. Then, we
give out a detailed description on 5G-AKA following with
the known linkability attacks. We refer the readers to Table. 1
for frequently used abbreviations and notations.
3.1 ECIES
ECIES is an asymmetric encryption algorithm that can han-
dle message of arbitrary length. In particular, it is a “hybrid”
encryption scheme which consists of a Key Encapsulation
Mechanism (KEM) and a Data Encapsulation Mechanism
(DEM) [52]. This design idea also refers to the well-known
KEM/DEM paradigm, which uses KEM to establish shared
keys between the sender and recipient with asymmetric crypto,
and uses DEM to encrypt and decrypt the actual payload with
that shared key using symmetric crypto. This paradigm has
been extensively used in practice and standards [2, 38, 48].
The ECIES-KEM consists of the following algorithms:
• KeyGen(pp): It takes a public parameter pp as input, and
outputs a private-public key pair (sk,PK) such that PK =
sk·G, where pp is commonly a standardized parameter such
as secp256r1 [4], and G ∈ pp is a base point.
• Encap(PK): It takes a public key PK as input, generates an
ephemeral private-public key pair (r,R) such that R = r· G,
and outputs a ciphertext C0 = R and a key ks = KDF(r·PK),
where KDF is a key derivation function.
• Decap(sk,C0): It takes a ciphertext C0 and a private key sk
as input, and outputs ks = KDF(sk·C0) as the shared key.
The ECIES-DEM consists of the following algorithms:
• SEnc(ks,M): It takes a key ks and a message M as in-
put, parses ks as k1(cid:107)k2, computes C1 = ENC(k1,M) and
C2 = MAC(k2,C1), and outputs (C1,C2), where ENC is the
encryption operation of a symmetric encryption scheme.
• SDec(ks,C1,C2): It takes a ciphertext (C1,C2) and a key ks
as input, parses ks as k1(cid:107)k2, outputs ⊥ if C2 (cid:54)= MAC(k2,C1),
and outputs M = DEC(k1,C1) otherwise, where DEC is the
decryption operation of a symmetric encryption scheme.
In TS 33.501 [20], ECIES refers to the mechanism speciﬁed
by SEC1 [3]. The ECIES encryption algorithm takes PK and
M as inputs, sequentially runs Encaps(PK) and SEnc(ks,M),
and outputs a ciphertext C = (C0,C1,C2); the ECIES de-
cryption algorithm takes sk and C as inputs, sequentially
runs Decaps(sk,C0) and SDec(ks,C1,C2), and outputs M or
⊥. We denote the ECIES-KEM scheme by K EMECIES =
{KeyGenECIES,EncapECIES, DecapECIES}, and denote the
DEM scheme by DEM ECIES = {SEncECIES ,SDecECIES},
and refer to the corresponding speciﬁcations [3,20] for details.
3598    30th USENIX Security Symposium
USENIX Association
UE
(k,PKHN,SUPI,SQNUE)
SN
(IDSN)
HN
(k,skHN,IDHN,SQNHN)
Session Initialization
(C0,kUE) ← EncapECIES(PKHN )
SUCI ← {C0,SEncECIES(kUE,SUPI)}
(SUCI,IDHN)
(SUCI,IDHN,IDSN)
Parse SUCI as {C0,C}
kHN ←DecapECIES(skHN ,C0)
SUPI ← SDecECIES(kHN ,C)
Figure 3: The Initiation Phase of 5G-AKA, where ECIES is expressed by ECIES-KEM and ECIES-DEM.
3.2 The 5G-AKA Protocol
Next, we present the 5G-AKA protocol [20] in detail, which
consists of an initiation phase and a challenge-response phase.
Our description does not distinguish the components that
reside within an HN as some related works that also focus on
the privacy of 5G-AKA [26, 40, 42]. Nonetheless, it includes
a detailed description on the AUTHENTICATE SIM command
as speciﬁed by TS 31.102 [12], which is helpful in ﬁnding the
root cause of known linkability attacks of 5G-AKA, and also
provides explicit boundaries of the compatibility with legacy
SIM cards. We begin with an overview, and then present the
details of each phase.
Overview. We present an overview of the 5G-AKA protocol
by Figure 2. In the initiation phase, the UE encrypts SUPI
with the HN’s public key using ECIES, and sends the cipertext
(i.e., SUCI) to the HN through the radio channel via a base
station. In the challenge-response phase, the HN chooses
a random challenge (i.e., RAND), and calculates AUTN. In
particular, AUTN contains MAC and concealed SQNHN. The
UE uses MAC to verify the authenticity and integrity of RAND
(for simplicity, we also say the UE utilizes MAC to verify the
validity of RAND), and uses SQNHN to check the freshness
of RAND. Upon receiving the (RAND,AUTN), the UE ﬁrst
checks the message’s validity, and returns a MAC_Failure
message if this check fails. Then, it checks the message’s
freshness via comparing SQNHN with SQNUE, and returns a
(Sync_Failure, AUTS) message if this check fails, where UE
uses AUTS to re-synchronize with the HN. When all checks
pass, the UE generates a response RES for RAND, calculates
the key material for subsequent procedures (i.e., Kseaf ), and
sends RES to the HN.
When a UE is unable to communicate to its HN directly
(e.g., in roaming scenarios where the HN’s base station is
not available), it may attach to a Serving Network (SN) who
provides local mobile communication services. In such sce-
narios, the messages shown in Figure 2 are transmitted with
the help from SN, where the UE communicates with the SN
(i.e., the SN’s base station) over the radio channel, and the
SN communicates with the HN via a wired channel provided
by the 5G Core network (5GC).
We next give the details for each phase, where we use IDSN
(resp., IDHN) as the unique identiﬁer of SN (resp., HN), and
denote the SHA-256 cryptographic hash function by HSHA256.
The Initiation Phase. This phase is shown by Figure 3. After
the session between UE and SN has been initialized, the UE
encrypts its SUPI with PKHN using ECIES, where we denote
the shared key by kUE. Then, it sends SUCI to the SN. Upon
receiving the message from UE, the SN sends SUCI, IDHN
and IDSN to the HN. The HN decrypts SUCI with its private
key and retrieves the corresponding k and SQNHN from its
database, where we denoted the shared key by kHN.
According to TS 33.501 [20], the encryption of SUPI can ei-
ther be performed with the SIM cards of next generation [12],
or outside the SIM cards. In this paper, we follow the option
that the encryption is carried out by the UE outside the SIM
card, which satisﬁes the speciﬁcation of TS 33.501 [20], and
is more friendly to legacy 3G and 4G compatible SIM cards
which only support the AUTHENTICATE command as speciﬁed
by TS 31.102, Release-14 [13].
The Challenge-Response Phase. In this phase, the UE and
HN mutually authenticate each other via a challenge-response
procedure, and establish anchor keys (i.e., Kseaf ) together with
the SN, as shown in Figure 4. This phase contains a series of
cryptographic functions f1, f2, f3, f4, f5, f∗
5 as speciﬁed
by TS 33.501 [20]. Furthermore, we also denote the derivation
processes of anchor keys by a KeyDerivation function for the
sake of simplicity. It takes k, RAND, IDSN and SQNUE (or
SQNHN) as inputs and includes the calculations of f3 and f4.
At the beginning of this phase, the HN generates an Au-
1 and f∗
thentication Vector AV = (RAND,AUTN,HXRES,Kseaf ):
• Choose a 128-bit nonce RAND as challenge.
USENIX Association
30th USENIX Security Symposium    3599
UE
(k,PKHN,SUPI,SQNUE)
SN
(IDSN,SUCI)
HN
(k,skHN,IDHN,SUPI,SQNHN)
RAND $← {0, 1}128
MAC ← f1(k,SQNHN ,RAND),AK ← f5(k,RAND)
AUTN ← {AK ⊕ SQNHN ,MAC}
XRES ← f2(k,RAND),HXRES ← HSHA256(RAND,XRES)
Kseaf ← KeyDerivation(k,RAND,IDSN ,SQNHN )
SQNHN ← SQNHN + 1
(RAND,AUTN)
(RAND,AUTN,HXRES,Kseaf )
Take (RAND,AUTN) as the input for AUTHENTICATE
Case i : AUTHENTICATE returns ⊥
MAC_Failure
Case ii : AUTHENTICATE returns AUTS
(Sync_Failure, AUTS)
(Sync_Failure,
AUTS,RAND,SUCI)
Parse AUTS as {SQNUE ⊕ f∗
Check MAC∗ = f∗
1 (k,SQNUE,RAND)
5 (k,RAND),MAC∗}
If the check holds, SQNHN ← SQNUE + 1
Case iii : AUTHENTICATE returns (RES,Kseaf )
(RES)
HRES ← HSHA256(RAND,RES),Check HRES = HXRES
(SUCI,RES)
Check RES = XRES
If this check holds, return SUPI
Key Conﬁrmaion
(SUPI)
Figure 4: The Challenge-Response Phase of 5G-AKA, where the implicit key authentication is expressed by a Key Conﬁrmation
round-trip.
3600    30th USENIX Security Symposium
USENIX Association
AUTHENTICATE(RAND,AUTN):
AK ← f5(k,RAND)
Parse AUTN as {AK ⊕ SQNHN,MAC}
Check f1(k,RAND,SQNHN) = MAC
If this check does not pass, return ⊥
Check SQNUE < SQNHN <† SQNUE + ∆
If this check does not pass:
MAC∗ ← f∗
Return AUTS ← {f∗
1 (k,RAND,SQNUE)
5 (k,RAND)⊕ SQNUE,MAC∗}
SQNUE ← SQNHN
Kseaf ← KeyDerivation(k,RAND,SQNUE,IDSN)
RES ← f2(k,RAND)
Return (Kseaf ,RES)
Figure 5: The AUTHENTICATE SIM command, where the con-
dition marked by † is optional following the non-normative
Annex C of TS 33.102 [19]. k and SQNUE are secrets stored
by the SIM card.
• Calculate AUTN, which includes the concealed SQNHN and
MAC. Particularly, SQNHN is concealed with an anonymous
key AK derived from RAND and k, and MAC is computed
with k, RAND and SQNHN
• Calculate HXRES by hashing RAND and XRES, where
XRES is the expected response computed with k and RAND.
• Derive Kseaf with k, RAND, IDSN and SQNHN .