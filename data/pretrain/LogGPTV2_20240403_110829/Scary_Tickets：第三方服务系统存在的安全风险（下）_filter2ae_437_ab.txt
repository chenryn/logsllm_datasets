在此次利用过程中，“目标企业（company）”表示该目标存在Help
Scout攻击漏洞。当我向`[PI:EMAIL](mailto:PI:EMAIL)`发送邮件时，就可以获得自动回复，发现目标企业使用的是Help
Scout。了解这一点后，我提取了哈希token，开始利用研究。
 创建自己的Slack实例
利用过程的第一阶段就是创建我们自己的Slack实例。在创建Slack实例时，workspace名我设置的是目标企业的哈希token。完成该操作后，我使用Slack的邀请功能，邀请`support@`邮件到
**我的** Slack实例，现在我的Slack实例已经加入邀请该邮箱的实例清单中。
 查找实例
Slack有个非常优秀的功能（`https://slack.com/signin/find`），可以获取我们所属的、被邀请的、提供邮箱即可注册的所有Slack实例。一旦我们提交邮件，Slack会通过一封邮件告诉我们所有相关信息。在第一阶段，我们的实例已被当成受邀请的Slack组。当Slack发送我们可以访问的实例列表邮件时，会按照名称和URI列出待加入的实例，其中就包含超链接信息。由于我们的Slack实例位于清单中，因此也会被添加到该邮件列表中。注意到我们的实例名中包含ticket的哈希token，这意味着Slack发送给`[PI:EMAIL](mailto:PI:EMAIL)`的完整邮件现在已经被加入我的服务单（support
ticket）中。
 获取邮件
现在我们已经收到到Slack列表，我们还需要获取详细内容。目前这些信息已作为public
comment嵌入ticket中，但与Zendesk不同的是，Help Scout并不会自动将内容发送到我的邮箱（攻击者邮箱）。此外，前面我在Help
Scout概览中也提到过，Slack的邮件现在会被当成“原始”发送方，因为与该ticket对应的最近一封邮件来自于Slack的邮箱。因此为了确保为了能接收该ticket后续的邮件、看到之前的邮件内容，我需要确保我使用的攻击邮箱是“原始的”发送方。为了满足该条件，我回复目标系统发送的第一封邮件，随便写了些内容，然后继续等待。
 利用漏洞
为了理解如何利用这个了流程，我们来看一下Slack邮件的一些概念。邮件清单可能如下所示：
在上图中有一个特殊的超链接：“Join”。这个超链接可以获取带有token的一个简单超链接，可以让我们直接注册。使用“Join”链接后，我们可以直接访问私有Slack，无需太多复杂的处理。
Slack在这类邮件中还包含一个“Launch”超链接。这是一次性魔术链接，可以让我们直接登录用户账户。只有当`support@`邮箱是Slack实例的注册用户时，才会出现这个超链接。与此同时，这个魔术链接还有一些限制条件：“Launch”链接只在24小时内有效。因此，如果目标agent没有在24小时内回复ticket，那么我们就无法利用这个魔术链接。某些公司允许任何用户使用`[@company](https://github.com/company
"@company")`邮箱来注册，因此我可以使用`support+[PI:EMAIL](mailto:PI:EMAIL)`邮箱，在面对某些Slack实例时绕过这种问题。
大家可以参考[该视频](https://youtu.be/W_l799WYlzA)了解利用Help Scout的完整操作过程。
## 二、经验总结
###  误解及合作
在研究支持系统时，我们经常可以看到大多数公司会使用这些系统，但却不是特别了解其中某些功能，也不知道攻击者会如何利用这些功能。在本文中我们使用的所有功能（Zendesk以及Help
Scout中的ticket哈希）正是这些公司容易忽视的一些环节。在某些情况下，目标企业会询问我们是否利用了Zendesk中的0-day漏洞，因为我们竟然可以获取该系统上的许多敏感材料。在这种情况下，我们必须向这些企业解释这并非Zendesk的问题，并且需要给出官方资料来源，解释该系统为何采用这种工作方式。同样，由于有些人非常困惑且有所担忧，因此某些公司也联系了Zendesk，询问背后具体工作流程。为了确保所有人都能及时收到消息，我们还向Zendesk反馈了具体解释（通过HackerOne的支持团队），以便Zendesk了解我们的攻击方法。
从这个过程中，我发现我们需要耐心与目标公司配合，一起修复这个漏洞，这对我来说是非常特殊的一次体验，因为通常情况下我发现的是RCE、SSRF、IDOR等漏洞，并且我已经好久没有专门对第三方系统做过深入全面研究（上一次我研究的是Sendgrid以及Google的GSuite），感谢合作过程中保持耐心态度的这些企业。由于这对我们而言是一种新的攻击方式，我们也找到了利用该漏洞的多种方法，并且与目标企业保持联系，不断更新关于利用该漏洞访问关键内部资源的最新信息。在大多数情况下，所有公司都非常赞赏我们的工作，对我们给出的研究成果表示满意。有家公司还在报告发布后1小时内推出了补丁，并且专门召开安全团队参与的会议，进一步讨论这方面内容。我们还与另一家公司的工程师电话联系，讨论潜在的修复方式，以及这些方式存在的优缺点。
###  情况统计
我们测试了25家企业，发现20家存在该漏洞。在所有测试案例中，我们成功获得了某些内部资源访问权限，包括如下应用（已获得目标公司授权）：
  * Slack
  * Asana
  * 内部域
  * Zoom
  * 通过Atlassian.net访问的JIRA & Confluence
  * 利用已注册的`[@company](https://github.com/company "@company").com`账户实现权限提升。
  * Zendesk内部支持页面，该页面只对内部员工开放，其中JIRA ticket包含某些API问题。
  * Dropbox
## 三、Zendesk修复措施
在目标企业通过邮件向Zendesk发送我们发现的漏洞报告后，Zendesk决定阻止`no-reply@`邮箱，直接将这些邮箱发送到垃圾邮件中，增加了这种技术的利用难度。但这并不意味着所有公司已得到安全保护，还有一些第三方服务会使用除`no-reply@`之外的邮箱来发送确认邮件，因此这些邮件还是会被添加到收件箱中。大家可以根据该线索寻找能够攻击的新系统。
## 四、Scout修复措施
Scout并没有专门为该问题发布大型补丁，因为这需要修改整个平台结构。目前我们建议大家添加一个邮件过滤器，阻止`no-reply@`邮件以及其他自动回复邮件（如验证邮件、忘记密码邮件等）。此外，运维人员也需要确保目标系统不回复可能有害（或者有趣）的邮箱，这也是可以采取的一种安全措施。
## 五、漏洞报告
大家可以访问[此处](https://hackerone.com/reports/498964)阅读我们提交的一份漏洞报告。