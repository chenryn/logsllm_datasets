d
Specify whether 
the debugger 
should be executed 
as unprotected.
This setting applies 
only to the 
AeDebugProtected 
key.
1 to launch the debugger as a standard 
process.
If the debugger start type is set to Auto, WER starts it and waits for a
debugger event to be signaled before continuing the report creation. The
report generation is started through the internal GenerateCrashReport routine
implemented in the User Mode Crash Reporting DLL (Faultrep.dll). The
latter configures all the WER plug-ins and initializes the report using the
WerReportCreate API, exported from the WER.dll. (Note that at this stage,
the report is only located in memory.) The GenerateCrashReport routine
calculates the report ID and a signature and adds further diagnostics data to
the report, like the process times and startup parameters or application-
defined data. It then checks the WER configuration to determine which kind
of memory dump to create (by default, a minidump is acquired). It then calls
the exported WerReportAddDump API with the goal to initialize the dump
acquisition for the faulting process (it will be added to the final report). Note
that if a snapshot has been previously acquired, it is used for acquiring the
dump.
The WerReportSubmit API, exported from WER.dll, is the central routine
that generates the dump of the faulting process, creates all the files included
in the report, shows the UI (if configured to do so by the DontShowUI
registry value), and sends the report to the Online Crash server. The report
usually includes the following:
■    A minidump file of the crashing process (usually named
memory.hdmp)
■    A human-readable text report, which includes exception information,
the calculated signature of the crash, OS information, a list of all the
files associated with the report, and a list of all the modules loaded in
the crashing process (this file is usually named report.wer)
■    A CSV (comma separated values) file containing a list of all the
active processes at the time of the crash and basic information (like
the number of threads, the private working set size, hard fault count,
and so on)
■    A text file containing the global memory status information
■    A text file containing application compatibility information
The Fault Reporting process communicates through ALPC to the WER
service and sends commands to allow the service to generate most of the
information present in the report. After all the files have been generated, if
configured appropriately, the Windows Fault Reporting process presents a
dialog box (as shown in Figure 10-39) to the user, notifying that a critical
error has occurred in the target process. (This feature is disabled by default in
Windows 10.)
Figure 10-39 The Windows Error Reporting dialog box.
In environments where systems are not connected to the Internet or where
the administrator wants to control which error reports are submitted to
Microsoft, the destination for the error report can be configured to be an
internal file server. The System Center Desktop Error Monitoring (part of the
Microsoft Desktop Optimization Pack) understands the directory structure
created by Windows Error Reporting and provides the administrator with the
option to take selective error reports and submit them to Microsoft.
As previously discussed, the WER service uses an ALPC port for
communicating with crashed processes. This mechanism uses a systemwide
error port that the WER service registers through NtSetInformationProcess
(which uses DbgkRegisterErrorPort). As a result, all Windows processes
have an error port that is actually an ALPC port object registered by the
WER service. The kernel and the unhandled exception filter in Ntdll use this
port to send a message to the WER service, which then analyzes the crashing
process. This means that even in severe cases of thread state damage, WER is
still able to receive notifications and launch WerFault.exe to log the detailed
information of the critical error in a Windows Event log (or to display a user
interface to the user) instead of having to do this work within the crashing
thread itself. This solves all the problems of silent process death: Users are
notified, debugging can occur, and service administrators can see the crash
event.
EXPERIMENT: Enabling the WER user interface
Starting with the initial release of Windows 10, the user interface
displayed by WER when an application crashes has been disabled
by default. This is primarily because of the introduction of the
Restart Manager (part of the Application Recovery and Restart
technology). The latter allows applications to register a restart or
recovery callback invoked when an application crashes, hangs, or
just needs to be restarted for servicing an update. As a result,
classic applications that do not register any recovery callback when
they encounter an unhandled exception just terminate without
displaying any message to the user (but correctly logging the error
in the system log). As discussed in this section, WER supports a
user interface, which can be enabled by just adding a value in one
of the WER keys used for storing settings. For this experiment, you
will re-enable the WER UI using the global system key.
From the book’s downloadable resources, copy the BuggedApp
executable and run it. After pressing a key, the application
generates a critical unhandled exception that WER intercepts and
reports. In default configurations, no error message is displayed.
The process is terminated, an error event is stored in the system
log, and the report is generated and sent without any user
intervention. Open the Registry Editor (by typing regedit in the
Cortana search box) and navigate to the
HKLM\SOFTWARE\Microsoft\Windows \Windows Error
Reporting registry key. If the DontShowUI value does not exist,
create it by right-clicking the root key and selecting New,
DWORD (32 bit) Value and assign 0 to it.
If you restart the bugged application and press a key, WER
displays a user interface similar to the one shown in Figure 10-39
before terminating the crashing application. You can repeat the
experiment by adding a debugger to the AeDebug key. Running
Windbg with the -I switch performs the registration automatically,
as discussed in the “Witnessing a COM-hosted task” experiment
earlier in this chapter.
Kernel-mode (system) crashes
Before discussing how WER is involved when a kernel crashes, we need to
introduce how the kernel records crash information. By default, all Windows
systems are configured to attempt to record information about the state of the
system before the Blue Screen of Death (BSOD) is displayed, and the system
is restarted. You can see these settings by opening the System Properties
tool in Control Panel (under System and Security, System, Advanced
System Settings), clicking the Advanced tab, and then clicking the Settings
button under Startup and Recovery. The default settings for a Windows
system are shown in Figure 10-40.
Figure 10-40 Crash dump settings.
Crash dump files
Different levels of information can be recorded on a system crash:
■    Active memory dump An active memory dump contains all physical
memory accessible and in use by Windows at the time of the crash.
This type of dump is a subset of the complete memory dump; it just
filters out pages that are not relevant for troubleshooting problems on
the host machine. This dump type includes memory allocated to user-
mode applications and active pages mapped into the kernel or user
space, as well as selected Pagefile-backed Transition, Standby, and
Modified pages such as the memory allocated with VirtualAlloc or
page-file backed sections. Active dumps do not include pages on the
free and zeroed lists, the file cache, guest VM pages, and various
other types of memory that are not useful during debugging.
■    Complete memory dump A complete memory dump is the largest
kernel-mode dump file that contains all the physical pages accessible
by Windows. This type of dump is not fully supported on all
platforms (the active memory dump superseded it). Windows requires
that a page file be at least the size of physical memory plus 1 MB for
the header. Device drivers can add up to 256 548MB for secondary
crash dump data, so to be safe, it’s recommended that you increase
the size of the page file by an additional 256 MB.
■    Kernel memory dump A kernel memory dump includes only the
kernel-mode pages allocated by the operating system, the HAL, and
device drivers that are present in physical memory at the time of the
crash. This type of dump does not contain pages belonging to user
processes. Because only kernel-mode code can directly cause
Windows to crash, however, it’s unlikely that user process pages are
necessary to debug a crash. In addition, all data structures relevant for
crash dump analysis—including the list of running processes, the
kernel-mode stack of the current thread, and list of loaded drivers—
are stored in nonpaged memory that saves in a kernel memory dump.
There is no way to predict the size of a kernel memory dump because
its size depends on the amount of kernel-mode memory allocated by
the operating system and drivers present on the machine.
■    Automatic memory dump This is the default setting for both
Windows client and server systems. An automatic memory dump is
similar to a kernel memory dump, but it also saves some metadata of
the active user-mode process (at the time of the crash). Furthermore,
this dump type allows better management of the system paging file’s
size. Windows can set the size of the paging file to less than the size
of RAM but large enough to ensure that a kernel memory dump can
be captured most of the time.
■    Small memory dump A small memory dump, which is typically
between 128 KB and 1 MB in size and is also called a minidump or
triage dump, contains the stop code and parameters, the list of loaded
device drivers, the data structures that describe the current process
and thread (called the EPROCESS and ETHREAD—described in
Chapter 3 of Part 1), the kernel stack for the thread that caused the
crash, and additional memory considered potentially relevant by crash
dump heuristics, such as the pages referenced by processor registers
that contain memory addresses and secondary dump data added by
drivers.
 Note
Device drivers can register a secondary dump data callback routine by
calling KeRegisterBugCheckReasonCallback. The kernel invokes these
callbacks after a crash and a callback routine can add additional data to a
crash dump file, such as device hardware memory or device information
for easier debugging. Up to 256 MB can be added systemwide by all
drivers, depending on the space required to store the dump and the size of
the file into which the dump is written, and each callback can add at most
one-eighth of the available additional space. Once the additional space is
consumed, drivers subsequently called are not offered the chance to add
data.
The debugger indicates that it has limited information available to it when
it loads a minidump, and basic commands like !process, which lists active
processes, don’t have the data they need. A kernel memory dump includes
more information, but switching to a different process’s address space
mappings won’t work because required data isn’t in the dump file. While a
complete memory dump is a superset of the other options, it has the
drawback that its size tracks the amount of physical memory on a system and
can therefore become unwieldy. Even though user-mode code and data
usually are not used during the analysis of most crashes, the active memory
dump overcame the limitation by storing in the dump only the memory that is
actually used (excluding physical pages in the free and zeroed list). As a
result, it is possible to switch address space in an active memory dump.
An advantage of a minidump is its small size, which makes it convenient
for exchange via email, for example. In addition, each crash generates a file
in the directory %SystemRoot%\Minidump with a unique file name
consisting of the date, the number of milliseconds that have elapsed since the
system was started, and a sequence number (for example, 040712-24835-
01.dmp). If there’s a conflict, the system attempts to create additional unique
file names by calling the Windows GetTickCount function to return an
updated system tick count, and it also increments the sequence number. By
default, Windows saves the last 50 minidumps. The number of minidumps
saved is configurable by modifying the MinidumpsCount value under the
HKLM\SYSTEM\CurrentControlSet\Control\ CrashControl registry key.
A significant disadvantage is that the limited amount of data stored in the
dump can hamper effective analysis. You can also get the advantages of
minidumps even when you configure a system to generate kernel, complete,
active, or automatic crash dumps by opening the larger crash with WinDbg
and using the .dump /m command to extract a minidump. Note that a
minidump is automatically created even if the system is set for full or kernel
dumps.
 Note
You can use the .dump command from within LiveKd to generate a
memory image of a live system that you can analyze offline without
stopping the system. This approach is useful when a system is exhibiting a
problem but is still delivering services, and you want to troubleshoot the
problem without interrupting service. To prevent creating crash images
that aren’t necessarily fully consistent because the contents of different
regions of memory reflect different points in time, LiveKd supports the –
m flag. The mirror dump option produces a consistent snapshot of kernel-
mode memory by leveraging the memory manager’s memory mirroring
APIs, which give a point-in-time view of the system.
The kernel memory dump option offers a practical middle ground.
Because it contains all kernel-mode-owned physical memory, it has the same
level of analysis-related data as a complete memory dump, but it omits the
usually irrelevant user-mode data and code, and therefore can be significantly
smaller. As an example, on a system running a 64-bit version of Windows
with 4 GB of RAM, a kernel memory dump was 294 MB in size.
When you configure kernel memory dumps, the system checks whether
the paging file is large enough, as described earlier. There isn’t a reliable way
to predict the size of a kernel memory dump. The reason you can’t predict
the size of a kernel memory dump is that its size depends on the amount of
kernel-mode memory in use by the operating system and drivers present on
the machine at the time of the crash. Therefore, it is possible that at the time
of the crash, the paging file is too small to hold a kernel dump, in which case
the system will switch to generating a minidump. If you want to see the size
of a kernel dump on your system, force a manual crash either by configuring
the registry option to allow you to initiate a manual system crash from the
console (documented at https://docs.microsoft.com/en-us/windows-
hardware/drivers/debugger/forcing-a-system-crash-from-the-keyboard) or by
using the Notmyfault tool (https://docs.microsoft.com/en-
us/sysinternals/downloads/notmyfault).
The automatic memory dump overcomes this limitation, though. The
system will be indeed able to create a paging file large enough to ensure that
a kernel memory dump can be captured most of the time. If the computer
crashes and the paging file is not large enough to capture a kernel memory
dump, Windows increases the size of the paging file to at least the size of the
physical RAM installed.
To limit the amount of disk space that is taken up by crash dumps,
Windows needs to determine whether it should maintain a copy of the last
kernel or complete dump. After reporting the kernel fault (described later),
Windows uses the following algorithm to decide whether it should keep the
Memory.dmp file. If the system is a server, Windows always stores the dump
file. On a Windows client system, only domain-joined machines will always
store a crash dump by default. For a non-domain-joined machine, Windows
maintains a copy of the crash dump only if there is more than 25 GB of free
disk space on the destination volume (4 GB on ARM64, configurable via the
HKLM\SYSTEM\CurrentControlSet\Control\CrashControl\PersistDumpDis
kSpaceLimit registry value)—that is, the volume where the system is
configured to write the Memory.dmp file. If the system, due to disk space
constraints, is unable to keep a copy of the crash dump file, an event is
written to the System event log indicating that the dump file was deleted, as
shown in Figure 10-41. This behavior can be overridden by creating the
DWORD registry value
HKLM\SYSTEM\CurrentControlSet\Control\CrashControl\AlwaysKeepMe
moryDump and setting it to 1, in which case Windows always keeps a crash
dump, regardless of the amount of free disk space.
Figure 10-41 Dump file deletion event log entry.
EXPERIMENT: Viewing dump file information
Each crash dump file contains a dump header that describes the
stop code and its parameters, the type of system the crash occurred
on (including version information), and a list of pointers to
important kernel-mode structures required during analysis. The
dump header also contains the type of crash dump that was written
and any information specific to that type of dump. The
.dumpdebug debugger command can be used to display the dump
header of a crash dump file. For example, the following output is
from a crash of a system that was configured for an automatic
dump:
Click here to view code image
0: kd> .dumpdebug
----- 64 bit Kernel Bitmap Dump Analysis - Kernel address 
space is available,
      User address space may not be available.
DUMP_HEADER64:
MajorVersion        0000000f
MinorVersion        000047ba
KdSecondaryVersion  00000002
DirectoryTableBase  00000000`006d4000
PfnDataBase         ffffe980`00000000
PsLoadedModuleList  fffff800`5df00170
PsActiveProcessHead fffff800`5def0b60
MachineImageType    00008664
NumberProcessors    00000003
BugCheckCode        000000e2
BugCheckParameter1  00000000`00000000
BugCheckParameter2  00000000`00000000
BugCheckParameter3  00000000`00000000
BugCheckParameter4  00000000`00000000
KdDebuggerDataBlock fffff800`5dede5e0
SecondaryDataState  00000000
ProductType         00000001
SuiteMask           00000110
Attributes          00000000
BITMAP_DUMP:
DumpOptions         00000000
HeaderSize          16000
BitmapSize          9ba00
Pages               25dee
KiProcessorBlock at fffff800`5e02dac0
  3 KiProcessorBlock entries:
  fffff800`5c32f180 ffff8701`9f703180 ffff8701`9f3a0180
The .enumtag command displays all secondary dump data
stored within a crash dump (as shown below). For each callback of
secondary data, the tag, the length of the data, and the data itself (in
byte and ASCII format) are displayed. Developers can use
Debugger Extension APIs to create custom debugger extensions to
also read secondary dump data. (See the “Debugging Tools for
Windows” help file for more information.)
Click here to view code image
{E83B40D2-B0A0-4842-ABEA71C9E3463DD1} - 0x100 bytes
  46 41 43 50 14 01 00 00 06 98 56 52 54 55 41 4C  
FACP......VRTUAL
  4D 49 43 52 4F 53 46 54 01 00 00 00 4D 53 46 54  
MICROSFT....MSFT
  53 52 41 54 A0 01 00 00 02 C6 56 52 54 55 41 4C  
SRAT......VRTUAL
  4D 49 43 52 4F 53 46 54 01 00 00 00 4D 53 46 54  
MICROSFT....MSFT
  57 41 45 54 28 00 00 00 01 22 56 52 54 55 41 4C  
WAET(...."VRTUAL
  4D 49 43 52 4F 53 46 54 01 00 00 00 4D 53 46 54  
MICROSFT....MSFT
  41 50 49 43 60 00 00 00 04 F7 56 52 54 55 41 4C  
APIC`.....VRTUAL
...
Crash dump generation
Phase 1 of the system boot process allows the I/O manager to check the
configured crash dump options by reading the
HKLM\SYSTEM\CurrentControlSet\Control\CrashControl registry key. If a
dump is configured, the I/O manager loads the crash dump driver
(Crashdmp.sys) and calls its entry point. The entry point transfers back to the
I/O manager a table of control functions, which are used by the I/O manager
for interacting with the crash dump driver. The I/O manager also initializes
the secure encryption needed by the Secure Kernel to store the encrypted
pages in the dump. One of the control functions in the table initializes the
global crash dump system. It gets the physical sectors (file extent) where the
page file is stored and the volume device object associated with it.
The global crash dump initialization function obtains the miniport driver
that manages the physical disk in which the page file is stored. It then uses
the MmLoadSystemImageEx routine to make a copy of the crash dump driver
and the disk miniport driver, giving them their original names prefixed by the
dump_ string. Note that this implies also creating a copy of all the drivers
imported by the miniport driver, as shown in the Figure 10-42.
Figure 10-42 Kernel modules copied for use to generate and write a crash
dump file.
The system also queries the DumpFilters value for any filter drivers that
are required for writing to the volume, an example being Dumpfve.sys, the
BitLocker Drive Encryption Crashdump Filter driver. It also collects
information related to the components involved with writing a crash dump—
including the name of the disk miniport driver, the I/O manager structures
that are necessary to write the dump, and the map of where the paging file is
on disk—and saves two copies of the data in dump-context structures. The