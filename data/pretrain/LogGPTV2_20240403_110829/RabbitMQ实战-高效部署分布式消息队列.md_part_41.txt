下列命令来获取源代码：
$ hg clone http://hg.rabbitmq.com/rabbitmq-public-umbrella/
在把库克隆到本机之后，现在就该从源代码中获取项目了。运行下列命令；不
过先泡一杯咖啡吧，因为过程有点耗时：
$ cd rabbitmq-public-umbrella
$makeco
为了检测设置是否正确，你可以运行下列两个命令来编译rabbitmq-stomp
插件：
---
## Page 271
12.2制作你自己的插件
249
$cd rabbitmq-stomp/
$make
如果一切正常的话，你应该看到控制台上输出的结果如下所示：
[elided]generatedeps
[elided]  fix test deps
sed -i -e 's|build/deps.mk|$(DEPS_FILE)|' build/deps.mk
rm -rf build/dep-ezs
mkdir -p build/dep-ezs
many lines trimmed out
touchdist/.done.0.0.0
touch dist/.done
下一步要做的是为你的插件创建文件夹结构。在继续下一节前，我们先进人
umbrella文件夹中。
12.2.2设置文件夹结构
你将按照开放电信平台（OpenTelecomPlatform，OTP）编码标准来构建自己的
插件一你将遵循一个特定的文件夹结构、文件命名约定，并采用适合Erlang的一
些编码模式来组织源代码。由于本书主要讨论的是RabbitMQ，因此我们不会花费太
多时间来讲述Erlang的细节；但是如果你很好奇，想要学习更多内容的话，我们建
议你读一下由Manning出版的ErlangandOTP inAction（http://manning.com/logan/）
或者 Learn You Some Erlangfor Great Good（http://learnyousomeerlang.com/）。即便没
有任何Erlang经验，你也可以轻松理解示例代码。需要注意的是，如果你之前从未
使用过Erlang或者函数式编程的话，一些技术可能看起来很陌生。
插件的文件夹结构十分简单。由于你称它为RabbitMQRecent HistoryExchange，
因此在umbrella项目内创建一个叫作rabbitmq-recent-history-exchange的
文件夹。在该文件夹下创建src文件夹来存放你的源代码。就是这么简单：
cd..
mkdir rabbitmq-recent-history-exchange
cd rabbitmq-recent-history-exchange
mkdir src
下一步是将umbrella构建系统包含到你的项目里面。
---
## Page 272
250
第12章聪明的Rabbit：扩展RabbitMQ
12.2.3包含插件构建系统
为了能够使用umbrella构建系统，你需要将一些文件添加到项目根文件夹下。
第一个文件是Makefile，它引l用了umberlla的make文件。添加以下内容。
include../umbrella.mk
通过引用umbrella.mk文件，你将受益于那些已有的命令。这些命令可以用
来将你的插件打包为.ez文件；另一些命令则能从项目文件夹下在服务器内部直接
运行你的插件，这使得测试起来很简单。还有些命令则是用来清理构建文件的。请
参考umbrella文件夹下的README.makefiles以获取完整的选项列表。
现在Makefile已经就位了，你可以添加package.mk文件，它包含了构建系
统所需的插件具体配置选项。在你的项目文件夹下创建该文件，并添加以下内容：
DEPS:=rabbitmq-server rabbitmq-erlang-client
RETAIN_ORIGINAL_VERSION:=true
看起来就是这么简单。你做的是在DEPS宏中指明了插件依赖，并且将
RETAIN_ORIGINAL_VERSION宏设置为true，让构建系统获取你将要赋予给插件的
版本号。由于你准备构建自定义交换器，你需要rabbitmq-server项目中一些已
有的功能和rabbitmq-erlang-client的一些特性；因此，你在package.mk文
件中指明了该插件依赖于这两个项目。umbrella构建系统会负责为你解析依赖关系，
是不是很棒？现在你已经准备就绪开始编码你的插件了，那么就让我们编写应用规
范文件吧。
12.2.4创建 Erlang 应用文件
现在基本环境已经设置就绪，让我们创建应用规范文件吧。你也许会奇怪那是
什么一应用程序会是什么样子呢？Erlang程序是由应用文件构成的，而每个应
用文件包含了具体实现功能的模块。像Erlang模块列表，包括应用程序或者配置选
项，都是在应用规范（application specification）文件中指定的。当创建应用规范文
件时，你需要指明Erlang模块列表，这看起来有点乏味。幸运的是该步骤可以通过
使用应用规范模板（applicationspecificationtemplates）来简化，umbrella构建系统
会在稍后自动填充这些信息。这意味着你无须担心如何保持模块列表的更新；构建
系统会负责这些工作。那么虽然通常在Erlang项目中，你将创建普通的应用程序文
件，但是在本例中，你将为其创建一个模板，并让umbrella系统来自动填写信息。
---
## Page 273
12.2制作你自己的插件
251
让我们在 src 文件夹下创建该模板文件，并命名为 rabbitmq_recent_history_
exchange.app.src。该文件包含以下内容：
(application, rabbitmq_recent_history_exchange,
[{description, "RabbitMQ Recent History Exchange"},
{vsn, "0.1.0"},
{modules，[]}，
{registered,[]},
{applications, [kernel, stdlib, rabbit, mnesia]}]}.
这里你看到的是一个Erlang元组（tuple），它是一个复合数据类型，拥有固定
数量的Erlang值（数值）”。如果对该结构进行简化，你可以看到它具有如下的形态：
{application, application_name, [{keyl, vall), ..., (keyN, valN}]}.
元组中的第一个元素是名为application的原子类型—原子类型就像Ruby
中的符号（symbol）或者Clojure中的关键字（keyword）。第二个元素是用于保存应
用名称的原子类型。最后，第三个元素是一个Erlang列表，以字符［和］进行分隔。
这是一个属性列表（propertylist），因为它存放了键和值的元组。如果你仔细
查看了内容的话，就会发现有一个description的属性{description，"RabbitMQ
RecentHistoryExchange”}描述了该应用是用来做什么的。你可以用任何字
符串来作为该应用的描述。Vsn值则指明了应用的版本号。由于应用才刚刚创建，
因此你把它标记为0.1.0。之后是应用程序需要使用的Erlang模块列表。我们之前提
到过，该列表会被umbrella构建系统自动填充。registered属性代表应用程序会
注册哪些进程，该示例中为空列表。最后，你指明了哪些应用必须运行才能让插件
正常工作。Erlangkernel和标准库stdlib是必需的。你依赖于RabbitMQ服务器
的正常运行，因此添加了rabbit应用。最后一点，因为你将使用Erlang Mnesia 数
据库，所以你把它也加人进来。
在开始编写交换器逻辑之前，让我们先确保Makefiile设置正确。在插件文
件夹下输人make。你应该可以在命令行上看到许多输出。这很正常：构建系统会
将所有插件的依赖如ErlangAMQP客户端和服务器自身等全部make起来。在make
过程结束后，你会注意到在项目根目录下有一些新的文件夹。最有意思的是那个叫
3如果你想了解更多有关Erlang数据类型的话，请参阅http://www.erlang.org/doc/reference_manual/data
types.html
---
## Page 274
252
第12章聪明的Rabbit：扩展RabbitMQ
作dist（distribution）的文件夹。这里存放着最终生成的插件文件。在终端输入下
列命令：
$lsdist
amqp_client-0.0.0.ez rabbit_common-0.0.0.ez
rabbitmq_recent_history_exchange-0.1.0-rmq.ez
这里你看到了插件文件和它的依赖。虽然插件没有实现功能，但是你至少可
以测试构建系统是否设置正确。在完成插件的最终版本之后，你需要将这些文件
复制到RabbitMQ安装目录下的plugins文件夹下。现在让我们开始编写Erlang代
码吧。
12.3创建自定义交换器模块
Erlang源代码是以模块的方式组织起来的。模块内的函数实现了应用程序需要
提供的功能。不像Java 或者C#，Erlang里没有类或者包，这让结构变得扁平并且
简单。插件只需要一个模块来包含自定义交换器的实现。你将在src文件夹下创建
名为rabbit_exchange_type_recent_history.erl 的文件，并随着本节内容
的深入，你会往其中添加更多的内容。
你怎样了解交换器的内部情况呢？RabbitMQ如何知道应该调用模块里的哪些
函数来完成消息的路由、队列绑定等呢？在面向对象编程（OOP）中，你拥有接口
（interface）的概念。你可以在接口中定义一系列的方法，实现该接口的类必须实现
这些方法，就像签订了合约一样。举例来说，为了实现访问者（Visitor）模式，你
可以查看Visitor接口，它会告诉你需要提供一个Visit方法；Iterator会实
现hasNext和next方法，等等。在Erlang中有相同的概念，但是不同的名称：
behaviour（行为）。注意这个单词的英式拼写。
Erlangbehaviour确定了模块需要实现和导出哪些函数，因此调用该模块的代码
才知道该如何使用它。另一个与OOP世界不同的地方在于，Erlang没有Java那样
可见性的概念；举例来说，Erlang没有public、protected、private修饰符。你拥有
的就是一个模块导出列表。因此，如果模块实现了函数foo、bar和baz，但只导
出foo的话，那么bar和baz将无法从外界调用。除了模块的函数导出这块内容
---
## Page 275
12.3创建自定义交换器模块
253
之外，你还需要知道函数可以接收的参数个数。Erlang有函数参数数量（function
arity）的概念一一个函数接收的参数数量。Erlang可以接受名字相同，而参数数
量不同的函数；因此behaviour可以确定函数foo/1和foo/2是两个不同的函数。
当指定函数名称时，将一个正斜杠放在函数名称和其参数之间。现在让我们回来继
续讨论behaviour：你如何知道交换器的工作情况呢？RabbitMQ暴露了一个交换器
behaviour，名为rabbit_exchange_type，它会告诉你需要实现哪些函数来成为
一个符合要求的交换器。由于你的交换器是一个加强版的fanout类型交换器，缓存
会简化任务。
看了图12.2，你就明白需要完成一个和默认fanout交换器不同的实现。首先，
你需要缓存已路由的消息。每当交换器路由消息的时候，你就将该消息存储到某个
数据库中。该功能会在函数route/2中实现。然后，当队列绑定到你的交换器上的
时候，你需要把你缓存的那些消息投递过去。该功能会在函数add_binding/3中
实现。最后，当你的交换器删除的时候，你需要丢弃缓存以防内存泄露，这会在函
数de1ete/3中处理。注意，同时你也需要实现其他功能。在图12.2中提到的这些
是与fanout交换器默认实现之间的差异。最后一个实现细节是，你将要使用Mnesia
（Erlang的内建数据库）。RabbitMQ就是用它来存储绑定和交换器元数据信息的。你
会一步步地来实现该交换器，并在最后，我们将向你展示模块的完整源代码。
缓存最多
20条消息
RecentHistory
Exchange
route/2
将缓存的消息
add_binding/3
投递给新客户
delete/3
丢弃缓存
的消息
图12.2Recent HistoryExchange的详细功能说明
现在让我们在 src 文件夹下创建rabbit_exchange_type_recent_history.
erl，并添加以下内容。
---
## Page 276
254
第12章聪明的Rabbit：扩展RabbitMQ
清单12.1rabbit_exchange_type_recent _history.erl 商N
-module(rabbit_exchange_type_recent_history) .
>,
?MODULEJ}},
{requires, rabbit_registry},
{enables,kernel_ready}l}).
②初始化
数据库
rabbit_boot_step((rabbit_exchange_type_rh_mnesia)
{mfa，{?MODULE,Setup_schema,[]}},
{requires,database},
③定义常量
{enables, external_infrastructure)l)).
和记录
-define(KEEP_NB,20).
-define(RH_TABLE,rh_exchange_table).
-record(cached, {key, content}).
rabbit_boot_step包含如下模块：首先，description用来表明启动步
骤是做什么的（注意它就是作为文档说明用的；在这里你可以填写任何内容，只
要是字符串即可）。下一部分是mfa，即模块函数参数部分（modulefunction
arguments），在这里你调用了rabbit_registry中的函数register，将交
换器类型和相关模块作为参数传人。在AMQP层面，你的交换器类型被命名为
x-recent-historY。根据AMQP规范，你添加到协议的所有自定义元素都需要