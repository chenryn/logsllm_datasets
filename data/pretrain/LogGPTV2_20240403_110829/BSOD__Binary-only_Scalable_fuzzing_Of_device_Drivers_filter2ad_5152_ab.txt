performance compared to fuzzing with Intel PT. Encouraged by
these positive results, we implemented UnTracer-style coverage for
BSOD.
RetroWrite. RetroWrite [8] is a method to add instrumentation to
binaries to support AFL or ASAN through binary rewriting. It allows
performing security analysis like fuzzing on closed-source targets.
Binary rewriting is an involved process that requires recalculating
and updating all pointer offsets so that the binary still executes
correctly. The difficulty is to distinguish between reference and
scalar constants. In our tests using NVIDIA’s drivers, RetroWrite
could not produce a usable kernel module. This is not surprising,
given the scope of the driver.
kAFL. kAFL [33] is a kernel fuzzer for multiple operating systems
that leverages Intel PT for hardware-assisted coverage feedback.
It uses the KVM hypervisor and QEMU [2] to emulate the target
operating system, in which the fuzzing takes place. To trace the
guest VMs exclusively, they created customized versions of the
KVM kernel component, namely KVM-PT, and the user-space sys-
tem emulator QEMU, namely QEMU-PT. The KVM-PT component
enables and disables the tracing via the host’s CPU MSR registers
on VM-Enter and VM-Exit calls, respectively. Inside the guests,
specific agent programs wait for test cases and trigger the fuzzing
loop. The way BSOD interacts with AFL++ resembles the concepts
of kAFL. However, we chose UnTracer-style coverage collection
over Intel PT, to be able to also fuzz drivers that only run on AMD
CPUs, where Intel PT is not available, as well as to be able to scale
to servers with ease.
Agamotto. Many techniques for fuzzing kernel-mode drivers
exist, but most of them involve performance issues due to costly ex-
ecution of kernel code, interference of test cases, or kernel crashes.
Agamotto [36] introduces lightweight virtual machine checkpoints
to improve the throughput of kernel driver fuzzing. Based on the ob-
servation that fuzzers frequently execute similar test cases in a row,
the authors improved the performance by continuously creating
checkpoints during the fuzzing execution and skipping identical
parts of other test cases by restoring related checkpoints. Agamotto
increased the speed of Syzkaller [11] by 66,6% on average when
fuzzing 8 USB drivers, whereby it skipped 35,6% of test case execu-
tions. Additionally, the approach achieved a speed improvement of
21,6% when fuzzing PCI drivers with AFL [39].
Unicorefuzz. Unicorefuzz [24] allows the fuzzing of code in ker-
nel space by leveraging CPU emulation based on the Unicorn en-
gine. The setup uses QEMU [2] for the creation of the initial system
state, AFL’s Unicorn mode [13] for fuzzing, and Avatar2 [26] for
50RAID ’21, October 6–8, 2021, San Sebastian, Spain
Toepfer and Maier
interaction with QEMU’s exposed GDB stub. The system creates a
breakpoint for that address so that the VM halts once the breakpoint
gets triggered. After hitting the start address, the system synchro-
nizes the CPU’s state of the VM with the Unicorn engine that starts
fuzzing the code right after the breakpoint. This methodology also
allows to fuzz initialized drivers, albeit without further hardware
interaction. On top, the emulated execution speed is rather low [24].
Difuze. Difuze [7] is a framework for interface recovery of kernel
drivers for the Android platform. Its purpose is to enable interface-
aware fuzzing on the ioctl interface of device drivers. The command
and data structures of ioctl system calls are driver-dependent and
can contain multiple pointers and substructures. From a security
perspective, it has a high chance of containing vulnerabilities. To
trigger deeper code paths these structures need to be valid, which
requires meaningful fuzzing input choices. Otherwise, the target
would likely early reject the inputs without reaching interesting
program locations that might contain bugs. To extract the data
structures, Difuze applies static code analysis of kernel drivers that
requires to have access to the source code. Since the target devices
are mobile devices running Android that contain vendor-specific
hardware, such as GPS sensor, accelerometer, or camera, they have
to include their drivers into the kernel tree that vendors must
publicly release thanks to the GPL license. The process consists
of three steps that are interface recovery by static analysis of the
kernel source code, structure instance generation based on the prior
extracted information, and execution of the generated instances on
the actual device.
P2IM. Feng et al. proposed P2IM [12], a firmware rehosting
framework. P2IM abstracts peripherals and handles firmware I/O
to rehost the firmware of embedded devices fully automated. It
enables peripheral-oblivious emulation and can be used to fuzz
firmware of embedded devices with AFL. Of the 70 firmware and 10
real devices, P2IM managed to executed 79% of the sample firmware
without any manual assistance.
avatar2. Avatar2 [26] is a multi-target orchestration framework
that allows dynamic analysis of embedded firmware images. Avatar2
provides interoperability between different dynamic binary anal-
ysis platforms, emulators, debuggers, and real hardware devices.
The analyst can define topologies and specify events to transfer
the state of the memory and CPU registers from one system to
another. Partial emulation is achieved by executing the firmware
via an emulator and forwarding the memory-mapped peripherals
to the real hardware devices.
USBFuzz. USBFuzz [29] is a framework that targets the fuzzing
of USB drivers inside QEMU [2]. Since hardware devices become
costly when larger fuzzing campaigns require multiple instances,
the authors created an emulated software USB device, configurable
to imitate different USB devices by specifying device and vendor IDs.
This allows drivers to recognize and bind the devices to properly
initialize and operate. With this approach, the fuzzing scales way
better, and the utilization of the system’s resources is more efficient.
The fuzzer operates from the device side, which means the device
responds to requests with fuzzing inputs. To retrieve coverage
feedback for Linux, the approach uses an instrumented kernel built
with KCOV and KASAN features enabled, which limits coverage
feedback to open-source drivers. Although the work targets USB
devices, the approach shares similarities with our work. Instead of
creating an emulated USB device, we need an emulated PCI device
for improving the fuzzing process. Furthermore, our work is not
limited to open-source drivers to retrieve coverage feedback and
supports closed-source targets.
Periscope. PeriScope is a Linux kernel based probing framework
that allows fine-grained analysis of device-driver interactions [35].
It allow researchers to monitor and log traffic between device dri-
vers and hardware. On top of it, the authors built PeriFuzz, a fuzzer
that is able to fuzz device drivers from the device side, uncover-
ing bugs that can be exploited to exploit the kernel from rogue
devices. The fuzzer found 15 unique vulnerabilities in the Wi-Fi dri-
vers of two flagship Android smartphones, including 9 previously
unknown ones.
3 BSOD DESIGN
BSOD is a framework to fuzz complex binary-only kernel device dri-
vers using AFL++ and Syzkaller. It works for drivers with forwarded
hardware devices, and offers the option to replace the hardware
device with a virtualized record & replay device, BSOD-fakedev
altogether. To make it cloud-friendly, we do not rely on strong hard-
ware dependencies, like Intel PT. In this section, we will present
BSODs design.
Figure 3: Detailed interactions of BSOD’s components.
Figure 3 depicts an overview of the experimental environment
used to analyze kernel drivers in conjunction with real hardware de-
vices during our work. It uses virtualization-based on QEMU’s full-
system emulation [2] with Kernel-based Virtual Machine (KVM)
acceleration to drive a guest running an operating system with
native performance. To make physical hardware devices available
inside the guest, we pass through host devices with the help of
Virtual Function I/O (VFIO). To fuzz with BSOD the analyst has to
determine how applications interact with target and what kind of
data the driver expects as a one-time manual effort. To reveal the
needed information, we trace the interactions and data exchanged
between exemplary applications, the drivers, and the devices. Af-
terward, we inspect the collected data traces to infer parts of the
HostHardwareKernelUser spaceCPUMemoryPCI DeviceKVMVFIOQEMUGuestHardwareVFIO DevicevCPUMemoryKernelTargetDriverUser spaceHarnesssyz-bp-covsyz-managerVMIAFL BSOD51BSOD: Binary-only Scalable fuzzing Of device Drivers
RAID ’21, October 6–8, 2021, San Sebastian, Spain
locations, the tracer receives an interrupt to determine the follow-
ing executed block, which depends on whether the branch will be
taken or not that can be tracked by executing a single step. Before
continuing execution, the tracer restores the original instruction
byte to execute normally. The tracing of all the block transitions
during the program’s execution reveals the full path through the
CFG.
Edge Coverage Mode. Tracking individual branches instead of
only basic blocks is the coverage method of choice, where avail-
able [13]. In the following, we will explain how we implement edge
coverage mode in BSOD.
(1) Preprocess target module
In the first step, we preprocess the .text section of the target
kernel module to extract all the offsets of conditional control-flow
instructions and both possible target basic block addresses into a
file. We use capstone [31] to disassemble the binary module. This
step is only needed once per target module.
(2) Initialize fuzzing environment
Then, the guest VM is booted, and the target kernel module is loaded.
The beginning of the module’s .text section in memory is deter-
mined by reading the module’s load address from /proc/modules.
Afterward, BSOD starts and takes the module load address and the
file containing the extracted offsets of control-flow instructions as
arguments. It connects to the introspection API, pauses the VM, and
registers two events, namely BREAKPOINT, which triggers whenever
encountering an INT 3 breakpoint exception and SINGLESTEP that
triggers after executing an instruction in single-step mode. Then, it
will back up and replace the first byte of every control-flow instruc-
tion according to the previously extracted offsets with a software
interrupt. The VM will be resumed afterward and is prepared for
the harness to start.
(3) Execute test case
Whenever a software interrupt occurs during the execution of the
target function, BSOD catches and handles it according to the al-
gorithm shown in Figure 4, in which M refers to the memory, B
refers to the instruction backups, and COV refers to the collected
coverage. It reads out the address of the encountered control-flow
instruction of the CPU’s RIP register and restores the 0xcc byte to
the saved opcode. When the current Process ID (PID) belongs to
the harness, the CPU is switched into the single-step mode to trace
which of the two possible paths are taken. After the single-step,
BSOD receives an interrupt again and reads the new RIP of the CPU.
The module load address is subtracted from both addresses to main-
tain consistent coverage information across reboots. Subsequently,
both basic block addresses are linked using XOR to represent the
edge and reported to the fuzzer.
UnTracer-Style Block Coverage Mode. Nagy and Hicks [27] show
a method to get reasonably fast performance metrics out of purely
breakpoint-based instrumentation if the fuzzer applys smart tracing.
In their measurements, removing hit breakpoints after the first hit
still performed well for coverage guided fuzzing, while reaching
near-native execution speed after a while. Inspired by the presented
fuzzer UnTracer for user-mode applications, we adapted the method
for fuzzing modules in kernel space.
Figure 4: Control-flow graph extracted with GHIDRA [1]
drivers’ functionalities and use these insights to set up the fuzzing
procedure. As a final step, BSOD can eliminate the hardware de-
pendency.
In the following, we introduce the used concepts. BSOD connects
to our experimental environment by using libvmi [22], a library
that provides an introspection API for different hypervisors. For the
KVM hypervisor, the KVM-VMI [37] project forms the basis, which
combines the KVM kernel module, QEMU, libkvmi, and libvmi.
For the practicability of our setup, we modified the libvmi library
to be usable without the libvirt virtualization API in between.
Since we cannot instrument binary-only drivers through recom-
pilation, we need to establish a different way of getting coverage
information.
void foo ( char ∗ input )
{
( input [ 0 ] == 'A ' )
i f
i f
{
( input [ 1 ] == ' B ' )
i f
}
( input [ 2 ] == 'C ' )
crash = 1 ;
{
{
1
2
3
4
5
6
7
8
9
}
}
}
Listing 1: Exemplary program source code
Control-Flow Tracing. Listing 1 shows exemplary program source
code and Figure 4 the related Control-Flow Graph (CFG) of the com-
piled binary. To trace the program flow during execution, we must
determine the successive basic block when the CPU encounters
a conditional control-flow instruction. In this example, the tracer
replaces the first byte of the JNZ instructions at the offsets 0x112a,
0x1139, and 0x1148 with 0xcc. When reaching one of these code
b2b1b5b3b4e1e2e3e4e5e6e752RAID ’21, October 6–8, 2021, San Sebastian, Spain
Algorithm 1 Breakpoint coverage
while wait for new event do
event ← readevent
if event == breakpoint then
M[rip] ← B[rip]
if pid == tracepid then
sinдlestep ← true
COV ∪ rip − base ⊕ prev_loc − base
prev_loc ← rip
else if event == sinдlestep then