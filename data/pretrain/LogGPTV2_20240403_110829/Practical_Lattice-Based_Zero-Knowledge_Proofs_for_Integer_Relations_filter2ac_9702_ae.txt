– If Ch = 2: Output ⊥ and abort.
Receiving a challenge Ch from (cid:98)V, the simulator responds as follows:
– If Ch = 1: Send RSP =(cid:0)s(cid:48) + c mod 2, Γc(r), ρ2, ρ3
– If Ch = 3: Send RSP =(cid:0)c, r, ρ1, ρ2
(cid:1).
Case Ch = 3: SIM prepares CMT =(cid:0)C(cid:48)
1 = COM(c, M1 · (w(cid:48)
1 + r1) − u1 mod q, M2 · (w(cid:48)
C(cid:48)
Receiving a challenge Ch from (cid:98)V, it responds as follows:
except that C(cid:48)
1 is computed as
1, C(cid:48)
2, C(cid:48)
(cid:1).
(cid:1) as in the case Ch = 2 above,
3
2 + r2) − u2 mod 2; ρ1).
– If Ch = 1: Send RSP computed as in the case (Ch = 2, Ch = 1).
– If Ch = 2: Send RSP computed as in the case (Ch = 1, Ch = 2).
– If Ch = 3: Output ⊥ and abort.
commitment CMT and that of the challenge Ch from (cid:98)V are statistically close to
In all the above cases, since COM is statistically hiding, the distribution of the
those of the real interaction. Hence, the probability that the simulator outputs ⊥
is negligibly far from 1/3. Moreover, whenever the simulator does not halt, it
provides an accepting transcript, of which the distribution is statistically close to
that of the prover in a real interaction. We thus described a simulator that can
successfully emulate the honest prover with probability negligibly close to 2/3.
Argument of Knowledge. Suppose that we have RSP1 = (c(cid:63), v, ρ(1)
2 , ρ(1)
3 ),
RSP2 = (b, x, ρ(2)
2 ), which are accepting tran-
scripts for the three possible values of the challenge and the same commitment
CMT = (C1, C2, C3). Let us parse x and y as x = (x1(cid:107)x2), y = (y1(cid:107)y2), where
x1, y1 ∈ Zd1
3 ), and RSP3 = (e, y, ρ(3)
q and x2, y2 ∈ Zd2
2 .
1 , ρ(2)
1 , ρ(3)
The validity of the given responses implies that:
C1 = COM(b, M1 · x1 − u1 mod q, M2 · x2 − u2 mod 2; ρ(2)
1 );
C1 = COM(e, M1 · y1 mod q, M2 · y2 mod 2; ρ(3)
1 );
C2 = COM(v; ρ(1)
C3 = COM(t (cid:1) v; ρ(1)
3 ) = COM(Γb(x); ρ(2)
3 ),
2 ) = COM(Γe(y); ρ3
2);
where t = ENC(c(cid:63)). Since COM is computationally binding, we can deduce that:
b = e; v = Γe(y); t (cid:1) v = Γb(x);
M1 · x1 − u1 = M1 · y1 mod q; M2 · x2 − u2 = M2 · y2 mod 2.
17
Let s(cid:48) = c(cid:63) + e mod 2 and w(cid:48) = [Γe]−1(t). Since t = ENC(c(cid:63)), by equivalence (7),
we have that w(cid:48) = ENC(s(cid:48)). Furthermore, note that Γe(w(cid:48)) (cid:1) Γe(y) = Γe(x),
which implies that w(cid:48) (cid:1) y = x.
2 ∈ {0, 1}d2.
Now, parse w(cid:48) as w(cid:48) = (w(cid:48)
Then, we have w(cid:48)
1 ∈ {0, 1}d1 and w(cid:48)
2), where w(cid:48)
2 + y2 = x2 mod 2, and
1(cid:107)w(cid:48)
This implies w(cid:48) = (w(cid:48)
M2 · w(cid:48)
By reversing the transformations, it can be seen that the bits of s(cid:48) satisfy
2 = u2 mod 2. Let s(cid:48) = (s(cid:48)
1 = u1 mod q and
) ∈ {0, 1}N +m2.
1, . . . , s(cid:48)
N +m2
m1
1 + y1 = x1 mod q, w(cid:48)
M1 · w(cid:48)
1 = M1 · x1 − M1 · y1 = u1 mod q;
M2 · w(cid:48)
2 = M2 · x2 − M2 · y2 = u2 mod 2.
1(cid:107)w(cid:48)
2) = ENC(s(cid:48)), as well as M1 · w(cid:48)
(cid:88)
N(cid:88)
(cid:88)
|T|(cid:88)
N , . . . , s(cid:48)
, . . . , s(cid:48)
bj · s(cid:48)
gi · s(cid:48)
i∈[m1]
h(cid:96),k · s(cid:48)
f(cid:96),t · (s(cid:48)
j∈[m2]
i +
k +
N +j = u1 mod q;
∀(cid:96) ∈ [n2] :
· s(cid:48)
jt
it
) = v(cid:96) mod 2.
k=1
t=1
Hence, we have extracted s(cid:48) = (s(cid:48)
witness for the considered relation.
1, . . . , s(cid:48)
m1
, . . . , s(cid:48)
N , . . . , s(cid:48)
N +m2
), which is a valid
(cid:117)(cid:116)
As we mentioned earlier, all the statements we will consider in the next sections
will be reduced into instances of the presented general protocol. For each of them,
we will employ the same strategy. First, we demonstrate that the considered
statement can be expressed as an equation modulo q of the form (5) and equations
modulo 2 of the form (6). This implies that we can run the general protocol
to handle the statement, and obtain a statistical ZKAoK via Theorem 1. Next,
as the complexity of the protocol depends on m1 + m2, N,|T|, we count these
respective numbers in order to evaluate its communication cost.
4 Zero-Knowledge Arguments for Integer Additions
This section presents our lattice-based ZK argument system for additive re-
lation among committed integers. Let n be the security parameter, and let
L = poly(n). Given KTX commitments to L-bit integers X = (xL−1, . . . , x0)2,
Y = (yL−1, . . . , y0)2 and (L + 1)-bit integer Z = (zL, zL−1, . . . , z0)2, the protocol
allows the prover to convince the veriﬁer in ZK that X + Y = Z over Z.
As discussed in Section 1 and Section 2.1, using diﬀerent ﬂavors of the KTX
commitment scheme, we can commit to all the bits of X, Y, Z at once or a
bit-by-bit fashion. Both approaches are both compatible with (and independent
of) our ZK techniques. Depending on which commitments we use, we obtain
diﬀerent give trade-oﬀs in terms of parameters, key sizes, security assumptions
and communication costs. In the following, we will use the former variant, which
yields communication complexity (cid:101)O(L + n). Our protocol can be easily adjusted
18
but allows smaller parameters, smaller keys and weaker lattice assumption.
to handle the bit-wise commitment variant, which yields complexity (cid:101)O(L · n),
Commitments. Let a prime q = (cid:101)O(
commitment key (a0, . . . , aL−1, aL, b1, . . . , bm) ←(cid:45) U (Zn×(L+m+1)
to X, Y, Z, sample ri,1, . . . , ri,m,←(cid:45) U ({0, 1}), for i ∈ {1, 2, 3}, and compute
(cid:80)L−1
i=0 ai · xi +(cid:80)m
i=0 ai · yi +(cid:80)m
(cid:80)L−1
(cid:80)L
i=0 ai · zi +(cid:80)m
j=1 bj · r1,j = cx mod q;
j=1 bj · r2,j = cy mod q;
j=1 bj · r3,j = cz mod q,
L · n) and m = n((cid:100)log2 q(cid:101) + 3). Choose a
). To commit
(10)
√
q
and output commitments cx, cy, cz ∈ Zn
hardness of SIVPγ, for γ = (cid:101)O(
L · n).
√
q . The scheme relies on the worst-case
Before presenting our protocol, we note that the three equations (10) can be
uniﬁed into one equation of the form
L−1(cid:88)
i=0
a(1)
i
· xi +
L−1(cid:88)
i=0
a(2)
i
· yi +
L(cid:88)
i=0
a(3)
i
(cid:88)
· zi +
b(i)
j
· ri,j = c mod q,
(11)
(i,j)∈[3]×[m]
i ∈ Z3n
i
i
, a(2)
, a(3)
q are extensions of ai; b(1)
where a(1)
q are exten-
sions of bj; and c = (cx(cid:107)cy(cid:107)cz) ∈ Z3n
q . Having done this simple transformation,
we observe that equation (11) does have the form captured by equation (5) in
the protocol we put forward in Section 3. Here, the secret bits contained in the
equations are the bits of X, Y, Z and those of the commitment randomness.
, b(2)
, b(3)
j
j
j ∈ Z3n
Proving integer additions. At a high level, our main idea consists in trans-
lating the addition operation X + Y over the integers into the binary addition
operation with carries of (xL−1, . . . , x0)2 and (yL−1, . . . , y0)2 and proving that
this process indeed yields result (zL, zL−1, . . . , z0)2. For the latter statement,
we capture the whole process as equations modulo 2 that contain linear and
quadratic terms, and show how this statement, when combined with the commit-
ment equations (11), reduces to an instance of the protocol of Section 3.
Let us ﬁrst consider the addition of two bits x, y with carry-in bit cin. Let the
output be bit z and the carry-out bit be cout. Then, observe that the relation
among x, y, z, cin, cout ∈ {0, 1} is captured by equations
z = x + y + cin mod 2
cout = x · y + z · cin + cin mod 2