# A Cost-Effective Dependable Microcontroller Architecture with Instruction-Level Rollback for Soft Error Recovery

## Authors
- Teruaki Sakata
- Teppei Hirotsu
- Hiromichi Yamada
- Takeshi Kataoka

### Affiliations
- **Teruaki Sakata, Teppei Hirotsu, Hiromichi Yamada, Takeshi Kataoka**
  - Standard Product Business Group, Renesas Technology Corp.
  - E-mail: {teruaki.sakata.ac, teppei.hirotsu.nm, hiromichi.yamada.pc}@hitachi.com
- **Teppei Hirotsu**
  - Hitachi Research Laboratory, Hitachi Ltd.

## Abstract
We have developed a cost-effective, dependable microcontroller architecture designed to recover from soft errors. To detect these errors, we created an electronic design automation (EDA) tool that generates optimized soft error-detecting logic circuits for flip-flops. Upon detecting a soft error, the rollback control module (RCM) resets the CPU and restores the register file using a backup. The CPU then restarts from the instruction executed before the error. Additionally, an error reset module (ERM) can restore the RCM from soft errors. We also developed an error correction module (ECM) to correct ECC errors in RAM without introducing delay overheads. Testing on a 32-bit RISC microcontroller and EEMBC benchmarks showed area and frequency overheads of under 59% and 9%, respectively. Simulations indicated that the mean time between failures (MTBF) for random logic circuits and RAM were 30 and 1.34 times longer, respectively, compared to the original microcontroller.

## 1. Introduction
The development of future automotive electronic control systems, such as X-by-Wire systems, requires microcontrollers with improved performance and reliability. These systems, which include high-level automatic controls like crash prevention auto-steering, demand faster and more reliable microcontrollers with smaller semiconductor feature sizes. However, since X-by-Wire is a safety-critical system, highly dependable and fault-tolerant architectures are essential to prevent serious accidents caused by electronic failures.

Microcontroller failures can be categorized into hard errors (permanent) and soft errors (transient). Soft errors, caused by factors such as alpha rays, neutron strikes, and environmental noise, are becoming increasingly significant due to their impact on microcontroller reliability. As semiconductor feature sizes and supply voltages decrease, the soft error rate (SER) increases. Soft errors occur in memory elements (RAM, flip-flops) and combinational logic circuits, leading to single event upsets (SEUs) and single event transients (SETs).

Traditional approaches to enhancing dependability, such as module redundancy and output signal comparison, are not feasible for automotive microcontrollers due to constraints on package size, cost, and power consumption. Therefore, we developed a cost-effective microcontroller architecture for soft error recovery, suitable for embedded systems requiring low cost and high performance. In the following sections, we discuss our solutions to various design issues, describe the architecture in detail, present evaluation results, and discuss related work.

## 2. Design Issues and Solutions
Our target is a one-chip microcontroller with a CPU, RAM, and random logic circuits, aiming to achieve low-overhead, dependable, and low SER architecture. We identified the following issues with existing microcontrollers using ECC RAM:
1. Soft errors in random logic circuits cannot be detected.
2. There is no mechanism for recovering from detected soft errors.
3. ECC timing critical paths introduce significant frequency overhead.

To address these issues, we:
1. Developed an EDA tool to generate soft error-detecting logic circuits for flip-flops in random logic circuits.
2. Created a rollback control module (RCM) to reset the CPU and restore its register file after a soft error.
3. Designed an error reset module (ERM) to restore the RCM and other modules from soft errors.
4. Modified the ECC architecture to eliminate delay overheads, allowing the CPU to read uncorrected data directly from RAM and correct ECC errors at the next cycle.

## 3. Features of the Dependable Microcontroller Architecture

### 3.1. Automatic Generation of Soft Error-Detecting Logic Circuits
We implemented an EDA tool to generate soft error-detecting logic circuits for flip-flops with minimal overhead. The tool selects the optimal detection method based on timing information, either using parity or flip-flop redundancy. It also optimizes the generated circuits by dividing or grouping flip-flops to balance area and delay overheads. This tool was applied to hierarchical designed random logic circuits, resulting in faster generation times compared to previous methods.

### 3.2. Instruction-Level Rollback Architecture for Random Logic Circuits

#### 3.2.1. Soft Error Recovery of the CPU
We developed a rollback control module (RCM) to reset the CPU and restore its register file upon detecting a soft error. The RCM uses a backup register file to store latched data from the CPU's register file. When a soft error is detected, the RCM issues a CPU reset signal and cancels any ongoing RAM write operations. The rollback sequence is implemented as an exception process with the highest priority. The CPU recovers from the soft error and restarts from the instruction executed before the error occurred, taking about 90 cycles.

#### 3.2.2. Soft Error Recovery of the Rollback Control Module
To ensure the RCM itself is robust against soft errors, we applied the EDA tool to generate soft error-detecting logic circuits for the RCM. We also developed an error reset module (ERM) to handle soft errors in the RCM and other modules. If a soft error occurs in the RCM, the ERM issues an RCM reset signal and sends an RCM soft error exception signal to the CPU. The CPU then executes a routine to clear the effects of the soft error and restarts from the appropriate instruction, taking about 70 cycles.

## 4. Evaluation Results
Testing on a 32-bit RISC microcontroller and EEMBC benchmarks showed that the proposed architecture had area and frequency overheads of under 59% and 9%, respectively. Simulations demonstrated that the MTBF for random logic circuits and RAM increased by 30 and 1.34 times, respectively, compared to the original microcontroller.

## 5. Related Work
[Discuss related work and how it compares to the proposed architecture.]

## 6. Conclusion
[Summarize the key contributions and potential future work.]

---

**Note:** The figures and detailed descriptions of the architecture, including the EDA tool, RCM, and ERM, should be included in the respective sections for a comprehensive understanding.