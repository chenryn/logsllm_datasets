    :::
2.  点[应用]{.guibutton}。
    配置了虚拟机的虚拟 CPU。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    对虚拟 CPU 设置的更改仅在重启虚拟机后生效。
    :::
:::
::: itemizedlist
**其他资源：**
-   有关使用命令行界面管理 vCPU 的详情，请参考
    ["使用命令行界面添加和删除虚拟
    CPU"一节](#optimizing-virtual-machine-performance-in-rhel_monitoring-and-managing-system-status-and-performance.html#adding-and-removing-virtual-cpus-using-the-command-line-interface_optimizing-virtual-machine-cpu-performance "使用命令行界面添加和删除虚拟 CPU"){.xref}。
:::
:::
::: section
::: titlepage
## []{#optimizing-virtual-machine-performance-in-rhel_monitoring-and-managing-system-status-and-performance.html#configuring-numa-in-a-virtual-machine_optimizing-virtual-machine-cpu-performance}在虚拟机中配置 NUMA {.title}
:::
以下方法可用于在 RHEL 8
主机上配置虚拟机(VM)的非一致性内存访问(NUMA)设置。
::: itemizedlist
**先决条件**
-   主机是一个与 NUMA 兼容的机器。要检测是否如此，请使用
    `virsh nodeinfo`{.literal} 命令并查看 `NUMA 单元：`{.literal}
    ``` literallayout
    # virsh nodeinfo
    CPU model:           x86_64
    CPU(s):              48
    CPU frequency:       1200 MHz
    CPU socket(s):       1
    Core(s) per socket:  12
    Thread(s) per core:  2
    NUMA cell(s):        2
    Memory size:         67012964 KiB
    ```
    如果行的值为 2 或更高，则主机与 NUMA 兼容。
:::
::: title
**流程**
:::
为便于使用，您可以使用自动化实用程序和服务设置虚拟机的 NUMA
配置。但是，手动 NUMA 设置可能会显著提高性能。
[**自动方法**]{.strong}
::: itemizedlist
-   将虚拟机的 NUMA 策略设置为 `Preferred`{.literal}。例如，对于
    [*testguest5*]{.emphasis} 虚拟机要这样做：
    ``` literallayout
    # virt-xml testguest5 --edit --vcpus placement=auto
    # virt-xml testguest5 --edit --numatune mode=preferred
    ```
-   在主机上启用自动 NUMA 均衡：
    ``` literallayout
    # echo 1 > /proc/sys/kernel/numa_balancing
    ```
-   使用 `numad`{.literal} 命令，自动将 VM CPU 与内存资源匹配。
    ``` literallayout
    # numad
    ```
:::
[**手动方法**]{.strong}
::: orderedlist
1.  将特定 vCPU 线程固定到特定主机 CPU 或者 CPU 范围。在非 NUMA
    主机和虚拟机上也可以这样做，我们推荐您使用一种安全的方法来提高 vCPU
    性能。
    例如，以下命令将 [*testguest6*]{.emphasis} 虚拟机的 vCPU 线程 0 到 5
    分别固定到主机 CPU 1、3、5、7、9 和 11：
    ``` literallayout
    # virsh vcpupin testguest6 0 1
    # virsh vcpupin testguest6 1 3
    # virsh vcpupin testguest6 2 5
    # virsh vcpupin testguest6 3 7
    # virsh vcpupin testguest6 4 9
    # virsh vcpupin testguest6 5 11
    ```
    之后，您可以验证操作是否成功：
    ``` literallayout
    # virsh vcpupin testguest6
    VCPU   CPU Affinity
    ----------------------
    0      1
    1      3
    2      5
    3      7
    4      9
    5      11
    ```
2.  固定 vCPU 线程后，您还可以将与指定虚拟机关联的 QEMU
    进程线程固定到特定的主机 CPU 或 CPU 范围。例如：以下命令将
    [*testguest6*]{.emphasis} 的 QEMU 进程线程 固定到 CPU 13 和
    15，确认成功：
    ``` literallayout
    # virsh emulatorpin testguest6 13,15
    # virsh emulatorpin testguest6
    emulator: CPU Affinity
    ----------------------------------
           *: 13,15
    ```
3.  最后，您也可以指定将哪些主机 NUMA
    节点专门分配给特定的虚拟机。这可提高虚拟机 vCPU
    的主机内存用量。例如，以下命令将 [*testguest6*]{.emphasis}
    设置为使用主机 NUMA 节点 3 到 5，确认成功：
    ``` literallayout
    # virsh numatune testguest6 --nodeset 3-5
    # virsh numatune testguest6
    ```
:::
::: itemizedlist
**其它资源**
-   请注意，为了获得最佳性能结果，建议您使用以上列出的所有手动调优方法。有关此类配置的示例，请参阅
    ["vCPU
    性能调整场景示例"一节](#optimizing-virtual-machine-performance-in-rhel_monitoring-and-managing-system-status-and-performance.html#sample-vcpu-performance-tuning-scenario_optimizing-virtual-machine-cpu-performance "vCPU 性能调整场景示例"){.xref}。
-   要查看系统当前的 NUMA 配置，您可以使用 `numastat`{.literal}
    实用程序。有关使用 `numastat`{.literal} 的详情，请参考
    ["虚拟机性能监控工具"一节](#optimizing-virtual-machine-performance-in-rhel_monitoring-and-managing-system-status-and-performance.html#virtual-machine-performance-monitoring-tools_optimizing-virtual-machine-performance-in-rhel "虚拟机性能监控工具"){.xref}。
-   目前无法在 IBM Z 主机上执行 NUMA 调整。如需更多信息，请参阅 [IBM Z
    上的虚拟化与 AMD64 和
    Intel64](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_virtualization/getting-started-with-virtualization-in-rhel-8-on-ibm-z_configuring-and-managing-virtualization#how-virtualization-on-ibm-z-differs-from-amd64-and-intel64_getting-started-with-virtualization-in-rhel-8-on-ibm-z){.link}
    的不同。
:::
:::
::: section
::: titlepage
## []{#optimizing-virtual-machine-performance-in-rhel_monitoring-and-managing-system-status-and-performance.html#sample-vcpu-performance-tuning-scenario_optimizing-virtual-machine-cpu-performance}vCPU 性能调整场景示例 {.title}
:::
为了获得最佳 vCPU 性能，红帽建议您搭配手动
`vcpupin`{.literal}、`emulatorpin`{.literal} 和 `numatune`{.literal}
设置，如以下场景中所示：
::: itemizedlist
**起始场景**
-   您的主机有以下与硬件相关的信息：
    ::: itemizedlist
    -   2 个 NUMA 节点
    -   每个节点上的 3 个 CPU 内核
    -   每个内核有 2 个线程
    :::
    此类机器 `virsh nodeinfo`{.literal} 的输出类似于：
    ``` literallayout
    # virsh nodeinfo
    CPU model:           x86_64
    CPU(s):              12
    CPU frequency:       3661 MHz
    CPU socket(s):       2
    Core(s) per socket:  3
    Thread(s) per core:  2
    NUMA cell(s):        2
    Memory size:         31248692 KiB
    ```
-   您打算将现有虚拟机修改为具有 8 个 vCPU，这意味着它不适用于单个 NUMA
    节点。
    因此，您应该在每个 NUMA 节点上分发 4 个 vCPU，并使 vCPU
    拓扑尽可能与主机拓扑相似。这意味着，作为给定物理 CPU
    的同级线程运行的 vCPU
    应该固定到同一内核中的主机线程。详情请查看以下[*解决方案*]{.emphasis}:
:::
::: orderedlist
**解决方案**
1.  获取主机拓扑的信息：
    ``` literallayout
    # virsh capabilities
    ```
    输出应包含类似如下的部分：
    ``` programlisting
          15624346
          3906086
          0
          0
          15624346
          3906086
          0
          0
    ```
2.  [**可选：**]{.strong} 使用
    [适用的工具和实用程序](#optimizing-virtual-machine-performance-in-rhel_monitoring-and-managing-system-status-and-performance.html#virtual-machine-performance-monitoring-tools_optimizing-virtual-machine-performance-in-rhel "虚拟机性能监控工具"){.link}
    测试虚拟机的性能。
3.  在主机上设置并挂载 1 GiB 巨页：
    ::: orderedlist
    1.  在主机的内核命令行中添加以下行：
        ``` literallayout
        default_hugepagesz=1G hugepagesz=1G
        ```
    2.  使用以下内容创建
        `/etc/systemd/system/hugetlb-gigantic-pages.service`{.literal}
        文件：
        ``` literallayout
        [Unit]
        Description=HugeTLB Gigantic Pages Reservation
        DefaultDependencies=no
        Before=dev-hugepages.mount
        ConditionPathExists=/sys/devices/system/node
        ConditionKernelCommandLine=hugepagesz=1G
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/etc/systemd/hugetlb-reserve-pages.sh
        [Install]
        WantedBy=sysinit.target
        ```
    3.  使用以下内容创建
        `/etc/systemd/hugetlb-reserve-pages.sh`{.literal} 文件：
        ``` literallayout
        #!/bin/sh
        nodes_path=/sys/devices/system/node/
        if [ ! -d $nodes_path ]; then
        	echo "ERROR: $nodes_path does not exist"
        	exit 1
        fi
        reserve_pages()
        {
        	echo $1 > $nodes_path/$2/hugepages/hugepages-1048576kB/nr_hugepages
        }
        reserve_pages 4 node1
        reserve_pages 4 node2
        ```
        这会从 [*node1*]{.emphasis} 保留 4 个 1GiB 巨页，并在
        [*node2*]{.emphasis} 中保留 4 个 1GiB 巨页。
    4.  使在上一步中创建的脚本可执行：
        ``` literallayout
        # chmod +x /etc/systemd/hugetlb-reserve-pages.sh
        ```
    5.  在引导时启用巨页保留：
        ``` literallayout
        # systemctl enable hugetlb-gigantic-pages
        ```
    :::
4.  使用 `virsh edit`{.literal} 命令来编辑您要优化的虚拟机的 XML
    配置，在本例中为 [*super-VM*]{.emphasis} ：
    ``` literallayout
    # virsh edit super-vm
    ```
5.  用以下方法调整虚拟机的 XML 配置：
    ::: orderedlist
    1.  将虚拟机设置为使用 8 个静态 vCPU。使用 ``{.literal}
        元素来执行此操作。
    2.  将每个 vCPU 线程固定到拓扑中镜像的对应主机 CPU
        线程。为此，请使用 ` 部分中的 `{.literal}
        元素``{=html}。
        请注意，如上面的 `virsh 功能`{.literal} 实用程序所示，主机 CPU
        线程不会在各自的内核中按顺序排序。此外，vCPU 线程应固定到同一
        NUMA 节点上提供的最高可用主机核心集合。有关表插图，请参见下面
        [**的附加资源**]{.strong} 部分。
        步骤 a. 和 b. 的 XML 配置类似：
        ``` programlisting