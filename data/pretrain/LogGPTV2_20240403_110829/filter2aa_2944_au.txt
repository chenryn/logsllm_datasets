An example of a CORS error when trying to make a cross-origin request that violates the same-origin 
policy
149
Allowing cross-domain requests with CORS
Web browser
api.example.com
SOP +
CORS
Preﬂight request
JavaScript from
example.org tries to make
a non-simple request to
api.example.com.
Rather than blocking the request,
the browser makes a preﬂight
request to the server to check if
it should be allowed.
Web browser
api.example.com
SOP +
CORS
Access-Control-
Allow-Origin:
example.org
If the API returns a CORS header
allowing requests from this origin,
then the original request is performed.
Web browser
api.example.com
SOP +
CORS
Original request
Web browser
api.example.com
SOP +
CORS
Otherwise, the request is blocked.
JavaScript
client
example.org
JavaScript
client
example.org
JavaScript
client
example.org
JavaScript
client
example.org
Figure 5.2
When a script tries to make a cross-origin request that would be blocked by 
the SOP, the browser makes a CORS preflight request to the target server to ask if the 
request should be permitted. If the server agrees, and any conditions it specifies are 
satisfied, then the browser makes the original request and lets the script see the 
response. Otherwise, the browser blocks the request.
150
CHAPTER 5
Modern token-based authentication
5.1.2
CORS headers
The CORS headers that the server can send in the response are summarized in table 5.1.
You can learn more about CORS headers from Mozilla’s excellent article at https://
developer.mozilla.org/en-US/docs/Web/HTTP/CORS. The Access-Control-Allow-
Origin and Access-Control-Allow-Credentials headers can be sent in the response to
the preflight request and in the response to the actual request, whereas the other
headers are sent only in response to the preflight request, as indicated in the second
column where “Actual” means the header can be sent in response to the actual request,
“Preflight” means it can be sent only in response to a preflight request, and “Both”
means it can be sent on either.
TIP
If you return a specific allowed origin in the Access-Control-Allow-
Origin response header, then you should also include a Vary: Origin header
to ensure the browser and any network proxies only cache the response for
this specific requesting origin.
Table 5.1
CORS response headers
CORS header
Response
Description
Access-Control-Allow-
Origin
Both
Specifies a single origin that should be allowed 
access, or else the wildcard * that allows access 
from any origin.
Access-Control-Allow-
Headers
Preflight
Lists the non-simple headers that can be included on 
cross-origin requests to this server. The wildcard 
value * can be used to allow any headers.
Access-Control-Allow-
Methods
Preflight
Lists the HTTP methods that are allowed, or the 
wildcard * to allow any method.
Access-Control-Allow-
Credentials
Both
Indicates whether the browser should include cre-
dentials on the request. Credentials in this case 
means browser cookies, saved HTTP Basic/Digest 
passwords, and TLS client certificates. If set to 
true, then none of the other headers can use a 
wildcard value.
Access-Control-Max-Age
Preflight
Indicates the maximum number of seconds that the 
browser should cache this CORS response. Brows-
ers typically impose a hard-coded upper limit on this 
value of around 24 hours or less (Chrome currently 
limits this to just 10 minutes). This only applies to 
the allowed headers and allowed methods.
Access-Control-Expose-
Headers
Actual
Only a small set of basic headers are exposed from 
the response to a cross-origin request by default. 
Use this header to expose any nonstandard headers 
that your API returns in responses.
151
Allowing cross-domain requests with CORS
Because the Access-Control-Allow-Origin header allows only a single value to be speci-
fied, if you want to allow access from more than one origin, then your API server
needs to compare the Origin header received in a request against an allowed set and,
if it matches, echo the origin back in the response. If you read about Cross-Site Script-
ing (XSS) and header injection attacks in chapter 2, then you may be worried about
reflecting a request header back in the response. But in this case, you do so only after
an exact comparison with a list of trusted origins, which prevents an attacker from
including untrusted content in that response.
5.1.3
Adding CORS headers to the Natter API
Armed with your new knowledge of how CORS works, you can now add appropriate
headers to ensure that the copy of the UI running on a different origin can access the
API. Because cookies are considered a credential by CORS, you need to return an
Access-Control-Allow-Credentials: true header from preflight requests; other-
wise, the browser will not send the session cookie. As mentioned in the last section,
this means that the API must return the exact origin in the Access-Control-Allow-
Origin header and cannot use any wildcards.
TIP
Browsers will also ignore any Set-Cookie headers in the response to a CORS
request unless the response contains Access-Control-Allow-Credentials:
true. This header must therefore be returned on responses to both preflight
requests and the actual request for cookies to work. Once you move to non-
cookie methods later in this chapter, you can remove these headers.
To add CORS support, you’ll implement a simple filter that lists a set of allowed ori-
gins, shown in listing 5.1. For all requests, if the Origin header in the request is in the
allowed list then you should set the basic Access-Control-Allow-Origin and Access-
Control-Allow-Credentials headers. If the request is a preflight request, then the
request can be terminated immediately using the Spark halt() method, because no
further processing is required. Although no specific status codes are required by
CORS, it is recommended to return a 403 Forbidden error for preflight requests from
unauthorized origins, and a 204 No Content response for successful preflight requests.
You should add CORS headers for any headers and request methods that your API
requires for any endpoint. As CORS responses relate to a single request, you could
vary the response for each API endpoint, but this is rarely done. The Natter API sup-
ports GET, POST, and DELETE requests, so you should list those. You also need to list
the Authorization header for login to work, and the Content-Type and X-CSRF-Token
headers for normal API calls to function.
 For non-preflight requests, you can let the request proceed once you have added
the basic CORS response headers. To add the CORS filter, navigate to src/main/
java/com/manning/apisecurityinaction and create a new file named CorsFilter.java
in your editor. Type in the contents of listing 5.1, and click Save.
152
CHAPTER 5
Modern token-based authentication
package com.manning.apisecurityinaction;
import spark.*;
import java.util.*;
import static spark.Spark.*;
class CorsFilter implements Filter {
  private final Set allowedOrigins;
  CorsFilter(Set allowedOrigins) {
    this.allowedOrigins = allowedOrigins;
  }
  @Override
  public void handle(Request request, Response response) {
    var origin = request.headers("Origin");
    if (origin != null && allowedOrigins.contains(origin)) {   
      response.header("Access-Control-Allow-Origin", origin);  
      response.header("Access-Control-Allow-Credentials",      
          "true");                                             
      response.header("Vary", "Origin");                       
    }
    if (isPreflightRequest(request)) {
      if (origin == null || !allowedOrigins.contains(origin)) {   
        halt(403);                                                
      }
CORS and SameSite cookies
SameSite cookies, described in chapter 4, are fundamentally incompatible with CORS.
If a cookie is marked as SameSite, then it will not be sent on cross-site requests
regardless of any CORS policy and the Access-Control-Allow-Credentials header is
ignored. An exception is made for origins that are sub-domains of the same site; for
example, www.example.com can still send requests to api.example.com, but genuine
cross-site requests to different registerable domains are disallowed. If you need to
allow cross-site requests with cookies, then you should not use SameSite cookies.
A complication came in October 2019, when Google announced that its Chrome web
browser would start marking all cookies as SameSite=lax by default with the release
of Chrome 80 in February 2020. (At the time of writing the rollout of this change has
been temporarily paused due to the COVID-19 coronavirus pandemic.) If you wish to
use cross-site cookies you must now explicitly opt-out of SameSite protections by
adding the SameSite=none and Secure attributes to those cookies, but this can
cause problems in some web browsers (see https://www.chromium.org/updates/
same-site/incompatible-clients). Google, Apple, and Mozilla are all becoming more
aggressive in blocking cross-site cookies to prevent tracking and other security or pri-
vacy issues. It’s clear that the future of cookies will be restricted to HTTP requests
within the same site and that alternative approaches, such as those discussed in the
rest of this chapter, must be used for all other cases.
Listing 5.1
CORS filter
If the origin is 
allowed, then 
add the basic 
CORS headers 
to the response.
If the origin 
is not allowed, 
then reject the 
preflight request.
153
Allowing cross-domain requests with CORS
      response.header("Access-Control-Allow-Headers",
          "Content-Type, Authorization, X-CSRF-Token");
      response.header("Access-Control-Allow-Methods",
          "GET, POST, DELETE");
      halt(204);    
    }
  }
  private boolean isPreflightRequest(Request request) {
    return "OPTIONS".equals(request.requestMethod()) &&               
      request.headers().contains("Access-Control-Request-Method");    
  }
}
To enable the CORS filter, you need to add it to the main method as a Spark before()
filter, so that it runs before the request is processed. CORS preflight requests should
be handled before your API requests authentication because credentials are never
sent on a preflight request, so it would always fail otherwise. Open the Main.java file in
your editor (it should be right next to the new CorsFilter.java file you just created) and
find the main method. Add the following call to the main method right after the rate-
limiting filter that you added in chapter 3:
var rateLimiter = RateLimiter.create(2.0d);   
before((request, response) -> {               
    if (!rateLimiter.tryAcquire()) {          
        halt(429);                            
    }
});
before(new CorsFilter(Set.of("https://localhost:9999")));     
This ensures the new UI server running on port 9999 can make requests to the API.
If you now restart the API server on port 4567 and retry making requests from the
alternative UI on port 9999, you’ll be able to login. However, if you now try to create
a space, the request is rejected with a 401 response and you’ll end up back at the
login page!
TIP
You don’t need to list the original UI running on port 4567, because this
is served from the same origin as the API and won’t be subject to CORS
checks by the browser. 
The reason why the request is blocked is due to another subtle detail when enabling
CORS with cookies. In addition to the API returning Access-Control-Allow-Credentials
on the response to the login request, the client also needs to tell the browser that it
expects credentials on the response. Otherwise the browser will ignore the Set-Cookie
header despite what the API says. To allow cookies in the response, the client must set
the credentials field on the fetch request to include. Open the login.js file in your
For permitted preflight 
requests, return a 204 
No Content status.
Preflight requests use the HTTP OPTIONS method
and include the CORS request method header.
The existing rate-
limiting filter
The new 
CORS filter
154
CHAPTER 5
Modern token-based authentication
editor and change the fetch request in the login function to the following. Save the
file and restart the UI running on port 9999 to test the changes:
fetch(apiUrl + '/sessions', {
    method: 'POST',
    credentials: 'include',    
    headers: {
        'Content-Type': 'application/json',
        'Authorization': credentials
    }
})
If you now log in again and repeat the request to create a space, it will succeed because
the cookie and CSRF token are finally present on the request.
5.2
Tokens without cookies
With a bit of hard work on CORS, you’ve managed to get cookies working from the
new site. Something tells you that the extra work you needed to do just to get cook-
ies to work is a bad sign. You’d like to mark your cookies as SameSite as a defense in
depth against CSRF attacks, but SameSite cookies are incompatible with CORS.
Apple’s Safari browser is also aggressively blocking cookies on some cross-site requests
for privacy reasons, and some users are doing this manually through browser set-
tings and extensions. So, while cookies are still a viable and simple solution for web
clients on the same domain as your API, the future looks bleak for cookies with
cross-origin clients. You can future-proof your API by moving to an alternative token
storage format.
 Cookies are such a compelling option for web-based clients because they provide
the three components needed to implement token-based authentication in a neat pre-
packaged bundle (figure 5.3):
Pop quiz
1
Given a single-page app running at https:/ /www.example.com/app and a cookie-
based API login endpoint at https:/ /api.example.net/login, what CORS headers
in addition to Access-Control-Allow-Origin are required to allow the cookie
to be remembered by the browser and sent on subsequent API requests?
a
Access-Control-Allow-Credentials: true only on the actual response.
b
Access-Control-Expose-Headers: Set-Cookie on the actual response.
c
Access-Control-Allow-Credentials: true only on the preflight response.
d
Access-Control-Expose-Headers: Set-Cookie on the preflight response.
e
Access-Control-Allow-Credentials: true on the preflight response and
Access-Control-Allow-Credentials: true on the actual response.
The answer is at the end of the chapter.
Set the credentials field to 
“include” to allow the API to 
set cookies on the response.
155
Tokens without cookies
 A standard way to communicate tokens between the client and the server, in the
form of the Cookie and Set-Cookie headers. Browsers will handle these headers
for your clients automatically, and make sure they are only sent to the correct site.
 A convenient storage location for tokens on the client, that persists across page
loads (and reloads) and redirections. Cookies can also survive a browser restart
and can even be automatically shared between devices, such as with Apple’s
Handoff functionality.1
 Simple and robust server-side storage of token state, as most web frameworks
support cookie storage out of the box just like Spark.
To replace cookies, you’ll therefore need a replacement for each of these three
aspects, which is what this chapter is all about. On the other hand, cookies come with
unique problems such as CSRF attacks that are often eliminated by moving to an alter-
native scheme.
5.2.1
Storing token state in a database
Now that you’ve abandoned cookies, you also lose the simple server-side storage
implemented by Spark and other frameworks. The first task then is to implement a
replacement. In this section, you’ll implement a DatabaseTokenStore that stores
token state in a new database table in the existing SQL database.
1 https://support.apple.com/en-gb/guide/mac-help/mchl732d3c0a/mac
Web browser client
API server
Response
Token store
Cookie
Set-Cookie
Cookie jar
Web browsers store
cookies automatically
in a cookie jar.
Cookies are communicated
between client and server
using standard headers.
Server frameworks
automatically persist
cookie state in a
backend store.
Request
Figure 5.3
Cookies provide the three key components of token-based authentication: 
client-side token storage, server-side state, and a standard way to communicate cookies 
between the client and server with the Set-Cookie and Cookie headers.
156
CHAPTER 5
Modern token-based authentication
A token is a simple data structure that should be independent of dependencies on
other functionality in your API. Each token has a token ID and a set of attributes asso-
ciated with it, including the username of the authenticated user and the expiry time
of the token. A single table is enough to store this structure, as shown in listing 5.2.
The token ID, username, and expiry are represented as individual columns so that
they can be indexed and searched, but any remaining attributes are stored as a JSON
object serialized into a string (varchar) column. If you needed to lookup tokens
based on other attributes, you could extract the attributes into a separate table, but in
most cases this extra complexity is not justified. Open the schema.sql file in your edi-
tor and add the table definition to the bottom. Be sure to also grant appropriate per-
missions to the Natter database user.
CREATE TABLE tokens(
    token_id VARCHAR(100) PRIMARY KEY,
    user_id VARCHAR(30) NOT NULL,      
    expiry TIMESTAMP NOT NULL,
    attributes VARCHAR(4096) NOT NULL     
);
GRANT SELECT, INSERT, DELETE ON tokens TO natter_api_user;    
With the database schema created, you can now implement the DatabaseTokenStore
to use it. The first thing you need to do when issuing a new token is to generate a fresh