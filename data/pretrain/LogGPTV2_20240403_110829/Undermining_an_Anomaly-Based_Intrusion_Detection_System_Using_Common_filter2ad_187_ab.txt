e
t
e
d
f
o
e
z
i
S
12
11
10
9
8
7
6
5
4
3
2
1
1
2
4
3
Size of minimal−foreign−sequence anomaly
5
6
7
8
9
10
Fig. 1. The detector coverage (detection map) for stide; A comparison of the size of
the detector window (rows) with the ability to detect diﬀerent sizes of minimal foreign
sequence (columns). A star indicates detection.
For stide to detect a minimal foreign sequence, it is imperative that the size of
the detector window is set to be equal to or larger than the size of the minimal
foreign sequence. The consequence of this observation can be seen in Figure
1 which shows stide’s detection coverage with respect to the minimal foreign
sequence. This coverage map for stide, although previously presented in [19],
is shown again here as an aid to the reader’s intuition for the coverage map’s
essential role in the subversion scheme.
The graph in the ﬁgure plots the size of the minimal foreign sequence on
the x-axis and the size of the detector window on the y-axis. Each star marks
the size of the detector window that successfully detected a minimal foreign
sequence whose corresponding size is marked on the x-axis. The term detect for
stide means that the minimal foreign sequence must have caused as at least
one sequence mismatch. The diagonal line shows the relationship between the
detector window size and the size of the minimal foreign sequence, a relationship
that can be described by the function, y = x. The ﬁgure also shows a region
of blindness in the detection capabilities of stide with respect to the minimal
foreign sequence. This means that it is possible for a foreign sequence to exist
in the data in such a way as to be completely invisible to stide. This weakness
will presently be shown to be exploitable by an attacker.
60
K.M.C. Tan, K.S. Killourhy, and R.A. Maxion
4 Deploying Exploits and Sensors
At this point of the study, the ﬁrst step in undermining an anomaly detector
(see Table 1) has been completed; the detection coverage for stide has been
established, and it was observed that the anomaly detector exhibited occasions
of detection blindness with respect to the detection of minimal foreign sequences.
The following is a summary of the procedure that was performed in order
to address the remaining two items in the method for subverting an anomaly
detector listed in Table 1. The remaining two items are where and how an attack
manifests in data, and how the manifestation of exploits can be modiﬁed to
hide the presence of those exploits in the regions of blindness identiﬁed by the
detection coverage for stide.
1. Install the sensor that provides the anomaly detector with the relevant type
of data. In the present work, the sensor is the IMMSEC kernel patch for
the Linux 2.2 kernel [18]. The kernel patch records to a ﬁle the system calls
made by a pre-determined set of processes.
2. Download the passwd and traceroute exploits and determine the corre-
sponding system programs that these exploits misuse.
3. Execute the system program under normal conditions to obtain a record
of normal usage, to obtain normal data. An account of what is considered
normal conditions and normal usage of the system programs that correspond
to both exploits is described in section 5.2.
4. Deploy the exploits against the host system to obtain the data recording the
occurrence of the attacks.
5. Identify the precise manifestation of the attacks in the sensor data.
6. Using the normal data obtained from step 3, and the intrusive data obtained
from step 4, deploy stide to determine if the anomaly detector is capable of
detecting the unmodiﬁed exploits that were simply downloaded, compiled
and executed. This is performed in order to establish the eﬀectiveness of the
subversion process. If stide is able to detect the unmodiﬁed exploits but not
the modiﬁed exploits, then the subversion procedure has been eﬀective.
7. Using information concerning the kind of events that stide is blind to, modify
the attacks and show that it is possible to make attacks that were once
detectable by stide, undetectable for detector window sizes one through six.
5 Where and How an Attack Manifests in the Data
This section addresses the second item in the list of requirements for undermining
an anomaly detector – establishing where and how an attack manifests in sensor
data (see Table 1) – by selecting two common exploits, deploying them, and
establishing how and where they manifest in the sensor data. Steps 2 to 5 of the
method laid out above are covered by this section.
Undermining an Anomaly-Based Intrusion Detection System
61
5.1 Description and Rationale for the Exploits Chosen
The attacks selected for this study are examples of those that stide is designed
to detect, i.e., attacks that exploit privileged UNIX system programs. UNIX
system programs typically run with elevated privileges in order to perform tasks
that require the authority of the system administrator – privileges that ordinary
users are not typically aﬀorded. The authors of stide have predominantly ap-
plied the detector towards the detection of abnormal behavior in such privileged
system programs, because exploiting vulnerabilities to misuse privileged system
programs can potentially bestow those extra privileges on an attacker [6].
Two attacks were chosen arbitrarily out of several that fulﬁll the requirement
of exploiting UNIX system programs. The two attacks chosen will be referred
to as the passwd and traceroute exploits. The passwd exploit takes advantage
of a race condition between the Linux kernel and the passwd system program;
the traceroute exploit takes advantage of a vulnerability in the traceroute
system program.
passwd is a system program used to change a user’s password [3]. The pro-
gram allows an ordinary user to provide his or her current password, along with
a new password. It then updates a system-wide database of the user’s informa-
tion so that the database contains the new password. The system-wide database
is commonly referred to as the /etc/passwd or the /etc/shadow ﬁle. A user
does not normally have permission to edit this ﬁle, so passwd must run with
root privileges in order to modify that ﬁle. The exploit that misuses the passwd
system program does so by employing a race condition that is present in the
Linux kernel to debug privileged processes.
Normally, the passwd system process performs only a restricted set of actions
that consists of editing the /etc/passwd and/or the /etc/shadow ﬁle. However,
the passwd system process can be made to do more, because of a race condition
in the Linux kernel which allows an unprivileged process to debug a system
process. Using an unprivileged process, an attacker can alter or “debug” the
passwd system process and force it to execute a command shell, granting the
attacker elevated privileges.1 Details of race conditions in the Linux kernel are
given in [13] and [17]. The passwd exploit was obtained from [15].
The traceroute network diagnostic utility is a system program that is usu-
ally employed by normal users to gather information about the availability and
latency of the network between two hosts [7]. To accomplish this task, the
traceroute system program must have unrestricted access to the network inter-
face, a resource provided only to privileged system programs. However, a logic
error in the traceroute system program allows an attacker to corrupt the mem-
ory of the process by specifying multiple network gateways on the command line
[16]. The traceroute exploit uses this memory corruption to redirect the pro-
cess to instructions that execute a command shell with the elevated privileges
of the traceroute system program [8]. More detail on this memory corruption
vulnerability is provided in [16]. The traceroute exploit was obtained from [8].
1 In industry parlance, the instructions injected by the exploit are termed “shellcode”,
and the shell in which an intruder gains elevated privileges is a “rootshell.”
62
K.M.C. Tan, K.S. Killourhy, and R.A. Maxion
Several key features make certain attacks or exploits likely candidates for
subverting sequence-based anomaly detectors such as stide. The subversion tech-
nique presented in this paper is more likely to be eﬀective when:
– the vulnerability exploited involves a system program that runs with elevated
(root) privileges;
– the vulnerability allows an attacker to take control of the execution of the
system program, giving the attacker the ability to choose the system kernel
calls or instructions that are issued by the system program;
– the attack does not cause the system program to behave anomalously (e.g.
produce an error message in response to an invalid input supplied by the
attacker) before the attack/attacker can take control of the execution of the
system program;
– the system kernel calls occurring after the “point of seizure”, i.e., the point
in the data stream at which the attacker ﬁrst takes control of the system
program, include any or all of execve, or open/write, or chmod, or chown,
or any other system kernel call that the attacker can use to eﬀect the attack.
5.2 Choice of Normal Data
It is unreasonable to expect an attacker to be able to identify and access the
precise segment, feature or attribute of the data that can be used to train an
anomaly detector. The time, patience and system privileges required to do so
may simply not be available to an attacker. However, since training data is
vital to the function of an anomaly detector, the attacker has to construct an
approximation of the training data that may have been used by the anomaly
detector if he or she desires to exploit a blind spot of the detector.
For anomaly detectors like stide, i.e., anomaly detectors that monitor sys-
tem programs, training data can be approximated more easily, because system
programs typically behave in very set and regimented ways. For example, the
passwd and traceroute system programs are limited in the number of ways that
they can be used, and as a result it is possible to make reasonable assumptions
about how these programs would be regularly invoked.
These assumptions may be aided by the wealth of easily accessible docu-
mentation that typically accompanies each system program, as well as by any
general knowledge or experience already acquired by the attacker. It is important
to note, however, that the success of this method for undermining stide relies on
the attacker’s being able to approximate normal usage of the system program.
To be successful at undermining stide, the attacker does not need to obtain
every possible example of a system program’s normal behavior. If the anomalous
manifestation of an exploit can already be crafted by an extremely reduced subset
of normal behavior, then it can only be expected that more examples of normal
behavior contribute to an increased number of ways with which to construct the
anomalous manifestation of the exploit.
For the passwd system program, normal data was obtained by executing the
passwd system program with no arguments, and then by following the instruc-
tions displayed by the program to input the user’s current password once, and
Undermining an Anomaly-Based Intrusion Detection System
63
then their new password twice. In other words passwd was invoked to expire an
old password and install a new one.
For the traceroute system program, normal data was obtained by executing
traceroute to acquire diagnostic information regarding the network connectiv-
ity between the local host and the Internet site nis.nsf.net. This site was
chosen because it is the simplest example of using traceroute, based on the
documentation provided with the program itself [7].
5.3 Establishing Attack Manifestations in Sensor Data
Two issues are addressed in this subsection. The ﬁrst is whether the attacks
embodied by the execution of the chosen exploits actually manifested in the
sensor data, and the second is whether the manifestation is an anomalous event
detectable by stide. Simply because an attack can be shown to manifest in the
sensor data does not necessarily mean that the manifestation is automatically
anomalous. It is necessary to establish that the manifestation of the exploits are
initially detectable by stide in order to show that any modiﬁcations to the same
exploits eﬀectively render them undetectable by the same detector.
Before proceeding any further it is necessary to deﬁne what is meant by the
term manifestation within the scope of this study. The manifestation of an attack
is deﬁned to be that sequence of system calls issued by the exploited/privileged
system program, and due to the presence and activity of the exploit. The re-
mainder of this section describes how the manifestations of the two exploits,
passwd and traceroute, were obtained.
passwd. The passwd exploit was downloaded from [15]; then it was compiled
and deployed. There were no parameters that needed to be set in order to execute
the exploit. The successful execution of the exploit was conﬁrmed by checking
that elevated privileges were indeed conferred.
The manifestation of the passwd exploit was determined manually. An in-
spection of the source code for both the passwd exploit and that portion of the
Linux kernel responsible for the race condition vulnerability identiﬁed the pre-
cise system calls that were attributable to the attack. The sequence of system
calls that comprise the manifestation of the attack embodied by the passwd
exploit is setuid, setgid, execve. Stide was then deployed, using the normal
data described above as training data, plus the test data comprised of the data
collected while the passwd exploit was executed. Stide was run with detector
window sizes ranging from 1 to 15. It was found that the attack was detectable
at all detector window sizes. More precisely, the attack was detectable by stide
because setuid, setgid, and execve were all foreign symbols. From the detec-
tion map of stide in Figure 1, it can be seen that stide is capable of detecting
size-1 foreign symbols at any detector window size.