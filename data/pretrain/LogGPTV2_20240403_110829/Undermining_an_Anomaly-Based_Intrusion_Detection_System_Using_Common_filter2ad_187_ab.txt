### Detector Coverage for Stide: Minimal Foreign Sequence Anomaly

To detect a minimal foreign sequence, the size of the detector window in Stide must be set to be equal to or larger than the size of the minimal foreign sequence. This relationship is illustrated in Figure 1, which shows Stide's detection coverage with respect to the size of the minimal foreign sequence.

**Figure 1.** The detector coverage (detection map) for Stide. A comparison of the size of the detector window (rows) with the ability to detect different sizes of minimal foreign sequences (columns). A star indicates successful detection.

- **X-axis:** Size of the minimal foreign sequence.
- **Y-axis:** Size of the detector window.
- **Stars:** Indicate the size of the detector window that successfully detected a minimal foreign sequence.
- **Diagonal Line (y = x):** Represents the relationship where the detector window size is equal to the size of the minimal foreign sequence.

The figure also highlights a region of blindness in Stide's detection capabilities, indicating that certain foreign sequences can remain undetected. This weakness can be exploited by an attacker.

### Deploying Exploits and Sensors

In this study, the first step in undermining an anomaly detector (as outlined in Table 1) has been completed. The detection coverage for Stide has been established, and it was observed that the detector exhibits occasional detection blindness for minimal foreign sequences. The following steps were performed to address the remaining items in the method for subverting an anomaly detector:

1. **Install the Sensor:**
   - The sensor used is the IMMSEC kernel patch for the Linux 2.2 kernel [18], which records system calls made by a predetermined set of processes.

2. **Download and Identify Exploits:**
   - Download the `passwd` and `traceroute` exploits.
   - Determine the corresponding system programs that these exploits misuse.

3. **Obtain Normal Data:**
   - Execute the system programs under normal conditions to record normal usage.
   - Detailed normal conditions and usage are described in Section 5.2.

4. **Deploy Exploits:**
   - Execute the exploits on the host system to record the data during the attacks.

5. **Identify Attack Manifestations:**
   - Analyze the sensor data to identify the precise manifestation of the attacks.

6. **Evaluate Stide's Detection Capabilities:**
   - Use the normal and intrusive data to determine if Stide can detect the unmodified exploits.
   - If Stide detects the unmodified exploits but not the modified ones, the subversion process is effective.

7. **Modify Attacks:**
   - Modify the attacks based on Stide's blind spots to make them undetectable for detector window sizes one through six.

### Where and How an Attack Manifests in the Data

This section addresses the second requirement for undermining an anomaly detector: establishing where and how an attack manifests in sensor data. The following steps (2 to 5) are covered in this section.

#### 5.1 Description and Rationale for the Exploits Chosen

The selected attacks exploit privileged UNIX system programs, which typically run with elevated (root) privileges. Two common exploits, `passwd` and `traceroute`, were chosen for this study.

- **Passwd Exploit:**
  - **Description:** Takes advantage of a race condition between the Linux kernel and the `passwd` system program.
  - **Normal Function:** Allows users to change their passwords.
  - **Exploit Mechanism:** Uses a race condition to debug privileged processes and execute a command shell, granting elevated privileges.
  - **Source:** Obtained from [15].

- **Traceroute Exploit:**
  - **Description:** Exploits a logic error in the `traceroute` system program.
  - **Normal Function:** Gathers network diagnostic information.
  - **Exploit Mechanism:** Corrupts memory to redirect the process to execute a command shell with elevated privileges.
  - **Source:** Obtained from [8].

#### 5.2 Choice of Normal Data

To undermine Stide, the attacker must approximate the training data used by the anomaly detector. For system programs like `passwd` and `traceroute`, this is feasible due to their predictable behavior.

- **Passwd:**
  - Normal data obtained by executing `passwd` to change a password.
  - Steps: Input current password, then new password twice.

- **Traceroute:**
  - Normal data obtained by executing `traceroute` to check network connectivity to `nis.nsf.net`.

#### 5.3 Establishing Attack Manifestations in Sensor Data

This subsection addresses whether the attacks manifest in the sensor data and whether these manifestations are detectable by Stide.

- **Manifestation Definition:**
  - The sequence of system calls issued by the exploited/privileged system program due to the presence and activity of the exploit.

- **Passwd Exploit:**
  - **System Calls:** `setuid`, `setgid`, `execve`.
  - **Detection:** Stide detected the attack at all detector window sizes because these system calls were foreign symbols.
  - **Observation:** From the detection map in Figure 1, Stide can detect size-1 foreign symbols at any detector window size.

By understanding and exploiting these weaknesses, an attacker can modify attacks to evade detection by Stide.