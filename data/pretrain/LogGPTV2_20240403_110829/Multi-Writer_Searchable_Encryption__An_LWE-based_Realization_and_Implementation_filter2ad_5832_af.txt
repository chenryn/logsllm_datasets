### 8.1 Experimental Results

#### 8.1.1 Initialization
The `Initialize` algorithm is responsible for finding a short basis of the lattice \(\Lambda^\perp(A)\) for an arbitrary matrix \(A \in \mathbb{Z}^{n \times m}\), which serves as the master secret key [4]. Figure 1 illustrates the time cost for generating a valid basis for different values of \(n\). The other related parameters are chosen according to the settings provided in Section 5.2. It is important to note that all selected parameters in our experiment are sufficient to ensure the LWE assumption holds. As shown in Figure 1, the average time cost increases with the growth of \(n\). For instance, it takes approximately 6.34 seconds to generate a pair of matrix and its corresponding lattice basis for \(n = 64\), and 750.62 seconds for \(n = 320\).

#### 8.1.2 Key Derivation
The `Key Derive` algorithm generates a private key for a given user, identified by their tag. In this experiment, we use a 1024-bit string to represent the tag, which is then transformed into a tag-matrix. Figure 2 shows the time cost for private key generation for 100 users over different basis sizes. This cost is proportional to the number of users. As seen, it takes about 22606 seconds and 35203 seconds to generate private keys for all 100 users when \(n = 256\) and \(n = 320\), respectively. Further evaluations in Section 8.2 demonstrate that our proposed batch optimization can significantly improve the efficiency of the private key generation.

#### 8.1.3 Data Encryption
Figure 3 depicts the time cost for encrypting 1000 keywords. This process involves \(2k + 3\) matrix multiplicative transformations and additions, two vector inner product operations, and two matrix multiplications. The cost is proportional to the number of keywords. From Figure 3, it takes approximately 467 seconds to encrypt 1000 keywords for \(n = 256\) and 698 seconds for \(n = 320\).

#### 8.1.4 Search
The search algorithm includes token generation and the search (token matching) operation. The user first uses her private key to generate a token for the keyword she wishes to search and sends it to the server. The server then performs the search by checking the token against the encrypted keywords. Figure 4 records the time of performing the search test over 1000 encrypted keywords, excluding the token generation cost, which is provided later in Table 4-b. The search operation only involves one inner product calculation for two vectors. As shown in Figure 4, it takes 13.4 ms to perform the search matching over 1000 keywords for \(n = 256\) and 16.98 ms for \(n = 320\).

### 8.2 Comparison with Prior Art

To highlight the advantages of our scheme, we compare the storage overhead and time cost with a basic LWE PEKS scheme proposed by Behnia et al. [6] (denoted as the basic scheme). The tags and keywords are randomly generated with a size of 128 bits. Note that the scheme in [6] was not implemented, and only simulated results on a high-end machine (with better capabilities than ours) were reported. Therefore, the comparison of time costs is based on the evaluation of our implementation and the simulated results from [6].

From a storage perspective, Table 4-(a) shows that the sizes of the private key and the token in our scheme and the basic scheme are comparable. For example, when \(n = 256\), the size of the private key and token are 547 MB and 113 KB in our scheme, while they are 519 MB and 110 KB in the basic scheme. However, the storage cost of the keyword ciphertext in our scheme is significantly smaller. For \(n = 256\), the size of a keyword ciphertext in our scheme is 113 KB, whereas it is 9086 KB in the basic scheme, which is about 80 times larger. This is due to our improved structure of the ciphertext, which removes redundant components.

Table 4: Comparison with the Scheme in [6]

| **Parameter** | **Basic Scheme** | **Our Scheme** |
|---------------|------------------|----------------|
| **Private Key (n = 256)** | 519 MB | 547 MB |
| **Private Key (n = 320)** | 942 MB | 988 MB |
| **Token (n = 256)** | 110 KB | 113 KB |
| **Token (n = 320)** | 148 KB | 151 KB |
| **Ciphertext (n = 256)** | 9086 KB | 113 KB |
| **Ciphertext (n = 320)** | 29692 KB | 151 KB |

In terms of time cost, we report the time cost of each algorithm in our scheme and compare it with the simulated cost in the basic scheme. From Figure 5, we observe that in the basic scheme, it takes almost 524 seconds and 1305 seconds to generate a pair of public keys for \(n = 256\) and \(n = 320\), respectively. The time to generate public/private key pairs is proportional to the number of users. In our scheme, it takes 728 seconds and 1667 seconds to generate the private key for the first user but averages 252.2 seconds and 365.2 seconds for 100 users. Compared to the average time spent, our scheme is 2 times and 3.5 times faster. This is because we use the `TrapGen` algorithm once to generate a short basis of the lattice and then use this basis to generate private keys for users. In contrast, the basic scheme requires repeating this process 100 times, leading to rapidly increasing costs with more users. Additionally, our `ExtBasis` algorithm shares the same input, the master key, allowing us to compute the extended basis in a batch, further improving performance.

Figure 5: Comparison of Setup and KeyGen

### 9 Conclusion

In this paper, we design and implement a lattice-based searchable encryption scheme based on LWE for multi-writer scenarios. Our scheme leverages the philosophy of identity-based encryption, enabling users to encrypt data directly via their identities, thus alleviating the key management bottleneck in LWE-based searchable encryption schemes. We conduct detailed correctness and security analyses and perform a series of experiments to evaluate the efficiency of each function. Future work will focus on reducing the size of the private key and improving the performance of key derivation and token generation. We will explore and design schemes constructed from Ring-LWE [24] or Module-LWE [20], which may further enhance efficiency but may introduce trade-offs in security.

### Acknowledgments

This work was supported in part by the Fundamental Research Funds for the Central Universities (No. 30918012204), the Research Grants Council of Hong Kong under Grant CityU 11276816, Grant CityU 11212717, and Grant CityU C1008-16G, in part by the Innovation and Technology Commission of Hong Kong under ITF Project ITS/168/17, and in part by the National Natural Science Foundation of China under Grant 61572412.

### References

[References listed as in the original text]

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.