considers the CALL bytecode to trigger its check for reentrancy.
Since, both send and call map to the same CALL bytecode,
Oyente generates several false alarms for reentrancy.
ATTACK. Fig. 2 shows a snippet of this vulnerability. The
attacker invokes the fallback function 4 transferring control
to the Wallet’s withdrawBalance function that uses the
call construct to send Ether to the caller, thereby invoking
the attacker’s fallback function again. This repeated invocation
siphons off Ether from the wallet’s balance. This attack can
be mitigated by swapping lines 6 and 7.
(II) UNCHECKED S E N D. Since Solidity allows only 2300 gas
upon a send call, a computation-heavy fallback function at
the receiving contract will cause the invoking send to fail.
Contracts that do not correctly handle such failed invocations
and allow modiﬁcations to the global state following the failed
send call, may incorrectly lead to loss of Ether [46].
ATTACK. Consider the example in Fig. 3. The send method
can fail, in which case the winner does not get the money, but
prizePaidOut is set to True. Thus, the condition in line 1 is
always False and the real winner can never claim the prize.
(III) FAILED S E N D. Best practices [16] suggest executing a
throw upon a failed send, in order to revert the transaction.
However, this paradigm can also put contracts at risk.
ATTACK. Consider Fig. 4, which describes a DAO that has
a certain number of investors, and is at full capacity. If a
new investor comes along and offers more money than the
current smallest investor, the DAO will pay the dividend to
the smallest, and put the new one in, increasing its capital
stake. However, an adversarial wallet with a fallback function
that takes more than 2300 gas to run, can lock this function
by merely investing enough to become the smallest investor.
When the adversarial wallet is next due to be booted off,
the contract will fail while returning the money and throw,
reverting all changes. This causes the wallet to still be a part
of the investors, thereby causing loss of money to the DAO.
(IV) INTEGER OVERFLOW/UNDERFLOW. Smart contracts
primarily operate upon arithmetic operations, such as iterating
over an array or computing balance amounts to send to a
participant. However, since Solidity is strongly typed, implicit
extending of signed or unsigned integers (e.g., from 8 byte
int to 16 byte int) to store the result
is not allowed,
4An anonymous function which is invoked if no matching method is found.
3
(1)
(2)
(3)
(1)
(2)
(3)
(4)
(5)
(6)
(1)
(2)
(3)
(4)
(5)
(6)
uint payout = balance/participants.length;
for (var i = 0; i ) { throw; }
dest.send(amt);
}
}
Fig. 7: Unchecked resources.
while (balance >
persons[payoutCursor Id ].deposit/100*115) {
payout = persons[payoutCursor Id ].deposit/100*115;
persons[payoutCursor Id].EtherAddress.send(payout);
balance -= payout;
payoutCursor Id ++;
}
Fig. 6: tx.origin bug [45].
Fig. 8: Variable mixup [47].
thereby causing all arithmetic operations to be susceptible to
overﬂow/underﬂow. There are over 20 different scenarios that
require careful handling of integer operations [20].
ATTACK. Fig. 5 highlights the severity of the problem.
Speciﬁcally, the type of i will be uint8, because this is the
smallest type that is available to hold the value 0. If there
are more than 255 participants, then at i=255, i++ will wrap
around and return to 0. This will cause the payout to be sent
to only the ﬁrst 255 participants. An attacker can ﬁll up these
spots and gain payouts at the expense of other investors.
(V) TRANSACTION STATE DEPENDENCE. Contract writers
can utilize transaction state variables, such as tx.origin
and tx.gasprice, for managing control ﬂow within a smart
contract. Since tx.gasprice is ﬁxed and is published upfront
to the miner, it cannot be exploited for proﬁt. However, use
of tx.origin for detecting the contract caller can make the
contract vulnerable. For example, if we have a chain of calls,
msg.sender points to the caller of the last function in the
call chain. Solidity’s tx.origin attribute allows a contract to
check the address that originally initiated the call chain, and
not just the last function call [35], [45].
ATTACK. Fig. 6 lists a snippet of code highlighting the bug.
UserWallet is the contract that a user uses to dispense money,
while the attacker deploys the AttackWallet contract. The
attack requires the user to invoke the AttackWallet, which is
possible with some social engineering or phishing techniques.
When the AttackWallet instantiates UserWallet and
invokes transfer, the tx.origin check at line 3 fails, since
the originator of the call chain is the owner. If tx.origin
were replaced by msg.sender, the check would succeed, and
prevent the malicious contract from siphoning off money.
B. Unfair Contracts
We found several examples of
syntactically correct
contracts that do not implement the desired logic. Additionally,
we also found examples of logically correct contracts that are
unfair due to the subtleties involved in multi-party interaction.
(I) ABSENCE OF LOGIC. Access to sensitive resources and
APIs must be guarded. For example, the selfdestruct is a
sensitive call that is used to kill a contract and send its balance
to a designated address. Thus, this call should be preceded
by a check that only the owner of the contract is allowed to
kill it. However, we observed that several contracts that used
selfdestruct did not have this check, potentially allowing
an adversary to receive money and kill the contract.
Consider another example as shown in Fig. 7. The contract
Wallet deﬁnes a function checkAndPay that
takes in a
solution to a puzzle, a destination address, and an amount
to send to that address,
if the solution is correct. It also
decrements the balance from the owner’s account. If the
balance in the wallet is less than the amount to be sent, then
the owner gets the solution to his puzzle and not pay anything
because send will fail. Thus, from the perspective of the
solution provider, this contract is unfair. The problem can be
easily remedied if there were appropriate checks before every
write to a shared resource. For example, the contract writer can
check if the the balance is less than the amount before line 4
and throw, thereby reverting the entire transaction and not
accessing the solution. In general, contract writers can adhere
to the following 3 step rule: check prerequisites, update state
variables, and perform actions.
(II) INCORRECT LOGIC. There are many syntactically legal
ways to achieve semantically unfair behavior. While there are
several real-world examples for this class, in the interest of
space we brieﬂy describe four representative bugs.
• Consider the example in Fig. 8. Notice that two similar
variables, payoutCursor Id
and payoutCursor Id are
initialized to 0. The ﬁrst one gets incremented, but the payouts
go to the second one (see line 2), which stays at zero. Hence,
the contract is not actually fair: the deposits of all investors
go to the 0th participant, possibly the person who created the
scheme, and everyone else gets nothing.
• HackersGold, another popular contract, recently had a bug
discovered [23] where the transferFrom function did not
correctly increment
the balance to be transferred to the
recipient. The bug involved a typographical error where += was
coded as =+, resulting in no increment in balance to be sent to
the receiver. We found 15 unique contracts in our data set that
include the same transferFrom functionality and hold over
$35, 000 worth of Ether with over 6500 transactions executed
between them. We continue to see several transactions even
months after the issue was advertised.
4
(1)
(2)
(3)
(4)
(1)
(2)
(3)
(4)
(1)
if (balances[msg.sender] = value &&
value = msg.value) throw;
uint bidIdx = a.bids.length++;
Bid b = a.bids[bidIdx];
b.bidder = msg.sender;
b.amount = msg.value;
...
BidPlaced(auctionId, b.bidder, b.amount);
return true;
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
(10)
(11)
Fig. 10: An unfair auction house contract (adapted from [2]).
}
• A recent attack [34] on the popular MultiSig wallet
contract allowed an attacker to change the owner of the wallet
by invoking the initWallet function in the context of the
previous owner, which did not check for double initialization
and was inadvertently made a public function. The attackers
were able to get away with over $30mn worth of Ether.
• Consider Fig. 9 that shows the exact same snippet in two
contracts [4] and [28]. However, the check to determine that
balance must be greater than value to allow the transfer is
incorrect in the ﬁrst one and correct in the other one.
(IV) LOGICALLY CORRECT BUT UNFAIR. Consider the
placeBid function from an auction house contract
[2]
in Fig. 10. By law, an auction in the U.S can be “with
reserve” or “without reserve”. If a seller is allowed to bid, the
auction is “with reserve”, which can affect the participants’
willingness (since the seller can artiﬁcially bid up the price).
Further, the seller may withdraw the property from the auction
anytime prior to it being sold. However, most importantly,
at such “with reserve” auctions, the seller may bid only if
that right is disclosed to the participants. This contract does
not disclose whether it
is “with reserve” or not, and the
knowledge is gleaned only by analyzing the source code. The
placeBid function places no restriction on bidders willing to
bid, indicating that sellers can also participate. A careful code
analysis reveals that the seller can indeed withdraw the item
before being sold. However, unsuspecting bidders, having no
expertise in analyzing code, may lose money due to artiﬁcially
increased bids or forfeit their participation fee. This contract is
thus unfair to participants, and indicates the subtleties involved
in multi-party interactions, where fairness is subjective.
C. Miner’s Inﬂuence
A miner in a permissionless blockchain can order the
transactions from his pool. A malicious miner can re-order
transactions (while being adversarial to some participants) and
obtain proﬁt by prioritizing his own transactions.
5
P ::= C∗
C ::= contract @Id{ global v : T; function@Id(l : T) {S})∗}
S ::= (l : T@Id)∗ | l := e | S ; S
if e then S else S
|
| goto l
| havoc l : T | assert e | assume e
|
x := post function@Id (l : T)
return e | throw | selfdestruct
|
Fig. 11: An abstract language modeling Solidity.
(I) BLOCK STATE DEPENDENCE. Solidity deﬁnes several
block state variables,
such as timestamp, coinbase,
number, difficulty and gaslimit, which can be used to
generate randomness [48]. All these variables are determined
from the block header, and are thus, in principle, vulnerable
to tampering by the block miner, who can insert suitable
values to favor payouts intended for him, albeit with varying
degrees of success [14]. While prior work [68] considers
only timestamp, other block state variables can also lead to
different Ether ﬂows along different program paths.
(II) TRANSACTION ORDER DEPENDENCE. Concurrent
systems have for long grappled with the problem of data
races due to transaction ordering. While Solidity does not
support concurrency, a miner can inﬂuence the outcome of
a transaction due to its own reordering criteria. Since this
dependence on transaction ordering is a universal blockchain
feature, we consider it a limitation rather than a bug.
IV. ZEUS
ZEUS’s tool chain for smart contract veriﬁcation consists
of (a) policy builder, (b) source code translator, and (c) veriﬁer.
Speciﬁcally, ZEUS takes as input a smart contract and a policy
(written in a speciﬁcation language) against which the smart
contract must be veriﬁed. It performs static analysis atop the
smart contract code and inserts the policy predicates as assert
statements at correct program points. ZEUS then leverages its
source code translator to faithfully convert the smart contract
embedded with policy assertions to LLVM bitcode. Finally,
ZEUS invokes its veriﬁer to determine assertion violations,
which are indicative of policy violations.
We now present a formal overview of ZEUS’s workﬂow and
present proofs of its soundness. While we focus on Solidity-
based smart contracts, ZEUS’s design is generic and applicable
to contracts written in any source language. Note that our
formalism is inspired from [68] to maintain readability.
A. Formalizing Solidity Semantics
We deﬁne an abstract
language that captures relevant
constructs of Solidity programs (see Fig. 11). A program
consists of a sequence of contract declarations. Each contract
is abstractly viewed as a sequence of one or more method
deﬁnitions in addition to declaration and initialization of
persistent storage private to a contract, denoted by the keyword
global. A contract is uniquely identiﬁed by Id, where Id
belongs to a set of identiﬁers. This invocation of the contract’s
publicly visible methods is viewed as a transaction.
For simplicity, we have methods with a single input
variable of type T (where Dom(T) ⊆ N) and a single variable
that is global to the contract’s functions 5. Since T is generic,
it can represent collections and structs as well. Method
invocations in Solidity can be of three types: internal, external
and call. Internal and external invocations are modeled via
the goto instruction or are inlined, while the call invocation
is modeled separately as post. The body of a contract
method is inductively deﬁned by S . In contrast, the post
statement can be invoked with arguments across contracts.
Hence, argument l (of type T) is part of post.
the expression language are not
The semantics of our language abstract concrete values and
operations. Thus, enumeration of T or particular expression
language e remains unspeciﬁed for us. Note that the details
of
important; one can
assume linear arithmetic expressions deﬁned for any traditional
imperative language. The statement havoc assigns a non-