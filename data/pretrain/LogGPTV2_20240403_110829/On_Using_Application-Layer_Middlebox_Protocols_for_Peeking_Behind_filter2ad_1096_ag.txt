This paper
3128, 8080, 8118
8888, 8123, 1080
33,968,960
10,470,875
688,112 (890,425 ‡)
34,216
31,706
19,932
16,358 (218,671 ‡)
14,389
11,869
1,518
1,429
Internet-wide Scans
ACSAC’18 [47]
NDSS’18 [69]
–
–
–
–
–
–
–
–
–
–
–
–
Crawling
–
–
–
–
–
–
–
–
–
–
–
–
WWW’18 [57]
3128, 8080, 8118
8081
29,100,000
6,450,000
–
–
–
–
2,518
–
–
–
–
CCC’15 [61]
3128, 8080, 8123
2,133,646 †
–
28,608 †
–
–
–
1,880 †
–
–
–
–
This paper
ACSAC’18 [47]
NDSS’18 [69]
WWW’18 [57]
CCC’15 [61]
2 weeks
Jan–Feb’19
50 days
Apr–May’18
2 months
Apr–Jun’17
96,863
19,259
16,259
1,927
107,034
54,996
31,000
–
65,871
49,444
–
–
10 months
Jan–Oct’17
180,000
–
–
–
15,832
14,324
9,012
1,547
1,255
528
20,893
–
9,625
74 ††
–
–
19,473
–
–
–
–
–
39,143
–
17,350
–
–
–
Ports scanned
Total
Responsive
Proxies
SOCKS any
SOCKS4
SOCKS5
Working
GET
CONNECT
SOCKS4
SOCKS5
Duration
Total
Responsive
Proxies
SOCKS
Working
GET
CONNECT
SOCKS
SOCKS4
SOCKS5
–
–
–
–
–
–
–
–
–
–
–
† The paper reports details only for port 3128.
‡ When not ignoring the accidentally open proxies as described in Section IV-D6.
†† Only daily median reported.
studied the open proxy system also from the perspective of
maliciousness of the offered services. They were the ﬁrst
to explicitly discuss HTTP CONNECT and SOCKS proxies
shortly in this context.
In contrast to related work, we decided to report not just
on responsive proxies (i. e., hosts which responded to a TCP
SYN), but we also introduce a new category (“proxy”) to report
on hosts responding using a proxy protocol (i. e., SOCKS
error, or 407 for HTTP proxies requesting to authenticate for
access). This enables us to provide a more holistic view of
both closed and open proxies on the Internet.
C. Abuse of Proxy Protocols
In 2004, Pai et al. [55] reported on different sorts of
malicious activities done over their open proxies, including
spam. In 2005, Andreolini et al. [3] described a honeypot
system to track spam activities via proxies, but
they did
not report any ﬁndings. In 2008, Steding-Jessen et al. [66]
analyzed the spam ecosystem using a low-interaction honeypot
implementing HTTP CONNECT and SOCKS proxies. During
their over a year-long study, they collected over 500 million
spams while reporting that the vast majority of the connection
attempts were targeting the SMTP services hosted elsewhere.
SOCKS has been reportedly used by malware to offer connect-
back features, e.g., by SpyEye [64].
D. Peeking to Internal Networks
WebSockets have been shown to allow attackers to probe
arbitrary ports of internal devices in speciﬁc situations. Tools
such as JSrecon [40] and sonar.js [10] were developed to
demonstrate the practical feasibility of such scans of devices
hidden behind NAT gateways. In 2013, Grover et al. [29] used
custom ﬁrmware installed in over a hundred routers around the
world. Their measurement indicated that an average household
has seven devices connected. Huang et al. [33] reported in 2017
14
that 7 % (695) of the autonomous systems they investigated
with the help of Luminati were evidently behind middleboxes.
Unfortunately, we could not ﬁnd a publicly available data set
for this study, nor did the authors respond to our contact
attempts. As a result, we could not verify what percentage
of these are proxies. Earlier in 2019, Mi et al. [49] analyzed
residential proxies provided by actors like Luminati, where
they also used the same mechanism we introduced in this paper
to ﬁngerprint proxy hosts by accessing the localhost.
VI. DISCUSSION AND LIMITATIONS
A. Ethical Considerations
Considering that we are studying live systems on the
Internet, we aim to prevent (or at least minimize) any potential
harm on the target systems by avoiding changes to these
systems. With all the following precautions in place, we try
to balance between the beneﬁts and the potential harm caused
by our scanning, as discussed in the Menlo report [7]. We
argue that the understanding of these phenomena outweigh
the potential harms and now discuss in detail the steps we
undertook to guide our measurements. Scanning approaches
involving multiple application-layer requests have previously
for example been used to detect TLS vulnerabilities [48].
First of all, we utilize standard-conforming querying func-
tionality whenever possible (e. g., UPnP IGD enumeration).
Where it is unavoidable (e. g., understanding potential PCP
vulnerabilities), we follow the corresponding RFC guidance.
For example, RFC 6887 [71, Section 11.6] recommends using
a short-lived forward for obtaining the external address for
PCP and we craft our payloads accordingly. All requests we
sent conform to the respective standards, and we did not try
to misuse or exploit any vulnerability.
We undertook several steps in order to make clear that
our purposes are benign based on the recommended practices
introduced by Durumeric et al. [20]. For HTTP requests, we
use a user-agent string indicating that the requests are made
for research purposes, and include our contact information. The
server we used for scanning also hosts a website explaining
our scanning activities as well as our contact
information
for exclusion from future scans. Considering the amount of
network scanning trafﬁc on the regular HTTP port 80, we are
not able to quantify how many visitors arrived to our page due
to our scanning activities.
The reverse DNS record of the scanning host was set
to indicate its use for research purposes. Furthermore, the
whois information for its IP address contained our abuse e-
mail address, which received mostly automated mails noting
that our scans have been detected. We promptly responded to
these e-mails requesting for information on the networks to
be blocked. In the end, only a single individual responded to
our inquiries asking for the networks to be excluded from our
scan, which was promptly done.
Before conducting Internet-wide scans, we tested our scan-
ning system, including the probes we used, extensively in
our laboratory environment while empirically verifying that
they were not causing any unexpected side effects. The list of
proxy software used in our laboratory setup can be found in
Table V on page 10. For UPnP tests, we deployed a widely
used miniupnpd [8] and Linux-IGD [26], the former being used
as a sole PCP implementation we tested. We conﬁgured all the
software (where necessary) to be as permissive as possible to
verify our approach.
For proxy protocols, we limit our actions to connecting and,
in case of HTTP, performing single requests. In order to obtain
evidence of misconﬁgurations, we had to target some non-
routable addresses. We deliberately chose two target addresses
(localhost and “192.168.0.1”) that were likely to provide us
the conﬁrmation without really trying to access any networked
devices behind the target host. Our scanning approach in this
case is similar to the approach taken by Mi et al. [49].
All collected data is stored on secured servers, and only
authorized persons have access to this data. We did not collect
any kind of personal data; our university does not require an
IRB approval for this type of network scans.
B. Potential Remediations
As UPnP is not designed to be accessible over the Internet,
the mitigation would be patching these vulnerable devices.
However, considering that UPnP/SSDP has been misused for
ampliﬁcation attacks for years, it is doubtful that the manufac-
turers are going to provide ﬁxes for these CPE devices. There-
fore, the current recommendation and industry best practice is
to ﬁlter the discovery port 1900 (e.g., [28], [13], [6], [14]). Due
to the large number of ports for SOAP endpoints, blocking
them is not feasible without negative impact on regular use
cases. Therefore, patching or replacing vulnerable devices is
the only remedy in the long term. For Internet proxies, it is
necessary to implement access controls to disable accesses on
unwanted networks.
C. Limitations
Besides the protocols discussed in this paper, there are also
other protocols for relaying trafﬁc which could be susceptible
for misuse. One example are Traversal Using Relay NAT
(TURN) relays, which are mainly used for VoIP and WebRTC
when no direct peer-to-peer connectivity is available. Case in
point, it was recently reported that Cisco’s Meeting Server
acting as a TURN gateway is vulnerable for arbitrary TCP
relaying [5]. However, based on our brief investigation, their
population seems to be restricted to service providers and
access to these servers requires authentication, i. e., there is
no openly accessible TURN server population in the same
sense as for proxies, so we omitted their analysis in this paper.
For Internet proxies, there is also a recent IETF draft for a
non-backwards compatible SOCKS6 [53] aimed for today’s
protocol designs (e. g., extendability and reduction of initial
round trips) with no public implementations yet.
VII. CONCLUSION
While Internet-wide scans have been used to understand
the Internet in general, a number of hosts remain invisible
to these scans due to their location behind NAT gateways.
In this work, we investigated a number of application-layer
middlebox protocols which an attacker could use to scan such
hosts and networks. For example, we showed how Internet
Gateway Device (IGD) of the UPnP protocol stack could be
misused to access internal networks which would otherwise
15
be out-of-reach for attackers. We also studied both HTTP
and SOCKS proxies, given that these protocols also allow
contacting devices across network borders.
To assess the attack surface, we performed several Internet-
wide scans and a comprehensive analysis of the collected data.
We found a large number of hosts on the Internet that are
potentially vulnerable to such attacks. Most importantly, we
found empirical evidence that attackers are actively abusing
such protocols to reach hosts that would otherwise not be
reachable. We also quantiﬁed the results from several previous
studies related to open proxies in order to provide a more
accurate and complete view of the proxy ecosystem than
reported before. Furthermore, we showed that a large number
of open proxies are misconﬁgured to allow likely unwanted
connections on non-Internet accessible hosts. In summary, we
think that our holistic approach on understanding the whole
proxy ecosystem (instead of limiting ourselves to just open
ones) is a useful contribution to guide future work in this
area. We make the source code of our honeypot available at
https://github.com/RUB-SysSec/MiddleboxProtocolStudy/ to
enable further research on this topic. We have contributed a
patch to ﬁx ZMap’s behavior to allow it to detect the UPnP
devices responding using a non-standard source port.
ACKNOWLEDGMENT
We would like to thank the anonymous reviewers and
our shepherd Adam Bates for the constructive feedback and
guidance. Furthermore, we thank the Shadowserver Foundation
for their help ﬁguring out the ZMap issue, Chad Seaman for
his insights and discussion on the UPnP issue, and Nils Wagner
for the initial work on this topic. This work was supported by
the German Research Foundation (DFG) within the framework
of the Excellence Strategy of the Federal Government and the
States – EXC 2092 CASA – 39078197. In addition, this project
has received funding from the European Union’s Horizon 2020
research and innovation programme under grant agreement No
786669 (ReAct). This paper reﬂects only the authors’ view.
The Research Executive Agency is not responsible for any use
that may be made of the information it contains.
REFERENCES
[1] Akamai, “UPnProxy: Blackhat Proxies via NAT Injections,” Akamai,
Tech. Rep., 2018. [Online]. Available: https://www.akamai.com/us/
en/multimedia/documents/white-paper/upnproxy-blackhat-proxies-via-
nat-injections-white-paper.pdf
[2] M. Allman, V. Paxson, and J. Terrell, “A brief history of scanning,” in
ACM SIGCOMM Conference on Internet Measurement, 2007.
[3] M. Andreolini, A. Bulgarelli, M. Colajanni, and F. Mazzoni, “Hon-
eySpam: Honeypots Fighting Spam at the Source.” SRUTI, vol. 5, 2005.
[4] Ari Luotonen, “Tunneling TCP based protocols through Web proxy
servers,” IETF Secretariat, Internet-Draft draft-luotonen-web-proxy-
tunneling-01, 1999.
[Online]. Available: https://tools.ietf.org/html/
draft-luotonen-web-proxy-tunneling-01
[5] R. Arrouas, “Vulnerability disclosure – Cisco Meeting Server (CMS)
arbitrary TCP relaying,” ImmunIT, Tech. Rep., 2018.
[Online].
Available: https://www.immunit.ch/en/blog/2018/06/12/vulnerability-
disclosure-cisco-meeting-server-arbitrary-tcp-relaying-2/
[6] AT&T, “AT&T Network Practices,” AT&T, Tech. Rep., n.d. [Online].
Available: https://about.att.com/sites/broadband/network
[7] M. Bailey, D. Dittrich, E. Kenneally, and D. Maughan, “The Menlo
Report,” IEEE Security & Privacy, vol. 10, no. 2, 2012.
[8] T. Bernard, “MiniUPnP Project HomePage,” 2017. [Online]. Available:
http://miniupnp.free.fr
[9] M. Boucadair, R. Penno, and D. Wing, “RFC 6970: Universal Plug
and Play (UPnP) Internet Gateway Device - Port Control Protocol
Interworking Function (IGD-PCP IWF),” RFC Editor, Tech. Rep., 2013.
[10] M. Bryant, “sonar.js – A Framework for Scanning and Exploiting
Internal Hosts With a Webpage,” 2015. [Online]. Available: https:
//thehackerblog.com/sonar-a-framework-for-scanning-and-exploiting-
internal-hosts-with-a-webpage/index.html
[11] S. Cheshire and M. Krochmal, “RFC 6886: NAT Port Mapping Protocol
(NAT-PMP),” RFC Editor, Tech. Rep., 2013.
[12] S. Cheshire, M. Krochmal, and K. Sekar, “NAT Port Mapping
Protocol (NAT-PMP),” IETF Secretariat, Internet-Draft, 2005. [Online].
Available: http://www.ietf.org/internet-drafts/draft-cheshire-nat-pmp-
00
[13] Comcast, “Blocked Internet Ports List,” Comcast Xﬁnity, Tech. Rep.,
n.d. [Online]. Available: https://www.xﬁnity.com/support/articles/list-
of-blocked-ports
[14] Cox, “Internet Ports Blocked or Restricted by Cox,” Cox, Tech. Rep.,
[Online]. Available: https://www.cox.com/residential/support/
n.d.
internet-ports-blocked-or-restricted-by-cox.html