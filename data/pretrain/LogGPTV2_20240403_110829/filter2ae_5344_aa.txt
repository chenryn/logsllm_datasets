## 0x00 前言
HWP 是韩国 Hancom 公司开发的文字处理软件(扩展名`.hwp`)，可类比于
WPS。本文分析样本利用了CVE-2017-8291，由于版权相关问题，最新版的HWP已经将GhostScript开源组件(`gbb.exe`)移除，但在旧版本上该漏洞仍然能够触发，笔者分析时使用的HWP版本如下：
在分析样本之前先来分析该漏洞，该漏洞是一个类型混淆漏洞，由POC可知其如何由类型混淆达到Bypass SAFER。
## 0x01 POC分析
如不了解GhostScript语法，请读者自行参照官方参考文档(见参考链接)学习之后再来看POC。
> 笔者分析环境：Ubuntu 18.04、Ghostscript 9.21、GDB+pwndbg
可以用C语言写成(仅仅为表示其功能)：
    int size_from = 10000;
        int size_step = 500;
        int size_to = 65000;
        int a = 0;
        int i;
        for (i = size_from; i 
ostop - op)`：
    gdb-peda$ p asize
    $37 = 0x3e8
    gdb-peda$ p ostop-op
    $38 = 0x31f
IF条件成立，那么调用`ref_stack_push()`函数(位于/psi/istack.c)重新分配栈空间：
    /*
     * Push N empty slots onto a stack.  These slots are not initialized:
     * the caller must immediately fill them.  May return overflow_error
     * (if max_stack would be exceeded, or the stack has no allocator)
     * or gs_error_VMerror.
     */
    int
    ref_stack_push(ref_stack_t *pstack, uint count)
    {
        /* Don't bother to pre-check for overflow: we must be able to */
        /* back out in the case of a VMerror anyway, and */
        /* ref_stack_push_block will make the check itself. */
        uint needed = count;
        uint added;
        for (; (added = pstack->top - pstack->p) p = pstack->top;
            code = ref_stack_push_block(pstack,
                                        (pstack->top - pstack->bot + 1) / 3,
                                        added);
            if (code requested = count;
                return code;
            }
        }
        pstack->p += needed;
        return 0;
    }
之后的操作是向重新分配的栈空间中写入内容，`b zarray.c:71`于修改`osp`语句设断，`c`继续执行到断点处：
    gdb-peda$ x /2gx osp
    0x5555575006f8:    0x0000000000000e00    0x0000000000000000
    gdb-peda$ x /2gx &aref
    0x7fffffffc8e0:    0x000003e85715047c    0x000055555796c3e8
    gdb-peda$ s
    ......
    gdb-peda$ x /2gx osp
    0x5555575006f8:    0x000003e85715047c    0x000055555796c3e8
`x /222gx 0x5555572d5e60`查看`buffers`数组的每一项地址：
注意：osp(0x5555575006f8)位于上图箭头所指数组项下方。
* * *
实现`.eqproc`操作的函数`zeqproc()`(位于/psi/zmisc3.c)是第二个关键点。`.eqproc`是取出栈顶两个元素进行比较之后入栈一个布尔值(`
 .eqproc `)：
可以看出其在取出两个操作数时并未检查栈中元素数量，且并未检查两个操作数类型，如此一来，任意两个操作数都可以拿来进行比较。其修复方案即是针对此两种情况：
    --- a/psi/zmisc3.c
    +++ b/psi/zmisc3.c
    @@ -56,6 +56,12 @@ zeqproc(i_ctx_t *i_ctx_p)
         ref2_t stack[MAX_DEPTH + 1];
         ref2_t *top = stack;
    +    if (ref_stack_count(&o_stack) < 2)
    +        return_error(gs_error_stackunderflow);
    +    if (!r_is_array(op - 1) || !r_is_array(op)) {
    +        return_error(gs_error_typecheck);
    +    }
    +
         make_array(&stack[0].proc1, 0, 1, op - 1);
         make_array(&stack[0].proc2, 0, 1, op);
         for (;;) {
`b zeqproc`设断后，`c`继续执行，于`zeqproc()`函数处成功断下。接下来`b zmisc3.c:112`于`make_false(op
- 1);`设断：
    gdb-peda$ b zmisc3.c:112
    Breakpoint 13 at 0x555555d1d754: file ./psi/zmisc3.c, line 112.
    gdb-peda$ c
    ......
    gdb-peda$ p osp
    $66 = (s_ptr) 0x5555575006f8
    gdb-peda$ x /4gx osp-1
    0x5555575006e8:    0x0000000000000e02    0x0000000000000000
    0x5555575006f8:    0x000003e85715047c    0x000055555796c3e8
    gdb-peda$ s
    ......
    gdb-peda$ x /4gx osp-1
    0x5555575006e8:    0x0000000000000100    0x0000000000000000
    0x5555575006f8:    0x000003e85715047c    0x000055555796c3e8
可以看到`make_false()`修改之处。之后的`pop(1);`将栈指针上移，如此一来`.eqproc`与`loop`结合便可导致栈指针上溢。
* * *
下面来看POC Part3：
其通过`buffersearchvars`数组来检索`buffers[N]`字符串后16位是否被`make_false()`修改，进而判断`osp`是否到达可控范围，并通过`buffersearchvars`数组来保存位置。
于POC中`254 le {`后添加`(Overwritten)
print`,并将之前添加的`print`语句全部注释掉。重新启动GDB，设置参数见上，`b zprint`设断后，`r`开始运行，成功断下后：
    gdb-peda$ x /8gx osp-2
    0x5555574fc958:    0xffffffffffff0100    0xffffffffffff0000
    0x5555574fc968:    0x0000a604ffff127e    0x00005555574f2364
    0x5555574fc978:    0x0000000a2f6e127e    0x00005555575de0fb
    0x5555574fc988:    0x5245504150200b02    0x0000000000000001
如此一来，buffersearchvars[2]设为1，退出`loop`循环。buffersearchvars[3]保存当前检索的buffers[N]，buffersearchvars[4]保存buffersizes[N]-16。
* * *
POC