SD according to Eq. (11).
4.4 Level 3: End-Host Path Validation
EPIC L3 further extends the security properties of EPIC L2
by enabling the source and destination of a packet to perform
path validation. To that end, on-path ASes overwrite their
HVFs with proofs to the source and destination that they have
processed the packet. Upon receiving the packet, the desti-
nation can directly validate the path based on the destination
validation ﬁeld and enables path validation for the source by
replying with a conﬁrmation message. We deﬁne
Ci := MACKS
i
(tspkt || SRC || σi) ,
(12)
i
C[1]
i
which is equal to Eq. (10) without truncation. This crypto-
graphic result has a length of lPRF bytes, which is generally
longer than the HVFs that we propose in this work. This al-
lows us to split the result into multiple separate pieces, which
are uncorrelated as we assume the MAC to be a PRF; in
particular, under the assumption lPRF ≥ 2· lval, we can deﬁne
(13)
:= Ci(cid:74)0:lval(cid:75), C[2]
:= Ci(cid:74)lval:2lval(cid:75).
i;0 := C[1]
i
(which equals V (2)
The source then performs the same setup as for EPIC L2,
setting each HVF to V (3)
). The
router in Ai calculates the Ci deﬁned in Eq. (12) and checks
that the HVF is correct. Finally, it updates the HVF with
V (3)
. Without requiring any additional cryptographic
i;i
computation, the router thus leaves a conﬁrmation for HS that
it successfully validated and forwarded the packet (assuming
that A1 is honest), since only Ai, HS, and A1 can compute C[2]
.
i
We allow HD to also validate this conﬁrmation (under the
further assumption that HS and A(cid:96) are honest) by including
the correct ﬁnal values V (3)
in the destination validation ﬁeld:
i;(cid:96)
:= C[2]
i
i
(cid:16)
tspkt || PATH || V (3)
1;(cid:96) || ··· || V (3)
(cid:17)
(cid:96);(cid:96) || P
.
(14)
V (3)
SD := MACKSD
Algorithm 1 Initialization and path validation at HS in
EPIC L3. The second procedure is executed upon receiv-
ing a reply packet that contains the path validation proof for
the source. Packet contents such as header ﬁelds are denoted
by FIELD and ← is an initialization or assignment. For read-
ability, some superscripts omitted.
1: procedure INITIALIZATION BY HS
Require: SRC, DEST, TSpath, KSD, P, ∀i ∈ {1, . . . , (cid:96)}: HIi, σi, KS
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
(cid:17)
VSD ← MACKSD
tspkt || PATH || V1;(cid:96) || . . . || V(cid:96);(cid:96) || P
send PACKET according to Eq. (1)
store Vi;(cid:96) for all i under key (TSpath || tspkt) for validation
Si ← σi(cid:74)0:lseg(cid:75)
(cid:16)
Ci ← MACKS
i ← Ci(cid:74)0:lval(cid:75); C[2]
C[1]
Vi ← C[1]
Vi;(cid:96) ← C[2]
construct PATH according to Eq. (1b)
tspkt ← (current time)− TSpath
for all i ∈ {1, . . . , (cid:96)} do
(cid:17)
i ← Ci(cid:74)lval:2lval(cid:75)
(cid:46) initial value of HVF
(cid:46) ﬁnal value of HVF
(cid:46) segment identiﬁer (Eq. (7))
tspkt || SRC || σi
(cid:16)
i
i
i
i
receive EPIC L2 packet with payload TSpath , tspkt , and V1 . . . V(cid:96)
if EPIC L2 veriﬁcation failed then
if
(cid:17)
(cid:16)
13: procedure VALIDATION AT HS
Require: KSD
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
return “validation failed”
TSpath || tspkt
return “validation failed”
retrieve Vi;(cid:96) for all i under key
for all i ∈ {1, . . . , (cid:96)} do
return “validation succeeded”
(cid:54)= Vi;(cid:96) then
return “validation failed”
if Vi
(cid:16)
is not a valid key in store then
(cid:17)
TSpath || tspkt
Note that, as each HVF is only updated once, we have V (3)
i;(cid:96) =
V (3)
. In order to allow HS to validate the path, HD needs to
i;i
send a conﬁrmation message containing the timestamps of the
original message together with the updated values V (3)
i;(cid:96) . To
prevent circular conﬁrmations, such a message must be sent
to HS as an EPIC L2 packet (cf. §7). To validate the path, HS
must store the expected HVFs upon sending a packet. When
it receives a reply by the destination that contains the values
V (3)
that the destination received, it validates them against
i;(cid:96)
the stored values. If no correct conﬁrmation is received after
some timeout, the source can conclude that the original packet
has been lost or redirected.
Both source and destination host are free in their reaction
to failed path validation: The destination can choose to ignore
it and rely on the source to take appropriate action (soft fail)
or reject the corresponding packets (hard fail). The source can
switch paths on a short timescale and, in case of frequent fail-
ures, switch its Internet provider. Note that fault localization
in general is a very complex problem and cannot be achieved
through EPIC alone in an adversarial environment [5].
The algorithms for initialization, validation, and update in
EPIC L3 are shown in Algorithms 1–3. These algorithms do
not include the replay-suppression system, which we assume
is an external system in each AS that inspects the packet origin
of all authenticated packets and eliminates any duplicates.
USENIX Association
29th USENIX Security Symposium    547
drop packet
(cid:54)∈ [−ε,L + ε] then
(cid:46) invalid timestamp (lifetime L, clock skew ε)
Algorithm 2 Packet validation and updates at intermediate
routers in EPIC L3. Syntax as in Algorithm 1.
1: procedure FORWARDING BY Ai
Require: Ki
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
if HIi is expired or packet received through wrong interface then
if (current time)− TSpath − tspkt
drop packet
(A1 : HS) ← SRC
KAi→A1 ← PRFKi (A1)
(cid:17)
(cid:16)
i ← PRFKAi→A1
KS
(HS)
TSpath || HIi || Si’
σi ← MACKi
(cid:54)= σi(cid:74)0:lseg(cid:75) then
(cid:17)
(cid:16)
if Si
drop packet
Ci ← MACKS
i ← Ci(cid:74)lval:2lval(cid:75)
i ← Ci(cid:74)0:lval(cid:75); C[2]
C[1]
if Vi
Vi ← C[2]
forward packet according to HIi
(cid:46) hop authenticator (Eq. (6))
(cid:46) check segment identiﬁer (Eq. (7))
(cid:46) derive AS-level DRKey (Eq. (3))
(cid:46) derive host-level DRKey (Eq. (9))
(cid:54)= C[1]
drop packet
tspkt || SRC || σi
(cid:46) authenticate packet
(cid:46) update HVF
i
i
then
i
(cid:16)
Algorithm 3 Packet and path validation at HD in EPIC L3.
Syntax as in Algorithm 1.
1: procedure VALIDATION AND REPLY AT HD
Require: KSD
2:
3:
4:
5:
6:
7:
8:
9:
return “validation failed”
if (current time) - TSpath - tspkt
return “validation failed”
(TSpath || tspkt || V1 || . . . || V(cid:96))
(cid:46) timestamp expired or in the future
(cid:46) values of original packet
tspkt || PATH || V1 || . . . || V(cid:96) || P
(cid:48) ← MACKSD
(cid:48) then
send EPIC L2 packet to HS with payload
VSD
if VSD (cid:54)= VSD
return “validation succeeded”
(cid:54)∈ [−ε,L + ε] then
(cid:17)
Algorithms 2 and 3 both enforce the validity of the absolute
timestamp TSpath + tspkt: the packet must neither exceed a
ﬁxed lifetime L nor must this timestamp lie in the future.
These checks take into account a maximum clock skew of ε.
5 Security Analysis
In this section we deﬁne the security properties in turn and
compare our protocols with ICING [36], OPT [28], and
PPV [45]. An overview is shown in Table 2.
5.1 Basic and Strong Attacker Models
Basic-Attacker Model A Dolev–Yao adversary can typi-
cally observe, drop, inject, replay, or alter packets anywhere
in the network [17]. However, if an attacker can re-route pack-
ets arbitrarily, it becomes impossible to ensure that packets
follow authorized paths. We therefore consider a localized
variant of a Dolev–Yao attacker who compromised one or
multiple ASes, including their routers, end hosts, and crypto-
graphic keys. This attacker can only send and receive packets
at the compromised (and colluding) AS locations. Such a
model is common in path-validation schemes [28, 36] and
represents our basic attacker.
As is standard in Dolev–Yao models, our model assumes
cryptography to be perfect. Consequently, the cryptographic
primitives that the protocol is built on must be secure. In
particular, this requires that cryptographic keys and authenti-
cation ﬁelds be sufﬁciently long to prevent an attacker from
brute-forcing authentication ﬁelds.
If short keys or ﬁelds
are used, the model’s assumptions are violated and the secu-
rity guarantees no longer hold. For instance, in the case of
EPIC L0, if a short hop authenticator was used, an attacker
could forge a hop ﬁeld and create an unauthorized path that
could be used to send an arbitrary number of malicious pack-
ets that violate path authorization. Consequently, EPIC L0
must use long authentication ﬁelds to be secure.
Strong-Attacker Model
our protocols
EPIC L1–3 are designed to decrease communication
overhead by using short HVFs and segment identiﬁers. A
malicious sender could therefore send large amounts of
probing packets—and, with a small chance, guess the correct
values for these ﬁelds in individual packets.
In contrast,
To reﬂect the attacker’s ability to brute-force the HVFs
and segment identiﬁers in the model, we propose a strong-
attacker model, which weakens the assumption of perfect
cryptography of the basic attacker. In particular, this model
allows a malicious sender to obtain valid HVFs and segment
identiﬁers of the validation header by querying an oracle.
We deﬁne for EPIC levels l ∈ {1,2,3} the oracle O (l) as
the function that for given PO and HI ﬁelds produces valid
HVFs Vi and segment identiﬁers Si:
(cid:96) ,S(l)
1 , ...,V (l)
1 , ...,S(l)
(cid:96) ).
O (l)(PO,HI1, ...,HI(cid:96)) = (V (l)
(15)
The attacker can thus query the oracle and learn the Vi and Si
(but not σi or VSD). As this allows him to trivially construct
packets that violate the security properties for ASes, we re-
strict the security guarantees to packets whose origin PO was
not part of an oracle query. Security under this model then
means that, while the attacker may be able to forge individual
packets (obtained from the oracle in the model), this does not
help him to craft different packets that violate the guarantees.
Additionally, we need to argue in our security analysis that
forging individual packets (as modeled by an oracle invoca-
tion) does not represent a serious risk for the security of the
system: in the next subsection, we will show that the likeli-
hood of success of such an attack is low in many practical
cases and, even if it succeeds, its impact is severely lim-
ited. Consequently, the attacker’s beneﬁt from brute-forcing a
packet is small compared to the computational costs involved.
Protocols that are secure under the basic-attacker model
are not necessarily less secure than those under the strong-
attacker model, but their implementations must ensure that
authenticators are long enough to rule out any practical brute-
force attacks. The length of the authenticators is crucial for
the communication overhead, which we discuss later.
5.2 Low Risk of Forging Individual Packets
The strong-attacker model explicitly acknowledges the ability
of an attacker to brute-force individual HVFs and segment
identiﬁers in EPIC L1–3 through its oracle. However, in
practice, the risk of such an attack is limited in four ways:
548    29th USENIX Security Symposium
USENIX Association
Table 2:  satisﬁed, () partially satisﬁed, and  unsatisﬁed properties of our protocols EPIC L0–3, ICING, OPT, and PPV. The
2nd and 3rd columns list for whom and under which honesty assumptions the property holds. For protocols evaluated in the
strong-attacker model (SA) rather than the basic-attacker model (BA), the 4th column indicates if the property holds only for
packets that do not originate from the oracle, or for all packets.
P1: path authorization
P2: freshness
P3: packet authentication
P4: source authentication
P5: path validation
P6: path validation
who
Ai
Ai, HD
HD