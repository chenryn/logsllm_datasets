proposed to condone email spam by associating a cost with
every email [6]. Furthermore, one can also provide auditing
capability at the M S to resolve any accounting or pricing
related issues regarding subscribers and publishers.
4. EVENTGUARD: SECURITY GUARDS
In this section we (cid:12)rst introduce the three building blocks
used by EventGuard: tokens, keys and signatures. Then
we describe how EventGuard uses these primitives to de-
velop six safeguards for securing the six important pub-sub
operations: subscribe, advertise, publish, unsubscribe, un-
advertise and routing.
4.1 Tokens, Keys and Signatures
The (cid:12)rst building block is the concept of per-topic to-
ken. In EventGuard, publishers can publish and advertise
events in terms of topics. We create a token for each topic.
Tokens are essential for protecting messages (e.g., subscrip-
tions) from selective dropping DoS attack. Concretely, by
introducing tokens, nodes in the pub-sub network are not
aware of the topic names;
instead they match and route
events on the pub-sub network based on tokens until the
events ultimately reach the appropriate subscribers.
Token is a pseudonym for a topic name. There is a one-to-
one mapping between a topic name w and it’s token T (w).
However, given a token T (w) it is computationally infeasi-
ble to guess the topic name w. A subscriber subscribes for
a topic w by subscribing for its token with (cid:12)lter f (w) =
htopic, EQ, T (w)i, where topic is the attribute name for
topic, EQ denotes the equality operator, and T (w) denotes
the token corresponding to the topic w.
The second building block is the concept of per-topic key.
In an EventGuard powered pub-sub system, keys are fun-
damental for achieving con(cid:12)dentiality and integrity. By
encrypting message content with a secret encryption key,
we can prevent contents of publications from unauthorized
reads and writes.
Every topic w in the pub-sub system has an associated
key K(w). The M S is responsible for providing K(w) to a
subscriber when the subscriber subscribes for topic w and to
publishers when they advertise for topic w. The encryption
key K(w) enables the publisher to encrypt events that be-
long to topic w. Now only a legal subscriber to topic w would
be able to decrypt the message. The publication of content
pbl under a topic w would be constructed as e = h(cid:11)1, (cid:11)2i,
where (cid:11)1 = htopic, T (w)i and (cid:11)2 = hcontent, EK(w)(pbl)i,
where content denotes the attribute name for the published
message. Note that EK (pbl) denotes the encryption of pbl
with encryption key K and some symmetric key encryption
algorithm E (e.g., DES [10] or AES [13]). The nodes in the
pub-sub system are not aware of keys; they would still be
able to route an event based on its token.
The third building block in EventGuard is the concept of
signature. Signatures play a fundamental role in achieving
message authentication and protecting the pub-sub services
from (cid:13)ooding-based DoS attacks. EventGuard uses a prob-
abilistic signature algorithm for achieving authenticity. A
signature scheme is probabilistic if there are many possible
valid signatures for each message and the veri(cid:12)cation algo-
rithm accepts any of the valid signatures as authentic. In
the (cid:12)rst prototype of EventGuard, we use ElGamal [9] as
the probabilistic signature algorithm.
A signature on any message M using ElGamal yields a
tuple hr; si. The r-component of the signature is guaran-
teed to be unique (with high probability). Further, if the
same message M is signed twice by the same entity x, we
get two di(cid:11)erent, but valid ElGamal signatures of M . All
messages originating at entity x are signed using its private
key rk(x); and all its signatures are veri(cid:12)ed using its corre-
sponding public key pk(x). Subscriptions, unsubscriptions,
advertisements and unadvertisements are signed by the M S,
while publications are signed by its publisher. This ensures
that malicious nodes cannot (cid:13)ood the pub-sub network with
bogus publications or phony subscriptions.
There are at least two alternative approaches to signa-
tures. One apparent alternative is to use keyed message
authentication codes (MACs). Shared MAC keys between a
publisher and a subscriber allow the subscriber to authenti-
cate all publications it receives. However, there is a dilemma
with this approach. On one hand, we cannot a(cid:11)ord to give
away MAC keys to pub-sub network nodes since a malicious
node may use this key to (cid:13)ood messages on the pub-sub net-
work. On the other hand, without these MAC keys, nodes
on the pub-sub network would neither verify the authentic-
ity of messages nor control (cid:13)ooding based DoS attacks.
The second alternative to signatures is to use a Byzan-
tine fault-tolerant (BFT) information dissemination proto-
col [12]. Let m denote an upper bound on the number of
malicious nodes in the pub-sub network. The publisher ini-
tiates a publication message M by sending it to 2m + 1 seed
nodes. Any non-seed node u would consider the message M
authentic if and only if it received m + 1 identical copies of
the message M from m + 1 distinct nodes in the system.
Note that if m + 1 copies of a message are identical then at
least one of the copy is guaranteed to have originated from a
non-malicious node. Node u continues propagating the mes-
sage M (usually by broadcast) until all subscribers receive
the message M . An obvious advantage of BFT techniques
is that it does not pay the overhead of using a PKI based
signature. On the (cid:13)ip side however, BFT techniques incur
much higher communication cost. This makes BFT tech-
niques suitable only for environments that inherently sup-
port broadcast communication (e.g., local area networks).
For wide-area Internet applications like pub-sub systems it
is important to keep the communication cost very low.
We have introduced tokens, keys and signatures as funda-
mental building blocks of EventGuard. The next challenge
is to design and construct the six concrete safeguards for
the following six essential operations: subscribe, advertise,
publish, unsubscribe, unadvertise and routing.
4.2 Subscribe Guard
4.3 Advertise Guard
Subscribe guard is designed for achieving subscription au-
thentication, subscription con(cid:12)dentiality & integrity, and
preventing DoS attacks based on spurious subscriptions. If
a subscriber S wishes to subscribe for a topic w, it sends
a request to a M S. At this point, the M S may act as the
authority for implementing a cost model for the pub-sub sys-
tem and collect a subscription fee for every subscription; the
subscription fee may be dependent on the topic w. Let (cid:30)0(w)
be the original subscription (cid:12)lter for topic w, sb(w) denote
the subscription permit issued by M S for the subscription
(cid:30)0(w), and (cid:30)(w) denote the transformed subscription mes-
sage used by the subscriber S in EventGuard.
(cid:30)0(w) = htopic; EQ; wi
sb(w) = hK(w); T (w); sigS
(cid:30)(w) = htopic; EQ; T (w)i;
M S(T (w)); U ST S(w)i
hsig; AN Y; sigS
M S(T (w))i
A constraint (cid:30) = hname(cid:30), AN Y , value(cid:30)i covers an attribute
(cid:11) = hname(cid:11), value(cid:11)i if name(cid:30) equals name(cid:11). The values
value(cid:30) and value(cid:11) are ignored by Siena, but are used by
EventGuard to embed signatures in messages.
The M S sends a subscription permit sb(w) to the sub-
scriber S. The key K(w) for topic w is derived as K(w)
= KHrk(M S)(w), where rk(M S) denotes the M S’s private
key and KHK (w) denotes a keyed hash of string w us-
ing a keyed-pseudo random function KH (approximated by
HMAC-MD5 [11]) and a secret key K. The token T (w) for
topic w is derived as T (w) = H(K(w)), where H(x) denotes
a hash of string x using a one-way pseudo-random function
H (approximated by MD5 [18] or SHA1 [8]). U ST S(w) is
an unsubscribe token given to the subscriber to enable safe
unsubscription (discussed later under unsubscribe guard).
Observe that if any two subscribers subscribe for topic w,
they get the same encryption key K(w) and the same token
T (w).
The signature sigS
M S(T (w)) = hr, si is an ElGamal signa-
ture by the M S on the token T (w) in the subscription permit
sb(w) provided to subscriber S. Since the r-component of
the signature is always unique, we use the r-component of
this signature as the subscription identi(cid:12)er (sbId). This sig-
nature serves us three purposes. First, it enables nodes in
the pub-sub network to check the validity of a subscription.
Second, we use the subscription identi(cid:12)er (the r-component
of the signature) to detect duplicate subscription based (cid:13)ood-
ing attack. Note that even if two subscribers S and S 0 sub-
scribe for the same topic w, sigS
M S(T (w))
(discussed later under routing guard). Third, it is used to
construct the unsubscribe token U ST S(w) = KHrk(M S)(r)
where r denotes the r-component of the M S’s signature. We
use U ST S(w) to prevent DoS attacks based on fake unsub-
scription (discussed later under unsubscribe guard).
M S(T (w)) 6= sigS 0
Upon receiving a subscription permit sb(w) from the M S,
subscriber S transforms its original subscription (cid:12)lter (cid:30)0(w)
to an EventGuard subscription (cid:12)lter (cid:30)(w). The subscriber
S could then submit (cid:30)(w) to the pub-sub network. Con-
sequently, any publication that includes the token T (w) is
routed to S. Note that pub-sub nodes cannot perform unau-
thorized reads or writes on a subscription message, thus
guaranteeing subscription con(cid:12)dentiality and integrity.
Advertise guard is designed for achieving advertisement
authentication, advertisement con(cid:12)dentiality and integrity,
and preventing DoS attacks based on bogus advertisement.
When a publisher P wishes to publish events under topic
w, it sends a request to the M S. At this point the M S
may charge a publication fee to the publisher that is some
arbitrary function of the topic w. Let (cid:30)0(w) be the original
advertisement (cid:12)lter for topic w, ad(w) denote the advertise-
ment permit given by the M S to the publisher P and (cid:30)(w)
denote the transformed advertisement.
(cid:30)0(w) = hpublisher; EQ; P i; htopic; EQ; wi
ad(w) = hK(w); T (w); sigP
M S(T (w) k P k pk(P ));
U AT P (w)i
(cid:30)(w) = hpublisher; EQ; P i; hpk; EQ; pk(P )i;
htopic; EQ; T (w)i;
hsig; AN Y; sigP
M S(T (w) k P k pk(P ))i
The key K(w), and the token T (w) are computed in the
same manner as that for subscriptions. The special token
U AT P (w) is used to prevent fake unadvertisement based
DoS attack (discussed in unadvertise). The publisher then
constructs the advertisement (cid:12)lter (cid:30)(w) and propagates it to
the pub-sub network. Note that the signature sigP
M S(T (w) k
P k pk(P )) ties the publisher’s name (P ) to its public-key
(pk(P )). The public-key pk(P ) is essential for the pub-sub
nodes and the subscribers to verify the authenticity of pub-
lications.
4.4 Publish Guard
Publish guard is designed to safeguard the publication
from publication con(cid:12)dentiality & integrity, publication au-
thenticity, and DoS attacks based on bogus publications.
Suppose a publisher P wishes to publish a publication pbl
under topics w1, w2, (cid:1) (cid:1) (cid:1) , wm. The content pbl could be any
arbitrary sequence of bytes including text, multimedia, and
so on. For each topic wi, the publisher uses the topic’s to-
ken T (wi) and its encryption key K(wi) provided by the M S
during advertisement (see advertise guard). A publication
event e is constructed as follows. Let e0 denote the origi-
nal publication message, e denote a legal event publication
transformed from e0 using tokens and content encryption of
publication messages.
e0 = hhpublisher; P i; hcontent; pbli;
htopic; w1i; (cid:1) (cid:1) (cid:1) ; htopic; wmii
e = hhpublisher; P i; hcontent; EKr (pbl)i;
htopic; T (w1)i; hT (w1); EK(w1)(Kr)i; (cid:1) (cid:1) (cid:1) ;
htopic; T (wm)i; hT (wm); EK(wm)(Kr)ii
The key Kr is a random encryption key generated each time
a publisher needs to publish an event. P sends the event
e along with its signature, namely, sigP (e). Observe that
any subscriber for topic wi possesses the key K(wi). An
authorized subscriber uses the key K(wi) to decrypt the
random key Kr, and uses the random key Kr to decrypt the
publication pbl.
Note that a publisher uses an ElGamal signature to sign
its publications. The (cid:12)rst component of the signature is used
as the publication identi(cid:12)er (pbId). The signature serves two
purposes. First, it enables nodes in the pub-sub network to
check the validity of a publication. Second, we use the pub-
lication identi(cid:12)er (the r-component of the signature) to de-
tect and condone a DoS attack based on publication (cid:13)ooding
(discussed later under routing guard).
4.5 Unsubscribe Guard
Unsubscribe guard is designed to prevent unauthorized
unsubscribe messages, (cid:13)ooding of unsubscribe messages. If
a subscriber S wishes to unsubscribe from a topic w, S sends
M S(T (w)), U ST S(w)i to the M S. Note that S re-
hT (w), sigS
ceived the signature sigS
M S(T (w)) and the unsubscribe token
U ST S(w) when it subscribed for topic w. The M S checks
if sigS
M S(T (w)) is a valid signature on T (w). The M S uses
the special token U ST S(w) to ensure protection from DoS
attacks based on fake unsubscription. The M S checks if
U ST S(w) is indeed equal to KHrk(M S)(sbId), where sbId
denotes the subscription identi(cid:12)er, namely, the r-component
of the signature sigS
M S(T (w)). Note that the subscriber S
is never required to reveal the special token U ST S(w) to
the pub-sub network. Hence, no malicious node in the pub-
sub network would be able to fake an unsubscribe request.
Moreover, the use of U ST S(w) prevents some subscriber S 0
(6= S) who has subscribed for topic w (and thus possesses
signature sigS 0
M S(T (w)), token T (w) and key K(w)) from
unsubscribing subscriber S from topic w. We use (cid:30)0(w) to
denote the original unsubscription message, usb(w) to de-
note an unsubscription permit given by the M S and (cid:30)(w)
to denote the transformed unsubscription request.
(cid:30)0(w) = htopic; EQ; wi
usb(w) = hsigM S(T (w) k sbId)i
(cid:30)(w) = htopic; EQ; T (w)i; hsbId; AN Y; sbIdi
hsig; AN Y; sigM S(T (w) k sbId)i
Note that the signature sigM S(T (w) k sbId) includes the
token T (w) and the original subscription’s identi(cid:12)er sbId.
Subscriber S would unsubscribe from topic w by sending
(cid:30)(w) to the pub-sub network. Nodes in the network use the
M S’s signature to check the validity of an unsubscription
request, delete the subscription corresponding to sbId and
use the unsubscription identi(cid:12)er usbId (the r component
of signature sigM S(T (w) k sbId)) to detect unsubscription
(cid:13)ooding based DoS attacks.
4.6 Unadvertise Guard
Unadvertise guard is designed to prevent unauthorized un-
advertise messages, and (cid:13)ooding of unadvertise messages.
When a publisher P wishes to unadvertise for a topic w,
P sends hT (w), sigP
M S(T (w) k P k adId), U AT P (w)i to
the M S. Similar to those illustrated in unsubscribe guard,
the unadvertise token U AT P (w) is used to prevent fake un-
advertise based DoS attack. Let (cid:30)0(w) denote the original
unadvertisement message for topic w, uad(w) denote the
unadvertisement permit given by M S and (cid:30)(w) denote the
transformed advertisement request.
(cid:30)0(w) = hpublisher; EQ; P i; htopic; EQ; wi
uad(w) = hsigM S(T (w) k P k adId)i
(cid:30)(w) = hpublisher; EQ; P i; htopic; EQ; T (w)i;
hadId; AN Y; adIdi;
hsig; AN Y; sigM S(T (w) k P k adId)i
The publisher P uses the signature sigM S(T (w) k P k adId)
Figure 3: Handling Flooding based DoS attacks in
EventGuard
included in the unadvertisement permit uad(w) to create an
unadvertise request and submit it to the pub-sub overlay
network. Nodes in the network use the M S’s signature to
check the validity of an unadvertisement, delete the adver-
tisement corresponding to adId and use the unsubscription
identi(cid:12)er uadId (the r component of signature sigM S(T (w)
k P k adId)) to detect unadvertisement (cid:13)ooding based DoS
attacks.
4.7 Routing Guard
The pub-sub network nodes route messages based on to-
kens. Besides performing the functionality of a regular pub-
sub node, we require the nodes to perform additional checks
to ensure safety from DoS attacks.
EventGuard requires nodes on the pub-sub network to
check for authentic signatures and detect duplicate mes-
sages. With the guarantee of sender authenticity and the
prevention of duplicate messages, no (cid:13)ooding attack could
propagate beyond one non-malicious node. Figure 3 illus-
trates this point. In Figure 3, a malicious node B1 attempts
a (cid:13)ooding based DoS attack on all its neighbor nodes. Ob-
serve that no invalid message (incorrect signatures) and no
duplicate message from node B1 would propagate beyond
the non-malicious nodes G1, G2, G3 and G4. More impor-
tantly, none of the nodes marked X would be hit by this
DoS attack. Thus, by deploying routing guards in the pub-
sub network, EventGuard can e(cid:11)ectively isolate the e(cid:11)ect of
(cid:13)ooding attacks.
We implement the routing guard in three steps. First, we
require a node to maintain the identi(cid:12)ers seen in the last
max delay time units. Second, we augment each Event-
Guard message with a timestamp that is signed by the M S
(for advertisement, subscription, unadvertisement and un-
subscription) or signed by the publisher (for a publication).