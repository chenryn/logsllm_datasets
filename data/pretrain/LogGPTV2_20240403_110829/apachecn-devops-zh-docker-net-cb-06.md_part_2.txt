```
user@docker1:~$ sudo iptables -S
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
-N DOCKER
-N DOCKER-ISOLATION
-A FORWARD -j DOCKER-ISOLATION
-A FORWARD -o docker0 -j DOCKER
-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -i docker0 ! -o docker0 -j ACCEPT
-A FORWARD -i docker0 -o docker0 -j DROP
-A DOCKER -s 172.17.0.3/32 -d 172.17.0.2/32 -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT
-A DOCKER -s 172.17.0.2/32 -d 172.17.0.3/32 -i docker0 -o docker0 -p tcp -m tcp --sport 80 -j ACCEPT
-A DOCKER-ISOLATION -j RETURN
user@docker1:~$ 
```
这两个新规则允许`web2`在任何暴露的端口上访问`web1`。请注意第一条规则如何定义从`web2` ( `172.17.0.3`)到`web1` ( `172.17.0.2`)的访问，目的港为`80`。第二个规则翻转 ips 并将端口`80`指定为源端口，允许流量返回`web2`。
### 注
早些时候，当我们讨论用户定义的网络时，您看到我们可以将 ICC 标志传递给用户定义的桥。但是，覆盖驱动程序目前不支持禁用 ICC 模式。
# 禁用出站伪装
默认情况下，允许容器通过伪装或隐藏其真实的 IP 地址到 Docker 主机后面来访问外部网络。这是通过 netfilter `masquerade`规则实现的，该规则将容器流量隐藏在下一跳中引用的 Docker 主机接口后面。我们在[第 2 章](02.html "Chapter 2. Configuring and Monitoring Docker Networks")、*配置和监控 Docker 网络*中看到了这方面的详细示例，当时我们讨论了跨主机的容器到容器连接。虽然这种类型的配置在许多方面都是理想的，但在某些情况下，您可能更喜欢禁用出站伪装功能。例如，如果您不想让您的容器拥有出站连接，禁用伪装将阻止容器与外部网络对话。但是，这只会由于缺少返回路由而阻止出站流量。更好的选择可能是像对待任何其他单独的网络端点一样对待容器，并使用现有的安全设备来定义网络策略。在本食谱中，我们将讨论如何禁用 IP 伪装，以及如何在容器通过外部网络时为它们提供唯一的 IP 地址。
## 做好准备
在本例中，我们将使用单个 Docker 主机。假设本实验中使用的 Docker 主机处于默认配置。您还需要访问权限来更改 Docker 服务级别设置。在某些情况下，我们所做的更改可能要求您具有对系统的根级访问权限。我们还将对 Docker 主机连接的网络设备进行更改。
## 怎么做…
您会记得，Docker 中的 IP 伪装是通过网络过滤器`masquerade`规则来处理的。在 Docker 主机的默认配置中，我们可以通过使用`iptables`检查规则集来查看该规则:
```
user@docker1:~$ sudo iptables -t nat -S
-P PREROUTING ACCEPT
-P INPUT ACCEPT
-P OUTPUT ACCEPT
-P POSTROUTING ACCEPT
-N DOCKER
-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER
-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
-A DOCKER -i docker0 -j RETURN
user@docker1:~$
```
该规则将流量源指定为`docker0`网桥子网，只有 NAT 流量才能离开主机。`MASQUERADE`目标告诉主机将流量源 NAT 到 Docker 主机的下一跳接口。也就是说，如果主机有多个 IP 接口，容器的流量将通过 NAT 到达用作下一跳的接口。这意味着根据 Docker 主机接口和路由表配置，容器流量可能隐藏在不同的 IP 地址后面。例如，考虑一个具有两个接口的 Docker 主机，如下图所示:
![How to do it…](img/B05453_06_01.jpg)
在左侧的示例中，由于`4.2.2.2`的目的地与主机路由表中更具体的前缀不匹配，流量采用默认路由。在这种情况下，主机执行源 NAT，并在流量穿过 Docker 主机到达外部网络时，将流量源从`172.17.0.2`更改为`10.10.10.101`。但是，如果目的地落入`172.17.0.0/16`，容器运输反而会隐藏在`192.168.10.101`界面后面，如右图所示。
可以通过操作`--ip-masq` Docker 选项来更改 Docker 的默认行为。默认情况下，该选项被认为是`true`，可以通过指定该选项并将其设置为`false`来覆盖。我们可以通过在 Docker 系统文件中指定选项来实现这一点，如下所示:
```
ExecStart=/usr/bin/dockerd --ip-masq=false
```
现在重新加载系统配置，重启 Docker 服务，检查 ICC 设置:
```
user@docker1:~$ sudo systemctl daemon-reload
user@docker1:~$ sudo systemctl restart docker
user@docker1:~$
user@docker1:~$ sudo iptables -t nat -S
-P PREROUTING ACCEPT
-P INPUT ACCEPT
-P OUTPUT ACCEPT
-P POSTROUTING ACCEPT
-N DOCKER
-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKERuser@docker1:~$
```
注意`masquerade`规则现在已经不存在了。从该主机上的容器生成的流量将尝试通过 Docker 主机以其实际的源 IP 地址路由出去。Docker 主机上的一个`tcpdump`将使用原始容器 IP 地址捕获从主机的`eth0`接口流出的流量:
```
user@docker1:~$ sudo tcpdump –n -i eth0 dst 4.2.2.2
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
09:06:10.243523 IP 172.17.0.2 > 4.2.2.2: ICMP echo request, id 3072, seq 0, length 56
09:06:11.244572 IP 172.17.0.2 > 4.2.2.2: ICMP echo request, id 3072, seq 256, length 56
```
由于外部网络不知道`172.17.0.0/16`在哪里，这个请求永远不会收到响应，有效地阻止了容器与外部世界的通信。
虽然这可能是防止与外界交流的有用手段，但并不完全理想。首先，你仍然允许交通出去；响应只是不知道该去哪里，因为它试图返回到源。此外，您还影响了 Docker 主机上来自所有网络的所有容器。如果`docker0`网桥分配了一个可路由的子网，并且外部网络知道该子网位于何处，您可以使用现有的安全工具来做出安全策略决策。
例如，让我们假设`docker0`网桥将被分配一个`172.10.10.0/24`子网，并且我们禁用了 IP 伪装。我们可以通过更改 Docker 选项来指定一个新的网桥 IP 地址:
```
ExecStart=/usr/bin/dockerd --ip-masq=false --bip=172.10.10.1/24
```
像以前一样，离开容器并去往外部网络的流量在穿过 Docker 主机时将保持不变。让我们假设一个小型网络拓扑，如下图所示:
![How to do it…](img/B05453_06_02.jpg)
让我们假设是从容器到`4.2.2.2`的流动。在这种情况下，出口流量应该能够正常工作:
*   容器产生流向`4.2.2.2`的流量，并使用其默认网关，即`docker0`网桥 IP 地址
*   Docker 主机进行路由查找，无法找到特定的前缀匹配，并将流量转发到其默认网关(即交换机)。
*   交换机进行路由查找，找不到特定的前缀匹配，然后将流量转发到默认路由，即防火墙。
*   防火墙执行路由查找，无法找到特定的前缀匹配，确保策略中允许流量，对公共 IP 地址执行隐藏 NAT，并将流量转发到其默认路由，即互联网。
因此，在没有任何额外配置的情况下，出口流量应该会到达其目的地。问题出在回程的交通上。当来自互联网目的地的响应返回防火墙时，它将尝试确定如何路由回源。此路由查找可能会失败，导致防火墙丢弃流量。
### 注
在某些情况下，边缘网络设备(在这种情况下是防火墙)会将所有私有 IP 地址路由回内部(在这种情况下是交换机)。在这些情况下，防火墙可能会将返回流量转发到交换机，但交换机不会有导致相同问题的特定返回路由。
为了做到这一点，防火墙和交换机需要知道如何将流量返回到特定的容器。为此，我们需要在每台设备上添加特定路由，将`docker0`网桥子网指向`docker1`主机:
![How to do it…](img/B05453_06_03.jpg)
一旦这些路由到位，在 Docker 主机上旋转的容器应该可以连接到外部网络:
```
user@docker1:~$ docker run -it --name=web1 jonlangemak/web_server_1 /bin/bash
root@132530812e1f:/# ping 4.2.2.2
PING 4.2.2.2 (4.2.2.2): 48 data bytes
56 bytes from 4.2.2.2: icmp_seq=0 ttl=50 time=33.805 ms
56 bytes from 4.2.2.2: icmp_seq=1 ttl=50 time=40.431 ms
```
Docker 主机上的一个`tcpdump`将显示流量正带着原始容器 IP 地址离开:
```
user@docker1:~$ sudo tcpdump –n -i eth0 dst 4.2.2.2
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
10:54:42.197828 IP 172.10.10.2 > 4.2.2.2: ICMP echo request, id 3328, seq 0, length 56
10:54:43.198882 IP 172.10.10.2 > 4.2.2.2: ICMP echo request, id 3328, seq 256, length 56
```
这种类型的配置提供了使用现有安全设备来决定容器是否可以到达外部网络上的某些资源的能力。然而，这也是安全设备离您的 Docker 主机有多近的函数。例如，在这种配置中，Docker 主机上的容器将能够到达连接到交换机的任何其他网络端点。强制点(在本例中是防火墙)仅允许您限制容器与互联网的连接。此外，如果规模较大，为每个 Docker 主机分配可路由的 IP 空间可能会引入 IP 分配限制。
# 管理网络过滤器到 Docker 的集成
默认情况下，Docker 会为您执行大多数网络过滤器配置。它处理一些事情，比如发布端口和出站伪装，以及允许你阻止或允许 ICC。然而，这都是可选的，你可以告诉 Docker 不要修改或增加任何你现有的`iptables`规则。如果这样做，您将需要生成自己的规则来提供类似的功能。如果您已经广泛使用`iptables`规则，并且不希望 Docker 自动对您的配置进行更改，这可能会对您有吸引力。在本食谱中，我们将讨论如何为 Docker 禁用自动`iptables`规则生成，并向您展示如何手动创建类似的规则。
## 做好准备
在本例中，我们将使用单个 Docker 主机。假设本实验中使用的 Docker 主机处于默认配置。您还需要访问权限来更改 Docker 服务级别设置。在某些情况下，我们所做的更改可能要求您具有对系统的根级访问权限。
## 怎么做…
正如我们已经看到的，在网络配置方面，Docker 为您解决了许多繁重的工作。如果需要，它还允许您自行配置这些东西。在我们考虑自己做之前，让我们确认 Docker 实际上代表我们在`iptables`规则方面配置了什么。让我们运行以下容器:
```
user@docker1:~$ docker run -dP --name=web1 jonlangemak/web_server_1
f5b7b389890398588c55754a09aa401087604a8aa98dbf55d84915c6125d5e62
user@docker1:~$ docker run -dP --name=web2 jonlangemak/web_server_2
e1c866892e7f3f25dee8e6ba89ec526fa3caf6200cdfc705ce47917f12095470
user@docker1:~$
```
运行这些容器将产生以下拓扑:
![How to do it…](img/B05453_06_04.jpg)
### 注
后面给出的例子不会直接使用主机的`eth1`界面。显示它是为了说明 Docker 生成的规则是如何以包含 Docker 主机上所有物理接口的方式编写的。
正如我们之前提到的，Docker 使用`iptables`来处理以下项目:
*   出站容器连接(伪装)
*   入站端口发布
*   容器到容器的连接
由于我们使用默认配置，并且我们已经在两个容器上发布了端口，因此我们应该能够在`iptables`中看到所有这三个项目的配置。让我们先看一下 NAT 表:
### 注
在大多数情况下，我更喜欢打印规则并解释它们，而不是将它们列在格式化的列中。每种方式都有取舍，但如果你更喜欢列表模式，可以用`-vL`代替`-S`。
```
user@docker1:~$ sudo iptables -t nat -S
-P PREROUTING ACCEPT
-P INPUT ACCEPT
-P OUTPUT ACCEPT
-P POSTROUTING ACCEPT
-N DOCKER
-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER
-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
-A POSTROUTING -s 172.17.0.2/32 -d 172.17.0.2/32 -p tcp -m tcp --dport 80 -j MASQUERADE
-A POSTROUTING -s 172.17.0.3/32 -d 172.17.0.3/32 -p tcp -m tcp --dport 80 -j MASQUERADE
-A DOCKER -i docker0 -j RETURN
-A DOCKER ! -i docker0 -p tcp -m tcp --dport 32768 -j DNAT --to-destination 172.17.0.2:80
-A DOCKER ! -i docker0 -p tcp -m tcp --dport 32769 -j DNAT --to-destination 172.17.0.3:80
user@docker1:~$
```
让我们回顾一下前面输出中每一条粗体线的重要性。第一个粗体行负责出站隐藏 NAT 或`MASQUERADE`: