[% endblock %}
{% block content %}
{% extends "base.html" %}
{{ f }
forfinfile_list%}
[% block content %}Empty Content Block[% endblock %}
Log Directory
(% block title %}Apache Logviewer - File Listing(% endblock %}
“标题”块允许子页面设置值，该值会在页面的标题标签中显
www.TopSage.com
。当你在一个父模板中定义一个块时，一个
C
创建GUI丨337
DG
---
## Page 352
个链接，通过该链接打开日志文件并进行解析。
循环一个变量file_list，该变量被传递给模板。
载它们的行为。我们准确地使用“标题”和“内容”块来进行操作：在“内容”块中；
获得在base.html中定义的所有内容，并且可以将代码加入到任何指定的代码块中，并重
{% for 1 in loglines %}
[% block content %}
{% block title %}Apache Logviewer - File Viewer{% endblock %]
[% extends "base.html" %}
例11-11:Django文件列表模板(view_log file.html)
页面显示了指定日志文件的细节。
在例11-11中的模板负责创建页面，之前例10-11中的链接可以将用户链接到此页面。该
例11-11所示的模板继承自之前介绍的base模板，并且在“内容”区创建了一个表格。表
图11-4：Apache日志列表
338丨第11章
格标题详细说明了每一列的内容：状态、远端主机地址、
{% endblock %}
{% endfor %]
+http://192.168.205.139:8080/
Status
{{1.status }}
SadFsAaaAzNews(145）brg
{{
www.TopSage.com
o'raitly
filename
biogs
。对于file_list中的每一个元素，创建一
Flle
Liseing
weather
、发送字节数和日志内容。除了
Q-Google
0~111
PDG
---
## Page 353
Django应用，进行数据库连接时，他们经常写模板来展示来自数据库的数据，也使用表
面的示例将更符合人们使用Django的需要，两者只是关注点略有不同。当人们生成一个
我们曾提到，之前的Django示例从Django应用规范演变而来，所以没有使用数据库。下
简单的数据库应用
进行介绍，留作读者的练习。
指定的发送字节数进行过滤、进行合并过滤、在其上添加AJAXy。这里不再对这些改进
逆序排序所有的字段、根据指定的状态代码或是远端主机名进行过滤、根据大于或小于
Django应用将被连接到某种类型的数据库。这里我们还进一步做了一些改进，包括：以
这是非常简单的使用Django生成的应用。事实上，这也是非常典型的应用。绝大多数
图11-5：DjangoApache日志浏览器一
样式。
图11-5显示了应用程序在未排序情况下的样式，图11-6显示了以发送字节数排序后的
该列以升序进行排序。单击“Line”将日志行回到它原始的顺序。
据“bytes sent”对日志行进行排序。单击任何一列的标题（除了“Line”），都会依据
用户点击了“Bytes Sent”列标题（这是一个简单的链接），页面会重载并且视图中将依
详细列出每列的内容外，标题允许用户指定如何对日志文件进行排序。例如，如果一个
200127.0.0.189
200127.0.0.189
200127.0.0.183
404
200127.0.0.183
404127.00.1283
Log Directory
htp:/192.168.205.139:8080/viewlog/linesort/access.log.1/
800
127.00.189
127.0.0.183
127.0.0.1280
127.0.0.10
e Tals Apt（8）AmazonNsws(145）brgereilly blogswezther
127.0.0.1[16/Apr/2008:19:16:20-0400]GET/index.html TP/1.1200 89
127.0.0.1[16/Apr/2008:19:15:39-0400]GE/index.btml B2TP/1.1200 89
127.0.0.1-[16/Apr/2008:19:07:03-0400]“GET/index.html BTTP/1.1#200 89
127.0.0.1--[15/Apr/2008:17:11:47 -0400]“GET /apache2-default/ HTTP/1.1200 44
127.0.0.1[15/Apr/2008:13:27:13-0400] "GE/favicon.ico BTTP/1.1 404280
Line
www.TopSage.com
Apache Logvie
一原始顺序
-FileV
Q-Goog
创建GUI丨339
PDG
---
## Page 354
340丨·第11章
这创建了与基于Django的Apache日志浏览器相同的目录排序结构。以下是一个树状视
下面是创建项目的命令以及使用django-admin命令行工具的应用。
我们将要遵循相同的步骤来创建这个Django项目和应用，就像之前的Django示例一样。
关计算机的描述，包括相关的IP地址，启动了哪些服务，服务器的硬件构成等。
我们将要介绍的是一个计算机系统的清单管理应用程序。该应用程序允许你将一系列有
据维护是如此快速简便。
面。采用这一方法的目的是向你展示将数据库和可利用的前端放在一起来实现输人和数
库模型，如何写一个模板和视图来显示数据，但是数据项会依赖Django的内建管理界
单来验证和处理用户的输人。这个示例将显示如何使用Django的对象关系映射创建数据
图11-6：Django Apache日志浏览器一
图，可以浏览我们创建的目录和文件。
 jmjones@dinkbuntu:~/codes django-admin startproject sysmanage
200127.0.0.189
200127.0.0.189
2001270.0.189
2001270.0.183
200127.0.0.144
304127.0.0.10
StatusHost
Log Directory
sysmanage/
jmjones@dinkbuntu:~/code/sysmanage$
400
404
404
200127.0.0.189
200
127.0.0.1283
127.0.0.1280
1270.0.183
127.0.0.183
127.0.0.1300127.0.0.1
Remote
ved
Talrs
127.0.0.1-
127.0.0.1-[15/Apr/2008:14:21:00-0400）GBT/H2TP/1.1200 89
127.0.0.1-[15/Apr/2008:13:27:09-0400]“GET/HTTP/1.120089
127.0.0.1--[15/Apr/2008:14:17:33-0400]GBT/BTTP/1.1200 83
127.0.0.1
Line
(85)
Nev
(（145）
www.TopSage.com
一以发送字节为序
brg
o'relily blogs
Fiie
weather
Q-Google
HTTP/1.120044
X
"Mozilla/5.0
"Mozilla/5.0
"Mozilla/5.0
"Mozilla/5.0
"Mozilla/5.0
PDG
---
## Page 355
接下来，修改URL映射，这样该项目将包括管理界面。以下是来自URL配置文件的相关
们告诉Django创建数据库时，它将为所有包含的项目创建表格。
单。以下是setings.py文件的相关内容：
除了配置数据库之外，我们还需要包括Django管理界面以及该项目应用中需要的条目清
使用自己的配置文件的习惯。
路径，该路径适用于不同目录下的应用。这是一个非常有用的经典技巧，我们应该养成
录以及我们想去创建的数据库文件的名字到os.path.join()，将获得数据库文件的绝对
路径。调用os.path.dirname(_file_)可以获得setings,py文件的目录。传递文件所在目
置，这样它总会与settings-py文件在相同的目录下。_file_保存了setings.py文件的绝对
得仔细理解。不同于直接指定一个到数据库文件的绝对路径，这里我们对数据库进行配
我们设置“sqlite3”作为数据库引擎。配置数据库的位置行（DATABASE_NAME选项）值
库配置的行：
用程序，我们修改了项目主目录中的settings.Py文件中的一些代码。以下是我们修改数据
用，建议考虑一些鲁棒性更好的数据库，如PostgreSQL。为了配置使用SQLite数据库应
尤其是如果你正测试或开发一个没有将其转化为产品的应用。如果更多人准备尝试该应
在创建项目和应用之后，我们需要配置希望连接的数据库。SQLite是一个不错的选择，
内容：
#Uncomment thisfor admin:
INSTALLED_APPS=（
DATABASE_ENGINE='sqlite3'
'django.contrib.admin',
inventory
sysmanage.inventory',
'django.contrib.sessions',
-- views.py
_init__.py
_·Py
www.TopSage.com
创建GUI|341
---
## Page 356
如果希望查看Django使用来创建数据库的SQL，在项目目录中简单地运行“python
HardwareComponent模型：
id、manufacturer、type、model、vendor_part_number和 description。 这与ORM类定义
Django。Django不仅提供一些硬件生产厂商的列表，而且它提供了CharField类型。
manufacturer、type、model、vendor_part_number和description。这些属性来自
类是Model类型，并且会适当地执行动作。我们为硬件组件定义一些属性：
需要注意的是，HardwrarComponent类继承自Django模块类。这表示HardwareComponent
在配置数据库中定义一个表格（这段代码是我们将要介绍的较大示例的一部分）：
ORM将类转换为表格，并且类的属性添加到这些表格的列中。例如，以下是一段代码，
于ORM。创建并使用一个数据库而不必写一个单独的SQL表达式是可能的。Django的
用程序将会使用的表格和列的定义。使用Django，就像许多其他的web框架一样，依赖
每一个应用目录中（在这里的是“inventory”），有一个名为models.py的文件，包括应
面，我们准备开始定义数据库摘要。在Django中，每一个应用有它自己的摘要定义。在
现在已经配置了一个数据库，添加了管理和清单应用，添加了对URL配置文件的管理界
符号。
释。你可以看到我们已经简单地从包括管理URL配置文件的行的行首位置删除了“#”
创建urls.py的工具完成了创建，并将系统管理的界面进行了包括，但是该行需要取消注
342
在你的表格上创建一个id列，它会作为关键字。以下是SQL表格的创建代码，对应于
用名（小写），然后是一个下划线，最后是小写的类名。如果你没有指定，Django将
非常相似。当你定义了一个model类，Django将创建一个相应的表格，表格的名字是应
class HardwareComponent(models.Model):
description = models.TextField(blank=True, null=True)
model = models.CharField(max_length=50,
manufacturer = models.CharField(max_length=50)
第11章
"description"
type'
id"
integer NOT NULL PRIMARY
text NULL
varchar(5o)NOT NULL,
www.TopSage.com
length=50)
,blank=True, null=True)
PDG
---
## Page 357
class Service(models.Model):
class OperatingSystem(models.Model):
# Create your models here.
from django.db import models
例11-12：数据库设计 (models.py)
型。例11-12是为清单管理应用程序创建的model.Py。
现在已经了解了Django的ORM，接下来将介绍如何为清单管理应用程序创建数据库模
class Server(models.Model):
class HardwareComponent(models.Model):
class Admin:
name=models.CharField(max_length=50)
class Admin:
description = models.TextField(blank=True, null-True)
class Admin:
OS = models.Foreignkey(OperatingSystem)
name= models.CharField(max_length=50)
class Admin::
def
description = models.TextField(blank=True, null=True)
def
def
def
pass
pass
return self.manufacturer
pass
pass
_str_(self):
_str_(self):
_str_(self):
www.TopSage.com
创建GUI| 343
---
## Page 358
关系。address是属性并且应该按约定采用XXX.XXX.XXX.XXx格式。我们在IPAddress与
模型，为的是强调IP地址与服务器之前的关系。我们给IPaddress指定一个属性和一个
HardwareComponent之间创建另一个多对多关系。
创建一个外键关系。由于虚拟化已经很普遍了，这种类型关系意义不大。一台服务
和description。我们可以为硬件制造商创建其他的类、类型，创建它们之间的关系。
HardwareComponent定义5个属性:manufacturer、type、model、vendor_part _number
中添加了硬件或是通过独立的组件建立自己的服务器，该类就非常有意义了。我们为
HardwareComponent类代表我们服务器可能包括的所有硬件组件列表。如果你向系统
的关系。
有name和description属性。每一服务器或许有许多服务。我们将向你展示这些类之间
器、Postfix邮件服务器、Bind DNS服务器以及OpenSSH服务器。OperatingSystem类具
344
最后，IPAddress是一个包含我们追踪的所有服务器的IP地址列表。我们最后列出这个
Server与Service之间创建一个多对多的关系。同样地，每一台服务器或许有许多硬
它们之间有什么关系。每个Server将仅具有一个操作系统，因此对OperationSystem
这与曾经指定给其他类的属性是相同的。为了连接到其他类，我们必须指定Server与
系。首先，我们为每一个Server指定一个名字（name）和属性描述（description）。
但是，同样出于简单原则，我们选择不创建这些关系。
Service类允许我们列出所有可能的运行在服务器上的服务。例如包括Apache web服务
供商关系。每一个服务器具有一个操作系统。当我们介绍服务器时，将向你展示这一
并从operatingSystem进行链接比较合适。但是出于简化及明确的考虑，我们去除了提
name和description属性，这是我们真正需要的。创建一个OperatingSystemVendor类，