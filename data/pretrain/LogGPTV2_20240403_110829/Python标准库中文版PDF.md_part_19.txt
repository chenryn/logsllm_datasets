书( Version 1.1 )超过了 100 页.
从它最简单的格式来看, 这个协议是很简单的. 客户端发送如下的请求到服务
器, 请求一个文件:
GET /hello.txt HTTP/1.0
Host: hostname
User-Agent: name
[optional request body , 可选的请求正文]
服务器返回对应的响应:
HTTP/1.0 200 OK
Content-Type: text/plain
Content-Length: 7
Hello
请求和响应的 headers (报头)一般会包含更多的域, 但是请求 header 中的
Host 域/字段是必须提供的.
header 行使用 "\r\n " 分割, 而且 header 后必须有一个空行, 即使没有正
文 (请求和响应都必须符合这条规则).
剩下的 HTTP 协议格式说明书细节, 例如内容协商, 缓存机制, 保持连接, 等
等, 请参阅 Hypertext TransferProtocol - HTTP/1.1
( http://www.w3.org/Protocols ).
7.2. socket 模块
socket 模块实现了到 socket 通讯层的接口. 你可以使用该模块创建客户端或
是服务器的 socket .
我们首先以一个客户端为例, Example 7-1 中的客户端连接到一个时间协议服务
器, 读取 4 字节的返回数据, 并把它转换为一个时间值.
7.2.0.1. Example 7-1. 使用 socket 模块实现一个时间客户端
File: socket-example-1.py
import socket
import struct, time
# server
HOST = "www.python.org"
PORT = 37
# reference time (in seconds since 1900-01-01 00:00:00)
TIME1970 = 2208988800L # 1970-01-01 00:00:00
# connect to server
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))
# read 4 bytes, and convert to time value
t = s.recv(4)
t = struct.unpack("!I", t)[0]
t = int(t - TIME1970)
s.close()
# print results
print "server time is", time.ctime(t)
print "local clock is", int(time.time()) - t, "seconds off"
server time is Sat Oct 09 16:42:36 1999
local clock is 8 seconds off
socket 工厂函数( factory function )根据给定类型(该例子中为 Internet
stream socket , 即就是 TCP socket )创建一个新的 socket . connect 方法
尝试将这个 socket 连接到指定服务器上. 成功后, 就可以使用 recv 方法读
取数据.
创建一个服务器 socket 使用的是相同的方法, 不过这里不是连接到服务器,
而是将 socket bind (绑定)到本机的一个端口上, 告诉它去监听连接请求, 然
后尽快处理每个到达的请求.
Example 7-2 创建了一个时间服务器, 绑定到本机的 8037 端口( 1024 前的所
有端口是为系统服务保留的, Unix 系统下访问它们你必须要有 root 权限).
7.2.0.2. Example 7-2. 使用 socket 模块实现一个时间服务器
File: socket-example-2.py
import socket
import struct, time
# user-accessible port
PORT = 8037
# reference time
TIME1970 = 2208988800L
# establish server
service = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
service.bind(("", PORT))
service.listen(1)
print "listening on port", PORT
while 1:
# serve forever
channel, info = service.accept()
print "connection from", info
t = int(time.time()) + TIME1970
t = struct.pack("!I", t)
channel.send(t) # send timestamp
channel.close() # disconnect
listening on port 8037
connection from ('127.0.0.1', 1469)
connection from ('127.0.0.1', 1470)
...
listen 函数的调用告诉 socket 我们期望接受连接. 参数代表连接的队列(用
于在程序没有处理前保持连接)大小. 最后 accept 循环将当前时间返回给每个
连接的客户端.
注意这里的 accept 函数返回一个新的 socket 对象, 这个对象是直接连接到
客户端的. 而原 socket 只是用来保持连接; 所有后来的数据传输操作都使用
新的 socket .
我们可以使用 Example 7-3 , ( Example 7-1 的通用化版本)来测试这个服务
器, .
7.2.0.3. Example 7-3. 一个时间协议客户端
File: timeclient.py
import socket
import struct, sys, time
# default server
host = "localhost"
port = 8037
# reference time (in seconds since 1900-01-01 00:00:00)
TIME1970 = 2208988800L # 1970-01-01 00:00:00
def gettime(host, port):
# fetch time buffer from stream server
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
t = s.recv(4)
s.close()
t = struct.unpack("!I", t)[0]
return int(t - TIME1970)
if _ _name_ _ == "_ _main_ _":
# command-line utility
if sys.argv[1:]:
host = sys.argv[1]
if sys.argv[2:]:
port = int(sys.argv[2])
else:
port = 37 # default for public servers
t = gettime(host, port)
print "server time is", time.ctime(t)
print "local clock is", int(time.time()) - t, "seconds off"
server time is Sat Oct 09 16:58:50 1999
local clock is 0 seconds off
Example 7-3 所示的脚本也可以作为模块使用; 你只需要导入 timeclient 模
块, 然后调用它的 gettime 函数.
目前为止, 我们已经使用了流( TCP ) socket . 时间协议还提到了 UDP sockets
(报文). 流 socket 的工作模式和电话线类似; 你会知道在远端是否有人拿起
接听器, 在对方挂断的时候你也会注意到. 相比之下, 发送报文更像是在一间
黑屋子里大声喊. 可能某人会在那里, 但你只有在他回复的时候才会知道.
如 Example 7-4 所示, 你不需要在通过报文 socket 发送数据时连接远程机器.
只需使用 sendto 方法, 它接受数据和接收者地址作为参数. 读取报文的时候
使用 recvfrom 方法.
7.2.0.4. Example 7-4. 使用 socket 模块实现一个报文时间客户端
File: socket-example-4.py
import socket
import struct, time
# server
HOST = "localhost"
PORT = 8037
# reference time (in seconds since 1900-01-01 00:00:00)
TIME1970 = 2208988800L # 1970-01-01 00:00:00
# connect to server
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
# send empty packet
s.sendto("", (HOST, PORT))
# read 4 bytes from server, and convert to time value
t, server = s.recvfrom(4)
t = struct.unpack("!I", t)[0]
t = int(t - TIME1970)
s.close()
print "server time is", time.ctime(t)
print "local clock is", int(time.time()) - t, "seconds off"
server time is Sat Oct 09 16:42:36 1999
local clock is 8 seconds off
这里的 recvfrom 返回两个值: 数据和发送者的地址. 后者用于发送回复数据.
Example 7-5 展示了对应的服务器代码.
Example 7-5. 使用 socket 模块实现一个报文时间服务器
File: socket-example-5.py
import socket
import struct, time
# user-accessible port
PORT = 8037
# reference time
TIME1970 = 2208988800L
# establish server
service = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
service.bind(("", PORT))
print "listening on port", PORT
while 1:
# serve forever
data, client = service.recvfrom(0)
print "connection from", client
t = int(time.time()) + TIME1970
t = struct.pack("!I", t)
service.sendto(t, client) # send timestamp
listening on port 8037
connection from ('127.0.0.1', 1469)
connection from ('127.0.0.1', 1470)
...
最主要的不同在于服务器使用 bind 来分配一个已知端口给 socket , 根据
recvfrom 函数返回的地址向客户端发送数据.
7.3. select 模块
select 模块允许你检查一个或多个 socket , 管道, 以及其他流兼容对象所接
受的数据, 如 Example 7-6 所示.
你可以将一个或更多 socket 传递给 select 函数, 然后等待它们状态改变(可
读, 可写, 或是发送错误信号):
• 如果某人在调用了 listen 函数后连接, 当远端数据到达时, socket 就
成为可读的(这意味着 accept 不会阻塞). 或者是 socket 被关闭或重
置时(在此情况下, recv 会返回一个空字符串).
• 当非阻塞调用 connect 方法后建立连接或是数据可以被写入到 socket
时, socket 就成为可写的.
• 当非阻塞调用 connect 方法后连接失败后, socket 会发出一个错误信
号.
7.3.0.1. Example 7-6. 使用 select 模块等待经 socket 发送的数据
File: select-example-1.py
import select
import socket
import time
PORT = 8037
TIME1970 = 2208988800L
service = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
service.bind(("", PORT))
service.listen(1)
print "listening on port", PORT
while 1:
is_readable = [service]
is_writable = []
is_error = []
r, w, e = select.select(is_readable, is_writable, is_error, 1.0)
if r:
channel, info = service.accept()
print "connection from", info
t = int(time.time()) + TIME1970
t = chr(t>>24&255) + chr(t>>16&255) + chr(t>>8&255) + chr(t&255)
channel.send(t) # send timestamp
channel.close() # disconnect
else:
print "still waiting"
listening on port 8037
still waiting
still waiting
connection from ('127.0.0.1', 1469)
still waiting
connection from ('127.0.0.1', 1470)
...
在 Example 7-6 中, 我们等待监听 socket 变成可读状态, 这代表有一个连接
请求到达. 我们用和之前一样的方法处理 channel socket , 因为它不可能因为
等待 4 字节而填充网络缓冲区. 如果你需要向客户端发送大量的数据, 那么你
应该在循环的顶端把数据加入到 is_writable 列表中, 并且只在 select 允许
的情况下写入.
如果你设置 socket 为非阻塞 模式(通过调用 setblocking 方法), 那么你就
可以使用 select 来等待 socket 连接. 不过 asyncore 模块(参见下一节)提
供了一个强大的框架, 它自动为你处理好了这一切. 所以我不准备在这里多说
什么, 看下一节吧.
7.4. asyncore 模块
asyncore 模块提供了一个 "反馈性的( reactive )" socket 实现. 该模块允许
你定义特定过程完成后所执行的代码, 而不是创建 socket 对象, 调用它们的
方法. 你只需要继承 dispatcher 类, 然后重载如下方法 (可以选择重载某一
个或多个)就可以实现异步的 socket 处理器.
• handle_connect : 一个连接成功建立后被调用.
• handle_expt : 连接失败后被调用.
• handle_accept : 连接请求建立到一个监听 socket 上时被调用. 回调
时( callback )应该使用 accept 方法来获得客户端 socket .
• handle_read : 有来自 socket 的数据等待读取时被调用. 回调时应该
使用 recv 方法来获得数据.
• handle_write : socket 可以写入数据的时候被调用. 使用 send 方法写
入数据.
• handle_close : 当 socket 被关闭或复位时被调用.
• handle_error(type, value, traceback) 在任何一个回调函数发生
Python 错误时被调用. 默认的实现会打印跟踪返回消息到
sys.stdout .
Example 7-7 展示了一个时间客户端, 和 socket 模块中的那个类似.
7.4.0.1. Example 7-7. 使用 asyncore 模块从时间服务器获得时间
File: asyncore-example-1.py
import asyncore
import socket, time
# reference time (in seconds since 1900-01-01 00:00:00)
TIME1970 = 2208988800L # 1970-01-01 00:00:00
class TimeRequest(asyncore.dispatcher):
# time requestor (as defined in RFC 868)
def _ _init_ _(self, host, port=37):
asyncore.dispatcher._ _init_ _(self)
self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
self.connect((host, port))
def writable(self):
return 0 # don't have anything to write
def handle_connect(self):
pass # connection succeeded
def handle_expt(self):
self.close() # connection failed, shutdown
def handle_read(self):
# get local time
here = int(time.time()) + TIME1970
# get and unpack server time
s = self.recv(4)
there = ord(s[3]) + (ord(s[2])
time difference is 28
log: closing channel 192:
如果你不想记录任何信息, 那么你可以在你的 dispatcher 类里重载 log 方
法.
Example 7-8 展示了对应的时间服务器. 注意这里它使用了两个 dispatcher
子类, 一个用于监听 socket , 另个用于与客户端通讯.
7.4.0.2. Example 7-8. 使用 asyncore 模块实现时间服务器
File: asyncore-example-2.py
import asyncore
import socket, time
# reference time
TIME1970 = 2208988800L
class TimeChannel(asyncore.dispatcher):
def handle_write(self):
t = int(time.time()) + TIME1970
t = chr(t>>24&255) + chr(t>>16&255) + chr(t>>8&255) + chr(t&255)
self.send(t)
self.close()
class TimeServer(asyncore.dispatcher):
def _ _init_ _(self, port=37):
self.port = port
self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
self.bind(("", port))
self.listen(5)
print "listening on port", self.port
def handle_accept(self):
channel, addr = self.accept()
TimeChannel(channel)
server = TimeServer(8037)
asyncore.loop()
log: adding channel 
listening on port 8037
log: adding channel 
log: closing channel 52:
除了 dispatcher 外, 这个模块还包含一个 dispatcher_with_send 类. 你可
以使用这个类发送大量的数据而不会阻塞网络通讯缓冲区.
Example 7-9 中的模块通过继承 dispatcher_with_send 类定义了一个
AsyncHTTP 类. 当你创建一个它的实例后, 它会发出一个 HTTP GET 请求并把
接受到的数据发送到一个 "consumer" 目标对象
7.4.0.3. Example 7-9. 使用 asyncore 模块发送 HTTP 请求
File: SimpleAsyncHTTP.py
import asyncore
import string, socket
import StringIO
import mimetools, urlparse
class AsyncHTTP(asyncore.dispatcher_with_send):
# HTTP requester
def _ _init_ _(self, uri, consumer):
asyncore.dispatcher_with_send._ _init_ _(self)
self.uri = uri
self.consumer = consumer
# turn the uri into a valid request
scheme, host, path, params, query, fragment =
urlparse.urlparse(uri)
assert scheme == "http", "only supports HTTP requests"
try:
host, port = string.split(host, ":", 1)
port = int(port)
except (TypeError, ValueError):
port = 80 # default port
if not path:
path = "/"
if params:
path = path + ";" + params