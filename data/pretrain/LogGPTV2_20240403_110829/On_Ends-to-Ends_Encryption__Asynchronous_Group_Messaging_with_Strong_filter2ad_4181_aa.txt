title:On Ends-to-Ends Encryption: Asynchronous Group Messaging with Strong
Security Guarantees
author:Katriel Cohn-Gordon and
Cas Cremers and
Luke Garratt and
Jon Millican and
Kevin Milner
On Ends-to-Ends Encryption:
Asynchronous Group Messaging with Strong Security Guarantees
Katriel Cohn-Gordon∗1, Cas Cremers2, Luke Garratt1, Jon Millican3, and Kevin Milner1
1Department of Computer Science, University of Oxford
2CISPA Helmholtz Center for Information Security, Saarland Informatics Campus, Germany
3Facebook
Version 2.3, March 2nd, 2020†
Abstract
In the past few years secure messaging has become mainstream, with over a billion
active users of end-to-end encryption protocols such as Signal. The Signal Protocol provides
a strong property called post-compromise security to its users. However, it turns out that
many of its implementations provide, without notiﬁcation, a weaker property for group
messaging: an adversary who compromises a single group member can read and inject
messages indeﬁnitely.
We show for the ﬁrst time that post-compromise security can be achieved in realistic,
asynchronous group messaging systems. We present a design called Asynchronous Ratchet-
ing Trees (ART), which uses tree-based Diﬃe-Hellman key exchange to allow a group of
users to derive a shared symmetric key even if no two are ever online at the same time.
ART scales to groups containing thousands of members, while still providing provable
security guarantees. It has seen signiﬁcant interest from industry, and forms the basis
for two draft IETF RFCs and a chartered working group. Our results show that strong
security guarantees for group messaging are practically achievable in a modern setting.
∗K.C-G. thanks Merton College and the Oxford CDT in Cyber Security for their support.
†An extended abstract of this paper appears at ACM CCS 2018 [15]; this is the full version. A summary of
changes is given in Appendix F.
1
forward
secrecy (FS)
post-compromise
security (PCS)
communications
under attack
compromise
communications
under attack
compromise
Figure 1: Attack scenarios of forward secrecy and PCS, with the communications under attack marked
in bold and time from left to right. Forward secrecy protects against later compromise; PCS protects
against earlier compromise.
1 Introduction
The security of secure messaging systems has improved substantially over recent years; WhatsApp
now provides end-to-end encryption for its billion active users, based on Open Whisper Systems’
Signal Protocol [38, 55], and The Guardian publishes Signal contact details for its investigative
journalism teams [53].
The Signal Protocol and its variants oﬀer a security property called Post-Compromise
Security (PCS) [14], sometimes referred to as “future secrecy” or “self-healing”. For PCS, even if
Alice’s device is entirely compromised by an adversary, she will automatically re-establish secure
communications with others after a single unintercepted exchange, even if she was not aware
of the compromise. Thus, PCS limits the scope of a compromise, forcing an adversary to act
as a permanent active man-in-the-middle if they wish to exploit knowledge of a long-term key.
This can serve as a powerful impediment to mass-surveillance techniques. Thus far, PCS-style
properties have only been proven for point-to-point protocols [13], and they are only achievable
by stateful ones [14]. Figure 1 illustrates the diﬀerence between forward secrecy and PCS.
Because it raises the bar for mass-surveillance, we see PCS as an important property for any
modern secure messaging protocol.
Systems like WhatsApp and Signal are designed to be usable by anyone, not just experts,
and to provide much of the same functionality as existing insecure messaging applications.
To that end, they must work within a number of constraints, an important one of which is
asynchronicity: Alice must be able to send messages to Bob even if Bob is currently oﬄine.
Typically, the encrypted message is temporarily stored on a (possibly untrusted) server, to be
delivered to Bob once he comes online again. Asynchronicity means that standard techniques
for forward secrecy, such as a DH key exchange, do not apply directly. This has driven the
development of novel techniques to achieve forward secrecy without interaction, e.g., using
sets of precomputed DH “prekeys” [37] that Bob uploads to a server, or by using puncturable
encryption [25].
Group and multi-device messaging is important for many users, and various implementers
have designed their own protocols to support it. However, since group conversations must also be
asynchronous, it is not straightforward to adapt existing group key exchange (GKE) protocols,
which usually require a number of interactive rounds of communication, to this context. An
alternative is to use a two-party protocol between every pair of group members, but as group
sizes become larger, this leads to ineﬃcient systems in which the bandwidth and computational
cost for sending a message grows linearly with the group size. In many real-world scenarios,
this ineﬃciency is a problem, especially where bandwidth is restricted or expensive e.g., 2G
networks in the developing world1.
1The 2015 State of Connectivity report by internet.org [26] lists aﬀordability of mobile data as one of
2
In fact, modern messaging protocols which provide PCS for two-party communications
generally drop this guarantee for their group messaging implementations without notifying
the users. For example, WhatsApp, Facebook Messenger and Google Allo have mechanisms
to achieve PCS for two-party communications, but for conversations containing three or more
devices they use a simpler key-transport mechanism (“sender keys”) which does not achieve
PCS [20, 55]. Indeed, in these systems, an adversary who fully compromises a single group
member can indeﬁnitely and passively read future communications in that group (though certain
events, e.g. removing a device, may cause group changes and generation of new keys). In
practice this means that in these apps, if a third party is added to a two-party communication,
the security of the communication is decreased without informing the users.
The question thus arises: is there a secure group messaging solution that (i) allows participants
to communicate asynchronously, (ii) scales sublinearly in the group size, and (iii) admits strong
security guarantees such as PCS? In this paper we address this open question, and show how to
devise a protocol that achieves it. Our main contributions are:
(1) We design a fully-asynchronous tree-based GKE protocol that oﬀers modern strong security
properties, called Asynchronous Ratcheting Trees (ART). ART derives a group key for a set
of agents without any pair needing to be online at the same time, a requirement for modern
messaging protocols. Notably, ART’s properties include PCS: messages can be secret even
after total compromise of an agent.
ART has seen signiﬁcant interest from industry and is the basis of the IETF MLS working
group and two draft RFCs [42].
(2) We give a game-based computational security model for our protocol, building on multi-
stage models to capture the key updates. This allows us to encode strong properties such as
PCS. We give a game-hopping computational proof of the unauthenticated core of our ART
protocol, with an explicit reduction to the PRF-ODH problem, and a mechanised symbolic
veriﬁcation of its authentication property using the Tamarin prover. Our hybrid argument
follows e.g. [33].
(3) We present and evaluate a proof-of-concept Java implementation of ART’s core algorithms,
increasing conﬁdence in the practicality and feasibility of our design.
Our design approach is of independent interest beyond our speciﬁc construction. In particular,
by using simple and well-studied constructions, our design should allow many insights from the
existing literature in (synchronous) group protocols to be applied in the asynchronous setting.
We give examples, including dynamic groups, in Section 8. We provide the proof-of-concept
implementation and evaluation data at [41].
2 Background and Related Work
There has been research into group messaging protocols for decades, and we do not aim to
survey the entire ﬁeld of literature. We discuss here several previous classes of approach. A key
point which distinguishes our work from past research is our focus on asynchronicity and PCS;
ART can derive a group key with PCS even if no two participants are ever online at the same
time.
the four major barriers to global connectivity, with a developing-world average monthly data use of just 255
MB/device.
3
grk
ι(gι(gλ1λ2 )ι(gλ3λ4 )) ; gι(gι(gλ1λ2 )ι(gλ3λ4 ))
ι(gι(gλ5λ6 )ι(gλ7 )) ; gι(gι(gλ5λ6 )ι(gλ7 ))
ι(gλ1λ2) ; gι(gλ1λ2 )
ι(gλ3λ4) ; gι(gλ3λ4 )
ι(gλ5λ6) ; gι(gλ5λ6 )
λ7 ; gλ7
λ1 ; gλ1
λ2 ; gλ2
λ3 ; gλ3
λ4 ; gλ4
λ5 ; gλ5
λ6 ; gλ6
Figure 2: Example DH tree. We mark each node with its secret and public keys, separated by ; .
Recall that the λj denote leaf keys, and ι(·) denotes the mapping from group elements to integers. The
path from λ5 to the root is marked in solid red, and the boxed nodes lie on its copath. An agent who
knows λ5 and the public keys on its copath can compute grk by repeated DH operations.
2.1 Other Group Messaging Protocols
OTR-style Goldberg, Ustaoglu, Van Gundy, and Chen [23] deﬁne Multi-Party Oﬀ the Record
Messaging (mpOTR) as a generalisation of the classic OTR [6] protocol, aiming for security and
deniability in online messaging. mpOTR has since given rise to a number of interactive protocols
such as (N + 1)sec [19]. The general design of this family is as follows. First, parties conduct a
number of interactive rounds of communication in order to derive a group key. Second, parties
communicate online, perhaps performing additional cryptographic operations. Finally, there
may be a closing phase (for instance, to assess transcript consistency between all participants).
All of these protocols are intrinsically synchronous: they require all parties to come online at
the same time for the initial key exchange. This is not a problem in their context of XMPP-style
instant messaging, but does not work for mobile and unreliable networks.
Assuming an authentic network [11, 52] discuss “asynchronous” GKE in the setting
of distributed systems, in the sense that they do not rely on a centralised clock. They require
several interactive rounds of communication, and do not provide PCS.
Physical approaches Some work uses physical constraints to restrict malicious group
members. For example, HoPoKey [40] has its participants arrange themselves into a circle, with
neighbours interacting. This allows it to derive strong security properties. We, however, will
not assume physical co-location.
Sender Keys
If participants have secure pairwise channels, they can send encrypted
“broadcast” keys to each group member separately, and then broadcast their messages encrypted
under those keys. This is implemented in libsignal as the “Sender Keys” variant of the Signal
Protocol [55]. However, it sacriﬁces some of the strong security properties achieved by the
Double Ratchet: if an adversary ever learns a sender key, it can subsequently eavesdrop on all
messages and impersonate the key’s owner in the group, even though it cannot do so over the
pairwise Signal channels (whose keys are continuously updated). This variant does not have
PCS.
Regularly broadcasting new sender keys over the secure pairwise channels prevents this type
of attack. However, since new sender keys must be sent separately to each group member, this
scales linearly in the size of the group for a given key rotation frequency.
n-party DH Perhaps the most natural generalisation of DH key updates to n parties
would be a primitive that allows for the following: given all of gx0, . . . , gxn and a single xi
(i ≤ n), derive a value grk which is hard to compute without knowing one of the xi. With
4
n = 2 this can be achieved by traditional DH, and with n = 3 Joux [27] gives a pairing-based
construction. However, for general n construction of such a primitive is a known open problem.
[4] essentially generalise the Joux protocol with a construction from an (n − 1)-non-degenerate
linear map on the integers, and [5, 36] construct it from iO.
Tree-based group DH There is a very large body of literature on tree-based group key
agreement schemes. An early example is the “audio teleconference system” of Steer, Strawczynski,
Diﬃe, and Wiener [51], and the seminal academic work is perhaps Wallner, Harder, and Agee
[54] or Wong, Gouda, and Lam [56]. Later examples include [7, 9, 12, 18, 28, 29, 30, 31, 32, 35,
44, 45, 57], among many others. These protocols assign private DH keys to leaves of a binary2
tree, deﬁning (i) gxy as the secret key of a node whose two children have secret keys x and
y, and (ii) ggxy as its public or ‘blinded’ key. Recursively computing secret keys through the
tree, starting from the leaves, yields a value at the root which we call the “tree key”, with the
property that it can only be computed with knowledge of at least one secret leaf key. We depict
a generic DH tree in Figure 2.
In order to compute the secret key gxy = (gy)x assigned to a non-leaf node, an agent must
know the secret key x of one of its children and the public key gy of the other. Thus, to compute
the tree key requires an agent to know (i) one secret leaf key λj, and (ii) all public node keys
pk1 to pkn along its copath, where the copath of a node is the list of sibling nodes along its path
to the tree root. The group key is computed by alternately exponentiating the next public key
with the current secret, and applying the mapping from group elements to integers.
The online exchanges in these protocols are due to, at least in part, the requirement for
agents to know the public keys on their copath. For example, in Figure 2 on the preceding page,
node 5 must know (but cannot compute just from the gλj) all boxed public keys. Other agents
may be chosen by the messaging system to compute and broadcast public keys at intermediate
nodes; for example, Kim, Perrig, and Tsudik [32] describe a system of subtree “sponsors” who
broadcast select public keys. However, none of these solutions provide PCS, because they do
not support updating keys.
2.2 Deployed Implementations
Several widely-used mobile apps deploy encrypted group messaging protocols. We survey some
of the most popular, giving asymptotic eﬃciencies for three main designs in Table 1 on page 7.
In concurrent work, [46] examine the group messaging protocols used by WhatsApp, Signal and
Threema, ﬁnding a number of vulnerabilities related to their group operations.
WhatsApp implements end-to-end encryption for group messaging using the Sender Keys
variant of Signal for all groups of size 3+, using the existing support for Signal in pairwise
channels. Sender keys are rotated whenever a participant is removed from a group but otherwise
are never changed; an adversary who learns a sender key can therefore impersonate or eavesdrop
on its owner until the group changes.
WhatsApp also supports multiple devices for a single user. To do so, it deﬁnes the mobile
phone as a master device and allows secondary devices to connect by scanning a QR code.
When Alice sends a message from a secondary device, WhatsApp ﬁrst sends the message to
her mobile phone, and then over the pairwise Signal channel to the intended peer. While this
method does allow for multiple device functionality, it suﬀers from the downside that Alice
cannot use WhatsApp from any device if her phone is oﬄine.
2Some constructions use ternary trees; the underlying concept is the same.
5
Facebook Messenger Secret Conversations
similarly uses the Sender Keys variant of
Signal for all conversations involving 3+ devices [20]. As in the WhatsApp implementation,
Sender Keys are only rotated when a device is removed from a conversation.
Apple iMessage uses pairwise channels: one copy of each message is encrypted and sent
for each group member over pairwise encrypted channels. We remark that this indicates that in
a group of size n, performing ∼ 2n asymmetric operations per message was considered practical
on a 2009 iPhone 3GS.
Signal The Signal mobile application uses pairwise Signal channels for group messaging3,
with additional devices on a Signal account implemented as ﬁrst class participants.
SafeSlinger
[21] is a secure messaging app whose goal is usable, “privacy-preserving and
secure group credential exchange”. It aims for message secrecy under an adversary model that
allows for malicious participants. The two greatest diﬀerences between ART and SafeSlinger are
security goals and synchronicity. First, ART is explicitly designed to achieve PCS of message
keys, while SafeSlinger instead aims for (non-forward) secrecy and just derives a single group
key. Of necessity [14], ART must therefore support stateful and iterated key derivations. Using
SafeSlinger’s unbalanced DH key tree with ART’s key updates, while reducing the computational
load on the initiator, would take linear (versus logarithmic) time. Second, SafeSlinger is a
synchronous protocol with commitment, veriﬁcation and secret-sharing rounds, in which all
group members must be online concurrently. ART, on the other hand, is an asynchronous
protocol which supports messaging oﬄine members.
3 Objectives
Security properties for AKE protocols are extremely well-studied. We now describe our high-level
threat model and security goals.