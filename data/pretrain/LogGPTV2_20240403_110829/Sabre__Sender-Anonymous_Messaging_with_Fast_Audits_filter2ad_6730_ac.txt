typically parameterized by (i) the number “ℓ” of parties to
the computation, and (ii) the size “𝑡+1” of coalition needed to
violate the privacy of non-coalition members’ inputs.
1) Secure (2 + 1)-party computation: One special case of
MPC is so-called secure (2+1)-party computation (also known
as server-aided 2-party computation), wherein two mutually
distrusting parties enlist the help of a semi-honest third
party (who provides no input and receives no output) to
assist in the computation. Such protocols have received
considerable attention due to their superior performance
relative to “pure” 2-party protocols or ℓ-party protocols
secure against stronger attackers. The Sabre audit protocols
leverage (2+1)-party computation based on Du-Atallah mul-
tiplication [13], a variant of the well-known Beaver-triplet
multiplication [4] that leverages the semi-honest third party
to replace oblivious transfers (or homomorphic encryption)
with “free” operations. A brief description of Du-Atallah
multiplication appears in Appendix B.
2) MPC-in-the-head: MPC-in-the-head [7], [16], [19], [20]
is a conceptual framework for constructing zero-knowledge
proofs of knowledge (ZKPoKs) from MPC building blocks.
ZKPoKs based on MPC-in-the-head leverage the dual obser-
vations that (i) MPC protocols are simulatable—even from
the perspective of an “insider” (i.e., an attacker who controls
a size-𝑡 subset of
the parties to the computation)—and
(ii) dishonest behaviour by a coalition in an MPC protocol
execution necessarily yields incontrovertible evidence in the
coalition members’ joint view.
Consider an MPC protocol Π for the witness-checking
procedure of some NP relation 𝑅. In light of the preceding
two observations, one can transform Π into a ZKPoK for 𝑅
as follows: Given a (public) instance 𝐼 and (private) witness
𝑤 such that 𝑅(𝐼, 𝑤) = 1, the prover secret shares 𝑤 among
ℓ imaginary computation parties, and then it simulates a
complete run of Π among these imaginary parties, up to
and including the point where the functionality attests to the
validity of 𝑤 by outputting 1. The prover commits (say, via
Merkle tree) to the simulated view of each imaginary party,
presenting the resulting commitments to the verifier.
If the prover is attempting to cheat, then incontrovertible
evidence must exist in at least one coalition’s view; thus, the
verifier attempts to uncover such evidence by challenging
the prover to reveal the views of a random size-𝑡 coalition
of parties. To amplify the probability of detecting cheating—
a probability that varies based on the collusion threshold 𝑡
and number of imaginary parties ℓ —the prover and verifier
engage in multiple parallel instances of this procedure, each
one operating on a “fresh” simulation.
3) The LowMC block cipher: LowMC [1] is a block cipher
specially designed for secure computation settings like MPC
protocols based on linear secret sharing, fully homomor-
phic encryption, or ZKPoKs. In such applications,
linear
operations are generally regarded as “free”, while non-linear
operations (e.g., the multiplication of two or more unknowns)
are costly; thus, LowMC strives to balance multiplicative
complexity and depth on one hand with concrete security on
the other. In the context of (2+1)-party computation (and as-
sociated MPC-in-the-head), multiplicative complexity dictates
communication cost
(transcript size) while multiplicative
depth dictates round complexity (dependency-chain length
for the verifier). Jumping ahead, Sabre employs LowMC to
construct the length-doubling PRGs in its DPFs.3 Several
tuning knobs allow protocol designers to tailor LowMC’s
performance for an intended application; we empirically
measure various knob settings in Appendix C.
III. System Design
This section presents the system design of Sabre in both
the sender-anonymous bulletin-board model (Sabre-BB) and
the sender-anonymous mailbox model (Sabre-M). Appen-
dix D describes four distinct variants of Sabre-M: One that
closely mimics the design of Express; a second that adaptively
modifies the mapping between DPFs and mailbox addresses
to improve efficiency; and a third and fourth that push the
optimization in the second variant to its logical extreme. The
first three variants serve as “stepping stones” toward Sabre-M
(which is what we describe in the main text).
Each of Sabre-BB and Sabre-M is instantiable in three
ways (deriving from three ways to instantiate the audit
3The leaf-stretching PRG need not be amenable to fast (2 + 1)-party
computation or SNIPs and, therefore, uses a faster AES-based construction.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 14:58:18 UTC from IEEE Xplore.  Restrictions apply. 
51957
protocol); namely, as (i) a 2-server version using “2-verifier
MPC-in-the-head”, (ii) a 3-server version using “3-verifier
MPC-in-the-head”, or (iii) a 3-server version directly using
secure (2 + 1)-party computation. Except where otherwise
specified, all comparisons of Sabre’s performance to those
of Riposte and Express refer to a 2-server instantiation—
which provides the strongest security guarantees but the
poorest performance of the three options. That said, we begin
with a high-level description that abstracts auditing into an
inscrutable black box, before circling back to flesh out the
details of auditing in Section V. The reader should bear in
mind that Sabre auditing requires just O(𝜆 lg 𝑛) work to the
Ω(𝜆 𝑛) work required by Riposte and Express auditing, and
that Sabre auditing renders judgement before the servers ever
“evaluate” their DPF keys (a linear-cost operation). Indeed,
Sabre’s improved DoS resistance stems from Sabre servers’
ability to rapidly audit incoming DPF keys.
A. Sabre for sender-anonymous bulletin boards
Consider a (2- or 3-server) Sabre-BB instance with security
parameter 𝜆 ∈ N (say, 𝜆 = 128) and a bulletin board compris-
ing 𝑛 = 19.5𝑚 buckets each capable of holding a single 𝐿-bit
message. (Thus, we have domain 𝐷 = {0, . . . , 𝑛−1} and range
2𝐿.) The design of Sabre-BB tightly parallels that of
𝑅 = F
Riposte, save for the adoption of Boyle et al.’s more compact
DPFs and the new audit protocol: A sender who wishes to
post a message 𝑀 ∈ F
2𝐿 to the bulletin board
1) samples a random bucket index 𝑖 ∈R 𝐷;
2) samples (dpf0, dpf1) ← Gen(1𝜆, 𝐷, 𝑅; 𝑖, 𝑀); and then
3) sends dpf𝑏 to server 𝑏 for 𝑏 = 0, 1.
Upon receiving and auditing dpf𝑏, server 𝑏 constructs the
vector 𝑀𝑏 ∈ (F
2𝐿)1×𝑛 in which the 𝑗 th component equals
Eval(dpf𝑏, 𝑗) for 𝑗 = 0, . . . , 𝑛 − 1; server 𝑏 adds 𝑀𝑏 to its
bulletin board database to effectuate the write.4 We remark
that 𝑀𝑏 is efficiently computable (with a cost dominated by
𝑛 − 1 length-doubling PRG evaluations and 𝑛 evaluations of
the leaf-stretching PRG) using the so-called full-domain eval-
uation procedure described by Boyle et al. [6; §3.2.3].
As per Definition 4, 𝑀0 + 𝑀1 ∈ (F
2𝐿)1×𝑛 has message 𝑀
in its 𝑖 th column and zero elsewhere—provided the sender
generated (dpf0, dpf1) honestly, which the servers confirm via
any of the three audit protocol instantiations.
B. Sabre for sender-anonymous mailboxes
We now describe Sabre-M, the most performant variant
of Sabre in the mailbox model. (Recall that we describe
three additional “stepping-stone” variants in Appendix D.)
Consider a (2- or 3-server) Sabre-M instance with security
parameter 𝜆 ∈ N (say, 𝜆 = 128) and 𝑛 mailboxes each capable
of holding a single 𝐿-bit message. (Thus, we have domain
𝐷 = {0, . . . , 𝑛− 1} and range 𝑅 = F
2𝐿). The design of Sabre-M
closely follows that of Express.
4As in Riposte, Sabre-BB writers can employ Newton sums, writing pairs
(𝑀, 𝑀2) to hedge against inevitable 2-way collisions (cf. Footnote 2).
Writing: To write a message 𝑀 ∈ F
2𝐿 to the 𝑖 th mailbox, the
guished input 𝑖 and mailbox address addr𝑖; and then
Mailbox registration: As with Express, prospective recipi-
ents must pre-register a mailbox with the servers. In Sabre-M,
the servers assign mailbox addresses deterministically using
a pseudorandom function (PRF) 𝐹 : {0, 1}𝜆 × 𝐷 → {0, 1}𝜆;
specifically, to register the 𝑖 th mailbox, the servers compute
addr𝑖 ← 𝐹( ˜𝑘, 𝑖) using a long-lived secret key ˜𝑘 ∈ {0, 1}𝜆
held by the servers, and then they return (𝑖, addr𝑖) to the
registrant.
sender must know (𝑖, addr𝑖). Armed with this pair, it
1) samples (dpf0, dpf1) ← Gen(1𝜆, 𝐷, 𝑅; 𝑖, 𝑀);
2) samples additive sharings [𝑖] and [addr𝑖] of the distin-
3) sends (dpf𝑏, [𝑖]𝑏, [addr𝑖]𝑏) to server 𝑏 for 𝑏 = 0, 1.
to the DPF is 𝑖 ∈
Notice that
{1, . . . , 𝑛}, in contrast to addr𝑖 ∈ {0, 1}𝜆 as used in Express.
The discussion and experiments in Appendix D highlight the
performance benefits of this difference.
Upon receiving and auditing (dpf𝑏, [𝑖]𝑏, [addr𝑖]𝑏), server 𝑏
2𝐿)1×𝑛 using the full-
expands dpf𝑏 to the vector 𝑀𝑏 ∈ (F
domain evaluation procedure [6; §3.2.3], and then it adds 𝑀𝑏
to its mailbox database to effectuate the write.
Auditing: Auditing in Sabre-M comprises two distinct
steps, namely (i) checking that (dpf0, dpf1) is a well-formed
DPF key pair (having distinguished input 𝑖), and (ii) verifying
that [addr𝑖] correctly shares the 𝑖 th mailbox address.
the distinguished input
For the former step (i.e., auditing the DPFs), Sabre-M uses
any one of the three versions described in Section V; for
the latter step (i.e., verifying the mailbox address) it uses a
constant-complexity protocol described in Section IV. Thus,
the entire auditing procedure has complexity logarithmic
in 𝑛, allowing the servers to rapidly reject bogus write
requests from a would-be resource-exhaustion DoS attacker.
The benefits of rapid auditing are evident in our experimental
evaluation in Section VII.
IV. Verifying Mailbox Addresses
This section describes how Sabre-M servers verify that
incoming requests target valid mailbox addresses. The idea
is quite simple: Recall that, along with dpf𝑏, the sender
submits shares [𝑖]𝑏 and [addr𝑖]𝑏 of the distinguished input
𝑖 and the associated mailbox address addr𝑖. Also recall that
the servers hold in common a secret key ˜𝑘 ∈ {0, 1}𝜆 for
a PRF 𝐹 : {0, 1}𝜆 × 𝐷 → {0, 1}𝜆. Intuitively, 𝐹 defines a
deterministic mapping from the distinguished inputs 𝑖 ∈ 𝐷 to
pseudorandom mailbox addresses addr𝑖 (cid:66) 𝐹( ˜𝑘; 𝑖); thus, the
servers can use [𝑖] and their knowledge of ˜𝑘 to verify that
[addr𝑖] shares the “correct” mailbox address.
To this end, the servers input [𝑖] to 𝐹 to compute a
𝑖 ], after which they hold two independent
fresh sharing [addr′
sharings: one, [addr𝑖], of the sender-claimed address and
another, [addr′
𝑖 ], of the server-computed address. Server 𝑏
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 14:58:18 UTC from IEEE Xplore.  Restrictions apply. 
61958
computes [𝐴]𝑏 (cid:66) [addr𝑖]𝑏 + [addr′
the pair check if
𝑖 ]𝑏 for 𝑏 = 0, 1, and then
𝐴 = [𝐴]0 + [𝐴]1
= ([addr𝑖]0 + [addr′
= ([addr𝑖]0 + [addr𝑖]1) + ([addr′
= addr𝑖 + addr′
= 0,
𝑖
𝑖 ]0) + ([addr𝑖]1 + [addr′
𝑖 ]0 + [addr′
𝑖 ]1)
𝑖 ]1)
where (because arithmetic is in F
2𝜆) the last equality holds if
and only if addr𝑖 = addr′
𝑖 . In particular, the check succeeds if
and only if 𝐴0 = 𝐴1, which the servers can confirm alongside
the DPF-verification portion of the audit protocol. Performing
address checking early—before incurring the O(lg 𝑛) cost of
DPF verification—ensures that Sabre-M servers can always
reject malicious write requests faster than a would be DoS
attacker can produce them (see Section VII-C).
V. The Sabre Audit Protocol
The audit protocol verifies the well-formedness of DPF keys
submitted by writers in both the bulletin-board and mailbox
model variants of Sabre. It is instantiable in three distinct
ways: as (i) a secure (2+1)-party computation, (ii) a 3-verifier
MPC-in-the-head SNIP, or (iii) a 2-verifier MPC-in-the-head
SNIP. The latter two instantiations build on the first to pro-
vide progressively stronger security guarantees. Specifically,
(i) by recasting the (2 + 1)-party computation as a 3-verifier
MPC-in-the-head SNIP, the second instantiation maintains
the efficiency of the first while removing the threat of a
malicious server deviating from the MPC in a bid to violate
sender-anonymity, and (ii) by eliminating one of the verifiers,
the 2-verifier SNIP makes sender anonymity contingent on a
strictly weaker non-collusion assumption (at the expense of
some nontrivial communication and computation overhead).
We stress that—similar to Riposte and Express—all three
instantiations still require semi-honest (and non-colluding)
servers to guarantee protocol correctness.
A. Secure (2 + 1)-party auditing
Following Corollary 1 (in Section II-A), the (2 + 1)-party
audit protocol demonstrates the existence of a 1-path from
the root of the binary-tree representation of a DPF to the leaf
corresponding to its distinguished input. It does so via an
alternating sequence of two simple functionalities: (i) obliv-
ious length-doubling PRG evaluation and (ii) conditional
swapping on the components of an ordered pair.
length-doubling PRG: The oblivious PRG
evaluation functionality ([𝑥], [𝑦]) ← FPRG([𝑧]) uses the
Matyas-Meyer-Oseas (MMO) one-way compression func-
tion [24]: Given a block cipher Enc with 𝜆-bit blocks, define
𝐺2× : {0, 1}𝜆 → {0, 1}𝜆 × {0, 1}𝜆 via
𝐺2×(𝑧) (cid:66)(cid:0)Enc𝐾(𝑧) ⊕ 𝑧, Enc𝐾(𝑧⊕1) ⊕ (𝑧⊕1)(cid:1) ,
(1)
where 𝐾 is a fixed (publicly known) key. Sabre uses fixed-key
LowMC as the block cipher in Equation (1). We remark that
using a fixed, publicly known key in LowMC eliminates all
1) Oblivious
non-linear operations outside of the S-boxes, and it provides
new opportunities for preprocessing-based optimizations in-
volving round-key matrices. The S-boxes operate on ordered
triples of bits, and each S-box in a round can be evaluated
(in parallel) using just three 1-bit multiplications a piece,
leveraging their representation in algebraic normal form [1;
Appendix C]:
(𝑎, 𝑏, 𝑐) ↦→ (𝑎 ⊕ 𝑏𝑐, 𝑎 ⊕ 𝑏 ⊕ 𝑎𝑐, 𝑎 ⊕ 𝑏 ⊕ 𝑐 ⊕ 𝑎𝑏) .
(cid:0)([𝑥], [𝑦]), [𝐵](cid:1) uses the standard
2) Conditional swapping: The conditional swap function-
ality ([¯𝑥], [¯𝑦]) ← FSWAP
trick for conditional branching in MPC. Servers 0 and 1
respectively hold (2, 2)-additive shares of (i) an ordered pair
(𝑥, 𝑦) and (ii) a selection bit 𝐵 on which to condition the
swap. They compute a sharing [𝑧] of 𝑧 = 𝑥+𝐵(𝑦−𝑥), and then
output ([¯𝑥], [¯𝑦]) = ([𝑧], [𝑥] + [𝑦] − [𝑧]). An easy calculation
verifies that ( ¯𝑥, ¯𝑦) = (𝑥, 𝑦) if 𝐵 = 0 and ( ¯𝑥, ¯𝑦) = (𝑦, 𝑥) if 𝐵 = 1.
Figure 2 illustrates the conditional swap protocol.
3) Non-private DPF traversal: Recall from Section II-A3
that Boyle-Gilboa-Ishai DPF keys have the form
2𝜆)ℎ × F
2𝐿 ,
, cw(1), . . . , cw(ℎ)) ∈ (F
dpf𝑏 (cid:66) (𝑣 (𝜀)
𝑏
𝑏
𝑏
where ℎ is the tree height. In any honestly generated DPF key
pair, the sequence of CWs cw(1), . . . , cw(ℎ) is common to both
keys while the 𝑣 (𝜀)
𝑏 are sampled independently at random (sub-
ject to having opposite least-significant bits). We therefore
refer to key pairs having identical CW sequences as plausible
key pairs, reflecting the fact that adjudicating their validity is
more involved than simple plaintext matching among values
held in common by the two shareholders.
For a given bit string 𝑖 ∈ {0, 1}∗ of length 𝑗 < ℎ, we write
and 𝑣 (𝑖∥1)
𝑣 (𝑖∥0)
to denote respectively the left and right children
𝑏
of node 𝑣 (𝑖)
in the tree share induced by dpf𝑏, so that the
parenthesized superscript on any given node indicates the
sequence of left and right traversals needed to arrive at that
node starting from 𝑣 (𝜀)
𝑏 . In the audit protocol, the servers will
relate corresponding pairs (𝑣 (𝑖)
0 + 𝑣 (𝑖)
1