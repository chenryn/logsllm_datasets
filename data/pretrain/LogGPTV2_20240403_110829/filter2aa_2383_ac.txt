73 
So I’m not done.   
But unlike everything I’ve presented before, what I’m going to talk about now is 
probability-based attacks.  That is, I come up with a hypothesis, that I can correlate 
messages with a probability better than random if I look at property X. Whatever it is.  
Well, if I don’t have a control or test messages, I can’t tell if that hypothesis worked, 
right?  Well, I don’t have controls.  So what I’m doing is coming up with a hypothesis, 
running it across the dataset, and then looking at the clusters of messages that come 
out.  And if I can figure out something _else_ that correlates them, I call it a success.   
Like say – If a message header has a value of X – I think that’s a unique sender.  Only 
one person is sending those messages.  So I run that analysis, and I get clusters of 
messages encrypted to a single public key.  Well, if there was no correlation, I 
wouldn’t get such nicely segmented public keys, would I?  It would be a random 
distribution of the all the public keys in the dataset.  And even though I could have 
found that cluster by just looking at the public key ids – this data implies that I could 
use that trick, that hypothesis, to find clusters of data when there _is_ no other 
distinguishing characteristic.   
So that’s how I try and preserve some semblance of the scientific method, while not 
actually having controls. 
74 
So my first example was message headers, and that’s a big one.  Let’s look at these. 
75 
There are a few headers that are in nearly every message, but a long tail of headers 
that in only a few. 
76 
But those mostly-unique message headers are not necessarily the goldmine you 
might think they are.   
And that’s because headers can be added by the client, by the exit remailer, by the 
mail2news gateway, or by the Usenet peer.   
77 
So to really go after the distinguishing headers, that is the headers added by the 
client – I have to subtract out the headers that were added by all the other parts of 
the path. 
78 
And here are some great examples of headers specified by the client. 
79 
These strange headers all formed a distinct clump of messages, with the unique 
subject “Weed Will Save The Planet”.  An easy example of how the idea of unique 
message headers can correlate messages. 
80 
X-No-Archive – this means, don’t save it in Usenet.  It’s a client request that most 
usenet servers will obey.   
It’s also not the word on the screen.  This is a misspelling of the header.  And there is 
one person, at least I’m claiming one person, who has messed this up, and 
completely distinguishes their messages.  All 17,300 of them. 
~17,300 messages with this header 
Every one of them w/ subject of ‘forforums’ 
81 
So this is what you want, right? 
No.  Capitalization matters, and this is not the correct capitalization. 
What’s interesting about this one is that it shows up on several long running threads 
on AAM, composing nearly 28,000 messages.  Now initially, I thought each of these 
threads was relatively independent from each other – but after finding this bit of 
information – I’m starting to seriously doubt that. 
82 
This one isn’t right either. 
1500 messages posted with this header 
Including test messages posted with someone’s real name 
83 
This is the correct version, and about 135,000 messages had it, or a little more than 
10%.  Which makes it distinguishing in and of itself. 
84 
So how about Encrypt-Subject? 
So Encrypt-Subject is an directive for Type I remailers that should be processed by the 
remailer – it should never make it’s way into Usenet.  This is a bug, this is a client 
messing things up.  And I can’t blame them, because Type I is so horribly difficult.   
Over 10000 messages like this.  And when you reuse the subject, like these, you make 
messages without Encrypt-Subject stand out 
85 
Or even worse, mess up once, and then figure it out and reuse it… 
I can identify 52 esub messages that were otherwise secure because of 
subject/password reuse 
86 
And then there’s Encrypt-Key.  Another header that should never make it’s way into 
Usenet, but does because Type I remailers are so hard to use. 
There are over 10,000 of them. 
87 
Let’s look at another header.  Newsgroups.  Just list mailing lists, you can post a 
message to more than one newsgroup.  But if you do, you’re wildly in the minority, 
and that segments you. 
88 
Like this newsgroup.  There are 34 messages posted with this newsgroup, and than 
you so much comcast for making your users extremely distinguishable. 
34 messages 
every one of them:     
subject: mlw0lj2b9HBP7EURCn0PdCvyyatVk8i Adam S. Toline     
uniquehsig: 8, 40     
40 User-Agent: Xnews/03.04.11     
89 
Well what about this value.  AAM with 4 commas at the end. 
I thought this was a correlation attack – but after tracking it down, it was actually 
caused by a bug  in ‘remailer.org.uk’ for a week in January ’06.   
Random trivia I pulled out of this dataset. 
1/21 - 1/29 2006 
90 
How about this one, with duplicated newsgroups.  These were sent through a large 
variety of remailers and have no obvious correlation besides this value, and that they 
have english subjects. 
So the English subjects was the control I used to confirm that using a unique 
newsgroup is a bad idea. 
Lot of  
 - ATTN T-Boy 
 - Pariser Wasser 
 - Fresh fish from China 
All of these have these two newsgroups, sent through many different remailers: 
 - melontraffickers, frell, cypherpunks.to, dizum, rebleep, tatooine, paranoici, firenze 
91 
Humans are creatures of habit, and as flaky as remailers have been, a lot of people 
find a configuration that works for them, and then they stick with it.  Well, if I 
partition people by the remailer and the newsgateway they use – that’s what the 
colored squares are – what was previously an “anonymous” discussion thread 
suddenly makes it very easy to pick out who is saying what, and if they’re arguing 
with or supporting themselves. 
92 
And if I add in the header signature at the far right, it’s even easier! 
93 
And then here’s a really interesting pattern I observed.  There are a host of messages 
who have subjects with a 1 or 2 in them.  Like soggy / soggy2.   
Well I looked at those, and found they were being posted together, really close 
together.  And then I realized – one of the options in Type I remailers is to duplicate a 
message for redundancy.  Send the same message down two different remailer 
chains, just in case one becomes unavailable.  And while this gains you some measure 
of availability – it’s also distinguishing.  
You could target a nym, like I described earlier, with a huge message – and if you see 
two huge messages appear, you know that that nym’s reply block duplicates 
messages.  Look for all possible duplicate messages, and you’ve got a candidate list of 
messages to that nym – even if you’re unsuccessful doing an hsub or esub crack. 
94 
And a similar pattern I saw was these.  Look at each pair of messages with the slightly 
different backgrounds.  The second message comes out of dizum about 5-6 hours 
later from the one that comes from panta-rhei.   
I don’t know what this means, but it did stand out and is distinguishing. 
Subject: “Weed will save the planet” 
Also, messages from frell were mixed in, with no obvious correlation to other 
messages 
95 
So there were a number of other hypotheses I tried that did not turn up interesting 
data, and there are more queries that could be run across this dataset.  But I need to 
start wrapping up.  It all comes down to Metadata. 
96 
What we saw is that AAM had the obvious mistakes we’d expect. 
And it also suffers a bit because it hasn’t taken into account the lessons we’ve 
learned since it was developed. 
But I do think there’s some traffic analysis lessons we haven’t codified as best 
practice, that we probably should. 
97 
So what does the future hold for AAM?  Well, the security of a well-posted message is 
good. 
98 
With a lot of caveats.  If you use uncrackable passphrases, only use servers that 
output key stretched packets, post through remailers, with no distinguishing 
characteristics, and you’re willing to be a very small anonymity set.   
I don’t know how many people are using AAM, but it’s not a lot.  What that means is 
if the government asked for a list of everyone who uses AAM – they would get a very 
short list of names.  Probably small enough to dig pretty deeply into each of their 
lives. 
99 
And AAM crucially relies on Remailers and Newsgateways.  And these services are 
dying.  Remember that 2 people, Zax and Dizum, post more than 98% of the traffic to 
AAM.   
AAM is also text-based – very limited bandwidth. 
100 
And the nymservs themselves are pretty crappy, architecturally speaking.  We give 
single-hop proxies like VPNs and UltraSurf a lot of shit because their Architecture is 
not as strong as Tor’s.   
But nymservs are in that exact same category of “Trust this guy not to roll over on 
you” 
I feel compelled to mention that the alternative is to use Tor, which you trust, to send 
email via throwaway accounts on a service you do not trust.  While this is a practice 
everyone in this room has used or at least thought of – it’s still a really shitty 
architecture.   
101 
Now the good news is we have something better.  We have a very strongly 
architected Nymserv.  
Pynchon Gate was designed by Len Sassaman, Bram Cohen, and Nick Mathewson, 
and it uses Private Information Retrieval instead of a Shared Mailbox.  It exposes less 
metadata, and resists flooding or size-based correlation attacks.   
However, it’s not built.  It’s been started, but it’s got a very long way to go.  It also 
requires a remailer network to operate. 
102 
And we don’t really have a remailer network.  What we’ve got is Mixmaster and 
Mixminion.  Now Mixminion is a bit better than Mixmaster, which doesn’t have any 
Link Encryption, has known attacks, uses old crypto with no chance of upgrading.   
103 
But both of these services suffer from the fact that we don’t have a good solution to 
remailer spam or abuse, we don’t have good documentation about them, and they 
both have horrible network diversity. 
104 
So if we like Pynchon Gate, the path forward also involves fixing Mixminion.  And 
mixminion needs love.   
Mixminion is currently unmaintained, but we have a TODO list that includes the items 
I’ve got here.  Some of them are extremely complicated, like moving to a new packet 
format.  Others are relatively straightforward, like improving the TLS settings, and 
others give you the opportunity to practice writing crypto, designing a distributed 
trust directory, or writing a complete standalone pinger in any language or style you 
want.   
So if you’re interested, there’s a lot of pretty cool opportunities here. 
105 
But what I keep coming back to is the fact that we have no anonymity network that is 
high bandwidth, high latency.  We have no anonymity network that would have let 
someone securely share the Collateral Murder video, without Wikileaks being their 
proxy.  You can’t take a video of corruption or police brutality, and post it 
anonymously.   
Now I hear you arguing with me in your heads: Use Tor and upload it to Youtube.  No, 
youtube will take it down.  Use Tor and upload it to MEGA, or some site that will fight 
fradulent takedown notices.  Okay, but now you’re relying on the good graces of 
some third party.  A third party that is known to host the video, and can be sued.  
Wikileaks was the last organization that was willing to take on that legal fight, and 
now they are no longer in the business of hosting content for normal people.  
And you can say Hidden Service and I’ll point to size-based traffic analysis and 
confirmation attacks that come with a low-latency network, never mind Ralf-Phillip 
Weinmen’s amazing work the other month that really killed Hidden Services.  We can 
go on and on like this, but I hope you’ll at least concede the point that what you are 
coming up with are work-arounds for a problem that we lack a good solution to. 
106 
So if I’ve been able to entertain you, I am glad, if I’ve been able to inspire you to work 
on anonymity tools, I am overjoyed.  And if you want a place to start, I will point you 
here.   
Thank You. 
107 
108 
109 
110 
111 
112 
113 
114 
115 
116