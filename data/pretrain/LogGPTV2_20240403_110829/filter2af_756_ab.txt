  2. Public key exchange：交换椭圆曲线的公钥
  3. Authentication stage 1：身份认证
  4. Authentication stage 2：ECDH Key校验
对于身份认证，BR/EDR定义了4种认证方式：
  * Just Works：静默认证，主要用于没有显示和输入功能的设备，如耳机等
  * Numeric Comparison：双方生成随机数并计算出一个6位数字进行比对确认
  * Passkey Entry Authentication：主要用于一方有显示功能另外一方有输入功能的场景
  * OOB(Out Of Band)：使用蓝牙射频以外的其他通道(如NFC)来交换认证信息
前面说了BR/EDR 2.1和BLE4.0/4.1都使用Secure Simple
Pairing进行配对，为什么还特地强调是BR/EDR呢？因为虽然他们都叫做SSP，但实际上也存在不同的地方，比如BLE的SSP没有使用ECDH，因此数字的认证只能防止被动窃听(passive
eavesdropping)，不能防止中间人攻击，并且BLE中没有Numeric Comparison的认证方式。
不过，这也只是过去式了。在4.2以后，BLE和BR/EDR终于统一了配对流程，称为 _Secure Connection_
。其在SSP的基础上进行了安全性的增强，下面是BR/EDR的对比：
安全特性\配对类型 | Legacy | Secure Simple Pairing | Secure Connection  
---|---|---|---  
加密 | E0 | E0 | AES-CCM  
认证 | SAFER+ | SAFER+ | HMAC-SHA256  
秘钥生成 | SAFER+ | P-192 ECDH HMAC-SHA-256 | P-256 ECDH HMAC-SHA-256  
而BLE也是殊途同归，最新实现的配对方式也升级成了功能相同的 Secure Connection。
  * 
  * 
# 常见协议
在前面的介绍中我们已经多次提到，主机系统称为Host，蓝牙射频芯片的系统称为Controller，它们之间的通信接口称为HCI(Host
Controller
Interface)，同时这也是其传输协议的名字。HCI是Host端所能接触的最底层协议，通过内核的HCI驱动进行操作，基于HCI逐步往上封装和实现了一系列高级协议，本节就以自底向上的角度去进行介绍。
## HCI
HCI协议是HCI接口最底层的协议，可根据传输层的介质分为不同类型，例如：
  * UART传输层：在btsnoop中表示为hci_h4
  * USB传输层：在btsnoop中表示为hci_h5
  * SD传输层：Secure Digital
  * ...
HCI数据包分为command、event和data三种类型。command表示Host发送给Controller的命令，event为Controller发送给Host的事件，data通常是实际的蓝牙传输数据。
HCI command的格式为：
    16bit opcode | 8bit 参数长度 | 可变参数
其中opcode又分为两部分，高6位为OGF(Opcode Group Field)，低10位为OCF(Opcode Command
Field)。在Linuz中我们常用的bluez框架也可以直接发送hci命令：
    $ hcitool cmd --help
    Usage:
            cmd   [parameters]
    Example:
            cmd 0x03 0x0013 0x41 0x42 0x43 0x44
HCI event的格式为：
    1bit event code | 1bit 参数长度 | 可变参数
通常Host发送的command都会收到Controller的返回event，提示命令的执行结果。例如，HCI命令`0x200c`表示`LE Set
Scan Enable`，并通过参数控制开启和关闭BLE的扫描，Controller执行完毕后返回event code `0x0e`，即`Command
Complete`，并附带status作为参数表示结果是否成功。详细的命令和事件列表可以参考`Core_v5.2 Vol 4: Host
Controller Interface, Part E-7 HCI commands and events`。
除了command和event，HCI中还包括的一大载荷就是数据，比如前面提到的同步数据包SCO、ISO(isochronous)和无连接数据包ACL等。
## ACL
HCI的ACL协议主要用于在Host和Controller之间传输数据，ACL数据包的格式如下：
    12bit   | 2bit    | 2bit    | 16bit             | varlen
    Handle  | PB flag | BC flag | Data Total Length | data
其中，Handle用于区分Host与Controller之间的逻辑链路，PB为Packet
Boundary即包边界标志，BC(Broadcast)为广播标志。由于数据总长度只用2个字节表示，因此数据加上头部最多也只有65535字节，这意味着在发送过大的数据时需要在ACL层进行分包和重组，PB
Flag就是为了这个目的而设置的，根据PB Flag的值可以表示当前数据包在完整数据中所处的位置。
## L2CAP
ACL只提供了一个数据传输协议，类比于网络协议栈中的IP协议，在其之上使用的L2CAP协议可以类比于TCP/UDP协议，实现了更为完善的数据传输功能，包括：
  1. 协议/信道(L2CAP channel)多路复用
  2. 分段(segmentation)和重组(reassembly)
  3. 基于L2CAP channel的流量控制机制
  4. 错误控制重传机制
  5. 支持流式传输(streaming)
  6. 分片(fragmentation)和重组(recombination)
  7. QoS(Quality of Service)
  8. ...
L2CAP channel表示两个设备之间的一条逻辑链路，使用channel
id(CID)进行区分，并以此为基本单元在Controller逻辑链路上进行多路复用。在基于连接的信道(connection-oriented
channels)中，L2CAP PDU也称为B-Frame，其格式如下：
    16bit length | 16bit CID | information payload
前32bit称为L2CAP header，length是除了header以外的payload长度。在不同的L2CAP模式中，information
payload的内容也不尽相同，比如在Supervisor Frame(S-Frame)、Information
Frame(I-Frame)。而对于无连接的L2CAP数据包，在payload之前还包含大于等于2字节的PSM(Protocol/Service
Multiplexer)，头部还是和B-Frame一致的。
在L2CAP之上，有着各种各样的应用层协议，比如服务发现协议SDP，蓝牙传输协议RFCOMM/OBEX，BLE的属性协议ATT，甚至是通用以太网协议BNEP以及其上的TCP/IP网络栈等。通过分层和抽象使得上层应用无需关心底层的细节，从而实现了整个蓝牙协议栈的普适性和拓展性。
# 协议安全
这里的协议安全不是指网络协议栈的安全性，而是蓝牙核心协议，或者说蓝牙标准本身的安全性。虽然蓝牙SIG小组在制定标准前都经过了多方讨论和研究，可依然可能存在一些没有考虑周到的临界情况。
## KNOB
KNOB
Attack是2018年3月发现，并在同年10月报告给蓝牙SIG和CERT的一个通用协议漏洞。漏洞点主要出现在LMP协议的秘钥协商阶段，正常来说，两个蓝牙设备连接和配对的过程如下：
![
](https://images.seebug.org/content/images/2021/07/3b50027d-8c39-41a5-ab0f-75c8f1e1bd1b.png-w331s)
配对之后会先进行蓝牙秘钥协商，协商过程使用的是配对过程协商的ECDH临时秘钥以保证协商过程保密。协商过程使用LMP协议，在各自的Controller端实现：
![
](https://images.seebug.org/content/images/2021/07/09a6a792-5e8d-47b9-87d3-6dfa117ef545.png-w331s)
问题就出在`LMP
entropy（熵)`协商的阶段，因为这部分的协商过程是没有经过ECDH秘钥保护的，所以就容易受到中间人攻击，恶意的攻击者可以将熵设置得尽可能小，从而可以在后面快速地爆破出Kc并实时解密蓝牙的传输数据。这也是为什么该攻击称为KNOB(Key
Negotiation of Bluetooth) Attack的原因。
该漏洞的编号为[CVE-2019-9506](https://www.kb.cert.org/vuls/id/918987/)，由于是蓝牙核心协议中的设计漏洞，因此影响了大量的蓝牙设备，比如Broadcom、CYW、Apple、Snapdragon等蓝牙芯片。修复方法自然是对秘钥熵协商的过程进行加密，不过这个要等SIG更新进标准中，而标准的更新和推进又相对缓慢，因此很多蓝牙芯片厂商也各自更新了固件做简单的patch。该漏洞的直接危害就是导致蓝牙链路的中间人攻击，导致传输信息泄露或者劫持，实际攻击场景比如蓝牙键盘、蓝牙鼠标等应该是受影响比较大的。
参考资料：
  * 
  * 
  * 
## BIAS
BIAS全称为`Bluetooth Impersonation
Attacks`，是2020年5月左右公开的另外一个蓝牙协议的漏洞，CERT编号为[CVE-2020-10135](https://nvd.nist.gov/vuln/detail/CVE-2020-10135)。该漏洞实际上是一系列协议设计缺陷导致的认证错误，最终导致对未配对的设备进行连接(或者说伪造成已配对的设备)。
该漏洞主要是针对传统蓝牙(BR/EDR)的配对过程。前面已经说过，在蓝牙协议的发展中，安全配对主要分为三个阶段，即Legacy
Pairing、SSP和Secure
Connection。配对的作用是让从未见过的设备建立可信、安全的链路层链接，宏观来看就是我们常见的输入配对数字过程，微观上是协商了一个双方持有的长期秘钥LTK(Long