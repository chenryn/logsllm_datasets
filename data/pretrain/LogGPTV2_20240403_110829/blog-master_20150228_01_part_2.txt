```  
我们可以用corr来验证PostgreSQL的采样统计, 但是注意, 要验证的话, 数据量小一点比较好, 这样的话PG会全量采样, 和corr得到的结果一致, 如果数据量太大, 得到的结果可能有少量偏差.  
```  
postgres=# create table t(id int);  
CREATE TABLE  
postgres=# insert into t values (2),(5),(8),(3),(4),(6),(9),(7),(1);  
INSERT 0 9  
```  
行号, ID值如下  
```  
postgres=# select ctid,* from t;  
 ctid  | id   
-------+----  
 (0,1) |  2  
 (0,2) |  5  
 (0,3) |  8  
 (0,4) |  3  
 (0,5) |  4  
 (0,6) |  6  
 (0,7) |  9  
 (0,8) |  7  
 (0,9) |  1  
(9 rows)  
```  
使用窗口函数进行输出  
```  
postgres=# select * from (select row_number() over(order by ctid) as rn, * from t) as t(rn,id);  
 rn | id   
----+----  
  1 |  2  
  2 |  5  
  3 |  8  
  4 |  3  
  5 |  4  
  6 |  6  
  7 |  9  
  8 |  7  
  9 |  1  
(9 rows)  
```  
分析 :   
```  
postgres=# analyze t;  
ANALYZE  
```  
查询统计信息的correlation       
```  
postgres=# select * from pg_stats where attname ='id' and tablename='t';  
-[ RECORD 1 ]----------+--------------------  
schemaname             | public  
tablename              | t  
attname                | id  
inherited              | f  
null_frac              | 0  
avg_width              | 4  
n_distinct             | -1  
most_common_vals       |   
most_common_freqs      |   
histogram_bounds       | {1,2,3,4,5,6,7,8,9}  
correlation            | 0.116667  
most_common_elems      |   
most_common_elem_freqs |   
elem_count_histogram   |   
```  
结果和corr函数计算得到的结果一致  
```  
postgres=# select corr(rn,id) from (select row_number() over(order by ctid) as rn, * from t) as t(rn,id);  
-[ RECORD 1 ]-----------  
corr | 0.116666666666667  
```  
如果随机插入大量数据, 因此采样的关系, 分析得到的相关性可能和实际的相关性有偏差  
```  
postgres=# insert into t select * from generate_series(1,100000) order by random();  
INSERT 0 100000  
```  
如下 :   
```  
postgres=# select ctid,* from t limit 100;  
  ctid   |  id     
---------+-------  
 (0,1)   |     2  
 (0,2)   |     5  
 (0,3)   |     8  
 (0,4)   |     3  
 (0,5)   |     4  
 (0,6)   |     6  
 (0,7)   |     9  
 (0,8)   |     7  
 (0,9)   |     1  
 (0,10)  |  4607  
 (0,11)  | 39521  
 (0,12)  | 92869  
 (0,13)  | 80094  
 (0,14)  | 13214  
 (0,15)  | 15509  
 (0,16)  |  8380  
 (0,17)  | 22281  
 (0,18)  | 99252  
 (0,19)  | 60018  
 (0,20)  | 55716  
....  
postgres=# analyze t;  
ANALYZE  
postgres=# select correlation from pg_stats where attname ='id' and tablename='t';  
 correlation    
--------------  
 -0.000263469  
(1 row)  
```  
和实际相关性偏差较大  
```  
postgres=# select corr(rn,id) from (select row_number() over(order by ctid) as rn, * from t) as t(rn,id);  
        corr           
---------------------  
 0.00110293570728894  
(1 row)  
```  
修改id列的采样系数, 重新分析, 得到的相关性结果和实际的相关性基本一致.  
```  
postgres=# alter table t alter column id SET STATISTICS 10000;  
ALTER TABLE  
postgres=# analyze t;  
ANALYZE  
postgres=# select correlation from pg_stats where attname ='id' and tablename='t';  
 correlation   
-------------  
  0.00110296  
(1 row)  
```  
## 相关性与优化器  
当相关性很好时，说明物理存储的顺序与实际的值顺序很相似，那么在使用索引扫描时，扫描的堆表块也相对较少，同时不离散的扫描也很少。因此更加趋向于使用索引扫描。  
在9.6版本中，引入了BRIN索引，当相关性很好时，BRIN的效率也越高，因为数据的交叉少了，精度自然就高了。  
## 参考  
1\. http://zh.wikipedia.org/zh-cn/%E7%9B%B8%E5%85%B3  
2\. http://baike.baidu.com/view/172091.htm  
3\. http://en.wikipedia.org/wiki/Correlation_and_dependence  
4\. http://www.postgresql.org/docs/9.4/static/functions-aggregate.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")