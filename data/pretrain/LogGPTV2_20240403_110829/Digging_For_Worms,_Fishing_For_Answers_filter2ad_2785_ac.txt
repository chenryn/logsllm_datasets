ﬁc that looks like a worm attempting to propagate. If both
of these observations occur together, there is a higher likeli-
hood of an infection than if just one observation were made
alone.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
[9] G. H. Kim and E. H. Spafford. The design and imple-
mentation of tripwire: A ﬁle system integrity checker.
In
ACM Conference on Computer and Communications Secu-
rity, pages 18–29, 1994.
LaBrea:
http://www.
[10] T. Liston.
The Tarpit.
hackbusters.net/LaBrea/, 2002.
[11] S. Northcutt, D. McLachlan, and J. Novak. Network Intru-
sion Detection: An Analyst’s Handbook. New Riders Pub-
lishing, second edition, September 2000.
[12] V. Paxson. Bro: A system for detecting network intruders
in real-time. Computer Networks, 31(23-24), pages 2435–
2463, December 1999.
[13] R. Power. Computer Security Issues & Trends. Computer
Security Institute, Spring 2001.
[14] T. H. Ptacek and T. N. Newsham. Insertion, Evasion, and
Denial of Service: Eluding Network Intrusion Detection. Se-
cure Networks, Inc., January 1998.
[15] M. Roesch. Snort: The Open Source Network Intrusion De-
tection System. http://snort.sourcefire.com/,
2002.
[16] S. Staniford-Chen, S. Cheung, R. Crawford, M. Dilger, J.
Frank, J. Hoagland, K. Levitt, C. Wee, R. Yip, D. Zerkle.
Grids–a graph based intrusion detection system for large
networks. The 19th National Information Systems Security
Conference, 1996.
[17] S. Staniford, J. A. Hoagland, and J. M. McAlerney. Prac-
tical Automated Detection of Stealthy Portscans.
To
appear in the Journal of Computer Security, 2002.
Available at http://www.silicondefense.com/
research/pubs.htm.
[18] S. Staniford, V. Paxson, and N. Weaver. How to Own the
Internet in Your Spare Time. To Appear in the Proceedings
of the 11th USENIX Security Symposium, August 2002.
[19] G. Stocksdale. NSA Glossary of Terms Used in Secu-
rity and Intrusion Detection. http://www.sans.org/
newlook/resources/glossary.htm, April 1998.
7 Conclusions
The majority of the effort being put into stopping worms
today focuses on the ﬁrst three stages of their life-cycle:
target selection, exploitation, and infection. Firewalls can
block network probes, network intrusion detection systems
can detect attempts to exploit vulnerabilities, and host based
intrusion detection systems can detect modiﬁed, added, and
removed ﬁles. Despite these efforts, worms can still be de-
signed to avoid detection by these different tools.
Little has been done to detect worms in the fourth stage
of their life-cycle, propagation. This paper discusses using
the standard paradigm of watching for a particular number
of events to occur in a given period of time. However, in-
stead of applying this technique to inbound trafﬁc, it is ap-
plied to horizontal scans in outbound trafﬁc. This has the
distinct advantage of being able to see all the network traf-
ﬁc associated with a particular host. Consequently, worms
that were not detected in the ﬁrst three stages can potentially
be detected here.
As the fourth stage occurs after infection, techniques in
this area do not explicitly protect the network. Thus, moti-
vations for the use of tools that work in this stage are dis-
cussed. These motivations include containing the worm, in-
creased conﬁdence in alerts, and protecting public relations.
More attention should be paid to this phase of the worm’s
life-cycle, and this paper takes steps in this direction.
References
[1] CERT. Advisory CA-2001-02, Multiple Vulnerabilities
in BIND. http://www.cert.org/advisories/
CA-2001-02.html, January 2001.
[2] CERT.
Incident Note IN-2001-03, Exploitation of BIND
Vulnerabilities. http://www.cert.org/incident_
notes/IN-2001-03.html, March 2001.
[3] CERT.
Incident Note IN-2001-08, Code Red Worm
Exploiting Buffer Overﬂow in IIS Indexing Service
DLL. http://www.cert.org/incident_notes/
IN-2001-08.html, July 2001.
[4] CERT.
Worm.
CA-2002-27.html, September 2002.
Advisory CA-2002-27, Apache/mod ssl
http://www.cert.org/advisories/
[5] M. Fearnow and W. Stearns. SANS Global Incident Anal-
ysis Center - Lion Worm Version 0.12. http://www.
sans.org/y2k/lion.htm, April 2001.
[6] Fyodor.
The Art of Port Scanning. http://www.
insecure.org/nmap/nmap_doc.html, September
1997.
[7] Fyodor. Nmap. http://www.insecure.org/nmap,
2001.
[8] R. P. Gorman and E. H. Spafford. Reversing the Network
Intrusion Detection Paradigm: The Advantages of Outbound
Misuse Detection. CERIAS Technical Report, March 2002.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Table 1. Worms’ Behavior in the Four Stage Life-Cycle
Target Selection (inbound)
Exploitation
Worm
Email
Network
Probe (port #)
Targeted
Service
Vulner. Ex-
ploited
Infection
Backdoor Other
Email
Propagation (outbound)
Network
Probe
Other
File-
system
Mod.
Nimda
Yes
Yes (80,600)
CA-2001-06
Yes
No
Yes
Yes
Yes (80,600)
Yes (open net-
work
shares,
embedded
javascript)
No
Yes (80)
No
Yes (80)
Code Red
v1
Code Red
II
Adore
Sadmind
Lion
Ramen
Cheese
No
No
No
No
No
Yes
(21,53,111,515)
Yes (80,111)
Yes
(21,111,515)
Yes (10008)
Yes (53)
BIND
Digispid.B No
Yes (1433)
Slapper
No
Yes (80,443)
Code
and
IIS,
Red II
Sadmind
Backdoors
IIS
4.0/5.0,
Cisco Series
600
DSL
routers
IIS
4.0/5.0,
Cisco Series
600
DSL
routers
BIND,
LPRng,
rpc.statd,
wu-ftpd
IIS, Solstice
Sadmind
Back-
wu-ftp,
rpc.statd,
LPRng
Lion
door
Microsoft
SQL Server
OpenSSL
(with Apache
running)
CA-2001-13
Yes
No
No
No
Yes (80)
No
Yes
Yes
No
No
Yes (80)
No
CA-2001-13,
IN-2001-09
CA-2001-02,
IN-2001-01
CA-2001-11,
MS00-078
CA-2001-02
Yes
Yes
Yes
Yes
(port
(port
Yes
600)
Yes
10008)
IN-2001-01
Yes
IN-2001-05
IN-2002-04
Yes
Yes
CA-2002-27
Yes
Yes
No
Yes
(port
Yes
2002)
Yes
No
Yes
Yes
No
Yes
Yes
No
No
No
No
No
No
No
(21,53,
Yes
111,515)
No
Yes (80,111) No
Yes (53)
Yes
(21,111,515)
Yes (10008)
Yes (1433)
No
No
No
No
Yes (80,443) No
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE