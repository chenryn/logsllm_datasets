`tuple(DeviceArray)` evaluates the DeviceArray (at least when using xla) and
returns them as np arrays.
Example:
    ar = jnp.ones(shape=3, dtype=jnp.float32)    # type: jax.interpreters.xla.DeviceArray,
    tuple(ar)
produces a tuple of `numpy.float32: (1.0, 1.0, 1.0)`, while
    tuple(ar[i] for i in range(ar.shape[0]))
produces a tuple of DeviceArrays.
It feels like `tuple(ar)` returning a tuple of DeviceArrays would make sense.
Is there some drawback to this?
Furthermore, when jitting vs not-jitting the following:
    def tuple_split(ar):
      return tuple(ar)
I do get different return types like so:
    print("orig:", tuple_split(jnp.ones(shape=3, dtype=jnp.float32)))
    > orig: (1.0, 1.0, 1.0)
    print("jit:", jit_tuple_split(jnp.ones(shape=3, dtype=jnp.float32)))
    > jit: (DeviceArray(1., dtype=float32), DeviceArray(1., dtype=float32), DeviceArray(1., dtype=float32))
which I also didn't expect.
xla tuple implementation:
https://github.com/google/jax/blob/master/jax/interpreters/xla.py#L1044