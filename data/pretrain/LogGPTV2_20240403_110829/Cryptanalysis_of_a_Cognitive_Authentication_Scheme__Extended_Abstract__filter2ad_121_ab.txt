∨
c | wc=pk
All the boolean formulas above can be converted into
equivalent boolean formulas in disjunctive normal form.
For example, P ⇒ Q is equivalent to P ∨ Q. These are
given as input to a SAT solver. Given enough formulas, a
SAT solver quickly outputs a unique assignment of values
to the variables A1, . . . , AN . This assignment corresponds
to the user’s secret key.
Implementation of the attack. We tested our attacks with
the UBCSAT implementation [7] of the SAPS [3] SAT
solver (this SAT solver was the most efﬁcient of those
we tested). Table 1 summarizes the results of our attacks
against the high complexity protocol. We tested the attacks
with various of the parameters suggested in [9]. In all cases,
our attack correctly recovers a unique candidate for the the
user’s secret key. The complexity of the attack is measured
according to the number of challenge-response rounds that
a passive adversary must observe, and the running time (in
seconds) of the SAT solver. The running time of the attack
was measured on a desktop PC running Windows XP with
dual 3.40 GHZ CPUs and 1.00 GB of RAM.
Discussion. The ﬁrst row of Table 1 shows that, for param-
eters suggested in [9], a passive eavesdropping adversary
recovers a user’s secret key in seconds after observing only
60 rounds of challenge-response. Since successful authen-
tication requires multiple rounds of challenge-response (11
rounds are suggested in [9]), the attacker learns a user’s se-
cret key after observing as few as 6 successful user logins.
This attack is close to optimal in the number of rounds
(cid:2) ≈ 72.9 bits of entropy. With P = 4, each
it requires. Indeed, users choose secret keys from a space
with log2
user’s reply to a challenge query reveals log2(4) = 2 bits
of entropy of the secret key. Thus, 72.9/2 ≈ 37 is a strict
lower bound for the number of challenge-response rounds
needed to uniquely recover a user’s key.
80
30
(cid:1)
With fewer than 60 rounds, our attack tends to recover
multiple candidates for a user’s key. More rounds on the
other hand decrease the running time of the attack, as shown
in the second row of Table 1.
The last two rows of Table 1 show that the attack also
works for a larger choice of parameters (when users’ keys
consist of M = 45 pictures chosen from a set of size
N = 120). Given the fundamental limitations of SAT
solvers, there is no doubt that our attack would not work
with sufﬁciently large parameters. However, large parame-
ters present users with the challenge of memorizing a large
number of images. The results of Table 1 suggest that user’s
memory will fail before large enough parameters place the
authentication scheme beyond the reach of our attack.
4 Low Complexity Protocol
The setup for this version of the protocol is identical to
the high complexity protocol. Recall that we denote B a
public set of pictures of size N. The authentication key of
a user is a secret subset F ⊂ B of size M < N. The
difference lies in the questions asked of the user in each
authentication challenge.
In the low complexity version of the authentication pro-
tocol,
the user is presented in each challenge-response
round with an ordered list of n pictures selected randomly
from B. Each picture in the list is assigned a random bit (ei-
ther 0 or 1) which is shown next to it. These random bits are
chosen such that the number of pictures assigned 0 equals
the number of pictures assigned 1.
Authentication protocol parameters
Query type
N
240
600
240
M
60
150
60
n
20
20
20
Case 1
Case 1
Case 2
Attack complexity
# Rounds
250
800
400
Time (seconds)
< 1
2.6
< 1
Table 2. Cost of our attack against low complexity authentication, for various protocol parameters.
The user is then asked one of the following binary ques-
tions:
• First case. Identify the ﬁrst picture in the ordered list
that belongs to F, and the last picture in the list that
belongs to F. Let b0 and b1 be the bits associated with
these two images. Output b0 ⊕ b1.
• Second case. Identify the ﬁrst, second and last pictures
in the ordered list that belong to F. Let b0, b1 and b2
be the bits associated with these pictures. Output the
majority of b0, b1, b2.
The description of the protocol given in [9] does not specify
what reply the user should give when the ordered list con-
tains fewer than 2 images from F (in the ﬁrst case) or fewer
than 3 images from F (in the second case). The parameters
of the protocol are chosen such that this situation happens
very infrequently. In our analysis, we generate ordered lists
such that this situation never happens.
Numerical parameters. The implementation described
in [9] proposes the following parameters. The set B of pub-
lic images is of size N = 240. A user’s key consists of a
secret subset of M = 60 images. In each challenge query,
n = 20 random pictures are displayed. Each run of the low
complexity authentication protocol consists of 22 rounds of
challenge-response.
4.1 Attack
We propose an attack that recovers the key of a user after
observing the user’s replies to a few authentication rounds.
Let F denote the secret set of pictures chosen by the user
under attack. As in section 3.1, we deﬁne N boolean vari-
ables A1, . . . , AN associated with the N pictures in the set
B. We deﬁne Ai = 1 if the i-th picture belongs to the set F
and otherwise Ai = 0. We denote Ai the negation of vari-
able Ai. Note that recovering the user’s key is equivalent to
determining the values of A1, . . . , AN .
In every round, observing the user’s reply to an au-
thentication query reveals boolean relationships between
the variables A1, . . . , AN . Speciﬁcally, let i1, . . . , in ∈
{1, . . . , N} denote the indices of the n pictures presented
to the user in the ordered list, and let b1, . . . , bn denote the
bits associated with these pictures. Finally, let b denote the
bit returned by the user.
We know that at least one of the images in the ordered
list is known to the user. This implies that the following
formula is true:
(Ai1 ∨ Ai2 ∨ . . . ∨ Ain).
First case. For all 1 ≤ j < k ≤ n, we know that bj⊕bk (cid:8)= b
implies that pictures ij and ik cannot be the ﬁrst and last
pictures that belong to F in the ordered list. Thus:
• If b1 ⊕ bn (cid:8)= b, we learn that pictures i1 and in cannot
both belong to F. In other words, if b1 ⊕ bn (cid:8)= b the
following formula is true: (Ai1 ∨ Ain).
• For 1 ≤ j < k ≤ n such that (j, k) (cid:8)= (1, n) and
bj ⊕ bk (cid:8)= b, we learn that if pictures ij and ik both
belong to F, then there must exist at least one other
picture that belongs to F in the range [1, j − 1] ∪ [k +
1, n]. In other words, for all 1 ≤ j < k ≤ n such that
(j, k) (cid:8)= (1, n) and bj ⊕ bk (cid:8)= b the following formula
is true:
(cid:5)
(Ai1∨. . .∨Aij−1)∨(Aik+1∨. . .∨Ain)
∧Aik) ⇒
(cid:3)
.
(Aij
Second case. For all 1 ≤ j < k < (cid:1) ≤ n, we know that
if the majority of the three bits (bj, bk, b(cid:1)) is not equal to
b, then this implies that pictures ij, ik and i(cid:1) cannot be the
ﬁrst, second and last pictures that belong to F in the ordered
list. Thus:
lowing formula is true: (Ai1 ∨ Ai2 ∨ Ain).
• If the majority of (b1, b2, bn) is not equal to b, the fol-
• For all 1 ≤ j < k < (cid:1) ≤ n such that (j, k, (cid:1)) (cid:8)=
(1, 2, n) and such that the majority of (bj, bk, b(cid:1)) is not
equal to b, we learn that if pictures ij, ik and i(cid:1) all
belong to F, then there must exist at least one other
picture that belongs to F in the range [1, j − 1] ∪ [j +
1, k−1]∪[(cid:1)+1, n]. In other words, for all 1 ≤ j < k <
(cid:1) ≤ n such that (j, k, (cid:1)) (cid:8)= (1, 2, n) and the majority
of (bj, bk, b(cid:1)) is not equal to b, the following formula
is true:
(cid:3)
∧ Aik
∧ Ai(cid:1)) ⇒
(Ai1 ∨ . . . ∨ Aij−1) ∨
(Aij
(cid:5)
(Aij+1 ∨ . . . ∨ Aik−1) ∨ (Ai(cid:1)+1 ∨ . . . ∨ Ain)
.
As in section 3.1, these boolean formulas are converted
into equivalent boolean formulas in disjunctive normal form
and given as input to a SAT solver. Given enough formulas,
a SAT solver quickly outputs a unique assignment of values
to the variables A1, . . . , AN . This assignment corresponds
to the user’s secret key.
Implementation of the attack. We tested our attacks with
the UBCSAT implementation of the SAPS SAT solver on
a desktop PC running Windows XP with dual 3.40 GHZ
CPUs and 1.00 GB of RAM. Table 2 summarizes the results
of our attacks. With the parameters suggested in [9], our
attack recovers the user’s authentication key in less than 1
second, given 250 challenge-response rounds (ﬁrst case) or
400 rounds (second case).
Discussion. As noted earlier, successful authentication re-
quires multiple rounds of challenge-response (22 rounds are
suggested in [9] for the low complexity protocol). Thus,
the ﬁrst row of Table 2 shows that a passive eavesdropping
adversary can recover a user’s secret key after observing
as few as 12 successful user logins. With fewer rounds,
our attack tends to recover multiple candidates for a user’s
key. Our attack also works for a larger choice of parame-
ters. When users’ keys consist of M = 150 pictures chosen
from a set of size N = 600, the attack recovers the user’s
secret key in 2.6 seconds. No reasonable choice of param-
eters (from the viewpoint of the memory effort required of
users) can place the low-complexity authentication scheme
beyond the reach of our attack.
5 Related Work
The problem of designing cognitive authentication
schemes secure against eavesdroppers is challenging. Early
protocols [5, 8] allowed only for a small number of se-
cure authentications with the same secret. After observing
a number of authentications linear in the size of the user’s
secret, an eavesdropper could recover the user’s secret in
polynomial time.
A secure cognitive authentication scheme was proposed
by Hopper and Blum [2]. Their scheme is based on the
assumed hardness of the well-studied problem of learning
parity with noise (the LPN problem). It allows for a number
of secure authentication with the same secret that is super-
polynomial in the size of the secret.
Recent work [1] by Herley and Florˆencio considers the
more speciﬁc threat coming from key loggers, and shows
how to protect regular password authentication by exploit-
ing system limitations of the existing crop of key loggers.
SAT solvers have been used to solve a number of cryp-
tographic problems [4, 6]. Our attacks demonstrate a new
application of SAT solvers to cryptanalysis.
6 Conclusion
We have shown that
the cognitive authentication
schemes proposed in [9] are insecure against eavesdropping
attacks. Assuming a passive eavesdropping adversary, our
attacks recover a user’s secret key in a few seconds, after
observing only a small number of successful logins.
References
[1] C. Herley and D. Florˆencio. How to login from an
Internet caf´e without worrying about keyloggers. In
2006 Symposium on Usable Privacy and Security.
http://cups.cs.cmu.edu/soups/2006/
posters/herley-poster_abstract.pdf
[2] N. Hopper and M. Blum. Secure human identiﬁca-
tion protocols. In ASIACRYPT 2001, pages 52–66.
Springer Verlag, LNCS 2248, 2001.
[3] F. Hutter, D. Tompkins and H. Hoos. Scaling and
efﬁcient dynamic local
probabilistic smoothing:
search for SAT. In 8th International Conference on
Principles and Practice of Constraint Programming,
pages 233–248. Springer Verlag, LNCS 2470, 2002.
[4] F. Massacci and L. Marraro. Logical cryptanalysis
as a SAT problem. In Journal of Automated Reason-
ing, 24:165-203, 2000.
[5] T. Matsumoto and H. Imai. Human identiﬁcation
through insecure channel. In EUROCRYPT 1991,
pages 409–421. Springer Verlag, LNCS 547, 1991.
[6] I. Mironov and L. Zhang. Applications of SAT
solvers to cryptanalysis of hash functions. In The-
ory and Applications of Satisﬁability Testing 2006,
pages 102-115.
[7] UBCSAT. The stochastic local search SAT solver
from the University of British Columbia. http:
//www.satlib.org/ubcsat/
[8] C.-H. Wang, T. Hwang, J.-J. Tsai. On the Mat-
sumoto and Imai’s human identiﬁcation scheme. In
EUROCRYPT 1995, pages 382–392. Springer Ver-
lag, LNCS 921, 1995.
[9] D. Weinshall. Cognitive authentication schemes safe
against spyware (short paper). In 2006 Symposium
on Security and Privacy, pages 295–300.
[10] D. Weinshall. Cognitive authentication schemes safe
against spyware. Hebrew University. Leibniz Cen-
ter for Research in Computer Science. TR 2006-5,
2006.