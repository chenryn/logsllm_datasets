occurs when the executable references a symbol deﬁned in
an external dynamic library. In the case of vtables, the ﬁrst
invariant ensures that vtables are externally-deﬁned symbols.
The second invariant further ensures that there exists a symbol
reference to the vtables in the executable because the construc-
tor needs to initialize the object’s memory including the vtable
pointer (Figure 4 (b)). On the other hand, if the constructor is
implemented as an external library function, the executable
simply makes an inter-module call into the constructor for
initializing objects, which eliminates the vtable reference from
the executable.
B. Format Strings
Functions like printf use format strings as templates
to direct outputs. Researchers have long known that such
functions may be vulnerable if an adversary controls the
format string input or the program uses directives that enable
unauthorized memory accesses, which have become known as
format string vulnerabilities [6]. More recently, researchers
have shown that, by controlling the format string used in
printf, an adversary can basically use the function as
an interpreter and achieve Turing-complete computation [12]
that evades control-ﬂow defenses that they call printf-oriented
programming.
One obvious defense against such vulnerabilities is to use
static format strings. While such a defense may not always be
possible, it is simple and encouraged where it is possible [14].
When enabled, the fortify gcc patch [27] enforces read-only
format strings at the compiler level. The compiler-based check
assumes that format strings allocated from read-only sections
remain immutable (which is not true for COREV). For exam-
ple, printf-oriented programming requires that the adversary
be able to modify the format string at runtime to implement
branches in their attack. Thus, the current assumption is that
the use of static format strings will prevent attacks on functions
that use format strings.
Unfortunately, copy relocations can make format strings
writable, enabling such attacks. Speciﬁcally, if a format string
(i.e., a constant char array) is deﬁned in a library and ref-
erenced from the executable, the loader will copy the entire
string to writable memory and make it susceptible to memory
corruption. Then, an adversary can implement printf-oriented
programming simply by modifying the value of a supposedly
static format string.
C. Other Static Data
Programs use a variety of other static data, such as static
ﬁle names and IP addresses to utilize system resources uncon-
ditionally, such as program conﬁguration ﬁles and well-known
IP addresses like “127.0.0.1”. Researchers have long been
concerned about adversaries modifying the names of system
resources accessed by programs. In general, various types
of confused deputy attacks [24], such as link traversal [17]
and Time-Of-Check-To-Time-Of-Use (TOCTTOU) [9], [28],
enable an adversary to direct a vulnerable program to a
resource of the adversary’s choosing. Such an attack may
enable an adversary to access a resource that is available to the
victim, but not to the adversary (e.g., password ﬁles or secret
key ﬁles). Alternatively, such attacks may enable an adversary
to direct the victim to use an adversary-controlled resource
instead (e.g., adversary-deﬁned conﬁguration or IP address). In
these attacks, adversaries gain unauthorized access over victim
resources or control inputs the victim depends upon.
Current defenses to prevent such attacks focus on ﬁlter-
ing adversary-controlled ﬁle names [8] or restricting system
calls that use adversary-controlled input in constructing ﬁle
names [13], [35], [42]. For example, one recent defense iden-
tiﬁes the data dependence between adversary-controlled inputs
and the system call arguments that use them to restrict the
resources accessible to system calls [42]. This approach uses
a dynamic analysis to detect where system calls use adversary-
controlled input
in ﬁle names. However, such a dynamic
analysis is unlikely to detect how to craft inputs necessary
to overwrite ﬁle names that were thought to be immutable.
As a result, when copy relocations make ﬁle names and other
system resource names writeable, these will go undetected by
such defenses.
V. MITIGATION
The presented COREV attack vector has existed for
decades. We propose three fundamental mitigation approaches:
(1) detection through a simple checker, (2) recompiling the
underlying software as position independent code which does
not require copy relocations (i.e., enabling a compiler switch),
or (3) changing the toolchain to include additional informa-
tion about the memory permissions of external symbols to
enable permission-aware copy relocations. In addition, it is
also possible to leverage source code annotations to eliminate
copy relocations. We discuss the annotation approach in detail
in Section VII-E when we evaluate other operating systems.
A. Detecting Permission Violations
A straightforward mitigation simply refuses execution of
programs that violate the intended memory protection during
copy relocations. The key idea is to detect copy relocations that
violate permissions for any given executable. Our approach
consists of three steps. First, we identify a list of symbols
that are copied at runtime. This information is collected by
parsing the relocation sections and identifying copy relocations
from the program executable. Second, we locate the origins of
those symbols. In this step, we parse the .dynamic section
and follow the search order to enumerate dependent libraries.
Finally, given a relocated symbol and a dependent library, the
third step is to identify (i) whether the library deﬁnes the
symbol and (ii) whether the symbol is in the library’s read-
only data section. If both are true, we report this memory
protection violation and mark the program as potentially unsafe
for execution.
B. Recompiling Software
Given that the static linker may not know the memory
protection of referenced symbols in a dynamic library, a
principled way to mitigate corruptions on read-only variables
is to eliminate copy relocations. Therefore, the executable ref-
erences external variables that reside in their original locations
with untampered memory protections.
7
as position independent does come with additional perfor-
mance costs compared with copy relocations. First, accessing
all library variables (including mutable variables that are not
affected by COREV) now require two memory accesses, while
copy relocations only need one. Second, relative addressing
mode can be costly especially for 32-bit x86 architecture where
such a mode is not natively supported [33].
C. Adapting the Toolchain
The mapping between protection modiﬁers at the source
code level and the protection enforced at runtime is crude.
The protection modiﬁers change between languages and are
mapped to read and write permissions at
the linker and
loader level. Especially for externally deﬁned variables, this
mapping can be imprecise. In the example shown in Figure 2,
the declaration of variable foo has the keyword const. A
dynamic library often has a header ﬁle that declares exported
read-only variables in such a way, so that executables can
reference them after including the header ﬁle.
Unfortunately, source-level protection information is lost
when a source ﬁle is compiled into an object ﬁle (*.o),
primarily due to how ELF speciﬁes the memory protection
for variables. Recall that ELF sets memory protections at the
granularity of sections (see Section II). Thus, the way ELF
speciﬁes a variable as read-only is to allocate the variable
from a read-only section (e.g., .rodata), so that the linker
can preserve the intended memory protection when combining
these sections into a single read-only section at link time.
However, the compiler does not actually allocate externally-
deﬁned variables in object ﬁles. Instead, the compiler marks
them as undeﬁned. An undeﬁned reference is insufﬁcient
for the linker to determine the originally intended memory
protection settings for these variables.
Our proposed solution is to adapt the current toolchain to
preserve such information along the compiler toolchain from
source code to object ﬁles. To be compatible with the current
ELF speciﬁcation, we allocate a separate section (referred as
COREV section) in the object ﬁle to store memory protection
information for each externally-deﬁned variable. Speciﬁcally,
each entry in the COREV section contains a permission ﬂag
to specify the intended memory protection (i.e., read-only
or read-write), as well as an ELF symbol index to specify
the variable for which the permission ﬂag applies. Therefore,
based on the added information, the linker can create variable
copies in corresponding data sections with respect
to the
originally intended memory protection.
Finally, we also adapt
the dynamic loader so that
it
can perform copy relocations on read-only data sections by
mapping them as writable during startup and protecting them
as read-only afterwards. This process is similar to how the
current dynamic loader handles the .data.rel.ro section
as mentioned in Section VI. This approach requires changing
the entire toolchain (i.e., compiler, linker, and loader), and we
leave its prototype implementation to future work.
VI. COREV INVESTIGATION
We have implemented two mechanisms to assess the new
attack vector. Both tools are implemented in Python, using the
8
Fig. 6: Object ﬁles compiled with -fPIC and the resultant
executable that accesses (i) library’s globals and (ii) its own
globals.
Recall that the motivation of copy relocations is to enable
GOT-unaware code to reference external
library variables.
Therefore, to eliminate copy relocations, such references must
go through the GOT, which is designed for serving inter-
module references. To do so, we propose to change the
compiler ﬂags and add the -fPIC ﬂag. This ﬂag instructs
the compiler to generate object ﬁles that are suitable for use
in a dynamic library. It has two effects on the generated code.
First, the code uses IP-relative addressing mode to access
global variables. Second, the code accesses global variables
through the GOT. We rely on the second effect to eliminate
copy relocations. The -fPIE ﬂag, which is typically used
for creating position-independent executables (e.g., to support
ASLR) as opposed to the -fPIC ﬂag for creating dynamic
libraries, cannot be used to eliminate copy relocations. This is
because, the -fPIE ﬂag only ensures the use of IP-relative
addressing mode (the ﬁrst effect), but does not force global
variable accesses to go through the GOT (the second effect),
which is key to avoiding copy relocations.
We show the generated instructions at the compilation stage
in Figure 6 (a) to explain how the -fPIC ﬂag helps eliminate
copy relocations. For each symbol access, the compiler emits
two memory accesses, where the ﬁrst retrieves the address of
the symbol from the GOT and the second actually loads its
value. Consequently, at link time, the linker can allocate a GOT
entry for variables that are externally deﬁned in a dynamic
library. This saves the linker from creating a copy relocation
to cover the “mistake” of the clueless compiler.
One concern of this mitigation is the cost for accessing
a global symbol. It seemingly incurs an unnecessary memory
load operation for accessing globals that are deﬁned within
the executable, since their locations are statically known and
hence do not require GOT indirections. In fact, on x86, the
static linker can optimize the code sequence to save one
memory access by changing the ﬁrst
instruction to be an
LEA instruction, which simply computes the effective address
instead of actually fetching the value from the memory (shown
in Figure 6 (b)). This is possible because the LEA instruction
has the same byte sequence as the corresponding MOV instruc-
tion except for the second byte in their opcodes.
However, despite this optimization, compiling executables
//	load	GOT	entry	to	%rax,//	0x0	requires	link-time//	relocationmovq	0x0(%rip),%rax//	load	var	value	to	%raxmovq	(%rax),%rax(a) assembly of object ﬁle(b) assembly of executable//	load	GOT	entry	to	%raxmovq	GOT_ENTRY(%rip),%rax//	load	var	to	%raxmovq	(%rax),%rax//	load	var	address	to	%raxlea	VAR_ADDR(%rip),%rax//	load	var	value	to	%raxmovq	(%rax),%rax(i) access library variables(ii) access executable variablesPyELF library to handle object ﬁles, with a total of 174 lines
of code.
The ﬁrst tool takes an executable as parameter and gen-
erates a list of copy relocations that may alter the memory
protection set on the imported library variables. It has two
components. The ﬁrst part identiﬁes all exported, read-only
variables in a given dynamic library. Speciﬁcally, for each
exported library variable, we check whether it resides in a
read-only data section (e.g., .rodata). One subtlety here
is that some writable data sections (e.g., .data.rel.ro
and GOT) can be reprotected as read-only at runtime through
the RELRO program header [2]. The dynamic loader imple-
ments functionality to handle relocations on read-only data
by (1) grouping them into a dedicated section so that the
other read-only data without relocations can still be shared
among processes, and (2) resolving the relocations during
startup and then remapping the writable section to read-only
afterwards. We treat
those sections as read-only (ignoring
the small window for a TOCTTOU attack during startup).
The second component enumerates all copy relocations in an
executable. For each copy relocation, we iterate through each
of the executable’s dependent libraries (i.e., extracted from
the executable’s .dynamic section) and check whether the
copied variable is present and read-only in the library. If so,
we report this copy relocation as potentially unsafe.
The second tool infers the data type for a given library
variable. To enable our tool to analyze arbitrary libraries, we do
not require source code or debug information. Instead, we infer
data types using binary analysis. We classify the symbols into
seven categories: (i) C++ vtables, (ii) function pointers, (iii)
generic pointers, (iv) format strings, (v) ﬁle and path names,
(vi) generic strings, and (vii) other variables.
First, we broadly infer pointers and strings in the dynamic
libraries. To discover pointer variables, we rely on relocation
information in the library. Speciﬁcally, given a dynamic library
can be loaded at an arbitrary address at runtime, a pointer in
the data sections must be properly patched to run. That said,
each pointer in the dynamic library will have a corresponding
relocation entry. For example, an R_X86_64_RELATIVE
entry instructs the loader to add the loading base address to
a pointer variable so that it points to the correct location at
runtime. Furthermore, for the discovered pointers, we check
whether they point to code or data, and classify them into
function pointers and data pointers accordingly (see below). A
pointer can be part of a composite variable such as a structure
or an array. For simplicity, we classify the entire variable into
the pointer category as long as one of its ﬁelds is a pointer.
To determine strings, we check whether the variable con-
tains only ASCII characters and if it is NULL-terminated. We
further identify format strings and ﬁle names from discovered
string variables (see below). We highlight format strings and
ﬁle names because memory corruption on them could lead to
security breaches.
Next, we discuss how we infer and classify the types of
exported library variables in detail:
Function pointers: if the variable is a pointer and the pointer
references a code segment;
Generic pointers: if the variable is a pointer into the current
library or relocated to a different library and not a function
pointer (i.e., references data);
Format strings: if the variable is a string and contains at least
one format speciﬁer (%);
File names and paths: if the variable is a string and contains
at least one path separator (/);
Generic strings: if the variable is a string and is neither a
format string nor a ﬁlename/path;
Other variables: all other variables.
While the current prototype uses simple heuristics, they
work well in practice. We currently restrict automatic type
discovery through heuristics and binary analysis as debug
information is not always available. In future work we will
evaluate further heuristics and approaches for identifying a
broader set of data types, e.g., by using debug information
(whenever available).
VII. EVALUATION
A. Attack Surface
In this section, we study the distribution of read-only
variables in dynamic libraries of a real Linux distribution.