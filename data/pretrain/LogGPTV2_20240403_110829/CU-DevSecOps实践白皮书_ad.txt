（1）混沌工程 
混沌工程通过在受控实验中对待测系统主动注入故障的方式检测
应用系统的弱点，以达到减少故障生产的概率，和增强系统韧性的
目的。 
混沌工程可以根据实际情况和成熟度情况选择合适的环境进行实
验，实验通过相关工具对应用系统进行故障攻击，如：模拟资源不
足（如：CPU、内存、IO 或磁盘不足等）、模拟基础环境错乱（如：
在主机操作系统上执行关闭、重启、更改主机的系统时间、杀死指
定进程等）、模拟网络错误（如：丢弃网络流量、增加网络延时、
DNS 服务故障等）。 
（2）模糊测试 
CU-DevSecOps 实践白皮书 
21 
模糊测试是常用的动态应用程序安全测试技术，该技术通过自动
生成测试输入来测试应用系统在不同输入下出现的状况，进而分析
运行时的异常，并检测潜在的漏洞。其核心在于如何生成有效的测
试用例，从而测试尽可能多的系统行为，由于模糊测试无法做到完
全自动化，且非常耗时，所以一般只针对于关键应用系统。 
（3）集成测试 
集成测试是根据设计要求将所有组件、模块进行组装后展开的系
统测试。传统的单元测试无法覆盖业务应用系统的所有功能，会有
部分安全风险无法暴露出来，因此对系统进行集成测试也是必不可
少的。 
（4）行为基线建立 
在准生产环境中，可以对软件系统的行为模型进行学习与建模，
形成它的行为基线，包括：进程、网络、文件读写和命令执行等。
当软件系统在生产环境运行时，如果检测到模型外行为，便可能判
定为异常事件并发送告警。 
3.3.5 发布阶段 
发布阶段需要对软件进行数字化签名，该签名可用于在后续预防
阶段来验证软件是否被恶意用户进行过非法篡改。软件签名是开发
人员在软件或代码发布之前，通过技术手段附加在其上的唯一安全
标识。操作系统、软件应用程序、设备等通过可信的数字签名来验
证软件或代码的来源并确认其完整性。在这个过程中，签名密钥的
CU-DevSecOps 实践白皮书 
22 
安全保护直接影响到软件签名的安全性，因此，将密钥存储在具有
防篡改和密码保护的专用硬件密码保护设备中。 
3.3.6 预防阶段 
预防阶段是正式上线运营前的最后一个阶段，在此阶段过程中需
要通过对签名验证、完整性检查来保证应用及其部署环境的安全性。 
（1）签名验证 
在部署软件时应对软件进行签名验证，校验软件是否被篡改，保
证部署的软件是未经非法篡改的。 
（2）完整性检查 
检查应用程序组件的完整性，如可执行文件、配置文件和各种二
进制模块是否被更改或损坏。黑客可以将应用程序模块或文件替换
为其他包含恶意代码的模块或文件从而开展攻击，如果应用程序模
块或文件的校验不正确，应用系统不应该继续加载或执行这些模块
或文件。 
3.3.7 检测阶段 
检测阶段通过部署相关安全工具对业务系统进行安全防御、威胁
检测和安全感知等，从而及时的发现安全风险，为响应阶段的处置
建立良好的基础。在此阶段常用技术包括运行时应用程序自保护
（RASP）、用户和实体行为分析（UEBA）、网络流量监控、渗透测
试和资产安全监控等。 
CU-DevSecOps 实践白皮书 
23 
（1）运行时应用程序自保护 
RASP 通过将安全能力原生化，内嵌于运行时的应用程序中，使得
应用程序具备运行时安全攻击的检测和阻断能力。与 Web 应用程序
防火墙 (WAF) 相比，RASP 的主要优势在于检测应用程序行为来确
定访问请求是否为攻击，在面对 Web 应用防火墙无法防御的加密场
景和其规则无法覆盖到的攻击行为时，RASP 能够进行有效的检测和
防护。随着 DevOps 变得越来越普遍，RASP 因其具备识别攻击快速且
准确、能够定位安全漏洞风险代码、持续实时的监控和快速融入软
件开发等特性，逐步被业内的安全防护实践方案采用。 
（2）用户和实体行为分析 
UEBA 通过分析系统日志等运行时数据建立用户和实体正常行为模
型，并基于该模型检测系统运行异常或者用户行为异常。当出现异
常行为时，UEBA 可以有效地提醒安全人员。  
（3）网络流量分析 
根据 Gartner 的定义，网络流量分析结合机器学习、高级分析
和基于规则的检测方式来发现网络上的可疑活动。网络流量分析系
统通过持续分析原始流量或流记录（例如 NetFlow），以构建正常
的网络行为模型，当网络流量分析工具检测到异常的流量模式时会
发出警报，并及时提醒安全运维人员。 
（4）渗透测试 
渗透测试是通过对应用程序及环境中的目标系统进行模拟攻击，
并进行全面安全评估的过程。通过渗透测试不但可以发现系统中存
CU-DevSecOps 实践白皮书 
24 
在漏洞，还可以检验安全防护措施的有效性，在实践中除了邀请专
家团队进行渗透测试外，还会引入攻防对抗演练等内容。 
（5）资产安全监控 
以网络资产为主线，通过远程探测方式对网络资产指纹及风险状
态进行检测跟踪，实现从漏洞发现到漏洞跟踪到漏洞修复及验证的
全生命周期的闭环管理，并展示资产安全综合评估得分、全网资产
的指纹统计情况、资产及漏洞分布情况、漏洞影响资产范围等信息。 
3.3.8 响应阶段 
通过自动化安全工具的检测，可以有效的发现一些安全风险，在
发现安全风险的基础上，下一步需要在运营和安全监控工作中，对
风险进行有效的响应。 
（1）安全编排 
调度和编排虚拟和物理安全资源池，实现安全资源自动分配、安
全业务自动化发放、安全策略自动适应网络业务变化、全网高级威
胁实时响应防护等能力需求。 
（2）RASP/WAF 的防护 
通过 RASP/WAF 监测应用程序运行时遭受到的攻击，并在记录相
应攻击行为的同时产生告警信息，指导安全运维人员采取防御措施，
同时更新 RASP/WAF 防护策略。 
CU-DevSecOps 实践白皮书 
25 
3.3.9 预测阶段 
预测阶段是在业务系统上线运行后，结合历史漏洞、攻击事件、
威胁情报等信息，主动分析发现、预测未被发现或利用的漏洞风险、
攻击风险等内容。 
（1）漏洞相关性分析 
漏洞相关性分析把不同的安全工具（如：SAST、DAST、IAST、
RASP、SCA）所检测到的漏洞，以及人工渗透测试发现的漏洞，通过
相关性分析进行自动关联，进一步确认漏洞是否存在以及漏洞是否
被全面修复。 
（2）威胁情报 
威胁情报包括恶意资源信息、恶意样本、安全隐患信息和安全事
件信息等，其中恶意资源信息指实施网络攻击的恶意 IP 地址、恶意
域名、恶意 URL 等，安全隐患信息指网络服务和产品中存在的安全
漏洞、不合规配置等，安全事件信息指网络服务和产品已被非法入
侵、非法控制的网络安全事件。通过威胁情报，有效的对这些安全
事件开展重点防御和相关的漏洞治理。 
3.3.10 优化阶段 
优化阶段需要借助 DevSecOps 工具链，对实施 DevSecOps 流程的
各个阶段进行持续的适配改进和项目调整优化，然后对优化点进行
跟踪管理，确保所有的优化点都被制定了完整的闭环流程，并依据
流程进行整改。DevSecOps 流程优化主要包括消除安全技术债务、优
CU-DevSecOps 实践白皮书 
26 
化应急响应方案。 
（1）消除安全技术债务。 
安全技术债务是指系统的各历史版本中存在的由于时间、成本、
技术、资源、环境等约束而无法得到满足的安全需求或无法及时修
复的安全弱点等内容。通过消除安全技术债务，能够提升应用系统
的安全健壮性，从而提升整体组织安全开发能力和安全运营能力。 
（2）优化应急响应方案 
定期对应急响应预案进行优化，当业务系统遭受到安全威胁时，
立即启动应急响应预案，并采取收集问题信息、抑制威胁影响范围、