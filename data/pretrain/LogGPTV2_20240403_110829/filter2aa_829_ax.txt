ULONG ulBufferSize = sizeof(pszValue);
USHORT wSizeConsumed = 0;
dwStatus = TdhFormatProperty(
pEventInfo,
pMapInfo,
Evading EDR (Early Access) © 2023 by Matt Hand
164   Chapter 8
ulPointerSize,
propertyInfo.nonStructType.InType,
propertyInfo.nonStructType.OutType,
wPropertyLen,
wUserDataLen,
pUserData,
&ulBufferSize,
1 pszValue,
&wSizeConsumed);
if (dwStatus == ERROR_SUCCESS)
{
--snip--
wprintf(L"%s: %s\n", 2 pszPropertyName, pszValue);
--snip--
}
--snip--
}
Listing 8-22: Retrieving event data with tdh!TdhFormatProperty()
After the function completes, the name of the property (as in the key 
portion of the key-value pair) will be stored in the NameOffset member  
of the event map information structure (which we’ve stored in the  
pszPropertyName variable 2, for brevity). Its value will be stored in the  
buffer passed into tdh!TdhFormatProperty() as the Buffer parameter  
1 (pszValue, in our example).
Testing the Consumer
The snippet shown in Listing 8-23 comes from our .NET event consumer. 
It shows the assembly-load event for the Seatbelt reconnaissance tool being 
loaded into memory via a command-and-control agent.
AssemblyID: 0x266B1031DC0
AppDomainID: 0x26696BBA650
BindingID: 0x0
AssemblyFlags: 0
FullyQualifiedAssemblyName: Seatbelt, Version=1.0.0.0, --snip--
ClrInstanceID: 10
Listing 8-23: Consumer of the Microsoft-Windows-DotNETRuntime provider detecting 
Seatbelt being loaded
From here, the agent can use the values as it pleases. If, for instance, 
the agent wanted to terminate any process that loads the Seatbelt assembly, 
it could use this event to trigger that preventive action. To instead act more 
passively, it could take the information collected from this event, supple-
ment it with additional information about the originating process, and cre-
ate its own event to feed into detection logic.
Evading EDR (Early Access) © 2023 by Matt Hand
Event Tracing for Windows   165
Evading ETW-Based Detections
As we’ve demonstrated, ETW can be an incredibly useful method for col-
lecting information from system components that would otherwise be 
impossible to get. The technology isn’t without its limitations, however. 
Because ETW was built for monitoring or debugging and not as a critical 
security component, its protections aren’t as robust as those of other sensor 
components.
In 2021, Claudiu Teodorescu, Igor Korkin, and Andrey Golchikov of 
Binarly gave a great presentation at Black Hat Europe in which they cata-
loged existing ETW evasion techniques and introduced new ones. Their 
talk identified 36 unique tactics for bypassing ETW providers and trace ses-
sions. The presenters split these techniques into five groups: attacks from 
inside an attacker-controlled process; attacks on ETW environment vari-
ables, the registry, and files; attacks on user-mode ETW providers; attacks 
on kernel-mode ETW providers; and attacks on ETW sessions.
Many of these techniques overlap in other ways. Moreover, while some 
work across most providers, others target specific providers or trace sessions. 
Several of the techniques are also covered in Palantir’s blog post “Tampering 
with Windows Event Tracing: Background, Offense, and Defense.” To sum-
marize both groups’ findings, this section breaks down the evasions into 
broader categories and discusses the pros and cons of each.
Patching
Arguably the most common technique for evading ETW in the offensive 
world is patching critical functions, structures, and other locations in 
memory that play some role in the emission of events. These patches aim to 
either completely prevent the provider from emitting events or selectively 
filter the events that it sends.
You’ll most commonly see this patching take the form of function hook-
ing, but attackers can tamper with numerous other components to alter 
event flow. For example, an attacker could null out the TRACEHANDLE used by 
the provider or modify its TraceLevel to prevent certain types of events from 
being emitted. In the kernel, an attacker could also modify structures such 
as the ETW_REG_ENTRY, the kernel’s representation of an event registration 
object. We’ll discuss this technique in greater detail in “Bypassing a .NET 
Consumer” on page XX.
Configuration Modification
Another common technique involves modifying persistent attributes of 
the system, including registry keys, files, and environment variables. A vast 
number of procedures fall into this category, but all generally aim to pre-
vent a trace session or provider from functioning as expected, typically by 
abusing something like a registry-based “off” switch.
Two examples of “off” switches are the COMPlus_ETWEnabled envi-
ronment variable and the ETWEnabled value under the HKCU:\Software\
Microsoft\.NETFramework registry key. By setting either of these values to 
Evading EDR (Early Access) © 2023 by Matt Hand
166   Chapter 8
0, an adversary can instruct clr.dll, the image for the Microsoft-Windows-
DotNETRuntime provider, not to register any TRACEHANDLE, preventing the 
provider from emitting ETW events.
Trace-Session Tampering
The next technique involves interfering with trace sessions already run-
ning on the system. While this typically requires system-level privileges, 
an attacker who has elevated their access can interact with a trace session 
of which they are not the explicit owner. For example, an adversary may 
remove a provider from a trace session using sechost!EnableTraceEx2() or, 
more simply, using logman with the following syntax:
logman.exe update trace TRACE_NAME --p PROVIDER_NAME --ets
Even more directly, the attacker may opt to stop the trace entirely:
logman.exe stop "TRACE_NAME" -ets
Trace-Session Interference
The final technique complements the previous one: it focuses on preventing 
trace sessions, most commonly autologgers, from functioning as expected 
before they are started, resulting in persistent changes to the system.
One example of this technique is the manual removal of a provider 
from an autologger session through a modification of the registry. By delet-
ing the subkey tied to the provider, HKLM:\SYSTEM\CurrentControlSet\
Control\WMI\Autologger\\{PROVIDER_GUID}, or by 
setting its Enabled value to 0, the attacker can remove the provider from the 
trace session after the next reboot.
Attackers could also take advantage of ETW’s mechanisms to prevent 
sessions from working as expected. For example, only one trace session per 
host can enable a legacy provider (as in MOF- or TMF-based WPP). If a new 
session enabled this provider, the original session would no longer receive 
the desired events. Similarly, an adversary could create a trace session with 
the same name as the target before the security product has a chance to 
start its session. When the agent attempts to start its session, it will be met 
with an ERROR_ALREADY_EXISTS error code.
Bypassing a .NET Consumer
Let’s practice evading ETW-based telemetry sources by targeting a .NET 
runtime consumer similar to the one we wrote earlier in this chapter. In his 
blog post “Hiding Your .NET—ETW,” Adam Chester describes how to pre-
vent the common language runtime from emitting ETW events, keeping a 
sensor from identifying the loading of SharpHound, a C# tool that collects 
the data to be fed into the path-mapping attacker tool BloodHound.
Evading EDR (Early Access) © 2023 by Matt Hand
Event Tracing for Windows   167
The bypass works by patching the function responsible for emitting the 
ETW event, ntdll!EtwEventWrite(), and instructing it to return immediately 
upon entry. Chester discovered that this function was ultimately responsible 
for emitting the event by setting a breakpoint on this function in WinDbg 
and watching for calls from clr.dll. The syntax for setting this conditional 
breakpoint is as follows:
bp ntdll!EtwEventWrite "r $t0 = 0;
 .foreach (p { k }) { .if ($spat(\"p\", \"clr!*\")) { r $t0 = 1; .break } };
 .if($t0 = 0) { gc }"
The conditional logic in this command tells WinDbg to parse the call 
stack (k) and inspect each line of the output. If any lines begin with clr!, indi-
cating that the call to ntdll!EtwEventWrite() originated from the common lan-
guage runtime, a break is triggered. If there are no instances of this substring 
in the call stack, the application simply continues.
If we view the call stack when the substring is detected, shown in 
Listing 8-24, we can observe the common language runtime emitting 
events.
 0:000> k
 # RetAddr 
Call Site
1 00 ntdll!EtwEventWrite
 01 clr!CoTemplate_xxxqzh+0xd5
 02 clr!ETW::LoaderLog::SendAssemblyEvent+0x1cd
2 03 clr!ETW::LoaderLog::ModuleLoad+0x155
 04 clr!DomainAssembly::DeliverSyncEvents+0x29
 05 clr!DomainFile::DoIncrementalLoad+0xd9
 06 clr!AppDomain::TryIncrementalLoad+0x135
 07 clr!AppDomain::LoadDomainFile+0x149
 08 clr!AppDomain::LoadDomainAssemblyInternal+0x23e
 09 clr!AppDomain::LoadDomainAssembly+0xd9
 0a clr!AssemblyNative::GetPostPolicyAssembly+0x4dd
 0b clr!AssemblyNative::LoadFromBuffer+0x702
 0c clr!AssemblyNative::LoadImage+0x1ef
3 0d mscorlib_ni!System.AppDomain.Load(Byte[])$##60007DB+0x3b
 0e mscorlib_ni!DomainNeutralILStubClass.IL_STUB_CLRtoCOM(Byte[])
 0f clr!COMToCLRDispatchHelper+0x39
 10 clr!COMToCLRWorker+0x1b4
 11 clr!GenericComCallStub+0x57
 12 0x00000209`24af19a6
 13 0x00000209`243a0020
 14 0x00000209`24a7f390
 15 0x000000c2`29fcf950
Listing 8-24: An abbreviated call stack showing the emission of ETW events in the  
common language runtime
Reading from bottom to top, we can see that the event originates in 
System.AppDomain.Load(), the function responsible for loading an assembly 
into the current application domain 3. A chain of internal calls leads into 
the ETW::Loaderlog class 2, which ultimately calls ntdll!EtwEventWrite() 1.
Evading EDR (Early Access) © 2023 by Matt Hand
168   Chapter 8
While Microsoft doesn’t intend for developers to call this function 
directly, the practice is documented. The function is expected to return  
a Win32 error code. Therefore, if we can manually set the value in the  
EAX register (which serves as the return value on Windows) to 0 for  
ERROR_SUCCESS, the function should immediately return, appearing to always 
complete successfully without emitting an event.
Patching this function is a relatively straightforward four-step process. 
Let’s dive into it in Listing 8-25.
#define WIN32_LEAN_AND_MEAN
#include 
void PatchedAssemblyLoader()
{
PVOID pfnEtwEventWrite = NULL;
DWORD dwOldProtection = 0;
 1 pfnEtwEventWrite = GetProcAddress(
 LoadLibraryW(L"ntdll"),
 "EtwEventWrite"
);
if (!pfnEtwEventWrite)
{
return;
}
 2 VirtualProtect(
pfnEtwEventWrite,
3,
PAGE_READWRITE,
&dwOldProtection
);
 3 memcpy(
pfnEtwEventWrite,
"\x33\xc0\xc3", // xor eax, eax; ret
3
);
 4 VirtualProtect(
pfnEtwEventWrite,
3,
dwOldProtection,
NULL
);
--snip--
}
Listing 8-25: Patching the ntdll!EtwEventWrite() function
Evading EDR (Early Access) © 2023 by Matt Hand
Event Tracing for Windows   169
We locate the entry point to ntdll!EtwEventWrite() in the currently 
loaded copy of ntdll.dll using kernel32!GetProcAddress() 1. After locating the 
function, we change the memory protections of the first three bytes (the 
size of our patch) from read-execute (rx) to read-write (rw) 2 to allow us to 
overwrite the entry point. Now all we have to do is copy in the patch using 
something like memcpy() 3 and then revert the memory protections to their 
original state 4. At this point, we can execute our assembly loader func-
tionality without worrying about generating common language runtime 
loader events.
We can use WinDbg to validate that ntdll!EtwEventWrite() will no longer 
emit events, as shown in Listing 8-26.
0:000> u ntdll!EtwEventWrite
ntdll!EtwEventWrite:
00007ff8`7e8bf1a0 33c0  
xor  
eax,eax
00007ff8`7e8bf1a2 c3  
ret
00007ff8`7e8bf1a3 4883ec58  
sub  
rsp,58h
00007ff8`7e8bf1a7 4d894be8  
mov  
qword ptr [r11-18h],r9
00007ff8`7e8bf1ab 33c0  
xor  
eax,eax
00007ff8`7e8bf1ad 458943e0  
mov  
dword ptr [r11-20h],r8d
00007ff8`7e8bf1b1 4533c9  
xor  
r9d,r9d
00007ff8`7e8bf1b4 498943d8  
mov  
qword ptr [r11-28h],rax
Listing 8-26: The patched ntdll!EtwEventWrite() function
When this function is called, it will immediately clear the EAX register 
by setting it to 0 and return. This prevents the logic for producing ETW 
events from ever being reached and effectively stops the provider’s telem-
etry from flowing to the EDR agent.
Even so, this bypass has limitations. Because clr.dll and ntdll.dll are 
mapped into their own processes, they have the ability to tamper with the 
provider in a very direct manner. In most cases, however, the provider is 
running as a separate process outside the attacker’s immediate control. 
Patching the event-emission function in the mapped ntdll.dll won’t prevent 
the emission of events in another process.
In his blog post “Universally Evading Sysmon and ETW,” Dylan Halls 
describes a different technique for preventing ETW events from being emit-
ted that involves patching ntdll!NtTraceEvent(), the syscall that ultimately 
leads to the ETW event, in kernel mode. This means that any ETW event on 
the system routed through this syscall won’t be emitted while the patch is in 
place. This technique relies on the use of Kernel Driver Utility (KDU) to sub-
vert Driver Signature Enforcement and InfinityHook to mitigate the risk of 
PatchGuard crashing the system if the patch were detected. While this tech-
nique expands the ability to evade ETW-based detections, it requires a driver 
to be loaded and protected kernel-mode code to be modified, making it sub-
ject to any mitigations to the techniques leveraged by KDU or InfinityHook.
Evading EDR (Early Access) © 2023 by Matt Hand
170   Chapter 8
Conclusion
ETW is one of the most important technologies for collecting host-based 
telemetry on Windows. It provides an EDR with visibility into components 
and processes, such as the Task Scheduler and local DNS client, that no 
other sensor can monitor. An agent can consume events from nearly any 
providers it finds and use that information to gain an immense amount 
of context about system activities. Evasion of ETW is well researched, with 
most strategies focusing on disabling, unregistering, or otherwise render-
ing a provider or consumer unable to handle events.
Evading EDR (Early Access) © 2023 by Matt Hand
Nearly every EDR solution includes a compo-
nent that accepts data and tries to determine 
whether the content is malicious. Endpoint 
agents use it to assess many different data types, 
such as files and memory streams, based on a set of 
rules that the vendor defines and updates. This compo-
nent, which we’ll refer to as the scanner for simplicity’s 
sake, is one of the oldest and best-studied areas in secu-
rity from both the defensive and offensive angles.
Because covering all aspects of their implementation, processing logic, 
and signatures would be like trying to boil the ocean, this chapter focuses 
on the rules employed by file-based scanners. Scanner rules differentiate 
one product’s scanner from another (barring major performance differ-
ences or other technical capabilities). And on the offensive side, it’s the 
scanner rules rather than the implementation of the scanner itself that 
adversaries must evade.
9
SC A N N E R S
Evading EDR (Early Access) © 2023 by Matt Hand
172   Chapter 9
A Brief History of Antivirus Scanning
We don’t know who invented the antivirus scanning engine. German secu-
rity researcher Bernd Fix developed some of the first antivirus software, in 
1987, to neutralize the Vienna virus, but it wasn’t until 1991 that the world 
saw an antivirus scanning engine that resembles the ones in use today; 
FRISK Software’s F-PROT antivirus would scan a binary to detect any reor-
dering of its sections, a pattern that malware developers of the time com-
monly employed to jump execution to the end of the file, where they had 
placed malicious code.
As viruses became more prevalent, dedicated antivirus agents became 
a requirement for many companies. To meet this demand, vendors such as 
Symantec, McAfee, Kaspersky, and F-Secure brought their scanners to mar-
ket in the 1990s. Regulatory bodies began enforcing the use of antivirus 
to protect systems, further promoting their adoption. By the 2010s, it was 
nearly impossible to find an enterprise environment without antivirus soft-
ware deployed on most of its endpoints.
This broad adoption lulled many directors of information-security 
programs into a false sense of security. While these antimalware scan-
ners had some success in detecting commodity threats, they missed more 
advanced threat groups, which were achieving their objectives without 
detection.
In May 2013, Will Schroeder, Chris Truncer, and Mike Wright released 
their tool, Veil, which opened many people’s eyes to this overreliance 
on antivirus scanners. Veil’s entire purpose was to create payloads that 
bypassed antivirus by employing techniques that broke legacy detection 
rulesets. These techniques included string- and variable-name obfuscation, 
less common code-injection methods, and payload encryption. During 