# 攻击PHP框架的几种思路

### 译文声明
本文为翻译文章，原文来源于MottoIN。译文仅供参考，具体内容和含义以原文为准。

### 写在前面
本文将介绍一些主流开发框架及其设计理念，包括当前WEB设计的趋势与概念。此外，还将从我的视角阐述如何分析一个PHP程序，这些方法适用于开源框架及公司内部开发的框架（前提是能够访问源码）。

### 框架的选择
- **ThinkPHP V3.2**：在国内广受欢迎，尤其是在小公司中。
- **CodeIgniter V2.2.2**：是一个传统且流行的成熟框架，例如新浪许多地方站都使用该框架。
- **Laravel V5.1**：应用了最新的PHP技术，并借鉴了许多Java和Python框架的设计结构，是目前国内外最流行的PHP框架之一。

### 认识框架
以下是三个框架的基本目录结构：
- **Laravel**
- **CodeIgniter (CI)**
- **ThinkPHP (TP)**

需要注意的是，CI并未包含`composer.json`文件，但自3.0+版本起已加入PHP包管理功能，这极大方便了开发者的工作。

### 框架的基本设计模式
大多数现代PHP框架采用了MVC（Model-View-Controller）设计模式。而多层级分层模式则被称为HMVC（Hierarchical Model-View-Controller），它将客户端应用程序分解成具有父子关系的MVC结构。

### MVC对应的文件位置
在分析CMS程序时，首先需要定位控制器、模型以及视图文件的位置。具体路径如下：
- **控制器**：`Laravel -> CodeIgniter (CI) -> ThinkPHP (TP)`
- **模型**：`Laravel -> CodeIgniter (CI) -> ThinkPHP (TP)`
- **数据库连接文件**：
  - **ThinkPHP**：位于`Application/Home/Conf/config.php`内，其中包含数据库配置信息。
  - **CodeIgniter**：配置文件位于`application/config/database.php`。
  - **Laravel**：配置信息存放在`.env`文件或`config/database.php`中，支持通过环境变量设置数据库连接参数。

### SQL操作模型
在PHP开发过程中，通常会使用两种技术来处理SQL操作：
1. **Active Record (ORM)**：如ThinkPHP中的ORM技术，可将关系数据库表结构映射到对象上。
2. **查询构造器**：定义一个抽象数据库类，包含各种常用方法，如Laravel提供的查询构造器。

### 可能存在的SQL注入问题
- **原生SQL语句**：所有框架均支持执行原生SQL语句，若参数未经适当过滤，则存在注入风险。
- **错误的安全函数用法**：即使使用预编译机制，不当的字符串格式化也可能导致安全漏洞。
- **可控的where子查询key字段**：某些框架在处理查询数组时未对键名进行验证，从而可能引发注入攻击。

### URL路由
理解URL路由对于审计至关重要。语义化的URL使得从地址栏即可看出页面内容或功能，这是未来Web开发的一个趋势。各框架均提供了路由绑定功能，允许用户访问特定的控制器代码。

### 框架的过滤机制
- **针对URL的过滤**：多数框架在GET请求中实施了某种形式的验证或过滤。
- **接收参数的过滤**：重写`$_GET`/`$_POST`/`$_REQUEST`等全局变量，并提供额外的安全措施。
- **默认设置的全局安全机制**：如CodeIgniter的XSS过滤开关、ThinkPHP的数据过滤规则以及Laravel的CSRF防护。

### 其他注意事项
- 在测试API接口时，可通过添加`X-Requested-With: XMLHttpRequest`头模拟AJAX请求。
- 当上传文件无法被正常访问时，可能是由于服务器配置限制或路由设置所致。此时需考虑是否可以覆盖路由文件或利用文件包含漏洞绕过限制。

以上是对几个常见PHP框架基本特性的概述及其潜在安全问题的讨论。希望对你有所帮助！