with the last class of low efﬁciency codes, with the follow-
ing exception. The WEAVER codes provide a performance
advantage over MDS codes because they constrain the num-
ber of data elements that touch each parity (so-called par-
ity in-degree). This in turn implies a bound on efﬁciency
(50% and below). It is remarked in [10, 11] that WEAVER
codes provide an efﬁciency/performance trade-off for high
fault tolerant codes, interpolating (at the low end of the ef-
ﬁciency range) between Reed-Solomon and N-way mirror-
ing (the dual B-codes are in this space as well). The HoVer
codes provide a similar efﬁciency/performance trade-off on
the upper end of the efﬁciency range (above 50%). MDS
codes have large parity in-degree for all parity elements.
Large parity in-degree typically reﬂects better storage ef-
ﬁciency, whereas smaller parity in-degree typically reﬂects
better performance (particularly for rebuild or reconstruc-
tion). HoVer codes have the feature that some parity ele-
ments have small parity in-degree and others large parity
in-degree. This asymmetry of the HoVer codes is a key fea-
ture that enables their performance/efﬁciency trade-offs.
There are two other codes from the patent literature
that deserve mention because they have a layout as in Fig-
ure 1. These are the Nanda code [16] and the Samsung DH2
code [13] (other Samsung codes are purely vertical and non-
MDS). They are both only 2-fault tolerant, in contrast to the
HoVer constructions of 3 and 4-fault tolerance. Both have
an h-parity strip deﬁned by (2).
In the Nanda construction, h = 2 and v = 1 and the diago-
nal parities are computed for all diagonals in the array with-
out wrap-around. The construction requires more elements
for parity placement (i.e., does not satisfy (1)) and the diag-
onal parity elements have very non-uniform distribution of
parity in-degrees. HoVer codes, in constrast, achieve better
balance in parity formulas.
The Samsung DH2 code is, in fact, a special case of the
HoVer2
1,1 construction that we give in Section 3.1. Though
we discovered the HoVer codes independently of the Sam-
sung work (we became aware of this patent only after com-
pleting our initial study), the DH2 was in fact discovered
earlier, so it is more accurate to say that the HoVert
v,h codes
(and HoVer2
1,1 codes in particular) are generalizations of the
Samsung DH2 code. The DH2 code is limited only to n = p,
a prime and r = p− 2, whereas our constructions, even for
t = 2, h = v = 1, remove both of these constraints. More
remarks on this code are given in Section 3.1.
2.2. Generic parameter restrictions
In this section we prove some simple necessary condi-
tions on the parameters of HoVer codes as well as some
other useful results. Our ﬁrst theorem shows a fundamental
necessary condition for any HoVer code to achieve the spec-
iﬁed fault tolerance. It is independent of the XOR formulas
and depends only on the data/parity layout of Figure 1.
Theorem 1. Forany HoVert
lationshipmusthold:
[r, n] code,thefollowingre-
v,h
r(t − h) ≤ v(n− t).
(3)
Proof. We use a simple dimensionality argument involving
the generator matrix. The generator matrix for this code has
dimensions rn× (r + v)(n + h). Each column represents an
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
element in the data/parity layout of Figure 1. We place ze-
ros in hv columns of the matrix (one set of v columns of
zeros after each set of r columns of h-parity) to simulate the
2 subarray of the stripe. The generator matrix columns are
grouped in blocks of r + v columns, with each block cor-
responding to and representing a strip (or a code symbol);
each block then deﬁnes a failure domain. The generator ma-
trix with this block structure deﬁnes a set of equations that
map the user data values to the data/parity layout.
If the code has fault tolerance t, then it must tolerate the
loss of t strips. This can be simulated with the generator
matrix by removing t of the blocks of r + v columns. The
remaining matrix deﬁnes a set of equations that map user
data to the remaining (known) data and parity in the stripe.
If this matrix is full row rank (using modulo 2 or binary
arithmetic), then the system of equations is solvable and the
lost data can be recovered (and so any lost parity as well).
For the matrix to be full row rank, it must be that the
number of non-zero columns in the reduced matrix is at least
equal to the number of rows. The number of rows is rn. The
number of non-zero columns is at least (r+v)(n+h)−t(r+
v)− hv; we subtract the term hv assuming that no h-parity
blocks are removed (these blocks have v columns of zeros
in each block). So, we require,
rn ≤ (r + v)(n + h)− t(r + v)− hv.
A simple rearrangement of this inequality yields the in-
equality in the theorem. 2
Inequality (3) implies that for purely horizontal codes
there is no generic restriction on the number of rows (only
that h ≥ t, so h = t by (1); i.e., there are enough parity
columns for the required fault tolerance) – this is the case
for RAID4. Other restrictions on r and n for horizontal
codes (for example, see [2, 4, 6]) come from considerations
other than dimension (the same holds for certain HoVer
codes as we show later). For purely vertical codes of fault
tolerance 2, (3) implies r + v ≤ vn/2, which is tight for the
X-code (with v = 2, provided n is prime) and BCP codes [1]
(with v = 1, provided n is even).
For HoVer codes in general, this inequality in Theorem 1
is not a sufﬁcient condition for a valid code. We have done
extensive searches for constructions of valid HoVer codes
with t ≤ 4 (most of which are documented here or in [9]).
Based on the results, we make the following conjecture:
Conjecture 1. If n is prime and greater than t, then there
[r, n] codefor every pair[r, n] satisfyingthe
existsaHoVert
conditionofTheorem1.
v,h
More generally, for any n sufﬁciently large, there is a
(n,t, h,v) so that there exists a HoVer code
= r0
number r0
providedr ≤ r0.
=
Alternatively, for any r, there is a number n0
(r,t, h,v) sothatthereexistsaHoVercodeprovided n ≥
n0
n0.
The ﬁrst part of the conjecture states that the inequalities
in Theorem 1 are both necessary and sufﬁcient when n is
prime. We show in Section 3.1 that the conjecture holds
for t = 2 and v = h = 1. Reﬁned conjectures and numerical
evidence is given for t ≥ 3 in Section 3.2 and in [9].
On the other hand, we prove the following theorem re-
lated to the last two statements of the conjecture in the spe-
cial case that h = 1.
, n] for
Theorem 2. Suppose there exists a HoVert
some ﬁxed choice of v ≥ 1, t ≥ 2, n and r0. Then there
[r, n] codeforevery1 ≤ r ≤ r0.
existsaHoVert
Proof. For any r ≤ r0, we can construct the required
− r rows
[r, n] simply by logically zeroing any r0
HoVert
of data and the corresponding h-parity elements. 2
[r0
v,1
v,1
v,1
This theorem implies that HoVer codes (with h = 1) have
great ﬂexibility in their array parameters, particularly, in
the number of rows of data elements provided some con-
struction works at all. We show in Section 4 that large
r implies better efﬁciency, but small r implies better per-
formance. So having this range for r enables a wide (and
continuous) range of choices in the performance/efﬁciency
trade-off space for any given array size. For ﬁxed n (and
≤ v(n−t)/(t−1)
v,t), our goal is to ﬁnd the largest value r0
that supports a given construction.
Conversely, we will see that if a construction works for
some value of n0 (for ﬁxed r), then it does not necessarily
work for all values of n ≥ n0. That is, there can be (and
are) gaps in the sequence of valid n for a given r, but it is
“continuous” after some n0 sufﬁciently large.
We contrast the statement of this theorem with a typical
purely horizontal code with t ≥ 2. As an example, consider
the EVENODD code [2]. In this case, the r = p− 1 and it
must be the case that n ≤ p− 2 = r + 1. That is, for ﬁxed n,
there is a lower bound on the number of rows in such codes.
Conversely, for ﬁxed r, there is an upper bound on n. So,
increasing the array size forces an increase in the number of
rows (for HoVer codes, the row number can stay constant as
the array size increases). This analysis applies to essentially
every horizontal code, including Reed-Solomon [19]. See
Section 4 for additional comments.
So far, we have not given any speciﬁcation of how parity
is computed in the HoVer codes. Beyond the above theo-
rems, we know very little in the general case. In the next
section, we provide details of our known constructions.
3. Constructions
In this section, we describe explicit constructions for
HoVer codes. A complete theory is provided for a family
of 2-fault tolerant HoVer codes. In Section 3.2 we discuss
a construction of a 3-fault tolerant code with v = 2, and re-
mark on the incompleteness of the theory and our extensive
experimental results. An alternative 3-fault tolerant code
with v = 1 and some 4-fault tolerant constructions are dis-
cussed brieﬂy in Section 3.2.2, with more details in [9].
For each set of parameter values [t, v, h,n,r], we verify
a proposed construction, by building a generator matrix (in
block form) and exhaustively checking all possible failure
scenarios for the presumed fault tolerance t (see [12, 11] for
similar and more detailed discussions)
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
3.1. Two fault tolerance
In this section, we provide the complete theory of a fam-
[r, n] codes (2-fault tolerant with one v-parity
ily of HoVer2
1,1
row and one h-parity strip). Our theorems provide neces-
sary and sufﬁcient conditions for r and n.
Let modn(k) be the value of (k mod n) in the set
{0, . . . ,n− 1}. Also, let pr(n) be the smallest prime divi-
sor of n. For example, if n is prime, then pr(n) = n; if n
is even, then pr(n) = 2. For later use, we let pr2
(n) be the
second largest distinct prime factor of n (distinct means dif-
ferent from pr(n)); for a prime or prime power, n = pk, we
set pr2
Let s ≥ 1 and relabel the entries in the ﬁrst (and only)
row V (0, j) of v-parity by Us( j). Deﬁne these parity values
by:
(n) = ∞.
Us( j) = r−1(cid:1)
k=0
X(r− 1− k,modn( j + k + s)).
(4)
this parity is computed along the up-diagonal
Visually,
(hence the symbol U for “up”) with wrapping from right to
left (modulo n). Each diagonal starts on the disk s-shifted
to the right (with wrap-around) of the parity disk. The fol-
lowing graphic shows the example with s = 2, r = 4 and
n = 7:
0
4
2
3
5
6
1
0
5
3
4
6
1
2
0
6
4
5
1
2
3
0
3
2
1
6
5
4
(6)
(5) U2
(4) U2
(3) U2
(2) U2
(1) U2
(0) U2
U2
H(0)
H(1)
H(2)
H(3)
Data elements are labeled by the index (strip number) of
(0) is highlighted (in
their v-parity;
bold).
the diagonal for U2
Note that the deﬁnition has the up-diagonal parity lines
wrapping from right-to-left similar to the X-code [22] (be-
cause of the modn in (4)). There is no wrapping from top
to bottom as common in horizontal codes such as EVEN-
ODD [2] or RDP [6] codes.
We have the following result:
Theorem 3. The s-shift HoVer2
1,1
hasfaulttolerancetwoifandonlyif
(cid:2)
r ≤
n− s
n− n/pr(n)− s otherwise.
ifs > n/pr(n),
[r, n] codedeﬁnedby(4)
We give a proof below but ﬁrst give some examples. If n is
prime, then pr(n) = n so the relation is r ≤ n− 2 for s = 1
or s = 2. This is the necessary condition of Theorem 1 and
shows that Conjecture 1 holds in this special of t = 2 and
v = h = 1 when s = 1 or s = 2.
When s = 1, n = p and r = n− 2 = p− 2, formula (4)
deﬁnes a code identical to the Samsung DH2 [13] code.
The construction given above generalizes the Samsung con-
struction to n composite and also allows for variability in
the choice of r and s. We show below that s = 2 provides a
performance advantage over the Samsung DH2 code, even
when n = p and r = p− 2.
We show in Section 4.1 that larger admissible values for