第10章Web应用程序和服务器的模期测试：自动化
101
代码吗？不是，只是必须要这样做。
当编写模糊器时，一个最大的挑战就是你试图以一种超常规的方法来编写代码。因此，那
些标准的类和函数可能就不适合你的需要。我们的目的是要完整的控制原始HTTP请求，但不
幸的是各种各样的Web类并没有为我们提供这样的控制粒度。例如，考虑下面的代码：
WebClfent wc1Fuzz = mew webC1fentO;
wc1Fuzz.Headers.Add(*b1ah", "b1ah");
Stream data = wc1Fuzz.0penRead("http:// www.fuzzing.org");
StreanReader reader = new StreanReader(data):
data.CloseO):
reader.CloseO):
这个简单的代码示例是要求使用WebClient类发送一个定制的Web请求。我们创建了一个
基本的GET请求，并且只加入了一个定制头（b1ah：blah）。然而，当噢探所生成的实际通信时，
我们发现下面的请求被发送了：
GET / HTTP/1.1
Host: ww.fuzzing.org
blah:b1ah
Connection: Keep-A1ive
你可能会注意到在实际的请求中，两个额外的头也被加入了，即主机（Host）和连接
（Connection）。因为这个原因，使得我们不能使用通常的类。我们必须要牺性一定的使用便利
性，以换取对该过程进行低层次完整的控制。在我们的例子中，WebFuzz的网络通信部分使用
了TcpClient类.
异步Sockets
但在WebFuzz中使用它们是经过深思熟虑后作出的决定，因为这种方式更好地处理了在使用模
糊器时可能会出现的预期的网络问题。
同步socket采用阻止化的工作方式。这意味着当遇到一个请求或响应时，主线程将停止执
行，并且在继续执行之前要等待该通信执行完毕。使用一个模糊器，我们将尽力地试图去导致
异常条件的发生，某些异常可能会导致性能下降或者使目标应用完全离线。我们不希望
WebFuzz在等待可能永远也不会发生的通信时成为无响应的程序。异步socket可以使我们避免
此问题，因为它们采用的是非阻止化的工作方式，异步socket发出一个单独的线程来处理此类
通信，并且激活一个回调函数以指示通信何时完成。这就允许其他事件继续执行。
下面来分析一下WebFuzz中的网络通信代码，以便更好地理解异步socket的概念：
TcpC1ient client;
NetworkStream strean;
ClientState cs;
try
---
## Page 117
102
第二部分目标和自动化
client.Connect(reqHost,Convert.ToInt32（tbxPort.Text））;
client = new TcpClientO;
strean-client.GetStreamO:
cs-new ClientState(strean，reqBytes）;
catch (SocketException ex)
联师
MessageBox.Show(ex.Message,“Error*，MessageBoxButtons.OK,
MessageBoxIcon.Error):
return;
catch (System.I0.I0Exception ex)
MessageBox.Show(ex,Message,“Error*, MessagefloxButtons.0K,
MessageBoxIcon.Error);
4266
return:
IAsyncResult result= stream,Beginwrite(cs.ByteBuffer,0
年简个
Cs.ByteBuffer.Length,new AsyncCal1back(OnwriteComplete),cs);
resu7t.AsyncMaitHandle.WaitOneO;
在创建了一个典型的TCPClient和NetworkStream之后，我们激活了stream中的
BeginWrite（）方法。BeginWrite（）方法使用下面5个参数：
·byte[]array。包含写人到网络流的数据的一个缓冲区。
·intoffset。缓冲区中开始发送数据的位置。
·intnumBytes。写人的最大字节数。
·AsyncCallbackuserCallback。通信完成时将被激活的回调函数。
·objectstate0bject。区分此异步写请求与其他请求的一个对象。
AsyncWaitHandle.WaitOne（）将导致侦听线程被阻止，直到请求被成功地发送。这时，回
调函数将被调用，如下所示：
pub1ic static void OnwriteComplete(IAsyncResult ar)
V
try
ClientState cs-(CTfentState)ar.AsyncState;
cs.NetStream.Endwrite(ar);
catch (System.objectDisposedException ex)
Messagelox.Show(ex.Message,“Error",MessageBoxButtons.OK,
MessageBoxIcon.Error):
}
当我们编写完对网络流的请求之后，就可以接收到从服务器返回的结果：
F
try
ml/frlrfsyster
---
## Page 118
第10章Web应用程序和服务器的模糊测试：自动化
103
result - strean.BeginRead(cs.ByteBuffer, cs.TotalBytes,
cs.ByteBuffer.Length-cs.TotaTBytes,
new AsyncCa11back(OnReadComplete),cs);
catch (System.I0.IOException ex)
MessageBox.Show(ex.Message,“Error",MessageBoxButtons.ok,
MessageBoxIcon.Error):
ReadDone.CloseO):
return;
上
在这时，我们再次使用一个异步socket，但这次它被用来接收从目标应用所返回的响应。
我们现在激活BeginRead（）方法，该方法含有同BeginWrite（）方法相同的参数，但这次我们使
用OnReadComplete（）作为回调函数：
pub11c void OnReadComp1ete(IAsyncResu1t ar)
readTimeout.Interval-Convert.ToInt32(tbxTimeout.Text):
readTimeout.Elapsed += new ElapsedEventHandler(OnTimedEvent):
readTimeout.Enabled - true;
ClientState cs=(ClientState)ar.AsyncState;
int bytesRcvd;
try
bytesRcvd - cs.NetStrean.EndRead(ar);
catch (System.I0.I0Exception ex)
1
MessageBox.Show(ex.Message,“Error",MessageBoxButtons .OK,
MessageBoxIcon.Error):
catch (System.ObjectDisposedException ex)
return;
{
Cs.AppendResponse(Encoding.ASCII.GetString(cs.ByteBuffer,
cs.Tota1Bytes,bytesRcvd));
cs.AddToTota1Bytes(bytesRcvd):
if (bytesRcvd 1= 0)
Cs.NetStream.BeginRead(cs.ByteBuffer, cs.TotalBytes,
Cs.ByteBuffer.Length -cs.TotalBytes,
new AsyncCa11back(OnReadCompTete),cs）;
}
else
L
---
## Page 119
104
第二部分目标和自动化
readTineout.Enabled-false;
if (ReadDone.Set（) -= false)
ReadDone.Set():
}
在OnReadComplete（）的开头创建了一个定时器（readTimeout），当到达用户定义的超时
时，该定时器将调用ReadDone.Set（）.这就允许我们确保如果读取操作失败则该线程可能处于
不活动状态，并且为终端用户提供一种方法以控制超时的长度。然后将所接收到的响应追加到
缓冲区。这时，我们需要决定是否应当继续等待以后的数据。这项工作可以通过确定是否有字
节被接收来完成。如果有字节被接收，我们通过再次激活BeginRead（）来继续等待以后的数据。
如果没有字节被接收，则销毁该线程并继续执行。
生成请求
在我们发送一个请求之前，必须要首先确定发送的内容。此内容显然是从用户创建请求的
请求头窗口获得的，但是每个模糊变量[xXx]必须被实际的模糊数据所替代。一且用户在
btnRequest_C1ick（）方法中点击请求按钮，那么该过程就开始执行。
if (rawRlequest.Contains(°[") 1= true 11 ramRequest.Contains(°]") 1= true)
ranRequest -“[None]"+rawRequest;
while (rawRequest.Contains(“[") &rawfequest.Contains(°]°)
-rawRequest.IndexOf（'['））-1）:
fuzz=raequest.Substring（rawRequest.IndexOf(*[′)•1.（ranReouest.IndexDf(*1)
当我们生成请求以后，就开始执行一个循环，该循环连续地解析用户提供的数据直到在请
求中遇到模期变量。然后转到一个case语句，以确定对每个模糊变量执行何种操作。
int arrayEnd = 0;
int arrayCount =0;
Read fuzzText = nu11;
webFuzz.Generate fuzzCenerate = nul1;
ArrayList fuzzArray = nu11;
saed s
string[] fuzzVariables -{“SQL", “XSS°,“Methods°,“Overflow”, “Traversa1°,“Format”
switch (fuzz)
fuzzText-newRead(“sqlinjection.txt°):
fuzzArray-fuzzText.readFi1eO:
arrayEnd - fuzzArray.Count;
. -d
case “xS5*:
break;
fuzzText - new Read(“xssinjection.txt"):
fuzzArray - fuzzText.readFi1e）:
arrayEnd-fuzzArray.Count;
1[ssx]. - buasaoeda
---
## Page 120
第10章Web应用程序和服务器的模期测试：自动化
105
break;
case “Methods":
fuzzText = new Read(“methods.txt"）);
fuzzArray-fuzzText.readF11e(）:
arrayEnd-fuzzArray.Count;
break;
case “0verf1ow":
fuzzGenerate= new webFuzz.Overflow（overf1owFi11,overflowLength,
fuzzArray - fuzzGenerate.bui1dArrayO:
overflowMultiplier):
arrayEnd - fuzzArray.Count;
case “Traversa1":
break;
fuzzGenerate- new webFuzz.Overflow("./", 1, 10);
fuzzArray - fuzzGenerate.buf1dArrayC);
arrayEnd- fuzzArray.Count;
break;
case “Format":