### Unpredictability and Public-Coin Parameters

The process described is suitable only for ATMS (Ad-hoc Threshold Multi-Signature) systems that employ public-coin parameters. The ATMS constructions detailed in Section V are of this type.

### Induction Base: Genesis Block and Initial Stake Distribution

In the initial phase, \( P \) is published as part of the Genesis block \( G \). Each time a mainchain (MC) stakeholder \( U_i \) posts a sidechain support message to MC, they also include an ATMS key \( v_{k_i} \). When the sidechain (SC) is initialized, the initial stake distribution \( S^*_{j_{\text{start}}} \) and the parameter \( \bar{\eta}_{j_{\text{start}}} \) are known to the MC participants. These values determine the last 2k slot leaders of epoch \( j_{\text{start}} \) in SC, which we refer to as the \( j_{\text{start}} \)-th trust committee. In general, the \( j \)-th trust committee for \( j \geq j_{\text{start}} \) will be the set of the last 2k slot leaders in epoch \( j \).

SC maintainers, who also follow MC, can determine the \( j_{\text{start}} \)-th trust committee and create \( a_{v_{k_{j_{\text{start}}}}} \) from their public keys. This value is then inserted into the genesis block \( G \) of SC. They can also serve it as a special transaction to the MC maintainers to include it in the mainchain. The correctness of \( a_{v_{k_{j_{\text{start}}}}} \) can be verified by anyone following the mainchain using the procedure \( ACheck \) of the used ATMS.

### Induction Step: Epoch Transition

For the induction step, consider an epoch \( j > j_{\text{start}} \) and assume that there exists an ATMS key \( a_{v_{k_{j-1}}} \) from the previous epoch, known to the mainchain maintainers. Every honest SC slot leader among the last 2k slot leaders of SC epoch \( j-1 \) will produce a local signature \( s_{i,j} \) on the message \( m = (j, \text{pending}_j, a_{v_{k_j}}) \) using their private key \( sk_{i,j-1} \) by running \( Sig(sk_{i,j-1}, m) \), and include this signature in the block they create.

The rest of the SC maintainers will verify that the epoch index, \( a_{v_{k_j}} \), and \( \text{pending}_j \) are correct (by ensuring \( ACheck(VK_j, a_{v_{k_j}}) \) is true, where \( VK \) denotes the public keys of the last 2k slot leaders on SC for epoch \( j \), and by recomputing the Merkle tree commitment \( \text{pending}_j \)). They also verify that \( s_{i,j} \) is valid by running \( Ver(m, vk_{i,j-1}) \); otherwise, the block is considered invalid.

Thanks to the chain growth property of the underlying Ouroboros protocol, after the last 2k slots of epoch \( j-1 \), the honest sidechain maintainers will all observe at least \( k+1 \) signatures among the desired ones. They then combine these local signatures into an aggregated ATMS signature \( \sigma_j \leftarrow ASig(m, \{s_{i,j}\}) \). This combined signature is then diffused as part of \( sc_{\text{cert}_j} \) on the mainchain network. The mainchain maintainers verify that it has been signed by the sidechain maintainers by checking that \( AVer(m, a_{v_{k_{j-1}}}, \sigma_j) \) evaluates to true and include it in a mainchain block. This effectively hands over control to the new committee.

### Constructing Ad-Hoc Threshold Multisignatures

We present an instantiation of the ATMS primitive based on the multisignature scheme \( \Pi_{MGS} \) from [6]. Note that other constructions are possible, and we defer a discussion of a plain signature-based ATMS, as well as an ATMS based on proofs of knowledge, to the full version of this paper.

We utilize a homomorphic property of \( \Pi_{MGS} \): any \( d \) individual signatures \( \sigma_1, \ldots, \sigma_d \) created using secret keys belonging to (not necessarily unique) public keys \( vk_1, \ldots, vk_d \) can be combined into a multisignature \( \sigma = \sum_{i=1}^d \sigma_i \), which can then be verified using an aggregated public key \( a_{vk} = \prod_{i=1}^d vk_i \).

Our multisignature-based t-ATMS construction works as follows: the procedures \( PGen, Gen, Sig, \) and \( Ver \) work exactly as in \( \Pi_{MGS} \). Given a set \( S \), denote by \( \langle S \rangle \) a Merkle-tree commitment to the set \( S \) created in some arbitrary, fixed, deterministic way. Procedure \( AKey \), given a sequence of public keys \( VK = \{vk_i\}_{i=1}^n \), outputs \( a_{vk} = (\prod_{i=1}^n vk_i, \langle VK \rangle) \). Since \( AKey \) is deterministic, \( ACheck(VK, a_{vk}) \) simply recomputes \( a_{vk} \) to verify it.

\( ASig \) takes the message \( m \), \( d \) pairs of signatures with their respective public keys \( \{(\sigma_i, vk_i)\}_{i=1}^d \), and produces an aggregate signature \( \sigma \). The procedure \( AVer \) takes a message \( m \), an aggregate key \( a_{vk} \), and an aggregate signature \( \sigma \), and does the following: (a) verifies that each of the public keys \( \tilde{vk}_i \) indeed belongs to a different leaf in the commitment \( \langle VK \rangle \) in \( a_{vk} \) using membership proofs \( \pi_{\tilde{vk}_i} \); (b) computes \( a_{vk}' \) by dividing the first part of \( a_{vk} \) by \( \prod_{i=1}^{n-d} \tilde{vk}_i \); (c) returns true if and only if \( d \geq t \) and the first part of \( \sigma \) verifies as a \( \Pi_{MGS} \)-signature under \( a_{vk}' \).

### Concrete Signature Sizes

The scheme \( \Pi_{MGS} \) requires \( vk_i \) to be accompanied by a (non-interactive) proof-of-possession (POP) [26] of the respective secret key. This POP can be appended to the public key and verified when the key is communicated in the protocol. For conciseness, we omit these proofs-of-knowledge from the description (but we include them in the size calculation below).

In the optimistic case where each of the 2k committee members creates their local signatures, both the aggregate key \( a_{vk} \) and the aggregate signature \( \sigma \) are linear in the security parameter, which is optimal. If \( r < k \) of the keys do not provide their local signatures, the construction falls back to being quadratic in the worst case if \( r = k-1 \).

Concrete signature sizes in this scheme for practical parameters could be as follows. We set \( k = 2^{160} \) (as is done in the Cardano implementations of [18]) and for the signature of [6], we have in bits: \( |vk_i| = 272 \), \( |\sigma_i| = 528 \) (N. Di Prima, V. Hanquez, personal communication, 16 Mar 2018), with \( |vk_i + \text{POP}| = |vk_i| + |\sigma_i| = 800 \) bits. Assuming a 256-bit hash function is used for the Merkle tree construction, the size of the data that needs to be included in MC in the optimistic case during an epoch transition is \( |a_{vk}| + |\sigma| + |\langle \text{pending} \rangle| = |vk_i + \text{POP}| + 2|H(\cdot)| + |\sigma_i| = 800 + 512 + 528 = 1840 \) bits per epoch. In a case where 10% of participants fail to sign, the size will be \( |a_{vk}| + |\sigma| = |vk_i + \text{POP}| + 2|H(\cdot)| + |\sigma_i| + 0.1 \cdot 2 \cdot k(|vk_i + \text{POP}| + \log(k)|H(\cdot)) = 800 + 512 + 528 + 432 \cdot (500 + 12 \cdot 256) = 1544944 \), or about 190 KB per epoch (which is approximately 5 days).

### Security

Our main theorem states that under natural assumptions, the construction from Section IV implements a secure 2-way peg according to Definition 8.

Let \( A_{hm}(L) \) denote the honest-majority assumption for an Ouroboros ledger \( L \). Namely, \( A_{hm}(L) \) postulates that in each slot \( t \), the majority of stake in the stake distribution used to sample the slot leader for slot \( t \) in \( L \) is controlled by honest parties. The assumption \( A_{MC} \) we consider for MC is precisely \( A_{hm}(MC) \), while the assumption \( A_{SC} \) for SC is \( A_{hm}(MC) \wedge A_{hm}(SC) \). The reason \( A_{SC} \Rightarrow A_{MC} \) is that SC uses merged staking and hence cannot provide any security guarantees if the stake records on MC get corrupted.

It is worth noting that it is possible to program SC to wean off MC and switch to independent staking; in such a case, the assumption for SC will transition to \( A_{hm}(SC) \) (now with respect to \( SD \)) after the weaning slot, and the two chains will become sidechains of each other.

**Theorem 1.** Consider the synchronous setting with 2R-semiadaptive corruptions defined in Section II-A. The construction of Section IV, using a secure ATMS and a collision-resistant hash function, is pegging secure with liveness parameter \( u = 2k \) with respect to assumptions \( A_{MC} \) and \( A_{SC} \), and merge, effect, and VA defined in Section IV-B.

The proof of Theorem 1 is deferred to the full version of the paper.

### Acknowledgements

This research was partially supported by H2020 project PRIVILEDGE #780477.

### References

[1] A. Back, M. Corallo, L. Dashjr, M. Friedenbach, G. Maxwell, A. Miller, A. Poelstra, J. Timón, and P. Wuille. Enabling blockchain innovations with pegged sidechains. http://www.opensciencereview.com/papers/123/enablingblockchain-innovations-with-pegged-sidechains. 2014.

[2] C. Badertscher, P. Gaži, A. Kiayias, A. Russell, and V. Zikas. Ouroboros genesis: Composable proof-of-stake blockchains with dynamic availability. Cryptology ePrint Archive, Report 2018/378, 2018. https://eprint.iacr.org/2018/378. To appear at ACM CCS 2018.

[3] E. Ben-Sasson, I. Bentov, Y. Horesh, and M. Riabzev. Scalable, transparent, and post-quantum secure computational integrity. Manuscript. (2017). Slides at https://people.eecs.berkeley.edu/~alexch/docs/pcpip_bensasson.pdf, 2017.

[4] I. Bentov, R. Pass, and E. Shi. Snow white: Provably secure proofs of stake. Cryptology ePrint Archive, Report 2016/919, 2016. http://eprint.iacr.org/2016/919.

[5] I. Bentov, R. Pass, and E. Shi. Snow white: Provably secure proofs of stake. IACR Cryptology ePrint Archive, 2016:919, 2016.

[6] A. Boldyreva. Threshold signatures, multisignatures and blind signatures based on the gap-Diffie-Hellman-group signature scheme. In Y. Desmedt, editor, PKC 2003, volume 2567 of LNCS, pages 31–46. Springer, Heidelberg, Jan. 2003.

[7] E. Buchman. Tendermint: Byzantine fault tolerance in the age of blockchains. PhD thesis, 2016.

[8] B. Bünz, J. Bootle, D. Boneh, A. Poelstra, P. Wuille, and G. Maxwell. Bulletproofs: Short proofs for confidential transactions and more.

[9] V. Buterin et al. A next-generation smart contract and decentralized application platform. White paper, 2014.

[10] R. Canetti. Universally composable security: A new paradigm for cryptographic protocols. In 42nd FOCS, pages 136–145. IEEE Computer Society Press, Oct. 2001.

[11] B. David, P. Gazi, A. Kiayias, and A. Russell. Ouroboros praos: An adaptively-secure, semi-synchronous proof-of-stake blockchain. In J. B. Nielsen and V. Rijmen, editors, EUROCRYPT 2018, Part II, volume 10821 of LNCS, pages 66–98. Springer, Heidelberg, Apr. / May 2018.

[12] J. Dilley, A. Poelstra, J. Wilkins, M. Piekarska, B. Gorlick, and M. Friedenbach. Strong federations: An interoperable blockchain solution to centralized third party risks. CoRR, abs/1612.05491, 2016.

[13] Y. Dodis and A. Yampolskiy. A verifiable random function with short proofs and keys. In S. Vaudenay, editor, PKC 2005, volume 3386 of LNCS, pages 416–431. Springer, Heidelberg, Jan. 2005.

[14] C. Dwork and M. Naor. Pricing via processing or combatting junk mail. In E. F. Brickell, editor, CRYPTO’92, volume 740 of LNCS, pages 139–147. Springer, Heidelberg, Aug. 1993.

[15] J. A. Garay, A. Kiayias, and N. Leonardos. The bitcoin backbone protocol: Analysis and applications. In E. Oswald and M. Fischlin, editors, EUROCRYPT 2015, Part II, volume 9057 of LNCS, pages 281–310. Springer, Heidelberg, Apr. 2015.

[16] A. Kiayias, N. Lamprou, and A.-P. Stouka. Proofs of proofs of work with sublinear complexity. In J. Clark, S. Meiklejohn, P. Y. A. Ryan, D. S. Wallach, M. Brenner, and K. Rohloff, editors, FC 2016 Workshops, volume 9604 of LNCS, pages 61–78. Springer, Heidelberg, Feb. 2016.

[17] A. Kiayias, A. Miller, and D. Zindros. Non-interactive proofs of proof-of-work, 2017.

[18] A. Kiayias, A. Russell, B. David, and R. Oliynykov. Ouroboros: A provably secure proof-of-stake blockchain protocol. In J. Katz and H. Shacham, editors, CRYPTO 2017, Part I, volume 10401 of LNCS, pages 357–388. Springer, Heidelberg, Aug. 2017.

[19] E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, E. Syta, and B. Ford. OmniLedger: A secure, scale-out, decentralized ledger via sharding. In 2018 IEEE Symposium on Security and Privacy, pages 583–598. IEEE Computer Society Press, May 2018.

[20] J. A. Kroll, I. C. Davey, and E. W. Felten. The economics of bitcoin mining, or bitcoin in the presence of adversaries. In The Twelfth Workshop on the Economics of Information Security (WEIS 2013), Washington DC, June 10-11 2013.

[21] S. D. Lerner. Drivechains, sidechains and hybrid 2-way peg designs, 2016.

[22] C. Li, T. Hwang, and N. Lee. Threshold-multisignature schemes where suspected forgery implies traceability of adversarial shareholders. In A. D. Santis, editor, Advances in Cryptology - EUROCRYPT ’94, Workshop on the Theory and Application of Cryptographic Techniques, Perugia, Italy, May 9-12, 1994, Proceedings, volume 950 of Lecture Notes in Computer Science, pages 194–204. Springer, 1994.

[23] L. Luu, V. Narayanan, C. Zheng, K. Baweja, S. Gilbert, and P. Saxena. A secure sharding protocol for open blockchains. In E. R. Weippl, S. Katzenbeisser, C. Kruegel, A. C. Myers, and S. Halevi, editors, Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, Vienna, Austria, October 24-28, 2016, pages 17–30. ACM, 2016.

[24] S. Micali. ALGORAND: the efficient and democratic ledger. CoRR, abs/1607.01341, 2016.

[25] S. Nakamoto. Bitcoin: A peer-to-peer electronic cash system. 2008.

[26] T. Ristenpart and S. Yilek. The power of proofs-of-possession: Securing multiparty signatures against rogue-key attacks. Cryptology ePrint Archive, Report 2007/264, 2007. https://eprint.iacr.org/2007/264.

[27] P. Sztorc. Drivechain - the simple two way peg, November 2015. http://www.truthcoin.info/blog/drivechain/.

[28] S. Thomas and E. Schwartz. A protocol for interledger payments. https://interledger.org/interledger.pdf.

[29] G. Wood. Ethereum: A secure decentralised generalised transaction ledger. Ethereum Project Yellow Paper, 151:1–32, 2014.

[30] G. Wood. Polkadot: Vision for a heterogeneous multi-chain framework, 2016.

[31] M. Zamani, M. Movahedi, and M. Raykova. RapidChain: A fast blockchain protocol via full sharding. Cryptology ePrint Archive, Report 2018/460, 2018. https://eprint.iacr.org/2018/460.

[32] A. Zamyatin, N. Stifter, A. Judmayer, P. Schindler, E. Weippl, W. Knottenbelt, and A. Zamyatin. A wild velvet fork appears! inclusive blockchain protocol changes in practice. In International Conference on Financial Cryptography and Data Security. Springer, 2018.

### Appendix

#### A. The Diffuse Functionality

In the model described in Section II-A, we employ the "Delayed Diffuse" functionality of [11], which we now describe in detail for completeness. The functionality is parameterized by \( \Delta \in \mathbb{N} \) and denoted \( DDifuse_{\Delta} \). It keeps rounds, executing one round per slot. \( DDifuse_{\Delta} \) interacts with the environment \( Z \), stakeholders \( U_1, \ldots, U_n \), and adversary \( A \), working as follows for each round: \( DDifuse_{\Delta} \) maintains an incoming string for each party \( P_i \). If activated, a party can fetch the contents of its incoming string, behaving as a mailbox. Furthermore, parties can give an instruction to the functionality to diffuse a message. Activated parties can diffuse once per round.

When the adversary \( A \) is activated, it can: (a) read all inboxes and all diffuse requests and deliver messages to the inboxes in any order; (b) for any message \( m \) obtained via a diffuse request and any party \( P_i \), \( A \) may move \( m \) into a special string \( delayed_i \) instead of the inbox of \( P_i \). \( A \) can decide this individually for each message and each party; (c) for any party \( P_i \), \( A \) can move any message from the string \( delayed_i \) to the inbox of \( P_i \).

At the end of each round, the functionality ensures that every message that was either (a) diffused in this round and not put to the string \( delayed_i \) or (b) removed from the string \( delayed_i \) in this round is delivered to the inbox of party \( P_i \). If a message currently present in \( delayed_i \) was originally diffused \( \Delta \) slots ago, the functionality removes it from \( delayed_i \) and appends it to the inbox of party \( P_i \).

Upon receiving \( (Create, U, C) \) from the environment, the functionality spawns a new stakeholder with chain \( C \) as its initial local chain (as in [11], [18]).

#### B. Omitted Algorithms

Here we spell out the procedures for initializing the sidechain (Algorithm 2), maintaining the mainchain (Algorithm 3), and decommissioning the sidechain (Algorithm 4).