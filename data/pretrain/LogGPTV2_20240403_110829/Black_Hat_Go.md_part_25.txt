determine the status of the port. Therefore, you can’t rely on
these tools to produce accurate results.
However, if you consider what happens after you’ve
established a connection—an exchange of data, perhaps in the
form of a service banner—you can deduce whether an actual
service is responding. SYN-flood protections generally won’t
exchange packets beyond the initial three-way handshake
unless a service is listening, so the presence of any additional
packets might indicate that a service exists.
Checking TCP Flags
To account for SYN cookies, you have to extend your port-
scanning capabilities to look beyond the three-way handshake
by checking to see whether you receive any additional packets
from the target after you’ve established a connection. You can
accomplish this by sniffing the packets to see if any of them
were transmitted with a TCP flag value indicative of
additional, legitimate service communications.
TCP flags indicate information about the state of a packet
transfer. If you look at the TCP specification, you’ll find that
the flags are stored in a single byte at position 14 in the
packet’s header. Each bit of this byte represents a single flag
value. The flag is “on” if the bit at that position is set to 1, and
“off” if the bit is set to 0. Table 8-1 shows the positions of the
flags in the byte, as per the TCP specification.
Table 8-1: TCP Flags and Their Byte Positions
Bit 7 6 5 4 3 2 1 0
Flag CWR ECE URG ACK PSH RST SYN FIN
Once you know the positions of the flags you care about,
you can create a filter that checks them. For example, you can
look for packets containing the following flags, which might
indicate a listening service:
ACK and FIN
ACK
ACK and PSH
Because you have the ability to capture and filter certain
packets by using the gopacket library, you can build a utility that
attempts to connect to a remote service, sniffs the packets, and
displays only the services that communicate packets with these
TCP headers. Assume all other services are falsely “open”
because of SYN cookies.
Building the BPF Filter
Your BPF filter needs to check for the specific flag values that
indicate packet transfer. The flag byte has the following values
if the flags we mentioned earlier are turned on:
ACK and FIN: 00010001 (0x11)
ACK: 00010000 (0x10)
ACK and PSH: 00011000 (0x18)
We included the hex equivalent of the binary value for
clarity, as you’ll use the hex value in your filter.
To summarize, you need to check the 14th byte (offset 13
for a 0-based index) of the TCP header, filtering only for
packets whose flags are 0x11, 0x10, or 0x18. Here’s what the
BPF filter looks like:
tcp[13] == 0x11 or tcp[13] == 0x10 or tcp[13] == 0x18
Excellent. You have your filter.
Writing the Port Scanner
Now you’ll use the filter to build a utility that establishes a full
TCP connection and inspects packets beyond the three-way
handshake to see whether other packets are transmitted,
indicating that an actual service is listening. The program is
shown in Listing 8-6. For the sake of simplicity, we’ve opted
to not optimize the code for efficiency. However, you can
greatly improve this code by making optimizations similar to
those we made in Chapter 2.
var ( ❶
snaplen = int32(320)
promisc = true
timeout = pcap.BlockForever
filter = "tcp[13] == 0x11 or tcp[13] == 0x10 or tcp[13] == 0x18"
devFound = false
results = make(map[string]int)
)
func capture(iface, target string) { ❷
handle, err := pcap.OpenLive(iface, snaplen, promisc, timeout)
if err != nil {
log.Panicln(err)
}
defer handle.Close()
if err := handle.SetBPFFilter(filter); err != nil {
log.Panicln(err)
}
source := gopacket.NewPacketSource(handle, handle.LinkType())
fmt.Println("Capturing packets")
for packet := range source.Packets() {
networkLayer := packet.NetworkLayer() ❸
if networkLayer == nil {
continue
}
transportLayer := packet.TransportLayer()
if transportLayer == nil {
continue
}
srcHost := networkLayer.NetworkFlow().Src().String() ❹
srcPort := transportLayer.TransportFlow().Src().String()
if srcHost != target { ❺
continue
}
results[srcPort] += 1 ❻
}
}
func main() {
if len(os.Args) != 4 {
log.Fatalln("Usage: main.go  
")
}
devices, err := pcap.FindAllDevs()
if err != nil {
log.Panicln(err)
}
iface := os.Args[1]
for _, device := range devices {
if device.Name == iface {
devFound = true
}
}
if !devFound {
log.Panicf("Device named '%s' does not exist\n", iface)
}
ip := os.Args[2]
go capture(iface, ip) ❼
time.Sleep(1 * time.Second)
ports, err := explode(os.Args[3])
if err != nil {
log.Panicln(err)
}
for _, port := range ports { ❽
target := fmt.Sprintf("%s:%s", ip, port)
fmt.Println("Trying", target)
c, err := net.DialTimeout("tcp", target, 1000*time.Millisecond) ❾
if err != nil {
continue
}
c.Close()
}
time.Sleep(2 * time.Second)
for port, confidence := range results { ❿
if confidence >= 1 {
fmt.Printf("Port %s open (confidence: %d)\n", port, confidence)
}
}
}
/* Extraneous code omitted for brevity */
Listing 8-6: Scanning and processing packets with SYN-flood protections (/ch-
8/syn-flood/main.go)
Broadly speaking, your code will maintain a count of
packets, grouped by port, to represent how confident you are
that the port is indeed open. You’ll use your filter to select
only packets with the proper flags set. The greater the count of
matching packets, the higher your confidence that the service
is listening on the port.
Your code starts by defining several variables for use
throughout ❶. These variables include your filter and a map
named results that you’ll use to track your level of confidence
that the port is open. You’ll use target ports as keys and
maintain a count of matching packets as the map value.
Next you define a function, capture(), that accepts the
interface name and target IP for which you’re testing ❷. The
function itself bootstraps the packet capture much in the same
way as previous examples. However, you must use different
code to process each packet. You leverage the gopacket
functionality to extract the packet’s network and transport
layers ❸. If either of these layers is absent, you ignore the
packet; that’s because the next step is to inspect the source IP
and port of the packet ❹, and if there’s no transport or
network layer, you won’t have that information. You then
confirm that the packet source matches the IP address that
you’re targeting ❺. If the packet source and IP address don’t
match, you skip further processing. If the packet’s source IP
and port match your target, you increment your confidence
level for the port ❻. Repeat this process for each subsequent
packet. Each time you get a match, your confidence level
increases.
In your main() function, use a goroutine to call your capture()
function ❼. Using a goroutine ensures that your packet
capture and processing logic runs concurrently without
blocking. Meanwhile, your main() function proceeds to parse
your target ports, looping through them one by one ❽ and
calling net.DialTimeout to attempt a TCP connection against each
❾. Your goroutine is running, actively watching these
connection attempts, looking for packets that indicate a service
is listening.
After you’ve attempted to connect to each port, process all
of your results by displaying only those ports that have a
confidence level of 1 or more (meaning at least one packet
matches your filter for that port) ❿. The code includes several
calls to time.Sleep() to ensure you’re leaving adequate time to set
up the sniffer and process packets.
Let’s look at a sample run of the program, shown in Listing
8-7.
$ go build -o syn-flood && sudo ./syn-flood enp0s5 10.1.100.100
80,443,8123,65530
Capturing packets
Trying 10.1.100.100:80
Trying 10.1.100.100:443
Trying 10.1.100.100:8123
Trying 10.1.100.100:65530
Port 80 open (confidence: 1)
Port 443 open (confidence: 1)
Listing 8-7: Port-scanning results with confidence ratings
The test successfully determines that both port 80 and 443
are open. It also confirms that no service is listening on ports
8123 and 65530. (Note that we’ve changed the IP address in
the example to protect the innocent.)
You could improve the code in several ways. As learning
exercises, we challenge you to add the following
enhancements:
1. Remove the network and transport layer logic and source checks from the
capture() function. Instead, add additional parameters to the BPF filter to ensure
that you capture only packets from your target IP and ports.
2. Replace the sequential logic of port scanning with a concurrent alternative,
similar to what we demonstrated in previous chapters. This will improve
efficiency.
3. Rather than limiting the code to a single target IP, allow the user to supply a list
of IPs or network blocks.
SUMMARY
We’ve completed our discussion of packet captures, focusing
primarily on passive sniffing activities. In the next chapter,
we’ll focus on exploit development.
9
WRITING AND PORTING EXPLOIT
CODE
In the majority of the previous chapters, you used Go to create
network-based attacks. You’ve explored raw TCP, HTTP,
DNS, SMB, database interaction, and passive packet
capturing.
This chapter focuses instead on identifying and exploiting
vulnerabilities. First, you’ll learn how to create a vulnerability
fuzzer to discover an application’s security weaknesses. Then
you’ll learn how to port existing exploits to Go. Finally, we’ll
show you how to use popular tools to create Go-friendly
shellcode. By the end of the chapter, you should have a basic
understanding of how to use Go to discover flaws while also
using it to write and deliver various payloads.
CREATING A FUZZER
Fuzzing is a technique that sends extensive amounts of data to
an application in an attempt to force the application to produce
abnormal behavior. This behavior can reveal coding errors or
security deficiencies, which you can later exploit.
Fuzzing an application can also produce undesirable side
effects, such as resource exhaustion, memory corruption, and
service interruption. Some of these side effects are necessary
for bug hunters and exploit developers to do their jobs but bad
for the stability of the application. Therefore, it’s crucial that
you always perform fuzzing in a controlled lab environment.
As with most of the techniques we discuss in this book, don’t
fuzz applications or systems without explicit authorization
from the owner.
In this section, you’ll build two fuzzers. The first will
check the capacity of an input in an attempt to crash a service
and identify a buffer overflow. The second fuzzer will replay
an HTTP request, cycling through potential input values to
detect SQL injection.
Buffer Overflow Fuzzing
Buffer overflows occur when a user submits more data in an
input than the application has allocated memory space for. For
example, a user could submit 5,000 characters when the
application expects to receive only 5. If a program uses the
wrong techniques, this could allow the user to write that
surplus data to parts of memory that aren’t intended for that
purpose. This “overflow” corrupts the data stored within
adjacent memory locations, allowing a malicious user to
potentially crash the program or alter its logical flow.
Buffer overflows are particularly impactful for network-
based programs that receive data from clients. Using buffer
overflows, a client can disrupt server availability or possibly
achieve remote code execution. It’s worth restating: don’t fuzz
systems or applications unless you are permitted to do so. In
addition, make sure you fully understand the consequences of
crashing the system or service.
How Buffer Overflow Fuzzing Works
Fuzzing to create a buffer overflow generally involves
submitting increasingly longer inputs, such that each
subsequent request includes an input value whose length is one
character longer than the previous attempt. A contrived
example using the A character as input would execute
according to the pattern shown in Table 9-1.
By sending numerous inputs to a vulnerable function,
you’ll eventually reach a point where the length of your input
exceeds the function’s defined buffer size, which will corrupt
the program’s control elements, such as its return and
instruction pointers. At this point, the application or system
will crash.
By sending incrementally larger requests for each attempt,
you can precisely determine the expected input size, which is
important for exploiting the application later. You can then
inspect the crash or resulting core dump to better understand
the vulnerability and attempt to develop a working exploit. We
won’t go into debugger usage and exploit development here;
instead, let’s focus on writing the fuzzer.
Table 9-1: Input Values in a Buffer Overflow Test
Attempt Input value
1 A
2 AA
3 AAA
4 AAAA
N A repeated N times
If you’ve done any manual fuzzing using modern,
interpreted languages, you’ve probably used a construct to
create strings of specific lengths. For example, the following
Python code, run within the interpreter console, shows how
simple it is to create a string of 25 A characters:
>>> x = "A"*25
>>> x
'AAAAAAAAAAAAAAAAAAAAAAAAA'
Unfortunately, Go has no such construct to conveniently
build strings of arbitrary length. You’ll have to do that the old-
fashioned way—using a loop—which would look something
like this:
var (
n int
s string
)
for n = 0; n < 25; n++ {
s += "A"
}
Sure, it’s a little more verbose than the Python alternative,
but not overwhelming.
The other consideration you’ll need to make is the delivery
mechanism for your payload. This will depend on the target
application or system. In some instances, this could involve
writing a file to a disk. In other cases, you might communicate
over TCP/UDP with an HTTP, SMTP, SNMP, FTP, Telnet, or
other networked service.
In the following example, you’ll perform fuzzing against a
remote FTP server. You can tweak a lot of the logic we
present fairly quickly to operate against other protocols, so it
should act as a good basis for you to develop custom fuzzers
against other services.
Although Go’s standard packages include support for some
common protocols, such as HTTP and SMTP, they don’t
include support for client-server FTP interactions. Instead, you
could use a third-party package that already performs FTP
communications, so you don’t have to reinvent the wheel and
write something from the ground up. However, for maximum
control (and to appreciate the protocol), you’ll instead build
the basic FTP functionality using raw TCP communications. If
you need a refresher on how this works, refer to Chapter 2.
Building The Buffer Overflow Fuzzer
Listing 9-1 shows the fuzzer code. (All the code listings at the
root location of / exist under the provided github repo
https://github.com/blackhat-go/bhg/.) We’ve hardcoded some
values, such as the target IP and port, as well as the maximum
length of your input. The code itself fuzzes the USER property.
Since this property occurs before a user is authenticated, it
represents a commonly testable point on the attack surface.
You could certainly extend this code to test other pre-
authentication commands, such as PASS, but keep in mind that
if you supply a legitimate username and then keep submitting
inputs for PASS, you might get locked out eventually.
func main() {
❶ for i := 0; i < 2500; i++ {
❷ conn, err := net.Dial("tcp", "10.0.1.20:21")
if err != nil {
❸ log.Fata lf("[!] Error at offset %d: %s\n", i, err)
}
❹ bufio.NewReader(conn).ReadString('\n')
user := ""
❺ for n := 0; n <= i; n++ {
user += "A"
}
raw := "USER %s\n"
❻ fmt.Fprintf(conn, raw, user)
bufio.NewReader(conn).ReadString('\n')
raw = "PASS password\n"
fmt.Fprint(conn, raw)
bufio.NewReader(conn).ReadString('\n')
if err := conn.Close()❼; err != nil {
❽ log.Println("[!] Error at offset %d: %s\n", i, err)
}
}
}
Listing 9-1: A buffer overflow fuzzer (/ch-9/ftp-fuzz/main.go)
The code is essentially one large loop, beginning at ❶.
Each time the program loops, it adds another character to the
username you’ll supply. In this case, you’ll send usernames
from 1 to 2,500 characters in length.
For each iteration of the loop, you establish a TCP
connection to the destination FTP server ❷. Any time you
interact with the FTP service, whether it’s the initial
connection or the subsequent commands, you explicitly read
the response from the server as a single line ❹. This allows
the code to block while waiting for the TCP responses so you
don’t send your commands prematurely, before packets have
made their round trip. You then use another for loop to build
the string of As in the manner we showed previously ❺. You
use the index i of the outer loop to build the string length
dependent on the current iteration of the loop, so that it