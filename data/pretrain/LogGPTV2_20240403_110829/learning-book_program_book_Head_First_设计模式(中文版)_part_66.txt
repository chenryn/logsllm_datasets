你说了许多关于模型的
BeatModel例子也可以这么做。如果
牵涉到了组合。
你对观察者模式一章还有印象，或许
状态，这是不是意味着它用到了状态
还记得这么做的缺点。如果你不记得
在MVC刚刚被发现的时候，建
模式？
了，翻回去复习吧！
立GUI需要许多手动干预，当时
MVC模式的感受比现在更明显。
合：
不，我们指的是一般意
问：
义上的状态。但的确有些模型使用状
如果有两个以上的视
问：
控制器会实现应用逻辑
态模式管理它们的内部状态。
图，是不是一定需要两个以上的控制
器呢？
吗？
合：
通常情况下，运行时一
合：不，控制器为视图实现控制器描述成视图和模型之间的中
个视图搭配一个控制器；但是要让一
行为。它聪明地将来自视围的动作转介者（Mediator）。控制器有没有实
个控制器类管理多个视图，也不是难
成模型上的动作。模型实现应用逻现“中介者模式”？
事。
辑，并决定如何响应动作。控制器也
要做一些决定，决定调用哪个模型的
合：
我们还没有提到中介者
视图不应该操纵模型，
哪个方法，但是这不能算是“应用逻模式（虽然你在本书的附录的模式概
览中会看到），所以这里不宜说太
但是我注意到在你的实现中，模型的
辑”。应用逻辑指的是管理与操纵你
多。大致上，中介者的意图是封装对
那些改变状态的方法并没有对视图设
的模型中的数据的代码。
象之间的交互，不让两个对象之间互
限，这样不危险吗？
5
相显式引用，以达到松耦合的目的。
：你说的没错，对于模型
个词让我很头痛。我现在知道它是系
固此，在某种程度上，控制器可以被的方法，我们给视图完全的权限。这
统的重点，但是为什么要用这么模糊
视为中介者，视图不会直楼设置模型么做的原因是为了“简单”。在某些
难懂的词汇来描述MVC的这个方面
的状态，而是通过控制器进行。但环境下，你可能只给视图访问模型
呢？
是，视图的确是持有用来访问模型状的部分API。这是一个很棒的设计模
态的模型引用。如果控制器是彻底的式，充许你适配一个接口，只提供一
中介者，那么视图就必须通过控制器个子集，你能够想起来是什么设计模
才能取得模型的状态。
式吗？
你现在的位置，
559
---
## Page 596
设计工具箱
设计箱内的工具
你的设计工具箱会让所有人感到印象深刻。哇！你看这
要点
些原则和模式，现在甚至还有复合模式！
·MVC是复合模式，结合
00基础
了观察者模式、策略模
式和组合模式。
00原则
象
■模型使用观察者模式，
装
以便观察者更新，同时
封装交化
态
保持两者之间解耦。
多用组合，少用继承
承
■控制器是视图的策略，
针对接口编程，不针对实现编
视图可以使用不同的控
程
制器实现，得到不同的
为交互对象之间的松耦合设计
币势力
行为。
类应该对扩展开放，对修改关
视图使用组合模式实现
用。
用户界面，用户界面通
依赖抽象，不要依赖具体类。
常组合了嵌套的组件，
只和朋应交谈
像面板、框架和按钮。
别找我，我会找你
这些模式携手合作，把
类应该只有一个改变的理由
MVC模型的三层解耦，
这样可以保持设计干净
又有弹性。
00模式
我们有一个新的类
适配器模式用来将新的
：MVCModel2
模型适配成已有的视图
代理模式——为另一个对象提供
属于复合模式。
和控制器。
一个替身或占位符以访问这个对象。
Model2是MVC在Web上
的应用。
复合模式
·在Model2中，控制器
复合模式结合两个或以上
实现成Servlet，而JSP/
的模式，组成一个解决方
HTML实现视图。
案，解决一再发生的一般
性问题。
560
第12章
---
## Page 597
复合模式
习题解答
harpenyourpencil
QuackCounter也是一个Quackable，当我们改变Quackable扩展
QuackObservable时，我们不得不改变每个实现Quackable的类，包
括QuackCounter。
QuackCounter也是一个Quackable，
所以现在也是QuackObservable。
public class QuackCounter implements Quackable {
Quackable duck;
static int numberofQuacks;
这是一个QuackCounter装
饰的鸭子。需要真正处理
public QuackCounter(Quackable duck)
Observable方法的就是它。
this.duck = duck;
public void quack() {
duck.quack ();
这部分代码和之前的
numberOfQuacks++;
QackCounter版本一样。
上
public static int getQuacks () (
return numberOfQuacks;
这是两个
QackObseable方法，注意
我们只爱把调用悉托给装
duck.registerobserve
lobse
饰的鸭子即可。
publicvoid notifyobservers()
duck.notifyobservers():
你现在的位置
561
---
## Page 598
削尖你的铅笔—答案
Sharpen your pencil
万一呱呱叫学家想观察整个群，又该怎么办呢？这么做又会是什么意思呢？不
妨这样来考虑：如果我们观察一个组合，就等于我们观察组合内的每个东西。
所以，当你注册要观察某个群（fock），就等于注册要观察所有的孩子，这甚
至还包括另一个群。
Flock也是Quackable，所以现在它也
是QuackObservable。
public class Flock implements Quackable {
ArrayList ducks = new ArrayList();
在Flock内的Quackable对象都放在这
里。
public void add(Quackable duck){
ducks,add (duck) ;
public void quack(){
Iterator iterator = ducks.iterator();
while (iterator.hasNext())(
Quackable duck = (Quackable)iterator.next ();
duck.quack () ;
当你向Flock注册观察老时，其
实等于是而Flock“内”的所有
QuAckable注册，不管是一只鸭
publicvoid registerobserver(Observer observer)
子还是另一个群。
Iterator iterator-ducks.iterator();
while（iterator.hasNext())(
Quackable duck-(Quackable)iterator.next();
我们进历Flock内的所有
duck.registerObserver(observer);
Quackable，把调用溢托
给每个Quackable。如果
Quackable是另一个Flock，做
public void notifyobservers())
同样的事。
每个Qaackable都负责自己通知观察老，这样
Flock就不必操心了。当Flock将guack(）悉托给内部的
每一个Quacka6le时，就是调用此方法的时机。
562
第12章
---
## Page 599
复合模式
harpenyourpencil
我们仍然依赖具体类直接实例化鹅。你能够为鹅写一个抽象工厂吗？创
建“内鹅外鸭”对象时，你要怎么处理？
你可以在现有的DuckFactory类中加上createGooseDuck（）方法，或者，你可以创建另
一个全新的工厂.创建端的家族。
设计类
你已经看到视图和控制器在一起，形成策略模式，你能够把这两个类的策略模式类图绘制出
来吗？
具体控制器都必须实
视图把行为善托给
DJView
现ControllerSnterbace.
控制露，这些行为
Controllerinterface
setBPM)
这就是策略接口。
都牵涉到如何基于
controller
createVie)
increaseBPM)
用户输入控制模型。
updateBPM)
updateBeat()
disatleSlopMenultem()
nabieStopMenultem()
abieStarMenultem()
Controller
disableStartMenultem(
e(BPM)
actionPerormed[)
tcreaseBPM0
只要括入不同的控制
decreaseBPMI
器，就可以为视图提
供不同的行为。
你现在的位置
563
---
## Page 600
待烘烤代码：DJ系统
待烘烤代码
这是DJView完整的实现。包含了所有的MIDI代码来产生
声音和所有的Swing组件来产生视图。你可以到http://www.
wickedlysmart.com下载代码。好好玩吧！
package headfirst.combined.djview;
public class DJTestDrive {
public static void main (String[] args)(
BeatModelInterface model = new BeatModel ();
ControllerInterface controller = new BeatController(model);
节拍模型
package headfirst.combined.djview;
public interface BeatModelInterface {
void initialize ();
void on() ;
void off () ;
void setBPM(int bpm) ;
int getBPM() ;
void registerObserver(Beatobserver o);
void removeObserver (Beatobserver o) ;
void registerObserver(BPMObserver o);
void removeObserver(BPMObserver o);
564
第12章
---
## Page 601
复合模式
package headfirst.combined.djview;
import javax.sound.midi.*;
import java.util.*;
public class BeatModel implements BeatModelInterface,MetaEventListener (
Sequencer sequencer;
ArrayList beatObservers = new ArrayList();
ArrayList bpmObservers = new ArrayList();
int bpm = 90;
//这里是其他的实例化变量
Sequence sequence;
Track track;
public void initialize(){
setUpMidi () ;
buildTrackAndStart ();
public void on(){
sequencer.start();
setBPM(90);
public void off(){
setBPM(0);
sequencer.stop();
public void setBPM(int bpm) {
this.bpm = bpm;
sequencer.setTempoInBPM(getBPM());
notifyBPMObservers () ;
1
public int getBPM()
return bpm;
）
中
void beatEvent()(
众
notifyBeatObservers ();
1
public void registerObserver(BeatObserver o) {
beatobservers.add(o);
public void notifyBeatobservers()(
for(int i= O;i= 0){
beatObservers.remove (i) ;
public void removeObserver (BPMobserver o) {
int i = bpmObservers.indexof (o);
if (i >= 0){
bpmObservers.remove(i);
public void meta (MetaMessage message) (
if (message.getType() == 47){
beatEvent () ;
sequencer.start();
SetBPM(getBPM()) ;
public void setUpMidi(){
try
sequencer = MidiSystem.getSequencer();
566
第12章
---
## Page 603
复合模式
sequencer.open ();
sequencer.addMetaEventListener(this);
sequence =new Sequence(Sequence.PPQ,4);
track = sequence.createTrack();
sequencer.setTempoInBPM(getBPM());
1catch(Exception e)(
e.printStackTrace();
public void buildTrackAndStart() (
int[] trackList ={35,0,46, 0};
sequence.deleteTrack(nul1);
track = sequence.createTrack();
makeTracks (trackList) ;
track.add(makeEvent(192,9,1,0,4));