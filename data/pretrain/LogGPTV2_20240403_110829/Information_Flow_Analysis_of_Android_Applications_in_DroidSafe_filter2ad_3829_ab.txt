### DroidSafe: A Comprehensive and Precise Information-Flow Analysis for Android Applications

DroidSafe delivers an analysis of unprecedented scalability, accuracy, and robustness through the following key components:

1. **Techniques for Scalability, Accuracy, and Robustness**: DroidSafe employs advanced techniques to achieve high scalability, accuracy, and robustness in its analysis.
2. **Integrated Mechanisms**: A set of new mechanisms that work together to provide a comprehensive, accurate, and precise information-flow analysis for Android applications.
3. **Significant Engineering Effort**: Extensive engineering effort has been invested to create a detailed and accurate model of the Android runtime.
4. **Specific Contributions**:
   - **Accurate Analysis Stubs**: A novel technique for rapidly and accurately developing semantics missing from the source code base. Each stub is written in the language of the API model, simplifying the analysis. These stubs augment the implementation with semantics that are complete for the analysis abstractions, even if they are incomplete for the full runtime behavior.
   - **Android Device Implementation (ADI)**: A comprehensive and precise model of the Android API and runtime system implemented in Java. The ADI accurately captures the semantics of lifecycle events, callback context, external resources, and inter-component communication. It includes 550 manually-verified Android API classes, covering over 98% of API calls in deployed Android applications. The current model is based on Android 4.4.3, and updating it for newer versions is not overly burdensome.
   - **Static Analysis Design Decisions**: DroidSafe uses deep object sensitivity and flow insensitivity. Flow insensitivity allows DroidSafe to consider all possible event orderings and scale to analyze an accurate and precise model of the Android environment. The loss of precision due to flow insensitivity is more than compensated by the ability to scale and analyze the detailed Android model.
   - **Static Communication Target Resolution**: A comprehensive and precise model of inter-component communication resolution in Android, linking data flows between sender and target. DroidSafe includes a global Intent and Uri value resolution analysis, IntentFilter reasoning, and coverage of all common forms of communication. This is the most complete such model to date.
   - **Experimental Evaluation**: An evaluation demonstrating that DroidSafe achieves unprecedented precision and accuracy for information-flow analysis of Android and can detect malicious sensitive information leaks inserted by sophisticated, independent hostile organizations, where other state-of-the-art analyses fail.
   - **Full Implementation**: A full open-source implementation of DroidSafe and the ADI, available upon request.

### Background and Problem

This paper identifies and implements, for the first time, an effective point in the overall Android information-flow design space. The overarching contribution is the identification of this design point and the resulting DroidSafe implementation. The ability of DroidSafe to operate at this design point is attributed to:
1. The identification of a set of techniques that work well together.
2. New implementations of known program analysis techniques.
3. A comprehensive and precise model of the Android API and runtime system.

#### Android Applications

Android applications are implemented in Java on top of the Android API. They specify handlers for dynamic events that may occur during execution, making them inherently dynamic and event-driven. Applications have multiple entry points and interact heavily with the Android API via utility and resource access classes. Analyzing the complete source code for the API is difficult due to its implementation over multiple languages and device-specific parts. Therefore, static analysis frameworks rely on modeling the Android API semantics, which is a daunting and error-prone task.

#### Event Dispatch and Ordering

An accurate model of event dispatch and ordering must represent all valid event orderings to capture possible runtime behavior. Otherwise, an attacker can hide flows in semantics not covered by the model. Android applications are composed of multiple components, each implementing one of four classes: Activity, Service, BroadcastReceiver, and ContentProvider. Each component has its own lifecycle defined with events for which callback implementations can be provided. For example, a leak of sensitive information can occur if `onCreate` is dispatched after `onStop`, which is possible if the activity is placed in the background and reactivated before being reclaimed by the system.

#### Callback Context

Android applications define callback handler methods for dynamically dispatched runtime events. Many event handler methods include arguments passed by the runtime to the application for processing. These arguments, called the callback context, can include data from the application, including tainted data. An accurate model must represent these possible flow connections, and policies like injecting taint for all callback handler arguments or connecting callback argument flows conservatively risk generating many false positives.

#### Inter-component Communication (ICC)

The Android framework relies heavily on ICC to allow individual components to be independent and better manage resources. Components initiate and connect to other components via `android.content.Intent` objects. The resolution of Intent destination is complex, as an Intent can specify a class explicitly or implicitly allow the Android system to select a destination based on a Uri and string fields. An accurate model must represent possible flows via ICC mechanisms and consider all possible orderings of component activations.

### Threat Model and Limitations

In our scenario, the application developer (or re-packager) is malicious and seeks to exfiltrate sensitive data from a mobile device to their servers or to an unprotected area on the device. Sensitive data includes unique device ID, sensor data, file data, image data, email and SMS messages, passwords, network traffic, and screenshots. The attacker intentionally routes sensitive data to unauthorized destinations. DroidSafe protects against explicit sensitive information exfiltration by tracking sensitive source-to-sink flows present in the application. The user or a trusted entity reviews the information flows for malicious leaks.

#### Limitations

- We assume the device has not been rooted and dynamic code loading is not present in the application.
- DroidSafe does not detect leaks via side channels or implicit flows.
- Our trusted computing base on a device is the Linux kernel, libraries, the Android framework, and the Dalvik VM.
- DroidSafe’s reporting is defined by the source and sink calls identified in the Android API. An attacker could exfiltrate information not considered sensitive by DroidSafe or via a call not considered a sink.
- Our analysis does not fully handle Java native methods, dynamic class loading, and reflection, but we compensate with aggressive best-effort policies and analyses.

### DroidSafe’s Android Device Implementation (ADI)

Our model of Android represents the most complete, accurate, and precise execution model suitable for static analysis. We accurately and precisely model complexities such as callback context, lifecycle events, data flows, heap object instantiations, native methods, and aliasing. The ADI is expressed in standard Java, matching the source language of Android applications, and is suitable for many existing analysis techniques.

#### ADI Core

We seeded our ADI with the Java implementation of the Android API from the Android Open Source Project (AOSP), version 4.0.3, along with additional open-source libraries. This created a code base with no missing dependencies, approximately 1.3 MLOC. However, it was missing substantial portions of the semantics of the Android API and runtime. We developed accurate analysis stubs to enable the effective analysis of code whose full semantics lie outside the scope of AOSP. Each stub is written in Java and models the runtime behavior of the modeled code, complete for the abstractions used in the analysis.

#### Event and Callback Dispatch

We created a runtime implementation hooked into the API to model event and callback dispatch accurately. This ensures that the ADI can track flows through the API with high precision and accuracy.