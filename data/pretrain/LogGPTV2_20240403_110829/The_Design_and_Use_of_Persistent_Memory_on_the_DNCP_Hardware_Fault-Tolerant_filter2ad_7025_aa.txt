### Title: The Design and Use of Persistent Memory on the DNCP Hardware Fault-Tolerant Platform

### Authors:
- Thomas C. Bressoud, Bell Laboratories, Lucent Technologies, 600 Mountain Ave., Murray Hill, NJ 07974, USA
- Tom Clark, Lucent San Jose Labs, Lucent Technologies, 2065 Hamilton Ave., San Jose, CA 95125, USA
- Ti Kan, Lucent San Jose Labs, Lucent Technologies, 2065 Hamilton Ave., San Jose, CA 95125, USA

### Contact Information:
- Thomas C. Bressoud: bressoud@research.bell-labs.com
- Tom Clark: dogbert@lucent.com
- Ti Kan: ti@lucent.com

### Abstract
Systems designed to recover from software faults in the operating system or applications typically require a means to persistently store a subset of the application state. Disk drives are commonly used for this purpose, but they introduce performance penalties during normal execution and recovery. Academic research has explored using a protected region of conventional memory as persistent storage, which can be as reliable as disk but with better performance. This paper describes a project that implements these concepts in a RAM disk-based realization of persistent memory (PM) on the Lucent DNCP hardware fault-tolerant platform, specifically for the HP-UX operating system. The focus is on its use by a main-memory database system (MMDB). While the reduction in recovery time was modest, we achieved nearly a 40% reduction in execution time for an MMDB benchmark run on PM compared to using disk for recoverability.

### Keywords:
Database, Performability, RAM Disk, Reliable Memory, Recovery, Main Memory

### 1. Introduction
Systems must continually balance performance and availability. Techniques to increase availability in the face of software faults often degrade performance. Similarly, achieving faster application start-up times for planned outages typically involves storing application state on disk, which also impacts performance.

Solutions for high availability in the presence of software faults follow a common pattern of execution. When a fault occurs, the goal is to quickly recover the application to a consistent state. This is achieved by writing a critical subset of the application state to disk. The steps include:

1. **State-write**: During normal execution, the application writes a critical subset of its state synchronously to disk.
2. **Outage**: A failure occurs, or the system is taken out of service for a planned outage.
3. **Restart**: After the outage, the application is restarted or a backup instance is promoted to primary.
4. **State-read**: The latest complete application state written before the outage is read back from disk.
5. **Validation**: The stored application state may be validated.
6. **Construction**: The application state subset may be in a reduced form, requiring a construction step to bring it into an executable form.
7. **Consistency-resolution**: The application state is resolved with the environment's state before execution continues.

These steps incur significant costs: repeated synchronous writes to disk reduce system capacity during normal execution, and disk operations slow recovery. These costs depend on the amount of state stored, the frequency of state writes, and the trade-off between size and recovery for the construction step.

This pattern is seen in general-purpose fault tolerance mechanisms and application-specific methods, such as checkpointing facilities and transaction-based database systems. In checkpointing systems, checkpoints are the content of the state-write. In database systems, transaction logs form the content of the state-write.

Of particular interest are applications using a main-memory database (MMDB) to support fast queries and updates in telecommunications. The MMDB stores its database in main memory and supports a durability mode, periodically writing snapshots to disk and maintaining a transaction log for uncommitted transactions.

Academic research has explored breaking the performance penalty of synchronous writes to disk and improving recovery time by defining a protected region of conventional memory that persists across crashes and reboots. This persistent memory can be as reliable as disk but with the performance of memory, addressing both normal execution and recovery performance hits.

### 2. Architectural Choices
We discuss and evaluate several architectural realizations of persistent memory.

#### 2.1. Memory-Based Realizations
One approach is to make persistent memory appear like conventional memory, with an attach/associate operation similar to Unix `shmat` or `mmap`. This would map persistent memory into the processâ€™s virtual address space, allowing application state to be located in and accessed through traditional loads and stores.

**Advantages**:
- Simple interface for the application or MMDB.
- The MMDB image store could be located in PM, eliminating the need for durable mode.

**Challenges**:
- **Pointer Address Usage**: Ensuring pointers within PM do not point outside PM.
- **Consistency**: Providing library functions or leaving consistency management to the application.
- **Application Impact**: Significant modifications required for the application to use PM.

While this realization is challenging, it may be justified for the MMDB case, as the pointer/address issue and inconsistency detection are already managed by the MMDB.

#### 2.2. Disk / Storage Realizations

##### File Buffer Cache
Another approach is to make the file buffer cache persistent, as in RIO. This provides a transparent interface for all file accesses, simplifying atomicity at the block level.

**Advantages**:
- Transparent interface.
- Simplified atomicity implementation.

**Drawbacks**:
- Dedicating physical memory for all files, including transient ones, may not be efficient.
- Requires modifying key parts of the operating system, which is often proprietary and not modifiable.

##### File System / Disk Interface
A final alternative is to realize persistent memory through a filesystem or disk interface, similar to a RAM disk. Conventional memory is dedicated to storing disk data blocks and metadata, making it persistent.

### 3. Performance Results
We present performance results for our implementation, showing a nearly 40% reduction in execution time for an MMDB benchmark run on PM compared to using disk for recoverability.

### 4. Conclusion
This paper describes the design and implementation of persistent memory on the DNCP platform, providing a commercial realization of academic concepts. The results show significant performance improvements for MMDBs, demonstrating the practical benefits of persistent memory in fault-tolerant systems.

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.