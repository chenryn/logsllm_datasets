                        this.addParameter("nameValue", this.findValue(this.value, valueClazz));
                    } else if (name != null) {
                        String expr = name;
                        if (this.altSyntax()) {
                            expr = "%{" + name + "}";
                        }
                        this.addParameter("nameValue", this.findValue(expr, valueClazz));
                    }
                } else if (this.value != null) {
                    this.addParameter("nameValue", this.findValue(this.value));
                } else if (name != null) {
                    this.addParameter("nameValue", this.findValue(name));
                }
            }
简单捋一下，这里首先会判断当前的parameters这个Map中是否已经包含了value这个键，如果包含则将值放到nameValue这个键上。
如果没有，则会先调用`evaluateNameValue`方法，由于TextField对象没有实现此方法，因此调用的也是默认的方法：
    org.apache.struts2.components.UIBean#evaluateNameValue
    protected boolean evaluateNameValue() {
            return true;
        }
这里会直接返回true，因此上面的条件判断会进到第一个else
if代码块中。在代码块中，首先会调用getValueClassType方法获取当前value对应Class类型，因为TextField同样没有实现此方法，因此调用的是默认的方法：
    org.apache.struts2.components.UIBean#getValueClassType
    protected Class getValueClassType() {
            return String.class;
        }
默认情况下会认为value的值是String类型的，接着进入下一个判断，如果value不为null，则最终的value为`this.findValue(this.value,String.class)`，如果value为null，但name不为null，则最终的value为`this.findValue("%{name}",String.class)`。
由于此时的value不为null（在doStartTag时已经通过`populateParams`方法赋值了），为request中payload参数的值，此时我将值设置为`%{1-1}`，接着来看看findValue是如何解析这个`%{1-1}`的。
    org.apache.struts2.components.Component#findValue
    protected Object findValue(String expr, Class toType) {
            if (this.altSyntax() && toType == String.class) {
                return TextParseUtil.translateVariables('%', expr, this.stack);
            } else {
                if (this.altSyntax() && expr.startsWith("%{") && expr.endsWith("}")) {
                    expr = expr.substring(2, expr.length() - 1);
                }
                return this.getStack().findValue(expr, toType);
            }
        }
altSyntax方法默认返回true，并且此时value的class为String.class，满足第一个if语句块的条件，继续跟入`TextParseUtil.translateVariables`：
    com.opensymphony.xwork2.util.TextParseUtil#translateVariables
    public static String translateVariables(char open, String expression, ValueStack stack) {
            return translateVariables(open, expression, stack, String.class, (TextParseUtil.ParsedValueEvaluator)null).toString();
        }
    com.opensymphony.xwork2.util.TextParseUtil#translateVariables
    public static Object translateVariables(char open, String expression, ValueStack stack, Class asType, TextParseUtil.ParsedValueEvaluator evaluator) {
            Object result = expression;
            while(true) {
                int start = expression.indexOf(open + "{");
                int length = expression.length();
                int x = start + 2;
                int count = 1;
                while(start != -1 && x 
        Struts2 Demo
        Struts2 Demo
接着是hello.jsp，模拟登陆成功的用户界面：
        Struts2 Demo
        Hello 
接着是struts.xml的配置：
          hello.jsp
          index.jsp
此时在username中输入OGNL表达式`%{1-1}`，submit后可发现其被转换为0了，这是因为Struts2在匹配`login.action`这个请求时，会在前面的拦截器中通过setter或反射的方式将对应传过来的值放到Bean中，而在后续取的过程中，首先会取出`%{1-1}`，然后因为漏洞（N次递归解析）的原因，会再解析一次，从而触发表达式注入。
## 0x03 修复方案
Struts2于2.0.9版本中对此漏洞进行修复，措施很简单，就是加一个值用于表示最大循环次数，此时将此值控制为1即可保证只进行一次while循环，从而避免了二次解析，但是如果像我上面那样的漏洞代码，实际上还是存在漏洞的，因为我那样写压根就没有进行二次解析，第一次就直接解析了。
下面是具体的Patch代码：
漏洞的修复主要是在`xwork-x.x.x.jar`中实现的，主要是patch了`com.opensymphony.xwork2.util.TextParseUtil#translateVariables`方法。
之前说了，S2-001的本质是因为对value进行了二次解析，只需要把这个问题处理掉就行了，patch代码中也是如此，设置了一个maxLoopCount，当解析次数大于maxLoopCount时则通过break跳出循环并返回。而上层调用时将maxLoopCount设为1，因此至多只能解析一次，S2-001在此被彻底解决。
PS：需要注意的是，在2.0.9及之后，Struts默认使用的xwork在`com/opensymphony/xwork`中，而2.0.8及之前，Struts默认使用的xwork在`opensymphony/xwork`。
## 0x04 一点思考
上面分析了S2-001这个漏洞，可以发现漏洞的本质是在解析标签的value时对value进行了二次解析，我认为有如下几点是我们需要思考的：
  1. 这个漏洞是否属于框架层面的通用漏洞？
  2. 这个漏洞是否可以黑盒检测？
  3. 这个漏洞危害大吗？
对于第一个问题，这个漏洞是框架层的漏洞，但不是通用漏洞，只有使用了特定的写法时才有可能产生此漏洞。
对于第二个问题，答案是完全可以的，虽然检测POC没有固定的写法，传参的名是需要根据页面来发生改变的。
对于第三个问题，我认为这个漏洞危害可大可不大，主要看开发者如何写代码，因为这个漏洞与Jackson等一样，需要使用特定的写法才有可能产生漏洞，但用这个写法的人又很多。
现在来思考最后一个问题，网上的POC都是使用的textfield这个标签，是否有其它标签可以触发？
答案是否定的，基本上大部分存在name属性的标签都存在此漏洞，因为它们都会调用TextParseUtil，比如如下标签：
  * actionmessage
  * action
  * a
  * …
不过我对回显流程还没研究过，感兴趣的可以研究一下，因为有的标签不会自动填充value，就不会回显了。
那么如何检测？我的想法是匹配出所有页面中的`name="(.*?)"`以及`id="(.*?)"`，进行一个去重，随后放一起或者分开挨个发包。