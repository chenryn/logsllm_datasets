I understand you are experiencing issues after compiling Python 2.6.6 with the Google Performance Tools (tcmalloc) library to address some memory problems you encountered with the default 2.6.5 version. It seems that even after successfully setting up 2.6.6, there may be conflicts with the pre-existing 2.6.5 installation on your Ubuntu system.

### Key Points:
1. **Binary Compatibility:**
   - Binaries installed from the software repositories, such as `wxPython` and `setuptools`, are likely compiled for the default Python 2.6.5. These may not work seamlessly with your custom-compiled Python 2.6.6.
   - To ensure compatibility, you may need to recompile these libraries against Python 2.6.6.

2. **Default Python Version:**
   - If you want to keep Python 2.6.5 as the default system-wide Python, you can do so by ensuring that the system's `PATH` environment variable prioritizes the location of the 2.6.5 binaries.
   - Since your `PATH` currently looks in `/usr/local/bin` first, you can place a symbolic link to Python 2.6.5 in this directory to make it the default.

### Steps to Resolve:

1. **Recompile Libraries:**
   - Rebuild and install any necessary Python packages (e.g., `wxPython`, `setuptools`) using your custom-compiled Python 2.6.6. You can typically do this by specifying the Python interpreter during the build process. For example:
     ```sh
     /path/to/python2.6.6 setup.py install
     ```

2. **Set Default Python Version:**
   - Ensure that the system's `PATH` environment variable points to the desired Python version. You can create a symbolic link to Python 2.6.5 in `/usr/local/bin` to make it the default:
     ```sh
     sudo ln -sf /usr/bin/python2.6.5 /usr/local/bin/python
     ```
   - Verify the change by running:
     ```sh
     which python
     python --version
     ```

3. **Alternative Python Management:**
   - Consider using tools like `virtualenv` or `pyenv` to manage multiple Python versions and their environments. This can help avoid conflicts and simplify switching between different Python versions.

### Additional Suggestions:
- **Check for Conflicts:**
  - Use `ldd` to check the shared library dependencies of your Python 2.6.6 binary to ensure all required libraries are correctly linked.
  - Verify that the `PYTHONPATH` and `LD_LIBRARY_PATH` environment variables are set appropriately.

- **Consult Documentation:**
  - Refer to the documentation for the specific libraries you are using to see if they have any known issues or special instructions for custom Python installations.

If you continue to experience issues, please provide more details about the specific errors you are encountering, and I can offer more targeted advice.