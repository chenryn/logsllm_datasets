Figure 5: For win rate ρ2 = 1
512 , probability that
the seller’s revenue is less than 80% and 90% of the
expected revenue.
computation of two signatures. The ﬁnal check to deter-
mine whether the transaction is paying requires two signa-
ture veriﬁcations and one comparison operation. We ﬁrst
show micro-benchmarks for each of these operations, and
then demonstrate how the scheme operates in a real system.
Micro-benchmarks for each operation.
operation avg time (µs)
95% ci (µs)
Request Ticket
Request Ticket (Fast)
Make a Ticket
Check Ticket
VTS Check
84.9 ± 2.56
3.7 ± 0.12
170.6 ± 5.28
437.6 ± 10.45
496.1 ± 6.60
Figure 4: For win rate ρ1 = 1
128 , probability that
the seller’s revenue is less than 80% and 90% of the
expected revenue. The curves have a “sawtooth”
pattern due to discreteness. At 15,000 and 50,000
transactions, there is a roughly 2% chance that rev-
enue is less than 80% or 90% respectively of the
expected revenue.
4.2 Performance of the Scheme
Our schemes are all highly eﬃcient; the ﬁrst message from
the seller requires only a hash computation (and optionally
the creation of a new address, in the fast version of this step,
we reuse the same bitcoin address for all merchant transac-
tions4). The second message from the buyer requires the
4Although Bitcoin speciﬁcations suggest that each transac-
tion use a totally new address, with proper key management
on behalf of the merchant, there is no reason the same ad-
dress cannot be used to receive many payments.
These measurements where taken on an Intel Core i7-
4558U CPU @ 2.80GHz, with 2 cores, 256 KB of L2 cache
per core, 4MB of L3 cache, and 16GB of RAM. Each func-
tion was proﬁled using the Go language benchmark frame-
work which called the function at least 10000 times to time
the number of nanoseconds per operation. The Go bench-
mark framework was run 50 times and averaged to report
the sample time and the 95% conﬁdence interval reported in
the table. Only one core was used during the testing. As the
table demonstrates, the protocol messages can be generated
in microseconds, with ticket checking requires less than half
a milli-second. Thus, the overhead of the protocol is very
low in terms of computation.
In terms of communication, we have made no eﬀort to
compress or minimize the size of the messages. For ease of
implementation, we use base64 encodings for the signatures,
commitments, and addresses in the protocol (rather than
a more eﬃcient binary encoding).
In the table below, we
report the size (in bytes) for each of the messages. The
ticket message has a variable size because it includes two
signatures whose message sizes are variable.
Pr[win]=1/128PrPrice per transactionActual price per transaction (after 1000 transactions)1%6%12%0.12XX2XPr[win]=1/128PrPrice per transactionActual price per transaction (after 10000 transactions)1%4%0.7XX1.33XPr# of tickets<80% Expected Rev<90% Expected Rev2%10%25%50%5k15k25k35k45kPr# of tickets<80% Expected Rev<90% Expected Rev2%10%25%50%10k50k100k216operation message size (bytes)
Request Ticket
Request Ticket (Fast)
Make a Ticket
Check Ticket
VTS Check
73
73
398 ± 10
-
-
4.3 Experiments in a sample web server
To illustrate how our scheme can be used to sell “content”
on the Internet, we developed a webserver that serves dy-
namic pages and also implements our MICROPAY2 proto-
col. Our experiment shows that the overhead of adding the
messages of the micropayment protocol add little in terms
of performance penalty to the infrastructure. The most ex-
pensive operation on the server is to verify the lottery ticket
(i.e., check two signatures), and this adds less than half a
milli-second to the server response time—a value that is es-
sentially masked by the variance in network performance.
In practice, we envision our system as a proxy that sits
in front of a legacy content server and only handles the mi-
cropayment; this experiment serves as an illustrative bench-
mark for that architecture.
In particular, it shows that a
basic and unoptimized server can handle millions of tickets.
Design.
We implemented a webserver using the Go net/http pack-
age. The server handles three kinds of requests, \base, \ask,
and \buy. The \base endpoint returns a page that is ren-
dered with a template and a dynamic parameter (to model
the fact that it is not simply a static page that is cached in
memory). The size of this page is roughly 2kb. This end-
point serves as a control for our experiment to understand
the baseline performance of our webserver implementation.
Next, the \ask endpoint returns the ﬁrst message of our mi-
cropayment scheme, i.e. a request for a ticket. This method
models what a buyer’s client queries in order to receive a
ticket request5. Finally, the \buy endpoint accepts the sec-
ond message (the ticket) of our micropayment protocol and
checks whether the ticket is well-formed and whether the
ticket is a winning one.
If the ticket is well-formed, the
method returns the same dynamically generated webpage
as the \base method. Thus, the combination of making an
\ask query and then a \buy query reﬂects the overhead of
processing a micropayment before serving content.
Compute-bound experiment.
In the ﬁrst experiment, we measured the extent to which
the extra computation for a server would become a bottle-
neck at Internet scale. We ran a client that made both con-
trol and experiment requests from a 2-core/4-hyperthread
laptop running on a university network from the east coast.
The control experiment makes a call to \ask and then \base;
the experiment makes a call to \ask and \buy. Our experi-
ment attempts to isolate the diﬀerence between calling just
\base and accessing the same content through \buy; but in
order to perform the latter, we need to have information
5In practice, the ﬁrst message will be embedded in the link
to the content that requires a payment, hence the most ex-
pensive component of this message—the network cost— can
essentially be hidden from the user’s experience.
Figure 6: A histogram of response times for a single
request over a cable modem. The base red is the
experiment, the overlaid checkerbox is the control.
conveyed through \ask. This extra round-trip is hidden in
practice because it is bundled with the (several) calls to a
server that are used to access the “homepage” from which the
links to content-for-purchase are conveyed. Thus, to avoid
comparing one round-trip against two, both of the experi-
ments make a call to \ask.
The client issued 25000 requests using 20 threads for at
least 20 seconds; each thread pooled its network connection
to amortize network overhead over the requests. Each run
(to either control or experiment) was performed 30 times
over the course of a day and a delay of at least 15 seconds
was introduced between runs to allow network connections
to gracefully terminate. The client sent its queries from the
east coast. The server used a single core on a t4.xlarge
instance from the US-East region of EC2 which has an Intel
Xeon CPU E5-2666 v3 @ 2.90GHz and 8GB of memory.
As illustrated by the table below, the diﬀerence between
the performance of the \base system and \buy are over-
whelmed by network timing noise; the conﬁdence interval of
the experiment roughly matches the microbenchmark tim-
ings for the \buy calls.
operation req/sec avg resp time (95% conf int)
\base
\buy
534
497
1.87 ± 0.26 ms
2.01 ± 0.30 ms
Extrapolation.
When run as a proxy, a micropayment server with 8 cores/16
threads can handle at least 4000 transactions per second, or
roughly 350 million page views per day. At roughly 600
bytes per message to account for protocol overheads, this
amounts to a bandwidth overhead for micropayment mes-
sages of merely 600 ∗ 4000 = 2.4mb/sec.
Network Test.
The previous tests did not include network connection
overhead. We ran the same experiment using a single thread
making a single request, serially, 2000 times with a 2 second
delay between each request. The client ran from a laptop
connected to the internet over a cable modem. Figure 6 plots
a histogram of the response times for the control and exper-
iment. The two distributions are very close as expected.
1%3%5%7%9%70ms100ms130ms200ms217VTS Performance.
In MICROPAY2, the VTS signs all winning lottery trans-
actions. At Internet scale, this party could become a bot-
tleneck since every winning ticket must be processed in near
real-time to mitigate double-spending attacks. Based on the
microbenchmarks in the previous section, a single core can
also verify and sign 2000 winning tickets per second.
In-
cluding networking overhead extrapolated from our ﬁrst ex-
periment, we estimate that a micropayment server with 8
cores/16 threads can handle at least 4000 winning transac-
tions per second, or roughly 350 million winning lottery tick-
ets per day. When the winning ratio parameter is ρ1 = 1
128 ,
roughly 1 out of 128 tickets will be winning, and thus, a
single VTS server can theoretically support 512,000 global
micro-payment content views per second, or ∼44 billion to-
tal micropayment content views per day. The later number
assumed uniform access rate throughout the day, but real
traﬃc follows cyclic patterns with peak times that are much
busier than oﬀ-peak times. These are theoretical maximums,
but after adding redundancy for robustness, this analysis
and experiment suggests that a small set of servers suﬃce
to handle Internet scale transaction processing.
Another potential bottleneck occurs with the underlying
cryptocurrency bandwidth. As the graph in Fig. 7 depicts,
during 2015, the number of daily Bitcoin transactions pro-
cessed on the blockchain hovers around 105. The current
Bitcoin protocol can only handle 7 transactions per second
on average, or roughly 106 transactions per day, and thus, at
parameter ρ1, it seems feasible for the current Bitcoin pro-
tocol to handle roughly 108 total paid transactions. Many
research eﬀorts are underway to increase the bandwidth for
the number of transactions by a factor of 10x to 100X, and
our scheme’s scalability naturally beneﬁts from these ad-
vancements. We can also decrease the ρ1 value to improve
the scalability (at the cost of increasing the variance of ex-
pected revenue and costs for the sellers and buyers).
Felten. Mixcoin: Anonymity for bitcoin with
accountable mixes. eprint.org/2014/77, 2014.
[5] David Chaum. Achieving electronic privacy. Scientiﬁc
American, pages 96–101, August 1992.
[6] David Chaum, A. Fiat, and M. Naor. Untraceable
electronic cash. In CRYPTO’89, 1989.
[7] Etherium Foundation. White paper. https:
//github.com/ethereum/wiki/wiki/White-Paper,
2015.
[8] Libbitcoin foundation. A bitcoin library.
https://github.com/libbitcoin/libbitcoin/, 2015.
[9] Matthew Franklin and Haibin Zhang. Unique ring
signatures: A practical construction. In Financial
Cryptography and Data Security. 2013.
[10] Steve Glassman, Mark Manasse, Martin Abadi, Paul
Gauthier, and Patrick Sobalvarro. The millicent
protocol for inexpensive electronic commerce. In
WWW’95, 1995.
[11] Oded Goldreich. Foundations of Cryptography —
Basic Tools. Cambridge University Press, 2001.
[12] Richard J. Lipton and Rafail Ostrovsky.
Micro-payments via eﬃcient coin-ﬂipping. In
Financial Cryptography, pages 1–15, 1998.
[13] G. Medvinsky and C. Neuman. Netcash: A design for
practical electronic currency on the internet. In
CCS’94, 1994.
[14] Silvio Micali, Michael Rabin, and Salil Vadhan.
Veriﬁable random functions. In FOCS. IEEE, 1999.
[15] Silvio Micali and Ronald L. Rivest. Micropayments
revisited. In CT-RSA, 2002.
[16] Board of Governors of the Federal Reserve System.
Federal reserve board press release 29 june 2011.
http://www.federalreserve.gov/newsevents/
press/bcreg/20110629a.htm, June 2011.
[17] Ron Rivest and Adi Shamir. Payword and micromint:
Two simple micropayment schemes. In Cambridge
Workshop on Security Protocols, 1996.
[18] Ronald L. Rivest. Electronic lottery tickets as
micropayments. In In Financial Cryptography, 1997.
[19] David Wheeler. Transactions using bets, 1996.
APPENDIX
Figure 7: Bitcoin transactions per day (2015)
5. REFERENCES
[1] Ross Anderson, Charalampos Manifavas, and Chris
Sutherland. Netcard—a practical electronic-cash
system. In Security Protocols, pages 49–57, 1997.
[2] Marcin Andrychowicz, Stefan Dziembowski, Daniel
Malinowski, and Lukasz Mazurek. Secure multiparty
computations on bitcoin. In IEEE S&P, 2014.
[3] Iddo Bentov and Ranjit Kumeresan. How to use
bitcoin to design fair protocols. In CRYPTO’14, 2014.
[4] Jon Bonneau, Arvind Narayanan, Andrew Miller,
Jeremy Clark, Joshua A. Kroll, and Edward W.
Figure 8: A plot of transaction fee versus transac-
tion size for one million Bitcoin transactions that
occurred in May 2015. The Bitcoin speciﬁcation
suggests that each transaction should pay roughly
0.0001 bitcoin per kilobyte (rounded up) of transac-
tion data.
6095130Jan’15Feb’15Mar’15Apr’15May’15Total Transactions (1000s)0.00010.0005(cid:9)0.001+ 0 500 1000 1500 2000 2500 3000 3500 4000Fee (Bitcoin)Size of Transaction (bytes)218