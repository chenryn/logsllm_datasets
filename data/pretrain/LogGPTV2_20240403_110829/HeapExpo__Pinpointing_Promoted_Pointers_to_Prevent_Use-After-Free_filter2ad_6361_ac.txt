2
3
4
5
6
7
8
9
10
11
12
13
char* ptr;
void func1(char* a) {
free(a);
*a = 0;
}
void func2(char* a) {
*a = 0;
}
int main() {
ptr = malloc(0x10);
func1(ptr);
func2(ptr);
}
Listing 8: Category Example
We note that our selection process may bias our corpus toward
smaller, simpler projects, and may not be representative of all UAF
bugs in the wild. However, we argue that even this relatively small
convenience sample indicates the importance of tracking local vari-
ables and function arguments.
We categorize the reproduced bugs by the source of dereferenced
dangling pointers, manually reviewing reproduced crashes. Refer-
encing the source code with the crash logs, we are able to identify
the source of each dangling pointer. The result of our manual re-
view is shown in Table 3. Reference of pointer is the case where
the function argument is a pointer (reference) to a pointer. If the
compiler inlines the function and promotes the referenced pointer,
prior work cannot track the pointer. Transformed pointer means
that before the dangling pointer is used, it is stored as non-pointer
data. In the case listed in the Table, the pointer is divided by two
before being stored to memory to save one bit of space.
Even if a dereferenced dangling pointer is stored in local vari-
ables or function arguments, it is not necessarily the source of
the dangling pointer. The underlying reason is that an invalidated
dangling pointer can be propagated to these variables. To avoid
such mis-categorization, we check whether recent pointer store
in function control flow propagates a valid pointer or an invali-
dated dangling pointer. If the recent pointer store propagates an
invalidated pointer, as in Listing 8, the source of the UAF in func1
is identified as a function argument, while that of func2 is iden-
tified as global variable, because the dangling global variable is
propagated to func2‚Äôs argument.
6
OSS-Fuzz ID
10304
17737
9975
10796
3569
3619
3630
13878
13882
11752
11753
18004
18080
4349
10200
5921
17953
17954
16884
Project
libxml2
libxml2
openvswitch
openvswitch
proj4
proj4
proj4
systemd
systemd
yara
yara
usrsctp
usrsctp
bloaty
libaom
wireshark
curl
curl
libhevc
Source
Heap Variable
Heap Variable
Reference of Pointer
Local Variable
Function Argument
Function Argument
Function Argument
Local Variable
Local Variable
Heap Variable
Heap Variable
Function Argument
Function Argument
Heap Variable
Transformed Pointer (on Heap)
Global Variable
Local Variable
Local Variable
Heap Variable
Promoted
√ó
√ó
‚úì
‚úì
‚úì
‚úì
‚úì
‚úì
‚úì
√ó
√ó
‚úì
‚úì
√ó
√ó
√ó
‚úì
‚úì
√ó
Table 4: Summary of Reproduced OSS-Fuzz Bugs
4.2 Effectiveness of UAF Detection
In this section, we test the effectiveness of HeapExpo against use-
after-free bugs in a real-word program and our own crafted ex-
amples. We tested HeapExpo and DangSan with a QuickJS ex-
ploit [5, 24]. The fact that the dangling pointer comes from a local
variable makes DangSan incapable of detecting the exploit. On the
other hand, HeapExpo is able to track and invalidate the dangling
pointer in the local variable and correctly triggers a crash when
the invalidated pointer is dereferenced.
Besides manually crafted tests, we also created sample test code
by extracting snippets of buggy code from the use-after-free bugs
discovered by OSS-Fuzz, which makes it easier to build with Dan-
gSan and HeapExpo. This sample code also allow us to easily com-
pare between the two systems. The details can be found in our
GitHub repository.
Source
DangSan HeapExpo
Global Pointer
Heap Pointer
Volatile Stack Pointer
Local Variable Pointer
Function Argument Pointer
Reference of Pointer
Transformed Pointer
Yes
Yes
Yes
No
No
No
Partially
Yes
Yes
Yes
Yes
Yes
Yes
No
Table 5: DangSan vs. HeapExpo Coverage by Type. When
promoted by function inlining pass, reference of pointer is
not protected by DangSan .
The results from the sample code show that HeapExpo correctly
tracks dangling pointers in local variables and function arguments.
7
As shown in Table 3, we observed that the major sources of dangling
pointers are heap variables, function arguments and local variables.
According to the result in Table 5, HeapExpo is able to track two
of the major sources where DangSan fails. Neither DangSan nor
HeapExpo can track the transformed pointer case in libaom [18].
We closely studied the pointer reference case, and we believe that
it is unlikely to be protected by DangSan, because the function is
small and the referenced pointer is a function argument. By contrast,
HeapExpo succeeds in this case by preserving the stack location of
the function argument.
The exploitability of use-after-free vulnerability usually depends
on how attackers could reliably arrange the heap. Limiting the
attack within a function‚Äôs lifespan makes it hard to align dynamic
memory, but we have seen that the QuickJS exploit [24] leverages
a dangling local variable. Furthermore, we cross checked OSS-Fuzz
and CVE database to search for use-after-free bugs caused by dan-
gling local variables. Although only a few OSS-Fuzz bugs were
also present in the CVE database, we found two such examples,
CVE-2019-17534 (OSS-Fuzz id: 16796) and one of the CVE-2018-
1000039 bugs (OSS-Fuzz id: 5492), with high risk scores of 8.8 and
7.8 respectively. This demonstrates that the bugs missed by prior
systems can indeed be exploitable.
During the course of our evaluation we also found a minor bug
in DangSan‚Äôs pointer packing methods that led to it missing some
stack variables. The sample code registers two stack pointer loca-
tions, but DangSan fails to register and invalidate the second reg-
istered location. By reviewing DangSan‚Äôs packing code, we found
that the packed value is never written back. After we fixed the bug,
we are able to correctly track stack variables with DangSan.
4.3 Performance and Memory Overhead
We tested the performance of HeapExpo on CPU-intensive bench-
marks, comparing the run time of HeapExpo and DangSan with the
common unprotected baseline. We mainly used the SPEC CPU2006
benchmark [14], which was also used to evaluate DangSan. We
found several benchmarks that executed correctly under DangSan
but not HeapExpo (gcc, perlbench and libquantum). We believe
that these failures are caused by bugs in the underlying benchmark
programs, as DangSan‚Äôs authors also reported having to patch some
programs in the CPU2006 benchmark suite in order to fix UAFs.
We compare the time overhead between HeapExpo and DangSan
on the remaining benchmarks.
Our experiments were run on a server with two Intel Xeon
X5690 CPUs @3.47GHz. We ran the benchmarks 3 times and report
the median. The result of individual time overhead is shown in
Figure 2. Although we could not directly benchmark FreeSentry
and DangNull because of unpublished optimizations and closed
sourced code, we estimated and included the results reported in
their papers. Aside from a few missing benchmarks, HeapExpo still
performed as well as those conventional approach, let alone the
extra coverage of local pointers. We computed the geometric means
of the time overheads from DangSan and HeapExpo. Our geometric
mean over common benchmarks is 1.66, with 66% overhead from
baseline, while DangSan has an overhead of 46%. Our overhead on
top of DangSan is therefore 20%. Without propagation intensive
programs omnetpp and xalancbmk, HeapExpo has geometric mean
of 35% run-time overhead from non-instrumented baseline among
12 benchmarks.
In the experiment, we found runtime overhead is moderately
correlated to number of pointer propagations that occurred with a
correlation score of ùëü = 0.61. The extra pointer propagation from
newly tracked sources adds extra overhead. Therefore, the runtime
overhead of pointer propagation intense benchmarks increases
moderately when there are many new propagations. For example,
in xalancbmk, there are 7.2 trillion pointer propagations tracked by
HeapExpo versus 2.4 trillion tracked by DangSan. Although this
causes the runtime overhead to increase from 2.2x to 3.5x, about
three times as many pointer propagations are tracked by HeapExpo.
Figure 2: HeapExpo vs. DangSan Run-time Overhead
We also measured the memory overhead of HeapExpo and Dan-
gSan under SPEC CPU2006 benchmarks. As shown in Figure 3,
8
the memory overhead of HeapExpo is not significantly different
from DangSan. We did not change the underlying data structures
of DangSan, but we did increase the number of source type to track,
so a small increase in memory overhead is expected. Due to the
drastically increased pointer propagation behavior in xalancbmk
benchmark, the memory overhead is increased as well. Among the
benchmarks shared by all approaches, HeapExpo has a geometric
mean of 100%, while DangSan has 87% and DangNull has 137% over-
head. Although it requires slightly more memory than DangSan,
HeapExpo consumes less memory than DangNull, which offers less
protection.
Figure 3: HeapExpo vs. DangSan Memory Overhead
4.4 Impact of Optimization
Here, we show how our liveness analysis and call graph analy-
sis affect the performance of HeapExpo. In Table 6, we compare
the number of instrumented instructions among different builds.
‚ÄúHeapExpo (unopt)‚Äù has no static analysis optimization, and marks
every stack pointer as volatile. The ‚ÄúHeapExpo‚Äù build has static
analysis turned on and only marks stack pointers that may result
in UAF bugs as volatile. Finally, the ‚ÄúDangSan‚Äù build does not mark
any stack pointers volatile. Table 6 indicates that HeapExpo elim-
inates about half the pointers that need instrumentation in the
SPEC CPU2006 benchmarks compared to our base build, but still
has about 1‚Äì2 times more instrumentation than DangSan as a result
of our improved coverage. Figure 4 demonstrates that our optimiza-
tions greatly lower the amount of instrumentation and thus reduce
runtime overhead.
According to the number of instructions, we can also see that
stack pointers like local variables and function arguments make
up a large portion of pointer propagations overall. Comparing
the number of instrumented instructions between unoptimized
HeapExpo build and the DangSan build, we argue that there are
about 4 times more pointer propagation instructions present in the
program than those tracked by DangSan.
Benchmark HeapExpo (unopt) HeapExpo HeapExpo LTO DangSan
perlbench
15193
bzip2
mcf
gobmk
hmmer
sjeng
h264ref
omnetpp
astar
20224
237
259
1795
3255
118
1916
23794
527
15193
107
173
1134
2433
101
950
8749
151
35666
72
145
779
1250
47
669
7886
136
27229
7698
35
130
278
498
14
406
5673
90
xalancbmk
Table 6: Number of Instrumented Instructions among Different Builds
175707
20338
These local variables and function arguments are not trackable
with any prior dangling pointer invalidation system. Promoted to
registers, these pointers are pushed to the stack during function calls
and popped when the function returns. Since no prior work tracks
pushed stack locations, exploits that make use of these dangling