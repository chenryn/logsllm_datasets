title:An Evil Copy: How the Loader Betrays You
author:Xinyang Ge and
Mathias Payer and
Trent Jaeger
An Evil Copy: How the Loader Betrays You
Xinyang Ge
Microsoft Research
PI:EMAIL
Mathias Payer
Purdue University
PI:EMAIL
Trent Jaeger
The Pennsylvania State University
PI:EMAIL
Abstract—Dynamic loading is a core feature used on current
systems to (i) enable modularity and reuse, (ii) reduce memory
footprint by sharing code pages of libraries and executables
among processes, and (iii) simplify update procedures by elim-
inating the need to recompile executables when a library is
updated. The Executable and Linkable Format (ELF) is a generic
speciﬁcation that describes how executable programs are stitched
together from object ﬁles produced from source code to libraries
and executables. Programming languages allow ﬁne-grained con-
trol over variables, including access and memory protections, so
programmers may write defense mechanisms assuming that the
permissions speciﬁed at the source and/or compiler level will hold
at runtime.
Unfortunately, information about memory protection is lost
during compilation. We identify one case that has signiﬁcant
security implications: when instantiating a process, constant
external variables that are referenced in executables are forcefully
relocated to a writable memory segment without warning. The
loader trades security for compatibility due to the lack of memory
protection information on the relocated external variables. We call
this new attack vector COREV for Copy Relocation Violation.
An adversary may use a memory corruption vulnerability to
modify such “read-only” constant variables like vtables, function
pointers, format strings, and ﬁle names to bypass defenses (like
FORTIFY SOURCE or CFI) and to escalate privileges.
We have studied all Ubuntu 16.04 LTS packages and found
that out of 54,045 packages, 4,570 packages have unexpected
copy relocations that change read-only permissions to read-write,
presenting new avenues for attack. The attack surface is broad
with 29,817 libraries exporting relocatable read-only variables.
The set of 6,399 programs with actual copy relocation violations
includes ftp servers, apt-get, and gettext. We discuss the cause,
effects, and a set of possible mitigation strategies for the COREV
attack vector.
I.
INTRODUCTION
Software written in C/C++ is prone to memory corruption
vulnerabilities through memory safety violations and type
confusions, allowing an attacker to corrupt both data and code
pointers. A generic memory corruption vulnerability allows
an attacker to overwrite an arbitrary memory address with
attacker-controlled data. Each memory corruption is different
and some only allow partial control of the target address and/or
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23199
the value that is being written. Despite signiﬁcant investment in
bug ﬁnding techniques, memory corruption is still an important
problem, as 745 individual CVEs for 2015 and 692 CVEs for
2016 are reported. While not all these vulnerabilities allow an
attacker to compromise a system with arbitrary code execution,
many do.
Without any defense, attackers inject and execute code to
take control of a system through memory corruption vulner-
abilities. Over the past decade, a set of defense mechanisms
have been deployed on commodity systems. Data execution
prevention [5] is a common defense that enforces code in-
tegrity. Code integrity prohibits an attacker from injecting new
code into a running process and is usually enforced by hard-
ware (e.g., through the non-execute ﬂag on a per-page basis on
x86). With the rise of code-injection protection [32], [39], [22],
attackers have moved towards code-reuse attacks. In a code-
reuse attack, the attacker combines existing code fragments
(called gadgets) to achieve arbitrary computation. While code-
reuse attacks are Turing complete, they are generally used
to disable code integrity and to allow an attacker to execute
injected code. Two other deployed defense mechanisms, stack
canaries [25] and address space layout randomization [40],
protect against some control-ﬂow hijack attacks and make it
harder for an attacker to ﬁnd suitable gadgets. Unfortunately,
as the list of CVEs shows, these defenses are often mitigated
by an attacker.
New defenses like Control-Flow Integrity (CFI) [3], [11]
are on the verge of being widely adopted. Several proposed
mechanisms are highly practical, have low overhead, and are
suitable for production (i.e., they support common features
like modularity and do not require source code annotations,
changes, or blacklisting) [41], [43], [30], [20], [21], [16],
[26], [10], [29], [31], [34]. CFI veriﬁes that the target address
observed at runtime is feasible according to a statically con-
structed control-ﬂow graph. Individual CFI mechanisms differ
in the underlying analysis of the control-ﬂow graph and in the
enforcement mechanism.
Current programs rely on dynamic loading (e.g., through
the ld.so dynamic loader on Linux) to support shared
libraries, position independent code, and defense mechanisms
like address space layout randomization (ASLR). Dynamic
loading is central to how current systems execute applications.
Through clever design, dynamic loading enables sharing of
code across multiple processes,
thereby reducing memory
usage. As most pages of a library are read-only code, they
can easily be shared across processes that use the same library
as long as the pages do not contain hard-coded addresses.
Shared libraries solve this problem by using relative addressing
that redirects accesses through a set of per-process pages that
are writable for each library. In ELF binaries, these pages are
referred as Global Offset Tables (GOT). As part of the loading
process, the dynamic loader has to allocate space for individual
shared objects and resolve references among them.
Dynamic libraries are generally created by linking position
independent code. All references are either relative to the
current module or use indirection through a set of tables such
as GOTs. These tables are then updated at runtime whenever
the code is placed at a certain location. Dynamic executables
(as opposed to static executables or executables located at a
ﬁxed address) on the other hand are generally not created
from position independent code. Any reference to external data
would therefore have to be resolved and patched at runtime.
The ELF standard deﬁnes different types of relocations for this
purpose, allowing online patching. While relocations generally
patch the location of the reference (i.e., they patch the location
with the correct address used at runtime), modifying read-
only regions should be avoided. If the code region in the
executable contains external references, then all such code
pages would have to be modiﬁed, making it harder to share
code among processes. Copy relocations ﬁll
this gap and
enable dynamic executables to relocate the target object. The
executable allocates space for the target object in its .bss
section and the loader will then copy the object from the source
shared library to the .bss section of the executable. As all
shared objects use indirect references to access this object, the
loader then modiﬁes all these pointers to point to the copy in
the executable.
Such copy relocations may result in severe security viola-
tions because the loader is unaware of the protection ﬂags of
the original symbol and can therefore no longer enforce mem-
ory protection. The original symbol may be allocated in read-
only memory, but if the dynamic executable references this
object, the loader will copy it to a writable memory location.
An attacker can now use a memory corruption vulnerability
to modify the presumed read-only symbol. This has security
implications if defenses depend on assumed read-only memory
permissions. Format string protections [27] assume that the
format string is in a read-only section. Modifying the format
string allows an attacker to read or write arbitrary memory
and to execute Turing-complete code [12]. For CFI, many
mechanisms [41], [10], [26] assume that C++ vtables are in
read-only memory, as guaranteed by the compiler, but these
guarantees are broken by the linker and the dynamic loader.
As vtables are assumed to be immutable, they are not checked,
and an attacker may circumvent any CFI or other control-ﬂow
hijacking mechanism that assumes immutable vtables. We call
this attack vector COREV for Copy Relocation Violation.
COREV is not just a theoretic attack vector, but such dan-
gerous relocations actually exist in current software. We have
examined all 54,045 Ubuntu 16.04 packages and found that
6,339 binaries feature such relocations. We classify vulnerable
relocations into the following seven categories: (i) vtables, (ii)
function pointers, (iii) generic pointers, (iv) format strings,
(v) ﬁle and path names, (vi) generic strings, and (vii) others.
Writable format strings allow an attacker to mitigate any printf-
based defenses and enable printf-oriented programming [12]
while writable ﬁle and path names allow an attacker to,
e.g., redirect input and output. Writable vtables and function
pointers on the other hand allow an attacker to mitigate
future defenses that protect against control-ﬂow hijacking by
overwriting code pointers that are assumed to be read-only
and therefore not checked. In total, we have found 69,098
copy relocations that change the original memory protection.
These include 24 format strings, 44 ﬁle and path names, 711
function pointers and 28,497 vtables. Our evaluation under
approximates the total attack surface and shows the severity of
COREV. These dangerous copy relocations may not directly
lead to successful exploitations, however, because adversaries
must additionally ﬁnd a memory corruption vulnerability to
modify the relocated variables, but the prevalence of COREVs
provides adversaries with more opportunities for bypassing
defenses and/or launching attacks.
We propose a set of three mitigations against COREV.
First, for existing binaries, the best we can do is to detect
such malicious relocations and prohibit execution (or at least
warn the user). Second, if compiler ﬂags can be changed, we
propose to recompile dynamic executables using -fPIC which
compiles dynamic executables using the same indirection for
references as used for dynamic libraries, removing the need for
copy relocations. Third, if the binary cannot be compiled as
position independent code, we propose to change the toolchain
to make the constraints that are only available at the source
code and compiler level explicit and preserved along the
toolchain, so that both linker and loader are aware of the read-
only nature of individual symbols. The loader can then update
the permissions accordingly after initial relocation.
This paper presents the following contributions:
1)
2)
3)
Discussion of a new attack vector called COREV
based on copy relocations that allow attackers to
violate memory integrity assumptions.
An evaluation of the prevalence of COREV by ex-
amining copy relocations for all packages of Ubuntu
16.04. We show that 4,570 packages have unexpected
copy relocations that change memory protections.
A presentation of three possible mitigations of this
new attack vector.
II. BACKGROUND
A. Dynamic Linking and Loading
Modern operating systems adopt dynamic linking and
loading to enable modularity. Dynamic linking has two major
advantages over the traditional static linking. First, the library
code can be shared among processes, so that a system needs
only one physical copy in memory per binary. Second, once a
bug is found in a library implementation, ﬁxing the bug and
distributing the updated library sufﬁces if it is dynamically
linked; otherwise, rebuilding every single binary that statically
linked the vulnerable library is required. As a result, all major
operating systems (e.g., Windows, Linux, and macOS) rely
on dynamic linking by default. For the rest of the paper, we
focus, without loss of generality, on the dynamic linking im-
plementation in GNU/Linux. In Section VII-E, we discuss how
other operating systems implement dynamic linking regarding
COREV attacks.
Most Linux systems use a uniﬁed format called Executable
and Linkable Format (ELF) for executables, dynamic libraries
(*.so) and object ﬁles (*.o) [19]. Conceptually, an ELF ﬁle
2
Fig. 1: An overview of compilation, static linking and dynamic loading.
contains a set of sections. Some sections are required for
execution and will be mapped into the process address space at
runtime (e.g., code and data), while others may store optional
descriptive information (e.g., symbol table and debug infor-
mation). Each mapped section is associated with a memory
permission. For example, code sections and read-only data
sections are mapped as non-writable while the other data
sections are mapped as writable (but not executable). A special
section called the relocation section stores a list of unresolved
references (i.e., absolute/relative addresses) that require further
attention at a later time (i.e., link time and/or runtime). For
example, an object ﬁle may have a relocation entry on the
operand of a direct call instruction. At link time, the relocation
entry will be resolved so that the call goes to the right function.
Each relocation entry contains necessary information to help
determine how it should be resolved.
Dynamically-linked programs require runtime support to
reference code and/or data that reside in different modules
(e.g., a library). A program does not statically know (1) which
module provides the required code/data and (2) where in the
address space of the process the module is loaded at runtime.
Consequently, modern systems rely on a small runtime called
dynamic loader (ld.so) to handle both issues. The dynamic
loader is responsible for loading libraries into the address space
and resolving necessary inter-module references so that the
program runs correctly.
In addition, dynamically-linked programs require coopera-
tion from the compiler toolchain (including the static linker) so
that the dynamic loader may resolve inter-module references at
runtime without modifying their code sections. On Linux, this
is achieved through the use of another level of indirection: the
Global Offset Table (GOT). Each module has its own GOT
section. The GOT contains the addresses used for external
references needed by the module. Each address is ﬁlled by
the dynamic loader at runtime, as a result of resolving the
corresponding relocation entry. For example, to invoke the
printf function in libc, an executable ﬁrst makes a direct
call to a local trampoline in the Procedure Linkage Table
(PLT), which in turn jumps to the actual address of printf
stored in the corresponding GOT entry. However, as we will
show in Section III, not all external references use the GOT
in practice, which creates security issues.
We present an overview of how a program is compiled,
linked, and loaded in Figure 1. A program often consists
of multiple source ﬁles. First, the compiler compiles each
source ﬁle into an object ﬁle. A typical object ﬁle contains
a code section, multiple data sections and necessary relocation
information. Second, the static linker takes as input the object
ﬁles, resolves references that can be done statically based on
the relocation information, allocates GOT entries for references
that need to be resolved by the dynamic loader at runtime, and
outputs an executable or a library. Third, when executing a
program, the dynamic loader loads its dependent libraries into
the process, performs dynamic linking by resolving remaining
references that require runtime relocation (e.g., ﬁlling GOT
entries of each module), and transfers the control
to the
entry point (i.e., main function) of the program. Note that
dynamic linking can be done lazily, resolving individual targets
whenever ﬁrst needed.