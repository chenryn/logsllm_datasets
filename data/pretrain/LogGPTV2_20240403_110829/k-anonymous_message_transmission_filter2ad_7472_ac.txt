i[t] = ri[t] + r
(cid:1)[t]
(cid:2)
i[t] = Ci[t]hr
mod p = Cρ
Pi −→ V : (cid:10)κ[t] = C
i[π(t)](cid:11)t=1,... ,2M
(cid:2)
2. V −→ Pi : b ← {0, 1}
3. If b = 0, then:
(cid:1)
i
[t](Xi[t])
• Pi sets l such that Xi[l] (cid:4)= 0 if l exists, or chooses
l ← {1, . . . , 2M} otherwise.
Pi −→ V : (cid:10)ξ[t] = ρ
i[π(t)](cid:11)π(t)(cid:3)=l
(cid:2)
• V accepts iﬀ hξ[t] = κ[t] mod p for all t (cid:4)= π
−1(l)
(cid:2)
Otherwise, Pi proves that C
is a commitment to a per-
mutation of C by revealing π and proving knowledge of
(cid:2)
−1(t)]/Ci[t]:
i[t]/Ci[t] = κ[π
the discrete log of x[t] = C
Pi −→ V : π,(cid:10)y[t] = hσ[t] mod p(cid:11)t
• Pi picks values σ[t] ← (cid:1)q,
• V −→ Pi
: (cid:10)z[t] ← (cid:1)q(cid:11)t
• Pi −→ V : (cid:10)w[t] = r
• V accepts if x[t]z[t]y[t] = hw[t], for all t ∈ [2M ]
[t]z[t] + σ[t] mod q(cid:11)t
(cid:2)
The above protocol is public-coin, honest-veriﬁer statistical
zero knowledge. In practice, we may implement the veriﬁer
by calls to a cryptographic hash function and obtain security
in the Random Oracle Model [2], or the veriﬁer may be
implemented by the remaining parties through a subprotocol
in which each party non-malleably commits to random bits
and then reveals the bits; the randomness used is then the
exclusive-or of each party’s random string. So long as there
is one honest veriﬁer this approach will work: a party which
refuses to participate in this subprotocol can be recognized
as the cheating party.
4.1.3 Non-participation
Unfortunately, the previous protocol neglects the ability
of an adversary to refuse to transmit data altogether.
In
fact, this has typically been the hardest of all scenarios to
cope with. In such a situation, it is impossible to arbitrate
correctly as to whether the required sender did not send a
message, or the alleged receiver is lying about not receiving
the message. An augmentation is required to Protocol 3 in
order to deal with this situation:
Protocol 5. k-AMT2
2. New Sharing Phase:
• For each j (cid:4)= i,
: {EP Kl (ri,l[t], si,l[t]) : l ∈ [M ], t ∈
Pi −→ Pj
[2M ]}.
• Pj checks that Cri,j [t](si,j[t]) = Ci,j[t]
After each phase of Protocol 3:
1. Timeout Step: For all Pj failing to receive a required
message from Pi after the timeout period, Pj sends a
signed “timeout” message T{i, j} to every group mem-
ber.
(cid:2)
2. Correction Step: For each i
(cid:4)= j, l, j
(cid:2) ∈ [M ], t ∈
[2M ]:
• if the Commitment phase has begun,
Pi(cid:1) −→ Pj
: {Cl,j(cid:1) [t]}
• if the Sharing phase has begun,
Pi(cid:1) −→ Pj
: {EP Kj (rl,j[t], sl,j[t])}
• if the Broadcast phase has begun,
: {(Rl[t], Sl[t])}
Pi(cid:1) −→ Pj
• Finally,
Pi(cid:1) −→ Pj
: {T{a, b} : (Pa → Pi : T{a, b}) }
Here, EK(m) denotes the public-key encryption of m with
public key K, where E is a semantically-secure public key
encryption scheme. Under this augmentation, the message
and round complexity of the protocol increase by a factor of
at most 2, and the bit complexity increases by a factor of M .
For space considerations, we omit the full description and
analysis of two alternative schemes which avoid this factor of
M increase in bit complexity. The ﬁrst reduces bit complex-
ity by modifying the Correction Step to the Commitment
Phase (the ﬁrst bullet of step 2 above). Rather than having
each honest participant send all M commitment matrices to
every other participant, each honest participant sends only
a randomly chosen subset of size loge M . The robustness
of the protocol is then decreased by an additive factor of
1/M . The second scheme works by tracking which pairs of
participants are unwilling to communicate and constructing
broadcast trees which avoid these links at the expense of
extra rounds; the key observation is that, when some par-
ticipant is no longer connected to some complete subgraph
of size k he can be dropped from the network, so that an
adversary cannot arbitrarily increase the round complexity.
4.2 Analysis
4.2.1 Robustness
Let us now consider the success of all possible attacks
against the robustness of the protocol. Note that whenever
an investigation is warranted (any check fails), a simple sub-
protocol is executed wherein every player reliably broadcasts
every received broadcast from the other players. If a party is
found to have sent diﬀerent signed broadcasts, it is identiﬁed
as the cheater. If not, the investigation continues.
The simplest possible deviation is for an adversary to at-
tempt to jam the channel by transmitting in more than one
slot. However, if access to the channel was not fair, then
this is detected with high probability. Since we have already
veriﬁed that all broadcasts were made correctly, then each
party has the same commitment matrix (the ﬁrst broad-
cast) for every other player. Therefore, the zero-knowledge
subprotocol will detect the cheater with negligible chance of
failure.
Theorem 1. Protocol 4 is sound:
such that Xi[t] (cid:4)= 0 and Xi[t
exist t (cid:4)= t
| Pr[V accepts] − 1
| is negligible.
(cid:2)
2
if for some i, there
] (cid:4)= 0 then
(cid:2)
(cid:2)
(cid:2)
i[t
(cid:2)
i[t], C
Proof. (Sketch) Suppose V chooses b = 0; then, if the
(cid:2)
commitments C
i are formed correctly Pi must compute logg h
(mod p) in order to open one of C
If
computing discrete logarithms modulo p is hard, then this
happens with negligible probability. Likewise, if V chooses
(cid:2)
b = 1, then if the commitments C
i are malformed, Pi must
compute logh g in order to make V accept (by the soundness
of the discrete logarithm subprotocol in step 3). So for the
honest V , regardless of the formation of the commitments
(cid:2)
C
i, Pi has probability at most 1/2 plus a negligible factor
of convincing V to accept.
] to zero.
Theorem 2. Protocol 4 is honest-veriﬁer zero-knowledge.
Proof. (Sketch) We exhibit a simulator for the honest-
veriﬁer case: ﬂip a coin representing the bit b in step 2. If
(cid:2)
i[t] = Cr(cid:1)[t](0) from step 1,
b = 0, form the commitments C
choose a random l ∈ 1, . . . , 2M and reveal r
[l −
[2M ] in step 3. If b = 1, form the commit-
1], r
(cid:2)
ments C
i[t] in the same manner as the honest prover, and
use the honest-veriﬁer simulator for the discrete logarithm
protocol in step 3.
[l + 1], . . . , r
[1], . . . , r
(cid:2)
(cid:2)
(cid:2)
(cid:2)
Given that incorrect broadcasts will always be detected,
and non-participation is dealt with, the only other possi-
ble deviation is to send incorrect data. However, because
of the use of commitments, every piece of data is either a
commitment that will have to be opened, or the opening of
an already transmitted commitment (or commitment prod-
uct). Therefore, this deviation will be detected as long as
breaking the commitment scheme is hard.
4.2.2 Anonymity
Theorem 3. If group G has at least k honest parties,
then Protocol 3 is sender k-anonymous for group G.
Proof. (Sketch) In each parallel round, the multiparty
sum protocol guarantees that no adversary may determine
the inputs of any honest parties; thus the adversary may
not distinguish between the case that Xi[t] = 0 and Xi[t] =
Msg[t] for any honest party.
Theorem 4. If every group G has at least k honest par-
ties, then Protocol 3 is receiver k-anonymous.
Proof. (Sketch) Each message sent to an honest party
Pi is received by all parties in Pi’s group; since there are at
least k honest parties in this group, the adversary cannot
distinguish between these parties as the recipients.
Theorem 5. If the precondition for Protocol 3 holds, Pro-
2 -robust k-anonymous
tocol 4 and Protocol 5 together give a 1
transmission protocol.
4.2.3 Efﬁciency
Because we detect cheaters with high probability, we may
consider the typical case to be when all participants fol-
low the protocol exactly except for non-participation.
In
this case the round complexity is 4, plus at most 3 correc-
tion steps.
In terms of message complexity, we transmit
O(M 2) = O(k2) messages for every anonymous message
sent. The bit complexity per anonymous bit sent is O(k4)
in the worst case. Because k is unrelated to n, the number
of participants, this protocol scales very well.
In the case where O(k) parties send anonymous messages
per round, the Transmission Phase of Protocol 3 still trans-
mits O(k2) protocol messages for every anonymous message
sent. However, there are alternate strategies that allow
amortizing message complexity over the anonymous mes-
sages of the group.
One alternative is to replace this transmission phase by
another in which, for each t such that X[t] (cid:4)= 0, each Pi
(cid:13) members of G[t] and sends Msg[t]
randomly chooses (cid:12) c
1−β
to those parties. In this case, when O(k) parties transmit
anonymously the ratio of protocol messages to anonymous
messages is O(k), and the ratio of protocol bits to anony-
mous bits is O(k3). However, all of the honest parties of the
sending group fail to send to the intended recipient of Msg[t]
−c/2. This condition is undetectable by
with probability e
the anonymous sender, thus requiring forward erasure cor-
rection over message blocks.
Another alternative trades round complexity for message
complexity in the “best case”: After each Pi in the sending
group computes X[t], Pi sends Msg[t] to the ith member
Qi of G[t]. Each Qi then sends Pi a signature on Msg[t].
Finally each Pi collects all such signatures and broadcasts
these signatures to the other members of his group. In this
alternative, the round complexity increases by 2, but again
when O(k) anonymous messages are transmitted the ratio of
protocol messages to anonymous messages is O(k) and the
ratio of protocol bits to anonymous bits is O(k3); and any
member of the sending group who fails to forward anony-
mous messages is caught. However, this alternative is not
secure against non-participation.
We intend for our protocol to be used over the Internet
or networks of similar characteristics. Our protocol is par-
ticularly eﬃcient in such networks, since throughput is fre-
quently constrained by network latency, and our protocol
has low round complexity.
Notice also that the zero-knowledge subprotocol is very
eﬃcient: with security parameter λ (the number of parallel
repetitions of Protocol 4), the number of rounds is constant,
the total number of bits transmitted is O(kλ lg p), and a non-
conforming party is caught with probability at least 1−2
−λ.
However, even if it were less eﬃcient, since it need only be
executed when cheating takes place, and all cheaters can
be caught with high probability, the cost of detection when
amortized over many rounds is essentially zero.
5. NETWORK CONSTRUCTION
The protocols in the previous section work for any network
which has already been partitioned into groups. Here we
present several strategies related to the eﬃcient, scalable
construction and management of this group structure.
5.1 Group Size
We set the group size to M = 2k
1−β (recall that β is the
fraction of participants that the adversary can control) so
that when the groups are chosen at random, with high prob-
ability at least k members of every group are honest: a mul-
tiplicative Chernoﬀ Bound tells us that for any group G,
Pr[|H ∩ G| < k] ≤ e
−k/4
,
so the probability that any group does not maintain k-
anonymity decreases exponentially with k. For small k this
probability can be computed directly for a tighter bound.
5.2 Group Formation and Management
We propose that a simple protocol be used to construct
the groups. The formation of groups should be such that
parties cannot choose which group they belong to. In an ini-
tialization phase, interested parties may securely construct
the list (cid:10)P1, . . . , Pn(cid:11) either through a small group of trusted
registration servers or through a secure group membership
protocol such as that of [15]. The parties then choose a
session identity S, for example, using a cryptographic hash
function H applied to the initial parameters of the network.
The number of groups is determined as the largest power
of 2 smaller than n(1 − β)/k, say 2m. Then each Pi de-
termines their group number by the m least signiﬁcant bits