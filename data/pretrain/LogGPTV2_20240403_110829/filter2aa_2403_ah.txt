返回地址 
ESP+4 
arg1, 它在 IDA 里记为 arg_0 
ESP+8 
arg2, 它在 IDA 里记为 arg_4 
ESP+0xC 
arg3, 它在 IDA 里记为 arg_8 
…… 
…… 
本书第 64 章将会详细介绍有关的调用约定（Calling conventions）。需要注意的是，程序员可以使用栈
来传递参数，也可以不使用栈传递参数。参数处理方面并没有相关的硬性规定。 
例如，程序员可以在堆（heap）中分配内存并用之传递参数。在堆中放入参数之后，可以利用EAX寄
存器为函数传递参数。这种做法确实行得通。
④
① 参照 http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.faqs/ka13785.html。部分文献又称叶函数为“末端函数” 
② 多年以前，在 PDP-11 和 VAX 平台上，调用函数的指令效率很低；在运行程序的时候，差不多近半的耗时都花在互相调用的
指令上。以至于当时普遍认为、“大规模调用功能较少的函数”的程序就是垃圾程序。 
③ 此外还有 stdcall、fastcall、thiscall 等。Windows 上很多程序使用 stdcall。 
④ Donald Knuth 在《The Art of Computer Programming》 一书的 14.1 节专门介绍了子程序。读者能够发现他提到了一种方法，
通过 JMP 跳转到子程序并在子程序的入口处即刻提取所需参数。Knuth 的这种方法在 System/360 上非常实用。 
只是在x86 系统和ARM系统上，使用栈处理参数已经成为
了约定俗成的习惯，而且它的确十分方便。 
另外，被调用方函数并不知晓外部向它传递了多少个参数。如果函数可处理的参数数量可变，它就需
要说明符（多数以%号开头）进行格式化说明、明确参数信息。拿我们常见的 printf()函数来说： 
printf("%d %d %d", 1234); 
这个命令不仅会让 printf()显示 1234，而且还会让它显示数据栈内 1234 之后的两个地址的随机数。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 5 章 栈 
29 
由此可知，声明 main()函数的方法并不是那么重要。我们可以将之声明为 main(),main(int argc, char 
*argv[])或 main(int argc, char *argv[], char *envp[])。 
实际上 CRT 中调用 main()的指令大体上是下面这个样子的。 
push envp 
push argv 
push argc 
call main 
…  
即使我们没有在程序里声明 main()函数便用哪些参数，程序还可以照常运行；参数依旧保存在栈里，
只是不会被主函数调用罢了。如果将 main()函数声明为 main(int argc, char*argv[])，程序就能够访问到前两
个参数，但仍然无法使用第三个参数。除此以外，也可以声明为 main( int argc)，主函数同样可以运行。 
5.2.3 存储局部变量 
通过向栈底调整栈指针（stack pointer）的方法，函数即可在数据栈里分配出一片可用于存储局部变量
的内存空间。可见，无论函数声明了多少个局部变量，都不影响它分配栈空间的速度。 
虽然您的确可以在栈以外的任何地方存储局部变量，但是用数据栈来存储局部变量已经是一种约定俗
成的习惯了。 
5.2.4 x86:alloca()函数 
alloca()函数很有特点。
①
① 在 MSVC 编译环境里，它的实现方式可在目录 C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\crt\src\intel 下的
alloca16.asm 和 chkstk.asm 中找到。 
大体来说，alloca()函数直接使用栈来分配内存，除此之外，它与 malloc()函数没有显著的区别。 
函数尾声的代码会还原 ESP 的值，把数据栈还原为函数启动之前的状态，直接抛弃由 alloca()函数分
配的内存。所以，程序不需要特地使用 free()函数来释放由这个函数申请的内存。 
alloca() 函数的实现方法至关重要。 
简要地说，这个函数将以所需数据空间的大小为幅度、向栈底调整 ESP 的值，此时 ESP 就成为了新的
数据空间的指针。我们一起做个试验： 
#ifdef __GNUC__ 
#include  // GCC 
#else 
#include  // MSVC 
#endif 
#include  
void f() 
{ 
     char *buf=(char*)alloca (600); 
#ifdef __GNUC__ 
     snprintf (buf, 600, "hi! %d, %d, %d\n", 1, 2, 3); // GCC 
#else 
     _snprintf (buf, 600, "hi! %d, %d, %d\n", 1, 2, 3); // MSVC 
#endif 
     puts (buf); 
}; 
snprint()函数的功能和 printf()函数的功能差不多。printf()将输出结果输出到 stdout（也就是终端 terminal
或 console 一类的输出设备上），而 snprintf()则将结果输出到 buf 数组（人工设定的缓冲区）、我们需要通过
puts()函数才能将 buf 的内容输出到 stdout。当然，printf()函数就足以完成_snprint()和 puts()两个函数的功能。
本文意在演示缓冲区的用法，所以刻意把它拆分为 2 个函数。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
30 
逆向工程权威指南（上册） 
MSVC 
现在使用 MSVC 2010 编译上面的代码，得到的代码段如下所示。 
指令清单 5.1  MSVC 2010 
... 
    mov  
eax, 600 ; 00000258H 
    call  
__alloca_probe_16 
    mov  
esi, esp 
    push  
3 
    push  
2 
    push  
1 
    push  
OFFSET $SG2672 
    push  
600   
; 00000258H 
    push  
esi 
    call  
__snprintf 
    push  
esi 
    call  
_puts 
    add  
esp, 28  
; 0000001cH 
... 
由于 alloca()函数是编译器固有函数（参见本书第 90 章），并非常规函数的缘故，这个程序没有使用栈，
而是使用 EAX 寄存器来传递 alloca()函数唯一的参数。在调用 alloca()函数之后，ESP 将指向 600 字节大小
的内存区域，用以存储数组 buf。 
GCC Intel 语体 
在编译上述代码时，GCC 4.4.1 同样不会调用外部函数。 
指令清单 5.2  GCC 4.7.3 
.LC0: 
         .string "hi! %d, %d, %d\n" 
f: 
         push     ebp 
         mov      ebp, esp 
         push     ebx 
         sub      esp, 660 
         lea      ebx, [esp+39] 
         and      ebx, -16       
; align pointer by 16-bit border 
         mov      DWORD PTR [esp], ebx           
; s 
         mov      DWORD PTR [esp+20], 3 
         mov      DWORD PTR [esp+16], 2 
         mov      DWORD PTR [esp+12], 1 
         mov     
DWORD PTR [esp+8], OFFSET FLAT:.LC0 ; "hi! %d, %d, %d\n" 
         mov      DWORD PTR [esp+4], 600            
; maxlen 
         call     _snprintf 
         mov      DWORD PTR [esp], ebx              
; s 
         call     puts 
         mov      ebx, DWORD PTR [ebp-4] 
         leave 
         ret 
GCC+ AT&T 语体 
接下来让我们看看 AT&T 语体的指令。 
指令清单 5.3  GCC 4.7.3 
.LC0: 
         .string "hi! %d, %d, %d\n" 
f: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 5 章 栈 
31 
         pushl  
%ebp 
         movl     %esp, %ebp 
         pushl    %ebx 
         subl     $660, %esp 
         leal     39(%esp), %ebx 
         andl     $-16, %ebx 
         movl     %ebx, (%esp) 
         movl     $3, 20(%esp) 
         movl     $2, 16(%esp) 
         movl     $1, 12(%esp) 
         movl     $.LC0, 8(%esp) 
         movl     $600, 4(%esp) 
         call     _snprintf 
         movl     %ebx, (%esp) 
         call     puts 
         movl     -4(%ebp), %ebx 
         leave 
         ret 
它与 Intel 语体的代码没有实质区别。 
其中，“movl $3, 20(%esp)”对应 Intel 语体的“mov DWORD PTR [esp+20], 3”指令。在以“寄存器＋
偏移量”的方式寻址时，AT&T 语体将这个寻址表达式显示为“偏移量（%寄存器）”。 
5.2.5  （Windows）SEH 结构化异常处理 
如果程序里存在 SEH 记录，那么相应记录会保存在栈里。 
本书将在 68.3 节里进行更详细的介绍。 
5.2.6 缓冲区溢出保护 
本书将在 18.2 节里进行更详细的介绍。 
5.3  典型的栈的内存存储格式 
在 32 位系统中，在程序调用函数之后、执行它的第一条指令之前，栈在内存中的存储格式一般如下表所示。 
… 
…… 
ESP-0xC 
第 2 个局部变量，在 IDA 里记为 var_8 
ESP-8 
第 1 个局部变量，在 IDA 里记为 var_4 
ESP-4 
保存的 EBP 值 
ESP 
返回地址 
ESP+4 
arg1, 在 IDA 里记为 arg_0 
ESP+8 
arg2, 在 IDA 里记为 arg_4 
ESP+0xC 
arg3, 在 IDA 里记为 arg_8 
… 
…… 
5.4 栈的噪音 
本书会经常使用“噪音”、“脏数据”这些词汇。它们怎么产生的呢？待函数退出以后，原有栈空间里
的局部变量不会被自动清除。它们就成为了栈的“噪音”、“脏数据”。我们来看下面这段代码。 
#include  
void f1()  
{ 
         int a=1, b=2, c=3; 
}; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
32 
逆向工程权威指南（上册） 
void f2()  
{ 
         int a, b, c; 
         printf ("%d, %d, %d\n", a, b, c); 
}; 
int main()  
{ 
         f1(); 
         f2();  
}; 
使用 MSVC 2010 编译后可得到如下所示的代码。 
指令清单 5.4  Non-optimizing MSVC 2010 
$SG2752 DB    
'%d, %d, %d', 0aH, 00H 
_c$ = -12        ; size = 4 
_b$ = -8         ; size = 4 
_a$ = -4         ; size = 4 
_f1     PROC 
         push     ebp 
         mov   
ebp, esp 
         sub   
esp, 12 
         mov  
DWORD PTR _a$[ebp], 1 
         mov  
DWORD PTR _b$[ebp], 2 
         mov  
DWORD PTR _c$[ebp], 3 
         mov    
esp, ebp 
         pop  
ebp 
         ret  
0 
_f1     ENDP 
_c$ = -12    
; size = 4 
_b$ = -8         ; size = 4 
_a$ = -4         ; size = 4 
_f2     PROC 
         push  
ebp 
         mov   
ebp, esp 
         sub   
esp, 12 
         mov  
eax, DWORD PTR _c$[ebp] 
         push  
eax 
         mov  
ecx, DWORD PTR _b$[ebp] 
         push  
ecx 
         mov  
edx, DWORD PTR _a$[ebp] 
         push   
edx 
         push   
OFFSET $SG2752 ; ’%d, %d, %d’ 
         call   
DWORD PTR __imp__printf 
         add  
esp, 16 
         mov  
esp, ebp 
         pop  
ebp 
         ret  
0 
_f2     ENDP 
main    PROC 
         push   
ebp 
         mov   
ebp, esp 
         call      _f1 
         call    _f2 
         xor      eax, eax 
         pop     
ebp 
         ret     
0 
_main   ENDP 
编译器会给出提示： 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 5 章 栈 
33 
c:\Polygon\c>cl st.c /Fast.asm /MD 
Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 16.00.40219.01 for 80x86 
Copyright (C) Microsoft Corporation.  All rights reserved. 
st.c 
c:\polygon\c\st.c(11) : warning C4700: uninitialized local variable 'c' used 
c:\polygon\c\st.c(11) : warning C4700: uninitialized local variable 'b' used 
c:\polygon\c\st.c(11) : warning C4700: uninitialized local variable 'a' used 
Microsoft (R) Incremental Linker Version 10.00.40219.01 
Copyright (C) Microsoft Corporation.  All rights reserved. 
/out:st.exe 
st.obj 
可是运行它的结果却是： 
c:\Polygon\c>st 
1, 2, 3 
天，真奇怪！虽然我们没有给 f2()的任何变量赋值，但是变量自己有自己的值。f2()函数的值就是栈里
残存的脏数据。 
我们使用 OllyDbg 打开这个程序，如图 5.1 所示。 
图 5.1  使用 OllyDbg 查看 f1()函数的数据栈 
在 f1()函数给变量 a、b、c 赋值后，数值存储于 0x1FF860 开始的连续地址里。 