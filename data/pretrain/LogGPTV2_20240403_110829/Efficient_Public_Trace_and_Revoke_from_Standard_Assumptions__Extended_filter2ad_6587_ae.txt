by correctness of ℱℰ.
ℱℰ.Dec(skid, 𝐶1)
⟨xid, vℛ⟩
=
⟨xid, 𝑚 · vℛ⟩
⟨xid, vℛ⟩ = 𝑚,
□
Now, we consider the implementation of Step (a) of Al-
gorithm Trace. The aim is to find 𝑚, 𝑚′ ∈ Z𝑝 such that an
encryption of 𝑚 has a non-negligible probability difference
of decrypting to 𝑚 and 𝑚′ via 𝒪𝒟. These plaintexts are
used for tracing as follows: the first probe ciphertext distribu-
tion will be a genuine encryption of 𝑚, while the last probe
ciphertext distribution will be a genuine encryption of 𝑚′.
(To see this, observe that for the last probe ciphertext, we
have 𝒮𝑖 = ∅ and v𝒮𝑖 = (𝑚′ − 𝑚)· vℛ. Consequently, we have
𝐶𝒮𝑖 = (ℱℰ.Enc(pk, y),ℛ) where y = v𝒮𝑖 +𝑚·vℛ = 𝑚′·vℛ.)
The fact that 𝒪𝒟 behaves differently for these two distribu-
tions ensures that there will be an 𝑖 such that |𝑝𝑖 − 𝑝𝑖−1|
is non-negligible. Now, if the oracle 𝒪𝒟 was perfect, i.e., a
genuine encryption of 𝑚 always decrypts to 𝑚 for all 𝑚,
then the existence of a pair (𝑚, 𝑚′) as in Step (a) would be
immediate. The difficulty is that the oracle 𝒪𝒟 only achieves
correct decryption with non-negligible advantage.
Lemma 3.2. Let ℛ be arbitrary and assume that Equa-
tion (1) holds for ℛ. Then, with probability ≥ 1/(4𝜆𝑐) over
the choice of 𝑚, 𝑚′ ←˒ ℳ, we have:
⃒⃒⃒
]︁
[︁𝒪𝒟
[︁𝒪𝒟
Pr
𝐶←˒Enc(pk,ℛ,𝑚)
−
Pr
𝐶′←˒Enc(pk,ℛ,𝑚′)
(𝐶, 𝑚) = 1
′
(𝐶
, 𝑚) = 1
]︁⃒⃒⃒ ≥ 1
2𝜆𝑐 .
Based on Lemma 3.2, Step (a) of Algorithm Trace can be
implemented by repeatedly sampling 𝑚, 𝑚′ ←˒ ℳ and esti-
mating the probabilities that 𝒪𝒟(𝐶, 𝑚) = 1 and 𝒪𝒟(𝐶′, 𝑚) =
1 using Hoeffding’s bound, until the probability difference is
sufficiently large.
Proof. For 𝑚, 𝑚′ ∈ ℳ, let 𝑃 (𝑚′, 𝑚) denote the proba-
bility that 𝒪𝒟(𝐶′, 𝑚) = 1, where 𝐶′ ←˒ Enc(pd, pk,ℛ, 𝑚′).
Equation (1) states that
𝑚←˒ℳ [𝑃 (𝑚, 𝑚)] ≥ 1
Pr
|ℳ| +
1
𝜆𝑐 .
Let us assume by contradiction (of the statement to be
proved), that
𝑚,𝑚′←˒ℳ[|𝑃 (𝑚, 𝑚) − 𝑃 (𝑚
Pr
′
, 𝑚)|  1 − 1
4𝜆𝑐 .
(2)
We show that if (2) holds, then the following inequality holds
as well.
Pr
𝑚′←˒ℳ[ Pr
𝑚←˒ℳ[|𝑃 (𝑚, 𝑚)− 𝑃 (𝑚
′
, 𝑚)|  1− 1
2𝜆𝑐 ] >
.
1
2
(3)
By contradiction of (3) above, let us assume that
′
1
Pr
, 𝑚)|  1− 1
2𝜆𝑐 ] ≤ 1
2
.
′
, 𝑚)| <
Pr
𝑚,𝑚′[|𝑃 (𝑚, 𝑚) − 𝑃 (𝑚
𝑚′ [Pr
1
|ℳ|
= Pr
Pr
𝑚
=
𝑚
[|𝑃 (𝑚, 𝑚) − 𝑃 (𝑚
′
1
2𝜆𝑐 ]]
[|𝑃 (𝑚, 𝑚) − 𝑃 (𝑚
′
1
2𝜆𝑐 ]
, 𝑚)| <
, 𝑚)| <
1
2𝜆𝑐 ]
𝑚′
∑︁
∑︁
∑︁
𝑚′
of Type 1
of Type 2
+
1
|ℳ|
≤ 1
|ℳ|
[|𝑃 (𝑚, 𝑚) − 𝑃 (𝑚
′
, 𝑚)| <
1
2𝜆𝑐 ]
Pr
𝑚
∑︁
1 +
1
|ℳ|
(1 − 1
2𝜆𝑐 )
𝑚′
of Type 2
of Type 1
= 𝑥 + (1 − 𝑥)(1 − 1
𝑚′
2𝜆𝑐 ) ≤ 1 − 1
4𝜆𝑐 ,
∑︀
We consider an 𝑚′ of Type 1. Using the fact that
(︂
∑︁
∑︁
𝑚 𝑃 (𝑚′, 𝑚) ≤ 1, we obtain:
which would contradict (2) above.
)︂
′
𝑃 (𝑚, 𝑚) <
𝑃 (𝑚
, 𝑚) +
1
2𝜆𝑐
≤ 1 +
|ℳ|
2𝜆𝑐 +
𝑚
𝑚
This contradicts Equation (1).
|ℳ|
𝜆𝑐 .
□
Session K1:  Secure ComputationCCS’17, October 30-November 3, 2017, Dallas, TX, USA22853.2 Semantic Security
We start by proving IND-CPA security of our scheme.
Theorem 3.3. If ℱℰ is 𝑟-IND-CPA secure, then 𝒯 ℛ is
IND-CPA secure.
Proof. Let 𝒜𝒯 ℛ be a probabilistic polynomial-time ad-
versary that breaks semantic security of 𝒯 ℛ. We construct
a probabilistic polynomial-time adversary 𝒜ℱℰ that breaks
semantic security of ℱℰ. Adversary 𝒜ℱℰ proceeds as follows.
∙ It first obtains the public key pk output by the ℱℰ
challenger (who runs the ℱℰ.Setup(1𝜆, 1ℓ) algorithm)
and relays it to 𝒜𝒯 ℛ.
∙ The adversary 𝒜𝒯 ℛ adaptively chooses at most 𝑟 iden-
tities id (that forms the revoked set ℛ) and are included
in pd. The adversary 𝒜ℱℰ then queries the ℱℰ chal-
lenger for each xid for all id ∈ ℛ and receives the
corresponding skid. Adversary 𝒜ℱℰ relays all skid for
each id ∈ ℛ to 𝒜𝒯 ℛ.
∙ When 𝒜𝒯 ℛ chooses two messages 𝑚0, 𝑚1 ∈ ℳ and
provides them to 𝒜ℱℰ , adversary 𝒜ℱℰ proceeds as
follows:
− It computes vℛ ∈ Zℓ
𝑝 ∖ {⃗0} such that ⟨xid, vℛ⟩ = 0
for every id ∈ ℛ.
− It sends yℛ,0 = 𝑚0 · vℛ and yℛ,1 = 𝑚1 · vℛ to the
ℱℰ challenger who samples 𝑏 ←˒ {0, 1} and encrypts
yℛ,𝑏 as 𝐶yℛ,𝑏 ←˒ ℱℰ.Enc(pk, yℛ,𝑏).
− Adversary 𝒜ℱℰ receives 𝐶yℛ,𝑏 from the ℱℰ chal-
lenger and sends 𝐶 = (𝐶yℛ,𝑏 ,ℛ) to 𝒜𝒯 ℛ.
∙ Finally, adversary 𝒜𝒯 ℛ outputs its guess 𝑏′ ∈ {0, 1}
and 𝒜ℱℰ also outputs 𝑏′ as its own guess of 𝑏.
Note that adversary 𝒜ℱℰ behaves as an IND-CPA challenger
in the view of 𝒜𝒯 ℛ. Further, it is a valid adversary against
ℱℰ, as ⟨yℛ,0, xid⟩ = ⟨yℛ,1, xid⟩ for every vector xid queried to
the ℱℰ challenger (i.e., each id ∈ ℛ). The advantage of 𝒜ℱℰ
is exactly the same as the advantage of 𝒜𝒯 ℛ.
□
We may observe that for 𝒯 ℛ to be IND-CPA secure, an 𝑟-
IND-CPA secure ℱℰ scheme is sufficient. However, as we see
below, for traceability with up to 𝑡 colluding traitors along
with 𝑟 already revoked users, we need an ℱℰ scheme that
is (𝑡 + 𝑟)-IND-CPA secure.
3.3 Traceability
Here, we prove the traceability of the scheme. To start with,
we first prove the following lemma.
Lemma 3.4. Assume that a pirate decoder 𝒟 satisfies Equa-
tion (1) for some ℛ and 𝒮. Then, the execution of Trace does
not return ⊥ but returns some id ∈ 𝒮 with overwhelming
probability.
Proof. We consider a variant of Trace that continues its
execution until it exhausts 𝒮∖ℛ, even if it has already output
an id. We consider the probabilities 𝑝𝑖 at the start and end
of that modified execution.
(1) At the beginning, algorithm Trace considers 𝒮1 = 𝒮∖ℛ
and v𝒮1 = 0. Hence, the genuine ciphertext output by
the Enc algorithm and the probe ciphertext created
by the Trace algorithm for the suspect subset 𝒮1 are
exactly the same.
(2) When 𝑖 = |𝒮 ∖ ℛ| + 1, we have 𝒮𝑖 = ∅ and v𝒮𝑖 =
(𝑚′ − 𝑚) · vℛ. In Step (a) of the Trace algorithm, the
messages 𝑚 and 𝑚′ were chosen such that the difference
in the probabilities 𝑝1 and 𝑝|𝒮∖ℛ|+1 is ≥ 1/(2𝜆𝑐).
Note that the two latter observations imply, via the triangle
inequality, that there exists an 𝑖 such that |𝑝𝑖 − 𝑝𝑖−1| is non-
negligible. By the Hoeffding bound, Trace algorithm outputs
□
id𝑖−1 with overwhelming probability.
Then, we prove the following theorem.
Theorem 3.5. If ℱℰ is (𝑡 + 𝑟)-IND-CPA secure, then 𝒯 ℛ
satisfies public traceability.
Proof. Let us assume by contradiction that an adversary
𝒜 can break the public traceability of 𝒯 ℛ with non-negligible
probability. We then construct a probabilistic polynomial-
time adversary 𝒜ℱℰ that breaks the semantic security of ℱℰ.
Adversary 𝒜ℱℰ proceeds as follows.
∙ It first obtains the public key pk output by the ℱℰ
challenger (who runs the ℱℰ.Setup(1𝜆, 1ℓ) algorithm)