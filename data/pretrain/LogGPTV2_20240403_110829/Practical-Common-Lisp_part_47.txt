www.TopSage.com
；m in Knuth'salgorithm
the list where we save the records selected
U in Knuth's algorithm
in Knuth'salgorithm
---
## Page 236
FUNCALL或APPLY调用时才会求值。现在假设bar函数看起来像这样：
传递给bar的匿名函数使用RETURN-FROM从BLOCK中返回。但RETURN-FROM要直到匿名函数被
作用域之内的任何代码所闭合。例如，考虑下面这个函数：
底部的函数立即非本地返回。这是因为BLOCK名字和TAGBODY标记可以被BLOCK或TAGBODY词法
BLOCK和TAGBODY来管理单一函数内的控制流，但也可以将它们与闭包一起使用，可以强制从栈
20.4
述的字面转译具有相同行为的函数，那么你有理由相信它是正确的。
次变更之后仍然可以工作。
字描述的不同之处在于，它是可以运行和测试的。然后你可以开始着手重构它，确保该函数在每
①由于这个算法取决于RANDOM所返回的值。你也许想要使用一致的随机数种子来测试它，这可以通过在每一次对
(defun foo ()
从语言的另一方面讲，特殊操作符还可以让你控制调用栈的行为。例如，尽管可以正常使用
尽管一眼看不出来这些代码是否正确实现了算法S，但如果它是一系列与最初的Knuth算法描
在经过一番优化以后，
这不算是精美的代码，但很容易验证它是Knuth算法的一个忠实转译。这些代码和Knuth的文
如果你的重构都是合法的，那么这个表达式应当每次求值都得到同样的列表。
algorithm-s的调用中将*RANDOM-STATE*绑定到(make-random-state nil）的值上来实现。例如，你可
(defun algorithm-s (n max)
(let ((*random-state*
以通过求值下面的形式来对algorithm-s做一次基本的健全性检查：
(format t 
(block a
formatt
(loop for seen from
(format t " Entering BLOcK")
从栈上回退
(format
(bar #'(lambda () (return-from a)))
until (zerop n)))
collect seen and do (decf n)
when (= (* (- max seen) u) (- n selected)) (go s5))
"Leaving foo~"))
( (foo)
(defun baz (fn)
(defun bar (fn)
Entering BLOCK
Entering foo 
·(format t " Leaving bar~"))
(format t
(block a (baz fn))
(formatt
 Entering baz
Entering bar
(format t
(format t 
(baz fn)
(formatt
第 20章特殊操作符
Leaving bar~%"))
Entering bar~%")
Entering bar~")
("~zeq 6uT4ea
Entering baz~%")
www.TopSage.com
---
## Page 238
使用CATCH和THROW来代替BLOCK和RETURN-FROM：
形式上，然后它会立即返回。这样，你可以编写另一个版本的foo、bar和baz函数，像下面这样
(catch tag），而任何在CATCH的动态时效中求值的THROw在抛出该对象时，将导致栈回退到CATCH
是动态建立的—相对一个词法作用域的名字来说，一个CATCH的标签是对象，称为捕捉标记
体，然后用THROW使CATCH形式立即从一个特定值返回。区别在于，CATCH和THROW之间的关联
绝对不能把它们跟诸如Java和Python这些语言中的try/catch和try/except结构相混淆。
作符，这些操作符使用得更少，它们是早期没有Common Lisp状况系统的Lisp方言所留下的东西。
启动时究竟发生了什么。
怕都是在间接地使用它们，因此理解其工作方式有助于你更好地理解它们，比如，当调用一个再
的TAGBODY上也将导致错误发生。
CATCH和THROW是另一对可以强制回退栈的特殊操作符。相比到目前为止提到的其他相关操
你不太可能亲自使用BLOCK和TAGBODY来实现这种栈回退。但无论你何时使用状况系统，恐
②如果你是那种凡事都要刨根问底的人，那么思考一下怎样才能通过BLOCK、TAGBODY、闭包和动态变量来实现状
①这是一个相当合理的限制一
CATCH和THROW是BLOCK和RETURN-FROM的动态版本。就是说，你用CATCH包装了一个代码
NIL
Leaving foo
Entering foo
CL-USER> (foo)
(defun baz {)
(defun bar 
(defunfoo（)
(defparameter *obj* (cons nil nil)) ; i.e. some arbitrary object
况系统的那些宏，这可能是相当有意义的。
种原因，很少有Scheme之外的语言支持这类续延特性。
Scheme程序员。Scheme支持续延（continuation），一个允许从相同的函数调用中多次返回的语言构造。但出于多
Entering CATCH
 Entering baz
Enteringbar
意，没有必要向下传递闭包，baz可以直接调用THROW。结果和之前的版本很相似。
format t
format t
formatt
(catch *obj*
（formatt
(bar)
(format t " Entering CATCH~%")
()
"Entering foo~%")
nil)
Leaving bar~%"))
 Entering bar~%")
Leaving baz~"))
 Entering baz~%"
一从一个已经返回了的形式中返回的意义并不是完全清楚的一
www.TopSage.com
20.4从栈上回退
一当然，除非你是一个
221
---
## Page 239
它可以让你写出类似下面这样的代码：
connection，你可能会写一个像下面这样的宏：?
在它们结束访问后被清理干净，无论它们是正常返回的、通过再启动返回的，还是其他的非本地
见的。
人UNWIND-PROTECT之前相同的动态变量绑定、再启动和状况处理器将对清理形式中的代码是可
PROTECT返回。这些清理形式在与UNWIND-PROTECT相同的动态环境中被求值，因此，那些在进
protected-form正常返回了，那么它所返回的值将在执行这些用于清理的形式后被uNwIND-
章中所讨论的方式。“UNWIND-PROTECT的基本结构看起来像这样：
作用域的任何情况下总可以运行，无论是通过一个被调用的再启动正常返回，还是采用任何在本
PROTECT让你能够控制在栈被回退时所发生的事—确保特定代码在控制离开UNWIND-PROTECT
会使用CATCH和THROW，因为使用状况系统会更加灵活。
察代码就可以看出cATcH和THRow是否会在运行期关联在一起。在CommonLisp中，你很少有机
误处理。不过，为了确保它们的可管理性，捕捉标记通常只是一些引用了的符号，因此你只需观
时效内运行的代码都可以通过抛出正确的对象来返回。
不再需要向下传递一个闭包以便底层代码可以从一个CATCH中返回—任何在一个CATCH的动态
RETURN-FROM更难理解。使用了cATCH和THROW的foo、bar和baz的演示代码的唯一优势就是
baz中的THROW将不会抛出同样的CATCH。这使得代码中的CATCH和THROW比 BLOCR和
它们的值都是在运行期检测的。这样，如果在bar中的某些代码重新赋值或绑定了*obj*，那么
最后一个跟栈控制有关的特殊操作符是我之前提到过的操作符UNWIND-PROTECT。UNWIND-
222
② 事实上，CLSQL是跨Lisp平台和数据库的SQL接口库，它确实提供了一个称为with-database的类似的宏。
① UNWIND-PROTECT本质上与Java和Python中的try/finally结构等价。
你偶尔会直接使用UNWIND-PROTECT。不过更常见的情况是将它作为WITH-风格宏的基础,
在那些没有任何类似CommonLisp状况系统机制的古老Lisp方言里，CATCH和THRow用于错
不过，CATCH和THROW过于动态了。在CATCH和THROW中，标记形式都会被求值，这意味着
(with-database-connection (conn :host "foo" :user "scott" :password "tiger")
(defmacro with-database-connection ((var &rest open-args) &body body)
单一的protected-form被求值，随后无论它是否返回，cleanup-form都会被求值。如果
CLSQL的主页是http://clsql.b9.com。
(unwind-protect protected-form
cleanup-form*)
(do-more-stuff conn))
(do-stuff conn)
(unwind-protect
(close-connection ,var))))
第 20章特殊操作符
(progn
www.TopSage.com
@body)
,@open-args)))
---
## Page 240
LIST接受单个列表并将它的元素作为多值返回。换句话说：
此它们的参数将以正常方式传递。VALUES接受可变数量的参数并将它们作为多值返回，VALUES-
因为“+”期待其参数是数字而非列表。但由于多重返回值机制悄悄地丢弃了那个不需要的第二
假设你有一个哈希表*h*，它含有一些数值。如果GETHASH返回一个列表，那么你就不能写出类
的其他值都将被悄悄地丢掉。为了理解这一区别，来看看函数GETHASH，它返回两个值：哈希表
BIND宏则构建于其上。
值的基本功能是由特殊操作符MULTIPLE-VALUE-CALL提供的，而更常用的MULTIPLE-VALUE-
并不太合适，因为多重返回值并不仅仅是由一两个特殊操作符提供的，而是紧密集成到了整个语
20.5
connection形式的主体中发生了什么。
你不必担心数据库的关闭，因为UNWIND-PROTECT会确保数据库被关闭，不论with-database-