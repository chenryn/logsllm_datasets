**作者:[evilpan](https://evilpan.com/)  
原文链接: **
本文是 2020
年中旬对于蓝牙技术栈安全研究的笔记，主要针对传统蓝牙和低功耗蓝牙在协议层和软件安全性上攻击面分析，并介绍了一些影响较大的蓝牙漏洞原理，比如协议层的
KNOB、BIAS 漏洞，软件实现上的 BlueBorne、SweynTooth 以及 BlueFrag 漏洞等。
# 前言
蓝牙(Bluetooth)是一个短距离无线传输的技术，工作在免证的ISM频段。最初名字为Wibree，在90年代由Nokia设计开发，随后转交给蓝牙特别兴趣小组(SIG)专门维护。
![
](https://images.seebug.org/content/images/2021/07/d148f2ac-b57c-471d-8049-77678322fe02.png-w331s)
蓝牙标准经过了数十年不愠不火的发展，核心版本从1.0迭代了到目前的5.2，其中在2010年推出的蓝牙4.0版本标准中引进了Bluetooth
Smart或者Buletooth Low Energy(BLE)。由于在功耗上有了极大改善，加上智能手机和智能设备的发展，BLE的应用也进入了爆发期。
4.0之前蓝牙通常称为经典蓝牙(Classic Bluetooth)，包括1.0提出的BR(Basic
Rate，基础速率)以及2.0提出的EDR(Enhanced Data
Rate，增强数据速率)，两者往往放在一起表示与低功耗蓝牙相对的传统蓝牙。BR/EDR常用于相对短距离无线的连续连接，比如耳机的音频传输。
为了进一步提高蓝牙传输速率，在3.0中又提出了基于802.11的AMP(Alternate MAC and PHY layer
extension)拓展，这是和BR/EDR不并存的一种传输模式。
# 核心系统
BR/EDR和BLE虽然都称为蓝牙，但它们在实现上大相径庭。前者主要侧重于点对点的通信，连接性和传输速率是考虑的重点；而BLE则侧重于低功耗的设计，在射频层和基带层上优化了多播和广播的支持。传统上Controller芯片只支持一种射频模式，但越来越多设备中也同时支持两种系统，以覆盖尽量多的使用场景。
![
](https://images.seebug.org/content/images/2021/07/8cbfae50-9b6a-4e18-869c-f4953c3ba8e7.png-w331s)
蓝牙的核心系统架构包含一个Host和一个或多个Controller，Host可以理解为主核或者主板，运行主流的富操作系统；而Controller可以看做是蓝牙芯片，运行的是裸机程序或者RTOS，主要功能是对射频信号进行编解码。Host和Controller之间通过HCI接口(Host
Controller Interface)进行通信，可通过UART、USB等物理接口进行传输。核心系统中包含的组件和之间的关系如下图所示：
![
](https://images.seebug.org/content/images/2021/07/4f1b036d-2606-4115-80b7-33cfb78636a9.png-w331s)
其中Host部分主要是基于L2CAP抽象出的逻辑信道实现应用层的协议和功能，涉及的关键组件和协议有：
  * Channel Manager：负责创建、管理和释放L2CAP channel。
  * L2CAP Resource Manager：负责管理PDU数据的顺序、调度、分片、重组等功能，是L2CAP核心功能的一部分。
  * SMP：Security Manager Protocol，实现BLE系统中的点对点安全认证功能，包括秘钥生成和认证等；BR/EDR系统的对应功能则在Controller的Link Manager中实现。
  * ATT：Atrribute Protocol，应用层attribute client和server之间的协议。
  * GATT：Generic Attribute Profile，表示ATT server或者client的功能，profile描述了服务和属性的层级结构，主要用于LE profile服务发现中。
  * GAP：Generic Access Profile，表示所有蓝牙设备通用的基础功能，比如传输层、协议、应用所使用的模式或流程等。GAP服务包括设备和服务发现、连接模式、安全认证和关联模型等。
Controller部分中更多是逻辑链路和物理链路的管理，包括：
  * Device Manager：基带(baseband)中控制设备行为的模块，主要负责不与传输直接相关的部分，比如查询周围蓝牙设备，连接蓝牙设备，切换蓝牙设备的状态(discoverable/connectable)，以及修改蓝牙名称、属性等。
  * Link Manager：负责创建、修改和释放逻辑链路(logical links)以及对应的逻辑传输(logical transports)，并更新设备之间对应物理链路(physical links)的相关参数。在BR/EDR系统中，与对端的Link Manager通过LMP协议(Link Manager Protocol)进行通信；在BLE系统中则使用的是LL协议(Link Layer Protocol)。
  * Baseband Resource Manager：负责管理所有到射频媒介的访问。在链路层中，有两种类型的“连接”：
  * SCO：Synchronous Connection Orientated，实时窄带数据传输，如电话音频等，无重传
  * ACL：Asynchronous Connection-Less，异步无连接，用以其他所有数据的传输
  * Link Controller：负责对指定物理信道(逻辑链路和逻辑传输)的蓝牙数据进行编解码。
蓝牙核心系统的每个组件或协议都可以用独立的章节去介绍，整个结构的宏观理解对后面梳理蓝牙的攻击面是非常有必要的。从前面的图中我们可以看到，BR/EDR和BLE在链路层以下是相当不同的，前者为LM而后者为LL，下面分别进行介绍。
## BR/EDR
在传统蓝牙(即BR/EDR)中，2.4GHz的ISM频段分成 **79** 个频段，每个大小为 **1MHz** ，并使用特定的跳频模式(Hopping
Pattern)来决定一条物理信道，从而减少不同临近终端之间的射频干扰。BR/EDR使用点对点的主从模式，其中Master为确定跳频模式的一方，Slave为与Master时钟和跳频模式同步的其他端点。
传统蓝牙建立链路层连接主要经历两个阶段：Inquiry和Paging。
**Inquiry** 阶段，Master发送查询请求，周围(10米内)可被发现的设备(discoverable)收到请求后会发送查询响应(Inquiry
Response)。在查询过程中，因为与周围设备还未连接，因此它们很可能处于不同的信道(跳频序列)，实际上发送查询的设备会在不同的频率进行发送，而接收方(处于standby模式)则以更高地频率进行足够长时间的查询扫描(Inquiry
Scan)以确保能被正确唤起。查询响应中包含设备ID和时钟等信息。
**Paging**
阶段，主要解决的是链路层的连接问题。与Inquiry类似，此时各方同样没有进行时钟和频率的同步。Master与Slave的连接需要经过以下六步：
![
](https://images.seebug.org/content/images/2021/07/8d3996c4-7cfa-4d2f-9d79-914a3bc4f7ba.png-w331s)
连接状态的两个设备所处于的抽象网络称为`piconet`，这是一个星状网络，一个Master可以有最多七个Slave，但是Master本身也可以是其他piconet的Slave，这种网络拓扑称为`scatternet`。传统蓝牙处理链路层连接的管理器称为LM，即Link
Manager，两个LM之间通过LMP协议进行通信。
这只是链路层的连接，和我们平常所说的蓝牙 **配对**
(pairing)并不是一回事。Paging只是保证了在物理层链路的连通性，进行应用层的通信往往还需要经历两步：
  * 服务发现(Service Discovery)：用以确认对端所支持的服务
  * 服务连接(Service Connection)：使用某个对端设备特定的服务或者配置(Profile)
但是实际上在服务发现之前，蓝牙引入了一层安全性保障，确保双方是自愿连接的，沟通连接意愿的过程就称为配对。经过配对后的设备会分别记住对方，在下一次连接时就不需要进行重新配对，而是使用之前保存的连接秘钥(Link
Key)直接进行认证和连接：
蓝牙Spec中定义了 _legacy authentication_ 和 _secure authentication_
情况下的认证流程和状态。当两个设备没有共同的link key时，就需要使用 _pairing_ 流程来协商创建初始化秘钥Kinit。
关于配对流程的分析在后面会详细介绍。
  * 
  * 
## BLE
在BLE中，2.4GHz的ISM频段分成 **40** 个频段，每个大小为 **2MHz** ，其中3个信道为广播信道(advertising
channel)，其余37个为通用信道(general purpose channel)。BLE也支持对建立连接后的端点在通用信道中进行跳频通信。
> 各个信道的频率为: `f = 2402 + k * 2 MHz, k = 0, 1, ... , 39`
BLE链路层的状态机包括以下状态：
  * Standby State
  * Advertising State
  * Scanning State
  * Initiating State
  * Connection State
  * Synchronization State
  * Isochronous Broadcasting State
任一时刻只能处于其中的一种状态，有限状态机的转换过程如下：
![
](https://images.seebug.org/content/images/2021/07/80262574-3788-46a9-9db3-89700c94a7c0.png-w331s)
实际中的链路层的状态机不一定要实现上述完整的状态，但蓝牙标准中定义了一些相互依赖的状态组合，实现了其中一种就必须要实现另外一种。任何其他状态都可以直接进入Standby状态，而只有Advertising和Initiating状态才能进入Connection状态。Connection状态中连接的双方分别根据来源状态定义为：
  * Master Role：从Initiating状态进入
  * Slave Role：从Advertising状态进入
与传统蓝牙类似，一个Slave只能与一个Master进行连接。在BLE中，链路层数据包所包含的数据称为协议数据单元(PDU)，Advertising的三个物理信道包含Advertising
PDU、Scanning PDU和Initiating PDU，数据信道包含LL Data PDU和LL Control
PDU等，不同的PDU包含不同类型的Payload。当然这都是发生在双方Controller端的LL之间，Host端还是主要使用HCI协议对其进行封装，根据不同的场景我们可能需要专注某一端的的实现，比如对于蓝牙芯片固件的研究更多是对LL端的数据进行分析，其他情况下对于应用层或者开发者则更多地关注Host端的HCI、L2CAP、ATT等协议。
## Security
蓝牙的服务发现和调用不考虑安全性的话可以直接在同步完物理信道后直接进行应用层交互，但为了避免窃听和中间人等攻击，甚至是为了避免错误连接到其他同名设备，蓝牙服务也是必须要有安全性保障的。初次接触蓝牙Spec的人可能会对蓝牙连接和配对的概念比较困惑，因为蓝牙标准在不同版本中定义了不同的配对模型，而BR/EDR和BLE的配对过程又发生在不同的模块中。比如BR/EDR配对过程由双方
**Controller端** 的LM(Link Manager)使用LMP协议进行协商，而BLE的配对过程则主要通过 **Host端**
的协议栈(Security Manager)进行协商。
从时间线上来看，BR/EDR分为几个阶段：
  * 2.1之前：使用Legacy Pairing，后续版本中称为`BR/EDR legacy`
  * 2.1：使用 Secure Simple Pairing
  * 4.2：使用 Secure Connection
BLE也经历了几个阶段的变化：
  * 4.0和4.1：使用 Secure Simple Pairing，后续版本中称为`BLE legacy`
  * 4.2：使用 Secure Connection
_Legacy Pairing_ 使用双方输入或者固定的PIN CODE来进行认证，现在已经非常少见，因此可以不用关注。
_Secure Simple Pairing_ 的配对方式主要经过以下4步(以BR/EDR为例)：
  1. IO capabilities exchange：交换对方的特性，比如是否支持显示和键盘输入等，用以后续协商认证手段