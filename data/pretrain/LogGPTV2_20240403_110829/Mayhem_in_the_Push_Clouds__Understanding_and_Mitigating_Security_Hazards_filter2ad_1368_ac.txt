app’s capability to impersonate the target needs serious attention.
Consequences. We found that the gms itself uses upstream mes-
saging to notify Google whenever a Google account is added or
removed on a mobile device. This happens through broadcasting
an intent to the SEND action of gms itself. In our research, our
attack app intercepted this intent and the PendingIntent ob-
ject it carried, through which the attack app was able to directly
push messages to gms. Since Android Device Manager is also run-
ning in the same process, our app commanded it to wreak havoc.
Particularly, we show that Android’s anti-theft protection can be
used against the phone user: the Device Manager under our con-
trol ringed the phone, locked the legitimate user out of the system
and even erased the user’s data on the phone. Furthermore, since
gms bears the same signature as other system services, the Google
Play service in particular, our attack app was able to execute the
PendingIntent from gms to talk to the service’s GCM receiver
protected by the signature permission. Through the service, the at-
tack app silently installed new apps and uninstalled existing ones
without the user’s consent. The video demos of the attacks are on
a private website [15]. Again, we reported the problems to Google,
which has ﬁxed the issues.
4.2 Capability Exposure in Registration
Apps using C2DM/GCM template code. Starting from Android
Cloud to Device Messaging (C2DM), Google has provided tem-
plate code to help the app developers conveniently integrate its
push-messaging service into their apps. The code segment for ini-
tiating the registration process is presented in Figure 3. This code
is further recommended to the GCM users after C2DM was depre-
cated. As a result, many popular apps do not integrate the GCM
SDK google-play-service.jar, and instead directly use
this set of code to dispatch an intent to gms for invoking (startSe
rvice) its registration service. Prominent examples include Face-
book and UrbanAirship [16], a popular intermediary service that
enables developers to send messages to different mobile devices
(Android, iOS, Windows, etc.). Interestingly, different from what
happens through the SDK, which sets the recipient of the intent
to the package name of gms, the code here only speciﬁes the ac-
tion com.google.android.c2dm.intent.REGISTER, so
whoever deﬁnes this action is entitled to receive the intent mes-
sage. Apparently, this treatment can be useful for the transition
from C2DM to GCM: the new GCM service app only needs to
declare the action to work with the apps designed for C2DM. How-
ever, just like the broadcast channel, this type of service invocations
can be easily abused: an attack app only needs to specify the reg-
istration action and a high priority (above that of gms) to get the
intent and also prevent gms from receiving it.
Figure 3: Template Code
Again, though the registration intent itself does not carry any
conﬁdential information, its exposure leaks out the PendingInt-
ent object. Since this happens during the registration stage, the ad-
versary getting the token can cause an even bigger trouble. Speciﬁ-
cally, the target app’s registration ID can also be stolen by the attack
app through sending to gms a new registration intent with the tar-
get’s PendingIntent. In this way, our app essentially acts as
a man-in-the-middle (MitM) that receives the registration ID from
gms and hands it over to the target app through the broadcast opera-
tion included in its PendingIntent, as described before. More
seriously, our MitM can fabricate the registration ID given to the
target app, binding it to an attack device or an attack server. Fol-
lowing we elaborate these two attacks, using the Facebook app as
an example:
• Device misbinding. In this attack, the adversary requests from
GCM a registration ID for the Facebook app running on the attack
device, without sending the ID to the Facebook server.
Instead,
this ID is transmitted to the attack app on the victim’s device (the
target). During the registration of the Facebook app on the tar-
get device, the attack app intercepts its request and runs the stolen
PendingIntent to inject the adversary’s registration ID to the
victim’s app in the same way as the aforementioned attack (Sec-
tion 4.1), except that the attack app’s intent is aimed at the action
com.google.android.c2dm.intent.REGISTER this time.
Upon receiving the intent, the victim’s Facebook app considers the
registration ID received as a legitimate one from the connection
server, and therefore unwittingly uploads it to the Facebook server
Intent registrationIntent = new Intent("com. google.android.c2dm.intent.REGISTER"); registrationIntent.putExtra("app",  PendingIntent.getBroadcast(this, 0, new Intent(), 0)); registrationIntent.putExtra("sender", senderID); startService(registrationIntent); 983to link it to the victim’s account. As a result, all the victim’s Face-
book messages will go to the attack device. We implemented this
attack and successfully executed it on our Nexus 7 tablet.
• Server misbinding. As discussed before, the GCM and other
clouds (e.g., ADM, mpCloud, etc.) only allow the app server with
an authorized sender ID to push messages to the apps with related
registration IDs. Here we show that even this protection can be
completely circumvented once the PendingIntent object is ex-
posed during the target app’s registration. The trick here is to gen-
erate a registration ID bound to the attack server. Speciﬁcally, the
attack app ﬁrst intercepts the registration request from the victim’s
Facebook app and serves as an MitM. It can then set the sender
ID within the registration request it generates to that of the at-
tack server. Based on this request, the registration ID the GCM
cloud generates becomes linked to the attack server. After inject-
ing this registration ID to the victim’s Facebook app, the adversary
can push messages to the app remotely, as the app’s registration
ID is tied to the attack server. This attack was implemented and
evaluated in our research, which was found to work effectively on
popular apps, like Facebook messenger.
This problem affects many popular apps according to our study
(Section 5). We reported our ﬁndings to Google, Facebook and Ur-
banAirship. Google further notiﬁed other parties. In recognition of
the importance of the ﬁndings, UrbanAirship planned to formally
acknowledge us in their release notes and Facebook awarded us
$2000.
Amazon Device Messaging. Amazon Device Messaging (ADM)
is a push-messaging service Amazon uses to support its popular
Kindle Fire device, which accounts for about one third of the An-
droid tablet market according to a recent report [10]. ADM has a
registration process similar to that of GCM: a service-subscribing
app sends a registration request to the Amazon service app (com.
amazon.device.messaging) on the same device, which con-
tacts the ADM cloud to get a registration ID for the app. Like GCM,
this ID is tied to a speciﬁc app server: only this server is allowed to
push messages to the app with the ID.
In our research, we analyzed the code of the Amazon SDK com
.amazon.device.messaging.ADM. It turns out that the SDK
behaves just like the Facebook app during the app registration phase:
it issues a start-service intent to any recipient that declares an action
com.amazon.device.messaging.intent.REGISTER;
also the intent contains a PendingIntent object for the ADM
service app to identify the sender of the intent. Therefore, an attack
app with the action and a higher priority in receiving messages can
intercept the intent and steal the PendingIntent. Consequently,
the adversary can launch the aforementioned device-misbinding at-
tack to link the target app’s registration ID to an attack device, caus-
ing all messages for the the app to go to the attack device.
The server-misbinding attack, however, does not work on ADM,
because the ADM service app directly gets the sender ID (of the
app server) from the target app, not from the registration intent
as gms does. This thwarts the attempts to inject messages to the
target app remotely, given that a registration ID inconsistent with
a server’s sender ID cannot be used to push messages to the app
from the server through the Amazon cloud. On the other hand, the
local-injection attack is still effective: our attack app was able to
deliver messages to the target app through executing the broadcast
operation on its PendingIntent (Section 4.1). We reported the
ﬂaws to Amazon and are helping them to ﬁx those issues.
4.3 Other Exploits
In addition to the problems with PendingIntent, our research
on the on-device link also reveals other weaknesses. Speciﬁcally,
Categories
Type
SOCIAL
GCM
COMMUNICATION
GCM
FINANCE
GCM
SHOPPING
GCM
PRODUCTIVITY
GCM
HEALTH & FITNESS
GCM
ENTERTAINMENT
GCM
BUSINESS
GCM
GCM
OTHER
mpCloud SOCIAL
UA
UA
ADM
ADM
ADM
TOTAL
SHOPPING
LIFESTYLE
SOCIAL
EDUCATION
COMMUNICATION
# of tested apps
17/25 (68%)
9/13(69%)
4/11 (36%)
5/9 (56%)
3/5 (60%)
3/3 (100%)
2/17 (12%)
1/3 (33%)
9/30 (30%)
3/3 (100%)
1/1 (100%)
2/2 (100%)
2/2 (100%)
1/1 (100%)
1/1 (100%)
63/126(50%)
# of leak
13/17 (76%)
3/9 (33%)
3/4 (75%)
2/5 (40%)
1/3 (33%)
1/3 (33%)
1/2 (50%)
1/1 (100%)
0/9 (0%)
3/3 (100%)
1/1 (100%)
0/2 (0%)
0/2 (0%)
1/1 (100%)
1/1 (100%)
28/63(44%)
Table 1: Summary of Measurement Study
we analyzed the code of the mpCloud SDK and found that the pro-
cess it runs to receive messages from the cloud actually delivers
them to the target app through an intent broadcast targeting at an
action. This allows an attack app to easily intercept those messages.
Also, instead of declaring the receiver of the intent statically within
the app’s manifest ﬁle, the SDK actually dynamically deﬁnes the
receiver during the app’s runtime, which makes the receiver public.
And the app does not take extra measures to guard it either. As a
result, the receiver has been made public and any app can send mes-
sages to it. We implemented an end-to-end attack that successfully
exploited those ﬂaws. Our ﬁndings were reported to mpCloud.
5. MEASUREMENT STUDY ON VULNER-
ABLE APPS
To understand the impacts of the problems discovered in our re-
search, we analyzed popular Android apps to study their individ-
ual vulnerabilities and the consequences once those ﬂaws are ex-
ploited. Here we report what we found.
App collection. We downloaded 599 top free apps from the Google
Play store. From their manifest ﬁles, 255 were found to use GCM.
Also we collected from the Google Play store 3 apps subscrib-
ing mpCloud and 4 apps subscribing ADM. For the 255 GCM-
subscribing apps, we picked out those among the top 125 and also
within the categories of SOCIAL, COMMUNICATION, SHOP-
PING, FINANCE and HEALTH, and further manually added a few
well-known apps with a large number of downloads (more than 10
million) but did not make to the top 125 list, such as Google plus,
YouTube, Dropbox, and 3 apps subscribing UrbanAirship (UA).
All together, 63 apps, including those using GCM, ADM and mp-
Cloud, were inspected in our study.
Table 1 summarizes the number of apps studied and their re-
sults in each category, and Table 3 provides examples of vulnera-
ble apps, including their ranking/download information. Note that
for the apps in some categories, particularly FINANCE, we need
an account with related organizations to study their functionalities.
Under this constraint, we had to only work on those accessible to
us. For example, in the FINANCE category, we checked the apps
from Chase bank, Bank of America, PayPal and Google Wallet.
Vulnerabilities. For each of those 63 apps, we installed it on
our devices and monitored their operations using the ADB Log-
Cat tool [1], which recorded all the messages the app got from its
cloud. This logging was done on rooted phones, through setting the
"log.tag.GTalkService" property of its Google Play service (which
makes the service log all the GCM messages it gets) and modify-
ing related APIs for the ADM service. Note that all such messages
984Category
COMMUNICATION
COMMUNICATION
SOCIAL
SOCIAL
SOCIAL
SOCIAL
SOCIAL
SOCIAL
FINANCE
App name
Facebook Messenger
Glide - Video Texting
Instagram
Twitter
Vine
textPlus Free Text + Calls
LinkedIn
Google+
Chase Mobile
Rank
3
55
4
15
40
98
125
331
78
# of download
100,000,000+
5,000,000+
100,000,000+
100,000,000+
10,000,000+
10,000,000+
10,000,000+
500,000,000+
10,000,000+
FINANCE
Bank of America
82
10,000,000+
FINANCE
HEALTH & FITNESS
SHOPPING
PayPal
Calorie Counter - MyFitnessPal
eBay
ENTERTAINMENT
Find My Phone
141
112