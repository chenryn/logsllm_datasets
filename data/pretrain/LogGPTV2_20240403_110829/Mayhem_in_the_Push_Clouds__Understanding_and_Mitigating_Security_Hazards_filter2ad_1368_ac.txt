### App's Capability to Impersonate the Target Requires Serious Attention

#### Consequences
Our research revealed that Google Mobile Services (GMS) uses upstream messaging to notify Google whenever a Google account is added or removed on a mobile device. This notification is sent via an intent broadcast to the `SEND` action of GMS itself. In our study, we found that an attack app could intercept this intent and the associated `PendingIntent` object, allowing it to directly push messages to GMS. Since Android Device Manager (ADM) runs in the same process, the attack app could command ADM to perform malicious actions. Specifically, we demonstrated that Android’s anti-theft protection could be used against the phone user: the ADM under our control could ring the phone, lock out the legitimate user, and even erase the user’s data. Additionally, because GMS shares the same signature as other system services, particularly Google Play services, the attack app could execute the `PendingIntent` to communicate with the service’s GCM receiver, which is protected by signature permissions. Through this service, the attack app could silently install new apps and uninstall existing ones without the user’s consent. We have provided video demonstrations of these attacks on a private website [15]. We reported these issues to Google, which has since fixed them.

### Capability Exposure in Registration

#### Apps Using C2DM/GCM Template Code
Starting from Android Cloud to Device Messaging (C2DM), Google provided template code to help developers integrate its push-messaging service into their apps. The code segment for initiating the registration process is shown in Figure 3. This code was further recommended to GCM users after C2DM was deprecated. As a result, many popular apps, such as Facebook and UrbanAirship [16], do not integrate the GCM SDK (`google-play-service.jar`) but instead use this template code to dispatch an intent to GMS to invoke its registration service. Unlike the SDK, which sets the recipient of the intent to the package name of GMS, this code only specifies the action `com.google.android.c2dm.intent.REGISTER`. Consequently, any app that defines this action can receive the intent message. This approach facilitates the transition from C2DM to GCM, as the new GCM service app only needs to declare the action to work with C2DM-designed apps. However, this method can be easily abused: an attack app only needs to specify the registration action and a high priority (above that of GMS) to intercept the intent and prevent GMS from receiving it.

**Figure 3: Template Code**
```java
Intent registrationIntent = new Intent("com.google.android.c2dm.intent.REGISTER");
registrationIntent.putExtra("app", PendingIntent.getBroadcast(this, 0, new Intent(), 0));
registrationIntent.putExtra("sender", senderID);
startService(registrationIntent);
```

Although the registration intent itself does not carry confidential information, its exposure leaks the `PendingIntent` object. During the registration stage, an adversary obtaining the token can cause significant problems. Specifically, the target app’s registration ID can be stolen by the attack app through sending a new registration intent with the target’s `PendingIntent`. In this way, the attack app acts as a man-in-the-middle (MitM) that receives the registration ID from GMS and hands it over to the target app through the broadcast operation included in its `PendingIntent`. More seriously, the MitM can fabricate the registration ID given to the target app, binding it to an attack device or server. We elaborate on these two attacks using the Facebook app as an example:

- **Device Misbinding**: The adversary requests a registration ID for the Facebook app running on the attack device, without sending the ID to the Facebook server. Instead, this ID is transmitted to the attack app on the victim’s device. During the registration of the Facebook app on the target device, the attack app intercepts the request and runs the stolen `PendingIntent` to inject the adversary’s registration ID into the victim’s app. The victim’s Facebook app considers the received registration ID as legitimate and uploads it to the Facebook server, linking it to the victim’s account. As a result, all the victim’s Facebook messages will go to the attack device. We implemented and successfully executed this attack on a Nexus 7 tablet.
  
- **Server Misbinding**: The GCM and other cloud services (e.g., ADM, mpCloud) only allow the app server with an authorized sender ID to push messages to the apps with related registration IDs. If the `PendingIntent` object is exposed during the target app’s registration, this protection can be circumvented. The attack app first intercepts the registration request from the victim’s Facebook app and serves as an MitM. It then sets the sender ID within the registration request to that of the attack server. Based on this request, the GCM cloud generates a registration ID linked to the attack server. After injecting this registration ID into the victim’s Facebook app, the adversary can push messages to the app remotely, as the app’s registration ID is tied to the attack server. We implemented and evaluated this attack, finding it effective on popular apps like Facebook Messenger.

We reported these findings to Google, Facebook, and UrbanAirship. Google further notified other parties. In recognition of the importance of our findings, UrbanAirship planned to formally acknowledge us in their release notes, and Facebook awarded us $2000.

### Amazon Device Messaging (ADM)

Amazon Device Messaging (ADM) is a push-messaging service used to support the popular Kindle Fire device, which accounts for about one-third of the Android tablet market [10]. ADM’s registration process is similar to GCM: a service-subscribing app sends a registration request to the Amazon service app (`com.amazon.device.messaging`), which contacts the ADM cloud to get a registration ID for the app. Like GCM, this ID is tied to a specific app server, and only this server is allowed to push messages to the app with the ID.

In our research, we analyzed the code of the Amazon SDK `com.amazon.device.messaging.ADM` and found that it behaves similarly to the Facebook app during the app registration phase: it issues a start-service intent to any recipient that declares the action `com.amazon.device.messaging.intent.REGISTER`, and the intent contains a `PendingIntent` object for the ADM service app to identify the sender. Therefore, an attack app with the action and a higher priority can intercept the intent and steal the `PendingIntent`. Consequently, the adversary can launch a device-misbinding attack to link the target app’s registration ID to an attack device, causing all messages for the app to go to the attack device.

However, the server-misbinding attack does not work on ADM because the ADM service app directly gets the sender ID from the target app, not from the registration intent as GMS does. This prevents the injection of messages to the target app remotely, as a registration ID inconsistent with a server’s sender ID cannot be used to push messages to the app from the server through the Amazon cloud. On the other hand, the local-injection attack is still effective: our attack app was able to deliver messages to the target app through executing the broadcast operation on its `PendingIntent` (Section 4.1). We reported these flaws to Amazon and are assisting them in fixing the issues.

### Other Exploits

In addition to the problems with `PendingIntent`, our research on the on-device link reveals other weaknesses. Specifically, we analyzed the code of the mpCloud SDK and found that the process it runs to receive messages from the cloud actually delivers them to the target app through an intent broadcast targeting an action. This allows an attack app to easily intercept those messages. Instead of declaring the receiver of the intent statically within the app’s manifest file, the SDK dynamically defines the receiver during the app’s runtime, making the receiver public. The app does not take extra measures to guard it either. As a result, the receiver is public, and any app can send messages to it. We implemented an end-to-end attack that successfully exploited these flaws. Our findings were reported to mpCloud.

### Measurement Study on Vulnerable Apps

To understand the impact of the discovered problems, we analyzed popular Android apps to study their individual vulnerabilities and the consequences if these flaws are exploited. Here are our findings:

#### App Collection
We downloaded 599 top free apps from the Google Play store. From their manifest files, 255 were found to use GCM. We also collected 3 apps subscribing to mpCloud and 4 apps subscribing to ADM. For the 255 GCM-subscribing apps, we selected those among the top 125 and within the categories of SOCIAL, COMMUNICATION, SHOPPING, FINANCE, and HEALTH. We manually added a few well-known apps with more than 10 million downloads but not in the top 125 list, such as Google Plus, YouTube, Dropbox, and 3 apps subscribing to UrbanAirship (UA). In total, 63 apps, including those using GCM, ADM, and mpCloud, were inspected in our study.

**Table 1: Summary of Measurement Study**

| Category | Type | # of Tested Apps | # of Leaks |
|----------|------|------------------|------------|
| SOCIAL | GCM | 17/25 (68%) | 13/17 (76%) |
| COMMUNICATION | GCM | 9/13 (69%) | 3/9 (33%) |
| FINANCE | GCM | 4/11 (36%) | 3/4 (75%) |
| SHOPPING | GCM | 5/9 (56%) | 2/5 (40%) |
| PRODUCTIVITY | GCM | 3/5 (60%) | 1/3 (33%) |
| HEALTH & FITNESS | GCM | 3/3 (100%) | 1/3 (33%) |
| ENTERTAINMENT | GCM | 2/17 (12%) | 1/2 (50%) |
| BUSINESS | GCM | 1/3 (33%) | 1/1 (100%) |
| OTHER | mpCloud | 9/30 (30%) | 0/9 (0%) |
| TOTAL | - | 63/126 (50%) | 28/63 (44%) |

**Table 2: Examples of Vulnerable Apps**

| Category | App Name | Rank | # of Downloads |
|----------|----------|------|----------------|
| COMMUNICATION | Facebook Messenger | 3 | 100,000,000+ |
| COMMUNICATION | Glide - Video Texting | 55 | 5,000,000+ |
| SOCIAL | Instagram | 4 | 100,000,000+ |
| SOCIAL | Twitter | 15 | 100,000,000+ |
| SOCIAL | Vine | 40 | 10,000,000+ |
| SOCIAL | textPlus Free Text + Calls | 98 | 10,000,000+ |
| SOCIAL | LinkedIn | 125 | 10,000,000+ |
| SOCIAL | Google+ | 331 | 500,000,000+ |
| FINANCE | Chase Mobile | 78 | 10,000,000+ |
| FINANCE | Bank of America | 82 | 10,000,000+ |
| HEALTH & FITNESS | Calorie Counter - MyFitnessPal | 141 | 10,000,000+ |
| SHOPPING | eBay | 112 | 10,000,000+ |
| ENTERTAINMENT | Find My Phone | 112 | 10,000,000+ |

#### Vulnerabilities
For each of the 63 apps, we installed it on our devices and monitored their operations using the ADB LogCat tool [1], which recorded all the messages the app received from its cloud. This logging was done on rooted phones by setting the `log.tag.GTalkService` property of the Google Play service and modifying related APIs for the ADM service. Note that all such messages were logged to ensure comprehensive monitoring.