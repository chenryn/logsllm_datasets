---
author: Stephen Snow
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 6506
date: '2020-07-19 11:04:00'
editorchoice: true
excerpt: 这篇文章中，我们会讨论一些比较推荐的 Bash 字符界面的点文件配置。
fromurl: https://fedoramagazine.org/customizing-bash/
id: 12429
islctt: true
largepic: /data/attachment/album/202007/19/110018bl392bj3g3g41a23.jpg
permalink: /article-12429-1.html
pic: /data/attachment/album/202007/19/110018bl392bj3g3g41a23.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 这篇文章中，我们会讨论一些比较推荐的 Bash 字符界面的点文件配置。
tags:
- Bash
- 点文件
thumb: false
title: 深入了解定制 Bash
titlepic: true
translator: nophDog
updated: '2020-07-19 11:04:00'
---
![](/data/attachment/album/202007/19/110018bl392bj3g3g41a23.jpg)
操作系统的最外层 —— 也就是跟你直接打交道的 —— 叫做 [shell](https://en.wikipedia.org/wiki/Shell_(computing))（“外壳”）。Fedora 预装了好几种不同的 shell。shell 可以是图形界面，或者字符界面。在文档中，你常常能见到两个母缩写词 GUI （ 图形用户界面   Graphical User Interface ）跟 CLI（ 命令行界面   Command-Line Interface ），它们用来区分图形和基于字符的 shell/界面。[GNOME](https://en.wikipedia.org/wiki/GNOME) 和 [Bash](https://en.wikipedia.org/wiki/Bash_(Unix_shell)) 分别是 Fedora 默认的图形和命令行界面，不过你也可以使用其它 [GUI](https://fedoramagazine.org/fedoras-gaggle-of-desktops/) 或者 [CLI](https://en.wikipedia.org/wiki/Comparison_of_command_shells) shell。
接下来在这篇文章中，我们会讨论一些比较推荐的 Bash 字符界面的点文件配置。
### Bash 概览
Bash 参考手册中写道：
> 
> 根本上来说，shell 只是一个能执行命令的宏处理器。宏处理器这个词意味着通过扩展文本跟符号，从而构成更复杂的表达式。
> 
> 
> **Bash 参考手册** **第五版，Bash 5.0** **2019 年 5 月**
> 
> 
> 
除了能使用其它程序之外，Bash shell 还含有一些内置命令和关键字。Bash 内置功能很强大，甚至能够作为一门 [高级语言](https://en.wikipedia.org/wiki/High-level_programming_language) 独当一面。Bash 的几个关键字和操作符类似于 [C 语言](https://en.wikipedia.org/wiki/C_(programming_language))。
Bash 能够以交互式或非交互式模式启动。Bash 的交互模式是一个很多人都熟悉的典型的终端/命令行界面。[GNOME 终端](https://en.wikipedia.org/wiki/GNOME_Terminal) 默认以交互模式打开 Bash。Bash 在非交互模式下运行的例子是，当命令和数据从文件或 shell 脚本通过 [管道](https://en.wikipedia.org/wiki/Pipeline_(Unix)) 传送到 Bash 时。其它 Bash 可以运行的模式包括： 登录   login 、 非登录   non-login 、 远程   remote 、POSIX、Unix sh、 受限   restricted ，以及使用与用户不同的 UID/GID 模式。各种模式是可以相互组合的。比如，交互式 + 受限 + POSIX 或者非交互式 + 非登录 + 远程。不同的启动模式，决定着 Bash 所读取的启动文件。理解这些操作模式，有助于帮助我们修改启动文件。
根据 Bash 参考手册，它会：
> 
> 1. 从文件中...、从作为 `-c` 调用选项传入参数的字符...，或者从用户的终端中读取输入。
> 2. 将输入分解成单词和操作符，遵循 [它的] 引用规则。...这些标记使用元字符隔开。这一步执行别名展开。
> 3. 将标记解析成简单与复合命令。
> 4. 执行各种 shell 展开...，将展开之后的标记分解成文件名...以及命令和参数的列表。
> 5. 执行必要的重定向...并从参数列表中去除重定向操作符及其操作数。
> 6. 执行命令。
> 7. 必要时等待命令完成，并收集退出状态。
> 
> 
> **Bash 参考文档** **第五版，Bash 版本 5.0** **2019 年 5 月**
> 
> 
> 
当用户开启终端模拟器进入命令行环境时，便启动了一次交互式 shell 会话。GNOME 终端默认以非登录模式为用户打开 Shell。你可以在 “ 编辑 → 首选项 → 配置文件 → 命令   Edit → Preferences → Profilles → Command ” 中配置 GNOME 终端以何种模式（登录与非登录式）启动。也可以在 Bash 启动时通过向其传递 `-login` 标志来要求进入登录模式。要注意一点，Bash 的登录模式与非交互模式并不互斥。可以让 Bash 同时以登录模式和非交互模式运行。
### 启动 Bash
除非传入 `-noprofile` 选项，否则登录模式的 Bash shell 会默认读取并执行某些初始化文件中命令。如果 `/etc/profile` 存在，它会是第一个被执行的文件，紧接着是按 `~/.bash_profile`、`~/.bash_login` 或 `~/.profile`顺序找到的第一个文件。当用户退出登录模式的 shell 时，或者有脚本在非交互式登录模式的 shell 中调用了内置 `exit`命令，Bash 会读取并执行 `~/.bash_logout` 中的命令，如果 `/etc/bash_logout` 存在的话，会紧接着执行它。通常来说，`/etc/profile` 会 援引   source  `/etc/bashrc` 文件，读取并执行其中的命令，然后查找并读取执行 `/etc/profile.d` 目录中以 `.sh` 结尾的文件。同样的，`~/.bash_profile` 通常也会 援引   source  `~/.bashrc` 文件。`/etc/bashrc` 和 `~/.bashrc` 都会进行检查，避免重复 援引   source 。
（LCTT 译注：在 Bash 中，脚本会通过 `source` 或 `.` 命令来将另外一个脚本引入其中，这个行为称之为 “source”、“sourcing”，但是该行为一直没有公认且常用的翻译方法。经过多番斟酌，我认为可以译做“援引”，理由如下：1、“援引”具有“引用、引入”的意思，符合该行为；2、“援”这个词的发音和“source” 常见的汉语意思“源”同音，便于记忆。以上是我们的愚见，供大家参考讨论。—— 老王，2020/7/19）
一个交互式的 shell，如果不是登录 shell，那么当它第一次被调用的时候，会执行 `~/.bashrc` 文件。这是用户在 Fedora 上打开终端时通常会进入的 shell 类型。当 Bash 以非交互模式启动 —— 就像运行脚本时那样 —— 它会寻找 `BASH_ENV`环境变量。如果找到了，就会展开它的值作为文件名，接着读取并执行该文件。效果跟执行以下命令相同：
```
if [ -n "$BASH_ENV" ]; then . "$BASH_ENV"; fi
```
值得注意的是，不会使用 `PATH` 环境变量的值来搜索该文件名（LCTT 译注：意即不会检索搜索路径）。
### 重要的用户点文件
Bash 最广为人知的用户点文件是 `~/.bashrc`。通过编辑该文件，可以设置大多数个性化选项。由于我们常常需要设置一些选项，会改动上面提及甚至没有提及的文件，所以大部分自定义选项会成为一个麻烦事。Bash 环境具有很高的可定制性，正是为了适应不同用户的不同需求。
![](/data/attachment/album/202007/19/110445g5z2rorc3ww353bo.png)
当登录 shell 正常退出时，如果 `~/.bash_logout` 和 `/etc/bash_logout` 存在，它们会被调用。下一幅图展示了 Bash 作为交互式 shell 启动时的过程。例如，当用户从桌面环境打开终端模拟器时，会按照以下顺序进行。
![](/data/attachment/album/202007/19/110446i6mynysngyinoz5y.png)
我们已经知道，在不同的启动模式下，Bash 会执行不同的命令，所以很明显，只有几种最需要关注的典型启动模式。分别是非交互、交互式登录 shell，和非交互式、交互式非登录 shell。如果想定义某些全局环境，那么需要将一个具有唯一名称、以 `.sh` 为后缀的文件（例如 `custom.sh`）放置在 `/etc/profile.d` 目录。
对于非交互式非登录启动方式，需要特别注意。在这种模式下，Bash 会检查 `BASH_ENV` 变量。如果定义了该变量，Bash 会援引它所指向的文件。另外，处理 `BASH_ENV` 时并不会使用 `PATH` 变量所存储的值（LCTT 译注：意即不会检索搜索路径），所以它必须包含执行文件的绝对路径。比如说，如果有人希望非交互式执行脚本时，shell 能读取 `~/.bashrc` 文件中的设置，那么他可以把类似下面这样的内容放在一个名为 `/etc/profile.d/custom.sh` 的文件中...
```
# custom.sh
.
.
.
# 如果使用 Fedora Workstation
BASH_ENV="/home/username/.bashrc"
.
.
.
# 如果使用 Fedora Silverblue Workstation
BASH_ENV="/var/home/username/.bashrc"
export BASH_ENV
```
上面这份脚本会让每个 shell 脚本在运行之前先执行该用户的 `~/.bashrc`。
用户一般都会自定义他们的系统环境，以便契合他们自己的工作习惯与偏好。举例来说，用户可以通过别名来实现这种程度的自定义。拥有相同起始参数、需要频繁使用的命令是制作别名的最佳选择。以下展示了一些来自 `~/.bashrc` 文件中定义的别名。
```
# .bashrc
# 执行全局文件
if [ -f /etc/bashrc ];
   then . /etc/bashrc
fi
.
.
.
# 用户别名和函数
alias ls='ls -hF --color=auto'
alias la='ls -ahF --color=auto'
# 让 dir 命令用起来像在 Windows 那样
alias dir='ls --color=auto --format=long'
# 用颜色高亮 grep 结果
alias grep='grep --color=auto'
```
在系统中，别名是一种自定义各种命令的方法。它能减少击键次数，而且让命令用起来更方便。针对用户级别的别名通常存放在该用户的 `~/.bashrc` 文件中。
如果你发现自己经常要去历史中查找曾经执行过的某条命令，那可能需要改改历史设置了。你依然可以在 `~/.bashrc` 文件中设置针对用户级别的历史选项。比如说，如习惯同时使用多个终端，那你可能要启用 `histappend` 选项。某些 Bash 相关的 shell 选项本质上是布尔值（接收 `on` 或 `off`），通常可以用内置命令 `shopt` 启用或禁用。接收更复杂的值的 Bash 选项（如 `HISTTIMEFORMAT`），常常通过赋值给环境变量来达到配置目的。以下演示如何以 shell 选项和环境变量定制 Bash。
```