(cid:1)
Notice that for each class C ∈ Pgo (resp. C ∈ Pge)
there is a corresponding class C2 ∈ Plo (C2 ∈ Pgo) such
that C2 = {s2| (s1, s2, s3) ∈ C}. On the other hand, given
s1 and s3 and a class C2 ∈ Plo (C2 ∈ Ple), there is a
corresponding class C ∈ Pgo (C ∈ Pge) such that C =
{(s1, s2, s3)| s2 ∈ C2}.
2∈S2
(cid:1)
s
n3∈N3
2∈S2
(cid:1)
s
n3∈N3
(cid:6)
(cid:6)
(cid:6)
(cid:6)
(cid:6)
(cid:6)
(cid:6)
(cid:6)
2∈C2
(cid:1)
s
n3∈N3
2∈C2
(cid:1)
s
n3∈N3
In Theorems 3 and 4, we prove that ≈go and ≈ge equiv-
alence relations satisfy the ordinary and exact lumpability
conditions on an MD, respectively. That implies that the set
of conditions on the matrices and rewards of one level of an
MD given by ≈lo and extended to the complete MD by ≈go
implies ordinary lumpability on the MD (similarly ≈le and
≈ge for exact lumpability).
Theorem 3. (S, Q, r, πini) isordinarilylumpablewithre-
spect to partition Pgo (and its corresponding equivalence
relation≈go).
Proof. Based on Theorem 1, we need to prove:
∀ s ≈go ˆs :
and
g(f1(s1), f2(s2), f3(s3)) =
g(f1(ˆs1), f2(ˆs2), f3(ˆs3))
∀ C ∈ P : R(s, C) = R(ˆs, C)
(6)
(7)
(8)
Consider two states s = (s1, s2, s3) ≈go ˆs = (ˆs1, ˆs2, ˆs3).
By Deﬁnition 4, we have s1 = ˆs1 and s3 = ˆs3, and by
Deﬁnition 3, we know that f2(s2) = f2(ˆs2). Therefore, (6)
holds. To prove (8), we transform the left-hand side of the
equality to its right-hand side, as follows:
(cid:6)
rn2,n3(s2, s
(cid:3)
2)Rn3(s3, s
(cid:3)
3)
(cid:6)
(cid:6)
(cid:6)
(cid:6)
(cid:6)
(cid:6)
(cid:6)
n2∈N2
(cid:6)
n2∈N2
R(s, C) =
R(s, s
(cid:3)) =
s(cid:1)∈C
r1,n2(s1, s
(cid:3)
1)
(cid:6)
(cid:6)
s(cid:1)∈C
n2∈N2
2∈C2
(cid:1)
s
n2∈N2
n3∈N3
(by Deﬁnition 4) =
r1,n2(s1, s
(cid:3)
1)
rn2,n3(s2, s
n3∈N3
(moving the sums) =
(cid:6)
(cid:7)
(cid:6)
(cid:7)
r1,n2(s1, s
(cid:3)
1)
rn2,n3(s2, s
2∈C2
(cid:1)
s
n3∈N3
r1,n2(s1, s
A
(A = B by Prop. (1)) =
(cid:3)
1)
rn2,n3(ˆs2, s
2∈C2
(cid:1)
s
n3∈N3
(cid:8)(cid:9)
(cid:8)(cid:9)
B
(cid:6)
(cid:3)
2)Rn3(s3, s
(cid:3)
3)
(cid:3)
2)Rn3(s3, s
(cid:3)
2)Rn3(s3, s
(cid:3)
3)
(cid:10)
(cid:3)
3)
(cid:10)
(reverse argument) =
R(ˆs, s
(cid:3)) = R(ˆs, C)
s(cid:1)∈C
(cid:1)
Theorem 4. (S, Q, r, πini) is exactly lumpable with re-
spect to partition Pge (and its corresponding equivalence
relation≈ge).
Proof. Based on Theorem 1, we need to prove:
∀ s ≈ge ˆs :
and
and
gπ(fπ,1(s1), fπ,2(s2), fπ,3(s3)) =
gπ(fπ,1(ˆs1), fπ,2(ˆs2), fπ,3(ˆs3))
R(s,S) = R(ˆs,S)
∀ C ∈ P : R(C, s) = R(C, ˆs)
(9)
(10)
(11)
5
Equalities (9) and (11) can respectively be proved much like
(6) and (8) in Theorem 3. To prove (10), we use the same
approach that we used in the proof of Theorem 3, but re-
place C with S. In particular,
(cid:3)) =
(cid:6)
R(s,S) =
(cid:11)
(cid:6)
(cid:6)
(cid:6)
R(s, s
n2∈N2
3)∈S
(cid:1)
(cid:1)
(cid:1)
(s
2,s
1,s
(cid:3)
2)Rn3(s3, s
rn2,n3(s2, s
r1,n2(s1, s
s(cid:1)∈S
(cid:12)
(cid:3)
1)
(cid:3)
3)
(cid:6)
(cid:6)
n3∈N3
(moving the sums) =
3∈S3
(cid:1)
s
2∈S2
(cid:1)
s
n3∈N3
(A = B by Prop. (1)) =
(cid:6)
(cid:6)
(cid:6)
(cid:7)
(cid:6)
(cid:7)
(cid:6)
(cid:6)
r1,n2(s1, s
1∈S1
(cid:1)
s
n2∈N2
(cid:3)
2)Rn3(s3, s
rn2,n3(s2, s
(cid:8)(cid:9)
(cid:6)
A
(cid:6)
(cid:3)
1)
(cid:3)
3)
(cid:10)
r1,n2(ˆs1, s
(cid:3)
1)
1∈S1
(cid:1)
s
n2∈N2
rn2,n3(ˆs2, s
(cid:3)
2) Rn3(ˆs3, s
(cid:8)(cid:9)
(cid:6)
B
(cid:3)
3)
(cid:10)
(cid:3)) = R(ˆs,S)
3∈S3
(cid:1)
s
2∈S2
(cid:1)
s
n3∈N3
(reverse argument) =
R(ˆs, s
s(cid:1)∈S
(cid:1)
Theorems 3 and 4 ensure the lumpability of an MRP
given a set of sufﬁcient conditions on the lumpability of the
matrices of a speciﬁc level of the corresponding MD. The
next natural question is how to efﬁciently compute the local
lumpable partition Plo or Ple that satisﬁes the conditions in
those theorems. That question is answered in the following
section.
4 Compositional Lumping Algorithm
We now know, by Theorems 3 and 4, that given a relation
≈lo (≈le) on the states of one level, MRP M is ordinarily
(exactly) lumpable with respect to ≈go (≈ge), which was
derived from ≈lo (≈le). Therefore, the problem of lumping
M is reduced to the computation of ≈lo (≈le). This section
describes an algorithm to compute those relations. Given
an MD with its associated rewards and initial probability
distribution vectors, we run the algorithm for all levels of
the MD, once for each level, to obtain a lumped MRP.
The algorithm we develop is based on the lumping algo-
rithm given in [9]. In [9], an efﬁcient algorithm based on the
partition reﬁnement approach is presented for computing
the optimal (i.e., coarsest) equivalence relation that gives
an ordinary lumping on a CTMC. In this paper, we extend
that algorithm in two ways: (1) to support exact lumpability
and (2) to support conditions given in Deﬁnition 3 instead
of Deﬁnition 2, as in [9]. The two extensions give us the
machinery we need to compute ≈lo and ≈le.
Extension to Exact Lumpability. Figure 1 shows the
pseudocode for the partition reﬁnement-based lumping al-
gorithm of [9], with the modiﬁcations necessary for our
purpose.
In particular, (1) without concerning ourselves
with the implementation as in [9], we have rewritten the
algorithm to make it easier to understand, especially when
we make the above extensions; and (2) we support ordi-
nary and exact lumpability by using the function K in the
LUMP and COMPLUMPING procedures and by choosing the
appropriate value for the initial partition P ini. The ways
we choose the appropriate K and compute P ini will be ex-
plained shortly. Detailed information regarding the correct-
ness of LUMP and its running time analysis can be found in
[9].
(cid:3)
(cid:3)
At the highest level, the LUMP procedure uses COM-
PLUMPING to compute the coarsest lumpable partition for
the CTMC represented by state transition rate matrix R
and state space S starting with initial partition P ini. It then
builds, according to Theorem 2, the state transition rate ma-
trix of the lumped CTMC in lines 3 and 4 for ordinary lump-
ing and in lines 3
The main idea of COMPLUMPING is that a given ini-
tial partition P ini is reﬁned repeatedly (lines 3-6) until the
lumpability conditions are satisﬁed. That is done by reﬁn-
ing partition P (initialized to P ini in line 1) with respect
to a set of potential splitters L. For each splitter C ∈ L,
K(R, s, C) is computed for each state s ∈ S and stored in
vector element sum(s). Then, SPLIT partitions each class
C ∈ P into subclasses according to vector sum.
for exact lumping.
and 4
Function K is the key to generalizing this algorithm. Its
arguments are respectively the state transition rate matrix,
a state index, and a set of state indices. By choosing K
appropriately, we can customize the algorithm to compute
partitions that satisfy a set of desired conditions. The range
of K can be any arbitrary “data type”2 T on which equal-
ity testing is well-deﬁned. Consequently, the elements of
sum are of data type T too. By looking at Theorem 1, we
realize that K(R, s, C) should be set to R(s, C) for ordi-
nary lumping and to R(C, s) for exact lumping. Later on,
we will see how choosing K helps us compute ≈lo and ≈le
using COMPLUMPING.
At each iteration of the for loop of lines 2-7 of SPLIT, D,