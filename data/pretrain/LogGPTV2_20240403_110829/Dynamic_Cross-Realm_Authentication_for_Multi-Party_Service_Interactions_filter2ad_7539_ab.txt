Pub(A) is good [14], and its corresponding 
Pri(A)  will  never  be  discovered  by  any 
other principals 
M  is  fresh,  i.e.  M  has  not  been  sent  in  a 
message at any time before the current run 
of the protocol 
statement that A is a session partner of S. 
Particularly, SP(SA, S) is always true 
code  of  M 
authentication 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:53:10 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007( BAK
),
( BAK
),
A  →← −
B 
A  →← +
B 
A|≡X 
A says X 
A ⇒|
X 
A(cid:18) M  
is  A’s  shared  secret  key  and 
K(A,B) is A’s secret key to be shared with B, 
but not yet confirmed by B  
K(A,B) 
confirmed by B  
A believes that statement X is true 
A sent a message including statement X  
A 
jurisdiction over X 
A receives message M  
is  an  authority  on  X,  i.e.  A  has 
Figure  3  illustrates  Protocol  1:  Accepting  a  new 
session  partner.  Our  protocol  conforms  to  the  WS-
Resource Framework (WSRF) specification [6], where 
a  service  is  associated  with  a  factory  service  F  that 
generates service instances.  
Figure 3 Protocol 1: Accepting a new session partner 
The  details  of  the  messages  transported  within 
Figure  3  are  presented  as  follows,  where  “A  →  B” 
means that A sends a message to B: 
(1) A→F:  Secure(Request, IDS, IDA) 
(2) F→A:  Secure(IDB, IDS) 
(3) A→SA: Valid(SP(B,S), IDB, IDA, IDSA, IDS, N)K(A, SA) 
(4) SA→A: Valid(Confirm, N+1) K(SA, A) 
(5) A→B:  Valid(invoke, IDA, IDB, IDS, N1)K(A, B) 
(6) B→A:  Valid(reply, IDB, IDA, IDS, N1+1)K(B, A) 
where N and N1 are fresh nonces. 
It  is  assumed  that  an  HCRA  process  has  been 
performed  before  Service  1  contacts  Service  2.  In 
Figure 3 instance A is a session partner of S, and has 
registered with SA. When A tries to contact Service 2, 
it  first  sends  a  request  (message  (1))  to  the  factory 
service F of Service 2. F then generates a new instance 
B and sends the related information about B (message 
(2))  back  to  A.  Next, A  introduces  B  to  SA  (message 
the  confirmation  from  SA 
(3)).  After  receiving 
(message  (4)),  A  will  start  to  communicate  with  B 
(messages  (5)  and  (6)).  During  this  process,  the 
integrity of messages (1) and (2) needs to be protected 
by  additional  security  channels  (e.g.  SSL,  the  secure 
conversation protocol, the secure message protocol etc.) 
as B is not yet a session partner during those steps. The 
integrity  of  messages  (3),  (4),  (5),  (6) is protected  by 
shared secret keys distributed within S. For example, A 
can  use  its  private  key  and  the  identifier  of  B  to 
generate  K(A,B)  according 
the  Diffie-Hellman 
algorithm. K(A,B) is then used to generate the message 
authentication  code  of  message  (5).  Similarly,  B  can 
use its private key and the identifier of A to generate 
K(B,A), which is identical to K(A,B). K(B,A) is then used to 
generate the MAC of message (6). 
to 
Figure 4 Protocol 2: Authenticating a session partner 
Figure  4  illustrates  Protocol  2:  Authenticating  a 
session partner. B and C are session partners of S, but B 
has not yet communicated with C before. First, B sends 
a request message (1) to C. C then sends message (2) 
to SA in order to check the identity of B. SA will send 
back a confirmation in message (3), confirming that B 
is  a  session  partner  of  S.  After  receiving 
the 
confirmation,  B  will  handle  the  request  from  C  and 
send  the  result  back.  All  the  messages  transferred 
during  this  process  are  encrypted  by  the  secret  key 
generated  with  the  Diffie-Hellman  algorithm.  The 
details  of  the  messages  passed  in  Figure  4  are 
presented as follows: 
(1) B→C:  Valid(Request, IDB, IDC, IDS, N′ )K(B,C) 
(2) C→SA: Valid(Query, IDB, IDC, IDSA, IDS, N″ )K(C,SA) 
(3) SA→C: Valid(SP(B, S), IDSA, IDC, IDS, N″+1 )K(SA,C) 
(4) C→B:  Valid(Response, IDC, IDB, IDS, N′+1)K(C,B) 
where N′ and N″  are fresh nonces. 
In Protocols 1 and 2, MACs are used to protect the 
integrity of the messages transported within a business 
session, and fresh nonces are used to guarantee that a 
message is not replayed.  
3.3 Correctness Proofs 
In  this  section  we  use  the  extended  BAN  logic 
[2][14] to analyse formally the correctness of Protocols 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:53:10 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 20071 and 2. We first introduce some deduction rules to be 
needed  by  our  correctness  proofs.  These  rules  are 
specified in [2] and [14]. 
Rules: 
Rule 1: A says (M, N) ⇒ A says M and A says N 
Rule 2: A|≡#M ⇒ A|≡#(M, N) and A|≡#(N, M)  
Rule 3: A|≡B ⇒|
Rule 4: A|≡↑Pub(B)⇒ A|≡
Rule 5: A|≡
A|≡
Rule 6: A(cid:18) (X, MAC(X)K(A,B)), 
A|≡#X ⇒ A|≡B says X 
Lemma 1  A(cid:18) Valid(M)K(A,B), 
A
, A(cid:18) Valid(X)K(A,B), and A|≡#X ⇒ 
X, A|≡ B says X⇒A|≡X 
B
≡ ←→ , and 
|
≡ ←→ , and 
|
A
BAK  →← +
BAK  →← −
BAK  →← −
A A
+
A BK
(
,
+
A BK
(
,
B
B
B
A
B
. 
)
(
)
)
)
(
)
(
,
,
,
A A
A|≡#M, then A|≡B says M. 
Proof:  This  lemma  can  be  deduced  directly  from 
Rule 6. 
3.3.1 Protocol 1: Accepting a new session partner 
Security goals of Protocol 1 include 1) accepting B 
as a new partner and 2) building a confirmed secret key 
to be shared between A and B. The security goals are 
formally described as follows: 
A A
SA|≡ 
≡ ←→  
A
|
Additionally,  the  assumptions  of  this  protocol  are 
≡ ←→
|
SP(B,S), 
B B
and 
+
A BK
(
,
+
B AK
(
,
B
, 
)
)
formally described as follows: 
A|≡↑Pub(SA), 
SA|≡↑Pub(A), 
B|≡↑Pub(A), SA|≡#N, and A|≡#N1,, SA|≡A ⇒|
A|≡↑Pub(B), 
SP(B, S) 
In Protocol 1, it is the responsibility of SA to decide 
whether  to  accept  an  instance  (e.g.  B)  as  a  session 
partner  following  certain  policies.  This  assumption  is 
in  fact  based  on  the  simplest  policy,  that  is,  SA  will 
accept  any  instance  recommended  by  an  existing 
session partner (e.g. A) as a new session partner.  
To  prove  the  correctness  of  the  protocol,  it  is 
necessary  to  show  whether  its  security  goals  can  be 
satisfied  after  the  run  of  the  protocol  under  the 
assumptions. We therefore have the following theorem. 
Theorem 1  The  goals  of  Protocol  1  are  satisfied 
under the assumptions for the protocol. 
)
B
+
A BK
(
,
Proof:  We  need 
≡ ←→ ,  and 
|
to  deduce  SA|≡SP(B,S), 
≡ ←→  from 
the 
B B
|
A A
assumptions of the protocol.  
The  third  step  of  Protocol  1  implies  that  SA (cid:18)  
Valid(SP(B,S), IDB, IDA, IDSA, IDS, N)K(A, SA). We obtain 
SA|≡#(  SP(B,S),  IDB,  IDA,  IDSA,  IDS,  N)  by  the 
+
B AK
(
,
A
)
,
,
(
)
(
)
A
SA
A
SA
assumption SA|≡#N and Rule 2. From SA|≡↑Pub(A), it 
follows that SA|≡
SAAK  →← −
 by Rule 4. Then, from 
,  SA (cid:18)  Valid(SP(B,S),  IDB,  IDA, 
SA|≡
SAAK  →← −
IDSA, IDS, N)K(A, SA), and SA|≡#( SP(B,S), IDB, IDA, IDSA, 
IDS,  N),  it  yields  that  SA|≡
 by  Rule  5. 
Furthermore, we can deduce that SA|≡A says (SP(B,S), 
IDB,  IDA,  IDSA,  IDS,  N)  and  SA|≡  A  says  SP(B,S)  by 
Lemma 1 and Rule 1. Therefore, from the assumption 
SA|≡A ⇒|
SP(B,  S)  and  Rule  3,  it  follows  that 
SA|≡SP(B,S). 
SAAK  →← +
SA
A
)
(
,
,
(
)
)
A
B
B
B B
BAK  →← −
N1+1). 
+
A BK
(
,
From  A|≡↑Pub(B),  we  have  A|≡
 by 
Rule 4. Besides, from the sixth step of the protocol and 
the assumption A|≡#N1, it follows that A(cid:18)  Valid(reply, 
IDB,  IDA,  IDS,  N1+1)K(B,  A) and  A|≡#(  reply,  IDB,  IDA, 
IDS, 
obtain 
Consequently, 
≡ ←→  by  Rule  5.
≡ ←→  can 
A A
|
A
|
also be deduced through a similar procedure. Hence the 
theorem. 
3.3.2 Protocol 2: Authenticating a session partner 
we 
+
B AK
(
,
The  security  goals  of  Protocol  2  are  1)  verifying 
whether a principal is a session partner, and 2) building 
a  confirmed  secret  key  to  be  shared  between  the 
session  partners.  Formal  expression  of  the  security 
goals are presented as follows: 
)
+
B CK
(
, )
≡ ←→ , and 
B B
|
C|≡ SP(B, S), 
≡ ←→ . 
B
|
The formal descriptions of the assumptions are: 
C|≡↑Pub(SA), 
B|≡↑Pub(C), 
C C
+
BCK
( , )
C
C|≡↑Pub(B), C|≡#N′, C|≡#N″, and C|≡SA ⇒|
SA|≡↑Pub(C), 
SP(B, S) 
The  correctness  of  this  protocol  is  stated  in  the 
following theorem. 
Theorem 2   The  goals  of  Protocol  2  are  satisfied 
under the above assumptions. 
,
,
(
(
)
C
SA
SACK  →← +
SACK  →← −
Proof:  By  Rule  4,  C|≡↑Pub(SA)  implies  that 
.  We  obtain  C (cid:18)  Valid(SP(B,  S), 
C|≡
C
IDSA,  IDC,  IDS,  N″+1  )K(SA,C)  in  the  third  step  of  the 
protocol, and C|≡#( SP(B, S), IDSA, IDC, IDS, N″+1) by 
the assumption C|≡#N″ and Rule 2. It then follows that 
C|≡
 by Rule 5. By Lemma 1 we obtain 
that C|≡SA says (SP(B, S), IDSA, IDC, IDS, N″+1), and 
thus  C|≡SA  says  SP(B,  S)  by  Rule  1.  Since 
C|≡SA ⇒|
it  follows 
From 
≡ ←→  by  Rule  4.  Since  C (cid:18)  
|
)K(B,C)  and 
SP(B, S), we have C|≡SP(B, S) by Rule 3. 
the  assumption  C|≡↑Pub(B), 
that
Valid(Request, 
B
IDB, 
IDS,  N′ 
C C
IDC, 
SA
−
C BK
(
,
)
)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:53:10 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007+
C BK
(
,
)
B
)
C
+
B CK
(
,
for 
C C
B B
C|≡#(  Request,  IDB,  IDC,  IDS,  N′  )  which  is  derived 
from  C|≡#N′  by  Rule  2,  then 
≡ ←→  by 
|
≡ ←→  can  be  deduced  from 
|
Rule  5. 
B|≡↑Pub(C) by a similar approach. Hence the theorem.  
4. Empirical Evaluation 
practical 
real-world 
Beside  the  correctness  analysis,  we  also  need  to 
examine whether our authentication system is feasible 
enough 
applications. 
Consequently,  a  series  of  experiments  has  been 
implemented  to  assess  the  overheads  imposed  by  the 
authentication  mechanisms  and  the  scalability  of  our 
proposed system. Because the system is designed to be 
deployed  on  service-oriented  middleware,  we  will 
evaluate the compatibility of our system with existing 
message-level security protocols. 
services 
experimental 
Two experimental systems have been developed. In 
the  first  experimental  system  (ES1  for  short)  an  SA 
service 
are 
implemented.  As  illustrated  in  Figure  5,  a  client  first 
initiates  a  business  session,  and  three  experimental 
services  then  repeatedly  invoke  each  other  until  a 
particular  amount  of  service  instances  have  been 
to  SA.  The  second 
generated  and 
experimental  system  (ES2  for  short)  consists  of  three 
experimental  services  without  SA.  Experimental 
services of ES2 invoke each other repeatedly until the 
system  has  generated  a  particular  amount  of  service 
instances. 
introduced 
three 
and 
Our  experimental  systems  are  implemented  on  a 
Grid  service  middleware  system  in  which  a  Web 
service is associated with a factory service which is in 
charge  of  the  generation  and  the  management  of 
resources. In the Grid, Web services are stateless, and 