undocumented
undocumented
undocumented
undocumented
undocumented
documented
documented
divided into two categories: 1) those that do not require
entitlements; and 2) those that do require entitlements.
Entitlement requirements are inferred from error messages
provided in completion handlers. Mach-ports with methods
in both categories are considered to have inconsistent en-
titlement policies, and have been highlighted in Table VI.
As demonstrated with MDM functionality in Section VII,
inconsistent entitlement policies may represent access con-
trol ﬂaws where security sensitive methods are accidentally
made available to unprivileged clients.
Triage strategy: Of all 3048 total invocations shown in
Figure 4, 1517 unique methods were called in several testing
campaigns, while the phone was monitored for undeﬁned or
unexpected behaviour. A new testing campaign with a subset
of methods was started once such an event was triggered.
10
Kobold led to the discovery of confused deputy vulner-
abilities and daemon crashes. These ﬁndings were revealed
on an iOS 11 jailbroken device and were reproduced on a
stock iOS 12 device (the latest major version at the time of
writing). We disclosed our ﬁndings to Apple in the form of
Proof of Concept (PoC) iOS applications.
A. Confused Deputy Vulnerabilities
Table VII lists the confused deputy vulnerabilities de-
tected by Kobold. These vulnerabilities can be grouped
into three categories: 1) File Provider information leaks;
2) Microphone activation; 3) Unprotected Mobile Device
Management (MDM) services. These vulnerabilities were
discovered on a jailbroken iPhone 5s running iOS 11.1.2
and have been conﬁrmed with PoC applications on a non-
jailbroken 6th Generation iPod Touch running iOS 12.0.1.
File Provider State Dump: The File Provider daemon
provides a method that replies with state information for
the applications with File Provider functionality running
on the device (e.g., Google Drive, Microsoft OneDrive).
This leaked state information can be abused by a third
party application in three ways. First, the leaked information
reveals the names of other third party apps that have been
installed if those applications use File Provider functionality.
Second, the leaked information reveals UUIDs used in app
directory names, which do not change upon rebooting the
device. Therefore, these leaked UUIDs could be used for
device ﬁngerprinting. Finally, the third party app can infer
the names of ﬁles in File Provider directories. There is a
simple side channel in iOS that allows a process to determine
whether a ﬁle exists or not by attempting to read the ﬁle’s
metadata. If the ﬁle exists, a permission denied error may
occur, or the metadata may be read. If the ﬁle does not
exist, an error will specify that the ﬁle does not exist. Since
the attacker must correctly guess the ﬁle path, this side
channel is defeated by UUIDs in ﬁle paths. However, the
File Provider data leak reveals those UUIDs to third party
applications allowing them to begin inferring the names of
ﬁles in File Provider directories. This inference could be
accelerated through the use of a dictionary of interesting ﬁle
names to check for. In response to our disclosure, Apple has
resolved this issue with CVE-2018-4446.
Activate Voice Dictation: By invoking methods that start
voice dictation sessions, a third party application can brieﬂy
activate the microphone without user permission (i.e., the
user has not enabled microphone access in their Privacy
Settings). This method causes a bell
to ring, signalling
that the microphone has been activated. Using uninitialized
variables, the application does not gain access to the audio
recording, and the microphone is only activated for about
1 second. In response to our disclosure, Apple has resolved
this issue with CVE-2019-8502.
METHODS PER MACH PORT. INCONSISTENT ENTITLEMENT REQUIREMENTS HIGHLIGHTED.
Table VI
Port Name
com.apple.DragUI.druid.destination
com.apple.DragUI.druid.source
com.apple.FileProvider
com.apple.accessories.externalaccessory-server
com.apple.assistant.analytics
com.apple.assistant.dictation
com.apple.coreservices.lsuseractivitymanager.xpc
com.apple.devicecheckd
com.apple.managedconﬁguration.mdmdservice
com.apple.managedconﬁguration.proﬁled.public
com.apple.mobile.installd
com.apple.nano.nanoregistry.paireddeviceregistry
com.apple.nsurlsessiond
com.apple.nsurlstorage-cache
com.apple.parsecd
com.apple.pasteboard.pasted
com.apple.replayd
com.apple.sharingd.nsxpc
com.apple.voiceservices.tts
com.apple.wcd
Without Entitlement Requirements With Entitlement Requirements
1
1
28
1
1
3
8
1
0
21
1
37
4
3
5
8
3
1
9
3
0
0
0
0
0
0
0
0
9
50
18
8
0
0
0
0
0
0
0
0
Effect
Leak names of installed apps with File Providers
Device ﬁngerprinting
Infer ﬁle names in File Providers
Activate microphone
Disable Text Replacement
Disable Dictation
Block access to all websites
Table VII
CONFUSED DEPUTY VULNERABILITIES
Method
dumpStateTo:completionHandler:
dumpStateTo:completionHandler:
dumpStateTo:completionHandler:
startRecordingFor
PendingDictationWithLanguageCode:
options:speechOptions:reply:
setKeyboardShortcutsAllowed:completion:
setDictationAllowed:completion:
addBookmark:completion:
Mach-Port
com.apple.FileProvider
com.apple.FileProvider
com.apple.FileProvider
com.apple.assistant.dictation
com.apple.managedconﬁguration.proﬁled.public
com.apple.managedconﬁguration.proﬁled.public
com.apple.managedconﬁguration.proﬁled.public
the
observed
that
detected
entitlement
requirements
Inconsistent MDM Access Control Policy: When
reviewing
by
the MDM management
Kobold, we
requirements. The
service had inconsistent entitlement
“com.apple.managedconﬁguration.proﬁled.public”
mach-
port provides 71 methods Kobold detects as accessible.
Of these 71 methods, the majority require MDM related
entitlements, but 21 of the methods have no apparent
entitlement requirements. A manual
investigation of the
MDM methods that did not require entitlements led us to
three MDM services that allow a third party application
to disable system functionality. These MDM services are
effective even if the victim’s device has not been enrolled
with an MDM. First, access to all website on all mobile
browsers can be disabled, and users attempting to access
websites are challenged to enter an unknown pin code
with a recorded number of failed attempts. Second,
the
text replacement or keyboard shortcuts functionality can
be disabled and the menu to conﬁgure new shortcuts is
disabled in Settings menu. Third, the dictation option for
voice to text functionality can be disabled and the toggle to
enable the feature is removed from the Settings menu.
B. Daemon Crashes
Kobold detected crashes on a jailbroken iPhone 5s running
iOS 11.1.2 and a stock 6th Generation iPod Touch running
iOS 12.0.1. The crashes detected are listed in Table VIII
which lists ten executables with a total of 14 unique crashes
based on stack trace analysis. The locationd and wcd21
crashes could not be triggered on the stock iPod, but we
speculate that this difference is due to hardware differences
since the iPod does not have a GPS sensor and does not
support Apple Watch connectivity. Three of the crashed
daemons run with root authority. If attackers are able to ex-
ploit the causes of these crashes, the root authority daemons
would be valuable targets.
Crash Types: We categorize three types of crash based
on the way the process was terminated: 1) abort signal;
2) segmentation fault; 3) killed by watchdog. First, seven
crashes (three daemons) terminate when the daemon sends
an abort signal. This signal could be the result of asserting
that a value is null and aborting the process in response.
Second, six crashes (six daemons) terminate when daemons
21a daemon related to the Apple Watch
11
Table VIII
DAEMON CRASHES
Executable
replayd
Mach-Port
com.apple.replayd
replayd
com.apple.replayd
sharingd
wcd
wcd
wcd
wcd
accessoryd
itunesstored
aggregated
Preferences
UserEventAgent
locationd
powerlogHelper
com.apple.sharingd.nsxpc
com.apple.wcd
com.apple.wcd
com.apple.wcd
com.apple.wcd
com.apple.iap2d.xpc
com.apple.itunesstored.xpc
NONDETERMINISTIC
NONDETERMINISTIC
NONDETERMINISTIC
NONDETERMINISTIC
NONDETERMINISTIC
mobile
UID
mobile
Method
setupBroadcastWithHostBundleID:broadcastExtensionBundleID:
broadcastConﬁgurationData:userInfo:handler:
startRecordingWindowLayerContextIDs:windowSize:
microphoneEnabled:cameraEnabled:broadcast:systemRecording:
captureEnabled:listenerEndpoint:withHandler:
createCompanionServiceManagerWithIdentiﬁer:clientProxy:reply: mobile
mobile
acknowledgeUserInfoResultIndexWithIdentiﬁer:clientPairingID:
mobile
acknowledgeUserInfoIndexWithIdentiﬁer:clientPairingID:
acknowledgeFileResultIndexWithIdentiﬁer:clientPairingID:
mobile
mobile
acknowledgeFileIndexWithIdentiﬁer:clientPairingID:
mobile
stopBLEUpdates:blePairingUUID:
mobile
willSwitchUser
mobile
NONDETERMINISTIC
NONDETERMINISTIC
mobile
root
NONDETERMINISTIC
root
NONDETERMINISTIC
NONDETERMINISTIC
root
Crash Type
Abort
Abort
Abort
Abort
Abort
Abort
Abort
Segfault
Segfault
Segfault
Killed by
watchdog
Segfault
Segfault
Segfault
attempt
to access invalid memory addresses at or near
the zero address. We speculate that these unusual memory
accesses are caused by Kobold’s default use of uninitialized
variables as remote method arguments. Since segmentation
faults imply that the daemon is attempting to use corrupted
values, we consider segmentation fault crashes more sig-
niﬁcant than abort signal crashes. All of our root authority
daemon crashes are due to segmentation faults. Third, the
Preferences22 crash is unique in that the process freezes and
is killed by a watchdog process after 10 seconds of inactivity.
Quantifying Crashes: We quantify crashes in two ways,
number of daemons and number of unique crash stack traces.
The stack traces are included in the crash reports generated
by iOS. We developed a script to extract stack traces from
these crash reports and compare them to determine how
many unique stack traces were present for each daemon.
For example, the accessoryd daemon seems to crash for
every method we called on the com.apple.iap2d.xpc port.
However, a stack trace analysis revealed that each method
invocation for the port was triggering the same stack trace,
which implies that the same issue is causing the crash despite
invoking different methods. The wcd and replayd daemons
do generate unique stack traces when crashed by different
method invocations. These stack traces imply that multiple
bugs exist in wcd and replayd, but a single bug may be
causing the crashes for accessoryd.
Crash Causes: For those crashes that are consistently
repeatable, we isolate the remote method causing the crash.
Methods that trigger crashes were detected using a script
on a jailbroken device that killed our method invocation
application when a crash report was added to the system
log. Then, we manually tested the methods immediately
prior to the code line where our app stopped executing.
22Also known as Settings.
Each of these methods was found to cause crashes in
the receiving daemon if called with uninitialized argument
values. Note that the willSwitchUser method does not have
any arguments, but it still causes the iTunes Store daemon
to crash with a segmentation fault if it is invoked by a third
party application. This iTunes Store daemon crash represents
a bug, but without a ﬁeld for attacker input, it is unlikely to
be exploitable. Five of the crashes were observed to occur
when running our method invocation app, but they did not
repeat consistently enough for us to assign a speciﬁc method
to the crash. These crashes are labeled in Table VIII as
nondeterministic.
Inconsistent Entitlement Enforcement: When investigat-
ing the methods crashing replayd, we noticed an inconsis-
tency in one method’s entitlement enforcement. A remote
method called startRecording23 is provided by replayd and
returns an error message specifying a required entitlement,
if the remote method is the only one invoked by our
application. However, if our application invokes a set of
twelve other remote methods before invoking the replayd
method, the entitlement requirement error is not returned.
Instead, the method triggers a prompt asking the user for per-
mission to record the screen. If the user accepts the prompt,
replayd will crash (the crash is likely due to Kobold’s use
of uninitialized variable values). This ﬁnding suggests that
state-based conditions (e.g., the set of methods previously
invoked) can lead to entitlement enforcement failures.
VIII. LIMITATIONS
Kobold has two types of limitations: 1) limitations inher-
ent to working with closed source systems; 2) limitations
that could be overcome with additional engineering effort.
Closed Source System: Several limitations of Kobold are
inherent to the closed source nature of iOS. Since we do
23Method name has been simpliﬁed. The full name appears in Table VIII
12
not have ground truth for the set of third party accessible
NSXPC remote methods, we cannot quantify the number