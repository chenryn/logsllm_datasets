# Title: Construction of Truly Practical Secure Protocols Using Standard Smartcards

## Authors
- Carmit Hazay, Department of Computer Science, Bar-Ilan University, Israel. (Email: [PI:EMAIL])
- Yehuda Lindell, Department of Computer Science, Bar-Ilan University, Israel. (Email: [PI:EMAIL])

## Abstract
In this paper, we demonstrate that standard smartcards can be used to construct highly practical secure protocols for various tasks. Our protocols achieve full simulation-based security in the presence of malicious adversaries and can handle large input sizes. We present protocols for secure set intersection, oblivious database search, and more. We have implemented our secure set intersection protocol, which, on sets of 30,000 elements, takes 20 seconds for one party and 30 minutes for the other (the latter can be parallelized to reduce the time). This shows that in scenarios where physical smartcards can be exchanged, such as between security and governmental agencies, it is feasible to use secure protocols with proven simulation-based security.

## Categories and Subject Descriptors
F.1.2 [Modes of Computation]: Interactive and Reactive Computationâ€”Cryptographic Protocols

## General Terms
Algorithms, Security

## Keywords
Secure computation, smartcards, provable security

## 1. Introduction
In the context of secure multiparty computation, a group of parties with private inputs collaboratively computes some function of their inputs. The security requirements for such computations are:
1. **Privacy**: No information beyond the output should be learned from the protocol.
2. **Correctness**: The output must be distributed according to the prescribed functionality.
3. **Independence**: Parties cannot make their inputs dependent on others' inputs.

The standard definition of security compares a real protocol execution to an ideal execution where a trusted party performs the computation. This notion is known as simulation-based security. Secure multiparty computation underpins a wide range of applications, from simple coin-tossing and agreement to complex tasks like electronic voting, auctions, and privacy-preserving data mining.

Security must hold even if some participants are adversarial. In this paper, we consider malicious adversaries who can deviate arbitrarily from the protocol. It has been shown that, with appropriate cryptographic tools, any two-party or multiparty function can be securely computed in the presence of malicious adversaries. However, such protocols are often not efficient enough for practical use, even for small inputs.

Recently, there has been significant interest in secure protocols for various tasks, driven by the growing conflict between privacy concerns and security needs. Unfortunately, truly practical protocols with proven simulation-based security remain elusive, especially in the presence of malicious adversaries.

### Smartcard-Aided Secure Computation
We propose protocols that utilize smartcards in addition to standard network communication. Specifically, parties can initialize smartcards and send them to each other. This approach is reasonable if not overused. In our protocols, one party initializes a smartcard and sends it to the other, and this smartcard can be reused for multiple executions and different protocols. This model is suitable for parties with non-transient relationships, such as commercial, governmental, and security agencies.

We construct practical two-party protocols for the following tasks:

- **Secure Set Intersection**: This problem has many practical applications, such as identifying common suspects across security agencies, detecting duplicate social welfare recipients, and identifying patients at different medical centers. Our protocol is more efficient than existing solutions, providing full-simulation security in the presence of malicious adversaries. For sets of 30,000 elements, one party's computation takes approximately 20 seconds, while the other party's computation takes approximately 30 minutes (which can be reduced to 3 minutes using 10 smartcards).

- **Oblivious Database Search**: In this problem, a client searches a server's database such that:
  - The client can only perform a single (or a predetermined number of) searches and learns nothing beyond the results.
  - The server learns nothing about the client's searches. This problem has important applications in privacy, such as in homeland security and legal research. Our protocol achieves near-equivalent efficiency to non-private database searches, with provable security in the presence of malicious adversaries.

- **Oblivious Document Search**: This is a more challenging problem where the database consists of unstructured documents, and a keyword query returns all documents containing the keyword. We present a highly efficient protocol for this problem, also provably secure in the presence of malicious adversaries.

Our protocols are proven secure under the standard simulation-based definition of security, achieving the highest level of security. We use standard smartcards, which are widely deployed and can be easily obtained, making deployment straightforward and reducing the need for special-purpose hardware.

### Composability
Our protocols are secure under concurrent general composition (or universal composability), ensuring their security in real-world settings.

### Standard Smartcards
We emphasize that our protocols can use any standard smartcard. This choice is motivated by:
1. **Ease of Deployment**: Many organizations already use smartcards for authentication, and standard smartcards are readily available.
2. **Trust**: Using standard smartcards reduces the need to trust a specific vendor, as these cards have been extensively tested and are less likely to contain intentional or unintentional errors.

### Trusting Smartcards
We assume that the smartcard is uncorrupted, based on the fact that modern smartcards, certified by standards like FIPS or Common Criteria, are rarely compromised.

### Smartcard Authenticity
Our protocols require one party to initialize a smartcard and send it to the other. The recipient must verify that the received device is a genuine smartcard. This can be achieved using public/private key pairs, although current implementations typically use symmetric keys. A more robust solution could be implemented without much difficulty.

### Related Work
Secure computation has been studied extensively, but the focus on highly efficient protocols for practical problems, such as privacy-preserving data mining, is a recent development. Most secure protocols in this area have considered semi-honest adversaries, and few have addressed the practicality and security in the presence of malicious adversaries.

This paper addresses these gaps by presenting practical, secure protocols that leverage standard smartcards, making them suitable for real-world applications.