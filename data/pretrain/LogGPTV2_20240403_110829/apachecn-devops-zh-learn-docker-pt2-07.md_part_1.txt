# 七、与容器共享数据
“一次做一件事，把它做好”，一直以来都是**信息技术** ( **IT** )领域颇为成功的口头禅之一。这个广泛使用的原则也非常适合构建和公开 Docker 容器，并且它被指定为最佳实践之一，以利用最初设想的 Docker 启发的容器化范例的好处。这意味着，我们必须将单个应用及其直接依赖项和库记录在 Docker 容器中，以确保容器的独立性、自给自足性、水平可扩展性和可操作性。让我们看看为什么容器如此重要:
*   **容器的时间特性**:容器的寿命通常与应用的寿命一样长，反之亦然。但是，这对应用数据有一些负面影响。应用自然会经历各种变化，以适应业务和技术变化，即使是在生产环境中。还有其他原因，例如应用故障、版本更改和应用维护，导致软件应用持续不断地更新和升级。在通用计算模型的情况下，即使应用由于任何原因而死亡，与该应用相关联的持久数据也可以保存在文件系统中。然而，在容器范例的情况下，应用升级通常是通过简单地丢弃旧的容器，用新版本的应用系统地创建一个新的容器来执行的。类似地，当应用出现故障时，需要启动一个新的容器，旧的容器必须被丢弃。总而言之，容器本质上通常是暂时的。
*   **对业务连续性的需求**:在容器环境中，完整的执行环境，包括其数据文件，通常被捆绑并封装在容器内。无论出于什么原因，当容器被丢弃时，应用数据文件也会随着容器一起消失。但是，为了提供没有任何中断和服务中断的软件应用，这些应用数据文件必须保存在容器之外，并根据需要传递给容器，以确保业务连续性。这意味着需要保证容器的弹性和可靠性。此外，一些应用数据文件，如日志文件，需要在容器外收集和访问，以进行各种事后分析。Docker 技术通过称为数据卷的新构建块非常创新地解决了这个文件持久性问题。
Docker 技术有三种不同的方式来提供持久存储:
*   第一种也是推荐的方法是使用使用 Docker 的卷管理创建的卷。
*   第二种方法是将目录从 Docker 主机挂载到容器内的指定位置。
*   另一种选择是使用纯数据容器。纯数据容器是一种特制的容器，用于与一个或多个容器共享数据。
在本章中，我们将涵盖以下主题:
*   数据卷宗
*   共享主机数据
*   在容器之间共享数据
*   可避免的常见陷阱
## 数据卷宗
数据量是 Docker 环境中数据共享的基本构件。在进入数据共享的细节之前，有必要对数据量概念有一个很好的理解。到目前为止，我们在映像或容器中创建的所有文件都是 union 文件系统的一部分。容器的联合文件系统随着容器一起消失。换句话说，当容器被移除时，它的文件系统也被自动移除。然而，企业级的应用必须保存数据，并且容器的文件系统不能满足这样的要求。
然而，Docker 生态系统用数据量概念优雅地解决了这个问题。数据卷本质上是 Docker 主机文件系统的一部分，它只是装载在容器内。或者，您可以通过可插拔卷驱动程序将其他高级文件系统(如 Flocker 和 GlusterFS)用作数据卷。因为数据卷不是容器文件系统的一部分，所以它的生命周期独立于容器。
可以使用`Dockerfile`的`VOLUME`指令将数据体记录在 Docker 映像中。此外，还可以在启动容器时使用`docker run`子命令的`-v`选项进行规定。这里，在以下示例中，`Dockerfile`中的`VOLUME`指令的含义在以下步骤中详细说明:
1.  用基础映像(`ubuntu:16.04`)和数据体(`/MountPointDemo`)的指令创建一个非常简单的`Dockerfile`:
```
      FROM ubuntu:16.04 
      VOLUME /MountPointDemo 
```
2.  使用`docker build`子命令创建名称为`mount-point-demo`的映像:
```
      $ sudo docker build -t mount-point-demo .
```
3.  构建映像后，让我们使用`docker inspect`子命令快速检查数据量的映像:
```
 $ sudo docker inspect mount-point-demo
 [
 {
 "Id": "sha256:",
 "RepoTags": [
 "mount-point-demo:latest"
 ],
 ... TRUNCATED OUTPUT ... 
 "Volumes": {
 "/MountPointDemo": {}
 },
 ... TRUNCATED OUTPUT ...
```
显然，在前面的输出中，数据量被记录在映像本身中。
4.  现在，让我们使用早期制作的映像中的`docker run`子命令启动一个交互式容器，如以下命令所示:
```
      $ sudo docker run --rm -it mount-point-demo
```
从容器的提示中，让我们使用`ls -ld`命令检查数据量的存在:
```
 root@8d22f73b5b46:/# ls -ld /MountPointDemo
 drwxr-xr-x 2 root root 4096 Nov 18 19:22 
 /MountPointDemo
```
如前所述，数据卷是 Docker 主机文件系统的一部分，它被装载，如以下命令所示:
```
 root@8d22f73b5b46:/# mount | grep MountPointDemo
 /dev/xvda2 on /MountPointDemo type ext3 
 (rw,noatime,nobarrier,errors=remount-ro,data=ordered) 
```
5.  在本节中，我们检查了映像，以了解映像中的数据量声明。现在我们已经启动了容器，让我们在不同的终端中使用容器标识作为参数的`docker inspect`子命令来检查容器的数据量。我们之前创建了几个容器，为此，让我们直接从容器的提示中获取`8d22f73b5b46`容器标识:
```
 $ sudo docker inspect -f 
 '{{json .Mounts}}' 8d22f73b5b46 
 [
 {
 "Propagation": "",
 "RW": true,
 "Mode": "",
 "Driver": "local",
 "Destination": "/MountPointDemo",
 "Source":
"/var/lib/docker/volumes/720e2a2478e70a7cb49ab7385b8be627d4b6ec52e6bb33063e4144355d59592a/_data",
"Name": "720e2a2478e70a7cb49ab7385b8be627d4b6ec52e6bb33063e4144355d59592a"
 }
 ]
```
显然，在这里，数据卷被映射到 Docker 主机中的一个目录，并且该目录以读写模式装载。该目录也称为卷，由 Docker 引擎在容器启动期间自动创建。自从 Docker 的 1.9 版本以来，卷是通过顶级卷管理命令来管理的，我们将在下一节深入研究这个命令。
到目前为止，我们已经看到了`Dockerfile`中`VOLUME`指令的含义，以及 Docker 如何管理数据量。像`Dockerfile`的`VOLUME`指令一样，我们可以使用`docker run`子命令的`-v `选项，如下命令所示:
```
$ sudo docker run -v /MountPointDemo -it ubuntu:16.04  
```
启动容器后，我们鼓励您在新启动的容器中尝试`ls -ld /MountPointDemo`和`mount`命令，然后检查容器，如前面的步骤 5 所示。
在这里描述的两个场景中，Docker 引擎自动在`/var/lib/docker/volumes/`目录下创建卷，并将其装载到容器中。当使用`docker rm`子命令移除容器时，Docker 引擎不会移除在容器启动期间自动创建的卷。这种行为本质上是为了保留存储在卷文件系统中的容器应用的状态。如果您想要移除由 Docker 引擎自动创建的卷，您可以在移除容器时这样做，方法是在已经停止的容器上为`docker rm`子命令提供一个`-v`选项:
```
$ sudo docker rm -v 8d22f73b5b46  
```
如果容器仍在运行，那么您可以通过在前一个命令中添加一个`-f`选项来移除容器以及自动生成的目录:
```
$ sudo docker rm -fv 8d22f73b5b46  
```
我们已经向您介绍了在 Docker 主机中自动生成目录并将其装载到容器中的数据卷的技术和技巧。但是，使用`docker run`子命令的`-v`选项，可以将用户定义的目录装载到数据卷中。在这种情况下，Docker 引擎不会自动生成任何目录。
The system generation of a directory has a caveat of directory leak. In other words, if you forget to delete the system-generated directories, you may face some unwanted issues. For further information, read the *Avoiding common pitfalls* section in this chapter.
## 卷管理命令
Docker 从 1.9 版引入了顶级卷管理命令，以便有效地管理持久文件系统。卷管理命令能够管理作为 Docker 主机一部分的数据卷。除此之外，它还帮助我们使用可插拔卷驱动程序(Flocker、GlusterFS 等)来扩展 Docker 持久性功能。你可以在[https://docs.docker.com/engine/extend/legacy_plugins/](https://docs.docker.com/engine/extend/legacy_plugins/)找到支持的插件列表。
`docker volume`命令支持下面列出的四个子命令:
*   `create`:这将创建一个新的卷
*   `inspect`:显示一个或多个卷的详细信息
*   `ls`:这列出了 Docker 主机中的卷
*   `rm`:这将删除一个卷
让我们通过几个例子快速探索卷管理命令。您可以使用`docker volume create`子命令创建一个卷，如下所示:
```
$ sudo docker volume create
50957995c7304e7d398429585d36213bb87781c53550b72a6a27c755c7a99639
```
前面的命令将通过自动生成 64 位十六进制字符串作为卷名来创建卷。但是，为便于识别，用有意义的名称命名卷更有效。您可以使用`docker volume create`子命令的`--name`选项来命名卷:
```
$ sudo docker volume create --name example
example  
```
现在，我们已经创建了两个有卷名和没有卷名的卷，让我们使用`docker volume ls`子命令来显示它们:
```
$ sudo docker volume ls
DRIVER VOLUME NAME
local 50957995c7304e7d398429585d36213bb87781c53550b72a6a27c755c7a99639
local example  
```
列出卷后，让我们运行`docker volume inspect`子命令，查看我们之前创建的卷的详细信息:
```
$ sudo docker volume inspect example
[
 {
 "Name": "example",
 "Driver": "local",
 "Mountpoint": 
 "/var/lib/docker/volumes/example/_data",
 "Labels": {},
 "Scope": "local"
 }
]
```