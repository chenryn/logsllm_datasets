# Energy-Saving Runtime Conditions

## 5.01
## 5.06
## 1.00
## 1.68
- **Static**
- **Runtime**
- **1 Multiplication**
- **5 Multiplications**

### Figure 8: Energy-Saving Circuits
The energy-saving multiplexer allows us to include an optional circuit that has low power consumption when unused.

In previous work (BCTV) [9], unbounded bootstrapping was used, with a reported clock rate of 26 milliHz and a lower 80-bit security level, resulting in an estimated runtime of approximately 29 years. Since the source code for BCTV is not available, the analysis of the performance gap requires some conjecture.

First, we estimate that one order of magnitude of the performance difference can be attributed to the different choices of elliptic curves. Second, BCTV employs a circuit that checks a general-purpose CPU transition function for each program instruction. For straightforward operations like matrix multiplication, this approach uses hundreds of equations per operation, whereas Geppetto generally uses just one. BCTV’s interpreter supports RAM access and data-dependent control flow, which Geppetto's current compilation-based implementation does not. However, recent work [54] suggests that the compilation-based approach can incorporate these features and still outperform interpretation by 2-4 orders of magnitude on straight-line code, and 1-3 orders of magnitude on RAM and data-dependent benchmarks.

Finally, BCTV applies bootstrapping at a very fine granularity. At every step of their CPU, they produce a proof with one curve, then use a second curve to verify that proof and translate it back into a proof on the first curve. This means each CPU instruction requires two bootstrapped proof verifications, while in this application, each Geppetto proof verification covers 1.7 million LLVM instructions.

## 7.4 Energy-Saving Circuits
To evaluate the benefits of energy-saving circuits (§2.3), Figure 8 compares a static compile-time condition to a runtime condition. The left group shows a static computation with a single matrix multiplication and a static computation containing five multiplications, which takes proportionally longer. On the right, a single computation supports up to five multiplications but is organized using energy-saving circuits to make the one-multiplication case inexpensive. Using this circuit to compute one matrix multiplication costs 68% more than the static version (rather than 5 times more) and incurs a negligible 1% overhead in the five-multiplication case.

## 7.5 Compiler
Some previous verifiable computation systems do not include a compiler [22, 52], while those that do [10, 16, 46] typically handle small examples with less than 100 lines of C code. In contrast, Geppetto’s compiler can handle non-trivial cryptographic libraries, with the largest example consisting of 4,159 SLOC [55] of complex cryptographic code supporting elliptic curve operations, including pairing.

## 8 Related Work
### Verifiable Computation
As discussed in §1, many previous systems for verifying outsourced computation make undesirable assumptions about the computation or the prover(s). Recently, several lines of work have refined and implemented protocols for verifiable computation that rely only on cryptographic assumptions [9, 46, 49, 52]. These systems offer different trade-offs between generality, efficiency, interactivity, and zero-knowledge, but they share the goal of achieving strong guarantees with practical efficiency.

However, these systems typically verify a single program at a time, leading to performance issues for state shared across computations (see §2.1.1). We compare and contrast alternative techniques for handling state in §2.1.4.

As discussed in §5 and §7.3.1, Ben-Sasson et al. [9] instantiate and implement suitable elliptic curves for unbounded bootstrapping. Geppetto can leverage unbounded bootstrapping but also supports bounded bootstrapping for better performance. Ben-Sasson et al. bootstrap the verification of individual CPU instructions using handwritten circuits, whereas Geppetto uses compiled cryptographic libraries to bootstrap high-level operations (e.g., procedure calls), following our belief that C should be compiled, not interpreted. Compilation plus bounded bootstrapping can provide up to five orders of magnitude faster performance, though both techniques sacrifice generality compared to unbounded interpretation.

Interpreting CPU instructions means that Ben-Sasson et al. natively avoid the redundancy of executing both branches of an if-else statement in the source program. However, the interpretation circuit is repeated for every instruction and contains elements that are not active for every instruction, and hence could benefit from Geppetto’s energy-saving circuits' ability to power down unused portions of the CPU verifier. Similarly, programs interpreted in this framework can benefit from Geppetto’s MultiQAP-based approach to state.

### Commit-and-Prove
To our knowledge, commit-and-prove (CP) schemes were first mentioned by Kilian [37]. Canetti et al. [18] define CP schemes in the UC model and realize such schemes in the FZK-hybrid model. Escala and Groth [26] design CP schemes from Groth-Sahai proofs [34].

### Zero Knowledge
Several systems compile high-level functions to zero-knowledge (ZK) proofs [1, 4, 42]. Compilers from Almeida et al. [1] and Meiklejohn et al. [42] build on Σ-protocols [24], while the work of Backes et al. [4] uses Groth-Sahai ZK proofs [34]. For the subset of functionality these systems support, they are likely to outperform Geppetto at least for the prover, but none offer the degree of efficient generality and concise proofs that Geppetto provides.

## 9 Conclusions
Geppetto employs four independent but carefully intertwined techniques: MultiQAPs, QAP-friendly cryptography, bounded bootstrapping, and energy-saving circuits. We increase the efficiency of the prover by orders of magnitude and improve the versatility of its proofs, e.g., by enabling the efficient verification of hidden computations. Geppetto’s scalable compiler exposes this power and flexibility to developers, bringing verifiable computation one step closer to practicality.

## 10 Acknowledgements
The authors gratefully thank Joppe Bos, Olga Ohrimenko, Srinath Setty, Michael Walfish, and the anonymous reviewers.

## References
[1] J. B. Almeida, E. Bangerter, M. Barbosa, S. Krenn, A.-R. Sadeghi, and T. Schneider. A certifying compiler for zero-knowledge proofs of knowledge based on σ-protocols. In Proc. of ESORICS, 2010.
[2] S. Arora and S. Safra. Probabilistic checking of proofs: A new characterization of NP. J. ACM, 45(1):70–122, 1998.
[3] M. Backes, D. Fiore, and R. M. Reischuk. Nearly practical and privacy-preserving proofs on authenticated data. In Proc. of IEEE Symposium on Security and Privacy, 2015.
[4] M. Backes, M. Maffe, and K. Pecina. Automated synthesis of privacy-preserving distributed applications. In Proc. of ISOC NDSS, 2012.
[5] F. Baldimtsi and A. Lysyanskaya. Anonymous credentials light. In Proceedings of ACM CCS, 2013.
[6] P. S. L. M. Barreto and M. Naehrig. Pairing-friendly elliptic curves of prime order. In Selected Areas in Cryptography (SAC), 2006.
[7] E. Ben-Sasson, A. Chiesa, C. Garman, M. Green, I. Miers, E. Tromer, and M. Virza. Zerocash: Decentralized anonymous payments from Bitcoin. In Proc. of the IEEE Symposium on Security and Privacy, 2014.
[8] E. Ben-Sasson, A. Chiesa, D. Genkin, and E. Tromer. Fast reductions from RAMs to delegatable succinct constraint satisfaction problems. In Innovations in Theoretical Computer Science (ITCS), Jan. 2013.
[9] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza. Scalable zero knowledge via cycles of elliptic curves. In Proc. of CRYPTO, 2014.
[10] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza. Succinct non-interactive zero knowledge for a von Neumann architecture. In Proc. of USENIX Security, 2014.
[11] N. Bitansky, R. Canetti, A. Chiesa, and E. Tromer. Recursive composition and bootstrapping for SNARKS and proof-carrying data. In STOC, 2013.
[12] M. Blum, W. Evans, P. Gemmell, S. Kannan, and M. Naor. Checking the correctness of memories. In IEEE Symposium on Foundations of Computer Science (FOCS), 1991.
[13] D. Boneh and M. Franklin. Identity-based encryption from the Weil pairing. Proceedings of IACR CRYPTO, 2001.
[14] W. Bosma, J. Cannon, and C. Playoust. The Magma algebra system. I. The user language. J. Symbolic Comput., 24(3-4), 1997.
[15] A. Bostan and E. Schost. Polynomial evaluation and interpolation on special sets of points. Journal of Complexity, 21(4), 2005.
[16] B. Braun, A. J. Feldman, Z. Ren, S. Setty, A. J. Blumberg, and M. Walfish. Verifying computations with state. In Proc. of the ACM SOSP, 2013.
[17] J. Camenisch and A. Lysyanskaya. Efficient non-transferable anonymous multi-show credential system with optional anonymity revocation. In EUROCRYPT, 2001.
[18] R. Canetti, Y. Lindell, R. Ostrovsky, and A. Sahai. Universally composable two-party and multi-party secure computation. In Proceedings of ACM STOC, 2002.
[19] B. Carbunar and R. Sion. Uncheatable reputation for distributed computation markets. In FC, 2006.
[20] M. Castro and B. Liskov. Practical Byzantine fault tolerance and proactive recovery. ACM Trans. on Comp. Sys., 20(4), 2002.
[21] C. Cocks and R. Pinch. Identity-based cryptosystems based on the Weil pairing. Manuscript, 2001.
[22] G. Cormode, M. Mitzenmacher, and J. Thaler. Practical verified computation with streaming interactive proofs. In Innovations in Theoretical Computer Science, 2012.
[23] C. Costello, C. Fournet, J. Howell, M. Kohlweiss, B. Kreuter, M. Naehrig, B. Parno, and S. Zahur. Geppetto: Versatile verifiable computation. Cryptology ePrint Archive, Report 2014/976, Nov. 2014.
[24] R. Cramer, I. Damgård, and B. Schoenmakers. Proofs of partial knowledge and simplified design of witness hiding protocols. In Proc. of CRYPTO, 1994.
[25] G. Danezis, C. Fournet, M. Kohlweiss, and B. Parno. Pinocchio coin: Building Zerocoin from a succinct pairing-based proof system. In ACM PETShop, 2013.
[26] A. Escala and J. Groth. Fine-tuning Groth-Sahai proofs. Cryptology ePrint Archive, Report 2004/155, Oct. 2013.
[27] K. Fu, M. F. Kaashoek, and D. Mazières. Fast and secure distributed read-only file system. ACM Trans. on Comp. Sys., 20(1), Feb. 2002.
[28] R. Gennaro, C. Gentry, and B. Parno. Non-interactive verifiable computing: Outsourcing computation to untrusted workers. In Proceedings of IACR CRYPTO, 2010.
[29] R. Gennaro, C. Gentry, B. Parno, and M. Raykova. Quadratic span programs and succinct NIZKs without PCPs. In Proc. of EUROCRYPT, 2013.
[30] S. Goldwasser, Y. T. Kalai, and G. N. Rothblum. Delegating computation: Interactive proofs for muggles. In Proc. of the Symposium on Theory of Computing (STOC), 2008.
[31] S. Goldwasser, S. Micali, and C. Rackoff. The knowledge complexity of interactive proof systems. SIAM J. Comput., 18(1), 1989.
[32] P. Golle and I. Mironov. Uncheatable distributed computations. In Proc. of CT-RSA, 2001.
[33] J. Groth. Short pairing-based non-interactive zero-knowledge arguments. In IACR ASIACRYPT, 2010.
[34] J. Groth and A. Sahai. Efficient non-interactive proof systems for bilinear groups. In Proc. of EUROCRYPT, 2008.
[35] K. Karabina and E. Teske. On prime-order elliptic curves with embedding degrees k = 3, 4, and 6. In Proc. of the Conference on Algorithmic Number Theory (ANTS), 2008.
[36] G. Karypis. METIS 5.1.0: A software package for partitioning unstructured graphs, partitioning meshes, and computing fill-reducing orderings of sparse matrices. Technical report, Department of Computer Science, University of Minnesota, Mar. 2013.
[37] J. Kilian. Uses of Randomness in Algorithms and Protocols. PhD thesis, MIT, Apr. 1989.
[38] J. Kilian. A note on efficient zero-knowledge proofs and arguments (extended abstract). In STOC, 1992.
[39] A. E. Kosba, D. Papadopoulos, C. Papamanthou, M. F. Sayed, E. Shi, and N. Triandopoulos. TrueSet: Nearly practical verifiable set computations. In Proc. of USENIX Security, 2014.
[40] C. Lattner and V. Adve. LLVM: A compilation framework for lifelong program analysis and transformation. In Symposium on Code Generation and Optimization, Mar 2004.
[41] R. B. Lee, P. Kwan, J. P. McGregor, J. Dwoskin, and Z. Wang. Architecture for protecting critical secrets in microprocessors. In ISCA, 2005.
[42] S. Meiklejohn, C. C. Erway, A. Küpçü, T. Hinkle, and A. Lysyanskaya. ZKPDL: A language-based system for efficient zero-knowledge proofs and electronic cash. In Proc. of USENIX, 2010.
[43] R. C. Merkle. A certified digital signature. In Proc. of CRYPTO, 1989.
[44] S. Micali. Computationally sound proofs. SIAM J. Comput., 30(4):1253–1298, 2000.
[45] A. Miyaji, M. Nakabayashi, and S. Takano. New explicit conditions of elliptic curve traces for FR-reduction. IEICE Trans. on Fundamentals, 84(5), 2001.
[46] B. Parno, C. Gentry, J. Howell, and M. Raykova. Pinocchio: Nearly practical verifiable computation. In Proc. of the IEEE Symposium on Security and Privacy, May 2013.
[47] B. Parno, J. M. McCune, and A. Perrig. Bootstrapping Trust in Modern Computers. Springer, 2011.
[48] A. Rial and G. Danezis. Privacy-preserving smart metering. In Proc. of the ACM WPES, 2011.
[49] S. Setty, B. Braun, V. Vu, A. J. Blumberg, B. Parno, and M. Walfish. Resolving the conflict between generality and plausibility in verified computation. In EuroSys, 2013.
[50] S. Setty, R. McPherson, A. J. Blumberg, and M. Walfish. Making argument systems for outsourced computation practical (sometimes). In Proc. ISOC NDSS, 2012.
[51] R. Sion. Query execution assurance for outsourced databases. In Proc. of VLDB, 2005.
[52] J. Thaler. Time-optimal interactive proofs for circuit evaluation. In Proc. of IACR CRYPTO, 2013.
[53] P. Valiant. Incrementally verifiable computation or proofs of knowledge imply time/space efficiency. In TCC, 2008.
[54] R. S. Wahby, S. Setty, Z. Ren, A. J. Blumberg, and M. Walfish. Efficient RAM and control flow in verifiable outsourced computation. In Proceedings of the ISOC NDSS, Feb. 2015.
[55] D. A. Wheeler. SLOCCount. http://www.dwheeler.com/sloccount/.

---

This revised text aims to enhance clarity, coherence, and professionalism. It organizes the content into clear sections and sub-sections, and it ensures that the references and citations are properly formatted.