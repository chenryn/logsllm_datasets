Energy-saving runtime conditions
5.01
5.06
1.00
1.68
static
runtime
1 multiplication
5 multiplications
Figure 8: Energy-Saving Circuits. The energy-saving multiplexer
allows us to include an optional circuit that has low cost when unused.
unbounded bootstrapping in previous work (BCTV) [9], which,
with a reported clock rate of 26 milliHz (and a lower 80-bit se-
curity level), would take approximately 29 years.
No source code was available for BCTV, so analyzing the
causes of this large performance gap requires some guesswork.
First, we estimate that one order of magnitude comes from the
different choices of curves.
Second, BCTV use a circuit that checks a general-purpose
CPU transition function for each program instruction. Thus, for
straight-line code like matrix multiplication, they use hundreds
of equations for each operation, whereas Geppetto generally
uses one. BCTV’s interpreter, however, supports RAM access
and data-dependent control ﬂow, while Geppetto’s compilation-
based implementation currently does not, and thus, one might
expect a smaller performance gap on applications making use
of those features. However, recent work [54] indicates that the
compilation-based approach can incorporate these features and
still outperform interpretation by 2-4 orders of magnitude on
straight line code, and 1-3 orders of magnitude on RAM and
data-dependent benchmarks.
Finally, BCTV apply bootstrapping at a very ﬁne granular-
ity. At every step of their CPU, they produce a proof with one
curve, and then they use their second curve to verify that proof
and translate it back into a proof on the ﬁrst curve. Thus, each
CPU instruction requires two bootstrapped proof veriﬁcations,
whereas in this application, each Geppetto proof veriﬁcation
covers 1.7M LLVM instructions.
7.4 Energy-Saving Circuits
As a targeted microbenchmark to evaluate the beneﬁts of
energy-saving circuits (§2.3), in Figure 8, we compare a static
compile-time condition to a runtime condition. The left group
shows a static computation with a single matrix multiplication
and a static computation containing ﬁve multiplications that
takes proportionally longer. On the right, a single computa-
tion supports up to ﬁve multiplications, but is organized using
energy-saving circuits to make the one-multiplication case inex-
pensive. Using this circuit to compute one matrix multiply costs
68% more than the static version (rather than 5×), and costs a
negligible 1% in the ﬁve-multiply case.
268268
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:17 UTC from IEEE Xplore.  Restrictions apply. 
7.5 Compiler
Some previous veriﬁable computations systems do not include a
compiler [22, 52], while those that do [10, 16, 46] have typically
compiled small examples with less than 100 lines of C code. In
contrast, Geppetto’s compiler handles non-trivial cryptographic
libraries, with the largest clocking in at 4,159 SLOC [55] of
complex cryptographic code supporting elliptic curve opera-
tions, including pairing.
8 Related Work
Veriﬁable Computation As discussed in §1, many previous
systems for verifying outsourced computation make undesirable
assumptions about the computation or the prover(s). Recently
however, several lines of work have reﬁned and implemented
protocols for veriﬁable computation that make at most crypto-
graphic assumptions [9, 46, 49, 52]. These systems offer dif-
ferent tradeoffs between generality, efﬁciency, interactivity, and
zero-knowledge, but they share a common goal of achieving
strong guarantees with practical efﬁciency.
However, these systems typically verify a single program at
a time, leading to performance issues for state shared across
computations (see §2.1.1). We compare and contrast alternate
techniques for handling state in §2.1.4.
As discussed in §5 and §7.3.1, Ben-Sasson et al. [9] instanti-
ate and implement suitable elliptic curves for unbounded boot-
strapping. Geppetto can leverage unbounded bootstrapping, but
it also supports bounded bootstrapping for better performance.
Ben-Sasson et al. bootstrap the veriﬁcation of individual CPU
instructions using handwritten circuits, whereas Geppetto uses
compiled cryptographic libraries to bootstrap high-level opera-
tions (e.g., procedure calls) following our belief that C should
be compiled, not interpreted. Compilation plus bounded boot-
strapping can provide up to ﬁve orders of magnitude faster per-
formance, though both techniques sacriﬁce generality compared
with unbounded interpretation.
Interpreting CPU instructions means that Ben-Sasson et al.
natively avoid the redundancy of executing both branches of
an if-else branch in the source program, but the interpretation
circuit itself is repeated for every instruction and contains cir-
cuit elements that are not active for every instruction, and hence
could beneﬁt from Geppetto’s energy-saving circuit’s ability to
power down unused portions of the CPU veriﬁer. Similarly, pro-
grams interpreted in this framework can beneﬁt from Geppetto’s
MultiQAP-based approach to state.
Commit-and-Prove To our knowledge, commit-and-prove
(CP) schemes are ﬁrst mentioned by Kilian [37]. Canetti et
al. [18] deﬁne CP schemes in the UC model and realize such
schemes in the FZK-hybrid model. Escala and Groth [26] de-
sign CP schemes from Groth-Sahai proofs [34].
Zero Knowledge Several systems compile high-level func-
tions to zero-knowledge (ZK) proofs [1, 4, 42]. Compilers
from Almeida et al. [1] and Meiklejohn et al. [42] build on Σ-
protocols [24], while the work of Backes et al. [4] uses Groth-
Sahai ZK proofs [34]. For the subset of functionality these sys-
tems support, they are likely to outperform Geppetto at least for
the prover, but none offer the degree of efﬁcient generality and
concise proofs that Geppetto provides.
9 Conclusions
Geppetto employs four independent but carefully intertwined
techniques: MultiQAPs, QAP-friendly cryptography, bounded
bootstrapping, and energy-saving circuits. We increase the ef-
ﬁciency of the prover by orders of magnitude, and we improve
the versatility of its proofs, e.g., by enabling the efﬁcient veri-
ﬁcation of hidden computations. Geppetto’s scalable compiler
exposes this power and ﬂexibility to developers, bringing veri-
ﬁable computation one step closer to practicality.
10 Acknowledgements
The authors gratefully thank Joppe Bos, Olga Ohrimenko, Sri-
nath Setty, Michael Walﬁsh, and the anonymous reviewers.
References
[1] J. B. Almeida, E. Bangerter, M. Barbosa, S. Krenn, A.-R.
Sadeghi, and T. Schneider. A certifying compiler for zero-
knowledge proofs of knowledge based on σ-protocols. In Proc.
of ESORICS, 2010.
[2] S. Arora and S. Safra. Probabilistic checking of proofs: A new
characterization of NP. J. ACM, 45(1):70–122, 1998.
[3] M. Backes, D. Fiore, and R. M. Reischuk. Nearly practical and
privacy-preserving proofs on authenticated data. In Proc. of IEEE
Symposium on Security and Privacy, 2015.
[4] M. Backes, M. Maffe, and K. Pecina. Automated synthesis of
In Proc. of ISOC
privacy-preserving distributed applications.
NDSS, 2012.
[5] F. Baldimtsi and A. Lysyanskaya. Anonymous credentials light.
In Proceedings of ACM CCS, 2013.
[6] P. S. L. M. Barreto and M. Naehrig. Pairing-friendly elliptic
curves of prime order. In Selected Areas in Cryptography (SAC),
2006.
[7] E. Ben-Sasson, A. Chiesa, C. Garman, M. Green, I. Miers,
E. Tromer, and M. Virza. Zerocash: Decentralized anonymous
payments from Bitcoin. In Proc. of the IEEE Symposium on Se-
curity and Privacy, 2014.
[8] E. Ben-Sasson, A. Chiesa, D. Genkin, and E. Tromer. Fast re-
ductions from RAMs to delegatable succinct constraint satisfac-
tion problems. In Innovations in Theoretical Computer Science
(ITCS), Jan. 2013.
[9] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza. Scalable
zero knowledge via cycles of elliptic curves. In Proc. of CRYPTO,
2014.
[10] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza. Succinct
non-interactive zero knowledge for a von Neumann architecture.
In Proc. of USENIX Security, 2014.
269269
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:17 UTC from IEEE Xplore.  Restrictions apply. 
[11] N. Bitansky, R. Canetti, A. Chiesa, and E. Tromer. Recursive
composition and bootstrapping for SNARKS and proof-carrying
data. In STOC, 2013.
[12] M. Blum, W. Evans, P. Gemmell, S. Kannan, and M. Naor.
Checking the correctness of memories. In IEEE Symposium on
Foundations of Computer Science (FOCS), 1991.
[13] D. Boneh and M. Franklin. Identity-based encryption from the
Weil pairing. Proceedings of IACR CRYPTO, 2001.
[14] W. Bosma, J. Cannon, and C. Playoust. The Magma algebra sys-
tem. I. The user language. J. Symbolic Comput., 24(3-4), 1997.
[15] A. Bostan and E. Schost. Polynomial evaluation and interpolation
on special sets of points. Journal of Complexity, 21(4), 2005.
[16] B. Braun, A. J. Feldman, Z. Ren, S. Setty, A. J. Blumberg, and
M. Walﬁsh. Verifying computations with state. In Proc. of the
ACM SOSP, 2013.
[17] J. Camenisch and A. Lysyanskaya.
Efﬁcient non-trans-
ferable anonymous multi-show credential system with optional
anonymity revocation. In EUROCRYPT, 2001.
[18] R. Canetti, Y. Lindell, R. Ostrovsky, and A. Sahai. Universally
In
composable two-party and multi-party secure computation.
Proceedings of ACM STOC, 2002.
[19] B. Carbunar and R. Sion. Uncheatable reputation for distributed
computation markets. In FC, 2006.
[20] M. Castro and B. Liskov. Practical Byzantine fault tolerance and
proactive recovery. ACM Trans. on Comp. Sys., 20(4), 2002.
[21] C. Cocks and R. Pinch. Identity-based cryptosystems based on
the Weil pairing. Manuscript, 2001.
[22] G. Cormode, M. Mitzenmacher, and J. Thaler. Practical veriﬁed
computation with streaming interactive proofs. In Innovations in
Theoretical Computer Science, 2012.
[23] C. Costello, C. Fournet, J. Howell, M. Kohlweiss, B. Kreuter,
M. Naehrig, B. Parno, and S. Zahur. Geppetto: Versatile veriﬁ-
able computation. Cryptology ePrint Archive, Report 2014/976,
Nov. 2014.
[24] R. Cramer, I. Damg˚ard, and B. Schoenmakers. Proofs of partial
knowledge and simpliﬁed design of witness hiding protocols. In
Proc. of CRYPTO, 1994.
[25] G. Danezis, C. Fournet, M. Kohlweiss, and B. Parno. Pinocchio
coin: Building Zerocoin from a succinct pairing-based proof sys-
tem. In ACM PETShop, 2013.
[26] A. Escala and J. Groth. Fine-tuning Groth-Sahai proofs. Cryp-
tology ePrint Archive, Report 2004/155, Oct. 2013.
[27] K. Fu, M. F. Kaashoek, and D. Mazi`eres. Fast and secure dis-
tributed read-only ﬁle system. ACM Trans. on Comp. Sys., 20(1),
Feb. 2002.
[28] R. Gennaro, C. Gentry, and B. Parno. Non-interactive veriﬁable
In
computing: Outsourcing computation to untrusted workers.
Proceedings of IACR CRYPTO, 2010.
[29] R. Gennaro, C. Gentry, B. Parno, and M. Raykova. Quadratic
In Proc. of
span programs and succinct NIZKs without PCPs.
EUROCRYPT, 2013.
[30] S. Goldwasser, Y. T. Kalai, and G. N. Rothblum. Delegating com-
putation: Interactive proofs for muggles. In Proc. of the Sympo-
sium on Theory of Computing (STOC), 2008.
[31] S. Goldwasser, S. Micali, and C. Rackoff. The knowledge com-
plexity of interactive proof systems. SIAM J. Comput., 18(1),
1989.
[32] P. Golle and I. Mironov. Uncheatable distributed computations.
In Proc. of CT-RSA, 2001.
[33] J. Groth. Short pairing-based non-interactive zero-knowledge ar-
guments. In IACR ASIACRYPT, 2010.
[34] J. Groth and A. Sahai. Efﬁcient non-interactive proof systems for
bilinear groups. In Proc. of EUROCRYPT, 2008.
[35] K. Karabina and E. Teske. On prime-order elliptic curves with
embedding degrees k = 3, 4, and 6. In Proc. of the Conference on
Algorithmic Number Theory (ANTS), 2008.
[36] G. Karypis. METIS 5.1.0: A software package for partition-
ing unstructured graphs, partitioning meshes, and computing ﬁll-
reducing orderings of sparse matrices. Technical report, Depart-
ment of Computer Science, University of Minnesota, Mar. 2013.
[37] J. Kilian. Uses of Randomness in Algorithms and Protocols. PhD
thesis, MIT, Apr. 1989.
[38] J. Kilian. A note on efﬁcient zero-knowledge proofs and argu-
ments (extended abstract). In STOC, 1992.
[39] A. E. Kosba, D. Papadopoulos, C. Papamanthou, M. F. Sayed,
E. Shi, and N. Triandopoulos. TrueSet: Nearly practical veriﬁ-
able set computations. In Proc. of USENIX Security, 2014.
[40] C. Lattner and V. Adve. LLVM: A compilation framework for
lifelong program analysis and transformation. In Symposium on
Code Generation and Optimization, Mar 2004.
[41] R. B. Lee, P. Kwan, J. P. McGregor, J. Dwoskin, and Z. Wang.
Architecture for protecting critical secrets in microprocessors. In
ISCA, 2005.
[42] S. Meiklejohn, C. C. Erway, A. K¨upc¸ ¨u, T. Hinkle, and A. Lysyan-
skaya. ZKPDL: A language-based system for efﬁcient zero-
knowledge proofs and electronic cash. In Proc. of USENIX, 2010.
[43] R. C. Merkle. A certiﬁed digital signature. In Proc. of CRYPTO,
1989.
[44] S. Micali. Computationally sound proofs. SIAM J. Comput.,
30(4):1253–1298, 2000.
[45] A. Miyaji, M. Nakabayashi, and S. Takano. New explicit condi-
tions of elliptic curve traces for FR-reduction. IEICE Trans. on
Fundamentals, 84(5), 2001.
[46] B. Parno, C. Gentry, J. Howell, and M. Raykova. Pinocchio:
In Proc. of the IEEE
Nearly practical veriﬁable computation.
Symposium on Security and Privacy, May 2013.
[47] B. Parno, J. M. McCune, and A. Perrig. Bootstrapping Trust in
Modern Computers. Springer, 2011.
[48] A. Rial and G. Danezis. Privacy-preserving smart metering. In
Proc. of the ACM WPES, 2011.
[49] S. Setty, B. Braun, V. Vu, A. J. Blumberg, B. Parno, and M. Wal-
ﬁsh. Resolving the conﬂict between generality and plausibility in
veriﬁed computation. In EuroSys, 2013.
[50] S. Setty, R. McPherson, A. J. Blumberg, and M. Walﬁsh. Making
argument systems for outsourced computation practical (some-
times). In Proc. ISOC NDSS, 2012.
[51] R. Sion. Query execution assurance for outsourced databases. In
Proc. of VLDB, 2005.
[52] J. Thaler. Time-optimal interactive proofs for circuit evaluation.
In Proc. of IACR CRYPTO, 2013.
[53] P. Valiant.
Incrementally veriﬁable computation or proofs of
knowledge imply time/space efﬁciency. In TCC, 2008.
[54] R. S. Wahby, S. Setty, Z. Ren, A. J. Blumberg, and M. Walﬁsh.
Efﬁcient RAM and control ﬂow in veriﬁable outsourced compu-
tation. In Proceedings of the ISOC NDSS, Feb. 2015.
[55] D. A. Wheeler. SLOCCount. http://www.dwheeler.com/
sloccount/.
270270
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:17 UTC from IEEE Xplore.  Restrictions apply.