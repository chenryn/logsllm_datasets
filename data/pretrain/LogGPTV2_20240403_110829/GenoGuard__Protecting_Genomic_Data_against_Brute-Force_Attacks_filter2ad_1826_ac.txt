Depending on the value of SNV mi+1, encoding proceeds from
the node that represents M1,i with order j at depth i to depth
i + 1 as follows:
, U 0
, U 3j
i , Lj
i + (U j
i − Lj
i+1) = [Lj
If mi+1 = 0, go to the left branch and attach an inter-
i ) × P (mi+1 =
val [L3j
0|M1,i)).
i+1
If mi+1 = 1, go to the middle branch and attach
i ) ×
i+1 ) = [Lj
i + (U j
an interval [L3j+1
P (mi+1 = 0|M1,i), Lj
i ) × (P (mi+1 =
i − Lj
i+1
i + (U j
0|M1,i) + P (mi+1 = 1|M1,i))).
If mi+1 = 2, go to the right branch and attach
i ) ×
i − Lj
an interval [L3j+2
(P (mi+1 = 0|M1,i) + P (mi+1 = 1|M1,i)), U j
i+1
i ).
i+1 ) = [Lj
i − Lj
i + (U j
, U 3j+2
, U 3j+1
So far, we have not devoted much content to the discussion
of computing the conditional probability P (mi+1|M1,i), which
will be elaborated later. For now, we focus on how the
encoding scheme works on the high level. Finally, when we
reach the leaf node with the interval [Lj
n), we pick a
seed S uniformly from this range to encode the corresponding
n, U j
451451
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:07 UTC from IEEE Xplore.  Restrictions apply. 
L0
Fig. 4: A toy example of the encoding process. The sequence is of length 3. The sequence that needs to be encoded is (0, 2, 1),
shown in red dashed line. Take the second step as an example. We have P (m2 = 0|m1 = 0) = 0.6, P (m2 = 1|m1 = 0) =
−
0.3, P (m2 = 2|m1 = 0) = 0.1, and [L0
1) × P (m2 = 0|m1 = 0)) = [0, 0.36); (ii) [L1
1) × (P (m2 =
2 ) = [L0
0|m1 = 0) + P (m2 = 1|m1 = 0))) = [0.36, 0.54); (iii) [L2
1) × (P (m2 = 0|m1 = 0) + P (m2 = 1|m1 =
0)), U 0
1 ) = [0.54, 0.6). Note that the intervals in black solid line do not need to be computed when encoding (0, 2, 1). When we
reach the leaf [0.576, 0.594], we pick a seed randomly from this range, e.g., 0.583.
1 ) = [0, 0.6). Hence the next three intervals are: (i) [L0
1) × P (m2 = 0|m1 = 0), L0
− L0
1 + (U 0
2 ) = [L0
− L0
1 + (U 0
, U 2
2 ) = [L0
1 + (U 0
− L0
, U 0
2
1 + (U 0
1
, L0
1
, U 0
1
, U 1
2
1
2
1
1
sequence. In the following, we give a toy example of this
encoding process.
Example (Encoding): Suppose all sequences are of length 3.
The sequence M that needs to be encoded is (0, 2, 1). Assume
P (m1 = 0) = 0.6, P (m2 = 2|m1 = 0) = 0.1, and P (m3 =
1|M1,2) = 0.3. The encoding process is illustrated in Figure
4.
In Step 4 (in Figure 3), after the encoding is ﬁnished,
the seed, as a plaintext, is fed into a conventional password-
based encryption (PBE) [16] by using the password chosen
by the patient (at Step 1). This step is a direct application of
PBE, so we skip the details here. The encrypted seed is then
sent to the biobank (step 5) that, as a centralized database,
receives requests (step 6) from users and responds with the
corresponding encrypted data (step 7).
B. Decoding
When an encrypted seed is sent to the user, the user ﬁrst
performs a password-based decryption by using the patient’s
password (step 8). As discussed, the user could be the patient
himself, or the patient can provide his password on behalf of
the user. We discuss more on these scenarios in Section VII.
Once the user has the plaintext seed, the decoding process
(step 9) is the same as the encoding process. Given a seed
S ∈ [0, 1), at each step, the algorithm computes three intervals
for the three branches, chooses the interval in which the seed
S falls, and goes down along the ternary tree. Once it reaches
a leaf node, it outputs the path from the root to this leaf with
all chosen SNVs.
C. Moving to Finite Precision
As we mentioned,
the current seed space S is a real
number domain with inﬁnite precision. However, considering
the size of a DNA sequence, with inﬁnite precision, we could
end up having a very long ﬂoating-point representation for a
sequence, which could cause a high storage overhead. Also,
we cannot afford to enumerate all possible sequences to ﬁnd
the smallest precision to represent all the corresponding real
numbers. Moreover, if we work with ﬁnite precision and decide
on the precision a priori (without enumerating the sequences),
this could result in an inaccurate representation of the sequence
distribution, thus causing a security loss. In this subsection, we
describe how our proposed DTE scheme can be implemented
with ﬁnite precision and with negligible effect on security.
For a sequence of length n, with each SNV taking three
possible values, we require at least (n · log2 3) bits to store
the sequence.4 To optimally implement the scheme, we ﬁrst
select a storage overhead parameter h (h > log2 3). We use hn
bits to encode one sequence. As before, the algorithm works
by segmenting intervals based on conditional probabilities. In
this case, however, an interval is represented by integers, and
not by real numbers of inﬁnite precision. The root interval is
[0, 2hn−1]. To better describe the scheme, suppose (during the
encoding) we reach the j-th node at depth i on the tree (the
root has depth 0 and the leaves have depth n). The interval
of this node is denoted by [Lj
inclusive, which is
different from the inﬁnite-precision case). The segmentation
rules are described in the following.
i ] (U j
i , U j
i
We compute the conditional probabilities for the three
branches, PL (left branch), PC (middle branch) and PR (right
branch) respectively. Without loss of generality, we assume the
three probabilities are ordered as PL ≥ PC ≥ PR (the follow-
ing algorithm is similar for different orderings). We initialize
a variable avail = U j
i + 1 to denote the size of the seed
space available for allocation. The sizes of seed space that will
be allocated to the three branches are denoted by allocL (left
branch), allocC (middle branch), and allocR (right branch).
Note that allocL + allocC + allocR = U j
i + 1. The
algorithm advances as follows:
i − Lj
i − Lj
4We do not consider compression techniques here.
452452
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:07 UTC from IEEE Xplore.  Restrictions apply. 
•
•
•
i+1] = [Lj
, U 3j
[L3j
i , Lj
i+1
, U 3j+1
i+1 ] = [Lj
[L3j+1
allocL + allocC − 1];
i+1
i+1 ] = [Lj
[L3j+2
i+1
i + allocL − 1];
i + allocL, Lj
i +
(i)
(ii)
(iii)
n−i−1
avail
, then allocR = 3n−i−1, otherwise
If PR  0.
(3)
Due to the constraint of the dataset size, k normally can
only take small values to avoid overﬁtting of the model.
in HapMap diploid genotype datasets, N is
For example,
smaller than 200 for each population. For k = 3, there are
81 possible conﬁgurations for Mi−k+1,i+1, which makes the
average frequency for each conﬁguration quite small, hence the
model has modest statistical signiﬁcance due to this sparsity
problem. We introduce this model as a possible direction and
use it to emphasize the importance of higher-order correlation,
which will be shown in the evaluation. The k-th-order Markov
chain serves as a bridge to the next more promising model.
3) Modeling with recombination rates: Although higher-
order Markov models might better model genome sequences,
these models seem unlikely to be practical because of the
difﬁculty of accurately estimating all the necessary parameters
in available datasets. Inspired by the modeling method used
by Li and Stephens [19], we can address the problem from a
different viewpoint. Given a set of k existing haploid genotypes
{h1, h2, ..., hk}, another haploid genotype hk+1 to be observed
is an imperfect mosaic of h1, h2, ..., hk, due to genetic recom-
bination and mutation (Figure 5). This reproduction process is
actually a hidden Markov model with a sequence of n states
(the number of loci in a haploid genotype):
•
• Markov chain states: State j, Xj, can take a value
from 1 to k, representing the original haploid genotype
for locus j;
Symbol emission probabilities: hi,j denotes the al-
lele (0 or 1) at locus j in haploid genotype i. To
produce hk+1, at state j, an allele hk+1,j is output
with a certain probability, depending on the allele of
the original haploid genotype (Xj) and the mutation
rate;
Transition probabilities: Transition probabilities
from state j to state j +1 depend on the recombination
rate between locus j and j + 1.
•
that
With this model, we can compute the probability of
is, P (hk+1|h1, ..., hk). The
a haploid genotype hk+1,