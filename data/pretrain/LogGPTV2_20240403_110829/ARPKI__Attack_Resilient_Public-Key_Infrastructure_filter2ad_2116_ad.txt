### Asymmetric Key Modeling
To model asymmetric keys, we use unique (fresh) terms to represent long-term private keys (e.g., `~ltkA`). The corresponding public key is derived using an abstract one-way function `pk`.

### Domain Registration and Verification
The `OnlyOne` action ensures that each domain can only be registered once at the ILS. The state fact `ILS-toAdd` stores a list of new ARCerts that must be added. The message `MSG1`, which is sent out, is a macro that expands to include the relevant parts of the registration request `RegReq` and is signed by the ILS.

### Rule: A_Receive_SignedCerts
```plaintext
rule A_Receive_SignedCerts:
[ In() ]
--[ ReceivedCASignedARCert($A, ~ltkA) ]->
[ Out() ]
```

### Rule: ILS_Reg_ILS
```plaintext
rule ILS_Reg_ILS:
let contactCA = $CA1 in
[ DomainCombineARCertA($A, CertA, $CA1, $CA2)
, In()
, In() ]
[ In()
, !Ltk($ILSk, ~ltkK)
, !Ltk($CA1, ~ltkCAx1)
, !Ltk($CA2, ~ltkCAx2)
, ILStoAdd(~ltkK, $ILSk, AddList) ]
--[ NotEq(~ltkCAx1, ~ltkCAx2)
, ReceivedCASignedARCert($A, ~ltkA) ]->
[ DomainHasARCertA($A, contactCA, ARCertA) ]
--[ OnlyOne() ]->
[ Out()
, ILStoAdd(~ltkK, $ILSk, AddList + ARCertA) ]
```
- **NotEq(x, y)**: Ensures the rule can only be triggered for two different CAs.
- **OnlyOne()**: Ensures each ARCert, represented by its key `~ltkA`, is registered only once by an honest participant.

### Message Flows for Domain Registration
We describe the remaining message flows for the domain registering the new ARCert and the creation of the registration confirmation by CA1, CA2, and ILS. These message flows are given by Steps 1–2 and Steps 7–9 in Figure 4. Each step involves a message exchange between two parties, with the previous receiver becoming the sender of the next message.

### Rule: ILS_Reg_A1
```plaintext
rule ILS_Reg_A1:
let ILSlist = $ILSk in
[ DomainHasARCertA($A, $CA1, ARCertA)
, !Ltk($A, ~ltkA)
, !Ltk($CA1, ~ltkCAx1)
, !Ltk($CA2, ~ltkCAx2) ]
--[ OnlyOne() ]->
[ Out()
, DomainHasARCertA($A, $CA1, ARCertA) ]
```

### Rule: ILS_Reg_CA1_Forward
```plaintext
rule ILS_Reg_CA1_Forward:
[ In() ] --[ ]->
[ Out()
, ContactCAStateILSReg($A, $CA1, RegReq) ]
```
- **ContactCAStateILSReg**: CA1 keeps state of the received message and performs additional checks later.

### Rule: ILS_Reg_ILS
```plaintext
rule ILS_Reg_ILS:
[ In() ] --[ ]->
[ Out() ]
```
- **Private Keys**: Used exclusively for signature verification.

### Rule: ILS_Reg_CA2
```plaintext
rule ILS_Reg_CA2:
[ In()
, !Ltk($CA2, ~ltkCAx2)
, !Ltk($ILSk, ~ltkK)
, !Ltk($CA1, ~ltkCAx1) ]
--[ OnlyOne() ]->
[ Out() ]
```
- **OnlyOne()**: Ensures the domain is only registered once.

### Rule: ILS_Reg_CA1
```plaintext
rule ILS_Reg_CA1:
[ In()
, !Ltk($CA1, ~ltkCAx1)
, !Ltk($ILSk, ~ltkK)
, !Ltk($CA2, ~ltkCAx2)
, ContactCAStateILSReg($A, $CA1, RegReq) ]
--[ OnlyOne()
, AcceptedARCert($A, ~ltkA) ]->
[ Out() ]
```
- **AcceptedARCert**: Proof of registration used later by the domain.

### Rule: ILS_Reg_A2
```plaintext
rule ILS_Reg_A2:
[ DomainHasARCertA($A, $CA1, ARCertA)
, !Ltk($CA1, ~ltkCAx1)
, !Ltk($CA2, ~ltkCAx2)
, !Ltk($ILSk, ~ltkK)
, In() ]
--[ HasARCertNoLog($A, ~ltkA, ARCertANotVerified)
, NotEq(~ltkCAx1, ~ltkCAx2)
, NotEq(~ltkCAx1, ~ltkK)
, NotEq(~ltkCAx2, ~ltkK)
, ReceivedARCert($A, ~ltkA) ]->
[ Out(ARCertANotVerified)
, StoredARCertA($A, ARCertA, ARCertANotVerified) ]
```
- **StoredARCertA**: Stores the ARCert for future connection requests.

### Adversary Model
Tamarin's adversary model assumes full network control. The adversary can eavesdrop, modify, and insert messages. Additionally, the adversary can compromise ILSes and CAs. For the main security property, we assume the adversary has compromised at most two such entities.

### Analysis Guarantees
**Proof Goal**: Whenever (i) a domain A has been registered initially by an honest party with an ARCert; and (ii) a browser later accepts a connection to domain A with some ARCert, then the adversary does not know the private key for that ARCert.

**Analysis**: We analyze this proof goal twice: once for at most two compromised entities, and once for three or more compromised entities. The formula that encodes this property in Tamarin is shown in Figure 7.

### Co-design
We developed our formal specification of ARPKI in tandem with its implementation, working from a single evolving design document. Tamarin played a critical role in making all details of the protocol design precise and uncovering missing details.

### Implementation
Our prototype provides all the features required for deployment, including:
- Communication flows and processing logic for message exchanges.
- Fully implemented Integrity Tree and publishing capabilities.
- Validator process for monitoring ILSes and publishing misbehaviors.
- CA process for producing online confirmations.
- Client process, i.e., a browser extended with support for full ARCert validation.
- Protocol for accountable synchronization.
- Domain tool for managing ARCerts.

### Implementation Choices
- **ARCert Certificates**: Concatenation of standard X.509 certificates with ARPKI-related fields.
- **Implementation Language**: C++ with OpenSSL for cryptographic operations.
- **Communication Module**: Multi-threaded work queue with TCP sockets.
- **Integrity Tree**: Implemented as a separate database module with SHA-512 and RSA-2048.
- **ARPKI TLS Server**: Extended Nginx HTTP server for periodic interaction with ARPKI infrastructure.
- **Client**: Extended Chromium web browser for ARCert validation.

### Performance Evaluation
We analyzed the performance of our prototype in a real-world scenario. The testbed included all entities, and measurements were taken over 1000 test runs. The total processing time for various requests is presented in Table 1.

### Table 1: Total Processing Time (in milliseconds)
| Request   | Entity 1 | Entity 2 | Entity 3 |
|-----------|----------|----------|----------|
| RegReq    |          |          |          |
| UpdateReq |          |          |          |
| CCReq     |          |          |          |

This table provides the average processing times for the specified requests across the different entities.