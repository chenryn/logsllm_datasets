create table test(c1 int, c2 int, c3 timestamp, c4 point);  
create index idx on test using gist(c3,c2,c4);  
select * from test where c3 between '2017-01-01' and '2017-01-02' and c2=1 order by c4;  
这样的查询效率并不高。  
```  
而前面的例子对应的是驱动列的点扫描，所以效率很好。  
![pic](20170620_01_pic_001.jpg)  
对于有范围扫描的场景，应该如何应对呢？  
1、使用分区表，例如使用C3字段作为分区列，按时间进行分区。建立索引时将C3列摘除。  
```  
create table test_20170101 (like test, check c3 between '2017-01-01' and '2017-01-02');  
create index idx on test_20170101 using gist (c2, c4);  
select * from test_20170101 where c2=1 order by c4;  
```  
或者使用内核优化，让内核支持分区索引。  
### 内核优化  
分区索引，按时间进行分区，建立分区索引。  
在扫描时，自动检索对应的索引分区。达到 分区表+独立索引 同样的效果。  
### GIS领域朋友的建议
收到来自PostgreSQL社区GIS领域朋友的建议，为了防止给学习GIS的同学带来误导(为了测试方便，文中大量使用了内置的几何point类型，并非GIS类型。)，请参考如下建议。   
感谢。    
```
select DropGeometryColumn ('cb','geom');
drop table if exists  cb;
create table cb( 
	objectid int not null, --共享单车编号
	c1 int,                -- 0表示未使用，其它表示已使用  
	c2 int,                -- 共享单车属于哪家运营公司
	constraint pk_cb_objectid primary key (objectid)
);  
--GIS必须明确指出地图单位是什么
--民用GPS小数6位精度(6位大约为10米级精度,8位已经是亚米级精度)已经很高了,再多没有意义
--c3 point  -- 共享单车当前位置, point在文章里只能算是自定义类型(实际上是PostgreSQL内置的几何点类型),这会给参考您文章的学习GIS的同学造成困扰
--where c1=0 and c2=100 and c3  point(23,3175) limit 1000;
--搜索某个点附近1000距离内，属于某个公司的，没有使用的共享单车。
--这样的查询条件在测试没问题,但是别人看了会造成困扰，因为没有地图单位,这个1000距离不知道是什么东西
--新版本的postgis文档中已经没有ST_GeomFromText ('POINT(121.403833486783 31.1425794813889)', 4326)这样的函数了,虽然还支持,未来可能会删除
--请使用ST_SetSRID(ST_GeomFromText ('POINT(121.403833486783 31.1425794813889)'),4326)或ST_GeomFromText ('SRID=4326;POINT(121.403833486783 31.1425794813889)')
--发现好几篇您写的关于gis的文章都有类似的问题,希望关于gis方面的文章严格按postgis标准
--创建空间字段,根据空间参考不同,地图单位可能为米、度或其它，统称地图单位
select AddGeometryColumn ('cb','geom',4326,'POINT',2); -- 共享单车当前位置,GPS采用4326 ,类型为点,二维坐标
--创建空间索引
create index gidx_cb_geom on cb using gist(geom);
create index gidx_cb_geomgraphy on cb using gist((geom::geography));
--坐标范围限制在中国[73.406586, 3.408477, 135.085831, 53.880950]
do $$
	declare vStart bigint;
	declare vEnd bigint;
	declare MAXVALE bigint;
	declare INTERVAL bigint;
begin
	MAXVALE := 20000000;
	INTERVAL := 1000; vStart := 1 ;vEnd := INTERVAL;
	loop		
		-- 20家公司比较符合市场现状,更能反应实际情况
		insert into cb 
			select id,(random()*1)::integer, (random()*(20-1)+1)::integer,
				ST_SetSRID(ST_Point(
					round((random()*(135.085831-73.406586)+73.406586)::numeric,6),
					round((random()*(53.880950-3.408477)+3.408477)::numeric,6)
				),4326)
			from generate_series(vStart,vEnd) as id;
		raise notice  '%', vEnd;
		vStart := vEnd + 1; vEnd := vEnd + INTERVAL;
		if( vEnd > MAXVALE ) then
			return;	
		end if;
	end loop;
end$$;
--ix,iy为gps经度和纬度(单位为度)
--idistance为搜索距离(单位为米)
drop function if exists spatialQuery(ix float,iy float,idistance float);
create or replace function spatialQuery(ix float,iy float,idistance float)
returns table(oobjectid integer,oc1 integer,oc2 integer,odistance float,ogeom geometry)
as $$
	declare	
		vrecord record;
		vcurrentpoint geometry;
		vspheroid  spheroid;
	begin
		vspheroid := 'SPHEROID["WGS84",6378137,298.257223563]' ;  --WGS84椭球体参数定义
		vcurrentpoint := ST_SetSRID(ST_Point(ix,iy),4326);  --
		--查找圆心为vcurrentpoint,半径idistance米范围内未使用的共享单车,并按距离排序,只返回1千行
		return query 	( with cte as(
							select * from cb
								where ST_DWithin(geom::geography ,vcurrentpoint::geography,idistance,true) 
						) select objectid,c1,c2,ST_DistanceSpheroid(geom,vcurrentpoint,vspheroid),geom 
							from cte where c1=0 order by ST_DistanceSpheroid(geom,vcurrentpoint,vspheroid)  limit 1000 );
	end;
$$ language plpgsql;
select * from spatialQuery(102,24,5000);
--查询计划
explain (analyze,verbose,costs,buffers,timing) 
with cte as(
	select * from cb
		where ST_DWithin(geom::geography ,ST_SetSRID(ST_Point(102,24),4326)::geography,5000,true) 
) select objectid,c1,c2,ST_DistanceSpheroid(geom,ST_SetSRID(ST_Point(102,24),4326),'SPHEROID["WGS84",6378137,298.257223563]'),geom 
	from cte where c1=0 order by ST_DistanceSpheroid(geom,ST_SetSRID(ST_Point(102,24),4326),'SPHEROID["WGS84",6378137,298.257223563]')  limit 1000;
```
## 小结  
1、如果要构建复合索引，那么为了达到最好的效果，所有的驱动列使用等值查询是最好的，使用范围查询会导致大范围的搜索。  
2、如果需要使用复合索引进行排序，那么要么按所有字段排序，要么按驱动列等值条件+suffix列排序。  
3、为了减少索引扫描的离散度，建议使用cluster对数据按索引进行重排。  
[《索引顺序扫描引发的堆扫描IO放大背后的统计学原理与解决办法 - PostgreSQL index scan enlarge heap page scans when index and column correlation small.》](../201404/20140426_01.md)   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")