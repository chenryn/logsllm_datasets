    097eee00  01 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    097eee10  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    097eee20  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    097eee30  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    097eee40  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    097eee50  00 00 00 00 00 00 00 00-00 00 0c 00 00 00 00 00  ................
    097eee60  0b 00 23 00 00 00 00 00-00 00 00 00 00 00 00 00  ..#.............
    097eee70  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
缓冲区的地址0 x097eee00用于存储解析“Flags”字段的结果。
下面的C代码来自IDA Pro的sub_8049FA2函数，用来处理“Flags”字段:
    //parse the Flags field which length is 0x24, the result is stored in param a1.  v20 points to the offset of data in the glyph object.
    do 
          {
            if ( v14 )
            {
              v28 -= v14;
              v54 = v28;
              if ( v28  *(_DWORD *)(a4 + 8) )
                  return 5133;
                v14 = *(_BYTE *)v20;
              }
              ++v20;
              ++v27;
              --v28;
              if ( v20 > *(_DWORD *)(a4 + 8) )
                return 5133;
            }
          }
          while ( v28 > 0 );
          if ( v14 )
            return 5121;
          v30 = v55;
          v31 = 0;
          v32 = (char *)a1;  // a1 stores the result of parsing Flags field. |01 22 26 35 34 36 33 32 1f ed ed ed 03 14 16 00 ed ed ed ed ed ed ed 23 22 26 35 34 26 35 34 12 35 34 36 33|
          v33 = 0;
          v51 = a1;
          v48 = 0;
在解析完“Flags”字段之后,我们看到了以下调试信息:
    0:022> t
    eax=097ef6e0 ebx=097eee24 ecx=00000000 edx=00000006 esi=2952cfc4 edi=00060000
    eip=0959a1ab esp=2911e5f8 ebp=2911e608 iopl=0         nv up ei pl zr na pe nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246
    CoolType!CTInit+0x45e60:
    0959a1ab 8b7d30          mov     edi,dword ptr [ebp+30h] ss:002b:2911e638=00000024                       
    0:022> db ebx-24 L30
    097eee00  01 22 26 35 34 36 33 32-1f ed ed ed 03 14 16 00  ."&54632........
    097eee10  ed ed ed ed ed ed ed 23-22 26 35 34 26 35 34 12  .......#"&54&54.
    097eee20  35 34 36 33 00 00 00 00-00 00 00 00 00 00 00 00  5463............               
    0:022> db esi
    2952cfc4  32 1f 00 ed 02 01 4a 30-46 46 30 30 45 45 03 07  2.....J0FF00EE..
    2952cfd4  36 2c 2b 37 07 14 37 2b-2b 37 14 04 f2 44 30 30  6,+7..7++7...D00
    2952cfe4  44 44 30 30 44 fc d4 3c-ef 3c 2c 38 38 2c 3c ef  DD00D.. 0 )  //handling xCoordinates, the result is stored in param a3. 
            {
            v34 = 0;
            do
            {
              v35 = *v32;
              if ( v35 & 2 )
              {
                v36 = (v35 & 0x10) == 0;
                v37 = *(_BYTE *)v20;
                if ( v36 )
                  v34 -= v37;
                else
                  v34 += v37;
                ++v20;
              }
              else if ( !(v35 & 0x10) )
              {
                v38 = *(_BYTE *)(v20 + 1);