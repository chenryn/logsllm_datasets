---
author: Daniel J Walsh
category: 极客漫画
comments_data:
- date: '2017-03-24 21:16:11'
  message: 哈哈&nbsp;&nbsp;万一有一只老鼠偷吃怎么办?
  postip: 112.64.216.40
  username: 执着的夏风 [Chromium 56.0|Ubuntu]
- date: '2017-03-28 17:51:41'
  message: good!
  postip: 218.17.231.167
  username: 来自广东深圳的 Chrome 56.0|Windows 7 用户
- date: '2017-03-28 21:55:00'
  message: 这是一个我必关的东西
  postip: 223.73.53.206
  username: 来自广东广州的 Firefox 45.0|Windows 7 用户
- date: '2017-03-29 16:46:47'
  message: 这个一个我会关，但是我觉得关了很丢人的东西。
  postip: 123.118.176.218
  username: linux [Chrome 56.0|Mac 10.11]
- date: '2017-08-20 23:42:28'
  message: “我们把控制访问进程的标签的规则写入一个类似文件的客体标签中。”感觉这句话翻译的有问题，原文是We write rules to control
    the access of a process label to an a object label like a file. 我的理解是：我们制定规则来控制一个进程标签对一个客体标签的访问，比如一个文件客体。
  postip: 118.206.186.66
  username: 萧萧哀回 [Chrome 59.0|Windows 10]
count:
  commentnum: 5
  favtimes: 6
  likes: 0
  sharetimes: 0
  viewnum: 12963
date: '2017-03-22 08:24:00'
editorchoice: false
excerpt: SELinux 是一个功能强大的标签系统，控制着内核授予每个进程的访问权限。最主要的特性是类型强制，策略规则定义的进程访问权限基于进程被标记的类型和客体被标记的类型。也引入了另外两个控制手段，分离有着同样类型进程的叫做
  MCS，而 MLS，则允许进程间存在支配等级。
fromurl: https://opensource.com/business/13/11/selinux-policy-guide
id: 8326
islctt: true
largepic: /data/attachment/album/201703/22/062657tmm2pfmt6686punq.png
permalink: /article-8326-1.html
pic: /data/attachment/album/201703/22/062657tmm2pfmt6686punq.png.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: SELinux 是一个功能强大的标签系统，控制着内核授予每个进程的访问权限。最主要的特性是类型强制，策略规则定义的进程访问权限基于进程被标记的类型和客体被标记的类型。也引入了另外两个控制手段，分离有着同样类型进程的叫做
  MCS，而 MLS，则允许进程间存在支配等级。
tags:
- 安全
- SELinux
thumb: false
title: 看漫画学 SELinux 强制策略
titlepic: true
translator: xiaow6
updated: '2017-03-22 08:24:00'
---
![SELinux policy guide](/data/attachment/album/201703/22/062657tmm2pfmt6686punq.png "Your visual how-to guide for SELinux policy enforcement")
今年是我们一起庆祝 SELinux 纪念日的第十个年头了（LCTT 译者注：本文发表于 2013 年）。真是太难以置信了！SELinux 最初在 Fedora Core 3 中被引入，随后加入了红帽企业版 Linux 4。从来没有使用过 SELinux 的家伙，你可要好好儿找个理由了……
SElinux 是一个标签型系统。每一个进程都有一个标签。操作系统中的每一个文件/目录 客体   （    object    ） 也都有一个标签。甚至连网络端口、设备，乃至潜在的主机名都被分配了标签。我们把控制访问进程的标签的规则写入一个类似文件的客体标签中，这些规则我们称之为 策略   （    policy    ） 。内核强制实施了这些规则。有时候这种“强制”被称为 强制访问控制体系   （    Mandatory Access Control    ） （MAC）。
一个客体的拥有者对客体的安全属性并没有自主权。标准 Linux 访问控制体系，拥有者/分组 + 权限标志如 rwx，常常被称作 自主访问控制   （    Discretionary Access Control    ） （DAC）。SELinux 没有文件 UID 或拥有权的概念。一切都被标签控制，这意味着在没有至高无上的 root 权限进程时，也可以设置 SELinux 系统。
**注意：** SELinux 不允许你摒弃 DAC 控制。SELinux 是一个并行的强制模型。一个应用必须同时支持 SELinux 和 DAC 来完成特定的行为。这可能会导致管理员迷惑为什么进程被拒绝访问。管理员被拒绝访问是因为在 DAC 中有些问题，而不是在 SELinux 标签。
### 类型强制
让我们更深入的研究下标签。SELinux 最主要的“模型”或“强制”叫做 类型强制   （    type enforcement    ） 。基本上这意味着我们根据进程的类型来定义其标签，以及根据文件系统客体的类型来定义其标签。
**打个比方**
想象一下在一个系统里定义客体的类型为猫和狗。猫（CAT）和狗（DOG）都是 进程类型   （    process type    ） 。
![Image showing a cartoon of a cat and dog.](/data/attachment/album/201703/22/062657hmiddihwztkdhmoi.png)
我们有一类希望能与之交互的客体，我们称之为食物。而我希望能够为食物增加类型：`cat_food` （猫的食物）和 `dog_food`（狗的食物）。
![Cartoon Cat eating Cat Food and Dog eating Dog Food](/data/attachment/album/201703/22/062657b0yza0y5n2oy0716.png)
作为一个策略制定者，我可以说一只狗有权限去吃狗粮（`dog_chow`），而一只猫有权限去吃猫粮（`cat_chow`）。在 SELinux 中我可以将这条规则写入策略中。
![allow cat cat_chow:food eat; allow dog dog_chow:food eat](/data/attachment/album/201703/22/062658sy57lyjjiwa6sjws.png "SELinux rule")
`allow cat cat_chow:food eat;`
`允许 猫 猫粮：食物 吃；`
`allow dog dog_chow:food eat;`
`允许 狗 狗粮：食物 吃；`
有了这些规则，内核会允许猫进程去吃打上猫粮标签 `cat_chow` 的食物，允许狗去吃打上狗粮标签 `dog_chow` 的食物。
![Cartoon Cat eating Cat Food and Dog eating Dog Food](/data/attachment/album/201703/22/062658zbbbxmdwebhmab5v.png)
此外，在 SELinux 系统中，由于禁止是默认规则，这意味着，如果狗进程想要去吃猫粮 `cat_chow`，内核会阻止它。
![](/data/attachment/album/201703/22/062658e7gedpn7gg448dab.png)
同理，猫也不允许去接触狗粮。
![Cartoon cat not allowed to eat dog fooda](/data/attachment/album/201703/22/062659zpiwk3p9wp757559.png "Cartoon cat not allowed to eat dog fooda")
**现实例子**
我们将 Apache 进程标为 `httpd_t`，将 Apache 上下文标为 `httpd_sys_content_t` 和 `httpdsys_content_rw_t`。假设我们把信用卡数据存储在 MySQL 数据库中，其标签为 `msyqld_data_t`。如果一个 Apache 进程被劫持，黑客可以获得 `httpd_t` 进程的控制权，从而能够去读取 `httpd_sys_content_t` 文件并向 `httpd_sys_content_rw_t` 文件执行写操作。但是黑客却不允许去读信用卡数据（`mysqld_data_t`），即使 Apache 进程是在 root 下运行。在这种情况下 SELinux 减轻了这次闯入的后果。
### 多类别安全强制
**打个比方**
上面我们定义了狗进程和猫进程，但是如果你有多个狗进程：Fido 和 Spot，而你想要阻止 Fido 去吃 Spot 的狗粮 `dog_chow` 怎么办呢?
![SELinux rule](/data/attachment/album/201703/22/062659u3sdkpmni8d40psv.png "SELinux rule")