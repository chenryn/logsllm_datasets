holds for G then so does the (cid:96)-linear assumption for all (cid:96) > k.
It is believed that the larger k is the weaker the assumption
becomes. In particular, the 2-linear assumption may hold in
groups where the 1-linear assumption (a.k.a DDH) is false.
The k-DDH assumption. For x ∈ Zp let pow(x, k) be the
vector (1, x, x2, . . . , xk) ∈ Zk+1
. The k-DDH assumption
states that g1/x is indistinguishable from a random group
element given gpow(x,k).
More precisely, for an algorithm A deﬁne
DDH(k)
(cid:12)(cid:12) Pr[A(gpow(x,k), g1/x) = 1] − Pr[A(gpow(x,k), h) = 1](cid:12)(cid:12)
adv[A, G] :=
p
where g, h are uniform in G and x is uniform in Zp. When
x = 0 we deﬁne g1/x to be 1 in G.
Deﬁnition 3. For k ≥ 1 we say that the k-DDH assump-
tion holds for the group G if for all eﬃcient algorithms A
the advantage DDH(k)
adv[A, G] is negligible.
This assumption was previously used in [8, 18] where
it was called k-DDHI. The 1-DDH assumption implies the
standard DDH assumption. Moreover, for k > 1 the k-DDH
assumption implies the (cid:96)-DDH assumption for (cid:96)  0
we deﬁne q related keys (s, k1), . . . , (s, kq) where s ∈ S and
k1, . . . , kq ∈ K. These keys are related since they all share
the same s. We say that the function F is q-parallel secure
if the resulting set of q functions is indistinguishable from q
random independent functions.
More precisely, let F (q) be the function:
F (q) : (S × K q) ×(cid:0)X × [q](cid:1) → K
(cid:124)
F (q)(cid:0) (s, k1, . . . , kq)
(cid:125)
(cid:1) := F(cid:0) (s, ki) , x(cid:1)
(cid:123)(cid:122)
, (x, i)
(cid:124)(cid:123)(cid:122)(cid:125)
input
key
deﬁned by
Here i ∈ [q] selects the key (s, ki) to be used in the function
F . Thus, F (q) emulates q functions F whose keys are (s, ki)
for i = 1, . . . , q.
Deﬁnition 5. We say that F : (S × K) × X → K is a
q-parallel secure PRF if F (q) is a secure PRF.
The function F need not be q-parallel secure even if it
is secure as a PRF. For example, as above, a secure PRF
F : (S × K) × X → K that ignores the part of the key in K
(i.e. only uses the S part of the key) is clearly not 2-parallel
secure. Even when S is small (e.g. S = {0, 1}) the function
F may not be 2-parallel secure even though F is a secure
PRF.
3.4 Security of the augmented cascade
We now prove security of the augmented cascade provided
that the underlying PRF is parallel-secure.
Theorem 3. If F is q-parallel secure then the augmented
cascade ˆF ∗n is a secure PRF against q-query adversaries.
In particular, for every q-query PRF adversary A attack-
ing ˆF ∗n there is a q-query PRF adversary B attacking F (q)
such that
PRFadv[A, ˆF
∗n] ≤ n · PRFadv[B, F (q)]
where B runs in about the same time as A.
The proof uses a hybrid argument similar to the proof of
the original cascade [6], but is suﬃciently diﬀerent to require
its own proof.
Proof of Theorem 3. Given an adversary A we construct
an adversary B as required. The intuition for the construc-
tion of B comes from the following sequence of n + 1 hybrid
experiments between a challenger and adversary A. In hy-
brid i, the challenger replaces the ﬁrst i stages of the aug-
mented cascade with a truly random function, while the last
n − i stages are carried out as in the standard augmented
cascade.
hybrid experiment Pi as follows:
More precisely, for i = 0, . . . , n deﬁne the challenger in
setup: the challenger chooses a random
function f : X i → K and
random keys s1, . . . , sn in S.
134from A do:
let ki ← f (x1, . . . , xi) ∈ K
for j = i + 1, . . . , n do:
kj ← F ( (sj, kj−1), xj)
send kn to A
For i = 0, . . . , n, let Wi be the probability that A outputs
1 in hybrid number i. Observe that in hybrid P0 the adver-
sary A interacts with the function ˆF ∗n while in hybrid Pn
the adversary interacts with a random function f : X n → K.
Therefore,
PRFadv[A, ˆF
∗n] = |Wn − W0|
It follows by the standard hybrid argument that there exists
a t ∈ [1, n] such that
PRFadv[A, ˆF
∗n] ≤ n · |Wt−1 − Wt|
We construct a q-query PRF adversary B such that
PRFadv[B, F (q)] = |Wt−1 − Wt|
(3)
(4)
Combining (3) and (4) proves the theorem.
Adversary B emulates the challenger in hybrid Pt or Pt+1.
This requires B to emulate a random function f : X t → K.
To do so, it is convenient to describe B using an associative
array T that maps elements of X t to numbers in {1, . . . , q}.
Initially the array T is empty.
Adversary B interacts with its F (q) challenger and emu-
lates a ˆF ∗n challenger for A. B works as follows:
setup: T ← ∅, ctr ← 0
choose random st+2, . . . , sn in S
queries: to respond to a query for (x1, . . . , xn) ∈ X n
from A do:
if T [x1 . . . xt] = ⊥ (i.e. x1 . . . xt is a new preﬁx)
increment ctr by 1 and set T [x1 . . . xt] := ctr