k and m
k, whose
true values or even the approximate values are unknown in the
budget allocation stage (before any perturbation). Therefore,
in the following, we simplify this optimization problem to
obtain a practical budget allocation solution with closed-form.
Note that a larger ε1 can beneﬁt both frequency and mean
estimations, but it restricts ε2 (which affects mean estimation)
due to limited ε.
Problem Simpliﬁcation of Budget Allocation. In this pa-
per, we use Mean Square Error (MSE) to evaluate utility
mechanisms, i.e., the less MSE the better utility. Note that the
MSE of an estimator ˆθ can be calculated by the summation
of variance and the square of its bias
MSEˆθ = Var[ˆθ] + Bias2 = Var[ˆθ] + (E[ˆθ]− θ)2
(15)
When MSE is relatively large, the estimators will be corrected
by the improved estimation in Algorithm 4. Therefore, we
mainly consider minimizing MSE when it is relatively small,
i.e., (2p−1) and (a−b) are not very small, and n (the number
(cid:14) 1 for most cases in real-
∗
of users) is very large. Since f
/(cid:2) (cid:14) 1. Denote
world data, we have δ = (a− b) f
∗
k
k
(1− b)b
(a− b)2
The MSEs in Theorem 4 can be approximated by
a2(2p− 1)2
(cid:2)2
n f ∗
(16)
g =
μ =
h =
b
2
k
,
,
(17)
MSE ˆfk
MSE ˆmk
= Var[ ˆfk] ≈ (cid:2)2 · h/n
≈ μ[g + (μh + 1)hm
∗
k
2] ≈ μ(g + h· m
∗
k
2)
(18)
where μ (cid:14) 1 with a large n. Note that MSE ˆmk dominates
2 (cid:14) 1. It is caused by the distinct
MSE ˆfk
sample size of the two estimations, i.e., frequency is estimated
from all users (with user size n), while the value mean is esti-
mated from the users who possess a certain key (with user size
because (cid:2)2
n
/μ = f
∗
k
USENIX Association
29th USENIX Security Symposium    975
102
100
Naive
Non-optimized
Optimized
102
100
Naive
Non-optimized
Optimized
10-2
0
10-2
0
3
4
5
1
2
6
5
4
3
2
1
6
Figure 4: Comparison of g and h under three budget allocation
≈ μ(g + h· m
∗
2).
methods for PCKV-UE, where MSE ˆmk
k
k ). Therefore, our objective function α·MSE ˆfk
+β·MSE ˆmk
∗
n f
mainly depends on MSE ˆmk when α and β are in the same
magnitude. Motivated by this observation, we focus on min-
imizing MSE ˆmk to obtain the optimized budget allocation.
only depends on ε1 (the more ε1 the less
Note that MSE ˆfk
), while MSE ˆmk depends on both ε1 and ε2. However,
MSE ˆfk
if ε1 approaches to the maximum, which corresponds to the
→ ∞. In the fol-
minimum MSE ˆfk
lowing, we discuss the optimized privacy budget allocation
with minimum MSE ˆmk in PCKV-UE and PCKV-GRR.
, then ε2 = 0 and MSE ˆmk
Budget Allocation of PCKV-UE. In UE-based mecha-
nisms, the Optimized Unary Encoding (OUE) [22] was shown
to have the minimum MSE of frequency estimation under the
same privacy budget. Accordingly, the OUE-based perturba-
tion probabilities for key-value perturbation are
a = 1/2,
b = 1/(eε1 + 1),
p = eε2/(eε2 + 1)
(19)
where the values of a and b correspond to the minimum
under a given ε1 (budget for key perturbation). Fur-
MSE ˆfk
thermore, by minimizing MSE ˆmk, we have the following opti-
mized budget allocation of PCKV-UE.
Lemma 2 (Optimized Budget Allocation of PCKV-UE).
For a total privacy budget ε, the optimized budget allocation
for key and value perturbations can be approximated by
ε1 = ln[(eε + 1)/2],
ε2 = ε
(20)
Proof. See Appendix E.
θ
Interpretation of Lemma 2. According to the budget al-
location of PCKV-UE in (4), ε1 is an increasing function of θ,
while ε2 and the summation ε1 + ε2 = ln
2θe−ε−1 are decreas-
ing functions of θ. From (20), ε1 and ε2 are optimally allo-
cated at θ = eε+1
(the minimum value), which corresponds to
2
the maximum summation ε1 + ε2. Moreover, under the opti-
mized budget allocation, the two values in the max operation
−ε2)] = ε,
in (3) equal to each other, i.e., ε2 = ε1 + ln[2/(1 + e
which indicates that the budgets are fully allocated.
Comparison with Other Allocation Methods. In order
to show the advantage of our optimized allocation in (20),
we compare it with two alternative methods. The ﬁrst one
is naive allocation with ε1 = ε2 = ε/2 by sequential com-
position (which is used in PrivKVM). The second one is
non-optimized allocation with
ε1 = ln[(eε + eε/2)/2],
ε2 = ε/2
(21)
Optimized PCKV-UE
Optimized PCKV-GRR
(cid:154)(cid:4670)(cid:1863)(cid:4671)
(cid:883)
(cid:3398)(cid:883)
(cid:882)
①
(cid:155)(cid:155)(cid:1863) (cid:4666)(cid:1482)(cid:1863)(cid:1488)(cid:1837)(cid:4593)(cid:4667)
(cid:883)
(cid:1857)(cid:3106)
(cid:884)(cid:4666)(cid:1857)(cid:3106)(cid:3397)(cid:883)(cid:4667)
(cid:883)
(cid:3398)(cid:883)
(cid:884)(cid:4666)(cid:1857)(cid:3106)(cid:3397)(cid:883)(cid:4667)
(cid:882)(cid:484)(cid:887)
(cid:1857)(cid:3106)(cid:3397)(cid:883)
(cid:882)
(cid:1857)(cid:3106)(cid:3397)(cid:885)
(cid:883)(cid:1857)(cid:3106)(cid:3397)(cid:885)
②
③
④
⑤
(cid:1876)
(cid:1766)(cid:883)(cid:481)(cid:883)(cid:1767)
(cid:1766)(cid:883)(cid:481)(cid:3398)(cid:883)(cid:1767)
(cid:1766)(cid:884)(cid:481)(cid:883)(cid:1767)
(cid:1766)(cid:884)(cid:481)(cid:3398)(cid:883)(cid:1767)
(cid:1709)
(cid:1877)
(cid:1766)(cid:883)(cid:481)(cid:883)(cid:1767)
(cid:1766)(cid:883)(cid:481)(cid:3398)(cid:883)(cid:1767)
(cid:1766)(cid:884)(cid:481)(cid:883)(cid:1767)
(cid:1766)(cid:884)(cid:481)(cid:3398)(cid:883)(cid:1767)
(cid:1709)
(cid:954)(cid:1857)(cid:3106)(cid:3398)(cid:883) (cid:3397)(cid:883)
(cid:954)(cid:1857)(cid:3106)(cid:3398)(cid:883) (cid:3397)(cid:884)(cid:1856)(cid:1314)
(cid:883)
(cid:954)(cid:1857)(cid:3106)(cid:3398)(cid:883) (cid:3397)(cid:884)(cid:1856)(cid:1314)
In k-th element
Figure 5: Diagram of our optimized protocols (different types of
arrows represent perturbations with different probabilities).
which sets ε2 as ε/2 and computes ε1 by our tight budget
≈ μ(g + h·
composition (Theorem 2). Considering MSE ˆmk
∗
2) in (18), we compare parameters g and h (with respect
m
k
to ε) under above three budget allocation methods, shown
in Figure 4. We can observe that the optimized allocation
has a much smaller g than the other two, though a little bit
larger h than the non-optimized one, which is caused by the
property that h is a monotonically decreasing function of ε1,
while ε1 and ε2 restrict each other. Note that in our optimized
allocation, the decrement of g dominates the increment of h.
2 (cid:2) 1.
Thus, MSE ˆmk in (18) will be greatly reduced since m
Budget Allocation of PCKV-GRR. According to the bud-
get composition (Theorem 3) of PCKV-GRR, a larger padding
length (cid:2) will further improve the privacy-utility tradeoff of
key-value perturbation. Thus, given ﬁxed total budget, the
allocated budget for key (or value) perturbation can be larger
(i.e., less noise will be added) under a larger (cid:2). The following
lemma shows the optimized budget allocation (related to (cid:2))
of PCKV-GRR with minimum MSE ˆmk.
Lemma 3 (Optimized Budget Allocation of PCKV-GRR).
For a total privacy budget ε, the optimized budget allocation
for key and value perturbation can be approximated by
ε1 = ln [(cid:2)· (eε − 1)/2 + 1] ,
ε2 = ln [(cid:2)· (eε − 1) + 1]
Proof. See Appendix F.
(22)
∗
k
According to (5) and (22), with a given total budget ε, the
perturbation probabilities in PCKV-GRR are
a =
(cid:2)(eε − 1) + 2
(cid:2)(eε − 1) + 2d(cid:3) , b = 1− a
d(cid:3) − 1
(23)
(cid:3) = d + (cid:2). Note that when (cid:2) = 1, the optimized budget
where d
allocation in (22) reduces to the case of PCKV-UE in (20).
(cid:2)(eε − 1) + 1
(cid:2)(eε − 1) + 2
, p =
Interpretation of the Optimized Protocols. Under the
optimized budget allocation (Lemma 2 and Lemma 3), the
perturbation probabilities of proposed protocols are shown
in Figure 5. In optimized PCKV-UE, for two different input
vectors x1 and x2 (encoded from the sampled key-value pairs),
no matter they differ in one element (i.e., the sampled ones
have the same key but different values) or differ in two ele-
ments (i.e., the sampled ones have different keys), the upper
bound of the probability ratio of outputting the same vector
y is the same, i.e., 1(cid:10)
3(cid:10) = eε in Figure 5. In optimized
2(cid:10) = 1(cid:10)
5(cid:10) · 4(cid:10)
976    29th USENIX Security Symposium
USENIX Association
.
PCKV-GRR, two of three different perturbation probabilities
in Algorithm 3 equal with each other, i.e., a(1− p) = b·0.5 in
the optimized solution. Also, the optimized PCKV-GRR can
be regarded as the equivalent version of general GRR with
doubled domain size (each key can have two different values),
which can provide good utility on estimating the counts of
(cid:8)k,1(cid:9) and (cid:8)k,−1(cid:9), say nk1 and nk2, where the mean of key k
can be estimated by nk1−nk2
nk1+nk2
From the previous analysis, PCKV-GRR can get additional
beneﬁt from sampling, thus it will outperform PCKV-UE for
a large (cid:2). On the other hand, the performance of PCKV-UE is
independent of the domain size d, thus it will have less MSE
than PCKV-GRR when d is very large. Therefore, the two
mechanisms are suitable for different cases. By comparing
parameters g and h in (16) of PCKV-UE and PCKV-GRR
(i.e., a smaller h), if 2(d −
respectively, for a smaller MSE ˆfk
1) > (cid:2)(4(cid:2)− 1)(eε + 1), then PCKV-UE is better; otherwise,
PCKV-GRR is better. For a smaller MSE ˆmk (i.e., a smaller g
(eε +1), then PCKV-
approximately), if 2d > (cid:2)
UE is better; otherwise, PCKV-GRR is better. These can be
observed in simulation results (Sec. 6).
4(cid:2)(eε+1)
− 1
eε+3
(cid:15)
(cid:16)
6 Evaluation
In this section, we evaluate the performance of our proposed
mechanisms (PCKV-UE and PCKV-GRR) and compare them
with the existing mechanisms (PrivKVM [25] and KVUE
[20]). We note that although KVUE [20] is not formally pub-
lished, we still implemented it with our best effort and in-
cluded it for comparison purposes.
Mechanisms for Comparison. In PrivKVM [25], the
number of iterations is set as c = 1 because we observe
that PrivKVM with a large number of iterations c will have
bad utility, which is caused by the small budget ε
2c and thus
large variance of value perturbation in the last iteration (even
though the result is theoretically unbiased). However, imple-
menting PrivKVM with virtual iterations to predict the mean
estimation of remaining iterations can avoid budget split [25].
Thus, we also evaluate PrivKVM with one real iteration and
ﬁve virtual iterations (1r5v). In [20], multiple mechanisms
are proposed to improve the performance of PrivKVM, where
the most promising one is KVUE (which uses the same sam-
pling protocol as in PrivKVM). Note that the original KVUE
does not have corrections for mean estimation. For a fair com-
parison with PrivKVM, PCKV-UE, and PCKV-GRR (outliers
are corrected in these mechanisms), we use the similar cor-
rection strategy used in PrivKVM for KVUE.
Datasets. In this paper, we evaluate two existing mecha-
nisms (PrivKVM [25] and KVUE [20]) and our mechanisms
(PCKV-UE and PCKV-GRR) by synthetic datasets and real-
world datasets. In synthetic datasets, the number of users is
n = 106, and the domain size is d = 100, where each user only
has one key-value pair (i.e., (cid:2) = 1), and both the possessed
Table 1: Real-World Datasets
Datasets
E-commerce [3]
Clothing [2]
Amazon [1]
Movie [4]
# Ratings
23,486
192,544
2,023,070
20,000,263
# Users
23,486
105,508
1,210,271
138,493
# Keys
1,206
5,850
249,274
26,744
Selected (cid:2)
1
2
2
100
key of each user and the value mean of keys satisfy Uniform
(or Gaussian) distribution. The Gaussian distribution is gener-
ated with μ = 0,σkey = 50,σmean = 1, where samples outside
the domain (K or V = [−1,1]) are discarded. In real-world
datasets, each user may have multiple key-value pairs, i.e.,
(cid:2) > 1 (how the selection of (cid:2) affects the estimation accuracy
has been discussed in Sec. 5.1). Table 1 summarizes the pa-
rameters of four real-world rating datasets (obtained from
public data sources) with different domain sizes and data dis-
tributions. The item-rating corresponds to key-value, and all
ratings are linearly normalized into [−1,1].
( ˆfi − f
( ˆmi − m
∗
i )2, MSEmean = 1|X| ∑
i∈X
Evaluation Metric. We evaluate both the frequency and
mean estimation by the averaged Mean Square Error (MSE)
among all keys or a portion of keys
MSEfreq = 1|X| ∑
i∈X
∗
i (resp. ˆfi and ˆmi) are the true (resp. esti-
where f
mated) frequency and mean, and X is a subset of the domain
K (the default X is K ). We also consider X as the set of
top N frequent keys (such as top 20 or top 50) because we
usually only care about the estimation results of frequent keys.
Also, infrequent keys do not have enough samples to obtain
the accurate estimation of value mean. All MSE results are
averaged with ﬁve repeats.
∗
i and m
∗
i )2
6.1 Synthetic Data
Overall Results. The averaged MSEs of frequency and mean
estimations are shown in Figure 6 (with domain size 100),
where the MSE is averaged by all keys (Figure 6a and 6b) or
the top 20 frequent keys (Figure 6c). For frequency estimation,
PrivKVM (c = 1) and PrivKVM (1r5v) have the same MSE
since the frequency is estimated by the ﬁrst iteration. The pro-
posed mechanisms (PCKV-UE and PCKV-GRR) have much
less MSE ˆfk
. For mean estimation, PrivKVM (1r5v) predicts
the mean estimation of remaining iterations without splitting
the budget, which improves the accuracy of PrivKVM (c = 1)
under larger ε. The MSE ˆmk of PrivKVM (c = 1) does not
decrease any more after ε = 0.5 since PrivKVM (c = 1) al-
ways generates fake values as v = 0. The PrivKVM (1r5v)
with virtual iterations improves PrivKVM (c = 1), but the
estimation error is larger than other mechanisms. The MSE ˆmk
in PCKV-UE and PCKV-GRR is much smaller than other
ones when ε is relatively large (e.g., ε > 2), thanks to the high
accuracy of frequency estimation in this case. Also, the small
gap between the theoretical and empirical results validate the
correctness of our theoretical error analysis in Theorem 4.
USENIX Association
29th USENIX Security Symposium    977
PrivKVM (c=1)
PrivKVM (1r5v)
KVUE
PCKV-UE (empirical)
PCKV-GRR (empirical)
PCKV-UE (theoretical)
PCKV-GRR (theoretical)
100
10-1
10-2
10-3
10-4
0.1
1
2
3
4
5
6
1