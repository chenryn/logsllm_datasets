49
490
132 bit
82 bit
45.7%
45.7%
73.0%
89.2%
32.3%
32.3%
54.0%
73.6%
-
-
-
-
11.5%
2.7%
4.6%
112.0 s
37.3 s
-
-
-
-
-
-
-
-
-
0.7%
0.7%
0.7%
1.3%
-
-
-
-
-
-
-
-
-
-
-
-
0%
0%
0%
4.5%
-
-
-
26%
32.1%–83.9% [67]
9%
6.4%–79.2% [67]
-
17–25% [91]
-
5.7%
31.6%
16.8 s
11.3 s
37% [67]
-
-
-
Table 3: Participant Statistics and Results of Our Studies
is a total miss. We ﬁnd that 11.5–15.7% of facts were not
recalled by users, and thus may be fake. This rate is less
than a half of the fake answer rate for security questions
[67]. A ﬁner investigation of these “fake facts” shows that
about half of them fail authentication because a user used an
initial instead of a last name in LEP creation, but reverted
to full name in authentication. We could handle this case
with better authentication prompts.
Long term recall. We invited all participants in our per-
formance study to authenticate with their LEPs and pass-
words once again, in May 2015. A total of 54 participants
returned. The time between creation and authentication
for these return participants ranged from 104 to 231 days,
with a median of 120 days. Table 3 shows the long-term
authentication success in rows 9–12. While both LEP and
password recall has declined, time lapse aﬀected recall of
passwords much more than recall of LEPs. Password recall
declined by 66%, while LEP recall declined by 17–47%. We
thus conclude that LEPs are more robust with regard to
long-term recall, than passwords.
Security questions have a wide range of recall rates after
3–6 months – from 6.4% for frequent ﬂyer number to 79.2%
for city of birth [67]. LEP recall with four-fact and three-
fact authentication is 53–73.6%, within the range of more
memorable security questions.
Reuse. We also explored strength of LEPs and passwords
against a password-reuse attacker. The results are shown in
Table 3 in rows 18–19. We ﬁrst investigated how many out of
10 passwords were identical, for each given user. A LEP fact
is said to be identical to a fact in another LEP, by the same
user, if their answers would match during authentication
(accounting for capitalization, reordering, punctuation and
extraneous words). A LEP l1 is identical to the LEP l2 if
all of l1’s facts match the facts l2. There were 2.7–3.1%
identical LEPs, compared to 5.7% identical passwords.
We next investigated how many out of a user’s ten pass-
words were suﬃciently similar to each other, so that a pass-
word-reuse attacker could easily guess one if he knew the
other. Because LEPs are authenticated based on fact ma-
tches, and passwords based on the exact string match, it is
121
hard to devise a similarity measure that applies equally well
to both concepts. To deﬁne similarity of two authentica-
tion tokens (LEPs or passwords), we borrow from the Linux
Pluggable Authentication Modules (PAM) [46] design. We
say that two tokens t1 and t2 are similar, if more than 1/2
of items in t2 also appear in t1. For passwords, items are
characters and for LEPs, items are facts. This deﬁnition
allows us to directly apply pam_cracklib to detect similar
passwords. We say that a password op1 is similar to the
password op2 if one of the following conditions is met: (1)
more than half of op1’s characters appear in op2 (this in-
cludes cases when (2) op1 is a palindrome of op2 or a ro-
tated version of op2), or (2) op1 diﬀers from op2 only in
case. There were 4.6–15.4% similar LEPs, in semi-guided
and guided categories, respectively, compared to 31.6% sim-
ilar passwords. Thus passwords were reused more than twice
as often as LEPs, and guided LEPs were reused 3 × more
often than semi-guided LEPs.
One possible reason for such low LEP reuse is the way we
prompted users for LEPs (described in Section 4). When-
ever a LEP was to be created, we oﬀered to the participant
one topic, randomly selected from our list. The participant
could reject the oﬀered topics, until she found the one that
she wanted to talk about. These prompts seem to have stim-
ulated recall of diverse memories of past events, and lowered
LEP reuse. We expect that servers that adopt LEPs would
also use such user prompts to lower reuse.
Time to create and authenticate. We show the me-
dian time to create and authenticate a LEP or a password in
Table 3, in rows 20–21. LEPs require 6.7× longer to create
and 3.3–4.6× longer to authenticate, than passwords. This
is expected as they require a user to both read the questions
and to provide input that is approximately ﬁve times longer
than a password.
Storage. LEP answers should be concatenated and stored
as one or several hashes. In case of all-fact authentication,
we store only one hash per LEP. If we allow for M -fact au-
thentication (M =3, 4 or 5), we would have to create, hash
is the number of all facts. 77% participants would need up to
M. combinations of facts for each LEP, where N
and store-N
Usability
Deployability
Security
s
s
e
l
t
r
o
ﬀ
E
-
e
s
i
w
y
r
o
m
e
M
s
s
e
l
t
r
o
ﬀ
E
-
y
l
l
a
c
i
s
y
h
P
s
r
e
s
U
-
r
o
f
-
e
l
b
a
l
a
c
S
y
r
r
a
C
-
o
t
-
g
n
i
h
t
o
N
s
r
o
r
r
E
-
t
n
e
u
q
e
r
f
n
I
e
s
U
-
o
t
-
t
n
e
i
c
ﬃ
E
n
r
a
e
L
-
o
t
-
y
s
a
E
s
s
o
L
-
m
o
r
f
-
y
r
e
v
o
c
e
R
-
y
s
a
E
r
e
s
U
-
r
e
p
-
t
s
o
C
-
e
l
b
i
g
i
l
g
e
N
e
l
b
i
s
s
e
c
c
A
e
l
b
i
t
a
p
m
o
C
-
r
e
s
w
o
r
B
e
l
b
i
t
a
p
m
o
C
-
r
e
v
r
e
S
y
r
a
t
e
i
r
p
o
r
P
-
n
o
N
e
r
u
t
a
M
n
o
i
t
a
n
o
s
r
e
p
m
I
-
d
e
t
e
g
r
a