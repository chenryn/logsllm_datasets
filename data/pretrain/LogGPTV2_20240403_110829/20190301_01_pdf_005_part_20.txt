### Implicit Coercion to Text and Its Impact on String Concatenation

Certain data types in PostgreSQL have implicit coercion to the `text` type, which affects how they behave in string concatenation. The following data types have this implicit coercion:

- `timestamp`
- `zone`
- `boolean`
- `bytea`

For more detailed information on column output and implicit coercions, refer to the `pg_cast` system catalog in the PostgreSQL core documentation:
- [PostgreSQL pg_cast Documentation](https://www.postgresql.org/docs/11/static/catalog-pg-cast.html)

#### Example: Data Type `UUID` and Implicit Coercion

The `UUID` data type does not have implicit coercion to `text`. This can lead to unexpected results when attempting to concatenate a `NULL` `UUID` value with other strings. For example, consider the following table:

```sql
CREATE TABLE null_concat_types (
    boolean_type BOOLEAN,
    uuid_type UUID,
    char_type CHARACTER
);

INSERT INTO null_concat_types VALUES (NULL, NULL, NULL);
```

In this table, `boolean_type` and `char_type` have implicit coercion to `text`, while `uuid_type` does not.

##### String Concatenation with `||` Operator

- **With `boolean_type` or `char_type`:**

  ```sql
  SELECT 'x=' || boolean_type || 'y' FROM null_concat_types;
  -- Result:
  -- ?column?
  -- x=y
  -- (1 row)

  SELECT 'x=' || char_type || 'y' FROM null_concat_types;
  -- Result:
  -- ?column?
  -- x=y
  -- (1 row)
  ```

- **With `uuid_type`:**

  ```sql
  SELECT 'x=' || uuid_type || 'y' FROM null_concat_types;
  -- Result:
  -- ?column?
  -- y
  -- (1 row)
  ```

  Here, the `x=` part is lost because of the lack of implicit coercion for `uuid_type`.

##### Using Explicit Casting

To avoid losing the `x=` part, you can use explicit casting with `::text`:

```sql
SELECT 'x=' || uuid_type::text || 'y' FROM null_concat_types;
-- Result:
-- ?column?
-- x=y
-- (1 row)
```

Alternatively, you can use the `CONCAT` function, which also preserves the `x=` part:

```sql
SELECT CONCAT('x=', uuid_type) || 'y' FROM null_concat_types;
-- Result:
-- ?column?
-- x=y
-- (1 row)
```

### Pattern Matching String Functions

Advanced Server supports the `REGEXP_COUNT`, `REGEXP_INSTR`, and `REGEXP_SUBSTR` functions for pattern matching using POSIX-style regular expressions. For more information on forming POSIX-style regular expressions, refer to the PostgreSQL core documentation:
- [PostgreSQL Regular Expression Functions](https://www.postgresql.org/docs/11/static/functions-matching.html)

#### 2.4.5.1 REGEXP_COUNT

`REGEXP_COUNT` searches a string for a regular expression and returns the count of occurrences. The function signature is:

```sql
INTEGER REGEXP_COUNT(
    srcstr TEXT,
    pattern TEXT,
    position INTEGER DEFAULT 1,
    modifier TEXT DEFAULT NULL
)
```

**Parameters:**
- `srcstr`: The string to search.
- `pattern`: The regular expression to search for.
- `position`: The starting position in the source string (default is 1).
- `modifier`: Values that control the pattern matching behavior (default is `NULL`).

**Example:**

```sql
edb=# SELECT REGEXP_COUNT('reinitializing', 'i', 1) FROM DUAL;
-- Result:
-- regexp_count
-- -----------
-- 5
-- (1 row)

edb=# SELECT REGEXP_COUNT('reinitializing', 'i', 6) FROM DUAL;
-- Result:
-- regexp_count
-- -----------
-- 3
-- (1 row)
```

#### 2.4.5.2 REGEXP_INSTR

`REGEXP_INSTR` searches a string for a POSIX-style regular expression and returns the position of the match. The function signature is:

```sql
INTEGER REGEXP_INSTR(
    srcstr TEXT,
    pattern TEXT,
    position INTEGER DEFAULT 1,
    occurrence INTEGER DEFAULT 1,
    returnparam INTEGER DEFAULT 0,
    modifier TEXT DEFAULT NULL,
    subexpression INTEGER DEFAULT 0
)
```

**Parameters:**
- `srcstr`: The string to search.
- `pattern`: The regular expression to search for.
- `position`: The starting position in the source string (default is 1).
- `occurrence`: Which match to return if multiple occur (default is 1).
- `returnparam`: The location within the string to return (default is 0).
- `modifier`: Values that control the pattern matching behavior (default is `NULL`).
- `subexpression`: The portion of the pattern to return (default is 0).

**Example:**

```sql
edb=# SELECT REGEXP_INSTR('800-555-1212', '[0-9][0-9][0-9]', 1, 1) FROM DUAL;
-- Result:
-- regexp_instr
-- -----------
-- 1
-- (1 row)

edb=# SELECT REGEXP_INSTR('800-555-1212', '[0-9][0-9][0-9]', 1, 2) FROM DUAL;
-- Result:
-- regexp_instr
-- -----------
-- 5
-- (1 row)
```

#### 2.4.5.3 REGEXP_SUBSTR

`REGEXP_SUBSTR` searches a string for a POSIX-compliant regular expression and returns the matching substring. The function signature is:

```sql
TEXT REGEXP_SUBSTR(
    srcstr TEXT,
    pattern TEXT,
    position INTEGER DEFAULT 1,
    occurrence INTEGER DEFAULT 1,
    modifier TEXT DEFAULT NULL,
    subexpression INTEGER DEFAULT 0
)
```

**Parameters:**
- `srcstr`: The string to search.
- `pattern`: The regular expression to search for.
- `position`: The starting position in the source string (default is 1).
- `occurrence`: Which match to return if multiple occur (default is 1).
- `modifier`: Values that control the pattern matching behavior (default is `NULL`).
- `subexpression`: The portion of the pattern to return (default is 0).

**Example:**

```sql
edb=# SELECT REGEXP_SUBSTR('800-555-1212', '[0-9][0-9][0-9]', 1, 1) FROM DUAL;
-- Result:
-- regexp_substr
-- -------------
-- 800
-- (1 row)

edb=# SELECT REGEXP_SUBSTR('800-555-1212', '[0-9][0-9][0-9]', 1, 2) FROM DUAL;
-- Result:
-- regexp_substr
-- -------------
-- 555
-- (1 row)
```

### 2.4.6 Pattern Matching Using the LIKE Operator

Advanced Server provides pattern matching using the traditional SQL `LIKE` operator. The syntax for the `LIKE` operator is as follows:

```sql
string LIKE pattern [ ESCAPE escape-character ]
string NOT LIKE pattern [ ESCAPE escape-character ]
```

- A pattern defines a set of strings.
- The `LIKE` expression returns `TRUE` if the string is contained in the set of strings represented by the pattern.
- The `NOT LIKE` expression returns `FALSE` if `LIKE` returns `TRUE`, and vice versa.

**Pattern Characters:**
- `_` (underscore): Matches any single character.
- `%` (percent sign): Matches any string of zero or more characters.

**Examples:**

```sql
'abc' LIKE 'abc'  -- true
'abc' LIKE 'a%'   -- true
'abc' LIKE '_b_'  -- true
'abc' LIKE 'c'    -- false
```

**Special Characters:**
- To match a literal underscore or percent sign, the respective character in the pattern must be preceded by the escape character.
- The default escape character is the backslash (`\`), but a different one can be selected using the `ESCAPE` clause.

**Note:**
- The backslash has a special meaning in string literals, so to write a pattern that matches a literal backslash, you need to write four backslashes in the statement.
- You can select no escape character by writing `ESCAPE ''`, which disables the escape mechanism and makes it impossible to turn off the special meaning of underscore and percent signs in the pattern.

### 2.4.7 Data Type Formatting Functions

Advanced Server provides formatting functions for converting various data types (date/time, integer, floating point, numeric) to formatted strings and vice versa. These functions follow a common calling convention: the first argument is the value to be formatted, and the second argument is a string template that defines the output or input format.

#### Table 2-20: Formatting Functions

| Return Type | Function | Description | Example | Result |
|-------------|----------|-------------|---------|--------|
| VARCHAR2 | TO_CHAR(DATE, [format]) | Convert a date/time to a string with the specified format. If omitted, the default format is `DD-MON-YY`. | `TO_CHAR(SYSDATE, 'MM/DD/YYYY HH12:MI:SS AM')` | `07/25/2007 09:43:02 AM` |
| VARCHAR2 | TO_CHAR(TIMESTAMP, [format]) | Convert a timestamp to a string with the specified format. If omitted, the default format is `DD-MON-YY`. | `TO_CHAR(CURRENT_TIMESTAMP, 'MM/DD/YYYY HH12:MI:SS AM')` | `08/13/2015 08:55:22 PM` |
| VARCHAR2 | TO_CHAR(INTEGER, [format]) | Convert an integer to a string with the specified format. | `TO_CHAR(2412, '999,999S')` | `2,412+` |
| VARCHAR2 | TO_CHAR(NUMBER, [format]) | Convert a decimal number to a string with the specified format. | `TO_CHAR(10125.35, '999,999.99')` | `10,125.35` |
| VARCHAR2 | TO_CHAR(DOUBLE PRECISION, [format]) | Convert a floating-point number to a string with the specified format. | `TO_CHAR(CAST(123.5282 AS REAL), '999.99')` | `123.53` |
| DATE | TO_DATE(string, [format]) | Convert a formatted string to a `DATE` data type. | `TO_DATE('2007-07-04 13:39:10', 'YYYY-MM-DD HH24:MI:SS')` | `04-JUL-07 13:39:10` |
| NUMBER | TO_NUMBER(string, [format]) | Convert a formatted string to a `NUMBER` data type. | `TO_NUMBER('2,412-', '999,999S')` | `-2412` |
| TIMESTAMP | TO_TIMESTAMP(string, [format]) | Convert a formatted string to a `TIMESTAMP` data type. | `TO_TIMESTAMP('05 Dec 2000 08:30:25 pm', 'DD Mon YYYY hh12:mi:ss pm')` | `05-DEC-00 20:30:25` |

#### Table 2-21: Template Date/Time Format Patterns

| Pattern | Description |
|---------|-------------|
| `HH` | Hour of day (01-12) |
| `HH12` | Hour of day (01-12) |
| `HH24` | Hour of day (00-23) |
| `MI` | Minute (00-59) |
| `SS` | Second (00-59) |
| `SSSSS` | Seconds past midnight (0-86399) |
| `FFn` | Fractional seconds where `n` is an optional integer from 1 to 9 for the number of digits to return. If omitted, the default is 6. |
| `AM` or `A.M.` or `PM` or `P.M.` | Meridian indicator (uppercase) |
| `am` or `a.m.` or `pm` or `p.m.` | Meridian indicator (lowercase) |
| `Y,YYY` | Year (4 and more digits) with comma |
| `YEAR` | Year (spelled out) |
| `SYEAR` | Year (spelled out) (BC dates prefixed by a minus sign) |
| `YYYY` | Year (4 and more digits) |
| `SYYYY` | Year (4 and more digits) (BC dates prefixed by a minus sign) |
| `YYY` | Last 3 digits of year |
| `YY` | Last 2 digits of year |
| `Y` | Last digit of year |
| `IYYY` | ISO year (4 and more digits) |
| `IYY` | Last 3 digits of ISO year |
| `IY` | Last 2 digits of ISO year |
| `I` | Last 1 digit of ISO year |
| `BC` or `B.C.` or `AD` or `A.D.` | Era indicator (uppercase) |
| `bc` or `b.c.` or `ad` or `a.d.` | Era indicator (lowercase) |
| `MONTH` | Full uppercase month name |
| `Month` | Full mixed-case month name |
| `month` | Full lowercase month name |
| `MON` | Abbreviated uppercase month name (3 chars in English, localized lengths vary) |
| `Mon` | Abbreviated mixed-case month name (3 chars in English, localized lengths vary) |
| `mon` | Abbreviated lowercase month name (3 chars in English, localized lengths vary) |
| `MM` | Month number (01-12) |
| `DAY` | Full uppercase day name |

---

Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.