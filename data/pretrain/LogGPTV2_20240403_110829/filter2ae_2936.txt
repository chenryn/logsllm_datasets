## 前言
挺久没有沉下心来好好的去研究分析一个自认为有意思的东西
## 解析流程
请求路径
    /webshell.jsp/123.txt
调用栈
    buildInvocation:4175, WebApp (com.caucho.server.webapp)
    buildInvocation:798, WebAppContainer (com.caucho.server.webapp)
    buildInvocation:753, Host (com.caucho.server.host)
    buildInvocation:319, HostContainer (com.caucho.server.host)
    buildInvocation:1068, ServletService (com.caucho.server.cluster)
    buildInvocation:250, InvocationServer (com.caucho.server.dispatch)
    buildInvocation:223, InvocationServer (com.caucho.server.dispatch)
    buildInvocation:1610, AbstractHttpRequest (com.caucho.server.http)
    getInvocation:1583, AbstractHttpRequest (com.caucho.server.http)
    handleRequest:825, HttpRequest (com.caucho.server.http)
    dispatchRequest:1393, TcpSocketLink (com.caucho.network.listen)
    handleRequest:1349, TcpSocketLink (com.caucho.network.listen)
    handleRequestsImpl:1333, TcpSocketLink (com.caucho.network.listen)
    handleRequests:1241, TcpSocketLink (com.caucho.network.listen)
调试解析流程来到
    com.caucho.server.webapp.WebApp#buildInvocation(com.caucho.server.dispatch.Invocation, boolean)
    //...
                        if (isCache) {
                            entry = (FilterChainEntry)this._filterChainCache.get(((Invocation)invocation).getContextURI());
                        }
                        FilterChain chain;
                        if (entry != null && !entry.isModified()) {
                           //...
                            }
                        } else {
                            chain = this._servletMapper.mapServlet((ServletInvocation)invocation);
                            this._filterMapper.buildDispatchChain((Invocation)invocation, chain);
                            chain = ((Invocation)invocation).getFilterChain();
                            chain = this.applyWelcomeFile(DispatcherType.REQUEST, (Invocation)invocation, chain);
                            if (this._requestRewriteDispatch != null) {
                                FilterChain newChain = this._requestRewriteDispatch.map(DispatcherType.REQUEST, ((Invocation)invocation).getContextURI(), ((Invocation)invocation).getQueryString(), chain);
                                chain = newChain;
                            }
                            entry = new FilterChainEntry(chain, (Invocation)invocation);
                            chain = entry.getFilterChain();
                            if (isCache) {
                                this._filterChainCache.put(((Invocation)invocation).getContextURI(), entry);
                            }
                        }
                        chain = this.buildSecurity(chain, (Invocation)invocation);
                        chain = this.createWebAppFilterChain(chain, (Invocation)invocation, isTop);
                        ((Invocation)invocation).setFilterChain(chain);
                        ((Invocation)invocation).setPathInfo(entry.getPathInfo());
                        ((Invocation)invocation).setServletPath(entry.getServletPath());
                        if (this._oldWebApp != null && CurrentTime.getCurrentTime() 
## 路径解析特性
### escape编码解析
调用栈
    splitQueryAndUnescape:254, InvocationDecoder (com.caucho.server.dispatch)
    buildInvocation:1594, AbstractHttpRequest (com.caucho.server.http)
    getInvocation:1583, AbstractHttpRequest (com.caucho.server.http)
    handleRequest:825, HttpRequest (com.caucho.server.http)
`com.caucho.server.dispatch.InvocationDecoder#splitQueryAndUnescape`调用`normalizeUriEscape`进行解码
`com.caucho.server.dispatch.InvocationDecoder#splitQueryAndUnescape`代码
    public void splitQueryAndUnescape(Invocation invocation, byte[] rawURI, int uriLength) throws IOException {
            String decodedURI;
            for(int i = 0; i  i + 2 && (ch = uri.charAt(i + 2)) != '/' && ch != '\\') {
                                    if (ch == ';') {
                                        throw new BadRequestException(L.l("The request contains an illegal URL."));
                                    }
                                    if (ch != '.') {
                                        break;
                                    }
                                    if (len > i + 3 && (ch = uri.charAt(i + 3)) != '/' && ch != '\\') {
                                        throw new BadRequestException(L.l("The request contains an illegal URL."));
                                    }
                                    int j;
                                    for(j = cb.length() - 1; j >= 0 && (ch = cb.charAt(j)) != '/' && ch != '\\'; --j) {
                                    }
                                    if (j > 0) {
                                        cb.setLength(j);
                                    } else {
                                        cb.setLength(0);
                                    }
                                    i += 3;
                                } else {
                                    i += 2;
                                }
                            } else {
                                ++i;
                            }
                        }
                        while(isWindows && cb.getLength() > 0 && ((ch = cb.getLastChar()) == '.' || ch == ' ')) {
                            cb.setLength(cb.getLength() - 1);
                            if (cb.getLength() > 0 && (ch = cb.getLastChar()) == '/' || ch == '\\') {
                                cb.setLength(cb.getLength() - 1);
                            }
                        }
                        cb.append('/');
                    }
                }
                while(isWindows && cb.getLength() > 0 && ((ch = cb.getLastChar()) == '.' || ch == ' ')) {
                    cb.setLength(cb.getLength() - 1);
                }
                return cb.toString();
            }
        }
遍历字符，如果不为`/`则持续向cb中添加字符，如果为`/`则遍历`/`后面的字符为`；`则报错。为`.`则退出循环，但是这个`.`并不会添加到cb中。当出现`/.`字符的时候会检测后面第三位数是否是`.`或者第四位是不是`.`如果是的话则跳出循环，该第三或第四个字符后面的字符不为`/`的话则抛异常。也就是说说当出现了`/.`后,检测一下一个字符，如果还是`.`会出循环再检测下面的字符，下面的字符必须得是`/`,只能以`/../`的方式请求
  1. `this._maxURILength`设置URI最多不能超过1024个字符
  2. `/`后面不能拼接`；`，`/;`这种方式。
  3. `/.`是可以的，但是不能`/.;`这种方式是会报错的
  4. 在shiro中出现的`..;/`这种方式不能适用
## 参考文章
[