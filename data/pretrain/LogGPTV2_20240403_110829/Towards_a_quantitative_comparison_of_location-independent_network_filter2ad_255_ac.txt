Figure 4: Screenshots of the NomadLog app.
NomadLog is a lean app explicitly designed to measure
the changing IP addresses of Android devices and does little
else. The value proposition for potential downloaders is that
they get cool visualizations of their network mobility statis-
tics on a map, but realistically we expect people with a bent
for citizen science or personal analytics to be more likely
to install the app. The app runs in the background and
attempts to record the public-facing IP address upon each
Prefix!Port!yahoo.com!2!travel.yahoo.com!2!sports.yahoo.com!5!cnn.com!2!mit.edu!4!...!263connectivity event. A connectivity event is when either net-
work interface wakes up and successfully connects to a cellu-
lar or WiFi network or disconnects from a network. Upon a
connectivity event, the app contacts a server we maintain in
order to determine its public-facing IP address, so addresses
are logged only if they are usable for Internet connectivity,
so automatic connects to WiFi APs blocked by a paywall or
authentication page will not be logged unless successful.
The app is designed to be as inconspicuous as possible
and is conservative in using battery power and data traﬃc
as follows. First, its event-driven design obviates polling the
network interfaces. Second, except for a single small message
to infer its public-facing IP address, the app stores all data
logs locally until it is both connected to power and WiFi; at
this point, it attempts to transfer previously untransferred
log (cid:12)les to a postgresql database that we maintain. Each
entry logged in the database is in the following format.
(lat, long) (cid:1) (cid:1) (cid:1)
device id
net type
ip addr
time
device id is the hashed device identi(cid:12)er used to track the
user while providing limited privacy; time is the event’s
timestamp; net type indicates the type of the connected net-
work, WiFi or cellular; and (lat, long) is the geolocation.
The user’s geolocation is recorded only with user permis-
sion at install time and is collected only if the GPS is already
on and has obtained a recent reading on behalf of some other
app, i.e., NomadLog itself does not consume GPS resources.
Users can either visualize their mobility statistics through
the app or use their device identi(cid:12)er in order to access their
data from the app’s website from any device. Except for the
(hashed) device id, we do not maintain any other informa-
tion directly identifying a user in our database.
We have acquired 372 users, mostly from the United States,
Europe, and South America through word-of-mouth public-
ity alone. The user recruitment and data collection spanned
over 14 months from Mar 2013 to May 2014. Because diﬀer-
ent users downloaded the app at diﬀerent times and a small
fraction uninstalled the app quickly (a learning experience
that helped us engineer the resource and data usage opti-
mizations), we removed users who ran the app for less than
a day. Our analysis is based on daily statistics of network
mobility, so our conclusions are unlikely to be biased signif-
icantly by the diﬀering measurement period across users.
5. PATH STRETCH VS. UPDATE COST: AN
EXPOSITORY ANALYTIC MODEL
In this section, we develop a simple analytic model to
quantify the tradeoﬀ between path stretch and update cost
with two goals. The (cid:12)rst is expository and helps us better
appreciate the fundamental nature of the tradeoﬀs evaluated
empirically in this paper. The second is to suggest that
anything beyond simple toy topologies is diﬃcult to analyze
theoretically, making a stronger case for empirical analysis.
Our model and results are similar in spirit to theoretical
work on compact routing (see [32] for a survey) that has
focused on path stretch vs. forwarding table size tradeoﬀs,
but the diﬀerence is that we model endpoint mobility and its
update costs. Informally, compact routing results say that in
order to achieve small stretch over shortest-path routing in a
network with arbitrary (or (cid:13)at) endpoint identi(cid:12)ers, roughly
all routers must maintain an entry for roughly all endpoint
identi(cid:12)ers. The question we ask is: in order to achieve small
1
2
3
...
n
Figure 5: A simple chain network topology.
stretch over shortest-path routing, how many routers need
to be updated when endpoints move across routers?
Intuitively, if every router is updated upon every mobility
event, then the path stretch could be minimized. Also intu-
itively, if updates are restricted to at most one router (like
a home agent) per mobility event, the path stretch could be
as high as the diameter of the network as packets to the mo-
bile endpoint must go through the only router that knows its
whereabouts. We formally model these tradeoﬀs for several
toy topologies and explain one of these in detail below.
5.1 Chain topology
Consider a chain network topology as shown in Figure 5
with routers numbered from 1 to n, and a user u that ran-
domly hops from one router to another. This mobility can
be modeled using a discrete-time Markov process as follows.
Let Lt(u) be a random variable representing u’s location
If the transition probability P (Lt+1(u) =
at time slot t.
jjLt(u) = i) = 1
n , then the steady-state distribution of Lt(u)
is uniform, i.e., P (Lt(u) = i) = 1
n .
5.1.1
Let H(u) denote u’s home agent that keeps track of its
current location. We de(cid:12)ne path stretcht as the hop-count
distance from the home agent to an endpoint’s location at
time t. If H(u) were chosen randomly (as would be the case
in a network where diﬀerent nodes were equally likely to
be homed at any router and moved around randomly), the
stretch is derived as follows. Below dist(u; v) refers to the
hop count distance between u and v.
Indirection routing
∑
∑
E[path stretcht] = E[dist(H(u); Lt(u))]
=
=
= n2(cid:0)1
n
i=1 P (H(u) = i)
n
i=1
∑
ji (cid:0) jj
∑
≃ n
n
j=1
1
n
1
n
3n
3
n
j=1 P (Lt(u) = j)ji (cid:0) jj
(refer [21] for details)
Thus, with indirection, the expected path stretch is n
3 and
the update cost is 1 per mobility event. Note that we de(cid:12)ne
path stretch as the additive distance over the shortest-path
length (as opposed to a multiplicative factor) as this matches
what we are able to measure empirically (x6.3).
5.1.2 Name-based routing
With name-based routing, the path stretch is 0 if we as-
sume that routers are designed to always maintain forward-
ing tables corresponding to shortest-path routing. What is
the aggregate update cost, i.e., the fraction of routers that
must be updated, to achieve this minimal stretch? We de-
rive it as follows. Suppose each router has three ports, a left
(right) port connecting to the leftwise (rightwise) adjacent
router, and a local port connected to the local subnet. Then
a router i must update its forwarding table whenever an end-
point either moves from any leftward router to a rightward
router or vice-versa, or moves from any router other than i
to i or vice-versa. The expected update cost at router k is
E[update costk] = P (L(u)  k) (cid:1) Pk(L(u) (cid:20) k)
= k(cid:0)1
The expected aggregate update cost across all n routers is
n + 1
n(cid:0)k+1
k
n
n
n
n + n(cid:0)k
n(cid:0)1
∑
n
E[update cost] = 1
n
≃ 1
= n3+3n2(cid:0)n
3n3
3
n
k=1 E[update costk]
(refer [21] for details)
264Thus, for name-based routing, the aggregate update cost
per mobility event is 1/3 and the path stretch is 0.
5.1.3 Summary of results
We have similarly quanti(cid:12)ed the aggregate update cost vs.
path stretch tradeoﬀ for other toy topologies and the sim-
plistic random mobility model. The proofs are deferred to a
Topology
Chain
Clique
n=3
1
Binary tree
2 log2 n
Star
2
Indirection
stretch
update cost
Name-based routing
stretch
update cost
1=n
1=n
1=n
1=n
0
0
0
0
1=3
1
2 log2 n
n(cid:0)1
1
n+1
Table 1: Path stretch vs. aggregate update cost.
technical report [21]. Note that we have omitted the analy-
sis for a DNS-based approach above as the data path stretch
is 0 (ignoring a constant lookup overhead in the connection
initiation step) and the expected update cost is simply O(1)
(to the DNS), irrespective of topology.
6. DEVICE MOBILITY
In this section, we combine the measured NomadLog data
in x4 with the methodology in x3 to evaluate the cost-bene(cid:12)t
tradeoﬀs of diﬀerent approaches to handle mobility of de-
vices across networks. We begin by analyzing the extent of
network mobility across devices in the NomadLog data.
6.1 Extent of device mobility across networks
Figure 6 shows the distribution across users of the average
number of distinct network locations per day visited by a
user1. The trace consists of 372 users each of which is present
for at least one day in our trace. The median number of
ASes, IP pre(cid:12)xes, and IP addresses visited per day are 2,
2, and 3 respectively. This observation is consistent with
the expectation that users typically move across a cellular,
home, and work address in the course of a day.
Figure 7: Average number of transitions across net-
work locations per day made by users.
because a user can switch many times between a small num-
ber of ASes. The number of transitions depends upon the
user’s physical mobility, network performance or outage pat-
terns, and behavioral patterns, e.g., some users may prefer
to use WiFi for some apps but use LTE for others or make
these choices depending on current network quality. The
maximum and minimum numbers of average AS transitions
per day are 31.6 and 0.25 respectively. The median user
transitions across roughly one AS and three IP addresses.
6.2 Update cost of device mobility
To provide the abstraction of location-independence com-
munication, a device must update its changing network ad-
dresses somewhere, either in DNS, or at its home agent(s),
or at routers. For the (cid:12)rst two cases, the update cost is
straightforward and directly corresponds to the rate of ad-
dress transitions as shown above. For the third case, we
estimate the update cost using the methodology described
in x3.1 and x3.2 respectively.
6.2.1 Using Routeviews data
To this end, we use RIBs from 12 BGP-speaking Route-
views routers [8]. The set of routers includes four in Oregon
(labeled Oregon-1 to Oregon-4) and one each in Virginia,
California, Georgia, Mauritius, London, Tokyo, Sydney and
Sao Paulo. A single entry in a router’s RIB lists several at-
tributes of a single inter-domain route towards a given pre(cid:12)x.
Typically, there are several routes to any given pre(cid:12)x and
the set of all pre(cid:12)xes covers the entire IP address space.
(cid:1) (cid:1) (cid:1)
local pref. metric AS path
ip pre(cid:12)x
next hop
Figure 6: Average number of distinct network loca-
tions per day visited by users.
Figure 7 shows the distribution of the average number of
transitions across network locations per day by a user. The
number of AS transitions shows a lot more variation com-
pared to the number of distinct ASes in Figure 6, which is
1We use the terms user and device interchangeably.
To construct the FIB from a router’s RIB, we need to
compute a rank ordering of all of the routes for a single
pre(cid:12)x. We apply the following rules in priority order based