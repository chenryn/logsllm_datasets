formalize 
formal 
description of these relationships will be established [5].  
Software 
to 
requirements  or 
implement  a 
functionalities  F.  Thus,  if  the  system  is  executing  a 
functionality 
it  cannot  be  expressing 
systems  are  generally  designed 
set  of 
f ∈ then 
this  decomposition  process,  a 
functional 
involve 
F
elements of any other functionality in F.  Each of these 
functionalities in F  was designed to implement a set of 
business  requirements.  From  a  user's  perspective,  this 
software  system  will  implement  a  specific  set  of 
operations,  O.  This  mapping  from  the  set  of  user 
perceived  operations,  O,  to  a  set  of  specific  program 
functionalities  is  one  of  the  major  functions  in  the 
software  specification  process.    In  Table  1  we  can  see 
how two hypothetical user operations are mapped by this 
process onto a set of four functionalities.   In this table 
there  is  a  T  in  the  intersection  row  and  column  for 
operation,  o1,  and  functionality 
that 
functionality f1 implements requirement (operation) o1.  
indicating 
Table 1.  Mapping operations to functionalities 
f1 
f2
T 
T 
f3
T 
f4
T 
O  x  F 
o1
o2
f1
T 
lookup, 
labeling).  When  viewed 
From  a  computer  security  standpoint,  we  can 
envision  operations  as  the  set  of  services  available  to  a 
user  (e.g.,  login,  open  a  file,  write  to  a  device)  and 
functionality  as  the  set  of  internal  operations  that 
implement a particular operation (e.g., user-id validation, 
ACL 
this 
perspective, it is apparent that user operations that  may 
appear  to  be  non-security  relevant  may  actually  be 
implemented  with  security 
functionalities 
(sendmail  is  a  classic  example  of  this,  an  inoffensive 
operation of send mail can be transformed into an attack 
if  the  functionalities  that  deal  with  buffers  can  be 
overloaded).  
relevant 
from 
O  x  F 
Table 2.  Mapping functionalities to modules. 
  m6
T 
m1
T 
T 
T 
T 
m2
T 
m4
T 
m5
T 
T 
m3
T 
T 
T 
f1
f2
f3
f4
in  F 
The  software  design  process  is  strictly  a  matter  of 
assigning  functionalities 
to  specific  program 
Mm∈  the set of program modules.  The actual 
modules 
granularity of the notion of a module is not a significant 
factor  in  this  discussion.    The  granularity  should  be 
sufficient to provide the resolution needed for subsequent 
measurement  purposes. 
  For  our  purposes  in  this 
discussion,  a  module  will  be  a  C  function.    The  design 
process may be thought of as the process of defining just 
how the functional requirements will be implemented is 
a set, M, of program modules.  In Table 2, we can see the 
hypothetical  mapping  of  the  set  of  four  functionalities 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:06:32 UTC from IEEE Xplore.  Restrictions apply. 
established  in  Table  1,  to  a  specific  set  of  program 
modules. 
As a program executes it will make many transitions 
from  module  to  module.    Each  of  these  transitions  will 
represent  one  epoch,  or  time  increment.      For  the 
purposes  of  measurement,  we  are  interested  in  the 
relative frequency of execution for each module during a 
fixed  number  of  epochs  or  dump  interval.    We  will 
accumulate  these  data  in  a  module  profile.    A  module 
profile  for  an  n  module  system  will  be  an  n  element 
vector.  Each element of the vector will contain a tally of 
the  number  of  instances  that  each  module  has  executed 
during the current dump interval. 
  We  can  see  that  there  is  a  distinct  relationship 
between  any  given  operation,  o,  and  a  given  set  of 
program  modules.    That  is,  if  the  user  performs  a 
particular  operation  then  this  operation  will  manifest 
itself in certain modules receiving control.   We can tell, 
inversely, which program operations are being executed 
by  observing  the  pattern  of  modules  executing,  i.e.  the 
module  profile.    In  a  sense,  then,  the  mapping  of 
operations  to  modules  and  the  mapping  of  modules  to 
operations is reflexive. 
It  is  a  most  unfortunate  accident  of  most  software 
design  efforts  that  there  are  really  two  distinct  set  of 
operations.    On  the  one  hand,  there  is  a  set  of  explicit 
EO .    These  are  the  intended  operations  that 
operations 
appear  in  the  Software  Requirements  Specification 
documents.    On  the  other  hand,  there  is  also  a  set  of 
IO ,  that  represent  unadvertised 
implicit  operations, 
features  of  the  software  that  have  been  implemented 
through designer carelessness or ignorance.    These are 
not  documented,  nor  well  known  except  by  a  group  of 
knowledgeable  and/or  patient  system  specialists,  called 
hackers.   
IO ,  is  not  well 
known  for  most  systems.    We  are  obliged  to  find  out 
what  they  are  the  hard  way.    Crackers  and  other 
interested citizens will find them and exploit them.  What 
EO and the mappings of 
is known is the set of operations 
the operations onto the set of modules, M.  For each of 
the  explicit  operations  there  is  an  associated  module 
profile.  That is, if an explicit operation is executed, then 
a  well  defined  set  of  modules  will  execute  in  a  very 
predictable  fashion.    We  can  use  this  fact  to  develop  a 
reasonable  profile  of  the  system  when  it  is  executing  a 
set of operations from the set of explicit operations.   We 
can use this nominal system behavior to serve as a stable 
platform  against  which  we  may  measure  intrusive 
activity.    That  is,  when  we  observe  a  distribution  of 
module  profiles 
the 
EO   then  we  may  assume  that  we  are 
operations  in 
The  set  of  implicit  operations, 
is  not  representative  of 
that 
invoked 
in 
the 
IO ;  we 
implementation  of 
observing one or more operations from the set 
are being attacked. 
  When  a  program  is  actually  executing,  we  will 
observe  its  behavior  from  two  different  sources.    The 
first  behavioral  aspect  is  the  mapping  between  the  user 
operations  and 
the  sequence  of  program  module 
executions.  So if a user executed the following sequence 
of operations from the set shown in Table 1, { o1, o1, o1, 
o2, o1, o2} then we might observe the following execution 
sequence  of  modules,  {m1,  m2,  m1,  m3,  m1,  m2,  m1,  m6, 
m1, m5}.  The point, here, is that there is that there is a 
distinct relationship between what the user is doing, the 
sequence  of  module  executions  that  we  can  observe.  
This constitutes the behavior of the program. 
The second behavioral aspect of program execution 
has  to  do  with  the  way  that  program  modules  interact 
when  the  program  is  executing.    We  can  see,  for 
example, that functionality f3 is implemented in modules 
m3 and m6.  We are very interested in the way that m3 and 
m6  are 
that 
functionality.    It  may  well  be  that  m3  calls  m6  and 
whenever m3 is invoked m6 is also always invoked.   In 
this case there is little or no information in the call to m6 
and  we  can  learn  to  ignore  it.    A  very  different 
circumstance arises when module m3 is sometimes called 
when f3 is invoked and other times only m6 is called.  In 
this  case,  the  operation  of  the  two  modules  is  almost 
completely independent.   
The  behavioral  data  on  the  interaction  of  program 
modules  can  be  gleaned  from  the  profiles  of  module 
execution.    The  sequences  themselves  do  not  well 
disclose  system  behavior. 
the  actual 
behavioral data we will tally the frequency of execution 
of  each  module  during  a  fixed  number  of  program 
epochs, or module calls.  In this case, at fixed intervals 
we  will dump a profile vector containing the  frequency 
of  module  executions.    This  vector  will  contain  the 
essential information as to the precise nature of specific 
module interactions.  It is the interaction of the modules 
that 
the  sequences  module 
executions.   
4. The missing piece in the security puzzle 
In  our  approach  to  anomaly  detection  or  software 
misuse, we are interested in the behavior of the software 
system.    We  actually  open  up  the  running  software 
system and measure its behavior while it is running.  In 
this  context  the  data  may  be  seen  as  stimuli  for  the 
program  that exhibits some activity in response to each 
datum.    Data  in  the  normal  range  of  user  activity  will 
induce normal behavior on the software.  Data outside of 
this  range  will  induce  different  or  unusual  behavior  on 
the  system  that  may  be  readily  observed.      In  this 
approach  the  focus  shifts  from  trying  to  model  and 
reveal  behavior,  not 
  To  extract 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:06:32 UTC from IEEE Xplore.  Restrictions apply. 
understand  the  data  space  to  which  a  program  may  be 
subjected to the behavior of the program in response to 
the data input.   
The central issue here is that once we understand the 
notion  that  a  program  exhibits  behavior  that  can  be 
measured,  we  can  begin  to  assert  behavioral  control  on 
the program execution.  We can certify certain behaviors 
as  nominal  and  reject  behaviors  that  are  outside  of  this 
range.    We  can  do  this  in  real  time  because  we  are 
monitoring the activity of the system in real time.   
Control is the central issue in computer security.  It 
has long been accepted that  data control in the  form of 
encryption  is  a  necessity  to  preserve  the  integrity  of 
information  flowing  from  one  agency 
to  another.  
Controlling  access  to  system  resources  has  also  shown 
great value for imposing a security regime.   
Access control has been used over time as a means 
of  attaining  some  modicum  of  security.    In  the  middle 
ages,  castles  were  constructed  to  limit  the  access  of 
marauding bands of itinerant soldiers to the populace of a 
region.  These castles were effective if and only if they 
were  sufficiently  strong.    This  made  them  a  nightmare 
for the occupants.  The castles were cold, drafty and very 
restrictive in terms of the movement of their inhabitants.  
With  the  advent  of  the  trebuchet  and  the  cannon,  even 
these  imposing  and  uncomfortable  structures  became 
obsolete.    There  are  other  real  good  examples  of  failed 
access control in the Great Wall of China or the Maginot 
Line constructed before World War II to defend France 
against  the  Germans.    Access  control  is  a  deterrent  but 
not a solution.  Trusted computer operating systems have 
all of the user comfort of medieval castles.  They are a 
classical  example  of  the  castle  architecture  carried  into 
computer operating system design.   
The big downfall of all access control technology is 
the inherent vulnerability built into the system from the 
start.  The Maginot Line did not surround France.  The 
Germans  simply  went  around  it  to  the  north  when  the 
time  came  to  invade  France.    All  software  systems 