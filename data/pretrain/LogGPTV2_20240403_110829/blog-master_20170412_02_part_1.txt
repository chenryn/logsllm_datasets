## 快速入门PostgreSQL应用开发与管理 - 7 函数、存储过程和触发器  
##### [TAG 31](../class/31.md)
### 作者                                                                     
digoal                                                             
### 日期                                                                                                                                 
2017-04-12                                                           
### 标签                                                              
PostgreSQL , Linux            
----                                                                                                                              
## 背景   
## 本章大纲
### 一、运算符与函数  
#### 1 逻辑运算  
#### 2 比较运算  
#### 3 算数  
#### 4 字符串  
#### 5 bytea  
#### 6 bit  
#### 7 规则表达式  
#### 8 日期、数字、字符串格式化输出  
#### 9 时间  
#### 10 枚举  
#### 11 几何  
#### 12 网络地址  
#### 13 全文检索  
#### 14 XML  
#### 15 JSON、JSONB  
#### 16 序列  
#### 17 条件表达式  
#### 18 数组  
#### 19 范围  
#### 20 聚合  
#### 21 窗口  
#### 22 子查询表达式  
#### 23 行与数组表达式  
#### 24 返回集合的函数  
#### 25 系统信息函数  
#### 26 系统管理函数  
### 二、过程语言  
#### 1 语法  
#### 2 plpgsql函数内部结构  
#### 3 控制结构  
#### 4 游标  
#### 5 异常消息处理  
#### 6 plpgsql触发器函数  
### 三、解析一个存储过程  
#### 1 检查存储过程(函数)内容  
#### 2 调试plpgsql存储过程，输出每一次调用的QUERY详细执行计划  
#### 3 调试plpgsql函数  
### 四、SQL 函数  
### 五、触发器  
#### 1 触发器函数  
#### 2 事件触发器函数  
### 六、类型转换  
## 第五章：函数、存储过程和触发器  
https://www.postgresql.org/docs/9.6/static/functions.html  
### 1. 运算符与函数  
#### 逻辑运算  
```  
and, or, not  
```  
a|      b|      a AND b|        a OR b  
---|---|---|---  
TRUE|   TRUE|   TRUE|   TRUE  
TRUE|   FALSE|  FALSE|  TRUE  
TRUE|   NULL|   NULL|   TRUE  
FALSE|  FALSE|  FALSE|  FALSE  
FALSE|  NULL|   FALSE|  NULL  
NULL|   NULL|   NULL|   NULL  
a|      NOT a  
---|---  
TRUE|   FALSE  
FALSE|  TRUE  
NULL|   NULL  
#### 比较运算  
```  
a BETWEEN x AND y  
a >= x AND a  y  
```  
比较操作符  
Operator|       Description  
---|---  
|      greater than  
=|     greater than or equal to  
=|      equal  
<> or !=|       not equal  
断言语法  
Predicate|      Description  
---|---  
a BETWEEN x AND y|      between  
a NOT BETWEEN x AND y|  not between  
a BETWEEN SYMMETRIC x AND y|    between, after sorting the comparison values  
a NOT BETWEEN SYMMETRIC x AND y|        not between, after sorting the comparison values  
a IS DISTINCT FROM b|   not equal, treating null like an ordinary value  
a IS NOT DISTINCT FROM b|       equal, treating null like an ordinary value  
expression IS NULL|     is null  
expression IS NOT NULL| is not null  
expression ISNULL|      is null (nonstandard syntax)  
expression NOTNULL|     is not null (nonstandard syntax)  
boolean_expression IS TRUE|     is true  
boolean_expression IS NOT TRUE| is false or unknown  
boolean_expression IS FALSE|    is false  
boolean_expression IS NOT FALSE|        is true or unknown  
boolean_expression IS UNKNOWN|  is unknown  
boolean_expression IS NOT UNKNOWN|      is true or false  
计算空值或非空个数  
Function|       Description|    Example|        Example Result  
---|---|---|---  
num_nonnulls(VARIADIC "any")|   returns the number of non-null arguments|       num_nonnulls(1, NULL, 2)|       2  
num_nulls(VARIADIC "any")|      returns the number of null arguments|   num_nulls(1, NULL, 2)|  1  
#### 算数  
运算符  
![pic](20170412_02_pic_001.jpg)  
函数  
![pic](20170412_02_pic_002.jpg)  
![pic](20170412_02_pic_003.jpg)  
随机值函数  
![pic](20170412_02_pic_004.jpg)  
三角函数  
![pic](20170412_02_pic_005.jpg)  
#### 字符串  
常用字符串操作符与函数  
![pic](20170412_02_pic_006.jpg)  
字符串处理函数  
![pic](20170412_02_pic_007.jpg)  
![pic](20170412_02_pic_008.jpg)  
![pic](20170412_02_pic_009.jpg)  
编码转换函数  
![pic](20170412_02_pic_010.jpg)  
![pic](20170412_02_pic_011.jpg)  
![pic](20170412_02_pic_012.jpg)  
![pic](20170412_02_pic_013.jpg)  
格式化函数  
常用于构建动态SQL  
```  
format(formatstr text [, formatarg "any" [, ...] ])  
```  
嵌入格式  
```  
%[position][flags][width]type  
type:  
s formats the argument value as a simple string. A null value is treated as an empty string.  
I treats the argument value as an SQL identifier, double-quoting it if necessary. It is an error for the value to be null (equivalent to quote_ident).  
L quotes the argument value as an SQL literal. A null value is displayed as the string NULL, without quotes (equivalent to quote_nullable).  
```  
例子  
```  
SELECT format('Hello %s', 'World');  
Result: Hello World  
SELECT format('Testing %s, %s, %s, %%', 'one', 'two', 'three');  
Result: Testing one, two, three, %  
SELECT format('INSERT INTO %I VALUES(%L)', 'Foo bar', E'O\'Reilly');  
Result: INSERT INTO "Foo bar" VALUES('O''Reilly')  
SELECT format('INSERT INTO %I VALUES(%L)', 'locations', E'C:\\Program Files');  
Result: INSERT INTO locations VALUES(E'C:\\Program Files')  
```  
#### bytea  
函数和操作符  
![pic](20170412_02_pic_014.jpg)  
![pic](20170412_02_pic_015.jpg)  
#### bit  
操作符  
![pic](20170412_02_pic_016.jpg)  
INT与BIT的转换 , 例子  
```  
44::bit(10)                    0000101100  
44::bit(3)                     100  
cast(-44 as bit(12))           111111010100  
'1110'::bit(4)::integer        14  
```  
#### 规则表达式  
正则操作符  
![pic](20170412_02_pic_017.jpg)  
例子  
```  
'abc' ~ 'abc'    true  
'abc' ~ '^a'     true  
'abc' ~ '(b|d)'  true  
'abc' ~ '^(b|c)' false  
```  
转义字符  
![pic](20170412_02_pic_018.jpg)  
快捷字符  
![pic](20170412_02_pic_019.jpg)  
例子, 提取匹配字符  
```  
SELECT SUBSTRING('XY1234Z', 'Y*([0-9]{1,3})');  
Result: 123  
```  
例子, 行列变换  
```  
一个或多个空格隔开  
SELECT foo FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', E'\\s+') AS foo;  
  foo     
-------  
 the      
 quick    
 brown    
 fox      
 jumps   
 over     
 the      
 lazy     
 dog      
(9 rows)  
0个或多个空格隔开  
SELECT foo FROM regexp_split_to_table('the quick brown fox', E'\\s*') AS foo;  
 foo   
-----  
 t           
 h           
 e           
 q           
 u           
 i           
 c           
 k           
 b           
 r           
 o           
 w           
 n           
 f           
 o           
 x           
(16 rows)  
```  
例子, 行转数组  
```  
SELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', E'\\s+');  
              regexp_split_to_array               
-----------------------------------------------  
 {the,quick,brown,fox,jumps,over,the,lazy,dog}  
(1 row)  
```  
#### 日期、数字、字符串格式化输出  
格式化函数  
![pic](20170412_02_pic_020.jpg)  
时间、日期格式化样式  
![pic](20170412_02_pic_021.jpg)  
![pic](20170412_02_pic_022.jpg)  
时间日期格式化前缀  
![pic](20170412_02_pic_023.jpg)  
数字格式化样式  
![pic](20170412_02_pic_024.jpg)  
数字格式化前缀  
![pic](20170412_02_pic_025.jpg)  
to_char例子  
![pic](20170412_02_pic_026.jpg)  
![pic](20170412_02_pic_027.jpg)  
#### 时间  
操作符  
![pic](20170412_02_pic_028.jpg)  
函数  
![pic](20170412_02_pic_029.jpg)  
![pic](20170412_02_pic_030.jpg)  
时区转换函数  
![pic](20170412_02_pic_031.jpg)  
例子  
```  
SELECT TIMESTAMP '2001-02-16 20:38:40' AT TIME ZONE 'MST';  
Result: 2001-02-16 19:38:40-08  
SELECT TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40-05' AT TIME ZONE 'MST';  
Result: 2001-02-16 18:38:40  
```  
获取事务、语句调用时的时间  
```  
事务时间  
transaction_timestamp()  
now()  
语句时间  
statement_timestamp()  
clock_timestamp()  
timeofday()  
```  
获取当前事务时间或日期  
```  
CURRENT_DATE  
带时区  
CURRENT_TIME  
CURRENT_TIMESTAMP  
CURRENT_TIME(precision)  
CURRENT_TIMESTAMP(precision)  
不带时区  
LOCALTIME  
LOCALTIMESTAMP  
LOCALTIME(precision)  
LOCALTIMESTAMP(precision)  
```  
睡眠函数  
```  
pg_sleep(seconds)  
pg_sleep_for(interval)  
pg_sleep_until(timestamp with time zone)  
```  
例子  
```  
SELECT pg_sleep(1.5);  
SELECT pg_sleep_for('5 minutes');  
SELECT pg_sleep_until('tomorrow 03:00');  
```  
#### 枚举  
枚举类型函数  
![pic](20170412_02_pic_032.jpg)  
例子  
```  
CREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow', 'green', 'blue', 'purple');  
```  
#### 几何  
操作符  
![pic](20170412_02_pic_033.jpg)  
函数  
![pic](20170412_02_pic_034.jpg)  
类型转换函数  
![pic](20170412_02_pic_035.jpg)  
#### 网络地址  
操作符  
![pic](20170412_02_pic_036.jpg)  
函数  
![pic](20170412_02_pic_037.jpg)  
![pic](20170412_02_pic_038.jpg)  
#### 全文检索  
操作符  
![pic](20170412_02_pic_039.jpg)  
函数  
![pic](20170412_02_pic_040.jpg)  
![pic](20170412_02_pic_041.jpg)  
调试函数  
![pic](20170412_02_pic_042.jpg)  
#### XML  
https://www.postgresql.org/docs/9.6/static/functions-xml.html  
#### JSON、JSONB  
json\jsonb 通用操作符  
![pic](20170412_02_pic_043.jpg)  
jsonb 操作符  
![pic](20170412_02_pic_044.jpg)  
构建JSON值的函数  
![pic](20170412_02_pic_045.jpg)  
JSON值处理函数  
![pic](20170412_02_pic_046.jpg)  
![pic](20170412_02_pic_047.jpg)  
![pic](20170412_02_pic_048.jpg)  
#### 序列  
函数  
![pic](20170412_02_pic_049.jpg)  
例子  
```  