### 说明

- **get_constructor**
  - **tagPOINT**: 0
  - **CBaseClass**: 1
  - **说明**: 是否有构造函数或析构函数

- **get_constType**
  - **tagPOINT**: 0
  - **CBaseClass**: 0
  - **说明**: 是否定义为 const

- **get_hasAssignmentOperator**
  - **tagPOINT**: 0
  - **CBaseClass**: 1
  - **说明**: 是否有赋值运算符

- **get_hasCastOperator**
  - **tagPOINT**: 0
  - **CBaseClass**: 0
  - **说明**: 是否有类型转换（cast）运算符

- **get_hasNestedTypes**
  - **tagPOINT**: 0
  - **CBaseClass**: 1
  - **说明**: 是否包含嵌套类型

- **get_length**
  - **tagPOINT**: 0x8
  - **CBaseClass**: 0x21c
  - **说明**: 长度（字节数）

- **get_name**
  - **tagPOINT**: `tagPOINT`
  - **CBaseClass**: `CBaseClass`
  - **说明**: 名称

- **get_nested**
  - **tagPOINT**: 0
  - **CBaseClass**: 0
  - **说明**: 该类型是否是嵌套类型

- **get_overloadedOperator**
  - **tagPOINT**: 0
  - **CBaseClass**: 0
  - **说明**: 是否有运算符重载

- **get_packed**
  - **tagPOINT**: 0
  - **CBaseClass**: 0
  - **说明**: 是否被紧缩（成员紧密相连*）

- **get_scoped**
  - **tagPOINT**: 0
  - **CBaseClass**: 0
  - **说明**: 是否出现在非全局域

- **get_udtKind**
  - **tagPOINT**: `struct[0]`
  - **CBaseClass**: `class[1]`
  - **说明**: UDT 子类

- **get_unalignedType**
  - **tagPOINT**: 0
  - **CBaseClass**: 0
  - **说明**: 是否没有内存对齐

- **get_virtualTableShapeId**
  - **tagPOINT**: 3295
  - **CBaseClass**: 4382
  - **说明**: 虚表符号的 ID

- **get_volatileType**
  - **tagPOINT**: 0
  - **CBaseClass**: 0
  - **说明**: 是否定义为 volatile

**注释**:
- *编译器默认会为结构中的每个成员进行自动的内存对齐，以提高内存访问效率。因为内存对齐，不同的成员间可能有一定的空隙。所谓紧缩就是在定义类型时通过`#pragma pack`告诉编译器不要自动内存对齐，使各成员紧密相连。

知道了一个 UDT 符号的 ID 后，可以使用 `IDiaSession` 接口的 `findChildren` 方法来寻找它的子符号，以便找到它的成员和方法。例如，`tagPOINT` 符号的子符号有两个，如表 25-16 所示。

### 表 25-16: `tagPOINT` 符号的子符号

| ID   | 偏移 | 名称 | 可访问性 | SymTag | DataKind | 位置类型 | 父词条 | 类型 ID |
|------|------|------|----------|--------|----------|----------|--------|---------|
| 3298 | 0    | x    | Public[3]| Data[7]| Member[7]| ThisRel[4]| 1226   | 3299    |
| 3299 | 3300 | y    | Public[3]| Data[7]| Member[7]| ThisRel[4]| 1226   | 3299    |

最后一列的类型 ID（#3299）代表描述这个成员类型的符号 ID。寻找该符号，是一个 long 类型的基本类型符号，这正好与 `tagPOINT` 结构的成员类型相符。值得说明的是，这两个子符号的父词条 ID 并不是 `tagPOINT` 符号的 ID（#1276），而是 EXE 符号的 ID。这是因为，PDB 文件中除了有词典编撰意义上的父子关系外，还有类型角度的父子关系，`findChildren` 方法寻找的是类型定义角度的子符号。

类似的，表 25-17 是使用 `findChildren` 方法搜索到的 `CBaseClass` 符号（#3291）的子符号。其中，#3301 和 #3303 是 `CBaseClass` 类的虚拟方法表（VTable），#3304、#3306 和 #3316 是 `CBaseClass` 的数据成员，其他是类的方法。

### 表 25-17: `CBaseClass` 符号的子符号（部分）

| ID   | 节 | 偏移 | RVA     | 长度 | 名称                       | Tag | 父词条 | 类型   |
|------|----|------|---------|------|----------------------------|-----|--------|--------|
| 3301 | 0  | 25   | 1226    | 3302 |                            |     |        |        |
| 3303 | 0  | 25   | 1226    | 3302 |                            |     |        |        |
| 3304 | 8  | m_nPrivate | 7      | 1226 | 3305                      |     |        |        |
| 3306 | 12 | m_szName  | 7      | 1226 | 3307                      |     |        |        |
| 3308 | CBaseClass | 5      | 1226    | 3309 |                            |     |        |        |
| 300  | 2  | 0x11550 | 0x43    | CBaseClass::CBaseClass     | 5   | 292    | 3310   |
| 304  | 2  | 0x115a0 | 0x33    | CBaseClass::~CBaseClass    | 5   | 292    | 3310   |
| 3311 | Run | 5      | 1226    | 3312 |                            |     |        |        |
| 149  | 2  | 0x11cd0 | 0x30    | CBaseClass::GetName        | 5   | 12     | 3314   |
| 3315 | f  | 5      | 1226    | 3310 |                            |     |        |        |
| 532  | __EventingCS | 7      | 1226    | 3288 | 3322                     |     |        |        |
| 3322 | operator= | 5      | 1226    | 3323 |                            |     |        |        |
| 3324 | __vecDelDtor | 5      | 1226    | 3325 |                            |     |        |        |

父词条列中的 292 和 12 都是 Compiland 符号，分别是 `BaseClass.obj` 和 `HiWorld.obj`。SymTag 列中的 25、7 和 5 分别代表 VTable 符号、数据类符号和函数类符号，我们将在后面作详细介绍。

### 25.10.3 SymTagBaseClass[18]

`SymTagBaseClass` 符号用来描述派生类所属的基类。例如在 HiWorld 项目中，`CClassFoo` 是从 `CBaseClass` 派生而来的。

```cpp
class CClassFoo : public CBaseClass
```

为了描述这一继承关系，`CClassFoo` 符号（UDT）会有一个 `SymTagBaseClass` 类型的子符号。表 25-18 列出了这个符号的属性。

### 表 25-18: 描述基类信息的 BaseClass 符号

| 属性                         | 值          | 说明                   |
|------------------------------|-------------|------------------------|
| get_access                   | public[3]   | 继承关系的可访问性     |
| get_constructor              | 1           | 有构造函数或析构函数   |
| get_constType                | 0           | 无 Const 特征          |
| get_hasAssignmentOperator    | 1           | 有赋值运算符           |
| get_hasCastOperator          | 0           | 没有类型转换运算符     |
| get_hasNestedTypes           | 1           | 有嵌套类型             |
| get_indirectVirtualBaseClass | 0           |                        |