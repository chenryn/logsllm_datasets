title:Practical and Efficient Attribute-Based Encryption with Constant-Size
Ciphertexts in Outsourced Verifiable Computation
author:Kai Zhang and
Junqing Gong and
Shaohua Tang and
Jie Chen and
Xiangxue Li and
Haifeng Qian and
Zhenfu Cao
E(cid:14)cient Attribute-Based Searchable Encryption
on the Cloud Storage
Wanfen Guo, Xiaolei Dong, Zhenfu Cao, Jiachen Shen
August 16, 2017
Abstract
Cloud computing is very popular for its computing and storage ca-
pacity at lower cost. More and more data are being moved to the cloud
to reduce storage cost. On the other hand, since the cloud is not fully
trustable, in order to protect data privacy against third-parties and even
the cloud server, they are usually encrypted before uploading. However,
many operations, such as searching, are hard to perform on encrypted da-
ta. To solve this problem, searchable encryption has emerged. Searchable
encryption in multi-user setting is much less e(cid:14)cient than in single-user
setting. In order to address this problem, we propose a multi-owner to
multi-user searchable encryption scheme based on attribute-based encryp-
tion. Our scheme keeps data secure in the cloud even against the cloud
server. It allows users with appropriate authorizations to perform search
operations on encrypted data. In addition, search tokens are generated
by users instead of data owners. We prove that token privacy and index
privacy are well protected in our scheme. The cloud server and illegimate
users are not able to get any useful information about search tokens and
ciphertexts. Ciphertexts of our scheme are constant-size, which reduce
the time-complexity and bandwidth overhead of our scheme.
Keywords: Cloud storage, cloud computing, attribute-based encryption, multi-
users searchable encryption
1 Introduction
With the development of the information technology, more and more infor-
mation exchanges on the Internet. Therefore, not only the computers but also
the mobile devices produce high-volume of data. As a result, cloud storage has
become more and more popular with the low cost and vast capacity. While the
information uploaded to the cloud may be sensitive and data owners want to
keep them secret and prevent them from being exposed. What concerns data
owners is that the cloud server is capable of manipulating their data in the cloud
storage, so a method of encryption on the important data before uploading has
been adopted. On the other hand, the goal of (cid:12)le storage is that we can (cid:12)nd
1
data when we need them. Although encryption helps in keeping data safe, it
makes performing computation on the data di(cid:14)cult, such as search operations.
One of naive methods is to download all encrypted (cid:12)les and decrypt them, then
we can perform search operations on the plaintext (cid:12)les. This results in the huge
bandwidth overhead and extra cost on the storage of downloaded (cid:12)les. The
searchable encryption(SE) can solve the problem of searching on the ciphertex-
t and take full advantage of the cloud computing. Let’s consider a scenario:
In a hospital, all patients’ information are uploaded to the hospital system in
the form of ciphertexts, which include their names, telephone numbers, disease
types, record time, the name of their doctors and so on. As a patient, he should
be able to search all the information about himself and nothing about other
people. As a doctor, to track the patients’ recovery, he can search the names
and telephone numbers of his patients. Even the doctor of a patient A changed
for some reason, the new doctor still can search the name and telephone number
of A without encrypting A’s information again. The statistical department can
search the number of the patients who a(cid:11)ected some type of diseases during
a certain period of time. Therefore, in this scenario, the di(cid:11)erent authorities
should be given to di(cid:11)erent people so that they can search di(cid:11)erent information
according to their roles. However, most existing schemes are not able to achieve
this. In the general symmetric searchable encryption(SSE) setting, when a data
user wants to search on the (cid:12)les, he should request a search token from the
data owner. After sending the search token to the cloud, the data users will
receive search results computed by the cloud server. In this case, we can see that
the keyword that the data user searched is known by the data owner which is
not desirable. What’s more, multi-owners to multi-users scheme model is more
practical than one-owners to one users. And, the computing capacity of mobile
phones and wearable devices are so week that they only perform e(cid:14)cient algo-
rithms. The problem of the computation complexity and space complexity of is
worth noting. And the response speed of search operations should be improved.
1.1 Our Contributions
We design an e(cid:14)cient attribute-based searchable encryption(EABSE) on the
cloud storage scheme, which allows the cloud to execute the search operations
on the ciphertext and forbids the cloud to get more information except the
search results. We use inverted index data structure to store the index of the
(cid:12)les. The index is encrypted using our EABSE schemes and we select a sym-
metric scheme(such as AES, etc.) to encrypt the (cid:12)les. Our contributions can
be concluded as bellows:
Our scheme implements multi-owners to multi-users searchable encryption
on the base of ciphertext-policy attribute-based encryption. The data owners
use a certain access policy to encrypt the keywords in index, and the data users
whose attributes satisfy the access policy can achieve the corresponding search
tokens.
Our scheme protects the privacy of both the data owners and the data users.
Only when data users’ attributes satisfy the data’s access policy, he can get the
2
data which encrypted by the data owner. On the other hand, in this scheme, the
search token is computed by the users, and the data owners don’t know which
word the users want to search. While in the general scenes, the data user must
submit the keyword he want to search and apply the data owners for search
tokens.
Under the random oracle security model, we de(cid:12)ne the security of the E-
ABSE basing on the DL-assumption and construct a proper scheme. Moreover,
we analyze the security of the scheme and prove it secure from the aspects of
correctness and privacy.
We improve the e(cid:14)ciency of the scheme to meet the needs of the practical
scenes. In time complexity, we improved the complex computation operations.
In space complexity, we reduce the size of the ciphertext greatly.
The inverted index, the bilinear pairing and ciphertext policy attribute-based
encryption are the powerful tools in the scheme.
1.2 Related Work
Many search schemes have been proposed after the symmetric searchable
encryption was (cid:12)rst introduced in [1] and asymmetric searchable encryption
was introduced in [2].
Searchable Encryption SE technology solves the problem of searching on
the encrypted (cid:12)les and improves the practicability of cloud storage and cloud
computing. Not only the functionality but also e(cid:14)ciency of the searchable
encryption have improved a lot.
In [3], the scheme which supported search-
ing multi-keyword at the same time was proposed. [5] introduced a searchable
scheme with dynamic updating. And, the time of updating, which includes
addition and deletion, was as much as searching. To improve the e(cid:14)ciency,
utilizing the useful RAM as a solution like [6] was deployed. Since Abdalla et
al. [4] constructed asymmetric searchable encryption scheme from identity based
encryption(IBE) and proved it secure, some works transformed the e(cid:14)cient IBE
into e(cid:14)cient PEKS [23]. The multi-participants searchable encryption allowed
data share among many people [21, 22], where the authorised data-users can
search on the (cid:12)les uploaded by according data-owners. Our work emphasises
the research on multi-users model in searchable schemes.
Index The index of the (cid:12)les is very important in search. Di(cid:11)erent indexes
have both advantages and disadvantages. Curtmola et al. [1] proposed the (cid:12)rst
encrypted searchable index basing on the inverted index. Some searches base
on inverted index because of the e(cid:14)ciency while it is not convenient for the (cid:12)les
updating. The index basing on a bloom (cid:12)lter was introduced by Goh et al. [7].
While Chang et al. proposed a vector index in [8]. Diverse kinds of index are
proposed to assist in perfecting the scheme.
3
Attribute-Based Searchable Encryption To remove the Trusted Author-
ity(TA) in identity-based encryption schemes, Sahai and Waters [15] presented
FIBE as a solution which we considered as the prototype of Attribute-Based
Encryption(ABE). In practical scenes, ciphertext-policy ABE(CP-ABE) as an
e(cid:11)ective method to solve the data share in safety between multiple data-owners
and multiple data-users, was very popular and discussed by many papers [16{18].
ABE family is diversi(cid:12)ed a lot. ABE plays an important role in (cid:12)ne-grained
access control. The searchable encryption scheme with data users’ attributes
as the search secret key is more practical. Attribute-based searchable encryp-
tion(ABSE) and its application were proposed in [14,24]. As scheme in [14], data
owners encrypted their index using di(cid:11)erent access policy, then data users were
able to search keywords that they were interested in if their attributes satis(cid:12)ed
the associated access policy. Besides, [14] proposed veri(cid:12)able attribute-based
searchable encryption on the malicious cloud. Most existing works has imple-
mented additional function of ABE in ABSE, like revocability of data users’
search right. However, the computation complexity and communication e(cid:14)-
ciency of the above schemes were not taken into account. In this paper, we use
ABE as a smoothly tools to implement the search on ciphertext. Therefore, we
require the ABE scheme with enough e(cid:14)ciency. We adopt constant-ciphertext
extension ABE [19, 20] to prevent the time complexity and space complexity
increase obviously with the data growing on the cloud. Besides, we reduce the
communication cost between data-owners and cloud when upload the constant
ciphertext.
2 Preliminary
Inverted Index In the searchable encryption systems, the inverted index [10]
is a practical data structure. As showed in the Figue1, the inverted index
includes many inverted lists Iw1 , Iw2 ,··· , Iwm, where m is the size of the keyword
dictionary. One inverted list Iwi contains all (cid:12)les that contain the keyword wi.
The (cid:12)les f1, f2,··· , fn1 in Iw1 include the keyword w1 where n1 denotes the
number of the (cid:12)les. The reason that we use inverted index like most works
[11{13] is the search e(cid:14)ciency can be improved comparing to other indexes [1,9].
Symmetric Bilinear Group Let G and GT be the two cyclic multiplicative
group of prime order p, and g is the generator of G. There exists a pairing e:
G × G −→ GT with the below three properties:
(1) Bilinearity: e(ga, gb) = e(g, g)ab, for a, b ∈ Zp;
(2) Non-degeneracy: e(g, g) ̸= 1;
(3) Computability: for all a, b ∈ Zp, e(ga, gb) is e(cid:14)ciently computed.
4
Figure 1: Inverted Index
Decisional Linear (DL) Assumption There exists g, f, h chosen randomly
from the group G and r1, r2 chosen randomly from Zp. DL assumption says
the probability of a probabilistic polynomial-time algorithm A can distinguish
Q = hr1+r2 with Q is random element from the tuple (g, f, h, f r1 , gr2 , Q) is
negligible. We de(cid:12)ne ϵ is a negligible parameter, then the advantage of A in
solving DL problem is
|P r[A(g, f, h, f r1, gr2 , hr1+r2) = 1] − P r[A(g, f, h, f r1 , gr2 , Q) = 1]| 6 ϵ
3 Our Scheme
The scheme implements the multi-owners to multi-users keyword search
functionality with high-e(cid:14)ciency.
In order to satisfy the requirement of real
environment, we promise the correctness of the search result but also the priva-
cy of the data in storage and transmission.
3.1 System model
There are three main entities: data owner, data user and cloud server. Fol-
lowing the (cid:12)gure2, data owners encrypt their (cid:12)les F = {f1, f2,··· , fn} into the
ciphertexts C = {c1, c2,··· , cn} using some symmetric encryption. Because the
a pre-de(cid:12)ned keyword dictionary W D = {w1, w2,··· , wm} is needed. Every
(cid:12)le encryption is common, we don’t discuss it in detail in this paper. Of course,
data owner constructs his encrypted inverted index according to the keyword
dictionary. We can use the identi(cid:12)er of the (cid:12)le instead of the (cid:12)le itself stored
in the index for convenience in actual application. Finally, data owner uploads
all the above information to cloud server. When the data user wants to search
5
Figure 2: System Model
some keyword, he generates search token using his attributes. The cloud server
executes the search on the index after receiving the token and returns the result
to the user.
3.2 Algorithms and Security
3.2.1 Algorithms
According to the system model, we divide our scheme into three parts: data
upload, query and data download. Each part is implemented by several algo-
rithms respectively.
Data Upload This part is executed by the data owner and system. The
owner generates a secure inverted index and encrypts (cid:12)les before uploading.
(msk, pk) ← Setup(U, 1λ). On input a security parameter λ and the at-
tribute set U(which includes the all attributes of users), this probabilistic algo-
rithm outputs the master key msk and public key pk.
(cphW, cphF ) ← Enc(S, W D, F, pk). After receiving the access policy S,
keyword dictionary W D = {w1, w2,··· , wm} and the (cid:12)le set F = {f1, f2,··· , fn},
the probabilistic encryption algorithm generates the encrypted index and the
ciphertext of (cid:12)les. The (cid:12)le encryption is executed using some simple symmetric
encryption considering of the e(cid:14)ciency.
Query This part is executed by the data user and the cloud server. The user
generates token for the keyword he wants to query.
sk ← KeyGen(Attr, msk, pk). Given the attributes Attr by the user, master
key msk and public key pk, the probabilistic algorithm outputs the secret key
sk.
6
tok ← T okenGen(pk, sk, w). This algorithm is used to generate token tok
with the secret key sk and the keyword w to be queried.
Data Download This part is executed by the cloud server. After receiving
the search token, the cloud server runs Search algorithm on the data in cloud
storage. Then it downloads the matched ciphertexts of (cid:12)les and returns them
to user.
rslt ← Search(tok, cphW, cphF ). This deterministic algorithm outputs the
ciphertext of the (cid:12)les cphF if cphW can matched with the tok, outputs ⊥
otherwise.
3.2.2 Security
In the general schemes, we suppose the data owner and the data user are
trusted, but the cloud server is semi-trusted. It means that the cloud server
would execute data users’ instructions honestly but try to get the information
about what it is curious about. In the common ABE schemes, the data is closed
absolutely after encryption. While the ciphertexts in searchable encryption
must leave a threshold for each keyword ciphertext. Therefore, the security
of the searchable encryption is more tedious. In this paper, we guarantee the
scheme secure from two aspects: correctness and privacy.
Correctness The search algorithm outputs the right result if only if the inputs
of the Search(token, cphW, cphF ) algorithm are from the Setup, KeyGen, Enc