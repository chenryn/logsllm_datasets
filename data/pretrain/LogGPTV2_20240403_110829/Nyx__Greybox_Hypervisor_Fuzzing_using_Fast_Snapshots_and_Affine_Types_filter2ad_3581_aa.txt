title:Nyx: Greybox Hypervisor Fuzzing using Fast Snapshots and Affine Types
author:Sergej Schumilo and
Cornelius Aschermann and
Ali Abbasi and
Simon W&quot;orner and
Thorsten Holz
Nyx: Greybox Hypervisor Fuzzing using 
Fast Snapshots and Affine Types
Sergej Schumilo, Cornelius Aschermann, Ali Abbasi, Simon Wörner, and 
Thorsten Holz, Ruhr-Universität Bochum
https://www.usenix.org/conference/usenixsecurity21/presentation/schumilo
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.NYX: Greybox Hypervisor Fuzzing using Fast Snapshots and Afﬁne Types
Sergej Schumilo, Cornelius Aschermann, Ali Abbasi, Simon Wörner and Thorsten Holz
Ruhr-Universität Bochum
Abstract
A hypervisor (also know as virtual machine monitor, VMM)
enforces the security boundaries between different virtual
machines (VMs) running on the same physical machine. A
malicious user who is able to run her own kernel on a cloud
VM can interact with a large variety of attack surfaces. Ex-
ploiting a software fault in any of these surfaces leads to full
access to all other VMs that are co-located on the same host.
Hence, the efﬁcient detection of hypervisor vulnerabilities
is crucial for the security of the modern cloud infrastructure.
Recent work showed that blind fuzzing is the most efﬁcient
approach to identify security issues in hypervisors, mainly
due to an outstandingly high test throughput.
In this paper we present the design and implementation of
NYX, a highly optimized, coverage-guided hypervisor fuzzer.
We show how a fast snapshot restoration mechanism that al-
lows us to reload the system under test thousands of times per
second is key to performance. Furthermore, we introduce a
novel mutation engine based on custom bytecode programs,
encoded as directed acyclic graphs (DAG), and afﬁne types,
that enables the required ﬂexibility to express complex inter-
actions. Our evaluation shows that, while NYX has a lower
throughput than the state-of-the-art hypervisor fuzzer, it per-
forms competitively on simple targets: NYX typically requires
only a few minutes longer to achieve the same test coverage.
On complex devices, however, our approach is able to signiﬁ-
cantly outperform existing works. Moreover, we are able to
uncover substantially more bugs: in total, we uncovered 44
new bugs with 22 CVEs requested. Our results demonstrate
that coverage guidance is highly valuable, even if a blind
fuzzer can be signiﬁcantly faster.
1 Introduction
As the digital landscape shifts more and more towards cloud
computing, the security of hypervisors becomes increasingly
vital for our society. At the same time, hypervisors are com-
plex pieces of software that deal with very low-level details of
the underlying hardware. To properly understand the behavior
of a hypervisor both for security analysts and off-the-shelf
analysis tools, we need a large amount of information on
low-level hardware details. In combination with the fact that
they are typically running in a highly privileged setting, this
makes it difﬁcult to properly test and analyze hypervisors for
potential (security) bugs.
Fuzzing has been studied as an effective way to uncover
bugs in hypervisors [7, 12, 13, 23, 24, 28, 38, 47, 48, 52, 53].
The state of-the-art methods are VDF [28] and HYPER-
CUBE [48]. The former is based on isolating individual
QEMU device drivers into harnesses that can be fuzzed by
AFL [65], while the latter does not use any coverage feedback
but is a blind fuzzer. Surprisingly, HYPER-CUBE still outper-
formed VDF on nearly all benchmarks. This is due to the fact
that the device emulation in VDF is way too slow. In addition,
the increased test throughput of a blind fuzzer outweighs the
advantages of coverage feedback. Generally speaking, all ex-
isting fuzzers either isolate a part of the hypervisor code base
into a standalone ring-3 application (harness) to obtain code
coverage feedback, or are not guided by coverage feedback
at all. Existing approaches have signiﬁcant drawbacks, as we
explain in the following.
One the one hand, isolating individual device emulators
requires signiﬁcant manual effort. Hence, such methods do
not scale across different hypervisor implementations. Even
worse, they risk introducing bugs that cannot be triggered in
the original version (false positive) and more importantly, they
can hide bugs that would otherwise be found (false negatives).
To avoid this, one has to be very careful to reproduce the
original environment of the device emulator faithfully. In
addition, this approach is unable to test the parts that cannot
easily be extracted. On the other hand, blind fuzzing is very
efﬁcient if a precise generator of the expected behavior is
given. Unfortunately, this method fails to uncover “interesting”
(especially security-critical) behaviors in complex devices and
interfaces within a hypervisor. Most recent research in the
general area of fuzzing has focused on coverage guidance as a
feedback loop [2,6,10,14,42,43,62,65]. Time and time again,
USENIX Association
30th USENIX Security Symposium    2597
experiments have shown that coverage-guided fuzzing can
drastically improve the ability to ﬁnd software faults. Modern
coverage-guided fuzzers can “learn” how interesting inputs
look like without a precise speciﬁcation. Even in the case
where a speciﬁcation is given, coverage-guided fuzzing can
greatly increase the ability to test interesting behavior over
blind fuzzing [1, 40, 43].
In this paper, we present NYX, a novel fuzzer that is able
to test hypervisors (and, in fact, arbitrary x86 software) using
coverage-guided fuzzing. As we will later see, our approach
signiﬁcantly outperforms HYPER-CUBE on complex devices,
re-establishing the observation that coverage guidance offers
signiﬁcant advantages over blind fuzzing. This holds even if
it comes with a signiﬁcant reduction in test throughput.
Implementing coverage-guided hypervisor fuzzing without
relying on manually created harnesses introduces its own
set of challenges. Most signiﬁcantly, in a full system setting,
we typically cannot compile all relevant components with a
custom compiler to obtain code coverage. Additionally, we
need to be able to run the target—even in the presence of
memory corruptions and crashes. Lastly, we need to be able
to interact with a diverse set of interfaces.
To handle crashes and to perform introspection efﬁciently,
we run the target component (i.e., the hypervisor we want
to test) in our own hypervisor. Consequently, a large num-
ber of components are running at the same time: The host
OS, running the host hypervisor, in which we run the target
OS with the target hypervisor, in which the agent OS is run-
ning. Overall, this setup consist of three different operating
systems and two different hypervisors. This introduces addi-
tional problems, mainly related to complexity: each of these
components has a signiﬁcant amount of state and seemingly
non-deterministic behaviors such as timing interrupts.
To tackle all these challenges, we propose a new design
that builds upon features of two existing fuzzing projects. By
using Intel-PT (Processor Trace), we obtain code coverage
information on the code running in our host hypervisor sim-
ilar to KAFL [49]. Furthermore, we use a modiﬁed version
of HYPER-CUBE’s custom OS [48] to run inside the target
hypervisor. Based on this basic setup, we built our coverage-
guided hypervisor called NYX that relies on two main features.
First, to handle the inherent statefulness and non-determinism
of this complex stack, we develop an extremely fast snap-
shot restoration mechanism that allows us to reload a whole
VM image in the host hypervisor many thousands of times
per second. Second, to effectively generate inputs for diverse
sets of interfaces, we design a new mutation engine that uses
user-provided speciﬁcations. The mutation engine generates
and mutates inputs that are effectively expressing highly opti-
mized “test playbooks” of multiple interactions. These inputs
are custom bytecode programs, encoded as directed acyclic
graphs (DAG). The user can provide a speciﬁcation to the
fuzzer that describes the semantics of the bytecode and, im-
plicitly, the shape of the graphs produced. Additionally, we
use the idea of afﬁne types, a class of typesystems that ensure
each value is used at most once. This allows the speciﬁca-
tions to properly handle cases where resources are freed or
closed during testing. Using this highly ﬂexible approach,
we demonstrate adapting the fuzzer to multiple targets. We
ﬁrst implement a generic fuzzing speciﬁcation for emulated
devices, similar to state-of-the-art fuzzers. To demonstrate the
strength and ﬂexibility of our approach, we also build more
precise speciﬁcations for some of the more complex devices,
and even demonstrate that targeting modern paravirtualized
VirtIO devices becomes possible.
Our evaluation shows that this approach consistently out-
performs both coverage-guided and blind state-of-the-art hy-
pervisor fuzzers. During the evaluation, we found 44 new
bugs in current versions of hypervisors that were previously
tested by state-of-the-art fuzzers. At the time of writing, 22
CVEs have been requested from which 5 vulnerabilities have
already been ﬁxed by the maintainers.
In summary, we make the following three key contributions:
• We present the design and implementation of NYX, a
coverage-guided, full-system hypervisor fuzzing tool
that found 44 new software faults in current hypervisors.
• We show how a highly optimized, full VM reload mech-
anism can be used to signiﬁcantly accelerate fuzzing by
reloading a whole VM image many thousands of times
per second.
• We introduce the concept of an afﬁne typed, structured
mutation engine and demonstrate the beneﬁts and ﬂexi-
bility of such mutations.
To foster research on fuzzing, we release NYX under an
open source license at https://github.com/RUB-SysSec/
nyx.
2 Technical Background
We now discuss some of the technical properties of hypervi-
sors that make fuzzing hypervisors challenging, and introduce
the techniques needed for efﬁcient hypervisor fuzzing.
x86 Hypervisors
2.1
Hypervisors (sometimes called Virtual Machine Monitors)
manage sharing hardware resource to Virtual Machines
(VMs), also termed guest, within a host operating system
running on a physical machine. In modern systems, this is
usually implemented with the help of speciﬁc CPU features
such as specialized instructions and access protection schemes
that separate the memory and CPU states used by different
VMs. Similar protection schemes can be used to prevent VMs
directly accessing the hardware. Instead, generally speaking,
emulated hardware is provided by the hypervisor. In some
cases, real hardware that cannot be emulated easily can be
“passed-through” (e.g., graphics cards).
2598    30th USENIX Security Symposium
USENIX Association
2.2 Trap-VM-Exit and Paravirtualization
Any privileged operation (such as interaction with emulated
hardware) that happens inside of the VM is trapped and con-
trol is transferred back to the hypervisor (via a VM-Exit tran-
sition). The hypervisor can emulate the privileged operation
and return to the VM. This allows the hypervisor to emulate
non-existing devices and to apply additional security checks.
Generally speaking, the VM accesses emulated devices either
via Memory-Mapped I/O (MMIO) or by using Port I/O (PIO).
Hypervisor can set a trap condition for entire MMIO region.
Upon access request to the MMIO region, the VM exits to the
hypervisor. For port I/O operation, hypervisor uses a different
strategy. Generally, to access port I/O devices, the VM has to
use an in or out instruction. These instructions allow inter-
action with the port I/O address space and port I/O devices.
Hypervisors typically conﬁgure the CPU to trap on in/out
instructions. Either way, the hypervisor captures the VM-Exit,
inspects the exit reason, and calls the corresponding device
emulator. Device emulators are typically the largest (but not
the only) attack surface of hypervisors.
Since Trap-and-Exit emulation can be slow, many modern
hypervisors contain the ability to emulate hardware that does
not have physical pendants, but reduce communication over-
head. If the OS running inside the hypervisor is aware that it is
running in a virtualized environment, it can use these special
“paravirtualized” interfaces. In contrast to real devices that are
typically emulated, the protocols used to interact with paravir-
tualized devices typically use complex structures prepared in
the guests memory, containing instructions to execute whole
sequences of interactions. This way, most expensive context
switches can be avoided.
2.3 Challenges for Fuzzing Hypervisors
Hypervisors are a cornerstone of modern cloud infrastructures.
As such, their security is of utmost importance in practice. As
noted above, most previous research on fuzzing hypervisors
used blind fuzzing [7, 12, 13, 23, 24, 38, 47, 52, 53]. While it
is much easier to get a basic blind fuzzer to work compared
to a coverage-guided fuzzer, they often struggle to explore
complex devices, unless a lot of work is put into speciﬁc gen-
erators. The only exception is VDF [28], a project in which
individual device emulators from QEMU were extracted and
fuzzed with AFL [65] in ring-3. This helps with complex de-
vices, however the extraction process is very labor intensive
and cannot easily be performed for closed-source hypervisors.
Overall, hypervisors are challenging targets for fuzzing, as
they typically run with very high privileges, making it hard
to obtain code coverage information and to handle crashes.
Additionally, hypervisors are highly stateful, as they keep all
the state of each guest VM, themselves, and the emulated
hardware. Consequently, during fuzzing, it is difﬁcult to iso-
late the effect of one single test case (input). Previous test
cases can heavily affect the result of a new test case. To pre-
vent this, the fuzzer has to take great care to ensure that the
state of the hardware is not affected by previous test cases.
For example, if one test case disables some emulated hard-
ware, subsequent test cases will not be able to interact with
it. Lastly, hypervisors do not consume a single well-formed
input. Instead, they provide a wide variety of different interac-
tive interfaces. Some of these interfaces require the guest OS
to setup complex, highly advanced structures in its own mem-
ory. Most existing general-purpose fuzzers aim at targeting
programs that consume a single binary string. Now that we
have identiﬁed existing challenges in coverage-guided fuzzing
for hypervisors, we are going to discuss them individually.
2.3.1 Code Coverage and Handling Crashes
To handle highly-privileged code, fuzzers typically make use
of virtualization to create an isolated, externally controlled en-
vironment. For instance, there are various fuzzers that are built
upon KAFL [49], such as REDQUEEN [2] or GRIMOIRE [6].
These fuzzers use a modiﬁed hypervisor (KVM-PT) that al-
lows to trace the code that runs inside of the VM. Furthermore,
these fuzzers use QEMU-PT, an extension that, amongst other
things, allows to decode the traces and obtain coverage in-
formation by utilizing hardware-assisted trace features such
as Intel-PT (Processor Trace). Since the fuzzers have full
control of the VM and any code running inside it, they can
gracefully handle crashes of complex components such as
closed-source operating systems.
Nested Virtualization Since we aim to fuzz hypervisors
inside of KVM-PT, we need to enable nested virtualization.
Nested virtualization describes the ability of a hypervisor, in
this terminology known as Level-0 (L0), to run an unmodiﬁed
guest hypervisor (L1 guest) and all of its associated guests
(L2 guests) in a virtual machine. Unfortunately, current x86
virtualization extensions, such as Intel VMX or AMD SVM,
do not provide the nested virtualization capability in hardware.
They only allow one hypervisor to be executed on one logical
CPU core at the same time. Hence, the support for nested
virtualization has to be implemented in software.
In modern hypervisors such as KVM, nested virtualization
is implemented via emulation. Similar to emulated devices,
the hypervisor traps all VMX instructions and emulates them
at L0. That is, to handle a write access to a port I/O address
at L2, L0 has to handle the trap ﬁrst, pass on the PIO exit
reason to L1, and trap the VM re-entry at L1 and emulate it
to continue execution in L2. In theory, this adds a signiﬁcant