Case implementation was changed to allow the user to
control the rate at which cells may be inserted into the
data stream.
In our experience, trafﬁc policing at a rate greater than
10% of the line rate with 250-microsecond cell delay vari-
ation tolerance (CDVT) is unlikely to cause problems for
operation of the ATM encryptors. In practice, much lower
rates can be supported without error.
4 Suggested Changes to the ATM Forum
Speciﬁcation
In the course of developing and marketing a commercial
ATM encryptor, we have uncovered several subtle aspects
of the security services that can hinder performance and
customer satisfaction. In this section, we describe a few
of those areas and suggest changes to the Forum speciﬁ-
cation to address them.
4.1 Negotiating Key Exchange Parameters
Key exchange requires authentication of the CU’s, as
well as encryption of the session keys. In the CellCase
protocol, the RSA public-key algorithm is used to both
sign and encrypt key exchange messages. The latency of
these operations severely limits the rate at which secure
connections can be established.
To increase call setup rates, a shared secret key encryp-
tion key (KK) is established during the initial key ex-
change. The KK is used for encryption during subsequent
key exchanges between the same two CU’s. Authentica-
tion is implied by the ability to encrypt using the KK.
Each CU is able to keep a limited number of KK’s as-
sociated with other CU’s. The number of peer CU’s, how-
ever, is potentially unbounded. A KK from a previous ex-
change may be deleted in order to store a new KK from a
more recent exchange.1 The protocol must therefore deal
with the case in which one CU has a KK (and therefore
wants to use the fast key exchange protocol) and one does
not (and therefore requires the public-key-based protocol).
Another consideration for the use of symmetric-key al-
gorithms is that the CU closer to the call initiator (known
as the calling CU) may not know the identity of the CU
that will intercept the call for the call responder (known
as the called CU). First, a CU may accept calls on behalf
of many end users. Second, a different CU may handle
successive calls to the same end user, due to changes in
routing from one call to the next. Therefore, the called
party address cannot reliably predict the identity of the
CU on the responding end of the call. Since the KK is
associated with a CU, not with an end system, the calling
CU cannot determine which KK to use for a connection
until it learns the identity of the called CU.
In the CellCase system,
the called CU determines
whether the fast key exchange protocol can be used. If
it has a KK associated with the calling CU, it generates
a key exchange message using that KK. When the calling
CU receives the ﬁrst key exchange message, it learns the
identity of the called CU and whether that CU possesses
a KK for this exchange.If the calling CU also possesses
a KK, it continues the fast exchange protocol. If not, it
initiates a new full authentication message sequence. The
called CU then determines that the public-key protocol is
being used and responds accordingly. A new KK pair is
generated as a side-effect of executing the public-key pro-
tocol.
Consider the same scenario using the ATM Forum
three-pass protocol. (The two-pass protocol does not al-
low security parameters to be negotiated.) The calling
CU generates a list of encryption and authentication al-
gorithms that may be used for key exchange. In this case,
it lists a symmetric-key algorithm (e.g., Triple-DES) and
a public-key algorithm (RSA), even though it does not yet
know the identity of the called CU.
As before, the called CU looks in its cache to see if it has
a KK established with the calling CU. If it does have a KK,
it selects the symmetric-key algorithm and uses the KK to
encrypt the key exchange message. If it does not have a
KK, it uses the public-key algorithm. In either case, the
choice of algorithm is conveyed in the response message.
Upon receipt of the second message, the calling CU
knows the identity of the called CU. If the symmetric-
1In the CellCase system, KK’s are not persistent across system reset,
creating another situation in which one CU may not have a valid KK.
key algorithm was chosen, then the calling CU must use
the KK associated with the called CU. However, the CU
may not have a KK—as described earlier, it may have dis-
carded the KK to make room in its cache, or it may have
been reset since the last exchange. Because it does not
have a KK, the calling CU cannot complete the key ex-
change; it must be restarted, and this time only the public-
key algorithm should be listed as an alternative.
Currently, there does not appear to be a way for the call-
ing CU to restart the exchange without dropping and re-
establishing the connection. To save this overhead, the
Forum speciﬁcation could allow the ﬁrst message to be
repeated, effectively renegotiating the security parameters
for the exchange.
4.2 Key Update
The CellCase system implements the ATM Forum
mechanism for changing the encryption key of an active
connection, described in Section 2.3.2. One source of con-
fusion for customers is that the update is a unidirectional
process: only one directional ﬂow is affected, and there is
no feedback from the decrypting CU to indicate whether
the key update was successful.
One CU initiates a key update by generating a new en-
cryption key, installing it in the alternate hardware key
bank, encrypting the key with a shared master key, and
sending the encrypted key downstream in an SKE cell.
Since the ATM connection does not insure delivery of
cells, multiple copies of the SKE cell are sent. Still, there
is no guarantee that the SKE cell is actually received by
the peer CU downstream. Also, there is no information
communicated to the initiating CU about whether the SKE
was received.
When an SKE cell is received, the cell payload is de-
crypted (using the same master key) and the resulting ses-
sion key is loaded into the peer CU’s alternate key bank.
The initiating CU waits an appropriate amount of time af-
ter sending its last SKE cell—the Forum speciﬁes at least
one second—and then initiates a key changeover. An SKC
cell is inserted into the data stream before the encryp-
tion engine; the payload of the SKC cell causes the en-
cryption hardware to switch to the alternate key bank for
subsequent data cells. (For counter-mode connections, it
also resets the state vector to its initial value.) The SKC
cell then ﬂows downstream to the peer CU, which also
switches to the alternate key bank. As with the SKE,
several SKC cells are sent (each indicating the same key
bank) to reduce the probability of SKC cell loss.
The key update procedure described here only affects
one direction of data ﬂow, from the initiator to the down-
stream CU. To change the key in the other direction, a
separate key update must be initiated by the downstream
CU.
Start Update
Bad Ack Rec’d
[send SKE]
SKE Rec’d
[send ack]
Ack Rec’d
[send SKC]
IDLE
Abort Timer Expired
[abort]
SKE_
SENT
Bad Ack Rec’d
XmitTimer Expires
[send SKE]
Old SKE Rec’d
[ignore]
IDLE
Abort (Partial SKC)
[abort]
ACK_
SENT
Ack Rec’d
[send SKC]
Ack Rec’d
[send SKC]
(a) Sender
(b) Receiver
SKE Rec’d
Xmit Timer Expires
[send ack]
Abort Timer Expires
(no SKC)
[send rare ack]
Figure 4. Simpliﬁed state diagrams for the (a) sender and (b) receiver of a reliable key update.
Because there is no acknowledgement from the down-
stream CU, the initiating CU does not know whether the
new key value has been installed at the decryptor. There-
fore, the management interface on the initiating CU may
report that the key update was successful, even though
subsequent data passed on that connection will not be de-
crypted properly at the receiving end.
Feedback from customers indicates a need for a key up-
date protocol that is reliable in two ways: (1) there is a
high degree of conﬁdence that the key update will com-
plete, even in the presence of network errors, and (2) the
sender of a key update knows whether the new key has
been received at the downstream CU. Figure 4 shows sim-
pliﬁed state diagrams for the sender and receiver in such a
protocol. (Some error handling transitions are not shown.)
The sender initiates an update by sending an SKE cell,
containing the new key to be installed (encrypted with a
master key, as described above). It then waits to receive an
acknowledgement cell (ACK) from the downstream CU.
The ACK is a specially formatted SKE cell, containing
the key number associated with the most recently received
SKE cell. The sender periodically re-sends the SKE cell
until an ACK is received.
When an ACK is received by the sender, it completes
the update process by sending an SKC cell, which tells the
receiver to start using the new key. An SKC cell is trans-
mitted each time a valid ACK is received. If an improper
ACK is received, such as one that contains the wrong key
number, then the update process is restarted—a new key
is generated and installed by the receiver, and a new SKE
cell is sent downstream.
If no ACK is received within a user-speciﬁed timeout
period, then the update is aborted and the sender reports an
error. Upon failure, a new update is automatically sched-
uled after a user-deﬁned time interval.
At the receiver, a new SKE cell indicates the start of an
update transaction. The new key is retrieved and installed,
and an ACK cell is sent upstream. An ACK cell is sent
periodically, until an SKC cell arrives, indicating that the
new key should be used for decryption. If no SKC cell is
received within a user-speciﬁed timeout period, then an er-
ror is logged, but the receiver continues to send ACK’s at
a reduced time interval. In the case of a PVP connection,
an SKC cell must be received on all allocated channels; if
SKC’s are received on some channels, but not all, when
the timer expires, the receiver completes the update for all
channels and logs an error.
This bidirectional approach does not work for connec-
tions with no bandwidth allocated in the upstream direc-
tion. Such connections are atypical, however, except for
point-to-multipoint connections. Unidirectional connec-
tions can use the original unidirectional protocol, with the
reliable protocol provided for the more typical case of a
bidirectional point-to-point connection.
5 Conclusion
Encryption at the ATM layer is a relatively new tech-
nology, one that in many ways combines the speed and
simplicity of a bulk link encryptor with the ﬂexibility of
an application-layer encryptor. We have attempted in this
paper to pass on our experiences bringing this technology
to market. These experiences can be summarized with a
few observations:
(cid:15) ATM encryption works. There are hundreds of en-
cryptors in use today in production networks. The
encryptors are transparent to the rest of the network
equipment, requiring no modiﬁcations to hardware
or software in the private or public networks. Full
line rates are supported with very little added latency.
(cid:15) Interoperability with other ATM network equipment
is generally very good, but there are sometimes prob-
lems in the details, such as the OAM intercept prob-
lem (Section 3.1). In our experience, these are usu-
ally due to minor differences in interpretation of ex-
isting standards, exposed by the unique requirements
of the security features.
(cid:15) The security context for a virtual path connection
(VPC) should be treated as a single entity, rather than
as a collection of channel contexts. This simpliﬁes
the key generation and key update processes for the
path.
(cid:15) Requirements for the CU to insert cells can conﬂict
with trafﬁc policing. Strategies to avoid this include
shaping trafﬁc after the encryptor, having the encryp-
tor participate in the bandwidth contract, or reducing
the rate at which cells are inserted by the CU, and
allowing for the addition of security overhead when
shaping trafﬁc entering the CU.
(cid:15) Renegotiation of security parameters should be sup-
ported during key exchange. This allows faster en-
cryption and authentication algorithms to be used
as appropriate, which is critical for sustaining high
setup rates for secure connections.
(cid:15) A reliable key update mechanism should be pro-
vided, or at least a mechanism that provides feedback
as to whether the update is successful at both the en-
crypting and decrypting CU’s.
(cid:15) Counter mode allows high-throughput encryption,
but it is more sensitive to network conﬁguration and
behavior. Cell loss and cell ordering have a more pro-
found impact on counter mode than on other modes
that either do not require synchronization (ECB) or
are self-synchronizing (CBC). Also, the need to ex-
plicitly resynchronize adds the burden of inserting
and processing synchronization cells to the CU’s, and
it can aggravate problems with policing on connec-
tions that operate near their contracted bandwidth.
Our experiences demonstrate that high data rate encryp-
tion at the ATM cell layer is practical. This design can be
extended to even higher data rates through the use of ei-
ther higher speed encryption devices or multiple encryp-
tion pipelines. These changes will have little impact on
the overall architecture and on cell delay or delay varia-
tion characteristics of the current implementation.
This design offers a glimpse of the challenges that
confront the designer of high performance packet en-
cryption devices. Packet encryptors also have to handle
rapid changes of security contexts from packet to packet.
The data movement requirements are more demanding in
packet encryption than in cell encryption, since packet
payloads can be much larger (and smaller) than ATM cell
payloads and are of unpredictable length. Therefore, the
scheduling of memory and encryption resources will be
much more complicated in a packet encryptor.
Since the ATM encryptor is a ﬂow-through device, it
can have a minimal impact on trafﬁc distribution patterns.
Speciﬁcally, it is possible for trafﬁc streams with varying
quality of service needs to be directed through an ATM
encryptor without the QoS requirements being violated.
We predict that the conﬂicting implications of the store-
and-forward nature of packet handling and the emerging
requirements for quality of service guarantees in packet
networks will pose the greatest challenges to the designers
of high performance packet encryptors.
References
[1] ANSI X9.17 (Revised). American National Standard
for Financial Institution Key Management (Wholesale).
American Bankers Association, 1985.
[2] ATM Forum.
ATM security speciﬁcation, version
ATM Forum Standard AF-SEC-0100.000, Feb.
ftp:://ftp.atmforum.com/pub/approved-specs/af-
1.0.
1999.
sec-0100.000.pdf.
[3] H. Eberle and C. P. Thacker. A 1-Gbit/second GaAs DES
chip. In Proceedings of the IEEE 1992 Custom Integrated
Circuits Conference, May 1992.
[4] R. H¨andel, M. N. Huber, and S. Schr¨oder. ATM Networks:
Concepts, Protocols, Applications. Addison-Wesley, 3rd
edition, 1998.
[5] A. J. Menezes, P. C. van Oorshot, and S. A. Vanstone.
Handbook of Applied Cryptography. CRC Press, 1997.
[6] National Bureau of Standards. Data encryption standard.
FIPS PUB 46-1, US Department of Commerce, Jan. 1988.
[7] National Bureau of Standards. Digital signature standard.
FIPS PUB 186, US Department of Commerce, May 1994.
[8] T. Okamoto. A fast signature scheme based on congruen-
tial polynomial operations. IEEE Transactions on Infor-
mation Theory, 36(1):47–53, Jan. 1990.
[9] R. Rivest, A. Shamir, and L. M. Adleman. A method for
obtaining digital signatures and public-key cryptosystems.
Commun. ACM, 21(2):120–126, Feb. 1978.
[10] B. Schneier. Applied Cryptography: Protocols, Algo-
rithms, and Source Code in C. John Wiley and Sons, Inc.,
2nd edition, 1996.
[11] A. Shimizu and S. Miyaguchi. Fast Data Encipherment
Algorithm FEAL. In EUROCRYPT ’87, pages 267–278.
Springer-Verlag, 1988.
[12] D. Stevenson, N. Hillery, G. Byrd, F. Gong, and
D. Winkelstein. Design of a key agile cryptographic sys-
tem for OC-12c rate ATM. In Symposium on Network and
Distributed System Security, Feb. 1995.