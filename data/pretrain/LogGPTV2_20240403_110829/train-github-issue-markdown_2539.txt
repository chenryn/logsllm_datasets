 **Keith Donald** opened **SPR-7539** and commented
The following lifecycle is extremely common in web apps:
  1. bind request input to a backing bean
  2. validate the bean
  3. if there are bind/validation errors, re-render the form so the user can retry their submission
Steps 1 and 2 are currently handled by the `@MVC` framework, via JavaBean
`@Controller` method arguments annotated with the `@Valid` annotation.
However, the 3rd step must always be performed manually by the developer. This
leads to duplication across `@Controllers`.
An example of this:
    @RequestMapping(value="/apps", method=RequestMethod.POST)
    public String createApp(Account account, @Valid AppForm form, BindingResult bindingResult) {
       // duplicated
       if (bindingResult.hasErrors()) {
           return "apps/new";
       }
       return "redirect:/develop/apps/" + appRepository.createApp(account.getId(), form);
    }
    @RequestMapping(value="/apps/edit/{slug}", method=RequestMethod.POST)
    public String updateApp(Account account, @PathVariable String slug, @Valid AppForm form, BindingResult bindingResult) {
        // duplicated
        if (bindingResult.hasErrors()) {
            return "apps/edit";
        }
        return "redirect:/develop/apps/" + appRepository.updateApp(account.getId(), slug, form);
    }
The duplicated code takes more than half of the method body. Imagine an app
with hundreds of form controllers--the duplication adds up.
Something like the following would be ideal:
    @RequestMapping(value="/apps", method=RequestMethod.POST)
    public String createApp(Account account, @Valid AppForm form, BindingResult bindingResult) {
       return "redirect:/develop/apps/" + appRepository.createApp(account.getId(), form);
    }
    @RequestMapping(value="/apps/edit/{slug}", method=RequestMethod.POST)
    public String updateApp(Account account, @PathVariable String slug, @Valid AppForm form, BindingResult bindingResult) {
        return "redirect:/develop/apps/" + appRepository.updateApp(account.getId(), slug, form);
    }
But the question is how can we get to something that is as simple as the
above? In some cases, we can rely on RequestToViewNameTranslation. In other
cases, additional metadata will be needed to tell Spring MVC which view to
render on bind/validation errors.
* * *
**Affects:** 3.0.4
**Issue Links:**
  * #11788 HandlerExceptionResolver for `@Valid`
1 votes, 3 watchers