later 
Real user ID can be set to real user ID, saved set-user-ID or 
effective user ID. Effective user ID can be set to real user 
ID, effective user ID, or saved set-user-ID. Saved 
set-user-ID is set to the effective user ID if the real user ID 
is specified and the real user ID is actually changed or the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
493 
Table 9-4. Setreuid() Behavior 
Privileged OS 
Notes 
effective user ID doesn't equal the saved user ID. 
No 
OpenBSD 
before 3.3 
Effectively unsupported. Behavior is provided through 
compatibility lib with rather complex, nonconfirming 
behavior. 
If you're the superuser, you can set the user ID and effective user ID to any value you 
like. If you aren't the superuser, allowed behaviors vary among OSs, but you can 
typically change the real user ID to the effective user ID. You can change the effective 
user ID to the real user ID, the effective user ID, or the saved set-user-ID. 
After it modifies the real user ID and the effective user ID, the setreuid() function 
attempts to determine whether it should update the saved set-user-ID to reflect the 
value of the new effective user ID. It varies a bit among OSs, but generally, if the real 
user ID is changed or the effective user ID is changed to something other than the 
real user ID, the saved set-user-ID is set to be equal to the effective user ID. 
This API is quite cumbersome and there are issues with it having variances across 
multiple platforms, which you can definitely see in Table 9-4. Linux, NetBSD, and 
Solaris implement similar algorithms, but FreeBSD lets a nonsuperuser process 
change the real user ID to the saved set-user-ID as opposed to the effective user ID, 
which is slightly different. Versions of OpenBSD before 3.3 effectively didn't support 
this function; it was provded through a compatibility mode that was incompatible with 
other UNIX implementations. Versions after 3.3 implement it, but it has slightly 
different semantics than the other UNIX implementations. 
setreuid() isn't pretty, but it's important for one notable situation. If a program is 
managing two user IDs as its real user ID and saved set-user-ID, but neither is the 
superuser, it can prove difficult for that program to fully drop one set of privileges. 
Linux, FreeBSD, HPUX, and more recent OpenBSD builds can make use of the 
setresuid() function, which has a clean and simple interface. Solaris and certain 
versions of the BSDs, however, don't have access to this function. For a more 
cross-platform solution, developers can use the setreuid(getuid(),getuid()) idiom, 
which should work on all modern UNIX implementations, with the notable exception 
of older versions of OpenBSD. Before OpenBSD imported the setresuid() function 
and rewrote the setreuid() function, the only straightforward way for a nonprivileged 
program to clear the saved set-user-ID was to call the setuid() function when the 
effective user ID is set to the real user ID. This can be accomplished by calling 
setuid(getuid()) twice in a row. 
Group ID Functions 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
494 
The setgid(), setegid(), setregid(), setresgid(), setgroups(), and initgroups() 
functions are used to manipulate the group IDs associated with a process. Like the 
user ID functions, these functions have slightly different semantics on the different 
UNIX OSs. The following sections introduce the group ID functions. 
Warning 
The group ID functions, like the user ID functions, have different behaviors if the 
process is running as the superuser, which means an effective user ID of 0. An 
effective group ID of 0, however, doesn't give a process any special kernel-level 
privileges. 
The setegid() Function 
The setegid() function is used to change the effective group ID associated with the 
current process. It's prototype is 
int setegid(gid_t egid); 
It behaves like its user ID counterpart, the seteuid() function, in that it's used to 
toggle the effective group ID between the saved set-group-ID and the real group ID. 
Similar to seteuid(), if the process is running with superuser privileges, it can set the 
effective group ID to any arbitrary value. 
The setgid() Function 
The setgid() function changes group IDs associated with a process, and is equally 
nuanced as its counterpart setuid(). It works like this: 
int setgid(gid_t gid); 
setgid() takes a single parameter, gid, which it uses to set the effective group ID, 
and possibly also the saved set-group-ID and real group ID. If it's run from a process 
running with superuser privileges, it sets the effective group ID, the saved 
set-group-ID, and the real group ID to the same value. When the process isn't 
running as the superuser, setgid() has varying behavior that closely tracks the 
different behaviors discussed for setuid(). 
The setresgid() Function 
The setresgid() function is used to change the real group ID, effective group ID, and 
saved set-group-ID of a process. It has the following prototype: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
495 
int setresgid(gid_t rgid, gid_t egid, gid_t sgid); 
setresgid() behaves in much the same way that setresuid() does, except that it 
manipulates group IDs for a process rather than user IDs. The caller can provide -1 
for any of the arguments, and the kernel fills in the current value. Superusers can set 
any of the group IDs to any value they want. A nonsuperuser process can set any of 
the IDs to the value of any of the three current IDs. This function has clear semantics 
and is implemented the same across UNIX variants that provide it. 
The setregid() Function 
The setregid() function can be used to modify the real group ID and effective group 
ID associated with a process. It works as shown: 
int setregid(gid_t rgid, gid_t egid); 
setregid() lets you specify the values you want for your real group ID and effective 
group ID through the use of the rgid and egid parameters respectively. If you provide 
an argument of -1 for rgid or egid, it fills in the current value from the process. This 
function behaves like its counterpart, setreuid(). 
The setgroups() Function 
A process can set its supplementary groups using the setgroups() function, as shown: 
int setgroups(int ngroups, const gid_t *gidset); 
The setgroups() function takes two parameters; the ngroups parameter indicates how 
many supplemental groups the process will have and the gidset paramaeter points to 
an array of group IDs that has ngroup members. This function can be called only by a 
process with an effective user ID of 0. 
The initgroups() Function 
As an alternative to setgroups(), processes can set their supplementary groups using 
initgroups(), which has the following prototype: 
int initgroups(const char *name, gid_t basegid); 
initgroups() is a convenient alternative to setgroups() because it saves the calling 
application from having to find out the groups that a particular user is a member of in 
order to correctly establish the process's supplementary group list. The name 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
496 
parameter indicates a user account whose group memberships are to be enumerated 
and set as the calling process's supplementary group list. The basegid GID is also 
added to the supplementary group list, and is typically the primary GID of the user 
specified by the name parameter. Like setgroups(), it can be performed only by a 
process with an effective user ID of 0. 
7.5.4 Privilege Vulnerabilities 
Now that you are familiar with the basic privilege management API, you can explore 
the types of mistakes developers are likely to make when attempting to perform 
privilege management. 
Reckless Use of Privileges 
The most straightforward type of privilege vulnerability happens when a program 
running with elevated privileges performs a potentially dangerous action on behalf of 
an unprivileged user without first imposing any limitations on itself with privilege 
management functions. Although it is possible for programs to safely access 
resources without needing to temporarily or permanently drop privileges, it is very 
easy to make mistakes when doing so. 
Here is a simple real-world example of a setuid root program named XF86_SVGA that 
used to ship with the XFree86 windowing package. Nicolas Dubee, a notorious and 
gifted researcher, discovered this vulnerability in 1997. Listing 9-1 is an excerpt from 
his advisory (available at 
http://packetstormsecurity.org/advisories/plaguez/plaguez.advisory.010.xfree86). 
Listing 9-1. Privilege Misuse in XFree86 SVGA Server 
[plaguez@plaguez plaguez]$ ls -al /etc/shadow 
-rw----   1 root     bin 1039 Aug 21 20:12 /etc/shadow 
 [plaguez@plaguez bin]$ ID 
uid=502(plaguez) gid=500(users) groups=500(users) 
[plaguez@plaguez plaguez]$ cd /usr/X11R6/bin 
[plaguez@plaguez bin]$ ./XF86_SVGA -config /etc/shadow 
Unrecognized option: root:qEXaUxSeQ45ls:10171:-1:-1:-1:-1:-1:-1 
use: X [:] [option] 
-a #                   mouse acceleration (pixels) 
-ac                    disable access control restrictions 
-audit int            set audit trail level 
-auth file            select authorization file 
bc                     enable bug compatibility 
-bs                    disable any backing store support 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
497 
-c                     turns off key-click 
The XF86_SVGA server, which was a setuid root program, happily read the 
configuration file /etc/shadow, and then proceeded to complain about the 
unrecognized option of root's password hash! The problem is that the X server would 
read in any configuration file the user requested as root, without regard for the actual 
user's permissions. Its configuration file parser happened to display a verbose error 
message, which printed the first line of the suspect configuration file. 
Considering the effects of any elevated group privileges is important, too. Many 
programs are installed as setgid so that they run as a member of a particular group. 
If the program performs a privileged action without relinquishing group privileges, it 
can still be vulnerable to a privilege escalation attack by allowing the user to access 
resources designated to the group in question. 
For example, the /sbin/dump program in NetBSD was installed as setgid tty so that it 
could notify system administrators if backup media needed to be changed. The dump 
program never dropped this group privilege, and local users could have the dump 
program start a program of their choice by setting the libc environment variable 
RCMD_CMD. This program would then run with an effective group ID of tty. Attackers 
could seize group tty privileges, which could allow them to interact with other user's 
terminals. 
Dropping Privileges Permanently 
Occasionally, application developers will make mistakes when writing the code for a 
program that permanently relinquishes its privileges. The following sample code 
represents part of a setuid root program: 
    /* set up special socket */ 
    setup_socket(); 
    /* drop root privs */ 
    setuid(getuid()); 
    /* main processing loop */ 
    start_procloop(); 
This code is similar in spirit to what you find in several common network programs. 
The program needs to be root to obtain a socket bound to a port below 1024 or to 
obtain a special socket for sniffing. The author wants the program to be safe and 
follow a least-privilege design, so after obtaining this socket, the program drops its 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
498 
root privileges by performing a setuid(getuid()), which sets the saved set-user-ID, 
the real user ID, and the effective user ID to the value of the real user ID. 
setuid(getuid()) is a common idiom for permanently relinquishing privileges, and it 
usually works without too many complications. However, in some situations, it's not 
enough, as explained in the following sections. 
Dropping Group Privileges 
Some programs are installed as both setuid and setgid, meaning they run with an 
elevated user ID and elevated group ID. The code in the previous section would be 
fine if the program is only setuid root, but if the program is setuid root and setgid 
wheel, the elevated group privileges aren't relinquished correctly. In the processing 
loop, the effective group ID of the process is still set to the privileged wheel group, so 
if attackers found a way to exploit the program in the main processing loop, they 
could gain access to resources available to that privileged group. The correct way to 
address this problem is to relinquish group privileges like this: 
    /* set up special socket */ 
    setup_socket(); 
    /* drop root privs - correct order */ 
    setgid(getgid()); 
    setuid(getuid()); 
    /* main processing loop */ 
    start_procloop(); 
This code drops the group permissions and then the user permissions. It seems fairly 
straightforward, but it can actually be done incorrectly, as shown in the following 
example: 
    /* set up special socket */ 
    setup_socket(); 
    /* drop root privs  incorrect order */ 
    setuid(getuid()); 
    setgid(getgid()); 
    /* main processing loop */ 
    start_procloop(); 
This code doesn't fully work because the function calls are ordered incorrectly. The 
setuid(getuid()) function relinquishes root privileges. Remember that having an 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
499 
effective group ID of 0 doesn't mean you are a superuser, as superuser status is 
based solely on your effective user ID. The setgid(getgid()) call is performed with 
privileges of the nonprivileged user, so the result of the setgid(getgid()) call 
depends on the OS. In Linux, Solaris, and OpenBSD, only the effective group ID is 
modified, and the saved set-group-ID still contains the group ID of the privileged 
group. If attackers find a flaw in the program they could leverage to run arbitrary 
code, they could perform a setegid(0) or setregid(-1, 0) and recover the elevated 
group privileges. 
Dropping Supplemental Group Privileges 
Programs running as daemons can run into security issues related to dropping 
privileges that are a little different from setuid programs. This is because they are 
typically started as a privileged user and then assume the role of an unprivileged user 
based on user input. In this situation, you have to be cognizant of supplemental group 
IDs because if they aren't updated when privileges are dropped, they could leave the 
process with access to privileged resources. 
Certain implementations of the rsync application contained a vulnerability of this 
nature, which is detailed at http://cve.mitre.org/cgi-bin/cvename.cgi?name=. If 
rsync runs as a daemon, it starts off with the user ID and groups of the user running 
the daemon (typically root). If the rsync daemon needs to operate as an unprivileged 
user, it runs the following code: 
    if (am_root) { 
        if (setgid(gid)) { 
            rsyserr(FERROR, errno, "setgid %d failed", 
                (int) gid); 
            io_printf(fd,"@ERROR: setgid failed\n"); 
            return -1; 
        } 
        if (setuid(uid)) { 
            rsyserr(FERROR, errno, "setuid %d failed", 
                (int) uid); 
            io_printf(fd,"@ERROR: setuid failed\n"); 
            return -1; 
        } 
        am_root = (getuid() == 0); 
    } 
This code releases the effective group ID before the effective user ID, so it should 
drop those privileges in the correct order. However, this code doesn't drop the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
500 
supplementary group privileges! The developers solved this problem by inserting the 
following code: 
#ifdef HAVE_SETGROUPS 
        /* Get rid of any supplementary groups this process 
         * might have inherited. */ 
        if (setgroups(0, NULL)) { 
            rsyserr(FERROR, errno, "setgroups failed"); 
            io_printf(fd, "@ERROR: setgroups failed\n"); 
            return -1; 
        } 
#endif 
... 
        if (setgid(gid)) { 
Note that setgroups() works only if you are the superuser and have an effective user 
ID of 0. This is another reason it's important to relinquish privileges in the correct 
order. 
Dropping Nonsuperuser Elevated Privileges 
As discussed earlier, the behavior of the setuid() and setgid() functions are different 
if the program isn't running as the superuser. setuid(getuid()) is a reasonable idiom 
for a program running as root that wants to drop privileges permanently, but if the 
effective user ID isn't 0, the same tactic yields system-dependant, and sometimes 
inadequate results. 
Say that the simple network program was changed so that instead of being setuid 
root and setgid wheel, it's setuid to another nonprivileged user, such as daemon. This 
might happen if you installed a kernel-hardening patch that let programs with a 
particular user ID or group ID allocate special sockets to avoid the root privilege 
requirement. The code would look the same: 
    /* set up special socket */ 
    setup_socket(); 
    /* drop root privs */ 
    setgid(getgid()); 
    setuid(getuid()); 
    /* main processing loop */ 
    start_procloop(); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
501 
However, the semantics of this code would be quite different when not running with 
an effective user ID of 0. Both setgid() and setuid() would be called as nonprivileged 
users, and they would change only the effective IDs, not the saved IDs. (In FreeBSD 
and NetBSD, this code would change all three IDs, so it wouldn't be vulnerable.) 
Attackers who exploited a problem in the program could therefore regain any 
relinquished privileges. The solution for nonsetuid root applications that need to fully 
drop their privileges is to use the setresgid() and setresuid() functions or the 
setregid() and setreuid() functions if necessary. OpenBSD versions before 2.3 
require two calls to setuid(). 
A noted researcher named Michael Zalewski found a bug in Sendmail 8.12.0 
(documented at www.sendmail.org/releases/8.12.1.html) that's a good real-world 
example of this situation. Sendmail used to install a set-user-ID root binary, but in 
version 8.12.0, it moved to a new configuration, with a set-group-ID smssp binary. 
Here's the code that is intended to drop the elevated group privileges: 
int 
drop_privileges(to_real_uid) 
    bool to_real_uid; 
{ 
    int rval = EX_OK; 
    GIDSET_T emptygidset[1]; 
... 
    if (to_real_uid) 
    { 
        RunAsUserName = RealUserName; 
        RunAsUid = RealUid; 
        RunAsGid = RealGid; 
    } 
    /* make sure no one can grab open descriptors 
        for secret files */ 
    endpwent(); 