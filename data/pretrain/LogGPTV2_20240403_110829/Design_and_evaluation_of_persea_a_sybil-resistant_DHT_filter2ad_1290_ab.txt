online social networks (OSNs).
4. Moderate overhead. System overheads, such as routing ta-
ble size, the number of overlay hops to perform a lookup, and the
number of redundant lookups, should be kept to reasonable levels.
Regarding Design Goal #3, we ﬁnd that most existing Sybil de-
fenses require a social network without specifying where the net-
work information comes from. One possible source would be from
user input, but it is unclear how to motivate users to provide more
than a minimal amount of information. Note that the fast-mixing
property needed by many systems is particularly hard to obtain
from a limited subset of edges. Another possible source would
be to get the data from an OSN, but this has many issues. First, a
few users may not even have accounts on the selected OSN, while
others may not want to share their OSN network with the P2P sys-
tem for privacy reasons. Also, relationships between users in the
P2P system may be vastly different than those in the OSN, as even
a popular P2P system would likely have only a fraction of all OSN
members. Finally, an OSN like Facebook may attempt to block the
P2P system from mining its network information, which is gen-
erally protected due to its value for advertising. This is especially
true for mining enough information to formulate interaction graphs
that only include edges between active communication partners and
are thus more reliable than friendship graphs for use in Sybil de-
fense [3, 4, 10, 32].
Yes
Yes
No
No
Yes
No
No
Yes
Yes
Yes
Yes
O(1)(cid:63)
O(1)
√
Ω(
Not tested
∼ 0.53 × n† O ( log (n))
Unknown
O(log(n)) ∼ 0.44 × n† O ( log (n))
O ( log (n))
O(log(n))
n) O(log(n))
3.2 System Model
The key assumptions about our system involve how we model
users and social links. Participating in Persea requires an invitation
from an existing user, and new users can request invitations from an
existing user if they have her out-of-band contact information, such
as an email address. The P2P client UI can integrate a request in the
system with a code sent to the email address for veriﬁcation. We
assume that honest users generally accept invitation requests from
people they know in real life. Thus, the links created from the set of
accepted invitations form a subgraph of the social network known
as a bootstrap graph. The structure of this network may vary and it
is beyond the scope of this paper to identify requirements for either
the bootstrap graph or the underlying social network. We instead
evaluate our system with a variety of social networks with differ-
ent properties to show that Persea is effective for a broad range of
networks.
The bootstrap graph starts with a small set of bootstrap nodes.
We make the following assumptions about the early stages of build-
ing the system: (1) bootstrap nodes are honest and (2) bootstrap
nodes trust each other. The creation of a bootstrap graph starting
from a trusted set of nodes allows us to obviate the use of OSN data
and thus achieve Design Goal #3. The assumptions are reasonable,
since the bootstrap nodes together take the initiative to start build-
ing the system. As the system passes the initial stage of growth
and reaches a modest population size, we can gradually relax these
requirements. In particular, the bootstrap nodes no longer need to
be honest or trust each other for the system to work well.
As with the prior works on leveraging social networks for Sybil-
resistent DHTs [12, 19] (see §2), Persea uses public keys to certify
IDs. Also like X-Vine [19], we suggest to ensure the integrity of
content or services by using self-certifying identiﬁers on returned
lookup results [2, 18].
3.3 Attacker Model
We assume that the attacker is a single entity, or a small and
highly coordinated group, with access to substantial computational
and network resources. For example, the attacker can control a
botnet. The attacker’s goal is to disrupt the operations of the P2P
network, and the lookup operation in particular, as lookups are the
mechanism for distribution of information and resources in a DHT.
To do this, the attacker seeks to add malicious nodes to the system
and then have them disrupt the system’s activities.
Adding malicious nodes. The attacker can ﬁrst attempt to ﬁnd
users of the P2P system and socially engineer them into giving up
an invitation. Such an invitation is called an attack edge in the
social network. We note that targeting speciﬁc users may be de-
sirable when attacking Persea, but this is difﬁcult without external
information about exactly who the key users are and how to contact
774. SYSTEM DESIGN
We now describe the Persea design. Persea consists of two lay-
ers: a social network layer (the bootstrap graph) and a DHT layer.
In this paper, an edge refers to a link between two nodes in the DHT
layer. The social network and DHT are simultaneously built start-
ing with a set of bootstrap nodes. The bootstrap nodes assign IDs
to themselves such that they are evenly spaced over the circular ID
space. Thus, the ID space of the DHT is divided into one region for
each bootstrap node.
A new peer must join the Persea system through an invitation
from an existing node in the network. In general, it is expected
that a node that is invited is socially known to the inviting peer.
Thus, inviting a new node is a feature of the social network layer
of Persea. More speciﬁcally, when a node is invited, it becomes a
child of the inviting peer in the bootstrap graph. The inviting peer
also gives it an ID and a chunk of IDs that it can use to invite more
nodes to join the network.
The number of nodes that a peer can invite is limited by the num-
ber of IDs in its chunk. Thus, there is an incentive for peers to only
invite other peers based on actual social connections so that it does
not run out of IDs.
The DHT layer of Persea is based largely on Kademlia [17], a
DHT that is widely adopted for the BitTorrent P2P ﬁle-sharing sys-
tem. In particular, we use Kademlia’s XOR distance metric to per-
form routing and k-buckets to store contacts. The main difference
in Persea is that IDs are replicated evenly around the ID space for
greater resiliency given our ID distribution scheme.
4.1 Hierarchical ID Space
We now describe how IDs are distributed in Persea. Each boot-
strap node has a contiguous range of IDs called a chunk, which in-
cludes the bootstrap node’s ID. A bootstrap node divides its chunk
of IDs into sub-chunks based on the chunk-factor, a system param-
eter.
When a bootstrap node invites a peer to join the system, it assigns
the new node an ID from one of its sub-chunks and gives it control
over the rest of the sub-chunk. The newly joined node becomes the
authority for distributing IDs from the given sub-chunk and uses
this to invite more nodes to join the system. Based on the invitation-
relationship among peers, a bootstrap tree is formed, in which an
inviter node is the parent of its invited peers. If we have more than
one bootstrap node, then we would have a forest of trees, where
each bootstrap node is the root of a tree. The chunk-factor and size
of the ID space deﬁne the maximum possible height and width of
the trees.
This hierarchical ID distribution mechanism features the advan-
tage that even if the attacker compromises a node in the system,
and through it a large number of malicious nodes join the network,
they will still be conﬁned to a particular region of the ID space.
We brieﬂy explain the mechanism with an example illustrated in
Fig. 1. Let A and B be two bootstrap nodes that initiate the system.
If we consider a b-bit ID space, then the total number of IDs in the
DHT nmax would be 2b. In this toy example, we consider a 10-bit
ID space, so nmax = 210. If Z is the number of bootstrap nodes,
Z (cid:99) IDs in its chunk. To simplify
each bootstrap nodes has (cid:98) nmax
the discussion, we ignore issues of uneven division of IDs. In this
example, both node A and node B have 512 IDs. The lowest ID in
a chunk is assigned to the bootstrap node itself and the remaining
IDs are for further distribution to new nodes. In this example, node
A’s ID is 0 and the interval [1, 511] is its chunk of IDs for further
distribution.
Figure 1: Hierarchical Distribution of Node IDs
them. This information is not meant to be publicly available. In-
stead, the attacker gathers invitations from anyone using the system
who he can identify and trick. We model this as getting invitations
via uniform selection from the set of honest users. We have not
evaluated Persea for the case that targeted attacks are feasible.
In our evaluations, we limit the number of attack edges that an
attacker can get via social engineering to a ratio of at most one per
honest node on average. We note that prior schemes face very high
overheads at such ratios, which are realistic given studies show-
ing that OSN users accept fake and duplicate accounts at a rate of
40 − 80% [3, 4]. Unlike most OSNs, we attempt to limit attack
edges via three methods: (i) Invitation requests should require that
a code be sent through an out-of-band channel; (ii) When using
such a code to issue an invitation, the client UI can warn users to
not invite strangers; and (iii) Each user has a limited number of
invitations (the amount used would be shown to users) due to our
system design (see §4). Thus, there is an incentive for users to
not be overly promiscuous with invitations and to only invite peers
based on actual social connections.
Once an invitation is accepted, the attacker may proceed to invite
an arbitrary number of malicious peers. This is unlike X-Vine and
detection approaches like SybilLimit that use rate limits to effec-
tively keep the attacker to a small number of Sybil nodes per attack
edge [19,36]. In such approaches, an attacker can use a large num-
ber of attack edges (e.g. one per honest node) to overcome the rate
limits and overwhelm the system.
The attacker does not invite honest nodes, as this provides him
with no advantage in our system. An attacker node could leave the
system and join again under a different identity, but doing so pro-
vides no advantages, as we do not employ detection or reputation
mechanisms. Further, the attacker might lose an attack edge, and
so we do not model attacker churn in our evaluation.
Attacking lookups. An attacker with a large number of malicious
peers then proceeds to attack the system. Rather than simply drop-
ping lookup requests, the attacker nodes respond with the closest
other attacker nodes to the requested keys. This gives the attacker
nodes the best chance to appear later in the lookup path and thus
manipulate the ﬁnal lookup results. If, at the end of the lookup, an
attacker node is ﬁnally asked for the requested information, it will
then drop the request.
We also assume that the attacker attempts to manipulate DHT
routing tables. The routing tables in our system, which is based on
Kad, are opportunistically modiﬁed based on intermediate query
results, so the attacker’s strategy of returning other attacker nodes
beneﬁts him in this way as well. We assume that the attacker does
not make any lookups.
A (ID : 0)B (ID : 512)a2 (ID : 58)a1 (ID : 1)b1 (ID : 513)a21(ID : 59)b11(ID : 514)0511512102315758114......45751151356957062696910235971514526A's chunkB's chunka1's chunka2's chunkYet not assignedYet not assignedYet not assigneda21's chunkb11's chunkb1's chunk78Input: Sc: An integer, denoting the number of sub-chunks
Output: B[ ]: The integer array of size Sc
Variables: i, p, q: Integers
Operations: a=0
for i = 1 to Sc do
if i == 2a then
a=a+1 B[i]=ﬂoor(Sc/2a)
end
else
end
end
B[i] = B[i − 1] + ﬂoor(Sc/2a−1)
Algorithm 1: Computing the balanced ordering of sub-chunks
for distribution
Figure 2: Ordering of sub-chunks for distribution
ns
Each node divides its chunk into sub-chunks based on the chunk-
factor. Let nc be the number of IDs in a chunk and ns represent the
number of IDs in each of its sub-chunks. In
a chunk, the lowest ID is assigned to the owner node and the re-
maining IDs are for further distribution. Thus nc − 1 represents the
number of IDs in a chunk available for distribution by the owner
node. If the chunk factor is cf (0 ≤ cf ≤ 1) then ns would be
(cid:98)(nc − 1)cf (cid:99). The number of sub-chunks (Sc) that can be created
from a chunk is (cid:98) nc−1
(cid:99) + 1. This also represents the maximum
number of nodes that can be invited by a node having chunk of size
nc.
Let cf = 0.65 in this example. Node A divides its chunk into
nine sub-chunks where each sub-chunk has 57 IDs (the last sub-
chunk has 55 IDs). Node a1 joins the network after getting an in-
vitation from node A and A assigns a sub-chunk to a1. The lowest
ID in this sub-chunk is 1, which is assigned as a1’s ID, and the in-
terval [2, 57] represents the remaining IDs of the sub-chunk that are
for further distribution by a1. Another node a2 joins the network
through an invitation from A. Using cf = 0.65, both a1 and a2 di-
vide their chunks into ﬁve sub-chunks, where each sub-chunk has
13 IDs (the last one has four). Node a21 joins the network through
the invitation from node a2, which assigns it the ID 59. Nodes b1
and b11 join the network through the invitations from nodes B and
b1, respectively.
We assume that each node knows the value of Z, b, and cf . Thus,
if a node assigns an ID from its chunk to a joining node, the joining
node can easily verify it, because any node in Persea can calculate
the chunk distribution.
Balanced ordering of sub-chunks. As shown at the top of Fig. 2,
if chunks are assigned in consecutive order, the distribution of ID
space will be uneven. To maintain reasonable load distribution, we
instead space out the chunk distribution as shown in the lower part
of Fig. 2.
More speciﬁcally, a node doles out each sub-chunk so as to di-
vide its chunk’s ID space into the most balanced distribution possi-
ble at each moment. Using Fig. 2, in which there are 20 sub-chunks,
the node will ﬁrst allocate sub-chunk 10, which divides its ID space
in half between itself and its ﬁrst child. Further allocations will be
to cut the total ID space into quarters (chunks 5 and 15), eighths
(chunks 2, 7, 12, and 17), and so on. More formally, a node issues
its chunks according to Algorithm 1.
4.2 Certiﬁcation of IDs and Chunk Allocations
Persea employs a simple public key infrastructure to protect the
advantages of hierarchical ID distribution from fraudulent ID and
chunk ownership claims.
In Persea, each node has a certiﬁcate,
signed by its parent in the bootstrap tree, containing its ID, its pub-
lic key, the parent’s ID, and the last ID of its chunk. The ID of the
node itself is the ﬁrst ID of its chunk, and thus the chunk ranges
from the node’s ID to the last ID. The information in the certiﬁ-
cate helps to prevent attacks based on fraudulent node creation. We
discuss the resilience of Persea to such attacks in §5.
To ensure that its certiﬁcate can be found, each node takes the