validation of the PKCS #1 v1.5 format, logging validation
failures in Line 11. It also checks that the output is of the
expected length, issuing a log message on failure (Lines 13–
17). For brevity we omit the code that handles the success
case (Line 20). The main mitigation against Bleichenbacher
attacks occurs in Line 24, where the code generates a random
value to be used as the session key.
While the PKCS #1 v1.5 padding veriﬁcation code in
CoreTLS constant time, the code that handles the mitigations
against padding oracle attacks is far from constant time. As
seen in Listing 3, the code contains multiple sources of side
channel leakage which we now describe.
First, all of the conditional if statements in the presented
code can be exploited by branch prediction attacks to imple-
ment FFTT (Line 9), FFFT (Line 13), or FFFF (Lines 19
and 22) Bleichenbacher-type oracles.
Next, a cache attack can monitor either the code of the log
message function or the code of the random number generator,
which only runs if the PKCS #1 v1.5 validation fails. Another
option is to monitor the bodies of the if statements in Lines 19
or 22. These attacks can be used to implement an FFFF-type
padding oracle.
Finally, generating the random session key only on
PKCS #1 v1.5 validation failure (Line 24) is a signiﬁcant
weakness in the implementation. Random number generation
is a non-trivial operation that may take signiﬁcant time and
thus might expose a Bleichenbacher oracle via a timing attack.
That is, by simply measuring the response time of a TLS server
that uses the CoreTLS library, an attacker might get a FFFF-
type Bleichenbacher oracle.
(cid:21)(cid:21)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:49 UTC from IEEE Xplore.  Restrictions apply. 
// to is the output buffer of maximum length tlen bytes
// from is the input buffer of length flen bytes
// num_bytes is the maximum number of bytes in an RSA plaintext
// returns the number of message bytes (not counting the padding) or -1 in case of a padding error
1 int RSA_padding_check_PKCS1_type_2(to, tlen, from, flen, num_bytes){
2
3
4
5
6
7
8
9
10
11
12
13
14
15
good = constant_time_is_zero(from[0]);
good &= constant_time_eq(from[1], 2);
zero_index = find_index_of_first_zero_byte_constant_time(from+2, flen);
good &= constant_time_greaterOrEqual(zero_index, 2 + 8); //first 10 plaintext bytes must be non-zero
msg_index = zero_index + 1; //compute location of first message byte
msg_len = num_bytes - msg_index; //compute message length
good &= constant_time_greaterOrEqual(tlen, msg_len); //check that to buffer is long enough
/* We can’t continue in constant-time because we need to copy the result and we cannot fake its length.
This unavoidably leaks timing information at the API boundary. */
16
17
18
19
20
21
22
23
24
25
26
27 }
if (!good) {
mlen = -1;
goto err;
}
memcpy(to, from+msg_index, mlen);
err:
if (mlen == -1)
RSAerr(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2, RSA_R_PKCS_DECODING_ERROR);
return mlen;
Listing 2. Pseudocode of RSA padding check PKCS1 type 2
= keyExchange.data;
keyRef = ctx->signingPrivKeyRef;
src
localKeyModulusLen = keyExchange.length;
... // addtional inilization code omitted
1 int SSLDecodeRSAKeyExchange(keyExchange, ctx){
2
3
4
5
6
7
err = sslRsaDecrypt(keyRef, src,
localKeyModulusLen,
ctx->preMasterSecret.data,
SSL_RSA_PREMASTER_SECRET_SIZE, &outputLen);
if(err != errSSLSuccess) {
/* possible Bleichenbacher attack */
sslLogNegotiateDebug("SSLDecodeRSAKeyExchange:
RSA decrypt fail");
} else if(outputLen !=
SSL_RSA_PREMASTER_SECRET_SIZE) {
sslLogNegotiateDebug("SSLDecodeRSAKeyExchange:
premaster secret size error");
// not passed back to caller
err = errSSLProtocol;
}
if(err == errSSLSuccess) {
... // (omitted for brevity)
}
if(err != errSSLSuccess) {
... // (omitted for brevity)
sslRand(&tmpBuf);
}
/* in any case, save premaster secret (good or
bogus) and proceed */
return errSSLSuccess;
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28 }
Listing 3. Apple’s TLS mitigation function
D. Summary of the Findings.
Table I summarizes our ﬁndings, showing the identiﬁed oracles
in each of the implementations we evaluated. Overall, 7 of the
9 tested implementations expose padding oracles via microar-
chitectural attacks. Only BearSSL and Google’s BoringSSL
are fully constant time and do not seem to be vulnerable.
SUMMARY OF IDENTIFIED PADDING ORACLES.
TABLE I
Data
Conv.
M
M
I
M
M
M
PKCS #1 v1.5
Veriﬁcation
M
FFTT
FFFT
FFTT, FFFT*
M, TTTT, FTTT*
M, FFTT
M, TTTT, FFTT
Not Vulnerable
Not Vulnerable
OpenSSL
OpenSSL API
Amazon s2n
MbedTLS
Apple CoreTLS
Mozilla NSS
WolfSSL
GnuTLS
BoringSSL
BearSSL
TLS
Mitigation
FFTT, FFFT, FFFF
FFFF
FFTT, FFFF
FFTT, FFFT
V. EXPERIMENTAL RESULTS
To validate that the vulnerabilities we identiﬁed can indeed
be exploited, we mounted concrete side-channel attacks on
some of the implementations. We now discuss some of the
techniques we used for this validation.
A. Attacking the OpenSSL API
The vulnerability in the OpenSSL API (Section IV-B) has
already been disclosed by both Xiao et al. [66] and Zhang
et al. [72]. Our attack is similar to the attack of Zhang et al.
[72], but achieves a signiﬁcantly lower error rate, resulting
in a lower number of required oracle invocations. Combined
with our improved error handling (Section VI-B) we achieve
a reduction by a factor of 6 in the number of oracle queries
we require.
Experimental Setup.
Our test machine uses a 4 core
Intel Core i7-7500 processor, with a 4 MiB cache and 16 GiB
(cid:21)(cid:21)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:49 UTC from IEEE Xplore.  Restrictions apply. 
i.e.
memory, running Ubuntu 18.04.1. We use the Flush+Reload
attack [69], as implemented in the Mastik toolkit [68].
Monitoring Locations.
To reduce the likelihood of errors,
we monitor both the call-site to RSAerr (Line 25 of Listing 2)
and the code of the function RSAerr. Monitoring each of these
locations may generate false positives,
indicate access
when the plaintext is PKCS #1 v1.5 conforming. The former
results in false positives because the call to RSAerr shares the
cache line with the surrounding code, that is always invoked.
The latter results in false positives when unrelated code logs
an error. By only predicting a non-conforming plaintext if both
locations are accessed within a short interval, we reduce the
likelihood of false positives. We note that this technique is very
different to the approach of Genkin et al. [30] of monitoring
two memory locations to reduce false negative errors due to a
race between the victim and the attacker [6]. Unlike us, they
assume access if any of the monitored locations is accessed.
Experimental Results.
Overall, our technique achieves a
false positive rate of 4.3% and false negative rate of 1.1%.
B. Attacking the OpenSSL Data Conversion
We now turn our attention to the code that OpenSSL uses
for its own implementation of the TLS protocol. As discussed
in Section IV-A, OpenSSL leaks a Manger oracle through the
length argument in the call to memset in Line 4 of Listing 1.
We now show how we detect that the length passed to memset
is zero.
Experimental Setup. We implemented a proof-of-concept
attack on an Intel NUC computer, featuring an Intel Core i7-
6770HQ CPU, with 32 GiB memory, running Centos 7.4.1708.
The GNU C library provides multiple implementations for
memset, each opimized for a different processor feature. Dur-
ing initialization, the library chooses the best implementation
for the computer, and stores it in a function pointer. In run
time, the program invokes the best implementation of memset
by dereferencing the function pointer. On our system, this
best implementation is memset sse2. We show part of
the (disassembled) code of this function in Listing 4.
1 : test
2 : je
3 : mov
4 : test
5 : je
6 : mov
7 : retq
$0x1,%dl
0x40e918 
%cl,(%rdi)
$0x2,%dl
0x40e87a 
%cx,-0x2(%rax,%rdx,1)
Listing 4. A snippet of memset sse2
The presented code is only executed if the length argument
for memset is less than 4. Line 1 of the code ﬁrst tests the
least signiﬁcant bit of the length. If it is clear, i.e. if the length
is 0 or 2, Line 2 branches over Line 3. In Line 4, the code
tests if the second bit of the length, branching in Line 5 if the
length is less than 2. Thus, if both branches at Lines 2 and 4
are taken, the length argument is 0.
Branch Prediction Attack.
Our attack follows previous
works in creating shadow branches, at addresses that match
the least signiﬁcant bits of monitored branches [25, 44]. (We
assume that the attacker knows the virtual address of the
victim branch and note that Evtyushkin et al. [25] show how
to recover it, if randomized.) Because the branch predictor
ignores the high bits of the address, the outcome of the victim
branch affects the prediction for the matching shadow branch.
That is, when a monitored branch is taken, the BTB predicts
that both the monitored branch and it shadow will branch to
the same offset as the monitored branch.
Prior works either measure the time to execute the shadow
branch [25] or check the performance counters [44] to detect
mispredictions of the shadow branch, and from these infer the
outcome of previous executions of the monitored branch. How-
ever, performance counters are not always available to user
processes, and measurements of execution time of branches
are noisy. Instead, we combine the branch prediction attack
with FLUSH+RELOAD [69] to achieve high accuracy detection
of mispredictions.
Speciﬁcally, for each monitored branch we create two
shadows, the trainer and the spy branches. ”Each of these
branches to a different offset. These offsets are such that the
monitored branch and shadow branches fall in different cache
lines The attack then follows a sequence of steps:
• Invoke the trainer shadow to train the branch predictor to
predict the trainer offset for all three branches.
• Flush the cache line at the trainer offset from the spy branch
from the cache.
• Execute the victim. If the victim branch is taken, it will
update the BTB state to predict the victim offset for all
three branches
• Invoke the spy branch. Because the branch predictor predicts
either the victim or the trainer offset,
the spy branch
mispredicts. In the case that the victim branch has not been
taken, the mispredicted branch will attempt to branch to
the trainer offset from the branch, bringing the previously
ﬂushed line back into the cache.
• Measure the time to access the previously ﬂushed line. If the
victim branch has been taken, this line will not be cached,
and access will be slow. If, however, the victim branch did
not execute or was not taken, the line will be in the cache
due to the misprediction in the previous step, and accesss
will be fast.
Experimental Results. We implemented this attack and we
can predict the outcome of each of the monitored branches
with a probability higher than 98%. We cannot, however,
monitor both branches concurrently. Consequently, for the
Manger attack, we will have to send each message twice. Once
for monitoring the outcome of the branch in Line 2 and the
other for the branch in Line 5.
VI. MAN IN THE MIDDLE ATTACKS
The main scenario we investigate is an attacker mounting
a padding oracle attack to recover the premaster secret used
in TLS connections. When the TLS connection uses RSA
key exchange, the attack is particularly powerful, because the
(cid:21)(cid:21)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:49 UTC from IEEE Xplore.  Restrictions apply. 
attacker does not need to be able to decipher the encrypted
communication on the ﬂy. Instead, the attacker can record
the encrypted communication, and perform the padding oracle
attack at a later time to decipher the communication. The main
limitation of the attack is that RSA key exchange is not a rec-
ommended or a popular choice for TLS connections. TLS 1.3
does not support RSA key exchange, and for TLS 1.2 RSA
key exchange is not the recommended option. Consequently, at
the time of writing, only about 6% of all TLS connections use
RSA key exchange [1, 51]. To overcome this limitation, we
mount an online downgrade attack to force RSA key exchange
in a connection. We now discuss this downgrade attack.
Man-in-the-Middle Downgrade Attacks.
Jager et al. [41]
observe that padding oracle attacks can be combined with
man-in-the-middle attacks to force protocol and cipher suite
downgrade in the communication between a client and a
server. In a nutshell, the attacker uses a man-in-the-middle
(MitM) attack to change the protocol and cipher suite negoti-
ation messages between the parties to only advertise TLS 1.2
RSA key exchange. It then uses the padding oracle attack
to recover the premaster secret and uses it to complete the
handshake between the parties.
As Jager et al. [41] observe, downgrade attacks can be ap-
plicable even when the client uses protocols, such as TLS 1.3
and QUIC, that do not support RSA key exchange. If the server