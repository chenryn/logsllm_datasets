# Offensive Windows IPC Internals 1: Named Pipes

**Published:** January 10, 2021 (Last Updated: July 1, 2022)

## Table of Contents
- [Introduction](#introduction)
- [Named Pipe Messaging](#named-pipe-messaging)
- [Data Transfer Modes](#data-transfer-modes)
- [Overlapping Pipe I/O, Blocking Mode & In-/Out Buffers](#overlapping-pipe-io-blocking-mode--in-out-buffers)
- [Named Pipe Security](#named-pipe-security)
- [Impersonation](#impersonation)
- [Impersonating a Named Pipe Client](#impersonating-a-named-pipe-client)
- [Attack Surface](#attack-surface)
- [Client Impersonation](#client-impersonation)
- [Attack Scenario](#attack-scenario)
- [Prerequisites](#prerequisites)
- [Misleading Documentation](#misleading-documentation)
- [Implementation](#implementation)
- [Instance Creation Race Condition](#instance-creation-race-condition)
- [Instance Creation Special Flavors](#instance-creation-special-flavors)
- [Unanswered Pipe Connections](#unanswered-pipe-connections)
- [Killing Pipe Servers](#killing-pipe-servers)
- [PeekNamedPipe](#peeknamedpipe)
- [References](#references)
- [The Series: Part 2](#the-series-part-2)

---

## Introduction
This post marks the start of a series on the internals and interesting aspects of various Windows-based Inter-Process Communication (IPC) technologies. The series will cover:

- **Named Pipes**
- **Local Procedure Call (LPC)**
- **Advanced Local Procedure Call (ALPC)**
- **Remote Procedure Call (RPC)**

Other IPC components, such as Window Messages, Dynamic Data Exchange (DDE), Windows Sockets, and Mail Slots, may be added in future updates.

### Overview of Pipes
Pipes are a basic and simple technology for enabling communication and data sharing between two processes. The term "pipe" refers to a section of shared memory used by these processes. There are two types of pipes:

- **Named Pipes**
- **Anonymous Pipes**

Named Pipes offer a full feature set and can be used for communication between processes on the same system or across machine boundaries. Anonymous Pipes are primarily used for child-parent communications.

### Historical Background
Named Pipes originated from the OS/2 era and were supported in Windows 3.1 in 1992. This support is documented in the Windows/DOS Developer’s Journal Volume 4.

### Code Snippets
Some code snippets in this post are from my public Named Pipe Sample Implementation. For more context, refer to the code repository.

---

## Named Pipe Messaging
When you create a Named Pipe, you are creating a `FILE_OBJECT` managed by the Named Pipe File System (NPFS). A Named Pipe is created using the `CreateNamedPipe` WinAPI function.

### Example: Creating a Named Pipe
```cpp
HANDLE serverPipe = CreateNamedPipe(
    L"\\\\.\\pipe\\fpipe", // Name of the pipe
    PIPE_ACCESS_DUPLEX, // Open mode: duplex pipe for bidirectional communication
    PIPE_TYPE_MESSAGE, // Message mode for discrete units
    1, // Number of instances (1 is sufficient for this example)
    2048, // Output buffer size
    2048, // Input buffer size
    0, // Default timeout value (50 milliseconds)
    NULL // Default security attributes
);
```

### Connecting to a Named Pipe
A client can connect to a named pipe using the `CreateFile` function:
```cpp
HANDLE hPipeFile = CreateFile(L"\\\\127.0.0.1\\pipe\\fpipe", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
```

### Reading and Writing to a Pipe
- **Reading:**
  ```cpp
  ReadFile(hPipeFile, pReadBuf, MESSAGE_SIZE, pdwBytesRead, NULL);
  ```

- **Writing:**
  ```cpp
  WriteFile(serverPipe, message, messageLength, &bytesWritten, NULL);
  ```

### Network Communication
Named Pipes can also be used over a network connection. The network protocol used is SMB, and Kerberos is the preferred authentication scheme. If you connect to an IP address, NTLM(v2) will be used; if you connect to a hostname, Kerberos will likely be used.

---

## Data Transfer Modes
Named Pipes offer two basic communication modes:

- **Byte Mode:** Data travels as a continuous stream of bytes.
- **Message Mode:** Data is sent and received in discrete units.

### Byte Mode
In byte mode, messages travel as a continuous stream of bytes. The client and server do not know precisely how many bytes are being read or written at any given moment. This allows for flexible data transfer without concern for the size of the data.

### Message Mode
In message mode, data is sent and received in discrete units. Each message must be read as a complete unit. If the read buffer is too small, the remaining data stays in the server’s shared memory, and an error (ERROR_MORE_DATA) is returned.

---

## Overlapping Pipe I/O, Blocking Mode & In-/Out Buffers
### Overlapping I/O
Several Named Pipe functions, such as `ReadFile`, `WriteFile`, `TransactNamedPipe`, and `ConnectNamedPipe`, can perform operations synchronously or asynchronously. Asynchronous operations require setting the `FILE_FLAG_OVERLAPPED` flag in the `CreateNamedPipe` call.

### Blocking Mode
The blocking mode behavior is defined when setting up a named pipe server with `CreateNamedPipe`:

- **PIPE_WAIT (default):** Operations wait for completion.
- **PIPE_NOWAIT:** Operations return immediately, requiring additional routines to ensure data is read or written.

### In-/Out Buffers
These buffers are specified in the `nInBufferSize` and `nOutBufferSize` parameters of `CreateNamedPipe`. They use non-paged memory to store data temporarily. Large buffers can cause system crashes, while small buffers can delay pipe operations.

---

## Named Pipe Security
### Impersonation
Impersonation allows a server to act on behalf of a client. This can be useful for security but also introduces potential attack vectors.

### Impersonating a Named Pipe Client
To impersonate a client, the server can use the `ImpersonateNamedPipeClient` function. This can be exploited if the server has vulnerabilities.

### Attack Surface
The attack surface for named pipes includes impersonation, buffer overflow, and race conditions.

### Client Impersonation
An attacker can exploit client impersonation to gain elevated privileges or access sensitive data.

### Attack Scenario
An attack scenario might involve a malicious client connecting to a vulnerable server and exploiting the impersonation mechanism.

### Prerequisites
Understanding the prerequisites for such attacks, including the necessary permissions and configurations, is crucial.

### Misleading Documentation
Documentation can sometimes be misleading, leading to incorrect assumptions about the security and functionality of named pipes.

---

## Implementation
### Instance Creation Race Condition
Race conditions can occur during the creation of named pipe instances, leading to security vulnerabilities.

### Instance Creation Special Flavors
Special flavors of instance creation can introduce additional complexities and potential attack vectors.

### Unanswered Pipe Connections
Unanswered pipe connections can lead to resource exhaustion and other security issues.

### Killing Pipe Servers
Forcing a pipe server to terminate can be a method to disrupt communication and potentially exploit vulnerabilities.

### PeekNamedPipe
The `PeekNamedPipe` function can be used to inspect the contents of a pipe without removing it, which can be useful for debugging but also for attacks.

---

## References
- [Windows/DOS Developer’s Journal Volume 4]
- [Microsoft Documentation on Named Pipes]

## The Series: Part 2
Stay tuned for the next part of the series, which will cover Local Procedure Call (LPC).

---

This post provides a comprehensive overview of Named Pipes, their implementation, and potential security concerns. For more detailed information and practical examples, refer to the provided code repository.