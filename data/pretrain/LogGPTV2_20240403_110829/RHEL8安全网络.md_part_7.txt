:::
您可以使用以下方法验证端点：
::: itemizedlist
-   [*预共享密钥*]{.emphasis} (PSK)是最简单的验证方法。PSK
    应该由随机字符组成，长度至少为 20 个字符。在 FIPS 模式中，PSK
    需要根据所使用的完整性算法满足最低强度要求。建议您不要使用小于 64
    个随机字符的 PSK。
-   [*原始 RSA 密钥*]{.emphasis} 通常用于静态主机到主机或子网到子网
    `IPsec`{.literal} 配置。主机使用其他的公共 RSA
    密钥进行手动配置。当几十或更多主机都需要相互设置 `IPsec`{.literal}
    隧道时，此方法无法很好地扩展。
-   [*X.509 证书*]{.emphasis}
    通常用于大型部署，其中有很多主机需要连接到一个通用的
    `IPsec`{.literal} 网关。中央
    [*证书颁发机构*]{.emphasis}（CA）用于为主机或用户签名 RSA
    证书。此中央 CA 负责中继信任，包括单个主机或用户的撤销。
-   [*NULL 身份验证*]{.emphasis}
    用来在没有身份验证的情况下获得网状加密。它可防止被动攻击，但不会防止主动攻击。但是，由于
    `IKEv2`{.literal} 允许非对称身份验证方法，因此 NULL
    身份验证也可用于互联网扩展机会
    IPsec，其中客户端可以验证服务器，但服务器不能验证客户端。此模型类似于使用
    `TLS`{.literal} 的安全网站。
:::
::: title
**保护量子计算机**
:::
除了这些验证方法之外，您还可以使用 [*Postquantum Preshared
Keys*]{.emphasis}
(PPK)方法来防止量子计算机可能的攻击。单个客户端或客户端组可以通过指定与带外配置的预共享密钥对应的(PPKID)来使用它们自己的
PPK。
使用带有预共享密钥的 `IKEv1`{.literal} 可以防止量子攻击者。重新设计
`IKEv2`{.literal} 不会原生提供这种保护。`Libreswan`{.literal} 提供了使用
[*后量子预共享密钥*]{.emphasis} (PPK)来保护 `IKEv2`{.literal}
连接免受量子攻击。
要启用可选的 PPK 支持，请在连接定义中添加 `ppk=yes`{.literal}。如需要
PPK，请添加 `ppk=insist`{.literal}。然后，可为每个客户端分配一个带有一个
secret 值的 PPK ID，其 secret
值会被传递到带外（最好是使用半字节安全）。PPK
的随机性应该非常强大，而且不能基于字典的单词。PPK ID 和 PPK
数据本身存储在 `ipsec.secrets`{.literal} 中，例如：
``` screen
@west @east : PPKS "user1" "thestringismeanttobearandomstr"
```
`PPKS`{.literal} 选项指的是静态 PPK。实验性功能使用基于单时间的 Dynamic
PPK。在每个连接中，会将一次性 pad 的新部分用作
PPK。当使用时，文件中的该部分动态 PPK
被零覆盖，以防止重复使用。如果没有剩下一次性资源，连接会失败。详情请查看
`ipsec.secrets(5)`{.literal} 手册页。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
动态 PPK 的实现是作为技术预览提供的，这个功能应该小心使用。
:::
:::
::: section
::: titlepage
# []{#configuring-a-vpn-with-ipsec_securing-networks.html#deploying-a-fips-compliant-ipsec-vpn_configuring-a-vpn-with-ipsec}部署 FIPS 兼容 IPsec VPN {.title}
:::
使用此流程基于 Libreswan 部署 FIPS 兼容 IPsec VPN
解决方案。以下步骤还允许您识别哪些加密算法可用，并在 FIPS 模式的
Libreswan 中禁用了哪些加密算法。
::: itemizedlist
**先决条件**
-   `AppStream`{.literal}存储库已启用。
:::
::: orderedlist
**流程**
1.  安装 `libreswan`{.literal} 软件包：
    ``` screen
    # yum install libreswan
    ```
2.  如果您要重新安装 `Libreswan`{.literal}，请删除其旧的 NSS 数据库：
    ``` screen
    # systemctl stop ipsec
    # rm /etc/ipsec.d/*db
    ```
3.  启动 `ipsec`{.literal} 服务，并启用该服务，以便其在引导时自动启动：
    ``` screen
    # systemctl enable ipsec --now
    ```
4.  通过添加 `ipsec`{.literal} 服务，将防火墙配置为允许 IKE、ESP 和 AH
    协议的 500 和 4500/UDP 端口：
    ``` screen
    # firewall-cmd --add-service="ipsec"
    # firewall-cmd --runtime-to-permanent
    ```
5.  在 RHEL 8 中将系统切换到 FIPS 模式：
    ``` screen
    # fips-mode-setup --enable
    ```
6.  重启您的系统以允许内核切换到 FIPS 模式：
    ``` screen
    # reboot
    ```
:::
::: orderedlist
**验证**
1.  确认 Libreswan 在 FIPS 模式下运行：
    ``` screen
    # ipsec whack --fipsstatus
    000 FIPS mode enabled
    ```
2.  或者，检查 `systemd`{.literal} 日志中的 `ipsec`{.literal} 单元条目：
    ``` screen
    $ journalctl -u ipsec
    ...
    Jan 22 11:26:50 localhost.localdomain pluto[3076]: FIPS Product: YES
    Jan 22 11:26:50 localhost.localdomain pluto[3076]: FIPS Kernel: YES
    Jan 22 11:26:50 localhost.localdomain pluto[3076]: FIPS Mode: YES
    ```
3.  以 FIPS 模式查看可用算法：
    ``` screen
    # ipsec pluto --selftest 2>&1 | head -11
    FIPS Product: YES
    FIPS Kernel: YES
    FIPS Mode: YES
    NSS DB directory: sql:/etc/ipsec.d
    Initializing NSS
    Opening NSS database "sql:/etc/ipsec.d" read-only
    NSS initialized
    NSS crypto library initialized
    FIPS HMAC integrity support [enabled]
    FIPS mode enabled for pluto daemon
    NSS library is running in FIPS mode
    FIPS HMAC integrity verification self-test passed
    ```
4.  使用 FIPS 模式查询禁用的算法：
    ``` screen
    # ipsec pluto --selftest 2>&1 | grep disabled
    Encryption algorithm CAMELLIA_CTR disabled; not FIPS compliant
    Encryption algorithm CAMELLIA_CBC disabled; not FIPS compliant
    Encryption algorithm SERPENT_CBC disabled; not FIPS compliant
    Encryption algorithm TWOFISH_CBC disabled; not FIPS compliant
    Encryption algorithm TWOFISH_SSH disabled; not FIPS compliant
    Encryption algorithm NULL disabled; not FIPS compliant
    Encryption algorithm CHACHA20_POLY1305 disabled; not FIPS compliant
    Hash algorithm MD5 disabled; not FIPS compliant
    PRF algorithm HMAC_MD5 disabled; not FIPS compliant
    PRF algorithm AES_XCBC disabled; not FIPS compliant
    Integrity algorithm HMAC_MD5_96 disabled; not FIPS compliant
    Integrity algorithm HMAC_SHA2_256_TRUNCBUG disabled; not FIPS compliant
    Integrity algorithm AES_XCBC_96 disabled; not FIPS compliant
    DH algorithm MODP1024 disabled; not FIPS compliant
    DH algorithm MODP1536 disabled; not FIPS compliant
    DH algorithm DH31 disabled; not FIPS compliant
    ```
5.  在 FIPS 模式中列出所有允许的算法和密码：
    ``` screen
    # ipsec pluto --selftest 2>&1 | grep ESP | grep FIPS | sed "s/^.*FIPS//"
    {256,192,*128}  aes_ccm, aes_ccm_c
    {256,192,*128}  aes_ccm_b
    {256,192,*128}  aes_ccm_a
    [*192]  3des
    {256,192,*128}  aes_gcm, aes_gcm_c
    {256,192,*128}  aes_gcm_b
    {256,192,*128}  aes_gcm_a
    {256,192,*128}  aesctr
    {256,192,*128}  aes
    {256,192,*128}  aes_gmac
    sha, sha1, sha1_96, hmac_sha1
    sha512, sha2_512, sha2_512_256, hmac_sha2_512
    sha384, sha2_384, sha2_384_192, hmac_sha2_384
    sha2, sha256, sha2_256, sha2_256_128, hmac_sha2_256
    aes_cmac
    null
    null, dh0
    dh14
    dh15
    dh16
    dh17
    dh18
    ecp_256, ecp256
    ecp_384, ecp384
    ecp_521, ecp521
    ```
:::
::: itemizedlist
**其它资源**
-   [使用系统范围的加密策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening){.link}。
:::
:::
::: section
::: titlepage
# []{#configuring-a-vpn-with-ipsec_securing-networks.html#protecting-the-ipsec-nss-database-by-a-password_configuring-a-vpn-with-ipsec}使用密码保护 IPsec NSS 数据库 {.title}
:::
默认情况下，IPsec
服务在第一次启动时使用空密码创建其网络安全服务(NSS)数据库。使用以下命令添加密码保护。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在 RHEL 6.6 和之前的版本中，您必须使用一个密码来保护 IPsec NSS
数据库，以满足 FIPS 140-2 标准的要求，因为 NSS 加密库是针对 FIPS 140-2
Level 2 标准认证的。在 RHEL 8 中，NIS 将 NSS 认证为该标准级别
1，并且该状态不需要对数据库进行密码保护。
:::
::: itemizedlist
**先决条件**
-   `/etc/ipsec.d`{.literal} 目录包含 NSS 数据库文件。
:::
::: orderedlist
**流程**
1.  为 `Libreswan`{.literal} 的 `NSS`{.literal} 数据库启用密码保护：
    ``` screen
    # certutil -N -d sql:/etc/ipsec.d
    Enter Password or Pin for "NSS Certificate DB":
    Enter a password which will be used to encrypt your keys.
    The password should be at least 8 characters long,
    and should contain at least one non-alphabetic character.
    Enter new password:
    ```
2.  创建包含您在上一步中设置的密码的
    `/etc/ipsec.d/nsspassword`{.literal} 文件，例如：
    ``` screen
    # cat /etc/ipsec.d/nsspassword
    NSS Certificate DB:MyStrongPasswordHere
    ```
    请注意, `nsspassword`{.literal} 文件使用以下语法：
    ``` screen
    token_1_name:the_password
    token_2_name:the_password
    ```
    默认的 NSS 软件令牌是 `NSS 证书 数据库`{.literal}。如果您的系统以
    FIPS 模式运行，则令牌的名称为
    `NSS FIPS 140-2 证书数据库`{.literal}。
3.  根据您的场景，在完成了 `nsspassword`{.literal} 文件后，启动或重启
    `ipsec`{.literal} 服务：
    ``` screen
    # systemctl restart ipsec
    ```
:::
::: orderedlist
**验证**
1.  在其 NSS 数据库中添加非空密码后，检查 `ipsec`{.literal}
    服务是否运行：
    ``` screen
    # systemctl status ipsec
    ● ipsec.service - Internet Key Exchange (IKE) Protocol Daemon for IPsec
       Loaded: loaded (/usr/lib/systemd/system/ipsec.service; enabled; vendor preset: disable>
       Active: active (running)...
    ```
2.  （可选）检查 `Journal`{.literal} 日志是否包含确认成功初始化的条目：
    ``` screen
    # journalctl -u ipsec
    ...
    pluto[23001]: NSS DB directory: sql:/etc/ipsec.d
    pluto[23001]: Initializing NSS
    pluto[23001]: Opening NSS database "sql:/etc/ipsec.d" read-only
    pluto[23001]: NSS Password from file "/etc/ipsec.d/nsspassword" for token "NSS Certificate DB" with length 20 passed to NSS
    pluto[23001]: NSS crypto library initialized
    ...
    ```
:::
::: itemizedlist
**其它资源**
-   `certutil(1)`{.literal} 手册页。
-   [政府标准](https://access.redhat.com/articles/2918071#fips-140-2-2){.link}
    知识库文章。
:::
:::
::: section
::: titlepage
# []{#configuring-a-vpn-with-ipsec_securing-networks.html#proc_configuring-an-ipsec-vpn-to-use-tcp_configuring-a-vpn-with-ipsec}配置 IPsec VPN 以使用 TCP {.title}
:::
Libreswan 支持 IKE 和 IPsec 数据包的 TCP 封装，如 RFC 8229
所述。有了这个功能，您可以在网络上建立 IPsec VPN，以防止通过 UDP
和封装安全负载(ESP)传输的流量。您可以将 VPN 服务器和客户端配置为使用 TCP
作为回退，或者作为主 VPN 传输协议。由于 TCP
封装的性能成本较高，因此只有在您的场景中需要永久阻止 UDP 时，才使用 TCP
作为主 VPN 协议。
::: itemizedlist
**先决条件**
-   已配置了 [远程访问
    VPN](#configuring-a-vpn-with-ipsec_securing-networks.html#configuring-a-remote-access-vpn_configuring-a-vpn-with-ipsec "配置远程访问 VPN"){.link}。
:::
::: orderedlist
**流程**
1.  在 `/etc/ipsec.conf`{.literal} 文件的 `config setup`{.literal}
    部分中添加以下选项：
    ``` screen
    listen-tcp=yes
    ```
2.  要在第一次尝试 UDP 失败时使用 TCP
    封装作为回退选项，请在客户端的连接定义中添加以下两个选项：
    ``` screen
    enable-tcp=fallback
    tcp-remoteport=4500
    ```
    另外，如果您知道 UDP
    会被永久阻止，请在客户端的连接配置中使用以下选项：
    ``` screen
    enable-tcp=yes
    tcp-remoteport=4500
    ```
:::
::: itemizedlist
**其它资源**
-   [IETF RFC 8229：IKE 和 IPsec 数据包的 TCP
    封装](https://tools.ietf.org/html/rfc8229){.link} 。
:::
:::
::: section
::: titlepage