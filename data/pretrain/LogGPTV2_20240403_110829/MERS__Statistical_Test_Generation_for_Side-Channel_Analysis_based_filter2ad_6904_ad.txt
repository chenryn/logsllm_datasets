ter is aﬀected by the Trojan and other parameters are used
to calibrate the process noise. For example, the dynamic
current (IDDT ), the quiescent or leakage current (IDDQ) and
the maximum operating frequency (Fmax) may be inﬂuenced
when there is a Trojan. They can serve as side channel refer-
ences to calibrate process noise. Authors in [23] have shown
Trojan and process variation eﬀects on these three vari-
ables (IDDT , IDDQ and Fmax). MERS can increase IDDT ,
which would greatly improve the accuracy of [23] to isolate
a Trojan-infected chip in the multiple-parameter space from
process induced variations.
5.9 Scalability to Large Designs
5.8 Process Calibration and Multiple-Parameter
Side-Channel Analysis
MERS can be combined with existing process calibration
approaches [21][22][23] to minimize the false positives/negatives
and maximize Trojan coverage. Most side-channel analysis
based approaches perform process variation calibration by
using golden chips at diﬀerent process corners. This helps us
For a large design, the supply current of a golden chip
for a high-activity vector can be very large compared to the
additional current consumed by a small Trojan. The vari-
ation in the current value due to process noise can also be
very large, which would mask the eﬀect of the Trojan on
the measured current and create diﬃculty for accurate Tro-
jan detection. Scalability of MERS to larger designs can be
enhanced by combining it with region-based test generation
Table 4: Comparison of average Side Channel Sensitivity between Random (10K), MERO, and MERS testsets, N=1000,
C=5 for MERS-s, over 1000 random samples of 4-trigger Trojans.
Benchmark
Comparison
Testsets
Proposed
Schemes
Improvement
to Random
Improvement
to MERO
c2670
c3540
c5315
c6288
c7552
s13207
s15850
s35932
Avg. Improve.
Random MERO MERS MERS-h MERS-s MERS MERS-h MERS-s MERS MERS-h MERS-s
31.01% 78.27%
0.01703
28.69%
0.02144
-37.71% 397.97% 416.16% -68.48% 151.96% 161.16%
67.79% 188.97% 256.29% -30.97% 18.89%
0.00445
46.59%
86.85% -20.88% 87.50% 126.80%
-34.81% 54.47%
0.00480
58.42%
39.61% 255.63% 232.38% -33.46% 69.50%
0.00351
33.80%
25.29%
9.07%
0.00568
0.00447
6.14%
41.86%
30.17%
10.48%
1.89%
7.90%
0.00354
10.37% 138.44% 152.26% -23.95% 52.62%
62.01%
0.03035
0.10677
0.01287
0.00741
0.01250
0.00773
0.00691
0.00500
0.03308
0.11067
0.01586
0.00896
0.01168
0.00826
0.00634
0.00512
0.02571
0.04238
0.01082
0.00395
0.00737
0.00617
0.00487
0.00463
0.02231
0.01336
0.00747
0.00313
0.00491
0.00619
0.00474
0.00361
0.31%
45.49%
-2.75%
42.06%
44.53% -22.12%
94.31% -13.23% 18.07%
36.24%
54.83%
41.17%
–
–
–
–
–
Table 5: Comparison of average Side Channel Sensitivity between Random (10K), MERO, and MERS testsets, N=1000,
C=5 for MERS-s, over 1000 random samples of 8-trigger Trojans.
Benchmark
Comparison
testsets
Proposed
Schemes
Improvement
to Random
Improvement
to MERO
c2670
c3540
c5315
c6288
c7552
s13207
s15850
s35932
Avg. Improve.
Random MERO MERS MERS-h MERS-s MERS MERS-h MERS-s MERS MERS-h MERS-s
0.02469
24.35%
25.90% 51.05%
-27.59% 348.53% 275.96% -65.05% 116.47% 81.44%
0.02670
29.14%
45.72% 94.03% 114.78% -12.38% 16.66%
0.00526
91.72%
57.49%
-26.06% 21.55%
0.00534
-4.20%
25.74%
57.31%
88.48% 217.78% 154.00% -6.70%
0.00452
0.00756
11.64% 39.24%
0.69%
25.58%
32.63%
13.28%
27.86%
-0.87%
20.70% 55.69%
0.00593
9.74%
12.29% 32.39%
0.00523
-7.90%
8.58%
18.89% 107.53% 96.61% -12.43% 40.79%
38.50%
0.03729
0.11974
0.01020
0.00649
0.01437
0.01053
0.00923
0.00692
0.03984
0.10037
0.01129
0.00790
0.01149
0.01112
0.00818
0.00700
0.03204
0.05532
0.00875
0.00412
0.00914
0.00838
0.00722
0.00638
0.03108
0.01933
0.00766
0.00395
0.00852
0.00844
0.00716
0.00587
47.05%
37.94%
33.80%
61.40%
16.37%
47.97%
-3.01%
–
–
–
–
–
approaches, which segment a circuit into nearly-isolated re-
gions (i.e. with low connectivity between them).
In this
case, MERS can be applied separately to each region. For
example, in case of a processor, MERS can be employed
separately to its building blocks, such as, integer execution
unit, ﬂoating point datapaths, control logic, and result bus
logic. MERS can work with schemes proposed in [23] to iso-
late a region and prevent unwanted switching in independent
functional modules by taking advantage of the power gating
techniques conventionally used by low-power designs, such
as clock gating, supply gating, or operand isolation. MERS
can also be applied a more ﬂexible region-based side channel
analysis approach proposed in [24]. They perform a func-
tional decomposition to divide a large design into several
small blocks or regions, so that they can activate them one
region at a time. MERS can be used as the test genera-
tion algorithm to generate vectors that maximize the ac-
tivity within each region. The decision to report a chip as
Trojan-infected would be based on the deviation of its region
current matrix with respect to the golden chip. Future work
will include integration of MERS with region-based circuit
partitioning techniques to further enhance its eﬀectiveness
and its evaluation on larger industry-standard designs.
6. CONCLUSIONS
a test generation approach will, in general, be eﬀective for
any side-channel analysis approaches that rely on activity
in Trojan circuits (e.g.
transient current, dynamic power
proﬁle, or electromagnetic emanation based methods). Fur-
thermore, MERS is eﬀective for any Trojan forms/sizes, as
long as a Trojan is implanted through alterations in a circuit
structure - the most dominant mode of Trojan implantation.
Our simulation results on a set of benchmark circuits show
that the proposed approach can improve the side channel
sensitivity by more than 96.61%, compared with random
tests for a large set of arbitrary Trojans. It shows that a
judicious statistical test generation such as MERS can serve
as an essential component in a side-channel Trojan detection
approach. Future work will include further improvement in
scalability to larger designs and evaluation of MERS with
test chip measurements.
7. ACKNOWLEDGMENTS
This work was partially supported by grants from Na-
tional Science Foundation (1441667, 1603475, 1603483), Semi-
conductor Research Corporation (2014-TS-2554) and Cisco
Systems (F020375). Any opinions, ﬁndings, conclusions or
recommendations expressed in this publication are those of
the authors and do not necessarily reﬂect the views of the
funding agencies.
We have presented a framework for statistical test gen-
eration, called MERS, which can signiﬁcantly improve the
Trojan detection sensitivity in side-channel analysis based
Trojan detection. The approach aims at statistically increas-
ing switching activity in an unknown Trojan to amplify the
Trojan eﬀect in presence of large process variations. Such
8. REFERENCES
[1] R. Chakraborty, S. Narasimhan and S. Bhunia.
Hardware Trojan: Threats and emerging solutions.
IEEE International High-Level Design Validation and
Test Workshop (HLDVT), 2009.
[2] DARPA: TRUST in Integrated Circuits (TIC), 2007.
[14] S. Dupuis, P. Ba, G. Natale, M. Flottes, and B.
[Online]. Available: http://www.dtic.mil/cgi-
bin/GetTRDoc?AD=ADA503809
[3] R. Chakraborty and S. Bhunia. Security against
hardware Trojan through a novel application of design
obfuscation. ACM International Conference on
Computer-Aided Design (ICCAD), pp. 113-116, 2009.
[4] S. Borkar, T. Karnik, S. Narendra, J. Tschanz, A.
Keshavarzi and V. De. Parameter variations and impact
on circuits and microarchitecture. ACM/IEEE Design
Automation Conference (DAC), pp. 338-342, 2003.
[5] R. Chakraborty, F. Wolﬀ, S. Paul, C. Papachristou and
S. Bhunia. MERO: A Statistical Approach for
Hardware Trojan Detection. International Workshop on
Cryptographic Hardware and Embedded Systems
(CHES), pp. 396-410, 2009.
[6] S. Saha, R. Chakraborty, S. Nuthakki, Anshul, and D.
Mukhopadhyay. Improved Test Pattern Generation for
Hardware Trojan Detection Using Genetic Algorithm
and Boolean Satisﬁability. International Workshop on
Cryptographic Hardware and Embedded Systems
(CHES), pp. 577-596 (2015).
[7] Y. Jin and Y. Makris. Hardware Trojan detection using
path delay ﬁngerprint. IEEE International Symposium
on Hardware Oriented Security and Trust (HOST),
2008.
[8] M. Banga and M. Hsiao. A region based approach for
the identiﬁcation of hardware Trojans. IEEE
International Workshop on Hardware-Oriented Security
and Trust (HOST), 2008.
[9] M. Banga, M. Chandrasekar, L. Fang and M. Hsiao.
Guided test generation for isolation and detection of
embedded Trojans in ICs. ACM Great Lakes
Symposium on VLSI (GLSVLSI), pp. 363-366, 2008.
Rouzeyre. A novel hardware logic encryption technique
for thwarting illegal overproduction and Hardware
Trojans. IEEE 20th International On-Line Testing
Symposium (IOLTS), pp. 49-54, 2014.
[15] J. Rajendran, Y. Pino, O. Sinanoglu and R. Karri.
Security analysis of logic obfuscation. ACM/IEEE
Design Automation Conference, pp. 83-89, 2012.
[16] S. Shekarian, M. Zamani and S. Alami. Neutralizing a
design-for-hardware trust technique. International
Symposium on Computer Architecture and Digital
Systems (CADS), pp. 73-78, 2013.
[17] X. Mingfu, H. Aiqun and L. Guyue: Detecting
Hardware Trojan through Heuristic Partition and
Activity Driven Test Pattern Generation.
Communications Security Conference (CSC), pp. 1-6,
2014.
[18] H. Salmani, M. Tehranipoor and J. Plusquellic. A
novel technique for improving hardware Trojan
detection and reducing Trojan activation time. IEEE
Transactions on Very Large Scale Integration Systems
(TVLSI), 20(1), pp. 112-125, 2012.
[19] B. Zhou, W. Zhang, S. Thambipillai, and J. Teo. A
low cost acceleration method for hardware Trojan
detection based on fan-out cone analysis. ACM
International Conference on Hardware Software
Codesign and System Synthesis, p. 28, 2014.
[20] I. Pomeranz and S. Reddy. A measure of quality for
n-detection test sets. IEEE Transactions on Computers,
53(11), pp. 1497-1503, 2004.
[21] D. Agrawal, S. Baktir, D. Karakoyunlu, P. Rohatgi
and B. Sunar. Trojan Detection using IC
Fingerprinting. IEEE Symposium on Security and
Privacy, pp. 296-310, 2007.
[10] Y. Jin and Y. Makris. Hardware Trojan detection
[22] X. Wang, H. Salmani, M. Tehranipoor and J.
using path delay ﬁngerprint. IEEE International
Workshop on Hardware-Oriented Security and Trust
(HOST), 2008.
[11] S. Wei and M. Potkonjak. Scalable hardware Trojan
diagnosis. IEEE Transactions on Very Large Scale
Integration Systems (TVLSI), 20(6), pp. 1049-1057,
2012.
[12] R. Rad, J. Plusquellic and M. Tehranipoor. A
sensitivity analysis of power signal methods for
detecting hardware Trojans under real process and
environmental conditions. IEEE Transactions on Very
Large Scale Integration Systems (TVLSI), 18(12), pp.
1735-1744, 2010.
[13] H. Salmani and M. Tehranipoor. Layout-Aware
Switching Activity Localization to Enhance Hardware
Trojan Detection. IEEE Transactions on Information
Forensics and Security, 7(1), pp. 76-87, 2012.
Plusquellic. Hardware Trojan Detection and Isolation
Using Current Integration and Localized Current
Analysis. IEEE International Symposium on Defect and
Fault Tolerance of VLSI Systems, pp. 87-95, 2008.
[23] S. Narasimhan, D. Du, R. Chakraborty, S. Paul, F.
Wolﬀ, C. Papachristou, K. Roy and S. Bhunia.
Hardware Trojan detection by multiple-parameter
side-channel analysis. IEEE Transactions on
Computers, 62(11), pp. 2183-2195, 2013.
[24] D. Du, S. Narasimhan, R. Chakraborty and S.
Bhunia. Self-referencing: a scalable side-channel
approach for hardware trojan detection. International
Workshop on Cryptographic Hardware and Embedded
Systems (CHES), pp. 173-187, 2010.