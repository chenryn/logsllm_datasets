### References

[56] J. Vander Stoep. *ioctl Command Whitelisting in SELinux*. Available at: <http://kernsec.org/files/lss2015/vanderstoep.pdf>, 2015.

[57] K. MacMillan, C. Case, J. Brindle, and C. Sellers. *SELinux Common Intermediate Language: Motivation and Design*. Available at: <https://github.com/SELinuxProject/cil/wiki>, 2020.

[58] R. Mayrhofer, J. Vander Stoep, C. Brubaker, and N. Kralevich. *The Android Platform Security Model*. arXiv, 2019.

[59] D. Muthukumaran, T. Jaeger, and V. Ganapathy. *Leveraging “Choice” to Automate Authorization Hook Placement*. In CCS, 2012.

[60] M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel. *Semantically Rich Application-Centric Security in Android*. ACSAC, 2009.

[61] P. Pearce, A.P. Felt, G. Nunez, and D. Wagner. *AdDroid: Privilege Separation for Applications and Advertisers in Android*. In ASIACCS, 2012.

[62] *Android Open Source Project: PackageParser*. Available at: <https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/content/pm/PackageParser.java>, 2021.

[63] R. Sandhu and P. Samarati. *Authentication, Access Control, and Audit*. CSUR, 1996.

[64] U. Shankar, T. Jaeger, and R. Sailer. *Toward Automated Information-Flow Integrity Verification for Security-Critical Applications*. In NDSS, 2006.

[65] S. Smalley and R. Craig. *Security Enhanced (SE) Android: Bringing Flexible MAC to Android*. In NDSS, 2013.

[66] *Statista: Most Popular Development Software Apps Worldwide as of September 2020*. Available at: <https://www.statista.com/statistics/1035623/leading-mobile-app-ad-network-sdks-android/>, 2020.

[67] *The SELinux Project: Type Enforcement*. Available at: <https://selinuxproject.org/page/NB_TE>, 2015.

[68] *The SELinux Project: libselinux*. Available at: <https://github.com/SELinuxProject/selinux/tree/master/libselinux>, 2021.

[69] *Unity: Unity Ads*. Available at: <https://unity.com/solutions/unity-ads>, 2021.

[70] C. Wright, C. Cowan, J. Morris, S. Smalley, and G. Kroah-Hartman. *Linux Security Module Framework*. In Ottawa Linux Symposium, 2002.

[71] Z. Xiao, A. Amit, and D. Wenliang. *AFrame: Isolating Advertisements from Mobile Applications in Android*. In ACSAC, 2013.

[72] *Zerodium: The Leading Exploit Acquisition Platform*. Available at: <https://zerodium.com>, 2021.

### Application of SEApp

In this section, we provide a technical demonstration of the security measures introduced by SEApp. The description is based on the showcase app presented in Section 3. We will demonstrate that:

1. The showcase app can operate without a policy module, in which case its vulnerabilities can be exploited.
2. The showcase app can also operate with the policy module listed in Appendix A.4, using the services offered by SEApp; in this mode, the internal vulnerabilities are no longer exploitable.

#### Structure of the Showcase App

The showcase app has a minimal structure. Its entry point is the `MainActivity`, which is associated with the `core_logic` process. From `MainActivity`, it is possible to send a `startActivity` intent to one of the following activities: `UseCase1Activity`, `UseCase2Activity`, or `UseCase3Activity`. Each activity represents a different use case. For each entry point, Zygote starts a dedicated process and, according to the content of `seapp_contexts` (Listing 4), assigns a specific domain (`user_logic_d` for Use Case 1, `ads_d` for Use Case 2, and `media_d` for Use Case 3).

#### A.1 Use Case 1

In this use case, we demonstrate how an app can benefit from fine-grained file access control. Specifically, we show how `UseCase1Activity`, which suffers from a path traversal vulnerability, cannot be exploited when the app is associated with a properly configured policy module. According to the Google Play Protect report on common application vulnerabilities [51], unsanitized path names leading to path traversal are a primary source of problems in applications.

**Description:**
- `UseCase1Activity` displays the content of a file given its relative path through an intent.
- While this may be fine for trusted components, the activity also supports implicit intents from untrusted sources, making the vulnerability easily exploitable by an attacker targeting confidential files written by the `core_logic` components.

**Setup:**
- We use `MainActivity` to create an internal directory structure using the `android.os.File` abstraction, which sets file and directory contexts upon creation (see Section 6.2.2).
- Two directories are created: `user/` and `confidential/`. Inside both folders, a file named `data` is saved.

**Testing:**
- Start `UseCase1Activity` and send an intent to "confuse" it into showing the content of `confidential/data`:
  ```sh
  adb shell am start -n com.example.showcaseapp/.UseCase1Activity -a "com.example.showcaseapp.intent.action.SHOW" --es "com.example.showcaseapp.intent.extra.PATH" "../confidential/data"
  ```

**Results:**
- **Without Policy Module:** All internal files are flagged with `app_data_file`, and every app component executes within the `untrusted_app` domain, which has read access to `app_data_file`. As a result, the vulnerability is successfully exploited, and `UseCase1Activity` shows the content of the `confidential/data` file.
- **With Policy Module:** The file `confidential/data` is flagged with `confidential_t` (as indicated in line 2 of `file_contexts` in Listing 5). Since no permission is granted on `confidential_t` in `sepolicy.cil` to `user_logic_d`, any access to the file `confidential/data` by `UseCase1Activity` is blocked by SELinux. The following denial is written to the system log: `denied search to user_logic_d domain on confidential_t type`.

#### A.2 Use Case 2

In this use case, we show how to confine an ad library into a dedicated process, ensuring it cannot abuse the access privileges granted to the entire application sandbox by the user. To do this, we inject a malicious component into the same process where the library is executed. This component attempts to capture the location when the `ACCESS_FINE_LOCATION` permission is granted to the app. The ad library used is Unity Ads [69], which, according to [66], was used by 11% of apps that show ads in 2020.

**Description:**
- The library is invoked by `UseCase2Activity`, and both the activity and the components created by the library are executed by Zygote in a process labeled with `ads_d` (line 3 of `seapp_contexts`).
- `UseCase2Activity` instances a `UnityAdsListener`. After the ad initialization and displaying the ad to the user, the ad framework invokes the listener callback method `onUnityAdsFinish`, which executes the malicious routine `captureLocation`.
- The routine probes the app permissions; if `ACCESS_FINE_LOCATION` was granted, the malicious component retrieves a handle to the `LocationManager` through the `servicemanager` and registers an asynchronous listener to capture GPS location.

**Results:**
- **Without Policy Module:** The malicious component can access the GPS coordinates.
- **With Policy Module:** The malicious component cannot access the GPS coordinates because the component is executed in the same process as the library, which is labeled with `ads_d`. According to `sepolicy.cil` (lines 43-50), `ads_d` is not granted access to the SELinux type `location_service`. The following denial is written to the system log: `denied find on location_service to the ads_d domain`. As a result, the malicious component is terminated by the `ActivityTaskManager`.

**Integration:**
- The ad library was included in the app as an `.aar` archive. No modifications were necessary to confine it; only the use of `AndroidManifest.xml` and `sepolicy.cil` was required.

#### A.3 Use Case 3

In this use case, we show how to confine a set of components that rely on a high-performance native library written in C to perform a task. Our goal is to demonstrate that the context running the native library code is prevented from accessing the network, even when the `INTERNET` and `ACCESS_NETWORK_STATE` permissions are granted to the app sandbox.

**Description:**
- The native library is invoked by `UseCase3Activity`, which, according to line 4 in `seapp_contexts`, is executed in a process labeled with `media_d` by Zygote.
- The call to the library is performed via JNI. Its job is to connect to the `camera_service` and take a picture. Since the app is granted the `CAMERA` permission, the native library code (legitimately, line 53 in `sepolicy.cil`) connects to the `CameraManager`.

**Results:**
- **Without Policy Module:** The native library can connect to the `ConnectivityManager` and successfully bind the current process to the network.
- **With Policy Module:** Since `media_d` was granted only the basic app permissions (line 11 in `sepolicy.cil`), the connection to the network is forbidden. Binding a process to the network is associated with opening a network socket, an operation not permitted by SELinux without the required permissions. The following denial is written to the system log: `denied create on udp_socket to media_d domain`.

**Simplicity and Power:**
- This use case demonstrates the power and simplicity of the macro, as adding the line `(call md_netdomain (media_d))` to the policy module grants `media_d` the needed permissions to access the network. The application developer is thus not required to know or understand the internal SELinux policy to leverage this functionality.

**Additional Benefits:**
- The isolation properties introduced by SEApp also apply to other common security problems, such as incorrect sandboxing of a scripting language.

#### A.4 Showcase App Policy Module

Here we report the policy module files for the showcase app.

**seapp_contexts:**

```plaintext
1 user = _app seinfo = showcase_app domain = com_example_showcaseapp.core_logic_d name = com.example.showcaseapp:core_logic levelFrom = all
2 user = _app seinfo = showcase_app domain = com_example_showcaseapp.user_logic_d name = com.example.showcaseapp:user_logic levelFrom = all
3 user = _app seinfo = showcase_app domain = com_example_showcaseapp.ads_d name = com.example.showcaseapp levelFrom = all
4 user = _app seinfo = showcase_app domain = com_example_showcaseapp.media_d name = com.example.showcaseapp:media levelFrom = all
```

**file_contexts:**

```plaintext
1 .*
2 files /confidential u:object_r:app_data_file:s0
u:object_r:com_example_showcaseapp.confidential_t:s0
3 files /ads_cache u:object_r:com_example_showcaseapp.ads_t:s0
```

**mac_permissions.xml:**

```xml
<!-- Placeholder for mac_permissions.xml content -->
```

**sepolicy.cil:**

```cil
(block com_example_showcaseapp
 ; creation of domain types
 (type core_logic_d)
 (call md_untrusteddomain (core_logic_d))
 (type user_logic_d)
 (call md_appdomain (user_logic_d))
 (type ads_d)
 (call md_appdomain (ads_d))
 (call md_netdomain (ads_d))
 (type media_d)
 (call md_appdomain (media_d))
 (typeattribute domains)
 (typeattributeset domains (core_logic_d user_logic_d ads_d media_d))

 ; creation of file types
 (type confidential_t)
 (call mt_appdatafile (confidential_t))
 (type ads_t)
 (call mt_appdatafile (ads_t))

 ; bounding the domains and types
 (typebounds untrusted_app core_logic_d)
 (typebounds untrusted_app user_logic_d)
 (typebounds untrusted_app ads_d)
 (typebounds untrusted_app media_d)
 (typebounds app_data_file confidential_t)
 (typebounds app_data_file ads_t)

 ; grant core_logic_d access to confidential files
 (allow core_logic_d confidential_t (dir (search write add_name)))
 (allow core_logic_d confidential_t (file (create getattr open read write)))

 ; grant ads_d access to ads_cache files
 (allow ads_d ads_t (dir (search write add_name)))
 (allow ads_d ads_t (file (create getattr open read write)))

 ; minimum app_api_service subset
 (allow domains activity_service (service_manager (find)))
 (allow domains activity_task_service (service_manager (find)))
 (allow domains ashmem_device_service (service_manager (find)))
 (allow domains audio_service (service_manager (find)))
 (allow domains surfaceflinger_service (service_manager (find)))
 (allow domains gpu_service (service_manager (find)))

 ; grant core_logic_d the needed permissions
 (allow core_logic_d restorecon_service (service_manager (find)))
 (allow core_logic_d location_service (service_manager (find)))

 ; grant ads_d access to unity3ads needed services
 (allow ads_d radio_service (service_manager (find)))
 (allow ads_d webviewupdate_service (service_manager (find)))
 (allow ads_d autofill_service (service_manager (find)))
 (allow ads_d clipboard_service (service_manager (find)))
 (allow ads_d batterystats_service (service_manager (find)))
 (allow ads_d batteryproperties_service (service_manager (find)))
 (allow ads_d audioserver_service (service_manager (find)))
 (allow ads_d mediaserver_service (service_manager (find)))

 ; grant media_d the needed permissions
 (allow media_d autofill_service (service_manager (find)))
 (allow media_d cameraserver_service (service_manager (find))))
```

This structured and detailed presentation should make the text more clear, coherent, and professional.