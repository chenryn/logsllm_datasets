connected through a Frame Relay over High Speed Serial Interface 
(HSSI),  which  is  a  standard  interface  for  high-speed  (up  to  52 
Mbps)  serial  connections  over  WAN  links.  The  two  routers  are 
connected  directly  using  a  HSSI  Null  modem  cable.  The  third 
router, router 3, is connected to router 2 using Frame Relay over 
V.35.  
3.2.1.1  Workstation Configurations 
The workstations used for the video server and for the video 
client are running the Microsoft Windows™ operating systems. A 
higher  end  system  was  allocated  to  the  video  client  because  the 
combination  of  real-time  decoding  of  the  received  video  streams 
and the storing of the resulting large  volume of data on the hard 
disk  proved  to  require  significant  resources.  Specifically,  with  a 
frame  size  of  320x240  pixels,  the  size  of  a  decoded  frame  in 
BigYUV  format  comes  to  153.6  kbytes  or  1.2  Mbits.  Given  a 
frame  playout  rate  of  30  frames  per  second,  this  imposes  some 
reasonably  stringent  speed  constraints  on  the  hard  disk  of  the 
receiving client system (about 35.16 Mbps). 
(cid:137)                                                                        
5  A  shaper  is  a  token  bucket,  which  instead  of  simply  dropping 
(policing) non-conformant packets, is configured to delay them 
until the earliest time at which they are deemed conformant. 
Hub 
Video  Server 
Video Client 
Router 1 
Router 2 
Linux Router 
w/ 2 Eth. 
Hub 
FR over 
HSSI 
Hub 
Router 3 
FR over 
V.35 
Figure 4. Sample Configuration of the Local Testbed. 
In  the  local  testbed,  the  video  server  that  was  used  in  our 
quality assessment experiments was the Microsoft Windows Media 
Technologies™ 
the  Microsoft 
proprietary  media  streaming  protocol  called  Microsoft  Media 
Streaming™  (MMS).  The  protocol  uses  a  TCP  connection  for 
sending  and  receiving  media  control  commands,  and  a  UDP  or 
TCP connection for streaming the data.  
(WMT)  server,  which  uses 
The Linux workstation shown on the left-hand side of Figure 
4 is running RedHat™ 6.0 and was configured to act as  a router 
that  was  used  to  perform  traffic  shaping  in  some  of  our 
experiments. The use of a shaper prior to the router responsible for 
implementing  the  token  bucket  in  charge  of  policing  the  video 
traffic was motivated by the relatively bursty characteristics of the 
traffic generated by the video server (see Section 4.2). 
3.2.1.2  Router Configurations 
The  two  major  aspects  of  the  router  configurations  are  the 
parameters  of  the  frame  relay  interfaces  and  the  configuration  of 
the policy component responsible for traffic policing.  
Frame Relay Interfaces Configuration 
Bc 
Be 
I/F Type 
CIR 
2*106 
2*106 
2*106 
2*106 
2*106 
2*106 
2*106 
2*106 
Router # 
2 
1 
3 
I/f # 
FR 1 
FR 0 
FR 1 
FR 1 
0 
0 
0 
0 
V.35 
HSSI 
HSSI 
V.35 
Table 1. Configurations of the Frame Relay Interfaces. 
The  configuration  of  the  frame  relay  interfaces  on  the  three 
routers is given in Table 1, which specifies for each interface the 
values  used  for  the  three  parameters  required  by  frame  relay: 
Committed  Information  Rate  (CIR),  Committed  Burst  Size  (Bc), 
and  Excess  Burst  Size  (Be).  The  main  purpose  of 
the 
configurations  used  was  to  emulate  a  set  of  constant  rate  links 
connecting the different routers.  Note that all CIR values were less 
than  the  maximum  transmission  speed  allowed  over  the  V.35 
Interface  (E1),  which  was  the  main  bandwidth  bottleneck  of  the 
system. 
Support for different levels of service was provided through a 
simple priority queue structure, with the high priority queue being 
assigned to traffic marked with the EF DSCP. 
Policy Configuration 
Diff-Serv policies were configured on routers 1 through 3.  A 
policy specifies a “profile” that identifies the packet to which the 
policy  applies,  and  an  action  that  determines  the  treatment  that 
these packets are to receive.  At router 1, the profile specifies the 
source address of the  video server and the destination address of 
the video client, which will then trigger the creation of a classifier 
entry at the router to extract the corresponding set of packets.   The 
output of the classifier is connected to a policer that is responsible 
for marking conformant packets with the EF DSCP (101100) and 
for  forwarding  them  to  the  router’s  high  priority  queue.  The 
policer’s  configuration  information  includes  parameters  such  as 
token rate and token bucket depth, as well as the treatment of non-
conformant packets.  Given our focus on a service based on the EF 
PHB, the policer was configured to drop packets that it did not find 
conformant.  As mentioned earlier, this was meant to allow us to 
assess  the  impact  that  such  “hard”  policing  actions  had  on  the 
quality of the received video. In addition, the token bucket depth 
was typically set to two link MTUs in order to limit the size of the 
burst  that  was  allowed  to  enter  the  network.  The  impact  of 
dropping  non-conformant  packets  was  assessed  with  and  without 
the  Linux  router  performing  a  shaping  function. 
  Policy 
specification at routers 2 and 3 was simpler, as it only amounted to 
classifying  packets  marked  with  the  EF  DSCP  and  forwarding 
them to the high priority queue at the router. 
3.2.2  QBone Testbed  
The QBone [25] is an inter-domain Diff-Serv testbed aimed at 
exploring  the  benefits  of  service  differentiation  on  a  wide  area 
scale. QBone participants are considered to form Diff-Serv enabled 
domains that are in turn connected to the QBone, with which they 
agree  on  Service  Level  Specifications  (SLS’s)  that  define  how 
traffic is classified, policed, and forwarded at boundary nodes. The 
edge routers located at the ingress boundary nodes are responsible 
for enforcing SLS’s. The QBone currently offers one service, the 
QBone  Premium  service  that  is  based  on  the  simplex  Abilene 
Premium  Service  (APS),  which  is  built  on  the  Expedited 
Forwarding (EF) PHB. The SLS for the service was in the form of 
a token bucket that specified peak rate and maximum burst size. At 
the time our experiments  were carried out, the APS test program 
was in its early phase and the Abilene network was lightly loaded, 
so 
the  APS  service  was 
implemented  simply  by  means  of  over-provisioning.  As  of  this 
writing,  service  support  has  been  upgraded  to  also  provide 
preferential forwarding treatment to EF packets within the Abilene 
backbone.  
that  except  at  boundary  nodes, 
Figure 5 provides an overview of the connectivity across the 
QBone between our local testbed and a remote site.  A video server 
(Video Charger) was located at the remote site and used to stream 
across the QBone different video clips to a video client located in 
the local testbed.  The packets generated by the server  were pre-
marked as EF packets by the server and were policed at the border 
Cisco  router  of  the  remote  site.    Policing  was  performed  using 
Cisco’s Committed Access Rate6 (CAR), which was configured to 
drop  packets  that  exceeded  the  APS  profile.  Experiments  were 
conducted  using  various  APS  profiles  with  different  token  rates 
and token depth values, as shown in Section 4.1. 
(cid:137)                                                                        
6 For a brief introduction to CAR, please refer to [10]. 
Campus #1 
UUNET 
Campus #4 
3Com CB3500 
Campus #2 
MAGPI 
backbone 
Router 
Campus #3 
FORE ASX1000 
Cisco 7507 
Cisco 7507 
Cisco 7507 
FAST E/N 
Abilene 
QBone 
Cisco 
QWEST 
Cisco 
Cisco ATM Switch 
Indianapolis 
NOC 
MREN 
Gigapop 
FAST E/N 
3com corebuilder 
Local testbed 
Cisco 7507 
Switch 
Video Charger 
Remote 
site 
Figure 5. Connectivity Configuration Across the QBone. 
3.3 Video Clip Properties 
Two video clips, called Lost and Dark in the rest of the paper, 
with different scene characteristics were used in our experiments.  
They were obtained from the trailers of two motion pictures, and 
were  re-encoded  using  two  different  encoding  formats  (MPEG-1 
and WVM) and a variety of encoding parameters corresponding to 
different  levels  of  video  “quality.”  The  clips  were  uploaded  to 
different servers and streamed to clients using a number of network 
service  configurations,  i.e.,  specifying  different  token  bucket 
parameters.  The  MPEG-1  versions  of  the  clips  were  used  for 
experiments carried out over the QBone, and they were uploaded 
to the video charger server located at the remote site. The WVM 
format  clips  were  used  with  the  Windows  media  technologies 
server in our local testbed experiments. 
3.3.1  MPEG-1 Clips 
The two clips were encoded using a constant bit rate setup for 
three different rate values 1M, 1.5M, and 1.7M, and a fixed frame 
size of 320x240. The three rate values produced videos of different 
qualities  but  potentially  better  suited 
to  different  network 
configurations, i.e., token rates.  Note that the MPEG servers we 
used  do  not  support  multi-rate  encoding,  i.e.,  the  ability  to 
dynamically  select  a  given  video  quality  when  multiple  copies 
encoded at different rates are available.  As a result, and although 
we  expect  such  a  capability  to  be  available  in  future  MPEG 
servers, this means that once a given encoding has been selected, it 
is  the  only  one  used  for  the  remainder  of  the  experiment.  The 
characteristics  of  the  two  clips  are  summarized  in  Table  2  and 
Figure  6.  The  table  gives  the  characteristics  of  the  encoding 
process and its output (the rate information is computed after every 
frame  using  the  MPEG_stat  tool),  while  Figure  6  displays  rate 
information for what is actually transmitted to the network.  
As can be seen from both the table and the figure, although a 
constant rate encoding was used, the resulting output still exhibits 
significant variations, as illustrated through the differences 
between minimum, average, and maximum rate values in the table 
and the range of transmission rates found on the figure.  
Bytes read  frames  Length  Avg. Frame size 
Clip Lost 
Rate Information in bps 
Max 
Avg. 
Min 
15276442  2150  71.74 s  7101 bytes + 4 bits  2047496  1702659.43  128640 
13453779  2150  71.74 s  6253 bytes + 6 bits  1835320  1499402.84  117976 
8970075  2150  71.74 s  4168 bytes + 2 bits  1263464  999396.85  87744 
Clip Dark 
Encoding 
rate 
1.7M 
1.5M 
1M 
rate 
1.7M 
1.5M 
1M 
Encoding 
Bytes read  frames  Length  Avg. Frame size 
Rate Information in bps 
29975812  4219  140.77 s  7101 bytes + 2 bits  2038840  1702624.58  153152 
26399218  4219  140.77 s  6253 bytes + 5 bits  1789408  1499371.64  139088 
17600951  4219  140.77 s  4168 bytes + 1 bits  1155672  999378.16  97592 
Table 2. MPEG Encoding Properties of Clips Lost and Dark.
Max 
Avg. 
Min 
 Figure  6  also  illustrates  the  impact  of  the  differences  in 
scenery between the two video clips, with the high motion content 
of the clip Dark translating into greater rate fluctuations (especially 
towards  the  end  of  the  clip).    We  expected  those  fluctuations  to 
have some impact on the interactions between the policer used for 
different configurations and the resulting video quality. 
  Dark Clip transmitted bit rates for different encoding rates 
encoding rates 
Dark 1.7 M 
Dark 1.5 M 
Dark 2.25 M 
Dark 1M 
2600000 
2100000 
1600000 
1100000 
600000 
)
s
p
b
(
e
t
a
r
t
i
B
1 
392  783  1174 1565 1956  2347 2738 3129 3520 3911 
Frame 
Lost 2.25 M 
Lost 1M 
Lost 1.7 M 
Lost 1.5 M 
encoding rates 
Lost Clip transmitted bit rates for different encoding rates 
2600000 
2100000 
1600000 
1100000 
600000 
)
s
p
b
(
e
t
a
r
t
i
B
1  177  353  529  705  881 1057 1233 1409 1585 1761 1937 2113 
Frame 
Figure 6. Instantaneous Transmission Rates of MPEG-1 Clips 
for Different Encoding Rates. 
3.3.2  Windows Media Encoded Clips 
The  properties  of  the two  clips encoded using  the  Windows 
Media™ encoder are summarized in Table 3. The encoder allows 
the  specification  of  several  encoding  parameters,  including  the 
desired bandwidth. However, the resulting encoding produced by 
selecting a given bandwidth value is not a constant rate encoding, 
and instead corresponds to a maximum bandwidth value. This can 
be  seen  by  comparing  the  expected  and  average  rates  values  in 
Table  3.  Note  that  the  WMV  format  supports  the  multi-rate 
encoding  feature  mentioned  earlier,  and  we  used  it  in  some 
experiments.  Note  also  that  the  encoder  does  not  encode  video-
only content, so that both audio and video had to be accounted for. 
In order to minimize the effect of the additional audio packets, we 