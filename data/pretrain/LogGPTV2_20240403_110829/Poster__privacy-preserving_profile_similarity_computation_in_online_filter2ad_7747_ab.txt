vc , g
g
3. Re-encrypt [Qb(x)]P Kd to get [Qb(x)]P Ka , which is
vb¬∑H0(uc) ¬∑ ub;
rj¬∑H0(ub) ¬∑ tj , H1(tj) + qj ; g
rj1 , g
(g
vc , g
g
vc¬∑H0(ud) ¬∑ uc; g
vd, g
vb , g
vd¬∑xa ¬∑ ud).
The OSN sends [Qb(x)]P Ka to Alice, who can recover
Qb(x) using her private key xa.
Stage 2) Two-Party ProÔ¨Åle Similarity Computation
In this phase, Alice and the OSN (representing Bob) run
a two-party private set intersection protocol, which is an
adapted version of that proposed by Freedman et al. [3], to
compute the proÔ¨Åle similarity. Note that, Alice possesses
Qb(x) and the OSN possesses Rb(x) of Bob.
The protocol runs as follows (steps 5-7 in Figure 1).
1. The OSN creates a new ephemeral key pair for the
Paillier cryptosystem [6]. Let the public/private key
pair be (EKs, DKs) and the message space be Zs.
Then, the OSN encrypts Rb(x) using EKs to obtain
[Rb(x)]EKs. Note that, the encryption means encrypt-
ing every coeÔ¨Écients of Rb(x). Finally, the OSN sends
[Rb(x)]EKs to Alice.
2. Recall that Alice‚Äôs hashed attributes are ha,i (1 ‚â§ i ‚â§
na). With [Rb(x)]EKs, Alice computes [Rb(ha,i)]EKs
based on the homomorphic property of Paillier cryp-
tosystem (details can be found in [3]). Since Alice
possesses Qb(x), she can compute Qb(ha,i) for 1 ‚â§
i ‚â§ na. Based on the homomorphic property of Pail-
lier cryptosystem, for 1 ‚â§ i ‚â§ na, Alice can compute
[Fb(ha,i)]EKs , where
[Fb(ha,i)]EKs = [Rb(ha,i)]EKs ¬∑ [Qb(ha,i)]EKs .
794

o
o
o
o


/
/
o
o
o
o
Then, Alice creates a new ephemeral key pair for the
Paillier cryptosystem [6]. Let the public/private key
pair be (EKa, DKa) and the message space be Za. For
1 ‚â§ i ‚â§ na, Alice generates [[Fb(ha,i)]EKs ]R, which is
a randomized version of [Fb(ha,i)]EKs , as follows:
(cid:5)
i]EKs
[[Fb(ha,i)]EKs ]
= ([Fb(ha,i)]EKs )
= [Fb(ha,i) ¬∑ yi + y
yi ¬∑ [y
(cid:5)
i]EKs
R
(cid:5)
where yi and y
i are randomly chosen values.
Finally, Alice sends [[Fb(ha,i)]EKs ]R and [‚àíy
1 ‚â§ i ‚â§ na to the OSN.
(cid:5)
i]EKa for
3. For 1 ‚â§ i ‚â§ na, the OSN decrypts [[Fb(ha,i)]EKs ]R to
(cid:5)(cid:5)
i is
(cid:5)
i, and computes Ri, where y
obtain Fb(ha,i) ¬∑ yi + y
randomly chosen and
Ri = ([Fb(ha,i) ¬∑ yi + y
i]EKa ¬∑ [‚àíy
(cid:5)
= [Fb(ha,i) ¬∑ yi ¬∑ y
(cid:5)(cid:5)
i ]EKa
(cid:5)
i]EKa )
y(cid:2)(cid:2)
i
Then, the OSN sends a permuted version of Ri (1 ‚â§
i ‚â§ na).
4. With the permuted version of Ri (1 ‚â§ i ‚â§ na), Al-
ice decrypts all of them and count the number of ‚Äù0‚Äù.
Based on this number, which represents the size of
joint set of attributes, Alice makes a decision whether
she wants to add Bob as a friend or not.
2.3 Properties of the Solution
Assume that every user communicates with the OSN through
a secure channel such as SSL/TLS. Based on this assump-
tion, our solution achieves the following desirable properties.
‚Ä¢ It supports oÔ¨Ñine users (say Bob in the solution) by
using the OSN as a proxy. This has the additional ben-
eÔ¨Åt of preventing (popular) users from being spammed
with computation requests.
‚Ä¢ The proÔ¨Åle privacy of Alice is guaranteed by the proto-
col. In the solution, Alice reveals [[Fb(ha,i)]EKs ]R and
[‚àíy
i]EKa for 1 ‚â§ i ‚â§ na. Suppose that the OSN is a
(cid:5)
semi-honest, it learns nothing about Alice‚Äôs attributes
ha,i (1 ‚â§ i ‚â§ na). Certainly, Bob and any other users
learn no information.
‚Ä¢ The proÔ¨Åle privacy of Bob relies on splitting the poly-
nomial Fb(x) into Qb(x) and Rb(x) and grant them
to Alice and the OSN separately. The OSN possesses
Rb(x) but does not have access to Qb(x) which is pro-
tected by the re-encryption scheme described in Stage
1 in the proÔ¨Åle similarity computation. Alice pos-
sesses Qb(x) but has no access to Rb(x). Note that
neither Qb(x) nor Rb(x) alone will reveal any infor-
mation about Bob‚Äôs hashed attributes. Furthermore,
based on the security of the adapted protocol from [3],
if the OSN is semi-honest, we can conclude that nei-
ther the OSN nor any other user will learn anything
about Bob‚Äôs hashed attributes.
3. RELATED WORK
Tang [7] proposed a privacy-preserving proÔ¨Åle matching
protocol based on fuzzy extractor and CAPTCHA. The draw-
back of this approach is that a semi-honest can recover infor-
mation about users‚Äô attributes if it can solve the employed
CAPTCHA scheme. There are works which attempt to pro-
tect user information in OSNs, although they do not di-
rectly tackle with privacy-preserving proÔ¨Åle matching solu-
tions. Some of them are the following. Lucas and Borisov [5]
proposed to use public key encryption to send messages be-
tween users based on proxy re-encryption techniques. Guha
et al. [4] proposed to mix user information across proÔ¨Åles to
minimize the link-ability of information, while leaving users
with no way to verify proÔ¨Åle correctness, unless some infor-
mation is already known. Tootoonchian et al. [8] proposed
to store proÔ¨Åle information at a trusted place and access is
then controlled using relationship certiÔ¨Åcates.
4. CONCLUSION
We propose a solution for a pair of OSN users to com-
pute their proÔ¨Åle similarity. Our solution gives users a new
option in searching for new friends without losing their pri-
vacy over their private data. A detailed discussion of our
solution will be given in the full paper. If the OSN is not
semi-honest, then it may try to collude with Bob‚Äôs friends.
In this case, the OSN will be able to recover Bob‚Äôs hashed
attributes, based on which a brute-force attack will reveal
the attributes. How to deter a malicious OSN is an inter-
esting future work. In addition, if many users initiate the
protocol, the OSN needs to perform a lot of ElGamal re-
encryption and Paillier encryption/decryption. This may
become a burden, and how to improve the eÔ¨Éciency is an-
other future research topic.
5. REFERENCES
[1] F. Benevenuto, T. Rodrigues, M. Cha, and V. A. F.
Almeida. Characterizing user behavior in online social
networks. In Internet Measurement Conference, pages
49‚Äì62, 2009.
[2] T. ElGamal. A public key cryptosystem and a
signature scheme based on discrete logarithms. In G. R.
Blakley and D. Chaum, editors, CRYPTO ‚Äô84, volume
196 of LNCS, pages 10‚Äì18, 1985.
[3] M. J. Freedman, K. Nissim, and B. Pinkas. EÔ¨Écient
private matching and set intersection. In EUROCRYPT
‚Äô04, pages 1‚Äì19, 2004.
[4] S. Guha, K. Tang, and P. Francis. Noyb: privacy in
online social networks. In Proceedings of the Ô¨Årst
workshop on Online Social Networks, pages 49‚Äì54,
2008.
[5] M. M. Lucas and N. Borisov. Flybynight: mitigating
the privacy risks of social networking. In Proceedings of
the 7th ACM workshop on Privacy in the electronic
society, pages 1‚Äì8, 2008.
[6] P. Paillier. Public-key cryptosystems based on
composite degree residuosity classes. In EUROCRYPT
‚Äô99, pages 223‚Äì238, 1999.
[7] Q. Tang. User-friendly matching protocol for online
social networks. In Proceedings of the 17th ACM
conference on Computer and communications security,
pages 732‚Äì734, 2010.
[8] A. Tootoonchian, S. Saroiu, Y. Ganjali, and
A. Wolman. Lockr: better privacy for social networks.
In Proceedings of the 5th international conference on
Emerging networking experiments and technologies,
pages 169‚Äì180, 2009.
795