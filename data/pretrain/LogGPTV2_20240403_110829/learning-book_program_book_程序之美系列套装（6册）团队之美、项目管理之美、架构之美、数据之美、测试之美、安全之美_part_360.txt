30000
click_ok
steditsunnarytextarea
type_ok
steditsummarytextarea
my friends %
%start_time%
%快速纵览
click_and_wait
stsavebuttonlink
备注
测试用例：编辑摘要
创建第二个编辑摘要
Open_0k
/%%workspace%%/index.cgi?Edit Summaries
%%a11e15%%
wait_for_element_visible_ok
steditbuttonlink
30000
click_ok
steditbuttonlink
wait_for_element_visible_ok
stsavebuttonlink
30000
wait_for_element_visible_ok
link=wiki Text
30000
Click_ok
link=wiki Text
wait_for_element_visible_ok
wikiwyg_wikitext_textarea
30000
2051
---
## Page 2053
备注
测试用例：编辑摘要一
输入第二个摘要
wait_for_element_present_ok
steditsummarytextarea
30000
click_ok
steditsummarytextarea
type_ok
wiliteet %
T已经被创建了
备注
澳试用例，.编辑要
辑要
创建一个编
onep-nkun
xk3ainxct
maries..
1%%start time%
80/
ksfruelezene.sibloeuk-seearuoaeedhrl.
-scearoocconl
wait_for_element_visible_ok link=Wiki Text
S0R00
clickok
link=Wiki Te
xt
ikitext..textarea.
130000.
walf_for_elemenf..vi sible_ok.uikiwer,
ifnruelerentvsibleokukcs
rebutteeliek..
“省注
wait_for_element_pres
ent_ok | steditsummarytextarea
[30000
clickok
steditsu
arytextarea
I <teditsurmaxytevtare2.
1tvogok
mx.frieods..%
%start time
关于这个测试类型有几个特点：所有的HTML元素都有一个识别名，
如st-save-button-link，软件一直运行寻找链接并查看相应的值。为了
找到那些识别名我需要使用一种工具4“检查"用户界面，或者与开
发者合作在编写代码之前拟定好名字。
因此整个过程是创建一个测试（即一个wiki页面）、运行测试、看
着它运行失败、修改、再次运行。在这个例子中我们看到有几个死
角和重新调取，正如我放弃一个测试用例而采用另一个测试用例一
样，或者针对代码进行调试。不管怎么说我可能要为写一个自动调
试的某个功能而用上一天的时间。而这个功能如果用手工测试，在
任何浏览器上都不会超过一个小时。我没有将这个例子作为一个极
端的例子提出来因为这个问题太普遍了。不仅如此，这个wikitest也
不够聪明，不能辨别一个编辑摘要是否太宽、下移太突然或颜色有
误。但好在它允许在很短的时间里处理一定的覆盖基准，使我们可
以加快选代的过程。
2052
---
## Page 2054
wikitest的输出看起来像这样：
#st-login:PI:EMAIL,d3vnu11l,test-data-
/nlw/login.html?redirect_to=%2Ftest-data%2Findex.cgi
ok 1-open/nlw/login.html?redirect_to=%2Ftest-data%2Findex.cgi
ok 2-type,username,PI:EMAIL
ok 3-type,password,d3vnu111
ok 4-click,id=login_btn,log in
ok 5-wait_for_page_to_load,60000
#
#comment:Test Case:Edit Summaries
#Set'pt'to'5000
#
#comment: Test Case:Edit Summaries-create a page from fle,because we
cant
type
#newlines with type_ok st-admin update-page--workspace test-data--email
#wikitester@kensocialtext.net--page"Edit Summaries 1234802223"
#</opt/wikitest_fles/wikitest_toc.txt
ok 6-st-admin update-page--workspace test-data--email
PI:EMAIL
--page"Edit Summaries 1234802223"</opt/wikitest_fles/wikitest_toc.txt
ok 7-open,/test-data/index.cgi?Edit Summaries 1234802223
2053
---
## Page 2055
ok 8-click,st-edit-button-link
ok 9-wait_for_condition,try{selenium.isTextPresent(Editing:Edit
Summaries
1234802223)?true:false}catch(e){false},55000
ok 10-wait_for_condition,try{seleniumisVisible(st-save-button-link')?
true:
false}catch(e){false},30000
ok 11-wait_for_condition,try{selenium.isElementPresent('st-edit-summary
text-area')
?true:false/catch(e)false},5000
ok 12-click,st-edit-summary-text-area
ok 13-type,st-edit-summary-text-area,Quick Summary for my friends
ok 14-click,st-save-button-link
ok 15-wait_for_condition,try{selenium.isElementPresent('st-edit-button-
link')?
true:false}catch(e){false},30000
ok 16-click,st-edit-button-link
ok 17-wait_for_condition,try{selenium.is Visible('st-save-button-link')?
true:
false}catch(e){false},55000
ok 18-wait_for_condition,try{selenium.isElementPresent('st-edit-
summary-text-area')
?true:false}catch(e){false},30000
ok 19-click,st-edit-summary-text-area
ok 20-type,st-edit-summary-text-area,A second summary for a wikitest
2054
---
## Page 2056
ok 21-click,st-save-button-link
ok 22-wait_for_condition,try{seleniumisVisible('st-edit-button-link')?true
falsecatch(e)false},60000
ok 23-click,//a[@id='st-watchlist-indicator’],clicking watch button
ok 24-wait_for_condition,tryseleniumisVisible(link=3Revisions')?true
false}catch(e){false},60000
#
#comment:Test Case:Edit Summaries Revision History
ok 25-click,link=3 Revisions
#comment:Test Case:EditSummaries teardown
#st-admin purge-page --workspace test-data --page
edit_summaries_1234802223
edit_summaries_1234802223
#
#comment:Test case:Edit Summaries COMPLETED
1..26
如果失败了，软件会说：“看起来你的Y测试的X没有成功"或“测试X
后失败”。我们使用一种工具，名为tap2html，来总结测试结果，从
而使我们能够一目了然地查看10000个测试步骤的结果，并且在有必
要的时候查看细节。
虽然我们有一些卡壳的测试数据（用来搜索、观察页面等），每个
测试都设计成为独立运行的测试。但也可以将wikitests编成测试组，
因此使一个系列中的wikitest和其他的wikitest的链接变得可能。在用
wikitest做回归测试中，我们先运行一个测试组，将测试结果导入到
2055
---
## Page 2057
一个文件中，然后查找“不好”、“错误”、“警告"或其他信息。（是
的，我们有一些标准文件可以处理错误并告诉我们哪些测试失败
了，还有一个观察器可以将ASCI文本转换成在浏览器显示的图
示。）
[1]Linux、Apache、My SQL、Perl——LAMP。
[2]重读这一章时我对自己没有很好地描述我们为了探索性测试所花
的时间和努力而感到失望，不过我确实想要概括Socialtext中最有特
点、特殊和美丽的部分。我相信这本书的其他作者会弥补了我的这
一遗憾。
[3]几年前，BretPetichord在教授一门关于自创测试自动化的课程，
在这个课程中他提到了一个测试自动化框架的风格。我认为wikitests
就是使用这种风格开发出来的已知最先进的测试框架之一。这个框
架将开放源代码的和自已开发的组件连在一起。框架的浏览器驱动