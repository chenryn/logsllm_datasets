I am currently in the process of converting a Perl/Bash tool into a Salt module, and I am seeking advice on how to synchronize the non-Python components of this module with my minions. My goal is to run Salt in an agentless manner, and ideally, I would like the dependencies to be automatically synchronized alongside the module when it is called via `salt-ssh`. However, it seems that only Python scripts are synced by default.

### Proposed Solution

To achieve a clean and efficient solution, you can follow these steps:

1. **Deploy Non-Python Components:**
   - Use a `file.managed` or `file.recurse` state to deploy the non-Python components (e.g., Perl and Bash scripts) to the minions. This ensures that the required files are present on the target systems.
   - Example state configuration:
     ```yaml
     /path/to/non-python-components:
       file.recurse:
         - source: salt://non-python-components
         - user: root
         - group: root
         - mode: 755
     ```

2. **Custom Execution Module:**
   - Implement a `__virtual__()` function in your custom execution module. This function should check for the presence of the non-Python dependencies. If the dependencies are not found, the function should return `False`, preventing the module from being loaded.
   - Example `__virtual__()` function:
     ```python
     def __virtual__():
         if os.path.exists('/path/to/dependency'):
             return True
         else:
             return (False, 'The required non-Python dependencies are missing.')
     ```

3. **Synchronize Custom Modules:**
   - Use the `saltutil.sync_modules` function to sync your custom modules to the minions. This function will also re-invoke the loader to update the available execution modules on the minion.
   - If the non-Python dependencies are deployed after the initial sync, running `saltutil.sync_modules` again will reload the custom modules. The `__virtual__()` function will then ensure that the module is only loaded if the dependencies are present.

### Summary

By using a combination of state management to deploy the non-Python components and a `__virtual__()` function to check for their presence, you can ensure that your custom Salt module is only loaded and used when all necessary dependencies are available. This approach provides a clean and maintainable solution for synchronizing both Python and non-Python parts of your module.

If you have any further questions or need additional assistance, feel free to ask!