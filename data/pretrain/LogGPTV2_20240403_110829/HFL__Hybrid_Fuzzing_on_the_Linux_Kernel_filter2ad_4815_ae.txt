21
22
23
24
25 }
Fig. 11: Code snippet leading to a crash in kernel memory allocation
ptr = kmalloc(sizeof(struct fd_raw_cmd), GFP_KERNEL);
ret = copy_from_user(ptr, param, sizeof(*ptr));
...
// BUG!! A large value of "ptr->len" can cause
// out of memory in the following function
ptr->krn_data = (char *)fd_dma_mem_alloc(ptr->len);
int cmd, long param)
struct fd_raw_cmd *ptr;
...
switch (cmd) {
case FDRAWCMD:
{
// tight branch condition
...
rules) that are written by labor-intensive manual analysis [46].
Under the assumption that those template rules are well-crafted
so as to cover all of the HFL’s features, we serve it as the
upper bound for this limited study despite its inherent scalability
limitation.
The experiment result is presented in Figure 12. Note that, in
the figure, we represent both features, syscall sequence inference
and argument interfaces retrieval, in a single line (F-C) because
they are correlated i.e., depend on each other on their execution
path. As expected, HFL equipped with all the features (HL)
exhibits the high coverage improvement over the others, and its
result is even close to that of the template-based case (100%).
Interestingly, for the two cases (i.e., ext4 and rds), we noticed
ours even outperforms the template results (i.e., over 100%).
According to our analysis, this is because their manual rules
are either still in progress or not well-crafted enough. This
apparently tells, unlike automatic and accurate nature of HFL,
writing manual rules by human-effort is subject to error-prone
as well as time-consuming task. Another notable observation is
that the hybrid feature (F-H) makes a significant contribution
to the overall coverage enhancement although other features
12
01020304050Time (hours)0100002000030000400005000060000# code blocksHFLkAFLS2ESyzkallerTriforceAFLMoonshine01020304050Time (hours)050001000015000200002500030000# code blocks01020304050Time (hours)050001000015000200002500030000# code blocks01020304050Time (hours)05000100001500020000# code blocksTestcase
Category
F-H
F-I
F-C
ppp
ext4
rds
Drivers
File system
Network
(cid:8)
(cid:8)
(cid:8)
(cid:8)
(cid:8)
TABLE VI: HFL’s feature requirements for improving coverages
with respect to selective 3 test cases. F-H and F-I denote the features
of hybrid-approach and handling indirect control-flow, respectively.
F-C represents a combined feature of both syscall sequence inference
and argument interface retrieval.
struct rds_info_iterator *iter, struct rds_info_lengths *lens);
1 #define RDS_INFO_FIRST 10000
2
3 typedef void (*rds_info_func)(struct socket *sock, int len,
4
5
6 rds_info_func rds_info_funcs[RDS_INFO_LAST - RDS_INFO_FIRST +1];
7
8 int rds_info_getsockopt(struct socket *sock, int optname,
9
10 {
11
12
13
14
15 }
func = rds_info_funcs[optname - RDS_INFO_FIRST];
...
func(sock, len, &iter, &lens);
...
char __user *optval, int __user *optlen)
Fig. 13: An indirect control-flow in RDS network.
(a) ext4
(b) rds
(c) ppp
Fig. 12: Feature-specific coverage result for 3 test cases. F-N is a
baseline fuzzer (absence of HFL features) while HL indicates HFL
equipped with all of the features. For each test case, an appropriate
system call rule is used for its upper limit (100%).
are still in demand. The reason is that on their execution path,
other features heavily depend on the hybrid feature though
hybrid feature alone barely reaches the maximum coverage.
In other words, certain code blocks to be addressed by other
features only appear when a strict branch condition, lying on
the path at an earlier stage, is resolved by the hybrid feature.
In summary, we emphasize that all of HFL’s features, rather
than exclusively applying separate feature, are essential for
accomplishing the maximum coverage. In addition, full featured
HFL presents outstanding coverage improvement (even better
than loosely written syscall templates) without ongoing manual
efforts.
2) Per-feature Case Studies: In this section, using concrete
examples found during the per-feature experiment above, we
demonstrate and highlight the superiority of HFL in detail,
compared with exiting kernel fuzzing schemes.
Figure 13 presents a piece of code in RDS network, where
a control-flow transfer through function pointer table (line 11)
is a practical obstacle against high execution coverage. As
mentioned, random fuzz testing does not work well against
such an indirect control transfer pattern. Observe that an
extra operation on a variable flowing towards the array index
(i.e., optname - RDS_INFO_FIRST) makes the fuzzer more
difficult to hit all underlying function blocks. On the other hand,
through the control-flow conversion, HFL correctly guesses
and takes all elements of the array rds_info_funcs, thereby
exploring underlying functions behind them.
In Figure 14, we showcase a simplified code, in which a
calling sequence between two different ppp ioctls (PPPNEWUNIT
and PPPCONNECT) is a prerequisite to operate correctly, leading
to promoting coverage performance. Since IMF [33] relies
on execution logs, such an internal dependency in the kernel
break;
break;
...
// write the VAL toward userspace
if (put_user(unit, arg))
// allocate an VAL to unit
err = ppp_create_interface(net, file, &unit);
if (err unit)
// [NOTE]: VAL is read from untyped syscall argument
case PPPCONNECT:
ppp = ppp_find_unit(pn, unit);
// [FAIL]: return if (untyped) value dependency is violated
if (!ppp)
// read VAL from userspace
if (get_user(unit, arg))
break;
/* main connection procedure */
...
goto out;
// check the VAL for dependency
is untraceable. Further, the corresponding argument types are
too implicit to figure out in user domain. Moonshine [33] is
capable of learning this dependency of the kernel object (i.e.,
unit) through offline static analysis on the kernel. Unlike
HFL, however, it still suffers because they overlook the value
flow caused by the dependency, going to/coming from syscall
arguments (line 13 and 21). As a result, the execution likely
terminates at line 25 due to inconsistent value (i.e., VAL)
between the two ioctl’s arguments.
A code snippet in Figure 15 assumes that a syscall argument
arg is structured in a nested format whose size is determined
by data.len at runtime. To reach the deepest code path,
HFL identifies such a nested format by observing the function
invocation at line 11 and 15, and successfully constructs the
required structure with a valid size. Although DIFUZE [16]
attempts to retrieve such nested structure using static type
inference, it eventually fails as the type of the pointer member
remains unknown at static time (line 2).
13
F-NF-HF-IF-CHL020406080100Coverage (%)F-NF-HF-IF-CHL020406080100120F-NF-HF-IF-CHL020406080100// unknown typed inner buffer
struct ppp_option_data data;
__u8 __user *ptr;
__u32 len;
int transmit;
1 struct ppp_option_data {
2
3
4
5 };
6 int ppp_set_compress(struct ppp *ppp, unsigned long arg)
7 {
8
9
10
11
12
13
14
15
16
17
18 }
goto out;
goto out;
...
// inferred buffer layout: {..|..|..}
if (copy_from_user(&data, (void __user *)arg, sizeof(data)))
...
// inferred buffer layout: {..|..|ptr} --> {...}
if (copy_from_user(ccp_opt, (void __user *)data.ptr, data.len))
Fig. 15: Two-layered nested argument in PPP driver.
VII. RELATED WORK
Traditional Kernel Fuzzing. For software testing, numerous
research projects have been working on random fuzz testing
due to its efficiency and effectiveness [22, 26, 36, 38, 44, 52].
Trinity [27] and Syzkaller [46] are popular coverage-guided
system call fuzzers, targeting the Linux kernel. A recent kernel
fuzzer, IMF [24] aims to infer kernel system states by keeping
track of system call traces along with type information. Such
syscall trace-based inference has limitations in understanding
the true dependencies inside the kernel. Taking one step further,
Moonshine [33] is particularly focusing on retrieving internal
kernel dependencies through static analysis. However, such
statically collected traces suffer from false-positive issues, so
it is difficult to reason about internal system dependencies
correctly. Compared to these, HFL is able to distinguish true
dependencies through the validation during the kernel execution.
DIFUZE [16] employs static analysis to effectively fuzz device
drivers in the Android kernel. Although it is effective in a
specific domain, it is unable to be applied to dynamically
loaded modules and challenging to generalize. kAFL [40] aims
to support a fuzzing framework targeting various (including
closed-source) kernels, particularly supporting a hardware-
assisted code coverage measurement. HFL, on the other hand,
neither relies on imprecise static analysis results nor requires
the hardware support. Periscope [43] devises a device driver
fuzzer that is not related to system calls, but mutating input
space over I/O bus. Razzer [26] designs a combination scheme
of static and dynamic testing to effectively reach the points
where race bugs potentially occurs, then verifying true bugs.
Unlike HFL, however, those are difficult to be generalized due
to manual efforts for source code modification or limited scope
of analysis.
Symbolic Testing. There also have been a large body of
researches on symbolic execution [8, 11, 12, 14, 15, 20, 23,
37, 41, 42]. In particular, most of which try to overcome its
known weakness, state explosion. CAB-Fuzz [28] is designed
to use per-function concolic execution and edge case priority to
make it scalable. Similarly, UC-KLEE [37] performs symbolic
execution on individual functions rather than program entry
points, and filters out falsely catched crashes in a certain
manner. However, their effort to recover pre-context using
real app execution is limited to certain cases, and difficult to be
generalized whereas performing post-process validation seems
14
to work fine, but still yields false results.
Hybrid Fuzzing. Given their properties of fuzzing and
symbolic testing, some of research have studied to benefit
from both of them [32, 34, 44, 51, 53]. The early work
of which [32, 34, 44] introduces and demonstrates such a
powerful combination of the two schemes, highlighting its
good performance in bug-finding and code coverage. More
recent work places their focus on building more efficient hybrid
fuzzing. In particular, they strive to maximize the performance
of expensive symbolic engine [51] or boost symbolic execution
utilization by stoping it from being idle [53]. In fact, all of them
share the same insight as HFL in terms of collaboration of
random and symbolic testing. The key difference is such hybrid-
based work focuses only on application level testing, thus they
cannot address kernel specific challenges, which completely
hinder in-depth code block exploration in the kernel. With
respect to exploring narrow-condition branches, laf-intel [25]
is yet another method to tackle them. Without the help of the
symbolic checking, it is capable of satisfying such a branch
condition by breaking it down into multiple smaller branches,
each of which is relatively easy to explore. We believe laf-intel
is complementary to HFL, as each can benefit another in terms
of solving narrow-condition branches.
Static Analysis for OS Kernels. Static analysis techniques
have been extensively used to discover various types of
vulnerabilities in kernels [19, 31, 47, 48, 50]. Dr.Checker [31]
achieves soundy static analysis using the inter-procedural
approach in a limited set of kernel drivers. K-miner [19]
partitions the entire Linux kernel based on system call entry
points, and analyzes the partitioned components separately.
By tracking the flow of the code, it detects vulnerabilities
with multiple analysis passes. However, unlike HFL, such
a partitioned analysis does not fully understand relationships
between system calls, making global analysis difficult. Research
work [47, 50] statically analyze the code to find double-fetch
bugs in the Linux kernel, whereas LRSan [48] specifically
checks security-sensitive variables that can be modified after
the first security checking. Compared with HFL, all of these
techniques suffer from false positives, which would require
manual efforts to identify true positive ones.
VIII. DISCUSSION AND LIMITATIONS
Kernel’s Non-deterministic Behavior in Performing Sym-
bolic Analysis. In our study, we observed non-deterministic
program behaviors while performing symbolic analysis (see
§B). This is in fact caused by instances of structs located in
the kernel space, preventing the program path from reaching
hard-constraint branch points (remaining unexplored). Since
HFL is currently interested in fuzzing kernel space via syscall
APIs, we are unable to dictate such kernel instances directly.
Nonetheless, we expect to handle this as HFL proceeds to see
them in continuing code explorations.
Commercial Off-the-shelf Kernels. A few components of
HFL (e.g., kernel translation) are deployed during the compi-
lation phase. For this reason, for now, HFL does not support
source-free operating systems such as Windows. We believe
this could be overcome by adopting a sort of runtime analysis
technique (e.g., instrumentation) with extra efforts in the future.
IX. CONCLUSION
This paper presents HFL, a hybrid fuzzer for testing
kernels. We identified three key challenges that undermine the
efficiency of both fuzzing and symbolic executor, and design
HFL to resolve such challenges. As a result, HFL allows
us to bring hybrid fuzzing into kernel space effectively and
efficiently. Our evaluation result shows that HFL outperforms
each of the approaches, represented by Moonshine, Syzkaller,
TriforceAFL, etc, by achieving a higher coverage than them.
More importantly, in testing recent Linux kernels with HFL,
we found 24 previously unknown vulnerabilities and made/is
making them fixed in future releases.
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for
insightful comments which significantly improved the final
version of this paper. This work was partly supported by the
National Research Foundation (NRF) of Korea grant funded by
the Korea government(MSIT) (No. NRF 2019R1C1C1006095).
REFERENCES
[1] Https://kiwi.cs.purdue.edu/hfl/.
[2] “addr2line,” 2018, https://sourceware.org/binutils/docs/
binutils/addr2line.html.
[3] “Gcc,” 2018, https://gcc.gnu.org.
[4] “Kcov,” 2018, https://www.kernel.org/doc/html/v4.15/dev-
tools/kcov.html.
[5] “Kernel
address
sanitizer,”
https://github.com/google/kasan/wiki.
[6] “Kernel
memory