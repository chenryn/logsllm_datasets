(11) P1 and P2 send k2, p1, p2 to P3. P3 aborts if he sees that
P1 and P2 sent him different values.
(12) P3 aborts if:
(a) ˆp1 (cid:44) p1 or ˆp2 (cid:44) p2.
(b) V1 (cid:44) {( ˆx, F(k2, ˆx)) | ˆx ∈ (cid:98)X }
(c) W1 (cid:44) {( ˆy, F(k2, ˆy) ⊕ p1( ˆy)) | ˆy ∈(cid:98)Y }
Otherwise, P3 decommits to ˆs1, ˆs2.
(13) The players abort if ˆs1 (cid:44) s1 or ˆs2 (cid:44) s2.
Output: The players output τ .
Figure 5: ΠPSI-CA: A protocol for computing the size of the
intersection, using polynomial interpolation to (simulata-
neously) prove both a lower and upper bound on the inter-
section size.
4 CIRCUIT-BASED PROTOCOLS
4.1 Circuit-based Intersection cardinality
The protocol of Section 3 has low communication cost, but requires
O(n log2
n) computational steps by all parties. We present a con-
struction using techniques from generic 3-party computation that
requires more communication, but less computation. It also allows
us to compute on the payloads of the items in the intersection.
Interestingly, we also provide a hybrid protocol that offers a third
point in the continuum. In this hybrid protocol, we remove 2n − 2z
comparison gates from our circuit by using the proof of the union
lower bound from Section 3 (Figure 4) (We note that to prove the
union lower bound, the three parties start at Step 5 in Figure 4. At
this point, P3 has received {F(k, x), x ∈ X} and {F(k, y), y ∈ Y}
from P1 and P2 respectively, and has sent the size of the intersec-
tion to P1 and P2. In fact, a union lower bound proof with inputs
as X and Y will allow a malicious party to send F(k, z∗) instead of
F(k, z) where z ∈ X or z ∈ Y. By using the existing prp values and
starting the proof at Step 5, the input consistency is guaranteed.).
Both variants of our circuit-based protocol are described in Figure
8.
FunionLB
Inputs: All parties provide t and [Z]A where Z = X ||Y .
Functionality:
are valid, reconstruct Z. Else, send abort.
• Wait for shares [Z]A from P1, P2, and P3. If the shares
• If the items in X are not all distinct, or the items in Y
• If the parties don’t agree on t, send abort.
• If t ≤ |X ∪ Y |, output true to all players.
• If t > |X ∪ Y |, output false to all players.
are not all distinct, send abort.
Figure 6: Verify a union count lower bound
Ff(PSI)
Inputs: P1 provides X = {x1, ..., xn }, P2 provides Y =
{y1, ..., yn }. P3 provides no input.
Functionality:
• Waits for input X and Y from P1 and P2 respectively.
• If there are duplicated items in X or Y, sends abort to all
• Else, gives output |X ∩ Y | to all parties and f (X ∩ Y) to
parties.
P1 and P2.
Figure 7: f(PSI) Ideal Functionality
In the two-party setting, one naive way of computing the cardi-
nality of the intersection is as follows. The two parties each sort
their inputs locally, and then perform a generic secure two-party
computation of the following algorithm:
and counting the number of duplicates.
• Obliviously merge the two input arrays.
• Obliviously scan the input, comparing neighbors for equality,
The oblivious merge requires O(n log n) AND gates, which we can
avoid in the three-party setting. The main tool we employ is a cheap,
linear-time,7 three-party protocol for sorting the input according
to a permutation specified by P3. We defer the description of this
sub-routine until Section 4.3. The users send encodings of their
inputs to P3, as in the protocol of Section 3, and P3 finds the items
in the intersection. (If either party sent duplicate items, he aborts).
He then chooses a permutation on the 2n items that a) places all
matching encodings in the front of the array (preserving the du-
plicate values), and b) sorts the remaining encodings according
to their lexicographic ordering. P3 reports z = |S ∩ T |. The three
parties then perform a generic computation that
• verifies the equality of neighboring pairs for the first z =
|S ∩ T | pairs, and
7Sorting requires O(n log n) time, of course, but we are measuring the number of
secure, interactive operations, and the sorting is done locally.
Session 10C: Secret SharingCCS ’19, November 11–15, 2019, London, United Kingdom2408πcb: Circuit-Based PSI computations
Inputs: P1 has X = {x1, ..., xn }, P2 has Y = {y1, ..., yn }, P3
does not have inputs.
(1)
For f (PSI): P1 provides payload values D(1) = {d
n }
and P2 provides D(2) = {d
Protocol:
(1)
1 , . . . , d
(2)
1 , . . . , d
(2)
n }
(1) P1 and P2 sample a random PRP key k by making a call
to Fcoin.
(2) P1 computes V1 ≡ {F(k, x)|x ∈ X } and distributes it
as replicated shares among the three parties.
For f (PSI): P1 also distributes shares of the payloads.
(3) P2 computes V2 ≡ {F(k, y)|y ∈ Y } and distributes it as
replicated shares among the three parties.
For f (PSI): P2 also distributes shares of the payloads.
(4) The parties open Z = V1||V2 to P3.
(5) P3 verifies that all items in V1 are distinct, and that all
items in V2 are distinct. If this is not true, he aborts.
(6) P3 fixes a permutation π that moves items in the intersec-
tion (Z1 = V1 ∩ V2) to the top, placing each item next to
its duplicate, and that moves the rest (Z2) to the bottom,
in sorted order. The three parties call FShuffle to shuffle
the shares according to π .
For f (PSI): the payloads are shuffled along with their
indices.
(7) P3 sends the size of the intersection, t, to P1 and P2. P1
and P2 abort if they received differing values.
(8) For Z1, the parties verify that there are t duplicate pairs,
using secure arithmetic comparisons. (The relevant func-
tionalities are defined in Section 2.3.)
• They make t calls to Fcoin to receive R = {r1, ..., rt }.
i =1 ri(z2i − z2i−1)]), where
• They run FCheckZero([t
(9) Circuit-based protocol:
zi ∈ Z (1), and abort if the output is False.
For Z2, the parties make a call to F[x]A→[x]B to
convert [Z2]A to [Z2]B. They then run a sequence
of 3PC comparison circuits, verifying that the items
are in sorted order. If not, they abort.
All parties make a call to FunionLB with input
([Z]A, t). If the output is false, they abort.
Hybrid protocol:
(10) For f (psi): For each pair of duplicates in Z1, the parties
use the replicated sharings as input to a circuit for f . The
output of the circuit is [f (psi)]. Players reveal f(psi) to
P1 and P2.
Output:
For f (psi): P1 and P2 output the result of f and t = |Z1|/2. P3
outputs t = |Z1|/2.
For set cardinality: P1, P2, and P3 output |Z1|/2.
Figure 8: We give four protocols in this box: two for com-
puting PSI cardinality, and and two for computing arbitrary
f on the payloads of the intersecting items. The differ-
ence in the protocol variants (in either computation) lies
only in how P1 and P2 verify the upper-bound on the union
size: using Boolean comparisons to verify a strict ordering,
or through polynomial interpolation.
The resulting circuit requires a single batched equality check of
arithmetic values for the z items in the intersection, and 2n − 2z
Boolean comparison circuits. To verify the equality of z pairs, the
parties need to communicate only O(1) field elements. To verify
the order for (2n − 2z) items, O(2n − 2z) bits are required. Both
have linear runtime complexity. Note that as z goes from 0 to n, the
number of required circuits goes from 2n to 0.
Comparing the protocols: We provide concrete comparisons in
Section 6, and give some intuition for the trade-offs here. We com-
pare the protocols based on the three criteria: computational com-
plexity, communication cost, and round complexity. In terms of
computational cost, the circuit-based protocol has linear compu-
tational complexity while the polynomial-based and hybrid ones
run in O(n log2
n) time due to the polynomial interpolation and
evaluation subroutines [3]. All the three protocols have linear com-
munication cost, in which the polynomial-based approach requires
the least bandwidth and the circuit-based approach requires the
most. This is due to the bandwidth required by the share conversion
and comparison circuits. The polynomial-based protocol has the
least number of rounds while the circuit-based has the most. We
note that they all have a constant number of rounds.
When the input size is small, the number of rounds dominates
the total runtime, due to network latency. When the input size is
large, the circuit-based protocol performs best in LAN setting, since
the network is not an issue. In the WAN setting, the circuit-based
protocol is better only when the input set size is very large (e.g.
220), as then the network latency is not the dominate cost. (This is
demonstrated experimentally, in Table 1). Interestingly, the parties
do not need to commit to their choice of protocol until after they
have learned the intersection size: all three protocols begin the same
way, with P3 determining and reporting the size on encoded values.
This flexibility allows the parties to pick the protocol that works
best for them according to their available resources and network
configuration.
4.2 Computing on the payloads of intersecting
indices
Our protocol for f (PSI), where f depends only on the payloads,
f (PSI) ≡ f (D) where D ≡ {(d1, d2) | ∃w ∈ X ∩ Y : (w, d1) ∈
(X , D(1)) ∧ (w, d2) ∈ (X , D(2))}, also appears in Figure 8. The modi-
fications to the circuit-based cardinality protocol are minimal, and
marked in green. As before, the parties begin by agreeing on a
PRP key, k, and use it to deterministically encode their inputs: for
input pair (x, d), where d is the payload and x is the index, the
party computes ˆx = F(k, x), and then creates a replicated sharing
of (ˆx, d). The main insight is that this sharing can be viewed as a
commitment to the input values (due to the replication). With these
commitments in place, the parties can securely and consistently
tion, and the sorting permutation π.
(1) Open the encoded indices to P3 for determining the intersec-
(2) Provide input to FShuffle.
(3) Use the shares as input to a three-party computation on the
payloads of the indices in the intersection.
• verifies that item i is strictly greater than item i − 1, for
i ∈ {2z + 2, . . . , 2n}.
It is instructive to consider why we can only use this to com-
pute on the payloads, and not on the indices themselves. For P3
Session 10C: Secret SharingCCS ’19, November 11–15, 2019, London, United Kingdom2409to determine the permutation π, P1 and P2 need to send encoded
indices. But to compute some function f on these values, they
need to supply the plaintext indices to f . The replicated sharing no
longer gives a guarantee that the input to f is consistent with the
encodings sent to P3. We explore ways of providing this consistency
guarantee in Section 5.
Theorem 4.1. The protocols of Figure 8 for computing PSI cardi-
nality securely realize the ideal functionality FPSI-CA (Figure 3) with
abort, under a single malicious corruption. The variants for computing
on the payloads of the intersecting items securely realize the ideal
functionality Ff(PSI) (Figure 7)
Proof. The proof appears in Appendix B.
4.3 Three Party Oblivious Shuffling
FShuffle
Inputs: P1, P2, P3 submit a set of replicated arithmetic shares
[X]A = {[x1]A, ..., [x2n]A}. P3 submits a permutation π .
Functionality:
output abort to every party.
• If there are any inconsistencies among the input shares,
• Shuffle the shares using permutation π .
• Re-randomize the replicated shares.
Outputs: [π(X)]A
Figure 9: Ideal Functionality for Shuffling
We construct a low-bandwidth protocol for permuting replicated
arithmetic shares in the three party setting, where P3 chooses the
permutation π that remains hidden from the two other players.
Our protocol runs in linear time and has communication cost of 5n
field elements when permuting n values. The formal description
of the protocol appears in Figure 10. Informally, the parties begin
by sampling replicated shares of a random field element, α, and
compute replicated sharing [αx]A through a call to Fmult. P3 and P2
begin by converting the replicated sharing into a 2-out-of-2 sharing,
and then apply a random permutation σ1 to the resulting shares.
P2 sends P1 his shares (after re-randomizing), and P3 sends to P1
π ◦ σ−1
1 . They both permute their shares, and the three parties
convert the two-out-of-two sharings back into to replicated shares.
Because neither P1 nor P2 sees both permutations, neither learns
anything about the composed permutation π. However, going from
replicated shares to two-out-of-two additive shares in order to hide
the permutation allows the adversary to modify the shared values.
To prevent this, the parties expose α, and perform several checks
to ensure that everyone behaved honestly.
We note one important subtlety about how the correctness of the
shares is validated. Letting X(3) denote permuted the output array,
and Y(3) denote the authenticate array, it does not suffice to simply
verify at the end of the computation that αX(3) = Y(3). Without
the verification that αX = Y, a malicious P1 could learn some
information about the permutation with non-negligible probability:
in Step 2, he adds di to the ith shares in Y so that yi = αxi + di. In
Step 7, he adds −di to the jth shares in Y(3) before converting it
back to replicated sharing. If the check in Step 10 fails, he learns
that π(i) (cid:44) j. If the check passes (with probability 1/n), he knows
π(i) = j. By having both checks in Step 9 and 10, P1 or P2 can only
modify the shares of the data and MACs once, and they will be
caught with high probability if they choose to do so. If any of them
attempts to modify the data, the checks fail with high probability.
ΠShuffle: Three Party Shuffling
Inputs: P1, P2, and P3 have replicated shares [X]A =
{[x1]A, ..., [xn]A}, P3 has a permutation π . (As all shares are
of arithmetic values, we suppress the superscript indicating this
going forward.)
Protocol:
(1) P1, P2, and P3 call Frand to sample a shared random MAC
p. The key is distributed as replicated shares
(2) The parties make n calls to Fmult, computing [Y] =
(3) P2 and P3 locally compute 2-out-of-2 shares of X and Y :
key, α ∈ Z∗
[α].
{[α x] | x ∈ X }.
2,3−→ ⟨X (1)⟩ and [Y]
[X]
(The superscript denotes a possible change in the shared
value by an adversary.)
(4) P2 and P3 call Fcoin to sample a random permutation σ1.
(5) P2 and P3 call Fcoin and use the resulting randomness
They permute their shares according to σ1.
2,3−→ ⟨Y (1)⟩.
for re-randomizing their shares:
⟨X (2)⟩ ← reRand(⟨σ1(X (1))⟩) and
⟨Y (2)⟩ ← reRand(⟨σ1(Y (1))⟩).
P2 sends his shares to P1.
(6) P3 sends σ2 = π ◦ (σ1)−1 to P1. They permute their
(7) The three parties transform the permuted shares into
shares according to σ2.
replicated sharings:
⟨σ2(X (2))⟩ 2→ [X (3)], ⟨σ2(Y (2))⟩ 2→ [Y (3)].
[α · X − Y] and [Z (2)] = [α · X (3) − Y (3)].
(8) The parties securely open α and locally compute [Z (1)] =
(9) The parties make n calls to Fcoin, receiving R1 =
{r1, ..., rn }. They run FCheckZero([ ri zi]) where zi ∈
{s1, ..., sn }. They run FCheckZero([ si zi]) where zi ∈
(10) The parties make n calls to Fcoin, receiving R2 =
Z (1) and abort if the output is False.