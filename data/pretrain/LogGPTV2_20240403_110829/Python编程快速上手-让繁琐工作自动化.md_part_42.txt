编写一个程序，读入几个文本文件的内容（可以自己创造这些文本文件），并
将这些内容插入一个电子表格，每行写入一行文本。第一个文本文件中的行将写入
列A中的单元格，第二个文本文件中的行将写入列B中的单元格，以此类推。
利用File对象的readlines()方法，返回一个字符串的列表，每个字符串就是文件中
的一行。对于第一个文件，将第一行输出到列1行1。第二行应该写入列1行2，以此
类推。下一个用readlines()读入的文件将写入列2，再下一个写入列3，以此类推。
12.13.5 电子表格到文本文件
编写一个程序，执行前一个程序相反的任务。该程序应该打开一个电子表格，将列
A中的单元格写入一个文本文件，将列B中的单元格写入另一个文本文件，以此类推。
242 Python编程快速上手——让繁琐工作自动化
13
第 章
处理 PDF 和 Word 文档
PDF和Word文档是二进制文件，所以它们比纯文本文件要
复杂得多。除了文本之外，它们还保存了许多字体、颜色和布局
信息。如果希望程序能读取或写入PDF和Word文档，需要做的
就不只是将它们的文件名传递给open()。
好在，有一些Python模块。使得处理PDF和Word文档变
得容易。本章将介绍两个这样的模块。
13.1 PDF 文档
PDF表示Portable Document Format，使用.pdf文件扩展名。虽然PDF支持许多
功能，但本章将专注于最常做的两件事：从PDF读取文本内容和从已有的文档生成
新的PDF。
用于处理PDF的模块是PyPDF2。要安装它，就从命令行运行pip install PyPDF2。
这个模块名称是区分大小写的，所以要确保y是小写，其他字母都是大写（请查看
附录 A，了解安装第三方模块的所有细节）。如果该模块安装正确，在交互式环境
中运行import PyPDF2，应该不会显示任何错误。
13.1.1 从PDF提取文本
PyPDF2没有办法从PDF文档中提取图像、图表或其他媒体，但它可以提取文
本，并将文本返回为Python字符串。为了开始学习PyPDF2的工作原理，我们将它
用于一个示例PDF，如图13-1所示。
图13-1 PDF页面，我们将从中提取文本
有问题的PDF格式
虽然 PDF 文件对文本布局非常好，让人们很容易打印并阅读，但软件要将
它们解析为纯文本却并不容易。因此，PyPDF2从PDF提取文本时可能会出错，
甚至根本不能打开某些PDF。遗憾的是，你对此没有什么办法，PyPDF2可能就
是不能处理某些PDF文件。话虽这样说，我至今没有发现不能用PyPDF2打开的
PDF文件。
从http://nostarch.com/automatestuff/下载这个PDF文件，并在交互式环境中输入
以下代码：
>>> import PyPDF2
>>> pdfFileObj = open('meetingminutes.pdf', 'rb')
>>> pdfReader = PyPDF2.PdfFileReader(pdfFileObj)
 >>> pdfReader.numPages
19
 >>> pageObj = pdfReader.getPage(0)
 >>> pageObj.extractText()
'OOFFFFIICCIIAALL BBOOAARRDD MMIINNUUTTEESS Meeting of March 7, 2015
Python编程快速上手——让繁琐工作自动化
\n The Board of Elementary and Secondary Education shall provide leadership
and create policies for education that expand opportunities for children,
empower families and communities, and advance Louisiana in an increasingly
c ompetitive global market. BOARD of ELEMENTARY and SECONDARY EDUCATION '
首先，导入PyPDF2模块。然后以读二进制模式打开meetingminutes.pdf，并将
它保存在pdfFileObj中。为了取得表示这个PDF的PdfFileReader对象，调用PyPDF2.
PdfFileReader()并向它传入pdfFileObj。将这个PdfFileReader对象保存在pdfReader中。
该文档的总页数保存在PdfFileReader对象的numPages属性中。示例PDF文
档有19页，但我们只提取第一页的文本。
要从一页中提取文本，需要通过 PdfFileReader 对象取得一个 Page 对象，它表
示 PDF 中的一页。可以调用 PdfFileReader 对象的 getPage()方法，向它传入感兴
趣的页码（在我们的例子中是0），从而取得Page对象。
PyPDF2在取得页面时使用从0开始的下标：第一页是0页，第二页是1页，以
此类推。事情总是这样，即使文档中页面的页码不同。例如，假定你的 PDF 是从一
个较长的报告中抽取出3页，它的页码分别是42、43和44，要取得这个文档的第一
页，需要调用pdfReader.getPage(0)，而不是getPage(42)或getPage(1)。
在取得Page对象后，调用它的extractText()方法，返回该页文本的字符串。文
本提取并不完美：该PDF中的文本Charles E.“Chas”Roemer, President，在函数返
回的字符串中消失了，而且空格有时候也会没有。但是，这种近似的PDF文本内容，
可能对你的程序来说已经足够了。
13.1.2 解密PDF
某些PDF文档有加密功能，以防止别人阅读，只有在打开文档时提供口令才能阅
读。在交互式环境中输入以下代码，处理下载的PDF，它已经用口令rosebud加密：
>>> import PyPDF2
>>> pdfReader = PyPDF2.PdfFileReader(open('encrypted.pdf', 'rb'))
 >>> pdfReader.isEncrypted
True
>>> pdfReader.getPage(0)
 Traceback (most recent call last):
File "", line 1, in 
pdfReader.getPage()
--snip--
File "C:\Python34\lib\site-packages\PyPDF2\pdf.py", line 1173, in getObject
raise utils.PdfReadError("file has not been decrypted")
PyPDF2.utils.PdfReadError: file has not been decrypted
 >>> pdfReader.decrypt('rosebud')
1
> >> pageObj = pdfReader.getPage(0)
所有PdfFileReader对象都有一个isEncrypted属性，如果PDF是加密的，它就
是True，如果不是，它就是False。在文件用正确的口令解密之前，尝试调用函数
来读取文件，将会导致错误。
第13章 处理PDF和Word文档
要读取加密的PDF，就调用decrypt()函数，传入口令字符串。在用正确的口
令调用decrypt()后，你会看到调用getPage()不再导致错误。如果提供了错误的口令，
decrypt()函数将返回0，并且getPage()会继续失败。请注意，decrypt()方法只解密了
PdfFileReader对象，而不是实际的PDF文件。在程序中止后，硬盘上的文件仍然是
加密的。程序下次运行时，仍然需要再次调用decrypt()。
13.1.3 创建PDF
在PyPDF2中，与PdfFileReader对象相对的是PdfFileWriter对象，它可以创建
一个新的PDF文件。但PyPDF2 不能将任意文本写入PDF，就像Python 可以写入
纯文本文件那样。PyPDF2写入PDF的能力，仅限于从其他PDF中拷贝页面、旋转
页面、重叠页面和加密文件。
模块不允许直接编辑PDF。必须创建一个新的PDF，然后从已有的文档拷贝内
容。本节的例子将遵循这种一般方式：
1．打开一个或多个已有的PDF（源PDF），得到PdfFileReader对象。
2．创建一个新的PdfFileWriter对象。
3．将页面从PdfFileReader对象拷贝到PdfFileWriter对象中。
4．最后，利用PdfFileWriter对象写入输出的PDF。
创建一个PdfFileWriter对象，只是在Python中创建了一个代表PDF文档的值，这并
没有创建实际的PDF文件，要实际生成文件，必须调用PdfFileWriter对象的write()方法。
write()方法接受一个普通的 File 对象，它以写二进制的模式打开。你可以用两
个参数调用Python 的 open()函数，得到这样的 File 对象：一个是要打开的 PDF文
件名字符串，一个是'wb'，表明文件应该以写二进制的模式打开。
如果这听起来有些令人困惑，不用担心，在接下来的代码示例中，你会看到这
种工作方式。
13.1.4 拷贝页面
可以利用PyPDF2，从一个PDF文档拷贝页面到另一个PDF文档。这让你能够
组合多个PDF文件，去除不想要的页面，或调整页面的次序。
从http://nostarch.com/automatestuff/下载meetingminutes.pdf和meetingminutes2.pdf，放
在当前工作目录中。在交互式环境中输入以下代码：
>>> import PyPDF2
>>> pdf1File = open('meetingminutes.pdf', 'rb')
>>> pdf2File = open('meetingminutes2.pdf', 'rb')
 >>> pdf1Reader = PyPDF2.PdfFileReader(pdf1File)
 >>> pdf2Reader = PyPDF2.PdfFileReader(pdf2File)
 >>> pdfWriter = PyPDF2.PdfFileWriter()
>>> for pageNum in range(pdf1Reader.numPages):
 pageObj = pdf1Reader.getPage(pageNum)
Python编程快速上手——让繁琐工作自动化
 pdfWriter.addPage(pageObj)
>>> for pageNum in range(pdf2Reader.numPages):
 pageObj = pdf2Reader.getPage(pageNum)
 pdfWriter.addPage(pageObj)
 >>> pdfOutputFile = open('combinedminutes.pdf', 'wb')
>>> pdfWriter.write(pdfOutputFile)
>>> pdfOutputFile.close()
>>> pdf1File.close()
> >> pdf2File.close()
以读二进制的模式打开两个 PDF 文件，将得到的两个 File 对象保存在 pdf1File 和
pdf2File中。调用PyPDF2.PdfFileReader()，传入pdf1File，得到一个表示meetingminutes.pdf
的PdfFileReader对象。再次调用PyPDF2.PdfFileReader()，传入pdf2File，得到一个
表示meetingminutes2.pdf的PdfFileReader对象。然后创建一个新的PdfFileWriter
对象，它表示一个空白的PDF文档。
接下来，从两个源PDF拷贝所有的页面，将它们添加到PdfFileWriter对象。在
PdfFileReader对象上调用getPage()，取得Page对象。然后将这个Page对象传递
给PdfFileWriter的addPage()方法。这些步骤先是针对pdf1Reader进行，然后再针对
pdf2Reader进行。在拷贝页面完成后，向 PdfFileWriter 的 write()方法传入一个 File
对象，写入一个新的PDF文档，名为combinedminutes.pdf。
注意 PyPDF2不能在PdfFileWriter对象中间插入页面，addPage()方法只能够在末尾添
加页面。
现在你创建了一个新的 PDF 文件，将来自 meetingminutes.pdf 和 meetingmin
utes2.pdf的页面组合在一个文档中。要记住，传递给PyPDF2.PdfFileReader()的File对
象，需要以读二进制的方式打开。即使用'rb'作为open()的第二个参数。类似的，传
入PyPDF2.PdfFileWriter()的File对象需要以写二进制的模式打开，即使用'wb'。
13.1.5 旋转页面
利用rotateClockwise()和rotateCounterClockwise()方法，PDF文档的页面也可以
旋转 90 度的整数倍。向这些方法传入整数 90、180 或 270 就可以了。在交互式环
境中输入以下代码，同时将meetingminutes.pdf放在当前工作目录中：
>>> import PyPDF2
>>> minutesFile = open('meetingminutes.pdf', 'rb')
>>> pdfReader = PyPDF2.PdfFileReader(minutesFile)
 >>> page = pdfReader.getPage(0)
 >>> page.rotateClockwise(90)
{'/Contents': [IndirectObject(961, 0), IndirectObject(962, 0),
--snip--
}
>>> pdfWriter = PyPDF2.PdfFileWriter()
>>> pdfWriter.addPage(page)
第13章 处理PDF和Word文档
 >>> resultPdfFile = open('rotatedPage.pdf', 'wb')
>>> pdfWriter.write(resultPdfFile)
>>> resultPdfFile.close()
> >> minutesFile.close()
这里，我们使用 getPage(0)来选择 PDF 的第一页，然后对该页调用
rotateClockwise(90)。我们将旋转过的页面写入一个新的 PDF 文档，并保存为
rotatedPage.pdf。
得到的PDF文件有一个页面，顺时针旋转了90度，如图13-2所示。rotateClockwise()
和rotateCounterClockwise()的返回值包含许多信息，你可以忽略。
图13-2 rotatedPage.pdf文件，页面顺时针旋转了90度
13.1.6 叠加页面
PyPDF2 也可以将一页的内容叠加到另一页上，这可以用来在页面上添加公司
标志、时间戳或水印。利用Python，很容易为多个文件添加水印，并且只针对程序
指定的页面添加。
从http://nostarch.com/automatestuff/下载watermark.pdf，将它和meetingminutes.pdf一
起放在当前工作目录中。然后在交互式环境中输入以下代码：
>>> import PyPDF2
>>> minutesFile = open('meetingminutes.pdf', 'rb')
 >>> pdfReader = PyPDF2.PdfFileReader(minutesFile)
 >>> minutesFirstPage = pdfReader.getPage(0)
 >>> pdfWatermarkReader = PyPDF2.PdfFileReader(open('watermark.pdf', 'rb'))
Python编程快速上手——让繁琐工作自动化
 >>> minutesFirstPage.mergePage(pdfWatermarkReader.getPage(0))
 >>> pdfWriter = PyPDF2.PdfFileWriter()
 >>> pdfWriter.addPage(minutesFirstPage)
 >>> for pageNum in range(1, pdfReader.numPages):
pageObj = pdfReader.getPage(pageNum)
pdfWriter.addPage(pageObj)
>>> resultPdfFile = open('watermarkedCover.pdf', 'wb')
>>> pdfWriter.write(resultPdfFile)
>>> minutesFile.close()
> >> resultPdfFile.close()
这里我们生成了meetingminutes.pdf的PdfFileReader对象。调用getPage(0)，
取得第一页的Page对象，并将它保存在minutesFirstPage中。然后生成了watermark.pdf
的PdfFileReader对象，并在minutesFirstPage上调用mergePage()。传递给mergePage()
的参数，是watermark.pdf第一页的Page对象。
既然我们已经在minutesFirstPage上调用了mergePage()，minutesFirstPage就代
表加了水印的第一页。我们创建一个PdfFileWriter对象，并加入加了水印的第一页。
然后循环遍历meetingminutes.pdf的剩余页面，将它们添加到PdfFileWriter对象中。
最后，我们打开一个新的PDF文件watermarkedCover.pdf，并将PdfFileWriter的内容写
入该文件。
图 13-3 展示了结果。新的 PDF 文件 watermarkedCover.pdf，包含meetingminutes.pdf