### 12.13.5 将文本文件内容写入电子表格

编写一个程序，读取多个文本文件的内容，并将这些内容插入到一个电子表格中。每个文本文件中的行将被写入电子表格的不同列中。

**步骤：**
1. 使用 `File` 对象的 `readlines()` 方法读取文本文件，该方法返回一个字符串列表，每个字符串对应文件中的一行。
2. 对于第一个文件，将第一行写入电子表格的 A 列第 1 行，第二行写入 A 列第 2 行，依此类推。
3. 第二个文件的内容将从 B 列开始写入，第三个文件从 C 列开始，以此类推。

### 12.13.6 从电子表格导出内容到文本文件

编写另一个程序，执行上述程序相反的任务。该程序应打开一个电子表格，并将每列的内容分别写入不同的文本文件。

**步骤：**
1. 打开电子表格。
2. 将 A 列的内容写入第一个文本文件，B 列的内容写入第二个文本文件，依此类推。

### 第 13 章 处理 PDF 和 Word 文档

PDF 和 Word 文档是二进制文件，比纯文本文件复杂得多，因为它们不仅包含文本，还保存了字体、颜色和布局信息。处理这类文档时，仅使用 `open()` 函数是不够的。幸运的是，有一些 Python 模块可以简化这一过程，本章将介绍其中两个模块。

#### 13.1 PDF 文档

PDF（Portable Document Format）是一种常用的文件格式，扩展名为 `.pdf`。虽然 PDF 支持许多功能，但本章主要关注最常见的两种操作：从 PDF 中提取文本和生成新的 PDF 文件。

##### 13.1.1 从 PDF 提取文本

**使用的模块：** PyPDF2

**安装方法：** 通过命令行运行 `pip install PyPDF2` 进行安装。

**示例代码：**

```python
import PyPDF2

# 打开 PDF 文件
pdfFileObj = open('meetingminutes.pdf', 'rb')
pdfReader = PyPDF2.PdfFileReader(pdfFileObj)

# 获取总页数
print(pdfReader.numPages)  # 输出：19

# 提取第一页的文本
pageObj = pdfReader.getPage(0)
print(pageObj.extractText())
```

**注意事项：**
- PyPDF2 只能提取文本，无法提取图像或其他媒体。
- PDF 格式可能导致文本提取不完全准确，例如某些文本可能丢失或格式不正确。

##### 13.1.2 解密 PDF

某些 PDF 文档是加密的，需要密码才能阅读。PyPDF2 可以解密这些文档。

**示例代码：**

```python
import PyPDF2

# 打开加密的 PDF 文件
pdfReader = PyPDF2.PdfFileReader(open('encrypted.pdf', 'rb'))

# 检查是否加密
if pdfReader.isEncrypted:
    # 尝试解密
    if pdfReader.decrypt('rosebud'):
        pageObj = pdfReader.getPage(0)
        print(pageObj.extractText())
    else:
        print("解密失败")
else:
    print("文件未加密")
```

**注意事项：**
- 如果提供的密码错误，`decrypt()` 方法将返回 0 并且后续操作会失败。
- 解密只在内存中进行，不会修改硬盘上的文件。

##### 13.1.3 创建 PDF

PyPDF2 可以创建新的 PDF 文件，但只能从其他 PDF 文件复制页面、旋转页面、叠加页面和加密文件。

**示例代码：**

```python
import PyPDF2

# 打开源 PDF 文件
pdf1File = open('meetingminutes.pdf', 'rb')
pdf2File = open('meetingminutes2.pdf', 'rb')

# 创建 PdfFileReader 对象
pdf1Reader = PyPDF2.PdfFileReader(pdf1File)
pdf2Reader = PyPDF2.PdfFileReader(pdf2File)

# 创建一个新的 PdfFileWriter 对象
pdfWriter = PyPDF2.PdfFileWriter()

# 从源 PDF 文件拷贝所有页面
for pageNum in range(pdf1Reader.numPages):
    pageObj = pdf1Reader.getPage(pageNum)
    pdfWriter.addPage(pageObj)

for pageNum in range(pdf2Reader.numPages):
    pageObj = pdf2Reader.getPage(pageNum)
    pdfWriter.addPage(pageObj)

# 写入新的 PDF 文件
pdfOutputFile = open('combinedminutes.pdf', 'wb')
pdfWriter.write(pdfOutputFile)

# 关闭文件
pdfOutputFile.close()
pdf1File.close()
pdf2File.close()
```

**注意事项：**
- `addPage()` 方法只能在末尾添加页面，不能在中间插入。
- 文件必须以二进制模式打开（'rb' 或 'wb'）。

##### 13.1.4 旋转页面

PyPDF2 可以旋转 PDF 页面 90 度的整数倍。

**示例代码：**

```python
import PyPDF2

# 打开 PDF 文件
minutesFile = open('meetingminutes.pdf', 'rb')
pdfReader = PyPDF2.PdfFileReader(minutesFile)

# 选择第一页并顺时针旋转 90 度
page = pdfReader.getPage(0)
page.rotateClockwise(90)

# 创建一个新的 PdfFileWriter 对象
pdfWriter = PyPDF2.PdfFileWriter()
pdfWriter.addPage(page)

# 写入新的 PDF 文件
resultPdfFile = open('rotatedPage.pdf', 'wb')
pdfWriter.write(resultPdfFile)

# 关闭文件
resultPdfFile.close()
minutesFile.close()
```

**注意事项：**
- 旋转方法包括 `rotateClockwise()` 和 `rotateCounterClockwise()`。

##### 13.1.5 叠加页面

PyPDF2 可以将一个页面的内容叠加到另一个页面上，常用于添加水印或时间戳。

**示例代码：**

```python
import PyPDF2

# 打开源 PDF 文件
minutesFile = open('meetingminutes.pdf', 'rb')
pdfReader = PyPDF2.PdfFileReader(minutesFile)

# 选择第一页
minutesFirstPage = pdfReader.getPage(0)

# 打开水印 PDF 文件
pdfWatermarkReader = PyPDF2.PdfFileReader(open('watermark.pdf', 'rb'))

# 将水印页面叠加到会议记录的第一页
minutesFirstPage.mergePage(pdfWatermarkReader.getPage(0))

# 创建一个新的 PdfFileWriter 对象
pdfWriter = PyPDF2.PdfFileWriter()
pdfWriter.addPage(minutesFirstPage)

# 添加剩余页面
for pageNum in range(1, pdfReader.numPages):
    pageObj = pdfReader.getPage(pageNum)
    pdfWriter.addPage(pageObj)

# 写入新的 PDF 文件
resultPdfFile = open('watermarkedCover.pdf', 'wb')
pdfWriter.write(resultPdfFile)

# 关闭文件
minutesFile.close()
resultPdfFile.close()
```

**注意事项：**
- `mergePage()` 方法用于叠加页面。
- 新生成的 PDF 文件将包含叠加后的页面。