# AFL源码分析（Ex.4）——附录（Part 4）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0\. 写在前面
此文章主要是对`AFL`仓库中`doc`目录下的所有文档进行翻译。
  * [x] env_variables.txt(环境变量手册) —— 历史文章(Part 1)
  * [x] historical_notes.txt(前世今生)—— 本文
  * [x] INSTALL(安装说明)—— 本文
  * [x] life_pro_tips.txt(使用技巧) —— 历史文章(Part 1)
  * [x] notes_for_asan.txt(`ASAN`模式手册) —— 历史文章(Part 2)
  * [x] parallel_fuzzing.txt(同步`fuzz`模式手册) —— 历史文章(Part 2)
  * [x] perf_tips.txt(故障排除手册) —— 历史文章(Part 4)
  * [x] QuickStartGuide.txt(快速上手) —— 历史文章(Part 4)
  * [x] sister_projects.txt(子项目手册)—— 本文
  * [x] status_screen.txt(GUI手册) —— 历史文章(Part 4)
  * [ ] technical_details.txt(技术白皮书)
  * [ ] ../README.md(自述文件)
后续附录将继续翻译以上列表中的文章。
## 1\. sister_projects.txt(子项目手册)
本文档列出了一些受`AFL`启发、衍生自、设计用于或旨在与`AFL`集成的项目。 有关一般说明手册，请参阅自述文件。
###  1.1 多语言/多环境支持的项目
**1.1.1 Python AFL (Jakub Wilk)**
描述：此项目允许您对`Python`程序进行模糊测试。 此项目使用自定义检测和其自身实现的`forkserver`。
项目地址：
**1.1.2 Go-fuzz (Dmitry Vyukov)**
描述：受`AFL`启发的针对`Go`语言目标的`fuzzer`：
项目地址：
**1.1.3 afl.rs (Keegan McAllister)**
描述：允许使用`AFL`轻松的对`Rust`程序的功能进行`fuzz`测试(使用`LLVM`模式)。
项目地址：
**1.1.4 OCaml support (KC Sivaramakrishnan)**
描述：添加与`AFL`兼容性的功能，以允许对`OCaml`程序进行`fuzz`测试。
项目地址1：  
项目地址2：
**1.1.5 AFL for GCJ Java and other GCC frontends (-)**
描述：`GCC Java`程序实际上是开箱即用的——只需将`afl-gcc`重命名为`afl-gcj`。不幸的是，默认情况下，`GCJ`中未处理的异常不会导致`abort()`被调用，因此您需要手动添加一个顶级异常处理程序，该处理程序需要以`SIGABRT`或等效的方式退出。  
其他`GCC`支持的语言应该很容易上手，但可能会面临类似的问题。有关选项列表，请参阅
[https://gcc.gnu.org/frontends.html。](https://gcc.gnu.org/frontends.html%E3%80%82)
**1.1.6 AFL-style in-process fuzzer for LLVM (Kostya Serebryany)**
描述：提供一个基于进化算法的`fuzz`器，允许在没有`fork/execve`开销的情况下对某些程序进行模糊测试。(类似的功能现在可用作
`../llvm_mode/README.llvm`中描述的“持久”功能)
项目地址：
**1.1.7 AFL fixup shim (Ben Nagy)**
描述：允许使用没有`C/.so`绑定的任意语言编写`AFL_POST_LIBRARY`下游处理器。包括`Go`中的示例。
项目地址：
**1.1.8 TriforceAFL (Tim Newsham and Jesse Hertz)**
描述：允许`AFL`利用`QEMU`全系统仿真模式对操作系统和其他的特殊二进制文件作为目标进行测试。
项目地址：
**1.1.9 WinAFL (Ivan Fratric)**
描述：顾名思义，允许您对`Windows`二进制文件进行`fuzz`(使用`DynamoRio`)。
项目地址：
项目地址(一种替代方案)：
###  1.2 网络测试项目
**1.2.1 Preeny (Yan Shoshitaishvili)**
描述：此项目提供了一种相当简单的方法来修补动态链接的以网络为中心的程序从文件中读取数据包以及不执行`fork`操作。此项目不是特定于 AFL
开发的，但被许多用户反馈是相当有用的项目。此项目需要一些汇编的知识。
项目地址：
###  1.3 分布式 fuzzer 和相关自动化项目
**1.3.1 roving (Richo Healey)**
描述：此项目用于在一组机器上轻松运行管理`AFL`的客户端-服务器架构(`C-S`架构)。您最好不要在面向`Internet`或搭建在其他不受信任环境中的系统上使用它。
项目地址：
**1.3.2 Distfuzz-AFL (Martijn Bogaard)**
描述：简化对远程机器上`afl-fuzz`实例的管理。作者指出，当前的实现并不安全，不应在`Internet`上使用。
项目地址：
**1.3.3 AFLDFF (quantumvm)**
描述：用于管理`AFL`实例的美观的`GUI`。
项目地址：
**1.3.4 afl-launch (Ben Nagy)**
描述：带有简单`CLI`的批处理`AFL`启动器实用程序。
项目地址：
**1.3.5 AFL Utils (rc0r)**
描述：此项目用于简化对发现的崩溃进行分类以及启动并行`fuzzer`实例等操作。
项目地址：
项目地址(一种替代方案)：
**1.3.6 afl-fuzzing-scripts (Tobias Ospelt)**
描述：简化启动多个并行`AFL`实例的过程。
项目地址：
**1.3.7 afl-sid (Jacek Wielemborek)**
描述：允许用户通过`Docker`更方便地构建和部署`AFL`。
项目地址：
项目地址(一种替代方案)：
**1.3.8 afl-monitor (Paul S. Ziegler)**
描述：提供有关正在运行的`AFL`作业的更详细和通用的统计数据。