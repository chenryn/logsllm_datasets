dimension column specified in the expression list of a ROLLUP, CUBE, or GROUPING
SETS extension of the GROUP BY clause.
The return value of the GROUPING function is either a 0 or 1. In the result set of a query,
if the column expression specified in the GROUPING function is null because the row
represents a subtotal over multiple values of that column then the GROUPING function
returns a value of 1. If the row returns results based on a particular value of the column
specified in the GROUPING function, then the GROUPING function returns a value of 0. In
the latter case, the column can be null as well as non-null, but in any case, it is for a
particular value of that column, not a subtotal across multiple values.
The following query shows how the return values of the GROUPING function correspond
to the subtotal lines.
SELECT loc, dname, job, COUNT(*) AS "employees",
GROUPING(loc) AS "gf_loc",
GROUPING(dname) AS "gf_dname",
GROUPING(job) AS "gf_job"
FROM emp e, dept d
WHERE e.deptno = d.deptno
GROUP BY ROLLUP (loc, dname, job)
ORDER BY 1, 2, 3;
In the three right-most columns displaying the output of the GROUPING functions, a value
of 1 appears on a subtotal line wherever a subtotal is taken across values of the
corresponding columns.
loc | dname | job | employees | gf_loc | gf_dname | gf_job
----------+------------+-----------+-----------+--------+----------+--------
BOSTON | OPERATIONS | ANALYST | 1 | 0 | 0 | 0
BOSTON | OPERATIONS | CLERK | 1 | 0 | 0 | 0
BOSTON | OPERATIONS | MANAGER | 1 | 0 | 0 | 0
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 78
Database Compatibility for Oracle® Developers Guide
BOSTON | OPERATIONS | | 3 | 0 | 0 | 1
BOSTON | RESEARCH | ANALYST | 2 | 0 | 0 | 0
BOSTON | RESEARCH | CLERK | 2 | 0 | 0 | 0
BOSTON | RESEARCH | MANAGER | 1 | 0 | 0 | 0
BOSTON | RESEARCH | | 5 | 0 | 0 | 1
BOSTON | | | 8 | 0 | 1 | 1
CHICAGO | SALES | CLERK | 1 | 0 | 0 | 0
CHICAGO | SALES | MANAGER | 1 | 0 | 0 | 0
CHICAGO | SALES | SALESMAN | 4 | 0 | 0 | 0
CHICAGO | SALES | | 6 | 0 | 0 | 1
CHICAGO | | | 6 | 0 | 1 | 1
NEW YORK | ACCOUNTING | CLERK | 1 | 0 | 0 | 0
NEW YORK | ACCOUNTING | MANAGER | 1 | 0 | 0 | 0
NEW YORK | ACCOUNTING | PRESIDENT | 1 | 0 | 0 | 0
NEW YORK | ACCOUNTING | | 3 | 0 | 0 | 1
NEW YORK | | | 3 | 0 | 1 | 1
| | | 17 | 1 | 1 | 1
(20 rows)
These indicators can be used as screening criteria for particular subtotals. For example,
using the previous query, you can display only those subtotals for loc and dname
combinations by using the GROUPING function in a HAVING clause.
SELECT loc, dname, job, COUNT(*) AS "employees",
GROUPING(loc) AS "gf_loc",
GROUPING(dname) AS "gf_dname",
GROUPING(job) AS "gf_job"
FROM emp e, dept d
WHERE e.deptno = d.deptno
GROUP BY ROLLUP (loc, dname, job)
HAVING GROUPING(loc) = 0
AND GROUPING(dname) = 0
AND GROUPING(job) = 1
ORDER BY 1, 2;
This query produces the following result:
loc | dname | job | employees | gf_loc | gf_dname | gf_job
----------+------------+-----+-----------+--------+----------+--------
BOSTON | OPERATIONS | | 3 | 0 | 0 | 1
BOSTON | RESEARCH | | 5 | 0 | 0 | 1
CHICAGO | SALES | | 6 | 0 | 0 | 1
NEW YORK | ACCOUNTING | | 3 | 0 | 0 | 1
(4 rows)
The GROUPING function can be used to distinguish a subtotal row from a base aggregate
row or from certain subtotal rows where one of the items in the expression list returns
null as a result of the column on which the expression is based being null for one or more
rows in the table, as opposed to representing a subtotal over the column.
To illustrate this point, the following row is added to the emp table. This provides a row
with a null value for the job column.
INSERT INTO emp (empno,ename,deptno) VALUES (9004,'PETERS',40);
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 79
Database Compatibility for Oracle® Developers Guide
The following query is issued using a reduced number of rows for clarity.
SELECT loc, job, COUNT(*) AS "employees",
GROUPING(loc) AS "gf_loc",
GROUPING(job) AS "gf_job"
FROM emp e, dept d
WHERE e.deptno = d.deptno AND loc = 'BOSTON'
GROUP BY CUBE (loc, job)
ORDER BY 1, 2;
Note that the output contains two rows containing BOSTON in the loc column and spaces
in the job column (fourth and fifth entries in the table).
loc | job | employees | gf_loc | gf_job
--------+---------+-----------+--------+--------
BOSTON | ANALYST | 3 | 0 | 0
BOSTON | CLERK | 3 | 0 | 0
BOSTON | MANAGER | 2 | 0 | 0
BOSTON | | 1 | 0 | 0
BOSTON | | 9 | 0 | 1
| ANALYST | 3 | 1 | 0
| CLERK | 3 | 1 | 0
| MANAGER | 2 | 1 | 0
| | 1 | 1 | 0
| | 9 | 1 | 1
(10 rows)
The fifth row where the GROUPING function on the job column (gf_job) returns 1
indicates this is a subtotal over all jobs. Note that the row contains a subtotal value of 9 in
the employees column.
The fourth row where the GROUPING function on the job column as well as on the loc
column returns 0 indicates this is a base aggregate of all rows where loc is BOSTON and
job is null, which is the row inserted for this example. The employees column contains
1, which is the count of the single such row inserted.
Also note that in the ninth row (next to last) the GROUPING function on the job column
returns 0 while the GROUPING function on the loc column returns 1 indicating this is a
subtotal over all locations where the job column is null, which again, is a count of the
single row inserted for this example.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 80
Database Compatibility for Oracle® Developers Guide
2.2.6.5 GROUPING_ID Function
The GROUPING_ID function provides a simplification of the GROUPING function in order
to determine the subtotal level of a row in the result set from a ROLLBACK, CUBE, or
GROUPING SETS extension.
The GROUPING function takes only one column expression and returns an indication of
whether or not a row is a subtotal over all values of the given column. Thus, multiple
GROUPING functions may be required to interpret the level of subtotals for queries with
multiple grouping columns.
The GROUPING_ID function accepts one or more column expressions that have been used
in the ROLLBACK, CUBE, or GROUPING SETS extensions and returns a single integer that
can be used to determine over which of these columns a subtotal has been aggregated.
The general syntax for use of the GROUPING_ID function is shown by the following.
SELECT [ expr ...,]
GROUPING_ID( col_expr_1 [, col_expr_2 ] ... )
[, expr ] ...
FROM ...
GROUP BY [...,]
{ ROLLUP | CUBE | GROUPING SETS }( [...,] col_expr_1
[, col_expr_2 ] [, ...] ) [, ...]
The GROUPING_ID function takes one or more parameters that must be expressions of
dimension columns specified in the expression list of a ROLLUP, CUBE, or GROUPING
SETS extension of the GROUP BY clause.
The GROUPING_ID function returns an integer value. This value corresponds to the base-
10 interpretation of a bit vector consisting of the concatenated 1’s and 0’s that would be
returned by a series of GROUPING functions specified in the same left-to-right order as
the ordering of the parameters specified in the GROUPING_ID function.
The following query shows how the returned values of the GROUPING_ID function
represented in column gid correspond to the values returned by two GROUPING functions
on columns loc and dname.
SELECT loc, dname, COUNT(*) AS "employees",
GROUPING(loc) AS "gf_loc", GROUPING(dname) AS "gf_dname",
GROUPING_ID(loc, dname) AS "gid"
FROM emp e, dept d
WHERE e.deptno = d.deptno
GROUP BY CUBE (loc, dname)
ORDER BY 6, 1, 2;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 81
Database Compatibility for Oracle® Developers Guide
In the following output, note the relationship between a bit vector consisting of the
gf_loc value and gf_dname value compared to the integer given in gid.
loc | dname | employees | gf_loc | gf_dname | gid
----------+------------+-----------+--------+----------+-----
BOSTON | OPERATIONS | 3 | 0 | 0 | 0
BOSTON | RESEARCH | 5 | 0 | 0 | 0
CHICAGO | SALES | 6 | 0 | 0 | 0
NEW YORK | ACCOUNTING | 3 | 0 | 0 | 0
BOSTON | | 8 | 0 | 1 | 1
CHICAGO | | 6 | 0 | 1 | 1
NEW YORK | | 3 | 0 | 1 | 1
| ACCOUNTING | 3 | 1 | 0 | 2
| OPERATIONS | 3 | 1 | 0 | 2
| RESEARCH | 5 | 1 | 0 | 2
| SALES | 6 | 1 | 0 | 2
| | 17 | 1 | 1 | 3
(12 rows)
The following table provides specific examples of the GROUPING_ID function
calculations based on the GROUPING function return values for four rows of the output.
Bit Vector GROUPING_ID
loc dname
gf_loc gf_dname gid
BOSTON OPERATIONS 0 * 21 + 0 * 20 0
BOSTON null 0 * 21 + 1 * 20 1
null ACCOUNTING 1 * 21 + 0 * 20 2
null null 1 * 21 + 1 * 20 3
The following table summarizes how the GROUPING_ID function return values
correspond to the grouping columns over which aggregation occurs.
Bit Vector GROUPING_ID
Aggregation by Column
gf_loc gf_dname gid
loc, dname 0 0 0
loc 0 1 1
dname 1 0 2
Grand Total 1 1 3
So to display only those subtotals by dname, the following simplified query can be used
with a HAVING clause based on the GROUPING_ID function.
SELECT loc, dname, COUNT(*) AS "employees",
GROUPING(loc) AS "gf_loc", GROUPING(dname) AS "gf_dname",
GROUPING_ID(loc, dname) AS "gid"
FROM emp e, dept d
WHERE e.deptno = d.deptno
GROUP BY CUBE (loc, dname)
HAVING GROUPING_ID(loc, dname) = 2
ORDER BY 6, 1, 2;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 82
Database Compatibility for Oracle® Developers Guide
The following is the result of the query.
loc | dname | employees | gf_loc | gf_dname | gid
-----+------------+-----------+--------+----------+-----
| ACCOUNTING | 3 | 1 | 0 | 2
| OPERATIONS | 3 | 1 | 0 | 2
| RESEARCH | 5 | 1 | 0 | 2
| SALES | 6 | 1 | 0 | 2
(4 rows)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 83
Database Compatibility for Oracle® Developers Guide
2.3 Profile Management
Advanced Server allows a database superuser to create named profiles. Each profile
defines rules for password management that augment password and md5 authentication.
The rules in a profile can:
 count failed login attempts
 lock an account due to excessive failed login attempts
 mark a password for expiration
 define a grace period after a password expiration
 define rules for password complexity
 define rules that limit password re-use
A profile is a named set of password attributes that allow you to easily manage a group of
roles that share comparable authentication requirements. If the password requirements
change, you can modify the profile to have the new requirements applied to each user that
is associated with that profile.
After creating the profile, you can associate the profile with one or more users. When a
user connects to the server, the server enforces the profile that is associated with their
login role. Profiles are shared by all databases within a cluster, but each cluster may have
multiple profiles. A single user with access to multiple databases will use the same
profile when connecting to each database within the cluster.
Advanced Server creates a profile named default that is associated with a new role
when the role is created unless an alternate profile is specified. If you upgrade to
Advanced Server from a previous server version, existing roles will automatically be
assigned to the default profile. You cannot delete the default profile.
The default profile specifies the following attributes:
FAILED_LOGIN_ATTEMPTS UNLIMITED
PASSWORD_LOCK_TIME UNLIMITED
PASSWORD_LIFE_TIME UNLIMITED
PASSWORD_GRACE_TIME UNLIMITED
PASSWORD_REUSE_TIME UNLIMITED
PASSWORD_REUSE_MAX UNLIMITED
PASSWORD_VERIFY_FUNCTION NULL
A database superuser can use the ALTER PROFILE command to modify the values
specified by the default profile. For more information about modifying a profile, see
Section 2.3.2.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 84
Database Compatibility for Oracle® Developers Guide
2.3.1 Creating a New Profile
Use the CREATE PROFILE command to create a new profile. The syntax is:
CREATE PROFILE profile_name
[LIMIT {parameter value} ... ];
Include the LIMIT clause and one or more space-delimited parameter/value pairs to
specify the rules enforced by Advanced Server.
Parameters:
profile_name specifies the name of the profile.
parameter specifies the attribute limited by the profile.
value specifies the parameter limit.
Advanced Server supports the value shown below for each parameter:
FAILED_LOGIN_ATTEMPTS specifies the number of failed login attempts that a user
may make before the server locks the user out of their account for the length of time
specified by PASSWORD_LOCK_TIME. Supported values are:
 An INTEGER value greater than 0.
 DEFAULT - the value of FAILED_LOGIN_ATTEMPTS specified in the
DEFAULT profile.
 UNLIMITED – the connecting user may make an unlimited number of failed
login attempts.
PASSWORD_LOCK_TIME specifies the length of time that must pass before the server
unlocks an account that has been locked because of FAILED_LOGIN_ATTEMPTS.
Supported values are:
 A NUMERIC value greater than or equal to 0. To specify a fractional portion
of a day, specify a decimal value. For example, use the value 4.5 to specify 4
days, 12 hours.
 DEFAULT - the value of PASSWORD_LOCK_TIME specified in the DEFAULT
profile.
 UNLIMITED – the account is locked until it is manually unlocked by a
database superuser.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 85
Database Compatibility for Oracle® Developers Guide
PASSWORD_LIFE_TIME specifies the number of days that the current password may
be used before the user is prompted to provide a new password. Include the
PASSWORD_GRACE_TIME clause when using the PASSWORD_LIFE_TIME clause to
specify the number of days that will pass after the password expires before
connections by the role are rejected. If PASSWORD_GRACE_TIME is not specified, the
password will expire on the day specified by the default value of
PASSWORD_GRACE_TIME, and the user will not be allowed to execute any command
until a new password is provided. Supported values are:
 A NUMERIC value greater than or equal to 0. To specify a fractional portion
of a day, specify a decimal value. For example, use the value 4.5 to specify 4
days, 12 hours.
 DEFAULT - the value of PASSWORD_LIFE_TIME specified in the DEFAULT
profile.
 UNLIMITED – The password does not have an expiration date.
PASSWORD_GRACE_TIME specifies the length of the grace period after a password
expires until the user is forced to change their password. When the grace period
expires, a user will be allowed to connect, but will not be allowed to execute any
command until they update their expired password. Supported values are:
 A NUMERIC value greater than or equal to 0. To specify a fractional portion
of a day, specify a decimal value. For example, use the value 4.5 to specify 4
days, 12 hours.
 DEFAULT - the value of PASSWORD_GRACE_TIME specified in the DEFAULT
profile.
 UNLIMITED – The grace period is infinite.
PASSWORD_REUSE_TIME specifies the number of days a user must wait before re-
using a password. The PASSWORD_REUSE_TIME and PASSWORD_REUSE_MAX
parameters are intended to be used together. If you specify a finite value for one of
these parameters while the other is UNLIMITED, old passwords can never be reused.
If both parameters are set to UNLIMITED there are no restrictions on password reuse.
Supported values are:
 A NUMERIC value greater than or equal to 0. To specify a fractional portion
of a day, specify a decimal value. For example, use the value 4.5 to specify 4
days, 12 hours.
 DEFAULT - the value of PASSWORD_REUSE_TIME specified in the DEFAULT
profile.
 UNLIMITED – The password can be re-used without restrictions.
PASSWORD_REUSE_MAX specifies the number of password changes that must occur
before a password can be reused. The PASSWORD_REUSE_TIME and
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 86
Database Compatibility for Oracle® Developers Guide
PASSWORD_REUSE_MAX parameters are intended to be used together. If you specify a
finite value for one of these parameters while the other is UNLIMITED, old passwords
can never be reused. If both parameters are set to UNLIMITED there are no
restrictions on password reuse. Supported values are:
 An INTEGER value greater than or equal to 0.
 DEFAULT - the value of PASSWORD_REUSE_MAX specified in the DEFAULT
profile.
 UNLIMITED – The password can be re-used without restrictions.
PASSWORD_VERIFY_FUNCTION specifies password complexity. Supported values
are:
 The name of a PL/SQL function.
 DEFAULT - the value of PASSWORD_VERIFY_FUNCTION specified in the
DEFAULT profile.
 NULL
Notes
Use DROP PROFILE command to remove the profile.
Examples
The following command creates a profile named acctg. The profile specifies that if a
user has not authenticated with the correct password in five attempts, the account will be
locked for one day:
CREATE PROFILE acctg LIMIT
FAILED_LOGIN_ATTEMPTS 5
PASSWORD_LOCK_TIME 1;
The following command creates a profile named sales. The profile specifies that a user
must change their password every 90 days:
CREATE PROFILE sales LIMIT
PASSWORD_LIFE_TIME 90
PASSWORD_GRACE_TIME 3;
If the user has not changed their password before the 90 days specified in the profile has
passed, they will be issued a warning at login. After a grace period of 3 days, their
account will not be allowed to invoke any commands until they change their password.