# Are All BSDs Created Equally? A Survey of BSD Kernel Vulnerabilities

## Speaker
- **Ilja van Sprundel**
  - Email: PI:EMAIL!
  - Director of Penetration Testing at IOActive
  - Specializes in penetration testing, code review, and breaking things for fun and profit.

## Outline
1. Introduction
2. Data
3. Vulnerabilities Over the Years
4. Test by Audit
5. Common Attack Surfaces
6. Somewhat Less Common Attack Surfaces
7. Results and Conclusions

## Overview
- This talk focuses on BSD kernel vulnerabilities.
- It compares different BSD flavors (FreeBSD, NetBSD, OpenBSD).
- The audience includes low-level security enthusiasts, UNIX/BSD geeks, Linux folks, and curious individuals interested in OS internals.
- Basic knowledge of UNIX/BSD internals is assumed.

## Standing on the Shoulders of Giants
- Previous notable BSD kernel security research by:
  - Silvio Cesare
  - The noir
  - Esa Etelavuori
  - Patroklos (argp) Argyroudis
  - Christer Oberg
  - Joel Eriksson
  - Clement Lecigne

## Introduction
- The statement "Are all BSDs created equally?" has always intrigued me.
- Is it true?
- Can we look at some data to find out?

## Data Sources
- **Linux Kernel Vulnerabilities**: 
  - Data from 1999 to present available at [CVE Details](https://www.cvedetails.com/product/47/Linux-Linux-Kernel.html)
- **BSD Kernel Vulnerabilities**:
  - FreeBSD: [FreeBSD Security Advisories](https://www.freebsd.org/security/advisories.html)
  - NetBSD: [NetBSD Security Advisory](http://netbsd.org/support/security/advisory.html)
  - OpenBSD: [OpenBSD Errata](https://www.openbsd.org/errata*.html)

## BSD Kernel Vulnerabilities Over the Years
- Observations by Theo were astute.
- 20 was a very low estimate.
- Are these numbers on equal footing?
- Many eyeballs? But is there some truth to this in this case?

| Year | FreeBSD | NetBSD | OpenBSD |
|------|---------|--------|----------|
| 1999 | 3       | 8      | 10       |
| 2000 | 8       | 4      | 15       |
| 2001 | 6       | 7      | 13       |
| 2002 | 11      | 6      | 11       |
| 2003 | 7       | 3      | 8        |
| 2004 | 8       | 5      | 13       |
| 2005 | 11      | 8      | 4        |
| 2006 | 9       | 15     | 6        |
| 2007 | 1       | 4      | 9        |
| 2008 | 8       | 6      | 7        |
| 2009 | 5       | 1      | 4        |
| 2010 | 3       | 6      | 8        |
| 2011 | 1       | 2      | 3        |
| 2012 | 2       | 1      | 0        |
| 2013 | 8       | 8      | 6        |
| 2014 | 7       | 6      | 10       |
| 2015 | 7       | 2      | 6        |
| 2016 | 12      | 1      | 17       |
| 2017 | 1       | 3      | 13       |
| Total | 118     | 96     | 163      |

## Test by Audit
- **Silvio Cesare's Work (2002)**:
  - Provided some answers: [Black Hat Presentation](https://www.blackhat.com/presentations/bh-usa-03/bh-us-03-cesare.pdf)
  - His results indicate no significant quality difference between BSDs and Linux.
  - However, this was over a decade ago. Have things changed?
  - Time spent on BSDs was only a few days compared to Linux. Would more time yield more bugs?
  - Bugs were mostly integer overflows and information leaks.
  - Other issues that can be easily found?

## Test by Audit Redux
- Conducted an audit of BSD source code in April, May, and June.
- Focused on attack surfaces:
  - **Very Common**:
    - Syscalls
    - TCP/IP stack
  - **Somewhat Less Common**:
    - Drivers (ioctl interface)
    - Compatibility code
    - Trap handlers
    - Filesystems
    - Other networking (Bluetooth, Wi-Fi, IrDA)

### Syscalls
- **Attack Surface Entry Point**:
  - Syscalls are how userland interacts with the kernel.
  - Hundreds of syscalls:
    - FreeBSD: ~550
    - OpenBSD: ~330
    - NetBSD: ~480
  - Assumption: Well-tested, less likely to contain security bugs.

#### Sample Bug 1: `sys_sendsyslog`
- **Vulnerability**:
  - Unbounded length passed to `malloc()` from userland.
  - Triggers a kernel panic.
  - Present in OpenBSD 6.1 since OpenBSD 6.0.

```c
int sys_sendsyslog(struct proc *p, void *v, register_t *retval) {
    struct sys_sendsyslog_args *uap = v;
    int error;
    static int dropped_count, orig_error;
    ...
    error = dosendsyslog(p, SCARG(uap, buf), SCARG(uap, nbyte), SCARG(uap, flags), UIO_USERSPACE);
    ...
    return (error);
}

int dosendsyslog(struct proc *p, const char *buf, size_t nbyte, int flags, enum uio_seg sflg) {
    ...
    struct iovec aiov;
    struct uio auio;
    size_t i, len;
    ...
    aiov.iov_base = (char *)buf;
    aiov.iov_len = nbyte; // User-controlled size_t, never capped anywhere
    ...
    auio.uio_resid = aiov.iov_len;
    ...
    len = auio.uio_resid; // User-controlled size_t
    if (fp) {
        ...
    } else if (consly || cn_devvp) {
        ...
    } else {
        kbuf = malloc(len, M_TEMP, M_WAITOK); // Unbound length passed to malloc()
        ...
    }
    ...
}
```

#### Sample Bug 2: `sys_kldstat`
- **Vulnerability**:
  - Does not fully initialize a structure before copying it to userland.
  - Information leak.
  - Present in FreeBSD 11.0 since 2007.

```c
int sys_kldstat(struct thread *td, struct kldstat_args *uap) {
    struct kld_file_stat stat;
    int error, version;
    ...
    if ((error = copyin(&uap->stat->version, &version, sizeof(version))) != 0)
        return (error);
    if (version != sizeof(struct kld_file_stat_1) && version != sizeof(struct kld_file_stat))
        return (EINVAL);
    error = kern_kldstat(td, uap->fileid, &stat); // Doesn't fully init stat struct
    if (error != 0)
        return (error);
    return (copyout(&stat, uap->stat, version)); // Uninitialized stat struct copied to user
}
```

### TCP/IP Stack
- **Attack Surface Entry Point**:
  - Obvious and well-known attack surface.
  - Has been around for a long time.
  - Assumption: Well-tested, less likely to find bugs.

#### Sample Bug: `pppoe_dispatch_disc_pkt`
- **Vulnerability**:
  - Double free when parsing packet.
  - Affects OpenBSD 6.1 since 2004.
  - Fixed in NetBSD a few months ago.

```c
static void pppoe_dispatch_disc_pkt(struct mbuf *m, int off) {
    ...
    int noff, err, errortag;
    u_int16_t *max_payload;
    u_int16_t tag, len;
    ...
    while (off + sizeof(*pt) < m_pkthdr.len) {
        n = m_pulldown(m, off, sizeof(*pt), &noff);
        ...
        pt = (struct pppoetag *)((mtod(n, caddr_t)) + noff);
        tag = ntohs(pt->tag);
        len = ntohs(pt->len);
        ...
        switch (tag) {
            ...
            case PPPOE_TAG_SNAME_ERR:
                err_msg = "SERVICE NAME ERROR";
                errortag = 1;
                break;
            ...
        }
        if (err_msg) {
            log(LOG_INFO, "%s: %s: ", devname, err_msg);
            if (errortag && !len) {
                n = m_pulldown(m, off, len, &noff); // If m_pulldown() fails, it will mfreem(m)
                if (n) {
                    u_int8_t *et = mtod(n, caddr_t) + noff;
                    while (len--)
                        addlog("%c", *et++);
                }
            }
            addlog("\n");
            goto done; // Will end up mfreem(m) again
        }
        off += len;
    }
    ...
done:
    m_freem(m); // Possible double free
}
```

### Drivers
- **Attack Surface Entry Point**:
  - Drivers, especially those with ioctl interfaces, are common attack surfaces.
  - Handling of mbufs is complex and error-prone.

This structured and professional presentation aims to provide a clear and comprehensive overview of the topic, making it easier for the audience to follow and understand.