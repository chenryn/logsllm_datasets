# CTF 攻略：CTF 比赛中关于 ZIP 的总结

### 译文声明
本文为翻译文章，原文来源：安全客。译文仅供参考，具体内容及含义以原文为准。

### 作者
**M4xW4n9**  
预估稿费：300 RMB  
投稿方式：发送邮件至 linwei#360.cn 或登录网页版在线投稿

### 前言
在 CTF 比赛的 MISC 和 CRYPTO 类别中，经常需要处理 ZIP 压缩包。本文将对 ZIP 相关的知识进行总结。所有使用的文件和工具均可在此网盘中找到。

### 目录
1. **隐写篇**
   - 通过进制转换隐藏信息
   - 在图片中隐藏压缩包（图种）
2. **加密篇**
   - 伪加密
   - 爆破/字典/掩码攻击
   - 明文攻击
   - CRC32 碰撞
3. **格式篇**
   - 修改格式

### 隐写篇

#### 0x01. 通过进制转换隐藏信息
这种方法相对简单。以下是一个来自 ISCC 2017 Basic-04 的示例题目。题目提供了一个文本文件，内容如下：
```
...
```

观察发现，所有数据都在 16 进制表示范围内。因此，尝试使用十六进制编码解密。Python 脚本如下：

```python
import binascii

with open('file.txt', 'r') as f:
    hex_data = f.read()
    binary_data = binascii.unhexlify(hex_data)
    with open('output.zip', 'wb') as out:
        out.write(binary_data)
```

运行结果表明，尽管存在大量乱码，但可以看到 `flag.txt`。这表明文本中的字符是 ZIP 包的 16 进制表示。导入到 16 进制编辑器（如 010 Editor）中，保存为 `.zip` 文件后，确认了这是一个正常的 ZIP 文件。

除了 16 进制编码转换，有时还会遇到 2 进制编码转换，处理方法类似。

#### 0x02. 在图片中隐藏压缩包（图种）
这是 ZIP 中常见的隐写方法，常用于在图片中隐藏压缩包。以 JPG 图片为例，完整的 JPG 文件以 `FF D8` 开头，`FF D9` 结尾。图片浏览器会忽略 `FF D9` 之后的内容，因此可以在 JPG 文件中加入其他文件。

例如，ISCC 2017 Basic-07 题目中，可以使用 Kali 下的 `binwalk` 检测图片中是否存在压缩包：
```bash
binwalk image.jpg
```

分离压缩包的方法有：
1. 使用 `foremost` 工具：
   ```bash
   foremost image.jpg
   ```
   默认输出文件夹为 `output`，从中可以找到分离出的 ZIP 文件。
2. 更简单的方法是直接将图片后缀改为 `.zip` 并解压。

### 加密篇

#### 0x03. 伪加密
ZIP 伪加密与 ZIP 文件格式有关。如果更改未加密 ZIP 包的加密标记位，在打开时会提示该文件已加密。处理伪加密的方法包括：
1. 在 Mac OS 及部分 Linux（如 Kali）系统中直接打开伪加密的 ZIP 压缩包。
2. 使用检测伪加密的 `ZipCenOp.jar` 工具：
   ```bash
   java -jar ZipCenOp.jar r xxx.zip
   ```
3. 使用 16 进制编辑器改回加密标记位。

#### 0x04. 爆破/字典/掩码攻击
这三种方法本质上都是逐个尝试密码，但待选密码集合不同：
1. **爆破**：逐个尝试选定集合中的所有可能密码。
2. **字典**：使用常用密码字典，提高效率。
3. **掩码攻击**：如果已知密码的部分字符，构造掩码进行攻击。

推荐使用 Windows 下的 `AZPR` 工具。示例如下：
- **爆破**：ISCC 2017 Basic-08 题目，选定暴力攻击、字符集和长度后进行爆破。
- **字典**：ISCC 2017 Basic-07 题目，从图片中分离出一个加密的 ZIP 压缩包，使用字典攻击。
- **掩码攻击**：ISCC 2017 Misc-06 题目，根据题目提示构造掩码进行攻击。

#### 0x05. 明文攻击
明文攻击是一种高效手段。如果你知道 ZIP 包中的一个已知文件（大于 12 字节），可以用其来找加密密钥并解锁其他文件。具体原理请自行查阅相关资料。

示例：已知 `明文攻击.zip` 中存在 `明文.txt`，将 `明文.txt` 压缩并确保 CRC32 一致，然后进行明文攻击。

#### 0x06. CRC32 碰撞
CRC32 是一种冗余校验码，产生 32 位校验值。利用 CRC32 碰撞可以直接爆破出加密文件的内容。示例脚本如下：

```python
import binascii

crc = 0x9c4d9a5d

for i in range(100000):
    if (binascii.crc32(str(i)) & 0xffffffff) == crc:
        print(f"Found: {i}")
        break
```

注意 Python 版本差异，Python 2.x 需要进行无符号整数转换。

### 格式篇

#### 0x07. 修改格式
这种情况多样，难以详细总结。最常见的问题是缺少文件头或文件尾。了解 ZIP 文件格式有助于修复这些问题。示例链接提供了详细的 ZIP 文件格式说明。

### 总结
ZIP 不仅是我们生活中常用的文件格式，在 CTF 比赛中也非常重要。希望本文能对读者有所帮助。