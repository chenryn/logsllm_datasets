5000
10000
15000
20000
25000
30000
STrap (s) DTrap (s)
0.06
0.03
0.05
0.05
0.08
0.19
6.66
12.27
16.65
29.26
38.17
43.49
Table 1: Preparation Time by Data Owner
Table 3: Communication Times
Data Objects
5000
10000
15000
20000
25000
30000
Iterations Owner (s)
1.19
2.85
5.59
4.38
4.95
7.78
50
126
251
194
206
315
Provider (s)
44.79
250.16
774.90
759.20
1225.87
2427.29
Data Objects
5000
10000
15000
20000
25000
30000
Iterations Owner (s)
22.82
107.69
322.69
324.98
435.34
787.55
50
126
251
194
206
315
Table 2: Clustering Time and Iterations
Table 4: Time Of Using Original Clustering Algorithm
7.2 Evaluation
Recall that our clustering algorithm consists of two stages: prepa-
ration and clustering. The preparation stage is mainly performed by
the data owner. Table 1 shows the time in seconds the data owner
takes to encrypt data objects and compute static trapdoor informa-
tion, with respect to different number of data objects. The time for
encrypting the initial cluster centers is ignored and not shown in
the table, because it is very small (0 milliseconds in our test). With
the increase in the number of data objects, we can see an increase
in preparation time. However, the preparation stage is performed
only once; if these data objects are clustered multiple times or also
the server is used as the storage platform, the cost of preparation
stage can be amortized.
At the clustering stage, the service provider clusters the data ob-
jects with the dynamic trapdoor information interactively provided
by the data owner. Table 2 shows the processing time for both the
data owner and the service provider and the number of iterations,
with respect to the number of data objects. From this table, we can
see at the clustering stage the service provider spends much more
time than the data owner. This table also shows that the increase
of data objects does not mean more iterations needed by k-means
clustering.
Figure 2: Clustering Time per Iteration
To understand the relation between the clustering time and the
number of data objects in each clustering iteration, we divide the
clustering time in Table 2 by the corresponding number of itera-
tions. Figure 2 shows the clustering time per iteration spent by the
data owner and the service provider. It shows that, with the increase
of data objects number, the clustering time per iteration for the data
owner does not increase, while the time for the service provider
does.
In our clustering method, the data owner needs to communicate
with the service provider. Table 3 shows the communication time
for the data owner to send encrypted data objects, the static and dy-
namic trapdoor information. We should mention that the commu-
nication time is sensitive to the network status and how to commu-
nicate efﬁciently is orthogonal to our clustering method. However,
Table 3 tells us that the time for communicating dynamic trapdoor
information is much smaller than the time for communicating en-
crypted data objects and static trapdoor information, and does not
increase with the number of data objects. For encrypted data ob-
jects and static trapdoor information, they are communicated only
once and their communication time can be amortised like the time
of calculating them. The data owner still spends much less time
than the service provider even if the communication time in Table
3 is taken into account.
In addition, we also implemented the original clustering algo-
rithm described in Section 2 with the values represented by the
Java BigDecimal class and run it on the same data objects with
the same initial centers. By comparing the clustering results of two
implementations, we can check the correctness of clustering results
using our method. Table 4 gives the number of iterations and the
clustering time when running the original clustering algorithm on
Dell Ultrabook XPS 13 (the data owner’s machine). The numbers
of iterations in Table 2 and Table 4 with respect to the same set of
data objects are the same (also the same for the ﬁnal cluster centers
and allocations, which are not shown here), indicating the correct
clustering results of our method. On the other hand, for the data
owner, the time spent by the original clustering algorithm is higher
than the time spent in our clustering method (i.e., the sum of the
preparation time, the time of calculating dynamic trapdoor infor-
mation, and the communication time in Table 3), and much higher
with the increase of the number of data objects.
131We also take a test by clustering the data objects into 20 clusters.
For the preparation stage, the increase of clusters does not affect the
time of encrypting data objects, while the time of calculating static
trapdoor information is increased proportionally. For example, the
time of calculating static trapdoor information increases from 2.91s
to 6.76s for 10000 data objects, and from 5.94s to 13.23s for 20000
data objects. For the clustering stage, the time spent by the data
owner is not affected too much, while the time for the provider is
affected a lot. For example, there are 131 loops when clustering
10000 data objects and 140 loops when clustering 20000 data ob-
jects, with 4.61s and 4.90s spent by the data owner,and 465.68s and
1188.73 spent by the provider.
8. RELATED WORKS
The most related is the work on privacy-preserving distributed
(or two-party) k-means clustering, such as [13, 22, 10]. The dif-
ference between distributed k-means clustering and outsourced k-
means clustering has been discussed in the introduction. Since
these two clustering methods have different goals, they can be com-
plementary to each other. If a data owner in a distributed k-means
clustering does not have the capability to complete its task, then
this owner can outsource the task to a service provider. The com-
bination of these two k-means clustering methods can be a future
work.
In [9, 5], a diagnostic program or a linear branching program pro-
vided by a service provider is applied to data from the data owner.
The service provider wants to protect the privacy of the program,
while the data owner wants to ensure the privacy of data. Simi-
larly, in our work, the k-means clustering program, which might be
implemented for instance in a novel way that the service provider
wants to protect, is run by the service provider itself, hence the pri-
vacy of the clustering program is protected. On the other hand, in
[9, 5], the conditional comparison of two values, one from the data
owner and the other from the service provider (i.e., the input data
and the parameters in the programs), is implemented by using the
garbled circuit [21]. Since this comparison method needs to con-
vert a comparison operation into a software circuit, encrypt each bit
in the compared values and run the oblivious transfer protocol, this
method might not scale to a large volume of data like in k-means
data clustering. On the contrary, our method compares ciphertexts
by just comparing ordinary real numbers, with the assistance of
trapdoor information.
In functional encryption [7], there are restricted secret keys and
the key holder can learn the output of a program over the encrypted
input data without learning anything else about the data. Similarly,
our method allows the service provider to run the clustering pro-
gram over homomorphically encrypted data. In our work, the static
and dynamic trapdoor information can be regarded as secret keys in
functional encryption held by the service provider. The functional
encryption schemes, such as [11, 12], usually represent a function
as a Turing machine or software circuits with circuit depth restric-
tion. These schemes have not been applied in practical applications.
Our method can also be applied to comparing encrypted dis-
tances generated by using other homomorphic encryption schemes,
such as [19]. For the homomorphic encryption scheme described
in [19], a message m is encrypted into a pair of subciphertexts
(a0 (cid:3) r0 + t (cid:3) r1 + m; a1 (cid:3) r0 + t (cid:3) r2), where a0 and a1 are two
constants used as public keys, t a constant used as the modulus, and
ri (1 (cid:20) i (cid:20) 3) three random numbers. Then, using this scheme,
the ﬁrst subciphertexts of vij and ctj (the jth attributes of data ob-
ject Oi and the cluster center Ct) are a0 (cid:3) rij0 + t (cid:3) rij1 + vij
and a0 (cid:3) r
tj1 + ctj, respectively. Let k1 (cid:3) t1 = 1,
′
N Vij = a0 (cid:3) rij0 + t(cid:3) rij1 and N Ctj = a0 (cid:3) r
′
tj1. Then,
tj0 + t (cid:3) r
′
tj0 + t(cid:3) r
′
the encrypted distance ED2(Oi; Ct), and the static and trapdoor
information can be calculated according to their deﬁnitions in Sec-
tion 5. However, if data objects are encrypted with the scheme
in [19], the order-preserving indexes of squared distances between
data objects and cluster centers may not be randomized well, since
the noises used in the indexes can only be sampled from the small
range [0; 1 (cid:3) sens), where sens is the sensitivity of the squared
distances.
9. CONCLUSION
In this paper, we described a method that allows the k-means
clustering algorithm to run over data encrypted with a homomor-
phic encryption scheme. This method can mitigate the privacy
concern of data owners when they outsource their data to a ser-
vice provider for analytics. The homomorphic encryption schemes
are usually probabilistic, and hence the ciphertexts of homomor-
phic encryption cannot be compared by using the usual comparison
operations. In our method, we proposed an efﬁcient approach to
comparing ciphertexts with the trapdoor information provided the
key holder or the data owner. We have implemented our method
in a prototype and evaluated its performance. The future work is
to combine outsourced k-means clustering with the existing dis-
tributed k-means clustering, or apply our method to securely out-
source other data analytics algorithms.
10. REFERENCES
[1] D. Agrawal, A. E. Abbadi, F. Emekçi, and A. Metwally.
Database management as a service: Challenges and
opportunities. In Proceedings of the 25th International
Conference on Data Engineering, pages 1709–1716, 2009.
[2] R. Agrawal, J. Kiernan, R. Srikant, and Y. Xu. Order
preserving encryption for numeric data. In Proceedings of
the 2004 ACM SIGMOD international conference on
Management of data, SIGMOD ’04, pages 563–574, 2004.
[3] R. Agrawal, J. Kiernan, R. Srikant, and Y. Xu. Order
preserving encryption for numeric data. In Proceedings of
the 2004 ACM SIGMOD international conference on
Management of data, SIGMOD ’04, pages 563–574, New
York, NY, USA, 2004. ACM.
[4] R. Agrawal and R. Srikant. Privacy-preserving data mining.
In Proceedings of the 2000 ACM SIGMOD international
conference on Management of data, pages 439–450, 2000.
[5] M. Barni, P. Failla, V. Kolesnikov, R. Lazzeretti, A.-R.
Sadeghi, and T. Schneider. Secure evaluation of private linear
branching programs with medical applications. In M. Backes
and P. Ning, editors, ESORICS, volume 5789 of Lecture
Notes in Computer Science, pages 424–439. Springer, 2009.
[6] A. Boldyreva, N. Chenette, Y. Lee, and A. O’Neill.
Order-preserving symmetric encryption. In Proceedings of
the 28th Annual International Conference on Advances in
Cryptology, EUROCRYPT ’09, pages 224–241, 2009.
[7] D. Boneh, A. Sahai, and B. Waters. Functional encryption:
Deﬁnitions and challenges. In Proceedings of the 8th
Conference on Theory of Cryptography, TCC’11, pages
253–273, Berlin, Heidelberg, 2011. Springer-Verlag.
[8] Z. Brakerski and V. Vaikuntanathan. Fully homomorphic
encryption from ring-lwe and security for key dependent
messages. In P. Rogaway, editor, CRYPTO, volume 6841 of
Lecture Notes in Computer Science, pages 505–524.
Springer, 2011.
[9] J. Brickell, D. E. Porter, V. Shmatikov, and E. Witchel.
Privacy-preserving remote diagnostics. In Proceedings of the
13214th ACM Conference on Computer and Communications
Security, CCS ’07, pages 498–507, New York, NY, USA,
2007. ACM.
[10] P. Bunn and R. Ostrovsky. Secure two-party k-means
clustering. In Proceedings of the 14th ACM conference on
Computer and communications security, CCS ’07, pages
486–497, New York, NY, USA, 2007. ACM.
[11] S. Goldwasser, Y. Kalai, R. A. Popa, V. Vaikuntanathan, and
N. Zeldovich. Reusable garbled circuits and succinct
functional encryption. In Proceedings of the 45th Annual
ACM Symposium on Symposium on Theory of Computing,
STOC ’13, pages 555–564, New York, NY, USA, 2013.
ACM.
[12] S. Goldwasser, Y. T. Kalai, R. A. Popa, V. Vaikuntanathan,
and N. Zeldovich. How to run turing machines on encrypted
data. In R. Canetti and J. A. Garay, editors, CRYPTO (2),
volume 8043 of Lecture Notes in Computer Science, pages
536–553. Springer, 2013.
[13] G. Jagannathan and R. N. Wright. Privacy-preserving
distributed k-means clustering over arbitrarily partitioned
data. In Proceedings of the 11th ACM SIGKDD international
conference on Knowledge discovery in data mining, 2005.
[14] M. K. Jiawei Han and J. Pei. Data Mining: Concepts and
Techniques, 3rd ed. Morgan Kaufmann Publishers, 2011.
[15] H. Kargupta, S. Datta, Q. Wang, and K. Sivakumar. On the
privacy preserving properties of random data perturbation
techniques. In Proceedings of the Third IEEE International
Conference on Data Mining, ICDM ’03, pages 99–,
Washington, DC, USA, 2003. IEEE Computer Society.
[16] J. Katz and Y. Lindell. Introduction to Modern Cryptography
(Chapman & Hall/Crc Cryptography and Network Security
Series). Chapman & Hall/CRC, 2007.
[17] D. Liu. Homomorphic encryption for database querying.
Inernational Patent Application No.: PCT/AU2013/000674
(Accessible via
http://patentscope.wipo.int/search/en/WO2013188929),
2013.
[18] D. Liu and S. Wang. Programmable order preserving secure
index for encrypted database query. In Proceedings of the 5th
IEEE International Conference on Cloud Computing, 2012.
[19] M. Naehrig, K. Lauter, and V. Vaikuntanathan. Can
homomorphic encryption be practical? In Proceedings of the
3rd ACM workshop on Cloud computing security workshop,
CCSW ’11, pages 113–124, 2011.
[20] R. Ostrovsky, Y. Rabani, L. J. Schulman, and C. Swamy. The
effectiveness of lloyd-type methods for the k-means problem.
In Proceedings of the 47th Annual IEEE Symposium on
Foundations of Computer Science, pages 165–176, 2006.
[21] A. C.-C. Yao. How to generate and exchange secrets. In
Proceedings of the 27th Annual Symposium on Foundations
of Computer Science, SFCS ’86, pages 162–167,
Washington, DC, USA, 1986. IEEE Computer Society.
[22] X. Yi and Y. Zhang. Equally contributory privacy-preserving
k-means clustering over vertically partitioned data. Inf. Syst.,
38(1):97–107, 2013.
133