value.
QQSTQTST – Short term QTIME
The interval, in microseconds, between messages being put on the queue and then being
destructively read. Value based on the last few messages processed. For shared queues, the values
shown are for measurements collected on this queue manager only.
This is the same as the first value in QTIME from a DISPLAY QSTATUS command.
This is checked and set at the time of the SMF data collection and provides the same result as a
DISPLAY QSTATUS command would, if run at the time the SMF record was generated.
QQSTQTLT – Long term QTIME
The interval, in microseconds, between messages being put on the queue and then being
destructively read. The value is based on a larger sample of the recently processed messages. For
shared queues, the values shown are for measurements collected on this queue manager only.
This is the same as the second value in QTIME from a DISPLAY QSTATUS command.
This is checked and set at the time of the SMF data collection and provides the same result as a
DISPLAY QSTATUS command would, if run at the time the SMF record was generated.
QQSTLPUT – Last put date/time
The time, in store clock format, at which the last message was put to the queue since the queue
manager started. For shared queues, the value shown is for messages put by this queue manager only.
This is the same as LPUTDATE and LPUTTIME from a DISPLAY QSTATUS command.
This is checked and set at the time of the SMF data collection and provides the same result as a
DISPLAY QSTATUS command would, if run at the time the SMF record was generated.
QQSTLGET – Last get date/time
The time, in store clock format, at which the last message was retrieved from the queue since the
queue manager started. For shared queues, the value shown is for messages put by this queue
manager only.
A message being browsed does not count as a message being retrieved.
This is the same as LGETDATE and LGETTIME from a DISPLAY QSTATUS command.
This is checked and set at the time of the SMF data collection and provides the same result as a
DISPLAY QSTATUS command would, if run at the time the SMF record was generated.
354 Monitoring and Performance for IBM MQ
QQSTDPHI – Highest depth
The highest depth reached by the queue during the SMF interval.
For shared queues, queue managers only have partial information about the change in depth of the
queue over time. The QQSTDPHI value is based off this partial information as follows:
• At the start of the interval the value of QQSTDPHI is set to zero.
• When an application puts a message to the queue in the interval the queue manager checks the
depth of the queue, including the message just being put. If this value is higher than the current
value of QQSTDPHI, then it is used as the new value of QQSTDPHI.
• When SMF data for the queue is collected, the queue manager will check if the current queue depth
is higher than QQSTDPHI, if so the current queue depth is used as the new value of QQSTDPHI.
This approach means that the value of QQSTDPHI does not take into account messages put by other
queue managers in the queue sharing group, unless those messages contributed to the queue depth
at the point where SMF data is collected.
QQSTDPLO – Lowest depth
The lowest depth reached by the queue during the SMF interval.
For shared queues, queue managers only have partial information about the change in depth of the
queue over time. The QQSTDPLO value is based off this partial information as follows:
• At the start of the interval the value of QQSTDPLO is set to a special value.
• The first time during the interval the queue manager obtains the depth of the queue, QQSTDPLO to
that value.
• When an application puts a message to the queue in the interval the queue manager checks the
depth of the queue, including the message just being put. If this value is lower than the current
value of QQSTDPLO, then it is used as the new value of QQSTDPLO.
• When SMF data for the queue is collected, the queue manager will check if the current queue depth
is lower than QQSTDPLO, if so the current queue depth is used as the new value of QQSTDPLO.
This approach means that the value of QQSTDPLO does not take into account messages got by other
queue managers in the queue sharing group, unless those messages contributed to the queue depth
at the point where SMF data is collected.
QQSTPUTS – MQPUT count
The number of messages put to the queue using MQPUT during the SMF interval.
For shared queues, the count only includes messages put through the queue manager that generated
the SMF record.
QQSTPUT1 – MQPUT1 count
The number of messages put to the queue using MQPUT1 during the SMF interval.
For shared queues, the count only includes messages put through the queue manager that generated
the SMF record.
QQSTNPPT – Non-persistent MQPUT count
The number of non-persistent messages put to the queue using MQPUT during the SMF interval.
For shared queues, the count only includes messages put through the queue manager that generated
the SMF record.
QQSTPPT – Persistent MQPUT count
The number of persistent messages put to the queue using MQPUT during the SMF interval.
For shared queues, the count only includes messages put through the queue manager that generated
the SMF record.
QQSTNPP1 – Non-persistent MQPUT1 count
The number of non-persistent messages put to the queue using MQPUT1 during the SMF interval.
For shared queues, the count only includes messages put through the queue manager that generated
the SMF record.
IBM MQ Monitoring and performance 355
QQSTPP1 – Persistent MQPUT1 count
The number of persistent messages put to the queue using MQPUT1 during the SMF interval.
For shared queues, the count only includes messages put through the queue manager that generated
the SMF record.
QQSTPUTB – MQPUT bytes
The number of bytes of message data, including any message properties, put to the queue using
MQPUT during the SMF interval. This does not include message headers in the calculation of the size.
For shared queues, the count only includes messages put through the queue manager that generated
the SMF record.
QQSTPT1B – MQPUT1 bytes
The number of bytes of message data, including any message properties, put to the queue using
MQPUT1 during the SMF interval. This does not include message headers in the calculation of the size.
For shared queues, the count only includes messages put through the queue manager that generated
the SMF record.
QQSTNPPB – Non-persistent MQPUT bytes
The number of bytes of non-persistent message data, including any message properties, put to
the queue using MQPUT during the SMF interval. This does not include message headers in the
calculation of the size.
For shared queues, the count only includes messages put through the queue manager that generated
the SMF record.
QQSTPPB – Persistent MQPUT bytes
The number of bytes of persistent message data, including any message properties, put to the queue
using MQPUT during the SMF interval. This does not include message headers in the calculation of the
size.
For shared queues, the count only includes messages put through the queue manager that generated
the SMF record.
QQSTNP1B – Non-persistent MQPUT1 bytes
The number of bytes of non-persistent message data, including any message properties, put to
the queue using MQPUT1 during the SMF interval. This does not include message headers in the
calculation of the size.
For shared queues, the count only includes messages put through the queue manager that generated
the SMF record.
QQSTP1B – Persistent MQPUT1 bytes
The number of bytes of persistent message data, including any message properties, put to the queue
using MQPUT1 during the SMF interval. This does not include message headers in the calculation of
the size.
For shared queues, the count only includes messages put through the queue manager that generated
the SMF record.
QQSTFLPT – Failed MQPUT count
The number of MQPUT calls targeting the queue, which failed with a completion code of
MQCC_FAILED, during the SMF interval.
For shared queues, the count only includes failed puts attempted through the queue manager that
generated the SMF record.
QQSTFLP1 – Failed MQPUT1 count
The number of MQPUT1 calls targeting the queue, which failed with a completion code of
MQCC_FAILED, during the SMF interval.
For shared queues, the count only includes failed puts attempted through the queue manager that
generated the SMF record.
QQSTFPTC – Fast puts to a waiting getter count
The number of MQPUT and MQPUT1 calls targeting the queue, that were fast put to a waiting getter
during the SMF interval.
356 Monitoring and Performance for IBM MQ
Note: Put to a waiting getter is a technique whereby a message might not actually be put onto a queue
if there is an application already waiting to get the message. Certain conditions must be satisfied for
this to occur, in particular the message must be non-persistent and the putting and getting application
must be processing the message outside syncpoint control.
If these conditions are met, then the message is transferred from the putting application’s buffer into
the getting application’s buffer without actually touching the IBM MQ queue. This removes a lot of
processing involved in putting the message on the queue and therefore leads to increased throughput
and lower CPU costs.
QQSTFPTB – Fast puts to a waiting getter bytes
The number of message and properties bytes from MQPUT and MQPUT1 calls targeting the queue,
that were fast put to a waiting getter during the SMF interval. This does not include message headers
in the calculation of the size.
QQSTSTRM – Streamed message count
The number of messages that were successfully streamed from the queue during the interval. This is
always zero if STREAMQ is not set for the queue.
QQSTMSMI – Minimum message size put
The minimum message size, in bytes, put to the queue during the SMF interval.
This includes message and properties bytes, and does not include message headers such as the
MQMD.
QQSTMSMA – Maximum message size put
The maximum message size, in bytes, put to the queue during the SMF interval.
This includes message and properties bytes, and does not include message headers such as the
MQMD.
QQSTMSAV – Average message size put
The average message size, in bytes, put to the queue during the SMF interval.
This includes message and properties bytes, and does not include message headers such as the
MQMD.
QQSTGETS – Destructive MQGET count
The number of messages got from the queue using destructive MQGET during the SMF interval.
For shared queues, the count only includes messages got through the queue manager that generated
the SMF record.
QQSTNPDG – Non-persistent destructive MQGET count
The number of non-persistent messages got from the queue using destructive MQGET during the SMF
interval.
For shared queues, the count only includes messages got through the queue manager that generated
the SMF record.
QQSTPDG – Persistent destructive MQGET count
The number of persistent messages got from the queue using destructive MQGET during the SMF
interval.
For shared queues, the count only includes messages got through the queue manager that generated
the SMF record.
QQSTGETB – Destructive MQGET byte count
The number of message and properties bytes got from the queue using destructive MQGET during the
SMF interval.
For shared queues, the count only includes messages got through the queue manager that generated
the SMF record.
QQSTNPDB – Non-persistent destructive MQGET bytes
The number of non-persistent message and properties bytes got from the queue using destructive
MQGET during the SMF interval.
For shared queues, the count only includes messages got through the queue manager that generated
the SMF record.
IBM MQ Monitoring and performance 357
QQSTPDB – Persistent destructive MQGET bytes
The number of persistent message and properties bytes got from the queue using destructive MQGET
during the SMF interval.
For shared queues, the count only includes messages got through the queue manager that generated
the SMF record.
QQSTBRWS – Non-destructive MQGET count
The number of messages browsed from the queue during the SMF interval.
For shared queues, the count only includes messages browsed through the queue manager that
generated the SMF record.
QQSTNPBR – Non-persistent non-destructive MQGET count
The number of non-persistent messages browsed from the queue during the SMF interval.
For shared queues, the count only includes messages browsed through the queue manager that
generated the SMF record.
QQSTPBR – Persistent non-destructive MQGET count
The number of persistent messages browsed from the queue during the SMF interval.
For shared queues, the count only includes messages browsed through the queue manager that
generated the SMF record.
QQSTBRWB – Non-destructive MQGET bytes
The number of message and properties bytes browsed from the queue during the SMF interval.
For shared queues, the count only includes messages browsed through the queue manager that
generated the SMF record.
QQSTNPBB – Non-persistent non-destructive MQGET bytes
The number of non-persistent message and properties bytes browsed from the queue during the SMF
interval.
For shared queues, the count only includes messages browsed through the queue manager that
generated the SMF record.
QQSTPBB – Persistent non-destructive MQGET bytes
The number of persistent message and properties bytes browsed from the queue during the SMF
interval.
For shared queues, the count only includes messages browsed through the queue manager that
generated the SMF record.
QQSTFLGT – Failed destructive MQGET count
The number of destructive MQGET calls targeting the queue, that failed with a completion code of
MQCC_FAILED, during the SMF interval.
Also included in the count is MQCC_WARNING when accompanied by a return code of
MQRC_TRUNCATED_MSG_FAILED. However, not included in this count is any MQGET with a wait that
receives MQRC_NO_MSG_AVAILABLE.
For shared queues, the count only includes failed MQGET attempts through the queue manager that
generated the SMF record.
QQSTNMAG – Failed destructive MQGET with MQRC_NO_MSG_AVAILABLE count
The number of destructive MQGET calls, without wait, targeting the queue, that failed with both a
completion code of MQCC_FAILED and a return code of MQRC_NO_MSG_AVAILABLE, during the SMF
interval.
This value is a subset of QQSTFLGT.
For shared queues, the count only includes failed MQGET, without wait, attempts through the queue
manager that generated the SMF record.
QQSTTMFB – Failed destructive MQGET with MQRC_TRUNCATED_MSG_FAILED count
The number of destructive MQGET calls targeting the queue, that failed with both a completion code
of MQCC_WARNING and a return code of MQRC_TRUNCATED_MSG_FAILED, during the SMF interval.
This value is a subset of QQSTFLGT.
358 Monitoring and Performance for IBM MQ
For shared queues, the count only includes failed MQGET attempts through the queue manager that
generated the SMF record.
QQSTFLGW – No message available for destructive MQGET with a wait count
The number of times that there is no message available for destructive MQGET calls with a wait,
targeting the queue, causing the MQGET to continue waiting, during the SMF interval.
QQSTRDGW – Re-driven destructive MQGET with a wait count
The number of times that destructive MQGET calls with a wait are re-driven to check if there is a
message on the queue that matches their criteria, during the SMF interval.
When a new message arrives on the queue, all eligible waiting MQGET calls are woken up to
attempt to get the message. Each MQGET with a wait that is woken up to check for a valid message
increments this count by one1. If any of these MQGET with wait fails to get the message, QQSTFLGW
is incremented by one and the MQGET goes back into a waiting state.
QQSTFLBW – No message available for non-destructive MQGET with a wait count
The number of times that there is no message available for non-destructive MQGET calls with a wait,
targeting the queue, causing the MQGET to continue waiting, during the SMF interval.
QQSTRDBW – Re-driven non-destructive MQGET with a wait count
The number of times that non-destructive MQGET calls with a wait are re-driven to check if there is a
message on the queue that matches their criteria, during the SMF interval.
When a new message arrives on the queue, all eligible waiting MQGET calls are woken up to
attempt to browse the message. Each MQGET with a wait that is woken up to check for a valid
message increments this count by one. If any of these MQGET with wait fails to browse the message,
QQSTFLBW is incremented by one and the MQGET goes back into a waiting state.
QQSTSAGT – Destructive MQGET with MQRC_SIGNAL_REQUEST_ACCEPTED count
The number of destructive MQGET calls targeting the queue, that complete with both a completion
code of MQCC_WARNING and a return code of MQRC_SIGNAL_REQUEST_ACCEPTED, during the SMF
interval.
QQSTSABR – Non-destructive MQGET with MQRC_SIGNAL_REQUEST_ACCEPTED count
The number of non-destructive MQGET calls targeting the queue, that complete with both a
completion code of MQCC_WARNING and a return code of MQRC_SIGNAL_REQUEST_ACCEPTED,
during the SMF interval.
QQSTIPHI – High watermark for IPPROC
The highest number of concurrent input handles open on the queue during the SMF interval.
For shared queues, the watermark only includes handles owned through the queue manager that
generated the SMF record.
QQSTIPLO – Low watermark for IPPROC
The lowest number of concurrent input handles open on the queue during the SMF interval.
For shared queues, the watermark only includes handles owned through the queue manager that
generated the SMF record.
QQSTOPHI – High watermark for OPPROC
The highest number of concurrent output handles open on the queue during the SMF interval.
For shared queues, the watermark only includes handles owned through the queue manager that
generated the SMF record.
QQSTOPLO – Low watermark for OPPROC
The lowest number of concurrent output handles open on the queue during the SMF interval.
For shared queues, the watermark only includes handles owned through the queue manager that
generated the SMF record.
QQSTOPEN – Successful MQOPEN count
The number of times the queue was successfully opened during the SMF interval. This does not
include opens performed as part of an MQPUT1 call.
For shared queues, the count only includes when the queue is opened through the queue manager
that generated the SMF record.
IBM MQ Monitoring and performance 359
QQSTCLOS – MQCLOSE count
The number of times the queue was successfully closed using MQCLOSE, during the SMF interval.
For shared queues, the count only includes when the queue is closed through the queue manager that
generated the SMF record.
QQSTINQR – MQINQ count
The number of MQINQ calls that completed with a completion code of MQCC_OK or MQCC_WARNING,
during the SMF interval.
QQSTSET – MQSET count
The number of MQSET calls that completed with a completion code of MQCC_OK during the SMF
interval.
QQSTEXPR – Expired messages count
The number of expired messages cleared from the queue during the SMF interval.
This includes messages expired by an application issuing an MQGET, by the expired message scanning
task or by a REFRESH QMGR TYPE(EXPIRY) command.
QQSTRBPT – Rolled back MQPUT counts
The number of messages that were put to the queue, that have been rolled back off the queue, during
the SMF interval.
QQSTRBGT – Rolled back MQGET counts
The number of messages destructively read from the queue, that have been rolled back onto the
queue, during the SMF interval.
Interpreting IBM MQ for z/OS accounting data
IBM MQ for z/OS accounting data is written as SMF type 116 records. Use this topic as a reference to the
different types of accounting data records.
IBM MQ accounting information can be collected for the following subtypes:
0
Message manager accounting records (how much processor time was spent processing IBM MQ API
calls and the number of MQPUT and MQGET calls). This information is produced when a named task
disconnects from IBM MQ, and so the information contained within the record might cover many
hours.
1
Accounting data for each task, at thread and queue level.
2
Additional queue-level accounting data (if the task used more queues than could fit in the subtype 1
record).
10
Accounting data for channels.
Note: Accounting information for specific channels can be enabled or suppressed by the STATCHL
channel attribute, and the STATACLS queue manager attribute.
Note that:
• Subtype 0 records are produced with accounting trace class 1.
• Subtype 1 and 2 records are produced with accounting trace class 3.
• Subtype 10 records are produced with accounting trace class 4.
Layout of an SMF type 116 record
Use this topic as a reference to the format of an SMF type record.
The standard layout for SMF records involves three parts:
SMF header
Provides format, identification, and time and date information about the record itself.
360 Monitoring and Performance for IBM MQ
Self-defining section
Defines the location and size of the individual data records within the SMF record.
Data records
The actual data from IBM MQ that you want to analyze.
For more information about SMF record formats, see z/OS MVS System Management Facilities (SMF).
The SMF header
Table 42 on page 361 shows the format of SMF record header (SM116).
Table 42. SMF record header description
Offset Offset: Type Len Name Description Example
: Dec Hex
0 0 Structure 28 SM116 SMF record header.
0 0 Integer 2 SM116LEN SMF record length. 01A4
2 2 2 Reserved.
4 4 Integer 1 SM116FLG System indicator. 5E
5 5 Integer 1 SM116RTY Record type. The SMF record type, 74
for IBM MQ accounting records this is
always 116 (X'74').
6 6 Integer 4 SM116TME Time when SMF moved record. 00356124
10 A Integer 4 SM116DTE Date when SMF moved record. 0100223F
14 E Character 4 SM116SID z/OS subsystem ID. Defines the z/OS D4E5F4F1
subsystem on which the records were (MV41)
collected.
18 12 Character 4 SM116SSI IBM MQ subsystem ID. D4D8F0F7
(MQ07)
22 16 Integer 2 SM116STF Record subtype. 0000
24 18 Character 3 SM116REL IBM MQ version. F6F0F0 (600)