---
author: Matthew Broberg
category: 观点
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 4855
date: '2019-09-07 14:23:16'
editorchoice: false
excerpt: 本周的《代码英雄》播客深入探讨了最广泛使用且已成为事实标准的脚本语言——Bash。其灵感来源于自由软件基金会及其作者的早期工作。
fromurl: https://opensource.com/19/9/command-line-heroes-bash
id: 11314
islctt: true
largepic: /data/attachment/album/201909/07/142321vwrwoq0ou0kqu48q.png
permalink: /article-11314-1.html
pic: /data/attachment/album/201909/07/142321vwrwoq0ou0kqu48q.png.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 本周的《代码英雄》播客深入探讨了最广泛使用且已成为事实标准的脚本语言——Bash。其灵感来源于自由软件基金会及其作者的早期工作。
tags:
- 代码英雄
- Bash
thumb: false
title: Bash Shell 的诞生
titlepic: true
translator: wxy
updated: '2019-09-07 14:23:16'
---

> 本周的《代码英雄》播客深入探讨了最广泛使用且已成为事实标准的脚本语言——Bash。其灵感来源于自由软件基金会及其作者的早期工作。

![Listen to the Command Line Heroes Podcast](/data/attachment/album/201909/07/142321vwrwoq0ou0kqu48q.png "Listen to the Command Line Heroes Podcast")

对于系统管理员而言，Shell 脚本编程是一项必不可少的技能，而如今大多数脚本都是用 Bash 编写的。Bash 是几乎所有 Linux 发行版和现代 macOS 版本的默认配置，并且即将成为 [Windows 终端](https://devblogs.microsoft.com/commandline/introducing-windows-terminal/) 的原生部分。可以说，Bash 无处不在。

那么，它是如何达到这一地位的呢？本周的《[代码英雄](https://www.redhat.com/en/command-line-heroes)》播客将通过采访编写这些代码的人来深入探讨这个问题。

### 起源于 Unix

如同所有编程相关的事物一样，我们必须追溯到 Unix。Shell 的简短历史如下：1971 年，Ken Thompson 发布了第一个 Unix shell——Thompson shell。然而，该 shell 对脚本用户的限制非常严重，这限制了自动化以及整个 IT 运营领域的发展。

这个[研究](https://developer.ibm.com/tutorials/l-linux-shells/)概述了早期尝试脚本时面临的挑战：

> 类似于 Multics 中的前身，这个 shell (`/bin/sh`) 是一个在内核外执行的独立用户程序。诸如通配符（参数扩展的模式匹配，例如 `*.txt`）等概念是在一个名为 `glob` 的单独实用程序中实现的，就像用于计算条件表达式的 `if` 命令一样。这种分离使 shell 变得更小，只有不到 900 行的 C 源代码。
>
> shell 引入了紧凑的重定向（`<` 和 `>>`）和管道（`|` 或 `^`）语法，这些语法在现代 shell 中仍然存在。你还可以找到对顺序命令（`;`）和异步命令（`&`）的支持。
>
> Thompson shell 缺少的是编写脚本的能力。它的唯一目的是作为一个交互式 shell（命令解释器）来调用命令并查看结果。

随着终端使用的增长，对自动化的兴趣也随之增长。

### Bourne Shell 的进步

在 Thompson 发布 shell 六年后，即 1977 年，Stephen Bourne 发布了 Bourne shell，旨在解决 Thompson shell 中的脚本限制。（Chet Ramey 自 1990 年以来一直是 Bash 语言的主要维护者，在这一集的《代码英雄》中讨论了这一点）。作为 Unix 系统的一部分，这是贝尔实验室技术的自然演变。

Bourne 打算做些什么不同的事情？[研究员 M. Jones](https://developer.ibm.com/tutorials/l-linux-shells/) 很好地概述了它：

> Bourne shell 有两个主要目标：作为命令解释器以交互方式执行操作系统的命令，以及用于脚本编程（编写可通过 shell 调用的可重用脚本）。除了替换 Thompson shell，Bourne shell 还提供了几个优于其前辈的优势。Bourne 将控制流、循环和变量引入脚本，提供了一种更具功能性的语言来与操作系统进行交互（无论是交互式还是非交互式）。该 shell 还允许你使用 shell 脚本作为过滤器，并为处理信号提供集成支持，但它缺乏定义函数的能力。最后，它结合了我们今天使用的许多功能，包括命令替换（使用后引号）和 HERE 文档（在脚本中嵌入保留的字符串文字）。

Bourne 在[之前的一次采访中](https://www.computerworld.com.au/article/279011/-z_programming_languages_bourne_shell_sh)这样描述它：

> 最初的 shell 不是一种真正的语言；它是一种记录——一种从文件中线性执行命令序列的方法，唯一的控制流原语是 `GOTO` 到一个标签。Ken Thompson 所编写的这个最初的 shell 的这些限制非常重要。例如，你无法简单地将命令脚本用作过滤器，因为命令文件本身是标准输入。而在过滤器中，标准输入是你从父进程继承的，不是命令文件。
>
> 最初的 shell 很简单，但随着人们开始使用 Unix 进行应用程序开发和脚本编写，它就太有限了。它没有变量、没有控制流，而且引用能力非常不足。

对于脚本编写者来说，这个新 shell 是一个巨大的进步，但前提是你可以使用它。

### 以自由软件重新构思 Bourne Shell

在此之前，占主导地位的 shell 是由贝尔实验室拥有和管理的专有软件。幸运的话，你的大学可能有权访问 Unix shell。但这种限制性访问远非自由软件基金会（FSF）想要实现的世界。

Richard Stallman 和一群志同道合的开发人员正在编写所有的 Unix 功能，这些功能可以在 GNU 许可证下免费获得。其中一个开发人员的任务是制作一个 shell，这位开发人员是 Brian Fox。他对他的任务的讲述十分吸引人。正如他在播客上所说：

> 它之所以如此具有挑战性，是因为我们必须忠实地模仿 Bourne shell 的所有行为，同时允许扩展它以使其成为一个更好的工具供人们使用。

当时正值关于 shell 标准的讨论。在这种历史背景和未来的竞争前景下，流行的 Bourne shell 被重新构想，并再次重生。

### 重新打造 Bourne Shell

自由软件的使命和竞争这两个催化剂使重制的 Bourne shell（Bash）得以诞生。与之前不同的是，Fox 并没有将 shell 以自己的名字命名，而是专注于从 Unix 到自由软件的演变。（虽然 Fox Shell 这个名字看起来比 Fish shell 更适合作为 fsh 命令 #missedopportunity）。这个命名选择似乎符合他的个性。正如 Fox 在剧集中所说，他甚至对个人的荣耀不感兴趣；他只是试图帮助编程文化发展。然而，他并不是一个优秀的双关语创造者。

Bourne 也没有因为他命名 shell 的文字游戏而感到被轻视。Bourne 讲述了一个故事，有人走到他面前，并在会议上给了他一件 Bash T 恤，而那个人是 Brian Fox。

| Shell | 发布时间 | 创造者 |
| --- | --- | --- |
| Thompson Shell | 1971 | Ken Thompson |
| Bourne Shell | 1977 | Stephen Bourne |
| Bourne-Again Shell | 1989 | Brian Fox |

随着时间的推移，Bash 逐渐成长。其他工程师开始使用它并对其设计进行改进。事实上，多年后，Fox 坚定地认为学会放弃控制 Bash 是他一生中最重要的事情之一。随着 Unix 让位于 Linux 和开源软件运动，Bash 成为开源世界的至关重要的脚本语言。这个伟大的项目似乎超出了单一一个人的愿景范围。

### 我们能从 shell 中学到什么？

shell 是一项技术，它是笔记本电脑日常使用中的一个组成部分，你很容易忘记它也需要发明出来。从 Thompson 到 Bourne 再到 Bash，shell 的故事为我们描绘了一些熟悉的结论：

* 有动力的人可以在正确的使命中取得重大进展。
* 我们今天所依赖的大部分内容都建立在我们行业中仍然活着的那些传奇人物打下的基础之上。
* 能够生存下来的软件超越了其原始创作者的愿景。

《代码英雄》在第三季中讲述了编程语言的故事，并且即将接近尾声。[请务必订阅，了解你想知道的有关编程语言起源的各种内容](https://www.redhat.com/en/command-line-heroes)，我很乐意在下面的评论中听到你的 shell 故事。

---
via: 
作者：[Matthew Broberg](https://opensource.com/users/mbbroberg) 选题：[lujun9972](https://github.com/lujun9972) 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出