     * These test vectors come from the Twofish specification.  
     * One encryption and one decryption using randomish data and key  
     * will detect almost any error, especially since we generate the  
     * tables ourselves, so we don't have the problem of a single  
     * damaged table entry in the source.  
     */   
    /* 128-bit test is the I=3 case of section B.2 of the Twofish book. */   
    static Twofish_Byte k128[] = {   
        0x9F, 0x58, 0x9F, 0x5C, 0xF6, 0x12, 0x2C, 0x32,    
        0xB6, 0xBF, 0xEC, 0x2F, 0x2A, 0xE8, 0xC3, 0x5A,   
        };   
    static Twofish_Byte p128[] = {   
        0xD4, 0x91, 0xDB, 0x16, 0xE7, 0xB1, 0xC3, 0x9E,    
        0x86, 0xCB, 0x08, 0x6B, 0x78, 0x9F, 0x54, 0x19   
        };   
    static Twofish_Byte c128[] = {   
        0x01, 0x9F, 0x98, 0x09, 0xDE, 0x17, 0x11, 0x85,    
        0x8F, 0xAA, 0xC3, 0xA3, 0xBA, 0x20, 0xFB, 0xC3   
        };   
    /* 192-bit test is the I=4 case of section B.2 of the Twofish book. */   
    static Twofish_Byte k192[] = {   
        0x88, 0xB2, 0xB2, 0x70, 0x6B, 0x10, 0x5E, 0x36,    
        0xB4, 0x46, 0xBB, 0x6D, 0x73, 0x1A, 0x1E, 0x88,    
        0xEF, 0xA7, 0x1F, 0x78, 0x89, 0x65, 0xBD, 0x44   
        };   
    static Twofish_Byte p192[] = {   
        0x39, 0xDA, 0x69, 0xD6, 0xBA, 0x49, 0x97, 0xD5,   
        0x85, 0xB6, 0xDC, 0x07, 0x3C, 0xA3, 0x41, 0xB2   
        };   
    static Twofish_Byte c192[] = {   
        0x18, 0x2B, 0x02, 0xD8, 0x14, 0x97, 0xEA, 0x45,   
        0xF9, 0xDA, 0xAC, 0xDC, 0x29, 0x19, 0x3A, 0x65   
        };   
    /* 256-bit test is the I=4 case of section B.2 of the Twofish book. */   
    static Twofish_Byte k256[] = {   
        0xD4, 0x3B, 0xB7, 0x55, 0x6E, 0xA3, 0x2E, 0x46,    
        0xF2, 0xA2, 0x82, 0xB7, 0xD4, 0x5B, 0x4E, 0x0D,   
        0x57, 0xFF, 0x73, 0x9D, 0x4D, 0xC9, 0x2C, 0x1B,   
        0xD7, 0xFC, 0x01, 0x70, 0x0C, 0xC8, 0x21, 0x6F   
        };   
    static Twofish_Byte p256[] = {   
        0x90, 0xAF, 0xE9, 0x1B, 0xB2, 0x88, 0x54, 0x4F,   
        0x2C, 0x32, 0xDC, 0x23, 0x9B, 0x26, 0x35, 0xE6   
        };   
    static Twofish_Byte c256[] = {   
        0x6C, 0xB4, 0x56, 0x1C, 0x40, 0xBF, 0x0A, 0x97,   
        0x05, 0x93, 0x1C, 0xB6, 0xD4, 0x08, 0xE7, 0xFA   
        };   
    /* Run the actual tests. */   
    test_vector( k128, 16, p128, c128 );   
    test_vector( k192, 24, p192, c192 );   
    test_vector( k256, 32, p256, c256 );   
    }      
/*  
 * Perform extensive test for a single key size.  
 *   
 * Test a single key size against the test vectors from section  
 * B.2 in the Twofish book. This is a sequence of 49 encryptions  
 * and decryptions. Each plaintext is equal to the ciphertext of  
 * the previous encryption. The key is made up from the ciphertext  
 * two and three encryptions ago. Both plaintext and key start  
 * at the zero value.   
 * We should have designed a cleaner recurrence relation for  
 * these tests, but it is too late for that now. At least we learned  
 * how to do it better next time.  
 * For details see appendix B of the book.  
 *  
 * Arguments:  
 * key_len      Number of bytes of key  
 * final_value  Final plaintext value after 49 iterations  
 */   
void Twofish::test_sequence( int key_len, Twofish_Byte final_value[] )   
    {   
    Twofish_Byte buf[ (50+3)*16 ];      /* Buffer to hold our computation values. */   
    Twofish_Byte tmp[16];               /* Temp for testing the decryption. */   
    TwofishKey xkey;           /* The expanded key */   
    int i;                         
    Twofish_Byte * p;   
    /* Wipe the buffer */   
    memset( buf, 0, sizeof( buf ) );   
    /*  
     * Because the recurrence relation is done in an inconvenient manner  
     * we end up looping backwards over the buffer.  
     */   
    /* Pointer in buffer points to current plaintext. */   
    p = &buf[50*16];   
    for( i=1; i=0; i-- )   
        {   
        /* Set a byte to zero. This is the new padding byte */   
        buf[i] = 0;   
        /* Expand the key with only i bytes of length */   
        PrepareKey( buf, i, &xkey );   
        /* Expand the corresponding padded key of regular length */   
        PrepareKey( buf, i>1) | (((x)4bit lookup tables that define the q-box  
 * q[256]   : output parameter: the resulting q-box as a lookup table.  
 */   
static void make_q_table( const Twofish_Byte t[4][16], Qtype q[256] )   
    {   
    int ae,be,ao,bo;        /* Some temporaries. */   
    int i;   
    /* Loop over all input values and compute the q-box result. */   
    for( i=0; i>4; be = i&0xf;   
        ao = ae ^ be; bo = ae ^ ROR4BY1(be) ^ ((ae<<3)&8);   
        ae = t[0][ao]; be = t[1][bo];   
        ao = ae ^ be; bo = ae ^ ROR4BY1(be) ^ ((ae<<3)&8);   
        ae = t[2][ao]; be = t[3][bo];   
        /* Store the result in the q-box table, the cast avoids a warning. */   
        q[i] = (Qtype) ((be<<4) | ae);   
        }   
    }   
/*   
 * Initialise both q-box tables.   
 */   
void Twofish::initialise_q_boxes()
    {   
    /* Initialise each of the q-boxes using the t-tables */   
    make_q_table( t_table[0], q_table[0] );   
    make_q_table( t_table[1], q_table[1] );   