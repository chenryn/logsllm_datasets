The  connection  between  the  database  and  the 
UNIX Tools server is through a new protocol that we 
designed and implemented called the UnMask UNIX 
Tools  Connection  (UUTC)  protocol.    This  protocol 
opens a socket connection when needed to a daemon 
process (the Unix Tools server) and allows parameters 
needed for invoking specific tools to be sent across the 
connection,  and  permits  return  information  to  be 
properly put back into the database (using a separate 
ODBC connection). 
Using Figure 3, we give a simple example of the 
sequence of events that occur in the database when an 
investigator creates a case and uploads an email.  Our 
goal is to illustrate how various records are stored in 
the  database  and  how  triggers  cause  appropriate 
events to happen. The law enforcement investigator is 
able  to  create  cases  through  our  user  interface. 
Whenever  a  new  case  is  created,  law  enforcement 
information  (such  as  investigator  name,  jurisdiction, 
etc.)  is  stored  in  the  tbl_users  table  (not  shown  in 
Figure  3).  When  an  email  file  (in  eml  format)  is 
uploaded  through  the  user  interface,  the  entire  email 
text  is  first  stored  as  a  field  in  the  tbl_email  table 
along with other fields such as a unique ID created by 
the system called unmask_id. As soon as a record gets 
inserted in the tbl_email table, trigger 1 (trg_email) is 
fired that in turn invokes a function sp_email written 
in  PL/Perl  which  parses 
the  email  and  stores 
appropriate components in various level 2 tables such 
as tbl_l_header and tbl_uri. 
Figure 3: Tables, Triggers and Dataflow 
Level  2  tables  can  similarly  trigger  further 
actions. An insert in tbl_email_address, for example, 
invokes  trigger  2  (trg_email_address)  which  in  turn 
calls a function that would open a connection with the 
UNIX Tools server using the UUTC protocol.  Results 
are  returned  and  stored  in  level  3  tables  such  as 
tbl_verify_mx. 
4.3 UNIX tools server 
The  UNIX  Tools  server  is  a  daemon  that  runs 
programs  (tools)  invoked  by  the  database.    The 
daemon  and  the  database  communicate  through  the 
UUTC  protocol.    Programs  can  be  wrappers  around 
utilities  such  as  whois,  dig,  and  traceroute,  or  more 
complex programs designed for specific tasks such as 
verifying an email address.  Some of the tools that we 
have  developed  are  shown  in  Table  1,  which  also 
shows the parameters required by each tool. Parameter 
unmask_id is a digital ID generated by  our database. 
Parameters  domain  and  local_name  are  the  domain 
name  and  local  user  name  respectively  of  an  email 
address.  Source  indicates  the  source  of  the  email 
address in the parsed email.  Dns_server is an optional 
parameter sent to the tool server. If this is provided, 
the  tool  server  will  run  the  dig  command  for  the 
specified DNS server else it will use a default value. 
Parameter  host refers  to  a numerical  IP address  or  a 
canonical host name. 
tool5 
(uses a package 
called IPGEO 
[32]) 
 Table 1: UnMask Tools 
The flexibility of our design is that it allows other 
tools to be easily developed and incorporated into the 
146146
Tool Name 
tool1 
Parameters 
unmask_id 
domain 
local_name 
source 
[dns_server] 
tool2 
unmask_id host 
tool3 
tool4 
unmask_id 
domain 
unmask_id 
domain  source 
[dns_server] 
unmask_id host 
the 
Function 
Run  “dig”  to  find 
the  mail  servers  of 
and 
the  domain, 
ESMTP 
then 
VRFY,  HELO 
to 
verify 
email 
address at one of the 
mail servers. 
Run  “traceroute”  to 
find 
reachability 
and  routes  to  an  IP 
address or canonical 
host name. 
Run “whois” to find 
registration  data  for 
a domain. 
Run “dig” to get full 
DNS information 
geographical 
Find 
(currently 
location 
only  country)  of  an 
IP  address  or  a 
canonical host name 
system.    Note  for  example  that  because  of  security 
concerns,  ESMTP  VRFY  usually  provides  no 
information.    This  aspect  of  Tool1  could  easily  be 
dropped but since it is automated and might in some 
cases  be  useful,  we  might  as  well  obtain  its  results. 
More complex investigative tools can be incorporated 
as they are designed.  
5. Reports and analysis in UnMask 
The  user  interface  for  UnMask  supports  a  case 
management  system  for  uploading  of  email  files  for 
analysis  as  well  as  generation  of  reports  based  on 
information  stored  in  the  database.    UnMask  uses  a 
password-based  user  access  control.    In  order  to 
submit  an  email,  the  user  first  logs  into  the  system. 
The user can submit an email file (in eml format) by 
browsing  for  it  locally  and  uploading  it  as  part  of  a 
new  or  an  existing  case.  After 
is 
deconstructed and processed as discussed in Section 4, 
the user is able to view the generated reports.  Figure 4 
illustrates the case management screen of the Unmask 
user  interface.  The  three  cases  that  user  liu  is 
investigating  are  listed,  and  further  information  on 
each can be accessed by clicking on the case name. 
the  email 
Figure 4: UnMask User Interface 
interactive  web-based 
The  implementation  of  the  user  interface  is 
through  an 
infrastructure 
rendered  using  dynamic  web  pages  written  in  Sun 
Microsystems’  Java  Server  Pages  (JSP)  technology. 
The  application  logic  in  a  JSP  page  uses  the  Java 
Database  Connectivity 
to  create 
(JDBC)  API 
dynamically-generated  HTML  output 
the 
from 
contents of the database by providing a call-level API 
for  SQL-based  database  access.  Also  within  a  JSP 
page we have HTML code that displays static text and 
graphics.  When  the  page  is  displayed  in  a  user's 
browser,  it  contains  both  static  HTML  content  and 
dynamic  information  retrieved  from  the  database 
about his or her specific case. 
5.1 Requirements for a report 
Reports are designed to support law-enforcement 
in  analyzing  email  components.  For  example,  the 
sender email address in the raw email being analyzed 
may have been forged, or a URL in the rendered email 
may be redirecting the recipient to a website different 
from  what  is  commonly  inferred  from  its  name.  As 
part of requirements analysis, a brief survey was done 
to  ascertain  what  investigators  would  ideally  like  to 
see in a report.  Some of these desired features were 
determined to be: 
For  each  email  address  found  in  the  phishing 
email,  determine  the  MX  record  for  its  domain, and 
also  the  results  of  executing  ESMTP  EXPN  and 
ESMTP VRFY on the mail server. It must be clearly 
mentioned as to what field (i.e., “From”, “Cc”, “Bcc”, 
etc.) the particular email address was found in.  
Determine  the  IP  address  of  the  originating 
machine, and run the network utilities traceroute, dig, 
and whois on this address.  
For  each  IP  address/URL  specified  anywhere  in 
the 
raw  email,  again 
the  body  of 
aforementioned network utilities. 
Also,  we  implemented  a  simple  select  query 
which  retrieves  all  email  messages  in  the  database 
which have the same “From”  field  email address as 
the  investigated  email.  General  message  correlation 
functionality will be implemented in the next version 
of UnMask. 
run 
the 
Figure 5: Segment of a Report 
147147
The reports that UnMask generates include all the 
above  information  organized  in  a  structured  fashion 
discussed  in  the  next  subsection.  See  Figure  5  for  a 
portion  of  a  report  illustrating  analysis  of  the  email 
phishing_525.eml.  The  report  contains  links  to  sub-
reports  on  received  headers,  URLs,  and  email 
addresses.  The lower half of the figure shows a URL 
found  in  the  body  followed  by  links  to  further 
analyses  (Dig,  Whois,  Traceroute,  Country).  The 
Whois link has been clicked and shows the registration 
information of the URL. 
5.2 Report Structure 
A  report  follows  the  structure  of  an  email 
message.  Starting  with  email  header  information  the 
report  shows  the  specific  header  fields  isolated  for 
clarity and coupled with information gathered by the 
UNIX tools. This additional information expands the 
investigator’s understanding of that field. For example 
the  trace  fields  “Received:”  would  appear  with  an 
analysis  of  the  sending  and  receiving  mail  hosts  (IP 
address,  domain  name,  traceroute  result,  DNS  and 
whois records, etc).  
As  mail  hosts  (represented  by  name  or  IP 
address),  email  addresses,  website  links,  and  other 
items appear in the report at different sections of the 
email,  so  does  the  information  gathered  about  these 
items.  This  provides  the  investigator  with  as  much 
information  as  possible  and  aids  in  the  decision 
making  process  on  what  forensic  leads  to  follow 
further.  
5.3 UnMask reports: an example 
To  have  a  better  understanding  of  the  UnMask 
report  structure  and  how  it  may  be  used  by  law 
enforcement,  we  present  an  example  section  of  a 
report  that  provides  detailed  forensic  information  on 
the “Received:” fields in an email header. Each email 
message  carries  in  its  header  a  set  of  “Received:” 
fields  (the  set  can  be  empty),  which  collectively 
describe  the  routes  that  the  message  takes  from  the 
sender to the recipient of the message at the mail relay 
server level.  It is important to note that, in order to 
mislead  the  recipient  (or  investigator)  of  an  email 
message  about  where  the  message  originates,  it  is 
common for the (spam and phishing) message sender 
to forge the first few “Received:” fields. However, the 
set of “Received:” fields in a message still contains a 
portion of the true path that the message takes as part 
of the route shown in the set of “Received:” fields, so 
it provides valuable investigation information for law 
enforcement. 
  However,  IP  address  allocation 
names. Domain names (especially for phishing sites) 
and their associated registration information tend to be 
short-lived. 
is 
normally  delegated  to  ISPs  nowadays  and  is  quite 
stable. Three days later we re-ran the tools to generate 
another report on the message, containing the domain 
name walking14.legessermon.com and its associated 
registration/contact 
resulting 
information turned out to  be the same; however if it 
would  have  been  different  then  further  investigation 
may have been warranted. 
information. 
  The 
the 
then  determine 
As  discussed  above,  an  UnMask  report  follows 
the structure of an email message. For each field, we 
provide  additional  forensic  information  gathered  by 
the  Unix  Tools  system.  In  particular,  for  each 
“Received:”  field,  we  first  extract the  domain names 
and IP addresses of the mail relay servers appearing in 
the  field.    To  aid  the  law  enforcement  investigation, 
we 
location  and  contact 
information  of  the  organization  (or  person)  that  is 
responsible  for  a  domain  name  (or  IP  address),  the 
route to the mail relay server, and the IP address of a 
domain  name  (and  vice  versa),  along  with  other 
information 