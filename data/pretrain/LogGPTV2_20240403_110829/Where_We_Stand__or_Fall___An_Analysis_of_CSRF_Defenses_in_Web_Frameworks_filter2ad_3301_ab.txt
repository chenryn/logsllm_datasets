### 5.4 Implementation Mistakes

The final category of threats encompasses improper ways to validate incoming HTTP requests, ranging from incorrect user-token association to missing checks, as detailed below.

#### Missing Checks on HTTP Methods
A robust CSRF verification should enforce CSRF checks on all incoming HTTP requests, irrespective of the request method. For example, GET is a safe, idempotent HTTP method that should not be used for state-changing requests [84]. However, this does not prevent developers from performing state-changing requests using GET, which could lead to CSRF attacks. Similarly, developers may not perform CSRF checks on all unsafe HTTP methods, such as DELETE or PUT [72]. The problem is further aggravated by the HTTP Method Override feature, which can change the request method. If CSRF checks are only applied to specific HTTP methods, CSRF validation could be bypassed by overriding the request method (see, e.g., 2017-16136 [23] and CVEs 2020-35239 [94]).

#### Logical Mistakes
Unlike syntactical code errors, logical errors do not trigger a compilation error and might go unnoticed. A simple logic error could be using the OR operator instead of AND, thus accepting a request if only one of the conditions holds (see, e.g., CVEs 2017-0894 [22], 2017-9339 [24], and 2019-12659 [28]). Another common mistake is incorrect user-token mapping. If each user does not have a unique CSRF token for each session, an attacker can obtain the same token as the victim (see, e.g., CVE-2020-11825 [33]) by being a user of the application. Additionally, CSRF validation of the request can be erroneous. For example, a faulty comparison between the request’s origin and the application’s origin can occur due to incorrect regular expressions [108]. Examples of this vulnerability include CVEs 2018-6651 [27], 2018-10899 [26], and 2016-6806 [20].

#### Replay Attacks
Replay attacks operate under the assumption that the attacker has leaked the CSRF token [105, 122]. In such cases, the attacker can reuse the same token to forge a state-changing request until the expiration of the session cookie (see, e.g., CVEs 2014-1808 [8], 2016-6582 [19], and 2020-5261 [36]).

#### Cross-Site WebSocket Hijacking
Another implementation mistake exploits the way WebSocket (WS) connections are authenticated. If the authentication solely relies on cookies (as opposed to TLS/HTTP authentication), the WS connection can be hijacked by a CSRF attack [125]. Instances of this vulnerability include CVEs 2019-13209 [29], 2019-17654 [32], 2020-14368 [34], and 2020-25095 [35].

### 6. Security Analysis of the Implementations

We now present the results of our security analysis on the 44 web frameworks identified in Section 3.1 against the 18 threats discussed in Section 5. First, we provide an overview of the usage of CSRF defenses (Section 6.1), followed by the discovered security risks (Section 6.2).

#### 6.1 Demographics of CSRF Defenses

**Built-in Defenses and Defaults:**
Our analysis uncovered a complex landscape. Not all frameworks provide off-the-shelf CSRF defenses. In total, 16 frameworks (about 36%) are shipped without built-in CSRF defenses, including Express, Flask, and Spring, the most popular frameworks in JavaScript, Python, and Java, respectively. For 13 of these, we identified external libraries providing CSRF protection. The remaining 28 frameworks provide built-in CSRF defenses; however, in 17 of them (covering more than 60% of the frameworks with built-in defenses), CSRF defenses are disabled by default. Both scenarios can be problematic if developers are not security-aware and forget to install the necessary libraries or enable the defense correctly.

**Few but Popular Frameworks with No Defenses:**
Overall, five of the 44 frameworks do not have built-in CSRF defenses, and their documentation does not suggest any either. Notably, two of these, Bottle and Spark, are among the top five Python and Java frameworks, respectively.

**Implemented Defenses:**
In total, 39 frameworks can have a CSRF defense as a built-in feature or via official external libraries. For Bottle and Spark, which have no defenses, we identified unofficial libraries via Stack Overflow [50, 75] and internet search [76]. Accordingly, we extended the testbed of frameworks to 41 by including Bottle and Spark. The vast majority of frameworks implement the Double Submit (i.e., 22) or Plain Token (i.e., 18) defense. The least frequent CSRF defense is Cookie-less User Session, used only by Meteor. This technique is an emerging pattern where web storage and custom client-side JS code replace cookies and cookie management policies. The number of frameworks that use the rest of the defenses are as follows: 12 HMAC Token, 10 SameSite Cookies, 4 Encrypted Token, and 4 Referrer/Origin Check. We refer interested readers to Appendix A for a complete list of defenses implemented by each framework.

**Defense in Depth:**
Web frameworks may implement multiple CSRF defenses simultaneously. For example, almost half of the frameworks (i.e., 19) enforce two or more defenses in sequence. Table 2 shows the frequency of combinations of defenses across web frameworks in our testbed. We observe that Double Submit and HMAC Token are used together more frequently than any other pair of defenses, i.e., in 12 frameworks.

#### 6.2 Vulnerabilities and Security Risks

In total, we discovered 157 security risks affecting 37 frameworks, all of which can be mounted by a web attacker. However, the exploitability of these risks may vary. For example, out of 157, 17 security risks are directly exploitable with one of two HTTP methods. 

Tables 3 and 4 summarize the results for the top five frameworks of the top five languages and less popular frameworks of the top four languages, respectively. Only five frameworks were identified for C#.

**Table 3: Summary of Results on Top Five Frameworks of Top Five Languages**

| Web Framework | Token Gen. | Token Leakage | Cookie Int. | Implementation Mistakes |
|---------------|------------|---------------|-------------|-------------------------|
| Framework A   | ...        | ...           | ...         | ...                     |
| Framework B   | ...        | ...           | ...         | ...                     |
| Framework C   | ...        | ...           | ...         | ...                     |
| Framework D   | ...        | ...           | ...         | ...                     |
| Framework E   | ...        | ...           | ...         | ...                     |

**Table 4: Summary of Results on Less Popular Frameworks of Top Four Languages**

| Web Framework | Token Leakage | Cookie Int. | Implementation Mistakes |
|---------------|---------------|-------------|-------------------------|
| Framework F   | ...           | ...         | ...                     |
| Framework G   | ...           | ...         | ...                     |
| Framework H   | ...           | ...         | ...                     |
| Framework I   | ...           | ...         | ...                     |
| Framework J   | ...           | ...         | ...                     |

These tables provide a high-level overview of the security posture of the frameworks in terms of CSRF defenses and associated vulnerabilities.