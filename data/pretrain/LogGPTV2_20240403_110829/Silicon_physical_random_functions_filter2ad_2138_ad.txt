Either the computation is done directly on the secure chip,
or it is done on a faster insecure chip that is being monitored
in a highly interactive way by supervisory code on the secure
chip [16].
5.3 Code that Runs Only on a Speciﬁc Proces-
sor
The software industry is always looking for ways to limit
the use of its products. We are exploring ways in which
a piece of code could be made to run only on a processor
with a PUF. In this way, pirated code would fail to run.
One method that we are considering is to encrypt the code
using the PUF’s challenge-response pairs on an instruction
per instruction basis.
6. EXPERIMENTS
To date, a number of experiments have been conducted us-
ing Xilinx XC2S200 Field Programmable Gate Arrays (FP-
15514000
12000
10000
8000
6000
4000
2000
"Single Loop"
"Multiple Loops"
0.9895
0.989
0.9885
0.988
0.9875
0.987
0.9865
0.986
0.9855
0.985
"voltagedep.dog" using 1:($2/$5)
"voltagedep.cat" using 1:($2/$5)
0
-4895
-4890
-4885
-4880
-4875
-4870
-4865
-4860
0.9845
1.4
1.6
1.8
2
2.2
2.4
2.6
2.8
3
Figure 4: In this plot we show how multiple self-
oscillating loops on the same IC interfere. The his-
tograms show the frequency of the loop oscillating
alone and with the seven other loops on the IC
turned on. The frequency shift between these two
situations is tiny compared with measurement noise.
Figure 5: This plot shows compensated measure-
ment dependency on power supply voltage. The de-
pendency for 1% changes in supply voltage is small
enough for our purposes. Interestingly, by running
the FPGAs near the 2:7V extremum, it might be
possible to further reduce the voltage dependency.
GAs). The results to date are preliminary, but provide ev-
idence that silicon PUFs can be used to perform reliable
authentication, and that it is hard for the adversary to cre-
ate a timing model of the PUF.
6.1 Usable Process Variability is Present
FPGAs are an example of a high-volume part where the
manufacturing process is tuned to produce ICs that are as
identical as possible in order to maximize yield and per-
formance. Our experiments indicate that even a highly-
optimized manufacturing process designed for predictability
has enough variability to enable reliable identi(cid:12)cation.
In all our experiments, we compare delays across
two or more FPGAs with each FPGA being pro-
grammed by exactly the same personality matrix.
This means that each FPGA has exactly the same logic cir-
cuit, and moreover the circuit is implemented in FPGA mod-
ules in the exact same locations. Therefore, these FPGAs
can be viewed as copies of the same IC.
In our (cid:12)rst experiment each FPGA is equipped with 8
self-oscillating loops, the circuit for which is shown in Fig-
ure 1. Each loop is made up of 32 bu(cid:11)ers8 and an inverter.
We determine the frequencies of the loops by measuring the
number of oscillations they make during a certain period of
time (typically 220 cycles of an external 50 MHz oscillator).
The period of the loops is on the order of 60ns.
We ran various experiments to quantify measurement er-
rors, inter-FPGA variation, variation due to ambient tem-
perature and variation due to power supply voltage varia-
tions. To summarize our (cid:12)ndings, the following standard
deviations are given in parts per million (ppm). A deviation
of n ppm around a frequency f0 corresponds to a deviation
of nf0
106 . These deviations correspond to measurement across
several FPGAs.
1. Consecutive measurements of the same delay produce
slightly di(cid:11)erent results because of measurement inac-
curacy inherent in the loop circuit circled in Figure 1.
8In this context, a bu(cid:11)er is simply a logic gate that copies
its input to its output with a short delay. They are usually
used to amplify signals.
The standard deviation of this measurement error with
compensated measurement is 30 ppm.
2. The standard deviation in inter-FPGA delays with
compensated measurements ranges from 5000ppm to
30000ppm depending on the pair of loops that is used
for the measurement. Figure 6 shows an example of
the relationship between measurement error and inter-
FPGA variation for four di(cid:11)erent FPGAs. Clearly
identi(cid:12)cation information can be extracted from the
frequencies of the loops that we are measuring.
3. The frequency of a loop can be in(cid:13)uenced by nearby
circuitry. To try to evaluate the magnitude of this
interference we compared the frequency of one of the
loops when the other loops on the FPGA were turned
on or o(cid:11). The deviation we observed was 10ppm. Fig-
ure 4 shows the frequency distribution for a loop when
the other loops are turned on or o(cid:11).
4. The variation in frequency when the ambient tem-
perature is varied from 25 to 50 degrees Celsius is
50000ppm for uncompensated measurements. This is
su(cid:14)cient to prevent FPGA identi(cid:12)cation. Fortunately,
with compensation (see section 4.2.3) this reduces to
100ppm. Figure 7 illustrates the temperature depen-
dence with and without compensation.
5. Power supply voltage variations are also well compen-
sated for by our scheme. Around the FPGA’s 2.5V
operating point, the variation of the compensated mea-
surement with voltage is about 3000ppm=V as shown
in Figure 5. In practice external power supply varia-
tions can be kept to within 1%, which corresponds to
1% (cid:2) 2:5V (cid:2) 3000ppm=V = 75ppm. Therefore, com-
monly available voltage regulators will su(cid:14)ce to keep
the supply voltage within tolerable bounds. It is in-
teresting to note that the compensated measurement
seems to have an extremum around 2:7V . By running
the FPGAs at 2:7V instead of 2:5V this extremum
could be used to further improve the robustness of the
measurements.
1566. Circuit aging can create variance in measurements car-
ried out over a long period of time. However, the ef-
fect of circuit aging is typically signi(cid:12)cantly less than
power supply or temperature variation. Future study
will have to check the impact of aging on the measure-
ments.
Given the numbers above, if we take 100ppm as a rough
estimate of the noise, and 10000ppm as a rough estimate of
the signal, then we have a signal to noise ratio of 100. If the
noise distribution was Gaussian (this is not really the case
as some parts of the noise are due to slowly varying parame-
ters such as Temperature and supply voltage), we would be
able to extract 3.3 bits per measurement. So with 10 mea-
surements, done on 10 di(cid:11)erent loops, we could distinguish
between 10 billion di(cid:11)erent chips.
To summarize the experiments in this section, compen-
sated measurements enable reliable identi(cid:12)cation under ap-
preciable environmental variations.
We note that variance in a manufacturing process can be
increased quite easily by making small changes in the fabri-
cation steps, e.g., not regulating temperature and pressure
as tightly, and increased variance will allow reliable iden-
ti(cid:12)cation under a greater amount of environmental varia-
tion. Also, with the advent of deep submicron (e.g., 90
nm) devices, there is greater intrinsic (cid:13)uctuation for mini-
mum width devices due to lithography tolerance and dopant
(cid:13)uctuation [15]. Finally, an IC containing a PUF could be
placed in an environment-resistant board to improve relia-
bility.
6.2 How hard is model building?
We ran the same experiments on the (single event sensi-
tizable) demultiplexer circuit shown in Figure 8. A circuit
with 12 stages was used in our experiments.
The observed measurement error, inter-FPGA variation
and dependence on environmental conditions were compat-
ible with the results from section 6.1.
In addition to con(cid:12)rming the results from the previous
experiments, the new circuit was able to show us the e(cid:11)ect
of challenges on the frequency of the self-oscillating loops.
Figure 9 shows the compensated response of two di(cid:11)erent
FPGAs as a function of the input challenge.
There is a clear dependency of the output on the chal-
lenge. Moreover, and quite predictably, there is a lot of
structure in the challenge-dependence of the response. This
structure is common to the two FPGAs and is due to large
di(cid:11)erences between paths in given stages of the delay cir-
cuit. To actually see a di(cid:11)erence between the two FPGAs,
one must look at the small scale di(cid:11)erences between the two
plots (we are looking for 1% variations on a plot that covers
50% variations). These di(cid:11)erences are present, and appear
most clearly as a di(cid:11)erence in texture between the plots for
the two chips.
The reason why such a simple circuit was chosen for this
experiment is that we wanted to quantify how well an ad-
versary could simulate the circuit by choosing an additive
delay model. Indeed, suppose that the adversary wanted to
create a model for the demultiplexer circuit of Figure 8. He
reasons that the delay of the circuit under each challenge
is the delay of the actuated path for that challenge. He
can assume as additive delay model, where the delay of a
path is the sum of the delays of the devices and wires on
that path. By measuring the delay of a set of paths that
cover all the devices and wires in the circuit, he can set up
a linear system of equations that relate the unknown device
and wire delays to known path delays. He can then solve
for the device and wire delays, thereby obtaining a model
of the circuit, which he can then simulate to guess at the
response for an arbitrary challenge. The question then is:
\How accurate is the model created by the adversary?" If
the model is inaccurate, then the adversary can try to aug-
ment it by adding non-additive delay behavior or additional
variables, and continue. The e(cid:11)ort involved in non-additive
model building is considerably higher but also di(cid:14)cult to
quantify. Here, we will restrict ourselves to quantifying the
complexity/error tradeo(cid:11) of additive model building.
To quantify the accuracy of an additive model that the
adversary can build, we measured the delays of all 2n paths
in a n = 12-stage demultiplexer circuit. Each of these paths
corresponds to a di(cid:11)erent challenge. For a pair of paths
P1 and P2 whose challenges di(cid:11)er in exactly one bit, the
paths share all but one device. The adversary may assume
an additive delay model which implies that the relationship
between the path delays is
P1 (cid:0) P2 = di (cid:0) dj :
The di and dj pairs are marked on Figure 8.
Using all 2n measured delays, we determined a mean and
standard deviation for each of the di (cid:0) dj quantities. This
standard deviation is characteristic of the inaccuracy of the
additive model, we shall call it (cid:27)calc.
In our experiments
(cid:27)calc was between 5ppm and 30ppm, which is roughly the
same as the environmental variations that we have to deal
with. Thus, the additive model might be a valid way of
breaking simple circuits such as single event sensitizable cir-
cuit of Figure 8.
Nevertheless, even if the additive delay model gives re-
sults that are within the tolerances that the adversary has
to meet, he may not be able to use it to e(cid:14)ciently simu-
late the circuit.
Indeed, when he uses the additive delay
model, the adversary is essentially starting from a challenge
he knows a response to, and performing a certain number
of modi(cid:12)cation steps to the corresponding delay to account
for di(cid:11)erences between the known challenge and the one he
is trying to calculate the response for. The modeling error,
(cid:27)calc is present for each one of the additions that the adver-
sary performs. It is likely that the error that is committed
when the model is applied multiple times will be greater
than the best-case error that we have evaluated.
For example, if we assume that the errors that the adver-
sary commits at each step of his computation are Gaussian
and independently distributed between steps, then for a k
step computation, the adversary in fact commits an error of
pk(cid:27)calc. The number of measurements that the adversary
would have to make to be able to predict the response to
a randomly selected response in fewer than k steps is expo-
nential in n
k , so for big enough n, the additive delay model
attack will not be su(cid:14)cient even for simple circuits.
The use of circuits such as the variable delay bu(cid:11)er circuit
of Figure 2 precludes an additive model based attack, since
the delays are non-additive functions of the challenge.
7. ONGOING AND FUTURE WORK
There is still much to be studied about silicon PUFs.
First of all, it would be very satisfying to base the security
of a silicon PUF on some previously known hard problem.
1570.12
0.1
0.08
0.06
0.04
0.02
"ana.easystats.hist_1"
"bob.easystats.hist_1"
"cat.easystats.hist_1"
"dog.easystats.hist_1"
0.4
0.35
0.3
0.25
0.2
0.15
0.1
0.05
"ana.easystats.hist_1_4"