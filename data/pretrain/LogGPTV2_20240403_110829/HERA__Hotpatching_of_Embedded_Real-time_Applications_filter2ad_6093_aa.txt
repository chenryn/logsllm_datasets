title:HERA: Hotpatching of Embedded Real-time Applications
author:Christian Niesler and
Sebastian Surminski and
Lucas Davi
HERA: Hotpatching of Embedded
Real-time Applications
Christian Niesler, Sebastian Surminski, Lucas Davi
University of Duisburg-Essen, Germany
{christian.niesler, sebastian.surminski, lucas.davi}@uni-due.de
Abstract—Memory  corruption  attacks  are  a  pre-dominant 
attack  vector  against  IoT  devices.  Simply  updating  vulnerable 
IoT software is not always possible due to unacceptable downtime 
and  a  required  reboot.  These  side-effects  must  be  avoided  for 
highly-available  embedded  systems  such  as  medical  devices  and, 
generally  speaking,  for  any  embedded  system  with  real-time 
constraints. To avoid downtime and reboot of a system, previous 
research has introduced the concept of hotpatching. However, the 
existing  approaches  cannot  be  applied  to  resource-constrained 
IoT  devices.  Furthermore,  possible  hardware-related  issues  have 
not  been  addressed,  i.e.,  the  inability  to  directly  modify  the 
ﬁrmware  image  due  to  read-only  memory.
In  this  paper,  we  present  the  design  and  implementation  of 
HERA (Hotpatching of Embedded Real-time Applications) which 
utilizes hardware-based built-in features of commodity Cortex-M 
microcontrollers  to  perform  hotpatching  of  embedded  systems. 
HERA  preserves  hard  real-time  constraints  while  keeping  the 
additional  resource  usage  to  a  minimum.  In  a  case  study,  we 
apply  HERA  to  two  vulnerable  medical  devices.  Furthermore, 
we  leverage  HERA  to  patch  an  existing  vulnerability  in  the 
FreeRTOS operating system. These applications demonstrate the 
high  practicality  and  efﬁciency  of  our  approach.
I. 
INTRODUCTION
The  Internet  of  Things  (IoT)  enables  new  use-cases  and 
connectivity in many different domains: consumer electronics, 
household  appliances,  and  even  medical  devices  are  increas-
ingly connected to the Internet. While these devices get widely 
adopted,  their  security  is  often  critical  [1].  In  particular,  IoT 
devices  in  delicate  areas,  like  medical  applications,  or  safety-
critical  environments,  like  robotics,  often  suffer  from  pro-
gramming errors and exploitable vulnerabilities. Recent studies 
show that pacemakers, i.e., critical medical devices implanted 
into  patients  bodies  when  their  heart  rhythm  is  too  slow  or 
irregular,  suffer  from  security  vulnerabilities  [2].  In  2017,  the 
US Food and Drug Administration (FDA) approved a ﬁrmware 
update  for  a  pacemaker  that  was  in  use  by  450k  patients  [3]. 
Although  applying  the  ﬁrmware  update  was  non-invasive,  it 
introduced  negative  side-effects:  the  fall  back  to  ventricular 
demand  pacing,  during  reprogramming,  may  cause  temporary 
symptoms  for  some  patients.  Furthermore,  the  manufacturer 
estimates  a  small  rate  of  unpredictable  device  resets  and 
failures. Such a device reset or failure bears the risk of serious 
health  consequences,  including  death  [4].
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2021
21-25  February  2021, Virtual
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24159
www.ndss-symposium.org
Another challenge in this area concerns recent develop-
ments in the so-called Industrial Internet of Things (IIoT) area:
systems initially designed without security in mind are now
interconnected with each other and the Internet introducing
a large attack surface [5]. Many of these systems require
interaction with the physical world and, more importantly, have
strict real-time constraints. These devices run jobs that must be
completed within deadlines in order to work properly. Failing
to meet
these deadlines results in device malfunction and
might even result in physical damage, e.g., regarding a vehicle
control device, engine control unit, or robotics system. Security
vulnerabilities on this type of devices can have disastrous
consequences. For example, an industrial robot may fail with
respect to safety and harm factory workers or cause a produc-
tion halt with great ﬁnancial loss [5]. Sophisticated attacks on
industrial control systems are a real threat, as past incidents
have shown, e.g., an attack against a German steel mill, which
could not properly shut down its blast furnace [6]. Failures in
individual control components resulted in an undeﬁned state
of the blast furnace and prevented its proper shutdown, leading
to severe physical damage [7].
While there exist several methods to tackle the security
problems of IoT devices (such as device hardening or soft-
ware and hardware penetration tests, to name a few), a key
mechanism to remove the vulnerability is patching or updating
the device. Patching of computer systems is highly important
and very common these days. Today, patch management and
distribution of patches belong to the main and common tasks
of IT departments [8]. Usually, updates are installed using an
application or a special service. The update method has a high
inﬂuence on the rate and speed of patch deployment [9]. In
order to apply the patches, often a restart of the application or
the system is required. In case of IoT systems, patches are often
relatively large, i.e., monolithic blocks that have to be applied
atomically because of the device architecture. As this leads
to a loss of state and introduces a downtime of the system,
these updates have to be scheduled using planned downtime
and patching windows. Unfortunately, this opens a window
of opportunity for an adversary to exploit a not-yet-updated
device although patches are already available. At ﬁrst glance,
this does not seem to be a major issue as the time window is
limited. However, recent studies showed that working exploits
for a given vulnerability become public just on the same day
or the subsequent day after the corresponding patch has been
published [10].
Apart from the described time window, several devices
do not accept any downtime, namely devices with real-time
constraints such as plant control systems with real-time com-
munication between components [11] or pacemakers [4]. Real-
time constraints often emerge from the application context and
the importance of continuous operation to maintain a speciﬁc
state. In case of the steel mill, its control systems cannot be
halted arbitrarily, because they control physical processes that
will continue. But industrial control systems can also be part of
much larger networks: power plants are part of a international
power supply network, connected via the power grid. The
power grid needs to respond to varying energy demands and
needs to ensure continuous power supply of factories, ofﬁces,
and households. This requires coordination and planning in
order to prevent power failures.
Hence, these devices require special treatment, i.e., the
only reasonable but challenging option is to hotpatch these
devices. Hotpatching means patching a program while it ex-
ecutes, without the need to stop or restart the program. This
hotpatching process guarantees high availability and keeps the
current state of the program at all times. To our surprise,
hotpatching has been studied extensively in the context of
traditional software [12] and server applications [13]–[15], but
has received very little attention in the context of embedded
systems.
Furthermore, hotpatching results in changes of code exe-
cution and may violate real-time constraints. Hotpatching is
adding a patch, i.e., modifying the code, likely extending the
execution time of a software fragment, with a certain amount
of overhead. However, the overhead of the hotpatching process,
causing a delay in the execution, is a risk since it is often not
part of the scheduled program execution. This is not an issue in
the context of traditional software [12]. However, within real-
time systems, this can likely result in missing hard deadlines.
Traditional software without real-time constraints is more
generous regarding a single uninterruptible delay as it has no
consequences due to a failed deadline. Hotpatching of real-time
embedded systems strictly requires a small and predictable
delay. A large uninterruptible execution delay is unacceptable
for systems with hard real-time constraints, resulting in many
vulnerable devices being unpatched. Especially in the most
critical devices, the patching is stalled because interruptions are
not possible. This opens the door to attacks on these systems.
Contributions. We propose HERA,
the ﬁrst vulnerability
hotpatching system for embedded systems with real-time con-
straints. Our framework allows to perform security updates
on real-time embedded systems during operation without any
interruption or violation of real-time constraints. In contrast to
existing approaches like Katana [16] and Kitsune [17], we do
neither require dynamic linking nor previous changes to the
target program. Instead, we exploit common built-in hardware
debugging features readily available on the ARM Cortex-
M mainstream processor to instrument all affected program
locations with minimal overhead. By employing the on-board
debugging unit for patch application, we also avoid any direct
ﬁrmware image manipulation thereby allowing hotpatching to
take place on devices with block-writable read-only memory;
a common characteristic of embedded devices. As such, this
allows us to induce minimal changes to the execution time as
code redirection (trampoline insertion) as well as patch acti-
vation is encapsulated in atomic instructions on the hardware
level.
Especially considering security patches, this has several
advantages. It often eliminates the need for complex state
transfer operations as most security patches do not modify
the program state or its data structures. A good example
are memory corruption vulnerabilities which can often be
mitigated through additional bounds checking operations. This
also reduces the amount of time for prior patch veriﬁcation as
no substantial modiﬁcations to the running system are added.
Furthermore, it minimizes the additional resource usage as
only minimal security-related enhancements are applied to the
system.
While we allow the code to be updated in background,
we achieve switching to updated code via an atomic instruc-
tion thereby minimizing time overhead and giving absolute
predictability. We evaluate our solution theoretically through
the examination of uninterruptible code sections, as well as
through external switch time measurements. As our evaluation
shows, the time overhead is minimal and constant. Further-
more, a case study with two medical devices and a hotpatch
for an existing vulnerability in the FreeRTOS operating system
shows general applicability. This makes HERA suitable for
hotpatching of even hard real-time systems,
the most
critical real-time systems.
i.e.,
Hotpatches for the HERA framework can be developed on
both: higher programming languages and then derived from the
compiled binary using binary difﬁng, and directly on assembly
level. While the ﬁrst is the preferred way if source code is
available, the latter allows to develop patches for closed-source
devices.
To the best of our knowledge, our proposed system is
the ﬁrst hotpatching system that targets and solves the above
described challenges like block-writable memory, minimizing
the hotpatching overhead and spare resource usage in a sin-
gle system. To summarize, this paper presents the following
contributions:
• We present HERA, the ﬁrst framework to allow hotpatch-
ing of real-time embedded systems without requiring any
hardware changes.
• We give detailed guidelines how a hotpatch can be derived
directly from normal binary ﬁles to allow the development
of a hotpatch within existing workﬂows in Section V.
• In a case study in Section VII-A, we use this framework
to patch security vulnerabilities of two real-time critical
medical devices, a syringe pump and a heart rate sensor,
as well as the FreeRTOS operating system.
• In our evaluation in Section VII-B, we measure the exact
overhead of the framework. We show that the overhead
of our framework is in the order of processor cycles and
does not vary. This allows deployment of our system in
real-time environments with hard deadlines.
II. BACKGROUND
Since this paper addresses hotpatching of embedded sys-
tems with real-time constraints, we describe the main compo-
nents and core concepts of such devices in this section.
ARM Architecture. With more than 160 billion units shipped,
ARM is currently the most popular processor architecture [18],
especially for IoT devices [19]. Furthermore, ARM architec-
tures are frequently present in the real-time operation context.
2
For instance, a large share of PLCs (control units for indus-
trial processes) are based on ARM [20]. Its microprocessor
architecture is based on the reduced instruction set computer
(RISC) design model [21]. By deﬁnition, it builds upon an
instruction set with small and optimized instructions, instead of
more complex and specialized instructions. ARM is an energy-
friendly micro-architecture featuring asynchronous logic to
reduce power consumption [22].
Flash Patch and Breakpoint Unit. Several ARM processors
feature a hardware unit for debugging purposes which is
called FPB (Flash Patch and Breakpoint) [23]. For example,
the popular Cortex-M3 and M4 processors feature such a
unit. The FPB unit allows to set hardware breakpoints. A
comparator implemented in hardware is used to identify the
correct breakpoint and then halt the processor or modify code
memory. A full FPB unit comes with up to six comparators
for hardware breakpoints [24].
This instruction replacement functionality is a typical fea-
ture of hardware debugging units. For example, the Tensilica
Xtensa processor architecture features debug options that offer
the same instruction replacement functionality as the FPB unit
of the ARM Cortex-M3/M4 [25]. The popular microcontrollers
ESP32 and its predecessor ESP8266 use such Tensilica Xtensa
processors [26], [27]. ESP8266 and ESP32 chips are a popular
platform for IoT devices: more than 100 million of such IoT
chips have been shipped by the manufacturer [28].
Real-time Systems and Requirements. Computer systems
can have different requirements due to expected or mandatory
response times. In case a system has strict deadlines towards its
response times, it is called a real-time system. There are differ-
ent types of real-time expectations and system requirements,
which are typically differentiated by their strictness. A system
can have hard, soft and ﬁrm real-time requirements. A hard
real-time system has deadlines, that must be met at all times.
Otherwise, this has severe consequences. Typical examples
for hard real-time systems are safety-critical applications like
control units for car airbags. In contrast, the ﬁrm deadline
allows for infrequent misses as the consequences are not
catastrophic, but too many would degrade the system of its
usefulness. A missed deadline has no further value in a ﬁrm
system. The playback of music is such a ﬁrm system. A few
missed bits of music will not degrade the entire system, but
frequent misses will. A system neither hard nor ﬁrm is referred
to as soft. The value of the information starts to decrease. A
home heating system can be said to be a soft system. The
system will tolerate frequent deadline misses as long as it will