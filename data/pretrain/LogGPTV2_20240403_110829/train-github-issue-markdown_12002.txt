  * I have searched the issues of this repository and believe that this is not a duplicate.
## Expected Behavior
When dispatching an additional action (the middleware is `await`ing the second
action before forwarding the first action to `next()`) from a redux middleware
invoked by an action call in `getInitialProps`, the function should await both
of the action promises resolving before rendering.
## Current Behavior
Server render does not include state from store dispatched by either action
creator. If I don't `await` the second action call, state from the first
action creator is present. As soon as the page is hydrated on the client side
the actions dispatch normally in `componentDidMount()`.
It seems as if for some reason, the server render is timing out and not
waiting for `getInitialProps` to resolve.
`getInitalProps`:
    static async getInitialProps({
        store: { dispatch },
        query: { slug },
        res,
      }) {
        await dispatch(getActiveOrg(slug)).catch(
          ({ response: { status } }) => {
            if (status === 404) {
              res.statusCode = 404;
            }
          },
        );
        return {
          slug,
        };
      }
middleware:
    export default ({ dispatch }) => next => async action => {
      if (action.type === ORGANIZATION_INFO_RECEIVED) {
        const { payload } = action;
        if (payload.donor_landing_page === 'cause') {
          await dispatch(
            fetchCauses(
              payload.subdomain,
              payload.donor_landing_page_id,
            ),
          );
        }
      }
      next(action);
    };
## Context
The goal of this redux middleware is to allow for conditionally fetching
additional data before the server response dependent on the response of an
initial API call.
## Your Environment
Tech | Version  
---|---  
next | 5.0.0