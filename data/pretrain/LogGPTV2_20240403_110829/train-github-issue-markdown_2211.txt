Since it is possible to select subranges of iterators using UnitRange objects
it is my opinion that Threads.@threads should use that instead of the
iteration through the subrange and item-wise evaluation of the given range at
a specific index. See threadingconstructs.jl#L52.
Solution: #18604
This becomes relevant when you want to use CartesianRange for parallelised
ndimensional loops. CartesianRange flat representation is well defined so
selecting subranges (inspiration) using indices of the flat representation is
well defined, therefore: they can be split into subranges without any
problems. Using that ndimensional loops can be generically parallelised.