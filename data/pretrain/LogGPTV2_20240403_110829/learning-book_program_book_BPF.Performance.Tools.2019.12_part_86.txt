### 14.4 BPF Tools

#### 14.4.1 mlock
The `mlock(8)` tool can be used to trace the duration for which mutex locks are held. An optional process ID can be provided to specify the process to trace; without it, the entire system is traced.

**Source Code:**
```bash
#!/usr/local/bin/bpftrace
BEGIN
{
    printf("Tracing mutex_lock() hold times. Ctrl-C to end.\n");
}

kprobe:mutex_lock,
kprobe:mutex_trylock,
kprobe:mutex_lock_interruptible
/($arg0 == 0 || $pid == $arg1)/
{
    @lock_addr[tid] = arg0;
}

kretprobe:mutex_lock,
kretprobe:mutex_trylock,
kretprobe:mutex_lock_interruptible
/($retval == 0 && (@lock_addr[tid] || $pid == $arg1))/
{
    @held_start[@lock_addr[tid]] = nsecs;
    delete(@lock_addr[tid]);
}

kprobe:mutex_unlock
/(@held_start[arg0])/
{
    @held_time_ns[ksym(arg0), kstack(5), comm] = hist(nsecs - @held_start[arg0]);
    delete(@held_start[arg0]);
}

END
{
    clear(@lock_addr);
    clear(@held_start);
}
```

#### 14.4.2 Spin Locks
As with mutex locks, there are no tracepoints for tracing spin locks. However, several types of spin locks exist, including `spin_lock_bh()`, `spin_lock()`, `spin_lock_irq()`, and `spin_lock_irqsave()`.

**Source Code:**
```c
#define spin_lock_irqsave(lock, flags) \
do { \
    raw_spin_lock_irqsave(spin_lock_check(lock), flags); \
} while (0)

#define raw_spin_lock_irqsave(lock, flags) \
do { \
    typecheck(unsigned long, flags); \
    flags = _raw_spin_lock_irqsave(lock); \
} while (0)
```

You can use `funccount(8)` to trace these functions:
```bash
funccount **spin_lock**
```

#### 14.4.3 kmem
`kmem(8)` is a bpftrace tool that traces kernel memory allocations by stack trace and prints statistics on the number of allocations, the average allocation size, and the total bytes allocated.

**Example Output:**
```bash
+ kmem.bt
Attaching 3 probes...
Tracing kmem allocation stacks (kmalloc, kmem_cache_alloc). Hit Ctrl-C to end.
[...]
?rebytes_alloc: count 44, average 4096, total 180224
```

**Source Code:**
```bash
#!/usr/local/bin/bpftrace
BEGIN
{
    printf("Tracing kmem allocation stacks. Hit Ctrl-C to end.\n");
}

tracepoint:kmem:mm_page_alloc
{
    @pages[kstack(5), comm] = count();
}
```

#### 14.4.4 memleak
`memleak(8)` is a BCC tool that shows allocations that were not freed while tracing, which can help identify memory growth or leaks.

**Example Output:**
```bash
+ memleak
Attaching to kernel allocators, Ctrl+C to quit.
[13:46:02] Top 10 stacks with outstanding allocations:
[...]
6922240 bytes in 1690 allocations from stack
[...]
```

#### 14.4.5 slabratetop
`slabratetop(8)` is a BCC and bpftrace tool that shows the rate of kernel slab allocations by slab cache name.

**Example Output:**
```bash
+ slabratetop
09:48:29 loadavg: 6.30 5.45 5.46 4/3377 29884
CACHE          ALLOCS     BYTES
kmalloc-4096   654        2678784
kmalloc-256    2637       674816
[...]
```

**Source Code:**
```bash
#!/usr/local/bin/bpftrace
#include <linux/slab.h>

kprobe:kmem_cache_alloc
{
    @cache[str($arg1->name)] = count();
}

Interval:s:1
{
    time("%H:%M:%S");
    print(@cache);
    clear(@cache);
}
```

#### 14.4.6 numamove
`numamove(8)` traces page migrations of type "NUMA misplaced" and helps monitor NUMA page migrations.

**Example Output:**
```bash
+ numamove.bt
Attaching 4 probes...
TIME             NUMA_migrations  NUMA_migrations_ns
22:48:45         0                0
22:48:46         0                0
22:48:47         30               0
22:48:48         0                0
22:48:49         0                0
22:48:50         0                0
22:48:51         0                0
[...]
```

**Source Code:**
```bash
#!/usr/local/bin/bpftrace
kprobe:migrate_misplaced_page
{
    @start[tid] = nsecs;
}

kretprobe:migrate_misplaced_page /@start[tid]/
{
    $dur = nsecs - @start[tid];
    @ns += $dur;
    @num++;
    delete(@start[tid]);
}

BEGIN
{
    printf("%10s %18s %18s\n", "TIME", "NUMA_migrations", "NUMA_migrations_ns");
}

interval:s:1
{
    time("%H:%M:%S");
    printf("%s %18d %18d\n", @num, @ns / 1000000);
    delete(@num);
    delete(@ns);
}
```

#### 14.4.7 workq
`workq(8)` traces workqueue requests and times their latency.

**Example Output:**
```bash
+ workq.bt
Attaching 4 probes.
Tracing workqueue request latencies, Ctrl-C to end
[...]
Pus [intel_atom_it_work]:
[1K, 2K) 71
[2K, 4K) 91
[4K, 8K) 86881 261
[8K, 16K) 1524 186988988 886 8868898886986988988 886 8868898886986 1
[16K, 32K) 1019 1eeeeeeeeee8ee8eeeee8eeeeeeee8ee8ee
[32K, 64K) 2 1
[...]
```

**Source Code:**
```bash
#!/usr/local/bin/bpftrace
BEGIN
{
    printf("Tracing workqueue request latencies. Ctrl-C to end.\n");
}

tracepoint:workqueue:workqueue_execute_start
{
    @start[tid] = nsecs;
}

tracepoint:workqueue:workqueue_execute_end
/(@start[tid])/
{
    $dur = nsecs - @start[tid];
    @hist[ksym(@vqfunc[tid])] = hist($dur);
    delete(@start[tid]);
    delete(@vqfunc[tid]);
}

END
{
    clear(@start);
    clear(@vqfunc);
}
```

This document provides a more structured and professional overview of the BPF tools, with clear and concise source code and example outputs.