software,”
Security 2017, Vancouver, BC, Canada, August 16-18, 2017,
E. Kirda and T. Ristenpart, Eds. USENIX Association, 2017,
26th USENIX
Security
in
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:33 UTC from IEEE Xplore.  Restrictions apply. 
645
pp. 235–252. [Online]. Available: https://www.usenix.org/conference/
usenixsecurity17/technical-sessions/presentation/wang-shuai
[33] T. Brennan, S. Saha, T. Bultan, and C. S. Pasareanu, “Symbolic
path cost analysis for side-channel detection,” in Proceedings of the
27th ACM SIGSOFT International Symposium on Software Testing
and Analysis, ISSTA 2018, Amsterdam, The Netherlands, July 16-21,
2018, F. Tip and E. Bodden, Eds. ACM, 2018, pp. 27–37. [Online].
Available: https://doi.org/10.1145/3213846.3213867
[34] S. He, M. Emmi, and G. F. Ciocarlie, “ct-fuzz: Fuzzing for
timing leaks,” in 13th IEEE International Conference on Software
Testing, Validation and Verification,
ICST 2020, Porto, Portugal,
October 24-28, 2020.
IEEE, 2020, pp. 466–471. [Online]. Available:
https://doi.org/10.1109/ICST46399.2020.00063
[35] S. Weiser, D. Schrammel, L. Bodner, and R. Spreitzer, “Big numbers
- big troubles: Systematically analyzing nonce leakage in (EC)DSA
implementations,” in 29th USENIX Security Symposium, USENIX
Security 2020, August 12-14, 2020, S. Capkun and F. Roesner,
Eds. USENIX Association, 2020, pp. 1767–1784. [Online]. Available:
https://www.usenix.org/conference/usenixsecurity20/presentation/weiser
[36] S. Weiser, A. Zankl, R. Spreitzer, K. Miller, S. Mangard, and G. Sigl,
“DATA - differential address trace analysis: Finding address-based
side-channels in binaries,” in 27th USENIX Security Symposium,
USENIX Security 2018, Baltimore, MD, USA, August 15-17, 2018,
W. Enck and A. P. Felt, Eds. USENIX Association, 2018,
pp. 603–620. [Online]. Available: https://www.usenix.org/conference/
usenixsecurity18/presentation/weiser
[37] UCSD PLSysSec. haybale-pitchfork. [Online]. Available: https://github.
com/PLSysSec/haybale-pitchfork
[38] MemorySanitizer.
[Online]. Available:
https://clang.llvm.org/docs/
MemorySanitizer.html
[39] J. Wichelmann, A. Moghimi, T. Eisenbarth, and B. Sunar, “Microwalk:
A framework for finding side channels in binaries,” in Proceedings of
the 34th Annual Computer Security Applications Conference, ACSAC
2018, San Juan, PR, USA, December 03-07, 2018. ACM, 2018, pp.
161–173. [Online]. Available: https://doi.org/10.1145/3274694.3274741
https://www.
Available:
Timecop.
[Online].
[40] M.
Neikes.
post-apocalyptic-crypto.org/timecop/
[41] P. Cuoq.
tis-ct.
[Online]. Available:
http://web.archive.org/web/
20200810074547/http://trust-in-soft.com/tis-ct/
[42] J. B. Almeida, M. Barbosa, J. S. Pinto, and B. Vieira, “Formal
verification of side-channel countermeasures using self-composition,”
Sci. Comput. Program., vol. 78, no. 7, pp. 796–812, 2013. [Online].
Available: https://doi.org/10.1016/j.scico.2011.10.008
[43] T. Antonopoulos, P. Gazzillo, M. Hicks, E. Koskinen, T. Terauchi, and
S. Wei, “Decomposition instead of self-composition for proving the
absence of timing channels,” in Proceedings of the 38th ACM SIGPLAN
Conference on Programming Language Design and Implementation,
PLDI 2017, Barcelona, Spain, June 18-23, 2017, A. Cohen and
M. T. Vechev, Eds. ACM, 2017, pp. 362–375. [Online]. Available:
https://doi.org/10.1145/3062341.3062378
[44] G. Doychev, D. Feld, B. Köpf, L. Mauborgne, and J. Reineke,
“Cacheaudit: A tool for the static analysis of cache side channels,” in
Proceedings of the 22th USENIX Security Symposium, Washington, DC,
USA, August 14-16, 2013, S. T. King, Ed. USENIX Association, 2013,
pp. 431–446. [Online]. Available: https://www.usenix.org/conference/
usenixsecurity13/technical-sessions/paper/doychev
[45] G. Barthe, M. Gaboardi, E. J. G. Arias, J. Hsu, A. Roth, and
P. Strub, “Computer-aided verification for mechanism design,” in
Web and Internet Economics - 12th International Conference, WINE
2016, Montreal, Canada, December 11-14, 2016, Proceedings, ser.
Lecture Notes in Computer Science, Y. Cai and A. Vetta, Eds.,
vol. 10123.
[Online]. Available:
https://doi.org/10.1007/978-3-662-54110-4_20
Springer, 2016, pp. 279–293.
[46] C. Watt, J. Renner, N. Popescu, S. Cauligi, and D. Stefan, “Ct-wasm:
type-driven secure cryptography for the web ecosystem,” Proc. ACM
Program. Lang., vol. 3, no. POPL, pp. 77:1–77:29, 2019. [Online].
Available: https://doi.org/10.1145/3290390
[47] S. Cauligi, G. Soeller, B. Johannesmeyer, F. Brown, R. S. Wahby,
J. Renner, B. Grégoire, G. Barthe, R. Jhala, and D. Stefan, “Fact:
a DSL for timing-sensitive computation,” in Proceedings of the 40th
ACM SIGPLAN Conference on Programming Language Design and
Implementation, PLDI 2019, Phoenix, AZ, USA, June 22-26, 2019,
K. S. McKinley and K. Fisher, Eds. ACM, 2019, pp. 174–189.
[Online]. Available: https://doi.org/10.1145/3314221.3314605
[48] B. Rodrigues, F. M. Q. Pereira, and D. F. Aranha, “Sparse
implicit flows with applications to side-channel
representation of
detection,” in Proceedings of
the 25th International Conference on
Compiler Construction, CC 2016, Barcelona, Spain, March 12-18,
2016, A. Zaks and M. V. Hermenegildo, Eds. ACM, 2016, pp.
110–120. [Online]. Available: https://doi.org/10.1145/2892208.2892230
[49] B. Köpf, L. Mauborgne, and M. Ochoa, “Automatic quantification
of cache side-channels,” in Computer Aided Verification - 24th
International Conference, CAV 2012, Berkeley, CA, USA, July 7-13,
2012 Proceedings, ser. LNCS, P. Madhusudan and S. A. Seshia,
Eds., vol. 7358.
Springer, 2012, pp. 564–580. [Online]. Available:
https://doi.org/10.1007/978-3-642-31424-7_40
[50] K. Athanasiou, B. Cook, M. Emmi, C. MacCárthaigh, D. Schwartz-
Narbonne, and S. Tasiran, “Sidetrail: Verifying time-balancing of
cryptosystems,” in Verified Software. Theories, Tools, and Experiments
- 10th International Conference, VSTTE 2018, Oxford, UK, July 18-19,
2018, Revised Selected Papers, ser. LNCS, R. Piskac and P. Rümmer,
Eds., vol. 11294. Springer, 2018, pp. 215–228. [Online]. Available:
https://doi.org/10.1007/978-3-030-03592-1_12
[51] J. Chen, Y. Feng, and I. Dillig, “Precise detection of
side-
channel vulnerabilities using quantitative cartesian hoare logic,” in
Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security, CCS 2017, Dallas, TX, USA, October 30
- November 03, 2017, B. M. Thuraisingham, D. Evans, T. Malkin,
and D. Xu, Eds. ACM, 2017, pp. 875–890. [Online]. Available:
https://doi.org/10.1145/3133956.3134058
[52] G. Barthe, G. Betarte, J. D. Campo, C. D. Luna, and D. Pichardie,
“System-level non-interference for constant-time cryptography,” in
Proceedings of the 2014 ACM SIGSAC Conference on Computer and
Communications Security, Scottsdale, AZ, USA, November 3-7, 2014,
G. Ahn, M. Yung, and N. Li, Eds. ACM, 2014, pp. 1267–1279.
[Online]. Available: https://doi.org/10.1145/2660267.2660283
[53] M. Wu, S. Guo, P. Schaumont, and C. Wang, “Eliminating timing
side-channel leaks using program repair,” in Proceedings of the 27th
ACM SIGSOFT International Symposium on Software Testing and
Analysis, ISSTA 2018, Amsterdam, The Netherlands, July 16-21, 2018,
F. Tip and E. Bodden, Eds. ACM, 2018, pp. 15–26.
[Online].
Available: https://doi.org/10.1145/3213846.3213851
[54] P. Borrello, D. C. D’Elia, L. Querzoni, and C. Giuffrida, “Constantine:
Automatic side-channel resistance using efficient control and data flow
linearization,” CoRR, vol. abs/2104.10749, 2021. [Online]. Available:
https://arxiv.org/abs/2104.10749
[55] UCSD PLSysSec. pitchfork-angr. [Online]. Available: https://github.
com/PLSysSec/pitchfork-angr
[56] S. Chattopadhyay and A. Roychoudhury, “Symbolic verification of
cache side-channel freedom,” IEEE Trans. Comput. Aided Des. Integr.
Circuits Syst., vol. 37, no. 11, pp. 2812–2823, 2018. [Online]. Available:
https://doi.org/10.1109/TCAD.2018.2858402
[57] M. Balliu, M. Dam, and G. L. Guernic, “Encover: Symbolic
exploration for information flow security,” in 25th IEEE Computer
Security Foundations Symposium, CSF 2012, Cambridge, MA, USA,
June 25-27, 2012, S. Chong, Ed.
IEEE Computer Society, 2012, pp.
30–44. [Online]. Available: https://doi.org/10.1109/CSF.2012.24
[58] M. Nemec, D. Klinec, P. Svenda, P. Sekan, and V. Matyas, “Measuring
popularity of cryptographic libraries in internet-wide scans,” in Proceed-
ings of the 33rd Annual Computer Security Applications Conference
(ACSAC 2017). ACM, 2017.
[59] C. Canella, J. V. Bulck, M. Schwarz, M. Lipp, B. von Berg,
P. Ortner, F. Piessens, D. Evtyushkin, and D. Gruss, “A systematic
transient execution attacks and defenses,” in 28th
evaluation of
USENIX Security Symposium, USENIX Security 2019, Santa Clara,
CA, USA, August 14-16, 2019, N. Heninger and P. Traynor, Eds.
USENIX Association, 2019, pp. 249–266. [Online]. Available: https:
//www.usenix.org/conference/usenixsecurity19/presentation/canella
[60] S. Cauligi, C. Disselkoen, D. Moghimi, G. Barthe, and D. Stefan, “SoK:
Practical foundations for spectre defenses,” CoRR, vol. abs/2105.05801,
2021. [Online]. Available: https://arxiv.org/abs/2105.05801
[61] M. Guarnieri, B. Köpf, J. F. Morales, J. Reineke, and A. Sánchez,
“Spectector: Principled detection of speculative information flows,”
in 2020 IEEE Symposium on Security and Privacy, SP 2020, San
Francisco, CA, USA, May 18-21, 2020.
IEEE, 2020, pp. 1–19.
[Online]. Available: https://doi.org/10.1109/SP40000.2020.00011
[62] S. Cauligi, C. Disselkoen, K. von Gleissenthall, D. M. Tullsen,
D. Stefan, T. Rezk, and G. Barthe, “Constant-time foundations for
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:33 UTC from IEEE Xplore.  Restrictions apply. 
646
the new spectre era,” in Proceedings of
the 41st ACM SIGPLAN
International Conference on Programming Language Design and
Implementation, PLDI 2020, London, UK, June 15-20, 2020, A. F.
Donaldson and E. Torlak, Eds. ACM, 2020, pp. 913–926. [Online].
Available: https://doi.org/10.1145/3385412.3385970
[63] J. Protzenko, B. Parno, A. Fromherz, C. Hawblitzel, M. Polubelova,
K. Bhargavan, B. Beurdouche, J. Choi, A. Delignat-Lavaud, C. Fournet,
N. Kulatova, T. Ramananandro, A. Rastogi, N. Swamy, C. M.
Wintersteiger, and S. Z. Béguelin, “Evercrypt: A fast, verified,
cross-platform cryptographic provider,” in 2020 IEEE Symposium
on Security and Privacy, SP 2020, San Francisco, CA, USA,
May 18-21, 2020.
IEEE, 2020, pp. 983–1002. [Online]. Available:
https://doi.org/10.1109/SP40000.2020.00114
[64] J. K. Zinzindohoué, K. Bhargavan, J. Protzenko, and B. Beurdouche,
“Hacl*: A verified modern cryptographic library,” in Proceedings of
the 2017 ACM SIGSAC Conference on Computer and Communications
Security, CCS 2017, Dallas, TX, USA, October 30 - November
03, 2017, B. M. Thuraisingham, D. Evans, T. Malkin,
and
D. Xu, Eds. ACM, 2017, pp. 1789–1806.
[Online]. Available:
https://doi.org/10.1145/3133956.3134043
[65] J. B. Almeida, M. Barbosa, G. Barthe, B. Grégoire, A. Koutsos,
V. Laporte, T. Oliveira, and P. Strub, “The last mile: High-assurance and
high-speed cryptographic implementations,” in 2020 IEEE Symposium
on Security and Privacy, SP 2020, San Francisco, CA, USA,
May 18-21, 2020.
IEEE, 2020, pp. 965–982. [Online]. Available:
https://doi.org/10.1109/SP40000.2020.00028
[66] J. B. Almeida, M. Barbosa, G. Barthe, A. Blot, B. Grégoire,
V. Laporte, T. Oliveira, H. Pacheco, B. Schmidt, and P. Strub, “Jasmin:
High-assurance and high-speed cryptography,” in Proceedings of the
2017 ACM SIGSAC Conference on Computer and Communications
Security, CCS 2017, Dallas, TX, USA, October 30 - November
03, 2017, B. M. Thuraisingham, D. Evans, T. Malkin,
and
D. Xu, Eds. ACM, 2017, pp. 1807–1823.
[Online]. Available:
https://doi.org/10.1145/3133956.3134078
[67] Y. Acar, M. Backes, S. Fahl, S. Garfinkel, D. Kim, M. L. Mazurek,
and C. Stransky, “Comparing the usability of cryptographic apis,” in
2017 IEEE Symposium on Security and Privacy (SP).
IEEE, 2017, pp.
154–171.
[68] S. Krüger, S. Nadi, M. Reif, K. Ali, M. Mezini, E. Bodden, F. Göpfert,
F. Günther, C. Weinert, D. Demmler et al., “Cognicrypt: Supporting de-
velopers in using cryptography,” in 2017 32nd IEEE/ACM International
Conference on Automated Software Engineering (ASE).
IEEE, 2017,
pp. 931–936.
[69] S. Krüger, J. Späth, K. Ali, E. Bodden, and M. Mezini, “Crysl: An
extensible approach to validating the correct usage of cryptographic
apis,” IEEE Transactions on Software Engineering, 2019.
[70] J. M. Haney, M. Theofanos, Y. Acar, and S. S. Prettyman, “" we make
it a big deal in the company": Security mindsets in organizations that
develop cryptographic products,” in Fourteenth Symposium on Usable
Privacy and Security ({SOUPS} 2018), 2018, pp. 357–373.
[71] A. Reid, L. Church, S. Flur, S. de Haas, M. Johnson, and B. Laurie,
“Towards making formal methods normal: meeting developers where
they are,” arXiv preprint arXiv:2010.16345, 2020.
[72] G. B. Willis, Cognitive interviewing: A tool for improving questionnaire
design.
sage publications, 2004.
[73] V. Braun and V. Clarke, “Using thematic analysis in psychology,”
Qualitative research in psychology, vol. 3, no. 2, pp. 77–101, 2006.
[74] N. McDonald, S. Schoenebeck, and A. Forte, “Reliability and inter-rater
reliability in qualitative research: Norms and guidelines for cscw and hci
practice,” Proceedings of the ACM on Human-Computer Interaction,
vol. 3, no. CSCW, pp. 1–23, 2019.
[75] W. J. Conover, Practical nonparametric statistics.
1998, vol. 350.
John Wiley & Sons,
[76] Y. Benjamini and Y. Hochberg, “Controlling the false discovery rate:
a practical and powerful approach to multiple testing,” Journal of the
Royal statistical society: series B (Methodological), vol. 57, no. 1, pp.
289–300, 1995.
[77] S. Weiser, D. Schrammel, L. Bodner, and R. Spreitzer, “Big
numbers - big troubles: Systematically analyzing nonce leakage
in (ec)dsa implementations,” in 29th USENIX Security Symposium
(USENIX Security 20). USENIX Association, Aug. 2020, pp.
1767–1784.
[Online]. Available: https://www.usenix.org/conference/
usenixsecurity20/presentation/weiser
[78] A. Bertolino, “Software testing research: Achievements, challenges,
IEEE, 2007,
dreams,” in Future of Software Engineering (FOSE’07).
pp. 85–103.
[79] “ebacs: Ecrypt benchmarking of cryptographic systems,” accessed
November 5, 2009. [Online]. Available: https://bench.cr.yp.to
[80] M. Vanhoef and E. Ronen, “Dragonblood: Analyzing the dragonfly
handshake of WPA3 and eap-pwd,” in 2020 IEEE Symposium on
Security and Privacy, SP 2020.
IEEE, 2020, pp. 517–533. [Online].
Available: https://doi.org/10.1109/SP40000.2020.00031
[81] D. D. A. Braga, P. Fouque, and M. Sabt, “Dragonblood is still
leaking: Practical cache-based side-channel in the wild,” in ACSAC ’20:
Annual Computer Security Applications Conference. ACM, 2020, pp.
291–303. [Online]. Available: https://doi.org/10.1145/3427228.3427295
[82] A. Shallue and C. E. van de Woestijne, “Construction of rational points
on elliptic curves over finite fields,” in Algorithmic Number Theory,
7th International Symposium, ANTS-VII, ser. LNCS, F. Hess, S. Pauli,
and M. E. Pohst, Eds., vol. 4076. SV, 2006, pp. 510–524. [Online].
Available: https://doi.org/10.1007/11792086_36
APPENDIX A
SURVEY
A. Background
Q1.1: How many years have you been developing crypto-
graphic code?
[Numeric field]
Q1.2: What background do you have in cryptography?
□ Academic
□ Took some classes
□ On the job experience
□ Teach it
□ Hobby
□ Industry
□ Prefer not to say
Q1.3: Can you tell us a little bit more about your back-
ground as a developer who works on cryptographic li-
braries/primitives?
[Free text field]
B. Library / Primitive
Q2.1: What’s your role in the development of library? (E.g.,
maintainer, project lead, core developer, commit rights, no
rights, etc.)
[Free text field]
Q2.2: How are you involved in design decisions (e.g., con-
cerning the API, coding guidelines and style, security-relevant
properties) for library?
[Free text field]
Q2.3: What are the intended use cases of library? (E.g.,
embedded use, servers, etc.)
[Free text field]
Q2.4: What is the threat model for library with regards to
side-channel attacks? (E.g., local/remote attackers, etc.)
[Free text field]
Q2.5: Do you consider timing attacks a relevant threat for the
intended use of library and its threat model? Please give a
brief explanation for why / why not. (If the execution time
of a program depends on secret data, a timing attack recovers
information about the secret by computing the inverse of this
dependency. The two most notorious sources for such depen-
dencies are secret dependent control flow and secret-dependent
memory access. Timing attacks include cache attacks where
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:33 UTC from IEEE Xplore.  Restrictions apply. 
647
the attacker uses the cache to infer information about memory
accesses of a target.)
[Free text field]
Q2.6: Does library claim resistance against timing attacks?
◦ Yes
◦ No