are unmanageable in practice, because most of them are
based on expressive logics that cannot be put at work in
real DBMSs. Therefore, since all relational DBMSs sup-
port SQL, our trust management model is based on a SQL
syntax.
In this way, we make trust management work in
DBMSs, while enjoying a high expressiveness and ﬂexibil-
ity thanks to the coupling with SQL and existing DBMS
services.
We consider the diﬀerent concepts identiﬁed in the previous
section and propose a possible SQL syntax for deﬁning them.
The concept of identity corresponds to a public key and we
do not need to explicitly represent it in the model. Also,
delegation certiﬁcates are not explicitly represented in the
model, which is focused on the speciﬁcation of policies based
on certiﬁed attributes. They are instead considered in the
deﬁnition of certiﬁed attributes, which can be asserted by a
trusted authority or by an authority delegated by it.
Each trust concept is represented by a SQL statement re-
sulting in the construction of a corresponding schema ob-
ject (see Section 5.1). Note that the introduction of SQL
statements for the representation of the model is a critical
success factor for a trust management solution in relational
DBMSs, otherwise DBAs would be required to express trust
using either external or low-level SQL constructs. The in-
troduction of speciﬁc SQL constructs for the management
of a novel security service is both compatible with the typi-
cal DBMS approach, where new constructs are always used
to represent novel functions (e.g., SQL:2003/Foundation has
more than 200 constructs), as well as the canonical security
design approach, which imposes to keep the policy and its
management clear and separated from the mechanism and
implementation details.
151
following
Example 2. The
create authorityclass
statement deﬁnes
the HealthGovAgency class as any
agency holding a certiﬁcate issued from the Department
of Health (DOH) proving that the agency is specialized in
healthcare and has paid the registration tax.
create authorityclass HealthGovAgency
authoritative DOH with delegation
(regtax varchar(10) check (regtax=‘paid’),
specialty varchar(15)
check (specialty=‘healthcare’) )
3.2 Certiﬁed attributes (trust tables)
Traditional approaches to trust management (e.g., [4, 10,
13, 19]) usually do not assume a (pre)declaration of the at-
tributes that will be used in the policy, but simply use at-
tributes in the policy. However, since DBMS engines need a
structured organization of the data, the consideration of a
DBMS context requires the explicit identiﬁcation, in terms
of names and types, of all the attributes that will be used in
the trust model. In our solution, the concept of trust table
responds to this need, as it represents the means by which
it is possible to consider the information provided through
certiﬁcates in rules and queries. The concept of trust table
captures several aspects:
• the certiﬁed attributes that characterize the identity
making a request to the database. The idea is that
a client presents a set of certiﬁcates and the informa-
tion extracted from them is stored in a relational table
that associates this information with the session that
manages the dialog with the client;
• the declaration of the authorities trusted for asserting
those attributes;
• the declaration of whether possible delegated authori-
ties are accepted (as well as a possible list of excluded
authorities);
• the speciﬁcation of possible conditions on the value of
attributes that can be accepted; it allows ﬁltering of
certiﬁcates based on the values of the attributes ap-
pearing in them.
The proposed syntax for the deﬁnition of a trust table is as
follows.
create trusttable TrustTableName
[authoritative
AuthorityClassOrName [with [no] delegation]
{,AuthorityClassOrName [with [no] delegation]}]
[except AuthorityName {, AuthorityName}]
( AttrName AttrDomain [check (Condition)]
{,AttrName AttrDomain [check (Condition)]}
[, check (Condition)])
The interpretation of the options is as follows. The Trust-
TableName represents a name associated with the set of
attributes extracted from certiﬁcates signed by given au-
thorities. The authoritative clause describes the authori-
ties that are trusted as signers of certiﬁcates producing the
3.1 Authority
The concept of authority deﬁnes the identities that are
trusted to issue certiﬁcates. Its deﬁnition binds a name to
the public key of the authority. Considering the features
of current X.509 certiﬁcates, which use a predeﬁned schema
to describe the Distinguished Name of authorities, we also
envision the introduction of a predeﬁned set of attributes in
the authority description. The syntax of the SQL statement
is as follows.
create authority AuthorityName
[imported by FileName]
[public_key = AttrValue
{,AttrName = AttrValue }]
This statement permits to deﬁne authority AuthorityName
either by importing its description from an existing certiﬁ-
cate stored in a ﬁle (clause imported by) or by explicitly
introducing its attributes. The attributes follow the schema
speciﬁed by X.509 [9] and must include the authority public
key.
Example 1. The following create authority statement
deﬁnes authority DOH (Department of Health) specifying its
X.509 attributes, namely: common name (CN), organization
(O), and country (C).
create authority DOH
public_key = ‘14:c9:ec....:4f:91:51’,
CN = ‘Department of Health’,
O = ‘Government’,
C = ‘IT’
A critical aspect for scalability is represented by the ability
of deﬁning an authority based on its certiﬁed attributes, in-
stead of its identity. To this purpose, we propose the concept
of authority class and the following SQL statement.
create authorityclass AuthorityClassName
authoritative
AuthorityClassOrName [with [no] delegation]
{,AuthorityClassOrName [with [no] delegation]}
[except AuthorityName {, AuthorityName}]
( AttrName AttrDomain [check (Condition)]
{,AttrName AttrDomain [check (Condition)]}
[, check (Condition)])
This statement allows the deﬁnition of authority class Au-
thorityClassName. The syntax is rich and reuses many fea-
tures that SQL oﬀers for the deﬁnition of tables. The de-
scription of the meaning and role of each term of the syntax
appears in the next subsection, because its features are iden-
tical to those used for trust tables. The main diﬀerence in
the management of authority classes compared with trust
tables (see next subsection) is that trust tables represent
properties obtained by certiﬁcates where the subject is the
identity interacting with the database, whereas authority
classes are deﬁned based on attribute certiﬁcates where the
subject is an authority. The syntax is recursive, and an au-
thority class can be deﬁned starting from another authority
class.
152
speciﬁed set of attributes. If the authoritative clause is
missing, we assume that the DBMS uses a certiﬁcate veri-
ﬁcation service, independent from the proposed SQL trust
model, which identiﬁes the trusted certiﬁcates in autonomy.
If with ([no]) delegation is speciﬁed, the module respon-
sible for verifying the integrity of the certiﬁcates is (not)
permitted to consider certiﬁcate chains. The except clause
allows the speciﬁcation of exceptions. It can be used by the
DBA to exclude speciﬁc authorities that she does not want
to consider for the speciﬁc trust table (even if they have re-
ceived a delegation for the speciﬁed set of attributes). The
reason can be that the authority is not trusted by the DBA
or that a more speciﬁc trust table is used to manage certiﬁ-
cates issued from that authority.
The check clause is a powerful mechanism that SQL oﬀers
for the description of integrity constraints. The trust table
uses this mechanism to introduce constraints on the values
of the certiﬁcate attributes.
Example 3. The following trust table Physicians speci-
ﬁes properties deﬁning the attributes characterizing medical
doctors. The check clause imposes the non nullity of the
license number.
create trusttable Physicians
authoritative HealthGovAgency with delegation
except HealthSchoolAuth
(code char(9),
name varchar(25),
license_number int
check (license_number is not null),
specialty varchar(20)
)
3.3 Policy
A trust management policy regulates access to resources
based on the attributes stated by veriﬁed certiﬁcates. Sup-
porting a trust management policy requires then to provide
the DBMSs with means to exploit certiﬁed attributes to reg-
ulate access. In this section, we show how certiﬁed attributes
are used by the DBMS to regulate role activation and user
identiﬁer enabling. This provides a dynamic component for
managing subjects, whose access is then regulated by classi-
cal authorizations (for roles and/or users) within the DBMS
itself. We also illustrate how trust management can be used
to enrich access control with context-dependent restrictions.
3.3.1 Trust policy
The trust policy represents the mechanism by which data
access privileges are assigned to the clients, based on the
information presents in the trust table. The trust policy
allows the system to associate with a client a given role,
subject to the satisfaction of a condition that can refer to
the trust table attributes. The condition is expressed in the
SQL syntax for query predicates, and uses the SQL dot no-
tation to refer to trust table attributes (preceding them with
the name of the trust table). The following SQL statement
deﬁnes a trust policy.
create trustpolicy [PolicyName]
[for Role [autoactivate] | Userid ]
where Condition
Here, Condition is any predicate that can appear in the
where clause of a SQL query and can refer to the trust table
using its name and specifying the attributes contained in it.
The Role is a set of privileges and it has to be a previously
deﬁned SQL role (the concept of role has been introduced in
the SQL standard by SQL:1999 [6]). A role can be dynami-
cally activated by all users authorized for it. The semantics
of the statement is therefore that all users presenting certiﬁ-
cates satisfying the condition are authorized to activate the
speciﬁed role or are enabled the user id. The role activation
is automatic if the autoactivate option is speciﬁed. If the
for clause is omitted, the user satisfying the condition is
assigned the privileges of the predeﬁned identiﬁer PUBLIC,
which everybody is allowed to activate.
Since trust management systems are typically used to en-
force attribute-based access control (which departs from the
classical mechanism based on user identiﬁers) this state-
ment would be typically used to establish role activation.
The reason for considering trust policy statements referring
to user identiﬁers is to support authentication certiﬁcates,
that is, certiﬁcates stating a correspondence between a trust
management identity and a user identiﬁer internal to the
database.2
Example 4. The following policy activates role Cardiol-
ogist for each user presenting a certiﬁcate from a health gov-
ernment agency (see Example 3) proving that the user is a
doctor specialized in cardiology.
create trustpolicy
for Cardiologist autoactivate
where Physicians.specialty = ‘Cardiology’
3.3.2 Support for context-based restrictions
SQL provides some support for content-based access con-
trol, via the use of views, but it does not provide support
for context-based access control, where access to data (or to
views over them) may depend on properties of the user (or
its session) such as time, the machine from which the user
connected, and so on. Our trust management solution can
be exploited to provide such a functionality. Also, coupled
with the view mechanism it can provide a means to spec-
ify accesses where each user has a particular view over the
data, depending on its certiﬁed properties. This technique
is simple, yet eﬀective, and powerful. The speciﬁcation of
the certiﬁcate attributes follows an approach similar to the
one used for the deﬁnition of trust policy conditions, thus
referencing certiﬁcate attributes using a dot notation. A
small diﬀerence is that the trust tables are assumed to be
directly available in the deﬁnition of the trust policy con-
dition, whereas they have to be explicitly cited in the from
clause of the query deﬁning the view.
2When the client satisﬁes the conditions of many trust poli-
cies, she would receive a grant to activate multiple roles,
and if the trust policies specify the autoactivate option,
they will be all activated at the same time. The concurrent
activation of multiple privileges does not create a critical
situation, thanks to the absence of negative authorizations
in SQL that permits an immediate combination of diﬀerent
authorization proﬁles based on set union.
153
SATISFIES(cert ,TT )
If cert .issuer ∈ TT .Roots then return valid(cert .id) /* the issuer is a root auth. for TT */
Roots := {auth ∈ TT .Roots | TT .Roots.del ﬂag=true} /* Determine authorities of domain TT which can delegate */
If Roots = ∅ then return(false) /* No delegation allowed */
/* Phase 1: graph construction*/
For dc ∈ Deleg Certs do /* Construct labeled graph G=(V,E) of delegation certiﬁcates */
V := V ∪ {dc.subject , dc.issuer }
E := E ∪ {hdc.subject , dc.issuer i}
λ(hdc.subject , dc.issuer i).Attributes := dc.Attributes
λ(hdc.subject , dc.issuer i).cost := dc.cost
λ(hdc.subject , dc.issuer i).id := dc.id
/* Phase 2: ﬁnd supporting chains */
Tocheck := cert .Attributes ∩ TT .Attributes /*Initialize set of attributes for which chains have to be found */
For a ∈ Tocheck do /* Initialize Cost and Pred of each node n */
For n ∈ V do
Cost n[a] := ∞ /* lowest cost of path for a ending in node n */
Pred n[a] := null /* predecessor of n in such a path */
Makenull(Queue) /* Create priority queue of edges with information of attributes and cost of path ending with them */
For e ∈ {hn1, n2i ∈ E | n1=cert .issuer } do /* Add to Queue all edges outgoing from cert.issuer */
p attrs := λ(e).Attributes
p cost := λ(e).cost
Insert([n1,n2,p attrs,p cost ],Queue)
Makenull(Verify Queue) /* Create priority queue describing the root nodes of the solution chains */
While Tocheck 6= ∅ ∧ Queue 6= ∅ /* Extract from Queue the element with minimum path cost */
[from,to,p attrs,p cost ] := Extract minp cost (Queue)
A := ∅ /* Keeps track of attributes veriﬁed along the chain */
For a ∈ p attrs ∩ Tocheck /* For each attribute still to be veriﬁed that belongs to the extracted edge hfrom,toi,
If Cost to[a] > p cost then if the cost of the path expressed by the element is smaller than the one of current path,
Cost to[a] := p cost
Pred to[a] := from
A := A ∪ a
If A 6= ∅ then
If to ∈ Roots then
update solution to include the extracted edge */
Tocheck := Tocheck − A
Insert([to,A,p cost ],Verify Queue)
else For e ∈ {hn1, n2i ∈ E | n1=to} do
p attrs := λ(e).Attributes ∩ A ∩ Tocheck
If p attrs 6= ∅ then
p cost := p cost + λ(e).cost
Insert([to,n2,p attrs,p cost ],Queue)
If Tocheck 6= ∅ then return(false) /* No chain covering all attributes in Tocheck is found */
/* Phase 3: verify chains */