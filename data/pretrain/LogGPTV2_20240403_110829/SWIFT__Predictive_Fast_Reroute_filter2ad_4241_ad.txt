those with the lowest one), until the FS for all the aggregated links
does not increase anymore. The fit score FS for any set S of links is
computed by extending the definition of WS and PS as follows.


l ∈S
W (l, t)
l ∈S
W (l, t) + P(l, t)

l ∈S
W (l, t)
W (t)
W S(S, t) =
PS(S, t) =
The set of links (potentially, with a single element) with the highest
FS is returned. To ensure safety (see §3.3), for each link inferred,
SWIFT must choose a backup route that does not traverse the
common endpoint of the links.4 This prevents SWIFT to reroute a
prefix to a backup next-hop that uses another inferred link (because
all the inferred links have a common endpoint). By choosing backup
paths bypassing a superset of the inferred links, SWIFT also ensures
safety in case the inference algorithm correctly localizes the ASes
involved in the outage instead of the precise links.
5 SWIFT ENCODING ALGORITHM
In this section, we describe how SWIFT tags are computed. Recall
that these tags are embedded onto the incoming packets in the
first stage of the forwarding table and are split in two parts: one
which encodes the AS links used by the packet, and another which
encodes the next-hops to reroute to should any of these links fail.
Thanks to these embedded tags, a SWIFTED router can reroute
traffic efficiently upon an inference, independently on the number
of prefixes impacted.
In section 7, and similarly to [30, 31], we show how SWIFT
can leverage the destination MAC to tag incoming traffic. The
destination MAC is indeed a good “tag carrier” as it provides a
significant number of bits (48), and can easily be removed in the
second stage of the forwarding table by rewriting it to the MAC
address of the actual next-hop, as any IP router would do.
4This is enough to ensure safety. However, SWIFT computes the backup next-hops in
advance, i.e., before the failure (see §3.2). As SWIFT does not know which endpoint of a
link will be the common endpoint, it chooses backup paths (for the prefixes traversing
this link) avoiding both endpoints of the link.
SWIFT: Predictive Fast Reroute
Figure 5: A SWIFTED router embeds a tag into incoming
packets. The tag encodes the links traversed by the packet
(Part 1) along with backup next-hops for each of the encoded
links (Part 2).
Encoding AS links. The first part of the tag (right side of Fig. 5)
encodes the AS path along which each packet will flow. For each
prefix, we consider the AS path associated with the best route for it,
and we store the position of ASes in that path. Namely, we define m
sets, with m being the length of the longest AS path, and we call the
i-th set position i. For any AS path (u0 u1 . . . uk), with k ≤ m, we
then add the AS identifier of ui to position i, for every i = 1, . . . , k.
Note that the first hop in any AS path is already represented as
primary next-hop (see Part 2 of Fig. 5). Hence, we do not model
position 1, and we have a different AS-path encoding for every
SWIFT’s neighbor. At the end of this process, AS paths can be
encoded by selecting specific AS identifiers for every position.
Encoding all used AS paths may not be possible. Not only can
thousands of distinct ASes be seen for each position, but also the AS
paths may be very long (>10 hops). Fortunately, two observations
enable SWIFT to considerably reduce the required number of bits.
First, from the perspective of one router, many AS links carry few
prefixes. A failure of these links will therefore produce small bursts
(if any), which allows for per-prefix update. Thus, we ignore any
link that carries less than 1,500 prefixes in our SWIFT encoding.
Second, links that are far away from the SWIFTED node are less
likely to produce bursts of withdrawals than closer ones. Indeed,
for distant links, it is likely that intermediate nodes know a backup
path. Our measurements (§6) confirm this. Consequently, we only
encode the first few hops of the AS paths (up to position 5).
For the remaining AS links, SWIFT encodes first the links with
the highest number of prefixes traversing them. To do that, SWIFT
uses an adaptive number of bits for each AS position: each position
is implemented by a different bit group, whose length depends
on the number of ASes in this position. For each position P, we
map all the ASes in P to a specific value (the AS identifier) of the
corresponding bit group. Hence, the size of this group is equal to
the number of bits needed to represent all the values in P.
Encoding backup next-hops. The second part of the tag (left
side of Fig. 5) identifies the primary next-hop as well as backup
next-hops for each encoded AS link. For each prefix p, the pri-
mary next-hop is directly extracted as the first hop in the AS path
Technical Report, 2017,
for p. For instance, the primary next-hop for prefix p1 in Fig. 1(a)
is 2. Backup next-hops are explicitly represented to both reflect
rerouting policies and prevent rerouting to disrupted backup paths.
Consider again p1. The primary path is (2, 5, 6). To protect against
a failure of the first AS link (2, 5), we can select AS 3 or 4, since
neither of the two uses (2, 5) to reach p1. In contrast, for (5, 6), only
AS 3 can be used as a backup next-hop, since the AS paths received
from AS 4 also uses (5, 6).
Partitioning bits across the two parts of the tag. A fundamen-
tal tradeoff exists between the amount of paths and the number of
backup next-hops that any SWIFT router can encode. On the one
hand, allocating more bits to represent AS links (first part of the
tag) allows a SWIFTED router to cover more remote failures. On the
other hand, allocating more bits to represent (backup) next-hops
(second part of the tag) allows a SWIFTED router to reroute traffic
to a higher number of backup paths.
In §6.4, we show that allocating 18 bits to AS paths encoding is
sufficient to reroute more than 98% of the prefixes. Assuming 48-
bits tags (i.e., , using the destination MAC), 30 bits are left to encode
backup next-hops. If we configure SWIFT to support remote failures
up to depth 4, the bits allocated for the backup next-hops needs
to be divided by 5 (1 primary + 4 backup next-hops). As a result,
30/5 = 6 bits are reserved for each depth, which translates into
26 = 64 possible next-hops. If one wants to consider remote failures
only up to depth 3, then the number of next-hops is 27 = 128 and
two more bits can be allocated to the AS links encoding. Operators
can fine-tune such decision, e.g., based on the (expected) number
of backup next-hops reachable by each SWIFTED router.
6 EVALUATION
We now evaluate our Python-based implementation (≈ 3,000 lines
of code) of the SWIFT inference algorithm (§4) and the encoding
scheme (§5). We first describe our datasets (§6.1). We then evaluate
the accuracy of the inference algorithm, both in terms of failure
localization (§6.2) and withdrawals prediction (§6.3). We also eval-
uate the efficiency of SWIFT data-plane encoding (§6.4). Finally,
we show that the combination of the inference algorithm and the
encoding scheme leads to much faster convergence than BGP (§6.5).
6.1 Datasets
We evaluate SWIFT using two sources of bursts of BGP withdrawals.
Bursts from real BGP data, without outage ground truth. To
evaluate how SWIFT would work in the wild, we use sets of actual
bursts extracted from the same dataset used in §2. It consists of
BGP messages dumped by 10 RouteViews [50] and 5 RIPE RIS [9]
collectors during the full month of November 2016. These collectors
received BGP messages from 213 peers.5 Our evaluation is based
on 1,802 bursts with more than 1,500 withdrawals. Amongst them,
942 (resp. 339) have more than 2,500 (resp. 15,000) withdrawals.
Bursts from simulations, with outage ground truth. To vali-
date the accuracy and the robustness of our inference algorithm,
5We found 5 routers peering with these collectors that exhibit a flapping behavior,
with an anomalous large number of bursts of similar pattern; when including them, we
obtain a minimal change in overall results (≈2%), but since SWIFT performs uniformly
on similar bursts, their large number (≈500 bursts) causes a significant skew in the
population of bursts. We therefore omit these peers from our analysis.
best AS pathsRIB(2 5 6),     (4 5 6),  (3 6)    primary2primaryNHASposition 2ASposition 3ASposition 4backup3backupdepth 142backupdepth 2…backup34(3 2 5 8),  (2 5 8),  (4 8)P1PnPart 2: per AS-link backupPart 1: AS-links traversedfree bits3    2    5    82    5    6P1preﬁxAS-paths (order by pref)Per-preﬁxData-plane TagPnlink depth 2link depth 3……backupdepth 3backup4link depth 1translation toAS identiﬁersTechnical Report, 2017,
we use bursts extracted from control-plane simulations conducted
with C-BGP [55]. We created a topology composed of 1,000 ASes
using the Hyperbolic Graph Generator [10]. We set the average
node degree to 8.4, which is the value observed in the CAIDA AS-
level topology [16] in October 2016, and use as degree distribution a
power law with exponent 2.1 [41]. We defined the AS relationships
as follows. The three ASes with highest degree are Tier1 ASes and
are fully-meshed. ASes directly connected to a Tier1 are Tier2s.
ASes directly connected to a Tier2 but not to a Tier1 are Tier3s,
etc. Two connected ASes have a peer-to-peer relationship if they
are on the same level, otherwise they have a customer-provider
relationship. We configured each AS to originate 20 prefixes, for
a total of 20k prefixes. Using C-BGP, we simulated random link
failures, and recorded the BGP messages seen on each BGP session
in the network. We collected a total of 2,183 bursts of at least 1k
withdrawals. The median (resp. max) size of the bursts is 2,184 (resp.
19,215) withdrawals.
6.2 Failure localization accuracy
In the following, we evaluate the accuracy of the SWIFT inference
algorithm on both datasets.
6.2.1 Validation on real BGP data.
Since real BGP traces do not provide the ground truth on burst
root causes, we estimate the accuracy of the inference algorithm
indirectly: we evaluate the match between the prefixes withdrawn
′ whose path traversed
in the entire burst W and the prefixes W
the links inferred by SWIFT as failed. This can be formalized as a
binary classification problem, in which the true and false positives
′ − W , respectively. We therefore
are the prefixes in W
evaluate the accuracy of SWIFT inference in terms of True Positive
Rate (TPR) and False Positive Rate (FPR).6
′ ∩ W and W
Fig. 6 shows the TPR and FPR on a per-burst basis. It is divided
into quadrants. The top left quadrant corresponds to very good
inferences, i.e., for each burst, the links that SWIFT infers as failed
are traversed by most of the withdrawn prefixes (high TPR) and
few of the non-affected prefixes (low FPR). The top right quadrant
contains inferences that overestimate the extent of a failure (high
TPR and FPR): rerouting upon such inferences is still beneficial as
the TPR is high (i.e., connectivity is restored for many prefixes actu-
ally disrupted). The bottom left quadrant corresponds to inferences
that underestimate the extent of a burst. Finally, the bottom right
quadrant includes bad inferences (with low TPR and high FPR).
We evaluate two scenarios for SWIFT. In the first one (Fig. 6(a)),
the inference algorithm runs only once, after 2.5k withdrawals—as it
would do without a history model (e.g., after the first installation on
a router). In the second scenario (Fig. 6(b)), the inference algorithm
runs every 2.5k withdrawals while following the simple historical
model we described in §4.2. When considering history, SWIFT waits
for more withdrawals to arrive before rerouting large numbers of
prefixes early on in the burst.
SWIFT makes accurate inferences in the majority of the cases,
and never makes bad inferences. Even when using only 2.5k
withdrawals (Fig. 6(a)), SWIFT makes accurate inferences in the
6T P R = T P/(T P + F N), F P R = F P/(F P +T N); The negatives are all the prefixes
announced in the session before the burst starts and not withdrawn during the burst.
T. Holterbach et al.
(a) Without history
(b) With history
Figure 6: Despite having little information, SWIFT inference
is accurate. The vast majority of prefixes are correctly in-
ferred as failed (top half quadrants). While some affected
prefixes are missed (bottom left), no prediction is signifi-
cantly inaccurate (bottom right).
vast majority of the cases: TPR is more than 60% for more than 81%
of the bursts. However, it also overestimates the extent of the burst
(FPR is higher than 50%) for about 12% of the bursts. SWIFT infer-
ence algorithm performs sensibly better when relying on history
(Fig. 6(b)). Better performance comes at the price of missing some
bursts because of the extra delay. Specifically, it missed a total of 256
bursts (53% of them smaller than 5k) compared to the history-less
version. Despite this, the history-based version of the inference
algorithm still completes the inference at the lowest threshold (2.5k)
for the majority of the bursts (65%). The increased density of the top
left quadrant in Fig. 6(b) is a clear indication of the gain obtained
by trading a bit of speed for better accuracy. Finally, we stress that
SWIFT never falls into the bottom right quadrant, irrespective of
whether the historical model is used or not.
6.2.2 Validation through simulation.
We now describe the results obtained by SWIFT inference algo-
rithm when run on the bursts generated in C-BGP (see §6.1).
Under ideal conditions, SWIFT inference is always correct.
We ran our inference algorithm at the end of each burst and found
that the inference is always correct, consistently with Theorem 4.1.
SWIFT inference is accurate enough to ensure safety, even
early on during the bursts. When we ran the inference algorithm
after only 200 withdrawals (1% of the total number of prefixes
advertised, see §6.1), SWIFT identified a superset of the failed link
for 9% of the bursts. For the remaining 91%, it returned a set of links
adjacent to the failed one. Nevertheless, for all the 2,183 bursts but
one, SWIFT selected a backup path that bypasses the actual failed
link. This is because SWIFT chooses a backup route that does not
traverse the common endpoint of the inferred links (see §4.2).
SWIFT inference is robust to noise. We simulated BGP noise by
adding, in each burst, 1,000 withdrawals of prefixes that are not
affected by the failure. This number is much greater than what we
observe in real BGP data, both in absolute terms (9 withdrawals
only in the 90th percentile, see §2.2) and as a percentage (since we
only advertise 20k prefixes in C-BGP, whereas there are more than
600k prefixes advertised in the real world [5]). When we triggered
020406080100False Positives Rate (FPR)020406080100True Positive Rate (TPR)11.9%75.8%12.3%0%85%2%3%8%2%3%7%6%11%70%020406080100False Positives Rate (FPR)020406080100True Positive Rate (TPR)5.3%85.1%9.6%0%94%1%0%4%1%3%5%6%12%71%SWIFT: Predictive Fast Reroute
percentile of bursts
10th
20th
30th
50th
70th
Burst size between 2.5k and 15k