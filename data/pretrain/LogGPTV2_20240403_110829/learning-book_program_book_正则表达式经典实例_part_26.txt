部分。把正则表达式作为第一个参数、目标字符串作为第二个参数传递给它。你还可
以把正则表达式选项作为可选的第三个参数。
re.searchO函数会调用re.compileO，然后编译好的正则表达式对象会调用searchO方法。
这个方法只接受一个参数：自标字符串。
如果正则表达式找到一个匹配的话，searchO会返回一个MatchObject实例。如果正则
表达式无法找到匹配，那么searchO会返回None。当你在一个if语句中来使用该返回
值时，MatchObject等价于True，而None则等价于False。本章后面的-些实例中会接
着介绍如何使用在MatchObject中保存的信息。
别把searchO和matchO搞混。你不能在字符串的中间用matchO查找匹配。
下一个实例中会用到match(
Ruby
操作符=～是模式匹配操作符。把它放到正则表达式和一个字符串中间，就可以查找第
一个正则表达式匹配。这个操作符会返回一个整数，其值是正则匹配在字符串中的开
始位置。如果不能找到匹配，它就会返回nil。
这个操作符在Regexp和String两个类中都有实现。在Ruby1.8中，把哪个类放到左边
或哪个类放到右边都无关紧要。在Ruby1.9中，这样做则会引起和命名捕获分组有关
的特殊副作用。这会在实例3.9中进行解释。
作符的左边，而把正则表达式放到它的右边。这样可以保持与Perl的一
：致性，而Ruby的=～语法也正是从Perl借鉴而来的，另外如此还可以避
免可能会遇到的在Ruby1.9中与命名捕获分组有关的麻烦。
120第3章
www.TopSage.com
---
## Page 137
参见
实例3.6和3.7。
3.6检查正则表达式能否整个匹配目标字符串
问题描述
你想要检查一个字符串是否整体符合某个特定的模式。也就是说，想要检查包含该模
式的正则表达式是否可以从头到尾匹配该字符事。举例来说，如果你的正则表达式是
(regex·patterm)，那么它会匹配包含regexpattern的输人文本，但是不能匹配更长的字
符串Theregexpatterm canbefound。
解决方案
C#
如果只是做一次性的快速检查，你可以使用如下的静态调用：
bool foundMatch = Regex.IsMatch(subjectString,@"\Aregex pattern\z");
要想重复使用同一个正则式，那么就需要构造一个Regex对象：
Regex regexObj = new Regex(@"\Aregex pattern\z");
x
VB.NET
如果只是做一次性的快速检查，你可以使用如下的静态调用：
要想重复使用同一个正则式，那么就需要构造一个Regex对象：
Dim RegexObj As New Regex("\Aregex pattern\z")
Dim FoundMatch = RegexObj.IsMatch(SubjectString)
其中的IsMatchO调用应当使用SubjectString作为唯一的参数，而且该调用应当由
RegexObj发起，而不是由Regex类来发起：
Dim FoundMatch = RegexObj.IsMatch(SubjectString)
Java
如果只是要检查一个字符事，你可以使用如下的静态调用：
boolean foundMatch = subjectString.matches("regex pattern");
使用正则表达式编程
121
www.TopSage.com
---
## Page 138
如果想要把同一个正则表达式用于多个字符串之上，那么就需要编译该正则表达式，
并创建一个匹配器：
Pattern regex=Pattern.compile("regex pattern");
Matcher regexMatcher = regex.matcher(subjectString);
boolean foundMatch = regexMatcher.matches(subjectString);
JavaScript
if (/^regex patterns/.test(subject))(
// Successful match
}else{
//Match attempt failed
}
PHP
if(preg_match('/\Aregex pattern\z/',$subject)）{
#Successful match
}else{
#Match attempt failed
Perl
if（$subject =~m/\Aregex pattern\z/){
Successful match
}else{
#Match attempt failed
Python
如果只是做一次性的快速检查，你可以使用如下的全局函数：
if re.match(r"regex pattern\z",subject):
# Successful match
else:
#Match attempt failed
要想重复使用同一个正则表达式，就需要使用一个编译过的对象：
reobj = re.compile(r"regex pattern\z")
if reobj.match(subject):
#Successful match
else:
 Match attempt failed
122
第3章
www.TopSage.com
---
## Page 139
Ruby
ifsubject=~/\Aregexpattern\z/
# Successful match
else
Match attempt failed
end
讨论
通常来说，个成功的正则表达式匹配会告诉用户你想要的模式位于目标文本的某个
地方。然而在许多情形下，你还想确切知道它是完全匹配的，也就是说在目标文本中
不再包含任何其他内容。需要完全匹配的最常见的场景很可能是验证用户输人。如果
用户输人了一个电话号码或者IP地址，但是其中包含了错误的字符，那么你希望能够
拒绝该输入。
当你逐行处理一个文件（实例3.21），而且你所使用的方法在获取每行时都把换行符留
在每行结尾，那么也可以使用采用定位符添加到正则表达式的开头，
并且把字符串结尾定位符Z>加到正则表达式的最后。这样，正则表达式就只能整体
匹配一个字符事，或者根本不能匹配。如果你的正则表达式使用了多选结构，比如
。
在正则表达式被修改来匹配整个字符串之后，你就可以继续使用在上-一个实例中介绍
的IsMatchO方法。
Java
Java有3个名为matchesO的方法。它们都会检查一个正则表达式是否能整体匹配一个
字符串。这些方法可以用来迅速完成输人验证，而不必把你的正则表达式包在字符串
起始和结束定位符之间。
String类中包含一个matchesO方法，它接受一个正则表达式作为唯一参数。它会返回true
或false，说明正则式是否匹配了整个字符串。Patterm类中包含-一个静态的matchesO方
使用正则表达式编程123
www.TopSage.com
---
## Page 140
法，它接受两个字符串作为参数：第一个是正则表达式，第二个是目标字符串。事实
上，你可以把任意的CharSequence作为目标字符串传递给Pattern.matchesO。这也是使
用Pattem.matchesO而不是String.matchesO的唯一理由。
String.matchesO和Patterm.matchesO每次都会重新编译正则表达式，这会通过调用
Pattern.compile("regex").matcher(subjectString).matchesO来完成。因为每次正则式都
会重新编译，所以只有当你只打算使用这个正则表达式一次，或者说性能不是问题
的情形下，才应当使用这两个方法。这些方法没有提供可以从正则表达式外部来说
明匹配选项的方式。如果你的正则表达式包含语法错误，那么就会产生一个
PatternSyntaxException例外。
如果想要高效地使用同一个正则表达式来检查多个字符串，那么你就应当对正则式进
行编译，并创建和复用一个Matcher对象，这在实例3.3中已经进行了讲解。然后，使
用你的Matcher实例来调用matchesO。这个函数并不能接受任何参数，因为你在创建
或重置该匹配器的时候，已经指定好目标字符事了。
JavaScript
串。我们的解决方案是把添加到正则表达式的开头，并且把S>加到正则表达式的最
后。一定要注意不要为正则表达式设置/m标志。只有在不使用/m的情况下，脱字符和
美元符号才会只匹配目标文本的开始和结束。如果你设置了/m的话，那么它们还会匹
配字符事中间的换行符。
在把定位符添加人你的正则表达式之后，就可以继续使用在上一个实例中介绍的同样
的regexp.testO方法。
PHP
在PHP中并不包含一个函数可以用来检查正则表达式是否能够整体匹配一个字符
串。我们的解决方案是把字符串起始定位符加到正则表达式的最后。这样，正则表达式就只能整体匹配
一个字符串，或者根本不能匹配。如果你的正则表达式使用了多选结构，比如
(oneltwolthree)，那么就要注意需要在添加定位符之前把多选结构括起来作为一个分
组：（\A（?:onetwolthree)Z>
在正则表达式被修改来匹配整个字符串之后，你就可以继续使用在上一个实例中介绍
的同样的preg_matchO方法。
Perl
Perl只包含一个模式匹配操作符，它只要能找到部分匹配就满意了。如果想要检查正则
124第3章
www.TopSage.com
---
## Page 141
表达式是否能够匹配整个目标字符串，那么需要把字符串起始定位符心A>添加到正则表
达式的开头，并且把字符串结尾定位符加到正则表达式的最后。这样，正则表达式
就只能整体匹配一个字符串，或者根本不能匹配。如果你的正则表达式使用了多选结
构，比如。
在正则表达式被修改来匹配整个学符事之后，你就可以像上一个实例中一样来使
用它。
Python
match(函数与我们在上一个实例中讲解的searchO函数非常相似。它们之间的主要
区别是matchO只会在目标字符事的最开始处检查正则表达式，如果正则式无法在
字符事的开始产生匹配，那么matchO就会立即返回None。然而，searchO函数会
继续尝试字符串中的每-个后续位置，直至找到一个匹配或者到达了目标字符串
的结尾。
match(函数并不要求正则表达式必须匹配整个字符串。部分匹配也是可以接受的，只
要它是从学符事起始处并始的匹配。如果想要检查正则式是否可以匹配整个字符串，
那么就需要把字符事结束定位符亿添加到你的正则表达式的最后。
Ruby
Ruby中的Regexp类并不包含-个函数可以用来检查正则表达式是否能够整体匹配一
个字符串。解决方案是把字符事起始定位符添加到正则表达式的开头，并且把字
符串结尾定位符加到正则表达式的最后。这样，正则表达式就只能整体匹配一个
字符事，或者根本不能匹配。如果你的正则表达式中使用了多选结构，比如（oneltwo
three》，那么就要注意需要在添加定位符之前把多选结构括起来作为一个分组：
(\A(?:one/twolthree)Z>
在正则表达式被修改以匹配整个字符串之后，你就可以继续使用在上一个实例中介绍
的同样的=~操作符。
参见
实例2.5详细讲解了定位符的工作原理。
实例2.8和实例2.9讲解了多选结构和分组。如果你的正则表达式在任何分组之外使用
了多选结构，那么就需要在添加定位符之前把你的正则表达式括起来作为一个分组。
如果你的正则式没有使用多选结构，或者如果它只在分组中使用多选结构，那么在使
用定位符的时候就不再需要添加额外的分组。
如果只需要部分匹配就可以接受的话，请参考实例3.5。
使用正则表达式编程
125
www.TopSage.com
---
## Page 142
3.7获取匹配文本
问题描述
你已经有了一个正则表达式可以匹配目标文本的一部分，现在你想要把匹配到的文
本提取出来。如果正则表达式可以多次匹配该字符串，你只想要得到第一个匹配结
果。例如，当你把正则式<d+）应用到字符串Doyoulike13or42?之上时，它应当返
回13。
解决方案
#
如果只是做一次性的快速检查，你可以使用如下的静态调用：
string resultString = Regex.Match(subjectString, @"\d+").Value;
如果该正则式是由最终用户提供的，那么你就需要在使用静态调用时进行完整的例外
处理：