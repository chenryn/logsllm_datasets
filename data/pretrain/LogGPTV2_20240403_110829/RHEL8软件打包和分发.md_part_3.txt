    时，会使用原始文件，而不是修改的文件。[如需更多信息，请参阅使用 SPEC
    文件](#packaging-software_packaging-and-distributing-software.html#working-with-spec-files "使用 SPEC 文件"){.link}。
:::
以下流程演示了如何使用 `cello-output-first-patch.patch`{.literal} 对
`cello.c`{.literal} 进行补丁，构建补丁程序并运行它。
::: orderedlist
**流程**
1.  将补丁文件重定向到 `patch`{.literal} 命令：
    ``` literallayout
    $ patch 
    int main(void){
        printf("Hello World from my very first patch!\n");
        return 1;
    }
    ```
3.  构建并运行补丁的 `cello.c`{.literal} ：
    ``` literallayout
    $ make clean
    rm cello
    $ make
    gcc -g -o cello cello.c
    $ ./cello
    Hello World from my very first patch!
    ```
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#arbitrary-artifacts_preparing-software-for-rpm-packaging}任意工件 {.title}
:::
与 UNIX 类似的系统使用 Filesystem
层次结构标准(FHS)来指定适合特定文件的目录。
从 RPM 软件包安装的文件会根据 FHS 放置。例如：可执行文件应该进入系统
`$PATH`{.literal} 变量中的目录中。
在本文档的上下文中，[*Arbitrary Artifact*]{.emphasis} 是从 RPM
安装到系统的任何内容。对于 RPM
和系统，它可以是脚本，从软件包的源代码、预编译的二进制文件或其他任何文件编译而来。
以下小节描述了将 [*Arbitrary Artifacts*]{.emphasis}
放置到系统中的两种常见方法：
::: itemizedlist
-   [使用 install
    命令](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#placing-arbitrary-artifacts-in-the-system-using-the-install-command_preparing-software-for-rpm-packaging "使用 install 命令在系统中放置任意工件"){.link}
-   [使用 make install
    命令](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#placing-arbitrary-artifacts-in-the-system-using-the-make-install-command_preparing-software-for-rpm-packaging "使用 make install 命令在系统中放置任意工件"){.link}
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#placing-arbitrary-artifacts-in-the-system-using-the-install-command_preparing-software-for-rpm-packaging}使用 install 命令在系统中放置任意工件 {.title}
:::
当构建自动化工具（如 [GNU
make](http://www.gnu.org/software/make/){.link} ）时，软件包程序通常使用
`install`{.literal} 命令。例如，如果打包的程序不需要额外的开销。
`install`{.literal} 命令通过
[coreutils](http://www.gnu.org/software/coreutils/coreutils.html){.link}
为系统提供，它会使用指定的权限集将工件放置到文件系统中的指定目录中。
以下流程使用之前作为任意工件创建的 `bello`{.literal}
文件作为此安装方法的对象。
::: orderedlist
**流程**
1.  运行 `install`{.literal} 命令，使用可执行脚本的通用权限将
    `bello`{.literal} 文件放入 `/usr/bin`{.literal} 目录中：
    ``` literallayout
    $ sudo install -m 0755 bello /usr/bin/bello
    ```
    因此，`bello`{.literal} 现在位于 `$PATH`{.literal}
    变量中列出的目录中。
2.  从任意目录中执行 `bello`{.literal}，但不指定完整路径：
    ``` literallayout
    $ cd ~
    $ bello
    Hello World
    ```
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#placing-arbitrary-artifacts-in-the-system-using-the-make-install-command_preparing-software-for-rpm-packaging}使用 make install 命令在系统中放置任意工件 {.title}
:::
使用 `make install`{.literal}
命令是在系统中自动安装构建软件的方法。在这种情况下，您需要指定如何将任意工件安装到通常由开发人员编写的
`Makefile`{.literal} 中的系统。
此流程演示了如何将构建工件安装到系统中所选位置。
::: orderedlist
**流程**
1.  在 `Makefile`{.literal} 中添加 `install`{.literal} 部分：
    `Makefile`{.literal}
    ``` literallayout
    cello:
    	gcc -g -o cello cello.c
    clean:
    	rm cello
    install:
    	mkdir -p $(DESTDIR)/usr/bin
    	install -m 0755 cello $(DESTDIR)/usr/bin/cello
    ```
    请注意，`cello:`{.literal}、`clean:`{.literal} 和
    `install:`{.literal} 下的行必须以 tab 空间开头。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    [\$(DESTDIR)](https://www.gnu.org/software/make/manual/html_node/DESTDIR.html){.link}
    变量是 [GNU
    make-in](http://www.gnu.org/software/make/){.link}，通常用于指定安装到与根目录不同的目录。
    :::
    现在，您可以使用 `Makefile`{.literal}
    来构建软件，还可以将其安装到目标系统中。
2.  构建并安装 `cello.c`{.literal} 程序：
    ``` literallayout
    $ make
    gcc -g -o cello cello.c
    $ sudo make install
    install -m 0755 cello /usr/bin/cello
    ```
    因此，`cello`{.literal} 现在位于 `$PATH`{.literal}
    变量中列出的目录中。
3.  从任意目录中执行 `cello`{.literal}，但不指定完整路径：
    ``` literallayout
    $ cd ~
    $ cello
    Hello World
    ```
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#preparing-source-code-for-packaging_preparing-software-for-rpm-packaging}为打包准备源代码 {.title}
:::
开发人员通常将软件分发为源代码的压缩存档，然后用于创建软件包。RPM
打包器使用现成的源代码存档。
软件应使用软件许可证分发。
这个过程使用
[GPLv3](https://www.gnu.org/licenses/quick-guide-gplv3.html){.link}
许可证文本作为 `LICENSE`{.literal} 文件的示例内容。
::: orderedlist
**流程**
1.  创建 `LICENSE`{.literal} 文件，并确保它包含以下内容：
    ``` literallayout
    $ cat /tmp/LICENSE
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
    You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/.
    ```
:::
::: itemizedlist
**其它资源**
-   [本节中创建的代码](https://github.com/redhat-developer/rpm-packaging-guide/tree/master/example-code){.link}
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#putting-source-code-into-tarball_preparing-software-for-rpm-packaging}将源代码放入 tarball 中 {.title}
:::
这部分论述了如何将第 [2.1 节中介绍的三个 `Hello World`{.literal}
程序中的每个程序，\"What
源代码是\"What](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#what-is-source-code_preparing-software-for-rpm-packaging "源代码是什么"){.link}
源代码\"放在 [gzip](https://www.gnu.org/software/gzip/){.link}压缩的
tarball 中，这是发布软件以供以后发行的常用方法。
::: example
[]{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#bello-into-tarball_preparing-software-for-rpm-packaging}
**例 2.4. 将 bello 项目放入 tarball**
::: example-contents
[*bello*]{.emphasis} 项目在
[bash](https://www.gnu.org/software/bash/){.link} 中实施
`Hello World`{.literal}。这个实现只包含 `bello`{.literal} shell
脚本，因此生成的 `tar.gz`{.literal} 归档除 `LICENSE`{.literal}
文件外只有一个文件。
此流程演示了如何准备 Belllo [*项目进行分发*]{.emphasis}。
::: title
**先决条件**
:::
考虑这是该程序的版本 `0.1`{.literal}。
::: orderedlist
**流程**
1.  将所有必需文件放到单个目录中：
    ``` literallayout
    $ mkdir /tmp/bello-0.1
    $ mv ~/bello /tmp/bello-0.1/
    $ cp /tmp/LICENSE /tmp/bello-0.1/
    ```
2.  为发行版本创建归档并将其移到 `~/rpmbuild/SOURCES/`{.literal}
    目录中，这是 `rpmbuild`{.literal} 命令存储构建软件包文件的默认目录：
    ``` literallayout
    $ cd /tmp/
    $ tar -cvzf bello-0.1.tar.gz bello-0.1
    bello-0.1/
    bello-0.1/LICENSE
    bello-0.1/bello
    $ mv /tmp/bello-0.1.tar.gz ~/rpmbuild/SOURCES/
    ```
:::
有关 bash 中编写的示例源代码的更多信息，请参阅 bash [编写的 Hello
World。](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-bash_preparing-software-for-rpm-packaging "例 2.1. 在 bash 中写入 World 的 hello"){.link}
:::
:::
::: example
[]{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#pello-into-tarball_preparing-software-for-rpm-packaging}
**例 2.5. 将 pello 项目放入 tarball**
::: example-contents
[*pello*]{.emphasis} 项目在 [Python](https://www.python.org/){.link}
中实施 `Hello World`{.literal}。这个实现只包含 `pello.py`{.literal}
程序，因此生成的 `tar.gz`{.literal} 归档除 `LICENSE`{.literal}
文件外只有一个文件。
此流程演示了如何准备 [*pello*]{.emphasis} 项目进行分发。
::: title
**先决条件**
:::
考虑这是该程序的版本 `0.1.1`{.literal}。
::: orderedlist
**流程**
1.  将所有必需文件放到单个目录中：
    ``` literallayout
    $ mkdir /tmp/pello-0.1.2
    $ mv ~/pello.py /tmp/pello-0.1.2/
    $ cp /tmp/LICENSE /tmp/pello-0.1.2/
    ```
2.  为发行版本创建归档并将其移到 `~/rpmbuild/SOURCES/`{.literal}
    目录中，这是 `rpmbuild`{.literal} 命令存储构建软件包文件的默认目录：
    ``` literallayout
    $ cd /tmp/
    $ tar -cvzf pello-0.1.2.tar.gz pello-0.1.2
    pello-0.1.2/
    pello-0.1.2/LICENSE
    pello-0.1.2/pello.py
    $ mv /tmp/pello-0.1.2.tar.gz ~/rpmbuild/SOURCES/
    ```
:::
有关使用 Python 编写的示例源代码的更多信息，请参阅 [Hello World 使用
Python
编写](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-python_preparing-software-for-rpm-packaging "例 2.2. 使用 Python 编写的 World"){.link}。
:::
:::
::: example
[]{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#cello-into-tarball_preparing-software-for-rpm-packaging}
**例 2.6. 将单元项目放入 tarball 中**
::: example-contents
[*unito*]{.emphasis} 项目在 C 中实现
`Hello World`{.literal}。其实施中仅包含 `cello.c`{.literal} 和
`Makefile`{.literal} 文件，因此生成的 `tar.gz`{.literal} 存档除
`LICENSE`{.literal} 文件外有两个文件。
请注意，`patch`{.literal} 文件没有使用该程序在归档中分发。RPM
软件包在构建 RPM 时应用补丁。这个补丁会与 `.tar.gz`{.literal}
归档一起放置到 `~/rpmbuild/SOURCES/`{.literal} 目录中。
[*此流程演示了如何准备单元项目进行分发*]{.emphasis}。
::: title
**先决条件**
:::
考虑这是该程序的版本 `1.0`{.literal}。
::: orderedlist
**流程**
1.  将所有必需文件放到单个目录中：
    ``` literallayout
    $ mkdir /tmp/cello-1.0
    $ mv ~/cello.c /tmp/cello-1.0/
    $ mv ~/Makefile /tmp/cello-1.0/
    $ cp /tmp/LICENSE /tmp/cello-1.0/
    ```
2.  为发行版本创建归档并将其移到 `~/rpmbuild/SOURCES/`{.literal}
    目录中，这是 `rpmbuild`{.literal} 命令存储构建软件包文件的默认目录：
    ``` literallayout
    $ cd /tmp/
    $ tar -cvzf cello-1.0.tar.gz cello-1.0
    cello-1.0/
    cello-1.0/Makefile