Although we use VMs as an example, any infrastructure
element can be grouped into security zones. Fig. 4a shows a
negative/attack speciﬁcation of the policy: We have a policy
violation for a pair of zoned VMs that are connected by an
information ﬂow path (ﬂow+) if they are not members of
the same security zone. The statement ﬂow+ is a regular
expression on edges and requires at least one ﬂow edge. On
the other hand, a positive speciﬁcation of this policy (Fig. 4b)
states that for all zoned VM pairs, which can communicate,
there must exists at least one zone that contains both VMs.
We allow elements to be part of multiple security zones,
and our policy expects at least one common zone for element
pairs with information ﬂow. A problem arises when a multi-
zoned element facilitates information ﬂow between single-
zoned elements. For example, if a VM acts as a ﬁrewall and
is part of two security zones, then VMs of one zone may
communicate with VMs of the other zone via the ﬁrewall VM,
which is a violation of strict isolation. We handle inter-zone
trusted elements with the guardian isolation policy (§3.3.1).
Compute Placement mandates the assignment of com-
puting resources, that is on which physical hosts virtual
machines must run. The motivation stems from both perfor-
mance and availability reasons as well as security and legal
requirements. Imagine that VMs must run on hosts from a
particular geo-location due to privacy laws and data security
requirements. By grouping physical hosts and VMs together
into placement zones, similar to the previous security zones,
this policy is violated if a VM is hosted on a physical server
of another placement zone or no zone at all (cf. Fig. 4c). A
zoned host can run VMs that are not part of any zone.
The related security concern of side-channel attacks due
to VM co-location on the same physical host [22] is covered
by the security zone isolation policy. The trust assumption if
a particular hypervisor provides strong VM isolation or not
is captured in the user-conﬁgurable information ﬂow rules
(cf. §3.2). From practical security policies we learned that
co-locating diﬀerent tenants is allowed only for a particular
set of hypervisor products that are considered trusted.
56
3.3.1 Policies with Information Flow Path Conditions
We are also dealing with policies that have requirements
on the information ﬂow paths. For example, the guardian
isolation policy requires that a trusted component, e.g., a
ﬁrewall, is part of a ﬂow path between elements of diﬀerent
zones. To express such policies, we can no longer rely on the
ﬂow+ path construct, because we cannot inspect the found
paths. We model an explicit path ﬁnding with traversal
rules that add vertices to a path vertex with directed edges
to denote path membership. The state exploration applies
the traversal rules, which perform a graph traversal on ﬂow
edges, and constructs all possible paths between pairs of
start and end nodes. We can now express policies that verify
conditions on the found paths.
Guardian Security Zone Isolation: Given a pair of
elements that are not members of a common security zone
and that are connected by an information ﬂow path. It is
mandatory that the communication is mandated by a trusted
guardian, i.e., a vertex ﬂagged as guardian must be part of
the information ﬂow path between the pair (cf. Fig. 4d).
Additionally, the guardian must share a security zone with
each element of the pair (cf. Fig. 4e). The ﬁrst policy is
violated if there exists a path between a pair of VMs, which
do not belong to a same security zone, and the path does not
contain a VM ﬂagged as guardian. The second policy catches
the violation that a guardian VM exists on the path, but the
guardian does not share a security zone with either the start
or end VM. The negative edge labeled with + represents an
OR condition for the two negative conditions of the VM and
guardian zone matching.
Infrastructure Policies Summary
Multiple Disjoint Paths: We deﬁne a dependability
zone as a group of infrastructure elements that require mu-
tually redundant fully disjoint paths. The motivation is to
prevent single point of failures between dependent infrastruc-
ture elements. Fig. 4f shows the corresponding rule as an
attack state matching. We are using a universal quantiﬁer
with the ability of counting the number of paths between a
pair of nodes of the same dependability zone (depzone). The
policy is violated if the paths count is less than two, or any
redundancy factor that is required.
3.3.2
We demonstrated a variety of policies ranging from zone
isolation, placement of virtual machines, to the prevention of
single point of failures. This covers the policy areas of isola-
tion, operational correctness, and failure resilience that have
been introduced for virtualized infrastructure policies [3]. We
showed the formalization of those policies as graph matches
in GROOVE, and further explored diﬀerent ways to express
policies, such as negative and positive matching. Besides
an expressive and general-purpose approach, the usability is
equally important so that end-users, such as auditors of cloud
environments, can specify new policies. GROOVE oﬀers a
graphical editor to develop new production rules, in fact the
policies shown in Fig. 4 have been develop graphically and
exported as-is. This provides an intuitive and eﬃcient way
of specifying new policies.
4. AUTOMATED ANALYSIS
Weatherman provides an automated analysis of conﬁgu-
ration and topology changes in virtualized infrastructures.
Its architecture, as shown in Fig. 5, obtains all the necessary
inputs for the analysis and invokes GROOVE as the graph
transformation engine. Based on this architecture, we de-
scribe two application scenarios for change management as
well as for run-time enforcement of security policies and the
mitigation of misconﬁgurations.
(cid:17)(cid:10)(cid:13)(cid:10)(cid:12)(cid:18)(cid:19)(cid:10)(cid:3)(cid:18)(cid:11)(cid:16)(cid:8)(cid:20)(cid:15)(cid:18)(cid:11)(cid:21)(cid:16)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:3)(cid:5)(cid:3)(cid:9)
(cid:16)(cid:17)(cid:1)(cid:7)(cid:8)(cid:5)(cid:10)(cid:15)(cid:11)(cid:18)(cid:2)(cid:9)(cid:14)(cid:19)
(cid:10)(cid:9)(cid:11)(cid:12)(cid:13)(cid:9)(cid:14)(cid:7)(cid:8)(cid:3)(cid:5)(cid:3)(cid:9)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:5)(cid:2)(cid:3)(cid:11)(cid:12)(cid:11)(cid:10)(cid:2)(cid:13)(cid:2)(cid:14)(cid:2)(cid:6)(cid:15)
(cid:19)(cid:17)(cid:1)(cid:7)(cid:8)(cid:5)(cid:10)(cid:15)(cid:11)(cid:13)(cid:2)(cid:14)(cid:5)(cid:1)(cid:15)
(cid:38)(cid:35)
(cid:6)(cid:8)(cid:9)(cid:13)(cid:22)(cid:11)(cid:6)(cid:8)(cid:9)(cid:23)(cid:23)(cid:9)(cid:8)
(cid:37)(cid:35)
(cid:38)(cid:35)
(cid:8)(cid:17)(cid:9)(cid:14)(cid:5)(cid:21)(cid:9)(cid:10)(cid:5)(cid:2)(cid:3)
(cid:6)(cid:8)(cid:9)(cid:13)(cid:22)
(cid:37)(cid:35)
(cid:36)(cid:35)
(cid:34)(cid:35)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)
(cid:9)(cid:10)(cid:7)(cid:11)(cid:12)(cid:6)(cid:13)(cid:2)(cid:8)(cid:14)(cid:3)(cid:4)(cid:15)(cid:2)(cid:16)(cid:6)(cid:16)
(cid:20)(cid:17)(cid:13)(cid:2)(cid:8)(cid:10)(cid:19)
(cid:1)(cid:2)(cid:3)(cid:10)(cid:8)(cid:2)(cid:14)(cid:11)(cid:13)(cid:8)(cid:2)(cid:6)(cid:8)(cid:9)(cid:23)
(cid:25)(cid:17)(cid:21)(cid:22)(cid:12)(cid:26)(cid:4)(cid:13)(cid:5)(cid:3)(cid:12)(cid:17)(cid:21)
(cid:10)(cid:12)(cid:11)(cid:2)(cid:17)(cid:27)(cid:9)(cid:13)(cid:28)(cid:7)(cid:29)(cid:7)(cid:20)(cid:13)(cid:5)(cid:21)(cid:11)(cid:6)(cid:5)(cid:3)(cid:12)(cid:17)(cid:21)
(cid:15)(cid:13)(cid:2)(cid:16)(cid:9)(cid:11)(cid:3)(cid:13)(cid:5)(cid:3)(cid:17)(cid:13)
(cid:22)(cid:12)(cid:18)(cid:18)(cid:23)(cid:10)
(cid:18)(cid:13)(cid:5)(cid:19)(cid:16)(cid:7)(cid:20)(cid:13)(cid:5)(cid:21)(cid:11)(cid:22)(cid:17)(cid:13)(cid:23)(cid:5)(cid:3)(cid:12)(cid:17)(cid:21)
(cid:36)(cid:35)
(cid:5)(cid:3)(cid:4)(cid:2)(cid:8)(cid:23)(cid:9)(cid:10)(cid:5)(cid:2)(cid:3)(cid:11)(cid:4)(cid:14)(cid:2)(cid:30)(cid:11)(cid:8)(cid:7)(cid:14)(cid:17)(cid:19)
(cid:34)(cid:35)
(cid:2)(cid:13)(cid:17)(cid:8)(cid:9)(cid:10)(cid:5)(cid:2)(cid:3)(cid:19)(cid:11)(cid:23)(cid:2)(cid:27)(cid:17)(cid:14)
(cid:28)(cid:8)(cid:7)(cid:19)(cid:10)(cid:11)(cid:29)(cid:19)(cid:19)(cid:7)(cid:23)(cid:13)(cid:10)(cid:5)(cid:2)(cid:3)(cid:19)
(cid:30)(cid:21)(cid:22)(cid:17)(cid:13)(cid:23)(cid:5)(cid:3)(cid:12)(cid:17)(cid:21)(cid:7)(cid:31)(cid:6)(cid:17)(cid:32)
(cid:33)(cid:4)(cid:6)(cid:9)(cid:11)
(cid:24)(cid:15)(cid:3)(cid:9)(cid:23)(cid:5)(cid:1)(cid:11)(cid:25)(cid:17)(cid:22)(cid:9)(cid:26)(cid:5)(cid:2)(cid:8)
(cid:15)(cid:19)(cid:9)(cid:13)(cid:5)(cid:3)(cid:12)(cid:17)(cid:21)(cid:11)
(cid:20)(cid:13)(cid:5)(cid:21)(cid:11)(cid:12)(cid:3)(cid:12)(cid:17)(cid:21)(cid:7)(cid:24)(cid:17)(cid:14)(cid:9)(cid:6)
Figure 5: The system architecture consists of i)
Conﬁguration Discovery & Translation on the left,
which extracts the infrastructure conﬁguration and
builds the Realization model; ii) the Orchestrator in
the middle, which prepares the graph grammar for
the analysis based on all inputs; iii) and the Graph
Transformation on the right that employs GROOVE.
For obtaining the required inputs, the involvement of the
Weatherman user is kept to a minimum as we are striving
for an automated approach. The rules for the information
ﬂow analysis as well as the security policies come as pre-
deﬁned sets, and only in speciﬁc cases need to be modiﬁed
by the user. Security policies may require further input from
the user, such that virtual resources need to be assigned to
security zones for the zone isolation policy.
Run-time Analysis of Changes enables the automated
mitigation of misconﬁgurations and enforcement of security
policies. We introduce an authorization proxy that acts as
a reverse HTTPS proxy in front of the otherwise shielded
management host. The proxy intercepts management opera-
tions and inspects them for the analysis. The proxy keeps
sessions for each logged in administrators and associates the
operations with them. Operations and conﬁguration changes
are only forwarded by the proxy to the management host if
the Weatherman analysis indicates no security policy viola-
tion. In a secure deployment (cf. §5.1), it allows to protect
virtualized infrastructures from malicious adversaries.
The Policy Decision Point (PDP) of the authorization
proxy translates intercepted management operations into a
change plan in the GROOVE control language. We have
translation modules for all covered operations. For instance,
from an UpdatePortGroup operation the proxy extracts the
host, identifying port group name, new VLAN identiﬁer, as
well as new port group name. The PDP then delegates the
change plan analysis to Weatherman. The Policy Enforce-
ment Point (PEP) only accepts the intercepted operations
if they are compliant with the policies; otherwise, they are
rejected. The authorization proxy refrains from forwarding
the management operation in the reject case, i.e., they are
not deployed in the actual infrastructure. It signals an error
back to the administrator client with the policy violation.
57
Change Plan Analysis: The goal of the change plan
analysis is to support the planning of complex conﬁguration
changes and to verify their security compliance. The focus of
this complementary approach lies on the planning of potential
changes and perform what-if analyses, whereas the run-time
analysis inspects the operations that are currently deployed.
In fact, change management, and change plans in particular,
are often employed as part of IT infrastructure operation
workﬂows and processes. In our case, an administrator drafts
a sequence of desired changes that he wants to be provisioned.
The crucial question is: Will the proposed changes render
the infrastructure insecure? To answer this question, the ad-
ministrator submits the change plan to Weatherman, which
applies the changes to the graph model of the infrastructure
and veriﬁes the resulting infrastructure state against the
desired security policies. By that, the tool can establish
a what-if analysis and determine what security impact the
intended changes will have on the infrastructure. If the new
graph model obtained from the application of the changes
violates the security goals, the tool notiﬁes the administrator
to reject the proposed change plan and provides the analysis
output of the matched policy violation as diagnosis. Other-
wise, the tool returns that the intended changes are compliant
with the security goals, after which the administrator can
provision the changes to the infrastructure.
5. EVALUATION
5.1 Security Analysis
The analysis is based on the system model of §2 and
the run-time analysis (§4): Weatherman is deployed with
an authorization proxy (PEP) that intercepts management
operations, forwards them to the policy decision point (PDP)
for analysis, and which in turn issues an accept/deny decision.
We establish a secure deployment that allows to obtain the
integrity property based on a small set of assumptions.
1) Limited Access [access]: The adversary accesses the
virtualized infrastructure through the management interface
only, which can be enforced by placing hosts into lockdown
mode [28] with no privileges to revoke it. Further, this implies
that the adversary does neither have physical or root access
on the physical hosts, direct access to the hypervisor nor
physical access to network and storage. The adversary does
not have access as super_admin, who manages the privileges.
Weatherman and the authorization proxy are deployed in
a hardened conﬁguration and thereby placed under [access].
In practice the hardening can be further achieved by reduc-
ing the attack surface of the deployment, e.g., by using a
hardened hypervisor, no multi-tenancy, and attestation.
2) Network Isolation [netisolation]: The management net-
work is isolated from adversarial access, which implies that
the management host cannot be accessed by the adversary di-
rectly, but only through the authorization proxy. We call the
network between authorization proxy and management host
netsec, either enforced 1) as dedicated physical network, 2) as
VLAN in the physical switch, where virtualization adminis-
trators do not have access, or 3) as a virtual network with a
dedicated VLAN identiﬁer, where the administrators do not
have privileges to change it. Weatherman and the authoriza-
tion proxy are deployed in netsec and their communication
with the management host is covered by [netisolation].
3) Authentic View and Faithful Model [authenticview]:
Weatherman has an authentic view of the topology and
conﬁguration of the infrastructure as well as a faithful model
of it, including the consequences of management operations.
This condition stems from the modeling approach introduced
in §3.1: The Realization model provides a faithful graph
representation derived from the actual conﬁguration as the
structure is encoded there. The operations model captures
how individual management operations change the state of
the infrastructure and thereby the Realization model.
Deﬁnition 4 (Integrity of Run-time Analysis)
If a set of management operations S has been provisioned
to the virtualized infrastructure, then Weatherman has pre-
viously veriﬁed S with respect to the speciﬁed security goals
and issued an accept decision and the management host con-
sequently provisioned S.
Proof Sketch. We pursue the argument by back-tracking
starting from a set of management operations S received at
the management host. 1. Integrity of communication: We
know that the management network netsec between manage-
ment host, authorization proxy and analysis is covered by
[netisolation] and gain integrity on S and on topology data.
As the management host received S at the management
network, it must have been forwarded by the authorization
proxy upon an accept decision from the analysis (PDP). The
analysis thereby must have veriﬁed S under the given security
policy and issued an accept decision. 2. View equivalence
on the topology: From the assumption [authenticview], we
obtain both the faithful Realization model of the topology
and representation of consequences in the operations model
as necessary conditions. Given that authentic view and faith-
ful model, the tool can only have issued an accept decision,
if none of the alarm states deﬁned in the security policy
matched the what-if state of the topology amended with
the management operations of S. 3. View equivalence on
S: Weatherman and the authorization proxy are protected
from the adversary’s direct inﬂuence by [access]. The man-
agement operations S are transferred between authorization
proxy and Weatherman with integrity, by which Weatherman
analyzes the very same S as staged for provisioning at the
authorization proxy. We have that the S received at the
management host must have been the same submitted at the
authorization proxy and analyzed by Weatherman, which
could only have been forwarded if a what-if analysis did not
match an alarm state. 4. Exclusive provisioning through the
management host: Finally, given the [access] condition, we
have that management operations can only be provisioned
through the management host and that the adversary cannot
access hypervisors and physical hosts directly. Thereby, S
must have been provisioned by the management host itself
after the veriﬁcation and an accept decision.
Discussion: The run-time analysis (§4) oﬀers protection
against malicious insiders, while the change-plan analysis (§4)
oﬀers non-malicious administrators a way to verify changes
before provisioning. This approach beneﬁts system availabil-
ity, since honest administrators can evaluate their change
plans pro-actively to gain conﬁdence that their changes will