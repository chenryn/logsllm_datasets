use two oﬀ-the-shelf, rooted Motorola Moto-E (2nd generation) smartphones
running vanilla Android 5.0.2. For each device we created an individual Google
Play account. To allow control through the Android Debug Bridge (ADB),
devices are connected to the controller using USB. We use XPrivacy2 to set
the phone’s location information according to the location of the speciﬁc Plan-
etLab node and iptables to restrict network communication to the speciﬁc
mobile messaging application (based on its UID) under test. To prevent geoloca-
tion based on mobile network information, the phones were set to airplane mode
with only WLAN enabled.
Router Conﬁguration. Two GNU/Linux PCs, conﬁgured to act as WLAN
access points, provide two dedicated WPA2-protected wireless networks, one to
2 http://repo.xposed.info/module/biz.bokhorst.xprivacy
194
Q. Scheitle et al.
each mobile phone. Through DHCP, they provide a RFC 1918 private address
and the PlanetLab node’s DNS server to the phones. The routers use tcpdump
to intercept traﬃc and scapy to automatically process network traces.
Measurement Orchestration. The measurements to conduct are deﬁned as
experiments. Within each experiment MATAdOR executes the respective set of
commands. This involves setting up remote tunnels to two PlanetLab nodes, con-
ﬁguring the network settings on the routers according to the experiment, starting
interception and manipulation software on the routers, conﬁgure the phone to
use the wireless network, setting XPrivacy and ﬁrewall settings on the phone,
capturing the phone’s screen for later inspection, stepping through the exper-
iment on the phones with ADB automation, parsing the network trace data
automatically, and executing path measurements to all IP addresses found in
the network trace.
Experiment Parametrization. To permit experimentation with diﬀerent
applications, all required experimental parameters are controlled through
application-speciﬁc conﬁguration ﬁles. This includes timers between the diﬀerent
steps of the experiment, blacklists of hosts not to include in path measurements
(e.g. NTP or DNS servers), the text to send in the messages and how many mes-
sages to send with the application. Such messaging timers, depicted in Fig. 2,
are controlled through these conﬁguration ﬁles.
Experiment Monitoring and Error Handling. While running experiments,
we have learned that using unaltered applications on physical devices in this
complex setup is prone to errors. We therefore split the overall experiment into
smaller junks to be able to reproduce missing or failing measurements. To be
able to detect and analyze failures, the screen of the mobile devices is captured
for each measurement.
Beneﬁts Using the MATAdOR Testbed. Our approach minimizes eﬀort
and cost using common available oﬀ-the-shelf hardware. Since MATAdOR does
not rely on device or run time emulation, simulated network connections,
adapted applications, or the devices being otherwise modiﬁed in an unusual way
(e.g. setting an application or device proxy), the testbed environment is trans-
parent to both the phone and apps and looks like a “normal” wireless network.
All steps within the experiment life cycle have been automated. This provides
the possibility to eﬃciently scale the number of applications and experiments.
MATAdOR provides functionality to easily and automatically intercept all net-
work traﬃc. It can also transparently redirect network traﬃc through hosts at
remote locations, appearing to outsiders and the application itself as if the phone
was located at that place. When proxying the phone’s traﬃc through a remote
location, the phone’s location services are manipulated accordingly.
3.2 Methodology
The goal of our experiment is to collect information about the path that messages
take on the Internet when two communication partners communicate with each
Analyzing Locality of Mobile Messaging Traﬃc
195
other using a mobile messaging application. In addition, we want to learn about
the regions and countries a message traverses on its way. To do so, we have
to analyze the network path between both communication partners and the
messaging service infrastructure.
In our experiment, we use a set of four carefully selected mobile messaging
services and use their respective applications to exchange messages between the
two mobile phones in our testbed. In a single measurement, we use one spe-
ciﬁc mobile messaging application, connect to the mobile messaging service on
both phones and exchange messages between both devices. By doing so, we can
extract the communication endpoints for the mobile messaging service from the
network traﬃc. We can then perform path measurements to these communi-
cation endpoints from both mobile phones to obtain the network path to the
service provider infrastructure. To get a global view on communication, we tun-
nel traﬃc through 28 PlanetLab nodes. This way, we can learn the path messages
take for example for a WhatsApp user in Australia communicating with a user
in North America. In addition, we conduct direct path measurements between
both respective PlanetLab nodes to obtain the direct network path.
For the path measurements, we use the standard traceroute tool provided
with GNU/Linux. From the network traces, we extract the protocol (i.e. TCP or
UDP) and port number (e.g. 443) the mobile messaging service uses and apply
these settings to measure the network path to the mobile messaging service
infrastructure. To obtain the path between nodes, we use traceroute with TCP
and a random high port.
Selection of Applications. For this work, we carefully selected four diﬀerent
mobile messaging services based on diﬀerent characteristics depicted in Table 1.
Based on their popularity, we picked WhatsApp and WeChat as the two
mobile messaging services built for mobile chat. Due to its high rank in the EFF
Scorecard with respect to security and privacy and being free software with its
source code open to the public, we picked TextSecure as a third application for
this experiment. We chose Threema for its promise of servers based in Switzer-
land and claim of strong privacy for the users. In addition, Threema is one of
the few Europe-based providers. Since all of the previous solutions rely on a cen-
tralized client/server architecture, we select Bleep as a ﬁfth candidate due to its
decentralized peer-to-peer architecture. However, we could not enforce peer-to-
peer behavior in our testbed and observed minute-long delays between messages.
We concluded that peer-to-peer architectures require closer investigation includ-
ing the use of NAT traversal techniques in our framework. For this reason, we
excluded Bleep from the set of applications. We did not further pursue Firechat
as it advertises peer-to-peer behavior only for local mesh networks.
Node Selection. To achieve a global view on messaging communication, we
compiled a list of PlanetLab nodes providing a wide geographical distribution.
The objective for this list was to cover as many regions and countries as possible.
However, PlanetLab does not provide equal coverage in all regions and availabil-
ity of nodes strongly diﬀers across regions. When we conducted our experiment,
PlanetLab featured nodes in 49 countries, but we only found 28 countries with at
196
Q. Scheitle et al.
Table 1. Properties of mobile messaging services and applications.
least one stable and responsive node, providing good coverage for North America,
Europe, Asia and Oceania. For South America only a single node in Argentina
and Brazil was provided, for Africa no nodes could be accessed at all.
For our experiment, we therefore used 4 nodes in the Americas (North
America: 2, South America: 2), 7 nodes in Asia (Eastern Asia: 4, South-Eastern
Asia: 2, Western Asia: 1), 16 nodes in Europe (Eastern Europe: 3, Northern
Europe: 5, Southern Europe: 4, Western Europe: 4) and 2 nodes in Oceania.
Limitations. It is important to note that our path measurements only record
a country as being part of a path if a hop from that country replies to path
measurements. This can be biased by (a) nodes not answering those requests
and (b) countries being passively traversed. Especially the latter is relevant,
as intelligence services are known to also wiretap passively. For example, some
measurements from Switzerland oﬀer direct paths to Hong Kong or the U.S.,
but obviously more countries in between would have passive access to the cables
in-between.
4 Postprocessing Experiment Results
Despite limiting application communication, the resulting network traces
included some irrelevant ﬂows. For this experiment, we solely want to evalu-
ate traﬃc between the mobile messaging application and the mobile messaging
Analyzing Locality of Mobile Messaging Traﬃc
197
service’s backend. Therefore we had to classify network ﬂows and assemble a
black- and whitelist of network ﬂows for exclusion or inclusion. Here, we went
through several steps:
First, we limited background traﬃc by ﬁrewalling communication to only
allow the speciﬁc mobile messaging application under test to access the network.
Second, we conducted six measurements from America, Europe and Asia with-
out the mobile messaging application running. This resulted in network traces
containing “background noise” we could exclude after manual validation. Third,
we manually inspected several dozens of traces per mobile messaging applica-
tion to determine additional background traﬃc. The sources for this traﬃc were
manually added to the ﬁltering blacklist. Fourth, we separated authentication
and other background traﬃc for every application from messaging traﬃc through
temporal correlation with message timers.
For Threema, TextSecure and WhatsApp, we found all messaging servers to
be resolved through DNS and to resolve uniformly across the globe, conﬁrming
the results of [7] for WhatsApp. We found WeChat to use both DNS requests
and a custom-built DNS-over-HTTP protocol for name resolution, providing
diﬀerent name resolution when queried from within or from outside China. This
DNS-over-HTTP uses a 30 min timeout and therefore “contaminates” our name
resolution cache, which we ﬂush after every experiment, typically lasting ﬁve
to ten minutes. We therefore built the whitelist for WeChat analysis through
manual analysis. The resulting detailed DNS table can be found online3.
In a last step we automatically processed all traces and classiﬁed all addresses
into this black- or whitelist. We manually classiﬁed all remaining addresses.
4.1 Mapping Path Measurements to Countries and Regions
To obtain the countries the traﬃc traverses, both the application path and the
network path were processed to provide a geolocation of the IP addresses. With
some manual corrections, we found the ip2location4 country database to provide
the most accurate results. To not overly rely on that database, we manually
validated the mappings in at least one trace per target subnet and source country.
With respect to known inaccuracies of both reverse DNS labels and geolocation
databases, as described in [11,34], we paid special attention to round-trip times
found in forward path measurements.
To analyze locality with respect to a speciﬁc geographic region, we used the
United Nations geoscheme5 to assign countries to regions and subregions. This
scheme relies on 5 regions (Africa, Americas, Asia, Europe, Oceania) which are
further divided into geographic subregions (e.g. for the Americas: Latin America
and the Caribbean, Central America, South America, and Northern America).
3 http://www.net.in.tum.de/pub/mobmes/dnstable.pdf
4 http://www.ip2location.com
5 http://millenniumindicators.un.org/unsd/methods/m49/m49regin.htm
198
Q. Scheitle et al.
4.2 Mapping Countries to Interest Groups
In addition to geographic locality, we analyzed the possibility of several juris-
dictions and similar entities to access the network traﬃc. In this analysis, we
deﬁned several interest groups and checked for the diﬀerent mobile messaging
services if these interest groups can access the traﬃc. For this analysis we deﬁned
the following interest groups:
– 5 Eyes consisting of: Great Britain, United States, New Zealand, Canada
– European Union consisting of: Austria, Belgium, Bulgaria, Croatia, Cyprus,
Czech Republic, Denmark, Estonia, Finland, France, Germany, Greece,
Hungary, Ireland, Italy, Latvia, Lithuania, Luxembourg, Malta, Nether-
lands, Poland, Portugal, Romania, Slovakia, Slovenia, Spain, Sweden, United
Kingdom
– Arab League consisting of: Algeria, Bahrain, Comoros, Djibouti, Egypt, Iraq,
Jordan, Kuwait, Lebanon, Libya, Mauritania, Morocco, Oman, Palestine,
Qatar, Saudi Arabia, Somalia, Sudan
– Russia with the only member Russia