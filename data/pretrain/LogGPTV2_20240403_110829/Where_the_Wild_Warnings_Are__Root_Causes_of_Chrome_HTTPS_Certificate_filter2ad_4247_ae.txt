If a captive portal is detected, Chrome displays a special captive
portal error UI (as shown in Figure 6) instead of a security warning.
We consider this actionable message to be a significantly better user
experience than showing the generic certificate warning. However,
we found that the probe request has high false positive and false
negative rates (Section 8.1).
Industry standards groups are working on improved solutions
for captive portal discovery [1], but these solutions will take time
to develop and roll out. In the meantime, we implemented two
improvements to Chrome’s captive portal logic:
Session F5:  Understanding Security FailsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1417certificate, if (a) the redirection is safe and (b) we think that is likely
where the user wants to go. We must be cautious with redirections
because different subdomains can be controlled by different people.
We decided to start with “www mismatch” errors, which are
responsible for a small percentage of certificate name mismatches
(Section 6.2.2). We felt that the risk was low given some browser
display logic already assumes that the www subdomain and TLD
are operated by the same party. When Chrome encounters a name
mismatch error for www.example.com, it issues a background re-
quest to example.com (or the other way around). If the background
request responds within three seconds with an HTTP 200 status
code, then Chrome redirects the user there. We also place a message
in the developer console to alert the site owner to the misconfigu-
ration.
Chrome telemetry data shows that this redirection occurs for
1.8% of all name mismatch errors. A www mismatch is found but
the redirect URL is not available for 0.28% of name mismatch errors.
Although 1.8% is small, we consider this a success. We are consider-
ing expanding the redirection to include other sets of subdomains,
such as redirecting m.example.com to example.com.
10.5 Future mitigations
To continue tackling causes of spurious certificate warnings, we
are planning to explore several mitigations and research directions.
10.5.1 Government roots. Our manual classification (Section 9)
finds that servers commonly use government root certificates that
are not widely trusted by clients. When Chrome encounters an
authority invalid error for a certificate that chains to a known
government root, the warning UI could direct the user to a webpage
that explains what the government root is and how to install it.
The primary challenge in implementing this mitigation is the
messaging and UX. Installing a government root certificate can be
risky for some users – for example, if they don’t trust the govern-
ment in question, or if the government does not operate its root
in accordance with industry standards. Chrome should provide
information about how to fix the error without encouraging users
to install a root that they might not fully trust.
10.5.2 TLS proxy roots. In Section 8.2, we noted that a signifi-
cant fraction of errors are caused by a small number of TLS proxy
products. Chrome could look for these product names in the issuer
strings of certificates that generate errors. However, it is unclear
what Chrome should do if it detects that an error is possibly due to
a missing TLS proxy root. One option would be to prompt the user
to contact a network administrator.
10.5.3 Outreach for misconfigured servers. Prior work has inves-
tigated the effectiveness of notifying site owners about web server
hijacking [21]. Similar studies could be undertaken for HTTPS
misconfigurations. For example:
• Are site owners more likely to correct misconfigurations if
they receive email messages about them, rather than just
browser warnings?
• Are email messages more effective if they contain an estimate
of the number of warnings Chrome has shown for the site?
• Are email messages more effective if they include instruc-
tions about how to fix the misconfiguration?
11 RELATED WORK
In this section, we survey other studies of HTTPS errors and mis-
configurations and compare them to our work.
11.1 Studies of HTTPS errors
Our dataset differs from prior work because it includes non-server
errors and a global perspective; further, we deploy solutions.
11.1.1 Warnings in the field. Akhawe et al. were the first to
study the causes of HTTPS warnings in the field [9]. They moni-
tored network traffic from the egress points of ten U.S. research,
government, and university networks. Their study had a popula-
tion of 300,000 users over a nine-month period. They identified
self-signed certificates, expired certificates, name mismatches re-
lated to subdomains, and incomplete chains as causes of TLS errors.
These prior findings did not encompass our experience working
in support forums, where people commonly report issues due to
client misconfigurations and network interference. We were there-
fore concerned that the study’s results were only part of the picture,
due to several limitations:
• They had to emulate browser behavior, which does not nec-
essarily represent the user experience. Client-side problems
are not captured using their method. Further, they couldn’t
handle connections with the SNI extension, which eliminated
38% of the HTTPS connections that they saw.
• Their observed population isn’t representative. All of the
monitored users were highly educated and in the U.S., likely
using high-end devices. Other populations visit different web
pages on different devices.
• Their observed networks aren’t representative. They studied
well-behaved, well-managed networks with relationships to
their research institution. These networks lack the content
filters, broken firewalls, and other types of proxies that one
might expect to see on messier networks.
Inspired by this research, we performed a similar study from a
more advantageous vantage point: a popular web browser. Our
data comes from a global population, connecting over many types
of networks. The reports include browser data, so that we know
exactly what the end user saw in the warning. Some of our find-
ings coincided (e.g., the importance of incomplete chains) but, as
expected, we found substantially more problems due to client and
network misconfigurations. Additionally, we implemented mitiga-
tions for several of the problems that we identified.
11.1.2 Network scans. One way to learn about HTTPS errors
is to scan large sets of servers, looking for misconfigurations that
cause errors. Holz et al. repeatedly scanned the Alexa Top Million
in 2011, finding that 18% of server certificates are expired and about
a third are self-signed [18]. In 2013, Durumeric et al. performed
110 Internet-wide scans over fourteen months, reporting that 6%
of certificate chains are expired, and 6.4% have missing or wrong
intermediates [12].
We find a different ratio of error causes, likely due to our differ-
ent perspectives. Server scans weigh all servers equally, which is
appropriate if one is trying to understand the types of errors that
developers make (as these previous studies were). However, we are
concerned with the user experience, in which some sites are viewed
Session F5:  Understanding Security FailsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1418much more often than others. Further, server scans naturally do
not include network and client problems.
11.1.3 Developer motivations. Why do server misconfigurations
happen? Given browser warnings, it is surprising that web devel-
opers allow server misconfigurations to occur and linger. Fahl et al.
surveyed 755 web developers about why they have certificate errors
on their websites [14]. A third of developers said they had made a
mistake, but two-thirds intentionally deployed non-validating cer-
tificates. Their reasons included: testing and development servers
don’t need HTTPS, the cost of certificates, lack of trust in Certificate
Authorities, the URL wasn’t meant to be accessed by end users, and
the site was no longer operational.
11.2 Studies of TLS proxies
According to two studies, TLS proxies are widespread. Approx-
imately 0.2% of TLS connections to Facebook are transparently
proxied [19], and a broader study found that 0.41% of TLS con-
nections in general were proxied [23]. They identified anti-virus
software, firewalls, malware, parental controls, and enterprise filters
as common types of proxies. We looked for these types of proxies
and find that they are also major sources of errors.
Our research question is essentially the complement of these
studies. They investigated how often TLS connections are silently
intercepted, whereas we aim to identify the causes of user-visible
warnings. Their methodologies excluded most TLS connections
with warnings because users had to visit the target websites for their
analysis code to run. Modern browsers disallow clicking through
warnings on facebook.com due to HSTS, thereby excluding those
connections from the Facebook dataset. The broader study likely
included some connections with warnings, but high warning ad-
herence rates (e.g., 70% for Chrome [29]) mean that most would be
filtered from their dataset. Further, neither study included websites
with server misconfigurations. In contrast, our dataset represents
the full spectrum of failed TLS connections.
12 CONCLUSION
In an attack scenario, it is critical that users heed HTTPS certificate
error warnings. Large numbers of false alarms make it less likely
that they will do so [28, 30]. Spurious warnings also create a poor
user experience and hinder HTTPS adoption.
In this paper we have shown that client and network misconfigu-
rations are prominent culprits for spurious certificate warnings. We
assigned root causes to certificate reports collected from volunteer
Chrome users, and we investigated the small number of root causes
– such as incorrect client clocks and insufficient intermediates –
which account for vast numbers of warnings. Finally, we proposed,
implemented, and evaluated mitigations for the common causes
of spurious certificate warnings, replacing about 25% of them in
total. Our findings and mitigations are applicable to other browser
vendors as well as other types of TLS clients, all of which may be
susceptible to client and network misconfigurations that interfere
with certificate validations.
ACKNOWLEDGMENTS
We thank Andrew Whalley, Chris Palmer, Emily Schechter, Eric
Roman, Lucas Garron, and Noé Lutz for their help with this work.
https:
Security
FAQ.
[7] 2017.
dev-channel.
The Chromium Projects
capport/about/.
https://datatracker.ietf.org/wg/
REFERENCES
[1] [n. d.]. Captive Portal Interaction (capport).
[2] [n. d.]. Chrome Release Channels. https://www.chromium.org/getting-involved/
[3] [n. d.]. Roughtime. https://roughtime.googlesource.com/roughtime.
[4] 2014. Comodo EV Chain Issues. https://community.qualys.com/thread/13775#
[5] 2015. Kaspersky Lab Forum: clock is being changed by ?virus. https://forum.
[6] 2016. HTTPS websites fail to load or you receive the error message "Connection is
untrusted" when using your web browser with ESET products. http://support.eset.
com/kb3126/?locale=en_US.
https:
kaspersky.com/index.php?showtopic=289198.
comment-24990.
//www.chromium.org/Home/chromium-security/security-faq#
TOC-How-does-key-pinning-interact-with-local-proxies-and-filters-.
[8] 2017. Google Chrome Privacy Whitepaper: Safe Browsing protection.
//www.google.com/chrome/browser/privacy/whitepaper.html#malware.
[9] Devdatta Akhawe, Bernhard Amann, Matthias Vallentin, and Robin Sommer. 2013.
Here’s My Cert, So Trust Me, Maybe?: Understanding TLS Errors on the Web. In
Proceedings of the 22Nd International Conference on World Wide Web (WWW ’13).
ACM, New York, NY, USA, 59–70. https://doi.org/10.1145/2488388.2488395
[10] Xavier de CarnÃľ de Carnavalet and Mohammad Mannan. 2016. Killed by Proxy:
Analyzing Client-end TLS Interception Software. In NDSS.
[11] T. Dierks and E. Rescorla. 2008. The Transport Layer Security (TLS) Protocol Version
1.2. https://tools.ietf.org/html/rfc5246#section-7.4.2.
[12] Zakir Durumeric, James Kasten, Michael Bailey, and J. Alex Halderman. 2013.
Analysis of the HTTPS Certificate Ecosystem. In Proceedings of the 2013 Confer-
ence on Internet Measurement Conference (IMC ’13). ACM, New York, NY, USA,
291–304. https://doi.org/10.1145/2504730.2504755
[13] Zakir Durumeric, Zane Ma, Drew Springall, Richard Barnes, Nick Sullivan, Elie
Bursztein, Michael Bailey, J Alex Halderman, and Vern Paxson. 2017. The Security
Impact of HTTPS Interception. In Network and Distributed Systems Symposium
(NDSSâĂŹ17).
[14] Sascha Fahl, Yasemin Acar, Henning Perl, and Matthew Smith. 2014. Why Eve
and Mallory (Also) Love Webmasters: A Study on the Root Causes of SSL Miscon-
figurations. In Proceedings of the 9th ACM Symposium on Information, Computer
and Communications Security (ASIA CCS ’14). ACM, New York, NY, USA, 507–512.
https://doi.org/10.1145/2590296.2590341
[15] Adrienne Porter Felt, Alex Ainslie, Robert W. Reeder, Sunny Consolvo, Somas
Thyagaraja, Alan Bettes, Helen Harris, and Jeff Grimes. 2015. Improving SSL
Warnings: Comprehension and Adherence. In Proceedings of the 33rd Annual
ACM Conference on Human Factors in Computing Systems (CHI ’15). ACM, New
York, NY, USA, 2893–2902. https://doi.org/10.1145/2702123.2702442
[16] Adrienne Porter Felt, Robert W. Reeder, Hazim Almuhimedi, and Sunny Consolvo.
2014. Experimenting at Scale with Google Chrome’s SSL Warning. In Proceedings
of the SIGCHI Conference on Human Factors in Computing Systems (CHI ’14). ACM,
New York, NY, USA, 2667–2670. https://doi.org/10.1145/2556288.2557292
[17] Lucas Garron and David Benjamin. 2015.
certificates
an-update-on-sha-1-certificates-in.html.
in Chrome.
An update on SHA-1
https://security.googleblog.com/2015/12/
ietf.org/proceedings/98/slides/slides-98-capport-survey-00.pdf.
[18] Ralph Holz, Lothar Braun, Nils Kammenhuber, and Georg Carle. 2011. The SSL
Landscape: A Thorough Analysis of the x.509 PKI Using Active and Passive
Measurements. In Proceedings of the 2011 ACM SIGCOMM Conference on Internet
Measurement Conference (IMC ’11). ACM, New York, NY, USA, 427–444. https:
//doi.org/10.1145/2068816.2068856
[19] Lin Shung Huang, Alex Rice, Erling Ellingsen, and Collin Jackson. 2014. Analyzing
Forged SSL Certificates in the Wild. In Proceedings of the 2014 IEEE Symposium
on Security and Privacy (SP ’14). IEEE Computer Society, Washington, DC, USA,
83–97. https://doi.org/10.1109/SP.2014.13
[20] Mariko Kobayashi. 2017. Survey on Behaviors of Captive Portals. https://www.
[21] Frank Li, Grant Ho, Eric Kuan, Yuan Niu, Lucas Ballard, Kurt Thomas, Elie
Bursztein, and Vern Paxson. 2016. Remedying Web Hijacking: Notification
Effectiveness and Webmaster Comprehension. In International World Wide Web
Conference.
[22] Tyler Odean. 2012. Chromium Blog: Changes to the Field Trials Infrastructure.
https://blog.chromium.org/2012/05/changes-to-field-trials-infrastructure.html.
[23] Mark O’Neill, Scott Ruoti, Kent Seamons, and Daniel Zappala. 2016. TLS Proxies:
Friend or Foe?. In Proceedings of the 2016 Internet Measurement Conference (IMC
’16). ACM, New York, NY, USA, 551–557. https://doi.org/10.1145/2987443.2987488
[24] Tavis Ormandy. 2016. Kaspersky: SSL interception differentiates certificates with a
32bit hash. https://bugs.chromium.org/p/project-zero/issues/detail?id=978.
[25] Waseem Patwegar.
Computer
Fix
Incorrect
http://www.techbout.com/
Windows
fix-slow-incorrect-windows-computer-clock-14287/.
2016.
Clock.
Slow or
How to
Session F5:  Understanding Security FailsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1419[26] Deborah Salmi. 2015. Avast Web Shield scans HTTPS sites for malware and threats.
https://blog.avast.com/2015/05/25/explaining-avasts-https-scanning-feature/.
[27] Angela Sasse. 2015. Scaring and Bullying People into Security Won’t Work. IEEE
Security and Privacy (May/June 2015).
[28] David W Stewart and Ingrid M Martin. 1994.
Intended and unintended con-
sequences of warning messages: A review and synthesis of empirical research.
Journal of Public Policy & Marketing (1994), 1–19.
[29] Joel Weinberger and Adrienne Porter Felt. 2016. A Week to Remember: The Impact
of Browser Warning Storage Policies. In Twelfth Symposium on Usable Privacy and
Security (SOUPS 2016). USENIX Association, Denver, CO, 15–25. https://www.
usenix.org/conference/soups2016/technical-sessions/presentation/weinberger
[30] M Wogalter. 2006. Purposes and scope of warnings. Handbook of Warnings (3–9);
Wogalter, M., Ed (2006).
Session F5:  Understanding Security FailsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1420