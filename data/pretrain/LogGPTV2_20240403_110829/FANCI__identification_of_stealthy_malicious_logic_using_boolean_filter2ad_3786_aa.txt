title:FANCI: identification of stealthy malicious logic using boolean
functional analysis
author:Adam Waksman and
Matthew Suozzo and
Simha Sethumadhavan
FANCI: Identiﬁcation of Stealthy Malicious Logic Using
Boolean Functional Analysis
Adam Waksman
Matthew Suozzo
Simha Sethumadhavan
Computer Architecture and Security Technologies Lab
Department of Computer Science
Columbia University
New York, NY, USA
{waksman,simha}@cs.columbia.edu
{ms4249}@columbia.edu
ABSTRACT
1.
INTRODUCTION
Hardware design today bears similarities to software design. Often
vendors buy and integrate code acquired from third-party organi-
zations into their designs, especially in embedded/system-on-chip
designs. Currently, there is no way to determine if third-party de-
signs have built-in backdoors that can compromise security after
deployment.
The key observation we use to approach this problem is that
hardware backdoors incorporate logic that is nearly-unused, i.e.
stealthy. The wires used in stealthy backdoor circuits almost never
inﬂuence the outputs of those circuits. Typically, they do so only
when triggered using external inputs from an attacker. In this paper,
we present FANCI, a tool that ﬂags suspicious wires, in a design,
which have the potential to be malicious. FANCI uses scalable,
approximate, boolean functional analysis to detect these wires.
Our examination of the TrustHub hardware backdoor benchmark
suite shows that FANCI is able to ﬂag all suspicious paths in the
benchmarks that are associated with backdoors. Unlike prior work
in the area, FANCI is not hindered by incomplete test suite cover-
age and thus is able to operate in practice without false negatives.
Furthermore, FANCI reports low false positive rates: less than 1%
of wires are reported as suspicious in most cases. All TrustHub de-
signs were analyzed in a day or less. We also analyze a backdoor-
free out-of-order microprocessor core to demonstrate applicability
beyond benchmarks.
Categories and Subject Descriptors
B.6.2 [Hardware]: Logic Design—Security and Trust
Keywords
hardware; security; backdoors; functional analysis; intellectual prop-
erty
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. Copyrights for com-
ponents of this work owned by others than ACM must be honored. To
copy otherwise, or republish, to post on servers or to redistribute to lists,
requires prior speciﬁc permission and/or a fee. Request permissions from
PI:EMAIL
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 $15.00.
Malicious backdoors and intentional security ﬂaws in hardware
designs pose a signiﬁcant threat to trusted computing [1, 2, 3]. This
threat is growing in seriousness due to the ever-increasing complex-
ity of hardware designs. A designer can hide a backdoor within a
hardware design by writing one or a few lines of code in a way
that slightly deviates from speciﬁcation. For instance, a hardware
backdoor, when triggered, might turn off the page protections for a
certain range of addresses or weaken the cryptographic strength of a
psuedo-random number generator. Such backdoors can be inserted
either by third-party designers producing independent components
or by malicious insiders working for an otherwise benign company.
As a concrete example, King et al. designed a backdoor that trig-
gers when a speciﬁc rare value appears on the memory bus [4].
In recent years, techniques have been proposed for protecting
against hardware design backdoors, including unused circuit iden-
tiﬁcation [5], validation of design properties at runtime [6], and
methods for disabling backdoor triggers at runtime [7, 8]. Each
of these solutions provides protection against some of the hard-
ware backdoor attack space, and each of these techniques operates
at least partially at runtime. Runtime techniques increase design
complexity, due to the added effort of modifying designs to include
runtime protections.
A key difference between our work and prior works is that our
solution does not depend directly on validation and veriﬁcation.
This is extremely useful because validation and veriﬁcation teams
are often large (larger even than design teams) and hard to trust.
Additionally, it can be hard in practice to verify third-party IP.
We propose a solution for discovering backdoors in hardware
designs prior to fabrication using functional analysis. If backdoors
can be detected statically, then the design can be ﬁxed or rejected
before it is taped-out and sent to market. The key insight behind
our work – one that has been observed in prior works [5, 7] – is
that backdoors are nearly always dormant (by design) and thus rely
on nearly-unused logic, by which we mean logic that almost never
determines the values of output wires. It is desirable to design back-
doors with rare triggers to avoid unintentional exposure during de-
sign validation or other benign testing. In other words, triggers give
stealth and control to the adversary. Our goal is to statically iden-
tify what we refer to as weakly-affecting inputs, which are input
wires that have the capability to serve as backdoor triggers.
We propose a metric called control value to identify nearly-unused
logic. This metric measures the degree of control that an input has
on the operation and outputs of a digital circuit. The gist of our
method is to approximate the truth table for each intermediate out-
put in a design as a function of any wire that can determine that
697output. We then compute the inﬂuence of each input on the output.
We show that control value computations can be approximated ef-
ﬁciently and accurately for real circuits and that control value is a
useful measure for ﬁnding backdoors. We then present a tool called
FANCI—Functional Analysis for Nearly-unused Circuit Identiﬁca-
tion. FANCI reads in a hardware design and ﬂags a set of wires that
appear suspicious. FANCI whitelists most of the design (usually
more than 99%) and ﬂags a few suspect wires to be code reviewed.
The intuition behind why FANCI works is that in a given de-
sign module, there are typically very few (or even zero) wires with
low enough control values to be capable of serving as a backdoor
trigger. Typically, a backdoor has more or less the following form:
a good circuit and a malicious circuit exist. The outputs of both
feed into something semantically equivalent to a multiplexer. The
multiplexer is controlled by an input that selects the output of the
malicious circuit when triggered. For this general arrangement to
work, the control value for the control wire is made very low, and
FANCI detects such wires.
While we are not theoretically guaranteed to ﬁnd all backdoors,
our empirical results support that the types of circuits designers cre-
ate in the real world can be effectively analyzed using our tool. For
the backdoored circuits in the TrustHub benchmark suite, we were
able to detect all backdoors with low false positive rates. We were
also able to analyze a backdoor-free, out-of-order microprocessor
core without obtaining false positives, indicating that FANCI does
not ﬂag most commonly used circuits as backdoors. We argue that
applying FANCI to designs statically prior to applying runtime pro-
tections can only bolster defenses and never weakens them. Lastly,
our method has pseudo-randomness built in to defeat adversaries
that may have knowledge of our tools.
The rest of the paper is organized as follows. We ﬁrst present our
threat model in Section 2. We then describe our analysis algorithm
and the way FANCI works in Section 3. We further show that our
algorithm solves a previously unsolved problem in backdoor detec-
tion in Section 4. The results of our experiments are presented in
Section 5. Finally, we discuss related work in Section 6 and con-
clusions in Section 7.
2. THREAT MODEL
In our threat model, an independent hardware designer or third-
party intellectual property (IP) provider supplies us with a hardware
design. This design is soft IP, encoded as either hardware descrip-
tion language (HDL, also sometimes referred to as RTL) source
code, a gatelist or a netlist. Gatelists are produced by logic synthe-
sis, and netlists are produced by physical synthesis. In each case,
the design is a soft product that has not yet been sent to foundries
for physical manufacture. The provider is malicious and has in-
cluded hidden, malicious functionality that they are able to turn on
at an opportune time for them. The nature of the malicious payload
of the attack is not restricted.
Our goal as security engineers is to use non-runtime, validation-
and veriﬁcation-independent, functional analysis to identify which
wires in a digital design could potentially be carrying backdoor sig-
nals. We want to ﬂag a small number of wires and be assured that
the malicious functionality is dependent on a subset of those sus-
picious wires. In other words, we need to avoid false negatives (a
false negative would mean a backdoor that we do not detect).
False positives are also relevant. We must ﬂag a small enough
set of wires that security engineers or code reviewers can evalu-
ate all of the suspicious wires by inspecting code. In other words,
we must whitelist most of the design. We consider a wire to be
a true positive if it is part of combinational logic used in the trig-
gering of the backdoor. In other words, a true positive wire is part
of the circuit that produces malicious activity. Our goal in this pa-
per is detection, not correction. By detecting a backdoor prior to
fabrication and deployment, we at least know that our provider is
malicious before we apply compromised IP to our designs. We can
then blacklist that provider and get our IP from a different source.
We do not attempt automatic correction.
3. THE FANCI ALGORITHM AND TOOL
for all gates g in m do
for all output wires w of g do
T ← TruthTable(FanInTree(w))
V ← Empty vector of control values
for all columns c in T do
Algorithm 1 Flag Suspicious Wires in a Design
1: for all modules m do
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14: end for
Compute control of c (Section 3.2)
Add control(c) to vector V
end for
Compute heuristics for V (Section 3.3)
Denote w as suspicious or not suspicious
end for
end for
We begin with a high-level overview of the algorithmic steps
in FANCI and then describe each step individually. Algorithm 1
describes how suspicious wires are ﬂagged within an untrusted de-
sign. For each module and for each gate in the module, we examine
the outputs. When we refer to outputs we mean any wire that is the
output of any gate, not just the output pins of a chip or a module
in the design. Since we are looking at all wires (including inter-
nal ones), we do not unnecessarily bias our search for backdoor
activity.
For each output wire, we construct a functional truth table for the
corresponding inputs (i.e. the cone of input wires that feed into the
given intermediate output, also called the fan-in tree). We then iter-
ate through each of the input columns of the truth table 1. For each
column, we hold all other columns ﬁxed. For each possible row,
we check to see if the value of the column in question determines
the output.
Mathematically, there are two different logical functions, the
function one gets from ﬁxing the input to digital zero and the func-
tion one gets from ﬁxing the input to digital one. We are computing
the boolean difference between these two functions. As a result, for
each input wire, we get a number between zero and one (inclusive)
that represents the fraction of the rows that are inﬂuenced or con-
trolled based on the input column. Once we have done this for each
input, we have a vector of these numbers. We then apply heuristics
(described in Section 3.3) to these vectors to decide if the output
wire is suspicious.
All of our analysis is done on a per-module basis. While a hard-
ware backdoor can affect security of operations that happen in mul-
tiple modules, i.e. the payload of the backdoor can be spread across
different modules, the actual trigger computation usually happens
in only one circuit within one module. The choice to analyze per-
module is practical but not mathematically necessary. As an added
beneﬁt, each module can be analyzed independently of each other,
which means in the future our tool could be parallelized for im-
proved scalability.
1This is similar to what is called zero-delay combinational logic
simulation in CAD tools
698Table 1: A small example of an unaffecting input dependency.
Input C has no inﬂuence over the output O.
Input A Input B
Input C
Output O
1
1
1
1
0
0
0
0
1
1
0
0
1
1
0
0
1
0
1
0
1
0
1
0
0
0
1
1
1
1
0
0
Before getting into the further details of the algorithm and imple-
mentation, we provide some background and relevant terminology
regarding digital wires and circuits.
3.1 Terminology
FANCI operates at the level of wires and gates, which are the ba-
sic building blocks of digital hardware. In this section we deﬁne the
notion of dependency, control values and other relevant concepts in
terms of these building blocks for the understanding of the FANCI