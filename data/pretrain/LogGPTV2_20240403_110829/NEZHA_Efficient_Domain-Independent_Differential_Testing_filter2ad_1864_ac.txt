values.
Algorithm 2 Determine if a new pattern has been observed
1: procedure NEWPATTERN(gen_paths,
gen_outputs,
GlobalState)
IsN ew =false
if GlobalState.U seP DCoarse then
IsN ew | = PDCOARSE(gen_paths, GlobalState)
end if
if GlobalState.U seP DF ine then
IsN ew | = PDFINE(gen_paths, GlobalState)
end if
if GlobalState.U seOD then
IsN ew | = OD(gen_outputs, GlobalState)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13: end procedure
end if
return IsNew
tested applications have executed,
As described in Algorithm 1, whenever a set of applications
is tested under NEZHA, a mutated input that results in a
previously unseen pattern (Algorithm 1 - lines 13-15) is added
to the active input corpus to be used in future mutations.
Procedure NewPattern is called for each input (at every
generation), after all
to
determine if the input exhibits a newly observed behavior and
should be added in the current corpus. The pseudocode for
the routine is described in Algorithm 2: for each of the active
guidance engines in use, NEZHA calls the respective routine
listed in Algorithm 3 and, if the path δ-diversity and output δ-
diversity is increased for each of the modes respectively (i.e.,
the input results in a discovery of a previously unseen tuple),
the mutated input is added to the current corpus.
B. Automated Debugging
NEZHA is designed to efﬁciently detect discrepancies across
similar programs. However, the larger the number of reported
discrepancies and the larger the number of tested applications,
the harder it is to identify unique discrepancies and to localize
the root cause of each report. To aid bug localization, NEZHA
stores each mutated input in its original form throughout the
execution of each generation. NEZHA compares any input
that caused a discrepancy with its corresponding stored copy
(before the mutation occurred), and logs the difference be-
tween the two. As this input pair differs only on the part that
introduced the discrepancy, the two inputs can subsequently
be used for delta-debugging [67] to pinpoint the root cause
of the difference. Finally, to aid manual analysis of reported
path_card ∪ = {|path|}
path_card = ∅
for path in generation_paths do
Algorithm 3 NEZHA path selection routines
1: ; Path δ-diversity (coarse)
2: ; @generation_paths: paths for each tested app for current input
3: ; @GS: GlobalState (bookkeeping of paths, scores etc.)
4: procedure PDCOARSE(generation_paths, GS)
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19: end procedure
end for
; See if the path_card tuple has been seen before:
; check against stored tuples in the GlobalState
new_card_tuple = {(cid:7)path_card(cid:8)} \ GS.P DC_tuples
if new_card_tuple (cid:9)= ∅ then
; If new, add to GlobalState and update score
GS.P DC_tuples ∪ = new_card_tuple
GlobalState.P DC_Score = |GS.P DC_tuples|
return true
end if
return false
path_set ∪ = {path}
end for
new_paths = {(cid:7)path_set(cid:8)} \ GS.P DF _tuples
if new_path_tuple (cid:9)= ∅ then
path_set = ∅
for path in generation_paths do
20: ; Path δ-diversity (ﬁne)
21: procedure PDFINE(generation_paths, GS)
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33: end procedure
GS.P DF _tuples ∪ = new_path_tuple
GlobalState.P DF _Score = |GS.P DF _tuples|
return true
end if
return false
new_output_tuple = {(cid:7)output_tuple(cid:8)} \ GS.OD_tuples
if new_output_tuple (cid:9)= ∅ then
34: ; Output δ-diversity
35: procedure OD(generation_outputs, GS)
36:
37:
38:
39:
40:
41:
42:
43: end procedure
GS.OD_tuples ∪ = new_output_tuple
GlobalState.OD_Score = |GS.OD_tuples|
return true
end if
return false
discrepancies, NEZHA performs a bucketing of reported differ-
ences using the return values of the tested programs. Moreover,
it reports the ﬁle similarity of reported discrepancies using
context-triggered piece-wise fuzzy hashing [45]. Automated
debugging and bug localization in the context of differential
testing is not trivial. Future additions in the current NEZHA
design, as well as limitations of existing techniques are dis-
cussed further in Section VIII.
IV. SYSTEM DESIGN AND IMPLEMENTATION
A. Architecture Overview
We present NEZHA’s architecture in Figure 2. NEZHA
consists of two main components: its core engine and runtime
components. The runtime component collects all information
necessary for NEZHA’s δ-diversity guidance and subsequently
620
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:44 UTC from IEEE Xplore.  Restrictions apply. 
Application Address Space
Program 1
Program 1
Programs
(Instrumented)
NEZHA Runtime
Dynamic 
Coverage 
Information
Program 
Return 
Values
Differential Execution
Input Mutation
Discrepancy 
Logging
NEZHA Core
Guidance
Engines
Instrumentation
Module
Program 1
Program 1
Programs
(Original)
Initial 
Seeds
Input Corpora
          Corpus Reﬁnement
Fig. 2: System architecture.
passes it to the core engine. The core engine then generates
new inputs through mutations, and updates the input corpus
based on its δ-diversity guidance.
We implemented NEZHA using Clang v3.8. Our implemen-
tation consists of a total of 1545 lines of C++ code, of which
1145 and 400 lines correspond to NEZHA’s core and runtime
components, respectively.
B. Instrumentation
To enable NEZHA’s gray-box guidance, the test programs
must be instrumented to gather information on the paths
executed for each test
input. This can be achieved either
during compilation, using dynamic binary instrumentation, or
using binary rewriting. For our prototype, we instrument pro-
grams at compile-time, using Clang’s SanitizerCoverage [6].
SanitizerCoverage can be combined with one or more of
Clang’s sanitizers, namely AddressSanitizer (ASAN) [57], Un-
deﬁnedBehaviorSanitizer (UBSAN) [8], and MemorySanitizer
(MSAN) [60], to achieve memory error detection during test-
ing. In our implementation, we instrument the test programs
with Clang’s ASAN to reap the beneﬁt of ﬁnding potential
memory corruption bugs in addition to discrepancies with a
nominal overhead. We note that ASAN is not strictly required
for us to ﬁnd discrepancies in our experiments.
C. NEZHA Core Engine and Runtime
NEZHA’s core engine is responsible for driving the input
generation process using the guidance engines described in
the core NEZHA engine by
Section III-A. We implement
adapting and modifying libFuzzer [4], a popular coverage-
guided evolutionary fuzzer that has been successful in ﬁnding
large numbers of non-semantic bugs in numerous large-scale,
real-world software. libFuzzer primarily focuses on library
fuzzing, however it can be adapted to fuzz whole applications,
passing the path and output
information needed to guide
the generation of inputs as parameters to the main engine.
NEZHA’s δ-diversity engine is independent of the underlying
testing framework, and can be applied as-is to any existing
NEZHA Engine
UpdateDiff
RunOne
7
LLVMTestOneInput
LLVMFuzzerNezhaPaths
LLVMFuzzerNezhaOutputs
8
1
2
3
6
Input corpus
Tested Applications
NEZHA_TestStart
Process_i (Data)
NEZHA_TestEnd
4
5
libFuzzer backend
NEZHA components 
Fig. 3: Example of how an input is processed through NEZHA.
fuzzer or differential testing engine, whether black-box or
white-box/gray-box. Our choice of extending libFuzzer is due
to its large adoption, as well as its modularity, which allows for
a real-world evaluation of NEZHA’s δ-diversity with a state-
of-the-art code coverage-based framework.
LibFuzzer provides API support for custom input mutations,
however it is not designed for differential testing nor does it
support modiﬁcations of its internal structures. With respect to
mutations, we do not customize libFuzzer’s engine so that we
can achieve a fair comparison of NEZHA’s δ-diversity with
the default coverage-based guidance of the fuzzer, keeping
all other components intact. Instead, NEZHA uses libFuzzer’s
built-in engine to apply up to a maximum of ﬁve of the
following mutation operators in random order: i) create a new
input by combining random substrings from different inputs,
ii) add/remove an existing byte from an input, iii) randomize
a bit/byte in the input, iv) randomly change the order of a
subset of the input bytes and, v) only randomize the bytes
whose value corresponds to the ASCII code of a digit character
(i.e., 0x30-0x39). Finally, besides adding support for NEZHA’s
δ-diversity to libFuzzer, we also extend its guidance engines
to support (global) code coverage guidance in the context of
differential testing. As we will demonstrate in Section V, δ-
diversity outperforms code coverage, even when the latter is
applied across all tested applications.
A NEZHA-instrumented program can be executed using
any of NEZHA’s guidance engines, as long as the binary
is invoked with the appropriate runtime ﬂags. In libFuzzer,
customized test program invocation is achieved overriding
the LLVMFuzzerTestOneInput function. We override
this function to load NEZHA into a main driver program,
which then performs the differential testing across all ex-
amined applications. We also extend libFuzzer with two
additional API calls, LLVMFuzzerNezhaOutputs and
LLVMFuzzerNezhaPaths that provide interfaces for pass-
ing output values and path execution information between the
core NEZHA engine and the NEZHA library running as part of
the tested programs. Finally, the NEZHA runtime uses two API
calls, namely NE Z H A_TestStart and NE Z H A_TestEnd,
621
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:44 UTC from IEEE Xplore.  Restrictions apply. 
the core engine can use to perform per-program ap-
that
propriate initialization and cleanup operations respectively
(allocation and deallocation of buffers holding path and output
information throughout the execution etc.).
It
from the corpus at Step 1 .
In Figure 3, we present an example of how an in-
is used by NEZHA and how the various components
put
the NEZHA engine begins by
interoperate. Assume that
then
selecting an input
mutates the input and dispatches it
to the tested pro-
grams through LLVMFuzzerTestOneInput at Step 2 .
At Step 3 , the NEZHA library initializes all its bookkeep-
ing data structures for each of the invoked applications via
the NEZHA_TestStart call, and subsequently invokes the
program-speciﬁc functionality under test at Step 4 . Upon
completion, NEZHA deinitializes temporary bookkeeping data
at Step 5 . The runtime execution information is dispatched
back to the NEZHA engine through the designated API invo-
cations at Step 6 . Finally, at Step 7 , the δ-diversity engine
in use determines if the input will be added to the corpus
for further testing. If so, the input is added to the corpus at
Step 8 .
V. EVALUATION
In this section, we assess the effectiveness of NEZHA both in
terms of ﬁnding discrepancies in security-critical, real-world
software, as well as in terms of its core engine’s efﬁciency
compared to other differential
testing tools. In particular,
we evaluate NEZHA by differentially testing six major SSL
libraries, ﬁle format parsers, and PDF viewers. We also com-
pare NEZHA against two domain-speciﬁc differential testing
engines, namely Frankencerts [24] and Mucerts [32], and two
state-of-the-art domain-agnostic guided mutational fuzzers:
American Fuzzy Lop (AFL) [66], and libFuzzer [4]. Our
evaluation aims at answering the following research questions:
1) is NEZHA effective at ﬁnding semantic bugs? 2) does it
perform better than domain-speciﬁc testing engines? 3) does it
perform better than domain-agnostic coverage-guided fuzzers?
4) what are the beneﬁts and limitations of each of NEZHA’s
δ-diversity engines?
A. Experimental Setup
X.509 certiﬁcate validation: We examine six major SSL
libraries, namely OpenSSL (v1.0.2h), LibreSSL (v2.4.0), Bor-
ingSSL (f0451ca2), wolfSSL (v3.9.6), mbedTLS (v2.2.1) and
GnuTLS (v3.5.0). Each of the SSL/TLS libraries is instru-
mented with SanitizerCoverage and AdressSanitizer so that
NEZHA has access to the programs’ path and output informa-
tion. For each library, NEZHA invokes its built-in certiﬁcate
validation routines and compares the respective error codes: if
at least one library returns an error code on a given certiﬁcate
whereas another library accepts the same certiﬁcate, this is
counted as a discrepancy.
For our experiments, our pool of seed inputs consists of
205,853 DER certiﬁcate chains scraped from the Web. Out of
2This refers to a git commit hash from BoringSSL’s master branch