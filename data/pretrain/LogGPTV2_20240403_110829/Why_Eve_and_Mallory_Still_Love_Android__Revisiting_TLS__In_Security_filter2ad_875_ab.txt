### Production Purposes
As of Android 7, user-installed Certificate Authorities (CAs) are no longer trusted by default. Trust is now limited to the set of pre-installed system root CA certificates [44, 60]. However, developers can re-enable user-installed certificates by setting a specific user flag (cf. Listing 4). This action represents a security downgrade, reverting to a state similar to that before Android 7.

### Debug Settings
Debug settings allow developers to configure CA certificates—such as locally issued or self-signed certificates—for debugging purposes. Unlike manually implemented code to switch between debug and production logic, it is not possible to have debug settings active in production when publishing apps on Google Play [28].

### Limits of Network Security Configuration (NSC)
The introduction of NSC did not lead to the deprecation, suspension, or removal of certificate validation APIs in the Android SDK. Developers can still write erroneous certificate validation code, as was possible in earlier Android versions. This is particularly critical because custom certificate validation code can override NSC settings in some cases. For example, a vulnerable `TrustManager` implementation can render NSC certificate pinning configurations ineffective.

### 2.2 Google Play
In addition to NSC for Android, Google Play has implemented several policy changes and safeguards.

- **2016-2017**: Google added safeguards to prevent new apps or app updates from including unsafe `X509TrustManager` and `HostnameVerifier` interfaces and `onReceivedSslError` methods in WebViews. These safeguards are part of the app review process before publication [62].
- **August 2018**: Google Play began accepting only apps and updates targeting Android 8 or higher, which enforces that user-installed certificates are not trusted by default [49].
- **Late 2019**: New apps and updates were required to target Android 9 or higher, thereby enforcing HTTPS by default [65].

### 3 Related Work
In this section, we discuss related work regarding measurement studies of insecure TLS certificate validation code in Android apps.

- **2012**: Fahl et al. [54] analyzed 13,500 popular, free Android apps and found that 8% were susceptible to Man-in-the-Middle (MitM) attacks due to insecure TLS certificate validation code.
- **2013**: Fahl et al. [56] extended their analysis to iOS, reporting that 14% of the 1,009 manually investigated applications suffered from similar issues.
- **2012**: Georgiev et al. [58] uncovered various vulnerabilities in TLS certificate verification logic in non-browser software, including mobile apps. They identified poorly designed APIs and a lack of safe defaults as root causes.
- **2014**: Southiraraj et al. [84] presented SMV-HUNTER, an automated, large-scale analysis tool combining static and dynamic analysis to detect vulnerabilities in the certificate validation logic of Android applications. They studied 23,418 apps, identifying 1,453 as potentially vulnerable and confirming 726.
- **2015**: Onwuzurike and De Cristofaro [77] conducted static and dynamic analyses on 100 popular Android apps, finding that 32 implemented unsafe TLS certificate validation logic. Additionally, 91 applications were vulnerable if attackers installed root CAs on a victim’s device.
- **2015**: He et al. [69] introduced SSLINT, a tool to detect incorrect use of TLS APIs, and found 27 previously unknown TLS-related vulnerabilities in Ubuntu applications.
- **2017**: Fischer et al. [57] classified security-related code snippets from Stack Overflow and assessed their prevalence in Android applications. They found that the most dominant insecure code was related to unsafe custom TLS.
- **2017**: Razaghpanah et al. [81] conducted a dynamic network traffic analysis with data for 1,364,420 TLS handshakes from 7,258 Android apps using the Lumen Privacy Monitor framework for 5,000 users. They found that 2% of the apps in their dataset implemented custom certificate validation logic.
- **2018**: Oltrogge et al. [75] analyzed 13 online application generators for Android, finding that six failed to implement TLS certificate validation code correctly.
- **2019**: Kaflé et al. [70] conducted a security analysis of the Google Nest and Philips Hue smart home platforms, analyzing 761 smart home management apps from Google Play and Nest. They found that 20.61% and 19.82% of the apps, respectively, implemented insecure TLS certificate validation.
- **2019**: Rahaman et al. [80] presented the static analysis tool CryptoGuard, analyzing 6,181 Android apps and finding insecure `TrustManager` implementations in 25.30% of the apps. They concluded that Google Play’s inspection safeguards are insufficient.
- **2020**: Weir et al. [86] performed an online survey with Google Play developers about their access to security experts and developer assurance techniques, analyzing their participants’ apps using MalloDroid [54], CogniCrypt [72], and FlowDroid [40]. They found SSL issues in 70% of the apps.

Our work focuses on the security of custom NSC settings in deployed Android apps and the efficacy of Google Play’s safeguards. In 2020, Possemato and Fratantonio [79] analyzed the security of NSC settings in 16,332 apps, finding that many apps do not fully utilize the NSC feature and allow insecure network protocols. They discovered that developers often copy & paste vulnerable settings from online resources and that several popular third-party libraries require developers to weaken their NSC settings. They concluded their work with a novel NSC extension that allows developers to include insecure libraries without compromising the security of the entire app.

In contrast, our NSC analysis is based on a larger set of Android apps (99,212 instead of 16,332) and more detailed analyses, such as certificate pinning issues across app categories and download counts, and a manual analysis of 40 apps. Additionally, we perform a static code analysis on 15,000 apps and investigate the efficacy of Google Play’s safeguards against vulnerable certificate validation logic in apps, providing a more comprehensive picture of the current state of TLS security in Android apps.

### 4 NSC Adoption and Security
#### Table 2: Body of Android Apps: Total Apps vs. Apps with NSC
| Target SDK | Total Apps | Apps w. NSC |
|------------|------------|-------------|
| = Android 7 | 236,843    | 68          |
| >= Android 8 | 1,098,479  | 96,332      |
| >= Android 9 | 963,750    | 95,826      |

#### Methodology and Findings
In this section, we illustrate the methodology of our NSC analyses and report their findings.

- **Adoption Timeline**: Though NSC is supported for Android 7 and higher, apps with lower target SDKs can use backport-libraries (e.g., TrustKit [25]) to implement NSC. Widespread adoption was delayed until early 2019, correlating with Android 9 introducing HTTPS as the default protocol for web requests in late 2018 (cf. Table 1).

#### 4.1 Security Analysis of Custom NSC Settings
We analyze the security of custom NSC settings across app categories and download counts.

- **Detection of Custom NSC Settings**: If an Android app contains custom NSC settings, a reference to the respective settings file is included in the `android:networkSecurityConfig` property of the `AndroidManifest.xml`. If this reference is missing, we check for the `android:usesCleartextTraffic` attribute to assess whether cleartext traffic is permitted for all network connections without using NSC [6].
- **NSC Settings Analysis**: We extract and analyze all relevant information from the NSC files, examining high-level NSC features and custom settings for specific hosts. Table 3 provides an overview of the NSC elements and attributes, along with secure and insecure options.

#### Table 3: Security Impact of NSC-Settings for `<base-config>` and `<domain-config>`
| Element/Attribute | Secure | Insecure | Reason |
|-------------------|--------|----------|--------|
| `cleartextTrafficPermitted` | `false` | `true` | Allows HTTP connections, downgrading security |
| `overridePins` | `false` | `true` | Overrides certificate pinning, reducing security |
| `expiration` | Valid date | Invalid date | Ensures certificates are up-to-date |
| `src` | Trusted source | Untrusted source | Ensures certificates are from a reliable source |

- **App Demographics**: Popular apps with more than 50,000 downloads are more likely to include a custom NSC file (11-47%, cf. Figure 3).

#### 4.1.1 Cleartext Traffic
- **Analysis**: We analyze apps that deviate from the standard and explicitly declare the `cleartextTrafficPermitted` flag in the NSC file. Since Android 9, cleartext traffic is disabled by default (cf. Table 1). We distinguish apps targeting Android 9 or higher from those targeting Android 8 or lower, and also differentiate between global and domain-specific settings.
- **Findings**: We found that 88,769 (98.98%) apps used the `cleartextTrafficPermitted` flag to re-enable HTTP, while only 4,093 (4.56%) apps used it to enforce HTTPS by setting `cleartextTrafficPermitted="false"`. In our dataset, 565,910 apps target Android 9 or higher. Of these, 84,060 (14.85%)—57,123 globally and 34,246 for specific domains—allow HTTP connections, downgrading security. In 3,908 apps targeting Android 9 or higher, the `cleartextTrafficPermitted` flag is set to `false`, which has no additional security benefit since HTTPS is enforced by default.