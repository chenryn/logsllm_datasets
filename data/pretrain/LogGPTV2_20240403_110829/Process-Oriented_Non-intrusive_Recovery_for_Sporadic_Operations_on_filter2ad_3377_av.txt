### Resource Types and Their Attributes
Resources have specific attributes. For example, instances possess an instance ID, instance type, machine image, and other characteristics. The dependency relationships among these resources are as follows:
1. An Auto Scaling Group (ASG) is associated with one Launch Configuration (LC).
2. An ASG contains a (possibly empty) set of instances.
3. An Elastic Load Balancer (ELB) links to a (possibly empty) set of instances.
4. Each instance belongs to at most one ASG.
5. Each instance can be linked to a (possibly empty) set of ELBs.

### Workload of Determining Resource Space for Scale-Down Operation
The workload for determining the resource space for scale-down operations is illustrated in Figure 37. This figure shows the execution time of the resource space determination algorithm based on 30 runs. The average execution time is 45.90 ms, with a relative standard deviation of 11.98%. The 75th percentile point (75% percentile) is 49 ms.

**Figure 37.** Workload of Resource Space Determination for Scale-Down Operation.

### Workload of Generating Expected Resource State Templates
The workload for generating expected resource state templates for scale-down operations is shown in Figure 38. This figure illustrates the execution time of the template generation algorithm based on 30 runs. The average execution time is 50.57 ms, with a relative standard deviation of 6.51%. The 75th percentile point (75% percentile) is 52.75 ms.

**Figure 38.** Workload of Expected Resource State Templates Generation for Scale-Down Operation.

### Recovery Satisfying Requirements
POD-Recovery is designed to meet all eight recovery requirements described in Section 3.5. Therefore, experimental evaluations are necessary to validate POD-Recovery's capability to satisfy these requirements. The following experiments demonstrate how POD-Recovery fulfills each recovery requirement using the scale-down operation.

#### A. Runtime Recovery (Satisfying Recovery Requirement R1)
As described in Chapters 4-7, our method is inherently a runtime recovery solution.

#### B. Recovery Satisfying RTO
1. **Experimental Procedure**
   - This recovery requirement concerns the time it takes for the system to return to a consistent state after recovery. We measure recovery time by performing the scale-down operation on a cloud application with 24 instances. These instances are attached to an auto-scaling group and registered in an elastic load balancer. The cloud application running on these instances is TPC-W, a 3-tier web benchmark application running on Tomcat. The average workload on each instance is 50 query requests per second.
   - We use a proprietary fault injection tool to inject faults at two determined recovery points during the scale-down operation. The applicable recovery patterns are automatically determined, and recovery is performed using the selected acceptable recovery action based on two different selection methods. The first method selects the optimal recovery action, while the second method selects an acceptable, though not necessarily optimal, action.
   - The injected faults are detailed in Table 36 and are based on industry interviews and failure reports, making them representative. The recovery time is calculated by summing the execution time of each function in the recovery action. The experiment was run 30 times to measure the recovery time.

**Table 36.** Faults Injected for Scale-Down Operation

| Recovery Point | Fault Injected |
|----------------|----------------|
| After Step 1   | 3 instances still in ELB |
| After Step 3   | 3 instances not terminated |

2. **Experimental Results**
   - Table 37 shows the recovery time for the scale-down operation. The recovery time represents the average value of 30 runs, with the highest relative standard deviation being 1.6%.
   - For each recovery point, the execution time of the recovery action selected by the Pareto set search-based optimization method is no greater than that of other applicable actions. The execution time of the selected recovery action by the user constraints-based optimization method is within the time constraint set by business stakeholders.

**Table 37.** Recovery Time for Scale-Down

| Recovery Process Point | Errors | Applicable Recovery Patterns | Selected Recovery Action (Pareto Set) | Recovery Time (Pareto Set) | Selected Recovery Action (User Constraints) | Recovery Time (User Constraints) |
|------------------------|--------|------------------------------|---------------------------------------|----------------------------|---------------------------------------------|----------------------------------|
| 3 instances still in ELB | 3 instances still in ELB | RP1, RP3, RP5, RP6 | Deregister 3 instances from the ELB | 6.88 s | Deregister 12 instances from the ELB | 22.19 s |
| 3 instances not terminated | 3 instances not terminated | RP1, RP2, RP3, RP4, RP5, RP6, RP8 | Terminate 3 instances again | 64.77 s | Set ASG’s desired capacity to 12; Wait for ASG to terminate 3 instances | 70.84 s |

3. **Satisfying Recovery Requirement R2**
   - The recovery for all recovery points in the scale-down operation takes no more than 71 seconds for execution. Additionally, the state capturing time is typically around 14 seconds but at most 15 seconds. The applicable recovery patterns filtering time is at most 43 milliseconds, recovery plan generation time is at most 77 milliseconds, and acceptable recovery action selection time is at most 279 milliseconds.
   - Error detection time, which ranges from 10 ms to 11 seconds (X. Xu, et al., 2014), must also be considered. The total error detection and recovery time is around 98 seconds, ensuring that the total recovery time is below 98 seconds, regardless of the recovery action selection method used. Thus, POD-Recovery achieves a reasonable RTO.

#### C. Recovery Reducing Negative Impact
1. **Experimental Procedure**
   - This recovery requirement concerns the negative impact of recovery on the cloud system. We measure the recovery impact by performing the scale-down operation on a cloud application with 24 instances, attached to an auto-scaling group and registered in an elastic load balancer. The cloud application is TPC-W, a 3-tier web benchmark application running on Tomcat, with an average workload of 50 query requests per second.
   - We use a proprietary fault injection tool to inject faults at two determined recovery points, and the applicable recovery patterns are automatically determined. Recovery is performed using the selected acceptable recovery action based on two different selection methods. The injected faults are detailed in Table 38 and are based on industry interviews and failure reports, making them representative.
   - The recovery impact is calculated by computing the cross-product of two vectors: the average response time to user requests in each step of the recovery action and the execution time of each step. The experiment was run 30 times to measure the average recovery impact.

**Table 38.** Faults Injected for Scale-Down Operation

| Recovery Point | Fault Injected |
|----------------|----------------|
| After Step 1   | 3 instances still in ELB |
| After Step 3   | 3 instances not terminated |

2. **Experimental Results**
   - Table 39 shows the recovery impact for the scale-down operation. The recovery impact represents the average value of 30 runs, with the highest relative standard deviation being 2.4%.
   - For each recovery point, the impact of the recovery action selected by the Pareto set search-based optimization method is no greater than that of other applicable actions. The impact of the selected recovery action by the user constraints-based optimization method is within the impact constraint set by business stakeholders.

**Table 39.** Recovery Impact for Scale-Down

| Recovery Process Point | Errors | Applicable Recovery Patterns | Selected Recovery Action (Pareto Set) | Recovery Impact (Pareto Set) | Selected Recovery Action (User Constraints) | Recovery Impact (User Constraints) |
|------------------------|--------|------------------------------|---------------------------------------|----------------------------|---------------------------------------------|----------------------------------|
| 3 instances still in ELB | 3 instances still in ELB | RP1, RP3, RP5, RP6 | Deregister 3 instances from the ELB | [Impact Value] | Deregister 12 instances from the ELB | [Impact Value] |
| 3 instances not terminated | 3 instances not terminated | RP1, RP2, RP3, RP4, RP5, RP6, RP8 | Terminate 3 instances again | [Impact Value] | Set ASG’s desired capacity to 12; Wait for ASG to terminate 3 instances | [Impact Value] |

In summary, the experimental results demonstrate that POD-Recovery effectively meets the recovery requirements, ensuring both efficient recovery times and minimal negative impacts on the cloud system.