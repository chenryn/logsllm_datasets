title:From IP to transport and beyond: cross-layer attacks against applications
author:Tianxiang Dai and
Philipp Jeitner and
Haya Shulman and
Michael Waidner
From IP to Transport and Beyond:
Cross-Layer Attacks Against Applications
Tianxiang Dai
Fraunhofer SIT
Germany
Philipp Jeitner
Fraunhofer SIT
TU Darmstadt
Germany
Haya Shulman
Fraunhofer SIT
Germany
Michael Waidner
Fraunhofer SIT
TU Darmstadt
Germany
ABSTRACT
We perform the first analysis of methodologies for launching DNS
cache poisoning: manipulation at the IP layer, hijack of the inter-
domain routing and probing open ports via side channels. We eval-
uate these methodologies against DNS resolvers in the Internet
and compare them with respect to effectiveness, applicability and
stealth. Our study shows that DNS cache poisoning is a practical
and pervasive threat.
We then demonstrate cross-layer attacks that leverage DNS cache
poisoning for attacking popular systems, ranging from security
mechanisms, such as RPKI, to applications, such as VoIP. In addition
to more traditional adversarial goals, most notably impersonation
and Denial of Service, we show for the first time that DNS cache
poisoning can even enable adversaries to bypass cryptographic
defences: we demonstrate how DNS cache poisoning can facilitate
BGP prefix hijacking of networks protected with RPKI even when
all the other networks apply route origin validation to filter invalid
BGP announcements. Our study shows that DNS plays a much
more central role in the Internet security than previously assumed.
We recommend mitigations for securing the applications and for
preventing cache poisoning.
CCS CONCEPTS
• Security and privacy → Network security.
KEYWORDS
DNS Cache Poisoning, Fragmentation, BGP hijacking, Side Chan-
nels
ACM Reference Format:
Tianxiang Dai, Philipp Jeitner, Haya Shulman, and Michael Waidner. 2021.
From IP to Transport and Beyond: Cross-Layer Attacks Against Applications.
In ACM SIGCOMM 2021 Conference (SIGCOMM ’21), August 23–28, 2021,
Virtual Event, USA. ACM, New York, NY, USA, 14 pages. https://doi.org/10.
1145/3452296.3472933
1 INTRODUCTION
Domain Name System (DNS), [RFC1034, RFC1035] [59, 60], plays
a central role in the Internet. Designed and standardised in the
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8383-7/21/08...$15.00
https://doi.org/10.1145/3452296.3472933
836
80s to provide lookup services DNS has evolved into a complex
infrastructure and is being increasingly used to support a wide
variety of existing and future applications and security mechanisms.
Given the large dependency of the Internet on DNS it also became
a lucrative target for attacks.
DNS cache poisoning. In a cache poisoning attack an adver-
sary injects malicious DNS records into the cache of a victim DNS
resolver. Poisoning the cache enables the adversary to redirect the
victims using that DNS resolver to malicious hosts instead of the
genuine servers of the target domain. As a result, the adversary
intercepts all the services in the target domain.
In this work we explore how practical off-path DNS cache poi-
soning attacks are and how such attacks can be exploited to launch
cross-layer attacks against applications.
Taxonomy of cache poisoning methodologies. As we ex-
plain in Section 2, off-path DNS cache poisoning is challenging
to launch in practice. Nevertheless, there are methodologies that,
depending on different conditions, can result in practical attacks.
In this work we evaluate such methodologies for launching cache
poisoning attacks: (1) BGP prefix hijacking, (2) transport layer side
channels and (3) injections into IP defragmentation cache. These
methodologies were previously used for issuing fraudulent cer-
tificates, [22] or for hijacking bitcoins [17]. Attacks for issuing
fraudulent certificates were also carried out by [24] using IP frag-
mentation; a method initially proposed in [38]. [57] combined ICMP
error messages and rate limiting of nameservers to create a side
channel for guessing the source port in DNS requests, but have not
evaluated this attack against real Internet systems.
Which of the methods is more effective? Which has higher applica-
bility? Which is stealthier and does not trigger alerts?
To answer these questions we perform the first comparative
analysis of the methodologies for cache poisoning attacks. In addi-
tion, in order to gain a deeper understanding of the methodologies
and their impact on the Internet applications, we also extend the
evaluations in the previous work [22, 24, 57] for Internet scale mea-
surements of applicability and effectiveness of these methodologies
against multiple Internet networks.
Taxonomy of vulnerable applications. The implications of
cache poisoning for the other Internet services and applications
has not been explored. There is evidence of cache poisoning in the
wild, mostly for redirecting victims to impersonating websites [64].
Cache poisoning was also demonstrated in research against the
certificate authorities [22, 24]. But there is no comprehensive study
of exploits of cache poisoning against Internet clients and services.
What applications are at risk due to cache poisoning? How can
an attacker exploit cache poisoning to attack applications? What is
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Tianxiang Dai, Philipp Jeitner, Haya Shulman, and Michael Waidner
the fraction of vulnerable applications in the Internet? What are the
challenges and what cache poisoning methodologies are more suitable?
We answer these questions by evaluating the cache poisoning
methodologies against a range of popular applications. We defined
nine categories of applications, ranging from security mechanisms,
to VoIP, email and intermediate devices; see Table 1. We provide
the first systematic study of cache poisoning against a collection of
popular applications and security mechanisms.
Poisoning is a threat to applications. Our results demon-
strate that, although challenging to launch, off-path DNS cache poi-
soning poses a realistic threat for many Internet applications. Sur-
prisingly, we show that DNS cache poisoning can be applied for
downgrade attacks against security mechanisms causing the victims
not to perform validation, e.g., RPKI or domain-based anti-spam
validation. Taking RPKI as an example, we developed an attack that
by redirecting the RPKI cache [RFC6810] [25] to a wrong repos-
itory via DNS cache poisoning, the attacker can cause the RPKI
validation to result in status unknown (instead of invalid). As a
result the RPKI cache will not validate correctness of the BGP an-
nouncements that it receives. Suppressing RPKI validation allows
the adversary to perform BGP prefix hijacks even of ASes which
have the corresponding RPKI material (Route Origin Authorization
and resource certificates [54]) in the public repositories and hijack
even the senders which enforce route origin validation [61].
Another example is malware distribution by causing the anti-
spam validation to fail via cache poisoning.
This is the first demonstration of the devastating power of DNS
cache poisoning, which shows that in addition to traditional threats,
such as impersonation, DNS cache poisoning can facilitate much
stronger attacks which were otherwise not possible. We also show
that DNS cache poisoning can be used to inflict Denial of Service
(DoS) on applications and their clients.
In our experimental evaluation against the applications we ex-
ploit DNS cache poisoning to subvert correctness and security of
basic Internet functions, enabling the attackers to take over IP ad-
dresses, to hijack telephony, to de-synchronise local time, and even
prevent victims from connecting to the correct VPN tunnel.
Off-path attacks. Our study is performed with off-path attack-
ers. This is the weakest attacker model in the Internet, it can merely
send packets from spoofed IP addresses, which is a realistic assump-
tion since around 30% of the Internet networks do not enforce egress
filtering [19–21, 55, 56, 58]. Essentially any adversary in the Internet
has off-path capabilities and can select networks which allow it to
send packets with spoofed source IP addresses. Stronger attackers,
most notably the on-path Man-in-the-Middle (MitM), can do more
devastating attacks. Nevertheless, MitM attackers are more rare
and even such attackers have limitations: the strong government
sponsored attackers can be on-path only to some of the Internet
victims depending on the paths that they control but even they do
not control all of the networks. Therefore, it is critical to understand
the threat that an off-path attacker poses to applications.
Disclosure and ethics. Our attacks were tested against remote
networks reliably, yet were ethically compliant. We measured and
evaluated vulnerabilities in the DNS caches of the subjects of our
study and measured which services use the caches but did not
hijack their traffic nor Internet resources and neither did we place
incorrect DNS records for Internet domains that are not under
our control in the caches of our test subjects. Specifically, to avoid
harming Internet customers and domains, we set up a victim AS
and victim domains as well as adversarial AS and adversarial hosts
on that AS, which were used by us for carrying out the attacks
against the victims. Our measurement study for evaluating the
vulnerabilities was performed using our victim domains, which
ensured that the targets of our study would not use the spoofed
records for any “real” purpose.
We believe that in addition to disclosing the vulnerabilities to
the affected entities it is critical to raise awareness to the extent
and the scope of the vulnerabilities.
Contributions. We present the first comprehensive study of
the attack surface that off-path DNS cache poisoning introduces
on the Internet ecosystem.
• We implement three methodologies for launching off-path DNS
cache poisoning attacks: (1) BGP prefix hijacking, (2) side-channels
and (3) fragmentation. We perform the first Internet-scale evalu-
ation of these methodologies against DNS resolvers and compare
them for applicability, stealthiness and success of cache poisoning.
• We apply these methodologies to launch cross-layer attacks
against widely used applications and services (see taxonomy in Ta-
ble 1). Our study shows that cache poisoning can be used to bypass
security mechanisms, to cause DoS attacks, or for impersonation
attacks.
• We provide recommendations for countermeasures for DNS
caches against cache poisoning attacks and for applications against
cross-layer attacks even when using poisoned caches.
Organisation. We review DNS cache poisoning and related
work in Section 2. In Section 3 we present the DNS cache poisoning
methodologies that we use throughout our work. In Section 4 we
demonstrate cross-layer attacks against applications using DNS
cache poisoning. We provide results of our measurements in Section
5 and recommend mitigations in Section 6. We conclude this work
in Section 7.
2 DNS CACHE POISONING OVERVIEW
Domain Name System (DNS) [60] cache poisoning allows an at-
tacker to redirect victims to attacker controlled hosts. Typically
the attackers targets recursive DNS resolvers whose caches serve
multiple clients. A single injection of a malicious DNS record prop-
agates to all the hosts that use that resolver. The attacker can then
intercept the traffic between the services (such as web, email, FTP)
in the victim domain and the hosts that use the poisoned cache.
DNS resolvers use defences to make launching successful cache
poisoning attacks difficult.
2.1 Defences Against Poisoning
The DNS resolvers are required to randomise certain fields in DNS
requests sent to the nameservers, [RFC5452] [43]. These include
a random 16 bit UDP source port and the 16 bit DNS transaction
identifier (TXID); additional defences include nameserver randomi-
sation [43] and 0x20 encoding [29]. The nameservers copy these
fields from the DNS request to the DNS response. DNS resolvers
accept the first DNS response with the correctly echoed challenge
values and ignore any responses with incorrect values.
837
From IP to Transport and Beyond:
Cross-Layer Attacks Against Applications
To launch a successful cache poisoning attack, the attacker needs
to guess the correct challenge values and make sure that his spoofed
response arrives before the genuine response from the real name-
server. This is easy for an on-path (man-in-the-middle) attacker,
which can simply copy the values from the request to the response.
Cryptographic signatures with DNSSEC [RFC6840] [73] could pre-
vent on-path attacks, however, DNSSEC is not widely deployed.
Less than 1% of the second level domains (e.g., 1M-top Alexa) are
signed, and most resolvers do not validate DNSSEC signatures, e.g.,
[26] found only 12% in 2017. Our measurements indicate that less
than 5% of the domains we studied are signed. There is however
an increase in the resolvers validating DNSSEC: we found 28.6%
validating resolvers via our ad-network study. Deploying DNSSEC
was shown to be cumbersome and error-prone [27]. Even when
widely deployed DNSSEC may not always provide security: a few
research projects identified vulnerabilities and misconfigurations
in DNSSEC deployments in popular registrars [44, 67].
Recent proposals for encryption of DNS traffic, such as DNS over
HTTPS [41] and DNS over TLS [42], although vulnerable to traffic
analysis [65, 68], may also enhance resilience to cache poisoning.
These mechanisms are not yet in use by the nameservers in the
domains that we tested. Nevertheless, even if they become adopted,
they were not designed to protect the entire resolution path, but
only the link between the client and the recursive resolver, and
hence will not prevent DNS cache poisoning attacks.
2.2 History of DNS Cache Poisoning
In 2007 Klein identified vulnerability in Bind9 DNS resolvers [50]
and in Windows DNS resolvers [51] allowing off-path attackers
to reduce the entropy introduced by the TXID randomisation. In
2008 Kaminsky [47] presented a practical cache poisoning attack
even against truly randomised TXID. Vixie suggested to randomise
the UDP source ports already in 1995 [72], subsequently in 2002
Bernstein warned that relying on randomising TXID alone is vulner-
able [18]. Following Kaminsky attack DNS resolvers were patched
against cache poisoning [43], and most randomised the UDP source
ports in queries.
Nevertheless, shortly after new approaches were developed al-
lowing cache poisoning attacks. In 2012 [37] showed that off-path
attackers can use side-channels to infer the source ports in DNS
requests. In 2015 [66] showed how to attack resolvers behind up-
stream forwarders. This work was subsequently extended by [74]
with poisoning the forwarding devices. A followup work demon-
strated such cache poisoning attacks also against stub resolvers
[16]. [57] showed how to use ICMP errors to infer the UDP source
ports selected by DNS resolvers. Recently [52] showed how to use
side channels to predict the ports due to vulnerable PRNG in Linux
kernel. In 2013 [38] provided the first feasibility result for launching
cache poisoning by exploiting IPv4 fragmentation.
For the evaluations in this work we selected three generic cache
poisoning methodologies developed in [22, 38, 57], which are not
specific to implementation or setup and do not result due to bugs
in randomness generation, such as [52]. We perform Internet-wide
measurements of these methodologies testing experimentally DNS
cache poisoning against DNS resolution platforms. We then exploit
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
these poisoned caches to attack applications that use the poisoned
records we injected.
2.3 DNS Cache Poisoning in the Wild
There is numerous evidence of DNS cache poisoning attempts in
the wild, [7–13, 28, 64, 69], which were predominantly launched
via short-lived BGP (Border Gateway Protocol) prefix hijacks or by
compromising a registrar or a nameserver of the domain.
We consider only attacks done by network attackers by manipu-
lating the protocols remotely but without compromising services
or networks. Hence compromises of registrars or servers is not in
our scope and in the review of works we focus only on BGP prefix
hijacks, side channels and fragmentation attacks.
In 2017 [17] simulated the effects of BGP prefix hijacks on bitcoin
without experimentally evaluating it in the wild. In 2018, [22] ex-
perimentally evaluated the impact of BGP prefix hijacks on domain
validation and [24] evaluated the impact of DNS cache poisoning on
domain validation. In 2020 a recent research project [70] evaluated
BGP prefix hijacks for cross-layer attacks on Tor (the onion routing)
[31] users, domain validation and bitcoin [34].
Except for fragmentation based DNS cache poisoning against
domain validation [24] there were no studies of cache poisoning
using different methodologies and their evaluation against appli-
cations. In this work we perform the first comprehensive study
of DNS cache poisoning against different applications, and using
different methodologies.
3 TAXONOMY OF POISONING METHODS
In our evaluations in subsequent sections we use three methodolo-
gies for poisoning DNS caches, which were shown to be practical
in previous research: (1) intercepting DNS requests with BGP prefix
hijacking [70], (2) guessing challenge values in DNS requests via