# Chema Alonso

## Informática 64

### Connection Strings
- **Definition**: Connection strings define the way an application connects to a data repository.
- **Types of Connection Strings**:
  - Relational Databases (e.g., MSSQL, Oracle, MySQL)
  - LDAP Directories
  - Files
  - Etc.

### Database Connection Strings
```plaintext
Data Source = myServerAddress;
Initial Catalog = myDataBase;
User Id = myUsername;
Password = myPassword;
```

### Google Hacking
- **Google Hacking**: Techniques for using search engines to find security vulnerabilities.

### UDL (Universal Data Links) Files
- **Credentials**:
  - Operating System Accounts
  - Database Credentials

### Authentication Methods
#### Users Authenticated by Web App
1. **Web Application Connects to Database**:
   - The web application uses its own credentials to connect to the database.
2. **Asks User for Login Information**:
   - The web application manages the login process and asks the user for their credentials.
3. **Checks Login Information**:
   - The web application checks the login information against a custom users table.
   - Example Query: `SELECT id FROM users WHERE username = 'user' AND password = 'pass';`

#### Users Authenticated by Database
1. **Web Application Asks for Credentials**:
   - The web application prompts the user for their credentials.
2. **Connection String with Credentials**:
   - A connection string is composed with the credentials to connect to the database.
3. **Roles and Permissions**:
   - Roles and permissions are limited by the user specified in the connection string.

### Connection String Attacks
- **Injection**: It is possible to inject parameters into connection strings using semicolons as separators.
  ```plaintext
  Data Source = myServerAddress;
  Initial Catalog = myDataBase;
  Integrated Security = NO;
  User Id = myUsername;
  Password = myPassword; Encryption = Off;
  ```

### ConnectionStringBuilder
- **Availability**: Available in .NET Framework 2.0.
- **Security**: Builds secure connection strings using parameters, making injection impossible.

### Are People Aware of This?
- **Awareness**: Many people may not be fully aware of the risks associated with connection string attacks.

### Connection String Parameter Pollution (CSPP)
- **Goal**: Inject parameters into the connection string, whether they exist or not.
- **Behavior**: If a parameter is duplicated, the last value wins.
- **Impact**: Attackers can rewrite the connection string, manipulating the application's behavior and authentication process.

### Examples of CSPP
- **Rewrite a Parameter**:
  ```plaintext
  Data Source=DB1
  UID=sa
  Data Source=DB2
  password=Pwnd!
  ```
- **Add a Parameter**:
  ```plaintext
  Data Source=DB1
  UID=sa
  Integrated Security=True
  password=Pwnd!
  ```

### Scanning the DMZ
- **Setup**:
  - Development Database
  - Financial Database
  - Test Database
  - Forgotten Database
  - Web Application
  - Production Database
- **Vulnerability**: The web application is vulnerable to CSPP.

### Port Scanning a Server
- **Example**:
  ```plaintext
  Data Source=DB1,80
  Data Source=DB1,21
  Data Source=DB1,25
  Data Source=DB1,1445
  ```

### CSPP Attacks
#### Attack 1: Hash Stealing
1. **Run a Rogue Server**:
   - Set up a rogue server on an accessible IP address.
2. **Activate a Sniffer**:
   - Use a sniffer (e.g., Cain/Wireshark) to capture the login process.
3. **Duplicate Data Source Parameter**:
   - `Data_Source=Rogue_Server`
4. **Force Windows Integrated Authentication**:
   - `Integrated Security=true`

#### Attack 2: Port Scanning
1. **Duplicate Data Source Parameter**:
   - `Data_Source=Target_Server,target_Port`
2. **Check Error Messages**:
   - No TCP Connection: Port is open.
   - No SQL Server: Port is closed.
   - SQL Server: Invalid Password.

#### Attack 3: Hijacking Web Credentials
1. **Duplicate Data Source Parameter**:
   - `Data_Source=Target_Server`
2. **Force Windows Authentication**:
   - `Integrated Security=true`
3. **Application Pool Sends Credentials**:
   - The application pool sends its credentials to log in to the database engine.

### Other Databases
- **MySQL**:
  - Does not support integrated security.
  - Can manipulate web application behavior.
  - Port scanning and connecting to internal/testing/development databases.
- **Oracle**:
  - Supports integrated authority on Windows and UNIX/Linux servers.
  - Possible attacks: hash stealing, port scanning, hijacking web credentials.
  - Elevate a connection to sysdba to shutdown/startup an instance.

### Tools and Advisories
- **myLittleAdmin/myLittleBackup**:
  - Released a security advisory and patch.
- **ASP.NET Enterprise Manager**:
  - Abandoned but used in many web control panels.
  - Fix the code yourself.

### Countermeasures
- **Harden Your Firewall**:
  - Outbound connections.
- **Harden Internal Accounts**:
  - Web application.
  - Web server.
  - Database Engine.
- **Use ConnectionStringBuilder**.
- **Filter Semicolons**.

### Questions?
- **Contact**:
  - Chema Alonso
  - Email: [PI:EMAIL]
  - Websites: 
    - [Informática 64](http://www.informatica64.com)
    - [El Lado del Mal](http://elladodelmal.blogspot.com)

### Authors
- Chema Alonso
- Manuel Fernández “The Sur”
- Alejandro Martín Bailón
- Antonio Guzmán