其实上面的反射设置state值，也可以不做，因为我们看代码中，只是执行了`this.context.addFilterDef(filterDef)`，我们完全也可以通过反射context这个字段自行添加filterDef。
在实际执行栈中，可以看到，实际filter的创建是在org.apache.catalina.core.StandardWrapperValve#invoke执行`ApplicationFilterChain
filterChain = ApplicationFilterFactory.createFilterChain(request, wrapper,
servlet);`的地方
跟进其实现方法，忽略不重要的代码：
    ...
    StandardContext context = (StandardContext) wrapper.getParent();
    FilterMap filterMaps[] = context.findFilterMaps();
    ...
    // Add the relevant path-mapped filters to this filter chain
    for (int i = 0; i  dispatcherTypes, boolean isMatchAfter, String... urlPatterns) {
        FilterMap filterMap = new FilterMap();
        filterMap.setFilterName(this.filterDef.getFilterName());
        if (dispatcherTypes != null) {
          Iterator var5 = dispatcherTypes.iterator();
          while(var5.hasNext()) {
            DispatcherType dispatcherType = (DispatcherType)var5.next();
            filterMap.setDispatcher(dispatcherType.name());
          }
        }
        if (urlPatterns != null) {
          String[] var9 = urlPatterns;
          int var10 = urlPatterns.length;
          for(int var7 = 0; var7  entry = (Entry)var3.next();
            String name = (String)entry.getKey();
            if (this.getLogger().isDebugEnabled()) {
              this.getLogger().debug(" Starting filter '" + name + "'");
            }
            try {
              ApplicationFilterConfig filterConfig = new ApplicationFilterConfig(this, (FilterDef)entry.getValue());
              this.filterConfigs.put(name, filterConfig);
            } catch (Throwable var8) {
              Throwable t = ExceptionUtils.unwrapInvocationTargetException(var8);
              ExceptionUtils.handleThrowable(t);
              this.getLogger().error(sm.getString("standardContext.filterStart", new Object[]{name}), t);
              ok = false;
            }
          }
          return ok;
        }
    }
没错，它遍历了filterDefs，一个个实例化成ApplicationFilterConfig添加到filterConfigs了。
这两个问题解决了，是不是就完成了呢，其实还没有，还差一个优化的地方，因为我们想要把filter放到最前面，在所有filter前执行，从而解决shiro漏洞的问题。
也简单，我们看回`org.apache.catalina.core.ApplicationFilterFactory#createFilterChain`的代码：
    // Add the relevant path-mapped filters to this filter chain
    for (int i = 0; i  ~/tmp/TomcatEchoInject.ysoserial
就生成了CommonsCollections11ForTomcatShellInject的payload了
* * *
## 0x03 测试
上一节中，我们生成了两个payload，接下来，我们启动一个具有`commons-collections:commons-collections:3.2.1`依赖的服务端，并且存在反序列化的接口。
然后我们把步骤一和步骤二生成的payload依次打过去
可以依次看到，两个步骤都返回500异常，相关信息证明已经执行反序列化成功了，接下来我们试试这个内存Webshell
完美，具体ysoserial改造后的代码，我已经上传到github，有兴趣可以看看
[threedr3am/ysoserial](https://github.com/threedr3am/ysoserial)
* * *
## 参考
  * [Tomcat中一种半通用回显方法](https://xz.aliyun.com/t/7348)
  * [动态注册之Servlet+Filter+Listener](https://www.jianshu.com/p/cbe1c3174d41)
  * [threedr3am/ysoserial](https://github.com/threedr3am/ysoserial)