# Make It Clear with RouterOS
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：Larryxi@360GearTeam
## 0x00 再续前言
天才少年“Diving to the deep
water”的[言论](https://github.com/j0nathanj/Publications/blob/master/35C3_From_Zero_to_Zero_Day/From_Zero_to_Zero_Day.pdf)让我打了个机灵，于是想看看大型一点的IoT项目上的安全问题，就这样我和[Bug
Hunting in
RouterOS](https://github.com/tenable/routeros/blob/master/bug_hunting_in_routeros_derbycon_2018.pdf)相遇了。议题中介绍了RouterOS的版本架构、历史研究和开发者后门，作者通过对通信解析的逆向介绍了客户端命令传递至后端的处理过程，最后组合漏洞链完成RCE的利用。不久之后，作者还写了[一篇](https://medium.com/tenable-techblog/make-it-rain-with-mikrotik-c90705459bc6)文章蜻蜓点水地补充了一点小细节和提供了利用开发的架构工具，也有同学对整个议题的内容深入[分析](https://www.anquanke.com/post/id/162457)了一番。
但我向来是一个喜欢知道为什么的人，而且如果要深入[挖掘](https://www.anquanke.com/post/id/146857)的话，作者没有多讲的逆向过程还是需要我们自己上下求索的，本文结合开发者后门提供的便利调试环境，主要对后端命令的分发过程和议题中触发漏洞message的字段处理及漏洞修复进行了逆向分析，而通信流量的编码和加解密过程以及Web端调用后台程序的过程需花另一篇幅逆向介绍，还请各位大拿海涵。
## 0x01 探索后门
议题PPT中上来就介绍如何开启开发者“后门”，这一步其实为了方便后续的调试与逆向，因为stable的不同[版本](https://mikrotik.com/download/archive)使开启方法略有不同，本小节以6.38.4和6.42.4为例简要介绍下方法，环境的搭建可自行[搜索](https://www.cnblogs.com/v5captain/p/9445700.html)。
### 6.38.4
下载[routeros-x86-6.38.4.npk](https://download.mikrotik.com/routeros/6.38.4/routeros-x86-6.38.4.npk)，binwalk解包即可看到squashfs-root的文件系统。需要开启后门的话，按照[PPT](https://github.com/tenable/routeros/blob/master/bug_hunting_in_routeros_derbycon_2018.pdf)中的说法，需要在原始的文件系统here/flash/nova/etc/下新建一个devel-login文件。做法是使用centos的镜像安全启动原RouterOS系统，自动或手动挂载文件系统，新建至根目录的软链接：
顺便简要看一下在/nova/bin/login处理用户登录过程中存在开发者后门的原因，在程序初始化的过程中有一点判断用户名是否为devel的逻辑，如果是且通过sub_804E052函数的判断则把用户名更换为admin：
继续跟进函数中，有目录的拼接并判断特殊文件是否存在：
nv::getAllDirs对搜索的目录有简单的包装，如此可知如果使用ftp上传，使/flash/nova/etc/devel-login文件存在就能通过校验：
所以当我们使用devel用户名和admin的密码登录成功后，即可获取到返回的shell：
自带的shell还是功能受限的busybox，这时候可以利用同样的思路，ftp上传一个功能齐全的busybox（不能太新不然会段错误），加权限后即可大展身手了：
### 6.42.4
对于[6.42.4](https://download.mikrotik.com/routeros/6.42.4/routeros-x86-6.42.4.npk)这样的高版本系统，作者在[Make
It Rain with MikroTik](https://medium.com/tenable-techblog/make-it-rain-with-mikrotik-c90705459bc6)文章中提到了RouterOS会在系统的启动脚本S12defconf中执行/rw/DEFCONF的文件内容，控制该文件就能开启后门shell了，原文中专门录屏展示整个开telnetd的过程，此处不赘述。
## 0x02 流量解密
首先查看监听的端口来寻找可能存在的攻击面，80端口自然是第一考察对象：
****
Web口登录过程中使用 Content-Type: text/plain;charset=UTF-8 Header，认证成功之后使用 Content-Type: msg ，并且从抓包上看都是向 /jsproxy POST加密过后的数据包。正如PPT所讲整个过程可在客户端的 /webfig/master-min-xxxxxxxxxxxx.js 中知晓，认证和会话密钥的生成用的是[MS-CHAP-2](https://tools.ietf.org/html/rfc3079#page-9)协议，但在[ChallengeResponse](https://tools.ietf.org/html/rfc2759#section-8.5)时对PasswordHash的padding做了些更改：
在认证过程中使用的编码是UTF-8，可以在前端调试或者后端找到相应的处理逻辑：
登录成功之后，前端至后端的message以buffer或json的形式传递，其字段值的类型还会对字段名的类型和编码有影响，同样也可以在前端代码中略见：
****
****
对于[WinBox](https://wiki.mikrotik.com/wiki/Manual:Winbox)通信的binary形式的message的格式也是类似的。作者提供了[jsproxy_pcap_parser](https://github.com/tenable/routeros/tree/master/jsproxy_pcap_parser)和[winbox_pcap_parser](https://github.com/tenable/routeros/tree/master/winbox_pcap_parser)工具分别解析这两者的流量，就让我们先站在巨人的肩膀上，以后有机会再结合前后端对流量的包装进行详解。
## 0x03 消息处理
消息流量的传递处理对于后端程序来说有些RPC的意味， 0xff0001 数组中的system
num决定调用哪个二进制文件，数组中的handler指定了处理函数，还有 0xff0007 字段的command则代表具体要执行的命令，下面分别对
/nova/bin/www 和 /nova/bin/mproxy 程序的消息处理过程进行逆向。
### /nova/bin/www
PPT中提到 /nova/bin
下面的二进制文件都可以通过HTTP或Winbox来触发到，CVE-2018-1156的[PoC](https://github.com/tenable/routeros/tree/master/poc/cve_2018_1156)也是如此，向
/jsproxy POST json信息的sysyetm num为55，对应地起后端程序 /nova/bin/licupgr 处理。
在 /nova/bin/www 程序中对于有 /jsproxy 的请求，其会先将 /nova/lib/www/jsproxy.p
作为Servlet进行动态加载：
在 JSProxyServlet::JSProxyServlet 的初始化过程中，找到虚表中的 JSProxyServlet::doPost
为处理POST请求函数，在具体判断 Content-Type Header的内容后传递至 JSSession::processMessage
，通过调试可知解密完消息后传递至 threadExchangeMessage 函数，在线程间通过信号量传递消息：
而在www程序 Looper::Looper 初始化过程中，有对 /ram/novasock 的socket添加：
所以推测 /nova/bin/www 对 /jsproxy 传递来的消息，会通过 /ram/novasock 传递给 /nova/bin/loader
，由后者根据对 /nova/etc/loader/system.x3 的解析来调用后端程序处理：
综上只是结合调试信息，对由system
num调用后端程序的过程进行了大致推理，作者还提供了[parse_x3](https://github.com/tenable/routeros/tree/master/parse_x3)工具来解析系统号对应的程序，感兴趣的同学可以深入跟踪分析下。而消息中的handler和command会在新起的程序中处理，下小节以
/nova/bin/mproxy 为例进行分析。
### /nova/bin/mproxy