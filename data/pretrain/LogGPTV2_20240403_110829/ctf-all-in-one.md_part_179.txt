# Linux 工具指南

## 1. md5sum
`md5sum` 命令使用 MD5 报文摘要算法（128 位）来计算和验证文件的校验和。

- `-b, --binary`：以二进制模式读取
- `-c, --check`：从文件中读取 MD5 校验和并进行验证

## 2. nm
`nm` 命令用于显示二进制目标文件中的符号表。

- `-a, --debug-syms`：显示调试器专用符号
- `-D, --dynamic`：显示动态符号而非普通符号
- `-g, --extern-only`：仅显示外部符号

## 3. objcopy
`objcopy` 可以将一个二进制文件（如图片或 MP3 文件）嵌入到目标文件的一个段中。例如，有一个图片文件 `image.jpg`：

```bash
$ objcopy -I binary -O elf32-i386 -B i386 image.jpg image.o
$ objdump -ht image.o
```

输出：
```plaintext
image.o: file format elf32-i386
Sections:
Idx Name          Size      VMA         LMA     File off  Algn
0 .data       0000642f  00000000  00000000  00000034  2**0
  CONTENTS, ALLOC, LOAD, DATA
SYMBOL TABLE:
00000000 l    d  .data 00000000 .data
00000000 g       .data 00000000 _binary_image_jpg_start
0000642f g       .data 00000000 _binary_image_jpg_end
0000642f g       *ABS* 00000000 _binary_image_jpg_size
```

三个变量的使用方法如下：
```c
const char *start = _binary_image_jpg_start; // 数据的起始地址
const char *end = _binary_image_jpg_end;     // 数据的末尾地址+1
int size = (int)_binary_image_jpg_size;      // 数据大小
```

这一技巧可能出现在 CTF 隐写题中，可以使用 `foremost` 工具提取图片：
```bash
$ foremost image.o
```

## 4. objdump
`objdump` 是一个用于查看目标文件或可执行文件结构的 GCC 工具。

- `-d, --disassemble`：显示可执行部分的汇编内容
- `-S, --source`：在反汇编中混入源代码
- `-s, --full-contents`：显示请求的所有段的完整内容
- `-R, --dynamic-reloc`：显示文件中的动态重定位条目
- `-l, --line-numbers`：在输出中包含行号和文件名
- `-M intel`：以 Intel 指令集格式显示指令

对特定段进行转储：
```bash
$ objdump -s -j [section] [binary]
```

对地址进行指定和转储：
```bash
$ objdump -s --start-address=[address] --stop-address=[address] [binary]
```

当包含调试信息时，还可以使用 `-l` 和 `-S` 来分别对应行号和源码。
结合使用 `objdump` 和 `grep`：
```bash
$ objdump -d [executable] | grep -A 30 [function_name]
```

查找 GOT 表地址：
```bash
$ objdump -R [binary] | grep [function_name]
```

从可执行文件中提取 shellcode（注意，在 `objdump` 中可能会删除空字节）：
```bash
$ for i in `objdump -d print_flag | tr '\t' ' ' | tr ' ' '\n' | egrep '^[0-9a-f]{2}$'`; do echo -n "\x$i"; done
```

## 5. od
`od` 命令用于输出文件的八进制、十六进制或其他格式编码的字节，通常用于显示或查看文件中不能直接显示在终端的字符。

- `-A, --address-radix=RADIX`：文件偏移量的输出格式；RADIX 可以为 `[doxn]`，分别表示十进制、八进制、十六进制或无
- `-t, --format=TYPE`：选择输出格式
- `-v, --output-duplicates`：不使用 `*` 标记行抑制

另外加上 `z` 可以显示 ASCII 码。

用十六进制转存每个字节：
```bash
$ od -t x1z -A x [file]
```

转存字符串：
```bash
$ od -A x -s [file]
$ od -A n -s [file]
```

## 6. readelf
`readelf` 命令用于显示一个或多个 ELF 格式的目标文件的信息，可以通过选项控制显示哪些信息。

- `-h, --file-header`：显示 ELF 文件头
- `-e, --headers`：等同于 `-h -l -S`
- `-l, --program-headers`：显示程序头
- `-S, --section-headers`：显示段头
- `-s, --syms`：显示符号表
- `-r, --relocs`：显示重定位项（如果存在）
- `-d, --dynamic`：显示动态段（如果存在）

查找库中函数的偏移量，常用于 ret2lib：
```bash
$ readelf -s [path/to/library.so] | grep [function_name]@
```

例如：
```bash
$ readelf -s /usr/lib/libc-2.26.so | grep system@
595: 0000000000041fa0 45 FUNC GLOBAL DEFAULT 12 __libc_system@@GLIBC_PRIVATE
1378: 0000000000041fa0 45 FUNC WEAK DEFAULT 12 system@@GLIBC_2.2.5
```

## 7. socat
`socat` 是 netcat 的增强版，CTF 中经常需要使用它连接服务器。

安装：
```bash
$ yaourt -S socat
```

使用示例：
- 连接远程端口：
  ```bash
  $ socat - TCP:localhost:80
  ```
- 监听端口：
  ```bash
  $ socat TCP-LISTEN:700 -
  ```
- 正向 shell：
  ```bash
  $ socat TCP-LISTEN:700 EXEC:/bin/bash
  ```
- 反弹 shell：
  ```bash
  $ socat tcp-connect:localhost:700 exec:'bash -li',pty,stderr,setsid,sigint,sane
  ```
- 将本地 80 端口转发到远程的 80 端口：
  ```bash
  $ socat TCP-LISTEN:80,fork TCP:www.domain.org:80
  ```
- fork 服务器：
  ```bash
  $ socat tcp-l:9999,fork exec:./pwn1
  ```
- 跟踪 `malloc` 和 `free` 调用及相应的地址：
  ```bash
  $ socat tcp-listen:1337,fork,reuseaddr system:"ltrace -f -e malloc+PI:EMAIL* ./pwn"
  ```

## 8. ssdeep
模糊哈希算法（也称为基于内容分割的分片哈希算法，CTPH），主要用于文件的相似性比较。

- `-m`：将文件与已知哈希值进行匹配
- `-b`：只使用文件的基本名称，忽略路径信息

示例：
```bash
$ ssdeep -b orginal.elf > hash.txt
$ ssdeep -bm hash.txt modified.elf
```

## 9. strace
`strace` 命令用于跟踪应用的系统调用和信号传递，并分析结果以解决问题或了解应用的工作过程。

- `-i`：在系统调用时打印指令指针
- `-o FILE`：将跟踪输出发送到文件而不是标准错误
- `-c`：统计每个系统调用的时间、次数和错误，并报告总结
- `-e expr`：限定表达式：option=[!]all 或 option=[!]val1[,val2]...
  - 选项：trace, abbrev, verbose, raw, signal, read, write, fault
- `-p PID`：跟踪进程 ID 为 PID 的进程，可以重复
- `-f`：跟随子进程

## 10. strip
`strip` 命令用于删除可执行文件中的符号和段。

- `-g, -S, -d, --strip-debug`：删除所有调试符号和段
- `-R, --remove-section=`：同时删除段

使用 `-d` 后，可以删除不使用的信息，并保留函数名等。用 `gdb` 进行调试时，只要保留了函数名，都可以进行调试。另外，如果对 `.o` 和 `.a` 文件进行 `strip` 后，就不能和其他目标文件进行链接了。

## 11. strings
`strings` 命令在对象文件或二进制文件中查找可打印的字符串。字符串是 4 个或更多可打印字符的任意序列，以换行符或空字符结束。`strings` 命令对识别随机对象文件很有用。

- `-a, --all`：扫描整个文件，而不仅仅是数据段
- `-t, --radix={o,d,x}`：以 8 进制、10 进制或 16 进制打印字符串的位置
- `-e, --encoding={s,S,b,l,B,L}`：选择字符大小和字节序：
  - `s = 7-bit`, `S = 8-bit`, `{b,l} = 16-bit`, `{B,L} = 32-bit`

示例：
```bash
$ rabin2 -z a.out
vaddr=0x080485d0 paddr=0x000005d0 ordinal=000 sz=17 len=16 section=.rodata type=ascii string=Enter password:
vaddr=0x080485e5 paddr=0x000005e5 ordinal=001 sz=10 len=9 section=.rodata type=ascii string=Congrats!
vaddr=0x080485ef paddr=0x000005ef ordinal=002 sz=7 len=6 section=.rodata type=ascii string=Wrong!
vaddr=0x0804a040 paddr=0x00001040 ordinal=000 sz=36 len=8 section=.data type=utf32le string=w0wgreat
```

字符串 `w0wgreat` 类型为 `utf32le`，而不是传统的 `ascii`，这时 `strings` 就需要指定 `-e L` 参数：
```bash
$ strings a.out | grep w0wgreat
$ strings -e L a.out | grep w0wgreat
w0wgreat
```

组合使用 `strings` 和 `grep`：
在 ret2lib 攻击中，得到字符串的偏移：
```bash
$ strings -t x /lib32/libc-2.24.so | grep /bin/sh
```

检查是否使用了 UPX 加壳：
```bash
$ strings [executable] | grep -i upx
```

## 12. valgrind
`valgrind` 能检测出内存的非法使用等。使用它无需在检测对象程序编译时指定特别的参数，也不需要链接其他的函数库。

- `--leak-check=no|summary|full`：在退出时搜索内存泄漏
- `--show-reachable=yes`：等同于 `--show-leak-kinds=all`
- `--trace-children=no|yes`：Valgrind 化子进程（跟随 `execve`）？
- `--vgdb=no|yes|full`：激活 `gdbserver`？[yes] full 更慢但提供精确的断点/步进

## 13. xxd
`xxd` 的作用就是将一个文件以十六进制的形式显示出来。

- `-g`：每组的字节数，默认 2（-e: 4）
- `-i`：以 C 包含文件风格输出
- `-l`：在 octets 字节后停止
- `-r`：逆操作：将十六进制转储转换为二进制
- `-u`：使用大写十六进制字母

示例：
```bash
$ xxd -g1 [binary]
```

## 14. Windows 工具
### 010 Editor
- https://www.sweetscape.com/010editor/

### DIE
- http://ntinfo.biz/

### PEiD
- http://www.softpedia.com/get/Programming/Packers-Crypters-Protectors/PEiD-updated.shtml

`PEiD` 是一个用于检测常用壳、加密和压缩的小程序。恶意软件编写者通常会进行加壳和混淆，使恶意软件不容易被检测和分析。`PEiD` 可以检查超过 600 种不同的 PE 文件签名，这些数据存放在 `userdb.txt` 文件中。

### PE Studio
- https://www.winitor.com/

### PEview
- http://wjradburn.com/software/

### PortEx Analyzer
- https://github.com/katjahahn/PortEx

### Resource Hacker
- http://www.angusj.com/resourcehacker/

### wxHexEditor
- http://www.wxhexeditor.org/

### PDF Stream Dumper
- http://sandsprite.com/blogs/index.php?uid=7&pid=57

### EMET
- https://support.microsoft.com/en-us/help/2458544/the-enhanced-mitigation-experience-toolkit

## 15. 更多资源
### 课程
- Intro to Computer Systems, Summer 2017
- Modern Binary Exploitation Spring 2015
- OpenSecurityTraining
- Stanford Computer Security Laboratory
- CS642 Fall 2014: Computer Security
- Offensive Computer Security Spring 2014
- System Security and Binary Code Analysis
- SATSMT Summer School 2011
- CS 161 : Computer Security Spring 2017
- Introduction to Computer Security Fall 2015

### 站点
- sec-wiki
- Shellcodes database for study cases
- Corelan Team Articles
- LOW-LEVEL ATTACKS AND DEFENSES
- FuzzySecurity
- LiveOverflow

### 文章
- Debugging Fundamentals for Exploit Development
- Introduction to return oriented programming (ROP)
- Smashing The Stack For Fun And Profit
- Understanding DEP as a mitigation technology part 1
- Tricks for Exploit Development
- Preventing the Exploitation of Structured Exception Handler (SEH) Overwrites with SEHOP
- From 0x90 to 0x4c454554, a journey into exploitation.
- Checking the boundaries of static analysis
- Deep Wizardry: Stack Unwinding
- Linux (x86) Exploit Development Series
- Hack The Virtual Memory

### 书籍
- Hacking: The Art of Exploitation, 2nd Edition by Jon Erickson
- The Shellcoder's Handbook: Discovering and Exploiting Security Holes, 2nd Edition by Chris Anley et al
- The IDA Pro Book: The Unofficial Guide to the World's Most Popular Disassembler 2nd Edition
- Practical Malware Analysis by Michael Sikorski and Andrew Honig
- Practical Reverse Engineering by Dang, Gazet, Bachaalany
- Fuzzing: Brute Force Vulnerability Discovery

## 16. Linux 系统调用表
- Linux System Call Table for x86 64
- syscall_32
- syscall_64

## 17. 幻灯片
这些是我在 XDSEC 做分享的 PPT，主要内容取自 CTF-All-In-One，可作为辅助学习。
- 01 Fight with Linux