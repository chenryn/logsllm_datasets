### Module 3: Understanding and Countering Malware Evasion and Self-Defense

**Introduction**

Malware must remain undetected to carry out its mission. To achieve this, it employs various evasion and self-defense techniques. These techniques are designed to protect the malware from:

- Antimalware products on the victim's machine
- Analysis tools and sandboxes on a researcher's machine

**Evasion and Self-Defense Techniques**

#### Approaches

1. **Passive Evasion:**
   - **Obfuscation:** This involves making the code difficult to understand and analyze. Obfuscation can be applied at multiple levels:
     - **Code Level:** Using exception handlers to switch between code blocks, dynamically loaded functions, string obfuscation, and polymorphic code.
     - **Compilation Level:** Adding junk instructions and complicating control flow (e.g., using `movfuscator`).
     - **Linking Level:** Modifying the PE header and section alignment.
     - **Post-Compilation:** Using protectors to further obfuscate the binary.
   - The degree of obfuscation can vary, making it more or less challenging to defeat.

2. **Active Evasion:**
   - **Environment Fingerprinting:** Malware can detect analysis environments by checking for artifacts that indicate the presence of analysis tools.
   - **Detection and Interference:** Malware may attempt to uninstall antimalware products, unhook system hooks, or alter its behavior (e.g., deploying a decoy or terminating execution).
   - **Post-Compilation:** Using protectors with added anti-debug and anti-VM layers, or specialized underground crypters for AV and sandbox evasion.
   - Many of these methods are well-known, and their use can often be detected.

**Deobfuscation Techniques**

1. **Dynamic Deobfuscation:**
   - **Code Instrumentation and Tracing:** This approach allows for quick identification of the code's behavior without reconstructing all implementation details. It is fast and generic but may miss parts of the code that were not executed during the test runs.

2. **Static Deobfuscation:**
   - **Code Analysis and Cleaning:** This involves analyzing the code, resolving obfuscated parts, and reconstructing the control flow. It can be more accurate but is laborious and requires a tailored approach depending on the specific case.

**Anti-Evasion Techniques**

1. **Sample-Oriented Approaches:**
   - **Patching:** Identifying and removing the checks that the malware uses to detect analysis environments.

2. **Environment-Oriented Approaches:**
   - **VM Hardening:** Changing default settings and strings that are commonly checked to identify virtual machines.
   - **Debugger Plugins:** Using plugins that specialize in hiding the debugger's presence (e.g., by overwriting values in the PEB) and changing default window names.
   - **Alternative Tools:** Utilizing tools that are less frequently targeted by malware checks, such as Intel Pin.

**Resources**

For further reading and practical examples, refer to the following resource:
- [Malware Training Vol. 1](https://github.com/hasherezade/malware_training_vol1)

This module provides a comprehensive overview of the techniques used by malware to evade detection and the methods researchers can employ to counter these tactics.