B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
Once established 
•  You can send JCL 
•  You can send NMR (command/control 
records) 
•  You are now a ‘trusted’ node 
– Depending on your security, of course 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
Interesting ‘feature’ 
•  Users from one node don’t need to log on 
•  When a job is sent, the userID is sent 
along with the ‘NJE’ job 
•  So long as that account exists on the 
receiving side it will work.  
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
NO Password 
Note: no password or any 
authentication information is sent.  
Nodes are TRUSTED and therefore 
no need to re-authenticate. 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
Breaking NJE 
•  First we need to find mainframes 
with NJE 
•  Problem: nmap 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
NJE Node Names 
•  You need this. 
•  No, you NEED it. 
•  You can’t connect otherwise 
NMAP Script: NJE Node Brute 
•  Brute forces node names (even if the 
node is connected!) 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
NJE is super 
awesome 
•  Like we said before: You need three things: 
– Node Name of your target 
– Node name you want to pretend to be 
– IP Address of your target 
With these you can inject JES2 commands 
with: 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
iNJEctor.py
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
Books from the Past! 
•  A lot of our research is from really 
old books 
•  Like, really old 
•  Older than some of you here 
today: 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
Exploit 
Development 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
Architecture 
•  23,31,64 bit modes 
– 3 sets of registers (16 ea) 
– Big Endian 
– Von Neumann Architecture 
– Stack-based (sorta) 
•  Virtual Address Spaces 
•  Program Status Word (PSW) 
•  Z/OS,  USS,   Z/Linux,  Z/VM 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
DC in a box 
JAVA"
LINUX"
CLOUD"
WEB"
MOBILE"
WEBSPHERE"
C"
C++"
ASM"
PL/I"
COBOL"
DB2"
JAVASCRIPT"
MQ"
HTTP"
AND"MORE!" UNIX"
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
Where to start 
•  Focus on what you know 
•  Unix System Services 
•  Why? Cause C and Assembler 
– Narrowed down to: 
•  Buffer Overflow POC 
•  Format String Exploit POC 
•  Learn testing environment 
•  Shell code development and deployment 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
Setup"
Memory"
Args"and"
Execute"
Cleanup"&"
Exit"
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
Useful example 
•  Execute local shell 
– Useful for Privilege Escalation 
•  Steps 
– Build working C or HLASM 
– Convert to machine code 
– Once working, “shellcode-ize” 
•  Remove bad chars or encode 
– Test with C buffer stub program 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
What’s Next? 
•  MSF Integration? 
•  Native Exploits 
•  Java / Web exploits 
•  Privilege Escalation 
•  Continued Tool development / Porting 
– Generic shellcode building 
– Fuzzi 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
Thanks 
•  DEFCON for letting us talk about this 
•  IBM for this cool platform and online books 
•  Huge Mega Corps for neglecting this platform 
•  Dominic White for his tools 
•  Swedish underground community 
•  X3270 authors 
mainframed767 &   
bigendiansmalls 
B.U.M. Corp. Confidential 
B.U.M. Corp. Confidential 
Contact 
•  Phil - “Soldier of Fortran” 
@mainframed767 
PI:EMAIL 
Soldieroffortran.org 
•  Chad – “Big Endian Smalls” 
@bigendiansmalls 
PI:EMAIL 
Bigendiansmalls.com