done
正如“递归式make”一节所说，make并不会以并行的方式来执行这些递归调用。如果
要达到并行执行的目的，你可以把这些目录声明为.PHONY，并且让它们成为工作目标：
.PHONY:$(SUBDIRS)
$(SUBDIRS):
S(MAKE)--directory=$@
分布式make
GNUmake提供了一个鲜为人知（而且只经过少许测试）的编译选项，可用来管理经网
络使用多个系统的编译工作。此功能必须使用pmake所发布的自定义程序库（Customs
library）。pmake大约是1989年AdamdeBoor为Sprite操作系统所编写的make替代
品（而且AndreasStolcke自从那个时候就在维护这个程序了）。
自定义程序库可让make的运行以并行的方式分布到许多主机上进行。GNUmake自
3.77版开始纳人分布式make的自定义程序库的功能。
要启用自定义程序库的功能，你必须从源文件来重新建立make。相关细节请参考make
发行包随附的README.customs文件。首先，你必须下载并建立pmake发行包（网址
在README文件中提到），然后以--with-customs选项来建立make。
---
## Page 217
改进make的效能
207
每个加人分布式make网络的主机都必须运行自定义服务器（customsdaemon），自定义
服务器是自定义程序库的核心。这些主机对文件系统的观点必须一致，比如NFS。这些
自定义服务器的实例中会有一个被选定为主控服务器。主控服务器将会监控“参与主机
列表”中所列出的主机，并且为每个成员分配工作。当make运行时，如果--jobs标记
的值大于1，make将会联络主控服务器，在网络中可用的各个主机上衍生出多个工作来。
自定义程序库具有广泛的功能：它可以让主机按照硬件结构分组以及按照效能分级：它
可以根据属性和布尔运算符的组合，将任意属性指派给这些主机，并将工作分配给这些
主机，此外，处理工作的时候，它还可以将闲置时间、可用的磁盘空间、可用的交换空
间以及当前的平均负载等主机状态纳人考虑。
如果你的项目是以C、C++或Objective-C实现的，而你想把编译的工作分布到多台机器
上进行，你还应该考虑distcc（http://distcc.samba.org）。distcc的作者为Martin
Pool，目的在于加快Samba的编译速度。对以C、C++或Objective-C编写而成的项目
来说，aistcc是一个健全而完整的解决方案。要使用这个工具，只要把C编译器替换
成distcc程序即可：
$make--jobe=8cC=distcc
对每一个编译工作来说，distcc会使用本地编译器对输出进行预处理，然后将已扩展
的源代码送往一个可利用的远程机器进行编译。最后，远程主机会将所产生的目标文件
返回主控服务器。这个做法可移除使用共享文件系统的必要性，这大大简化了安装与配
置的工作。
“参与主机列表”的指定方式有好几种。最简单的方式，就是在你启动distcc之前，先
在环境变量中列出参与工作的主机：
Sexport DIsTCc_HOSTS='localhost wasatch oops
distcc相当好设定，它具有选项可用来操作主机列表、集成固有的编译器、管理压缩、
搜索路径以及处理失败和恢复。
ccache是另一个可以改进编译效能的工具，它的作者是Samba项目负责人Andrew
Tridgel。它的做法很简单，就是把先前的编译结果放人高速缓存，在执行编译工作之前，
检查高速缓存中是否包含先前所产生的目标文件。这并不需要多台主机或通过网络。作
者说这么做可让一般的编译工作加快5到10倍。使用ccache的最简单方法，就是为你
的编译器命令前缀ccache：
Smake CC='ccache gcc'
ccache与distcc并用，对效能将会有更大的提高。此外，你可以在Cygwin的工具列
表中找到这两个工具。
---
## Page 218
第十一章
makefile实例
本书之前所提供的都是makefile的工业级技巧，相当适合应用在你的大多数的高端需要
上。不过，仍然值得我们花些时间来查看若干makefile实例，看看在提交压力的状况下，
人们会使用make做哪些事情。接下来，我们将会探讨若干makefile实例的细节。第一
个实例是用来编译本书的makefile、第二个实例就是用来编译2.6.7版Linux内核的
makefile.
本书的makefile
在编译系统中，编写一本关于程序设计的书，本身就是一个有趣的练习。一本书的内容
由许多文件组成，每个文件都需要各种的预处理步骤。例如，应该运行哪些程序以及对
它们的输出进行收集、后处理、纳人正文的动作（所以你不必对它们进行剪贴的动作，
也不会因为一时疏忽而发生错误）。写作期间，能够以不同的格式来查看正文，对你会
有莫大的帮助。最后，必须把所要提交的东西封装起来。当然，以上这些动作都必须可
以重复进行，而且必须很容易维护。
这听起来就像是一个make可以处理的工作！这是make极佳的-个用途。make可应用
在各种让人意想不到的问题上。本书在编写时采用的是DocBook（即XML）格式。将
make应用在TeX、LATEX或troff等工具上是一个标准程序。
例11-1所示为本书的完整makefile，大约有440行。这个makefile可以划分成以下几个
基本工作：
·管理范例
·
对XML进行预处理
208
---
## Page 219
makefile实例
209
产生各种输出格式
确认源文件
.
进行基本的维护
例11-1：用来编译本书的makefile
#编译本书！
#
#以下是这个文件中的主要工作目标：
#
#show_pdf
产生pdf以及启动浏览器
Jpd#
产生pdf
print
输出pdf
#show_html
产生htm以及启动浏览器
#html
产生html
#xm1
产生xml
#release
制作发行版tarball
#clean
清除所产生的文件
#
BOOK_DIR
:=/test/book
SOURCE_DIR
:=text
OUTPUT_DIR
:=out
EXAMPLES_DIR := examples
QUIET
=@
SHELL
=
bash
AWK
:=awk
CP
:=cp
EGREP
:=egrep
:=cygstart
KILL
:=/bin/kil1
M4
:=m4
AW
:=mv
PDF_VIEWER
:=cygstart
RM
:=rm-f
MKDIR
:=mkdir
-P
LNDIR
:=lndir
SED
:=sed
SORT
:=sort
TOUCH
:=touch
XMLTO
：=xmlto
XMLTO_FLAGS
-O $（OUTPUT_DIR）S(XML_VERBOSE)
process-pgm
:=bin/process-includes
make-depend
:=bin/make-depend
m4-macros
:=text/macros.m4
S（call process-includes,input-file,output-file)
移除跳格符、扩展宏以及处理引人文件
define process-includes
---
## Page 220
210
expand s11
$（process-pgm）>$2
endef
#$（call file-exists,file-name)
如果文件存在，则返回非空值
file-exists =S（wildcard $1)
#$（call maybe-mkdir，
directory-name-opt)
如果目录不存在，则创建该目录
如果省略directory-name-opt，则以$@为目录名称
maybe-mkdir=S（if $(call file-exists,
s（if $1,s1,s（dir s@)))
S(MKDIR）S（if $1,S1,$(dir S@））)
#$（kill-acroread)
终止acrobat阅读程序
define kill-acroread
S（QUIET）pS
-W1
S(AWK)
/AcroRd32/（
print "Killing "$S3;
endef
#S(call source-to-output，
file-name)
将“源文件树引用”转换成“输出文件树引用”
define source-to-output
$（Subst$（SOURCE_DIR),S（OUTPUT_DIR）,S1)
endef
#$(callrun-script-example,script-name,output-file)
运行一个范例makefile。
define run-script-example
（cd s（dir S1）;
$（notdir $1）2>&11
if S（EGREP）--silent\SS\（MAKE\)·[mM]akefile;
then
$(SED)
./Ss/++/s，a-
else
$(SED)
./ss/++/s.a-
-e/ing directory/d
.//[\[6-0]]\/,-
fi）
>S（TMP)/out.SSSS&
$（MV）$（TMP)/out.SSSS $2
endef
#$(call generic-program-example,example-directory)
建立规则以便编译
一个通用范例
define generic-program-example
S（eval $1_dir
：=$（OUTPUT_DIR)/$1)
---
## Page 221
makefile实例
211
S（eval $1_make_out:=$（S1_dir）/make.out）
$（eval $1_run_out:=$($1_dir)/run.out)
$（eval $1_clean:=$（$1_dir)/clean）
$（eval $1_run_make := S（$1_dir)/run-make)
$（eval S1_run_run:= $（$1_dir)/run-run)
S（eval $1_sources := S（fi1ter-out 8/CVS,$(wildcard $（EXAMPLES_DIR)/S1/*)))
$（$1_run_out）:$（S1_make_out）s（s1_run_run)
$$(call run-script-example,$($1_run_run).ss@)
$（S1_make_out）:$（$1_clean)s（$1_run_make)
SS（call run-script-example,$（$1_run_make),$s@)
S($1_clean):$(S1_sources)Makefile
$（RM)-r S(S1_dir)
$（MKDIR)S（S1_dir)
$(LNDIR)-silent../../S（EXAMPLES_DIR)/S1 S(S1_dir)
S(TOUCH) S$@
$（S1_run_make):
printf"#!/bin/bash -x\nmake\n*>$S@
endef
#本书的输出格式
BOOK_XML_OUT
：=$（OUTPUT_DIR)/book.xm1
BOOK_HTML_OUT
：=$（subst xml,html,$（BOOK_XML_OUT））
BOOK_FO_OUT
：=S（subst xml,fo,S（BOOK_XML_OUT)）
BOOK_PDF_OUT
：=$（subst xm1,pdf，S（BOOK_XML_OUT）)
ALL_XML_SRC