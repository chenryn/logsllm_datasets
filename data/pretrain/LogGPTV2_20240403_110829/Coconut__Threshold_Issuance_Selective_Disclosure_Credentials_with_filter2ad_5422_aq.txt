Pointcheval and Sanders [43] and Boneh et al. [10]; expressing
h(cid:48) = g ˜r
1 | ˜r ∈ Fp, the left-hand side of the pairing veriﬁcation
can be expanded as:
(cid:48)
(cid:48)
, g(x+my+r)
) = e(g1, g2)(x+my+r)˜r
e(h
, κ) = e(h
2
and the right-hand side:
(cid:48)
e(s
ν, g2) = e(h
(cid:48)(x+my+r), g2) = e(g1, g2)(x+my+r)˜r
From where the correctness of VerifyCred follows.
c) Security: The proof system we require is based on
standard sigma protocols to show knowledge of representation
of discrete logarithms, and can be rendered non-interactive
using the Fiat-Shamir heuristic [23] in the random oracle
model. As our signature scheme is derived from the ones due
to Pointcheval and Sanders [43] and BLS [10], we inherit their
assumptions as well; namely, LRSW [37] and XDH [10].
Theorem 1. Assuming LRSW, XDH, and the existence of
random oracles, Coconut is a secure threshold credentials
scheme, meaning it satisﬁes unforgeability (as long as fewer
than t authorities collude), blindness, and unlinkability.
A sketch of this proof, based on the security of the underlying
components of Coconut, can be found in Appendix A. Coconut
guarantees unforgeability as long as less than t authorities
collude (t > n/2), and guarantees blindness and unlinkability
no matter how many authorities collude (and even if the veriﬁer
colludes with the authorities).
E. Multi-Attribute Credentials
We expand our scheme to embed multiple attributes into
a single credential without increasing its size; this generaliza-