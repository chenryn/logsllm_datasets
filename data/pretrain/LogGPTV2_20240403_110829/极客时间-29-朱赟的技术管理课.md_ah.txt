## 数据库锁数据库会出现 Race Condition，我们常常把 Race Condition叫做竞争条件，是指多个进程或者线程并发访问和操作同一数据，且执行结果与访问发生的特定顺序有关的现象。如何解决竞争条件（ Race Condition）呢？常见的方法是使用各种锁机制来确保行为的可预测性和正确性。根据实际情况的不同，加锁的方式会不一样。常见的有乐观锁定（ Optimistic Locking ）和悲观锁定（ PessimisticLocking）。总的说来，前者在对性能要求比较高的系统里更为常见。在实际应用中，很多系统都会自己实现锁定（Locking ）机制。
## 缓存和主从机制为了提高性能，我们会为数据库增加缓存（ Caching ）和主从（ Master - Slave）等机制，这有时候会引起数据的不一致性。常见的情况是，如果系统默认是在从节点（Slave ）读数据，那么一些刚刚更新到主节点（ Master）的数据在读的时候就有可能读不到。这个情况在使用一些数据关联（Association）的时候更容易读不到。Rails 的 Active Record 数据关联（Association），就很容易出现这一类的问题。今天跟大家介绍了不少数据库相关的基础知识，如果你是个软件工程师，想必这些内容都已经耳熟能详，我们来总结一下。1.  本文从 MySQL 和 PostgreSQL    的迁移和选型入手，介绍了数据库的技术特点和选型问题。在我眼里，没有更好的技术，只有更适合的技术。2.  数据库领域会碰到哪些问题呢？我为大家介绍了数据库选择、数据库相关的架构问题、人为失误的问题，还有数据库遭遇流量瓶颈以及相关的应对方式。3.  几乎每个工程师在编程的时候都会和数据库打交道，研发过程中我们应该注意什么问题呢？在这个章节我们讲了索引、事务支持、数据库锁、缓存和主从机制。文中每个点都可以深入展开，独自梳理，最终形成系统的知识储备。因为篇幅所限，不能涉及所有的技术细节，文中提到的内容都是我在工作中遇到过的问题和实战经验，希望对你有帮助。如果你有不同的想法，更好的观点，请在留言中告诉我，互通有无，一起成长。参考链接：\![](Images/9646a8154f57432904b0215eacaebe87.png){savepage-src="https://static001.geekbang.org/resource/image/7f/01/7f0faa67e327efd58c80c7411a54b201.jpg"}戳此获取你的专属海报](https://time.geekbang.org/activity/sale-poster?utm_source=app&utm_medium=zhuyun-article&utm_campaign=zhuyun-saleposter&utm_content=zhuyun0416)
# 13 \| 管理者在进行工作分配时，会考虑哪些问题？作为技术管理者，我们的主要职责之一就是将工作进行分解和授权。那么，在这个过程中，是否有一些需要注意的事项呢？对于不同的工作类型和工作场景而言，这个问题的答案自然也不尽相同，但总有一些共性的东西可以抽象出来，供我们参考。今天我就和你聊一聊：管理者在进行工作分配的时候，需要注意的问题。一般情况下，管理者会倾向于把重要、困难的工作交给自己信任的人。这种信任，包含了对他了解的程度，对其工作态度和能力水平的肯定，也就是说，你需要作出判断：接到任务的人，到底能不能全力以赴把事情做到最好。然而，"冰冻三尺非一日之寒"，信任并不是短期内便能够建立起来的。**那么，在没有建立起充分信任的情况下，我们该如何分配工作呢？**
### 第一点：建立参考基线当和一个人没有任何直接接触的时候，我们可以通过第三方评价、个人履历以及该员工做过的项目或产品来衡量他的能力。如果我们对该员工做过的项目有所了解，或者他得到了曾经与之共事过人的大力推荐，那么我们就可以建立起一个初步的参考基线，用来评估他是否是完成当前任务的最佳人选。``{=html}
### 第二点：问对问题比正确答案更重要把任务交到员工手里之前，要和他进行充分的沟通。告诉他任务的详细情形，看他会问出什么样的问题，提出哪些想法。这些也是评估一个人能否胜任工作的重要标准，问对问题，有时候比给出正确答案更重要。沟通的时候，要看他的问题和想法是否会尽可能考虑所有的情况，问问题和提想法之前是会去调研，还是直接去做一些想当然的假定。在你给出反馈意见或指导性建议之后，他的反馈是什么，又会问出什么样的问题，提出哪些想法......这些都能帮助我们进一步评估他是不是真的了解任务的状况，有没有综合去考虑任务中的问题。