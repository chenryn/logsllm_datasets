Knowledge Discovery and Data Mining, pages 1755–1764,
2016.
[53] Emaad Manzoor, Sadegh M Milajerdi, and Leman Akoglu.
Fast Memory-efﬁcient Anomaly Detection in Streaming Het-
erogeneous Graphs. In SIGKDD, pages 1035–1044, New York,
New York, USA, 2016. ACM Press.
[54] Hossein Maserrat and Jian Pei. Neighbor query friendly com-
pression of social networks. In Proceedings of the 16th ACM
SIGKDD international conference on Knowledge discovery
and data mining, pages 533–542, 2010.
[55] Microsoft.
Event tracing for windows (etw).
https:
//docs.microsoft.com/en-us/windows-hardware/
drivers/devtest/event-tracing-for-windows--etw-,
2017.
[56] Sadegh M Milajerdi, Birhanu Eshete, Rigel Gjomemo, and
Venkat N Venkatakrishnan. Propatrol: Attack investigation
via extracted high-level tasks. In International Conference on
Information Systems Security, pages 107–126. Springer, 2018.
[57] Sadegh M Milajerdi, Birhanu Eshete, Rigel Gjomemo, and
VN Venkatakrishnan. Poirot: Aligning attack behavior with
kernel audit records for cyber threat hunting. In Proceedings
of the 2019 ACM SIGSAC Conference on Computer and Com-
munications Security, pages 1795–1812, 2019.
[58] Sadegh M Milajerdi, Rigel Gjomemo, Birhanu Eshete, R Sekar,
and VN Venkatakrishnan. Holmes: real-time apt detection
through correlation of suspicious information ﬂows. In 2019
IEEE Symposium on Security and Privacy (SP), pages 1137–
1152. IEEE, 2019.
[59] Jeffrey Mogul, Balachander Krishnamurthy, Fred Douglis,
Anja Feldmann, Yaron Goland, Arthur van Hoff, and D Heller-
stein. Delta encoding in http. IETF, Gennaio, 65, 2002.
[60] Hung Nguyen, Radoslav Ivanov, Linh TX Phan, Oleg Sokol-
sky, James Weimer, and Insup Lee. Logsafe: secure and scal-
able data logger for iot devices. In 2018 IEEE/ACM Third
International Conference on Internet-of-Things Design and
Implementation (IoTDI), pages 141–152. IEEE, 2018.
[61] Patrick E O’Neil. Model 204 architecture and performance.
In International Workshop on High Performance Transaction
Systems, pages 39–59. Springer, 1987.
[62] Alina Oprea, Zhou Li, Robin Norris, and Kevin Bowers. Made:
Security analytics for enterprise threat detection. In Proceed-
ings of the 34th Annual Computer Security Applications Con-
ference, pages 124–136, 2018.
[63] Alina Oprea, Zhou Li, Ting-Fang Yen, Sang H Chin, and
Sumayah Alrwais. Detection of early-stage enterprise infec-
In 2015 45th Annual
tion by mining large-scale log data.
IEEE/IFIP International Conference on Dependable Systems
and Networks, pages 45–56. IEEE, 2015.
[64] Riccardo Paccagnella, Pubali Datta, Wajih Ul Hassan, Adam
Bates, Christopher W Fletcher, Andrew Miller, and Dave Tian.
Custos: Practical tamper-evident auditing of operating systems
using trusted execution. In Proc. of the Symposium on Network
and Distributed System Security (NDSS), 2020.
[65] Thomas Pasquier, Xueyuan Han, Mark Goldstein, Thomas
Moyer, David Eyers, Margo Seltzer, and Jean Bacon. Practical
whole-system provenance capture. In Proceedings of the 2017
Symposium on Cloud Computing, pages 405–418, 2017.
[66] Thomas Pasquier, Xueyuan Han, Thomas Moyer, Adam Bates,
Olivier Hermant, David Eyers, Jean Bacon, and Margo Seltzer.
Runtime analysis of whole-system provenance. In Proceed-
ings of the 2018 ACM SIGSAC Conference on Computer and
Communications Security, pages 1601–1616, 2018.
[67] Kexin Pei, Zhongshu Gu, Brendan Saltaformaggio, Shiqing
Ma, Fei Wang, Zhiwei Zhang, Luo Si, Xiangyu Zhang, and
Dongyan Xu. Hercule: Attack story reconstruction via commu-
nity discovery on correlated log graph. In Proceedings of the
32Nd Annual Conference on Computer Security Applications,
pages 583–595, 2016.
[68] Vijayshankar Raman and Garret Swart. How to wring a table
dry: Entropy compression of relations and querying of com-
pressed relations. In Proceedings of the 32nd international
conference on Very large data bases, pages 858–869, 2006.
[69] Redhat.
Chapter 7.
system auditing.
https:
//access.redhat.com/documentation/en-us/red_
hat_enterprise_linux/6/html/security_guide/
chap-system_auditing, 2019.
[70] Omid Setayeshfar, Christian Adkins, Matthew Jones,
Kyu Hyung Lee, and Prashant Doshi. Graalf: Supporting
graphical analysis of audit logs for forensics. arXiv preprint
arXiv:1909.00902, 2019.
[71] Carlton Shepherd, Raja Naeem Akram, and Konstantinos
Markantonakis. Emlog: tamper-resistant system logging for
In IFIP International Con-
constrained devices with tees.
ference on Information Security Theory and Practice, pages
75–92. Springer, 2017.
[72] Xiaokui Shu, Frederico Araujo, Douglas L Schales, Marc Ph
Stoecklin, Jiyong Jang, Heqing Huang, and Josyula R Rao.
Threat intelligence computing. In Proceedings of the 2018
ACM SIGSAC Conference on Computer and Communications
Security, pages 1883–1898, 2018.
3002    30th USENIX Security Symposium
USENIX Association
[73] Sriranjani Sitaraman and Subbarayan Venkatesan. Forensic
analysis of ﬁle system intrusions using improved backtrack-
ing. In Third IEEE international workshop on information
assurance (IWIA’05), pages 154–163. IEEE, 2005.
[74] Michał Stabno and Robert Wrembel. Rlh: Bitmap compres-
sion technique based on run-length and huffman encoding.
Information Systems, 34(4-5):400–414, 2009.
[75] Mike Stonebraker, Daniel J Abadi, Adam Batkin, Xuedong
Chen, Mitch Cherniack, Miguel Ferreira, Edmond Lau, Amer-
son Lin, Sam Madden, Elizabeth O’Neil, et al. C-store: a
column-oriented dbms. In Making Databases Work: the Prag-
matic Wisdom of Michael Stonebraker, pages 491–518. 2018.
[76] Yujuan Tan, Hong Jiang, Dan Feng, Lei Tian, and Zhichao
Yan. Cabdedupe: A causality-based deduplication perfor-
mance booster for cloud backup services. In 2011 IEEE inter-
national parallel & distributed processing symposium, pages
1266–1277. IEEE, 2011.
[77] Yutao Tang, Ding Li, Zhichun Li, Mu Zhang, Kangkook Jee,
Xusheng Xiao, Zhenyu Wu, Junghwan Rhee, Fengyuan Xu, and
Qun Li. Nodemerge: template based efﬁcient data reduction
for big-data causality analysis. In Proceedings of the 2018
ACM SIGSAC Conference on Computer and Communications
Security, pages 1324–1337. ACM, 2018.
[78] Trustwave. Trustwave global security report, 2015.
[79] J Uthayakumar, T Vengattaraman, and P Dhavachelvan. A
survey on data compression techniques: From the perspective
of data quality, coding schemes, data type and applications.
Journal of King Saud University-Computer and Information
Sciences, 2018.
[80] Phani Vadrevu, Jienan Liu, Bo Li, Babak Rahbarinia,
Kyu Hyung Lee, and Roberto Perdisci. Enabling reconstruc-
tion of attacks on users via efﬁcient browsing snapshots. In
NDSS, 2017.
[81] Fei Wang, Yonghwi Kwon, Shiqing Ma, Xiangyu Zhang, and
Dongyan Xu. Lprov: Practical library-aware provenance trac-
ing. In Proceedings of the 34th Annual Computer Security
Applications Conference, pages 605–617, 2018.
[82] Kesheng Wu, Ekow J Otoo, and Arie Shoshani. Optimizing
bitmap indices with efﬁcient compression. ACM Transactions
on Database Systems (TODS), 31(1):1–38, 2006.
[83] Zhang Xu, Zhenyu Wu, Zhichun Li, Kangkook Jee, Junghwan
Rhee, Xusheng Xiao, Fengyuan Xu, Haining Wang, and Guofei
Jiang. High ﬁdelity data reduction for big data security de-
pendency analyses. In Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security, pages
504–516. ACM, 2016.
[84] Ting-Fang Yen, Alina Oprea, Kaan Onarlioglu, Todd Leetham,
William Robertson, Ari Juels, and Engin Kirda. Beehive: Large-
scale log analysis for detecting suspicious activity in enterprise
networks. In Proceedings of the 29th Annual Computer Secu-
rity Applications Conference, pages 199–208, 2013.
A Compression Ratio as a function of Average
Degrees
In this section, we derive explicit expressions for the compres-
sion ratio. We show that the compressed graph size is always
smaller than the original size, though new vertices might be
introduced.
In a dependency graph G = (V,E), the number of vertices
(nodes) is denoted by n = |V|, and the number of edges is
denoted by m = |E|. Recall that the edges are directed and
multiple edges (repeated edges) may exist from one node to
another. For node v ∈ V , let its number of parent nodes be
pv, and its number of incoming edges be mv. We have m =
∑v∈V mv. Moreover, denote by p = ∑v∈V pv the total number
of parent nodes for all nodes in V . Therefore, p represents
the number of edges of G after removing repeated ones. Let
Gundirected denote the undirected graph which is identical to
G except that edge directions are removed. Let Gsimple denote
the simple graph obtained by removing the edge directions
and the repeated edges from G. The average degree of the
graph Gundirected is denoted by davg. Then,
2∑v∈V mv
davg =
2m
n =
.
n
(4)
The average degree of Gsimple is denoted by pavg, which is
pavg =
2p
n =
2∑v∈V pv
n
.
(5)
Denote by Sevent, Snode the event and node sizes before
node the sizes after compression.
event, S(cid:48)
compression, and by S(cid:48)
They can be calculated by
Sevent = ∑
v∈V
S(cid:48)
event = ∑
mvCevent ,
(cid:16)
v∈V :mv>1
Snode = nCnode,
S(cid:48)
node = nCnode + size_map.
Cevent + 2mvC∆
(cid:17)
(6)
+ ∑
v∈V :mv=1
Cevent ,
(7)
(8)
(9)
Here Cevent = 105 (measured in bytes) is the size of all at-
tributes of an event in the uncompressed format. In our
database, Cevent includes the sizes of starttime , endtime,
agentid, etc. C∆ is the delta-encoded data and separator size
for each time entry, and the factor 2 reﬂects that two time at-
tributes are recorded for every event. For most of the cases we
have observed, C∆ ≤ 4 bytes. Cnode is the size of one node en-
try in the uncompressed format, including the size of nodeid,
nodename, etc. Finally, size_map is the node map shown in
table 2, and can be expressed as
size_map = ∑
v∈V
CID(pv + 1).
(10)
Here CID = 4 is the constant size required for each nodeid.
The above size parameters depend on the particular database
USENIX Association
30th USENIX Security Symposium    3003
attributes, and to allow for an arbitrary database design, we
use the general expressions instead of the particular sizes. In
our experiments, Snode and S(cid:48)
node take a negligible fraction of
the total storage. As a result, we ignore the node sizes in the
following calculations. However, an exact calculation can be
carried out if the node size is comparable to the event size.
The difference between the original size and the com-
pressed size is:
(cid:16)
event
Sevent − S(cid:48)
= ∑
v∈V :mv>1
mv(Cevent − 2C∆)−Cevent
(cid:17)
.
(11)
(12)
It is obvious that the compressed size is always smaller than
the original size if Cevent > 2C∆, which is true in our deploy-
ment. The compression ratio can be expressed as
ratio =
≥
=
=
Sevent
S(cid:48)
event
(cid:16)
∑v∈V mvCevent
∑v∈V
Cevent + 2mvC∆
mCevent
nCevent + 2mC∆
davgCevent
2Cevent + 2davgC∆
(cid:17)
(13)
(14)
(15)
(16)
B Average Degree Estimator Evaluation
We measure the performance of the compression ratio (or
average degree) estimator on our dataset following Algorithm
2. We run the algorithm on 8 chunks, each containing 106
events. For each chunk, 20 independent trials are conducted.
The parameters are chosen to be θ = 10, p jump = 0.1, such
that the estimation error is minimized for the chunks in the
experiment. We measure the mean squared error (MSE) be-
tween the estimated average degree ˆd and the true average
degree davg, averaged over all trials and all chunks in the ex-
periment. The results are shown in Figure 10. The MSE value
has an obvious drop as the sample size percentage grows up
to 5% and quickly converges when the samples cover half of
the whole trunk. We then set 5% as the sample size.
Figure 10 also shows that our method has better accuracy
compared to the naive estimator, which estimates davg by
directly calculating the average degrees of uniformly sampled
nodes.
Equation (14) holds because we remove the condition mv > 1
in the denominator, and thus we obtain a lower bound on the
ratio. In Equation (16) we multiply the numerator and the
denominator by 2
n and used Equation (4). If the node size is
also included, the ratio will also depend on pavg deﬁned in
Equation (5).
Remark. 1) Let us call the dependency graph “incompress-
ible” if its compression ratio is lower than a given threshold.
It is often unacceptable to compress graphs that are incom-
pressible. Therefore, our estimated compression ratio is a
lower bound of the exact ratio (e.g., the inequality of Equa-
tion (14)). 2) The discussion in Section 3.6 assumes that the
node map size is negligible. If it is not, we also need to esti-
mate pavg. Note that pavg corresponds to the average degree
of the simple graph Gsimple, one can simply apply Algorithm
2 to H = Gsimple.
Figure 10: The y axis is the mean square error distance be-
tween the estimated average degree from the sampled data
and the true average degree, averaged over all trials and all
chunks in the experiment. The x axis is the percentage of the
sample.
3004    30th USENIX Security Symposium
USENIX Association
0%10%20%30%40%50%Sample Percentage101102103104MSEProposed EstimatorNaive Estimator