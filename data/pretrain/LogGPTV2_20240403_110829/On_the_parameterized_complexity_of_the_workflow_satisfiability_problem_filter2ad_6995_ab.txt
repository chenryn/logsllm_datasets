### 1. Constraints and Authorization
When defining constraints, we will use the notation \((\rho, s, S)\), where \(S\) is a set with a cardinality greater than or equal to 1, and \(s\) is an element of \(S\) with a cardinality of 1. This ensures that the set with higher cardinality follows the set with a single element.

In practice, the set of authorized step-user pairs, denoted as \(A\), is not explicitly defined. Instead, \(A\) is inferred from other access control data structures. For instance, in the role-and-relation-based access control model (R2BAC) by Wang and Li [17], there are sets of roles \(R\), a user-role relation \(UR \subseteq U \times R\), and a role-step relation \(SA \subseteq R \times S\). From these, it is possible to derive the steps for which users are authorized. For most common access control policies, including R2BAC, deriving \(A\) is straightforward. We use \(A\) to simplify the exposition.

### 2. Workflow Satisfiability Problem (WSP)
A plan \(\pi\) satisfies the constraint \((\rho=, s, s')\) if the same user is assigned to both steps \(s\) and \(s'\) by \(\pi\). Conversely, \(\pi\) satisfies \((\rho \neq, s, s')\) if different users are assigned to \(s\) and \(s'\). These constraints represent binding-of-duty and separation-of-duty, respectively. For readability, we will use \(=\) and \(\neq\) instead of \(\rho=\) and \(\rho \neq\).

The constraint \((\neq, s, S)\) is satisfied by \(\pi\) if there is some step in \(S\) to which a user other than the one who performed step \(s\) is assigned.

We can now define the Workflow Satisfiability Problem (WSP) as follows:

**Workflow Satisfiability Problem (WSP)**
- **Input:** A constrained workflow authorization schema \((S, U, \prec, A, C)\).
- **Output:** A valid plan \(\pi: S \to U\) or a determination that no valid plan exists.

Note that this definition does not consider the ordering of steps. The original definition by Crampton [5] required an algorithm to output an execution schedule (a topological sort of \((S, \prec)\)) in addition to a valid plan. For consistency with Wang and Li's work on fixed parameter tractability, we defer discussion of Crampton’s version until Section 5. We will denote a special case of WSP with all constraints of the form \((\rho_i, s, S)\) or \((\rho_i, S, s)\) as WSP\((\rho_1, \ldots, \rho_t)\).

### 3. Organizational Constraints
Crampton [5, § 2] and Wang and Li [17, Examples 1, 2] have noted that a practical constraint is that users performing two steps must be from the same department. In our example (Figure 1), we might require that the users performing steps \(s_3\) and \(s_5\) belong to the same department, but still be different individuals. Similarly, we might want the user approving the purchase order (step \(s_2\)) to be from the same department as the user creating the order (step \(s_1\)).

In such cases, auxiliary information defines an equivalence relation on the set of users (e.g., department membership), and we may require that two steps are performed by users in the same or different departments. We introduce two relations to model organizational structures, where users are partitioned into different units like departments.

An equivalence relation \(\sim\) on a set \(X\) induces a partition of \(X\) into equivalence classes, and vice versa. Given an equivalence relation on \(U\), \(\sim\) in a constraint indicates that two users must belong to the same class, while \(\not\sim\) indicates they must belong to different classes. For example, \((\sim, s_3, s_5)\) requires that the signing and countersigning of the goods received note be performed by users in the same department.

### 3.1 Organizational Hierarchies
We can use multiple partitions to define an organizational hierarchy. In Section 4.4, we describe a fixed-parameter tractable algorithm to solve WSP with such constraints.

**Definition 5.** Let \((X_1, \ldots, X_p)\) and \((Y_1, \ldots, Y_q)\) be \(p\)- and \(q\)-partitions of the same set. \((Y_1, \ldots, Y_q)\) is a refinement of \((X_1, \ldots, X_p)\) if for each \(i \in [q]\), there exists \(j \in [p]\) such that \(Y_i \subseteq X_j\).

**Definition 6.** An organizational \(\ell\)-hierarchy is a collection of \(\ell\) partitions of \(U\), \(U^{(1)}, \ldots, U^{(\ell)}\), where \(U^{(i)}\) is a refinement of \(U^{(i+1)}\). The \(i\)-th partition is the \(i\)-th level of the hierarchy, and each member of \(U^{(i)}\) is a subset of \(U\); we write \(u^{(i)}\) to denote a block in the \(i\)-th level.

A constraint \((\sim_i, s_1, s_2)\) is satisfied by \(\pi\) if \(\pi(s_1), \pi(s_2) \in u^{(i)}\) for some \(u^{(i)} \in U^{(i)}\). We can also define a constraint \((\neq, s_1, s_2)\) requiring that \(s_1\) and \(s_2\) are performed by different users.

More generally, a constraint \((\sim_i, S_1, S_2)\) is satisfied by \(\pi\) if there exist \(s_1 \in S_1\) and \(s_2 \in S_2\) such that \(\pi(s_1)\) and \(\pi(s_2)\) belong to the same block in \(U^{(i)}\). A constraint \((\not\sim_i, S_1, S_2)\) is satisfied if there exist \(s_1 \in S_1\) and \(s_2 \in S_2\) such that \(\pi(s_1)\) and \(\pi(s_2)\) belong to different blocks in \(U^{(i)}\). If \(\pi\) satisfies \((\sim_i, S_1, S_2)\), then it satisfies \((\sim_j, S_1, S_2)\) for all \(j > i\). Conversely, if \(\pi\) satisfies \((\not\sim_i, S_1, S_2)\), then it also satisfies \((\not\sim_j, S_1, S_2)\) for all \(j < i\).

We assume without loss of generality that for each \(S_1, S_2 \subseteq S\), there is at most one constraint of the form \((\sim_i, S_1, S_2)\) and at most one constraint of the form \((\not\sim_j, S_1, S_2)\).

**Definition 7.** A hierarchy \(H = U^{(1)}, \ldots, U^{(\ell)}\) is canonical if:
1. \(U^{(i)} \neq U^{(i+1)}\),
2. \(U^{(\ell)}\) is a 1-partition containing the set \(U\),
3. \(U^{(1)}\) is an \(n\)-partition containing every singleton set from \(U\).

To convert a hierarchy into a canonical hierarchy, we perform the following operations:
- Remove duplicate levels.
- Add a 1-partition (top level) and an \(n\)-partition (bottom level) if necessary.
- Adjust the constraints accordingly.

The conversion can be performed in \(O(\ell n + c)\) time, where \(\ell\) is the number of levels, \(n\) is the number of users, and \(c\) is the number of constraints. The resulting canonical hierarchy has no more than \(\ell + 2\) levels.

### 3.2 Organizational Hierarchies from Management Structures
We illustrate how organizational hierarchies can be constructed from management structures. Given a set of users \(U\), we assume an organization defines a hierarchical binary relation \(\leq\) on \(U\) to specify management responsibilities and reporting lines. The Hasse diagram of \((U, \leq)\) is a directed tree where non-leaf nodes represent managers, and edges are directed from root to leaf nodes. Let \(G_{\text{man}} = (U, E_{\text{man}})\) denote the Hasse diagram. Each non-leaf node has an out-degree of at least two, and no user has more than one manager.

To derive an organizational hierarchy from a management tree, we iteratively construct management trees with fewer nodes:
1. Identify sub-trees with a single non-leaf node.
2. Form a single leaf node for each sub-tree, labeled with the labels of the respective leaf nodes.
3. Form a single node for each resulting sub-tree, labeled with the labels of the child and parent nodes.

This process continues until we have a tree with a single node. The procedure is illustrated in Figure 3, showing a sequence of trees starting with the management tree where each node is labeled with a single user.