# A Dozen Years of Shellphish: From DEFCON to the Cyber Grand Challenge

**University of California, Santa Barbara**  
**HITCON Enterprise**  
**August 27th, 2015**

**Presenter: Antonio Bianchi**  
**Contact: PI:EMAIL**

---

## Agenda
- **Shellphish**
- **The DARPA Cyber Grand Challenge**
- **Shellphish’s Cyber Reasoning System**
- **Automatic Vulnerability Discovery**
  - **Angr → Live Demonstration!**
- **Towards the Cyber Grand Challenge Finals**

---

## Shellphish

### Who We Are
- **Team of Security Enthusiasts:**
  - Conduct research in system security
  - Participate in Capture the Flag (CTF) competitions

### History
- **Founded in 2004 at:**
  - **SecLab, University of California, Santa Barbara**
- **Expanded to:**
  - Northeastern University, Boston
  - Eurecom, France
  - And more...

### CTF Competitions
- **Security Competitions:**
  - Various challenges:
    - Exploit a vulnerable service
    - Exploit a vulnerable website
    - Reverse engineer a binary
  - Different formats:
    - Jeopardy
    - Attack-Defense
    - Online
    - Live

### Organizing CTFs
- **UCSB iCTF:**
  - Attack-Defense format
  - Annual event since 2002
  - References:
    - [http://ictf.cs.ucsb.edu](http://ictf.cs.ucsb.edu)
    - [https://github.com/ucsb-seclab/ictf-framework](https://github.com/ucsb-seclab/ictf-framework)
    - Vigna, et al., "Ten years of ictf: The good, the bad, and the ugly." 3GSE, 2014.

### Learn More
- **Attend the talk by Yan Shoshitaishvili:**
  - Saturday, August 29th (14:20 − 15:10)
  - HITCON Community

---

## The DARPA Cyber Grand Challenge (CGC)

### Overview
- **2004: DARPA Grand Challenge**
  - Autonomous vehicles
- **2014: DARPA Cyber Grand Challenge**
  - Autonomous hacking!

### Timeline
- **Started in 2014**
- **Qualification Event:**
  - June 3rd, 2015, online
  - ~70 teams → 7 qualified teams
- **Final Event:**
  - August 4th, 2016 @ DEFCON (Las Vegas)

### Rules
- **Attack-Defense CTF**
- **No human intervention**
- **System Requirements:**
  - Automatically exploit vulnerabilities in binaries
  - Patch binaries, removing vulnerabilities

### Qualification Event Rules
- **Generate Exploits:**
  - Input to a binary causing it to crash (invalid memory access)
  - Encoded as a list of recv/send/… operations
- **Patch Binaries:**
  - Fix vulnerabilities
  - Preserve original functionality
  - Performance impact evaluated (CPU time, memory consumption, disk space)

### Architecture and Operating System
- **Architecture: Intel x86, 32-bit**
- **Operating System: DECREE**
  - Linux-like
  - 7 syscalls: terminate, transmit, receive, fdwait, allocate, deallocate, random
  - No signal handling, no non-executable stack, no ASLR, etc.
- **DECREE VM:**
  - Standard Linux ELF binaries
  - CGC binaries

---

## Shellphish’s Cyber Reasoning System (CRS)

### Components
- **Vulnerable Binary → Patched Binary**
- **Exploit Generation**
- **Automatic Testing**
- **Automatic Patching**
- **Automatic Vulnerability Finding**

### Workflow
- **Vulnerable Binary**
  - **Proposed Patches**
  - **Proposed Exploits**
- **Cyber Reasoning System**
  - **Automatic Testing**
  - **Automatic Patching**
  - **Automatic Vulnerability Finding**

---

## Automatic Vulnerability Discovery

### Methods
- **Dynamic Analysis/Fuzzing:**
  - How do I trigger the condition: “You win!” is printed?
  - Example code:
    ```python
    x = int(input())
    if x >= 10:
        if x == 10:
            print("You win!")
        else:
            print("You lose!")
    else:
        print("You lose!")
    ```

- **Symbolic Execution:**
  - Interpret binary code using symbolic variables for user input
  - Follow all feasible paths, tracking constraints on variables
  - Concretize constraints to generate inputs

### Use in CGC
- **Symbolic Execution with Angr:**
  - Check for:
    - Memory accesses outside allocated regions
    - Unconstrained instruction pointer (e.g., controlled by user input)
  - Developed at UCSB
  - Open-source: [https://github.com/angr](https://github.com/angr)

### Angr Demonstration
- **CADET_00001: Classic Buffer Overflow**
  - Code snippet:
    ```c
    int check(){
       char string[64];
       receive_delim(0, string, 128, '\n');
       // Check if the string is palindrome
       // ...
       return result;
    }
    ```
  - Python script:
    ```python
    import angr
    p = angr.Project("CADET_00001")
    pg = p.factory.path_group(immutable=False, save_unconstrained=True)
    while len(pg.unconstrained) == 0:
        pg.step()
    crash_state = pg.unconstrained[0].state
    print(crash_state.posix.dumps(0))
    ```

- **Triggering the Easter Egg**
  - Code snippet:
    ```c
    #define EASTEREGG "\n\nEASTER EGG!\n\n"
    if(string[0] == '^'){ 
        transmit_all(1, EASTEREGG, sizeof(EASTEREGG)-1);
    }
    ```
  - Python script:
    ```python
    import angr
    p = angr.Project("CADET_00001")
    pg = p.factory.path_group(immutable=False)
    pg.explore(find=0x804833E)
    print(pg.found[0].state.posix.dumps(0))
    ```

---

## Towards the Cyber Grand Challenge Finals

### Qualification Results
- **7 teams passed the qualification phase**
- **Shellphish is one of them!**
- **Exploited 44 out of 131 binaries**
- **Each qualified team received $750,000**

### Final Event Details
- **Fully Automated System:**
  - No bug fixing after the competition starts
- **Different Rules:**
  - Exploits need to:
    - Set a specific register to a specific value
    - Leak data from a specific memory region
    - Implement more realistic exploits
  - Angr automatic ROP-chain builder
  - Network-level monitoring and defenses

### Resources
- **Cluster Access:**
  - 1280 cores
  - 16 TB of RAM
  - 128 TB of storage

### Prizes
- **First Place: $2,000,000**
- **Second Place: $1,000,000**
- **Third Place: $750,000**
- **Winning Team Competes Against Human Teams at DEFCON CTF Finals**

---

## Shellphish CGC Team

**“That’s all folks!”**  
**Questions?**

**References:**
- [Presentation Slides](http://goo.gl/3ulxRa)
- [Angr GitHub Repository](https://github.com/angr/angr)
- **HITCON Community Talk:**
  - Saturday, August 29th (14:20 − 15:10)
- **Emails:**
  - PI:EMAIL
  - PI:EMAIL