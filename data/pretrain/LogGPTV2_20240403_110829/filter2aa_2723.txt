University of California, Santa Barbara
HITCON Enterprise
August 27th, 2015
A Dozen Years of Shellphish 
From DEFCON to the 
Cyber Grand Challenge
Antonio Bianchi
PI:EMAIL
3
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Agenda
● Shellphish
● The DARPA Cyber Grand Challenge
● Shellphish’s Cyber Reasoning System
● Automatic Vulnerability Discovery
○ Angr →  Live demonstration!
● Towards the Cyber Grand Challenge Finals
4
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Agenda
● Shellphish
● The DARPA Cyber Grand Challenge
● Shellphish’s Cyber Reasoning System
● Automatic Vulnerability Discovery
○ Angr →  Live demonstration!
● Towards the Cyber Grand Challenge Finals
5
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Shellphish
● Who are we?
○ a team of security enthusiasts
■ do research in system security
■ play Capture the Flag competitions
6
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Shellphish
○ Started (in 2004) at:
■ SecLab: University of California, Santa Barbara
7
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Shellphish
○ expanded to:
■ Northeastern University: Boston
■ Eurecom: France
■ ...
8
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
CTF competitions
● Security competitions 
● Different challenges
○ exploit a vulnerable service
○ exploit a vulnerable website
○ reversing a binary
○ …
● Different formats
○ Jeopardy ‒ Attack-Defense
○ Online ‒ Live
9
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Shellphish
10
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Shellphish
○ We do not only play CTFs
○ We also organize them!
■ UCSB iCTF
● Attack-Defense format
● every year, since 2002!
■ References:
● http://ictf.cs.ucsb.edu
●
https://github.com/ucsb-seclab/ictf-framework
●
Vigna, et al., "Ten years of ictf: The good, the bad, 
and the ugly."  3GSE, 2014.
11
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Shellphish
○ If you want to know more about Shellphish:
■ Attend the talk of my “colleague”: 
Yan Shoshitaishvili
■ Saturday, August 29th (14:20 − 15:10)
HITCON Community
12
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Agenda
● Shellphish
● The DARPA Cyber Grand Challenge
● Shellphish’s Cyber Reasoning System
● Automatic Vulnerability Discovery
○ Angr → Live-demonstration!
● Towards the Cyber Grand Challenge Finals
13
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Cyber Grand Challenge (CGC)
● 2004: DARPA Grand Challenge
○ Autonomous vehicles
● 2014: DARPA Cyber Grand Challenge
○ Autonomous hacking!
14
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Cyber Grand Challenge (CGC)
● Started in 2014
● Qualification event: June 3rd, 2015, online
○ ~70 teams → 7 qualified teams
● Final event: August 4th, 2016 @ DEFCON (Las Vegas)
15
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
CGC ‒ Rules
● Attack-Defense CTF
● No human intervention
● Develops a system that automatically
○ Exploit vulnerabilities in binaries
○ Patch binaries, removing the vulnerabilities
16
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
CGC Qualification Event ‒ Rules
● Every team has to:
○ Generate exploits
■ an input to a binary
● the binary crashes (invalid memory access)
● encoded as a list of recv/send/… operations
○ Patch binaries
■ fix the vulnerabilities
■ preserve the original binary’s functionality
■ performance impact is evaluated
● CPU time, memory consumption, disk space
17
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
CGC Qualification Event ‒ Rules
● Architecture: Intel x86, 32bit
● Operating System: DECREE
○ Linux-like
○ only 7 syscalls
■
terminate (exit)
■
transmit (write)
■
receive (read)
■
fdwait (select)
■
allocate (mmap)
■
deallocate (munmap)
■
random
○ no signal handling, no not-executable stack, no ASLR, …
● DECREE VM
○ standard Linux ELF binaries
○ CGC binaries
18
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Agenda
● Shellphish
● The DARPA Cyber Grand Challenge
● Shellphish’s Cyber Reasoning System
● Automatic Vulnerability Discovery
○ Angr →  Live demonstration!
● Towards the Cyber Grand Challenge Finals
19
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Shellphish CRS
vulnerable 
binary
patched 
binary
exploit
Cyber
Reasoning
System
20
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Shellphish CRS
vulnerable
binary
proposed
patches
proposed
exploits
Shellphish CRS
Automatic
Testing
exploit
patched
binary
Automatic
Patching
Automatic
Vulnerability
Finding
Automatic
Vulnerability
Finding
21
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Agenda
● Shellphish
● The DARPA Cyber Grand Challenge
● Shellphish’s Cyber Reasoning System
● Automatic Vulnerability Discovery
○ Angr →  Live demonstration!
● Towards the Cyber Grand Challenge Finals
22
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Automatic Vulnerability Discovery
“How do I crash a binary?”
“How do I trigger a condition X in a binary?”
Dynamic Analysis/Fuzzing
Symbolic Execution
23
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Dynamic Analysis/Fuzzing
● How do I trigger the condition: “You win!” is printed?
x = int(input())
if x >= 10:
if x = 10:
if x = 10:
if x == 123456789012:
print "You win!"
else:
print "You lose!"
else:
print "You lose!"
26
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Symbolic Execution
● Interpret the binary code, using symbolic variables for 
user-input
x = int(input())
if x >= 10:
if x = 10:
if x = 10}
State AB
Variables
x = ???
Constraints
{x = 10:
if x = 10}
State AB
Variables
x = ???
Constraints
{x = 10:
if x = 10}
● Follow all feasible paths, tracking "constraints" on 
variables
30
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Symbolic Execution
x = int(input())
if x >= 10:
if x = 10}
State AAA
Variables
x = ???
Constraints
{x >= 10, x = 10, x >= 100}
● Follow all feasible paths, tracking "constraints" on 
variables
31
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Symbolic Execution
x = int(input())
if x >= 10:
if x = 10, x < 100}
State AAA
Variables
x = 99
Concretization
● Concretize the constraints on the symbolic variables
32
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Symbolic Execution
● How did we use Symbolic Execution for CGC?
● We used the symbolic execution engine of
Angr: a binary analysis platform developed at UCSB
33
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Symbolic Execution
● How did we use Symbolic Execution for CGC?
● Symbolically execute the binaries checking if one of 
these two conditions is true
Memory accesses outside 
allocated regions
“Unconstrained” instruction 
pointer (e.g., controlled by 
user input)
● We used the symbolic execution engine of
Angr: a binary analysis platform developed at UCSB
34
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Symbolic Execution
● How did we use Symbolic Execution for CGC?
● Symbolically execute the binaries checking if one of 
these two conditions is true
Memory accesses outside 
allocated regions
“Unconstrained” instruction 
pointer (e.g., controlled by 
user input)
● We used the symbolic execution engine of Angr:
 the binary analysis platform developed at UCSB
35
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Agenda
● Shellphish
● The DARPA Cyber Grand Challenge
● Shellphish’s Cyber Reasoning System
● Automatic Vulnerability Discovery
○ Angr →  Live demonstration!
● Towards the Cyber Grand Challenge Finals
36
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Angr
● Binary analysis platform,
 developed at UCSB
● Open-source:
https://github.com/angr (please “star” it!)
● Written in Python!
○ installable with one single command!
○ interactive shell (using IPython)
● Architecture independent
○ x86 (ELF, CGC, PE), amd64, mips, mips64, arm, aarch64, 
ppc, ppc64
37
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Angr ‒ Demonstration
● CADET_00001
38
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Angr ‒ Demonstration
● CADET_00001
39
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Angr ‒ Demonstration
int check(){
   char string[64];
   receive_delim(0, string, 128, '\n')
   //check if the string is palindrome
//...
   return result;
}
● CADET_00001: a classic buffer overflow
40
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Angr ‒ Demonstration
import angr
p = angr.Project("CADET_00001")
pg = p.factory.path_group(immutable=False,
save_uncontsrained=True)
while len(pg.unconstrained)==0:
    pg.step()
crash_state = pg.unconstrained[0].state
crash_state.posix.dumps(0)
● CADET_00001: a classic buffer overflow
41
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Angr ‒ Demonstration
#define EASTEREGG "\n\nEASTER EGG!\n\n"
//the “caret” character (“^”) triggers the Easter Egg
if(string[0] == '^'){ 
      transmit_all(1,EASTEREGG, sizeof(EASTEREGG)-1)
}
● CADET_00001: triggering the “Easter Egg”
42
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Angr ‒ Demonstration
● CADET_00001: triggering the “Easter Egg”
43
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Angr ‒ Demonstration
import angr
p = angr.Project("CADET_00001")
pg = p.factory.path_group(immutable=False)
pg.explore(find=0x804833E)
pg.found[0].state.posix.dumps(0)
● CADET_00001: triggering the “Easter Egg”
44
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Agenda
● Shellphish
● The DARPA Cyber Grand Challenge
● Shellphish’s Cyber Reasoning System
● Automatic Vulnerability Discovery
○ Angr →  Live-demonstration!
● Towards the Cyber Grand Challenge Finals
45
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
● 7 teams passed the qualification phase
● Shellphish is one of them! :-)
● We exploited 44 binaries out of 131
● Every qualified team received 750,000$ !
CGC Quals ‒ Results
46
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
CGC Finals
● The system will need to be 100% automated
○ no possibility of bug fixing after competition’s start
● Partially different rules
○ An exploit needs to
■ set a specific register to a specific value
■ leak data from a specific memory region
■ we need to implement more “realistic” exploits
● Angr automatic ROP-chain builder!
○ Network-level monitoring and defenses
47
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
CGC Finals
● Every team will have access 
to a cluster of:
○ 1280 cores
○ 16 TB of RAM
○ 128 TB of storage
48
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
CGC Finals
● Money prices!
○ First place: 2,000,000$
○ Second place: 1,000,000$
○ Third place: 750,000$
● The winning team will compete against human teams at 
DEFCON CTF Finals :-)
49
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
Shellphish CGC Team
50
A Dozen Years of Shellphish – from DEFCON to the Cyber Grand Challenge
“That’s all folks!” 
          Questions?
References:
this presentation: http://goo.gl/3ulxRa
angr: https://github.com/angr/angr
HITCON Community talk: Saturday, August 29th (14:20 − 15:10)
emails: PI:EMAIL ‒ PI:EMAIL