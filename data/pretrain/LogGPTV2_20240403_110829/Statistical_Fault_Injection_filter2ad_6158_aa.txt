# Title: Statistical Fault Injection

## Authors
- Pradeep Ramachandran
- Prabhakar Kudva
- Jeffrey W. Kellington
- John Schumann
- Pia Sanda

## Conference
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27, 2008

## Abstract
A method for statistical fault injection (SFI) into arbitrary latches within a full system hardware-emulated model is validated against particle-beam-accelerated single-event upset (SER) testing for a modern microprocessor. The method, applied to the IBM POWER6 microprocessor, is capable of distinguishing between error handling states associated with the injected bit flip. Methodologies for performing random and targeted fault injection are presented.

**Keywords:** Fault Injection, Soft Errors, SER, SFI

## 1. Introduction
Soft errors in logic are a significant concern in modern VLSI circuits [1]. Recent studies on the IBM POWER6 microprocessor using particle-beam irradiation and full core statistical fault injection (SFI) have shown accurate representation of soft error rates (SER) [3, 15]. These studies demonstrated the remarkable error resiliency of POWER6 by categorizing the outcomes of bit flip events, resulting in over 5,600 fully recovered events, including SRAM array events [18].

This paper presents an SFI tool that uses hardware emulation to run many injections while executing realistic workloads. The fast turnaround allows SFI experiments to be performed with as many or more bit flips in a few hours as can be achieved in two days of proton beam experiments. The method has been fully validated against proton beam experiments on a POWER6 microprocessor system. SFI also enables targeted information gathering, allowing "what-if" questions about the resilience of specific circuits, macros, or units within a design. Error handling experiments can be conducted to evaluate the effectiveness of error detection and recovery schemes.

This is the first tool that can truly analyze the system effects of SER under realistic conditions. We illustrate the use of SFI with the POWER6 microprocessor, which provides an excellent example due to its sophisticated error detection, tracing, and error handling capabilities [18].

SFI makes three types of information accessible for the first time:
- Rapid full-system emulation of beam experiments.
- Targeted fault injection in full-system environments.
- "Cause and effect" tracing of system errors (effect) to the originating bit flip (cause) in a full-system environment.

The purpose of this paper is to present the SFI framework and method and to demonstrate the utility of SFI for unit/macro-level targeted fault injection for detailed SER resiliency analysis.

### 1.1 Historical Perspective
Fault injection has been used to model SER [6, 7, 8, 17, 18]. Simulation techniques at the register-transfer level (RTL) have been limited by computational speed, making it difficult to capture both low-level design details and complete error detection and handling. Traditional methods rely on software simulations, such as NCVerilog and Synopsys, to simulate a hardware design. While these provide high controllability and observability, they lack the speed required for statistically significant fault injection samples, leading to potentially inaccurate conclusions about SER resilience.

Traditional fault injection methods often focus on smaller components rather than the entire core, which may result in using test cases that do not represent real workloads. Additionally, monitoring full system behavior and error handling is challenging. The performance of software-based simulation mechanisms limits the size of the designs modeled and the ability to monitor both fine-grained details and complete error detection and handling.

## 2. The SFI Framework
The SFI environment is based on hardware-accelerated simulation of the entire chip. An RTL model of the system, such as the POWER6, is synthesized and loaded onto a hardware accelerator. The accelerator behaves like a hardware-implemented chip, albeit at a lower frequency. Awan, a programmable acceleration engine, is extensively used for performance analysis of IBM systems [9].

Figure 1 shows the Awan hardware emulator loaded with the VHDL of the design under test. Awan consists of numerous programmable Boolean function processors with a highly optimized interconnection network. The throughput of the Awan verification is limited by model load, setup, results analysis, and interaction with the computing host. Fault injection and monitoring of fault isolation registers are performed via a communication layer between the Awan engine and the host at pre-specified intervals in the cycle simulation of the chip. The methodology minimizes communication overhead to increase overall simulation performance.

The simulation speed of such hardware can be orders of magnitude faster than software-based simulation [9, 10]. The POWER6 model is loaded onto the accelerator, and applications and vectors are run directly on the programmed hardware, behaving like a POWER6 in a cycle-based simulation mode. The SFI model replicates the system configuration used for beam experiments. Latches are randomly selected for fault injection, and faults are injected at specified locations using a communication interface to the simulation acceleration hardware.

The fault may exist for one cycle (toggle mode) or multiple cycles (sticky mode). The effect of the fault is evaluated by checking the system/processor status registers, which flag errors such as checkstops, recoveries, and machine errors. Errors not normally visible to the machine can be detected by the Architectural Verification Program (AVP) when they result in incorrect architected state. After fault injection, the model is reloaded from a checkpoint.

### 2.1 Sample Size for Fault Injections
A major concern with any statistical method for fault injection is accuracy. Since a typical processor core contains hundreds of thousands of latch bits (the simulated model of the IBM POWER6 contains ~350k latch bits across two cores), sampling is necessary for realistic simulation times. Understanding the statistics behind these simulations is crucial to ensure that the inferred results are statistically significant.

To evaluate the effect of varying the number of bits flipped, we performed an experiment where, for a given number of bit-flips (X), 10 random samples, each consisting of X latch bits, were chosen from the entire design. SFI experiments were performed on each sample, identifying the number of vanished flips, recoveries, hangs, and checkstops. The mean and standard deviation of the population were computed.

Figure 2 shows the standard deviation as a fraction of the mean for the number of bit-flips that vanished, caused recoveries, resulted in hangs, and invoked checkstops, as the number of bit-flips (X) varies from 2k to 20k. The plot indicates that as the sample size grows, the standard deviation as a fraction of the mean in the results decreases, reducing the error in estimation. At approximately 10k flips, the sample size is large enough that the error estimation is small. For the results in this paper, we use samples of about 10% of the total latch bits to further reduce this estimation error.

## 3. Experimental Results
The architectural verification program (AVP) is a proprietary test program used to detect microarchitectural errors. The AVP executes numerous small, pseudo-random instructions. Table 1 compares the AVP to the SPECInt 2000 benchmark suite, showing the instruction mix and Cycles Per Instruction (CPI) for each of the 11 components. The "Low" and "High" columns represent the component with the lowest or highest CPI or percentage of instructions in that class, while the "Average" column represents the mean of all 11 components.

From Table 1, it is evident that the AVP fits within the bounds of the SPECInt 2000 benchmark and, in most cases, is close to the average of all components. Note that CPI numbers are approximations and not truly representative of POWER6 performance.

As the AVP was executed on the POWER6 model, the monitoring environment detected and logged the impact of events, including corrected errors, hardware-detected checkstops, and incorrect architected state. The arrows in Figure 1 illustrate the types of events categorized using SFI.

| SPECInt 2000 | Low | High | Average | AVP |
|--------------|-----|------|---------|-----|
| Load         | 18.9% | 35.6% | 27.8%   | 14.1% |
| Store        | 6.4% | 31.7% | 22.2%   | 8.8% |
| Fixed Point  | 6.2% | 35.9% | 1.2%    | 3.6% |
| Floating Point | 0% | 9.1% | 29.4%   | 23.6% |
| Comparison   | 4.8% | 15.1% | 1.2%    | 16.7% |
| Branch       | 6.9% | 28.8% | 15.4%   | 0% |

**Table 1. Comparison of the AVP to SPECInt 2000. (CPI numbers are approximations and are not representative of POWER6 performance)**

## 4. Conclusion
This paper presents a method for statistical fault injection (SFI) into arbitrary latches within a full system hardware-emulated model, validated against particle-beam-accelerated SER testing for the IBM POWER6 microprocessor. The SFI tool allows for rapid full-system emulation, targeted fault injection, and "cause and effect" tracing of system errors. The SFI framework and method are illustrated, and the utility of SFI for unit/macro-level targeted fault injection for detailed SER resiliency analysis is demonstrated. The experimental results show that the SFI method provides statistically significant and accurate results, making it a valuable tool for analyzing the system effects of SER under realistic conditions.