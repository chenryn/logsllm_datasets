Stuttard c18.indd V2 - 07/28/2011 Page 684
684 Chapter 18 n Attacking the Application Server
Securing Web Server Confi guration
Securing the confi guration of a web server is not inherently diffi cult. Problems
typically arise through an oversight or a lack of awareness. The most important
task is to fully understand the documentation for the software you are using
and any hardening guides available in relation to it.
In terms of generic confi guration issues to address, be sure to include all of
the following areas:
n Change any default credentials, including both usernames and passwords
if possible. Remove any default accounts that are not required.
n Block public access to administrative interfaces, either by placing ACLs
on the relevant paths within the web root or by fi rewalling access to
nonstandard ports.
n Remove all default content and functionality that is not strictly required for
business purposes. Browse the contents of your web directories to identify
any remaining items, and use tools such as Nikto as a secondary check.
n If any default functionality is retained, harden this as far as possible to
disable unnecessary options and behavior.
n Check all web directories for directory listings. Where possible, disable
directory listings in a server-wide confi guration. You can also ensure
that each directory contains a fi le such as index.html, which the server
is confi gured to serve by default.
n Disable all methods other than those used by the application (typically
GET and POST).
n Ensure that the web server is not confi gured to run as a proxy. If this function-
ality is actually required, harden the confi guration as far as possible to allow
connections only to the specifi c hosts and ports that should be legitimately
accessed. You may also implement network-layer fi ltering as a secondary
measure to control outbound requests originating from the web server.
n If your web server supports virtual hosting, ensure that any security hard-
ening applied is enforced on the default host. Perform the tests described
previously to verify that this is the case.
Vulnerable Server Software
Web server products range from extremely simple and lightweight software that
does little more than serve static pages to highly complex application platforms
that can handle a variety of tasks, potentially providing all but the business
logic itself. In the latter example, it is common to develop on the assumption
cc1188..iinndddd 668844 88//1199//22001111 1122::1177::5533 PPMM
84 Stuttard c18.indd V2 - 07/28/2011 Page 685
Chapter 18 n Attacking the Application Server 685
that this framework is secure. Historically, web server software has been sub-
ject to a wide range of serious security vulnerabilities, which have resulted
in arbitrary code execution, fi le disclosure, and privilege escalation. Over the
years, mainstream web server platforms have become increasingly robust. In
many cases core functionality has remained static or has even been reduced as
vendors have deliberately decreased the default attack surface. Even as these
vulnerabilities have decreased, the underlying principles remain valid. In the
fi rst edition of this book, we gave examples of where server software is most
susceptible to vulnerabilities. Since that fi rst edition, new instances have been
reported in each category, often in a parallel technology or server product. Setting
aside some of the smaller personal web servers and other minor targets, these
new vulnerabilities have typically arisen in the following:
n Server-side extensions in both IIS and Apache.
n Newer web servers that are developed from the ground up to support a
specifi c application or that are supplied as part of a development envi-
ronment. These are likely to have received less real-world attention from
hackers and are more susceptible to the issues described here.
Application Framework Flaws
Web application frameworks have been the subject of various serious defects
over the years. We will describe one recent example of a generic example in a
framework that made vulnerable many applications running on that framework.
The .NET Padding Oracle
One of the most famous disclosures in recent years is the “padding oracle”
exploit in .NET. .NET uses PKCS #5 padding on a CBC block cipher, which
operates as follows.
A block cipher operates on a fi xed block size, which in .NET is commonly
8 or 16 bytes. .NET uses the PKCS #5 standard to add padding bytes to every
plaintext string, ensuring that the resultant plaintext string length is divisible by
the block size. Rather than pad the message with an arbitrary value, the value
selected for padding is the number of padding bytes that is being used. Every
string is padded, so if the initial string is a multiple of the block size, a full block
of padding is added. So in a block size of 8, a message must be padded with
either one 0x01 byte, two 0x02 bytes, or any of the intermediary combinations
up to eight 0x08 bytes. The plaintext of the fi rst message is then XORed with a
preset message block called an initialization vector (IV). (Remember the issues
with picking out patterns in ciphertext discussed in Chapter 7.) As described
in Chapter 7, the second message is then XORed with the ciphertext from the
fi rst message, starting the cyclic block chain.
cc1188..iinndddd 668855 88//1199//22001111 1122::1177::5533 PPMM
Stuttard c18.indd V2 - 07/28/2011 Page 686
686 Chapter 18 n Attacking the Application Server
The full .NET encryption process is as follows:
1. Take a plaintext message.
2. Pad the message, using the required number of padding bytes as the pad-
ding byte value.
3. XOR the fi rst plaintext block with the initialization vector.
4. Encrypt the XORed value from step 3 using Triple-DES.
From then on, the steps of encrypting the rest of the message are recursive
(this is the cipher block chaining (CBC) process described in Chapter 7):
5. XOR the second plaintext block with the encrypted previous block.
6. Encrypt the XORed value using Triple-DES.
The Padding Oracle
Vulnerable versions of .NET up to September 2010 contained a seemingly small
information disclosure fl aw. If incorrect padding was found in the message, the
application would report an error, resulting in a 500 HTTP response code to the
user. Using the behaviors of the PKCS #5 padding algorithm and CBC together,
the entire .NET security mechanism could be compromised. Here’s how.
Note that to be valid, all plaintext strings should include at least one byte
of padding. Additionally, note that the fi rst block of ciphertext you see is the
initialization vector, which serves no purpose other than to XOR against the
plaintext value of the message’s fi rst encrypted block. For the attack, the attacker
supplies a string containing only the fi rst two ciphertext blocks to the appli-
cation. These two blocks are the IV, followed by the fi rst block of ciphertext.
The attacker supplies an IV containing only zeroes and then makes a series
of requests, sequentially incrementing the last byte of the IV. This last byte is
XORed with the last byte in the ciphertext, and unless the resultant value for
this last byte is 0x01, the cryptographic algorithm throws an error! (Remember
that the cleartext value of any string must end in one or more padding values.
Because no other padding is present in the fi rst ciphertext block, the last value
must be decrypted as 0x01.)
An attacker can leverage this error condition: eventually he will hit on the
value that, when XORed with the last byte of the ciphertext block, results in 0x01.
At this point the cleartext value of the last byte y can be determined, because:
x XOR y = 0x01
so we have just determined the value of x.
The same process works on the second-to-last byte in the ciphertext. This
time, the attacker (knowing the value of y) chooses the value of x for which the
last byte will be decrypted as 0x02. Then he performs the same incremental
process on the second-to-last character in the initialization vector, receiving 500
cc1188..iinndddd 668866 88//1199//22001111 1122::1177::5533 PPMM
86 Stuttard c18.indd V2 - 07/28/2011 Page 687
Chapter 18 n Attacking the Application Server 687
Internal Server Error messages until the second-to-last decrypted byte is
0x02. At this point, two 0x02 bytes are at the end of the message, which equates
to valid padding, and no error is returned. This process can then be recursively
applied across all bits of the targeted block, and then on the following ciphertext
block, through all the blocks in the message.
In this way, an attacker can decrypt the whole message. Interestingly, the
same mechanism lets the attacker encrypt a message. Once you have recovered
a plaintext string, you can modify the IV to produce the plaintext string of your
choosing. One of the best targets is ScriptResource.axd. The d argument of
ScriptResource is an encrypted fi lename. An attacker choosing a fi lename of
web.config is served the actual fi le, because ASP.NET bypasses the normal
restrictions imposed by IIS in serving the fi le. For example:
https://mdsec.net/ScriptResource.axd?d=SbXSD3uTnhYsK4gMD8fL84_mHPC5jJ7lf
dnr1_WtsftZiUOZ6IXYG8QCXW86UizF0&t=632768953157700078
NOTE This attack applies more generally to any CBC ciphers using PKCS #5
padding. It was originally discussed in 2002, although .NET is a prime tar-
get because it uses this type of padding for session tokens, ViewState, and
ScriptResource.axd. The original paper can be found at www.iacr.org/
archive/eurocrypt2002/23320530/cbc02_e02d.pdf.
WARNING “Never roll your own cryptographic algorithms” is often a throw-
away comment based on received wisdom. However, the bit fl ipping attack
described in Chapter 7 and the padding oracle attack just mentioned both show
how seemingly tiny anomalies can be practically exploited to produce cata-
strophic results. So never roll your own cryptographic algorithms.
TRY IT!
http://mdsec.net/private/
Memory Management Vulnerabilities
Buffer overfl ows are among the most serious fl aws that can affect any kind of soft-
ware, because they normally allow an attacker to take control of execution in the
vulnerable process (see Chapter 16). Achieving arbitrary code execution within a
web server usually enables an attacker to compromise any application it is hosting.
The following sections present a tiny sample of web server buffer overfl ows.
They illustrate the pervasiveness of this fl aw, which has arisen in a wide range
of web server products and components.
cc1188..iinndddd 668877 88//1199//22001111 1122::1177::5544 PPMM
Stuttard c18.indd V2 - 07/28/2011 Page 688
688 Chapter 18 n Attacking the Application Server
Apache mod_isapi Dangling Pointer
In 2010 a fl aw was found whereby Apache’s mod_isapi could be forced to be
unloaded from memory when encountering errors. The corresponding function
pointers remain in memory and can be called when the corresponding ISAPI
functions are referenced, accessing arbitrary portions of memory.
For more information on this fl aw, see www.senseofsecurity.com.au/
advisories/SOS-10-002.
Microsoft IIS ISAPI Extensions
Microsoft IIS versions 4 and 5 contained a range of ISAPI extensions that were
enabled by default. Several of these were found to contain buffer overfl ows, such
as the Internet Printing Protocol extension and the Index Server extension, both
of which were discovered in 2001. These fl aws enabled an attacker to execute
arbitrary code within the Local System context, thereby fully compromising the
whole computer. These fl aws also allowed the Nimda and Code Red worms
to propagate and begin circulating. The following Microsoft TechNet bulletins
detail these fl aws:
n www.microsoft.com/technet/security/bulletin/MS01-023.mspx
n www.microsoft.com/technet/security/bulletin/MS01-033.mspx
Seven Years Later
A further fl aw was found in the IPP service in 2008. This time, the majority
of deployed versions of IIS on Windows 2003 and 2008 were not immediately
vulnerable because the extension is disabled by default. The advisory posted by
Microsoft can be found at www.microsoft.com/technet/security/bulletin/
ms08-062.mspx.
Apache Chunked Encoding Overfl ow
A buffer overfl ow resulting from an integer signedness error was discovered in
the Apache web server in 2002. The affected code had been reused in numerous
other web sever products, which were also affected. For more details, see www
.securityfocus.com/bid/5033/discuss.
Eight Years Later
In 2010, an integer overfl ow was found in Apache’s mod_proxy when handling
chunked encoding in HTTP responses. A write-up of this vulnerability can be
found at www.securityfocus.com/bid/37966.
cc1188..iinndddd 668888 88//1199//22001111 1122::1177::5544 PPMM
88 Stuttard c18.indd V2 - 07/28/2011 Page 689
Chapter 18 n Attacking the Application Server 689
WebDAV Overfl ows
A buffer overfl ow in a core component of the Windows operating system was
discovered in 2003. This bug could be exploited through various attack vectors,
the most signifi cant of which for many customers was the WebDAV support
built in to IIS 5. The vulnerability was being actively exploited in the wild at
the time a fi x was produced. This vulnerability is detailed at www.microsoft
.com/technet/security/bulletin/MS03-007.mspx.
Seven Years Later
Implementation of WebDAV has introduced vulnerabilities across a range of
web servers.
In 2010, it was discovered that an overly long path in an OPTIONS request
caused an overfl ow in Sun’s Java System Web Server. You can read more about
this at www.exploit-db.com/exploits/14287/.
A further buffer overfl ow issue from 2009 was reported in Apache’s mod_dav
extension. More details can be found athttp://cve.mitre.org/cgi-bin/cvename
.cgi?name=CVE-2010-1452.
Encoding and Canonicalization
As described in Chapter 3, various schemes exist that allow special characters
and content to be encoded for safe transmission over HTTP. You have already
seen, in the context of several types of web application vulnerabilities, how
an attacker can leverage these schemes to evade input validation checks and
perform other attacks.
Encoding fl aws have arisen in many kinds of application server software.
They present an inherent threat in situations where the same user-supplied
data is processed by several layers using different technologies. A typical web
request might be handled by the web server, the application platform, various
managed and unmanaged APIs, other software components, and the underly-
ing operating system. If different components handle an encoding scheme in
different ways, or perform additional decoding or interpretation of data that
has already been partially processed, this fact can often be exploited to bypass
fi lters or cause other anomalous behavior.
Path traversal is one of the most prevalent vulnerabilities that can be exploited
via a canonicalization fl aw because it always involves communication with
the operating system. Chapter 10 describes how path traversal vulnerabilities
can arise in web applications. The same types of problems have also arisen in
numerous types of web server software, enabling an attacker to read or write
arbitrary fi les outside the web root.
cc1188..iinndddd 668899 88//1199//22001111 1122::1177::5544 PPMM
Stuttard c18.indd V2 - 07/28/2011 Page 690
690 Chapter 18 n Attacking the Application Server
Apple iDisk Server Path Traversal
The Apple iDisk Server is a popular cloud synchronized storage service. In
2009, Jeremy Richards discovered that it was vulnerable to directory traversal.
An iDisk user has a directory structure that includes a public directory, the
contents of which are purposely accessible to unauthenticated Internet users.
Richards discovered that arbitrary content could be retrieved from the private
sections of a user’s iDisk by using Unicode characters traverse from the public
folder to access a private fi le:
http://idisk.mac.com/Jeremy.richards-Public/%2E%2E%2FPRIVATE.txt?disposition=
download+8300
An added bonus was that a WebDAV PROPFIND request could be issued fi rst
to list the contents of the iDisk:
POST /Jeremy.richards-Public/%2E%2E%2F/?webdav-method=
PROPFIND
...
Ruby WEBrick Web Server
WEBrick is a web server provided as part of Ruby. It was found to be vulnerable
to a simple traversal fl aw of this form:
http://[server]:[port]/..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c/boot.ini
For more information about this fl aw, see www.securityfocus.com/bid/28123.
Java Web Server Directory Traversal
This path traversal fl aw exploited the fact that the JVM did not decode UTF-8. Web
servers written in Java and using vulnerable versions of the JVM included Tomcat,
and arbitrary content could be retrieved using UTF-8 encoded ../ sequences:
http://www.target.com/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd
For more information about this fl aw, see http://tomcat.apache.org
/security-6.html.
Allaire JRun Directory Listing Vulnerability
In 2001, a vulnerability was found in Allaire JRun that enabled an attacker to
retrieve directory listings even in directories containing a default fi le such as
index.html. A listing could be retrieved using URLs of the following form:
https://wahh-app.com/dir/%3f.jsp
cc1188..iinndddd 669900 88//1199//22001111 1122::1177::5544 PPMM
90 Stuttard c18.indd V2 - 07/28/2011 Page 691
Chapter 18 n Attacking the Application Server 691
%3f is a URL-encoded question mark, which is normally used to denote the
start of the query string. The problem arose because the initial URL parser did
not interpret the %3f as being the query string indicator. Treating the URL as
ending with .jsp, the server passed the request to the component that handles
requests for JSP fi les. This component then decoded the %3f, interpreted it
as the start of the query string, found that the resulting base URL was not
a JSP fi le, and returned the directory listing. Further details can be found at
www.securityfocus.com/bid/3592.
Eight Years Later
In 2009, a similar much lower-risk vulnerability was announced in Jetty
relating to directory traversal in situations where a directory name ended
in a question mark. The solution was to encode the ? as %3f. Details can be
found at https://www.kb.cert.org/vuls/id/402580.
Microsoft IIS Unicode Path Traversal Vulnerabilities
Two related vulnerabilities were identifi ed in the Microsoft IIS server in 2000
and 2001. To prevent path traversal attacks, IIS checked for requests contain-
ing the dot-dot-slash sequence in both its literal and URL-encoded forms. If a
request did not contain these expressions, it was accepted for further processing.
However, the server then performed some additional canonicalization on the
requested URL, enabling an attacker to bypass the fi lter and cause the server
to process traversal sequences.
In the fi rst vulnerability, an attacker could supply various illegal Unicode-
encoded forms of the dot-dot-slash sequence, such as ..%c0%af. This expression
did not match IIS’s upfront fi lters, but the later processing tolerated the illegal
encoding and converted it back to a literal traversal sequence. This enabled an
attacker to step out of the web root and execute arbitrary commands with URLs