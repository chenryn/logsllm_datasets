glibc2.26开始引入了tcache的技术，提升了堆管理的性能。本文根据glibc2.26的源码介绍含tcache技术的Linux堆分配原理。
# 基本概念
## arena
以前的Linux使用的ldmalloc只支持单线程的堆分配，现在的ptmalloc2支持多线程的堆分配，因为它给每个线程分配了一块内存区，这个内存区就叫做arena。（其实arena的数量是有限制的，当线程数大于arena的数量上限的时候就会有线程共用arena）
## bin
为了更有效率地分配空闲的堆内存，ptmalloc2把空闲的chunk进行了分类，并用链表把不同类的chunk串起来就形成了bin。不同类的chunk组成的bin有不同的名字：fast
bin, unsorted bin, small bin, large bin，这些bin的不同之处将在后面源码分析的部分说明。
# 基本结构
## malloc_chunk
`malloc_chunk`结构用来表示一个chunk，代码中的注释对其解释得很详细了，总体意思就是说：当当前chunk被使用时，只有`mchunk_prev_size`和`mchunk_size`正常使用，其余部分全部用来存储用户数据，下一个chunk的`mchunk_prev_size`也用来存用户数据；当当前chunk空闲时，`fd`指向下一个chunk，`bd`指向上一个chunk，下一个chunk的`mchunk_prev_size`存的是当前chunk的size。另外，因为`mchunk_size`的低三位被用来存储是否属于主线程、是否由mmap分配、上一个chunk是否被使用等信息，所以`mchunk_size*8`才是当前chunk的真实大小。这样的结构设计充分利用了空间，当chunk被使用时是没有在链表中的，所以不需要指针，与它物理相邻的下一个chunk也不需要通过`mchunk_prev_size`来找到它，所以下一个chunk的`mchunk_prev_size`的空间也被用来存储数据。
    /*
      This struct declaration is misleading (but accurate and necessary).
      It declares a "view" into memory allowing access to necessary
      fields at known offsets from a given base. See explanation below.
    */
    struct malloc_chunk {
      INTERNAL_SIZE_T      mchunk_prev_size;  /* Size of previous chunk (if free).  */
      INTERNAL_SIZE_T      mchunk_size;       /* Size in bytes, including overhead. */
      struct malloc_chunk* fd;         /* double links -- used only if free. */
      struct malloc_chunk* bk;
      /* Only used for large blocks: pointer to next larger size.  */
      struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */
      struct malloc_chunk* bk_nextsize;
    };
    /*
       malloc_chunk details:
        (The following includes lightly edited explanations by Colin Plumb.)
        Chunks of memory are maintained using a `boundary tag' method as
        described in e.g., Knuth or Standish.  (See the paper by Paul
        Wilson ftp://ftp.cs.utexas.edu/pub/garbage/allocsrv.ps for a
        survey of such techniques.)  Sizes of free chunks are stored both
        in the front of each chunk and at the end.  This makes
        consolidating fragmented chunks into bigger chunks very fast.  The
        size fields also hold bits representing whether chunks are free or
        in use.
        An allocated chunk looks like this:
        chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of previous chunk, if unallocated (P clear)  |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of chunk, in bytes                     |A|M|P|
          mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             User data starts here...                          .
            .                                                               .
            .             (malloc_usable_size() bytes)                      .
            .                                                               |
    nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             (size of chunk, but used for application data)    |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of next chunk, in bytes                |A|0|1|
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        Where "chunk" is the front of the chunk for the purpose of most of
        the malloc code, but "mem" is the pointer that is returned to the
        user.  "Nextchunk" is the beginning of the next contiguous chunk.
        Chunks always begin on even word boundaries, so the mem portion
        (which is returned to the user) is also on an even word boundary, and
        thus at least double-word aligned.
        Free chunks are stored in circular doubly-linked lists, and look like this:
        chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of previous chunk, if unallocated (P clear)  |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        `head:' |             Size of chunk, in bytes                     |A|0|P|
          mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Forward pointer to next chunk in list             |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Back pointer to previous chunk in list            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Unused space (may be 0 bytes long)                .
            .                                                               .
            .                                                               |
    nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        `foot:' |             Size of chunk, in bytes                           |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of next chunk, in bytes                |A|0|0|
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        The P (PREV_INUSE) bit, stored in the unused low-order bit of the
        chunk size (which is always a multiple of two words), is an in-use
        bit for the *previous* chunk.  If that bit is *clear*, then the
        word before the current chunk size contains the previous chunk
        size, and can be used to find the front of the previous chunk.
        The very first chunk allocated always has this bit set,
        preventing access to non-existent (or non-owned) memory. If
        prev_inuse is set for any given chunk, then you CANNOT determine
        the size of the previous chunk, and might even get a memory
        addressing fault when trying to do so.
        The A (NON_MAIN_ARENA) bit is cleared for chunks on the initial,
        main arena, described by the main_arena variable.  When additional
        threads are spawned, each thread receives its own arena (up to a
        configurable limit, after which arenas are reused for multiple
        threads), and the chunks in these arenas have the A bit set.  To
        find the arena for a chunk on such a non-main arena, heap_for_ptr
        performs a bit mask operation and indirection through the ar_ptr
        member of the per-heap header heap_info (see arena.c).
        Note that the `foot' of the current chunk is actually represented
        as the prev_size of the NEXT chunk. This makes it easier to
        deal with alignments etc but can be very confusing when trying
        to extend or adapt this code.
        The three exceptions to all this are:
         1. The special chunk `top' doesn't bother using the
        trailing size field since there is no next contiguous chunk
        that would have to index off it. After initialization, `top'
        is forced to always exist.  If it would become less than
        MINSIZE bytes long, it is replenished.
         2. Chunks allocated via mmap, which have the second-lowest-order
        bit M (IS_MMAPPED) set in their size fields.  Because they are
        allocated one-by-one, each must contain its own trailing size
        field.  If the M bit is set, the other bits are ignored
        (because mmapped chunks are neither in an arena, nor adjacent
        to a freed chunk).  The M bit is also used for chunks which
        originally came from a dumped heap via malloc_set_state in
        hooks.c.
         3. Chunks in fastbins are treated as allocated chunks from the
        point of view of the chunk allocator.  They are consolidated
        with their neighbors only in bulk, in malloc_consolidate.
    */
## heap_info
`heap_info`结构用来表示一个堆，主要被用于非主线程中，因为主线程中只有一个堆，而非主线程可以调用mmap来创建多个堆，这些堆就通过`prev`指针串起来。
    /* A heap is a single contiguous memory region holding (coalesceable)
       malloc_chunks.  It is allocated with mmap() and always starts at an
       address aligned to HEAP_MAX_SIZE.  */
    typedef struct _heap_info
    {
      mstate ar_ptr; /* Arena for this heap. */
      struct _heap_info *prev; /* Previous heap. */
      size_t size;   /* Current size in bytes. */
      size_t mprotect_size; /* Size in bytes that has been mprotected
                               PROT_READ|PROT_WRITE.  */
      /* Make sure the following data is properly aligned, particularly
         that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of
         MALLOC_ALIGNMENT. */
      char pad[-6 * SIZE_SZ & MALLOC_ALIGN_MASK];
    } heap_info;
## malloc_state
`malloc_state`用来表示一个arena，所以每个arena中只有一个`malloc_state`结构。
    struct malloc_state
    {
      /* Serialize access.  */
      __libc_lock_define (, mutex);//用于进程间的互斥，同一个arena同时只能被一个进程访问
      /* Flags (formerly in max_fast).  */
      int flags;//表示arena是否存在fastbin或者内存是否连续等信息
      /* Set if the fastbin chunks contain recently inserted free blocks.  */
      /* Note this is a bool but not all targets support atomics on booleans.  */
      int have_fastchunks;
      /* Fastbins */
      //一个用来存放所有fastbin链表的数组,最多10个fastbin链表
      mfastbinptr fastbinsY[NFASTBINS];
      /* Base of the topmost chunk -- not otherwise kept in a bin */
      mchunkptr top;//指向top chunk
      /* The remainder from the most recent split of a small request */
      mchunkptr last_remainder;//指向last_remainder
      /* Normal bins packed as described above */
      mchunkptr bins[NBINS * 2 - 2];//存放除fastbin的所有bin
      /* Bitmap of bins */
      unsigned int binmap[BINMAPSIZE];
      /* Linked list */
      struct malloc_state *next;//指向下一个arena
      /* Linked list for free arenas.  Access to this field is serialized
         by free_list_lock in arena.c.  */
      struct malloc_state *next_free;//指向下一个空闲的arena
      /* Number of threads attached to this arena.  0 if the arena is on
         the free list.  Access to this field is serialized by
         free_list_lock in arena.c.  */
      INTERNAL_SIZE_T attached_threads;//使用本arena的线程的数量
      /* Memory allocated from the system in this arena.  */
      //分配给本arena的内存范围
      INTERNAL_SIZE_T system_mem;
      INTERNAL_SIZE_T max_system_mem;
    };
## tcache_entry
当chunk空闲时`tcache_entry`就会存放在chunk的用户数据部分，并指向下一个`tcache_entry`,
因此`next`指向的就直接是用户数据的开始，也对应chunk的`fd`指针
    /* We overlay this structure on the user-data portion of a chunk when
       the chunk is stored in the per-thread cache.  */
    typedef struct tcache_entry
    {
      struct tcache_entry *next;
    } tcache_entry;
## tcache_perthread_struct
`tcache_perthread_struct`用于存放所有的entries链，`counts`表示每条entries链的`tcache_entry`的数量，`entries`指向每条entries链的第一个`tcache_entry`
    /* There is one of these for each thread, which contains the
       per-thread cache (hence "tcache_perthread_struct").  Keeping
       overall size low is mildly important.  Note that COUNTS and ENTRIES
       are redundant (we could have just counted the linked list each
       time), this is for performance reasons.  */
    typedef struct tcache_perthread_struct
    {
      char counts[TCACHE_MAX_BINS];
      tcache_entry *entries[TCACHE_MAX_BINS];
    } tcache_perthread_struct;
# 关键函数
## __libc_malloc
即`malloc`函数，调用了`tcache_init`, `tcache_get`, `_init_malloc`等关键函数，这些函数将在后面讲解
    void *
    __libc_malloc(size_t bytes)
    {
      mstate ar_ptr;
      void *victim;
      //在malloc之前先调用__malloc_hook函数，如果__malloc_hook不为空的话
      void *(*hook)(size_t, const void *) = atomic_forced_read(__malloc_hook);
      if (__builtin_expect(hook != NULL, 0))
        return (*hook)(bytes, RETURN_ADDRESS(0));
    #if USE_TCACHE
      /* int_free also calls request2size, be careful to not pad twice.  */
      //tbytes为真实申请的字节数
      //checked_request2size调用request2size对tbytes进行了赋值，并进行了检查
      size_t tbytes;
      checked_request2size(bytes, tbytes);
      size_t tc_idx = csize2tidx(tbytes);//csize2tidx返回索引
      /* With rounding and alignment, the bins are...
       idx 0   bytes 0..24 (64-bit) or 0..12 (32-bit)
       idx 1   bytes 25..40 or 13..20
       idx 2   bytes 41..56 or 21..28
       etc.  */
      MAYBE_INIT_TCACHE();//调用tcache_init进行tcache的初始化
      DIAG_PUSH_NEEDS_COMMENT;
      //如果索引合法并且对应entries里有chunk则调用tcache_get返回chunk
      if (tc_idx entries[tc_idx] != NULL)
      {
        return tcache_get(tc_idx);
      }
      DIAG_POP_NEEDS_COMMENT;
    #endif
      //如果为单线程直接调用_int_malloc在main_arena中分配chunk
      if (SINGLE_THREAD_P)
      {
        victim = _int_malloc(&main_arena, bytes);
        assert(!victim || chunk_is_mmapped(mem2chunk(victim)) ||
               &main_arena == arena_for_chunk(mem2chunk(victim)));
        return victim;
      }
      //寻找可用的arena并分配chunk
      arena_get(ar_ptr, bytes);
      victim = _int_malloc(ar_ptr, bytes);
      /* Retry with another arena only if we were able to find a usable arena
         before.  */
      //如果找到了可用的arena但chunk分配不成功则重新寻找和分配
      if (!victim && ar_ptr != NULL)
      {
        LIBC_PROBE(memory_malloc_retry, 1, bytes);
        ar_ptr = arena_get_retry(ar_ptr, bytes);
        victim = _int_malloc(ar_ptr, bytes);