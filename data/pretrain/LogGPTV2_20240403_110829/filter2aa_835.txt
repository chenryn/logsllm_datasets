前5个加密字符还原, 请看龙哥的文章
SO逆向入门实战教程九——blackbox
https://blog.csdn.net/qq_38851536/article/details/118115569
打开ida, 从sub_3B3C方法继续向下分析
我们一步一步看:
首先是v19的赋值
1
uint8x8_t v19; // d16
2
v19.n64_u32[1] = *(_DWORD *)"6789BCDFGHJKRTVWMNPQ567";
3
uint8x8_t 的结构体如下: 
这里用到了 ARM NEON 编程
https://www.cnblogs.com/xylc/p/5410517.html
DCD 4个字节
DCW 2个字节
DCB 1个字节
DCQ  8个字节
1
// v35就是前5个加密字节
2
v19.n64_u32[0] = *(_DWORD *)&v35[1];
这一步将上面得到的后4个字节的加密值赋值给 n64_u32[0] 
就是上边的CD2D
1
 uint32x4_t v34; // [sp+20h] [bp‐168h] BYREF
2
 //寄存器中的每个元素的长度都扩展为原来的两倍，u8扩展为u16
3
 v34 = vmovl_u16((uint16x4_t)vmovl_u8(v19).n128_u64[0]);
分为以下4步:
1) vmovl_u8对读取的uint8x8进行宽度扩展
    vmovl_u8()  将uint8x8_t --> uint16x8_t
    这句的作用是 //convert to 16-bit and move to 128-bit reg
    CD2D 由原来的每个字符一个字节, 变成一个字符2个字节, 高位补0
2) 然后取前n128_u64[0],  即取前64位数据
3) 然后 使用(uint16x4_t) 强转成 uint16x4_t 类型
    这句的作用是 //get low 64 bit and move them to 64-bit reg
4)  最后 vmovl_u16 对读取的uint16x4进行宽度扩展 
vmovl_u16()  将uint16x4_t --> uint32x4_t
CD2D 由原来的每个字符2个字节, 变成一个字符4个字节, 高位补0
然后将拓展后的数据传入 sub_194C() 方法
在unidbg debugger 传到sub_194C方法是这样的
分析 sub_194C()
看上去调用了很多方法,  其实也没有什么 直接用java还原即可
下面放出代码:
1
public static int[] sub_194C(int[] a1) {
2
 int v1;
3
 int v3;
4
 int v4;
5
 int v5;
6
 int v6;
7
 int v7;
8
 int v8;
9
 int v9;
10
 int v18;
11
 int v23;
12
 int v24;
13
 int v22;
14
 int v21;
15
 int v20;
16
 int v19;
17
 int v10;
18
 int v11;
19
 int v12;
20
 int v13;
21
 int v14;
22
 int v15;
23
 int v16;
24
25
26
 v1 = a1[0];
27
 v3 = sub_191E(v1);
28
 v4 = a1[1];
29
 v24 = v3;
30
 v5 = (2 * v4) ^ 0x1B;
31
 if ( (v4 & 0x80) == 0 ){
32
 v5 = 2 * v4;
33
 }
34
 v18 = v5 ^ v4;
35
 v23 = sub_18F8(v4);
36
 v6 = a1[2];
37
 v22 = sub_18D4(v6);
38
 v7 = a1[3];
39
 v21 = sub_191E(v4);
40
 v20 = sub_18F8(v6);
41
 v19 = sub_18D4(v7);
42
 v8 = v18 ^ sub_18D4(v1);
43
 v9 = v8 ^ sub_191E(v6);
44
 v10 = v9 ^ sub_18F8(v7);
45
 v11 = sub_18F8(v1);
46
 v12 = sub_18D4(v4);
47
 v13 = sub_191E(v7);
48
 a1[2] = v10 & 0xff;
49
 v14 = (2 * v1) ^ 0x1B;
50
 if ( (v1 & 0x80) == 0 ){
51
 v14 = 2 * v1;
52
 }
53
 a1[1] = (v14 ^ v1 ^ v21 ^ v20 ^ v19) & 0xff;
54
 v15 = (2 * v7) ^ 0x1B;
55
 if ( (v7 & 0x80) == 0 ){
56
 v15 = 2 * v7;
57
 }
58
59
 a1[0] = (v15 ^ v24 ^ v23 ^ v22 ^ v7) & 0xff;
60
 v16 = (2 * v6) ^ 0x1B;
61
 if ( (v6 & 0x80) == 0 ){
62
 v16 = 2 * v6;
63
 }
64
 a1[3] = (v13 ^ v16 ^ v6 ^ v11 ^ v12) & 0xff;
65
 return a1;
66
}
67
68
public static int sub_191E(int a1) {
69
 boolean v2;
70
 int v3;
71
 int v4;
72
73
 v2 = (a1 & 0x80) != 0;
74
 v3 = (2 * a1) ^ 0x1b;
75
 if(!v2){
76
 v3 = 2 * a1;
77
 }
78
 v4 = v3 ^ a1 ^ sub_18F8(a1);
79
 return sub_18D4(a1) ^ v4;
80
}
81
public static int sub_18F8(int a1) {
82
 int v1;
83
 int v2;
84
85
 v1 = (2 * a1) ^ 0x1b;
86
 if((a1 & 0x80) == 0){
87
 v1 = 2 * a1;
88
 }
89
 v2 = (2 * v1) ^ 0x1b;
90
 if((v1 & 0x80) == 0){
91
 v2 = 2 * v1;
92
 }
93
 return sub_18D4(v2 ^ v1);
94
}
95
public static int sub_18D4(int a1) {
96
 int v1;
97
 int v2;
98
99
 v1 = (2 * a1) ^ 0x1b;
100
 if((a1 & 0x80) == 0){
101
 v1 = 2 * a1;
102
 }
103
 v2 = (2 * v1) ^ 0x1b;
104
 if((v1 & 0x80) == 0){
105
 v2 = 2 * v1;
106
 }
107
 return v2 ^ v1;
108
}
这里要注意的是:
算出来的数只取 低8位,  这个是通过调试知道的
调用sub_194C方法前:
43 00 00 00 44 00 00 00 32 00 00 00 44 00 00 00
CD2D
调用sub_194C方法后:
58 00 00 00 EB 00 00 00 45 00 00 00 F6 00 00 00
继续向下分析: 
调用了sub_3864 方法
因为参数a2固定是100, 其实是调用了sub_37A4方法
sub_37A4 方法前面实现过了
继续向下走:
查看汇编流发现, sub_37A4 计算的结果还做了 乘法和减法的操作
对应的java代码:
传入参数是sub_194C的返回值
1
public static String getLast2(int[] v25){
2
// int[] v25 = new int[]{0x58,0xEB,0x45,0xF6};
3
 int v26 = 0;
4
 int v28;
5
 int v29;
6
 String v29Str;
7
 for ( int i = 0; i != 4; ++i )
8
 {
9
 v28 = v25[i];
10
 v26 += v28;
11
 }
12
 System.out.println(v26);
13
 // 算出ida中 sprintf的v29, 这一步要看汇编
14
 int a2 = 100;
15
 v29 = v26 ‐ sub_37A4(v26, a2) * a2;
16
// System.out.println(Integer.toHexString(v29));
17
 // 处理v29
18
 if (v29 > 100){
19
 v29 = v29 % 100;
20
 }
21
 if (v29 < 10){
22
 v29Str = "0" + v29;
23
 }else{
24
 v29Str = "" + v29;
25
 }
26
27
 return v29Str;
28
 }
至此算法还原完成
下面验证算法
对比unidbg调用so生成的加密值和还原算法的加密值, 看是否相等
1
public static void main(String[] args) throws Exception {
2
 // 打印详细日志
3
// Logger.getLogger("com.github.unidbg.linux.ARM32SyscallHandler").setLev
el(Level.DEBUG);
4
// Logger.getLogger("com.github.unidbg.unix.UnixSyscallHandler").setLevel
(Level.DEBUG);
5
// Logger.getLogger("com.github.unidbg.AbstractEmulator").setLevel(Level.
DEBUG);
6
// Logger.getLogger("com.github.unidbg.linux.android.dvm.DalvikVM").setLe
vel(Level.DEBUG);
7
// Logger.getLogger("com.github.unidbg.linux.android.dvm.BaseVM").setLeve
l(Level.DEBUG);
8
// Logger.getLogger("com.github.unidbg.linux.android.dvm").setLevel(Leve
l.DEBUG);
9
// PrintStream out = null;
10
11
 CrackBlackBox obj = new CrackBlackBox();
12
13
 // 加密的key的明文
14
 String keyText = "r0env";
15
 for(int i = 0; i<10000; i += 1){
16
 double d = Math.random();
17
 int temp = (int)(d*1000000);
18
 if(! obj.callEncode(temp, keyText).equals(utils.encode(temp, keyText)))
{
19
 System.out.println("两种方法的加密值不一样!!!!!!!!!!!!!!");
20
 };
21
 }
22
23
 obj.destroy();
24
 }
日志如下:
1
unidbg调用so生成的加密值是: G7WJW18
2
[0, 0, 0, 0, 0, 3, ‐44, 7]
3
hmacsha1加密值: 4e83863c0704078a26eF1Fb36b23905685ed2Fa4
4
索引值是: 4
5
前5个加密字节是: G7WJW
6
518
7
后2个加密字节是: 18
8
本地还原方法的最终加密值是: G7WJW18
9
10
unidbg调用so生成的加密值是: QRDH338
11
[0, 0, 0, 0, 0, 11, 25, 82]
12
hmacsha1加密值: 1875d19268Fc156d09e0b4726e5bedFFbFca37ca
13
索引值是: 10
14
前5个加密字节是: QRDH3
15
638
16
后2个加密字节是: 38
17
本地还原方法的最终加密值是: QRDH338
18
19
unidbg调用so生成的加密值是: WXHGV98
20
[0, 0, 0, 0, 0, 8, 28, ‐87]
21
hmacsha1加密值: 6d78a4050698aa9Fb20764321ad0b23bbFF53a0c
22
索引值是: 12
23
前5个加密字节是: WXHGV
24
398
25
后2个加密字节是: 98
26
本地还原方法的最终加密值是: WXHGV98
27
28
....
算法验证成功