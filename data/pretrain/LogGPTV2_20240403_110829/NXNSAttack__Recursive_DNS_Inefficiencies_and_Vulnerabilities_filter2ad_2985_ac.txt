647,107
v
22,073
BAF
163x
21x
M 142,487 M 14,126,945 M 99x
Table 2: Cost of diﬀerent attack variants as a result of one client request, using BIND (M, measured cost; C, calculated
cost).
v
these TCP connections). Thus, Cpkt
by equation (1) is
3240. However, in our setup we measured 3243 due to the
initial one-time resolution of the attacker’s authoritative
server and the victim recursive resolver addresses. The
PAF is thus Cpkt
v2 = 1620.
The BAF in our setup was measured to be 163, very
close to its expected value when taking into account the
sizes of the diﬀerent packets.
Note that here the .com TLD can also be considered
as a victim because it processes the same packets as the
recursive resolver under attack. Moreover, as described
in Figure 5a, several resolvers may be used to mount
a massive attack on any TLD or root server. We also
performed this experiment with other TLDs (.live and
.online) and received the same results.
(b) Authoritative SLD attack: To attack a par-
ticular SLD server, each attacker’s referral is crafted
to contain delegations to many new and diﬀerent sub-
domains of the victim SLD (e.g., fakens1.victim.com,
fakens2.victim.com, ...).
In this attack variant, the BIND max-recursion-queries
threshold does limit the number of iterative requests
to 75. To test this attack we used two name servers,
one as the attacker’s and one as the victim. Since our
authoritative victim does not use DNSSEC, no TCP
v = 2·74 = 148 and PAF is
retries are involved. Thus, Cpkt
Cpkt
v = 22,073 bytes,
v2 = 74x. The victim bytes cost is Cbw
and the attacker cost is 1,049 bytes, which leads to a BAF
of 21x. As before, the measurement on one client request
is 150 rather than 148 due to the one-time resolution
of the attacker and resolver servers, which should not
be counted towards the PAF or BAF calculations. Note
that, had the authoritative victim used DNSSEC, the
packet cost would likely have increased 6-fold according
to equation 1, to 888, and the PAF to 444.
(c) ROOT TLD attack. To attack a TLD or root
servers (a tough challenge since there are hundreds of
them), one can try variant a, or try this variant with
many fewer client requests, as described; see §3.2 and Fig.
6. Here the attacker uses the self-delegations technique
to double the ampliﬁcation factor in attacks against the
ROOT or TLD name servers, in which the resolver is
also victimized. The attacker’s ﬁrst referral (step 3 in
the ﬁgure) contains n1 diﬀerent sub-domains of itself
(e.g., sd1.attacker.com, ... , sdF1.attacker.com), caus-
ing the resolver to send 2n1 additional queries (step 4)
to resolve the IPv4 and IPv6 addresses of these dele-
gated name servers. The attacker server then responds
to these with 2n1 = F1 referral responses (step 5), each
with n2 delegations. This results in a total of 2· F1· n2
delegations, each of which is a name of a fake TLD server
(e.g., ns.fake1, ns.fake2, .... , ns.fakeF1xF1x2). F1 is
bounded by the max-recursion-queries parameter of
BIND, to 74, and n2 to 135 by the nmax, resulting in a
maximum ampliﬁer fan-out of 74·270 = 19,980 requests.
This can potentially lead to a PAF of 3,240, if the target
authoritative servers revert to TCP.
This experiment shows a huge discrepancy between the
measured and calculated victim cost (81,428 vs. 239,760).
This is because the resolver has to send and receive 19,980
requests at the same time, which it fails to do, causing
the loss of many request packets. To successfully attack
the root (or a TLD), the attacker should combine this
technique with the one presented in Fig. 5a, using many
diﬀerent resolvers, all of which direct their requests to
the target.
Long-lived attack simulation. The discussion so far
has focused on the attack power as a result of one client
request. Since the attack uses nonexistent domain names,
the cache mechanisms do not help, and the attack is long-
lived. To show this we simulate a long-lived attack using
variant b, which does not interact with external authorita-
tive servers; hence we could test it on our setup without
leaking any attack packets outside the virtual lab. As
shown in Table 2, F of this variant is 74; thus we include
37 name servers names in each NS referral response. We
monitor the packets processed in both the recursive re-
solver and the victim authoritative server in the test-bed.
We used the resperf tool [30] on the client machine (acts
as the attacker) to send a query stream consisting of
many unique DNS ‘A’ requests to sd*.attacker.com. As
shown in Figure 7 (see the ‘Original BIND’ line), 10,000
USENIX Association
29th USENIX Security Symposium    639
Original BIND
BIND with MaxFetch(1) §5
1,200,000
1,000,000
d
e
v
l
o
v
n
1,500,319
1,400,000
i
s
t
e
k
c
a
p
4
v
P
I
f
o
r
e
b
m
u
N
800,000
600,000
400,000
200,000
60,061
0
0
1,000 2,000 3,000 4,000 5,000 6,000 7,000 8,000 9,000 10,000
Requests
Figure 7: Simulation of long-lived NXNSAttack against
an SLD authoritative server. The original BIND imple-
mentation has a constant PAF of 75x as compared to 3x
in MaxFetch(1). (see §5). Recall that the attacker cost
is 2·#requests.
attacker requests result in 1,500,319 packets involved
in the recursive resolutions, producing a constant PAF
of 75x. Here each client query ends with a SERVFAIL,
but the recursive resolver’s cache is ﬁlled with 740,000
NXDOMAIN records (each client request triggers 37
IPv4 resolutions and 37 IPv6 resolutions), and 10,000
NS records. Thus both have a large PAF, which causes
very quick saturation of the cache and the memory.
4.4 Public DNS servers
Here we measured the ampliﬁcation factor attained when
each of several public DNS resolvers (such as Cloudﬂare,
Google, Quad9, etc.) is used as the resolver in the ampli-
ﬁer. The DNS software in the public resolvers varies, and
some have their own proprietary implementation. We
used attack variation b, in which an SLD authoritative
is the victim, and we used our own ns.victim.com as the
victim. Since we cannot really mount an attack using a
public DNS server, we tested each one with one client re-
quest at a time, for several requests, until the maximum
ﬁrepower was found. The results are given in Table 3.
We could not test variants a and c because these require
monitoring the recursive resolver or the TLD/ROOT
servers. To this end, we deployed a ‘malicious’ name
server that responds to queries for xxx.attacker.live
and sent a few queries to each of the public resolvers,
requesting sdX.attacker.live. For each such request,
our name server, ns.attacker.live, responded with a re-
ferral response with a diﬀerent number of victims and
victim sub-domains (all residing in our name server,
victim.online). For each request sent, we monitored
how many requests arrive at the victim name server. All
the public DNS resolvers that we tested exhibited a large
PAF on a single request of the NXNSAttack. Some have
a higher PAF than the one observed in BIND for this
variant (74x).
Public DNS recursive resolver
(IP)
CloudFlare (1.1.1.1)
Comodo Secure (8.26.56.26)
DNS.Watch (84.200.69.80)
Dyn (216.146.35.35)
FreeDNS (37.235.1.174)
Google (8.8.8.8)
Hurricane (74.82.42.42)
Level3 (209.244.0.3)
Norton ConnectSafe
(199.85.126.10)
OpenDNS (208.67.222.222)
Quad9 (9.9.9.9)
SafeDNS (195.46.39.39)
Ultra (156.154.71.1)
Verisign (64.6.64.6)
Max #
of dele-
gations
= F/2
24
140
135
50
50
15
50
135
140
50
100
135
100
50
Victim
cost
Cpkt
v
96
870
972
408
100
60
98
546
1138
64
830
548
810
404
PAF
48x
435x
486x
204x
50x
30x
49x
273x
569x
32x
415x
274x
405x
202x
Table 3: Firepower and PAF of public resolvers as a
response to a single request in the NXNSAttack.
4.5 NXNSAttack vs. NXDomain Attack
and its eﬀects on the DNS system
Both NXDomain and the NXNSAttack use non-existing
domain names to bypass the recursive caches and reach
diﬀerent name servers. While the NXDomain attack
(water torture [3, 20, 33]) is easier to launch because it
does not require a malicious authoritative server. The
NXNSAttack is however, more powerful in two aspects;
packets/bytes ampliﬁcation factor, and amount and type
of cache records consumed. Its PAF ranges from 74x to
1602x, in contrast to 3x in the NXDomain attack. The
NXNSAttack consumes memory and ‘NS’, ‘NX’ and even
‘A’ (in variant c) cache records, while the NXDomain
attack consumes only ‘NX’ cache records at a much
slower pace. Note that some ISPs have disabled negative
caching due to the increased pervasiveness of one-time
signals and disposable domains [13], thus eliminating
the cache growth caused by the NXDomain attack. In
conclusion, since large recursive resolvers were knocked
down by the NXDomain attacks [29, 31], they are more
likely to be knocked down by the NXNSAttack.
Attack eﬀectiveness comparison. While variant
b of the NXNSAttack is the least eﬀective, with the
smallest PAF, and is also likely to have the smallest
cache consumption rate, it is the only variant we can
easily compare against the NXDomain attack in a stress
test in our setup. We used the same setup as in the
long-lived test in Section 4.3.
In the comparison we measured MaxQps, the maxi-
mum rate of attacker client requests before the victim
resolver or the authoritative server starts to lose requests.
We prepared a ﬁle containing one million requests for
640    29th USENIX Security Symposium
USENIX Association
each attack (each having diﬀerent bogus requests to insti-
gate the attack) and used it as input to the resperf stress
tool by Nominum [30], running on the client. (We did not
use BIND queryperf [12] because it has been reported
[30] to produce poor results.) The MaxQps throughput
is determined as the point at which the server starts
dropping queries and the response rate stops growing,
indicating that the server capacity has been exceeded.
The results show that the MaxQps of the BIND recur-
sive resolver signiﬁcantly degrades under the NXNSAt-
tack, with a peak of 932 Qps. The resolver throughput
under the NXDomain attack is 3708 Qps. This mainly at-
tests to the much higher PAF of the NXNSAttack, which
requires much fewer malicious client requests to saturate
the resolver. As a reference, the max throughput that
we measured under non-attack traﬃc (e.g., a campus
DNS trace and top million domains) varies from 6,000
(in the case that most of the requests are not cached) to
more than 100,000 Qps (where most of the requests are
already in the cache).
4.6 Saturating the DNS server
We do not have access to a real authoritative or real
resolver servers to show how they fail under attack. As an
alternative, we measured the maximum rate of the NXN-
SAttack type requests that each such server installed
on a strong EC2 machine can handle before losing re-
quests. Since this rate of requests is easily attained by
the NXNSAttack, we deduce that the attack can easily
take down these servers. We used the same setup as in
Sections 4.2, 4.3 and 4.5 except of using a xlarge EC2
machine instead of larege EC2 machine (again 4 vCPU
with 16GB memory) with BIND 9.12.3 in both resolver
mode and authoritative mode. In resolver mode it starts
to lose requests at a rate of 932 client requests per second,
as in Section 4.5 (with the same requests that are issued
by attacking clients in the NXNSAttack). In this experi-
ment, we observed a large diﬀerence in CPU resources
utilization between the victim and the attacker: the vic-
tim 4 vCPU resolver load exceeded 390%, while at the
same time, the attacker’s authoritative 1 vCPU load was
only 3%. In authoritative mode we fed the authoritative
two diﬀerent streams of requests. The ﬁrst, a stream of
‘A’ requests, caused the server to start losing requests
when a rate of 68,208 rps was reached. The second, a
stream of NXDOMAIN random requests, identical to
those sent to an authoritative victim in our attack (e.g.,
in step 4 in Figure 3), reached a maximum rate of 65,418
rps before beginning to lose requests. Therefore, in our
attack 1,000 client requests per second (with PAF=x75)
would be suﬃcient to overwhelm this authoritative name
server.
5 Attack Mitigation: MaxFetch(k)
5.1 Possible and Existing Measures
Several diﬀerent approaches may be taken to mitigate
and reduce the NXNSAttack eﬀect. While MaxFetch(k)
is the simplest to integrate and directly patches the prob-
lem, we brieﬂy mention few approaches, before diving
into the details of MaxFetch(k) in the following subsec-
tions:
MaxFetch(k): Do not resolve all the name server do-
mains in a received referral response at once, but
rather, k per each original client request. See details
below.
Abnormal behavioral analysis: In the spirit of IPSs,
it is possible to monitor the referral messages incom-
ing to resolvers and identify and detect authoritative
name servers that send many malicious NS refer-
ral responses. One indicator could be abnormally
large referrals for zones that appear only once or
infrequently. Heavy hitter and distinct heavy hitter
algorithms, such as in [9], may be used to detect
zones with many bogus sub-domains and ﬁlter only
the malicious requests. Note that to evade block-
ing, malicious name servers can dynamically change
their name and IP address (in the same manner
as malicious C&C servers do). The disadvantage
of this approach is that operators will have to deal
with yet one more package and the upgrade path is
not clear.
NX replies detection: One unique abnormal behav-
ior of our attack is that the resolver (for example
in Fig. 3) receives nonexistent (‘NX’) replies while
resolving a name server name which appeared in
a referral response. This cannot happen in normal
operation unless there is a conﬁguration error. A
client request that results in one or more such ‘NX’
responses may be failed [7].
Rate and other limiters: Following the NXDomain
attack, recent versions of BIND have new manual
rate limiting features designed to throttle queries
from a resolver to authoritatives that are under at-
tack. These rate-limiters, (e.g., fetch-limits, fetches-
per-server, and fetches-per-zone [11]) are, however,
a double-edged sword, and can become a way to
DDoS an authoritative by issuing many requests to
hit the threshold and then block legitimate requests.
Moreover, setting a rate-limit per authoritative zone
or per authoritative name server does not protect
the recursive resolver from the NXNSAttack.
DNSSEC: Using DNSSEC-Validated Cache as sug-
gested in RFC 8198 [8] enables the resolver to iden-
USENIX Association
29th USENIX Security Symposium    641
tify malicious bogus domain requests before issuing
the request. To accomplish this, DNSSEC “meta-
data” in the form of NSEC(3) and RRSIG records
must be used. NSEC provides the main beneﬁt by
pointing out to the resolver ranges of sub-domain
names that are nonexistent and therefore is able
to drop domain requests that fall in them, without
making the query itself [36]. This can be combined
with the above NX replies detection method.
Max Breadth: The MaxFetch(k) proposal mitigates
and signiﬁcantly reduces the PAF (and BAF) of
the attack; however, the attack still consumes large
amounts of memory and cache (NX, NS records) per
client request, in particular variant c. An additional
approach is to adopt recommendations to restrict
the breadth, i.e., the number of delegation name
servers in an NS record of a domain/zone (all of
which are included in a referral response). This
restriction is supported by the observations made
in §6; in particular, Fig. 14 shows that about one-
hundredth of a percent of the top 1M domains have