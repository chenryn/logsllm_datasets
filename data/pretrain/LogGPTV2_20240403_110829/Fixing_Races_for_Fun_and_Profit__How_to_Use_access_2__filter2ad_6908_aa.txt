# Title: Fixing Races for Fun and Profit: How to Use `access(2)`

## Authors
Drew Dean and Alan J. Hu

## Conference
Proceedings of the 13th USENIX Security Symposium  
San Diego, CA, USA  
August 9–13, 2004

## Copyright
© 2004 by The USENIX Association  
All Rights Reserved  
Phone: +1 510 528 8649  
FAX: +1 510 548 5738  
Email: [PI:EMAIL](mailto:PI:EMAIL)  
For more information about the USENIX Association: [http://www.usenix.org](http://www.usenix.org)  
Permission is granted for noncommercial reproduction of the work for educational or research purposes. This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.

## Abstract
The use of the `access(2)` system call in a setuid program to check file access permissions before opening a file is known to be insecure due to a race condition. This race condition is a classic example of a time-of-check-to-time-of-use (TOCTTOU) problem. We prove that no portable, deterministic solution exists without changes to the system call interface. We present a probabilistic solution and examine the effect of increasing CPU speeds on the exploitability of the attack.

## 1. Introduction
Since the 1988 Morris worm and the 1996 Phrack tutorial on stack smashing, buffer overflows have been a primary method for subverting system security. Many techniques have been developed to prevent or mitigate these vulnerabilities. Prior to the popularization of stack smashing, various race conditions were commonly used in privilege escalation attacks. While not as catastrophic as a buffer overflow in a network server, local privilege escalation remains a serious threat. If an attacker can execute code as an unprivileged user, they may leverage other vulnerabilities to gain superuser privileges. Preventing the first step of such an attack is crucial for maintaining system security.

One particularly infamous race condition involves the `access(2)` and `open(2)` system calls in setuid programs. Although `access(2)` was designed to check file access permissions, it is vulnerable to a TOCTTOU race condition. This paper addresses this long-standing problem by presenting a highly portable, probabilistic solution that works with the existing system call interface.

## 2. Background
### 2.1 The Problem
Unix introduced the setuid bit, allowing programs to execute with the privileges of their owner rather than the invoking user. The `access(2)` system call, added in V7 Unix in 1979, was intended to perform access control checks based on the real user ID. However, the following code fragment:
```c
if (access(pathname, R_OK) == 0) {
    if ((fd = open(pathname, O_RDONLY)) != -1) {
        // Use the file
    }
}
```
is vulnerable to a TOCTTOU race condition. An attacker can change the file system between the `access(2)` and `open(2)` calls, tricking the setuid program into opening a file it should not. Apple (MacOS X 10.3) and FreeBSD (4.7) explicitly warn against using `access(2)` for this purpose.

### 2.2 Partial Solutions
- **Kernel Change**: The definitive solution is a kernel modification, such as adding an `O_RUID` option to `open(2)`.
- **User ID Juggling**: Temporarily dropping and regaining privileges can partially fix the problem but is not portable.
- **Passing Open File Descriptors**: Forking a child process to drop privileges and open the file, then passing the file descriptor back, is another partial solution but is expensive.

### 2.3 Related Work
- **Bishop and Dilger (1996)**: Provided a comprehensive analysis of the problem and discussed static analysis techniques.
- **Cowan et al. (RaceGuard)**: Addressed a similar race condition between `stat(2)` and `open(2)` by modifying the kernel.
- **Tsyrklevich and Yee**: Proposed a richer policy language and kernel modifications to intercept race conditions.

## 3. No Deterministic Solution
We prove that no deterministic solution exists under the following assumptions:
- The setuid program can only determine access permissions via `access(2)` or other pathname-based mechanisms.
- No system call provides both access checking and an unchangeable file identifier.
- An attacker can win all races against the setuid program.

**Theorem 1**: Under these assumptions, there is no way to write a secure setuid program against the `access(2)/open(2)` race.

**Proof**: Any sequence of system calls can be modeled as a string over the alphabet {a, o}, where 'a' represents an access-checking call and 'o' represents any other call. The attacker's actions can be modeled as a string over {g, b}, where 'g' swaps in a good file and 'b' swaps in a bad file. The attacker can always interleave these strings to ensure that each access check sees the good file, while all other operations see the bad file.

## 4. A Probabilistic Solution
Our probabilistic solution relaxes the assumption that the attacker can always win races. Instead, we assume the attacker has some probability of winning each race. The solution starts with the standard `access(2)` followed by `open(2)`, and then performs k strengthening rounds, where each round consists of an additional `access(2)` and `open(2)` call, followed by a check to verify that the same file was opened. The number of rounds, k, is a configurable parameter.

**Code Example**:
```c
int safe_open(const char *pathname, int flags, mode_t mode, int k) {
    int fd;
    struct stat st1, st2;

    if (access(pathname, R_OK) == 0 && (fd = open(pathname, flags, mode)) != -1) {
        fstat(fd, &st1);
        for (int i = 0; i < k; i++) {
            if (access(pathname, R_OK) == 0 && (fd = open(pathname, flags, mode)) != -1) {
                fstat(fd, &st2);
                if (st1.st_ino == st2.st_ino && st1.st_dev == st2.st_dev) {
                    return fd;
                }
            }
            close(fd);
        }
    }
    return -1;
}
```

This probabilistic approach adds overhead but significantly reduces the likelihood of a successful attack.

## 5. Conclusion
We have presented a probabilistic solution to the `access(2)/open(2)` race condition, which is a long-standing problem in setuid programming. By relaxing the assumption that the attacker can always win races, our solution provides a practical and portable way to mitigate this vulnerability.