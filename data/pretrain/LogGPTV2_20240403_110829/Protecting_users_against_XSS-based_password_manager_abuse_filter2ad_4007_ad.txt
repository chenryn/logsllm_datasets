### Enhancing Password Manager Security Against XSS Attacks

#### Introduction
This document discusses a method to inject a new field called `query` into a form. After the password manager fills in a placeholder in the password field, an attacker's code can copy this value into the newly added `query` field. By changing the form's action to the application's search functionality, if the password manager replaces all occurrences of the placeholder, the `query` parameter will also contain the plaintext password. Assuming the search page reflects the search term back to the user, the attacker can extract the password from the response. Therefore, ensuring that the password manager only replaces the correct field is essential.

#### 6.2 Implementation
To investigate the effectiveness of our proposal, we implemented a proof-of-concept password manager. Given the complexity of completely overhauling the built-in password managers in modern browsers, we chose to build a Firefox extension. This extension leverages the original, built-in password manager to store placeholder values, while the actual plaintext passwords are stored in a separate, extension-managed storage. For our prototype, we did not implement encryption for these values, as securely storing passwords within the browser was out of scope.

**Figure 2: Initial Login and Credential Storing**
1. The user is prompted to have the login manager remember the recently sent password.
2. Upon agreement, the login manager stores the username and password combination. Firefox notifies plugins when credentials are stored, providing the origin of the site, the names of the username and password fields, and the stored values.
3. Our extension saves this information in its own storage and replaces the password with a random placeholder (nonce). This nonce is also stored in the extension’s database to ensure the correct credentials can be retrieved later.

**Figure 3: Placeholder Restoration During Normal Login**
1. When the login page loads, the built-in password manager inserts the username and the placeholder into the form.
2. Similar to the internal password manager, the extension is notified of a password form submission.
3. The next outgoing POST request is scanned by our extension for the placeholder value. If found, the extension searches its database for the corresponding entry.
4. The entry's origin is checked against the current page's origin. If they match, the placeholder is replaced with the actual password, adhering to the constraint that only the password field (whose name is stored in the extension’s data) should be changed.
5. If the nonce is in the HTTP request but the parameter name does not match, the placeholder is not replaced, preventing the attacker from using the search functionality to extract the password.

We also evaluated the option of exchanging GET parameters. In our empirical study, none of the sites used forms with GET requests. However, an attacker could change the form method from POST to GET. If our password manager exchanged the nonce with the secret password, the adversary could read the complete URL and retrieve the password. Therefore, we explicitly disable the replacement of nonces in GET parameters and only replace them in POST requests.

#### 6.3 Evaluation

##### 6.3.1 Security Evaluation
After the password value is initially stored by the password manager, it is never again inserted into web documents, keeping it out of reach of potentially malicious JavaScript.

Our implementation enforces strict matching constraints before replacing the placeholder:
- Only password nonces with matching target origin and password parameter names are substituted with the actual password in the outgoing request.
- This effectively thwarts attacks where the adversary tries to leak the password by tampering with the password field between auto-fill and form submission.

However, the attacker model discussed by Gonzalez et al. [9]—positioned at the network layer—could still succeed if password data is transmitted in clear text. In our study of the Alexa Top 4000 sites, 44.1% of the examined sites used HTTP instead of HTTPS. In these cases, a network-based attacker could capture the secret login data from the traffic. This kind of attack cannot be fully prevented by a secure password manager.

##### 6.3.2 Functional Evaluation
From the user's perspective, the behavior remains unchanged compared to current password managers. After page load, the password field is automatically filled with masked characters. After form submission, the browser exchanges the password nonce with the actual value before sending it to the server.

Our approach aims to place the real password only in the outgoing request, not in the password field. This can cause issues with web applications that transform the password field's value before submission. For example, an application might hash the password on the client side.

In our evaluation of the top 4000 Alexa sites, we detected 325 JavaScript accesses to password data. Manual analysis revealed that 96 domains used client-side functionality like XmlHttpRequests to transmit password data. Out of these, 24 pages transformed the provided password (23 used hashing functions like MD5 and SHA1, and one encoded the password in Base64). The remaining 72 pages did not post the form directly; only 6 used HTTP GET requests, while the rest used HTTP POST. Our proposed approach would not work in these 30 cases, as our extension neither exchanges passwords directly in the input field nor modifies HTTP GET requests. However, current password managers do not support storing passwords that are not sent via HTML forms, so our approach is not inferior to existing solutions.

The purpose of the remaining 229 scripts was to verify that certain criteria were met, such as the username being an email address or the password meeting specific length requirements.

#### 7. Related Work
Most research in password managers focuses on generating unique passwords, secure storage, and protecting against phishing. The vulnerability of password managers to XSS attacks has been discussed since 2006, but researchers have not re-evaluated new concepts to protect users. In 2013, Gonzalez et al. [9] discovered a related network-based attack, proposing countermeasures that either share the same drawbacks or target strict network security, which is not applicable to our XSS attacker.

#### 8. Conclusion
We demonstrated that current implementations of built-in password managers in browsers are vulnerable to XSS attacks targeting stored passwords. The root cause is that password managers fill password fields with plaintext, accessible by client-side code. Our approach mitigates this by filling password fields with placeholders, only replacing them in the outgoing request. Our prototype enforces strict integrity constraints, ensuring the origins and names of both the login URL and saved password match.

Our solution robustly protects auto-saved passwords from XSS-based theft attempts and, in most cases, mitigates related network-level attacks, while maintaining high compatibility with current password manager behavior and real-world practices.

#### Acknowledgements
We thank Eric Schmall and Armin Stock for their contributions to the implementation and the anonymous reviewers for their feedback. Martin Johns' work was partially funded by the EU projects WebSand (FP7-256964) and STREWS (FP7-318097).

#### 9. References
[1] Alexa Internet, Inc. Alexa Top 500 Global Sites. Website, http://www.alexa.com/, accessed in March 2010.
[2] Barth, A. The web origin concept, November 2009.
[3] Bojinov, H., Bursztein, E., Boyen, X., and Boneh, D. Kamouflage: Loss-resistant password management. In Computer Security–ESORICS 2010. Springer, 2010, pp. 286–302.
[4] Chiasson, S., van Oorschot, P. C., and Biddle, R. A usability study and critique of two password managers. In 15th USENIX Security Symposium (2006), pp. 1–16.
[5] Dierks, T., and Allen, C. The TLS Protocol Version 1.0. RFC 2246, http://www.ietf.org/rfc/rfc2246.txt, January 1999.
[6] Dolske, J. On Firefox’s password manager. [online] https://blog.mozilla.org/dolske/2013/08/20/on-firefoxs-password-manager/, August 2013.
[7] Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S., Leach, P., Luotonen, A., and Stewart, L. HTTP Authentication: Basic and Digest Access Authentication. RFC 2617, http://www.ietf.org/rfc/rfc2617.txt, June 1999.
[8] Gasti, P., and Rasmussen, K. B. On the security of password manager database formats. In Computer Security–ESORICS 2012. Springer, 2012, pp. 770–787.
[9] Gonzalez, R., Chen, E. Y., and Jackson, C. Automated password extraction attack on modern password managers. arXiv preprint arXiv:1309.1416 (2013).
[10] Google Developers. Chrome Extensions - Developer’s Guide. [online], http://developer.chrome.com/extensions/devguide.html, last access 06/05/13, 2012.
[11] Halderman, J. A., Waters, B., and Felten, E. W. A convenient method for securely managing passwords. In Proceedings of the 14th international conference on World Wide Web (2005), ACM, pp. 471–479.
[12] Hickson, I. Web forms 2.0, April 2005.
[13] Ives, B., Walsh, K. R., and Schneider, H. The domino effect of password reuse. Communications of the ACM 47, 4 (2004), 75–78.
[14] Karole, A., Saxena, N., and Christin, N. A comparative usability evaluation of traditional password managers. In Information Security and Cryptology-ICISC 2010. Springer, 2011, pp. 233–251.
[15] Klein, A. DOM-based cross-site scripting or XSS of the third kind. Web Application Security Consortium, Articles 4 (2005).
[16] Lekies, S., Stock, B., and Johns, M. 25 million flows later: large-scale detection of DOM-based XSS. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security (2013), ACM, pp. 1193–1204.
[17] Magazinius, J., Phung, P. H., and Sands, D. Safe wrappers and sane policies for self-protecting JavaScript. In The 15th Nordic Conference in Secure IT Systems (October 2010), T. Aura, Ed., LNCS, Springer Verlag. (Selected papers from AppSec 2010).
[18] Mazurek, M. L., Komanduri, S., Vidas, T., Bauer, L., Christin, N., Cranor, L. F., Kelley, P. G., Shay, R., and Ur, B. Measuring password guessability for an entire university. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security (2013), ACM, pp. 173–186.
[19] Microsoft. IE8 security part VII: Clickjacking defenses, 2009.
[20] Mozilla. Firefox Add-On SDK - Passwords.
[21] Mozilla Developer Network. How to Turn Off Form Autocompletion. [online], https://developer.mozilla.org/en-US/docs/Mozilla/How_to_Turn_Off_Form_Autocompletion, May 2013.
[22] Mozilla Developer Network. Object.defineProperty(). [online], https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty, November 2013.
[23] O’Shannessy, P. Bug 359675 - provide an option to manually fill forms and log in.
[24] OWASP. Cross-site scripting (XSS), September 2013.
[25] Ross, B., Jackson, C., Miyake, N., Boneh, D., and Mitchell, J. C. Stronger password authentication using browser extensions. In Proceedings of the 14th Usenix Security Symposium (2005), vol. 1998.
[26] Rydstedt, G., Bursztein, E., Boneh, D., and Jackson, C. Busting Frame Busting: a Study of Clickjacking Vulnerabilities on Popular Sites. In Web 2.0 Security and Privacy (W2SP 2010) (2010).
[27] Security, W. Website security statistics report, May 2013.
[28] Toews, B. Abusing password managers with XSS. online, 04 2012.
[29] Wu, M., Miller, R. C., and Little, G. Web wallet: preventing phishing attacks by revealing user intentions. In Proceedings of the second symposium on Usable privacy and security (2006), ACM, pp. 102–113.
[30] Ye, Z. E., Smith, S., and Anthony, D. Trusted paths for browsers. ACM Transactions on Information and System Security (TISSEC) 8, 2 (2005), 153–186.
[31] Zhao, R., and Yue, C. All your browser-saved passwords could belong to us: A security analysis and a cloud-based new design. In Proceedings of the third ACM conference on Data and application security and privacy (2013), ACM, pp. 333–340.