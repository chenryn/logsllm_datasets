the corresponding timeout value; it is increased each
time timeri[j] expires.
silenti is a set containing the ids j of all the processes
pj such that timeri[j] has expired since its last reset-
ting; to reseti is a set containing the ids k of the pro-
cesses pk whose timer has to be reset.
• susp leveli[j] contains the integer that locally mea-
sures the current suspicion level of pj. It is the counter
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:12:21 UTC from IEEE Xplore.  Restrictions apply. 
used by pi to determine its current leader (see the in-
vocation of leader()in Task T 2).
The variable suspected byi[j]: set used by pi to man-
age the increases of susp leveli[j]. Each time pi
knows that a process pk suspects pj it includes k in
suspected byi[j]. Then, when the number of pro-
cesses in suspected byi[j] reaches the threshold α, pi
increases susp leveli[j] and resets suspected byi[j]
to ∅ for a new observation period.
• sni: local counter used to generate the increasing se-
quence numbers attached to each message sent by pi.
• statei: set containing an element for each process
pk that belongs to membersi, namely, the most re-
cent information issued by pk that pi has received so
far (directly from pk or indirectly from a path involv-
ing other processes). That information is a quadruple
(k, snk, candk, silentk) where the component candk
is the set {(susp levelk[`], `) | ` ∈ membersk } from
which pk elects its leader.
Process behavior The aim of the ﬁrst task of the protocol
is to disseminate to all the processes the latest state known
by pi. That task is made up of an inﬁnite loop (executed
every η time units) during which pi ﬁrst updates its local
variables suspected byi[j] and susp leveli[j] according to
the current values of the sets silenti and membersi . Then
pi updates its own quadruple in statei to its most recent
value (which it has just computed) and broadcasts it (this
is the only place of the protocol where a process sends
messages). Finally, pi resets the timers that have to be reset
and updates accordingly to reseti to ∅.
The second task is devoted to the management of the
three events that can locally happen: local call to leader(),
timer expiration and message reception. The code associ-
ated with the two ﬁrst events is self-explanatory.
When it receives a message (denoted state msg), a
process pi considers and processes only the quadruples
that provide it with new information, i.e., the quadruples
(k, sn k, cand k, silent k) such that it has not yet pro-
cessed a quadruple (k, sn0, −, −) with sn0 ≥ sn k. For
each such quadruple, pi updates statei (it also allocates new
local variables if k is the id of a process it has never heard of
before). Finally, pi updates its local variables susp leveli[`]
and suspected byi[`] according to the information it learns
from each new quadruple (k, sn k, cand k, silent k) it has
received in state msg.
3.2 Proof of the Protocol
Considering that each processing block (body of the
loop in Task T 1, local call to leader(), timer expiration and
message reception managed in Task T 2) is executed atomi-
cally, we have (cid:0)j ∈ membersi(cid:1) iff (cid:0)(j, −, −, −) ∈ statei(cid:1)
iff (cid:0)suspected byi[j] and suspected byi[j] are allocated(cid:1).
We also have (cid:0)timeri[j] and timeouti[j] are allocated(cid:1)
iff (cid:0)j ∈ membersi \ {i}(cid:1).
It follows from these ob-
servations that all
the local variables are well-deﬁned:
they are associated exactly with the processes known by
pi. Moreover, a process pi never suspects itself, i.e., we
never have i ∈ silenti (this follows from the fact that,
as timeri[i] does not exist, that timer cannot expire - the
timer expiration in T 2 is the only place where a process id
is added to silenti, Line 08 of Figure 1-).
The proof considers an arbitrary run R. Let L be the set
that contains all the processes pi that are correct in R and
|reach(i)| ≥ t − f . By property (C2) and by assumption
L 6= ∅.
Lemma 1 [7] Let (k, sn, −, −) be a quadruple received by
a correct process pi. All the correct processes eventually
receive a quadruple (k, sn0, −, −) such that sn0 ≥ sn.
Lemma 2 [7] Let pi be a process in L. There is a time after
which, for any process pj in reach(i), i ∈ silentj remains
permanently false.
Lemma 3 [7] Let pi be a process in L. There is a time af-
ter which the local variables susp levelk[i] of all the cor-
rect processes pk remain forever equal to the same bounded
value (denoted SLi).
Lemma 4 [7] Let B be the set of processes pi such that
susp levelk[i] remains bounded at some correct process
pk.
the local variables
susp levelk[i] of all the correct processes pk remain for-
ever equal to the same bounded value (denoted SLi).
(2) ∀i ∈ B,
(1) B 6= ∅.
Lemma 5 [7] Let pi be a faulty process. Either all the cor-
rect processes pj are such that i /∈ membersj forever, or
their local variables susp levelj[i] increase indeﬁnitely.
Theorem 1 [7] The protocol described in Figure 1 ensures
that, after some ﬁnite time, all the correct processes have
forever the same correct leader.
4 A Communication-Efﬁcient Protocol
As announced previously, this section presents an even-
tual leader protocol where, after some ﬁnite time, a single
process sends messages forever. Moreover, no message car-
ries values that increase indeﬁnitely: the counters carried by
a message take a ﬁnite number of values. This means that,
be the execution ﬁnite or inﬁnite, both the local memory of
each process and the message size are ﬁnite. The process
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:12:21 UTC from IEEE Xplore.  Restrictions apply. 
Init: allocate susp leveli[i] and suspected byi[i]; susp leveli[i] ← 0; suspected byi[i] ← ∅;
membersi ← {i}; to reseti ← ∅; silenti ← ∅; sni ← 0;
statei ← {(i, sni, {(susp leveli[i], i)}, silenti)} % initial knowledge (K1) %
—————————————————————————————————————————–
Task T 1:
repeat forever every η time units
sni ← sni + 1;
for each j ∈ silenti do suspected byi[j] ← suspected byi[j] ∪ {i} end for;
for each j ∈ membersi such that |suspected byi[j]| ≥ α do % initial knowledge (K2) %
replace (i, −, −, −) in statei by (i, sni, {(susp leveli[j], j) | j ∈ membersi }, silenti);
susp leveli[j] ← susp leveli[j] + 1; suspected byi[j] ← ∅ end for;
(01)
(02)
(03)
(04)
(05)
(06) broadcast (statei);
(07)
end repeat
for each j ∈ to reseti do set timeri[j] to timeouti[j] end for; to reseti ← ∅
—————————————————————————————————————————–
Task T 2:
when leader() is invoked by the upper layer:
return `` such that (−, `) = lex min({(susp leveli[j], j)}j∈membersi )´
when timeri[j] expires:
(08)
timeouti[j] ← timeouti[j] + 1; silenti ← silenti ∪ {j}
when state msg is received:
(09)
let K = { (k, sn k, cand k, silent k) |
(k, sn k, cand k, silent k) ∈ state msg ∧ 6 ∃ (k, sn0, −, −) ∈ statei with sn0 ≥ sn k };
for each (k, sn k, cand k, silent k) ∈ K do
if k ∈ membersi then replace (k, −, −, −) in statei by (k, sn k, cand k, silent k);
stop timeri[k]; to reseti ← to reseti ∪ {k}; silenti ← silenti \ {k}
(10)
(11)
(12)
(13)
(14)
(15)
(16)
(17)
(18)
(19)
else add (k, sn k, cand k, silent k) to statei;
allocate susp leveli[k], suspected byi[k], timeouti[k] and timeri[k];
susp leveli[k] ← 0; suspected byi[k] ← ∅; timeouti[k] ← η;
membersi ← membersi ∪ {k}; to reseti ← to reseti ∪ {k}
end if
end for;
for each (k, sn k, cand k, silent k) ∈ K do
for each (sl, `) ∈ cand k do susp leveli[`] ← max(susp leveli[`], sl) end for;
for each ` ∈ silent k do suspected byi[`] ← suspected byi[`] ∪ {k} end for
end for
Figure 1. An eventual leader protocol (code for pi)
initial knowledge is limited to (K1), while the network be-
havior is assumed to satisfy (C1’) and (C2’). Moreover, it
is assumed that there is no message duplication.
4.1 Description of the Protocol
The protocol is described in Figure 2. As the protocol
described in Figure 1, this protocol is made up of two tasks,
but presents important differences with respect to the previ-
ous protocol.
Local variables A ﬁrst difference is the Task T 1, where
a process pi sends messages only when it considers it is
a leader (Line 01). Moreover, if, after being a leader, pi
considers it is no longer a leader, it broadcasts a message to
indicate that it considers locally it is no longer leader (Line
04). A message sent with a tag ﬁeld equal to heartbeat (Line
03) is called a heartbeat message; similarly, a message sent
with a tag ﬁeld equal to stop leader (Line 04) is called a
stop leader message.
A second difference lies in the additional local variables
that each process has to manage. Each process pi main-
tains a set, denoted contendersi, plus local counters, de-
noted hbci and last stop leaderi[k] (for each process pk
that pi is aware of). More speciﬁcally, we have:
• The set contendersi contains the ids of the processes
that compete to become the ﬁnal common leader, from
pi’s point of view. So, we always have contendersi ⊆
membersi . Moreover, we also always have i ∈
contendersi . This ensures that a leader election is not
missed since, from its point of view, pi is always com-
peting to become the leader.
• The local counter hbci registers the number of distinct
periods during which pi considered itself the leader. A
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:12:21 UTC from IEEE Xplore.  Restrictions apply. 
period starts when leader() = i becomes true, and ﬁn-
ishes when thereafter it becomes false (Lines 01-04).
• The counter last stop leaderi[k] contains the greatest
hbck value ever received in a stop leader message sent
by pk. This counter is used by pi to take into account
a heartbeat message (Line 12) or a stop leader mes-
sage (Line 14) sent by pk, only if no “more recent”
stop leader message has been received (the notion of
“more recent” is with respect to the value of hbci asso-
ciated with and carried by each message).
Messages Another difference lies in the shape and the
content of the messages sent by a process. A message has
ﬁve ﬁelds (tag k, k, sl k, silent k, hbc k) whose meaning
is the following:
• The ﬁeld tag k can take three values: heartbeat,
stop leader or suspicion that deﬁnes the type of the
message. (Similarly to the previous cases, a message
tagged suspicion is called a suspicion message. Such
a message is sent only at Line 05.)
• The second ﬁeld contains the id k of the message
sender.
• sl k is the value of susp levelk[k] when pk sent
the value of
that message.
susp levelk[k] can be disseminated only by pk.
Let us observe that
• silent k = j means that pk suspects pj to be faulty.
Such a suspicion is due to a timer expiration that oc-
curs at Line 05. (Let us notice that the ﬁeld silent k
of a message that is not a suspicion message is always
equal to ⊥.)
• hbc k:
this ﬁeld contains the value of the period
counter hbck of the sender pk when it sent the mes-
sage. (It is set to 0 in suspicion messages.)
The set of messages tagged heartbeat or stop leader de-
ﬁnes a single type of message. Differently, there are n
types of messages tagged suspicion: each pair (suspicion,
silentk) deﬁnes a type.
Process behavior When a timer timeri[j] expires, pi
broadcasts a message indicating it suspects pj (Line 05)3,
and accordingly suppresses j from contendersi . Together
3The suspicion message sent by pi concerns only pj.
It is sent by
a broadcast primitive only because the model does not offer a point-