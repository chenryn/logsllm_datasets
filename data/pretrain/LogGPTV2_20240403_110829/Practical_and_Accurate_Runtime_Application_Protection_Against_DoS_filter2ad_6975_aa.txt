title:Practical and Accurate Runtime Application Protection Against DoS
Attacks
author:Mohamed Elsabagh and
Dan Fleck and
Angelos Stavrou and
Michael Kaplan and
Thomas Bowen
Practical and Accurate Runtime Application
Protection Against DoS Attacks
Mohamed Elsabagh1(B), Dan Fleck1, Angelos Stavrou1,
Michael Kaplan2, and Thomas Bowen2
1 George Mason University, Fairfax, VA 22030, USA
{melsabag,dfleck,astavrou}@gmu.edu
2 Vencore Labs, Red Bank, NJ 07701, USA
{mkaplan,tbowen}@vencorelabs.com
Abstract. Software Denial-of-Service (DoS) attacks use maliciously
crafted inputs aiming to exhaust available resources of the target soft-
ware. These application-level DoS attacks have become even more preva-
lent due to the increasing code complexity and modular nature of Inter-
net services that are deployed in cloud environments, where resources are
shared and not always guaranteed. To make matters worse, many code
testing and veriﬁcation techniques cannot cope with the code size and
diversity present in most services used to deliver the majority of everyday
Internet applications. In this paper, we propose Cogo, a practical system
for early DoS detection and mitigation of software DoS attacks. Unlike
prior solutions, Cogo builds behavioral models of network I/O events in
linear time and employs Probabilistic Finite Automata (PFA) models to
recognize future resource exhaustion states. Our tracing of events spans
then entire code stack from userland to kernel. In many cases, we can
block attacks far before impacting legitimate live sessions. We demon-
strate the eﬀectiveness and performance of Cogo using commercial-grade
testbeds of two large and popular Internet services: Apache and the
VoIP OpenSIPS servers. Cogo required less than 12 min of training time
to achieve high accuracy: less than 0.0194% false positives rate, while
detecting a wide range of resource exhaustion attacks less than seven
seconds into the attacks. Finally, Cogo had only two to three percent
per-session overhead.
Keywords: Software DoS · Early detection · Slow-rate attacks · Prob-
abilistic Finite Automata
1 Introduction
Software availability is a major concern for the success of today’s interconnected
Internet services. As technologies become more advanced and complex, servicing
Electronic supplementary material The online version of this chapter (doi:10.
1007/978-3-319-66332-6 20) contains supplementary material, which is available to
authorized users.
c(cid:2) Springer International Publishing AG 2017
M. Dacier et al. (Eds.): RAID 2017, LNCS 10453, pp. 450–471, 2017.
DOI: 10.1007/978-3-319-66332-6 20
Practical and Accurate Runtime Application Protection
451
an ever increasing number of users and devices, they become much harder to
properly design and test against inputs and runtime conditions that may result
in resource exhaustion and, eventually, denial-of-service (DoS). Recent surveys
clearly indicate that business owners are concerned about DoS attacks over other
security concerns [6,8]. A system is vulnerable to resource exhaustion attacks
if it fails to properly regulate the resources that can be allocated to individual
user sessions and the service overall. Resource DoS attacks can target system
resources such as memory, computing (CPU), and I/O including ﬁle access and
traditional network resources [21,23,37]. Contrary to the common belief, resource
exhaustion attacks are increasing in numbers, becoming even more prevalent and
risky when compared to network layer attacks [1,21].
Recent work by Elsabagh et al. [25] proposed Radmin, a system for detecting
DoS attacks at the application layer. Radmin operated by learning (oﬄine) and
enforcing (online) resource consumption patterns of programs. Radmin showed
promising results; however, it had a quadratic training time complexity in the
training data size that makes it prohibitive to apply to large code bases. More-
over, Radmin was tested on stateless traﬃc and synthetic attacks rather than
on live traﬃc and known attacks used in practice. Radmin also did not cover
network state and I/O which are common targets for attacks. Another limi-
tation was that Radmin was heavily dependent on “normal” patterns of pure
resource utilization without modeling the rate at which individual resources were
acquired and released. As we show in our experiments, lack of taking into consid-
eration when individual resources were allocated can lead to prolonged evasion
by Slow-rate [11] attacks, violating the early detection goal of Radmin.
In this paper, we propose Cogo as a novel Probabilistic Finite Automata
(PFA) based system for runtime detection and mitigation of software resource
exhaustion DoS attacks. Cogo fully addresses all the aforementioned limitations
of Radmin, enabling early detection of real-world attacks in many cases before
they are able to aﬀect the service operation or quality. Our approach operates
in two phases: oﬄine and online. In the oﬄine phase, Cogo monitors the entire
resource consumption behavior of the target program — including its network
I/O — and builds PFA models that characterize the program’s resource behavior
over time. Cogo monitors network I/O at the individual socket level and sup-
ports monitoring of containerized processes. To reduce modeling complexity, we
introduce an eﬃcient PFA learning algorithm that operates in linear time. Dur-
ing the online phase, Cogo actively monitors the program and detects deviations
from the learned behaviors. It attributes anomalies to the speciﬁc threads and
connections causing them, allowing for selectively limiting resource utilization of
individual sessions that may violate the models.
We built a working prototype implementation of Cogo by extending the code
base of Radmin [25] which oﬀered several integrated user/kernel tracing capabili-
ties and an extensible PFA detection engine. We extended Radmin by supporting
new low-level network I/O monitoring, process migration, and monitoring con-
tainerized processes. Extending Radmin allowed us to benchmark our approach
452
M. Elsabagh et al.
in a uniﬁed way and provide comparative results.1 We discuss two case stud-
ies using real-world attacks and commercial-grade testbeds against The Apache
HTTP Server [2] and the VoIP OpenSIPS [9] server. In our experiments, Cogo
achieved a signiﬁcant improvement in training time over Radmin, requiring only
few minutes instead of days to train and build the models. This is signiﬁcant
since in real-world systems training data are expectantly large in size. In addition
to short training time, Cogo achieved a low false positive rate (FPR) (0.019%
for Apache, 0.063% for OpenSIPS) using small models (76 MB for Apache,
55 MB for OpenSIPS). Moreover, Cogo swiftly detected the attacks in less than
seven seconds into their execution, resulting in zero downtime in some cases.
Its runtime overhead is negligible. it increased the latency by 0.2 ± 0.3 ms per
request on average, resulting in two to three percent per-session overhead.
To summarize, this study makes the following contributions:
– Demonstrates Cogo as a system for early detection and mitigation of resource
exhaustion DoS attacks against real-word complex Internet services. Our app-
roach extends prior work on Radmin [25] by enabling network stack tracing
from the application to the kernel, monitoring containerized processes, and
attaching to running processes.
– Presents and discusses a linear time training algorithm that reduces the train-
ing and model building time complexity.
– Studies the eﬀectiveness of Cogo using realistic testbeds with real-world
attacks on Apache and the VoIP OpenSIPS server. The results demonstrate
that Cogo is suitable for large-scale deployment as it is scalable, accurate,
has low false positives, and can mitigate real-world attacks.
2 Assumptions and Threat Model
Cogo focuses on DoS attacks that occur at the application layer such as algo-
rithmic, state, and protocol-speciﬁc attacks. Volumetric attacks targeting the
network and transport layers, as well as other attack vectors such as code exe-
cution and memory exposure are outside the scope of this work. We assume
that attackers have full knowledge of the internals of the attacked program and
can craft benign-looking inputs that prevent the attacked program from serving
legitimate clients (a DoS attack). To protect a program with Cogo, we assume
the availability of benign training inputs that cover the typical desired behav-
ior of the program. Cogo uses kernel tracing; our prototype currently supports
only Linux and Unix-like operating systems since they power the majority of
servers.2 However, the approach itself does not place restrictions on the runtime
environment and can be ported to other operating systems with little eﬀort.3
1 By building on Radmin, Cogo inherits other monitoring sensors from Radmin such
as CPU and memory sensors.
2 Market share of operating systems by category: https://en.wikipedia.org/wiki/
Usage share of operating systems.
3 For Microsoft Windows, kernel tracing can be implemented using the Event Trac-
ing for Windows (ETW) kernel-mode API: https://msdn.microsoft.com/en-us/
windows/hardware/drivers/devtest/adding-event-tracing-to-kernel-mode-drivers.
Practical and Accurate Runtime Application Protection
453
We only focus on detection; proper remediation strategies after attack detection
should be implemented by the operator and are outside the scope of this work.
Nevertheless, Cogo oﬀers the option to migrate the oﬀending process or session
to another server, reduce its resource priority, or terminate it based on a con-
ﬁgurable policy. Finally, we assume that attackers can be local or remote, but
cannot overwrite system binaries or modify the kernel.
3 The Cogo System
Cogo operates in two phases: oﬄine training phase and online detection phase. In
the oﬄine phase, Cogo monitors the behavior of the target program on benign
inputs and collects a trace of network I/O measurements. The measurements
are sequences of raw data that include the event type (socket open, close, send,
receive), the consumption amount of the related resource (number of owned
sockets, traﬃc rate per socket), and meta data such as the PID, the socket inode
number, and timestamps.
The raw resource consumption amounts are encoded (quantized) over a
countable ﬁnite alphabet Σ (a ﬁnite set of symbols). |Σ| is a tuning parameter,
typically less than 16 for a maximum of 16 diﬀerent consumption levels. Encod-
ing is done by mapping (many-to-few) each raw resource consumption value to
one symbol from Σ. This is necessary since the PFAs (state machines) only work
with a ﬁnite set of values. Since encoding is a typical step in constructing ﬁnite
automata from arbitrary values, and due to space constraints, we refer interested
readers to [25,26] for more detail.4
Cogo constructs multiple PFAs from the measurements, one PFA per resource
type. The PFAs capture both the spatial and temporal network I/O patterns
in the measurements. In the online phase, Cogo executes the PFAs as shadow
state machines along with the target program and raises an alarm if a deviation
of the normal behavior is detected. Cogo detects anomalous behavior using the
statistical properties of the PFAs — namely the transition probabilities on the
PFA edges. In the following, we discuss how Cogo monitors network I/O and its
PFA learning and detection algorithms.
3.1 Network Tracing
Cogo monitors the network activity of the target program by intercepting the
traﬃc and socket events that happen in the context of target processes inside
the kernel. Speciﬁcally, it monitors all socket creation and destruction events
triggered by the target processes and tracks traﬃc sent or received on those
sockets. Cogo computes the transmit (TX) and receive (RX) rates per second
from the size and direction of the monitored traﬃc.
Cogo diﬀerentiates sockets from regular ﬁle descriptors inside the kernel as
follows: First, it retrieves a target process task structure in kernel space using
4 We use “measurements” to refer to encoded measurements in the rest of this paper.
454
M. Elsabagh et al.
the global process identiﬁer (PID). (The task structure is the actual structure
that represents the process inside the kernel.) It traverses the task structure and
extracts the ﬁle descriptors table owned by the process. For each ﬁle descrip-
tor, Cogo extracts the inode object associated with the ﬁle descriptor. (The
inode object is a kernel structure that contains all needed information to manip-
ulate and interact with a ﬁle descriptor. An inode represents each ﬁle in a ﬁle
system, including regular ﬁles and directories, as well as special ﬁles such as sock-
ets, devices, and pipes.) Cogo checks if the inode object contains an embedded
(allocated member) socket object. If found, Cogo marks the corresponding ﬁle
descriptor of the inode as a socket descriptor. Cogo tracks all identiﬁed sockets
by their low-level unique inode numbers throughout their lifetime.
For each identiﬁed socket, Cogo extracts the socket Internet protocol family
from the socket kernel structure. (The protocol family deﬁnes the collection of
protocols operating above the Internet Protocol (IP) layer that utilize an IP
address format. It can be one of two values: INET6 and INET for the IPv6
and IPv4 protocol families, respectively.) This is essential for determining how
to interpret the socket network addresses. Given a socket protocol family, Cogo
extracts the local and foreign addresses and port numbers, if available. Foreign
port numbers may not be available if the socket is a listening or a datagram
socket.
Cogo intercepts all transmit and receive socket events that occur in the con-
text of the monitored process in kernel space, including regular I/O operations
such as streamed and datagram I/O, asynchronous I/O (AIO) operations, and
operations utilizing a socket iterator. Cogo collects the direction (TX or RX)
and size of the traﬃc, and associates them with the corresponding socket inode
number. The TX and RX rates are computed periodically per socket. The period
length is conﬁgurable (defaults to 1 s). To minimize memory and runtime over-
head, Cogo installs a kernel timer that ticks once per period length, requiring
minimal memory per socket as only the last tick timestamp and total traﬃc size
need be kept in memory. It also minimizes runtime overhead by avoiding unnec-
essary context switches to compute the rates. Cogo also monitors the socket
status: connected or disconnected. When a socket disconnects or is freed by the
kernel, Cogo purges any structures associated with that particular socket from
its kernel memory.
3.2 Training and Learning
Cogo employs Probabilistic Finite Automata (PFA) based learning and detec-
tion. Cogo builds one PFA for each monitored resource: one PFA for socket