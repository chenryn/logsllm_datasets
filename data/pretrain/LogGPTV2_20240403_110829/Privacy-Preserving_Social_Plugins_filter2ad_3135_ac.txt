Facepile
-
Live Stream
User messages
Names and pictures of friends that have
liked the page are shown ﬁrst
Like page
User’s Name, picture, birthday, gender, lo-
cation, email (preﬁlled in registration form)
Names and pictures of friends that have
liked the page
-
Register
-
Post message
Table 1: Public vs. Personalized content in Facebook’s social plugins [12].
Facebook
Social Plugin
Like Button
Send Button
Comments
Activity Feed
Recommendations
Like Box
Registration
Facepile
Live Stream
Exposed information
during loading
Original
SafeButton
Personalized
Content with
SafeButton
IP addr. + cookies
IP addr. + cookies
IP addr. + cookies
IP addr. + cookies
IP addr. + cookies
IP addr. + cookies
IP addr. + cookies
IP addr. + cookies
IP addr. + cookies
IP addr.
None
IP addr.
IP addr.
IP addr.
IP addr.
None
IP addr.
IP addr.
Complete
Complete
Partial1
Partial2
Complete
Complete
Complete
Complete
Complete
1 When all comments are loaded at once, all personalized content is
complete. In case they are loaded in a paginated form, some of the
friends’ comments (if any) might not be shown in the ﬁrst page.
2 Some of the friends’ comments (if any) might be omitted (access to
comments is currently not supported by Facebook’s APIs).
Table 2: For 7 out of the 9 Facebook social plugins,
SafeButton provides exactly the same personalized con-
tent without exposing any user-identifying information.
Similarly to the Like button, Facepile presents pictures
of friends who have liked a page, and that information
is already present in the DataStore. The Send, Register,
and Login buttons do not present any kind of dynamic
information, and thus can be rendered instantly without
issuing any network request.
Similarly to the Recommendations plugin, content
personalization in the Comments plugin consists of giv-
ing priority to comments made by friends. SafeButton
retrieves the non-personalized version of the plugin, and
reorders the received comments so that friends’ com-
ments are placed on top. When all comments for a page
are fetched at once, the personalized information pre-
sented by SafeButton is fully consistent with the origi-
nal version of the plugin. However, when comments are
presented in a paginated form, only the ﬁrst sub-page
is loaded. The current version of the Graph API does
not support the retrieval of comments (e.g., in contrast
to “likes”), and thus in case friends’ comments appear
deeper than the ﬁrst sub-page, SafeButton will not show
them on top (a workaround would be to download all
subsequent comment sub-pages, but for popular pages
this would result in a prohibitive amount of data).
The Activity Feed plugin is essentially a wrapper for
showing a mix of “likes” and comments by friends, and
thus again SafeButton’s output lacks any friends’ com-
ments. Note that our implementation is based solely on
the functionality provided by the Graph API [10], and
we refrain from scraping of web content for any missing
information. Ideally, future extensions of the Graph API
will allow SafeButton to fully support the personalized
content of all plugins. We discuss this and other missing
functionality that would facilitate SafeButton in Sec. 7.
5.2 Space Requirements
To explore the local space requirements of SafeButton,
we gathered a data set that simulates the friends a user
may have. Starting with a set of friends from the authors’
Facebook proﬁles, we crawled the social graph and iden-
tiﬁed about 300,000 proﬁles with relaxed privacy settings
that allow unrestricted access to all proﬁle information,
including the pages that person has liked or shared in the
past. From these proﬁles, we randomly selected a set
of 5,000—the maximum number of friends a person can
have on Facebook [6].
Data
190 Friends
5,000 Friends
Names, IDs of Friends
Photos of Friends
Likes of Friends
Shares of Friends
10.5KB
463.4KB
4.6MB
318.4KB
204.8KB
11.8MB
126.7MB
7.0MB
Total
5.4MB
145.7MB
Average (per friend)
29.2KB
29.7KB
)
B
M
(
e
c
a
p
S
l
a
c
o
L
146
100
10
1
0
11.3MB for a user with 400 friends
(avg. friend count in dataset)
5.4MB for a user
with 190 friends
(avg. friend count
on Facebook)
Table 3: Storage space requirements for the average case
of 190 friends and the borderline case of 5,000 friends.
To quantify the space needed for storing the required
data from a user’s social circle, we initialized SafeBut-
ton using the above 5,000 proﬁles. In detail, SafeButton
prefetches the names, IDs, and photos of all friends, and
the URLs of all pages they have liked or shared. Al-
though we have employed a slow-paced data retrieval
process (5sec delay between consecutive requests), the
entire process for all 5,000 friends took less than 10
hours. For typical users with a few hundred friends, boot-
strapping completes in less than a hour. As already men-
tioned, users are free to use the browser during that time
or shut it down and resume the process later.
Table 3 shows a breakdown of the consumed space for
the average case of a user with 190 friends [58] and the
extreme case of a user with 5,000 friends, which totals
5.4MB and 145.7MB, respectively. Evidently, consumed
space is dominated by “likes,” an observation consistent
with the prevailing popularity of the Like button com-
pared to the other social plugins. To gain a better un-
derstanding of storage requirements for different users,
Fig. 5 shows the consumed space as a function of the
number of friends, which as expected increases linearly.
We should note that the above results are speciﬁc for
the particular data set, and the storage space might in-
crease for users with more “verbose” friends. Further-
more, the proﬁle history of current members will only
continue to grow as time passes by, and the storage space
for older users in the future will probably be larger. Nev-
ertheless, these results are indicative for the overall mag-
nitude of SafeButton’s storage requirements, which can
be considered reasonable even for current smartphones,
while the storage space of future devices can only be ex-
pected to increase.
To further investigate the distribution of “likes,” the
factor that dominates local space, we plot in Fig. 6 the
CDF of the number of “likes” of each user in our data
set. The median user has 122 “likes,” while there are
some users with much heavier interaction: about 10% of
the users have more than 504 “likes.” The total num-
ber of “likes” was 1,110,000, i.e., 222 per user on aver-
age. This number falls within the same order of mag-
0
1
10
100
1000
5000
Number of Friends
Figure 5: Local space consumption for the required in-
formation from a user’s social circle as a function of the
number of friends. For the average case of a user with
190 friends, SafeButton needs just 5.4MB.
90th Percentile: 504 Likes
Median: 122 Likes
s
r
e
s
U
f
o
%
100
90
80
70
60
50
40
30
20
10
0
0
1
10
100
1000
4500
Number of Likes
Figure 6: CDF of the number of “likes” of each user.
nitude as previously reported statistics, which suggest
that there are about 381,861 “likes” per minute on Face-
book [31]. With a total population of about 901 million
active users [8], this results in about 217 “likes” per user
per year. These results indicate that our data set is not
particularly biased towards excessively active or inactive
proﬁles.
Besides the storage of social information, SafeBut-
ton maintains the X-Cache for quick access to frequently
used non-personalized information about a social plugin.
To get an estimate about its size requirements, we vis-
ited the home pages of the ﬁrst 1,000 of the top web-
sites according to alexa.com that contained at least one
Facebook social plugin. About 82.4% of the identiﬁed
plugins corresponded to a Like Button or Like Box, 14%
to Facebook Connect, 3% to Recommendations, 0.5% to
Send Button, and 0.1% to Facepile and Activity Box. Af-
ter visiting all above sites, X-Cache grew to no more than
850KB, for more than 2,500 entries.
5.3 Speed
In this experiment, we explore the rendering time of
social plugins with and without SafeButton. Specif-
its content
ically, we measured the time from the moment the
HTTP request for loading the IFRAME of a Like
is
button is sent by the browser, until
fully rendered in the browser window.
To do so,
we instrumented Firefox with measurement code trig-
gered by http-on-modify-request notiﬁcations [20]
and pageshow events [21]. We chose to measure the ren-
dering time for the IFRAME instead of the entire page
to eliminate measurement variations due to other remote
elements in the page. This is consistent with the way a
browser renders a page, since IFRAMEs are loaded in
parallel with the rest of its elements.
We consider the following three scenarios: i) Firefox
rendering a Like button unobstructed, and Firefox with
SafeButton rendering a Like button when there is ii) an
X-Cache miss or iii) an X-Cache hit. For the original
Like button, we used a hot browser cache to cancel out
loading times for any required external elements, such
as CSS and JavaScipt ﬁles. Using SafeButton, visiting
a newly or infrequently accessed webpage will result in
a miss in the X-Cache. For a Like button, this means
that besides looking up the relevant information in the
local DataStore, SafeButton must (anonymously) query
Facebook to retrieve the total number of “likes.” For
frequently accessed pages, such personalized informa-
tion will likely already exist in the X-Cache, and thus
SafeButton does not place any network request at all.
Using a set of the ﬁrst 100 among the top websites ac-
cording to alexa.com that contain a Like button, we mea-
sured the loading time of the Like button’s IFRAME for
each site (each measurement was repeated 1,000 times).
Figure 7 shows the median loading time across all sites
for each scenario, as well as its breakdown according to
the events that take place during loading. The rendering
time for the original Like button is 351ms, most of which
is spent for communication with Facebook. In particu-
lar, it takes 130ms from the moment the browser issues
the request for the IFRAME until the ﬁrst byte of the re-
sponse is received, and another 204ms for the completion
of the transfer. In contrast, SafeButton is much faster, as
it needs 127ms for rendering the Like button in case of
an X-Cache miss (2.8 times faster than the original), and
just 24ms in case of an X-Cache hit (14.6 times faster),
due to the absence of any network communication.
The difference in the response times for the network
requests placed by the original Like button and SafeBut-
ton in case of an X-Cache miss can be associated with the
different API used and amount of data returned in each
case. SafeButton uses the Graph API to retrieve just the
total number of “likes,” which is returned as a raw ASCII
value that is just a few bytes long. In contrast, the origi-
nal plugin communicates with a different endpoint from
the side of Facebook, and fetches a full HTML page with
embedded CSS and JavaScript content. While these two
Lookup
HTTP
Response
SafeButton
 X−Cache hit
SafeButton
 X−Cache miss
Original
 Social Plugin
0
50
100
150
200
250
300
350
Time in milliseconds
Processing
Network: request dispatch to first response byte
Network: first response byte to end of transmission