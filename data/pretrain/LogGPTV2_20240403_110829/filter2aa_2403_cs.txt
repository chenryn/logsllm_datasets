第 23 章 函 数 指 针 
355 
图 23.1  OllyDbg:第一次调用 comp()函数 
图 23.2  OllyDbg:调用 comp()函数之后返回 qsort()函数 
图 23.3 所示的是第二次调用 comp()函数的情形。这一时刻被比较的两个值不相同。 
图 23.3  OllyDbg:第二次调用 comp()函数 
23.1.2  MSVC+tracer 
程序将比较的 10 个数分别是 1892, 45, 200, −98, 4087, 5, −12345, 1087, 88, −100000。 
我们在 comp()函数里找到第一个 CMP 指令，它的地址是 0x0040100C。我们在此处设置一个断点： 
tracer.exe -l:17_1.exe bpx=17_1.exe!0x0040100C 
当程序执行到该断点时，各寄存器的情况如下： 
PID=4336|New process 17_1.exe 
(0) 17_1.exe!0x40100c 
EAX=0x00000764 EBX=0x0051f7c8 ECX=0x00000005 EDX=0x00000000 
ESI=0x0051f7d8 EDI=0x0051f7b4 EBP=0x0051f794 ESP=0x0051f67c 
EIP=0x0028100c 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
356 
逆向工程权威指南（上册） 
FLAGS=IF 
(0) 17_1.exe!0x40100c 
EAX=0x00000005 EBX=0x0051f7c8 ECX=0xfffe7960 EDX=0x00000000 
ESI=0x0051f7d8 EDI=0x0051f7b4 EBP=0x0051f794 ESP=0x0051f67c 
EIP=0x0028100c 
FLAGS=PF ZF IF 
(0) 17_1.exe!0x40100c 
EAX=0x00000764 EBX=0x0051f7c8 ECX=0x00000005 EDX=0x00000000 
ESI=0x0051f7d8 EDI=0x0051f7b4 EBP=0x0051f794 ESP=0x0051f67c 
EIP=0x0028100c 
FLAGS=CF PF ZF IF 
... 
从中筛选 EAX 和 ECX 寄存器的值： 
EAX=0x00000764 ECX=0x00000005 
EAX=0x00000005 ECX=0xfffe7960 
EAX=0x00000764 ECX=0x00000005 
EAX=0x0000002d ECX=0x00000005 
EAX=0x00000058 ECX=0x00000005 
EAX=0x0000043f ECX=0x00000005 
EAX=0xffffcfc7 ECX=0x00000005 
EAX=0x000000c8 ECX=0x00000005 
EAX=0xffffff9e ECX=0x00000005 
EAX=0x00000ff7 ECX=0x00000005 
EAX=0x00000ff7 ECX=0x00000005 
EAX=0xffffff9e ECX=0x00000005 
EAX=0xffffff9e ECX=0x00000005 
EAX=0xffffcfc7 ECX=0xfffe7960 
EAX=0x00000005 ECX=0xffffcfc7 
EAX=0xffffff9e ECX=0x00000005 
EAX=0xffffcfc7 ECX=0xfffe7960 
EAX=0xffffff9e ECX=0xffffcfc7 
EAX=0xffffcfc7 ECX=0xfffe7960 
EAX=0x000000c8 ECX=0x00000ff7 
EAX=0x0000002d ECX=0x00000ff7 
EAX=0x0000043f ECX=0x00000ff7 
EAX=0x00000058 ECX=0x00000ff7 
EAX=0x00000764 ECX=0x00000ff7 
EAX=0x000000c8 ECX=0x00000764 
EAX=0x0000002d ECX=0x00000764 
EAX=0x0000043f ECX=0x00000764 
EAX=0x00000058 ECX=0x00000764 
EAX=0x000000c8 ECX=0x00000058 
EAX=0x0000002d ECX=0x000000c8 
EAX=0x0000043f ECX=0x000000c8 
EAX=0x000000c8 ECX=0x00000058 
EAX=0x0000002d ECX=0x000000c8 
EAX=0x0000002d ECX=0x00000058 
得到上面所列的 34 组数据。也就是说，quick sort 算法需要把这 10 个数字进行 34 次比较。 
23.1.3  MSVC + tracer（指令分析） 
本节利用 tracer 程序收集寄存器里出现过的所有值，稍后在 IDA 里显示它们。 
首先使用 tracer 程序追踪 comp()函数里的所有指令： 
tracer.exe -l:17_1.exe bpf=17_1.exe!0x00401000,trace:cc 
然后再用 IDA 加载刚才生成的.idc-script 文件。如图 23.4 所示。 
通过分析 qsort()函数调用的函数指针，IDA 能够显示出相应的函数名称（PtFuncCompare）。 
由于数组里存储的是 32 位数据，所以指针 a 和指针 b 多次指向数组里的不同地方，且它们每次变换之
间的地址差是 4 字节。 
我们还注意到 0x401010 和 0x401012 处的指令就没有被执行过（所以被标记为白色）。这是因为传递给
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 23 章 函 数 指 针 
357 
comp()函数的值都不相同，函数返回值不会是 0。 
图 23.4  tracer 与 IDA 的联动/某些值在屏幕右侧边界之外 
23.2  GCC 
GCC 的编译方法与 MSVC 的编译方式十分相近。 
指令清单 23.3  GCC 
lea     eax, [esp+40h+var_28] 
mov     [esp+40h+var_40], eax 
mov     [esp+40h+var_28], 764h 
mov     [esp+40h+var_24], 2Dh 
mov     [esp+40h+var_20], 0C8h 
mov     [esp+40h+var_1C], 0FFFFFF9Eh 
mov     [esp+40h+var_18], 0FF7h 
mov     [esp+40h+var_14], 5 
mov     [esp+40h+var_10], 0FFFFCFC7h 
mov     [esp+40h+var_C], 43Fh 
mov     [esp+40h+var_8], 58h 
mov     [esp+40h+var_4], 0FFFE7960h 
mov     [esp+40h+var_34], offset comp 
mov     [esp+40h+var_38], 4 
mov     [esp+40h+var_3C], 0Ah 
call    _qsort 
comp()函数对应的代码如下所示。 
                  public comp 
comp  
proc near 
arg_0  
= dword ptr  8 
arg_4  
= dword ptr  0Ch 
                  push    ebp 
                  mov     ebp, esp 
                  mov     eax, [ebp+arg_4] 
                  mov     ecx, [ebp+arg_0] 
                  mov     edx, [eax] 
                  xor     eax, eax 
                  cmp     [ecx], edx 
                  jnz     short loc_8048458 
                  pop     ebp 
                  retn 
loc_8048458: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
358 
逆向工程权威指南（上册） 
                  setnl   al 
                  movzx   eax, al 
                  lea      eax, [eax+eax-1] 
                  pop      ebp 
                  retn 
comp   
endp 
qsort()函数的计算过程封装在库文件 libc.so.6 里。因此，Linux 的 qsort()只是 qsort_r()的 wrapper。 
此处会调用 quicksort()函数，后者再通过函数指针调用我们编写的 comp()函数。 
glibc version -2.10.1 中的 lib.so.6 文件有下述指令。 
指令清单 23.4  (file libc.so.6, glibc version—2.10.1) 
.text:0002DDF6  
mov     edx, [ebp+arg_10] 
.text:0002DDF9  
mov     [esp+4], esi 
.text:0002DDFD  
mov     [esp], edi 
.text:0002DE00  
mov     [esp+8], edx 
.text:0002DE04  
call    [ebp+arg_C] 
... 
23.2.1  GCC + GDB（有源代码的情况） 
在有源代码的情况下
①
① 请参阅本章第一个源程序。 
，我们能够针对源代码的行号（第 11 行，第一次调用比较函数）设置断点（b
指令）。这种调试方法有一个前提条件：我们还要在编译源代码时保留调试信息（启用编译选项-g），以便
保留地址表和行号之间的对应关系。这样，我们就能根据变量名打印变量的值（p指令）：调试信息会保留
寄存器和（或）数据栈元素与变量之间的对应关系。 
我们也可以查看数据栈（bt），并且找出 Glibc 的 msort_with_tmp()函数使用了哪些中间函数。 
调试过程如下。 
指令清单 23.5  GDB 调试过程 
dennis@ubuntuvm:~/polygon$ gcc 17_1.c -g 
dennis@ubuntuvm:~/polygon$ gdb ./a.out 
GNU gdb (GDB) 7.6.1-ubuntu 
Copyright (C) 2013 Free Software Foundation, Inc. 
License GPLv3+: GNU GPL version 3 or later  
This is free software: you are free to change and redistribute it. 
There is NO WARRANTY, to the extent permitted by law. Type "show copying" 
and "show warranty" for details. 
This GDB was configured as "i686-linux-gnu". 
For bug reporting instructions, please see: 
... 
Reading symbols from /home/dennis/polygon/a.out...done. 
(gdb) b 17_1.c:11 
Breakpoint 1 at 0x804845f: file 17_1.c, line 11. 
(gdb) run 
Starting program: /home/dennis/polygon/./a.out 
Breakpoint 1, comp (_a=0xbffff0f8, _b=_b@entry=0xbffff0fc) at 17_1.c:11 
11          if (*a==*b) 
(gdb) p *a 
$1 = 1892 
(gdb) p *b 
$2 = 45 
(gdb) c 
Continuing. 
Breakpoint 1, comp (_a=0xbffff104, _b=_b@entry=0xbffff108) at 17_1.c:11 
11          if (*a==*b) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 23 章 函 数 指 针 
359 
(gdb) p *a 
$3 = -98 
(gdb) p *b 
$4 = 4087 
(gdb) bt 
#0  comp (_a=0xbffff0f8, _b=_b@entry=0xbffff0fc) at 17_1.c:11 
#1  0xb7e42872 in msort_with_tmp (p=p@entry=0xbffff07c, b=b@entry=0xbffff0f8, n=n@entry=2) 
    at msort.c:65 
#2  0xb7e4273e in msort_with_tmp (n=2, b=0xbffff0f8, p=0xbffff07c) at msort.c:45 
#3  msort_with_tmp (p=p@entry=0xbffff07c, b=b@entry=0xbffff0f8, n=n@entry=5) at msort.c:53 
#4  0xb7e4273e in msort_with_tmp (n=5, b=0xbffff0f8, p=0xbffff07c) at msort.c:45 
#5  msort_with_tmp (p=p@entry=0xbffff07c, b=b@entry=0xbffff0f8, n=n@entry=10) at msort.c:53 
#6  0xb7e42cef in msort_with_tmp (n=10, b=0xbffff0f8, p=0xbffff07c) at msort.c:45 
#7  __GI_qsort_r (b=b@entry=0xbffff0f8, n=n@entry=10, s=s@entry=4, cmp=cmp@entry=0x804844d , 
    arg=arg@entry=0x0) at msort.c:297 
#8  0xb7e42dcf in __GI_qsort (b=0xbffff0f8, n=10, s=4, cmp=0x804844d ) at msort.c:307 
#9  0x0804850d in main (argc=1, argv=0xbffff1c4) at 17_1.c:26 
(gdb) 
23.2.2  GCC+GDB（没有源代码的情况） 
但是实际情况是，多数情况下我们没有程序的源代码。此时需要反编译 comp()函数（disas 指令），找
到第一个 CMP 指令并在该处设置断点。在此之后，我们要查看所有寄存器的值（info registers）。虽然此时
还能够查看数据栈（bt），但是所得信息非常有限：程序里没有保存 comp()函数的行号信息。 
调试过程如下。 
指令清单 23.6  GDB 调试过程 
dennis@ubuntuvm:~/polygon$ gcc 17_1.c 
dennis@ubuntuvm:~/polygon$ gdb ./a.out 
GNU gdb (GDB) 7.6.1-ubuntu 
Copyright (C) 2013 Free Software Foundation, Inc. 
License GPLv3+: GNU GPL version 3 or later  
This is free software: you are free to change and redistribute it. 
There is NO WARRANTY, to the extent permitted by law.  Type "show copying" 
and "show warranty" for details. 
This GDB was configured as "i686-linux-gnu". 
For bug reporting instructions, please see: 
... 
Reading symbols from /home/dennis/polygon/a.out...(no debugging symbols found)...done. 
(gdb) set disassembly-flavor intel 
(gdb) disas comp 
Dump of assembler code for function comp: 
   0x0804844d : 
   push   ebp 
   0x0804844e : 
   mov    ebp,esp 
   0x08048450 : 
   sub    esp,0x10 
   0x08048453 : 
   mov    eax,DWORD PTR [ebp+0x8] 
   0x08048456 : 
   mov    DWORD PTR [ebp-0x8],eax 
   0x08048459 :    mov    eax,DWORD PTR [ebp+0xc] 
   0x0804845c :    mov    DWORD PTR [ebp-0x4],eax 
   0x0804845f :    mov    eax,DWORD PTR [ebp-0x8] 
   0x08048462 :    mov    edx,DWORD PTR [eax] 
   0x08048464 :    mov    eax,DWORD PTR [ebp-0x4] 
   0x08048467 :    mov    eax,DWORD PTR [eax] 
   0x08048469 :    cmp    edx,eax 
   0x0804846b :    jne    0x8048474  
   0x0804846d :    mov    eax,0x0 
   0x08048472 :    jmp    0x804848e  
   0x08048474 :    mov    eax,DWORD PTR [ebp-0x8] 
   0x08048477 :    mov    edx,DWORD PTR [eax] 
   0x08048479 :    mov    eax,DWORD PTR [ebp-0x4] 
   0x0804847c :    mov    eax,DWORD PTR [eax] 
   0x0804847e :    cmp    edx,eax 
   0x08048480 :    jge    0x8048489  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
360 
逆向工程权威指南（上册） 
   0x08048482 :    mov    eax,0xffffffff 
   0x08048487 :    jmp    0x804848e  
   0x08048489 :    mov    eax,0x1 
   0x0804848e :    leave 
   0x0804848f :    ret 
End of assembler dump. 
(gdb) b *0x08048469 
Breakpoint 1 at 0x8048469 
(gdb) run 
Starting program: /home/dennis/polygon/./a.out 
Breakpoint 1, 0x08048469 in comp () 
(gdb) info registers 
eax 
    0x2d    45 
ecx 
    0xbffff0f8    -1073745672 
edx 
    0x764    1892 
ebx 
    0xb7fc0000    -1208221696 
esp 
    0xbfffeeb8    0xbfffeeb8 
ebp 
    0xbfffeec8    0xbfffeec8 
esi 
    0xbffff0fc    -1073745668 
edi 
    0xbffff010    -1073745904 
eip 
    0x8048469 
   0x8048469  
eflags 
    0x286    [ PF SF IF ] 
cs 
    0x73    115 
ss 
    0x7b    123 
ds 
    0x7b    123 
es 
    0x7b    123 
fs 
    0x00     0 
gs 
    0x33    51 
(gdb) c 
Continuing. 
Breakpoint 1, 0x08048469 in comp () 
(gdb) info registers 
eax 
    0xff7    4087 
ecx 
    0xbffff104    -1073745660 
edx 
    0xffffff9e    -98 
ebx 
    0xb7fc0000    -1208221696 
esp 
    0xbfffee58    0xbfffee58 
ebp 
    0xbfffee68    0xbfffee68 
esi 
    0xbffff108    -1073745656 
edi 
    0xbffff010    -1073745904 
eip 
    0x8048469 