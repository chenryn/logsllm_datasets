 **James Berry** opened **SPR-4229** and commented
in CommonsMultipartResolver.isMultipart, the following call is made:
    return ServletFileUpload.isMultipartContent(new ServletRequestContext(request));
instead, this call should be made:
    return ServletFileUpload.isMultipartContent(request);
Not only does this save an object allocation, but it actually works: the
ServletRequestContext is wrapped around the request in the first call doesn't
have enough information to do a good test of the request to determine whether
it actually is multipart. In particular, the request type is not verified to
be a post, which results in a hang during processing of what ends up being a
bogus multipart request due to a redirect, for instance.
The second call (without the ServletRequestContext wrapper) does a more
thorough check of the request to verify that it is actually valid.
The described problem manifests for me when when I do a 303 redirect from a
POSTed form. For some browsers, the subsequent GET operation continues to
include the content-type multipart header, which triggers a sequence of events
leading to a read that HANGS on a kept-alive request as the servlet tries to
parse the bogus multipart content.
* * *
**Affects:** 2.5 final