1) The plaintext packet reaches the WireGuard interface, wg0.
2) The destination IP address of the packet, 192.168.87.21,
is inspected, which matches the peer TrMv...WXX0. (If it
matches no peer, it is dropped, and the sender is informed
by a standard ICMP “no route to host” packet, as well as
returning -ENOKEY to user space.)
3) The symmetric sending encryption key and nonce counter
of the secure session associated with peer TrMv...WXX0
are used to encrypt the plaintext packet using ChaCha20-
Poly1305.
4) A header containing various ﬁelds, explained in sec-
tion V-D, is prepended to the now encrypted packet.
5) This header and encrypted packet, together, are sent as a
UDP packet to the Internet UDP/IP endpoint associated
with peer TrMv...WXX0, resulting in an outer UDP/IP packet
containing as its payload a header and encrypted inner-
packet. The peer’s endpoint is either pre-conﬁgured, or it
is learned from the outer external source IP header ﬁeld
of the most recent correctly-authenticated packet received.
(Otherwise, if no endpoint can be determined, the packet is
dropped, an ICMP message is sent, and -EHOSTUNREACH
is returned to user space.)
A UDP/IP packet reaches UDP port 8746 of the host, which is
the listening UDP port of interface wg0:
1) A UDP/IP packet containing a particular header and an
encrypted payload is received on the correct port (in this
particular case, port 8746).
2) Using the header (described below in section V-D),
WireGuard determines that it is associated with peer
TrMv...WXX0’s secure session, checks the validity of the
message counter, and attempts to authenticate and decrypt
it using the secure session’s receiving symmetric key. If
it cannot determine a peer or if authentication fails, the
packet is dropped.
3) Since the packet has authenticated correctly, the source IP
of the outer UDP/IP packet is used to update the endpoint
for peer TrMv...WXX0.
4) Once the packet payload is decrypted, the interface has a
plaintext packet. If this is not an IP packet, it is dropped.
Otherwise, WireGuard checks to see if the source IP
address of the plaintext inner-packet routes correspondingly
in the cryptokey routing table. For example, if the source
IP of the decrypted plaintext packet is 192.168.31.28,
the packet correspondingly routes. But if the source IP is
10.192.122.3, the packet does not route correspondingly
for this peer, and is dropped.
5) If the plaintext packet has not been dropped, it is inserted
into the receive queue of the wg0 interface.
It would be possible to separate the list of allowed IPs into two
lists—one for checking the source address of incoming packets
and one for choosing peer based on the destination address.
But, by keeping these as part of the same list, it allows for
something similar to reverse-path ﬁltering. When sending a
packet, the list is consulted based on the destination IP; when
receiving a packet, that same list is consulted for determining if
the source IP is allowed. However, rather than asking whether
the received packet’s sending peer has that source IP as part
of its allowed IPs list, it instead is able to ask a more global
question—which peer would be chosen in the table for that
source IP, and does that peer match that of the received packet.
This enforces a one-to-one mapping of sending and receiving
IP addresses, so that if a packet is received from a particular
peer, replies to that IP will be guaranteed to go to that same
peer.
IV. Basic Usage
Before going deep into the cryptography and implementation
details, it may be useful to see a simple command line interface
3
for using WireGuard, to bring concreteness to the concepts
thus far presented.
Consider a Linux environment with a single physical
network interface, eth0, connecting it to the Internet with
a public IP of 192.95.5.69. A WireGuard interface, wg0,
can be added and conﬁgured to have a tunnel IP address
of 10.192.122.3 in a /24 subnet with the standard ip(8)
utilities:
Adding the wg0 interface
$ ip link add dev wg0 type wireguard
$ ip address add dev wg0 10.192.122.3/24
$ ip route add 10.0.0.0/8 dev wg0
$ ip address show
1: lo:  mtu 65536
inet 127.0.0.1/8 scope host lo
2: eth0:  mtu 1500
inet 192.95.5.69/24 scope global eth0
3: wg0:  mtu 1420
inet 10.192.122.3/24 scope global wg0
The cryptokey routing table can then be conﬁgured using
the wg(8) tool in a variety of fashions, including reading from
conﬁguration ﬁles:
Conﬁguring the cryptokey routing table of wg0
$ wg setconf wg0 configuration-1.conf
$ wg show wg0
interface: wg0
public key: HIgo...8ykw
private key: yAnz...fBmk
listening port: 8746
peer: xTIB...p8Dg
allowed ips: 10.192.124.0/24, 10.192.122.3/32
peer: TrMv...WXX0
allowed ips: 192.168.0.0/16, 10.192.122.4/32
peer: gN65...z6EA
allowed ips: 10.10.10.230/32
endpoint: 192.95.5.70:54421
$ ip link set wg0 up
$ ping 10.10.10.230
PING 10.10.10.230 56(84) bytes of data.
64 bytes: icmp_seq=1 ttl=49 time=0.01 ms
At this point, sending a packet to 10.10.10.230 on that
system will send the data through the wg0 interface, which
will encrypt the packet using a secure session associated
with the public key gN65...z6EA and send that encrypted
and encapsulated packet to 192.95.5.70:54421 over UDP.
When receiving a packet from 10.10.10.230 on wg0, the
administrator can be assured that it is authentically from
gN65...z6EA.
processed asynchronously to transport data messages. These
messages use the “IK” pattern from Noise [22], in addition to a
novel cookie construction to mitigate denial of service attacks.
The net result of the protocol is a very robust security system,
which achieves the requirements of authenticated key exchange
(AKE) security [17], avoids key-compromise impersonation,
avoids replay attacks, provides perfect forward secrecy, provides
identity hiding of static public keys similar to SIGMA [14],
and has resistance to denial of service attacks.
A. Silence is a Virtue
One design goal of WireGuard is to avoid storing any
state prior to authentication and to not send any responses to
unauthenticated packets. With no state stored for unauthenti-
cated packets, and with no response generated, WireGuard is
invisible to illegitimate peers and network scanners. Several
classes of attacks are avoided by not allowing unauthenticated
packets to inﬂuence any state. And more generally, it is possible
to implement WireGuard in a way that requires no dynamic
memory allocation at all, even for authenticated packets, as
explained in section VII. However, this property requires the
very ﬁrst message received by the responder to authenticate
the initiator. Having authentication in the ﬁrst packet like this
potentially opens up the responder to a replay attack. An attacker
could replay initial handshake messages to trick the responder
into regenerating its ephemeral key, thereby invalidating the
session of the legitimate initiator (though not aﬀecting the
secrecy or authenticity of any messages). To prevent this, a
12-byte TAI64N [4] timestamp is included, encrypted and
authenticated, in the ﬁrst message. The responder keeps track
of the greatest timestamp received per peer and discards packets
containing timestamps less than or equal to it. (In fact, it does
not even have to be an accurate timestamp; it simply must
be a per-peer monotonically increasing 96-bit number.) If the
responder restarts and loses this state, that is not a problem:
even though an initial packet from earlier can be replayed, it
could not possibly disrupt any ongoing secure sessions, because
the responder has just restarted and therefore has no active
secure sessions to disrupt. Once the initiator reestablishes a
secure session with the responder after its restart, the initiator
will be using a greater timestamp, invalidating the previous
one. This timestamp ensures that an attacker may not disrupt
a current session between initiator and responder via replay
attack. From an implementation point of view, TAI64N [4] is
very convenient because it is big-endian, allowing comparisons
between two 12-byte timestamps to be done using standard
memcmp().
V. Protocol & Cryptography
B. Optional Pre-shared Symmetric Key Mode
As mentioned prior, in order to begin sending encrypted
encapsulated packets, a 1-RTT key exchange handshake must
ﬁrst take place. The initiator sends a message to the responder,
and the responder sends a message back to the initiator. After
this handshake, the initiator may send encrypted messages
using a shared pair of symmetric keys, one for sending and
one for receiving, to the responder, and following the ﬁrst
encrypted message from initator to responder, the responder
may begin to send encrypted messages to the initiator. This
ordering restriction is to require conﬁrmation as described for
KEA+C [17], as well as allowing handshake message to be
WireGuard rests upon peers exchanging static public keys
with each other a priori, as their static identities. The secrecy
of all data sent relies on the security of the Curve25519 ECDH
function. In order to mitigate any future advances in quantum
computing, WireGuard also supports a mode in which all peers
might additionally pre-share a single symmetric encryption
key amongst themselves, in order to add an additional layer of
symmetric encryption. The attack model here is that adversaries
may be recording encrypted traﬃc on a long term basis, in
hopes of someday being able to break Curve25519 and decrypt
past traﬃc. While pre-sharing a single symmetric encryption
4
key is troublesome from a key management perspective and
might be more likely stolen, the idea is that by the time
quantum computing advances to break Curve25519, this pre-
shared symmetric key has been long forgotten. And, more
importantly, in the shorter term, if the pre-shared symmetric
key is compromised, the Curve25519 keys still provide more
than suﬃcient protection. In lieu of using a completely post-
quantum crypto system, which as of writing are not practical
for use here, this optional hybrid approach of a pre-shared
symmetric key to complement the elliptic curve cryptography
provides a sound and acceptable trade-oﬀ for the extremely
paranoid. In the following sections, “PSK” refers to this 32-byte
pre-shared symmetric key.
C. Denial of Service Mitigation & Cookies
Computing Curve25519 point multiplication is CPU inten-
sive, even if Curve25519 is an extremely fast curve on most
processors. In order to determine the authenticity of a handshake
message, a Curve25519 multiplication must be computed, which
means there is a potential avenue for a denial-of-service attack.
In order to fend oﬀ a CPU-exhaustion attack, if the responder—
the recipient of a message—is under load, it may choose to
not process a handshake message (either an initiation or a
response handshake message), but instead to respond with a
cookie reply message, containing a cookie. The initiator then
uses this cookie in order to resend the message and have it be
accepted the following time by the responder.
The responder maintains a secret random value that changes
every two minutes. A cookie is simply the result of computing
a MAC of the initiator’s source IP address using this changing
secret as the MAC key. The initiator, when resending its
message, sends a MAC of its message using this cookie as
the MAC key. When the responder receives the message, if
it is under load, it may choose whether or not to accept and
process the message based on whether or not there is a correct
MAC that uses the cookie as the key. This mechanism ties
messages sent from an initiator to its IP address, giving proof
of IP ownership, allowing for rate limiting using classical IP
rate limiting algorithms (token bucket, etc—see section VII-D
for implementation details).
This is more or less the scheme used by DTLS [23] and
IKEv2 [12]. However it suﬀers from three major ﬂaws. First,
as mentioned in section V-A, we prefer to stay silent by not
sending any reply to unauthenticated messages; indiscriminately
sending a cookie reply message when under load would break
this property. Second, the cookie should not be sent in clear
text, because a man-in-the-middle could use this to then send
fraudulent messages that are processed. And third, the initiator
himself could be denial-of-service attacked by being sent
fraudulent cookies, which it would then use with no success in
computing a MAC of its message. The cookie mechanism of
WireGuard, which uses two MACs (msg.mac1 and msg.mac2),
ﬁxes these problems, the computations for which will be shown
in section V-D4 below.
For the ﬁrst problem, in order for the responder to remain
silent, even while under load, all messages have a ﬁrst MAC
(msg.mac1) that uses the responder’s public key and optionally
the PSK. This means that at the very least, a peer sending
a message must know to whom it is talking (by virtue of
knowing its public key, and possibly the PSK), in order to
elicit any kind of response. Under load or not under load, this
ﬁrst MAC (msg.mac1) always is required to be present and
valid. While the public key of the responder itself is not secret,
it is suﬃciently secret within this attack model, in which the
goal is to ensure stealthiness of services, and so knowing the
responder’s public key is suﬃcient proof for already knowing
of its existence. (And of course, if the PSK is in use, this adds
another even stronger layer).
Likewise, to solve the second problem—that of sending
MACs in clear text—we apply an AEAD to the cookie in transit,
again using as a symmetric encryption key the responder’s
public key, optionally the PSK, and a random public salt. Again,
the mostly public values here are suﬃcient for our purposes
within the denial-of-service attack threat model.
Finally, to solve the third problem, we use the “additional
data” ﬁeld of the AEAD to encrypt the cookie in transit to
additionally authenticate the ﬁrst MAC (msg.mac1) of the
initiating message that provoked a cookie reply message. This
ensures that an attacker without a man-in-the-middle position
cannot send torrents of invalid cookie replies to initiators to
prevent them from authenticating with a correct cookie. (An
attacker with an man-in-the-middle position could simply drop
cookie reply messages anyway to prevent a connection, so that
case is not relevant.) In other words, we use the AD ﬁeld to
bind cookie replies to initiation messages.
With these problems solved, we can then add the aforemen-
tioned second MAC (msg.mac2) using the securely transmitted
cookie as the MAC key. When the responder is under load, it
will only accept messages that additionally have this second
MAC.
In sum, the responder, after computing these MACs as well
and comparing them to the ones received in the message, must
always reject messages with an invalid msg.mac1, and when
under load may reject messages with an invalid msg.mac2. If
the responder receives a message with a valid msg.mac1 yet
with an invalid msg.mac2, and is under load, it may respond
with a cookie reply message, detailed in section V-D7. This
considerably improves on the cookie scheme used by DTLS
and IKEv2.
In contrast to HIPv2 [19], which solves this problem by us-
ing a 2-RTT key exchange and complexity puzzles, WireGuard
eschews puzzle-solving constructs, because the former requires
storing state while the latter makes the relationship between
initiator and responder asymmetric. In WireGuard, either peer
at any point might be motivated to begin a handshake. This
means that it is not feasible to require a complexity puzzle
from the initiator, because the initatior and responder may soon
change roles, turning this mitigation mechanism into a denial
of service vulnerability itself. Our above cookie solution, in
contrast, enables denial of service attack mitigation on a 1-
RTT protocol, while keeping the initiator and responder roles
symmetric.
D. Messages
There are four types of messages, each preﬁxed by a single-
byte message type identiﬁer, notated as msg.type below:
5