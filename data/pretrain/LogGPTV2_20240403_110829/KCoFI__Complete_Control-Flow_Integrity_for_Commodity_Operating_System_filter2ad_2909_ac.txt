Section IV-H. This native processor state within the new thread
structure is initialized so that it will begin execution in the
function passed to sva.init.icontext(); the supplied
function pointer is checked to ensure that it points to the
beginning of a function.
The sva.init.icontext() instruction also creates
empty Interrupt and Saved Interrupt stacks within the new
thread structure. It then creates a new Interrupt Context that
is identical to the top-most Interrupt Context in the current
thread’s Interrupt Stack;
then pushes this new Interrupt
Context on to the top of the Interrupt Stack in the new thread
structure. This new Interrupt Context is then modiﬁed to use
the stack speciﬁed in the call to sva.init.icontext().
it
it
Finally, sva.init.icontext() veriﬁes that the spec-
iﬁed stack does not overlap with KCoFI memory. If the
check passes,
initializes the new stack so that a return
from the speciﬁed function will return into the KCoFI VM
system call dispatching code. The conﬁguration of the Interrupt
Context will ensure that if the function returns that control-ﬂow
integrity is not violated. When the function returns, control
ﬂow will return to the KCoFI VM which will attempt to return
from a system call, trap, or interrupt. If the new Interrupt
Context was cloned from the initial Interrupt Context from
the ﬁrst thread executing at system boot, the Interrupt Context
will have a program counter value of zero and will therefore
fault, preventing a CFI violation. Otherwise, the new Interrupt
Context will have a valid program counter value from the
Interrupt Context from which it was duplicated, and therefore,
the return from interrupt will succeed.
H. Context Switching
Context switching requires saving the current processor
state into memory and loading new state on to the processor.
The state, including the stack pointer and program counter, are
vulnerable while residing in memory.
As Table III shows, KCoFI provides an instruction called
sva.swap() that saves the current processor state into the
thread structure within KCoFI memory and loads new state
that has been saved by a previous call to sva.swap() or
created by sva.init.icontext(). State is represented
by opaque identiﬁers returned by the sva.swap() and
sva.init.icontext() instructions. This prevents the
sva.swap() instruction from loading invalid program state.
By saving state inside the KCoFI VM memory, the program
counter within the saved state cannot be corrupted by memory
safety errors. The sva.swap() instruction disables interrupts
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:09 UTC from IEEE Xplore.  Restrictions apply. 
TABLE III.
KCOFI CONTEXT SWITCHING INSTRUCTIONS
Name
sva.swap (unsigned newID, unsigned * oldID)
Description
Save the current processor native state and store an identiﬁer representing it into oldID
and then load the state represented by newID.
TABLE IV.
KCOFI NATIVE CODE TRANSLATION INSTRUCTIONS
Name
sva.translate (void * buffer, char * funcname, bool kmode)
sva.disable.privcode (void)
Description
Translate the SVA bitcode starting at buffer into native code. If kmode is
true, then native code is generated for use in the processor’s privileged mode.
Otherwise, native code will be generated for use in the processor’s unprivileged
mode. The address to the function funcname will be returned.
Disable further translation of SVA bitcode for use as native code in the
processor’s privileged state.
while it is executing, so that it cannot be interrupted and will
never load inconsistent state.
The original SVA provides a similar instruction called
sva.swap.integer() [5]. The primary difference be-
tween the SVA instruction and the KCoFI version is that
KCoFI does not split the native processor state into individual
components; it saves integer registers, ﬂoating point registers,
and vector registers. While not necessary for control-ﬂow in-
tegrity, it does ensure that the correct ﬂoating point and vector
state is restored on context switching, providing applications
with a more secure context switch.
I. Code Translation
Any OS code (e.g., the core kernel or a driver) to be loaded
for execution must start out in SVA bitcode form, whereas a
user program can be SVA bitcode or native code. When the
OS needs to load and execute any piece of software, it ﬁrst
passes the code to the sva.translate intrinsic shown in
Table IV. The intrinsic takes a Boolean argument indicating
whether the code should be translated for use in user-space or
kernel-space mode. If this ﬂag is true, the intrinsic veriﬁes that
the code is in SVA bitcode form. If the code is SVA bitcode,
sva.translate will translate the bitcode into native code
and cache it ofﬂine for future use. sva.translate returns
a pointer to the native code of function funcname.
If the function pointer points to kernel code,
the ker-
nel can call the function directly; this permits the use of
dynamically loaded kernel modules. If the function pointer
points to user-mode code,
then the kernel must use the
sva.reinit.icontext() instruction to set up a user-
space Interrupt Context that will begin execution of the ap-
plication code when the Interrupt Context is loaded on to the
processor on the next return from interrupt. These mechanisms
provide a way of securely implementing the exec() family
of system calls.
While KCoFI already prevents traditional native code in-
jection (because the KCoFI VM prevents bad control-transfers
and disallows executable and writable memory), it must also
prevent virtual code injection attacks. A virtual code injection
attack uses a memory safety error to modify some SVA bitcode
before it is passed to the sva.translate() intrinsic to
trick the kernel into adding new, arbitrary code into the kernel.
To prevent such an attack, our design provides the
sva.disable.privcode() instruction, which turns off
code generation for the kernel. This will allow the kernel to
dynamically load bitcode ﬁles for drivers and extend its native
code section during boot but prevent further driver loading after
boot. A kernel that loads all of its drivers during boot would
use this instruction immediately before executing the ﬁrst user
process to limit the time at which it would be vulnerable to
virtual code injection attacks. (Note that the OS feature to hot-
swap devices that require loading new device drivers might be
precluded by this design.)
J.
Installing Interrupt and System Call Handlers
Operating systems designate functions that should be called
when interrupts, traps, and system calls occur. Like SVA [5],
KCoFI provides instructions that allow the OS kernel to specify
a function to handle a given interrupt, trap, or system call.
These instructions ﬁrst check that the speciﬁed address is
within the kernel’s virtual address space and has a CFI label.
If the function address passes these checks, the instruction
records the function address in a table that maps interrupt
vector/system call numbers to interrupt/system call handling
functions.
The hardware’s interrupt vector table resides in KCoFI
memory and directs interrupts into KCoFI’s own interrupt and
system call handling code. This code saves the interrupted
program state as described in Section IV-F and then passes
control to the function that the kernel designated.
V. FORMAL MODEL AND PROOFS
In order to demonstrate that key features of our design are
correct, we built a model of the KCoFI virtual machine in the
Coq proof assistant [22] and provide a partial proof that our
design enforces control-ﬂow integrity. The model and proofs
comprise 2,008 non-comment lines of Coq code. Our proofs
are checked mechanically by Coq.
As we are primarily interested in showing that our design
in Section IV is correct, we model a simpliﬁed version of
the KCoFI VM. While our model is simpler than and not
proven sound with respect to the full implementation, it models
key features for which formal reasoning about control-ﬂow
integrity has not previously been done; these features include
virtual to physical address translation, trap entry and return,
context switching, and signal handler dispatch.
298
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:09 UTC from IEEE Xplore.  Restrictions apply. 
TABLE V.
SUMMARY OF FORMAL MODEL SUPPORT FUNCTIONS
Function
valid
swapOn
swapOff
ipush
ipop
itop
saveIC
loadIC
getIPC
getIReg
Description
(v, pc, istack, sistack) → v
(v, n, istack, sistack) × pc → (true, pc, istack, sistack)
(v, pc, istack, sistack) → (f alse, 0, istack, sistack)
(v, pc, istack, sistack) × ic → (v, pc, ic :: istack, sistack)
(v, pc, ic :: istack, sistack) → (v, pc, istack, sistack)
(v, pc, ic :: istack, sistack) → ic
(v, pc, ic :: istack, sistack) → (v, pc, ic :: istack, ic :: sistack)
(v, pc, ic1 :: istack, ic2 :: sistack) → (v, pc, ic2 :: istack, sistack)
(R, pc) → pc
(R, pc) → R
Instructions
::=
loadi n
| load n
| store n
| add n
| sub n
| map n tlb
| jmp
| jeq n
| jneg n
| trap
| iret
| svaSwap
| svaRegisterTrap
| svaInitIContext f
| svaSaveIContext
| svaLoadIContext
| svaPushFunction n
Fig. 4.
register, R, as an implicit operand.
Instructions in KCoFI Model. Most instructions take the single
In this section, we describe our model of the KCoFI virtual
machine, our formal deﬁnition of control-ﬂow integrity for
operating system code, and our control-ﬂow integrity proofs.
A. KCoFI Virtual Machine Model
Our machine model is a simpliﬁed version of the KCoFI
virtual machine with the instruction set shown in Figure 4.
To simplify the language and its semantics, we opted to use a
simple assembly language instruction set for basic computation
instead of the SSA-based SVA instruction set. Operations such
as context switching and MMU conﬁguration are performed
using instructions similar to those described in Section IV.
Our model does not include all the KCoFI features and does
not model user-space code. However, it does include an MMU,
traps, context switching, and the ability to modify and restore
Interrupt Contexts as described in Section IV-F (which is used
to support signal handler dispatch).
The physical hardware is modeled as a tuple called the
conﬁguration that represents the current machine state. The
conﬁguration contains:
•
•
•
the value of a single hardware register R
a program counter PC
a memory (or store) σ that maps physical addresses
to values
299
•
•
•
•
•
•
•
a software TLB μ that maps virtual addresses to TLB
entries. A TLB entry is a tuple containing a physical
address and three booleans that represent read, write,
and execute permission to the physical address. The
function ρ returns the physical address within a TLB
entry while the functions RD(), WR(), and EX() return
true if the TLB entry permits read, write, and execute
access, respectively. Unlike real hardware, our model’s
MMU maps virtual
to physical addresses at byte
granularity.
a set of virtual addresses CFG to which branches and
traps may transfer control ﬂow. All new threads must
begin execution at a virtual address within CFG.
a pair (cs, ce) marking the ﬁrst and last physical
address of the kernel’s code segment
a current thread identiﬁer T
a new thread identiﬁer NT
a function τ that maps a thread identiﬁer to a thread.
A thread is a tuple (v, pc, istack, sistack) in which
v is a boolean that indicates whether a thread can
be context switched on to the CPU and pc is the
program counter at which execution should resume
when the thread is loaded on to the CPU. The istack
is the Interrupt Context stack in Figure 3 used when
traps and returns from traps occur. The sistack is the
Saved Interrupt Stack in Figure 3 and stores Interrupt
Contexts that are saved by svaSaveIContext.
a virtual address T H that is the address of the trap
handler function
Since the conﬁguration is large, we will replace one or
more elements with an ellipsis (i.e., ...) as necessary to keep
the text concise.
An Interrupt Context is a tuple that represents a subset of
the conﬁguration. It contains a copy of the machine’s single
register and the program counter. Interrupt Contexts are stored
in stacks with standard push/pop semantics. The special value
nil represents an empty stack; attempting to pop or read the
top value of an empty stack results in an Interrupt Context
with zero values.
There are several support functions, summarized in Ta-
ble V, that help make our semantics easier to read. The valid
function takes a thread T and returns the value of its boolean
ﬂag. The swapOn function takes a thread T and an integer and
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:09 UTC from IEEE Xplore.  Restrictions apply. 
returns an identical thread with its boolean ﬂag set to true and
its program counter set to the speciﬁed integer. Conversely,
the swapOff function takes a thread and returns a thread that
is identical except for its boolean being set to false and its
program counter being set to zero. The ipush function takes
a thread and an Interrupt Context and returns a thread with
the Interrupt Context pushed on to the istack member of the
thread tuple. The ipop function is similar but pops the top-
most Interrupt Context off the thread’s istack. The saveIC
function takes a thread and returns an identical thread in which
the top-most element of the istack member is pushed on
to the sistack member. The loadIC function pops the top-
most Interrupt Context from the sistack member and uses that
value to replace the top-most member of the istack member.
The itop function takes a thread and returns the top-most
Interrupt Context on its istack. Finally, the getIPC and getIReg
functions take an Interrupt Context and return the program
counter and register value stored within the Interrupt Context,
respectively.
One feature of our conﬁguration is that the KCoFI VM’s in-
ternal data structures are not stored in memory; they are instead
part of the conﬁguration and can therefore not be modiﬁed by
the store instruction. An advantage of this approach is that
our proofs demonstrate that CFI is enforced regardless of the
mechanism employed to protect these data structures (i.e., it
shows that if these data structures are protected, then the proof
holds). The disadvantage of this approach is that it does not
prove that our sandoxing instrumentation on stores is designed
correctly. However, given the simplicity of our instrumentation,
we believe that having a simpler, more general proof is the
better tradeoff.
B. Instruction Set and Semantics
The instruction set is shown in Figure 4. The loadi
instruction loads the constant speciﬁed as its argument into the
register; the load instruction loads the value in the virtual
address given as its argument into the register. The store
instruction stores the value in the register to the speciﬁed
virtual memory address. The add (sub) instruction adds
(subtracts) a constant with the contents of the register and