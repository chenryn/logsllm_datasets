private TreeNode prev = nul1;
public void flatten(TreeNode root) {
if (root == nu11)
return;
flatten(root.right);
flatten(root.1eft);
root.right = prev;
root.1eft = nu11;
prev = root;
代码
package leetcode
☆
* Definition for a binary tree node.
type TreeNode struct {
Val int
Left *TreeNode
Right *TreeNode
---
## Page 245
//解法一非递归
func flatten(root *TreeNode){
list, cur := []int{},&TreeNode{}
preorder(root, &list)
cur = root
for i := l; i = 0; row--{
for col:= 0; col= 0;j--{
if j == 0 {
//最左边
dp[j] += triangle[i][0]
} else if j == len(triangle[i])-1 {
//最右边
dp[j]  += dp[j-1] + triangle[i][j]
}else {
//中间
dp[j] = min(dp[j-1]+triangle[i][j], dp[j]+triangle[i][j])
1
F
for i := 0; i  maxProfit {
maxProfit = prices[i] - min
if prices[i] stack[len(stack)-1] {
stack = append(stack, prices[i])
}else{
index := len(stack) - 1
for ; index >= 0;index--{
if stack[index]prices[i]{
profit += prices[i+l] - prices[i]
return profit
124.BinaryTreeMaximumPathSum
---
## Page 251
题目
Given a non-empty binary tree, find the maximum path sum.
For this problem, a path is defined as any sequence of nodes from some starting node to any
node in the tree along the parent-child connections. The path must contain at least one node
and does not need to go through the root.
Example 1:
Input: [1,2,3]
1
/
E
output: 6
Example 2:
Input: [10, 9,20, nu11, nu11,15,7]
-10
/
920
/
15
Output: 42
题目大意
给定一个非空二叉树，返回其最大路径和。本题中，路径被定义为一条从树中任意节点出发，达到任意
节点的序列。该路径至少包含一个节点，且不一定经过根节点。
解题思路
·给出一个二叉树，要求找一条路径使得路径的和是最大的。
·这一题思路比较简单，递归维护最大值即可。不过需要比较的对象比较多。maxPathSum（root）
=max(maxPathSum(root.Left),maxPathSum(root.Right),
maxPathSumFrom(root.Left) (if>0) + maxPathSumFrom(root.Right) (if>0) +
root.Va1)， 其中,maxPathSumFrom(root) = max(maxPathSumFrom(root.Left),
maxPathSumFrom(root.Right)) + root.Va1
代码
---
## Page 252
package leetcode
import "math"
/**
* Definition for a binary tree node.
type TreeNode struct {
valint
Left *TreeNode
Right *TreeNode
*
func maxPathSum(root *TreeNode) int {
if root == nil {
return 0
max := math.MinInt32
getPathSum(root,&max)
return max
func getPathSum(root *TreeNode, maxSum *int) int {
if root == nil {
return math.MinInt32
left := getPathSum(root.Left, maxSum)
right := getPathSum(root.Right, maxSum)
currMax := max(max(1eft+root.val, right+root.va1), root.Va1)
*maxSum = max(*maxSum, max(currMax, 1eft+right+root.Va1))
return currMax
125.ValidPalindrome
题目
Given a string, determine if it is a palindrome, considering only alphanumeric characters and
ignoring cases.
For example,
"A man, a plan, a canal: Panama" is a palindrome.
"race a car" is not a palindrome.
---
## Page 253
Note:
Have you consider that the string might be empty? This is a good question to ask during an
interview.
For the purpose of this problem, we define empty string as valid palindrome.
题目大意
判断所给的字符串是否是有效的回文串。
解题思路
简单题，按照题意做即可。
代码
package leetcode
import(
"strings"
func isPalindrome(s string) bool{
S = strings.ToLower(s)
i,j := 0,len(s)-1
for i < j{
for i< j && !ischar(s[i]){
i++
}
for i< j && !ischar(s[j]) {
j--
if s[i] != s[j] {
return false
i++
j-
return true
//判断c是否是字符或者数字
func isChar(c byte) bool{
if（'a<=c&&c<='z')11（'0'<=c&&c<='9）{
return true
---
## Page 254
return false
126.WordLadderll
题目
Given two words (beginWord and enoWordl), and a dlictionary's word list, find all shortest
transformation sequence(s) from beginWord to endWord, such that:
1. Only one letter can be changed at a time
2. Each transformed word must exist in the word list. Note that beginWord is not a transformed
word.
Note:
● Return an empty list if there is no such transformation sequence.
●All words have the same length.
● All words contain only lowercase alphabetic characters.
● You may assume no duplicates in the word list.
● You may assume beginWord and endWord are non-empty and are not the same.
Example 1:
Input:
beginword = "hit",
endword = “cog",
wordList = ["hot","dot","dog","lot","log","cog"]
Output:
["hi t","hot","dot”","dog","cog"],
["hit","hot",“lot","log","cog"]
1
Example 2:
Input:
beginword = "hit"
endword = "cog"
wordList = ["hot","dot","dog","1ot","log"]
Output:[]
Explanation: The endword "cog" is not in wordList, therefore no possible
transformation.
---
## Page 255
题目大意
给定两个单词（beginWord和endWord）和一个字典wordList，找出所有从beginWord 到
endWord的最短转换序列。转换需遵循如下规则：
1.每次转换只能改变一个字母。
2.转换过程中的中间单词必须是字典中的单词。
说明：
·如果不存在这样的转换序列，返回一个空列表。