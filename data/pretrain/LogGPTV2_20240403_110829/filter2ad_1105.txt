# A Portable TPM Based on USB Key

**Authors:**
- Dawei Zhang
- Zhen Han
- Guangwen Yan

**Affiliations:**
- School of Computer and Information, Beijing Jiaotong University, China
- Research Division, Beijing Watchdata System Company, China

**Contact:**
- Email: [PI:EMAIL]

## Abstract
Trusted computing technology aims to enhance platform security through the use of a Trusted Platform Module (TPM). However, the Trusted Computing Group's (TCG) architecture has several drawbacks for user-based applications. This paper introduces a new concept of a portable TPM (PTM) based on a USB key to address these issues. First, we use PTM to establish a trusted path between the verifier and the user in remote attestation, thereby extending the trust chain to the end user. Second, we design a trust model and platform management mechanism for PTM, which avoids single-point failures of the TPM and frequent sensitive data migrations between different platforms. Finally, we implement the PTM on a USB key using the Java Card Runtime Environment. Test results show that the PTM scheme is feasible for user-based applications.

## Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection

## General Terms
Security

## Keywords
Trusted Computing, Trusted Platform Module, Java Card

## 1. Introduction
Trusted Computing (TC) is a technology developed and promoted by the Trusted Computing Group (TCG). TC ensures that a computer behaves as expected, with these behaviors enforced by both hardware and software. The core component of TC is the Trusted Platform Module (TPM), a special-purpose integrated circuit built into various platforms to enable strong user authentication and secure communication. Devices with embedded TPMs enhance the ability of businesses, institutions, government agencies, and consumers to conduct trustworthy electronic transactions [1].

Remote attestation in TC allows devices to verify each other using TPMs. However, this architecture faces challenges when adapted for user-based attestation. In a networked environment, it is unclear why one device should be more trustworthy than another. Additionally, the trust chain established by remote attestation does not extend back to the user, and there is no trusted path between the remote verifier and the user due to potential malware on the userâ€™s devices (see Figure 1).

![Figure 1: Remote Attestation with TPM](figure1.png)

To address these issues, previous work proposed a customized USB device called iTurtle, certified by a trusted party, to perform verification. If the verification succeeds, a green light is displayed; otherwise, a red light is shown. This approach aimed to avoid cryptographic algorithms to reduce maintenance overhead. However, establishing a trusted path for transporting verification results without cryptographic operations is challenging.

In addition to remote attestation, TPMs also handle integrity measurements and act as the Root of Trust for Storage (RTS). Currently, each computing device has only one TPM, shared by all users (see Figure 2). This setup has two main problems:
- **Single Point Failure:** If the TPM fails, integrity measurement and remote attestation are unavailable, and users cannot restore their protected keys and data.
- **Data Migration:** Users often have multiple devices, but sensitive data are bound to a specific TPM. Migrating data between devices requires complex services, which is inconvenient and risky for users.

![Figure 2: Relationship between Users, TPMs, and Platforms](figure2.png)

To solve these four problems, we propose a portable TPM (PTM) based on a USB key. We call this device a Portable Trusted Module (PTM).

## 2. Trusted Computing Architecture with PTM

### 2.1 Hardware and Implementation
The PTM hardware is a Watchdata USB token with a small LCD screen and a button (see Figure 3). The USB key contains a Java Card Runtime Environment, and we implement TPM commands and cryptographic operations using Java. PTM communicates with the computing device via USB, making it a TPM-like device with a USB interface.

![Figure 3: Picture of PTM](figure3.png)

### 2.2 PTM as an Axiomatically Trustworthy Device
PTM is certified by a trusted party (e.g., CA, bank, government) with a public key certificate, ensuring the user can trust it. The LCD screen on the USB key provides user-observable verification, and only the software on the key can control its display. We designed a simple protocol to establish a trusted path between PTM and the remote verifier using cryptographic operations. The trusted path ensures that malware on the computing device cannot modify or control the display of verification results, solving the first two problems discussed in Section 1.

### 2.3 Trust Model with PTM
PTM is a TPM-like device that provides some TPM functionalities, though not all due to resource limitations. Unlike TCG TPMs, which are bound to a single computing device and shared by multiple users, PTM is bound to a single user and can be used across multiple devices (see Figure 4).

![Figure 4: Relationship between Users, PTMs, and Platforms](figure4.png)

In our design, one user has one PTM, and others cannot log in without the user's PIN. The user's Storage Root Key (SRK) and Attestation Identity Key (AIK) from different platform TPMs can be migrated into the PTM. This makes PTM a backup TPM, communicating with the platform via USB instead of LPC. We will explain how we implement USB communications between PTM and platforms using Extensible Firmware Interface (EFI) in Section 3.

By using PTM, we address the third and fourth problems: if the platform TPM fails, PTM can act as a backup trusted module. When the user moves between different platforms, PTM can access protected data and keys, using the SRKs in PTM to un-seal BLOBs.

## 3. Implementation of PTM Prototype

### 3.1 Boot Sequence Integration
In the computing device platform, we need to load PTM as early as possible in the boot sequence. Intel EFI allows developers to extend platform firmware by loading EFI driver and application images, controlling the system boot procedure. During the Drive Execution Environment (DEX) phase of EFI, we load the USB bus driver to recognize and start the USB device before the OS loads. This enables the platform to use PTM just like a TPM. Implementation details can be found in [6].

### 3.2 PTM Commands and Performance
We chose a Watchdata USB Key with a Java Card Runtime Environment and implemented TPM commands as a Java Card Applet. All TPM commands are encapsulated in APDU commands, the standard communication protocol in Java Card. We also provide platform management commands for PTM. The program modules and commands in the PTM Applet are shown in Figure 5.

![Figure 5: Program Modules and Commands](figure5.png)

Table 1 shows the response times for PTM commands in our test environment. The PTM hardware is a 32-bit RISC CPU with a cryptographic accelerator, running at 96MHz. The computing device is a laptop with a 1.5GHz CPU and Windows XP. Applications communicate with PTM via a PC/SC driver.

| PTM Command | Run Time (ms) |
|-------------|---------------|
| PTM_SHA1Start | 0.66 |
| PTM_SHA1Update | 0.66 |
| PTM_SHA1Complete | 0.74 |
| PTM_CreateEndorsementKeyPair | 3.40 |
| PTM_ReadPubEK | 0.96 |
| PTM_TakeOwnerShip | 1.60 |
| PTM_LoadKey2 | 1.48 |
| PTM_GetPubKey | 0.78 |
| PTM_Sign | 94.64 |
| PTM_Quote | 89.75 |
| PTM_Extend | 0.82 |
| PTM_SHA1CompleteExtend | 1.01 |
| PTM_GetRandom | 0.83 |
| PTM_ReadPCR | 0.77 |

## 4. Conclusion and Future Work
This paper presents the concept of a portable TPM (PTM) based on a USB key and its trust model. PTM establishes a trusted path between the verifier and the user in remote attestation and addresses the single-point failure of TPM and frequent sensitive data migrations. Test results show that the PTM scheme is feasible. In future work, we will further research trusted path and platform management protocols and improve PTM performance.

## 5. References
[1] Trusted Computing Group. "Trusted Platform Modules Strengthen User and Platform Authenticity." <http://www.trustedcomputinggroup.org>, 2005.

[2] Jonathan M. McCune, Adrian Perrig, Arvind Seshadri, Leendert van Doorn. "Turtles All The Way Down: Research Challenges in User-Based Attestation." Proceedings of the 2nd USENIX Workshop on Hot Topics in Security, USENIX, Boston, USA, 2007.

[3] Sun Microsystems Inc. "Java Card Platform Specification 2.2.2." <http://java.sun.com/javacard/specs.html>, 2006.

[4] TCG. "TPM Main Part 3 Commands." <http://www.trustedcomputinggroup.org>, 2006.

[5] Dawei Zhang, Peng Hu. "Trusted e-commerce user agent based on USB Key." IMECS, Hong Kong, China, 2008.

[6] Lei Han, Jiqiang Liu, Dawei Zhang. "A Portable TPM Scheme for General-purpose Trusted Computing Based on EFI." International Conference on Multimedia Information Networking and Security, IEEE, Wuhan, China, 2009.