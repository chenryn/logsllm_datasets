· exp
∝ exp
√
Σ
 ⏞
Σa +
)︁
√
.
0
0
)︁
This implies this equals to the probability of a being output
−1,w. To sum up, conditioned on X𝑡𝑜𝑝Z, the
by 𝐷Z2ℓ−𝐿′
matrix X𝑏𝑜𝑡Z is distributed as (𝐷Z2ℓ−𝐿′
−1,w)𝑚.
,𝜎0
√
√
Σ
Σ
,𝜎0
We then consider the joint distribution of (A, u, ZA, X𝑏𝑜𝑡Zu)
(conditioned on (X𝑡𝑜𝑝, X𝑡𝑜𝑝Z)). In the following, let us con-
sider the distribution of XZA instead of ZA. We do not loose
any information by doing this since X is invertible modulo
𝑞 and the latter distribution can be recovered from the for-
mer by just multiplying X−1 from the left. Furthermore, we
observe that XZA is the vertical concatenation of X𝑡𝑜𝑝ZA
and X𝑏𝑜𝑡ZA. Since the former can be recovered from X𝑡𝑜𝑝Z
and A, which are already included in the tuples, we ignore
the former.
Let us denote Y := X𝑏𝑜𝑡Z ∼ (𝐷Z2ℓ−𝐿′
−1,w)𝑚. To
complete the proof, we will show that the following distribu-
tions are statistically close:
,𝜎0
√
Σ
(A, u, YA, Yu) ≈ (A, u, B, v)
, and v ←˒ Z2ℓ−𝐿′
𝑞
where B ←˒ Z(2ℓ−𝐿′)×𝑛
. We first show
that (Y mod 𝑝) is within 2Ω(−𝜆) statistical distance from the
uniform distribution over Z(2ℓ−𝐿′)×𝑚
. This follows by setting
Λ = Z2ℓ−𝐿′
and applying Lemma 2.4 to
Y in a column-wise manner. We check that the parameters
and Λ′ = 𝑝 · Z2ℓ−𝐿′
𝑝
𝑞
satisfy the required condition of Lemma 2.4. We have
)2 · ‖Σ‖∞)
−1/2 ≥ ((2ℓ − 𝐿
√
Σ
′
−1
𝑠2ℓ−𝐿′ (
≥ Ω((𝜅1/2ℓ𝜎2)
) = 𝑠1(Σ)
−1),
−1/2
−1
√
√
Σ
) ≥ 𝑝 · Ω(
where the last inequality follows from the upper bound
on the norms of the rows of U. We therefore have 𝜎0 ·
𝑠2ℓ−𝐿′ (
𝜅) by our choice of 𝜎0. We then
finally apply Lemma 2.6 in a row-wise manner to obtain
that Y(A|u) is almost uniformly random. We note that the
lemma can be applicable because 𝑞𝑛+1/𝑝𝑚 ≤ 2−Ω(𝜅). This
□
completes the proof of Lemma 4.2.
Proof of Lemma 4.3. The reduction works as follows.
Given (A, u, ZA, X𝑡𝑜𝑝, X𝑡𝑜𝑝Z, v), algorithm ℬ randomly
guesses indices {𝑖𝑗}𝑗∈𝐿′ ∈ [𝑄]𝐿′
for which the adversary
makes key queries. The public key pk = (A, U = Z · A)
and the master key msk = Z are determined by the given
problem instance. (Note that Z is not given to ℬ, so it is im-
plicitly chosen.) Then ℬ chooses {¯x𝑖}𝑖∈[𝑄] as follows. When
𝑖 ∈ {𝑖𝑗}𝑗∈[𝐿′], there exists 𝑗 such that 𝑖 = 𝑖𝑗. Then algo-
rithm ℬ sets ¯x𝑡
𝑖 to be the 𝑗-th row of the given matrix X𝑡𝑜𝑝.
Otherwise, it chooses ¯x𝑖 as in Game 4. The key queries are
handled as follows. Whenever 𝒜 queries key for x𝑖 such that
𝑖 ̸∈ {𝑖𝑗}𝑗∈[𝐿′], algorithm ℬ aborts and outputs a random bit.
Other queries can be handled using X𝑡𝑜𝑝Z in the problem
instance. To create the challenge ciphertext ℬ sets
−1 · (X𝑡𝑜𝑝Zu‖v) + e1 + y𝛽.
c0 = u,
c1 = X
We can observe that when v = X𝑏𝑜𝑡Zu, we have c1 = Zu +
e1 + y𝛽 and the distribution of the challenge ciphertext
corresponds to that of Game 4.
We then consider the case of v is random. We will show
that the distribution of X · ⃗𝑐1 mod 𝑞 is independent of 𝛽. As
the matrix X is independent of 𝛽 ∈ {0, 1} and invertible over
Z𝑞, this implies that the distribution of c1 is independent of
𝛽 as well (recall that X is information theoretically known
to 𝒜, which means that, if c1 carries any information on 𝛽,
so does X · c1 mod 𝑞). The first 𝐿′ entries of X · c1 (namely,
X𝑡𝑜𝑝 · c1) do not depend on 𝛽 because we have the equality
𝑝𝑘−1 · X𝑡𝑜𝑝 · y0 = 𝑝𝑘−1 · X𝑡𝑜𝑝 · y1 mod 𝑞, by construction of
X𝑡𝑜𝑝. The last 2ℓ − 𝐿′ entries are uniformly random, since
they are masked by the random vector v.
At the end of the game, algorithm ℬ outputs the same bit
as 𝒜.
It can be seen that ℬ perfectly simulates Game 4 when
v = X𝑏𝑜𝑡Zu and a game that is independent of 𝛽 when v
is random. Therefore, conditioned on ℬ not aborting, the
distinguishing advantage of ℬ is the same as 𝒜. Since ℬ
aborts and outputs a random bit with probability 1/𝑄𝐿′
, the
advantage of ℬ is 𝜖/𝑄𝐿′
. This completes the proof of Lemma
□
4.3.
5 TRACE AND REVOKE FROM DDH
AND PAILLIER
In this section, we describe two (near) instantiations of the
generic construction presented in the last section. We are not
Session K1:  Secure ComputationCCS’17, October 30-November 3, 2017, Dallas, TX, USA2290aware of existing IPFE schemes that meet the requirements
for our generic Trace-and-Revoke construction, but some
existing ones can be made to fit the framework.
a plaintext in Z𝑞 ∖ {0} to a ciphertext of bit-length 𝑂((𝑡 +
𝑟) log 𝑞). If we choose the DDH group as an elliptic curve
group (without pairings), we may set log 𝑞 = 𝑂(𝜆).
5.1 Trace and Revoke from DDH
Following the work of Abdalla et al. [1], two DDH-based
adaptively secure IPFEs modulo the group size 𝑞 have been
proposed [4, 8]. However, these schemes enjoy limited cor-
rectness: as decryption involves the computation of a discrete
logarithm, one restricts the set of exponents to be small. For
instance, one may design the schemes so that inner prod-
ucts that are small compared to 𝑞 can be decrypted. This
restriction seems incompatible with the requirements of our
trace-and-revoke scheme, as the inner product 𝑚 · ⟨xid, vℛ⟩
occurring in the decryption algorithm has no reason to be
small compared to 𝑝, even if the plaintext 𝑚 is small. In the
DDH-based trace-and-revoke scheme below, we circumvent
the issue for the scheme from [4] by removing the ⟨xid, vℛ⟩
component before taking the discrete logarithm.
∙ Setup(1𝜆, 1𝑡, 1𝑟, 𝐿). Choose a cyclic group G of prime
order 𝑞 along with two generators 𝑔, ℎ ←˒ G. DDH
in G should be 2𝜆-hard, but taking base-𝑔 logarithms
of elements 𝑔𝑥 with 𝑥 ∈ {1, . . . , 𝐿} should be tractable.
Set ℓ = 𝑡 + 𝑟 + 1. For each 𝑖 ≤ ℓ, sample 𝑠𝑖, 𝑡𝑖 ←˒ Z𝑞
and compute ℎ𝑖 = 𝑔𝑠𝑖 · ℎ𝑡𝑖 . Define
msk := (s, t) and pk :=(︀G, 𝑔, ℎ,{ℎ𝑖}𝑖∈[ℓ]
)︀.
𝑞 and 𝑝id = xid.
every id ∈ ℛ.
∙ KeyGen(msk, id). Sample xid ←˒ Zℓ
𝑞.
Set sk𝑖𝑑 = (⟨xid, s⟩,⟨xid, t⟩) ∈ Z2
∙ Enc(pk,ℛ, 𝑚) proceeds as follows to encrypt 𝑚 ∈
{1, . . . , 𝐿}.
(1) Compute vℛ ∈ Zℓ
𝑞 ∖ {⃗0} such that ⟨xid, vℛ⟩ = 0 for
(2) Set y = 𝑚 · vℛ and sample 𝑟 ←˒ Z𝑞.
(3) Compute 𝐷0 = 𝑔𝑟, 𝐷1 = ℎ𝑟 and 𝐸𝑖 = 𝑔𝑦𝑖 · ℎ𝑟
The ciphertext 𝐶 is (𝐷0, 𝐷1, 𝐸1, . . . , 𝐸ℓ,ℛ).
∙ Dec(skid, 𝐶). Write 𝐶 = (𝐷0, 𝐷1, 𝐸1, . . . , 𝐸ℓ,ℛ) and
let xid denote the vector corresponding to skid = (𝑠𝑥, 𝑡𝑥).
Compute:
all 𝑖 ≤ ℓ.
𝑖 for
(︁ ℓ∏︁
)︁
𝐶xid =
𝐸
𝑥id,𝑖
𝑖
/(𝐷𝑠𝑥
0 · 𝐷𝑡𝑥
1 ).
𝑖=1
.
xid
Then, recover vℛ from ℛ and output the base-𝑔 loga-
rithm of 𝐶 1/⟨vℛ,xid⟩
∙ Trace(pd,𝒮,ℛ,𝒪𝒟) proceeds as described in Section 3.
Correctness follows from elementary computations. The
only difference with the direct instantiation of our trace-and-
revoke construction is that the division by ⟨vℛ, xid⟩ occurs
before the computation of the discrete logarithm, hence en-
abling efficient decryption.
Key and Ciphertext Sizes. Both the public key and master
secret key consist of 𝑂((𝑡 + 𝑟) log 𝑞) bits. To every user id
corresponds a secret key skid of bit-length 𝑂(log 𝑞) and a
vector 𝑝id of bit-length 𝑂((𝑡 + 𝑟) log 𝑞). Algorithm Enc maps
5.2 Trace and Revoke from Paillier
In [4], Agrawal et al. described two IPFEs relying on the
algebraic framework of Paillier’s encryption scheme [33]. One
scheme handles inner products of short integers vectors, while
the other handles inner products modulo a product 𝑁 =
𝑝 · 𝑞 of two safe primes. Both are proved secure under the
Decision Composite Residuosity (DCR) hardness assumption.
We explain here how to instantiate our trace-and-revoke
construction using this IPFE over Zℓ
𝑁 .
A first difficulty is the fact that the Key Generation al-
gorithm is stateful. However, this issue can be handled by
noticing that for random queries, the key generation algo-
rithm can be made stateless (see [4] and Subsection 4.1 for
more details). A further difficulty is the non-primality of 𝑁 :
our transformation requires the modulus to be prime. We
may actually apply the transformation and “pretend” that
𝑁 is prime, both in the scheme and in its security proof. The
non-primality of 𝑁 can be noticed only when finding vec-
tors orthogonal modulo 𝑁 to some specified vectors. When
such a task is performed, either the linear algebra operations
proceed and find such a vector, or they fail. In the latter
case, a non-trivial factor of 𝑁 has been found, which leads to
an algorithm against DCR. Hence, under the DCR hardness
assumption, such an event is unlikely. We now describe the
resulting DCR-based trace-and-revoke scheme.
∙ Setup(1𝜆, 1𝑡, 1𝑟). Choose safe prime numbers 𝑝 = 2𝑝′ +
1, 𝑞 = 2𝑞′ + 1 with sufficiently large primes 𝑝′, 𝑞′ >
2𝒫𝑜𝑙𝑦(𝜆), and compute 𝑁 = 𝑝𝑞. Then, sample 𝑔′ ←˒ Z*
and compute 𝑔 = 𝑔′2𝑁 mod 𝑁 2, which generates the
subgroup of (2𝑁 )-th residues in Z⋆
𝑁 2 with overwhelm-
ing probability. Set ℓ = 𝑡 + 𝑟 + 1 and sample s from
deviation parameter 𝜎 satisfying 𝜎 ≥ √
the integer Gaussian distribution 𝐷Zℓ,𝜎 with standard
ℓ𝑁𝒫𝑜𝑙𝑦(𝜆).
msk := s and pk :=(︀𝑁, 𝑔,𝒢,{ℎ𝑖}𝑖∈[ℓ]
)︀.
Compute ℎ𝑖 = 𝑔𝑠𝑖 mod 𝑁 2 for all 𝑖 ≤ ℓ. Define
𝑁 2
∙ KeyGen(msk, id). Sample xid ∈ Zℓ with coefficients i.i.d.
uniform in {0, . . . , 𝑁 − 1}. Set sk𝑖𝑑 = ⟨xid, s⟩ ∈ Z and
𝑝id = xid.
∙ Enc(pk,ℛ, 𝑚) proceeds as follows to encrypt 𝑚 ∈ Z𝑁 ∖
{0}.
(1) Compute vℛ ∈ Zℓ
𝑝 ∖ {⃗0} such that ⟨xid, vℛ⟩ = 0 for
(2) Set y = 𝑚 · vℛ and sample 𝑟 ←˒ {0, . . . ,⌊𝑁/4⌋}.
(3) Compute 𝐶0 = 𝑔𝑟 mod 𝑁 2 and 𝐶𝑖 = (1 + 𝑦𝑖𝑁 ) ·
The ciphertext 𝐶 is (𝐶0, 𝐶1, . . . , 𝐶ℓ,ℛ).
𝑖 mod 𝑁 2 for all 𝑖 ≤ ℓ.
ℎ𝑟