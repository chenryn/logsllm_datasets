title:Identifying Key Leakage of Bitcoin Users
author:Michael Brengel and
Christian Rossow
Identifying Key Leakage of Bitcoin Users
Michael Brengel(B) and Christian Rossow
CISPA, Saarland University, Saarbr¨ucken, Germany
{michael.brengel,rossow}@cispa.saarland
Abstract. We study key leakage in the context of cryptocurrencies.
First, we consider the problem of explicit key leakage occurring on open-
source intelligence platforms. To do this, we monitor the Pastebin feed
from Sep 2017–Mar 2018 to ﬁnd exposed secret Bitcoin keys, reveal-
ing that attackers could have stolen 22.40 BTC worth roughly $178,000
given current exchange rates. Then, we focus on implicit key leakage by
exploiting the wrong usage of cryptographic primitives and scan Bitcoin’s
blockchain for ECDSA nonce reuse. We systematically outline how an
attacker can use duplicate r values to leak nonces and secret keys, which
goes beyond the simple case where the same nonce and the same key have
been used in conjunction more than once. Our results show that ECDSA
nonce reuse has been a recurring problem in the Bitcoin ecosystem and
has already been exploited by attackers. In fact, an attacker could have
exploited nonce reuse to steal 412.80 BTC worth roughly $3.3 million.
1 Introduction
Cryptocurrencies have become popular entities in global ﬁnancial markets. A
prime example of such a currency is Bitcoin [17] with a current market capital-
ization of over $135 billion [1] or Ethereum [23] with a current market capital-
ization of over $44 billion [2]. As such, it comes as no surprise that malicious
actors constantly try to steal those currencies, i.e., change ownership of cryp-
tocurrency assets without consent of the legitimate owners. The decentralized
and anonymous (or at least pseudonymous) nature of those currencies makes
such malicious activities more attractive, as traceback and prosecution by law
enforcement agencies is signiﬁcantly harder than with traditional currencies.
In terms of stealing cryptocurrency assets, there are several possibilities. A
cryptocurrency is usually based on a cryptographic protocol, which uses several
cryptographic primitives such as elliptic curves [15] or digital signatures [12],
which one could try to attack. However, both the protocol and the primitives are
usually well studied and are either proven secure in theory, or have been subject
to an auditing process by experts in the ﬁeld. Therefore, the best attackers can
hope for in this setting are implementation ﬂaws, which are usually short-lived
due to the open-source nature of cryptocurrency implementations. The most
prominent incident of such an implementation ﬂaw happened in February 2014,
when attackers found a vulnerability in the Mt. Gox Bitcoin exchange, which
allowed them to steal 850,000 BTC worth around $450 million at that time.
c(cid:2) The Author(s) 2018
M. Bailey et al. (Eds.): RAID 2018, LNCS 11050, pp. 623–643, 2018.
https://doi.org/10.1007/978-3-030-00470-5_29
624
M. Brengel and C. Rossow
While the attack did not aﬀect the Bitcoin protocol itself, it exploited the inher-
ent transaction malleability of Bitcoin transactions to break some assumptions
of the internal accounting system of Mt. Gox [11].
While such large-scale incidents are rare, a more common and thus also severe
class of attacks against cryptocurrencies aims to leak cryptographic keys. Cryp-
tocurrency assets are cryptographically protected by a collection of secret keys,
which is called a wallet. If this wallet is stored in an insecure manner, i.e., in plain
on disk without any additional protection, then malware can simply scan the disk
for such wallets and report them to the attacker, which in turn can use them to
steal assets. Due to the popularity of cryptocurrencies, attackers have massively
deployed malware that aims to leak such secret keys. A well-known case of such
malware was the Pony Botnet, which operated from September 2013 to January
2014 [18]. The malware scanned the victim’s machine for various conﬁdential
credentials including cryptocurrency keys, which resulted in ﬁnancial damage
of $220,000. Modern wallets now use more sophisticated means of key manage-
ment such as additional encryption with a password, two-factor authentication
or hardware-based security [13], which protects against such local attacks.
In this paper, we take a diﬀerent perspective and study whether remote
attack vectors allow leaking cryptographic keys from users. First, we study
whether users (accidentally or knowingly) explicitly leak cryptographic keys,
that is, post them publicly. To this end, we leverage the notion of open-source
intelligence (OSINT) with respect to cryptocurrency leaks. As a case study, we
consider Bitcoin as it is the most prevalent cryptocurrency currently used, but
any other cryptocurrency would be suitable as well. As an OSINT platform we
consider Pastebin [3], which is a popular information-sharing web application on
the Internet, and has already proven to leak diﬀerent types of privacy-related
information [16]. However, other OSINT platforms such as Twitter, Reddit, Face-
book or GitHub would also work. We envision a scenario where a victim uses
Pastebin to share a piece of information including Bitcoin secrets such as a code
snippet performing a transaction or the debug output of wallet software. The
victim creates this paste to privately share the information, not knowing that it
will be publicly available in the Pastebin feed. An attacker that monitors this
feed can then scan each new paste for Bitcoin keys, for example using their
well-known format, and use those keys to steal Bitcoins. To simulate this, we
have monitored the Pastebin feed since September 2017 for Bitcoin secrets. Our
results show that an attacker could have stolen 22.40 BTC during this timespan.
We then also study the possibility of implicit key leakage, given that cryp-
tocurrency users (or software developers) may misapply cryptographic primi-
tives. In particular, keeping our focus on Bitcoin, we study the incorrect use of
the Elliptic Curve Digital Signature Algorithm (ECDSA), which, however, also
applies to other cryptocurrencies that are based on this primitive. To sign a
message m using ECDSA with a secret key sk, one must compute a signature,
which involves a randomly chosen nonce k. It is well known that apart from the
secret key, the nonce must also be kept secret, as an attacker can otherwise use
the signature and k to retrieve sk. Similarly, if one signs two distinct messages
Identifying Key Leakage of Bitcoin Users
625
m1 and m2 using the same k and the same sk, then an attacker can recompute
sk based on the structure of the signature and the knowledge that both the key
and the nonce have been reused. While such a duplicate occurrence should not
happen in practice, as the set of possible nonces is suﬃciently large, i.e., almost
2256 in the case of Bitcoin, such duplicates can still appear for other reasons.
One such reason could be the use of weak random number generators [4] or vul-
nerable software that is not aware of the implications of nonce reuses. Another
scenario which could also be responsible for such duplicate occurrences is cloning
or resetting a virtual machine, which could possibly result in reusing the same
seed for the random number generator. While there is anecdotal evidence for
duplicate nonces in the Bitcoin blockchain, there is no systematic study on the
actual impact or the prevalence of this phenomenon, i.e., the potential ﬁnancial
damage that can be caused. To ﬁll this gap, we scan the Bitcoin blockchain
for duplicate nonces and simulate an attack scenario in which a malicious actor
actively monitors incoming transactions to look for duplicate nonce occurrences
to leak keys and steal Bitcoins. In particular, we systematically outline how an
attacker can use duplicate nonces to leak secrets, which has not been shown
before in such detail. This goes beyond na¨ıve cases where the same key and
nonce pair was used twice to sign two distinct messages. In fact, we show that
it is also possible to leak secrets by exploiting cyclic dependencies between keys
and duplicate nonces. Our results show that an attacker could have used this
methodology to steal 412.80 BTC.
To summarize, our contributions are as follows: (i) We assess the threat of
explicit Bitcoin key leaks using OSINT. We instantiate this idea by monitor-
ing the public feed of Pastebin for leaked secret keys. Our results demonstrate
how an attacker doing this could have stolen 22.40 BTC. (ii) We systematically
demonstrate how attackers can monitor Bitcoin transactions to scan for implicit
key leaks. We develop a methodology that can map signatures with duplicate
nonces to linear equation systems using a bipartite graph representation. (iii)
We assess the impact of implicit key leaks in the context of Bitcoin. That is, we
analyze how prevalent they are and how much Bitcoins an attacker could have
stolen by exploiting them. Finally, we study if such exploitation has happened
in the past. Our results show that an attacker could have stolen 412.80 BTC
and that attackers have exploited nonce reuse in the past to steal Bitcoins.
2 Background
In this section, we outline the preliminaries required for the scope of this paper
in order to grasp our ideas using the Bitcoin technology.
Blockchain and Mining. The central component of the Bitcoin protocol is the
Bitcoin blockchain, which is a distributed append-only log, also called a ledger.
The idea of this ledger is to keep track of all transactions that have ever occurred
in the Bitcoin network. The ledger consists of a sequence of blocks, each of which
consists of a set of transactions. Adding such a block to the blockchain requires
solving a computational puzzle using the Hashcash proof-of-work system [9]. The
626
M. Brengel and C. Rossow
process of adding blocks to the blockchain is called mining and is rewarded with
Bitcoins. Transactions and blocks are created and distributed by the peers of
the network. Before transactions are mined, they are put in a temporary buﬀer
called the mempool. Miners, i.e., the peers which mine blocks, will then take
transactions from the mempool to build and mine a block and ﬁnally, announce
a newly mined block to the network.
Transactions. A Bitcoin transaction T consists of a sequence of inputs Ti =
[i1, . . . , im] and a sequence of outputs To = [o1, . . . , on] and is uniquely identiﬁed
by a transaction ID, which is generated by computing a hash of the transaction.
Inputs and outputs are therefore uniquely identiﬁed by the ID of the transaction
which contains them and their index in the input list and output list, respec-
tively. An output oj ∈ To carries a value, which is the number of satoshis that this
output is worth. A satoshi is deﬁned to be such that one Bitcoin (BTC) equals
108 satoshis. The purpose of a transaction is to spend outputs by creating new
ones, which represents the money ﬂow. To do this, every input ij ∈ Ti uniquely
references an output of another previous transaction, i.e., the ones which will
be spent, and creates new outputs that can be spent by future transactions.
An output can only be referenced once, and the outputs in the blockchain which
have not been referenced at any given moment in time is called the set of unspent
outputs. Every transaction carries an implicit transaction fee, which is the dif-
ference between the sum of the values of the outputs and the sum of the value
of the referenced outputs. Transaction fees will be paid to the miners, which
thus prioritize transactions based on their fees, i.e., the higher the fee, the faster
the transaction will be mined. Since a block can only be 1 MiB in size, miners
will usually consider transaction fees as a function of satoshis per byte of the
transaction, i.e., the larger the transaction the larger the nominal value of the fee
should be. Transaction fees are an essential economical element of the Bitcoin
network and change constantly depending on the number of transactions in the
mempool and how much peers are willing to pay the miners. Special transactions
without any inputs referencing other outputs are so-called coinbase transactions
and are created when a block is mined to reward the miner, which is how Bit-
coins are initially created. That is, before a miner mines a block, they will ﬁrst
create a coinbase transaction which will be put in the block and rewards them
with Bitcoins. This reward is a ﬁxed amount, which gets halved every 210,000
blocks, plus the fees of all transactions in the block.
Scripts. Transactions in the Bitcoin network are veriﬁed by using a small stack-
based language, the programs of which are called scripts. Every input and output
contains a script, which is often referred to as scriptSig and scriptPubKey, respec-
tively. These scripts can perform arithmetic, cryptography, ﬂow control and so
on. In order for a transaction to be valid, one must concatenate the scriptSig of
each input with the scriptPubKey of its referenced output, which yields a new set
of scripts, i.e., one for each input. All of these scripts are then evaluated, and for
the transaction to be valid, there must be only one element on the stack after
evaluation and this element must be equal to true. The scriptPubKey can there-
fore be considered a means of protection, i.e., one can only redeem an output
Identifying Key Leakage of Bitcoin Users
627
if they can provide a correct scriptSig. The scripting language contains special
instructions for elliptic curve cryptography, which is used within this scripting
framework to cryptographically secure transactions. In this context, every user
has a secret key sk and a public key pk. The most prevalent type of transaction is
called a Pay To Pubkey Hash (P2PKH) transaction. Outputs belonging to such
transactions have a scriptPubKey that veriﬁes that the sender of the transaction
possesses the correct public key by comparing it against a hash. Additionally,
the script veriﬁes a signature, which means that a working scriptSig must provide
both the public key pk as well as a valid signature that can be veriﬁed with pk,
which means that the sender must know sk.
Bitcoin Addresses. A Bitcoin address is a serialized hash of pk, which is gen-
erated by hashing the public key with the SHA-256 and the RIPMED-160 hash
functions and appending and prepending a version byte and checksum bytes. The
hash is then serialized using base58 encoding, which is a more human-readability-
friendly version of the base64 encoding and removes ambiguous-looking charac-
ters (e.g., zero (“0”) and capital o (“O”)). An example of such an address is
16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM. Before hashing, pk must be serialized,
for which there are two options, namely the compressed public key and the
uncompressed public key. We omit the technical details here as they are not
required for the scope of this paper. It is only important that both serialization
options yield diﬀerent addresses, which means that every public key pk corre-
sponds to two addresses, which can be used independently of each other. This
means that if an attacker leaks a secret key, they gain control over the balances
of two addresses. We can deﬁne the balance of a P2PKH address by using the
previously mentioned scripts. For instance, we determine that the balance of
a P2PKH address encoding a hash h, is the sum of the values of all unspent
outputs that can be redeemed with the public key pk that h is a hash for.
3 Explicit Key Leaks: Open Source Intelligence
In this section, we will outline the methodology that we use to discover explicit
Bitcoin key leaks, i.e., cases where users (knowingly or not) directly disclose
sensitive Bitcoin key material to the public. To this end, we follow the general
idea of open source intelligence (OSINT), in which an attacker harvests publicly
available information to derive sensitive information. To evaluate this idea in
the context of Bitcoin secrets, we chose Pastebin as an OSINT platform. Given
its popularity, we expect that Bitcoin users accidentally leak secret information
there. Examples of such leaks would be users publishing code snippets doing
Bitcoin transactions or the debug output of some wallet software which users
want to share privately, not knowing that these pastes are then publicly visible
in the Pastebin feed. We monitored all pastes starting from September 2017 and
scanned each paste for Bitcoin secrets, i.e., secret keys.
628
M. Brengel and C. Rossow
3.1 Finding Bitcoin Secrets
To scan a paste for secret Bitcoin keys, we leverage the observation that Bitcoin
keys are serialized using a well-known format. A secret key is an integer sk, which
we will describe further in Sect. 4.1. An agreed-upon format for serializing those
keys is the Wallet Import Format (WIF). To convert a secret key sk into this
format, the following procedure is applied. First, sk is converted to a 32-bytes-
long big-endian representation, which we call b. Then, 0x80 is prepended to b and
optionally 0x01 is appended if the secret key will correspond to a compressed
public key. Then SHA256 is applied twice on b, and we call the last four bytes
of this hash c. The WIF is deﬁned to be the base58 encoding of b||c.
The last 4 bytes in this format are a checksum for the remaining bytes, which
is used in practice to avoid copy and paste mistakes. However, this checksum
also allows a systematic scan for instances of WIF strings in text with a very low
probability of false positives. In our Bitcoin monitoring tool, we thus proceed
for each new paste as follows. First, we move a sliding window over the content
of the paste to discover all valid base58 encoded substrings of the paste which
are 51 or 52 characters long and start with either “5”, “K” or “L”. Both of
these constraints are a consequence of the base58 encoding and the fact that the
ﬁxed byte 0x80 is prepended. For each string which matches these criteria, we
compute and verify the checksum as described above. If the checksum veriﬁes,
we have found a valid WIF string and we can compute the corresponding secret
key sk. Finally, we check if the secret key is in the valid range (cf. Sect. 4.1), and
if this is the case, then we consider this key for further analysis.
3.2 Results
To apply our methodology, we monitored and scanned all public pastes on Paste-
bin since September 2017. We identiﬁed 21,464 secret keys, which correspond to
42,936 addresses, i.e., 2 addresses per key as described in Sect. 2. However, most
of these addresses are unused, i.e., there is no transaction in the blockchain which
transferred Bitcoins from or to these addresses. As of now, 391 (0.91%) of those
addresses held a balance at some point in time. However, for stealing Bitcoins it
is not suﬃcient that an address held a balance at some point in time. Instead,
we also have to take into account that the address held a balance after we have
seen the corresponding secret key in a paste. If we respect this constraint, we
ﬁnd that 165 (0.38%) addresses held a balance after we have seen their secret
key in a paste. Those keys were scattered among a total of 34 pastes. Summing
up those balances gives a total of 326.70 BTC.
It should be mentioned, though, that this is still not a guarantee that this
number of Bitcoins could have been stolen. This is due to the fact that we deter-
mine the balance of an address at some point in time based on the blockchain, not
the mempool. That is, we take the latest block that was mined before the paste
was published and check the balance of an aﬀected address up to this block. It
could be the case that there was a transaction in the meantime which redeemed
outputs from the given address, i.e., there could be a pending transaction in
Identifying Key Leakage of Bitcoin Users
629
the mempool. In this case, an attacker could not easily create a transaction to
steal the Bitcoins. Current network rules discourage the distribution of trans-
actions that double-spend outputs unless the transaction is explicitly marked
as a replace-by-fee (RBF) transaction. An attacker could try to mine a stealing
transaction themselves or try to directly announce the stealing transaction to
mining pools which do not follow these network rules. Alternatively, if the block-
ing transaction has a low fee, the attacker could wait until a signiﬁcant number
of peers do not have the transaction in their copy of the mempool anymore. This
would increase the chances that the new stealing transaction will be pushed to
more peers, which in turn will increase the chances that the stealing transactions
will be mined. However, none of these methods guarantees success, and therefore