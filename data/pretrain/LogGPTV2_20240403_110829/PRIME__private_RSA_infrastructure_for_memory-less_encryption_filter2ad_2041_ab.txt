values by themselves do not aﬀect the security of RSA and
we wipe each aﬀected RAM line shortly afterwards.
3.1.1 Montgomery’s Method
The basic idea of Montgomery’s method is to transform
numbers into a system where division is performed by a
power of 2. For example, a division by 2l (where l > 0)
only requires us to drop the least signiﬁcant l bits, because
a division by 2 is a right shift. In microprocessors the size of
registers is usually a power of 2, as it is the case with AVX
(256 bits). Therefore, Montgomery’s method is particularly
suited for an implementation on CPU registers. It is basically
an algorithm for modular multiplication, but it is also a
common technique for RSA private operations. A profound
introduction to Montgomery’s method can be found in the
literature [22]; in the following, we give necessary basics and
explain our variant of this algorithm.
Let the modulus n be an l-bit integer and let r be 2l.
151
The Montgomery method requires that r and n be relatively
prime, i.e., gcd(r, n) = 1. This requirement is satisﬁed in
RSA where n is odd. To use the Montgomery algorithm, each
number is transformed to what is called the n-residue form
by multiplying the numbers with r modulo n. For example,
the n-residue form of an integer a is deﬁned as
¯a = a · r
(mod n), with a  n, the
following upper bound can be given:
t + m · n
r
<
n2 − n + rn
n2 − n + n2
r
<
n
= 2n − 1
The bound implies that at most one subtraction by n is re-
quired for the modulo n operation in step 4. Thus, step 4 can
be replaced by an if-construct, which determines whether
u is greater than or equal to n and subtracts u by n ac-
cordingly. The last step is known as the ﬁnal subtraction.
This conditional subtraction might not be an issue at ﬁrst
glance, but in fact it oﬀers a side channel leakage (timing
attack) [10]. Therefore, there exist techniques to avoid the
152
ﬁnal subtraction, but we approach the easiest solution by
always performing the subtraction and check the sign bit to
determine which result to use.
(cid:3)
Note that division and reduction modulo r is easy since r is
a power 2 number. This is the remarkable feature of the Mont-
gomery product. However, the conversion to n-residue form
and the computation of n
is rather time consuming. Thus,
the method is not recommendable when a single modular
multiplication is to be performed, but if modular exponentia-
tion is performed (as in RSA) it is well suited. Obviously, for
modular exponentiation several modular multiplications are
performed with respect to the same modulus. The exponen-
tiation algorithm given in Algorithm 2 uses the right-to-left
binary method and makes use of the Montgomery product,
which is computed by the MonPro function.
Algorithm 2: Montgomery Exponentiation
Input: a = (al−1, . . . , a0)2, d = (dl−1, . . . , d0)2,
n = (nl−1, . . . , n0)2, r = 2l
Output: ad mod n
1 result = 1
2 base = a = a · r (mod n)
3 for i = 0 to l − 1 do
4
if di = 1 then result = M onP ro(result, base);
base = M onP ro(base, base)
5
6 end
7 return M onP ro(result, 1)
Step 7 of Algorithm 2 transforms the result in n-residue
form, which is equal to ad mod n, back to an ordinary residue
number:
M onP ro(result, 1) = ad · 1 · r
= ad · r · r
= ad mod n .
−1
−1
(mod n)
(mod n)
Note that step 5 of Algorithm 2 can be precomputed (also
in parallel).
A variety of techniques exist to implement the Montgomery
product in software. As there are many diﬀerent platforms
with diﬀerent register sizes, some techniques perform better
on speciﬁc hardware than others. We refer the reader to the
work by Ko¸c et al. [23] for an overview of these techniques.
One of these techniques is called CIOS (Coarsely Integrated
Operand Scanning). Basically, in PRIME, where we want
to implement the Montgomery product on 256-bit registers
(AVX), we use a modiﬁed variant of the CIOS technique.
Algorithm 3 lists the pseudocode of our CIOS variant. The
ﬁrst inner loop (lines 4-8) performs a row-wise multiplication,
updating the result in variable t. The rest of the algorithm
performs the reduction. Note the alternation between multi-
plication and reduction. The update in the ﬁrst inner loop
is made on tj and the value of m is obtained by multiplying
(cid:3)
t0 by n
0 (line 14). This is due to the fact that the result is
shifted one word to the right (division by 2w) in the second
(cid:3)
0 stands for the least signiﬁcant 256
j-loop. The variable n
(cid:3)
bits of n
0 in the computation process
of m is an observation due to Dusse and Kaliski [11]. The
variable t can therefore be split into k + 2 words of 256 bits.
Our CIOS variant listed in Algorithm 3 can be transformed
to an assembly language program. All variables of this
algorithm are 256-bit values (w = 256), such that each
regX variable can be implemented as a 256-bit wide AVX
. This speciﬁc use of n
(cid:3)
n-residue form, r = 2kw , n = (nk−1, . . . , n0)2w , n(cid:3)
Algorithm 3: MonPro CIOS
Input: ¯a = (ak−1, . . . , a0)2w and ¯b = (bk−1, . . . , b0)2w in
Output: ¯a · ¯b · r−1 (mod n)
1 Set t = (tk−1, . . . t0) = 0
2 for i = 0 to k-1 do
3
0
regC = 0
for j = 0 to k-1 do
regS = tj + aj · bi + regC (mod 2w)
regC = (tj + aj · bi + regC)/2w
tj = regS
end
regS = tk + regC (mod 2w)
regC = (tk + regC)/2w
tk = regS
rk+1 = regC
regC = 0
m = t0 · n(cid:3)
regS = t0 + m · n0 + regC (mod 2w)
regC = (t0 + m · n0 + regC)/2w
for j = 1 to k-1 do
0 (mod 2w)
regS = tj + m · nj + regC (mod 2w)
regC = (tj + m · nj + regC)/2w
tj−1 = regS
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
end
regS = tk + regC (mod 2w)
regC = (tk + regC)/2w
tk−1 = regS
tk = tk+1 + regC
25
26 end
27 ﬁnal subtraction
register (YMM0 to YMM15). However, 256-bit arithmetics
must be achieved by deﬁning macros, which are in fact
costly workarounds because processors do not support 256-
bit arithmetics even though AVX is supported.
It is worth mentioning that two AVX registers are suﬃcient
to hold the number resulting from
tj + aj · bi + regC (mod 2w)
because the whole term is bounded as follows:
tj + aj · bi + regC ≤ (2w − 1) + (2w − 1)2 + 2w − 1
= 22w − 1
Hence, with w = 256, two AVX registers are always enough
to hold this intermediate result.
Another interesting issue with our CIOS variant is that we
can hold non-critical intermediate results in RAM. Variable t
of Algorithm 3 and the result variable of Algorithm 2 can be
held in RAM to save some of the scarce YMM registers. Due
to the design of our infrastructure as described in Section
3.2, only one copy of t and result resides in RAM. Of course,
the question arises whether this approach is secure. Let l be
the number of iterations in Algorithm 2 depending on the
time when the cold boot attack is performed. An adversary
can gain the following value:
ad(cid:3)
(cid:3)
mod n, where d
= d mod 2l
(cid:3)
As we know, with a big modulus, this function is a one-way
function. To obtain d
from it, an adversary would have to
solve the discrete logarithm for a composite modulus. Due
to Eric Bach’s work [4], this problem is proved to be as
hard as factorizing the modulus. Speciﬁc algorithms like
Pollard’s rho can be used, but they are all not feasible, when
153
(cid:3)
the modulus is big. Another approach to obtain d
is by
utilizing a Meet-in-the-Middle attack that has a complexity
l
of O(2
2 ) in time and memory. So if l is low, which is the
case at the beginning of our algorithm, a fraction of the key
can eventually be retrieved. But ﬁrst of all, this requires very
precise timing of the cold boot attack, and second, even if
the speciﬁc moment in time can be hit, the obtained fraction
of the key is too small to pose a risk. The reason is that
for any l, only the least signiﬁcant l bits of the key can be
recovered. For example, if we assume that a Meet-in-the-
Middle attack is feasible for up to l = 128 in a reasonable
time, then the least 128 signiﬁcant bits of the key are exposed
to an adversary. However, for RSA-2048 this amount of bits
is far away from being critical for the entire key. Due to
Boneh, Durfee, and Frankel [8], we know that the critical
limit for an RSA-2048 private key is at least 512 bits (or
in general, at least one fourth of the key size). Notice that
errors in t or result, which can occur in the course of a cold
boot (decay of bits) result into a complete loss of d
as there
are no other key related information in RAM.
(cid:3)
When we implemented Algorithm 3, the use of assembly
language was necessary to gain full control over CPU registers
and to use them in a non-standard manner, because our
implementation is not supported by any high-level language
compiler.
3.1.2 Performance Methods
The previous section focused on the Montgomery algo-
rithm. Originally, this algorithm was invented to boost the
performance of modular exponentiation, but we could addi-
tionally use it as a basis for CPU-bound encryption. Besides
the Montgomery algorithm, there are other methods to boost
the performance of private RSA operations, which we want
to explain brieﬂy regarding their applicability for PRIME.
Special windowing techniques as shown by Ko¸c [22] per-
form better than the square-and-multiply method used in
Algorithm 2 and can save up to 25% in the number of mul-
tiplications. The term window refers to the number of bits
scanned at a time. This technique, however, involves big
precomputed values which must be held in RAM. Another
technique involves the Chinese remainder theorem (CRT),
which is used to boost the performance of modular exponen-
tiation up to a factor of 4. This technique, however, involves
5 private parameters to be protected, which is diﬃcult to
handle without main memory.
Using various of these boosting techniques together is
possible and has a clear beneﬁt when it comes to performance.
However, combining several techniques securely is not a
trivial task. Boneh and Brumley [9] exploited information
leaked by the combination of boosting techniques used by
OpenSSL (which involves Montgomery’s method, window
techniques, CRT, and the Karatsuba multiplication method).
Hence, to keep things simple and secure, we decided to
only use the plain Montgomery method, as explained in
Section 3.1.1. Further techniques like CRT might be an
option for future versions of PRIME, but must be carefully