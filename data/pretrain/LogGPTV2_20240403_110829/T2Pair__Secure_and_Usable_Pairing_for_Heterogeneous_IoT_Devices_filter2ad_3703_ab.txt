To add a pause, the user intentionally holds for a random short
time right prior to changing the twisting direction.
● Zig-zag swiping on the touchscreen with one or more random pauses
added. Rather than asking the user to draw a specific shape or
pattern on a small screen, which harms usability, the user simply
swipes the screen using a finger from left to right and back again
for a few times. Similarly, for better security the user can hold
for a short time right before changing the swiping direction.
All the operations are simple and easy to perform. More impor-
tantly, each involves “crispy” speed/direction changes, which can
be sensed by both IoT device and the helper (Section 3.2). Similar
operations, without pauses, were used in our prior work P2Auth for
authentication [23], but it was unclear how they could be used for
pairing and whether they were resilient to trained mimicry attacks.
3.2 Study of Sensing Pairing Operations
It is reliable (and trivial) to use the controller or sensor of an IoT
device to sense the button-down/button-up, knob twisting or screen
swiping. We collect the data readings from the IoT device, along
with the corresponding time, and regard them as ground truth.
On the side of the helper, it uses the embedded IMU to collect
motion data during pairing operations. It is thus critical to explore
the following questions. (1) Does the IMU data show certain cor-
relations with the ground truth? (2) Are the correlations reliable
across different devices, users and pairing instances?
To this end, we ask users to perform each of the three types
of pairing operations (no pauses for simplicity of discussion). The
user can decide the posture of her hand and wrist, and use different
Extract Evidence 1CryptographicProtocolAgree on a key?YesNoPairingsucceedsPairingfailsExtract Evidence 2PressReleaseTimePairing operationsPressSession 1E: Cyberphysical Systems CCS '20, November 9–13, 2020, Virtual Event, USA311Demonstration
User 1
User 2
Figure 3: Gyroscope data captured when three (3) users twist knobs. The black lines show the ground truth of twisting direction.
User 3
helpers (a smartwatch or smartphone). For example, the photo at
the upper left of Figure 3 shows a user wearing a smartwatch, while
that at the lower left shows a user holding a smartphone.
We use knob twisting as an example, as shown in Figure 3. We
observe a strong correlation between the twisting operations and
the gyroscope data, which measures the angular velocity of its
rotation: regardless of the user and her posture of hand and wrist,
the gyroscope data changes from positive (resp. negative) values to
negative (resp. positive) values, as the rotation direction changes
according to the ground truth. (On the other hand, the acceleration
does not show such a strong correlation, as twisting affects the
angular velocity significantly, rather than the linear speed.)
This strong correlation can be observed in at least one axis of
the gyroscope data. E.g., when the knob is rotated roughly around
the 𝑥-axis of the smartwatch (the upper row of Figure 3), the gyro-
scope signal along the 𝑥-axis (blue line) changes significantly as the
rotation direction (black line) changes. In the lower row of Figure 3,
there exist significant signal changes in both the 𝑥-axis (blue line)
and 𝑦-axis (red line) of the gyroscope data. We thus conclude that
the gyroscope and knob twisting have a strong correlation in at
least one axis of the gyroscope data, which features significant value
changes. It is straightforward to detect the axis of data that shows
the most significant value changes, and we call it the dominant axis.
Strong correlations are observed for the other two types of pair-
ing operations (see Figures 11 and 12 in Appendix B). For each
button pressing, the acceleration data along at least one axis has a
sharp peak or valley. The gyroscope data does not have significant
changes—when the user’s finger presses a button, the acceleration
reaches a peak quickly because the finger’s moving speed suddenly
decreases to zero, while the gyroscope data is not affected much.
Like twisting knobs, in the case of zig-zag swiping, the gyroscope
data changes significantly as the swiping direction changes.
3.3 Extracting Evidence
The strong correlations provide basis for comparison, but it is not
easy to directly compare the two sequences of heterogeneous data:
Salient Points on the IoT Device Side.
the IoT device receives a sequence of input events, while the helper’s
IMU generates a sequence of motion data. To address it, we propose
to extract salient points from the data, and use the occurrence time
of each point to represent it, making it easier to compare. Below,
we use 𝑑1 to denote the IoT device, and 𝑑2 the helper.
3.3.1
Pressing buttons. Pressing a button once generates two events:
PressedDown and ReleasedUp, as shown in Figure 4(a) (the pink
area shows the duration between two consecutive PressedDown
and ReleasedUp events). We adopt the PressedDown events dur-
ing pairing as the salient points, as they can be sensed on both
sides (see Section 3.2). We thus obtain the timestamp sequence
𝑆𝑑1 = {ˆ𝑡1, ˆ𝑡2, . . . , ˆ𝑡𝑛}, where ˆ𝑡𝑘 is the occurrence time of the 𝑘th
PressedDown. It is worth noting that a random pause just intro-
duces a relatively longer time span between two consecutive salient
points. We thus do not explicitly identify and represent pauses.
Twisting knobs. Each rotation-direction change is handled as
a salient point. As shown in Figure 4(b), the 𝑘th salient point is
denotes the
𝑘+1), where ˆ𝑡(𝑒)
2(ˆ𝑡(𝑒)
𝑘 + ˆ𝑡(𝑠)
represented using ˆ𝑡𝑘 ≈ 1
𝑘+1 the start time of the(𝑘+
end time of the 𝑘th rotation and ˆ𝑡(𝑠)
1)th rotation. The timestamps ˆ𝑡(𝑒)
and ˆ𝑡(𝑠)
𝑘+1 should be close for
identifying a salient point. We thus obtain 𝑆𝑑1={ˆ𝑡1, ˆ𝑡2, . . . , ˆ𝑡𝑛−1},
sequence 𝑆𝑑1={ˆ𝑡1, ˆ𝑡2, . . . , ˆ𝑡𝑛−1}, where ˆ𝑡𝑘 is the 𝑘th salient point.
where ˆ𝑡𝑘 is the occurrence time of the 𝑘th salient point.
Swiping touchscreens. Each swiping-direction change is handled
as a salient point, as shown in Figure 4(c). We extract a timestamp
𝑘
𝑘
Salient Points on the Helper Side.
3.3.2
Pressing buttons. Figure 4(a) shows an example of pairing via
pressing a button. In this case the 𝑧-axis of acceleration is the
dominant axis (see Section 3.2); the signal along the other two
axes are in dashed grey lines. At each salient point of the ground
truth, i.e., PressedDown event, a sharp peak is observed. We retrieve
the occurrence time of each sharp peak, and derive the sequence
𝑆𝑑2={𝑡1, 𝑡2, . . . , 𝑡𝑚}, where 𝑡𝑘 is the time of the 𝑘th sharp peak.
xyz010002000300040005000Time (msec)−15−10−5051015Gyroscope (rad/s)xyzDirectionTwisting direction010002000300040005000Time (msec)−15−10−5051015Gyroscope (rad/s)xyzDirectionTwisting direction010002000300040005000Time (msec)−15−10−5051015Gyroscope (rad/s)xyzDirectionTwisting direction05001000150020002500Time (msec)−15−10−5051015Gyroscope (rad/s)xyzDirectionTwisting direction05001000150020002500Time (msec)−15−10−5051015Gyroscope (rad/s)xyzDirectionTwisting direction05001000150020002500Time (msec)−15−10−5051015Gyroscope (rad/s)xyzDirectionTwisting directionSession 1E: Cyberphysical Systems CCS '20, November 9–13, 2020, Virtual Event, USA312(a) Pairing via pressing a button
(b) Pairing via twisting a knob
(c) Pairing via swiping a touchscreen
Figure 4: Salient points for the three types of pairing operations.
Twisting knobs. According to our study of motion data (see Sec-
tion 3.2), we use the gyroscope data for detecting salient points,
which correspond to rotation-direction changes. In the example
shown in Figure 4(b), the 𝑥-axis is the dominant axis. As the rotation
direction of the IoT device changes, the signal sign of the gyroscope
changes as well. Therefore, we detect salient points by searching for
the points of signal sign switches during large-amplitude changes.
We extract a sequence of timestamps of all the salient points. The
timestamp sequence is denoted as: 𝑆𝑑2={𝑡1, 𝑡2, . . . , 𝑡𝑚}, where 𝑡𝑘
refers to the occurrence time of the 𝑘th salient point.
During a pause, the gyroscope readings are near zero. But there
may exist small fluctuations, especially at the start (denoted by the
green circle in Figure 4(b)). To avoid detection of false salient points,
such fluctuations are filtered via simple thresholding.
Swiping touchscreens. Each direction change of the swiping pro-
duces a salient point in the gyroscope data trace. As shown in Figure
4(c), each salient point corresponds to a sharp sign change due to
a swiping-direction change. We obtain a sequence of timestamps:
𝑆𝑑2={𝑡1, 𝑡2, . . . , 𝑡𝑚}, where 𝑡𝑘 is the time of the 𝑘th salient point.
Big silence. It is critical to identify the first salient point. After
the pairing is initiated (e.g., by long pressing a button), as the
user’s hand approaches the IoT device’s button/knob/screen, there
may exist some noisy motion data that looks like salient points. To
address this, we simply ask the user to touch the button/knob/screen
and hold shortly, around 2–3 seconds, before performing the pairing
operations. This way, the “big silence” in the motion data works as
an indication that pairing operations follow and the detection of
salient points from the motion data can start.
3.3.3 No Clock Synchronization. To eliminate the need of clock
synchronization, we convert each timestamp sequence into a se-
ries of time intervals using the equations ˆ𝑖𝑘 = ˆ𝑡𝑘+1− ˆ𝑡𝑘 and 𝑖𝑘 =
𝑡𝑘+1− 𝑡𝑘 for 𝑆𝑑1 and 𝑆𝑑2, respectively. We then concatenate the
time intervals and call them evidence: 𝐸𝑑1 ={ˆ𝑖1⋃︀⋃︀ˆ𝑖2⋃︀⋃︀⋯⋃︀⋃︀ˆ𝑖𝑞−1} and
𝐸𝑑2={𝑖1⋃︀⋃︀𝑖2⋃︀⋃︀⋯⋃︀⋃︀𝑖𝑝−1}, where 𝐸𝑑1 represents the evidence collected
by the IoT device, and 𝐸𝑑2 by the helper.2
2Note that clock drift during pairing does not cause an issue here, as the pairing
operations take only around three seconds (Section 7.5), leading to 3ms of drift in
the worst case (see Section 3.2 of [26]); such small differences between evidence are
tolerated by our protocol based on fuzzy commitment (Section 4.1).
4 PROTOCOL FOR KEY AGREEMENT
Once two pieces of evidence are extracted, the two sides use the
evidence to mutually authenticate each other and establish a key.
4.1 Challenges and Solution
How to perform secure mutual evidence verification, when there
are powerful attacks such as man-in-the-middle (MITM) attacks, is
a challenge. Another challenge is that the wristband and the IoT
device may have small differences, e.g., due to sensor readings and
clock drift, with regard to the observations of salient points.
Failed attempt. To address the two challenges, we first adopt
a fuzzy commitment scheme (FCS) building on error correcting
codes [20]. Fuzzy commitment schemes have been utilized for prox-
imity based pairing [14, 32, 42]. It allows mutual evidence veri-
fication without disclosing the evidence to MITM attackers and
handles small differences between two pieces of evidence. The
sender converts its evidence to an encrypted message, which can be
successfully opened only if the receiver owns the evidence that is
similar to the sender’s in the metric of Hamming distance [20]. We
call the original fuzzy commitment as vanilla fuzzy commitment.
To conduct the vanilla fuzzy commitment, the evidence needs
to be firstly encoded into a bit-representation. Previous studies
convert a value directly to its binary representation [14]. But the
encoding method may incorrectly consider two dissimilar (resp.
similar) evidence sequences as similar (resp. dissimilar).
For example, given the interval values {121} and {57}, which are
encoded as “0111 1001” and “0011 1001”, respectively, based on the
definition of Hamming distance, which is the number of different
digits in the two bit strings, we obtain Ham(121, 57)= 1. Since their
0000” and “0111 1111”, respectively. We have Ham(128, 127)= 8.
Hamming distance is very small, the two intervals are considered
similar, while in fact their difference is large. As another example,
the interval values, {128} and {127}, can be represented as “1000
Thus, the vanilla fuzzy commitment incorrectly considers the two
similar interval values very different.
In short, while the vanilla fuzzy commitment works fine in cer-
tain applications, e.g., when the values fall in large ranges, it does
not work well in our case as the difference of intervals is not huge.
Solution. To address the problem, we propose faithful fuzzy com-
mitment, which encodes each time interval by first dividing the
interval value by a base value to tolerate small differences and
0500100015002000250030003500Time (msec)−7.5−5.0−2.50.02.55.07.510.0Linear Acceleration (m/s2)̂tk/tkPressedDownReleasedUpAccl in z-axis0500100015002000250030003500Time (msec)−15−10−5051015Gyroscope (rad/s)Gyro in x-axisDirection̂tk/tk̂t(s)k+1̂t(e)kTwisting direction0500100015002000250030003500Time (msec)−1.0−0.50.00.51.0Gyroscope (rad/s)Gyro in z-axisDirection̂tk/tkSwiping directionSession 1E: Cyberphysical Systems CCS '20, November 9–13, 2020, Virtual Event, USA313Device 𝑑1
Table 1: The pairing protocol.
Device 𝑑2
if self-checking fails, aborts
𝐸𝑑1= 𝑇𝑖𝑚𝑒_𝐼𝑛𝑡_𝑆𝑒𝑞(𝑑1)
1 picks a random value 𝑃∈ F𝑚
2 𝜆∈ F𝑛
encode←——— RS(2𝑘,𝑚, 𝑛, 𝑃)
3 commits: 𝛿= 𝑒(𝐸𝑑1)⊕ 𝜆
6 picks 𝑎; 𝐴= 𝑔𝑎 mod 𝑝; 𝑤= h(𝑃)
9 𝐾= 𝐵𝑎 mod 𝑝
2𝑘
2𝑘
10 picks a challenge 𝐶2
12 if 𝐶2 is not received, aborts
Phase 1: Initialization
Initiates the pairing
Phase 2: Extracting Evidence
𝐸𝑑2= 𝑇𝑖𝑚𝑒_𝐼𝑛𝑡_𝑆𝑒𝑞(𝑑2)
Phase 3: Fuzzy Commitment
if self-checking fails, aborts and reminds the user
Phase 4: PAKE
𝛿————→
E(𝑤, 𝐴)
———————→
E(𝑤′, 𝐵⋃︀⋃︀𝐶1)
←——————
E(𝐾, 𝐶1⋃︀⋃︀𝐶2)
——————→
E(𝐾′, 𝐶2)
←——————
4 decommits: 𝜆′= 𝑒(𝐸𝑑2)⊕ 𝛿
5 𝑃′ decode←——— RS(2𝑘,𝑚, 𝑛, 𝜆′)
7 picks 𝑏; 𝐵= 𝑔𝑏 mod 𝑝; 𝑤′= h(𝑃′)
8 𝐾′= 𝐴𝑏 mod 𝑝; picks a challenge 𝐶1
11 if 𝐶1 is not received, aborts
𝑒(𝑖)=
𝑛(︁⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂[︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂(︂
1, 1,⋯, 1, 0, 0,⋯, 0
)︁⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂]︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂⌊︂)︂
𝐿
(1)
reduce the encoding length and then representing the result as a
sequence of consecutive “1” and “0” bits. The distance then can be
computed as the Hamming distance between their encodings.
Given the base value 𝐵 and an interval value 𝑖, we derive 𝑛=
⟨︀𝑖⇑𝐵⧹︀. We make sure all intervals have the same length 𝐿 of encod-
another 𝐿− 𝑛 “0” bits appended to the end. So the interval with the
ings. Then, the interval is represented as 𝑛 consecutive “1” bits, with
value 𝑖 is encoded as:
A large base value 𝐵 leads to more efficient key agreement but
less precise evidence comparison, and vice versa. We discuss how
to select the base value 𝐵 in Section 7.4. Assume 𝐵= 4 and consider
the two examples above. {121} can be encoded as⟨︀121⇑4⧹︀ = 30
consecutive “1” bits follwed by 𝐿− 30 “0” bits. {57} can be en-
coded as 14 consecutive “1” bits followed by 𝐿− 14 “0” bits. Thus,
we have Ham(𝑒(121), 𝑒(57)) = 16, which is much larger than
Ham(𝑒(128), 𝑒(127))= 1. Therefore, our faithful fuzzy commit-
The encoding can only represent a value between 0 and 𝐿∗ 𝐵+
(𝐵− 1). It works well in our case as intervals do not fall in a huge
ment overcomes the limitation of the vanilla fuzzy commitment
and makes correct decisions.
range. We do not claim it as a general encoding solution.
4.2 Protocol Details
Table 1 shows our protocol, which consists of four phases. (1) Ini-
tialization. Almost all commercial off-the-shelf devices have some
built-in method to initiate the pairing process (e.g., long pressing a
button). (2) Extracting Evidence. As the user wearing/holding the
helper device preforms pairing operations on the IoT device, each
side extracts evidence independently. Here, self-checking is en-
forced: if there are no pauses detected, the pairing aborts and the
helper reminds the user of adding one or more pauses. As illus-
trated in Section 7.2, pauses are critical to defeat trained mimicry
2𝑘 , where 𝑘 is a natural number
2𝑘 , and Q= F𝑛
and 2𝑘 denotes the number of words (codewords) in P (Q).
a key generation algorithm ( 1 ). Then, 𝑃 is uniquely mapped to a
attacks. (3) Fuzzy Commitment. The two devices use the evidence to
communicate a “password”. (4) Password-Authenticated Key Agree-
ment (PAKE). The devices make use of the “password” to agree on
a session key. Below we interpret the details of Phases (3) and (4).
Fuzzy Commitment. This phase is accomplished using faithful