**Author: Yuki Chen @ Qihoo 360 Vulcan Team**  
**Date: 2019/09/11**  
**Source:**
As a script engine enthusiast, recently I did some research on all the major
script engines on Windows system (VBScript, JScript, JScript9 and ChakraCore)
and discovered/exploited some interesting bugs which also helped me to get #1
in this year’s Microsoft MSRC’s most valuable researcher list :). Now most of
the bugs have been fixed so I decided to have some writeups about them (maybe
in a series of blogs).
In this blog I will discuss a type of interesting cases I reported to
Microsoft on June 2019. These cases are about how a VBScript feature can cause
troubles in JavaScript engine and brings us easy-to-exploit bugs. This attack
vector has existed for quite a long time (since the born of jscript9 in
Internet Explorer 9) and was not discussed before. By the time of this blog,
all these cases have been fixed (in September CPU). And because now VBScript
has been disabled in Internet Zone by default in Internet Explorer both on
Windows 7 and Windows 10, I think it would be safe to disclose them.
### Background
The VBScript engine supports custom class definition. When you define a
VBScript class, you can specify a special function named “Class_Terminate”.
The “Class_Terminate” function acts like a destructor function and will be
called when the class object is released (In VBScript engine, it means when
there is no reference to the class object).
Below is a simple example of how the “Class_Terminate” works:
    Class cla0
     Private Sub Class_Terminate
        msgbox "Class_Terminate called!"
     End Sub
    End Class
    Set o = new cla0
    Set o = Nothing     
In the above example, the “Class_Terminate” function will get called
immediately when execute the assign statement “Set o = Nothing”. This is
because object in VBScript engine is stored as VT_DISPATCH variant and is
managed by reference counter. The assign statement will decrease the reference
counter of o, and when the reference counter becomes 0, the Class_Terminate
function will get called, as shown in the below code snippet.
This “Class_Terminate” feature has already caused many vulnerabilities in
VBScript engine, for example the ITW 0day CVE-2018-8174 we caught last year:
And the new variants we found based on CVE-2018-8174:
But this time I want to jump out of the VBScript engine to see whether it can
cause some problems in other components.
**When VBScript meets JavaScript, and Class_Terminate meets Garbage
Collection**
As you may know, in Internet Explorer, you can use multiple script languages
(e.g. VBScript and JavaScript) in one web page. And the different script
languages can interact with each other. Now consider the following example:
    o = null;            
The above example creates a class object in VBScript, and then set the variant
to null in JavaScript. We already know that clearing all references to a
VBScript object can trigger its’ “Class_Terminate” function, now guess which
JavaScript statement in the above example will actually trigger the
“Class_Terminate”? Is it statement (1) which sets |o| to null; or some other
statement?
The answer is, to my surprise, it’s statement (2) which will trigger the
“Class_Terminate” callback of the object. By some reversing/debugging we
finally figures out what happens here:
1.When we access the VBScript object |o| in JavaScript, the JS engine will
create a JavaScript “wrapper” object for it (called a HostVariant).
  1. The wrapper object will increase the reference counter of the VBScript object by one when it is initialized. And release the reference counter by 1 when itself is freed.
  2. Since the wrapper object is a JavaScript object, it is managed by the JavaScript Garbage Collection mechanism. So simply set the object to null will not free (dispose) the object immediately, it will not be freed until it is collected by the GC engine.
Below is a stack trace when the Class_Terminate function is called:
    05 060ad038 675457e6 VBSCRIPT!VBScriptClass::TerminateClass+0xa1
    06 060ad054 64fc6f39 VBSCRIPT!VBScriptClass::Release+0x36
    07 060ad080 64fd4e7a JSCRIPT9!SmallFinalizableHeapBlock::DisposeObjects+0x1f9
    08 060ad0a8 64fd4abf JSCRIPT9!HeapInfo::DisposeObjects+0xca
    09 060ad0d8 64fdb830 JSCRIPT9!Recycler::DisposeObjects+0x47
    0a 060ad0dc 64fdaf57 JSCRIPT9!Recycler::FinishDisposeObjects+0x1a
    0b 060ad0f4 64fcd932 JSCRIPT9!Recycler::FinishCollection+0x76
    0c 060ad104 64fd58a5 JSCRIPT9!Recycler::CollectOnConcurrentThread+0x97
    0d 060ad130 64fdb436 JSCRIPT9!Recycler::DoCollect+0xf5
    0e 060ad144 64fdb3f9 JSCRIPT9!DefaultRecyclerCollectionWrapper::ExecuteRecyclerCollectionFunction+0x26
    0f 060ad17c 650b7f69 JSCRIPT9!ThreadContext::ExecuteRecyclerCollectionFunctionCommon+0x39
    10 060ad1bc 64fdb8d9 JSCRIPT9!ThreadContext::ExecuteRecyclerCollectionFunction+0xb9
    11 060ad1fc 6519b9c4 JSCRIPT9!Recycler::DoCollectWrapped+0x5f
    12 060ad208 65213c92 JSCRIPT9!Recycler::Collect+0x53
    **13 060ad220 650b9ae3 JSCRIPT9!Js::GlobalObject::EntryCollectGarbage+0x72**
This means we can trigger a callback and execute arbitrary script code during
a JavaScript garbage collection operation. Can we abuse this behavior to cause
some security bugs? The answer is Yes.
By simply checking where Garbage Collection will be triggered in the JS engine
code, we found the below code chain is useful (and there might be others):
    05 0617ca7c 675457e6 VBSCRIPT!VBScriptClass::TerminateClass+0xa1
    06 0617ca98 64fc6f39 VBSCRIPT!VBScriptClass::Release+0x36
    07 0617cac4 64fd4e7a JSCRIPT9!SmallFinalizableHeapBlock::DisposeObjects+0x1f9
    08 0617caec 64fd4abf JSCRIPT9!HeapInfo::DisposeObjects+0xca
    09 0617cb1c 64fdb830 JSCRIPT9!Recycler::DisposeObjects+0x47
    0a 0617cb20 6508de9b JSCRIPT9!Recycler::FinishDisposeObjects+0x1a
    0b 0617cb3c 64fdb44f JSCRIPT9!Recycler::FinishConcurrentCollect+0x10b
    0c 0617cb50 64fdb3f9 JSCRIPT9!DefaultRecyclerCollectionWrapper::ExecuteRecyclerCollectionFunction+0x3f
    0d 0617cb88 650b7f69 JSCRIPT9!ThreadContext::ExecuteRecyclerCollectionFunctionCommon+0x39
    0e 0617cbc8 6509dcd9 JSCRIPT9!ThreadContext::ExecuteRecyclerCollectionFunction+0xb9
    0f 0617cc00 6509dc26 JSCRIPT9!Recycler::FinishConcurrentCollectWrapped+0x57
    10 0617cc0c 64fd615a JSCRIPT9!Recycler::TryFinishConcurrentCollect+0x6e
    11 0617cc20 64fd53de JSCRIPT9!Recycler::TryLargeAlloc+0x71
    12 0617cc48 64feb4f5 JSCRIPT9!Recycler::LargeAlloc+0x2f
    **13 0617cc6c 64fcace3 JSCRIPT9!Recycler::AllocZero+0xe5**
The above call stack shows that we can trigger a GC when allocating some
memory in the JS engine. This is quite useful for us. Because the memory
allocation operations are quite common in the JS engine and if the developers
are not aware of possible callbacks in the operation, it can cause big
problems.
Let’s take a look at some examples.
**Let’s party!**
### Case 1: Type Confusion in Push Function of JavaScript Native Arrays
In Jscript9, there are different types of arrays including NativeIntArray,
NativeFloatArray and the VarArray. Some array runtime functions contain fast
paths for different types of arrays to improve speed. The Array.prototype.push
function is one of them.
In the implementation of the push function, if current array is a native
array, it will go to the fast path for native array. In the fast path code,
when pushing the elements to the array, if current array segment is not big
enough, it will:
1.Resize the segment. 2.Store the element into the resized segment.
Step 1 will allocate a new segment for the array. By using the
“Class_Terminate” and the GC trick, we can execute arbitrary script in step 1.
If we change the native array to var array (object array) in our callback, we
can cause a type confusion which is easy to exploit.
Below is the PoC:
    arr.push(o);
    o = null;
    arr[0] = null;
    try {
    for (var i = 0; i < 0x10000000 && !stop; ++ i){