ﬁle, or where logs of the sub-systems can be separated with
keywords and regex. The user conﬁgures a list of sub-systems,
their source code ﬁles (e.g., a sub-folder of the source code),
and their log ﬁles or patterns. The experiments that exhibit
propagation are worth further investigation, e.g., to develop more
robust interfaces between sub-systems to prevent the propagation
and make recovery easier. Examples of this analysis can be
found in previous papers [45], [57].
(cid:2) Failure visualization. ProFIPy provides a graphical repre-
sentation of an experiment, to help the user to understand what
happened during a failure. The tool instruments selected RPC
APIs in the target software, and records their invocations during
the experiment using the Zipkin distributed tracing framework
[58]. These API calls are visualized as events on timelines as
interactive plots. An example of visualization can be found in a
previous study [59].
V. CASE STUDY
We present an application of ProFIPy in the context of Python-
etcd [60], which is a library that provides Python bindings for
the etcd distributed key-value store [61]. Huawei uses Python-
etcd in their systems and asked for three fault classes to be
evaluated using our fault injection tool (Table I): (i) call failures
when invoking APIs from external libraries (wrong response,
timeouts, etc.), (ii) wrong inputs to the Python-etcd APIs, and
TABLE I
INJECTED FAULT TYPES.
Fault Category
Injection Target
Examples of
Injections
Failures when
calling external
library APIs
Wrong inputs in
Python-etcd API
Resource
management bugs
API calls to the urllib and
os Python modules
set(key, val), get(key),
test and set(key, val,
old), ...
set(key, val), get(key),
test and set(key, val,
old), ...
Exceptions, None
objects, omitted
call, wrong call
String corruptions,
None values,
negative integers
Hog threads inside
methods of
Python-etcd
(iii) resource management faults. We implemented these fault
types using the ProFIPy DSL language.
We performed three fault injection campaigns on Python-etcd
version 0.4.5. The workload used deploys the etcd server, and it
uploads and queries several key-value pairs of a different kind
(e.g., with directories, sub-keys, TTL, etc.) that we derived from
Python-etcd’s integration tests. In the following subsections, we
present the injected fault types and analyze failure modes using
ProFIPy.
A. Errors from external APIs
In the ﬁrst campaign of experiments, we injected faults at
method calls in Python-etcd external modules, targeting the
methods of urllib (a Python package for working with URLs)
and from os (e.g., Python methods for ﬁle I/O). The injected
fault types include:
• Throw Exception: The raise of the exception on a
method call, according to pre-deﬁned, per-API list of
exceptions (e.g., ConnectTimeoutError);
• Missing Function Call: A method call is entirely omitted
(e.g., replaced with the python statement pass);
• Missing Parameters: A method call is invoked with omit-
ted parameters (e.g., the method uses a default parameter
instead of the correct one).
For this faultload, ProFIPy identiﬁed 26 points where to inject
faults. In 13 cases, the workload covered the injected faulty
code. We found failures in 12 experiments.
(cid:3) Reconnection failure. In half of the cases, we found failures
in both rounds of execution, as denoted by the service availability
metric. The experiments did not complete within the timeout,
and etcd was unable to reconnect even after the fault removal.
We found that the etcd server was unable to bind to a TCP/IP
port. Thus, restarting etcd does not sufﬁce to recover from
the fault, but the port needs to be explicitly freed. We need
additional exception handlers to catch exceptions caused by
network connections, such as time-outs.
(cid:3) Critical
errors about ’member has already been
bootstrapped’. In a few experiments, Python-etcd was unable
to perform operations on etcd in the ﬁrst round, due to an
inconsistent state of the server caused by the fault. To recover
from this failure, the system needs a more elaborated exception
handling: it should explicitly remove the affected member by
Authorized licensed use limited to: University College London. Downloaded on October 01,2020 at 12:46:15 UTC from IEEE Xplore.  Restrictions apply. 
369
using the dynamic conﬁguration API of etcd, and it should
restart etcd by reverting to a previous consistent state.
(cid:3) Client process crash due to an exception. In the remaining
cases, the client process crashed during the ﬁrst round due to
an unhandled exception. Moreover, the system was not available
after disabling the fault. In these cases, Python-etcd should
provide exception handlers to catch these exceptions or to raise
another kind of exception (such as EtcdException) to be managed
by Python-etcd client process.
B. Wrong Inputs
In the second campaign of fault injection experiments, we in-
jected faults in input parameters of Python-etcd API methods. We
conﬁgured ProFIPy with fault types for injecting corrupted inputs,
such as strings with random characters, None object references,
negative integers, etc. For example, let us consider the method
test and set(key, value, old value) taking in input
three parameters: A fault consists in injecting a corrupted input
in the ﬁrst parameter (string type) by randomly replacing the
characters of the string.
The ProFIPy tool identiﬁed 66 locations where to inject these
faults. In all of the cases, the injected faulty code was covered
by the workload, and in 29 experiments we found the following
failures in the ﬁrst round of execution:
(cid:3) AttributeError: ’NoneType’ object has no attribute
’startswith’. This failure is due to an issue of Python-etcd.
It happens when the tool injects a None value instead of a string
(e.g., a key string). Python-etcd does not check whether the input
strings are valid. Therefore, when a None value is passed in
input, Python-etcd uses the startswith attribute on a None
reference. To avoid this failure, Python-etcd should sanitize null
strings in inputs.
(cid:3) EtcdKeyNotFound exception. This failure happens when a
wrong key or value is injected. In this case, the workload failed
because it is not able to ﬁnd the expected key or value in the
etcd datastore. The caller (in this case, the workload) needs to
get/set the correct keys and values. Thus, the Python-etcd client
should handle these exceptions.
(cid:3) EtcdException: Bad response: 400 Bad Request. This
failure happens when ProFIPy injects a wrong key or value that
is not valid (e.g., a non-ASCII string). When this value is passed
to etcd, the server rejects the request with the HTTP Error 400
Bad Request. Python-etcd should be ﬁxed to check and sanitize
non-ASCII strings.
C. Resource Management Bugs
In the last campaign of experiments, we injected CPU hogs
to overload Python-etcd. We used ProFIPy for injecting stale
threads that generate a high CPU load. We targeted the same
methods of the second campaign of experiments, by injecting
a resource hog after the method call. The tool found 37
injectable locations, and the faulty code was always covered
during the workload execution. In 14 experiments, the system
experienced a service failure in the ﬁrst round of execution.
Most of these failures forced a process termination with the
exception “UnboundLocalError: local variable ... referenced
before assignment”. In other cases, the workload also failed
because of inconsistent values read from the etcd datastore.
The high CPU usage triggered race conditions in Python-etcd,
and in the Python interpreter itself. Since it is hard to ﬁnd and to
ﬁx these issues, the failure should be mitigated, by cleaning-up
stale threads that may cause high CPU consumption. This should
be pursued by monitoring at run-time the CPU utilization of
Python processes, and by killing or restarting stale threads if
CPU utilization is too high.
D. Performance evaluation
ProFIPy can quickly inject faults even for large projects since
the scan and mutation can be parallelized across several CPUs (it
is an “embarrassingly parallel“ task). It took less than one minute
to scan and mutate Python-etcd on an 8-core Intel Xeon with
16 GB RAM. We also evaluated performance on the OpenStack
project, by targeting the three most important modules (Nova,
Neutron, and Cinder) accounting for about 400K lines of Python
code. Using the same hardware, ProFIPy takes about 20 min
to identify 17488 injectable locations using 120 different DSL
patterns, which is reasonable for practical purposes given the
large size of this project. The duration of the execution phase is
beyond the control of our tool since it depends on the time to
deploy the target system and run the workload. It took between
10s and 120s (worst case of a “hang” failure) to run a single
experiment on Python-etcd, and about 30 min to run all of
the tests of this section. For OpenStack, an experiment takes
several tens of minutes, since it is a complex system that deploys
VMs, loads large storage volumes, initializes databases, etc. We
were able to execute experiments on OpenStack through nightly
parallelized runs.
VI. CONCLUSION
ProFIPy is designed to be programmable and highly usable, by
performing fault injection campaigns with customized faultloads
in Python software.
The analysis of results pointed out several failure modes,
which were acknowledged as valid threats by our industrial
partners. The programmability of the tool through a DSL was
useful to easily and quickly customize fault injections to comply
with the fault classes requested by the company, based on their
internal software resiliency requirements. We discussed in the
paper potential strategies to mitigate the failure modes.
We plan to extend the tool with more features for failure
analysis and to use it as a basis for research on software
fault tolerance strategies in modern applications, such as cloud
software.
ACKNOWLEDGMENTS
This work has been done in the framework of the R&D
project of the multiregional investment programme ”REINForce:
REsearch to INspire the Future” (CDS000609) with Hitachi
Rail S.p.A., supported by the Italian Ministry for Economic
Development (MISE) through the Invitalia S.p.A. agency.
Authorized licensed use limited to: University College London. Downloaded on October 01,2020 at 12:46:15 UTC from IEEE Xplore.  Restrictions apply. 
370