title:Scraping Sticky Leftovers: App User Information Left on Servers After
Account Deletion
author:Preethi Santhanam and
Hoang Dang and
Zhiyong Shan and
Iulian Neamtiu
0
2
7
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Scraping Sticky Leftovers: App User Information
Left on Servers After Account Deletion
Preethi Santhanam, Hoang Dang
Zhiyong Shan
Wichita State University
{pxsanthanam1, hndang}@shockers.wichita.edu
Wichita State University
PI:EMAIL
Iulian Neamtiu
New Jersey Institute of Technology
PI:EMAIL
Abstract
Sixty-ﬁve percent of mobile apps require user accounts for offering full-
ﬂedged functionality. Account information includes private data, e.g., address,
phone number, credit card. Our concern is “leftover” account data kept on the
server after account deletion, which can be a signiﬁcant privacy violation.
Speciﬁcally, we analyzed 1,435 popular apps from Google Play (and 771
associated websites), of which 678 have their own sign-up process, to answer
questions such as: Can accounts be deleted at all? Following account deletion,
will user data remain on the app’s servers? If so, for how long? Do apps
keep their promise to remove data?
Answering these questions, and more generally, understanding and tackling
the leftover account problem,
is challenging. A fundamental obstacle is
that leftover data is manipulated and retained in a private space, on the
app’s backend servers; we devised a novel, reverse-engineering approach
to infer leftover data from app–server communication. Another obstacle is
the distributed nature of this data: program analysis as well as information
retrieval are required on both the app and its website. We have developed
an end-to-end solution (static analysis, dynamic analysis, natural language
processing) to the leftover account problem. First, our toolchain checks
whether an app, or its website, support account deletion; next, it checks
whether the app/website have a data retention policy, and whether the account
is left on servers after deletion, or after the speciﬁed retention period; ﬁnally,
it automatically cleans up leftover accounts. We found that 64.45% of apps
do not offer any means for users to delete accounts; 2.5% of apps still keep
account data on app servers even after accounts are deleted by users. Only
5% of apps specify a retention period; some of these apps violate their own
policy by still retaining data months after the period has ended. Experiments
show that our approach is effective, with an F-measure > 88%, and efﬁcient,
with a typical analysis time of 279 seconds per app/website.
1. Introduction
A substantial percentage of mobile apps (65%, according
to our ﬁndings) require user accounts. When creating a mo-
bile app account, users have to provide private information,
e.g., email address, phone number, billing address, or even
SSN. Unfortunately, once this information has been gathered,
only 35.55% of apps offer users the option to “forget” the
information, e.g., offering a Delete Account option in app
or on the website. Some companies deliberately make this
process harder, e.g., users have to go to the company’s website
to delete a mobile-created account. Finally, some companies
retain information even after users have asked for the account
and associated data to be removed.
We denote LAI – Leftover Account Information – the
account information retained on servers after account deletion.
As server data is not (readily) accessible, our insight
is
to derive LAI from app-server interaction. We study how
LAI is handled, from the perspective of user control: what
information is required at account creation time; can users
request account deletion; what information is retained after the
user requests deletion, and for how long. LAI is problematic
for two main reasons. First, LAI poses a security risk because
leftover private information can be leaked after users have
deleted their accounts. Second, LAI violates users’ trust; users
reasonably assume that account information is deleted when
an account is deleted [37].
In Figure 1 we present several LAI examples. Figure 1(a)
shows the PiniOn mobile app requiring name, password, birth-
day, email and gender at account creation time; Figure 1(b)
shows the “account will be erased” warning shown when
users request account deletion; Figure 1(c) shows that the
app actually still keeps (at least some) account details on the
backend servers after account deletion.
Less than a quarter of our examined apps (22.71%) provide
users with means to delete their accounts, e.g., via an in-app
‘Delete Account’ button. Other apps (12.83%) do not provide
this in-app option – instead they ask users to go to their
corresponding websites and delete the accounts from there.
Whether the company actually removes users’ information af-
ter account deletion is a different story. For example, Figure 1
(d) shows how an account (anonymized) is still retained on
eBay’s servers after account deletion and even after the 30 day-
retention period claimed by the app; in Section 9.2.1 we show
other examples of popular apps that breach their promise to
delete account data at the end of the retention period, keeping
it for months after. In fact only 5% of apps specify a retention
period (for how long data will be kept after account deletion):
from 30 minutes to 5 years, typically 30 days. Finally, 437
apps (384 of which have more than 1M installs) do not provide
any account deletion functionality, either in the app or on the
website.
We performed a pilot study on 188 popular broad-ranging
apps1 from Google Play. Of these, 154 had a corresponding
website; 135 ask for sensitive user information to create
accounts. We manually installed each app, created an account,
then explored the app and the website to check whether
account deletion was supported. We deleted the account and
uninstalled the app. We then re-installed the app and attempted
to use the previous sign-up information upon account creation.
Table 1 shows the study results. We found that 34.81% of
1. Spanning 28 categories; involving free and paid apps; with app popularity
ranging from 1M to 1B installs.
© 2022, Preethi Santhanam. Under license to IEEE.
DOI 10.1109/SP46214.2022.00020
2145
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:00:26 UTC from IEEE Xplore.  Restrictions apply. 
(a)
(b)
(c)
(d)
Fig. 1: Leftover Account Information: (a) Personal information required during PiniOn’s sign-up; (b) App claiming the account
will be “irreversibly” erased; (c) The key ﬁeld of the account still retained on the server; (d) An user account (anonymized)
still on eBay’s servers even after the 30-day post-deletion retention period has expired.
the apps leave LAI on servers after app uninstallation, and
2.96% keep LAI after account deletion. A majority (57.04%)
of apps do not offer a ‘Delete Account’ option, either in-app
or on the website. Finally, for 23 apps, the account deletion
process is convoluted (users must contact customer support,
undergo phone-based veriﬁcation, etc.). Hence there is an
impetus for an in-depth, systematic study of LAI.
Challenges and approach. To our knowledge, there has
been no effort so far to study and address LAI. A fundamental
challenge is that data is stored privately, on the server, thus
inaccessible to outsiders; we devised a novel approach based
on reverse engineering to infer leftover data from app–server
communication. Another challenge is the extensive scope of
the analysis, even for one app: account management can be
distributed across an app and its website, which requires both
app and website analysis. Functionality described in natural
language,
in the app or website resources, e.g., XML or
even images, has to be connected to account management
actions in app code or website code. Deletion and retention
policies might be deliberately “buried”; their precise retrieval
and understanding is a challenging NLP task. We address
these challenges via a four-tool chain – LeftoverAccountAnalyzer,
AccountDeletionAnalyzer, LeftoverAccountCleaner (for uninstalled
apps), RetentionPeriodAnalyzer – described in Sections 4 to 7. We
made the tool implementations, datasets, and analysis results
available on GitHub.2
We evaluate our approach, and perform an LAI study, in
Section 9. We started from 1,435 Android apps and 771 cor-
responding websites; while 938 apps (65.4%) require account
sign-up, 260 apps use third-party sign-in, hence the focus of
the study was on the 678 “own sign-in” apps.
The study shows that our toolchain is effective. For example,
LeftoverAccountAnalyzer found that 254 apps (37.46%) leave
2. https://github.com/LeftoverAccountInformation/LAI
TABLE 1: Pilot Study Results (135 Apps).
App Info
LAI remains on servers
after uninstallation
after account deletion
Account deletion function. (ADF)
app & website
in-app only, not on website
on website only, not in-app
no ADF
Count Percentage
47
4
13
16
29
77
34.81%
2.96%
9.63%
11.85%
21.48%
57.04%
LAI after app uninstallation, and 17 apps (2.5%) leave LAI
after account deletion, including government-issued IDs, or
banking information (Table 7). Moreover, three apps with more
than 50M installs keep LAI months after they were supposed
to delete it (Table 9). We were able to conﬁrm the LAI
problem by contacting customer service, e.g., Enterprise Rent-
A-Car. Finally, LeftoverAccountCleaner could successfully clean
up accounts in 214 out of 245 uninstalled apps (87.34%). The
study also shows that our toolchain is efﬁcient: the median
per-app analysis time for LeftoverAccountAnalyzer, AccountDeletio-
nAnalyzer, RetentionPeriodAnalyzer and LeftoverAccountCleaner was
163 seconds, 276 seconds, 259 seconds and 231 seconds,
respectively.
Contributions. We make the following contributions:
• An exposition and study of the LAI problem.
• A novel, reverse engineering-based approach named Left-
overAccountAnalyzer to infer the account information re-
maining on servers after account deletion.
• An AccountDeletionAnalyzer tool to determine whether an
app has account deletion functionality.
• A RetentionPeriodAnalyzer tool to automatically extract app
retention period.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:00:26 UTC from IEEE Xplore.  Restrictions apply. 
22146
0 ebay.com/usr/softa_53 (I) softa_53 Edit profile O Followers I O Reviews I Member since: Sep 14, 2018 I United States Items for sale(o) Start selling on eBay today. Following •• • Follow other members, collections and interests to get more great finds in your el Your followers You don't have any followers yet. Personalize your profile and make a great impre About eBay Announcements Community Security Center Resolution Center S Copyright© 1995-2019 eBay Inc. All Rights Reserved. AccessibilityJ User Agreement, PrivacyJ Cookies <J 0 □• A LeftoverAccountCleaner tool, to automatically clean up
leftover accounts for a given Google user.
• An evaluation of the aforementioned tools on popular
apps from Google Play.
2. Leftover Accounts: Problem Deﬁnition
The lifecycle of an account is shown in Figure 2. After
an app is installed, the user signs-up (creates an account3)
usually on the phone, or less frequently, on the app’s website.
The user’s personal information is sent to the server and stored
into the account database. When users decide not to use the
app anymore, their options are to delete the account, uninstall
the app, or both.
We believe that users should reasonably expect:
• Account deletion functionality, offered in the app or on
the website.
• A retention policy that speciﬁes for how long account
data will be retained after account deletion.
• Account information to be removed from the server after