以下是如何通过不同选项配置缓存共享的示例。
::: orderedlist
**流程**
1.  使用以下命令挂载 NFS 共享：
    ``` literallayout
    mount home0:/disk0/fred /home/fred -o fsc
    mount home0:/disk0/jim /home/jim -o fsc
    ```
    在这里，`/home/fred`{.literal} 和 `/home/jim`{.literal}
    可能会共享超级块，因为它们具有相同的选项，尤其是它们来自 NFS
    服务器(`home0)上的相同卷/分区。`{.literal}
2.  要不共享超级块，请使用 `mount`{.literal} 命令和以下选项：
    ``` literallayout
    mount home0:/disk0/fred /home/fred -o fsc,rsize=8192
    mount home0:/disk0/jim /home/jim -o fsc,rsize=65536
    ```
    在这种情况下，`/home/fred`{.literal} 和 `/home/jim`{.literal}
    将不会共享超级块，因为它们具有不同的网络访问参数，它们是级别 2
    密钥的一部分。
3.  要在不共享超级块的情况下缓存两个子树的内容（`/ home/fred1`{.literal}和
    /home/fred2``{=html} ） [*两次*]{.emphasis}，请使用以下命令：
    ``` literallayout
    mount home0:/disk0/fred /home/fred1 -o fsc,rsize=8192
    mount home0:/disk0/fred /home/fred2 -o fsc,rsize=65536
    ```
4.  避免超级块共享的另一种方法是使用 `nosharecache`{.literal}
    参数显式阻止它。使用相同的示例：
    ``` literallayout
    mount home0:/disk0/fred /home/fred -o nosharecache,fsc
    mount home0:/disk0/jim /home/jim -o nosharecache,fsc
    ```
    然而，在这种情况下，只允许其中一个超级块使用缓存，因为无法区分
    home0:/disk0/ `fred 和 home0:/disk0`{.literal} /jim``{=html}
    的级别 2 密钥。
5.  要指定超级块的寻址，请在至少一个挂载上添加一个
    [*唯一标识符*]{.emphasis}，例如 `fsc=unique-identifier`{.literal} ：
    ``` literallayout
    mount home0:/disk0/fred /home/fred -o nosharecache,fsc
    mount home0:/disk0/jim /home/jim -o nosharecache,fsc=jim
    ```
    在这里，唯一标识符 `jim`{.literal} 会被添加到 `/home/jim`{.literal}
    缓存中使用的 Level 2 密钥中。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
用户无法在具有不同通信或协议参数的超级块之间共享缓存。例如，在 NFSv4.0
和 NFSv3 之间或 NFSv4.1 和 NFSv4.2
之间无法共享，因为它们会强制使用不同的超级块。另外，设置读取大小(rsize)等参数可防止缓存共享，因为它再次强制使用不同的超级块。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-fs-cache_managing-file-systems.html#cache-limitations-with-nfs_using-the-cache-with-nfs}NFS 的缓存限制 {.title}
:::
NFS 有一些缓存限制：
::: itemizedlist
-   从共享文件系统打开文件以进行直接 I/O
    将自动绕过缓存。这是因为这种访问类型必须与服务器直接进行。
:::
::: itemizedlist
-   从共享文件系统打开一个文件直接 I/O
    或写入清除文件缓存的副本。FS-Cache
    不会再次缓存文件，直到它不再打开以进行直接 I/O 或写入操作。
-   另外，FS-Cache 发行版本只缓存常规 NFS 文件。FS-Cache
    [*不会*]{.emphasis} 缓存目录、符号链接、设备文件、FIFO 和套接字。
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-fs-cache_managing-file-systems.html#cache-cull-limits-configuration_getting-started-with-fs-cache}cache cull 限制配置 {.title}
:::
`cachefilesd`{.literal}
守护进程的工作原理为：缓存来自共享文件系统的远程数据，以释放磁盘上的空间。这可能会消耗所有可用空间，如果磁盘也存放根分区，这可能会糟糕。为控制这一点，`cachefiled 会`{.literal}
尝试通过丢弃从缓存中丢弃旧对象（例如，不太近地访问）来维护一定数量的可用空间。这个行为被称为
[*cache culling*]{.emphasis}。
缓存 culling
根据块百分比以及底层文件系统中可用文件的百分比进行。`/etc/cachefilesd.conf`{.literal}
中有控制六个限制的设置：
::: variablelist
[Brun [*N*]{.emphasis}%（块百分比）、frun [*N*]{.emphasis}%（文件百分比）]{.term}
:   如果可用空间量和缓存中的可用文件数超过这两个限制，则 culling
    将关闭。
[bcull [*N*]{.emphasis}%（块百分比）、fcull [*N*]{.emphasis}%（文件百分比）]{.term}
:   如果可用空间量或缓存中的文件数量低于其中任何一个限制，则启动
    culling。
[bstop [*N*]{.emphasis}%（块百分比）、fstop [*N*]{.emphasis}%（文件百分比）]{.term}
:   如果缓存中的可用空间量或可用文件的数量低于这些限制，则不允许进一步分配磁盘空间或文件，直到
    Culling 再次引发超过这些限制的内容。
:::
每个设置的 `N`{.literal} 默认值如下：
::: itemizedlist
-   `Brun/`{.literal}`frun`{.literal} - 10%
-   `bcull`{.literal}/`fcull`{.literal} - 7%
-   `bstop`{.literal}/`fstop`{.literal} - 3%
:::
在配置这些设置时，必须满足以下条件：
::: itemizedlist
-   0 SAS `bstop`{.literal} \
# []{#getting-started-with-fs-cache_managing-file-systems.html#retrieving-statistical-information_getting-started-with-fs-cache}从 fscache 内核模块检索统计信息 {.title}
:::
FS-Cache 还跟踪一般统计信息。这个步骤演示了如何获取此信息。
::: orderedlist
**流程**
1.  要查看 FS-Cache 的统计信息，请使用以下命令：
    ``` literallayout
    # cat /proc/fs/fscache/stats
    ```
:::
FS-Cache
统计数据包括有关决策点和对象计数器的信息。如需更多信息，请参阅以下内核文档：
`/usr/share/doc/kernel-doc-4.18.0/Documentation/filesystems/caching/fscache.txt`{.literal}
:::
::: section
::: titlepage
# []{#getting-started-with-fs-cache_managing-file-systems.html#fs-cache-references_getting-started-with-fs-cache}FS-Cache 参考 {.title}
:::
本节提供了 FS-Cache 的参考信息。
::: orderedlist
1.  有关 `cachefilesd`{.literal} 以及如何配置它的更多信息，请参阅
    `man cachefilesd`{.literal} 和
    `man cachefilesd.conf`{.literal}。以下内核文档还提供附加信息：
    ::: itemizedlist
    -   `/usr/share/doc/cachefilesd/README`{.literal}
    -   `/usr/share/man/man5/cachefilesd.conf.5.gz`{.literal}
    -   `/usr/share/man/man8/cachefilesd.8.gz`{.literal}
    :::
2.  有关 FS-Cache
    的常规信息，包括其设计限制、可用统计和功能的详情，请查看以下内核文档：
    `/usr/share/doc/kernel-doc-4.18.0/Documentation/filesystems/caching/fscache.txt`{.literal}
:::
:::
:::
[]{#assembly_mounting-an-smb-share-on-red-hat-enterprise-linux_managing-file-systems.html}
::: chapter
::: titlepage
# []{#assembly_mounting-an-smb-share-on-red-hat-enterprise-linux_managing-file-systems.html#assembly_mounting-an-smb-share-on-red-hat-enterprise-linux_managing-file-systems}第 8 章 在 Red Hat Enterprise Linux 中挂载 SMB 共享 {.title}
:::
服务器消息块(SMB)协议实施用于访问服务器上资源的应用层网络协议，如文件共享和共享打印机。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在 SMB 中，您可以找到有关通用 Internet
文件系统(CIFS)协议的引用，该协议是 SMB 的方言。支持 SMB 和 CIFS
协议，并且挂载 SMB 和 CIFS 共享时涉及的内核模块和实用程序均使用 name
`cifs`{.literal}。
:::
这部分论述了如何从 SMB 服务器挂载共享。有关使用 Samba 在 Red Hat
Enterprise Linux 中设置 SMB 服务器的详情，请参考 [使用 Samba
作为服务器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/deploying_different_types_of_servers/assembly_using-samba-as-a-server_deploying-different-types-of-servers){.link}。
::: title
**先决条件**
:::
在 Microsoft Windows 上，SMB 被默认实施。在 Red Hat Enterprise Linux
上，内核 `的 thecifs.ko`{.literal} 文件系统模块提供对挂载 SMB
共享的支持。在此处安装 `cifs-utils`{.literal} 软件包：
``` literallayout
# yum install cifs-utils
```
The `cifs-utils`{.literal} 软件包提供以下工具：
::: itemizedlist
-   挂载 SMB 和 CIFS 共享
-   在内核的密钥环中管理 NT Lan Manager(NTLM)凭据
-   在 SMB 和 CIFS 共享上的安全描述符中设置和显示访问控制列表(ACL)
:::
::: section
::: titlepage
# []{#assembly_mounting-an-smb-share-on-red-hat-enterprise-linux_managing-file-systems.html#con_supported-smb-protocol-versions_assembly_mounting-an-smb-share-on-red-hat-enterprise-linux}支持的 SMB 协议版本 {.title}
:::
The `cifs.ko`{.literal} 内核模块支持以下 SMB 协议版本：
::: itemizedlist
-   SMB 1
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    因为已知的安全问题，SMB1 协议已弃用
    [**，且仅在专用网络中使用**]{.strong}。SMB1
    仍然作为受支持的选项提供，其主要原因是，当前它是唯一支持 UNIX 扩展的
    SMB 协议版本。如果您不需要在 SMB 上使用 UNIX
    扩展，红帽强烈建议您使用 SMB2 或更高版本。
    :::
-   SMB 2.0
-   SMB 2.1
-   SMB 3.0
-   SMB 3.1.1
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
根据协议版本，并非所有 SMB 功能都已实施。
:::
:::
::: section
::: titlepage
# []{#assembly_mounting-an-smb-share-on-red-hat-enterprise-linux_managing-file-systems.html#con_unix-extensions-support_assembly_mounting-an-smb-share-on-red-hat-enterprise-linux}UNIX 扩展支持 {.title}
:::
Samba 使用 SMB 协议中的 `CAP_UNIX`{.literal} 功能位来提供 UNIX
扩展功能。`cifs.ko`{.literal} 内核模块也支持这些扩展。但是，Samba
和内核模块仅支持 SMB 1 协议中的 UNIX 扩展。
要使用 UNIX 扩展：
::: orderedlist
1.  将 `/etc/samba/smb.conf`{.literal} 文件中的 `[global]`{.literal}
    部分中的 `server min protocol`{.literal} 参数设置为
    `NT1`{.literal}。
2.  通过向 mount 命令提供 `-o vers=1.0 选项，`{.literal} 使用 SMB 1
    协议挂载共享。例如：
    ``` literallayout
    # mount -t cifs -o vers=1.0,username=user_name //server_name/share_name /mnt/
    ```
    默认情况下，内核模块使用 SMB 2 或服务器支持的最高较晚协议版本。将
    `-o vers=1.0`{.literal} 选项传递给 `mount`{.literal}
    命令会强制内核模块使用 UNIX 扩展所需的 SMB 1 协议。
:::
要验证是否启用了 UNIX 扩展，显示挂载共享的选项：
``` literallayout
# mount
...
//server/share on /mnt type cifs (...,unix,...)
```
如果在挂载选项列表中显示 `unix`{.literal} 条目，则启用了 UNIX 扩展。
:::
::: section
::: titlepage
# []{#assembly_mounting-an-smb-share-on-red-hat-enterprise-linux_managing-file-systems.html#proc_manually-mounting-an-smb-share_assembly_mounting-an-smb-share-on-red-hat-enterprise-linux}手动挂载 SMB 共享 {.title}
:::
如果您只需要临时挂载 SMB 共享，您可以使用 `mount`{.literal}
实用程序手动挂载该共享。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
重启系统时，手动挂载的共享不会再次自动挂载。要配置 Red Hat Enterprise
Linux 在系统引导时自动挂载共享，请参考 ["系统引导时自动挂载 SMB
共享"一节](#assembly_mounting-an-smb-share-on-red-hat-enterprise-linux_managing-file-systems.html#proc_mounting-an-smb-share-automatically-when-the-system-boots_assembly_mounting-an-smb-share-on-red-hat-enterprise-linux "系统引导时自动挂载 SMB 共享"){.xref}。
:::
::: itemizedlist
**先决条件**
-   已安装 The `cifs-utils`{.literal} 软件包。
:::
::: title
**流程**
:::
要手动挂载 SMB 共享，请使用带有 `-t cifs 参数的`{.literal}
`mount`{.literal} 工具：
``` literallayout
# mount -t cifs -o username=user_name //server_name/share_name /mnt/
Password for user_name@//server_name/share_name:  password
```
在 `-o`{.literal} 参数中，您可以指定用于挂载共享的选项。详情请查看
`mount.cifs(8)man`{.literal} page 中的
["常用的挂载选项"一节](#assembly_mounting-an-smb-share-on-red-hat-enterprise-linux_managing-file-systems.html#con_frequently-used-mount-options_assembly_mounting-an-smb-share-on-red-hat-enterprise-linux "常用的挂载选项"){.xref}
和 `OPTIONS`{.literal} 部分。
::: example
[]{#assembly_mounting-an-smb-share-on-red-hat-enterprise-linux_managing-file-systems.html#example_mounting-a-share-using-an-encrypted-smb30-connection_assembly_mounting-an-smb-share-on-red-hat-enterprise-linux}