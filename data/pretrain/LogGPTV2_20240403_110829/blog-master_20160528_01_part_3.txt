------------+-----------+---------+-------+------+-------------------------      
          1 | (81636,1) |      16 | f     | f    | 5f 9e c5 01 00 00 00 00  -- 这是指向当前层级右页的ctid      
          2 | (3,1)     |       8 | f     | f    |    -- 注意第一条初始值是这      
          3 | (411,1)   |      16 | f     | f    | 77 97 01 00 00 00 00 00      
          4 | (698,1)   |      16 | f     | f    | ed 2e 03 00 00 00 00 00      
...      
        286 | (81350,1) |      16 | f     | f    | e9 06 c4 01 00 00 00 00      
(286 rows)      
```      
btpo_flags=0  代表 branch page        
btpo = 1 代表第1层       
```      
postgres=# select * from bt_page_stats('tab3_pkey', 3);      
 blkno | type | live_items | dead_items | avg_item_size | page_size | free_size | btpo_prev | btpo_next | btpo | btpo_flags       
-------+------+------------+------------+---------------+-----------+-----------+-----------+-----------+------+------------      
     3 | i    |        286 |          0 |            15 |      8192 |      2436 |         0 |       411 |    1 |          0      
(1 row)      
postgres=# select * from bt_page_items('tab3_pkey', 3);      
 itemoffset |  ctid   | itemlen | nulls | vars |          data                 
------------+---------+---------+-------+------+-------------------------      
          1 | (287,1) |      16 | f     | f    | 77 97 01 00 00 00 00 00      
          2 | (1,1)   |       8 | f     | f    |       
          3 | (2,1)   |      16 | f     | f    | 6f 01 00 00 00 00 00 00      
          4 | (4,1)   |      16 | f     | f    | dd 02 00 00 00 00 00 00      
...      
        286 | (286,1) |      16 | f     | f    | 09 96 01 00 00 00 00 00      
(286 rows)      
```      
btpo_flags=1  代表 leaf page          
btpo = 0     代表第0层          
```      
postgres=# select * from bt_page_stats('tab3_pkey', 1);      
 blkno | type | live_items | dead_items | avg_item_size | page_size | free_size | btpo_prev | btpo_next | btpo | btpo_flags       
-------+------+------------+------------+---------------+-----------+-----------+-----------+-----------+------+------------      
     1 | l    |        367 |          0 |            16 |      8192 |       808 |         0 |         2 |    0 |          1      
(1 row)      
postgres=# select * from bt_page_items('tab3_pkey', 1);      
 itemoffset |  ctid   | itemlen | nulls | vars |          data                 
------------+---------+---------+-------+------+-------------------------      
          1 | (3,7)   |      16 | f     | f    | 6f 01 00 00 00 00 00 00      
          2 | (0,1)   |      16 | f     | f    | 01 00 00 00 00 00 00 00      
          3 | (0,2)   |      16 | f     | f    | 02 00 00 00 00 00 00 00      
...      
        367 | (3,6)   |      16 | f     | f    | 6e 01 00 00 00 00 00 00      
(367 rows)      
```      
通过第0层的ctid就可以获取到heap了.        
heap tuple例子        
```      
postgres=# select * from tab3 where ctid='(0,1)';      
 id |               info                     
----+----------------------------------      
  1 | 370ee1989a2b7f5d8a5b43243596d91f      
(1 row)      
```      
如何解释explain analyze中的扫描了多少个btree page          
实战例子1        
```      
postgres=# create table tbl1(id int primary key, info text);      
CREATE TABLE      
postgres=# insert into tbl1 select trunc(random()*10000000), md5(random()::text) from generate_series(1,5000000) on conflict on constraint tbl1_pkey do nothing;      
INSERT 0 3934875      
postgres=# select ctid,* from tbl1 limit 10;      
  ctid  |   id    |               info                     
--------+---------+----------------------------------      
 (0,1)  | 2458061 | 5c91812b54bdcae602321dceaf22e276      
 (0,2)  | 8577271 | fe8e7a8be0d71a94e13b1b5a7786010b      
 (0,3)  | 4612744 | 56983e47f044b5a4655300e1868d2850      
 (0,4)  | 3690167 | 4a5ec8abf67bc018dcc113be829a59da      
 (0,5)  | 2646638 | 7686b47dcb94e56c11d69ec04d6017f3      
 (0,6)  | 6023272 | 4779d9a849c8287490be9d37a27b4637      
 (0,7)  | 7163674 | 35af37f479f48caa65033a5ef56cd75e      
 (0,8)  | 4049257 | 12fa110d927c88dce0773b546cc600c6      
 (0,9)  | 5815903 | 69ed9770ede59917d15ac2373ca8c797      
 (0,10) | 4068194 | 738595f73670da7ede40aefa8cb3d00c      
(10 rows)      
postgres=# vacuum analyze tbl1;      
VACUUM      
```      
首先我们需要了解索引的level，才能正确的判断需要扫描多少个index page才能取出1条记录。        
```      
postgres=# select * from bt_metap('tbl1_pkey');      
 magic  | version | root | level | fastroot | fastlevel       
--------+---------+------+-------+----------+-----------      
 340322 |       2 |  412 |     2 |      412 |         2      
(1 row)      
```      
level = 2的btree应该长这样        
![6](20160528_01_pic_006.png)      
1\. 以下查询，命中了1条记录，并且走的是index only scan。        
读了4个INDEX PAGE, 包括1 meta page, 1 root page, 1 branch page, 1 leaf page. 1个heap visibility map page        
```      
postgres=#  explain (analyze,verbose,timing,costs,buffers) select id from tbl1 where id = 1;      
                                                         QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------      
 Index Only Scan using tbl1_pkey on public.tbl1  (cost=0.42..1.44 rows=1 width=4) (actual time=0.019..0.020 rows=1 loops=1)      
   Output: id      
   Index Cond: (tbl1.id = 1)      
   Heap Fetches: 0      
   Buffers: shared hit=4      
 Planning time: 0.072 ms      
 Execution time: 0.072 ms      
(7 rows)      
```      
2\. 以下查询，命中了0条记录，并且走的是index only scan。        
读了4个INDEX PAGE, 包括1 meta page, 1 root page, 1 branch page, 1 leaf page. 0个heap visibility map page        
但是explain只算了3个，因为rows=0, 没有匹配的行。不需要查询visibility map文件。      
```      
postgres=# explain (analyze,verbose,timing,costs,buffers) select id from tbl1 where id in (3);      
                                                         QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------      
 Index Only Scan using tbl1_pkey on public.tbl1  (cost=0.43..1.45 rows=1 width=4) (actual time=0.010..0.010 rows=0 loops=1)      
   Output: id      
   Index Cond: (tbl1.id = 3)      
   Heap Fetches: 0      
   Buffers: shared hit=3      
 Planning time: 0.073 ms      
 Execution time: 0.031 ms      
(7 rows)      
```      
3\. 以下查询，命中了7条记录，并且走的是index only scan。        
读了22个INDEX PAGE,       
1 meta page + 7 * (1 root + 1 branch + 1 leaf)    = 22        
也就是说，每个value都扫了root,branch,leaf。     
x个heap visibility map page       
```      
postgres=#  explain (analyze,verbose,timing,costs,buffers) select id from tbl1 where id in (1,2,3,4,100,1000,10000);      
                                                         QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------      
 Index Only Scan using tbl1_pkey on public.tbl1  (cost=0.42..10.10 rows=7 width=4) (actual time=0.018..0.033 rows=7 loops=1)      
   Output: id      
   Index Cond: (tbl1.id = ANY ('{1,2,3,4,100,1000,10000}'::integer[]))      
   Heap Fetches: 0      
   Buffers: shared hit=22      
 Planning time: 0.083 ms      
 Execution time: 0.056 ms      
(7 rows)      
```      
4\. 以下查询，命中了2条记录，并且走的是index only scan。        
读了22个INDEX PAGE,        
1 meta page + 7 * (1 root + 1 branch + 1 leaf)    = 22        
也就是说，每个value都扫了root,branch,leaf。   
x个heap visibility map page          
```      
postgres=# explain (analyze,verbose,timing,costs,buffers) select id from tbl1 where id in (1,2,3,4,5,6,7);      
                                                         QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------      
 Index Only Scan using tbl1_pkey on public.tbl1  (cost=0.43..10.13 rows=7 width=4) (actual time=0.039..0.046 rows=2 loops=1)      
   Output: id      
   Index Cond: (tbl1.id = ANY ('{1,2,3,4,5,6,7}'::integer[]))      
   Heap Fetches: 0      
   Buffers: shared hit=22      
 Planning time: 0.232 ms      
 Execution time: 0.086 ms      
(7 rows)      
```      
5\. 以下查询结果和以上查询一样，也命中了3条记录，并且走的是index only scan。        
但是只读了4个INDEX PAGE,       
1 meta page + 1 root + 1 branch + 1 leaf   
x个heap visibility map page         
```      
postgres=# explain (analyze,verbose,timing,costs,buffers) select id from tbl1 where id>0 and id  0) AND (tbl1.id <= 7))      
   Heap Fetches: 0      
   Buffers: shared hit=4      
 Planning time: 0.127 ms      
 Execution time: 0.028 ms      
(7 rows)      
```      
对于第四个查询，扫描了22个块，这个查询，优化器有优化的空间，比如找到1和7作为边界值，在查询到第一个值时，就可以取到leaf page的下一个page的最小值，从而得到1,2,3,4,5,6,7的值在当前page就可以完全取到，不需要去重复扫描。        
### hit计数为什么感觉不正确?: 算上visibility map时.    
src/include/common/relpath.h  
```  
/*  
 * Stuff for fork names.  
 *  
 * The physical storage of a relation consists of one or more forks.  
 * The main fork is always created, but in addition to that there can be  
 * additional forks for storing various metadata. ForkNumber is used when  
 * we need to refer to a specific fork in a relation.  
 */  
typedef enum ForkNumber  
{  
        InvalidForkNumber = -1,  
        MAIN_FORKNUM = 0,  
        FSM_FORKNUM,  
        VISIBILITYMAP_FORKNUM,  
        INIT_FORKNUM  
        /*  
         * NOTE: if you add a new fork, change MAX_FORKNUM and possibly  
         * FORKNAMECHARS below, and update the forkNames array in  
         * src/common/relpath.c  
         */  
} ForkNumber;  
#define MAX_FORKNUM             INIT_FORKNUM  
```  