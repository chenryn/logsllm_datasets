title:PPE Circuits for Rational Polynomials
author:Susan Hohenberger and
Satyanarayana Vusirikala
PPE Circuits for Rational Polynomials
Susan Hohenberger
Johns Hopkins University
Baltimore, MD, USA
PI:EMAIL
ABSTRACT
Pairings are a powerful algebraic setting for realizing cryptographic
functionalities. One challenge for cryptographers who design pair-
ing systems is that the complexity of many systems in terms of
the number of group elements and equations to verify has been
steadily increasing over the past decade and is approaching the
point of being unwieldy. To combat this challenge, multiple inde-
pendent works have utilized computers to help with the system
design. One common design task that researchers seek to automate
is summarized as follows: given a description of a set of trusted
elements T (e.g., a public key) and a set of untrusted elements U
(e.g., a signature), automatically generate an algorithm that verifies
U with respect to T using the pairing and group operations. To
date, none of the prior automation works for this task have support
for solutions with rational polynomials in the exponents despite
many pairing constructions employing them (e.g., Boneh-Boyen
signatures, Gentry’s IBE, Dodis-Yampolskiy VRF).
We demonstrate how to support this essential class of pairing
systems for automated exploration. Specifically, we present a so-
lution for automatically generating a verification algorithm with
novel support for rational polynomials. The class of verification
algorithms we consider in this work is called PPE Circuits (intro-
duced in [HVW20]). Intuitively, a PPE Circuit is a circuit supporting
pairing and group operations, which can test whether a set of ele-
ments U verifies with respect to a set of elements T . We provide a
formalization of the problem, an algorithm for searching for a PPE
Circuit supporting rational polynomials, a software implementa-
tion, and a detailed performance evaluation. Our implementation
was tested on over three dozen schemes, including over ten test
cases that our tool can handle, but prior tools could not. For all test
cases where a PPE Circuit exists, the tool produced a solution in
three minutes or less.
CCS CONCEPTS
• Security and privacy → Cryptography.
KEYWORDS
Automated Design; Provable Security; Pairing-based Cryptography
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484562
Satyanarayana Vusirikala
University of Texas at Austin
Austin, TX, USA
PI:EMAIL
ACM Reference Format:
Susan Hohenberger and Satyanarayana Vusirikala. 2021. PPE Circuits for
Rational Polynomials. In Proceedings of the 2021 ACM SIGSAC Conference
on Computer and Communications Security (CCS ’21), November 15–19, 2021,
Virtual Event, Republic of Korea. ACM, New York, NY, USA, 20 pages. https:
//doi.org/10.1145/3460120.3484562
1 INTRODUCTION
Computer automation has the potential to revolutionize the cryp-
tographic design process, from discovering novel cryptographic
functionalities to verifying their security. Computers can operate
faster, with higher accuracy, and at a lower cost than the primarily
manual process in place today. The key technical challenge is to
devise (provably correct) algorithms that capture the human mind’s
incredible creativity in searching for a scheme with the desired
functionality or in devising an approach for reducing the security
of a cryptosystem to the hardness of a well-studied math problem.
Over the past decade, the field of cryptographic computer au-
tomation has exploded with promising results. There are software
tools for building novel cryptographic algorithms [9, 10, 14, 20,
45–47, 51], translating schemes from one algebraic setting to an-
other [3, 5, 7, 8, 55], analyzing the security of cryptographic as-
sumptions [15, 19], strengthening the security of signatures [8]
and automating proof generation and/or verification [18, 21–24].
Excitingly, these tools were employed to verify the security of
protocols in Amazon Web Services Key Management Service [11],
the cryptographic hash standard SHA-3 [13], key exchange proto-
cols [17, 34], multiparty computation protocols [44], commitment
schemes [52], software stacks [12], protocols in the Universal Com-
posability framework [34] and even algorithms designed by other
automated tools [6]. See Barbosa et al. [16] for a recent survey on
cryptographic automation.
The goal of this work is to continue this momentum by present-
ing a novel tool for automating cryptographic design. Specifically,
we focus on the pairing algebraic setting and put forth a tool that
given a description of a set of trusted elements T (e.g., public pa-
rameters) and a set of untrusted elements U (e.g., an IBE private
key) can automatically generate an algorithm that verifies U with
respect to T using the pairing and group operations. What dis-
tinguishes our tool from prior works is that it supports schemes
with rational polynomials (e.g., schemes with elements of the form
1/a, дb /(a+c ), etc.). This includes schemes such as Boneh-Boyen
д
signatures [27] and identity-based encryption (IBE) [25], Gentry’s
IBE [37], the Dodis-Yampolskiy verifiable random function [36],
the Le-Gabillon multisignatures [49], and more, which prior tools
did not handle. Thus, we solve one of the major open problems
for pairing-based automation [47]. We now describe our goals and
contributions.
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2738Pairing Product Equations (PPEs) and PPE Circuits. We focus on
the pairing algebraic setting, which is known for its high speed,
small bandwidth, and novel functionalities. The setting consists
of groups G1, G2 and GT of prime order p, and a pairing function
which is an efficient, non-degenerate map e : G1 × G2 → GT ,
such that for all д ∈ G1, h ∈ G2 and a, b ∈ Zp, it holds that
e (дa, hb ) = e (д, h)ab. In some cases, G1 can be the same as G2.
See Appendix A.1 for a formal treatment. This function is often
leveraged in a cryptographic system to verify some elements with
respect to others. E.g., it might be used to verify a signature using
the public key.
r1+r2
1
дz1 , д−bz1 , v
Discovering correct verification algorithms can be extremely
challenging. For instance, consider these public parameters for
Waters Dual System Encryption [57]: (д, w, u, h, τ1 = vv
a1
1 , τ2 =
2 , τ b1 , τ b2 , дb , дa1 , дa2 , дba1 , дba2 , e (д, д)α a1b ). Is it obvious how
a2
vv
to use them with the pairing function to verify a private key of the
form (дα a1vr1+r2 , д−αv
дz2, д−bz2 , дr2b, дr1,
r1+r2
2
(uI wt h)r1 )), where I and t are public? No.1
To make searching for verification algorithms easier, multiple
works [20, 46, 47] have employed computers to hunt for them and
we build on this line of work. We begin our technical discussion by
formalizing the concept of a “pairing verification algorithm” as a
Pairing Product Equation (PPE) Circuit.
Z , {Xi}m
Following [43], a pairing product equation (PPE) over variables
i =1, {Yi}n
Z · n(cid:89)
e (Ai , Yi ) · m(cid:89)
n(cid:89)
i =1 is an equation of the form
e (Xi , Bi ) · m(cid:89)
e (Xi , Yj )γi j = I,
i =1
i =1
i =1
j=1
where Ai , Xi ∈ G1, Bi , Yi ∈ G2, Z ∈ GT , γij ∈ Zp. Following [47],
a PPE Circuit is a circuit whose gates are AND, OR, NOT or PPEs;
that is, a circuit that can evaluate PPEs together with other basic
logic. (We define this formally in Section 2.)
Earlier Automated Discovery of PPEs and PPE Circuits. Barthe,
Fagerholm, Fiore, Scedrov, Schmidt, and Tibouchi [20] presented an
automated tool for designing optimal structure-preserving signa-
tures in the pairing setting in 2015. The tool considers increasingly
larger candidates for the public key and signature structure, testing
to see if there is a conjunction of PPEs that can verify the sig-
nature with respect to the public key. In 2019, Hohenberger and
Vusirikala [46] generalized this approach with a tool that takes in a
description of any set of trusted pairing elements T and untrusted
pairing elements U and searches for a conjunction of PPEs that can
verify U with respect to T . In 2020, Hohenberger, Vusirikala, and
Waters [47] formalized the concept of a PPE Circuit and presented
the AutoCircuitPPE tool2, which takes as input the description of
the sets T and U and searches for a PPE Circuit that can verify U
with respect to T . They demonstrated that increasing the power
of the verification algorithm to arbitrary logic over PPEs enabled
the discovery of several novel verification algorithms including the
first algorithm to verify the Boyen-Waters anonymous IBE [31]
private keys with respect to the public key using 27 PPEs and 124
boolean gates.
1Indeed, no efficient verification algorithm even exists assuming that the Waters
Dual System Encryption scheme is secure [46], even though prior works [1] were
interested in finding such an algorithm.
2https://github.com/JHUISI/auto-tools
Limitation of Prior Works. In prior works [20, 46, 47], all elements
of T and U had to be of the form дf (u) for some multivariate poly-
nomial f over variables u = {u1, . . . , uk}. These tools did not allow
elements with rational polynomials, such as дf (u)/h (u), to be in T or
U , because for various settings of the variables u, the denominator
h(u) may evaluate to zero making the element дf (u)/h (u) undefined
and the prior algorithms did not address how to handle/prevent
these undefined elements. However, many pairing-based cryptosys-
tems use rational polynomials (e.g., [2, 25, 27, 36, 37, 49]). Thus,
finding a way to support rational polynomials in automated cryp-
tographic design was viewed as an important open problem [47].
1.1 Summary of Our Results
This work presents a formalization (Section 2), an algorithm (Sec-
tion 3) and software (Section 4) that takes as input a description of
trusted pairing elements T and untrusted pairing elements U , where
elements of either set can be of the form дf (u)/h (u) for multivariate
polynomials f , h over variables u = {u1, . . . , uk}, and outputs either
a PPE Circuit that verifies U with respect to T or the special symbol
unknown. The property we require (and prove) of our automator
is that if it outputs a circuit, the circuit correctly verifies any U
given a valid T . However, outputting unknown is not a guarantee
that no circuit exists. Our algorithm (see Figure 7) is a superset of
prior logic [20, 46, 47], finding all schemes they could, and with the
addition of new logic many more. We name the implemented tool
AutoRationalPPE.
We tested AutoRationalPPE on over thirty-five test cases, in-
cluding over ten cases that our tool could handle, but prior tools
could not. These newly successful test cases include the Boneh-
Boyen signatures [27], Boneh-Boyen IBE [25], Gentry’s IBE [37], the
Dodis-Yampolskiy verifiable random function [36], the Le-Gabillon
multisignatures [49] and more. We included several custom test
cases to test schemes with over 100 elements, invoke different sub-
routines, etc. See Table 1.
For test cases where a PPE Circuit exists, AutoRationalPPE out-
put a solution in 3 minutes or less. Furthermore, for 90% of the cases,
it took under one minute. For schemes with solutions, the test case
that took the longest was the Boneh-Boyen Hierarchical Identity
Based Encryption [25] with 160 levels, which took almost three
minutes. We designed Custom Testcase 6 specifically to challenge
the tool with over 100 elements. For this test case, T contains дa
and U contains дa2
1/a. The tool took under
4 seconds to output a solution with 102 PPEs and 103 boolean gates.
We include two test cases that provably do not have PPE Cir-
cuits (including the impossibility of verifying the private keys
of [57] with respect to its public parameters, since this system
has semi-functional keys that are not in the private-key space but
cannot be distinguished from private keys). For both of these cases,
AutoRationalPPE correctly aborts and outputs unknown. It took 5.5
minutes to output unknown on [57], which was its longest-running
time in our tests.
, . . . , дa99
Overall, we believe the tool is easy to understand and quick
enough for practical use. The source code of AutoRationalPPE is
publicly available at https://github.com/JHUISI/auto-tools.
, дa3
1/a100
, д
, д
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea27391.2 Technical Overview
As stated in Section 1.1, the main algorithm of AutoRationalPPE (in
Figure 7) takes as input a description of sets T and U and outputs
either a PPE Circuit or the symbol unknown.
This algorithm is recursive. The base case is when there are no
untrusted elements (U = ∅) and in this case, a trivial PPE Circuit
that outputs 1 on all inputs is the output. When U (cid:44) ∅, the algorithm
tries to “move” a single element F ∈ U to T by seeing if there is
a test (that can be encoded as a circuit C) that validates F. If it
cannot find any F ∈ U that it can “move”, then it aborts and outputs
unknown. If it can “‘move” an F, then it recurses on the (smaller)
subproblem where T ′ = T ∪ {F} and U ′ = U /{F}. Suppose circuit
C′ is the output of the call on T ′ and U ′. The PPE Circuit output is
a combination3 of C and C′.
This is our solution in a nutshell. The technical core of this
algorithm is in (1) how an element can be “moved” from U to T
and (2) how to build the final PPE Circuit as a combination of
subproblem circuits. We tackle the first challenge by applying one
of the four rules outlined below.
For all descriptions below, let F = дf (u)/h (u). Let InTrusted be
the set of variables in u that appear in any element in T . So, if
1/(d +a)}, then u =
T = {дa, дb} and U = {дab , дac , дac /(a+b ), д
{a, b, c, d} and InTrusted = {a, b}. Let Space(T ) be the set of ele-
ments that can be computed using elements of T .
Rules 1 and 2 are for when F contains only variables in InTrusted.