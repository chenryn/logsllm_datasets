                    script = session.create_script(src)
                    if script :
                        script.on("message", self.on_message)
                        script.load()
                        import sys
                        sys.stdin.read()
        def on_message(self, message, data):
            if message['type'] == 'send':
                payload = self.loads(message['payload'])
                if payload['type'] == "module" :
                    self.modules.append(payload)
                elif payload['type'] == "alloc" :
                    address = payload['address']
                    method = payload['method']
                    if self.address_exists(address) :
                        alloc_info = {}
                        alloc_info['size'] = payload['size']
                        alloc_info['stack'] = payload['stack']
                        self.insert_item_into_exist_address(address, alloc_info)
                    else :
                        data = {}
                        data['address'] = address
                        data['method'] = method
                        data['alloc_count'] = 1                    # 分配内存到这个地址的次数
                        data['free_count'] = 0                    # 这个地址分配的内存被释放的次数
                        data['alloc'] = []
                        alloc_info = {}
                        alloc_info['size'] = payload['size']
                        alloc_info['stack'] = payload['stack']
                        data['alloc'].append(alloc_info)
                        self.result.append(data)
                elif payload['type'] == "free":
                    for i in range(0, len(self.result)) :
                        if self.result[i]['address'] == payload['address']:
                            self.result[i]['free_count'] += 1
                elif payload['type'] == "use":
                    for i in range(0, len(self.result)) :
                        if self.result[i]['address'] == payload['address']:
                            if self.result[i]['free_count'] - self.result[i]['alloc_count'] >= 0:
                                self.log.error("Use After Free: address: %s , alloc method: %s, use method: %s, source data: %s, source len %s, stack: %s" %(self.result[i]['address'], self.result[i]['method'], payload['method'], payload['source'], payload['sourcelen'], payload['stack']))
                                data = {}
                                data['address'] = payload['address']
                                data['sourcelen'] = payload['sourcelen']
                                data['stack'] = payload['stack']
                                data['source'] = payload['source']
                                data['method'] = payload['method']
                                data['count'] = self.result[i]['alloc_count']
                                self.uafresult.append(data)
                elif payload['type'] == "printf":
                    if payload['nformat'] == 0 :
                        # 格式化字符串，误报超级高
                        self.log.error("Format String: format: %s, stack: %s" %(payload['format'], payload['stack']))
                    for i in range(0, len(self.result)):
                        for item in payload['forarg']:
                            if item == self.result[i]['address'] :
                                if self.result[i]['free_count'] - self.result[i]['alloc_count'] >= 0:
                                    self.log.error("Use After Free(printf): address: %s, alloc method: %s, use method: printf, format: %s, stack: %s" %(self.result[i]['address'], self.result[i]['method'], payload['format'], payload['stack']))
                                    data = {}
                                    data['address'] = self.result[i]['address']
                                    data['sourcelen'] = payload['nformat']
                                    data['stack'] = payload['stack']
                                    data['source'] = payload['format']
                                    data['method'] = payload['method']
                                    data['count'] = self.result[i]['alloc_count']
                                    self.uafresult.append(data)
                elif payload['type'] == "end" :
                    self.on_end()
        def on_end(self):
            self.log.debug("Trace Method Ended")
            self.uaf()
            self.doubleFree()
            self.unfreed()
        # 因为malloc分配的内存在free之后，下一个malloc分配的内存就会是free这个地方，so......
        def address_exists(self, address):
            for item in self.result:
                if address == item['address'] :
                    return True
            return False
        def insert_item_into_exist_address(self, address, data):
            for i in range(0, len(self.result)) :
                if address == self.result[i]['address'] :
                    self.result[i]['alloc'].append(data)
                    self.result[i]['alloc_count'] += 1
        def uaf(self):
            hasval = False
            uafre = "| address | alloc method | use method | alloc size | use size | alloc stack | use stack |n"
            uafre += "| --- | --- | --- | --- | --- | --- | --- |n"
            for item in self.uafresult :
                for reitem in self.result:
                    if item['address'] == reitem['address']:
                        alloc_stack = ""
                        use_stack = ""
                        for st in item['stack']:
                            modname,modaddr = self.whichModule(st)
                            if modname != "None":
                                use_stack += "`%s->0x%x` " %(modname, (int(st, 16) - modaddr))
                        for st in reitem['alloc'][item['count'] - 1]['stack']:
                            modname,modaddr = self.whichModule(st)
                            if modname != "None":
                                alloc_stack += "`%s->0x%x` " %(modname, (int(st, 16) - modaddr))
                        uafre += "| %s | %s | %s | %s | %s | %s | %s |n" %(reitem['address'], reitem['method'], item['method'], reitem['alloc'][item['count'] -1]['size'], item['sourcelen'], alloc_stack, use_stack)
                hasval = True
            if hasval is True:
                fp = open("uaf.md", "wb")
                fp.write(uafre)
                fp.close()
        def do_printf(self):
            pass
        def doubleFree(self):
            pass
        def unfreed(self):
            hasval = False
            unf = "| address | method | size | stack |n"
            unf += "| --- | --- | --- | --- |n"
            for item in self.result:
                if item['alloc_count'] - item['free_count'] > 0 :
                    for alloc in item['alloc'] :
                        stack = ""
                        for s in alloc['stack']:
                            modname,modaddr = self.whichModule(s)
                            if modname != "None":
                                stack += "`%s->0x%x` " %(modname, (int(s, 16) - modaddr))
                        unf += "| %s | %s | %s | %s |n" %(item['address'], item['method'], alloc['size'], stack)
                    hasval = True
            if hasval is True:
                fp = open("unfreed.md", "wb")
                fp.write(unf)
                fp.close()
        def whichModule(self, address) :
            addr = int(address, 16)
            for module in self.modules:
                modaddr = int(module['base'], 16)
                modsize = module['size']
                if (addr >= modaddr) and (addr 0x195a` `main.elf->0x2239`
`libc-2.23.so->0x2082f` `main.elf->0xee8` |  `main.elf->0x17b1`
`main.elf->0x2100` `main.elf->0x2269` `libc-2.23.so->0x2082f`
`main.elf->0xee8`  
我们需要的关键数据是`malloc`和`printf`的时候的堆栈，其中`malloc`的时候堆栈最上面是`0x195a`，`printf`的时候堆栈最上面为`0x17b1`。
我们用ida按g键跳转到`0x195a`,这个位置其实是执行完`malloc`之后跳转的地址，我们可以差不多比较精确的定位到存在UAF漏洞的malloc分配的地方就是下面哪里
    .text:00000000000018DB                 mov     rax, [rbp+s]
    .text:00000000000018E2                 mov     edx, 18h        ; n
    .text:00000000000018E7                 mov     esi, 0          ; c
    .text:00000000000018EC                 mov     rdi, rax        ; s
    .text:00000000000018EF                 call    _memset
    .text:00000000000018F4                 mov     edi, 4024BBh    ; format
    .text:00000000000018F9                 mov     eax, 0
    .text:00000000000018FE                 call    _printf
    .text:0000000000001903                 mov     rax, cs:stdout@@GLIBC_2_2_5
    .text:000000000000190A                 mov     rdi, rax        ; stream
    .text:000000000000190D                 call    _fflush
    .text:0000000000001912                 lea     rax, [rbp+src]
    .text:0000000000001919                 mov     edx, 100h       ; n
    .text:000000000000191E                 mov     esi, 0          ; c
    .text:0000000000001923                 mov     rdi, rax        ; s
    .text:0000000000001926                 call    _memset
    .text:000000000000192B                 lea     rax, [rbp+src]
    .text:0000000000001932                 mov     esi, 100h
    .text:0000000000001937                 mov     rdi, rax
    .text:000000000000193A                 call    readline
    .text:000000000000193F                 lea     rax, [rbp+src]
    .text:0000000000001946                 mov     rdi, rax        ; s
    .text:0000000000001949                 call    _strlen
    .text:000000000000194E                 add     rax, 1
    .text:0000000000001952                 mov     rdi, rax        ; size
    .text:0000000000001955                 call    _malloc
    .text:000000000000195A                 mov     rdx, rax
    .text:000000000000195D                 mov     rax, [rbp+s]
    .text:0000000000001964                 mov     [rax+10h], rdx
然后我们按g跳转到`0x17b1`，这个地方就是释放后使用的地方了：
    .text:000000000000178B show_player_func proc near              ; CODE XREF: select_player+BB↓p
    .text:000000000000178B                                         ; show_player+48↓p ...
    .text:000000000000178B
    .text:000000000000178B var_8           = qword ptr -8
    .text:000000000000178B
    .text:000000000000178B                 push    rbp
    .text:000000000000178C                 mov     rbp, rsp
    .text:000000000000178F                 sub     rsp, 10h
    .text:0000000000001793                 mov     [rbp+var_8], rdi
    .text:0000000000001797                 mov     rax, [rbp+var_8]
    .text:000000000000179B                 mov     rax, [rax+10h]
    .text:000000000000179F                 mov     rsi, rax
    .text:00000000000017A2                 mov     edi, 402447h    ; format
    .text:00000000000017A7                 mov     eax, 0
    .text:00000000000017AC                 call    _printf
    .text:00000000000017B1                 mov     rax, cs:stdout@@GLIBC_2_2_5
    .text:00000000000017B8                 mov     rdi, rax        ; stream
    .text:00000000000017BB                 call    _fflush
    .text:00000000000017C0                 mov     rax, [rbp+var_8]
    .text:00000000000017C4                 mov     esi, [rax+0Ch]
    .text:00000000000017C7                 mov     rax, [rbp+var_8]
    .text:00000000000017CB                 mov     ecx, [rax+8]
    .text:00000000000017CE                 mov     rax, [rbp+var_8]
    .text:00000000000017D2                 mov     edx, [rax+4]
    .text:00000000000017D5                 mov     rax, [rbp+var_8]
    .text:00000000000017D9                 mov     eax, [rax]
    .text:00000000000017DB                 mov     r8d, esi
    .text:00000000000017DE                 mov     esi, eax
    .text:00000000000017E0                 mov     edi, 402452h    ; format
    .text:00000000000017E5                 mov     eax, 0
    .text:00000000000017EA                 call    _printf
    .text:00000000000017EF                 mov     rax, cs:stdout@@GLIBC_2_2_5
    .text:00000000000017F6                 mov     rdi, rax        ; stream
    .text:00000000000017F9                 call    _fflush
    .text:00000000000017FE                 nop
    .text:00000000000017FF                 leave
    .text:0000000000001800                 retn
    .text:0000000000001800 show_player_func endp
我们的实践就到此为止了。
## 轮子存在的缺陷
  1. 因为`malloc`、`free`、`strcpy`这些函数调用太频繁了，应用被hook的时候会很卡很卡，甚至崩溃掉。
  2. 内存读写相关函数太多，要全部实现监控，写代码是个体力活。
  3. 这个只是针对函数级别的监控，假如是直接对某个地址赋值就监控不到了，比如下面这样：
    char *x = (char *)malloc(1024);
    char *p = x;
    for(int i = 0; i < 10; i++) {
        *p = 'x';
        p++;
    }
##
## 致谢
  1. 感谢[TheCjw](https://github.com/TheCjw)教我写frida脚本
  2. 感谢[Bean3ai](https://github.com/Bean3ai)和我讨论堆相关知识
  3. 感谢[堆利用——UAF之殇](https://www.anquanke.com/post/id/86952)这篇文章让我找到测试用例
  4. 感谢[linux-x86-UAF.md](https://github.com/hardenedlinux/linux-exploit-development-tutorial/blob/master/chapter3/linux-x86-UAF.md)让我大致了解UAF
## 菜鸡心声
我也想学挖洞，求大佬带[我](mailto:PI:EMAIL)。我求学道德水准还是可以的，不会因为一些小问题来一直烦你们，一直问。只有遇到无从下手的问题的时候才会提问，而且也不一定需要完整解答，教我思路就行。目前特别需要一个人指点下，我要挖洞的话应该怎么入手，外行完全不知道该从何做起。要是有大佬看中，就请收下我吧。