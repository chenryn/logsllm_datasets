matches for two certificates, the common field can be compressed. In “Level 1,” the extension field is further divided into
multiple subfields (Figure 2B). Therefore, even if the extension field does not fully match, since “Level 1” performs hashing
based on the subfields separately, subfields that are common can be compressed. This fine-grain division allows the two
certificates to compress the certificate more efficiently compared to “Level 0.” Finally, “Level 2” will divide the certificates
fields at a finer scale (Figure 2C). Overall, as the level of compression increases, the certificate is further subdivided as it
passes through the hash function. Operationally, this will allow LightCert to identify more common parts in a certificate
to further compress the certificate. On the other hand, the use of more complex hash operations can cause transmission
overhead in the hashing key list exchange phase when the client node sends its information to the server for certificate
compression.
4.3 Handshaking
A handshaking process is required to form a secure virtual private network (VPN). During the hand shaking process,
typical TLS/DTLS systems exchange information on what characteristics the VPN connection will hold (eg, cipher suites).
First, if the server node (the node receiving the communication request) also supports LightCert, the two nodes will trade
their hashing key values to identify what parts of the certificate are common and what parts are different. This hashing key
consists of the list of hash function keys provided from the LightCert gateway. Following this step, the reduced certificate
of the server will be sent back to the client. Timingwise, as Figure 3B shows, the hash key exchange and server certificate
exchange will take place after then SeverHello message, when the connection is made between the node pair. As a result,
all nodes that support LightCert can easily identify what different contents exist in their key/certificates, and thus, this
content can remain as the parts to be transmitted, as a way to reduce the overhead of exchanging full-size certificates.
In the second case, in which the server node does not support LightCert, the node will reject the use of a LightCert-based
VPN connection. Naturally, the certificate exchange procedure will fall back to the traditional TLS/DTLS method as
depicted in Figure 3A. Even so, we note that the following section explains how certificate transmissions within the IoT
subnet can be done more efficiently.
8 of 15
KWON ET AL.
FIGURE 3
In the Internet-of-Things (IoT) subnet, each node
transmits a hashing key list to compare the commonality prior to
certificate exchange. ClientHello notifies the use of LightCert and
exchanges key values and the reduced certificate after the
ServerHello. A, Original; B, LightCert
FIGURE 4 Certificate transmissions occurring within the
Internet-of-Things subnet
Certificate exchange
4.4
For the certificate exchange process, we consider three possible scenarios. First, we assume the exchange of information
between IoT devices in the same IoT subnet. The second regards data transfer (outbound) from an IoT node to the external
network, which can occur in situations where information is requested from a server or external individual. The last is
the receipt of the certificate from the outside of the IoT subnet to the inside (inbound).
IoT subnet scenario
4.4.1
The process of exchanging certificates in an IoT subnet connected to the same gateway (first scenario) is shown in Figure 4.
We consider an IoT subnetwork which utilizes the IETF routing protocol for low-power lossy networks (RPL30). RPL has
two modes of operation: nonstoring mode and storing mode. In the nonstoring mode, all traffic must go through the gate-
way to transmit data between nodes, whereas storing mode can allow direct node-to-node communication with without
gateway support. In storing mode, client nodes can communicate without the help of a gateway, so the hashing key list
must be sent (from the source node) to the server (ie, destination IoT node) to notify it of the commonalities in the certifi-
cates (Figure 4A). This server node identifies the differences between the two nodes' certificates using the key list, then
creates a reduced certificate format of its own (tailored for the source node), and responds with a ServerHello mes-
sage to the client (eg, source node) (Figure 4B). It is meaningful to point out that using storing mode can induce memory
overhead. Nevertheless, since LightCert introduces three levels of certificate compression, suitable for different system
configurations, systems with sufficient memory can select to use the lowest level of compression with less computational
overhead, while devices with strict memory limitations can exploit other compression levels with the sacrifice in computa-
tional complexity. On the other hand, when using the nonstoring mode, since the LightCert gateway stores the certificates
of all nodes in its subnet along with their key information, the server node requests a proxy transfer to the gateway
when the certificate needs to be transmitted (Figure 4C). When the proxy transfer request is received, the gateway
will transmit the reduced-size certificate of the server node on its behalf (Figure 4D). The client that obtains the reduced
KWON ET AL.
9 of 15
FIGURE 5 The LightCert gateway operations in the import and export
operations of certificates between the Internet-of-Things (IoT) network and
the Internet. Through this process, IoT networks can reduce the data
transmission burden
certificate reassembles the server's certificate information by combining the contents of its own certificate. We note that
the complexity of the certificate reduction is minimal given that there are no complex operations occurring in the process.
4.4.2 Outbound certificates from the IoT subnet
In the second scenario, we consider the case when an IoT node sends its certificate to nodes in external networks. Here, the
wireless channel of the IoT network can experience a significant amount of overhead when delivering (large-sized) full
security certificates as the packets that carry this information pass through the IoT network. To address this inefficiency,
LightCert configures the IoT gateway to play an important role by maintaining all nodes' certificates within its subnet. In
other words, nodes that receive external data requests and need to send a copy of its certificate to an external destination
create an empty certificate packet to send to the gateway. When the gateway receives this message, the gateway assembles
the IoT nodes' full certificate to the packet and passes this information to the final destination. Note that the packet can be
signed at the IoT node while “assuming” that the packet's full contents, including the certificate, are in place, and then,
the certificate information is removed from the packet to reduce overhead “within” the IoT network. This process allows
LightCert-based IoT networks to minimize the overhead caused by certificate transmissions (Figure 5 outbound).
4.4.3
The last scenario is a case where an external node's certificate enters the IoT network. The LightCert gateway obtains an
external certificate from the ServerHello packet received from the external network. Then, this certificate obtains the key
value from the hashing function applied in the network, compares the result with the reduced format of the destination
node IP, and sends the reassembled certificate with only the necessary parts to the destination node (Figure 5 inbound).
This is clearly different from the first scenario. In the first scenario, the similarity between nodes can be sufficiently
predicted through the characteristics of the IoT subnet itself. However, in the case of incoming external certificates, it is
difficult to measure the degree of similarity. IoT subnets with similar use cases may share a high degree of similarity, but
a node with the completely unrelated function may be difficult to find a commonality. Using the three aforementioned
scenarios, we test the effectiveness of LightCert in the following section.
Inbound certificates to the IoT subnet
5
EVALUATION
We evaluate the performance of LightCert using a combination of NS-3–based simulations and ContikiOS-based
real-world experiments. Specifically, we use the simulation results to observe the operations of LightCert when the sys-
tem scales to many resource-limited IoT nodes in various scenarios and uses the real-world experiment to validate the
protocol operation and energy efficiency of LightCert. We understand that network simulations can only partially reflect
reality but still find it useful to make predictions on the system performance in settings that are difficult to implement in
real world.
Specifically, the NS-3 simulation environment is divided into two networks, in which the first is the low-power IoT
network using IEEE 802.15.4 networks and the second is a wired Ethernet-connected network. The IoT network uses
the 6LoWPAN standard as provided by NS-3, and the add-on implementations are done on our side for successfully
supporting LightCert. The per-node processing time for the packets at each node was empirically gathered using our
ContikiOS implementation of LightCert on Zoul Firefly sensor motes. This platform is based on an ARM Cortex-M3 MCU
10 of 15
KWON ET AL.
with 512-kB flash, 32-kB RAM, and a CC2538 radio chip. We use this device given that it sufficiently satisfies the memory
requirements for the Contiki IP stack. All embedded implementations are done using the UDP, 6LowPAN, CSMA, and
IEEE 802.15.4 implementations of ContikiOS. In addition, we adopted the ContikiMac as radio duty cycle (RDC) layer,6
which is the MAC protocol for energy conservation of radio transceiver. Since the radio component is the primary source
of power consumption in IoT devices, we monitor the performance of LightCert under scenarios with RDC. Note that we
use the log distance path-loss model with the path-loss exponent 𝛾 as 2, reference distance d0 as 1 meter, and reference
loss PL0 as 50 dBm. Link layer retransmissions are used to support the minimal packet loss occurring on our network
configuration. Wired connections within the simulation environment are configured to have no path loss.
Certificate sets
5.1
Given that the CA can issue different types of certificates, we use four different certificate sets for evaluating the perfor-
mance of our scheme: the subnet set (SS) represents a set of certificates that maximizes certificate similarity by assuming
that the certificates are allocated to nodes within the scope of a single-purposed IoT subnet like a factory. Note that the
certificates that are tailored for IoT nodes do not yet exist ubiquitously; thus, we make a logical assumption on the struc-
ture and take observations from customized IoT node certificates used in systems such as Azure IoT31 and AWS IoT32
to design the certificates in SS. Specifically, the certificates in SS are similar in all aspects except for some subject DN,
extension, and the key algorithm (eg, Subject commonName, Subject emailAddress, extension SubjectKeyIdentifier). The
diverse certificate set (DCS) considers diversely purposed IoT devices that may have some common characteristics but
can have different subject and extension fields and even different issuers. The DCS assumes that there is another IoT net-
work with a similar purpose that supports LightCert, or a smart home where various un-unified devices can be installed on
the same network. Discrimination in issuers takes into examination the situation where various devices are deployed for
different purposes. The certificates in DCS are also customized based on common IoT system requirements and the IoT
certificates used in Azure and AWS. As Figure 6 shows, the certificates in SS (depicted in solid red lines in Figure 6) are
limited in their contents, given that these certificates are designed for single purpose systems. On the other hand, given
that DCS certificates cover a broader set of applications, their contents are richer compared to SS (depicted in blue dotted
lines in Figure 6). When creating the SS and DCS certificates, we use SHA256 signatures and use ECC and RSA public key
algorithms interchangeably for different certificates in the SS and DCS certificate sets. Finally, certificates in the conven-
tional set (CS) represent a set where we consider a certificate exchange with a conventional network to which LightCert
is not applied. The CS evaluations show how much an existing PKI certificate can be reduced using common key values
generated at the SS certificates. Existing PKI certificates used in CS are either imported from popular sites or created with
reference to them.
Table 2 presents the size and number of certificates that consist of each certificate set used in our experiments. Although
the certificates included in the SS have a high degree of similarity, the reason why the difference between the min/max
sizes is large is due to the differences in the public key and signature fields among various SS certificates. Furthermore,
the average size of SS and DCS is smaller than CS certificates (common Internet node certificates), given that the SS and
DCS certificates were created by minimizing the certificate's contents by assuming an IoT environment operation.
FIGURE 6 The components in the certificates that make up the
subnet set (SS) and subnet set (DCS). CA, certification authority
KWON ET AL.
11 of 15
Set
SS
DCS
CS
Size (bytes) Number
742-1170
796-1304
1194-2369
15
30
10
TABLE 2 The number and min/max size of the certificates that consist each certificate set used in
our study
Abbreviations: CS, conventional set;
DCS, diverse certificate set; SS, subnet
set.
FIGURE 7 Certificate size reductions achieved by LightCert. For subnet
set (SS) certificates, which have the most commonality, certificates are
reduced by up to 37%. CS, conventional set; DCS, diverse certificate set
Certificate reduction rate
5.2
We present the result of the certificate compression process for the certificate sets discussed above in Figure 7. This experi-
ment fills the hash table with SS and DCS certificates and then calculates the average of the reduction rates. CS certificates
were excluded from completing the hash table to study the input from the sender that was not associated with the IoT