{ 
《软件调试》补编 
- 34 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
     UINT             flags;       
//标志 
     const type_info *type_info;       
//这个 Ctach 块要捕捉的类型 
     int              offset;         
//用来复制异常对象的栈偏移 
     void           (*handler)();      
//Catch 块处理函数，即 Ctach 内的代码 
} catchblock_info; 
其中 flags 字段可以包含一个或多个以下标志： 
#define TYPE_FLAG_CONST       1   
//常数 
#define TYPE_FLAG_VOLATILE    2   
//指定 volatile 特征 
#define TYPE_FLAG_REFERENCE   8   
//引用 
type_info 指向一个类型信息，用于描述这个 Catch 块所要捕捉的异常类型，offset
字段用于指定一个相对栈帧基地址（EBP）的偏移值，异常分发函数会将异常对象复制到
这个栈地址中，也可以理解为这就是 catch 关键字后的异常声明表达式中的那个异常变量
（e）的偏移地址；handler 即 catch 块的异常处理代码的起始地址。 
对于 CppEH 函数中的 Try0 块，它有一个 Ctach 块，根据前面的内存显示，它的地址
是 004086b0，使用 dd 命令可以看到 catchblock_info 结构的各个字段值： 
0:000> dd 004086b0 
004086b0  00000000 00000000 00000000 00401098 
可见，flags、type_info 和 offset 字段都为零，这是因为这个 Catch 块的表达式
是…，即捕捉所有异常，不需要类型匹配和复制异常对象。00401098 是 Ctach 块的代码，
使用 u 命令可以看到它确实与第 27 行的源代码相对应。 
以下是 Try1 块的 Catch 块描述： 
0:000> dd 004086a0  
004086a0  00000000 00409040 ffffffc8 0040106f 
其中 00409040 是 type_info 字段，ffffffc8（-56）是 offset 字段，0040106f 是 handler
字段。type_info 结构的定义如下： 
typedef struct __type_info 
{ 
   const vtable_ptr *vtable;   
//type_info 类的虚拟方法表指针 
   char  *name;           
//类型名称 
   char  mangled[32];    
//可变长度的类型标志串 
} type_info; 
其中，name 字段用来指向类型的名称，它是按照需要而分配的，所以通常为 0，
mangled 字段用来存放类型标志串，它是编译器按照名称修饰（参见 25.1 节）规则产生的
类型名称，其长度是可变的，以 0 结束。以刚才观察的 Ctach 块捕捉的类型为例，它的
type_info 地址是 00409040，其内容为： 
0:000> dd 00409040  
00409040  004080f0 00000000 56413f2e 00404043 
当异常发生寻找处理异常的 Catch 块时，会先比较 mangled 字段，匹配后再比较
__catchblock_info结构中的 flags字段，如果也匹配，则准备调用__catchblock_ info
结构中的 hanlder 函数。 
图 24-4 归 纳 了 上 面 介 绍 的 这 些 数 据 结 构 和 它 们 之 间 的 关 系 。 其 中 cxx_ 
function_desc 是核心，它的 unwind_table 字段指向描述展开信息的 unwind_info
数组，tryblock 字段指向描述 Try 块布局的 tryblock_info 数组。一个 tryblock_info
结构描述一个 Try 块，它的 catchblock 字段指向描述 Catch 块的 catchblock_info 数
组。 
《软件调试》补编 
- 35 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
图 24-4  描述 try{}catch 结构的数据结构 
从数量的角度来讲，一个使用了try{}catch结构的函数有一个cxx_function_ desc
结构，函数中有几个 Try 块就有几个 tryblock_info 结构，同样，函数中共有多少个 Catch
块就有多少个 catchblock_info 结构，它们是与自己所属的 Try 块关联在一起的。 
24.9  编译 throw 语句 
上一节我们介绍了 VC 编译器编译 C++语言的 try{}catch 结构的方法，本节将继续
介绍编译器是如何编译 C++的 throw 语句的。我们仍以上一节的 CppEH 程序（清单 24-22）
为例，在函数 CppEH 中，第 17 行代码使用 throw 关键字抛出了一个类型为类 C（Class C）
的异常。 
清单 24-25 显示了 throw o1 语句（清单 24-22 的第 17 行）所对应的汇编代码。 
清单 24-25  throw o1 语句所对应的汇编代码 
1 
004010a8 8b4dd8       
mov     ecx,dword ptr [ebp-28h] 
2 
004010ab 894dc8       
mov     dword ptr [ebp-38h],ecx 
3 
004010ae 8b55dc      
mov     edx,dword ptr [ebp-24h] 
4 
004010b1 8955cc       
mov     dword ptr [ebp-34h],edx 
5 
004010b4 6898664200    
push    offset CppEH!_TI1?AVC (00426698) 
6 
004010b9 8d45c8         
lea     eax,[ebp-38h] 
7 
004010bc 50               
push    eax 
8 
004010bd e8be080000    
call    CppEH!_CxxThrowException (00401980) 
其中 ebp-28h 即对象 o1 的地址，因此第 1～4 行是把 o1 的两个成员 n 和 age 的值赋
给栈上的临时对象（位于 ebp-38h），也就是要抛出的对象。第 5 行是将 CppEH!_TI1?AVC
的地址压入栈，它是编译器为类 C 产生的异常类型描述，是一个 cxx_exception_type
结构： 
typedef struct __cxx_exception_type 
{ 
  UINT                  flags;    
//类型标志 
  void                   (*destructor)();    
//析构函数 
  cxx_exc_custom_handler  custom_handler;  
//异常的定制处理器（Custom Handler） 
  const cxx_type_info_table *type_info_table; //类型列表 
} cxx_exception_type; 
使用 dd 命令显示本例中的异常类型： 
0:000> dd 00408610 
00408610  00000000 004010f0 00000000 00408608 
其中，00000000 是 flags 字段，004010f0 是析构函数的地址，即 C::~C()，00408608
是 type_info_table 字段，它是一个 cxx_type_info_table 结构： 
typedef struct __cxx_type_info_table 
{ 
     UINT             count;      
//info 数组所包含的元素个数 
     const cxx_type_info *info[3];      
//类型信息，可变长度 
} cxx_type_info_table; 
《软件调试》补编 
- 36 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
尽管 info 字段声明包含 3 个元素，但其实际元素个数应根据 count 字段来确定，例
如，对于前面的 cxx_exception_type 结构中类型那个列表： 
0:000> dd 00408608 
00408608  00000001 004085e8 00000000 004010f0 
这说明这个类型列表中包含一个类型，其地址为 004085e8，该地址又是一个
cxx_type_info 结构： 
typedef struct __cxx_type_info 
{ 
     UINT             flags;      
//标志，见下文 
     const type_info *type_info;      
//C++类的类型信息 
     int        this_ptr_offset;        
//基类的 this 指针偏移 
     int        vbase_descr;   
//虚拟基类的描述 
     int        vbase_offset    
//虚拟基类的 this 指针偏移 
     unsigned int     size;           
//对象大小 
     cxx_copy_ctor    copy_ctor;      
//C++复制构造函数（Copy Constructor） 
} cxx_type_info; 
使用 0:000> dd 004085e8  
0:000> dd 004085e8 l7 
004085e8  00000000 00409040 00000000 ffffffff 
004085f8  00000000 00000008 00000000  
其中 flags 字段可以包含如下标志： 
#define CLASS_IS_SIMPLE_TYPE          1 
#define CLASS_HAS_VIRTUAL_BASE_CLASS  4 
00409040 是类型信息，与我们前面观察 catchblock 数组时看到的内层 catch 块的类型
值是相同的，因为第二个 catch 块捕捉的和这里抛出的都是 C++类。 
清单 24-25 的第 7 行是将栈上的临时对象 ebp-38h 的地址压入栈，第 8 行是调用用于
产生异常的_CxxThrowException 函数，清单 24-26 给出了这个函数的伪代码。 
清单 24-26  _CxxThrowException 函数的伪代码 
1 
void _CxxThrowException( void *object, const cxx_exception_type *type ) 
2 
{ 
3 
     DWORD args[3]; 
4 
5 
     args[0] = CXX_FRAME_MAGIC; 
6 
     args[1] = (DWORD)object; 
7 
     args[2] = (DWORD)type; 
        RaiseException( CXX_EXCEPTION, EH_NONCONTINUABLE, 3, args ); 
8 
} 
显而易见，_CxxThrowException 函数内部先将一个常量（CXX_FRAME_ MAGIC）、
要抛出的对象和描述异常的 cxx_exception_type 类型放入一个数组中，然后便调用
RaiseException API，调用时将异常代码指定为常量 CXX_EXCEPTION，即 0xe06d7363，
对应的 ASCII 代码为.msc，因此，使用 throw 关键字抛出的异常都具有这个异常代码。另
一点值得注意的是，在 RaiseException 的第二个参数中指定了 EH_NONCONTINUABLE
标志，这意味着 C++异常是不可以恢复继续执行的。 
RaiseException API 是由 Kernel32.DLL 输 出的 一 个标准 API， 它内 部会 调用
RtlRaiseException，产 生一 个 EXCEPTION_RECORD 结构，并将 args 数组 放入到
EXCEPTION_RECORD 结构的 ExceptionInformation 字段中作为异常记录的额外信
息，然后便调用 NtRaiseExcaption 系统服务，进入内核态。到内核态后，其分发和处理流
程就与 CPU 产生的硬件异常基本一致了。在分发的过程中，可以从异常代码及
EXCEPTION_RECORD 结构的 ExceptionInformation 字段中识别出一个异常是否是
C++异常： 
《软件调试》补编 
- 37 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
ExceptionInformation[0] 字 段 总 是 等 于 常 量
CXX_FRAME_MAGIC ， 即
0x19930520。 
ExceptionInformation[1]字段是 throw 语句所抛出的异常对象的地址。 
ExceptionInformation[2]字段是 throw 语 句所 抛出的异常 对象的 类型 指针
（cxx_exception_type 结构）。 
归纳一下，throw 语句会将要抛出的 C++对象复制到一个临时对象中，然后将指向这
个临时对象的指针和描述该对象类型的 cxx_exception_type 指针作为参数来调用
_CxxThrowException 函 数 。 在 分 发 异 常 时 异 常 分 发 函 数 会 从 异 常 的 额 外 信 息
ExceptionInformation[2]中取出对象类型信息以寻找匹配的 Catch 块，找到后先执行
栈展开，然后将 ExceptionInformation[1]中取出异常对象指针并将其复制给 Catch 块
声明表达式中的变量（e），而后调用 Catch 块中的处理代码，当 Catch 块中的代码执行后， 
throw 语句抛出的临时对象会被析构。从这个分析我们知道，执行 Catch 块的方法与执行
except 块是有很大不同的，except 块是不返回的，因此异常分发函数是在做好所有分发和
清理工作后执行 except 块，except 块中的代码执行好后便自然的执行它后面的代码了（参
见清单 24-10），而 Catch 块中的代码执行好后它会返回到异常分发函数中。 
《软件调试》补编 
- 38 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
补编内容
补编内容
补编内容
补编内容 5 调试符号详解
调试符号详解
调试符号详解
调试符号详解 
补编说明： 
这一部分内容本来属于《软件调试》第 25 章的后半部分，讲的是调试符号，
根据符号的类型（Tag），逐一介绍每一种符号，包括符号的属性和示例。 
写作这一内容时，我觉得这部分内容对于深刻理解软件调试和调试器的工作
原理是非常有帮助的，可以解除很多疑惑。 
但是在最后一轮压缩篇幅时，因为这部分内容相对独立，砍起来效果比较
明显，于是就删除了。 
本节（25.8 节，即正式出版的最后一节）介绍了符号文件中的 5 种数据表，以及表中
所保存的数据对象。其中最重要是符号表，包含的记录也最多，从下一节开始，我们将分
几节介绍符号表中的各种符号。 
25.9  EXE 和 Compiland 符号 
本节将介绍描述可执行文件的 SymTagExe 符号和描述编译素材（Compiland）的
SymTagCompiland、SymTagCompilandEnv、SymTagCompilandDetail 符号。 
25.9.1  SymTagExe[1] 
每个 PDB 文件都会包含一个 SymTagExe 类型的符号，简称 EXE 符号。EXE 符号用