title:Identifying Cache-Based Side Channels through Secret-Augmented Abstract
Interpretation
author:Shuai Wang and
Yuyan Bao and
Xiao Liu and
Pei Wang and
Danfeng Zhang and
Dinghao Wu
Identifying Cache-Based Side Channels through 
Secret-Augmented Abstract Interpretation
Shuai Wang, HKUST; Yuyan Bao and Xiao Liu, Penn State University; Pei Wang, Baidu X-Lab; 
Danfeng Zhang and Dinghao Wu, Penn State University
https://www.usenix.org/conference/usenixsecurity19/presentation/wang-shuai
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.Identifying Cache-Based Side Channels through Secret-Augmented Abstract Interpretation
Shuai Wang∗1, Yuyan Bao2, Xiao Liu2, Pei Wang∗3, Danfeng Zhang2, and Dinghao Wu2
1The Hong Kong University of Science and Technology
2The Pennsylvania State University
PI:EMAIL, {yxb88, xvl5190}@ist.psu.edu, PI:EMAIL, PI:EMAIL,
3Baidu X-Lab
PI:EMAIL
Abstract
Cache-based side channels enable a dedicated attacker to re-
veal program secrets by measuring the cache access patterns.
Practical attacks have been shown against real-world crypto
algorithm implementations such as RSA, AES, and ElGa-
mal. By far, identifying information leaks due to cache-
based side channels, either in a static or dynamic manner, re-
mains a challenge: the existing approaches fail to offer high
precision, full coverage, and good scalability simultaneously,
thus impeding their practical use in real-world scenarios.
In this paper, we propose a novel static analysis method on
binaries to detect cache-based side channels. We use abstract
interpretation to reason on program states with respect to ab-
stract values at each program point. To make such abstract
interpretation scalable to real-world cryptosystems while of-
fering high precision and full coverage, we propose a novel
abstract domain called the Secret-Augmented Symbolic do-
main (SAS). SAS tracks program secrets and dependencies
on them for precision, while it tracks only coarse-grained
public information for scalability.
We have implemented the proposed technique into a prac-
tical tool named CacheS and evaluated it on the imple-
mentations of widely-used cryptographic algorithms in real-
world crypto libraries, including Libgcrypt, OpenSSL, and
mbedTLS. CacheS successfully conﬁrmed a total of 154 in-
formation leaks reported by previous research and 54 leaks
that were previously unknown. We have reported our ﬁnd-
ings to the developers. And they conﬁrmed that many of
those unknown information leaks do lead to potential side
channels.
1 Introduction
Cache-based timing channels enable attackers to reveal se-
cret program information, such as private keys, by measur-
ing the runtime cache behavior of the victim program. Prac-
tical attacks have been executed with different attack scenar-
ios, such as time-based [16, 44], access-based [37, 60, 62],
and trace-based [5], each of which exploits a victim program
through either coarse-grained or ﬁne-grained monitoring of
∗Most of this work is done while Shuai Wang and Pei Wang were work-
ing at PSU.
cache behavior. Additionally, previous research has success-
fully launched attacks on commonly used cryptographic al-
gorithm implementations, for example, AES [37, 60, 74, 16],
RSA [23, 44, 7, 62, 86], and ElGamal [90].
Pinpointing cache-based side channels from production
cryptosystems remains a challenge. Existing research em-
ploys either static or dynamic methods to detect underlying
issues [77, 32, 33, 41, 82, 22, 81]. However, the methods are
limited to low detection coverage, low precision, and poor
scalability, which impede their usage in analyzing real-world
cryptosystems in the wild.
Abstract interpretation is a well-established framework
that can be tuned to balance precision and scalability for
static analysis.
It models program execution within one
or several carefully-designed abstract domains, which ab-
stract program concrete semantics by tracking certain pro-
gram states of interest in a concise representation. Usually,
the elements in an abstract domain form a complete lattice of
ﬁnite height, and the operations of the program concrete se-
mantics are mapped to the abstract transfer functions over
the abstract domain. A well-designed abstract interpreta-
tion framework can correctly approximate program execu-
tion and usually yields a terminating analysis within a ﬁ-
nite step of computations. Nevertheless, the art is to care-
fully design an abstraction domain that ﬁts the problem un-
der consideration, while over-approximating others to bound
the analysis to a controllable size; this enables the analysis
of non-trivial cases.
We propose a novel abstract domain named the Secret-
Augmented Symbolic domain (SAS), which is speciﬁcally
designed to perform abstract interpretation on large-scale
secret-aware software, such as real-world cryptosystems.
SAS is designed to perform ﬁne-grained tracking of program
secrets (e.g., private keys) and dependencies on them, while
coarsely approximating non-secret information to speed up
the convergence of the analysis.
We implement the proposed technique as a practical tool
named CacheS, which models program execution within
the SAS and pinpoints cache-based side channels with con-
straint solving techniques. Like many bug ﬁnding tech-
USENIX Association
28th USENIX Security Symposium    657
niques [55, 84, 54], CacheS is soundy [53]; the implemen-
tation is unsound for speeding up analysis and optimizing
memory usage, due to its lightweight but unsound treat-
ment of memory. However, in contrast to previous studies
that analyze only small-size programs, single procedure or
single execution trace [32, 33, 77, 22, 81], CacheS is scal-
able enough to deliver whole program static analysis of real-
world cryptosystems without sacriﬁcing much accuracy. We
have evaluated CacheS on multiple popular crypto libraries.
Although most libraries have been checked by many previ-
ous tools, CacheS is able to detect 54 unknown information
leakage sites from the implementations of RSA/ElGamal al-
gorithms in three real-world cryptosystems: Libgcrypt (ver.
1.6.3), OpenSSL (ver. 1.0.2k and 1.0.2f), and mbedTLS
(ver. 2.5.1). We show that CacheS has good scalability as
it largely outperforms previous research regarding coverage;
it is able to complete context-sensitive interprocedural anal-
ysis of over 295 K lines of instructions within 0.5 CPU hour.
In summary, we make the following contributions:
• We propose a novel abstract interpretation-based anal-
ysis to pinpoint information leakage sites that may lead
to cache-based side channels. We propose a novel ab-
stract domain named SAS, which performs ﬁne-grained
tracking of program secrets and dependencies, while
over-approximating non-secret values to enable precise
reasoning in a scalable way.
• Enabled by the “symbolic” representation of abstract
values in SAS, we facilitate information leak check-
ing in this research with constraint solving techniques.
Compared with previous abstract interpretation-based
methods, which only reason on the information leak-
age upper-bound, our technique adequately simpliﬁes
the process of debugging and ﬁxing side channels.
• We implement the proposed technique into a practical
tool named CacheS and apply it to detect cache-based
side channels in real-world cryptosystems. From ﬁve
popular crypto library implementations, CacheS suc-
cessfully identiﬁed 208 information leakage sites (with
only one false positive), among which 54 are unknown
to previous research, to the best of our knowledge.
2 Background
Abstract Interpretation. Abstract interpretation is a well-
established framework to perform sound approximation of
program semantics [28]. Considering that program concrete
semantics forms a value domain C, abstract interpretation
maps C to an abstract (and usually more concise) represen-
tation, namely, an abstract domain A. The design of the ab-
straction is usually based on certain program properties of in-
terest, and (possibly inﬁnite) sets of concrete program states
are usually represented by one abstract state in A. To ensure
termination, abstract states could form a lattice with a ﬁnite
height, and computations of program concrete semantics are
mapped into operators over the abstract elements in A.
The abstract function (α) and concretization function (γ)
need to be deﬁned jointly with an abstract domain A. Func-
tion α lifts the elements in C to their corresponding abstract
elements in A, while γ casts an abstract value to a set of
values in C. To establish the correctness of an abstract inter-
pretation, the abstract domain and the concrete domain need
to form a Galois connection, and operators deﬁned upon el-
ements in an abstract domain are required to form the local
and global soundness notions [28].
Cache Structure and Cache-Based Timing Channels. A
cache is a fast on-CPU data storage unit with a very limited
capacity compared to the main memory. Caches are usu-
ally organized to be set-associative, meaning that the storage
is partitioned into several disjoint sets while each set exclu-
sively stores data of a particular part of the memory space.
Each cache set can be further divided into smaller storage
units of equal size, namely cache lines. Given the size of
each cache line as 2L bytes, usually the upper N − L bits of
a N-bit memory address uniquely locate a cache line where
the data from that address will be temporally held.
When the requested data is not found in the cache, the
CPU will have to fetch them from the main memory. This
is called a cache miss and causes a signiﬁcant delay in exe-
cution, compared with fetching data directly from the cache.
Therefore, an attacker may utilize the timing difference to
reveal the cache access pattern and further infer any infor-
mation on which this pattern may depend.
Threat Model. As mentioned above, some bits of a mem-
ory address can be directly mapped to cache lines being
visited, which potentially enables information leakage via
secret-dependent memory trafﬁc.
In this research, attack-
ers are assumed to share the same hardware platform with
the victim program, and therefore are able to “probe” the
shared cache state and infer cache lines being accessed by
the victim. As illustrated in Fig. 2, our threat model assumes
that the attacker can observe the address of every memory
access, expect for the low bits of addresses that distinguish
locations in the same cache line. Overall, by tracking the
secret-dependent cache access of the victim, several bits of
program secrets (w.r.t. entropy) could be leaked to the at-
tacker.
We note that this threat model indeed captures most in-
famous and practical side channel attacks [39], including
prime-and-probe [60], ﬂush-and-reload [86], and prime-and-
abort [31], which are designed to infer the cache line access
by measuring the latency of the victim program or attacker’s
program at different scales and for different attack scenarios.
Additionally, while this threat model is aligned with many
existing side channel detection works [77, 33, 41, 82, 22],
novel techniques proposed in this work enable us to perform
scalable static analysis and reveal much more information
leaks of real-world cryptosystems.1 In addition, while this
1Consistent with this line of research, CacheS pinpoints information
leaks in cryptosystems where cache access depends on secrets. Cryptosys-
tem developers can ﬁx the code with information provided by CacheS. Con-
trarily, the exploitability of the leaks (e.g., reconstruct the entire key by
recovering half bits of the RSA private key [19]) is beyond the scope of this
work.
658    28th USENIX Security Symposium
USENIX Association
1
2
3
4
5
6
7
foo :
mov
add
load
add
mov
add
eax , ebx
eax , 0 x1
ecx , esi
ecx , 0 x12
edx , edi
eax , ecx
1
2
3
4
5
6
7
{ebx = {k1}}
{ebx = {k1}, eax = {k1}}
{ebx = {k1}, eax = {k1 + 1}}
{ebx = {k1}, eax = {k1 + 1}, ecx = {m1}}
{ebx = {k1}, eax = {k1 + 1}, ecx = {m1 + 12}}
{ebx = {k1}, eax = {k1 + 1}, ecx = {m1 + 12}, edx = {edi0}}
{ebx = {k1}, eax = {k1 + m1 + 13}, ecx = {m1 + 12}, edx = {edi0}}
1
2
3
4
5
6
7
{ebx = {s1}}
{ebx = {s1}, eax = {s1}}
{ebx = {s1}, eax = {s1 + 1}}
{ebx = {s1}, eax = {s1 + 1}, ecx = {p}}
{ebx = {s1}, eax = {s1 + 1}, ecx = {p}}
{ebx = {s1}, eax = {s1 + 1}, ecx = {p}, edx = {p}}
{ebx = {s1}, eax = {(cid:62)}, ecx = {p}, edx = {p}}
(a) Sample Code.
(b) Modeling program states with logic formulas l ∈ L.
(c) Modeling program states with SAS.
Figure 1: Execute assembly code with different program representations. Program secrets and all the affected registers are
marked as red in Fig. 1a. Program states at line 1 of Fig. 1b and Fig. 1c represent the initial state. Here k1 is a symbol
exhibiting one piece of program secrets (e.g., the ﬁrst element in a key array), and m1 is a free symbol representing non-secret
content of unknown memory cells. edi0 is a symbol representing the initial value of register edi. Symbol s1, p, and (cid:62) deﬁned
in SAS stand for one piece of secret, entire non-secret information and all the program information, respectively (see Sec. 4).
presentation, we name the value domain formed by logic for-
mulas l as logic domain L.
An example is given in Fig. 1, where we model the execu-
tion of instructions with logic formulas (Fig. 1b). While the
overall approach will precisely model program semantics,
some tentative studies indicate its low scalability. Indeed, we
implement this approach and evaluate it with two real-world
cases: the AES and RSA implementations of OpenSSL. We
report that both tests are unable to terminate (evaluation re-
sults are given in Sec. 8). In summary, the analysis is im-
peded for the following reasons:
• Typically, more and more memory cells would be mod-
eled throughout the analysis, and for each variable, its
value set (i.e., set of formulas) would also continue to
increase. Therefore, the memory usage could become
signiﬁcant to even unrealistic for real-world cases.
• Program states could be continuously updated within
loop iterations. In addition, “loops” on the call graph
(e.g., recursive calls) could exist in cryptosystems as
well and complicate the analysis.
We implement algorithms to detect loop induction vari-
ables [11] considering both registers and stack memories.
Identiﬁed induction variables are lifted into a linear function
of symbolic loop iterators; operations on induction variables
are “merged” into the linear function, thereby leading to a
stable stage. While the simpler AES case terminated when
we re-ran the test, the RSA case still yielded a “timeout” due
to the practical challenges mentioned above (see results in
Sec. 8.1).
Modeling Program Semantics with Free Symbols. An-
other “baseline” approach is to model program semantics in a
permissive way. That is, we introduce two free symbols: one
for any public information and the other for secrets. Any
secret-related computation outputs the same secret symbol,
while others preserve the same public symbol. Note that this
is comparable to static taint tracking, where each value is
either “tainted” or “untainted”. Despite its simplicity, our
tentative study reveals new hurdles as follows:
• Memory tracking becomes pointless. Every memory
address becomes (syntactically) identical because it
Figure 2: The threat model. Different secrets lead to the ac-
cess of different cache lines at one particular program point,
which may leak secret information to the attackers by indi-
rectly observing cache line access variants. At least one bit
information (w.r.t. entropy) could be leaked in this example.
model is relatively stronger than those based on cache sta-
tus [32], cache status at any point can be determined by ana-
lyzing the accessed cache units in execution.
3 Motivation
In general, capturing cache-based side channels requires
modeling program secret-dependent semantics (we will dis-
cuss the connection between program semantics and cache
access in Sec. 5).
In this section we begin by discussing
two baseline approaches to modeling program semantics; the
limitations of both approaches naturally motivate the design
of our novel abstract domain.