### Memory Allocation and Transaction Management

- **Memory Allocation with `pmalloc()`**: Use `pmalloc()` to allocate memory for each previously static buffer. Typically, this allocation must be performed every time the function is invoked.
  
- **Handling Overflows and Underflows**: Any overflow or underflow on a buffer allocated via `pmalloc()` will trigger a Segmentation Violation (SEGV) signal. This signal is caught by a custom signal handler added to the `main()` function. The signal handler notifies the operating system to abort all state changes made by the process during the current request.

- **Transaction Management with `transaction()`**:
  - **New System Call**: We introduced a new system call, `transaction()`, which is conditionally invoked using the `shadow enable()` macro at three key points in the code:
    - **Beginning of a New Request**: Inside the main processing loop, before handling a new request, to indicate the start of a new transaction. The operating system backs up all memory page permissions and marks heap memory pages as read-only. As the process modifies these pages, the OS maintains a copy of the original page and allocates a new page with the original permissions, similar to copy-on-write mechanisms.
    - **End of a Request**: Immediately after handling a request, to signal the successful completion of a transaction. The OS discards the original copies of modified memory pages.
    - **Exception Handling**: Inside the signal handler, to notify the OS of an exception (e.g., an attack). The OS then restores the original memory pages, discarding all modifications.

- **Manual Placement**: The calls to `transaction()` must be manually placed by the programmer or system designer.

### Filesystem and Inter-Process Communication

- **Filesystem Mechanism**: A similar mechanism can be implemented for the filesystem by using a private copy of the buffer cache for the process running in shadow mode. However, challenges arise when the process needs to communicate with another process, especially if it is a remote process. Our system currently does not address this issue, assuming that such state changes are benign or irrelevant.

- **Database Transactions**: For backend databases, which inherently support transaction rollbacks, it is possible to undo any changes. The signal handler can also notify external logic to detect and filter attacks based on specific inputs from particular sources.

### Experimental Evaluation

- **Testing Against Exploits**: We tested our shadow honeypot implementation against various exploits, including a recent Mozilla PNG bug and several Apache-specific vulnerabilities.

- **Performance Benchmarks**:
  - **Apache Web Server**:
    - **Workload Capacity**: Using ApacheBench, we measured the requests per second that Apache can handle. The patched version of Apache has a 20.1% overhead, which is expected due to the protection flags. For a single buffer and a vulnerable function invoked once per HTTP transaction, the overhead is 1.18%.
    - **Memory Requirements**: To avoid high memory overhead, we use an `mmap()`-based allocator, reducing the overhead to 2 page-table entries (PTEs) per allocated buffer plus one file descriptor per program.
  
  - **Mozilla Firefox**:
    - **Client Case Evaluation**: We back-ported the libpng vulnerability to test the protected version of Firefox. In the tightly-coupled scenario, the protected version shares the address space with the unmodified version. In the loosely-coupled case, the instrumented version of Firefox is launched to replay suspicious requests.
    - **Performance Impact**: Instrumenting the browser does not significantly impact performance. The benchmark results show a 35% performance degradation for standard page loads and a 50% degradation for scrolling configurations.
    - **Browser Version Popularity**: Figure 9 shows the popularity of different Mozilla versions, indicating the number of browser versions that need to be checked by the system.

### Conclusion

- **Summary**: The experimental evaluation demonstrates the effectiveness of our shadow honeypot implementation, showing acceptable performance overhead and robustness against various exploits. Future work will focus on optimizing the system and addressing inter-process communication challenges.