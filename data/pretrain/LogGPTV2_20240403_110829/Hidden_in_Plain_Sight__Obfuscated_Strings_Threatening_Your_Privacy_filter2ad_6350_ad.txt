D := {d | x ∈ use(curr Instr) ∧ d ∈ ud(x, curr Instr)}
cdcur r I nst r := cd(curr Instr) \ cdcr it
U := {u | x ∈ def (curr Instr) ∧ u ∈ du(x, curr Instr)
W := W ∪ D ∪ cdcur r I nst r ∪ U
∧ u ∈ brLoI }
Figure 2: Example of the Slicing Process for the Parameter s
of useString—Showing LoIs and First Backward Phase
(2) In the backward phase (Line 10), we determine the set D of all
definition sites related to currInstr, i.e., D consists of instructions
that initialize variables used by currInstr.
(3) Also in the backward phase, we determine the set cdcurr Instr of
instructions on which the current instruction is control dependent
on (Line 11). From this set, we remove the instructions cdcrit that
could prevent the execution of scrit . This backward phase adds
instructions to W that (in)directly affect scrit . With this addition,
we include condition instructions that do not control the execution
of the criterion itself. This step is required to, e.g., ensure that loops
manipulating byte arrays are added to the slice. If the backward
phase adds instructions that define a new reference-typed variable,
i.e., an object, we perform an additional forward phase to include
those instructions in W that potentially affect the state of the object
after its initialization and which are relevant w.r.t. the LoI. Hence,
we only add instructions that are still backward reachable from the
LoI.
(4) In the forward phase (Line 12, 13), we determine the set of
all instructions U that use a variable defined by currInstr and
which are backward reachable from the LoI. This phase includes all
instructions that potentially mutate the state of the defined variable,
e.g., filling an array with actual values or calling a method of the
object.
(5) In the last step (Line 14), we update W with the three differ-
ent sets of instructions. (i) cdcurr Instr the instructions on which
currInstr is control dependent,(ii) U those that use the variable
defined in currInstr, and (iii) D those that initialize the variables
used by currInstr.
The example in Figure 2 illustrates the process of determining
scrit and the backward phase of the algorithm, divided into 4 steps.
In step 0 we determine the statements that are candidates for LoIs.
Here, the constructor (Line 1), the append() calls (Lines 4, 6, and
10), and the call to useString() (Line 11) are selected. Given a LoI,
we consider the definition sites (def-sites) of the instructions that
load the LoI’s string parameters as slicing criteria (without includ-
ing the LoI itself). For illustration purposes, assume the LoI being
processed is the useString call (Line 11), the only string parameter
s (the int parameter is ignored) is defined by the result of the call
sb.toString() (Line 9); hence, this call is our slicing criterion. On
Figure 3: Example of the Slicing Process for the Parameter s
of useString — Showing the Necessary Forward Phase
the contrary, instructions that load string constants are not con-
sidered as slicing criteria, e.g., Line 6 is a LoI, but the instruction
that loads the string constant "D" is not a slicing criterion. The
rationale is that in such cases, we are sure that no deobfuscation
happens before reaching the LoI. In Figure 2 such LoIs are pointed
at by dashed arrows. Therefore, we establish in step 1 that the call
useString(s,2) (Line 11) is the LoI and toString() (Line 9) is
the scrit . The first backward slicing phase determines the definition
site of the object on which toString() is called, i.e., sb, this is step
2. Hence, createMutableCharSequence (Line 2) is added to the
slice in step 3. The if-condition (Line 8) is not added to the slice
because it would potentially prevent the execution of the slicing
criterion (scrit ).
The example continues in Figure 3, showing the forward phase
of the algorithm. Here, we perform a forward phase concerning
createMutableCharSequence (Line 2) which does not use vari-
ables. Thus, no backward step is necessary. In step 4 (cf. Figure 3)
we identify all use-sites of sb and, since all of them (Lines 4, 6,
9, and 10) are backward reachable from the LoI, we add them to
the slice. In this case, Line 10 is not needed in the slice, because
the string returned at Line 9 cannot be mutated afterwards. How-
ever, our algorithm does not have such knowledge and, therefore,
conservatively adds it. Next, in step 5(a) the algorithm processes
the append calls in Lines 4 and 6 as follows. Given that no local
variable is defined, there will not be a forward step; however, in the
first append call (Line 4), we use x and, therefore, add the defining
instruction (Line 1) to the slice. Additionally, the if-instruction
in Line 3 is added to the slice, because both appends are control
dependent on it, but not scrit . When we process the append call
in Line 10 in step 5(b) we see that the if-condition (Line 8) would
possibly prevent the execution of scrit and thus do not add it.
Step 6 is not explicitly shown, as it basically repeats steps 2-5
but starts with the variable x in Line 4.
To recap, the resulting slice is the entire code from Figure 3,
except for Lines 8 and 11 in Figure 3 (which are crossed out). In
contrast to our approach, traditional slicing algorithms would in-
clude the condition in Line 8 into the slice which could prevent the
execution of the relevant code.
CharSequence x = new ConstantCharSequence("C");CharSequence sb = createMutableCharSequence();if (conditionA){sb.append(x);} else { sb.append("D");}if (conditionB){CharSequence s = sb.toString();       sb.append("E");useString(s,2);}0:locations of interest not relevant: parameter is a constant1234567891011121: the def-site for the relevant parameter (“s”)(cid:15482)the call of “toString()” is the slicing criterion2: the receiver is relevant for the call and thereforerelevant for the slice3: def-site of the receiver     (cid:15482) createMutableCharSequence         is part of the slice Start & Backward Steps5(a): append(x) and append("D") are dependent on conditionAon which the slicing criterion is not dependent on         (cid:15482) the if and the conditionAare part of the slice Forward Steps (for “sb”)4: use-sites of the     receiver (“sb”) that    are backwards     reachable from the     location of interest    (cid:15482) sb.append is part    of the sliceCharSequence x = new ConstantCharSequence("C");CharSequence sb = createMutableCharSequence();if (conditionA){sb.append(x);} else { sb.append("D");}if (conditionB){CharSequence s = sb.toString();       sb.append("E");useString(s,2);}1234567891011126: perform slicing for “x” as done for “sb”7: create final code using the found instructions; replace call    at location of interest by logging call. 5(b): append("E”) is dependent on conditionB on which the slicing criterion is dependent on        (cid:15482) the if and conditionB are NOT part of the slice not shownIn step 7, we create the executable code, including a method
to retrieve the value that would have been used at the LoI. The
following section explains this in more detail.
3.4 Executing Sliced String Usages
To obtain the deobfuscated string that in the original application
would flow into the LoI, we extend the slice by a call to a method
that logs the string. This call effectively replaces the original LoI
with the call to the logging method, which allows us to retrieve
the deobfuscated string value. We add a return statement to the
slice to ensure that the signature of the sliced method can remain
as before. If we need to return a value, we either return null or the
numeric value 0—depending on the declared return type. Next, we
replace the body of the original candidate method with the extended
slice; this ensures that the execution context w.r.t. the name of the
declaring class as well as the name and signature of the method is
identical to the original code to evade the countermeasures SC and
KSC.
To execute the sliced method in its context, we have to make the
class concrete, if it is abstract. Therefore, all abstract methods are
made concrete by returning default values of the declared return
type. We rewrite the class so that it extends a superclass that we
generate, including the corresponding static initializer and super
calls. With this step, we increase the likelihood that the initialization
of our class containing the sliced method does not abort with an
exception to evade the countermeasures SI and OI. Recall that we
have no means to determine appropriate parameter values that
we could use and, therefore, always have to use default values.
The generated superclass also implements all methods transitively
called by the sliced method. As previously, we return default values
if required.
We set up the classpath to include all classes of the original
application, except the modified one. Additionally, we add the new
class as well as our new superclass to ensure that our slice can
find any application class used in its code. As a replacement of the
original android.jar, we use an artificial jar with methods stubs.
Methods that have to return a value return the type’s default value
(e.g., null or 0). All these transformations together, in combination
with our slicing approach, enable StringHound to circumvent all
obfuscation schemes discussed in Table 1. Even if reflection is used,
the slice can be run successfully as long as the targets are part of
the execution environment. Native methods are not included, since
most Android applications do not compile their native parts for the
x86 architecture on which we perform the slicing.
Finally, we call the resulting method reflectively using default
values for the parameters when necessary. The method will then
call our logging method to record the deobfuscated string.4 If the
execution of the sliced method crashes, no other slices are affected
and only the result of the crashed slice will be missing. We chose
to call the sliced methods with default values because the choice of
them is simple and caused no overhead. Nevertheless, our approach
does not depend on this choice and can be extended to support
more advanced methods for determining the parameter values such
as fuzzing.
4We can specify a time limit for the slice execution, to cancel long-running slices.
Figure 4: Recall and Successfully Processed APKs
4 EVALUATION
We performed two studies (a) comparing StringHound against
other string deobfuscators, and (b) assessing the performance of
StringHound on real-world apps.
The setup consists of a Server with two AMD(R) EPYC(R) 7542
@ 2.90 GHz (32 cores / 64 threads each) CPU, and 512 GB RAM. The
analyses were run using OpenJDK 1.8_212 64-bit VM with 20 GB
of heap memory, and a 5s timeout for a single string deobfuscation.
4.1 Comparison with Other Deobfuscators
We evaluated StringHound against Dex-Oracle 1.0.5 [14], Simplify
1.2.1 [49], JMD 1.61 [26], and DEX2JAR 2.0 [15]. To the best of our
knowledge, these are the only freely available deobfuscators.
As input for the deobfuscators, we randomly picked 1,000 apps
from the data set described in Section 3.1.2 which have not been
previously used to train our classifiers. Two comparison metrics
are used: (a) percentage of APKs processed without termination
errors; and (b) recall, which we define as the percentage of unique
deobfuscated strings over all unique strings in the original apps.
The precision metric is discarded since our data set contained only
obfuscated strings. Therefore, there cannot be false positives (i.e.,
plain strings identified as obfuscated). However, StringHound’s
false positive rate is restricted by the false positives produced by
the string classifier and the method classifier. The results are sum-
marized in Figure 4. In the following, we discuss each deobfuscator
individually.
Simplify [49] applies semantic-preserving transformations to re-
engineer the APK’s code, such as constant propagation and dead
code removal. To enable transformations, it executes each method
on a custom Dalvik virtual machine and returns a graph with all
possible register and class values for every execution path. Simplify
can be used as a deobfuscator in limited cases [49], namely for
deobfuscation methods that do not depend on any state and use only
constants. In such cases, constant propagation can uncover hidden
information. Additionally, Simplify optimizes all statements also the
ones which are not relevant to deobfuscate a string. Unfortunately,
Simplify’s re-engineered APKs were completely broken and could
SimplifyDEX2JARJMDDex-OracleStringHound0102030405060708090100Percentage0.00.00.012.573.90.030.294.7RecallAPKsnot be analyzed to produce results; hence, Figure 4 reports 0% for
both values.
DEX2JAR [15] transforms Dalvik bytecode to Java bytecode. It
has a sub-module that executes methods with a certain signature
for deobfuscation purposes. Similar to our approach, it executes the
code in the JVM. Unlike StringHound, DEX2JAR needs the user to
provide the deobfuscation method to be executed. We applied our
deobfuscation method classifier to each app and used its output as
input for DEX2JAR. Providing the same deobfuscation methods as
input to DEX2JAR and StringHound enables a fair comparison of the
two. However, DEX2JAR processed only 30% of the APKs without
errors, and it was unable to deobfuscate a single string, resulting in
a 0% recall. This weak results in our empirical study are caused by
DEX2JAR’s assumption that deobfuscation methods are in the same
class as the obfuscated string. Moreover, DEX2JAR assumes that
all constant values needed for the execution of the deobfuscation
method are provided before it is called, while the latter can also be
the result of other accesses or computations. Unfortunately, none of
the obfuscation techniques that we surveyed in Section 2 matches
these conditions.
JMD [26] re-implements deobfuscation logic of known obfusca-
tors [12, 41, 62] to execute it with directly-propagated constants.
These constants are extracted from previously identified immedi-
ate callers of known deobfuscation methods. After the execution
of the deobfuscation logic, the calls to this logic is replaced with
the revealed strings. Unlike our approach, JMD does not consider
field accesses or other ways to retrieve the propagated values. It
identifies obfuscated strings by searching for a specific loading-
instruction (LDC). Therefore, it misses almost all obfuscated strings,
which would be produced by the techniques from Section 2 because
they are loaded by a different instruction (LDC_W). Additionally,
JMD uses a fixed set of method signatures without considering vari-
ations or in-lining of deobfuscation logic. Finally, the deobfuscation
logic uses a constant key, but as shown in Section 3.1.3, the key
varies with each string usage. JMD’s limitations lead to its poor
performance: while successfully processing 94% of the APKs, only
0.01% of the strings were deobfuscated.
Dex-Oracle [14] searches for deobfuscation methods and executes
them in an emulator. It uses fixed method signatures to search the
app code. Therefore, it misses variations of methods produced the
same obfuscator and in-lined deobfuscation code. For instance, only
two kinds of signatures for deobfuscation methods are processed.
Whereas, one has only a String parameter, the other takes three
int parameters. Both signatures return a String. However, some
obfuscators use methods with more than three parameters, which
may also have other types than String or int and return Object
instead of String. Moreover, it has similar drawbacks as Simplify
and JMD – wherein is it required that the inputs of the deobfuscation
method call are instructions that return a constant value.
As Figure 4 shows, Dex-Oracle processed all APKs without errors
but recovered only 2.5% of all obfuscated strings. Its strict assump-
tions match only very few deobfuscation methods found in the wild,
leading to a low recall. Even those are only a coincidence because
the obfuscator, which produced these deobfuscation methods, has
various other templates (cf. Section 3.1.3) as also shown in Table 1
with cn.pro.sdk.
StringHound was able to process all APKs with a recall of 73.9%.
A detailed analysis of the 26.1% missing cases showed that every
obfuscation scheme listed in Table 1 occurred in the false negative
set. Furthermore, the analysis revealed that either the execution
environment, surrounding the sliced method, is too complex to be
modeled with our default values (cf. Section 5) or the classifiers
were not able to identify the obfuscated strings (cf. Section 3.1.3).
However, the high recall confirms the effectiveness of our approach,
which does not suffer from the various limitations of the state-of-
the-art deobfuscators. Unlike our approach, other deobfuscators do
not ’automatically’ identify obfuscated strings and deobfuscation
methods. To use them, one either needs to know the deobfuscation
methods beforehand or must run all methods of the app being
analyzed. Such a brute-force approach does not scale to large data
sets.
4.2 Findings in the Wild
In this section, we use StringHound to assess how often string
obfuscation is used in the wild and for what purposes. Four different
sets of APKs are used for our study. The first set consists of 100,000
apps from AndroidZoo [25]. The second set consists of the Top
500 most common apps based on AndroidRank [2]. The third set
consists of apps that were available on the Play Store in 2018 and
were classified as malicious by at least 10 AV vendors in VirusTotal.
Finally, the last set consists of 230 Android malware samples from
Contagio [9], containing current and past malware families.
4.2.1 Prevalence of Obfuscated Strings in the Wild. In this section,
we measure the prevalence of obfuscated strings in the wild. There-
fore, we apply our approach to 100,000 apps from Section 2. To
avoid false positives, we exclude all constant strings from our find-
ings and count the remaining ones, which we refer to as newly