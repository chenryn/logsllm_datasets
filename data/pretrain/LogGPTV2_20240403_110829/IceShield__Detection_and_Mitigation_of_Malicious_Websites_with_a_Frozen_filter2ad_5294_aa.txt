# IceShield: Detection and Mitigation of Malicious Websites with a Frozen DOM

**Authors:**  
Mario Heiderich, Tilman Frosch, Thorsten Holz

## Protecting Browsers from Extension Vulnerabilities

**Authors:**  
Adam Barth, Adrienne Porter Felt, Prateek Saxena  
University of California, Berkeley  
{abarth, afelt, prateeks}@eecs.berkeley.edu  
Aaron Boodman  
Google, Inc.  
PI:EMAIL

### Abstract

Browser extensions are highly popular, with approximately one in three Firefox users running at least one extension. Despite the good intentions of extension developers, they often lack expertise in security, leading to vulnerabilities that can be exploited by malicious website operators. In the Firefox extension system, these exploits are particularly dangerous because extensions run with the user’s full privileges, allowing them to read and write arbitrary files and launch new processes. In this paper, we analyze 25 popular Firefox extensions and find that 88% of these extensions require less than the full set of available privileges. Additionally, 76% of these extensions use unnecessarily powerful APIs, making it difficult to reduce their privileges. We propose a new browser extension system that enhances security through the principles of least privilege, privilege separation, and strong isolation. Our system limits the damage an attacker can inflict through an extension vulnerability. This design has been adopted as the Google Chrome extension system.

### 1. Introduction

Web browser extensions are extremely popular, with roughly one-third of Firefox users having at least one installed. These extensions modify the core browser experience by altering the user interface and interacting with websites. For example, the Skype browser extension converts phone numbers on web pages into clickable links that launch the IP-telephony application. While there have been several recent proposals for new web browser architectures, little attention has been given to the architecture of browser extension systems.

Many extensions interact extensively with arbitrary web pages, creating a large attack surface that attackers can exploit. In this paper, we focus on benign-but-buggy extensions. Most extensions are not written by security experts, and vulnerabilities in these extensions are concerning because Firefox extensions run with the browser's full privileges. If an attacker can exploit an extension vulnerability, they can gain the extension's broad privileges and install malware on the user's machine.

At DEFCON, Liverani and Freeman demonstrated attacks against several popular Firefox extensions. In one instance, if a user dragged an image from a malicious web page into the extension, the website operator could install a remote desktop server on the user's machine and take control of the mouse and keyboard.

These attacks raise the question of whether browser extensions need such high levels of privilege. To investigate, we examined 25 popular Firefox extensions to determine their required privileges. We found that only 3 out of 25 extensions require full system access. The rest are over-privileged, unnecessarily increasing the severity of extension vulnerabilities. An extension system that narrows this privilege gap would reduce the impact of extension exploits, but the Firefox extension platform does not provide sufficiently fine-grained privileges. For example, many extensions store settings using an interface that can read and write arbitrary files.

We propose a new extension system designed with security in mind. Specifically, we aim to protect users from benign-but-buggy extensions by incorporating least privilege, privilege separation, and strong isolation. Instead of running with the user’s full privileges, extensions in our system are limited to a set of privileges chosen at install time. If an extension is later compromised, it will be unable to increase its set of privileges. Our case studies suggest that most extensions do not require the privilege to execute arbitrary code, thus limiting an attacker's ability to do so.

In addition to limiting overall privileges, our system further reduces the attack surface by requiring developers to divide their extensions into three components: content scripts, an extension core, and a native binary (see Figure 1):

- **Content Scripts:** Each content script has direct access to the DOM of a single web page and is exposed to potentially malicious input. However, content scripts have no other privileges except the ability to send messages to the extension core.
- **Extension Core:** The extension core contains the bulk of the extension's privileges but can only interact with web content via XMLHttpRequest and content scripts. It does not have direct access to the host machine.
- **Native Binary (Optional):** An extension can include a native binary that can access the host machine with the user’s full privileges. The native binary interacts with the extension core via the standard NPAPI interface used by Flash and other browser plug-ins.

To gain the user’s full privileges, an attacker would need to convince the extension to forward malicious input from the content script to the extension core and then to the native binary, where the input would need to exploit a vulnerability. We argue that exploiting such a multi-layer vulnerability is more difficult than exploiting a simple cross-site scripting hole in a Firefox extension.

Finally, the different components of an extension are isolated from each other by strong protection boundaries: each component runs in a separate operating system process. The content script and the extension core run in sandboxed processes that cannot use most operating system services. As a first layer of defense, the content script is isolated from its associated web page by running in a separate JavaScript heap. Although both the content script and the web page have access to the same underlying DOM, they never exchange JavaScript pointers, helping prevent JavaScript capability leaks.

Our extension system design has been adopted by Google Chrome and is available in Google Chrome 4. While it is difficult to predict how developers will use the extension system, we believe this architecture will provide a solid foundation for building more secure extensions.

### 2. Attacks on Extensions

A browser extension is a third-party software module that extends the functionality of a web browser, allowing users to customize their browsing experience. Because extensions interact directly with untrusted web content, they are at risk of attack from malicious website operators and active network attackers. In this section, we present a generic threat model for extension security that applies to both the Firefox extension system and the new extension system we introduce. We then focus on the Firefox extension system, providing background material and examples of real attacks.

#### 2.1 Threat Model

We focus on benign-but-buggy extensions, assuming the extension developer is well-intentioned but not a security expert. We assume an attacker attempts to corrupt the extension and usurp its privileges. For example, if the extension has arbitrary file access, the attacker might be able to install malware on the user’s machine. We assume the attacker cannot entice the user into downloading or running native executables. We also assume the browser itself is free of vulnerabilities, allowing us to focus on the additional attack surface provided by extensions.

We consider two related threat models: a web attacker and an active network attacker. The web attacker controls a website, typically https://attacker.com/, which the user visits. The attacker typically attempts to corrupt an extension when the extension interacts with the attacker’s website. In addition to the abilities of a web attacker, an active network attacker can intercept, modify, and inject network traffic (e.g., HTTP responses). This threat model is appropriate, for example, in a wireless network in a coffee shop.

**Plug-ins:**
In this paper, we focus on browser extensions, which differ from browser plug-ins. Plug-ins render specific media types (such as PDF and Flash) or expose additional APIs to web content (such as the Gears APIs). Plug-ins are requested explicitly by websites, usually by loading content with a specific MIME type. By contrast, extensions interact with web pages without explicit consent. While plug-in security is an important research area, securing browser extensions requires different techniques.

#### 2.2 Exploiting Firefox Extensions

In Firefox, browser extensions run with the same privileges as the browser itself. They have full access to browser internals and the user’s operating system. Extensions can change browser functionality, modify website behavior, run arbitrary code, and access the file system. Firefox extensions combine two dangerous qualities: high privilege and rich interaction with untrusted web content. Together, these qualities risk exposing powerful privileges to attackers. We describe four classes of attacks against browser extensions and the relevant mitigations provided by the Firefox extension system:

- **Cross-Site Scripting (XSS):** XSS vulnerabilities result from interacting directly with untrusted web content. For example, if an extension uses `eval` or `document.write` without sanitizing input, an attacker might inject a script into the extension. In a recent example, a popular RSS aggregation extension evaluated data from the `<script>` element of an arbitrary website without proper sanitization. To mitigate XSS attacks, Firefox provides a sandbox API, `evalInSandbox`. When evaluating a script using `evalInSandbox`, the script runs without the extension’s privileges, preventing it from causing much harm. However, the use of this sandbox evaluation is discretionary and does not cover every kind of interaction with untrusted content.
- **Replacing Native APIs:** A malicious web page can confuse and ultimately exploit a browser extension by replacing native DOM APIs with methods of its own definition. These fake methods might superficially behave like the native methods and trick the extension into performing some misdeed. To mitigate this class of attack, Firefox automatically wraps references to untrusted objects with an `XPCNativeWrapper`. An `XPCNativeWrapper` is analogous to X-ray goggles, showing the underlying native object and ignoring any modifications made by the page’s JavaScript. However, this security mechanism has had a long history of implementation bugs, and recent work has shown that these bugs are exploitable in some extensions.
- **JavaScript Capability Leaks:** JavaScript capability leaks are another avenue for exploiting extensions. If an extension leaks one of its own objects to a malicious web page, the attacker can often access other JavaScript objects, including powerful extension APIs. For example, an early version of Greasemonkey exposed a privileged version of `XMLHttpRequest` to every web page, allowing attackers to circumvent the browser’s same-origin policy by issuing HTTP requests with the user’s cookies to arbitrary websites and reading back the responses.
- **Mixed Content:** An active network attacker can control content loaded via HTTP. The most severe form of this attack occurs when a browser extension loads a script over HTTP and runs it. The attacker can replace this script and hijack the extension’s privileges to install malware. A similar, but less powerful, attack occurs when an extension injects an HTTP script into an HTTPS page. For example, we discovered that an extension injects an HTTP script into the HTTPS version of Gmail. (We reported this vulnerability to the developers on August 12, 2009, and they released a fixed version that operates only on the non-HTTPS version of Gmail.)

Even though we might be able to design defenses for each of these attack classes, the underlying issue is that Firefox extensions interact directly with untrusted content while possessing a high level of privilege.

### 3. Limiting Firefox Extension Privileges

A natural approach to mitigating extension vulnerabilities is to reduce the privileges granted to extensions. To evaluate the feasibility of this approach, we studied 25 popular Firefox extensions to determine how much privilege each needs to implement its features. In addition to presenting our case studies, we also present an algorithm for finding methods in the Firefox extension API that lead from a less-privileged interface to a more-privileged interface.

#### 3.1 Case Studies

We manually reviewed 25 extensions to determine their privilege requirements:

1. **Behavior Analysis:** We analyzed the behavior of an extension to determine how much privilege it needs to realize its functionality, allowing us to compare its required privileges to its actual privileges.
2. **Implementation Analysis:** We analyzed the implementation of an extension to determine how much power it receives, given the set of interfaces it uses to realize its functionality. This allows us to evaluate how much we could reduce its privileges if we limited access to interfaces.

We found that most extensions do not require arbitrary file system access (the most powerful privilege), meaning that most extensions are over-privileged. We also found that extensions commonly use powerful interfaces to accomplish simple tasks because the Firefox APIs are coarse-grained.

**Methodology:** We randomly selected two extensions...