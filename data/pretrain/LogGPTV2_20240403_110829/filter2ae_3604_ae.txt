然后传入四个参数分别是，0，dos头地址，nt头地址，以及新区域基址  
进入call后，首先获取PE文件所有头部的大小 --> [ebp - 0x4]  
重复复制esi指向的地址到edi指向的地址，一次一个字节，共计复制ecx个字节  
也就是把原PE文件的头部，复制到目标内存中  
判断PE文件的文件属性，第一位是否为1，也就是是否有重定位信息  
### 2.6复制区段
如图所示，进入前，先传入了五个参数  
然后就是找到第一个区段头的一些信息，区段头的首地址，区段的数量，以此推测，后面应该是复制区段  
跟前面一样，是依次复制旧PE文件的区段，到新PE文件中去  
注意，后面跟0x20000000求与运算，判断区段是否可执行，如果是可执行的区段，就把分别把新旧区段的地址保存到我们传入的两个地址中，然后依次复制.rdata，.data，.reloc区段的内容到新内存中  
### 2.7修复文件
接下来进入的几个api，应该都跟修复这个pe文件有关系，因为原本封装的时候，肯定是直接以文件包在里面的，所以，要想直接加载到内存里，必须要做很多修复工作
首先进入下一个api，传入的参数如下：  
刚刚进入这个函数，就在新内存区域的末尾，开辟了大约40个字节，一看就是要搞事情  
#### 2.7.1修复导入表
在可选PE头中，前文提过数据目录的第一个结构，导出表，而第二个结构就是导入表，导入表是一个数组套数组的结构，数据目录里保存着第一个  
导入模块的描述符地址，结构体名称：`_IMAGE_IMPORT_DESCRIPTOR`，获取到了模块名称
    struct _IMAGE_IMPORT_DESCRIPTOR {
        union {
            DWORD   Characteristics; 
            DWORD   OriginalFirstThunk;         
        } DUMMYUNIONNAME;
        DWORD   TimeDateStamp; 
        DWORD   ForwarderChain;         
        DWORD   Name;//导入模块名的RVA
        DWORD   FirstThunk;              
    } IMAGE_IMPORT_DESCRIPTOR;
把导入模块描述符中的名字，依次复制到上文开辟的那段0x40的空间中，然后进入下一个call中  
传入了三个参数，0x40,0，复制出来的模块名字符串的地址，进去之后啥也没敢，只是简单跳两下就回来了。应该是判断传入的最后一个参数是否为0  
然后调用LoadLibraryA函数，加载模块  
然后导入名称表或者导入地址表都会指向这个结构，`_IMAGE_THUNK_DATA`  
因为是联合体，如果是在未加载内存的情况下，两个地址也就是OriginalFirstThunk和`FirstThunk`指向的都是相同的表（也就是连续的数组），里面存放的都是函数名称  
如果加载到内存，`FirstThunk`指向地址，称IAT表，OriginalFirstThunk指向名称，称INT  
地址表，那么结构中的Function就是地址，指向名称，AddressOfData就是名称结构体的地址，具体如下：
    struct _IMAGE_THUNK_DATA{
        union {
           DWORD ForwarderString;
           DWORD Function; //被输入的函数的内存地址
           DWORD Ordinal; //高位为1则被输入的API的序数值
           DWORD AddressOfData;//高位为0则指向IMAGE_IMPORT_BY_NAME 结构体二
        }u1;
    }IMAGE_THUNK_DATA;
    //IMAGE_THUNK_DATA64与IMAGE_THUNK_DATA32的区别，仅仅是把DWORD换成了64位整数。
    struct _IMAGE_IMPORT_BY_NAME {
        WORD    Hint;//指出函数在所在的dll的输出表中的序号        
        BYTE    Name[1];//指出要输入的函数的函数名
    } IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;
从图中可以看出，获取了`_IMAGE_THUNK_DATA`的地址，然后分别保存里面两个重要的地址，一个是导入地址表，一个是导入名称表  
然后根据导入地址表的地址，取其第一个成员的值，判断，如果首位为1，就是按照序号导入，首位如果为0，那么该地址就是存有名称的一个结构体，即上文的`_IMAGE_IMPORT_BY_NAME`  
可以看到，KERNEL32.DLL是按照名称导入的，接着又一次进行了复制，把名称复制到了之前在文件尾部空的一块空间里。  
最后通过`GetProcAdress`函数，（参数为模块基址和函数名）获取函数地址  
然后存入到导入地址表对应的结构中，也就是`_IMAGE_THUNK_DATA` 的Function，至此这样一个函数就修复完毕  
然后就是一顿循环  
然后循环每个模块，依次修复导入表，然后返回  
#### 2.7.2修复重定位表
进来就先经过一个跳来跳去又回来的call（跟刚刚一样对于理解整体脉络没啥意义的）  
然后就进入了这个call，而刚进来这段就很敏感了，了解PE文件的童鞋肯定知道。之所以产生重定位的原因是因为，基址的随机化。
也就是说，当把PE文件直接加载到内存的时候，因为ImageBase更改了，所以，代码段中的很多偏移变调了，原本是相对于在文件里写死的Imagebase的，但是它变了，操作系统会自动帮助你修改这些偏移，而之所以会自动帮助你修改，是因为有重定位表。那么现在就要手动（代码）修改了
所以第一步先获取到imagebase的差值，以及重定位表的位置  
关于重定位表，结构如下，这个表是个分成可变长度的块，每块的结构如下  
第一个DWORD：基础地址  
第二个DWORD：表大小  
第三部分开始，每个WORD保存一个小地址  
基础地址+小地址，构成了RVA ---> RVA + 模块基址 ----> VA
注意：这个VA指向的是偏移，也就是要更改的偏移，所以，找到这个偏移值，还有根据基址的变化，更改其值，才算是修复完成  
补充一句：这些偏移值，就是那些call，jmp等指令跳来跳去用到的偏移。
然后做一些基础判断，数据目录中的重定位表的RVA和大小是否为0  
然后就进入了关键环节
    //[ebp-0x4] ---> 保存的是第一个重定位表的VA
    024F8471  | 8B4D FC           | mov ecx,dword ptr ss:[ebp-4]      |
        //[ebp+0x8] ---> 保存的是新区域的基址
    024F8474  | 8B55 08           | mov edx,dword ptr ss:[ebp+8]      |
        //取当前重定位表里的大地址累加到模块基址上
    024F8477  | 0311              | add edx,dword ptr ds:[ecx]        |
    024F8479  | 8955 F4           | mov dword ptr ss:[ebp-C],edx      |
        //取当前重定位表的块大小，减8 再除以2
        //得到的就是当前表共计多少个小项（也就是偏移值的个数）
        //保存在[ebp-0x10]
    024F847C  | 8B45 FC           | mov eax,dword ptr ss:[ebp-4]      |
    024F847F  | 8B48 04           | mov ecx,dword ptr ds:[eax+4]      |
    024F8482  | 83E9 08           | sub ecx,8                         |
    024F8485  | D1E9              | shr ecx,1                         |
    024F8487  | 894D F0           | mov dword ptr ss:[ebp-10],ecx     |
        //获取首个小地址的位置--> [ebp-8]
    024F848A  | 8B55 FC           | mov edx,dword ptr ss:[ebp-4]      |
    024F848D  | 83C2 08           | add edx,8                         |
    024F8490  | 8955 F8           | mov dword ptr ss:[ebp-8],edx      |
        //取出块个数，减一，接下来进入循环
    024F8493  | 8B45 F0           | mov eax,dword ptr ss:[ebp-10]     |
    024F8496  | 8B4D F0           | mov ecx,dword ptr ss:[ebp-10]     |
    024F8499  | 83E9 01           | sub ecx,1                         |
    024F849C  | 894D F0           | mov dword ptr ss:[ebp-10],ecx     |
    024F849F  | 85C0              | test eax,eax                      |
对于重定位表中，每个小项的值是有约定的，两个字节共计16位，当高四位为0x3，也就是0011的时候，该值对应的才是实际地址。  
后面的代码如下：
    //取出小项然后右移0xc，也就是只剩下最高4位，然后跟F求与运算
        //然后把ax移动到ecx，跟3比较
    024F84A7  | 8B55 F8           | mov edx,dword ptr ss:[ebp-8]      |
    024F84AA  | 66:8B02           | mov ax,word ptr ds:[edx]          |
    024F84AD  | 66:C1E8 0C        | shr ax,C                          |
    024F84B1  | 66:83E0 0F        | and ax,F                          |
    024F84B5  | 0FB7C8            | movzx ecx,ax                      |
    024F84B8  | 83F9 0A           | cmp ecx,A                         | A:'\n'
    024F84ED  | 8B45 F8           | mov eax,dword ptr ss:[ebp-8]      |
    024F84F0  | 66:8B08           | mov cx,word ptr ds:[eax]          |
    024F84F3  | 66:C1E9 0C        | shr cx,C                          |
    024F84F7  | 66:83E1 0F        | and cx,F                          |
    024F84FB  | 0FB7D1            | movzx edx,cx                      |
    024F84FE  | 83FA 03           | cmp edx,3                         |
满足高四位为0x3，后12位就是小项对应地址值  
然后就是根据偏移值和相对模块基址修改偏移：
**简单理解公式就是：  
旧地址 - 旧基址 == 新地址 - 新基址  
新地址 = 旧地址 - 旧基址 + 新基址**
其中，新基址 - 旧基址，就是我们前文求得并保存的  
而通过重定位表找到的位置里就是旧地址，那么新地址自然轻松得到
    //取出小项中的后12位
    024F8503  | B8 FF0F0000       | mov eax,FFF                       |
    024F8508  | 8B4D F8           | mov ecx,dword ptr ss:[ebp-8]      |
    024F850B  | 66:2301           | and ax,word ptr ds:[ecx]          |
    024F850E  | 0FB7D0            | movzx edx,ax                      |
        //取出需要修改的偏移值
    024F8511  | 8B45 F4           | mov eax,dword ptr ss:[ebp-C]      |
    024F8514  | 8B0C10            | mov ecx,dword ptr ds:[eax+edx]    |
        //跟差值累加得到新的地址
    024F8517  | 034D EC           | add ecx,dword ptr ss:[ebp-14]     |
        //修改对应位置为新的地址
    024F851A  | BA FF0F0000       | mov edx,FFF                       |
    024F851F  | 8B45 F8           | mov eax,dword ptr ss:[ebp-8]      |
    024F8522  | 66:2310           | and dx,word ptr ds:[eax]          |
    024F8525  | 0FB7D2            | movzx edx,dx                      |
    024F8528  | 8B45 F4           | mov eax,dword ptr ss:[ebp-C]      |
    024F852B  | 890C10            | mov dword ptr ds:[eax+edx],ecx    |
接着又是一顿大循环，各种修改。  
至此，重定位表修改完成。
### 2.8收尾
接着进入最后的收尾工作，先把之前保存在堆栈里的几个api的地址清空掉，也就是最开始莫名分配了好多空间的位置  
找到原PE文件的入口点，在可选PE头的0x10位置，也就是OEP，并修改该新区域入口位置  
最后传入三个参数，直接进入完全加载 到内存的pe文件中，开始执行。  
## 3.收尾和总结
### 3.1关于第三段文件
当进入第三段文件执行的时候，就算是真正开始了远控文件的旅行，不过那是另一段旅程了，就不在这篇文章里写了（必经本篇篇幅已经好多）  
但是，还是还是简单的把那个文件的一些分析写在下面。
考虑到已经进入一个远控软件的核心功能部分，按照我的想法，为了方便，还是把内存dump下来，通过静态和动态结合的方式来。因此，祭出Scylla。  
首先运行到新内存区域入口处  
然后点转储内存  
选择所处模块的区域，转储PE，因为该修复的都修复了，所以直接转pe文件，也不同修复转储了。（后面的.mem文件要不要都无所谓了）  
注意，这是一个DLL文件，所以保存为dll后缀（其实无妨，因为是为了静态分析）  
通过下图判断是否为DLL文件  
从微软官方文档对`IMAGE_FILE_HEADER`中成员`Characteristics`的描述，这1位表示的是否为dll文件  
保存这个文件后，拖入IDA来看一下这个文件有哪些内容  
因为逆起来太耗时间（其实是我能力还不够~），所以直接F5了，可以看到，映入眼帘的就是dll文件的入口函数。  
fdwReason==1是进程启动的时候，也就是loadlibrary这个dll文件的时候，推测是做一些初始化的部分。就不进入看了  
我们进入下面的 **sub_234131B()** 函数
这个函数是主要的执行函数，大概包括，定时，封包，发包，以及执行任务  
这部分是准备内容，打开能看到一些缓冲区分配，处理数据包等  
然后下面进入循环，处理数据包并执行任务  
其中 **sub_2341F64()** 和 **sub_234257f()**
函数是设定http请求，以及发送http消息，应该是做服务端的回连，以及获取指令的。如图所示：  
然后结果传入 **sub_2348393()** 函数，循环调用函数 **sub_2347E9E()** ，执行指令  
**sub_2347E9E()** 这个函数是一个分派函数，不同指令分派给不同的函数执行，这应该就是远控的中枢部分，共计100多个case，可见cs的强大。  
### 3.2小结
至此CS的上线之旅就结束了，其实cs的shellcode也是非常经典了。
从shellcode加载：
到最终远控文件加入内存并执行:
通过一路分析过来，可以看到，其中包含了PE，winAPI，加解密等零碎的知识（对于初入逆向的我来说，确实相当吃力），想必通过这部分细节的了解，后面对于免杀的思路也会有更多尝试的点。
因为整篇内容不少，难免会有一些小错误，还请各位师傅不吝赐，多指教。感谢~~