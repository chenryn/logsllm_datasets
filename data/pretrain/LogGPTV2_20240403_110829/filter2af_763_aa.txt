原文：
**引言**
* * *
传统上，邮件内容仅能使用ASCII字符，并且每行字符数量也有限制，即1000个。[MIME标准](http://en.wikipedia.org/wiki/MIME
"MIME标准")定义了一种使邮件结构化（多个部分，包括附件）的方法，并且允许使用非ASCII数据。不幸的是，由于该标准太复杂，同时也太过灵活，使得某些定义可能会相互冲突，最要命的是，它也没有定义真正意义上的错误处理方法。
其结果是，面对某些打擦边球的有效MIME或故意使其无效的MIME，对于不同的实现来说，其解释也不尽相同。这也包括各种分析系统给出的解释，这些系统包括邮件过滤器、IDS/IPS、邮件网关或防病毒软件等，它们通常以不同方式来为最终用户系统解释那些精心构造的邮件。
在这篇文章中，我们将为读者演示怎样通过几个简单的步骤轻松修改带有恶意附件的邮件，从而绕过防病毒软件，使其无法从邮件中正确提取附件并检测恶意软件。经过这些修改后，人们仍然可以在Thunderbird中打开邮件，并顺利访问恶意载荷。
当然，这些技巧都不是什么新鲜玩意。早在[2014年11月](https://noxxi.de/research/content-transfer-encoding.html
"2014年11月")，我就公布过类似的问题；并且，在[2015年7月](https://noxxi.de/research/aol-mime-conflicting-cte.html "2015年7月")，我还发表了[几篇文章](https://noxxi.de/research/mime-conflicting-boundary.html
"几篇文章")，展示了如何使用这些技巧来[绕过DKIM签名的检查](https://noxxi.de/research/breaking-dkim-on-purpose-and-by-chance.html
"绕过DKIM签名的检查")。[从2008年起](https://securityvulns.ru/advisories/content.asp
"从2008年起")，也出现了许多这方面的文章。
但是，面对这些威胁，分析系统仍然没有丝毫长进，之所以出现这种情况，可能是供应商不知道这些问题，或者，它们已经知道了，但是毫无作为。因此，我决心再次发布这方面的技巧，希望至少唤醒部分供应商去修复自己的产品。在下文中，我将演示如何通过一些简单易懂的步骤来隐藏恶意附件，以绕过杀软的检测。
**第1步：普通MIME**
* * *
我们首先创建一个邮件，在附件的ZIP文件中放入[EICAR测试病毒样本](https://www.eicar.org/86-0-Intended-use.html
"EICAR测试病毒样本")。该邮件由两个MIME部分组成，第一部分是一些文本，第二部分为附件，用[Base64编码](https://en.wikipedia.org/wiki/Base64
"Base64编码")，以便将二进制附件转换为ASCII进行传输。截至今天（2018/07/05），Virustotal网站上只有36个（共59个）防病毒产品能够检测到恶意荷载；而其余部分可能无法或未配置为处理ZIP存档中的邮件文件或恶意软件。
    From: PI:EMAIL
    To: PI:EMAIL
    Subject: plain
    Content-type: multipart/mixed; boundary=foo
    --foo
    Content-type: text/plain
    Virus attached
    --foo
    Content-type: application/zip; name=whatever.zip
    Content-Transfer-Encoding: base64
    UEsDBBQAAgAIABFKjkk8z1FoRgAAAEQAAAAJAAAAZWljYXIuY29tizD1VwxQdXAMiDaJCYiKMDXR
    CIjTNHd21jSvVXH1dHYM0g0OcfRzcQxy0XX0C/EM8wwKDdYNcQ0O0XXz9HFVVPHQ9tACAFBLAQIU
    AxQAAgAIABFKjkk8z1FoRgAAAEQAAAAJAAAAAAAAAAAAAAC2gQAAAABlaWNhci5jb21QSwUGAAAA
    AAEAAQA3AAAAbQAAAAAA
    --foo--
我们可以将邮件的内容保存到扩展名为.eml的文件中，之后就可以使用Thunderbird打开该文件来查看邮件内容了。这时，会看到一个名为whatever.zip的ZIP文件，其中含有EICAR测试病毒。
**第2步：扰乱内容传输编码**
* * *
首先，我们使用在2015年时就[对AOL Mail有效的一个技巧](https://noxxi.de/research/aol-mime-conflicting-cte.html "对AOL Mail有效的一个技巧")：我们只需添加一个不同的Content-Transfer-Encoding标头，从而对内容的编码方式做出相互矛盾的陈述。大多数邮件客户端（包括Thunderbird和Outlook）将使用第一个标头而忽略第二个标头，因此，这里对内容的解释与原始邮件没有区别。尽管如此，即使这个问题已经公布3年之九了，采用它之后，Virustotal网站的检测率仍会从36降至28：
    From: PI:EMAIL
    To: PI:EMAIL
    Subject: contradicting Content-Transfer-Encoding
    Content-type: multipart/mixed; boundary=foo
    --foo
    Content-type: text/plain
    Virus attached
    --foo
    Content-type: application/zip; name=whatever.zip
    Content-Transfer-Encoding: base64
    Content-Transfer-Encoding: quoted-printable
    UEsDBBQAAgAIABFKjkk8z1FoRgAAAEQAAAAJAAAAZWljYXIuY29tizD1VwxQdXAMiDaJCYiKMDXR
    CIjTNHd21jSvVXH1dHYM0g0OcfRzcQxy0XX0C/EM8wwKDdYNcQ0O0XXz9HFVVPHQ9tACAFBLAQIU
    AxQAAgAIABFKjkk8z1FoRgAAAEQAAAAJAAAAAAAAAAAAAAC2gQAAAABlaWNhci5jb21QSwUGAAAA
    AAEAAQA3AAAAbQAAAAAA
    --foo--
**第3步：添加垃圾字符**
* * *
Base64编码使用的字母表是由64个明确定义的字符组成，末尾可能带有一些“=”。换行符用于将编码拆分为单独的行，应该被忽略。但是，处理对于其他（垃圾）字符的处理，还不是十分清楚。该标准建议（而非规定）忽略这些字符，尽管这些字符压根就不应该出现——这几乎是所有实现的实际处理方式。据[RFC
2045的第6.8节](https://tools.ietf.org/html/rfc2045#section-6.8 "RFC 2045的第6.8节")：
编码的输出流必须以不超过76个字符的行表示。 **解码软件必须将没有出现在表1中的所有换行符或其他字符全部忽略。**
在base64数据中，除表1中的字符、换行符和其他空格符之外的字符可用于表示传输错误，在某些情况下，甚至可以表示警告消息甚至消息拒绝。
基于此，我们在Base64编码中插入了大量垃圾数据，而最终得到的邮件，现在只有17（原来为36）种防病毒产品能够检测出其中含有恶意软件：
    From: PI:EMAIL
    To: PI:EMAIL
    Subject: junk characters inside Base64 combined with contradicting CTE
    Content-type: multipart/mixed; boundary=foo
    --foo
    Content-type: text/plain