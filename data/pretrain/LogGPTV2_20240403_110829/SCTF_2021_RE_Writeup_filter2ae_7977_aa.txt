# SCTF 2021 RE Writeup
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
年底了，2021年最后一场比赛，我就表演个AK RE给大伙助助兴吧。
比赛官网：  
比赛时间：2021-12-25 09:00:00 到 2021-12-27 09:00:00
## Reverse
###  SycGame
main中逻辑很简单，就是循环5次游戏，成功后拿到flag，关键在于sub_24E4的游戏逻辑。
    int __fastcall sub_24E4()
    {
      int v0; // eax
      int v1; // ebx
      int v2; // er12
      char v4; // [rsp+Bh] [rbp-15h]
      int i; // [rsp+Ch] [rbp-14h]
      srand(0);
      v0 = time(0LL);
      srand(v0 + srand_seed);
      srand_seed += rand();
      reset_globals();
      init_primes();
      size = 20;
      problem_size = 4;
      set_map();
      print_gift();
      null();
      printf("Tell me sol:");
      for ( i = 1; ; ++i )
      {
        if ( i > 10000 )
          fail();
        v4 = getchar();
        if ( v4 != '\n' )
          break;
    LABEL_26:
        ;
      }
      if ( v4 != 'w' && v4 != 's' && v4 != 'a' && v4 != 'd' && v4 != '0' )// 
                                                    // directions['w'] = 0;
                                                    // directions['s'] = 1;
                                                    // directions['a'] = 2;
                                                    // directions['d'] = 3;
        fail_0();
      if ( v4 == '0' )
        fail_1();
      if ( map[y_offset[directions[v4]]][3005 * y + x_offset[directions[v4]] + x] == -1 )// map[y + y_offset][x + x_offset]
      {
        if ( map[y_offset[directions[v4]]][3005 * y_offset[directions[v4]]
                                         + 3005 * y
                                         + x_offset[directions[v4]]
                                         + x
                                         + x_offset[directions[v4]]] == -3 )// map[y + y_offset * 2][x + x_offset * 2]
        {
          ++problem_solved;
          map[y_offset[directions[v4]]][3005 * y_offset[directions[v4]]// map[y + y_offset * 2][x + x_offset * 2]
                                      + 3005 * y
                                      + x_offset[directions[v4]]
                                      + x
                                      + x_offset[directions[v4]]] = -1;
          map[y_offset[directions[v4]]][3005 * y + x_offset[directions[v4]] + x] = -2;// map[y + y_offset][x + x_offset]
          map[y][x] = map_backup[y][x];
          y += y_offset[directions[v4]];
          x += x_offset[directions[v4]];
        }
        else
        {
          if ( !is_composite[map[y_offset[directions[v4]]][3005 * y_offset[directions[v4]]
                                                         + 3005 * y
                                                         + x_offset[directions[v4]]
                                                         + x
                                                         + x_offset[directions[v4]]]] )
          {
            putchar('!');
            fail_2();
          }
          if ( map_backup[y_offset[directions[v4]]][3005 * y + x_offset[directions[v4]] + x] == -3 )// map[y + y_offset][x + x_offset]
            --problem_solved;
          map[y_offset[directions[v4]]][3005 * y_offset[directions[v4]]
                                      + 3005 * y
                                      + x_offset[directions[v4]]
                                      + x
                                      + x_offset[directions[v4]]] = -1;// map[y + y_offset * 2][x + x_offset * 2]
          map[y_offset[directions[v4]]][3005 * y + x_offset[directions[v4]] + x] = -2;// map[y + y_offset][x + x_offset]
          map[y][x] = map_backup[y][x];
          y += y_offset[directions[v4]];
          x += x_offset[directions[v4]];
        }
      }
      else
      {
        if ( !is_composite[map[y_offset[directions[v4]]][3005 * y + x_offset[directions[v4]] + x]] )// map[y + y_offset][x + x_offset]
          fail_2();
        map[y_offset[directions[v4]]][3005 * y + x_offset[directions[v4]] + x] = -2;// map[y + y_offset][x + x_offset]
        v1 = y;
        v2 = x;
        map[v1][v2] = random_composite();
        y += y_offset[directions[v4]];
        x += x_offset[directions[v4]];
      }
      if ( problem_solved != problem_total )
      {
        null();
        goto LABEL_26;
      }
      return 1;
    }
init_primes 函数计算 3000 以内的质数，保存在数组中； set_map 函数随机生成一个 20 x 20 地图，存放在数组
`int[3005][3005]` map 与 map_backup
中,-1为箱子(Box)，-2为主角位置(Player)，-3为箱子的目标位置(Target)，质数为墙，合数为空地； print_gift
将地图的各个值输出，然后输入 wasd 移动，后面就是判断逻辑。
但是出题人写的逻辑与以前玩的推箱子逻辑有些差别（应该叫游戏 ~~bug~~ 特色），第一点比较容易看出来，就是 Player 不能移动到 Target
位置，否则这个 Target 就没了，不可能过关；另一点比较难发现，是在修改脚本已经解决了第一点后经常出现的，明明路径完全正确，却总在中途 `!fail`
了，调试了很久才发现，是 Player 踩在一个初始位置为 Box 的位置 (map_backup[pos] 为-1)
时，如果下一步推动箱子，脚下（原位置）就会凭空出现一个箱子，导致之后移动失败。
明白了这两点还不够，因为地图是随机生成的，有概率某个 Box 的生成位置卡在墙边导致无解，如下所示：
`$`代表 Box ，右边的`$`被卡住出不来，直接无解。
当然，有解的情况也不一定能解出来，这跟自动化推箱子脚本有关系，脚本写得差，跑脚本可能会很久，等跑出来早就 timeout 了。
写脚本这种事肯定是不会自己干的，直接 github 搜就完事了，找一个看起来实现比较简单的：
还要阅读源码，将上面的两点限制加进去，也就是 Player 不能移动到 Target ，和Player 踩在一个初始为 Box 的位置时不能推动箱子。
脚本如下：
    #!/usr/bin/python2
    # coding=utf-8
    from pwn import *
    import traceback
    import os
    # context.log_level = 'debug'
    local = True
    '''
    def fail():
        print('fail.')
        exit(-1)
    map = [0] * 400
    size = 20
    # set map
    count = 0
    pos = 10 * size + 10
    while count 
                if map[pos + move * 2] is not composite:
                    fail()
                if map_backup[pos + move] == -3:
                    count--                map[pos + move * 2] = -1
                map[pos] = map_backup[pos]
        else: # map[pos + move] != -1 ->
            if map[pos + move] is not composite:
                fail()
            map[pos] = random_composite()
        map[pos + move] = -2
        pos = pos + move
    '''
    '''
    推箱子，地图规模 20 x 20 ，箱子数 4 ，每次随机生成
    合数为路，质数为墙， -1 为箱子， -3 为箱子目标位置
    '''
    def run():
        if local:
            p = process('./sycgame')
            # p = gdb.debug('./sycgame', 'b puts')
        else:
            p = remote('124.70.152.166', 1448)
        is_prime = [1] * 3005
        is_prime[1] = 0
        i = 2
        while i  0
                        if is_prime[s[i]]:
                            t += '#' # wall
                        else:
                            t += ' ' # path
                t += '#\n'
            t += '#' * size + '\n'
            print(t)
            with open(path, 'w') as f:
                f.write('Level 1\n' + t)
        for i in range(5):
            print(i)
            p.sendlineafter('Ready?(Y/n):', 'Y')
            p.recvuntil('gift:\n')
            s = [int(j) for j in p.recvline().strip('\n ').split(' ')]
            # 试试 https://github.com/adhikary97/Sokoban-AI-Solver
            # 修改了一些约束条件
            '''
            7   ->
                    box_origin = []
            244 +
                    box_origin.append(coordinates())
                    # print(box_origin)
            288 ->
                    if self.map[x1][y1].wall or self.map[x1][y1].target or ((p[0], p[1]) in box_origin and (x1, y1) in s.boxes()):
            349 ->
                    if (x - 1, y) in box_pos and (x, y) not in box_origin:
            352, 355, 358相似
            363 ->
                    if not (matrix[x - 1][y].wall or matrix[x - 1][y].target) and (x - 1, y) not in box_pos and not matrix[x - 1][y].visited:
            365, 367, 369相似
            '''
            save_map_to_path(s, './levels.txt')
            path = os.popen('python3 ./Sokoban-AI-Solver-master/sokoban.py 1 a -t 1').readlines()[-1].strip('\n ').replace('d', 's').replace('r', 'd').replace('u', 'w').replace('l', 'a').replace(' ', '')
            print(path)
            if 'Timeaimit' in path:
                p.close()
                return -1
            p.sendline(path)
            if i == 4: break
            line = p.recvline().strip('\n')
            print(line)
            if 'fail' in line:
                p.close()
                return -1
        p.interactive()
        return 0
    while True:
        print('==============================================================================')
        if run() != -1:
            break
能连续跑完5轮概率比较小，可能很长时间才能跑通一次。而且可能由于输出缓冲的问题，我跑通了很多次都没拿到 flag
，本地完全没问题（被这个问题卡了很久），后来跟题目负责人沟通，他那儿跑出 flag 后发给我。
flag: SCTF{push_box_goooood_game}
###  SycOS
题目给了 risc-v 的 kernel, fs.img, sctf ，表明就是 risc-v 逆向， `README.md` 贴心的说用 qemu
，然后给个链接自己搜去。嗯…… qemu ，还是算了吧，懒得配环境，这不是给了程序吗，就硬逆。手上还没有能逆 risc-v 的 ida
，只好祭出去年安装后至今用过两次的 Ghidra 了。
sctf 拖入 Ghidra ，进入 entry ，一顿分析：
    ulonglong rand(void)
    {
      seed = seed * 1103515245 + 12345;
      return (seed > 49;
    }
    void gift(void)
    {
      ulonglong uVar1;
      ulonglong uVar2;
      ulonglong uVar3;
      ulonglong uVar4;
      printf("gift:\n");
      seed = 0x1447aabb;
      uVar1 = rand();
      uVar2 = rand();
      uVar3 = rand();
      uVar4 = rand();
      printf("\t1.%x %x %x %x\n",uVar1,uVar2,uVar3,uVar4);
      printf("\t2.Fake Tea\n");
      printf("\t3.Based on xv6 2020 labs & util branch.\n");
      return;
    }
    void replace_mem0_index_with_mem1_15_sub_index(ulonglong index)
    {
      longlong i;
      longlong lVar1;
      byte buffer [256];
      buffer._0_8_ = 0;
      memset(buffer + 8,0,248);
      lVar1 = (longlong)((int)index << 8);
      memcpy(buffer,mem0 + lVar1,0x100);
      i = (longlong)((15 - (int)index) * 0x100);
      memcpy(mem0 + lVar1,mem1 + i,0x100);
      memcpy(mem1 + i,buffer,0x100);
      return;
    }
    void tea_decrypt_mem1(void)