---|---  
hvix64.exe / hvax64.exe | Hypervisor核心可执行文件，适用于Intel和AMD。 包括引导过程完成后在VMX
root模式下运行的所有代码  
vmwp.exe | VM工作进程的可执行文件。 包括设备仿真的代码，以及几个合成设备  
vmswitch.sys | 实现Networking VSP的Windows内核驱动程序  
storvsp.sys / vhdmp.sys | 存储VSP的内核驱动程序  
表1 Hyper-V可执行程序
###  2.7 逆向工程陷阱
Hyper-V及其一些核心功能的逆向工程，我们必须克服几个挑战。 这些挑战对于分析Hyper-V的任何安全研究人员都非常重要，我们希望以下小节中的描述将提供有帮助的见解。
####  2.7.1 符号移植
为了解安全相关核心功能的实现，如VM exit处理或hypercall API，对hypervisor二进制文件的逆向工程是必不可少的。
我们的研究是在英特尔硬件上进行的，因此我们使用了hivx64.exe。 在尝试初步了解所包含的功能时，我们必须克服一些挑战。
首先，没有可用于二进制文件的公共调试符号。 这增加了识别安全相关代码区域所需的工作量。
其次，通过搜索调试输出和其他人类可读字符串来识别关注功能的标准方法不起作用，因为hypervisor中的此类功能非常少。最后，我们不能依赖于已知API或库的使用。
与用户空间程序或内核驱动程序相比，hypervisor是单个静态链接的可执行文件。
但是，我们可以使用一些技术来识别所关注的功能：名为Gerhart的研究人员在securitylab.ru上的一篇详细博客文章中描述了他的[符号移植方法](https://www.securitylab.ru/contest/444112.php)：hvix64.exe与winload.exe和hvloader.exe共享大量代码。
公共调试符号对于它们都可用。
使用流行的[BinDiff软件](http://www.zynamics.com/bindiff.html)，我们可以识别共享功能，并将包含的符号移植到我们的可执行文件中。
不幸的是，共享功能主要涉及网络代码，USB堆栈以及WinDBG调试器存根，并且对于我们识别攻击面的目标并不那么关注。
####  2.7.2 VMCS
如前所述，hypervisor不依赖任何外部库。 它使用的唯一有用的文档功能是用于配置和管理不同虚拟机的Intel VMX指令。
如英特尔官方手册14第3卷所述，VMX的核心部分是称为VMCS（Virtual-Machine Control Structures
虚拟机控制结构）的数据结构。 VMCS分为四个逻辑部分：
  * Guest-state区域
  * Host-state区域
  * VM-execution, VM-exit 和 VM-entry控制字段
  * VM-exit信息字段
Guest-state区域用于存储VM退出时的处理器状态，并将控制权传递给hypervisor。这包括某些控制寄存器，以及MSR和段选择器，但最重要的是RIP，RSP和RFLAGS的值。
当hypervisor处理VM exit并继续虚拟机时，处理器状态从VMCS加载，并且可以（潜在地）继续透明地执行。
Host-state区域在VM-exit期间加载，并在处理这些exits时描述hypervisor的初始状态。
这是我们特别关注的，因为存储的RIP和RSP值允许我们快速识别主exit处理程序及其堆栈位置。
VM-execution的控制字段控制VMX non-root模式下的操作。 这些字段控制中断和某些类型的指令的处理，并决定哪些操作触发VM exit。
它们是安全研究的一个关注目标，因为不安全的控制领域设置可能导致严重的逻辑缺陷。
最后，VM-exit信息字段包含有关VM-exit原因的信息。 这些信息在整个VM出口处理程序中使用，因此从逆向角度来看非常相关。
读写VMCS字段的专用指令：VMREAD和VMWRITE。 两个指令都需要编码的参数来描述所访问的VMCS字段。
对于我们的研究，我们决定以半自动化方式使用这些信息。 使用IDAPython脚本，我们将所有VMCS访问转换为可读的版本。
这简化了对涉及VMCS字段的所有代码部分的理解，并允许我们识别主要功能，如VM exit处理和hypercall处理程序。
图5 具有可读字段名称的VMREAD指令
####  2.7.3 调试
尽管静态分析被证明是可行的，用以获得初步的理解，但我们很快就决定进行额外的动态分析以进行更全面的分析。
有趣的是，微软的WinDBG集成了Hyper-V调试功能。 调试Hyper-V本身的工作方式几乎与调试Windows内核的方式相同，但由于缺少符号和功能而不太顺手。
像Firewire，以太网和USB等不同的访问方法都可以被支持，但实际上我们在带有标准串口的物理硬件上获得了最可靠的结果。
尽管使用物理硬件调试绝对是可能的，但基于虚拟化的方法会更加顺手。 幸运的是，当前版本的VMware Workstation和VMware
Fusion支持称为嵌套虚拟化的功能。 嵌套虚拟化允许在虚拟机内部使用Intel VT，并且可以将Hyper-V作为普通VM运行。
通过虚拟化Hyper-V本身，我们获得了许多优势。 除了上面提到的WinDBG接口，我们现在还可以使用VMware的内置GDB存根作为替代调试环境。
此外，快照可以用作获取物理内存转储的简单快捷方式。 [VMware Workstation /
Fusion](https://insinuator.net/2014/01/serial-port-debugging-between-two-virtual-machines-in-vmware-fusion/)还支持在虚拟机之间共享串行端口，从而可以在虚拟机中同时运行调试器和被调试机器。
虽然这仍然不会带来舒适或功能丰富的调试环境，但事实证明，这足以进行我们研究所需的分析。
## 3 攻击面和测试方法
基于第2章中介绍的体系结构概述，对于VM突破攻击，我们将以下组件确定为的潜在并有希望的目标：
  * 1.设备模拟
  * 2.VMBus和合成设备
  * 3.Hypercall API
  * 4.VM Exit 处理
以下部分将更详细地描述每一个组件，并介绍我们发现安全问题的方法。 我们还没有粗略评估过一般VM exit处理，因此本章不包括此主题。
####  3.1 设备模拟
设备虚拟化是每个虚拟化解决方案的核心任务之一。 虽然合成设备具有更好的性能特征和更好的接口，但它们不足以用于通用虚拟化。
没有明确支持这些设备的旧操作系统仍然依赖于虚拟环境中“标准”硬件的可用性。
此问题通常使用设备仿真来解决，，其中具有广泛支持的旧硬件由hypervisor模拟。
由于仿真设备的高复杂性和高性能要求，设备仿真通常是虚拟化软件的薄弱环节。 2007年，Tavis
Ormandy描述了他在多个虚拟化解决方案中模拟仿真设备的方法，该解决方案发现了多个漏洞。
此外，设备仿真层是Xen和KVM管理程序的流行目标，它们使用QEMU来实现其设备。
Hyper-V支持许多普通虚拟机的仿真设备：
  * 网络适配器
  * S3 Trio显卡
  * 键盘/鼠标
  * IED控制器
所有这些都在虚拟机工作进程vmwp.exe中实现。
因为模拟设备的攻击面很容易理解，并且fuzzing它们不需要特定于单个hypervisor的知识，所以我们没有期望很多结果。
所有设备的基本fuzzing测试都会触发VM的永久性崩溃，这些崩溃是由工作进程中的断言触发的。
此外，我们能够以100％的CPU消耗冻结工作进程，这需要使用父分区的任务管理器杀死硬件。
这可能是某些云环境的相关问题，但不会以任何方式影响其他VM，因此并不重要。
对 vmwp.exe二进制文件的进一步静态分析，表现出了许多防御性检查，并且没有明显的安全漏洞。
####  3.2 VMBus和合成设备
#####  3.2.1 VMBus
如前所述，VMBus是用于分区之间通信的机制。 在Hyper-V的默认配置中，仅允许在child partition和root
partition之间进行通信。 VMBus本身通过映射到多个分区的内存页来实现的，在默认情况下映射到root partition和目标child
partition。 这意味着通过总线发送的数据不需要通过hypervisor“复制”，减少了必要的上下文切换次数，从而显着提高了性能。
VMBus通信分为多个通道，每个通道由一个输入和输出环形缓冲区组成。 由于环形缓冲区空间非常有限，因此性能关键组件利用访客物理地址描述符列表（Guest
Physical Address Descriptor Lists GPADLs）的附加机制，该机制允许root
partition将客户机内存的其他页面直接映射到其自己的地址空间。
VMBus基础架构的主要用户是合成设备。 这包括存储和网络，还包括视频驱动程序和一些其他实用程序服务（例如时间同步，VM的动态内存分配和键值服务）。
如2.2节所述，存储和网络是作为内核驱动程序实现的。
这使得它们成为关注的目标，因为这些驱动程序中的漏洞（例如，解析来自攻击者控制的分区的输入）将导致root
partition的内核空间直接损害，从而破坏整个root partition。 相反，视频驱动程序以及所有实用程序服务却都是作为VM工作进程的一部分实现。