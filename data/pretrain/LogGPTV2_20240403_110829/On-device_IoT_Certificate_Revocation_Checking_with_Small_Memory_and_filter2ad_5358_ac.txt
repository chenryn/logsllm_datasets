built on a fixed and static key-value set. Thus, we use Othello in
our work for the optimal updating efficiency.
The structure of a one-bit Othello for the binary classification
case is illustrated as Fig 4, in which each bucket of the hashing ta-
bles contains a one-bit slot. Suppose the lengths of the two hashing
tables Ta and Tb are ma and mb, and the corresponding uniform
hash functions are ha (x) and hb (x). Othello is constructed by find-
ing an acyclic undirected graph G = (Va, Vb, E), where E is the edge
a ∈ Va (0 ≤ i < ma)
set, Va, Vb are the vertex sets with each node vi
(cid:17)
b ∈ Vb (0 ≤ j < mb) representing the ith and jth bucket of
and v
Ta and Tb. For any key-value pair (k, v) with k ∈ U and v ∈ {0, 1},
v can be stored in graph G by inserting a new edge
in E,
where i = ha (k) and j = hb (k) (as shown by the red or the green
edges in Fig 4). The query function f : U → V for the key-value
mapping is defined as: Query(k) = ta[i] ⊕ tb[j], where ta[i] and
tb[j] represent the entry in the ith and jth bucket of Ta and Tb
respectively.
According to Yu et al. [37], it takes O(1) time to find a proper pair
of hash functions ha, hb that can successfully allocate the whole
key set if the size of Othello (ma +mb) is larger than 2.33|U |, where
|U | is the size of the key set. In addition, using this setting, it takes
O(1) cost to query the data structure, and amortized O(1) time to
insert and update the data structure incrementally.
vi
a, v
Therefore, in the DASS, we particularly use a variant of Cuckoo
filter and Othello, which have been demonstrated as one of the
most efficient filter/set-query tools for lookup and updating [28]
to our best knowledge. We include the detailed preliminaries of
Cuckoo filters and Othello implementation in Appendices A.1.1 and
A.1.2. Note that the filter and set query components in DASS can
be replaced with other alternative tools that satisfy the efficiency
requirements of CR checking.
Tradeoff analysis of DASS. Despite its simplicity, DASS is
rather memory-efficient to memorize the binary values of keys,
especially when the sizes of the negative key set and positive key
set are highly imbalanced (namely, set ratio r = |N |/|P| is large).
Here we show how to optimize DASS so that the total memory cost
is minimized for the given two key sets P and N .
In DASS, there exists a trade-off between the sizes of the filter
F and that of the Othello O. The false positives will be fewer if F
uses more space, and hence O needs less space.
FilterFilterPPN01OthelloOthelloTNPPSet 0Insert1Search2Insert3Set 1FPFilterFilter01OthelloOthelloF.Query1O.Query2Not revokedNot revoked0Revoked! Do not trust1Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1122Let ε be the false positive rate of the F in the first layer, then
the expectation of the number of false positives of F is ε |N |. Since
Othello costs 2.33 bits per key, O needs 2.33(ε |N | + |P|).
Meanwhile, let the memory cost of the first layer Filter F be
Mf , such that the expected false positive rate of F is no greater
than ε. According to the recent implementation of Cuckoo filters
[36],F produces a false positive result when the fingerprint of a
negative key collides with at least one stored fingerprint in the two
candidate buckets, with each bucket containing b entries. Therefore,
the upper bound of the probability of a false positive fingerprint
collision is 1 − (1 − 1/2f )2b ≈ 2b/2f , where f is the number of bits
of the fingerprint. Hence, ε ≥ 2b/2f , and we get
f ≥(cid:6)log2(2b/ε)(cid:7) =(cid:6)log2(1/ε) + log2(b) + 1(cid:7) .
(1)
Then, the amortized space for each positive key stored in the filter
is f /α, where α is the load factor of the Cuckoo hashing table. Thus,
if we use the (2,4)-Cuckoo hashing table in F, and the expected load
factor rate of 0.95 to initialize the Cuckoo Filter (which is a common
setting for the filters to guarantee the success rate of insertion and
efficiency of query), the amortized space for each positive key in
F is (log2(1/ε) + 3)/0.95 [12, 36]. In addition, the Cuckoo Filter
implemented with the semi-sorting trick [12] can further save one
bit per fingerprint. Hence, the total cost of F with semi-sorting
implementation is |P| (log2(1/ε) + 2)/0.95.
Let r = |N |/|P|. In total, DASS uses M bits where
M =(cid:0)(cid:0)log2 (1/ε) + 2(cid:1) /0.95 + 2.33εr + 2.33(cid:1) |P|
filter to be(cid:6)3.6 + log2 r(cid:7) bits according to Eq. 1.
(2)
Since |P| and r are constant for the given certificate sets, we can
minimize the total memory cost by letting ∂M
= 0. Hence, M is
∂ε
and Mmin = (1.05 log2 r + 6.604) |P|.
minimized when ε ≈ 0.652
r
The result further instructs us to set the fingerprints of the Cuckoo
Compared to the memory cost of Othello, 2.33(|N | + |P|) =
Θ(r|P|), DASS significantly reduces the memory cost to Θ(|P| log r).
The optimal filter cascade used in CRLite [19] costs |P|(1.44 log2 r +
4.2) bits, which is similar to DASS. But CRLite does not support
in-place incremental updates.
5 PRACTICAL DESIGNS OF TINYCR
We present the detailed design considerations of TinyCR. The
TinyCR system contains two programs: the tracker running on the
IDM server and the verifier running on the devices. The tracker is
responsible for receiving new certificates and revocations from the
CAs, constructing DASS, and sending the DASS update messages
to devices. The verifier is the compact DASS data structure running
on the IoT devices to support CR checking. This section discusses
how the tracker and verifier should execute and communicate.
5.1 Updates of Cuckoo Filter and Othello
Cuckoo filter supports key addition to and deletion from S by
calling F .Insert(k) and F .Delete(k) respectively. Both functions
cost constant time on average [12]. Othello supports key addition,
deletion, and value flipping. Adding a key k to set 1 is by calling
O.Insert(k, 1), indicating the value of k is 1. Adding a key k to
set 0 is by calling O.Insert(k, 0), indicating the value of k is 0.
Deletion and value flipping is by O.Delete(k) and O.Flip(k). All
these functions cost constant time on average [37]. Due to space
limit, we include details of these functions in Appendix A.2.
However, it is important to note that insertion and deletion of
keys in Cuckoo Filters would impact the distribution of the potential
false positive keys in the whole key space. More precisely, inserting
a new fingerprint into the Cuckoo hash table would create a set of
new potential false positive keys that match the fingerprint stored
in the corresponding bucket. Similarly, deleting a fingerprint from
the table would eliminate a fraction of potential false positive keys.
For simplicity of the design description, we temporarily ignore this
issue in Sec. 5.2. We then look back and discuss the solution to
address this issue in Sec. 5.3.
5.2 Updating DASS on the Tracker
On-device DASS needs to be updated when 1) a new certificate is
issued by CAs, 2) a certificate is revoked by CAs, 3) a certificate
is expired, or 4) in rare cases CA un-revokes a revoked certificate.
All these situations can be addressed by the following three update
functions on the tracker.
• Insertion: adding a certificate to N or P (very rare cases).
• Value Flipping: moving a certificate from P to N (very rare
• Deletion: removing a certificate from P or N .
For each update, the tracker will compute the delta message, in-
cluding only the bit positions that need to change for on-device
DASS. Using the delta message instead of the complete DASS sig-
nificantly saves bandwidth cost.
cases) or from N to P.
Insertion. When a device joins the network with a new cer-
5.2.1
tificate, this information should be immediately reflected in DASS.
Otherwise other devices may reject this certificate if DASS returns
1. In rare cases, the CA may also revoke a certificate before it is
actually installed on any device.
Let k be the new certificate. If k is added to the positive set P,
according to the design, k should first be inserted to the filter F and
then inserted to the Othello O in the second layer with its corre-
sponding value O.Query(k′) == 1. On the contrary, if k is inserted
to the negative set N , we can check whether F tests it as positive.
If F .Query(k) == 0, then the original DASS classifies k correctly
and no updating is required. Otherwise, k′ is a false positive and
should be inserted to O with O.query(k) == 0. Both F .Insert(k)
and O.Insert(k, v) take O(1) time to complete in average.
5.2.2 Value Flipping. When a valid certificate is revoked by the
CA if, for example, the device is compromised by an attacker, the
revocation status of this key should be updated from 0 to 1 in DASS.
In another case, the CA may also want to un-revoke a revoked
certificate, implying the revocation status should be updated from 1
to 0. In both cases, all devices in the network should be noticed with
the updating information to avoid abuse of the revoked certificates
or mistakenly rejecting a legitimate one.
Suppose a key k is moved from N to P. The tracker first checks
whether k is considered as a (false) positive key by the filter, then
inserts k to the filter F. If k is a false positive, k has already been
stored in the second layer O. In this case, the tracker needs to
execute O.Flip(k) to change the stored value of k. Otherwise, the
tracker inserts k to O with corresponding value 1 by O.Insert(k, 1).
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1123Figure 5: TN-indexing table and FP-indexing table
In another value flipping case, k is moved from P to N . In such
case, k should have been already inserted in both F and O. There-
fore, to update the DASS, the first layer filter F first removes k’s
fingerprint from its cuckoo hashing table and then check whether
k would be recognized as a false positive key after removal. If k is
not a false positive, it should be deleted from O. Otherwise, O flips
the value of k using O.Flip(k).
5.2.3 Deletion. Certificates may expire. Although the removal of
these certificates from DASS is not necessary – the expired certifi-
cates are rejected in early steps – it helps to maintain the DASS
compact. DASS has to be rebuilt when it is too full to insert new
certificates, which would cost considerable computation resources
and network bandwidth. Hence, removing expired certificates can
avoid unnecessary rebuilds.
Let k be the key that should be removed from either P or N . If
k ∈ P, both of the two layers need to remove k by calling their
delete functions. Otherwise if k ∈ N , we need check whether k is a
false positive for the first layer F. If it is, then the second layer O
needs to delete it. Otherwise, neither F nor O store the information
k, thus no operation is required.
5.3 Handling Inconsistency of Updating
All above updating algorithms assume the false positive set of the
first layer filter for the given certificate set remains stable. However,
after inserting or deleting a key from the filter, the assumption may
no longer hold, because the fingerprint added or removed from
the cuckoo filter would increase or decrease the distribution of
potential false positive keys.
If a former TN (true negative) key becomes a FP (false positive)
key after an insertion, the key should be recorded in the second layer
O, such that the key can be correctly queried. Similarly, if a former
FP key becomes a TN key after a deletion, then the key needs to
be removed from O. Although the correction process is simple, the
detection of these influenced keys from the entire negative key set
is challenging. A naive solution is thoroughly checking the negative
key set with the updated cuckoo filter to find the influenced keys.
However, this solution is extremely time-consuming as the negative
key set is usually big, causing O(|N |) rather than O(1) updating
cost in the worst case.
In TinyCR tracker, we propose to solve the problem by using two
additional indexing hash tables that have similar number of buckets
as the cuckoo filter to index the sets of the potentially influenced
keys for every fingerprint in the cuckoo filter.
Specifically, at the construction time of DASS, when we iterate
through the entire negative set N to find the FP sets by querying
F, we insert the TN keys into the “TN-indexing" hash table and
FP keys into the “FP-indexing" hash table at the exact two bucket
positions that are queried in F to lookup the fingerprint (as shown
in Fig 5). Therefore, when a fingerprint is inserted into a particular
bucket in F at the updating time, only the TN keys stored at the
same bucket positions of the TN-indexing table would be potentially
influenced by the insertion. Hence, only these TN keys need to be
queried with F again to check whether they become FP keys after
the insertion. Then those new FP keys are inserted to the O in the
second Othello layer. Similarly, when a fingerprint is deleted, only
the FP keys at the corresponding buckets in the FP-indexing table
need to be checked again. Then the keys that become TN keys after
the deletion are removed from O.
Since |N | = r|P| and the number of buckets in F is O(|P|), the
amortized length of each bucket in FP-indexing and NP-indexing is
O(r). Thus, the updating cost decrease from O(|N |) to O(r) in worst
case with this indexing strategy. Meanwhile, the total size of the
indexing tables is O(|N |). Since these tables are maintained by
the server and not related to the devices, the cost is afford-
able. By properly handling the inconsistency issues, the tracker is
able to create a perfect DASS that yields zero query error.
5.4 Updates on Devices
Though the TinyCR tracker requires O(|N | + |P|) extra space to
maintain the certificates, each on-device verifier requires much less
memory and computational resources to support updating. In the
verifier, only the cuckoo filter and Othello are stored in memory,
costing approximately (1.05 log2 r + 6.604) |P| bits. The inference
of DASS in verifier can be simply accomplished by at most four
hashing and memory read operations.
In addition, the DASS verifier can also be synchronized with
delta messages. When an update is necessary, the tracker sends a
delta message patch to all devices. The delta message includes the
certificate digest and the indexes of the bits that need to be changed
in O’s hash tables, and is small in size (9 to 150 bytes on average for
100 million certificates). Note that the indexes of the flipped bits in
O are tracked as an intermediate result while updating the Othello
(see Appendix A.2.2). Thus, there is no extra cost to compute the
indexes after the update is done. Our experiment also shows the
raw delta message does not scale with the size of the certificate sets.
Then the tracker signs the delta message and attach the signature
to the updating patch data to guarantee the integrity. This updating
strategy differs from other CR checking synchronization methods
that use static data structures, such as CRLite [19], which needs to
rebuild the entire data structure for every update (if correctness
of verifier is obligatory at any time) and sends it to all clients. The
raw delta message of CRLite is much larger than that of DASS.
In our design, the raw delta-msg is encoded as Fig 6. Specifically,
the updating instruction for F uses only 9 bytes, including 1 byte
for the operation type (insert, delete or do nothing) and 8 bytes
for the 64-bits digest of the certificate. Then the F in the verifier
DASS can insert or delete the certificate through the corresponding
operations of the local Cuckoo filter.
Meanwhile, the updating instruction for the O is a list of 32-bit
integers representing the bucket positions at which the stored value
should be flipped. For every position index pos, if pos ≤ |Ta|, we flip
𝒇𝒑𝒚(cid:2869)(cid:2870)cuckoo filter⋯𝒚⋯⋯⋯⋯⋯FP‐Indexing(cid:2869)(cid:2870)⋯𝒛⋯⋯⋯⋯𝒛⋯TN‐Indexing:a FP keya TN keySession 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1124only send one single aggregated delta message in per-hour, and