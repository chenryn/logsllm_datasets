## 简介
这个漏洞源于在玄武实验室的一个漏洞信息中[链接](https://medium.com/tenable-techblog/bypassing-authentication-on-arcadyan-routers-with-cve-2021-20090-and-rooting-some-buffalo-ea1dd30980c2)
不久前其实看过Buffalo这个品牌的设备，看的时候对其中一些机理就感觉到很奇怪，例如和文章中引起作者好奇的没有cookie这个字段的问题一样，在我看过的设备里其实也没有这个字段，当时也感觉很奇怪。这篇文章作者分析清楚了整个逻辑，整体的挖掘利用流程也确实令人拍手叫绝。
这个设备的官方下载固件包是加密的，设备价格太贵，我到底也没有成功获取作者提到的固件二进制细节进行分析，但是作者的整体流程着实值得好好学习参考，根据[链接](https://www.tenable.com/security/research/tra-2021-13),ASUS的DSL-AC68VG这个设备的5.00.08 build272固件也受影响，因此尝试基于这个设备固件开始了一些分析。
由于作者的分析过程很值得好好学习一下，因此在本篇文章中，我会首先尝试将作者的分析过程半翻译半带自己的思考叙述一遍，然后在简单描述一下自己针对ASUS的DSL-AC68VG这个设备的分析流程，自己针对ASUS的DSL-AC68VG这个设备分析过程中取了一些巧（偷了一些懒），因此主要的二进制分析流程还是放在针对作者分析过程的理解中。
## 作者针对Buffalo WSR-2533DHP3研究流程
### 通过uart获取文件系统
作者获取设备文件系统的方法是买了一个设备，然后通过焊接出ttl端口，进而获得了root shell的方法，最终拿到了设备文件系统。
这个过程在IoT研究中其实是很常规的，通过硬件接线的方法获取设备文件系统也是处理加密固件的常见方法之一。
大概过程就是拆解开设备面板，找到并明确ttl对应的gnd, vcc, tx,
rx几个接口，使用usb转ttl接线就可以获取设备启动信息，在部分设备中直接就可以获取root shell。
这个过程我个人是习惯查看官方文档或者使用万用表来判定几个接口定义的，在文章中，作者使用了[JTAGulator](http://www.grandideastudio.com/jtagulator/)这样一个工具，使用这个工具的好处是不仅可以明确几个接口定义，还可以通过遍历的方法快速拿到波特率的值。
### 明确Httpd 和 Web 界面身份验证
同样是常规思路，作者使用ghidra开始你想httpd这个二进制，作者在程序中找到了 **evaluate_access()** 这个函数。
这一步我猜作者是通过函数的名字以及函数中printf函数带的字符串，猜 **evaluate_access()** 这个函数是用来做访问限制的函数
其中函数 **FUN_0041f9d0()**
是用来判定当前发出请求的IP是否与有效登陆的IP相匹配，然后查看evaluate_access()这个函数的引用，发现被函数
**process_request()** 调用，
可以看到45-48行，这个if是用来判定是否通过认证，因为逻辑语句中间是OR，因此意味着只要 **bypass_check(__dest)**
的结果不为0，即可成功跳过认证，进入 **process_get()** 或者 **process_post()** 的流程。
因此下一步来看看 **bypass_check(__dest)** 的逻辑：
### 使用 bypass_check() 绕过检查
右图可以看到bypass_list的具体列表，包括/login.html, /loginerror.html， /js/, /css/,
/imaegs/等，这是有道理的，因为即使是未经身份验证的用户也需要能够访问这些
url。在比较时使用了strncasecmp,长度为bypass_list中字段的长度，这意味着，我们在访问`http://router/images/someimage.png`这个链接时，不需要认证，所以我们可以考虑，是否尝试`**/images/../**`这样的url是否能绕过认证呢？通过访问`**/images/..%2finfo.html**`这个url,成功的访问结果证明了猜想可行。
在后面，作者还通过一个错误验证了Referer
字段必须被正确的设置，如果设置成`http://192.168.11.1/images/..%2finfo.html`也是会有错误的，我感觉这个错误其实不是很重要，所以不展开叙述了，总之在正确的设置头参数后，访问`/images/..%2finfo.html`这个url，页面会正常返回：
目前为止，已经可以完成认证前的目录便利，但是发现在请求的时候
在请求中，请求url中还需要有_tn以及 _t两个参数正确设置才能正常访问，其实图里还有一个\_
,但是作者没有提，我猜这个参数存在与否可能与是否能正常访问页面没有关系。
我们通过路径遍历访问的 info.html 页面正在使用 /cgi/ 目录下的 .js 文件中的数据填充其信息表，并传递两个参数。一个是日期时间戳 (
**_t** )，另一个是我们试图找出的 **httoken** 。我们可以看到用于从 /cgi/ 获取信息的链接是使用 **URLToken()**
函数生成的，该函数使用函数 **get_token()** 设置 **httoken** （在本例中为参数 **_tn** **）** ，但
**get_token()** 没有似乎在页面上使用的任何脚本中的任何位置定义。
在 **URLToken()** 定义的正上方，可以看到定义了enkripsi这个奇怪的字符串，通过查找这个字符串名，
    // decode way
    var head = document.getElementsByTagName("head")[0] || document.documentElement;
    var script = document.createElement("script");
    script.type="text/javascript";
    teks="";teksasli="";
    enkripsi=ArcBase.decode(enkripsi);
    var panjang;panjang=enkripsi.length;for (i=0;i