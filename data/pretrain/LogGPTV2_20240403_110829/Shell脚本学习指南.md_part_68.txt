每夜更新GN的快速查找数据库
类码上述操作，但将PATH传递子
updatedb的子进程
任何出现在标准错误输出或标准输出上的数据都会寄给你，或是在其他实例中，会寄到
MAILTO变量的值所指定的用户。实务上，你通常会比较倾向于将输出重导至一个日志
文件，并累积连续执行的记录。crontab实例记录会有点类似这样：
55 23 • + +$HOME/bin/da11y >> $HOME/1ogs/daily.1og 2>61
此类日志文件会持续成长，所以你应该适时地清除它，你可以使用编辑器别除此日志文
件的前半段，也可以使用tail-nn取出最后的n行：
mv daily.1og daily.tmp
切换至日志文件所在目录
tai1 -n 500 daily.tmp > dai1y-1og
重薪命名日志文件
回复最后的500行
rm daily.tmp
舍弃旧的日志文件
在做这个操作时，只要确认日志文件当时未正在进行更新操作即可。很明显地，对于这
个必须重复不断执行的进程，我们可以，也应该这么做，将它委托给另一个crontab实
例记录。
累积的日志文件另一个好用的替代方案就是加上时间戳记的文件，让每个cron工作日
志都拥有一个文件。以每日的日志来说，我们可以使用crontab项目如下：
9 5oT*P\*8+p.e/ot/s SHCME/ .crontab.*hostnane
储存现行crontab
crontab. -r
删除crontab
这么一来，之后你可以如此这般的回复：
crontab SHoME/.crontab.hostname目复铺存的crontab
由于这里假设一个主机里只有一个crontab文件，所以我们将主机名称包括在被储存
的文件名称里，这么一来便能马上识别出它是属于哪台主机的文件。
crontab会以命令行上给定的文件置换任何已存在的调度，提供的语法必须正确无误：
否则将保留旧的调度。
就像at命令那样，系统目录里也有cron.allow与cron.deny文件，用以控制是否允
许cron工作，以及谁可以执行它们。如果你发现你不能使用这个好用的工具，请向系
统管理员反映。
13.7
7/proc文件系统
有些UNIX版本，借用了贝尔实验室所开发的想法：/proc文件系统。与其通过无数的
系统调用不断地更新，以提供内核数据的访问，不如通过一个特殊文件设备，访问内核
里的数据，也就是在/proc目录内实例一个标准的文件系统界面。每个执行中的进程都
会在那里拥有一个子目录，以进程编号命名，且在每个子目录里面是各式各样小文件的
内核数据。这个文件系统的内容，可参考proc（4）（大部分系统）或proc（5）（GNU/Linux）
的使用手册。
GNU/Linux开发了比UNIX各类版本还多的此想法，且它的ps命令更能取得所有需要
的进程数据，只要读取/proc下的文件即可，你可通过系统调用追踪strace-e
trace=filepsaux的执行，来验证此说法。
www.TopSage.com
---
## Page 401
进程
389
下面的范例是一个文字编辑器通信期的进程文件：
S 1s/proe/16521
为进程16521列出proc 文件
cndLine
environ
saps mounts stat status
fd
meth
root statm
cwd
exe
S 1s -1/proc/16521
以元长式列表，再列出一次
total 0
------
1 jones
deve1
1rexrwxrvx
1jones
0 0ct 28 11:38 cnd1ine
deve1
0 0ct 28 11:38 cwd -> /bome/jones
1 Jones
deve1
0 0ct 28 11:38 environ
1rocwxrvx
1 Jones
deve1
10 0ct 28 11:38 fd
0 0ct 28 11:38 exe -> /uer/bin/vi
dr-x-
2 jones
deve1
-r------
Jones
deve1
0 0ct 28 11:38 maps
1 jones
deve1
10 0ct 28 11:38 mes
1roxrwxrvx
-------
1 jones
1 jones
Geve1
deve1
0 0ct 28 11:38 mount8
1 jones
0 0ct 28 11:38 root -> /
---r----
deve1
0 0ct 28 11:38 stat
-r--r-----
·1 Jone8
1 jones
devel 0 0ct 28 11:38 status
: 0° 0et 28 11:38 statm
-------
请注意，这里所有的文件似平都是空的。但事实上，它们都包含了设备驱动程序在被读
取时所提供的数据：它们从未真的存在于储存设备里，它们的时戳也是有疑问的：在
GNU/Linux与OSF/1系统下，它们反映的是目前时间，但在IRIX与Solaris里，它们显
示的却是每个进程起始的时间。
/proc文件的大小为零，造成部分工具程序的混淆，像是scp与tar。你可能得先试着
使用cp，将它们复制到别处的一般文件里，
现在我们来看看其中一个文件：
$ cat -v /proe/16521/cnd1lne
v1~0+273*9ch13.xm19
显示进程命令行
-V选项将无法打印的字符以脱字符号注释来显示，~9所表示的就是NUL字符。显然
地，此文件包含一连串以NUL终结的字符串，还有命令行里的参数。
除了特定进程数据之外，/proc还包括其他有用的文件：
g，+6-0.A-xxd
apm bus cmdline cpuinfo devices dna driver execdcmains fb
partitions pci scsi self slabinfo speakup stat swaps sya syavipc
kayms loadavg locks mdstat meminfo misc modules mounts mtrr net
tty uptine version
这是其中一个的起始：
$ bead -n 5 /pzoc/meminfo
显示内存信息的前5.行
www.TopSage.com
---
## Page 402
390
第13章
total:
:pesn.
free:.sbared:-buffers:cached:
129228600 116523008 12705792
02084864 59027456
Swap: 2146787328 28037120 2118750208
MemTotal:
126200 kB
MemFree 1
12408 kB
通过文件方式取得进程数据是很方便的，这也使得就算缺乏系统调用界面，数据也很容
易通过程序语言所撰写的程序来取得。例如，Shell脚本可以从/proc/*info文件收集
CPU、内存，与储存设备在硬体方面的细节，前提当然是你的系统环境下有提供这样的
文件，然后再产生类似sysinfo（注5）命令所作的华丽报告，然而，这些文件缺乏标
准化的内容，使得产生统一的报告更为困难。
13.8小结
在本章，我们呈现了：如何建立、列出、控制、调度与删除进程，还有如何将信号传送
给它，以及如何追踪它们的系统调用。由于进程执行于私有地址空间中，因此它们不会
被此干扰，也不需要特别花力气写程序让它们在同一时间执行。
进程都可描捉所有的信号（只有两个例外），它们要不就是忽略它，要不就是响应期待
的操作。无法捕提的两个信号是KILL与STOP，都是为了确保如果有行为不当的进程，
都可马上杀除或暂停之。需要执行清理操作的程序，像是储存活动中的文件、重设终端
机模式，或是删除锁定，通常都会要描捉一般信号：否则，绝大多数无法捕提的信号，
都会导致进程中止。有了traD命令，将简单的信号处理加人She目脚本里就更容易了。
最后，我们检查各种不同的延迟与控制进程执行的机制，在这里面，sleep为撰写Shell
脚本时最好用的一个，不过其他命令还是各有其不可或缺的用途。
5:
可在hp://www.magnicomp:com/sysinfo/取得。
www.TopSage.com
---
## Page 403
To第14章
.com
Shell可移植性议题与扩展
在POSIX下定义的Shell语言，比原始的V7Bourne Shell规模大很多，但又比ksh93
与bash所实例的语言小，这两种语言是BourneShell扩展版本里，最广泛使用的。
要编写一个耐用的脚本使用到Shell语言的所有扩展的优势，可能就会用到这两个Shell
的其中一个，甚至是两个并用。因此，了解它们的共通功能及差异，绝对是很重要的。
长久下来，bash取用许多ksh93里的扩展，但并非全部。所以它们有相当多功能是重
叠的，却也有很多的地方不同，本章将大致描述bash与ksh93的差异以及它们共通的
扩展，与POSIXShell所提供的功能。
注意：很多在这里提供的功能，都只有ksh93近期版本才能使用。一些商用UNIX系统仍使用旧
版本的ksh93，特别是dtksh（desktop Korm Shell，/usr/dt/bin/dtksh）这个程序，
就没有更新的功能可用，最好的方式应该是下载当前kah93的原始码并从头开始建置，详
见14.4节，
14.1迷思
下面是须特别留意的几个项目否
存储Shell状态
例14-1告诉你如何存储Shel状态至文件中。但POSIX标准里有个失察之处：未
定义存储函数定义的方式供日后回复之用！下面就是要告诉你，如何使用bash与
ksh93完成此任务。
391
www.TopSage.com
---
## Page 404
392
第14章
例14-1：存储bash与ksh93的Shell状态，包拾函数
set +0
选项设置
ttnu/aop/ /tnp/Shel1.state
typeset -f
数定文（非POSIX）
要注意的一点是：bash与ksh93定义函数时使用的语法不同，所以如果你想在其
中一个Shell输出状态，然后在另一个Shell里回复时，必须小心处理。
echo不具可移植性
在2.5.3节里，曾说过echo命令只有最简单的用法可使用在必须具可移植性的脚
本上，且其各种选项与转义符有些具可移植性有些又没有（尽管它的确在POSIX
标准下）。
在ksh93下，内置的echo版本会试图模仿SPATH下所找到的外部版本echo之
行为模式。此操作背后的理由就是为了兼容性：在所有UNIX系统上，当KornShell
执行BourneShell脚本时，它应当遵循与原Bourne Shell相同的行为模式。
另一方面，bash下内置版本的行为模式在各UNIX系统间都是相同的。原理根据
是一致性：bash脚本应有相同的行为模式，不应该因为执行于不同的UNIX系统
而有所差异。因此为了完整的可移植性，echo应避免使用，printf仍是最好的选
择。
OPTIND可为本地端变量
在6.4.4节中我们提到过getopts命令、OPTIND与OPTARGS变量，ksh93提供了
定义函数的本地端版本的OPTIND函数关键字。它的想法是：函数可以像个别的脚
本一样使用getopts，以等同于脚本的方式处理它们的参数，而不影响其父选项的
处理。
S{var:?message)可能不存在
$（variable:7message）变量展开会检查是否variable已设置。如果否，则Shell
显示message信息并离开。但如果Shell是在交互模式下，行为模式就不同了，盲
目地离开对于交互模式Shell而言并非总是正确的，因为可能会让用户注销。下面
的脚本名为x，sh：
echo ${somevar: ?somevar is not set]
echo sti11 running
针对上述脚本，bash与ksh93的行为模式如表14-1所示，