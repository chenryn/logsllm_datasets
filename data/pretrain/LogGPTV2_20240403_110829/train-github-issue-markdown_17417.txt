This complies ok:
    struct A(int);
    impl A {
        unsafe fn a(&self) -> int { **self }
    }
    trait B {
        unsafe fn b(&self) -> int;
    }
    impl B for A {
        unsafe fn b(&self) -> int { **self }
    }
    fn main() {
        let _ = A(1).a();
        let _ = A(1).b();
        unsafe {
            let _ = A(1).a();
            let _ = A(1).b();
        }
    }
With this warning:
    unsafe-methods.rs:19:4: 22:5 warning: unnecessary `unsafe` block [-W unused-unsafe (default)]
    unsafe-methods.rs:19     unsafe {
    unsafe-methods.rs:20         let _ = A(1).a();
    unsafe-methods.rs:21         let _ = A(1).b();
    unsafe-methods.rs:22     }
Yikes.