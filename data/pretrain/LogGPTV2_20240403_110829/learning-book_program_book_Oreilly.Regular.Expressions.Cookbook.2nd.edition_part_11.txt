of the altermatives is again irrelevant.
Recipe 2.12 explains the best solution: 
SeeAlso
Recipe 2.9 explains how to group parts of a regex. You need to use a group if you want
to place several altermatives in the middle of a regex.
2.9Group andCapturePartsof theMatch
Problem
Improve the regular expression for matching Mary, Zane, or Sue by forcing the match to
be a whole word. Use grouping to achieve this with one pair of word boundaries for
the whole regex, instead of one pair for each alternative.
2.9 Group and Capture Parts of the Match | 63
---
## Page 80
Create a regular expression that matches any date in yyyy-mm-dd format, and sepa-
rately captures the year, month, and day. The goal is to make it easy to work with these
separate values in the code that processes the match. You can assume all dates in the
subject text to be valid. The regular expression does not have to exclude things like
9999-99-99, as these won’t occur in the subject text at all.
Solution
b(Mary |Jane |Sue)\b
Regexoptions: None
Regexflaver: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
b(\d\\\d)- (\)-(\\d)\b
Regex options: None
Regexflaver: .NET, Java, JavaScripr, PCRE, Perl, Python, Ruby
Discussion
The altermation operator, explained in the previous section, has the lowest precedence
of all regex operators. If you try ^bMary| ane |Sue^b>, the three alternatives are bMary,
Jane>, and :Sue\b>. This regex matches Jane in Her name is Janet.
If you want something in your regex to be excluded from the altermation, you have to
group the altemarives. Grouping is done with parentheses. They have the highest
precedence of all regex operators, just as in most programming languages. , and , succeeds. The engine exits the group. All that is
left is ,
This regular expression matches a date in yyyy-mm-dd format. The regex b\d\,d\d\d
\\d-√d\d\b) does exactly the same. Because this regular expression does not use any
altermation or repetition, the grouping function of the parentheses is not needed. But
the capture function is very handy.
The regex \b(\d\d\d\d)-(\d\d) - (\d\d)\b) has three capturing groups. Groups are
numbered by counting opening parentheses from left to right. (\d\d\d\d) is group
‘ 1aqunu dnou8 s! (pp)> puoss a1 7 1aqunu s! ((p\p\) I aqunu
64 |  Chapter 2: Basic Regular Expresion Skills
---
## Page 81
During the matching process, when the regular expression engine exits the group upon
reaching the closing parenthesis, it stores the part of the text matched by the capturing
group. When our regex matches 200805-24, 2008 is stored in the first capture, 05 in the
second capture, and 24 in the third capture.
There are three ways you can use the captured text. Recipe 2.10 in this chapter explains
how you can match the captured text again within the same regex match
Recipe 2.21 shows how to insert the captured text into the replacement text when doing
a search-and-replace. Recipe 3.9 in the next chapter describes how your application
can use the parts of the regex match.
Variations
Noncapturing groups
In the regex \b(Mary |Jane |Sue)\b>, we need the parentheses for grouping only. Instead
:dnor3 Buumdeouou e asn pjnoo am °dnou8 Buundeo e Susn go
b(?:Mary| Jane|Sue)\b
Regexoptions: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
The thre characters (?:) open the noncapruring group. The parenthesis )> closes it.
The noncapturing group provides the same grouping functionality, but does not cap-
ture anything.
When counting opening parentheses of capruring groups to determine their numbers,
do not count the parenthesis of the noncapruring group. This is the main benefit of
noncapturing groups: you can add them to an existing regex without upsetting the
references to numbered capruring groups.
backreference to a particular group (Recipe 2.10), reinsert it into the replacement text
(Recipe 2.21), orretrieve its match in source code (Recipe 3.9), a capturing group adds
-end uI dnou3 Suumdeouou  Busn q aeuuo ues nox eq peouaaso iessoouun
tice, you'll hardly notice the performance difference, unless you’re using the regex in a
tight loop and/or on lots of data.
Group with mode modifiers
In the "Case-insensitive matching? variation of Recipe 2.1, we explain that .NET,
Java, PCRE, Perl, and Ruby support local mode modifiers, using the mode toggles
sensitive (?1)caseless(?-1)sensitive>. Although this syntax also involves parenthe-
ses, a toggle such as (?i) does not involve any grouping.
Instead of using toggles, you can specify mode modifiers in a noncapruring group:
b(?1 :Mary |Jane|Sue)b
Regex options: None
2.9 Group and Capture Parts of the Match | 65
---
## Page 82
Regexflavers: .NET, Java, PCRE, Perl, Ruby
sensitive(?i:caseless)sensitive
Regex options: None
Regexflavers: .NET, Java, PCRE, Perl, Ruby
Adding mode modifiers to a noncapruring group sets that mode for the part of the
regular expression inside the group. The previous sertings are restored at the closing
parenthesis. Since case sensitivity is the default, only the part of the regex inside
(?1:---)
is case insensitive.
You can combine multiple modifiers. . That is either an octal escape or an error. We don’t
use octal escapes in this book at all, because the ^xFF: hexadecimal
escapes are much easier to understand.
When the regular expression  matches 2008, storing 08 for the first (and only) cap-
turing group. Next, the hyphen matches itself. The backreference, which tries to match
08>, fails against 05.
Since there are no other altermatives in the regular expression, the engine gives up the
match attempt. This involves clearing all the capturing groups. When the engine tries
again, starting at the first o in the subject,  holds no text at all.
Still processing 2008-05 -24 2007-07-07, the next time the group captures something is
when . This succeeds, as do the next hyphen, backre-
ference, and word boundary. 2007-07-07 has been found.
2.10 Math Previously Matched Text Again | 67
---
## Page 84
Because the regex engine proceeds from start to end, you should put the capturing
parentheses before the backreference. The regular expressions \b\d\d\1-(\d\d)-{1)
and  can match 12--34-
See Also
Recipe 2.9 explains the capturing groups that backreferences refer to.
Recipe 2.11 explains named capturing groups and named backreferences. Naming the
groups and backreferences in your regex makes the regex easier to read and maintain.
Recipe 2.21 explains how to make the replacement text reinsert text matched by a
capturing group when doing a search-and-replace.
Recipe 3.9 explains how to retrieve the text matched by a capruring group in procedural
code.
Recipes 5.8, 5.9, and 7.11 show how you can solve some real-world problems using
backreferences.
2.11 Capture and Name Parts of theMatch
Problem
Create a regularexpressionthatmatches any datein yy-mm-ddformat and separately
captures the year, month, and day. The goal is to make it easy to work with these
separate values in the code that processes the match. Contribute to this goal by as-
signing the descriptive names °year,” *month,” and “day* to the captured text.
68 |  Chapter 2: Basic Regular Expression Skills
---
## Page 85
Create another regular expression that matches *magical" dates in yyyy-mm-dd format.
A date is magical if the year minus the century, the month, and the day of the month
are all the same numbers. For example, 2008-08-08 is a magical date. Capture the
magical number (08 in the example), and label it *magic.*
You can assume all dates in the subject text to be valid. The regular expressions don't
have to exclude things like 9999-99-99, because these won’t occur in the subject text.
Solution
Named capture
\b(?\d\d\d\d) - (?\d\d) - (?\d\d)\b
Regexoptions: None
Regexflarer: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
\b(?′year′\d\d\d\d)-(?'month′\d\d)- (?′day′\d\d)\b
Regexoptions: None
Regexflarer: .NET, PCRE 7, Perl 5.10, Ruby 1.9
\b(?P\d\d\d\d)- (?P\d\d)- (?P\d\d)\b
Regex options: None
Regexflavers: PCRE 4 and later, Perl 5.10, Python
Named backreferences
\b\d\d(?\d\d)-\k-\k\b
Regex options: None
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
\,eu,x\-,8ew,x\(pp,ew,)p\p\q
Regex options: None
Regexflavers: .NET, PCRE 7, Perl 5.10, Ruby 1.9
\bd\d(?P\d\,d) - (?P=magic) -(?P=mag1c)\b
Regex options: None
Regexflavers: PCRE 4 and later, Perl 5.10, Python
Discussion
Named capture
Recipes 2.9 and 2. 10 illustrate capturing groups and backreferences. To be more precise:
these recipes use numbered capruring groups and numbered backreferences. Each
group automatically gets a number, which you use for the backreference.
Modern regex flavorsupport named capturing groups in addition to numbered groups.
The only difference between named and numbered groups is your ability to assign a
descriptive name, instead of being stuck with automatic numbers. Named groups make
2.11 Capture and Name Parts of the Math | 69
---
## Page 86
your regular expression more readable and easier to maintain. Inserting a capturing
group into an existing regex can change the numbers assigned to all the capturing
groups. Names that you assign remain the same.
Python was the first regular expression flavor to support named capture. It uses the
syntax regex). The name must consist of word characters matched by ^w),.
(?P> is the group’s opening bracket, and > is the
group's opening bracket, and ) is the closing bracket.
The angle brackets in the named capture syntax are annoying when you're coding in
XML, or writing this book in DocBook XML. That's the reason for .NET's altermate
named capture syntax: > and \k'name′ . The rwo variants are identical in func-
tionality, and you can freely mix them. A named group created with the bracket syntax
can be referenced with the quote syntax, and vice versa. Perl 5.10, PCRE 7, and Ruby
1.9 also support the NET syntax for named backreferences. Java 7 and XRegExp sup-
port only the variant using angle brackets.
We strongly recommend you don't mix named andnumbered groups in the same regex.
Different flavors follow different rules for numbering unnamed groups that appear
berween named groups. Perl 5.10, Ruby 1.9, Java 7, and XRegExp copied .NET's syn-
tax, but they do not follow .NET's way of numbering named capruring groups or of
mixing numbered capturing groups with named groups. Instead of trying to explain
the differences, we simply recommend not mixing named and numbered groups. Avoid
the confusion and either give all unnamed groups a name or make them noncapturing.