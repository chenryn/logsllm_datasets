always carried out as intended without letting the attacker
modify them.
Assuming that an attacker has complete control over the
system M, a security application that executes in the same
machine with the same privileges as the attacker is unable to
satisfy the above requirements. This is because the attacker
can disable any protection mechanism and have complete
access to the hooks, the application and its dependencies.
By having higher privilege levels than the attacker, a hy-
pervisor based approach can incorporate certain protections
that the attacker cannot disable. Even in this scenario, if
the security application is in the same VM as the attacker,
it is hard to satisfy the third requirement. Since the applica-
tion is running on subsystems controlled by the attacker, the
run-time behavior of these subsystems along with the appli-
cation needs to be protected, which may result in having to
protect a large portion of the kernel. Although systems like
SecVisor [32] may be sufﬁcient to protect the kernel code,
they are not suitable for protecting kernel data. This mo-
tivates our architecture of having the security application
execute in a separate security VM, which is isolated from
the attacker.
2.3 Threat Model and Assumptions
We make the standard assumptions seen in most other
virtualization security architectures [6, 8, 9, 15]. The hy-
pervisor and security VM are part of the trusted computing
base (TCB) and the guest VM is not. Therefore, malicious
code can only affect the guest VM. The hypervisor is ideally
designed to be a small software layer that is both veriﬁable
and secure. The hypervisor ensures isolation between the
security VM and the guest VM, providing protection for se-
curity applications. Note that attacks such as Blue Pill [30]
are not possible because a hypervisor using virtualization
extensions is already installed as part of our architecture.
Similarly, the SubVirt attack [17] is not possible because it
was not designed to handle nested virtualization.
This paper is concerned with the runtime security of soft-
ware placed in the guest VM. In order to focus on this prob-
lem, we also assume that the machine can undergo a secure
boot [3]. Furthermore, we assume that the guest VM un-
dergoes an initialization after boot. This initialization pro-
cedure will start the components, protect them, and provide
for any additional security conﬁguration. After the VM is
initialized, it enters a running state where it is assumed to
be subject to malicious software and other attack attempts.
Our threat model is realistic and assumes that an attacker
can do anything to the guest VM. This includes inserting
malicious code into both application and kernel space.
3 Architecture
We call our architecture Lares after the Roman house-
hold gods that protected the home and family. Lares is a
virtualization-based architecture designed to protect certain
classes of security software that rely on the active monitor-
ing of system events. Its design is based on the following
architectural requirements:
1. Protection of Monitoring Components: The protec-
tion of the monitoring components should follow as
closely as possible the formal requirements established
in Section 2.2 for secure active monitoring.
2. Flexibility in Hook Placement: A security applica-
tion built on top of Lares should have the ﬂexibility to
place hooks in any location in the guest OS’s kernel, at
arbitrarily high abstraction levels.
3. Acceptable Performance Impact: The performance
overhead introduced by Lares should be within accept-
able limits for the uses of most event-driven security
applications, so as not to hurt overall usability and the
performance of other applications.
The ﬁrst architectural requirement for protection does
not enforce complete adherence with the formal require-
ments raised in Section 2.2 due to the difﬁculty of prevent-
ing all possible attacks, as will be discussed in Section 6. It
does, however, signiﬁcantly raise the bar and prevents the
majority of attacks against active monitoring security tools.
The overall structure of the architecture is illustrated in
Figure 2, with components of the TCB represented in gray.
Examples of applications that can beneﬁt from Lares in-
clude anti-virus tools, anti-spyware tools and control ﬂow-
based intrusion detection systems. Other software that re-
quires these types of hooks will also beneﬁt.
3.1 Architecture Summary
There is a fundamental difﬁculty in conciliating protec-
tion and ﬂexibility in hook placement. Flexibility allows
hooks to be placed anywhere inside the untrusted system,
which in a traditional scenario would make them prone to
tampering by intruders with system-wide privileges. Solv-
ing this fundamental conﬂict is Lares’ main contribution. At
a high-level, it does this by splitting the security application
into two VMs and using a special memory protection mech-
anism to guarantee the integrity of the hooks. As shown in
236
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:19 UTC from IEEE Xplore.  Restrictions apply. 
Guest VM
User Processes
Hooks
...
Security VM
Introspection
API
Security
Application
Trampoline
Security Driver
Memory Protector
Hypervisor
Hardware (CPU + virtualization extensions)
Figure 2: High-level view of the Lares architecture and its core components.
Figure 2, Lares includes two VMs: the untrusted guest VM
and a security VM that is part of our TCB.
Since the guest VM is untrusted, software placed inside
it requires special protection. This can be difﬁcult to achieve
if the components are too large or too integrated with the
surrounding OS, so we keep them to the minimum required.
These include the hooks for intercepting events, and a small
specially-crafted trampoline code to pass events signaled
by the hooks to the hypervisor. These components are
self-contained and simple enough that write-protecting their
memory footprint is sufﬁcient to guarantee their correct be-
havior. We add a special mechanism to the hypervisor to
provide these memory protections, along with an inter-VM
communication functionality used for event passing. These
additions, which we have implemented, are small to reduce
the likelihood of introducing bugs into the hypervisor.
The security VM contains the core of the active moni-
toring application, where the processing and decision mak-
ing associated with its functionality is done. Techniques
like memory and disk introspection can be used as part of
this decision making to gather additional information about
events sent from the hooks in the guest VM. After a deci-
sion is made, the security application sends it back to the
guest VM, where the decision is enforced.
As an example scenario, an anti-virus application would
place its signature matching and containment algorithms in
the security VM, whereas its monitoring hooks would go
into the guest VM. These hooks would be triggered when-
ever certain monitored events were executed by the guest
OS, and transmitted to the security VM by the trampoline
with the aid of the hypervisor. The anti-virus’ core engine
would receive these events and use introspection to enrich
them with contextual information, which would then be pro-
cessed by its signature matching algorithms and heuristics.
After reaching a decision, it would be sent back to the guest
VM’s trampoline, where a response measure is carried out,
such as preventing a process from loading or a ﬁle from be-
ing written to disk.
3.2 Guest VM Components
In traditional systems, all applications are run within a
single operating system. The guest VM ﬁlls the same role
as this traditional operating system by running all applica-
tions that are not considered to be part of the TCB. The only
exception is for the hooks and trampoline that are placed in
the guest VM to achieve the active control and monitoring
capabilities provided by Lares. Any application can be run
in the guest VM since it runs a full featured operating sys-
tem. With this in mind, the Lares architecture can be used
to protect a wide variety of systems including servers and
desktop systems.
One of the key capabilities in the Lares architecture is
the ability to insert protected hooks throughout the oper-
ating system running in the guest VM. These hooks can be
jumps placed inside program code, redirections within jump
tables, or any other technique that transfers control of exe-
cution. Hooks are required for any security software that
stops malicious code prior to it doing any damage. This is
because other techniques can only monitor by polling and
are unable to guarantee detection at arbitrary locations in
the code. With the protected hooks, there is a guarantee that
the security software can evaluate an action before allow-
ing it to happen. This guarantee is provided by our memory
protection mechanism, as described in Section 4.4.
When triggered, hooks redirect the system’s control ﬂow
to another guest VM kernel component, the trampoline. The
trampoline is a specially-crafted piece of code that acts as a
bridge between the hooks and the security driver running in
the security VM. It passes arguments from the hooked func-
tion to the hypervisor’s inter-VM communication channel,
which then delivers them to the security domain. The tram-
poline is also responsible for receiving commands from the
security VM to execute actions requested by the security
software. As the rest of the guest OS kernel is untrusted,
the trampoline and the hooks must be protected from tam-
pering. This need imposes several restrictions on the de-
sign and implementation of the trampoline. First, it must
237
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:19 UTC from IEEE Xplore.  Restrictions apply. 
be completely self-contained. This means that its function-
ality must not rely on any kernel functions or global vari-
ables, since these may be compromised. It must also exe-
cute atomically at each round, in order to prevent scenarios
in which race conditions are used to circumvent the moni-
tor. Finally, the trampoline’s usage of data elements must
be completely non-persistent (i.e., not rely on data that was
generated in previous hooks activations). As our protection
mechanism currently does not support the protection of data
regions, not following this requirement would make the us-
age of such data prone to tampering.
3.3 Security VM Components
The security VM contains the back-end components of
our architecture. These include the security application, the
security driver, and an introspection API. The security ap-
plication is where the decision-making functionality of the
monitoring solution is implemented. It can be any software
component that makes use of Lares, like an anti-virus tool
or a host-based IDS. The security driver is the communi-
cations agent responsible for relaying events between the
trampoline and the security application. These include hook
notiﬁcations transmitted by the trampoline in the guest VM
and relayed by the hypervisor, and decisions sent by the se-
curity application to the hypervisor. The introspection API
provides the necessary introspection functionality to the se-
curity application, allowing it to collect additional informa-
tion about the event that was trapped.
3.4 Hypervisor Components
Our architecture requires two special features from the
hypervisor: protection of guest OS components and spe-
cialized inter-VM communications. The hypervisor modi-
ﬁcations required to support these features are small, based
on our implementation, which reduces the probability of in-
troducing bugs into our TCB.
Guest OS Component Protection The protection
mechanism is one of the key pieces of Lares, as it guar-
antees the integrity of the guest-space components of the
architecture. Unlike other architecture components such as
the security driver and security application, which are iso-
lated by the architecture’s inherent design, the hooks and
the trampoline are situated in the guest OS’s untrusted ker-
nel. Therefore these components require special protec-
tion to prevent an intruder from tampering with their be-
havior. This type of tampering could involve the omission
or forgery of events, or disabling the monitoring solution.
Because the trampoline is self-contained and the hooks are
jumps or function pointers, marking each hook’s memory
as read-only is sufﬁcient to prevent tampering.
In a virtualized architecture, the hypervisor is an ideal
place to implement such protections for two reasons. First,
as we assume it is part of our TCB, it cannot be tampered
by a malicious user. Second, as part of its job in virtualizing
the hardware, the hypervisor has complete mediation power
over the memory mappings used by the VMs running on
top of it. Our architecture leverages this control to obtain
a ﬂexible, ﬁne-grained memory protection mechanism. It
is used to write-protect the hooks and the trampoline in the
guest OS’s memory, so that no tampering can occur with
these components. A graphical representation of this pro-
tection is shown in Figure 2. The strength of this protection
derives from the strength of the TCB itself: the only way an
attacker could undo it would be to compromise the hyper-
visor, which we assume cannot be done.
Inter-VM Communication As our architecture re-
quires components located in different VMs to communi-
cate, inter-VM communication functionality is needed. As
shown in Figure 2, the trampoline in the guest VM must
send the events it captures from the hooks to the protector
driver in the security VM, and the reverse path must also be
traversed by replies sent from the protector driver. As virtu-
alization inherently prevents VMs from directly interacting
with each other, the implementation of such functionality
must involve the hypervisor. The key property of the Lares
communication mechanism that makes it different from ex-
isting generic mechanisms is that in Lares, the hypervisor
must delay returning to the guest VM until a response is
available from the security VM. A beneﬁt of this design is
that the guest OS will not be executing while we process the
hook, which provides stronger guarantees for the system.
4
Implementation
Detecting malware on today’s systems requires moni-
toring events as they happen. This, in turn, requires plac-
ing hooks throughout the system being monitored. These
hooks are usually numerous and placed throughout the ker-
nel to detect operations such as process creation, writing
to disk, network activity, and inter-process communication.
The Lares architecture is capable of placing hooks any-
where within the kernel of the guest OS. Hooking standard
system calls requires the memory protections described in
Section 4.4. Placing hooks in other locations requires addi-
tional protections as described in Section 6. Regardless of
the hook location and its protections, the implementation of
the hook processing system is the same.
Anti-virus monitors work by placing hooks in certain
code sections and/or data structures inside the OS’s ker-
nel, so that key OS events can be trapped and analyzed.
Trapping process creation events allows, for instance, to
scan the image of the loading process for malicious signa-
tures and prevent it from executing when a match is found.
These hooks are placed for a wide variety of system calls
and other critical events throughout the kernel [35]. For our
prototype implementation, we choose a hook that is rep-
resentative of the hooks used in these systems. Nearly all
238
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:19 UTC from IEEE Xplore.  Restrictions apply. 
anti-virus and host-based intrusion detection products place
a hook in the kernel to monitor process creation. In Win-
dows, NtCreateSection is the appropriate system call
to hook for monitoring this event. The mechanism required
to hook this system call is the same as hooking any other
system call and very similar to hooking an arbitrary loca-
tion within the kernel. Furthermore, the techniques used to
process this hook are similar to what one would use for pro-
cessing any hook. For these reasons, we chose to hook this
location in our prototype implementation.
Our implementation uses Xen 3.0.4 for the hypervisor,
Fedora 7 in the security VM, and Windows XP Service Pack
2 in the guest VM. We use an Intel processor with VT-x
extensions. However, the architecture could also be built on
an AMD system with the SVM extensions.
4.1 Hooks and Trampoline
In order
to install
the hook into the kernel API
NtCreateSection, we implemented a Windows ker-
nel driver called hookdriver.sys. Upon installation,
which happens during the guest OS initialization, the driver
creates a trampoline code section, modiﬁes the appropriate
system service descriptor table (SSDT) entry to point to it,
and informs the hypervisor to activate necessary memory
protections for the hook. The driver’s implementation has
324 source lines of code (SLOC), and the trampoline occu-
pies 89 bytes of memory.