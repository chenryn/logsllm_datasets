– BitCrumbs).
References
[1] Anubis. http://anubis.cs.ucsb.edu.
[2] Norman sandbox. http://www.norman.com/.
[3] Yara. https://virustotal.github.io/yara/.
[4] ABU RAJAB, M., ZARFOSS, J., MONROSE, F., AND TERZIS,
A. A multifaceted approach to understanding the botnet phe-
nomenon. In Proceedings of the ACM SIGCOMM Internet
Measurement Conference, IMC (New York, New York, USA,
2006), ACM Press, pp. 41–52.
3500    30th USENIX Security Symposium
USENIX Association
[5] BAILEY, M., OBERHEIDE, J., ANDERSEN, J., MAO, Z. M.,
JAHANIAN, F., AND NAZARIO, J. Automated Classiﬁcation
and Analysis of Internet Malware. Recent Advances in Intru-
sion Detection (2007), 178–197.
[6] BALZAROTTI, D., COVA, M., KARLBERGER, C., KRUEGEL,
C., KIRDA, E., AND VIGNA, G. Efﬁcient Detection of Split
Personalities in Malware. NDSS (apr 2010).
[7] BAYER, U., COMPARETTI, P., HLAUSCHEK, C., KRUEGEL,
C., AND KIRDA, E. Scalable, behavior-based malware cluster-
ing. In Network and Distributed System Security Symposium
(NDSS) (2009).
[8] BAYER, U., HABIBI, I., BALZAROTTI, D., KIRDA, E., AND
KRUEGEL, C. A View on Current Malware Behaviors. In
LEET (2009).
[9] BRUMLEY, D., HARTWIG, C., LIANG, Z., NEWSOME, J.,
SONG, D., AND YIN, H. Automatically Identifying Trigger-
based Behavior in Malware. Springer US, Boston, MA, 2008,
pp. 65–88.
[10] CANALI, D., LANZI, A., BALZAROTTI, D., KRUEGEL, C.,
CHRISTODORESCU, M., AND KIRDA, E. A quantitative study
of accuracy in system call-based malware detection. In Pro-
ceedings of the 2012 International Symposium on Software
Testing and Analysis - ISSTA 2012 (New York, New York,
USA, 2012), ACM Press, p. 122.
[11] CHRISTODORESCU, M., JHA, S., AND KRUEGEL, C. Mining
speciﬁcations of malicious behavior. In Proceedings of the the
6th joint meeting of the European software engineering confer-
ence and the ACM SIGSOFT symposium on The foundations of
software engineering - ESEC-FSE ’07 (New York, New York,
USA, 2007), ACM Press, p. 5.
[12] CHRISTODORESCU, M., JHA, S., SESHIA, S. A., SONG, D.,
AND BRYANT, R. E. Semantics-aware malware detection.
In Proceedings - IEEE Symposium on Security and Privacy
(2005), IEEE, pp. 32–46.
[13] COMPARETTI, P. M., SALVANESCHI, G., KIRDA, E., KOL-
BITSCH, C., KRUEGEL, C., AND ZANERO, S. Identifying
Dormant Functionality in Malware Programs. In 2010 IEEE
Symposium on Security and Privacy (2010), IEEE, pp. 61–76.
[14] COZZI, E., GRAZIANO, M., FRATANTONIO, Y., AND
In 2018
BALZAROTTI, D. Understanding linux malware.
IEEE symposium on security and privacy (SP) (2018), IEEE,
pp. 161–175.
[15] CRANDALL, J. R., WASSERMANN, G., DE OLIVEIRA, D. A.,
SU, Z., WU, S. F., AND CHONG, F. T. Temporal search:
Detecting hidden malware timebombs with virtual machines.
ACM SIGOPS Operating Systems Review 40, 5 (2006), 25–36.
[16] DAVID, O. E., AND NETANYAHU, N. S. DeepSign: Deep
learning for automatic malware signature generation and classi-
ﬁcation. In Proceedings of the International Joint Conference
on Neural Networks (jul 2015), vol. 2015-Septe, IEEE, pp. 1–8.
[17] DINABURG, A., ROYAL, P., SHARI, M., AND LEE, W. Ether:
Malware analysis via hardware virtualization extensions. In
Proceedings of the ACM Conference on Computer and Commu-
nications Security (New York, New York, USA, 2008), ACM
Press, pp. 51–62.
[18] FREDRIKSON, M., JHA, S., CHRISTODORESCU, M., SAILER,
R., AND YAN, X. Synthesizing Near-Optimal Malware Speci-
ﬁcations from Suspicious Behaviors. In 2010 IEEE Symposium
on Security and Privacy (2010), IEEE, pp. 45–60.
[19] JORDANEY, R., HOLLOWAY, R., SHARAD, K., LABORATO-
RIES, N. E. C., DASH, S. K., WANG, Z., PAPINI, D., ELET-
TRONICA, S. A., NOURETDINOV, I., AND CAVALLARO, L.
Transcend : Detecting Concept Drift in Malware Classiﬁcation
Models. In USENIX Security Symposium (2017), USENIX
Association, pp. 625–642.
[20] KIRAT, D., AND VIGNA, G. Malgene: Automatic extraction of
malware analysis evasion signature. In Proceedings of the 22nd
ACM SIGSAC Conference on Computer and Communications
Security (New York, NY, USA, 2015), CCS ’15, Association
for Computing Machinery, pp. 769–780.
[21] KIRAT, D., AND VIGNA, G. MalGene: Automatic extraction
of malware analysis evasion signature. In Proceedings of the
ACM Conference on Computer and Communications Security
(New York, New York, USA, 2015), vol. 2015-Octob, ACM
Press, pp. 769–780.
[22] KIRAT, D., VIGNA, G., AND KRUEGEL, C. BareCloud: Bare-
metal Analysis-based Evasive Malware Detection. In 23rd
USENIX Security Symposium (USENIX Security 14) (2014).
[23] KIRDA, E., KRUEGEL, C., BANKS, G., VIGNA, G., AND
KEMMERER, R. Behavior-based spyware detection. In Usenix
Security Symposium (2006), p. 694.
[24] KOLBITSCH, C., COMPARETTI, P. M., KRUEGEL, C., KIRDA,
E., ZHOU, X., AND WANG, X. Effective and Efﬁcient Mal-
ware Detection at the End Host. In Presented as part of the 18th
USENIX Security Symposium (USENIX Security 09) (Montreal,
Canada, 2009), USENIX.
[25] KOLBITSCH, C., KIRDA, E., AND KRUEGEL, C. The power of
procrastination: Detection and mitigation of execution-stalling
malicious code. In Proceedings of the ACM Conference on
Computer and Communications Security (New York, New
York, USA, 2011), ACM Press, pp. 285–296.
[26] KONNO, H., SHIRAKAWA, H., AND YAMAZAKI, H. A mean-
absolute deviation-skewness portfolio optimization model. An-
nals of Operations Research 45, 1 (1993), 205–220.
[27] KOTZIAS, P., BILGE, L., VERVIER, P.-A., AND CABALLERO,
J. Mind Your Own Business: A Longitudinal Study of Threats
and Vulnerabilities in Enterprises. In Network and Distributed
System Security Symposium (NDSS) (2019).
[28] KWON, B. J., MONDAL, J., JANG, J., BILGE, L., AND DUMI-
TRA ¸S, T. The dropper effect: Insights into malware distribution
with downloader graph analytics. In Proceedings of the 22nd
ACM SIGSAC Conference on Computer and Communications
Security (2015), pp. 1118–1129.
[29] LANZI, A., BALZAROTTI, D., KRUEGEL, C., CHRISTODOR-
ESCU, M., AND KIRDA, E. Accessminer: Using system-
In Proceedings of
centric models for malware protection.
the 17th ACM Conference on Computer and Communications
Security (New York, NY, USA, 2010), CCS ’10, Association
for Computing Machinery, pp. 399–412.
USENIX Association
30th USENIX Security Symposium    3501
[30] LEYS, C., LEY, C., KLEIN, O., BERNARD, P., AND LICATA,
L. Detecting outliers: Do not use standard deviation around
the mean, use absolute deviation around the median. Journal
of Experimental Social Psychology 49, 4 (2013), 764–766.
[31] LINDORFER, M., KOLBITSCH, C., AND MILANI COM-
PARETTI, P. Detecting environment-sensitive malware. In Lec-
ture Notes in Computer Science (including subseries Lecture
Notes in Artiﬁcial Intelligence and Lecture Notes in Bioinfor-
matics) (2011), vol. 6961 LNCS, Springer, Berlin, Heidelberg,
pp. 338–357.
[32] LIU, L., CHEN, S., YAN, G., AND ZHANG, Z. Bottracer:
Execution-based bot-like malware detection. In International
Conference on Information Security (2008), Springer, pp. 97–
113.
[33] MANN, H. B., AND WHITNEY, D. R. On a test of whether
one of two random variables is stochastically larger than the
other. The annals of mathematical statistics (1947), 50–60.
[34] MARTIGNONI, L., STINSON, E., FREDRIKSON, M., JHA, S.,
AND MITCHELL, J. C. A layered architecture for detecting
malicious behaviors. In International Workshop on Recent
Advances in Intrusion Detection (2008), Springer, pp. 78–97.
[35] MIRAMIRKHANI, N., APPINI, M. P., NIKIFORAKIS, N., AND
POLYCHRONAKIS, M. Spotless sandboxes: Evading mal-
ware analysis systems using wear-and-tear artifacts. In 2017
IEEE Symposium on Security and Privacy (SP) (2017), IEEE,
pp. 1009–1024.
[36] MOSER, A., KRUEGEL, C., AND KIRDA, E. Exploring Mul-
tiple Execution Paths for Malware Analysis. In 2007 IEEE
Symposium on Security and Privacy (SP ’07) (may 2007),
IEEE, pp. 231–245.
[37] MOSER, A., KRUEGEL, C., AND KIRDA, E. Limits of Static
In Twenty-Third Annual
Analysis for Malware Detection.
Computer Security Applications Conference (ACSAC 2007)
(dec 2007), IEEE, pp. 421–430.
[39] PRASZMO, M.
[38] PENDLEBURY, F., PIERAZZI, F., JORDANEY, R., KINDER, J.,
AND CAVALLARO, L. {TESSERACT}: Eliminating experi-
mental bias in malware classiﬁcation across space and time. In
28th USENIX Security Symposium 2019) (2019), pp. 729–746.
analysis.
https://www.cert.pl/en/news/single/ramnit-in-depth-analysis/.
[40] RIECK, K., HOLZ, T., WILLEMS, C., DÜSSEL, P., AND
LASKOV, P. Learning and classiﬁcation of malware behav-
ior. In International Conference on Detection of Intrusions
and Malware, and Vulnerability Assessment (2008), Springer,
pp. 108–125.
in-depth
Ramnit
–
[41] RIECK, K., TRINIUS, P., WILLEMS, C., AND HOLZ, T. Au-
tomatic analysis of malware behavior using machine learning.
Journal of Computer Security 19, 4 (jun 2011), 639–668.
[42] ROSSOW, C., DIETRICH, C., AND BOS, H. Large-Scale Anal-
ysis of Malware Downloaders. In DIMVA (2012), Springer,
Berlin, Heidelberg, pp. 42–61.
[43] ROSSOW, C., DIETRICH, C. J., GRIER, C., KREIBICH, C.,
PAXSON, V., POHLMANN, N., BOS, H., AND VAN STEEN,
M. Prudent practices for designing malware experiments:
Status quo and outlook. In Proceedings - IEEE Symposium on
Security and Privacy (may 2012), IEEE, pp. 65–79.
[44] ROTH, F. Generic Signature Format for SIEM Systems.
https://github.com/Neo23x0/sigma.
[45] SCHREUDERS, Z. C., SHAW, T., SHAN-A-KHUDA, M.,
RAVICHANDRAN, G., KEIGHLEY, J., AND ORDEAN, M. Se-
curity scenario generator (secgen): A framework for generating
randomly vulnerable rich-scenario vms for learning computer
security and hosting {CTF} events. In 2017 {USENIX} Work-
shop on Advances in Security Education ({ASE} 17) (2017).
[46] SEBASTIAN, M., RIVERA, R., KOTZIAS, P., AND CA-
BALLERO, J. Avclass: A tool for massive malware labeling.
In Research in Attacks, Intrusions, and Defenses (2016).
[47] SHARIF, M. I., LANZI, A., GIFFIN, J. T., AND LEE, W. Im-
peding malware analysis using conditional code obfuscation.
In NDSS (2008).
[48] SONG, Y., LOCASTO, M. E., STAVROU, A., KEROMYTIS,
A. D., AND STOLFO, S. J. On the infeasibility of model-
ing polymorphic shellcode. In Proceedings of the 14th ACM
conference on Computer and communications security (2007),
pp. 541–551.
[49] SS64. Quotes, Escape Characters, Delimiters - Windows CMD
- SS64.com. https://ss64.com/nt/syntax-esc.html.
[50] TRENDMICRO.
Threat
Encyclopedia
-
https://www.trendmicro.com/vinfo/us/threat-
encyclopedia/malware/trojanspy.win32.glupteba.a.
TrojanSpy.Win32.GLUPTEBA.A
USA.
Trend Micro
-
[51] TRINIUS, P., WILLEMS, C., HOLZ, T., AND RIECK, K. A
Malware Instruction Set for Behavior-Based Analysis. Sicher-
heit Schutz und Zuverlässigkeit SICHERHEIT (2011).
[52] WILLEMS, C., HOLZ, T., AND FREILING, F. Toward auto-
IEEE
mated dynamic malware analysis using cwsandbox.
Security & Privacy 5, 2 (2007), 32–39.
[53] YADEGARI, B., AND DEBRAY, S. Symbolic execution of
obfuscated code. In Proceedings of the 22nd ACM SIGSAC
Conference on Computer and Communications Security (2015),
pp. 732–744.
[54] YIN, H., SONG, D., EGELE, M., KRUEGEL, C., AND KIRDA,
E. Panorama: Capturing system-wide information ﬂow for
malware detection and analysis. In Proceedings of the ACM
Conference on Computer and Communications Security (New
York, New York, USA, 2007), ACM Press, pp. 116–127.
[55] ZHOU, Y., AND JIANG, X. Dissecting android malware: Char-
acterization and evolution. In 2012 IEEE symposium on secu-
rity and privacy (2012), IEEE, pp. 95–109.
A Appendix
A.1 Implications of Variability on Malware
Clustering
Dynamic malware clustering [5, 7, 40, 41] aims to identify
malware families (or variations withing the same family) by
grouping together samples with similar behaviors. These ap-
proaches commonly rely on only one execution trace per
sample. Therefore, we investigate how the large variability
3502    30th USENIX Security Symposium
USENIX Association
rate. As AccessMiner found ﬁle write events to be the most
successful in identifying malware, we ﬁrst build the graph
using the ﬁle write actions in our dataset. We measure the
success of an anomaly based model that relies on only one
execution per benign sample (Figure 9a), then the success
when all of the executions available to us included (9b). As
seen from the ﬁgures, a single random benign execution is
not sufﬁcient to train an anomaly detector, because it treats
most of the executions as anomalies.
The detection rates we obtained from this experiment are
lower than the ones reported in the original paper. Concerning
that the nature of our data is very different to the benign
dataset of AccessMiner this is actually expected. Note that
our data consists of unpopular benign applications, whose
behavior might be more similar to malicious and unwanted
programs. To obtain a better behavioral coverage for benign
programs, not only popular benign ﬁles such as those used
in AccessMiner should be consider but also lower reputation,
lower prevalence benign ﬁles.
among the traces of each sample could inﬂuence the results
reported from clustering experiments.
This can be performed by clustering execution traces, and
then verifying whether the traces of the same sample are clus-
tered together or they are scattered among multiple clusters.
For this experiment, we implemented the clustering technique
described by Bailey et al. [5], which also uses similar fea-
tures to our dataset. As suggested in the paper, we apply
their normalized compression distance to our samples, and
we utilize the same hierarchical clustering algorithm and the
same method to determine the number of clusters. We clus-
tered execution traces from 2,424 malware samples. For each
sample we randomly select 4 traces collected in the same
week but on different machines; we repeat this step 10 times.
We cluster the resulting 9,696 traces, and we obtain 88–105
clusters, of which we pick the median with 93 clusters. To
interpret these clusters as families of malware samples with
similar behaviors, it is necessary that all executions of a sam-
ple fall within its family cluster. In average we found that for
67% of malware samples all 4 executions appeared indeed in
the same cluster. However, one third of the samples exhibit
sufﬁcient variability in behavior that their traces appear in
multiple clusters: 27% fall into 2 clusters, 5% in 3 clusters,
and 1% in 4 different clusters. This calls into question the
conclusion that the behavior clusters reﬂect malware families.
Because some samples exhibit too much behavior variability
to be clustered correctly into families, we must be cautious
when drawing conclusions from clustering experiments. Im-
portantly, this threat to validity comes to light when we cluster
multiple traces per sample, but remains hidden when using
only a single trace per sample.
Impact on Anomaly Detection
A.2
One way of detecting malware regardless of their variability
is to detect deviations from benign behavior. In this cate-
gory, Lanzi et al. proposed AccessMiner [29], as system-level
anomaly detector based on behavioral traces of benign pro-
grams. It is interesting to note that the authors already adopted
a technique that accounted for behavioral variability over time
and different machine proﬁles. Similarly to our data, their
dataset was also collected from real users but their goal was
not to study changes in the application behavior but to obtain
a complete picture about how benign ﬁles interact with the
underlying operating system.
Since in the AccessMiner paper the authors did not discuss
how many executions of benign programs are needed to train
the anomaly detector, we decided to leverage our data to ﬁnd
an answer to this question such that security companies that
opt for anomaly detection rather than malware detection could
beneﬁt from our results.
Following the AccessMiner approach, we construct the
benign proﬁle by using 90% of the benign executions in our
dataset. Remaining 10% is used to measure the false-positive
(a) Using 1 random benign execution
(b) Using all benign execution
Figure 9: Amount of samples for the ratio of machines with
anomalous ﬁle writes.
USENIX Association
30th USENIX Security Symposium    3503
0.00.10.20.30.40.50.60.70.80.91.0Detection rate0.00.10.20.30.40.50.60.7Ratio of samplesRatio of samples for each detection rateCategoryMalwarePUPBenign0.00.10.20.30.40.50.60.70.80.91.0Detection rate0.00.10.20.30.40.50.6Ratio of samplesRatio of samples for each detection rateCategoryMalwarePUPBenign25th percentile
75th percentile
e
l
i
F
E
P
Path
Name
Ext.
Path
Name
Ext.
t Key Path
.
e
S
g
e
R
Key Name
Value
Dir. Create Path
Reg. Create Path
Mtx Create Name
New Proc. CMD line
Mal