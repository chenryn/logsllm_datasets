176
338
924
F.
Interfacing with AFL
We use AFL [81], a well-known coverage-guided fuzzer, as
PERIFUZZ’s fuzzing front-end. This is in line with previous
work on fuzzing various kernel subsystems [42], [57], [65].
To fully leverage AFL’s coverage-guidance, we added kernel
coverage and seed generation support in PERIFUZZ.
Coverage-guidance: We modiﬁed and used KCOV to
provide coverage feedback while executing inputs [74]. Ex-
isting implementations of KCOV were developed for fuzzing
system calls and only collect coverage information for code
paths reachable from system calls. To enable device driver
fuzzing, we extended KCOV with support for collecting cov-
erage information for code paths reachable from interrupt
handlers. We also applied a patch to force KCOV to collect
edge coverage information rather than basic block coverage
information [29]. To collect coverage along the execution of
the device driver, it is ﬁrst compiled with coverage instrumen-
tation. This instrumentation informs KCOV of hit basic blocks,
which KCOV records in terms of edge coverage. The executor
component retrieves the coverage feedback from kernel, once
the input has been consumed. Then the executor copies this
coverage information to a memory region shared with the
parent AFL fuzzer process, after which we signal KCOV to
clear the coverage buffer for the next fuzzing iteration.
Automated Seed Generation: Starting with valid test
cases rather than fully random inputs improves the fuzzing ef-
ﬁciency, as this lowers the number of input mutations required
to discover new paths. To collect an initial seed of valid test
cases, we use our PERISCOPE framework to log all accesses
to a user-selected set of buffers. We provide an access log
parser that automatically turns a sequence of accesses into a
seed ﬁle according to our fuzzing input consumption model
(see Section IV-C). That said, this step is optional; one could
start from any arbitrary seed, or craft test cases on their own.
V.
IMPLEMENTATION
A. PERISCOPE
We based our implementation of PERISCOPE on Linux
kernel 4.4 for AArch64. Our framework is, for the most part,
a standalone component that can be ported to other versions
of the Linux kernel and even to vendor-modiﬁed custom
kernels with relative ease. The kernel changes required for
PERISCOPE are relatively small compared to the framework
implementation itself as shown in Table I.
Tracking
PERISCOPE
hooks
Allocations:
the
generic kernel APIs used to allocate/deallocate MMIO and
DMA regions to maintain a list of allocation contexts.
into the dma_alloc_coherent
We insert
and dma_free_coherent functions
to track coherent
these hooks
DMA mappings, into the dma_unmap_page function3 and
dma_map_page to track streaming DMA mappings, and into
ioremap and iounmap to track MMIO mappings.
PERISCOPE assigns a context identiﬁer to every MMIO and
DMA allocation context. This context identiﬁer is the XOR-
sum of all call site addresses that are on the call stack at
allocation time. We mask out the upper bits of all call site
addresses to ensure that context identiﬁers remain the same
across reboots on devices that enable kernel address space
layout randomization (KASLR).
Monitoring Interface: PERISCOPE provides a user-
space interface by exposing debugfs and tracefs ﬁle system
entries. Through this interface, a user can list all allocation
contexts and their active mappings, enable or disable monitor-
ing, and read the circular buffer where PERISCOPE logs all
accesses to the monitored mappings.
As streaming DMA buffer allocations can happen in inter-
rupt contexts, we use a non-blocking spinlock to protect access
to data structures such as the list of monitored mappings. When
accessing these data structures from an interruptible code path,
we additionally disable interrupts to prevent interrupt handlers
from deadlocking while trying to access the same structures.
B. PERIFUZZ
We built PERIFUZZ as a client for PERISCOPE. Table II
summarizes the code we added or changed for PERIFUZZ.
Kernel-User Interface: The injector registers a device
node that exposes device-speciﬁc mmap and ioctl system
calls to the user-space executor. The executor can therefore
create a shared memory mapping via mmap to the debugfs
ﬁle exported by the injector module. Through this interface, the
executor passes the fuzzer input to the injector running in the
kernel space. The ioctl handler of the injector module allows
the executor (i) to enable and disable fuzzing, and (ii) to poll
the consumption status of a fuzzer input it provided. Similarly,
KCOV provides the coverage feedback by exporting another
debugfs ﬁle such that the executor can read the feedback by
mmaping the exported debugfs ﬁle.
Persisting Fuzzer Files: Many fuzzers including AFL
store meta-information about fuzzing and input corpus in the
ﬁle system. However, these ﬁles might not persist if the kernel
crashes before the data is committed to the disk. To avoid
this, we ensure that all the fuzzer ﬁles are made persistent, by
modifying AFL to call fsync after all ﬁle writes. Persisting all
ﬁles allows us (i) to investigate crashes using the last crashing
input and (ii) to resume fuzzing with the existing corpus stored
in the ﬁle system.
3dma_unmap_page unmaps a streaming DMA mapping from the periph-
eral processor. Doing so transfers ownership of the mapping to the device
driver.
7
TABLE IV.
THE NUMBER OF MMIO AND DMA ALLOCATION
CONTEXTS THAT CREATE ATTACKER-ACCESSIBLE MAPPINGS
Driver
MMIO
DMA Coherent
DMA Streaming
qcacld-3.0
bcmdhd4358
1
4
9
11
5
29
TABLE V.
THE NUMBER OF BASIC BLOCKS EXECUTED UNDER WEB
BROWSING TRAFFIC PER KERNEL CONTROL PATH. A BASIC BLOCK COULD
RUN IN INTERRUPT CONTEXT (IRQ), KERNEL THREAD OR WORKER
CONTEXT (KERNEL THREAD), OR OTHERS (OTHERS). SOME BASIC
BLOCKS CAN BE REACHED IN SEVERAL CONTEXTS.
Fig. 4. Continuous fuzzing with PERIFUZZ
TABLE III.
TARGET SMARTPHONES
Google Pixel 2
Samsung Galaxy S6
Model Name
Released
SoC
Kernel Version
Wi-Fi Device Driver
Wi-Fi IOMMU Protection
walleye
October, 2017
Snapdragon 835
4.4
SM-G920F
April, 2015
Exynos 7420
3.10
qcacld-3.0
bcmdhd4358
Yes
No
Fuzzing Manager: The fuzzing procedure is com-
pletely automated through Python scripts that run on a host
separate from the target device. The continuous fuzzing loop
is driven by a Python program, as illustrated in Figure 4. The
manager process runs in a loop in which it (i) polls the status
of the fuzzing process, (ii) starts/restarts fuzzing if required,
(iii) detects device reboots, (iv) downloads the kernel log and
the last input generated before the crash after a reboot, and (v)
examines the last kernel log to identify the issue that led to the
crash.4 The manager stores the reports and the last crashing
inputs for investigation and bug reporting.
VI. EVALUATION
We evaluated PERISCOPE and PERIFUZZ by monitoring
and fuzzing the communication between two popular Wi-Fi
chipsets and their device drivers used in several Android
smartphones.
A. Target Drivers
We chose Wi-Fi drivers as our evaluation target because
they present a large attack surface, as evidenced by a recent se-
ries of fully remote exploits [16], [23]. Smartphones frequently
connect to potentially untrusted Wi-Fi access points, and Wi-Fi
drivers and peripherals implement vendor-speciﬁc, complex
internal device-driver interaction protocols (e.g., for ofﬂoading
tasks) that rely heavily on DMA-based communication.
The Wi-Fi peripheral chipset market for smartphones is
dominated by two major vendors: Broadcom and Qualcomm.
We tested two popular Android-based smartphones that each
have a Wi-Fi chipset from one of these vendors, as shown
in Table III. We tested the Google Pixel 2, with Android
8.0.0 Oreo5 and Qualcomm’s qcacld-3.0 Wi-Fi driver. We
4We used Syzkaller’s report package to parse the kernel log.
5android-8.0.0_r0.28
8
Driver
qcacld-3.0
bcmdhd4358
IRQ
1633
(36.9%)
743
(68.9%)
Kernel
Thread
2902
(65.6%)
284
(26.3%)
Others
Hit / Instrumented
672
(15.2%)
301
(27.9%)
4427/81637
1078/23404
also tested the Samsung Galaxy S6, on which we installed
LineageOS 14.1 and Broadcom’s bcmdhd4358 Wi-Fi driver.
LineageOS 14.1 is a popular custom Android distribution
that includes the exact same Broadcom driver as the ofﬁcial
Android version for the Galaxy S6.
Note that although the Samsung Galaxy S6 has an
IOMMU, it is not being used to protect the physical memory
from rogue Wi-Fi peripherals. Regardless, we did conduct our
experiments under the assumption that IOMMU protection is
in place. Newer versions of the Samsung Galaxy phones do
enable IOMMU protection for Wi-Fi peripherals.
B. Target Attack Surface
The code paths that are reachable from peripheral devices
vary depending on the internal state of the driver (e.g., is the
driver connected, not connected, scanning for networks, etc).
In our evaluation, we assume that the driver has reached a
steady state where it has established a stable connection with
a network. We consider only the code paths reachable in this
state as part of the attack surface. We analyzed this attack
surface by counting (i) the number of allocation contexts that
create attacker-accessible MMIO and DMA mappings and (ii)
the number of driver code paths that are executed while the
user is browsing the web.
Table IV summarizes the MMIO and DMA allocation
contexts in both device drivers, which create mappings that
can be accessed by the attacker while the user is browsing the
web. MMIO and DMA coherent mappings were established
during the driver initialization, and were still mapped to both
the device and the driver by the time the user browses the
web; DMA streaming mappings were destroyed after their use,
but regularly get recreated and mapped to the device while
browsing the web. Thus, an attacker on a compromised Wi-Fi
chipset can easily access these mappings, and write malicious
values in them to trigger and exploit vulnerabilities in the
driver.
We then analyzed the code paths that get exercised under
web browsing trafﬁc, and classiﬁed these paths based on the
context in which they are executed: interrupt context, kernel
thread context, and other contexts (e.g., system call context).
Table V shows the results. Of all the basic blocks executed
under web browsing trafﬁc, 36.9% and 68.9% run in interrupt
context for the qcacld-3.0 and bcmdhd4358 drivers,
HostLast Input & Kernel logQuery reportStart FuzzingCrashReportManager(Re)start FuzzingTABLE VI.
ALLOCATION CONTEXTS SELECTED FOR FUZZING. DC
STANDS FOR DMA COHERENT, DS FOR DMA STREAMING, AND MM FOR
MEMORY-MAPPED I/O.
Driver
qcacld-3.0
bcmdhd4358
Alloc.
Context
QC1
QC2
QC3
QC4
BC1
BC2
BC3
BC4
Alloc.
Type
DC
DC
DS
DS
DC
DC
DC
MM
Alloc.
Size
8200
4
2112
2112
8192
16384
1536
Used For
DMA buffer mgmt.
DMA buffer mgmt.
FW-Driver message
FW-Driver message
FW-Driver RX info
FW-Driver TX info
FW-Driver ctrl. info
4194304
Ring ctrl. info
respectively. Some of the code that executes in interrupt
context may not be reachable from any system calls through
legal control-ﬂow paths, and therefore may not be fuzzed by
system call fuzzers.
C. Target Mappings
We investigated how each of the active mappings are
used by their respective drivers, and enabled fuzzing for
DMA/MMIO regions that are accessed frequently, and that
are used for low-level communication between the driver and
the device ﬁrmware (e.g., for shared ring buffer management).
We used PERISCOPE to determine which regions the driver
accesses frequently, and we manually investigated the driver’s
code to determine the purpose of each region.
For qcacld-3.0, we enabled fuzzing for two allocation
contexts for DMA coherent buffers and two contexts for DMA
streaming buffers. For bcmdhd4358, we enabled fuzzing for
three allocation contexts for DMA coherent buffers and one
allocation context for an MMIO buffer. Table VI summarizes
the allocation contexts for which we enable fuzzing; all the
mappings allocated in those contexts are fuzzed.
D. Fuzzer Seed Generation
We used PERISCOPE’s default tracing facilities to generate
initial seed input ﬁles. For each selected allocation context,
we ﬁrst recorded all allocations of, and all read accesses to
the memory mappings while generating web browsing trafﬁc
for ﬁve minutes. We then parsed the allocation/access log to
generate unique seed input ﬁles. Finally, we used AFL’s corpus
minimization tool to minimize the input ﬁles. This tool replays
each input ﬁle to collect coverage information and uses that
information to exclude redundant ﬁles.
E. Vulnerabilities Discovered
Table VII summarizes the vulnerabilities we discovered us-
ing our fuzzer. Each entry in the table is a unique vulnerability
at a distinct source code location.
Disclosure: We responsibly disclosed these vulnerabil-
ities to the respective vendors. During this process, we were
informed by Qualcomm that some of the bugs had recently
been reported by external researchers or internal auditors.
We marked these bugs as “Known”. All the remaining bugs
were previously unknown, and have been conﬁrmed by the
respective vendors. We included CVE numbers assigned to
the bugs we reported. Also, we included the vendor-speciﬁc,
internal severity ratings for these bugs if communicated by the