**作者：Wfox@360高级攻防实验室 原文链接：**
## 一、简介
Zabbix是一个支持实时监控数千台服务器、虚拟机和网络设备的企业级解决方案，客户覆盖许多大型企业。本议题介绍了Zabbix基础架构、Zabbix
Server攻击面以及权限后利用，如何在复杂内网环境中从Agent控制Server权限、再基于Server拿下所有内网Agent。
## 二、Zabbix监控组件
Zabbix监控系统由以下几个组件部分构成：
### 1\. Zabbix Server
Zabbix Server是所有配置、统计和操作数据的中央存储中心，也是Zabbix监控系统的告警中心。在监控的系统中出现任何异常，将被发出通知给管理员。
Zabbix Server的功能可分解成为三个不同的组件，分别为Zabbix Server服务、Web后台及数据库。
### 2\. Zabbix Proxy
Zabbix Proxy是在大规模分布式监控场景中采用一种分担Zabbix Server压力的分层结构，其多用在跨机房、跨网络的环境中，Zabbix
Proxy可以代替Zabbix Server收集性能和可用性数据，然后把数据汇报给Zabbix Server，并且在一定程度上分担了Zabbix
Server的压力。
### 3\. Zabbix Agent
Zabbix Agent部署在被监控的目标机器上，以主动监控本地资源和应用程序（硬盘、内存、处理器统计信息等）。
Zabbix Agent收集本地的状态信息并将数据上报给Zabbix Server用于进一步处理。
## 三、Zabbix网络架构
对于Zabbix Agent客户端来说，根据请求类型可分为被动模式及主动模式：
  * 被动模式：Server向Agent的10050端口获取监控项数据，Agent根据监控项收集本机数据并响应。
  * 主动模式：Agent主动请求Server(Proxy)的10051端口获取监控项列表，并根据监控项收集本机数据提交给Server(Proxy)
从网络部署架构上看，可分为Server-Client架构、Server-Proxy-Client架构、Master-Node-Client架构：
  * Server-Client架构
最为常见的Zabbix部署架构，Server与Agent同处于内网区域，Agent能够直接与Server通讯，不受跨区域限制。
  * Server-Proxy-Client架构
多数见于大规模监控需求的企业内网，其多用在跨机房、跨网络的环境，由于Agent无法直接与位于其他区域的Server通讯，需要由各区域Proxy代替收集Agent数据然后再上报Server。
## 四、Zabbix Agent配置分析
从进程列表中可判断当前机器是否已运行zabbix_agentd服务，Linux进程名为`zabbix_agentd`，Windows进程名为`zabbix_agentd.exe`。
Zabbix
Agent服务的配置文件为`zabbix_agentd.conf`，Linux默认路径在`/etc/zabbix/zabbix_agentd.conf`，可通过以下命令查看agent配置文件并过滤掉注释内容：
    cat /etc/zabbix/zabbix_agentd.conf | grep -v '^#' | grep -v '^$'
首先从配置文件定位zabbix_agentd服务的基本信息：
  * **Server参数**
Server或Proxy的IP、CIDR、域名等，Agent仅接受来自Server参数的IP请求。
    Server=192.168.10.100
  * **ServerActive参数**
Server或Proxy的IP、CIDR、域名等，用于主动模式，Agent主动向ServerActive参数的IP发送请求。
    ServerActive=192.168.10.100
  * **StartAgents参数**
为0时禁用被动模式，不监听10050端口。
    StartAgents=0
经过对 `zabbix_agentd.conf` 配置文件各个参数的安全性研究，总结出以下配置不当可能导致安全风险的配置项：
  * **EnableRemoteCommands参数**
是否允许来自Zabbix Server的远程命令，开启后可通过Server下发shell脚本在Agent上执行。
**风险样例：**
    EnableRemoteCommands=1
  * **AllowRoot参数**
Linux默认以低权限用户zabbix运行，开启后以root权限运行zabbix_agentd服务。
**风险样例：**
    AllowRoot=1
  * **UserParameter参数**
自定义用户参数，格式为`UserParameter=,`，Server可向Agent执行预设的自定义参数命令以获取监控数据，以官方示例为例：
    UserParameter=ping[*],echo $1
当Server向Agent执行`ping[aaaa]`指令时，$1为传参的值，Agent经过拼接之后执行的命令为`echo
aaaa`，最终执行结果为`aaaa`。
command存在命令拼接，但由于传参内容受UnsafeUserParameters参数限制，默认无法传参特殊符号，所以默认配置利用场景有限。
官方漏洞案例可参考[CVE-2016-4338](https://www.exploit-db.com/exploits/39769)漏洞。
  * **UnsafeUserParameters参数**
自定义用户参数是否允许传参任意字符，默认不允许字符\ ' " ` * ? [ ] { } ~ $ ! & ; ( )  | # @
**风险样例：**
    UnsafeUserParameters=1
当UnsafeUserParameters参数配置不当时，组合UserParameter自定义参数的传参命令拼接，可导致远程命令注入漏洞。
由Server向Agent下发指令执行自定义参数，即可在Agent上执行任意系统命令。 以 `UserParameter=ping[*],echo $1`
为例，向Agent执行指令`ping[test && whoami]`，经过命令拼接后最终执行`echo test &&
whoami`，成功注入执行shell命令。
  * **Include参数**
加载配置文件目录单个文件或所有文件，通常包含的conf都是配置UserParameter自定义用户参数。
    Include=/etc/zabbix/zabbix_agentd.d/*.conf
## 五、Zabbix Server攻击手法
除了有利用条件的Zabbix Agent漏洞外，默认情况下Agent受限于IP白名单限制，只处理来自Server的请求，所以攻击Zabbix
Agent的首要途径就是先拿下Zabbix Server。
经过对Zabbix Server攻击面进行梳理，总结出部分攻击效果较好的漏洞：
### 1\. Zabbix Web后台弱口令
Zabbix安装后自带Admin管理员用户和Guests访客用户(低版本)，可登陆Zabbiax后台。
超级管理员默认账号：Admin，密码：zabbix Guests用户，账号：guest，密码为空
### 2\. MySQL弱口令
从用户习惯来看，运维在配置Zabbix时喜欢用弱口令作为MySQL密码，且搜索引擎的Zabbix配置教程基本用的都是弱口令，这导致实际环境中Zabbix
Server的数据库密码通常为弱口令。
除了默认root用户无法外连之外，运维通常会新建MySQL用户 `zabbix`，根据用户习惯梳理了`zabbix`用户的常见密码：
    123456
    zabbix
    zabbix123
    zabbix1234
    zabbix12345
    zabbix123456
    123456
拿下MySQL数据库后，可解密users表的密码md5值，或者直接替换密码的md5为已知密码，即可登录Zabbix Web。
### 3\. CVE-2020-11800 命令注入
Zabbix Server的trapper功能中active
checks命令存在CVE-2020-11800命令注入漏洞，该漏洞为基于CVE-2017-2824的绕过利用。 未授权攻击者向Zabbix
Server的10051端口发送trapper功能相关命令，利用漏洞即可在Zabbix Server上执行系统命令。
`active checks`是Agent主动检查时用于获取监控项列表的命令，Zabbix Server在开启自动注册的情况下，通过`active
checks`命令请求获取一个不存在的host时，自动注册机制会将json请求中的host、ip添加到interface数据表里，其中CVE-2020-11800漏洞通过ipv6格式绕过ip字段检测注入执行shell命令，
**受数据表字段限制Payload长度只能为64个字符** 。
    {"request":"active checks","host":"vulhub","ip":"ffff:::;whoami"}
自动注册调用链：
    active checks -> send_list_of_active_checks_json() -> get_hostid_by_host() -> DBregister_host()
`command`指令可以在未授权的情况下可指定主机(hostid)执行指定脚本(scriptid)，Zabbix存在3个默认脚本，脚本中的`{HOST.CONN}`在脚本调用的时候会被替换成主机IP。
    # scriptid == 1 == /bin/ping -c {HOST.CONN} 2>&1
    # scriptid == 2 == /usr/bin/traceroute {HOST.CONN} 2>&1
    # scriptid == 3 == sudo /usr/bin/nmap -O {HOST.CONN} 2>&1
scriptid指定其中任意一个，hostid为注入恶意Payload后的主机id，但自动注册后的hostid是未知的，所以通过`command`指令遍历hostid的方式都执行一遍，最后成功触发命令注入漏洞。
    {"request":"command","scriptid":1,"hostid":10001}
由于默认脚本的类型限制，脚本都是在Zabbix Server上运行，Zabbix
Proxy是无法使用command指令的。payload长度受限制可拆分多次执行，必须更换host名称以执行新的payload。
漏洞靶场及利用脚本：[Zabbix Server
trapper命令注入漏洞（CVE-2020-11800）](https://github.com/vulhub/vulhub/tree/master/zabbix/CVE-2020-11800)
### 4\. CVE-2017-2824 命令注入
上面小结已详细讲解，CVE-2017-2824与CVE-2020-11800漏洞点及利用区别不大，不再复述，可参考链接：
漏洞靶场及利用脚本：[Zabbix Server
trapper命令注入漏洞（CVE-2017-2824）](https://github.com/vulhub/vulhub/tree/master/zabbix/CVE-2017-2824)
### 5\. CVE-2016-10134 SQL注入
CVE-2016-10134 SQL注入漏洞已知有两个注入点：
  * latest.php，需登录，可使用未关闭的Guest访客账号。
    /jsrpc.php?type=0&mode=1&method=screen.get&profileIdx=web.item.graph&resourcetype=17&profileIdx2=updatexml(0,concat(0xa,user()),0)
  * jsrpc.php，无需登录即可利用。
利用脚本：
漏洞靶场及利用脚本：[zabbix latest.php
SQL注入漏洞（CVE-2016-10134）](https://github.com/vulhub/vulhub/tree/master/zabbix/CVE-2016-10134)
## 六、Zabbix Server权限后利用
拿下Zabbix Server权限只是阶段性的成功，接下来的问题是如何控制Zabbix Agent以达到最终攻击目的。
Zabbix Agent的10050端口仅处理来自Zabbix Server或Proxy的请求，所以后续攻击都是依赖于Zabbix
Server权限进行扩展，本章节主要讲解基于监控项item功能的后利用。
>
> 在zabbix中，我们要监控的某一个指标，被称为“监控项”，就像我们的磁盘使用率，在zabbix中就可以被认为是一个“监控项”(item)，如果要获取到“监控项”的相关信息，我们则要执行一个命令，但是我们不能直接调用命令，而是通过一个“别名”去调用命令，这个“命令别名”在zabbix中被称为“键”(key)，所以在zabbix中，如果我们想要获取到一个“监控项”的值，则需要有对应的“键”，通过“键”能够调用相应的命令，获取到对应的监控信息。
以Zabbix 4.0版本为例，按照个人理解 item监控项可分为
**通用监控项、主动检查监控项、Windows监控项、自定义用户参数(UserParameter)监控项**
，Agent监控项较多不一一例举，可参考以下链接： [1\. Zabbix
Agent监控项](https://www.zabbix.com/documentation/4.0/zh/manual/config/items/itemtypes/zabbix_agent)
[2\. Zabbix Agent
Windows监控项](https://www.zabbix.com/documentation/4.0/zh/manual/config/items/itemtypes/zabbix_agent/win_keys)
在控制Zabbix Server权限的情况下可通过zabbix_get命令向Agent获取监控项数据，比如说获取Agent的系统内核信息：
    zabbix_get -s 172.21.0.4 -p 10050 -k "system.uname"
结合上述知识点，针对item监控项的攻击面进行挖掘，总结出以下利用场景：
### 1\. EnableRemoteCommands参数远程命令执行
Zabbix最为经典的命令执行利用姿势，许多人以为控制了Zabbix