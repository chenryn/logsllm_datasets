# Video Downloader（Plus）Chrome插件漏洞分析：绕过CSP实现UXSS
|
##### 译文声明
本文是翻译文章，文章原作者 thehackerblog，文章来源：thehackerblog.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
在使用[tarnish](https://thehackerblog.com/tarnish/)扫描各种Chrome插件时，我发现[Video
Downloader for Chrome version
5.0.0.12](https://chrome.google.com/webstore/detail/video-downloader-for-chro/dcfofgiombegngbaofkeebiipcdgpnga)（820万用户）以及[Video Downloader
Plus](https://chrome.google.com/webstore/detail/video-downloader-plus/baejfnndpekpkaaancgpakjaengfpopk)（730万用户）这两款流行的Chrome插件在browser
action页面中存在跨站脚本（XSS）漏洞，受害者只需要浏览攻击者控制的某个页面就可以触发漏洞。
该漏洞之所以存在，是因为插件开发者使用字符串连接方式来构建HTML，通过jQuery将HTML动态附加到DOM。攻击者可以构造一个特殊的链接，在插件的上下文中执行任意JavaScript代码。利用该漏洞，攻击者可以滥用该插件具备的权限，包含如下权限：
    "permissions": [
        "alarms",
        "contextMenus",
        "privacy",
        "storage",
        "cookies",
        "tabs",
        "unlimitedStorage",
        "webNavigation",
        "webRequest",
        "webRequestBlocking",
        "http://*/*",
        "https://*/*",
        "notifications"
    ],
利用上述权限，攻击者可以转储浏览器所有cookie、拦截浏览器所有请求，并仿冒认证用户与所有站点进行通信。插件能做的所有事情攻击者都能做。
## 二、漏洞分析
漏洞的核心在于如下一段代码：
    vd.createDownloadSection = function(videoData) {
        return ' 
            ' + videoData.fileName + ' 
            Download - ' + Math.floor(videoData.size * 100 / 1024 / 1024) / 100 + ' MB
            ';
    };
以上代码简直是教科书般的跨站脚本（XSS）漏洞代码。该插件会从攻击者控制的网页中提取视频链接，因此利用方式应该非常直接。然而，现实世界总跟教科书中的情况不一样，往往复杂得多。本文会详细分析漏洞利用过程中遇到的问题，也介绍了如何绕过这些限制。首先从我们的输入点开始分析，然后沿着这条路直达我们的终点。
###  利用路径
该插件使用[Content
Script](https://developer.chrome.com/extensions/content_scripts)从网页链接（``标签）以及视频链接（``标签）中收集可能存在的视频URL。Content
Scripts实际上是JavaScript代码段，运行在用户在浏览器中已经访问过的网页上（在这种情况下为用户访问过的每一个页面）。以下代码片段摘抄自该扩展的Content
Script代码：
    vd.getVideoLinks = function(node) {
        // console.log(node);
        var videoLinks = [];
        $(node)
            .find('a')
            .each(function() {
                var link = $(this).attr('href');
                var videoType = vd.getVideoType(link);
                if (videoType) {
                    videoLinks.push({
                        url: link,
                        fileName: vd.getLinkTitleFromNode($(this)),
                        extension: '.' + videoType
                    });
                }
            });
        $(node)
            .find('video')
            .each(function() {
                // console.log(this);
                var nodes = [];
                // console.log($(this).attr('src'));
                $(this).attr('src') ? nodes.push($(this)) : void 0;
                // console.log(nodes);
                $(this)
                    .find('source')
                    .each(function() {
                        nodes.push($(this));
                    });
                nodes.forEach(function(node) {
                    var link = node.attr('src');
                    if (!link) {
                        return;
                    }
                    var videoType = vd.getVideoType(link);
                    videoLinks.push({
                        url: link,
                        fileName: vd.getLinkTitleFromNode(node),
                        extension: '.' + videoType
                    });
                });
            });
        return videoLinks;
    };
如上所示，代码会迭代处理链接及视频元素，将收集到的信息存放到`videoLinks`数组中然后返回。我们能控制的`videoLinks`元素属性为`url`（来自于`href`属性）及`fileName`（来自于`title`属性、`alt`属性或者节点的内部文本）。
`vd.findVideoLinks`函数会调用上述代码：
    vd.findVideoLinks = function(node) {
        var videoLinks = [];
        switch (window.location.host) {
            case 'vimeo.com':
                vd.sendVimeoVideoLinks();
                break;
            case 'www.youtube.com':
                break;
            default:
                videoLinks = vd.getVideoLinks(node);
        }
        vd.sendVideoLinks(videoLinks);
    };
当页面加载时就会调用上面这个函数：
    vd.init = function() {
        vd.findVideoLinks(document.body);
    };
    vd.init();
提取所有链接后，插件会通过`vd.sendVideoLinks`函数将这些链接发送到插件的后台页面。插件后台页面声明的消息监听器如下所示：
    chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
        switch (request.message) {
            case 'add-video-links':
                if (typeof sender.tab === 'undefined') {
                    break;
                }
                vd.addVideoLinks(request.videoLinks, sender.tab.id, sender.tab.url);
                break;
            case 'get-video-links':
                sendResponse(vd.getVideoLinksForTab(request.tabId));
                break;
            case 'download-video-link':
                vd.downloadVideoLink(request.url, request.fileName);
                break;
            case 'show-youtube-warning':
                vd.showYoutubeWarning();
                break;
            default:
                break;
        }
    });
对我们来说，我们关注的是`add-video-links`这个`case`，由于我们的`send.tab`未定义（`undefined`），因此代码会使用前面构造的视频链接数据来调用`vd.addVideoLinks`。`addVideoLinks`的代码如下：
    vd.addVideoLinks = function(videoLinks, tabId, tabUrl) {
        ...trimmed for brevity...
        videoLinks.forEach(function(videoLink) {
            // console.log(videoLink);
            videoLink.fileName = vd.getFileName(videoLink.fileName);
            vd.addVideoLinkToTab(videoLink, tabId, tabUrl);
        });
    };
如上代码会检查之前是否存储了与这个`tabId`对应的链接，如果不满足该情况，则会创建一个新的对象来完成该操作。插件通过`vd.getFileName`函数来遍历每个链接中的`fileName`属性，该函数的代码如下：
    vd.getFileName = function(str) {
        // console.log(str);
        var regex = /[A-Za-z0-9()_ -]/;
        var escapedStr = '';
        str = Array.from(str);
        str.forEach(function(char) {
            if (regex.test(char)) {
                escapedStr += char;
            }
        });
        return escapedStr;
    };
该函数通过链接的`fileName`属性直接扼杀了我们获得DOM-XSS漏洞的希望。函数会过滤掉与`[A-Za-z0-9()_
-]`正则表达式不匹配的任何字母，其中就包含`"`，而不幸的是我们可以通过该字符打破闭合的HTML属性。
因此留给我们的只有`url`属性，让我们继续分析。
`videoLink`会被发送到`vd.addVideoLinkToTab`函数，该函数如下所示：
    vd.addVideoLinkToTab = function(videoLink, tabId, tabUrl) {
        ...trimmed for brevity...
        if (!videoLink.size) {
            console.log('Getting size from server for ' + videoLink.url);
            vd.getVideoDataFromServer(videoLink.url, function(videoData) {
                videoLink.size = videoData.size;
                vd.addVideoLinkToTabFinalStep(tabId, videoLink);
            });
        } else {
            vd.addVideoLinkToTabFinalStep(tabId, videoLink);
        }
    };
该脚本会检查链接是否包含`size`属性。在这种情况下，由于没有设置`size`，因此代码会通过`vd.getVideoDataFromServer`来获取链接地址处的文件大小：
    vd.getVideoDataFromServer = function(url, callback) {
        var request = new XMLHttpRequest();
        request.onreadystatechange = function() {
            if (request.readyState === 2) {
                callback({
                    mime: this.getResponseHeader('Content-Type'),
                    size: this.getResponseHeader('Content-Length')
                });
                request.abort();
            }
        };
        request.open('Get', url);
        request.send();
    };
上述代码会发起`XMLHTTPRequest`请求来获取指定链接处文件的头部信息，然后提取其中的`Content-Type`和`Content-Length`字段。这些数据会返回给调用方，然后`videoLinks`元素的`size`属性值会被设置为`Content-Length`字段的值。该操作完成后，结果会传递给`vd.addVideoLinkToTabFinalStep`：
    vd.addVideoLinkToTabFinalStep = function(tabId, videoLink) {
        // console.log("Trying to add url "+ videoLink.url);