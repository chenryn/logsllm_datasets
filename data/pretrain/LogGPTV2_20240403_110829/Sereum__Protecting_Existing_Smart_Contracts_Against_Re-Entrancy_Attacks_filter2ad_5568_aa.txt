title:Sereum: Protecting Existing Smart Contracts Against Re-Entrancy Attacks
author:Michael Rodler and
Wenting Li and
Ghassan O. Karame and
Lucas Davi
Sereum: Protecting Existing Smart Contracts Against
Re-Entrancy Attacks
Michael Rodler1, Wenting Li2, Ghassan O. Karame2, Lucas Davi1
1University of Duisburg-Essen, Germany
{michael.rodler,lucas.davi}@uni-due.de
2NEC Laboratories Europe, Germany
PI:EMAIL
PI:EMAIL
Abstract—Recently, a number of existing blockchain systems
have witnessed major bugs and vulnerabilities within smart con-
tracts. Although the literature features a number of proposals for
securing smart contracts, these proposals mostly focus on proving
the correctness or absence of a certain type of vulnerability within
a contract, but cannot protect deployed (legacy) contracts from
being exploited. In this paper, we address this problem in the
context of re-entrancy exploits and propose a novel smart contract
security technology, dubbed Sereum (Secure Ethereum), which
protects existing, deployed contracts against re-entrancy attacks
in a backwards compatible way based on run-time monitoring
and validation. Sereum does neither require any modiﬁcation
nor any semantic knowledge of existing contracts. By means of
implementation and evaluation using the Ethereum blockchain,
we show that Sereum covers the actual execution ﬂow of a
smart contract to accurately detect and prevent attacks with a
false positive rate as small as 0.06% and with negligible run-
time overhead. As a by-product, we develop three advanced re-
entrancy attacks to demonstrate the limitations of existing ofﬂine
vulnerability analysis tools.
I.
INTRODUCTION
The massive adoption of Bitcoin has fueled innovation, and
there are currently more than 500 alternative blockchains—
most of which are simple variants of Bitcoin [9]. Bitcoin
unveiled a key-enabling technology and a hidden potential,
the blockchain. Indeed, the blockchain allows transactions, and
any other data, to be securely stored and veriﬁed without
the need of any centralized authority. Currently, a number
of blockchains, such as Ethereum, provide means to execute
programs on the blockchain. These programs are referred to as
smart contracts and allow nearly arbitrary (Turing-complete)
business logic to be implemented. In Ethereum, smart con-
tracts are, besides the Ether cryptocurrency, a crucial part of
the blockchain. Ethereum allows to attach a smart contract
program to an address. When a transaction involves such an
address, the nodes in the Ethereum network will execute the
contract, which can trigger further transactions, update state
on the blockchain, or simply abort the transaction.
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23413
www.ndss-symposium.org
it
is vital
In blockchain systems, such as Ethereum, smart contracts
are capable of owning and autonomously transferring currency
to other parties. As such,
that smart contracts
execute correctly and satisfy the intention of all stakeholders.
Recently, the blockchain community has witnessed a number
of major bugs and vulnerabilities within smart contracts. In
some cases, vulnerabilities allowed an attacker to maliciously
extract currency from a contract. For instance, the infamous
attack on the “TheDAO” smart contract resulted in a loss of
over 50 million US Dollars worth of Ether at the time the attack
occurred [35]. The DAO attack is an instance of a re-entrancy
attack where the main contract calls an external contract which
again calls into the calling contract within the same transaction.
These attacks have fueled interest in the community to
conduct research on solutions dedicated to enhance the secu-
rity of smart contracts. Recently presented approaches range
from devising better development environments to using safer
programming languages [14], formal veriﬁcation [25] and
symbolic execution [29]. Prior work has focused primarily
on techniques that detect and prevent possible vulnerabilities
upfront. For instance, Oyente [29] proposed using symbolic
execution to ﬁnd vulnerabilities in smart contracts. ZEUS [25]
uses model checking to verify the correctness of smart con-
tracts, and Securify [42] performs advanced static analysis
to infer semantic facts about data-ﬂows in a smart contracts
to prove the presence or absence of vulnerabilities. Other
recent approaches use symbolic execution to automatically
construct exploits in order to demonstrate the vulnerability of
an analyzed smart contract [27], [32].
Challenges in Fixing Smart Contracts. We note that ﬁxing
discovered bugs in smart contracts is particularly challenging
due to three key challenges: (1) the code of a smart contract is
expected to be immutable after deployment, (2) smart contract
owners are anonymous, i.e., responsible disclosure is usually
infeasible, and (3) existing approaches are mostly performing
ofﬂine analysis and are susceptible to missing unknown run-
time attack patterns. As a consequence of (1), approaches that
prove correctness or absence of a certain type of vulnerabil-
ity [25], [29], [42] are only important for the development
of future smart contracts, but leave already deployed (legacy)
contracts vulnerable. More speciﬁcally, to deal with a vulnera-
ble contract and restore a safe state, the owner of the contract
must deprecate the vulnerable contract, move all funds out
of the contract, deploy a new contract, and move the funds to
the new contract. This process is largely cumbersome since the
address of the vulnerable contract might be referenced by other
contracts (see for example [39]). Even if this process could
be simpliﬁed, it remains still unclear how to contact contract
owners to inform them about contract vulnerabilities. For
instance, a recent study was able to generate exploits to steal
Ether from 815 existing smart contracts. However, the authors
refrained from mentioning any particular smart contract as
it was not possible to report the discovered bugs to any of
the creators [27]. Finally, ofﬂine analysis techniques typically
cannot fully cover the run-time behavior of a smart contract
thereby missing novel attacks exploiting code constructs that
were believed to be not exploitable.
Research Question. Given these challenges, this paper aims to
answer the question whether we can protect legacy, vulnerable
smart contracts from being exploited without (1) changing
the smart contract code, and (2) possessing any semantic
knowledge on the smart contract. To answer this question, we
focus our analysis on re-entrancy attacks. Among the attack
techniques proposed against smart contracts [10], re-entrancy
attacks play a particular role as they have been leveraged in
the DAO attack [35] which is undoubtedly the most popular
smart contract attack until today. Recent studies also argue
that many smart contracts are vulnerable to re-entrancy, e.g.,
Oyente reports 185 and Securify around 1,400 contracts as
vulnerable to re-entrancy attacks [29], [42]. In addition, re-
entrancy attack patterns are suitable for run-time detection
given the conditions mentioned in our research question (i.e.,
no code changes, no prior knowledge). Surprisingly, as our
systematic investigation reveals, new classes of re-entrancy
attacks, beyond DAO, can be developed without being detected
by the plethora of existing defenses proposed in the literature,
such as [25], [29], [42].
Contributions. In this paper, we present
the design and
implementation of a novel smart contract security technology,
called Sereum (Secure Ethereum), which is able to protect
existing, deployed contracts against re-entrancy attacks in a
backwards compatible way by performing run-time monitoring
of smart contract execution with negligible overhead. Given
our run-time monitoring technique, Sereum is able to cover
the actual execution ﬂow of a smart contract to accurately
detect and prevent attacks. As such, our approach also sheds
important lights on the general problem of incompleteness of
any ofﬂine, static analysis tool. To underline this fact, we
develop three new re-entrancy attacks in Section III (cross-
function, delegated, and create-based re-entrancy) that under-
mine existing vulnerability detection tools [29], [42] but are
detected in Sereum.
Our prototype implementation (cf. Section V) targets the
Ethereum Virtual Machine (EVM) which is currently the most
popular platform for running smart contracts. In this context,
we introduce a hardened EVM which leverages taint tracking
to monitor execution of smart contracts. While taint tracking is
a well-known technique to detect leakage of private data [19]
or memory corruption attacks [13], we apply it for the ﬁrst time
to a smart contract execution platform. Speciﬁcally, we exploit
taint analysis to monitor data ﬂows from storage variables to
control-ﬂow decisions. Our main idea (cf. Section IV) is to
introduce write locks, which prevent the contract from updat-
ing storage variables in other invocations of the same contract
of one Ethereum transaction. Sereum prevents any write to
variables, which would render the contract’s state inconsistent
with a different re-entered execution of the same contract.
Sereum also rolls back transactions that
trigger an invalid
write to variables—thereby effectively preventing re-entrancy
attacks. Sereum can also be used as a passive detection tool,
where it does not rollback attack transactions, but only issues
a warning for detected attacks.
We perform an extensive evaluation of our Sereum pro-
totype by re-executing a large subset of transactions of the
Ethereum blockchain (cf. Section VI). Our results show that
Sereum detects all malicious transactions related to the DAO
attack, and only incurs 9.6% run-time overhead; we further
verify our ﬁndings by using existing vulnerability detection
tools and manual code analysis on selected contracts. Although
Sereum only results in 0.06% of false positives, we provide
a thorough investigation of false positive associated with our
approach and other existing static analysis tools [29], [42]
thereby demonstrating that Sereum provides improved detec-
tion of re-entrancy attacks compared to existing approaches
with negligible run-time overhead.
II. BACKGROUND
In this section, we recall the basics of smart contracts
and the Ethereum Virtual Machine (Section II-A). We also
describe the implementation details of existing re-entrancy
attacks (Section II-B), and discuss common defense techniques
against these attacks (Section II-C).
A. Smart Contracts and the Ethereum Virtual Machine
In general, the blockchain consists of a distributed ledger
where transactions are committed in the same order across
all nodes. Smart contracts typically consist of self-contained
code that is executed by all blockchain nodes. The execution
of smart contracts is typically conﬁned to a deterministic
context (e.g., based on the same input,
ledger state, run-
time environment) which is replicated on benign nodes. This
ensures that the state update on the ledger is propagated to all
nodes in the network.
The currently most popular blockchain technology for
smart contracts is Ethereum [44]. Ethereum smart contracts re-
ceive and send the cryptocurrency Ether. Contracts are invoked
through transactions which are issued either by Ethereum
clients or other contracts. Transactions need to specify the
invoked contract functions, which are public interfaces exposed
by the target contracts. In order to incentivize the network to
execute contracts, Ethereum relies on the mechanism of gas:
the amount of gas corresponding to a contract relates to the cost
of executing that contract and is paid along with the invocation
transaction by the sender in Ether to fuel the execution of a
contract. This mechanism also prevents vulnerable code (e.g.,
inﬁnite loops) from harming the entire network.
Although Ethereum supports several programming lan-
guages and compilers,
the most common language for
Ethereum contracts is currently Solidity [5]. The bytecode
of contracts (generated by the Solidity compiler solc) is
distributed via dedicated contract creation transactions and
gets executed by the EVM on each local node. Once the
contract creation transaction is committed to the ledger, all
2
nodes compute the contract address—which is required to
invoke contracts—and initialize the contract code and data.
Ethereum Virtual Machine (EVM). The EVM follows the
stack machine architecture, where instructions either pop
operands from the data stack or use constant operands. The
overall architecture of the EVM is tailored towards the pecu-
liarities of blockchain environments [44]:
•
Execution Context: To ensure that a transaction
execution is deterministically, all environmental in-
formation is ﬁxed with respect to the block where
the transaction is contained. For instance, a contract
cannot use the system time. Instead, it must use the
current block number and timestamp.
• Memory: An EVM contract can use three different
memory regions to store mutable data during the
execution: stack, memory and storage. The stack is
a volatile memory region whose content can only
be changed with dedicated instructions. The EVM
distinguishes the call stack (maximum depth 1024)
from the data stack. The so-called memory is a volatile
heap-like memory region, where every byte is address-
able. The only state persistent across transactions is
maintained in the storage region which can be thought
of a key-value store that maps 256-bit words to 256-bit
words.
Procedure Calls: The EVM CALL instruction can
be considered as a Remote Procedure Call (RPC)
as it transfers control to another (untrusted) contract.
DELEGATECALL is similar to CALL with the dif-
ference that
the invoked contract shares the same
execution context as the caller. Consecutive calls are
pushed to the EVM call stack; an exception will be
thrown once the maximum call stack depth is reached.
•
B. Re-entrancy Problem
Re-entrancy attacks emerge as one of the most severe and
effective attack vectors against smart contracts. Re-entrancy
of a contract occurs when a contract calls another (external)
contract which again calls back into the calling contract.
All these actions are executed within a single transaction.
Legitimate re-entrancy often happens during normal contract
execution, as it is part of common and ofﬁcially supported pro-
gramming patterns for Ethereum smart contracts [6]. Consider
the common withdrawal pattern [6] depicted in Figure 1 which
shows how contract A withdraws 100 wei from contract B.
The key rationale of re-entrancy is to allow other contracts to
withdraw funds from their balance. In Figure 1, contract A
invokes the public withdraw function of contract B, whereas
B subsequently invokes the msg.sender.send.value function
to A (i.e., msg.sender is
to transfer the speciﬁed amount
representing the calling contract A). In Ethereum, Ether is
transferred by means of a function call, e.g., contract B must
call back (re-enter) into contract A’s fallback function to send
the funds. The fallback function is indicated by the function
without function name.
To support calling other contracts Solidity supports two
high-level constructs for calling into another contract: send
and call. Both are implemented as CALL instructions on the
3
1
2
3
4
5
6
7
8
9
10
contract A {
function f() { b.withdraw(100); }
function () public payable { }
}
contract B {
function withdraw(uint amount) public {
msg.sender.send.value(amount)();
}
}
Figure 1. Common withdrawal pattern in Solidity: the upper part shows the