i ]}i =0..N−1
′
i r
′′−1
i
(22)
158Entities
Delegator (Alice)
Proxy (Cloud) Delegate (Bob)
Time computation (sec)
Encrypted data volume (bits)
0.004
0
120
22986753
30
4096
Table 1: Amount of information stored (in bits) as well as the corresponding computation time that each entity needs (Alice,
Bob and the cloud) for sharing an image of 92 × 122 pixels.
4 EXPERIMENTAL RESULTS
This solution was experimented in the case of the sharing of un-
compressed images. 400 test images issued from Olivetti Research
Laboratory of Cambridge, UK, were used. They are 8 bit encoded
and of 92× 122 pixels (see sample in Fig. 3). Images were encrypted
with Damgard-Jurik public keys of more than 1024 bits and n = 1 in
order to provide a high level of security. Performance of our scheme
are evaluated in terms of storage and computation complexity. Our
HPRE was implemented in C/C++ with GMP library and all experi-
ments were conducted using a machine equipped with four-Core
and 23GB RAM running on Ubuntu 14.04 LTS.
Storage complexity : in the case images are Damgard-Jurik
encrypted with a key of 1024 bits, one encrypted image represents
2, 7Mo into the cloud. For one image, Alice outsources, she only has
to store on her side the random values (rX,0, rY ,0, rcX , rcY ). During
an image exchange, Alice sends the encrypted seed (EKp1[X0, rX,0],
EKp1[Y0, rY ,0]), the encrypted increments
(EKp1[cX , rcX ], EKp1[cY , rcY ]) and the multipliers (aX , aY ). This
amount of data is bounded by O(loд2(K2
p1)). For a key of 1024 bits,
it is closed to 2048 bits. On its side, Bob has to store (X0, Y0), the
CLCG secret key, but only for one exchange.
Computation complexity : On Alice side, the computation
complexity is limited to the encryption of the SCLCG parameters
(i.e. X0, Y0, cX and cY ). Regarding the cloud, it has to: compute the
secret random sequence, the difference between encrypted data,
the refreshment noise, the encrypted version of the refreshed dif-
ferences and the noise removal. For an image of N pixels, the secret
random sequence generation is equivalent to 2N encryptions. The
computation of the differences {Di}i =0...N−1 is equivalent to N en-
cryptions. As the noise refreshment procedure consists in modular
additions, its complexity is negligible compared to encryption op-
erations. The encryption of the differences {Gi}i =0...N−1 is made
of N encryptions. To sum-up, the computation complexity for the
cloud is bounded by O(4N) encryptions. The delegate computation
complexity stands on the noise refreshment procedure. He has to
generate a CLCG random sequence (i.e. {Zi}i =0...N−1), a task the
complexity of which is negligible compared to the N encryptions of
the noise (i.e. {βi}i =0...N−1) he also produces and that he next sends
to the cloud. The computation complexity of the delegate is thus of
N encryptions. We provide in Table 1 the amount of data that each
entities has to store as well as the computation time required in
the case of sharing images of our data set. Our HPRE scheme takes
about 2 minutes so as to share an image with a standard computer.
5 SECURITY ANALYSIS
The proposed HPRE scheme allows two users, Alice (the delegator)
and Bob (the delegate), to share data stored into the cloud (the proxy)
considered as semi-honest. In the following, we discuss its security
in terms of data confidentiality, unidirectionality and collusion re-
sistance. Before entering into the details, let us recall the different
elements the cloud knows or has access to. They correspond to:
the public keys of Alice (Kp1) and Bob (Kp2); the encrypted data
of Alice: {EKp1[Ii , ri]}i =0...N−1; the multipliers (aX , aY ) and the
encrypted increments (EKp1[cX , rcX ],EKp1[cY , rcY ]); the encrypted
sequence generated by the SCLCG: {EKp1[Zi , ri]}i =0...N−1. The
security of our HPRE mainly stands on the one of SCLCG which
plays an important role in our scheme. If the cloud accesses to the
clear random sequence {Zi}i =0...N−1, it will be able to decrypt all
data Alice and Bob want to share. However, this is not possible
as our SCLCG is parametrized with (EKp1[cX , rcX ],EKp1[cY , rcY ]),
(aX , aY ) and (EKp1[X0, rX,0],EKp1[Y0, rY ,0]) in order to generate
{EKp1[Zi , ri]}i =0...N−1. Even though, aX and aY are in clear, both
value do not contribute to the CLCG security (see Section 3). As a
consequence, all data being encrypted, the cloud cannot infer any
information on cX , cY , X0 and Y0 on {Zi}i =0...N−1 As stated, Al-
ice’s data {Ii}i =0...N−1 and the random sequence {Zi}i =0...N−1 are
Damgard-Jurik encrypted with the same random values {ri}i =0...N−1
under the constraint (16). Let us see, that this relationship does not
endanger the confidentiality of the data. The security analysis of the
Damgard-Jurik cryptosystem has been investigated in [9] looking
at different models of attacks: ciphertext only attack, chosen ci-
phertext attack, known plaintext attack and chosen plaintext attack.
These attacks correspond to different scenarios, considering the
access or not to some a priori knowledge that could help to discover
the user’s private key or to decrypt data without the private key.
It has been shown that if the Damgard-Jurik cryptosystem is not
secure under the chosen ciphertext attack, as all actual homomor-
phic cryptosystems, it is secure against the three other attacks. Our
HPRE achieves the same performance even if there is a recursive
relationship in-between the random values used to Damgard-Jurik
encrypt consecutive pixels of an image. More clearly, since the
random values of the encrypted image are generated from the equa-
tion (16) then an attacker can try to synchronize the random values
of two encrypted pixels and then calculates the difference between
them using our method that was presented in Section 2.2. That is
to say, the cloud can try to synchronize the random value of an
encrypted pixel E[Ii , ri] with the one of the following encrypted
pixel E[Ii +1, ri +1] based on their relationship given as
ri +1 = rX,i +1rY ,i +1 = rir
aX −1
X,i
rcX r
aY −1
Y ,i
rcY
(23)
159As the cloud knows the CLCG parameter (i.e. {E[Xi , rX,i]}i =0...N−1,
{E[Yi , rY ,i]}i =0...N−1, E[cX , rcX ], E[cY , rcY ], aX , aY and
{E[Zi , ri]}i =0...N−1), it can compute
E[Ii , ri]E[Xi , rX,i]aX −1E[Yi , rY ,i]aY −1E[cX , rcX ]E[cY , rcY ] =
=
=
=
=
E[Ii + (aX − 1)Xi + cX + (aY − 1)Yi + cY , ri +1]
E[Ii + aX Xi + cX + aY Yi + cY − Yi − Xi , ri +1]
E[Ii + Xi +1 + Yi +1 − Yi − Xi , ri +1]
E[Ii + Zi +1 − Zi , ri +1]
(24)
because the encrypted data are synchronized in terms of random
values, the cloud will be able to compute the difference
De(E[Ii +1, ri +1], E[Ii + Zi +1 − Zi , ri +1]) =
=
=
Ii +1 − Ii − Zi +1 + Zi
Di − Di +1
(25)
After the cloud computed the secure random sequence
from which it cannot deduce any information about Ii nor Ii +1
as it don’t know Zi and Zi +1. Notice also that if the cloud knows
the initial random value r0 associated to the CLCG seed, it will be
able to decrypt I0 and Z0. But, to decrypt the rest of the image, it
needs to access the values (rcx , rcy) (see section 3.2). In our frame-
work, the cloud only has access to EKp1[X0, rX,0], EKp1[Y0, rY ,0])
and (EKp1[cX , rcX ], EKp1[cY , rcy]) from which it cannot derive any
information.
{EKp1[Zi , ri]}i =0...N−1, it computes the differences in-between this
sequence and the data of Alice {EKp1[Ii , ri]}i =0...N−1 getting access
to the sequence D = {Di = Ii − Zi}i =0...N−1. D corresponds to
a blinded version of I by the LCG sequence, a modulo Kp1 set of
values (see section 3.2). We invite the reader to refer to [19] about
the security of such CLCG blinding scheme. In the case of a b bits
encoded image of N pixels, one will have to use a brute force attack
so as to recover the image, that is to say 2b∗N operations. Applied
to the image of Fig. 3, the attacker needs 28∗122∗92 operations.
A unidirectional PRE scheme ensures that the proxy (the cloud)
can only convert a ciphertext under the public key of Alice into a
ciphertext under the public key of Bob but not the inverse. More
clearly, the proxy should not be able to encrypt some data of Bob
under the public key of Alice. Our scheme achieves this property.
Data sharing is based on the computation of differences between
data that are synchronously encrypted in terms of random values
(i.e. ri values) followed by a noise refreshment procedure under the
control of Bob only. One consequence of this refreshment procedure
is the change of the random values used to encrypt the data of
Alice (see Section 3.2). It is thus not possible for the cloud to reuse
the SCLCG random sequence parameterized by Alice so as to re-
encrypt the data Bob received without his agreement. Bob will have
to agree with Alice of new exchange parameters. If we generalize,
it is not possible for the cloud to convert any data of Bob without
his agreement. This is also case even if Alice and the cloud collude,
due to the fact the noise procedure is only under the control of
Bob. Collusion-resistance is another important security property in
proxy re-encryption. If Bob and the cloud collude, thus having the
knowledge of the whole system parameters as well as of the data
shared in both clear and encrypted forms, they should not be able
to find the private key of Alice (Ks1). Such a situation corresponds
to the Chosen Plaintext Attack (CPA) model. Being based on the
Damgard-Jurik cryptosystem [9], our HPRE scheme satisfies this
property. As a consequence, the cloud and Bob cannot retrieve the
private key of Alice from her public key and a set of Alice’s data
encrypted and in a clear form. Notice that a few number of PRE
schemes satisfies the collusion-resistance security [16]. Finally, if
Alice wants to share data with another user than Bob, it is necessary
she changes the seeds (X0, Y0), otherwise both the cloud and Bob
will be able to access these data without permission.
To sum up, our HPRE scheme is unidirectional, collusion resistant
and prevents a malicious proxy (i.e. the cloud) from learning: the
private keys of Bob and Alice; the plaintext version of the data of
Alice or Bob without their private keys. Beyond our HPRE solution
can be applied to all kind of documents (e.g., PDF or Word files).
6 CONCLUSIONS
In this paper, we proposed the first homomorphic proxy re-encryption
scheme. Its originality stands on a solution we propose so as to com-
pute the difference of data encrypted with the fast version of the
Damgard-Jurik cryptosystem. It takes also advantage of a secure lin-
ear congruential generator we implemented in the Damgard-Jurik
encrypted domain. This one drastically reduces the computation
complexity of the cloud and of the delegator. Furthermore, this
solution doesn’t need extra communication between the cloud and
the delegator, i.e. the data owner. Moreover, since the data are ho-
momorphically encrypted, it is possible to process outsourced data
while ensuring their confidentiality. Our HPRE was implemented in
the case of the sharing of uncompressed images stored in the cloud
showing good time computation performance. It is not limited to
images and can be used with any kinds of data.
ACKNOWLEDGMENTS
This work has been supported by the French national research
agency through the LabCom SePEMeD under reference ANR-13-
LAB2-0006-01, and the ANR project INSHARE, ANR-15-CE19-0024-
02.
REFERENCES
[1] Giuseppe Ateniese, Kevin Fu, Matthew Green, and Susan Hohenberger. 2006.
Improved proxy re-encryption schemes with applications to secure distributed
storage. ACM Transactions on Information and System Security (TISSEC) 9, 1
(2006), 1–30.
[2] Joonsang Baek, Reihaneh Safavi-Naini, and Willy Susilo. 2005. Certificateless
public key encryption without pairing. In International Conference on Information
Security. Springer, 134–148.
[3] Reda Bellafqira, Gouenou Coatrieux, Dalel Bouslimi, and Gwénolé Quellec. 2015.
Content-based image retrieval in homomorphic encryption domain. In Engi-
neering in Medicine and Biology Society (EMBC), 2015 37th Annual International
Conference of the IEEE. IEEE, 2944–2947.
[4] Reda Bellafqira, Gouenou Coatrieux, Dalel Bouslimi, and Gwénolé Quellec. 2016.
An end to end secure CBIR over encrypted medical database. In Engineering
in Medicine and Biology Society (EMBC), 2016 IEEE 38th Annual International
Conference of the. IEEE, 2537–2540.
[5] Matt Blaze, Gerrit Bleumer, and Martin Strauss. 1998. Divertible protocols and
atomic proxy cryptography. In International Conference on the Theory and Appli-
cations of Cryptographic Techniques. Springer, 127–144.
160[6] Dalel Bouslimi, Reda Bellafqira, and Gouenou Coatrieux. 2016. Data hiding in
homomorphically encrypted medical images for verifying their reliability in both
encrypted and spatial domains. In Engineering in Medicine and Biology Society
(EMBC), 2016 IEEE 38th Annual International Conference of the. IEEE, 2496–2499.
[7] Emmanuel Bresson, Dario Catalano, and David Pointcheval. 2003. A simple
public-key cryptosystem with a double trapdoor decryption mechanism and
its applications. In International Conference on the Theory and Application of
Cryptology and Information Security. Springer, 37–54.
[8] Cheng-Kang Chu and Wen-Guey Tzeng. 2007. Identity-based proxy re-encryption
without random oracles. In International Conference on Information Security.
Springer, 189–202.
[9] Ivan Damgård and Mads Jurik. 2003. A length-flexible threshold cryptosystem
with applications. In Australasian Conference on Information Security and Privacy.
Springer, 350–364.
[10] Robert H Deng, Jian Weng, Shengli Liu, and Kefei Chen. 2008. Chosen-ciphertext
secure proxy re-encryption without pairings. In International Conference on
Cryptology and Network Security. Springer, 1–17.
[11] W. Diffie and M. Hellman. 2006. New Directions in Cryptography. IEEE Trans.
Inf. Theor. 22, 6 (Sept. 2006), 644–654. https://doi.org/10.1109/TIT.1976.1055638
[12] Yevgeniy Dodis and Anca Ivan. 2003. Proxy cryptography revisited. In Proceedings
of the Tenth Network and Distributed System Security Symposium. 514–532.
[13] Matthew Green and Giuseppe Ateniese. 2007. Identity-based proxy re-encryption.
In Applied cryptography and network security. Springer, 288–306.
[14] Jinguang Han, Willy Susilo, and Yi Mu. 2013. Identity-based data storage in cloud
computing. Future Generation Computer Systems 29, 3 (2013), 673–681.
[15] Markus Jakobsson. 1999. On quorum controlled asymmetric proxy re-encryption.
In International Workshop on Public Key Cryptography. Springer, 112–121.
[16] Kee Sung Kim and Ik Rae Jeong. 2016. Collusion-resistant unidirectional proxy
re-encryption scheme from lattices. Journal of Communications and Networks 18,
1 (2016), 1–7.
[17] Pierre LâĂŹecuyer. 1999. Tables of linear congruential generators of different
sizes and good lattice structure. Mathematics of Computation of the American
Mathematical Society 68, 225 (1999), 249–260.
[18] Pierre L’ecuyer, Richard Simard, E Jack Chen, and W David Kelton. 2002. An
object-oriented random-number package with many long streams and substreams.
Operations research 50, 6 (2002), 1073–1075.
[19] Chung-Chih Li and Bo Sun. 2005. Using Linear Congruential Generators for
Cryptographic Purposes.. In Computers and Their Applications. 13–19.
[20] Xiaohui Liang, Zhenfu Cao, Huang Lin, and Jun Shao. 2009. Attribute based proxy
re-encryption with delegating capabilities. In Proceedings of the 4th International
Symposium on Information, Computer, and Communications Security. ACM, 276–
286.
[21] Yukun Ma, Lifang Wu, Xiaofeng Gu, Jiaoyu He, and Zhou Yang. 2017. A Secure
Face Verification Scheme Based on Homomorphic Encryption and Deep Neural
Networks. IEEE Access (2017).
[22] Toshihiko Matsuo. 2007. Proxy re-encryption systems for identity-based en-
cryption. In International Conference on Pairing-Based Cryptography. Springer,
247–267.
[23] Pascal Paillier. 1999. Public-key cryptosystems based on composite degree resid-
uosity classes. In International Conference on the Theory and Applications of
Cryptographic Techniques. Springer, 223–238.
[24] Ronald L Rivest, Len Adleman, and Michael L Dertouzos. 1978. On data banks
and privacy homomorphisms. Foundations of secure computation 4, 11 (1978),
169–180.
[25] Brian A Wichmann and I David Hill. 1982. Algorithm AS 183: An efficient and
portable pseudo-random number generator. Journal of the Royal Statistical Society.
Series C (Applied Statistics) 31, 2 (1982), 188–190.
[26] Peng Xu, Tengfei Jiao, Qianhong Wu, Wei Wang, and Hai Jin. 2016. Conditional
identity-based broadcast proxy re-encryption and its application to cloud email.
IEEE Trans. Comput. 65, 1 (2016), 66–79.
161