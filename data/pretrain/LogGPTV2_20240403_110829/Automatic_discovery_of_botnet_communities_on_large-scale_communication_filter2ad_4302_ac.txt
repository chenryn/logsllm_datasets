traffic,  human  being's  behavior  are  more  diverse  with 
various  possibilities  compared  to  the  malicious  traffic 
generated by bots. Given the frequency vectors for n flows: 
{
 ,
 ,… 1
f
 } 
Suppose 
σ  is the standard deviation of the 
j
thj
 ASCII over 
n  flows, the  average standard deviation  σ over 256  ACSII 
characters  for  flows  can  be  calculated  by  the  following 
Algorithm 1. Implementation of Botnet detection approach  
formula:  
Function BotDel (F) returns botnet cluster 
Inputs:  Collection  of  data  objects 
i
=
1, 2,...,
N
    Initialization:  
iF
= , 
initialize number of clusters k (i.e. k N=
) by  
assigning each data instance to a cluster so that  
each cluster contains only one data instance 
    Repeat: 
k
k← −  
1
            find the closest pair of clusters and then merge  
them into a single cluster compute distance  
between new clusters and each data of old clusters 
Until:
k =   
2
calculate cluster centers  mc , and standard deviation  
σ σ ,  1 ≤
≤m k  
1,., m
         If 
σ
b
=
min(
σ σ
2
,
,...,
σ
m
)
then cluster b is labeled as  
1
botnet cluster 
Return the botnet cluster b with b
σ . 
In  practice,  labeling  clusters  is  always  a  challenging 
problem  when  applying  unsupervised  algorithm 
for 
intrusion  detection.  Previous  intrusive  cluster  labeling 
methods  are  based  on  two  assumptions:  (1)  there  are  two 
clusters only, one is normal and the other is intrusive, and 
(2)  the  number  of  instances  in  normal  cluster  is  much 
bigger than the number of instances in intrusive cluster [40] 
and  thus  the  cluster  with  small  number  of  instances  is 
usually  labeled  as  intrusive  cluster.  This  is  not  true  in 
botnet detection because the detection is based on specific 
applications  and  the  botnet  traffic  is  sometimes  more 
overwhelming 
size 
communities. 
than  normal 
traffic 
small 
in 
i
σ
256
∑
i 1
=
256
σ =
As an example, Figures 7 and 8 illustrate the average byte 
frequency over the normal IRC flows and IRC botnet flows, 
respectively.  
Figure 7. Average byte frequency over 256 ASCIIs for  
normal IRC flows 
By observing the normal IRC and HTTP Web traffic over a 
Figure 8. Average byte frequency over 256 ASCIIs for  
botnet IRC flows 
6The average standard deviation of byte frequency over 256 
ASCII  characters  for  normal  IRC  traffic  is  0.002  and  the 
maximal  standard  deviation  of  byte  frequency  over  256 
ASCII characters for normal IRC traffic  is 0.05, while the 
average  standard  deviation  of  byte  frequency  over  256 
ASCII  characters  for  IRC  botnet  traffic  is  0.0009  and  its 
maximum  is  0.01,  which  is  much  smaller  than  that  of 
normal  IRC  traffic.  This  observation  confirms  that  the 
normal human being's IRC traffic is more diverse than the 
malicious IRC traffic generated by bots. 
5.  EXPERIMENTAL EVALUATION 
We  implement  a  prototype  system  for  the  approach  and  then 
evaluate  it  on  a  large-scale  WiFi  ISP  network  over  three 
consecutive business days (i.e. 24 hours seamless flow monitoring 
for  each  day).  The  botnet  traffic  consists  of  two  traces:  one  is 
collected  on  a  honeypot  deployed  on  a  real  network,  aggregated 
then  into  243  flows,  and  the  other  is  collected  on  our  testbed 
network,  aggregated  then  into  10  Web  C&C  flows  and  44  IRC 
C&C flows, respectively.  
As illustrated in  Figure  9,  the  testbed  network  is  composed  by  a 
48-port Gigabit switch and 60 computers belonging to  6 VLANs 
(some of the computers are deployed outside the testbed network, 
such  as  the  code  server  for  malware  downloading  and  the  IRC 
server).  We  apply  3  VLANs  during  the  botnet  traffic  collection: 
VLAN2  is  an attack  network, VLAN3  is  the  victim  network  and 
VLAN5 is the zombie network. Traffic traces are collected on the 
interface deployed at the gateway of VLAN5 since it  accepts the 
command  from  botmaster  of  VLAN2  and  starts  the  attack  to 
victim server  in VLAN3.  The IRC bot  we  use is  kaiten  [41]  and 
the  web  based  bot  we  use  in  the  experiment  is  blackenergy 
developed  by  Russian  hacker  community  [42].  The  time  interval 
for flow  aggregation  is  1 second.  When  evaluating  the  prototype 
system, we randomly insert and replay botnet traffic flows on the 
normal  daily  traffic,  in  particular  the  243  IRC  C&C  bot  flows 
collected on a honeypot are included in the first day, the 45 IRC 
C&C bot flows  collected on the testbed  network  are  appeared  in 
the second day and the Web C&C bot flows exist on the third day.  
testing 
for  unknown 
(1) 
the  performance 
Since  our  approach  is  a  two-stage  process  (i.e.  unknown  traffic 
classification 
first  and  botnet  detection  on  application 
communities next), the evaluation is accordingly divided into two 
parts: 
traffic 
classification, not only focusing on the capability of our approach 
to classify the unknown IRC and Web traffic, we also concentrate 
on the classification accuracy for other unknown applications (e.g. 
new  P2P)  since  we  expect  the  algorithm  could  be  extended  to 
detect any new appeared decentralized botnet; (2) the performance 
evaluation for system to discriminate malicious IRC (Web) bonnet 
traffic from normal human being IRC (Web) traffic. 
5.1  Evaluation on Traffic Classification  
Evaluating the  unknown  traffic  classification  capability  is  not  an 
easy task in reality since we  have no idea on  the novel or recent 
appeared  applications  and  it  always  needs  the  intervention  of 
network experts. During our experiment, we randomly choose part 
of  known  traffic  and  then  force  to  label  them  as  unknown.  The 
selection  for  the  number  of  all  these  label  free  traffic  is  decided 
according to  the 40% rule  (i.e.  the  volume  of  unknown  traffic  is 
about 40% over a long time observation on a large-scale network). 
The final unknown traffic set is composed by the forcibly labeled 
known traffic and the botnet flows collected on both honeypot and 
testbed network. Over five days evaluation, we found that all the 
IRC  bot  C&C  flows  are  accurately  classified  into  the  IRC 
application  community  (i.e.  100%  classification  rate  for  IRC 
traffic) and all the Web bot C&C flows are successfully classified 
into the HTTPWeb application community. However, the general 
classification accuracy over all applications is about 85% which is 
not  that  high  compared  to  the  specific  IRC  and  HTTPWeb 
applications.  The  general  classification  accuracy  is  an  average 
value  over  all  application  classification  since  the  approach  has 
different classification rate for different application communities. 
As  an  example,  Table  5  lists  classification  results  over  one  hour 
flows  on  a  real  large  scale  network  in  order  to  show  the 
performance  when  using  our  approach  for  classifying  unknown 
traffic  and  Table  4  is  a  description  about  known  application  set 
and the unknown application set over one hour, such as how many 
known  flows  included  in  the  known  dataset,  how  many  known 
applications  the  flows  belong  to,  how  many  unknown  flows 
Internet 
code server 
IRC server 
Testbed Firewall 
gateway (xxx.xxx.xxx.xxx) 
management VLAN  
• 
• 
SSH Gateway 
IPTables Filtering 
gateway (xxx.xxx.xxx.xxx) 
gateway (xxx.xxx.xxx.xxx) 
VLAN5: zombie network 
xxx.xxx.xxx.xxx -  
xxx.xxx.xxx.xxx 
         VLAN2: attack network                                                   
botmaster  
gateway (xxx.xxx.xxx.xxx) 
victim server 
Figure 9. Testbed network topology 
7included in the unknown set that we want to classify, etc. 
Table 4. Description of known and unknown set over one hour  
Known Flowset 
Unknown Flowset 
Num of Flows  Num. of App.  Num. of Flows  Num. of App.  
176484 
38 
39408 
11 
Table 5. Classification results for unknown  
flows over one hour flows  
Application  
Communities 
Number of  
Flows 
Correct  
False  
Classification 
Classification 
BitTorrent 
Gnutella 
HTTPWeb 
SecureWeb 
12897 
2198 
21435 
2138 
WebFileTransfer 
8 
Web-Ports 
Unknown 
463 
269 
10861 
2187 
18320 
1909 
5 
388 
N/A 
2036 
11 
3115 
229 
3 
75 
N/A 
5.2  Evaluation on Botnet Detection  
The  proposed  approach  is  evaluated  with  three  full  consecutive 
days  traffic.  Table  6  shows  the  flow  distribution  for  the 
application  community  with  bot  flows  and  the  total  number  of 
flows  for  each  day  after  the  traffic  classification  step.  As 
illustrated  in  Table  6,  the  total  number  of  flows  on  the  first 
evaluation day is 32,693K and the number of flows labeled by the 
payload  signature  based  classifier  is  20,596.  The  rest  unknown 
flows are 12,097, in which 243 unknown flows are classified into 
known IRC community (i.e. they actually represent the IRC C&C 
bot flows). Similarly on the second day, the 45 unknown flows are 
classified into the IRC  community,  and  8  unknown  flows  on  the 
third day are classified Web community. Since we know all these 
unknown flows are actually belong to IRC and Web, our approach 
obtains  100%  accuracy  for  classifying  these  malicious  bot  C&C 
flows  into  their  own  application  community.  Next,  we  evaluate 
the capability of our approach for discriminating the bot generated 
traffic from normal traffic in the same application community. As 
illustrated  in  Table  7,  we  show  the  detection  results  in  terms  of 
number  of  correctly  detected  bot  C&C  flows  and  the  number  of 
falsely detected bot flows over the actual number of bot flows and 
normal  flows  on  the  specific  community.  Accordingly  Table  8 
lists the average standard deviation over the 256 characters of the 
payload collected on the network for each cluster. 
From Table 6, we see that the total number of flows we collect for 
one day is over 30 millions and the total number of known flows 
which can be labeled by the payload signatures is over 20 millions. 
The  number  of  IRC  and  Web  C&C  flows  over  the  three 
consecutive days is a very small part of the total flows. Our traffic 
classification  approach  can  classify  the  unknown  (malicious) 
IRC/Web  flows  to  the  IRC/Web  application  communities  with  a 
100% classification rate on the three days evaluation. All the IRC 
C&C  flows  are  differentiated  from  the  normal  traffic  with  a  low 
false alarm rate (i.e. only 4 and 19 false alarms over the first and 
second  day  evaluation,  respectively).  The  detection  results  for 
Web C&C flows on the Web  application community is not quite 
good  and  only  3  malicious  flows  are  hit  over  total  8  Web  C&C 
flows.  The  reason  might  be  due  to  the  clustering  algorithm  we 
apply. The agglomerative hierarchical clustering algorithm we use 
might  have  good  match  with  the  n-gram  features  extracted  from 
IRC  flows,  they  are  not  necessarily  good  at  Web.  The  issue  of 
"Feature  Selections  vs.  Unsupervised  Learning"  is  left  to  our 
future  work.  Moreover,  evaluation  results  from  Table  8  indicate 
that the average standard deviation of byte frequency over the 256 
ASCII  characters  on  the  flow  payload  is  an  important  metric  to 
indicate  normal  human  IRC  clusters  and  malicious  IRC  traffic 
generated by machine bots, while for the clusters on Web clusters, 
the difference between those two standard deviations are not quite 
big  (i.e.  it  is  0.0064  for  the  normal  one  and  0.0026  for  the 