#### 前言
前一段时间，在针对某个网站进行编写爬虫时，遇到一个问题：当持续多次请求一段时间后，需要输入图片验证码后才能继续访问。本以为是常用的图片验证码，于是查看页面源码，去搜索``标签，但是在查找一遍之后，并未发现对应的验证码图片，于是审查元素，定位到图片验证码的位置。发现了这样一段代码：
上面的代码对应的图片如下图：
我对前端并不是很熟悉，于是网上查了一下关于svg验证码的相关知识。碰到了一个100%识别的接口，但是接口已经失效。后来又在github上看到了[haua](https://github.com/haua)大佬的svg验证码识别的项目：[svg-captcha-recognize](https://github.com/haua/svg-captcha-recognize/)，由于他这个是nodejs写的，我想要的是python版本的，于是分析了一下大佬的代码，并自己改了一个python版本的。
**本文只做技术交流，切勿用于非法用途**
#### svg验证码
**svg标签** ：SVG是Scalable Vector Graphics的缩写，意为可缩放矢量图形。
在矢量图形系统中，图形被描述为一些列的形状，它是特定坐标的集合。显示矢量图形需要按照特定的命令来绘制这些坐标，然后显示在屏幕上。矢量图形是对象，而不是一系列的像素。它们可以改变颜色、形状还有大小，图形中的文字都是可以被检索的，这些与栅格图形都有很大的不同。
在svg验证码中，有好几个``标签。``的``元素用于定义一些复杂的图形。它可以结合使用直线，曲线等来制作各种不规则的图形。``元素是SVG基本图形中最为复杂的一个。
所有的绘制工作都是在``中完成的，对于``中的众多属性，解释如下：
    M = moveto(M X,Y) ：将画笔移动到指定的坐标位置
    L = lineto(L X,Y) ：画直线到指定的坐标位置
    H = horizontal lineto(H X)：画水平线到指定的X坐标位置
    V = vertical lineto(V Y)：画垂直线到指定的Y坐标位置
    C = curveto(C X1,Y1,X2,Y2,ENDX,ENDY)：三次贝赛曲线
    S = smooth curveto(S X2,Y2,ENDX,ENDY)：平滑曲率
    Q = quadratic Belzier curve(Q X,Y,ENDX,ENDY)：二次贝赛曲线
    T = smooth quadratic Belzier curveto(T ENDX,ENDY)：映射
    A = elliptical Arc(A RX,RY,XROTATION,FLAG1,FLAG2,X,Y)：弧线
    Z = closepath()：关闭路径
从上面不难看出，svg验证码大致生成的流程就是通过对应的画图命令加上关键点，从而将验证码画出来。
#### 简单分析
[svg-captcha项目地址](https://github.com/produck/svg-captcha/releases)
首先，我们先在本地安装`svg-captcha`：
    npm install --save svg-captcha
使用下面命令，就可以创建一个随机的四位svg验证码：
    var svgCaptcha = require('svg-captcha');
    var captcha = svgCaptcha.create();
使用`console.log(captcha)`得到如下内容：
    {
      text: 'V0ji',
      data: '<path fill="#333" d="M79.76 47.10L79.68 47.02L79.74 47.08Q78.82 47.30 76.92 47.61L76.95 47.64L76.83 47.52Q78.11 45.34 79.14 44.04L79.30 44.21L79.18 44.08Q81.02 44.48 81.17 44.48L81.09 44.39L81.03 44.34Q81.33 44.40 81.86 44.29L82.01 44.44L81.89 44.32Q82.60 44.27 82.79 44.27L82.80 44.28L82.80 44.28Q85.36 44.03 85.29 41.86L85.32 41.89L85.36 41.92Q85.24 40.36 85.13 34.12L85.20 34.20L85.05 34.04Q85.11 30.60 85.19 26.45L85.17 26.43L8
      .......
      '
    }
我们将svg数据部分拷贝粘贴到html文件中，然后用浏览器打开，就可以看到了验证码：
对于`svgCaptcha.create(options)`,如果没有任何参数，则生成的 svg 图片有4个字符。
  * `size`: 4 // 验证码长度
  * `ignoreChars`: '0o1i' // 验证码字符中排除 0o1i
  * `noise`: 1 // 干扰线条的数量
  * `color`: true // 验证码的字符是否有颜色，默认没有，如果设定了背景，则默认有