1 ∧
6 wt5
1 ∧
−φwz23
7 wz24
1 ∧ 1 = B
−swz1
2 wz2
1 ∧ 1 = B
−rwz7
2 wz8
1 ∧ C = wγ
1 ∧ 1 = C
3 wt2
1 ∧ S = wψ
1 ∧ 1 = S
4 wt3
1 ∧ W = wz7
−γwz19
5 wz20
1 ∧ Z = wz5
1 ∧ 1 = Z
7 wt6
1 ∧ 1 = B
2 wz6
2 wz12
3 wz16
1 ∧ 1 = T
5 wz22
B = wδ
1 = B
1 = B
1 = C
T = wz1
1 = T
2wt1
−c2 wz5
−wz11
−ηwz15
5 wt4
−ψwz21
−c1 wz3
1 ∧ 1 = B
1 , W = wz7
2wt1
1 , Z = wz5
1 , C = wγ
7 wt6
6 wt5
3 wt2
−se(˜y, w1)γ
= e( ˜A, w1)ηe( ˜A, w1)z1 e( ˜A, ˜g)
e( ˜A, ˜y)
e(˜g, ˜g)
e( ˜h0, ˜g)c1 e( ˜h0, w1)
e(˜h, w1)
e(˜g, w1)
e(w1, w1)
−z5 e( ˜h2, ˜g)r
−e(˜g, w1)
−z7 e(˜g, w1)z13 e(˜g, w1)
−z15
−δe(˜g, w1)
−z19 e(w1, w1)z21 e(w1, w1)z11 e(w1, w1)z23 ,
−z3 e( ˜h1, ˜g)c2 e( ˜h1, w1)
−z17 e(˜g, w1)
−δe(w1, w1)z9 e(w1, w1)
−φ
the visitor to decrypt the data. Each time of executing this
protocol, the visitor acquires one credential.
Figure 3 presents the uploading data protocol.
In this
protocol, a DO uploads the encrypted data D with its ACL
and RL to DB. DO inputs (D, pkDO, skDO). The input
of DB is (ACL, pkDB, skDB). Upon each executing of the
protocol, one piece of data D is uploaded.
where z1 = sδ, z2 = st1, z3 = δc1, z4 = t1c1, z5 = δc2, z6 =
t1c2, z7 = rδ, z8 = t1r, z9 = δδ, z10 = t1δ, z11 = δ, z12 =
t1, z13 = sγ, z14 = st2, z15 = ηγ, z16 = ηt2, z17 = ψr, z18 =
t3r, z19 = z1γ = sδγ, z20 = t4γ, z21 = z7ψ = rδψ, z22 =
t5ψ, z23 = z5φ = δc2φ and z24 = t6φ.
4. CONSTRUCTION OF SYSTEM
The initialization protocol initializes the whole system and
enables the storage site and the data owner to generate their
public/private key pairs.
DBInit(k)
$← Pg(1k)
$← G; M ← e(g, h); xe
(G, GT , p)
g, h, gB , hB
For i = 1, · · · , l do xi
skDB ← (xe, h, (xi)l
i=1)
pkDB ← (g, ye, M, (yi)l
Return (skDB , pkDB )
$← Zp; yi ← gxi
i=1, gB , hB , p)
$← Zp; ye ← gxe
(a) Storage Site Initialization
DOInit(p)
$← Pg(p);
( ˜G, ˜GT )
$← ˜G; xDO, α, β
g1, g2, h0, h1, h2
skDO ← (xDO, α, β)
pkDO ← (yDO, g1, h0, h1, h2, gα
Return (skDO, pkDO)
2 , gβ
2 )
$← Zp; yDO ← gxDO
1
(b) Data Owner Initialization
Figure 1: Initialization Protocol
Figure 1 shows the details of the initialization protocol.
In Figure 1(a), DB generates a bilinear group pair (G, GT )
of a prime order p > 2k. Then it generates its public/private
key pair (pkDB, skDB). In Figure 1(b), using p as input, DO
generates her bilinear group pair ( ˜G, ˜GT ) of the prime order
p. The public/private key pair (pkDO, skDO) is generated
from the bilinear group.
Figure 2 shows how a visitor joins a data owner’s group.
In the protocol, if the visitor’s request is approved by the
data owner, this visitor gets a credential on the group he
joins and the corresponding private keys.
The visitor’s inputs are (Gi, stV , pkDO), where stV = (zV ,
ID, count,G, Cred, P ) is the visitor’s state which consists of
the visitor’s secret, her ID, a bit count showing whether he
has visited the storage site or not, all groups he has joined,
the credentials and the private keys he has acquired. If it
is the ﬁrst time the visitor joins the OSN, her state is set
to be stV = ⊥. The visitor chooses her secret zV randomly
from Zp, computes ID ← hzV
0 , sends ID to the data owner,
and proves to the data owner that he indeed has zV in a
zero-knowledge way. After that, the visitor’s state is set to
be (zV , ID, 0,∅,∅,∅). If ID is not accepted, the data owner
returns ⊥ to the visitor. Otherwise, the data owner proves
to the visitor that he has private keys α and β in a zero-
knowledge way. The data owner computes the signature
A ← (g1IDh
Gi
xDO +sGi and the private keys P0, P1
1 h
and P2, and then sends them to the visitor. The resulting
signature is the credential for the visitor to access the data
associated with group Gi. (P0, P1, P2) are private keys for
rGi
2
)
1
i=1. {Gti}l(cid:48)
i=1), and the RL takes the form of ({IDi}r
i=1 ⊆ {Gi}l(cid:48)
First the data owner generates the ACL and RL for D,
sends (ACL, RL) to the storage site. The ACL is a list of
({Gi}l(cid:48)
i=1), where
{IDi}r
i=1 is a l(cid:48)-subset of the total
L groups (G1,··· ,GL) and {IDi}r
i=1 is a r-subset of DO’s
N friends (ID1,··· , IDN ). On the DB side, if it was the
ﬁrst time the storage site receives a piece of data, the global
index is set to 1. The storage site generates the signature
Eindex on ACL using the signature scheme introduced in
section 3.4.1, sends the pair (Eindex, Findex) to the data
owner. Note that the ACL contains l(cid:48) groups and l(cid:48) ≤ l.
The storage site only needs to use the ﬁrst l(cid:48) private keys
(xi)l(cid:48)
i=1. On the DO side, he chooses a random number s ∈
Zp, and divides it into r random shares s1, s2,··· , sr such
that s1 + s2 + ··· , +sr = s. The data D is encrypted as
F1 = Findexe(gB, gB)αsD. After receiving the encryption
of D, the storage site increases index by 1 and publishes
Lindex = (Eindex, F1, F2, (Cj,1, Cj,2)r
j=1, ACL, RL).
Figure 4 shows the retrieving data protocol. The visi-
tor checks whether he has credentials to access the data. If
he has, the visitor chooses the index of the wanted data,
index = σ, chooses a random number k(cid:48) ∈ Zp, computes
K ← (Eindex)k(cid:48)
, and sends (K, count) to the storage site.
Note that K is the randomization of Eσ. The purpose of
this randomization is to hide σ from DB. If it’s the of the
visitor’s ﬁrst access, the storage site should prove to the vis-
itor that it has the secret key h. This is realized by a zero-
knowledge proof of P K{(h) : M = e(g, h)}. Then the visitor
updates count ← 1 and executes a zero-knowledge proof pro-
tocol. ZKP in Figure 4 denotes P K{(σ, k(cid:48), zV , (Gi, sGi , rGi , γi,
i=1 e(K, yi)Gi =
i=1 P roof (zV ,Gi, sGi , rGi , ˜Ai, ˜g1i , ˜yi, ˜h0i , ˜h1i , ˜h2i )}.
After the proof is veriﬁed, the storage site computes R ←
e(h, K) and returns it to the visitor, along with a zero-
knowledge proof. Using R and the private keys (P0, P1, P2),
the visitor can decrypt the ciphertext. Note that due to
space limit, the proof P K{(σ, k(cid:48),··· )} is a simpliﬁed nota-
tion. Refer to section 3.5 for a complete proof.
5. SECURITY ANALYSIS
δi, ηi, i, φi, ψi)i=1,··· ,l(cid:48) ) : e(K, yDB)e(K, g)σQl
e(g, g)k(cid:48)Vl(cid:48)
We prove the security of our system using UC framework
introduced in section 2.3. The indistinguishability of the
real world and ideal world is proved by deﬁning a sequence
of hybrid games Game-0, ··· , Game-n such that each two of
them are indistinguishable. In each game, for an adversary
A in the real world, we construct a corresponding simulator
Sim in the ideal world. Game-0 is equivalent to the envi-
ronment of the real world, while Game-n is equivalent to the
environment of the ideal world. We deﬁne that Realξ,A(k)
is the probability that ξ output 1 given the view of the ad-
versary and outputs of the honest parties in the real world,
Idealξ,Sim(k) is the probability that ξ output 1 given the
view of Sim and outputs of the honest parties in the ideal
world, and Hybridξ,Simi (k) is the probability that ξ outputs
1 given the view of Simi and outputs of the honest parties
in Game-i.
Theorem 1. Provided that the assumptions q-MEBDH,
q-SDH, and q-BDHE hold, our proposed system securely re-
V (Gi, stV , pkDO)
If (stV = ⊥) then
zV
stV ← (zV , ID, 0, ∅, ∅, ∅)
Parse stV as
(zV , ID, count, G, Cred, P )
$← Zp; ID ← hzV
0 ;
sGi
1
Gi
rGi
If e(A, g
1 h
G ← G ∪ Gi; P ← P ∪ (P0, P1, P2)
2
Cred ← Cred ∪ (AGi , sGi , rGi )
yDO) = e(g1IDh
Join()
ID−→
P K{(zV ) : ID = hzV
0 }
−−−−−−−−−−−−−−−−−→
2 ∧ Y = gβ
P K{(α, β) :X = gα
2 }
←−−−−−−−−−−−−−−−−−−−−−−
, g1),
(rGi , sGi , AGi )||(P0, P1, P2)
←−−−−−−−−−−−−−−−−−−−−−
DO(skDO, pkDO, Gi, ID)
If ID already exists, return ⊥
2
2 ; Y ← gβ
$← Zp
Gi