    ...
    const byte* Js::InterpreterStackFrame::PROCESS_OPCODE_FN_NAME(MediumLayoutPrefix)(const byte* ip, Var& yieldValue)
    {
        INTERPRETER_OPCODE op = READ_OP(ip);
        switch (op)
        {
    #ifndef INTERPRETER_ASMJS
        case INTERPRETER_OPCODE::Yield:
            m_reader.Reg2_Medium(ip);
            yieldValue = GetReg(GetFunctionBody()->GetYieldRegister());
            break;
    #endif
    #define DEF2_WMS(x, op, func) PROCESS_##x##_COMMON(op, func, _Medium)
    #define DEF3_WMS(x, op, func, y) PROCESS_##x##_COMMON(op, func, y, _Medium)==>
    #define DEF4_WMS(x, op, func, y, t) PROCESS_##x##_COMMON(op, func, y, _Medium, t)
    #include "InterpreterHandler.inl"
        default:
            // Help the C++ optimizer by declaring that the cases we
            // have above are sufficient
            AssertMsg(false, "dispatch to bad opcode");
            __assume(false);
        }
        return ip;
    }
    InterpreterHandler.inl:
    ...
    DEF3_WMS(CALL,                    NewScObject,                OP_NewScObject, CallI)
    DEF3_WMS(CUSTOM_L_R0,             NewScObjectNoCtorFull,      OP_NewScObjectNoCtorFull, Reg2)
    EXDEF2_WMS(A1toA1Mem,               LdCustomSpreadIteratorList, JavascriptOperators::OP_LdCustomSpreadIteratorList)
    EXDEF3_WMS(CALL,                    NewScObjectSpread,          OP_NewScObjectSpread, CallIExtended)
    DEF3_WMS(CALL,                    NewScObjArray,              OP_NewScObjArray, CallI)==>
    ...
    InterpreterStackFrame.cpp:
    #define PROCESS_CALL_COMMON(name, func, layout, suffix) \
        case OpCode::name: \
        { \
            PROCESS_READ_LAYOUT(name, layout, suffix); \\==>
            func(playout); \
            break; \
        }
    ...
    #define PROCESS_READ_LAYOUT(name, layout, suffix) \
        CompileAssert(OpCodeInfo::Layout == OpLayoutType::layout); \
        const unaligned OpLayout##layout##suffix * playout = m_reader.layout##suffix(ip); \\==>
        Assert((playout != nullptr) == (Js::OpLayoutType::##layout != Js::OpLayoutType::Empty)); // Make sure playout is used
    ...
    LayoutTypes.h:
    ...
    LAYOUT_TYPE                 (StartCall)
    LAYOUT_TYPE_PROFILED2_WMS   (CallI)==>
    LAYOUT_TYPE_PROFILED_WMS    (CallIFlags)
    ...
    OpLayouts.h:
    ...
    #define LAYOUT_TYPE_WMS(layout) \
        typedef OpLayoutT_##layout OpLayout##layout##_Large; \
        typedef OpLayoutT_##layout OpLayout##layout##_Medium; \\==>
        typedef OpLayoutT_##layout OpLayout##layout##_Small;
    ...
    template 
    struct OpLayoutT_CallI                // Return = Function(ArgCount)
    {
        typename SizePolicy::ArgSlotType     ArgCount;
        typename SizePolicy::RegSlotSType    Return;
        typename SizePolicy::RegSlotType     Function;
    };
    ...
    ByteCodeReader.cpp:
    template
    const unaligned LayoutType * ByteCodeReader::GetLayout(const byte*& ip)
    {
        size_t layoutSize = sizeof(LayoutType);//LayoutType=Js::OpLayoutT_CallI> => layoutSize = 0x5
        AssertMsg((layoutSize > 0) && (layoutSize (playout)->profileId,//profileId   callSiteId
发现playout参数被强制转换成OpLayoutDynamicProfile2结构体，并提取其成员变量profileId当成callSiteId向下传递了，OpLayoutDynamicProfile2的结构体代码如下：
    OpLayouts.h:
    ...
    typedef uint16 ProfileId;
    ...
    // Dynamic profile layout wrapper
    template 
    struct OpLayoutDynamicProfile : public LayoutType
    {
        ProfileId profileId;
    };
    template 
    struct OpLayoutDynamicProfile2 : public LayoutType
    {
        ProfileId profileId;
        ProfileId profileId2;
    };
    ...
该结构体的长度为sizeof(OpLayoutDynamicProfile2) = 0x9个字节, OpLayoutDynamicProfile2
内存结构如下：
    name:  |ArgSlotType|RegSlotSType|RegSlotType|profileId|profileId2|
    size:  |    1 byte |    2 byte  |    2 byte |  2 byte |   2 byte | 
    value: |    c5     |    fe 00   |    fe 00  |  fa fe  |   e9 09  |
此时可知OpLayoutT_Call类型被混淆成OpLayoutDynamicProfile2使用，callSiteId = profileId =
0xfefa参数变量是由于在对象混淆情况下，越界读了后面2个字节的bytecode指令操作码，callSiteId参数被传到RecordCallSiteInfo函数之后，产生了越界读异常现象。
### 4\. 漏洞利用
1)
首先跳到访问异常点附近看看，RecordCallSiteInfo在函数访问异常点之后，还有些什么样的操作，重点关注程序后续流程中有没有写的操作。RecordCallSiteInfo函数关键点代码如下：
    if (!callSiteInfo[callSiteId].isPolymorphic) // out of bound read
    {
    ...           
    if (doInline && IsPolymorphicCallSite(functionId, sourceId, oldFunctionId, oldSourceId))
    {
        CreatePolymorphicDynamicProfileCallSiteInfo(functionBody, callSiteId, functionId, oldFunctionId, sourceId, oldSourceId);==>
    }
    ...
    void DynamicProfileInfo::CreatePolymorphicDynamicProfileCallSiteInfo(FunctionBody *funcBody, ProfileId callSiteId, Js::LocalFunctionId functionId, Js::LocalFunctionId oldFunctionId, Js::SourceId sourceId, Js::SourceId oldSourceId)
    {
        PolymorphicCallSiteInfo *localPolyCallSiteInfo = RecyclerNewStructZ(funcBody->GetScriptContext()->GetRecycler(), PolymorphicCallSiteInfo);
        Assert(maxPolymorphicInliningSize >= 2);
        localPolyCallSiteInfo->functionIds[0] = oldFunctionId;
        localPolyCallSiteInfo->functionIds[1] = functionId;
        localPolyCallSiteInfo->sourceIds[0] = oldSourceId;
        localPolyCallSiteInfo->sourceIds[1] = sourceId;
        localPolyCallSiteInfo->next = funcBody->GetPolymorphicCallSiteInfoHead();
        for (int i = 2; i functionIds[i] = CallSiteNoInfo;
        }
        callSiteInfo[callSiteId].isPolymorphic = true;//out of bound write boolean
        callSiteInfo[callSiteId].u.polymorphicCallSiteInfo = localPolyCallSiteInfo;//out of bound write pointer
        funcBody->SetPolymorphicCallSiteInfoHead(localPolyCallSiteInfo);
    }
    ...
假设在完全可以控制堆喷数据的情况下，那么上面蓝色部分的判断可以过掉，在随后的红色部分就有写的操作。
2) 漏洞分配的内存长度为0x10177，越界读的内存偏移为0xfefa0 = callSiteId * 0x10 = 0xfefa *
0x10，由于callSiteId = 0xfefa是通过越界读2个字节的bytecode指令操作码得到的，所以这个越界读的偏移不是任意可以控制的。
3) Microsoft Edge 堆隔离，及其内存分配机制。Edge的堆分为：
  * 小堆 (0  堆桶的 map 映射。 例如：0x10、0x20、0x30... 一共(0x300 / 0x10 = 0x30个堆桶）
  * 中堆 (0x300  堆桶的 map 映射。例如：0x400、0x500、0x600...一共(0x2000-0x300 / 0x100 = 0x1D个堆桶）
  * 大堆 (size > 0x2000)：对齐方式：0x10 实现方式：堆桶之间的链表串连。
由于 0x10177 > 0x2000 的内存大小在大堆范畴，所以由大堆来分配内存。
综合
1），2），3），及其深入分析之后，要能够精准控制内存的堆喷，越界写一些内存关键数据（如：长度、数据存储指针等），选用array进行堆喷可以满足要求，本利用中选择越界修改array的长度来实现漏洞利用。堆喷之后的内存结构如下：
    name: | vulnmem | fill_mem  | pre_trigger_arr | trigger_arr | fill_leak_arr |
    desc: | 0x10180 | spray_mem |  int array      |  int array  |  object array |
完整的漏洞利用步骤如下：
a. 触发漏洞之后，pre_trigger_arr的长度被修改为一个指针，此时pre_trigger_arr可越界写，但不能越界读。  
b. 通过pre_trigger_arr越界写，修改trigger_arr的长度，此时trigger_arr可越界读写。  
c. 通过trigger_arr越界读，可泄露fill_leak_arr中的任意一个元素对象的地址。  
d.
通过pre_trigger_arr越界写，修改trigger_arr的数据存储指针为DataView对象地址偏移，把DataView数据头伪造成trigger_arr的元素数据。  
e. 通过trigger_arr正常的写，修改DataView的arrayBuffer的数据指针。  
f. 通过DataView正常读取，可达到任意地址读写的目的。
### 5\. 漏洞演示
a. 通过任意地址读写，泄露chakra.dll的基地址。 b.
通过调用GetProcAddress函数，泄露msvcrt.dll中malloc函数的地址。 c.
通过调用GetProcAddress函数，泄露kernel32.dll中WinExec函数的地址。
![
](https://images.seebug.org/content/images/2018/09/eb088967-9ff6-4bbd-81b0-bcc47edb7870.gif)
### 6\. 漏洞补丁
补丁前：
    template 
    void InterpreterStackFrame::OP_NewScObjArray_Impl(const unaligned T* playout, const Js::AuxArray *spreadIndices)
    {
        // Always profile this operation when auto-profiling so that array type changes are tracked
        if (!Profiled && !isAutoProfiling) isAutoProfiling 变量出的问题，导致该条件判断为false
        Assert(!Profiled);
        {
            OP_NewScObject_Impl(playout, Js::Constants::NoInlineCacheIndex, spreadIndices);
            return;
        }
        Arguments args(CallInfo(CallFlags_New, playout->ArgCount), m_outParams);
        uint32 spreadSize = 0;
        if (spreadIndices != nullptr){...}
        else
        {
            SetReg(
            (RegSlot)playout->Return,
            ProfilingHelpers::ProfiledNewScObjArray(
                GetReg(playout->Function),
                args,
                function,
                static_cast *>(playout)->profileId,//profileId   callSiteId
                static_cast *>(playout)->profileId2));
        }
        PopOut(playout->ArgCount);
        }
补丁后：
    template  void OP_NewScObjArray_Impl(const unaligned T* playout, const Js::AuxArray *spreadIndices = nullptr) 
    { 
        OP_NewScObject_Impl(playout, Js::Constants::NoInlineCacheIndex, spreadIndices);==>
    }
    template 
    void InterpreterStackFrame::OP_NewScObject_Impl(const unaligned T* playout, InlineCacheIndex inlineCacheIndex, const Js::AuxArray *spreadIndices)
    {
        if (ICIndex)
        {
            Assert(inlineCacheIndex != Js::Constants::NoInlineCacheIndex);
        }
        Var newVarInstance =
    #if ENABLE_PROFILE_INFO
            Profiled ? 补丁前的isAutoProfiling 条件判断被干掉了
            ProfiledNewScObject_Helper(
                GetReg(playout->Function),
                playout->ArgCount,
                static_cast *>(playout)->profileId,
                inlineCacheIndex,
                spreadIndices) :
    #endif
            NewScObject_Helper(GetReg(playout->Function), playout->ArgCount, spreadIndices);
        SetReg((RegSlot)playout->Return, newVarInstance);
    }
从上面补丁前后的对比可知，补丁后`OP_NewScObjArray_Impl`函数代码中有问题的代码被优化掉了。
### 7\. exp
  * [exp地址](https://github.com/bo13oy/ChakraCore/tree/master/%231 "exp地址")
### 8\. 参考链接
  * [ChakraCore v1.8.0](https://github.com/Microsoft/ChakraCore/releases/tag/v1.8.0 "ChakraCore v1.8.0")
  * [pwnjs](https://github.com/theori-io/pwnjs "pwnjs")
* * *