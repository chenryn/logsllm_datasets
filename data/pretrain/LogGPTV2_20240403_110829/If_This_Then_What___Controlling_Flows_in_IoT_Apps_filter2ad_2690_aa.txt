title:If This Then What?: Controlling Flows in IoT Apps
author:Iulia Bastys and
Musard Balliu and
Andrei Sabelfeld
If This Then What? Controlling Flows in IoT Apps
Iulia Bastys
Andrei Sabelfeld
Musard Balliu
Chalmers University of Technology
KTH Royal Institute of Technology
Gothenburg, Sweden
PI:EMAIL
Stockholm, Sweden
PI:EMAIL
Chalmers University of Technology
Gothenburg, Sweden
PI:EMAIL
ABSTRACT
IoT apps empower users by connecting a variety of otherwise un-
connected services. These apps (or applets) are triggered by external
information sources to perform actions on external information
sinks. We demonstrate that the popular IoT app platforms, includ-
ing IFTTT (If This Then That), Zapier, and Microsoft Flow are sus-
ceptible to attacks by malicious applet makers, including stealthy
privacy attacks to exfiltrate private photos, leak user location, and
eavesdrop on user input to voice-controlled assistants. We study
a dataset of 279,828 IFTTT applets from more than 400 services,
classify the applets according to the sensitivity of their sources, and
find that 30% of the applets may violate privacy. We propose two
countermeasures for short- and longterm protection: access control
and information flow control. For short-term protection, we suggest
that access control classifies an applet as either exclusively private
or exclusively public, thus breaking flows from private sources to
sensitive sinks. For longterm protection, we develop a framework
for information flow tracking in IoT apps. The framework mod-
els applet reactivity and timing behavior, while at the same time
faithfully capturing the subtleties of attacker observations caused
by applet output. We show how to implement the approach for an
IFTTT-inspired setting leveraging state-of-the-art information flow
tracking techniques for JavaScript based on the JSFlow tool and
evaluate its effectiveness on a collection of applets.
CCS CONCEPTS
• Security and privacy → Web application security; Domain-
specific security and privacy architectures;
KEYWORDS
information flow; access control; IoT apps
ACM Reference Format:
Iulia Bastys, Musard Balliu, and Andrei Sabelfeld. 2018. If This Then What?
Controlling Flows in IoT Apps. In 2018 ACM SIGSAC Conference on Com-
puter & Communications Security (CCS ’18), October 15–19, 2018, Toronto,
ON, Canada. ACM, New York, NY, USA, 18 pages. https://doi.org/10.1145/
3243734.3243841
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243841
Automatically back up your new iOS photos to Google Drive
applet title
Any new photo
trigger
filter & transform
if ( you upload an iOS photo ) then
add the taken date to photo name
and upload in album 
end
Upload file from URL
action
Figure 1: IFTTT applet architecture, by example
1 INTRODUCTION
IoT apps help users manage their digital lives by connecting Internet-
connected components from cyberphysical “things” (e.g., smart
homes, cars, and fitness armbands) to online services (e.g., Google
and Dropbox) and social networks (e.g., Facebook and Twitter).
Popular platforms include IFTTT (If This Then That), Zapier, and
Microsoft Flow. In the following, we focus on IFTTT as the prime
example of IoT app platform, while pointing out that our main
findings also apply to Zapier and Microsoft Flow.
IFTTT. IFTTT [26] supports over 500 Internet-connected compo-
nents and services [25] with millions of users running billions of
apps [24]. At the core of IFTTT are applets, reactive apps that in-
clude triggers, actions, and filter code. Triggers and actions may
involve ingredients, enabling applet makers to pass parameters to
triggers and actions. Figure 1 illustrates the architecture of an ap-
plet, exemplified by applet “Automatically back up your new iOS
photos to Google Drive” [1]. It consists of trigger “Any new photo”
(provided by iOS Photos), action “Upload file from URL” (provided
by Google Drive), and filter code for action customization. Examples
of ingredients are the photo date and album name.
Privacy, integrity, and availability concerns. IoT platforms con-
nect a variety of otherwise unconnected services, thus opening up
for privacy, integrity, and availability concerns. For privacy, ap-
plets receive input from sensitive information sources, such as user
location, fitness data, private feed from social networks, as well
as private documents and images. This raises concerns of keep-
ing user information private. These concerns have additional legal
ramifications in the EU, in light of the General Data Protection
Regulation (GDPR) [13] that increases the significance of using
safeguards to ensure that personal data is adequately protected.
For integrity and availability, applets are given sensitive controls
over burglary alarms, thermostats, and baby monitors. This raises
the concerns of assuring the integrity and availability of data ma-
nipulated by applets. These concerns are exacerbated by the fact
that IFTTT allows applets from anyone, ranging from IFTTT itself
and official vendors to any users as long as they have an account,
thriving on the model of end-user programming [10, 39, 47]. For
example, the applet above, currently installed by 97,000 users, is by
user alexander.
Like other IoT platforms, IFTTT incorporates a basic form of
access control. Users can see what triggers and actions a given
applet may use. To be able to run the applet, users need to provide
their credentials to the services associated with its triggers and
actions. In the above-mentioned applet that backs up iOS photos on
Google Drive, the user gives the applet access to their iOS photos
and to their Google Drive.
For the applet above, the desired expectation is that users explic-
itly allow the applet accessing their photos but only to be used on
their Google Drive. Note that this kind of expectation can be hard
to achieve in other scenarios. For example, a browser extension
can easily abuse its permissions [30]. In contrast to privileged code
in browser extensions, applet filter code is heavily sandboxed by
design, with no blocking or I/O capabilities and access only to APIs
pertaining to the services used by the applet. The expectation that
applets must keep user data private is confirmed by the IoT app
vendors (discussed below).
In this paper we focus on a key question on whether the cur-
rent security mechanisms are sufficient to protect against applets
designed by malicious applet makers. To address this question,
we study possibilities of attacks, assess their possible impact, and
suggest countermeasures.
Attacks at a glance. We observe that filter code and ingredient
parameters are security-critical. Filters are JavaScript code snippets
with APIs pertaining to the services the applet uses. The user’s
view of an applet is limited to a brief description of the applet’s
functionality. By an extra click, the user can inspect the services the
applet uses, iOS Photos and Google Drive for the applet in Figure 1.
However, the user cannot inspect the filter code or the ingredient
parameters, nor is informed whether filter code is present altogether.
Moreover, while the triggers and actions may not be changed after
the applet has been published, modifications in the filter code or
parameter ingredients can be performed at any time by the applet
maker, with no user notification.
We show that, unfortunately, malicious applet makers can bypass
access control policies by special crafting of filter code and param-
eter ingredients. To demonstrate this, we leverage URL attacks.
URLs are central to IFTTT and the other IoT platforms, serving
as “universal glue” for services that are otherwise unconnected.
Services like Google Drive and Dropbox provide URL-based APIs
connected to applet actions for uploading content. For the photo
backup applet, IFTTT uploads a new photo to its server, creates a
publicly-accessible URL, and passes it to Google Drive. URLs are
also used by applets in other contexts, such as including custom
images like logos in email notifications.
We demonstrate two classes of URL-based attacks for stealth
exfiltration of private information by applets: URL upload attacks
and URL markup attacks. Under both attacks, a malicious applet
maker may craft a URL by encoding the private information as a
parameter part of a URL linking to a server under the attacker’s
control, as in https://attacker.com?secret.
Under the URL upload attack, the attacker exploits the capability
of uploads via links. In a scenario of a photo backup applet like
above, IFTTT stores any new photo on its server and passes it
to Google Drive using an intermediate URL. Thus, the attacker
can pass the intermediate URL to its own server instead, either by
string processing in the JavaScript code of the filter, as in 'https://
attacker.com?' + encodeURIComponent(originalURL), or by editing
parameters of an ingredient in a similar fashion. For the attack to
remain unnoticed, the attacker configures attacker.com to forward
the original image in the response to Google Drive, so that the
image is backed up as expected by the user. This attack requires no
additional user interaction since the link upload is (unsuspiciously)
executed by Google Drive.
Under the URL markup attack, the attacker creates HTML markup
with a link to an invisible image with the crafted URL embedding
the secret. The markup can be part of a post on a social network
or a body of an email message. The leak is then executed by a web
request upon processing the markup by a web browser or an email
reader. This attack requires waiting for a user to view the resulting
markup, but it does not require the attacker’s server to do anything
other than record request parameters.
The attacks above are general in the sense that they apply to both
web-based IFTTT applets and applets installed via the IFTTT app
on a user device. Further, we demonstrate that the other common
IoT app platforms, Zapier and Microsoft Flow, are both vulnerable
to URL-based attacks.
URL-based exfiltration attacks are particularly powerful because
of their stealth nature. We perform a measurement study on a
dataset of 279,828 IFTTT applets from more than 400 services to
find that 30% of the applets are susceptible to stealthy privacy
attacks by malicious applet makers. Moreover, it turns out that 99%
of these applets are by third-party makers.
As we scrutinize IFTTT’s usage of URLs, we observe that IFTTT’s
custom URL shortening mechanism is susceptible to brute force
attacks [14] due to insecurities in the URL randomization schema.
Our study also includes attacks that compromise the integrity
and availability of user data. However, we note that the impact of
these attacks is not as high, as these attacks are not compromising
more data than what the user trusts an applet to access.
Countermeasures: from breaking the flow to tracking the
flow. The root of the problem in the attacks above is information
flow from private sources to public sinks. Accordingly, we suggest
two countermeasures: breaking the flow and tracking the flow.
As an immediate countermeasure, we suggest a per-applet access
control policy to either classify an applet as private or public and
thereby restrict its sources and sinks to either exclusively private
or exclusively public data. As such, this discipline breaks the flow
from private to public. For the photo backup applet above, it implies
that the applet should be exclusively private. URL attacks in private
applets can be then prevented by ensuring that applets cannot
build URLs from strings, thus disabling possibilities of linking to
attackers’ servers. On the other hand, generating arbitrary URLs in
public applets can be still allowed.
IFTTT plans for enriching functionality by allowing multiple
triggers and queries [28] for conditional triggering in an applet.
Microsoft Flow already offers support for queries. This implies that
exclusively private applets might become overly restrictive. In light
of these developments, we outline a longterm countermeasure of
tracking information flow in IoT apps.
We believe IoT apps provide a killer application for information
flow control. The reason is that applet filter code is inherently basic
and within reach of tools like JSFlow, performance overhead is
tolerable (IFTTT’s triggers/actions are allowed 15 minutes to fire!),
and declassification is not applicable.
Our framework models applet reactivity and timing behavior
while at the same time faithfully capturing the subtleties of at-
tacker observations caused by applet output. We implement the
approach leveraging state-of-the-art information flow tracking tech-
niques [20] for JavaScript based on the JSFlow [21] tool and evaluate
its effectiveness on a collection of applets.
Contributions. The paper’s contributions are the following:
• We demonstrate privacy leaks via two classes of URL-based at-
tacks, as well as violations of integrity and availability in applets
(Section 3).
• We present a measurement study on a dataset of 279,828 IFTTT
applets from more than 400 services, classify the applets according
to the sensitivity of their sources, and find that 30% of the applets
may violate privacy (Section 4).
• We propose a countermeasure of per-app access control, prevent-
ing simultaneous access to private and public channels of commu-
nication (Section 5).
• For a longterm perspective, we propose a framework for informa-
tion flow control that models applet reactivity and timing behavior
while at the same time faithfully capturing the subtleties of attacker
observations caused by applet output (Section 6).
• We implement the longterm approach leveraging state-of-the-
art JavaScript information flow tracking techniques (Section 7.1)
and evaluate its effectiveness on a selection of 60 IFTTT applets
(Section 7.2).
2 IFTTT PLATFORM AND ATTACKER MODEL
This section gives brief background on the applet architecture, filter
code, and the use of URLs on the IFTTT platform.
Architecture. An IFTTT applet is a small reactive app that includes
triggers (as in “If I’m approaching my home” or “If I’m tagged on
a picture on Instagram”) and actions (as in “Switch on the smart
home lights” or “Save the picture I’m tagged on to my Dropbox”)
from different third-party partner services such as Instagram or
Dropbox. Triggers and actions may involve ingredients, enabling
applet makers and users to pass parameters to triggers (as in “Locate
my home area” or “Choose a tag”) and actions (as in “The light color”
or “The Dropbox folder”). Additionally, applets may contain filter
code for personalization. If present, the filter code is invoked after
a trigger has been fired and before an action is dispatched.
Sensitive triggers and actions require users’ authentication and
authorization on the partner services, e.g., Instagram and Dropbox,
to allow the IFTTT platform poll a trigger’s service for new data,
or push data to a service in response to the execution of an action.
This is done by using the OAuth 2.0 authorization protocol [40] and,
upon applet installation, re-directing the user to the authentication
page that is hosted by the service providers. An access token is then
generated and used by IFTTT for future executions of any applets
that use such services. Fernandes et al. [12] give a detailed overview
of IFTTT’s use of OAuth protocol and its security implications.
Applets can be installed either via IFTTT’s web interface or via an
IFTTT app on a user device. In both cases, the application logic of
an applet is implemented on the server side.
Filter code. Filters are JavaScript (or, technically, TypeScript,
JavaScript with optional static types) code snippets with APIs per-
taining to the services the applet uses. They cannot block or perform
output by themselves, but can use instead the APIs to configure the
output actions of the applet. The filters are batch programs forced
to terminate upon a timeout. Outputs corresponding to the applet’s
actions take place in a batch after the filter code has terminated, but
only if the execution of the filter code did not exceed the internal
timeout.
In addition to providing APIs for action output configuration,
IFTTT also provides APIs for ignoring actions, via skip commands.
When an action is skipped inside the filter code, the output corre-
sponding to that action will not be performed, although the action
will still be specified in the applet.
URLs. The setting of IoT apps is a heterogeneous one, connecting
otherwise unconnected services. IFTTT heavily relies on URL-based
endpoints as a “universal glue” connecting these services. When
passing data from one service to another (as is the case for the
applet in Figure 1), IFTTT uploads the data provided by the trigger
(as in “Any new photo”), stores it on a server, creates a randomized
public URL https://locker.ifttt.com/*, and passes the URL to the
action (as in “Upload file from URL”). By default, all URLs generated
in markup are automatically shortened to http://ift.tt/ URLs,
unless a user explicitly opts out of shortening [29].
Attacker model. Our main attacker model consists of a malicious
applet maker. The attacker either signs up for a free user account or,
optionally, a premium “partner” account. In either case, the attacker
is granted with the possibility of making and publishing applets for
all users. The attacker’s goal is to craft filter code and ingredient
parameters in order to bypass access control. One of the attacks we
discuss also involves a network attacker who is able to eavesdrop
on and modify network traffic.
3 ATTACKS
This section illustrates that the IFTTT platform is susceptible to
different types of privacy, integrity, and availability attacks by ma-
licious applet makers. We have verified the feasibility of the attacks
by creating private IFTTT applets from a test user account. By mak-
ing applets private to the account under our control, we ensured
that they did not affect other users. We remark that third-party
applets providing the same functionality are widely used by the
IFTTT users’ community (cf. Table 1 in the Appendix). We evaluate
the impact of our attacks on the IFTTT applet store in Section 4.
Since users explicitly grant permissions to applets to access the
triggers and actions on their behalf, we argue that the flow of
information between trigger sources and action sinks is part of
the users’ privacy policy. For instance, by installing the applet in
Figure 1, the user agrees on storing their iOS photos to Google Drive,
independently of the user’s settings on the Google Drive folder.
Yet, we show that the access control mechanism implemented by
IFTTT does not enforce the privacy policy as intended by the user.
We focus on malicious implementations of applets that allow an
attacker to exfiltrate private information, e.g., by sending the user’s
photos to an attacker-controlled server, to compromise the integrity
of trusted information, e.g., by changing original photos or using
different ones, and to affect the availability of information, e.g., by
preventing the system from storing the photos to Google Drive.
Recall that the attacker’s goal is to craft filter code and ingredient
parameters as to bypass access control. As we will see, our privacy
attacks are particularly powerful because of their stealth nature.
Integrity and availability attacks also cause concerns, despite the
fact that they compromise data that the user trusts the applet to
access, and thus may be noticed by the user.
3.1 Privacy
We leverage URL-based attacks to exfiltrate private information
to an attacker-controlled server. A malicious applet maker crafts
a URL by encoding the private information as a parameter part
of a URL linking to the attacker’s server. Private sources consist
of trigger ingredients that contain sensitive information such as
location, images, videos, SMSs, emails, contact numbers, and more.
Public sinks consist of URLs to upload external resources such as
images, videos and documents as part of the actions’ events. We use
two classes of URL-based attacks to exfiltrate private information:
URL upload attacks and URL markup attacks.
URL upload attack. Figure 2 displays a URL upload attack in
the scenario of Figure 1. When a maker creates the applet, IFTTT
provides access (through filter code APIs or trigger/action param-
eters) to the trigger ingredients of the iOS Photos service and
the action fields of the Google Drive service. In particular, the