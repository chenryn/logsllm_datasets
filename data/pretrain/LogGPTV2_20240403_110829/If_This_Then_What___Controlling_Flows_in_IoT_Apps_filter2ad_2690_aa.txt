# Title: If This Then What?: Controlling Flows in IoT Apps
# Authors: Iulia Bastys, Musard Balliu, and Andrei Sabelfeld

## Affiliations:
- **Iulia Bastys** and **Andrei Sabelfeld**: Chalmers University of Technology, Gothenburg, Sweden
- **Musard Balliu**: KTH Royal Institute of Technology, Stockholm, Sweden

## Abstract
IoT applications (or applets) empower users by connecting a variety of otherwise unconnected services. These applets are triggered by external information sources to perform actions on external information sinks. We demonstrate that popular IoT app platforms, including IFTTT (If This Then That), Zapier, and Microsoft Flow, are susceptible to attacks by malicious applet makers. These attacks include stealthy privacy violations, such as exfiltrating private photos, leaking user location, and eavesdropping on user input to voice-controlled assistants. We analyze a dataset of 279,828 IFTTT applets from over 400 services, classifying the applets based on the sensitivity of their sources, and find that 30% of the applets may violate privacy. We propose two countermeasures for short- and long-term protection: access control and information flow control. For short-term protection, we suggest implementing access control to classify an applet as either exclusively private or public, thereby preventing flows from private sources to sensitive sinks. For long-term protection, we develop a framework for information flow tracking in IoT apps. This framework models applet reactivity and timing behavior while capturing the subtleties of attacker observations caused by applet output. We implement this approach using state-of-the-art information flow tracking techniques for JavaScript, based on the JSFlow tool, and evaluate its effectiveness on a collection of applets.

## Keywords
information flow, access control, IoT apps

## ACM Reference Format
Iulia Bastys, Musard Balliu, and Andrei Sabelfeld. 2018. If This Then What? Controlling Flows in IoT Apps. In 2018 ACM SIGSAC Conference on Computer & Communications Security (CCS '18), October 15–19, 2018, Toronto, ON, Canada. ACM, New York, NY, USA, 18 pages. https://doi.org/10.1145/3243734.3243841

## 1. Introduction
IoT apps help users manage their digital lives by connecting Internet-connected components, such as smart homes, cars, and fitness armbands, to online services and social networks. Popular platforms include IFTTT (If This Then That), Zapier, and Microsoft Flow. In this paper, we focus on IFTTT as the primary example, noting that our findings also apply to Zapier and Microsoft Flow.

### IFTTT Platform
IFTTT supports over 500 Internet-connected components and services, with millions of users running billions of applets. At the core of IFTTT are applets, which include triggers, actions, and filter code. Triggers and actions can involve ingredients, allowing applet makers to pass parameters to triggers and actions. Figure 1 illustrates the architecture of an IFTTT applet, exemplified by the "Automatically back up your new iOS photos to Google Drive" applet. It consists of a trigger "Any new photo" (provided by iOS Photos) and an action "Upload file from URL" (provided by Google Drive), along with filter code for action customization.

### Privacy, Integrity, and Availability Concerns
IoT platforms connect a variety of services, raising concerns about privacy, integrity, and availability. Applets receive input from sensitive information sources, such as user location, fitness data, and private documents, raising concerns about keeping user information private. Additionally, applets have sensitive controls over devices like burglary alarms, thermostats, and baby monitors, raising concerns about the integrity and availability of data manipulated by applets. IFTTT allows applets from anyone, ranging from official vendors to any user with an account, thriving on the model of end-user programming.

### Access Control in IFTTT
IFTTT incorporates a basic form of access control. Users can see what triggers and actions a given applet may use and need to provide their credentials to the services associated with these triggers and actions. For example, in the applet that backs up iOS photos to Google Drive, the user gives the applet access to their iOS photos and Google Drive.

### Key Question and Research Focus
We focus on whether current security mechanisms are sufficient to protect against applets designed by malicious applet makers. To address this, we study possible attacks, assess their impact, and suggest countermeasures.

## 2. IFTTT Platform and Attacker Model
### Architecture
An IFTTT applet is a small reactive app that includes triggers and actions from different third-party partner services. Triggers and actions may involve ingredients, enabling applet makers and users to pass parameters. Additionally, applets may contain filter code for personalization, invoked after a trigger has been fired and before an action is dispatched.

### Sensitive Triggers and Actions
Sensitive triggers and actions require users' authentication and authorization on the partner services using the OAuth 2.0 protocol. An access token is generated and used by IFTTT for future executions of any applets that use such services.

### Filter Code
Filters are JavaScript (or TypeScript) code snippets with APIs pertaining to the services the applet uses. They cannot block or perform output by themselves but can configure the output actions of the applet. Filters are batch programs forced to terminate upon a timeout.

### URLs
IFTTT heavily relies on URL-based endpoints to connect otherwise unconnected services. When passing data from one service to another, IFTTT uploads the data provided by the trigger, stores it on a server, creates a randomized public URL, and passes the URL to the action.

### Attacker Model
Our main attacker model is a malicious applet maker who signs up for a free or premium account and crafts filter code and ingredient parameters to bypass access control. Some attacks also involve a network attacker who can eavesdrop on and modify network traffic.

## 3. Attacks
### Overview
We illustrate that the IFTTT platform is susceptible to various types of privacy, integrity, and availability attacks by malicious applet makers. We verified the feasibility of these attacks by creating private IFTTT applets from a test user account. We focus on malicious implementations of applets that allow an attacker to exfiltrate private information, compromise the integrity of trusted information, and affect the availability of information.

### Privacy Attacks
We leverage URL-based attacks to exfiltrate private information to an attacker-controlled server. A malicious applet maker crafts a URL by encoding the private information as a parameter part of a URL linking to the attacker’s server. We use two classes of URL-based attacks: URL upload attacks and URL markup attacks.

#### URL Upload Attack
In a URL upload attack, the attacker exploits the capability of uploads via links. For example, in the photo backup applet, IFTTT stores any new photo on its server and passes it to Google Drive using an intermediate URL. The attacker can pass the intermediate URL to their own server instead, either by string processing in the JavaScript code of the filter or by editing parameters of an ingredient. The attacker configures their server to forward the original image in the response to Google Drive, so the image is backed up as expected by the user. This attack requires no additional user interaction.

#### URL Markup Attack
In a URL markup attack, the attacker creates HTML markup with a link to an invisible image with the crafted URL embedding the secret. The markup can be part of a post on a social network or the body of an email message. The leak is executed by a web request upon processing the markup by a web browser or an email reader. This attack requires waiting for a user to view the resulting markup but does not require the attacker’s server to do anything other than record request parameters.

### Measurement Study
We perform a measurement study on a dataset of 279,828 IFTTT applets from more than 400 services and find that 30% of the applets are susceptible to stealthy privacy attacks by malicious applet makers. Moreover, 99% of these applets are by third-party makers.

### Countermeasures
#### Short-Term Countermeasure: Access Control
As an immediate countermeasure, we suggest a per-applet access control policy to classify an applet as either private or public, restricting its sources and sinks to either exclusively private or exclusively public data. This breaks the flow from private to public. For the photo backup applet, it implies that the applet should be exclusively private. URL attacks in private applets can be prevented by ensuring that applets cannot build URLs from strings, thus disabling possibilities of linking to attackers’ servers.

#### Long-Term Countermeasure: Information Flow Control
For a long-term perspective, we propose a framework for information flow control that models applet reactivity and timing behavior while capturing the subtleties of attacker observations caused by applet output. We implement this approach using state-of-the-art information flow tracking techniques for JavaScript, based on the JSFlow tool, and evaluate its effectiveness on a selection of 60 IFTTT applets.

## 4. Contributions
The paper's contributions are:
- Demonstration of privacy leaks via two classes of URL-based attacks, as well as violations of integrity and availability in applets.
- A measurement study on a dataset of 279,828 IFTTT applets from more than 400 services, classifying the applets according to the sensitivity of their sources, and finding that 30% of the applets may violate privacy.
- Proposal of a countermeasure of per-app access control, preventing simultaneous access to private and public channels of communication.
- Development of a framework for information flow control that models applet reactivity and timing behavior while capturing the subtleties of attacker observations caused by applet output.
- Implementation and evaluation of the long-term approach using state-of-the-art JavaScript information flow tracking techniques on a selection of 60 IFTTT applets.