步骤四：通过上面的案例可以看到，服务端并没有校验这个邮箱是否是该账号绑定的
邮箱，而是直接向请求中的email参数对应的邮箱发送邮件。类似这种直接修改请求参数
的情况不仅在发送邮件时存在，如果修改密码请求中包含目标账号参数，也可以通过篡改
账号参数重置目标账号密码，如图12-16所示。
图12-16 重置密码页面
例如，某个找回密码发送给用户邮件中的接口URL如下：
http://www.xxx.com/repwd?account=PI:EMAIL&token=1239392342234
那么只需要将account参数修改为我们需要的账号，如PI:EMAIL，修改后如下：
http://www.xxx.com/repwd?account=foo@163&token=1239392342234
因为这里的Token可重复使用，这样就可以直接修改掉PI:EMAIL账号的密码了，
在测试找回密码功能模块时要留意数据包参数中的账号是否可修改。
12.3.3 修复建议
对找回密码的  Token  做一对一的校验，一个  Token  只能修改一个用户，同时一定要
保证Token不泄露。
12.4 Response状态值修改测试
12.4.1 测试原理和方法
Response状态值修改测试，即修改请求的响应结果来达到密码重置的目的，存在这种
漏洞的网站或者手机App往往因为校验不严格而导致了非常危险的重置密码操作。
这种漏洞的利用方式通常是在服务端发送某个密码重置的凭证请求后，出现特定的响
应值，比如true、1、ok、success等，网站看到回显内容为特定值后即修改密码，通常这
种漏洞的回显值校验是在客户端进行的，所以只需要修改回显即可。
12.4.2 测试流程
Response  状态值修改测试流程主要是分析服务端校验后的结果，正确和错误分别是
什么样的返回结果，通过修改返回结果为正确来欺骗客户端，以达到密码重置的目的，如
图12-17所示。
图12-17 Response状态值修改测试流程
步骤一：某网站的找回密码功能需要发送验证码到用户手机，用户输入收到的验证码
即可重置密码。但是如果他的回显值被修改呢？我们来做个测试，输入要找回的目标手机
号，短信认证码可以随便填写，然后单击“找回密码”按钮对该请求抓包，如图12-18所
示。
图12-18 找回密码页面
步骤二：可以看到这个请求包含了validateCode和phone两个参数，在Burp  Suite中右
击intercept选项，选择Do  intercept→Response  to  this  request，设置后就可以看到这个请求
的回显Response包了，如图12-19所示，接着单击“Forward”转发这个请求。
图12-19 设置请求响应拦截
步骤三：转发后可以看到Response的回显包已经成功接收到了，但是包返回的值是
false，通常false是失败的含义，也就是说服务端校验验证码的时候发现验证码不一致然后
返回了false给客户端，这里我们可以尝试修改false值为true，然后单击“Intercept is on”按钮
关闭拦截让数据包正常发送，如图12-20、图12-21所示。
图12-20 服务端返回false
步骤四：接着可以看到页面直接跳转到了重置密码页面，如图12-22所示，于是轻松
达到了任意密码修改的目的，在这个测试过程中只需要知道目标的账号而不需要知道任何
绑定邮箱或者验证码就可以修改密码。
图12-21 修改false为true
图12-22 进入重置密码页面
12.4.3 修复建议
注意不要在前端利用服务端返回的值判断是否可以修改密码，要把整个校验环节交给
服务端验证。
12.5 Session覆盖测试
12.5.1 测试原理和方法
找回密码逻辑漏洞测试中也会遇到参数不可控的情况，比如要修改的用户名或者绑定
的手机号无法在提交参数时修改，服务端通过读取当前session会话来判断要修改密码的账
号，这种情况下能否对Session中的内容做修改以达到任意密码重置的目的呢？
在某网站中的找回密码功能中，业务逻辑是：由用户使用手机进行注册，然后服务端
向手机发送验证码短信，用户输入验证码提交后，进入密码重置页面。
对网站中Session覆盖的测试如下：
（1）需要准备自己的账号接收凭证（短信验证码）；
（2）获得凭证校验成功后进入密码重置页面；
（3）在浏览器新标签重新打开找回密码页面，输入目标手机号；
（4）此时当前  Session  账户已经被覆盖，重新回到第二步中打开的重置密码页面即
可重置目标手机号。
12.5.2 测试流程
步骤一：在找回密码页面中输入  A  手机号（尾号  3274），然后单击“下一步”按钮，
如图12-23所示。
图12-23 找回密码第一步
步骤二：单击“立即验证”按钮，接收短信验证码。输入验证码通过验证后，就可以进
入密码重置页面了，如图12-24、图12-25所示。
图12-24 找回密码第二步验证手机号
图12-25 进入重置密码页面
步骤三：这里我们密码重置的目标账号是B手机号（尾号为5743），接下来打开一个
新的标签并进入找回密码第一步的页面，输入B手机号后单击“下一步”按钮，如图12-26所
示。
图12-26 新标签重新进入找回密码覆盖session
步骤四：此时成功进入第二步，向B手机号（尾号为5743）发送验证码。B手机收到
的短信验证码我们无法得知，但是不要担心，在这一步服务端已经将当前Session会话设
置为B手机号（尾号为5743）的用户，这个时候再刷新A手机号（尾号3274）密码重置页
面。
步骤五：通过观察页面上显示的手机号，可以看出已经由A手机号（尾号3274）改为
了B手机号（尾号为5743），这说明Session成功覆盖了。这意味着重置密码将修改的是B
手机号（尾号为5743）的密码，如图12-27所示，这样就又诞生了一个任意密码重置漏
洞。
图12-27 重新进入找回密码页面
12.5.3 修复建议
Session覆盖类似于账号参数的修改，只是以控制当前Session的方式篡改了要重置密
码的账号，在重置密码请求中一定要对修改的账号和凭证是否一致做进一步的校验。
12.6 弱Token设计缺陷测试
12.6.1 测试原理和方法
在找回密码功能中，很多网站会向用户邮箱发送找回密码页面链接。用户只需要进入
邮箱，打开找回密码邮件中的链接，就可以进入密码重置页面了。找回密码的链接通常会
加入校验参数来确认链接的有效性，通过校验参数的值与数据库生成的值是否一致来判断
当前找回密码的链接是否有效。
例如，网站给出的找回密码的url如下，单击这个链接将跳转到重置密码页面。
http://www.xxx.com/findpwd?uid=xx-uu-xx-sxx&token=1497515314
观察这个链接的参数，uid参数可能是对应修改密码的账户，Token就是之前提到的校
验参数了，这个参数的值看起来像一个时间戳，猜测系统生成这个token的机制就是使用
的时间戳。把这个值通过时间格式化后发现确实变成了日期，那么这个Token就是可预测
的一个时间范围的时间戳，只需要通过这个时间段就可以推测或者暴力枚举出系统生成的
时间戳值了，如图12-27所示。
图12-28 时间戳转换
类似这样的弱Token现象有很多，比如将用户的uid加密成MD5或者base64编码，或者
直接用uid+4位随机数等这种可预测性的内容作为Token，测试时只需要多发几个找回密码
的请求观察系统每次发送的找回密码链接中的参数值是否有规律即可。
12.6.2 测试流程
步骤一：在类似的接收凭证方式的密码找回功能中，填写邮箱或者手机号，多单击几
次发送验证信息，可以在邮箱中获得多个找回密码的凭证，如图12-29、图12-30所示。
图12-29 发送验证信息
图12-30 接收多个找回密码邮件
图12-31 找回密码邮件内容
步骤二：邮箱中收到多封密码找回邮件，观察链接中的密码找回凭证是否有规律可
循，以下列出几个找回密码的链接。
第一封邮件：
http://www.xxx.com/index.php?m=CustomerService&a=resetPwdEml&token=dGVz dEAxMjYuY29tJjk5NTk=
第二封邮件：
http://www.xxx.com/index.php?m=CustomerService&a=resetPwdEml&token=dGVz dEAxMjYuY29tJjI2ODI=
第三封邮件：
http://www.xxx.com/index.php?m=CustomerService&a=resetPwdEml&token=dGVz dEAxMjYuY29tJjk4NzY=
步骤三：通过对比发现Token参数在不断地变化，参数似乎是通过base64编码的，对
此可以对这三个链接中的Token参数做base64解码操作，结果如表12-1所示
表12-1 解码结果
步骤四：解码后可以发现每一个Token的值是可以预测的，Token的生成机制应该
是“base64编码（用户邮箱+随机4位验证码）”，这样就可以通过暴力枚举获得验证码，加
上用户名再进行base64编码，最后得到任意用户的密码找回凭证。
12.6.3 修复建议
密码找回的Token不能使用时间戳或者用户邮箱和较短有规律可循的数字字符，应当
使用复杂的Token生成机制让攻击者无法推测出具体的值。
12.7 密码找回流程绕过测试
12.7.1 测试原理和方法
很多网站的密码找回功能一般有以下几个步骤。
（1）用户输入找回密码的账号；
（2）校验凭证：向用户发送短信验证码或者找回密码链接，用户回填验证码或单击
链接进入密码重置页面，以此方式证明当前操作用户是账号主人；
（3）校验成功进入重置密码页面。
在找回密码逻辑中，第二步校验凭证最为重要。不是账号主人是无法收到校验凭证
的，试想有没有办法可以绕过第二步凭证校验，直接进入第三步重置密码呢？
用户修改密码需要向服务器发送修改密码请求，服务器通过后再修改数据库中相应的
密码，所以在测试中我们首先要收集三个步骤的请求接口，重点是收集到最后一步重置密
码的接口，这样我们可以直接跳过凭证校验的接口去尝试直接重置密码。
在下面的密码找回案例中，需要用户填写要找回的账号然后验证身份，之后才可以进
入设置新密码的页面，我们需要对这个流程所有请求的接口做分析，找出最后一步重置密
码的接口，接着使用URL测试是否可以跳过验证身份环节。
12.7.2 测试流程
步骤一：先注册一个自己的账号用于测试所有流程，如图 12-32 所示，在找回密码页
面中先输入自己的账号单击“下一步”按钮，找回密码页面 
URL 
为
GET/account/findPassword.html。
图12-32 找回密码流程界面
步骤二：进入凭证验证流程，这里使用的是自己的账号，所以直接获取凭证，输入后
进入下一步，如图 
12-33 
所示。当前第二步的验证凭证 
URL 
为
GET/forgetpwd/findPassNext.do。
步骤三：通过验证以后就可以进入第三步重置密码了，如图12-34所示。当前重置密
码的URL为GET/forgetpwd/emailValidateNext.do。
图12-33 第二步发送邮箱凭证验证
图12-34 第三步重置新密码
步骤四：通过使用自己的账号使用正常顺序流程找回密码成功，我们也获取到了三个
步骤的所有URL，最后整理如下。
（1）GET/account/findPassword.html//输入用户账号页面
（2）GET/forgetpwd/findPassNext.do//验证身份页面
（3）GET/forgetpwd/emailValidateNext.do//设置新密码页面
接下来可以尝试在第一步输入账号后进入第二步验证身份页面，在这个页面直接修改
URL为第三步的URL，访问看看是否可以直接进入密码重置页面，如图12-35所示。
图12-35 第二步发送邮箱凭证验证
经过测试以后发现不需要验证身份可以直接进入重置密码页面，如图 12-36 所示，那
么最重要的验证身份这一步就被轻松绕过了，如图12-37所示。
图12-36 第二步发送邮箱凭证验证
图12-37 跳过第二部验证修改密码成功
12.7.3 修复建议
防止跳过验证步骤一定要在后端逻辑校验中确认上一步流程已经完成。
第13章 业务接口调用模块测试
13.1 接口调用重放测试