User: I've built a paywalled CMS + invoicing system for a client and I need to get more stringent with my testing.
I keep all my data in a Django ORM and have a bunch of Celery tasks that run at different intervals that makes sure that new invoices and invoice reminders get sent and cuts of access when users don't pay their invoices. 
For example I'd like to be a able to run a test that:

Creates a new user and generates an invoice for X days of access to the site
Simulates the passing of X + 1 days, and runs all the tasks I've got set up in Celery.
Checks that a new invoice for an other X days has been issued to the user.

The KISS approach I've come up with so far is to do all the testing on a separate machine and actually manipulate the date/time at the OS-level. So the testing script would:

Set the system date to day 1
Create a new user and generate the first invoice for X days of access
Advance then system date 1 day. Run all my celery tasks. Repeat until X + 1 days have "passed"
Check that a new invoice has been issued

It's a bit clunky but I think it might work. Any other ideas on how to get it done?
Assistant: Without the use of a special mock library, I propose to prepare the code for being in mock-up-mode (probably by a global variable).  In mock-up-mode instead of calling the normal time-function (like time.time() or whatever) you could call a mock-up time-function which returns whatever you need in your special case.
I would vote down for changing the system time.  That does not seem like a unit test but rather like a functional test as it cannot be done in parallel to anything else on that machine.