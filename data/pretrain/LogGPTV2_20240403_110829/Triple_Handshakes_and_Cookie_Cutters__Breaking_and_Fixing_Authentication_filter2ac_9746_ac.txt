direction;
the record protocol protects data on these two
channels, using the authenticated-encryption scheme and keys
provided by the handshake. Application data is split into a
stream of fragments that are delivered in-order. There is no
correlation (at
the TLS level) between the two directions.
When the client or server wishes to terminate the connection, it
sends a close_notify alert to signal the end of its writing
stream, and it may wait for the peer’s close_notify before
closing the connection. If both peers perform this graceful
closure, they can both be sure that they received all data.
However, this is seldom the case in practice.
There are several attacks on the conﬁdentiality of the record
protocol [e.g. 5]; attacks on integrity are less common [e.g. 15].
IV-C SESSION RESUMPTION. Full handshakes involve mul-
tiple round-trips, public key operations, and (possibly)
certiﬁcate-revocation checks,
increasing latency and server
load [53]. In addition, abbreviated handshakes enable clients
and servers that have already established a session to quickly
set up new connections. Instead of establishing a new master
secret, both parties reuse the master secret from that recent
session (cached on both ends), as shown in Figure 2.
The format of the cached session data depends on the
TLS implementation, but [50] recommends that it contains
at least the master secret, protocol version, ciphersuite, and
compression method, along with any certiﬁcate used.
The client sends a client hello, requesting the server to
(cid:3). If the
resume the session sid, with a new client nonce cr
server has cached this session, it may then respond with a
(cid:3) and the same sid
server hello with a new server nonce sr
and algorithms as in the initial handshake. The server then
immediately sends its CCS and ﬁnished message, computed
as a MAC for the abbreviated handshake log. The client
responds with its own CCS and ﬁnished message, computed
as a MAC of the whole resumption log. The computation of
103
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:56 UTC from IEEE Xplore.  Restrictions apply. 
keys and verify data are as follows, where log
the messages 1’ and 2’, while log
(cid:3)
1−2 consists of
(cid:3)
1−2,4 includes 1’, 2’ and 4’:
ms = [cached for (S, sid )]
keys = prf(ms, “key expansion”, sr
(cid:3)(cid:3)
svd = prf(ms, “server finished
(cid:3)(cid:3)
cvd = prf(ms, “client finished
(cid:3))
(cid:3)|cr
, hash(log
, hash(log
(cid:3)
1−2))
(cid:3)
1−2,4))
if both peers are honest,
The completion of an abbreviated handshake implicitly
conﬁrms to each participant that they share the same session
master secret. Hence,
they must
have matching session parameters—those negotiated in the
initial handshake. Because of its efﬁciency, resumption is
aggressively used on TLS connections. It
is supported by
default in all major web browsers and web servers. A recent
TLS extension enables servers to store their cached sessions
at the client within encrypted tickets [50]; this mechanism
makes it possible for clients to maintain long-lived sessions
with stateless server farms, at little cost to the servers.
We use the term session resumption when the same TLS
session is used on multiple connections, but the abbreviated
handshake may also be used on an existing TLS connection to
refresh keys and reset sequence numbers. At the end of each
handshake, we say that the connection enters a new epoch.
IV-D RENEGOTIATION: CHANGING EPOCHS. A client or a
server may request a new handshake on an established TLS
connection, e.g. to renegotiate the session parameters. The
handshake proceeds as described above, except that its mes-
sages are exchanged on the encrypted TLS connection. When
the handshake completes, both parties share a new session,
and their connection enters a new epoch, switching to the keys
derived from the new session.
There are many reasons why an application may want to
renegotiate a TLS session when it already has a working TLS
connection. The ﬁrst is client authentication. On some servers,
client authentication is required only when accessing protected
resources. For instance, Apache triggers renegotiation and
requires a client certiﬁcate on ﬁrst access to a protected
directory. This design improves user experience and helps
protect privacy by requesting authentication only when needed,
and prevents the client certiﬁcate being sent in the clear during
the initial handshake. Other reasons may be to upgrade the
ciphersuite or replace an expiring certiﬁcate [49, §5]. Even in
this case, the server may need to provide a new certiﬁcate that
supports, say, ECDSA signing instead of RSA. Consequently,
in many renegotiations, the client and server certiﬁcates and
identities after renegotiation may differ from those of the pre-
vious handshake. Without additional protections, such identity
changes can lead to impersonation attacks.
Renegotiation Attack Protecting the renegotiation under the
keys of the previous handshake is not enough to prevent man-
in-the-middle attacks. An active network attacker can intercept
an initial handshake from a client to a server and forward it as
a renegotiation within an existing TLS connection between
the attacker and the server. As a result, any data that the
attacker sent before the renegotiation gets attributed to the
client, leading to a powerful impersonation attack [45].
In response to this attack, a new ‘mandatory’ TLS extension
has been proposed and deployed for all versions of TLS [49].
This extension includes the verify data of the previous hand-
shake within the client and server hello messages of the
renegotiation handshake, thereby cryptographically binding the
two handshakes (and, recursively, any preceding handshake
on the same connection). As a result, as each handshake
completes, both peers can be conﬁdent that they agree on all
epochs on their connection. Informally, the principals at each
endpoint must remain the same, even if the certiﬁcates change.
As shown in §V, this countermeasure still does not sufﬁce
to eliminate renegotiation attacks across several connections.
IV-E IMPLEMENTATIONS AND APIS. There are several pop-
ular implementations of TLS, including OpenSSL, GnuTLS,
NSS, JSSE, and SChannel. Here, we brieﬂy discuss the miTLS
veriﬁed reference implementation [15], whose API is distinc-
tive in the detailed connection information that it offers to its
applications. As such, miTLS is an ideal experimental tool on
which to evaluate attacks and implement countermeasures.
The miTLS API consists of functions to initiate and accept
connections, send and receive data, and instigate session re-
sumption, re-keying, and renegotiation. Each of these functions
returns a connection handle and a ConnectionInfo structure,
which details the current epoch in each direction (they can
differ). For each epoch, it includes the nonces and verify data
and points to a SessionInfo structure with the epoch’s session
parameters (including ciphersuites and peer identities). It also
points to the previous epochs on the connection (if any).
The API encodes the security assumptions and guarantees
of TLS as pre- and post-conditions on the connection state.
The application cannot send or receive data unless the con-
nection is in the Open state, which means that a handshake
has successfully completed with an authorized peer. When
a handshake completes at an endpoint, the API guarantees
that, if all the principals mentioned in the ConnectionInfo
are honest, then there is exactly one other endpoint that has
a matching ConnectionInfo and keys. Every application data
fragment sent or received is indexed by the epoch it was sent
on, which means that miTLS will never confuse or concatenate
two data fragments that were received on different epochs; it
is left to the application to decide whether to combine them. If
the connection uses the renegotiation indication extension, the
application gets an additional guarantee that the new epoch is
linked to the old epoch. If at any point in a connection, miTLS
receives a fatal alert or raises an error, the connection is no
longer usable for reading or writing data. If the connection is
gracefully closed, miTLS guarantees that each endpoint has
received the entire data stream sent by its peer. Otherwise, it
only guarantees that a preﬁx of the stream has been received.
V. A MAN-IN-THE-MIDDLE TLS PROXY SERVER
We consider the following scenario. Suppose an honest TLS
client C connects to a TLS server A that is controlled by the
attacker. A then connects to an honest TLS server S, and acts
as a man-in-the-middle proxy between C and S, ferrying data
between C and S across the two independent connections. Of
course, A can still read and tamper with selected fragments.
104
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:56 UTC from IEEE Xplore.  Restrictions apply. 
Now, suppose that A establishes the same keys on both TLS
connections. We will show in this section how A can achieve
this. Then A does not have to decrypt and reencrypt trafﬁc
between the two connections and may instead step out of the
way, allowing C and S to talk directly to one another, making
A’s intervention difﬁcult
to detect even with sophisticated
timing measurements [9].
On its own, the scenario above does not constitute a serious
attack on either connection, since both C and S are aware
that they are connected to A. However, the ability of A to
synchronize keys across two connections can be a stepping
stone towards more dangerous attacks, as we will show in §VI.
In the cryptographic key-exchange literature, this kind of
key synchronization is called an unknown key-share attack [17,
34], whereby two honest parties share a key but one of them
does not realize with whom it shares its key; their mutual belief
in the shared secret is violated [54]. In Abadi’s terminology [3],
these attacks do not disrupt any access control goals based on
responsibility, but they enable an attacker to take credit for
an honest principal’s message. So, if the application that uses
the protocol does not reliably conﬁrm both peers’ identities,
impersonation attacks may appear [36].
In the rest of this section, we show how a malicious server A
can synchronize TLS keys with C and S. To build this
malicious server, we exploit three independent weaknesses in
the RSA handshake, the DHE handshake, and the abbreviated
handshake. We do not make any assumption about application
behavior, and use only standard mechanisms implemented by
mainstream TLS libraries.
V-A SYNCHRONIZING RSA. Suppose C sends a client hello
to A offering an RSA ciphersuite. A then forwards the client
hello to S. When S responds with the server hello, A forwards
it to C. Hence, the client and server nonces cr , sr and the
session identiﬁer sid are the same for both connections.
Next, when S sends its certiﬁcate cert S to A, A instead
sends its own certiﬁcate cert A to C. Now, C generates a pre-
master secret pms, encrypts it under pk A, and sends it to A.
A decrypts pms, re-encrypts it under pk S, and sends it to S.
Hence, both connections have the same pms and (since the
nonces are equal) the same master secret and connection keys,
all of which are now shared between C, S, and A. Finally,
A completes the handshake on both connections, using ms to
compute correct verify data. The messages tampered by A are
illustrated in Figure 3 (Connection 1).
At this point, C and S cache the same session that they both
associate with A (as represented by cert A on C, and optionally,
A’s client certiﬁcate on S). The new epochs on the two
connections are distinguishable only by the client and server
verify data, which differ on the two connections. However,
messages from one connection can be freely forwarded to the
other, since the keys match. Consequently, if A stepped out of
the way, C and S can continue exchanging messages without
realizing that the principal on the other end has changed.
Variants and Mitigations The above trace is robust to vari-
ations in the key exchange. If S demands a client certiﬁcate,
A can provide its own certiﬁcate, and this does not affect the
synchronization of the master secret or connection keys. If both
Fig. 3. Triple handshake attack by a malicious server on client-authenticated
TLS renegotiation: (1) RSA/DHE full handshake, (2) abbreviated handshake
for session resumption, (3) secure (RFC 5746 [49]) renegotiation handshake
C and S support RSA but prefer a different key exchange, say
ECDHE, A can still force them both to use RSA by offering
only RSA in its client and server hellos.
The RSA key exchange does not ensure different keys on
different connections, and there is no standard mitigations
that implementations can employ to prevent it. This behavior
would not surprise a cryptographer or protocol expert, since
only C contributes to the key exchange. However, it is only
occasionally mentioned in protocol speciﬁcations [48, §5] and
continues to surprise protocol designers. As shown in §VI, such
connection synchronizations can defeat the man-in-the-middle
protection used in tunneled protocols like PEAP.
V-B SYNCHRONIZING DHE. Suppose that C (or S) refuses
RSA ciphersuites, but accepts some DHE ciphersuite. We show
that A can still synchronize the two connections, because
the DHE key exchange allows the server to pick and sign
arbitrary Difﬁe-Hellman group parameters, and any client that
105
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:56 UTC from IEEE Xplore.  Restrictions apply. 
accepts the server certiﬁcate and signature implicitly trusts
those parameters.
In this scenario, A substitutes its own certiﬁcate for S’s (as
with RSA), then changes the Difﬁe-Hellman group parameters
in the server key exchange message, and ﬁnally changes the
client’s public key in the client key exchange message.
Suppose S offers a prime p, generator g, and public key
(cid:3) =
PS = gKS mod p. A replaces p with the non-prime value p
PS(PS − 1) and signs the parameters with its own private key.
When C sends its own key exchange message with public key
(cid:3), the attacker replaces it with the public key
PC = gKC mod p
(cid:3) ensures that PS has order
g and sends it to S. Our choice of p
p(cid:2), or equivalently ∀x > 0, P x
∗
(cid:3).
S = PS mod p
1 in the group Z
(cid:3) = q(PS−1) also lead to PS having
Other values of the form p
∗
p(cid:2). Upon receiving this message, C computes
a low order in Z
pms = P
KC
S mod PS(PS − 1)
= PS mod PS(PS − 1)
= PS (with leading 0s stripped)
while S computes pms = gKS mod p = PS. Finally, both
connections share the same pms, ms, and derived keys.
Variants and Mitigations The authenticated Difﬁe-Hellman
key exchange is not intrinsically vulnerable to a man-in-the-
middle, as long as both parties use the same, well chosen
group. The key to this attack is that the attacker is able to make
(cid:3) above is
C accept a group with a non-prime order. In fact, p
always even (and may cause errors with implementations that
rely on Montgomery reduction for modular exponentiation) but
it is easy to ﬁnd odd non-primes that work just as well.
(cid:3) is prime. Yet, none of
the mainstream TLS implementations perform a full primality
check because it is deemed too expensive. A probabilistic
primality check could help, but may not guarantee that the
(cid:3) that defeats it. An alternative mitiga-
attacker cannot ﬁnd a p
tion would be to standardize a few known good Difﬁe-Hellman
groups for use in TLS. Indeed, this is the approach taken in
protocols like IKEv2 and in TLS variants like SRP.
The attack fails if C checks that p
Even when clients and servers use known groups, care must
be taken to validate the public key received from the peer.
Otherwise, they may become vulnerable to small subgroup
attacks [see e.g. 7, 46] which have been exploited in previous
TLS attacks [55, 38]. Barker et al. [11] deﬁne a procedure
for checking public keys, but we found that many TLS
implementations do not implement it. We analyzed TLS clients
and servers to check whether they accept degenerate public
keys (with small orders) like 0, 1, and −1; these keys always
lead to pms ∈ {0, 1,−1}. While 0 and 1 are rejected by
most implementation (to mitigate [38]), we found that NSS,
SChannel, and JSSE do accept −1. On the web, we found
that all web browsers and about 12% of DHE-enabled servers
of the top 10,000 Alexa list also accept −1. Such clients and
servers are vulnerable to our key synchronization attack, since
the pms can be forced to be the same on both connections
(with high probability), even if these clients and servers only
accept known primes and correctly sample their keys.
The elliptic curve version of DHE (ECDHE) allows servers
to offer arbitrary curves, and so theoretically suffers from the
same attack, but all the TLS implementations we tested only
support well-known named curves standardized by NIST.
V-C SYNCHRONIZING ABBREVIATED HANDSHAKES. Sup-
pose C, A, and S have synchronized sessions and connections,
as described above. If C attempts to resume the session with A
over a new connection, A can then synchronize this new
connection with a new connection to S. In fact, abbreviated
handshakes are easier to synchronize than full handshakes.
When C sends its client hello requesting session resumption