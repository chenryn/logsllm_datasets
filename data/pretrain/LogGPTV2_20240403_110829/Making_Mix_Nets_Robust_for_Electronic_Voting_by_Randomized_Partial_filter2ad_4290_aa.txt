title:Making Mix Nets Robust for Electronic Voting by Randomized Partial
Checking
author:Markus Jakobsson and
Ari Juels and
Ronald L. Rivest
USENIX Association
Proceedings of the
11th USENIX Security
Symposium
San Francisco, California, USA
August 5-9, 2002
© 2002 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Making Mix Nets Robust For Electronic Voting By
Randomized Partial Checking
Markus Jakobsson
RSA Laboratories
Bedford, MA 01730
Ari Juels
RSA Laboratories
Bedford, MA 01730
Ronald L. Rivest
Laboratory for Computer Science, M.I.T.
Cambridge, MA 02139
Abstract
We propose a new technique for making
mix nets robust, called randomized partial
checking (RPC). The basic idea is that rather
than providing a proof of completely correct
operation, each server provides strong evi-
dence of its correct operation by revealing
a pseudo-randomly selected subset of its in-
put/output relations.
Randomized partial checking is exception-
ally eﬃcient compared to previous proposals
for providing robustness; the evidence pro-
vided at each layer is shorter than the out-
put of that layer, and producing the evi-
dence is easier than doing the mixing.
It
works with mix nets based on any encryp-
tion scheme (i.e., on public-key alone, and on
hybrid schemes using public-key/symmetric-
key combinations). It also works both with
Chaumian mix nets where the messages are
successively encrypted with each servers’ key,
and with mix nets based on a single public key
with randomized re-encryption at each layer.
Randomized partial checking is particu-
larly well suited for voting systems, as it en-
sures voter privacy and provides assurance of
correct operation. Voter privacy is ensured
(either probabilistically or cryptographically)
with appropriate design and parameter selec-
tion. Unlike previous work, our work pro-
vides voter privacy as a global property of the
mix net rather than as a property ensured by
a single honest server. RPC-based mix nets
also provide very high assurance of a correct
election result, since a corrupt server is very
likely to be caught if it attempts to tamper
with even a couple of ballots.
Keywords: mix network, mix net, shuﬄe
network, electronic voting, randomized par-
tial checking, public veriﬁability.
1 Introduction
Chaum [7] introduced the notion of a mix
net as a tool for achieving anonymity in email
and in electronic elections. A mix net con-
sists of a sequence of servers, called mixes.
Each server receives a batch of input mes-
sages and produces as output the batch in
permuted (mixed) order. Such mix nets are
sometimes called mix cascades or shuﬄe net-
works. When used for voting, the input mes-
sages are the ballots of the voters. An ob-
server should not be able to tell how the in-
puts correspond to the outputs; this property
provides voter privacy in an electronic elec-
tion. In Chaum’s original proposal, before a
message is sent through the mix net it is ﬁrst
successively encrypted with the public keys
of the mixes it will traverse in reverse order;
each mix then decrypts each message before
sending it on to the next mix.
When a mix net is used to provide voter
privacy in an election, it is desirable that it
be robust—i.e., that each mix should also
output a proof that it has operated cor-
rectly. The concern is that otherwise a cor-
rupt server could replace a ballot with an-
other one, appropriately encrypted, without
anybody noticing.
Abstractly, a robust mix net should:
1. operate correctly: the output should cor-
respond to a permutation of the input,
2. provide privacy: an observer should not
be able to determine which input element
corresponds to a given output element
(and vice versa) in any way better than
guessing, and
With an RPC mix net, privacy is a some-
what more delicate aﬀair, as servers will be
routinely disclosing information about their
input/output relations in order to provide ev-
idence of correct operation. We shall see how
privacy can be ensured nonetheless as a global
property of the RPC mix net. In one version
of our proposal, adjacent servers are paired,
such that if one server reveals information
about a link, the paired server does not re-
veal information about that same link. See
Figure 1 for an illustration.
3. be robust: provide a proof or at least
strong evidence that it has operated cor-
rectly.
if
any interested party is able to check the
proof or evaluate the evidence; a prop-
erty called public veriﬁability.
it is beneﬁcial
In addition,
We review previous work on robust mix
nets in Section 2; numerous techniques have
been proposed for achieving robust mix nets.
1.1 Randomized Partial Checking
We introduce a novel robustness technique,
which we call Randomized Partial Checking,
and show how it can be applied to obtain a
highly eﬃcient robust and private mix net,
which we call an RPC mix net. We also show
how an RPC mix net is well suited for use in
electronic elections.
In an RPC mix net, the inputs are mixed
as usual by a sequence of servers. The servers
then produce strong evidence of their correct
operation, rather than a proof of their cor-
rect operation. The strong evidence takes
the form of a partial revelation of their in-
put/output relation. For example, a server
with n inputs might reveal, for each of n/2
randomly selected inputs (or some other suf-
ﬁciently large fraction), which is the cor-
responding output.
(Of course, the server
should have little or no control over which
inputs are selected.) This procedure allows
for a probabilistic veriﬁcation of the correct
operation of each server.
S 1
S 2
S 3
S 4
Figure 1: This ﬁgure shows a particular per-
mutation for a mix net, partially revealed.
The bold lines show input/output correspon-
dences that are revealed; the dashed lines
show correspondences that would be hidden.
Server S1 is paired with S2, and server S3 is
paired with S4; no input/output correspon-
dence is revealed across a pair. Thus, to a
casual observer, only the correspondences re-
lating to the bold lines can be inferred.
Another advantage of RPC mix nets is that
they are very versatile – they can be used with
almost any encryption scheme, whether with
or without sharing of the secret keys among
the mix servers.
1.2 Privacy in RPC mix nets
Privacy in an RPC mix net is a diﬀerent
and somewhat more subtle issue than it is
for a traditional mix net.
In a traditional
mix net, privacy is obtained whenever any
one server is honest (i.e., whenever any one
server keeps its input/output relation totally
secret).
In an RPC mix net, however, ev-
ery server intentionally reveals a portion of its
input/output relation. Therefore, privacy be-
comes a global property of the mix net rather
than the result of any single honest server.
Our basic strategy for ensuring privacy is
such that after the servers reveal partial in-
formation, there is still no way to connect any
input with a particular output, even if some of
the servers are corrupt. Using this approach,
an RPC mix net guarantees privacy against
any minority of cheating servers. While dif-
ferent privacy guarantees can be made, we
consider a construction in which each element
is ”hidden among” at least half of all the can-
didate elements.
1.3 Robustness
Robustness of a mix net can be obtained
in serveral diﬀerent ways, namely cut-and-
choose [17, 2]; repetition robustness [11, 12,
15]; standard zero-knowledge proofs in sort-
ing networks [3, 13]; use of multiple partici-
pants per layer [8, 18]; error detecting tech-
niques [14]; and techniques based on secret
sharing [10, 16].
(We explain the relations
between these in Section 2.)
In most of these schemes, a detected cheat-
ing attempt results in the emulation of of
the cheater (such as in [14]) or the restart-
ing of the protocol after a replacement of the
cheater (such as in [17]).
In some schemes,
such as [8, 18], the outputs of the cheaters
are simply ignored by the honest majority,
and the execution continues without any in-
terruption. (These schemes, though, tolerate
a substantially lower fraction of cheaters.) In
our scheme, either of the two ﬁrst approaches
can be taken upon detection of a cheater,
although the best approach may depend on
the type of encryption used. In particular, if
an encryption scheme allowing re-encryption
(such as ElGamal) is employed, then either
approach may be taken, while emulation is
the better approach in hybrid schemes, and
in schemes of the Chaumian type. This is so
since the operation performed by the servers
on their input elements is deterministic (if we
do not take the permutation aspect into con-
sideration.) For the same reason, schemes of
this latter type requires us to perform the
correctness check in phase with the mixing,
as opposed to after all mixing has been per-
formed. For simplicity, we focus on schemes
based on re-encryption in the following, but
note that given appropriate attention to the
recovery from cheating, our techniques apply
straighforwardly to other types of encryption
as well.
If no servers are caught cheating, it is still
possible that some undetected cheating has
occurred. For example, a corrupt server may
have deleted one of its correct output mes-
sages and replaced it with an arbitrary incor-
rect one. We shall see, however, that it is very
unlikely that a meaningful amount of unde-
tected cheating has occurred, where cheating
is meaningful if and only if it changes the out-
come of the election. Thus, our solution is
geared in particular towards use in election
schemes or similar applications. To quantify
the likelyhood that cheating occured unno-
ticed, we introduce the notion of boundary
checks, and employ them to assess when the
In extremely close
output can be relied on.
races, our techniques may have to be aug-
mented by additional or alternative robust-
ness techniques, while even in reasonably close
races, it will suﬃce. For example, we show
that our techniques would more than suﬃce
to prove robustness in an election such as the
recent Florida state presidential election.
1.4 Application to Electronic Vot-
ing
RPC mix nets are well suited to vot-
ing, since anyone can calculate strong up-
per bounds on the probability that an adver-
sary could have successfully tampered with
enough ballots to change the election out-
come. If this probability is negligible (as it al-
most certainly would be in practice), the ob-
served result of the election is endorsed as “of-
ﬁcial”. Otherwise, we may fall back to an al-
ternative and potentially more costly scheme
to count the cast votes.
Thus, our scheme is optimistic in a slightly
diﬀerent sense than schemes that simply as-
sume, in the absence of detection, that there
are no cheaters.
1.5 Outline of this paper
Section 2 reviews previous work on robust
mix nets. Section 3 then provides a com-
mon framwork and common notation for dis-
cussing mix nets. Section 4 describes our
main idea—that each mix server should re-
veal a randomly selected portion of its in-
put/output relations. Section 5 then sketches
how one can use RPC nets to implement elec-
tronic voting in a practical and trustworthy
manner. Section 6 shows how RPC mix nets
achieve public veriﬁability in the sense that
any voter or other interested party can check
that the probability that the election outcome
is correct is extremely high.
2 Previous Work on Robust
Mix Nets
In the ﬁrst proposal for a robust mix net,
due to Ogata, Kurosawa, Sako, and Takatani
in 1997 [17], robustness was achieved by
means of cut-and-choose methods. Similar
techniques were later also employed in [2].
The primary drawback of this approach is
its ineﬃciency, both in terms of computation
and communication. While the schemes of-
fer public veriﬁability, eﬃciency constraints
make this feature diﬃcult to obtain in a prac-
tical sense for large-scale elections.
An alternative technique employed by Abe
[3] and similarly by Jakobsson and Juels [13]
relies on more eﬃcient zero-knowledge proofs
of ciphertext equivalence. The resulting mix
net construction mimics a sorting network in
its architecture, but uses local random per-
mutations instead of local sorting in its nodes.
While it oﬀers public veriﬁability at reason-
able cost, its asymptotic behavior makes it
useful primarly for batches of small or mod-
erate sizes; it becomes impractical for large
elections.
More recently, techniques developed inde-
pendently by Furukawa and Sako [10] and
by Neﬀ [16] employ what may loosely be re-
garded as secret-sharing mechanisms to de-
tect corruptions of data. Both of these tech-
niques are publicly veriﬁable, and have costs
linear in the number of inputs (and servers).
While they oﬀer features well suited for use in
large-scale elections, our proposed technique
achieves further eﬃciency and versatility.
Researchers have also considered a weak-
ening of the requirement for public veriﬁa-
bility in mix nets, instead relying on a trust
assumption that a certain number of servers
are honest. An early technique in this vein,
introduced by Jakobsson [11], is that of rep-
etition robustness. Repetition robustness in-
volves processing and comparison of several
randomized instances of input items. The
same technique is also employed in [12, 15].
Repetition robustness is primarily useful for
very large batches.
Another approach for achieving robustness
is to simply let each layer of the mixing
be processed by a set of servers (instead of
only one), basing the correctness of the result
on the honesty of a majority in each layer.
This technique was suggested by Desmedt
and Kurosawa [8] for asymmetric ciphertexts,
and later also used for hybrid encryption [18].
Diverging from the other proposals, mix nets
of this type are resilient against corruption
of less than a square root of the number
of servers, instead of against a minority as
is standard. On the other hand, the very
straightforward structure makes this type of
mix net trivial to analyse and understand.
While asymmetric mix networks are well
suited for short plaintexts, they have prob-