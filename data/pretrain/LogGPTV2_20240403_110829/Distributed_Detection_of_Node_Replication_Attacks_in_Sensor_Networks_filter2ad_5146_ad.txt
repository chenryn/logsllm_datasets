√
n
o
i
t
c
e
t
e
D
f
o
y
t
i
l
i
b
a
b
o
r
P
e
g
a
r
e
v
A
0.5
0.4
0.3
0.2
0.1
0
Thin H
Thin Cross
S
Large Cross
L
Large H
Uniform
(b) Probability of Detection This graph illustrates the av-
erage probability of detecting a single node replication
using Line-Selected Multicast in a variety of topologies.
See Appendix A for examples of the graphs tested.
Figure 3. Simulation Results
high probability, using only a constant number of line-
segments. While this approach depends on the routing
topology of the network, our simulations indicate that
it reliably detects node replication in realistic scenarios
(see Section 7).
Since we only use a constant number of line-
segments per node, the Line-Selected Multicast proto-
√
col has very reasonable performance characteristics. As-
n), then our
suming each line-segment is of length O(
√
protocol only requires O(n
n) communication for the
n) location
entire network and each node stores O(
claims. We can also reduce the storage requirement by
using the time synchronization enhancements described
in Section 8.2.
√
7 Simulations
To verify the accuracy of our theoretical predictions,
we ran simulations to measure the communication re-
quirements of our two primary protocols, Randomized
Multicast and Line-Selected Multicast. Since Line-
Selected Multicast relies on the topology of the network
to detect node replications, we also evaluated its detec-
tion rate in a variety of network conﬁgurations. Ex-
amples of the network topologies tested appear in Ap-
pendix A.
In our simulations, we deploy n nodes uniformly at
random within a 500 × 500 square, with n varying be-
tween 1,000 and 10,000. We assume the standard unit-
disc bidirectional communication model and we adjust
the communication range, so that each node will have
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
approximately 40 neighbors on average6. We use an av-
erage of the total number of messages sent or received
per node as a measure of the communication require-
ments, and we measure resiliency by counting the num-
ber of times we must run the protocol in order to detect
a single node replication (i.e., we select a random node
and insert one replica into the network). Thus, we cal-
culate the probability of detection, Pd as:
Pd =
1
# repetitions
(16)
For the Randomized Multicast protocol, we used
p · d · g =
√
n
which theoretically gives us a 63% probability to de-
tect replication, and for Line-Selected Multicast we used
r = 6 (i.e., each location claim creates six line seg-
ments). For each network conﬁguration, we generated
twenty random graphs and averaged the results of ten
trials on each graph.
√
As shown in Figure 3(a), the simulations closely
match our theoretical predictions. The communication
for Randomized Multicast scales linearly with the num-
ber of nodes, while the Line-Selected Multicast only
n). Our simulations also indicate that the
grows at O(
maximum amount of communication required of any
one node as compared to the average case scales loga-
rithmically with the number of nodes in the graph. Using
6Our simulations show little variance with values of d ranging from
10 to 50, though the communication required by the Randomized Mul-
ticast drops slightly for larger values of d.
Broadcast
Deterministic Multicast
Randomized Multicast
Line-Selected Multicast
Communication Memory
O(d)
O(g)
√
O(
n)
√
n)
O(
O(n2)
√
O( g ln g
d
O(n2)
√
n)
O(n
n
)
Table 1. Summary of Protocol Costs This tables il-
lustrates the memory and communication costs for each
protocol. The communication costs are for the entire
network and the memory costs are per node. The Line-
Selected Multicast protocol offers the most efﬁcient so-
lution in terms of resiliency versus cost.
Randomized Multicast in a network with 1,000 nodes
requires a maximum of four times as much communica-
tion as the average case, and with 10,000 nodes, it re-
quires seven times as much. With Line-Selected Multi-
cast, the maximum amount of communication in a net-
work with 1,000 nodes is twice as much as the average
case and four times as much for 10,000 nodes.
As Figure 3(b) illustrates, Line-Selected Multicast re-
liably detects node replications in a variety of irregular
network conﬁgurations. To improve the probability of
detection, we can always repeat the protocol or add a
few additional line segments per node.
8 Discussion
In this section, we compare the performance of the
various protocols we have discussed, and we present
several techniques based on loose-time synchronization
that reduce the storage requirements of the protocols.
We also discuss potential issues that may arise from our
use of public-key cryptography, as well as symmetric
alternatives that would require less computational over-
head at the price of additional communication. In Sec-
tion 8.4, we describe a sophisticated attack that applies
to all of the protocols we have discussed, and we present
a defense against it. Finally, based on the success of
our Randomized Multicast and Line-Selected Multicast
protocols, we argue that algorithms based on emergent
properties offer the most promising techniques for pro-
viding security in sensor networks.
8.1 Protocol Comparison
Table 1 summarizes the costs for each of the dis-
tributed protocols previously discussed. The Broadcast
protocol offers the simplest solution, but the commu-
nication overhead will only be tolerable for small net-
works. Deterministic Multicast improves on the com-
munication requirements, but by selecting a ﬁxed set
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
of witnesses, it loses resiliency. An attacker can per-
form unlimited replications after only compromising a
ﬁxed number of nodes. Randomized Multicast pro-
vides excellent resiliency, since it prevents the adversary
from anticipating the identity of the witnesses. Unfor-
tunately, it imposes communication overhead equal to
that of the Broadcast scheme. However, for networks
in which the number of nodes is less than the square of
the average degree, Randomized-Multicast will tend to
be more space efﬁcient. Finally, Line-Selected Multicast
uses less communication than Broadcast or Randomized
Multicast, but provides comparable or greater resiliency,
making it a particularly attractive choice. Our simula-
tions conﬁrm that this resiliency remains in a variety of
network conﬁgurations (see Section 7). We can also re-
duce the storage requirements for these protocols by us-
ing the time synchronization enhancements described in
Section 8.2.
8.2 Synchronized Detection
We now consider the synchronization issues involved
in detecting node replication. All of the protocols de-
scribed above require a loose notion of synchroniza-
tion to insure timely detection. Various protocols exist
that can offer the coarse-grained level of synchroniza-
tion that we require. For example, Reference-Broadcast
Synchronization (RBS) enables pairwise synchroniza-
tion with low overhead and high precision [12]. Hu
and Servetto describe a protocol that provides asymp-
totically optimal time synchronization in dense net-
works [18]. Any of these protocols will sufﬁce for our
purposes.
Deciding how often to perform the detection protocol
trades efﬁciency of detection against the communication
and storage costs required by each iteration. However,
as we describe below, we can leverage our assumption
of loose synchronization to mitigate the cost of running
the protocols.
8.2.1 High Noon
In one modiﬁcation, detection happens during a ﬁxed
window of time (of length t) that occurs every T units
of time (for T (cid:12) t). At the beginning of each time win-
dow, each node broadcasts its location claim to its neigh-
bors, who then resend it to random locations in the net-
work. Each node looks for conﬂicts in location claims
arriving during the time window and revokes conﬂicting
nodes. After time t has elapsed, the nodes forget all of
the location claims (but continue to remember the list of
revoked nodes). Using this modiﬁcation, the nodes only
devote signiﬁcant memory resources to detection during
the brief time window of length t. The rest of the time
(T − t), they can utilize their entire memory for non-
detection purposes.
8.2.2 Time Slots
As an alternate approach, we assume the node IDs are
randomly distributed on some ﬁxed interval [0..N]. For
a given protocol parameter k, we can divide time into
epochs of length T , with each epoch consisting of k time
slots. During each epoch, in time slot s, all of the nodes
with IDs located in the interval [s· N
k ] broad-
cast their location claims to their neighbors, who then
follow the standard protocol. Nodes receiving a location
claim from a node with an ID in that interval store the
claim for the duration of the time slot and check for con-
ﬂicts. At the end of the time slot, they can forget all of
the claims they have heard. Using this method reduces
the storage requirements at each node to O( p·d·g
k ..(s+1)· N
).
k
8.2.3 Security Requirements
Since both of these modiﬁcations operate deterministi-
cally, the adversary might attempt to launch her replica-
tion attack between time slots or refuse to follow the pro-
tocol (i.e., by not broadcasting her location at the spec-
iﬁed time). However, we can thwart this behavior by
having each node remember which neighbors it heard
from during the previous epoch. Later, if a node hears
from a neighbor that did not participate in the previous
epoch, it will refuse to communicate with that node until
the node successfully participates in a detection epoch.
This effectively precludes the adversary from avoiding
randomized detection.7 Since the nodes in most sensor
networks must already remember a list of their neigh-
bors, this would only require an additional d bits. Of
greater concern is the fact that this modiﬁcation limits
when new nodes can join the network. This can be mit-
igated by appropriate choices for t, T , and k, as well as
decisions regarding deployment timing.
8.3 Authentication
The use of public-key signatures requires several ex-
tensions to our protocols to prevent the signatures them-
selves from becoming a security threat. Also, while we
argued in Section 5.1 that algorithmic and hardware im-
provements are beginning to make public-key cryptog-
raphy practical for sensor networks, we also present a
mechanism that utilizes symmetric one-time signatures
as an alternative to the public-key authentication previ-
ously assumed. While the symmetric signatures reduce
the computational overhead of generating and verifying
signatures, they require additional communication, mak-
ing them less appealing than the public-key approach.
7Technically, both of these modiﬁcations would require some addi-
tional conﬁguration to account for propagation delays and uncertainty
as to the size and width of the network, but the essential idea remains
sound.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
8.3.1 Public Key Security Adjustments
To prevent the use of signatures from becoming a secu-
rity liability, we need to ensure that the adversary can-
not perform a Denial-of-Service attack by making nodes
verify bogus signatures or by reporting its neighbors’
position claims to every node in the network, rather than
probabilistically reporting them to g nodes. In practice,
these two attacks are unlikely to be a concern. Since
the basic protocol currently requires each node that re-
ceives a location claim to verify the signatures contained
within the claim, legitimate nodes will immediately de-
tect any attempt to inject faulty signatures. If we add
some form of neighbor-to-neighbor authentication, then
a node identifying a faulty signature can also assign ap-
propriate blame for the fault.
It may then choose to
blacklist or otherwise revoke the guilty party. If the ad-
versary can ﬂood a node with faulty signatures not orig-
inating from a node (via some other broadcast source),
then the adversary could just as easily perform a jam-
ming attack or otherwise interfere with legitimate com-
munication. Neighbor-to-neighbor authentication also
prevents the adversary from framing an innocent third
party.
To address the second concern, we note that when
a legitimate node, γ, forwards a location claim to its g
randomly chosen locations, these location claims must
be routed through its neighbors.
If the neighbors lis-
ten promiscuously, they can all detect γ’s attempts to
forward the same location claim more than g times and
refuse to forward additional claims. Unfortunately, this
does require each node to keep a count associated with
each neighbor, but it may be necessary to prevent the ad-
versary from wasting the network’s collective memory.
8.3.2 Symmetric Alternatives
As an alternative to computation-intensive public-key
algorithms, researchers have proposed using more efﬁ-
cient symmetric cryptographic mechanisms for sensor
networks – for example, broadcast authentication based
on one-way chains and time synchronization [20, 29], or
one-time signatures based on one-way functions [25].
For the purposes of this paper, if sensor nodes only
need to sign a single location statement, a one-time
signature will sufﬁce. For example, we could use the
Merkle-Winternitz signature [25], which has already
been successfully used for stream signatures [31]. To
verify a Merkle-Winternitz signature, a veriﬁer only
needs to possess an authentic veriﬁcation value, i.e., the
public key, which in this case is a hash value over several
one-way chain values. However, since storing all of the
public values of all the nodes would have a high over-
head, we could instead construct a Merkle hash tree [24]