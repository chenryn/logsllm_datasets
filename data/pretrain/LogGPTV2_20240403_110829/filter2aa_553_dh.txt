double rect_areap(struct rect * rp){return rp->x * rp->y;}
...
double area;
1061
area = rect_areap( &(struct rect) {10.5, 20.0});
值210被赋给area。
复合字面量在所有函数的外部，具有静态存储期；如果复合字面量在块
中，则具有自动存储期。复合字面量和普通初始化列表的语法规则相同。这
意味着，可以在复合字面量中使用指定初始化器。
14.7.9 伸缩型数组成员（C99）
C99新增了一个特性：伸缩型数组成员（flexible array member），利用
这项特性声明的结构，其最后一个数组成员具有一些特性。第1个特性是，
该数组不会立即存在。第2个特性是，使用这个伸缩型数组成员可以编写合
适的代码，就好像它确实存在并具有所需数目的元素一样。这可能听起来很
奇怪，所以我们来一步步地创建和使用一个带伸缩型数组成员的结构。
首先，声明一个伸缩型数组成员有如下规则：
伸缩型数组成员必须是结构的最后一个成员；
结构中必须至少有一个成员；
伸缩数组的声明类似于普通数组，只是它的方括号中是空的。
下面用一个示例来解释以上几点：
struct flex
{
int count;
double average;
double scores[]; // 伸缩型数组成员
1062
};
声明一个struct flex类型的结构变量时，不能用scores做任何事，因为没
有给这个数组预留存储空间。实际上，C99的意图并不是让你声明struct flex
类型的变量，而是希望你声明一个指向struct 
flex类型的指针，然后用
malloc()来分配足够的空间，以储存struct flex类型结构的常规内容和伸缩型
数组成员所需的额外空间。例如，假设用scores表示一个内含5个double类型
值的数组，可以这样做：
struct flex * pf; // 声明一个指针
// 请求为一个结构和一个数组分配存储空间
pf = malloc(sizeof(struct flex) + 5 * sizeof(double));
现在有足够的存储空间储存count、average和一个内含5个double类型值
的数组。可以用指针pf访问这些成员：
pf->count = 5;     // 设置 count 成员
pf->scores[2] = 18.5; // 访问数组成员的一个元素
程序清单14.13进一步扩展了这个例子，让伸缩型数组成员在第1种情况
下表示5个值，在第2种情况下代表9个值。该程序也演示了如何编写一个函
数处理带伸缩型数组元素的结构。
程序清单14.12 flexmemb.c程序
// flexmemb.c -- 伸缩型数组成员（C99新增特性）
#include 
#include 
struct flex
1063
{
size_t count;
double average;
double scores []; // 伸缩型数组成员
};
void showFlex(const struct flex * p);
int main(void)
{
struct flex * pf1, *pf2;
int n = 5;
int i;
int tot = 0;
// 为结构和数组分配存储空间
pf1 = malloc(sizeof(struct flex) + n * sizeof(double));
pf1->count = n;
for (i = 0; i scores[i] = 20.0 - i;
tot += pf1->scores[i];
1064
}
pf1->average = tot / n;
showFlex(pf1);
n = 9;
tot = 0;
pf2 = malloc(sizeof(struct flex) + n * sizeof(double));
pf2->count = n;
for (i = 0; i scores[i] = 20.0 - i / 2.0;
tot += pf2->scores[i];
}
pf2->average = tot / n;
showFlex(pf2);
free(pf1);
free(pf2);
return 0;
}
void showFlex(const struct flex * p)
1065
{
int i;
printf("Scores : ");
for (i = 0; i count; i++)
printf("%g ", p->scores[i]);
printf("\nAverage: %g\n", p->average);
}
下面是该程序的输出：
Scores : 20 19 18 17 16
Average: 18
Scores : 20 19.5 19 18.5 18 17.5 17 16.5 16
Average: 17
带伸缩型数组成员的结构确实有一些特殊的处理要求。第一，不能用结
构进行赋值或拷贝：
struct flex * pf1, *pf2;  // *pf1 和*pf2 都是结构
...
*pf2 = *pf1;       // 不要这样做
这样做只能拷贝除伸缩型数组成员以外的其他成员。确实要进行拷贝，
应使用memcpy()函数（第16章中介绍）。
第二，不要以按值方式把这种结构传递给结构。原因相同，按值传递一
1066
个参数与赋值类似。要把结构的地址传递给函数。
第三，不要使用带伸缩型数组成员的结构作为数组成员或另一个结构的
成员。
这种类似于在结构中最后一个成员是伸缩型数组的情况，称为struct
hack。除了伸缩型数组成员在声明时用空的方括号外，struct hack特指大小为
0的数组。然而，struct hack是针对特殊编译器（GCC）的，不属于C标准。
这种伸缩型数组成员方法是标准认可的编程技巧。
14.7.10 匿名结构（C11）
匿名结构是一个没有名称的结构成员。为了理解它的工作原理，我们先
考虑如何创建嵌套结构：
struct names
{
char first[20];
char last[20];
};
struct person
{
int id;
struct names name;// 嵌套结构成员
};
struct person ted = {8483, {"Ted", "Grass"}};
1067
这里，name成员是一个嵌套结构，可以通过类似ted.name.first的表达式
访问"ted"：
puts(ted.name.first);
在C11中，可以用嵌套的匿名成员结构定义person：
struct person
{
int id;
struct {char first[20]; char last[20];}; // 匿名结构
};
初始化ted的方式相同：
struct person ted = {8483, {"Ted", "Grass"}};
但是，在访问ted时简化了步骤，只需把first看作是person的成员那样使
用它：
puts(ted.first);
当然，也可以把first和last直接作为person的成员，删除嵌套循环。匿名
特性在嵌套联合中更加有用，我们在本章后面介绍。
14.7.11 使用结构数组的函数
假设一个函数要处理一个结构数组。由于数组名就是该数组的地址，所
以可以把它传递给函数。另外，该函数还需访问结构模板。为了理解该函数
的工作原理，程序清单14.13把前面的金融程序扩展为两人，所以需要一个
内含两个funds结构的数组。
1068
程序清单14.13 funds4.c程序
/* funds4.c -- 把结构数组传递给函数 */
#include 
#define FUNDLEN 50
#define N 2
struct funds {
char   bank[FUNDLEN];
double  bankfund;
char save[FUNDLEN];
double  savefund;
};
double sum(const struct funds money [], int n);
int main(void)
{
struct funds jones[N] = {
{
"Garlic-Melon Bank",
4032.27,
"Lucky's Savings and Loan",
1069
8543.94
},
{
"Honest Jack's Bank",
3620.88,
"Party Time Savings",
3802.91
}
};
printf("The Joneses have a total of $%.2f.\n",sum(jones, N));
return 0;
}
double sum(const struct funds money [], int n)
{
double total;
int i;
for (i = 0, total = 0; i < n; i++)
total += money[i].bankfund + money[i].savefund;
return(total);
1070
}
该程序的输出如下：
The Joneses have a total of $20000.00.
（读者也许认为这个总和有些巧合！）
数组名jones是该数组的地址，即该数组首元素（jones[0]）的地址。因
此，指针money的初始值相当于通过下面的表达式获得：
money = &jones[0];
因为money指向jones数组的首元素，所以money[0]是该数组的另一个名
称。与此类似，money[1]是第2个元素。每个元素都是一个funds类型的结
构，所以都可以使用点运算符（.）来访问funds类型结构的成员。
下面是几个要点。
可以把数组名作为数组中第1个结构的地址传递给函数。
然后可以用数组表示法访问数组中的其他结构。注意下面的函数调用与
使用数组名效果相同：
sum(&jones[0], N)
因为jones和&jones[0]的地址相同，使用数组名是传递结构地址的一种
间接的方法。
由于sum()函数不能改变原始数据，所以该函数使用了ANSI C的限定符
const。
1071
14.8 把结构内容保存到文件中
由于结构可以储存不同类型的信息，所以它是构建数据库的重要工具。
例如，可以用一个结构储存雇员或汽车零件的相关信息。最终，我们要把这
些信息储存在文件中，并且能再次检索。数据库文件可以包含任意数量的此
类数据对象。储存在一个结构中的整套信息被称为记录（record），单独的
项被称为字段（field）。本节我们来探讨这个主题。
或许储存记录最没效率的方法是用fprintf()。例如，回忆程序清单14.1中
的book结构：
#define MAXTITL 40
#define MAXAUTL 40
struct book {
char title[MAXTITL];
char author[MAXAUTL];
float value;
};
如果pbook标识一个文件流，那么通过下面这条语句可以把信息储存在
struct book类型的结构变量primer中：
fprintf(pbooks, "%s %s %.2f\n", primer.title,primer.author, primer.value);
对于一些结构（如，有 30 个成员的结构），这个方法用起来很不方
便。另外，在检索时还存在问题，因为程序要知道一个字段结束和另一个字
段开始的位置。虽然用固定字段宽度的格式可以解决这个问题（例
如，"%39s%39s%8.2f"），但是这个方法仍然很笨拙。
1072
更好的方案是使用fread()和fwrite()函数读写结构大小的单元。回忆一
下，这两个函数使用与程序相同的二进制表示法。例如：
fwrite(&primer, sizeof(struct book), 1, pbooks);
定位到 primer 结构变量开始的位置，并把结构中所有的字节都拷贝到
与 pbooks 相关的文件中。sizeof(struct book)告诉函数待拷贝的一块数据的大
小，1 表明一次拷贝一块数据。带相同参数的fread()函数从文件中拷贝一块
结构大小的数据到&primer指向的位置。简而言之，这两个函数一次读写整
个记录，而不是一个字段。
以二进制表示法储存数据的缺点是，不同的系统可能使用不同的二进制
表示法，所以数据文件可能不具可移植性。甚至同一个系统，不同编译器设
置也可能导致不同的二进制布局。
14.8.1 保存结构的程序示例
为了演示如何在程序中使用这些函数，我们把程序清单14.2修改为一个
新的版本（即程序清单14.14），把书名保存在book.dat文件中。如果该文件
已存在，程序将显示它当前的内容，然后允许在文件中添加内容（如果你使
用的是早期的Borland编译器，请参阅程序清单14.2后面的“Borland C和浮点
数”）。