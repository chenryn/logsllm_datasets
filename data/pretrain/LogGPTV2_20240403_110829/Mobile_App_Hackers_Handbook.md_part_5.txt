specifically customized to render in iOS web views and are typically loaded via MobileSafari. Browser-based
applications use traditional web technologies, including HTML, JavaScript, and Cascading Style Sheets. You
should approach browser-based applications using traditional web application security methodologies; they are
not covered in any great detail within this book.
Hybrid applications are a cross between standard native and browser-based applications. Typically, hybrid
applications are deployed with a native wrapper that is used to display one or more browser-based applications
through use of a mobile web view. Hybrid applications also include those used as part of a Mobile Enterprise
Application Platform deployment and are discussed in greater detail in Chapter 18. Hybrid applications offer the
advantages of both native and browser-based applications; these include the flexibility for real-time updates,
because HTML and JavaScript applications are not constrained by code signing, as well as native device
functionality such as camera access, through JavaScript to Objective-C bridge APIs.
Distribution of iOS Applications
This section covers the different official methods by which developers can distribute iOS applications to devices;
namely the Apple App Store and the official Apple developer program.
Apple App Store
The Apple App Store has been mentioned on several occasions so far in this book and aside from being the
standard method of application distribution, it’s also the one with which most people are familiar.
The App Store is the official distribution market for iOS applications where users can search and browse for
downloadable applications. Applications in the App Store are developed using Apple’s iOS SDK and are targeted
for iPhone and iPod touch or iPad devices. The majority of applications in the App Store are created by third-
party publishers and can be downloaded for free or a fixed cost.
Before developers can publish an application they must have an Apple Developer account and be a member of
the iOS Developer Program. Being a member of this program entitles you to obtain a developer certificate that
can be used to code sign applications and run them on up to 100 different iOS devices using an ad hoc
provisioning profile. Apple permits ad hoc distribution in this way to provide third-party developers a means to
test their applications on real devices. Developers wanting to distribute their application can submit a copy
signed using their certificate to Apple, who will validate the application based on their App Store approval
process. Although the exact details of this process are unknown, it is believed to contain both manual and
automated testing of the application to identify functional and usability defects and ensure the application
conforms with the App Store review guidelines
(https://developer.apple.com/appstore/resources/approval/guidelines.html). As part of this process the
application is strictly vetted for malicious content such as attempting to steal the address book or using private
APIs that are reserved for system applications; such behavior would result in App Store rejection.
Enterprise Distribution
The iOS enterprise developer program allows organizations to develop and distribute in-house applications to
their employees. This is typically used by organizations that have internal applications that they do not want to
be available in the App Store. Users in the enterprise developer program can obtain and use a code signing
certificate in a similar way to that used for ad hoc distribution. However, the significant difference between
enterprise distribution and ad hoc distribution is that there is no limitation on the number of devices that an
application can be code signed for. This has obvious possibilities for abuse and therefore Apple performs
additional validation of users wanting to enter this program: A developer must have a legitimate business along
with a Dun and Bradsheet number to enroll.
However, some cases exist where enterprise certificates have been abused, the most notable being the GBA4iOS
application, a Game Boy Advanced emulator (http://www.gba4iosapp.com/). This application uses an expired
enterprise certificate to allow users to install an application that would not normally be accepted by the App
Store. Although the certificate has since been revoked by Apple, a loophole exists whereby setting the device’s
date back to before the date of revocation will allow it to be installed. This technique was also used by the Pangu
jailbreak (http://en.pangu.io/) as a means of side loading the jailbreak application to the device to gain initial
code execution.
Application Structure
iOS applications are distributed as an iOS App Store package (IPA) archive, a compressed package containing the
necessary compiled application code, resources, and application metadata required to define a complete
application. These packages are nothing more than a Zip file and can be decompressed to reveal the expected
structure, as shown here:
Payload
Payload/Application.app
iTunesArtwork
iTunesMetadata.plist
The Payload folder is where all the application data is located, including the compiled application code and any
associated static resources, all stored within a folder named after the application and suffixed with the .app
extension. The iTunesArtwork file is a 512 x 512-pixel Portable Network Graphics (PNG) image used as the
application’s icon in iTunes and the App Store. The iTunesMetadata.plist contains the relevant application
metadata, including details such as the developer’s name, bundle identifier, and copyright information.
Installing Applications
A number of methods can be used to install the IPA package on the device, the most common and the one you
are most likely familiar with is by using iTunes. iTunes is the Apple media player that you can use to manage
your application and media library for OS X and Microsoft Windows operating systems as well as to synchronize
content from your iOS device. Using iTunes you can download applications from the App Store and synchronize
them to your device. You can also use it for installing enterprise or ad hoc builds, where the latter assumes the
corresponding provisioning profile is installed. iOS application developers are likely to have used Apple’s Xcode
integrated development environment (IDE) to build and install applications. When compiling an application
from source, you can use Xcode to build, install, and debug an application on a device. It also provides a drag-
and-drop interface for installing IPA packages similarly to iTunes, within the Xcode organizer or devices view
depending on which version of Xcode you are running. Both of these implementations are proprietary to Apple
and do not support Linux. However, libimobiledevice, the open source library available for Linux users, provides
support for communicating with iOS devices natively. A suite of tools has been built upon this library and
provides Linux users with the necessary software to interact with iOS devices. To install IPA packages to a
device, Linux users can use the ideviceinstaller command.
The application installation process occurs over the USB connection, and the relevant installer software is
required to use Apple’s proprietary USB networking system as a transport mechanism. This communication
transport is implemented using the USB multiplexing daemon usbmuxd, which provides a TCP-like transport for
multiplexing many connections over one USB pipe. An open source implementation is available at
https://github.com/libimobiledevice/usbmuxd, and the iPhone Dev Team has documented an overview of the
protocol at http://wikee.iphwn.org/usb:usbmux. On the device, the installd daemon handles the actual
installation process. This daemon is responsible for both unpacking and installing applications as well as
compressing and packaging applications transferred to iTunes as part of the device synchronization. Before
performing either of these tasks, installd validates the code signature for the application. On jailbroken devices
you can circumvent this process using tweaks such as AppSync and using ipainstaller
(https://github.com/autopear/ipainstaller) to directly install the IPA from the filesystem on the device.
Prior to 1OS8, when you installed an application, it was placed in the /var/mobile/Applications/ folder using a
universally unique identifier (UUID) to identify the application container. However, the filesystem layout in
iOS8 has changed: the static bundle and the application data folders are stored in separate locations. An
application will now typically adhere to the following format:
/var/mobile/Containers/Bundle/Application//Application.app/
/var/mobile/Containers/Data/Application//Documents/
/var/mobile/Containers/Data/Application//Library/
/var/mobile/Containers/Data/Application//tmp/
Each of these directories has a unique function within the sandboxed container:
Application.app—This folder represents the folder detailed in the “Application Structure” section and
stores the static content of the application and the compiled binary. This folder should not be written to:
Doing so invalidates the code signature.
Documents—This folder is the persistent data store for the application. The contents of this folder are
backed up by iTunes.
Library—This folder contains the application support files; that is, files that are not user data files.
Examples include configurations, preferences, caches, and cookies. iTunes backs up the contents of this
directory, with the exception of the Caches subdirectory.
tmp—This folder is used to store temporary files; that is, files that do not need to persist between
application launches.
Understanding Application Permissions
The introduction of iOS 6 brought a number of new privacy and permission improvements that have been
refined with each new release since. Before iOS 6, any iOS application that had undergone App Store approval
was able to access your contact lists, photos, and other sensitive data without your knowledge as was the case
with the Path application (http://www.wired.com/2012/02/path-social-media-app-uploads-ios-address-
books-to-its-servers/).
The permission model on iOS works a little differently than on other mobile platforms: Data is segregated into
classes and an application must request permissions from the user to access data from that class. Data is
broadly segregated into the following classes:
Location services
Contacts
Calendar
Photos
Reminders
Microphone access
Motion activity
Bluetooth access
Social media data
When an application requires access to data protected by these privacy classes it must prompt the user to allow
or deny access. For example, if an application wants access to the device’s address book it must request
permission from the user as shown here:
ABAddressBookRef addressBookRef = ABAddressBookCreateWithOptions(NULL,
NULL);
if (ABAddressBookGetAuthorizationStatus()==
kABAuthorizationStatusNotDetermined) {
ABAddressBookRequestAccessWithCompletion(addressBookRef, ^(bool granted,
CFErrorRef error) {
if (granted) {
// access is granted
}
else {
// access is denied
}
});
This code causes the application to display a privacy prompt as shown in Figure 2.2.
Figure 2.2 The user sees this privacy prompt when an application tries to access the address book.
At this stage the user can either allow or deny the application access to the requested resource. If the request is
granted then the application will be allowed access to the resource indefinitely or until the user revokes it via
the Privacy settings menu, an example of which is shown in Figure 2.3.
Figure 2.3 Users can access Privacy settings if they want to grant access to a resource.
As you can probably imagine, the privilege model is highly dependent upon user awareness; if the user
knowingly grants permissions to the application then the application is able to abuse them. One such example
of this was the “Find and Call” malware (http://securelist.com/blog/incidents/33544/find-and-call-leak-
and-spam-57/), which evaded the App Store vetting process and after prompting users to allow access to their
address books, proceeded to upload the information to a centralized server.
The release of iOS 8 saw refinements to the privacy settings, and introduced a new feature that allows the user
to control when an application can access location information. The possible values are
The application is never allowed access to location information.
The app is allowed access only while the app is in the foreground and in use.
The app can access location information all the time.
This additional granularity can prevent a malicious application acting as a tracking device, monitoring a user’s
movements in the background, and perhaps shows how Apple may refine access to other data classes in the
future.
Jailbreaking Explained
On iOS, access to the device is tightly locked down; a user is unable to get interactive access to the device or
operating system. In addition, the ecosystem is to an extent governed by Apple and the guidelines of the App
Store. For this reason, an online community has focused on alleviating these constraints by releasing jailbreaks
to the public. In a nutshell, jailbreaking removes the limitations in iOS by providing users with root-level access
to their device. Many misconceptions exist about what jailbreaking your device entails technically. This section
provides an insight into jailbreaking, the various terminologies you will encounter, and briefly explains some of
the previous public jailbreaks. For an in-depth analysis of the jailbreaking process, review the iOS Hacker’s
Handbook 10(ISBN 978-1118204122, Miller et al; 2012).
Reasons for Jailbreaking
Perhaps the most common reason for users to jailbreak a device is to get access to a host of applications that
would not meet the compliance checks imposed by the App Store. Jailbreaking your device allows you to install
applications from unofficial marketplaces such as Cydia. These applications are not restricted by Apple’s
compliance vetting and can therefore use banned APIs or perform powerful customization or personalization of
the interface.
A slightly darker side to jailbreaking also exists: piracy. Piracy is a powerful driver for many users. Jailbreaking
your device allows you to circumvent the code signing restrictions that prohibit running applications other than
those signed by Apple. Jailbroken devices have no such restrictions meaning that you can download and run
cracked applications that you would normally have to pay for if acquired via Apple’s App Store.
In the past, jailbreaking has also given users access to functionality or features that they may not otherwise be
able to access or be required to pay the carrier for. A good example of this is tethering, which up until the
personal hotspot feature was introduced in to iOS was a feature that had to be enabled by the carrier. Indeed,
this feature is still only supported on a subset of devices. Furthermore, in the past jailbreaking also provided
some users with the ability to carrier unlock their device using utilities such as ultrasn0w
(http://theiphonewiki.com/wiki/Ultrasn0w).
Accessing such utilities can be an appealing prospect for many users so it is understandable why people choose
to jailbreak their devices. However, downsides exist to jailbreaking. By performing a jailbreak the user
fundamentally weakens the security of the operating system. Jailbreaks create the ability for unsigned code—
that is, code that has not been vetted by Apple—to run on the device. The installation of tweaks such as AppSync
facilitates the installation of unsigned IPA packages, where the integrity of the creator cannot always be
validated. From a security perspective this is clearly a concern as it opens the device to a number of potential
risks, the most obvious being malware. By courtesy of the rigorous vetting performed as part of the App Store
submission process, iOS users have been relatively unaffected by malware to date. There have been few
examples of malware affecting non-jailbroken devices. The majority of the identified iOS malware samples have
affected jailbroken devices only:
iKee—This was the first iPhone worm; it targeted jailbroken devices that had the SSH service running and
where the users had not changed the default credentials for the device. In this instance the malware was
relatively benign and simply changed the lock screen background to an image of Rick Astley
(http://theiphonewiki.com/wiki/Ikee-virus).
iKee.B—This malware compromised devices via the Secure Shell (SSH) service in a similar way as the iKee
malware did. However, the intentions of this variant were much more malicious; the malware turned the
device into a bot, communicating back to a Lithuanian-hosted Command and Control (C&C) server. The
malware was also reported to redirect Dutch ING Direct customers to a malicious phishing site in order to
steal user account information (http://www.f-secure.com/weblog/archives/00001822.html).
Unflod Baby Panda—In April 2014 a piece of malware believed to have Chinese origins was identified.
This malware, nicknamed “Unflod Baby Panda” due to the name of the library, took the form of a Cydia
Substrate tweak and hooked key functions from the security framework to steal users’ Apple ID and
password. Stefan Esser provides a brief analysis of this malware at
https://www.sektioneins.de/en/blog/14-04-18-iOS-malware-campaign-unflod-baby-panda.html.
Types of Jailbreaks
Shortly after the release of the original iPhone in July 2007, people began to focus on jailbreaks. The majority of
the released jailbreaks have relied on physical access to the device to achieve initial code execution. These
jailbreaks have required a USB connection and are therefore less likely to be used against an unwitting victim.
Examples of these types of jailbreaks include the evasi0n jailbreak (http://evasi0n.com/iOS6/), which initially
exploited an issue in the MobileBackup service, and the Pangu (http://en.pangu.io/) jailbreak that used an
expired enterprise certificate to install an application and get initial userland code execution on the device.
Although much less common, several other userland exploits can be triggered remotely, without the knowledge
of the user—namely the three JailbreakMe exploits, released by comex (https://github.com/comex).
JAILBREAKME v3 SAFFRON
The JailbreakMe v3 Saffron jailbreak, developed by Comex, uses two vulnerabilities to compromise the
device and affects iOS devices earlier than 4.3.4. The jailbreak can be initiated simply by browsing to a web
server hosting the exploit in MobileSafari, where the payload is delivered inside a PDF file. The first
vulnerability (CVE-2011-0226) is an integer signedness issue that occurs while decoding Type 1 fonts and
resides in the FreeType font engine as used by the CoreGraphics framework. Exploitation of this issue
provides the initial code execution, which is a used courtesy of a return-oriented programming (ROP)
payload to exploit a second vulnerability. The second vulnerability (CVE-2011-0227) exploited by
JailbreakMe v3 Saffron achieves code execution in the kernel by leveraging a type confusion vulnerability
in the IOMobileFrameBuffer IOKit interface accessible from within the MobileSafari sandbox. For a
detailed write-up of this vulnerability, review the analysis by Sogeti (http://esec-
lab.sogeti.com/post/Analysis-of-the-jailbreakme- v3-font-exploit). The source code is also available
for analysis (https://github.com/comex/star_).
At a high level, jailbreaks can be categorized in three ways depending on the type of persistence they provide.
The jailbreak community has coined the terms untethered, tethered, and semi-tethered to describe the level of
persistence on the device a jailbreak affords:
Untethered jailbreak—This type of jailbreak is the most desirable for users and also the most difficult to
achieve. It persists on the device across reboots, which has historically been achieved using one of two
techniques. The first technique involves the use of a low level bootloader image that is modified to perform
no validation of the iBoot image, which in turn allows an unsigned kernel to be loaded. This is the same
technique used by jailbreaks that leverage the 0x24000 Segment Overflow vulnerability detailed in
http://theiphonewiki.com/wiki/0x24000_Segment_Overflow. The second technique first uses a userland
exploit, such as that used by the Corona exploit
(http://theiphonewiki.com/wiki/Racoon_String_Format_Overflow_Exploit) to initially get arbitrary code
execution; a kernel exploit is then subsequently used to patch the kernel and place it into a jailbroken state.
As previously noted, an untethered jailbreak persists each time a device is rebooted without the need of any
additional exploitation or assistance from a connected computer.
Tethered jailbreaks—This type of jailbreak is not persistent across reboots and requires the assistance of a
computer to start the device. In a tethered jailbreak the kernel is not persistently patched or patched on the
fly and if the device attempts to boot on its own it can get stuck in recovery mode. Essentially, the device
must be re-jailbroken each time it is rebooted or turned on and without this it is essentially useless. An
example of a tethered jailbreak is the limera1n exploit by geohot (http://www.limera1n.com/), which affects
the device firmware upgrade (DFU) boot ROM in pre-A5 devices by exploiting a heap overflow in the USB
stack. This jailbreak was particularly powerful because it required a hardware fix to resolve and therefore
provided the platform upon which many other untethered jailbreaks were based, such as redsn0w or limera1n
untether, which used comex’s packet filter kernel exploit
(http://theiphonewiki.com/wiki/Packet_Filter_Kernel_Exploit).
Semi-tethered jailbreaks—These jailbreaks are halfway between untethered and tethered in that although
they require the assistance of a computer to start the device into a jailbroken state, rebooting or starting the
device without this assistance is possible, but only into a non-jailbroken state.
evasi0n JAILBREAK
The evasi0n jailbreak affected iOS versions 6.0–6.1.2 and was relatively unique at the time because it was
able to achieve the initial code execution on the device without the use of any memory corruption
vulnerabilities. Instead, it uses a series of impressive bypasses and logic bugs to evade the userland exploit
mitigations to eventually achieve arbitrary code execution. Included in these vulnerabilities is a logic bug
(CVE-2013-0979) in the lockdownd, service which when exploited, allows the permissions of arbitrary files
to be changed. The jailbreak then exploits several weaknesses in the iOS kernel, the first of which existed
in the IOUSBDeviceFamily driver (CVE-2013-0981) due to an issue that allowed arbitrary functions to be
called from objects that resided in user space. A detailed write-up of the kernel vulnerabilities used in this
jailbreak has been provided by Azimuth (http://blog.azimuthsecurity.com/2013/02/from-usr-to-svc-