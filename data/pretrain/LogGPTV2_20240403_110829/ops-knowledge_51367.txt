User: 如何使用Ansible自动化发布和部署软件？请提供配置实例和说明。
Assistant: 使用Ansible自动化发布和部署软件，可以极大地简化应用部署的流程，同时提高部署的一致性和可靠性。下面是一个基本的配置实例：

1. 安装Ansible

首先在控制机上安装Ansible。可以使用python pip命令来安装：

```
pip install ansible
```

2. 配置Ansible主机

将需要部署应用的服务器的IP地址或主机名添加到Ansible的主机清单文件中，例如hosts文件：

```
[node]
192.168.1.10
192.168.1.11
```

这里我们列出了两个主机，可以动态添加更多的主机，以满足不同的需要。

3. 编写Ansible Playbook

在Ansible的Playbook中，可以定义部署和发布过程中所使用的角色、任务、变量等。下面是一个简单的Playbook示例：

```
---
- hosts: node
  become: yes
  vars:
    app_version: 1.2.0
  roles:
    - app_deploy
    - app_restart
```

这个Playbook的执行流程如下：

- 执行主机需要是node组内的主机；
- 以管理员身份运行；
- 定义变量app_version；
- 执行两个角色：app_deploy和app_restart。

4. 编写Ansible角色

Ansible角色是一个可重用的部署单元，它包含了一些必要的任务，可以轻松地在不同的应用中使用。下面是app_deploy角色的一个例子：

```
---
- name: create app folder
  file:
    state: directory
    path: /opt/myapp

- name: copy app files
  copy:
    src: /tmp/myapp-{{ app_version }}.tar.gz
    dest: /opt/myapp

- name: extract app package
  unarchive:
    src: /opt/myapp/myapp-{{ app_version }}.tar.gz
    dest: /opt/myapp
    extra_opts: [--strip-components=1]
```

在app_deploy角色中，我们使用了三个常用的Ansible模块：file、copy和unarchive。它们分别创建文件夹、拷贝文件和解压压缩包。

5. 执行Ansible Playbook

最后，我们可以使用ansible-playbook命令来执行上述Playbook：

```
ansible-playbook -i hosts deploy.yml
```

这样Ansible就会自动化执行我们的发布和部署过程，从而实现自动化的应用部署。