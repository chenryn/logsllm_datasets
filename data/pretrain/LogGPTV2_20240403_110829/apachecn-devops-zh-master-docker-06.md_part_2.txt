$ docker container ls -a
```
您可以在下面的屏幕中看到预期的输出:
![](img/48cc683a-524b-44f7-b0a2-e1382991fd5f.png)
现在，让我们来看看建立一个有所作为的形象。
# 窗口容器文件
Windows 容器映像使用与 Linux 容器相同格式的 Dockerfile 命令。以下 Dockerfile 将在容器上下载、安装和启用 IIS web 服务器:
```
# escape=`
FROM microsoft/nanoserver:sac2016
RUN powershell -NoProfile -Command `
    New-Item -Type Directory C:\install; `
    Invoke-WebRequest https://az880830.vo.msecnd.net/nanoserver-ga-2016/Microsoft-NanoServer-IIS-Package_base_10-0-14393-0.cab -OutFile C:\install\Microsoft-NanoServer-IIS-Package_base_10-0-14393-0.cab; `
    Invoke-WebRequest https://az880830.vo.msecnd.net/nanoserver-ga-2016/Microsoft-NanoServer-IIS-Package_English_10-0-14393-0.cab -OutFile C:\install\Microsoft-NanoServer-IIS-Package_English_10-0-14393-0.cab; `
    dism.exe /online /add-package /packagepath:c:\install\Microsoft-NanoServer-IIS-Package_base_10-0-14393-0.cab & `
    dism.exe /online /add-package /packagepath:c:\install\Microsoft-NanoServer-IIS-Package_English_10-0-14393-0.cab & `
    dism.exe /online /add-package /packagepath:c:\install\Microsoft-NanoServer-IIS-Package_base_10-0-14393-0.cab & ;`
    powershell -NoProfile -Command `
    Remove-Item -Recurse C:\install\ ; `
    Invoke-WebRequest https://dotnetbinaries.blob.core.windows.net/servicemonitor/2.0.1.3/ServiceMonitor.exe -OutFile C:\ServiceMonitor.exe; `
    Start-Service Was; `
    While ((Get-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\WAS\Parameters\ -Name NanoSetup -ErrorAction Ignore) -ne $null) {Start-Sleep 1}
EXPOSE 80
ENTRYPOINT ["C:\\ServiceMonitor.exe", "w3svc"]
```
您可以使用以下命令构建映像:
```
$ docker image build --tag local:dockerfile-iis .
```
一旦建成，运行`docker image ls`应该会显示以下内容:
![](img/57a6cc54-4042-4683-a586-a74f8c423a3b.png)
关于 Windows 容器映像，您会立即注意到的一件事是它们很大。随着服务器 2019 的发布，这方面的工作正在进行中。
使用以下命令运行容器将启动 IIS 映像:
```
$ docker container run -d --name dockerfile-iis -p 8080:80 local:dockerfile-iis
```
通过打开浏览器，您可以看到新启动的容器正在运行。但是，您将需要通过容器的 NAT IP 访问它，而不是前往`http://localhost` `:8080/`。如果您使用的是 Windows 10 Professional，您可以通过运行以下命令找到 NAT IP:
```
$ docker inspect --format="{{.NetworkSettings.Networks.nat.IPAddress}}" dockerfile-iis
```
这会给你一个 IP 地址，在最后简单的加上`8080/`；例如，`http://172.31.20.180:8080/`。
macOS 用户可以运行以下命令，使用我们启动的游民虚拟机的 IP 地址打开他们的浏览器:
```
$ open http://$(docker-machine ip 2016-box):8080/
```
无论您在哪个操作系统上启动了 IIS 容器，您都应该会看到下面的默认等待页面:
![](img/13e49dd0-5f66-4d63-aaa7-a98ea2e989af.png)
要停止并移除我们到目前为止启动的容器，请运行以下命令:
```
$ docker container stop dockerfile-iis
$ docker container prune
```
到目前为止，我相信您会同意这种体验与使用基于 Linux 的容器的 Docker 没有什么不同。
# Windows 容器和 Docker 编写
在本章的最后一节，我们将研究如何在我们的 Windows Docker 主机上使用 Docker Compose。正如您已经猜到的，与我们在上一章中运行的命令相比，没有太大变化。在存储库中的`chapter06`文件夹中，有一个来自 Docker 示例存储库的`dotnet-album-viewer`应用的分叉，因为它附带了一个`docker-compose.yml`文件。
Docker 编写文件如下所示:
```
version: '2.1'
services:
 db:
 image: microsoft/mssql-server-windows-express
 environment:
 sa_password: "DockerCon!!!"
 ACCEPT_EULA: "Y"
 healthcheck:
 test: [ "CMD", "sqlcmd", "-U", "sa", "-P", "DockerCon!!!", "-Q", "select 1" ]
 interval: 2s
 retries: 10
 app:
 image: dockersamples/dotnet-album-viewer
 build:
 context: .
 dockerfile: docker/app/Dockerfile
 environment:
 - "Data:useSqLite=false"
 - "Data:SqlServerConnectionString=Server=db;Database=AlbumViewer;User Id=sa;Password=DockerCon!!!;MultipleActiveResultSets=true;App=AlbumViewer"
 depends_on:
 db:
 condition: service_healthy
 ports:
 - "80:80"
networks:
 default:
 external:
 name: nat
```
如您所见，它使用的结构、标志和命令与我们之前看到的 Docker Compose 文件相同，唯一的区别是我们使用的是 Docker Hub 中为 Windows 容器设计的映像。
要构建所需的映像，只需运行以下命令:
```
$ docker-compose build
```
构建完成后，使用以下命令启动:
```
$ docker-compose up -d
```
如前所述，您可以使用此命令找出 Windows 上的 IP 地址:
```
$ docker inspect -f "{{ .NetworkSettings.Networks.nat.IPAddress }}" musicstore_web_1
```
要打开应用，您只需要将 Docker 主机的 IP 地址放在浏览器中。如果您正在使用 macOS 运行，请运行以下命令:
```
$ open http://$(docker-machine ip 2016-box)/
```
您应该会看到以下页面:
![](img/8fe03330-f09d-4274-96c9-8bdbc5e641e9.png)
完成应用后，可以运行以下命令将其删除:
```
$ docker-compose down --rmi all --volumes
```
# 摘要
在这一章中，我们已经简单介绍了 Windows 容器。如您所见，由于微软采用 Docker 作为 Windows 容器的管理工具，这种体验对于任何使用 Docker 管理 Linux 容器的人来说都是熟悉的。
在下一章中，我们将更详细地了解 Docker Machine。
# 问题
1.  Windows 上的 Docker 引入了什么额外的隔离层？
2.  您会使用哪个命令来找出您的 Windows 容器的 NAT IP 地址？
3.  对还是错:Windows 上的 Docker 引入了一组额外的命令，您需要使用这些命令来管理您的 Windows 容器？
# 进一步阅读
您可以找到关于本章中提到的主题的更多信息，如下所示:
*   Docker 与微软合作公告:[https://blog . docker . com/2014/10/docker-Microsoft-partner-distributed-applications/](https://blog.docker.com/2014/10/docker-microsoft-partner-distributed-applications/)
*   Windows 服务器和 Docker–将 Docker 和容器带到 Windows 背后的内在因素:[https://www.youtube.com/watch?v=85nCF5S8Qok](https://www.youtube.com/watch?v=85nCF5S8Qok)
*   Stefan schrier on github:[https://github . com/stefaner/](https://github.com/stefanScherer/)
*   `dotnet-album-viewer`仓库:[https://github.com/dockersamples/dotnet-album-viewer](https://github.com/dockersamples/dotnet-album-viewer)