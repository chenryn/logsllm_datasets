static_cast(b);
}
Compiler Inserts CodeGen:
// Ensure the vftable is one of the legal
// vftables, if not, fast-fail
if (b != NULL)
{
if (b->vftable != C::$vftable@ &&
b->vftable != E::$vftable@ &&
b->vftable != F::$vftable@)
{
fast-fail
}
}
This check would scale terribly with large amounts of vftables
Optimization Step 1: Lay Out Vftables Together in Binary
Offset
Name
0x00
__CastGuardVftableStart
0x08
A::$vftable@
0x10
B::$vftable@
0x18
C::$vftable@
0x20
D::$vftable@
0x28
E::$vftable@
0x30
F::$vftable@
0x38
G::$vftable@
0x40
H::$vftable@
0x48
__CastGuardVftableEnd
To make the example simple, assume 64-bit architecture, 
each vftable has a single virtual function, and no RTTI 
information. Total size per vftable is 8 bytes.
We’ll talk about the global variables 
__CastGuardVftableStart and __CastGuardVftableEnd later.
Vftables CastGuard cares about are laid out in their own 
contiguous region.
CastGuard Vftable Region
Optimization Step 2: 
Create Bitmaps
Create a bitmap per LHS Type being cast to which indicates which vftables are legal for that cast
A::$vftable@
B::$vftable@
C::$vftable@
E::$vftable@
F::$vftable@
D::$vftable@
G::$vftable@
H::$vftable@
A
✓
✓
✓
✓
✓
✓
✓
✓
B
✓
✓
✓
✓
✓
✓
✓
C
✓
✓
✓
D
✓
✓
✓
E
✓
F
✓
G
✓
H
✓
LHS Type (Type Being Cast To)
Legal Underlying Vftables
Offset
Name
0x00
__CastGuardVftableStart
0x08
A::$vftable@
0x10
B::$vftable@
0x18
C::$vftable@
0x20
D::$vftable@
0x28
E::$vftable@
0x30
F::$vftable@
0x38
G::$vftable@
0x40
H::$vftable@
0x48
__CastGuardVftableEnd
Offset
Name
0x00
__CastGuardVftableStart
0x08
A::$vftable@
0x10
B::$vftable@
0x18
C::$vftable@
0x20
D::$vftable@
0x28
E::$vftable@
0x30
F::$vftable@
0x38
G::$vftable@
0x40
H::$vftable@
0x48
__CastGuardVftableEnd
How to Create Bitmap:
Each type being downcast to gets its own bitmap (i.e. B, C, D, etc.).
For each bitmap:
1. Choose a “base vftable”. This is the vftable you will compare the 
underlying types vftable against. It should be the first vftable
(lowest RVA) in the binary that is legal for the cast.
2. Compute the offset between this vftable and all other vftables
that are legal for the cast.
3. Each legal vftable is “1” in the bitmap. Illegal vftables are “0”.
Optimization Step 2: Create 
Bitmaps
Offset from 
C::$vftable@
0x0
0x8
0x10
0x18
C_Bitmap
1
0
1
1
Offset
Name
0x00
__CastGuardVftableStart
0x08
A::$vftable@
0x10
B::$vftable@
0x18
C::$vftable@
0x20
D::$vftable@
0x28
E::$vftable@
0x30
F::$vftable@
0x38
G::$vftable@
0x40
H::$vftable@
0x48
__CastGuardVftableEnd
How To Use Bitmap:
delta = Object->Vftable – C::$vftable@
ordinal = delta ROR 3     // shift out low 3 bits
C_Bitmap[ordinal] == 1 if cast allowed
Optimization Step 2: Create 
Bitmaps
For cast to “C”, “base vftable” is C::$vftable@
0x0
0x8
0x10
0x18
0x20
0x28
0x30
0x38
B_Bitmap
1
1
1
1
1
1
1
C_Bitmap
1
0
1
1
D_Bitmap
1
0
0
1
1
E_Bitmap
1
F_Bitmap
1
G_Bitmap
1
H_Bitmap
1
Bitmap for LHS Type
Offset
Name
0x00
__CastGuardVftableStart
0x08
A::$vftable@
0x10
B::$vftable@
0x18
C::$vftable@
0x20
D::$vftable@
0x28
E::$vftable@
0x30
F::$vftable@
0x38
G::$vftable@
0x40
H::$vftable@
0x48
__CastGuardVftableEnd
Only create bitmap for types that are down-cast to. Minimizes 
binary size.
Bitmap alignment can change to reduce binary size. This example 
uses 8-byte alignment (the minimum on 64-bit) but we may 
increase the alignment of vftables to reduce the size of the bitmap.
Optimization Step 2: Create 
Bitmaps
Offset of underlying type vftable from “base vftable” 
Better Check
void MyFunction (B* b)
{
static_cast(b);
}
Compiler Inserts CodeGen:
if (b != null) {
// read the vftable from the object
uint64 ptr = b->vftable;
// get offset from the first valid vftable for this cast
uint64 delta = ptr - &C::$vftable@
// vftables are 8 byte aligned
// if any low 3 bits are set, ROR will shift them to high bits
uint64 ordinal = delta ROR 3;
// test the bitmap to see if this is valid
if (ordinal >= sizeof_in_bits(C_Bitmap))
!bittest(C_Bitmap, ordinal))
{
fast-fail
}
}
More Optimization
 With a few realizations, we can do much better than this.
 Bitmaps are not ideal because:
 It takes a memory load to consult them.
 They take up space in the binary.
Order the Vftables Depth First
Offset
Name
0x00
__CastGuardVftableStart
0x08
A::$vftable@
0x10
B::$vftable@
0x18
C::$vftable@
0x20
E::$vftable@
0x28
F::$vftable@
0x30
D::$vftable@
0x38
G::$vftable@
0x40
H::$vftable@
0x48
__CastGuardVftableEnd
B::$vftable@
C::$vftable@
D::$vftable@
E::$vftable@
F::$vftable@
G::$vftable@
H::$vftable@
A::$vftable@
CastGuard Vftable Region
Create Bitmaps
Offset
Name
0x00
__CastGuardVftableStart
0x08
A::$vftable@
0x10
B::$vftable@
0x18
C::$vftable@
0x20
E::$vftable@
0x28
F::$vftable@
0x30
D::$vftable@
0x38
G::$vftable@
0x40
H::$vftable@
0x48
__CastGuardVftableEnd
Property: When ordered with a DFS, legal vftables are always laid out 
contiguously (thus you never see 0’s in the bitmap)
0x0
0x8
0x10
0x18
0x20
0x28
0x30
0x38
B_Bitmap
1
1
1
1
1
1
1
C_Bitmap
1
1
1
D_Bitmap
1
1
1
E_Bitmap
1
F_Bitmap
1
G_Bitmap
1
H_Bitmap
1
Bitmap for LHS Type
Offset of underlying type vftable from LHS Type vftable
Range Check
Offset
Name
0x00
__CastGuardVftableStart
0x08
A::$vftable@
0x10
B::$vftable@
0x18
C::$vftable@
0x20
E::$vftable@
0x28
F::$vftable@
0x30
D::$vftable@
0x38
G::$vftable@
0x40
H::$vftable@
0x48
__CastGuardVftableEnd
•
If bitmap is all ones, no need to check the bitmap. As long 
as the ordinal is in bounds of the bitmap you succeed.
•
Taking it further: Rather than shifting the pointer to 
calculate the ordinal, just do a range check.
If vftable base address is within 0x10 bytes of 
C::$vftable&, this object is a valid “C”
Range Check
void MyFunction (B* b)
{
static_cast(b);
}
Compiler Inserts CodeGen:
if (b != null) {
// read the vftable from the object
uint64 ptr = b->vftable;
// get offset from the first valid vftable for this cast
uint64 offset = ptr - &C::’vftable’
// can be C, E, or F
// vftable expected to be 0x0, 0x8, or 0x10 bytes 
// offset from C::$vftable@
if (offset > 0x10) {
fast-fail
}
}
Concerns?
What if the vftable is offset 0x9? That 
would pass the check but is illegal!
Not a concern due to threat model, there is no 
way a legitimate object could be created with 
that vftable pointer. We are assuming the first 
order vulnerability is this static_cast so the 
object must be well formed.
Compiler Inserts CodeGen:
if (b != null) {
// read the vftable from the object
uint64 ptr = b->vftable;
// get offset from the first valid vftable for this cast
uint64 offset = ptr - &C::’vftable’
// can be C, E, or F
// vftable expected to be 0x0, 0x8, or 0x10 bytes 
// offset from C::$vftable@
if (offset > 0x10) {
fast-fail
}
}
Compatibility
What if the object was created in a different DLL?
The LTCG compiler pass will not know about these vftables. The cast 
might be legitimate but because the vftable comes from a different 
DLL it isn’t laid out where CastGuard expects.
What if the object was created in a static library?
Mostly similar concern, with caveats. See appendix for more details.
Modified Check for Compatibility
…
if (ptr != null) {
// get offset from the first valid vftable for
// this cast
uint64 offset = ptr - &C::$vftable@
// can be C, E, or F
// vftable expected to be 0x0, 0x8, or 0x10 bytes 
// offset from C::$vftable@
if (offset > 0x10 &&
ptr > __CastGuardVftableStart &&
ptr < __CastGuardVftableEnd) {
fast-fail
}
}
Only fast-fail if the underlying vftable is being tracked by 
CastGuard, otherwise “fail open” for compatibility
AMD64 Assembly
; rcx == The right-hand side object pointer.
; First do the nullptr check. This could be optimized away but is not today.
; N.B. If the static_cast has to adjust the pointer base, this nullptr check
; already exists.
4885c9 
test 
rcx, rcx
7416 
je 
codegentest!DoCast+0x26
; Next load the RHS vftable and the comparison vftable.
488b11 
mov 
rdx, qword ptr [rcx]
4c8d05ce8f0500 lea 
r8, [codegentest!C::`vftable']
; Now do the range check. Jump to the AppCompat check if the range check fails.
492bc0 
sub 
rdx, r8
4883f820 
cmp
rdx, 20h
7715 
ja 
codegentest!DoCast+0x3b
; Jump to app-compat check
Multiple 
Inheritance
Multiple 
Inheritance 
Example
B
C
D
E
F
G
H
A
Z
Vftable View
B::$vftable@
C::$vftable@
D::$vftable@
E::$vftable@
F::$vftable@
G::$vftable@
H::$vftable@
A::$vftable@
B::$vftable@Z
C::$vftable@Z
D::$vftable@Z
E::$vftable@Z
F::$vftable@Z
G::$vftable@Z
H::$vftable@Z
Z::$vftable@
Object Layout
B
C
D
E
F
G
H
A
“Z” members
Object Z layout
Object B layout
Object C layout
“A” members
Z::$vftable@
B::$vftable@
Vfuncs defined by A
“A” members
Object A layout
A::$vftable@
Vfuncs defined by Z
Vfuncs defined by A
Vfuncs defined by B
Z
“Z” members
B::$vftable@Z
“B” members
“A” members
C::$vftable@
“Z” members
C::$vftable@Z
“B” members
“C” members
Vfuncs defined by Z
Which Vftable to Use
Depends on what the current RHS type is.
If RHS == “A”, need to use vftable that “A” introduced.
If RHS == “Z”, need to use vftable that “Z” introduced.
Otherwise, can use either. Prefer the vftable that is closest to the base 
address of the object to reduce code size.
If vftable is at offset 0 in object, the “this” pointer doesn’t need to be adjusted.
Notes
Once you realize there are multiple vftable hierarchies, multiple 
inheritance becomes identical to single inheritance.
Choose the vftable hierarchy to do checks against based on the RHS type.
Lay out vftable hierarchy using depth-first layout.
Do a simple range check on the vftable.