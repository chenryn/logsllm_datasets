给出了两种方法：一种是直接修改app_process程序，另一种是通过
---
## Page 887
CTF特训营：技术详解、解题方法与
24.3.3使用Xposed框架Hook进程
887/1144
刷入刷机包来替换app_process程序。
在这之前，首先需要安装Xposed框架的模块管理器，网址为
http://repo.xposed.info/module/de.roby.android.xposed.installer,需要
注意的是，5.0以上和5.0以下版本的系统需要安装不同的模块管理器。
根据安装页面上的提示，5.0以下（不包括5.0）的系统需要安装名字
为de.robv.android.xposed.installer_vXxX.apk的APK，5.o以上的系统
需要安装名字为Xposedlnstaller_3.0_XXX.apk的APK。
第一种方法比较简单，但是该方法需要具有ROOT权限，并且需
要机型与系统版本的支持，该方法多见于5.0以下（不包括5.0）的系
统中。打开之前安装的“Xposedlnstaller”，点击“框架"，会依次出
现如图24-28所示的界面，直接点击其中的“安装/更新”即可，图
24-28中笔者已经用该方法成功修改了app_process程序。若是“安
装/更新”按钮为灰色，则说明你的手机不支持使用该方法进行安
装，需要选择第二种方法。
---
## Page 888
CTF特训营：技术详解、解题方法与
24.3.3使用Xposed框架Hook进程
888/1144
10:22
10:16
Xposed Installer
框架
欢迎使用Xposed安装器
请选择您想进行的操作：
版本：
激活
程序自带
app_process
58
58
框架
XposedBridge.jar
54
此处您能管理Xposed框架，任何模块的正常运行都需要
框架
E
安装/更新
模块
框架本身不增加任何功能。您需要使用模块。安装模块后
在此处激活它们
卸载
下载
安装方式
此处您能访问模块仓库，您可以搜索并下载您喜欢的模
块，并及时更新它们。
经典（直接写入/system）
设置
重启
此处可配置Xposed安装器和框架。
软重启
日志
显示并保存/发送Xposed框架产生的日志。
重启
关于
了解Xposed作者、获取帮助支持的方法等信息。
图24-28
3Xposed框架界面
第二种方法略微烦琐。
首先从网站http://dl-xda.xposed.info/framework/下载适用于自己手
机的刷机包，其中，sdk21代表5.0系统，sdk22代表5.1系统，sdk23
代表6.0系统（其他版本的系统在完稿时暂时还不支持）；随后选择自
---
## Page 889
CTF特训营：技术详解、解题方法与
24.3.3使用Xposed框架Hook进程
889/114
已手机的处理器架构（ARM、ARM64、X86），下载最新版，例如笔
者下载的是xposed-v86-sdk22-arm.zip，代表ARM架构的5.1系统
Xposed框架版本是86
下载完刷机包后使用recovery刷入即可。这里的recovery需要第
三方的recovery，可能有的读者对于recovery刷机的方法还不太熟
悉，这里做个简单的介绍。假设手机系统现在是原厂镜像，那么首先
需要刷入第三方recovery，笔者比较喜欢CM的recovery镜像，因此要
去CM官网上下载针对自己手机的recovery镜像，网址为http:/l
download.cyanogenmod.org。例如笔者的Nexus5手机，下载的
hammerhead-recovery.img。随后在手机并机状态下使用“adb
rebootbootloader”命令，或者在关机状态下按住音量下键和电源键
五秒钟进入手机的fastboot模式，然后使用“fastbootflashrecovery
cm-13.0-20160820-SNAPSHOT-ZNH5YAO0J2-hammerhead-
recovery.img”命令即可刷入recovery，再重启即可。随后在手机开
机状态下使用“adbrebootrecovery”命令，或者在关机状态下按住
音量上键和电源键即可进入recovery模式。进入CM的recovery模式后
刷入刷机包也有两种方法。第一种，需要使用USB数据线将手机与电
---
## Page 890
CTF特训营：技术详解、解题方法与
24.3.3使用Xposed框架Hook进程
890/1144
脑相连，在手机端依次选择“Applyupdate”→"ApplyfromADB”，
然后在电脑端的刷机包路径下，输入“adbsideloadxposed-v86-
sdk22-arm.zip”命令，稍等片刻即可刷入完成；另一种方法，需要事
先将刷机包传入手机，然后在手机端依次选择“Applyupdate”→
"Choosefromemulated”，选择自己刷机包的路径，稍等片刻即可完
成刷机。这里推荐第一种刷机方法。
刷机完成后，再打开Xposedlnstaller，可以看到app_process成功
刷入了。如图24-29所示的是刷入前后的对比图，可以看到，无论刷
入成功与否，“安装/御载”按钮始终都是灰色的。如果想卸载，也很
简单，只要刷入xposed框架的卸载刷机包即可，具体可查看官网教
程。
---
## Page 891
CTF特训营：技术详解、解题方法与
24.3.3使用Xposed框架Hook进程
891/1144
9:48
7:16
Framework
Framework
TheXposed framework isnotinstalled.Please
Xposed framework version 86 is active.
download the latest ZiP file from XDA and flashit
manually via recovery.
FRAMEWORK
FRAMEWORK
Install/Update
Install/Update
Uninstall
Uninstall
INSTALLATIONMODE
INSTALLATION MODE
Classical(write to /system directly)
Classical(write to/system directly)
REBOOT
REBOOT
Softreboot
Softreboot
Reboot
Reboot
O
口
口
图24-29
9Xposed刷机界面
完成了app_process的修改工作，只是完成了Hook环境的搭建
下面才是真正进入Hook的过程。
Xposed模块从本质上来讲是一个AndroidApp，需要有一定的
AndroidAPK开发经验，开发环境可以选择Androidstudio或者Intellij
---
## Page 892
CTF特训营：技术详解、解题方法与
24.3.3使用Xposed框架Hook进程
892/1144
IDEA，两者之间的区别并不大，这里笔者选择的是IntelijIDEA
打开IntellijIDEA，新建一个“EmptyActivity”工程，包命名为
"com.a.sample.xposed"，打开工程下的app/build.gradle文件，在
“dependencies”依赖中，添加如下两个依赖：
provided'de.robv.android.xposed:api:82
provided'de.robv.android.xposed:api:82:sources
随后同步Gradle。之后打开app/src/main/AndroidManifest.xml文
件，在application属性中添加如下三个子属性：
其中，xposedminversion表示支持的最低的XposedAPI版本，这
里添加的三个属性就是之前提到的Xposed模块的标志了。
完成了环境准备工作之后，现在就可以新建一个Hook类了，例
如笔者新建了一个Sample类，代码如下：
---
## Page 893
CTF特训营：技术详解、解题方法与
24.3.3使用Xposed框架Hook进程
893/1144
package com.a.sample.xposed;
import de.robv.android.xposed.lIXposedHookLoadPackage;
import de.robv.android.xposed.XC_MethodHook;
import de.robv.android.xposed.XposedBridge;
importde.robv.android.xposed.callbacks.XC_LoadPackage;
import java.util.Arrays;
import java.util.Locale;
import static de.robv.android.xposed.XposedHelpers.findAndHookMethod;
j**
*Createdon16/10/3
public class Sample implements IXposedHookLoadPackage{
private staticString completeClassName(String className)
return appName +"+className;
//s.length<=1024
private static void log(String s){
XposedBridge.log(s);
@Override
public void handleLoadPackage(XC_LoadPackage.LoadPackageParam Ipparam)
throwsThrowable{
if (lappName.startsWith(Ipparam.packageName))
return;
log("Loaded app:"+Ipparam.packageName);
findAndHookMethod(completeClassName("a), Ipparam.classLoader,"a", byte[].
class,newXC_MethodHook(){
@Override
protected void beforeHookedMethod(MethodHookParam param) throws
Throwable{
log（String.format(Locale.ENGLISH,"beforeHookedMethod:%s.%s",
param.thisObject.getClass().getName(),param.method.getName()));
for（inti= 0;i<param.args.length;i++){
log（String.format(Locale.ENGLiSH,targument%d is:%s",i,param.
args(].toString());
log(Arrays.toString(byte)param.args[O]));
@Override
protected void afterHookedMethod(MethodHookParam param) throws
Throwable{
---
## Page 894
CTF特训营：技术详解、解题方法与
24.3.3使用Xposed框架Hook进程
894/1144
param.setResult");
简单讲解一下上面的类。要想实现Xposed框架的Hook功能
Hook类需要实现Xposed框架的iXposedHookLoadPackage接口，并实
现该接口的handleLoadPackage方法。该方法在每一个新的APK运行
的时候都将被Xposed框架调用，传入的参数类型为
XC_LoadPackage.LoadPackageParam，该参数包含所启动的APK的
包信息。因此可以使用appName.startsWith（Ipparam.packageName）来
判断启动的APK是否为我们想要Hook的APK，如果不是则返回
接下来使用Xposed框架的核心方法findAndHookMethod，使用该
方法能够Hook指定类的某个方法的传入参数及返回值，该方法的定
义如下：
findAndHookMethod(String className,ClassLoader classLoader,String
methodName,Objec... parameterTypesAndCallback)
其中，className是要Hook的类名；classLoader可以直接填入传
入参数lpparam的classLoader，如上面例子所示；methodName是要
---
## Page 895
CTF特训营：技术详解、解题方法与
24.3.3使用Xposed框架Hook进程
895/1144
Hook的方法名；随后要填入方法的参数类型，用逗号隔开；最后填
入一个XC_MethodHook类的回调方法，该方法定义了
beforeHookedMethod和afterHookedMethod两个回调方法。两个回调
方法分别代表方法调用前传入的参数以及函数调用后返回的值。这两
个回调方法的参数类型都是MethodHookParam，传入的参数可以使
用param.args操作获取到一个object列表，传出的参数可以使用
setResult方法修改返回值。
Xposed框架提供的log方法XposedBridge.log()可以将log同时输出
到logcat和Xposedlnstaller中，点击Xposedlnstaller中的“日志”按钮
即可查看，非常方便。
编写完Hook类后，还需要最后一步，在app/src/main/assets/自录
下新建xposed_init文件，这个文件主要用于声明要调用的Hook类的类
名（Java类的表示形式），例如本例中就要写人：
com.a.sample.xposed.Sample
最后编译并安装APK，编译过程中建议关闭proguard混淆，或者
将Hook类添加到proguard混淆例外中。安装完成后打开
---
## Page 896
CTF特训营：技术详解、解题方法与
24.3.3使用Xposed框架Hook进程
896/1144
Xposedlnstaller，点击“模块”，即可看到刚才编写的Xposed模块
了，如图24-30所示。点击右边的小方块打上对勾，然后重启手机，
即可应用该模块。
12:06
Modules
Xposed
1.0
Xposedexample
---
## Page 897
CTF特训营：技术详解、解题方法与
24.3.3使用Xposed框架Hook进程
897/1144
图24-30Xposed启动模块
以上就是Xposed框架的一个简单教程，该教程提供的方法可以
满足最基础的Hook操作。同时，Xposed框架作为“Android第一神
器”，还提供了很多更加强大的功能，具体可查看Xposed框架的官方
文档。
---
## Page 898
CTF特训营：技术详解、解题方法与
24.3.4使用Frida框架Hook进程
898/1144
24.3.4使用Frida框架Hook进程
本节将介绍另一个强大的Hook框架一—Frida。Frida是一个全平
台支持的Hook框架，它支持Windows、Mac、Linux、iOS和Android各
平台。虽然各平台在底层实现的方式并不相同，但在上层都抽象为相
同的JavaScriptAPI调用，注意是JavaScriptAPI，非常灵活，同时也
需要使用者具有一定的JavaScript编写能力。
针对Android的Frida来讲，实现Hook需要在手机端运行一个frida
server，frida-server本身集成了Google的V8解释器（新版的好像换成
了Duktape），用于解析JavaScript代码。frida-server的实现原理是使
用ptrace系统调用在目标进程中注入一段代码，随后断开ptrace调
试，该代码与frida-server之间使用pipe管道进行通信，frida-server与
客户端的代码之间使用adb的端口转发进行通信，因此frida-server需
要使用Root权限运行。
Frida是开源软件，网站位于http://www.frida.rel，
，源码托管于
GitHub，有兴趣深入研究其实现原理的读者可以去GitHub查看
下面就来介绍在Android系统中使用Frida框架来进行Hook操作的
---
## Page 899
CTF特训营：技术详解、解题方法与
24.3.4使用Frida框架Hook进程
899/1144
基本方法。Frida的原理如图24-31所示。
注入
PIPE
代码
Frida
ADB
Frida
PTRACE
服务端
客户端
目标进程
手机
PC
图24-31Frida原理
如图24-31所示，我们要区分Frida框架的三个层次，分别是客户
端、服务端、注入代码。客户端，指的是运行在电脑上的Frida程
序，这一部分代码主要负责唤醒服务端、将JavaScript语言的Hook代
码传递到服务端、接收远程服务端传回的信息、封装远程调用等功能
在Frida中，客户端的实现语言有很多种，例如Python、JavaScript、
C#等，本节将着重介绍Python和JavaScript两种客户端实现方式。服
务端，指的是运行在手机上的frida-server，该frida-server内置了
GoogleV8解释器，用于接收客户端传过来的JavaScript代码并执行，
---
## Page 900
CTF特训营：技术详解、解题方法与
24.3.4使用Frida框架Hook进程
900/1144
也就是说，真正的Hook代码必须使用JavaScript语言编写。注入代码
指的是使用ptrace注入自标进程中的代码，这段代码由服务端实现
我们作为使用者并不需要太过于关注该代码。
了解了Frida框架的三个层次之后，下面先来讲解Frida客户端的
实现方式。
1.Frida客户端实现
(1）Python客户端
Frida框架的Python客户端是Frida客户端中使用最为广泛的一
种，也是安装最容易、代码最易实现的一种。
首先安装Frida的依赖库，代码如下：
pip installfrida
安装完成后可以使用“frida-ps-U”命令查看远程服务端有没有
启动。
下面就可以编写客户端代码了，示例如下：
import frida, sys
---