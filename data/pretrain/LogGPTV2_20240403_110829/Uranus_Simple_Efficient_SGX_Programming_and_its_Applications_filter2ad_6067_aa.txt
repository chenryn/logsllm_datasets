title:Uranus: Simple, Efficient SGX Programming and its Applications
author:Jianyu Jiang and
Xusheng Chen and
Tsz On Li and
Cheng Wang and
Tianxiang Shen and
Shixiong Zhao and
Heming Cui and
Cho-Li Wang and
Fengwei Zhang
Uranus: Simple, Efficient SGX Programming and its Applications
Jianyu Jiang†, Xusheng Chen†, TszOn Li†, Cheng Wang†,
Tianxiang Shen†, Shixiong Zhao†, Heming Cui†∗, Cho-Li Wang†, Fengwei Zhang§
{jyjiang,xschen,toli2,cwang2,txshen2,sxzhao,heming,clwang}@cs.hku.hk,PI:EMAIL
†The University of Hong Kong §Southern University of Science and Technology
ABSTRACT
Applications written in Java have strengths to tackle diverse threats
in public clouds, but these applications are still prone to privileged
attacks when processing plaintext data. Intel SGX is powerful to
tackle these attacks, and traditional SGX systems rewrite a Java
application’s sensitive functions, which process plaintext data, us-
ing C/C++ SGX API. Although this code-rewrite approach achieves
good efficiency and a small TCB, it requires SGX expert knowledge
and can be tedious and error-prone. To tackle the limitations of
rewriting Java to C/C++, recent SGX systems propose a code-reuse
approach, which runs a default JVM in an SGX enclave to execute
the sensitive Java functions. However, both recent study and this
paper find that running a default JVM in enclaves incurs two major
vulnerabilities, Iago attacks, and control flow leakage of sensitive
functions, due to the usage of OS features in JVM.
In this paper, Uranus creates easy-to-use Java programming
abstractions for application developers to annotate sensitive func-
tions, and Uranus automatically runs these functions in SGX at
runtime. Uranus effectively tackles the two major vulnerabilities
in the code-reuse approach by presenting two new protocols: 1)
a Java bytecode attestation protocol for dynamically loaded func-
tions; and 2) an OS-decoupled, efficient GC protocol optimized for
data-handling applications running in enclaves. We implemented
Uranus in Linux and applied it to two diverse data-handling appli-
cations: Spark and ZooKeeper. Evaluation shows that: 1) Uranus
achieves the same security guarantees as two relevant SGX systems
for these two applications with only a few annotations; 2) Uranus
has reasonable performance overhead compared to the native, in-
secure applications; and 3) Uranus defends against privileged at-
tacks. Uranus source code and evaluation results are released on
https://github.com/hku-systems/uranus.
CCS CONCEPTS
• Security and privacy → Software security engineering.
KEYWORDS
SGX; Java; JVM; Iago Attack; TEE; Side-channel; Type-safety; Spark;
ZooKeeper; Data-handling; Big-data; Garbage Collector (GC);
∗Corresponding author.
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
© 2020 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-6750-9/20/06.
https://doi.org/10.1145/3320269.3384763
ACM Reference Format:
Jianyu Jiang†, Xusheng Chen†, TszOn Li†, Cheng Wang†, and Tianxiang
Shen†, Shixiong Zhao†, Heming Cui†∗, Cho-Li Wang†, Fengwei Zhang§.
2020. Uranus: Simple, Efficient SGX Programming and its Applications. In
Proceedings of the 15th ACM Asia Conference on Computer and Communica-
tions Security (ASIA CCS ’20), October 5–9, 2020, Taipei, Taiwan. ACM, New
York, NY, USA, 15 pages. https://doi.org/10.1145/3320269.3384763
1 INTRODUCTION
The cloud computing paradigm enables various data-handling ap-
plications (e.g., Spark [76]) to be deployed in public clouds. Since
these applications inherently desire reliability and security, and
Java has diverse security features (e.g., type-safety), many of these
applications are written in Java. However, the JVM runtime alone
is insufficient to defend against privileged attacks, because adver-
saries may control the entire cloud software stack, including OS
kernels [59, 77].
Recently, Intel Software Guard eXtensions (SGX) [38] becomes a
promising technique on protecting sensitive data for data-handling
applications in public clouds. SGX provides an enclave execution
abstraction with limited memory (typically, about 100MB). SGX
runs trusted code in an enclave and uses the CPU hardware to
prevent attackers from seeing or tampering with the code and data
in the enclave. To allow untrusted code to invoke functions in an
enclave, SGX provides the ECall API in C/C++.
Traditionally, SGX systems for Java applications (e.g., Secure-
Keeper [28] and Opaque [77]) adopt a code-rewrite approach. In
this approach, the developers of an application partition Java code
into the trusted part, including all sensitive functions which process
plaintext data, and the untrusted part. They completely rewrite the
trusted code from Java to C/C++ using SGX API and Java Native
Interface (JNI), and then run the rewritten code in enclaves. This
approach can maintain a minimum TCB and memory footprint
because it runs only the rewritten code in enclaves. However, this
code-rewrite approach often requires non-trivial efforts from devel-
opers, including rewriting all dependent Java libraries into C/C++
code, which could be tedious and error-prone. Worse, the rewritten
code loses the type-safety of Java.
To tackle the limitations caused by rewriting Java code, recent
systems (e.g., SGX-Spark [11] and CordaSGX [4]) take a code-reuse
approach. In this approach, a JVM is run within an enclave to exe-
cute the trusted Java code using a dedicated thread, and encrypted
data is passed into the enclave for the thread to decrypt and to com-
pute on. For instance, SGX-Spark runs an unmodified JVM using
SGX-LKL [10] to execute only the Spark user-defined-functions
(UDF) in enclaves, and the other parts of Spark are run out of en-
claves. Running a dedicated JVM in an enclave greatly eases the
deployment of trusted Java code and preserves type-safety, so this
code-reuse approach becomes increasingly popular.
However, despite much effort on developing advanced SGX sys-
tems [4, 11, 54] by this code-reuse approach, two major challenges
remain in these systems. First, running a default JVM in an enclave
can easily incur severe attack surface, which can expose or change
the control flow of the trusted Java code. Specifically, JVM uses OS
features frequently at runtime for efficiency, and attackers out of
enclaves can infer the control flow of the trusted code by observing
OS events. For example, our study (§4.4) found out that an attacker
can abuse its control of system signals to get the size of an object
in an enclave memory allocation, which reveals the control flow
and even the plaintext data in enclaves. Moreover, applications
running within enclaves may be vulnerable to Iago attacks [29], and
recent work [68] shows that such attacks still widely exist during
enclave transitions in SGX systems. Our study (§4) confirmed that
Iago attacks are more pronounced when porting the default JVM
into enclaves, since doing so results in many enclave transitions.
The second challenge is that a JVM running in an enclave can in-
cur severe performance degradation for data-intensive applications.
Specifically, JVM’s default GC reclaims objects when there is not
enough space for allocating a new object. Since the SGX memory is
merely around 100MB, the GC needs to frequently stop all threads
to scan the entire heap shared by multiple threads. After all, JVM’s
default GC is designed to manage GBs of memory and lacks an
efficient mechanism to reclaim memory for enclaves.
We present Uranus1, the first SGX system to tackle these two
challenges and to efficiently protect Java applications. Uranus pro-
vides two high-level Java programming abstractions: JECall and
JOCall. An application developer can use JECall to annotate func-
tions in trusted code, and such annotated but unmodified functions
and their callees will be executed in an enclave automatically. If a
function is annotated with JOCall and its caller is running in an
enclave, this annotated function will be executed outside.
To completely tackle the first challenge while maintaining a
small TCB, Uranus includes four JVM components (i.e., GC, dy-
namic code loader, JIT and exception handler) in an enclave. Our
methodology to eliminate their attack surface is isolating these com-
ponents from outside enclaves and verifying all content passed into
enclaves. A key novel component in Uranus is an OS-decoupled,
thread-safe GC protocol. This protocol is developed on one ob-
servation: Uranus’s JVM runtime contains sufficient application
bytecode structures (e.g., basic block back-edges and function entry
points) for doing code instrumentation, so threads in an enclave
can be efficiently stopped without going across the enclave bound-
ary. Therefore, Uranus’s GC protocol eliminates transitions across
the enclave boundary, effectively protecting the confidentiality
and integrity of the control flow of the trusted Java code. Overall,
Uranus’s GC is completely isolated from outside enclaves, includ-
ing OS, so the first challenge is tackled in GC.
Uranus also tackles the first challenges in the other three JVM
components. For the dynamic code loader, we design and implement
a class-level bytecode attestation protocol, which effectively verifies
the integrity of the bytecode loaded into in an enclave at runtime
and hides the control flow of the bytecode. For the JIT compiler, we
1Uranus, an ancient Greek god, brings order and safety to the cosmic chaos.
leverage the bytecode-to-assembly template in OpenJDK’s inter-
preter to build an simple and efficient JIT with full support of all
Java-8 bytecode instructions, while maintaining a small TCB. This
JIT is completely isolated from outside enclaves; it prevents Iago
attacks during enclave transitions by conducting sanity checks on
the parameters passed through JECall/JOCall. Uranus’s excep-
tion handler also runs entirely within an enclave without involving
any OS feature.
Our observation to tackle the second challenge is that, although
a thread in a data-handling application often allocates many objects
within an enclave, only few objects are shared among threads.
Therefore, unshared objects can be efficiently reclaimed whenever a
thread finishes a JECall. With this observation, Uranus introduces
a region-based enclave memory management technique, which
mostly avoids stopping all threads in an enclave and efficiently
reclaims per-thread objects whenever a thread finishes a JECall.
We implemented Uranus in OpenJDK on Linux. In SGX practice,
the trusted code may read data from untrusted memory outside
enclaves, which may infect the control flow of the trusted code and
compromise the integrity of its computation result. Leveraging the
type-safety of Java, Uranus includes a runtime checking proto-
col to prevent the bytecode from running in an enclave accessing
memory outside (§4.3). Therefore, even if application developers
omit to annotate some sensitive functions, this protocol prevents
the trusted code from running in enclaves leaking plaintext data to
these functions running outside. Overall, Uranus achieves a small
TCB: all Uranus components running in enclaves, including the
four OS-decoupled JVM components, have only 25.2k LoC.
We integrated Uranus with two data-handling applications
written in Scala and Java: Spark [76] and ZooKeeper [36]. Spark-
Uranus achieves the same confidentiality and integrity guarantees
as Opaque’s encryption mode [77]; ZooKeeper-Uranus achieves
the same security guarantees as SecureKeeper [28]. We compared
Spark-Uranus to Opaque [77] (encryption mode) and ZooKeeper-
Uranus to SecureKeeper [28]. For Spark-Uranus, we included all 8
big-data queries evaluated in Opaque [77]. Evaluation shows that:
• Uranus is easy to use. We annotated only two or four func-
tions for each application. Spark-Uranus runs unmodified
UDF queries in enclaves.
• Uranus is efficient. For ZooKeeper-Uranus, it incurred
merely up to 19.4% performance overhead compared to the
native (insecure) executions. Spark-Uranus incurred 1.2X to
7.6X performance overhead compared to native Spark on typ-
ical dataset sizes. Partly due to Uranus’s new GC protocol,
Spark-Uranus is the first SGX work that supports typical
big-data dataset sizes [76], two to three orders of magnitude
larger than the dataset sizes evaluated in Opaque.
• Uranus effectively tackled privileged attacks.
The main novelty of this paper is two new protocols: 1) an OS-
decoupled, thread-safe GC protocol that enables Java big-data ap-
plications to run efficiently on the limited enclave memory; and
2) a first integrity attestation protocol for dynamically loaded Java
bytecode. Uranus’s GC protocol can be integrated in existing SGX
big-data systems (e.g., SGX-Spark), greatly improving enclave mem-
ory efficiency and reducing attack surface in these systems.
The remaining of the paper is organized as follows. §2 introduces
SGX and JVM background. §3 gives an overview of the Uranus
framework. §4 introduces Uranus’s runtime. §5 gives the imple-
mentation details. §6 shows our evaluation results. §7 presents
related work and §8 concludes.
2 BACKGROUND
2.1 Intel SGX
An SGX enclave isolates the execution environment of the applica-
tion code and data running inside and protects them from outside
privileged access, including OS, hypervisor, and BIOS. Memory
pages belonging to an enclave reside in the Enclave Page Cache
(EPC). EPC has a total size of 128MB per CPU, and only around
100MB can be used by application code. If the code running in the
enclave uses more than 100MB, a slow SGX paging mechanism
will incur a 1,000X slowdown compared to regular OS paging [28].
An SGX enclave can execute only user-space instructions, so the
enclave code has to do OCalls to leave enclaves for system calls.
When an interrupt or hardware exception (e.g., General Fault) is
raised in an enclave, the processor performs an Asynchronous En-
clave Exit (AEX) to handle the exception or interrupt. Though AEX
and OCall do not directly leak secrets in enclaves, they can result
in severe side-channels or even attack surface (§4.4) for revealing
the control flow of trusted code and plaintext data.
2.2 Java Virtual Machine (JVM)
We denote Hotspot [6], the most popular implementation of Java
Virtual Machine, as JVM. For portability and language features (e.g.,
Reflection), JVM loads Java bytecode at runtime and executes it
with either an interpreter or JIT compiler. JVM runs the interpreter
initially, if some bytecode is executed frequently (known as hotspot),
JVM uses JIT to compile this code into highly optimized machine
code to speed up the execution. Compared to the interpreter (16k
LoC), verifying the correctness of the JIT compiler is much more
difficult because JIT is much larger (210k LoC) and contains complex
optimization logic. Therefore, we built a simple JIT for Uranus
based on the bytecode-to-assembly template in the default JVM
interpreter (§4.2). JVM has about 1 million LoC, and will result
in a large TCB when running in an enclave. When the code of a
type-safe language (e.g., Java) is executed in a bug-free JVM, JVM’s
runtime checks ensure that the code is memory-safe and has no
memory leaks or buffer overflow bugs.
3 OVERVIEW
3.1 Threat Model
Uranus is designed for applications running in a client-server
manner, and its threat model is the same as typical SGX systems
(e.g., VC3 [59] and SecureKeeper [28]). Specifically, SGX, clients,
all Uranus’s components running in clients and enclaves, and a
server application’s functions running in enclaves are trusted.
Other hardware and software layers such as BIOS, hypervisor,
OS, Uranus’s components outside enclaves, and server application
code running outside enclaves can all be controlled by attackers and
therefore are untrusted. Attackers can access and tamper with mem-
ory, observe and hijack system calls, and drop network packages.
@JECall byte[] handle_request(byte[] r_en) { /* */ }
@JOCall void store(byte[] k, byte[] v) { /* */ }
Figure 1: Code, JECall/JOCall annotations and workflow of the key-
value store running on Uranus. enc encrypts the key and value.
Same as SGX-Spark and VC3, denial of Service (DoS) and micro-
architectural side-channel attacks (e.g., CPU cache side-channels)
are out of the scope of this paper. Nevertheless, Uranus’s threat
model considers two types of software-level side-channels, AEX
and OCall, caused by running a default JVM in an enclave. For
instance, when a JVM’s default GC is invoked, all threads within
the enclave will trigger AEX via OS signals and leave the enclave,
leading to control flow leakage.
3.2 Uranus’s Programming Method
To preserve confidentiality and integrity for server applications, de-
velopers partition code into two parts: trusted code (CodeT) running
in enclaves and untrusted code (CodeU) running outside enclaves.
Uranus has two annotations JECall and JOCall for applications
to run CodeT’s functions in enclaves. Functions annotated with
JECall and their callees are in CodeT. When a function annotated
with JECall is invoked, the application execution transits into an
enclave until the function returns. When a function annotated with