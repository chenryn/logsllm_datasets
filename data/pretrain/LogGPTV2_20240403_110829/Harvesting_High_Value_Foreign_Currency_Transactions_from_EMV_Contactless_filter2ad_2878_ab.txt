EMV v4.3 Book 4 
Annex A - Coding of 
Terminal Data Elements, 
page 115 
Table  1  shows  a  snippet  of  the  references  table  for  Figure  6, 
which provides the details of one of the 26 steps in the Visa fDDA 
[5] protocol sequence (kernel 3). 
It  is  these  reference  tables  that  provide  the  documented  link 
between 
the  EMV  specification 
documents. 
the  UML  diagrams  and 
3 
2.3  Protocol Emulator 
The  protocol  emulator  is  a  concrete  software  implementation  of 
the  EMV  payments  protocol.    It  is  both  an  end  product  of  the 
analysis  process  and  the  test-bed  used  to  validate  the  findings  of 
our analysis process; for instance the protocol emulator was used 
to confirm the existence of the foreign currency flaw in UK issued 
credit / debit cards. 
To  maintain  the  linkage  between  the  protocol  emulator  code  and 
the UML diagrams / EMV specification, we insert comments into 
the Java code.  These comments contain the same descriptive text 
and references as per Table 1.  In this way, each line of Java code 
can be traced back to its origin in the EMV specification and can 
also be understood as part of the overall protocol sequence thanks 
to the references to the UML diagrams. 
2.4  Formal Abstract Model 
In this work, we studied the EMV requirements documents [4][5] 
to  produce  a  formal  abstract  model  of  its  properties  and 
functionalities,  specifically  for 
the  Visa  fDDA  contactless 
transaction  protocol  (summarised  in  Figure 6).  The  motivation  is 
to  capture  these  requirements  mathematically,  enabling  checking 
that  the  properties  of  interest  hold  (i.e.  the  requirements 
documents are consistent), and to produce test cases for our EMV 
emulator  derived  from  formal  proof  of  operational  feasibility  of 
each  protocol  stage  (i.e.  by  proving  the  stage  is  feasible,  we 
expose both abstract behaviours: normal and exceptional). 
2.4.1  Implementation of the Abstract Model 
Our abstract model uses the Z notation [13].  Proof obligations in 
Z  are  usually  of  three  kinds:  well-formedness  of  models,  where 
partial  functions  are  applied  within  their  domains,  and  unique 
existential  quantifiers  are  sound;  operational  feasibility,  where 
specified operations have (implicitly defined) preconditions strong 
enough to establish (explicitly defined) post-conditions; and  data 
reification  via  (usually  forward)  simulation,  where  the  use  of 
(concrete) data structure representations in operations closer to an 
implementation  language  are  shown  to  respect  the  abstract 
representation and operations. 
Our  models  have  49  type  definitions,  61  Z  schemas  representing 
the  NFC  operations  of  the  protocol,  and  79  proofs  in  total,  of 
which  49  are  theorems  representing  properties  of  interest  for  the 
whole model [7].  Feasibility proofs are useful in deducing formal 
model-based test cases, as they characterise the complete space of 
behaviours for all operations of interest, including successful and 
all  possible  error  cases,  both  determined  by  mathematical 
predicates  representing  disjoint  behaviours  of  the  protocol.    That 
is,  feasibility  proofs  characterise  a  set  of  disjoint  predicates  with 
(in  EMV’s  case)  non-overlapping  conditions 
that  when 
accumulated lead to true (e.g. pre-condition of an operation being 
x  0 or x = 0).  Thus, each disjunct represents a unique 
class of behaviours for the functionality being proved.  Moreover, 
we also prove that these disjunct predicates amount to true, hence 
we guarantee all behaviours are accounted for. 
The  formal  model  follows  the  methodology  advocated  in  [2], 
which enumerates requirements realised by each piece for formal 
specification.  Thus,  if  all  elements  of  the  requirements  are 
accounted  for  within  the  abstract  mathematical  model  in  a  way 
that  conveys  the  intended  behaviour  described  in  English,  then 
proofs about the abstract model (or rather, proof failure) will lead 
(as  our  experiments 
into  potential  attacks  and 
vulnerabilities  discovered  through  proof  investigation.  Once 
validated  by  EMV  experts,  such  formal  model  becomes  a  more 
show) 
accurate representation of the EMV protocol than the EMV books 
[4][5]. 
Signed  Dynamic  Authentication  Data  (SDAD)  for  the  validation 
of the transaction, by the bank and the POS terminal respectively. 
These  efforts  correspond  to  the  POS  terminal  side  of  Figure  6.  
The  mechanisation  of  a  formal  concrete  design,  together  with  a 
proof  of  refinement  indicate  that  these  designs  faithfully  satisfy 
the abstract model linked to the requirements.  Refinement proofs 
are perhaps the most costly aspect of a proof exercise, as it needs 
to  establish  that  the  implementation  details  do  not  breach  any  of 
the  contractual  requirements  established  by  the  abstract  model. 
This  concrete  model  can  then  serve  to  annotate  the  Java  (or  any 
other  implementation)  with  formal  specification  for  code-level 
functional correctness as done by tools such as VeriFast [11].   
Furthermore, we derive a set of test cases from this abstract model 
that  is  the  smallest  with  highest  coverage  possible.    We  also 
derive  a  systematic  code-annotation  technique,  using  the  same 
principle to enumerate what aspect of the requirements each piece 
of code within the emulator is realised.  These test cases represent 
a test-oracle based on requirements testing, rather than testing for 
any  implementation  issues. 
  Together,  the  test  cases  and 
systematic  code  annotation  are  useful  for  capturing  potential 
(major) errors.  Errors from the concrete design are more likely to 
expose problems with implementation choices, and it is our aim in 
the future to annotate the emulator code with formal specification 
amenable to static analysis of the properties corresponding to the 
behaviour of the code. 
2.4.2  Abstract Model for Foreign Currency 
Transaction Limits 
EMV  specifies  the  transaction  currency  as  one  of  the  data  fields 
for mandatory inclusion in the Application Cryptogram (AC) [4].  
This  indicates  the  importance  of  the  currency  as  it  is  one  of  the 
fields  which  is  cryptographically  protected  against  alteration. 
Nevertheless, the EMV books do not specify the process required 
when  the  terminal  and  the  card  have  different  currencies.    This 
omission  was  discovered  as  part  of  the  process  to  formulate  the 
pre-conditions  for  the  abstract  model  that  currency  exchanges 
were consistent.  It was clear that the currency was one of the pre-
conditions that should be included in the model, but we could not 
establish  the  correct  process  or  outcome  when  the  terminal 
currency was different from the card’s currency. 
The  abstract  model  has  identified  the  following  pre-conditions 
relating  to  currency:  (i)  the  native  currency  of  the  card;  (ii)  the 
native currency of the POS terminal; and (iii) the currency of the 
current  transaction.  For  instance,  when  assembling  the  fDDA 
Processing Data Objects List (PDOL) for a Visa NFC transaction 
we get the following Z schema (from [7]):  
It creates the NFCVisaPDOL! with the adequate fields from both 
the  card’s  and  transaction’s  data.  The  PDOL  amount,  however, 
needs to be corrected for the card’s target/preferred currency. For 
that  we  use  a  bijective  function  linking  currencies  and  countries, 
as  well  as 
transaction  currency  (returned  as 
tcurrency!),  and  the  given  cardCurrency?  input  for  the 
given amount.  This PDOL is then used to produce the AC and the 
the  agreed 
4 
We  could  satisfy  all  requirements  when  cardCurrency?  is 
equal to tCurrency!; however we could not do the same when 
they  are  not  equal.  This  prompted  us  to  run  foreign  currency 
transaction  experiments  on  real  credit  cards  using  the  emulator, 
revealing the vulnerabilities leading to the attack. 
3.  OVERVIEW OF THE ATTACK 
Figure  2  shows  the  key  elements  of  the  attack  and  how  they 
interact with the EMV payment system.  
Figure 2. Transaction harvesting attack 
The attack consists of two stages: 
Attackers  (collection  of  fraudulent  transactions):  attackers 
using  Near  Field  Communication  (NFC)  enabled  Android 
mobile  phones  can  collect  fraudulent  transactions  from 
unsuspecting  cardholders.  This  can  be  done  whilst  the 
contactless card is still in the cardholder’s pocket (see steps 1 
to 3 of Figure 2). 
Rogue  merchant  (converting  transactions  into  money):  a 
rogue  merchant  converts  the  collected  transactions  into 
money in their bank account by sending the transaction data 
to a bank (steps 4 to 5 of Figure 2). 
Finally  the  transaction  request  enters  the  Card  payment  clearing 
system  where  the  rogue  merchant’s  bank  acts  innocently  to 
transfer  the  transactions  into  the  card  payment  system,  which 
transfers the money from the victim’s bank account into the rogue 
merchant’s bank account (see steps 6 to 10 of Figure 2). 
3.1  Collecting fraudulent transactions 
Transactions are collected using a malicious app written for NFC-
enabled  Android  mobile  phones.    The  app  automatically  initiates 
and  collects  a  transaction  immediately  upon  detection  of  a 
contactless  credit  /  debit  card  in  the  phone’s  NFC  field.  This 
process  takes  less  than  500  milliseconds  from  card  detection  to 
transaction completion. 
It  is  imagined  that  attackers  will  operate  in  a  similar  way  to 
pickpockets, hiding their activity in crowded situations such as on 
public transport or in the crowd at an event.  When a credit / debit 
card  is  detected,  the  app  gives  the  attacker  an  audible  signal 
through  their headphones;  a  second  audible  signal  is  given  when 
the transaction collection is complete.  This will allow the attacker 
to operate without attracting too much attention. 
3.1.1  Hardware 
An Android mobile phone is chosen as the attack platform for the 
following reasons: 
  A  data  format  conversion  process,  which  converts  the 
fraudulent  transactions  collected  by  the  attackers  into  the 
format required by the bank. 
  Android mobile phones have a built-in NFC reader. 
  An  Android  phone  is  an  innocuous  item  for  the  attacker  to 
carry  in  a  crowded  place;  for  example,  it  will  not  raise 
attention  if  the  attacker  is  stopped  by  the  police,  since 
everyone carries mobile phones these days. 
The  mobile  phone  platform  provides  portability,  Internet 
connectivity  and  good  battery  life,  making  it  a  very  capable 
attack platform. 
3.1.2  The transaction collecting app 
The attack starts when the NFC-enabled Android phone identifies 
a contactless credit / debit card which is vulnerable to this attack 
in the victim’s wallet.  The app sends a transaction request to the 
vulnerable card. 
The  app  plays  an  audible  alert  to  the  attacker  to  signal  that  a 
vulnerable card has been found. 
When the victim’s  card receives  the transaction request message, 
it can approve or decline the transaction. If the card approves the 
transaction it generates the AC and the SDAD, this proves to the 
bank  and  POS  terminal  respectively  that  the  card  that  approved 
the transaction was genuine (see Section 4.3 for more detail). 
The cryptographic algorithms used to generate the AC and SDAD 
also  ensure  that  the  transaction  details  cannot  be  changed 
subsequent to the card authorising the transaction. 
When the attack is complete the app plays a second audible alert. 
3.1.3  Storage of approved transactions 
The  app  was  designed  to  operate  in  locations  where  an  Internet 
connection  is  not  always  available,  for  example  on  underground 
public  transport.  Therefore  the  app  will  initially  just  store  the 
transaction  authorisation  data  returned  by  the  victim’s  card.  
When a reliable Internet connection is available, the app will send 
the stored transaction data to the rogue merchant who will convert 
the transaction data into money. 
The  ability  to  capture  fraudulent  transactions  offline  and  store 
them  for  later  transmission  is  one  of  the  novel  features  of  this 
attack.  This  allows  the  attack  to  be  operated  on  a  large  scale 
without the need for synchronisation. 
Furthermore, storing the transactions minimises the time required 
to collect fraudulent transactions as the app does not have to wait 
for a connection.  It also allows the attackers to operate in victim-
rich  crowded  places  that  are  normally  without  an  Internet 
connection such as on subway trains, on buses and at large events. 
3.2  Converting transaction data into money 
The  criminals  would  set  up  a  rogue  merchant  account  with  an 
acquirer  bank  in  one  of  the  76  countries  that  accept  EMV 
payments.    This  rogue  merchant  will  receive  the  fraudulent 
transactions  collected  by  the  attackers  and  convert  them  into 
money by sending the transaction data to the bank. 
The rogue merchant consists of three elements: 
  An  Internet-based  listening  service,  which  will  receive 
collected transaction data from attackers. 
5 
  A rogue Point of Sale (POS) terminal, which must imitate the 
actions of a legitimate POS terminal so that it does not raise 
the  bank’s  suspicion.    To  achieve  this,  the  rogue  POS  takes 
the  previously  converted  data,  adds  the  merchant  data  and 
sends  that  data  to  the  bank  using  an  Internet  Protocol  (IP) 
connection. 
3.2.1  Internet-based listening service 
The  rogue  merchant  provides  an  Internet-based  listening  service 
on  a  pre-arranged  IP  address  and  port  number,  to  receive  the 
fraudulent  transactions  from  the  attackers.    The  transactions  are 
initially  stored  to  be  processed  later,  once  the  merchant  details 
have  been  added  to  the  transaction  and  the  connection  to  the 
acquirer bank is available. 
3.2.2  Data format conversion process 
Financial presentment request messages are used to transmit EMV 
credit  /  debit  card  transactions  between  the  merchant  (who 
captured the transaction) and the acquirer bank (who will process 
the transaction). 
Merchant-related  data  such  as  merchant  ID,  terminal  ID  and  the 
merchant’s  bank  account  details  are  added  to  the  transaction  to 
complete the data required by the EMV card clearing system.  The 
fraudulent  transaction  is  now  ready  for  transmission  to  the 
acquirer bank. 
The  exact  format  of  the  message  will  differ  slightly  between 
different  acquirer  banks.    However,  there  are  a  number  of 
mandatory  fields  that  are  the  same  for  every  acquirer  bank.  
Standard  70  [12]  in  the  UK  and  ISO  8583  [8]  in  other  EMV 
countries  define  the  mandatory  data  fields  which  must  appear  in 
the financial presentment request message and the optional fields 
which may differ between the acquirer banks. 
The  software  for  our  attack  prototype  implements  a  Standard  70 
message  format,  complete  with  all  of  the  mandatory  fields  and  a 
number of optional fields (see Section 6). 
3.2.3  Rogue POS terminal process 
Once  correctly  formatted,  the  financial  presentment  request 
message is sent to the bank.  The acquirer bank returns a financial 
presentment  response  message,  to  which  the  merchant  responds 
with  a 
that 
acknowledges receipt of the acquirer’s response message. 
financial  presentment  confirmation  message 
The supported communication options for this message exchange 
are  PSTN,  X25  over  ISDN,  IP  over  ISDN,  and  IP  over  public 
networks (i.e. the Internet) for transmission of messages between 
the merchant and the acquirer bank.  The software implementation 
presented in this paper uses IP over the Internet. 
Our  software  implements  data  format  conversion  (Section  3.2.2) 
and  implements  the  sending  of  the  financial  presentment  request 
message over an IP connection protected by SSL/TLS encryption.   
For obvious reasons we were not willing or able to check against a 
real bank. Of course, one approach to defeating the attack is to try 
to detect rogue POS behaviour at the bank, but it is not clear how 
well  this  can  be  done.  A  simple  solution  would  be  to  have  the 