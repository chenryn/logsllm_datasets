## 十五、Docker 的安全
好的安全性都是关于层的，Docker 有很多层。它支持所有主要的 Linux 安全技术以及大量自己的技术。最棒的是……它们中的许多都很简单，很容易配置。
在这一章中，我们将研究一些可以使 Docker 上运行的容器非常安全的技术。
当我们进入本章的深层部分时，我们将把事情分为两类:
*   Linux 安全技术
*   Docker 安全技术
这一章的大部分内容将专门针对 Linux。然而， **Docker 安全技术**部分与平台无关，同样适用于 Linux 和 Windows。
### Docker 的安全-TLDR
安全是关于层次的。一般来说，安全层越多，东西就越安全。嗯……Docker 提供了很多安全层。图 15.1 显示了我们将在本章中介绍的一些安全相关技术。
![Figure 15.1](img/figure15-1.png)
Figure 15.1
Linux 上的 Docker 利用了大多数常见的 Linux 安全和工作负载隔离技术。这些包括*名称空间*、*控制组(cggroups)*、*功能*、*强制访问控制(MAC)系统*和 *seccomp* 。对于每一个，Docker 都实现了合理的默认值，以获得无缝且*适度安全的*开箱即用体验。但是，您可以根据自己的特定要求定制每一个。
Docker 本身增加了一些优秀的附加安全技术。Docker 安全技术最好的一点是它们使用起来非常简单！
**DockerSwarm 体模式**默认是安全的。您无需配置即可获得以下所有内容；加密节点 id、相互认证、自动 CA 配置、自动证书轮换、加密集群存储、加密网络等等。
**Docker 内容信任(DCT)** 可以让您签署您的映像，并验证您消费的映像的完整性和发布者。
**映像安全扫描**分析映像，检测已知漏洞，并提供详细报告。
**Docker 机密**是一种安全共享敏感数据的方式，是 Docker 中的一级对象。它们存储在加密的集群存储中，在传送到容器时在传输中加密，在使用时存储在内存文件系统中，并以最低权限模式运行。
还有很多，但重要的是要知道，Docker 与主要的 Linux 安全技术合作，并提供自己的广泛和不断增长的安全技术集。虽然 Linux 安全技术趋于复杂，但是原生的 Docker 安全技术趋于简单。
### Docker 的安全——深潜
我们都知道安全很重要。我们也知道安全可能是复杂和无聊的。
当 Docker 决定将安全性烘焙到平台中时，它决定让它变得简单易行。他们知道，如果安全性很难配置，人们就不会使用它。因此，Docker 平台提供的大多数安全技术都易于使用。他们还提供合理的默认设置——这意味着你可以不费吹灰之力就获得一个相当安全的平台。当然，违约并不完美，但它们足以作为一个安全的起点。从那里你应该定制他们来满足你的需求。
我们将按如下方式组织本章的其余部分:
*   Linux 安全技术
    *   命名空间
    *   控制组
    *   能力
    *   强制访问控制
    *   seccomp(部门)
*   Docker 平台安全技术
    *   群体模式
    *   映像扫描
    *   Docker 内容信任
    *   Docker 的机密
#### Linux 安全技术
所有*好的*容器平台都使用*命名空间*和*组*来构建容器。*最佳*容器平台还将与其他 Linux 安全技术集成，如*功能*、*强制访问控制系统*如 SELinux 和 AppArmor、 *seccomp* 。不出所料，Docker 将它们全部整合在一起。
在本章的这一部分，我们将简要介绍 Docker 使用的一些主要 Linux 安全技术。我们不会详细讨论，因为我希望这一章的主要重点是 Docker 添加的增值安全技术。
##### 命名空间
内核命名空间是容器的核心。他们将一个操作系统(OS)切片，使其看起来和感觉都像多个**隔离的**操作系统。这让我们可以在同一个操作系统上运行多个网络服务器，而不会发生端口冲突。它还允许我们在同一个操作系统上运行多个应用，而不会因为共享配置文件和共享库而发生冲突。
几个简单的例子:
*   名称空间允许您在单个操作系统上运行多个网络服务器，每个服务器都在端口 443 上。为此，您只需在自己的*网络命名空间*内运行每个 web 服务器应用。这是因为每个*网络名称空间*都有自己的 IP 地址和全部端口。您可能必须将每个端口映射到 Docker 主机上的单独端口，但是每个端口都可以运行，而无需重写或重新配置来使用不同的端口。
*   您可以运行多个应用，每个应用都需要自己版本的共享库或配置文件。为此，您在自己的*挂载命名空间*中运行每个应用。这是可行的，因为每个*挂载命名空间*都可以有自己的系统上任何目录的独立副本(例如/etc，/var，/dev 等)。)
图 15.2 显示了在单个主机上运行的两个 web 服务器应用的高级示例，这两个应用都使用端口 443。每个 web 服务器应用都在自己的网络命名空间内运行。
![Figure 15.2](img/figure15-2.png)
Figure 15.2
> **注意**:虽然命名空间隔离了单个 OS 上的多个进程，但是它们提供的隔离并不是很强。例如，名称空间不如虚拟机擅长工作负载隔离。从安全角度来看，您应该记住这一点，不要过于依赖名称空间提供的隔离。
直接使用名称空间很难。幸运的是，Docker 隐藏了这种复杂性，并管理构建有用容器所需的所有名称空间。
Linux 上的 Docker 目前使用以下内核命名空间:
*   过程标识
*   网络
*   文件系统/挂载(mnt)
*   进程间通信
*   用户
*   UTS （UTS）
我们稍后将简要解释每个人都做了什么。但是要理解的最重要的事情是 **Docker 容器是命名空间**的有组织的集合。这意味着您可以免费获得每个容器的所有操作系统隔离。
例如，每个容器都有自己的`pid`、`net`、`mnt`、`ipc`、`uts`以及潜在的`user`命名空间。事实上，这些名称空间的有组织的集合就是我们所说的“容器”。图 15.3 显示了运行两个容器的单个 Linux 主机。
![Figure 15.3](img/figure15-3.png)
Figure 15.3
让我们简单看看 Docker 如何使用每个命名空间:
*   `Process ID namespace:` Docker 使用`pid`命名空间为每个容器提供隔离的进程树。这意味着每个容器都有自己的 PID 1。PID 名称空间也意味着一个容器不能看到或访问其他容器的进程树。它也不能看到或访问它运行的主机的进程树。
*   `Network namespace:` Docker 使用`net`命名空间为每个容器提供自己的隔离网络栈。该栈包括:接口、IP 地址、端口范围和路由表。例如，每个容器都有自己的`eth0`接口，有自己独特的 IP 和端口范围。
*   `Mount namespace:`每个容器都有自己唯一的独立根(`/`)文件系统。这意味着每个容器都可以有自己的`/etc`、`/var`、`/dev`和其他重要的文件系统结构。容器内部的进程不能访问 Linux 主机或其他容器的装载命名空间，它们只能看到和访问自己的独立文件系统。
*   `Inter-process Communication namespace:` Docker 使用`ipc`命名空间进行容器内的共享内存访问。它还将容器与容器外部的共享内存隔离开来。
*   `User namespace:` Docker 允许您使用`user`名称空间将容器内部的用户映射到 Linux 主机上的不同用户。一个常见的例子是将容器的`root`用户映射到 Linux 主机上的非根用户。
*   `UTS namespace:` Docker 使用`uts`命名空间为每个容器提供自己的主机名。
请记住…容器是打包并随时可用的命名空间的集合。
##### 控制组
如果名称空间是关于隔离的，*控制组(cggroups)*是关于设置限制的。
把容器想象成类似于旅馆的房间。虽然每个房间可能看起来都是孤立的，但每个房间都共享一组公共的基础设施资源，例如供水、供电、共享游泳池、共享健身房、共享早餐吧等。Cgroups 让我们设定限制，这样(坚持酒店的类比)没有一个容器可以使用所有的水或在早餐吧吃所有的东西。
在现实世界中，而不是酒店的类比中，容器相互隔离，但都共享一组通用的操作系统资源，如中央处理器、内存、网络带宽和磁盘输入/输出。Cgroups 让我们对每一个都设置限制，这样单个容器就不会消耗所有资源并导致拒绝服务(DoS)攻击。
##### 能力
运行容器不是一个好主意，因为`root` — `root`是全能的，因此非常危险。但是，作为非特权的非根用户运行容器可能会很有挑战性。例如，在大多数 Linux 系统上，非根用户往往如此无能为力，以至于实际上毫无用处。我们需要的是一种技术，它让我们选择一个容器需要哪个根来运行。
进入*战力！*
在幕后，Linux 根用户是一长串*功能*的组合。其中一些*功能*包括:
*   `CAP_CHOWN`:允许您更改文件所有权
*   `CAP_NET_BIND_SERVICE`:允许您将套接字绑定到编号较低的网络端口
*   `CAP_SETUID`:让你提升一个进程的权限级别
*   `CAP_SYS_BOOT`:让你重启系统。
名单还在继续，而且很长。
Docker 与*功能*一起工作，因此您可以像`root`一样运行容器，但是去掉所有不需要的功能。例如，如果您的容器需要的唯一根特权是绑定到低编号网络端口的能力，您应该启动一个容器并删除所有根功能，然后只添加回 CAP_NET_BIND_SERVICE 功能。
这是实现*最小特权*的一个很好的例子——您得到一个只运行所需功能的容器。Docker 还施加了限制，这样容器就不能重新添加被丢弃的功能。
虽然这很好，但是对于许多用户来说，配置正确的功能集可能非常复杂。
##### 强制访问控制系统
Docker 与主要的 Linux MAC 技术合作，如 AppArmor 和 SELinux。
根据您的 Linux 发行版，Docker 会对所有新容器应用默认的 AppArmor 配置文件。根据 Docker 文档，该默认配置文件是“适度保护，同时提供广泛的应用兼容性”。
Docker 还允许您在没有应用策略的情况下启动容器，并允许您自定义策略以满足特定需求。这也非常强大，但也非常复杂。
##### seccomp(部门)
Docker 在过滤模式下使用 seccomp 来限制容器可以对主机内核进行的系统调用。
根据 Docker 的安全理念，所有新容器都会获得一个默认的 seccomp 配置文件，该配置文件配置了合理的默认值。这是为了在不影响应用兼容性的情况下提供适度的安全性。
与往常一样，您可以自定义 seccomp 配置文件，并且可以向 Docker 传递一个标志，以便在没有 seccomp 配置文件的情况下启动容器。
与前面提到的许多技术一样，seccomp 的功能非常强大。然而，Linux 系统调用表很长，配置适当的 seccomp 策略可能非常复杂。
##### 关于 Linux 安全技术的最后思考
Docker 支持大多数重要的 Linux 安全技术，并附带了合理的默认值，这些默认值增加了安全性，但限制不太多。图 15.4 显示了这些技术如何形成多层潜在的安全性。
![Figure 15.4](img/figure15-4.png)
Figure 15.4
其中一些技术可能很难定制，因为它们需要深入了解 Linux 内核的工作原理。希望它们在未来变得更容易配置，但目前，Docker 附带的默认配置可能是一个很好的开始。
#### Docker 平台安全技术
让我们来看看 **Docker 平台**提供的一些主要安全技术。
##### 群体模式下的安全性
Docker Swarm 允许您集群多个 Docker 主机，并以声明方式部署应用。每个 Swarm 由*经理*和*工人*组成，可以是 Linux 或 Windows。管理人员管理集群的控制平面，并负责配置集群和分派工作任务。工作者是作为容器运行应用代码的节点。
不出所料，*群模式*包括许多现成的安全功能，并具有合理的默认值。其中包括:
*   加密节点标识
*   用于相互认证的顶级域名系统
*   安全加入令牌
*   具有自动证书循环的证书颁发机构配置
*   加密集群存储(配置数据库)
*   加密网络
让我们走一遍构建安全集群和配置一些安全方面的过程。
要了解完整的示例集，您至少需要三台运行 Docker 17.03 或更高版本的 Docker 主机。引用的示例使用了三个名为“mgr1”、“mgr2”和“wrk1”的 Docker 主机。每个都运行 Docker 19.03.4。所有三台主机之间都有网络连接，三台主机都可以通过名称相互 ping 通。
##### 配置安全的群
从希望成为新群集中第一个管理器的节点运行以下命令。在示例中，我们将从 **mgr1** 运行它。
```
$ docker swarm init
Swarm initialized: current node (7xam...662z) is now a manager.
To add a worker to this swarm, run the following command:
    docker swarm join --token \
     SWMTKN-1-1dmtwu...r17stb-ehp8g...hw738q 172.31.5.251:2377
To add a manager to this swarm, run 'docker swarm join-token manager'
and follow the instructions. 
```
 `就这样！这就是你配置一个安全的群所需要做的。
**mgr1** 被配置为群的第一个管理器，也是根证书颁发机构(CA)。群体本身被赋予了密码`clusterID`。 **mgr1** 已经为自己颁发了一个客户端证书，该证书将自己标识为群中的一个管理器，证书轮换已配置为默认值 90 天，并且群集配置数据库已配置并加密。还创建了一组安全令牌，以便新经理和新员工可以加入群。而这一切只需要一个**命令！**
图 15.5 显示了实验室现在的样子。在您的实验室中，某些细节可能会有所不同。
![Figure 15.5](img/figure15-5.png)
Figure 15.5
让我们加入 **mgr2** 作为附加经理。
让新经理加入群体是一个分两步走的过程。第一步提取所需的令牌。第二步在要添加的节点上运行`docker swarm join`命令。只要您将管理器加入令牌作为命令的一部分， **mgr2** 将作为管理器加入群。
从 **mgr1** 运行以下命令提取管理器加入令牌。
```
$ docker swarm join-token manager