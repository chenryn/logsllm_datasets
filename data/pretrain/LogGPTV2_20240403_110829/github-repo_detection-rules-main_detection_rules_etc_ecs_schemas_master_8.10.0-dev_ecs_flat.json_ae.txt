{"dll.hash.sha512": {"dashed_name": "dll-hash-sha512", "description": "SHA512 hash.", "flat_name": "dll.hash.sha512", "ignore_above": 1024, "level": "extended", "name": "sha512", "normalize": [], "original_fieldset": "hash", "short": "SHA512 hash."}}
{"dll.hash.ssdeep": {"dashed_name": "dll-hash-ssdeep", "description": "SSDEEP hash.", "flat_name": "dll.hash.ssdeep", "ignore_above": 1024, "level": "extended", "name": "ssdeep", "normalize": [], "original_fieldset": "hash", "short": "SSDEEP hash."}}
{"dll.hash.tlsh": {"dashed_name": "dll-hash-tlsh", "description": "TLSH hash.", "flat_name": "dll.hash.tlsh", "ignore_above": 1024, "level": "extended", "name": "tlsh", "normalize": [], "original_fieldset": "hash", "short": "TLSH hash."}}
{"dll.name": {"dashed_name": "dll-name", "description": "Name of the library.\nThis generally maps to the name of the file on disk.", "example": "kernel32.dll", "flat_name": "dll.name", "ignore_above": 1024, "level": "core", "name": "name", "normalize": [], "short": "Name of the library."}}
{"dll.path": {"dashed_name": "dll-path", "description": "Full file path of the library.", "example": "C:\\Windows\\System32\\kernel32.dll", "flat_name": "dll.path", "ignore_above": 1024, "level": "extended", "name": "path", "normalize": [], "short": "Full file path of the library."}}
{"dll.pe.architecture": {"dashed_name": "dll-pe-architecture", "description": "CPU architecture target for the file.", "example": "x64", "flat_name": "dll.pe.architecture", "ignore_above": 1024, "level": "extended", "name": "architecture", "normalize": [], "original_fieldset": "pe", "short": "CPU architecture target for the file."}}
{"dll.pe.company": {"dashed_name": "dll-pe-company", "description": "Internal company name of the file, provided at compile-time.", "example": "Microsoft Corporation", "flat_name": "dll.pe.company", "ignore_above": 1024, "level": "extended", "name": "company", "normalize": [], "original_fieldset": "pe", "short": "Internal company name of the file, provided at compile-time."}}
{"dll.pe.description": {"dashed_name": "dll-pe-description", "description": "Internal description of the file, provided at compile-time.", "example": "Paint", "flat_name": "dll.pe.description", "ignore_above": 1024, "level": "extended", "name": "description", "normalize": [], "original_fieldset": "pe", "short": "Internal description of the file, provided at compile-time."}}
{"dll.pe.file_version": {"dashed_name": "dll-pe-file-version", "description": "Internal version of the file, provided at compile-time.", "example": "6.3.9600.17415", "flat_name": "dll.pe.file_version", "ignore_above": 1024, "level": "extended", "name": "file_version", "normalize": [], "original_fieldset": "pe", "short": "Process name."}}
{"dll.pe.go_import_hash": {"dashed_name": "dll-pe-go-import-hash", "description": "A hash of the Go language imports in a PE file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nThe algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).", "example": "10bddcb4cee42080f76c88d9ff964491", "flat_name": "dll.pe.go_import_hash", "ignore_above": 1024, "level": "extended", "name": "go_import_hash", "normalize": [], "original_fieldset": "pe", "short": "A hash of the Go language imports in a PE file."}}
{"dll.pe.go_imports": {"dashed_name": "dll-pe-go-imports", "description": "List of imported Go language element names and types.", "flat_name": "dll.pe.go_imports", "level": "extended", "name": "go_imports", "normalize": [], "original_fieldset": "pe", "short": "List of imported Go language element names and types.", "type": "flattened"}}
{"dll.pe.go_imports_names_entropy": {"dashed_name": "dll-pe-go-imports-names-entropy", "description": "Shannon entropy calculation from the list of Go imports.", "flat_name": "dll.pe.go_imports_names_entropy", "format": "number", "level": "extended", "name": "go_imports_names_entropy", "normalize": [], "original_fieldset": "pe", "short": "Shannon entropy calculation from the list of Go imports.", "type": "long"}}
{"dll.pe.go_imports_names_var_entropy": {"dashed_name": "dll-pe-go-imports-names-var-entropy", "description": "Variance for Shannon entropy calculation from the list of Go imports.", "flat_name": "dll.pe.go_imports_names_var_entropy", "format": "number", "level": "extended", "name": "go_imports_names_var_entropy", "normalize": [], "original_fieldset": "pe", "short": "Variance for Shannon entropy calculation from the list of Go imports.", "type": "long"}}
{"dll.pe.go_stripped": {"dashed_name": "dll-pe-go-stripped", "description": "Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.", "flat_name": "dll.pe.go_stripped", "level": "extended", "name": "go_stripped", "normalize": [], "original_fieldset": "pe", "short": "Whether the file is a stripped or obfuscated Go executable.", "type": "boolean"}}
{"dll.pe.imphash": {"dashed_name": "dll-pe-imphash", "description": "A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nLearn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.", "example": "0c6803c4e922103c4dca5963aad36ddf", "flat_name": "dll.pe.imphash", "ignore_above": 1024, "level": "extended", "name": "imphash", "normalize": [], "original_fieldset": "pe", "short": "A hash of the imports in a PE file."}}
{"dll.pe.import_hash": {"dashed_name": "dll-pe-import-hash", "description": "A hash of the imports in a PE file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nThis is a synonym for imphash.", "example": "d41d8cd98f00b204e9800998ecf8427e", "flat_name": "dll.pe.import_hash", "ignore_above": 1024, "level": "extended", "name": "import_hash", "normalize": [], "original_fieldset": "pe", "short": "A hash of the imports in a PE file."}}
{"dll.pe.imports": {"dashed_name": "dll-pe-imports", "description": "List of imported element names and types.", "flat_name": "dll.pe.imports", "level": "extended", "name": "imports", "normalize": ["array"], "original_fieldset": "pe", "short": "List of imported element names and types.", "type": "flattened"}}
{"dll.pe.imports_names_entropy": {"dashed_name": "dll-pe-imports-names-entropy", "description": "Shannon entropy calculation from the list of imported element names and types.", "flat_name": "dll.pe.imports_names_entropy", "format": "number", "level": "extended", "name": "imports_names_entropy", "normalize": [], "original_fieldset": "pe", "short": "Shannon entropy calculation from the list of imported element names and types.", "type": "long"}}
{"dll.pe.imports_names_var_entropy": {"dashed_name": "dll-pe-imports-names-var-entropy", "description": "Variance for Shannon entropy calculation from the list of imported element names and types.", "flat_name": "dll.pe.imports_names_var_entropy", "format": "number", "level": "extended", "name": "imports_names_var_entropy", "normalize": [], "original_fieldset": "pe", "short": "Variance for Shannon entropy calculation from the list of imported element names and types.", "type": "long"}}
{"dll.pe.original_file_name": {"dashed_name": "dll-pe-original-file-name", "description": "Internal name of the file, provided at compile-time.", "example": "MSPAINT.EXE", "flat_name": "dll.pe.original_file_name", "ignore_above": 1024, "level": "extended", "name": "original_file_name", "normalize": [], "original_fieldset": "pe", "short": "Internal name of the file, provided at compile-time."}}
{"dll.pe.pehash": {"dashed_name": "dll-pe-pehash", "description": "A hash of the PE header and data from one or more PE sections. An pehash can be used to cluster files by transforming structural information about a file into a hash value.\nLearn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.", "example": "73ff189b63cd6be375a7ff25179a38d347651975", "flat_name": "dll.pe.pehash", "ignore_above": 1024, "level": "extended", "name": "pehash", "normalize": [], "original_fieldset": "pe", "short": "A hash of the PE header and data from one or more PE sections."}}
{"dll.pe.product": {"dashed_name": "dll-pe-product", "description": "Internal product name of the file, provided at compile-time.", "example": "Microsoft\u00ae Windows\u00ae Operating System", "flat_name": "dll.pe.product", "ignore_above": 1024, "level": "extended", "name": "product", "normalize": [], "original_fieldset": "pe", "short": "Internal product name of the file, provided at compile-time."}}
{"dll.pe.sections": {"dashed_name": "dll-pe-sections", "description": "An array containing an object for each section of the PE file.\nThe keys that should be present in these objects are defined by sub-fields underneath `pe.sections.*`.", "flat_name": "dll.pe.sections", "level": "extended", "name": "sections", "normalize": ["array"], "original_fieldset": "pe", "short": "Section information of the PE file.", "type": "nested"}}
{"dll.pe.sections.entropy": {"dashed_name": "dll-pe-sections-entropy", "description": "Shannon entropy calculation from the section.", "flat_name": "dll.pe.sections.entropy", "format": "number", "level": "extended", "name": "sections.entropy", "normalize": [], "original_fieldset": "pe", "short": "Shannon entropy calculation from the section.", "type": "long"}}
{"dll.pe.sections.name": {"dashed_name": "dll-pe-sections-name", "description": "PE Section List name.", "flat_name": "dll.pe.sections.name", "ignore_above": 1024, "level": "extended", "name": "sections.name", "normalize": [], "original_fieldset": "pe", "short": "PE Section List name."}}
{"dll.pe.sections.physical_size": {"dashed_name": "dll-pe-sections-physical-size", "description": "PE Section List physical size.", "flat_name": "dll.pe.sections.physical_size", "format": "bytes", "level": "extended", "name": "sections.physical_size", "normalize": [], "original_fieldset": "pe", "short": "PE Section List physical size.", "type": "long"}}
{"dll.pe.sections.var_entropy": {"dashed_name": "dll-pe-sections-var-entropy", "description": "Variance for Shannon entropy calculation from the section.", "flat_name": "dll.pe.sections.var_entropy", "format": "number", "level": "extended", "name": "sections.var_entropy", "normalize": [], "original_fieldset": "pe", "short": "Variance for Shannon entropy calculation from the section.", "type": "long"}}
{"dll.pe.sections.virtual_size": {"dashed_name": "dll-pe-sections-virtual-size", "description": "PE Section List virtual size. This is always the same as `physical_size`.", "flat_name": "dll.pe.sections.virtual_size", "format": "string", "level": "extended", "name": "sections.virtual_size", "normalize": [], "original_fieldset": "pe", "short": "PE Section List virtual size. This is always the same as `physical_size`.", "type": "long"}}
{"dns.answers": {"dashed_name": "dns-answers", "description": "An array containing an object for each answer section returned by the server.\nThe main keys that should be present in these objects are defined by ECS. Records that have more information may contain more keys than what ECS defines.\nNot all DNS data sources give all details about DNS answers. At minimum, answer objects must contain the `data` key. If more information is available, map as much of it to ECS as possible, and add any additional fields to the answer objects as custom fields.", "flat_name": "dns.answers", "level": "extended", "name": "answers", "normalize": ["array"], "short": "Array of DNS answers.", "type": "object"}}
{"dns.answers.class": {"dashed_name": "dns-answers-class", "description": "The class of DNS data contained in this resource record.", "example": "IN", "flat_name": "dns.answers.class", "ignore_above": 1024, "level": "extended", "name": "answers.class", "normalize": [], "short": "The class of DNS data contained in this resource record."}}
{"dns.answers.data": {"dashed_name": "dns-answers-data", "description": "The data describing the resource.\nThe meaning of this data depends on the type and class of the resource record.", "example": "10.10.10.10", "flat_name": "dns.answers.data", "ignore_above": 1024, "level": "extended", "name": "answers.data", "normalize": [], "short": "The data describing the resource."}}
{"dns.answers.name": {"dashed_name": "dns-answers-name", "description": "The domain name to which this resource record pertains.\nIf a chain of CNAME is being resolved, each answer's `name` should be the one that corresponds with the answer's `data`. It should not simply be the original `question.name` repeated.", "example": "www.example.com", "flat_name": "dns.answers.name", "ignore_above": 1024, "level": "extended", "name": "answers.name", "normalize": [], "short": "The domain name to which this resource record pertains."}}
{"dns.answers.ttl": {"dashed_name": "dns-answers-ttl", "description": "The time interval in seconds that this resource record may be cached before it should be discarded. Zero values mean that the data should not be cached.", "example": 180, "flat_name": "dns.answers.ttl", "level": "extended", "name": "answers.ttl", "normalize": [], "short": "The time interval in seconds that this resource record may be cached before it should be discarded.", "type": "long"}}
{"dns.answers.type": {"dashed_name": "dns-answers-type", "description": "The type of data contained in this resource record.", "example": "CNAME", "flat_name": "dns.answers.type", "ignore_above": 1024, "level": "extended", "name": "answers.type", "normalize": [], "short": "The type of data contained in this resource record."}}
{"dns.header_flags": {"dashed_name": "dns-header-flags", "description": "Array of 2 letter DNS header flags.", "example": "[\"RD\", \"RA\"]", "expected_values": ["AA", "TC", "RD", "RA", "AD", "CD", "DO"], "flat_name": "dns.header_flags", "ignore_above": 1024, "level": "extended", "name": "header_flags", "normalize": ["array"], "short": "Array of DNS header flags."}}
{"dns.id": {"dashed_name": "dns-id", "description": "The DNS packet identifier assigned by the program that generated the query. The identifier is copied to the response.", "example": 62111, "flat_name": "dns.id", "ignore_above": 1024, "level": "extended", "name": "id", "normalize": [], "short": "The DNS packet identifier assigned by the program that generated the query. The identifier is copied to the response."}}