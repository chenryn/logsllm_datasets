Android clients (v6.2.0) and a malicious WiFi access point
running a TCP proxy [30] with custom rules to suppress and
later release certain packets. Suppose an attacker sits between
Alice and a server, and Alice is in a chat with Bob. The
attacker can reorder messages that Alice is sending, so the
server receives them in the wrong order and forwards them
in the wrong order to Bob. While Alice’s client will initially
display her sent messages in the order she sent them, once it
fetches history from the server it will update to display the
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
94
modiﬁed order that will match that of Bob.
b) Deletion: MTProto makes it possible to silently drop a
message both when the client is the sender11 and when it is
the receiver, but it is difﬁcult to exploit in practice. Clients
and the server attempt to resend messages for which did
not get acknowledgements. Such messages have the same
msg_ids but are enclosed in a fresh ciphertext with random
padding so the attacker must be able to distinguish the repeated
encryptions to continue dropping the same payload. This is
possible e.g. with the desktop client as sender, since padding
length is predictable based on the message length [31]. When
the client is a receiver, other message delivery mechanisms
such as batching of messages inside a container or API calls
like messages.getHistory make it hard for an attacker to
identify repeated encryptions. So although MTProto does not
prevent deletion in the latter case, there is likely no practical
attack.
2) Re-encryption: If a message is not acknowledged within
a certain time in MTProto, it is re-encrypted using the same
msg_id and with fresh random padding. While this appears to
be a useful feature and a mitigation against message deletion,
it enables attacks in the IND-CPA setting, as we explain next.
As a motivation, consider a local passive adversary that
tries to establish whether R responded to I when looking
at a transcript of three ciphertexts (𝑐I,0, 𝑐R, 𝑐I,1), where 𝑐u
represents a ciphertext sent from u. In particular, it aims
to establish whether 𝑐R encrypts an automatically generated
acknowledgement, denoted by “(cid:88)”, or a new message from R.
If 𝑐I,1 is a re-encryption of the same message as 𝑐I,0, re-using
the state, this leaks that bit of information about 𝑐R.12
Suppose we have a channel CH that models the MTProto pro-
tocol as described in Section IV-A and uses the payload format
given in Table I.13 To sketch a model for acknowledgement
messages for the purpose of explaining this attack, we deﬁne
a special plaintext symbol (cid:88) that, when received, indicates
acknowledgement for the last sent message. As in Telegram,
(cid:88) messages are encrypted. Further, we model re-encryptions
by insisting that if the CH.Send algorithm is queried again on
an unacknowledged message 𝑚 then CH.Send will produce
another ciphertext 𝑐(cid:48) for 𝑚 using the same headers, including
msg_id and msg_seq_no, as previously used. Critically, this
means the same state in the form of msg_id and msg_seq_no
is used for two different encryptions.
11There are scenarios where deletion can be impactful. Telegram offers its
users the ability to delete chat history for the other party (or all members
of a group) – if such a request is dropped, severing the connection, the chat
history will appear to be cleared in the user’s app even though the request
never made it to the Telegram servers (cf. [3] for the signiﬁcance of history
deletion in some settings).
12Note that here we are breaking the conﬁdentiality of the ciphertext carrying
“(cid:88)”. In addition to these encrypted acknowledgement messages, the underlying
transport layer, e.g. TCP, may also issue unencrypted ACK messages or may
resend ciphertexts as is. The difference between these two cases is that in the
former case the acknowledgement message is encrypted, in the latter it is not.
For completeness, note that Telegram clients do not resend cached ciphertext
blobs when unacknowledged, but re-encrypt the underlying message under the
same state but with fresh random padding.
13We give a formal deﬁnition of the channel in Section IV-D, but it is not
necessary to outline the attack.
We use this behaviour to break the indistinguishability of an
encrypted (cid:88). Consider the adversary given in Fig. 11. If 𝑏 = 0,
𝑐R,𝑖 encrypts an (cid:88) and so 𝑐I,𝑖+1 will not be a re-encryption
of 𝑚0 under the same msg_id and msg_seq_no that were
used for 𝑐I,𝑖. In contrast, if 𝑏 = 1, then we have 𝑐(2)
I, 𝑗 = 𝑐(2)
I,𝑘
for some 𝑗, 𝑘, where 𝑐(𝑖) denotes the 𝑖-th block of 𝑐, with
probability 1 whenever msg_key 𝑗 = msg_key𝑘. This is true
because the payloads of 𝑐I, 𝑗 and 𝑐I,𝑘 share the same header
ﬁelds, in particular including the msg_id and msg_seq_no
in the second block, encrypted under the same key. In the
setting where the adversary controls the randomness of the
padding, the condition msg_key 𝑗 = msg_key𝑘 can be made
to always hold and thus 𝑐(2)
I,𝑘 holds with probability 1.
As a consequence two queries to the oracle sufﬁce. When the
adversary does not control the randomness, we can use the
fact that msg_key is computed via SHA-256 truncated to 128
bits and the birthday bound applies for ﬁnding collisions. Thus
after 264 queries we expect a collision with constant probability
(note that the adversary can check when a collision is found).
Finally, in either setting, when 𝑏 = 0 we have 𝑐(2)
I,𝑘 with
probability 0 since the underlying payloads differ, the key is
the same and AES is a permutation for a ﬁxed key.
I, 𝑗 = 𝑐(2)
I, 𝑗 = 𝑐(2)
IND,𝑞
Adversary DCh,Recv
Let aux = 𝜀. Choose any 𝑚0, 𝑚1 ∈ CH.MS \ {(cid:88)}.
Require ∀𝑖 ∈ N: 𝑟I,𝑖, 𝑟R,𝑖 ∈ CH.SendRS.
For 𝑖 = 1, . . . , 𝑞 do
𝑐I,𝑖 ← Ch(I, 𝑚0, 𝑚0, aux, 𝑟I,𝑖)
𝑐R,𝑖 ← Ch(R, (cid:88), 𝑚1, aux, 𝑟R,𝑖) ; Recv(I, 𝑐R,𝑖, aux)
If 𝑐(2)
If ∃ 𝑗 ≠ 𝑘 : msg_key 𝑗 = msg_key𝑘 then
I, 𝑗 = 𝑐(2)
Else return ⊥
I,𝑘 then return 1 else return 0
Figure 11: Adversary against the IND-security of MTProto
(modelled as channel CH) when permitting re-encryption under
reused msg_id and msg_seq_no. If the adversary controls the
randomness, then set 𝑞 = 2 and choose 𝑟I,0 = 𝑟I,1. Otherwise
(i.e. all 𝑟I,𝑖, 𝑟R,𝑖 values are uniformly random) set 𝑞 = 264. In
this ﬁgure, let msg_key𝑖 be the msg_key for 𝑐I,𝑖 and let 𝑐(𝑖)
be the 𝑖-th block of ciphertext 𝑐.
C. Modelling differences
In general, we would like our formal model of MTProto 2.0
to stay as close as possible to the real protocol, so that when
we prove statements about the model, we obtain meaningful
assurances about the security of the real protocol. However,
as the previous section demonstrates, the current protocol has
ﬂaws. These prevent meaningful security analysis and can be
removed by making small changes to the protocol’s handling
of metadata. Further, the protocol has certain features that
make it less amenable to formal analysis. Here we describe
the modelling decisions we have taken that depart from the
current version of MTProto 2.0 and justify each change.
1) Inconsistency: There is no authoritative speciﬁcation of the
protocol. The Telegram documentation often differs from the
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
95
implementations and the clients are not consistent with each
other.14 Where possible, we chose a sensible “default” choice
from the observed set of possibilities, but we stress that it is in
general impossible to create a formal speciﬁcation of MTProto
that would be valid for all current implementations. For instance,
the documentation deﬁnes server_salt as “A (random) 64-bit
number periodically (say, every 24 hours) changed (separately
for each session) at the request of the server” [32]. In practice
the clients receive salts that change every hour and which
overlap with each other.15 For client differences, consider
padding generation: on desktop [31], a given message length
will always result in the same padding length, whereas on
Android [33], the padding length is randomised.
2) Application layer: Similarly, there is no clear separation
between the cryptographic protocol of MTProto and the applica-
tion data processing (expressed using the TL schema). However,
to reason succinctly about the protocol we require a certain level
of abstraction. In concrete terms, this means that we consider
the msg_data ﬁeld as “the message”, without interpreting its
contents and in particular without modelling TL constructors.
However, this separation does not exist in implementations of
MTProto – for instance, message encoding behaves differently
for some constructors (e.g. container messages) – and so our
model does not capture these details.
3) Client/server roles: The client and the server are not
considered equal in MTProto. For instance, the server is trusted
to timestamp TL messages for history, while the clients are
not, which is why our reordering attacks only work in the
client to server direction. The client chooses the session_id,
the server generates the server_salt. The server accepts any
session_id given in the ﬁrst message and then expects that
value, while the client checks the session_id but may accept any
server_salt given.16 Clients do not check the msg_seq_no ﬁeld.
The protocol implements elaborate measures to synchronise
“bad” client time with server time, which includes: checks on
the timestamp within msg_id as well as the salt, special service
messages [35] and the resending of messages with regenerated
headers. Since much of this behaviour is not critical for security,
we model both parties of the protocol as equals. Expanding our
model with this behaviour should be possible without affecting
most of the proofs.
4) Key exchange: We are concerned with the symmetric part
of the protocol, and thus assume that the shared auth_key is
a uniformly random string rather than of the form 𝑔𝑎𝑏 mod 𝑝
resulting from the actual key exchange.
5) Bit mixing: MTProto uses speciﬁc bit ranges of auth_key
as KDF and MAC inputs. These ranges do not overlap for
different primitives (i.e. the KDF key inputs are wholly distinct
from the MAC key inputs), and we model auth_key as a
14Since the server code was not available, we inferred its behaviour from
observing the communication.
15The documentation was updated in response to our paper.
16The Android client accepts any value in the place of server_salt, and
the desktop client [34] compares it with a previously saved value and resends
the message if they do not match and if the timestamp within msg_id differs
from the acceptable time window.
random value, so without loss of generality our model generates
the KDF and MAC key inputs as separate random values. The
key input ranges for the client and the server do overlap for
KDF and MAC separately, however, so we model this in the
form of related-key-deriving functions.
Further, the KDF intermixes speciﬁc bit ranges of the outputs
of two SHA-256 calls to derive the encryption keys and IVs. We
argue that this is unnecessary – the intermixed KDF output is
indistinguishable from random (the usual security requirement
of a key derivation function) if and only if the concatenation
of the two SHA-256 outputs is indistinguishable from random.
Hence in our model the KDF just returns the concatenation.
6) Order: Given that MTProto operates over reliable transport
channels, it is not necessary to allow messages arriving out
of order. Our model imposes stricter validation on metadata
upon decryption via a single sequence number that is checked
by both sides and only the next expected value is accepted.
Enforcing strict ordering also automatically rules out replay
and deletion attacks, which the implementation of MTProto
as studied avoided in some cases only due to application-level
processing.17
7) Re-encryption: Because of the attacks in Section IV-B2,
we insist in our formalisation that all sent messages include a
fresh value in the header. This is achieved via a stateful secure
channel deﬁnition in which either a client or server sequence
number is incremented on each call to the CH.Send oracle.
8) Message encoding: Some of the previous points outline
changes to message encoding. We simplify the scheme, keeping
to the format of Table I but not modelling diverging behaviours
upon decoding. The implemented MTProto message encoding
scheme behaves differently depending on whether the user is a
client or a server, but each of them checks a 64-bit value in the
ﬁrst plaintext block, session_id and server_salt respectively.
To prove security of the channel, it is enough that there is
a single such value that both parties check, and it does not
need to be randomised, so we model a constant session_id
and we leave the salt as an empty ﬁeld. We also merge the
msg_id and msg_seq_no ﬁelds into a single sequence number
ﬁeld of corresponding size, reﬂecting that a simple counter
sufﬁces in place of the original ﬁelds. Note that though we
only prove security with respect to this particular message
encoding scheme, our modelling approach is ﬂexible and can
accommodate more complex message encoding schemes.
D. MTProto-based channel
Our model of the MTProto channel is given in Deﬁnition 5
and Fig. 12. We abstract the individual keyed primitives into
function families.18
CH.Init generates the keys for both users and initialises the
message encoding scheme. Note that auth_key as described
17Secret chats implement more elaborate measures against replay/reorder-
ing [29], however this complexity is not required when in-order delivery is
required for each direction separately.
18While the deﬁnition itself could admit many different implementations of
the primitives, we are interested in modelling MTProto and thus do not deﬁne
our channel in a fully general way, e.g. we ﬁx some key sizes.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
96
CH.Send(stu, 𝑚, aux; 𝑟)
, stME) ← stu
(auth_key_id, keyu
, keyu
(kku, mku) ← keyu
(stME, 𝑝) ← ME.Encode(stME, 𝑚, aux; 𝑟)
msg_key ← MAC.Ev(mku, 𝑝)
𝑘 ← KDF.Ev(kku, msg_key)
𝑐se ← SE.Enc(𝑘, 𝑝)
𝑐 ← (auth_key_id, msg_key, 𝑐se)
stu ← (auth_key_id, keyu
, keyu
Return (stu, 𝑐)
CH.Init()
hk ←$ {0, 1}HASH.kl