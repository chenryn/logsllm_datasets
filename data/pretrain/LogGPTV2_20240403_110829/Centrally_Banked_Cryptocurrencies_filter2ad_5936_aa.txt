title:Centrally Banked Cryptocurrencies
author:George Danezis and
Sarah Meiklejohn
Centrally Banked Cryptocurrencies
George Danezis
University College London
PI:EMAIL
Sarah Meiklejohn
University College London
PI:EMAIL
Abstract—Current cryptocurrencies, starting with Bitcoin,
build a decentralized blockchain-based transaction ledger, main-
tained through proofs-of-work that also serve to generate a
monetary supply. Such decentralization has beneﬁts, such as
independence from national political control, but also signiﬁcant
limitations in terms of computational costs and scalability. We
introduce RSCoin, a cryptocurrency framework in which central
banks maintain complete control over the monetary supply, but
rely on a distributed set of authorities, or mintettes, to prevent
double-spending. While monetary policy is centralized, RSCoin
still provides strong transparency and auditability guarantees. We
demonstrate, both theoretically and experimentally, the beneﬁts
of a modest degree of centralization, such as the elimination
of wasteful hashing and a scalable system for avoiding double-
spending attacks.
I.
INTRODUCTION
Bitcoin [25], introduced in 2009, and the many alternative
cryptocurrencies it has inspired (e.g., Litecoin and Ripple),
have achieved enormous success: ﬁnancially, in November
2015, Bitcoin held a market capitalization of 4.8 billion USD
and 30 cryptocurrencies held a market capitalization of over 1
million USD. In terms of visibility, cryptocurrencies have been
accepted as a form of payment by an increasing number of
international merchants, such as the 150,000 merchants using
either Coinbase or Bitpay as a payment gateway provider.
Recently, major ﬁnancial institutions such as JPMorgan
Chase [28] and Nasdaq [27] have announced plans to develop
blockchain technologies. The potential impacts of cryptocur-
rencies have now been acknowledged even by government
institutions: the European Central Bank anticipates their “impact
on monetary policy and price stability” [8]; the US Federal
Reserve their ability to provide a “faster, more secure and more
efﬁcient payment system” [5]; and the UK Treasury vowed to
“support innovation” [13] in this space. This is unsurprising,
since the ﬁnancial settlement systems currently in use by central
banks (e.g., CHAPS, TARGET2, and Fedwire) remain relatively
expensive and — at least behind the scenes — have high latency
and are stagnant in terms of innovation.
Despite their success, existing cryptocurrencies suffer from
a number of limitations. Arguably the most troubling one is
their poor scalability: the Bitcoin network (currently by far
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23187
the most heavily used) can handle at most 7 transactions per
second1 and faces signiﬁcant challenges in raising this rate
much higher,2 whereas PayPal handles over 100 and Visa
handles on average anywhere from 2,000 to 7,000. This lack of
scalability is ultimately due to its reliance on broadcast and the
need to expend signiﬁcant computational energy in proofs-
of-work — by some estimates [26, Chapter 5], comparable
to the power consumption of a large power plant — in order
to manage the transaction ledger and make double-spending
attacks prohibitively expensive. Alternative cryptocurrencies
such as Litecoin try to distribute this cost, and Permacoin [24]
tries to repurpose the computation, but ultimately neither of
these solutions eliminates the costs. A second key limitation of
current cryptocurrencies is the loss of control over monetary
supply, providing little to no ﬂexibility for macroeconomic
policy and extreme volatility in their value as currencies.
Against this backdrop, we present RSCoin, a cryptocur-
rency framework that decouples the generation of the monetary
supply from the maintenance of the transaction ledger. Our
design decisions were largely motivated by the desire to create
a more scalable cryptocurrency, but were also inspired by the
research agenda of the Bank of England [3], and the question
of “whether central banks should themselves make use of
such technology to issue digital currencies.” Indeed, as Bitcoin
becomes increasingly widespread, we expect that this will be
a question of interest to many central banks around the world.
RSCoin’s radical shift from traditional cryptocurrencies is
to centralize the monetary supply. Every unit of a particular
currency is created by a particular central bank, making
cryptocurrencies based on RSCoin signiﬁcantly more palatable
to governments. Despite this centralization, RSCoin still
provides the beneﬁt over existing (non-crypto) currencies
of a transparent transaction ledger, a distributed system for
maintaining it, and a globally visible monetary supply. This
makes monetary policy transparent, allows direct access to
payments and value transfers, supports pseudonymity, and
beneﬁts from innovative uses of blockchains and digital money.
the monetary authority also allows
RSCoin to address some of the scalability issues of fully
decentralized cryptocurrencies. In particular, as we describe
in Section VI, the central bank delegates the authority of
validating transactions to a number of other institutions that
we call mintettes (following Laurie [19]). Since mintettes are —
unlike traditional cryptocurrency miners — known and may
ultimately be held accountable for any misbehavior, RSCoin
supports a simple and fast mechanism for double-spending
detection. As described in Section V, we adapt a variant
Centralization of
1http://en.bitcoin.it/wiki/Scalability
2http://en.bitcoin.it/wiki/Blocksize debate
of Two-Phase Commit, optimized to ensure the integrity of
a transaction ledger. Thus, we achieve a signiﬁcantly more
scalable system: the modest experimental testbed that we
describe in Section V-D2 (consisting of only 30 mintettes
running a basic Python implementation of our consensus
mechanism), can process over 2,000 transactions per second,
and performance scales linearly as we increase the number of
mintettes. Most transactions take less than one second to clear,
as compared to many minutes in traditional cryptocurrency
designs.
Beyond scalability, recent issues in the Bitcoin network
have demonstrated that
the incentives of miners may be
misaligned,3 and recent research suggests that this problem —
namely, that miners are incentivized to produce blocks without
fully validating all the transactions they contain — is only
exacerbated in other cryptocurrencies [21]. We therefore discuss
in Section VI-B1 how mintettes may collect fees for good
service, and how such fees may be withheld from misbehaving
or idle mintettes; our hope is that this framework can lead to a
more robust set of incentives. In a real deployment of RSCoin,
we furthermore expect mintettes to be institutions with an
existing relationship to the central bank, such as commercial
banks, and thus to have some existing incentives to perform
this service.
The ultimate goal for RSCoin is to achieve not only a
scalable cryptocurrency that can be deployed and whose supply
can be controlled by one central bank, but a framework that
allows any central bank to deploy their own cryptocurrency.
In fact, there is interest [2] to allow other entities to not
only issue instruments that hold value (such as shares and
derivative products), but to furthermore allow some visibility
into transactions concerning them. With this in mind, we discuss
in Section VII-C what is needed to support some notion of
interoperability between different deployments of RSCoin,
how different currencies can be exchanged in a transparent
and auditable way, and how various considerations — such as
a pair of central banks that, for either security or geopolitical
reasons, do not support each other — can be resolved without
fragmenting the global monetary system. We also discuss other
extensions and optimizations in Section VII.
II. RELATED WORK
Much of the research on cryptocurrencies either has ana-
lyzed the extent to which existing properties (e.g., anonymity
and fairness) are satisﬁed or has proposed new methods to
improve certain features. We focus on those works that are
most related to the issues that we aim to address, namely
stability and scalability.
The work on these two topics has been largely attack-based,
demonstrating that even Bitcoin’s heavyweight mechanisms do
not provide perfect solutions. As demonstrated by Eyal and
Sirer [9] and Garay et al. [10], an attacker can temporarily
withhold blocks and ultimately undermine fairness. Babaioff et
al. [1] argued that honest participation in the Bitcoin network
was not sufﬁciently incentivized, and Johnson et al. [14] and
Laszka et al. [18] demonstrated that in fact some participants
might be incentivized to engage in denial-of-service attacks
against each other. Karame et al. [15] and Rosenfeld [31]
3https://bitcoin.org/en/alert/2015-07-04-spv-mining
2
Double-spending
Money generation
Ledger generation
Transparent
Pseudonymous
CC
online
C
C
no
no
e-cash
ofﬂine
C
n.a.
no
yes
Bitcoin RSCoin
online
online
D
D
yes
yes
C
D*
yes
yes
TABLE I: How existing approaches (credit cards, cryptographic
e-cash, and Bitcoin) and how RSCoin compare in terms of
the properties they provide. Double-spending refers to the way
the system detects double-spending (i.e., as it happens or after
the fact). C stands for centralized, D for decentralized, and D*
for distributed.
consider how an adversary might take advantage of both mining
power and the network topology to execute a double-spending
attack. Finally, Gervais et al. [11] looked at the structure of
mining pools, the rise of SPV clients, and the privileged rights
of Bitcoin developers and concluded that Bitcoin was far from
achieving full decentralization. On the positive side, Kroll et
al. [17] analyzed a simpliﬁed model of the Bitcoin network
and concluded that Bitcoin is (at least weakly) stable.
In terms of other constructions, the work perhaps most
related to our own is Laurie’s approach of designated authori-
ties [19]. This solution, however, does not describe a consensus
mechanism or consider a centralized entity responsible for the
generation of a monetary supply. The RSCoin framework is
also related to the approaches adopted by Ripple and Stellar,
in that the underlying consensus protocols [22, 32] used by all
three sit somewhere between a fully decentralized setting — in
which proof-of-work-based “Nakamoto consensus” [6] has thus
far been adopted almost unilaterally — and a fully centralized
setting (in which consensus is trivial). Within this space,
RSCoin makes different trust assumptions and thus ends up
with different features: both the Stellar and Ripple consensus
protocols avoid a central point of trust, but at the cost of
needing a broadcast channel (because the list of participants is
not ﬁxed a priori) and requiring servers to be in constant direct
communication, whereas our use of a central bank — which,
leaving aside any scalability beneﬁts, is ultimately one of the
main goals of this work — allows us to avoid both broadcast
channels (because the set of mintettes is known and thus users
can contact them directly) and direct communication between
mintettes.
Finally, our approach borrows ideas from a number of
industrial solutions. In particular, our two-layered approach
to the blockchain is in part inspired by the Bitcoin startup
Factom, and our consensus mechanism is in part inspired
by Certiﬁcate Transparency [20]. In particular, RSCoin, like
Certiﬁcate Transparency, uses designated authorities and relies
on transparency and auditability to ensure integrity of a ledger,
rather than full trust in a central party.
III. BACKGROUND
In this section, we present a brief background on Bitcoin
and traditional cryptocurrencies, and introduce some relevant
notation. Since RSCoin adopts properties of other online pay-
ment systems, such as those of credit cards and cryptographic
e-cash, we highlight some of the advantages and disadvantages
of each of these approaches in Table I.
A. The Bitcoin protocol
Bitcoin is a decentralized cryptocurrency introduced in a
whitepaper in 2008 [25] and deployed on January 3 2009. Since
then, Bitcoin has achieved success and has inspired a number of
alternative cryptocurrencies (often dubbed “altcoins”) that are
largely based on the same blockchain technology. The novelty
of this blockchain technology is that it fulﬁlls the two key
requirements of a currency — the generation of a monetary
supply and the establishment of a transaction ledger — in a
completely decentralized manner: a global peer-to-peer network
serves both to generate new units of currency and to bear
witness to the transfer of existing units from one party to
another through transaction broadcast and computational proof-
of-work protocols.
To highlight the differences between RSCoin and fully
decentralized cryptocurrencies such as Bitcoin, we sketch
the main operations and entities of these blockchain-based
currencies; for a more comprehensive overview, we refer the
reader to Bonneau et al. [6]. Brieﬂy, users can generate signing
keypairs and use the public key as a pseudonym or address in
which to store some units of the underlying cryptocurrency. To
transfer the value stored in this address to the address of another
user, he creates a transaction, which is cryptographically signed
using the secret key associated with this address. More generally,
transactions can transfer value from m input addresses to n
output addresses, in which case the transaction must be signed
by the secret keys associated with each of the input addresses.
Once a user has created a transaction, it is broadcast to
his peers in the network, and eventually reaches miners. A
miner seals the transaction into the global ledger by including
it in a pool of transactions, which she then hashes — along
with some metadata and, crucially, a nonce — to attempt to
produce a hash below a target value (deﬁned by the difﬁculty
of the network). Once a miner is successful in producing
such a hash, she broadcasts the pool of transactions and its
associated hash as a block. Among the metadata for a block
is a reference to the previously mined block, allowing the
acceptance of the miner’s block into the blockchain to be
signaled by the broadcast of another block with a reference
to hers (or, in practice, many subsequent blocks). Miners
are incentivized by two rewards: the collection of optional
fees in individual transactions, and a system-speciﬁc mining
reward (e.g., as of November 2015, Bitcoin’s mining reward
of 25 BTC). These rewards are collected in a special coin
generation transaction that the miner includes in her block’s
pool of transactions. Crucially, blocks serve to not only generate
the monetary supply (via the mining rewards included in each
block), but also to provide a partial ordering for transactions:
transactions in one block come before transactions included in
any block further along the blockchain. This allows all users in
the network to eventually impose a global (partial) ordering on
transactions, and thus thwart double-spending by maintaining a
list of unspent transaction outputs and validating a transaction
only if its input addresses appear in this list.
What we have described above is the typical way of
explaining Bitcoin at a high level, but we mention that in reality,
bitcoins are not “stored” in an address or “sent”; instead, the
sender relinquishes control by broadcasting a transaction that
re-assigns to the recipient’s address the bitcoins previously
associated with that of the sender. An input to a transaction is
thus not an address but a (signed) script that speciﬁes an index
in a previous transaction in which some bitcoins were received;
this address identiﬁer uniquely identiﬁes one particular usage
of an address, which becomes important as addresses are reused.
In what follows, we thus frequently use the notation for an
address and for a transaction-index pair interchangeably.
B. Notation
We denote a hash function as H(·) and a signature scheme
as the tuple (Sig.KeyGen, Sig.Sign, Sig.Verify), where these
algorithms behave as follows: via (pk, sk) $←− Sig.KeyGen(1λ)
one generates a signing keypair; via σ $←− Sig.Sign(sk, m) one
generates a signature; and via 0/1 ← Sig.Verify(pk, m, σ) one
veriﬁes a signature on a message.
We use addr to denote an address; this is identical to a public
key pk in terms of the underlying technology,4 but we use the
separate term to disambiguate between usage in a transaction
(where we use addr) and usage as a signature veriﬁcation
key (where we use pk). We use tx({addri}i
n−→ {addrj}j) to
denote a transaction in which n units of currency are sent from
{addri}i to {addrj}j. Each usage of an address addr can be
uniquely identiﬁed by the tuple addrid = (tx, indextx(addr), v),
where tx is the hash of the transaction in which it received
some value v, and indextx(addr) is the index of addr in the list