    {
      unsigned int v1; // r1
      _BOOL4 result; // r0
      v1 = __get_CPSR();
      _R2 = 1;
      __asm { MSR.W           PRIMASK, R2 }
      if ( a1 pending_event_bits |= 1 > 8) & 0xFF)
ke_task_create用于创建一个任务，实际就是把任务描述符放到全局任务数组的特定位置
    uint8_t __fastcall ke_task_create(uint8_t task_type, const struct ke_task_desc *p_task_desc)
    {
      idx = task_type;
      if ( idx state`的值
    void __fastcall ke_state_set(const ke_task_id_t id, const ke_state_t state_id)
    {
      int state_idx; // r4
      ke_task_desc *task; // r2
      ke_state_t *v4; // r2
      state_idx = HIBYTE(id);
      task = 0;
      if ( id idx_max > state_idx )
      {
        v4 = &task->state[state_idx];
        if ( *v4 != state_id )
        {
          *v4 = state_id;
          notify_handle_saved_msg(id);              // 通知内核去处理queue_saved中的消息
        }
      }
    }
这个表主要在`get_msg_handler`函数中被使用，用于任务的状态机。
系统中的任务列表
    call ke_task_create on llc_init 0x7F02CBE, task_struct: 0x7F1F1E8
    call ke_task_create on lld_init 0x7F06E1E, task_struct: 0x7F1F540
    call ke_task_create on llm_init 0x7F09CC6, task_struct: 0x7F1F578
    call ke_task_create on gtl_init_func 0x7F0E322, task_struct: 0x7F1F7F0
    call ke_task_create on gattc_init 0x7F125BE, task_struct: 0x7F1FE44
    call ke_task_create on gattm_init 0x7F13824, task_struct: 0x7F1FF40
    call ke_task_create on l2cc_init 0x7F13B7A, task_struct: 0x7F1FFE0
    call ke_task_create on gapc_init 0x7F1567C, task_struct: 0x7F2004C
    call ke_task_create on gapm_init 0x7F176D4, task_struct: 0x7F201B4
# 消息调度机制
## 申请消息
函数通过`ke_msg_alloc`申请消息，入参分别为消息ID，目的task_id， 源task_id以及消息参数的长度。
    void *__fastcall ke_msg_alloc(const ke_msg_id_t id, const ke_task_id_t dest_id, const ke_task_id_t src_id, const uint16_t param_len)
    {
      size_t v6; // r4
      ke_msg *msg; // r0
      uint32_t *v9; // r5
      v6 = param_len;
      msg = ke_malloc(param_len + 16, 2);  // 申请内存
      msg->hdr.next = -1;
      msg->saved = 0;
      msg->id = id;
      msg->dest_id = dest_id;
      msg->src_id = src_id;
      msg->param_len = v6;
      v9 = msg->param;
      memset(msg->param, 0, v6);
      return v9;
    }
返回值是一个`ke_msg`结构体的`param`部分
    struct ke_msg
    {
      struct co_list_hdr hdr;  // 链表头，用于后面把消息挂载到co_list链表中
      uint32_t saved;
      ke_msg_id_t id;
      ke_task_id_t dest_id;
      ke_task_id_t src_id;
      uint16_t param_len;  // param 的长度
      uint32_t param[1];
    };
## 消息释放
ke_msg_free直接使用 ke_free 释放内存。
    int __fastcall ke_msg_free(int a1)
    {
      return ke_free(a1);
    }
ke_msg_free的入参是
`ke_msg*`，但是`ke_msg_alloc`返回是`ke_msg`的`param`，所以在使用`ke_msg_free`很有可能出现指针没有减`0x10（ke_msg头部的大小）`的情况。
## 消息发送
ke_msg_send用于将特定消息发送到目标任务去处理
    bool __fastcall ke_msg_send(int param)
    {
      ke_msg *msg_hdr; // r1
      unsigned int v2; // r4
      msg_hdr = (param - 16);
      v2 = __get_CPSR();
      _R0 = 1;
      __asm { MSR.W           PRIMASK, R0 }         // 关闭中断
      co_list_push_back(&p_ke_env->queue_sent, &msg_hdr->hdr);
      _R0 = v2 != 0;
      __asm { MSR.W           PRIMASK, R0 }         // 恢复中断
      return ke_event_set(1u);
    }
主要逻辑就是把`msg_hdr`放到`p_ke_env->queue_sent`链表的末尾，`p_ke_env`指向`ke_env`，`ke_env`是一个全局变量，其结构如下
    /// Kernel environment definition
    struct ke_env_tag
    {
        /// Queue of sent messages but not yet delivered to receiver
        struct co_list queue_sent;
        /// Queue of messages delivered but not consumed by receiver
        struct co_list queue_saved;
        /// Queue of timers
        struct co_list queue_timer;
        #if (KE_MEM_RW)
        /// Root pointer = pointer to first element of heap linked lists
        struct mblock_free * heap[KE_MEM_BLOCK_MAX];
        /// Size of heaps
        uint16_t heap_size[KE_MEM_BLOCK_MAX];
        #if (KE_PROFILING)
        /// Size of heap used
        uint16_t heap_used[KE_MEM_BLOCK_MAX];
        /// Maximum heap memory used
        uint32_t max_heap_used;
        #endif //KE_PROFILING
        #endif //KE_MEM_RW
    };
可以看的结构体头部是`queue_sent`，类型为`co_list`，这个队列用于存放发送的的消息，`queue_sent`中消息会在后面消息调度时，找到对应的消息处理函数进行处理。
故`ke_msg_send`就是把要发送的消息放到`ke_env`的`queue_sent`发送队列中。
消息挂载到`queue_sent`链表后会调用`ke_event_set`通知内核，1号事件触发，然后在事件处理函数中会去调用消息对应的处理函数去处理消息。
## 消息处理
在`ke_task_init_func`函数里面注册了1号事件的处理函数
    int ke_task_init_func()
    {
      memset(p_task_desc_table_0, 0, 0x68u);
      return ke_event_callback_set(1u, 0x07F1CCDF);
    }
`0x07F1CCDF`处的函数的关键代码为
    int event_1_callback_func()
    {
      // 从发送队列中取出一个消息
      msg = co_list_pop_front(&p_ke_env_->queue_sent);
      if ( msg && !ke_is_free(msg) )
      {
        custom_msg_handler = *custom_msg_handlers_1;
        if ( *custom_msg_handlers_1 )
        {
          // 首先在 custom_msg_handlers 里面搜索消息处理函数
          for ( i = 0; ; ++i )
          {
            handler = &custom_msg_handler[i];       
            if ( !handler->func )
            {
              break;
            }
            if ( msg->dest_id == custom_msg_handler[i].task_id )
            {
              msg_id = msg->id;
              if ( msg_id == handler->id || msg_id == dv_0xFFFF )
              {
                msg_handle_func = custom_msg_handler[i].func;
                if ( !msg_handle_func )
                {
                  break;                            // 如果匹配就调用回调函数处理
                }
                goto trigger_callback_func;
              }
            }
          }
        }
        msg_handle_func = get_msg_handler(msg->id, msg->dest_id);
        if ( msg_handle_func )
        {
    trigger_callback_func:
          msg_handle_result = msg_handle_func(msg->id, msg->param, msg->dest_id, msg->src_id);
          if ( msg_handle_result )
          {
            if ( msg_handle_result != 1 && msg_handle_result == 2 )
            {
              // 处理结果为2，msg保存到queue_saved链表
              msg->saved = 1;
              co_list_push_back(&p_ke_env_->queue_saved, &msg->hdr);
            }
            goto out;
          }
        }
        ke_msg_free(msg);                           // 如果消息处理成功就把msg释放
      }
    out:
      if ( !p_ke_env_->queue_sent.first )           // 如果queue_sent链表为空，清除 event #1 事件
      {
        ke_event_clear(1u);
      }
      return result;
    }
代码逻辑为
  1. 从`p_ke_env_->queue_sent`取出一个消息`msg`。
  2. 根据`msg->id` 在 `custom_msg_handlers` 里面搜索消息处理函数，如果能找到就调用消息处理函数。
  3. 否则调用`get_msg_handler`根据`msg->id`和`msg->dest_id`去目标任务描述符里面搜索处理函数
  4. 找到处理函数`msg_handle_func`后，调用`msg_handle_func`对消息进行处理
  5. 如果`msg_handle_func`返回值为0表示消息处理完毕，后面会使用`ke_msg_free`释放消息的内存，如果返回值为2，就会把消息放到`p_ke_env_->queue_saved`链表中
  6. 最后函数会判断queue_sent链表如果没有未处理的消息，就会把 1 号事件清除。
# 总结
本文主要对Riviera Waves系统中的一些关键API、工作机制进行介绍。