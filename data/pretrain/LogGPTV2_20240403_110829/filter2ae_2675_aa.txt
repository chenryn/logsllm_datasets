**Author：LoRexxar'@Knownsec 404 Team  
Chinese Version：**
On February 20th, the RIPS team released the article [WordPress 5.0.0 Remote
Code Execution](https://blog.ripstech.com/2019/wordpress-image-remote-code-execution/ "WordPress 5.0.0 Remote Code Execution")(CVE-2019-6977), which
mainly discussed that under the account with author permission, RCE
vulnerability could be formed by means of Post Meta variable overwriting,
directory traversal, and local file inclusion.
However, the principle of vulnerability is only roughly described in the
paper, in which a large number of details of vulnerability are omitted, and
even part of the utilization has corresponding relationship with the back-end
server, thus causing problems in the process of reproduction. Having analyzed
the code, we managed to reproduce the vulnerability completely. Some of the
key utilization points are slightly different form the original text, which
will be illustrated further in this article.
## Vulnerability requirements
The requirements of the vulnerability is constrained as follows:
  * [WordPress commit 
This patch directly prohibits the passing of this variable.
    function _wp_get_allowed_postdata( $post_data = null ) {
        if ( empty( $post_data ) ) {
            $post_data = $_POST;
        }
        // Pass through errors
        if ( is_wp_error( $post_data ) ) {
            return $post_data;
        }
        return array_diff_key( $post_data, array_flip( array( 'meta_input', 'file', 'guid' ) ) );
    }
This function can be followed all the way to `wp-includes/post.php line 3770`.
![
](https://images.seebug.org/content/images/2019/02/82b2b17d-6b02-478e-a317-0e0fb186219c.png-w331s)
`update_post_meta` will traverse and update all the fields.
![
](https://images.seebug.org/content/images/2019/02/aa1b35f5-0912-44f4-a541-73e538380e52.png-w331s)
### Match the variable overwriting to the directory traversal
The corresponding cropping function is as follows:
    /wp-admin/includes/image.php line 25 
![
](https://images.seebug.org/content/images/2019/02/ce209b1a-31a6-486b-acd1-1968e6e310a2.png-w331s)
The variable src passed here is from the modified `_wp_attached_file`.
In the code, the problem is easily verified. **In WordPress settings, the
image path may be affected by a plugin. If the target image is not in the
desired path, WordPress will stitch the file path into a URL link
like`http://127.0.0.1/wp-content/uploads/2019/02/2.jpg`, and then download the
original image from the URL.**
Here, `_load_image_to_edit_path` is used to complete this operation.
It is just for such reason that, assuming the image we upload is named as