# IE漏洞学习笔记（二）：UAF释放后重用
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## UAF基础概念
UAF漏洞全称为use after
free，即释放后重用。漏洞产生的原因，在于内存在被释放后，但是指向指针并没有被删除，又被程序调用。比较常见的类型是C++对象，利用UAF修改C++的虚函数表导致的任意代码执行。
在了解UAF是导致任意代码执行的细节，首先让我们了解几个概念：
悬挂指针、内存占坑、C++虚函数
实验源码如下
    // UAFv1.cpp : 定义控制台应用程序的入口点。
    //
    #include
    using namespace std;
    #include "stdafx.h"
    #include
    #include
    #define size 32
    class Base
    {
    public :
        int base;
        virtual void f(){ cout
    #include  
    #include 
    #include 
    #include 
    using namespace std;
    class Human{
    private:
    ​    virtual void give_shell(){
    ​        system("/bin/sh");
    ​    }
    protected:
    ​    int age;
    ​    string name;
    public:
    ​    virtual void introduce(){
    ​        cout name = name;
    ​        this->age = age;
    ​        }
    ​        virtual void introduce(){
    ​        Human::introduce();
    ​                cout name = name;
    ​                this->age = age;
    ​        }
    ​        virtual void introduce(){
    ​                Human::introduce();
    ​                cout > op;
    ​        switch(op){
    ​            case 1:
    ​                m->introduce();
    ​                w->introduce();
    ​                break;
    ​            case 2:
    ​                len = atoi(argv[1]);
    ​                data = new char[len];
    ​                read(open(argv[2], O_RDONLY), data, len);
    ​                cout introduce();
    ​                w->introduce();
    ​                break;
IDA中对应的伪代码
指针v13和v14分别对应实例化的Man和Woman，Woman的虚函数表的结构与Man是相同的（地址不同），所以不再赘述。
通过观察虚函数表结构，我们已经知道introduce为虚表表头偏移8个字节，所以便有了v13+8字节偏移。
这里就埋下一个伏笔，如果对虚表指针的地址进行改写，将虚表向前偏移8个字节，这样本来调用introduce方法就会调用getshell方法。
对应的反汇编如下，非常建议自己动态调试一遍，能够加深印象。
###  2.2UAF利用流程
（1）程序实例化Man和Women
（2）使用Free将Man和Women分别Free （free）
（3）再分配内存，这里我们需要分配24字节，为了占坑。（after）
因为24字节（0x18）和之前分配的Man和Women一样（上图所示），所以会发生占坑现象，也就是说程序会将之前被释放的Man和Women空间分配给这个指针。此时读取文件（poc）的内容，因为占坑之后内存指针指向的第一个字符就是，覆盖之前Man和Women的虚函数。
Poc的内容就是$ python -c “print ‘x68x15x40x00x00x00x00x00’”> poc
即0x401468=0x401570-8，原虚函数表地址-8字节。
（4）调用Man的悬挂指针，因为虚函数表被我们从poc读入的数据改写，调用intruduce会调用getshell
（5）利用结束
使用UAF修改C++虚表，改变程序流程。
调试过程中，建议下如下的断点，可以让程序停在关键的地方。也可以在调试过程中，多尝试用Ctrl+C呼叫程序暂停，然后设置断点。
    gdb-peda$ b *0x400f13
    Breakpoint 1 at 0x400f13
    gdb-peda$ b *0x400fcd
    Breakpoint 2 at 0x400fcd
    gdb-peda$ b *0x40102d
    Breakpoint 3 at 0x40102d
    gdb-peda$ b *0x401076
    Breakpoint 4 at 0x401076
根据如下的操作，我们很容易就获取了shell，注意传递参数poc文件
## 小结
UAF在浏览器漏洞中多为对C++对象（虚函数）的修改，悬挂指针是UAF利用的关键，调用被Free的函数，如果这个函数的位置已经被别的对象占坑，进行了修改，那么调用悬挂指针就可能能够造成任意代码执行。结合Heap
Spray会产生很好的效果。