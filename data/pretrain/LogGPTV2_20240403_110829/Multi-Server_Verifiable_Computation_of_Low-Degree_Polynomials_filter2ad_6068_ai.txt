ˆϕ(0) − ϕ(0)
ˆψ(0) − ψ(0)
ˆϕ(0) − ϕ(0)
= Pr
α =
≤ Pr
α =
≤ 1/(q − 1).
∧ ( ˆϕ(0) ̸= ϕ(0))
(cid:35)
(cid:35)
(cid:12)(cid:12)(cid:12) ( ˆϕ(0) ̸= ϕ(0))
Hence, Π2 is (t, ϵ)-secure with ϵ = 1/(q − 1).
APPENDIX C
PROOF FOR THEOREM 3
Proof for input privacy. By Definition 4, we need to show
that for any set T ⊆ [k] of cardinality t, any F ∈ P(q, m, d),
and any x0, x1 ∈ Fm
q , σΠ3(T, F, x0) and σΠ3 (T, F, x1) are
identically distributed. It suffices to take T = [t] and show
that for any x ∈ Fm
q , σΠ3 (T, F, x) is uniformly distributed
over Fmt
q2 . In an execution of Π3, ProbGen(pkF , x) will output
an input share σi = c(i) for all i ∈ [k]. In particular, σT =
(σi)i∈T will satisfy the following equation system
(cid:124)
1 − α 1 − α2
2 − α 22 − α2
...
t − α t2 − α2
...
···
···
···
···
1 − αt
2t − αt
...
tt − αt
(cid:123)(cid:122)
G
 =
(cid:125)
r1
r2
...
rt
 .
σ1 − x
σ2 − x
...
σt − x
Note that the coefficient matrix G is non-singular because α /∈
[t]. For any value of σT ∈ Fmt
q2 , there is a unique set of vectors
r1, . . . , rt such that the above equation system is satisfied.
Hence, σT is uniformly distributed over Fmt
q2 .
Proof for security. By Definition 2, it suffices to show that
for any T ⊆ [k] of cardinality t, any F ∈ P(q, m, d), any
adversary A, Pr[ExpPriVA,Π3
(T, F, λ) = 1] ≤ ϵ. W.l.o.g., we
take T = [t] and consider Experiment 1:
• The challenger mimics KeyGen(λ, F ) as follows: let ρi =
F for all i ∈ [k], pkF =⊥, and vkF =⊥. It then invokes
A with (F, pkF , vkF , ρT ).
• Given (F, pkF , vkF , ρT ), A chooses an input x ∈ Fm
q
and gives it to the challenger.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:01 UTC from IEEE Xplore.  Restrictions apply. 
16611
x +(cid:80)t
q2 \ [k], r1, . . . , rt ← Fm
choose α ← F∗
all i ∈ [k]. It then gives σT to A.
• The challenger mimics ProbGen(pkF , x) as follows:
q2, let c(u) =
s=1 rs(us − αs), set vkx = α and σi = c(i) for
• A chooses t partial results {ˆπi}i∈T and gives them to
• For every i ∈ [k] \ T , the challenger computes ˆπi ←
the challenger.
Compute(i, ρi, σi).
• The challenger interpolates a polynomial ˆϕ(u) of degree
≤ dt such that ˆϕ(i) = ˆπi for all i ∈ [k]. If ˆϕ(α) ∈ Fq, it
sets ˆy = ˆϕ(α); otherwise, it sets ˆy =⊥.
• If ˆy /∈ {⊥, F (x)}, then outputs 1; otherwise, outputs 0.
The event ExpPriVA,Π3
(T, F, λ) = 1 occurs if and only if
ˆϕ(α) ∈ Fq \ {F (x)}, i.e., if and only if α is a root of at least
one of the q− 1 polynomials in { ˆϕ(u)− δ : δ ∈ Fq \{F (x)}}.
Note that A knows nothing about α ∈ F∗
q2 \ [k], which
was randomly chosen. We must have that Pr[ ˆϕ(α) ∈ Fq \
{F (x)}] ≤ (q − 1)dt/(q2 − 1 − k). Hence, Π3 is (t, ϵ)-secure
for ϵ = (q − 1)dt/(q2 − 2 − dt).
APPENDIX D
CRYPTOGRAPHIC ASSUMPTIONS
(λ) ≤ negl(λ).
Definition 5. (DLog Assumption) Let G be a cyclic group
of order q > 2λ. For a generator g ∈ G and α ← Zq we
define the advantage of an adversary A in solving the DLog
(λ) = Pr[A(g, gα) = α]. We say that
problem as AdvDLogA
the DLog assumption holds in G if for any PPT adversary A,
AdvDLogA
Definition 6. (D-DHI Assumption [30]) Let G be a cyclic
group of order q > 2λ. For a generator g ∈ G and α ← Zq we
define the advantage of an adversary A in solving the D-DHI
problem as AdvDHIA (λ) = Pr[A(g, gα, . . . , gαD
) = g1/α] and
we say that the D-DHI assumption holds in G if for any PPT
adversary A and for D = poly(λ), AdvDHIA (λ) ≤ negl(λ).
APPENDIX E
PROOF FOR THEOREM 4
By Definition 3, it suffices to show that for any T ⊆ [k]
of cardinality ≤ t, any F ∈ P(q, m, d), any PPT adversary
A, ϵ := Pr[ExpPubVA,Π4
(T, F, λ) = 1] must be negligible in λ.
W.l.o.g., we take T = [t] and construct a PPT algorithm B
that uses A to solve the (k − 1)-DHI problem in G:
• Given I = (g, gα, . . . , gαk−1
), B mimics KeyGen(λ, F )
as follows: choose ℓ0, ℓ1 ← Fm
q , let ℓ(u) = ℓ0 + ℓ1u,
compute f (u) = F (ℓ(u)), set ρi = F for every i ∈ [k],
pkF = ℓ(u), and vkF = (ℓ(u), f (u)). It then invokes A
with (F, pkF , vkF , ρT ).
q and gives it to B.
σ1, σ2, . . . , σt ← Fm
gαk−1
• A chooses an input x ∈ Fm
• B mimics ProbGen(pkF , x) as follows: choose a ← F∗
q,
, gα, . . . ,
q , set vkx = (g, ga, . . . , gad
). It then gives both vkx and and σT to A.
q and gives it to B.
• A chooses ˆπT = {ˆπi}i∈T ∈ Ft
• B computes πi = F (σi) for all i ∈ [t] and interpolates
i=0 δiui of degree < k such
a polynomial δ(u) = (cid:80)k−1
that δ(i) = ˆπi − πi for all i ∈ [t] and δ(i) = 0 for all
t < i ≤ k. Note that B is able to compute gδ(α) with I
and the coefficients of δ(u). If δ(0) ̸= 0 and gδ(α) = 1,
B outputs
(cid:32)k−1(cid:89)
(cid:33)− 1
δ0
g1/α =
gδiαi−1
,
(24)
i=1
could be computed as rt+1 = α−t−1(a − (x +(cid:80)t
Note that what A sees in this procedure is identically dis-
tributed to what it should see in ExpPubVA,Π4
(T, F, λ). In partic-
ular, the vectors r1, . . . , rt ∈ Fm
q used to encode x are implicit
and uniquely determined with (20). Furthermore, the rt+1
s=1 rsαs)).
Although B is unable to compute the partial result πi for
every t < i ≤ k, we have that δ(u) = ˆϕ(u) − ϕ(u), where
ˆϕ(u) is interpolated from (ˆπ1, . . . , ˆπt, πt+1, . . . , πk) such that
ˆϕ(i) = ˆπi for all i ∈ [t] and ˆϕ(i) = πi for all t < i ≤ k, and
ϕ(u) is interpolated from (π1, . . . , πt, πt+1, . . . , πk) such that
ϕ(i) = πi for all i ∈ [k]. It is clear that A wins in the security
experiment if and only if δ(0) ̸= 0 and gδ(α) = 1, where
“gδ(α) = 1” signs that the partial results chosen by A will be
accepted and “δ(0) ̸= 0” signs that Verify will output a value
̸= F (x). When A wins, (24) will allow B to learn g1/α. Hence,
we have that Pr[B(I) = g1/α] = Pr[ExpPubVA,Π4
(T, F, λ) =
1] = ϵ. Under the (k − 1)-DHI assumption in G, ϵ must be
negligible in λ. Hence, Π4 should be t-secure under the same
assumption.
APPENDIX F
PROOF FOR THEOREM 5
q and gives it to B.
By Definition 3, it suffices to show that for any T ⊆ [k] of
cardinality ≤ t, any F ∈ P(q, m, d), any PPT adversary A,
ϵ := Pr[ExpPubVA,Π5
(T, F, λ) = 1] is negligible in λ. Without
loss of generality, we take T = [t] and construct a PPT
algorithm B that uses A to solve the DLog problem in G:
• Given I = (g, gα), B mimics KeyGen(λ, F ) as follows:
let ρi = F for all i ∈ [k], pkF =⊥ and vkF =⊥ . It then
invokes A with (F, pkF , vkF , ρT ).
• A chooses an input x ∈ Fm
• B mimics ProbGen(pkF , x) as follows: choose c1, . . . ,
q , b1, . . . , bt ← Fq, set vkx = gα and σi =
ct ← Fm
(ci, bi) for every i ∈ [t]. It then gives vkx and σT to A.
q for all i ∈ [t] and gives
• A chooses ˆπi = (ˆvi, ˆwi) ∈ F2
ˆπT to B.
• Let vi = F (ci) and wi = vibi for i ∈ [t]. B interpolates a
polynomial δ(u) of degree ≤ dt such that δ(i) = ˆvi − vi
for all i ∈ [t] and δ(i) = 0 for all t < i ≤ k; and
interpolates a polynomial ∆(u) of degree ≤ (d + 1)t
such that ∆(i) = ˆwi − wi for all i ∈ [t] and ∆(i) = 0
for all t < i ≤ k. If g∆(0) = gαδ(0) and δ(0) ̸= 0, then
B outputs α = ∆(0)/δ(0); otherwise, it outputs ⊥.
Note that what A sees in the above procedure is identically
distributed to what it should see in ExpPubVA,Π5
(T, F, λ). The
vectors r1, . . . , rt ∈ Fm
q and the numbers γ1, . . . , γt ∈ Fq for
encoding x are implicit but uniquely determined by σT , gα
and x. Although B is unable to compute the partial result πi =
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:01 UTC from IEEE Xplore.  Restrictions apply. 
17612
(vi, wi) for every t < i ≤ k, it is true δ(u) = ˆϕ(u) − ϕ(u),
where ˆϕ(u) is interpolated from (ˆv1, . . . , ˆvt, vt+1, . . . , vk)
such that ˆϕ(i) = ˆvi for all i ∈ [t] and ˆϕ(i) = vi for
all t < i ≤ k, and ϕ(u) is interpolated from (v1, . . . , vk)
such that ϕ(i) = vi for all i ∈ [k]. Similarly, it is true
that ∆(u) = ˆψ(u) − ψ(u), where ˆψ(u) is interpolated from
( ˆw1, . . . , ˆwt, wt+1, . . . , wk) such that ˆψ(i) = ˆwi for all i ∈ [t]
and ˆψ(i) = wi for all t < i ≤ k, and ψ(u) is interpolated
from (w1, . . . , wk) such that ψ(i) = wi for all i ∈ [k]. It
is clear that A wins in the security experiment if and only
if δ(0) ̸= 0 and g∆(0) = gαδ(0), where “g∆(0) = gαδ(0)”
signs that the partial results chosen by A will be accepted and
“δ(0) ̸= 0” signs that Verify will output a value ̸= F (x). When
A wins, B is to learn α = ∆(0)/δ(0). Hence, Pr[B(I) = α] =
Pr[ExpPubVA,Π5
(T, F, λ) = 1] = ϵ. Under the DLog assumption
in G, ϵ must be negligible in λ. Hence, Π5 is t-secure under
the same assumption.
APPENDIX G
OUTSOURCEABILITY
Definition 7. (Outsourceability) An MSVC scheme is said to
be outsourceable if for any x and {πi}k
i=1, the time Tp + Tv
required by ProbGen(pkF , x) and Verify(vkF , vkx,{πi}k
i=1) is
o(Tn), where Tn is the running time of the native computation
F (x).
(cid:0)m+d
Theorem 8. If kmt2 + k3 + (k + d)λ = o(nd), where n =
(cid:1), then the five MSVC schemes are all outsourceable.
d
Proof. In Π1, Π2 and Π3, ProbGen and Verify require
O(kmt2) and O(k3) field operations in Fq (or Fq2), respec-
tively. The native computation requires O(nd) field operations.
Under the given condition, we have that Tp + Tv = o(Tn) and
thus these schemes are outsourceable. In Π4 and Π5, ProbGen
requires O(kmt2) field operations, and Verify requires both
O(k3) field operations and O(k + d) exponentiations in G,
where the group operations are equivalent to around O((k +
d)λ) field operations. Under the given condition, we have that
Tp + Tv = o(Tn). Thus, Π4 and Π5 are outsourceable.
APPENDIX H
PIR WITH CHEATING DETECTION
Let d = µ(k, t). By using Π4 (when k = d(t + 1) + 1)
or Π5 (when k = (d + 1)t + 1) to publicly and verifiably
compute F (E(i)), the client has a PIR scheme that can detect
the cheating of ≤ t servers. Its communication complexity is
O(n1/d) = O(n1/µ(k,t)).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:01 UTC from IEEE Xplore.  Restrictions apply. 
18613