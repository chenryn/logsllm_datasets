---
author: Gustavo Duarte
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 8829
date: '2018-03-01 09:16:00'
editorchoice: false
excerpt: 在学习了进程的 虚拟地址布局 之后，让我们回到内核，来学习它管理用户内存的机制。
fromurl: http://duartes.org/gustavo/blog/post/how-the-kernel-manages-your-memory/
id: 9393
islctt: true
largepic: /data/attachment/album/201802/28/002510zfsruzezb6b46oib.jpg
permalink: /article-9393-1.html
pic: /data/attachment/album/201802/28/002510zfsruzezb6b46oib.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 9255
- displayorder: 0
  raid: 9528
reviewer: ''
selector: ''
summary: 在学习了进程的 虚拟地址布局 之后，让我们回到内核，来学习它管理用户内存的机制。
tags:
- 内存
thumb: false
title: 内核如何管理内存
titlepic: true
translator: qhwdw
updated: '2018-03-01 09:16:00'
---
![](/data/attachment/album/201802/28/002510zfsruzezb6b46oib.jpg)
在学习了进程的 [虚拟地址布局](/article-9255-1.html) 之后，让我们回到内核，来学习它管理用户内存的机制。这里再次使用 Gonzo：
![Linux kernel mm_struct](/data/attachment/album/201802/28/002521ulnh0at3zieuc2el.png)
Linux 进程在内核中是作为进程描述符 [task\_struct](http://lxr.linux.no/linux+v2.6.28.1/include/linux/sched.h#L1075) （LCTT 译注：它是在 Linux 中描述进程完整信息的一种数据结构）的实例来实现的。在 task\_struct 中的 [mm](http://lxr.linux.no/linux+v2.6.28.1/include/linux/sched.h#L1129) 域指向到**内存描述符**，[mm\_struct](http://lxr.linux.no/linux+v2.6.28.1/include/linux/mm_types.h#L173) 是一个程序在内存中的执行摘要。如上图所示，它保存了起始和结束内存段，进程使用的物理内存页面的 [数量](http://lxr.linux.no/linux+v2.6.28.1/include/linux/mm_types.h#L197)（RSS  常驻内存大小   Resident Set Size  ）、虚拟地址空间使用的 [总数量](http://lxr.linux.no/linux+v2.6.28.1/include/linux/mm_types.h#L206)、以及其它片断。 在内存描述符中，我们可以获悉它有两种管理内存的方式：**虚拟内存区域**集和**页面表**。Gonzo 的内存区域如下所示：
![Kernel memory descriptor and memory areas](/data/attachment/album/201802/28/002523i6qh6hj00gageoeg.png)
每个虚拟内存区域（VMA）是一个连续的虚拟地址范围；这些区域绝对不会重叠。一个 [vm\_area\_struct](http://lxr.linux.no/linux+v2.6.28.1/include/linux/mm_types.h#L99) 的实例完整地描述了一个内存区域，包括它的起始和结束地址，[flags](http://lxr.linux.no/linux+v2.6.28/include/linux/mm.h#L76) 决定了访问权限和行为，并且 [vm\_file](http://lxr.linux.no/linux+v2.6.28.1/include/linux/mm_types.h#L150) 域指定了映射到这个区域的文件（如果有的话）。（除了内存映射段的例外情况之外，）一个 VMA 是不能**匿名**映射文件的。上面的每个内存段（比如，堆、栈）都对应一个单个的 VMA。虽然它通常都使用在 x86 的机器上，但它并不是必需的。VMA 也不关心它们在哪个段中。
一个程序的 VMA 在内存描述符中是作为 [mmap](http://lxr.linux.no/linux+v2.6.28.1/include/linux/mm_types.h#L174) 域的一个链接列表保存的，以起始虚拟地址为序进行排列，并且在 [mm\_rb](http://lxr.linux.no/linux+v2.6.28.1/include/linux/mm_types.h#L175) 域中作为一个 [红黑树](http://en.wikipedia.org/wiki/Red_black_tree) 的根。红黑树允许内核通过给定的虚拟地址去快速搜索内存区域。在你读取文件 `/proc/pid_of_process/maps` 时，内核只是简单地读取每个进程的 VMA 的链接列表并[显示它们](http://lxr.linux.no/linux+v2.6.28.1/fs/proc/task_mmu.c#L201)。
在 Windows 中，[EPROCESS](http://www.nirsoft.net/kernel_struct/vista/EPROCESS.html) 块大致类似于一个 task\_struct 和 mm\_struct 的结合。在 Windows 中模拟一个 VMA 的是虚拟地址描述符，或称为 [VAD](http://www.nirsoft.net/kernel_struct/vista/MMVAD.html)；它保存在一个 [AVL 树](http://en.wikipedia.org/wiki/AVL_tree) 中。你知道关于 Windows 和 Linux 之间最有趣的事情是什么吗？其实它们只有一点小差别。
4GB 虚拟地址空间被分配到**页面**中。在 32 位模式中的 x86 处理器中支持 4KB、2MB、以及 4MB 大小的页面。Linux 和 Windows 都使用大小为 4KB 的页面去映射用户的一部分虚拟地址空间。字节 0-4095 在页面 0 中，字节 4096-8191 在页面 1 中，依次类推。VMA 的大小 *必须是页面大小的倍数* 。下图是使用 4KB 大小页面的总数量为 3GB 的用户空间：
![4KB Pages Virtual User Space](/data/attachment/album/201802/28/002524t9zo90jm953oljs5.png)