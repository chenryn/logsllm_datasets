           +-------------+--------------------------------+-----------------------+
           | Preamble    |                                | Access Addr | ... ... |
           |-------------| BLE LL packet                  |-------------|---------|
    ...0 0 | 0xAA        |                                | 4 Bytes     | 6 Bytes |
           +-------------+                                +-----------------------+
此时 RAM 中数据的前 4 个字节就是候选的 access address。
### 理想情况：整体右移 1 bit
BLE LL packet 的 preamble 除了为 0xAA（access address 的 LSBit 为 0），还可能为 0x55（access
address 的 LSBit 为 1）。若此时 base 与 prefix 间没有噪声则， RAM 中 存储的数据如下：
           LSB                      MSB
    +---------------------------------+
    | BASE | PREFIX                   |
    |------|--------------------------| nRF51822 radio packet
    | 0x00 | 0   1 0 1 0 1 0 1 (0xAA) |
    +---------------------------------+--------------------------------+--------------------------------------+
                                      | S0   | LENGTH | S1   | PAYLOAD | STATIC                               |
    Radio packet in RAM               |------|--------|------|---------|--------------------------------------|
                                      | None | None   | None | None    | 10 Bytes                             |
           +--------------------------+--------------------------------+--------------------------------------+
           |   | Preamble without MSB |                                | Preamble MSB | Access Addr | ... ... |
           |--------------------------| BLE LL packet                  |--------------|-------------|---------|
    ...0 0 | 0 | 1 0 1 0 1 0 1        |                                | 0 (0x55)     | 4 Bytes     | 47 bits |
           +--------------------------+                                +--------------------------------------+
           LSB                      MSB                                LSB                                  MSB
此时 RAM 中的 radio packet 会多出一个来自 preamble 0x55 的 MSBit。且这个 preamble MSBit 占用了
RAM 中 radio packet 的 LSBit。所以我们在这种情况下提取 access address 时需要将 RAM 中的 radio
packet 整体右移一位，从而去掉 preamble MSBit。之后，RAM 中 radio packet 的前 4 个 bytes 就是候选的
access address。
### 不理想的情况：需要且仅需要右移 2 bits
由于 noise 的存在，radio packet address 字段的 base 与 prefix 可能并不连续。比如，base 0x00 与
prefix 0xAA 间出现了一个噪音 0 1，此时，nRF51822 在匹配 address 的时候可能发生如下情况：
           LSB                        MSB
    +------------------------------------+
    | BASE | PREFIX                      |
    |------|-----------------------------| nRF51822 radio packet
    | 0x00 | 0 1   0 1 0 1 0 1 (0xAA)    |
    +------------------------------------+--------------------------------+---------------------------------------+
                                         | S0   | LENGTH | S1   | PAYLOAD | STATIC                                |
    Radio packet in RAM                  |------|--------|------|---------|---------------------------------------|
                                         | None | None   | None | None    | 10 Bytes                              |
           +-----------------------------+--------------------------------+---------------------------------------+
           |     | Preamble without MSBs |                                | Preamble MSBs | Access Addr | ... ... |
           |-----------------------------| BLE LL packet                  |---------------|-------------|---------|
    ...0 0 | 0 1 | 0 1 0 1 0 1           |                                | 0 1 (0xAA)    | 4 Bytes     | 46 bits |
           +-----------------------------+                                +---------------------------------------+
           LSB                         MSB                                LSB                                   MSB
在这种情况下 BLE LL packet 的 0xAA preamble 会有两个 bits 进入到 RAM 中。因此我们需要将 RAM 中的 radio
packet 整体右移 2 bits，来剔除它们。之后 RAM 中 radio packet 的前 4 bytes 就为候选的 access
address。
### 不需要右移更多的 bits
Radio packet address 字段的 base 与 prefix 之间除了 0 1 噪声，还能可能存在很多其他的噪声，比如 0 1 0 1：
           LSB                             MSB
    +----------------------------------------+
    | BASE | PREFIX                          |
    |------|---------------------------------| nRF51822 radio packet
    | 0x00 | 0 1 0 1   0 1 0 1 (0xAA)        |
    +----------------------------------------+--------------------------------+----------------------------------------+
                                             | S0   | LENGTH | S1   | PAYLOAD | STATIC                                 |
    radio packet in RAM                      |------|--------|------|---------|----------------------------------------|
                                             | None | None   | None | None    | 10 Bytes                               |
           +---------------------------------+--------------------------------+----------------------------------------+
           |         | Preamble without MSBs |                                | Preamble MSBs  | Access Addr | ... ... |
           |---------------------------------| BLE LL packet                  |----------------|-------------|---------|
    ...0 0 | 0 1 0 1 | 0 1 0 1               |                                | 0 1 0 1 (0xAA) | 4 Bytes     | 46 bits |
           +---------------------------------+                                +----------------------------------------+
           LSB                             MSB                                LSB                                    MSB
不过这种情况发生的概率较低，最多为 1/8 * 0.1，不值得我们占用 Cortex-M0 来右移 4 位做进一步处理（后续会对这种情况做进一步解释）。
> 概率数据参考 reference 4。
另外，若 base 与 prefix 之间的噪声为奇数个 bits（>= 3），匹配窗口会自动帮我们处理：
  * 若在 …0 0 与 0 1 0 1 0 1 0 1 之间加入噪声后，无法从头匹配 address（类似 high-low toggling），则匹配窗口会自动忽略它们直到匹配到新的 address。
  * 若在 …0 0 与 0 1 0 1 0 1 0 1 之间加入噪声后可以从头匹配 address，则会回归到偶数个噪声 bits 的情况。证明如下：令噪声导致的奇数个比特从 LSB 到 MSB 组成了名为 noise_bits 的 list。为了匹配 address（再次说明类似 high-low toggling），则必须有 noise_bits[0] == 1 and noise_bits[-1] == 1。由于 noise_bits[0] 为 1 时，与 base 中的 MSB 0 再次组成了 high-low toggling（address 的一部分），所以此时 address 将永远不可能从 noise_bits[0] 开始匹配，而会从 …0 0 序列的 MSB 开始匹配，及 noise_bits[0] 匹配了 address 的倒数第二低的 bit。于是噪声 bits 数被加 1。又奇数加 1 必定成为偶数。所以证明了原命题。
## 使用 BLE LL Data Channel Empty PDU 过滤候选的 Access Address
有两个我们不能忽视的问题：
  * 若真的在 base …0 0 与 prefix 0 1 0 1 0 1 0 1 之间出现了，(0 1)… 这种较小概率噪声怎么办？
  * 噪声除了在 base 与 prefix 之间出现，还可能在 prefix 中间以及 access address 或 BLE LL data channel PDU 中出现。这种情况又怎么处理。
如果噪声在 prefix 中间出现，且导致无法匹配 address，nRF51822 将抛弃这些数据并尝试与新的空中数据匹配 address 字段 0x00
0xAA。如果噪声在 prefix 中出现，且正好从头匹配了 address，那么又回到了偶数个噪声 bits 出现在 base 与 prefix
之间的情况。对于 (0 1)… 这种小概率噪声，以及出现在 radio packet paylaod 中的噪声，我们通过判断除去 access
address 的 payload 是否为 BLE LL data channel empty PDU 来确定 access address
的有效性。如果是，那么就认为 access address 是有效的。反之，则 access address 无效。可以下判断的原因是，加入 noise
后的 payload 还能正好组成完整的 empty PDU 是一个极小概率事件。
## 情形一
    +--------------+-------+-----------------------+
    | Noise        | Noise | BASE (1 B) | PREFIX   |
    |--------------|-------|------------|----------| nRF51822 On-air packet layout
    | 0xAA or 0x55 | 'x'   | 0x00       | 0xAA     |
    +--------------+-------+-----------------------+--------------------------------+-------------------------------------------+
                                                   | S0   | LENGTH | S1   | PAYLOAD | STATIC                                    |
    Radio packet in RAM                            |------|--------|------|---------|-------------------------------------------|
                                                   | None | None   | None | None    | 10 Bytes                                  |
                                        +----------+--------------------------------+-------------------------------------------+
                                        | Preamble |                                | Access Addr  | PDU Header | Payload | CRC |
    BLE LL packet                       |----------|                                |--------------|------------|---------|-----|
                                        | 0xAA     |                                | 4 Bytes      | 2 Bytes    | None    | 3 B |
                                        +----------+                                +-------------------------------------------+
## References
  1. Promiscuity is the nRF24L01+’s Duty
  2. nRF24L01+ Single Chip 2.4GHz Transceiver Product Specification v1.0, 7.3.7 Automatic packet disassembly
  3. BLUETOOTH SPECIFICATION Version 4.2, [Vol 6, Part A] page 19, 4 RECEIVER CHARACTERISTICS
  4. BLUETOOTH SPECIFICATION Version 4.2, [Vol 6, Part A] page 19, 4.1 ACTUAL SENSITIVITY LEVEL
  5. DEF CON 25 – Damien Cauquil – Weaponizing the BBC Micro Bit
  6. DEF CON 26 – Damien virtualabs Cauquil – You had better secure your BLE devices
  7. virtualabs/btlejack-firmware
  8. virtualabs/btlejack