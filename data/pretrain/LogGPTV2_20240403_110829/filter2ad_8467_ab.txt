    OGNL("ognl", new V8AttackChecker(), 1  classesSet = AnnotationScanner.getClassWithAnnotation(SCAN_ANNOTATION_PACKAGE, HookAnnotation.class);
        for (Class clazz : classesSet) {
            try {
                Object object = clazz.newInstance();
                if (object instanceof AbstractClassHook) {
                    addHook((AbstractClassHook) object, clazz.getName());
                }
            } catch (Exception e) {
                LogTool.error(ErrorType.HOOK_ERROR, "add hook failed: " + e.getMessage(), e);
            }
        }
    }
addAnnotationHook()读取了com.baidu.openrasp.hook包中所有被@HookAnnotation注解的class，然后缓存到集合hooks中，如下图所示
这个hooks用来提供在后续类加载通过com.baidu.openrasp.transformer.CustomClassTransformer#transform的时候，对其进行匹配，判断是否需要hook
    //com.baidu.openrasp.transformer.CustomClassTransformer
    public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined,
                            ProtectionDomain domain, byte[] classfileBuffer) throws IllegalClassFormatException {
        if (loader != null) {
            DependencyFinder.addJarPath(domain);
        }
        if (loader != null && jspClassLoaderNames.contains(loader.getClass().getName())) {
            jspClassLoaderCache.put(className.replace("/", "."), new SoftReference(loader));
        }
        for (final AbstractClassHook hook : hooks) {
            if (hook.isClassMatched(className)) {
                CtClass ctClass = null;
                try {
                    ClassPool classPool = new ClassPool();
                    addLoader(classPool, loader);
                    ctClass = classPool.makeClass(new ByteArrayInputStream(classfileBuffer));
                    if (loader == null) {
                        hook.setLoadedByBootstrapLoader(true);
                    }
                    classfileBuffer = hook.transformClass(ctClass);
                    if (classfileBuffer != null) {
                        checkNecessaryHookType(hook.getType());
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                } finally {
                    if (ctClass != null) {
                        ctClass.detach();
                    }
                }
            }
        }
        serverDetector.detectServer(className, loader, domain);
        return classfileBuffer;
    }
    //com.baidu.openrasp.hook.AbstractClassHook
    public byte[] transformClass(CtClass ctClass) {
        try {
            hookMethod(ctClass);
            return ctClass.toBytecode();
        } catch (Throwable e) {
            if (Config.getConfig().isDebugEnabled()) {
                LOGGER.info("transform class " + ctClass.getName() + " failed", e);
            }
        }
        return null;
    }
transform方法先根据hook.isClassMatched(String
className)方法判断当前类名是否在hooks集合中，进而判断是否对加载的class进行hook。  
接着调用的是hook类的`transformClass(CtClass ctClass)`->`hookMethod(CtClass
ctClass)`方法进行了字节码的修改（hook），然后返回修改后的字节码并加载，最终实现了对class进行插桩。  
这里依旧拿`com.baidu.openrasp.hook.ssrf.HttpClientHook`类举例说明transform()方法的流程  
这里hook的类在[commit-d437](https://github.com/baidu/openrasp/commit/d437f9eb789b0345079a219b7c4144473d39bf5b)中由`org/apache/http/client/methods/HttpRequestBase`修改为`org/apache/http/impl/client`包下的`CloseableHttpClient`、`AutoRetryHttpClient`、`DecompressingHttpClient`和`AbstractHttpClient`这四个方法。  
所以当当前className等于其中之一时，进入if语句进行hook。  
进入if语句，通过`transformClass(CtClass
ctClass)`方法调用`HttpClientHook#hookMethod`，这个方法也在上面的commit中进行同步的修改
    protected void hookMethod(CtClass ctClass) throws IOException, CannotCompileException, NotFoundException {
        CtClass[] interfaces = ctClass.getInterfaces();
        if (interfaces != null) {
            for (CtClass inter : interfaces) {
                // 兼容 http client 4.0 版本的 AbstractHttpClient
                if (inter.getName().equals("org.apache.http.client.HttpClient")) {
                    LinkedList methods =
                            getMethod(ctClass, "execute", null, null);
                    String afterSrc = getInvokeStaticSrc(HttpClientHook.class, "exitCheck",
                            "$1,$_", Object.class, Object.class);
                    for (CtBehavior method : methods) {
                        if (method.getSignature().startsWith("(Lorg/apache/http/client/methods/HttpUriRequest")) {
                            String src = getInvokeStaticSrc(HttpClientHook.class,
                                    "checkHttpUri", "$1", Object.class);
                            insertBefore(method, src);
                            insertAfter(method, afterSrc, true);
                        } else if (method.getSignature().startsWith("(Lorg/apache/http/HttpHost")) {
                            String src = getInvokeStaticSrc(HttpClientHook.class,
                                    "checkHttpHost", "$1", Object.class);
                            insertBefore(method, src);
                            insertAfter(method, afterSrc, true);
                        }
                    }
                    break;
                }
            }
        }
    }
    public static void checkHttpUri(Object uriValue) {
        if (!isChecking.get() && uriValue != null) {
            isChecking.set(true);
            URI uri = (URI) Reflection.invokeMethod(uriValue, "getURI", new Class[]{});
            checkHttpUrl(getSsrfParamFromURI(uri));
        }
    }
    public static void checkHttpHost(Object host) {
        if (!isChecking.get() && host != null) {
            isChecking.set(true);
            checkHttpUrl(getSsrfParamFromHostValue(host));
        }
    }
    public static void exitCheck(Object uriValue, Object response) {
        try {
            if (isChecking.get() && response != null) {
                URI redirectUri = HttpClientRedirectHook.uriCache.get();
                if (redirectUri != null) {
                    HashMap params = getSsrfParam(uriValue);
                    if (params != null) {
                        HashMap redirectParams = getSsrfParamFromURI(redirectUri);
                        if (redirectParams != null) {
                            AbstractRedirectHook.checkHttpClientRedirect(params, redirectParams, response);
                        }
                    }
                }
            }
        } finally {
            isChecking.set(false);
            HttpClientRedirectHook.uriCache.set(null);
        }
    }
可以清晰的看到对于`org.apache.http.client.HttpClient`这个接口中参数包含`org.apache.http.client.methods.HttpUriRequest`类型的`exitCheck()`方法，会在其方法体前插入`checkHttpUri()`代码，并在最后插入`exitCheck()`代码进行收尾工作；  
对于这个接口中参数包含`org.apache.http.HttpHost`类型的`exitCheck()`方法，会在其方法体前插入`checkHttpHost()`代码，并在最后插入`exitCheck()`代码进行收尾工作。  
这两个hook方法都会调用`checkHttpUrl()`方法，对检测ssrf的js插件进行调用以检测攻击。  
调用流程没变，这里直接搬一下三梦师傅的流程汇总（注释有部分增减）：
    1. com.baidu.openrasp.hook.ssrf.AbstractSSRFHook#checkHttpUrl
    2. com.baidu.openrasp.HookHandler#doCheck
    3. com.baidu.openrasp.HookHandler#doCheckWithoutRequest
    在这里，做了一些云控注册成功判断和白名单的处理。
    这里有两个注意点：
    （1）当服务器的cpu使用率超过90%，禁用全部hook点。（这里能否DDOS，让CPU高负载，使用率超过90%，禁用全部hook点？）（2）当云控注册成功之前，不进入任何hook点
    4. com.baidu.openrasp.HookHandler#doRealCheckWithoutRequest
    在这里，做了一些参数的封装，以及失败日志、耗时日志等输出，并且在检测到攻击时（下一层返回），抛出异常
    5. com.baidu.openrasp.plugin.checker.CheckerManager#check
    6. com.baidu.openrasp.plugin.checker.AbstractChecker#check
    在这里，对js或者其他类型的安全检测之后的结果，进行事件处理并返回结果
    7. com.baidu.openrasp.plugin.checker.v8.V8AttackChecker#checkParam
    8.com.baidu.openrasp.plugin.js.JS#Check
    在这里，做了一些commonLRUCache的并发幂等处理
    9.com.baidu.openrasp.v8.V8#Check(java.lang.String, byte[], int, com.baidu.openrasp.v8.Context, boolean, int)
    因为在UpdatePlugin()中就读取plugins目录下的js文件并加载到V8引擎中，在InitFileWatcher()中初始化一个js plugin监视器，在js文件有所变动的时候，重新去加载所有插件，实现热更新的特性。所以这里就相当于要使用v8引擎调用之前写好的js进行check。
总结一下，OpenRASP工作流程为：（配置文件那些暂不描述）
  1. 准备阶段：
    * 将漏洞进行分类，然后加上`@HookAnnotation`注解，并重写`isClassMatched()`方法，然后将所有带有`@HookAnnotation`注解的类添加到hooks集合中。这样在执行到相应的底层类时能够根据`hook.isClassMatched()`的返回值判断是否需要hook。
    * 初始化v8引擎，并将js加载到其中，同时初始化一个js plugin监视器以实现热更新。
  2. 检测阶段：
    * 对于当前类属于准备阶段中设置的hooks集合中时，进行hook操作。具体的hook形式在hook.hookMethod()方法中实现，比如`HttpClientHook#hookMethod()`对包含不同参数的`org.apache.http.client.HttpClient#execute`方法添加不同的代码。
      * 添加不同的check代码后最终都会执行诸如doCheck、checkParam等方法，其中在v8引擎中调用js，实现对不同攻击的检测。
## 后续
后续会考虑相关绕过方式，比如到官网查找不常用的、危险的底层函数，绕过OpenRASP的hook；绕过OpenRASP设置的规则；之前也有师傅通过开启新线程，在新线程中进行命令执行的方式绕过OpenRASP，或是通过全局的Hook开关关闭rasp。
## Reference