nel density estimators using Scott’s rule [28] on intercell
timing, and found that the resulting probability density
functions overlapped signiﬁcantly. Experimentally, we
Figure 7: 100 random intercell times from each of 50 top
pages. Each cross represents an intercell time. Note that
the y-axis is logarithmic.
found that the attacker could only achieve a maximum
2% accuracy on the top 100 pages by choosing the most
likely page for each sampled intercell timing value.
To illustrate this point visually, we plotted 100 ran-
dom intercell times from each of the top 50 pages4 in
Figure 7, in ascending order of mean intercell times. Fig-
ure 7 suggests that intercell times vary signiﬁcantly, but
their patterns are not noticeably different across different
sites. This shows that individual intercell times are not
correlated with the true page of a cell sequence.
Equalizing intercell timing
We have nevertheless designed an extension of WT to
hide all timing information, though this comes at the cost
of a greater bandwidth and time overhead.
One solution would be to have the proxy behave the
same way as the client:
it queues all received cells in
each burst until the servers have sent all of their data,
and sends them all at once back to the client.
In this
case, timing would contain no information, and this can
be implemented with a small time overhead and no band-
width overhead. However, this implementation may not
be practical, because it would require proxies to read
client cells to determine when bursts end.
Our timing ﬁx is inspired by a similar mechanism in
Tamaraw. We choose a ﬁxed cell rate rcontrol such that
whenever it is the proxy’s turn to send data, the proxy
attempts to deliver rcontrol incoming cells per second. If
there is no data to send when a cell is due, the proxy
generates a dummy cell, which will be dropped by the
client. This covers the incoming intercell timing leak
as the intercell time will always be rcontrol for incoming
cells. Varying rcontrol, we evaluate the added overhead of
timing control in Figure 8. For example, we can equalize
intercell timing at a cost of 50% bandwidth overhead and
36% time overhead.
We can use the same dummy cells described in Sec-
tion 4.3 for both burst molding and equalizing intercell
timing, without compromising either objective. This
4We used 50 pages instead of our full 100 pages so that the graph
would be clear.
USENIX Association
26th USENIX Security Symposium    1387
 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6Maximum PrecisionBandwidth overhead 1e-06 1e-05 0.0001 0.001 0.01 0.1 1 0 10 20 30 40 50Intercell Time (s)Site numberAcknowledgements
We thank our shepherd, Scott Coull, for his help in shap-
ing the ﬁnal version of this paper, and the anonymous re-
viewers for their helpful comments. This work beneﬁtted
from the use of the CrySP RIPPLE Facility at the Uni-
versity of Waterloo. We thank NSERC for grant RGPIN-
341529.
References
[1] Alexa — The Web Information Company. www.alexa.com.
[2] G. D. Bissias, M. Liberatore, D. Jensen, and B. N. Levine. Pri-
vacy Vulnerabilities in Encrypted HTTP Streams. In Privacy En-
hancing Technologies, pages 1–11. Springer, 2006.
[3] D. Brumley and D. Boneh. Remote timing attacks are practical.
In Proceedings of the 12th USENIX Security Symposium, 2003.
[4] X. Cai, R. Nithyanand, and R. Johnson. CS-BuFLO: A Conges-
In Proceedings
tion Sensitive Website Fingerprinting Defense.
of the 13th ACM Workshop on Privacy in the Electronic Society,
2014.
[5] X. Cai, R. Nithyanand, T. Wang, I. Goldberg, and R. Johnson.
A Systematic Approach to Developing and Evaluating Website
Fingerprinting Defenses. In Proceedings of the 21st ACM Con-
ference on Computer and Communications Security, 2014.
[6] X. Cai, X. Zhang, B. Joshi, and R. Johnson. Touching from a
Distance: Website Fingerprinting Attacks and Defenses. In Pro-
ceedings of the 19th ACM Conference on Computer and Commu-
nications Security, pages 605–616, 2012.
[7] H. Cheng and R. Avnur. Trafﬁc Analysis of SSL-Encrypted
http://www.cs.berkeley.edu/
Web Browsing.
˜daw/teaching/cs261-f98/projects/final-
reports/ronathan-heyning.ps, 1998.
[8] K. Dyer, S. Coull, T. Ristenpart, and T. Shrimpton. Peek-a-Boo,
I Still See You: Why Efﬁcient Trafﬁc Analysis Countermeasures
Fail. In Proceedings of the 2012 IEEE Symposium on Security
and Privacy, pages 332–346, 2012.
[9] P. Eckersley. How unique is your web browser?
Enhancing Technologies, pages 1–18, 2010.
In Privacy
[10] R. Fielding and J. Reschke. Hypertext transfer protocol (http/1.1):
Message syntax and routing. 2014.
[11] G. Greenwald. NSA Prism program taps in to user data of Apple,
http://www.theguardian.com/
Google and others.
world/2013/jun/06/us-tech-giants-nsa-data,
June 2013. Accessed Apr. 2015.
[12] J. Hayes and G. Danezis. k-Fingerprinting: A Robust Scalable
In Proceedings of the 25th
Website Fingerprinting Technique.
USENIX Security Symposium, 2016.
[13] D. Herrmann, R. Wendolsky, and H. Federrath. Website Fin-
gerprinting: Attacking Popular Privacy Enhancing Technologies
with the Multinomial Na¨ıve-Bayes Classiﬁer. In Proceedings of
the 2009 ACM Workshop on Cloud Computing Security, pages
31–42, 2009.
[14] M. Juarez, S. Afroz, G. Acar, C. Diaz, and R. Greenstadt. A Criti-
cal Evaluation of Website Fingerprinting Attacks. In Proceedings
of the 21st ACM Conference on Computer and Communications
Security, 2014.
[15] M. Liberatore and B. Levine. Inferring the Source of Encrypted
In Proceedings of the 13th ACM Confer-
HTTP Connections.
ence on Computer and Communications Security, pages 255–
263, 2006.
Figure 8: Possible bandwidth and time overhead cost for
equalizing intercell timing, obtained by varying rcontrol.
means that, effectively, the bandwidth overhead values
for timing control and burst molding do not add to-
gether in WT; instead, the maximum of the two becomes
the bandwidth overhead of WT. The overhead of WT
with intercell timing equalized would be 50% bandwidth
overhead and 66% time overhead, which is still much
lower than known defenses (Table 4).
7 Conclusion
In this paper, we presented Walkie-Talkie: a ﬂexible,
easy-to-use defense with low overhead that can defend
web clients against all website ﬁngerprinting attacks.
Walkie-Talkie consists of two components: half-duplex
communication and burst molding. Half-duplex commu-
nication produces burst sequences that are concise and
easy to manipulate, which allows burst molding to mimic
non-sensitive web pages at minimal overhead. Walkie-
Talkie is highly effective against all known attacks at
overhead costs much lower than all known effective de-
fenses. Furthermore, it is capable of defending against all
possible WF attacks, because pairs of sensitive and non-
sensitive web pages will be molded to the same cell se-
quence under WT. We have implemented Walkie-Talkie
so that it functions on the Tor client and Tor nodes: in
general, it can be implemented on any proxy network
(such as VPNs).
We also considered advanced attackers beyond previ-
ous work in website ﬁngerprinting, who are able to lever-
age site link information, page visit rates, and timing in-
formation to strengthen their attacks. Walkie-Talkie can
defend against all these types of attacks effectively, as it
gives the client the freedom to choose which pages to use
as decoys. It remains to be seen whether Walkie-Talkie
would be useful as well against other advanced attacks,
such as active adversaries and dynamic content identiﬁ-
cation.
1388    26th USENIX Security Symposium
USENIX Association
 0 20 40 60 80 100 20 40 60 80 100Time Overhead (%)Bandwidth Overhead (%)[16] L. Lu, E.-C. Chang, and M. C. Chan. Website Fingerprinting and
In Computer
Identiﬁcation Using Ordered Feature Sequences.
Security–ESORICS 2010, pages 199–214. Springer, 2010.
[17] X. Luo, P. Zhou, E. W. Chan, W. Lee, R. K. Chang, and
R. Perdisci. HTTPOS: Sealing Information Leaks with Browser-
side Obfuscation of Encrypted Flows. In Proceedings of the 18th
Network and Distributed Security Symposium, 2011.
[18] B. Miller, L. Huang, A. D. Joseph, and J. D. Tygar. I know why
you went to the clinic: Risks and realization of https trafﬁc anal-
ysis. In Privacy Enhancing Technologies, pages 143–163, 2014.
[19] S. J. Murdoch and G. Danezis. Low-Cost trafﬁc analysis of Tor.
In Security and Privacy, 2005 IEEE Symposium on, pages 183–
195, 2005.
[20] R. Nithyanand, X. Cai, and R. Johnson. Glove: A Bespoke Web-
In Proceedings of the 13th ACM
site Fingerprinting Defense.
Workshop on Privacy in the Electronic Society, 2014.
[21] Y. Oren, V. P. Kemerlis, S. Sethumadhavan, and A. D. Keromytis.
The spy in the sandbox: Practical cache attacks in javascript and
their implications. In Proceedings of the 22nd ACM Conference
on Computer and Communications Security, 2015.
[22] A. Panchenko, F. Lanze, A. Zinnen, M. Henze, J. Pennekamp,
K. Wehrle, and T. Engel. Website ﬁngerprinting at internet scale.
In Proceedings of the 23rd Network and Distributed System Se-
curity Symposium, 2016.
[23] A. Panchenko, L. Niessen, A. Zinnen, and T. Engel. Website Fin-
gerprinting in Onion Routing Based Anonymization Networks. In
Proceedings of the 10th ACM Workshop on Privacy in the Elec-
tronic Society, pages 103–114, 2011.
[24] M. Perry. Experimental Defense for Website Trafﬁc Finger-
https://blog.torproject.org/blog/
printing.
experimental-defense-website-traffic-
fingerprinting, September 2011. Accessed Feb. 2015.
[25] M. Perry.
TBB’s Firefox should use optimistic data socks
handshake variant.
https://trac.torproject.org/
projects/tor/ticket/3875, August 2011. Accessed
Apr. 2015.
[26] M. Perry. A Critique of Website Trafﬁc Fingerprinting Attacks.
https://blog.torproject.org/blog/critique-
website-traffic-fingerprinting-attacks,
November 2013. Accessed Feb. 2015.
[27] R. Schuster, V. Shmatikov, and E. Tromer. Beauty and the burst:
Remote identiﬁcation of encrypted video streams. 2017.
[28] D. W. Scott. Multivariate Density Estimation: Theory, Practice,
and Visualization. John Wiley & Sons, 2015.
[29] V. Shmatikov and M.-H. Wang. Timing analysis in low-latency
In Computer Security–
mix networks: Attacks and defenses.
ESORICS 2006, pages 18–33. 2006.
[30] Q. Sun, D. R. Simon, Y.-M. Wang, W. Russell, V. N. Padman-
abhan, and L. Qiu. Statistical Identiﬁcation of Encrypted Web
Browsing Trafﬁc. In Proceedings of the 2002 IEEE Symposium
on Security and Privacy, pages 19–30. IEEE, 2002.
[31] T. Wang, X. Cai, R. Nithyanand, R. Johnson, and I. Goldberg.
Effective Attacks and Provable Defenses for Website Fingerprint-
In Proceedings of the 23rd USENIX Security Symposium,
ing.
2014.
[32] T. Wang and I. Goldberg. Improved Website Fingerprinting on
Tor. In Proceedings of the 12th ACM Workshop on Privacy in the
Electronic Society, pages 201–212, 2013.
[33] T. Wang and I. Goldberg. On Realistically Attacking Tor with
In Privacy Enhancing Technologies.
Website Fingerprinting.
Springer, 2016.
[34] C. Wright, S. Coull, and F. Monrose. Trafﬁc Morphing: An Efﬁ-
cient Defense against Statistical Trafﬁc Analysis. In Proceedings
of the 16th Network and Distributed Security Symposium, pages
237–250, 2009.
A Removing the need for client informa-
tion
One limitation of burst molding is that the client needs to
know the burst sequences of some non-sensitive pages.
While it is highly practical to deliver such information
to clients on an anonymity network like Tor (see Sec-
tion 4.3.1), we have also designed a variation of Walkie-
Talkie that is useful on networks where there may not be
a party that can deliver burst sequence information.
In this variation of Walkie-Talkie, burst molding is
random: instead of adding cells according to the superse-
quence of sensitive and non-sensitive pages, we add cells
randomly. We refer to this variation of Walkie-Talkie
as Random-WT. Random-WT is less efﬁcient, but it can
also defend against all possible WF attacks.
A.1 Design of Random-WT
Given a cell sequence s = (b1,b2,b3, ...,b|s|) with bi =
(bi+,bi−), we apply defense D as follows to produce
D(s):
1. Padding real bursts: From two uniform distributions
Xi+ and Xi−, we draw xi+ and xi− respectively, and
add them to bi, such that ˆbi = (bi+ + xi+,bi− + xi−).
2. Adding fake bursts: From two uniform distributions
Xid+ and Xid−, we draw xid+ and xid−, and generate
a new fake burst ˆbi = (xid+,xid−). In a fake burst, all
outgoing and incoming cells are fake cells. We add
fake bursts at random with probability p f ake before
each real burst of cells.
Random-WT is therefore deﬁned by the bounds of the
uniform distributions Xi+, Xi−, Xid+, Xid−, as well as the
probability p f ake. We chose uniform distributions after
preliminary experiments and analysis indicated that uni-
form distributions are highly efﬁcient at defending burst
sequences. The freedom of choice allows Random-WT
to be tunable (i.e., a client may wish to increase collision
rate by increasing overhead).
The fact that any burst in an observed cell sequence is
equally likely to be fake is a powerful feature of Random-
WT. In practice, we found that many cell sequences have
multiple bursts with few cells and one or two large bursts
with many cells. Random-WT covers the position of
large bursts in the cell sequence, so that they cannot be
leveraged by the attacker.
USENIX Association
26th USENIX Security Symposium    1389
communication, the Tor code that modiﬁes the Tor
client to enable molding, and our experiment code
for WT.
• Our experimental data sets: the cell sequences we
collected over Tor with and without half-duplex
communication.
• Our implementations of previous attacks and de-
fenses.
The code and data are available at
https://crysp.uwaterloo.ca/software/
webfingerprint/.
Figure 9: Bandwidth overhead and MAA for Random-
WT, WT and Tamaraw across a range of parameters. No
WF attack can achieve a classiﬁcation accuracy above
the MAA.
Fake bursts should be similar in length to real bursts so
as to maximize collision; we do not want the attacker to
be able to distinguish between real bursts and fake bursts
with high accuracy. In our experiments, we set the lower
bound of the uniform distributions for Xi+, Xi−, Xid+, and
Xid− to be 0. This minimizes overhead without affecting
effectiveness. We set Xid+ and Xid− to ﬁt the observed
burst sizes of real cell sequences. Then, we vary the max-
imum range of Xi+ and Xi−, as well as p f ake, to obtain
a range of overhead and effectiveness values, which we
present below.
A.2 Experimental analysis of Random-WT
We analyze the MAA of Random-WT using the same
experimental methodology in Section 5.4. We draw Fig-
ure 9 by taking Figure 3 and adding a line for Random-
WT to compare with basic WT and Tamaraw. Figure 9
does not plot the time overhead, which is around 30%
throughout the graph for both Random-WT and WT, and
ranging from 130% to 350% for Tamaraw.
Though Figure 9 shows that the MAA of Random-WT
is worse than both WT and Tamaraw, it is still signiﬁ-
cant enough to confuse an attacker, especially if the at-
tacker needs a low false positive rate (for example, when
attempting to identify accesses to rare pages). An ad-
vantage of both WT and Random-WT over Tamaraw is
that they are not sensitive to network conditions; pre-
vious work has shown that Tamaraw performs worse
than expected if network conditions are not correctly pre-
dicted [4].
B Publication of code and data
To ensure that our results can be reproduced, we publish
the following:
• Our implementation of Walkie-Talkie: the Firefox
code that modiﬁes the browser to enable half-duplex
1390    26th USENIX Security Symposium
USENIX Association
 0 0.2 0.4 0.6 0.8 1 0 40 80 120 160MAA (TPR)Bandwidth Overhead (%)Random-WTTamarawWT