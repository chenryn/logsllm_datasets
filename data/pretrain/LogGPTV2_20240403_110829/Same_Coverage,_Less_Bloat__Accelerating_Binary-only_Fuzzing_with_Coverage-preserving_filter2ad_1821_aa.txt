# Title: Same Coverage, Less Bloat: Accelerating Binary-only Fuzzing with Coverage-preserving Coverage-guided Tracing

## Authors:
- Stefan Nagy, Virginia Tech, Blacksburg, Virginia
- Anh Nguyen-Tuong, University of Virginia, Charlottesville, Virginia
- Jason D. Hiser, Virginia Tech, Blacksburg, Virginia
- Jack W. Davidson, University of Virginia, Charlottesville, Virginia
- Matthew Hicks, Virginia Tech, Blacksburg, Virginia

## Abstract
Coverage-guided fuzzing, with its aggressive and high-volume testing, has been instrumental in uncovering tens of thousands of software security flaws. However, the need for fast code coverage tracing in binary-only targets often leads to reduced performance. A recent advancement, Coverage-guided Tracing (CGT), significantly improves throughput by limiting coverage tracing to instances where new coverage is guaranteed. Unfortunately, CGT is currently limited to basic block coverage, while most modern fuzzers require finer-grained metrics such as edge coverage and hit counts. This limitation prevents state-of-the-art fuzzers from benefiting from CGT's performance gains.

This paper addresses the challenge of adapting CGT to support the most common coverage metrics used in fuzzing. We introduce and implement a suite of enhancements that extend CGT's introspection to include edge coverage and hit counts, while maintaining its significant speedup over traditional always-on coverage tracing. Our evaluation across 12 diverse real-world binaries (8 open-source and 4 closed-source) shows that our coverage-preserving CGT achieves near-identical speed to the current block-coverage-only CGT (UnTracer) and outperforms leading binary- and source-level coverage tracers (QEMU, Dyninst, RetroWrite, and AFL-Clang) by 2–24×, finding more bugs in less time.

## CCS Concepts
- **Security and Privacy** → Software and Application Security

## Keywords
- Fuzzing
- Binaries
- Code Coverage

## 1. Introduction
Coverage-guided fuzzing has become a popular and effective technique for software security auditing. Its high-volume testing strategy has revealed numerous security vulnerabilities and helped secure many widely-used codebases. Today, software projects of all sizes rely on fuzzing to identify and mitigate bugs and vulnerabilities throughout the development lifecycle.

Fuzzing involves three main steps: (1) test case generation, (2) code coverage tracing, and (3) test case triage. Many works focus on improving test case generation through input grammars, path prioritization, better mutators, or constraint solving, while others refine triage with sanitizers or other heuristics. Given the core goal of executing a large volume of test cases, maintaining high-performance execution is critical. Recent studies show that both "dumb" and "smart" fuzzers spend most of their time executing test cases and collecting coverage traces. In binary-only fuzzing, the semantically-poor and opaque nature of binaries makes tight integration of coverage-tracing routines challenging, leading to tracing overheads up to two orders of magnitude higher than in source-available contexts. Even with highly optimized black-box instrumenters, coverage tracing can increase test case execution time by about 30%.

To address this performance gap, many binary-only fuzzing efforts are adopting an on-demand tracing strategy called Coverage-guided Tracing (CGT). CGT restricts tracing to only when new coverage is guaranteed, increasing fuzzing throughput by 500–600% over leading binary-only tracers. However, CGT currently supports only basic block coverage, while most fuzzers require finer-grained metrics such as edge coverage and hit counts. This lack of support inhibits CGT's adoption in nearly all fuzzers, leaving their full performance potential unrealized.

This paper extends CGT to support the most common coverage metrics—edges and hit counts—making high-performance tracing available for all existing and future fuzzers. Our key contributions include:

- **Jump Mistargeting**: A zero-overhead strategy that addresses the most common form of critical edges while keeping control flow intact.
- **Branch Splitting**: A low-overhead binary-only implementation that eliminates critical edges through block insertion.
- **Bucketed Unrolling**: A technique that clones loop conditions at discrete intervals, enabling near-native speed hit count tracking.

We implement these enhancements in HeXcite, a coverage-preserving CGT, and evaluate it against UnTracer, QEMU, Dyninst, RetroWrite, and AFL-Clang. Across 12 diverse real-world binaries, HeXcite achieves throughput near-identical to UnTracer, 3–24× that of conventional always-on binary-only tracers, and 2.8× that of source-level tracing with AFL-Clang. HeXcite also finds 12–749% more unique bugs and 16 known bugs and vulnerabilities in 32–52% less time.

Through these contributions, we enable the use of the fastest tracing approach in fuzzing—Coverage-guided Tracing—by the majority of today’s fuzzers.

## 2. Background
To understand our improvements to CGT, it is essential to understand the core details of coverage-guided fuzzing, its code coverage metrics, and the high-performance tracing strategy known as Coverage-guided Tracing.

### 2.1 Software Fuzzing
Software fuzzing is one of the most popular approaches for software quality assurance, particularly for security auditing. Unlike other forms of software testing, fuzzing focuses on generating and feeding test cases to the target program, monitoring for signs of security violations. Fuzzing encompasses various techniques, with the most common distinction being the search strategy. Directed fuzzers constrain testing to specific code or paths, while guided fuzzers aim to maximize the program's state space along pre-specified metrics. The most common and successful form of fuzzing is coverage-guided fuzzing, which aims to maximize test cases' code coverage to uncover hidden program bugs.

### 2.2 Coverage-guided Fuzzing
Coverage-guided fuzzing is widely popular due to its scalability, ease of adoption, and proven effectiveness. The typical workflow consists of:

1. **Generation**: Genetic algorithms create batches of candidate test cases from one or more ancestors.
2. **Coverage Tracing & Execution Monitoring**: Lightweight instrumentation captures each test case's runtime code coverage and monitors other execution behavior.
3. **Triage**: Candidates are grouped based on observed execution behavior; those increasing coverage are preserved for future mutation, while those triggering crashes are deduplicated for manual bug analysis.

### 2.3 Fuzzing’s Code Coverage Metrics
Coverage-guided fuzzing collects dynamic code coverage and mutates only those test cases that attain new coverage. Our survey of 27 state-of-the-art fuzzers identifies three universal coverage metrics: basic blocks, edges, and hit counts.

- **Basic Blocks**: Instruction sequences ending in control-flow transfer.
- **Edges**: Transitions between blocks.
- **Hit Counts**: Execution frequencies, often tracked using bucketed unrolling to avoid oversaturation.

### 2.4 Coverage-guided Tracing
Recent works have improved fuzzing with smarter test case generation and triage. However, the maximal performance of fuzzers is constrained by the need to trace code coverage for all test cases, even though less than 1 in 10,000 actually increase coverage. This is particularly problematic for binary-only fuzzing, where tracing is costly. To address this, several binary-only fuzzing efforts are adopting Coverage-guided Tracing (CGT), which restricts tracing to only the < 0.01% of test cases that increase coverage.

## 3. Contributions
- **Jump Mistargeting**: A control-flow redirection strategy that self-reports edge coverage at native speed.
- **Bucketed Unrolling**: A technique that clones loop conditions at discrete intervals, enabling near-native speed hit count tracking.
- **Evaluation**: Demonstrates that our coverage-preserving CGT outperforms block-only CGT and conventional always-on tracers in edge coverage, loop coverage, and bug-finding effectiveness.

## 4. Implementation and Evaluation
We implement our coverage-preserving CGT, HeXcite, and evaluate it against UnTracer, QEMU, Dyninst, RetroWrite, and AFL-Clang. Across 12 diverse real-world binaries, HeXcite achieves near-identical throughput to UnTracer, 3–24× that of conventional always-on binary-only tracers, and 2.8× that of source-level tracing with AFL-Clang. HeXcite also finds 12–749% more unique bugs and 16 known bugs and vulnerabilities in 32–52% less time.

## 5. Conclusion
This paper enables the use of the fastest tracing approach in fuzzing—Coverage-guided Tracing—by the majority of today’s fuzzers. Our open-source implementation, HeXcite, and evaluation benchmarks are available at: [https://github.com/FoRTE-Research/HeXcite](https://github.com/FoRTE-Research/HeXcite).

## ACM Reference Format
Stefan Nagy, Anh Nguyen-Tuong, Jason D. Hiser, Jack W. Davidson, and Matthew Hicks. 2021. Same Coverage, Less Bloat: Accelerating Binary-only Fuzzing with Coverage-preserving Coverage-guided Tracing. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS’21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3460120.3484787