current # commands on controller: 0
max q depth since init: 1
max # commands on controller since init: 2
max sg entries since init: 32
sequential access devices: 0
cciss/c2d0:   36.38gb       raid 0
.ee
.in
.\"
.ss files in /sys
.tp
.i /sys/bus/pci/devices//ccissx/cxdy/model
displays the scsi inquiry page 0 model for logical drive
.i y
of controller
.ir x .
.tp
.i /sys/bus/pci/devices//ccissx/cxdy/rev
displays the scsi inquiry page 0 revision for logical drive
.i y
of controller
.ir x .
.tp
.i /sys/bus/pci/devices//ccissx/cxdy/unique_id
displays the scsi inquiry page 83 serial number for logical drive
.i y
of controller
.ir x .
.tp
.i /sys/bus/pci/devices//ccissx/cxdy/vendor
displays the scsi inquiry page 0 vendor for logical drive
.i y
of controller
.ir x .
.tp
.i /sys/bus/pci/devices//ccissx/cxdy/block:cciss!cxdy
a symbolic link to
.ir /sys/block/cciss!cxdy .
.tp
.i /sys/bus/pci/devices//ccissx/rescan
when this file is written to, the driver rescans the controller
to discover any new, removed, or modified logical drives.
.tp
.i /sys/bus/pci/devices//ccissx/resettable
a value of 1 displayed in this file indicates that
the "reset_devices=1" kernel parameter (used by
.br kdump )
is honored by this controller.
a value of 0 indicates that the
"reset_devices=1" kernel parameter will not be honored.
some models of smart array are not able to honor this parameter.
.tp
.i /sys/bus/pci/devices//ccissx/cxdy/lunid
displays the 8-byte lun id used to address logical drive
.i y
of controller
.ir x .
.tp
.i /sys/bus/pci/devices//ccissx/cxdy/raid_level
displays the raid level of logical drive
.i y
of controller
.ir x .
.tp
.i /sys/bus/pci/devices//ccissx/cxdy/usage_count
displays the usage count (number of opens) of logical drive
.i y
of controller
.ir x .
.ss scsi tape drive and medium changer support
scsi sequential access devices and medium changer devices are supported and
appropriate device nodes are automatically created (e.g.,
.ir /dev/st0 ,
.ir /dev/st1 ,
etc.; see
.br st (4)
for more details.)
you must enable "scsi tape drive support for smart array 5xxx" and
"scsi support" in your kernel configuration to be able to use scsi
tape drives with your smart array 5xxx controller.
.pp
additionally, note that the driver will not engage the scsi core at
init time.
the driver must be directed to dynamically engage the scsi core via the
.i /proc
filesystem entry,
which the "block" side of the driver creates as
.i /proc/driver/cciss/cciss*
at run time.
this is because at driver init time,
the scsi core may not yet be initialized (because the driver is a block
driver) and attempting to register it with the scsi core in such a case
would cause a hang.
this is best done via an initialization script
(typically in
.ir /etc/init.d ,
but could vary depending on distribution).
for example:
.pp
.in +4n
.ex
for x in /proc/driver/cciss/cciss[0\-9]*
do
    echo "engage scsi" > $x
done
.ee
.in
.pp
once the scsi core is engaged by the driver, it cannot be disengaged
(except by unloading the driver, if it happens to be linked as a module.)
.pp
note also that if no sequential access devices or medium changers are
detected, the scsi core will not be engaged by the action of the above
script.
.ss hot plug support for scsi tape drives
hot plugging of scsi tape drives is supported, with some caveats.
the
.b cciss
driver must be informed that changes to the scsi bus
have been made.
this may be done via the
.i /proc
filesystem.
for example:
.pp
    echo "rescan" > /proc/scsi/cciss0/1
.pp
this causes the driver to:
.rs
.ip 1. 3
query the adapter about changes to the
physical scsi buses and/or fiber channel arbitrated loop, and
.ip 2.
make note of any new or removed sequential access devices
or medium changers.
.re
.pp
the driver will output messages indicating which
devices have been added or removed and the controller, bus, target, and
lun used to address each device.
the driver then notifies the scsi midlayer
of these changes.
.pp
note that the naming convention of the
.i /proc
filesystem entries
contains a number in addition to the driver name
(e.g., "cciss0"
instead of just "cciss", which you might expect).
.pp
note:
.i only
sequential access devices and medium changers are presented
as scsi devices to the scsi midlayer by the
.b cciss
driver.
specifically, physical scsi disk drives are
.i not
presented to the scsi midlayer.
the only disk devices that are presented to the kernel are logical
drives that the array controller constructs from regions on
the physical drives.
the logical drives are presented to the block layer
(not to the scsi midlayer).
it is important for the driver to prevent the kernel from accessing the
physical drives directly, since these drives are used by the array
controller to construct the logical drives.
.ss scsi error handling for tape drives and medium changers
the linux scsi midlayer provides an error-handling protocol that
is initiated whenever a scsi command fails to complete within a
certain amount of time (which can vary depending on the command).
the
.b cciss
driver participates in this protocol to some extent.
the normal protocol is a four-step process:
.ip * 3
first, the device is told to abort the command.
.ip *
if that doesn't work, the device is reset.
.ip *
if that doesn't work, the scsi bus is reset.
.ip *
if that doesn't work, the host bus adapter is reset.
.pp
the
.b cciss
driver is a block
driver as well as a scsi driver and only the tape drives and medium
changers are presented to the scsi midlayer.
furthermore, unlike more
straightforward scsi drivers, disk i/o continues through the block
side during the scsi error-recovery process.
therefore, the
.b cciss
driver implements only the first two of these actions,
aborting the command, and resetting the device.
note also that most tape drives will not oblige
in aborting commands, and sometimes it appears they will not even
obey a reset command, though in most circumstances they will.
if the command cannot be aborted and the device cannot be
reset, the device will be set offline.
.pp
in the event that the error-handling code is triggered and a tape drive is
successfully reset or the tardy command is successfully aborted, the
tape drive may still not allow i/o to continue until some command
is issued that positions the tape to a known position.
typically you must rewind the tape (by issuing
.i "mt \-f /dev/st0 rewind"
for example) before i/o can proceed again to a tape drive that was reset.
.sh see also
.br hpsa (4),
.br cciss_vol_status (8),
.br hpacucli (8),
.br hpacuxe (8)
.pp
.ur http://cciss.sf.net
.ue ,
and
.i documentation/blockdev/cciss.txt
and
.i documentation/abi/testing/sysfs\-bus\-pci\-devices\-cciss
in the linux kernel source tree
.\" .sh authors
.\" don brace, steve cameron, chase maupin, mike miller, michael ni,
.\" charles white, francis wiran
.\" and probably some other people.
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2017, michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th pthread_mutexattr_getpshared 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
pthread_mutexattr_getpshared, pthread_mutexattr_setpshared \- get/set
process-shared mutex attribute
.sh synopsis
.nf
.b #include 
.pp
.bi "int pthread_mutexattr_getpshared("
.bi "                      const pthread_mutexattr_t *restrict " attr ,
.bi "                      int *restrict " pshared );
.bi "int pthread_mutexattr_setpshared(pthread_mutexattr_t *" attr ,
.bi "                      int " pshared );
.fi
.pp
compile and link with \fi\-pthread\fp.
.sh description
these functions get and set the process-shared attribute
in a mutex attributes object.
this attribute must be appropriately set to ensure correct,
efficient operation of a mutex created using this attributes object.
.pp
the process-shared attribute can have one of the following values:
.tp
.b pthread_process_private
mutexes created with this attributes object are to be shared
only among threads in the same process that initialized the mutex.
this is the default value for the process-shared mutex attribute.
.tp
.b pthread_process_shared
mutexes created with this attributes object can be shared between
any threads that have access to the memory containing the object,
including threads in different processes.
.pp
.br pthread_mutexattr_getpshared ()
places the value of the process-shared attribute of
the mutex attributes object referred to by
.ir attr
in the location pointed to by
.ir pshared .
.pp
.br pthread_mutexattr_setpshared ()
sets the value of the process-shared attribute of
the mutex attributes object referred to by
.ir attr
to the value specified in
.br pshared .
.pp
if
.i attr
does not refer to an initialized mutex attributes object,
the behavior is undefined.
.sh return value
on success, these functions return 0.
on error, they return a positive error number.
.sh errors
.br pthread_mutexattr_setpshared ()
can fail with the following errors:
.tp
.b einval
the value specified in
.i pshared
is invalid.
.tp
.b enotsup
.i pshared is
.br pthread_process_shared
but the implementation does not support process-shared mutexes.
.sh conforming to
posix.1-2001, posix.1-2008.
.sh see also
.ad l
.nh
.br pthread_mutexattr_init (3),
.br pthreads (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man7/iso_8859-3.7
.\" copyright (c) 1990, 1991 the regents of the university of california.
.\" all rights reserved.
.\"
.\" this code is derived from software contributed to berkeley by
.\" the american national standards committee x3, on information
.\" processing systems.
.\"
.\" %%%license_start(bsd_4_clause_ucb)
.\" redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. all advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	this product includes software developed by the university of
.\"	california, berkeley and its contributors.
.\" 4. neither the name of the university nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" this software is provided by the regents and contributors ``as is'' and
.\" any express or implied warranties, including, but not limited to, the
.\" implied warranties of merchantability and fitness for a particular purpose
.\" are disclaimed.  in no event shall the regents or contributors be liable
.\" for any direct, indirect, incidental, special, exemplary, or consequential
.\" damages (including, but not limited to, procurement of substitute goods
.\" or services; loss of use, data, or profits; or business interruption)
.\" however caused and on any theory of liability, whether in contract, strict
.\" liability, or tort (including negligence or otherwise) arising in any way
.\" out of the use of this software, even if advised of the possibility of
.\" such damage.
.\" %%%license_end
.\"
.\"	@(#)stdarg.3	6.8 (berkeley) 6/29/91
.\"
.\" converted for linux, mon nov 29 15:11:11 1993, PI:EMAIL
.\" additions, 2001-10-14, aeb
.\"
.th stdarg 3  2021-03-22 "" "linux programmer's manual"
.sh name
stdarg, va_start, va_arg, va_end, va_copy \- variable argument lists
.sh synopsis
.nf
.b #include 
.pp
.bi "void va_start(va_list " ap ", " last );
.ib type " va_arg(va_list " ap ", " type );
.bi "void va_end(va_list " ap );
.bi "void va_copy(va_list " dest ", va_list " src );
.fi
.sh description
a function may be called with a varying number of arguments of varying
types.
the include file
.i 
declares a type
.i va_list
and defines three macros for stepping through a list of arguments whose
number and types are not known to the called function.
.pp
the called function must declare an object of type
.i va_list
which is used by the macros
.br va_start (),
.br va_arg (),
and
.br va_end ().
.ss va_start()
the
.br va_start ()
macro initializes
.i ap
for subsequent use by
.br va_arg ()
and
.br va_end (),
and must be called first.
.pp
the argument
.i last
is the name of the last argument before the variable argument list, that is,
the last argument of which the calling function knows the type.
.pp
because the address of this argument may be used in the
.br va_start ()
macro, it should not be declared as a register variable,
or as a function or an array type.
.ss va_arg()
the
.br va_arg ()
macro expands to an expression that has the type and value of the next
argument in the call.
the argument
.i ap
is the
.i va_list
.i ap
initialized by
.br va_start ().
each call to
.br va_arg ()
modifies
.i ap
so that the next call returns the next argument.
the argument
.i type
is a type name specified so that the type of a pointer to an object that
has the specified type can be obtained simply by adding a * to
.ir type .
.pp
the first use of the
.br va_arg ()
macro after that of the
.br va_start ()
macro returns the argument after
.ir last .
successive invocations return the values of the remaining arguments.
.pp
if there is no next argument, or if
.i type
is not compatible with the type of the actual next argument (as promoted
according to the default argument promotions), random errors will occur.
.pp
if
.i ap
is passed to a function that uses
.bi va_arg( ap , type ),
then the value of
.i ap
is undefined after the return of that function.
.ss va_end()
each invocation of
.br va_start ()
must be matched by a corresponding invocation of
.br va_end ()
in the same function.
after the call
.bi va_end( ap )
the variable
.i ap
is undefined.
multiple traversals of the list, each
bracketed by
.br va_start ()
and
.br va_end ()
are possible.
.br va_end ()
may be a macro or a function.
.ss va_copy()
the
.br va_copy ()
macro copies the (previously initialized) variable argument list
.i src
to
.ir dest .
the behavior is as if
.br va_start ()
were applied to
.ir dest
with the same
.i last
argument, followed by the same number of
.br va_arg ()
invocations that was used to reach the current state of
.ir src .
.pp
.\" proposal from PI:EMAIL, 1997-02-28
an obvious implementation would have a
.i va_list
be a pointer to the stack frame of the variadic function.
in such a setup (by far the most common) there seems
nothing against an assignment
.pp
.in +4n
.ex
va_list aq = ap;
.ee
.in
.pp
unfortunately, there are also systems that make it an
array of pointers (of length 1), and there one needs
.pp
.in +4n
.ex
va_list aq;
*aq = *ap;
.ee
.in
.pp
finally, on systems where arguments are passed in registers,
it may be necessary for
.br va_start ()
to allocate memory, store the arguments there, and also
an indication of which argument is next, so that
.br va_arg ()
can step through the list.
now
.br va_end ()
can free the allocated memory again.
to accommodate this situation, c99 adds a macro
.br va_copy (),
so that the above assignment can be replaced by