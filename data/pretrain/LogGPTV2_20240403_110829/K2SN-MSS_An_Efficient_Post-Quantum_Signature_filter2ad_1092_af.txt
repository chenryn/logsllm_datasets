2
For zi ∈ Z64
below.
2 , the computation is called bNTT − 2δ (·), and given
(1) Precomputation of vectors ααα j0,k0: Define vectors ααα j0,k0 =
257, where αj0,k0 is defined by
2δ − 1. The vectors ααα j0,k0 can
possible values depending on the value of k0. Let
(α0,k0 , α1,k0 , . . . , α2δ −1,k0 ) ∈ Z2δ
equation (12) for 0 ⩽ k0 ⩽ 64
have 64
2δ
(bNTT2δ (·))
j0,k0
(9)
(10)
(11)
(12)
(13)
.
j0,k0
(cid:43)(cid:47)(cid:47)(cid:47)(cid:45) .
(14)
=
)j1k0,
(cid:19)
(cid:18)
Λ1 be the precomputation table where rows of the table are
the vectors ααα j0,k0. There are k0 rows of the table Λ1 which
are indexed by k0.
(2) Precomputation of vectors βββ j0,k0: Define vectors βββ j0,k0 =
(β0,k0 , β1,k0 , . . . , β2δ −1,k0 ) ∈ Z2δ
257, where βj0,k0 is defined
by equation (13). For a given k0, βββ j0,k0 can have 22δ possible
values depending on the combination of the bits
zi,k0 =
zi,k0+ 64
2δ ·0, zi,k0+ 64
2δ ·1, . . . , zi,k0+ 64
2δ ·(2δ −1)
(15)
,
22δ −1
that can be easily precomputed and stored. Let the precom-
putation table Λ2 with these entries be indexed from 0 to
22δ −1. We can choose an entry from the table by the decimal
value of zi,k0 computed from the expression,
dec2δ (zi,k0 ) = zi,k0+ 64
(3) Computation of vectors y′
j0,k0: For 0 ⩽ j0 ⩽ 2δ − 1, the
jth0 component of yj0,k0 only depends on the jth0 -components
of the elements Λ1 (k0)s and Λ2 (dec2δ (zi,k0 ))s of 0 ⩽ k0 ⩽
2δ − 1. Following the observation, we can compute, for 0 ⩽
64
k0 ⩽ 64
2δ ·020 + · · · + zi,k0+ 64
2δ ·(2δ −1)
j0,k0 = Λ1 (k0) ⊙257 Λ2 (dec(zi,k0 )).
(16)
(4) Computation of the output vectors yi, j1: Using the vec-
2δ − 1, the output vectors yi, j1 can be
2δ − 1,
y′
.
tors y′
computed as:
64
j0,k0, 0 ⩽ k0 ⩽ 64
2δ −1(cid:88)
yi, j1 =
k0=0
16
)j1k0y′
(ω
j0,k0 ,∀0 ⩽ j1 ⩽
64
2δ
− 1.
(17)
In order to compute the vectors yi, j1 of the equation (17),
2δ vector multiplications are required and there are 64
such
2δ
vectors. Therefore, the computation is 64 vector multiplica-
tions.
(cid:17). The size of
Memory requirement of the precomputation: Required mem-
ory for the table Λ1 of vectors ααα j0,k0 is of O(cid:16) 64
the table Λ2 of vectors βββ j0,k0 is of order O(cid:18)
22δ(cid:19)
2δ
. The memory re-
quirement is thus dominated by the size of the Λ2 and it increases
exponentially as δ increases.
4.2 Parallelization of NTT when zi ∈ Z64
257
(дNTT2δ (·))
(cid:18)
The input to the function дNTT is a vector in Z64
257. The computation
of yi = дNTT(zi ) is the same as the computation of the function
bNTT except for Step 2, for which we provide details below.
The components of zi,k0 in equation (15) are now elements from
Z257 and so vector zi,k0 =
2δ ·(2δ −1)
has 2572δ possible values. If we processed the same as the com-
putation of bNTT, the size of the table Λ2 will be 223δ which is
not acceptable. Therefore, we compute the required βββ j0,k0 vectors
during the computation of дNTT(·) as given in Algorithm 7.
To compute vectors βββ j0,k0 as in Algorithm 7, we also require the
Define function Select2δ (zi,k0 , j) = (zi,k0[j], zi,k0[j], . . . , zi,k0[j]).
2δ ·1, . . . , zi,k0+ 64
2δ ·0, zi,k0+ 64
zi,k0+ 64
(cid:19)
xxx, yyy, zzz
Sabyasachi Karati and Reihaneh Safavi-Naini
following precomputed vectors
64
64
(cid:18)
ω
for 0 ⩽ k1 ⩽ 2δ − 1.
2δ k1 (1+2·0)
, ω
ωωωk1, j0 =
2δ k1 (1+2·1)
2δ k1 (1+2·(2δ −1))(cid:19)
64
, . . . , ω
Algorithm 7 Parallelized computation of βββ j0,k0
64
2δ −1) and (ωωω0, j0 , . . . ,ωωω2δ −1, j0 );
Input: (zi,0, . . . , zi,
(cid:16)
Output: βββ j0,0, βββ j0,1, . . . , βββ j0,
βββ j0,k0 = βββ j0,k0 ⊕257
ωωωk1, j0 ⊙257 Select2δ (zi,k0 , k1)
k0 ⩽ 64
2δ − 1,∀0 ⩽ k1 ⩽ 2δ − 1
2δ −1;
64
(cid:17)
, ∀0 ⩽
Table 2: Final computations of yi, j1
j1
0
1
2
3
4
5
6
7
yi, j1 ∈ Z8
257
y′′
i,0 ⊕257 y′′
i,8 ⊕257 y′′
y′′
i,6 ⊕257 y′′
y′′
y′′
i,10 ⊕257 y′′
y′′
i,0 ⊖257 y′′
y′′
i,8 ⊖257 y′′
y′′
i,6 ⊖257 y′′
y′′
i,10 ⊖257 y′′
i,1
i,9
i,7
i,11
i,1
i,9
i,7
i,11
Table 3: Sub-computations of yi, j1 of Table 2, where each y′′
257. Component-wise left Shift is denoted by ≪.
Z8
y′′
y′′
y′′
y′′
y′′
y′′
y′′
y′′
y′′
y′′
y′′
y′′
i,2 ⊕257 y′
i,0 = y′
i,0 ⊕257 y′
i,1 ⊕257 y′
i,1 = y′
i,3 ⊕257 y′
(cid:16)
(cid:17)
i,0 ⊖257 y′
i,2 = y′
(cid:17) ≪ 4
(cid:16)
i,4
i,1 ⊖257 y′
y′
(cid:16)
(cid:17)
i,3 =
i,5
y′
i,2 ⊖257 y′
i,4 =
i,6
y′
i,3 ⊖257 y′
(cid:16)
i,5 =
i,7
i,6 = y′
i,0 ⊕257 y′
i,4 ⊖257 y′
i,1 ⊕257 y′
y′
i,5 ⊖257 y′
i,7 =
i,8 = y′′
i,2 ⊕257 y′′
i,4
i,9 = (y′′
i,3 ≪ 2) ⊕257 (y′′
i,10 = y′′
i,2 ⊖257 y′′
i,11 = (y′′
i,3 ≪ 6) ⊕257 (y′′
i,4
i,4 ⊕257 y′
i,5 ⊕257 y′
i,6
i,7
(cid:17) ≪ 4
i,2 ⊖257 y′
i,6
i,3 ⊖257 y′
i,7
i,5 ≪ 6)
i,5 ≪ 2)
Table 4: Final computations of yi, j1
j1
0
1
2
3
yi, j1 ∈ Z16
257
y′′
i,0 ⊕257 y′′
y′′
i,2 ⊕257 y′′
y′′
i,0 ⊖257 y′′
y′′
i,2 ⊖257 y′′
i,1
i,3
i,1
i,3
Table 5: Sub-computations of yi, j1 of Table 4, where each y′′
257. Component-wise left Shift is denoted by ≪.
Z8
i, . ∈
i, . ∈
y′′
y′′
y′′
y′′
i,0 = y′
i,1 = y′
i,2 = y′
i,3 = (y′
i,0 ⊕257 y′
i,2
i,1 ⊕257 y′
i,3
i,0 ⊖257 y′
i,2
i,1 ⊖257 y′
i,3) ≪ 4
).
evaluation only use vector operations ⊕257 and ⊙257 that are per-
formed on the vectors component-wise. The output vector of these
vector operations can be directly used for the next vector operation.
Thus the above 2δ -way parallelization of NTT implementation of
SWIFFT function is a suitable candidate for SIMD-based paralleliza-
tion. The choice of δ depends on the available intrinsic operations
that are required for integer SIMD operations.
We provide two new implementations of SWIFFT for δ = 3
and δ = 4 using avx2 intrinsic [22], supporting 256-bit registers
for integer operations. We refer to the two implementations as
SWIFFT-8-avx2 and SWIFFT-16-avx2, achieving 8-way and 16-way
4.3 Optimization of the Step-4 of bNTT2δ and
дNTT2δ for δ = 3
4 ≡ −1 (mod 257).