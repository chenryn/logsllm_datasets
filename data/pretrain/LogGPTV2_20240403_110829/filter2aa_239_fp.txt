      }
PostBookAsync方法创建了一个Book对象，序列化为JSON，通过ValueSet把它发送给
SendMessageAsync方法：
    public string NewBookTitle { get; set; }
      public string NewBookPublisher { get; set; }
      public async void PostBookAsync()
      {
        var message = new ValueSet();
        message.Add("command", "POST");
        string json = new Book
        {
        Title = NewBookTitle,
        Publisher = NewBookPublisher
        }.ToJson();
        message.Add("book", json);
        string result = await SendMessageAsync(message);
      }
与应用程序服务相关的客户代码包含在SendMessageAsync方法中。其中创建了一个
AppServiceConnection。连接使用完后，通过using语句销毁，以关闭它。为了把连接映射
到正确的服务上，需要提供AppServiceName和PackageFamilyName属性。设置这些属性
后，通过调用方法OpenAsync来打开连接。只有成功地打开连接，才能在调用方法中发送
请求和接收到的ValueSet。AppServiceConnection方法SendMessageAsync把请求发给服
务，返回一个AppServiceResponse对象。响应包含来自服务的结果，相应的处理如下：
    private async Task SendMessageAsync(ValueSet message)
      {
        using (var connection = new AppServiceConnection())
        {
        connection.AppServiceName = BookServiceName;
        connection.PackageFamilyName = BooksPackageName;
        AppServiceConnectionStatus status = await connection.OpenAsync();
        if (status == AppServiceConnectionStatus.Success
)
        {
          AppServiceResponse response =
            await connection.SendMessageAsync(message);
          if (response.Status == AppServiceResponseStatus.Success &&
            response.Message.ContainsKey("result"))
          {
            string result = response.Message["result"].ToString();
            return result;
          }
          else
          {
            await ShowServiceErrorAsync(response.Status);
          }
        }
        else
        {
          await ShowConnectionErrorAsync(status);
        }
        return string.Empty;
        }
      }
在构建解决方案，部署提供程序和客户机应用程序后，就可以启动客户机应用程序来
调用服务。还可以创建多个客户机应用程序，来调用相同的服务。
在应用程序之间通信后，下面使用一些硬件。下一节使用相机记录照片和视频。
33.7 相机
应用程序的可视化越来越强，越来越多的设备提供了一两个相机内置功能，所以使用
这个功能就越来越成为应用程序的一个重要方面——这很容易通过Windows运行库实现。
  注意： 使用相机需要在清单编辑器中配置Webcam功能。要录制视频，还需
要配置Microphone功能。
照片和视频可以用CameraCaptureUI类（在名称空间Windows.Media.Capture中）捕
获。首先，照片和视频设置需要配置为使用下面的CaptureFileAsync方法。第一个代码段
捕获照片。在实例化CameraCaptureUI类后，就应用PhotoSettings。可能的照片格式有
JPG、JPGXR和PNG。也可以定义剪辑，相机捕获功能的UI直接要求用户，根据剪辑大小
从完整的图片中选择一个剪辑。对于剪辑，可以用CroppedSizeInPixels属性定义像素大
小，或用CroppedAspectRatio定义一个比例。拍照后，示例代码会使用CaptureFileAsync方
法返回的StorageFile，把它存储为一个文件，通过FolderPicker放在用户选择的文件夹中
（代码文件Camera Sample/ MainPage.xaml.cs）。
    private async void OnTakePhoto(object sender, RoutedEventArgs e)
    {
      var cam = new CameraCaptureUI();
      cam.PhotoSettings.AllowCropping = true;
      cam.PhotoSettings.Format = CameraCaptureUIPhotoFormat.Png;
      cam.PhotoSettings.CroppedSizeInPixels = new Size(300, 300);
      StorageFile file = await cam.CaptureFileAsync(CameraCaptureUIMode.Photo);
      if (file ! = null)
      {
        var picker = new FileSavePicker();
        picker.SuggestedStartLocation = PickerLocationId.PicturesLibrary;
        picker.FileTypeChoices.Add("Image File", new string[] { ".png" });
        StorageFile fileDestination = await picker.PickSaveFileAsync();
        if (fileDestination ! = null)
        {
          await file.CopyAndReplaceAsync(fileDestination);
        }
      }
    }
第二段代码用于录制视频。与前面类似，首先需要进行配置。除了PhotoSettings属性
之外，CameraCaptureUI类还定义了VideoSettings属性。可以根据最大分辨率和最大持续时
间限制所录制的视频（使用枚举值CameraCaptureUIMaxVideoResolution.HighestAvailable
允许用户选择任何可用的分辨率）。可能的视频格式有WMV和MP4：
      private async void OnRecordVideo(object sender, RoutedEventArgs e)
      {
        var cam = new CameraCaptureUI();
        cam.VideoSettings.AllowTrimming = true;
        cam.VideoSettings.MaxResolution =
          CameraCaptureUIMaxVideoResolution.StandardDefinition;
        cam.VideoSettings.Format = CameraCaptureUIVideoFormat.Wmv;
        cam.VideoSettings.MaxDurationInSeconds = 5;
        StorageFile file = await cam.CaptureFileAsync(
          CameraCaptureUIMode.Video);
        if (file ! = null)
        {
          var picker = new FileSavePicker();
          picker.SuggestedStartLocation = PickerLocationId.VideosLibrary;
          picker.FileTypeChoices.Add("Video File", new string[] { ".wmv" });
          StorageFile fileDestination = await picker.PickSaveFileAsync();
          if (fileDestination ! = null)
          {
          await file.CopyAndReplaceAsync(fileDestination);
          }
        }
      }
如果用户要捕获视频或图片，就可以把CameraCaptureUIMode.PhotoOrVideo参数传送
给CaptureFileAsync方法。
因为相机也记录位置信息，所以用户第一次运行应用程序时，会询问是否允许记录位
置信息，如图33-9所示。
图33-9
运行应用程序，就可以记录图片和视频。
33.8 Geolocation和MapControl
知道用户的位置是应用程序的一个重要方面。应用程序可能要显示地图，要显示用户
所在区域的天气情况，或者需要确定用户的数据应保存到哪个最近的云中心。在应用程序
中使用广告时，为了展示附近地区的广告（如果可用），用户位置就很重要。
在UWP应用程序中，还可以显示地图。在Windows 
10中，MapControl可用作
Windows API的一部分，不需要使用额外的库，比如Bing SDK。
示例应用程序使用Geolocator（名称空间Windows.Devices.Geolocator，提供用户的地
址信息）和MapControl （名称空间Windows.UI.Xaml.Controls.Maps）。当然，也可以在应
用程序中相互独立地使用这些类型。
33.8.1 使用MapControl
在示例应用程序中，MapControl在MainPage中定义，其中把不同的属性和事件绑定到
MapsViewModel中的值上，通过页面的ViewModel属性访问。通过这种方式，可以在应用
程序中动态更改一些设置，查看MapControl可用的不同特性（代码文件MapSample 
/
MainPage.xaml）：
样例应用程序定义了控件，来配置SplitView的面板内右侧的MapControl。MapControl
在SplitView的内容中定义。SplitView控件详见第32章。
在后台代码文件中定义了ViewModel属性，把MapControl传递给构造函数，来实例化
MapsViewModel。通常最好避免让Windows控件直接访问视图模型，应该只使用数据绑定
来映射。然而，使用一些特殊的功能时，如街景地图，很容易直接使用MapsViewModel类
中的MapControl。因为这个视图模型类型不执行其他任何操作，且只能用于Windows设
备，所以可以把MapControl传递给MapsViewModel构造函数（代码文件MapSample 
/
MainPage.xaml.cs）：
    public sealed partial class MainPage: Page
    {
      public MainPage()
      {
        this.InitializeComponent();
        ViewModel = new MapsViewModel(map);
      }
      public MapsViewModel ViewModel { get; }
    }
MapsViewModel的构造函数初始化一些属性，这些属性绑定到MapControl的属性上，
如地图上的一个位置绑定到维也纳的一个位置，地图的样式绑定到一个路径变体上，调阶
为0，缩放级别为12（代码文件MapSample / ViewModels / MapsViewModel.cs）：
      public class MapsViewModel: BindableBase
      {
        private readonly CoreDispatcher _dispatcher;
        private readonly Geolocator _locator = new Geolocator();
        private readonly MapControl _mapControl;
        public MapsViewModel(MapControl mapControl)
        {
          _mapControl = mapControl;
          StopStreetViewCommand = new DelegateCommand(
          StopStreetView, () => IsStreetView);
          StartStreetViewCommand = new DelegateCommand(
          StartStreetViewAsync, () => ! IsStreetView);
          if (! DesignMode.DesignModeEnabled)
          {
          _dispatcher = CoreWindow.GetForCurrentThread().Dispatcher;
          }
          _locator.StatusChanged += async (s, e) =>
          {
          await _dispatcher.RunAsync(CoreDispatcherPriority.Low, () =>
            PositionStatus = e.Status);
          };
          // intialize defaults at startup
          CurrentPosition = new Geopoint(
          new BasicGeoposition { Latitude = 48.2, Longitude = 16.3 });
          CurrentMapStyle = MapStyle.Road;
          DesiredPitch = 0;
          ZoomLevel = 12;
        }
用初始配置启动应用程序，可以看到显示维也纳内一个位置的地图，该位置用
BasicGeoposition定义，右边是管理MapControl的控件，以及加载地图状态的文本信息（参
见图33-10）。
图33-10
放大，改变音高水平，选择要查看的地标和商业地标，可以看到著名的建筑，比如维
也纳的史蒂芬，如图33-11所示。
图33-11
切换到俯瞰视图，可以看到真实的图像，如图33-12所示。一些地方还显示Aerial3D
视图下漂亮的图片，如图33-13所示。
图33-12
图33-13
33.8.2 使用Geolocator定位信息
接下来，需要通过Geolocator实例_locator获得用户的实际位置。方法GetPositionAsync
返回一个Geoposition实例，来返回地理位置。结果应用于视图模型的CurrentPosition属
性，该视图模型绑定到MapControl的中心（代码文件MapSample 
/ 
ViewModels 
/
MapsViewModel.cs）：
    {
      try
      {
        Geoposition position = await _locator.GetGeopositionAsync(
        TimeSpan.FromMinutes(5), TimeSpan.FromSeconds(5));
        CurrentPosition = new Geopoint(new BasicGeoposition
        {
        Longitude = position.Coordinate.Point.Position.Longitude,
        Latitude = position.Coordinate.Point.Position.Latitude
        });
      }
      catch (UnauthorizedAccessException ex)
      {
        await new MessageDialog(ex.Message).ShowAsync();
      }
    }
从GetGeopositionAsync返回的Geoposition实例列出了Geolocator如何找到该位置的信
息：使用手机网络、卫星、记录的Wi-Fi network或IP地址。配置Geolocator时，可以指定
信息的准确程度。设置DesiredAccuracyInMeters属性，可以定义位置在一米范围内的准确
程度。当然，这个精度是我们希望达到的，但不可能完全达到。如果位置应该更精确，就
可以使用访问卫星所得的GPS信息。根据所需的技术，会消耗更多的电池，所以如果没有
必要，就不应该指定这样的准确性。如果设备没有提供这些功能，卫星或手机信息就不能
使用。在这些情况下，只能使用Wi-Fi network（如果可用）或IP地址。当然，IP地址可能
不精确。也许获得的是IP供应商（而不是用户）的地理位置。根据笔者使用的设备和网
络，准确性为64米。位置的来源是Wi-Fi。这个结果是非常准确的。地图如图33-14所示。
图33-14
33.8.3 街景地图
MapControl提供的另一个功能是街景地图。此功能不能用于所有的设备。在使用它之
前需要检查MapControl中的IsStreetsideSupported属性。如果设备支持街景地图功能，就可
以试着使用StreetsidePanorama类的静态方法FindNearbyAsync，找到附近的街边。街景地
图只能用于一些位置。可以测试，来找出自己的位置是否支持这个功能。如果
StreetsidePanorama信息是可用的，它可以传递到StreetsideExperience构造函数，分配给
MapControl的CustomExperience属性（代码文件
MapSample/ViewModels/MapsViewModel.cs）：
    public async void StartStreetViewAsync()
    {
      if (_mapControl.IsStreetsideSupported
)
      {
        var panorama = await StreetsidePanorama.FindNearbyAsync(CurrentPosition);
        if (panorama == null)
        {
        var dlg = new MessageDialog("No streetside available here");
        await dlg.ShowAsync();
        return;
        }
        IsStreetView = true;
        _mapControl.CustomExperience = new StreetsideExperience(panorama);
      }
    }
街景地图如图33-15所示。
图33-15
33.8.4 继续请求位置信息
除了一次获得位置之外，位置还可以根据时间段或用户的移动来检索。使用
Geolocator，可以把ReportInterval属性设置为位置更新的最小时间段（单位为毫秒）。例
如，另一个应用程序需要较短时间段的位置信息，更新就可能比较频繁。除了时间段之
外，也可以指定用户的移动来触发位置信息的获得。属性MovementThreshold指定了这个
移动（以米为单位）。
设置了时间段或移动阈值后，PositionChanged事件会在每次更新位置时触发：
    private GeoLocator locator;
    private void OnGetContinuousLocation(object sender, RoutedEventArgs e)
    {
      locator = new Geolocator();
      locator.DesiredAccuracy = PositionAccuracy.High;
      // locator.ReportInterval = 1000;
      locator.MovementThreshold = 10;
      locator.PositionChanged += (sender1, e1) =>
      {
        // position updated