### DEX文件基本介绍
Google 为 Android 中的 Java 代码专门设计了对应的可执行文件 DEX（Dalvik eXecutable File），适用于手机这样的内存低和处理器性能较差的移动平台。下面，我们就来主要介绍一下DEX文件的格式。
### DEX 文件数据类型定义
在介绍 DEX  文件的具体结构之前，我们先来关注一下 DEX 文件中所使用的一些基础的数据类型。
| 名称        | 说明                         |
| --------- | -------------------------- |
| byte      | 8 位有符号整数                   |
| ubyte     | 8 位无符号整数                   |
| short     | 16 位有符号整数，采用小端字节序          |
| ushort    | 16 位无符号整数，采用小端字节序          |
| int       | 32 位有符号整数，采用小端字节序          |
| uint      | 32 位无符号整数，采用小端字节序          |
| long      | 64 位有符号整数，采用小端字节序          |
| ulong     | 64 位无符号整数，采用小端字节序          |
| sleb128   | 有符号 LEB128，可变长度（见下文）       |
| uleb128   | 无符号 LEB128，可变长度（见下文）       |
| uleb128p1 | 无符号 LEB128 加 `1`，可变长度（见下文） |
其中之所以会采用变长的数据类型是因为希望可以尽可能减少可执行文件的占用空间，比如说如果一个字符串的长度为5，那么我们其实只需要一个字节即可，但是我们又不希望直接使用`u1` 来进行定义相应类型，因为这样会把所有的字符串长度都限制在相应的范围内。
可变长度的类型其实都是基于 LEB128(Little-Endian Base) 类型的，可以用于表示 32 位大小的 int 数字，其根据所要表示的数字的大小来选择合适的长度。如下图所示，其中每个字节的最高位表示是否使用下一个字节，1 表示使用，0 表示不使用。故而每个字节其实只有 7 个有效的 bit 位用来表示相应的数字。如果有一个 LEB128 类型的变量使用了 5 个字节，并且第五个字节的最高位为 1 ，那说明出现了问题。
dalvik中读取无符号leb128类型的函数如下
```c++
DEX_INLINE int readUnsignedLeb128(const u1** pStream) {
    const u1* ptr = *pStream;
    int result = *(ptr++);      //取第一个字节
    if (result > 0x7f) {        //如果第1个字节大于0x7f,表示第一个字节最高位为1
        int cur = *(ptr++);     //第2个字节
        result = (result & 0x7f) | ((cur & 0x7f)  0x7f) {
            cur = *(ptr++);
            result |= (cur & 0x7f)  0x7f) {
                cur = *(ptr++);
                result |= (cur & 0x7f)  0x7f) {
                    /*
                     * Note: We don't check to see if cur is out of
                     * range here, meaning we tolerate garbage in the
                     * high four-order bits.
                     */
                    cur = *(ptr++);
                    result |= cur > 25;   //符号扩展
    } else {
        int cur = *(ptr++);
        result = (result & 0x7f) | ((cur & 0x7f) > 18; //符号扩展
        } else {
            cur = *(ptr++);
            result |= (cur & 0x7f) > 11; //符号扩展
            } else {
                cur = *(ptr++);
                result |= (cur & 0x7f) > 4;  //符号扩展
                } else {
                    /*
                     * Note: We don't check to see if cur is out of
                     * range here, meaning we tolerate garbage in the
                     * high four-order bits.
                     */
                    cur = *(ptr++);
                    result |= cur >4 = 0xf80ce151
uleb128p1类型主要是用表示无符号数，其适用于以下场景
- 要求数字的表示必须非负
- 当数字为0xffffffff时，其加上1就为0，这时候我们就只需要1个字节即可。
- **有待进一步思考。**
### DEX 文件概览
DEX文件的整体结构如下
主要包括三个部分
- 文件头，给出dex文件的基本属性。
- 索引区，给出相关数据的索引，其数据其实放在数据区。
- 数据区，存放真实的字符串，代码。
### DEX 文件头
DEX的文件头主要包含magic字段、alder32校验值、SHA-1哈希值、string_ids的个数以及偏移地址等，固定占用0x70个字节，数据结构如下
```c++
struct DexHeader {
    u1  magic[8];           /* includes version number */
    u4  checksum;           /* adler32 checksum */
    u1  signature[kSHA1DigestLen]; /* SHA-1 hash */
    u4  fileSize;           /* length of entire file */
    u4  headerSize;         /* offset to start of next section */
    u4  endianTag;
    u4  linkSize;
    u4  linkOff;
    u4  mapOff;
    u4  stringIdsSize;
    u4  stringIdsOff;
    u4  typeIdsSize;
    u4  typeIdsOff;
    u4  protoIdsSize;
    u4  protoIdsOff;
    u4  fieldIdsSize;
    u4  fieldIdsOff;
    u4  methodIdsSize;
    u4  methodIdsOff;
    u4  classDefsSize;
    u4  classDefsOff;
    u4  dataSize;
    u4  dataOff;
};
```
其中具体的描述如下
| 名称              | 格式                        | 说明                                       |
| --------------- | ------------------------- | ---------------------------------------- |
| magic           | ubyte[8] = DEX_FILE_MAGIC | 标识DEX文件，其中DEX_FILE_MAGIC ="dex\n035\0"   |
| checksum        | uint                      | 除 `magic` 和此字段之外的文件剩下内容的 adler32 校验和，用于检测文件损坏情况 |
| signature       | ubyte[20]                 | 除 `magic`、`checksum` 和此字段之外的文件的内容的 SHA-1 签名（哈希），用于对文件进行唯一标识 |
| file_size       | uint                      | 整个文件（包括文件头）的大小，以字节为单位                    |
| header_size     | uint = 0x70               | 文件头的大小，以字节为单位。                           |
| endian_tag      | uint = ENDIAN_CONSTANT    | 字节序标记，大端序或者小端序。                          |
| link_size       | uint                      | 如果此文件未进行静态链接，则该值为 `0`，反之为链接区段的大小，        |
| link_off        | uint                      | 如果 `link_size == 0`，则该值为 `0`； 反之，该偏移量是文件开头到到 `link_data` 区段的偏移量。 |
| map_off         | uint                      | 该偏移量必须非零，标识从文件开头到 `data` 区段的偏移量。         |
| string_ids_size | uint                      | 字符串标识符列表中的字符串数量                          |
| string_ids_off  | uint                      | 如果 `string_ids_size == 0`（不可否认是一种奇怪的极端情况），则该值为 `0`； 反之表示从文件开头到`string_ids`的偏移量。 |