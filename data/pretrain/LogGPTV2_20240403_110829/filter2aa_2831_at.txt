Connection Points 
m_pCP->Release();
}
// Shut down this COM apartment
CoUninitialize();
return 0;
}
Adding the Now and Later Buttons
Enter the following code for the Now and Later buttons. This
code is functionally identical to the CallbackClient program. It is
added to the application’s main dialog class, CCPClientDlg. 
void CCPClientDlg::OnButtonNow() 
{
HRESULT hr;
CCPClientApp *pApp = (CCPClientApp*)AfxGetApp(); 
hr = pApp->m_pCP->Now2(1);
if (!SUCCEEDED(hr)) AfxMessageBox( "Call Failed" );
}
void CCPClientDlg::OnButtonLater() 
{
HRESULT hr;
CCPClientApp *pApp = (CCPClientApp*)AfxGetApp(); 
hr = pApp->m_pCP->Later2(5);
if (!SUCCEEDED(hr)) AfxMessageBox( "Call Failed" );
}
We’ve now completed the client application. Let’s go back
and implement the Now2() method on the server.
Using the Connection Point - the Server Side
So far, on the server, we’ve added a connection point map and a
connection point object. Just adding these objects really doesn’t
give much insight on how to use them. 
Using the Connection Point - the Server Side
227
Additonal Information and Updates: http://www.iftech.com/dcom
At some point in the execution of the server, it will need to
make a call back to the client. Normally, this will be in response
to some triggering event. Here’s the implementation code. 
STDMETHODIMP CCpTest::Now2(long lCode)
{
HRESULT hr = S_FALSE;
// Lock the object
Lock();
// Get first element in CComDynamicUnkArray.
// m_vec is a member of IConnectionPointImpl
IUnknown** pp = m_vec.begin();
ICallBack* pICp = (ICallBack*)*pp;
if (pICp)
{
// Call method on client
hr = pICp->Awake( lCode );
}
// Unlock the object
Unlock();
return hr;
}
The first thing this method does is lock the COM object.
This takes ownership of the critical section protecting the mod-
ule. Lock is implemented in the ATL CComObjectRootEx base
class. Lock is paired with the Unlock() at the end of the method.
Our COM object inherited from the ATL class IConnection-
PointImpl, which contains a list of connection points. The vari-
able m_vec is of type CComDynamicUnkArray, which holds a
dynamically allocated array of IUnknown pointers. 
Before this method is called, the client has done a consider-
able amount of set-up. Recall that the client called Advise() on
the connection point container. When Advise() was executed, it
made a copy of the client sink interface. This is the interface
saved in m_vec.
228    Chapter 13 •
Connection Points 
Because we only have one connected client sink, we get the
first pointer in the m_vec array. We call Awake() on the client
sink object. The result of this is that Awake() gets called on the
client process, causing a message box to display. Not a very
impressive result for all the work we’ve had to do.
Adding the Later2 Method
The implementation of the Later2 method is identical to the Later
method in the ISimpleCallback object. Just cut-and-paste this
code, changing only the name of the interface. The worker
thread will behave identically. When the worker thread calls the
Now2 method, it will properly navigate the connection point
map. If you had registered multiple callback interfaces, you
would iterate through the m_vec collection.
Summary
The implementation of our connection point example was
mostly a cut-and-paste modification of the callback example. The
few lines of code that are different handle the navigation of the
ATL connection point container classes.
One reason to implement connection points is the fact that
you are working with OLE clients (such IQuickActivate with
IPropertyNotifySink). Or, if you are handling multiple sink (call-
back) objects, connection points may make your life easier. Both
callbacks and connection points do approximately the same
thing, and implementing one or the other can add a lot of func-
tionality to your servers.
F
O
U
R
T
E
E
N
14
Distributed COM   
So far we haven’t ventured very far away from our computer. All
the COM examples so far have been for clients and servers run-
ning on the same machine. In this section we’ll discuss how to
extend our range into the area of DCOM and distributed comput-
ing.
There is some good and bad news here. The good news is
that converting from COM to DCOM is easy. The bad news:
there are many more things that can go wrong. Foremost among
these problems are security issues. 
An Overview of Remote Connections
Most of the differences between COM and DCOM are hidden
from the developer. For example, local COM uses LPCs (Local
Procedure Calls), and DCOM uses RPCs (Remote Procedure
Calls). As a programmer you would never notice the difference,
except that RPCs are slower. There’s also a whole new level of
security and remote activation going on. There are only a few
things in your program you’ll need to change. 
Like all COM communication, everything starts when the cli-
ent requests an interface from a server. In DCOM, the client calls
230    Chapter 14 •
Distributed COM 
CoCreateInstanceEx(), passing in a description of the server
computer, and requesting a CLSID and Interface. 
This request is handled by the Service Control Manager
(SCM), which is a part of Windows. The SCM is responsible for
the creation and activation of the COM object on the server com-
puter. In the case of DCOM, the SCM will attempt to create the
object on the remote computer.
Once the remote COM object has been created, all calls will
be marshaled through the Proxy and Stub objects. The proxy and
stub communicate using RPCs (Remote Procedure Calls) as a
mechanism. RPCs will handle all the network interaction. On the
server side, marshaling is taken care of by the stub object.
The transmittal of data across the network is taken care of
by RPCs. RPCs can run on a number of protocols, including TCP/
IP, UDP, NetBEUI, NetBIOS, and named pipes. The standard RPC
protocol is UDP (User Datagram Protocol). UDP is a connection-
less protocol, which seems like a bad fit for a connection-ori-
ented system like DCOM. This isn’t a problem however, because
RPCs automatically take care of connections. 
At the time of writing, only TCP/IP was available on Win-
dows 95. This can be an annoying limitation, requiring you to
install TCP/IP on all Windows 95 systems, even when other net-
work protocols are available.
Figure 14–1
Components of clients and servers in when using Distributed 
COM
Client Program
Proxy Object
Network Protocol Stack
SCM
RPC
Security
Hardware
COM
Object
Stub Object
Network Protocol Stack
SCM
RPC
Security
Hardware
CoCreateInstanceEx(
)
Network
Client
Computer
Server
Computer
CoCreateInstanceEx(
)
Converting a Client for Remote Access
231
Additonal Information and Updates: http://www.iftech.com/dcom
Perhaps the single most frustrating aspect of DCOM is secu-
rity. Windows 95/98 doesn’t have enough security, while Win-
dows NT seems to have too much. As always, NT security is a
complex and specialized field. There are various levels and lay-
ers of security. Our examples will only cover the most basic
uses. On a large network, it’s almost guaranteed that you’ll
spend time handling security issues for your distributed applica-
tions.
Converting a Client for Remote Access
There are two ways to connect to a remote server. You can make
slight changes to your program, or you can change the server
registration. Of these two, changing the program is the better
choice. Once the program is converted to work remotely, it will
work locally without any changes.
Changing the server registration is also a possibility. You can
put the remote connection in the registry, and COM will auto-
matically make the connection. We’ll cover this topic later.
There’s very little programming required to make a client
work with remote connections. When you create the remote
COM object you need to specify a COSERVERINFO structure.
You’ll notice that CoCreateInstance() doesn’t have a place for
this structure, so you’ll have to use CoCreateInstanceEx() instead.
The COSERVERINFO structure should be set to zero, except
for the pwszName member, which points to the server name.
This isn’t as easy as it may seem. The pwszName member is a
wide character (UNICODE) string. If you’re not already using
wide characters, you’ll need to convert a string to wide charac-
ters. There are a number of ways to do this:
• Use the mbtowc() function. This string converts a multi-
byte (char*) string to a wide string. 
• Use the CString.AllocSysString() method. 
• Use the SysAllocString and SysFreeString API. 
Here is one way to accomplish this conversion:
CString strServer = “ComputerX”;
232    Chapter 14 •
Distributed COM 
// Remote server info
COSERVERINFO cs;
// Init structures to zero
memset(&cs, 0, sizeof(cs));
// Allocate the server name in 
// the COSERVERINFO structure
cs.pwszName = strServer.AllocSysString();
The server name is usually going to be a standard UNC (uni-
versal naming convention) name. This would take the form of
"server", or "\\server". You can also use DNS names, with the
format of "www.someserver.com", or "server.com". A third
option is to specify a TCP/IP address here, e.g. "123.55.5.0". This
name will have to be compatible with your network transport.
The CoCreateInstanceEx() function takes different parame-
ters than its precursor, CoCreateInstance(). Specifically, this
extended function takes the COSERVERINFO as its 4th argument.
You can still use this call for local connections. Just pass in a
NULL for the COSERVERINFO pointer. 
Perhaps the most interesting difference is the last two
parameters.
For remote connections we obtain interface pointers a little
differently than we do for local connections. CoCreateInstan-
ceEx() takes an array of MULTI_QI structures instead of a plain
IUnknown pointer. The MULTI_QI structure receives an array of
interface pointers. This is done to reduce the number of calls to
CoCreateInstance() across the network. The designers of DCOM
did this in recognition of the fact that network performance can
be slow.
The MULTI_QI structure has the following members:
typedef struct _MULTI_QI { 
const IID* pIID; // Pointer to an interface identifier
IUnknown * pItf; // Returned interface pointer
HRESULT hr; // Result of the operation
} MULTI_QI;
You pass in an array of these structures. Each element of the
array is given an Interface ID (IID) of an interface. If the function
Converting a Client for Remote Access
233
Additonal Information and Updates: http://www.iftech.com/dcom
succeeds, you’ll get back a pointer to the interface in pItf. If
there is an error, the hr member will receive the error code. 
Here’s how to initialize the MULTI_QI structure. You can
make the array any size required (often it is just one element
long):
MULTI_QI qi[2]; // Create an array of 2 structures
memset(&qi, 0, sizeof(qi)); // zero the whole array
qi[0].pIID = &IID_IinterfaceX // add an interface 
qi[1].pIID = &IID_IinterfaceY; // add another
You pass both these structures along with the usual parame-
ters. CoCreateInstanceEx() also needs the length of the
MULTI_QI array, and a pointer to the first element.
// Create a server COM object on the server.
HRESULT hr = CoCreateInstanceEx(CLSID_CMyServer, NULL, 
CLSCTX_SERVER, &ServerInfo, 2, qi);
// check the qi codes
if (SUCCEEDED(hr))
{
// also check qi hresult
hr = qi[0].hr;
}
if (SUCCEEDED(hr))
{
// extract interface pointers from 
// MULTI_QI structure
m_pComServer = (ICpServer*)qi[0].pItf;
}
We have more than one COM status to check. CoCreateIn-
stanceEx() returns a status like every COM library call. We also
need to check the status of each element in the MULTI_QI array.
The server may return different statuses, depending on weather
the requested interface is supported. You’ll have to check the hr
member of each MULTI_QI element.
If the status is OK, the interface pointer can be extracted
from the array. The pItf member will contain a valid interface
pointer. This interface can now be used normally.
234    Chapter 14 •
Distributed COM 
Once the connection has been established, there are no dif-
ferences between COM and DCOM. All the DCOM extensions
work equally well for local connections. You’ll hear this referred
as Local/Remote Transparency. This is one of the most powerful
features of COM.
Adding Security
Once you start connecting to the outside world, you will quickly
run into a multitude of security issues. Security is an area where
there are significant differences between Windows NT and Win-
dows 95/98. In general, NT provides a rich and bewildering set
of security options. Window 95/98 on the other hand, provides
the bare minimum required to exist on a network. Many of the
concepts that follow apply primarily to Window NT. Window 95
is inherently insecure. 
Generally COM has reasonable defaults for most security
settings. By using DCOMCNFG and some basic settings, you can
get most client/server systems to run. If you need a high level of
security, you’ll need to delve into the many levels of COM secu-
rity. Here we will cover the basic tools used to control COM
security to help get you started.See the error-handling appendix
for further details.
Security Concepts
DCOM has numerous levels of security. Many of DCOM’s secu-
rity features are borrowed from other subsystems. RPCs provide
the basis for COM security, and many of the concepts used come
directly from RPCs.
The most basic security level of DCOM is provided by the
network. Most networks provide some level of login security. If
the local area network is a Windows NT domain, for example,
network logins are managed and restricted by the domain con-
troller. Having a secure network environment goes a long way
towards making the DCOM environment secure. 
Access Permissions
235
Additonal Information and Updates: http://www.iftech.com/dcom
Of course, some networks must provide relatively open
access to users. If you provide access to guest accounts, other
domains or a large user community, things are going to be wide
open. It’s only a matter of time before someone starts hacking
your systems.
There is also some basic network security. Most networks
check to ensure that all data packets are legitimate. This means
the network may filter out altered or damaged network traffic.
This also adds a significant level of security to DCOM.
Access Permissions
DCOM runs on top of RCPs, and inherits much of its security
from the RPC mechanism. Fortunately, RPCs have been around
for quite awhile and have developed a good set of security tools.
Much of what follows is actually RPC-based security that has
been piggybacked into DCOM.
Access permission security determines if a particular user
has access to your COM application. Access security checking is
done for the entire application (or process). Depending on the
object, you may allow only certain users to have access, or you
can deny access to particular users. For a Windows NT domain,
the administrator has probably set up special users and groups,
otherwise you’ll get the default groups.
DCOM gets a security descriptor from the registry. This
value is stored as a binary array under the AppID key. DCOM
checks this value against that of the caller.
[HKEY_CLASSES_ROOT \AppID{}]
"AccessPermission" = hex: Security ID
DCOM sets up defaults for access security. If an application
requires more security, it can drill down into more sophisticated
security implementation. Checking can be done for the object,
for the method call, and even for the individual parameters of
the method call.
236    Chapter 14 •
Distributed COM 
You can either allow or deny permission to any user, or
group of users. 
Windows 95/98 has very weak user level security. For Win-
dows 95/98, the user information will be provided by some
other system on the network. Usually this would be the domain
controller.
If you try to connect to a server without sufficient access
permission, you will probably get the "Access Denied" error. 
Launch Permissions
Launch Security determines if a caller can create a new COM
object in a new process. Once the server has been launched, this
permission does not apply.
When a client requests a new COM object, it does not create
it directly. COM itself is responsible for the creation of the object.
Before it creates the object, it checks to see if the caller has per-
mission to do so.
Because DCOM allows remote activation, any computer on
the network can try to start a server. Your COM objects are
potentially vulnerable to anyone on your network. Good security
practices require that COM doesn’t even start the object if the
caller doesn’t have permission to use it.
Launch permission for an application is defined in the
AppID key.
[HKEY_CLASSES_ROOT \AppID{}]
"LaunchPermission" = hex: Security ID
A security ID is a unique number that identifies a logged-on user. The SID can also represent groups of
users, such has Administrators, Backup Operators, and Guests. This SID is unique and is valid on the local
system and the network (provided there is a domain controller controlling the network). The system
always uses the SID to represent a user instead of a user name.
What is a Security ID?................
Authentication
237
Additonal Information and Updates: http://www.iftech.com/dcom
Windows 95/98 doesn’t have the user level security features
to control the launch of an object. Because of this limitation,
Windows 95/98 doesn’t even try to launch remote applications.
This means that the server must already be running on a Win-
dows 95/98 system. 
You can pre-start the server application interactively. This
will run the server as the desktop user. The remote object can
then connect to the object. Unfortunately, when the remote user
disconnects, if it is the only connected client Windows 95/98 will
shut down the server. The next time the remote user tries to con-
nect, they will get an error because the server won’t re-start
itself.
The work-around is pretty simple. You can write a bare-
bones client that connects to the server locally from the Win-
dows 95/98 computer. As long as this client is connected, the
server will have an active reference count and will remain avail-
able. You can put this program in the startup menu, thus making
the server available as long as somebody is logged into the desk-
top. Windows NT has no such restrictions.
Authentication
Authentication means confirming that the client or server are
who they claim to be. The subsystem that provides authentica-
tion is known as the "authentication-service" provider. There are