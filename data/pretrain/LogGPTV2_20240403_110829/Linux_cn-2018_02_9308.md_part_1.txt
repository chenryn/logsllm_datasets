---
author: Julia Evans
category: 容器与云
comments_data: []
count:
  commentnum: 0
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 4260
date: '2018-02-03 23:41:21'
editorchoice: false
excerpt: "在我刚开始学习 Kubernetes（大约是一年半以前吧？）时，我真的不明白为什么应该去关注它。\r\n\r\n在我使用 Kubernetes
  全职工作了三个多月后，我才逐渐明白了为什么我应该使用它。"
fromurl: https://jvns.ca/blog/2017/10/05/reasons-kubernetes-is-cool/
id: 9308
islctt: true
largepic: /data/attachment/album/201802/03/234107htpn7qntr02q6qos.jpg
permalink: /article-9308-1.html
pic: /data/attachment/album/201802/03/234107htpn7qntr02q6qos.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: "在我刚开始学习 Kubernetes（大约是一年半以前吧？）时，我真的不明白为什么应该去关注它。\r\n\r\n在我使用 Kubernetes
  全职工作了三个多月后，我才逐渐明白了为什么我应该使用它。"
tags:
- Kubernetes
- 容器
thumb: false
title: 为什么 Kubernetes 很酷
titlepic: true
translator: qhwdw
updated: '2018-02-03 23:41:21'
---
![](/data/attachment/album/201802/03/234107htpn7qntr02q6qos.jpg)
在我刚开始学习 Kubernetes（大约是一年半以前吧？）时，我真的不明白为什么应该去关注它。
在我使用 Kubernetes 全职工作了三个多月后，我才逐渐明白了为什么我应该使用它。（我距离成为一个 Kubernetes 专家还很远！）希望这篇文章对你理解 Kubernetes 能做什么会有帮助！
我将尝试去解释我对 Kubernetes 感兴趣的一些原因，而不去使用 “ 原生云   cloud native ”、“ 编排系统   orchestration ”、“ 容器   container ”，或者任何 Kubernetes 专用的术语 :)。我去解释的这些观点主要来自一位 Kubernetes 操作者/基础设施工程师，因为，我现在的工作就是去配置 Kubernetes 和让它工作的更好。
我不会去尝试解决一些如 “你应该在你的生产系统中使用 Kubernetes 吗？”这样的问题。那是非常复杂的问题。（不仅是因为“生产系统”根据你的用途而总是有不同的要求）
### Kubernetes 可以让你无需设置一台新的服务器即可在生产系统中运行代码
我首次被说教使用 Kubernetes 是与我的伙伴 Kamal 的下面的谈话：
大致是这样的：
* Kamal： 使用 Kubernetes 你可以通过一条命令就能设置一台新的服务器。
* Julia： 我觉得不太可能吧。
* Kamal： 像这样，你写一个配置文件，然后应用它，这时候，你就在生产系统中运行了一个 HTTP 服务。
* Julia： 但是，现在我需要去创建一个新的 AWS 实例，明确地写一个 Puppet 清单，设置服务发现，配置负载均衡，配置我们的部署软件，并且确保 DNS 正常工作，如果没有什么问题的话，至少在 4 小时后才能投入使用。
* Kamal: 是的，使用 Kubernetes 你不需要做那么多事情，你可以在 5 分钟内设置一台新的 HTTP 服务，并且它将自动运行。只要你的集群中有空闲的资源它就能正常工作！
* Julia: 这儿一定是一个“坑”。
这里有一种陷阱，设置一个生产用 Kubernetes 集群（在我的经险中）确实并不容易。（查看 [Kubernetes 艰难之旅](https://github.com/kelseyhightower/kubernetes-the-hard-way) 中去开始使用时有哪些复杂的东西）但是，我们现在并不深入讨论它。
因此，Kubernetes 第一个很酷的事情是，它可能使那些想在生产系统中部署新开发的软件的方式变得更容易。那是很酷的事，而且它真的是这样，因此，一旦你使用一个运作中的 Kubernetes 集群，你真的可以仅使用一个配置文件就在生产系统中设置一台 HTTP 服务（在 5 分钟内运行这个应用程序，设置一个负载均衡，给它一个 DNS 名字，等等）。看起来真的很有趣。
### 对于运行在生产系统中的代码，Kubernetes 可以提供更好的可见性和可管理性
在我看来，在理解 etcd 之前，你可能不会理解 Kubernetes 的。因此，让我们先讨论 etcd！
想像一下，如果现在我这样问你，“告诉我你运行在生产系统中的每个应用程序，它运行在哪台主机上？它是否状态很好？是否为它分配了一个 DNS 名字？”我并不知道这些，但是，我可能需要到很多不同的地方去查询来回答这些问题，并且，我需要花很长的时间才能搞定。我现在可以很确定地说不需要查询，仅一个 API 就可以搞定它们。
在 Kubernetes 中，你的集群的所有状态 – 运行中的应用程序 (“pod”)、节点、DNS 名字、 cron 任务、 等等 —— 都保存在一个单一的数据库中（etcd）。每个 Kubernetes 组件是无状态的，并且基本是通过下列方式工作的：
* 从 etcd 中读取状态（比如，“分配给节点 1 的 pod 列表”）
* 产生变化（比如，“在节点 1 上运行 pod A”）
* 更新 etcd 中的状态（比如，“设置 pod A 的状态为 ‘running’”）
这意味着，如果你想去回答诸如 “在那个可用区中有多少台运行着 nginx 的 pod？” 这样的问题时，你可以通过查询一个统一的 API（Kubernetes API）去回答它。并且，你可以在每个其它 Kubernetes 组件上运行那个 API 去进行同样的访问。
这也意味着，你可以很容易地去管理每个运行在 Kubernetes 中的任何东西。比如说，如果你想要：
* 部署实现一个复杂的定制的部署策略（部署一个东西，等待 2 分钟，部署 5 个以上，等待 3.7 分钟，等等）
* 每当推送到 github 上一个分支，自动化 [启动一个新的 web 服务器](https://github.com/kamalmarhubi/kubereview)
* 监视所有你的运行的应用程序，确保它们有一个合理的内存使用限制。
这些你只需要写一个程序与 Kubernetes API（“controller”）通讯就可以了。