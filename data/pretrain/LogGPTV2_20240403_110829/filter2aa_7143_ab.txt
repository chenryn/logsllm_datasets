```bash
git log     # 查看 commit 历史
git checkout xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  # 跳转到指定的 commit 版本中
```
---
### 子模块
有种情况经常会遇到：某个工作中的项目需要包含并使用另一个项目。也许是第三方库，或者你独立开发的，用于多个父项目的库。
现在问题来了：你想要把它们当做两个独立的项目，同时又想在一个项目中使用另一个。
假设你正在开发一个网站然后创建了 Atom 订阅。 你决定使用一个库，而不是写自己的 Atom 生成代码。你可能不得不通过 CPAN 安装或 Ruby gem 来包含共享库中的代码，或者将源代码直接拷贝到自己的项目中。如果将这个库包含进来，那么无论用何种方式都很难定制它，部署则更加困难，因为你必须确保每一个客户端都包含该库。 如果将代码复制到自己的项目中，那么你做的任何自定义修改都会使合并上游的改动变得困难。
Git 通过子模块来解决这个问题。子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。
```bash
git submodule add https://github.com/No-Github/1earn        # 添加一个名为 1earn 的库
# 默认情况下，子模块会将子项目放到一个与仓库同名的目录中，本例中是 1earn , 如果你想要放到其他地方，那么可以在命令结尾添加一个不同的路径。
```
运行 git status
```bash
$ git status
On branch master
Your branch is up to date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD ..." to unstage)
        new file:   .gitmodules
        new file:   1earn
```
首先应当注意到新的 .gitmodules 文件。 该配置文件保存了项目 URL 与已经拉取的本地目录之间的映射：
```
[submodule "1earn"]
	path = 1earn
	url = https://github.com/No-Github/1earn
```
如果有多个子模块，该文件中就会有多条记录。 要重点注意的是，该文件也像 .gitignore 文件一样受到（通过）版本控制。 它会和该项目的其他部分一同被拉取推送。 这就是克隆该项目的人知道去哪获得子模块的原因。
当你提交时，会看到类似下面的信息：
```bash
$ git commit -m "test add module"
[master e214ed0] test add module
 2 files changed, 4 insertions(+)
 create mode 100644 .gitmodules
 create mode 160000 1earn
注意 1earn 记录的 160000 模式。 这是 Git 中的一种特殊模式，它本质上意味着你是将一次提交记作一项目录记录的，而非将它记录成一个子目录或者一个文件。
```
最后，推送这些更改：
```bash
$ git push origin master
```
---
### 大小写
git 默认对于文件名大小写是不敏感的,所以你修改了首字母大写,但是 git 并没有发现代码任何改动.
可以配置 git 使其对文件名大小写敏感
```bash
git config core.ignorecase false
```
---
## 远程操作
多人协作的工作模式通常是这样:
- 首先，可以试图用 `git push origin branch-name` 推送自己的修改;
- 如果推送失败，则因为远程分支比你的本地更新，需要先用 `git pull` 试图合并;
- 如果合并有冲突，则解决冲突，并在本地提交;
- 没有冲突或者解决掉冲突后，再用 `git push origin branch-name` 推送就能成功!
- 如果 `git pull` 提示 `"no tracking information"`，则说明本地分支和远程分支的链接关系没有创建，用命令 `git branch --set-upstream branch-name origin/branch-name`
---
### clone
`git clone  `
---
### remote
```bash
git remote          # 命令列出所有远程主机
git remote -v       # 参看远程主机的网址
origin  PI:EMAIL:jquery/jquery.git (fetch)
origin  PI:EMAIL:jquery/jquery.git (push)
git remote add            # 用于添加远程主机
git remote rm                   # 用于删除远程主机
git remote rename   # 用于远程主机的改名
```
---
### fetch
git fetch 会使你与另一仓库同步，提取你本地所没有的数据，为你在同步时的该远端的每一分支提供书签. 这些分支被叫做 "远端分支"，除了 Git 不允许你检出(切换到该分支)之外，跟本地分支没区别 —— 你可以将它们合并到当前分支，与其他分支作比较差异，查看那些分支的历史日志，等等.同步之后你就可以在本地操作这些.
```bash
git fetch   # 将某个远程主机的更新，全部取回本地
git branch 命令的 -r 选项，可以用来查看远程分支，-a 选项查看所有分支.
git branch -r
git branch -a
```
上面命令表示，本地主机的当前分支是 master，远程分支是 origin/master.
取回远程主机的更新以后，可以在它的基础上，使用 `git checkout` 命令创建一个新的分支.
```bash
git checkout -b newBrach origin/master
上面命令表示，在 origin/master 的基础上，创建一个新分支.
此外，也可以使用 git merge 命令或者 git rebase 命令，在本地分支上合并远程分支.
git merge origin/master
或者
git rebase origin/master
上面命令表示在当前分支上，合并 origin/master.
```
---
### pull
基本上，该命令就是在 `git fetch` 之后紧接着 `git merge` 远端分支到你所在的任意分支.
```bash
git pull  : # 取回远程主机某个分支的更新，再与本地的指定分支合并.
git pull origin next:master             # 取回 origin 主机的 next 分支，与本地的 master 分支合并
```
**pull 文件时和本地文件冲突**
`git stash` 先将本地修改存储起来
这样本地的所有修改就都被暂时存储起来 .是用 `git stash list` 可以看到保存的信息:
```
stash@{0}: WIP on master: xxxxxxx 
```
暂存了本地修改之后，就可以 `git pull` 了.
还原暂存的内容 `git stash pop stash@{0}`
提示如下信息
```
Auto-merging c/environ.c
CONFLICT (content): Merge conflict in c/environ.c
```
意思就是系统自动合并修改的内容，但是其中有冲突，需要解决其中的冲突.
也可以放弃本地修改，直接覆盖之
```
git reset --hard
git pull
```
---
### push
```bash
git push  :     # 将本地分支的更新，推送到远程主机
git push origin master  # 本地的 master 分支推送到 origin 主机的 master 分支.如果后者不存在，则会被新建.
如果远程主机的版本比本地版本更新，推送时 Git 会报错，要求先在本地做 git pull 合并差异，然后再推送到远程主机.这时，如果你一定要推送，可以使用 --force 选项.
git push --force origin
上面命令使用 --force 选项，结果导致远程主机上更新的版本被覆盖.除非你很确定要这样做，否则应该尽量避免使用 --force 选项.
```
---
### github
- **github 开启二次验证后后，git push 验证权限失败**
    github 开启二次验证后，提交时密码用个人设置里的 Personal Access Token，不是账号密码
- **Git Push 避免用户名和密码方法**
    在 windows 中添加一个用户变量，变量名:HOME,变量值:%USERPROFILE%
    进入 `%HOME%` 目录，新建一个名为 `_netrc` 的文件，文件中内容格式如下:
    ```bash
    machine github.com
    login your-usernmae
    password Personal Access Token
    ```
- **压缩 github 上的项目大小**
    下载工具 https://rtyley.github.io/bfg-repo-cleaner/
    将下载好的 jar 文件放在要压缩的项目同级文件夹下,我这里以自己仓库为例
    ```bash
    # 删除大于 1M 的文件
    java -jar bfg.jar --strip-blobs-bigger-than 1M 1earn
    # 删除所有的 mp4 文件
    java -jar bfg.jar --delete-files *.mp4 1earn
    ```
    BFG 将更新提交以及所有分支和标记，此时还没有物理删除。
    进入文件夹，使用 `gc`
    ```bash
    cd 1earn
    git reflog expire --expire=now --all && git gc --prune=now --aggressive
    ```
    确认无误后,可提交至远程仓库
    ```bash
    git push
    git push --force origin     # 如果报错可以强行推送
    ```
- **重建版本库**
    ```bash
    rm -rf .git
    git init
    git add .
    git cm "first commit"
    git remote add origin 
    git push -f -u origin master
    ```
- **Github 进行 fork 后如何与原仓库同步**
    ```bash
    git remote -v               # 查看你的远程仓库的路径
    # 如果只有上面2行，说明你未设置 upstream
    git remote add upstream https://github.com/xxx/xxx.git  # 把 xxx 的仓库设置为你的 upstream
    git remote -v               # 检查是否成功
    git fetch upstream          # 抓取上游更新
    git checkout master         # 切换到 master 分支
    git merge upstream/master   # 合并远程的 master 分支
    ```
---
### Git_LFS
> Git Large File Storage (Git LFS) 是 Git 的开源扩展，使你能够像处理其他文本文件一样处理大文件。
**安装**
- Windows: 访问 https://git-lfs.github.com/ 下载 exe 安装包
验证安装成功
```bash
$ git lfs install
> Git LFS initialized.
```
**配置**
安装 [Git LFS] 后 (/articles/installing-git-large-file-storage/)，需要将其与仓库中的大文件相关联。
如果仓库中存在要用于 GitHub 的现有文件，则需要先从仓库中删除它们，然后在本地将其添加到 Git LFS。
```bash
# 将当前工作目录更改为要用于 Git LFS 的现有仓库。
cd 1earn
# 要将仓库中的文件类型与 Git LFS 相关联，请输入 git lfs track，后跟要自动上传到 Git LFS 的文件扩展名。
git lfs track "*.zip"
# 要与 Git LFS 关联的每个文件类型都需要添加 git lfs track。 此命令将修改仓库的 .gitattributes 文件，并将大文件与 Git LFS 相关联。
git commit -m "add file.zip"
git push
# 或推送所有引用的 Git LFS 文件
git lfs push --all origin
```
**常见报错**
- **Error with socks5 proxy**
    Git LFS 目前不支持 socks5 代理,换 http 代理
    ```bash
    git config --global http.proxy 'http://127.0.0.1:1080'
    ```
---
## Source & Reference
- [521xueweihan/git-tips: Git的奇技淫巧](https://github.com/521xueweihan/git-tips)
- [git配置代理命令](https://www.cnblogs.com/gx1069/p/6840413.html)
- [git操作及fatal: Authentication failed for错误解决](https://blog.csdn.net/u011394598/article/details/80256896)
- [github开启二次验证后后，git push验证权限失败](https://www.jianshu.com/p/d7ae993b4506)
- [Git Push 避免用户名和密码方法](https://www.cnblogs.com/ballwql/p/3462104.html)
- [Git远程操作详解](https://www.ruanyifeng.com/blog/2014/06/git_remote.html)
- [Git 的 .gitignore 配置](https://www.cnblogs.com/haiq/archive/2012/12/26/2833746.html)
- [Git初始配置和基本使用](https://blog.csdn.net/daily886/article/details/80140720)
- [让Git的输出更友好: 多种颜色和自定义log格式](https://blog.csdn.net/lts_cxl/article/details/17282725)
- [使用git pull文件时和本地文件冲突怎么办？](http://www.01happy.com/git-resolve-conflicts/)
- [Git冲突：commit your changes or stash them before you can merge. ](https://blog.csdn.net/lincyang/article/details/21519333)
- [git commit中输入message的几种方式 ](https://www.jianshu.com/p/ad461b99e860)
- [git commit 提交多行message](https://blog.csdn.net/sinat_29891353/article/details/76674798)
- [如何撤销 Git 操作？](http://www.ruanyifeng.com/blog/2019/12/git-undo.html)
- [关于 .git 目录你需要知道的一切](http://einverne.github.io/post/2020/02/everything-about-dot-git-directory.html)
- [git checkout到历史某个版本_赶路人儿-CSDN博客_git checkout指定版本](https://blog.csdn.net/liuxiao723846/article/details/70313287)
- [git 修改刚刚的commit](https://blog.csdn.net/qiulinsama/article/details/90703160)
- [Github进行fork后如何与原仓库同步：重新fork很省事，但不如反复练习版本合并 #67](https://github.com/selfteaching/the-craft-of-selfteaching/issues/67)
- [7.11 Git 工具 - 子模块](https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97)
- [Error with socks5 proxy #1424](https://github.com/git-lfs/git-lfs/issues/1424)