然后就是修改注册表了，在注册表位置为：`HKCU\Software\Classes\CLSID\`下创建项`{b5f8350b-0548-48b1-a6ee-88bd00b4a5e7}`，然后再创建一个子项`InprocServer32`，默认为我们的`dll`文件路径：`C:\Users\qiyou\AppData\Roaming\Microsoft\Installer\{BCDE0395-E52F-467C-8E3D-C4579291692E}`，再创建一个键`ThreadingModel`，其键值为：`Apartment`
然后就是测试了，打开`iexplore.exe`，成功弹框
PS：`{b5f8350b-0548-48b1-a6ee-88bd00b4a5e7}`对应`CAccPropServicesClass`，`{BCDE0395-E52F-467C-8E3D-C4579291692E}`对应`MMDeviceEnumerator`
## 劫持MruPidlList
在注册表位置为`HKCU\Software\Classes\CLSID\`下创建项`{42aedc87-2188-41fd-b9a3-0c966feabec1}`，再创建一个子项`InprocServer32`，默认的键值为我们的dll路径，再创建一个键`ThreadingModel`，其键值：`Apartment`
该注册表对应`COM`对象`MruPidlList`，作用于`shell32.dll`，而`shell32.dll`是Windows的32位外壳动态链接库文件，用于打开网页和文件，建立文件时的默认文件名的设置等大量功能。其中`explorer.exe`会调用`shell32.dll`，然后会加载COM对象`MruPidlList`，从而触发我们的`dll`文件
当用户重启时或者重新创建一个`explorer.exe`进程时，就会加载我们的恶意dll文件，从而达到后门持久化的效果。这里我们直接结束一个`explorer.exe`进程再起一个进程来看一下效果
## office系列
### Word WLL
把dll文件保存在`%APPDATA%\Microsoft\Word\Startup`，然后把后缀名改为`wll`  
PS：`Startup`支持启动多个`wll`
打开`word`，成功弹框  
### Excel XLL
`Excel dll`的编写可以参考三好师傅这个项目：[链接](https://github.com/3gstudent/Add-Dll-Exports
"链接")  
用三好师傅powershell脚本生成现成的`Excel dll`：[链接](https://github.com/3gstudent/Office-Persistence "链接")
将生成的DLL文件复制到`%appdata%\Microsoft\AddIns`目录下，然后再修改一下注册表，`office`版本对应的注册表位置如下：
    office2003 — HKEY_CURRENT_USER\Software\Microsoft\Office\11.0\
    office2007 — HKEY_CURRENT_USER\Software\Microsoft\Office\12.0\
    office2010 — HKEY_CURRENT_USER\Software\Microsoft\Office\14.0\
    office2013 — HKEY_CURRENT_USER\Software\Microsoft\Office\15.0\
    office2016 — HKEY_CURRENT_USER\Software\Microsoft\Office\16.0\
我这里使用的2010的，所以我们要修改的是`HKEY_CURRENT_USER\Software\Microsoft\Office\14.0\Excel\Options`，添加一个键`OPEN`，键值为：`/R
test.dll`  
然后打开`Excel`，发现成功弹出计算器  
### PowerPoint VBA add-ins
用三好师傅powershell脚本生成现成的`PowerPoint
dll`：[链接](https://github.com/3gstudent/Office-Persistence "链接")
将生成的DLL文件复制到`%appdata%\Microsoft\AddIns`目录下，然后参考前面我给出的`office`版本对应的注册表位置，在`HKEY_CURRENT_USER\Software\Microsoft\Office\14.0\PowerPoint`下新建一个子项：`AddIns`，然后在`AddIns`下面新建一个子项`test`，新建一个键为`Autoload`，类型为`DWORD`，键值为：`1`；新建一个键为`Path`，类型为`SZ`，键值为我们`dll`文件的路径
打开`PowerPoint`成功弹出计算器
## 文件关联
什么是文件关联
    文件关联就是将一种类型的文件与一个可以打开它的程序建立起一种依存关系。一个文件可以与多个应用程序发生关联。可以利用文件的“打开方式”进行关联选择。
    举个例子来说，位图文件（BMP文件）在Windows中的默认关联程序是“图片”，如果将其默认关联改为用ACDSee程序来打开，那么ACDSee就成了它的默认关联程序。
    PS：来自百度百科
我们可以用`assoc`命令显示或修改文件扩展名关联，我们可以看一下`.txt`文件的关联
我们可以用`ftype`命令显示或修改用在文件扩展名关联中的文件类型
相关注册表
    HKEY_CURRENT_USER\Software\Classe    //保存了当前用户的类注册和文件扩展名信息
    HKEY_LOCAL_MACHINE\Software\Classe   //保存了系统所有用户用户的类注册和文件扩展名信息
    HKEY_CLASS_ROOT                      //HKEY_CLASSES_ROOT项提供合并来自上面两个的信息的注册表的视图
我们以`.txt`为例，通过文件关联来修改它默认打开的程序。  
修改`\HKEY_CLASS_ROOT\txtfile\shell\open\command`的默认值为我们要执行的程序
效果如下：
## AppInit_DLLs
`User32.dll`被加载到进程时，会读取`AppInit_DLLs`注册表项，如果有值，调用`LoadLibrary() api`加载用户dll。
其注册表位置为：`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows
NT\CurrentVersion\Windows\AppInit_DLLs`，把`AppInit_DLLs`的键值设置为我们dll路径，将`LoadAppInit_DLLs`设置为1
效果如下：
## Netsh helper
`netsh`（全称：`Network Shell`）
是`windows`系统本身提供的功能强大的网络配置命令行工具，它可以添加自定的dll从而拓展其功能，我们可以使用`netsh add helper
yourdll.dll`来添加拓展功能，添加了之后，在启动`netsh`的时候就会加载我们dll文件
添加自定义`helper dll`  
关于`helper dll`的编写可以参考这个项目：[链接](https://github.com/outflanknl/NetshHelperBeacon
"链接")
我们可以使用两种方式来添加helper：
  1. 通过cmd添加helper
        netsh add helper test.dll
  2. 通过注册表添加helper  
其位置为：`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\NetSh`，创建一个键，名称随便，键值为我们dll的路径
效果如下：  
## 利用BITS
`BITS` (后台智能传送服务) 是一个 Windows
组件，它可以在前台或后台异步传输文件，为保证其他网络应用程序获得响应而调整传输速度，并在重新启动计算机或重新建立网络连接之后自动恢复文件传输。
`bitsadmin`是一个命令行工具，用于创建下载或上传任务并监视其进度。你可以执行`bitsadmin /?`或`bitsadmin
/HELP`获取帮助列表。
常见的`bitsadmin`命令
    bitsadmin /create [type] DisplayName //创建一个任务
    bitsadmin /cancel  //删除一个任务
    bitsadmin /list /allusers /verbose //列出所有任务
    bitsadmin /AddFile    //给任务test添加一个下载文件
    bitsadmin /SetNotifyCmdLine   [ProgramParameters] //设置在任务完成传输时或任务进入状态时将运行的命令行命令。
    bitsadmin /Resume  //激活传输队列中的新任务或挂起的任务。
    bitsadmin /cancel  //删除某个任务
    bitsadmin /reset /allusers //删除所有任务
    bitsadmin /complete  //完成某个任务
下面我们来测试一下：
    bitsadmin /create test
    bitsadmin /addfile test c:\windows\system32\calc.exe c:\Users\qiyou\Desktop\calc.exe //为了方便起见我们直接复制本地文件
    bitsadmin /SetNotifyCmdLine test cmd.exe "cmd.exe /c calc.exe"
    bitsadmin /resume test
效果如下：  
重启电脑之后任务还是存在
重启电脑之后任务会再一次被激活，大概几分钟之后我们的命令会再次执行（由于时间太长了就不录制gif了）
如果我们想让任务完成，可以执行`bitsadmin /complete test`，`calc.exe`也会复制到桌面上
## 利用inf文件实现后门
`inf`文件
    INF文件或安装信息文件是Microsoft Windows用于安装软件和驱动程序的纯文本文件。INF文件最常用于安装硬件组件的设备驱动程序。Windows包含用于创建基于INF的安装的IExpress工具。INF文件是Windows安装程序API及其后续版本Windows Installer的一部分。
    PS：来自WIKI
`inf`文件的结构  
想了解更多可以看一下微软的手册：`https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc939869(v=technet.10)#information-inf-file-entries`
    1. DefaultInstall节（来自WIKI）
    INF文件的结构与INI文件的结构非常类似; 它包含用于指定要复制的文件，对注册表的更改等的各个部分。所有INF文件都包含一个[Version]带有Signature 键值对的部分，用于指定INF文件所针对的Windows版本。签名通常是$CHICAGO$（对于Windows 9x）或$WINDOWS NT$（对于Windows NT / 2K / XP）。其余大多数部分是用户定义的，并且包含特定于要安装的组件的信息。
    2. DefaultInstall节（来自微软的手册）
        RunPreSetupCommands-本节中指定的命令在安装服务配置文件之前运行。
        RunPostSetupCommands-本节中指定的命令在安装程序完成服务配置文件后运行。
        RunPreUnInstCommands-本节中指定的命令在卸载程序开始之前运行。
        RunPostUnInstCommands-本节中指定的命令在卸载程序运行后运行。
下面举一个`calc.inf`弹计算器的例子
    [Version]
    Signature="$CHICAGO$"
    AdvancedINF=2.5,"test"
    [DefaultInstall]
    RunPreSetupCommands=Command1
    [Command1]
    C:\windows\system32\calc.exe
命令行下执行：
    rundll32.exe advpack.dll,LaunchINFSection calc.inf,DefaultInstall
效果如下：  
后门实现：  
在注册表`HKEY_CURRENT_USER\Software\Microsoft\`处依次新建子项`\IEAK\GroupPolicy\PendingGPOs`，然后再新建几个键，如下：
  1. 键：`Count`，类型：`REG_DWORD`，键值：`1`
  2. 键：`Path1`，类型：`REG_SZ`，键值：`C:\Users\Administrator\Desktop\test\calc.inf` //这个为我们inf文件的路径，这里以上面那个inf文件例子为例
  3. 键：`Section1`，类型：`REG_SZ`，键值：`DefaultInstall`
如下图所示：  
重启电脑之后成功弹出计算器
但是重启之后`PendingGPOs`该项就会被清除，需要我们重新修改注册表
# 后记
以上就是我所总结后门持久化的所有内容了，当然还有很多方法没有在文章内提及，虽然有的方法都是老生常谈的了，但是还是在一些实战环境中屡试不爽，有一句话说的好（这句话忘记是哪位师傅说的了=。=）：
**知识面宽度决定攻击面广度，知识链深度决定攻击链的长度**
# Reference