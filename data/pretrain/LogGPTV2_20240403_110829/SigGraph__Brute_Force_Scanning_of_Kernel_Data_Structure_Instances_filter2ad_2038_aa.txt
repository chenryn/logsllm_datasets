title:SigGraph: Brute Force Scanning of Kernel Data Structure Instances
Using Graph-based Signatures
author:Zhiqiang Lin and
Junghwan Rhee and
Xiangyu Zhang and
Dongyan Xu and
Xuxian Jiang
SigGraph: Brute Force Scanning of Kernel Data Structure Instances Using
Graph-based Signatures
Zhiqiang Lin†,
Junghwan Rhee†, Xiangyu Zhang†, Dongyan Xu†, Xuxian Jiang‡
†Dept. of Computer Science and CERIAS
‡Dept. of Computer Science
Purdue University
North Carolina State University
{zlin, rhee, xyzhang, dxu}@cs.purdue.edu
PI:EMAIL
Abstract
Brute force scanning of kernel memory images for ﬁnd-
ing kernel data structure instances is an important func-
tion in many computer security and forensics applications.
Brute force scanning requires effective, robust signatures of
kernel data structures. Existing approaches often use the
value invariants of certain ﬁelds as data structure signa-
tures. However, they do not fully exploit the rich points-
to relations between kernel data structures.
In this pa-
per, we show that such points-to relations can be lever-
aged to generate graph-based structural invariant signa-
tures. More speciﬁcally, we develop SigGraph, a frame-
work that systematically generates non-isomorphic signa-
tures for data structures in an OS kernel. Each signature
is a graph rooted at a subject data structure with its edges
reﬂecting the points-to relations with other data structures.
Our experiments with a range of Linux kernels show that
SigGraph-based signatures achieve high accuracy in recog-
nizing kernel data structure instances via brute force scan-
ning. We further show that SigGraph achieves better robust-
ness against pointer value anomalies and corruptions, with-
out requiring global memory mapping and object reachabil-
ity. We demonstrate that SigGraph can be applied to kernel
memory forensics, kernel rootkit detection, and kernel ver-
sion inference.
1
Introduction
Given a kernel data structure deﬁnition, identifying in-
stances of that data structure in a kernel memory image is
an important capability in memory image forensics [28, 11,
22, 37, 34], kernel integrity checking [26, 10, 13, 27, 8], and
virtual machine introspection [15, 18, 25]. Many state-of-
the-art solutions rely on the ﬁeld value invariant exhibited
by a data structure (i.e., a ﬁeld with either constant value
or value in a ﬁxed range) as its signature [38, 35, 13, 9, 8].
Unfortunately, many kernel data structures cannot be cov-
ered by the value-invariant scheme. For example, some data
structures do not have ﬁelds with invariant values or value
ranges. It is also possible that an invariant-value ﬁeld be
corrupted, making the corresponding data structure instance
un-recognizable. Furthermore, some value invariant-based
signatures may not be unique enough to distinguish them-
selves from others. For example, a signature that demands
the ﬁrst ﬁeld to have value 0 may generate a lot of false
positives.
We present a complementary scheme for kernel data
structure signatures. Different from the value-invariant-
based signatures, our approach, called SigGraph, uses a
graph structure rooted at a data structure as its signature.
More speciﬁcally, for a data structure with pointer ﬁeld(s),
each pointer ﬁeld – identiﬁed by its offset from the start of
the data structure – points to another data structure. Tran-
sitively, such points-to relations entail a graph structure
rooted at the original data structure. We observe that data
structures with pointer ﬁelds widely exist in OS kernels. For
example, when compiling the whole package of Linux ker-
nel 2.6.18-1, we found that over 40% of all data structures
have pointer ﬁeld(s). Compared with the ﬁeld values of data
structures, the “topology” of kernel data structures (formed
by “points-to” relations) is more stable. As such, SigGraph
has the promise to uniquely identify kernel data structures
with pointers.
A salient feature of SigGraph-based signatures is that
they can be used for brute force scanning: Given an arbi-
trary kernel memory address x, a signature (more precisely,
a memory scanner based on it) can decide if an instance
of the corresponding data structure exists in the memory
region starting at x. As such, SigGraph is different from
the global “top-down” scanning employed by many mem-
ory mapping techniques (e.g., the ones for software debug-
ging [30] and kernel integrity checking [26, 10]). Global
“top-down” scanning is enabled by building a global points-
to graph for a subject program – rooted at its global vari-
ables and expanding to its entire address space. Instances
of the program’s data structures can then be identiﬁed by
traversing the global graph starting from the root. On
the other hand, brute force scanning is based on multiple,
context-free points-to graphs – each rooted at a distinct data
structure. Unlike global scanning, brute force scanning
does not require that a data structure instance be “reach-
able” from a global variable in order to be recognized, hence
achieving higher robustness against attacks that tamper with
such global reachability (an example of such attack is pre-
sented in Section 8.1).
To enable brute force scanning, SigGraph faces the new
challenge of data structure isomorphism: The signatures of
different data structures, if not judiciously determined, may
be isomorphic, leading to false positives in data structure in-
stance recognition. To address this challenge, we formally
deﬁne data structure isomorphism and develop an algorithm
to compute unique, non-isomorphic signatures for kernel
data structures. From the signatures, data structure-speciﬁc
kernel memory scanners are automatically generated using
context-free grammars. To improve the practicality of our
solution, we propose a number of heuristics to handle prac-
tical issues (e.g., some pointers being null). Interestingly,
we obtain two important observations when developing Sig-
Graph: (1) The wealth of points-to relations between kernel
data structures allows us to generate multiple signatures for
the same data structure. This is particularly powerful when
operating under malicious pointer mutation attacks, thus
raising the bar to evade SigGraph. (2) The rich points-to
relations also allow us to avoid complex, expensive points-
to analysis of kernel source code for void pointer handling
(e.g., as proposed in [10]). Distinct data structure signatures
can be generated without involving the generic pointers.
We have performed extensive evaluation on SigGraph-
based signatures with several Linux kernels and veriﬁed the
uniqueness of the signatures. Our signatures achieve low
false positives and zero false negatives when applied to data
structure instance recognition in kernel memory images.
Furthermore, our experiments show that SigGraph works
without global memory maps and in the face of a range of
kernel attacks that manipulate pointer ﬁelds, demonstrating
its applicability to kernel rootkit detection. Finally, we show
that SigGraph can also be used to determine the version of
a guest OS kernel, a key pre-requisite of virtual machine
introspection.
2 Overview
2.1 Problem Statement and Challenges
SigGraph exploits
the inter-data structure points-
to relations
to generate non-isomorphic data struc-
ture signatures. Consider seven simpliﬁed Linux ker-
nel data structures,
four of which are shown in Fig-
ure 1(a)-(d). In particular, task struct(TS) contains
four pointers to thread info(TI), mm struct(MS),
linux binfmt(LB), and TS, respectively. TI has a
pointer to TS whereas MS has two pointers: One points
to vm area struct(VA) (not shown in the ﬁgure) and
the other is a function pointer. LB has one pointer to
module(MD).
At runtime, if a pointer is not null, its target object
should have the type of the pointer. Let ST (x) denote a
boolean function that decides if the memory region starting
at x is an instance of type T and let ∗x denote the value
stored at x. Take task struct data structure as an ex-
ample, we have the following rule, assuming all pointers
are not null.
STS(x) → STI(∗(x + 0)) ∧ SMS(∗(x + 4)) ∧
SLB(∗(x + 8)) ∧ STS(∗(x + 12))
(1)
It means that if STS(x) is true, then the four pointer
ﬁelds must point to regions with the corresponding types
and hence the boolean functions regarding these ﬁelds must
be true. Similarly, we have the following
STI(x) → STS(∗(x + 0))
SMS(x) → SVA(∗(x + 0)) ∧ SFP(∗(x + 4))
SLB(x) → SMD(∗(x + 0))
(2)
(3)
(4)
for thread info, mm struct, and linux binfmt,
respectively.
Substituting symbols in rule (1) using
rules (2), (3) and (4), we further have
STS(x) → STS(∗(∗(x + 0) + 0)) ∧ SVA(∗(∗(x + 4) + 0))∧
SFP(∗(∗(x + 4) + 4)) ∧ SMD(∗(∗(x + 8) + 0)))
∧STS(∗(x + 12))
(5)
The rule corresponds to the graph shown in Figure 1(e),
where the nodes represent pointer ﬁelds with their shapes
denoting pointer types; the edges represent the points-to
relations with their weights indicating the pointers’ off-
sets; and the triangles represent recursive occurrences of the
same pattern. It means that if the memory region starting at
x is an instance of task struct, the layout of the region
must follow the graph’s deﬁnition. Note that the inference
of rule (5) is from left to right. However, we observe that
the graph is so unique that the reverse inference (“bottom-
up”) tends to be true. In other words, we can use the graph
as the signature of task struct and perform the reverse
inference as follows.
STS(x) ← STS(∗(∗(x + 0) + 0)) ∧ SVA(∗(∗(x + 4) + 0))∧
SFP(∗(∗(x + 4) + 4)) ∧ SMD(∗(∗(x + 8) + 0)))
∧STS(∗(x + 12))
(6)
Different from the global memory mapping techniques
(e.g., [30, 26, 10, 28, 34, 11, 22]) SigGraph aims at deriv-
ing unique signatures for individual data structures for brute
force kernel memory scanning. Hence we face the follow-
ing new challenges:
• Avoiding signature isomorphism: Given a static data
structure deﬁnition, we aim to construct its points-to
graph as shown in the task struct example. How-
ever, it is possible that two distinct data structures may
lead to isomorphic graphs which cannot be used to dis-
tinguish instances of the two data structures. Hence
our new challenge is to identify the sufﬁcient and nec-
essary conditions to avoid signature isomorphism be-
tween data structures.
Figure 1. A working example of kernel data structures and a graph(cid:173)based data structure signature.
The triangles indicate recursive deﬁnitions
• Generating signatures: Meanwhile it is possible that
one data structure may have multiple unique signa-
tures, depending on how (especially, how deep) the
points-to edges are traversed when generating a sig-
nature. In particular, among the valid signatures of a
data structure, ﬁnding the minimal signature that has
the smallest size while retaining uniqueness (relative
to other data structures) is a combinatorial optimiza-
tion problem. Finally, it is desirable to automatically
generate a scanner for each signature that will perform
the corresponding data structure instance recognition
on a memory image.
• Improving recognition accuracy: Although stati-
cally a data structure may have a unique signature
graph, at runtime, pointers may be null whereas non-
pointer ﬁelds may have pointer-like values. As a result
the data structure instances in a memory image may
not fully match the signature. We need to handle such
issues to improve recognition accuracy.
2.2 System Overview
An overview of the SigGraph system is shown in Fig-
ure 2. It consists of four key components: (1) data structure
deﬁnition extractor, (2) dynamic proﬁler, (3) signature gen-
erator, and (4) scanner generator. To generate signatures,
SigGraph ﬁrst extracts data structure deﬁnitions from the
OS source code. This is done automatically through a com-
piler pass (Section 3). To handle practical issues such as
null pointers and void* pointers, the proﬁler identiﬁes
problematic pointer ﬁelds via dynamic analysis (Section 6).
The signature generator checks if non-isomorphic signa-
tures exist for the data structures and if so, generates such
signatures (Section 4). The generated signatures are then
automatically converted to the corresponding kernel mem-
ory scanners (Section 5), which are the “product” shipped
to users. A user will simply run these scanners to perform
brute-force scanning over a kernel memory image (either
memory dump or live memory), with the output being the
instances of the data structures in the image.
3 Data Structure Deﬁnition Extraction
SigGraph’s data structure deﬁnition extractor adopts a
compiler-based approach, where the compiler pass is de-
vised to walk through the source code and extract data struc-
ture deﬁnitions. It is robust as it is based on a full-ﬂedged
language front-end.
In particular, our development is in
gcc-4.2.4. The compiler pass takes abstract syntax trees
(ASTs) as input as they retain substantial symbolic infor-
mation [1]. The compiler-based approach also allows us to
handle data structure in-lining, which occurs when a data
structure has a ﬁeld that is of the type of another structure;
After compilation, the ﬁelds in the inner structure become
ﬁelds in the outer structure. Furthermore, we can easily see
through type aliases introduced by typedef via ASTs.
The output of the compiler pass is the data structure def-
initions – with offset and type for each ﬁeld – extracted
in a canonical form. The pass is inserted into the com-
pilation work-ﬂow right after data structure layout is ﬁn-
ished (in stor-layout.c). During the pass, the AST of
each data structure is traversed. If the data structure type is
struct or union, its ﬁeld type, offset, and size informa-
tion is dumped to a ﬁle. To precisely reﬂect the ﬁeld layout
after in-lining, we ﬂatten the nested deﬁnitions and adjust
offsets.
We note that source code availability is not a fundamen-
tal requirement of SigGraph. For a close-source OS (e.g.,
Windows), if debugging information is provided along with
the binary, SigGraph can simply leverage the debugging
information to extract the data structure deﬁnitions. Oth-
erwise, data structure reverse engineering techniques (e.g.,
REWARDS [21] and TIE [20]) can be leveraged to extract
data structure deﬁnitions from binaries.
4 Signature Generation
Suppose a data structure T has n pointer ﬁelds with off-
sets f1, f2, ..., fn and types t1, t2, ..., tn. A predicate St(x)
determines if the region starting at address x is an instance
of t. The following production rule can be generated for T :
ST (x) → St1 (∗(x + f1)) ∧ St2 (∗(x + f2)) ∧ ...
∧Stn (∗(x + fn))
(7)
Data Structure 
Def inition Extractor
Signature Generator
Operating 
System
Dynamic Prof iler
Signature Production
Memory Dump
/ Live Memory
Signatures
Scanner
Generator
Scanners
Data Structure 
Instances
Signature Usage
Figure 2. SigGraph system overview
Brute force memory scanning is based on the reverse of
the above rule: Given a kernel memory image, we hope
to identify instances of a data structure by trying to match
the right-hand side of the rule (as a signature) with mem-
ory content starting at any location. Although it is generally
difﬁcult to infer the types of memory at individual locations
based on the memory content, it is more feasible to infer
if a memory location contains a pointer and hence to iden-
tify the layout of pointers with high conﬁdence. This can
be done recursively by following the pointers to the destina-
tion data structures. As such, the core challenge in signature
generation is to ﬁnd a ﬁnite graph induced by points-to re-
lations (including pointers, pointer ﬁeld offsets, and pointer
types) that uniquely identiﬁes a target data structure, which
will be the root of the graph. For convenience of discus-
sion, we assume for now that pointers are not null and
they each have an explicit type (i.e., not a void pointer).
We will address the cases where this assumption does not
hold in Section 6.
As noted earlier, two distinct data structures may have
isomorphic structural patterns. For example, if two data
structures have the same pointer ﬁeld layout, we need to
further look into the “next-hop” data structures (we call
them lower layer data structures) via the points-to edges.
Moreover, we observe that even though the pointer ﬁeld lay-
out of a data structure may be unique (different from any
other data structure), an instance of such layout in memory
is not necessary an instance of that data structure. Con-
sider Figure 3(a), data structures A and X have different lay-
outs for their pointer ﬁelds. If the program has only these
two data structures, it appears that we can use their one
level pointer structures as their signatures. However, this
is not true. Consider the memory segment at the bottom of
Figure 3(a), in which we detect three pointers (the boxed
bytes). It appears that SA(0xc80b20f 0) is true because it
ﬁts the one-level structure of struct A. But it is possible
that the three pointers are instead the instances of ﬁelds x2,
x3, and x4 in struct X and hence the region is part of
an instance of struct X. In other words, a pattern scan-
ner based on struct A will generate false positives on
struct X. The reason is that the structure of A coincides
with the sub-structure of X. As we will show later in Sec-
tion 7, such coincidences are very common.
To better model the isomorphism issue, we introduce the
concept of immediate pointer pattern (IPP) that describes
the one-level pointer structure as a string such that the afore-
mentioned problem can be detected by deciding if an IPP is
the substring of another IPP.
Deﬁnition 1. Given a data structure T , let its pointer ﬁeld
offsets be f1, f2, ..., and fn, pointing to types t1, t2, ..., and
tn, resp. Its immediate pointer pattern, denoted as IP P (T ),
is deﬁned as follows. IP P (T ) = f1 · t1 · (f2 − f1) · t2 ·
(f3 − f2) · t3 · ... · (fn − fn−1) · tn.
We say an IP P (T ) is a sub-pattern of IP P (R) if g1 ·
r1 · (f2 − f1) · r2 · (f3 − f2) · ... · (fn − fn−1) · rn is a
substring of IP P (R), with g1 >= f1 and r1, ..., rn being
any pointer type.
Intuitively, an IP P describes the types of the pointer
ﬁelds and their intervals. An IP P (T ) is a sub-pattern of
IP P (R) if the pattern of pointer ﬁeld intervals of T is a
sub-pattern of R’s, disregarding the types of the pointers. It
also means that we cannot distinguish an instance of T from
an instance of R in memory if we do not look into the lower
layer structures. For instance in Figure 3(a), IP P (A) =
0·B·12·C·6·D and IP P (X) = 8·Y ·28·BB·12·CC·6·DD.
IP P (A) is a sub-pattern of IP P (X).
Deﬁnition 2. Replacing a type t in a pointer pattern with
t−→.
“(IP P (t))” is called one pointer expansion, denoted as
A pointer pattern of a data structure T is a string generated
by a sequence of pointer expansions from IP P (T ).
For example, assume the deﬁnitions of B and D can be
found in Figure 3(b).
IP P (A) = 0 · B · 12 · C · 6 · D
B
−→ 0 · (0 · E · 4 · B) · 12 · C · 6 · D
(1)
D
−→ 0 · (0 · E · 4 · B) · 12 · C · 6 · (4 · I)
(2)
(8)
Strings (1) and (2) above are both pointer patterns of A.
The pointer patterns of a data structure are candidates for
its signature. As one data structure may have many pointer
patterns, the challenge becomes to algorithmically identify
the unique pointer patterns of a given data structure so that
instances of the data structure can be identiﬁed from mem-
ory by looking for satisfactions of the pattern without caus-
ing false positives. If efﬁciency is a concern, the minimal
pattern should be identiﬁed.
struct A {
  [0]  struct B * a1;
    ...
  [12] struct C * a2;
    ...
  [18] struct D * a3;
}
struct X {
    ...
  [8]  struct Y  * x1; 
    ...
  [36] struct BB * x2;
    ...
  [48] struct CC * x3;
    ...
  [54] struct DD * x4;
}
c80b20e0: 00 00 00 00 01 20 00 32
c80b20f0: c8 40 30 b0 00 00 00 00
c80b2100: 00 00 c8 41 00 22 00 00
0a 00 00 00 00 ae ff 00
00 10 00 00 c8 40 42 30
00 10 00 00 00 00 00 00
struct B {
  [0]  E * b1;
  [4]  B * b2;
}
struct BB {
  [0]  EE * bb1;
  [4]  BB * bb2;
}
struct D {
    ...
  [4]  I * d1;
}
struct E {
    ...
  [12] G * e1;
    ...    
  [24] H * e3;
}
struct EE {
    ...
  [12] GG * ee1;
     ...    
  [24] HH * ee3;
}
struct DD {
    ...
  [8]  II * dd1;
}
B/BB
0
+4
E/EE
B/BB
+12
+24
G/GG
H/HH
(i) definitions
(ii) structures of B and BB
(a) Insufﬁciency of pointer layout uniqueness
(b) Data structure isomorphism
Figure 3. Examples illustrating the signature isomorphism problem
Existence of Signature. The ﬁrst question we need to an-
swer is whether a unique pointer pattern exists for a given
data structure. According to the previous discussion, given
a data structure T , if its IP P is a sub-pattern of another data
structure’s IP P (including the case in which they are iden-
tical). We cannot use the one-layer structure as the signature