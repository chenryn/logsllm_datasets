implemented  which  vary  in  the  number  of  pair-wise 
swaps 
neighboring 
configuration. Local Search N uses N pair-wise swaps 
such that two benchmarks are involved in each switch 
for Local Search 1, while all benchmarks are swapped 
for Local Search 4. Local Search 1 makes a swap and 
then  runs  that  schedule  for  the  next  4  million  cycle 
interval.  If  performance  improves,  it  keeps  that  new 
configuration; otherwise, it selects another neighbor of 
the original solution. The comparison is made using the 
average of the normalized ED2 (with respect to the ED2
of the previous interval) of the two threads involved in 
the swap. Local Search 2 and Local Search 4 have an 
additional  feature 
their  performance. 
Instead  of  collectively  accepting  or  rejecting  all  the 
swaps  made  in  an  interval,  beneficial  pair-wise  swaps 
are  kept  and  others  discarded.  From  the  results  in 
Figure  7,  the  additional  pair-wise  swaps  of  Local 
Search 2 and Local Search 4 significantly improves the 
algorithm;  the  ED2  increase  achieved  with  one,  two, 
and  four  pair-wise  swaps  each  interval  is  15.0%, 
12.6%,  and  7.8%,  respectively.  Moreover,  Local 
Search  4  significantly  outperforms  global  search.  The 
error  bars  show  that  Local  Search  4  is  also  less 
sensitive  to  the  initial  assignment  due  to  its  ability  to 
more rapidly search the space of possible assignments.
improve 
to 
5.3. Overall Comparison
In  Figure  8,  we  compare  all 
the  scheduling 
algorithms  to  the  non-degraded  chip  multiprocessor. 
The offline oracle scheduler achieves 3.1% better ED2
than the CMP without degradation. This occurs due to 
the  fact  that  some  of  the  some  of  the  degraded  cores 
operate  at  lower  power,  due  to  lower  frequency  or 
failed components that are power gated. Consequently, 
an omniscient scheduler can find an assignment that is 
more power/performance efficient than the baseline.
Moreover,  both  the  Hungarian  and  Local  Search  4 
scheduling algorithms achieve ED2 values very close to 
the  non-degraded  baseline  –  higher  only  by  3.2%  and 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE49DSN 2008: Winter & Albonesi3.7%,  respectively  –  compared  to  the  over  22% 
degradations  with  naïve  schedulers.  Thus,  intelligent 
scheduling  will  be  critical  to  maintaining  acceptable 
levels of power/performance efficiency on future CMPs 
degraded by wear-out and variations.
e
v
i
t
a
l
e
R
2
y
a
l
e
D
x
y
g
r
e
n
E
n
i
e
s
a
e
r
c
n
I
n
o
i
t
a
d
a
r
g
e
D
o
N
h
t
i
w
e
n
i
l
e
s
a
B
o
t
50.00%
40.00%
30.00%
20.00%
10.00%
0.00%
-10.00%
Workload 1 Workload 2 Workload 3 Workload 4
Average
Offline Oracle
Worst Case
Benchmark Group
Round Robin
Hungarian Policy
Randomized
Local Search 4
Figure 8: Overall comparison
6. Conclusions
In  future  CMPs,  variations  and  hard  errors  will 
conspire  to  create  dynamic  heterogeneity  among  the 
cores. Unlike statically designed heterogeneous CMPs, 
the unpredictability of manufacturing defects, wear-out 
mechanisms,  and  variations  will  require  self-tuning 
scheduling  techniques  that  efficiently  find  a  near-
optimal  schedule given  any  degraded  CMP  scenario, 
thereby  making  the  chip  degradation  imperceptible  to 
the user. In this paper, we devise a number of different 
scheduling  algorithms  for  finding  near-optimal  thread 
to core assignments in a degraded CMP. 
We  first  demonstrate  that  simple  policies,  such  as 
round  robin  scheduling,  degrade  ED2  to  the  point  that 
the  chip  may  be  rendered  unusable.  Under 
the 
assumption  of  limited  core-to-core  interaction,  we 
observe  that  the  scheduling  problem  reduces  to  the 
Assignment Problem and can be addressed through the 
Hungarian Algorithm. We devise a scheduler based on 
this algorithm that achieves an ED2 close to that of an 
oracle scheduler. We further develop schedulers based 
on AI search techniques that obviate the requirement of 
limited core-to-core interaction, and that better scale to 
large  CMP  organizations.  The  most  scalable  and 
effective  of  these  policies  rapidly  arrives  at  a  near-
optimal solution that degrades ED2 by only 3.7% over a 
non-degraded  architecture,  compared  to  over  22%  for 
simple approaches. 
For  future  work,  we  plan  to  investigate  algorithms 
for CMPs with tens to hundreds of cores, and those that 
address  workloads  containing  a  mix  of  parallel  and 
sequential applications.
Acknowledgements
The  authors  thank  Ken  Birman  for  his  valuable 
feedback,  Paula  Petrica  for  her  help  with 
the 
submission, and the anonymous referees for their useful 
comments.  This  research  is  supported  by  NSF  grants 
CCF-0732300 and CCF-0541321.
References
[1]  N.  Aggarwal,  P.  Ranganathan,  N.P.  Jouppi,  and  J.  E. 
Smith.  Configurable  Isolation:  Building  High  Availability 
Systems  with  Commodity  Multi-Core 
Processors. 
International Symposium on Computer Architecture (ISCA), 
2007.
[2]  S.  Balakrishnan,  R.  Rajwar,  M. Upton, and K. Lai. The 
Impact  of  Performance  Asymmetry  in  Emerging  Multicore 
Architectures. 
International  Symposium  on  Computer 
Architecture (ISCA), 2005. 
[3] M. Becchi and P. Crowley. Dynamic Thread Assignment 
on  Heterogeneous  Multiprocessor  Architectures.  ACM 
International  Conference  on  Computing  Frontiers  (CF), 
2006, pp. 29-39.
[4]  S.  Borkar,  T.  Karnik,  S.  Narendra,  J.  Tschanz,  A. 
Keshavarzi, and V. De. Parameter Variations and Impact on 
Circuits 
and  Microarchitecture.  Design  Automation 
Conference (DAC), 21.1, 2003, pp. 338-342.
[5] F. A. Bower, D. J. Sorin, and S. Ozev. A Mechanism for 
Online  Diagnosis  of  Hard  Faults 
in  Microprocessors. 
International  Symposium  on  Microarchitecture  (MICRO), 
2005.
[6]  D.  Brooks,  V.  Tiwari,  and  M.  Martonosi.  Wattch:  A 
Framework  for  Architectural-Level  Power  Analysis  and 
Optimizations. 
International  Symposium  on  Computer 
Architecture (ISCA), 2000, pp. 83-94.
[7]  P.  Chaparro,  J.  González,  G.  Magklis,  Q.  Cai,  and  A.
González. Understanding the Thermal Implications of Multi-
Core  Architectures.  IEEE  Transactions  on  Parallel  and 
Distributed Systems (TPDS), 18, 8, 2007, pp. 1055-1065.
[8] J. Donald and M. Martonosi. Techniques for Multi-Core 
Thermal  Management:  Classification  and  New  Exploration. 
International Symposium on Computer Architecture (ISCA), 
2006.
[9]  S.  Ghiasi,  T.  Keller,  and  F.  Rawson.  Scheduling  for 
Heterogeneous  Processors 
in  Server  Systems.  ACM 
International  Conference  on  Computing  Frontiers  (CF), 
2005, pp. 199-210.
[10]  E.  Humenay,  D.  Tarjan,  and  K.  Skadron.  Impact  of 
Parameter  Variations  on  Multi-Core  Chips.  Workshop  on 
Architectural  Support  for  Gigascale  Integration  (ASGI), 
2006.
[11]  E.  Humenay,  D.  Tarjan,  and  K.  Skadron.  Impact  of 
Process  Variations  on  Multi-Core  Performance  Symmetry. 
Design, Automation and Test in Europe (DATE), 2007.
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE50DSN 2008: Winter & Albonesiin  Engineering. 
[26] J. Renau, B. Fraguela, J. Tuck, W. Liu, M. Prvulovic, L. 
Ceze,  S.  Sarangi,  P.  Sack,  K.  Strauss,  and  P.  Montesinos. 
SESC Simulator. http://sesc.sourceforge.net, 2005.
[27]  S.M.  Sait  and  H.  Youssef.  Iterative  Computer 
IEEE 
Algorithms  with  Applications 
Computer Society, Los Alamitos, CA, 1999.
[28]  E.  Schuchman  and  T.N.  Vijaykumar.  Rescue:  A 
Microarchitecture  for  Testability  and  Defect  Tolerance. 
International Symposium on Computer Architecture (ISCA), 
2005.
[29]  P.  Shivakumar,  S.W.  Keckler,  CR.  Moore,  and  D. 
Burger.  Exploiting  Microarchitectural  Redundancy 
for 
Defect  Tolerance.  International  Conference  on  Computer 
Design (ICCD), 2003.
[30]  S.  Shyam,  K.  Constantinides,  S.  Phadke,  V.  Bertacco, 
and  T.  Austin.  Ultra  Low-Cost  Defect  Protection  for 
Microprocessor  Pipelines.  International  Conference  on 
Architectural  Support  for  Programming  Languages  and 
Operating Systems (ASPLOS), 2006.
[31]  K.  Skadron,  M.R.  Stan,  W.  Huang,  S.  Velusamy,  K. 
Sankaranarayanan,  and  D.  Tarjan.  Temperature-Aware 
Microarchitecture.  International  Symposium  on  Computer 
Architecture (ISCA), 2003, pp. 2-13.
[32] J. Srinivasan, S.V. Adve, P. Bose, and J.A. Rivers. The 
Case 
for  Lifetime  Reliability-Aware  Microprocessors. 
International Symposium on Computer Architecture (ISCA), 
2004.
[33]  J.  Srinivasan,  S.V.  Adve,  P.  Bose,  and  J.A.  Rivers. 
Exploiting  Structural  Duplication  for  Lifetime  Reliability 
Enhancement. 
International  Symposium  on  Computer 
Architecture (ISCA), 2005.
[34] K. Stavrou and P. Trancoso. Thermal-Aware Scheduling 
for  Future  Chip  Multiprocessors.  EURASIP  Journal  on 
Embedded Systems, 2007.
[35]  D.  Tarjan, S. Thoziyoor, and N.P. Jouppi. CACTI 4.0. 
HP Laboratories Palo Alto Technical Report HPL-2006-86,
2006.
[36] Y. Zhang, D. Parikh, K. Sankaranarayanan, K. Skadron, 
and  M.  Stan.  HotLeakage:  A  Temperature-Aware  Model  of 
Subthreshold  and  Gate  Leakage 
for  Architects.  The 
University  of  Virginia,  Department  of  Computer  Science, 
Technical Report CS-2003-05, 2003.
Parallel 
Computation 
on 
Units. 
[12] C. Isci, A. Buyuktosunoglu, C-Y. Cher, P. Bose, and M. 
Martonosi.  An  Analysis  of  Efficient  Multi-Core  Global 
Power Management Policies: Maximizing Performance for a 
Given  Power  Budget. 
International  Symposium  on 
Microarchitecture (MICRO), 2006.
[13]  P.  Juang,  Q.  Wu,  L-S.  Peh,  M.  Martonosi,  and  D.  W. 
Clark. Coordinated, Distributed, Formal Energy Management 
of  CMP  Multiprocessors.  International  Symposium  on  Low
Power Electronics and Design (ISLPED), 2005.
[14]  R.  Kumar,  D.  M.  Tullsen,  and  N.P.  Jouppi.  Core 
Architecture  Optimization 
for  Heterogeneous  Chip 
Multiprocessors. 
International  Symposium  on  Parallel 
Architectures  and  Compilation  Techniques  (PACT),  2006, 
pp. 23-32.
[15] R. Kumar, D.M. Tullsen, P. Ranganathan, N.P. Jouppi, 
and  K.  I.  Farkas.  Single-ISA  Heterogeneous  Multi-Core 
Architectures  for  Multithreaded  Workload  Performance. 
International Symposium on Computer Architecture (ISCA), 
2004.
[16]  J.  Li  and  J.F.  Martínez.  Dynamic  Power-Performance 
Adaptation 
of 
Chip 
Multiprocessors. 
International  Symposium  on  High-
Performance Computer Architecture (HPCA), 2006.
[17]  X.  Liang  and  D.  Brooks.  Microarchitecture  Parameter 
Selection  To  Optimize  System  Performance  Under  Process 
Variation.  International  Conference  on  Computer-Aided 
Design (ICCAD), 2006, pp. 429-436.
[18]  X.  Liang  and  D.  Brooks.  Mitigating  the  Impact  of 
Process  Variations  on  Processor  Register  Files  and 
Execution 
on 
Microarchitecture (MICRO), 2006. 
[19]  A.J.  Martin.  Towards  an  Energy  Complexity  of 
Computation. Information Processing Letters. 77, 2001, pp.
181-187.
[20]  A.  Merkel  and  F.  Bellosa.  Balancing  Power 
Consumption in Multiprocessor Systems. EuroSys, 2006, pp. 
403-413.
[21] 
for  Assignment  and 
Transportation Problems. Journal of the Society of Industrial 
and Applied Mathematics. 5(1), 1957, pp. 32-38.
[22]  S.  Ozdemir,  D.  Sinha,  G.  Memik,  J.  Adams,  and  H. 
Zhou.  Yield-Aware  Cache  Architectures. 
International 
Symposium on Microarchitecture (MICRO), 2006.
[23]  R.A.  Pilgrim.  Munkres’  Assignment  Algorithm.
http://csclab.murraystate.edu/bob.pilgrim/445/munkres.html, 
2008.
[24]  M.D.  Powell,  M.  Gomaa,  and  T.N.  Vijaykumar.  Heat-
and-Run:  Leveraging  SMT  and  CMP  to  Manage  Power 
Density  Through 
the  Operating  System.  International 
Conference  on  Architectural  Support  for  Programming 
Languages  and  Operating  Systems  (ASPLOS),  2004,  pp. 
260-270. 
[25] C.R. Reeves (Editor). Modern Heuristic Techniques for 
Combinatorial  Problems.  McGraw-Hill  Book  Company, 
London, UK, 1995.
J.  Munkres.  Algorithms 
International 
Symposium 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE51DSN 2008: Winter & Albonesi