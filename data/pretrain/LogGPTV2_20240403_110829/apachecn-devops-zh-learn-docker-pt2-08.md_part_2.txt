```
这里，名为`example`的源容器链接到以`ex`为别名的接收容器。
5.  让我们使用`cat`命令显示收件人容器的`/etc/hosts`文件的内容:
```
 / # cat /etc/hosts
 172.17.0.4 a17e5578b98e
 127.0.0.1 localhost
 ::1 localhost ip6-localhost ip6-loopback
 fe00::0 ip6-localnet
 ff00::0 ip6-mcastprefix
 ff02::1 ip6-allnodes
 ff02::2 ip6-allrouters
 72.17.0.3 ex
```
当然，一如既往，`/etc/hosts`文件中的第一个条目是容器的 IP 地址及其主机名。但是，`/etc/hosts`文件中值得注意的条目是最后一个条目，其中源容器的 IP 地址(`172.17.0.3`)及其别名(`ex`)是自动添加的。
6.  我们将继续使用`env`命令显示接收者容器的环境变量:
```
 / # env
 HOSTNAME=a17e5578b98e
 SHLVL=1
 HOME=/root
 EX_NAME=/berserk_mcclintock/ex
 TERM=xterm
 PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
 PWD=/
```
显然，一个新的`EX_NAME`环境变量被自动添加到`/berserk_mcclintock/ex`中，作为其值。这里`EX`是别名`ex`的大写形式，`berserk_mcclintock`是收件人容器的自动生成名称。
7.  最后一步，使用广泛使用的`ping`命令 ping 源容器两次，并使用别名作为 ping 地址:
```
 / # ping -c 2 ex
 PING ex (172.17.0.3): 56 data bytes
 64 bytes from 172.17.0.3: seq=0 ttl=64 
 time=0.108 ms
 64 bytes from 172.17.0.3: seq=1 ttl=64 
 time=0.079 ms
 --- ex ping statistics ---
 2 packets transmitted, 2 packets received, 
 0% packet loss
 round-trip min/avg/max = 0.079/0.093/0.108 ms
```
显然，源容器的别名`ex`被解析为`172.17.0.3` IP 地址，并且接收者容器能够成功到达源。在安全容器通信的情况下，不允许在容器之间进行 ping 操作。我们将在[第 11 章](11.html)、*保护 Docker 容器*中看到关于保护容器方面的更多细节。
在前面的例子中，我们可以将两个容器链接在一起，并且还可以通过更新接收容器的`/etc/hosts`文件中源容器的 IP 地址来观察容器之间是如何优雅地联网的。
下一个示例是演示容器链接如何将源容器的环境变量导出到接收容器，这些变量是使用`docker run`子命令的`-e`选项或`Dockerfile`的`ENV`指令配置的。为此，我们将使用`ENV`指令创建一个名为`Dockerfile`的文件，构建一个映像，使用该映像启动一个源容器，然后通过将其链接到源容器来启动一个接收容器:
1.  我们从用`ENV`指令编写`Dockerfile`开始，如下所示:
```
      FROM busybox:latest 
      ENV BOOK="Learning Docker"  \
          CHAPTER="Orchestrating Containers" 
```
这里，我们设置了两个环境变量，`BOOK`和`CHAPTER`。
2.  使用前面的`Dockerfile`中的`docker build`子命令继续构建 Docker 映像`envex`:
```
      $ sudo docker build -t envex .
```
3.  现在，让我们使用刚刚构建的`envex`映像启动一个名为`example`的交互式源容器:
```
      $ sudo docker run -it --rm \
 --name example envex
```
4.  在源容器提示符下，通过调用`env`命令显示所有环境变量:
```
 / # env
 HOSTNAME=b53bc036725c
 SHLVL=1
 HOME=/root
 TERM=xterm
 PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
 BOOK=Learning Docker
 CHAPTER=Orchestrating Containers
 PWD=/
```
在前面所有的环境变量中，`BOOK`和`CHAPTER`变量都是用`Dockerfile`的`ENV`指令配置的。
5.  最后一步，为了说明环境变量的`ENV`类别，使用`env`命令启动接收者容器，如下所示:
```
 $ sudo docker run --rm --link example:ex \
 busybox:latest env
 PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
 HOSTNAME=a5e0c07fd643
 TERM=xterm
 EX_NAME=/stoic_hawking/ex
 EX_ENV_BOOK=Learning Docker
 EX_ENV_CHAPTER=Orchestrating Containers
 HOME=/root
```
[https://github.com/thedocker/learning-docker/blob/master/chap08/Dockerfile-Env](https://github.com/thedocker/learning-docker/blob/master/chap08/Dockerfile-Env)
引人注目的是，在前面的输出中，前缀为`EX_`的变量是容器链接的结果。我们感兴趣的环境变量是`EX_ENV_BOOK`和`EX_ENV_CHAPTER`，它们最初是通过`Dockerfile`设置为`BOOK`和`CHAPTER`，但作为容器链接的效果修改为`EX_ENV_BOOK`和`EX_ENV_CHAPTER`。虽然环境变量名被翻译，但是存储在这些环境变量中的值保持不变。我们已经在前面的例子中讨论了`EX_NAME`变量名。
在前面的例子中，我们体验了 Docker 如何优雅而轻松地将`ENV`类别变量从源容器导出到接收容器。这些环境变量与源和接收方完全分离，因此一个容器中这些环境变量的值的变化不会影响另一个容器。更准确地说，接收方容器接收的值是在源容器启动期间设置的值。在源容器启动后，对这些环境变量的值所做的任何更改对接收容器都没有影响。收件人容器何时启动并不重要，因为这些值是从 JSON 文件中读取的。
在我们链接容器的最后一个示例中，我们将向您展示如何利用 Docker 功能来共享两个容器之间的连接细节。为了共享容器之间的连接细节，Docker 使用了环境变量的`PORT`类别。以下是制作两个容器并在它们之间共享连接细节的步骤:
1.  使用`EXPOSE`指令加工一个`Dockerfile`露出端口`80`和`8080`，如下图所示:
```
      FROM busybox:latest 
      EXPOSE 8080 80 
```
2.  使用我们刚才创建的`Dockerfile`中的`docker build`子命令，通过运行以下命令，继续构建`portex` Docker 映像:
```
      $ sudo docker build -t portex .
```
3.  现在，让我们使用早期构建的`portex`映像启动一个名为`example`的交互式源容器:
```
      $ sudo docker run -it --rm --name example portex
```
4.  现在我们已经启动了源容器，让我们通过将其链接到源容器来继续在另一个终端上创建接收者容器，并调用`env`命令来显示所有环境变量，如下所示:
```
 $ sudo docker run --rm --link example:ex \
 busybox:latest env
 PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
 HOSTNAME=c378bb55e69c
 TERM=xterm
 EX_PORT=tcp://172.17.0.4:80
 EX_PORT_80_TCP=tcp://172.17.0.4:80
 EX_PORT_80_TCP_ADDR=172.17.0.4
 EX_PORT_80_TCP_PORT=80
 EX_PORT_80_TCP_PROTO=tcp
 EX_PORT_8080_TCP=tcp://172.17.0.4:8080
 EX_PORT_8080_TCP_ADDR=172.17.0.4
 EX_PORT_8080_TCP_PORT=8080
 EX_PORT_8080_TCP_PROTO=tcp
 EX_NAME=/prickly_rosalind/ex
 HOME=/root
```
[https://github.com/thedocker/learning-docker/blob/master/chap08/Dockerfile-Expose](https://github.com/thedocker/learning-docker/blob/master/chap08/Dockerfile-Expose)
从前面的`env`命令输出中，很明显 Docker 引擎为每个端口导出了一组四个`PORT`类别环境变量，这些变量是使用`Dockerfile`中的`EXPOSE`指令公开的。此外，Docker 还导出了另一个`PORT`类别变量`EX_PORT`。
## 容器的编排
IT 领域中编排的开创性概念已经存在了很长时间。例如，在**服务计算** ( **供应链**)领域，服务编排的理念以前所未有的方式蓬勃发展，以产生和维持高度健壮和弹性的服务。离散的或原子的服务没有任何实质性的用途，除非它们以特定的顺序组合在一起，以导出过程感知的复合服务。由于编排服务在向外部世界表达和展示其可识别/可发现、可互操作、可用和可组合的服务形式的独特能力方面对企业更具战略优势，因此企业对拥有易于搜索的服务存储库(原子和复合)表现出了极大的兴趣。该存储库反过来又支持企业实现大规模数据和流程密集型应用。很明显，服务的多样性对于组织的发展和壮大至关重要。这一越来越强制性的需求通过使用经验证且有希望的编排功能得到了认知上的解决。
现在，随着我们快速趋向于容器化的信息技术环境，应用和数据容器应该智能地组合起来，以实现大量新一代软件服务。
然而，为了生产高度胜任的协调容器，需要精心选择特定目的容器和不可知容器，并以正确的顺序启动，以便创建协调容器。序列可以来自过程(控制和数据)流程图。手动完成这项复杂而令人生畏的活动会引发一系列嘲讽和批评。幸运的是，Docker 空间中有一些编排工具，可以方便地构建、运行和管理多个容器来构建企业级服务。Docker 公司一直负责生产和促进受 Docker 启发的容器的生成和组装，已经推出了标准化和简化的编排工具(命名为`docker-compose`)，以减少开发人员和系统管理员的工作量。
供应链范例的成熟组合技术在这里被复制到激烈的容器化范例中，以便获得容器化最初设想的好处，特别是在构建强大的应用感知容器方面。
**微服务架构** ( **MSA** )是一个架构概念，旨在通过将软件解决方案的功能分解到离散服务池中来分离软件解决方案。这是通过对许多原则应用架构级别来实现的。管理服务协议正慢慢成为设计和构建大规模信息技术和业务系统的一种受支持的方式。它不仅促进了松散耦合和软件模块化，而且有利于敏捷世界的持续集成和部署。对应用的一部分所做的任何更改都要求对整个应用进行大规模更改。这是持续部署方面的一个祸根和障碍。微服务旨在解决这种情况，因此，MSA 需要轻量级机制、小型、可独立部署的服务，并确保可扩展性和可移植性。使用 Docker 支持的容器可以满足这些要求。
微服务是围绕业务能力构建的，可以通过全自动部署机制独立部署。每个微服务都可以在不中断其他微服务的情况下进行部署，容器为服务以及其他值得注意的设施提供了一个理想的部署和执行环境，例如减少部署时间、隔离管理和简单的生命周期。在容器中快速部署新版本的服务很容易。所有这些因素导致了使用 Docker 必须提供的功能的微服务的爆炸式增长。
如前所述，Docker 正被定位为下一代容器化技术，它提供了一种成熟且潜在的可靠机制来以高效且分布式的方式分发应用。好处是，开发人员可以在保持容器整体完整性的同时调整容器中的应用块。这具有更大的影响，因为酝酿中的趋势是，公司正在构建更小的、自定义的和包含的、易于管理的和离散的服务，以包含在标准化和自动化的容器中，而不是分布在单个物理或虚拟服务器上的大型单片应用。简而言之，来自 Docker 的迅猛的容器化技术为接下来的微服务时代带来了福音。
Docker 的建立和持续是为了实现*运行一次并在各处运行*的难以实现的目标。Docker 容器通常在流程级别隔离，可跨 IT 环境移植，并且易于重复。单个物理主机可以承载多个容器，因此，每个 IT 环境通常都塞满了各种 Docker 容器。容器的空前增长为有效的容器管理带来了麻烦。容器的多样性和相关的异构性被用来急剧增加容器的管理复杂性。因此，编排技术和蓬勃发展的编排工具已经成为加速安全水域容器化进程的战略慰藉。