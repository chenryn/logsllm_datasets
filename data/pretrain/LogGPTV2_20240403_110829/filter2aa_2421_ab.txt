DLL
API
Offset Table 
Approach
b'RtlExitUserThread\x00ExitThread\x00kernel32\x00WinExec\x00GetVersion\x00ntdll\x00'
[876f8b31][XX][XX][a2a1de0][XX][XX][9dbd95a6]
[XX]
[XX]
DLL
API
Offset Table 
Approach
b'RtlExitUserThread\x00ExitThread\x00kernel32\x00WinExec\x00GetVersion\x00ntdll\x00'
[876f8b31][XX][XX][a2a1de0][XX][XX][9dbd95a6]
[XX]
[XX]
DLL
API
Offset Table 
Approach
b'RtlExitUserThread\x00ExitThread\x00kernel32\x00WinExec\x00GetVersion\x00ntdll\x00'
[876f8b31][XX][XX][a2a1de0][XX][XX][9dbd95a6]
[XX]
[XX]
DLL
API
Offset Table 
Approach
b'RtlExitUserThread\x00ExitThread\x00kernel32\x00WinExec\x00GetVersion\x00ntdll\x00'
[876f8b31][XX][XX][a2a1de0][XX][XX][9dbd95a6]
[XX]
[XX]
DLL
API
Offset Table 
Approach
b'RtlExitUserThread\x00ExitThread\x00kernel32\x00WinExec\x00GetVersion\x00ntdll\x00'
[876f8b31][XX][XX][a2a1de0][XX][XX][9dbd95a6]
[XX]
[XX]
DLL
API
Offset Table 
Approach
b'RtlExitUserThread\x00ExitThread\x00kernel32\x00WinExec\x00GetVersion\x00ntdll\x00'
[876f8b31][XX][XX][a2a1de0][XX][XX][9dbd95a6]
[XX]
[XX]
DLL
API
Offset Table 
Approach
b'RtlExitUserThread\x00ExitThread\x00kernel32\x00WinExec\x00GetVersion\x00ntdll\x00'
[876f8b31][XX][XX][a2a1de0][XX][XX][9dbd95a6]
[XX]
[XX]
DLL
API
The new workflow
[IAT Stub ][Lookuptable][the actual payload logic]
The new workflow
[IAT Stub ][Lookuptable][the actual payload logic]
1
The new workflow
[IAT Stub ][Lookuptable][the actual payload logic]
1
2
The new workflow
[IAT Stub ][Lookuptable][the actual payload logic]
[some winAPI]
1
2
The new workflow
[IAT Stub ][Lookuptable][the actual payload logic]
[some winAPI]
1
2
3
The new workflow
[IAT Stub ][Lookuptable][the actual payload logic]
[some winAPI]
1
2
3
4
The new workflow
[IAT Stub ][Lookuptable][the actual payload logic]
[some winAPI]
1
2
3
5
4
The new workflow
[IAT Stub ][Lookuptable][the actual payload logic]
[some winAPI]
1
2
3
5
6, Continue to 2 until done
4
LOE
•
The initial POC took  test.bin 
[*] Length of submitted payload: 0x1cc 
[*] Stripping Stripping Fewers 64bit hash stub  
[*] Length of code after stripping: 258 
[*] Disassembling payload 
[*] Mangling kernel32.dll!LoadLibraryA call hash: 0xe6b6358 
[*] Mangling ws2_32.dll!WSAStartup call hash: 0x1894475 
[*] Mangling ws2_32.dll!WSASocketA call hash: 0x42005c9f 
[*] Mangling ws2_32.dll!connect call hash: 0xaaed57f 
[*] Mangling kernel32.dll!CreateProcessA call hash: 0x811d8a65 
[*] Mangling kernel32.dll!WaitForSingleObject call hash: 0x87cd52d8 
[*] Mangling kernel32.dll!ExitThread call hash: 0xabf4ce38 
[*] Mangling kernel32.dll!GetVersion call hash: 0x98d50974 
[*] Mangling ntdll.dll!RtlExitUserThread call hash: 0xbf73d1c0 
[…snip…]
Issues with some 
DLLs
System Binaries/DLLs with 
LLAGPA or GPA in IAT
LLAGPA
GPA
XPSP3
1300
5426
VISTA
645
26855
WIN7
675
48383
WIN8
324
31158
WIN10
225
50522
API-MS-WIN-CORE*.dlls
https://betanews.com/2009/12/02/mark-russinovich-on-minwin-the-new-core-of-windows/
API-MS-WIN-CORE*.dlls
• MINWIN
https://betanews.com/2009/12/02/mark-russinovich-on-minwin-the-new-core-of-windows/
API-MS-WIN-CORE*.dlls
• MINWIN
• These dlls redirect to the actual implementation of 
the windows API
https://betanews.com/2009/12/02/mark-russinovich-on-minwin-the-new-core-of-windows/
API-MS-WIN-CORE*.dlls
• MINWIN
• These dlls redirect to the actual implementation of 
the windows API
• Existed since win7
https://betanews.com/2009/12/02/mark-russinovich-on-minwin-the-new-core-of-windows/
API-MS-WIN-CORE*.dlls
• MINWIN
• These dlls redirect to the actual implementation of 
the windows API
• Existed since win7
• GPA is implemented via API-MS-WIN-CORE-
LIBRARYLOADER-*.DLL 
https://betanews.com/2009/12/02/mark-russinovich-on-minwin-the-new-core-of-windows/
API-MS-WIN-CORE*.dlls
• MINWIN
• These dlls redirect to the actual implementation of 
the windows API
• Existed since win7
• GPA is implemented via API-MS-WIN-CORE-
LIBRARYLOADER-*.DLL 
• Normally used in system dlls
https://betanews.com/2009/12/02/mark-russinovich-on-minwin-the-new-core-of-windows/
API-MS-WIN-CORE*.dlls
• MINWIN
• These dlls redirect to the actual implementation of 
the windows API
• Existed since win7
• GPA is implemented via API-MS-WIN-CORE-
LIBRARYLOADER-*.DLL 
• Normally used in system dlls
• Can be called by userland applications via IAT 
parsing
https://betanews.com/2009/12/02/mark-russinovich-on-minwin-the-new-core-of-windows/
Because it is in…
Because it is in…
Kernel32.dll
SAY AGAIN?
SAY AGAIN?
•
We just need GPA in any DLL Import Table to access 
the entire windows API
SAY AGAIN?
•
We just need GPA in any DLL Import Table to access 
the entire windows API
•
Since win7, GPA has been in Kernel32.dll Import 
Table
SAY AGAIN?
•
We just need GPA in any DLL Import Table to access 
the entire windows API
•
Since win7, GPA has been in Kernel32.dll Import 
Table
•
We’ve had a stable EMET EAF(+)/Caller bypass 
opportunity since Win7 (works for win7 - win10)
Tor Exploit w/My 
Stub vs EAF+/Caller
DEMO: https://youtu.be/oqHT6Ienudg
Updates
•
These payloads were introduced at REcon Brussels - 
Jan 2017 
•
For DEF CON 25 - releasing 64bit payloads
Part III   
Mitigations & Bypasses
3 months later…
3 months later…
3 months later…
My Reaction
My Reaction
How Does the IAT 
Filter Work
•
The pointer to the Import Name in the import table 
no longer points to: 
•
GetProcAddress 
•
LoadLibraryA 
•
The API Thunk is still there 
•
No Import name == driving blind
Missed an Import
Missed an Import
GetProcAddressForCaller 
(GPAFC)
•
Introduced in win8 
•
Exported by kernelbase.dll 
•
Imported by Kernel32.dll 
•
Works very similar to GPA 
•
Not filtered by the IAT Filter
GPA(‘DLLHandle’, ‘API String’)  
==  
GPAFC(‘DLLHandle’, ‘API String’, 0)
Usage in FIDO: 
ExternGPAFC
GPAFC DEMO
Now what?
Think About It
Go Directly to 
GetProcAddress
Process Memory
Go Directly to 
GetProcAddress
PEB.imagebase
GetProcAddress
Process Memory
Go Directly to 
GetProcAddress
x
PEB.imagebase
GetProcAddress
Offset - Version(s) Dependent
Process Memory
Example Dev Workflow
• Find GetProcAddress (GPA) in process space 
(application specific) 
• No system DLLs 
• If multiple versions have the same exploit 
• Find a lynchpin GetProcAddress location that is the 
same across all versions 
• Else, diff the GPA target binary 
• Use the diff locations in the payload to ID the 
version to the corresponding GPA offset
Usage in FIDO: 
OffsetGPA and 
ExternOffsetGPA
Call to Action
Questions?
•
Get the code: https://github.com/secretsquirrel/
fido 
•
Thanks: @SubTee, @FreedomCoder, @Wired33, 
@__blue__, @_metalslug_, @_droc, @markwo, 
@mattifestation 
•
Twitter: @midnite_runr 
•
Email: PI:EMAIL