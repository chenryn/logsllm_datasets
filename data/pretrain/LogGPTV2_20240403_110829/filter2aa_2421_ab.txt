# Dynamic Link Library (DLL) and Application Programming Interface (API) Offsets

## Overview
This document outlines the structure and workflow for handling DLLs, APIs, and their offsets. It also provides a detailed look at the new workflow, issues with certain system binaries, and mitigation techniques.

## Structure

### DLL, API, and Offset Table
- **DLL**: ntdll, kernel32
- **APIs**:
  - `RtlExitUserThread`
  - `ExitThread`
  - `WinExec`
  - `GetVersion`
- **OffsetTable**:
  - `[876f8b31]`
  - `[XX][XX][a2a1de0][XX][XX][9dbd95a6]`
  - `[XX]`

### New Workflow
- **IAT Stub**: Handles the Import Address Table (IAT).
- **Lookup Table**: Contains the offsets and addresses.
- **Payload Logic**: The actual logic of the payload.
- **Steps**:
  1. IAT Stub
  2. Lookup Table
  3. Payload Logic
  4. [Some WinAPI]
  5. Continue to step 2 until done

## Issues with System Binaries/DLLs

### LLAGPA or GPA in IAT
- **XPSP3**: 1300, 5426
- **VISTA**: 645, 26855
- **WIN7**: 675, 48383
- **WIN8**: 324, 31158
- **WIN10**: 225, 50522

### API-MS-WIN-CORE*.dlls
- **MINWIN**: These DLLs redirect to the actual implementation of the Windows API.
- **Existed since Win7**.
- **GPA is implemented via API-MS-WIN-CORE-LIBRARYLOADER-*.DLL**.
- **Normally used in system DLLs**.
- **Can be called by userland applications via IAT parsing**.

### Kernel32.dll
- **We just need GPA in any DLL Import Table to access the entire Windows API**.
- **Since Win7, GPA has been in Kernel32.dll Import Table**.
- **Stable EMET EAF(+)/Caller bypass opportunity since Win7 (works for Win7 - Win10)**.

## Mitigations & Bypasses

### IAT Filter
- **The pointer to the Import Name in the import table no longer points to:**
  - `GetProcAddress`
  - `LoadLibraryA`
- **The API Thunk is still there**.
- **No Import name == driving blind**.

### GetProcAddressForCaller (GPAFC)
- **Introduced in Win8**.
- **Exported by kernelbase.dll**.
- **Imported by Kernel32.dll**.
- **Works very similar to GPA**.
- **Not filtered by the IAT Filter**.
- **Usage in FIDO: ExternGPAFC**.

### Example Development Workflow
- **Find GetProcAddress (GPA) in process space (application specific)**.
- **No system DLLs**.
- **If multiple versions have the same exploit, find a lynchpin GetProcAddress location that is the same across all versions**.
- **Else, diff the GPA target binary**.
- **Use the diff locations in the payload to ID the version to the corresponding GPA offset**.
- **Usage in FIDO: OffsetGPA and ExternOffsetGPA**.

## Call to Action
- **Get the code**: [GitHub](https://github.com/secretsquirrel/fido)
- **Thanks**: @SubTee, @FreedomCoder, @Wired33, @__blue__, @_metalslug_, @_droc, @markwo, @mattifestation
- **Twitter**: @midnite_runr
- **Email**: PI:EMAIL

---

This optimized version aims to provide a clear, concise, and professional overview of the content. If you need further details or specific sections expanded, please let me know!