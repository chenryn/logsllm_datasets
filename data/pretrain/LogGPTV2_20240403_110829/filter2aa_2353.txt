#BHUSA @BlackHatEvents

### A Fully Trained Jedi, You Are Not
**Speaker: Adam Shostack**

---

#### How Many Jedi?
- **2**
- **3**
- **4**

---

#### The Problem with Heroism
- Expectations of heroism drive burnout.
- Not everyone wants to be torn from their family as a child and forced to live without attachments.
- Even if they did, many people don’t qualify.
- Being murdered by Sith is not a good outcome.

---

### About Adam Shostack
- [Brief Bio or Introduction]

---

### Agenda
- **The problem starts with software.**
- **“Shifting left” isn’t working.**
- **Reasonable Expectations.**
- **Bloom’s Taxonomy.**
- **Chunking.**
- **Frames.**

---

### The Problem Starts with Software
- **Reference:** *Firewalls and Internet Security* (Cheswick and Bellovin, 1994)

---

### Where Do Security Issues Come From?
- **Developers**
- **Software Engineers**

---

### Common Problems Introduced by Developers
- **Code with security bugs and flaws.**
- **Missing security features.**
- **Unusable security features.**

---

### Security Across the Development Lifecycle
- **Development Phase:**
  - Application security
  - Operational security
  - Bugs
  - Penetration testing
  - Fuzzing
  - Static analysis
  - XDR
  - SIEM
  - Vulnerability scanning
  - Reverse engineering
  - “Shift Security Left”
  - Firewalls

- **Production Phase:**
  - Continuous stream of CVEs

---

### “Shift Left” in Security
- **Build security into the development process.**
- **Changes in design, development, and deployment.**
- **Requires new skills.**
- **Less pen testing, more software engineering.**
- **Growing popularity.**

---

### Clarifying the Shift Left Approach
- **Clear responsibilities.**
- **What exactly is changing?**
  - Deliverables
  - Tasks
  - Skills
- **Risk: Are we doing this to please appsec?**

---

### Bloom’s Taxonomy
- **Remember:**
  - Recall facts and basic concepts.
  - Define, duplicate, list, repeat.
  - Example: "Remember data sent over a network can be read by anyone."

- **Evaluate:**
  - Justify a stand or decision.
  - Argue, defend, judge, select, critique, weigh.
  - Example: "Does encryption protect against that threat?"

---

### Tools for Learning
- **The Helpful Hundred – Planning for Instruction:**
  - Smaldino, Lowther, and Russell (2008) suggest 100 verbs for writing learning objectives.
  - These verbs are observable and measurable.
  - Examples: analyze, construct, evaluate, make, present, suggest.

---

### What Security Work Do We Ask of Different People?
- **Developer**
- **Champion**
- **AppSec**
- **Pen Tester**
- **Speaker**

---

### Criteria and Constraints
- **Align to job and aspirations.**
- **Within reasonable training time.**
- **Goals:**
  - Help people find and follow paved roads.
  - Recognize danger signs.

---

### Chunking
- **Our brains are good at pattern recognition.**
- **Dealing with information in “chunks.”**
- **Short-term memory: 7 +/- 2 chunks.**
- **Example: 1, 1, 2, 3, 5, 8, 13, 34, 55…**
- **If we don’t define the chunks, our students will.**

---

### Categories and Frames
- **Exploit techniques?**
- **Threat actors?**
- **Compliance?**
- **Cyberwar?**
- **Top ten?**
- **Threats?**

---

### Framing Question: “What Can Go Wrong?”
- **Focuses attention on threats.**
- **Everyone has an answer if you ask and encourage.**
- **Across industries, technical skill, execs.**
- **Variants:**
  - “What keeps you up at night?”
  - “How would you attack this?”

---

### Umbrella of “What Can Go Wrong?”
- **Open-ended but answers vary.**
- **Structures:**
  - Finance execs: ORX
  - Security: OWASP Top Ten
  - FDA: Inability to update
  - Compliance: Threat Modeling Compliance (BHAsia ’21)
  - Flaws, not just bugs

---

### Best Toolset for Security
- **Expert tasks: Analyze, compare, evaluate.**
- **People need experts to offer specific advice.**

---

### Personal Finance Example
- **Max out your tax-advantaged, matched accounts.**
- **Target date funds.**

---

### Target Date Fund of Security Knowledge
- **What fits here?**

---

### What Every Engineer Needs to Know
- **Catalyzed by projects:**
  - Fast, Cheap + Good: An Unusual Tradeoff (whitepaper)
  - Threats: What Every Engineer Should Learn from Star Wars
  - Whitepaper available: Shostack.org/whitepapers/ | Book: Wiley, Feb, 2023

---

### Simple Questions
- **Is every flaw unique?**
- **Do flaws cluster?**
- **What do we need to know to find them?**

---

### Where Are the Flaws?
- **(Multiple slides with detailed analysis)**

---

### Lightweight Flaws
- **If lightweight flaws are common, we should transform how we work with engineers.**

---

### Proposal: What Developers Need to Know
- **STRIDE threats:**
  - Spoofing, Tampering, Repudiation, Info disclose, DoS, Expansion of Authority
- **Parsing and predictability generate danger.**
- **Kill chains bring these together.**

---

### Developer Knowledge (Samples)
- **Remember that:**
  - Spoofing must be addressed differently for each of [machines, people] authenticating to [machines, people].
  - Spoofing programs is easy unless the platform prevents it.

---

### Recap
- **Code issues underlie many (most?) security issues.**
- **Shifting left is an admirable goal.**
- **Only works when we’re clear about change.**

---

### Rebellions Are Built on Hope
- **Normal levels of security are defined.**
- **Developers able to build more secure systems.**
- **Less rework, fewer escalations, more predictable delivery.**

---

### Call to Action
1. **Define expectations: What developers know about threats.**
2. **Help people meet them: Training, assessment.**
3. **Measure impact.**

---

### Thank You!
- **Questions?**
- **Now, Swapcard (virtual event platform) or PI:EMAIL**