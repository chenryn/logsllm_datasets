14.2 IDA 输出文件与补丁生成
File ▶Produce File菜单是IDA 的一个更加有趣的菜单选项。使用这个菜单中的选项，IDA 能够生成MAP、ASM、INC 、LST 、EXE 、DIF 和HTML 文件。其中许多选项听起来很有吸引力，下面逐一介绍。
14.2.1 IDA 生成的MAP文件
.map 文件描述二进制文件的总体结构，包括与构成该二进制文件的节有关的信息，以及每节中符号的位置。在生成.map
 文件时，IDA 会要求你为你要创建的文件取名，并说明你想要存储在.map 文件中的符号的类型。MAP文件选项对话框如图 14-5 所示，你可以从中选择你希望包含在.map 文件中的信息。
图14-5 MAP文件生成选项
.map 文件中的地址信息用逻辑地址表示。逻辑地址使用一个段号和一个段偏移量描述符号的位置。一个简单.map文件的前几行内容如下所示。从中我们可以看到3 个段及许多符号中的前两个符号。_fprint
 的逻辑地址表明它位于第一个段（.text
 ）的字节偏移量为 69h
 的位置。
Start             Length        Name                   Class  
 0001:00000000    000008644H    .text                  CODE  
 0002:00000000    000001DD6H    .rdata                 DATA  
 0003:00000000    000002B84H    .data                  DATA  
Address            Publics by Value  
 0001:00000000          _main  
 0001:00000069          _fprintf
IDA 生成的MAP文件与Borland的Turbo Debugger 兼容。在调试可能已经去除符号的二进制文件时，.map 文件可帮助我们恢复符号名称，这是此类文件的主要用途。
14.2.2 IDA 生成的ASM文件
IDA 能够从当前数据库生成一个.asm 文件。这样做的主要目的是创建一个能够被汇编器处理的文件，以重建底层二进制文件。IDA 会设法收集足够的信息（包括结构体布局）以成功汇编这个文件。是否能够成功汇编生成的.asm 文件，这取决于许多因素，但其中最重要的因素在于你使用的汇编器是否理解 IDA 采用的语法。
目标汇编语言语法由 Options▶General菜单Analysis选项卡下的 Target assembler 设置决定。默认情况下，IDA 会生成一个表示整个数据库的汇编文件。但是，你可以通过单击并拖动，或使用“SHIFT+上箭头键”或“SHIFT +下箭头键”滚动并选择你希望汇编的区域，从而限定列表的范围。在控制台版本的 IDA 中，你可以使用 Anchor
 （ALT+L）命令在一个选择区域的起始位置设置一个锚点，然后使用箭头键扩充这个区域。
14.2.3 IDA 生成的INC 文件
INC （表示包含）文件描述数据结构和枚举数据类型的定义。基本上，这个文件的内容与“结构体”窗口的内容类似，只是其形式更适合汇编器处理。
14.2.4 IDA 生成的LST 文件
LST 文件不过是 IDA 反汇编窗口内容的文本文件存储形式。如前面介绍 ASM文件时所述，你可以选择一个你想要转储的地址范围，以限定生成的列表的范围。
14.2.5 IDA 生成的EXE文件
虽然这个菜单项是最具潜力的菜单项，但它也是缺陷最大的菜单项。许多文件类型都不能使用这个菜单项。你可能会收到这样一条错误消息：This type of output file is not supported （不支持这种输出文件类型）。
尽管对IDA 用户而言，这是一项理想的功能，但一般来说，要想从 IDA 数据库重新生成可执行文件，难度非常大。保存在 IDA 数据库中的信息，主要由构成最初的输入文件的各节中的内容组成。但是，许多时候，IDA 并不处理输入文件的每一节，因此，在将文件加载到数据库中时，某些信息将会遗失，这使得我们无法从数据库生成可执行文件。举一个最简单的例子：默认情况下，IDA 并不加载 PE文件的资源节（.rsrc ），因此，你不可能通过数据库恢复资源节。
其他情况下，IDA 处理与最初的二进制文件有关的信息，但你并不能轻易访问它们的原始形式。这些信息包括符号表、导入表和导出表，你需要付出相当大的努力才能正确重建这些信息，以生成一个真正能够运行的可执行文件。
为了向IDA 提供生成 EXE 文件的功能，Atli Mar Gudmundsson开发了 pe_script1
 。这是一组供PE文件使用的 IDA 脚本。其中一个脚本名为 pe_write.idc ，可用于在现有数据库之外转储一个正在运行的 PE映像。如果想要修补一个 PE文件，使用脚本时完成的步骤如下所示。
1. 参见http://www.hex-rays.com/idapro/freefiles/pe_scripts.zip
 。
将你想要修补的PE 文件加载到IDA 中，确保清除加载程序对话框中的Make imports section （创建导入节）选项。
运行包含的 pe_sections.idc脚本，将构成最初二进制文件的所有节映射到新数据库中。
对数据库进行必要的更改。
运行pe_write.idc 脚本，将数据库内容转储到一个新的 PE文件中。
第15 章将讨论使用 IDC 编写脚本。
14.2.6 IDA 生成的DIF文件
IDA DIF 文件是一个纯文本文件，其中列出了一个 IDA 数据库中所有被修改的字节。如果你希望根据对 IDA 数据库所做的更改来修补最初的二进制文件，DIF 文件是最有用的文件格式。这种文件格式相当简单，如下面的.dif 文件所示。
This difference file is created by The Interactive Disassembler 
dif_example.exe  
000002F8: 83 FF  
000002F9: EC 75  
000002FA: 04 EC  
000002FB: FF 68
这个文件的第一行是注释，第一行是最初的二进制文件的名称，随后则是文件中被修改的字节列表。每一行都指出被修改的字节的文件偏移量（而非虚拟地址）、字节的原始值以及字节在数据库中的当前值。在这个特例中，dif_example.exe 的数据库中有 4 个位置被修改，在最初的文件中，这些位置对应的字节偏移量为 0x2F8~0x2FB
 。编写一个程序来解析 IDA 的.dif 文件，并应用对最初的二进制文件所做的更改，生成一个修补版本的二进制文件，这并不是一个复杂的任务。本书的配套网站2
 上提供了这样一个实用工具。
2. 参见http://www.idabook.com/chapter14/ida_patcher.c
 。
14.2.7 IDA 生成的HTML 文件
IDA 利用HTML 的标记功能生成彩色的反汇编代码清单。基本上，IDA 生成的HTML 文件就是一个添加了 HTML 标记的LST 文件，它生成的列表的颜色与真正的 IDA 反汇编窗口使用的颜色类似。然而，IDA 生成的 HTML 文件并不包含任何超链接，因此，导航这个文件并不比使用标准的文本列表容易。例如，作为一项有用的特性，我们可以给所有名称引用添加超链接，这样，跟踪名称引用就变得和单击一个链接一样简单。
14.3 小结
IDA 并不是一个二进制文件编辑器。任何时候，如果你想要使用 IDA 修补一个二进制文件，请记住这个事实。但是，它是一款特别有用的工具，可帮助你输入并显示潜在的更改。掌握IDA的全部功能，并结合 IDA 通过适当的脚本或外部程序生成的信息，修补二进制文件也会变得简单可行。
在后面的几章中，我们将讨论扩展 IDA 功能的各种方式。对于希望充分利用 IDA 功能的用户而言，掌握基本的脚本编写技能，并理解 IDA 的插件体系结构非常重要，因为它们可帮助你添加你认为 IDA 缺乏的功能。
第四部分 扩展IDA的功能
本部分内容：
第15章 编写IDA脚本
第16章 IDA软件开发工具包
第17章 IDA插件体系结构
第18章 二进制文件与IDA加载器模块
第19章 IDA处理器模块
第15章 编写IDA 脚本
事实上，没有哪一个应用程序能够满足每名用户的一切需求。要想预测每一种可能出现的情况，几乎是不可能的事情。应用程序开发者面临两种选择：要么满足用户提出的无止境的功能要求，要么提供一种方法，供用户解决问题。IDA 采用了后一种方法，它集成了一个脚本引擎，让用户从编程角度对 IDA 的操作进行全面控制。
脚本的潜能无限，可用于开发简单的单行程序，也可以开发功能全面的程序，从而自动执行常见的任务，也能实现复杂的分析功能。从自动化的角度看，你可以将 IDA 脚本看成宏1
 ；而从分析的角度看，IDA 脚本语言可看成是一种查询语言，它能够以编程方式访问 IDA数据库的内容。IDA 使用两种不同的语言编写脚本。IDA 的原始嵌入式脚本语言叫做IDC ，之所以取这个名称，可能是因为它的语法与 C 语言的语法非常相似。自IDA 5.4 发布以来2
 ，IDA 还通过集成由Gergely Erdelyi3
 开发的IDAPython 插件来支持Python集成式脚本。本章剩余部分将介绍编写和执行IDC 和Python脚本的基础知识，以及一些可供程序员使用的有用函数。
1. 许多应用程序可将操作序列记录到一个叫做“宏”的复杂操作中。重播或触发宏，将执行其记录的整个操作步骤。宏提供了一种简单的方法，可自动执行一系列复杂的操作。
2. 有关每个新版本的IDA 引入的功能的完整列表，请访问http://www.hex-rays.com/idapro/idanew48.htm
 。
3. 参见http://code.google.com/p/idapython/
 。
15.1 执行脚本的基础知识
在深入学习脚本语言之前，我们有必要了解执行脚本的常用方法。3 个菜单选项，File▶Script File 、File▶IDC Command 和File▶ Python Command1
 ，可用于访问IDA 的脚本引擎。选择File▶Script File表示你希望运行一个独立的脚本，这时，IDA 会显示一个选择文件对话框，让你选择想要运行的脚本。每次运行一个新的脚本，这个程序都被添加到最近运行的脚本列表中，以方便你以后编辑或再次运行这个脚本。通过 View▶Recent Scripts 菜单项访问的 Recent Scripts 窗口如图15-1 所示。
1. 如果正确安装了Python ，只有这个选项可用。详细信息可参见第3 章。
图15-1 Recent Scripts 窗口
双击列出的脚本可执行该脚本。一个弹出式上下文菜单将提供各种选项，可用于从列表中删除脚本，或使用在 Misc （杂项）选项卡上的 Options ▶ General（选项▶常规）下指定的编辑器对打开的某个脚本进行编辑。
另外，要执行一个独立的脚本文件，可以使用 File ▶ IDC Command 或者File ▶ Python Command打开一个脚本输入对话框，如图 15-2 所示（本例中使用的是 IDC 脚本）。如果只想执行少数几个语句，而又不愿意单独创建一个脚本文件，这时就可以使用这个对话框。
图15-2 脚本输入对话框
你只能在脚本对话框中输入某些类型的语句。但是，如果你不需要创建一个功能全面的脚本文件，这个对话框会非常有用。
执行脚本命令的最后一个方法是使用 IDA 的命令行。这个命令行仅适用于GUI 版本的IDA ，并且由/cfg/idagui.cfg 中的DISPLAY_COMMAND_LINE
 选项控制。自从IDA5.4以来，这个命令行默认都是启用的。该命令行如图 15-3 所示，它位于 IDA 工作区的左下角、输出窗口的下面。
图15-3 IDA 命令行
将用于执行命令行的解释器在命令行输入框的左侧标注。在图 15-3 中，IDA 配置命令行执行IDC 语句。单击此标签，将打开如图 15-3 所示的弹出式菜单，可将解释器（IDC 或Python ）与命令行关联起来。
虽然命令行中仅仅包含一行文本，但是，你可以在其中输入多个 IDC 语句，并用分号将它们分隔开来。你可以使用向上箭头键访问最近运行的命令。如果需要经常执行非常短小的脚本，启用IDA 命令行非常有用。
了解了基本的脚本执行功能后，接下来我们将详细了解IDA 的两种脚本语言，IDC 和Python 。我们首先介绍 IDA 的本地脚本语言 IDC ，然后讨论 IDA 对Python 的集成（Python 在很大程度上依赖于我们在接下来几节中介绍的 IDC ）。
15.2 IDC 语言
与IDA 的其他功能不同，IDA 的帮助系统为 IDA 语言提供了诸多帮助。帮助系统中的主题大致包括 IDC 语言（介绍 IDC 语法基础）和 IDC 函数目录（详细说明可供 IDC 程序员使用的内置函数）。
IDC 脚本语言借用了 C 语言的许多语法。从 IDA5.6开始，IDC 在面向对象特性和异常处理方面与C++ 更为相似。由于 IDC 与C 语言和C++ 语言类似，因此，我们将依据这些语言来介绍IDC 语言，并重点说明这两种语言之间的区别。
15.2.1 IDC 变量
IDC 是一种类型松散的语言，这表示它的变量没有明确的类型。IDC 使用3 种数据类型：整数（IDA 文档使用类型名称 long
 ）、字符串和浮点值，其中绝大部分的操作针对的是整数和字符串。字符串被视为 IDC 中的本地数据类型，因此，你不需要跟踪存储一个字符串所需的空间，或者一个字符串是否使用零终止符。从 IDA5.6开始，IDC 加入了许多变量类型，包括对象、引用和函数指针。
在使用任何变量前，都必须先声明该变量。IDC 支持局部变量，并且从 IDA5.4开始，也支持全局变量。IDC 关键字auto
 用于引入一个局部变量声明，并且局部变量声明中可能包括初始值。如下所示是合法与非法的 IDC 局部变量声明：
auto addr, reg, val;   // legal, multiple variables declared with no initializers  
auto count = 0;        // declaration with initialization
IDC 认可使用/* */的C 风格多行注释，以及使用//的C++ 风格行尾注释。此外，需要注意的是，你可以在一个语句中声明好几个变量，并且IDC 中的所有语句均使用分号为终止符（和 C语言中一样）。IDC 并不支持 C 风格数组（IDA 5.6 引入了分片）、指针（虽然IDA 从IDA 5.6 开始支持引用）或结构体和联合之类的复杂数据类型。IDA 5.6 引入了类的概念。
IDA 使用extern
 关键字引入全局变量声明，你可以在任何函数定义的内部和外部声明全局变量，但不能在声明全局变量时为其提供初始值。下面的代码清单声明了两个全局变量。
extern outsideGlobal;  
static main() {  
   extern insideGlobal;  
   outsideGlobal = "Global";  
   insideGlobal = 1;  
}
在IDA 会话过程中首次遇到全局变量时，IDA 将对全局变量进行分配，只要该会话处于活动状态，无论你打开或关闭多少个数据库这些变量都将始终有效。
15.2.2 IDC 表达式
除少数几个特例外，IDC 几乎支持C 中的所有算术和逻辑运算符，包括三元运算符（? :）。IDC 不支持op=
 （+=、*=、>>= 等）形式的复合赋值运算符。从 IDA5.6开始，IDC 开始支持逗号运算。所有整数操作数均作为有符号的值处理。这会影响到整数比较（始终带有符号）和右移位运算符（>>），因为它们总是会通过符号位复制进行算术移位。如果需要进行逻辑右移位，你必须修改结果的最高位，自己移位，如下所示：
result = (x >> 1) & 0x7fffffff;  //set most significant bit to zero
由于字符串是 IDC 中的本地类型，因此，IDC 中的一些字符串运算与 C 中的字符串运算有所不同。在IDC 中，给字符串变量中的字符串操作数赋值将导致字符串复制操作，因此，你不需要使用字符串来复制函数，如 C 语言中的 strcpy
 和strdup
 函数。将两个字符串操作数相加会将这两个操作数拼接起来，因此“Hello”+“World”将得到“HelloWorld”。因此，你不需要使用如C 语言中的 strcat
 之类的拼接函数。从 IDA 5.6 开始，IDA 提供用于处理字符串的分片运算符（slice operator）。Python 程序员需要对分片有所了解。通常你可以通过分片指定与数组类似的变量的子序列。分片使用方括号和起始索引（包括）与结束索引（不包括）来指定（至少需要一个索引）。下面的代码清单说明了IDC 分片的用法。
auto str = "String to slice";  
auto s1, s2, s3, s4;  
s1 = str[7:9];     // "to"  
s2 = str[:6];      // "String", omitting start index starts at 0  
s3 = str[10:];     // "slice", omitting end index goes to end of string  
s4 = str[5];       // "g", single element slice, similar to array element access
需要注意的是，虽然 IDC 中并没有数组数据类型，但你可以使用分片运算符来处理 IDC 字符串，就好像它们是数组一样。
15.2.3 IDC 语句
和C 语言一样，IDC 中的所有简单语句均以分号结束。switch
 语句是IDC 唯一不支持的C风格复合语句。在使用 for
 循环时，需要记住的是，IDC 不支持复合赋值运算符，如果你希望以除1 以外的其他值为单位进行计数，就需要注意这一点。如下所示：
auto i;  
for (i = 0; i < 10; i += 2) {}     // illegal, += is not supported  
for (i = 0; i < 10; i = i + 2) {}  // legal  
在IDA 5.6 中，IDC 引入了 try/catch
 块和相关的 throw
 语句，在语法上它们类似于 C++ 异常1
 。有关 IDC 异常处理的详细信息，请参阅 IDA 的内置帮助文件。
1. 参见http://www.cplusplus.com/doc/tutorial/exceptions/
 。
在复合语句中，IDC 使用和C 语言一样的花括号语法和语义。在花括号中可以声明新的变量，只要变量声明位于花括号内的第一个语句即可。但是，IDC 并不严格限制新引入的变量的作用范围，因此，你可以从声明这些变量的花括号以外引用它们。请看下面的例子：