## PostgreSQL Python tutorial  
### 作者                                                                                   
digoal                                                                                    
### 日期                                                                                   
2017-01-06                                                                                         
### 标签                                                                                  
PostgreSQL , Java , php , ruby , python , C                                                                                                                                              
----                                                                                  
## 背景              
转自 http://zetcode.com/db/postgresqlpythontutorial/  
## 正文    
This is a Python programming tutorial for the PostgreSQL database. It covers the basics of PostgreSQL programming with the Python language. You might also want to check the Python tutorial or PostgreSQL PHP tutorial on ZetCode. SQLAlchemy tutorial covers SQLAlchemy SQL Toolkit and Object Relational Mapper.  
Several libraries exist for connecting to the PostgreSQL database from the Python language. In this tutorial we will use the psycopg2 module. It is a PostgreSQL database adapter for the Python programming language. According to the module documentation it is currently the most popular Python module for the PostgreSQL database. It is mostly implemented in C as a libpq wrapper.  
### About PostgreSQL database  
PostgreSQL is a powerful, open source object-relational database system. It is a multi-user database management system. It runs on multiple platforms including Linux, FreeBSD, Solaris, Microsoft Windows and Mac OS X. PostgreSQL is developed by the PostgreSQL Global Development Group.  
### Prerequisites  
To work with this tutorial, we must have Python language, PostgreSQL database and psycopg2 language binding installed on our system.  
```  
$ sudo apt-get install postgresql  
```  
On an Ubuntu based system we can install the PostgreSQL database using the above command.  
```  
$ sudo update-rc.d -f postgresql remove  
 Removing any system startup links for /etc/init.d/postgresql ...  
   /etc/rc0.d/K21postgresql  
   /etc/rc1.d/K21postgresql  
   /etc/rc2.d/S19postgresql  
   /etc/rc3.d/S19postgresql  
   /etc/rc4.d/S19postgresql  
   /etc/rc5.d/S19postgresql  
   /etc/rc6.d/K21postgresql  
```  
If we install the PostgreSQL database from packages, it is automatically added to the start up scripts of the operating system. If we are only learning to work with the database, it is unnecessary to start the database each time we boot the system. The above command removes any system startup links for the PostgreSQL database.  
```  
$ /etc/init.d/postgresql status  
Running clusters: 9.1/main  
$ service postgresql status  
Running clusters: 9.1/main   
```  
We check if the PostgreSQL server is running. If not, we need to start the server.  
```  
$ sudo service postgresql start  
 * Starting PostgreSQL 9.1 database server        [ OK ]  
```  
On Ubuntu Linux we can start the server with the service postgresql start command.  
```  
$ sudo service postgresql stop  
[sudo] password for janbodnar:   
 * Stopping PostgreSQL 9.1 database server        [ OK ]   
```  
We use the service postgresql stop command to stop the PostgreSQL server.  
```  
$ sudo apt-get install python-psycopg2  
```  
Here we install the psycopg2 module on a Ubuntu system.  
```  
$ sudo -u postgres createuser janbodnar  
Shall the new role be a superuser? (y/n) n  
Shall the new role be allowed to create databases? (y/n) y  
Shall the new role be allowed to create more new roles? (y/n) n  
```  
We create a new role in the PostgreSQL system. We allow it to have ability to create new databases. A role is a user in a database world. Roles are separate from operating system users. We have created a new user without the -W option, e.g. we have not specified a password. This enables us to connect to a database with this user without password authentication. Note that this works only on localhost.  
```  
$ sudo -u postgres createdb testdb -O janbodnar  
```  
The createdb command creates a new PostgreSQL database with the owner janbodnar.  
### Version  
In the first code example, we will get the version of the PostgreSQL database.  
```  
#!/usr/bin/python  
# -*- coding: utf-8 -*-  
import psycopg2  
import sys  
con = None  
try:  
    con = psycopg2.connect(database='testdb', user='janbodnar')   
    cur = con.cursor()  
    cur.execute('SELECT version()')            
    ver = cur.fetchone()  
    print ver      
except psycopg2.DatabaseError, e:  
    print 'Error %s' % e      
    sys.exit(1)  
finally:  
    if con:  
        con.close()  
```  
In the above Python script we connect to the previously created testdb database. We execute an SQL statement which returns the version of the PostgreSQL database.  
```  
import psycopg2  
```  
The psycopg2 is a Python module which is used to work with the PostgreSQL database.  
```  
con = None  
```  
We initialize the con variable to None. In case we could not create a connection to the database (for example the disk is full), we would not have a connection variable defined. This would lead to an error in the finally clause.  
```  
con = psycopg2.connect(database='testdb', user='janbodnar')   
```  
The connect() method creates a new database session and returns a connection object. The user was created without a password. On localhost, we can omit the password option. Otherwise, it must be specified.  
```  
cur = con.cursor()  
cur.execute('SELECT version()')     
```  
From the connection, we get the cursor object. The cursor is used to traverse the records from the result set. We call the execute() method of the cursor and execute the SQL statement.  
```  
ver = cur.fetchone()  
```  
We fetch the data. Since we retrieve only one record, we call the fetchone() method.  
```  
print ver    
```  
We print the data that we have retrieved to the console.  
```  
except psycopg2.DatabaseError, e:  
    print 'Error %s' % e      
    sys.exit(1)  
```  
In case of an exception, we print an error message and exit the script with an error code 1.  
```  
finally:  
    if con:  
        con.close())   
```  
In the final step, we release the resources.  
```  
$ ./version2.py   
('PostgreSQL 9.3.5 on i686-pc-linux-gnu, compiled by gcc   
    (Ubuntu 4.8.2-19ubuntu1) 4.8.2, 32-bit',)  
```  
Running the version.py script.  
### Inserting data  
We will create a Cars table and insert several rows to it.  
```  
#!/usr/bin/python  
# -*- coding: utf-8 -*-  
import psycopg2  
import sys  
con = None  
try:  
    con = psycopg2.connect("dbname='testdb' user='janbodnar'")     
    cur = con.cursor()  
    cur.execute("CREATE TABLE Cars(Id INTEGER PRIMARY KEY, Name VARCHAR(20), Price INT)")  
    cur.execute("INSERT INTO Cars VALUES(1,'Audi',52642)")  
    cur.execute("INSERT INTO Cars VALUES(2,'Mercedes',57127)")  
    cur.execute("INSERT INTO Cars VALUES(3,'Skoda',9000)")  
    cur.execute("INSERT INTO Cars VALUES(4,'Volvo',29000)")  
    cur.execute("INSERT INTO Cars VALUES(5,'Bentley',350000)")  
    cur.execute("INSERT INTO Cars VALUES(6,'Citroen',21000)")  
    cur.execute("INSERT INTO Cars VALUES(7,'Hummer',41400)")  
    cur.execute("INSERT INTO Cars VALUES(8,'Volkswagen',21600)")  
    con.commit()  
except psycopg2.DatabaseError, e:  
    if con:  
        con.rollback()  
    print 'Error %s' % e      
    sys.exit(1)  
finally:  
    if con:  
        con.close()  
```  
The above script creates a Cars table and inserts 8 rows into the table.  
```  
cur.execute("CREATE TABLE Cars(Id INTEGER PRIMARY KEY, Name VARCHAR(20), Price INT)")  
```  
This SQL statement creates a new Cars table. The table has three columns.  
```  
cur.execute("INSERT INTO Cars VALUES(1,'Audi',52642)")  
cur.execute("INSERT INTO Cars VALUES(2,'Mercedes',57127)")  
```  
These two lines insert two cars into the table.  
```  
con.commit()  
```  
The changes are committed to the database.  
```  
if con:  
    con.rollback()  
```  
In case of an error, we roll back any possible changes to our database table.  
```  
$ psql testdb  
psql (9.3.5)  
Type "help" for help.  
testdb=> SELECT * FROM Cars;  
 id |    name    | price    
----+------------+--------  
  1 | Audi       |  52642  
  2 | Mercedes   |  57127  
  3 | Skoda      |   9000  
  4 | Volvo      |  29000  
  5 | Bentley    | 350000  
  6 | Citroen    |  21000  
  7 | Hummer     |  41400  
  8 | Volkswagen |  21600  
(8 rows)  
```  
We verify the written data with the psql tool.  
We are going to create the same table. This time using the convenience executemany() method.  
```  
#!/usr/bin/python  
# -*- coding: utf-8 -*-  
import psycopg2  
import sys  
cars = (  
    (1, 'Audi', 52642),  
    (2, 'Mercedes', 57127),  
    (3, 'Skoda', 9000),  
    (4, 'Volvo', 29000),  
    (5, 'Bentley', 350000),  
    (6, 'Citroen', 21000),  
    (7, 'Hummer', 41400),  
    (8, 'Volkswagen', 21600)  
)  
con = None  
try:  
    con = psycopg2.connect("dbname='testdb' user='janbodnar'")     
    cur = con.cursor()    
    cur.execute("DROP TABLE IF EXISTS Cars")  
    cur.execute("CREATE TABLE Cars(Id INT PRIMARY KEY, Name TEXT, Price INT)")  
    query = "INSERT INTO Cars (Id, Name, Price) VALUES (%s, %s, %s)"  
    cur.executemany(query, cars)  
    con.commit()  
except psycopg2.DatabaseError, e:  
    if con:  
        con.rollback()  
    print 'Error %s' % e      
    sys.exit(1)  
finally:  
    if con:  
        con.close()  
```  
This script drops a Cars table if it exists and (re)creates it.  
```  
cur.execute("DROP TABLE IF EXISTS Cars")  
cur.execute("CREATE TABLE Cars(Id INT PRIMARY KEY, Name TEXT, Price INT)")  
```  
The first SQL statement drops the Cars table if it exists. The second SQL statement creates the Cars table.  
```  
query = "INSERT INTO Cars (Id, Name, Price) VALUES (%s, %s, %s)"  
```  
This is the query that we will use.  
```  
cur.executemany(query, cars)  
```  
We insert 8 rows into the table using the convenience executemany() method. The first parameter of this method is a parameterized SQL statement. The second parameter is the data, in the form of tuple of tuples.  
### Retrieving data  
Now that we have inserted some data into the database, we want to retrieve it back.  
```  
#!/usr/bin/python  
# -*- coding: utf-8 -*-  
import psycopg2  
import sys  
con = None  
try:  
    con = psycopg2.connect("dbname='testdb' user='janbodnar'")   
    cur = con.cursor()      
    cur.execute("SELECT * FROM Cars")  
    rows = cur.fetchall()  
    for row in rows:  
        print row  
except psycopg2.DatabaseError, e:  
    print 'Error %s' % e      
    sys.exit(1)  
finally:  
    if con:  
        con.close()  
```  
In this example, we retrieve all data from the Cars table.  
```  
cur.execute("SELECT * FROM Cars")  
```  
This SQL statement selects all data from the Cars table.  
```  
rows = cur.fetchall()  
```  
The fetchall() method gets all records. It returns a result set. Technically, it is a tuple of tuples. Each of the inner tuples represent a row in the table.  
```  
for row in rows:  
    print row  
```  
We print the data to the console, row by row.  
```  
$ ./fetch1.py  
(1, 'Audi', 52642)  
(2, 'Mercedes', 57127)  
(3, 'Skoda', 9000)  
(4, 'Volvo', 29000)  
(5, 'Bentley', 350000)  
(6, 'Citroen', 21000)  
(7, 'Hummer', 41400)  
(8, 'Volkswagen', 21600)  
```  
This is the output of the example.  
Returning all data at a time may not be feasible. We can fetch rows one by one.  
```  
#!/usr/bin/python  
# -*- coding: utf-8 -*-  
import psycopg2  
import sys  
con = None  
try:  
    con = psycopg2.connect("dbname='testdb' user='janbodnar'")   
    cur = con.cursor()       
    cur.execute("SELECT * FROM Cars")  
    while True:  
        row = cur.fetchone()  
        if row == None:  
            break  