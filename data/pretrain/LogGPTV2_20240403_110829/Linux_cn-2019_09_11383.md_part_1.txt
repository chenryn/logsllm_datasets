---
author: Michał Derkacz
category: 软件开发
comments_data:
- date: '2019-09-25 17:28:45'
  message: 这个和 tiny-go 有啥异同
  postip: 222.65.171.235
  username: march1993 [Chrome 76.0|Windows 10]
count:
  commentnum: 1
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 10976
date: '2019-09-24 21:03:09'
editorchoice: false
excerpt: Go 语言，能在多低下的配置上运行并发挥作用呢？
fromurl: https://ziutek.github.io/2018/03/30/go_on_very_small_hardware.html
id: 11383
islctt: true
largepic: /data/attachment/album/201909/24/210256yihkuy8kcigugr2h.png
permalink: /article-11383-1.html
pic: /data/attachment/album/201909/24/210256yihkuy8kcigugr2h.png.thumb.jpg
related:
- displayorder: 0
  raid: 12747
reviewer: wxy
selector: ''
summary: Go 语言，能在多低下的配置上运行并发挥作用呢？
tags:
- Go
thumb: false
title: Go 语言在极小硬件上的运用（一）
titlepic: true
translator: wenwensnow
updated: '2019-09-24 21:03:09'
---
![](/data/attachment/album/201909/24/210256yihkuy8kcigugr2h.png)
Go 语言，能在多低下的配置上运行并发挥作用呢？
我最近购买了一个特别便宜的开发板：
![STM32F030F4P6](/data/attachment/album/201909/24/210325sk2snn6u6hs82tu7.jpg)
我购买它的理由有三个。首先，我（作为程序员）从未接触过 STM320 系列的开发板。其次，STM32F10x 系列使用也有点少了。STM320 系列的 MCU 很便宜，有更新一些的外设，对系列产品进行了改进，问题修复也做得更好了。最后，为了这篇文章，我选用了这一系列中最低配置的开发板，整件事情就变得有趣起来了。
### 硬件部分
[STM32F030F4P6](http://www.st.com/content/st_com/en/products/microcontrollers/stm32-32-bit-arm-cortex-mcus/stm32-mainstream-mcus/stm32f0-series/stm32f0x0-value-line/stm32f030f4.html) 给人留下了很深的印象：
* CPU: [Cortex M0](https://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M0) 48 MHz（最低配置，只有 12000 个逻辑门电路）
* RAM: 4 KB，
* Flash: 16 KB，
* ADC、SPI、I2C、USART 和几个定时器
以上这些采用了 TSSOP20 封装。正如你所见，这是一个很小的 32 位系统。
### 软件部分
如果你想知道如何在这块开发板上使用 [Go](https://golang.org/) 编程，你需要反复阅读硬件规范手册。你必须面对这样的真实情况：在 Go 编译器中给 Cortex-M0 提供支持的可能性很小。而且，这还仅仅只是第一个要解决的问题。
我会使用 [Emgo](https://github.com/ziutek/emgo)，但别担心，之后你会看到，它如何让 Go 在如此小的系统上尽可能发挥作用。
在我拿到这块开发板之前，对 [stm32/hal](https://github.com/ziutek/emgo/tree/master/egpath/src/stm32/hal) 系列下的 F0 MCU 没有任何支持。在简单研究[参考手册](http://www.st.com/resource/en/reference_manual/dm00091010.pdf)后，我发现 STM32F0 系列是 STM32F3 削减版，这让在新端口上开发的工作变得容易了一些。
如果你想接着本文的步骤做下去，需要先安装 Emgo
```
cd $HOME
git clone https://github.com/ziutek/emgo/
cd emgo/egc
go install
```
然后设置一下环境变量
```
export EGCC=path_to_arm_gcc      # eg. /usr/local/arm/bin/arm-none-eabi-gcc
export EGLD=path_to_arm_linker   # eg. /usr/local/arm/bin/arm-none-eabi-ld
export EGAR=path_to_arm_archiver # eg. /usr/local/arm/bin/arm-none-eabi-ar
export EGROOT=$HOME/emgo/egroot
export EGPATH=$HOME/emgo/egpath
export EGARCH=cortexm0
export EGOS=noos
export EGTARGET=f030x6
```
更详细的说明可以在 [Emgo](https://github.com/ziutek/emgo) 官网上找到。
要确保 `egc` 在你的 `PATH` 中。 你可以使用 `go build` 来代替 `go install`，然后把 `egc` 复制到你的 `$HOME/bin` 或 `/usr/local/bin` 中。
现在，为你的第一个 Emgo 程序创建一个新文件夹，随后把示例中链接器脚本复制过来：
```
mkdir $HOME/firstemgo
cd $HOME/firstemgo
cp $EGPATH/src/stm32/examples/f030-demo-board/blinky/script.ld .
```
### 最基本程序
在 `main.go` 文件中创建一个最基本的程序：
```
package main
func main() {
}
```
文件编译没有出现任何问题：
```
$ egc
$ arm-none-eabi-size cortexm0.elf
   text    data     bss     dec     hex filename
   7452     172     104    7728    1e30 cortexm0.elf
```
第一次编译可能会花点时间。编译后产生的二进制占用了 7624 个字节的 Flash 空间（文本 + 数据）。对于一个什么都没做的程序来说，占用的空间有些大。还剩下 8760 字节，可以用来做些有用的事。
不妨试试传统的 “Hello, World!” 程序：
```
package main
import "fmt"
func main() {
    fmt.Println("Hello, World!")
}
```
不幸的是，这次结果有些糟糕：
```
$ egc
/usr/local/arm/bin/arm-none-eabi-ld: /home/michal/P/go/src/github.com/ziutek/emgo/egpath/src/stm32/examples/f030-demo-board/blog/cortexm0.elf section `.text' will not fit in region `Flash'
/usr/local/arm/bin/arm-none-eabi-ld: region `Flash' overflowed by 10880 bytes
exit status 1
```
“Hello, World!” 需要 STM32F030x6 上至少 32KB 的 Flash 空间。
`fmt` 包强制包含整个 `strconv` 和 `reflect` 包。这三个包，即使在精简版本中的 Emgo 中，占用空间也很大。我们不能使用这个例子了。有很多的应用不需要好看的文本输出。通常，一个或多个 LED，或者七段数码管显示就足够了。不过，在第二部分，我会尝试使用 `strconv` 包来格式化，并在 UART 上显示一些数字和文本。
### 闪烁
我们的开发板上有一个与 PA4 引脚和 VCC 相连的 LED。这次我们的代码稍稍长了一些：
```
package main
import (
    "delay"
    "stm32/hal/gpio"
    "stm32/hal/system"
    "stm32/hal/system/timer/systick"
)
var led gpio.Pin
func init() {
    system.SetupPLL(8, 1, 48/8)
    systick.Setup(2e6)
    gpio.A.EnableClock(false)
    led = gpio.A.Pin(4)
    cfg := &gpio.Config{Mode: gpio.Out, Driver: gpio.OpenDrain}
    led.Setup(cfg)
}
func main() {
    for {
        led.Clear()
        delay.Millisec(100)
        led.Set()
        delay.Millisec(900)
    }
}
```
按照惯例，`init` 函数用来初始化和配置外设。
`system.SetupPLL(8, 1, 48/8)` 用来配置 RCC，将外部的 8 MHz 振荡器的 PLL 作为系统时钟源。PLL 分频器设置为 1，倍频数设置为 48/8 =6，这样系统时钟频率为 48MHz。
`systick.Setup(2e6)` 将 Cortex-M SYSTICK 时钟作为系统时钟，每隔 2e6 次纳秒运行一次（每秒钟 500 次）。
`gpio.A.EnableClock(false)` 开启了 GPIO A 口的时钟。`False` 意味着这一时钟在低功耗模式下会被禁用，但在 STM32F0 系列中并未实现这一功能。
`led.Setup(cfg)` 设置 PA4 引脚为开漏输出。
`led.Clear()` 将 PA4 引脚设为低，在开漏设置中，打开 LED。
`led.Set()` 将 PA4 设为高电平状态，关掉LED。
编译这个代码：
```
$ egc
$ arm-none-eabi-size cortexm0.elf
   text    data     bss     dec     hex filename
   9772     172     168   10112    2780 cortexm0.elf
```
正如你所看到的，这个闪烁程序占用了 2320 字节，比最基本程序占用空间要大。还有 6440 字节的剩余空间。
看看代码是否能运行：
```
$ openocd -d0 -f interface/stlink.cfg -f target/stm32f0x.cfg -c 'init; program cortexm0.elf; reset run; exit'
Open On-Chip Debugger 0.10.0+dev-00319-g8f1f912a (2018-03-07-19:20)
Licensed under GNU GPL v2
For bug reports, read
        http://openocd.org/doc/doxygen/bugs.html
debug_level: 0
adapter speed: 1000 kHz
adapter_nsrst_delay: 100
none separate
adapter speed: 950 kHz
target halted due to debug-request, current mode: Thread 
xPSR: 0xc1000000 pc: 0x0800119c msp: 0x20000da0
adapter speed: 4000 kHz
** Programming Started **
auto erase enabled
target halted due to breakpoint, current mode: Thread 
xPSR: 0x61000000 pc: 0x2000003a msp: 0x20000da0
wrote 10240 bytes from file cortexm0.elf in 0.817425s (12.234 KiB/s)
** Programming Finished **
adapter speed: 950 kHz
```
在这篇文章中，这是我第一次，将一个短视频转换成[动画 PNG](https://en.wikipedia.org/wiki/APNG)。我对此印象很深，再见了 YouTube。 对于 IE 用户，我很抱歉，更多信息请看 [apngasm](http://apngasm.sourceforge.net/)。我本应该学习 HTML5，但现在，APNG 是我最喜欢的，用来播放循环短视频的方法了。
![STM32F030F4P6](/data/attachment/album/201909/24/210408vdq9h6qh6cwxtu0z.png)
### 更多的 Go 语言编程
如果你不是一个 Go 程序员，但你已经听说过一些关于 Go 语言的事情，你可能会说：“Go 语法很好，但跟 C 比起来，并没有明显的提升。让我看看 Go 语言的通道和协程！”