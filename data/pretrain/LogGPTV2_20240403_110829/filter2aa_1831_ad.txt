Copy the text in the region to the kill buﬀer, so it can be yanked right away.
By default, this command is unbound.
copy-backward-word ()
Copy the word before point to the kill buﬀer. The word boundaries are the
same as backward-word. By default, this command is unbound.
copy-forward-word ()
Copy the word following point to the kill buﬀer. The word boundaries are the
same as forward-word. By default, this command is unbound.
yank (C-y)
Yank the top of the kill ring into the buﬀer at point.
Chapter 1: Command Line Editing
17
yank-pop (M-y)
Rotate the kill-ring, and yank the new top. You can only do this if the prior
command is yank or yank-pop.
1.4.5 Specifying Numeric Arguments
digit-argument (M-0, M-1, ... M--)
Add this digit to the argument already accumulating, or start a new argument.
M-- starts a negative argument.
universal-argument ()
This is another way to specify an argument. If this command is followed by one
or more digits, optionally with a leading minus sign, those digits deﬁne the ar-
gument. If the command is followed by digits, executing universal-argument
again ends the numeric argument, but is otherwise ignored. As a special case,
if this command is immediately followed by a character that is neither a digit
or minus sign, the argument count for the next command is multiplied by four.
The argument count is initially one, so executing this function the ﬁrst time
makes the argument count four, a second time makes the argument count six-
teen, and so on. By default, this is not bound to a key.
1.4.6 Letting Readline Type For You
complete (TAB)
Attempt to perform completion on the text before point. The actual completion
performed is application-speciﬁc. The default is ﬁlename completion.
possible-completions (M-?)
List the possible completions of the text before point.
insert-completions (M-*)
Insert all completions of the text before point that would have been generated
by possible-completions.
menu-complete ()
Similar to complete, but replaces the word to be completed with a single match
from the list of possible completions. Repeated execution of menu-complete
steps through the list of possible completions, inserting each match in turn.
At the end of the list of completions, the bell is rung (subject to the setting
of bell-style) and the original text is restored. An argument of n moves n
positions forward in the list of matches; a negative argument may be used to
move backward through the list. This command is intended to be bound to
TAB, but is unbound by default.
menu-complete-backward ()
Identical to menu-complete, but moves backward through the list of possible
completions, as if menu-complete had been given a negative argument.
delete-char-or-list ()
Deletes the character under the cursor if not at the beginning or end of the line
(like delete-char). If at the end of the line, behaves identically to possible-
completions. This command is unbound by default.
Chapter 1: Command Line Editing
18
1.4.7 Keyboard Macros
start-kbd-macro (C-x ()
Begin saving the characters typed into the current keyboard macro.
end-kbd-macro (C-x ))
Stop saving the characters typed into the current keyboard macro and save the
deﬁnition.
call-last-kbd-macro (C-x e)
Re-execute the last keyboard macro deﬁned, by making the characters in the
macro appear as if typed at the keyboard.
1.4.8 Some Miscellaneous Commands
re-read-init-file (C-x C-r)
Read in the contents of the inputrc ﬁle, and incorporate any bindings or variable
assignments found there.
abort (C-g)
Abort the current editing command and ring the terminal’s bell (subject to the
setting of bell-style).
do-uppercase-version (M-a, M-b, M-x, ...)
If the metaﬁed character x is lowercase, run the command that is bound to the
corresponding uppercase character.
prefix-meta (ESC)
Metafy the next character typed. This is for keyboards without a meta key.
Typing ‘ESC f’ is equivalent to typing M-f.
undo (C-_ or C-x C-u)
Incremental undo, separately remembered for each line.
revert-line (M-r)
Undo all changes made to this line. This is like executing the undo command
enough times to get back to the beginning.
tilde-expand (M-~)
Perform tilde expansion on the current word.
set-mark (C-@)
Set the mark to the point. If a numeric argument is supplied, the mark is set
to that position.
exchange-point-and-mark (C-x C-x)
Swap the point with the mark. The current cursor position is set to the saved
position, and the old cursor position is saved as the mark.
character-search (C-])
A character is read and point is moved to the next occurrence of that character.
A negative count searches for previous occurrences.
character-search-backward (M-C-])
A character is read and point is moved to the previous occurrence of that
character. A negative count searches for subsequent occurrences.
Chapter 1: Command Line Editing
19
skip-csi-sequence ()
Read enough characters to consume a multi-key sequence such as those deﬁned
for keys like Home and End. Such sequences begin with a Control Sequence
Indicator (CSI), usually ESC-[. If this sequence is bound to "\e[", keys pro-
ducing such sequences will have no eﬀect unless explicitly bound to a readline
command, instead of inserting stray characters into the editing buﬀer. This is
unbound by default, but usually bound to ESC-[.
insert-comment (M-#)
Without a numeric argument, the value of the comment-begin variable is in-
serted at the beginning of the current line. If a numeric argument is supplied,
this command acts as a toggle: if the characters at the beginning of the line
do not match the value of comment-begin, the value is inserted, otherwise the
characters in comment-begin are deleted from the beginning of the line. In
either case, the line is accepted as if a newline had been typed.
dump-functions ()
Print all of the functions and their key bindings to the Readline output stream.
If a numeric argument is supplied, the output is formatted in such a way that
it can be made part of an inputrc ﬁle. This command is unbound by default.
dump-variables ()
Print all of the settable variables and their values to the Readline output stream.
If a numeric argument is supplied, the output is formatted in such a way that
it can be made part of an inputrc ﬁle. This command is unbound by default.
dump-macros ()
Print all of the Readline key sequences bound to macros and the strings they
output. If a numeric argument is supplied, the output is formatted in such a
way that it can be made part of an inputrc ﬁle. This command is unbound by
default.
emacs-editing-mode (C-e)
When in vi command mode, this causes a switch to emacs editing mode.
vi-editing-mode (M-C-j)
When in emacs editing mode, this causes a switch to vi editing mode.
1.5 Readline vi Mode
While the Readline library does not have a full set of vi editing functions, it does contain
enough to allow simple editing of the line. The Readline vi mode behaves as speciﬁed in
the posix 1003.2 standard.
In order to switch interactively between emacs and vi editing modes, use the command
M-C-j (bound to emacs-editing-mode when in vi mode and to vi-editing-mode in emacs
mode). The Readline default is emacs mode.
When you enter a line in vi mode, you are already placed in ‘insertion’ mode, as if you
had typed an ‘i’. Pressing ESC switches you into ‘command’ mode, where you can edit the
text of the line with the standard vi movement keys, move to previous history lines with
‘k’ and subsequent lines with ‘j’, and so forth.
Chapter 2: Programming with GNU Readline
20
2 Programming with GNU Readline
This chapter describes the interface between the gnu Readline Library and other programs.
If you are a programmer, and you wish to include the features found in gnu Readline such
as completion, line editing, and interactive history manipulation in your own programs, this
section is for you.
2.1 Basic Behavior
Many programs provide a command line interface, such as mail, ftp, and sh. For such
programs, the default behaviour of Readline is suﬃcient. This section describes how to use
Readline in the simplest way possible, perhaps to replace calls in your code to gets() or
fgets().
The function readline() prints a prompt prompt and then reads and returns a single
line of text from the user. If prompt is NULL or the empty string, no prompt is displayed.
The line readline returns is allocated with malloc(); the caller should free() the line
when it has ﬁnished with it. The declaration for readline in ANSI C is
char *readline (const char *prompt);
So, one might say
char *line = readline ("Enter a line: ");
in order to read a line of text from the user. The line returned has the ﬁnal newline removed,
so only the text remains.
If readline encounters an EOF while reading the line, and the line is empty at that
point, then (char *)NULL is returned. Otherwise, the line is ended just as if a newline had
been typed.
If you want the user to be able to get at the line later, (with C-p for example), you must
call add_history() to save the line away in a history list of such lines.
add_history (line);
For full details on the GNU History Library, see the associated manual.
It is preferable to avoid saving empty lines on the history list, since users rarely have a
burning need to reuse a blank line. Here is a function which usefully replaces the standard
gets() library function, and has the advantage of no static buﬀer to overﬂow:
/* A static variable for holding the line. */
static char *line_read = (char *)NULL;
/* Read a string, and return a pointer to it.
Returns NULL on EOF. */
char *
rl_gets ()
{
/* If the buffer has already been allocated,
return the memory to the free pool. */
if (line_read)
{
free (line_read);
Chapter 2: Programming with GNU Readline
21
line_read = (char *)NULL;
}
/* Get a line from the user. */
line_read = readline ("");
/* If the line has any text in it,
save it on the history. */
if (line_read && *line_read)
add_history (line_read);
return (line_read);
}
This function gives the user the default behaviour of TAB completion: completion on ﬁle
names. If you do not want Readline to complete on ﬁlenames, you can change the binding
of the TAB key with rl_bind_key().
int rl_bind_key (int key, rl_command_func_t *function);
rl_bind_key() takes two arguments: key is the character that you want to bind, and
function is the address of the function to call when key is pressed. Binding TAB to rl_
insert() makes TAB insert itself. rl_bind_key() returns non-zero if key is not a valid
ASCII character code (between 0 and 255).
Thus, to disable the default TAB behavior, the following suﬃces:
rl_bind_key (’\t’, rl_insert);
This code should be executed once at the start of your program; you might write a func-
tion called initialize_readline() which performs this and other desired initializations,
such as installing custom completers (see Section 2.6 [Custom Completers], page 41).
2.2 Custom Functions
Readline provides many functions for manipulating the text of the line, but it isn’t possible
to anticipate the needs of all programs. This section describes the various functions and
variables deﬁned within the Readline library which allow a user program to add customized
functionality to Readline.
Before declaring any functions that customize Readline’s behavior, or using any func-
tionality Readline provides in other code, an application writer should include the ﬁle
 in any ﬁle that uses Readline’s features. Since some of the deﬁ-
nitions in readline.h use the stdio library, the ﬁle  should be included before
readline.h.
readline.h deﬁnes a C preprocessor variable that should be treated as an integer, RL_
READLINE_VERSION, which may be used to conditionally compile application code depending
on the installed Readline version. The value is a hexadecimal encoding of the major and
minor version numbers of the library, of the form 0xMMmm. MM is the two-digit major
version number; mm is the two-digit minor version number. For Readline 4.2, for example,
the value of RL_READLINE_VERSION would be 0x0402.
Chapter 2: Programming with GNU Readline
22
2.2.1 Readline Typedefs
For readabilty, we declare a number of new object types, all pointers to functions.
The reason for declaring these new types is to make it easier to write code describing
pointers to C functions with appropriately prototyped arguments and return values.
For instance, say we want to declare a variable func as a pointer to a function which
takes two int arguments and returns an int (this is the type of all of the Readline bindable
functions). Instead of the classic C declaration
int (*func)();
or the ANSI-C style declaration
int (*func)(int, int);
we may write
rl_command_func_t *func;
The full list of function pointer types available is
typedef int rl_command_func_t (int, int);
typedef char *rl_compentry_func_t (const char *, int);
typedef char **rl_completion_func_t (const char *, int, int);
typedef char *rl_quote_func_t (char *, int, char *);
typedef char *rl_dequote_func_t (char *, int);
typedef int rl_compignore_func_t (char **);
typedef void rl_compdisp_func_t (char **, int, int);
typedef int rl_hook_func_t (void);
typedef int rl_getc_func_t (FILE *);
typedef int rl_linebuf_func_t (char *, int);
typedef int rl_intfunc_t (int);
#define rl_ivoidfunc_t rl_hook_func_t
typedef int rl_icpfunc_t (char *);
typedef int rl_icppfunc_t (char **);
typedef void rl_voidfunc_t (void);
typedef void rl_vintfunc_t (int);
typedef void rl_vcpfunc_t (char *);
typedef void rl_vcppfunc_t (char **);
2.2.2 Writing a New Function
In order to write new functions for Readline, you need to know the calling conventions for
keyboard-invoked functions, and the names of the variables that describe the current state
of the line read so far.
The calling sequence for a command foo looks like
int foo (int count, int key)
where count is the numeric argument (or 1 if defaulted) and key is the key that invoked
this function.
It is completely up to the function as to what should be done with the numeric argument.
Some functions use it as a repeat count, some as a ﬂag, and others to choose alternate
behavior (refreshing the current line as opposed to refreshing the screen, for example).
Chapter 2: Programming with GNU Readline
23
Some choose to ignore it. In general, if a function uses the numeric argument as a repeat
count, it should be able to do something useful with both negative and positive arguments.
At the very least, it should be aware that it can be passed a negative argument.
A command function should return 0 if its action completes successfully, and a non-zero
value if some error occurs. This is the convention obeyed by all of the builtin Readline
bindable command functions.
2.3 Readline Variables
These variables are available to function writers.
[Variable]
char * rl_line_buffer
This is the line gathered so far. You are welcome to modify the contents of the line,
but see Section 2.4.5 [Allowing Undoing], page 31. The function rl_extend_line_
buffer is available to increase the memory allocated to rl_line_buffer.
[Variable]
int rl_point
The oﬀset of the current cursor position in rl_line_buffer (the point).
[Variable]
int rl_end
The number of characters present in rl_line_buffer. When rl_point is at the end
of the line, rl_point and rl_end are equal.