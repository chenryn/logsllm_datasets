### 0x4.2 查找DLL目录的顺序

根据微软官方文档中的[动态链接库安全](https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-security)和[动态链接库搜索顺序](https://docs.microsoft.com/zh-cn/windows/win32/dlls/dynamic-link-library-search-order)，在Windows XP SP2之前（不包括），默认情况下未启用DLL搜索模式。以下是Windows查找DLL目录及其顺序：

1. 应用程序加载的目录。
2. 当前目录。
3. 系统目录。可以使用[GetSystemDirectory](https://docs.microsoft.com/en-us/windows/desktop/api/sysinfoapi/nf-sysinfoapi-getsystemdirectorya)函数获取该目录的路径。
4. 16位系统目录。虽然没有函数可以直接获取该目录的路径，但它会被搜索。
5. Windows目录。可以使用[GetWindowsDirectory](https://docs.microsoft.com/en-us/windows/desktop/api/sysinfoapi/nf-sysinfoapi-getwindowsdirectorya)函数获取该目录的路径。
6. PATH环境变量中列出的目录。注意，这不包括由**App Paths**注册表键指定的每个应用程序路径。**App Paths**键不会用于计算DLL搜索路径。

在Windows下，几乎所有文件类型都关联了一个对应的处理程序。DLL会首先尝试搜索启动程序所在的目录（1），如果没有找到，则继续搜索被打开文件所在的目录（2）。如果仍然没有找到，将继续搜索系统目录（3）、16位系统目录、Windows目录以及PATH环境变量中的各个目录。

这种加载顺序容易导致系统DLL被劫持，因为攻击者只需将目标文件与恶意DLL放在一起，即可使恶意DLL优先于系统DLL加载。由于系统DLL非常常见，因此基于这种加载顺序，出现了大量受影响的软件。

为了减轻这个问题，从Windows XP Service Pack 2（SP2）开始，默认启用了安全DLL搜索模式。新的搜索顺序如下：

1. 应用程序加载的目录。
2. 系统目录。可以使用[GetSystemDirectory](https://docs.microsoft.com/en-us/windows/desktop/api/sysinfoapi/nf-sysinfoapi-getsystemdirectorya)函数获取该目录的路径。
3. 16位系统目录。
4. Windows目录。可以使用[GetWindowsDirectory](https://docs.microsoft.com/en-us/windows/desktop/api/sysinfoapi/nf-sysinfoapi-getwindowsdirectorya)函数获取该目录的路径。
5. 当前目录。
6. PATH环境变量中列出的目录。

可以看到，当前目录被放置在了后面，对系统DLL起到了一定的保护作用。

#### 注
强制关闭SafeDllSearchMode的方法：
- 创建注册表项：
  - `HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode`
- 值设为0。

尽管如此，如果对程序安装目录有替换权限（例如安装在非系统盘），我们仍然可以通过利用加载顺序的第一条来劫持系统DLL。

从Windows 7开始，微软进一步防御系统DLL被劫持，将一些易被劫持的系统DLL写入了一个注册表项中。这些DLL文件将被禁止从EXE自身所在目录调用，而只能从系统目录（即SYSTEM32目录）调用。注册表路径如下：
- `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs`

这样进一步保护了系统DLL，防止这些常用的DLL被劫持加载。

然而，如果开发者滥用DLL目录，依然可能导致DLL劫持问题。

### 0x4.3 防御思路
- 调用第三方DLL时，使用绝对路径。
- 使用API `SetDllDirectory(L"")` 将当前目录从DLL加载顺序中移除。
- 在开发测试阶段，可以采用Process Monitor进行黑盒复测。

### 0x5 实例演示
我们需要使用一个工具：[Process Monitor v3.60](https://docs.microsoft.com/zh-cn/sysinternals/downloads/procmon)。操作过程如[动态链接库安全](https://docs.microsoft.com/zh-cn/windows/win32/dlls/dynamic-link-library-security?redirectedfrom=MSDN)所述：

打开进程监视器时，需要填入过滤器：
- 包含以下过滤器：
  - 操作是CreateFile
  - 操作是LoadImage
  - 路径包含.cpl
  - 路径包含.dll
  - 路径包含.drv
  - 路径包含.exe
  - 路径包含.ocx
  - 路径包含.scr
  - 路径包含.sys
- 排除以下过滤器：
  - 进程名是procmon.exe
  - 进程名是Procmon64.exe
  - 进程名是System
  - 操作以IRP_MJ_开头
  - 操作以FASTIO_开头
  - 结果是SUCCESS
  - 路径以pagefile.sys结尾

通过上述配置，我们可以过滤掉大量无关信息，快速定位到DLL实际加载的路径。

然后，随便打开一个程序，这里我使用的是深信服的EasyConnectInstaller。可以看到，它最终会尝试加载当前目录的一些DLL。可以尝试替换rattler中的`payload.dll`名字，点击执行后弹出计算器。

### 0x6 自动化挖掘

#### 0x6.1 Ratter
1. 下载地址：
2. 使用方法：
   ```shell
   Rattler_x64.exe NDP461-KB3102438-Web.exe 1
   ```
   结果发现这个并没有检测出来，可能是calc.exe启动失败的原因。个人感觉这个工具并不是很准确。

#### 0x6.2 ChkDllHijack
1. 下载地址：[]
2. 使用windbg导出module，然后打开chkDllHijack，粘贴要验证的DLL内容，让其自行运行。如果成功，下面会出现结果；否则显示失败。

### 0x7 总结
综合来说，我个人还是比较推荐使用Process Monitor作为辅助工具，然后手工验证这种挖掘思路。不过自动化工具确实很好，可以尝试自己重新定制检测判断规则。本文主要面向入门级新手，后续可能会深入探讨DLL代码细节和免杀利用方面（这个过程比较耗时，慢慢填坑吧）。

### 0x8 参考链接
- [.dll 文件编写和使用](https://www.cnblogs.com/whlook/p/6701688.html)
- [DLL劫持-免杀](https://blog.haiya360.com/archives/826.html)
- [DLL劫持漏洞自动化识别工具Rattler测试](https://3gstudent.github.io/DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E%E8%87%AA%E5%8A%A8%E5%8C%96%E8%AF%86%E5%88%AB%E5%B7%A5%E5%85%B7Rattler%E6%B5%8B%E8%AF%95/)
- [注入技术系列：一个批量验证DLL劫持的工具](https://www.freebuf.com/vuls/218917.html)
- [恶意程序研究之DLL劫持](https://www.ascotbe.com/2020/11/13/DynamicLinkLibraryHijack/#%E5%AE%9E%E6%88%98%E5%8C%96%E5%88%A9%E7%94%A8)