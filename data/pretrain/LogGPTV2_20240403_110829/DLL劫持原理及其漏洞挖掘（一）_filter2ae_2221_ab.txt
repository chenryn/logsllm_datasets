###  0x4.2 查找DLL目录的顺序
正如[动态链接库安全](https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-security) 、[动态链接库搜索顺序](https://docs.microsoft.com/zh-cn/windows/win32/dlls/dynamic-link-library-search-order)微软的官方文档所说,
在Windows XP SP2 之前(不包括), 默认未启用DLL搜索模式。
Windows查找DLL目录及其顺序如下:
>   1. The directory from which the application loaded.
>   2. The current directory.
>   3. The system directory. Use the
> [**GetSystemDirectory**](https://docs.microsoft.com/en-> us/windows/desktop/api/sysinfoapi/nf-sysinfoapi-getsystemdirectorya)
> function to get the path of this directory.
>   4. The 16-bit system directory. There is no function that obtains the path
> of this directory, but it is searched.
>   5. The Windows directory. Use the
> [**GetWindowsDirectory**](https://docs.microsoft.com/en-> us/windows/desktop/api/sysinfoapi/nf-sysinfoapi-getwindowsdirectorya)
> function to get the path of this directory.
>   6. The directories that are listed in the PATH environment variable. Note
> that this does not include the per-application path specified by the **App
> Paths** registry key. The **App Paths** key is not used when computing the
> DLL search path.
>
在Windows下, 几乎每一种文件类型都会关联一个对应的处理程序。
首先DLL会先尝试搜索启动程序所处的目录(1)，没有找到，则搜索被打开文件所在的目录(2),若还没有找到,则搜索系统目录(3),若还没有找到,则向下搜索16位系统目录，…Windows目录…Path环境变量的各个目录。
**这样的加载顺序很容易导致一个系统dll被劫持，因为只要攻击者将目标文件和恶意dll放在一起即可,导致恶意dll先于系统dll加载，而系统dll是非常常见的，所以当时基于这样的加载顺序，出现了大量受影响软件。**
后来为了减轻这个影响,默认情况下，从Windows XP Service Pack 2（SP2）开始启用安全DLL搜索模式。
>   1. The directory from which the application loaded.
>   2. The system directory. Use the
> [**GetSystemDirectory**](https://docs.microsoft.com/en-> us/windows/desktop/api/sysinfoapi/nf-sysinfoapi-getsystemdirectorya)
> function to get the path of this directory.
>   3. The 16-bit system directory. There is no function that obtains the path
> of this directory, but it is searched.
>   4. The Windows directory. Use the
> [**GetWindowsDirectory**](https://docs.microsoft.com/en-> us/windows/desktop/api/sysinfoapi/nf-sysinfoapi-getwindowsdirectorya)
> function to get the path of this directory.
>   5. The current directory.
>   6. The directories that are listed in the PATH environment variable. Note
> that this does not include the per-application path specified by the **App
> Paths** registry key. The **App Paths** key is not used when computing the
> DLL search path.
>
可以看到当前目录被放置在了后面,对系统dll起到一定的保护作用。
注:
> 强制关闭SafeDllSearchMode的方法:
>
> 创建注册表项:
>  
>  
>     HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session
> Manager\SafeDllSearchMode
>  
>
> 值为0
**不过从上面分析可以知道,系统dll应该是经常调用的,如果我们对程序安装的目录拥有替换权限，比如装在了非系统盘，那么我们同样可以利用加载顺序的(1)来劫持系统的DLL。**
从Windows7 之后, 微软为了更进一步的防御系统的DLL被劫持，将一些容易被劫持的系统DLL写进了一个注册表项中，
**那么凡是此项下的DLL文件就会被禁止从EXE自身所在的目录下调用** ，而只能从系统目录即SYSTEM32目录下调用。注册表路径如下：
    HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs
win10的键值项,如图:
这样子就进一步保护了系统dll,防止这些常用的dll被劫持加载。
但是如果开发者滥用DLL目录，依然会导致DLL劫持问题。(开发真难…orz)
###  0x4.3 防御思路
  * 调用第三方DLL时,使用绝对路径
  * 调用API SetDllDirectory(L”“)将当前目录从DLL加载顺序中移除
  * 开发测试阶段，可以采用Process Monitor进行黑盒复测
## 0x5 实例演示
这里我们需要使用一个工具:[Process Monitor v3.60](https://docs.microsoft.com/zh-cn/sysinternals/downloads/procmon)
操作过程如[动态链接库安全](https://docs.microsoft.com/zh-cn/windows/win32/dlls/dynamic-link-library-security?redirectedfrom=MSDN)所说:
打开进程监视器的时候,会要求填入过滤器。
    Include the following filters:
    Operation is CreateFile
    Operation is LoadImage
    Path contains .cpl
    Path contains .dll
    Path contains .drv
    Path contains .exe
    Path contains .ocx
    Path contains .scr
    Path contains .sys
    Exclude the following filters:
    Process Name is procmon.exe
    Process Name is Procmon64.exe
    Process Name is System
    Operation begins with IRP_MJ_
    Operation begins with FASTIO_
    Result is SUCCESS
    Path ends with pagefile.sys
一次填好即可(通过上面的配置，我们可以过滤大量无关的信息,快速定位到DLL确实的路径)
然后我们随便打开一个程序,这里我使用的是深x服的EasyConnectInstaller:
可以看到这里最终会去尝试加载当前目录的一些dll,这里可以尝试进行替换rattler中的`payload.dll`名字即可,点击执行就可以弹出calc了。
## 0x6 自动化挖掘
###  0x6.1 Ratter
1.下载地址:
2.使用
`Rattler_x64.exe NDP461-KB3102438-Web.exe 1`
结果发现这个并没有检测出来,可能是calc.exe启动失败的原因,个人感觉这个工具并不是很准确。
###  0x6.2 ChkDllHijack
1.下载地址:[]
2.使用windbg导出module
然后打开chkDllHijack,粘贴处要验证的DLL内容
然后让他自己跑完即可,如果成功下面就会出现结果。
否则就是失败:
## 0x7 总结
综合来说,我个人还是比较推荐采用Process
monitor作为辅助工具,然后自己手工验证这种挖掘思路的,不过自动化的确挺好的，可以尝试自己重新定制下检测判断规则。本文依然倾向于入门的萌新选手,后面可能会回归DLL代码细节和免杀利用方面来展开(这个过程就比较需要耗时间Orz,慢慢填坑吧)。
## 0x8 参考链接
[.dll 文件编写和使用](https://www.cnblogs.com/whlook/p/6701688.html)
[DLL劫持-免杀](https://blog.haiya360.com/archives/826.html)
[DLL劫持漏洞自动化识别工具Rattler测试](https://3gstudent.github.io/DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E%E8%87%AA%E5%8A%A8%E5%8C%96%E8%AF%86%E5%88%AB%E5%B7%A5%E5%85%B7Rattler%E6%B5%8B%E8%AF%95/)
[注入技术系列：一个批量验证DLL劫持的工具](https://www.freebuf.com/vuls/218917.html)
[恶意程序研究之DLL劫持](https://www.ascotbe.com/2020/11/13/DynamicLinkLibraryHijack/#%E5%AE%9E%E6%88%98%E5%8C%96%E5%88%A9%E7%94%A8)