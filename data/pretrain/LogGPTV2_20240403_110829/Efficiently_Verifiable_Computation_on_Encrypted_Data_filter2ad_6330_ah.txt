ComputeP K(σx = µ0, . . . , µt) → σy:
i=0 γi · µi ∈ Zq[X][Y ], and τ ←(cid:80)d
– Compute γ ←(cid:80)t
i=0 Ti · µi ∈ Rq[Y ].
, and τx ← 0 ∈ Zq.
q
– Set σy = (γ, τ ).
31
VerifySK(τx, σy = γ, τ ) → (acc, y(cid:48)): If Hκ(τ ) (cid:54)= c · Hκ(γ) + τx: reject. Otherwise: accept, and
compute y(cid:48) ← HE.Decdk(γ).
Theorem 9. If PRF is a pseudorandom function, H is a universal one-way homomorphic hash, and
HE is a semantically secure homomorphic encryption, then the scheme VCLC is correct, adaptively
secure, function private, input private.
Proof. For correctness, if both the client and the server are honest, the client accepts:
Hκ(τ ) =
=
i=0
t(cid:88)
t(cid:88)
(cid:32) t(cid:88)
i=0
t(cid:88)
i=0
(cid:33)
Ti · Hκ(µi) =
(c · Hκ(γi) + ri) · Hκ(µi)
t(cid:88)
(c · Hκ(γi) · Hκ(µi) + ri · Hκ(µi)) =
(c · Hκ(γi · µi) + ri · Hκ(µi))
t(cid:88)
i=0
ri · Hκ(µi) = c · Hκ
(cid:32) t(cid:88)
(cid:33)
= c ·
Hκ(γi · µi)
+
γi · µi
+ τx = c · Hκ(γ) + τx.
i=0
i=0
i=0
Where all the equalities hold by the fact that Hκ is a ring homomorphism and addition and multi-
plication of polynomials distribute. Moreover, the output y(cid:48) is the desired one, since it equals:
HE.Decdk(γ) = HE.Decdk
= HE.Decdk
HE.Encpk(gi) · HE.Encpk(xi)
(cid:33)
t(cid:88)
i=0
=
gi · xi.
(cid:33)
γi · µi
(cid:32) t(cid:88)
(cid:32) t(cid:88)
i=0
i=0
and such that the veriﬁcation passes. This would imply that Hκ(τ(cid:48)) = c · Hκ(γ(cid:48)) +(cid:80)t
For adaptive security, we show ﬁrstly that the scheme is split: deﬁne P KE = SKE = pk, and
notice that σx consists of µi = BV.Encpk(wi), which are independent of f . Therefore, in the security
experiment the challenger can answer the encoding queries before the adversary choses the function
to attack on. At that point the challenger computes the remaining part of the public and secret
key. Secondly, we show that no adversary wins the adaptive security game with non-negligible
probability. Notice that the values c, κ are hidden to the server, because Ti = c · Hκ(γi) + ri, and
ri is computationally indistinguishable from uniform by the security property of the PRF. Now,
for the sake of contradiction, assume that there is an adversary who can win the adaptive security
(cid:54)= γ,
game with non-negligible probability, i.e. suppose that a server could provide γ(cid:48), τ(cid:48) with γ(cid:48)
i=0 ri · µi, and
that Hκ(τ(cid:48))− Hκ(τ ) = c· (Hκ(γ(cid:48))− Hκ(γ)), which happens if and only if Hκ(τ(cid:48) − τ − c· (γ(cid:48) − γ)) = 0
(by the fact that Hκ is an homomorphism of rings). There are two possible scenarios in which this
happens:
1. τ(cid:48) − τ = c · (γ(cid:48) − γ). If this were the case, the server could compute c in polynomial time, by
dividing any Zq-coordinate of τ(cid:48) − τ by the corresponding Zq-coordinate of γ(cid:48) − γ (this division
in Zq is indeed possible, as we are guaranteed that τ(cid:48)− τ is the product of c by γ(cid:48)− γ). However,
computing c in polynomial time is impossible, since c is statistically hidden to the server, as
argued earlier. That means that this case happens with negligible probability.
2. τ(cid:48) − τ (cid:54)= c· (γ(cid:48) − γ), but Hκ(τ(cid:48) − τ − c· (γ(cid:48) − γ)) = 0. This is equivalent to breaking the universal
one-wayness of H, which is guaranteed to happen with negligible probability.
32
Combining the above, we obtain that the overall probability that an adversary wins the adaptive
security game is negligible.
To show function privacy, we create a series of games:
Game0: This is the regular privacy game.
Gamei+1: Identical to Gamei, but replace gi with 0 (for i = 0, . . . , t).
Notice that for any game the veriﬁcation oracle can be provided trivially, without the usage of sk.
By the semantic security of the HE scheme, an adversary who wins Gamei with a given probability
p wins Gamei+1 with probability negligibly close to p (otherwise one could turn the adversary into
an eﬀective attacker to the HE semantic security). However, Gamet+1 is completely independent of
the function, therefore any adversary wins that game with negligible probability. By the series of
hybrids, no adversary can win the original function privacy game.
Input privacy can be proven in a similar fashion, and it is guaranteed by the fact that the
(cid:117)(cid:116)
veriﬁcation check is independent fo the encoded values.
On the Outsourceability of the Scheme. As we hinted in the opening paragraph, this scheme
is not outsourceable, but it has the desirable property that the input does not have to be processed
at once, and does not need to be stored on the client side during the processing phase. More in
detail, the xi are generated in rounds, and at each round ProbGen is called. This means that the
vector σx is formally initialized as the zero vector, and at round i it is updated by appending µi but
only µi is sent to the server at round i. Analogously, τx is created and stored by the client at round
0, and at round i it is updated by adding ri · Hκ(µi). This allows the client to work with a short
memory: indeed, creating and sending µi requires O(log(q)) storage, which is the same memory
needed to create, update, and store τx.
Communication Complexity. In case of a sparse linear combination, say in which (cid:101)d among the
xi are non-zero, the client has two choices:
Maintain full input security: If the client wants to completely hide the weights, then it must
Improve the communication complexity: It can pay O((cid:101)d) by simply sending the non-zero
pay O(d) to send a ciphertext µi for each index, as in the standard scheme.
weights encrypted (and the indices they correspond to); in this case, however, it reveals which
indices are zero in the linear combination. Every piece of information on the non-zero indices is
preserved (by a simple reduction to the security of the standard scheme).
8 Computing Linear Functions over the ring Z2k
In this section we show another scheme that allows to compute multi-variate polynomials of degree-
1 over the ring Z
2k . The scheme has properties similar to the scheme in section 5: it is input private,
and it allows for constant-time veriﬁcation. The basic idea is to combine the linearly-homomorphic
encryption scheme recently proposed by Joye and Libert [41] with a linearly homomorphic MAC
with eﬃcient veriﬁcation. In particular, for the MAC we use the ideas in [7] to design a MAC that
allows us to authenticate linear computations over the group Z∗
N which is the ciphertext space of
the encryption scheme [41]. In particular, a crucial tool to achieve eﬃciency is a new pseudorandom
function with amortized closed-form eﬃciency whose security relied on the DDH assumption in the
subgroup of 2k-residues of Z∗
N .
A full description of the scheme VClin follows:
33
KeyGen(f, λ) → (P K, SK) :
– Sample two large-enough quasi-safe primes p, q such that p = 2kp(cid:48) + 1 and q = 2kq(cid:48) + 1. Set
N = pq, and sample y $← JN . Let us call Rk the subgroup of Z∗
N : Rk = {x2k : x ∈ Z∗
N}.
– Sample a random α $← Z∗
φ(N ), and run (K, pp) $← F.KG(1λ) to obtain the seed and the public
τ (K, f ).
– Compute a concise veriﬁcation information for f by using the oﬄine closed-form eﬃcient
parameters of an ACF-eﬃcient PRF FK : {0, 1}∗ × {0, 1}∗ → Rk.
algorithm of F, i.e., ωf←CFEvaloﬀ
ProbGenSK(x = (x1, . . . , xt)) → σx, τx:
$← Z∗
– Output the secret key SK = (p, α, K, ωf ), and the public evaluation key EK = (N, y, k, pp, f ).
– Choose an arbitrary string ∆ ∈ {0, 1}λ as an identiﬁer for the input vector x ∈ (Z
– For i = 1 to t: ﬁrst sample ri
– Set σx = (∆, c1, σ1, . . . , ct, σt), and τx = ⊥.
It is worth noting that ProbGen can work in the so-called streaming model in which every
input item xi can be processed separately.
– Let f = (f1, . . . , ft) ∈ (Z
Next, compute Ri←FK(∆, i), and compute σi = cα
2k )t be a linear function and let σx = (∆, c1, σ1, . . . , ct, σt).
i · Ri mod N .
N and compute ci = yxir2k
i mod N .
2k )t.
i mod N to homomorphically evaluate f over the ciphertexts
ComputeP K(σx) → σy:
– First, compute c←(cid:81)t
– Second, compute σ =(cid:81)t
(ci).
i=1 cfi
cation tags (σi).
i=1 σfi
i mod N to homomorphically evaluate f over the authenti-
– Output σy = (∆, c, σ).
VerifySK(σy = (∆, c, σ), τx) → (acc, x(cid:48)):
for f .
– Parse SK = (p, α, K, ωf ) as the secret key where ωf is the concise veriﬁcation information
– First, run the online closed-form eﬃcient algorithm of F, to compute W←CFEvalon
∆ (K, ωf ).
– Next, if the following equation is satisﬁed set acc = 1 (accept). Otherwise, set acc = 0
(reject).
– If acc = 1, then compute
(cid:17)
(cid:16) c
p
2k
σ = cα · W mod N
= cp(cid:48)
mod N , and ﬁnd x(cid:48) ∈ {0, 1}k such that [
(cid:16) y
(cid:17)
p
2k
(13)
]x(cid:48)
= z
(see [41] for details).
If acc = 0 set x(cid:48) = ⊥. Finally, return (acc, x(cid:48)).
Deﬁnition 12 (Gap-2k-Residuosity assumption [41]). Let N = pq be the product of two quasi-
safe primes p = 2kp(cid:48) + 1 and q = 2kq(cid:48) + 1. Deﬁne Rk = {x2k : x ∈ Z∗
N}, and let JN the subgroup
N of elements with Jacobi symbol 1, and let QRN ⊂ JN be the subgroup of quadratic residues
of Z∗
N . Let x $← Rk and y $← JN \ QRN . We say that the Gap-2k-Residuosity assumption holds if
of Z∗
for every PPT adversary A the following advantage is negligible:
AdvGap−2k−res
A
(λ) = | Pr[A(N, k, x) = 1] − Pr[A(N, k, y) = 1]|
In [41] it is shown that the Gap-2k-Residuosity assumption is implied by the more natural quadratic
residuosity and special Jacobi symbol assumptions.
34
Theorem 10. If F is a pseudorandom function and the Gap-2k-Residuosity assumption holds, then
VClin is correct, adaptively secure and input private.
Proof. For correctness observe that:
cα · W mod N =
(cid:32) t(cid:89)
i=1
cfi
i
(cid:33)α
(cid:33)
FK(∆, i)fi
=
(cid:32) t(cid:89)
i=1
·
t(cid:89)
i=1
(cα
i FK(∆, i))fi =
t(cid:89)
i=1
σfi
i = σ.
Below is a proof sketch for the security property.
A
i=1 Rfi
(cid:81)t
[VClin, λ].
Game 0: this is the experiment ExpAdap−V erif
Game 1: this is like Game 0, except that when answering veriﬁcation queries W is computed as
i mod N with Ri←FK(∆, i), instead of using the online closed-form eﬃcient algorithm.