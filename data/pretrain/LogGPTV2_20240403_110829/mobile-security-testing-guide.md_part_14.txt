the following negative effects:
voiding the device warranty (always check the manufacturer's policy before taking any action)
"bricking" the device, i.e., rendering it inoperable and unusable
creating additional security risks (because built-in exploit mitigations are often removed)
You should not root a personal device that you store your private information on. We recommend getting a cheap,
dedicated test device instead. Many older devices, such as Google's Nexus series, can run the newest Android
versions and are perfectly fine for testing.
You need to understand that rooting your device is ultimately YOUR decision and that OWASP shall in no way
be held responsible for any damage. If you're uncertain, seek expert advice before starting the rooting
process.
Which Mobiles Can Be Rooted
Virtually any Android mobile can be rooted. Commercial versions of Android OS (which are Linux OS evolutions at the
kernel level) are optimized for the mobile world. Some features have been removed or disabled for these versions, for
example, non-privileged users' ability to become the 'root' user (who has elevated privileges). Rooting a phone means
allowing users to become the root user, e.g., adding a standard Linux executable called su , which is used to change
to another user account.
To root a mobile device, first unlock its boot loader. The unlocking procedure depends on the device manufacturer.
However, for practical reasons, rooting some mobile devices is more popular than rooting others, particularly when it
comes to security testing: devices created by Google and manufactured by companies like Samsung, LG, and
Motorola are among the most popular, particularly because they are used by many developers. The device warranty is
not nullified when the boot loader is unlocked and Google provides many tools to support the root itself. A curated list
of guides for rooting all major brand devices is posted on the XDA forums.
108
Setting up a Testing Environment for Android Apps
Rooting with Magisk
Magisk ("Magic Mask") is one way to root your Android device. It's specialty lies in the way the modifications on the
system are performed. While other rooting tools alter the actual data on the system partition, Magisk does not (which
is called "systemless"). This enables a way to hide the modifications from root-sensitive applications (e.g. for banking
or games) and allows using the official Android OTA upgrades without the need to unroot the device beforehand.
You can get familiar with Magisk reading the official documentation on GitHub. If you don't have Magisk installed, you
can find installation instructions in the documentation. If you use an official Android version and plan to upgrade it,
Magisk provides a tutorial on GitHub.
Furthermore, developers can use the power of Magisk to create custom modules and submit them to the official
Magisk Modules repository. Submitted modules can then be installed inside the Magisk Manager application. One of
these installable modules is a systemless version of the famous Xposed Framework (available for SDK versions up to
27).
Root Detection
An extensive list of root detection methods is presented in the "Testing Anti-Reversing Defenses on Android" chapter.
For a typical mobile app security build, you'll usually want to test a debug build with root detection disabled. If such a
build is not available for testing, you can disable root detection in a variety of ways that will be introduced later in this
book.
Recommended Tools - Android device
There are many tools and frameworks used throughout this guide to assess the security of Android applications. In the
next sections, you will learn more about some of the commands and interesting use cases. Please check the official
documentation for installation instructions of the following tools/APKs:
APK Extractor: App to extract APKs without root.
Frida server: Server for Frida, the dynamic instrumentation toolkit for developers, reverse-engineers, and security
researchers. See Frida section below for more information.
Drozer agent: Agent for drozer, the framework that allows you to search for security vulnerabilities in apps and
devices. See Drozer section below for more information.
Xposed
Xposed is a "framework for modules that can change the behavior of the system and apps without touching any
APKs.". Technically, it is an extended version of Zygote that exports APIs for running Java code when a new process
is started. Running Java code in the context of the newly instantiated app makes it possible to resolve, hook, and
override Java methods belonging to the app. Xposed uses reflection to examine and modify the running app. Changes
are applied in memory and persist only during the process' runtime since the application binaries are not modified.
To use Xposed, you need to first install the Xposed framework on a rooted device as explained on XDA-Developers
Xposed framework hub. Modules can be installed through the Xposed Installer app, and they can be toggled on and
off through the GUI.
Note: given that a plain installation of the Xposed framework is easily detected with SafetyNet, we recommend using
Magisk to install Xposed. This way, applications with SafetyNet attestation should have a higher chance of being
testable with Xposed modules.
Xposed has been compared to Frida. When you run Frida server on a rooted device, you will end up with a similarly
effective setup. Both frameworks deliver a lot of value when you want to do dynamic instrumentation. When Frida
crashes the app, you can try something similar with Xposed. Next, similar to the abundance of Frida scripts, you can
easily use one of the many modules that come with Xposed, such as the earlier discussed module to bypass SSL
109
Setting up a Testing Environment for Android Apps
pinning (JustTrustMe and SSLUnpinning). Xposed includes other modules, such as Inspeckage which allow you to do
more in depth application testing as well. On top of that, you can create your own modules as well to patch often used
security mechanisms of Android applications.
Xposed can also be installed on an emulator through the following script:
#!/bin/sh
echo "Start your emulator with 'emulator -avd NAMEOFX86A8.0 -writable-system -selinux permissive -wipe-data'"
adb root && adb remount
adb install SuperSU\ v2.79.apk #binary can be downloaded from http://www.supersu.com/download
adb push root_avd-master/SuperSU/x86/su /system/xbin/su
adb shell chmod 0755 /system/xbin/su
adb shell setenforce 0
adb shell su --install
adb shell su --daemon&
adb push busybox /data/busybox #binary can be downloaded from https://busybox.net/
# adb shell "mount -o remount,rw /system && mv /data/busybox /system/bin/busybox && chmod 755 /system/bin/busyb
ox && /system/bin/busybox --install /system/bin"
adb shell chmod 755 /data/busybox
adb shell 'sh -c "./data/busybox --install /data"'
adb shell 'sh -c "mkdir /data/xposed"'
adb push xposed8.zip /data/xposed/xposed.zip #can be downloaded from https://dl-xda.xposed.info/framework/
adb shell chmod 0755 /data/xposed
adb shell 'sh -c "./data/unzip /data/xposed/xposed.zip -d /data/xposed/"'
adb shell 'sh -c "cp /data/xposed/xposed/META-INF/com/google/android/*.* /data/xposed/xposed/"'
echo "Now adb shell and do 'su', next: go to ./data/xposed/xposed, make flash-script.sh executable and run it i
n that directory after running SUperSU"
echo "Next, restart emulator"
echo "Next, adb install XposedInstaller_3.1.5.apk"
echo "Next, run installer and then adb reboot"
echo "Want to use it again? Start your emulator with 'emulator -avd NAMEOFX86A8.0 -writable-system -selinux per
missive'"
Please note that Xposed, as of early 2019, does not work on Android 9 (API level 28) yet.
Recommended Tools - Host computer
In order to analyze Android apps, you should install the following tools on your host computer. Please check the
official documentation for installation instructions of the following tools/frameworks. We'll be referring to them
throughout the guide.
Adb
adb (Android Debug Bridge), shipped with the Android SDK, bridges the gap between your local development
environment and a connected Android device. You'll usually leverage it to test apps on the emulator or a connected
device via USB or WiFi. Use the adb devices command to list the connected devices and execute it with the -l
argument to retrieve more details on them.
$ adb devices -l
List of devices attached
090c285c0b97f748 device usb:1-1 product:razor model:Nexus_7 device:flo
emulator-5554 device product:sdk_google_phone_x86 model:Android_SDK_built_for_x86 device:generic_x86 transpo
rt_id:1
adb provides other useful commands such as adb shell to start an interactive shell on a target and adb forward to
forward traffic on a specific host port to a different port on a connect device.
$ adb forward tcp: tcp:
110
Setting up a Testing Environment for Android Apps
$ adb -s emulator-5554 shell
root@generic_x86:/ # ls
acct
cache
charger
config
...
You'll come across different use cases on how you can use adb commands when testing later in this book. Note that
you must define the serialnummer of the target device with the -s argument (as shown by the previous code
snippet) in case you have multiple devices connected.
Angr
Angr is a Python framework for analyzing binaries. It is useful for both static and dynamic symbolic ("concolic")
analysis. In other words: given a binary and a requested state, Angr will try to get to that state, using formal methods
(a technique used for static code analysis) to find a path, as well as brute forcing. Using angr to get to the requested
state is often much faster than taking manual steps for debugging and searching the path towards the required state.
Angr operates on the VEX intermediate language and comes with a loader for ELF/ARM binaries, so it is perfect for
dealing with native code, such as native Android binaries.
Angr allows for disassembly, program instrumentation, symbolic execution, control-flow analysis, data-dependency
analysis, decompilation and more, given a large set of plugins.
Since version 8, Angr is based on Python 3, and can be installed with pip on *nix operating systems, macOS and
Windows:
$ pip install angr
Some of angr's dependencies contain forked versions of the Python modules Z3 and PyVEX, which would
overwrite the original versions. If you're using those modules for anything else, you should create a dedicated
virtual environment with Virtualenv. Alternatively, you can always use the provided docker container. See the
installation guide for more details.
Comprehensive documentation, including an installation guide, tutorials, and usage examples are available on Angr's
Gitbooks page. A complete API reference is also available.
You can use angr from a Python REPL - such as iPython - or script your approaches. Although angr has a bit of a
steep learning curve, we do recommend using it when you want to brute force your way to a given state of an
executable. Please see the Symbolic Execution section of the Reverse Engineering and Tampering as a great
example on how this can work.
Apktool
Apktool is used to unpack Android app packages (APKs). Simply unzipping APKs with the standard unzip utility
leaves some files unreadable. AndroidManifest.xml is encoded into binary XML format which isn’t readable with a text
editor. Also, the app resources are still packaged into a single archive file.
When run with default command line flags, apktool automatically decodes the Android Manifest file to text-based XML
format and extracts the file resources (it also disassembles the .DEX files to smali code – a feature that we’ll revisit
later in this book).
$ apktool d base.apk
I: Using Apktool 2.1.0 on base.apk
I: Loading resource table...
I: Decoding AndroidManifest.xml with resources...
I: Loading resource table from file: /Users/sven/Library/apktool/framework/1.apk
111
Setting up a Testing Environment for Android Apps
I: Regular manifest package...
I: Decoding file-resources...
I: Decoding values */* XMLs...
I: Baksmaling classes.dex...
I: Copying assets and libs...
I: Copying unknown files...
I: Copying original files...
$ cd base
$ ls -alh
total 32
drwxr-xr-x 9 sven staff 306B Dec 5 16:29 .
drwxr-xr-x 5 sven staff 170B Dec 5 16:29 ..
-rw-r--r-- 1 sven staff 10K Dec 5 16:29 AndroidManifest.xml
-rw-r--r-- 1 sven staff 401B Dec 5 16:29 apktool.yml
drwxr-xr-x 6 sven staff 204B Dec 5 16:29 assets
drwxr-xr-x 3 sven staff 102B Dec 5 16:29 lib
drwxr-xr-x 4 sven staff 136B Dec 5 16:29 original
drwxr-xr-x 131 sven staff 4.3K Dec 5 16:29 res
drwxr-xr-x 9 sven staff 306B Dec 5 16:29 smali
The unpacked files are:
AndroidManifest.xml: The decoded Android Manifest file, which can be opened and edited in a text editor.
apktool.yml: file containing information about the output of apktool
original: folder containing the MANIFEST.MF file, which contains information about the files contained in the JAR
file
res: directory containing the app’s resources
smali: directory containing the disassembled Dalvik bytecode.
You can also use apktool to repackage decoded resources back to binary APK/JAR. See the section "Exploring the
App Package" later on this chapter and section "Repackaging" in the chapter "Tampering and Reverse Engineering on
Android" for more information and practical examples.
Apkx
Apkx is a Python wrapper to popular free dex converters and Java decompilers. It automates the extraction,
conversion, and decompilation of APKs. Install it as follows:
$ git clone https://github.com/b-mueller/apkx
$ cd apkx
$ sudo ./install.sh
This should copy apkx to /usr/local/bin . See Decompiling Java Code for more information about usage.
Burp Suite
Burp Suite is an integrated platform for security testing mobile and web applications. Its tools work together
seamlessly to support the entire testing process, from initial mapping and analysis of attack surfaces to finding and
exploiting security vulnerabilities. Burp Proxy operates as a web proxy server for Burp Suite, which is positioned as a
man-in-the-middle between the browser and web server(s). Burp Suite allows you to intercept, inspect, and modify
incoming and outgoing raw HTTP traffic.
Setting up Burp to proxy your traffic is pretty straightforward. We assume that you have an iOS device and workstation
connected to a Wi-Fi network that permits client-to-client traffic.
PortSwigger provides a good tutorial on setting up an Android device to work with Burp and a tutorial on installing
Burp's CA certificate to an Android device.
Drozer
112
Setting up a Testing Environment for Android Apps
Drozer is an Android security assessment framework that allows you to search for security vulnerabilities in apps and
devices by assuming the role of a third-party app interacting with the other application's IPC endpoints and the
underlying OS.
The advantage of using Drozer consists on its ability to automate several tasks and that it can be expanded through
modules. The modules are very helpful and they cover different categories including a scanner category that allows
you to scan for known defects with a simple command such as the module scanner.provider.injection which detects
SQL injections in content providers in all the apps installed in the system. Without drozer, simple tasks such as listing
the app's permissions require several steps that include decompiling the APK and manually analyzing the results.
Installing Drozer
You can refer to drozer GitHub page (for Linux and Windows, for macOS please refer to this blog post) and the drozer
website for prerequisites and installation instructions.
The installation instructions for drozer on Unix, Linux and Windows are explained in the drozer Github page. For
macOS this blog post will be demonstrating all installation instructions.
Using Drozer
Before you can start using drozer, you'll also need the drozer agent that runs on the Android device itself. Download
the latest drozer agent from the releases page and install it with adb install drozer.apk .
Once the setup is completed you can start a session to an emulator or a device connected per USB by running adb
forward tcp:31415 tcp:31415 and drozer console connect . See the full instructions here.
Now you are ready to begin analyzing apps. A good first step is to enumerate the attack surface of an app which can
be done easily with the following command:
$ dz> run app.package.attacksurface 
Again, without drozer this would have required several steps. The module app.package.attacksurface lists activities,
broadcast receivers, content providers and services that are exported, hence, they are public and can be accessed
through other apps. Once we have identified our attack surface, we can interact with the IPC endpoints through drozer
without having to write a separate standalone app as it would be required for certain tasks such as communicating
with a content provider.
For example, if the app has an exported Activity that leaks sensitive information we can invoke it with the Drozer
module app.activity.start :
$ dz> run app.activity.start --component  
This previous command will start the activity, hopefully leaking some sensitive information. Drozer has modules for
every type of IPC mechanism. Download InsecureBankv2 if you would like to try the modules with an intentionally
vulnerable application that illustrates common problems related to IPC endpoints. Pay close attention to the modules
in the scanner category as they are very helpful automatically detecting vulnerabilities even in system packages,
specially if you are using a ROM provided by your cellphone company. Even SQL injection vulnerabilities in system
packages by Google have been identified in the past with drozer.
Other Drozer commands
Here's a non-exhaustive list of commands you can use to start exploring on Android:
# List all the installed packages
$ dz> run app.package.list
113
Setting up a Testing Environment for Android Apps
# Find the package name of a specific app
$ dz> run app.package.list –f (string to be searched)
# See basic information
$ dz> run app.package.info –a (package name)
# Identify the exported application components
$ dz> run app.package.attacksurface (package name)
# Identify the list of exported Activities
$ dz> run app.activity.info -a (package name)
# Launch the exported Activities
$ dz> run app.activity.start --component (package name) (component name)
# Identify the list of exported Broadcast receivers
$ dz> run app.broadcast.info -a (package name)
# Send a message to a Broadcast receiver
$ dz> run app.broadcast.send --action (broadcast receiver name) -- extra (number of arguments)
# Detect SQL injections in content providers
$ dz> run scanner.provider.injection -a (package name)
Other Drozer resources
Other resources where you might find useful information are:
official Drozer User Guide.
drozer GitHub page
drozer Wiki
Command Reference
Using drozer for application security assessments
Exploitation features in drozer
Using modules
Frida
Frida is a free and open-source dynamic code instrumentation toolkit that lets you execute snippets of JavaScript into
your native apps. It was already introduced in the chapter "Tampering and Reverse Engineering" of the general
testing guide.
Frida supports interaction with the Android Java runtime. You'll be able to hook and call both Java and native
functions inside the process and its native libraries. Your JavaScript snippets have full access to memory, e.g. to read
and/or write any structured data.
Here are some tasks that Frida APIs offers and are relevant or exclusive on Android:
Instantiate Java objects and call static and non-static class methods (Java API).