04 
05 import ( 
06 
 "fmt" 
07 ) 
08 
08 // notifier 是一个定义了
09 // 通知类行为的接口
11 type notifier interface { 
12 
 notify() 
13 } 
14 
15 // user 在程序里定义一个用户类型
16 type user struct { 
17 
 name  string 
18 
 email string 
19 } 
20 
21 // 通过 user 类型值的指针
22 // 调用的方法
23 func (u *user) notify() { 
24 
 fmt.Printf("Sending user email to %s\n", 
25 
u.name,
26 
u.email)
27 } 
28 
29 // admin 代表一个拥有权限的管理员用户
30 type admin struct { 
31 
 user 
32 
 level string 
33 } 
34 
35 // 通过 admin 类型值的指针
36 // 调用的方法
37 func (a *admin) notify() { 
38 
 fmt.Printf("Sending admin email to %s\n", 
39 
a.name,
40 
a.email)
41 } 
42 
43 // main 是应用程序的入口
44 func main() { 
45 
// 创建一个 admin 用户
46 
 ad := admin{ 
47 
 user: user{ 
48 
 name:  "john smith", 
49 
 email: "PI:EMAIL", 
50 
 }, 
51 
 level: "super", 
52 
 } 
53 
54 
// 给 admin 用户发送一个通知
55 
// 接口的嵌入的内部类型实现并没有提升到
56 
// 外部类型
57 
 sendNotification(&ad) 
112
第 5 章 Go 语言的类型系统 
58 
59 
// 我们可以直接访问内部类型的方法
60 
 ad.user.notify() 
61 
62 
// 内部类型的方法没有被提升
63 
 ad.notify() 
64 } 
65 
66 // sendNotification 接受一个实现了 notifier 接口的值
67 // 并发送通知
68 func sendNotification(n notifier) { 
69 
n.notify()
70 } 
代码清单 5-60 所示的示例程序的大部分和之前的程序相同，只有一些小变化，如代码清
单 5-61 所示。 
代码清单 5-61 listing60.go：第 35 行到第 41 行 
35 // 通过 admin 类型值的指针
36 // 调用的方法
37 func (a *admin) notify() { 
38 
 fmt.Printf("Sending admin email to %s\n", 
39 
a.name,
40 
a.email)
41 } 
这个示例程序为 admin 类型增加了 notifier 接口的实现。当 admin 类型的实现被调用
时，会显示"Sending admin email"。作为对比，user 类型的实现被调用时，会显示"Sending
user email"。 
main 函数里也有一些变化，如代码清单 5-62 所示。 
代码清单 5-62 listing60.go：第 43 行到第 64 行 
43 // main 是应用程序的入口
44 func main() { 
45 
// 创建一个 admin 用户
46 
 ad := admin{ 
47 
 user: user{ 
48 
 name:  "john smith", 
49 
 email: "PI:EMAIL", 
50 
 }, 
51 
 level: "super", 
52 
 } 
53 
54 
// 给 admin 用户发送一个通知
55 
// 接口的嵌入的内部类型实现并没有提升到
56 
// 外部类型
57 
 sendNotification(&ad) 
58 
59 
// 我们可以直接访问内部类型的方法
60 
 ad.user.notify() 
61 
62 
 // 内部类型的方法没有被提升 
63 
 ad.notify() 
64 } 
代码清单 5-62 的第 46 行，我们再次创建了外部类型的变量 ad。在第 57 行，将 ad 变量的
地址传给 sendNotification 函数，这个指针实现了接口所需要的方法集。在第 60 行，代码
直接访问 user 内部类型，并调用 notify 方法。最后，在第 63 行，使用外部类型变量 ad 来
调用 notify 方法。当查看这个示例程序的输出（如代码清单 5-63 所示）时，就会看到区别。
代码清单 5-63 listing60.go 的输出 
Sending admin email to john smith 
Sending user email to john smith 
Sending admin email to john smith 
这次我们看到了 admin 类型是如何实现 notifier 接口的，以及如何由 sendNotification
函数以及直接使用外部类型的变量 ad 来执行 admin 类型实现的方法。这表明，如果外部类型
实现了 notify 方法，内部类型的实现就不会被提升。不过内部类型的值一直存在，因此还可以
通过直接访问内部类型的值，来调用没有被提升的内部类型实现的方法。 
5.6  公开或未公开的标识符 
要想设计出好的 API，需要使用某种规则来控制声明后的标识符的可见性。Go 语言支持从
包里公开或者隐藏标识符。通过这个功能，让用户能按照自己的规则控制标识符的可见性。在第
3 章讨论包的时候，谈到了如何从一个包引入标识符到另一个包。有时候，你可能不希望公开包
里的某个类型、函数或者方法这样的标识符。在这种情况，需要一种方法，将这些标识符声明为
包外不可见，这时需要将这些标识符声明为未公开的。 
让我们用一个示例程序来演示如何隐藏包里未公开的标识符，如代码清单 5-64 所示。 
代码清单 5-64 listing64/ 
counters/counters.go 
----------------------------------------------------------------------- 
01 // counters 包提供告警计数器的功能 
02 package counters 
03 
04 // alertCounter 是一个未公开的类型 
05 // 这个类型用于保存告警计数 
06 type alertCounter int 
listing64.go 
----------------------------------------------------------------------- 
01 // 这个示例程序展示无法从另一个包里 
02 // 访问未公开的标识符 
03 package main 
04 
05 import ( 
06 
 "fmt" 
07 
08 
 "github.com/goinaction/code/chapter5/listing64/counters" 
09 ) 
10 
11 // main 是应用程序的入口 
12 func main() { 
13 
 // 创建一个未公开的类型的变量 
14 
 // 并将其初始化为 10 
15 
 counter := counters.alertCounter(10) 
16 
17 
 // ./listing64.go:15: 不能引用未公开的名字 
18 
 //                    counters.alertCounter 
19 
 // ./listing64.go:15: 未定义：counters.alertCounter 
20 
21 
 fmt.Printf("Counter: %d\n", counter) 
22 } 
这个示例程序有两个代码文件。一个代码文件名字为 counters.go，保存在 counters 包里；
另一个代码文件名字为 listing64.go，导入了 counters 包。让我们先从 counters 包里的代码
开始，如代码清单 5-65 所示。 
代码清单 5-65 counters/counters.go
01 // counters 包提供告警计数器的功能 
02 package counters 
03 
04 // alertCounter 是一个未公开的类型 
05 // 这个类型用于保存告警计数 
06 type alertCounter int 
代码清单 5-65 展示了只属于 counters 包的代码。你可能会首先注意到第 02 行。直到现在，
之前所有的示例程序都使用了 package main，而这里用到的是 package counters。当要
写的代码属于某个包时，好的实践是使用与代码所在文件夹一样的名字作为包名。所有的 Go 工
具都会利用这个习惯，所以最好遵守这个好的实践。 
在 counters 包里，我们在第 06 行声明了唯一一个名为 alertCounter 的标识符。这个
标识符是一个使用 int 作为基础类型的类型。需要注意的是，这是一个未公开的标识符。
当一个标识符的名字以小写字母开头时，这个标识符就是未公开的，即包外的代码不可见。
如果一个标识符以大写字母开头，这个标识符就是公开的，即被包外的代码可见。让我们看一下
导入这个包的代码，如代码清单 5-66 所示。 
代码清单 5-66 listing64.go 
01 // 这个示例程序展示无法从另一个包里 
02 // 访问未公开的标识符 
03 package main 
04 
05 import ( 
06 
 "fmt" 
07 
08 
 "github.com/goinaction/code/chapter5/listing64/counters" 
09 ) 
10 
11 // main 是应用程序的入口 
12 func main() { 
13 
 // 创建一个未公开的类型的变量 
14 
 // 并将其初始化为 10 
15 
 counter := counters.alertCounter(10) 
16 
17 
 // ./listing64.go:15: 不能引用未公开的名字 
18 
 // 
  counters.alertCounter 
19 
 // ./listing64.go:15: 未定义：counters.alertCounter 
20 
21 
 fmt.Printf("Counter: %d\n", counter) 
22 } 
代码清单 5-66 中的 listing64.go 的代码在第 03 行声明了 main 包，之后在第 08 行导入了
counters 包。在这之后，我们跳到 main 函数里的第 15 行，如代码清单 5-67 所示。
代码清单 5-67 listing64.go：第 13 到 19 行 
13 
 // 创建一个未公开的类型的变量 
14 
 // 并将其初始化为 10 
15 
 counter := counters.alertCounter(10) 
16 
17 
 // ./listing64.go:15: 不能引用未公开的名字 
18 
 // 
 counters.alertCounter 
19 
 // ./listing64.go:15: 未定义：counters.alertCounter 