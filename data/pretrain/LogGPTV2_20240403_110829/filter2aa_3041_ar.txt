以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 代码清单 5-60：示例程序

```go
import "fmt"

// notifier 是一个定义了通知类行为的接口。
type notifier interface {
    notify()
}

// user 定义了一个用户类型。
type user struct {
    name  string
    email string
}

// 通过 user 类型值的指针调用的方法。
func (u *user) notify() {
    fmt.Printf("Sending user email to %s <%s>\n", u.name, u.email)
}

// admin 代表一个拥有权限的管理员用户。
type admin struct {
    user
    level string
}

// 通过 admin 类型值的指针调用的方法。
func (a *admin) notify() {
    fmt.Printf("Sending admin email to %s <%s> with level: %s\n", a.name, a.email, a.level)
}

// main 是应用程序的入口。
func main() {
    // 创建一个 admin 用户。
    ad := admin{
        user: user{
            name:  "john smith",
            email: "PI:EMAIL",
        },
        level: "super",
    }

    // 给 admin 用户发送一个通知。
    // 接口的嵌入内部类型实现并没有提升到外部类型。
    sendNotification(&ad)

    // 我们可以直接访问内部类型的方法。
    ad.user.notify()

    // 内部类型的方法没有被提升。
    ad.notify()
}

// sendNotification 接受一个实现了 notifier 接口的值并发送通知。
func sendNotification(n notifier) {
    n.notify()
}
```

### 代码清单 5-61：第 35 行到第 41 行

```go
// 通过 admin 类型值的指针调用的方法。
func (a *admin) notify() {
    fmt.Printf("Sending admin email to %s <%s> with level: %s\n", a.name, a.email, a.level)
}
```

这个示例程序为 `admin` 类型增加了 `notifier` 接口的实现。当 `admin` 类型的实现被调用时，会显示 "Sending admin email"。作为对比，`user` 类型的实现被调用时，会显示 "Sending user email"。

### 代码清单 5-62：第 43 行到第 64 行

```go
// main 是应用程序的入口。
func main() {
    // 创建一个 admin 用户。
    ad := admin{
        user: user{
            name:  "john smith",
            email: "PI:EMAIL",
        },
        level: "super",
    }

    // 给 admin 用户发送一个通知。
    // 接口的嵌入内部类型实现并没有提升到外部类型。
    sendNotification(&ad)

    // 我们可以直接访问内部类型的方法。
    ad.user.notify()

    // 内部类型的方法没有被提升。
    ad.notify()
}
```

在第 46 行，我们创建了外部类型的变量 `ad`。在第 57 行，将 `ad` 变量的地址传给 `sendNotification` 函数，这个指针实现了接口所需要的方法集。在第 60 行，代码直接访问 `user` 内部类型，并调用 `notify` 方法。最后，在第 63 行，使用外部类型变量 `ad` 来调用 `notify` 方法。查看示例程序的输出时，可以看到区别。

### 输出

```
Sending admin email to john smith <PI:EMAIL> with level: super
Sending user email to john smith <PI:EMAIL>
Sending admin email to john smith <PI:EMAIL> with level: super
```

这次我们看到了 `admin` 类型是如何实现 `notifier` 接口的，以及如何由 `sendNotification` 函数以及直接使用外部类型的变量 `ad` 来执行 `admin` 类型实现的方法。这表明，如果外部类型实现了 `notify` 方法，内部类型的实现就不会被提升。不过内部类型的值一直存在，因此还可以通过直接访问内部类型的值来调用没有被提升的内部类型实现的方法。

### 5.6 公开或未公开的标识符

设计良好的 API 需要控制声明后的标识符的可见性。Go 语言支持从包里公开或隐藏标识符，从而让用户能按照自己的规则控制标识符的可见性。在第 3 章讨论包的时候，谈到了如何从一个包引入标识符到另一个包。有时候，你可能不希望公开包里的某个类型、函数或方法这样的标识符。在这种情况下，需要一种方法将这些标识符声明为包外不可见，这时需要将这些标识符声明为未公开的。

让我们用一个示例程序来演示如何隐藏包里未公开的标识符。

### 代码清单 5-64：counters/counters.go

```go
// counters 包提供告警计数器的功能。
package counters

// alertCounter 是一个未公开的类型，用于保存告警计数。
type alertCounter int
```

### 代码清单 5-64：listing64.go

```go
// 这个示例程序展示无法从另一个包里访问未公开的标识符。
package main

import (
    "fmt"
    "github.com/goinaction/code/chapter5/listing64/counters"
)

// main 是应用程序的入口。
func main() {
    // 创建一个未公开的类型的变量并将其初始化为 10。
    counter := counters.alertCounter(10)

    // ./listing64.go:15: 不能引用未公开的名字 counters.alertCounter
    // ./listing64.go:15: 未定义：counters.alertCounter

    fmt.Printf("Counter: %d\n", counter)
}
```

这个示例程序有两个代码文件。一个代码文件名字为 `counters.go`，保存在 `counters` 包里；另一个代码文件名字为 `listing64.go`，导入了 `counters` 包。让我们先从 `counters` 包里的代码开始。

### 代码清单 5-65：counters/counters.go

```go
// counters 包提供告警计数器的功能。
package counters

// alertCounter 是一个未公开的类型，用于保存告警计数。
type alertCounter int
```

代码清单 5-65 展示了只属于 `counters` 包的代码。需要注意的是，这是一个未公开的标识符。当一个标识符的名字以小写字母开头时，这个标识符就是未公开的，即包外的代码不可见。如果一个标识符以大写字母开头，这个标识符就是公开的，即被包外的代码可见。让我们看一下导入这个包的代码。

### 代码清单 5-66：listing64.go

```go
// 这个示例程序展示无法从另一个包里访问未公开的标识符。
package main

import (
    "fmt"
    "github.com/goinaction/code/chapter5/listing64/counters"
)

// main 是应用程序的入口。
func main() {
    // 创建一个未公开的类型的变量并将其初始化为 10。
    counter := counters.alertCounter(10)

    // ./listing64.go:15: 不能引用未公开的名字 counters.alertCounter
    // ./listing64.go:15: 未定义：counters.alertCounter

    fmt.Printf("Counter: %d\n", counter)
}
```

在 `listing64.go` 的代码中，我们在第 15 行尝试创建一个未公开的类型的变量 `counter` 并将其初始化为 10。由于 `alertCounter` 是未公开的标识符，编译器会报错，指出不能引用未公开的名字 `counters.alertCounter`。

---

通过这种方式，文本变得更加清晰、连贯和专业。