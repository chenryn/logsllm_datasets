    mov   DWORD PTR $T3[ebp], 4 
    lea   ecx, DWORD PTR $T3[ebp] 
    push ecx 
    lea   ecx, DWORD PTR _c$[ebp] 
    call ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector >::push_back 
    lea   edx, DWORD PTR _c$[ebp] 
    push edx 
    call ?dump@@YAXPAUvector_of_ints@@@Z ; dump 
    add   esp, 4 
    push 6 
    lea   ecx, DWORD PTR _c$[ebp] 
    call ?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector >::reserve 
    lea   eax, DWORD PTR _c$[ebp] 
    push eax 
    call ?dump@@YAXPAUvector_of_ints@@@Z ; dump 
    add   esp, 4 
    mov   DWORD PTR $T2[ebp], 5 
    lea   ecx, DWORD PTR $T2[ebp] 
    push ecx 
    lea   ecx, DWORD PTR _c$[ebp] 
    call ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector >::push_back 
    lea   edx, DWORD PTR _c$[ebp] 
    push edx 
    call ?dump@@YAXPAUvector_of_ints@@@Z ; dump 
    add   esp, 4 
    mov   DWORD PTR $T1[ebp], 6 
    lea   eax, DWORD PTR $T1[ebp] 
    push eax 
    lea   ecx, DWORD PTR _c$[ebp] 
    call ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector >::push_back 
    lea   ecx, DWORD PTR _c$[ebp] 
    push ecx 
    call ?dump@@YAXPAUvector_of_ints@@@Z ; dump 
    add   esp, 4 
    push 5 
    lea   ecx, DWORD PTR _c$[ebp] 
    call ?at@?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector >::at 
    mov   edx, DWORD PTR [eax] 
    push edx 
    push OFFSET $SG52650 ; '%d' 
    call DWORD PTR __imp__printf 
    add   esp, 8 
    mov   eax, 8 
    shl   eax, 2 
    mov   ecx, DWORD PTR _c$[ebp] 
    mov   edx, DWORD PTR [ecx+eax] 
    push edx 
    push OFFSET $SG52651 ; '%d' 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
549 
    call DWORD PTR __imp__printf 
    add   esp, 8 
    lea   ecx, DWORD PTR _c$[ebp] 
    call ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ  ; std::vector >::_Tidy 
    xor   eax, eax 
    mov   esp, ebp 
    pop   ebp 
    ret   0 
_main ENDP 
从中我们可以看到.at()方法检查下标边界以及异常处理的详细细节。最后一个输出值是 printf()函数直
接从内存中提取的数值。它在提取数值的时候没有做任何越界检查。 
有读者可能会问了，为什么标准向量的数据结构为什么不像标准函数 std::string 中的那样、单独用一个
字段记录 size（大小）和 capacity（体积）这类的信息呢？虽然笔者无法查证，但是笔者相信大概是.at()在
进行边界检查时效率更好吧。 
GCC 生成的汇编指令也十分雷同，不过它以内联函数的形式实现.at()。 
指令清单 51.34  GCC 4.8.1 –fno –inline –small –functions –O1 编译 
main proc near 
     push ebp 
     mov   ebp, esp 
     push edi 
     push esi 
     push ebx 
     and   esp, 0FFFFFFF0h 
     sub   esp, 20h 
     mov   dword ptr [esp+14h], 0 
     mov   dword ptr [esp+18h], 0 
     mov   dword ptr [esp+1Ch], 0 
     lea   eax, [esp+14h] 
     mov   [esp], eax 
     call  _Z4dumpP14vector_of_ints ; dump(vector_of_ints *) 
     mov   dword ptr [esp+10h], 1 
     lea   eax, [esp+10h] 
     mov  [esp+4], eax 
     lea   eax, [esp+14h] 
     mov  [esp], eax 
     call  _ZNSt6vectorIiSaIiEE9push_backERKi ; std::vector>::push_back(  
     int const&) 
     lea   eax, [esp+14h] 
     mov  [esp], eax 
     call _Z4dumpP14vector_of_ints ; dump(vector_of_ints *) 
     mov   dword ptr [esp+10h], 2 
     lea   eax, [esp+10h] 
     mov  [esp+4], eax 
     lea   eax, [esp+14h] 
     mov  [esp], eax 
     call _ZNSt6vectorIiSaIiEE9push_backERKi ; std::vector>::push_back(  
      int const&) 
     lea   eax, [esp+14h] 
     mov  [esp], eax 
     call _Z4dumpP14vector_of_ints ; dump(vector_of_ints *) 
     mov   dword ptr [esp+10h], 3 
     lea   eax, [esp+10h] 
     mov  [esp+4], eax 
     lea   eax, [esp+14h] 
     mov  [esp], eax 
     call _ZNSt6vectorIiSaIiEE9push_backERKi ; std::vector>::push_back(  
     int const&) 
     lea  eax, [esp+14h] 
     mov  [esp], eax 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
550 
逆向工程权威指南（下册） 
     call _Z4dumpP14vector_of_ints ; dump(vector_of_ints *) 
     mov   dword ptr [esp+10h], 4 
     lea   eax, [esp+10h] 
     mov  [esp+4], eax 
     lea   eax, [esp+14h] 
     mov  [esp], eax 
     call _ZNSt6vectorIiSaIiEE9push_backERKi  ; std::vector>::push_back(  
     int const&) 
     lea   eax, [esp+14h] 
     mov  [esp], eax 
     call _Z4dumpP14vector_of_ints ; dump(vector_of_ints *) 
     mov   ebx, [esp+14h] 
     mov   eax, [esp+1Ch] 
     sub   eax, ebx 
     cmp   eax, 17h 
     ja    short loc_80001CF 
     mov   edi, [esp+18h] 
     sub   edi, ebx 
     sar   edi, 2 
     mov   dword ptr [esp], 18h 
     call _Znwj   
; operator new(uint) 
     mov   esi, eax 
     test edi, edi 
     jz    short loc_80001AD 
     lea   eax, ds:0[edi*4] 
     mov  [esp+8], eax 
; n 
     mov  [esp+4], ebx  
; src 
     mov  [esp], esi   
; dest 
     call memmove 
loc_80001AD: ; CODE XREF: main+F8 
     mov   eax, [esp+14h] 
     test eax, eax 
     jz    short loc_80001BD 
     mov  [esp], eax   
; void * 
     call _ZdlPv  
; operator delete(void *) 
loc_80001BD: ; CODE XREF: main+117 
     mov  [esp+14h], esi 
     lea   eax, [esi+edi*4] 
     mov  [esp+18h], eax 
     add   esi, 18h 
     mov  [esp+1Ch], esi 
loc_80001CF: ; CODE XREF: main+DD 
     lea   eax, [esp+14h] 
     mov  [esp], eax 
     call _Z4dumpP14vector_of_ints ; dump(vector_of_ints *) 
     mov   dword ptr [esp+10h], 5 
     lea   eax, [esp+10h] 
     mov  [esp+4], eax 
     lea   eax, [esp+14h] 
     mov  [esp], eax 
     call _ZNSt6vectorIiSaIiEE9push_backERKi ; std::vector>::push_back(  
     int const&) 
     lea   eax, [esp+14h] 
     mov  [esp], eax 
     call _Z4dumpP14vector_of_ints ; dump(vector_of_ints *) 
     mov   dword ptr [esp+10h], 6 
     lea   eax, [esp+10h] 
     mov  [esp+4], eax 
     lea   eax, [esp+14h] 
     mov  [esp], eax 
     call _ZNSt6vectorIiSaIiEE9push_backERKi ; std::vector>::push_back(  
     int const&) 
     lea   eax, [esp+14h] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
551 
     mov  [esp], eax 
     call _Z4dumpP14vector_of_ints ; dump(vector_of_ints *) 
     mov   eax, [esp+14h] 
     mov   edx, [esp+18h] 
     sub   edx, eax 
     cmp   edx, 17h 
     ja    short loc_8000246 
     mov   dword ptr [esp], offset aVector_m_range ; "vector::_M_range_check" 
     call _ZSt20__throw_out_of_rangePKc ; std::__throw_out_of_range(char const*) 
loc_8000246:  
    ; CODE XREF: main+19C 
     mov   eax, [eax+14h] 
     mov  [esp+8], eax 
     mov   dword ptr [esp+4], offset aD ; "%d\n" 
     mov   dword ptr [esp], 1 
     call __printf_chk 
     mov   eax, [esp+14h] 
     mov   eax, [eax+20h] 
     mov  [esp+8], eax 
     mov   dword ptr [esp+4], offset aD ; "%d\n" 
     mov   dword ptr [esp], 1 
     call __printf_chk 
     mov   eax, [esp+14h] 
     test eax, eax 
     jz    short loc_80002AC 
     mov  [esp], eax        ; void * 
     call _ZdlPv            ; operator delete(void *) 
     jmp   short loc_80002AC 
     mov   ebx, eax 
     mov   edx, [esp+14h] 
     test edx, edx 
     jz    short loc_80002A4 
     mov  [esp], edx        ; void * 
     call _ZdlPv  
      ; operator delete(void *) 
loc_80002A4: ; CODE XREF: main+1FE 
     mov  [esp], ebx 
     call _Unwind_Resume 
loc_80002AC: ; CODE XREF: main+1EA 
             ; main+1F4 
     mov   eax, 0 
     lea   esp, [ebp-0Ch] 
     pop   ebx 
     pop   esi 
     pop   edi 
     pop   ebp 
locret_80002B8: ; DATA XREF: .eh_frame:08000510 
                ; .eh_frame:080005BC 
     retn 
main endp 
编译器也对.reserve()函数进行了内联处理。如果缓冲区不大，程序会调用 new()方法分配缓冲区的存储
空间；使用 memmove()方法来复制缓冲区中的内容；最后通过 delete()方法来释放缓冲区空间。 
如果采用 GCC 编译的话，编译程序的输出为： 
_Myfirst=0x(nil), _Mylast=0x(nil), _Myend=0x(nil) 
size=0, capacity=0 
_Myfirst=0x8257008, _Mylast=0x825700c, _Myend=0x825700c 
size=1, capacity=1 
element 0: 1 
_Myfirst=0x8257018, _Mylast=0x8257020, _Myend=0x8257020 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
552 
逆向工程权威指南（下册） 
size=2, capacity=2 
element 0: 1 
element 1: 2 
_Myfirst=0x8257028, _Mylast=0x8257034, _Myend=0x8257038 
size=3, capacity=4 
element 0: 1 
element 1: 2 
element 2: 3 
_Myfirst=0x8257028, _Mylast=0x8257038, _Myend=0x8257038 
size=4, capacity=4 
element 0: 1 
element 1: 2 
element 2: 3 
element 3: 4 
_Myfirst=0x8257040, _Mylast=0x8257050, _Myend=0x8257058 
size=4, capacity=6 
element 0: 1 
element 1: 2 
element 2: 3 
element 3: 4 
_Myfirst=0x8257040, _Mylast=0x8257054, _Myend=0x8257058 
size=5, capacity=6 
element 0: 1 
element 1: 2 
element 2: 3 
element 3: 4 
element 4: 5 
_Myfirst=0x8257040, _Mylast=0x8257058, _Myend=0x8257058 
size=6, capacity=6 
element 0: 1 
element 1: 2 
element 2: 3 
element 3: 4 
element 4: 5 
element 5: 6 
6 
0  
从程序我们可以看到，GCC 的缓冲区 buffer 的增长方式与 MSVC 不同。具体来说，通过一个简单的
例子实践可以看到：由 MSVC 编译的程序每次会把缓冲区增加 50%；而由 GCC 编译的程序则会将缓冲区
扩张 100%——也就是翻倍。 
51.4.4  std::map()和 std::set() 
“二叉树”是另外一种常见的基础数据结构。二叉树是每个节点最多有两个子树的有序树，每个节点都
有自己的关键字（key）-值（value）。 
二叉树通常会用于构造联合数组（associative arrays）。联合数组又称为词典（dictionary）或 hash 表，
它由一系列的“关键字-值”构成。 
二叉制树最少具备三个重要的特性： 
 所有的关键字都以有序方式存储。 
 任何类型的关键字都能构成二叉树。二叉树的算法与关键字的数据类型无关。只要能够定义一
个比较二叉树关键字的排序函数，就可以构造一个二叉树。 
 与链表和数组相比，在二叉树中搜索特定关键字的速度比较快。 
现在开始举例说明：我们将存储数列 0, 1, 2, 3, 5, 6, 9, 10, 11, 12, 20, 99, 100, 101, 107, 1001, 1010，并形
成下述二叉树结构： 
从下面的图中，我们很容易发现这样一个规律：所有左边节点的值都比其右边节点的值小，而所有右
边节点的值都比左边的节点的值大。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
553 
在遵守以上规则的前提下，我们做起查询算法来就相对简单了。我们只需要关注当前节点的数值以及
我们要查询的值，将这两者进行比较，当前者比后者小时，那么我们只需要向右搜索对比查找；反之，当
前者比后者大时，我们就会向左搜索对比查找。一直到找到节点的值与要搜索的值相等为止。这就是为什
么刚才说只需要一个对比函数即可进行节点数或者字符串对比。 
所有的键都有一个唯一的值，不能重复。 
我们可以计算需要花费的步数，公式大约为：log2n（n 是二进制树中键的个数），这个公式计算的是我
们要找到一个平衡树的搜索步数。这就意味着在一个 1000 个键的二进制树中，通过大约 10 步我们就能找
到需要的值；而 10000 个键的二进制树中则需要 13 步。看起来还是很不错的。树总是需要像这样平衡一下，
也就是说，键必须在所有水平上平衡分布。插入和移除一些节点可能都需要保持树的平衡状态。 