title:Autograph: Toward Automated, Distributed Worm Signature Detection
author:Hyang-Ah Kim and
Brad Karp
USENIX Association
Proceedings of the
13th USENIX Security Symposium
San Diego, CA, USA
August 9–13, 2004
© 2004 by The USENIX Association
Phone: 1 510 528 8649
All Rights Reserved
FAX: 1 510 548 5738
Rights to individual papers remain with the author or the author's employer.
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Autograph: Toward Automated, Distributed Worm Signature Detection
Hyang-Ah Kim
PI:EMAIL
Carnegie Mellon University
Brad Karp
PI:EMAIL, PI:EMAIL
Intel Research / Carnegie Mellon University
Abstract
Today’s Internet intrusion detection systems (IDSes) moni-
tor edge networks’ DMZs to identify and/or ﬁlter malicious
ﬂows. While an IDS helps protect the hosts on its local edge
network from compromise and denial of service, it cannot
alone effectively intervene to halt and reverse the spreading
of novel Internet worms. Generation of the worm signatures
required by an IDS—the byte patterns sought in monitored
trafﬁc to identify worms—today entails non-trivial human la-
bor, and thus signiﬁcant delay: as network operators detect
anomalous behavior, they communicate with one another and
manually study packet traces to produce a worm signature.
Yet intervention must occur early in an epidemic to halt a
worm’s spread. In this paper, we describe Autograph, a sys-
tem that automatically generates signatures for novel Internet
worms that propagate using TCP transport. Autograph gen-
erates signatures by analyzing the prevalence of portions of
ﬂow payloads, and thus uses no knowledge of protocol se-
mantics above the TCP level. It is designed to produce sig-
natures that exhibit high sensitivity (high true positives) and
high speciﬁcity (low false positives); our evaluation of the
system on real DMZ traces validates that it achieves these
goals. We extend Autograph to share port scan reports among
distributed monitor instances, and using trace-driven simula-
tion, demonstrate the value of this technique in speeding the
generation of signatures for novel worms. Our results elu-
cidate the fundamental trade-off between early generation of
signatures for novel worms and the speciﬁcity of these gener-
ated signatures.
1
Introduction and Motivation
In recent years, a series of Internet worms has exploited the
conﬂuence of the relative lack of diversity in system and
server software run by Internet-attached hosts, and the ease
with which these hosts can communicate. A worm program
is self-replicating: it remotely exploits a software vulnerabil-
ity on a victim host, such that the victim becomes infected,
and itself begins remotely infecting other victims. The sever-
ity of the worm threat goes far beyond mere inconvenience.
The total cost of the Code Red worm epidemic, as measured
in lost productivity owing to interruptions in computer and
network services, is estimated at $2.6 billion [7].
Motivated in large part by the costs of Internet worm epi-
demics, the research community has investigated worm prop-
agation and how to thwart it. Initial investigations focused
on case studies of the spreading of successful worms [8], and
on comparatively modeling diverse propagation strategies fu-
ture worms might use [18, 21]. More recently, researchers’
attention has turned to methods for containing the spread of a
worm. Broadly speaking, three chief strategies exist for con-
taining worms by blocking their connections to potential vic-
tims: discovering ports on which worms appear to be spread-
ing, and ﬁltering all trafﬁc destined for those ports; discover-
ing source addresses of infected hosts and ﬁltering all trafﬁc
(or perhaps trafﬁc destined for a few ports) from those source
addresses; and discovering the payload content string that a
worm uses in its infection attempts, and ﬁltering all ﬂows
whose payloads contain that content string.
Detecting that a worm appears to be active on a particular
port [22] is a useful ﬁrst step toward containment, but is often
too blunt an instrument to be used alone; simply blocking all
trafﬁc for port 80 at edge networks across the Internet shuts
down the entire web when a worm that targets web servers
is released. Moore et al. [9] compared the relative efﬁcacy
of source-address ﬁltering and content-based ﬁltering. Their
results show that content-based ﬁltering of infection attempts
slows the spreading of a worm more effectively: to conﬁne
an epidemic within a particular target fraction of the vulner-
able host population, one may begin content-based ﬁltering
far later after the release of a worm than address-based ﬁl-
tering. Motivated by the efﬁcacy of content-based ﬁltering,
we seek in this paper to answer the complementary question
unanswered in prior work: how should one obtain worm con-
tent signatures for use in content-based ﬁltering?
Here, a signature is a tuple (IP-proto, dst-port,
byteseq), where IP-proto is an IP protocol number,
dst-port is a destination port number for that proto-
col, and byteseq is a variable-length, ﬁxed sequence of
bytes.1 Content-based ﬁltering consists of matching network
ﬂows (possibly requiring ﬂow reassembly) against signatures;
a match occurs when byteseq is found within the pay-
load of a ﬂow using the IP-proto protocol destined for
dst-port. We restrict our investigation to worms that prop-
agate over TCP in this work, and thus hereafter consider sig-
natures as (dst-port, byteseq) tuples.
Today, there exist TCP-ﬂow-matching systems that are
“consumers” of these sorts of signatures.
Intrusion detec-
tion systems (IDSes), such as Bro [11] and Snort [19], moni-
tor all incoming trafﬁc at an edge network’s DMZ, perform
TCP ﬂow reassembly, and search for known worm signa-
tures. These systems log the occurrence of inbound worm
connections they observe, and can be conﬁgured (in the case
of Bro) to change access control lists in the edge network’s
router(s) to block trafﬁc from source IP addresses that have
sent known worm payloads. Cisco’s NBAR system [3] for
routers searches for signatures in ﬂow payloads, and blocks
ﬂows on the ﬂy whose payloads are found to contain known
worm signatures. We limit the scope of our inquiry to the
detection and generation of signatures for use by these and
future content-based ﬁltering systems.
It is important to note that all the content-based ﬁltering
systems use databases of worm signatures that are manually
generated: as network operators detect anomalous behavior,
they communicate with one another, manually study packet
traces to produce a worm signature, and publish that signature
so that it may be added to IDS systems’ signature databases.
This labor-intensive, human-mediated process of signature
generation is slow (on the order of hours or longer), and ren-
ders today’s IDSes unhelpful in stemming worm epidemics—
by the time a signature has been found manually by network
operators, a worm may already have compromised a signiﬁ-
cant fraction of vulnerable hosts on the Internet.
We seek to build a system that automatically, without fore-
knowledge of a worm’s payload or time of introduction, de-
tects the signature of any worm that propagates by randomly
scanning IP addresses. We assume the system monitors all in-
bound network trafﬁc at an edge network’s DMZ. Autograph,
our worm signature detection system, has been designed to
meet that goal. The system consists of three interconnected
modules: a ﬂow classiﬁer, a content-based signature genera-
tor, and tattler, a protocol through which multiple distributed
Autograph monitors may share information, in the interest of
speeding detection of a signature that matches a newly re-
leased worm.
In our evaluation of Autograph, we explore two important
themes. First, there is a trade-off between early detection of
worm signatures and avoiding generation of signatures that
cause false positives. Intuitively, early in an epidemic, worm
trafﬁc is less of an outlier against the background of innocu-
ous trafﬁc. Thus, targeting early detection of worm signatures
increases the risk of mistaking innocuous trafﬁc for worm
trafﬁc, and producing signatures that incur false positives.
Second, we demonstrate the utility of distributed, collabora-
tive monitoring in speeding detection of a novel worm’s sig-
nature after its release.
In the remainder of this paper, we proceed as follows: In
the next section, we catalog the goals that drove Autograph’s
design. In Section 3, we describe the detailed workings of
a single Autograph monitor: its trafﬁc classiﬁer and content-
high false +
low false +
high true +
sensitive,
unspeciﬁc
sensitive,
speciﬁc
low true +
insensitive,
unspeciﬁc
insensitive,
speciﬁc
Figure 1: Combinations of sensitivity and speciﬁcity.
based signature generator. Next, in Section 4, we evaluate the
quality of the signatures Autograph ﬁnds when run on real
DMZ traces from two edge networks. In Section 5 we de-
scribe tattler and the distributed version of Autograph, and us-
ing DMZ-trace-driven simulation evaluate the speed at which
the distributed Autograph can detect signatures for newly in-
troduced worms. After cataloging limitations of Autograph
and possible attacks against it in Section 6, and describing
related work in Section 7, we conclude in Section 8.
2 Desiderata for a Worm Signature Detection
System
Signature quality.
Ideally, a signature detection system
should generate signatures that match worms and only
worms. In describing the efﬁcacy of worm signatures in ﬁl-
tering trafﬁc, we adopt the parlance used in epidemiology to
evaluate a diagnostic test:
• Sensitivity relates to the true positives generated by a sig-
nature; in a mixed population of worm and non-worm
ﬂows, the fraction of the worm ﬂows matched, and thus
successfully identiﬁed, by the signature. Sensitivity is
typically reported as t ∈ [0,1], the fraction of true posi-
tives among worm ﬂows.
• Speciﬁcity relates to the false positives generated by a
signature; again, in a mixed population, the fraction of
non-worm ﬂows matched by the signature, and thus in-
correctly identiﬁed as worms. Speciﬁcity is typically re-
ported as (1 − f ) ∈ [0,1], where f is the fraction of false
positives among non-worm ﬂows.
Throughout this paper, we classify signatures according to
this terminology, as shown in Figure 1.
In practice, there is a tension between perfect sensitivity
and perfect speciﬁcity; one often suffers when the other im-
proves, because a diagnostic test (e.g., “is this ﬂow a worm
or not?”) typically measures only a narrow set of features in
its input, and thus does not perfectly classify it. There may
be cases where two inputs present with identical features in
the eyes of a test, but belong in different classes. We examine
this sensitivity-speciﬁcity trade-off in detail in Section 4.
Signature quantity and length. Systems that match ﬂow
payloads against signatures must compare a ﬂow to all signa-
tures known for its IP protocol and port. Thus, fewer signa-
tures speed matching. Similarly, the cost of signature match-
ing is proportional to the length of the signature, so short
signatures may be preferable to long ones. Signature length
profoundly affects speciﬁcity: when one signature is a subse-
quence of another, the longer one is expected to match fewer
ﬂows than the shorter one.
Robustness against polymorphic worms. A polymorphic
worm2 changes its payload in successive infection attempts.
Such worms pose a particular challenge to match with sig-
natures, as a signature sensitive to a portion of one worm
payload may not be sensitive to any part of another worm
payload. If a worm were “ideally” polymorphic, each of its
payloads would contain no byte sequence in common with
any other. That ideal is impossible, of course; single-byte se-
quences are shared by all payloads. In practice, a “strongly”
polymorphic worm is one whose successive payloads share
only very short byte subsequences in common. Such short
subsequences, e.g., 4 bytes long, cannot safely be used as
worm signatures, as they may be insufﬁciently speciﬁc. Poly-
morphism generally causes an explosion in the number of
signatures required to match a worm. An evaluation of the
extent to which such worm payloads are achievable is beyond
the scope of this paper. We note, however, that if a worm
exhibits polymorphism, but does not change one or more rel-
atively long subsequences across its variants, an efﬁcient sig-
nature detection system will generate signatures that match
these invariant subsequences, and thus minimize the number
of signatures required to match all the worm’s variants.
Timeliness of detection. Left unchecked by patches, trafﬁc
ﬁltering, or other means, port-scanning worms infect vulner-
able hosts at an exponential rate, until the infected population
saturates. Provos [12] shows in simulation that patching of
infected hosts is more effective the earlier it is begun after the
initial release of a new worm, and that in practical deploy-
ment scenarios, patching must begin quickly (before 5% of
vulnerable hosts become infected) in order to have hope of
stemming an epidemic such that no more than 50% of vul-
nerable hosts ever become infected. Moore et al. [9] show
similarly that signature-based ﬁltering of worm trafﬁc stops
worm propagation most effectively when begun early.
Automation. A signature detection system should require
minimal real-time operator intervention. Vetting signatures
for speciﬁcity with human eyes, e.g., is at odds with timeli-
ness of signature detection for novel worms.
Application neutrality. Knowledge of application protocol
semantics above the TCP layer (e.g., HTTP, NFS RPCs, &c.)
tattler
Other Autograph Monitors
Port-scanner IP addresses
c
i
f
f
a
r
t
Z
M
D
-
s
s
o
r
C
Selecting Suspicious traffic  
using heuristics
Non-
suspicious  
inbound
packets
Suspicious  
inbound 
packets
Flow 
reassembly
Payload
Partitioning
(COPP)
wH
Content blocks
Prevalence 
Histogram
Prevalence
Histogram
Construction
Suspicious Flow Selection
Signature Generation
Figure 2: Architecture of an Autograph Monitor
s
e
r
u
t
a
n
g
S
m
r
o
W
i
may be useful in distinguishing worm and innocuous trafﬁc,
and thus in producing signatures that are sensitive and spe-
ciﬁc. Avoiding leaning on such application-protocol knowl-
edge, however, broadens the applicability of the signature de-
tection system to all protocols layered atop TCP.
Bandwidth efﬁciency.
If a signature detection system is de-
ployed in distributed fashion, such that trafﬁc monitors com-
municate with one another about their observations, that com-
munication should remain scalable, even when a worm gen-
erates tremendous network activity as it tries to spread. That
is, monitor-to-monitor communication should grow slowly as
worm activity increases.
3 Autograph System Design
Motivated by the design goals given in the previous sec-
tion, we now present Autograph. We begin with a schematic
overview of the system, shown in Figure 2. A single Auto-
graph monitor’s input is all trafﬁc crossing an edge network’s
DMZ, and its output is a list of worm signatures. We defer
discussion of tattler, used in distributed deployments of Au-
tograph, to Section 5.2. There are two main stages in a single
Autograph monitor’s analysis of trafﬁc. First, a suspicious
ﬂow selection stage uses heuristics to classify inbound TCP
ﬂows as either suspicious or non-suspicious.
After classiﬁcation, packets for these inbound ﬂows are
stored on disk in a suspicious ﬂow pool and non-suspicious
ﬂow pool, respectively. For clarity, throughout this paper, we
refer to the output of the classiﬁer using those terms, and re-
fer to the true nature of a ﬂow as malicious or innocuous.
Further processing occurs only on payloads in the suspicious
ﬂow pool. Thus, ﬂow classiﬁcation reduces the volume of
trafﬁc that must be processed subsequently. We assume in
our work that such heuristics will be far from perfectly accu-
rate. Yet any heuristic that generates a suspicious ﬂow pool
in which truly malicious ﬂows are a greater fraction of ﬂows
than in the total inbound trafﬁc mix crossing the DMZ will
likely reduce generation of signatures that cause false posi-
tives, by focusing Autograph’s further processing on a ﬂow
population containing a lesser fraction of innocuous trafﬁc.
Autograph performs TCP ﬂow reassembly for inbound pay-
loads in the suspicious ﬂow pool. The resulting reassembled
payloads are analyzed in Autograph’s second stage, signature
generation.
We stress that Autograph segregates ﬂows by destination
port for signature generation; in the remainder of this paper,
one should envision one separate instance of signature gen-
eration for each destination port, operating on ﬂows in the
suspicious ﬂow pool destined for that port. Signature genera-
tion involves analysis of the content of payloads of suspicious
ﬂows to select sensitive and speciﬁc signatures. Two proper-
ties of worms suggest that content analysis may be fruitful.
First, a worm propagates by exploiting one software vulner-
ability or a set of such vulnerabilities. That commonality in
functionality has to date led to commonality in code, and thus
in payload content, across worm infection payloads. In fact,
Internet worms to date have had a single, unchanging payload
in most cases. Even in those cases where multiple variants
of a worm’s payload have existed (e.g., Nimda), those vari-
ants have shared signiﬁcant overlapping content.3 Second,
a worm generates voluminous network trafﬁc as it spreads;