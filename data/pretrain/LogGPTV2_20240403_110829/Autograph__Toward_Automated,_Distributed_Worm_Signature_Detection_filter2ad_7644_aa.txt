# Title: Autograph: Toward Automated, Distributed Worm Signature Detection

## Authors:
- Hyang-Ah Kim
- Brad Karp

### USENIX Association
**Proceedings of the 13th USENIX Security Symposium**
San Diego, CA, USA
August 9–13, 2004

© 2004 by The USENIX Association
- Phone: +1 510 528 8649
- FAX: +1 510 548 5738
- Email: [PI:EMAIL]
- Website: [http://www.usenix.org](http://www.usenix.org)

All rights reserved. Individual paper rights remain with the author or the author's employer. Permission is granted for noncommercial reproduction of the work for educational or research purposes, provided this copyright notice is included in the reproduced paper. USENIX acknowledges all trademarks herein.

---

## Abstract

Current Internet intrusion detection systems (IDSes) monitor edge networks' DMZs to identify and filter malicious traffic. While an IDS can protect local hosts from compromise and denial of service, it is not sufficient to halt and reverse the spread of new Internet worms. Generating worm signatures, which are byte patterns used to identify worms in monitored traffic, currently requires significant human effort, leading to delays. Network operators must detect anomalous behavior, communicate, and manually analyze packet traces to produce a worm signature. However, intervention must occur early in an epidemic to effectively stop a worm's spread. This paper introduces Autograph, a system that automatically generates signatures for novel Internet worms that use TCP transport. Autograph analyzes the prevalence of flow payload portions without requiring knowledge of protocol semantics above the TCP level. It aims to produce signatures with high sensitivity (high true positives) and high specificity (low false positives). Our evaluation using real DMZ traces confirms that Autograph achieves these goals. We also extend Autograph to share port scan reports among distributed monitors, demonstrating the value of this technique in accelerating the generation of signatures for new worms. Our results highlight the trade-off between early signature generation and the specificity of these signatures.

---

## 1. Introduction and Motivation

In recent years, a series of Internet worms has exploited the lack of diversity in system and server software and the ease of communication between hosts. A worm program is self-replicating, exploiting a software vulnerability on a victim host, causing the victim to become infected and start infecting other hosts. The Code Red worm, for example, caused an estimated $2.6 billion in lost productivity due to interruptions in computer and network services.

Motivated by the costs of such epidemics, researchers have investigated worm propagation and containment strategies. Initial studies focused on case studies of successful worms and modeling potential future propagation strategies. More recently, attention has shifted to methods for containing worms by blocking their connections to potential victims. Three primary strategies exist:

1. **Port Filtering:** Blocking all traffic destined for ports where worms appear to be spreading.
2. **Source Address Filtering:** Blocking traffic from source addresses of infected hosts.
3. **Content-Based Filtering:** Filtering flows based on the content string used by the worm in its infection attempts.

While detecting worm activity on a particular port is useful, it is often too broad. For example, blocking all traffic on port 80 would shut down the entire web if a worm targeted web servers. Moore et al. compared the efficacy of source-address filtering and content-based filtering, finding that content-based filtering more effectively slows worm propagation. Therefore, we focus on how to obtain worm content signatures for content-based filtering.

A signature is a tuple (IP-proto, dst-port, byteseq), where IP-proto is an IP protocol number, dst-port is a destination port number, and byteseq is a variable-length sequence of bytes. Content-based filtering matches network flows against these signatures. In this work, we restrict our investigation to worms that propagate over TCP, considering signatures as (dst-port, byteseq) tuples.

Today, systems like Bro and Snort monitor incoming traffic at an edge network’s DMZ, perform TCP flow reassembly, and search for known worm signatures. These systems log inbound worm connections and can block traffic from source IP addresses that have sent known worm payloads. Cisco’s NBAR system also searches for signatures in flow payloads and blocks matching flows. However, all these systems rely on manually generated worm signature databases, which is slow and ineffective during an epidemic.

We aim to build a system that automatically detects the signature of any worm that propagates by randomly scanning IP addresses, without prior knowledge of the worm’s payload or time of introduction. Autograph, our worm signature detection system, consists of three interconnected modules: a flow classifier, a content-based signature generator, and tattler, a protocol for sharing information among distributed Autograph monitors.

Our evaluation of Autograph explores two themes: the trade-off between early detection and avoiding false positives, and the utility of distributed, collaborative monitoring in speeding up the detection of a new worm's signature. In the remainder of this paper, we will discuss the design goals, detailed workings, and evaluation of Autograph, followed by a discussion of limitations, possible attacks, and related work.

---

## 2. Desiderata for a Worm Signature Detection System

### 2.1 Signature Quality

An ideal signature detection system should generate signatures that match only worms. We adopt the terminology from epidemiology to evaluate signature quality:

- **Sensitivity:** The fraction of true positive worm flows matched by the signature.
- **Specificity:** The fraction of non-worm flows not matched by the signature.

There is a trade-off between perfect sensitivity and specificity. A diagnostic test typically measures a narrow set of features, making perfect classification challenging. We examine this trade-off in detail in Section 4.

### 2.2 Signature Quantity and Length

Fewer and shorter signatures speed up matching. Signature length affects specificity: longer signatures are expected to match fewer flows than shorter ones. Polymorphic worms, which change their payload in successive infection attempts, pose a challenge. If a worm is strongly polymorphic, each payload may share only short byte subsequences, making them insufficiently specific. An efficient signature detection system will generate signatures that match invariant subsequences, minimizing the number of required signatures.

### 2.3 Timeliness of Detection

Worms infect vulnerable hosts at an exponential rate until saturation. Early intervention, such as patching or traffic filtering, is crucial to stem an epidemic. Provos and Moore et al. show that early intervention is most effective. Automation is essential to minimize operator intervention and ensure timely signature detection.

### 2.4 Application Neutrality

Knowledge of application protocol semantics above the TCP layer can help distinguish worm and innocuous traffic. However, avoiding reliance on such knowledge broadens the applicability of the signature detection system to all protocols layered atop TCP.

### 2.5 Bandwidth Efficiency

Distributed deployment of a signature detection system should scale well, even under high worm activity. Monitor-to-monitor communication should grow slowly as worm activity increases.

---

## 3. Autograph System Design

### 3.1 Overview

Autograph is designed to meet the goals outlined in the previous section. Figure 2 provides a schematic overview of the system. A single Autograph monitor's input is all traffic crossing an edge network’s DMZ, and its output is a list of worm signatures. There are two main stages in a single Autograph monitor’s analysis of traffic:

1. **Suspicious Flow Selection:** Classifies inbound TCP flows as suspicious or non-suspicious using heuristics.
2. **Signature Generation:** Analyzes the content of payloads of suspicious flows to select sensitive and specific signatures.

### 3.2 Suspicious Flow Selection

Packets for inbound flows are stored in either a suspicious or non-suspicious flow pool. Further processing occurs only on the suspicious flow pool, reducing the volume of traffic that needs to be processed. Any heuristic that increases the fraction of truly malicious flows in the suspicious pool will likely reduce the generation of signatures that cause false positives.

### 3.3 Signature Generation

Autograph performs TCP flow reassembly for inbound payloads in the suspicious flow pool. The reassembled payloads are analyzed to select sensitive and specific signatures. Two properties of worms make content analysis fruitful:

1. **Commonality in Functionality:** Worms exploit common vulnerabilities, leading to commonality in code and payload content.
2. **Voluminous Traffic:** Worms generate a large amount of network traffic as they spread, making their payloads more prevalent and easier to detect.

---

This revised version of the text is more structured, clear, and professional, ensuring that the key points and technical details are presented coherently.