L: OP_RGT
L: OP_EQU
Y: RESULT = 9
exit
L: exit
12.4 静态代码分析工具
类似lint的工具能够帮助进行自动化静态代码分析。
类似Indent的工具能够帮助人进行代码检查，通过一致性的重新格式化源代码。
类似Ctags的工具能够帮助人进行代码检查，通过利用源代码中发现的名字生成索引（或标签）文件。
提示
配置你喜欢的编辑器(emacs或vim)使用异步lint引擎插件帮助你的代码写作。这些插件通过充分利用Language
ServerProtocol的优点，会变得非常强大。因它们在快速开发，使用它们上游的代码代替Debian软件包，是一个
好的选择。
12.5 调试
调试是程序中很重要的一部分。知道怎样去调试程序，能够让你成为一个好的Debian使用者,能够做出有意义的错误
报告。
12.5.1 基本的 gdb 使用命令
Debian上原始的调试器是gdb(1),它能让你在程序执行的时候检查程序。
让我们通过如下所示的命令来安装gdb及其相关程序。
# apt-get install gdb gdb-doc build-essential devscripts
好的gdb教程能够被发现：
•“info gdb”
• 在/usr/share/doc/gdb-doc/html/gdb/index.html的“DebuggingwithGDB”
•“tutorialontheweb”
这里是一个简单的列子，用gdb(1)在” 程序”带有”-g”选项编译的时候来产生调试信息。
Debian参考手册 224/233
软件包 流行度 大小 说明
vim-ale I:0 2591 用于Vim8和NeoVim的异步Lint引擎
vim-syntastic I:3 1379 vim语法检查利器
elpa-flycheck V:0,I:1 808 Emacs现代实时语法检查
elpa-relint V:0,I:0 147 EmacsLisp正则错误发现器
cppcheck-gui V:0,I:1 6941 静态C/C++代码分析工具(GUI)
shellcheck V:2,I:12 18987 shell脚本的lint工具
pyflakes3 V:2,I:15 20 Python3程序被动检查器
pylint V:4,I:19 2047 Python代码静态检查器
perl V:701,I:988 670 带有内部静态代码检测的解释器：B::Lint(3perl)
rubocop V:0,I:0 3247 Ruby静态代码分析器
clang-tidy V:1,I:11 21 基于clang的C++规则格式检查工具
splint V:0,I:2 2320 静态检查C程序bug的工具
flawfinder V:0,I:0 205 检查C/C++源代码和查找安全漏洞的工具
black V:3,I:13 639 强硬的Python代码格式化器
perltidy V:0,I:4 2493 Perl脚本缩进和重新格式化
indent V:1,I:8 431 C语言源代码格式化程序
astyle V:0,I:2 785 C、C++、Objective-C、C#和Java的源代码缩进器
bcpp V:0,I:0 111 美化C(++)
xmlindent V:0,I:1 53 XML流重新格式化
global V:0,I:2 1895 源代码检索和浏览工具
exuberant-ctags
V:3,I:21 341 构建源代码定义的标签文件索引
universal-ctags
V:1,I:11 3386 构建源代码定义的标签文件索引
Table12.12: 静态代码分析工具的列表
软件包 流行度 大小 文档
gdb V:15,I:97 11637 由gdb-doc包提供的“info gdb”
ddd V:1,I:7 4105 由ddd-doc包提供的“info ddd”
Table12.13: 调试软件包列表
Debian参考手册 225/233
$ gdb program
(gdb) b 1 # set break point at line 1
(gdb) run args # run program with args
(gdb) next # next line
...
(gdb) step # step forward
...
(gdb) p parm # print parm
...
(gdb) p parm=12 # set value to 12
...
(gdb) quit
提示
许多gdb(1)命令都能被缩写。Tab扩展跟在shell一样都能工作。
12.5.2 调试 Debian 软件包
Debian 系统在默认情况下，所有安装的二进制程序会被 stripped，因此大部分调试符号（debugging symbols）在通
常的软件包里面会被移除。为了使用 gdb(1) 调试 Debian 软件包，*-dbgsym 软件包需要被安装。（例如，安装
coreutils-dbgsym，用于调试 coreutils）源代码软件包和普通的二进制软件包一起自动生成*-dbgsym软件
包。那些调试软件包将被独立放在debian-debug档案库。更多信息请参阅DebianWiki文档。
如果一个需要被调试的软件包没有提供其*-dbgsym软件包，你需要按如下所示的从源代码中重构并且安装它。
$ mkdir /path/new ; cd /path/new
$ sudo apt-get update
$ sudo apt-get dist-upgrade
$ sudo apt-get install fakeroot devscripts build-essential
$ apt-get source package_name
$ cd package_name*
$ sudo apt-get build-dep ./
按需修改bug。
软件包调试版本跟它的官方Debian版本不冲突，例如当重新编译已存在的软件包版本产生的”+debug1”后缀，如下
所示是编译未发行的软件包版本产生的”~pre1”后缀。
$ dch -i
如下所示编译并安装带有调试符号的软件包。
$ export DEB_BUILD_OPTIONS=”nostrip noopt”
$ debuild
$ cd ..
$ sudo debi package_name*.changes
你需要检查软件包的构建脚本并确保编译二进制的时候使用了”CFLAGS=-g -Wall”选项。
12.5.3 获得栈帧
当你碰到程序崩溃的时候，报告bug时附上栈帧信息是个不错的注意。
使用如下方案之一，可以通过gdb(1)取得栈帧信息：
• 在GDB中崩溃的方案：
Debian参考手册 226/233
– 从GDB运行程序。
– 崩溃程序。
– 在GDB提示符输入”bt”。
• 先奔溃的方案：
– 更新“/etc/security/limits.conf”文件，包括下面内容：
* soft core unlimited
– shell提示符下输入”ulimit -c unlimited”。
– 从这个shell提示符运行程序。
– 崩溃的程序产生一个coredump文件。
– 加载coredump文件到GDB，用”gdb gdb ./program_binary core”。
– 在GDB提示符输入”bt”。
对于无限循环或者键盘冻结的情况，你可以通过按Ctrl-\或Ctrl-C或者执行“kill -ABRT PID”强制奔溃程
序。(参见第 9.4.12 节)
提示
通常，你会看到堆栈顶部有一行或者多行有”malloc()”或”g_malloc()”.当这个出现的时候，你的堆栈不是非常
有用的。找到一些有用信息的一个简单方法是设置环境变量”$MALLOC_CHECK_” 的值为 2(malloc(3)). 你可以通
过下面的方式在运行gdb时设置。
$ MALLOC_CHECK_=2 gdb hello
12.5.4 高级 gdb 命令
命令 命令用途的描述
(gdb) thread apply all bt 得到多线程程序的所有线程栈帧
(gdb) bt full 查看函数调用栈中的参数信息
(gdb) thread apply all bt full 和前面的选项一起得到堆栈和参数
(gdb) thread apply all bt full
得到前10个调用的栈帧和参数信息，以此来去除不相关的输出
10
(gdb) set logging on 把gdb的日志输出到文件(默认的是”gdb.txt”)
Table12.14: 高级gdb命令列表
12.5.5 检查库依赖性
按如下所示使用ldd(1)来找出程序的库依赖性。
$ ldd /usr/bin/ls
librt.so.1 => /lib/librt.so.1 (0x4001e000)
libc.so.6 => /lib/libc.so.6 (0x40030000)
libpthread.so.0 => /lib/libpthread.so.0 (0x40153000)
/lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
因为ls(1)运行在 ̀chroot ̀ed环境，以上的库在 ̀chroot ̀ed环境也必须是可用的。
参见第 9.4.6 节。
Debian参考手册 227/233
12.5.6 动态调用跟踪工具
在Debian中，有几个动态调用跟踪工具存在。参见第 9.4 节。
12.5.7 调试与 X 相关的错误
如果一个GNOME程序preview1收到了一个X错误，您应当看见一条下面这样的信息。
The program ’preview1’ received an X Window System error.
如果就是这种情况，你可以尝试在运行程序的时候加上”--sync”选项，并且在”gdk_x_error”函数处设置中断来获
得栈帧信息。
12.5.8 内存泄漏检测工具
Debian上有一些可用的内存泄漏检测工具。
软件包 流行度 大小 说明
libc6-dev V:254,I:572 12051 mtrace(1)：调试glibc中的malloc
valgrind V:6,I:37 78187 内存调试器和分析器
electric-fence V:0,I:3 73 malloc(e)调试器
libdmalloc5 V:0,I:2 393 内存分配库调试
在C和C++程序中检测缓存溢出和缓存欠载（bufferunder-runs
duma V:0,I:0 295
）的库
leaktracer V:0,I:2 56 C++程序内存泄露跟踪器
Table12.15: 内存泄漏检测工具的列表
12.5.9 反汇编二进制程序
你可以使用下面的方式通过objdump(1)反编译二进制代码。
$ objdump -m i386 -b binary -D /usr/lib/grub/x86_64-pc/stage1
注意
gdb(1)可以用来交互式反汇编代码。
12.6 编译工具
12.6.1 make
Make是一个维护程序组的工具。一旦执行make(1)，make会读取规则文件Makefile，自从上次目标文件被修改后，
如果目标文件依赖的相关文件发生了改变，那么就会更新目标文件，或者目标文件不存在，那么这些文件更新可能会
同时发生。
规则文件的语法如下所示。
Debian参考手册 228/233
软件包 流行度 大小 文档
make V:133,I:559 1592 通过make-doc包提供“info make”
autoconf V:32,I:233 2025 由autoconf-doc包提供“info autoconf”
automake V:32,I:232 1837 由automake1.10-doc包提供“info automake”
libtool V:27,I:216 1213 由libtool-doc包提供”info libtool”