如图13-21所示，攻击者在测试前，使用Brup Suite的爬虫功能对网站进行爬取，通过
MIME Type筛选出与接口相关的请求，对筛选后的每一个请求进行判断是否包含敏感信
息。如果包含敏感信息，则复制请求URL到未进行登录的浏览器进行访问，如果访问后返
回之前的敏感信息，则存在漏洞。
图13-21 接口未授权访问测试流程图
步骤一：登录后使用Burp Suite的爬虫功能，从重点关注的目录（一般为网站根目
录）开始爬取，在HTTP history选项卡中选中要开始爬取的项，右键选择“Spider from
here”。爬取的结果会在Target→Site map中显示。如图13-20所示，在爬取完毕后，使用
Burp Suite的MIME type过滤功能，筛选出接口相关的HTTP请求，重点关注json、script、
xml、text MIME type等。
图13-22 对MIME type进行过滤
步骤二：如图12-23所示，对接口相关的请求进行查看，查看响应中是否包含想要的
敏感信息，如个人电话、IP地址、兴趣爱好、网站历史记录、身份证、手机号、住址等信
息。
图13-23 查找包含敏感信息的HTTP请求
通过查看响应包的具体信息，可以发现返回页面包含敏感信息，如ip地址、视频的历
史播放等信息，通过这些信息可以了解其位置及关注点。
步骤三：如图13-24所示，将完整的请求URL复制到未登录的浏览器中，查看能否访
问对应URL的内容。如果能够返回敏感信息，则说明漏洞存在；如果需要登录验证后才能
访问，则不存在该漏洞。
图13-24 未登录状态下访问URL
在未进行登录的浏览器上，能够直接返回对应URL的页面内容而无须验证其身份，则
该网站存在接口未授权访问的漏洞。
13.4.3 修复建议
（1）采用Token校验的方式，在url中添加一个Token参数，只有Token验证通过才返
回接口数据且Token使用一次后失效。
（2）在接口被调用时，后端对会话状态进行验证，如果已经登录，便返回接口数
据；如果未登录，则返回自定义的错误信息。
13.5 Callback自定义测试
13.5.1 测试原理和方法
在浏览器中存在着同源策略，所谓同源是指域名、协议、端口相同。当使用Ajax异步
传输数据时，非同源域名之间会存在限制。其中有一种解决方法是JSONP（JSON with
Padding），基本原理是利用了HTML里元素标签，远程调用JSON文件来
实现数据传递。JSONP 技术中一般使用 Callback（回调函数）参数来声明回调时所使用的
函数名，这里往往存在安全问题，由于没有使用白名单的方法进行限制Callback的函数
名，导致攻击者可以自定义Callback内容，从而触发XSS等漏洞。
13.5.2 测试过程
如图13-25所示，攻击者在测试前，使用Brup Suite的爬虫功能对网站进行爬取，筛选
出带有Callback或者jsonp参数的请求，对请求响应的Content-Type进行判断，如果Content-
Type为text/html，则进行下一步，接着攻击者对Callback参数进行分析，如果Callback参数
允许攻击插入HTML标签，则存在漏洞。
图13-25 CallBack测试流程图
步骤一：如图13-26所示，使用Burp Suite的爬虫功能，从重点关注的目录（一般为网
站根目录）开始爬取，在 HTTP history 选项卡中选中要开始爬取的项，右键选择“Spider
from here”。
如图13-27所示，爬取的结果会在Target→Site map中显示。在爬取完毕后，再使用
Burp Suite的过滤功能找到带有Callback参数的链接，如图13-28所示。
图13-26 从网站根目录开始爬取
图13-27 切换到Site map标签页
图13-28 使用callback关键词进行过滤
在输入关键词之后，再单击图13-28中序号“1”的位置即可让过滤生效。步骤二：如图
13-29所示，找到URL带有callback参数的链接。
图13-29 定位到callback参数位置
步骤三：查看URL对应的HTTP Response的Content-Type类型是否为text/html。如果
Content-Type为text/html，我们输入的HTML标签才会被浏览器解析。如图12-30所示，
Content-Type类型为text/html，将对应的请求发送到Repeater，继续步骤四。
图13-30 观察响应的Content-Type
步骤四：如图13-31所示，查看callback参数是否存在过滤及可控，这时我们需要在
callback参数值前追加一些文本类的HTML标签，不直接使用script等标签是避免waf等防护
设备的检测。我们这里使用的HTML标签是一级标题标签。
如图13-32所示，根据Response的内容，我们可以了解到callback参数不存在过滤及可
控。进一步测试发现info参数对Response的输出内容没有影响，删除掉info参数，精简
URL。
图13-31 测试callback参数是否可控
图13-32 精简漏洞URL
步骤五：如图13-33所示，将callback参数更换成带有恶意行为的HTML标签，进行利
用。
图13-33 确认漏洞
13.5.3 修复建议
（1）严格定义 HTTP 响应中的 Content-Type 为 json 数据格式：Content-Type：
application/json。
（2）建立callback函数白名单，如果传入的callback参数值不在白名单内，跳转到统
一的异常界面阻止其继续输出。
（3）对callback参数进行HTML实体编码来过滤掉“”等字符。
13.6 WebService测试
13.6.1 测试原理和方法
WebService是一种跨编程语言和跨操作系统平台的远程调用技术。XML+XSD、
SOAP（Simple Object Access Protocol）和WSDL（Web Services Description Language）就
是构成WebService平台的三大技术，其中XML+XSD用来描述、表达要传输的数据；
SOAP是用于交换XML编码信息的轻量级协议，一般以XML或者XSD作为载体，通过
HTTP协议发送请求和接收结果，SOAP协议会在HTTP协议的基础上增加一些特定的
HTTP消息头；WSDL是一个基于XML的用于描述Web Service及其函数、参数和返回值的
语言。
通过上面的描述，我们可以知道WebService就是一个应用程序向外界暴露出一个能通
过Web进行调用的API。这个API接收用户输入的参数，然后返回相关的数据内容。如果
一个WebService完全信任用户的输入，不进行过滤，则有可能导致SQL注入漏洞的发生。
13.6.2 测试过程
如图13-34所示，攻击者在测试前，通过爬虫或者目录扫描等方法找到服务器的
WebService链接，接着使用WVS（Web Vulnerability Scanner）的Web Services Editor功能
导入各个接口函数，通过关键词（如Get、Exec）定位到相关的接口函数，通过HTTP
Editor对每一个接口函数的输入参数进行测试（如SQL注入、文件上传等），如果出现预
期效果（如数据库报错、不同的延时等），则存在漏洞。
图13-34 WebService测试流程图
步骤一：找到服务器的WebService的链接，在WebService后面加上“？wsdl”，服务器
便会返回WSDL描述函数信息，如图13-35所示。
步骤二：如图13-36所示，使用WVS（Web Vulnerability Scanner），单击左边栏
的“Web Services Editor”。
在Operation选项列表中，可以看到WebService定义的多个函数，选择其中一个，
WVS便会显示需要输入的参数值。在选择的时候，我们尽量选择一些可能会涉及数据库
操作的函数，比如函数名以Get开头的，一般是从数据库返回一些信息；比如以Exec开头
的，一般是直接执行SQL语句或者特定指令。如图13-37所示，这里选择的是
ExecNonQuery函数，从函数名可以看出，这应该是用来执行非查询语句的接口。其中接
收一个名为sql的参数，从命名看，这个参数应该用来指定要执行的SQL语句。
图13-35 获取WebService链接
图13-36 使用WVS查看WebService
图13-37 查看ExecNonQuery函数的参数细节
步骤三：如图13-38所示，单击“HTTP Editor”切换到HTTP请求界面，我们可以发送
SOAP请求，以及接收请求后的响应。
图13-38 单击“HTTP Editor”切换到HTTP请求
如图13-39所示，我们修改sql参数的值为“1'”，查看响应内容。
图13-39 修改sql参数
如图13-40所示，结合微软官方的文档信息，System.Data.SqlClient.SqlConnection
是.NET Framework 连接 SQL Server 的类库，由此可知后端数据库使用的是 SQL Server数
据库。
步骤四：如图13-41所示，在了解数据库类型后，我们可以使用具体的非查询类的
SQL语句去测试输入参数是否存在SQL注入漏洞。这里要使用select语句等查询类的SQL语
句，其返回响应为false。
图13-40 分析异常信息
图13-41 测试非查询语句
测试是否存在漏洞，应该使用延时类的SQL语句，通过返回响应的时间间隔来确认是
否可以直接执行SQL语句。这里由于是SQL Server，应该使用SQL Server的延时语句，所
以使用“waitfor delay'0：0：3'”，这里'0：0：3'代表3秒。如图13-42所示，WVS显示的时间
间隔大于3000 ms，与SQL语句延时的时间一致，存在漏洞。
图13-42 延时注入3秒
如图13-43所示，延时5秒“waitfor delay'0：0：5'”。
图13-43 延时注入5秒
步骤五：剩下的利用步骤和常规的 SQL 注入测试一致，使用 Wireshark 或者Burp
Suite将WebService的请求抓取下来，保存到文本文件。在需要测试的参数值处添加星
号“*”，如图13-44所示。
图13-44 保存请求到文件中
然后通过sqlmap对参数进行检测即可，sqlmap对应的具体参数是-r，如图13-45和图
13-46所示。
图13-45 使用sqlmap进行测试
图13-46 确认漏洞存在
13.6.3 修复建议
（1）为WebService添加身份认证，认证成功后才允许访问和调用。
（2）WebService中接收输入参数的函数，在后端应该对输入参数进行过滤及净化，
在处理后才入库查询。
（3）在敏感功能的函数中，添加密码认证，认证后才允许调用敏感功能的函数。
实践篇
第14章 账号安全案例总结
14.1 账号安全归纳
随着网络的快速发展，出现了种类繁多的网络应用，包括E-mail、IM即时聊天工具
（QQ、MSN）、网络商店、BBS论坛、网络游戏等。各类应用均需要身份识别，因此身
份认证是网络信息安全的基本保障。网络服务器通过身份认证与访问控制的方式对合法注
册用户进行授权。用户首先通过注册（账号与密码）成为网络服务器的合法用户，只有通
过身份认证的用户才能访问资源。账号与密码成为各类网络应用必不可少的一部分，与此
同时账号和密码所面临的安全问题也越来越多。
例如，2011年某网站上600万用户资料可公开下载，而其存储密码的方式还是明文。
同时，2015年某论坛泄露2300万用户的信息，泄露的2300万用户数据包括用户名、注册邮
箱、加密后的密码等。2015年10月，某漏洞报告平台接到一起数据泄密报告后发布新漏
洞，该漏洞显示某网站用户数据库疑似泄露，影响到过亿数据，泄露信息包括用户名、密
码、密码密保信息、登录IP及用户生日等。
互联网上关于账号的安全问题日益凸显，本章总结的关于账号安全的相关漏洞包括密
码泄漏、暴力破解、弱口令、密码重置、登录账号绕过、重放攻击、网络钓鱼、信息泄
露、中间人攻击等。希望广大读者可以引以为鉴，不再出现此类问题。
14.2 账号安全相关案例
14.1.1 账号密码直接暴露在互联网上
GitHub是一个分布式的版本控制系统，开发者可以通过GitHub上传项目源代码。不过
由于开发者的安全意识不足，可能会上传部分敏感信息，包括邮件的账号密码、数据库的
配置信息、管理员的密码、备份文件、重要源代码等。
通过搜索引擎可灵活查找各类敏感信息，搜索语法如下。
（1）邮件配置信息查询：site：Github.com smtp password；
（2）数据库信息泄露：site：Github.com sa password；
（3）svn信息泄露：site：Github.com svn；
（4）数据库备份文件：site：Github.com inurl：sql。