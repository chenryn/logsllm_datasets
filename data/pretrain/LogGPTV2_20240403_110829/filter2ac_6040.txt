### Title: Thinking Outside the JIT Compiler: Understanding and Bypassing StructureID Randomization with Generic and Old-School Methods

**Abstract:**

In recent years, numerous Just-In-Time (JIT) compiler vulnerabilities have been discovered in major web browsers. For Safari, a common exploitation technique involves constructing `addrOf` and `fakeObj` primitives, which can be used to gain arbitrary read/write capabilities. A critical component of this process is obtaining a valid Structure ID to create a fake JavaScript cell (JSCELL). To address this, researchers introduced the method of spraying Structures to predict IDs in 2016.

However, in early 2023, WebKit implemented StructureID Randomization as a mitigation measure, which was recently enabled in the latest official release of *OS (e.g., iOS 12.4). This new mitigation makes it significantly more difficult to predict Structure IDs through spraying techniques.

In this talk, we will present novel and generic methods to bypass StructureID Randomization. These methods enable attackers to construct `addrOf` and `fakeObj` primitives and achieve arbitrary read/write capabilities. Unlike previous approaches that were specific to certain bugs or heavily reliant on the JIT compiler, our methods are more versatile and grounded in traditional exploitation techniques. We believe our findings will inspire the development of more robust mitigations.

**References:**
1. [Attacking Client-Side JIT Compilers](https://saelo.github.io/presentations/blackhat_us_18_attacking_client_side_jit_compilers.pdf)
2. [Attacking JavaScript Engines](http://www.phrack.org/papers/attacking_javascript_engines.html)
3. [WebKit StructureID Randomization Commit](https://github.com/WebKit/webkit/commit/f19aec9c6319a216f336aacd1f5cc75abba49cdf)
4. [JSCTales: Bypassing JIT Mitigations](http://iokit.racing/jsctales.pdf)

---

This revised version aims to provide a clear, coherent, and professional presentation of the topic, making it suitable for a technical audience.