Table 3: Microbenchmarks for network and CPU costs for XPIR with d ∈ {2, 3} levels of recursion and PSIR
using XPIR (d = 2).
17,891
590
N/A
18,481
N/A
18,481
4,129
2,097
N/A
6,226
N/A
6,226
1,638
1,998
N/A
3,636
N/A
3,636
2,556
2,097
N/A
4,653
N/A
4,653
0.04
0.02
N/A
0.06
6.47
N/A
6.47
0.02
0.02
N/A
0.04
2.02
N/A
2.02
0.01
0.02
N/A
0.03
0.55
N/A
0.55
8,913
590
N/A
9,503
N/A
9,503
0.01
0.01
0.02
295
262
10
567
47
614
4,456
262
N/A
4,718
N/A
4,718
65,536
129
XPSIR
262,144
258
1,048,576
524
< 0.01 < 0.01
< 0.01 < 0.01
0.04
< 0.05 < 0.13 < 0.53
0.01
< 0.01
0.51
0.12
0.01
0.11
0.12
0.01
0.51
0.52
557
262
40
895
178
1,073
However, the client CPU increase is half a second while 6 seconds are saved in server CPU. Furthermore,
80% of the extra network costs can be performed oﬄine at cheaper, non-busy times.
7.3 Cost of PaillierPSIR
In the previous section, we show that our estimates for SealPSIR indicate decreases in server CPU and online
network costs but increases in total amortized network costs. Is it possible to construct a PSIR scheme that
can decrease the total amortized network while reducing server CPU and online network costs signiﬁcantly?
We answer in the aﬃrmative.
We construct a library that constructs PIR based on the Paillier cryptosystem [42] and build a PSIR
scheme on top of the Paillier PIR library. We denote this PSIR scheme as PaillierPSIR. Traditionally, PIR
schemes built from Paillier enjoy the advantages of small network costs but suﬀer from extremely large server
CPU costs. However, PaillierPSIR reduces the online PIR request to a small database where the Paillier-built
PIR is feasible. We study the time needed by the client to generate queries and extract responses as well
as the time needed by the server to generates responses from queries.
In addition, we examine network
costs. The results can be seen in the right column of Table 2 and compared to SealPIR (the best, previous
construction) seen in the left column of Table 2.
Optimizations to Paillier. The Paillier cryptosystem [42] is a partially homomorphic encryption sys-
tem. Paillier has two important properties which enable its use for PIR: homomorphic plaintext absorption
and homomorphic addition. Homomorphic plaintext absorption is the property that given an encryption,
Enc(K, m), and a plaintext, p, then Enc(K, m)p = Enc(K, mp). Homomorphic addition is the property that
for any two ciphertexts, Enc(K, m1) and Enc(K, m2), then Enc(K, m1)Enc(K, m2) = Enc(K, m1 + m2). Pail-
lier can be used to perform PIR requests. For a database, p1, . . . , pn, of n items of b bits, the client uploads
Enc(K, m1), . . . , Enc(K, mn) where only one mi = 1 corresponding to retrieving the i-th item. The server
j∈[n] Enc(K, mj)pj . The trivial way to compute a product of powers is to
perform n exponentiations and n multiplications. Bernstein [10] surveys several techniques that improve the
needs to compute the value (cid:81)
22
(a) Inter-Datacenter.
(b) Home Network.
(c) Mobile Network.
Figure 3: The amortized latency for queries under diﬀerent settings.
computational eﬃciency of this problem. We implement Straus’s algorithm [48] as a faster way to compute
the product of powers. For parameter ρ, we only require (n/ρ)·(2ρ +b) multiplications and (n/ρ)·b squarings.
For a description of Straus’s algorithm, see Algorithm 14.88 in [39].
Network costs. PaillierPSIR beneﬁts from signiﬁcant reductions in online network costs as well as a modest
reduction in total amortized network costs. PaillierPSIR uses 4.8-10.5x less online network costs and 1.3-4.5x
less total amortized network costs compared to SealPIR. The main gains derive from replacing RLWE-based
PIR schemes with the Paillier PIR scheme. Furthermore, the majority of amortized network costs may be
performed oﬄine.
CPU costs. For 1M items, PaillierPSIR reduces server CPU costs by more than 3.7x compared to SealPIR.
However, PaillierPSIR introduces an increase in client CPU costs which we believe is a worthwhile tradeoﬀ.
In concrete terms, client CPU increases by 660 milliseconds while server CPU decreases by more than 4
seconds.
8 Conclusions
In this paper, we present PSIR, an extension of PIR, that is able to utilize the large amounts of storage
available to applications on client devices. Unlike other stateful primitives, we design PSIR such that several
important practical properties of PIR are maintained. In particular, PSIR ensures that simultaneous querying
capability to large groups of independent clients, query privacy for a server colluding with clients and the
ability for stateless clients to enroll in the system using only interaction with the server. By using client
state, PSIR reduces the number of public-key operations that dominate practical costs to be sub-linear in
the database size.
For concrete gains, we show that PaillierPSIR scheme (PSIR using PaillierPIR) is able to signiﬁcantly
reduce server CPU, online and amortized total network costs compared to SealPIR (the current best PIR
construction). In addition, we show that instantiating PSIR with XPIR and SealPIR can also signiﬁcantly
reduce server CPU. For PSIR with XPIR, signiﬁcant network cost are also enjoyed while PSIR with SealPIR
increases network costs. Due to our PSIR scheme, the majority of network costs may be moved to oﬄine
processing.
References
[1] Introduction to Linux traﬃc control. http://tldp.org/HOWTO/Traffic-Control-HOWTO/intro.html,
2006.
[2] XPIR: Private information retrieval for everyone. https://github.com/XPIR-team/XPIR, 2015.
23
[3] Q1 2017 State of the internet - connectivity report. https://www.akamai.com/fr/fr/multimedia/
documents/state-of-the-internet/q1-2017-state-of-the-internet-connectivity-report.
pdf, 2017.
[4] gRPC - an RPC library and framework. https://github.com/grpc/grpc, 2018.
[5] C. Aguilar-Melchor, J. Barrier, L. Fousse, and M.-O. Killijian. XPIR: Private information retrieval for
everyone. Proceedings on Privacy Enhancing Technologies, 2016(2):155–174, 2016.
[6] M. R. Albrecht, R. Player, and S. Scott. On the concrete hardness of learning with errors. Journal of
Mathematical Cryptology, 9(3):169–203, 2015.
[7] S. Angel, H. Chen, K. Laine, and S. Setty. PIR with compressed queries and amortized query processing.
Cryptology ePrint Archive, Report 2017/1142, 2017. https://eprint.iacr.org/2017/1142.
[8] S. Angel and S. T. Setty. Unobservable communication over fully untrusted infrastructure. In OSDI,
pages 551–569, 2016.
[9] A. Beimel, Y. Ishai, and T. Malkin. Reducing the servers computation in private information retrieval:
PIR with preprocessing. In Annual International Cryptology Conference, pages 55–73. Springer, 2000.
[10] D. J. Bernstein. Pippenger’s exponentiation algorithm. 2002.
[11] N. Borisov, G. Danezis, and I. Goldberg. DP5: A private presence service. Proceedings on Privacy
Enhancing Technologies, 2015(2):4–24, 2015.
[12] E. Boyle, Y. Ishai, R. Pass, and M. Wootters. Can we access a database both locally and privately? In
Theory of Cryptography Conference, pages 662–693. Springer, 2017.
[13] Z. Brakerski, C. Gentry, and V. Vaikuntanathan.
(Leveled) fully homomorphic encryption without
bootstrapping. ACM Transactions on Computation Theory (TOCT), 6(3):13, 2014.
[14] Z. Brakerski and V. Vaikuntanathan. Fully homomorphic encryption from ring-LWE and security for
key dependent messages. In Annual cryptology conference, pages 505–524. Springer, 2011.
[15] R. Canetti, J. Holmgren, and S. Richelson. Towards doubly eﬃcient private information retrieval. In
Theory of Cryptography Conference, pages 694–726. Springer, 2017.
[16] D. L. Chaum. Untraceable electronic mail, return addresses, and digital pseudonyms. Communications
of the ACM, 24(2):84–90, 1981.
[17] R. Cheng, W. Scott, B. Parno, A. Krishnamurthy, and T. Anderson. Talek: a private publish-subscribe
protocol. Technical report, Technical Report. University of Washington, 2016.
[18] B. Chor, O. Goldreich, E. Kushilevitz, and M. Sudan. Private information retrieval. In Foundations of
Computer Science, 1995. Proceedings., 36th Annual Symposium on, pages 41–50. IEEE, 1995.
[19] I. Damg˚ard and M. Jurik. A generalisation, a simplication and some applications of Paillier’s prob-
In International Workshop on Public Key Cryptography, pages 119–136.
abilistic public-key system.
Springer, 2001.
[20] P. M. Fenwick. A new data structure for cumulative frequency tables. Software: Practice and Experience,
24(3):327–336, 1994.
[21] R. A. Fisher and F. Yates. Statistical tables for biological, agricultural and medical research (3rd ed.).
Oliver & Boyd, 1948.
24
[22] C. Gentry and Z. Ramzan. Single-database private information retrieval with constant communication
rate. In International Colloquium on Automata, Languages, and Programming, pages 803–815. Springer,
2005.
[23] O. Goldreich. Towards a theory of software protection and simulation by oblivious RAMs. In Proceedings
of the nineteenth annual ACM symposium on Theory of computing, pages 182–194. ACM, 1987.
[24] O. Goldreich and R. Ostrovsky. Software protection and simulation on oblivious RAMs. Journal of the
ACM (JACM), 43(3):431–473, 1996.
[25] M. Green, W. Ladd, and I. Miers. A protocol for privately reporting ad impressions at scale.
In
Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, pages
1591–1601. ACM, 2016.
[26] J. Groth, A. Kiayias, and H. Lipmaa. Multi-query computationally-private information retrieval with
constant communication rate. In International Workshop on Public Key Cryptography, pages 107–123.
Springer, 2010.
[27] T. Gupta, N. Crooks, W. Mulhern, S. T. Setty, L. Alvisi, and M. Walﬁsh. Scalable and private media
consumption with Popcorn. In NSDI, pages 91–107, 2016.
[28] A. Hamlin, R. Ostrovsky, M. Weiss, and D. Wichs. Private anonymous data access. Cryptology ePrint
Archive, Report 2018/363, 2018. https://eprint.iacr.org/2018/363.
[29] R. Henry. Polynomial batch codes for eﬃcient IT-PIR. Proceedings on Privacy Enhancing Technologies,
2016(4):202–218, 2016.
[30] Y. Ishai, E. Kushilevitz, R. Ostrovsky, and A. Sahai. Batch codes and their applications. In Proceedings
of the thirty-sixth annual ACM symposium on Theory of computing, pages 262–271. ACM, 2004.
[31] M. Jakobsson and A. Juels. Addition of El Gamal plaintexts. In International Conference on the Theory
and Application of Cryptology and Information Security, pages 346–358. Springer, 2000.
[32] S. Janson. Tail bounds for sums of geometric and exponential variables. Statistics & Probability Letters,
135:1 – 6, 2018.
[33] S. Kadhe, B. Garcia, A. Heidarzadeh, S. E. Rouayheb, and A. Sprintson. Private information retrieval
with side information. arXiv preprint arXiv:1709.00112, 2017.
[34] N. P. Karvelas, A. Peter, and S. Katzenbeisser. Blurry-ORAM: A multi-client oblivious storage archi-
tecture. IACR Cryptology ePrint Archive, 2016:1077, 2016.
[35] E. Kushilevitz and R. Ostrovsky. Replication is not needed: Single database, computationally-private
information retrieval. In Foundations of Computer Science, 1997. Proceedings., 38th Annual Symposium
on, pages 364–373. IEEE, 1997.
[36] M. Luby and C. Rackoﬀ. How to construct pseudorandom permutations from pseudorandom functions.
SIAM J. Comput., 17(2):373–386, 1988.
[37] M. Maﬀei, G. Malavolta, M. Reinert, and D. Schr¨oder. Privacy and access control for outsourced
personal records. In Security and Privacy (SP), 2015 IEEE Symposium on, pages 341–358. IEEE, 2015.
[38] T. Mayberry, E.-O. Blass, and G. Noubir. Multi-client oblivious RAM secure against malicious servers.
Cryptology ePrint Archive, Report 2015/121, 2015. https://eprint.iacr.org/2015/121.
[39] A. J. Menezes, P. C. Van Oorschot, and S. A. Vanstone. Handbook of Applied Cryptography. CRC press,
1996.
25
[40] B. Morris, P. Rogaway, and T. Stegers. How to encipher messages on a small domain. In Advances in
Cryptology - CRYPTO 2009, 29th Annual International Cryptology Conference, volume 5677 of Lecture
Notes in Computer Science, pages 286–302. Springer, 2009.
[41] D. E. Muller. Application of Boolean algebra to switching circuit design and to error detection. Trans-
actions of the IRE Professional Group on Electronic Computers, (3):6–12, 1954.
[42] P. Paillier. Public-key cryptosystems based on composite degree residuosity classes. In International