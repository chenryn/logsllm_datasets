### Table 3: Microbenchmarks for Network and CPU Costs for XPIR with d ∈ {2, 3} Levels of Recursion and PSIR using XPIR (d = 2)

| **XPIR (d=2)** | **Network Cost (KB)** | **CPU Time (s)** |
|-----------------|-----------------------|-------------------|
| 17,891          | N/A                   | 0.04              |
| 590             | N/A                   | 0.02              |
| 18,481          | N/A                   | 0.06              |
| 4,129           | N/A                   | 0.02              |
| 2,097           | N/A                   | 0.02              |
| 6,226           | N/A                   | 0.04              |
| 1,638           | N/A                   | 0.01              |
| 1,998           | N/A                   | 0.02              |
| 3,636           | N/A                   | 0.03              |
| 2,556           | N/A                   | 0.01              |
| 2,097           | N/A                   | 0.02              |
| 4,653           | N/A                   | 0.03              |

| **PSIR (d=2)** | **Network Cost (KB)** | **CPU Time (s)** |
|-----------------|-----------------------|-------------------|
| 17,891          | 6.47                  | 6.47              |
| 590             | 2.02                  | 2.02              |
| 18,481          | 0.55                  | 0.55              |
| 4,129           | 0.01                  | 0.01              |
| 2,097           | 0.02                  | 0.02              |
| 6,226           | 0.12                  | 0.12              |
| 1,638           | 0.01                  | 0.01              |
| 1,998           | 0.11                  | 0.11              |
| 3,636           | 0.51                  | 0.51              |
| 2,556           | 0.52                  | 0.52              |
| 2,097           | 0.01                  | 0.01              |
| 4,653           | 0.12                  | 0.12              |

| **XPSIR** | **Network Cost (KB)** | **CPU Time (s)** |
|-----------|-----------------------|-------------------|
| 8,913     | 0.02                  | 0.02              |
| 590       | 0.02                  | 0.02              |
| 9,503     | 0.02                  | 0.02              |
| 295       | 0.01                  | 0.01              |
| 262       | 0.02                  | 0.02              |
| 10        | 0.01                  | 0.01              |
| 567       | 0.01                  | 0.01              |
| 47        | 0.02                  | 0.02              |
| 614       | 0.01                  | 0.01              |
| 4,456     | 0.02                  | 0.02              |
| 262       | 0.01                  | 0.01              |
| 4,718     | 0.01                  | 0.01              |
| 65,536    | 0.01                  | 0.01              |
| 129       | 0.01                  | 0.01              |
| 262,144   | 0.01                  | 0.01              |
| 258       | 0.01                  | 0.01              |
| 1,048,576 | 0.01                  | 0.01              |
| 524       | 0.01                  | 0.01              |

However, the client CPU time increases by half a second, while 6 seconds are saved in server CPU time. Furthermore, 80% of the additional network costs can be performed offline at cheaper, non-busy times.

### 7.3 Cost of PaillierPSIR

In the previous section, we showed that our estimates for SealPSIR indicate decreases in server CPU and online network costs but increases in total amortized network costs. Is it possible to construct a PSIR scheme that can decrease the total amortized network cost while significantly reducing server CPU and online network costs? We answer in the affirmative.

We constructed a library that implements PIR based on the Paillier cryptosystem [42] and built a PSIR scheme on top of this Paillier PIR library, denoted as PaillierPSIR. Traditionally, PIR schemes built from Paillier benefit from small network costs but suffer from extremely high server CPU costs. However, PaillierPSIR reduces the online PIR request to a small database where the Paillier-based PIR is feasible. We studied the time required by the client to generate queries and extract responses, as well as the time needed by the server to generate responses from queries. Additionally, we examined the network costs. The results can be seen in the right column of Table 2 and compared to SealPIR (the best, previous construction) in the left column of Table 2.

#### Optimizations to Paillier

The Paillier cryptosystem [42] is a partially homomorphic encryption system. Paillier has two important properties that enable its use for PIR: homomorphic plaintext absorption and homomorphic addition. Homomorphic plaintext absorption is the property that given an encryption \( \text{Enc}(K, m) \) and a plaintext \( p \), then \( \text{Enc}(K, m)^p = \text{Enc}(K, mp) \). Homomorphic addition is the property that for any two ciphertexts \( \text{Enc}(K, m_1) \) and \( \text{Enc}(K, m_2) \), then \( \text{Enc}(K, m_1) \cdot \text{Enc}(K, m_2) = \text{Enc}(K, m_1 + m_2) \).

Paillier can be used to perform PIR requests. For a database \( p_1, \ldots, p_n \) of \( n \) items, each of \( b \) bits, the client uploads \( \text{Enc}(K, m_1), \ldots, \text{Enc}(K, m_n) \) where only one \( m_i = 1 \) corresponding to retrieving the \( i \)-th item. The server needs to compute the value \( \prod_{j \in [n]} \text{Enc}(K, m_j)^{p_j} \). The trivial way to compute a product of powers is to perform \( n \) exponentiations and \( n \) multiplications. Bernstein [10] surveys several techniques that improve the computational efficiency of this problem. We implemented Straus's algorithm [48] as a faster way to compute the product of powers. For parameter \( \rho \), we only require \( (n/\rho) \cdot (2\rho + b) \) multiplications and \( (n/\rho) \cdot b \) squarings. For a description of Straus's algorithm, see Algorithm 14.88 in [39].

#### Network Costs

PaillierPSIR benefits from significant reductions in online network costs as well as a modest reduction in total amortized network costs. PaillierPSIR uses 4.8-10.5x less online network costs and 1.3-4.5x less total amortized network costs compared to SealPIR. The main gains derive from replacing RLWE-based PIR schemes with the Paillier PIR scheme. Furthermore, the majority of amortized network costs may be performed offline.

#### CPU Costs

For 1 million items, PaillierPSIR reduces server CPU costs by more than 3.7x compared to SealPIR. However, PaillierPSIR introduces an increase in client CPU costs, which we believe is a worthwhile tradeoff. In concrete terms, client CPU time increases by 660 milliseconds, while server CPU time decreases by more than 4 seconds.

### 8 Conclusions

In this paper, we present PSIR, an extension of PIR, that leverages the large amounts of storage available on client devices. Unlike other stateful primitives, we designed PSIR to maintain several important practical properties of PIR, including simultaneous querying capability for large groups of independent clients, query privacy for a server colluding with clients, and the ability for stateless clients to enroll in the system using only interaction with the server. By using client state, PSIR reduces the number of public-key operations, making the practical costs sub-linear in the database size.

For concrete gains, we show that the PaillierPSIR scheme (PSIR using PaillierPIR) significantly reduces server CPU, online, and total amortized network costs compared to SealPIR (the current best PIR construction). Additionally, we show that instantiating PSIR with XPIR and SealPIR can also significantly reduce server CPU. For PSIR with XPIR, significant network cost savings are enjoyed, while PSIR with SealPIR increases network costs. Due to our PSIR scheme, the majority of network costs can be moved to offline processing.

### References

[1] Introduction to Linux traffic control. http://tldp.org/HOWTO/Traffic-Control-HOWTO/intro.html, 2006.
[2] XPIR: Private information retrieval for everyone. https://github.com/XPIR-team/XPIR, 2015.
[3] Q1 2017 State of the internet - connectivity report. https://www.akamai.com/fr/fr/multimedia/documents/state-of-the-internet/q1-2017-state-of-the-internet-connectivity-report.pdf, 2017.
[4] gRPC - an RPC library and framework. https://github.com/grpc/grpc, 2018.
[5] C. Aguilar-Melchor, J. Barrier, L. Fousse, and M.-O. Killijian. XPIR: Private information retrieval for everyone. Proceedings on Privacy Enhancing Technologies, 2016(2):155–174, 2016.
[6] M. R. Albrecht, R. Player, and S. Scott. On the concrete hardness of learning with errors. Journal of Mathematical Cryptology, 9(3):169–203, 2015.
[7] S. Angel, H. Chen, K. Laine, and S. Setty. PIR with compressed queries and amortized query processing. Cryptology ePrint Archive, Report 2017/1142, 2017. https://eprint.iacr.org/2017/1142.
[8] S. Angel and S. T. Setty. Unobservable communication over fully untrusted infrastructure. In OSDI, pages 551–569, 2016.
[9] A. Beimel, Y. Ishai, and T. Malkin. Reducing the servers computation in private information retrieval: PIR with preprocessing. In Annual International Cryptology Conference, pages 55–73. Springer, 2000.
[10] D. J. Bernstein. Pippenger’s exponentiation algorithm. 2002.
[11] N. Borisov, G. Danezis, and I. Goldberg. DP5: A private presence service. Proceedings on Privacy Enhancing Technologies, 2015(2):4–24, 2015.
[12] E. Boyle, Y. Ishai, R. Pass, and M. Wootters. Can we access a database both locally and privately? In Theory of Cryptography Conference, pages 662–693. Springer, 2017.
[13] Z. Brakerski, C. Gentry, and V. Vaikuntanathan. (Leveled) fully homomorphic encryption without bootstrapping. ACM Transactions on Computation Theory (TOCT), 6(3):13, 2014.
[14] Z. Brakerski and V. Vaikuntanathan. Fully homomorphic encryption from ring-LWE and security for key dependent messages. In Annual cryptology conference, pages 505–524. Springer, 2011.
[15] R. Canetti, J. Holmgren, and S. Richelson. Towards doubly efficient private information retrieval. In Theory of Cryptography Conference, pages 694–726. Springer, 2017.
[16] D. L. Chaum. Untraceable electronic mail, return addresses, and digital pseudonyms. Communications of the ACM, 24(2):84–90, 1981.
[17] R. Cheng, W. Scott, B. Parno, A. Krishnamurthy, and T. Anderson. Talek: a private publish-subscribe protocol. Technical report, Technical Report. University of Washington, 2016.
[18] B. Chor, O. Goldreich, E. Kushilevitz, and M. Sudan. Private information retrieval. In Foundations of Computer Science, 1995. Proceedings., 36th Annual Symposium on, pages 41–50. IEEE, 1995.
[19] I. Damgård and M. Jurik. A generalisation, a simplification and some applications of Paillier’s probabilistic public-key system. In International Workshop on Public Key Cryptography, pages 119–136. Springer, 2001.
[20] P. M. Fenwick. A new data structure for cumulative frequency tables. Software: Practice and Experience, 24(3):327–336, 1994.
[21] R. A. Fisher and F. Yates. Statistical tables for biological, agricultural and medical research (3rd ed.). Oliver & Boyd, 1948.
[22] C. Gentry and Z. Ramzan. Single-database private information retrieval with constant communication rate. In International Colloquium on Automata, Languages, and Programming, pages 803–815. Springer, 2005.
[23] O. Goldreich. Towards a theory of software protection and simulation by oblivious RAMs. In Proceedings of the nineteenth annual ACM symposium on Theory of computing, pages 182–194. ACM, 1987.
[24] O. Goldreich and R. Ostrovsky. Software protection and simulation on oblivious RAMs. Journal of the ACM (JACM), 43(3):431–473, 1996.
[25] M. Green, W. Ladd, and I. Miers. A protocol for privately reporting ad impressions at scale. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, pages 1591–1601. ACM, 2016.
[26] J. Groth, A. Kiayias, and H. Lipmaa. Multi-query computationally-private information retrieval with constant communication rate. In International Workshop on Public Key Cryptography, pages 107–123. Springer, 2010.
[27] T. Gupta, N. Crooks, W. Mulhern, S. T. Setty, L. Alvisi, and M. Walfish. Scalable and private media consumption with Popcorn. In NSDI, pages 91–107, 2016.
[28] A. Hamlin, R. Ostrovsky, M. Weiss, and D. Wichs. Private anonymous data access. Cryptology ePrint Archive, Report 2018/363, 2018. https://eprint.iacr.org/2018/363.
[29] R. Henry. Polynomial batch codes for efficient IT-PIR. Proceedings on Privacy Enhancing Technologies, 2016(4):202–218, 2016.
[30] Y. Ishai, E. Kushilevitz, R. Ostrovsky, and A. Sahai. Batch codes and their applications. In Proceedings of the thirty-sixth annual ACM symposium on Theory of computing, pages 262–271. ACM, 2004.
[31] M. Jakobsson and A. Juels. Addition of El Gamal plaintexts. In International Conference on the Theory and Application of Cryptology and Information Security, pages 346–358. Springer, 2000.
[32] S. Janson. Tail bounds for sums of geometric and exponential variables. Statistics & Probability Letters, 135:1 – 6, 2018.
[33] S. Kadhe, B. Garcia, A. Heidarzadeh, S. E. Rouayheb, and A. Sprintson. Private information retrieval with side information. arXiv preprint arXiv:1709.00112, 2017.
[34] N. P. Karvelas, A. Peter, and S. Katzenbeisser. Blurry-ORAM: A multi-client oblivious storage architecture. IACR Cryptology ePrint Archive, 2016:1077, 2016.
[35] E. Kushilevitz and R. Ostrovsky. Replication is not needed: Single database, computationally-private information retrieval. In Foundations of Computer Science, 1997. Proceedings., 38th Annual Symposium on, pages 364–373. IEEE, 1997.
[36] M. Luby and C. Rackoff. How to construct pseudorandom permutations from pseudorandom functions. SIAM J. Comput., 17(2):373–386, 1988.
[37] M. Maffei, G. Malavolta, M. Reinert, and D. Schröder. Privacy and access control for outsourced personal records. In Security and Privacy (SP), 2015 IEEE Symposium on, pages 341–358. IEEE, 2015.
[38] T. Mayberry, E.-O. Blass, and G. Noubir. Multi-client oblivious RAM secure against malicious servers. Cryptology ePrint Archive, Report 2015/121, 2015. https://eprint.iacr.org/2015/121.
[39] A. J. Menezes, P. C. Van Oorschot, and S. A. Vanstone. Handbook of Applied Cryptography. CRC press, 1996.
[40] B. Morris, P. Rogaway, and T. Stegers. How to encipher messages on a small domain. In Advances in Cryptology - CRYPTO 2009, 29th Annual International Cryptology Conference, volume 5677 of Lecture Notes in Computer Science, pages 286–302. Springer, 2009.
[41] D. E. Muller. Application of Boolean algebra to switching circuit design and to error detection. Transactions of the IRE Professional Group on Electronic Computers, (3):6–12, 1954.
[42] P. Paillier. Public-key cryptosystems based on composite degree residuosity classes. In International