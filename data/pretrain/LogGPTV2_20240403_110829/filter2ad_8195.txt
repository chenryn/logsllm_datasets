# 勒索软件 Jaff 深入分析

##### 译文声明
本文为翻译文章，原文作者为 Fortinet，发布于 fortinet.com。译文仅供参考，具体内容和含义请以原文为准。

勒索软件 Jaff 最早于2017年春季开始传播，但由于其爆发时间与 WannaCry 相同，因此并未引起广泛关注。尽管如此，Jaff 仍然感染了大量的计算机。在这篇 FortiGuard 的分析中，我们将详细探讨 Jaff 所使用的技术。

## 传播方式
与其他许多勒索软件变种类似，Jaff 主要通过 PDF 附件进行传播。一旦受害者打开附件，就会弹出一个提示框，询问是否要打开嵌入的 ASQMU.docm 文件（图 1）。

如果用户选择打开文件，Jaff 会首先展示一个包含关闭宏保护指令的文档（图 2）。该文档顶部有一个黄色提示框，其中包含一个“启用宏”按钮，点击后即可执行所有宏命令。

## 下载器：privateProbe
实际上，这个文档中包含了许多宏指令（图 3），主要的宏指令如下：
- `autoopen()`
- `Document_Open()`
- `setAsMainTarget()`
- `Challenge(sender As String, e As Integer)`
- `Subfunc(MethodParam2() As Byte, MethodParam As String)`
- `Lipochanko(a, b)`
- `Synomati(Comps)`
- `Vgux(strComputer As Integer)`
- `enumMembers(objDomain)`
- `Assimptota4(FullPath As String, NumHoja As Integer)`
- `Assimptota6(FullPath As String, NumHoja As Integer)`
- `WidthA(Dbbb As String, bbbJ As String, Optional system_ofADown_Sexote As String)`
- `Function system_ofADown_ProjectSpeed()`
- `privateProbe()`
- `SaveDataCSVToolStripMenuItem_Click(e As Integer)`
- `RepackOK(sheetToMove As String, sheetAnchor As String, Assimptota6OrAfter As String)`
- `CheckRectsAd()`

其中，`privateProbe` 宏负责下载 Jaff 的二进制文件（图 4）。下载链接在图 4 中可见，但需要进一步处理才能得到实际的下载链接。具体来说，需要将字符串 "RRDD" 替换为 "om"，并在每次出现 "Nbiyure3" 时进行分割（图 5）。

_译者注：最终可以得到三个真实的下载链接_

## 解密、重定向与垃圾代码
通过这三个下载链接，我们可以获取到恶意的二进制文件。Jaff 会对这些文件进行解密，以运行最终的恶意代码。为了对抗代码分析，它使用了一种简单的代码重定向技术，增加分析难度。此外，在代码执行过程中，Jaff 还会运行一些无关的垃圾代码，以混淆代码的真实用途。

图 6 显示了解密例程的流程。Jaff 会随机选择不同的代码块来执行，每次经过这组代码时都会解密一个 DWORD 值，直到所有恶意代码都被成功解密。

移除不相关的垃圾代码后，可以看到只有三个代码块用于解密（图 7），并且使用的解密算法是简单的 XOR。

## API 解析
解密后的恶意代码中，大多数 API 名称仍然是隐藏的。这种隐藏 API 名称的做法是一种常见的恶意代码特征，旨在逃避反病毒软件的检测。有些恶意代码使用加密或哈希来隐藏 API 名称，而 Jaff 使用的是哈希方法。

Jaff 首先解析 PEB（Process Environment Block），查找字符串 "kernel32.dll"。然后对 PEB 中找到的所有模块名称进行哈希，并与 "kernel32.dll" 的哈希值进行比较。匹配成功后，它会获取 "kernel32.dll" 的地址，并使用相同的方法解析其他 API。

## 进程替换 (Process Hollowing)
进程替换是另一种常见的恶意代码特征，它能够将目标进程的合法代码卸载，然后将自己的恶意代码写入这片内存。Jaff 在获取到所有必要的 API 后，会使用进程替换技术。它使用 `UnmapViewOfFile` 清除当前进程的内存块，然后使用 `VirtualAlloc` 重新分配相同的内存块，并通过调用 `VirtualProtect` 将其保护模式更改为 `PAGE_EXECUTE_READWRITE`。最后，通过一系列 `REPE MOVSB` 指令将恶意代码复制到新分配的内存块中。

## 代码封装
上述步骤（解密、重定向与垃圾代码/解析 API/进程替换）都是代码封装的一部分，目的是隐藏 Jaff 真正执行的指令。完成这些步骤后，Jaff 即可运行其真实的代码。有趣的是，代码封装可以在不更新可执行文件的情况下升级代码，从而快速部署新版本的恶意软件，避免被之前的检测参数发现。

## 资源段
接下来我们分析二进制文件的资源段。Jaff 的资源部分主要包括以下内容：
- **密钥块**：在其中一个资源中找到的 260 字节的密钥，用于解密资源段中的不同资源内容（图 9）。
- **扩展名列表**：其中一个资源包含了扩展名列表，Jaff 会根据这个列表搜索并加密文件系统中的文件（图 10）。
- **赎金说明**：Jaff 的赎金说明以三种格式存储：HTML、纯文本和图片 (BMP)。文本和 HTML 版本可以在资源部分找到（图 12）。Jaff 使用以下 API 生成图片形式的赎金说明：
  - `CreateStreamOnHGlobal`
  - `CreateDCW(DISPLAY)`
  - `GetDeviceCaps`
  - `SetRect`
  - `CreateSolidBrush`
  - `FillRect`
  - `OleDraw`

图 13 显示了图片形式的赎金说明，其中解密 ID 是动态生成的，并添加到图片中。在当前 Jaff 变体中，该图像会在感染后设置为桌面墙纸。

## 文件加密
在复杂的代码封装和初始化之后，Jaff 的主要功能——文件加密，其实是一个相对简单的例程。Jaff 会在特定目录下检索具有指定扩展名的文件（图 11），将其重命名并添加 `.jaff` 扩展名，然后调用 `CryptEncrypt` 函数对该文件进行加密（图 14）。

加密完所有可能的文件后，Jaff 会在相关目录中添加 `ReadMe.bmp`、`ReadMe.html` 和 `ReadMe.txt` 三个文件，分别对应三个版本的赎金说明。

## 总结
影响勒索软件传播能力的一个关键因素是发布时间。Jaff 最早在与 WannaCry 相同的时间进行散播，因此没有被媒体特别报道。或许它正是故意在此时释放，以便隐蔽地感染更多用户。无论如何，我们都应定期更新反病毒软件，随时准备抵御恶意软件或勒索软件的攻击。

## 样本信息
- SHA256: 387812ee2820cbf49812b1b229b7d8721ee37296f7b6018332a56e30a99e1092
- 检测结果: W32/Jaff.ED11!tr.ransom