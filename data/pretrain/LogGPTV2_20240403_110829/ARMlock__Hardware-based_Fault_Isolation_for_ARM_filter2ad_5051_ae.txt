### Software Fault Isolation (SFI) and ARMlock: An Overview

Software Fault Isolation (SFI) is a security mechanism designed to confine untrusted modules within dedicated sandboxes, preventing them from accessing memory in other domains and escaping their confinement. To achieve this, SFI systems often statically or dynamically rewrite untrusted code to insert inline reference monitors that control memory access. However, some SFI systems only check memory writes, which can be insufficient for applications like untrusted native browser plugins, where an attacker might search the browser's memory for sensitive information such as bank account details.

#### Early SFI Systems
The initial SFI system [43] and PittSFIeld [21] reserved specific registers for the generated inline monitors. This approach had limitations on 32-bit x86 architectures due to the limited number of general-purpose registers. In contrast, NaCl for x86 [46] and VX32 [9] leveraged the hardware segmentation of x86 to confine memory accesses. However, segmentation has been largely removed from 64-bit x86 architectures, and ARM lacks similar segmentation support.

#### ARMlock: Memory Domain-Based SFI
ARMlock addresses these limitations by leveraging the memory domain feature in ARM processors to sandbox both memory reads and writes. Binary rewriting-based SFI inserts inline reference monitors to confine memory accesses. To prevent these monitors from being bypassed, some level of control flow integrity (CFI) [2] is required. PittSFIeld and NaCl [33, 46] implement a chunk-based (coarse-grained) CFI, where a chunk contains the monitor and related memory access instructions. Control transfer instructions can only target the beginning of a code chunk, ensuring that monitors cannot be bypassed. VX32 uses dynamic binary translation to intercept real jump targets at runtime and prevent any attempts to bypass the monitors. ARMlock, however, does not need to ensure CFI because the processor guarantees that the untrusted module cannot access memory outside its domain. This allows ARMlock to impose no constraints on the untrusted module, enabling features like self-modifying code and just-in-time (JIT) compilation.

#### Related Systems
- **ARMor [49]** and **NaCl for ARM [33]** are closely related systems. ARMor uses Diablo [27], a link-time binary rewriting framework, to insert inline monitors into untrusted binaries. This results in high performance overhead, especially for computation-intensive tasks. NaCl for ARM uses a customized compiler to mask out high bits of memory addresses and jump targets, limiting accessible memory to the lower 1GB. This restricts NaCl for ARM to a single sandbox with a fixed address space.
- **TLR [30]** leverages ARM TrustZone to build a trusted language runtime for mobile applications, reducing the Trusted Computing Base (TCB) of an open-source .NET implementation. TrustZone provides a secure world in addition to a normal world, making it more suitable for isolating different applications or operating systems rather than modules within an application.

#### Applications and Research
Since its introduction [43], SFI has been adopted by many systems for various purposes:
- **Robusta [37]** uses SFI to isolate native code in the Java virtual machine, preventing vulnerabilities in the native code from compromising the JVM or the system.
- **Program Shepherding [17]** relies on dynamic binary translation to monitor control flow transfers at runtime and enforce security policies.
- Several research efforts, such as VINO [34], SFI-Minix [14], BGI [5], XFI [8], and LXFI [20], use SFI to isolate kernel extensions or device drivers from the main kernel.

#### ARMlock Implementation
ARMlock leverages a feature in the page table to split the address space into multiple domains. Unlike systems that use separate page tables for untrusted modules, ARMlock relies on a more efficient hardware feature. We have implemented a prototype of ARMlock on Linux for the ARMv6 and ARMv7 sub-architectures. Our evaluation shows that ARMlock provides strong and efficient isolation, supporting advanced features like self-modifying code, JIT compilation, and exception delivery.

### Summary
In this paper, we present the design and implementation of ARMlock, a hardware-based fault isolation system for the ARM architecture. ARMlock uniquely leverages the memory domain feature in commodity ARM processors to create multiple sandboxes for untrusted modules. Our evaluation demonstrates that ARMlock effectively isolates both memory write and read operations, and code running inside a sandbox executes as fast as that outside it. Additionally, ARMlock supports advanced features that many other SFI systems find challenging, such as self-modifying code, JIT compilation, and exception delivery.

### Acknowledgements
We would like to thank the anonymous reviewers for their valuable comments, which greatly improved the presentation of this paper. This work was supported in part by the First Year Assistant Professor award of Florida State University. The first author was partially supported by the National Science Foundation of China under Grant No. 61340031. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of FSU and NSFC.

### References
[1] Domain Access Control Register. http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0434b/CIHBCBFE.html.
[2] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-Flow Integrity: Principles, Implementations, and Applications. In Proceedings of the 12th ACM Conference on Computer and Communications Security, November 2005.
...
[49] L. Zhao, G. Li, B. De Sutter, and J. Regehr. ARMor: Fully Verified Software Fault Isolation. In Proceedings of the ninth ACM international conference on Embedded software, EMSOFT â€™11, October 2011.