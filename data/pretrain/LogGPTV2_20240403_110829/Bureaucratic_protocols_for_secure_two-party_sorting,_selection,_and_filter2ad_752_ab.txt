Inputs: If our circuit is used as a component, the inputs of
the circuit are likely outputs from other components. There-
fore, according to the ways how outputs are protected, each
input pin of our circuit also consists of two inputs, one from
Alice and the other from Bob; the actual input is the xor of
these two inputs. More speciﬁcally, in our circuit design, we
assume that Alice holds her shares A = {a1, a2, . . . , an}, and
Bob holds his shares B = {b1, b2, . . . , bn}. The real secret
values R = A ⊕ B, i.e., R = {ri = ai ⊕ bi | i = 1,. . . , n},
where ri’s are never known to any single party.
The above setting is diﬀerent from the setting of tra-
ditional S2P problems.
In the traditional setting, Alice
and Bob have their own private inputs, and they want to
do a joint computation on their joint inputs. The tradi-
tional setting can be considered as a special case of our set-
ting. For example, if Alice’s private inputs are r1, . . . , rk,
3
while Bob’s private inputs are rk+1, . . . , rn, we can consider
that Alice has A = {r1, . . . , rk, 0, . . . , 0}, and Bob has B
= {0, . . . , 0, rk+1, . . . , rn}, as we know that any number xor
with 0 stays the same.
2.3 Secure Compare-Swap Component
We have developed a useful component that is called Se-
cure Compare-Swap (SCS); it serves as the low-level compo-
nent for our bureaucratic protocols for sorting, selection, and
random permutation problems. According to bureaucratic
computing paradigm, we use Yao’s garbled circuit technique
to implement this component. The layout of this component
follows the general circuit layout depicted in Figure 1.
The functionality of the SCS circuit is to compare two
input numbers L and R, such that the larger one is output
from the Max pin, while the smaller one is output from the
Min pin. The actual input L is the xor of LA and LB (R is
the xor of RA and RB), where LA and RA belong to Alice,
while LB and RB belong to Bob. Neither Alice nor Bob
knows L or R.
Outputs of the SCS component are most likely interme-
diate results, so they should not disclose any information
about the inputs. Therefore, we need this primitive to be
not only secure (i.e. disclosing no information about the
value of the inputs), but also oblivious, i.e., from the out-
put, nobody should be able to tell which number (L or R)
becomes the Max output and which one becomes the Min out-
put. To put it in another way, nobody should know whether
the “swap” has occurred within the circuit or not.
⊤A
⊤B
⊥A ⊥B
Max
Min
Input L
Input R
Max = ⊤A ⊕ ⊤B
Min = ⊥A ⊕ ⊥B
L = LA ⊕  LB
R = RA ⊕ RB
LA
LB
RA RB
Figure 2: Secure Compare-Swap (SCS)
It should be noted that every time the SCS circuit is used,
the random numbers generated to disguise the outputs must
be fresh, and cannot be constants. Therefore, although we
use the same component multiple times in a protocol, the
outputs are independently disguised, and there is no infor-
mation disclosure due to the repeated use of the component.
The SCS circuit can be easily built from the scratch or
using Fairplay [25].
2.4 High-Level Computations
The high-level computations in the bureaucratic comput-
ing are concerned about how to assemble the low-level com-
ponents together to solve a speciﬁc problem. To prevent
partial information disclosure, the high-level computations
should be data-oblivious.
There are two diﬀerent ways to achieve data-obliviousness.
One is to add redundant steps to turn a non-data-oblivious
algorithm into an data-oblivious one. For example, an al-
gorithm might need need to use a[i] at a speciﬁc step, and
the value i depends the results of previous steps. This al-
gorithm is not data-oblivious. In S2P computation, letting
either party learn the value of i is unacceptable. It is not
4
diﬃcult to hide the value of i using Yao’s garbled circuit
technique. The problem is if i is unknown, how can the par-
ticipants know which element of the array should be used at
this step. To solve this problem, a standard technique is to
“pretend to” use the entire array, but making sure that only
the value of a[i] actually aﬀects the outcome [25]. The com-
putations of other array elements are redundant and are for
disguise purpose. These redundant computations increase
the time complexity of non-data-oblivious algorithms.
An alternative to achieve data-obliviousness in high-level
computations is to directly use a data-oblivious algorithm.
In a data-oblivious algorithm, if a[i] needs to be used at
a speciﬁc step, the value i must be independent from the
results of previous steps, i.e., i is known even before the
whole computation. Therefore, disclosing the value i poses
no risk. For example, bubblesort is a data-oblivious algo-
rithm. Figure 3 depicts the steps of bubblesort for three
numbers. Regardless of what the inputs are, the steps de-
picted in the ﬁgure are always the same. Because there is
no need to add redundant computations, converting a data-
oblivious algorithms to S2P computations does not change
the time complexity of the algorithm.
L
R
p
a
w
S
&
e
r
a
p
m
o
C
x
a
M
n
i
M
5
2
7
L
R
p
a
w
S
&
e
r
a
p
m
o
C
x
a
M
n
i
M
7
5
2
L
R
p
a
w
S
&
e
r
a
p
m
o
C
x
a
M
n
i
M
Figure 3: Example of bubblesort of 3 numbers
Regardless of what approach we take, the end results are
data-oblivious algorithms. Therefore, the problem that we
should solve is to develop optimal data-oblivious algorithms
and use them for the high-level computations in the bureau-
cratic computing. In the subsequent sections, we will focus
on developing such algorithms.
2.5 From Oblivious Algorithm to S2P Circuit
Once we have a data-oblivious algorithm for high-level
computation and the necessary low-level components, con-
verting the algorithm to a S2P circuit is straightforward. To
help readers understand the procedure, we use the bubblesort
of three numbers as an example.
The comparison sequence of bubblesort for three num-
bers are depicted in Figure 3. This sequence is data-oblivious,
so the sequence itself (i.e. the high-level steps) reveals noth-
ing about the contents of inputs. However, the low-level
“compare & swap” component does reveal information about
the inputs because the behavior of the component depends
on the inputs. To ensure that no information about the
“compare & swap” step is disclosed, we replace this compo-
nent with the SCS component (Figure 2), which uses Yao’s
garbled circuit technique to hide the behavior inside the
component. Moreover, the component is reusable like a func-
tion of a program, so the whole bureaucratic computing is
quite scalable.
Since it is straightforward, we will not discuss how to con-
vert data-oblivious algorithms into S2P circuit again in the
rest of this paper. We will only focus on the discussion of
the date-oblivious algorithms themselves.
3. SECURE TWO-PARTY SORTING
3.1 The S2P Sorting Problem
Sorting is a fundamentally important procedure that serves
as a critical subroutine to many solutions. Therefore, to pro-
vide solutions to many interesting S2P problems, it is very
important to be able to conduct sorting in the S2P setting,
where the actual array to be sorted consists of the private in-
puts from two diﬀerent parties, and no private inputs should
be disclosed to the other party.
We would like to build an eﬃcient S2P circuit for sorting
using the bureaucratic computing paradigm. We call this
circuit the S2P sorting circuit. We would like the S2P sort-
ing circuit to not only serve as a complete solution itself, but
also serve as a S2P sub-function to other more sophisticated
problems. Therefore, the layout of our circuit follows what
we depicted in Figure 1. We formally deﬁne the requirement
of our S2P sorting circuit in the following:
Definition 3.1. (S2P Sorting Circuit) The objective of
this sorting circuit is to sort the input I = {I1, . . . , In}.
However nobody knows the actual input array; instead, each
participant has a secret share of this array. Namely, Al-
ice has {I1,A, . . . , In,A}, while Bob has has {I1,B, . . . , In,B},
where Ik = Ik,A ⊕ Ik,B, for k = 1, . . . , n.
The actual output of the circuit is a sorted array O =
{O1, . . . , On}, where O1 ≤ O2 ≤ . . . ≤ On. No party should
learn these actual outputs; instead, Alice learns {O1,A, . . .,
On,A} and Bob learns {O1,B , . . ., On,B }, where Ok = Ok,A⊕
Ok,B, for k = 1, . . . , n.
Because this is a S2P computation, from the evaluation of
this S2P sorting circuit, nobody should be able to derive any
useful information about the input array I and the output
array O, other than what they have already learned before
the evaluation of this circuit 3.
3.2 Challenges and Approaches
As we known, sorting has been extensively studied in
the non-S2P setting; many sorting algorithms have been
proposed, such as quicksort, mergesort, bubblesort, etc.
The lower bound on comparison-based sorting algorithm is
O(n log n), which is achieved by a number of sorting algo-
rithms. We have studied the common sorting algorithms
that achieve O(n log n) time complexity (either in worst case
or in average case). Unfortunately, these algorithms are
not data-oblivious; none of them can beat the bubblesort
asymptotically (i.e., they are no better than O(n2)) in se-
cure sorting cases where time complexity may change (see
the countone example in introduction).
Recall that mainstream comparison-based algorithms, such
as quicksort, mergesort, heapsort, etc, must know where
the compare-swap occurs, so that they can perform further
sorting based on the previous result.
Iterating in such a
manner, however, is considered to disclose the mapping in-
formation in our secure two-party sorting case. Because the
positions that compare-swap occurs are dependent on the
input data. In other words, those positions are variables in
each iteration. Directly using such sorting algorithms will
put us in a paradox, because compare-swap positions are
3If the output is the ﬁnal result, then both parties are sup-
posed to learn the output. In this case, they will disclose
their private shares of the outputs to each other.
5
key part in sorting, however, we must somehow leave Alice
and Bob unknown about them in the whole sorting process.
Our Approaches: We have identiﬁed two types of sort-
ing algorithms that are eﬃcient and data-oblivious. One
type of algorithms come from the literature of sorting net-
works, which have been studied extensively for the purpose
of eﬃcient hardware design. The best practical results can
achieve O(n log2 n) time complexity. Not satisfying with
this asymptotic result, we have developed a new algorithm
called Randomized Shellsort;
it achieves O(n log n) time
complexity. This algorithm is a probabilistic sorting algo-
rithm, i.e., it can sort any array with very high probability.
3.3 The S2P Sorting Networks
Data-oblivious sorting algorithms have been extensively
studied in the literature. The studies were motivated by a
totally diﬀerent reason: a data-oblivious sorting algorithm
always makes the same comparisons, regardless of the input.
That is, the behavior of the algorithm is independent of
the input. This property is useful for hardware design (i.e.
design a hardware sorting module or a switching network),
for parallel computing, and for sorting that uses external
memory (such as disks and tapes), all of which can beneﬁt
if the algorithm is data-oblivious [4].
The data-oblivious sorting algorithms are usually called
sorting networks in the literature. A sorting network is an
abstract mathematical model of a network of wires and com-
parator modules that is used to sort a sequence of numbers.
Each comparator connects two wires and sort the values by
outputting the smaller value to one wire, and a larger value
to the other. By arranging these comparators properly, ev-
ery input element will be sent to its ﬁnal position in the
sorted sequence. Figure 3 gives an example of sorting net-
works for three numbers.
Although sorting networks were not motivated by secure
two-party computation, S2P computation gives sorting net-
works a brand new life: sorting networks are data-oblivious,
which is exactly the property that we need for bureaucratic
computing. Therefore, we can leverage the optimal results
developed from the sorting network community to build ef-
ﬁcient S2P sorting circuits. Here optimal means to sort n
number of input, using least number of comparators (or least
number of SCS circuits for S2P sorting circuits).
Eﬃcient Sorting Networks.
The asymptotically best
sorting network, discovered by Ajtai, Koml´os, and Szemer´edi,
achieves O(n log n) for n inputs [2]. This network is called
AKS network, and it is asymptotically optimal. A simpliﬁed
version of the AKS network was described by Paterson [26].
While an important theoretical discovery, the AKS network
has little or no practical application because of the large
linear constant hidden by the Big-O notation.
Currently, optimal sorting networks for n ≤ 8 are known
exactly and are presented in [21] along with the most eﬃcient
sorting networks to date for 9 ≤ n ≤ 16. These results are
listed in Table 1.
For input size n > 16, no optimal network have been dis-
covered. However, several sorting networks with size O(n log2 n)
have been proposed, such as odd-even mergesort and bitonic
sort [4]. These networks are often used in practice. These
algorithms are attached in Appendix C. Among these three
sorting networks, the odd-even mergesort has the small-
est constants in the Big-O notation. For example, to sort
Input Size n
# of Comparators
Input Size n
# of Comparators
1
0
9
25
2
1
10
29
3
3
11
35
4
5
12
39
5
9
13
45
6
12