            PI:EMAIL
            ererer
            example.com
Response has an additional InResponseTo attribute. This value is the ID value
of the previous AuthnRequest, and then the meaning of the first sub-Signature
tag is the same as that of AuthnRequest. Letâ€™s look at other tags here.
##### Status
The sign of the result of the IDP authentication user, here is success,
indicating that the user authentication is successful.
##### Assertion
Assertion means assertion, which contains some basic information and
attributes of the user.
The Issuer tag contained in it represents the same meaning as AuthnRequest,
and the Signature is also similar. However, the content of the signature is
different. You will see which part of the signature is signed in the
subsequent code detailed analysis.
##### Subject
  * NameID: Identifier, where the Format property is unspecified, indicating that the IdP has a format defined for it, and assuming that the SP knows how to parse the format data response from the IdP. For example, the IdP gives a format data "UserName=XXXXX Country=US", the SP gets an assertion, and the UserName can be parsed as "XXXXX". Here we are just a character username string format, indicating that the username is wewe.
  * SubjectConfirmation: How the user authenticates, the bearer method used by the method here.
  * SubjectConfirmationData: InResponseTo indicates who the response is to, NotOnOrAfter indicates that it is valid before, Recipient indicates the receiving endpoint.
  * Conditions: Limit the valid time of Assertion, in which the Audience-related tag is some information of the receiver.
  * AuthnStatement: idp uses information for user authentication, authentication authority, etc.
  * AttributeStatement: Some attributes related to users.
### See SAML SSO details through OpenSAML source code
It's the same project as before. Here we focus on the generation of
AuthnRequest by SP and the generation of AuthnResponse by IDP, and the
processing of IDP receiving AuthnRequest and SP receiving AuthnResponse. The
signature and digest, as well as some conversion and verification involved,
are the key points.
#### SP generates AuthnRequest
The call stack to the digest is as follows:
    calculateDigest:719, Reference (org.apache.xml.security.signature)
    generateDigestValue:406, Reference (org.apache.xml.security.signature)
    generateDigestValues:206, Manifest (org.apache.xml.security.signature)
    sign:609, XMLSignature (org.apache.xml.security.signature)
    signObject:77, Signer (org.opensaml.xml.signature)
    signMessage:193, BaseSAML2MessageEncoder (org.opensaml.saml2.binding.encoding)
    doEncode:109, HTTPPostEncoder (org.opensaml.saml2.binding.encoding)
    encode:52, BaseMessageEncoder (org.opensaml.ws.message.encoder)
    sendMessage:224, SAMLProcessorImpl (org.springframework.security.saml.processor)
    sendMessage:42, ConfigurableSAMLProcessor (mujina.sp)
    sendMessage:148, AbstractProfileBase (org.springframework.security.saml.websso)
    sendAuthenticationRequest:107, WebSSOProfileImpl (org.springframework.security.saml.websso)
    initializeSSO:225, SAMLEntryPoint (org.springframework.security.saml)
    commence:152, SAMLEntryPoint (org.springframework.security.saml)
    sendStartAuthentication:215, ExceptionTranslationFilter
The call stack is the entire process of generating an AuthnRequest. Here we
mainly look at the digest and which part is extracted:
    http://mock-sp
The xml content is the content after two transforms:
`Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"`will
excludes the contents of the Signature tag in the