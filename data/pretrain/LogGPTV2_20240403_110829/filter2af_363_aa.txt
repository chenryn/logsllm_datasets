**作者：hu4wufu@白帽汇安全研究院  
核对：r4v3zn@白帽汇安全研究院**
### 前言
#### JMX
`JMX`（`Java Management
Extensions`）是一种`Java`技术，主要为管理和监视应用程序、系统对象、设备（如打印机）和面向服务的网络提供相应的工具。也就是`java`版本的`SNMP`（简单网络管理协议），`JMX`与`SNMP`另一个共同点就是，`JMX`不仅能远程系统读取值，还可以用于调用远程系统的方法。
我们可以看一下整体架构：
从上面的架构图可以看到JMX主要分三层，分别是：
1、设备层（`Instrumentation Level`）
主要定义了信息模型。在`JMX`中，各种管理对象以管理构件的形式存在，需要管理时，向`MBean`服务器进行注册。该层还定义了通知机制以及一些辅助元数据类。
设备层其实就是和被管设备通信的模块，对于上层的管理者来说，`Instrumentation`
就是设备，具体设备如何通信，是采用`SNMP`,还是采用`ICMP`，是`MBean`的事情。
该层定义了如何实现`JMX`管理资源的规范。一个`JMX`管理资源可以是一个`Java`应用、一个服务或一个设备，它们可以用`Java`开发，或者至少能用`Java`进行包装，并且能被置入`JMX`框架中，从而成为`JMX`的一个管理构件(`Managed
Bean`)，简称`MBean`。管理构件可以是标准的，也可以是动态的，标准的管理构件遵从`JavaBeans`构件的设计模式；动态的管理构件遵从特定的接口，提供了更大的灵活性。
在`JMX`规范中，管理构件定义如下：它是一个能代表管理资源的`Java`对象，遵从一定的设计模式，还需实现该规范定义的特定的接口。该定义了保证了所有的管理构件以一种标准的方式来表示被管理资源。
管理接口就是被管理资源暴露出的一些信息，通过对这些信息的修改就能控制被管理资源。一个管理构件的管理接口包括：
1) 能被接触的属性值  
2) 能够执行的操作  
3) 能发出的通知事件  
4) 管理构件的构建器
`Standard
MBean`是最简单的`MBean`，它管理的资源必须定义在接口中，然后`MBean`必须实现这个接口。它的命名也必须遵循一定的规范，例如我们的`MBean`为`Hello`，则接口必须为`HelloMBean`。
2、代理层（`Agent Level`）
`Agent`层
用来管理相应的资源，并且为远端用户提供访问的接口。`Agent`层构建在设备层之上，并且使用并管理设备层内部描述的组件。`Agent`层主要定义了各种服务以及通信模型。该层的核心是
`MBeanServer`，所有的`MBean`都要向它注册，才能被管理。注册在`MBeanServer`上的`MBean`并不直接和远程应用程序进行通信，他们通过
协议适配器（Adapter） 和 连接器（`Connector`） 进行通信。通常`Agent`由一个`MBeanServer`和多个系统服务组成。`JMX
Agent`并不关心它所管理的资源是什么。
3、分布服务层（`Distributed Service Level`）
分布服务层关心`Agent`如何被远端用户访问的细节。它定义了一系列用来访问`Agent`的接口和组件，包括`Adapter`和`Connector`的描述。
**MBean**
利用`JMX`，我们可以像托管`bean`一样来管理各种资源。托管`bean`（`MBean`）是遵循`JMX`标准的某些设计规则的`Java
Bean`类。`MBean`可以表示设备、应用程序或需要通过`JMX`管理的任何资源。您可以通过`JMX`来访问这些`MBean`，比如查询属性和调用`Bean`方法。
并不是所有的`java`类都能被管理，只有按照特定格式编写的`java`类才能被`JMX`管理。这种特定格式机制我们称为`MBean`。
`JMX`标准在不同的`MBean`类型之间有所差异，但是，我们这里只处理标准`MBean`。为了成为有效的`MBean`，`Java`类必须：
  * 实现一个接口
  * 提供默认的构造函数（不带任何参数）
  * 遵循某些命名约定，例如实现`getter/setter`方法来读/写属性
创建一个`MBean`，首先需要定义一个接口。下面给出一个最简单的`MBean`示例：
    package de.mogwailabs.MBeans;
    public interface HelloMBean {
       // getter and setter for the attribute "name"
       public String getName();
       public void setName(String newName);
       // Bean method "sayHello"
       public String sayHello(); 
    }
下一步是为已定义的接口提供一个实现。注意，其名称应该始终与接口保持一致，除掉后缀`“MBean”`部分。
    package de.mogwailabs.MBeans;
    public class Hello implements HelloMBean {
         private String name = "MOGWAI LABS";
       // getter/setter for the "name" attribute
       public String getName() { return this.name; }
       public void setName(String newName) { this.name = newName; }
       // Methods
       public String sayHello() { return "hello: " + name; }
    }
**MBean服务器**
`MBean`服务器是一种管理系统`MBean`的服务。开发人员可以按照特定的命名模式在服务器中注册`MBean`。`MBean`服务器将传入的消息转发给已注册的`MBean`。该服务还负责将消息从`MBean`转发给外部组件。
默认情况下，每个`Java`进程都会运行一个`MBean`服务器服务，我们可以通过`ManagementFactory.getPlatformMBeanServer();`来访问它。下面给出的示例代码将“连接”到当前进程的`MBean`服务器，并打印输出所有已注册的`MBean`：
    package de.mogwailabs.MBeanClient;
    import java.lang.management.ManagementFactory;
    import javax.management.*;
    public class MBeanClient {
           publicstatic void main(String[] args) throws Exception {                  
           // Connect to the MBean server of the current Java process
           MBeanServer server = ManagementFactory.getPlatformMBeanServer();
           System.out.println( server.getMBeanCount() );
           // Print out each registered MBean
            for ( object object :server.queryMBeans(new objectName("*:*"), null) ) {
              System.out.println( ((objectInstance)object).getobjectName() );
           }
        }
    }
要想创建可以通过`MBean`服务器供外部调用的`MBean`实例，则需要使用`objectName`类完成相应的注册。每个`MBean`的名称，不仅要遵循对象命名约定，同时，还必须是独一无二的。名称分为域（通常是包）名和对象名两个部分。对象名称应包含`“type”`属性。如果给定域中只能有一个给定类型的实例，那么除了`type`属性之外，通常不应该有任何其他属性。
对于已经实现的`MBean`，我们需要`MBeanServer`。可以将`MBeanServer`理解为一个`MBean`的仓库，需要监控的`MBean`都需要先注册到仓库中。向`MBeanServer`注册`MBean`有两种方式，一是本地注册，二是远程注册。远程注册就为我们执行任意代码提供了可能。然后`jdk`有一些`MBean`，其中有一个`MBean`叫`mlet`。让我们能够在本地向远端注册`MBean`。
#### 漏洞概况
在`Apache IoTDB
0.9.0`到`0.9.1`和`0.8.0`到`0.8.2`中发现了一个问题。在启动`IoTDB`时，`JMX`端口`31999`无需任何认证即可暴露，然后客户端可以远程执行代码。
这个漏洞原理是基于`RMI`的`JMX`服务，攻击者可以远程注册一个恶意的 `MBean`，再去调用里面的用于执行命令的方法达到攻击效果。
首先是`MBeanServer`提供了一套远程注册`MBean`的机制，本地向`MBeanserver`注册一个`MBean`，也就是`Mlet`，`Mlet`是实现了一个函数`getMBeansFromURL(url)`，这个函数能够加载并实例化我们指定的远程`MBean`，从而导致了我们的恶意`payloadMBean`被加载注册到`MBeanServer`上，导致任意命令执行。
然后让目标机远程加载我们部署的恶意`MBean`，并在目标机上创建这个`MBean`，然后就可以用`JMX`协议控制这个恶意的`MBean`，通过`Runtime`类的`exec`方法执行命令。
### 环境准备
测试环境：`JDK 1.8.0_131`、`jython2.7.0`、`apache-iotdb-0.9.0`
`iotdb`下载地址：
`poc`下载地址：
这里`iotdb`可以下载源码调试，本文采取的是远程调试。
`sbin`目录下的`start-server.sh`配置：
`idea`配置：