were included. In particular, an adversary who also has control
over the randomness can break stateful IND-CPA security with
2 encryption queries, while an attacker without that control
could do so with about 264 encryption queries. We use these
more theoretical attacks to motivate our decision not to allow
re-encryption with ﬁxed metadata in our formal model of
MTProto, i.e. we insist that the state is evolving.
Proof of security: We then claim in Section V that our slight
variant of MTProto achieves channel conﬁdentiality and integ-
rity in our model, under certain assumptions on the components
used in its construction. As described in Section I-B, Telegram
has implemented our proposed alterations so that there can be
some assurances about MTProto as currently deployed.1
We use code-based game hopping proofs in which the
analysis is modularised into a sequence of small steps that can
be individually veriﬁed. As well as providing all details of the
proofs (in the full version), we also give high-level intuitions.
Signiﬁcant complexity arises in the proofs from two sources:
the entanglement of keys used in the two channel directions,
and the detailed nature of the model of MTProto that we use
(so that our proof rules out as many attacks as possible).
We eschew an asymptotic approach in favour of concrete
security analysis. This results in security theorems that quantit-
atively relate the conﬁdentiality and integrity of MTProto as a
secure channel to the security of its underlying cryptographic
components. Our main security results, Theorems 1 and 2
and Corollaries 1 and 2, provide conﬁdentiality and integrity
bounds containing terms equivalent to ≈ 𝑞/264 where 𝑞 is the
number of queries an attacker makes. We discuss this further
in Section V.
However, our security proofs rely on several assumptions
about cryptographic primitives that, while plausible, have not
been considered in the literature. In more detail, due to the
way Telegram makes use of SHA-256 as a MAC algorithm and
as a KDF, we have to rely on the novel assumption that the
block cipher SHACAL-2 underlying the SHA-256 compression
function is a leakage-resilient PRF under related-key attacks,
where “leakage-resilient” means that the adversary can choose
a part of the key. Our proofs rely on two distinct variants of
such an assumption. These assumptions hold in the ideal cipher
model, but further cryptanalysis is needed to validate them for
SHACAL-2. For similar reasons, we also require a dual-PRF
assumption of SHACAL-2. We stress that such assumptions are
likely necessary for our or any other computational security
proofs for MTProto. This is due to the speciﬁcs of how
MTProto uses SHA-256 and how it constructs keys and tags
from public inputs and overlapping key bits of a master secret.
Given the importance of Telegram, these assumptions provide
new, signiﬁcant cryptanalysis targets as well as motivate further
research on related-key attacks. Our proofs side-step concerns
about length-extension attacks by relying on the MTProto
plaintext encoding format which mandates the presence of
certain metadata in the ﬁrst block of the encrypted payload.
Attacks: We present further implementation attacks against
Telegram in Section VI and Appendix A. These attacks
highlight the limits of our formal modelling and the fragility
of MTProto implementations. The ﬁrst of these, a timing
attack against Telegram’s use of IGE mode encryption, can
be avoided by careful implementation, but we found multiple
vulnerable clients.2 The attack takes inspiration from an attack
on SSH [12]. It exploits that Telegram encrypts a length ﬁeld
and checks integrity of plaintexts rather than ciphertexts. If this
process is not implemented whilst taking care to avoid a timing
side channel, it can be turned into an attack recovering up to 32
1Clients still differ in their implementation of the protocol and in particular
in payload validation, which our model does not capture.
2We note that Telegram’s TDLib [10] library manages to avoid this leak [11].
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
88
bits of plaintext. We give an example from the ofﬁcial Desktop
Telegram client in Section VI and treat the Android and iOS
clients in the full version of this work. However, we stress that
the conditions of this attack are difﬁcult to meet in practice. In
particular, to recover bits from a plaintext message block 𝑚𝑖
we assume knowledge of message block 𝑚𝑖−1 (we consider this
a relatively mild assumption) and, critically, message block 𝑚1
which contains two 64-bit random values negotiated between
client and server. Thus, conﬁdentiality hinges on the secrecy of
two random strings – a salt and an id. Notably, these ﬁelds were
not designated for this purpose in the Telegram documentation.
In order to recover 𝑚1 and thereby enable our plaintext-
recovery attack, in Appendix A we chain it with another attack
on the server-side implementation of Telegram’s key exchange
protocol. This attack exploits how Telegram servers process
RSA ciphertexts. While the exploited behaviour was conﬁrmed
by the Telegram developers, we did not verify it with an
experiment.3 This attack actually breaks server authentication –
allowing a MiTM attack – assuming the attack can be completed
before a session times out. But, more germanely, it also allows
us to recover the id ﬁeld. This essentially reduces the overall
security of Telegram to guessing the 64-bit salt ﬁeld. We give a
sketch in Appendix A and details in the full version. We stress,
though, that even if all assumptions we make are met, our
exploit chain – while being considerably cheaper than breaking
the underlying AES-256 encryption – is far from practical.
Yet, it demonstrates the fragility of MTProto, which could be
avoided – along with unstudied assumptions – by relying on
standard authenticated encryption or, indeed, just using TLS.
We conclude with a broader discussion of Telegram security
and with our recommendations in Section VII.
B. Disclosure
We notiﬁed Telegram’s developers about the vulnerabilities
we found in MTProto on 16 April 2021. They acknowledged
receipt soon after and the behaviours we describe on 8 June
2021. They awarded a bug bounty for the timing side channel
and for the overall analysis. We were informed by the Telegram
developers that they do not do security or bugﬁx releases
except for immediate post-release crash ﬁxes. The development
team also informed us that they did not wish to issue security
advisories at the time of patching nor commit to release dates
for speciﬁc ﬁxes. Therefore, the ﬁxes were rolled out as part of
regular Telegram updates. The Telegram developers informed
us that as of version 7.8.1 for Android, 7.8.3 for iOS and 2.8.8
for Telegram Desktop all vulnerabilities reported here were
addressed. When we write “the current version of MTProto”
or “current implementations”, we refer to the versions prior to
those version numbers, i.e. the versions we analysed.
II. Preliminaries
A. Notational conventions
1) Basic notation: Let N = {1, 2, . . .}. For 𝑖 ∈ N let [𝑖] be
the set {1, . . . , 𝑖}. We denote the empty string by 𝜀, the empty
3Veriﬁcation would require sending a signiﬁcant number of requests to the
Telegram servers from a geographically close host.
set by ∅, and the empty tuple by (). We let 𝑥1 ← 𝑥2 ← 𝑣
denote assigning the value 𝑣 to both 𝑥1 and 𝑥2. Let 𝑥 ∈ {0, 1}∗
be any string; then |𝑥| denotes its bit-length, 𝑥[𝑖] denotes its
𝑖-th bit for 0 ≤ 𝑖 < |𝑥|, and 𝑥[𝑎 : 𝑏] = 𝑥[𝑎] . . . 𝑥[𝑏 − 1] for
0 ≤ 𝑎 < 𝑏 ≤ |𝑥|. For any 𝑥 ∈ {0, 1}∗ and ℓ ∈ N such that
|𝑥| ≤ ℓ, we write (cid:104)𝑥(cid:105)ℓ to denote the bit-string of length ℓ that
is built by padding 𝑥 with leading zeros. For any two strings
𝑥, 𝑦 ∈ {0, 1}∗, 𝑥 (cid:107) 𝑦 denotes their concatenation. If 𝑋 is a ﬁnite
set, we let 𝑥 ←$ 𝑋 denote picking an element of 𝑋 uniformly
at random and assigning it to 𝑥. If T is a table, T[𝑖] denotes
the element of the table that is indexed by 𝑖. We use int64
as a shorthand for a 64-bit integer data type. We use 0x to
preﬁx a hexadecimal string in big-endian order. All variables
are represented in big-endian unless speciﬁed otherwise. The
symbol ⊥∉ {0, 1}∗ denotes an empty table position or an
error code that indicates rejection, such as invalid input to an
algorithm. Uninitialised integers are assumed to be initialised
to 0, Booleans to false, strings to 𝜀, sets to ∅, tuples to (), and
tables are initially empty.
2) Algorithms and adversaries: Algorithms may be random-
ised unless otherwise indicated. Running time is worst case.
If 𝐴 is an algorithm, 𝑦 ← 𝐴(𝑥1, . . . ; 𝑟) denotes running 𝐴 with
random coins 𝑟 on inputs 𝑥1, . . . and assigning the output to 𝑦.
If any of inputs taken by 𝐴 is ⊥, then all of its outputs are ⊥.
We let 𝑦 ←$ 𝐴(𝑥1, . . .) be the result of picking 𝑟 at random and
letting 𝑦 ← 𝐴(𝑥1, . . . ; 𝑟). We let [ 𝐴(𝑥1, . . .)] denote the set
of all possible outputs of 𝐴 when invoked with inputs 𝑥1, . . ..
Adversaries are algorithms. We require that adversaries never
pass ⊥ as input to their oracles.
3) Security games and reductions: We use the code-based
game-playing framework of [13]. Pr[G] denotes the probability
that game G returns true. Variables in each game are shared
with its oracles. In the security reductions, we omit specifying
the running times of the constructed adversaries when they are
roughly the same as the running time of the initial adversary.
B. Standard deﬁnitions
𝑓 : D 𝑓 → R 𝑓 be a
1) Collision-resistant functions: Let
function. Consider game Gcr of Fig. 1, deﬁned for 𝑓 and an
adversary F . The advantage of F in breaking the CR-security
𝑓 ,F]. To win the game,
of 𝑓
adversary F has to ﬁnd two distinct inputs 𝑥0, 𝑥1 ∈ D 𝑓 such
is unkeyed, so there exists
𝑓
that
a trivial adversary F with Advcr
𝑓 (F) = 1 whenever 𝑓 is not
injective. We will use this notion in a constructive way, to build
a speciﬁc collision-resistance adversary F (for 𝑓 = SHA-256
with a truncated output) in a security reduction.
is deﬁned as Advcr
𝑓 (𝑥0) = 𝑓 (𝑥1). Note that
𝑓 (F) = Pr[Gcr
𝑓 ,F
Game Gcr
(𝑥0, 𝑥1) ←$ F ; Return (𝑥0 ≠ 𝑥1) ∧ ( 𝑓 (𝑥0) = 𝑓 (𝑥1))
Figure 1: Collision-resistance of function 𝑓 .
2) Function families: A family of functions F speciﬁes a
deterministic algorithm F.Ev, a key set F.Keys, an input set
F.In and an output length F.ol ∈ N. F.Ev takes a function
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
89
key fk ∈ F.Keys and an input 𝑥 ∈ F.In to return an output
𝑦 ∈ {0, 1}F.ol. We write 𝑦 ← F.Ev(fk, 𝑥). The key length of F
is F.kl ∈ N if F.Keys = {0, 1}F.kl.
3) Block ciphers: Let E be a function family. We say that
E is a block cipher if E.In = {0, 1}E.ol, and if E speciﬁes (in
addition to E.Ev) an inverse algorithm E.Inv: {0, 1}E.ol → E.In
such that E.Inv(ek, E.Ev(ek, 𝑥)) = 𝑥 for all ek ∈ E.Keys and all
𝑥 ∈ E.In. We refer to E.ol as the block length of E. Our pictures
𝐾 as a shorthand for E.Ev(ek, ·) and
and attacks use 𝐸𝐾 and 𝐸−1
E.Inv(ek, ·) respectively.
4) One-time PRF-security of function family: Consider
game Gotprf
F,D of Fig. 2, deﬁned for a function family F and an
adversary D. The advantage of D in breaking the OTPRF-
F,D ] − 1. The
security of F is deﬁned as Advotprf
game samples a uniformly random challenge bit 𝑏 and runs
adversary D, providing it with access to oracle RoR. The
oracle takes 𝑥 ∈ F.In as input, and the adversary is allowed
to query the oracle arbitrarily many times. Each time RoR is
queried on any 𝑥, it samples a uniformly random key fk from
F.Keys and returns either F.Ev(fk, 𝑥) (if 𝑏 = 1) or a uniformly
random element from {0, 1}F.ol (if 𝑏 = 0). D wins if it returns
a bit 𝑏(cid:48) that is equal to the challenge bit.
(D) = 2· Pr[Gotprf
F
Game Gotprf
F,D
𝑏 ←$ {0, 1} ; 𝑏(cid:48) ←$ DRoR
Return 𝑏(cid:48) = 𝑏
Figure 2: One-time PRF-security of function family F.
RoR(𝑥)
fk ←$ F.Keys ; 𝑦1 ← F.Ev(fk, 𝑥)
𝑦0 ←$ {0, 1}F.ol ; Return 𝑦𝑏
// 𝑥 ∈ F.In
5) Symmetric encryption schemes: A symmetric encryption
scheme SE speciﬁes algorithms SE.Enc and SE.Dec, where
SE.Dec is deterministic. Associated to SE is a key length
SE.kl ∈ N, a message space SE.MS ⊆ {0, 1}∗ \ {𝜀}, and a
ciphertext length function SE.cl: N → N. The encryption
algorithm SE.Enc takes a key 𝑘 ∈ {0, 1}SE.kl and a message
𝑚 ∈ SE.MS to return a ciphertext 𝑐 ∈ {0, 1}SE.cl(|𝑚|). We
write 𝑐 ←$ SE.Enc(𝑘, 𝑚). The decryption algorithm SE.Dec
takes 𝑘, 𝑐 to return message 𝑚 ∈ SE.MS ∪ {⊥}, where ⊥
denotes incorrect decryption. We write 𝑚 ← SE.Dec(𝑘, 𝑐).
Decryption correctness requires that SE.Dec(𝑘, 𝑐) = 𝑚 for all
𝑘 ∈ {0, 1}SE.kl, all 𝑚 ∈ SE.MS, and all 𝑐 ∈ [SE.Enc(𝑘, 𝑚)]. We
say that SE is deterministic if SE.Enc is deterministic.
6) One-time indistinguishability of SE: Consider game
Gotind$ of Fig. 3, deﬁned for a deterministic symmetric
encryption scheme SE and an adversary D. We deﬁne the
advantage of D in breaking the OTIND$-security of SE as
SE,D ] − 1. The game proceeds as the
Advotind$
OTPRF game.
7) IGE block cipher mode of operation: Let E be a
block cipher. Deﬁne the Inﬁnite Garble Extension (IGE)
mode of operation as SE = IGE[E] as in Fig. 4, where
key length is SE.kl = E.kl + 2 · E.ol, the message space
SE.MS =𝑡∈N{0, 1}E.ol·𝑡 consists of messages whose lengths
(D) = 2 · Pr[Gotind$
are multiples of the block length, and the ciphertext length
function SE.cl is the identity function. IGE was ﬁrst deﬁned
SE
// 𝑚 ∈ SE.MS
Game Gotind$
SE,D
𝑏 ←$ {0, 1} ; 𝑏(cid:48) ←$ DRoR
Return 𝑏(cid:48) = 𝑏
Figure 3: One-time real-or-random indistinguishability of
deterministic symmetric encryption scheme SE.
RoR(𝑚)
𝑘 ←$ {0, 1}SE.kl; 𝑐1 ← SE.Enc(𝑘, 𝑚)
𝑐0 ←$ {0, 1}SE.cl(|𝑚|) ; Return 𝑐𝑏