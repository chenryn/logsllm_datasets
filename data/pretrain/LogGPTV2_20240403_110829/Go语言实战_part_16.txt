30 u := user{"Bill", "PI:EMAIL"}
31
32 sendNotification(&u)
33
34 // 传入地址，不再有错误
35 }
在代码清单 5-45 里，这个程序终于可以编译并且运行。因为使用指针接收者实现的接口，
只有user类型的指针可以传给sendNotification函数。
现在的问题是，为什么会有这种限制？事实上，编译器并不是总能自动获得一个值的地址，
如代码清单5-46所示。
代码清单5-46 listing46.go
01 // 这个示例程序展示不是总能
02 // 获取值的地址
03 package main
04
05 import "fmt"
06
07 // duration是一个基于int类型的类型
08 type duration int
09
10 // 使用更可读的方式格式化duration值
11 func (d *duration) pretty() string {
12 return fmt.Sprintf("Duration: %d", *d)
13 }
14
15 // main是应用程序的入口
16 func main() {
17 duration(42).pretty()
18
19 // ./listing46.go:17: 不能通过指针调用duration(42)的方法
20 // ./listing46.go:17: 不能获取duration(42)的地址
21 }
代码清单5-46所示的代码试图获取duration类型的值的地址，但是获取不到。这展示了不能
总是获得值的地址的一种情况。让我们再看一下方法集的规则，如代码清单5-47所示。
代码清单5-47 再看一下方法集的规则
Values Methods Receivers
-----------------------------------------------
T (t T)
*T (t T) and (t *T)
Methods Receivers Values
-----------------------------------------------
(t T) T and *T
(t *T) *T
因为不是总能获取一个值的地址，所以值的方法集只包括了使用值接收者实现的方法。
5.4.4 多态
现在了解了接口和方法集背后的机制，最后来看一个展示接口的多态行为的例子，如代码清
单5-48所示。
代码清单5-48 listing48.go
01 // 这个示例程序使用接口展示多态行为
02 package main
03
04 import (
05 "fmt"
06 )
07
08 // notifier是一个定义了
09 // 通知类行为的接口
10 type notifier interface {
11 notify()
12 }
13
14 // user在程序里定义一个用户类型
15 type user struct {
16 name string
17 email string
18 }
19
20 // notify使用指针接收者实现了notifier接口
21 func (u *user) notify() {
22 fmt.Printf("Sending user email to %s\n",
23 u.name,
24 u.email)
25 }
26
27 // admin定义了程序里的管理员
28 type admin struct {
29 name string
30 email string
31 }
32
33 // notify使用指针接收者实现了notifier接口
34 func (a *admin) notify() {
35 fmt.Printf("Sending admin email to %s\n",
36 a.name,
37 a.email)
38 }
39
40 // main是应用程序的入口
41 func main() {
42 // 创建一个user值并传给sendNotification
43 bill := user{"Bill", "PI:EMAIL"}
44 sendNotification(&bill)
45
46 // 创建一个admin值并传给sendNotification
47 lisa := admin{"Lisa", "PI:EMAIL"}
48 sendNotification(&lisa)
49 }
50
51 // sendNotification接受一个实现了notifier接口的值
52 // 并发送通知
53 func sendNotification(n notifier) {
54 n.notify()
55 }
在代码清单5-48中，我们有了一个展示接口的多态行为的例子。在第10行，我们声明了和
之前代码清单中一样的 notifier 接口。之后第 15 行到第 25 行，我们声明了一个名为 user
的结构，并使用指针接收者实现了 notifier 接口。在第 28 行到第 38 行，我们声明了一个名
为 admin 的结构，用同样的形式实现了 notifier 接口。现在，有两个实体类型实现了
notifier接口。
在第 53 行中，我们再次声明了多态函数 sendNotification，这个函数接受一个实现了
notifier接口的值作为参数。既然任意一个实体类型都能实现该接口，那么这个函数可以针
对任意实体类型的值来执行notifier方法。因此，这个函数就能提供多态的行为，如代码清
单5-49所示。
代码清单5-49 listing48.go：第40行到第49行
40 // main是应用程序的入口
41 func main() {
42 // 创建一个user值并传给sendNotification
43 bill := user{"Bill", "PI:EMAIL"}
44 sendNotification(&bill)
45
46 // 创建一个admin值并传给sendNotification
47 lisa := admin{"Lisa", "PI:EMAIL"}
48 sendNotification(&lisa)
49 }
最后，可以在代码清单5-49 中看到这种多态的行为。main 函数的第43 行创建了一个user
类型的值，并在第44行将该值的地址传给了sendNotification函数。这最终会导致执行user
类型声明的notify方法。之后，在第47行和第48行，我们对admin类型的值做了同样的事
情。最终，因为 sendNotification 接受 notifier 类型的接口值，所以这个函数可以同时
执行user和admin实现的行为。
5.5 嵌入类型
Go 语言允许用户扩展或者修改已有类型的行为。这个功能对代码复用很重要，在修改已有
类型以符合新类型的时候也很重要。这个功能是通过嵌入类型（type embedding）完成的。嵌入类
型是将已有的类型直接声明在新的结构类型里。被嵌入的类型被称为新的外部类型的内部类型。
通过嵌入类型，与内部类型相关的标识符会提升到外部类型上。这些被提升的标识符就像直
接声明在外部类型里的标识符一样，也是外部类型的一部分。这样外部类型就组合了内部类型包
含的所有属性，并且可以添加新的字段和方法。外部类型也可以通过声明与内部类型标识符同名
的标识符来覆盖内部标识符的字段或者方法。这就是扩展或者修改已有类型的方法。
让我们通过一个示例程序来演示嵌入类型的基本用法，如代码清单5-50所示。
代码清单5-50 listing50.go
01 // 这个示例程序展示如何将一个类型嵌入另一个类型，以及
02 // 内部类型和外部类型之间的关系
03 package main
04
05 import (
06 "fmt"
07 )
08
09 // user在程序里定义一个用户类型
10 type user struct {
11 name string
12 email string
13 }
14
15 // notify实现了一个可以通过user类型值的指针
16 // 调用的方法
17 func (u *user) notify() {
18 fmt.Printf("Sending user email to %s\n",
19 u.name,
20 u.email)
21 }
22
23 // admin代表一个拥有权限的管理员用户
24 type admin struct {
25 user // 嵌入类型
26 level string
27 }
28
29 // main是应用程序的入口
30 func main() {
31 // 创建一个admin用户
32 ad := admin{
33 user: user{
34 name: "john smith",
35 email: "PI:EMAIL",
36 },
37 level: "super",
38 }
39
40 // 我们可以直接访问内部类型的方法
41 ad.user.notify()
42
43 // 内部类型的方法也被提升到外部类型
44 ad.notify()
45 }
在代码清单 5-50 中，我们的程序演示了如何嵌入一个类型，并访问嵌入类型的标识符。我
们从第10行和第24行中的两个结构类型的声明开始，如代码清单5-51所示。
代码清单5-51 listing50.go：第09行到第13行，第23行到第27行
09 // user在程序里定义一个用户类型
10 type user struct {
11 name string
12 email string
13 }
23 // admin代表一个拥有权限的管理员用户
24 type admin struct {
25 user // 嵌入类型
26 level string
27 }
在代码清单5-51 的第10 行，我们声明了一个名为user 的结构类型。在第24 行，我们声
明了另一个名为admin的结构类型。在声明admin类型的第25行，我们将user类型嵌入admin
类型里。要嵌入一个类型，只需要声明这个类型的名字就可以了。在第 26 行，我们声明了一个
名为level的字段。注意声明字段和嵌入类型在语法上的不同。
一旦我们将user类型嵌入admin，我们就可以说user是外部类型admin的内部类型。
有了内部类型和外部类型这两个概念，就能更容易地理解这两种类型之间的关系。
代码清单 5-52 展示了使用 user 类型的指针接收者声明名为 notify 的方法。这个方法只
是显示一行友好的信息，表示将邮件发给了特定的用户以及邮件地址。
代码清单5-52 listing50.go：第15行到第21行
15 // notify实现了一个可以通过user类型值的指针
16 // 调用的方法
17 func (u *user) notify() {
18 fmt.Printf("Sending user email to %s\n",
19 u.name,
20 u.email)
21 }
现在，让我们来看一下main函数，如代码清单5-53所示。
代码清单5-53 listing50.go：第30行到第45行
30 func main() {
31 // 创建一个admin用户
32 ad := admin{
33 user: user{
34 name: "john smith",
35 email: "PI:EMAIL",
36 },
37 level: "super",
38 }
39
40 // 我们可以直接访问内部类型的方法
41 ad.user.notify()
42
43 // 内部类型的方法也被提升到外部类型
44 ad.notify()
45 }
代码清单5-53中的main函数展示了嵌入类型背后的机制。在第32行，创建了一个admin
类型的值。内部类型的初始化是用结构字面量完成的。通过内部类型的名字可以访问内部类型，
108 第5章 Go语言的类型系统
如代码清单 5-54 所示。对外部类型来说，内部类型总是存在的。这就意味着，虽然没有指定内
部类型对应的字段名，还是可以使用内部类型的类型名，来访问到内部类型的值。
代码清单5-54 listing50.go：第40行到第41行
40 // 我们可以直接访问内部类型的方法
41 ad.user.notify()
在代码清单5-54中第41行，可以看到对notify方法的调用。这个调用是通过直接访问内
部类型user来完成的。这展示了内部类型是如何存在于外部类型内，并且总是可访问的。不过，