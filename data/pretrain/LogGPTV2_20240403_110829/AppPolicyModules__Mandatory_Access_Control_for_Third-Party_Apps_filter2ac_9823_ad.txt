### Introduction of New avTypes and Associated Privileges

Two new avTypes, `dolphin_app` and `dolphin_app_incognito`, are introduced, each associated with distinct privileges. Requirement Req4 (S→A), which focuses on protection from external threats, is supported by the same example: without an explicit rule granting permission, a process linked to an untrusted app is not authorized to access files associated with the `dolphin_app`.

### Mapping Android Permissions

The introduction of `appPolicyModules` enhances the definition and enforcement of security requirements for each app. However, in the previous section's approach, we assumed that developers must define the extension to the MAC policy, as they are familiar with the app's services and source code. Given the size of the developer community, many may be unfamiliar with SELinux syntax and semantics or may prefer not to use it, thus avoiding the introduction of strict security boundaries beyond those for untrusted apps. Additionally, there is a risk due to the variety of system policy versions on devices, requiring compatibility with the `appPolicyModule`.

Expert developers, responsible for critical apps such as secure encrypted communication, key management, or financial and banking services, are likely to be the primary users of the MAC model. This community, though small, plays a crucial role and can overcome the challenges of using `appPolicyModules`. The deployment of policy modularity also opens up other services, including the automatic generation of `appPolicyModules` to enforce a stricter model for managing Android permissions, addressing the identified issues.

### Workflow and Security Requirements

In the app development workflow, developers are already familiar with defining security requirements in the `AndroidManifest.xml` using the `uses-permission` tag. For example, to access the user’s current location, the app must explicitly request the `android.permission-group.LOCATION` permission, which corresponds to both OS-level actions and SELinux-level `avPermissions` (e.g., `open`, `read` on files and directories). The system provides high-level and low-level representations of the required privileges, but they are not integrated. Without policy modularity, the app is associated with the untrusted app domain, which has broad permissions, relying only on Android permissions for protection.

Integrating security policies at the Android permission and MAC levels offers more robust enforcement. This can be achieved by introducing a mechanism that bridges the gap between different levels. The mechanism analyzes the high-level policy (permissions requested in the `AndroidManifest.xml`) and automatically generates an `appPolicyModule` that maps these permissions to corresponding SELinux statements. The generator builds a logical model of the `appPolicyModule` structure and produces the concrete implementation, verifying that all security restrictions are satisfied.

### Mapping Between Policy Levels

A necessary step is identifying a mapping between policies at different levels. The Android Permission Framework contains over 200 permissions, most of which have a predefined mapping to a dedicated SELinux domain in the system policy. However, some resources (e.g., downloads, calendar, media content) are associated with a single platform app data file type. We expect this to be manageable with a revision of the `dolphin` module.

Some Android permissions can only be partially supported due to limitations in the security mechanisms provided by internal components (e.g., SQLite). Nonetheless, it is possible to capture most Android permissions precisely, leading to a significant reduction in the size of the MAC domain compared to the untrusted app domain. Figure 2 shows an example of the `appPolicyModule` generated for the Dolphin browser.

### Implementation

The work by Smalley et al. [15] forms the basis for our implementation. We introduced extensions to manage `appPolicyModules` and provide a description of the challenges in enabling their use in Android. The system is implemented with an open-source license, extending AOSP version 4.4.4, with plans to adapt to Android L upon its release.

#### Challenges in Integrating appPolicyModules

**SELinux Libraries:**
- **libselinux:** Modified to include features needed by `libsemanage`, such as `selinux-config.c`.
- **checkpolicy Tool:** Adapted to build binary policy at version 26.
- **libsemanage:** Adapted to meet new requirements, with some functions like `genhomedircon` disabled.
- **semodule Executable:** Extended to interact with the modified `libsemanage` library.

**Android Installation Process:**
- **PackageManagerService:** Provides APIs for app installation, uninstallation, and updates. It assigns SELinux labels to apps based on the `mac_permissions.xml` file.
- **PolicyModuleInstallReceiver:** A new service triggered by an Intent to manage the installation workflow of `appPolicyModules`.
  1. Install the policy module, update the SELinux policy, and check its correctness.
  2. Update the `seapp_contexts` file to label app processes and package directories.
  3. Update the `mac_permissions.xml` file to retrieve the correct SELinux type.

**Performance:**
- **Installation Time:** Evaluated the performance overhead of our approach. Two methods were developed: one consistent with SELinux in Fedora, which creates a new policy version and re-installs all modules, and another incremental approach.

### Conclusion

The integration of `appPolicyModules` in Android improves the enforcement of security policies by reducing the privileges granted to apps, aligning with the principle of least privilege. The implementation addresses the challenges of integrating these modules into the existing SELinux and Android frameworks, ensuring better security and performance.