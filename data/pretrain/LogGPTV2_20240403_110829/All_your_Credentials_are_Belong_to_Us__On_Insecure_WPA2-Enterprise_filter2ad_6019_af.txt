### Assisted Manual Mode of Rejection and Server Name Verification

The assisted manual mode of rejection (α = AM) can be equally secure. Similarly, if a user faithfully and correctly performs the necessary string comparison, we assume that manually checking server names (γ = M) can be as secure as doing so programmatically (γ = P), even though the latter is more user-friendly. Proper support for Unicode and wildcard characters in name matching can be challenging, even when done programmatically [17, 19, 52]. In the most direct form of γ = M, where a human is required to perform the string matching, it might be susceptible to script spoofing attacks through confusing homoglyphs (e.g., with Cyrillic characters). This susceptibility depends on the font of the UI and how the strings are preprocessed for display, and can potentially be mitigated by showing encoded derivatives or hash digests of the strings instead. To keep the framework generic, we do not enumerate or compare such details in how server name matching can be enforced.

### Different Shades of (AM, Sp., M, _)

Some operating systems (OSs) may show the hash digests (also known as fingerprints or thumbprints) of the server certificate computed using various hash algorithms. Configuration instructions might request users to verify some or all of these hash digests. Since each hash digest is computed by the OS over the entire server certificate, including the names and signature, manually matching the hash digest against an expected value fits our definition of α = AM ∧ β = Sp. ∧ γ = M. The rejection of invalid server certificates is performed manually with some programmatic assistance (computing the hash), the trust anchor is specific (directly at the server certificate level), and the server name is also checked manually. Thus, matching the hash digests can be seen as a relaxed version of (AM, Sp., M, _), where instead of an exact match of the validity, trust anchor, and name of the server certificate, a relaxed matching logic (inexact due to potential hash collisions) is used. To keep our framework simple, we do not enumerate all possible combinations of hash algorithms. Instead, we allow the configurations of (AM, Sp., M, _) to be further qualified by the hash digests being matched, for instance, SHA1(AM, Sp., M, _) if only a SHA1 digest is being matched, and SHA1&SHA256(AM, Sp., M, _) if both SHA1 and SHA256 digests are being matched. The possible combinations of hash algorithms and choice of phase-2 method vary across versions of mainstream OSs.

### Configurations Supported by the UI of Different Operating Systems

The abstract security labels of configurations supported by the UIs of Android, Chrome OS, Windows 10, Windows 7, and macOS & iOS are given as Hasse diagrams in Figures B2a, B2b, B1a, B1b, and B1c, respectively. At the time of testing, configurations supported by Android 6- are also directly configurable on Android 7+. For Windows 10 and 7, configurations in the Simple UI with α = AM or γ = M are not directly configurable in the Traditional UI but can be implicitly inherited when fallback occurs (Section 4.3.2). Configurations in the Simple UI of Windows 10 and 7 with α = AM ∧ γ = M are directly configurable in the Traditional UI. Currently, the best configuration of Windows 10 Simple UI (AM, Sp., M, Ob.) is implicitly qualified by SHA1(), and the best configuration of macOS & iOS (AM, Sp., M, Cl.) can be further qualified by the combination of hash digests being checked (see Appendix A.4 for details). Since the experiments for determining the supported configurations were conducted in 2020, new OS updates might not exactly follow these diagrams (e.g., fixing CVE-2020-27055 would imply Android no longer supports (P, Sp., N, _)). Additionally, the use of pre-configured profiles, for example, through eduroam CAT (Section 6), can sometimes unlock additional configurations that are not directly configurable via the UIs.

### Evaluating Configuration UI of Linux Distributions

For Linux, there are many distributions and supplicant implementations with different GUIs available, and some users might prefer to write configuration files directly with a text editor, making it difficult to have a general discussion covering all cases. Collectively, Linux owns a tiny share of the consumer market, thus most schools do not offer technical support to Linux users. Based on the limited number of configuration instructions for Linux that we have found (Section 5), the most popular Wi-Fi configuration GUI on Linux seems to be `nm-connection-editor`, which is part of `network-manager-applet`, a GTK front end of NetworkManager that can run on various desktop environments (e.g., Xfce, GNOME, Budgie, etc.). We refrain from a detailed discussion on the configurations supported by `nm-connection-editor` due to space constraints, but two points are worth highlighting. First, just like Android 6- and Chrome OS, old versions of `nm-connection-editor` do not have the input box for users to enter the expected hostname, which still affects certain long-term support distributions in production environments (e.g., Ubuntu 16.04 LTS). Second, although this input box was introduced since version 1.8.2 (released in July 2017), for all versions up to and including 1.18.0 (the most recent one at the time of writing), it has always been an optional input that users can simply ignore without receiving any warnings or error messages from the UI. Consequently, when it comes to WPA2-Enterprise connections, many Linux users might also be susceptible to ET attacks.

### Samples of Misguided Instructions

Here are a few samples of misguided instructions. Depending on the targeted OS, all of these instructions are mapped to a security label of either (N, n/a, N, Ob.) or (N, n/a, N, Cl.). In many cases, instructions focus only on benign scenarios rather than educating users on proper exception handling. Sometimes, the instructions casually dismiss the threats due to insecure configurations, with no regard for the possibility of ET attacks. The iOS examples below show evidence of broken certificate validity alerts leading to bad instructions and compromising user security. One example below apparently confused the serial number with the hash digest (fingerprint) of the certificate.

- **.edu, campus Wi-Fi on Android:**
  - "CA certificate - Don’t validate (the network is providing the certificate. Ignore messages about the connection not being private; you are connecting to a known, trusted network)"
  - "For CA Certificate: Click the drop-down and choose 'Do not Validate'. Your connection WILL BE secure!"
  - "For CA certificate leave as N/A. Note: Android 9/Pie users will see a notice indicating the connection is not secure. This may be ignored as a certificate is provided by the wireless controllers."

- **.edu, campus Wi-Fi on Windows 10:**
  - "Windows will notify you that it can’t verify the server’s identity. It is safe to click connect."
  - "Joining the Wireless for the first time will present a certificate warning that reads as rather benign on Apple iOS, Mac OS X, and Android devices, but worded in a very dire manner for Windows clients. The key is to connect. Accept the certificate and log in using your eID and password."

- **.edu, eduroam on macOS and iOS:**
  - "Next you will see a Certificate, press 'University provides' to accept the certificate even though it is unverified. This certificate allows you to connect and has been verified."

- **.edu, campus Wi-Fi on iOS:**
  - "Step 5: Select 'Trust' in the upper right-hand corner for the Certificate. Note: iOS will think this certificate is not trusted – it is ok to trust this!"

- **.sg, campus Wi-Fi on iOS:**
  - "Verify the certificate server ends in nus.edu.sg and the certificate is from thawte Primary Root CA. Don’t be alarmed if the page shows 'Certificate Not Verified.' Accept the certificate and proceed."

- **.za, eduroam on iOS:**
  - "When asked to accept the certificate, tap 'View Certificate Details' then 'More Details.' Check that the certificate was issued by DigiCert and that the serial number is 0D."

### Findings on Weak CAT Profiles

Tables E1 to E3 show the findings discussed in Section 6.1 to 6.3. The names of the Identity Providers (IdPs) have been redacted to protect the corresponding Technical and Educational Institutions (TEIs) from potential attacks.

**Table E1: Vulnerable Chrome OS CAT profiles due to γ = N**

| IdP (ISO 3166-1-Alpha-2) | Anchoring CA(s) |
|--------------------------|-----------------|
| (AU)                     | VeriSign Class 3 Public Primary CA - G5 |
| (UK)                     | QuoVadis Root CA 2 G3 |
| (CA)                     | Entrust Root CA - G2 |
| (IE)                     | DigiCert Assured ID Root CA |
| (IT)                     | DigiCert Assured ID Root CA |
| (AT)                     | Comodo AAA Certificate Services |
| (FR)                     | DigiCert High Assurance EV Root CA |
| (TR)                     | Go Daddy Class 2 CA |
| (US)                     | GlobalSign Root CA - R3 |

**Table E2: CAT profiles with unspecific server names**

| IdP (ISO 3166-1-Alpha-2) | Server Matching | Anchoring CA(s) |
|--------------------------|-----------------|-----------------|
| (GR)†                    | "Certificate"   | DigiCert Assured ID Root CA |
| (US)‡                    | "radius1"       | GlobalSign Root CA |
| (AU)‡                    | "cit-ias-ml1"   | VeriSign Class 3 Public Primary CA - G5 |

**Table E3: Vulnerable Chrome OS CAT profiles due to permissive hostname constraints**

| IdP (ISO 3166-1-Alpha-2) | Hostname Matching | Anchoring CA(s) |
|--------------------------|-------------------|-----------------|
| (BE)†                    | t.be              | DigiCert Assured ID Root CA |
| (NO)                     | .no               | Comodo AAA Certificate Services |
| (FR)                     | .fr               | DigiCert Assured ID Root CA |
| (UK)                     | .ac.uk            | QuoVadis Root CA 2 G3 |
| (AT)                     | .at               | Comodo AAA Certificate Services |

### Statistics of the Eduroam IdP Servers Measured

Table F4 shows the top 20 TLDs of the 3637 eduroam domains that we successfully measured during the data collection discussed in Section 7.

**Table F4: Top 20 TLDs of eduroam domains measured**

| TLD | Count | TLD | Count | TLD | Count | TLD | Count |
|-----|-------|-----|-------|-----|-------|-----|-------|
| edu | 602   | kr  | 277   | uk  | 261   | jp  | 242   |
| fr  | 212   | de  | 184   | hr  | 145   | nl  | 142   |
| es  | 133   | cn  | 129   | be  | 72    | ch  | 66    |
| cz  | 65    | pt  | 59    | at  | 46    | ca  | 75    |
| si  | 119   | it  | 107   | br  | 80    | gr  | 78    |

### Regional Statistics of Instructions Collected

Table G5 shows the top 10 regions with the most number of TEIs having applicable instructions, and Table G6 shows the top 10 regions that contributed the most number of instructions collected and labels assigned in Section 5. Each TEI might have multiple instructions to cover all of its supported OSs. Each instruction can lead to multiple labels being assigned, depending on the OSs it covers. Tables G7 to G9 show the majorities of labels assigned for the mainstream OSs considered, broken down based on each of their own top 10 contributing regions. We refrain from showing the table of regional majorities for Chrome OS for the sake of space. Most of its campus Wi-Fi instructions came from US schools, and most of its eduroam instructions came from European schools recommending the use of eduroam CAT, thus in both cases, the majorities for Chrome OS basically follow the results shown in Table 3.

**Table G5: Top 10 regions with the highest number of TEIs having applicable instructions**

| ISO 3166-1-Alpha-2 | No. of TEIs | ISO 3166-1-Alpha-2 | No. of TEIs |
|--------------------|-------------|--------------------|-------------|
| US                 | 845         | KR                 | 94          |
| DE                 | 163         | FR                 | 69          |
| GB                 | 130         | IT                 | 66          |
| JP                 | 115         | CA                 | 66          |
| CN                 | 108         | TW                 | 59          |

**Table G6: Top 10 regions with the highest number of instructions/labels**

| Campus Wi-Fi | No. of | ISO 3166-1-Alpha-2 | Instructions | eduroam | ISO 3166-1-Alpha-2 | No. of | Instructions |
|--------------|--------|--------------------|--------------|---------|--------------------|--------|--------------|
| US           | 1907   | US                 | 823          | DE      | 612                |        |              |
| JP           | 242    | GB                 | 405          | CA      | 195                |        |              |
| KR           | 240    | FR                 | 193          | IT      | 125                |        |              |
| CA           | 197    | AU                 | 101          | AT      | 85                 |        |              |
| TW           | 166    | TH                 | 77           |         |                    |        |              |
| DE           | 113    | HK                 | 71           |         |                    |        |              |
| IT           | 103    | CN                 | 125          |         |                    |        |              |
| TH           | 77     |                    |              |         |                    |        |              |
| HK           | 71     |                    |              |         |                    |        |              |
| CN           | 60     |                    |              |         |                    |        |              |

**Campus Wi-Fi | No. of | ISO 3166-1-Alpha-2 | Labels**

| US  | 3689 | KR  | 494  | JP  | 383  | CA  | 298  | TW  | 267  | DE  | 203  | IT  | 174  | TH  | 147  | HK  | 107  | CN  | 104  |

**eduroam | ISO 3166-1-Alpha-2 | No. of | Labels**

| US  | 2030 | DE  | 1052 | GB  | 817  | CA  | 507  | FR  | 464  | JP  | 419  | CN  | 383  | IT  | 343  | AU  | 214  | AT  | 182  |