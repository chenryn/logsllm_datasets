that the assisted manual mode of rejection (α = AM) can be just as
secure. Similarly, given a user who faithfully and correctly carry out
the necessary string comparison, we assume that checking server-
names manually (γ = M) can be as secure as programmatically
(γ = P), even though the latter one might be more user friendly. We
reckon that proper support for Unicode and wildcard characters in
name matching can be tricky even when it is done programmat-
ically [17, 19, 52], and in the most direct form of γ = M where a
human is required to perform the string matching, it might be sus-
ceptible to script spoofing attacks through confusing homoglyphs
(e.g., with Cyrillic characters), though this depends on the font of
the UI and how the strings are preprocessed for display, and can
potentially be ameliorated by showing encoded derivatives or hash
digests of the strings instead. In the spirit of keeping the framework
generic, we do not enumerate or compare such details in how server
name matching can be enforced.
A.4 Different shades of (AM, Sp., M, _)
Some OSs might show the hash digests (also known as the finger-
prints or thumbprints) of the server certificate computed using var-
ious hash algorithms, and configuration instructions might request
the users to verify some or all of them. Since each of the hash digests
is computed by the OS over the entire server certificate including
the names and signature, manually matching the hash digest against
an expected values fits our definition of α = AM ∧ β = Sp. ∧ γ = M,
as the rejection of invalid server certificates is performed manually
with some programmatic assistance (computing the hash), the trust
anchor is specific (directly at the server certificate level), and the
server name is also checked manually. Thus, matching the hash
digests can be seen as a relaxed version of (AM, Sp., M, _), where
instead of an exact match of the validity, trust anchor and name
of the server certificate, a relaxed matching logic (inexact due to
potential hash collision) is being used. To keep our framework
simple, we do not enumerate all possible combinations of hash al-
gorithms. Instead, we allow the configurations of (AM, Sp., M, _) to
be qualified further by the hash digests being matched, for instance,
SHA1(AM, Sp., M, _) if only a SHA1 digest is being matched, and
SHA1&SHA256(AM, Sp., M, _) if both SHA1 and SHA256 digests are
being matched. The possible combinations of hash algorithms and
choice of phase-2 method vary across versions of mainstream OSs.
B CONFIGURATIONS SUPPORTED BY THE UI
OF DIFFERENT OPERATING SYSTEMS
The abstract security labels of configurations supported by the UIs
of Android, Chrome OS, Windows 10, Windows 7, and macOS &
iOS are given as Hasse diagrams in Figures B2a, B2b, B1a, B1b, and
B1c, respectively. At the time of testing, configurations supported
by Android 6- are also directly configurable on Android 7+. For
Windows 10 and 7, configurations in Simple UI with α = AM or
γ = M are not directly configurable in the Traditional UI, but can be
implicitly inherited when fall back happens (Section 4.3.2). Config-
urations in the Simple UI of Windows 10 and 7 with α (cid:44) AM∧γ (cid:44) M
are directly configurable in the Traditional UI. Currently, the best
configuration of Windows 10 Simple UI (AM, Sp., M, Ob.) is implic-
itly qualified by SHA1(), and the best configuration of macOS &
iOS (AM, Sp., M, Cl.) can be further qualified by the combination of
hash digests being checked (see Appendix A.4 for details). Since the
experiments for determining the supported configurations were
conducted in 2020, new OS updates might not exactly follow these
diagrams (e.g., fixing CVE-2020-27055 would imply Android no
longer supports (P, Sp., N, _)). Also, the use of pre-configured pro-
files, for example through eduroam CAT (Section 6), can sometimes
unlock additional configurations that are not directly configurable
via the UIs.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1114(a)
(b)
(c)
Figure B1: Possible configurations on Windows 10, Windows 7 and macOS & iOS
do not have the input box for user to enter the expected hostname,
which still affects certain long-term support distributions in produc-
tion environments (e.g., Ubuntu 16.04 LTS). Second, although that
input box was introduced since version 1.8.2 (released in July 2017),
for all versions up to and including 1.18.0 (the most recent one at
the time of writing), it has always been an optional input that users
can simply ignore, without getting any warnings or error messages
from the UI. Consequently, when it comes to WPA2-Enterprise
connections, it is possible that many Linux users might also be
susceptible to ET attacks.
D SAMPLES OF MISGUIDED INSTRUCTIONS
Here we give a few samples of misguided instructions. Depending
on which OS they are targeting, all of these instructions are mapped
to a security label of either (N, n/a, N, Ob.) or (N, n/a, N, Cl.). In
many cases, instructions are focused on only benign scenarios,
instead of educating users proper exception handling. Sometimes
the instruction also casually dismiss the threats due to insecure
configurations, with absolutely no regards to the possibility of ET
attacks. The iOS examples below show evidence of the broken
certificate validity alert leads to bad instructions and hurts the
security of its users. One example below apparently confused serial
number with the hash digest (fingerprint) of certificate.
.edu, campus Wi-Fi on Android: “ CA certificate - Don’t validate (the network
is providing the certificate. Ignore messages about the connection not being private; you
are connecting to a known, trusted network) ”
.edu, campus Wi-Fi on Android: “ For CA Certificate: Click the drop-
down and choose “Do not Validate”. Your connection WILL BE secure! ”
.edu, campus Wi-Fi on Android: “ For CA certificate leave as N/A. Note:
Android 9/Pie users will see a notice indicating the connection is not secure. This may be
ignored as a certificate is provided by the wireless controllers. ”
.edu, campus Wi-Fi on Windows 10: “ Windows will notify you that it
can’t verify the server’s identity. It is safe to click connect. ”
.edu, campus Wi-Fi on Windows 10: “ Joining the
Wireless
for the first time will present a certificate warning that reads as rather benign on Apple
iOS, Mac OS X and Android devices, but worded in a very dire manner for Windows
clients. The key is to connect. Accept the certificate and log in using your
eID and
password. ”
(a)
(b)
Figure B2: Possible configurations on Android, Chrome OS
C EVALUATING CONFIGURATION UI OF
LINUX DISTRIBUTIONS
For Linux, there are many distributions and supplicant implemen-
tations with different GUIs available, and some users might pre-
fer to write configuration files directly with a text editor, so it is
difficult to have a general discussion covering all cases. Collec-
tively Linux owns a tiny share of the consumer market, thus most
schools do not offer technical support to Linux users. Based on
the limited number of configuration instructions for Linux that we
have found (Section 5), the most popular Wi-Fi configuration GUI
on Linux seems to be nm-connection-editor, which is part of
network-manager-applet, a GTK front end of NetworkManager
that can run on various desktop environments (e.g., Xfce, GNOME,
Budgie, etc.). We refrain from a detailed discussion on the configura-
tions supported by nm-connection-editor due to space constraint,
however, there are two points worth highlighting. First, just like An-
droid 6- and Chrome OS, old versions of nm-connection-editor
Windows 10 Traditional UIWindows 10 Simple UI(P, Sys., N, Ob.)(N, n/a, N, Ob.)(P, Sp., P, Ob.)(P, Sys., P, Ob.)(P, Sp., N, Ob.)(N, n/a, M, Ob.)(AM, Sp., M, Ob.)Windows 7 Traditional UIWindows 7 Simple UI(P, Sys., M, Ob.)(P, Sys., N, Ob.)(N, n/a, N, Ob.)(P, Sp., P, Ob.)(P, Sys., P, Ob.)(AM, Sp., N, Ob.)(P, Sp., N, Ob.)(AM, Sp., M, Ob.)macOS & iOS UI(AM, Sp., M, Cl.)(AM, Sys., M, Cl.)(AM, Sp., N, Cl.)(AM, Sys., N, Cl.)(N, n/a, M, Cl.)(N, n/a, N, Cl.)Android 7+ UIAndroid 6- UI(P, Sp., P, Ob.)(P, Sys., P, Ob.)(P, Sp., P, Cl.)(P, Sp., N, Ob.)(P, Sys., P, Cl.)(P, Sp., N, Cl.)(N, n/a, N, Cl.)(N, n/a, N, Ob.)Chrome OS UI(P, Sys., N, Ob.)(N, n/a, N, Ob.)(P, Sys., N, Cl.)(N, n/a, N, Cl.)(P, Sp., N, Ob.)(P, Sp., N, Cl.)Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1115.edu, eduroam on macOS and iOS “ Next you will see a Certificate, press
University provides
Accept to accept the certificate even though it is unverified.
this certificate to allow you to connect and it has been verified. ”
.edu, campus Wi-Fi on iOS: “ Step 5: Select ‘Trust’ in the upper right
hand corner for the Certificate. Note: iOS will think this certificate is not trusted – it is
ok to trust this! ”
.sg, campus Wi-Fi on iOS: “ Verify the certificate server ends in nus.edu.sg
and the certificate is from thawte Primary Root CA. Don’t be alarmed if the page shows
certificate Not Verified. Accept the certificate and proceed. ”
.za, eduroam on iOS: “ When asked to accept the certificate, tap View Cer-
tificate Details then More Details. Check that the certificate was issued by DigiCert and
that the serial number is 0
D ”
E FINDINGS ON WEAK CAT PROFILES
Table E1 to E3 show the findings discussed in Section 6.1 to 6.3. The
names of the IdP have been redacted to protect the corresponding
TEIs from potential attacks.
Table E1: Vulnerable Chrome OS CAT profiles due to γ = N
IdP (ISO 3166-1-Alpha-2)
Anchoring CA(s)
VeriSign Class 3 Public Primary CA - G5
(AU)
QuoVadis Root CA 2 G3
(UK) QuoVadis Root CA 2 G3
(CA) Entrust Root CA - G2
DigiCert Assured ID Root CA
(IE)
(IT) DigiCert Assured ID Root CA
(AT)
Comodo AAA Certificate Services
DigiCert High Assurance EV Root CA
DigiCert Assured ID Root CA
(FR) DigiCert Assured ID Root CA
(TR) Go Daddy Class 2 CA
(UK) QuoVadis Root CA 2 G3
(US) GlobalSign Root CA - R3
(US) DigiCert High Assurance EV Root CA
(FR) Comodo AAA Certificate Services
Table E2: CAT profiles with unspecific server names
IdP (ISO 3166-1-Alpha-2)
(GR) †
(US) ‡
(AU) ‡
matching
“
Certificate”
“radius1”
“cit-ias-ml1”
Anchoring CA(s)
Server
DigiCert Assured ID Root CA
GlobalSign Root CA
VeriSign Class 3 Public Primary CA - G5
QuoVadis Root CA 2 G3
QuoVadis Root CA 2
† Applicable to Chrome OS, Windows 10, macOS, and Android 10
‡ Applicable to Windows 10, macOS, and Android 10
Table E3: Vulnerable Chrome OS CAT profiles due to permis-
sive hostname constraints
IdP (ISO 3166-1-Alpha2)
matching Anchoring CA(s)
(BE) † t.be
.no
(NO)
.fr
(FR)
.ac.uk
(UK)
(AT)
.at
DigiCert Assured ID Root CA
Comodo AAA Certificate Services
DigiCert Assured ID Root CA
QuoVadis Root CA 2 G3
Comodo AAA Certificate Services
† 3 profiles under the same IdP
F STATISTICS OF THE EDUROAM IDP
SERVERS MEASURED
Table F4 shows the top 20 TLDs of the 3637 eduroam domains that
we successfully measured during the data collection discussed in
Section 7.
Table F4: Top 20 TLDs of eduroam domains measured
TLD Count TLD Count TLD Count TLD Count
edu
kr
uk
jp
fr
602
277
261
242
212
119
107
80
78
75
184
145
142
133
129
be
ch
cz
pt
at
de
hr
nl
es
cn
72
66
65
59
46
ca
si
it
br
gr
G REGIONAL STATISTICS OF INSTRUCTIONS
COLLECTED
Table G5 shows the top 10 regions with the most number of TEIs
having applicable instructions, and Table G6 shows the top 10
regions that contributed the most number of instructions collected
and labels assigned in Section 5. Each TEI might have multiple
instructions, to cover all of its supported OSs. Each instruction can
lead to multiple labels being assigned, depending on the OSs that it
covers. Table G7 to G9 shows the majorities of labels assigned for
the mainstream OSs considered, broken down based on each of their
own top 10 contributing regions. We refrain from showing the table
of regional majorities for Chrome OS for the sake of space. Most of
its campus Wi-Fi instructions came from US schools, and most of its
eduroam instructions came from European schools recommending
the use of eduroam CAT, thus in both cases, the majorities for
Chrome OS basically follow the results shown in Table 3.
Table G5: Top 10 regions with the highest number of TEIs
having applicable instructions
ISO 3166- 1-Alpha-2 No. of TEIs
ISO 3166- 1-Alpha-2 No. of TEIs
US
DE
GB
JP
CN
845
163
130
115
108
KR
FR
IT
CA
TW
94
69
66
66
59
Table G6: Top 10 regions with the highest number of instruc-
tions/labels
Campus Wi-Fi
No. of
ISO 3166-
1-Alpha-2
Instructions
eduroam
ISO 3166-
1-Alpha-2
No. of
Instructions
US
JP
KR
CA
TW
DE
IT
TH
HK
CN
1907
242
240
197
166
113
103
77
71
60
US
DE
GB
CA
FR
JP
CN
IT
AU
AT
823
612
405
195
193
162
125
125
101
85
Campus Wi-Fi
No. of
ISO 3166-
Labels
1-Alpha-2
3689
494
383
298
267
203
174
147
107
104
US
KR
JP
CA
TW
CN
DE
IT
TH
HK
eduroam
ISO 3166-
1-Alpha-2
No. of
Labels
2030
1052
817
507
464
419
383
343
214
182
US
DE