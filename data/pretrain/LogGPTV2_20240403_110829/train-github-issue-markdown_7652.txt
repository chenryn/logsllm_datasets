When namespaces merge, any members exported by one namespace declaration are
in scope in all the merged declarations. Ambient external modules like
`declare module "foo" { }` can merge too. It seems natural then that exported
declarations are in scope in merged external modules too. But external modules
have additional ways of exporting their members, via export specifiers, export
default, and `export *`. Should export specifiers contribute to the shared
export scope as well?
    declare module 'm' {
         export interface I { }
         interface J { }
         interface K { }
         export { K };
         interface L { }
         export { L as L2 };
         export { P } from 'other';
    }
    declare module 'm' {
         export function f(): I; // in scope because of export modifier
         export function g(): J; // not in scope (lacks export modifier)
         export function h(): K; // should this be in scope?
         export function h(): L; // should this be in scope?
         export function h(): P; // should this be in scope?
    }
    declare module 'other' {
         export interface P { }
    }
Today only J is in scope.
The key difference between export modifiers and export specifiers is that when
an export modifier is used, the exporting entity is guaranteed to have a
corresponding local entity with the same name. This is not true of export
specifiers, as they can export stuff that is not declared locally, or they can
export using a different name.
I can think of 4 options. I've listed them in order from smallest export scope
to largest export scope:
  1. Shared export scopes are not created at all for external modules. This is a pretty harsh breaking change.
  2. Only an export modifier (implicit or explicit) can put the name into a shared export scope, but an export specifier cannot. This is the current behavior. It breaks a nice user intuition that using the export modifier is equivalent to leaving it out and writing an export specifier.
  3. An export specifier that exports a locally declared module member with the same name is also in scope and treated just like an export modifier. This sounds like an oddly specific rule. But it maintains the user intuition that option 2 breaks, and when you think about it, it seems pretty natural I think. This would mean that in the above example, I and K are in scope.
  4. All exported entities in a module are in the shared export scope, no matter how they were exported. This is inconsistent with ES6 export semantics.
I think 1 and 4 are not viable options. 3 seems ideal, but I could also see a
case for 2. How about it?