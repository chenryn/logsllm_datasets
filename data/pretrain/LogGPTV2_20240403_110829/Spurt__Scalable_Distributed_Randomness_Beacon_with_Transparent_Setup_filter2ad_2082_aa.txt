title:Spurt: Scalable Distributed Randomness Beacon with Transparent Setup
author:Sourav Das and
Vinith Krishnan and
Irene Miriam Isaac and
Ling Ren
0
8
5
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
SPURT: Scalable Distributed Randomness Beacon
with Transparent Setup
Sourav Das, Vinith Krishnan, Irene Miriam Isaac and Ling Ren
University of Illinois at Urbana-Champaign
{souravd2, vinithk, irenemi2, renling}@illinois.edu
Abstract—Having shared access to high-quality random num-
bers is essential in many important applications. Yet, existing
constructions of distributed random beacons still have limitations
such as imperfect security guarantees, strong setup or network
assumptions, or high costs. In this paper, we present SPURT, an
efﬁcient distributed randomness beacon protocol that does not
require any trusted or expensive setup and is secure against a
malicious adversary that controls up to one-third of the nodes in
a partially synchronous network. We formally prove that each
output of SPURT is unpredictable, bias-resistant, and publicly
veriﬁable. SPURT has an amortized total communication cost of
O(λn2) per beacon output where λ is the security parameter.
While designing SPURT, we also design a publicly veriﬁable
secret sharing (PVSS) scheme whose security is based on the
standard Decisional Bilinear Difﬁe-Hellman assumption and does
not require a Random Oracle. We implement SPURT and evaluate
it using a network of up to 128 nodes running in geographically
distributed AWS instances. Our evaluation shows that SPURT can
produce about 84 beacon outputs per minute in a network of 32
nodes and is comparable to systems with stronger assumptions
or weaker security.
I. INTRODUCTION
A reliable source of a continuous stream of shared ran-
domness, also known as a random beacon,
is crucial for
many distributed protocols. Applications of random beacon
include leader election in proof-of-stake based blockchains [4],
[40], blockchain sharding [7], [52], [55], [73], scaling smart
contracts [31], annonymous communications [5], [41], [70],
[71], solving consensus under asynchrony [36], anonymous
browsing [33], [39], [42], publicly auditable auctions and
lottery [18], electronic voting [6], cryptographic parameter
generations [9], [53].
The simplest approach to achieve a random beacon is to
rely on a single node or organization such as NIST random
beacon [50] or Random.org [45]. This is undesirable due to
security incidents such as a backdoor in the Dual elliptic curve
pseudorandom number generator [12] and 1969 US conscrip-
tion lottery [68]. Such an approach is also unreasonable in
systems such as blockchains, where using a trusted party for
randomness generation defeats the blockchain’s main objective
of avoiding central authorities.
A natural approach to remove the trusted third party is
to decentralize the process of generating randomness among
many nodes using a distributed protocol. As long as a large
fraction (majority or supermajority) of nodes faithfully follow
the protocol, the protocol will produce the shared randomness
with desired properties. Brieﬂy, any randomness beacon proto-
col should be available and each beacon output should be un-
predictable, bias-resistant and publicly veriﬁable. Informally,
unpredictability requires that no one can compute any non-
trivial information about future beacon outputs, bias-resistance
requires that beacon outputs are independently sampled from
a uniform distribution, and public veriﬁability enables external
clients to validate the correctness of beacon outputs.
Existing works. Starting from Blum’s two-node coin tossing
protocol [15], a long line of works have looked into the
problem of generating shared randomness under different
system models [2], [8], [15], [21], [24], [25], [32], [40], [51],
[58], [65], [69]. Due to its use in practical blockchain systems,
which typically involves a large number of nodes [31], [52],
[55], [73], recent randomness beacon protocols put an em-
phasis on scalability. Speciﬁcally, it is desirable to construct
a beacon protocol that has low latency, low communication
complexity, and low computation cost per node per beacon
output. Also, since many of these protocols are decentralized
and seek to eliminate trusted entities, it is preferable that the
beacon protocol does not rely on a trusted setup.
Despite decades of research and many breakthroughs, exist-
ing distributed randomness beacon protocols have scalability
issues, require strong cryptographic or network assumptions,
or do not provide the full suite of desired properties.
Notably, many protocols [2], [21], [23] assume an initial
trusted setup, where a trusted party generates private keys for
all nodes. Security of such protocols relies crucially on the
trusted party’s ability and willingness to keep these keys safe.
Some protocols replace the trusted setup with a Distributed
Key Generation (DKG) procedure [29], [37], [69]. However,
DKG comes with a high initial setup cost. Another limitation
of using DKG, as observed in [13], is the inability/inefﬁciency
to replace nodes. Whenever a participating node is to be
replaced, we need to rerun the expensive DKG procedure.
Thus, DKG-based solutions such as [2], [22], [23], [37]
are efﬁcient when nodes are ﬁxed, but are not suitable in
applications where nodes change frequently (e.g., proof-of-
stake [40], [51]).
Only recently, the community has started to explore dis-
tributed random beacons without a trusted setup. These proto-
cols currently either have poor efﬁciency and/or do not provide
full security. For example, protocols such as [25], [51] have at
least O(λn4) communication cost per beacon output, where
λ is the security parameter and n is the number of nodes
© 2022, Sourav Das. Under license to IEEE.
DOI 10.1109/SP46214.2022.00080
12502
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:22 UTC from IEEE Xplore.  Restrictions apply. 
Table I: Comparison of existing randomness beacon protocol.
l
e
d
o
m
k
r
o
w
t
e
N
Cachin et al. [21]
RandHerd [69]∗‡
Dﬁnity [23]
Drand [2]
HERB [29]
Algorand [40]‡
Proof-of-Work [58]
Ouroboros [51]
Scrape [25]
Hydrand [65]
RandRunner [64]
GRandPiper [13]
BRandPiper [13]
partial sync.
async.
async.
sync.
sync.
partial sync.
sync.
sync.
sync.
sync.
sync.
sync.
sync.
e
c
n
a
r
e
l
o
T
t
l
u
a
F
1/3
1/3
1/3
1/2
1/3
1/3
1/2
1/2
1/2
1/3
1/2
1/2
1/2
e
v
i
t
p
a
d
A
y
r
a
s
r
e
v
d
A













/
s
s
e
n
e
v
i
L
y
t
i
l
i
b
a
l
i
a
v
A













y
t
i
l
i
b
a