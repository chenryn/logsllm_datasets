important step towards automated exploit generation for modern,
complex software systems.
ACKNOWLEDGMENTS
We thank the anonymous reviewers for their valuable feedback.
This project has received funding from the European Union’s Hori-
zon 2020 research and innovation program under grant agreement
No 786669. This paper reflects only the authors’ view. The Research
Executive Agency is not responsible for any use that may be made
of the information it contains.
REFERENCES
[1] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2005. Control-Flow
Integrity. In ACM Conference on Computer and Communications Security (CCS).
[2] Alfred V. Aho and Margaret J. Corasick. 1975. Efficient String Matching: An Aid
[4] Dennis Andriesse, Xi Chen, Victor van der Veen, Asia Slowinska, and Herbert
Bos. 2016. An In-Depth Analysis of Disassembly on Full-Scale x86/x64 Binaries.
In USENIX Security Symposium.
[5] Thanassis Avgerinos, Sang Kil Cha, Brent Lim Tze Hao, and David Brumley. 2011.
AEG: Automatic Exploit Generation. In Symposium on Network and Distributed
to Bibliographic Search. Commun. ACM 18, 6 (1975), 333–340.
[3] Jeffrey Ullman Alfred Aho, Ravi Sethi and Monica S. Lam. 2006. Compilers:
Principles, Techniques, and Tools.
310ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
B. Garmany et al.
System Security (NDSS).
[6] T. Bao, R. Wang, Y. Shoshitaishvili, and D. Brumley. 2017. Your Exploit is Mine:
Automatic Shellcode Transplant for Remote Exploits. In IEEE Symposium on
Security and Privacy.
[7] Marcel Böhme, Van-Thuan Pham, Manh-Dung Nguyen, and Abhik Roychoud-
hury. 2017. Directed Greybox Fuzzing. In ACM Conference on Computer and
Communications Security (CCS).
[8] Marcel Böhme, Van-Thuan Pham, and Abhik Roychoudhury. 2016. Coverage-
based Greybox Fuzzing As Markov Chain. In ACM Conference on Computer and
Communications Security (CCS).
[9] François Bourdoncle. 1993. Efficient chaotic iteration strategies with widenings.
In Formal Methods in Programming and Their Applications. Lecture Notes in
Computer Science, Vol. 735. Springer Berlin Heidelberg, Chapter 9, 128–141.
[10] David Brumley, Pongsin Poosankam, Dawn Song, and Jiang Zheng. 2008. Auto-
matic Patch-Based Exploit Generation is Possible: Techniques and Implications.
In IEEE Symposium on Security and Privacy.
[11] Nathan Burow, Scott A. Carr, Stefan Brunthaler, Mathias Payer, Joseph Nash, Per
Larsen, and Michael Franz. 2016. Control-Flow Integrity: Precision, Security, and
Performance. arXiv preprint arXiv:1602.04056 (2016).
[12] Sang Kil Cha, Thanassis Avgerinos, Alexandre Rebert, and David Brumley. 2012.
Unleashing Mayhem on Binary Code. In IEEE Symposium on Security and Privacy.
[13] Wei Chen and Juan Vazquez. 2014. "Hack Away at the Unessential" with ExpLib2
in Metasploit. https://blog.rapid7.com/2014/04/07/hack-away-at-the-unessential-
with-explib2-in-metasploit/.
[14] Yuki Chen. 2014. ExpLib2 JavaScript Library. https://github.com/jvazquez-
r7/explib2.
[15] Ron Cytron, Jeanne Ferrante, Barry K Rosen, Mark N Wegman, and F Kenneth
Zadeck. 1991. Efficiently computing static single assignment form and the control
dependence graph. ACM Transactions on Programming Languages and Systems
(TOPLAS) 13, 4 (1991), 451–490.
[16] Enes Göktaş, Robert Gawlik, Benjamin Kollenda, Elias Athanasopoulos, Geor-
gios Portokalidis, Cristiano Giuffrida, and Herbert Bos. 2016. Undermining
Entropy-based Information Hiding (And What to Do About It). In USENIX Secu-
rity Symposium.
[17] Google. [n. d.]. ClusterFuzz. https://github.com/google/oss-fuzz/blob/master/
docs/clusterfuzz.md. Accessed: 2018-02-07.
[18] Jordan Gruskovnjak. 2012. Advanced Exploitation of Mozilla Firefox Use-
after-free (MFSA 2012-22). http://web.archive.org/web/20150121031623/http:
//www.vupen.com/blog/20120625.Advanced_Exploitation_of_Mozilla_Firefox_
UaF_CVE-2012-0469.php.
[19] Sean Heelan. 2009. Automatic generation of control flow hijacking exploits for
software vulnerabilities. Master’s thesis. University of Oxford.
[20] Herbert Jordan, Bernhard Scholz, and Pavle Subotic. 2016. Soufflé: On Synthesis of
Program Analyzers. In Computer Aided Verification - 28th International Conference,
CAV 2016, Toronto, ON, Canada, July 17-23, 2016, Proceedings, Part II.
[21] Wenchao Li, Sanjit A. Seshia, and Somesh Jha. 2012. CrowdMine: Towards Crowd-
sourced Human-assisted Verification. In Annual Design Automation Conference
(DAC).
[22] Zhenhua Liu. 2014. Advanced Exploit Techniques Attacking the IE Script
https://blog.fortinet.com/2014/06/16/advanced-exploit-techniques-
Engine.
attacking-the-ie-script-engine.
[23] Kangjie Lu, Marie-Therese Walter, David Pfaff, Stefan Nürnberger, Wenke Lee,
and Michael Backes. 2017. Unleashing Use-Before-Initialization Vulnerabilities
in the Linux Kernel Using Targeted Stack Spraying. In Symposium on Network
and Distributed System Security (NDSS).
[24] Microsoft. 2014. What is the Windows Integrity Mechanism? http://msdn.
microsoft.com/en-us/library/bb625957.aspx.
[25] OpenHub. November 2017. Mozilla Firefox Language Summary. https://goo.gl/
[26] Alexandre Pelletier. 2012. Advanced Exploitation of Internet Explorer Heap Over-
flow (Pwn2Own 2012 Exploit). http://web.archive.org/web/20141005134545/http:
//www.vupen.com/blog/20120710.Advanced_Exploitation_of_Internet_
Explorer_HeapOv_CVE-2012-1876.php.
[27] Charles Reis and Steven D. Gribble. 2009. Isolating Web Programs in Modern
Browser Architectures. In Proceedings of the 4th ACM European Conference on
Computer Systems.
[28] Dusan Repel, Johannes Kinder, and Lorenzo Cavallaro. 2017. Modular Synthesis
of Heap Exploits. In Proceedings of the 2017 Workshop on Programming Languages
and Analysis for Security.
[29] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian Schinzel, and
Thorsten Holz. 2017. kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels.
In USENIX Security Symposium.
[30] Edward J. Schwartz, Thanassis Avgerinos, and David Brumley. 2010. All You
Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic
Execution (but Might Have Been Afraid to Ask). In IEEE Symposium on Security
and Privacy.
[31] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino,
Andrew Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel,
Ka32Pp.
and Giovanni Vigna. 2016. SoK: (State of) The Art of War: Offensive Techniques
in Binary Analysis. In IEEE Symposium on Security and Privacy.
[32] Yan Shoshitaishvili, Michael Weissbacher, Lukas Dresel, Christopher Salls, Ruoyu
Wang, Christopher Kruegel, and Giovanni Vigna. 2017. Rise of the HaCRS:
Augmenting Autonomous Cyber Reasoning Systems with Human Assistance. In
ACM Conference on Computer and Communications Security (CCS).
[33] Yannis Smaragdakis and George Balatsouras. 2015. Pointer Analysis. Found.
Trends Program. Lang. 2, 1 (April 2015).
[34] Yannis Smaragdakis and Martin Bravenboer. 2011. Using Datalog for Fast and
Easy Program Analysis. In Proceedings of the First International Conference on
Datalog Reloaded.
[35] Alexander Sotirov. 2009. Bypassing memory protections: The future of exploita-
tion. In USENIX Security Symposium.
[36] László Szekeres, Mathias Payer, Tao Wei, and Dawn Song. 2013. SoK: Eternal
War in Memory. In IEEE Symposium on Security and Privacy.
[37] Mozilla Security Team. [n. d.]. CVE-2016-9079: Use-after-free in SVG Animation.
https://bugzilla.mozilla.org/show_bug.cgi?id=1321066.
[38] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar
Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-Edge Control-
Flow Integrity in GCC & LLVM. In USENIX Security Symposium.
[39] Axel Tillequin. 2016. Amoco. https://github.com/bdcht/amoco.
[40] David Trabish, Andrea Mattavelli, Noam Rinetzky, and Cristian Cadar. 2018.
Chopped Symbolic Execution. In International Conference on Software Engineering
(ICSE 2018).
[41] Michael James Van Emmerik. 2007. Static single assignment for decompilation.
Ph.D. Dissertation. The University of Queensland.
[42] Junjie Wang, Bihuan Chen, Lei Wei, and Yang Liu. 2017. Skyfire: Data-driven
seed generation for fuzzing. In IEEE Symposium on Security and Privacy.
[43] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, László Szekeres, Stephen Mc-
Camant, Dawn Song, and Wei Zou. 2013. Practical Control-Flow Integrity and
Randomization for Binary Executables. In IEEE Symposium on Security and Pri-
vacy.
[44] Mingwei Zhang and R. Sekar. 2013. Control-Flow Integrity for COTS Binaries. In
USENIX Security Symposium.
Appendices
A JAVASCRIPT CODE CORRESPONDING TO
RUNNING EXAMPLE
In the following we list all components of a generated EPT script
corresponding to our running example from Figure 2. Listing 2
shows the JS code that is needed to trigger the vulnerability (CVE-
2016-9079). Listing 2 merged together with Listing 3 execute Firefox
50.0.1 32bit to the control point. This merged code is used as a tem-
plate, fed into PrimGen, whereby the gen() function is existent (as
in Listing 4), but does not set any specific values, yet. PrimGen then
creates code shown in Listing 4 based on the generated memory
map to set memory values. Hence, all three JS code listings merged
together, constitute an EPT example generated by PrimGen to per-
form the exploitation primitive shown by our running example in
Figure 2.
function VUT () {
/* bug trigger ripped from bugzilla report */
var worker = new Worker ( ' data : javascript , self . onmessage = function
( msg ){ postMessage (" one ") ; postMessage (" two ") ;}; ');
worker . postMessage (" zero ");
svgns = ' http :// www . w3 . org /2000/ svg ';
heap80 = new Array (0 x1000 );
heap100 = new Array (0 x4000 );
block80 = new ArrayBuffer (0 x80 );
block100 = new ArrayBuffer (0 x100 );
sprayBase = undefined ;
arrBase = undefined ;
animateX = undefined ;
containerA = undefined ;
var offset = 0 x88 // Firefox 50.0.1
var exploit = function () {
var u32 = new Uint32Array ( block80 )
311Towards Automated Generation of Exploitation Primitives for Web Browsers
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
u32 [0 x4 ] = arrBase - offset ;
u32 [0 xa ] = arrBase - offset ;
u32 [0 x10 ] = arrBase - offset ;
u32 [0] = 0 xaabbccdd ;
u32 [1] = 0 xaabbccee ;
u32 [0 x11 ] = 0 xaabbccff ;
for (i = heap100 . length /2; i (esp-0xc) | }
ecx_1 M32(esi_1+16) | }
...
zf_3 ((ecx_1+0x88)==0x0) | }
...
ecx_2 (ecx_1+0x88) | }
eax_4 M32(ecx_2+172) | }
cf_5 ((eax_4-0x1)[31:32]
&(~eax_4[31:32])) | }
zf_4 ((eax_4-0x1)==0x0) | }
...
next_2 ((zf_4==0x1)
? 0x107a00ed : 0x107a00e8) | }
--------------------------------------------
Figure 5: Visual representation of an SSA-map of our run-
ning example showing an excerpt of the first basic block
starting at 0x107a00d4.
These maps are closed abstract environments. Each IL instruc-
tions that is passed to this environment is automatically evaluated
within that environment. Each operation that alters flags is explic-
itly expressed. Control-flow conditions are also expressed in our
SSA-maps, which is represented by next_2. This is used to track
control into flags giving basic blocks a higher priority in the path se-
lection where a branch is controlled. The left hand side expressions
are restricted to be either memory or register expressions. For each
map, we define the stack pointer to be relative to the initial stack
pointer (not SSA subscripted) that is set at the very beginning of
the function call. It is indicated on the first line. This allows for fast
back propagation of subscripted stack pointer expressions giving
us the corresponding delta to the initial
312