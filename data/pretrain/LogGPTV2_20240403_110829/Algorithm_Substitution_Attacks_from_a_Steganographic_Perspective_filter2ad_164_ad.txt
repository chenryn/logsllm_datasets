UnRel⋆
O(ml(κ)2 · exp(−s)) + InSecprf
S, C(κ) ≤ 2 ml(κ)2 · exp(−2H∞(Cκ)−3)+
ml(κ)2 · exp(−2−2s) + InSecprf
F (κ),
F (κ)
where C := Cκ
SES(S.ol(κ))
One can compare this corollary to the construction used in the
proof of Theorem 4.1 and Theorem 4.2 in [6]. We can see that our
generic algorithm substitution attack gets almost the same bounds
for insecurity and for unreliability.
Note that the protocols in [2, 6] and our generic protocol of
ml ·(ln ml +β) = 1/(ln ml +β) for
Corollary 6.2 have a very bad rate:
an appropriate value β. One can easily modify the above construc-
tions such that instead of one bit b of a message am we embed
a block of log(ml) bits per ciphertext. This improves the rate to
ln(ml)−ln log(ml)+β
6.2 ASAs imply Steganography
= Θ(1).
log ml
ml
Theorem 6.3. Assume SES is a symmetric encryption scheme and
let ASA be an algorithm substitution attack against SES of output
length ASA.ol(κ). Then there exists a stegosystem S with the output
length S.ol(κ) = 2 · ASA.ol(κ) + 1 on the channel C := Cκ
SES(S.ol(κ))
determined by SES such that S’s insecurity, resp. its reliability satisfy
S, C(κ) ≤ InSecenc-watch
ASA,SES (κ)
InSeccha
UnRelS, C(κ) = UnRelASA,SES(κ).
and
Proof. Let SES = (Gen, Enc, Dec) be a symmetric encryption
scheme and ASA = (AGen, AEnc, AExt) be an algorithm substitu-
tion attack against SES. To simplify notation, let ℓ = ASA.ol(κ). We
construct the stegosystem S = (SGen, SEnc, SDec) on C out of the
ASA.
using the generation algorithm of SES and outputs k.
The key generation algorithm SGen simply simulates AGen. It
will output the key ak. To encode a message am using the key
ak, the stegoencoding algorithm SEnc generates for any history
h a sequence of S.ol(κ) = 2ℓ + 1 documents such that the last ℓ
documents embed the message am. To describe the algorithm we
need to distinguish between different given histories h.
h = ∅: In this case, SEnc chooses a random key k ← SES.Gen(1κ)
h = k || m1 || m2 || . . . || mr for 0 ≤ r ≤ ℓ − 1: Encoder SEnc sam-
ples a random message mr +1 and outputs it.
h = k || m1 || m2 || . . . || mℓ || c1 || . . . || cr with r ≥ 0: The stego-
encoder SEnc simulates AEnc(ak, am, k, m(r +1) mod ℓ+1) and
outputs the generated ciphertext.
Note that by construction, in any case the last ℓ documents
generated by SEnc2ℓ+1 embed the message am in the same way as
done by ASAℓ.
AExt(ak, dℓ+2, . . . , d2ℓ+1).
As one can see from the definitions, the decoding algorithm of S is
SES(2ℓ+1)
history-ignorant. We will prove that on the channel C = Cκ
the security and reliability of the stegosystem S satisfy the stated
conditions.
If the decoder SDec is given documents d1, . . . , d2ℓ+1, we output
We first analyze the security of the system. Let Ward be a warden
against S on C with maximal advantage, i. e.
Ward,S, C(κ) = InSeccha
Advcha
S, C(κ),
Ward,S, C(κ) = Pr[SS-CHA-DistWard,S, C(κ) = true]. We
where Advcha
will construct a watchdog Watch against the algorithm substitution
attack ASA with the same advantage as Ward:
Watch,ASA,SES(κ) = Advcha
Ward,S, C(κ).
Advenc-watch
This will prove that
. . .
InSeccha
ASA,SES (κ).
S, C(κ) ≤ InSecenc-watch
(2)
The watchdog Watch on input 1κ simply simulates the warden
Ward. Whenever the warden Ward makes a query to its channel
oracle C with a history h, the watchdog Watch simulates the oracle
response as follows:
• If h = ∅, the watchdog uses Gen(1κ) to construct a key k
and returns k to the warden.
• If h = k || m1 ||
|| mr with r < ℓ, the watchdog
uniformly chooses a message mr +1 from {0, 1}SES.ml(κ) and
outputs mr +1.
• If h = k || m1 || . . . || mℓ || c1 || . . . || cr with r ≥ 0, the
watchdog computes cr +1 ← Enc(k, m((r +1) mod ℓ)+1) and
outputs cr +1.
Clearly, this simulates the channel distribution C perfectly. If the
warden queries its challenge oracle Ward.CH with chosen message
am, state σ, and history h (that is either equivalent to sampling
from Ch or to calling SEnc(ak, am, h, σ)), the watchdog simulates
the response of the oracle Ward.CH as follows:
• If h = ∅ then Watch chooses a random key k ← Gen(1κ)
and outputs it.
• If h = k || m1 || m2 || . . . || mr for 0 ≤ r ≤ ℓ − 1 then Watch
samples a random message m and outputs it.
• If h = k || m1 || m2 || . . . || mℓ || c1 || . . . || cr with r ≥ 0
then Watch queries its own oracle on k and m((r +1) mod ℓ)+1.
If Watch.CH is equal to Enc of SES (the bit b in ASA-Dist is set to
0) the corresponding answer is identically distributed to a sample
of the channel C. Hence,
Pr[ASA-DistWatch,ASA,SES(κ)⟨b = 0⟩ = true] =
Pr[SS-CHA-DistWard,S, C(κ)⟨b = 0⟩ = true].
On the other hand, if Watch.CH is equal to AEnc (the bit b in
ASA-Dist is set to 1), the corresponding answer is identically dis-
tributed to SEnc(ak, am, h, σ) and thus
Pr[ASA-DistWatch,ASA,SES(κ)⟨b = 1⟩ = true] =
Pr[SS-CHA-DistWard,S, C(κ)⟨b = 1⟩ = true].
We thus have
Advenc-watch
Watch,ASA,SES(κ) =
Pr[ASA-DistWatch,ASA,SES(κ) = true] =
Pr[SS-CHA-DistWard,S, C(κ) = true] =
Advcha
Ward,S, C(κ)
which proves (2).
The reliability of S is the same as the success probability of ASA
□
since SDec simply simulates AExt.
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1656By using the fact that channels with min-entropy 0 can not be
used for steganography (see e. g. Theorem 6 in [16]) and observing
that channels corresponding to deterministic encryption schemes
have min-entropy 0, we can conclude the following corollary:
Corollary 6.4. For all deterministic encryption schemes SES and
all algorithm substitution attacks ASA against SES:
ASA,SES (κ) ≥ 1.
Note that this exactly Theorem 4 in [7].
InSecenc-watch
7 GENERAL RESULTS
Let R be a polynomial-time randomized algorithm with hardwired
secret s which takes inputs x and generates outputs y. The gen-
eral task of an algorithm substitution attack against R is to con-
struct a subverted algorithm ARak which using a hidden hardwired
random key ak outputs on the secret s in the sequence of calls
ARak(s, x1), ARak(s, x2), . . . a sequence such that
(1) the output ARak(s, x1), ARak(s, x2), . . . is indistinguishable
(2) ARak(s, x1), ARak(s, x2), . . . embeds the secret s.
In our setting we model the attack on R as a stegosystem on a
channel determined by R and define such a channel.
from R(s, x1), R(s, x2), . . . and
7.1 ASA against a Randomized Algorithm
In this section we give formal definitions for algorithm substitu-
tion attack AR, its advantage AdvWatch,AR,R, etc. Formally, an algo-
rithm substitution attack against R is a triple of efficient algorithms
ASA = (Gen, AR, Ext), where Gen generates the key ak, the algo-
rithm AR takes the key ak, a secret s and all inputs x1, x2, . . . to
R and the extractor Ext tries to extract s from the outputs of AR
with the help of ak (but without knowing x1, x2, . . .). Similarly to
the setting for encryption schemes, ASA is called indistinguishable,
if every PPTM Watch – the watchdog – is not able to distinguish
between ARak(s, x1), ARak(s, x2), . . . and R(x1), R(x2), . . . even if he
is allowed to choose s and all xi. This is defined via the game
RASA-DistWatch,ASA,R defined analogously to ASA-Dist. The maxi-
mal advantage of any watchdog distinguishing ASA from R is called
the insecurity or indistinguishability of ASA and is formally defined
as
InSecasa
ASA,R(κ) = max
Watch
{Advasa
Watch,ASA,R(κ)},
where
Advasa
Watch,ASA,R(κ) := Pr[RASA-DistWatch,ASA,R(κ) = true].
The unreliability of ASA is also defined like before:
UnRelASA,R(κ) =
max{Pr[ASA.AExt(ak, ASA.AR(ak, am, x1, . . . , xℓ)) (cid:44) am]},
where the maximum is taken over all ak ∈ supp(ASA.Gen(1κ)),
am ∈ {0, 1}ASA.ml(κ), and x1, . . . , xℓ being inputs to R.
Known examples which fit into this setting include e. g. the
subversion-resilient signature schemes presented in the work of
Ateniese et al. [2].
7.2 Channel determined by a Randomized
Algorithm
Let R be a polynomial-time randomized algorithm with parameter κ.
We assume that the secret s is generated by Gen and the inputs x
to R are generated by the randomized polynomial-time algorithm
GenInput, associated with R (which may be chosen adversarially
as shown in the definition above). Let ℓ be a polynomial of κ. For R
we define a channel family, named Cκ
R (ℓ), indexed with parameter
κ ∈ N, with documents which correspond to the input of AR. The es-
sential idea behind the definition of the channel Cκ
R (ℓ) is that for all
s ∈ supp(Gen(1κ)) and every sequence of inputs x1, x2, . . . , xℓ(κ),
with xi ∈ supp(GenInput(1κ)), for the history
h = s || x1 || x2 || . . . || xℓ(κ)
the distribution of the sequences of documents
y1 || y2 || . . . || yℓ(κ)
generated by the channel is exactly the same as the distribution for
O(ml(κ)2 · exp(−s)) + InSecprf
S, C(κ) ≤ 2 ml(κ)2 · exp(−2H∞(Cκ)−3)+
ml(κ)2 · exp(−2−2s) + InSecprf
R (S.ol(κ)).
F (κ),
F (κ)
UnRel⋆
where C := Cκ
Theorem 7.2. For all deterministic algorithms R and all algorithm
substitution attacks ASA against R:
InSecasa
ASA,R(κ) = 1.
Theorem 1.2 is thus just a consequence of Theorem 7.1 and
Theorem 1.3 is just a consequence of Theorem 7.2.
These general results also imply several other results from the
literature, for example on signature schemes. Ateniese et al. [2]
R(s, x1) || R(s, x2) || . . . || R(s, xℓ(κ)).
To give a formal definition of {Cκ
R (ℓ)}κ∈N we need to specify the
probability distributions for any history h. Thus, we define the
family, on the alphabet {0, 1}, as follows: For empty history h = ∅,
we define Cκ
R (ℓ)∅ as the distribution on all possible keys gener-
ated by Gen(1κ). For s ∈ supp(Gen(1κ)) and a (possibly empty)
sequence inputs x1, x2, . . . , xr with xi ∈ supp(GenInput(1κ)) and
0 ≤ r ≤ ℓ(κ) − 1, the distribution Cκ
R (ℓ)s ||x1||x2||...||xr is the distri-
bution on inputs xr +1 ← GenInput(1κ). For s ∈ supp(Gen(1κ)), a
sequence of inputs x1, x2, . . . , xℓ(κ) with xi ∈ supp(GenInput(1κ)),
and a (possibly empty) sequence of R’s outputs y1, . . . , yr with
yi ∈ supp(R(s, x((i−1) mod ℓ(κ))+1)), the probability distribution of
Cκ
R (ℓ)s ||x1||x2||...||xℓ(κ)||y1||y2||...||...||yr is the probability distribu-
tion of R(s, x(r mod ℓ(κ))+1).
7.3 Results
The theorems proved in the previous section can simply be gener-
R(ℓ) for
alized by using our general construction of the channel Ck
the randomized algorithm R and the generic stegosystem RejSamF
provided by Theorem 4.1.
Theorem 7.1. For every randomized algorithm R, there exists a
generic algorithm substitution attack ASA against R such that
InSecASA
ASA,R(κ) ≤ O(ml(κ)4 · 2−H∞(Cκ))+
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1657study algorithm substitution attacks3 on signature schemes SIG =
(Gen, Sign, Vrfy), where
• The key generator SIG.Gen produces upon input 1κ a pair
(pk, sk) of keys with |pk| = |sk| = κ. We call pk the public
key and sk the secret key.
• The signing algorithm SIG.Sign takes as input the secret key
sk and a message m ∈ {0, 1}SIG.ml of length SIG.ml(κ) and
produces a signature σ ∈ {0, 1}SIG.sl(κ) of length SIG.sl(κ).
• The verifying algorithm SIG.Vrfy takes as input the public
key pk, the message m and a signature σ and outputs a bit b.
On the positive side (from the view of an algorithm substitution
attack) they show that all randomized coin-injective schemes and
all coin-extractable schemes have ASA. A randomized algorithm A
is coin-injective, if the function fA(x, ρ) = A(x; ρ) (where ρ denotes
the random coins used by A) is injective and coin-extractable if there
is another randomized algorithm B such that Pr[B(A(x; ρ)) = ρ] ≥
1 − negl for a negligible function negl. They prove the following
theorems:
Theorem 7.3 (Theorem 1 in [2]). For every coin-injective signa-
ture scheme SIG, there is a successful algorithm substitution attack
ASA and a negligible function negl such that