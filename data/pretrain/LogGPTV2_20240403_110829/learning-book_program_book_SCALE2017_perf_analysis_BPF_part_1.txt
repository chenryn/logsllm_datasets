# OCR Output
## Page 1
Linux 4.x Tracing
Performance Analysis with bcc/BPF
ScaLE
filetop
mysqld_qs1ower
gethostlatency
filelife fileslower
stats:
Other:
15x
vfscount vfsstat
bashreadline
nemleak sslsniff
syncs
capable
ucalls uflov
acheatat cachetop
ustat uthreads
ugc uobjnew
kills
The Fifteenth Annual
ountsnoop
SouthernCaliforniaLinuxExpo
Applications
cpudist
deadlock_detector
runqlat runqlen
System Librar
rgdist
System Call Interface
cpuunclained
VFS
Sockets
Scheduler
offcputine
Brendan Gregg
File Systems
TCP/UDP
offvaketine
vakeuptine
profile
IP
SeniorPerformanceArchitect
latency
ndflusl
Device D
passage
hardirqs
of time
btrfsdist
ttys
Mar2017
btrfsslower
ext4dist ext4slo
tcpeo
tcpt
xfsdiat xfsslower
high-latency
zfsdist zfsslower
tcpc
outliers
biolatency bitesize
low-latency
NETFLIX
mode
bulk of IVO
---
## Page 2
Linux tracing
in the last 3 years...
---
## Page 3
How do we
use these
superpowers?
---
## Page 4
Takeaways
1.Understanding the value of Linux tracing superpowers
2. Upgrade to Linux 4.4+ (4.9 is better)
3.AskforeBPF supportinyourperf analysis/monitoring tools
---
## Page 5
NETFLIX
REGIONSWHERENETFLIXISAVAILABLE
ubuntu
FreeBSD
---
## Page 6
Ye Olde BPF
BerkeleyPacketFilter
# tcpdump host 127.0.0.1 and port 22 -d
Optimizespacketfilter
（000）1dh
[12]
performance
(001） jeq
#0x800
jt2
jf18
(002）1d
[26]
(003）jeq
#0x7f000001
jt6
jf4
(004)
ld
[30]
(005）
jeq
#0x7f000001
jt6
jf 18
2x32-bitregisters
(006)
ldb
[23]
&scratchmemory
(007)
jeq
#0x84
jt 10
jf 8
（008）
jeq
#0x6
jt10
jf9
（009）
jeq
#0x11
jt10
jf 18
User-defined bytecode
(010)
1dh
[20]
executedbyanin-kernel
(011）
jset
#0xlfff
jt 18
jf 12
sandboxedvirtualmachine
(012）
ldxb
4*（[14]&0xf)
(013）
1dh
[x + 14]
[...]
StevenMcCanneandVanJacobson,1993
---
## Page 7
Enhanced BPF
aka eBPF or just"BPF"
struct bpf_insn prog[]={
BPF_MOV64_REG(BPF_REG_6,BPF_REG_1),
BPF_LD_ABS(BPF_B,ETH_HLEN + offsetof(struct iphdr，protocol)/* R0=ip->proto */),
BPF_STX_MEM（BPF_W，BPF_REG_10,BPF_REG_0，-4)，/**（u32*)（fp-4)=r0*
BPF_MOV64_REG(BPF_REG_2,BPF_REG_10),
BPF_ALU64_IMM(BPF_ADD，BPF_REG_2，-4)，/*r2=fp-4*/
10x64-bitregisters
BPF_LD_MAP_FD(BPF_REG_1, map_fd),
maps (hashes)
BPF_RAW_INSN(BPF_JMP|BPF_CALL，0,0，0，BPF_FUNC_map_lookup_e1em)，
actions
BPF_JMP_IMM(BPF_JEQ，BPF_REG_0,0,2),
BPF_MOV64_IMM(BPF_REG_1,1)，/* r1=1 */
BPF_RAW_INSN(BPF_STX|BPF_XADD|BPF_DW，BPF_REG_0,BPF_REG_1,0,0)，/*Xadd r0 += r1*/
BPF_MOV64_IMM(BPF_REG_0，0)，/*r0=0*/
BPF_EXIT_INSN(),
AlexeiStarovoitov,2014+
---
## Page 8
Enhanced BPF Use Cases
User-DefinedBPFPrograms
Kernel
SDNConfiguration
Runtime
EventTargets
DDoSMitigation
verifier
sockets
kprobes
IntrusionDetection
BPF
uprobes
ContainerSecurity
tracepoints
BPFactions
perf_events
Observability
---
## Page 9
Enhanced BPF
is in Linux
---
## Page 10
Demo
---
## Page 11
New Observability Tools
Efficient,productionsafe,useful metrics:
#biolatency -mT 1
Tracingblockdevice I/o...HitCtrl-Ctoend.
06:20:16
msecs
:count
distribution
0->1
:36
2->3
:1
4->7
:3
***
8->15
：17
16->31
：33
32->63
:7
64->127
:6
["]
TheseCLltoolsmaybeusefulevenifyouneverusethem,asexamplesofwhattoimplementinGUls
---
## Page 12
NewVisualizationsand Guls
Vector
Eg,Netflixself-serviceUl:
FlameGraphs
TracingReports
Shouldbeopensourced;youmayalsobuild/buyyourown
---
## Page 13
IntroducingenhancedBPF
BPFTRACING
---
## Page 14
A Linux Tracing Timeline
1990's:Statictracers,prototypedynamictracers
2000: LTT + DProbes (dynamic tracing; not integrated)
2004:kprobes(2.6.9)
2005: DTrace (not Linux), SystemTap (out-of-tree)
2008:ftrace(2.6.27)
2009: perf_events (2.6.31)
2009:tracepoints(2.6.32)
2010-2016:ftrace&perf_eventsenhancements
2012:uprobes (3.5)
2014-2017: enhanced BPF patches: supporting tracing events
2016-2017:ftracehisttriggers
also:LTTng,ktap,Sysdig,...
---
## Page 15
Linux Events & BPF Support
BPF output
Dynamic
Tracepoints
PMCS
Tracing
syscalls:
Linux4.4
Linux4.7
Linux4.9
ext4:
sched:
sock:
cycles
BPFstacks
Operating System
task:
instructions
Linux4.6
signal:
Applications
branch-*
timer:
L1-*
uprobes
workqueue:
SystemLibrariep
LLC-*
Linux4.3
SystemCall Interface
CPU
Interconnect
VFS
Sockets
Scheduler
CPU
FileSystems
TCP/UDP
kmem:
1
kprobes
VolumeManager
IP
Virtual
vmscan:
Memory
Linux4.1
BlockDeviceInterface
Ethernet
Memory
writeback:
Bus
DeviceDrivers
(version
irq:
DRAM
jbd2:
net:
BPF
block: scsi:
skb:
uoddns
mem-load
arrived)
SoftwareEvents
mem-store
cpu-clock
page-faults
Linux4.9
cs migrations
minor-faults
major-faults
---
## Page 16
Event Tracing Efficiency
E.g., tracing TCP retransmits
Kernel
Old way: packet capture
send
tcpdump
1.read
buffer
2.dump
receive
Analyzer
1.read
2.process
filesystem
disks
3.print
Newway:dynamictracing
Tracer
1.configure
tcp_retransmit_skb()
2.read
---
## Page 17
BPF Tracing Internals
ObservabilityProgram
Kernel
peol
statictracing
BPF
BPF
verifier
program
bytecode
tracepoints
attach
dynamictracing
eventconfig
BPF
kprobes
per-event
uprobes
data
output
async
sampling, PMCs
copy
statistics
maps
perf_events
---
## Page 18
Introducingbcc
BPF COMPILER COLLECTION
---
## Page 19
bcc
BPF Compiler Collection
Tracing layers:
https://github.com/iovisor/bcc
Leaddeveloper:BrendenBlanco
bcc tool
bcctool
Includes tracing tools
bcc
Provides BPF front-ends:
Python
lua
－Python
front-ends
Lua
user
C++
kernel
Chelperlibraries
Kernel
golang (gobpf)
BPF
Events
---
## Page 20
RawBPF
struct bpf_insn prog[] ={
BPF_MOV64_REG(BPF_REG_6,BPF_REG_1),
BPF_LD_ABS(BPF_B,ETH_HLEN + offsetof(struct iphdr，protocol)/* R0 = ip->proto */),
BPF_STX_MEM（BPF_W，BPF_REG_10，BPF_REG_0,-4)，/**（u32*)（fp-4)=r0*
BPF_MOV64_REG(BPF_REG_2,BPF_REG_10),
BPF_ALU64_IMM(BPF_ADD，BPF_REG_2，-4)，/*r2=fp-4*/
BPF_LD_MAP_FD(BPF_REG_1, map_fd),
BPF_RAW_INSN(BPF_JMP|BPF_CALL，0,0，0，BPF_FUNC_map_lookup_e1em)，
BPF_JMP_IMM(BPF_JEQ,BPF_REG_0,0，2),
BPF_MOV64_IMM(BPF_REG_1，1),，/* r1 =1*
BPF_RAW_INSN(BPF_STX| BPF_XADD|BPF_DW，BPF_REG_0，BPF_REG_1,0，0)，/* xadd r0 += r1 */
BPF_MOV64_IMM(BPF_REG_0，0)，/*r0=0*/
BPF_EXIT_INSN(),
samples/bpf/sock_example.c
87linestruncated
---
## Page 21
C/BPF
SEC("kprobe/_netif_receive_skb_core")
int bpf_prog1(struct pt_regs *ctx)
1
/*attaches to kprobe netif_receive_skb
* looks for packets on loobpack device and prints them
*/
chardevname[IFNAMSIZ];
structnet_device *dev;
struct sk_buff *skb;
int len;
/*non-portable!works for the givenkernelonly*/
skb =(struct sk_buff *）PT_REGS_PARM1(ctx);
dev =_(skb->dev);
samples/bpf/tracex1_kern.c
58linestruncated
---
## Page 22
bcc/BPF (C & Python)
#load BPF program
#header
b= BPF(text="""
print("Tracing...HitCtrl-C to end.")
#include
#include
# trace until Ctrl-C
BPF_HISTOGRAM(dist);
try:
intkprobeblk_account_io_completion(struct pt_regs *ctx,
sleep(99999999)
struct request *req)
exceptKeyboardInterrupt:
dist.increment（bpf_log2l（reg->data_len/1024))
print
return 0;
#output
b["dist"].print_log2_hist("kbytes")
bccexamples/tracing/bitehist.py
entireprogram
---
## Page 23
ply/BPF
kretprobe:SyS_read
@.quantize(retval());
https://github.com/iovisor/ply/blob/master/README.md
entireprogram
---
## Page 24
The Tracing Landscape, Mar 2017
(my opinion)
(less brutal)
dtrace4L.
ply/BPF
ktap
sysdig
Ease of use
(many)-
perf
stap
LTTng
(hist triggers)
→recentchanges
ftrace
bcc/BPF
(alpha)—→(mature)
C/BPF
(brutal)
Stage of
Development
RawBPF
Scope&Capability
---
## Page 25
Forend-users
PERFORMANCEANALYSISWITH
BCC/BPF
---
## Page 26
Pre-BPF: Linux Perf Analysis in 60s
1.
uptime
2.
dmesg-T|tail
3.
vmstat1
4.
mpstat-PALL1
5.
pidstat 1
55
5
50
10
6.
iostat -xz 1
45
15
7.
free -m
40
20
8.
sar
-nDEV1
35
25
9.
sar
-nTCP,ETCP1
30
10.top
http://techblog.netflix.com/2015/11/linux-performance-analysis-in-60s.html
---
## Page 27
bcc Installation
https://github.com/iovisor/bcc/blob/master/INSTALL.md
eg, Ubuntu Xenial:
#echo"deb [trusted=yes] https://repo.iovisor.org/apt/xenial xenial-nightly main"|\
sudotee/etc/apt/sources.list.d/iovisor.list
#sudoapt-getupdate
#sudoapt-getinstallbcc-tools
-AlsoavailableasanUbuntusnap
：Ubuntu16.04isgood,16.10better:moretoolswork
Installs many tools
-In/usr/share/bcc/tools,and../tools/oldforolderkernels
---
## Page 28
filetop
opensnoop
mysqld_qslower
gethostlatency
Other:
filelife fileslower
statsnoop
bashreadline
memleak sslsniff
syncsnoop
capable
vfscount vfsstat
ucalls uflow
cachestat cachetop
ugc uobjnew
execsnoop
dcstat dcsnoop
killsnoop
pidpersec
ustat uthreads
mountsnoop
Applications
cpudist
runqlat runqlen
SystemLibraries
deadlock_detector
trace
cpuunclaimed
argdist
SystemCallInterface
funccount
funclatency
VFS
Sockets
Scheduler
offcputime
stackcount
wakeuptime
FileSystems
TCP/UDP
stacksnoop
offwaketime
profile
VolumeManager
IP
Virtual
softirqs
BlockDeviceInterface
Ethernet
Memory
oomkill memleak
DeviceDrivers
slabratetop
mdflush
btrfsdist
hardirqs ttysnoop
btrfsslower
tcptop tcplife
DRAM
ext4dist ext4slower
xfsdist xfsslower
tcpconnecttcpaccept
tcpconnlat tcpretrans
llcstat
zfsdist zfsslower
CPU
biotop biosnoop
profile
bcc tools
biolatency bitesize
https://github.com/iovisor/bcc#tools 2017
---
## Page 29
bcc General Performance Checklist
1.
execsnoop
filetop
doousuedo
mysqld_qslower
gethostlatency
statsnoop
Other:
filelife fileslower
bashreadline
2.
memleak sslsniff
opensnoop
syncsnoop
capable
vfscount vfsstat
ucalls uflow
cachestat cachetop
ugc uobjnew
execsnoop
3.
ext4slower(...)
dcstat dcsnoop
ustat uthreads