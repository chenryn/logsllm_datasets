---
title: .replace extents command
description: Learn how to use the `.replace extents` command to move extents from a source table to a destination table.
ms.reviewer: orspodek
ms.topic: reference
ms.date: 05/24/2023
---
# .replace extents command
This command runs in the context of a specific database.
It moves the specified extents from their source tables to the destination table,
and then drops the specified extents from the destination table.
All of the drop and move operations are done in a single transaction.
> [!NOTE]
> Data shards are called **extents**, and all commands use "extent" or "extents" as a synonym.
> For more information on extents, see [Extents (data shards) overview](extents-overview.md).
## Permissions
You must have at least [Table Admin](../management/access-control/role-based-access-control.md) permissions for the source and destination tables.
## Syntax
`.replace` [`async`] `extents` `in` `table` *DestinationTableName* `with` `(` `extentCreatedOnFrom` `=` *FromDate*`,` `extentCreatedOnTo` `=`*ToDate* `)` ` [!NOTE]
> For better performance, set extentCreatedOnFrom and extentCreatedOnTo parameters to the smallest possible range.
## Restrictions
* Both source and destination tables must be in the context database.
* All extents specified by the *ExtentsToDropQuery* are expected to belong to the destination table.
* All columns in the source tables are expected to exist in the destination table with the same name and data type.
## Returns
When the command is run synchronously, a table with the following schema is returned.
| Output parameter | Type | Description |
|--|--|--|
| OriginalExtentId | `string` | A unique identifier (GUID) for the original extent in the source table that has been moved to the destination table, or the extent in the destination table that has been dropped. |
| ResultExtentId | `string` | A unique identifier (GUID) for the result extent that has been moved from the source table to the destination table. Empty, if the extent was dropped from the destination table. Upon failure: "Failed". |
| Details | `string` | Includes the failure details if the operation fails. |
When the command is run asynchronously, an operation ID (GUID) is returned. Monitor the operation's status with the [.show operations](operations.md#show-operations) command, and retrieve the results of a successful execution with the [.show operation details](operations.md#show-operation-details) command.
> [!NOTE]
> The command will fail if extents returned by the *ExtentsToDropQuery* query don't exist in the destination table. This may happen if the extents were merged before the replace command was executed.
> To make sure the command fails on missing extents, check that the query returns the expected ExtentIds. Example #1 below will fail if the extent to drop doesn't exist in table *MyOtherTable*. Example #2, however, will succeed even though the extent to drop doesn't exist, since the query to drop didn't return any extent IDs.
## Examples
### Move all extents in a specified creation time range from two tables 
Move all extents from two specific tables (`MyTable1`, `MyTable2`) in a specified creation time range to table `MyOtherTable`, and drop all extents in `MyOtherTable` tagged with `drop-by:MyTag`:
```kusto
.replace extents in table MyOtherTable with (extentCreatedOnFrom=datetime(2023-03-10), extentCreatedOnTo=datetime(2023-03-12))  0
    );
    let extents_to_drop =
        t_dest
        | where any_extents_to_move and extent_tags() has 'drop-by:blue'
        | summarize by ExtentId = extent_id()
    ;
    extents_to_drop
},
{
    let extents_to_move = 
        t_source
        | where extent_tags() has 'drop-by:blue'
        | summarize by ExtentId = extent_id(), TableName = 't_source'
    ;
    extents_to_move
}
```