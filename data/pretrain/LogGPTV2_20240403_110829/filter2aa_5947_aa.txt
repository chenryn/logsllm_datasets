# 初探
- https://www.kancloud.cn/imxieke/ruby-base/107287
---
## Ruby 的运行方法
Ruby 程序有多种执行方法，其中最常见的方法是使用 ruby 命令来执行，其次就是使用 irb 命令，以交互式命令行方式来执行。若只是想执行小程序，使用 irb 命令会相对简单一点。
```ruby
echo "print(\"Hello World\")" > hello.rb
ruby hello.rb
```
```ruby
irb
print("Hello World")
```
## 程序解说
**对象**
```ruby
print("Hello Ruby")
      ------------
            |__字符串对象
```
这部分被称为 String 对象或者字符串对象，也可以直接称这部分为字符串。也就是说，这部分是一个代表字符串 Hello, Ruby. 的对象
字符串、数值、时间等各种数据，在 Ruby 中都是对象。
**方法**
```ruby
print("Hello Ruby")
----
  |__方法
```
print 是一个方法。所谓方法，就是对象的行为。数值的加法或乘法运算、字符串的合并、某时刻一小时后或者一天后的计算等操作，都是通过执行方法来实现。
print 方法的作用就是输出 `()` 里的内容。因此，执行 helloruby.rb 后，在控制台显示了字符串对象——Hello, Ruby.。
我们把执行方法时必需的条件称为参数。例如，我们在说明 print 方法时，会说“print 方法会把作为参数传递过来的字符串，输出到控制台中”。
**字符串**
- 换行符与 `*`
    字符 `\n` 是换行符。利用换行符，我们可以用普通的字符达到换行的效果，例如，为达到以下效果
    ```
    Hello,
    Ruby
    !
    ```
    程序可以这么写：
    ```ruby
    print("Hello,\nRuby\n!\n")
                 ---   --  --
                  |_____|___|___换行符
    ```
    原本也可以像下面一样这么写：
    ```ruby
    print("Hello,
    Ruby
    !
    ")
    ```
    输出结果虽然与第一种写法是一样的，但是，这样的写法会降低程序的可读性，因此并不是一个好的写法。既然 Ruby 已经帮我们准备了换行符，我们就直接用第一种方法吧。
    以外，当我们想在字符串里嵌入特殊符号时，也会用到 `\` 。双引号是表示字符串开始和结束的符号，假设我们希望字符串里包含双引号，程序要写成 `\"` 。
    ```ruby
    print("Hello, \"Ruby\".\n")
    ```
    输出结果为：
    ```
    Hello, "Ruby".
    ```
    像这样，程序会对字符串里 `\` 后的字符做特殊处理。因此，如果字符串里需要包含 `\` ，程序要写成 `\\`
    这个过程称为转义，`\` 称为转义字符。
    ```ruby
    print("Hello \\ Ruby!")
    ```
    输出结果为:
    ```
    Hello \ Ruby!
    ```
    请注意，两个 `\` 的输出结果是一个 `\` 。
- ' ' 与 " "
    创建字符串对象除了可以使用 `" "`（双引号）外，也可以使用 `' '`（单引号）。我们试试把之前程序的双引号换成单引号，看一下有什么样的效果。
    ```ruby
    print('Hello, \nRuby\n!\n')
    ```
    这次的输出结果为：
    ```
    Hello, \nRuby\n!\n
    ```
    程序会原封不动地输出单引号里的内容。
    也就是说，在单引号里，像 `\n` 这样的特殊字符不经过转义，程序会原封不动地直接输出。但也有例外，例如在字符串里想嵌入 `\` 与单引号时，还是需要在之前加上 `\` 。也就是像这样，
    ```ruby
    print('Hello, \\ \'Ruby\'.')
    ```
    输出结果为：
    ```
    Hello, \ 'Ruby'.
    ```
# 方法的调用
关于方法，我们再详细说明一下。 Ruby 在调用方法时可以省略 `()`。因此, print 方法可以这样写：
```ruby
print "Hello, Ruby.\n"
```
另外，如果想连续输出多个字符串，可以用逗号 `,` 分隔各字符串，程序会按顺序输出字符串。因此，如下写法也是可以的：
```ruby
print "Hello, ", "Ruby", ".", "\n"
```
虽然这种写法可以方便地输出多个字符串，但是如果遇到比较复杂的参数，使用 `()` 会更加便于理解。因此，建议在习惯 Ruby 的语法之前，不要使用省略 `()` 的写法。在一些较为简单的情况下，本书会使用省略 `()` 的写法。
一般来说，Ruby 是以从上到下的顺序执行方法的。例如，执行下面的程序会得到相同的结果，也就是 Hello, Ruby.。
```ruby
print "Hello, "
print "Ruby"
print "."
print "\n"
```
# puts 方法
puts 方法与 print 方法稍有区别，puts 方法在输出结果的末尾一定会输出换行符。用 puts 方法时，print 程序可改写为这样：
```ruby
puts "Hello, Ruby."
```
不过，当参数为两个字符串时，
```ruby
puts "Hello, ", "Ruby!"
```
各字符串末尾都会加上换行符，因此会输出下面的结果：
```
Hello,
Ruby!
```
某些情况下，使用 print 方法可能会顺手些；而某些情况下，使用 print 方法并不方便。请大家按照实际情况选择该使用哪个方法。
# p 方法
接下来，我们再介绍一个与输出有关的方法。Ruby 提供了一个更简单的输出对象内容的方法——p 方法。
无论使用 print 方法还是 puts 方法，输出数值 1 和字符串 "1" 时，结果都只是单纯的 1。这样一来，我们就无法判断输出的结果到底是属于哪个对象。这种情况下，p 方法可以很好地解决这个问题。使用 p 方法时，数值结果和字符串结果会以不同的形式输出。让我们赶快来尝试一下。
```ruby
puts "100"  #=> 100
puts 100    #=> 100
p "100"     #=> "100"
p 100       #=> 100
```
像这样，输出结果为字符串时，输出结果会被双引号括起来，一目了然。另外，使用 p 方法时，换行符（\n）、制表符（\t）等特殊字符不会转义，会像下面那样直接输出
```ruby
puts "Hello, \n\tRuby."
p "Hello, \n\tRuby."
```
输出如下
```
Hello,
          Ruby.
"Hello, \n\tRuby."
```
如果只是需要输出程序执行的结果、信息等，可以选择 print 方法；如果想确认程序的执行情况，则可选择 p 方法。原则上，p 方法是提供给编程者使用的。
# 中文的输出
到目前为止，我们使用的字符串都只包含字母。
接下来，我们看看如何输出中文字符。其实，输出中文字符也不是多难的事，只要把双引号内的字母换成中文字符即可。像下面这样：
```ruby
print "话说某个朝代，后宫妃嫔甚多，\n"
print "其中有一宫女，出身并不十分高贵，却蒙圣恩宠爱。\n"
```
不过，编码设定不当也会导致输出错误、乱码等情况。
**中文使用注意事项**
在某些 Ruby 运行环境里，执行包含中文的脚本时，有可能出现以下错误。
```ruby
kiritsubo.rb:1: invalid multibyte char (US-ASCII)
```
这是由于编写程序时没有指定程序的编码方式造成的。Ruby 程序的编码方式，是通过在程序的首行代码添加注释“# encoding: 编码方式”来指定的（编码的规则称为 encoding）。我们称这个注释为魔法注释（magic comment）。
例如，使用简体中文版 Windows 常用编码 GBK 编写代码时，可像下面这样写魔法注释：
```ruby
# encoding: GBK
print "话说某个朝代，后宫妃嫔甚多，\n "
print "其中有一宫女，出身并不十分高贵，却蒙圣恩宠爱。\n "
```
这样指定程序的编码方式后，Ruby 在执行程序时就可以正确识别程序中的中文。下表是各平台常用的编码方式。平台有多个常用编码方式时，请按照实际情况选择适合的编码方式。
平台         |   编码方式
-           |   -
Windows     |   GBK（或者GB 2312）
Mac OS X    |   UTF-8
Unix        |   UTF-8
> 另外，从 Ruby 2.0 开始，若没指定魔法注释，Ruby 会默认使用 UTF-8 编码方式。因此，在 Ruby 2.0 中如果希望代码采用 UTF-8 的编码方式时，可省略魔法注释 。
除此以外，使用上述 p 方法输出中文时，有时也会出现乱码的情况。这时，可使用“-E 编码方式”这个选项来指定输出结果的编码方式。例如，希望以 UTF-8 编码方式在控制台输出结果，可像下面这样执行命令：
```
ruby -E UTF-8 脚本文件名
irb -E UTF-8
```
# 数值表示与计算
讲解了字符串之后，让我们再来看看 Ruby 是怎么处理数值的。在 Ruby 程序里，整数和小数（浮点数）的处理方式都很自然。
**数值**
首先，让我们先了解一下 Ruby 是如何表示数值的。Ruby 中的字符串是以字符串对象的形式存在的。同样地，数值也是以“数值对象”的形式存在的。也就是说，在程序里操作的都是数值对象。
Ruby 的整数的表示方法很简单。直接输入数字就可以了，例如，
```
1
```
表示 1 的整数（Fixnum）对象。同样地，
```
100
```
表示 100 的整数对象。
再如，
```
3.1415
```
这表示的是 3.1415 的浮点数（Float）对象。
> 备注 Fixnum 和 Float 是对象所属类（class）的名称。
数值的输出与字符串输出一样，也是用 print 方法和 puts 方法。
```ruby
puts(10)
```
执行以上代码后，
```
10
```
会输出到屏幕中。
**四则运算**
Ruby 还可以对数值进行运算，并输出其结果。我们来看看 Ruby 是怎么进行四则运算的。首先，我们用一下 irb 命令。
```ruby
> irb --simple-prompt
>> 1 + 1
=> 2 ← 1 + 1 的执行结果
>> 2 - 3
=> -1 ← 2 - 3 的执行结果
>> 5 * 10