SGX provides the means for securely
exporting sensitive data from an enclave by encryption
(i.e. data sealing).
The processor provides each enclave with crypto keys
that are unique to the enclave’s cryptographic identity
(digest). That is, different enclaves will receive different
keys. Enclave code can use these keys to implement data
sealing: It can cryptographically protect (e.g., encrypt,
MAC) data before asking untrusted code to store them
persistently. At a later time, a different instance of the
same enclave (with the same enclave digest) can obtain
the same key from the processor and decrypt the data.
Enclaves can use the EGETKEY SGX leaf function to
access their keys.
Deploying an encrypted binary in SGX. Several re-
searchers have pointed out and built systems [5, 6, 24,
29, 30] that can deploy a completely encrypted program
to the SGX platform. This can increase program secu-
rity by preventing attackers from reverse engineering the
program.
In short, the enclave owner builds the enclave with a
simple plaintext loader binary. The loader will copy a sec-
ond, encrypted binary into enclave memory and decrypt
it inside the enclave with a key that it can obtain from the
enclave owner using remote attestation. The loader then
invokes the second binary. Optionally, the loader code
can be erased from enclave memory to deprive attackers
of known gadget building material.
This process requires memory that is at some time
writable and at another time executable. Current SGX
specification (SGX1 [19]) does not allow changing mem-
ory page permissions after an enclave has been created.
Thus, the pages into which the second binary is loaded
have to be made writable and executable. A new SGX
specification (SGX2 [20]), promises to support the mod-
ification of page permissions of running enclaves. That
would allow the deployment of encrypted binaries without
requiring pages to be both executable and writable.
In summary, SGX makes it possible to deploy en-
crypted binaries, which means that attackers may never
be able to see the code running inside the enclave they are
USENIX Association
26th USENIX Security Symposium    525
Figure 1: ENCLU instruction and its leaf functions. To invoke
a leaf function of interest through the ENCLU instruction, an
application developer can load the index of the function into the
rax register and then execute ENCLU. For example, the value of
rax is required to be 0x4 to invoke EEXIT.
trying to attack.
2.2
Instruction Specifications
SGX adds two new instructions, ENCLU and ENCLS, to the
x86 ISA [19, 20]. ENCLU handles the user-level operations
(i.e., Ring 3) such as deriving encryption keys and gen-
erating measurement reports. ENCLS, on the other hand,
handles privileged level operations (i.e., Ring 0) such
as creating enclaves, allocating memory pages. While
SGX introduces many operations for creating enclaves
and managing them, these two instructions work as gates
that help dispatch a variety of functions, which are called
leaf functions [19, 20].
Leaf functions. Figure 1 shows how a user-level process
can invoke each leaf function through an ENCLU gate. To
call a leaf function, a developer can load the index of
a leaf function into the rax register and call ENCLU. For
example, setting rax to 0x0 will call EREPORT, 0x1 will
call EGETKEY, etc. Each leaf function requires different pa-
rameters, which are passed through the rbx, rcx, and rdx
registers. For example, EEXIT, one of the leaf functions
of ENCLU, requires two parameters: 1) a target address
outside the enclave and 2) the address of the current Asyn-
chronous Exit Pointer (AEP). These two parameters are
passed through the rbx and rcx registers. After setting the
required parameters, the developer can now set rax to the
index of the leaf function (in this case, 0x4). Finally, ex-
ecuting the ENCLU instruction will execute the EEXIT leaf
function. This calling convention for leaf functions is very
similar to invoking a system call in Linux or Windows on
the x86 architecture.
3 Overview
In this section, we present an overview of Dark-ROP
with a simple enclave program that has a buffer overflow
vulnerability as an example.
// data to be returned
Data *data = new Data();
// a stack buffer in the enclave
char in_enclave_buffer[0x100];
1 // EENTER can run this function
2 Data* import_data_to_enclave(char *out_of_enclave_memory)
3 {
4
5
6
7
8
9
10
11
12
13
14
15
16 }
// possible buffer overflow
strcpy(in_enclave_buffer, out_of_enclave_memory);
// ...
// do some processing
// ...
return data;
Figure 2: An example enclave program that has a buffer over-
flow vulnerability. The untrusted program can call an exported
function import_data_to_enclave() in the enclave through the
EENTER leaf function. The function will copy data from memory
outside the enclave to an in-enclave stack buffer. However, the
buffer can overflow during the copy because the size of data to
be copied is not checked.
3.1 Launching the ROP attack in SGX
In particular,
Figure 2 shows an example of a potentially ex-
ploitable vulnerability.
the function
import_data_to_enclave() reads the data from outside
the enclave and creates a class object (i.e., Data in the
code) by parsing the raw data. An untrusted program can
invoke a function in the enclave (from outside the enclave)
if an enclave program has exported the function. To call
the function in the enclave, the untrusted program can set
the rbx register as the address of the Thread Control Struc-
ture (TCS), which is a data structure that contains the entry
point of the enclave (e.g., the import_data_to_enclave()
function in this case) and its argument (i.e., the attack
buffer as out_of_enclave_memory) as a pointer of the un-
trusted memory. Then, running EENTER will invoke the
function in the enclave. In the function, the data at the
untrusted memory will be copied (see line 10) using the
strcpy() function, which does not check the size of the
data to be copied so that the attacker can exploit this buffer
overflow vulnerability. While the vulnerability does not
have to be in this form specifically, the code is very simple
to represent a general example of an enclave program that
has an exploitable vulnerability.
To launch the ROP attack on the vulnerability, the at-
tacker can fill the attack buffer to more than the size of
the buffer in the enclave, which is 0x100, to overwrite the
return address and then build the stack with ROP gadgets
and function arguments to control the program execution
at the attacker’s will.
However, the ROP attack against enclaves will not
simply work in the typical way because the information
for the execution environment as well as the program
itself is encrypted, so it is hidden to attackers.
526    26th USENIX Security Symposium
USENIX Association
ENCLU0x00x10x60x4……EREPORTEGETKEYEEXITEMODPECreate a cryptographic reportRetrieve a cryptographic keySynchronously exit an enclaveExtend an EPC access permissionInstructionRAX valueLeaf functionDescriptionChallenge: encrypted binary makes the ROP attack
difficult.
In the example, since we know the source
code of the program, we can easily find the location and
the triggering condition of the vulnerability. However,
in the most secure configuration of the SGX platform
(deploying an encrypted binary as in §2.1), the assumption
that we know the location of the vulnerability and the
condition that triggers vulnerability does not hold. This
makes the launching of an ROP attack harder even if
there is a buffer overflow vulnerability because attackers
are required to find the vulnerability while having no
knowledge of the target program.
Additionally, finding gadgets over the encrypted pro-
gram is another challenge that is orthogonal to finding
vulnerabilities. Suppose that an attacker could find the
location and the condition for triggering a vulnerability.
To successfully exploit the vulnerability and take control
of the program, the attacker is required to launch a code
reuse attack (if there is no code injection vulnerability)
through return-oriented programming (ROP).
Unfortunately, chaining the ROP gadgets to execute
an arbitrary function is exceptionally difficult in enclaves
because the program binary is encrypted. Deploying a
program binary in a fully encrypted form in SGX results
in the code in the binary being completely unknown to the
attacker. In other words, the attacker has to find gadgets
for their execution and chain them together under the
blindness condition.
Although a recent work on Blind ROP [7] demonstrates
an ROP attack against unknown code, the attack relies
critically on properties of certain server applications that
are based on the fork() system call, which does not hold
for SGX enclaves.
3.2 The Dark-ROP Attack
Consequently, to launch a successful ROP attack against
the enclaves in SGX, the attacker must overcome the
aforementioned challenges. In Dark-ROP attack, we re-
solve the challenges as follows.
Finding a buffer overflow vulnerability.
To find a
buffer overflow vulnerability in an encrypted enclave pro-
gram, the Dark-ROP attack exploits the exception han-
dling mechanism of SGX as follows.
For an enclave program, it has a fixed number of (ex-
ported) entry points (i.e., functions of enclave program)
specified in the enclave configuration. Because these are
the only point at which an untrusted OS can supply an in-
put to the enclave program, we enumerate those functions
and apply fuzzing to its argument to find any memory
corruption vulnerability. In fuzzing functions, we can de-
tect a vulnerability by exploiting the exception handling
mechanism of the enclave. Since an enclave program
runs as a user-level program, which cannot handle pro-
cessor exceptions, when it encounters memory corruption
(i.e., page fault) on its execution, the enclave gives back
the execution to the untrusted operating system to handle
the fault. This fall-back routine for handling the excep-
tion is called Asynchronous Enclave Exit (AEX). If we
detect any AEX caused by a page fault on fuzzing, this
means that there was a memory corruption so that we set
the function and the argument that currently fuzzed as a
candidate for the buffer overflow vulnerability.
Next, to detect vulnerability triggering conditions such
as the size of the buffer and the location of the return
address, we exploit the value of the CR2 register at the
AEX handler, the register that stores the source address
of a page fault. By constructing the fuzzing buffer to
contain an invalid memory address (e.g. 0x41414000) in
the buffer, we can determine the potential target of the
return address if the exception arose from the supplied
value (i.e., if the value of CR2 is 0x41414000).
Finding gadgets in darkness.
After finding a
buffer overflow vulnerability in an enclave program, the
Dark-ROP attack finds gadgets to exploit the vulnerabil-
ity. To overcome the challenge of finding gadgets against
the unknown binary, we make the following assumptions
on the code in the binary.
First, the code must have the ENCLU instruction. This
is always true for the binaries in enclaves because the
enclave program can call the leaf functions only with the
ENCLU instruction. Without having the instruction, the
enclave cannot enjoy the features provided by SGX.
Second, the code should have the ROP gadgets that
consist of one or multiple “pop a register” (i.e., pop rbx)
instructions before the return instruction, especially for
the rax, rbx, rcx, rdx, rdi, and rsi registers. The reason
we require pop gadgets for such registers is that these
registers are used for the index of the leaf function (rax),
for arguments passing (the other registers) for the leaf
function, and a library function in the x86-64 architecture.
For the rbx, rcx, and rdx registers, the ENCLU instruction
uses them for passing the arguments. Similarly, for the
rdi and rsi registers, the library functions use them for
passing the arguments. To successfully call the leaf func-
tions and library functions, the value of these registers
must be under the control of the attacker.
The second assumption is also a very common case for
the enclave binary because these registers are callee-saved
registers. As mentioned above, the leaf functions and the
library functions use them for passing the argument so
that the callee must have a routine that restores the regis-
ters, and this is typically done by running multiple “pop
a register” instructions before the return of the function.
Thus, the code typically includes the “pop a register” gad-
get for these registers. Furthermore, since rax is reserved
USENIX Association
26th USENIX Security Symposium    527
for passing the return value of the function in the x86-64
architecture, having an instruction such as mov rax, rbx
before the function epilogue is a very common case.
Third, we assume that the program in the enclave has a
function that operates as a memcpy function (e.g., memcpy,
memmove, or strncpy, etc.). The assumption still targets a