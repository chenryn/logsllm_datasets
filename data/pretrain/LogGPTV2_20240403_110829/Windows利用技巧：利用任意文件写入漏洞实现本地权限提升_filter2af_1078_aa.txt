# Windows利用技巧：利用任意文件写入漏洞实现本地权限提升
##### 译文声明
本文是翻译文章，文章来源：https://googleprojectzero.blogspot.com/
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
之前我曾在一篇[文章](https://googleprojectzero.blogspot.com/2017/08/windows-exploitation-tricks-arbitrary.html)中介绍过一种技术，可以利用Windows系统上的任意目录创建漏洞来获得系统上任意文件的访问权限。在即将推出的Spring
Creators
Update（RS4）系统上，前面提到过的这种漏洞（滥用挂载点链接到文件）已经被修复。这是非常典型的一个良性例子，通过对漏洞利用方法的详细分析，开发者就能具有充足的动力，寻找修复漏洞利用方法的各种途径。
在本文中，我将介绍一种新的技术来利用Windows
10系统上更为常见的任意文件写入漏洞。微软也许会进一步加固操作系统，使这类漏洞利用起来更加困难。最近微软修复了Project
Zero报告的一个漏洞（issue [1428](https://bugs.chromium.org/p/project-zero/issues/detail?id=1428)），这里我会详细漏洞细节，向大家演示该漏洞的利用方法。
所谓的任意文件写入漏洞，指的是用户可以在正常情况下无法访问的某个目录中创建或者修改文件。之所以会出现这种情况，原因可能是某个特权服务没有正确过滤用户传递进来的信息，符号链接植入攻击也有可能导致这种后果（用户将链接写入某个目录中，随后被特权服务所使用）。如果攻击者不仅能够控制文件的写入位置，也能控制文件内容，那么这是最为理想的一种漏洞场景，本文针对的正是这种场景。
任意文件写入漏洞常见的一种利用方法就是执行[DLL劫持](https://cwe.mitre.org/data/definitions/427.html)攻击。当Windows可执行文件开始执行时，NTDLL中的初始化loader会尝试查找所有导入的DLL。loader对DLL的检查过程比我们想象中的还要复杂一些，简而言之，该过程包含如下几个步骤：
1、检查[Known
DLLs](https://blogs.msdn.microsoft.com/larryosterman/2004/07/19/what-are-known-dlls-anyway/)，也就是操作系统预先缓存的一些已知DLL的列表。如果找到对应的DLL，则将DLL从预加载的section对象映射到内存中。
2、检查应用目录。比如如果程序正在导入`TEST.DLL`，并且程序所处目录为`C:APP`，那么loader就会检查`C:APPTEST.DLL`这个文件。
3、检查系统目录，比如`C:WINDOWSSYSTEM32`以及`C:WINDOWS`。
4、如果以上查找过程全部失败，则搜索当前的`PATH`环境变量。
DLL劫持的目标是找到处于高权限运行下的某个可执行程序，该程序会从某个目录加载某个DLL文件，而攻击者刚好可以往该目录中写入数据。只有当loader无法从前几个检查步骤中找到对应的DLL，这种劫持攻击才能奏效。
如果想成功执行DLL劫持攻击，有两个问题比较棘手，需要解决：
1、我们通常需要创建特权进程的一个新实例，因为当该进程首次执行时，待导入的大多数DLL已经被解析过。
2、大多数以特权用户身份运行的系统二进制文件、可执行程序以及DLL基本都位于`SYSTEM32`目录中。
第二个问题意味着在步骤2以及步骤3中，loader始终会去搜索`SYSTEM32`目录中的DLL文件。如果我们无法在目标环境中覆盖DLL文件（如果DLL已处于载入状态，则无法写入该文件），就很难找到合适的DLL来劫持。为了绕过这些问题，一种典型的方法就是挑选不在`SYSTEM32`中的某个可执行文件，并且该文件很容易被激活（比如通过加载COM服务器或者运行计划任务）。
即使我们找到了合适的目标程序来进行DLL劫持，但劫持过程看起来可能略显丑陋。某些情况下我们需要实现原始DLL的导出函数，否则DLL无法被成功加载。在其他情况下，运行代码的最佳位置就是DllMain，但这会引入其他问题（比如在[loader
lock](https://msdn.microsoft.com/en-us/library/windows/desktop/dn633971%28v=vs.85%29.aspx)中运行代码）。对于我们来说，最好的一种场景就是找到一个特权服务，该服务可以加载任意DLL，不需要劫持，也不需要生成“正确”的特权进程。那么问题来了，这种服务是否真的存在？
事实证明的确存在这样一个服务，并且该服务之前已经被滥用过两次，一次是被Lokihardt用来实现沙箱逃逸，另一次是被我用来实现用户权限到系统权限的[提升](https://bugs.chromium.org/p/project-zero/issues/detail?id=887)。这个服务的名称为“Microsoft (R) Diagnostics Hub Standard
Collector Service”，我们可以简称为DiagHub。
DiagHub是Windows 10引入的一种服务，Windows 7以及8.1上也有执行类似任务的服务：IE ETW
Collector。该服务的目的是通过ETW（Event Tracing for Windows）为沙箱应用（特别是Edge以及Internet
Explorer）收集诊断信息。该服务有一个有趣的功能，可以配置为从`SYSTEM32`目录中加载任意一个DLL，这正是Lokihardt和我利用的功能，最终借此实现了权限提升（EoP）。该服务的所有功能均通过已注册的一个DCOM对象对外公开，因此为了加载我们自己的DLL，我们需要弄清楚如何调用这个DCOM对象上的方法。现在你可以直接跳到本文尾部，但如果你想知道我如何发现DCOM对象的具体实现方式，可以继续阅读以下内容。
## 二、逆向分析DCOM对象
接下来请跟随我的脚步，一步步探索如何发现某个未知DCOM对象所支持的接口，找到该接口的实现方式，以便对其进行逆向分析。为了完成任务，一般我会使用两种方法，要么使用IDA
Pro或者类似工具进行逆向分析，要么先在系统上做些调研工作，以缩小调查范围。这里我们可以使用第二种方法，因为该方法能够提供更加丰富的信息。我并不了解Lokihardt解决问题的方法，这里我们以自己的方式解决这个问题。
选择这种方法，我们需要用到一些工具，比如github上的[OleViewDotNet](https://github.com/tyranid/oleviewdotnet/releases)
v1.4+（OVDN）以及[SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk)中的WinDBG工具。第一步是找到DCOM对象的注册信息，查找那些接口可以访问。我们知道DCOM对象托管在某个服务中，所以启动OVDN工具后，我们可以使用
**Registry ⇒ Local Services** 菜单，这样就能导入对外开放COM对象的已注册的系统服务。如果此时你搜索“Microsoft
(R) Diagnostics Hub Standard Collector
Service”这个服务（建议使用过滤器，查找起来更加方便），那么应该能在服务列表中找到它的身影。打开该服务的树形结构后，我们可以看到“Diagnostics
Hub Standard Collector
Service”这个子节点，这就是托管的DCOM对象。如果我们打开这个节点，该工具就会创建该对象，然后查询可以远程访问的所有COM接口，这样我们就能知道该对象支持的所有接口，如下图所示：
这里我们需要检查一下访问这个DCOM对象所需的安全等级。右键单击class节点，选择 **View Access Permissions** 或者
**View Launch Permissions** ，这样就能显示权限信息。在本例中，我们可以从IE Protected
Mode或者Edge的AppContainer沙箱（包括LPAC）来访问这个DCOM对象。
在这些接口中我们只关心标准的接口。有些时候目标中可能存在比较有趣的一些接口，但本例中我们并没有找到这些接口。在这些标准接口中有两个我们比较关心：
_IStandardCollectorAuthorizationService_ 以及 _IStandardCollectorService_
。其实我可以告诉大家 _IStandardCollectorService_
服务比较有趣，但由于下面的操作过程对每个接口来说都适用，因此我们可以随便挑一个接口来处理。如果我们右键单击接口节点，选择 **Properties**
，就可以查看该注册接口的详细信息。
这里没有太多的信息可以帮助我们，不过我们可以发现这个接口上对应有8个方法。与其他许多COM注册信息一样，这个值也有可能是一个错误值，不过这里我们选择信任这个信息。为了理解这些方法具体是什么，我们需要跟踪COM服务器中`IStandardCollectorService`的实现方式。掌握这个信息后，我们就能集中逆向分析精力来分析正确的二进制程序以及正确的方法。对于进程内COM对象而言，想完成这个任务相对来说比较容易，因为我们可以通过dereference部分指针（即*操作）来直接查询某个对象的VTable指针。然而，对于进程外（OOP）的情况来说就比较复杂一些，这是因为我们所调用的进程内对象实际上是远程对象的代理，如下图所示：
即便如此，我们依然可以通过提取保存在服务器进程中的对象信息来查找OOP对象的VTable。在之前的界面中右键点击“Diagnostics Hub
Standard Collector Service”节点，选择 **Create Instance** ，这样可以创建COM对象的一个新实例，如下图所示：
这个实例可以告诉我们许多基本信息，比如该对象的CLSID（这里这个值为`{42CBFAA7-A4A7-47BB-B422-BD10E9D02700}`，后面我们会用到这个值）以及支持的接口信息。现在需要确保的是我们已连接至我们感兴趣的那个接口。我们可以先选择窗口下半部分的`IStandardCollectorService`服务，然后在
**Operations** 菜单的底部，选择 **Marshal ⇒ View Properties** 。如果操作成功，我们可以看到如下界面：
这个界面包含很多信息，但最重要的两个信息是托管服务的Process ID以及IPID（Interface Pointer
Identifier）。本例中由于该服务运行在自己的进程中，因此Process
ID是显而易见的一个值，但这并不适用于所有情况：有时候当我们创建一个COM对象时，我们并不知道哪个进程在托管COM服务器，此时这个信息就非常有用。IPID是DCOM对象服务器端托管进程中的唯一标识，我们可以使用Process
ID以及IPID值来查找这个服务器，然后从中找出实现COM方法的VTable的具体位置。需要注意的是，与IPID对应的Process
ID的大小最大为16个比特，但现在Windows中可能存在更大的PID，因此我们有时候需要手动查找目标进程，或者多次重启服务，直到得到合适的PID值为止。
现在我们可以利用OVDN的一个功能，访问服务器进程的内存空间，查找对应的IPID信息。当然你可以通过主菜单的 **Object ⇒ Processes**
来获取所有进程中对应的这个信息，但我们已经知道待处理的是哪个进程，因此只需要点击上图中Process ID旁边的 **View**
按钮即可。对了，我们需要以管理员权限运行OVDN，否则无法打开服务进程。如果前面我们没有以管理员权限运行，那么此时该工具会要求我们配置符号支持（symbol
support）选项，因为OVDN需要公共符号（public symbol）来查找COM
DLL中待解析的正确位置。我们需要使用WinDBG自带的DBGHELP.DLL，因为该DLL支持远程符号服务器。符号选项的配置信息如下图所示：
如果所有选项配置正确，并且我们也以管理员权限来运行该工具，那么我们应该能够获得关于IPID的更多信息，如下图所示：
这里最有用的两条信息就是Interface指针（堆分配对象的地址，以便我们查看该对象状态）以及接口对应的VTable指针。VTable地址可以告诉我们COM服务器实现的具体位置。在上图中，我们可知VTable位于与主可执行文（DiagnosticsHub.StandardCollector.Server）不同的另一个模块中（DiagnosticsHub.StandardCollector.Runtime）。我们可以使用WinDBG
attach到服务进程上，导出VTable地址处的符号，验证这个VTable地址是否正确。前文提到过这里有8个方法，为了找到这8个方法，我们可以使用如下命令：
    dqs DiagnosticsHub_StandardCollector_Runtime+0x36C78 L8
需要注意的是，WinDBG会将模块名中的点转化为下划线。如果这条命令执行成功，我们可以得到如下结果：
提取出这些信息后，我们就可以知道这些方法的名称（如下所示）以及方法在二进制中的具体地址。我们可以设置断点，查看正常操作期间有哪些方法被调用，或者可以根据这些信息开始我们的逆向分析之旅。
    ATL::CComObject::QueryInterface
    ATL::CComObjectCached::AddRef
    ATL::CComObjectCached::Release
    StandardCollectorService::CreateSession
    StandardCollectorService::GetSession
    StandardCollectorService::DestroySession
    StandardCollectorService::DestroySessionAsync
    StandardCollectorService::AddLifetimeMonitorProcessIdForSession
我们得到的方法貌似是正确的：最开头的3个方法为COM对象的标准方法，由ATL库实现，后面跟着5个方法，由`StandardCollectorService`类实现。作为公共符号，我们无法从中了解需要往COM服务器传递哪些参数。由于C++名称中包含某些类型信息，IDA
Pro有可能提取出我们所需的参数信息，但不一定能告诉我们传递给函数的任何结构体的具体格式。幸运的是，COM代理在具体实现中使用了NDR（Network
Data
Representation）解释器来对数据进行编码，我们有可能将NDR字节码还原成我们可以理解的格式。对于本文的这个案例，我们可以回到最初的服务信息窗口，右键点击
**IStandardCollectorService** 节点，选择 **View Proxy Definition**
。这样OVDN就能解析NDR代理信息，如下所示：
查看代理的定义后，我们也能解析出该代理库实现的其他任何接口，这些信息可能对我们后面的逆向分析来说有点用。经过反编译的代理定义代码类似于C#形式的伪代码，我们可以根据需要转化为能够正常工作的C#或者C++代码。需要注意的是代理定义中并不包含方法的名称，但我们之前已经提取过这些信息。因此，稍作处理后，我们就能得到如下定义代码：
    [uuid("0d8af6b7-efd5-4f6d-a834-314740ab8caa")]
    struct IStandardCollectorService : IUnknown {
       HRESULT CreateSession(_In_ struct Struct_24* p0, 
                             _In_ IStandardCollectorClientDelegate* p1,
                             _Out_ ICollectionSession** p2);
       HRESULT GetSession(_In_ GUID* p0, _Out_ ICollectionSession** p1);
       HRESULT DestroySession(_In_ GUID* p0);
       HRESULT DestroySessionAsync(_In_ GUID* p0);
       HRESULT AddLifetimeMonitorProcessIdForSession(_In_ GUID* p0, [In] int p1);
    }
目前我们还缺失最后一块拼图：我们并不知道`Struct_24`结构体的具体定义。这个信息有可能通过逆向分析得到，但幸运的是这里我们不需要那么麻烦。NDR字节码知道如何编解码这个结构，因此OVDN可以自动地提取出这个结构的定义：我们可以选择