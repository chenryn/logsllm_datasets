and improved an existing incomplete ARM port3 of S2E, to
suit the needs of dynamic analysis of ﬁrmware binaries.
To control the execution of code in more detail, S2E pro-
vides a powerful plugin interface that allows instrumentation
of virtually every aspect of execution. Any emulation event
(e.g., translation of a basic block, instruction translation or
execution, memory accesses, processor exceptions) can be
intercepted by a plugin, which then can modify the execution
state according to its needs. This modular architecture let
us perform dynamic analysis of ﬁrmware behaviour, such
as recording and sandboxing memory accesses, performing
live migration of subroutines (see Section III-C), symbolically
executing speciﬁc portion of code as well as detecting vulner-
abilities (see Section V).
S2E is connected through three different control interfaces
with Avatar: the ﬁrst interface is a GDB debug connection
using the GDB serial protocol. Avatar is connecting to this
interface using a GDB instance controlled via the GDB/MI
protocol. This connection is used for ﬁne-grained control over
the execution, such as putting breakpoints, single-stepping the
execution, and inspecting register values. The second interface
is Qemu’s Management Protocol (QMP) interface, a JSON-
based request-response protocol. Though detailed virtual ma-
chine control is possible through this interface, it is currently
only used to dynamically change S2E’s conﬁguration at run
time. This is done by accessing S2E through its Lua interface,
which is called from Lua code embedded in the JSON requests.
The third interface is a plugin for S2E that
is triggered
whenever a memory access is performed. This S2E plugin
then forwards this request to Avatar, which in turn handles the
memory access (e.g., sends it to Avatar’s plugins), or forwards
it to the target.
Even though at the moment the only available emulator
back-end is for Qemu/S2E, the emulator interface is generic
and allows other emulators to be added easily.
2The
framework
http://s3.eurecom.fr/tools/avatar.
Avatar
is
open-source
and
available
at
3Our patches have been submitted to the ofﬁcial S2E project and are
currently under review for merging.
3
Fig. 1: Overview of Avatar.
On the target side, we developed three back-ends:
•
•
•
low-level access
to
A back-end that uses the GDB serial protocol
communicate with GDB servers (e.g., a debugger stub
installed on the device or a JTAG GDB server).
A back-end to support
to the
OpenOCD’s JTAG debugging interface via a telnet-
like protocol.
A back-end that talks to a custom Avatar debugger
proxy over an optimized binary protocol (which is
more efﬁcient
than the verbose protocol used by
GDB). This proxy can be installed in an embedded
device that lacks debugging hardware support (e.g.,
no hardware breakpoints) or on which such support
was permanently deactivated.
Even though this technique is in theory capable of perform-
ing dynamic analysis on unknown ﬁrmwares, it has several
practical limitations. First of all, the execution is very slow.
Using a serial debug channel at 38400 Baud, the system can
perform around ﬁve memory accesses per second, reducing
the overall emulation speed to the order of tens instructions
per second. Even worse, many physical devices have time-
critical sections that need to be executed in a short amount
of time or the execution would fail, making the system crash.
For example, DRAM initialization, timer accuracy and stability
checks belong to this category.
Moreover, tight hardware-polling loops (e.g., UART read-
with-timeout) become painfully slow in full separation mode.
Finally, regular interrupts (e.g., the clock tick) quickly overload
the limited bandwidth between the target system and the
emulator.
These limitations make the full separation approach viable
only to analyze a limited number of instructions or when the
user wants to focus only on particular events in more complex
ﬁrmwares. For this reason, Avatar supports arbitrary context-
switching between the emulator and the real device.
C. Context Switching
While it is possible to run the ﬁrmware code from be-
ginning to end inside the emulator, sometimes it
is more
efﬁcient to let the ﬁrmware run natively on the target device
for a certain amount of time. This allows, for example, to
execute the code without any delay until a particular point
of interest is reached, skipping through initialization routines
that may involve intensive I/O operations or network protocol
communications that may need to be performed in real-time.
In such cases, it is important to let the target device run the
ﬁrmware, while still monitoring the execution for regions of
code relevant to the current analysis. The ability of Avatar to
perform arbitrary context switches gives the user the ability
to quickly focus her analysis on a particular section of the
code, without the drawbacks of emulating the entire ﬁrmware
execution.
Starting the analysis at speciﬁc points of interest: In this
case the ﬁrmware starts the execution on the physical device
and runs natively until a certain pre-deﬁned event occurs (e.g.,
The proper target back-end has to be selected by the user
based on the characteristics and the debugging functionalities
provided by the hardware of the embedded device. For exam-
ple, in our experiments we used the OpenOCD back-end to
connect to the JTAG debugger of the mobile phone and of the
Econotag, while we used the Avatar proxy to perform dynamic
analysis of the hard drive ﬁrmware.
To analyze a ﬁrmware, an access to the ﬁrmware’s device
is needed. This can be either a debugging link (e.g., JTAG), a
way to load software or a code injection vulnerability. In cases
where a debugging stub, for example the GDB stub, is used,
an additional communication channel, e.g., an UART, is also
needed.
B. Full-Separation Mode
When Avatar is ﬁrst started on a previously unknown
ﬁrmware, it can be run in what we call “full-separation mode”.
In this conﬁguration, the entire ﬁrmware code is executed in
the emulator and the entire (memory) state is kept in the
physical device. In other words, for each instruction that is
executed by the emulator, the accessed memory addresses are
fetched from and written to the real memory of the embedded
system. At the same time, interrupts are intercepted by the
debugging stub in the physical system and forwarded back to
the emulator. Code and memory are perfectly separated, and
Avatar is responsible to link them together.
4
OpenOCDAvatarAnalysis scriptTargetbackendGDBadapterTelnetadapterBinProtoadapterGDB/MIadapterEmulatorbackendMemoryforwarderQMP/LuainterfaceGDBinterfaceConfigwriterEmulator RemoteMempluginS²EQMP/LuaQemuGDBQemuconfigTarget deviceIn-memorystubTarget state●Registers●CPU state●MemoryVM state●Registers●CPU state●MemoryQemuexecuterQemufrontendLLVMSymbolicstatesKLEETCGJTAGUARTAnalysisPluginsS²EhooksFig. 2: Avatar architecture and message exchange in full separation mode.
a breakpoint is reached or an exception is raised). At this
point, the execution on the physical device is frozen and the
state (e.g., the content of the CPU registers) is transferred to
the emulator, where the execution is resumed. An example
of this transition is described in Section VI-C, in which the
ﬁrmware of a mobile phone baseband chip is executed until
the phone receives an SMS, and then transferred by Avatar in
the emulator to perform further analysis.
Returning execution to the hardware: After the required
analysis is performed on the emulator, the execution of the
ﬁrmware can be transferred back to continue on the real device.
In this case, any state kept on the virtual environment is copied
back to the physical device. Depending on the user’s needs, it
is possible to switch again to the emulator at a later stage. This
approach is used in Section VI-A, in which the ﬁrmware of
a hard disk is started inside the emulator and later transferred
back to the disk.
D. Interrupts Handling
Software interrupts do not present a problem for our
framework, since they are issued by the ﬁrmware code and
the emulator takes care of calling the corresponding interrupt
handler directly. However, as shown in Figure 2, hardware
interrupts need to be trapped in the real hardware and for-
warded back to the emulator. In this case, the stub in the
embedded system receive the interrupt and forwards them to
Avatar’s target back-end. Finally, using the emulator back-
end, Avatar suspends the ﬁrmware execution and injects the
interrupt in the emulator.
Based on the circumstances in which the interrupt
generated, we distinguish three different cases:
is
•
•
Hardware interrupts that indicate the completion of a
task. These interrupts are issued by a device to indicate
that a particular task initiated by the code has been
completed. For example,
the UART send interrupt
indicates that the send buffer has been successfully
transmitted. This type of interrupts is easy to handle
because it just needs to be forwarded from the target
to the emulator.
Periodical hardware interrupts, e.g., the timer notiﬁca-
tions. These interrupts can be forwarded to the emula-
tor but their frequency needs to be scaled down to the
•
actual execution speed in the emulator. The equivalent
number of instructions between two interrupts should
be executed in the emulator as it would on the target
running in native mode. In our current implementation,
an Avatar plugin detects periodic interrupts and report
their information to the user, who can decide how to
handle each class. For example, the user can instruct
Avatar to drop the clock interrupts on the device and
just generate them (at the right frequency) on the
emulator, thus saving bandwidth and increasing the
analysis performance.
Hardware interrupts that notify of an external event.
For example the receive interrupt of an UART indi-
cates that new data on the UART buffer is available.
The emulation strategy for those interrupts depends
on the frequency of the external event. For events
that require previous activity (e.g., a request-response
protocol where the response triggers an interrupt) a
simple forwarding strategy can be used. For unrelated
events that happen very frequently (i.e., where the
handler in the emulator cannot process the interrupt
in time before the next interrupt is generated) the user
can choose if she wants to suppress some of them or
to handle the interrupt by migrating the handler itself
back to the embedded device (see Section IV)
While the straightforward interrupt forwarding does not
present any problem for Avatar, when the user needs to tune
the framework to handle speciﬁc cases (e.g., regular or very
frequent interrupts) the stub needs to be able to distinguish
between them. Unfortunately, this task is often difﬁcult.
Interrupts de-multiplexing:
In a traditional, x86-based,
personal computer there is a standard interrupt controller
that handles interrupt lines from each device and peripheral.
However, on ARM-based systems there are only two interrupt
lines directly attached and visible to the processor: IRQ and
FIQ. Because of this embedded devices often use an interrupt
multiplexer (or controller) peripheral that is normally included
as an hardware block (“IP core”) on the same chip. The disad-
vantage for a user is that at the point where the interrupt vector
routine is called, all
interrupt signals are still multiplexed
together. The driver for a particular interrupt multiplexer will
then query the underlying hardware multiplexer to identify
5
 FirmwareEmbeddeddeviceEmulatorProxyAvatarEmulatorBackendTargetBackendPlugins  read/write memory   interruptread/write memoryvaluevalue   interrupt       . . .mov   r2, r0mov   r3, r1add    r3, r3, #1add    r2, ip, r2ldr      r2, [r2, #0cmp   r2, r3       . . . which line was actually triggered and then forward the event
to the handler registered for this interrupt.
Now, suppose the user wants to instruct Avatar to suppress
a particular interrupt on the device (e.g., the timer), while
still letting through the ones associated to important hardware
events that need to be forwarded to the emulator. In this case,
the proxy needs to take a decision based on the interrupt
type which is unfortunately not available when the interrupt
is received.
In this case, the user needs to disassemble the interrupt
vector handler, and follow the code ﬂow until the code of the
interrupt controller driver branches into different functions that
handle each device’s interrupt. At this point, she can specify
these program points to Avatar that can terminate the interrupt
vector’s execution and signal to the proxy that an interrupt
has been identiﬁed. The proxy then sends the interrupt event
to Avatar. Now the target backend of Avatar can suppress
a particular interrupt by instructing the proxy to drop the
corresponding event.
E. Replaying Hardware Interaction
It is quite common for a ﬁrmware to have several sec-
tions that require only a limited interaction with dedicated
peripherals. In this case, the I/O operations can be recorded by
Avatar and transparently replayed during the next execution of
the ﬁrmware.
the ﬁrmware without
This allows the user to test
the
bottleneck of the interaction with the physical device. In this
mode of operation the ﬁrmware itself or parts of it (e.g.,
applications) can be signiﬁcantly changed, as long as the
order of I/O interactions is not modiﬁed. This is a major
advantage over resuming a snapshot, which requires the full
code path until the snapshot point to be executed to ensure
that peripherals are in the state the snapshot expects them to
be in.
IV. OVERCOMING THE LIMITS OF FULL SEPARATION
The techniques introduced in the previous section are
enough to perform dynamic analysis on small portions of a
ﬁrmware code. However, sometimes the internals and behavior
of the system are completely unknown. In those cases, it can
be very useful to perform the analysis on larger portions of
the binary, or, in the extreme case, on the entire ﬁrmware.
In this case, the performance of Avatar running in full
separation mode poses a great limitation to the usability of
our framework. To overcome this problem, in this section we
present two techniques designed to overcome the limits of full
separation by moving part of the code to the physical device
and part of the memory to the emulator. This results in a
considerable reduction in the number of messages forwarded
by Avatar between the emulator and the target, and therefore
a large improvement in the overall performance of the analysis
system.
A. Memory Optimization
Forwarding all memory accesses from the emulator to the
target over a limited-bandwidth channel like UART or JTAG
incurs in a heavy performance penalty. For example, in our
6
Access type
Code
Stack & data
I/O
Read
61,632
646
3,614
Write
-
1,795
2,097
Cumulative
61,632
64,073
69,784
TABLE I: Number of memory accesses grouped by memory
regions for the HDD bootloader.