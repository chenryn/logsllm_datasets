title:Design and Implementation of an Extrusion-based Break-In Detector
for Personal Computers
author:Weidong Cui and
Randy H. Katz and
Wai-tian Tan
Design and Implementation of an Extrusion-based Break-In Detector for
Personal Computers
Weidong Cui, Randy H. Katz, Wai-tian Tan
University of California, Berkeley and Hewlett-Packard Laboratories
fwdc,PI:EMAIL, PI:EMAIL
Abstract
An increasing variety of malware, such as worms, spy-
ware and adware, threatens both personal and business
computing. Remotely controlled bot networks of compro-
mised systems are growing quickly. In this paper, we tackle
the problem of automated detection of break-ins caused by
unknown malware targeting personal computers. We de-
velop a host based system, BINDER (Break-IN DEtectoR),
to detect break-ins by capturing user unintended malicious
outbound connections (referred to as extrusions). To in-
fer user intent, BINDER correlates outbound connections
with user-driven input at the process level under the as-
sumption that user intent is implied by user-driven input.
Thus BINDER can detect a large class of unknown malware
such as worms, spyware and adware without requiring sig-
natures. We have successfully used BINDER to detect real
world spyware on daily used computers and email worms
on a controlled testbed with very small false positives.
1 Introduction
An increasing variety of malware like worms, spyware
and adware threatens both personal and business comput-
ing. Remotely controlled bot networks of compromised
systems are growing quickly [28]. Many research ef-
forts [16, 21, 30] and commercial products [25, 37] prevent
break-ins by (cid:2)ltering either known malware or unknown
malware exploiting known vulnerabilities. To protect com-
puter systems from rapidly evolving malware, these solu-
tions have two requirements. First, a central entity must
rapidly generate signatures of new malware after it is de-
tected. Second, distributed computer systems must down-
load and apply these signatures to their local databases be-
fore they are attacked. However, these can leave com-
puter systems temporarily unprotected from newly emerg-
ing malware.
In particular, worms can propagate much
more rapidly than humans can respond in terms of gener-
ation and distribution of signatures [22]. In this paper, we
take a different approach, focusing on fast automated mech-
anisms for detecting break-ins of new unknown malware af-
ter a break-in occurs, as a way of mitigating damage. As a
complement to existing prevention schemes, our approach
decreases the danger of information leak and protects com-
puters and networks from more severe damage.
A large class of malware makes malicious outbound net-
work connections either for self-propagation (worms) or to
disclose user information (spyware/adware). Our key ob-
servation is that outbound network connections from a com-
promised personal computer (used locally by a single user
at any time) can be classi(cid:2)ed into three categories: user in-
tended, user unintended benign, user unintended malicious
(referred to as extrusions. Extrusion is also de(cid:2)ned as unau-
thorized transfer of digital assets in some other context.) In
this paper, we present the architecture, design, and evalu-
ation of BINDER (Break-IN DEtectoR), a host-based sys-
tem that detects break-ins of new unknown malware on per-
sonal computers by capturing their extrusions. The concept
of BINDER was presented in a prior short publication [2].
Here we elaborate on the concept, and focus on its imple-
mentation and evaluation. To the best of our knowledge,
BINDER is the (cid:2)rst system to take advantage of user intent
for host-based intrusion detection.
Under the assumption that user intent is implied by user-
driven input. BINDER can infer user intent by correlating
outbound network connections (initiated by the local per-
sonal computer) with user-driven input (key strokes and
mouse clicks) at the process level.
(We do not consider
inbound connections (initiated by a remote computer) be-
cause most of them are malicious, and (cid:2)rewalls are designed
to block such traf(cid:2)c.) Our key assumption is that outbound
network connections made by a process that receives user
input a short time ago is user intended. BINDER also treats
repeated connections as user intended as long as the (cid:2)rst one
was user intended. By doing this, BINDER can handle the
case of automatic refreshing web pages and polling emails.
Among user unintended outbound connections, BINDER
uses a small whitelist to differentiate benign traf(cid:2)c from
malicious traf(cid:2)c. These benign outbound connections in-
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
clude system administration and checking software or secu-
rity updates. Our Windows prototype of BINDER has 15
whitelist rules. Thus BINDER can detect a large class of
malware such as worms, spyware and adware that (1) run
as background processes, (2) do not receive any user-driven
input, (3) and make outbound network connections.
By testing a Windows prototype both on multiple user
systems and in a testbed environment, we demonstrated that
BINDER is both effective and non-disruptive, successfully
detecting malware without signi(cid:2)cant false alarms. We ad-
mit that, due to limitations of today’s operating systems,
there are several ways for adversaries to evade BINDER.
These include actively subverting BINDER, hiding inside
other processes, faking user input, etc.
The remainder of this paper is organized as follows.
In Section 2, we compare BINDER with previous work
and highlight its contributions. We present the details of
BINDER’s extrusion detection algorithm in Section 3 and
describe its architecture and implementation in Section 4.
In Section 5, we demonstrate our evaluation methodology
and experimental results. We discuss BINDER’s limitations
and possible solutions in Section 6 and conclude the paper
in Section 7.
2 Related Work
Many research efforts [16, 21, 30] and commercial prod-
ucts [25, 37] have focused on preventing break-ins by (cid:2)lter-
ing known exploits or unknown ones exploiting known vul-
nerabilities. Complementary to these solutions, BINDER
can detect break-ins of unknown new malware before their
signatures are widely distributed.
In addition to signature-based (cid:2)ltering of inbound con-
nections, ZoneAlarm’s Program Control provides a control
over which program is allowed to start outbound connec-
tions. It requires users to construct a complete list of le-
gitimate network programs, which is beyond the capability
of an average user. Compared with ZoneAlarm, BINDER
controls outbound connections based on user intent. This
gives BINDER two advantages. First, BINDER can de-
tect compromised programs (like web browser programs)
that otherwise are allowed to make outbound connections
by ZoneAlarm because they are on its whitelist. Second,
BINDER has a much smaller whitelist, which makes it pos-
sible to automate the management of whitelist.
Anomaly-based intrusion detection [5, 10, 36] have been
studied for detecting unknown malware. The performance
of anomaly-based approaches is very limited in practice
due to its high false positive rate. BINDER leverages the
unique characteristic of personal computers(cid:151)user intent(cid:151)
to achieve minimal false alarms.
In the past few years, computer worms and spyware [20]
have been a menace to both personal computing [27] and
large networks [15]. Fast worm detection and contain-
ment becomes critical since worms can propagate much
more rapidly than human response [22]. Most research ef-
forts [7, 32, 33] have focused on random scanning worms.
Instead of targeting at one type of malware, BINDER is
simple and works across many kinds of malware such as
worms, spyware and adware on personal computers.
There have been research efforts on pro(cid:2)ling user be-
havior for detecting masquerade attacks and the insider
threat [4, 11]. Instead of attempting to model user behavior,
BINDER leverages a simple assumption that user intent is
implied by user input, and outbound network connections
made by a process that receives user input a short time ago
is user intended. This enables BINDER to detect a large
class of malware and achieve minimal false alarms.
3 Algorithm Design
3.1 Overview
Our goal is to automatically detect break-ins of new un-
known malware on personal computers. BINDER’s design
should achieve:
(cid:15) Minimal false positives: This is critical for any auto-
matic intrusion detection system.
(cid:15) Generality: BINDER should work for a large class of
malware without the need for signatures, and regard-
less of how the malware infects the system.
(cid:15) Small overhead: BINDER must not use intrusive
probing and adversely affect the performance of the
host computer.
Our key observation is that outbound network connec-
tions from a compromised personal computer can be clas-
si(cid:2)ed into three categories: user intended, user unintended
benign, and user unintended malicious (referred to as extru-
sions). BINDER detects certain kinds of malware by cap-
turing their extrusions. (We will use connections and out-
bound connections interchangeably unless otherwise speci-
(cid:2)ed.)
In BINDER, we assume that user intent is implied by
user-driven activities and malware runs as standalone pro-
cesses. For those that hide under other processes by ex-
ploiting techniques proposed in [17], the current BINDER
prototype is unable to detect them. We look at this as one
of the limitations of today’s operating systems. We will dis-
cuss more detailed attacks, countermeasures and potential
solutions in Section 6.
In the rest of this section, we (cid:2)rst demonstrate how user
intended connections may be initiated. Then, we describe
the extrusion detection algorithm. Finally, we discuss how
malware can be detected by this algorithm.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
3.2 Inferring User Intent
To study how user intended connections may be initi-
ated, we consider three kinds of events: user events (user
input), process events (process start and process (cid:2)nish), and
network events (connection request, data arrival and domain
name lookup). It is natural for a user input or data arrival
event to trigger a new connection in the same process. For
example, one clicks a link in IE, then IE will make new con-
nections to download the requested web page. It is also nor-
mal to repeat a recent connection in the same process. For
example, email clients repeatedly pull emails from the same
email server. However, we also need to correlate events
between different processes. For example, when a newly
launched IE process makes outbound connections to down-
load the default home page, it is its parent process(cid:151)usually
the shell process explorer.exe(cid:151)that received the user in-
put. In general, a user intended connection must be trig-
gered by one of the rules below
(cid:15) Intra-process rule: A connection of a process may be
triggered by a user input, data arrival or connection
request event of the same process.
(cid:15) Inter-process rule: A connection of a process may be
triggered by a user input or data arrival event of another
process.
To verify if a connection is triggered by the intra-process
rule, we just need to monitor all user and network activi-
ties of each single process. However, we need to monitor
all possible communications among processes to verify if
a connection is triggered by the inter-process rule. In our
current design, we only consider communications from a
parent process to its child process and use the following
parent-process rule to approximate the inter-process rule.
In the future we plan to extend BINDER’s design to con-
sider more possible communications among processes.
(cid:15) Parent-process rule: A connection of a process may be
triggered by a user input or data arrival event received
by its parent process before it is created.
3.3 Extrusion Detection Algorithm
The extrusion detection algorithm needs to decide if a
connection is user intended and if it is in the whitelist. The
whitelist covers three kinds of programs: system daemons,
applications automatically checking updates, and network
applications automatically started by the operating system.
Actual rules are speci(cid:2)c to each operating system and may
become user speci(cid:2)c. We discuss the whitelist for our Win-
dows prototype in Section 4. The main idea is to limit the
delay from a triggering event to a connection request event.
Note that, for data arrival events, we only consider those of
user intended connections. There are three possible delays
for a connection request made by process P.
(cid:15) Dnew: The delay since the last user input or data ar-
rival event received by the parent process of P before
P is created.
(cid:15) Dold: The delay since the last user input or data arrival
event received by P .
(cid:15) Dprev: The delay since the last connection request to
the same host or IP address made by P .
old
Dold is the reaction time of a process and Dnew includes
the loading time of a process as well. For user intended con-
nections, Dold and Dnew are of the order of seconds while
Dprev is of the order of minutes. BINDER declares a con-
nection to be an extrusion unless at least one of Dold, Dnew
and Dprev is within their respective thresholds of Dupper
new ,
prev . In Section 5.2 we will discuss how to
Dupper
choose these thresholds.
and Dupper
In the design of the extrusion detection algorithm, we
assume that BINDER can learn rules from previous false
alarms. Each rule includes an application name (the image
(cid:2)le name of a process) and a remote host name. The exis-
tence of a rule means that any connection to the host made
by a process of that application is not considered to be an
extrusion.
Given a connection request,
the detection algorithm
works as follows:
(cid:15) If it is in the rule set of previous false alarms, then quit;
(cid:15) If it is in the whitelist, then quit;
(cid:15) If Dprev exists and is less than Dupper
(cid:15) If Dnew exists and is less than Dupper
(cid:15) If Dold exists and is less than Dupper
(cid:15) Otherwise, it is an extrusion.
prev , then quit;
new , then quit;
, then quit;
old
After detecting an extrusion, BINDER can either drop
the connection or raise an alarm with related information
such as the process ID, the image (cid:2)le name, and the con-
nection information. Studying the tradeoff between differ-
ent reactions is beyond the scope of this paper.
3.4 Detecting Break›Ins
In this section, we discuss BINDER’s capability of de-
tecting break-ins of worms, spyware and adware because
they generate malicious connections. Unlike worms, spy-
ware and adware cannot propagate themselves and thus re-
quire user input to infect a computer system. Worms can be
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
classi(cid:2)ed as self-activated like Blaster [27] or user-activated
like email worms. The latter also requires user input to in-
fect a personal computer.
When the malware runs without user input, BINDER
easily captures its (cid:2)rst outbound connection as an extrusion.
This is because the malware runs as background processes
and does not receive any user input. So Dold, Dnew and
Dprev of the connection do not exist.
When the malware receives user input for its break-in,
its connections shortly after the break-in may be masked