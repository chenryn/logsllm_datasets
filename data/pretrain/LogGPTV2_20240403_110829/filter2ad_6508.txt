# Toward Whole-System Dynamic Analysis for ARM-Based Mobile Devices

**Authors: Ryan Whelan and David R. Kaeli**

**Department of Electrical and Computer Engineering, Northeastern University, Boston, MA, USA**

**Emails: [PI:EMAIL], [PI:EMAIL]**

## Abstract

The ARM architecture is currently the preferred chipset for modern smartphones, driving advancements in functionality and services. As the number of smartphones increases, so does the number of applications being migrated to them, leading to a corresponding rise in malware targeting these devices. This paper presents our preliminary work on an ARM-based dynamic profiling platform that enables analysts to study malware targeting ARM-based smartphone systems.

Mobile malware exploits have only recently begun to emerge, but analysts predict this trend will accelerate as smartphones dominate the mobile communications market. Smartphones introduce additional attack vectors not present in PCs, such as Short Messaging Service (SMS), Multimedia Messaging Service (MMS), and Bluetooth. While security experts, particularly white hat hackers, have started to exploit and disclose these vulnerabilities to facilitate patching, a new group of black hat hackers focused on embedded systems is expected to emerge, given the personal and financial data managed by these devices. As the mobile malware landscape matures, security analysts will require a robust platform to study exploits and intrusions. Currently, there is no comprehensive ARM-based security analysis platform suitable for studying mobile malware.

In this paper, we describe our implementation of such a platform based on QEMU, which provides a whole-system emulator for various guest architectures, including ARM. Given that the open-source development emulator for the Android operating system is based on QEMU with an ARM guest, we chose this environment to develop deep introspection and analysis capabilities for Android. Our design leverages TEMU, an open-source dynamic analysis platform based on QEMU for x86 guests. Using QEMU for instrumentation is ideal due to its dynamic binary translation, which translates execution on the guest architecture to the host architecture at runtime (e.g., ARM on x86). This fine-grained instrumentation allows for detailed profiling and information flow tracking, where custom analysis code can be executed alongside each guest instruction. Dynamic information flow tracking (i.e., taint tracking) can provide insights into specific system events by instrumenting data in memory, disk, and registers. Any input to the system can then be tracked according to the implemented policy.

Given the popularity of Android as one of the most widely used operating systems on smartphones, we anticipate that our fully instrumented Android system will be adopted by the mobile security community to study new classes of malware and enhance the security of future smartphones.

On our platform, we have implemented the necessary extensions to dynamically inspect the internal state of an Android guest, and we have begun evaluating potential threats on ARM-based mobile devices, such as alphanumeric ARM shellcode and a kernel module (similar to a rootkit) that hides processes. With our trusted view into the system, we can identify the shell spawned by the shellcode, list hidden processes, and generate a rich instruction trace. We obtain this trusted view by analyzing the memory image of the guest and reconstructing relevant kernel data structures. Our current focus is on addressing SMS workloads as a portal for additional attack vectors. Recent research has shown that certain SMS messages can render phones inoperable, and worm propagation over Bluetooth is a serious concern.

Since the Android emulator provides a mechanism to send SMS messages to the guest, we are tackling the SMS problem by implementing an SMS fuzzing utility and a tainting scheme that tracks SMS data propagation through the system. Our preliminary SMS fuzzing can repeatedly and reliably crash the Android process that handles SMS and MMS messages. Once our tainting scheme is fully implemented, it will mark all data derived from SMS input as untrusted and carefully inspect the guest for instructions with tainted operands. This will provide a rich profile that allows analysts to identify the root cause of the attack and the associated software bug or vulnerability. It is critical to carefully inspect mobile malware before it becomes widespread and disables large segments of the market. Our implementation is the first whole-system platform that enables dynamic analysis of malware and the discovery of new vulnerabilities on popular mobile devices.

## References

1. Bellard, F.: Qemu, a fast and portable dynamic translator. In: USENIX 2005 (April 2005)
2. Mulliner, C., Miller, C.: Fuzzing the phone in your phone. In: Black Hat (June 2009)
3. Song, D., Brumley, D., Yin, H., Caballero, J., Jager, I., Kang, M.G., Liang, Z., Newsome, J., Poosankam, P., Saxena, P.: BitBlaze: A new approach to computer security via binary analysis. In: Proceedings of the 4th International Conference on Information Systems Security, Hyderabad, India (December 2008)
4. ubra: Process hiding and the Linux scheduler. In: Phrack, vol. 63 (January 2005)
5. Younan, Y., Philippaerts, P.: Alphanumeric RISC ARM shellcode. In: Phrack, vol. 66 (November 2009)

---

This version of the text is more structured, coherent, and professional, with improved clarity and readability.