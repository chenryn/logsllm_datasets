title:Toward Whole-System Dynamic Analysis for ARM-Based Mobile Devices
author:Ryan Whelan and
David R. Kaeli
Toward Whole-System Dynamic Analysis for
ARM-Based Mobile Devices
Ryan Whelan and David Kaeli
Department of Electrical and Computer Engineering
Northeastern University
Boston, MA, USA
PI:EMAIL, PI:EMAIL
Abstract. The ARM architecture is presently the chipset of choice for
today’s smartphones - this demand has spurred new advances in func-
tionality and services, and as the number of smartphones increases, so
has the number of applications being migrated to them. As a result, the
amount of malware targeting them will also increase. We present our pre-
liminary work on an ARM-based dynamic proﬁling platform that allows
analysts to study malware that targets ARM-based smartphone systems.
Mobile malware exploits have only begun to appear recently, but analysts expect
this trend to accelerate in future years as smartphones begin to dominate the
mobile communications market. Smartphones introduce additional attack vec-
tors unavailable on PCs, including Short Messaging Service (SMS), Multimedia
Messaging Service (MMS), and Bluetooth. While security experts (especially
white hat hackers) have begun to exploit and disclose these vulnerabilities so
they can be patched, a new group of embedded systems black hat hackers will
soon emerge given the personal and ﬁnancial data being managed from these
systems. As new mobile malware culture continues to mature, security analysts
will need a platform that will allow them to study exploits and intrusions. At
the moment, a complete ARM-based security analysis platform does not exist
that is appropriate for studying mobile malware.
In this paper we report on our implementation of such a platform that is
based on QEMU [1]. QEMU provides a whole-system emulator for many guest
architectures, including ARM. Since the open source development emulator for
the Android smartphone operating system is based on QEMU with an ARM
guest, we have chosen this environment to develop deep introspection and anal-
ysis capabilities for Android. The design of our environment leverages TEMU, an
open source dynamic analysis platform based on QEMU for x86 guests [3]. Us-
ing QEMU for instrumentation is ideal since it uses dynamic binary translation,
which translates execution on the guest architecture to the host architecture at
runtime (e.g., ARM on x86). This level of implementation granularity presents
an opportunity for ﬁne-grained instrumentation, proﬁling, and information ﬂow
tracking where custom analysis code can be executed along with each guest in-
struction. Dynamic information ﬂow tracking (i.e., taint tracking) can provide
insight into speciﬁc events on a system given that data in memory, disk, and
S. Jha, R. Sommer, and C. Kreibich (Eds.): RAID 2010, LNCS 6307, pp. 512–513, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010
Toward Whole-System Dynamic Analysis for ARM-Based Mobile Devices
513
registers are instrumented. Any input to the system can then be tracked accord-
ing to the implemented policy. Given the fact that Android is one of the most
popular operating systems on smartphones today, we anticipate that our fully
instrumented Android system will be adopted by the mobile security community
to study new classes of malware and assist with making tomorrow’s smartphones
more secure.
On our platform, we have implemented the necessary extensions to dynam-
ically inspect the internal state of an Android guest, and we have begun to
evaluate a number of potential threats on ARM-based mobile devices such as
alphanumeric ARM shellcode [5], and a kernel module (similar to a rootkit) that
hides processes [4]. With our trusted view into the system, we can identify the
shell spawned by the shellcode, list processes we’ve hidden, and generate a rich
instruction trace. We obtain our trusted view into the system by analyzing the
memory image of the guest and reconstructing the relevant kernel data struc-
tures. Our current focus is to address SMS workloads as a portal for additional
attack vectors. Recent work has shown that certain SMS messages can render
phones inoperable [2], and that worm propagation over Bluetooth is a serious
problem that needs to be addressed.
Since the Android emulator provides a mechanism to send SMS messages
to the guest, we are approaching the SMS problem by implementing an SMS
fuzzing utility, along with a tainting scheme that keeps track of the SMS data
propagation through the system. Our preliminary SMS fuzzing can repeatedly
and reliably crash the Android process that handles SMS and MMS messages.
Once our tainting scheme is fully implemented, it will mark all data derived
from SMS input as untrusted and carefully inspect the guest for execution of
instructions possessing tainted operands. We will then be provided with a rich
proﬁle that will allow the analyst to identify the root cause of this attack (and
the associated software bug or vulnerability). We feel it is critical to have the
ability to carefully inspect mobile malware before it becomes widespread and
disables large segments in this market. Our implementation is the ﬁrst whole-
system platform that allows for dynamic analysis of malware and the potential
for discovery of new vulnerabilities on popular mobile devices.
References
1. Bellard, F.: Qemu, a fast and portable dynamic translator. In: USENIX 2005 (April
2005)
2. Mulliner, C., Miller, C.: Fuzzing the phone in your phone. In: Black Hat (June 2009)
3. Song, D., Brumley, D., Yin, H., Caballero, J., Jager, I., Kang, M.G., Liang, Z.,
Newsome, J., Poosankam, P., Saxena, P.: BitBlaze: A new approach to computer
security via binary analysis. In: Proceedings of the 4th International Conference on
Information Systems Security, Hyderabad, India (December 2008)
4. ubra: Process hiding and the linux scheduler. In: Phrack, vol. 63 (January 2005)
5. Younan, Y., Philippaerts, P.: Alphanumeric risc arm shellcode. In: Phrack, vol. 66
(November 2009)