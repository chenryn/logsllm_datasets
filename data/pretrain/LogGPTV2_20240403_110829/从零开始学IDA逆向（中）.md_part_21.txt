图 51-7 选择字段
从加载的结构体中选择_DRIVER_OBJECT，那么它就是DriverUnload字
段。
图 51-8 DriverUnload
翻译成中文就是它是结构体中一个指针字段，保存了卸载驱动时系统调用函
数的地址。而在上方可以看到DriverUnload函数的定义，它的参数是一个指
向_DRIVER_OBJECT 的指针。而在最上方是 PDRIVER_UNLOAD 的定义，那么
它就是这个地址，很显然它是指向DriverUnload函数的指针（在定义中有星
号）。
所以这个字段就是保存卸载驱动时系统需要调用的函数的地址。
在这里 IDA 显示的 offset 因为它是_DriverUnload 函数的地址，在选
项DEMANGLE NAMES – NAMES中调整，使得函数名看上去更习惯一些。
353
从零开始学IDA逆向 51 示例驱动逆向分析
图 51-9 函数地址offset
图 51-10 DEMANGLE NAMES – NAMES
所以当驱动每次启动执行到该处时，都会调用_DbgPrint 函数输出 Hell
o World，然后保存驱动卸载时调用的函数的地址。
也就是说代码中定义的 DriverUnload 函数必须要和图 51-8 中的类型
一致，而且参数必须是一个指向_DRIVER_OBJECT的指针，所以代码中也是函
数定义也是一样的。
#include 
void DriverUnload(
PDRIVER_OBJECT pDriverObject)
{
354
从零开始学IDA逆向 51 示例驱动逆向分析
DbgPrint("Driver unloading\n");
}
图 51-11 DriverUnload函数
所有内容都是匹配的。它就是驱动卸载时调用的函数，函数内部调用了_Db
gPrint函数输出信息Driver unloading。
51.3 DbgPrint
图 51-12 DbgPrint函数
如果驱动被调试的话，那么这些消息就会显示在调试器的消息栏中，就像加
载和卸载程序时，可以在Windbg或者IDA中看到Hello World和Driver
unloading这2个消息。
355
从零开始学IDA逆向 51 示例驱动逆向分析
51.4 WDK 10 版本的驱动
这个版本中并没有太多的内容，接下来查看的是使用WDK 10编译的版本，
首先进行一点逆向分析，尽量避免这些初始化过程，而是关注于驱动是如何处理
这些结构体以及DriverUnload指针的。
图 51-13 驱动入口
图 51-13中和之前的版本一样，_DriverEntry @ 8函数的参数也是两
个结构体的指针。
356
从零开始学IDA逆向 51 示例驱动逆向分析
图 51-14 DriverObject
在函数的整个过程中，EDI用于保存DriverObject结构体的地址，直到
退出函数RET指令之前的POP EDI指令。
右键单击选择RENAME，可以将保存同一个值的EDI重命名为p_DriverO
bject。
图 51-15 重命名寄存器
可以发现这个值一直保存到POP EDI指令改变EDI的值。
图 51-16 POP EDI
51.5 UNICODE_STRING
357
从零开始学IDA逆向 51 示例驱动逆向分析
图 51-17 UNICODE_STRING
UNICODE_STRING结构体中有一个USHORT（WORD）字段代表字符串的长
度，另一个 USHORT 字段代表缓存区的最大长度，最后一个字段是一个 unico
de 字符串缓存区的指针，那么这个结构体的长度就是 0x8，因为是 2 个 WORD
加上一个指针的长度DWORD。
Length：Buffer 指针指向的缓存区中字符串的长度，按字节计算，不包
括结尾的NULL。
MaximumLength：Buffer指针指向的缓存区的总长度，按字节计算。也
就是写入缓存区后不会破坏其它内存的最大长度。
Buffer：指向一个宽字符串。需要注意的是有些LSA函数返回的字符串可
能不是NULL结尾的。
图 51-18 UNICODE_STRING结构体
51.6 RtlCopyUnicodeString
RtlCopyUnicodeString函数有2个参数，一个指向初始UNICODE_ST
358
从零开始学IDA逆向 51 示例驱动逆向分析
RING 结构体，另一个指向目标 UNICODE_STRING 结构体，结构体中也有一个
指针指向目标缓存区。
图 51-19 RtlCopyUnicodeString函数
图 51-20 RegistryPath
图 51-20中，source参数是RegistryPath，它是一个UNICODE_ST
359
从零开始学IDA逆向 51 示例驱动逆向分析
RING结构体指针，而ESI中传入destination参数，类型是一致的。
图 51-21 ESI指针
图 51-21中ESI指向数据区段，指向的内容类型为UNICODE_STRING。
结构体的长度为0x8，那么在数据区段下一个地址将是0x8之后，也就是
Python>hex(0x40367c+0x8)
0x403684
图 51-22 初始化目标UNICODE_STRING
在调用复制函数之前，程序对目标UNICODE_STRING进行了初始化，将l
ength 字段设置为 0，因为现在缓存区是空的，设置 MaximumLength 为 0x2
08，而且将WdfDriverStubRegistryPath的地址设置为Buffer指针。
而 Buffer 的长度为 0x104 个 WORD，也就是 0x208 或者说十进制的 52
0。
图 51-23 WdfDriverStubRegistryPath
hex(0x104*2)
0x208
Python>(0x104*2)
360
从零开始学IDA逆向 51 示例驱动逆向分析
520
图 51-23 中表明 WdfDriverStubRegistryPath 是一个 wchar_t(2
字节)的数组，元素个数为260，那么260*2等于520。
所以 Buffer 指向一个长度为 0x208 的缓存区，而最大长度也是 0x208，
那么这是一致的。
51.7 DriverEntry
不要忘记这个
图 51-24 p_DriverObject
图 51-25 WdfDriverStubDriverOject
它是个4字节的变量，因为它是_DRIVER_OBJECT结构体的指针。
其它还有一些没有说明文档的初始化函数，至少作者没有找到它们的说明，
但是没有关系，它们只是纯粹的初始化，然后程序转到和旧版本一样的Driver
Entry。
和之前一样，转到LOCAL TYPES选项卡，将DRIVER_OBJECT结构体同
步到idb数据库。
361
从零开始学IDA逆向 51 示例驱动逆向分析
图 51-26 调用DriverEntry
图 51-27 DriverEntry
图 51-28 转换为结构体字段
362
从零开始学IDA逆向 51 示例驱动逆向分析
和上一个版本一样，程序将卸载驱动时调用函数的地址写入DriverUnloa
d字段。
图 51-29 DriverUnload函数
图 51-30 WdfDriverStubDisplaceDriverUnload
由于 DriverUnload 字段不为空，所以会运行粉红色部分，并且将 Driv
erUnload 函数指针保存到 data 区段的 WdfDriverStubDisplaceDriver
Unload。
然后再将 FxStubDriverUnload 指针写入 DriverUnload 字段。转到
该函数内部。
所以在卸载驱动时，程序会调用FxStubDriverUnload，但是最终通过W
dfDriverStubDisplacedDriverUnload 调用保存的 DriverUnload 函
数，这和上一版本起始是一样的，只不过多了几个步骤。
363
从零开始学IDA逆向 51 示例驱动逆向分析
图 51-31 FxStubDriverUnload
在下一章，作者将要编译一份从用户应用程序调用 IOCTL 的驱动，当然这
也是常见的几种驱动利用的方法（尽管不是唯一的一种）。
364
从零开始学IDA逆向 52 驱动与应用交互
52 驱动与应用交互
52.1 IOCTL
本章继续讲解系统内核的第三部分，在开始涉及内核利用之前首先需要对一
些结构体及其操作进行逆向分析，使读者今后在碰到更加复杂的驱动时对它们感
到熟悉。
本章要编写的驱动不仅仅能够加载和卸载，还能从用户模式的应用程序向它
发送参数来进行交互。
为了从用户模式接收信息，驱动必须对用户模式使用DeviceIoControl
API发出的设备输入输出控制编码（device input and output control
codes，IOCTL)进行响应。之前编写的驱动已经能够使用 DRIVER_OBJECT
结构体以及它存储的指针来自定义卸载过程。响应 IOCTL 也是类似的，只需要
提供更多的函数就行。
图 52-1 device input and output control
在驱动入口首先就是要创建一个DEVICE OBJECT。
作者不会讲解DEVICE 的全部理论知识，感兴趣的读者可以阅读以下链接：
https://docs.microsoft.com/en-us/windows-hardware/drivers/kern
el/introduction-to-device-objects
365
从零开始学IDA逆向 52 驱动与应用交互
图 52-2 create a device object
这是必须的，在之前创建的第一个驱动中，只能启动和停止，不能接收用户
的控制指令，所以必须要使用IoCreateDevice API来创建DEVICE OBJEC
T。
在源代码的DriverEntry函数中：
status = IoCreateDevice(DriverObject,
0,
&deviceNameUnicodeString,
FILE_DEVICE_HELLOWORLD,
0,
TRUE,
&interfaceDevice);
图 52-3 IoCreateDevice
52.2 IoCreateDevice 参数
DriverObject [in]：
调用者的指向 driver 对象的指针。每一个驱动在 DriverEntry 函数中
都会接收一个指向driver对象的指针作为参数。
366
从零开始学IDA逆向 52 驱动与应用交互
NTSTATUS DriverEntry(
PDRIVER_OBJECT DriverObject,
PUNICODE_STRING RegistryPath)
{
可以看出DriverEntry的2个参数，第一个是指向DRIVER OBJECT结
构体的指针，同时也传给IoCreateDevice作为第一个参数。
DeviceName [in, optional]：
缓冲区指针，缓冲区内部是以null结尾的Unicode字符串，作为Devic
e对象的名称，该参数为可选参数。
WCHAR deviceNameBuffer[] = L"\\Device\\HelloWorld";
UNICODE_STRING deviceNameUnicodeString;
在源代码中，它对应的是 device 的名称，然后他被复制到 deviceName
UnicodeString变量作为这个API函数的参数。
DeviceType [in]：
系统定义的 FILE_DEVICE_XXX 常数，代表设备的类型（例如 FILE_DEV
ICE_DISK或者FILE_DEVICE_KEYBOARD），也可以是供应商定义的一种新的
设备类型。
在这里是作者在源代码开始时定义的值。
#define FILE_DEVICE_HELLOWORLD 0x00008337
DeviceObject [out]：
用于接收指向新生成的 DEVICE_OBJECT 结构体的指针。DEVICE_OBJEC
T结构体是从非页面池中申请的。
它是个指向DWORD的指针，而API函数会在这里保存一个指针，而OUT一
词的含义是它来自于这个API函数本身。这些是这个API函数最重要的参数。
52.3 驱动分析
现在回到IDA观察代码，现在读者已经熟悉这些API了。
而且这个函数调用了读者熟悉的DriverEntry函数。
367
从零开始学IDA逆向 52 驱动与应用交互
图 52-4 调用DriverEntry
368
从零开始学IDA逆向 52 驱动与应用交互
图 52-5 调用IoCreateDevice
进入 DriverEntry 查看作者编写的代码，它的参数还是 2 个指针，一个
指向_DRIVER_OBJECT结构体，另一个指向_UNICODE_STRING结构体。
其它的是局部变量，由于有符号文件所以分析并不困难，但是最好一点点地
适应真实情况，这时是不会有符号文件的。
var_4保存了进行栈保护的COOKIE值。
图 52-6 COOKIE
图 52-7 rep movsd
然后程序将 device name 的 unicode 字符串，大小是 9 个 DWORD，也
就是0x24字节，复制到deviceNameBuffer变量，变量大小是19个WORD，
19*2 也就是 38 字节，十六进制是 0x26，所以复制的长度小于缓存区的总长
度。
图 52-8 deviceNameBuffer
369
从零开始学IDA逆向 52 驱动与应用交互
Python>hex(0x19*2)
0x32
图 52-9 device name
然后是复制 DOS_DEVICE_NAME，复制的数量是 0xB 个 dwords，也就是
0xb*4，结果是0x2c。
图 52-10 复制DOS_DEVICE_NAME
目标缓存区是deviceLinkBuffer，它的长度是
图 52-11 deviceLinkBuffer
23*2或者说46字节，十六进制是0x2e，所以不会有溢出。
所以在deviceNameBuffer中的是device name，而deviceLinkBu
ffer中的是Dos device name。
图 52-12 _DbgPrint
然后调用_DbgPrint输出消息“DriverEntry called”。
370
从零开始学IDA逆向 52 驱动与应用交互