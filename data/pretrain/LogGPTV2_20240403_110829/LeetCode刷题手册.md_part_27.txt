代码
解题思路
将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。本题中，一个高度平衡二叉树是指
题目大意
一个二叉树每个节点的左右两个子树的高度差的绝对值不超过1。
Example:
the two subtrees of every node never differ by more than 1. 
For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of 
BST.
Given an array where elements are sorted in ascending order, convert it to a height balanced
题目
108. Convert Sorted Array to Binary Search Tree
·把一个有序数组转换成高度平衡的二叉搜索数，按照定义即可
package leetcode
height balanced BST:
One possible answer is: [0,-3,9,-10,null,5], which represents the following
Given the sorted array: [-10,-3,0,5,9],
func levelorderBottom(root *TreeNode) [][]int {
return res
for i := len(tmp) - l; i >= 0; i--
res := [][]int{}
tmp := levelorder(root)
 res = append(res, tmp[i])
5
---
## Page 233
将链表转化为高度平衡的二叉搜索树。高度平衡的定义：每个结点的2个子结点的深度不能相差超过1
题目大意
Example:
the two subtrees of every node never differ by more than 1.
For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of 
balanced BST.
Given a singly linked list where elements are sorted in ascending order, convert it to a height
题目
109. Convert Sorted List to Binary Search Tree
height balanced BST:
One possible answer is: [0,-3,9,-10,null,5], which represents the following
Given the sorted linked list: [-10,-3,0,5,9],
sortedArrayToBST(nums[len(nums)/2+l:])}
sortedArrayToBST(nums[:len(nums)/2]), Right: 
func
-10
 return &TreeNode{val: nums[len(nums) /2], Left:
if len(nums) = 0 {
/￥
type TreeNode struct {
 Definition for a binary tree node.
return nil 
C sortedArrayToBST(nums []int) *TreeNode 
5
Right *TreeNode
Left *TreeNode
Val int 
---
## Page 234
代码
思路比较简单，依次把链表的中间点作为根结点，类似二分的思想，递归排列所有结点即可。
解题思路
// TreeNode define 
package leetcode
type TreeNode struct {
if middleNode == head {
if preNode != nil {
if middleNode == nil {
middleNode, preNode := middleNodeAndPreNode(head)
if head != nil && head.Next == nil {
if head == nil {
Right *TreeNode
Left 
Val 
type TreeNode struct {
 Definition for a binary tree node.
 Definition for singly-linked list.
 head = nil
 preNode.Next = nil
return nil 
return &TreeNode{val: head.val, Left: nil, Right: ni]}
 return nil 
Right *TreeNode
Left *TreeNode
Val int 
Next *ListNode
Val int 
*TreeNode
---
## Page 235
Given the following tree [1,2,2,3,3,null,null,4,4]:
 Example 2:
Return true.
Given the following tree [3,9,20,null,null,15,7]: 
Example 1:
 a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
For this problem, a height-balanced binary tree is defined as:
 Given a binary tree, determine if it is height-balanced.
题目
110. Balanced Binary Tree
func middleNodeAndPreNode(head *ListNode) (middle *ListNode, pre *ListNode) {
sortedListToBST(middleNode.Next)}
return &TreeNode{val: middleNode.val, Left: sortedListToBST(head), Right:
return pl, pre
for p2.Next != nil && p2.Next.Next != nil {
p2 := head 
if head == nil ll head.Next == nil { 
15
 return nil, head 
人
pre = pl 
 := head
2
= p1.Next 
---
## Page 236
代码
根据定义判断即可，计算树的高度是第104题。
解题思路
的这个条件。
判断一棵树是不是平衡二叉树。平衡二叉树的定义是：树中每个节点都满足左右两个子树的高度差4->11->2 which sum is 22.
题目
112. Path Sum
·递归求解即可
func minDepth(root *TreeNode) int {
11
return min(minDepth(root.Left), minDepth(root.Right)) + 1
if root.Right == nil { 
if root.Left == nil { 
 return minDepth(root.Left) + 1
 return minDepth(root.Right) + 1 
 return 0
13
Right *TreeNode
8
4
---
## Page 239
Given the below binary tree and sum = 22,
Example:
Note: A leaf is a node with no children.
sum.
Uani aua sienba wns s,yed yoea aaum sued jeal-ot-joou lle puy 'wns e pue aan Keuiq e uan!
题目
113. Path Sum Il
代码
root.Val)
func hasPathSum(root *TreeNode, sum int) bool {
* Definition for a binary tree node.
package leetcode
return hasPathsum(root.Left, sum-root.val) Il hasPathsum(root.Right, sum-
if root == nil { 
 type TreeNode struct {
return sum == root.val
 return false
Right *TreeNode
Left *TreeNode
Val int 
S
---
## Page 240
代码
解题思路
叶子节点是指没有子节点的节点。
给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。说明：
题目大意
 Return:
●这一题是第 257题和第112题的组合增强版
func findPath(n *TreeNode, sum int, slice [][]int, stack []int) [][]int {
func pathsum(root *TreeNode, sum int) [][]int {
//解法一
package leetcode
* Definition for a binary tree node.
if n == nil { 
if sum == O && n.Left == nil && n.Right == nil {
stack = append(stack, n.val)
sum -= n.Val 
return slice 
slice = findpath(root, sum,slice, []int(nil))
var slice [][]int 
 type TreeNode struct { 
 return slice
[5,8,4,5]
[5,4,11,2],
stack = stack[:len(stack)-1]
slice = append(slice, append([]int{}, stack...))
Right *TreeNode
Left *TreeNode
 Val int 
---
## Page 241
For example, given the following tree: 
Given a binary tree, flatten it to a linked list in-place.
题目
114. Flatten Binary Tree to Linked List
func pathsuml(root *TreeNode, sum int) [][]int {
//解法二
return res
tmpLeft := pathsum(root.Left, sum-root.val)
if root.Left == nil && root.Right == nil {
if root == nil { 
if len(tmpRight)>O{
path = append(path, root.val)
if len(tmpLeft)>0 { 
path, res := []int{}, [][]int{} 
slice = findPath(n.Right, sum, slice, stack)
tmpRight := pathsum(root.Right, sum-root.Val)
path = []int{} 
path = append(path, root.val)
return slice 
slice = findpath(n.Left, sum, slice, stack)
for i := O; i < len(tmpRight); i++ { 
 res = append(res, tmpLeft...)
for i := O; i< len(tmpLeft);i++ {
if sum == root.val { 
return [][]int{}
res = append(res, tmpRight...)
 tmpRight[i] = append(path, tmpRight[i]...)
 tmpLeft[i] = append(path, tmpleft[i]...)
 return [][]int{[]int{root.va]}}
---
## Page 242
解题思路
给定一个二叉树，原地将它展开为链表。
题目大意
The flattened tree should look like:
·按照递归和非递归思路实现即可。
·要求把二叉树"打平"，按照先根遍历的顺序，把树的结点都放在右结点中。
递归的思路可以这么想：倒序遍历一颗树，
cur = 4 
pre = 5 
3
二
2
二
5
4
9
即是先遍历右孩子，
，然后遍历左孩子，最后再遍历根节
---
## Page 243
pre
cur
pre 
cur:
pre
=2
=3
Ⅱ
= 4
５
2
3
9
9
---
## Page 244
代码
package leetcode 
实现了倒序遍历的逻辑以后，
可以先仿造先根遍历的代码，
type TreeNode struct {
 Definition for a binary tree node.
Y
public void flatten(TreeNode root) 
private TreeNode prev = null;
public void flatten(TreeNode root) {
3
Right *TreeNode
Left *TreeNode
Val int 
if (root == null)
5
prev = root; 
root.left = null;
root.right = prev;
flatten(root.left)
flatten(root.right);
flatten(root.left);
flatten(root.right) ;
 return; 
 return;
再进行结点之间的拼接：
，写出这个倒序遍历的逻辑：
M
---
## Page 245
func flatten2(root *TreeNode) {
//解法三 递归
func flattenl(root *TreeNode) {
//解法二递归
(e o 
//解法—非递归
if root.Left == nil
if root == nil {
if root == nil ll (root.Left == nil && root.Right == nil) 
root.Left = nil 
root.Right = root.Left
p.Right = root.Right 
for p.Right != nil
p := root.Left 
flatten(root.Left)
flatten(root.Right)
root.Right = currRight
for root.Right != nil
root.Left = nil 
root.Right = root.Left
currRight := root.Right
flatten(root.Right)
flatten(root.Left)
return
for i := l; i < len(list); i++ {
cur = root 
preorder(root, &list)