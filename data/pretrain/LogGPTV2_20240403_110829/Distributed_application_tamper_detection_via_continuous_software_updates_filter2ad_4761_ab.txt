static analysis are needed to implement the primitive code transfor-
mations. At system startup time, client.c is parsed by CIL and
each function and global variable (also called blocks since they are
one-to-one with the blocks in the client’s block bag) is extracted
and kept in memory in CIL’s intermediate code format. Blocks are
compiled into dynamically linked libraries (.so ﬁles) which the
block scheduler transfers to the client for execution. Each block (④
in Figure 1) contains four sections, each of which can be empty:
zero or more global variables, zero or more unprotected (level-0)
functions, an initialization routine (init) which is executed when
a block ﬁrst arrives in the client’s block bag, and a main routine
exec which is executed when a function gets called.
321
Server
Client
client authenticated?
send main block
valid request?
r e q u e s t P r o g P
mainBloc=...
requestBlocks={C}
receiveBlocks={ C(cid:2)}
select blocks
③
pushBlocks={ B(cid:2)}
①
request program start
receive main block
begin execution
②
attempt to execute block C
suspend execution
request block C
execute block C init
resume execution
receive block B
⑤
suspend threads
collect active frames
⑦
invalidate blocks B & C
resume execution
valid active set?
⑥
compute forbidden set
select blocks
select transforms
apply transforms
compute invalid set
④⎫
⎪⎪⎪⎪⎪⎪⎬
⎪⎪⎪⎪⎪⎪⎭
valid request?
startUpdateCycle
active={A,B}
invalid={B,C}
RPC_SEND(...)
RPC_RETURN(...)
⑧
Figure 2: Client-server communication timeline.
3.1 Client-Server Protocol
To illustrate the interaction between a server and a client, con-
sider the timeline in Figure 2. Execution begins at ① where, after
proper authentication, the client receives the initial block, contain-
ing global variables, level-0 functions, and main itself. Subse-
quently, the client can either explicitly request a block (②) that it
needs to execute, or receive blocks in the background (③) that the
server predicts that it will need. Whenever a block request is re-
ceived by the server it performs a validation step: given what is
known of the client’s current state (information gathered from ac-
tive sets received during the update cycle, the sequence of block re-
quests, and remote procedure calls the client has made), the server
determines whether the client is in compliance.
At ④, the server initiates an update cycle. At ⑤, the client sus-
pends execution and responds with the active set of blocks (the cur-
rent call stack). At ⑥, the server checks that the active set forms a
valid sequence of function calls, computes the forbidden set (blocks
which cannot be obfuscated), selects blocks to be transformed and
the transformations to be applied, applies the transformations and
sends the invalid set (out-of-date blocks which the client should no
longer execute) to the client. At ⑦, the client resumes execution,
concluding the update.
For every incoming remote procedure call (⑧), the server also
veriﬁes the validity of RPC numbers and argument values.
3.2 Transformation Primitives
A primitive in our system is a code transformation that trans-
forms a function or variable into a different form. The primitives
serve three goals: to add confusion to the client code thereby taxing
the adversary’s analytical abilities (obfuscation); to make it more
difﬁcult for the adversary to modify the client code (tamperproof-
ing); and to make it easier for the trusted server to detect any tam-
pering of the client code (tamper-detection). These goals are not
independent: adding confusion to client code makes static and dy-
namic analysis harder, and this in turn makes the adversary’s goal
of modifying the client code while maintaining correctness more
difﬁcult.
3.2.1 Preserving Protocols
Transformations that only add confusion are, by themselves, not
sufﬁcient for our purposes. Consider, for example, a situation where,
in accordance with Kerckhoffs’s principles, the adversary has full
322
access to our system and, through analysis, has realized that our
primitives only add non-functional code to functions while other-
wise preserving their behavior. He can then simply reverse engi-
neer a function the ﬁrst time he sees it, tamper with it at will, and
then ignore any further code updates! Therefore, some of our prim-
itives generate variants that are compatible with each other, while
some do not. Our goal is for the system to add enough confusion
such that the adversary cannot easily determine whether a code up-
date pushed to it can be safely ignored or not.
If our primitives
are able to satisfy this goal, we will force the adversary to expend
resources on fully analyzing (automatically, or ideally, manually)
each new block that gets sent to him. Then, providing security
against R-MATE attacks becomes a question of the system being
able to sustain a block replacement rate that is high enough to over-
tax the adversary’s analytical abilities, without causing too much
computational overhead.
Thus, some of our transformations are protocol-preserving. This
means they only change the body of a function, but the interface
through which the function is called is preserved. Other transfor-
mations are non-protocol-preserving, meaning any code that calls
a transformed function must be updated to use the new interface.
Similarly, a primitive that modiﬁes the encoding of a global vari-
able does not maintain protocol compatibility—any function which
references that variable needs to be updated to use the new encod-
ing. We get the following deﬁnitions:
DEFINITION 1
(PROTOCOL COMPATIBILITY). T is known as
a protocol-preserving transformation if p is a function or a remote
procedure and T (p) preserves p’s external behavior, its signature
and the encoding of arguments and return values. T is a protocol-
preserving variable transformation if p is a variable and T (p) pre-
serves p’s type and encoding.
2
Block variants are numbered with a protocol and implementation
version number: blockprot,impl. Two blocks with identical proto-
col numbers (such as foo0,0 and foo0,1 in Figure 1) are protocol
compatible.
3.2.2 Diversifying Primitives
Some of the primitives described here are adapted from obfuscat-
ing code transformations found in the literature. The adaptations
parameterize the primitives such that a given transformation can
generate multiple different variants from the same function. Trans-
formations take a random number seed as input and use a PRNG to
randomize choices they make.
It should be noted that all our transformations can be combined
ad inﬁnitum: a function can ﬁrst be ﬂattened and then turned into
an interpreter, a second layer of interpretation can be added (using
a different dispatch method and instruction set), etc. This is impor-
tant for transformations which in themselves do not have a whole
lot of opportunities for diversiﬁcation, but which can be combined
to generate a potentially inﬁnite sequence of variants. It is the duty
of the strategies in the diversiﬁcation scheduler (see Section 3.4) to
decide when and how to combine primitives.
3.2.3 Protocol-Preserving Primitives
Our current implementation supports four protocol-preserving
transformations which only modify the body of functions, not the
way in which they are invoked.
The interpret(f, seed) transformation turns a function f into
a specialized interpreter for f. The seed is used to select a random
method of instruction dispatch (currently supported are call, switch,
direct and indirect threading [13]), to select a fraction of instruc-
tion pairs to merge into superoperators [21], to randomize opcode
assignment, and to select the mix of addressing modes (register and
stack arguments).
The ﬂatten(f, seed) transformation removes nested control ﬂow
from a function f by making every basic block a case in a switch
statement nested inside an inﬁnite loop [30]. The seed is used to
randomize the order of the basic blocks inside the switch statement.
The split(f, seed) transformation converts a function f into two
functions f1 and f2, now called from f. The seed randomizes
the point in f where the split is made. f passes along its local
environment (formal arguments and local variables) to f1 and f2:
void f(
int a){
int x;
S1;
S2;
S3;
S4;
}
void f(
void f1(
void f2(
int* a,
int* x){
S1;
S2;
int* a,
int* x){
S3;
S4;
int a) {
int x;
f1(&a,&x);
f2(&a,&x);
}
}
}
The opaque(f, seed) transformation inserts non-functional code
protected by an opaque predicate [10]. This code can range from
code that causes crashes, code that invalidates client data, or calls to
fake functions which the server knows should never be requested.
The seed randomizes the point in f where the insertion is made,
and also the type of transformation. This example shows four of
the kinds of transformations currently supported (Sbug
is an obfus-
cated version of S2 into which a bug has been inserted, bogus is
a randomly selected function, and (cid:2)args(cid:3) a list of random expres-
sions):
2
S1;
S2;
if (p (cid:4)= q)T S1;
if (p (cid:4)= NULL)T S2;
else Sbug
if (p (cid:4)= q)F bogus((cid:2)args(cid:3));
if (p (cid:4)= q)T RPC((cid:2)args(cid:3));
2 ;
....
p=p->next;
q=q->next;
p
q
Here, P T represents an opaquely true predicate, i.e. a boolean ex-
pression that is difﬁcult for an adversary to analyze. In our cur-
rent implementation, opaque predicates are manufactured by creat-
ing and dynamically modifying linked structures. In the example
above, p and q are pointers being moved around in a circular linked
list subject to the invariant p (cid:4)= q.
3.2.4 Non-Protocol-Preserving Primitives
Our system currently supports four primitives that do not pre-
serve protocol compatibility, namely rnd_args, RPC_encode,
merge, and var_encode.
The merge(f1, f2, seed) transformation combines two func-
tions f1(args1) and f2(args2) into a new function with a signature
||args2, sel), in which sel is used at the call site to
of f1,2(args1
distinguish between calls to the two functions.
The rnd_args(f, seed) primitive randomly reorders f’s formal
parameters and adds extra, bogus, formals.
We have extended C with a remote procedure call mechanism
that allows for simple client-server communication. Remote pro-
cedure calls are identiﬁed by number and carries with them a se-
quence of scalar data items and return a scalar result. The trans-
formation of RPC_encode(n, seed) assigns a new random en-
coding of the n’th remote procedure call RPC(n, args) by assigning
it a new random RPC number, randomly reordering its arguments,
and inserting bogus arguments. This is an important transformation
since, should an adversary choose to ignore block updates, he may
inadvertently execute an invalid block containing an RPC with an
obsolete encoding, thereby alerting the server of the tampering.
323
The var_encode(g, seed) transformation selects a random new
encoding for a variable g [11]. As a trivial example, a global inte-
ger variable x could be replaced with a long variable x_new whose
encoding is x+1. Any reference throughout the program to x in
the original code has to be updated in order to preserve correct-
ness. When the var_encode(x, seed) transformation is selected,
not only do all blocks containing x need to be updated, but we also
need to allocate the new variable on the client side and initialize its
value to the current value of x, plus one. This is done by sending
the client an init block like 42.so in Figure 1.
The var_encode transformation is important in that an adver-
sary who attempts to use an obsolete block may inadvertently use
an old variable encoding. This could lead to client failure or, when
the server is sent the old variable’s value in an RPC, detection by
the server.
3.3 Diversity Graph
Our transformations generate a complex set of relationships be-
tween blocks: function signatures change, RPC arguments are per-
muted, global variables change in type and encoding, and so on,
and these changes, in turn, can force changes to other blocks. While
this complexity is good for creating confusion on the client side, it
unfortunately also results in generations of block working sets with
varying levels of compatibility.
To allow us to reason intelligently about the relationships be-
tween various block variants, we use an abstraction we call a di-
versity graph representing dependencies between blocks and pro-
tocols. The scheduler uses the diversity graph to determine which
blocks to transform next and how a transformation applied to one
block will force updates to other blocks.
In the initial program, the diversity graph is nearly identical to
a conventional call graph, with the addition of nodes for global
variables and edges between a function and the global variables it
references. In addition to the nodes that represent function imple-
mentations, we also add nodes to represent function protocols. As
transformations are applied the graph will grow with nodes for all
new variable/function variants.
DEFINITION 2
(DIVERSITY GRAPH). A diversity graph G for
a program P consists of the following protocol and implementation
nodes, where m is a protocol and n an implementation number:
i
• an implementation node f
m,n for each function variant;
p
• a protocol node f
m for each function protocol;
• a protocol node RPC(n)p
p
• a protocol node v
m for each protocol of a variable v.
m for each RPC protocol;
G contains the following directed edges:
i
p
• f
m → f
m,n from a function protocol node to its variant
implementations;
p
i
p
i
• f
m,n → g
s if f
m,n calls one of g
s’s implementations;
m,n → RPC(v)p
i
i
• f
m,n makes remote procedure call num-
s if f
ber v.
p
i
p
i
• f
m,n → v
s if f
m,n references global variable v
s.
2
Forward update cycles. Figure 3 shows the effect on the diver-
sity graph from a sequence of forward update cycles, where each
new graph is the result of applying one primitive. Figure 3 (a)
shows the initial graph for a program consisting of a global vari-
able g and two functions main and foo. Note that each func-
tion results in a single protocol node and a single implementation
node. A global variable is represented by a single protocol node.
Figure 3 (b) shows the graph after an application of the protocol-
preserving primitive ﬂatten, which adds a new implementation
int g;
void foo(){
g++;
}
int main(){
foo();
}
main
p
0
main
i
0,0
foo
p
0
foo
i
0,0
p
g
0
(a)
main
p
0
main
i
0,0
foo
p
0
ﬂatten(foo
i
0,0)
p
encode_var(g
0)
main