cases from the response set only if there is at least a point in the
middle column. Otherwise, top and bottom are an antipodal pair
(Definition 3.2 and Proposition 2).
In the case of Figure 5a, each region is included in a group of
regions that has a dominance corner and another group of regions
that has an anti-dominance corner. For example, suppose 𝑝 and 𝑞
are in TL, TM, ML, or MM. We have that left is a dominance corner
for the top two rows and bottom in an anti-dominance corner for
the left two rows. Applying our building block method to these two
groups of regions, we determine whether 𝑝 and 𝑞 are in dominance
or anti-dominance relation. In the case of Figure 5a, we can use the
same approach for all regions except MM.
To deal with the remaining case of 𝑝 and 𝑞 within region MM
in the configuration of Figure 5b, we observe that using dominance
corner top or bottom, we can determine if 𝑝 and 𝑞 are in dominance
relation. If so, we are done, else, we find the extreme points of MM
and apply the order reconstruction algorithm recursively to the
points within this region.
4.1 Proof of Theorem 3.5
Now that we have introduced the notion of partitioning the domain,
we present the proof for Theorem 3.5 below.
Proof. Let D be a database and let left, right, top, and bottom
be its four extreme points. Without loss of generality, these points
must take one of the two configurations pictured in Figure 5. Note,
any point’s relative order can be determined if it is in a dominance
relation with one point and in an anti-dominance relation with
another point. If a point is not in such a relation, then we argue
that the three transformations yield all databases equivalent to D
with respect to the response set.
Case 1: If top and bottom are antipodal, we have the configuration
of Figure 5a or Figure 5b with an empty middle column and the
ordering of all pairs of points is determined with the exception of
the antipodal pair (Transformation 2).
Case 2: If top and bottom are not antipodal, we have two subcases.
Case 2a: If top anti-dominates bottom, we have the configuration
of Figure 5a where the ordering of all pairs of points is determined.
Case 2b: Else, top dominates bottom and we have the configuration
of Figure 5b, where the ordering of all pairs of points is determined
except for pairs in MM. If MM = ∅ or has a single point, we are
done. Else, let 𝐶 be the subset of points of MM are not in anti-
dominance relation with a point of D not in MM. We have that all
the remaining points of MM have their ordering determined. Also,
𝐶 comprises one or more components and/or close pairs whose
ordering can be changed by means of Transformations 1 and 3.
Now, let us show that there are no other possible transformations
that change the order of some pair of points 𝑎, 𝑏 in 𝐶, while leav-
ing RS(D) the same. If 𝑏 minimally dominates 𝑎, there exists no
response in RS(D) that contains right and 𝑎 without 𝑏. Any such
transformation would result in one of the following changes: (i) 𝑎
dominates 𝑏, (ii) 𝑎 anti-dominates 𝑏, (iii) 𝑏 anti-dominates 𝑎 and
(iv) 𝑎 and 𝑏 are collinear. If (i), (ii) or (iii), then there would exist a
response in RS(D) that contains right and 𝑎, but not 𝑏, which would
result in a different response set. Thus, the transformation would
make 𝑎 and 𝑏 be collinear. This is possible only if the corresponding
sets 𝑋1, 𝑋2 and 𝑋3 shown in Figure 3c are empty. As 𝑏 minimally
dominates 𝑎, 𝑋3 must be empty. Suppose there is some point 𝑐 ∈ 𝑋1,
then there is a response that contains 𝑎 and 𝑐 without 𝑏 and a re-
sponse that contains 𝑏 and 𝑐 without 𝑎. If 𝑎 and 𝑏 were collinear,
one of those responses becomes impossible, modifying the response
set. A similar argument can be made about 𝑋2. We conclude 𝑎 and
𝑏 are a close pair and that we are applying Transformation 3.
Alternatively, if 𝑏 minimally strictly anti-dominates 𝑎, there ex-
ists a response 𝑟1 that contains right and 𝑎 without 𝑏 and a response
𝑟2 that contains right and 𝑏 without 𝑎. The transformations would
result in one of the following: (i) 𝑎 dominates 𝑏, (ii) 𝑏 dominates 𝑎,
(iii) 𝑎 anti-dominates 𝑏 and (iv) 𝑎 and 𝑏 are collinear. In (i), (ii), or
(iv) one of 𝑟1 or 𝑟2 would not exist, resulting in a different response
set. What is left is case (iii), which implies that the anti-dominance
relationship is flipped by applying Transformation 1.
□
5 Order Reconstruction
We show that the adversary can reconstruct the order of all records
in the database (up to equivalent orders) by using the response set.
The order reconstruction (OR) algorithm has the following steps:
(1) Find the extreme points of the database. (Algorithm 9)
(2) Find the first antichain of the database, which contains all points
that do not dominate any point and generate the dominance
graph of the database. (Algorithm 1)
(3) Find all antichains in the dominance graph. (Algorithm 2)
(4) Build the anti-dominance graph from antichains. (Algorithm 3)
(5) Use the dominance and anti-dominance graphs to find any
antipodal pairs (Proposition 2), close pairs (Proposition 3) and
reflectable components. (Proposition 1). (Algorithm 4)
Note that this attack achieves FDR when the horizontal and
vertical projections of the points are dense.
5.1 Preliminaries
Our OR attack requires computing the IDs of the points dominating
a point in antichain 𝐴0. Algorithm 8 (DominanceID), shown in
Appendix A, takes as input the response set RS(D) of a database
D and the ID 𝑎 of some point with height 0, and outputs the set of
identifiers of points that dominate D[𝑎].
5.2 Find Extreme Points
The first step is to identify at most four identifiers of points with
extreme coordinate values. Specifically, we wish to find identifiers
of points left, right, top and bottom such that for all 𝑝 ∈ D the
following hold: (1) left0 ≤ 𝑝0 ≤ right0 and bottom1 ≤ 𝑝1 ≤ top1,
and (2) 𝑝 ⪯̸ left, bottom and top, right ⪯̸ 𝑝. Note that since no
points in D are dominated by left and bottom, then their height is
0 and are thus a subset of 𝐴0 in the canonical antichain partition of
D. These points give a starting point for computing the rest of 𝐴0.
We recover these extremal points by calling Algorithm 7.
Our approach for finding such a subset of identifiers is as follows.
Let 𝐿 and 𝑆1 be the first and second largest responses in RS(D),
respectively. Then 𝐸1 = 𝐿 − 𝑆1 must correspond to the IDs of points
that are extreme in some coordinate. To find the IDs of points
Session 7C: Database and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2249that are extreme in some other coordinate, find the second largest
response 𝑆2 that contains 𝐸1, and then compute 𝐸2 = 𝐿 − 𝑆2. By
extending this process, we find all points with extremal coordinates.
It remains to find the correct point within each set 𝐸𝑖. Suppose 𝐸1
and 𝐸2 are the left and bottom edges, respectively. By finding 𝑎, 𝑏 ∈
[𝑅] such that the smallest response containing 𝑎 and 𝑏 contains no
other edge points, then D[𝑎] and D[𝑏] must not be dominating any
other points in D. Hence left = D[𝑎] and bottom = D[𝑏]. Similarly
for the identifiers of top and right.
Without loss of generality, we assume that right dominates left.
Algorithm 9, shown in Appendix B, is inspired by [13].
Lemma 5.1. Let D be a database with 𝑅 records and let RS(D) be
its response set. Algorithm 9 (FindExtremePairs) returns all configu-
rations of extreme points (left, right, top, bottom) such that no points
are dominated by left and bottom, and no points dominate right and
top in 𝑂(𝑅2|RS(D)|) time. [Proof in Appendix C]
5.3 Generate Dominance Graph
This step takes as input the response set RS(D) and some configu-
ration config given by running Algorithm 9 on RS(D), and outputs
a dominance graph 𝐺 of D. We first compute all IDs of points with
height 0. These are the sinks of 𝐺. Let left, right, and bottom be
given by config. All points not dominated by left and bottom must
be contained in the minimal query containing them.
Then for each 𝑎 ∈ 𝐴0 we build a subgraph of the dominance
graph on 𝑎 and all IDs that dominate 𝑎. We use Algorithm 8, de-
scribed in Appendix A, to compute this set of IDs. We initialize
subgraph 𝐺𝑎 = {𝑎} and then extend the graph by finding the next
smallest response resp containing 𝑎, that also contains some ID
𝑣 not yet added to the graph. Since resp is minimal, then 𝑣 must
dominate everything in the response. Moreover, 𝑣 must minimally
dominate all IDs that are sinks in the current 𝐺𝑎 and are contained
in resp. We add (𝑡, 𝑣) to 𝐺𝑎 for all sinks 𝑡 of 𝐺𝑎 contained in resp.
Once graphs 𝐺𝑎 for 𝑎 ∈ 𝐴0 have been computed, we take their
union, 𝐺 = ∪𝑎𝐺𝑎, as the dominance graph and return 𝐺 and 𝐴0.
Lemma 5.2. Let D be a database with 𝑅 records, RS(D) be its re-
sponse set, and config the correct configuration output by Algorithm 9
on RS(D). Given RS(D) and config, Algorithm 1 (DomGraph) re-
turns the dominance graph of the points in D in 𝑂(𝑅3|RS(D)|) time.
[Proof in Appendix C]
5.4 Construct Antichains
Given 𝐴0, we now compute the entire canonical antichain partition
of D. We explain how to find the partition A = (𝐴0, . . . , 𝐴𝐿) such
that 𝐿 is the maximum height of any element in D. Computing each
𝐴𝑖 is equivalent to finding the set of elements whose maximum
length path in 𝐺 from any 𝑎 ∈ 𝐴0 has length 𝑖. Thus, for each
𝑝 ∈ 𝐺 we compute the longest path in 𝐺 from any 𝑎 ∈ 𝐴0 to 𝑝 and
then add 𝑝 to the correct partition in A. Lastly, order the elements
in each antichain 𝐴 ∈ A such that, without loss of generality,
for any pair of ordered elements 𝑐 and 𝑐′, 𝑐′ antidominates 𝑐 i.e.
𝑐 ⪯𝑎 𝑐′. If |𝐴| ≤ 2 we are done. Else we compute all responses
that contain exactly two elements in 𝐴. If such a response exists
for a pair 𝑐, 𝑐′ ∈ 𝐴 then we can infer that there exists no 𝑐′′ ∈ 𝐴
such that 𝑐 ⪯𝑎 𝑐′′ ⪯𝑎 𝑐′. Thus we may use these responses to
determine the ordering of the elements in 𝐴 such that any element
must anti-dominate all previous elements in the ordering.
Algorithm 1: DomGraph(RS(D), config)
Input: Response set RS(D) of database D; a dictionary config mapping
left, right, top, bottom to IDs.
Let 𝑆 be the smallest response that contains right and 𝑝.
1: // Find antichain-0. We assume right dominates left.
2: Let small be the smallest response containing left and bottom.
3: Let 𝐴0 = small
4: for 𝑝 ∈ small do
5:
6: 𝑄 = (𝑆 ∩ small) − {𝑝}
7: 𝐴0 = 𝐴0 − 𝑄
8: // Find dominance graph.
9: Let 𝐺 be an empty graph
10: for each 𝑎 ∈ 𝐴0 do
11: 𝐺𝑎 = (𝑉 , 𝐸) such that 𝑉𝑎 = {𝑎} and 𝐸𝑎 = ∅.
𝑆 = DominanceID(𝑎, top, left, right, RS(D))
12:
Let 𝑅𝑆 ⊆ RS(D) comprise the responses of size at least 2 that
13:
contain 𝑎 and only other IDs in 𝑆.
for resp ∈ 𝑅𝑆 by increasing size do
if ∃𝑣 ∈ resp such that 𝑣 ∉ 𝐺𝑎 then
Add vertex 𝑣 to 𝐺𝑎
for each 𝑡 of resp such that 𝑡 is a sink of subgraph of 𝐺𝑎 that
contains only points in resp do
Add edge (𝑡, 𝑣) to 𝐺𝑎.
18:
19: 𝐺 = ∪𝑎∈𝐴0𝐺𝑎, and remove any transitive edges
20: return 𝐺, 𝐴0
14:
15:
16:
17:
Lemma 5.3. Let D be a database and RS(D) be its response set.
Given RS(D), a dominance graph 𝐺 of D, and the minimal antichain
𝐴0, Algorithm 2 (FindAntichains) returns a dictionary Antichains
such that Antichains[𝑖] contains an ordered list of all IDs at height 𝑖
in 𝑂(𝑅2|RS(D)|) time. [Proof in Appendix C]
Algorithm 2: FindAntichains(RS(D), 𝐺, 𝐴0)
1: // Find antichains.
2: (𝑉 , 𝐸) = 𝐺, Antichains = {}, Antichains[0] = 𝐴0
3: Compute longest paths∈ 𝐺 from all 𝑎 ∈ 𝐴0 to all points in D.
4: 𝐿 = 0
5: for each 𝑝 ∈ 𝑉 do
6:
7: Add 𝑝 to Antichains[ℓ]
8:
9: // Order the points of Antichains[𝑖].
10: for 𝑖 = 0, · · · , 𝐿 do
11:
12:
Let ℓ be the length of the longest path to 𝑝 from any 𝑎 ∈ 𝐴0.
𝐿 = max(𝐿, ℓ)
if |Antichains[𝑖]| > 3 then
Let 𝑆 be all responses in RS(D) that contain exactly two elements
of Antichains[𝑖] (and perhaps other points)
Remove all 𝑝 ∉ Antichains[𝑖] from 𝑆 and make 𝑆 a set.
Order Antichains[𝑖] such that pairs of consecutive points are
responses in 𝑆.
15: return Antichains
13:
14:
5.5 Generate Anti-Dominance Graph
The next step is to take the response set RS(D), the dominance
graph 𝐺, and the canonical antichain partition Antichains and con-
struct the corresponding anti-dominance graph. There are three
major steps that we must take: (1) fix the antichain orientations so
that they are lined up correctly, (2) add any edges between IDs of
different antichains that are in an anti-dominance relationship, and
(3) identify colinearities.
Session 7C: Database and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea22501, 𝑐′