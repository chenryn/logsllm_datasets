addition:
1. If v = 0, then FcheckZero sends accept to the ideal adversary S. If S sends
reject (resp., accept), then FcheckZero sends reject (resp., accept) to the honest
parties.
2. If v ∕= 0, then FcheckZero sends reject to S and the honest parties.
Observe that FcheckZero sends the corrupted parties their shares as output.
This is needed to enable the simulation (since the simulator needs to know these
shares), and has no eﬀect on security since these shares are anyway already
known to the adversary. The exact protocol for securely computing FcheckZero is
speciﬁed in Protocol 3.4.
PROTOCOL 3.4 (Securely computing FcheckZero for t  2s.
1. The parties call Frand to obtain a sharing [r]t, and call F double
2. The parties locally compute [r · v + ρ]2t = [r]t · [v]t + [ρ]2t.
3. The parties run open([r · v + ρ]2t) and open([ρ]t) in parallel. If a party
– Output: If in every repetition, the values opened are equal to each other (i.e.,
receives ⊥, then it outputs ⊥. Else, it continues.
rand
to obtain
the same ρ in the repetition), then output accept; else output reject.
Complexity: The cost is δ calls to Frand and 2δ openings. Using the amortized
opening operation on degree-2t and degree-t sharings described in Section 2.1,
n/3 elements can be opened at the cost of sending n elements. Likewise, n/3
(double) random sharings can be generated at the cost of less than 3n elements.
3 , the overall cost of FcheckZero is 4n elements
Thus, as long as 2δ ≈ 2 ·
sent overall (4 by each party). This holds for most reasonable choices of param-
eters. In fact, for most reasonable parameters, the number of random sharings
needed is very small, and so adds very little in practice.
Theorem 3.1. Protocol 3.4 securely computes FcheckZero in the (Frand,F double
rand )-
hybrid model with statistical security, for t < n/3.
log |F|
< n
s
11
Proof: Let A be an adversary; we construct a simulator S as follows. S receives
the output accept/reject as well as the shares of the corrupted parties in [v]t from
the ideal functionality FcheckZero. Denote the share of the ith party by vi. S works
as follows:
rand
2. Simulate δ openings: For each of the δ times,
1. Simulate δ calls to Frand: For each call S plays the ideal functionalities
in the protocol, and receives from A values αi and α′i, β′i
Frand and F double
as Pi’s input to Frand and F double
rand , respectively, for each i ∈ I. For F double
rand ,
S chooses a random ρ ∈ F and deﬁnes sharings [ρ]t, [ρ]2t passing through
α′i, β′i, respectively, as speciﬁed in F double
rand .
(a) If the output was accept, then S chooses a random degree-2t polynomial
p with p(0) = ρ that passes through the points deﬁned by the shares
{vi · αi + β′i}i∈I , where vi is Pi’s share in [v]t as received from FcheckZero,
and αi, β′i are as received from A above. Then, S simulates the honest
parties sending their shares in p and in [ρ]t to the corrupted parties in
the executions of open.
If A sends any incorrect shares in the openings, then S sends reject to
FcheckZero; else it sends accept to FcheckZero.
(b) If the output was reject, then S chooses a random r′ ∈ F and a random
degree-2t polynomial p with p(0) = r′ that passes through the points
deﬁned by the shares {vi · αi + β′i}i∈I , where vi and αi, β′i are as above.
Then, S simulates the honest parties sending their shares in p and in [ρ]t
to the corrupted parties in the executions of open.
We argue that the distribution over the output is statistically close to a real
execution. Let bad be the event that v ∕= 0 and all r′ values chosen by S equal 0.
We consider a hybrid experiment with an ideal functionality that is the same
as FcheckZero except that even if v ∕= 0, the ideal simulator can send accept
to the functionality, and all honest parties will accept. We denote this hybrid
experiment by H and the simulator for this experiment by SH . Simulator SH
works identically to S, except that if the event bad occurs, then it sends accept to
the ideal functionality. Since bad happens with probability |F|−δ, and otherwise
everything is the same, we have that for every distinguisher D,
|Pr [D (idealFcheckZero,S ([v]t)) = 1] − Pr [D (HSH ([v]t)) = 1]| ≤
1
|F|δ .
([v]t)󰀔 = 1󰁬 ,
(1)
(2)
It remains to show that
Pr [D (HSH ([v]t)) = 1] = Pr󰁫D󰀓hybridFrand,F double
Π,A
rand
where Π denotes Protocol 3.4. Observe that in a real execution, all outputs from
Frand are uniformly distributed. Thus, when v ∕= 0, the probability that all r
values chosen by Frand equal 0 and thus the honest parties accept is exactly
the probability that bad occurs in H. Furthermore, setting r′ = v · r for every
iteration, we have that the distribution over the value r′ chosen by SH and the
12
value v· r generated in the protocol are identical. Thus, the output of the honest
parties is identical in both executions. Finally, observe that the view of A of the
opened values in a real execution and in the execution with SH is identical (for
all outputs). This follows since in both cases, the shares of the honest parties
(that are revealed to the adversary during open) are random shares of ρ if v = 0,
and are random shares of a uniformly distributed element (r′ or r·v +ρ) if v ∕= 0.
This is due to the fact that SH chooses these at random in H, and due to the
fact that the shares from F double
in the real protocol are random. The theorem
is derived by combining Equations (1) and (2).
rand
4 Secure Multiplication Veriﬁcation
In this section, we present two subprotocols for verifying that all values used in
the protocol were correct. There are two properties that need to be checked:
1. Property 1 – that a set of sharings are valid degree-t sharings: Denoting the
shares to be checked by [x1]t, . . . , [xM ]t, we need to verify that each [xi]t is
such that all of the honest parties’ shares lie on the same degree-t polynomial.
2. Property 2 – that a set of multiplication values are all correct: Denote a series
of multiplication gates by g1, . . . , gN , where each gk is a triple (ik, jk, ℓk)
representing the multiplication gate wℓk = wik · wjk . Then, we need to verify
that there does not exist any k such that wℓk ∕= wik · wjk . (After checking
the ﬁrst property, we know that [wik ]t, [wjk ]t, [wℓk ]t are all valid.)
Next, we explain how each property is checked. The basic idea is to generate
check-sharings for each of the two cases. The protocol for property 1 is exactly
that of [19, Protocol 3.1] (batch correctness check of shares), whereas the protocol
for property 2 is novel.
4.1 Verifying that Shares are Degree-t
For the sake of completeness, we describe the veriﬁcation check of [19] for this
property. In order to verify the ﬁrst property described above, that a set of
sharings are of degree-t, the parties generate (pseudo)random values a1, . . . , aM
and deﬁne the sharing [u]t =󰁓M
k=1 ak · [xk]t. Observe that if all of the [xk]t are
degree-t sharings, then [u]t is a degree-t sharing. However, if there exists a k such
that [xk]t is not a degree-t sharing, then [x]t will be a degree-t sharing except
with probability 1/|F|. This is due to the fact that each sharing is a polynomial
and so [u]t can only be of degree-t if the higher-level terms of other sharings
cancel out the higher-level terms of ak · [xk]t. Since ak ∈ F is chosen randomly
after all shares are ﬁxed, the probability that the sum of all other higher-level
terms equals ak times the higher level terms of [xk]t is at most 1/|F| (ﬁx all other
values; then there is at most a single value ak ∈ F that can cause the higher
level terms to become 0). See Protocol 4.1 for a speciﬁcation of the protocol.
13
PROTOCOL 4.1 (Veriﬁcation that a set of shares are degree-t)
Inputs: The parties hold a series of shares {[xk]t}M
Parameter: Let δ be such that |F|δ ≥ 2s, where s is the statistical security
parameter, and let κ be a computational security parameter for a pseudorandom
function F .
k=1.
The protocol:
1. Phase 1 – prepare random values:
(a) The parties call Fcoin to obtain a single key K ∈ {0, 1}κ for a pseudoran-
dom function F . Then, the parties compute δ · M pseudorandom values
(a1
(b) The parties call Frand to obtain sharings ([ρ1]t, . . . , [ρδ]t) of unknown ran-
k = FK (k󰀂j).
M ) by setting aj
dom values ρ1, . . . , ρδ.
1, . . . , a1
M ), . . . , (aδ
1, . . . , aδ
2. Phase 2 – actual veriﬁcation:
(a) For j = 1, . . . , δ, the parties locally compute the check polynomial
[uj]t =
M󰁛k=1
aj
k · [xk]t + [ρj]t.
(b) For j = 1, . . . , δ, the parties run open([uj]t).
3. Output: If a party receives ⊥ in any opening or if the opened sharing deﬁnes a
polynomial of degree greater than t (i.e., not all values lie on a single degree-t
polynomial), then it outputs reject. Else, it outputs accept.
The following lemma is proven in [19].4
Lemma 4.1 (Lemma 3.2 of [19]). Let n be the number of parties, let t < n/3
be the maximum number of corrupted parties controlled by an (unbounded) ad-
versary, and assume that F is a pseudorandom function for non-uniform dis-
tinguishers. If there exists a j ∈ [M ] such that the sharing of xj is not of
degree-t, then the honest parties accept in Protocol 4.1 with probability at most
|F|−δ ≤ 2−s.
We remark that Protocol 4.1 is not proven to securely realize an appropriate
“check ideal functionality”. Nevertheless, it suﬃces for what we need (we use it
in the same way as [19] who take this approach). The fact that this suﬃces is
shown in the proofs of security of the protocols where it is used (Protocols 5.1
and 6.1). In particular, Protocol 4.1 reveals nothing when the input sharing is
of degree-t. However, it can reveal something if the sharing is not of degree-t. In
Protocol 5.1, the veriﬁcation is applied to random shares before they are used;
4 The actual lemma stated in [19] bounds the cheating by (|F|−1)−δ rather than |F|−δ.
However, this is due to the fact that they choose all aj
k values in F \ {0} instead of
in F, which is not actually needed. In addition, they prove it for t < n/2; we wrote
t < n/3 simply since this is the setting we are considering here.
14
thus, there is no need for privacy of incorrect shares. Likewise, in Protocol 4.1,
the veriﬁcation is only applied to the sharing of inputs by the parties. Thus,
honest parties’ inputs are guaranteed to be private, which is all that is required
in our case.
4.2 Verifying Correctness of Multiplication
In this section, we present our protocol for multiplication correctness veriﬁcation.
This protocol is novel and what enables us to achieve high eﬃciency. The protocol
uses similar ideas to previous works, but applies them in a diﬀerent way to
achieve a check with communication complexity that is independent of the size
of the circuit. In this section, we assume that all input shares are of degree-t,
since this is veriﬁed previously using the protocol of Section 4.1.
In order to verify the second property described above, that all multiplication
values are correct, the parties generate
pseudo-random values b1, . . . , bN and deﬁne the sharing
[vj]2t =󰀣 N󰁛k=1
bk · ([wik ]t · [wjk ]t − [wℓk ]t)󰀤 + [ρ′]2t,
where the k’th gate has input wires wik , wjk and output wire wℓk .5 Observe that
if the multiplication values are correct, then [vj]2t should be a degree-2t sharing
of ρ′, since all (wik · wjk − wℓk ) equal 0. However, if there exists some k for which
wik · wjk ∕= wℓk , then wik · wjk − wℓk ∕= 0 and [vj]2t is a sharing of the value ρ′
with probability at most 1/|F|. This is for the same reason as described above:
since bk ∈ F is random it follows that bk · (wik · wjk − wℓk ) is random, and thus
it cancels out with the rest of the check sharing with probability at most 1/|F|.
As such, the veriﬁcation is carried out by the parties generating double-
to obtain [ρ′]t and [ρ′]2t. The check-
random sharings securely using F double
sharing uses [ρ′]2t and the parties then open the check-sharing and [ρ′]t and
verify that they are to the same value.
rand
A crucial point in this veriﬁcation step is that since all sharings have already
been validated to be of degree-t, the local operation to generate the check-sharing
(involving parties locally multiplying their sharings of wik and wjk ) deﬁnes a
degree-2t polynomial. As such, this polynomial is fully masked by [ρ′]2t and so
opening it reveals nothing. In addition, since t < n/3, the honest parties’ shares
alone fully determine the polynomial. Thus, the corrupted parties cannot change
the opened value by sending incorrect shares. This is the crucial property that
enables us to carry out this veriﬁcation step with such eﬃciency.
We remark that it is not possible to simply open [vj]2t and [ρj]t and compare
that they are the same, without calling FcheckZero. This is because in the case of
5 Note that even though [wik ]t·[wjk ]t is a sharing of degree-2t (since each party locally
multiplies its shares) and [wℓk ]t is a sharing of degree-t, it is possible for the parties
to compute [wik ]t · [wjk ]t − [wℓk ]t locally. This is due to the fact that we are only