**作者:evilpan  
原文链接：**
本文主要介绍椭圆曲线的基本原理以及基于椭圆曲线的密码学实现，包括ECC加密、ECDH秘钥交换以及ECDSA签名算法，并介绍其中潜在的一些安全问题。其中分析了两个ECC实现相关的真实案例，分别是索尼PS3的签名问题和美国国家安全局NSA留下的椭圆曲线后门。
# 前言
上周写过一篇[关于RSA实现的介绍文章](https://evilpan.com/2020/05/02/rsa-security/)。相对于RSA对称加密，椭圆曲线加密要复杂得多，以至于多数的介绍文章都难免涉及大量的数学理论和公式。作为一个非密码学专业的业余爱好者，我的目的只是希望对这些概念有个宏观的理解，因此本文会对涉及到的概念在尽量保证正确的前提下进行简化描述。
# 椭圆曲线
作为梦开始的地方，椭圆曲线(Elliptic
Curve)真的只是一个曲线，和其他曲线一样，都是函数在坐标轴中的一个映射。根据mathworld中给出的[椭圆曲线定义](https://mathworld.wolfram.com/EllipticCurve.html)，描述椭圆曲线的函数可以定义如下：
    y^2 = x^3 + a*x + b 
其中a、b是曲线的特征参数，决定了椭圆曲线的形状。当`43*a^3 + 27*b^2 =
0`时，椭圆曲线退化成奇异曲线，因此不再是合法的椭圆曲线。上述方程的表示方法也称为 _Weierstrass nomal form_
。椭圆曲线在坐标系上的形状参考如下：
通过观察或者证明都可以得知椭圆曲线是关于x轴对称的。为了理解椭圆曲线，还需要引入一个 **无穷远点** 作为曲线的一部分，也称为理想点，用符号 **0**
表示。椭圆曲线本身比较直观，在不同取值范围中会存在不同的特性，下面会分别进行介绍。
## 实数集
在数学中， **群(Group)** 表示一个特殊的集合，对于集合中的元素我们可以执行二元运算，比如加法(+)。一个集合成为群的前提是需要满足以下4个条件
  1. 封闭性：若a和b属于群G，则a+b也属于群G
  2. 结合性： _(a+b)+c = a+(b+c)_
  3. 存在单位元θ，使得 _a + θ = θ + a = a_
  4. 群中每个元素都存在逆元素，即对于任意元素a存在b，使得 _a + b = θ_
如果集合满足上述条件且满足第5条：
  * 交换律： _a + b = b + a_
那么该集合也称为阿贝尔群(abelian group)。
> _单位元_ ：在二元运算中，单位元与任意元素运算不改变其值，比如实数中加法单位元是0，乘法单位元是1
根据定义，整数集合是一个群(阿贝尔群)，但自然数集合不是一个群，因为不满足第4个条件。
如果一个集合是一个群，那么就可以推导出它也满足其他一些性质，比如单位元唯一性、逆元素唯一性等。
椭圆曲线和群有什么关系？实际上我们可以在椭圆曲线上定义一个群，具体来说：
  * 群的元素是椭圆曲线上的点
  * 单位元是无穷远点0
  * 点P的逆是它关于x轴的对称点
  * 加法的定义为：对于三个同一直线上的非零点P、Q和R，它们的和为 _P+Q+R =0_
用图来表示就是：
这只是一种几何表示，比如计算P+P，实际上是在P点作一条切线。为了能够进行计算，我们需要将几何加法转换成代数加法，即将上述规则转换为一组方程
。其中涉及到三次方程的解，这里直接给结论，假设P、Q、R的坐标分别是(Px, Py)、(Qx, Qy)、(Rx, Ry)，则：
    # 直线斜率为m m = (Py - Pq) / (Px - Qx) Rx = m^2 - Px - Qx Ry = Py + m(Rx - Px) 
因此，计算P+Q也就可以在代数上转化为对 _(Rx, -Ry)_ 的计算。
有了加法，自然就可以推出乘法：
    n * P = P + P + P + ... + P 
其中n是自然数。写成以上形式需要计算n次加法，算法复杂度为O(2^k)，k为n的位宽。实际上可以转换为倍乘相加(double and add)的方式，例如：
    151 * P = 2^4 * P + 2^2 * P + 2^1 * P + 2^0 * P 
这样可以将算法复杂度减少到O(logn)，或者说O(k)。
有了乘法，自然有除法。给定n和P，我们至少有一种在多项式时间内计算出 _Q=nP_ 的算法。那么反过来，给定Q和P，是否能计算出n呢？这个问题就是我们常说的
**对数问题(logarithm problem)**
。其实这里应该说是除数问题，但大多密码学算法是基于指数计算的，因此求逆称为对数。对数问题求解的时间远大于乘法的计算时间，但连续对数的解存在一些特点，因此并不算是个合格的难题，这里只是引出这个概念，以及我们下面将要看到的真正主角——离散对数问题。
## 有限域
接下来我们将椭圆函数的范围从实数集转到有限集，或者称为有限域(finite field)。
_域(field)*在抽象代数是个专有名词，表示一种支持可进行加减乘除运算的代数结构，并且运算结果不会超出域的集合，其概念是*数域_ 和四则运算的拓展。
有理数集合、实数集合都满足域的概念，如果一个域中的元素个数有限，则成为有限域。有限域一个典型是伽罗瓦域(Galois
Field)，记作GF(p^n)，其中p是素数，n是正整数。p^n也称为有限域的 _阶(order)_ ，即有限域中的元素个数。 _n=1_
时称为素数域GF(p)。
GF(p)元素集合为所有从 _0_ 到 _p-1_
的整数，其加法和乘法可以转换为[模运算](https://en.wikipedia.org/wiki/Modular_arithmetic)，也称为时钟算术，例如对GF(23)：
  * 加法：(18+9) mod 23 = 4
  * 减法：(7-14) mod 23 = 16
  * 乘法：4 * 7 mod 23 = 5
  * 加法逆元：-5 mod 32 = 18
  * (5 + (-5)) mod 23 = (5 + 18) mod 23 = 0
  * 乘法逆元：9^-1 mod 23 = 18
  * 9 * 9^-1 mod 23 = (9 * 18) mod 23 = 1
使用拓展欧几里得算法，我们可以在O(logp)的复杂度内计算出某个数的乘法逆元，这也是除法计算的基础。
在将椭圆曲线的范围限制到有限域中后，椭圆曲线的算式定义也可以做出如下修改：
其中 _0_ 依旧是无穷远点，而a、b是有限域集合中的两个整数。对于任意x，最多存在两个点，即两个y的解。
举个例子，对于椭圆曲线 _y^2 ≡ x^3 - 7x + 10 (mod p)_ ，当p的值分别是19、97、127、487时，其在坐标轴上的图像如下：
注意这些点的集合在直角坐标中是关于直线 _y=p/2_
对称的。虽然之前连续的椭圆曲线现在变成了离散的点，但可以证明这些点的集合同样是一个阿贝尔群，因此也满足群的定义和推论。
那么，我们要如何定义和计算这些离散点的 **加法**
呢？与实数集中我们定义几何学上同一直线上的三个点P、Q、R之和为0，有限域中也类似，不过这里的直线并不是实数集中的直线，而是满足 _ax + by + c
≡ 0 (mod p)_ 的点的集合。
举例来说，椭圆曲线 _y^2 ≡ x^3 - x + 3 (mod 127)_ ，且P=(16, 20)，Q=(41,120)。注意连接它们的“直线” _y
≡ 4x + 83 (mod 127)_ 实际上在空间中是重复的：
计算对应几何表示的代数加法和前面类似，不过后面都需要加上(mod p)，这是可以推导出来的。
从加法到乘法同样可以使用倍乘加的算法加速运算，同时对于有限域的椭圆曲线，乘法还有个有趣的特点。例如对于椭圆曲线 _y^2 ≡ x^3 + 2x + 3
(mod 97)_ 和点 P=(3,6)，在计算乘积时发现：
  * 0P = 0
  * 1P = (3,6)
  * 2P = (80,10)
  * 3P = (80,87)