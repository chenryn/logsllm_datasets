      if (principal == null)
      {
        WriteLine("not a Windows Principal");
        return null;
      }
      WriteLine($"Users? {principal.IsInRole(WindowsBuiltInRole.User)}");
      WriteLine(
        $"Administrators? {principal.IsInRole(WindowsBuiltInRole.Administrator)}"
);
      WriteLine();
      return principal;
    }
运行应用程序，我的账户属于Users角色，而不是Administrator角色，得到以下结果：
    Show principal information
    Users? True
    Administrator? False
很明显，如果能很容易地访问当前用户及其角色的详细信息，然后使用那些信息决定
允许或拒绝用户执行某些动作，这就非常有好处。利用角色和Windows用户组，管理员可
以完成使用标准用户管理工具所能完成的工作，这样，在用户的角色改变时，通常可以避
免更改代码。
自.NET 
4.5以来，所有principal类都派生自基类ClaimsPrincipal。这样，可以使用
principal对象的Claims属性来访问用户的声称。下一节讨论声称。
24.2.3 使用声称
声称（claim）提供了比角色更大的灵活性。声称是一个关于标识（来自权威机构）
的语句。权威机构如Active Directory或Microsoft Live账户身份验证服务，建立关于用户的
声称，例如，用户名的声称、用户所属的组的声称或关于年龄的声称。用户已经21岁了，
有资格访问特定的资源吗？
方法ShowClaims访问一组声称，把主题、发行人、声称类型和更多选项写到控制台
（代码文件WindowsPrincipal / Program.cs）：
    public static void ShowClaims(IEnumerable claims)
    {
      WriteLine("Claims");
      foreach (var claim in claims)
      {
        WriteLine($"Subject: {claim.Subject}");
        WriteLine($"Issuer: {claim.Issuer}");
        WriteLine($"Type: {claim.Type}");
        WriteLine($"Value type: {claim.ValueType}");
        WriteLine($"Value: {claim.Value}");
        foreach (var prop in claim.Properties)
        {
        WriteLine($"\tProperty: {prop.Key} {prop.Value}");
        }
        WriteLine();
      }
    }
下面是从Microsoft 
Live账户中提取的一个声称，它提供了名称、主ID和组标识符等
信息。
    Claims
    Subject: System.Security.Principal.WindowsIdentity
    Issuer: AD AUTHORITY
    Type: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name
    Value type: http://www.w3.org/2001/XMLSchema#string
    Value: THEROCKS\Christian
    Subject: System.Security.Principal.WindowsIdentity
    Issuer: AD AUTHORITY
    Type: http://schemas.microsoft.com/ws/2008/06/identity/claims/primarysid
    Value type: http://www.w3.org/2001/XMLSchema#string
    Value: S-1-5-21-1413171511-313453878-1364686672-1001
          Property: http://schemas.microsoft.com/ws/2008/06/identity/claims/
          windowssubauthority NTAuthority
    Subject: System.Security.Principal.WindowsIdentity
    Issuer: AD AUTHORITY
    Type: http://schemas.microsoft.com/ws/2008/06/identity/claims/groupsid
    Value type: http://www.w3.org/2001/XMLSchema#string
    Value: S-1-1-0
          Property: http://schemas.microsoft.com/ws/2008/06/identity/claims/
          windowssubauthority WorldAuthority
    Subject: System.Security.Principal.WindowsIdentity
    Issuer: AD AUTHORITY
    Type: http://schemas.microsoft.com/ws/2008/06/identity/claims/groupsid
    Value type: http://www.w3.org/2001/XMLSchema#string
    Value: S-1-5-114
          Property: http://schemas.microsoft.com/ws/2008/06/identity/claims/
          windowssubauthority NTAuthority
    ...
可以从声称的提供程序中把声称添加到Windows标识。还可以从简单的客户端程序中
添加声称，如年龄声称：
    identity.AddClaim(new Claim("Age", "25"));
使用程序中的声称，相信这个声称。这个声称是真的——是25岁吗？声称也可以都是
谎言。从客户机应用程序中添加这个声称，可以看到，声称的发行人是LOCAL
AUTHORITY。AD AUTHORITY （Active Directory）的信息更值得信赖，但这里需要信
任Active Directory系统管理员。
WindowsIdentity派生自基类ClaimsIdentity，提供了几个方法来检查声称，或检索特定
的声称。为了测试声称是否可用，就可以使用HasClaim方法：
    bool hasName = identity.HasClaim(c => c.Type == ClaimTypes.Name);
要检索特定的声称，FindAll方法需要一个谓词来定义匹配：
    var groupClaims = identity.FindAll(c => c.Type == ClaimTypes.GroupSid);
  注意： 声称类型可以是一个简单的字符串，例如前面使用的"Age"类型。
ClaimType定义了一组已知的类型，例如Country、Email、Name、MobilePhone、
UserData、Surname、PostalCode等。
  注意： ASP.NET Web应用程序用户的身份验证参见第41章。
24.3 加密数据
机密数据应得到保护，从而使未授权的用户不能读取它们。这对于在网络中发送的数
据或存储的数据都有效。可以用对称或不对称密钥来加密这些数据。
通过对称密钥，可以使用同一个密钥进行加密和解密。与不对称的加密相比，加密和
解密使用不同的密钥：公钥/私钥。如果使用一个公钥进行加密，就应使用对应的私钥进
行解密，而不是使用公钥解密。同样，如果使用一个私钥加密，就应使用对应的公钥解
密，而不是使用私钥解密。不可能从私钥中计算出公钥，也不可能从公钥中计算出私钥。
公钥/私钥总是成对创建。公钥可以由任何人使用，它甚至可以放在Web站点上，但
私钥必须安全地加锁。为了说明加密过程，下面看看使用公钥和私钥的例子。
如果Alice给Bob发了一封电子邮件，如图24-1所示，并且Alice希望能保证除了Bob
外，其他人都不能阅读该邮件，所以她就使用Bob的公钥。邮件是使用Bob的公钥加密
的。Bob打开该邮件，并使用他秘密存储的私钥解密。这种方式可以保证除了Bob外，其
他人都不能阅读Alice的邮件。
图24-1
但这还有一个问题：Bob不能确保邮件是Alice发送来的。Eve可以使用Bob的公钥加
密发送给Bob的邮件并假装是Alice。我们使用公钥/私钥把这条规则扩展一下。下面再次
从Alice给Bob发送电子邮件开始。在Alice使用Bob的公钥加密邮件之前，她添加了自己的
签名，再使用自己的私钥加密该签名。然后使用Bob的公钥加密邮件。这样就保证了除
Bob外，其他人都不能阅读该邮件。在Bob解密邮件时，他检测到一个加密的签名。这个
签名可以使用Alice的公钥来解密。而Bob可以访问Alice的公钥，因为这个密钥是公钥。在
解密了签名后，Bob就可以确定是Alice发送了电子邮件。
使用对称密钥的加密和解密算法比使用非对称密钥的算法快得多。对称密钥的问题是
密钥必须以安全的方式互换。在网络通信中，一种方式是先使用非对称的密钥进行密钥互
换，再使用对称密钥加密通过网络发送的数据。
在.NET 
Framework中，可以使用System.Security.Cryptography名称空间中的类来加
密。它实现了几个对称算法和非对称算法。有几个不同的算法类用于不同的目的。一些类
以Cng作为前缀或后缀。CNG是Cryptography Next Generation的简称，是本机Crypto API的
更新版本，这个API可以使用基于提供程序的模型，编写独立于算法的程序。
表24-1列出了System.Security.Cryptography名称空间中的加密类及其功能。没有Cng、
Managed或CryptoServiceProvider后缀的类是抽象基类，如MD5。Managed后缀表示这个算
法用托管代码实现，其他类可能封装了本地Windows API调用。CryptoServiceProvider后缀
用于实现了抽象基类的类，Cng后缀用于利用新Cryptography CNG API的类。
表24-1
下面用例子说明如何通过编程使用这些算法。
24.3.1 创建和验证签名
第一个例子说明了如何使用ECDSA算法进行签名。Alice创建了一个签名，它用Alice
的私钥加密，可以使用Alice的公钥访问。因此保证该签名来自于Alice。
SigningDemo示例代码使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.Security.Cryptograhy.Algorithms
    System.Security.Cryptography.Cng
名称空间：
    System
    System.Security.Cryptography
    System.Text
    static System.Console
首先，看看Main（）方法中的主要步骤：创建Alice的密钥，给字符串“Alice”签名，
最后使用公钥验证该签名是否真的来自于Alice。要签名的消息使用Encoding类转换为一个
字节数组。要把加密的签名写入控制台，包含该签名的字节数组应使用
Convert.ToBase64String（）方法转换为一个字符串（代码文件
SigningDemo/Program.cs）。
    private CngKey _aliceKeySignature;
    private byte[] _alicePubKeyBlob;
    static void Main()
    {
      var p = new Program();
      p.Run();
    }
    public void Run()
    {
      InitAliceKeys();
      byte[] aliceData = Encoding.UTF8.GetBytes("Alice");
      byte[] aliceSignature = CreateSignature(aliceData, aliceKeySignature);
      WriteLine($"Alice created signature: {Convert.ToBase64String(aliceSignature
)}");
      if (VerifySignature(aliceData, aliceSignature, alicePubKeyBlob))
      {
        WriteLine("Alice signature verified successfully");
      }
    }
  注意： 千万不要使用Encoding类把加密的数据转换为字符串。Encoding类验
证和转换Unicode不允许使用的无效值，因此把字符串转换回字节数组会得到另一个结
果。
InitAliceKeys（）方法为Alice创建新的密钥对。因为这个密钥对存储在一个静态字段
中，所以可以从其他方法中访问它。CngKey类的Create（）方法把该算法作为一个参数，
为算法定义密钥对。通过Export（）方法，导出密钥对中的公钥。这个公钥可以提供给
Bob，来验证签名。Alice保留其私钥。除了使用CngKey类创建密钥对之外，还可以打开
存储在密钥存储器中的已有密钥。通常Alice在其私有存储器中有一个证书，其中包含了
一个密钥对，该存储器可以用CngKey.Open（）方法访问。
    private void InitAliceKeys()
    {
      _aliceKeySignature = CngKey.Create(CngAlgorithm.ECDsaP521);
      _alicePubKeyBlob = aliceKeySignature.Export(CngKeyBlobFormat.GenericPublicB
lob);
    }
有了密钥对，Alice就可以使用ECDsaCng类创建签名了。这个类的构造函数从Alice那
里接收包含公钥和私钥的CngKey类。再使用私钥，通过SignData（）方法给数据签名。
SignData（）方法在.NET Core中略有不同。.NET Core需要如下算法：
    public byte[] CreateSignature(byte[] data, CngKey key)
    {
      byte[] signature;
      using (var signingAlg = new ECDsaCng(key))
      {
    #if NET46
        signature = signingAlg.SignData(data);
        signingAlg.Clear();
    #else
        signature = signingAlg.SignData(data, HashAlgorithmName.SHA512);
    #endif
      }
      return signature;
    }
要验证签名是否真的来自于Alice, Bob使用Alice的公钥检查签名。包含公钥blob的字
节数组可以用静态方法Import（）导入CngKey对象。然后使用ECDsaCng类，调用
VerifyData（）方法来验证签名。
    public bool VerifySignature(byte[] data, byte[] signature, byte[] pubKey)
    {
      bool retValue = false;
      using (CngKey key = CngKey.Import(pubKey, CngKeyBlobFormat.GenericPublicBlo
b))
      using (var signingAlg = new ECDsaCng(key))
      {
    #if NET46
        retValue = signingAlg.VerifyData(data, signature);
        signingAlg.Clear();
    #else
        retValue = signingAlg.VerifyData(data, signature, HashAlgorithmName.SHA51
2);
    #endif
      }
      return retValue;
    }
24.3.2 实现安全的数据交换
下面是一个比较复杂的例子，它使用EC Diffie-Hellman算法交换一个对称密钥，以进
行安全的传输。
  注意： 编写本书时，.NET Core仅包含ECDiffieHellman抽象基类，实现代码
可以使用它创建具体的类。目前还没有具体的类，所以这个示例仅使用.NET 4.6。
SecureTransfer示例应用程序使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.Security.Cryptograhy.Algorithms
    System.Security.Cryptography.Cng
    System.Security.Cryptography.Primitives
名称空间：
    System
    System.IO
    System.Security.Cryptography
    System.Text
    System.Threading.Tasks
    static System.Console
Main（）方法包含了其主要功能。Alice创建了一条加密的消息，并把它发送给Bob。
在此之前，要先为Alice和Bob创建密钥对。Bob只能访问Alice的公钥，Alice也只能访问
Bob的公钥（代码文件SecureTransfer/Program.cs）。
    private CngKey _aliceKey;
    private CngKey _bobKey;
    private byte[] _alicePubKeyBlob;
    private byte[] _bobPubKeyBlob;
    static void Main()
    {
      var p = new Program();
      p.RunAsync().Wait();
      ReadLine();
    }
    public async Task RunAsync()
    {
      try
      {
        CreateKeys();
        byte[] encrytpedData =
        await AliceSendsDataAsync("This is a secret message for Bob");
        await BobReceivesDataAsync(encrytpedData);
      }
      catch (Exception ex)
      {
        WriteLine(ex.Message);
      }
    }
在CreateKeys（）方法的实现代码中，使用EC Diffie-Hellman 512算法创建密钥。
    public void CreateKeys()
    {
      aliceKey = CngKey.Create(CngAlgorithm.ECDiffieHellmanP521);
      bobKey = CngKey.Create(CngAlgorithm.ECDiffieHellmanP521);
      alicePubKeyBlob = aliceKey.Export(CngKeyBlobFormat.EccPublicBlob);
      bobPubKeyBlob = bobKey.Export(CngKeyBlobFormat.EccPublicBlob);
    }
在AliceSendsDataAsync（）方法中，包含文本字符的字符串使用Encoding类转换为一
个字节数组。创建一个ECDiffieHellmanCng对象，用Alice的密钥对初始化它。Alice调用
DeriveKeyMaterial（）方法，从而使用其密钥对和Bob的公钥创建一个对称密钥。返回的
对称密钥使用对称算法AES加密数据。AesCryptoServiceProvider需要密钥和一个初始化矢
量（IV）。IV从GenerateIV（）方法中动态生成，对称密钥用EC 
Diffie-Hellman算法交
换，但还必须交换IV。从安全性角度来看，在网络上传输未加密的IV是可行的——只是
密钥交换必须是安全的。IV存储为内存流中的第一项内容，其后是加密的数据，其中，
CryptoStream类使用AesCryptoServiceProvider类创建的encryptor。在访问内存流中的加密
数据之前，必须关闭加密流。否则，加密数据就会丢失最后的位。
    public async Task AliceSendsDataAsync(string message)
    {
      WriteLine($"Alice sends message: {message}");
      byte[] rawData = Encoding.UTF8.GetBytes(message);
      byte[] encryptedData = null;
      using (var aliceAlgorithm = new ECDiffieHellmanCng(aliceKey))