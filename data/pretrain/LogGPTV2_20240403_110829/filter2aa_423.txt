Golang红队开发指南
目录
1
2
3
ProjectDiscovery
Golang 植入端对抗方案
Golang C2 Sliver
1. 像Python一样简单，代码可读性好
2. 简单的多架构交叉编译支持
3. 语法层面的并发支持
4. 易用的包管理 & 很多红队生态
前言
为什么是Go
Par t1：ProjectDiscover y
域名收集
Subfinder：通过各种api接口被动收集子域名
Uncover：整合各种网络空间引擎api接口
Dnsx：dns验证
资产探测
Httpx：web信息探测
Naabu：端口扫描
PoC
Nuclei：Poc批量探测
通知
Notify：整合第三方结果通知
ProjectDiscovery
https://github.com/projectdiscovery
HTTPX：Web信息探测
https://github.com/projectdiscovery/httpx
Features
HTTPX：Web信息探测
1. http/https探测逻辑
2. Autofdmax
• github.com/projectdiscovery/fdmax
3. CdnCheck
• github.com/projectdiscovery/cdncheck
• 整理CDN的ip段，判断ip是否在这些ip段中
4. Retryablehttp
• 可重试http请求库
• github.com/projectdiscovery/retryablehttp-go
• github.com/projectdiscovery/fastdialer/fastdialer
Tricks
HTTPX 并发控制
github.com/projectdiscovery/httpx/blob/master/runner/runner.go#L670
Module: github.com/remeh/sizedwaitgroup
Go常用并发控制
• sync.WaitGroup
• github.com/remeh/sizedwaitgroup
• github.com/uber-go/ratelimit
• Goroutine work pool
协程池
例子: 并发控制
Context.WithCancel：生成一个可取消的 Context。
例子：WEB指纹识别
Naabu: 端口扫描器
https://github.com/projectdiscovery/naabu/blob/master/v2/go.mod
快速扫描的秘密
• syn扫描基于系统socket发包，libpcap接收
• blackrock:随机化扫描算法
Golang with libpcap
静态编译
GOENABLE: 1
CGO_LDFLAGS: "-Wl,-static -L/usr/lib/x86_64-linux-gnu/libpcap.a -lpcap -Wl,-Bdynamic"
用途
DNS爆破？(https://github.com/boy-hack/ksubdomain)
Linux Port Knocking?
Golang with libpcap
Subfinder：子域名被动搜索
https://github.com/projectdiscovery/subfinder
插件组织
Subfinder 集成
Nuclei：PoC探测
https://github.com/projectdiscovery/nuclei-templates
https://github.com/projectdiscovery/nuclei
Nuclei DSL
github.com/Knetic/govaluate
github.com/boy-hack/govaluate
Nuclei：其他
1. 请求合并
• 比较模板请求中的method，最大重定向数，是否共享cookie请求，
是否重定向
• 比较请求的path
• 比较请求的header
2. 项目保存
• projectfile是nuclei提供了可以保存项目的选项。
• 内部实现是通过一个map保存了所有请求的包以及返回结果，key
是对请求体(request struct)序列化后进行sha256运算。
Nuclei 集成
github.com/projectdiscovery/nuclei/v2 v2.6.0
模板解析
Nuclei 集成
github.com/projectdiscovery/nuclei/v2 v2.6.0
模板执行
设计模式:Pipeline
ProjectDiscovery 集成
Par t2：Golang植入端对抗方案
Golang植入端对抗方案
植入端：任何投递到目标环境的都叫植入端
预编译阶段
后处理阶段
执行阶段
源码生成
投递
编译阶段
对抗点
静态特征
行为对抗
内存对抗
静态分析
解决方案
源码混淆
去除Go符号
Go免杀框架
预编译阶段
Golang植入端对抗方案
灵感来源
预编译阶段
Golang植入端对抗方案
基于抽象语法树(AST)  
源码混淆
• 长文本拆分
• 字符串、常量加密
• 虚假分支
• 控制流混淆
混淆前
混淆后
预编译阶段
Golang植入端对抗方案
长文本拆分
混淆前
混淆后
预编译阶段
Golang植入端对抗方案
字符串、常量加密
混淆前
混淆后
预编译阶段
Golang植入端对抗方案
不透明谓词：x * (x + 1) % 2 == 0 对于任意整数x，是永真
条件
可优化：使用API如CreateFile的返回值，或内置函数的错
误输出作为条件
_, err := strconv.ParseBool("x\xff")
虚假分支
混淆前
混淆后
预编译阶段
Golang植入端对抗方案
控制流混淆
混淆前
混淆后
后处理阶段
Golang植入端对抗方案
Golang符号混淆
• https://github.com/0xjiayu/go_parser
• https://github.com/goretk/redress
https://github.com/goretk/gore
Packages
Extracting types
Estimating source code layout
Golang植入端对抗方案
后处理阶段 Golang符号混淆方案
go-strip
• github.com/boy-hack/go-strip
• 编译过程中混淆
• 支持消除/混淆
• 函数名称
• 函数路径
• Go Struct
• Type
• Go Compiler Version
• Go BuildID
• Go Root Path
•github.com/unixpickle/gobfuscate
• Pkg重定位，goroot重定位，string混淆
• 源码层面混淆
•github.com/burrowers/garble
• Replace Many useful identifiiers,package paths 
filename
• Remote build and module information
• 混淆字符串
• 编译过程中混淆
后处理阶段
Golang植入端对抗方案
处理二进制
• github.com/boy-hack/go-strip
执行阶段
Golang植入端对抗方案
免杀框架
ScareCrow
https://github.com/optiv/ScareCrow
• Crypto
• aes
• Evasion
• ntdll .text reload
• patch etw
• syscall
• Loader
• binary
• control
• dll
• excel
• msiexec
• wscript
amber
https://github.com/EgeBalci/amber
Reflective PE packer
• github.com/EgeBalci/keystone-go
Crypto
• sgn
• Delivery
• bits
• hta
• macro
• AfterProcessing
• 签名 、伪装白文件版本信息
执行阶段
Golang植入端对抗方案
免杀框架
执行阶段 Go SDK与文档生成
Golang植入端对抗方案
Par t3：Golang C2 Sliver
🤖C2:Command & Control Server.
🤖横行移动、数据读取.
🤖将流量隐藏在正常应用中.
🤖不同的连接方式: TCP, P2P, DGA.
什么是C2？
https://github.com/BishopFox/sliver/
通道：mTLS、WireGuard、HTTP(S)、DNS
植入端：MacOS、Windows、Linux
Sliver
Sliver
-> implant 模板
-> garble
-> Staged 主要是调用msf来生成的payload
-> 使用DNS诱饵域名 发现蓝队
Sliver
HTTP/HTTPS 通信流程
1. 请求公钥
2. 返回公钥
3. 生成AES KEY，公钥加密
4. 确认，返回session id表示注册
5. 后续implant发送数据附带sessionid
Sliver
没有Sleep? http通道的实时回显
CobaltStrike
TeamServer
间隔一段请求，获得指令和结果
Sliver
TeamServer
请求，若没有数据，teamserver阻塞直至超时
有数据则立刻返回，implant重新发起请
求
Sliver
重放检测
发送的指令
随机编码+加密+随机值
Sha1运算
入库
重放
Error Page
Sliver
DNS通信流程
DNS协议
• dns域名限制 为253字符
• 对每一级域名长度的限制是63个字符
• 一个DNS TXT 记录字符串最多可包含255 个字符
防重放攻击：sha1
Sliver
Go植入端变为shellcode
server\generate\binaries.go
编译为dll
Donut转换
go-donut github.com/binject/go-donut/donut 
架构图
TeamServer
Operater
前置器
• 前置器将原有TeamServer的通信(HTTP、
DNS)拆出来单独作为一个服务。
• 前置器能够一键部署以及销毁，防止溯源
• 前置器基于反代伪装任意网站，流量隐藏
• IP限制，拦截安全厂商、常见沙箱IP
• 蓝队发现预警功能
前置器：防止溯源、流量隐藏
自己设计C2？
功能插件化
基础 beacon
• filemanager
• terminal
screenshot
proxy
Sideload
Darwin：DYLD_INSERT_LIBRARIES
Linux：
Memfd
Windows： Dll Reflect
https://github.com/moloch--/grumble
纯go实现 loadlibrary from memory 支持 dll、so、dyld
https://github.com/pkujhd/goloader
go obj loader
自己设计C2？
功能
https://github.com/Binject/binjection
用于感染，给pe、elf、marcho文件插入shellcode
https://github.com/WireGuard/wireguard-go
vpn go实现
https://github.com/C-Sto/BananaPhone
windows syscall实现
https://github.com/vyrus001/go-mimikatz
go写的mimikatz
https://github.com/gen0cide/gscript
内置javascript引擎的droppers生成框架
https://github.com/liamg/traitor
linux 提取框架
https://github.com/optiv/Ivy
vba生成框架
https://github.com/wikiZ/RedGuard
一款C2设施前置流量控制工具
https://github.com/shadow1ng/fscan
一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。
https://github.com/redcode-labs/Coldfire
provides various methods useful for malware development in Golang
自己设计C2？