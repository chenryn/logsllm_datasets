leader’s proposal “safe” but promises to remember it, in-
dicating that the leader’s proposal is fully committed.
In cryptocurrency terms, the collective signature re-
sulting from the prepare phase provides a proof-of-
acceptance of a proposed block of transactions. This
block is not yet committed, however, since a Byzantine
leader that does not publish the accepted block could
double-spend by proposing a conﬂicting block in the next
round.
In the second CoSi commit round, the leader
announces the proof-of-acceptance to all members, who
then validate it and collectively sign the block’s hash to
produce a collective commit signature on the block. This
way a Byzantine leader cannot rewrite history or double-
spend, because by counting arguments at least one honest
node would have to sign the commit phase of both histo-
ries, which an honest node by deﬁnition would not do.
The use of CoSi does not affect the fundamental prin-
ciples or semantics of PBFT but improves its scalability
and efﬁciency in two main ways. First, during the com-
mit round where each consensus group member must
verify that a super-majority of members have signed the
prior prepare phase, each participant generally needs to
receive only an O(1)-size rather than O(n)-size message,
and to expend only O(1) rather than O(n) computation
effort by verifying a single collective signature instead
of n individual ones. This beneﬁt directly increases the
scalability and reduces the bandwidth and computation
costs of consensus rounds themselves.
284  25th USENIX Security Symposium 
USENIX Association
6
A second beneﬁt is that after the ﬁnal CoSi commit
round has completed, the ﬁnal resulting collective com-
mit signature serves as a typically O(1)-size proof, which
anyone can verify in O(1) computation time that a given
block – hence any transaction within that block – has
been irreversibly committed. This secondary scalability-
beneﬁt might in practice be more important than the
ﬁrst, because it enables “light clients” who neither mine
blocks nor store the entire blockchain history to verify
quickly and efﬁciently that a transaction has committed,
without requiring active communication with or having
to trust any particular full node.
3.6 Decoupling Transaction Veriﬁcation
from Leader Election
Although ByzCoin so far provides a scalable guarantee
of strong consistency, thus ensuring that clients need to
wait only for the next block rather than the next sev-
eral blocks to verify that a transaction has committed,
the time they still have to wait between blocks can, nev-
ertheless, be signiﬁcant: e.g., up to 10 minutes using
Bitcoin’s difﬁculty tuning scheme. Whereas ByzCoin’s
strong consistency might in principle make it “safe” from
a consistency perspective to increase block mining rate,
doing so could still exacerbate liveness and other per-
formance issues, as in Bitcoin [47]. To enable lower
client-perceived transaction latency, therefore, we build
on the idea of Bitcoin-NG [24] to decouple the functions
of transaction veriﬁcation from block mining for leader
election and consensus group membership.
As in Bitcoin-NG, we use two different kinds of
blocks. The ﬁrst, microblocks or transaction blocks, rep-
resent transactions to be stored and committed. The cur-
rent leader creates a new microblock every few seconds,
depending on the size of the block, and uses the CoSi-
based PBFT protocol above to commit and collectively
sign it. The other type of block, keyblocks, are mined
via proof-of-work as in Bitcoin and serve to elect leaders
and create shares in ByzCoin’s group membership pro-
tocol as discussed earlier in Section 3.3. As in Bitcoin-
NG, this decoupling allows the current leader to pro-
pose and commit many microblocks that contain many
smaller batches of transactions, within one ≈ 10-minute
keyblock mining period. Unlike Bitcoin-NG, in which
a malicious leader could rewrite history or double-spend
within this period until the next keyblock, ByzCoin en-
sures that each microblock is irreversibly committed re-
gardless of the current leader’s behavior.
In Bitcoin-NG one blockchain includes both types of
blocks, which introduces a race condition for miners.
As microblocks are created, the miners have to change
the header of their keyblocks to mine on top of the lat-
est microblock. In ByzCoin, in contrast, the blockchain
1
2
1
2
3
4
5
Keyblock
Microblock
Collective Signature
Figure 3: ByzCoin blockchain: Two parallel chains store
information about the leaders (keyblocks) and the trans-
actions (microblocks)
becomes two separate parallel blockchains, as shown
in Fig. 3. The main blockchain is the keyblock chain,
consisting of all mined blocks. The microblock chain is
a secondary blockchain that depends on the primary to
identify the era in which every microblock belongs to,
i.e., which miners are authoritative to sign it and who is
the leader of the era.
Microblocks. A microblock is a simple block that the
current consensus group produces every few seconds
to represent newly-committed transactions. Each mi-
croblock includes a set of transactions and a collective
signature. Each microblock also includes hashes refer-
ring to the previous microblock and keyblock: the for-
mer to ensure total ordering, and the latter indicating
which consensus group window and leader created the
microblock’s signature. The microblock’s hash is collec-
tively signed by the corresponding consensus group.
Keyblocks. Each keyblock contains a proof-of-work,
which is used to determine consensus group membership
via the sliding-window mechanism discussed earlier, and
to pay signers their rewards. Each newly-mined key-
block deﬁnes a new consensus group, and hence a new
set of public keys with which the next era’s microblocks
will be collectively signed. Since each successive con-
sensus group differs from the last in at most one mem-
ber, PBFT ensures the microblock chain’s consistency
and continuity across this group membership change pro-
vided at most f out of 3 f + 2 members are faulty.
Bitcoin-NG relies on incentives to discourage the next
leader from accidentally or maliciously “forgetting” a
prior leader’s microblocks. In contrast, the honest super-
majority in a ByzCoin consensus group will refuse to
allow a malicious or amnesiac leader to extend any but
the most recently-committed microblock, regardless of
which (current or previous) consensus group committed
it.
Thus, although competing keyblock conﬂicts may
still appear, these “forks” cannot yield an inconsistent
microblock chain.
Instead, a keyblock conﬂict can at
USENIX Association  
25th USENIX Security Symposium  285
7
share window of size w
L
keyblock (co-signed)
microblock (co-signed)
share
miner (co-signer)
L
leader
0
H0
1
H1
n − 2
n − 1
...
Hn−2
null
y
r
t
n
e
h
t
i
t
c
e
l
e
s
Hash
h
i = h mod (n − 1)
Figure 4: Overview of the full ByzCoin design
Figure 5: Deterministic fork resolution in ByzCoin
worst temporarily interrupt the PBFT protocol’s liveness,
until it is resolved as mentioned in Section 3.6.1.
Decoupling transacton veriﬁcation from leader elec-
tion and consensus group evolution in this way brings
the overall ByzCoin architecture to completion, as illus-
trated in Fig. 4. Subsequent sections discuss further im-
plications and challenges this architecture presents.
3.6.1 Keyblock Conﬂicts and Selﬁsh Mining
PBFT’s strong consistency by deﬁnition does not permit
inconsistencies such as forks in the microblock chain.
The way the miners collectively decide how to resolve
keyblock conﬂicts, however, can still allow selﬁsh min-
ing [25] to occur as in Bitcoin. Worse, if the min-
ers decide randomly to follow one of the two blocks,
then keyblock forks might frequently lead to PBFT live-
ness interruptions as discussed above, by splitting min-
ers “too evenly” between competing keyblocks. Another
approach to deciding between competing keyblocks is
to impose a deterministic priority function on their hash
values, such as “smallest hash wins.” Unfortunately, this
practice can encourage selﬁsh mining.
One way to break a tie without helping selﬁsh miners,
is to increase the entropy of the output of the determinis-
tic prioritization function. We implement this idea using
the following algorithm. When a miner detects a key-
block fork, it places all competing blocks’ header hashes
into a sorted array, from low to high hash values. The
array itself is then hashed, and the ﬁnal bit(s) of this hash
determine which keyblock wins the fork.
This solution, shown in Fig. 5, also uses the idea of a
deterministic function applied to the blocks, thus requir-
ing no voting. Its advantage is that the input of the hash
function is partially unknown before the fork occurs, thus
the entropy of the output is high and difﬁcult for an at-
tacker to be able to optimize. Given that the search space
for a possible conﬂict is as big as the search space for
a new block, trying to decide if a block has better than
50% probability of winning the fork is as hard as ﬁnding
a new block.
3.6.2 Leader Election and PBFT View Changes
Decoupling transaction veriﬁcation from the block-
mining process comes at a cost. So far we have as-
sumed, as in PBFT, that the leader remains ﬁxed unless
he fails.
If we keep this assumption, then this leader
gains the power of deciding which transactions are ver-
iﬁed, hence we forfeit the fairness-enforcing beneﬁt of
Bitcoin’s leader election. To resolve this issue, every
time a keyblock is signed, ByzCoin forces a mandatory
PBFT view-change to the keyblock’s miner. This way
the power of verifying transactions in blocks is assigned
to the rightful miner, who has an era of microblock cre-
ation from the moment his keyblock is signed until the
next keyblock is signed.
When a keyblock conﬂict occurs, more than one such
“mandatory” view-change occurs, with the successful
miners trying to convince other participants to adopt their
keyblock and its associated consensus group. For exam-
ple, in a keyblock fork, one of the two competing key-
blocks wins the resolution algorithm described above.
However, if the miner of the “losing” block races to
broadcast its keyblock and more than 33% honest min-
ers have already committed to it before learning about
the competing keyblock, then the “winning” miner is too
late and the system either commits to the ﬁrst block or (in
the worst case) loses liveness temporarily as discussed
above. This occurs because already-committed miners
will not accept a mandatory view-change except to a key-
block that represents their committed state and whose
microblock chain extends all previously-committed mi-
croblocks. Further analysis of how linearizability is pre-
served across view-changes may be found in the original
PBFT paper [14].
3.6.3 Tree Creation in ByzCoin
Once a miner successfully creates a new keyblock, he
needs to form a CoSi communication tree for collec-
tive signing, with himself as the leader.
If all miners
individually acknowledge this keyblock to transition to
286  25th USENIX Security Symposium 
USENIX Association
8
the next view, this coordination normally requires O (N)
messages. To avoid this overhead at the beginning of
each keyblock round, the miners autonomously create
the next round’s tree bottom-up during the previous key-
block round. This can be done in O (1) by using the
blockchain as an array that represents a full tree.
This tree-building process has three useful side-
effects. First, the previous leader is the ﬁrst to get the new
block, hence he stops creating microblocks and wasting
resources by trying to sign them. Second, in the case of
a keyblock conﬂict, potential leaders use the same tree,
and the propagation pattern is the same; this means that
all nodes will learn and decide on the conﬂict quickly.
Finally, in the case of a view change, the new view will
be the last view that worked correctly. So if the leader
of the keyblock i fails, the next leader will again be the
miner of keyblock i− 1.
3.7 Tolerating Churn and Byzantine Faults
In this section we discuss the challenges of fault toler-
ance in ByzCoin, particularly tree failures and maximum
tolerance for Byzantine faults.
3.7.1 Tree Fault Tolerance
In CoSi, there are multiple different mechanisms that al-
low substantial fault-tolerance. Furthermore the strict
membership requirements and the frequent tree changes
of ByzCoin increase the difﬁculty for a malicious at-
tacker with less than around 25% of the total hash power
to compromise the system. A security analysis, however,
must assume that a Byzantine adversary is able to get the
correct nodes of the ByzCoin signing tree so that it can
compromise the liveness of the system by a simple DoS.
To mitigate this risk, we focus on recent Byzantine
fault tolerance results [32], modifying ByzCoin so that
the tree communication pattern is a normal-case perfor-
mance optimization that can withstand most malicious
attacks. But when the liveness of the tree-based ByzCoin
is compromised, the leader can return to non-tree-based
communication until the end of his era.
The leader detects that the tree has failed with the fol-
lowing mechanism: After sending the block to his chil-
dren, the leader starts a timer that expires before the