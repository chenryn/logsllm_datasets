---
title: 'Create an Azure Data Explorer cluster and database'
description: Learn how to create an Azure Data Explorer cluster and database.
ms.reviewer: lugoldbe
ms.topic: how-to
ms.custom: devx-track-azurepowershell
ms.date: 05/17/2023
---
# Create an Azure Data Explorer cluster and database
Azure Data Explorer is a fast, fully managed data analytics service for real-time analysis on large volumes of data streaming from applications, websites, IoT devices, and more. To use Azure Data Explorer, you first create a cluster, and create one or more databases in that cluster. Then, you can ingest (load) data into a database and run queries against it.
In this article, you'll learn how to create a cluster and a database using either C#, Python, Go, the Azure CLI, PowerShell, or an Azure Resource Manager (ARM) template. To learn how to create a cluster and database using the Azure portal, see [Quickstart: Create an Azure Data Explorer cluster and database](create-cluster-and-database.md).
> For code samples based on previous SDK versions, see the [archived article](/previous-versions/azure/data-explorer/create-cluster-database).
## Prerequisites
Prerequisites by method of cluster and database creation:
### [C#](#tab/csharp)
* An Azure subscription. Create a [free Azure account](https://azure.microsoft.com/free/).
* [Visual Studio 2022 Community Edition](https://www.visualstudio.com/downloads/). Turn on **Azure development** during the Visual Studio setup.
* Install the [Microsoft.Azure.Management.Kusto NuGet package](https://www.nuget.org/packages/Microsoft.Azure.Management.Kusto/).
* [A Microsoft Entra application and service principal that can access resources](/azure/active-directory/develop/howto-create-service-principal-portal). Save the **Directory (tenant) ID**, **Application ID**, and **Client Secret**.
### [Python](#tab/python)
* An Azure subscription. Create a [free Azure account](https://azure.microsoft.com/free/).
* [Python 3.4+](https://www.python.org/downloads/).
* Install the [azure-common](https://pypi.org/project/azure-common/) and [azure-mgmt-kusto](https://pypi.org/project/azure-mgmt-kusto/) packages.
* [A Microsoft Entra application and service principal that can access resources](/azure/active-directory/develop/howto-create-service-principal-portal). Save the **Directory (tenant) ID**, **Application ID**, and **Client Secret**.
### [Go](#tab/go)
* An Azure subscription. Create a [free Azure account](https://azure.microsoft.com/free/).
* Install [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).
* Install an appropriate version of [Go](https://golang.org/). For supported versions, see [Azure Kusto Module for Go](https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/kusto/armkusto).
* [A Microsoft Entra application and service principal that can access resources](/azure/active-directory/develop/howto-create-service-principal-portal). Save the **Directory (tenant) ID**, **Application ID**, and **Client Secret**.
### [Azure CLI](#tab/azcli)
* An Azure subscription. Create a [free Azure account](https://azure.microsoft.com/free/).
* You can use [Azure Cloud Shell](https://shell.azure.com) to run the code in this article without having to install anything on your local environment.
* If you choose to install and use the Azure CLI locally, follow the steps in [Configure parameters](#configure-the-cli-parameters). This article requires the Azure CLI version 2.0.4 or later. Run `az --version` to check your version. If you need to install or upgrade, see [Install the Azure CLI](/cli/azure/install-azure-cli).
### Configure the CLI parameters
The following steps aren't required if you're running commands in Azure Cloud Shell. If you're running the CLI locally, follow these steps to set up the environment:
1. Install extension to use the latest Kusto CLI version:
    ```azurecli-interactive
    az extension add -n kusto
    ```
1. Run the following command to sign in to Azure:
    ```azurecli-interactive
    az login
    ```
1. Set the subscription where you want your cluster to be created. Replace `MyAzureSub` with the name of the Azure subscription that you want to use:
    ```azurecli-interactive
    az account set --subscription MyAzureSub
    ```
1. Set the resource group where you want your cluster to be created. Replace `testrg` with the name of the resource group that you want to use:
    ```azurecli-interactive
    az group create --name testrg --location westus
    ```
### [PowerShell](#tab/powershell)
* An Azure subscription. Create a [free Azure account](https://azure.microsoft.com/free/).
* You can use [Azure Cloud Shell](https://shell.azure.com) to run the code in this article without having to install anything on your local environment.
* If you choose to install and use [PowerShell](/powershell/scripting/install/installing-powershell-on-windows) locally, follow the steps in [Configure parameters](#configure-parameters).
### Configure parameters
The following steps aren't required if you're running commands in Azure Cloud Shell. If you're running the CLI locally, follow these steps to set up the environment:
1. Run the following command to sign in to Azure:
    ```azurepowershell-interactive
    Connect-AzAccount
    ```
1. Set the subscription where you want your cluster to be created:
    ```azurepowershell-interactive
     Set-AzContext -SubscriptionId "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
    ```
1. When running Azure CLI locally or in the Azure Cloud Shell, you need to install the `Az.Kusto` module on your device:
    ```azurepowershell-interactive
     Install-Module -Name Az.Kusto
    ```
### [ARM template](#tab/arm)
* An Azure subscription. Create a [free Azure account](https://azure.microsoft.com/free/).
---
## Create an Azure Data Explorer cluster
This section guides you through the process of creating an Azure Data Explorer cluster. Choose the relevant tab for your preferred method to create the cluster.
### [C#](#tab/csharp)
1. Create your cluster by using the following code:
    ```csharp
    var tenantId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; //Directory (tenant) ID
    var clientId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; //Application ID
    var clientSecret = "PlaceholderClientSecret"; //Client Secret
    var subscriptionId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx";
    var credentials = new ClientSecretCredential(tenantId, clientId, clientSecret);
    var resourceManagementClient = new ArmClient(credentials, subscriptionId);
    var resourceGroupName = "testrg";
    var subscription = await resourceManagementClient.GetDefaultSubscriptionAsync();
    var resourceGroup = (await subscription.GetResourceGroupAsync(resourceGroupName)).Value;
    var clusters = resourceGroup.GetKustoClusters();    
    var clusterName = "mykustocluster";
    var skuName = KustoSkuName.StandardE8adsV5;
    var skuTier = KustoSkuTier.Standard;
    var capacity = 5;
    var clusterData = new KustoClusterData(
        location: AzureLocation.CentralUS,
        sku: new KustoSku(skuName, skuTier) { Capacity = capacity }
    );
    await clusters.CreateOrUpdateAsync(WaitUntil.Completed, clusterName, clusterData);
    ```
   |**Setting** | **Suggested value** | **Field description**|
   |---|---|---|
   | clusterName | *mykustocluster* | The desired name of your cluster.|
   | skuName | *Standard_E8ads_v5* | The SKU that will be used for your cluster. |
   | tier | *Standard* | The SKU tier. |
   | capacity | *number* | The number of instances of the cluster. |
   | resourceGroupName | *testrg* | The resource group name where the cluster will be created. |
    > [!NOTE]
    > **Create a cluster** is a long running operation, so it's highly recommended to use CreateOrUpdateAsync, instead of CreateOrUpdate.
1. Run the following command to check whether your cluster was successfully created:
    ```csharp
    clusterData = (await clusters.GetAsync(clusterName)).Value.Data;
    ```
1. Confirm the successful creation of the cluster by verifying the result contains `provisioningState` as `Succeeded`.
### [Python](#tab/python)
1. Create your cluster by using the following command:
    ```Python
    from azure.mgmt.kusto import KustoManagementClient
    from azure.mgmt.kusto.models import Cluster, AzureSku
    from azure.common.credentials import ServicePrincipalCredentials
    #Directory (tenant) ID
    tenant_id = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"
    #Application ID
    client_id = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"
    #Client Secret
    client_secret = "xxxxxxxxxxxxxx"
    subscription_id = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"
    credentials = ServicePrincipalCredentials(
        client_id=client_id,
        secret=client_secret,
        tenant=tenant_id
    )
    location = 'Central US'
    sku_name = 'Standard_E8ads_v5'
    capacity = 5
    tier = "Standard"
    resource_group_name = 'testrg'
    cluster_name = 'mykustocluster'
    cluster = Cluster(location=location, sku=AzureSku(name=sku_name, capacity=capacity, tier=tier))
    kusto_management_client = KustoManagementClient(credentials, subscription_id)
    cluster_operations = kusto_management_client.clusters
    poller = cluster_operations.begin_create_or_update(resource_group_name, cluster_name, cluster)
    poller.wait()
    ```
   |**Setting** | **Suggested value** | **Field description**|
   |---|---|---|
   | cluster_name | *mykustocluster* | The desired name of your cluster.|
   | sku_name | *Standard_E8ads_v5* | The SKU that will be used for your cluster. |
   | tier | *Standard* | The SKU tier. |
   | capacity | *number* | The number of instances of the cluster. |
   | resource_group_name | *testrg* | The resource group name where the cluster will be created. |
    > [!NOTE]
    > **Create a cluster** is a long running operation. Method **begin_create_or_update** returns an instance of LROPoller, see [LROPoller class](/python/api/msrest/msrest.polling.lropoller) to get more information.
1. Run the following command to check whether your cluster was successfully created:
    ```Python
    cluster_operations.get(resource_group_name = resource_group_name, cluster_name= cluster_name, custom_headers=None, raw=False)
    ```
1. Confirm the successful creation of the cluster by verifying the result contains `provisioningState` as `Succeeded`.
### [Go](#tab/go)
The following code shows how to create a cluster. To clone the code repository, see [Manage an Azure Data Explorer cluster using Azure Go SDK](https://github.com/Azure-Samples/azure-data-explorer-go-cluster-management/tree/main).
1. Set the required environment variables including service principal information from the [prerequisites](#prerequisites). Enter your subscription ID, resource group, and region where you want to create the cluster.
    ```console
    export AZURE_CLIENT_ID=""
    export AZURE_CLIENT_SECRET=""
    export AZURE_TENANT_ID=""
    export SUBSCRIPTION=""
    export RESOURCE_GROUP=""
    export LOCATION=""
    export CLUSTER_NAME_PREFIX=""
    export DATABASE_NAME_PREFIX=""
    ```
    > [!TIP]
    > Use [auth.NewAuthorizerFromCLIWithResource](https://pkg.go.dev/github.com/Azure/go-autorest/autorest/azure/auth?tab=doc#NewAuthorizerFromCLIWithResource) if you have Azure CLI installed and configured for authentication. In that situation, you don't need to create a service principal.
1. Run the following code to create the cluster:
    ```golang
    import (
     "context"
     "log"
     "os"
     "strconv"
     "github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
     "github.com/Azure/azure-sdk-for-go/sdk/azidentity"
     "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/kusto/armkusto"
     "github.com/olekukonko/tablewriter"
    )
    const (
     subscriptionEnvVar      = "AZURE_SUBSCRIPTION_ID"
     resourceGroupEnvVar     = "AZURE_RESOURCE_GROUP"
     locationEnvVar          = "AZURE_LOCATION"
     clusterNamePrefixEnvVar = "CLUSTER_NAME_PREFIX"
     dbNamePrefixEnvVar      = "DATABASE_NAME_PREFIX"
     clusterName  = "ADXTestCluster"
     databaseName = "ADXTestDB"
    )
    func init() {
     subscription = os.Getenv(subscriptionEnvVar)
     if subscription == "" {
      log.Fatalf("missing environment variable %s", subscriptionEnvVar)
     }
     rgName = os.Getenv(resourceGroupEnvVar)
     if rgName == "" {
      log.Fatalf("missing environment variable %s", resourceGroupEnvVar)
     }
     location = os.Getenv(locationEnvVar)
     if location == "" {
      log.Fatalf("missing environment variable %s", locationEnvVar)
     }
     clusterNamePrefix = os.Getenv(clusterNamePrefixEnvVar)
     if clusterNamePrefix == "" {
      log.Fatalf("missing environment variable %s", clusterNamePrefixEnvVar)
     }
     dbNamePrefix = os.Getenv(dbNamePrefixEnvVar)
     if dbNamePrefix == "" {
      log.Fatalf("missing environment variable %s", dbNamePrefixEnvVar)
     }
    }
    func getClustersClient(subscription string) *armkusto.ClustersClient {
     cred, err := azidentity.NewDefaultAzureCredential(nil)
     if err != nil {
      log.Fatal(err)
     }
     client, err := armkusto.NewClustersClient(subscription, cred, nil)
     if err != nil {
      log.Fatal(err)
     }
     return client
    }
    // 1 instance, Basic tier with compute type Dev(No SLA)_Standard_D11_v2
    func createCluster(sub, name, location, rgName string) {
     ctx := context.Background()
     numInstances := int32(1)
     client := getClustersClient(sub)
     result, err := client.BeginCreateOrUpdate(
      ctx,
      rgName,
      name,
      armkusto.Cluster{
       Location: &location,
       SKU: &armkusto.AzureSKU{
        Name:     to.Ptr(armkusto.AzureSKUNameDevNoSLAStandardD11V2),
        Capacity: &numInstances,
        Tier:     to.Ptr(armkusto.AzureSKUTierBasic),
       },
      },
      nil,
     )
     if err != nil {
      log.Fatal("failed to start cluster creation ", err)
     }
     log.Printf("waiting for cluster creation to complete - %s\n", name)
     r, err := result.PollUntilDone(ctx, nil)
     if err != nil {
      log.Fatal(err)
     }
     log.Printf("created cluster %s\n", *r.Name)
    }
    createCluster(subscription, clusterNamePrefix+clusterName, location, rgName)
    ```
1. List the clusters to ensure successful creation:
    ```golang
    func listClusters(sub, rgName string) {
     log.Printf("listing clusters in resource group %s\n", rgName)
     ctx := context.Background()
     result := getClustersClient(sub).NewListByResourceGroupPager(rgName, nil)
     data := [][]string{}
     for result.More() {
      temp, err := result.NextPage(ctx)
      if err != nil {
       log.Fatal(err)
      }
      for _, c := range temp.Value {
       data = append(data, []string{*c.Name, string(*c.Properties.State), *c.Location, strconv.Itoa(int(*c.SKU.Capacity)), *c.Properties.URI})
      }
     }
     table := tablewriter.NewWriter(os.Stdout)
     table.SetHeader([]string{"Name", "State", "Location", "Instances", "URI"})
     for _, v := range data {
      table.Append(v)
     }
     table.Render()
    }
    listClusters(subscription, rgName)
    ```
### [Azure CLI](#tab/azcli)
1. Create your cluster by using the following command:
    ```azurecli-interactive
    az kusto cluster create --cluster-name azureclitest --sku name="Standard_E8ads_v5" tier="Standard" --resource-group testrg --location westus
    ```
   |**Setting** | **Suggested value** | **Field description**|
   |---|---|---|
   | name | *azureclitest* | The desired name of your cluster.|
   | sku | *Standard_E8ads_v5* | The SKU that will be used for your cluster. Parameters: *name* -  The SKU name. *tier* - The SKU tier. |
   | resource-group | *testrg* | The resource group name where the cluster will be created. |
   | location | *westus* | The location where the cluster will be created. |