1111111110
1字节的数据
1111111111
1字节的数据
图4-31KB内存的模型
不过，程序员眼里的内存模型中，还包含着物理内存中不存在的
概念，那就是数据类型。编程语言中的数据类型表示存储的是何种类
型的数据。从内存来看，就是占用的内存大小（占有的楼层数）的意
思。即使是物理上以1个字节为单位来逐一读写数据的内存，在程序
中，通过指定其类型（变量的数据类型等），也能实现以特定字节数为
---
## Page 80
第4章熟练使用有楼有角的内存
单位来进行读写。
下面我们来看一个具体的示例。如代码清单4-1所示，这是一个往
a、b、c这3个变量中写人数据123的C语言程序。这3个变量表示的
是内存的特定区域。通过使用变量，即便不指定物理地址，也可以在
程序中对内存进行读写。这是因为，在程序运行时，Windows等操作
系统会自动决定变量的物理地址。
代码清单41各种类型的变量
//定义变量
char a)
1ong e1
short b;
//始变量赋值
a - 123;
c - 123;
b = 123;
这3个变量的数据类型分别是，表示1字节长度的char，表示2
字节长度的shoit，以及表示4字节长度的long。因此，虽然同样是数
据123，存储时其所占用的内存大小是不一样的。这里，我们假定采用
的是将数据低位存储在内存低位地址的低字节序（lileendian）“方式
（图4-4）。
①在C语言中，int这一数据类型经常会用到。int也是CPU最容易处理的数
据类型的长度。在32位的CPU中，int是32位的。在以剪的16位的CPU
中.int是16位的。
②将多字节数据的低位字节存储在内存低位地址的方式称为低宇节序，与此
相反，把数据的高位字节存储在内存低位的方式称为高字节序。本章的示
例图中使用的是奔腾等英特尔处理器所采用的低字节序方式。
---
## Page 81
4.3简单的指针
地址
内存内容
XX000XXX00x
123
}变量a的范围=1字节（char）
X000xXXx0x + 1
123
xx0000xx0x + 2
0
变量b的范围=2字节（short）
000x000x + 3
123
0
变量c的范图=4字节（long]
X000xx0x + 5
0
XX0000xx00x+ 6
0
内存地址××××××××××在程序执行时由OS而定
围44变量的数据类型不同，所占用的内存大小也不一样
仔细思考一下就会发现，根据程序中所指定的变量的数据类型的
不同，读写的物理内存大小也会随之发生变化，这其实是非常方便的。
大家不妨想一想，假如程序中只能逐个字节地对内存进行读写，那该
多么不便啊。在处理超过1个字节的数据时，还必须要编写分割处理
程序。此外，在不同的编程语言中，变量可以指定的数据类型的最大
长度也不相同。C语言中，8字节（=64位）的double类型是最大的。
4.3
简单的指针
接下来，让我们一起来看一下指针。指针是C语言的重要特征，
但很多人都说它难以理解，甚至还有人因无法理解指针面对C语言的
学习产生了很强的挫败感。不过，对已经阅读到现在的各位读者来说，
指针应该很容易理解。理解指针的关键点就是要弄清楚数据类型这个
概念。
更多资料请关注裁的新浪薄客http：//blo
---
## Page 82
指针也是一种变量，它所表示的不是数据的值，而是存储着数据
的内存的地址。通过使用指针，就可以对任意指定地址的数据进行读
写。虽然前面所提到的假想内存IC中仅有10位地址信号，但大家在
Windows计算机上使用的程序通常都是32位（4字节）的内存地址。
这种情况下，指针变量的长度也是32位。
请大家看一下代码清单4-2。这是定义了d、e、f这3个指针变量
的C语言程序。和通常的变量定义有所不同，在定义指针时，我们通
常会在变量名前加一个星号（*）。我们知道，d、e、f都是用来存储
32位（4字节）的地址的变量。然面：为什么这里又用来指定char
（1字节）、short（2字节）、long（4字节）这些数据类型呢？大家是不
是也感到很奇怪？实际上，这些数据类型表示的是从指针存储的地址
中一次能够读写的数据字节数
代码清单42各种数据类型指针的定义
char *d;
//char类型的指针d的定文
short *e;
//short类型的指针e的定义
.buot
//1ong 类型的指针t的定义
假设d、e、f的值都是100。在这种情况下，使用d时就能够从编
号100的地址中读写1个字节的数据，使用e时就是2个字节（100地
址和101地址）的数据，使用/时就是4个字节（100地址~103地址）
的数据。怎么样？指针是不是很简单呢（图4-5）。
①在程序中，通过明确标记数据类型来记连变量的过程称为定义变量。例如，
若将其记遂为short a，则表示定叉了2个字节的short类型的变量a。变量
定叉后就可以进行读写了。
---
## Page 83
4.4数组是高效使用内存的基础
指针指定的地址
内存
用指针d读写的长度
地址100
1字节
（1字节】
用指针e读写的长度
地址101
1字节
（2字节）
地址102
1字节
用指针读写的长度
地址103
（3字节）
1字节
图45指针的数据类型表示一次可以读写的长度
4.4数组是高效使用内存的基础
下面让我们回到主题，解释一下本章标题中出现的“熟练使用有棱
有角的内存”。在熟练使用前，我们先来看一下内存最直接的使用方
法。在这里，我们要用到数组。
数组是指多个同样数据类型的数据在内存中连续排列的形式。作
为数组元素的各个数据会通过连续的编号被区分开来，这个编号称
为索引（index）。指定索引后，就可以对该索引所对应地址的内存进行
读写操作。而索引和内存地址的变换工作则是由编译器自动实现的。
代码清单4-3表示的是在C语言中定义char类型、short类型和
long类型这三个数组。用括号围起来的[100]，表示数组的元素有100
个。由于在C语言中，数组的索引是从0开始的，因此，charg[100]；
表示的就是可以使用g[0]~g[99]这100个元素。
①CPU是通过利用基址寄存器和变经寄存器来指定内存地址的，这一点第1
章中已经进行了说明。
更多资料请关注裁的新浪薄客http：//blog
---
## Page 84
第4章熟练使用有棱有角的内存
代码清单4-3各种类型的数组定文
char g[100];
//chax类型数组g的定义
short h[100];
//short类型数组h的定义
1ong 1[100]
//1ong类型数组1的定义
数组的定义中所指定的数据类型，也表示一次能够读写的内存大
小。char类型的数组以1个字节为单位对内存进行读写，而short类型
和long类型的数组则分别以2个字节、4个字节为单位对内存进行读
写。数组是使用内存的基本。本章后半部分会讲述各种各样的内存使
用技能，其中每一种都需要以数组为基础。
之所以说数组是内存的使用方法的基础，是因为数组和内存的物
理构造是一样的。特别是1字节类型的数组，它和内存的物理构造完
全一致。不过，如果只能逐个字节地来读写，程序就会变得比较麻烦，
因而可以指定任意数据类型来定义数组。这和将1层-1单元的楼房改
造成多个楼层=1单元的楼房是同一个道理（图4-6）。
地址
物理内存
char gl100]1;
short h[100]:
long i100l1;
000x+0地址
1字节
g（0]=1字节
xxx+1地址
1字节
g1]=1字节
h2字节
xxx+2地址
1字节
gl2）=1字节
[0]=4字节
xxx+3地址
1字节
gl31=1字节
h1]=2字节
xxxx+4地址
1字节
gl4]=1字节
xxxx+5地址
1字节
gl5]=1字节
h（2]2字节
XXXx+6地址
1字节
gl6]=1字节
[1]=4字节
xxxx+7地址
1字节
gl7]=1字节
h[3]=2字节
相加的数值相当于索引
图46不同数据类型的数组
---
## Page 85
4.5栈、队列以及环形缓冲区
使用数组能够使编程工作变得更加高效。如果在反复运行的循环
处理中使用数组，很短的代码就能达到按顺序读出或写人数组元素的
目的。不过，虽然是通过指定索引来使用数组，但这和内存的物理读
写并没有特别大的区别。因此很多程序都会在数组的使用上花费大量
工夫。接下来，我们就向大家介绍一下栈、队列、代码清单和二叉查
找树这些数组的变形方法。对于一名优秀的程序员来说，不仅要了解。
还要会灵活使用这些方法。
4.5栈、队列以及环形缓冲区
栈和队列，都可以不通过指定地址和索引来对数组的元素进行读
写。需要临时保存计算过程中的数据、连接在计算机上的设备或者输人
输出的数据时，都可以通过这些方法来使用内存。如果每次保存临时数
据都需指定地址和索引，程序就会变得比较麻烦，因此要加以改进。
栈和队列的区别在于数据出人的顺序是不同的。在对内存数据进
行读写时，用的是LIFO（LastInputFirstOut，后人先出）方式，而
队列用的则是FIFO（FirstInputFirst Out，先入先出）方式。如果我们
在内存中预留出栈和队列所需要的空间，并确定好写人和读出的顺序，
就不用再指定地址和索引了。
如果要在程序中实现栈和队列，就需要以适当的元素数来定义一
个用来存储数据的数组，以及对该数组进行读写的函数对。当然，在
这些函数的内部，对数组的读写会涉及索引的管理，但从使用函数的
角度来说，就没有必要考虑数组及索引了。
①独环处理（loop）是指反复多次进行同样的处理。
②这里所说的我并不是第1章及第10章提到的函数调用时使用的栈，而是指
程序员自身做成的LIFO形式的数据存储方式（该栈的实体是数组）。
---
## Page 86
第4章熟练使用有有角的内存
这里，我们暂且把往栈中写入数据的函数命名为Push，把从栈中
读出数据的函数命名为Pop，把往队列中写人数据的函数命名为
EnQueue，把从队列中读出数据的函数命名为DeQueue。Push和Pop
以及EnQueue和DeQucue分别组成一对函数。Push和EnQueue用于为
函数的参数传递要写入的数据。Pop和DeQucue用于将读出的数据作
为函数返回值返回。通过使用这些函数，可以将数据临时保存（写入），
然后再在需要时候把这些数据读出来（代码清单44、代码清单4-5）。
代码清单4-4使用栈的程序示例
//往栈中写入数据
Push (123) ;
//写入123
Pueh (456) :
//万入456
Push(789) ;
//写入789
//从核中读出数据
k-Pop（）;
=Pop() ;
//读出789
//读出456
1 =Pop();
//读出123
代码清单4-5使用队列的程序示例
//往队列中写入数据