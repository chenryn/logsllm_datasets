### initramfs 文件解析与 systemd 启动流程

#### 1. initramfs 文件结构
initramfs 文件包含两个主要部分：
- **文件头部分**：包括一些预声明的数据，如 `kernel/x86/microcode/GenuineIntel.bin`。
- **核心数据部分**：包含实际会被内核使用的附加文件数据。

从上面的输出可以看到，`init` 程序已经被 `systemd` 所取代。为了进一步解析这个文件，我们需要先去除文件头部分的数据。

#### 2. 解析 initramfs 文件
以下是解析 initramfs 文件的具体步骤：

1. **去除文件头部分**
   ```bash
   [root@study ~]# mkdir /tmp/initramfs
   [root@study ~]# cd /tmp/initramfs
   [root@study initramfs]# dd if=/boot/initramfs-3.10.0-229.el7.x86_64.img of=initramfs.gz bs=11264 skip=1
   [root@study initramfs]# ll initramfs.gz; file initramfs.gz
   -rw-r--r--. 1 root root 18558166 Aug 24 19:38 initramfs.gz
   initramfs.gz: gzip compressed data, from Unix, last modified: Mon May 4 17:56:47 2015, max compression
   ```

2. **解压缩文件**
   ```bash
   [root@study initramfs]# gzip -d initramfs.gz
   [root@study initramfs]# file initramfs
   initramfs: ASCII cpio archive (SVR4 with no CRC)
   ```

3. **使用 cpio 解包文件**
   ```bash
   [root@study initramfs]# cpio -i -d -H newc --no-absolute-filenames < initramfs
   drwxr-xr-x. 2 root root 42 Aug 24 19:40 dev
   drwxr-xr-x. 12 root root 4096 Aug 24 19:40 etc
   lrwxrwxrwx. 1 root root 23 Aug 24 19:40 init -> usr/lib/systemd/systemd
   -rw-r--r--. 1 root root 42263552 Aug 24 19:38 initramfs
   lrwxrwxrwx. 1 root root 7 Aug 24 19:40 lib -> usr/lib
   lrwxrwxrwx. 1 root root 9 Aug 24 19:40 lib64 -> usr/lib64
   drwxr-xr-x. 2 root root 6 Aug 24 19:40 proc
   drwxr-xr-x. 2 root root 6 Aug 24 19:40 root
   drwxr-xr-x. 2 root root 6 Aug 24 19:40 run
   lrwxrwxrwx. 1 root root 8 Aug 24 19:40 sbin -> usr/sbin
   -rwxr-xr-x. 1 root root 3041 Aug 24 19:40 shutdown
   drwxr-xr-x. 2 root root 6 Aug 24 19:40 sys
   drwxr-xr-x. 2 root root 6 Aug 24 19:40 sysroot
   drwxr-xr-x. 2 root root 6 Aug 24 19:40 tmp
   drwxr-xr-x. 7 root root 61 Aug 24 19:40 usr
   drwxr-xr-x. 3 root root 47 Aug 24 19:40 var
   ```

从解包结果可以看出，initramfs 实际上是一个小型的根文件系统。

#### 3. 查看默认启动目标
```bash
[root@study initramfs]# ll usr/lib/systemd/system/default.target
lrwxrwxrwx. 1 root root 13 Aug 24 19:40 usr/lib/systemd/system/default.target -> initrd.target
```

#### 4. 列出依赖的服务
```bash
[root@study initramfs]# systemctl list-dependencies initrd.target
initrd.target
├─dracut-cmdline.service
...
├─basic.target
│ ├─alsa-restore.service
...
│ └─timers.target
│ └─systemd-tmpfiles-clean.timer
├─initrd-fs.target
└─initrd-root-fs.target
```

通过这些服务，系统会逐步加载硬件检测和驱动程序，最终卸载 initramfs 并挂载实际的根文件系统。

#### 5. systemd 的启动流程
- **获取默认操作界面设置**：系统会读取 `/etc/systemd/system/default.target`，通常是 `multi-user.target` 或 `graphical.target`。
- **处理配置文件**：系统会查找 `/etc/systemd/system/<target>.wants/` 和 `/usr/lib/systemd/system/<target>.wants/` 目录中的单元文件。
- **执行依赖关系**：根据配置文件中的依赖关系，逐个启动所需的服务。

例如，`graphical.target` 配置如下：
```ini
[Unit]
Description=Graphical Interface
Documentation=man:systemd.special(7)
Requires=multi-user.target
After=multi-user.target
Conflicts=rescue.target
Wants=display-manager.service
AllowIsolate=yes

[Install]
Alias=default.target
```

这表示 `graphical.target` 必须在 `multi-user.target` 之后才能启动，并且需要启动 `display-manager.service`。

#### 6. systemd 与 System V 的兼容性
systemd 为了兼容旧式的 System V 操作行为，引入了 `runlevel` 的概念。可以通过以下方式查询对应关系：
```bash
[root@study ~]# ll -d /usr/lib/systemd/system/runlevel*.target | cut -c 28-
May 4 17:52 /usr/lib/systemd/system/runlevel0.target -> poweroff.target
May 4 17:52 /usr/lib/systemd/system/runlevel1.target -> rescue.target
May 4 17:52 /usr/lib/systemd/system/runlevel2.target -> multi-user.target
May 4 17:52 /usr/lib/systemd/system/runlevel3.target -> multi-user.target
May 4 17:52 /usr/lib/systemd/system/runlevel4.target -> multi-user.target
May 4 17:52 /usr/lib/systemd/system/runlevel5.target -> graphical.target
May 4 17:52 /usr/lib/systemd/system/runlevel6.target -> reboot.target
```

例如，`init 3` 对应于 `systemctl isolate multi-user.target`，而 `init 5` 对应于 `systemctl isolate graphical.target`。

通过以上步骤，我们可以详细了解 initramfs 文件的结构以及 systemd 的启动流程。