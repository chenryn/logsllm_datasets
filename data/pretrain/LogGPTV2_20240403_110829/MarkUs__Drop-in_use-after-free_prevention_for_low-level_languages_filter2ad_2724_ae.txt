### 比较使用Boehm-Demers-Weiser池分配器的开销

本文展示了仅使用底层Boehm-Demers-Weiser池分配器而未使用任何垃圾回收或MarkUs保护机制时所产生的开销。需要注意的是，这里的授权许可仅限于清华大学，并且该文档于2021年3月19日从IEEE Xplore下载，受到相关限制。

#### 图12：内存使用、性能和CPU利用率的权衡
图12展示了SPEC CPU2006中的四个分配密集型基准测试（Perlbench, Xalancbmk, Omnetpp, DealII）在不同隔离列表与堆大小比值下的内存使用、性能和CPU利用率的权衡关系。这些基准测试基于允许的最大隔离列表大小相对于整个堆的比例进行评估。

#### 图13：优化技术的效果
图13展示了逐步添加优化技术（如页面取消映射、标记频率优化和小对象块清扫）到基本隔离列表和标记技术中所观察到的开销。这些优化与无保护情况进行了比较，同样基于上述四个基准测试。

#### 性能分析
结果显示，仅使用Boehm-Demers-Weiser分配器本身在某些情况下可能不是最佳选择。例如，它比默认的Linux分配器慢约5%，这占了MarkUs总开销的近一半。特别地，GCC在我们的技术中表现出较高的开销，但其性能并未因MarkUs的安全机制受到影响。实际上，此样本分配器中的许多选择并非MarkUs功能的核心部分，因此可以预期专门设计的分配器在特定情况下可能会表现得更好。

另一方面，Boehm-Demers-Weiser分配器在某些情况下可能优于glibc分配器基线。例如，在xalancbmk测试中，由于频繁的标记过程，MarkUs确实引入了实际开销。然而，对于大多数SPEC CPU2006工作负载，MarkUs本身的开销并不显著，只有omnetpp、perlbench、milc和xalancbmk显示出明显开销。相比之下，使用完整的垃圾收集器提供相同的安全保证会带来非常大的开销，即使是在astar、milc、sphinx和soplex等对MarkUs没有显著影响的工作负载上也是如此。

#### 释放效率
尽管存在关于MarkUs方法可能导致悬空指针阻碍数据释放的担忧，但图15表明这种担忧是不必要的。该图显示了所有标记过程中可以清除的隔离空间比例（即已释放的内存而非已释放的分配）。我们发现，对于大多数工作负载，使用完整的MarkUs技术后，几乎所有的数据都能被释放，这意味着悬空指针不会成为问题。

#### 图14：不同分配器的性能对比
图14展示了仅使用Boehm-Demers-Weiser池分配器（不带垃圾收集或时间安全性）与标准GNU分配器相比的性能下降情况。此外，还将其与使用完整MarkUs技术（利用分配器）以及分配器默认的全垃圾收集器（通过隔离列表防止误删对象以确保正确执行）进行了比较。

综上所述，通过对不同分配器及其优化技术的详细分析，我们可以更好地理解各种方法在实际应用中的优劣，从而为系统设计提供有价值的参考。