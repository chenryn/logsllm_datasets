pute EDX ← SimDX(Ldx
I (1k)) and (K1, K2) ←
SS.Share(0k, 2, 2). Send K1 to C1 and and K2 and EDX
to C2;
←
• (simulating
SimDB(Ldb
I (1k)), sample Ki ← {0, 1}k and compute
(Ki,1, Ki,2, Ki,3) ← SS.Share(Ki, 2, 3). Send EDB to
S, and the shares Ki,1, Ki,2 and Ki,3 to B1, B2 and
B3, respectively.
InitLocal)
compute
respectively.
• (simulating
compute
send
tk ← SimDX(Ldx
• (simulating Add) compute atk ← SimDB(Ldb
(p1, p2)
A (DBi, r))
←
and
S. Compute
SS.Share(0|SN|+|CID|, 2, 2)
to
and send p1
C1 and C2, respectively. Simulate F f
2PC and compute
A (DX, SN(cid:107)CID)). Generate the shares
atk ← SimDX(Ldx
(atk1, atk2) ← SS.Share(atk, 2, 2) and output atk1 to
C2 and atk2 to C2.
←
Find)
(SN1, SN2)
SS.Share(0|SN|, 2, 2)
to
SN1
Simulate F f
and
C1
compute
Q (DX, SN)). Generate
and
the
(KR,1, KR,2) ← SS.Share(0k, 2, 2)
output
(tk1, KR,1) to C1 and (tk2, KR,2) to C2.
←
• (simulating
SimDB(Ldb
• (simulating OﬄineQuery) simulate the ﬁrst F f
2PC in-
2) ← SS.Share(0k) and
teraction and compute (K(cid:48)
2 to Q. Simulate the second F f
send K(cid:48)
execution and compute tk ← SimDB(Ldb
2PC
Q (DBL, ϕ)) and
output tk to Q and ⊥ to B1. Finally, simulate the F f
execution and output ⊥ to B1.
MPC
(tk1, tk2) ← SS.Share(tk, 2, 2)
Q (DBL, ϕ)) and send tk to S.
1 to B1 and K(cid:48)
and C2,
compute
1, K(cid:48)
Query)
shares
and
SN2
2PC
and
tk
and
2PC
We now turn to internal corruptions. Note that if L = Pi is
corrupted then its view only includes messages from Query.
In particular, it can be simulated by simulating the two F f
execution and returning ⊥ to Q in each case. The indistin-
guishability of A’s view in this case is trivial. If Q = Pi is
corrupted, then its view includes messages from Find, Query
and OﬄineQuery. The simulator for this case is more complex
and, due to space limitations, is deferred to the full version of
this work.
The view of A during these simulations is guaranteed to
be indistinguishable from its view during a HybridZ,A(k)
execution by the ΛDX-security of ΣDX, the ΛDB-security of
ΣDB and the security of SS. Again, the details are deferred to
the full version of this work.
new semi-dynamic scheme ∆MM = (Init, Token, Query, Add)
that works as follows:
• Init(1k): takes as input a security parameter 1k, sets K =
• Add(cid:0)(K, st,{((cid:96)i, vi)i}), EMM(cid:1): is a two-party protocol
⊥, st = 1 and EMM = ⊥ and outputs (K, st, EMM).
between the client and server where the client inputs
a key K, a state st and a set of label/tuple pairs
{((cid:96)1, v1), . . . , ((cid:96)t, vt)} and the server inputs EMM. The
client ﬁrst creates a new multi-map MM that stores
the pairs {((cid:96)1, v1), . . . , ((cid:96)t, vt)}. It then parses st into
some positive integer i. If i a power of 2, it computes
(Ki, EMMi) ← Setup(1k, MM), and sends EMMi to the
server who sets EMM := (EMM, EMMi). The client then
sets K := (K, Ki). On the other hand, if i is not a power
of 2, the client downloads the smallest EMM at the server,
decrypts it to recover MM(cid:63) and computes (Ki, EMMi) ←
Setup(1k, MMi), where MMi is a multi-map that holds
the pairs in both MM(cid:63) and MM. It then sends EMMi to
the server who sets EMM := (EMM, EMMi). The client
then updates K := (K, Ki) and increments st by 1.
• Token(K, q): takes as input the secret key K and a query
q and uses each key in K = (K1, . . . , Km) to generate a
token tki ← Token(Ki, ϕ) for each EMM stored on the
server. It outputs tk = (tk1, . . . , tkm).
as
EMM
takes
input
• Query(EMM, tk):
=
(EMM1, . . . , EMMm) and a token tk = (tk1, . . . , tkm).
For all 1 ≤ i ≤ m, it computes Ri ← Query(EDBi, tki)
and outputs (R1, . . . , Rm).
The resulting semi-dynamic scheme ∆MM has O(time(Q)·
log u) query time, where time(Q) is the complexity of
ΣMM.Query and u is the number of add operations. It has
the same asymptotic storage as ΣMM. It has O(log u) token
size and Add has communication complexity O(u/ log u). The
leakage proﬁle of ∆MM is the same as ΣMM with the addition
of add leakage LA which reveals the size of R.
APPENDIX C
PSEUDO-CODE
The details of our encrypted registry system are described
in Figures 5 and 6.
APPENDIX D
EMPIRICAL EVALUATION
The time of an ofﬂine query is described in Figure 7.
APPENDIX E
PROOF OF THEOREM VII.1
Theorem VII.1.
If SS is secure, ΣDX is ΛDX-secure and
ΣDB is ΛDB-secure, then the registry Ω described in Figures
5 and 6 is ΛΩ-secure.
Proof sketch:. Let SimDX be the simulator guaranteed to exist
by the ΛDX-security of ΣDX and SimDB be the simulator
guaranteed to exist by the ΛDB of ΣDB. Consider the simulator
S that simulates A and works as follows in the context of
external corruptions:
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:24 UTC from IEEE Xplore.  Restrictions apply. 
1535
• InitGlobalC1,C2,S(1k, 1k,⊥):
$← {0, 1}k and C2 samples r2
1) C1 samples r1
2) C1 and C2 execute (K1, (K2, EDX)) ← F f
$← {0, 1}k;
2PC(r1, r2)
where f (r1, r2):
a) (K, EDX) ← ΣDX.Init(1k, r1 ⊕ r2);
b) (K1, K2) ← SS.Share(K, 2, 2);
c) output K1 to C1 and (K2, EDX) to C2;
3) C2 sends EDX to S;
• InitLocalL,S,B1,B2,B3 (1k,⊥,⊥,⊥,⊥):
1) L computes (KL, EDBL) ← ΣDB.Init(1k) and sends EDBL to S;
2) L computes (KL,1, KL,2, KL,3) ← SS.Share(KL, 2, 3) and sends KL,i to Bi;
• AddL,C1,C2,S ((KL, r), K1, K2, EGR):
let SN = r.SN and CID = r.CID;
1) S parses EGR as (EDX, EDB1, . . . , EDBθ);
2) L computes atk ← ΣDB.AddToken(KL, r) and sends it to S;
L ← ΣDB.Add(EDBL, atk);
3) S computes EDB(cid:48)
4)
5) L computes (p1, p2) ← SS.Share(SN(cid:107)CID, 2, 2) and sends p1 to C1 and p2 to C2;
6) C1 samples r1
7) C1 and C2 execute (atk1, atk2) ← F f
$← {0, 1}k and C2 samples r2
2PC ((K1, p1, r1), (K2, p2, r2))
$← {0, 1}k;
Let P1, . . . , Pθ be θ parties, each of which has 3 designated backups B(i)
3 . Let C1 and C2 be two custodians, S be a server,
Q ∈ {P1, . . . , Pθ} be a querier and L ∈ {P1, . . . , Pθ} be a local ofﬁcial. Let SS = (Share, Recover) be a secret sharing scheme,
ΣDX = (Init, Token, Query, AddToken, ResKey, Resolve) be a response-hiding dictionary encryption scheme with restricted resolve and
ΣDB = (Init, Token, Query, AddToken, Resolve) be a response-hiding database encryption scheme. Consider the multi-party protocol
Ω = (InitGlobal, InitLocal, Add, Find, Query, OﬄineQuery) deﬁned as follows in the(cid:0)F2PC,FMPC
(cid:1)-hybrid model:
1 , B(i)
2 , B(i)
where f ((K1, p1, r1), (K2, p2, r2)):
a) computes K ← SS.Recover(K1, K2);
b) computes SN(cid:107)CID ← SS.Recover(p1, p2);
c) computes atk ← ΣDX.AddToken(K, (SN, CID));
d) computes (atk1, atk2) ← SS.Share(atk, 2, 2; r1 ⊕ r2);
e) outputs atk1 to C1 and atk2 to C2
• FindQ,C1,C2,S (SN, K1, K2, EDX) :
8) C1 sends atk1 to S and C2 sends atk2 to S;
9) S computes atk ← SS.Recover(atk1, atk2) and EDX(cid:48) ← ΣDX.Add(EDX, atk);
1) Q computes (SN1, SN2) ← SS.Share(SN, 2, 2) and sends SN1 to C1 and SN2 to C2;
$← {0, 1}k and C2 samples r2, r(cid:48)
2) C1 samples r1, r(cid:48)
3) C1 and C2 execute ((tk1, KU1 ), (tk2, KU2 )) ← F f
2PC ((K1, SN1, r1, r(cid:48)
$← {0, 1}k
2
1
1), (K2, SN2, r2, r(cid:48)
2))
2)):
where f ((K1, SN1, r1, r(cid:48)
1), (K2, SN2, r2, r(cid:48)
recovers K ← SS.Recover(K1, K2);
a)
b) computes SN ← SS.Recover(SN1, SN2);
c) computes tk ← ΣDX.Token(K, SN);
d) computes KR := ΣDX.ResKey(K, SN);
e) computes (tk1, tk2) ← SS.Share(tk, 2, 2; r1 ⊕ r2);
f) computes (KR,1, KR,2) ← SS.Share(KR, 2, 2; r(cid:48)
g) outputs (tk1, KR,1) to C1 and (tk2, KR,2) to C2
1 ⊕ r(cid:48)
2);
4) C1 sends tk1 to S and KR,1 to Q;
5) C2 sends tk2 to S and KR,2 to Q;
6) S computes tk ← SS.Recover(tk1, tk2) and ct ← Query(EDX, tk) and sends ct to Q;
7) Q computes KR ← SS.Recover(KR,1, KR,2);
8) Q computes CID ← ΣDX.Resolve(KR, ct);
• QueryL,Q,S (KL, ϕ, EDBL)
1) L and Q execute (⊥, tk) ← F f
2PC(KL, ϕ)
where f (KL, ϕ):
a) computes tk ← ΣDB.Token(KL, ϕ)
b) outputs tk to Q
2) Q sends tk to S;
3) S computes (ct1, . . . , ctm) ← ΣDB.Search(EDBL, tk) and sends (ct1, . . . , ctm) to Q;
4) L and Q compute (⊥, (r1, . . . , rm)) ← F f
2PC(KL, (ct1, . . . , ctm))
where f (KL, (ct1, . . . , ctm)):
a)
for all 1 ≤ i ≤ m,
i) computes ri ← ΣDB.Resolve(KL, cti)
b) outputs (r1, . . . , rm) to Q;
Fig. 5: An encrypted registry (part 1).
1536
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:24 UTC from IEEE Xplore.  Restrictions apply. 
• OﬄineQueryB1,B2,Q,S (K1, K2, ϕ, EDBL)
$← {0, 1}k and Q samples r3
(cid:0)(K1, r1), (K2, r2), (⊥, r3)(cid:1)
MPC
$← {0, 1}k;
1) B1 samples r1
2) B1, B2 and Q execute (K(cid:48)
$← {0, 1}k, B2 samples r2
2) ← F f
where f:
a) computes K ← SS.Recover(K1, K2);
b) computes (K(cid:48)
c) outputs K(cid:48)
1 to B1 and K(cid:48)
1,⊥, K(cid:48)
2 to Q;
1, K(cid:48)
3) B1 and Q execute (⊥, tk) ← F f
where f:
a) computes K ← SS.Recover(K(cid:48)
b) computes tk ← ΣDB.Token(K, ϕ);
c) outputs ⊥ to B1 and tk to Q;
1, K(cid:48)
1, (ϕ, K(cid:48)
2PC
(cid:0)K(cid:48)
(cid:1)
2
2));
2) ← SS.Share(K, 2, 2; r1 ⊕ r2 ⊕ r3);
4) Q sends tk to S;
5) S computes (ct1, . . . , ctm) ← ΣDB.Query(EDBL, tk) and returns (ct1, . . . , ctm) to Q;
6) B1 and Q execute (⊥, (r1, . . . , rm)) ← F f
2, (ct1, . . . , ctm))(cid:1)
(cid:0)K(cid:48)
1, (K(cid:48)
2PC
where f:
a) computes K ← SS.Recover(K(cid:48)
b)
for all 1 ≤ i ≤ m,
i) computes ri ← ΣDB.Resolve(K, cti);
c) outputs ⊥ to B1 and (r1, . . . , rm) to Q;
1, K(cid:48)
2);
Fig. 6: An encrypted registry (part 2).
(a) Ofﬂine query time with 1,000
records in local database.
(b) Ofﬂine query time with 10,000
records in local database.
(c) Ofﬂine query time with 100,000
records in local database.
(d) Ofﬂine query time with 1,000
records in local database (without
2PC decryption).
(e) Ofﬂine query time with 10,000
records in local database (without
2PC decryption).
(f) Ofﬂine query time with 100,000
records in local database (without
2PC decryption).
Fig. 7: Local database ofﬂine query times based on the selectivity of the query with varying records stored. The x-axis represents
low, medium, and high selectivity, which return 1, 10, 100 records respectively.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:24 UTC from IEEE Xplore.  Restrictions apply. 
1537