ܲሺܺǡ ܻሻ ൌ
ܧሾሺܺ െ ߤ௑ሻሺܻ െ ߤ௒ሻሿ
ߪ௑ߪ௒
where X is the vector of program orders extracted from one 
experiment  and  Y  is  another  vector  of  program  orders 
extracted  from  another  experiment. ߤ௑ and ߪ௑ are  the  mean 
and  standard  deviation  of  the  X  vector. ߤ௒ and ߪ௒are  the 
mean and standard deviation of the Y vector. 
In this way, the vector of program orders is treated as a 
vector  of  realizations  of  a  random  variable.  For  vectors 
extracted from the same page, Y=aX+b+noise where a and b 
are constants and the noise is small. So, X and Y are highly 
correlated and the correlation coefficient should be close to 
1.  For  vectors  extracted  from  different  pages,  X  and  Y 
should  be  nearly 
the 
correlation coefficient should be close to zero. From another 
perspective, if both X[i] and Y[i] are smaller or bigger than 
their  means,  ሺܺሾ݅ሿ െ ߤ௑ሻሺܻሾ݅ሿ െ ߤ௒ሻ  would  be  a  positive 
number. If not, it would be a negative number. If X and Y 
are  independent,  it  is  equally  likely  to  be  positive  and 
negative so the correlation coefficient would approach 0. 
independent  of  each  other,  so 
(a) 
(b) 
Figure 6. Scatter plot for fingerprints extracted on (a) the same page and (b) 
different chips. 
The scatter plot of X and Y from the same page/chip and 
from  different  chips  are  shown  in  Figure  6.  The  figure 
clearly demonstrates a high correlation between fingerprints 
38
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:10 UTC from IEEE Xplore.  Restrictions apply. 
from the same chip over time and a low correlation between 
fingerprints from different chips. Therefore, this correlation 
metric  can  be  used  to  compare  fingerprints  to  determine 
whether they are from the same page/chip or from different 
pages/chips. 
D.  Fingerprints in Binary Numbers 
The  above  fingerprints  are  in  the  form  of  the  order  in 
which each bit was programmed. If an application requires a 
binary number such as in generating cryptographic keys, we 
need to convert the recorded ordering into a binary number. 
There  are  a  couple  of  ways  to  generate  unique  and 
unpredictable  binary  numbers  from  the  Flash  fingerprints. 
First, we can use a threshold to convert a fingerprint based 
on the programming order into a binary number as shown in 
Algorithm VI. In the algorithm, we produce 1 if the program 
order is high, or 0 otherwise. This approach produces a 1 bit 
fingerprint for each Flash bit. Alternatively, we can obtain a 
similar  binary  fingerprint  directly  from  Flash  memory  by 
partially  programming  (or  erasing)  a  page  and  reading  bits 
(1/0) from the Flash. 
Algorithm VI  Generate a binary signature from the partial 
programming order information. 
Pick threshold t = Max(BitRank) / 2 
For each bit 
    If BitRank[bit] > t 
        Output 1 
    Else Output 0 
End for 
V.  EXPERIMENTAL RESULTS 
This  section  presents  evaluation  results  for  the  random 
number  generation  and  fingerprint  techniques  for  Flash 
memory devices.  
Figure 7. Flash test board. 
A.  Testbed Device 
Our experiments use a custom Flash test board as shown 
in Figure 7. The board is made entirely with commercial off-
the-shelf  (COTS)  components  with  a  custom  PCB  board. 
There  is a  socket  to  hold  a  Flash chip  under  test, an  ARM 
microprocessor to issue commands and receive data from the 
Flash chip, and a Maxim MAX-3233 chip to provide a serial 
(RS-232) interface. USB support is integrated into the ARM 
microcontroller.  We  also  wrote  the  code  to  test  the  device. 
The setup represents typical small embedded platforms such 
as  USB  flash  drives,  sensor  nodes,  etc.  This  device  shows 
that  the  techniques  can  be  applied  to  commercial  off-the-
shelf devices with no custom integrated circuits (ICs). 
The experiments in this paper were performed with four 
types  of  Flash  memory  chips  from  Numonyx,  Micron  and 
Hynix, as shown in 0. 
TABLE I. TESTED FLASH CHIPS 
Manufacturer
Numonyx
Hynix
Micron
Micron
Part Number
NAND04GW3B2
DN6 
HY27UF084G2B
MT29F2G08ABA
EAWP-IT:E 4 
MT29F16G08CB
ACAWP:C 
B.  Random Number Generation 
Capacity  Quantity
4Gbit 
Technology
3 57nm SLC
4Gbit 
2Gbit 
16Gbit 
10 SLC
24 34nm SLC
5 MLC
The two main metrics for random number generation are 
randomness and throughput. For security, the RNG must be 
able to reliably generate true random numbers across a range 
of  environmental  conditions  over  time.  For  performance, 
higher throughput will be desirable.  
TABLE II. SUMMARY OF THE NIST TEST SUITE 
Test Description 
Tests  proportion  of  zeros  and  ones  for  the 
whole sequence. 
Tests  the  proportions  of  ones  within  M-bit 
Block. 
Tests the total number of runs in the sequence, 
where  a  run  is  an  uninterrupted  sequence  of 
identical bits 
Tests the  longest  run  of  ones  within  M-bit 
Block and consistency with theory 
Tests rank of disjoint sub-matrices of the entire 
sequence and independence 
Tests  the  peak  heights  in  the  Discrete  Fourier 
Transform  of the sequence, to detect  periodic 
features that indicates deviation of randomness 
Tests  the  number  of  occurrences  of  a  pre-
specified target strings 
Tests the  number  of  occurrences  of  a  pre-
specified  target  strings.  When  window  found, 
slide only one bit before the next search 
Tests  the  number  of  bits  between  matching 
patterns 
Tests  the  length  of  a  linear  feedback  shift 
register, test complexity 
Tests the frequency of all possible overlapping 
m-bit pattern 
Tests the frequency of all possible overlapping 
m-bits pattern across the entire sequence 
Tests maximal excursion from the random walk 
defined by the cumulative sum of adjusted (-1, 
+1) digits in the sequence 
Tests the  number  of  cycles  having  exactly  K 
visits in a cumulative sum random walk 
Tests the total number of times that a particular 
state  is  visited  in  a  cumulative  sum  random 
walk  
Test Name
1 The Frequency 
(Monobit) Test: 
2 Frequency Test within 
a Block 
3 The Run Test
4 Tests for the Longest-
Run-of-Ones in a Block 
5 The Binary Matrix 
Rank Test 
6 The Discrete Fourier 
Transform (Spectral) 
Test 
7 The Non-overlapping 
Template Matching Test
8 The Overlapping 
Template Matching Test 
9 Maurer’s “Universal 
Statistics” Test 
10 The Linear 
Complexity Test 
11 The Serial Test
12 The Approximate 
Entropy Test 
13 The Cumulative 
Sums (Cusums) Test 
14 The Random 
Excursion Test 
15 The Random 
Excursions Variant Test 
39
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:10 UTC from IEEE Xplore.  Restrictions apply. 
1)  Randomness 
Historically, three main randomness test suites exist. The 
first one is from Donald Knuth’s book “The Art of computer 
Programming  (1st  edition,  1969)”  [10]  which  is  the  most 
quoted reference in statistical testing for RNGs in literature. 
Although it was a standard for many decades, it appears to be 
outdated  in  today’s  view  and  it  allows  many  “bad” 
generators to pass the tests. The second one is the “diehard” 
test  suite  from  Florida  State  University.  The  test  suite  is 
stringent in the sense that they are difficult to pass. However, 
the suite has not been maintained in recent years. Therefore, 
it was not selected as the tests for this study. The third one is 
developed by National Institute of Standards and Technology 
(NIST)  which  is  a  measurement  standard  laboratory  and  a 
non-regulatory  agency  of  the  United  States  Department  of 
Commerce.  The  NIST  Statistical  Test  Suite  is  a  package 
consisting  of  15  tests  that  were  developed  to  test  the 
randomness of arbitrary long binary sequences produced by 
either hardware or software. The test suite makes use of both 
existing  algorithms 
literatures  and  newly 
developed tests. The most updated version, sts-2.1.1, which 
was released in August 11, 2010, is used in our randomness 
tests. TABLE II summarizes the 15 NIST tests [2]. 
from  past 
--------------------------------------------------------------------- 
RESULTS  FOR  THE  UNIFORMITY  OF  P-VALUES  AND  THE 
PROPORTION OF PASSING SEQUENCES 
--------------------------------------------------------------------- 
P-VALUE   
0.122325      
0.911413      
0.534146      
0.066882      
0.534146      
0.350485      
0.739918      
0.739918      
0.213309      
0.739918      
0.350485      
0.911413       
0.534146      
           ----        
           ----        
           ----        
           ----       
0.739918      
0.350485      
0.534146      
PROPORTION  
10/10       
10/10       
10/10       
10/10       
10/10       
10/10       
10/10       
10/10       
10/10       
10/10       
10/10       
  9/101         
10/10       
5/5        
5/5        
5/5       
5/5        
10/10       
10/10       
10/10       
 STATISTICAL TEST 
Frequency 
BlockFrequency 
CumulativeSums 
CumulativeSums 
Runs 
LongestRun 
Rank 
FFT 
NonOverlappingTemplate 
NonOverlappingTemplate 
OverlappingTemplate 
Universal 
ApproximateEntropy 
RandomExcursions 
RandomExcursions 
RandomExcursionsVariant 
RandomExcursionsVariant 
Serial 
Serial 
LinearComplexity 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
1The minimum pass rate for each statistical test is 8 for a sample size of 
10 binary sequences, and 4 for a sample size of 5 sequences. 