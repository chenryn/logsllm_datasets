## Page 397
第12章进程间通信：管道
#include 
#include 
inciude
#include 
include 
#include 
#include 
2）接着是命名管道的定义。我们给务器设置一个管道，给每个客户分别设置一个管道：
因为可能会有多个客户，所以客户管道的名字里要加上它们各自的进程ID以保证其管道是独一
无二的，如下所示：
#define SERVER_pIPE ·/tnp/server_pipe*
define CLIENT_PIPE */tnp/client_bd_pipe*
define ERR_TEXT_LEN 80
3）我们把程序中的各个命令实现为枚举类型，而不是“#define”常数。
注意，这样做可以让编译器进行有关的类型检查，对软件的调试汇作有帮助作用。这是因
为许多调试器能够给出枚举类型常数的名字，但对“#define”指令定义的常数就不行。
第一个typedef结构定义的是向服务器发送的请求，第二个定义的是服务器返回给客户的响
应，如下所示：
typedef enum {
&_create_new_database = 0,
s_get_cdc_entry.
s_get_cdt_entry.
s_add_cdt_entry.
s_add_cdc_entry.
s_del_cdc_entry.
s_find_cdc_entry
s_del_cdt_ontry.
typedef enun {
0= ssans
r_find_no_more
r_failure.
4）接着，我们定义了一个结构，它将构成两个进程之间双向传递的数据信息。
因为不必在同一个响应里同时返因一个cdc_entry和一个cdi_entry，所以把它们组合
在一起也是可行的。但出于简化问题的考虑，我们把它们分开来。这也使代码的维护工
作比较容易进行一些。
typedef struct {
client_request_e
pid_t
client_pid;
server_response_e
request;
cdc_entry
cdc_entry_data;
response;
cdt_entry_data;
)message_db_t;
char
error_text IERR_TExT_LEN + 11 :
5）最后是完成数据传输工作的各种管道接口函数，具体实现在pipe_imp.c文件里。它们又分
加入jaVa编程群：524621833
---
## Page 398
380
Linux程序设计
为服务器端和客户端两组，分别列在下面的第一部分和第二部分：
int server_starting(void);
int read_request_from_client(nessage_db_t *rec_ptrl:
int start_resp_to_clienticonst message_db_t mess_to_send);
int send_resp_to_client(const message_db_t mess_to_send) ;
void end_resp_to_client (void) ;
void client_ending(void):
int client_starting(void):
int send_ness_to_server(meseage_db_t mess_to_sendl:
int read_resp_fron_server (message_do_t *rec_ptr);
int
st.art_resp_from_server[void):
void end_resp_from_server [void) :
我们把以后的讨论分为两大部分，一部分介绍客户接口函数，另一部分介绍pipe_imp.c文件
中的服务器端和客户端函数的细节，我们会在必要时给出源代码。
12.7.3客户接口函数
数实现的）。它们对请求进行编码并把它放到一个message_db_t结构里去，然后通过pipe_imp.c
中的例程把请求传输到服务器去。这样可以尽量减少对原来的app_uic进行修改。
动手试试：客户命令解释器
1)这个文件实现了在cd_data.h文件里定义的9个数据库函数。它好比是一个中转站，先把请
求传递给服务器，再从函数返回服务器的响应。
define _POSIX_SOURCE
include 
apntout4
include 
#include 
#include 
#include 
include *cd_data.h*
#include *cliserv.h*
2)静态变量mypid减少了getpig函数的调用次数，它可省了不少事。为了消除重复代码，我
们还定义了一个局部函数read_one_response，如下所示：
static pid_t mypid;
static int read_one_response(message_db_t *rec_ptr);
3）我们保留了database_initialize和database_close函数，但与以往的作用不同了。它们一个
用来对管道接口的客户端进行初始化，另一个用来除客户退出时不再有用的命名管道。
int database_initialize(const int new_database)
if (:client_starting()) return(0):
mypid = getpid() ;
加入jaVa编程群：524621833
---
## Page 399
第12章进程间通信：管道
381
return(1) :
)/* database_initialize */
void Gatabase_close(void) (
client_ending [1 ;
4）用一个给定的唱盘标题调用get_cdc_entry例程将从数据库里取出--个标题数据项。我们
先把请求编码到一个message_db_t结构里并把它传递到服务器去，然后把服务器响应读回到另外
一个message_db_t结构里来。如果能够在数据库里查到一个标题数据项，它将被存放在
message_db_t结构的cdc_entry结构里，需要我们返回的就是这个东西。如下所示：
cdc_entry get_cdc_entry(const char *cd_cataiog_ptr)
edc_entry ret_va1;
message_db_t mesa_send;
nessage_db_t mess_ret;
ret_val.catalog(0]=*\0′;
ness_send.client_pid ≤ mypid;
mess_send.request = s_get_cdc_entry;
if (send_mess_to_server(tesa_send)){
if (read_one_reaponse(&mess_ret]1{
1f (mess_ret.reeponse "= r_success) {
ret_val + mess_zet.cdc_entry_dato:
}eise {
fprintf(stderr, "ts", mess_ret.error_text);
else}
fprintf(stderr, “Server failed to respond\n°);
}else
fprintf (stderr, "Server not accepting requests\n*);
return(ret_val) ;
5)下面是read_one_response函数的程序清单，我们用它来减少重复代码，如下所示：
Btatie int read_one_response(message_db_t *rec_ptr {
int return_code -0;
if (1rec,ptr}return[0);
if (start_resp_fron_server(1){
if (read_resp_from_server (rec_ptr]1{
return_code = 1;
end_resp_fron_server () ;
return(return_codel;
6)其他get_xxx、dei_xxx和add_xxx形式的例程实现起来与get_cdc_entry函数差不多。为保
持其完整性，我们也把它们列在下面。头一个是用来检索CD曲目的那个函数：
cdt_entry get_cdt_entry(const cbar *cd_cacalog_ptr, const int tcack_ao }
加入jaVa编程群：524621833
---
## Page 400
382
Linux程序设计
cdt_entry ret_val;
nessage_db_t mess_send;
message_db_t mess_ret;
mess_send.client_pid+mypid;
ret_val.catalog[0] ='\0′:
strcpy(ness_send.cdt_entry_data.catalog, cd_catalog_ptr):
ness_send.request = s_get_cdt_entry:
mess_send.cdt_entry_data.track_no - track_no;
if (send_mess_to_server(mess_send))(
if (read_one_response(kmess_ret))(
if (ness_ret.response er_success){
ret_val = mess_ret.cdt_entry_data;
}else{
fprintf(stderr, "es*, mess_ret.error_text);
}else{
fprintf (stderr,*Server failed to respond`n*);
}else {
fprintf(stderr,*Server not accepting requests`n*);
retuxn(ret_val):
7）接下来是两个往数据库里添加数据的函数。第一个对应于标题数据库，第二个对应于曲
目数据库。
int add_cdc_entry(conot cdc_entry entry_to_add)
message_db_t mess_send;
message_db_t mess_ret;
mess_send.client_pid = mypid;
mess_send.cdc_entry_data = entry_to_add;
mess_send.request = s_add_edc_entry:
1f (send_mess_to_server(mess_send))(
if （read_one_response（4mess_ret))(
if (mess_ret.response =s r_success) (
}else(
return(1):
fprintf(stderr,*bs*, mess_ret.error_text);
}else {
fprintf(stderr.*Server failed to respond\n*);
}else{
1
fprintf [stderr,*Server not accepting requests\n*);
return(0);
int add_cdt_entry(const cdt_entry entry_to_add)
message_db_t mess_ret;
message_db_t mess_send;
mess_send.client_pid = mypid;
mess_send.request = s_add_cdt_entry;
mess_send.cdt_entry_data = entry_to_add;
if (send_mess_to_server(mess_send))(
if (read_one_response(kmess_ret))(
if (mess_ret.response == r_success）(
}else(
return(1):
加入jaVa编程群：524621833
---
## Page 401
第12章进程间通信：管道
383
fprintf [stderr,*ss*, mess_ret.error_text):
}asa (
1
fprintf[stderr,*Server failed to respondin*1;
}else(
fprintf(stderr.*Server not accepting requests\n′);
return(0) ;
8）最后是两个用来删除数据的函数。
int del_cdc_entry(const char *cd_catalog_ptr)
sessage_db_t mess_send;
nessage_db_t mess_ret;
ness_send.client_pid =mypid;
mess_send.request =s_del_cdc_entry:
strcpy(mess_send.cdc_entry_data.catalog, cd_catalog_ptr) :
if (send_mees_to_server(ness_send)){
if （read_one_response(4mess_ret))1
if (mess_ret.response  r_success){
}else{
return(1):
fprintf(stderr,*es*,mess_ret.error_text);
}else{
fprintf (stderr. *Server failed to respond\n*);
}else{
，
fprintf (stderr,*Server not accepting requests\n*);
return(0) ;
int del_cdt_entry(const char *cd_catalog_ptr.const int track_no)
puasssaw 1qpa5essau
xssau 1qp5esseu
mess_send.client_pi6 = mypid;
ness_send.request = s_del_cdt_entry:
mess_send.cdt_entry_Gata.track_noatrack_no:
strcpy(mess_send.cdt_entry_data.catalog. cd_catalog_ptr);
if (send_ness_to_server(mess_send)}{
if (read_one_response (kness_ret))(
if(oess_ret.response s r_success)
}else(
return(1);
fprintf(atderr,"ss"，mess_ret.error_text);
}else
fprintf (stderr, "Server failed to respond\n");
]else{
fprintf (stderr, “Server not accepting requests\n");
return(0) ;
搜索数据库
根据CD唱盘关键字进行数据搜索的函数是比较复杂的。我们希望每开始一次新搜索的时候
加入java编程群：524621833