# awk删除/** */注释
awk '$1=="/**", $1=="*/" {next}1' tmp
举个例子：
cat file
1 a
2 b
3 c
4 d
awk '/^3/{print $2;next}{print $0}' file
1 a
2 b
c
4 d
如果匹配不到开头为3的记录，就打印$0
如果匹配到了开头为3的记录，就打印$2，这里如果没有next，会继续再打印$0
awk '/^3/{print $2}{print $0}'
1 a
2 b
c
3 c
4 d
next就是读取下一条记录，再从头执行代码
# awk OFS
awk -F"," '{print $1,$2}' OFS="\t" temp2
# awk 删除某列
cat temp |awk '{$1=null;print $0}'
# awk 插入列
echo a b c d|awk '{$3="e f g "$3}1'
echo a b c d|awk '{$3="e f g "$3;print}'
# awk 指定列修改
awk  'BEGIN{FS=OFS="\""} {if ($4==1700870) $4=1700888}1'  test.txt
# awk 求和
awk '/aaa/ {sum += $2};END {print sum}' test
docker images |awk '{line[NR]=$7} END {for(i=2 ;i"}NR%2' server.xml.bak|awk NF
sed '//!{N;ba}};/FNR && ($1 in a) { print a[$1]}' g1 g2
# 更改输出格式
awk -v OFS=" | " '{$1=$1;print}'
# 输入变量添加特殊符号
# sub匹配第一次出现的符合模式的字符串，相当于 sed 's//'
# gsub匹配所有的符合模式的字符串，相当于 sed 's//g'
awk -F "[/-]+" '{print "[aplayer_trac title=\""$6"\" author=\""'\$5'"\"  src=\""'\$0'"\"]"}' |awk '{sub(/.mp3/,"");print}'
# iotop 打印出IO使用率超过10%的进程
iotop -b | awk -F'%' '{if($(NF-1) > 10 && $(NF-1) ~ /[0-9]/ && $0 !~ /DISK/)printf "TIME: %s,PID:%s,IO:%s%,COMMAND:%s\n",strftime("%F %T"),$1,$(NF-1),$NF}' 
# 去掉文件名前3个字符，重命名文件
for i in *.mp3;do mv -f $i `echo $i | sed 's/^...//'`;done
# rename 去掉文件名中的空格,'-n'选项告诉rename命令在不实际改变名称的情况下显示文件将会重命名的情况
rename -n -v 's/ //' *.mp3
# sed 打印匹配行接下来的连续 n+1 行
sed -n -e '/SrcTrp/,+4p' -e '/DstTrp/,+4p' xxx.json
# 列出机器TOP10连接数的IP及内网主机名
netstat -na|grep ESTABLISHED|grep -v 127.0.0.1|awk '{print $5}'|awk -F: '{print $1}'|sort|uniq -c|sort -rn |head |xargs -n1 -r -i bash -c "echo -n {};echo  {}|awk '{ print \$2 }'|xargs host |awk -v OFS=' ' '{ print \$10,\$NF }'"
# echo 提取文件名或文件后缀
# 从右向左匹配 ：% ，从左向右匹配：#，贪婪操作符%%,##，# echo 提取文件名或文件后缀
# 以url="www.chegva.com"为例
# echo ${url%.*}      #移除 .* 所匹配的最右边的内容。-> www.chegva
# echo ${url%%.*}     #将从右边开始一直匹配到最左边的 *. 移除，贪婪操作符。-> www
# echo ${url#*.}      #移除 *. 所有匹配的最左边的内容。-> chegva.com
# echo ${url##*.}     #将从左边开始一直匹配到最右边的 *. 移除，贪婪操作符。-> com
for i in *.mp4;do echo ${i%.*};done | awk '{ printf "%s,", $0}' |sed 's/,$//'
# sed 交换行,相邻行：已知行号 & 不知行号
sed '1{h;d};2{G}' test 
sed '/baidu/{h;d};/microsoft/{G}' test
# 两行不相邻情况，将包含xxx与zzz的行交换（zzz在xxx行之后），yyy是zzz行前面的那一行
sed -n '/xxx/{h;n;/zzz/!{:a;N;/yyy/!ba;x;H;n};x;H;x};p' 文件名
sed -n '/"ChunkAddr": "10.69.184.12:9090"/{h;n;/"ChunkAddr":/!{:a;N;/"PartitionId"/!ba;x;H;n};x;H;x};p' xx.json
# 删除多个空行为一个空行
sed '/^$/{N;/^\n*$/D}' test
# 打印匹配行的上一行
sed -n '/^+/{x;p};h'
# 删除指定行的上一行
sed -i -e :a -e '$!N;s/.*\n\(.*chegva.com\)/\1/;ta' -e 'P;D' test
# 打印匹配行的下一行,将p改成d为删除下一行
sed -n '/^+/{n;p}'
# 删除匹配的下一行到最后一行
sed '/chegva.com/{p;:a;N;$!ba;d}' test
# 删除匹配行和匹配行后的2行
sed '/chegva.com/,+1d' test
# 删除包含chegva.com的行，同时删除这行的后面2行和上面3行,:go 设一个go标签,bgo 返回go标签go
sed -i '/chegva.com/,+2d;:go;1,3!{P;N;D};N;bgo’ test
# 奇数行和偶数行合并一行输出
awk '{printf "%s ",$0;getline;print;}' 
awk '{if(FNR==2) {printf "%s ",$0;getline;};print;}'
# 将文本的三行合并成一行输出
sed 'N;N;s/\n/ /g'  #N追加下一个输入行到模式空间
awk 'ORS=NR%3?" ":"\n"{print}'  #NR当前行记录数，ORS输出记录分隔符
# 将目录下所有同类型文件重新编号命名
ls *.gif| awk 'BEGIN{ a=1 }{ printf "mv %s icon_%02d.gif\n", $0, a++ }' | bash
# 通过nginx日志查询接口访问量前十的主机名，使用 tc /chegva/get_name
tc(){ tail -200000 /home/anzhihe/nginx/logs/access.log |grep "$@" |awk '{print $3}' |sort -n|uniq -c|sort -rnk1|xargs -r -i bash -c "echo {}|awk '{print \$1}' && echo {}|awk '{print \$2}' |xargs -n1 host|awk '{print \$NF}' | sed 's/.chegva.com.//g'" |awk '{printf "%s ",$0;getline;print;}' | head -10; };tc 
# 将word文档目录插入Typora表格
sed -i '/^\s*$/d' tmp && sed -i '/./{s/^/|&/;}' tmp && awk 'ORS=NR%4?" ":"\n"{print}' tmp > tmp1 && sed -i '/./{s/$/&|/}' tmp1 && sed -i '1a\| ---- | ---- | ---- | ---- |' tmp1
# cp目录下的所有文件，包括子目录和隐藏文件
yes | cp -r thor-backend/. thor-backend-example
# Linux 显示隐藏目录或隐藏文件的占用空间
du -shc .[!.]* * | sort -hr | head
# awk求指定列的累加值、平均值
for i in 23095 1906 65432 9925 1857;do echo -e "################################ $(date +%F\ %T) ##############################";ansible *$i* -m shell -a ' egrep -v "^$|^192|^127|^172|^unknown|^Refreshing|^Adding|^Ethernet|^Waiting|^2023|^2018|^ssh" /root/net_process.log | awk "{sent[\$1]+=\$(NF-1);recv[\$1]+=\$NF;counts[\$1]++;}END{for (i in sent){print i,sent[i],recv[i],counts[i],sent[i]/counts[i],recv[i]/counts[i]}}"|sort -rn -k5|head -15' 2>/dev/null;done | tee net_process.txt
# awk 输出每行的第4列到最后一列的内容
awk '{for (i=4; i<=NF; i++) {printf "%s ", $i}; printf "\n"}'
# 删除第一个匹配到的行，而不删除所有匹配
sed '0,/pattern/{//d;}' file.txt
# 使用GNU sed删除所有包含pattern的行，除了第一行
sed '0,/pattern/!{/pattern/d;}' file.txt
# sed将每行中[xx:xx.xxxxx]改成[xx:xx.xx]格式，[xx:xx.x]改成[xx:xx.x0]格式，即多的去掉，不足的补0，统一时间戳格式
sed -E 's/\[([0-9]{2}:[0-9]{2})\.([0-9]{2})[0-9]*\]/[\1.\2]/g;s/\[([0-9]{2}:[0-9]{2})\.([0-9])\]/[\1:\20]/g' *.lrc
#################################################################
文本间隔：
# 在每一行后面增加一空行
sed G
awk '{printf("%s\n\n",$0)}'
# 将原来的所有空行删除并在每一行后面增加一空行。
# 这样在输出的文本中每一行后面将有且只有一空行。
sed '/^$/d;G'
awk '!/^$/{printf("%s\n\n",$0)}'
# 在每一行后面增加两行空行
sed 'G;G'
awk '{printf("%s\n\n\n",$0)}'
# 将第一个脚本所产生的所有空行删除（即删除所有偶数行）
sed 'n;d'
awk '{f=!f;if(f)print $0}'
# 在匹配式样“regex”的行之前插入一空行
sed '/regex/{x;p;x;}'
awk '{if(/regex/)printf("\n%s\n",$0);else print $0}'
# 在匹配式样“regex”的行之后插入一空行
sed '/regex/G'
awk '{if(/regex/)printf("%s\n\n",$0);else print $0}'
# 在匹配式样“regex”的行之前和之后各插入一空行
sed '/regex/{x;p;x;G;}'
awk '{if(/regex/)printf("\n%s\n\n",$0);else print $0}'
编号：
# 为文件中的每一行进行编号（简单的左对齐方式）。这里使用了“制表符”
# （ tab，见本文末尾关于’\t’的用法的描述）而不是空格来对齐边缘。
sed = filename | sed 'N;s/\n/\t/'
awk '{i++;printf("%d\t%s\n",i,$0)}'
# 对文件中的所有行编号（行号在左，文字右端对齐）。
sed = filename | sed 'N; s/^/ /; s/ *\(.\{6,\}\)\n/\1 /'
awk '{i++;printf("%6d %s\n",i,$0)}'
# 对文件中的所有行编号，但只显示非空白行的行号。
sed '/./=' filename | sed '/./N; s/\n/ /'
awk '{i++;if(!/^$/)printf("%d %s\n",i,$0);else print}'
# 计算行数 （模拟 “wc -l”）
sed -n '$='
awk '{i++}END{print i}'