9
7
9
Delay (hr)
Conﬁg Mean
0
1
1
1
1
1
1
∗
10x10
10x20
10x30
20x20
20x30
30x30
0
0.44
1.11
1.4
3.57
3.78
3.89
0.73
1.17
1.43
2.59
1.79
2.09
0
0
0
0
0
1
2
0
0
1
1.5
3.5
4
3
Figure 12: Distribution of number of co-resident pairs on EC2.
Region: us-east.
Delay (hr)
0
0
0
0
0
0
1
1
1
1
1
1
Conﬁg Mean
10x10
15.22
3.78
10x20
4.25
10x30
9.67
20x20
20x30
2.38
24.57
30x30
2.78
10x10
0.78
10x20
10x30
0.75
0.67
20x20
0.86
20x30
30x30
4.71
S.D. Min Median Max
19.51
64
14
4.71
19
6.41
27
8.43
1.51
5
99
36.54
12
3.87
3
1.2
1.39
3
5
1.66
2
0.9
9.89
27
14
3
2.5
8
2
6
1
0
0
0
1
1
0
0
0
0
1
1
0
0
0
0
0
0
Figure 13: Distribution of number of co-resident pairs on
Azure. Region: East US 1.
(i.e., fraction of victim VMs with which attacker VMs were
co-resident). Although these experiments were done with
victim VMs under our control, the results can be extrapo-
lated to guide an attacker’s launch strategy for uncoopera-
tive victim. We also discuss a set of such strategic ques-
tions that the results help answer. At the end of this section,
we summarize and calculate the cost of several interesting
launch strategies and evaluate the public clouds against our
reference placement policy.
922  24th USENIX Security Symposium 
USENIX Association
i
y
c
n
e
d
s
e
r
-
o
C
f
o
s
e
c
n
a
h
C
 1
 0.8
 0.6
 0.4
 0.2
 0
1
1
1
0
0
0
x
x
x
1
2
3
1
1
1
0
0
0
x
x
x
1
2
3
1
1
1
0
0
0
x
x
x
1
2
3
0
0
0
0
0
0
0
0
0
GCE
EC2
Azure
i
y
c
n
e
d
s
e
r
-
o
C
f
o
s
e
c
n
a
h
C
 1
 0.8
 0.6
 0.4
 0.2
 0
1
2
3
0
0
0
x
x
x
3
3
3
1
2
3
0
0
0
x
x
x
3
3
3
1
2
3
0
0
0
x
x
x
3
3
3
0
0
0
0
0
0
0
0
0
GCE
EC2
Azure
Figure 14: Chances of co-residency of 10 victim instances with
varying number of attacker instances. All these results are
from one data center region (EC2: us-east, GCE: us-central1-a,
Azure: East US) and the delays between victim and attacker in-
stance launch were 1 hour. Results are over at least 9 run per run
conﬁguration with at least 3 run per time of day.
Figure 15: Chances of co-residency of 30 attacker instances
with varying number of victim instances. All these results are
from one data center region (EC2: us-east, GCE: us-central1-a,
Azure: East US) and the delays between victim and attacker in-
stance launch were 1 hour. Results are over at least 9 run per run
conﬁguration with at least 3 run per time of day.
5.2 Effect of Number of Instances
In this section, we observe the placement behavior while
varying the number of victim and attacker instances. Intu-
itively, we expect the chances of co-residency to increase
with the number of attacker and victim instances.
Varying number of attacker instances. Keeping all the
placement variables constant including the number of vic-
tim instances, we measure the chance of co-residency over
multiple runs. The result of this experiment helps to answer
the question: How many VMs should an adversary launch
to increase the chance of co-residency?
As is shown in Figure 14,
the placement behavior
changes across different cloud providers. For GCE and
EC2, we observe that higher the number of attacker in-
stances relative to the victim instances,
the higher the
chance of co-residency is. Figure 11 and 12 show the dis-
tribution of number of co-resident VM pairs on GCE and
EC2, respectively. The number of co-resident VM pairs
also increase with the number of attacker instances, imply-
ing that the coverage of an attack could be increased with
larger fraction of attacker instances than the target VM in-
stances if the launch times are coordinated.
Contrary to our expectations, the placement behavior ob-
served on Azure is the inverse. The chances of co-residency
with 10 attacker instance is almost twice as high as with 30
instances. This is also reﬂected in the distribution of num-
ber of co-residency VM pairs (shown in Figure 13). Further
investigation revealed a correlation between the number of
victim and attacker instances launched and the chance of
co-residency. That is, for the run conﬁguration of 10x10,
20x20 and 30x30, where number of victim and attacker in-
stances are the same, and with 0 delay, the chance of co-
residency were equally high for all these conﬁgurations (be-
tween 0.9 to 1). This suggests a possible placement policy
that collates VM launch requests together based on their re-
quest size and places them on the same group of machines.
Varying number of victim instances. Similarly, we also
varied the number of victim instances by keeping the num-
ber of attacker instances and other placement variables con-
stant (result shown in Figure 15). We expect the chance
of co-residency to increase with the number of victims tar-
geted. Hence, the results presented here help an adversary
answer the question: What are the chances of co-residency
with varying sizes of target victims?
As expected, we see an increase in the chances of co-
residency with increasing number of victim VMs across
all cloud providers. We see that the absolute value of the
chance of co-residency is lower for Azure than other clouds.
This may be the result of signiﬁcant additional delay be-
tween victim and attacker launch times in Azure as a result
of our methodology (more on this later).
5.3 Effect of Instance Launch Time
In this section, we answer two questions that aid an ad-
versary to design better launch strategies: How quickly
should an attacker launch his VMs after the victim VMs
are launched? Is there any increase in chance associated
with the time of day of the launch?
delay
between
attacker
Varying
victim
launches. The result of varying the delay between
0 (i.e., parallel
launch) and 1 hour delay is shown
in Figure 16. We can make two immediate observations
from this result.
and
The ﬁrst observation reveals a signiﬁcant artifact of
EC2’s placement policy: VMs launched within a short time
window are never co-resident on the same machine. This
observation helps an adversary to avoid such a strategy.
We further investigated placement behaviors on EC2 with
shorter non-zero delays in order to ﬁnd the duration of this
time window in which there are zero co-residency (results
shown in Figure 17). We found that this time window is
very short and that even a sequential launch of instances
USENIX Association  
24th USENIX Security Symposium  923
i
y
c
n
e
d
s
e
r
-
o
C
f
o
s
e
c
n
a
h
C
 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0
1
2
3
0
0
0
x
x
x
1
2
3
1
2
3
0
0
0
x
x
x
1
2
3
1
2
3
0
0
0
x
x
x
1
2
3
0
0
0
0
0
0
0
0
0
GCE
EC2
Azure
y
c
n
e
d