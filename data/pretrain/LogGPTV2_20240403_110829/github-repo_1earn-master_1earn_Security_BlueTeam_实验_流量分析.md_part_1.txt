# 流量分析
> 注 : 笔记中流量包 pcapng 源文件在其图片目录下
---
## 免责声明
`本文档仅供学习和研究使用,请勿使用文中的技术源码用于非法用途,任何人造成的任何负面影响,与本人无关.`
---
**相关工具**
- [Wireshark](../../安全工具/Wireshark.md)
- [odedshimon/BruteShark](https://github.com/odedshimon/BruteShark)
- 火绒剑
- [process monitor](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon)
- [科来网络分析系统](http://www.colasoft.com.cn/download.php)
- [NetworkMiner packet analyzer](https://sourceforge.net/projects/networkminer/)
- tcpdump
- [ehids/ecapture](https://github.com/ehids/ecapture) - 无需 CA 证书，进行 HTTPS 的明文通讯抓包
**相关文章**
- [一次网络流量分析引发的思考](https://www.anquanke.com/post/id/158660) - web 流量分析、VPN 流量分析
- [CTF-流量分析总结](https://jwt1399.top/posts/29176.html)
- [如何通过Wireshark查看HTTPS、HTTP/2网络包（解码TLS、SSL）](https://www.joji.me/zh-cn/blog/walkthrough-decrypt-ssl-tls-traffic-https-and-http2-in-wireshark/)
**CTF writup**
- [记某工控CTF比赛一道ICMP隧道题](https://blog.csdn.net/qq_15174755/article/details/99661676) - 知识点 : ICMP 包数据长度转 ASCII 字符
- [中石油内部CTF比赛流量分析题详细解题思路](https://www.t00ls.net/thread-62296-1-5.html) - 知识点 : 冰蝎流量分析+base64/32+基于时间注入
- [利用DNS进行传输数据](https://www.cnblogs.com/sevck/p/7495910.html)
**Tips**
- `ip contains "flag"`
- 分组字节流 搜索
    - `flag`
    - `f.l.a.g`
    - `f-l-a-g`
---
## ICMP
ping 一下 www.ffffffff0x.com 并抓个 icmp 的包
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/83.png)
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/84.png)
## TCP
### SampleCaptures
下载 [iperf-mptcp-0-0.pcap](https://wiki.wireshark.org/SampleCaptures?action=AttachFile&do=get&target=iperf-mptcp-0-0.pcap)
下载后双击用 wireshark 打开。 编号 534 开始有重传（TCP Retransmition）的包：
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/1.png)
Ctrl+Alt+Shift+T,切换跟踪 tcp 流,可以发现,这个连接只有 3 个包
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/2.png)
TCP 重传的机制：指数后退，比如第一次等待 1s，第二次等 待 2s，第三次等待 4s，第四次 8s
- 第一个编号 24 的包发出，请求建立连接
- 超过 1s 后，客户端没有收到服务端的 ACK 包，触发客户端 TCP 超时重传，编号 534 的包发出
- 又过了大约 2s，仍然没有收到 ACK 包，再次触发超时重传，编号 1520 的包发出
从这个抓包文件看，这次连接没有建立起来，而直接原因就是 client 没有收到 server 的应答包。
当然仅凭这个无法判断直接原因，还需要在 server 端抓包，查看 server 到底是否发出回包，若发出，说明在链路中未传输到对端。可能是链路中问题。
---
点击 统计 -- 捕获文件属性
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/5.png)
查看文件的详细信息，包的数量，被什么封装等等
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/6.png)
点击 统计 -- 协议分级,能看到捕获数据中的协议包含层次情况；本捕获文件的最外层协议是 PPP，然后是 IPV4 协议，TCP 协议
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/4.png)
点击 统计 -- Conversations,可见 IPv4 和 TCP 的对话情况
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/7.png)
点击 统计 -- 分组长度,不同长度的包的分配情况
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/8.png)
点击 统计 -- I/O 图表
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/9.png)
---
## HTTP
下载 https://www.malware-traffic-analysis.net/2014/11/16/2014-11-16-traffic-analysis-exercise.pcap.zip , 密码是 infected
**自动提取通过 http 传输的文件内容**
文件->导出对象->HTTP
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/65.png)
在打开的对象列表中找到有价值的文件，如压缩文件、文本文件、音频文件、图片等，点击 Save 进行保存，或者 Save All 保存所有对象再进入文件夹进行分析。
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/66.png)
**从数据包导出原始格式的文件**
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/58.png)
这里请求了一个 notfound.gif 文件,先追踪其 http 流
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/59.png)
找到响应包
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/60.png)
右键选择文件字段导出相应格式
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/61.png)
保存为 1.gif,查看文件,导出成功
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/62.png)
**导出偏移流量**
鼠标右键点击 - 选中 显示分组字节
在弹出的窗口中设置开始和结束的字节
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/67.png)
---
## HTTPS
HTTPS 是在 TCP/IP 与 HTTP 之间，增加一个安全传输层协议，而这个安全传输层协议一般用 SSL 或 TLS，简单讲 HTTPS=HTTP+SSL/TLS。
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/68.png)
SSL 协议分为 SSL 记录协议层和 SSL 握手协议层。SSL 握手协议建立在 SSL 记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。SSL 记录协议将数据块进行拆分压缩，计算消息验证码，加密，封装记录头然后进行传输。
### 使用服务器证书的私钥进行解密
> 以下部分内容来自文章 [[如何通过Wireshark查看HTTPS、HTTP/2网络包（解码TLS、SSL）](https://www.joji.me/zh-cn/blog/walkthrough-decrypt-ssl-tls-traffic-https-and-http2-in-wireshark/)]
在服务器上导出证书私钥,这里拿 IIS 服务器举例
打开 IIS 站点所绑定的服务器证书，点击查看 `详细信息` 页，点击 `复制到文件`。
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/76.png)
向导中点击下一步，当询问是否导出私钥时选择 `是`，导出私钥，点击 `下一步` 继续。
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/77.png)
选择 `个人信息交换（.PFX）`，下面的三个复选框不用勾选，点击 `下一步` 继续。
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/78.png)
勾选 ` 密码 `，设置一个密码，点击 ` 下一步 ` 继续，导出 PFX 文件。
![](../../../../assets/img/Security/BlueTeam/实验/流量分析/79.png)
有了 PFX 私钥文件，接下来就可以通过 Wireshark 设置使用该私钥来解码 SSL、TLS 网络包了。这一步既可以在服务器上的 Wireshark 中设置，也可以在客户端的 Wireshark 中设置，取决于你想在哪一端查看（抓取）网络包。
在 Wireshark 中, 菜单栏 Edit——Preferences——Protocols——TLS(老的版本是选择 SSL)，点击 Edit 按钮编辑 RSA key lists。
配置如下：
- IP address：目标服务器的 IP 地址，也可以填写 "any" 应用到所有 IP 地址。
- Port：HTTPS 端口号，一般均为："443"。
- Protocol：填写 "http"。
- Key File：选取刚才导出的服务器证书私钥（PFX 文件）。
- Password：输入服务器证书私钥的密码。
设置完成后，当前正在查看的网络包或将来抓取的网络包就会以设定的规则解码了。
- 优点 :
    - 可以从客户端或服务器端使用。
    - 支持各种浏览器。
- 缺点 :
    - 需要有权访问服务器证书。
    - 不支持 Diffie-Hellman 密码。
**禁用 Diffie-Hellman**
如果网络包依然无法被解码，那么很有可能是因为服务器和客户端之间使用了 Diffie-Hellman 加密算法。
如果在 SSL、TLS 握手过程中发现服务器返回的 Server Hello 所选择的加密算法带有 "ECDHE" 和 "DHE" 关键字，那就说明当前 SSL Session 使用了 Diffie-Hellman 加密算法。
使用了 Diffie-Hellman 的 TLS Session Key 会用一个动态产生的密钥对进行加密，而不是使用证书的公钥加密，所以 Wireshark 依然无法解码 TLS 网络包。解决方案就是：禁用客户端或服务器的 Diffie-Hellman 加密算法，建议禁用客户端的 Diffie-Hellman 加密算法仅供网络包分析，这样依然可以保持网站服务器的安全性。
以下是从 Windows 客户端禁用三种不同浏览器 Diffie-Hellman 加密算法的方法以及禁用 IIS 服务器 Diffie-Hellman 加密算法，只要任选其一保证 SSL Session 不使用 Diffie-Hellman 加密算法即可。
- 禁用 Internet Explorer 的 Diffie-Hellman 加密算法
    运行 `gpedit.msc` 打开本地组策略编辑器。
    编辑设置：计算机配置 -> 管理模板 -> 网络 -> SSL 配置设置 -> SSL 密码套件顺序。
    启用该设置后，复制文本框中的默认值到写字板或编辑器中。
    ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/80.png)
    删除所有带 "ECDHE" 和 "DHE" 的算法，请保持所有的文本都在一行里。
    ![](../../../../assets/img/Security/BlueTeam/实验/流量分析/81.png)
    将修改后的值替换原有的默认值，点击确定后保存，重启计算机。
    重启后，再次抓包发现 IE 发出的 Client Hello 中已经不包含任何 Diffie-Hellman 加密算法了，并且 Wireshark 已经能成功将 TLS、SSL 网络包解码。
- 禁用 Chrome 的 Diffie-Hellman 加密算法
    查看默认 Chrome 发出的 Client Hello 包中所包含的 Cipher Suites 列表。
    ```
    Cipher Suites (15 suites)
     Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)
     Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)
     Cipher Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x009e)
     Cipher Suite: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 (0xcc14)
     Cipher Suite: TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 (0xcc13)
     Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (0xc00a)
     Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)
     Cipher Suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA (0x0039)
     Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (0xc009)
     Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)
     Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA (0x0033)
     Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)
     Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)
     Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)
     Cipher Suite: TLS_RSA_WITH_3DES_EDE_CBC_SHA (0x000a)
    ```