# Bandwidth and Performance Metrics

- **Bandwidth**: 3, 4, 1, 2
- **Time**: 1h5min, >3h
- **Memory Usage**:
  - 5.95MB, 2.56GB
  - 5.12MB, 5.12MB
  - 62.3MB, 223.2MB
- **Latency**:
  - 392.5ms, 537ms
  - 106.2s, 410.5s
- **Data Transfer Rate**:
  - 5.2KB, 13.9KB

## Information Flow (IF) Control in Java

Jif is a language designed for enforcing different information flow policies in a program. However, it is more complex than what we need for our purposes. Therefore, we did not build our prototype over Jif but instead implemented our own lightweight tool for taint analysis. Swift, which is based on Jif, uses IF analysis to separate an application according to security policies. This approach is insufficient for our needs because, in bio-computing algorithms like Dynamic Programming Alignment (DPA), the computation on sensitive data can be intertwined with that on public data. For example, a static IF analysis on a DPA could taint all statements once the program receives a single sensitive nucleotide, leading to the entire program being placed on the DP side, which we aim to avoid.

## Program Specialization and Partial Evaluation

Program specialization and partial evaluation have been studied for decades and are extensively used in compiler generation, real-time systems, and other areas. To our knowledge, our approach is the first to apply program specialization to privacy-preserving genomic computations. We propose new specialization techniques tailored to the properties of genome data, including rules for reducing Boolean expressions with value ranges and determining when to unfold a symbol. We demonstrate the effectiveness of these techniques on a category of DPAs common in genome computing. Unlike existing partial evaluators that work at the compiling stage, our approach specializes an algorithm at runtime, aligning with dynamic code generation techniques. However, we do not rely on a language to define the way to generate new programs; instead, we use program analysis to retrofit legacy programs for specialization operations.

## Conclusion

This paper presents an innovative approach that makes significant strides toward practical privacy-preserving genomic computations. Our method leverages the fact that only a small portion of the human genome contains sensitive information. A data provider can announce sanitized genome sequences to enable computations on public data and respond to queries about sensitive data when privacy policies permit. These queries are generated through program specialization. We theoretically analyzed the effectiveness of our approach on a set of DPAs common in computational genomics and experimentally demonstrated its capability to handle computation tasks at practical scales. We developed a program transformation tool to automatically convert existing bioinformatics programs into forms capable of performing privacy-preserving operations. Additionally, we explored how our techniques can facilitate Secure Multi-Party Computation (SMC) in genome computing problems.

## Acknowledgements

We thank Louis Kruger, Somesh Jha, and Vitaly Shmatikov for sharing the code for optimized SMC [34]. This work was supported in part by the National Science Foundation's Cyber Trust program under Grant No. CNS-0716292.

## References

[References listed as provided in the original text]

---

This revised version aims to improve the clarity, coherence, and professionalism of the original text. The content is organized into clear sections, and the technical details are presented in a more structured and accessible manner.