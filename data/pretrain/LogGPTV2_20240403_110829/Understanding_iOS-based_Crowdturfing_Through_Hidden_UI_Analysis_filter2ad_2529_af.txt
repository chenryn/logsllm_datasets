### References

1. Statista. (2018). Number of apps available in leading app stores. Retrieved from https://www.statista.com/statistics/276623/number-of-apps-available-in-leading-app-stores/

2. Sandaha. (n.d.). Retrieved from http://sandaha.cc

3. Zhubajie. (n.d.). Retrieved from https://www.zbj.com

4. App Annie. (Mar. 2010). Retrieved from https://www.appannie.com/en/

5. Capstone: The ultimate disassembler. (Nov. 2013). Retrieved from http://www.capstone-engine.org

6. 91ssz. (Mar. 2017). A website that provides iOS apps with illicit features. Retrieved from http://www.91ssz.com/app/iphone/

7. Andow, B., Acharya, A., Li, D., Enck, W., Singh, K., & Xie, T. (2017). UIRef: Analysis of sensitive user inputs in Android applications. In Proceedings of the 10th ACM Conference on Security and Privacy in Wireless and Mobile Networks (pp. 23-34). ACM.

8. Andronio, N. (2015). Heldroid: Fast and Efficient Linguistic-Based Ransomware Detection. PhD thesis.

9. Bai, X., Xing, L., Zhang, N., Wang, X., Liao, X., Li, T., & Hu, S.-M. (2016). Staying secure and unprepared: Understanding and mitigating the security risks of Apple ZeroConf. In Security and Privacy (SP), 2016 IEEE Symposium on (pp. 655-674). IEEE.

10. bang590. (May 2015). JSPatch: Bridging Objective-C and JavaScript using the Objective-C runtime. Retrieved from https://github.com/bang590/JSPatch

11. Blei, D. M., Ng, A. Y., & Jordan, M. I. (2003). Latent Dirichlet Allocation. Journal of Machine Learning Research, 3(Jan), 993-1022.

12. Chen, K., Wang, X., Chen, Y., Wang, P., Lee, Y., Wang, X., Ma, B., Wang, A., Zhang, Y., & Zou, W. (2016). Following Devil’s Footprints: Cross-platform analysis of potentially harmful libraries on Android and iOS. In Security and Privacy (SP), 2016 IEEE Symposium on (pp. 357-376). IEEE.

13. Cheng, G. (2007). 7 Winning Strategies For Trading Forex: Real and actionable techniques for profiting from the currency markets. Harriman House Limited.

14. Code4App. (Sep. 2017). Code4app: Looking for iOS chameleon app developer. Retrieved from http://www.code4app.com/thread-14820-1-1.html

15. Coding Mart. (Nov. 2017). Recruitment for iOS chameleon app developer. Retrieved from https://mart.coding.net/project/11325

16. Deng, Z., Saltaformaggio, B., Zhang, X., & Xu, D. (2015). IRIS: Vetting private API abuse in iOS applications. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (pp. 44-56). ACM.

17. Apple Developer. (Sep. 2013). Storyboard: Guides and sample code. Retrieved from https://developer.apple.com/library/content/documentation/General/Conceptual/Devpedia-CocoaApp/Storyboard.html

18. Apple Developer. (Sep. 2015). Using segues. Retrieved from https://developer.apple.com/library/content/featuredarticles/ViewControllerPGforiPhoneOS/UsingSegues.html

19. Apple Developer. (Dec. 2017). App Store Review Guidelines. Retrieved from https://developer.apple.com/app-store/review/guidelines/

20. Dongcoder. (Sep. 2017). In demand of chameleon for app vetting. Retrieved from http://www.dongcoder.com/detail-678294.html

21. Egele, M., Kruegel, C., Kirda, E., & Vigna, G. (2011). PIOS: Detecting privacy leaks in iOS applications. In NDSS (pp. 177-183).

22. Freelancer. (Apr. 2017). Freelancer: Looking for developer for lottery chameleon app. Retrieved from https://www.freelancer.com/projects/php/app-edt-15321896/

23. Freelancer. (Apr. 2017). We need to do a universal application on iOS, and then display our URL through the interface. Retrieved from https://www.freelancer.com/projects/iphone/need-universal-application-ios-then/

24. Frey, B. J., & Dueck, D. (2007). Clustering by passing messages between data points. Science, 315(5814), 972-976.

25. Huang, J., Li, Z., Xiao, X., Wu, Z., Lu, K., Zhang, X., & Jiang, G. (2015). SuPor: Precise and scalable sensitive user input detection for Android apps. In USENIX Security Symposium (pp. 977-992).

26. Huang, J., Zhang, X., Tan, L., Wang, P., & Liang, B. (2014). ASDroid: Detecting stealthy behaviors in Android applications by user interface and program behavior contradiction. In Proceedings of the 36th International Conference on Software Engineering (pp. 1036-1046). ACM.

27. Apple Inc. (Jul. 2008). iTunes Preview (App Store). Retrieved from https://itunes.apple.com/genre/ios/id36?mt=8

28. King, P. (Nov. 2015). ESTMusicPlayer. Retrieved from https://github.com/Aufree/ESTMusicPlayer

29. Mori, S., Nishida, H., & Yamada, H. (1999). Optical Character Recognition. John Wiley & Sons, Inc.

30. Motoyama, M., McCoy, D., Levchenko, K., Savage, S., & Voelker, G. M. (2011). Dirty Jobs: The role of freelance labor in web service abuse. In Proceedings of the 20th USENIX conference on Security (p. 14). USENIX Association.

31. Nan, Y., Yang, M., Yang, Z., Zhou, S., Gu, G., & Wang, X. (2015). UIPicker: User-input privacy identification in mobile applications. In USENIX Security Symposium (pp. 993-1008).

32. NETWORK, T. C. P. N. (Jun. 2017). Apple removes 45,000 apps in China. Retrieved from http://www.asiaone.com/digital/apple-removes-45000-apps-china

33. Pandita, R., Xiao, X., Yang, W., Enck, W., & Xie, T. (2013). Whyper: Towards automating risk assessment of mobile applications. In USENIX Security Symposium (pp. 527-542).

34. Qu, Z., Rastogi, V., Zhang, X., Chen, Y., Zhu, T., & Chen, Z. (2014). AutoCog: Measuring the description-to-permission fidelity in Android applications. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (pp. 1354-1365). ACM.

35. Quesada, D. (n.d.). iOS Interface Builder Utility. Retrieved from https://github.com/davidquesada/ibtool

36. SimonLo. (Apr. 2017). HuluMusic. Retrieved from https://github.com/SimonLo/HuluMusic

37. Song, J., Lee, S., & Kim, J. (2015). CrowdTarget: Target-based detection of crowdturfing in online social networks. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (pp. 793-804). ACM.

38. Stringhini, G., Wang, G., Egele, M., Kruegel, C., Vigna, G., Zheng, H., & Zhao, B. Y. (2013). Follow the Green: Growth and Dynamics in Twitter Follower Markets. In Proceedings of the 2013 Conference on Internet Measurement Conference (pp. 163-176). ACM.

39. Su, N., Liu, Y., Li, Z., Liu, Y., Zhang, M., & Ma, S. (2018). Detecting crowdturfing add to favorites activities in online shopping. In Proceedings of the 2018 World Wide Web Conference on World Wide Web (pp. 1673-1682). International World Wide Web Conferences Steering Committee.

40. Tabini, M. (Sep. 2013). How Apple is Improving Mobile App Security. Retrieved from https://www.macworld.com/article/2047567/improving-mobile-app-security.html

41. Stanford NLP Group. (May 2006). Stanford Word Segmenter. Retrieved from https://nlp.stanford.edu/software/tmt/tmt-0.4/

42. Wang, G., Wilson, C., Zhao, X., Zhu, Y., Mohanlal, M., Zheng, H., & Zhao, B. Y. (2012). Serf and Turf: Crowdturfing for Fun and Profit. In Proceedings of the 21st International Conference on World Wide Web (pp. 679-688). ACM.

43. fxsjy. (Jul. 2013). Jieba Chinese Text Segmentation. Retrieved from https://github.com/fxsjy/jieba

44. Wikipedia. (Feb. 2018). Word2vec: A model to produce word embeddings. Retrieved from https://en.wikipedia.org/wiki/Word2vec

45. Google. (Dec. 2017). Developer Policy Center. Retrieved from https://play.google.com/about/developer-content-policy/#!?modal_active=none

46. Gorla, A., Tavecchia, I., Gross, F., & Zeller, A. (2014). Checking app behavior against app descriptions. In Proceedings of the 36th International Conference on Software Engineering (pp. 1025-1035). ACM.

47. Stanford NLP Group. (May 2006). Stanford Word Segmenter. Retrieved from https://nlp.stanford.edu/software/segmenter.shtml

48. hellclq. (Aug. 2013). iOS App: Happy English Sentences 8k. Retrieved from https://github.com/helloclq/HappyEnglishSentences8000

49. Witmart. (Oct. 2017). Buy covering iOS apps for 30,000 CNY. Retrieved from http://www.witmart.com/cn/app-software/jobs/jobid_34788.html

50. Xiao, C. (Feb. 2016). Pirated iOS App Store’s client successfully evaded Apple iOS code review. Retrieved from https://researchcenter.paloaltonetworks.com/2016/02/pirated-ios-app-stores-client-successfully-evaded-apple-ios-code-review/

51. Xing, L., Bai, X., Li, T., Wang, X., Chen, K., Liao, X., Hu, S.-M., & Han, X. (2015). Cracking app isolation on Apple: Unauthorized cross-app resource access on Mac OS. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (pp. 31-43). ACM.

### Appendix

#### 9.1 Performance Evaluation of Cruiser and NaiveCruiser

To understand the performance of Cruiser, we measured the time it takes to process all the apps in the unknown set on our Red Hat server using 14 processes. The breakdown of the delays observed at each stage (Structure Miner and Semantic Analyzer) is reported in Table 7. On average, 27.4 seconds were spent on each app. The results demonstrate that Cruiser scales well and can easily process a large number of iOS apps.

Furthermore, we evaluated the performance of NaiveCruiser (Table 7). As shown, in the absence of the conditionally triggered UI detection step to first filter out legitimate View Controllers (VCs), the performance overhead of the Semantic Analyzer became overwhelming, introducing a delay at least 14 times as large as our original approach. This makes it difficult to scale. Additionally, we evaluated the performance of app collection. On average, downloading an app took 15 seconds, and decrypting it took 10 seconds; however, the time varied greatly depending on network speed, program sizes, and other factors. In total, collecting and decrypting apps took 3 months.

**Table 7: Running Time at Different Stages**

| Tool | Stage | Average Time (s/app) |
|------|-------|----------------------|
| **Cruiser** | Structure Miner (SM) | 18.88 |
| | Semantic Analyzer (SA) | 8.56 |
| | Total | 27.43 |
| **NaiveCruiser** | LVCG Construction | 16.2 |
| | Semantic Analyzer (SA) | 122.95 |
| | Total | 139.15 |

#### 9.2 UI Element Objects Without Semantic UI Texts

**Table 8: UI Element Objects Without Semantic UI Texts**

| Pattern Type | UI Element Object | Parent UI Element Object |
|--------------|------------------|--------------------------|
| **A3** | NSKey | * (Any Object) |
| **A** | UIColor | * (Any Object) |
| **A** | UIFont | * (Any Object) |
| **A** | UINibKeyValuePair | * (Any Object) |
| **A** | NS.rectval | * (Any Object) |
| **A** | UIViewContentHuggingPriority | * (Any Object) |
| **A** | UIViewContentCompressionResistancePriority | * (Any Object) |
| **A** | UIOriginalClassName | * (Any Object) |
| **A** | UINibName | * (Any Object) |
| **A** | UIDestinationViewControllerIdentifier | * (Any Object) |
| **A** | UIActionName | * (Any Object) |
| **A** | UISource | * (Any Object) |
| **A** | UIDestination | * (Any Object) |
| **A** | UIStoryboardIdentifier | * (Any Object) |
| **A** | NSLayoutIdentifier | * (Any Object) |
| **A** | UIProxiedObjectIdentifier | * (Any Object) |
| **B4** | UIAction | UIProxyObject |
| **B** | UIKeyPath | UIStoryboardUnwindSegueTemplate |
| **B** | _UILayoutGuideIdentifier | _UIAttributeTraitStorage |
| **B** | UIKeyPath | _UILayoutGuide |
| **B** | runtimeCollectionClassName | _UIRelationshipTraitStorage |

*Parent UI element object: The parent UI object of the UI element object.
*(asterisk): Any Object.
*Type A: The string of a UI element object will be removed regardless of its parent.
*Type B: The string of a UI element object will be removed only if its parent UI element object also matches.