in
2018.
number-of-apps-available-in-leading-app-stores/.
available
stores
https://www.statista.com/statistics/276623/
leading
app
[4] Sandaha. http://sandaha.cc.
[5] Zhubajie. https://www.zbj.com.
[6] App annie. https://www.appannie.com/en/, Mar. 2010.
[7] Capstone: The ultimate disassembler. http://www.capstone-engine.org,
Nov. 2013.
778    28th USENIX Security Symposium
USENIX Association
[8] 91ssz. A website that provides ios apps with illicit features. http://www.91ssz.
com/app/iphone/, Mar. 2017.
[9] B. Andow, A. Acharya, D. Li, W. Enck, K. Singh, and T. Xie. Uiref: analysis
of sensitive user inputs in android applications. In Proceedings of the 10th ACM
Conference on Security and Privacy in Wireless and Mobile Networks, pages
23–34. ACM, 2017.
[10] N. Andronio. Heldroid: Fast and Efﬁcient Linguistic-Based Ransomware Detec-
tion. PhD thesis, 2015.
[11] X. Bai, L. Xing, N. Zhang, X. Wang, X. Liao, T. Li, and S.-M. Hu. Staying
secure and unprepared: understanding and mitigating the security risks of apple
zeroconf. In Security and Privacy (SP), 2016 IEEE Symposium on, pages 655–
674. IEEE, 2016.
[12] bang590. Jspatch: bridging objective-c and javascript using the objective-c run-
time. https://github.com/bang590/JSPatch, May 2015.
[13] D. M. Blei, A. Y. Ng, and M. I. Jordan. Latent dirichlet allocation. Journal of
machine Learning research, 3(Jan):993–1022, 2003.
[14] K. Chen, X. Wang, Y. Chen, P. Wang, Y. Lee, X. Wang, B. Ma, A. Wang,
Y. Zhang, and W. Zou. Following devil’s footprints: Cross-platform analysis
of potentially harmful libraries on android and ios. In Security and Privacy (SP),
2016 IEEE Symposium on, pages 357–376. IEEE, 2016.
[15] G. Cheng. 7 Winning Strategies For Trading Forex: Real and actionable tech-
niques for proﬁting from the currency markets. Harriman House Limited, 2007.
[16] Code4App. Code4app: Looking for ios chameleon app developer. http://www.
code4app.com/thread-14820-1-1.html, Sep. 2017.
[17] coding mart. Recruitement for ios chameleon app developer. https://mart.
coding.net/project/11325, Nov. 2017.
[18] Z. Deng, B. Saltaformaggio, X. Zhang, and D. Xu. iris: Vetting private api abuse
In Proceedings of the 22nd ACM SIGSAC Conference on
in ios applications.
Computer and Communications Security, pages 44–56. ACM, 2015.
[19] A. Developer. Storyboard: Guides and sample code. https://developer.
apple.com/library/content/documentation/General/Conceptual/
Devpedia-CocoaApp/Storyboard.html, Sep. 2013.
[20] A. Developer.
Using segues.
https://developer.apple.com/
library/content/featuredarticles/ViewControllerPGforiPhoneOS/
UsingSegues.html, Sep. 2015.
[21] A. Developer. App store review guidelines. https://developer.apple.com/
app-store/review/guidelines/, Dec. 2017.
[22] dongcoder. In demand of chameleon for app vetting. http://www.dongcoder.
com/detail-678294.html, Sep. 2017.
[23] M. Egele, C. Kruegel, E. Kirda, and G. Vigna. Pios: Detecting privacy leaks in
ios applications. In NDSS, pages 177–183, 2011.
[24] Freelancer. Freelancer: looking for developer for lottery chameleon app. https:
//www.freelancer.com/projects/php/app-edt-15321896/, Apr. 2017.
[25] Freelancer. We need to do a universal application on ios, and then display our
url through the interface. https://www.freelancer.com/projects/iphone/
need-universal-application-ios-then/, Apr. 2017.
[26] B. J. Frey and D. Dueck. Clustering by passing messages between data points.
science, 315(5814):972–976, 2007.
[32] J. Huang, Z. Li, X. Xiao, Z. Wu, K. Lu, X. Zhang, and G. Jiang. Supor: Precise
and scalable sensitive user input detection for android apps. In USENIX Security
Symposium, pages 977–992, 2015.
[33] J. Huang, X. Zhang, L. Tan, P. Wang, and B. Liang. Asdroid: Detecting stealthy
behaviors in android applications by user interface and program behavior con-
In Proceedings of the 36th International Conference on Software
tradiction.
Engineering, pages 1036–1046. ACM, 2014.
[34] A. Inc. itunes preview (app store). https://itunes.apple.com/genre/ios/
id36?mt=8, Jul. 2008.
[35] P. King. Estmusicplayer. https://github.com/Aufree/ESTMusicPlayer,
Nov. 2015.
[36] S. Mori, H. Nishida, and H. Yamada. Optical character recognition. John Wiley
& Sons, Inc., 1999.
[37] M. Motoyama, D. McCoy, K. Levchenko, S. Savage, and G. M. Voelker. Dirty
jobs: The role of freelance labor in web service abuse. In Proceedings of the 20th
USENIX conference on Security, pages 14–14. USENIX Association, 2011.
[38] Y. Nan, M. Yang, Z. Yang, S. Zhou, G. Gu, and X. Wang. Uipicker: User-input
privacy identiﬁcation in mobile applications. In USENIX Security Symposium,
pages 993–1008, 2015.
[39] T. C. P. N. NETWORK. Apple removes 45,000 apps in china. http://www.
asiaone.com/digital/apple-removes-45000-apps-china, Jun. 2017.
[40] R. Pandita, X. Xiao, W. Yang, W. Enck, and T. Xie. Whyper: Towards automating
risk assessment of mobile applications. In USENIX Security Symposium, pages
527–542, 2013.
[41] Z. Qu, V. Rastogi, X. Zhang, Y. Chen, T. Zhu, and Z. Chen. Autocog: Measuring
the description-to-permission ﬁdelity in android applications. In Proceedings of
the 2014 ACM SIGSAC Conference on Computer and Communications Security,
pages 1354–1365. ACM, 2014.
[42] D. Quesada.
ios
interface builder utility.
davidquesada/ibtool.
https://github.com/
[43] SimonLo. Hulumusic.
2017.
https://github.com/SimonLo/HuluMusic, Apr.
[44] J. Song, S. Lee, and J. Kim. Crowdtarget: Target-based detection of crowdturﬁng
in online social networks. In Proceedings of the 22nd ACM SIGSAC Conference
on Computer and Communications Security, pages 793–804. ACM, 2015.
[45] G. Stringhini, G. Wang, M. Egele, C. Kruegel, G. Vigna, H. Zheng, and B. Y.
Zhao. Follow the green: growth and dynamics in twitter follower markets. In
Proceedings of the 2013 conference on Internet measurement conference, pages
163–176. ACM, 2013.
[46] N. Su, Y. Liu, Z. Li, Y. Liu, M. Zhang, and S. Ma. Detecting crowdturﬁng
add to favorites activities in online shopping. In Proceedings of the 2018 World
Wide Web Conference on World Wide Web, pages 1673–1682. International World
Wide Web Conferences Steering Committee, 2018.
[47] M.
Tabini.
curity.
how-apple-is-improving-mobile-app-security.html, SEP 2013.
se-
https://www.macworld.com/article/2047567/
improving mobile
How apple
is
app
[48] S. T. M. Toolbox. Stanford word segmenter. https://nlp.stanford.edu/
software/tmt/tmt-0.4/, May 2006.
[49] G. Wang, C. Wilson, X. Zhao, Y. Zhu, M. Mohanlal, H. Zheng, and B. Y. Zhao.
Serf and turf: crowdturﬁng for fun and proﬁt. In Proceedings of the 21st interna-
tional conference on World Wide Web, pages 679–688. ACM, 2012.
[27]
fxsjy. Jieba chinese text segmentation. https://github.com/fxsjy/jieba,
Jul. 2013.
[50] Wikipedia. Word2vec: a model to produce word embeddings. https://en.
wikipedia.org/wiki/Word2vec, Feb. 2018.
[28] Google.
Developer policy center.
https://play.google.com/about/
developer-content-policy/#!?modal_active=none, Dec. 2017.
[29] A. Gorla, I. Tavecchia, F. Gross, and A. Zeller. Checking app behavior against
app descriptions. In Proceedings of the 36th International Conference on Soft-
ware Engineering, pages 1025–1035. ACM, 2014.
[30] T. S. N. L. P. Group. Stanford word segmenter. https://nlp.stanford.edu/
software/segmenter.shtml, May 2006.
[31] hellclq.
ios app: Happy english sentences 8k.
helloclq/HappyEnglishSentences8000, Aug. 2013.
https://github.com/
[51] witmart. Buy covering ios apps for 30,000 cny. http://www.witmart.com/cn/
app-software/jobs/jobid_34788.html, Oct. 2017.
[52] C. Xiao. Pirated ios app store’s client successfully evaded apple ios code review.
https://researchcenter.paloaltonetworks.com/2016/02/
pirated-ios-app-stores-client-successfully-evaded-apple-ios-c
ode-review/, Feb. 2016.
[53] L. Xing, X. Bai, T. Li, X. Wang, K. Chen, X. Liao, S.-M. Hu, and X. Han. Crack-
ing app isolation on apple: Unauthorized cross-app resource access on mac os.
In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Commu-
nications Security, pages 31–43. ACM, 2015.
USENIX Association
28th USENIX Security Symposium    779
9 Appendix
9.1 Performance evaluation of Cruiser and
NaiveCruiser
To understand the performance of Cruiser, we measured the
time it takes to process all the apps in the unknown set, on our
Red Hat server using 14 processes. The breakdowns of the
delays observed at each stage (Structure Miner and Semantic
Analyzer) are reported in Table 7. As we can see here, on
average, 27.4 seconds were spent on each app. The results
demonstrate that Cruiser scales well and can easily process
a large number of iOS apps. Furthermore, we evaluated the
performance of NaiveCruiser (Table 7). As we can see, in the
absence of the conditionally triggered UI detection step to
ﬁrst ﬁlter out legitimate VCs, the performance overhead of
the Semantic Analyzer became overwhelming: introducing
a delay at least 14 times as large as our original approach,
which makes it difﬁcult to scale. In addition, we evaluated the
performance of app collection. On average, downloading an
app took 15 seconds and decrypting it took 10 seconds; how-
ever, the time varied greatly depending on the network speed,
program sizes and etc. In total collecting and decrypting apps
took 3 months.
Table 7: Running time at different stages, where SM means
Structure Miner and SA means Semantic Analyzer.
Cruiser Average time
SM
SA
Total
(s/app)
18.88
8.56
27.43
NaiveCruiser
LVCG construction
SA
Total
Average time
(s/app)
16.2
122.95
139.15
9.2 UI element objects without semantic UI
texts
780    28th USENIX Security Symposium
USENIX Association
Table 8: UI element objects without semantic UI texts
Pattern type
A3
A
A
A
A
A
A
A
A
A
A
A
A
A
A
B4
B
B
B
B
B
UI element object
NSKey
UIColor
UIFont
UINibKeyValuePair
NS.rectval
UIViewContentHuggingPriority
UIViewContentCompressionResistancePriority
UIOriginalClassName
UINibName
UIDestinationViewControllerIdentiﬁer
UIActionName
UISource
UIDestination
UIStoryboardIdentiﬁer
NSLayoutIdentiﬁer
UIProxiedObjectIdentiﬁer
UIAction
UIKeyPath
_UILayoutGuideIdentiﬁer
UIKeyPath
Parent UI element object1
*2
*
*
*
*
*
*
*
*
*
*
*
*
*
*
UIProxyObject
UIStoryboardUnwindSegueTemplate
_UIAttributeTraitStorage
_UILayoutGuide
_UIRelationshipTraitStorage
runtimeCollectionClassName
UIRuntimeOutletCollectionConnection
1 Parent UI element object: The parent UI object of UI element object.
2 *(asterisk): Any Object.
3 Type A: The string of a UI element object will be removed regardless its parent.
4 Type B: The string of a UI element object will be removed only if its parent UI element object also
matches.
USENIX Association
28th USENIX Security Symposium    781