图 8-13
redisobject
encoding
REDIS_SET
图8-12 intset 编码的 numbers 集合对象
ptr
type
hashtable 编码的 fruits 集合对象
INTSET_ENC_INT16
 Stringobject
Stringobject
StringObject
"banana"
"cherry"
contents
encoding
length
intset
dict
m
→NULL
→NULL
→NULI
135
第8章 对 
象+75
---
## Page 80
76·第一部分数据结构与对象
表8-10列出了其中一部分集合键命令，以及这些命令在不同编码的集合对象下的实现方法。
8.5.2
那么对象的编码转换操作就会被执行：
会是intset:
码转移操作就会被执行：
被转移并保存到字典里面，并且对象的编码也会从 intset 变为 hashtable。
一个不能被满足时，就会执行对象的编码转换操作，原本保存在整数集合中的所有元素都会
SADD
因为集合键的值为集合对象，所以用于集合键的所有命令都是针对集合对象来构建的，
 对于使用 intset 编码的集合对象来说，当使用 intset 编码所需的两个条件的任意
redis> OBJECT ENCODING integers
redis> SADD integers 10086
但是，只要我们再向集合添加一个新的整数元素，使得这个集合的元素数量变成513，
，
redis> EVAL "for i=l, 512 do redis.call('sADD', KEYs[1], i) end" 1 integers
除此之外，如果我们创建一个包含 512个整数元素的集合对象，那么对象的编码应该
redis> SCARD integers
(integer) 1
"intset"
redis> SCARD integers
"hashtable"
redis> OBJECT ENCODING numbers
(integer)
redis> SADD numbers "seven'
不过，只要我们向这个只包含整数元素的集合对象添加一个字符串元素，集合对象的编
"intset"
(integer) 3
redis> SADD numbers 1 3 5
举个例子，以下代码创建了一个只包含整数元素的集合对象，该对象的编码为intset:
命令
(integer) 513
(nil)
集合命令的实现
1
加到整数集合里面
调用 intsetAdd 函数，将所有新元素添
intset 编码的实现方法
表 8-10集合命令的实现方法
值，将键值对添加到字典里面
调用dictAdd，以新元素为键，NULL 为
hashtable 编码的实现方法
---
## Page 81
典和一个跳跃表：
构作为底层实现，
而对象所使用的压缩列表则会是8-15所示的样子。
编码，那么这个值对象将会是图8-14所示的样子
price 键的值:
方向，而分值较大的元素则被放置在靠近表尾的方向。
则保存元素的分值（score）。
挨在一起的压缩列表节点来保存，第一个节点保存元素的成员（member），而第二个元素
8.6
SREM
SPOP
SRANDMEMBER
SMEMBERS
SISMEMBER
SCARD
skiplist编码的有序集合对象使用zset结
举个例子，
如果 price 键的值对象使用的是ziplist
压缩列表内的集合元素按分值从小到大进行排序，分值较小的元素被放置在靠近表头的
typedef struct zset
ziplist 编码的压缩列表对象使用压缩列表作为底层实现，每个集合元素使用两个紧
redis> ZADD
有序集合的编码可以是ziplist 或者skiplist。
(integer) 3
命令
有序集合对象
zskiplist *zsl;
，如果我们执行以下 ZADD 命令，那么服务器将创建一个有序集合对象作为
) price 8.5 apple 5.0 banana 6.0 cherry
一个 zset 结构同时包含一个字
中删除所有给定的元素
数，将随机元素从整数集合中删除掉
回给客户端之后，调用intsetRemovei
中随机取出一个元素，在将这个随机元素
中随机返回一个元素
数返回集合元素
于集合，没找到则说明元素不存在于集合
查找给定的元素，如果找到了说明元素存在
包含的元素数量
包含的元素数量，这个数量就是集合对象所
调用intsetRemove 函数，
调用 intsetRandom 函数，
调用 intsetRandom 函数，从整数集合
遍历整个整数集合，使用 intsetGet 函
调用 intsetFind 函数，
调用intsetLen 函数，返回整数集合所
intset 编码的实现方法
一
在整数集合中
从整数集合
从整数集合
图
返
REDIS_ENCODING_ZIPLIST
有键为给定元素的键值对
从字典中删除随机字典键所对应的键值对
值返回给客户端之后，调用dictDelete函数，
随机取出一个字典键，在将这个随机字典键的
中随机返回一个字典键
回字典的键作为集合元素
合，没找到则说明元素不存在于集合
给定的元素，如果找到了说明元素存在于集
的元素数量
键值对数量，这个数量就是集合对象所包含
图 8-14 ziplist 编码的有序集合对象
调用dictDelete 函数，从字典中删除所
调用dictGetRandomKey 函数，从字典中
调用dictGetRandomKey 函数，从字典
遍历整个字典，使用 dictGetKey 函数返
调用dictFind 函数，在字典的键中查找
调用 dictSize 函数，返回字典所包含的
REDIS_ZSET
redisobject
hashtable 编码的实现方法
ptr
type
第8章
压缩列表
女
（续）
L
---
## Page 82
◆第一部分数据结构与对象
象所使用的 zset 结构将会是图 8-17 所示的样子。
skiplist 编码的有序集合对象，那么这个有序集合对象将会是图 8-16 所示的样子，而对
来保存集合元素不会产生任何重复成员或者分值，也不会因此而浪费额外的内存。
但这两种数据结构都会通过指针来共享相同元素的成员和分值，所以同时使用跳跃表和字典
型的浮点数。值得一提的是，虽然zset 结构同时使用跳跃表和字典来保存有序集合元素，
令就是根据这一特性实现的，而很多其他有序集合命令都在实现的内部用到了这一特性。
了元素的分值。通过这个字典，程序可以用O(1)复杂度查找给定成员的分值，ZSCORE命
典中的每个键值对都保存了一个集合元素：字典的键保存了元素的成员，而字典的值则保存
比如 ZRANK、ZRANGE 等命令就是基于跳跃表 API 来实现的。
score 属性则保存了元素的分值。通过这个跳跃表，程序可以对有序集合进行范围型操作，
保存了一个集合元素：跳跃表节点的object 属性保存了元素的成员，而跳跃表节点的
快地执行，Redis 选择了同时使用字典和跳跃表两种数据结构来实现有序集合。
从 O(1)上升为 O(logN)。因为以上原因，为了让有序集合的查找和范围型操作都尽可能
举个例子，如果前面 price 键创建的不是 ziplist 编码的有序集合对象，而是
所有优点都会被保留，但因为没有了字典，所以根据成员查找分值这一操作的复杂度将
为要创建一个数组来保存排序后的元素)。
进行排序，完成这种排序需要至少 O(NlogN)时间复杂度，以及额外的 O(N) 内存空间（因
范围型操作——比如 ZRANK、ZRANGE 等命令时，程序都需要对字典保存的所有元素
值这一特性会被保留，但是，因为字典以无序的方式来保存集合元素，所以每次在执行
举个例子，如果我们只使用字典来实现有序集合，那么虽然以○(1)复杂度查找成员的分
无论单独使用字典还是跳跃表，在性能上对比起同时使用字典和跳跃表都会有所降低。
有序集合每个元素的成员都是一个字符串对象，而每个元素的分值都是一个 double 类
除此之外，zset 结构中的 dict 字典为有序集合创建了一个从成员到分值的映射，字
另一方面，如果我们只使用跳跃表来实现有序集合，那么跳跃表执行范围型操作的
zset 结构中的 zsl跳跃表按分值从小到大保存了所有集合元素，每个跳跃表节点都
在理论上，有序集合可以单独使用字典或者跳跃表的其中一种数据结构来实现，但
}zset;
dict *dict;
为什么有序集合需要同时使用跳跃表和字典来实现？
图 8-15有序集合元素在压缩列表中按分值从小到大排列
分值最少的元素
成员
分值
分值排第二的元素
分值最大的元素
---
## Page 83
8.6.1
而浪费任何内存。
际中，字典和跳跃表会共享元素的成员和分值，所以并不会造成任何数据重复，也不会因此
为了展示方便，图8-17在字典和跳跃表中重复展示了各个元素的成员和分值，但在实
Zsl
dict
当有序集合对象可以同时满足以下两个条件时，对象使用 ziplist 编码：
zset
不能满足以上两个条件的有序集合对象将使用 skiplist 编码。
口有序集合保存的所有元素成员的长度都小于64 字节；
口有序集合保存的元素数量小于128个；
编码的转换
header
length
level
tail
·
ht[0]
dict
5
图 8-17有序集合元索同时被保存在字典和跳跃表中
table
dictht
REDIS_ENCODING_SKIPLIST
NULL
L1
L2
L3
L4
L5
L32
·
图8-16skiplist 编码的有序集合对象
1}
REDIS_ZSET
redisobject
 encoding
Stringobject
type
 Stringobject
 Stringobject
Stringobject
ptr
"banana"
"apple"
"banana"
5.0
BW
3
L4
NULL
"cherry"
→6.0
-8.5
-→5.0
dict
zset
6.0
zs1
Stringobject
"apple"
8.5
第8章 对 
2
15
NULL
NULL
→NULL
>NULL
NULL
象·79
---
## Page 84
80◆第一部分数据结构与对象
构建的，表8-11列出了其中一部分有序集合键命令，以及这些命令在不同编码的哈希对象
8.6.2
skiplisto
的所有集合元素都会被转移并保存到 zset 结构里面，对象的编码也会从 ziplist 变为
件中的任意一个不能被满足时，就会执行对象的编码转换操作，原本保存在压缩列表里
entries 选项和 zset-max-ziplist-value 选项的说明。
注意
因为有序集合键的值为哈希对象，所以用于有序集合键的所有命令都是针对哈希对象来
对于使用 ziplist 编码的有序集合对象来说，当使用 ziplist 编码所需的两个条
以上两个条件的上限值是可以修改的，具体请看配置文件中关于 zset-max-ziplist-
"skiplist"
redis> OBJECT ENCODING blah
#编码已改变
redis>2ADDblah2.0o00000000000o0000oo0o00o00o00o00o00o00000000o00o0o00oo0000o
# 向有序集合添加一个成员为 66 字节长的元素
"ziplist"
redis> OBJECT ENCODING blah
以下代码则展示了有序集合对象因为元素的成员过长而引发编码转换的情况：
"skiplist"
redis> OBJECT ENCODING numbers
#编码已改变
#对象包含的元素数量变为129 个
redis> ZADD numbers 3.14 pi
#再添加一个新元素
redis> OBJECT ENCODING numbers
redis> ZCARD numbers
#对象包含了128个元素
以下代码展示了有序集合对象因为包含了过多元素而引发编码转换的情况：
(integer) 1
(integer) 1
redis> ZADD blah 1.0 www
向有序集合添加一个成员只有三字节长的元素
(integer) 129
(integer) 1
(integer) 128
(nil)
有序集合命令的实现
· EVAL "for i=l, 128 do redis.call('ZADD', KEYS[1], i, i) end" 1 numbers
---
## Page 85
命令、TYPE命令、OBJECT命令等。
8.7