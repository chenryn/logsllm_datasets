compl (π ) of a XACML policy π as follows.
• If π = (δ, α ), then compl (π ) = |α|.
• If π = (κ, (π1, . . . , πk )), then compl (π ) = |α|.
Finally, we define ∥I∥ as compl (M (I)).
C.4 Computing expectations
For a formula φ ∈ L and a request z ∈ 2AVals, we define the random
variable φX (z) in a way similar to the one given in Section 6.1.
We now give some auxiliary definitions and lemmas that help to
compute Ef→b
Lemma 5. Let z ∈ 2AVals andψ1,ψ2 be mutually exclusive formulas,
(cid:102)
then
. Proofs are in the full version.
φXACML
M, N
(cid:20)(cid:16)
(cid:17)X
(cid:21)
(cid:103)
(cid:102)
(cid:103)
(cid:102)
(cid:103)
(z)
Ef(cid:55)→b
(ψ1 ⊕ ψ2)X (z)
= Ef(cid:55)→b
ψ X
1 (z)
+ Ef(cid:55)→b
ψ X
2 (z)
.
Definition 12. A set Φ ⊆ L of formulas is unrelated if for every
φ ∈ Φ and every atomic formula α occurring in φ, there is no
(cid:40)
□
ψ ∈ Φ \
Lemma 6. If z ∈ 2AVals and Φ is a set of unrelated formulas, then
, under the distribution q, is mutually independent.
φX (z) | φ ∈ Φ
(cid:8)φ(cid:9) such that α occurs in φ.
(cid:20)(cid:16)
(cid:17)X
(cid:41)
(cid:21)
Lemma 7. We can compute Ef→b
equations given in Lemmas 3 and 5.
φXACML
M, N
(z)
using only the
(cid:18)
(cid:19)
Proof. Observe that every atomic formula in allowsRule
(cid:20)
(cid:18)
σ
y
, z
allowsRuleX
occurs exactly once, so allowsRuleX
is diverse. Hence, by
Corollary 1, we can use Lemma 2 to compute the expectation
Ef→b
(cid:18)
, z
The formula allowsPol
can be rewritten as
(cid:19)
(cid:18)
y
σ
(cid:18)
(cid:19)
(cid:18)
(cid:19)
(cid:18)
, z
y
σ
.
(cid:19)(cid:21)
(cid:18)
(cid:19)(cid:19)
XActive
y
σ
∧ ψ1
, z
y
σ
⊕
XActive
(cid:18)
XActive
(cid:19)
y
(cid:18)
σ
y
σ
∧ ψ2
∧ ψ3
y
(cid:18)
, z
σ
, z
y
σ
(cid:18)
(cid:19)
(cid:18)
, z
y
Each formula ψi
Hence, by Lemma 6, we can use Lemma 3 to compute Ef→b
is built from a set of unrelated formulas.
, z
ψi
y
σ
σ
⊕
.
(cid:19)(cid:19)
(cid:19)(cid:19)
(cid:18)
(cid:20)
(cid:19)(cid:21)
.
(cid:19)
(cid:18)
, z
y
σ
Session 1D: ForensicsCCS ’19, November 11–15, 2019, London, United Kingdom111Using Lemmas 5 and 3, we can show that
(cid:20)
(cid:20)
(cid:20)
σ
+
+
y
y
, z
, z
ψ X
1
ψ X
2
ψ X
3
Ef→b
Ef→b
Ef→b
can be computed using only
, z
y
σ
σ
, z
y
σ
(cid:18)
, z
y
σ
×
(cid:19)(cid:21)
(cid:19)(cid:21)
=
(cid:18)
y
(cid:18)
(cid:42)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:44)
(cid:19)(cid:21)
(cid:19)
(cid:18)
(cid:19)
(cid:19)
(cid:18)
, z
y
σ
(cid:20)
Ef→b
allowsPolX
(cid:20)
Ef→b
XActiveX
(cid:20)
(cid:18)
(cid:18)
(cid:19)
(cid:17)X
(cid:21)
(cid:18)
(cid:26)
(cid:20)(cid:16)
(cid:20)
Therefore, Ef→b
Lemmas 5 and 3.
allowsPolX
, z
σ
Finally, recall that φXACML
now that allows
, z
y
ϵ
, z
y
ϵ
. Observe
M, N
is built from the following unrelated set:
= allows
y
ϵ
, z
XIsRule
y
σ
, allowsRule
, allowsPol
(z)
(cid:19)(cid:21)
φXACML
M, N
By Lemma 6, the corresponding set of random variables is indepen-
dent. Hence, we can use Lemma 3 to reduce the computation of
,
Ef→b
y
σ
. How-
Ef→b
ever, as observed above, all these expectations can be computed us-
ing Lemmas 3 and 5. Hence, we can compute Ef→b
(z)
□
using only those two lemmas.
to the computation of Ef→b
, z
, and Ef→b
allowsRuleX
φXACML
M, N
allowsPolX
XIsRuleX
(cid:18)
(cid:20)
, z
y
y
σ
σ
(cid:19)(cid:21)
(cid:21)
(cid:18)
, z
y
σ
.
(cid:18)
(cid:18)
(cid:18)
(cid:18)
(cid:20)
(cid:20)(cid:16)
(cid:19)(cid:21)
(cid:19)(cid:21)
(cid:19)(cid:21)
(cid:19)
(cid:43)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:45) .
(cid:19)(cid:27)
(cid:18)
(cid:19)(cid:21)
(cid:17)X
Having proven the previous lemmas, we can now implement
Algorithm 1 to produce a policy miner for XACML policies.
D DATASETS AND SYNTHETIC POLICIES
USED FOR EXPERIMENTS
D.1 Datasets for BM-RBAC
We use the access control matrix provided by Amazon for the IEEE
MLSP 2012 competition [38]. They assign three types of permis-
sions, named “HOST”, “PERM_GROUP”, and “SYSTEM_GROUP”.
For each type of permission, we created an access control matrix
by collecting all users and all permissions belonging to that type.
There are approximately 30,000 users, 1,700 permissions of type
“HOST”, 6,000 of type “PERM_GROUP”, and 20,000 of type “SYS-
TEM_GROUP”.
The resulting access control matrices are far too large to be han-
dled efficiently by the policy miner we developed. To address this,
during 5-fold cross-validation, we worked instead with an access
control submatrix induced by a sample of 30% of all users. Each
fold used a different sample of users. To see why this is enough,
we remark that, in RBAC policies, the number R of roles is usually
much smaller than the number N of users. Moreover, the number
K of possible subsets of permissions that users are assigned by
RBAC policies is small in comparison to the whole set of possible
subsets of permissions. If N is much larger than K, then, by the
pidgeonhole principle, many users have the same subset of per-
missions. Therefore, it is not necessary to use all N users to mine
an adequate RBAC policy, as only a fraction of them has all the
necessary information. The high TPR (above 80%) of the policy that
we mined supports the fact that using a submatrix is still enough
to mine policies that generalize well.
D.2 Synthetic policy for spatio-temporal RBAC
We present here the synthetic spatio-temporal RBAC policy that
we used for our experiments. We assume the existence of five
rectangular buildings, described in Table 10. The left column in-
dicates the building’s name and the right column describes the
two-dimensional coordinates of the building’s corners. There are
five roles, which we describe next. We regard a permission as an
action executed on an object.
Name
Corners
Main building
Library
Station
(1, 3), (1, 4), (4, 4), (4, 3)
(1, 1), (1, 2), (2, 2), (2, 1)
(8, 1), (8, 9), (9, 9), (9, 1)
(2, 6), (2, 8), (4, 8), (4, 6)
Computer room (6, 6), (6, 7), (7, 7), (7, 6)
Laboratory
Table 10
The first role assigns a permission to a user if all of the following
hold:
• The user is at most 1 meter away from the computer room.
• The object is in the computer room or in the laboratory.
• The current day is an odd day of the month.
• The current time is between 8AM and 5PM.
The second role assigns a permission to a user if all of the fol-
lowing hold:
• The user is outside the library.
• The object is at most 1 meter away from the library.
• Either
– the current day is before the 10th day of the month and
the current time is between 2PM and 8PM or
– the current day is after the 15th day of the month and the
current time is between 8AM and 12PM.
The third role assigns a permission to a user if all of the following
hold:
• The user is at most 3 meters away from the main building.
• The object is at most 3 meters away from the main building.
The fourth role assigns a permission to a user if all of the follow-
ing hold:
• The user is inside the library.
• The object is outside the library.
• The current day is before the 15th day of the month.
• The current time is between 12AM and 12PM.
The fifth role assigns a permission to a user if all of the following
hold:
• The user is inside the main building, at most 1 meter away
from the library, inside the laboratory, at most 2 meters away
from the computer room, or inside the station.
• The object satisfies the same spatial constraint.
• The current day is before the 15th day of the month.
• The current time is between 12AM and 12PM.
Session 1D: ForensicsCCS ’19, November 11–15, 2019, London, United Kingdom112