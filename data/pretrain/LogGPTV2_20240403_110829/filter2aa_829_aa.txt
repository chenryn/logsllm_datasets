E VA DING 
E DR
A  C O M P R E H E N S I V E  G U I D E  T O  D E F E A T I N G 
E N D P O I N T  D E T E C T I O N  S Y S T E M S
M A T T  H A N D
placeholder
NOT FINAL
EARLY
ACCESS
NO S TA RCH  PR E S S 
E A R LY  ACCE S S  PROG R A M: 
F E E DBACK  W E L COME !
Welcome to the Early Access edition of the as yet unpublished Evading EDR 
by Matt Hand! As a prepublication title, this book may be incomplete and 
some chapters may not have been proofread.
Our goal is always to make the best books possible, and we look forward 
to hearing your thoughts. If you have any comments or questions, email us 
at earlyaccess@nostarch.com. If you have specific feedback for us, please 
include the page number, book title, and edition date in your note, and 
we’ll be sure to review it. We appreciate your help and support! 
We’ll email you as new chapters become available. In the meantime, 
enjoy!
E VA DING  E DR
M AT T H A N D
Early Access edition, 05/24/23
Copyright © 2023 by Matt Hand.
ISBN-13: 978-1-7185-0334-2 (print)
ISBN-13: 978-1-7185-0335-9 (ebook)
Publisher: William Pollock
Managing Editor: Jill Franklin
Production Manager: Sabrina Plomitallo-González
Production Editor: Jennifer Kepler
Developmental Editor: Frances Saux
Interior Design: Octopod Studios
Technical Reviewer: Joe Desimone
Copyeditor: Audrey Doyle 
No Starch Press and the No Starch Press logo are registered trademarks of No Starch Press, 
Inc. Other product and company names mentioned herein may be the trademarks of their 
respective owners. Rather than use a trademark symbol with every occurrence of a trade-
marked name, we are using the names only in an editorial fashion and to the benefit of the 
trademark owner, with no intention of infringement of the trademark.
All rights reserved. No part of this work may be reproduced or transmitted in any form or by 
any means, electronic or mechanical, including photocopying, recording, or by any informa-
tion storage or retrieval system, without the prior written permission of the copyright owner 
and the publisher.
The information in this book is distributed on an “As Is” basis, without warranty. While every 
precaution has been taken in the preparation of this work, neither the author nor No Starch 
Press, Inc. shall have any liability to any person or entity with respect to any loss or damage 
caused or alleged to be caused directly or indirectly by the information contained in it.
CON T E N T S
Acknowledgments .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . v
Introduction  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . vii
Chapter 1: EDR-chitecture  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 1
Chapter 2: Function-Hooking DLLs .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 17
Chapter 3: Process- and Thread-Creation Notifications  .  .  .  .  .  . 33
Chapter 4: Object Notifications  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 61
Chapter 5: Image-Load and Registry Notifications  .  .  .  .  .  .  .  .  . 79
Chapter 6: Filesystem Minifilter Drivers  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 103
Chapter 7: Network Filter Drivers  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 123
Chapter 8: Event Tracing for Windows  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 143
Chapter 9: Scanners  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 171
Chapter 10: Antimalware Scan Interface .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 183
Chapter 11: Early Launch Antimalware Drivers  .  .  .  .  .  .  .  .  .  . 201
Chapter 12: Microsoft-Windows-Threat-Intelligence .  .  .  .  .  .  .  . 215
Chapter 13: Case Study: A Detection-Aware Attack  .  .  .  .  .  .  . 237
Appendix: Auxiliary Sources  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 263
Index  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 000
The chapters in red are included in this Early Access PDF.
ACK NOW L E DG M E N T S
I wrote this book standing on the shoulders of giants. I’d specifically like 
to thank all the people who listened to my crazy ideas, answered my 3 am 
questions, and kept me headed in the right direction while writing this 
book, the names of whom would fill many pages. I’d also like to thank 
everyone at No Starch Press, especially Frances Saux, for helping make this 
book a reality.
Thank you to my family for their love and support. Thank you to The 
Boys, without whom the time spent writing this book wouldn’t have been 
full of nearly as many laughs. Thanks to the team at SpecterOps for provid-
ing me with such a supportive environment through the process of writing 
this book. Thank you to Peter and David Zendian for taking a chance on a 
kid who walked in off the streets, setting me down the path that led to the 
creation of this book.
Evading EDR (Early Access) © 2023 by Matt Hand
Evading EDR (Early Access) © 2023 by Matt Hand
Today, we accept that network compromises 
are inevitable. Our security landscape has 
turned its focus toward detecting adversary 
activities on compromised hosts as early as pos-
sible and with the precision needed to respond effec-
tively. If you work in security, you’ve almost certainly 
come across some type of endpoint security product, 
whether it be legacy antivirus, data-loss prevention 
software, user-activity monitoring, or the subject of 
this book, endpoint detection and response (EDR). 
Each product serves a unique purpose, but none is 
more prevalent today than EDR.
An EDR agent is a collection of software components that create, 
ingest, process, and transmit data about system activity to a central node, 
IN T ROD U C T ION
Evading EDR (Early Access) © 2023 by Matt Hand
viii   Introduction
whose job is to determine an actor’s intent (such as whether their behavior 
is malicious or benign). EDRs touch nearly all aspects of a modern secu-
rity organization. Security operation center (SOC) analysts receive alerts 
from their EDR, which uses detection strategies created by detection 
engineers. Other engineers maintain and deploy these agents and servers. 
There are even entire companies that make their money managing their 
clients’ EDRs.
It’s time we stop treating EDRs like magic black boxes that take in 
“stuff” and output alerts. Using this book, offensive and defensive security 
practitioners alike can gain a deeper understanding of how EDRs work 
under the hood so that they can identify coverage gaps in the products 
deployed in target environments, build more robust tooling, evaluate the 
risk of each action they take on a target, and better advise clients on how to 
cover the gaps.
Who This Book Is For
This book is for any reader interested in understanding endpoint detec-
tions. On the offensive side, it should guide researchers, capability develop-
ers, and red team operators, who can use the EDR internals and evasion 
strategies discussed here to build their attack strategies. On the defensive 
side, the same information serves a different purpose. Understanding how 
your EDR works will help you make informed decisions when investigating 
alerts, building new detections, understanding blind spots, and purchasing 
products.
That said, if you’re looking for a step-by-step guide to evading the spe-
cific EDR deployed in your particular operating environment, this book 
isn’t for you. While we discuss evasions related to the broader technologies 
used by most endpoint security agents, we do so in a vendor-agnostic way. 
All EDR agents generally work with similar data because the operating 
system standardizes its collection techniques. This means we can focus our 
attention on this common core: the information used to build detections. 
Understanding it can clarify why a vendor makes certain design decisions.
Lastly, this book exclusively targets the Windows operating system. 
While you’ll increasingly find EDRs developed specifically for Linux and 
macOS, they still don’t hold a candle to the market share held by Windows 
agents. Because we’re far more likely to run into an EDR deployed on 
Windows when attacking or defending a network, we’ll focus our efforts on 
gaining a deep understanding of how these agents work.
What Is in This Book
Each chapter covers a specific EDR sensor or group of components used 
to collect some type of data. We begin by walking through how developers 
commonly implement the component, then discuss the types of data it col-
lects. Lastly, we survey the common techniques used to evade each compo-
nent and why they work.
Evading EDR (Early Access) © 2023 by Matt Hand
Introduction   ix
Chapter 1: EDR-chitecture  Provides an introduction to the design of 
EDR agents, their various components, and their general capabilities.
Chapter 2: Function-Hooking DLLs  Discusses how an EDR intercepts 
calls to user-mode functions so that it can watch for invocations that 
could indicate the presence of malware on the system.
Chapter 3: Process- and Thread-Creation Notifications  Starts our 
journey into the kernel by covering the primary technique an EDR uses 
to monitor process-creation and thread-creation events on the system 
and the incredible amount of data the operating system can provide 
the agent.
Chapter 4: Object Notifications  Continues our dive into kernel-mode 
drivers by discussing how an EDR can be notified when a handle to a 
process is requested.
Chapter 5: Image-Load and Registry Notifications  Wraps up the pri-
mary kernel-mode section with a walk-through of how an EDR monitors 
files, such as DLLs, being loaded into a process and how the driver can 
leverage these notifications to inject their function-hooking DLL into a 
new process. This chapter also discusses the telemetry generated when 
interacting with the registry and how it can be used to detect attacker 
activities.
Chapter 6: Filesystem Minifilter Drivers  Provides insight into how an 
EDR can monitor filesystem operations, such as new files being created, 
and how it can use this information to detect malware trying to hide its 
presence.
Chapter 7: Network Filter Drivers  Discusses how an EDR can use the 
Windows Filtering Platform (WFP) to monitor network traffic on a host 
and detect activities like command-and-control beaconing.
Chapter 8: Event Tracing for Windows  Dives into an incredibly pow-
erful user-mode logging technology native to Windows that EDRs can 
use to consume events from corners of the operating system that are 
otherwise difficult to reach.
Chapter 9: Scanners  Discusses the EDR component responsible for 
determining if some content contains malware, whether it be a file 
dropped to disk or a given range of virtual memory.
Chapter 10: Antimalware Scan Interface  Covers a scanning technol-
ogy that Microsoft has integrated into many scripting and program-
ming languages, as well as applications, to detect issues that legacy 
scanners can’t detect.
Chapter 11: Early Launch Antimalware Drivers  Discusses how an 
EDR can deploy a special type of driver to detect malware that runs 
early in the boot process, potentially before the EDR has a chance 
to start.
Chapter 12: Microsoft-Windows-Threat-Intelligence  Builds upon 
the preceding chapter by discussing what is arguably the most valu-
able reason for deploying an ELAM driver: gaining access to the 
Evading EDR (Early Access) © 2023 by Matt Hand
x   Introduction
Microsoft-Windows-Threat-Intelligence ETW provider, which can detect 
issues that other providers miss.
Chapter 13: Case Study: A Detection-Aware Attack  Puts the infor-
mation gained in previous chapters into practice by walking through 
a simulated red team operation whose primary objective is to remain 
undetected.
Appendix: Auxiliary Sources  Discusses niche sensors that we don’t 
see deployed very frequently but that can still bring immense value to 
an EDR.
Prerequisite Knowledge
This is a deeply technical book, and to get the most out of it, I strongly rec-
ommend that you familiarize yourself with the following concepts. First, 
knowledge of basic penetration testing techniques will help you better 
understand why an EDR may attempt to detect a specific action on a system. 
Many resources can teach you this information, but some free ones include 
Bad Sector Labs’s Last Week in Security blog series, Mantvydas Baranauskas’s 
blog Red Team Notes, and the SpecterOps blog.
We’ll spend quite a bit of time deep in the weeds of the Windows 
operating system. Thus, you may find it worthwhile to understand the 
basics of Windows internals and the Win32 API. The best resources  
for exploring the concepts covered in this book are Windows Internals: 
System Architecture, Processes, Threads, Memory Management, and More,  
Part 1, 7th Edition, by Pavel Yosifovich, Alex Ionescu, Mark E. Russinovich, 
and David A. Solomon (Microsoft Press, 2017), and Microsoft’s Win32  
API documentation, which you can find at https://learn.microsoft.com/en-us/
windows/win32/api.
Because we examine source code and debugger output in depth, you 
may also want to be familiar with the C programming language and x86 
assembly. This isn’t a requirement, though, as we’ll walk through each code 
listing to highlight key points. If you’re interested in diving into either of 
these topics, you can find fantastic online and print resources, such as 
https://www.learn-c.org and The Art of 64-Bit Assembly Language, Volume 1, by 
Randall Hyde (No Starch Press, 2021).
Experience with tools like WinDbg, the Windows debugger; Ghidra, 
the disassembler and decompiler; PowerShell, the scripting language; and 
the SysInternals Suite (specifically, the tools Process Monitor and Process 
Explorer) will aid you as well. Although we walk through the use of these 
tools in the book, they can be tricky at times. For a crash course, see 
Microsoft’s “Getting Started with Windows Debugging” series of articles, 
The Ghidra Book by Chris Eagle and Kara Nance (No Starch Press, 2020), 
Microsoft’s “Introduction to Scripting with PowerShell” course, and 
Troubleshooting with the Windows Sysinternals Tools, 2nd Edition, by Mark E. 
Russinovich and Aaron Margosis (Microsoft Press, 2016).
Evading EDR (Early Access) © 2023 by Matt Hand
Introduction   xi
Setting Up
If you’d like to test the techniques discussed in this book, you may want to 
configure a lab environment. I recommend the following setup consisting 
of two virtual machines:
• 
A virtual machine running Windows 10 or later with the following soft-
ware installed: Visual Studio 2019 or later configured for desktop C++ 
development, the Windows Driver Kit (WDK), WinDbg (available in the 
Microsoft store), Ghidra, and the SysInternals Suite.
• 
A virtual machine running any operating system or distribution you’d 
like that can serve as a command-and-control server. You could use 
Cobalt Strike, Mythic, Covenant, or any other command-and-control 
framework, so long as it has the ability to generate agent shellcode and 
to execute tooling on the target system.
Ideally, you should disable the antivirus and EDRs on both systems so 
that they don’t interfere with your testing. Additionally, if you plan to work 
with real malware samples, create a sandbox environment to reduce the 
likelihood of any ill effects occurring when the samples are run.
Evading EDR (Early Access) © 2023 by Matt Hand
Evading EDR (Early Access) © 2023 by Matt Hand
Virtually every adversary, whether they’re 
a malicious actor or part of a commercial 
red team, will sometimes run into defensive 
products that compromise their operations. 
Of these defensive products, endpoint detection and 
response (EDR) presents the largest risk to the post-
exploitation phase of an attack. Generally speaking, 
EDRs are applications installed on a target’s work-
stations or servers that are designed to collect data 
about the security of the environment, called telemetry.
In this chapter, we discuss the components of EDRs, their methods of 
detecting malicious activity on a system, and their typical designs. We also 
provide an overview of the difficulties that EDRs can cause attackers.
1
E DR- CH I T EC T U R E
Evading EDR (Early Access) © 2023 by Matt Hand
2   Chapter 1
The Components of an EDR
Later chapters will explore the nuts and bolts of many EDR sensor compo-
nents, how they work, and how attackers might evade them. First, though, 
we’ll consider the EDR as a whole and define some terms that you’ll see fre-
quently throughout the book.
What Is the Agent?
The EDR agent is an application that controls and consumes data from sen-
sor components, performs some basic analysis to determine whether a given 
activity or series of events aligns with attacker behavior, and forwards the 
telemetry to the main server, which further analyzes events from all agents 
deployed in an environment.
If the agent deems some activity to be worthy of its attention, it may 
take any of the following actions: log that malicious activity in the form of 
an alert sent to a central logging system, such as the EDR’s dashboard or 
a security incident and event management (SIEM) solution; block the mali-
cious operation’s execution by returning values indicating failure to the 
program that is performing the action; or deceive the attacker by returning 
to the caller invalid values, such as incorrect memory addresses or modified 
access masks, causing the offensive tooling to believe that the operation 
completed successfully even though subsequent operations will fail.
What Is Telemetry?
Every sensor in an EDR serves a common purpose: the collection of 
telemetry. Roughly defined, telemetry is the raw data generated by an agent 
component or the host itself, and defenders can analyze it to determine 
whether malicious activity has occurred. Every action on the system, from 
opening a file to creating a new process, generates some form of telemetry. 
This information becomes a datapoint in the security product’s internal 
alerting logic.
Figure 1-1 compares telemetry to the data collected by a radar system. 
Radars use electromagnetic waves to detect the presence, heading, and 
velocity of objects within some range.
When a radio wave bounces off an object and returns to the radar sys-
tem, it creates a datapoint indicating that there is something there. Using 
these datapoints, the radar system’s processor can determine things such as 
the object’s speed, location, and altitude and then handle each case differ-
ently. For instance, the system might need to respond to an object flying at 
a slow speed at lower altitudes differently from one flying at a fast speed at 
higher altitudes.
This is very similar to how an EDR handles the telemetry collected by 
its sensors. On its own, information about how a process was created or a 
file was accessed rarely provides enough context to make an informed deci-
sion regarding actions to be taken. They’re just blips on the radar display. 
Moreover, a process detected by an EDR can terminate at any point in time. 
Evading EDR (Early Access) © 2023 by Matt Hand
EDR-Chitecture   3
Therefore, it is important for the telemetry feeding into the EDR to be as 
complete as possible.
The EDR then passes the data to its detection logic. This detection 
logic takes all available telemetry and uses some internal method, such as 
environmental heuristics or static signature libraries, to attempt to ascer-
tain whether the activity was benign or malicious and whether the activity 
meets its threshold for logging or prevention.
What Are Sensors?
If telemetry represents the blips on the radar, then sensors are the trans-
mitter, duplexer, and receiver: the components responsible for detecting 
objects and turning them into blips. Whereas radar systems constantly ping 
objects to track their movements, EDR sensors work a bit more passively by 
intercepting data flowing through an internal process, extracting informa-
tion, and forwarding it to the central agent.
Because these sensors often need to sit inline of some system process, 
they must also work incredibly fast. Imagine that a sensor monitoring reg-
istry queries took 5 ms to perform its work before the registry operation 
was allowed to continue. That doesn’t sound like much of a problem until 
you consider that thousands of registry queries can occur per second on 
some systems. A 5 ms processing penalty applied to 1,000 events would 
introduce a five-second delay to system operations. Most users would find 
this unacceptable, driving customers away from using the EDR altogether.
Although Windows has numerous telemetry sources available, EDRs 
typically focus on only a select few. This is because certain sources may lack 
data quality or quantity, may not be relevant to host security, or may not be 
easily accessible. Some sensors are built into the operating system, such as 
the native event log. EDRs may also introduce their own sensor components 