如果试图访问超出字符串索引范围的字节将会导致panic异常：
c := s[len(s)] // panic: index out of range
第i个字节并不一定是字符串的第i个字符，因为对于非ASCII字符的UTF8编码会要两个或多个
字节。我们先简单说下字符的工作方式。
子字符串操作s[i:j]基于原始的s字符串的第i个字节开始到第j个字节（并不包含j本身）生成一
个新字符串。生成的新字符串将包含j-i个字节。
fmt.Println(s[0:5]) // "hello"
同样，如果索引超出字符串范围或者j小于i的话将导致panic异常。
不管i还是j都可能被忽略，当它们被忽略时将采用0作为开始位置，采用len(s)作为结束的位
置。
fmt.Println(s[:5]) // "hello"
fmt.Println(s[7:]) // "world"
fmt.Println(s[:]) // "hello, world"
其中+操作符将两个字符串链接构造一个新字符串：
fmt.Println("goodbye" + s[5:]) // "goodbye, world"
字符串可以用==和= len(prefix) && s[:len(prefix)] == prefix
}
或者是后缀测试：
func HasSuffix(s, suffix string) bool {
return len(s) >= len(suffix) && s[len(s)-len(suffix):] == suffix
}
或者是包含子串测试：
字符串 103
gopl
func Contains(s, substr string) bool {
for i := 0; i < len(s); i++ {
if HasPrefix(s[i:], substr) {
return true
}
}
return false
}
对于UTF8编码后文本的处理和原始的字节处理逻辑是一样的。但是对应很多其它编码则并不
是这样的。（上面的函数都来自strings字符串处理包，真实的代码包含了一个用哈希技术优
化的Contains 实现。）
另一方面，如果我们真的关心每个Unicode字符，我们可以使用其它处理方式。考虑前面的第
一个例子中的字符串，它包混合了中西两种字符。图3.5展示了它的内存表示形式。字符串包
含13个字节，以UTF8形式编码，但是只对应9个Unicode字符：
import "unicode/utf8"
s := "Hello, 世界"
fmt.Println(len(s)) // "13"
fmt.Println(utf8.RuneCountInString(s)) // "9"
为了处理这些真实的字符，我们需要一个UTF8解码器。unicode/utf8包提供了该功能，我们
可以这样使用：
for i := 0; i < len(s); {
r, size := utf8.DecodeRuneInString(s[i:])
fmt.Printf("%d\t%c\n", i, r)
i += size
}
每一次调用DecodeRuneInString函数都返回一个r和长度，r对应字符本身，长度对应r采用
UTF8编码后的编码字节数目。长度可以用于更新第i个字符在字符串中的字节索引位置。但是
这种编码方式是笨拙的，我们需要更简洁的语法。幸运的是，Go语言的range循环在处理字符
串的时候，会自动隐式解码UTF8字符串。下面的循环运行如图3.5所示；需要注意的是对于非
ASCII，索引更新的步长将超过1个字节。
字符串 104
gopl
for i, r := range "Hello, 世界" {
fmt.Printf("%d\t%q\t%d\n", i, r, r)
}
我们可以使用一个简单的循环来统计字符串中字符的数目，像这样：
n := 0
for _, _ = range s {
n++
}
像其它形式的循环那样，我们也可以忽略不需要的变量：
n := 0
for range s {
n++
}
或者我们可以直接调用utf8.RuneCountInString(s)函数。
正如我们前面提到的，文本字符串采用UTF8编码只是一种惯例，但是对于循环的真正字符串
并不是一个惯例，这是正确的。如果用于循环的字符串只是一个普通的二进制数据，或者是
含有错误编码的UTF8数据，将会发送什么呢？
每一个UTF8字符解码，不管是显式地调用utf8.DecodeRuneInString解码或是在range循环中
隐式地解码，如果遇到一个错误的UTF8编码输入，将生成一个特别的Unicode字符 ，
\uFFFD
在印刷中这个符号通常是一个黑色六角或钻石形状，里面包含一个白色的问号"  "。当程序遇
字符串 105
gopl
到这样的一个字符，通常是一个危险信号，说明输入并不是一个完美没有错误的UTF8字符
串。
UTF8字符串作为交换格式是非常方便的，但是在程序内部采用rune序列可能更方便，因为
rune大小一致，支持数组索引和方便切割。
将[]rune类型转换应用到UTF8编码的字符串，将返回字符串编码的Unicode码点序列：
// "program" in Japanese katakana
s := "プログラム"
fmt.Printf("% x\n", s) // "e3 83 97 e3 83 ad e3 82 b0 e3 83 a9 e3 83 a0"
r := []rune(s)
fmt.Printf("%x\n", r) // "[30d7 30ed 30b0 30e9 30e0]"
（在第一个Printf中的 参数用于在每个十六进制数字前插入一个空格。）
% x
如果是将一个[]rune类型的Unicode字符slice或数组转为string，则对它们进行UTF8编码：
fmt.Println(string(r)) // "プログラム"
将一个整数转型为字符串意思是生成以只包含对应Unicode码点字符的UTF8字符串：
fmt.Println(string(65)) // "A", not "65"
fmt.Println(string(0x4eac)) // "京"
如果对应码点的字符是无效的，则用 无效字符作为替换：
\uFFFD
fmt.Println(string(1234567)) // "  "
3.5.4. 字符串和Byte切片
标准库中有四个包对字符串处理尤为重要：bytes、strings、strconv和unicode包。strings包
提供了许多如字符串的查询、替换、比较、截断、拆分和合并等功能。
bytes包也提供了很多类似功能的函数，但是针对和字符串有着相同结构的[]byte类型。因为字
符串是只读的，因此逐步构建字符串会导致很多分配和复制。在这种情况下，使用
bytes.Buffer类型将会更有效，稍后我们将展示。
strconv包提供了布尔型、整型数、浮点数和对应字符串的相互转换，还提供了双引号转义相
关的转换。
unicode包提供了IsDigit、IsLetter、IsUpper和IsLower等类似功能，它们用于给字符分类。每