tained data from digital investigation efforts. This applies also to
data that is outright illegal in a country, such as the designs of
3D-printed guns, the production of which has already led to a jail
sentence in Japan [22].
2.3 Attack Mechanisms
Our Steganographic/info-hiding attack stores or sends data in a
disguised manner so the fact of sending the data is, to an extent,
concealed. In our attacks, the payload can be any information, as
in the examples above, to be sent or stored secretly. The “carriers”
(stego-containers) which we examine are STL (STereoLithography)
files. The carrier will be put in a channel to be communicated (or
stored). The channels considered are between network elements
which are part of the additive manufacturing ecosystem. The overall
“Stego-system”, which is the methods and means used to create
the concealed channel for communicating information, will be a
software system that performs the embedding in and extraction
from the carrier and the communication/storage. It is assumed that
the system is either run by the adversary, or runs in an undetected
way as a Trojan in a compromised hosting environment.
The actual attack will consist of identifying redundant data in
the STL files, and methods which embed secret information in
them for the above attacks. Such attacks are known as “Payload
Embedding.” Based on the degree a channel is resistant against
discovery and extraction of the transported secret message, we
distinguish between the following three categories:
• Weak Attack: Plaintext Steganographic Channel. The
simplest attack is to embed the information directly, as is,
and rely on the fact that as long as the carrier STL files
produce the expected result (i.e., the proper 3D object is
printed without distortions) no investigation will be started
that could reveal the presence of the covert channel. We will
present our proposal for the weak attack in Section 4.
Claim 1: If one relies on the AM process to be successful as
an indication of non existence of a hidden channels, one will
fail.
• Regular Attack: Encrypted File over a Steganographic
Covert Channel. The weak attack implicitly assumes that
the embedded information is “plaintext.” A commonly used
improvement is to embed and encrypted file, such as a pass-
word-protected zip archive. We will use this approach when
we demonstrate the attack in Section 6
Claim 2: Assuming the cryptosystem is strong: If the regular
attack is used and the cryptographic key is not found in the
malware, even knowing the attack, one cannot find after the
fact what information was embedded.
• Strong Attack: Fully Encrypted Steganographic Covert
Channel. In the regular encryption attack, if one analyzes
the malware one may find the key, which is a weakness of this
attack. A strong attack would implement a fully cryptograph-
ically encrypted communication channel that is transported
over the steganographic covert channel, where analyzing
the malware will not help in recovery of the file stolen. We
propose to use a KEM/DEM3 approach. While the principles
of this approach are well established, this approach needs to
be adjusted based on the characteristic aspects of the under-
lying steganographic channel. In Section 5, we derive our
approach for KEM and DEM from the ransomware/ klepto-
graphic type of attack [68, 70], and show which adjustments
need to be made to ensure that the actual payload consisting
of the {KEM||DEM} pair remains indistinguishable from a
random string of bits after the attack, or:
3KEM - Key Encapsulation Mechanism. DEM - Data Encapsulation Mechanism. DEM
is used to encrypt the payload message with a symmetric session key, while KEM
encrypts the used session key with the public key of the message recipient. The results
of both are concatenated and constitute the message that is embedded.
268RAID ’21, October 6–8, 2021, San Sebastian, Spain
Yampolskiy et al.
Claim 3: Assuming the KEM and DEM generated are crypto-
graphically strong: With access to the output file, the receiver
public key, and full access to the malware, one cannot guess
after the fact what the information embedded in the file is.
• Note: Fighting Traffic Analysis. Given that we can either
encrypt a file in our channel or embed an utterly random
string instead, the cryptographic attacks when the key is
not known can be done in a way that the intended recipient
receives encrypted data while the rest get a file with random
information.
Claim 4: In a cryptographic attack where files sent to in-
tended recipients embed an encrypted data, and other files
embed properly randomized information, one can view the
traffic but cannot tell who is the actual recipient.
The two crypto transformations of the basic weak channel are
generic strengthening of the subliminal channel attack. As has
been demonstrated with other attacks, such as in ransomware or
doxware attacks [37, 72], detecting the above mentioned attacks
poses difficulties to end-users. The systematic methods required
for dealing with them (combining early detection and elimination
of malware, recovery, backups, etc.) are out of scope for this paper,
but our point is that they need to be addressed in the area of AM.
3 FURTHER BACKGROUND
We discuss the STL file format and other related work here.
3.1 STereoLithography (STL) File Format
STereoLithography (STL) files describe a 3D body by specifying a set
of triangles that enclose its surface. They are usually generated by
a computer-aided design (CAD) program, but can also be produced
by scanning real-world objects. STL can be in either ASCII or binary
formats, which are semantically equivalent in the AM process. The
binary format significantly reduces file size, while the ASCII format
is human-readable and can be easily edited or inspected for errors
manually.
Figure 1 shows an example of a 3D model represented as a STL
file. Figure 1a depicts the model of the 3D object itself, as well as a
zoom-in excerpt showing its composition from adjacent triangular
surfaces, known as facets. Figure 1b is an excerpt from the ASCII
STL file that describes this model; this excerpt shows two of the
object’s facets, each of which is defined by three vertices with their
respective x, y, and z coordinates.
In the STL file format, the description of 3D objects is defined as
a series of nested blocks. The outermost block describes a single
solid body and is enclosed by the tags solid and endsolid. Both tags
can be followed with additional comment text, which is commonly
used to specify the model name or author.
Each solid 3D object is described as a series of triangular surfaces
defined within the solid block. The description of each facet is
enclosed within facet and endfacet tags. Each facet is defined by
two distinct elements: its three vertices define the boundaries of
the facet, and the normal vector defines the outwards orientation
of the surface. The latter is indicated by the normal element, which
provides the vector’s x, y, and z coordinates. The STL format defines
a relationship between the normal vector and the vertices describing
the facet: The normal vector should follow the “right hand” rule,
(a) Solid and Wired (Triangular Facets) Representations
s o l i d StanfordLucy
loop
ou ter
f a c e t normal −0.1128 −0.818 −0.5641
v e r t e x −13.101 0 . 5 2 7 9 9 8 5 2 . 2 0 6
v e r t e x −13.035 0 . 7 9 1 9 9 9 5 1 . 8 1
v e r t e x −12.771 0 . 5 2 7 9 9 8 5 2 . 1 4
endloop
e n d f a c e t
f a c e t normal −0.0573 0 . 7 7 4 0 . 6 3 0 6
ou ter
loop
v e r t e x 5 . 9 0 6 9 9 9 7 . 5 8 9 9 9 8 5 0 . 8 8 6
v e r t e x 5 . 9 7 2 9 9 9 7 . 3 2 5 9 9 7 5 1 . 2 1 6
v e r t e x 6 . 2 3 6 9 9 8 7 . 7 2 2
5 0 . 7 5 4
endloop
e n d f a c e t
. . .
e n d s o l i d StanfordLucy
(b) ASCII STL File (Excerpt: Two Triangular Facets Shown)
Figure 1: 3D Digital Design Model—Stanford Lucy [1]
meaning that the vertices are listed in counter-clockwise order
when viewed from the normal.
The vertices of a facet are defined in the innermost nested block,
which is enclosed by the tags outer loop and endloop. Each vertex
is specified as vertex vx vy vz. The three v’s are single-precision
floating point values that represent the x, y, and z coordinates,
respectively.
For both facets and vertices, there is some freedom in their order-
ing within blocks. Facets can be freely reordered within the solid;
there is no specification for them. Vertex orderings are required
to form a “right-hand” rule with the normal vector, but there are
multiple valid orders for any facet. This freedom for semantically
equivalent representations in STL format is what allows us to use
it as a carrier.
3.2 Related Work
Several authors survey the entire field of AM Security [43, 50, 66].
So far, three security threat categories have been identified for AM:
269What Did You Add to My Additive Manufacturing Data?
RAID ’21, October 6–8, 2021, San Sebastian, Spain
theft of technical data, sabotage attacks, and illegal part manufac-
turing [66]. While these threats are not unique to AM, it has been
shown that in the AM context numerous characteristic aspects
exist that require special consideration [24, 65]. To the best of our
knowledge, the security threat discussed in this paper has not been
identified in the research literature before.
Kuznetsov et al. [39] recognized that 3D Printing technology
can be used to steganographically hide information. However, as
opposed to the attack settings considered in this paper, the authors
propose to hide information inside of a 3D-printed object. The
authors encode a secret message as a three-dimensional matrix
“embedded” within the boundaries of the actual 3D-printed object.
While this approach can be used in certain attack settings, it violates
the constraint considered in this paper – avoiding modifications of
the 3D model. When the original 3D geometry is known, such in-
sertions in the model can be detected with non-destructive testing.
Most importantly, in the case of functional parts, such modifica-
tions will likely impact the part’s mechanical characteristics, as has
been demonstrated by several publications focusing on intentional
sabotage attacks [7, 56, 73].
The remaining related literature focuses on addressing the threat
of Intellectual Property (IP) violation. Numerous works suggested
watermarking techniques that could be used for copyright protec-
tion, theft deterrence, and inventory. Wang et al. [61] summarized
3D mesh watermarking techniques and their attack robustness in
their survey. They categorized techniques as fragile, for authenti-
cation and integrity applications, or robust, for copyright protec-
tion. The authors identified the two major categories of attacks as
geometric (modifying vertex positions) or connectivity (modifying
vertices, edges, and facets adjacency relations). In an AM water-
mark integration survey, Macq et al. [42] assessed watermarking as
a traceability mechanism to be used against already-printed models.
They focused on each method’s resistance to alteration (robust-
ness) and visual imperceptibility (fidelity). The authors concluded
that, while attainable, no method currently provided a satisfactory
watermarking solution.
Ohbuchi et al. [45, 46] presented algorithms for embedding data
into 3D models using vertex coordinates and topology. One ap-
proach, the Triangle Strip Peeling Symbol (TSPS) sequence, embed-
ded a sequence of binary digits by constructing a strip using triangle
edges and adjacency states [45]. Flaws in their method included
reaching mesh boundary limits, circling back, and erroneous extrac-
tion. Kanai et al. [35] suggested embedding watermarks in models
using wavelet transforms. The embedded watermarks were percep-
tually invisible and invariant to affine transformations; however,
the algorithms produced geometric errors and were restricted to a
specific topological class of mesh. Also in the frequency domain,
Praun et al. [49] proposed a method to determine the probability
that two models were created independently through watermark
comparisons. However, the method resulted in vertex modifications
which impacts geometry. Ohbuchi et al. [47] integrated a watermark
into 3D mesh models using the spectral domain. Using vertex con-
nectivity and coordinates, the authors embedded a binary bitstream.
Their method perceptibly affected the object. Cayre and Macq [11]
introduced a substitutive, blind scheme in the spatial domain. The
process introduced modifications of vertex positions. Based on ex-
periments with 11 different models, the authors reported distortion
rates ranging from 0.15 to 0.25%. Hou et al. [31] specifically con-
sidered 3D mesh watermarking with regards to 3D printing. The
authors used the layers created by the STL 2D cross-sections to
design a rotating disk embedding system where the relative rota-
tion contains the payload. Their method required knowledge of the
original model, and, while visually imperceptible, resulted in geo-
metric distortion. Hou et al. [32] proposed estimating the printing
direction from the printed layer artifact as a way to synchronize
and recover a cylindrical coordinate system watermark. Although
their solution was blind, among the listed limitations was that the
printing direction and z-axis must be aligned and fixed without any
model rotation after watermarking.
Recent efforts in addressing AM IP protection have focused on
modifying the printed object. For example, Delmotte et al. [20] mod-
ified the layer thickness in multiple locations to embed a watermark,
an approach which resulted in object deformation. Silapasuphako-
rnwong et al. [55] modified the object material, using a two nozzle
print system with iron added to the material in the second nozzle.
While this produced a re-writable watermark, it requires adding a
magnetic material to the object. Chen et al. [14, 16] introduced an
approach to imprint a QR code in the 3D printed part. Individual
segments of QR code can be distributed across multiple layers and
produced either with voids or support material substituting for
source material; a CT scanner can be used to read out such a code.
In all these approaches, the proposed modifications might not be
acceptable for functional parts.
Additionally, patents have been filed for STL model watermark-
ing [41, 74], digital rights management of modeling data using
passwords with barcodes [44], model protection via machine in-
struction masking [58], and a 3D printing environment watermark
embedding and detecting apparatus [27]. Recently, Treatstock has
begun offering Watermark3D, an online watermarking solution for
STL files [3, 53]. Under their patent pending system [53], a user
uploads an STL file, provides information to be used for a water-
mark, chooses whether to make the watermark public, and then
downloads a watermarked file [3].
4 WEAK ATTACK: PLAINTEXT
STEGANOGRAPHIC COVERT CHANNEL
Our new approach for establishing a steganographic covert channel
in STL files consists of three parts: (i) a transformation primitive
that can be used to encode/decode individual bits of information, (ii)
a raw steganographic channel that consists of functions to encode
and decode individual bytes bit-by-bit while advancing internal
position in the carrier STL file, and (iii) an approach building upon
these functions to encode an arbitrary binary file in a carrier STL
file.
4.1 Encoding/Decoding Individual Bits
We identified several sources of entropy in the STL file format4, each