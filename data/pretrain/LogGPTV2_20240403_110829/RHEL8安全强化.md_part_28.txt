    # dnf reinstall -y vim-enhanced
    ```
3.  在审计日志中搜索最近的安装事件，例如：
    ``` screen
    # ausearch -ts recent -k software-installer
    ––––
    time->Thu Dec 16 10:33:46 2021
    type=PROCTITLE msg=audit(1639668826.074:298): proctitle=2F7573722F6C6962657865632F706C6174666F726D2D707974686F6E002F7573722F62696E2F646E66007265696E7374616C6C002D790076696D2D656E68616E636564
    type=PATH msg=audit(1639668826.074:298): item=2 name="/lib64/ld-linux-x86-64.so.2" inode=10092 dev=fd:01 mode=0100755 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:ld_so_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0
    type=PATH msg=audit(1639668826.074:298): item=1 name="/usr/libexec/platform-python" inode=4618433 dev=fd:01 mode=0100755 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:bin_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0
    type=PATH msg=audit(1639668826.074:298): item=0 name="/usr/bin/dnf" inode=6886099 dev=fd:01 mode=0100755 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:rpm_exec_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0
    type=CWD msg=audit(1639668826.074:298): cwd="/root"
    type=EXECVE msg=audit(1639668826.074:298): argc=5 a0="/usr/libexec/platform-python" a1="/usr/bin/dnf" a2="reinstall" a3="-y" a4="vim-enhanced"
    type=SYSCALL msg=audit(1639668826.074:298): arch=c000003e syscall=59 success=yes exit=0 a0=55c437f22b20 a1=55c437f2c9d0 a2=55c437f2aeb0 a3=8 items=3 ppid=5256 pid=5375 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts0 ses=3 comm="dnf" exe="/usr/libexec/platform-python3.6" subj=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 key="software-installer"
    ```
:::
:::
::: section
::: titlepage
# []{#auditing-the-system_security-hardening.html#proc_monitoring-user-login-times-with-audit_auditing-the-system}使用审计监控用户登录时间 {.title}
:::
要监控特定时间哪个用户登录了，您不需要以任何特殊的方式配置审计。您可以使用
`ausearch`{.literal} 或 `aureport`{.literal}
工具，它们提供不同的方法来展示相同的信息。
::: itemizedlist
**先决条件**
-   `auditd`{.literal} 是根据 [为安全环境配置
    auditd](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/security_hardening/auditing-the-system_security-hardening#configuring-auditd-for-a-secure-environment_auditing-the-system){.link}
    中提供的设置进行配置的。
:::
::: title
**流程**
:::
要显示用户登录的时间，请使用以下命令之一：
::: itemizedlist
-   在审计日志中搜索 `USER_LOGIN`{.literal} 消息类型：
    ``` screen
    # ausearch -m USER_LOGIN -ts '12/02/2020' '18:00:00' -sv no
    time->Mon Nov 22 07:33:22 2021
    type=USER_LOGIN msg=audit(1637584402.416:92): pid=1939 uid=0 auid=4294967295 ses=4294967295 subj=system_u:system_r:sshd_t:s0-s0:c0.c1023 msg='op=login acct="(unknown)" exe="/usr/sbin/sshd" hostname=? addr=10.37.128.108 terminal=ssh res=failed'
    ```
    ::: itemizedlist
    -   您可以使用 `-ts`{.literal}
        选项指定日期和时间。如果不使用这个选项，`ausearch`{.literal}
        将提供从当天开始的结果，如果您省略时间，`ausearch`{.literal}
        将提供从午夜开始的结果。
    -   您可以使用 `-sv yes`{.literal}
        选项来过滤成功的登录尝试，`-sv no`{.literal}
        用来过滤失败的登录尝试。
    :::
-   将 `ausearch`{.literal} 命令的原始输出传送给 `aulast`{.literal}
    工具，它以类似于 `last`{.literal} 命令的输出格式显示输出。例如：
    ``` screen
    # ausearch --raw | aulast --stdin
    root     ssh          10.37.128.108    Mon Nov 22 07:33 - 07:33  (00:00)
    root     ssh          10.37.128.108    Mon Nov 22 07:33 - 07:33  (00:00)
    root     ssh          10.22.16.106     Mon Nov 22 07:40 - 07:40  (00:00)
    reboot   system boot  4.18.0-348.6.el8 Mon Nov 22 07:33
    ```
-   使用 `aureport`{.literal} 命令及 `--login -i`{.literal}
    选项来显示登录事件列表。
    ``` screen
    # aureport --login -i
    Login Report
    ============================================
    # date time auid host term exe success event
    ============================================
    1. 11/16/2021 13:11:30 root 10.40.192.190 ssh /usr/sbin/sshd yes 6920
    2. 11/16/2021 13:11:31 root 10.40.192.190 ssh /usr/sbin/sshd yes 6925
    3. 11/16/2021 13:11:31 root 10.40.192.190 ssh /usr/sbin/sshd yes 6930
    4. 11/16/2021 13:11:31 root 10.40.192.190 ssh /usr/sbin/sshd yes 6935
    5. 11/16/2021 13:11:33 root 10.40.192.190 ssh /usr/sbin/sshd yes 6940
    6. 11/16/2021 13:11:33 root 10.40.192.190 /dev/pts/0 /usr/sbin/sshd yes 6945
    ```
:::
::: itemizedlist
**其它资源**
-   `ausearch(8)`{.literal} 手册页。
-   `aulast(8)`{.literal} 手册页。
-   `aureport(8)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#auditing-the-system_security-hardening.html#related-information-auditing-the-system}其它资源 {.title}
:::
::: itemizedlist
-   [RHEL审计系统参考](https://access.redhat.com/articles/4409591){.link}知识库文章。
-   [Auditd execution options in a
    container](https://access.redhat.com/articles/4494341){.link}
    知识库文章。
-   [Linux审计文档项目页面](https://github.com/linux-audit/audit-documentation/wiki){.link}。
-   `audit`{.literal} 软件包在 `/usr/share/doc/audit/`{.literal}
    目录中提供文档。
-   `auditd(8)`{.literal}、`auditctl(8)`{.literal}、`ausearch(8)`{.literal}、`audit.rules(7)`{.literal}、`audispd.conf(5)`{.literal}、`audispd(8)`{.literal}、`auditd.conf(5)`{.literal}、`ausearch-expression(5)`{.literal}、`aulast(8)`{.literal}、`aulastlog(8)`{.literal}、`aureport(8)`{.literal}、`ausyscall(8)`{.literal}、`autrace(8)`{.literal}
    和 `auvirt(8)`{.literal} 手册页。
:::
:::
:::
[]{#assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening.html}
::: chapter
::: titlepage
# []{#assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening.html#assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening}第 15 章 使用 fapolicyd 阻止和允许应用程序 {.title}
:::
根据规则集设置和强制实施允许或拒绝应用程序执行的策略，可有效防止执行未知的和具有潜在恶意的软件。
::: section
::: titlepage
# []{#assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening.html#introduction-to-fapolicyd_assembly_blocking-and-allowing-applications-using-fapolicyd}fapolicyd 简介 {.title}
:::
`fapolicyd`{.literal}
软件框架根据用户定义的策略来控制应用程序的执行。这是防止在系统上运行不受信任的和可能具有恶意的应用程序的最有效的方法之一。
`fapolicyd`{.literal} 框架提供以下组件。
::: itemizedlist
-   `fapolicyd`{.literal} 服务
-   `fapolicyd`{.literal} 命令行工具
-   `fapolicyd`{.literal} RPM 插件
-   `fapolicyd`{.literal} 规则语言
:::
管理员可以为任何应用程序定义 `allow`{.literal} 和 `deny`{.literal}
执行规则，并根据路径、哈希、MIME 类型或信任进行审计。
`fapolicyd`{.literal}
框架引入了信任的概念。在被系统软件包管理器正确安装后，应用程序是可信的，因此它会在系统
RPM 数据库中注册。`fapolicyd`{.literal} 守护进程使用 RPM
数据库作为受信任的二进制文件和脚本的列表。`fapolicyd`{.literal} RPM
插件注册由 YUM 软件包管理器或 RPM
软件包管理器处理的任何系统更新。插件会通知 `fapolicyd`{.literal}
守护进程有关此数据库中的更改。添加应用程序的其他方法需要创建自定义规则，并重新启动
`fapolicyd`{.literal} 服务。
`fapolicyd`{.literal} 服务配置位于 `/etc/fapolicyd/`{.literal}
目录中，结构如下。
::: itemizedlist
-   `fapolicyd.rules`{.literal}
    文件包含了`允许`{.literal}和`拒绝`{.literal}执行规则。
-   `fapolicyd.conf`{.literal}文件包含守护进程的配置选项。此文件主要用于性能调优目的。
:::
您可以使用其中一种方法来对 `fapolicyd`{.literal} 进行完整性检查：
::: itemizedlist
-   文件大小检查
-   比较 SHA-256 哈希
-   完整性映射架构（IMA）子系统
:::
默认情况下，`fapolicyd`{.literal}
不进行完整性检查。根据文件大小进行完整性检查很快，但攻击者可以替换文件的内容并保留其字节大小。计算和检查
SHA-256 校验和更安全，但这会影响系统性能。`fapolicyd.conf`{.literal}
中的 `integrity = ima`{.literal}
选项需要在包含可执行文件的所有文件系统上都支持扩展属性（也称为
[*xattr*]{.emphasis}）。
::: itemizedlist
**其它资源**
-   `fapolicyd(8)`{.literal}、`fapolicyd.rules(5)`{.literal} 和
    `fapolicyd.conf(5)`{.literal} 手册页。
-   在
    [管理、监控和更新内核](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_monitoring_and_updating_the_kernel/){.link}
    文档中，[使用内核完整性子系统加强安全性](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_monitoring_and_updating_the_kernel/enhancing-security-with-the-kernel-integrity-subsystem_managing-monitoring-and-updating-the-kernel){.link}
    一章。
:::
:::
::: section
::: titlepage
# []{#assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening.html#proc_deploying-fapolicyd_assembly_blocking-and-allowing-applications-using-fapolicyd}部署 fapolicyd {.title}
:::
在 RHEL 中部署 `fapolicyd`{.literal} 框架：
::: orderedlist
**流程**
1.  安装 `fapolicyd`{.literal} 软件包：
    ``` screen
    # yum install fapolicyd
    ```
2.  启用并启动 `fapolicyd`{.literal} 服务：
    ``` screen
    # systemctl enable --now fapolicyd
    ```
:::
::: orderedlist
**验证**
1.  验证 `fapolicyd`{.literal} 服务是否正常运行：
    ``` screen
    # systemctl status fapolicyd
    ● fapolicyd.service - File Access Policy Daemon
       Loaded: loaded (/usr/lib/systemd/system/fapolicyd.service; enabled; vendor p>
       Active: active (running) since Tue 2019-10-15 18:02:35 CEST; 55s ago
      Process: 8818 ExecStart=/usr/sbin/fapolicyd (code=exited, status=0/SUCCESS)
     Main PID: 8819 (fapolicyd)
        Tasks: 4 (limit: 11500)
       Memory: 78.2M
       CGroup: /system.slice/fapolicyd.service
               └─8819 /usr/sbin/fapolicyd
    Oct 15 18:02:35 localhost.localdomain systemd[1]: Starting File Access Policy D>
    Oct 15 18:02:35 localhost.localdomain fapolicyd[8819]: Initialization of the da>
    Oct 15 18:02:35 localhost.localdomain fapolicyd[8819]: Reading RPMDB into memory
    Oct 15 18:02:35 localhost.localdomain systemd[1]: Started File Access Policy Da>
    Oct 15 18:02:36 localhost.localdomain fapolicyd[8819]: Creating database
    ```
2.  以没有 root 权限的用户身份登录，检查 `fapolicyd`{.literal}
    是否正常工作，例如：
    ``` screen
    $ cp /bin/ls /tmp
    $ /tmp/ls
    bash: /tmp/ls: Operation not permitted
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening.html#marking-files-as-trusted-using-an-additional-source-of-trust_assembly_blocking-and-allowing-applications-using-fapolicyd}使用其它信任源将文件标记为可信 {.title}
:::
您可以使用这个流程为 `fapolicyd`{.literal} 使用其它的信任源。在 RHEL 8.3
之前，`fapolicyd`{.literal} 只信任 RPM
数据库中包含的文件。`fapolicyd`{.literal} 框架现在也支持使用
`/etc/fapolicyd/fapolicyd.trust`{.literal} 纯文本文件作为信任源。
您可以使用文本编辑器直接修改或通过 `fapolicyd`{.literal} CLI 命令修改
`fapolicyd.trust`{.literal}。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
宁愿使用 `fapolicyd.trust`{.literal} ，而不是编写自定义
`fapolicyd`{.literal} 规则来将文件标记为可信。
:::
::: itemizedlist
**先决条件**
-   `fapolicyd`{.literal} 框架部署在您的系统上。
:::
::: orderedlist
**流程**
1.  将自定义二进制文件复制到所需的目录中，例如：
    ``` screen
    $ cp /bin/ls /tmp
    $ /tmp/ls
    bash: /tmp/ls: Operation not permitted
    ```
2.  将您的自定义二进制文件标记为可信：
    ``` screen
    # fapolicyd-cli --file add /tmp/ls
    ```
    请注意，上一命令将相应的行添加到
    `/etc/fapolicyd/fapolicyd.trust`{.literal}。
3.  更新 `fapolicyd`{.literal} 数据库：