    `/etc/squid/HTTP.keytab`{.literal} 文件中：
    ``` literallayout
    # export KRB5_KTNAME=FILE:/etc/squid/HTTP.keytab
    # net ads keytab CREATE -U administrator
    ```
4.  在 keytab 中添加 `HTTP`{.literal} 服务主体：
    ``` literallayout
    # net ads keytab ADD HTTP -U administrator
    ```
5.  将 keytab 文件的所有者设置为 `squid`{.literal} 用户：
    ``` literallayout
    # chown squid /etc/squid/HTTP.keytab
    ```
6.  另外，验证 keytab 文件是否包含代理服务器的完全限定域名(FQDN)的
    `HTTP`{.literal} 服务主体：
    ``` literallayout
      klist -k /etc/squid/HTTP.keytab
    Keytab name: FILE:/etc/squid/HTTP.keytab
    KVNO Principal
    ---- ---------------------------------------------------
    ...
       2 HTTP/PI:EMAIL
    ...
    ```
7.  编辑 `/etc/squid/squid.conf`{.literal} 文件：
    ::: orderedlist
    1.  要配置 `negotiate_kerberos_auth`{.literal} 助手工具，请在
        `/etc/squid/squid.conf`{.literal} 的顶部添加以下配置条目：
        ``` literallayout
        auth_param negotiate program /usr/lib64/squid/negotiate_kerberos_auth -k /etc/squid/HTTP.keytab -s HTTP/PI:EMAIL
        ```
        下面描述了在上例中传给 `negotiate_kerberos_auth`{.literal}
        助手工具的参数：
        ::: itemizedlist
        -   `-K file`{.literal} 设置密钥选项卡文件的路径。请注意，squid
            用户必须拥有这个文件的读取权限。
        -   `-s HTTP/host_name@kerberos_realm`{.literal} 设置 Squid
            使用的 Kerberos 主体。
            另外，您可以通过将以下一个或多个参数传递给帮助程序来启用日志：
        -   `-i`{.literal} 记录信息，如验证用户。
        -   `-d`{.literal} 启用调试日志记录。
            Squid 将助手工具中的调试信息记录到
            `/var/log/squid/cache.log`{.literal} 文件。
        :::
    2.  添加以下 ACL 和规则来配置 Squid
        只允许经过身份验证的用户使用代理：
        ``` literallayout
        acl kerb-auth proxy_auth REQUIRED
        http_access allow kerb-auth
        ```
        ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 重要 {.title}
        在`http_access deny all`{.literal}之前指定这些设置。
        :::
    3.  删除以下规则，以禁用从 `localnet`{.literal} ACL 中指定的 IP
        范围绕过代理身份验证：
        ``` literallayout
        http_access allow localnet
        ```
    4.  以下 ACL 存在于默认配置中，并将 `443`{.literal} 定义为使用 HTTPS
        协议的端口：
        ``` literallayout
        acl SSL_ports port 443
        ```
        如果用户也可以在其它端口上使用 HTTPS 协议，请为每个端口添加
        ACL：
        ``` literallayout
        acl SSL_ports port port_number
        ```
    5.  更新 `acl Safe_ports`{.literal} 规则列表，以配置 Squid
        可以建立连接的端口。例如，若要配置使用代理的客户端只能访问端口
        21(FTP)、80(HTTP)和 443(HTTPS)上的资源，在配置中仅保留以下
        `acl Safe_ports`{.literal} 语句：
        ``` literallayout
        acl Safe_ports port 21
        acl Safe_ports port 80
        acl Safe_ports port 443
        ```
        默认情况下，配置中包含 `http_access deny !Safe_ports`{.literal}
        规则，该规则定义了拒绝访问`Safe_ports`{.literal} ACL
        中未定义的端口。
    6.  在 `cache_dir`{.literal}
        参数中配置缓存类型、缓存目录的路径、缓存大小以及其它缓存类型的设置：
        ``` literallayout
        cache_dir ufs /var/spool/squid 10000 16 256
        ```
        使用这些设置：
        ::: itemizedlist
        -   Squid使用 `ufs`{.literal} 缓存类型.
        -   Squid 将其缓存存储在 `/var/spool/squid/`{.literal} 目录中。
        -   缓存增长到 `10000`{.literal} MB。
        -   Squid
            在`/var/spool/squid/`{.literal}目录中创建`16`{.literal}
            个一级子目录。
        -   Squid 在每个一级目录中创建 `256`{.literal}个子目录。
            如果您没有设置 `cache_dir`{.literal} 指令，Squid
            会将缓存存储在内存中。
        :::
    :::
8.  如果您在 `cache_dir`{.literal} 参数中设置了与
    `/var/spool/squid/`{.literal} 不同的缓存目录：
    ::: orderedlist
    1.  创建缓存目录：
        ``` literallayout
        # mkdir -p path_to_cache_directory
        ```
    2.  配置缓存目录的权限：
        ``` literallayout
        # chown squid:squid path_to_cache_directory
        ```
    3.  如果您在 `enforcing`{.literal} 模式中运行
        SELinux，请为缓存目录设置 `squid_cache_t`{.literal} 上下文：
        ``` literallayout
        # semanage fcontext -a -t squid_cache_t "path_to_cache_directory(/.*)?"
        # restorecon -Rv path_to_cache_directory
        ```
        如果您的系统中没有 `semanage`{.literal} 工具，请安装
        `policycoreutils-python-utils`{.literal} 软件包。
    :::
9.  在防火墙中打开 `3128`{.literal} 端口：
    ``` literallayout
    # firewall-cmd --permanent --add-port=3128/tcp
    # firewall-cmd --reload
    ```
10. 启用并启动 `squid`{.literal} 服务：
    ``` literallayout
    # systemctl enable --now squid
    ```
:::
::: title
**验证步骤**
:::
要验证代理是否正常工作，请使用 `curl`{.literal} 工具下载网页：
``` literallayout
# curl -O -L "https://www.redhat.com/index.html" --proxy-negotiate -u : -x "proxy.ad.example.com:3128"
```
如果 `curl`{.literal} 没有显示任何错误，并且 `index.html`{.literal}
文件存在于当前目录中，那么代理工作正常。
::: title
**故障排除步骤**
:::
手动测试 Kerberos 身份验证：
::: orderedlist
1.  为 AD 帐户获取 Kerberos ticket：
    ``` literallayout
    # kinit PI:EMAIL
    ```
2.  显示 ticket（可选）：
    ``` literallayout
    # klist
    ```
3.  使用 `talk_kerberos_auth_test`{.literal} 工具来测试身份验证：
    ``` literallayout
    # /usr/lib64/squid/negotiate_kerberos_auth_test proxy.ad.example.com
    ```
    如果助手工具返回令牌，则身份验证成功：
    ``` literallayout
    Token: YIIFtAYGKwYBBQUCoIIFqDC...
    ```
:::
:::
::: section
::: titlepage
# []{#configuring-the-squid-caching-proxy-server_deploying-web-servers-and-reverse-proxies.html#configuring-a-domain-deny-list-in-squid_configuring-the-squid-caching-proxy-server}在 Squid 中配置域拒绝列表 {.title}
:::
通常,管理员想要阻止对特定域的访问。这部分论述了如何在 Squid
中配置域拒绝列表。
::: itemizedlist
**先决条件**
-   squid 被配置，用户可以使用代理。
:::
::: orderedlist
**步骤**
1.  编辑 `/etc/squid/squid.conf`{.literal} 文件，并添加以下设置：
    ``` literallayout
    acl domain_deny_list dstdomain "/etc/squid/domain_deny_list.txt"
    http_access deny all domain_deny_list
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    在允许访问用户或客户端的第一个 `http_access allow`{.literal}
    语句前面添加这些条目。
    :::
2.  创建 `/etc/squid/domain_deny_list.txt`{.literal}
    文件，并添加您要阻止的域。例如，要阻止对包括子域的
    `example.com`{.literal} 的访问，并阻止对 `example.net`{.literal}
    的访问，请添加：
    ``` literallayout
    .example.com
    example.net
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    如果您在 squid 配置中引用了
    `/etc/squid/domain_deny_list.txt`{.literal}
    文件，则此文件不能为空。如果文件为空，Squid 无法启动。
    :::
3.  重启 `squid`{.literal} 服务：
    ``` literallayout
    # systemctl restart squid
    ```
:::
:::
::: section
::: titlepage
# []{#configuring-the-squid-caching-proxy-server_deploying-web-servers-and-reverse-proxies.html#configuring-the-squid-service-to-listen-on-a-specific-port-or-ip-address_configuring-the-squid-caching-proxy-server}将 Squid 服务配置为监听特定端口或 IP 地址 {.title}
:::
默认情况下，Squid 代理服务监听所有网络接口上的 `3128`{.literal}
端口。这部分论述了如何更改端口并配置 Squid 在特定 IP 地址中监听。
::: itemizedlist
**先决条件**
-   `squid`{.literal} 软件包已安装。
:::
::: orderedlist
**步骤**
1.  编辑 `/etc/squid/squid.conf`{.literal} 文件：
    ::: itemizedlist
    -   要设置 Squid 服务监听的端口，请在 `http_port`{.literal}
        参数中设置端口号。例如，要将端口设置为
        `8080`{.literal}，请设置：
        ``` literallayout
        http_port 8080
        ```
    -   要配置 Squid 服务监听的 IP 地址，请在 `http_port`{.literal}
        参数中设置 IP 地址和端口号。例如，要配置 Squid 只监听
        `192.0.2.1`{.literal} IP 地址的 `3128`{.literal} 端口，请设置：
        ``` literallayout
        http_port 192.0.2.1:3128
        ```
        在配置文件中添加多个 `http_port`{.literal} 参数，来配置 Squid
        监听多个端口和 IP 地址：
        ``` literallayout
        http_port 192.0.2.1:3128
        http_port 192.0.2.1:8080
        ```
    :::
2.  如果您配置了 Squid 使用不同的端口作为默认值(`3128)`{.literal}：
    ::: orderedlist
    1.  在防火墙中打开端口：
        ``` literallayout
        # firewall-cmd --permanent --add-port=port_number/tcp
        # firewall-cmd --reload
        ```
    2.  如果您在 enforcing 模式下运行 SELinux，请将端口分配给
        `squid_port_t`{.literal} 端口类型定义：
        ``` literallayout
        # semanage port -a -t squid_port_t -p tcp port_number
        ```
        如果您的系统中没有 `semanage`{.literal} 工具，请安装
        `policycoreutils-python-utils`{.literal} 软件包。
    :::
3.  重启 `squid`{.literal} 服务：
    ``` literallayout
    # systemctl restart squid
    ```
:::
:::
::: section
::: titlepage
# []{#configuring-the-squid-caching-proxy-server_deploying-web-servers-and-reverse-proxies.html#_additional_resources_3}其他资源 {.title}
:::
::: itemizedlist
-   有关您可以在`/etc/squid/squid/squid.conf.conf`{.literal}文件中设置的所有配置参数的列表以及详细描述，请参阅`usr/share/doc/squid-/squid.confdocumented`{.literal}文件。
:::
:::
:::