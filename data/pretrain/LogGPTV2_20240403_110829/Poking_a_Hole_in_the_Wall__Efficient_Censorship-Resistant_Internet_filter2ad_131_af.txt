withstand a limited range of network perturbations before being
torn down due to QoS constraints. We bound the network pertur-
bations to inject in the network according to the ranges suggested
by this study. Next, we detail the results of our experiments.
Latency variation of the covert channel: We delay packets so
as to achieve a round-trip-time (RTT) of 15ms, 50ms, and 100ms
between Protozoa endpoints (VM1 - VM3). These values emulate re-
gional, intra-continental, and inter-continental RTTs [58, 72], while
being kept within the bounds of 300ms, recommended for estab-
lishing real-time multimedia sessions with acceptable quality [67].
Our results are as follows. Figure 9 a) illustrates the breakdown of
throughput achieved by our prototype as the RTT between Protozoa
endpoints increases. It shows that the latency introduced between
endpoints does not impact the throughput obtained by Protozoa. In
particular, the throughput remains at an average of about 1420Kbps
in the three congurations tested. Figure 10 a) presents the ROC
curves obtained by the classier when attempting to detect Protozoa
in a network with dierent RTT congurations. We see that the
classier obtains a maximum AUC of 0.59. Thus, irrespective of
the latency introduced between endpoints, the adversary does not
obtain an advantage at distinguishing Protozoa ows.
Bandwidth variation of the covert channel: We symmetrically
limit the bandwidth of the link to 1500Kbps, 750Kbps, and 250Kbps,
beyond the unrestricted bandwidth conditions assumed in our base-
line case. In these conditions, WebRTC streams use approximately
80% of the available bandwidth, agreeing with other studies [37].
Figure 9 b) shows that the achievable throughput tends to de-
crease as bandwidth is more scarce. For instance, while Proto-
zoa’s throughput averages 975Kbps when bandwidth is capped
at 1500Kbps, it drops to 460Kbps at 750Kbps, and attains an average
91Kbps when bandwidth is only 250Kbps. This eect is expected
since the constrained amount of bandwidth leads to the decrease of
frame rates and forces the downgrade of video resolution and en-
coded frame size, thus reducing the available space for embedding
covert data. For instance, a 250Kbps bandwidth cap only allows a
WebRTC stream to obtain ⇡25 FPS at a low 480x270 resolution [37].
As for resistance to trac analysis, the AUC in Figure 10 b)
reveals that the bandwidth variation does not provide sucient
information for the classier to accurately distinguish between
legitimate and Protozoa connections, peaking at 0.65 AUC when
the bandwidth is limited to 1500Kbps.
Packet loss rate variation of the covert channel: We assess
the properties of Protozoa when the media channel is subjected
to packet losses. Following the experiments of Jansen et al. [37],
we drop 2%, 5%, and 10% of the packets pertaining to WebRTC
Session 1A: Anonymous Routing and Censorship CCS '20, November 9–13, 2020, Virtual Event, USA43Figure 11: Throughput and trac analysis resistance ob-
tained while varying the RTT between VM3 and VM4.
Figure 12: Throughput and trac analysis resistance ob-
tained while using dierent video proles.
connections. Each of these loss rates causes WebRTC’s congestion
control to increase sending rate (2%), slowly increase sending rate
(5%), and converging data rate to values leading to the tear-down
of the video stream (10%). Typical recommendations for real-time
media trac sit at no more than 1% packet loss [67].
Figure 9 c) shows that while Protozoa’s throughput is negatively
aected by increasing packet loss rates, our prototype is still able
to sustain an average throughput of 1130Kbps for packet loss rates
of 2% and of 360Kbps for a loss rate of 5%. While a 10% packet loss
substantially decreases the throughput to 160Kbps, we note that
Protozoa’s covert channel connections remained active and did not
break for the duration of the experiment.
Lastly, the results in Figure 10 c) show that Protozoa preserves
high-levels of trac analysis resistance when the network link
between Protozoa endpoints is subject to variable packet loss rates.
Latency variation at the last mile: We now focus on the impact
of the RTT between Protozoa’s proxy (VM3) and open Internet
services (VM4) to the network performance. Figure 11 b) shows
the breakdown of throughput achieved by Protozoa when the RTT
between VM1 and VM2 endpoints is set to 50ms and the last leg of
the connection to the Internet service ranges from 15ms to 100ms.
Similarly to our earlier experiments when varying the latency
between Protozoa endpoints, the throughput is not compromised
when latency increases between the Protozoa proxy and the Internet
service. The average throughput of our system is rather stable, at
around 1410Kbps, for the three tested congurations.
6.4 Varying Carrier Conditions
We also evaluate our system varying two carrier-specic conditions:
Varying video proles: This experiment aims to test whether
dierent video proles used as cover media aect the throughput
of our system. Such a question arises since variable bitrate video
encoders, such as the ones used in WebRTC (e.g. VP8), adjust the
amount of output data according to the complexity of encoded video
segments. To answer this question, we evaluate the performance
of the covert channel when established through the Chat, Coding,
Gaming, and Sports video proles in our baseline deployment.
Performance-wise, Figure 12b) depicts the throughput achieved
by Protozoa when using dierent video proles as cover media.
We see that our system achieves a similar average throughput
of approximately 1400Kbps for Chat, Gaming, and Sports media
ows, while reaching an average throughput of 530Kbps when
transmitting Coding media. These results concur to the observation
that a large portion of video frames remain static in live coding
Figure 13: Throughput and trac analysis resistance ob-
tained while using dierent WebRTC services.
b)
videos. Additionally, these numbers suggest that the throughput
is consistent within each baseline, achieving a maximum standard
deviation of 157Kbps across the Chat, Gaming, and Sports baselines.
In turn, Figure 12a) shows the ROC curves for the classier when
attempting to distinguish Protozoa connections conducted over the
dierent video proles. The classier achieves a similar AUC for all
proles (⇡0.6 AUC), suggesting that the resistance against trac
analysis is preserved irrespective of the video prole used as cover.
Varying WebRTC services: To assess whether the security and
performance properties of our system hold when media calls are es-
tablished over multiple WebRTC applications, we conducted further
experiments over two additional WebRTC services: a) coderpad.io
– a live coding interview application – and b) appr.tc – Google’s
bare-bones demo application based on the simple WebRTC WebAPI.
Figure 13a) depicts the ROC curves for the classier when in-
specting Protozoa streams established through coderpad.io and
appr.tc. The results show that the classier obtains an AUC of
0.58 for streams established over coderpad.io and an AUC of 0.60
for streams established over appr.tc. In both cases, we see that
Protozoa remains undetectable by a network eavesdropper.
As for the throughput when establishing a covert channel re-
sorting to the two alternative WebRTC applications, Figure 13b)
shows that Protozoa achieves an average throughput of 1420Kbps
for appr.tc and of 1388Kbps for coderpad.io, similar to what was
obtained with whereby.com, as presented previously in Section 6.2.
7 TESTING IN THE WILD
In this section, we test our system in multiple real-world settings.
First, we present the results of an experiment comprising the ex-
ecution of a set of typical workloads conducted by Internet users,
over Protozoa. Then, as proof of concept, we show that Protozoa is
able to evade the censorship apparatus of real-world adversaries
by using it to access censored content in China, Russia, and India.
Session 1A: Anonymous Routing and Censorship CCS '20, November 9–13, 2020, Virtual Event, USA44Application
A. Curl
B. Transmission
C. Mutt
D. Irssi
E. VLC
F. Firefox
Protocol
HTTP, FTP
BitTorrent
SMTP
IRC
HTTP
HTTP
Workload
Page transfer (16 MB) in 89s
File transfer (2GB) in 3h5m
Send email (1KB) in 5.5ms
Send text message (80B) in 0.44ms
Video streaming at 20/14 fps in 240p/480p
Web-surng session
Table 2: Real application workloads over Protozoa.
7.1 Testing with Real Application Workloads
We tested Protozoa with multiple networked applications as de-
picted in Table 2. We used the baseline setup presented in Section 6.2.
To tunnel the trac of applications that do not natively support a
SOCKS proxy, such as mutt, we leverage proxychains [62], a SOCKS
proxy wrapper, to redirect such trac through Protozoa.
First, we used Curl (A) over the covert channel to download les
with sizes ranging from 1KB to 256MB using both the HTTP and
FTP protocols. We also veried that Protozoa is able to uniformly
distribute the bandwidth of the covert channel among simultaneous
Curl connections. In order to test Protozoa’s covert channel on
a dierent transport protocol, we congured the Transmission
BitTorrent client (B) to download a popular Linux distribution ISO.
We also found Protozoa to be successful when operating email
– Mutt (C) – and instant-messaging – Irssi IRC chat client (D) –
applications. Additionally, we tested the ability to stream video
content over VLC (E). Lastly, we ran Firefox (F) over Protozoa to
navigate dierent web pages and to stream videos from YouTube,
conrming that Protozoa enables interactive web-surng tasks.
Overall, the results of our experiments show that Protozoa is
able to accommodate a number of common Internet applications,
including web-browsing, video streaming, or bulk data transfer.
7.2 Evading State-Level Adversaries
To test Protozoa’s ability to circumvent real-world censors, we ran
Protozoa in three geographical locations known to be active targets
of Internet censorship – China [6], Russia [60], and India [82].
First, we identied sets of web pages that are blocked for each
country [59, 68, 85]. We selected web pages in several categories:
gambling, pornography, news/politics, drug sale, and circumven-
tion tools. For each set, we veried that the web pages could not
be directly accessed (i.e., without using Protozoa) using Firefox
running on a server physically deployed in the respective country.
Then, we repeated this access after setting up Protozoa covert ses-
sions. In each server, we congured a Protozoa client to establish
a covert channel towards a Protozoa proxy located in LA, USA,
and used this channel to access the blocked web pages. To run
our experiments in said countries, we resorted to virtual private
servers (VPSs) in Shanghai, Moscow, and Mumbai, respectively, and
deployed the Protozoa bundle amounting to a total of 150 MB.
Blocking policies: We observed that browsing blocked websites
in Russia and India resulted in ISP blockpages, whereas in China
they would simply not load properly. A closer look at the trac
traces produced when trying to access blocked web pages revealed
that the GFW performs packet drops on connections aimed at black-
listed hosts. This observation is consistent with the behavior of the
GFW [6]. Browsing a blocked website from within Russia and India
showed that blocking policies implemented within datacenters are
WebRTC Application
appr.tc
aws.amazon.com/chime
codassium.com
coderpad.io
discordapp.com
gotomeeting.com
hangouts.google.com
messenger.com
slack.com
whereby.com
-
3
3
3
-
3
-
-
3
3
Reachability
China
Russia
India
3