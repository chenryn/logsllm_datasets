    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200202
    QtCore4!QMatrix::dy+0x48a8:
    6ba13321 8b448210        mov     eax,dword ptr [edx+eax*4+10h] ds:002b:ab69d290=????????
如果观察堆栈，可以看到执行情况如下：
    004f1a38 6ba3cb98 QtCore4!path_gradient_span_gen::path_gradient_span_gen+0x6a74
    004f1a3c c45adfbc 
    004f1a40 00000048 
    004f1a44 00000000 
    004f1a48 6f13830f verifier!DphCommitMemoryForPageHeap+0x16f
    004f1a4c 004f5cc8 
    004f1a50 00000000 
    004f1a54 00000000 
    004f1a58 00000000 
    004f1a5c 00000000 
    004f1a60 004f65a0 
    004f1a64 004f662c 
    004f1a68 00000000 
    004f1a6c 779eae8e ntdll!RtlAllocateHeap+0x3e
如果我们反汇编`6ba3cb98`，则可以看到以下反汇编代码，为该漏洞真正的起因所在：
    6ba3cb89 8b96b4000000    mov     edx,dword ptr [esi+0B4h]
    6ba3cb8f 8b4df4          mov     ecx,dword ptr [ebp-0Ch]
    6ba3cb92 52              push    edx
    6ba3cb93 8bd7            mov     edx,edi
    6ba3cb95 ff5580          call    dword ptr [ebp-80h]
    6ba3cb98 8b4e7c          mov     ecx,dword ptr [esi+7Ch]
    C pseudo code
    grad = *(&ptr_grad);
    if ( grad > 0.0099999998 )
    {
       input_value = grad_size(check, size, input);
       ptr_grad = *(input);
       ... cut here ...
我们在`6ba3cb89`地址上设置断点并观察`ESI+0xB4`，可以看到指向另一个位置的指针：
    0:000> r
    eax=00000000 ebx=00791878 ecx=00000005 edx=00793938 esi=cb07de18 edi=0000001c
    eip=6ba3cb89 esp=00791780 ebp=00791870 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200202
    QtCore4!path_gradient_span_gen::path_gradient_span_gen+0x6a65:
    6ba3cb89 8b96b4000000    mov     edx,dword ptr [esi+0B4h] ds:002b:cb07decc=cf69afbc
    0:000> dc esi+0B4h
    cb07decc  cf69afbc c0c0c000 00000000 00000100  ..i.............
    cb07dedc  c0c0c0c0 00000000 00000000 00000000  ................
    cb07deec  00000000 00000000 00000000 00000000  ................
    cb07defc  00000000 cf030fd0 00000000 00000000  ................
    cb07df0c  00000000 00000000 00000000 00000000  ................
    cb07df1c  c0c0c0c0 00000000 3ff00000 00000000  ...........?....
    cb07df2c  00000000 00000000 00000000 00000000  ................
    cb07df3c  00000000 00000000 3ff00000 00000000  ...........?....
    0:000> dc cf69afbc
    cf69afbc  c88baf80 d1326100 00000003 00000280  .....a2.........
    cf69afcc  0000055f 00000012 c0c0c0c0 1c3870e2  _............p8.
    cf69afdc  40ad870e 1c3870e2 40ad870e 00000000  ...@.p8....@....
    cf69afec  00000000 c0c0c0c1 6c1d12c0 00000000  ...........l....
    cf69affc  c0c0c0c0 ???????? ???????? ????????  ....????????????
    cf69b00c  ???????? ???????? ???????? ????????  ????????????????
    cf69b01c  ???????? ???????? ???????? ????????  ????????????????
    cf69b02c  ???????? ???????? ???????? ????????  ????????????????
    0:000> dc c88baf80
    c88baf80  00000001 0000001c 00000010 00000001  ................
    c88baf90  ff000000 ff800000 ff008000 ff808000  ................
    c88bafa0  ff000080 ff800080 ff008080 ff808080  ................
    c88bafb0  ffc0c0c0 ffff0000 ff00ff00 ffffff00  ................
    c88bafc0  ff0000ff ffff00ff ff00ffff ffffffff  ................
    c88bafd0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................
    c88bafe0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................
    c88baff0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................
从这里我们可以知道，代码实际上并没有从指针释放任何东西。一旦指向EDX，EDX将保留指向索引数组的指针：
    eax=00000000 ebx=00791878 ecx=00000005 edx=cf69afbc esi=cb07de18 edi=0000001c
    eip=6ba3cb8f esp=00791780 ebp=00791870 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200202
    QtCore4!path_gradient_span_gen::path_gradient_span_gen+0x6a6b:
    6ba3cb8f 8b4df4          mov     ecx,dword ptr [ebp-0Ch] ss:002b:00791864=d1326100
    0:000> dc cf69afbc
    cf69afbc  c88baf80 d1326100 00000003 00000280  .....a2.........
    cf69afcc  0000055f 00000012 c0c0c0c0 1c3870e2  _............p8.
    cf69afdc  40ad870e 1c3870e2 40ad870e 00000000  ...@.p8....@....
    cf69afec  00000000 c0c0c0c1 6c1d12c0 00000000  ...........l....
    cf69affc  c0c0c0c0 ???????? ???????? ????????  ....????????????
    cf69b00c  ???????? ???????? ???????? ????????  ????????????????
    cf69b01c  ???????? ???????? ???????? ????????  ????????????????
    cf69b02c  ???????? ???????? ???????? ????????  ????????????????
    0:000> dc c88baf80
    c88baf80  00000001 0000001c 00000010 00000001  ................
    c88baf90  ff000000 ff800000 ff008000 ff808000  ................
    c88bafa0  ff000080 ff800080 ff008080 ff808080  ................
    c88bafb0  ffc0c0c0 ffff0000 ff00ff00 ffffff00  ................
    c88bafc0  ff0000ff ffff00ff ff00ffff ffffffff  ................
    c88bafd0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................
    c88bafe0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................
    c88baff0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................
崩溃后的堆栈跟踪：
    0:000> kvL
     # ChildEBP RetAddr  Args to Child              
    00 012f18d4 6ba3cb98 cc53afbc 00000048 00000000 QtCore4!QMatrix::dy+0x48a8
    01 012f19d0 6b8143ef 00000000 012f1b78 012f1a5c QtCore4!path_gradient_span_gen::path_gradient_span_gen+0x6a74
    02 012f1a30 6b814259 0000002e 012f5bd0 00000000 QtCore4!QBrush::setMatrix+0x234
    03 012f5b14 6b8249a4 0000003b 012f5b68 cc780e18 QtCore4!QBrush::setMatrix+0x9e
    04 012f5b2c 6b80cc84 0000003b 012f5b68 cc780e18 QtCore4!QImage::rect+0x22b
    05 012f5b48 6b857ccc 0000003b 012f5b68 cc780e18 QtCore4!QTransform::inverted+0xec8
    06 012f64dc 6b81c55b 00000000 003c0000 00000000 QtCore4!QSvgFillStyle::setFillOpacity+0x1b59
    07 012f66c0 6b896844 012f6724 cc818ff0 0000001c QtCore4!QPainter::drawPixmap+0x1c98
    08 012f67b4 6d1e0fbd 012f69ec 012f66d4 012f6864 QtCore4!QPainter::drawImage+0x325
    09 012f67d4 6d0dd155 012f6a54 012f69ec 012f6864 kso!GdiDrawHoriLineIAlt+0x11a1a
    0a 012f67ec 6d0c8d88 012f69ec 012f68e0 012f6864 kso!kpt::PainterExt::drawBitmap+0x23
堆分析：
    0:000> !heap -p -a cc53afbc
        address cc53afbc found in
        _DPH_HEAP_ROOT @ 6731000