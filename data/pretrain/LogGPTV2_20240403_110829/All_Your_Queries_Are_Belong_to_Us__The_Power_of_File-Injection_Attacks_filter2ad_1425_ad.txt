(
e
t
a
r
y
r
e
v
o
c
e
R
100
90
80
70
60
50
40
30
1
10
20
Our attack, no padding
Our attack, β = 0.2
Our attack, β = 0.4
Our attack, β = 0.6
100
90
80
70
60
50
40
30
20
10
)
%
(
e
t
a
r
y
r
e
v
o
c
e
R
40
30
70
Leakage percentage (%)
50
60
80
90 100
1
10
20
40
30
70
Leakage percentage (%)
50
60
80
90 100
Figure 8: Recovering the keyword corresponding to a sin-
gle token when keyword padding is used.
Figure 9: Recovering the keywords corresponding to 100
tokens when keyword padding is used.
the recovery rate of our attacks degrades only slightly
when keyword padding is used.
Figure 10 compares the effectiveness of our attack to
the CGPR15 attack when keyword padding is used. The
recovery rate of the CGPR15 attack drops dramatically in
the presence of this countermeasure. In particular, it re-
covers only 57% of the tokens even with 100% file leak-
age when β = 0.2, and recovers nothing even with 100%
file leakage when β = 0.6. In contrast, our attack still
recovers almost the same number of keywords as when
no padding is used.
7 Extensions to Conjunctive SE
SE schemes supporting conjunctive queries allow the
client to request all files containing some collection of
keywords k1,k2, . . . ,k d. The naive way to support con-
junctive queries is to simply have the client issue queries
for each of these keywords individually; the server can
compute the set of file identifiers Si containing each key-
word ki and then take their intersection to give the fi-
nal result. Such an approach leaks more information
than necessary: specifically, it leaks each of S1, . . . ,S d
rather than the final result ∩Si alone. We refer to ∩Si as
the ideal access-pattern leakage for a conjunctive query,
and show attacks based only on such ideal leakage. We
remark, however, that no known efficient SE scheme
achieves ideal leakage. For example, the scheme by Cash
et al. [6] leaks S1,S1∩ S2,S1∩ S3, . . . ,S 1∩ Sd. Such addi-
tional leakage can only benefit our attacks.
Throughout this section, we assume the threshold
countermeasure is not used and so injected files can con-
tain any number of keywords. (Our attacks here could
be generalized as done previously in case the threshold
countermeasure is used.)
7.1 Queries with Two Keywords
We first present a non-adaptive attack to recover the key-
words used in a conjunctive query involving two key-
words. As in the non-adaptive attacks in prior sections,
the attacker can recover the keywords corresponding to
any future queries after injecting some initial set of files.
The idea is the following. Say the conjunctive search
query involves keywords k1 and k2, and we can parti-
tion the universe of keywords into two sets K1 and K2
with k1 ∈ K1 and k2 ∈ K2. We can then use a variant of
the binary-search attack in which we inject files gener-
ated by Inject Files(K1), where we additionally include
all keywords in K2. Since these files always contain k2,
the search results of the conjunctive query on these in-
jected files is exactly the same as the search results of k1
on these files, and we can thus recover k1 as before. We
can proceed analogously to recover k2.
2. This is done by simply letting Ki
The problem with the above is that we do not know,
a priori, how to partition K into sets K1,K2 as required.
Instead, we generate a sequence of log|K| partitions
1,Ki
{(Ki
2)} such that for some partition i it holds that
1 and k2 ∈ Ki
k1 ∈ Ki
1 be
the set of all keywords whose ith bit is 0, and Ki
2 be the
complement. Since k1 and k2 are distinct, they must dif-
fer on at least one position, say i, and satisfy the desired
separation property on the ith partition. By repeating the
attack described earlier for each partition, we obtain an
attack using log2|K| + log|K| injected files (after remov-
ing duplicates). The attack is described in detail in Fig-
ure 11.
Given ideal access-pattern leakage, the above attack
above only works for conjunctive queries involving two
keywords. For conjunctive searches using the SE scheme
of Cash et al. [6], though, the above attack can be ex-
tended to work for conjunctive queries involving any
number of keywords since the pairwise intersections are
leaked as described earlier.
716  25th USENIX Security Symposium 
USENIX Association
10
)
%
(
e
t
a
r
y
r
e
v
o
c
e
R
)
%
(
e
t
a
r
y
r
e
v
o
c
e
R
)
%
(
e
t
a
r
y
r
e
v
o
c
e
R
Our attack
CGPR15
100
90
80
70
60
50
40
30
20
10
1
10
20
40
30
70
Leakage percentage (%)
50
60
(a) β = 0.2
Our attack
CGPR15
100
90
80
70
60
50
40
30
20
10
1
10
20
40
30
70
Leakage percentage (%)
50
60
(b) β = 0.4
Our attack
CGPR15
100
90
80
70
60
50
40
30
20
10
1
10
20
40
30
70
Leakage percentage (%)
50
60
80
90 100
80
90 100
(c) β = 0.6
Figure 10: Recovering the keywords corresponding to
100 tokens when keyword padding is used, plotted for
different β .
7.2 Queries with Multiple Keywords
The attack in Section 7.1 only works for conjunctive
queries involving two keywords, and uses O(log2|K|) in-
jected files. Here we present a non-adaptive attack that
can recover conjunctive queries involving any number of
keywords using only O(log|K|) injected files, and still
assuming only ideal access-pattern leakage. In contrast
Let q be a conjunctive query with two keywords.
Algorithm F ← Inject Files Disjoint(K1,K2)
1: F ← Inject Files(K1).
2: Include all keywords in K2 in every file in F.
Algorithm F ← Inject Files Conjunctive(K)
1: for i = 1,2, . . . ,log |K| do
2:
Let Ki
1 contain keywords whose ith bit is 0, and
2 = K \ Ki
let Ki
1.
Generate file Fi
1 that contains all keywords in Ki
1
and file Fi
Fi
1 ← Inject Files Disjoint(Ki
Fi
2 ← Inject Files Disjoint(Ki
2 that contains all keywords in Ki
2.
1,Ki
2).
2,Ki
1).
2, for all i}.
80
90 100
3:
4:
5:
1,Fi
2,Fi
1,Fi
6: Output F = {Fi
Algorithm k ← Recover Conjunctive(q,K,F)
1: Let Rq = {ri
2} for i = 1, . . . ,log |K| be
the search result of query q on the files F de-
scribed above.
1,Ri
2,Ri
1,ri
1 nor Fi
2 is in the search
result (i.e., ri
2: Find i such that neither Fi
2 = 0).
1,Ki
1).
2,Ki
2).