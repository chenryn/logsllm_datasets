## PostgreSQL sharding : citus 系列1 - 多机部署（含OLTP(TPC-B)测试）- 含Citus MX模式  
### 作者                                                           
digoal                                                           
### 日期                                                           
2018-08-24                                                         
### 标签                                                           
PostgreSQL , citus , tpc-b , cn mx   
----                                                           
## 背景    
[《(TPC-H测试 SF=10) PostgreSQL 11 vs 10 vs Deepgreen》](../201808/20180823_01.md)  测试结果证明PG已经是一个HTAP数据库，可以同时满足OLTP，OLAP的需求。  
citus是PG的一个sharding插件，可以把PG变成一个分布式数据库。目前在苏宁有大量的生产应用跑在citus+pg的环境中。  
本文是多机部署与简单的测试。  
后面的篇章陆续添加:  HA，备份，容灾。最佳实践。性能测试。   
期望citus可以具备良好的TP能力，同时AP能力可以像GPDB一样扩展，使得PG如虎添翼。   
重点看结果：  
OLTP: citus(multi node) vs pg(single)  
OLAP: citus(multi node) vs Greenplum(multi node)   
## 环境  
(ECS 32核，128G内存，2TB 云盘) \* 9  
```  
host all all xxx.xxx.xxx.228/32 trust # coordinator node   
host all all xxx.xxx.xxx.224/32 trust # worker(data) node   
host all all xxx.xxx.xxx.230/32 trust # worker(data) node   
host all all xxx.xxx.xxx.231/32 trust # worker(data) node   
host all all xxx.xxx.xxx.225/32 trust # worker(data) node   
host all all xxx.xxx.xxx.227/32 trust # worker(data) node   
host all all xxx.xxx.xxx.232/32 trust # worker(data) node   
host all all xxx.xxx.xxx.226/32 trust # worker(data) node   
host all all xxx.xxx.xxx.229/32 trust # worker(data) node   
```  
CentOS 7.x x64  
PostgreSQL 10  
Citus 7.5  
## 一、OS 配置  
[《PostgreSQL 10 + PostGIS + Sharding(pg_pathman) + MySQL(fdw外部表) on ECS 部署指南(适合新用户) - 珍藏级》](../201710/20171018_01.md)    
### 1 sysctl    
注意某些参数，根据内存大小配置（已说明）    
含义详见      
[《DBA不可不知的操作系统内核参数》](../201608/20160803_01.md)      
```    
cat >>/etc/sysctl.conf  9.2的版本已大幅降低共享内存的使用，单位为字节。    
kernel.shmmni = 819200             
# 一共能生成多少共享内存段，每个PG数据库集群至少2个共享内存段    
net.core.netdev_max_backlog = 10000    
net.core.rmem_default = 262144           
# The default setting of the socket receive buffer in bytes.    
net.core.rmem_max = 4194304              
# The maximum receive socket buffer size in bytes    
net.core.wmem_default = 262144           
# The default setting (in bytes) of the socket send buffer.    
net.core.wmem_max = 4194304              
# The maximum send socket buffer size in bytes.    
net.core.somaxconn = 4096    
net.ipv4.tcp_max_syn_backlog = 4096    
net.ipv4.tcp_keepalive_intvl = 20    
net.ipv4.tcp_keepalive_probes = 3    
net.ipv4.tcp_keepalive_time = 60    
net.ipv4.tcp_mem = 8388608 12582912 16777216    
net.ipv4.tcp_fin_timeout = 5    
net.ipv4.tcp_synack_retries = 2    
net.ipv4.tcp_syncookies = 1        
# 开启SYN Cookies。当出现SYN等待队列溢出时，启用cookie来处理，可防范少量的SYN攻击    
net.ipv4.tcp_timestamps = 1        
# 减少time_wait    
net.ipv4.tcp_tw_recycle = 0        
# 如果=1则开启TCP连接中TIME-WAIT套接字的快速回收，但是NAT环境可能导致连接失败，建议服务端关闭它    
net.ipv4.tcp_tw_reuse = 1          
# 开启重用。允许将TIME-WAIT套接字重新用于新的TCP连接    
net.ipv4.tcp_max_tw_buckets = 262144    
net.ipv4.tcp_rmem = 8192 87380 16777216    
net.ipv4.tcp_wmem = 8192 65536 16777216    
net.nf_conntrack_max = 1200000    
net.netfilter.nf_conntrack_max = 1200000    
vm.dirty_background_bytes = 409600000           
#  系统脏页到达这个值，系统后台刷脏页调度进程 pdflush（或其他） 自动将(dirty_expire_centisecs/100）秒前的脏页刷到磁盘    
#  默认为10%，大内存机器建议调整为直接指定多少字节    
vm.dirty_expire_centisecs = 3000                 
#  比这个值老的脏页，将被刷到磁盘。3000表示30秒。    
vm.dirty_ratio = 95                              
#  如果系统进程刷脏页太慢，使得系统脏页超过内存 95 % 时，则用户进程如果有写磁盘的操作（如fsync, fdatasync等调用），则需要主动把系统脏页刷出。    
#  有效防止用户进程刷脏页，在单机多实例，并且使用CGROUP限制单实例IOPS的情况下非常有效。      
vm.dirty_writeback_centisecs = 100                
#  pdflush（或其他）后台刷脏页进程的唤醒间隔， 100表示1秒。    
vm.swappiness = 0    
#  不使用交换分区    
vm.mmap_min_addr = 65536    
vm.overcommit_memory = 0         
#  在分配内存时，允许少量over malloc, 如果设置为 1, 则认为总是有足够的内存，内存较少的测试环境可以使用 1 .      
vm.overcommit_ratio = 90         
#  当overcommit_memory = 2 时，用于参与计算允许指派的内存大小。    
vm.swappiness = 0                
#  关闭交换分区    
vm.zone_reclaim_mode = 0         
# 禁用 numa, 或者在vmlinux中禁止.     
net.ipv4.ip_local_port_range = 40000 65535        
# 本地自动分配的TCP, UDP端口号范围    
fs.nr_open=20480000    
# 单个进程允许打开的文件句柄上限    
# 以下参数请注意    
# vm.extra_free_kbytes = 4096000    
# vm.min_free_kbytes = 2097152   # vm.min_free_kbytes 建议每32G内存分配1G vm.min_free_kbytes  
# 如果是小内存机器，以上两个值不建议设置    
# vm.nr_hugepages = 66536        
#  建议shared buffer设置超过64GB时 使用大页，页大小 /proc/meminfo Hugepagesize    
# vm.lowmem_reserve_ratio = 1 1 1    
# 对于内存大于64G时，建议设置，否则建议默认值 256 256 32    
EOOF
```    
生效配置    
```    
sysctl -p    
```    
### 2 配置OS资源限制    
```    
cat >>/etc/security/limits.conf  > /etc/rc.local   /sys/kernel/mm/transparent_hugepage/enabled    
fi    
EOOF
```    
当场生效：    
```    
echo never > /sys/kernel/mm/transparent_hugepage/enabled    
```    
## 二、soft 配置  
```  
yum clean all  
```  
1、安装EPEL    
http://fedoraproject.org/wiki/EPEL    
```    
wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm    
rpm -ivh epel-release-latest-7.noarch.rpm     
```    
2、安装PostgreSQL yum    
https://yum.postgresql.org/repopackages.php  
```    
wget https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm  
rpm -ivh pgdg-centos10-10-2.noarch.rpm     
yum install -y postgresql10*  
```   
3、citus  
```  
echo "nameserver 8.8.8.8" >>/etc/resolv.conf   
curl https://install.citusdata.com/community/rpm.sh | sudo bash  
yum install -y citus75_10*  
```  
## disk  
```  
parted -s /dev/vdb mklabel gpt    
parted -s /dev/vdb mkpart primary 1MiB 100%    
mkfs.ext4 /dev/vdb1 -m 0 -O extent,uninit_bg -E lazy_itable_init=1 -T largefile -L data01    
mkdir /data01    
echo "LABEL=data01 /data01     ext4        defaults,noatime,nodiratime,nodelalloc,barrier=0,data=writeback    0 0" >> /etc/fstab    
mount -a    
mkdir /data01/pg10  
chown postgres:postgres /data01/pg10  
```  
## 三、env 配置  
```  
cat >>/var/lib/pgsql/.bash_profile  "    
export PGPORT=1921    
export PGDATA=/data01/pg10/pg_root\$PGPORT    
export LANG=en_US.utf8    
export PGHOME=/usr/pgsql-10  
export LD_LIBRARY_PATH=\$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:\$LD_LIBRARY_PATH    
export DATE=\`date +"%Y%m%d%H%M"\`  
export PATH=\$PGHOME/bin:\$PATH:.    
export MANPATH=\$PGHOME/share/man:\$MANPATH    
export PGHOST=\$PGDATA    