//8
---
## Page 90
'wxyz",//9
res = []string{}
func letterCombinations(digits string) []string {
if digits == "" {
return []string{}
res = []string{}
findCombination(&digits,0,
return res
func findcombination(digits *string, index int， s string) {
if index == len(*digits) {
res = append(res, s)
return
num = (*digits)[index]
letter := letterMap[num-‘0′]
fori:=0;i= 4 {
res = append(res, []int{uniqNums[i], uniqNums [i], uniqNums[i],
uniqNums [1]3)
for j := i + 1; j 2 {
res = append(res, []int{uniqNums[i], uniqNums[1], uniqNums [i],
uniqNums [j]})
if (uniqNums [j]3+uniqNums[1] == target) && counter[uniqNums[j]]> 2 {
res = append(res, []int{uniqNums[i], uniqNums[j], uniqNums[j],
[]swnnb un
if (uniqNums[j]2+uniqNums[1]*2 == target) && counter[uniqNums[j]] > 1
&& counter[uniqNums[i]] > 1 {
res = append(res, []int{uniqNums[i], uniqNums[i], uniqNums[j],
[]swnnbun
for k := j + 1; k  1 {
res = append(res, []int{uniqNums[i], uniqNums [i], uniqNums[j],
{[]swnnbun
}
f (uniqNums[j]*2+uniqNums[i]+uniqNums [k] == target) &&
counter[uniqNums[j]] > 1 {
res = append(res, []int{uniqNums[i], uniqNums [j], uniqNums [j],
uniqNums [k]3)
if (uniqNums[k]2+uniqNums[i]+uniqNums [j] == target) &&
counter[uniqNums[k]]> 1 {
res = append(res, []int{uniqNums[i], uniqNums [j], uniqNums [k],
{[] swnnbun
C := target - uniqNums[i] - uniqNums[j]
1- uniqNums [k]
if c>uniqNums[k]&& counter[c]>0 {
res = append(res, []int{uniqNums[i], uniqNums[j], uniqNums[k], c})
1
3
return res
---
## Page 93
19.RemoveNthNodeFromEndof List
题目
Given a linked list, remove the n-th node from the end of list and return its head.
Example:
Given 1inked 1ist: 1->2->3->4->5, and n = 2.
After removing the second node from the end, the linked 1ist becomes 1->2->3-
>5.
题目大意
删除链表中倒数第n个结点。
解题思路
这道题比较简单，先循环一次拿到链表的总长度，然后循环到要删除的结点的前一个结点开始删除操
作。需要注意的一个特例是，有可能要删除头结点，要单独处理。
针，2个指针都移动相同的距离。当一个指针移动到了终点，那么前一个指针就是倒数第n个节点了。
代码
package leetcode
* Definition for singly-linked list.
type ListNode struct {
valint
Next *ListNode
*/
//解法一
func removeNthFromEnd(head *ListNode, n int) *ListNode {
var fast, slow *ListNode
fast = head
s1ow = head
for i := 0; i  len {
return head
F
if n == len {
current := head
head = head.Next
current.Next = ni1
return head
current = head
i:=0
for current != nil {
if i == len-n-1 {
deleteNode := current.Next
current.Next = current.Next.Next
deleteNode.Next = ni1
break
i++
current = current.Next
return head
---
## Page 95
20.ValidParentheses
题目
Given a string containing just the characters ′, ), '′, ')', ′' and 7, determine if the input string is
valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.
Example 1:
Input: "()"
output: true
Example 2:
Input: "O) [] {}"
output: true
Example 3:
Input: "(}"
Output: false
Example 4:
Input: "([)]"
Output: false
Example 5:
---
## Page 96
Input: "{[]}"
output: true
题目大意
括号匹配问题
解题思路
遇到左括号就进栈push，遇到右括号并且栈顶为与之对应的左括号，就把栈顶元素出栈。最后看栈里面
还有没有其他元素，如果为空，即匹配。
需要注意，空字符串是满足括号匹配的，即输出true。
代码
package leetcode
func isvalid(s string) bool {
//空字符申直接返回true
if len(s) == 0 {
return true
stack := make([]rune, 0)
for _, v := range s {
3(,3. ==A) 11(.). == A) 11(.]. == A) !
stack = append(stack, v)
}else if ((v ==‘]') && len(stack) > 0 && stack[1en(stack)-1] =='[') 11
11（）,==[-() 0 && stack[len(stack)-1]=='{'){
stack = stack[:len(stack)-1]
}else{
return false
}
return len(stack) == 0
21.MergeTwoSortedLists
题目
---
## Page 97
Merge two sorted linked lists and return it as a new list. The new list should be madle by splicing
together the nodes of the first two lists.
Example:
Input: 1->2->4, 1->3->4
Output: 1->1>2->3=>4>4
题目大意
合并2个有序链表
解题思路
按照题意做即可。
代码
package leetcode
/☆
* Definition for singly-linked list.
 type ListNode struct {
valint
Next *ListNode
*/
func mergeTwoLists(11 *ListNode, 12 *ListNode) *ListNode {
if 11 == nil {
return 12
if 12 == ni1 {
return 11
if 11.val  0{
findGenerateParenthesis(lindex-1, rindex, str+"(", res)
---
## Page 99
F
if rindex > 0 && lindex4=>5,
1->3->4,
2->6
1
0utput: 1->1>2->3=>4=>4=>5>6
题目大意
合并K个有序链表
解题思路
借助分治的思想，把K个有序链表两两合并即可。相当于是第21题的加强版。
代码
package leetcode
☆
* Definition for singly-linked list.
type ListNode struct {
valint
Next *ListNode
---
## Page 100
func mergeKLists(1ists []*ListNode) *ListNode {
length := len(lists)
if length 2->3->4, you should return the list as 2->1->4->3.
题目大意
---
## Page 101
两两相邻的元素，翻转链表
解题思路
按照题意做即可。
代码
package leetcode
$+/
* Definition for singly-linked list.
type ListNode struct {
valint
Next *ListNode
func swapPairs(head *ListNode) *ListNode {
if head == nil l1 head.Next == nil {
return head
S := head.Next
var behind *ListNode
for head.Next != nil {
headNext := head.Next
if behind != nil && behind.Next != nil {
behind.Next = headNext
var next *ListNode