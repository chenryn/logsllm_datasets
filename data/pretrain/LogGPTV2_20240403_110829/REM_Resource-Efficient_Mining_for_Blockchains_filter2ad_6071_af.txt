### Peer-to-Peer and Blockchain References

[51] KOGIAS, E. K., JOVANOVIC, P., GAILLY, N., KHOFFI, I., GASSER, L., AND FORD, B. Enhancing Bitcoin security and performance with strong consistency via collective signing. In *25th USENIX Security Symposium (USENIX Security 16)* (2016), pp. 279–296.

[52] LEWENBERG, Y., SOMPOLINSKY, Y., AND ZOHAR, A. Inclusive block chain protocols. In *Financial Cryptography* (Puerto Rico, 2015).

[53] LI, Y., MCCUNE, J., NEWSOME, J., PERRIG, A., BAKER, B., AND DREWRY, W. Minibox: A two-way sandbox for x86 native code. In *2014 USENIX Annual Technical Conference (USENIX ATC 14)* (2014), pp. 409–420.

[54] LITECOIN PROJECT. Litecoin, open source P2P digital currency. https://litecoin.org, retrieved Nov. 2014.

[55] LOMBROZO, E., LAU, J., AND WUILLE, P. BIP141: Segregated witness (consensus layer). https://web.archive.org/web/20160521104121/https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki, 2015.

[56] MAZIERES, D. The Stellar consensus protocol: A federated model for Internet-level consensus. https://web.archive.org/web/20161025142145/https://www.stellar.org/papers/stellar-consensus-protocol.pdf, 2015.

[57] MCKEEN, F., ALEXANDROVICH, I., BERENZON, A., ROZAS, C. V., SHAFI, H., SHANBHOGUE, V., AND SAVAGAONKAR, U. R. Innovative instructions and software model for isolated execution. In *Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy* (2013), p. 10.

[58] MILLER, A., SHI, E., JUELS, A., PARNO, B., AND KATZ, J. Permacoin: Repurposing Bitcoin work for data preservation. In *Proceedings of the IEEE Symposium on Security and Privacy* (San Jose, CA, USA, 2014), IEEE.

[59] MILUTINOVIC, M., HE, W., WU, H., AND KANWAL, M. Proof of luck: An efficient blockchain consensus protocol. In *Proceedings of the 1st Workshop on System Software for Trusted Execution* (New York, NY, USA, 2016), SysTEX ’16, ACM, pp. 2:1–2:6.

[60] NAKAMOTO, S. Bitcoin: A peer-to-peer electronic cash system. http://www.bitcoin.org/bitcoin.pdf, 2008.

[61] NAYAK, K., KUMAR, S., MILLER, A., AND SHI, E. Stubborn mining: Generalizing selfish mining and combining with an eclipse attack. IACR Cryptology ePrint Archive 2015 (2015), 796.

[62] PASS, R., SEEMAN, L., AND SHELAT, A. Analysis of the blockchain protocol in asynchronous networks. Tech. rep., Cryptology ePrint Archive, Report 2016/454, 2016.

[63] PASS, R., AND SHI, E. Hybrid consensus: Efficient consensus in the permissionless model. Cryptology ePrint Archive, Report 2016/917, 2016. http://eprint.iacr.org/2016/917.

[64] POPPER, N. Central banks consider Bitcoin’s technology, if not Bitcoin. New York Times, Oct. 2016.

[65] ROSS, R., AND SEWELL, J. Foldingcoin white paper. https://web.archive.org/web/20161022232226/http://foldingcoin.net/the-coin/white-paper/, 2015.

[66] SAPIRSHTEIN, A., SOMPOLINSKY, Y., AND ZOHAR, A. Optimal selfish mining strategies in Bitcoin. CoRR abs/1507.06183 (2015).

[67] SIMON JOHNSON, VINNIE SCARLATA, CARLOS ROZAS, ERNIE BRICKELL, AND FRANK MCKEEN. Intel Software Guard Extensions: EPID Provisioning and Attestation Services, 2015.

[68] SOMPOLINSKY, Y., AND ZOHAR, A. Accelerating Bitcoin’s transaction processing. Fast money grows on trees, not chains. In *Financial Cryptography* (Puerto Rico, 2015).

[69] SWIFT, AND ACCENTURE. Swift on distributed ledger technologies. Tech. rep., SWIFT and Accenture, 2016.

[70] TRAMER, F., ZHANG, F., LIN, H., HUBAUX, J.-P., JUELS, A., AND SHI, E. Sealed-glass proofs: Using transparent enclaves to prove and sell knowledge. Cryptology ePrint Archive, Report 2016/635, 2016. http://eprint.iacr.org/2016/635.

[71] USER “QUANTUMMECHANIC”. Proof of stake instead of proof of work. https://web.archive.org/web/20160320104715/https://bitcointalk.org/index.php?topic=27787.0.

[72] WOOD, G. Ethereum: A secure decentralized generalized transaction ledger (EIP-150 revision). https://web.archive.org/web/20161019105532/http://gavwood.com/Paper.pdf, 2016.

[73] XU, Y., CUI, W., AND PEINADO, M. Controlled-channel attacks: Deterministic side channels for untrusted operating systems. In *Proc. IEEE Symp. Security and Privacy* (May 2015), pp. 640–656.

[74] YEE, B., SEHR, D., DARDYK, G., CHEN, J. B., MUTH, R., ORMANDY, T., OKASAKA, S., NARULA, N., AND FULLAGAR, N. Native Client: A sandbox for portable, untrusted x86 native code. In *Proceedings of the 30th IEEE Symposium on Security and Privacy* (May 2009), pp. 79–93.

[75] ZHANG, F., CECCHETTI, E., CROMAN, K., JUELS, A., AND SHI, E. Town crier: An authenticated data feed for smart contracts. In *Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security* (New York, NY, USA, 2016), CCS ’16, ACM, pp. 270–282.

[76] ZHANG, F., EYAL, I., ESCRIVA, R., JUELS, A., AND VAN RENESSE, R. REM: Resource-Efficient Mining for Blockchains. Cryptology ePrint Archive, Report 2017/179, 2017. http://eprint.iacr.org/2017/179.

### Tolerating Compromised SGX Nodes: Details

#### A.1 Mining Rate Estimation

We begin by discussing how to statistically infer the power of a CPU from its blocks in the blockchain. By reading the difficulty of each block in the main chain and the rate of blocks from a specific CPU, we can estimate a lower bound of that CPU’s power. This follows directly from the rate of its blocks. It is a lower bound because the CPU might not be working continuously, and the estimate’s accuracy increases with the number of available blocks.

Let \( C_{mi} \) be the blocks mined by miner \( m_i \) so far. \( C_{mi} \) may contain multiple blocks, perhaps with varying difficulties. Without loss of generality, we write the difficulty as a function of time, \( d(t) \). The difficulty is the probability for a single instruction to yield a win. Denote the power of the miner, i.e., its mining rate, by \( \text{rate}_i \). Therefore, in a given time interval of length \( T \), the number of blocks mined by a specific CPU obeys a Poisson distribution (since CPU rates are high and the win probability is small, it is appropriate to approximate a Binomial distribution by a Poisson distribution) with rate \( \text{rate}_i T d(t) \). Further, under the independence assumption, the mining process of a specific CPU is specified by a Poisson process with rate \( \lambda_i(t) = \text{rate}_i d(t) \), the product of the probability and the miner’s rate \( \text{rate}_i \).

There are many methods to estimate the mean of a Poisson distribution. For more details, refer to the full version [76]. Knowing the rates for all miners, the rate of the strongest CPU (\( \text{rate}_{\text{best}} \)) can be estimated. The challenge here is to limit the influence of adversarial nodes. To this end, instead of finding the strongest CPU directly, we approximate \( \text{rate}_{\text{best}} \) based on \( \text{rate}_\rho \) (e.g., \( f_{90\%} \)), namely the \( \rho \)-percentile fastest miner.

**Bootstrapping.** During the launch of a cryptocurrency, it could be challenging to estimate the mining power of the population accurately, potentially leading to poisoning attacks by an adversary. At this early stage, it makes sense to hardwire a system estimate of the maximum mining power of honest miners into the system and set conditions (e.g., a particular mining rate or target date) to estimate \( \text{rate}_{\text{best}} \) as we propose above. If the cryptocurrency launches with a large number of miners, an even simpler approach is possible before switching to \( \text{rate}_{\text{best}} \) estimation: We can cap the total number of blocks that any one node can mine, a policy we illustrate below (see Psimple).

#### A.2 Security Game Definition

We model REM as an interaction among three entities: a blockchain consensus algorithm, an adversary, and a set of honest miners. Their behavior together defines a security game, which we define formally below. We characterize the three entities respectively as (ideal) programs \( \text{progchain} \), \( \text{progA} \), and \( \text{progm} \), which we now define.

**Blockchain Consensus Algorithm (progchain).** A consensus algorithm determines which valid blocks are added to a blockchain \( C \). We assume that underlying consensus and fork resolution are instantaneous; loosening this assumption does not materially affect our analyses. We also assume that block timestamping is accurate. Timestamps can technically be forged at block generation, but in practice, miners reject blocks with large skews [18], limiting the impact of timestamp forgery. Informally, \( \text{progchain} \) maintains and broadcasts an authoritative blockchain \( C \). In addition to verifying that block contents are correct, \( \text{progchain} \) appends to \( C \) only blocks that are valid under a policy \( P \). We model the blockchain consensus algorithm as the (ideal) stateful program specified in Figure 11.

**Adversary A (progA).** In our model, an adversary \( A \) executes a strategy \( \Sigma_A \) that coordinates the \( k \) miners \( M_A \) under her control to generate blocks. Specifically:

```plaintext
progchain[P]
State:
C: the chain
On receive "init":
C := ∅
d := d0
Send (C, P, d) to all miners
On receive "submit" B from m:
if P(C, B) = accept:
    C ← C ∪ {B}
    d ← adjust(C, d)
Send (C, P, d) to all miners
```

Figure 11: The program for a blockchain. We omit details here on how difficulty \( d \) is set, i.e., how \( d_0 \) and adjust are chosen.

```plaintext
progA[ΣA]
On receive (C, P, d) from progchain
t̂, m̂ ← ΣA(MA, C, P, d)
if t̂ is not ⊥:
    wait until t̂
    send "submit" (t̂, m̂, d) to progchain
```

Figure 12: The program for an adversary \( A \) that controls \( k \) nodes \( M_A = \{m_{A1}, \ldots, m_{Ak}\} \).

**Definition 4. (Adversarial Strategy).** An adversarial strategy is a probabilistic algorithm \( \Sigma_A \) that takes in a set of identities, the current blockchain, and the policy, and outputs a timestamp and identity for block submission. Specifically, \( (M_A, C, t, P) \rightarrow (t̂, m̂) \in \mathbb{R}^+ \times M_A \).

In principle, \( \Sigma_A \) can have dependencies among individual node behaviors. In our setting, this would not benefit \( A \), however. As we don’t know \( M_A \) a priori, the only policies we consider operate on individual miner block-generation history. As a wrapper expressing implementation by \( A \) of \( \Sigma_A \), we model \( A \) as a program \( \text{progA} \), specified in Figure 12.

**Honest Miners (progm).** Every honest miner \( m \in M - M_A \) follows an identical strategy, a probabilistic algorithm denoted \( \Sigma_h \). In REM, \( \Sigma_h \) may be modeled as a simple algorithm that samples from a probability distribution on block mining times determined by \( \text{rate}(m) \) (specifically in our setting, an exponential distribution with rate \( \text{rate}(m) \)). We express implementation by honest miner \( m \) of \( \Sigma_h \) as a program \( \text{progm}[\Sigma_h] \) (Figure 13).

To understand the security of REM, we consider a security game that defines how an adversary \( A \) interacts with honest miners, a blockchain consensus protocol, and a policy given the above three ideal programs. Formally:

**Definition 5. (Security Game)** For a given triple of ideal programs \( (\text{progchain}[P], \text{progA}[\Sigma_A], \text{progm}[\Sigma_h]) \), and policy \( P \), a security game \( S(P) \) is a tuple \( S(P) = ((M, M_A, \text{rate}(·)); (\Sigma_A, \Sigma_h)) \).

We define the execution of \( S(P) \) as an interactive execution of programs \( (\text{progchain}[P], \text{progA}[\Sigma_A], \text{progm}[\Sigma_h]) \) using the parameters of \( S(P) \). As \( P \), \( \Sigma_A \), and \( \Sigma_h \) are randomized algorithms, such execution is itself probabilistic. Thus, we may view the blockchain resulting from the execution of \( S \) for an interval of time \( \tau \) as a random variable \( C_S(\tau) \).

A non-degenerate security game \( S \) is one in which there exists at least one honest miner \( m \) with \( \text{rate}(m) > 0 \).

#### A.3 Warmup Policy

As a warmup, we give a simple example of a potential block-acceptance policy. This policy just allows one block throughout the life of a CPU, as shown in Figure 14.

Clearly, an adversary cannot do better than mining one block. Denote this simple strategy \( \Sigma_{\text{simple}} \). For any non-degenerate security game \( S \), therefore, the advantage \( \text{Adv}_{S(P_{\text{simple}})}^A(\tau) = 1 \) as \( \tau \rightarrow \infty \). This policy is optimal in that an adversary cannot do better than an honest miner unconditionally. However, the asymptotic waste of this policy is 100%.

Another disadvantage of this policy is that it discourages miners from participating. Arguably, a miner would stay if the revenue from mining is high enough to cover the cost of replacing a CPU. But though a CPU is still valuable in other contexts even if it is blacklisted forever in this particular system, repurposing it incurs operational cost. Therefore, chances are this policy would cause a loss of mining power, especially when the initial miner population is small, rendering the system more vulnerable to attacks.

```plaintext
Psimple(C, B):
parse B → (τ, m, d)
if |C_m| > 0:
    output reject
else
    output accept
```

Figure 14: A simple policy that allows one block per CPU over its lifetime.

#### A.4 Adversarial Advantage

A block-acceptance policy depends only on the number of blocks by the adversary since its first one. Therefore, an adversary’s best strategy is simply to publish its blocks as soon as they won’t be rejected. Denote this strategy as \( \Sigma_{\text{stat}} \).

Clearly, an adversary will submit \( F^{-1}(1 - \alpha, t_d \cdot \text{rate}_{\text{best}}) \) blocks within \([0, t]\). On the other hand, the strongest honest CPU with rate \( \text{rate}_{\text{best}} \) mines \( t_d \cdot \text{rate}_{\text{best}} \) blocks in expectation. Recall that according to our Markov chain analysis, \( P_{\text{stat}} \) incurs false rejections for honest miners with probability \( w_h(\alpha) \), which further reduces the payoff for honest miners.

For a (non-degenerate) security game \( S \), in which \( A \) uses strategy \( \Sigma_{\text{stat}} \), the advantage is therefore:

\[ \text{Adv}_{S(P_{\alpha}^{\text{stat}})}^A = \lim_{t \to \infty} \frac{F^{-1}(1 - \alpha, t_d \cdot \text{rate}_{\text{best}})}{(1 - w_h(\alpha)) t_d \cdot \text{rate}_{\text{best}}} \]

**Theorem 1.** In a (non-degenerate) security game \( S \) where \( A \) uses strategy \( \Sigma_{\text{stat}} \),

\[ \text{Adv}_{S(P_{\alpha}^{\text{stat}})}^A = \frac{1}{1 - \text{Waste}(P_{\alpha}^{\text{stat}})} \]

**Proof.** Let \( \lambda = t_d \cdot \text{rate}_{\text{best}} \). It is known that as \( \lambda \) for a Poisson distribution goes to infinity, it converges in the limit to a normal distribution with mean and variance \( \lambda \). Therefore,

\[ \lim_{\lambda \to \infty} \frac{F^{-1}(1 - \alpha, \lambda)}{(1 - w_h(\alpha)) \lambda} = \lim_{\lambda \to \infty} \frac{\sqrt{\lambda} z_p + \lambda}{(1 - w_h(\alpha)) \lambda} = \frac{1}{1 - w_h(\alpha)} \]

Early in a blockchain’s evolution, the potential advantage of an adversary is relatively high. The confidence interval is wide at this point, allowing the adversary to perform frequent generation without triggering detection. As the adversary publishes more blocks, the confidence interval tightens, forcing the adversary to reduce her mining rate. This is illustrated by our numerical simulation in Section 4.3.