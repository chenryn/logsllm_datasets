title:Where's the FEEB? The Effectiveness of Instruction Set Randomization
author:Ana Nora Sovarel and
David Evans and
Nathanael Paul
The Effectiveness of Instruction Set Randomization
Where’s the FEEB? 
Ana Nora Sovarel             David Evans          Nathanael Paul
University of Virginia, Department of Computer Science
http://www.cs.virginia.edu/feeb
Abstract
Instruction Set Randomization (ISR) has been proposed as a promising defense against code injection attacks. It
defuses all standard code injection attacks since the attacker does not know the instruction set of the target machine.
A motivated attacker, however, may be able to circumvent ISR by determining the randomization key.
In this
paper, we investigate the possibility of a remote attacker successfully ascertaining an ISR key using an incremental
attack. We introduce a strategy for attacking ISR-protected servers, develop and analyze two attack variations, and
present a technique for packaging a worm with a miniature virtual machine that reduces the number of key bytes an
attacker must acquire to 100. Our attacks can break enough key bytes to infect an ISR-protected server in about six
minutes.  Our results provide insights into properties necessary for ISR implementations to be secure.
1.  Introduction
In a code injection attack, an attacker exploits a
software vulnerability (often a buffer overflow vulnera-
bility) to inject malicious code into a running program.
Since the attacker is able to run arbitrary code on the
victim’s machine, this is a serious attack which grants
the attacker all
the privileges of the compromised
process.  
In order for the injected code to have the intended
effect, the attacker must know the instruction set of the
target. Hence, a general technique for defusing code
injection attacks is to obscure the instruction set from
the attacker.
Instruction Set Randomization (ISR) is a
technique for accomplishing this by randomly altering
the instructions used by a host machine, application, or
execution. By changing the instruction set, ISR defuses
all code injection attacks.  ISR does not prevent all con-
trol flow hijacking attacks, though; for example, the
return-to-libc attack [18] does not depend on knowing
the instruction set. Much work has been done on the
general problem of mitigating code injection attacks,
and ISR is one of many proposed approaches.  Previous
advantages
papers
and
disadvantages of
to other defense
strategies [3, 12, 4].
In this paper, we focus on
evaluating ISR’s effectiveness in protecting a network
of vulnerable servers from a motivated attacker and
the
ISR relative
discussed
have
consider
implementation to be secure.
properties
necessary
for
an
ISR
stores
register
in which a special
Several implementations of ISR have been proposed.
Kc et al.’s design emphasized the possibility of an effi-
cient hardware implementation [12]. They considered a
processor
the
encryption key. When an instruction is loaded into the
processor, it is decrypted by XORing it with the value
in the key register. The processor provides a special
privileged instruction for writing into the key register
and a different encryption key is associated with each
process.
The code section of target executable is
encrypted with a random key, which is stored in the
executable header information so it can be loaded into
the key register before executing the program. Kc et al.
evaluated their design using the Bochs emulator
simulating an x86 processor with a 32-bit key register.  
Barrantes et al.’s design, RISE, is not constrained by
the need for an efficient hardware implementation [3].
Instead of using an encryption key register, they use a
key that can be as long as the program text and encrypt
each byte in the code text by XORing it with the
corresponding key byte. Encryption is done at load
time with a generated pseudo-random key, so each
process will have its own, arbitrarily long key. Their
implementation used an emulator built on Valgrind [16]
USENIX Association
14th USENIX Security Symposium
145
to decrypt instruction bytes with the corresponding key
bytes when they are executed.
Existing code injection attacks assume the standard
instruction set so they will fail against an ISR-protected
server. This paper presents a strategy a motivated
attacker who is aware of the defense may be able to use
to circumvent ISR by determining the key. Our attack
is inspired by Shacham et al.’s attack on memory
address space randomization [17]. Like ISR, memory
address space randomization attempts to defuse a class
of attacks by breaking properties of the target program
on which the attacker relies (in this case,
the location
of data structures and code fragments in memory).
Shacham et al. demonstrated that the 16-bit key space
used by PaX Address Space Layout Randomization
[15] could be quickly compromised by a guessing
attack.
Many of the necessary conditions for our attack are
similar to the conditions needed for Shacham et al.’s
memory randomization attack. However, since the key
space used in ISR defenses is too large for a brute force
search, we need an attack that can break the key
incrementally. Kc et al. mention the possibility that an
attacker might be able to guess parts of the key
independently based on the fact
that some useful
instructions in x86 architecture have only one or two
bytes [12].  Our attacks exploit this opportunity.
The key contributions of this paper are:
1. The first quantitative evaluation of the effective
security provided by ISR defenses against a
motivated adversary.
2. An identification of an avenue of attack available to
a remote attacker attempting to determine the en-
cryption key used on an ISR-protected server.
3. Design and implementation of a micro-virtual
machine that can be used to infect an ISR-protected
server using a small number of acquired key bytes.
4. An evaluation of the effectiveness of two types of
attack on a prototype ISR implementation.
5. Insights into the properties necessary for an ISR
implementation to be secure against remote attacks.
Next, we describe our
incremental key guessing
approach. Section 3 provides details on our attack and
analyzes its efficiency. Section 4 describes how an
attacker could use our attack to deploy a worm on a
network of ISR-protected servers. Section 5 discusses
the impact of our results for ISR system designers.
2.  Approach
The most difficult task in guessing a key incrementally
is to be able to notice a good partial guess. Suppose we
correctly guess the first two bytes of a four byte key.
We would not be able to determine whether or not the
guess is correct if the random instruction in the next
two bytes executes and causes the program to crash.
The result would be indistinguishable from an incorrect
guess of the first two bytes. Even if the next random
instruction is harmless, there is a high probability that a
subsequently executed instruction will cause the
program to crash in a way that is indistinguishable from
an incorrect guess.
Our approach to distinguish correct and incorrect
partial guesses is to use control
instructions. We
attempt to inject a particular control instruction with all
possible randomization keys. When the guess is correct
the execution flow changes in a way that is remotely
observable. For an incremental attack to work, the
attacker must be able to reliably determine if a partial
guess is correct.  
For each attempt, there are four possible outcomes: 
Apparently
Correct
Behavior
Success
False Positive
Correct Guess
Incorrect Guess
Apparently
Incorrect
Behavior
False Negative
Progress
a
correct guess would always
Ideally,
lead to
distinguishably “correct” behavior, and an incorrect
guess would always lead to distinguishably “incorrect”
behavior. Given sufficient knowledge of the target
system, we should be able to construct attacks where a
correct guess never produces an apparently incorrect
execution (barring exogenous events that would also
make normal requests fail). However, it is not possible
to design an attack with perfect recognition: some
incorrect guesses will produce behavior that is remotely
indistinguishable from that produced by a correct guess.
For example, an incorrect guess may decrypt
to a
harmless instruction, and some subsequently executed
instruction may
correct
execution behavior.
We present attacks based on two different control
instructions: return, a one-byte instruction, and jump, a
two-byte instruction. For both attacks, if the guess is
incorrect,
there is a high probability that executing
random instructions will cause the process to crash. If
the guess is correct, the attacker will observe different
apparently
produce
the
146
14th USENIX Security Symposium
USENIX Association
server behavior: recognizable output for the return
attack and an infinite loop for the jump attack.  
Next we describe conditions necessary for the attacks
to succeed, explain how each attack is done, and how
an incremental attack can be carried out on a large key.
For both attacks, there are situations where an incorrect
guess produces the same behavior as a correct guess
and complications that arise in guessing larger keys. In
Section 3, we discuss those issues in more detail and
analyze the expected number of attempts required for
each attack.
2.1 Requirements
In order for the attack to be possible, the attacker must
have some way of injecting code into the target system.
We assume the application is vulnerable to a simple
stack-smashing buffer overflow attack, although our
attack does not depend on how code is injected into the
randomized program.
It depends only on a vulnera-
bility that can be exploited to inject and execute code in
the running process.
Our attack is only feasible for vulnerabilities where the
attacker can inject code to a fixed memory location. In
a normal stack-smashing attack, the attacker sometimes
cannot determine the exact location where code will be
inserted because of variations in system libraries,
operating system patches and configurations [13]. A
common solution is to pad the injected code with nop
instructions, often referred to as a nop sled [2]. The
attack will succeed as long as the return address is
overwritten with an address that is in the range of
injected nop instructions. When building an attack
against an application protected by ISR, the attacker
cannot use this approach because the encryption masks
for the positions where nop instructions should be
placed are unknown. Another technique, called a
register spring [7], overwrites the return address with
the address of an instruction found in the application or
a library that will
to the
buffer, such as jmp esp or call eax. These instructions
are not likely to appear normally in the code, but it is
sufficient
the
instructions as operand bytes or overlapping bytes in
the code segment. Sapphire used a register spring
technique by jumping to a jmp esp found in sqlsort.dll
[10]. 
indirectly transfer control
to locate one of
for an attacker
The 32-bit or longer key typically used for ISR is too
large for a practical brute force attack, so we must
determine the key incrementally. The attacker must be
able to acquire enough key bytes to inject the malicious
code before the target program is re-randomized with a
different key. Since our attack will necessarily crash
processes on the target system, it requires either that
application executions use the same randomization key
each time the target application is restarted, or that the
target application uses the same key for many processes
it
forks. A typical application that exhibits this
property is a server that forks a process to serve each
client’s request.
Since failed guess attempts will
usually cause the executing process to crash,
the
attacker must have an opportunity to send many
requests to a server encrypted with the same key.  Many
servers
handle
simultaneous requests. For example, Apache (since
version 2.0), provides configuration options to allow
both multiple processes and multiple threads within
each process to handle simultaneous requests [1]. 
processes
to
create
separate
suggest
Kc et al.
is possible to determine the key.
Since our attack depends on being able to determine the
correct key mask from observing correct guesses, the
method used to encrypt
instructions must have the
property that once a ciphertext-plaintext pair is learned
it
The XOR
encryption technique used by RISE [3] trivially satisfies
this property.
two possible
randomization techniques: one uses XOR encryption
and the other uses a secret 32-bit transposition [12].
The XOR cipher, which is what
their prototype
implements, is vulnerable to our attack. Our attack
would not work without significant modification on the
32-bit transposition cipher. Learning one ciphertext-
plaintext pair would reduce the keyspace considerably,
but is not enough to determine the transposition. Thus,
several known plaintext-ciphertext pairs would be
needed to learn the transposition key. 
The final requirement stems from the remote attacker’s
need to observe enough server behavior to distinguish
between correct and incorrect guesses. If the attack
program communicates with the server using a TCP
connection it can learn when the process handling the
request crashes because the TCP socket is closed.
If
the key guess is incorrect,
the server process will
(usually) crash and the operating system will close the
socket. Hence, the server must have a vulnerability
along an execution path where normal execution keeps
a socket open so the remote attacker can distinguish
between the two behaviors.
If the normal execution
flow would close the connection with the client before
returning from the vulnerable procedure, the attacker is
not able to easily observe the effects of the injected
code. The return attack has additional requirements,
described in the next section.
In cases where those
USENIX Association
14th USENIX Security Symposium
147
requirements are not satisfied, the (slower) jump attack
can be used.
2.2 Return Attack
The return attack uses the near return (0xc3) control
instruction [11]. This is a one byte instruction, so it can
be found with at most 256 guesses. 
Figure 1 shows the stack layout before and after the
attack. The attack string preserves the base pointer,
replaces the original return address with the target
address where the injected code is located, and places
the original return address just below the overwritten
address. When the routine returns it restores the base
pointer
from the stack and jumps to the
overwritten return address, which is now the injected
instruction.
If the guess is correct, the derandomized
injected code is the return instruction. When it
executes, the saved return address is popped from the
stack and the execution continues as if the called
routine returned normally.
register
There is one important problem, however. When the
guess is correct, the return statement that is executed
pops an extra element from the stack. In Figure 1, the
star marks the position of the top of the stack in normal
case (left) and after the injected code is executed
successfully (right).
returning from the
vulnerable routine, the stack is compromised because
the top of the stack is now one element below where it
should be. This means the server is likely to crash soon
even after a correct guess since all the values restored
from the stack will be read from the wrong location.
After
Thus, the return attack can only be used to exploit a
vulnerability at a location where code that sends a
response to the client will execute before the compro-
mised stack causes the program to crash. Otherwise,
the attacker will not be able to distinguish between
correct and incorrect guesses since both result in server
crashes.
An obvious problem is caused by a
top of the stack