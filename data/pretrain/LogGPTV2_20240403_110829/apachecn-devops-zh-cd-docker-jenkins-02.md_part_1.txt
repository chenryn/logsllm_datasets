# 二、Docker 介绍
我们将通过介绍 Docker 来讨论现代持续交付流程应该是什么样子，Docker 是改变了 IT 行业和服务器使用方式的技术。
本章包括以下几点:
*   引入虚拟化和容器化的概念
*   为不同的本地和服务器环境安装 Docker
*   解释 Docker 工具包的体系结构
*   用 Dockerfile 构建 Docker 映像并提交更改
*   作为 Docker 容器运行应用
*   配置 Docker 网络和端口转发
*   引入 Docker 卷作为共享存储
# 什么是 Docker？
Docker 是一个开源项目，旨在使用软件容器帮助应用部署。这段引文来自 Docker 官方页面:
"Docker containers wrap a piece of software in a complete filesystem that contains everything needed to run: code, runtime, system tools, system libraries - anything that can be installed on a server. This guarantees that the software will always run the same, regardless of its environment."
因此，Docker 以类似于虚拟化的方式，允许将应用打包成可以在任何地方运行的映像。
# 容器化与虚拟化
没有 Docker，使用硬件虚拟化(通常称为虚拟机)可以实现隔离和其他好处。最受欢迎的解决方案是 VirtualBox、VMware 和 Parallels。虚拟机模拟计算机体系结构，并提供物理计算机的功能。如果每个应用都作为单独的虚拟机映像交付和运行，我们就可以实现应用的完全隔离。下图展示了虚拟化的概念:
![](img/020d670e-74d0-41e8-af9d-8598b12046c2.png)
每个应用都作为一个独立的映像启动，包含所有依赖项和一个客户操作系统。映像由虚拟机管理程序运行，虚拟机管理程序模拟物理计算机体系结构。这种部署方法得到了许多工具(如游民)的广泛支持，并专用于开发和测试环境。然而，虚拟化有三个明显的缺点:
*   **低性能**:虚拟机模拟整个计算机架构来运行来宾操作系统，因此每个操作都有相当大的开销。
*   **高资源消耗**:仿真需要大量的资源，必须针对每个应用分别进行。这就是为什么在标准的台式计算机上，只有少数应用可以同时运行。
*   **大映像大小**:每个应用都是用完整的操作系统交付的，所以在服务器上部署意味着发送和存储大量数据。
容器化的概念提出了一种不同的解决方案:
![](img/41c0db73-c10e-42f2-8fec-f45e28ef52f4.png)
每个应用都与其依赖项一起交付，但是没有操作系统。应用直接与主机操作系统接口，因此没有额外的客户操作系统层。它带来了更好的性能，并且不会浪费资源。此外，装运的 Docker 映像明显更小。
请注意，在容器化的情况下，隔离发生在主机操作系统的进程级别。然而，这并不意味着容器共享它们的依赖关系。它们中的每一个都有自己正确版本的库，如果其中任何一个被更新，它对其他的没有影响。为了实现这一点，Docker Engine 为容器创建了一组 Linux 名称空间和控制组。这就是为什么 Docker 安全性基于 Linux 内核进程隔离。这种解决方案虽然足够成熟，但可能被认为比虚拟机提供的基于操作系统的完全隔离稍不安全。
# 对 Docker 的需求
Docker 容器化解决了传统软件交付中的许多问题。让我们仔细看看。
# 环境
安装和运行软件很复杂。您需要决定操作系统、资源、库、服务、权限、其他软件以及应用所依赖的一切。然后，你需要知道如何安装它。更重要的是，可能会有一些冲突的依赖关系。那你会怎么做？如果您的软件需要升级一个库，而另一个库不需要，该怎么办？在一些公司，这样的问题是通过拥有应用的**类**来解决的，并且每个类都由一个专用的服务器来服务，例如，一个用于 Java 7 的 web 服务的服务器，另一个用于 Java 8 的批处理作业的服务器，等等。然而，这种解决方案在资源方面并不均衡，需要大量的 IT 运营团队来负责所有的生产和测试服务器。
环境复杂性的另一个问题是，它通常需要专家来运行应用。技术水平较低的人可能很难设置 MySQL、ODBC 或任何其他稍微复杂的工具。对于不作为特定于操作系统的二进制文件交付但需要源代码编译或任何其他特定于环境的配置的应用来说，尤其如此。
# 隔离
保持工作空间整洁。一个应用可以改变另一个应用的行为。想象一下会发生什么。应用共享一个文件系统，因此，如果应用 A 向错误的目录写入一些内容，应用 B 将读取不正确的数据。它们共享资源，所以如果应用 A 出现内存泄漏，它不仅可以冻结自身，还可以冻结应用 B，它们共享网络接口，所以如果应用 A 和 B 都使用端口`8080`，其中一个就会崩溃。隔离也涉及到安全方面。运行有问题的应用或恶意软件会对其他应用造成损害。这就是为什么将每个应用保存在单独的沙箱中是一种安全得多的方法，这限制了对应用本身的损害影响范围。
# 组织应用
服务器通常看起来很乱，运行着大量无人知晓的应用。您将如何检查服务器上运行的应用以及它们各自使用的依赖关系？它们可能依赖于库、其他应用或工具。没有详尽的文档，我们所能做的就是查看正在运行的进程并开始猜测。Docker 通过将每个应用作为一个可以列出、搜索和监控的独立容器来组织事情。
# 轻便
写一次，跑哪儿，一边说着口号一边宣传 Java 的最早版本。事实上，Java 很好地解决了可移植性问题；但是，我仍然可以想到一些失败的情况，例如，不兼容的本机依赖关系或旧版本的 Java 运行时。而且，并不是所有的软件都是用 Java 编写的。
Docker 将可移植性的概念提升了一个层次；如果 Docker 版本兼容，则无论编程语言、操作系统或环境配置如何，随附的软件都可以正常工作。因此，Docker 可以用口号来表达，运送整个环境，而不仅仅是代码。
# 小猫和牛
传统软件部署和基于 Docker 的部署之间的区别经常用小猫和牛的类比来表达。每个人都喜欢小猫。小猫很独特。每个都有自己的名字，需要特殊对待。小猫受到情感的对待。他们死的时候我们会哭。相反，牛的存在只是为了满足我们的需求。甚至形式牛也是独一无二的，因为它只是一群被一起对待的动物。没有命名，没有独特性。当然，它们是唯一的(就像每个服务器都是唯一的一样)，但这无关紧要。
这就是为什么 Docker 背后的想法最直接的解释是像对待牛一样对待你的服务器，而不是宠物。
# 替代容器化技术
Docker 不是市场上唯一可用的容器化系统。实际上，Docker 的最初版本是基于开源的**LXC**(**Linux Containers**)系统，这是一个容器的替代平台。其他已知的解决方案有 FreeBSD 监狱、OpenVZ 和 Solaris 容器。然而，Docker 超越了所有其他系统，因为它的简单性、良好的营销和创业方法。它可以在大多数操作系统下工作，允许你在不到 15 分钟的时间里做一些有用的事情，有很多简单易用的功能、好的教程、一个很棒的社区，并且可能是信息技术行业最好的标志。
# Docker 安装
Docker 的安装过程快速简单。目前，大多数 Linux 操作系统都支持它，并且它们中的许多都提供了专用的二进制文件。本机应用也很好地支持 Mac 和 Windows。然而，重要的是要理解 Docker 在内部是基于 Linux 内核及其细节的，这就是为什么在 Mac 和 Windows 的情况下，它使用虚拟机(xhyve 用于 Mac，Hyper-V 用于 Windows)来运行 Docker Engine 环境。
# Docker 的先决条件
Docker 要求对每个操作系统都是特定的。
MAC:
*   2010 年或更高版本，英特尔硬件支持**内存管理单元** ( **MMU** )虚拟化
*   macOS 10.10.3 约塞米蒂或更新版本
*   至少 4GB 内存
*   没有安装 4.3.30 版之前的 VirtualBox
**窗口**:
*   64 位 Windows 10 Pro
*   Hyper-V 软件包已启用
Linux:
*   64 位架构
*   Linux 内核 3.10 或更高版本
如果您的机器不符合要求，那么解决方案是使用安装了 Ubuntu 操作系统的 VirtualBox。这种变通方法虽然听起来很复杂，但并不一定是最糟糕的方法，尤其是考虑到在苹果和视窗系统中，Docker Engine 环境已经虚拟化了。此外，Ubuntu 是使用 Docker 最受支持的系统之一。
All examples in this book have been tested on the Ubuntu 16.04 operating system.
# 在本地计算机上安装
Docker 的安装过程是直截了当的，并在其官方网页上有很好的描述。
# Ubuntu Docker
[https://docs . docker . com/engine/installation/Linux/ubuntulinux/](https://docs.docker.com/engine/installation/linux/ubuntulinux/)包含如何在 Ubuntu 机器上安装 Docker 的指南。
在 Ubuntu 16.04 中，我执行了以下命令:
```
$ sudo apt-get update
$ sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
$ sudo apt-add-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial main stable'
$ sudo apt-get update
$ sudo apt-get install -y docker-ce
```
所有操作完成后，应安装 Docker。然而，目前唯一被允许使用 Docker 命令的用户是`root`。这意味着`sudo`关键字必须在每个 Docker 命令之前。
我们可以通过将其他用户添加到`docker`组来启用 Docker:
```
$ sudo usermod -aG docker 
```
成功注销后，一切都设置好了。然而，对于最新的命令，我们需要采取一些预防措施，不要将 Docker 权限授予不需要的用户，从而在 Docker 引擎中创建一个漏洞。这在服务器上安装的情况下尤其重要。
# Linux Docker
[https://docs.docker.com/engine/installation/linux/](https://docs.docker.com/engine/installation/linux/)包含大多数 Linux 发行版的安装指南。
# Mac Docker
[https://docs.docker.com/docker-for-mac/](https://docs.docker.com/docker-for-mac/)包含如何在 Mac 机器上安装 Docker 的分步指南。它与 Docker 组件集合一起交付:
*   带有 Docker 引擎的虚拟机
*   Docker 机器(用于在虚拟机上创建 Docker 主机的工具)
*   复合 Docker
*   Docker 客户端和服务器
*   一个图形用户界面应用
The Docker Machine tool helps in installing and managing Docker Engine on Mac, Windows, on company networks, in data centers, and on cloud providers such as AWS or Digital Ocean.
# Windows
[https://docs.docker.com/docker-for-windows/](https://docs.docker.com/docker-for-windows/)包含如何在 Windows 机器上安装 Docker 的分步指南。它与类似于 Mac 的 Docker 组件集合一起交付。
The installation guides for all supported operating systems and cloud platforms can be found on the official Docker page, [https://docs.docker.com/engine/installation/](https://docs.docker.com/engine/installation/).
# 测试 Docker 安装
无论您选择了哪种安装(苹果、视窗、Ubuntu、Linux 或其他)，Docker 都应该已经设置好并准备好了。最好的测试方法是运行`docker info`命令。输出消息应该类似于下面的消息:
```
$ docker info
Containers: 0
 Running: 0
 Paused: 0
 Stopped: 0
 Images: 0
...
```
# 在服务器上安装
为了通过网络使用 Docker，可以利用云平台提供商，也可以在专用服务器上手动安装 Docker。
在第一种情况下，Docker 配置因平台而异，但在专门的教程中总是有很好的描述。大多数云平台都支持通过用户友好的网络界面创建 Docker 主机，或者描述要在其服务器上执行的确切命令。
第二种情况(手动安装 Docker)需要一些评论。
# 专用服务器
在服务器上手动安装 Docker 与本地安装没有太大区别。
需要两个额外的步骤，包括设置 Docker 守护程序监听网络套接字和设置安全证书。
让我们从第一步开始。默认情况下，由于安全原因，Docker 通过只允许本地通信的非联网 Unix 套接字运行。有必要在选定的网络接口插座上添加监听功能，以便外部客户端可以连接。[https://docs.docker.com/engine/admin/](https://docs.docker.com/engine/admin/)详细描述了每个 Linux 发行版所需的所有配置步骤。
在 Ubuntu 的情况下，Docker 守护进程是由 systemd 配置的，所以为了改变它是如何启动的配置，我们需要修改`/lib/systemd/system/docker.service`文件中的一行:
```
ExecStart=/usr/bin/dockerd -H :2375
```
通过更改这一行，我们可以通过指定的 IP 地址访问 Docker 守护程序。系统配置的所有细节可以在[https://docs.docker.com/engine/admin/systemd/](https://docs.docker.com/engine/admin/systemd/)找到。
服务器配置的第二步涉及 Docker 安全证书。这使得只有通过证书验证的客户端才能访问服务器。Docker 证书配置的全面描述可在[https://docs.docker.com/engine/security/https/](https://docs.docker.com/engine/security/https/)找到。这一步不是严格要求的；但是，除非您的 Docker 守护程序服务器在防火墙网络内部，否则它是必不可少的。
If your Docker daemon is run inside the corporate network, you have to configure the HTTP proxy. The detailed description can be found at [https://docs.docker.com/engine/admin/systemd/](https://docs.docker.com/engine/admin/systemd/).
# 运行 Docker hello world >
Docker 环境已经设置就绪，因此我们可以开始第一个示例。
在控制台中输入以下命令:
```