set of subscribers continuous access to the latest token (i.e., ht
i) = h(cid:48)
i as:
j+1) = SEKj+1,with H( j−i+1)(h(cid:48)
A subscriber decrypts the current data encryption key
ENCSEKj+1(DEKj+1) given the current token h j+1 and the
opening token h(cid:48)
KDF(h j+1||h(cid:48)
j+1 (1)
with H as a hash function. The secondary token is stored
along the long-term per principal key information (§4).
Revocation. To revoke data stream access, the data owner
updates the distribution key (i.e., crypto-based access) and
issues a state update transaction (i.e., authorization) to evict
the revoked service. The transaction includes a new distri-
bution key KD(cid:48) contained in the encrypted key information
per subscriber. Hereafter, the new data encryption key is only
available to the remaining authorized subscribers, protected
with the new distribution key. The transaction conﬁrmation
time of the underlying blockchain determines the delay until
Droplet’s authorization state machine is updated. The end-to-
end encryption, however, prevents revoked users from access-
ing new data instantly, due to the preceding key rotation.
from the main chain), such that they can compute the current
decryption key. If we were to encrypt the current hash token
for each subscriber individually, this would incur communi-
cation/computation overheads in O(s), given s subscribers.
To reduce this overhead, we distribute the latest dual-key
regression token ht within a digitally signed and encrypted
lockbox. Authorized subscribers obtain the long-term distri-
bution key KD to open the lockbox. This approach is more
efﬁcient than resorting to per subscriber encryption. When
sharing access to a data stream, we share the distribution key
encrypted for the new subscriber through the authorization
service (§4). While data encryption keys and hence dual-key
regression tokens are frequently updated at a deﬁned interval,
the distribution key is only updated after an access revocation
event, as detailed next.
With the newly issued transaction, the global access permis-
sion state is updated (§4). Droplet cryptographically prevents
any future access to new data by the evicted subscriber. Any
future access requests by the evicted subscriber to old data
are declined during authorization.
Compact Hash Chains. Our key management, speciﬁcally
dual-key regression, relies heavily on hash chains. The under-
lying chains can grow quickly due to frequent key updates.
Given the memory-constraints of IoT devices, we revert to a
combination of re-computing on-demand and storing a seg-
ment of the hash chain in memory, to achieve fast and efﬁcient
key rotations. We leverage hierarchical hash chains [61] which
√
maintain the same security features as traditional hash chains
but reduce the worst-case compute time to O(
n). In our
evaluation in §8.1, we show how compact chains allow for a
two-orders of magnitude key rotation speed-up.
4 Decentralized Authorization Service
So far, we have covered Droplet’s encryption-based access
control mechanism. Now we describe Droplet’s authoriza-
tion service which handles and manages access permissions.
2474    29th USENIX Security Symposium
USENIX Association
seed`hash()k0k1k2k3k4k5knseedh0h5key-gen()timet0tcurrenttientire streamintervalhash()h2h3h4hn..h0`h1`..h5`h4`h3`hn`primarysecondary h1h2`At a high level, through Droplet’s API, users can view their
data streams, the associated sharing policies, and storage in-
formation, and can set/edit access permissions accordingly.
Similar to today’s authorization frameworks, e.g., OAuth2,
our authorization service acts on behalf of users, forgoing
direct interaction of individual services with the data owner.
Storage providers query Droplet’s authorization agent directly
to validate access requests. Moreover, principals query the
authorization agent to retrieve authorization tokens. The au-
thorization agent falls under the same trust assumptions as the
storage node, which enforces the authorization verdict. This
means that the storage node can act maliciously, i.e., bypass
the agent’s authorization verdict, and hand out data to unau-
thorized parties. Similarly, an authorization agent can also act
maliciously. However, due to Droplet’s end-to-end encryption,
these violations do not compromise data conﬁdentiality (§6).
In our design, we employ a tamper-proof decentralized au-
thorization log to enable anyone to bootstrap and presume
the role of authorization agent and serve access permission
lookups in a decentralized and veriﬁable manner. We realize
the authorization log using a publicly veriﬁable blockchain
to maintain an accountable distributed access control system
without a central trusted entity. This allows us to move away
from a single authorization server issuing and verifying ac-
cess tokens, to where any resource owner can issue access
permissions and any node can verify it. We now describe the
owner-device pairing, blockchain-embedded access permis-
sions, and how we protect the privacy of principals.
Owner-Device Pairing. The blockchain ecosystem relies
on public key cryptography for identiﬁcation and authentica-
tion of the involved principals. The hash digest of the public
key serves as a unique pseudo-identity in the network. We
leverage this feature to allow IoT devices to securely and
autonomously interact with the storage service. This way we
overcome the hurdle of passwords and rely on public-key
crypto for authentication and authorization. During the boot-
strap phase of a new device, it creates a pair of public-private
keys locally, where the private key is stored securely and never
leaves the device. Through an initial two-way multisignature
registration transaction on the blockchain, Droplet allows
the binding of IoT devices (PKdevicei, SKdevicei) to the owner
(PKOwner, SKOwner). Henceforth, the owner can set access per-
missions (via the private key SKOwner) and the IoT devices are
permitted to store data (via the private key SKdevicei) securely.
The necessary keying material for encryption (§3) on the data
producer is also exchanged during the initial phase. Note that
the data owner’s private key is powerful in that it sets/updates
access permissions. Droplet assumes a data owner private key
management scheme to be in place (e.g., Human-Memorable
Password-Protected Secret Sharing, backed with hardware
security modules or multiple trusted devices [15, 63]), and
a key recovery mechanism to be employed for handling a
potential key loss (see §9).
In the event of device decommissioning, the new owner
Figure 5: Droplet’s authorization agent bootstraps the access
control state machine (consolidated into the AC DB) from the
transitions embedded in the decentralized log and accompa-
nied off-chain access policies (not depicted for simpliﬁcation).
must issue a new multisignature device-binding transaction,
to gain ownership of future data produced by the same de-
vice. Note that there is no need for the IoT device to interact
with the blockchain directly. The owner creates the raw mul-
tisignature registration transaction and uses an out-of-band
channel (e.g., Bluetooth Low Energy) to get the device’s sig-
nature. After adding her signature, she broadcasts the register
transaction to the network. Note that the channel between
the IoT device and owner must be secure, otherwise we risk
disclosure of the device’s private key. In the absence of an out-
of-band-channel or in the case where the device?s capabilities
are limited, for instance, lack of secure key storage, a secure
proxy can be leveraged to handle proper data serialization
(§5).
Access Permissions. We utilize the blockchain to store ac-
cess permissions in a secure, tamperproof, and time-ordered
manner. Access permissions are granted per data stream. Ini-
tially, the data owner issues a transaction including the stream
ID which creates the initial state. To change this state, e.g.,
grant read access permissions to a principal, the data owner
issues a subsequent transaction which holds, among others,
(i) the stream ID, (ii) the public key of the principal they want
to share their data with, (iii) the temporal scope of access (e.g.,
intervals of past or open-end subscription), and (iv) encrypted
keying material for data decryption (§3). For public key dis-
covery of users, Droplet can leverage decentralized identity
management solutions [38, 66, 84]. These efforts focus on es-
tablishing an open and standards-based decentralized identity
ecosystem, removing any reliance on centralized systems of
identiﬁers. Such solutions, e.g., Keybase [66], serve as a key
directory that maps a user’s online identities (e.g., Twitter,
Github) to their public key in a publicly veriﬁable manner.
The higher the dimensions of interlinked identities, the lower
the probability of identity fraud.
Once a request to store or retrieve data is received at a stor-
age node, it queries the Droplet’s authorization agent (§4.2)
for the corresponding access permissions, as illustrated in
Figure 5. To enforce the permissions, the storage node veri-
ﬁes the identity of the requesting user via a signature-based
authentication [31]. Data owners express and dynamically
adjust permissions through Droplet client, which interacts
with Droplet’s authorization log only (i.e., blockchain) and
not with individual services (i.e., asynchronicity). Data access
USENIX Association
29th USENIX Security Symposium    2475
ACDBstate updatesDecentralized Authorization Log (blockchain)!"#:register device!"$:	add principal!"':add/revoke Authorization Agentop_code,hashop_code,hashop_code,hashOwnerStream IDPrivate-Access-PolicyEncrypted KeysEntryFigure 6: Overview of access control transactions, which em-
bed transitions to the global access control state via an indi-
rection (i.e., hash to the off-chain Access Policy).
is enforced cryptographically through end-to-end encryption.
The storage node validates data access requests based on the
embedded access permissions in the authorization log. The
authorization log additionally protects storage nodes’ net-
work resources (i.e., bandwidth/memory) from unauthorized
users. For instance, this mitigates an attack, where malicious
parties ﬂood the network with download/storage requests of
large ﬁles. The storage node can terminate malicious ses-
sions (e.g., data scraping and storage spamming attacks) after
checking the access permissions (§4.2). Droplet supports
privacy-preserving access permissions and audits by autho-
rized entities, which we explain in §4.1.
Access Policy Indirections. Blockchain storage is scarce
and expensive, as it is replicated and maintained by the block-
chain network. This entails placing only the minimum neces-
sary logic in the blockchain. To keep the number and more
importantly the size of transactions as low as possible, our
design incorporates off-chain storage of the Access Policy, as
illustrated in Figure 6. Instead of holding the address informa-
tion of all services, the transaction includes an indirection to
the Access Policy via the hash digest of it. This allows manag-
ing access permissions with an unlimited number of services
in a single transaction. Besides, the Access Policy can now
contain advanced access control logic (e.g., XACML [4]),
such as access groups and delegating parties. Any change to
the Access Policy requires a new transaction. The hash digest
serves as a data pointer and, more importantly, protects the
integrity of the Access Policy. The Access Policy is stored
off-chain. The time until an access permission change comes
into effect is tied to the transaction conﬁrmation time of the
underlying blockchain, ranging from few seconds to minutes
depending on the underlying blockchain.
4.1 Privacy-Preserving Sharing
In public blockchains, users are represented through virtual
addresses, providing pseudonymity. However, advanced clus-
tering heuristics can potentially lead to the de-anonymization
of users [5, 77]. Access permissions in Droplet should be en-
forceable by storage nodes (i.e., verify authorization) and be
auditable by authorized parties. However, we want to protect
the privacy of sharing relationships from the public. To real-
ize this, we leverage dual-key stealth addresses. With stealth
addresses [36], we protect a principal’s privacy, from any
party who can view the access permissions, with regards to
the resources they are granted access to. Moreover, different
streams shared with the same principal are unlinkable. How-
ever, a data owner may learn whom they are sharing their
data with. Note that if there is no channel between the data
owner and data consumer to indicate requested or granted
access permissions, the consumer needs inevitably to scan the
permissions in Droplet’s access permission state machine to
identify any data that is shared with them.
Conceptually, each principal is represented by two public
keys (main and viewer keys: PKm, SKm, PKv, SKv), which
other parties use to generate a new unlinkable address PKnew.
The viewer private key SKv can be shared with an auditor
to audit the permissions. However, access to both main and
viewer private keys is required for data access, i.e., SKm and
SKv are needed to compute SKnew, which only the principal
is capable of (see B for technical details).
4.2 Access Control State Machine
Today, there are two main options developers can take for re-
alizing decentralized applications that employ a blockchain as
a ubiquitous trust network (i.e., a shared ground truth): (i) op-
erating a new blockchain, or (ii) embedding the application
logic into an existing secure blockchain deployment [81,105].
We opt for the latter where we embed our logic without alter-
nation of the underlying blockchain nor requiring the instanti-
ation of a new blockchain. This allows us to beneﬁt from an
existing blockchain’s security properties without introducing
and running a new blockchain. Note that Droplet’s state ma-
chine can alternatively employ a private authorization log, to
address use-cases with a different trust model or in a closed
ecosystem. We brieﬂy discuss the reasons why we opt for this
choice and detail on how we realize this efﬁciently.
Integrating a new application logic into a running block-
chain typically results in consensus-breaking changes and
hard forks, i.e., a new blockchain with only a subset of peers
enforcing the new logic. While necessary for speciﬁc appli-
cations, this results in parallel blockchains which may not
exhibit strong security properties due to a smaller network
of peers (e.g., Namecoin’s network became decentralized
with one mining group controlling the majority of hashing
power [3]). To beneﬁt from the security properties of a strong
and robust blockchain, new apps can embed their log of state
changes in transactions. This is in turn used to bootstrap the
global state in a secure and decentralized manner. We employ
virtualchains [3,81] to efﬁciently embed Droplet’s access con-
trol logic in an existing global blockchain. A virtualchain is
a fork*-consistent replicated state machine, allowing differ-
ent applications to run on top of any production blockchain,
without breaking the consensus. Droplet’s authorization agent
scans the underlying blockchain for the corresponding access
permission transactions and maintains the global state in a
database that can be queried for permissions of a given stream
and principal.
2476    29th USENIX Security Symposium
USENIX Association
Transaction ID (hash)InAddrOutAddrSignatureTransactionOP_RETURNDropletIDServiceAddrOPCodeStreamIDChunkMetadataAccess Control ListOwnerAddrStreamIDACLHashService1AddrKeyInfo1Service2AddrKeyInfo2ServicenAddrKeyInfon……Transaction ID (hash)TxInAddrTxOutAddrTransactionDropletIDOPCodeStreamIDChunkMetadataAccess PolicyOwnerAddrStreamIDAPAddr1 || time KeyingData1Addrn|| time KeyingDatan……Figure 7: Data streams chunked at deﬁned temporal intervals,
and cryptographically linked together. For record lookup, the
timestamp is mapped to the chunk identiﬁer.
5 Data Serialization
In Droplet’s data model, a data stream is divided into chunks
of predeﬁned time intervals (Figure 7); chunking and batching
are common techniques for time-series data [49, 58, 72, 111].
Although chunking prevents random access at the record level,
it results in a positive performance gain for data retrieval as