-H
如果
.B Vim
编译时 加入了 对 从右到左 书写的 文件 RIGHTLEFT 以及 Hebrew 键盘映射
的支持， 
.B Vim
会以 Hebrew 模式 运行, 比如 设置 'hkmap' 和 'rightleft' 选项. 不然
.B Vim
会 显示 一条 错误信息 并 终止.
.TP
-i {viminfo}
准许 使用 viminfo 文件, 这个 选项 设置 使用的 文件名, 默认的 是
"~/.viminfo". 用 "NONE" 文件名 也可以 跳过 使用 .viminfo 文件.
.TP
-L
同 -r 一样.
.TP
-l
Lisp 模式.
打开 'lisp' 和 'showmatch' 选项.
.TP
-m
禁止 修改文件. 设置 'write' 选项, 这样 就不能 写文件了.
.TP
-N
非兼容 模式. 设置 'compatible' 选项. 这样
.B Vim
会 表现得 更好, 就算 .vimrc 文件 不存在 也会 同 Vi 不兼容.
.TP
-n
禁止 交换文件, 这样 在崩溃后 就 不能 恢复 文件了. 对于 编辑
在很慢的 媒体中的 文件 很有好处 (比如软盘), 也可以 用 ":set uc=0"
禁止交换, 用 ":set uc=200" 开启 交换.
.TP
-o[N]
打开 N 个窗口. 如果没有 N, 为 每个文件 开一个 窗口.
.TP
-R
只读 模式.  设置 'readonly' 选项. 你 仍然 可以 编辑 缓冲区, 但是 不能
重写文件. 如果 你要 重写文件, 必须在 Ex 命令中 用惊叹号, 比如 ":w!".
-R 选项 隐含了 -n 选项 (见下). 'readonly' 选项 可以 用 ":set noro" 设置.
见 ":help 'readonly'".
.TP
-r
列出 交换文件, 显示 关于 恢复文件的 信息.
.TP
-r {file}
恢复 模式. 交换文件 是 用来 恢复 在 编辑过程中 崩溃了的 文件.
交换 文件名 是 被编辑文件名 后面 加上 ".swp". 见 ":help recovery".
.TP
-s
安静 模式. 只在 用 "Ex" 启动 或者 用了 "-e" 选项 才有用.
.TP
-s {scriptin}
读入 脚本文件 {scriptin}. 文件里的 字符 就像 你 直接 输入 一样的, 也
可以 用 ":source! {scriptin}" 命令 实现 这个功能. 如果 在 编辑器 结束前
就 读到了 文件尾, 就 接着 从键盘 读入.
.TP
-T {terminal}
告诉
.B Vim
你 用的 终端的 名字, 只有 当 不能 自动确定 的时候 才这样. 它 必须是
.B Vim
(builtin) 能辨认的 终端 或者是 在 termcap 或者 terminfo 文件中 定义了的.
.TP
-u {vimrc}
用 {vimrc} 文件 里的 命令 来初始化, 跳过 所有 其它的 初始化, 用 这个
来编辑 特殊类型的 文件. 也可以 用 "NONE" 来 跳过 所有初始化. 在 vim 中
用 ":help initialization" 查看 更多信息.
.TP
-U {gvimrc}
用 {gvimrc} 文件 里的 命令 来初始化 GUI, 跳过 所有 其它的 GUI 初始化, 也
可以 用 "NONE" 来跳过 所有 GUI 初始化. 在 vim 中 用 ":help gui-init" 查看
更多信息.
.TP
-V
冗长 显示. 显示 执行 初始化代码 和 读入的 文件, 并且 写 viminfo 文件.
.TP
-v
以 Vi 模式运行
.B Vim ,
就像 运行 "vi" 一样, 只有 运行 "ex" 时 才有用.
.TP
-w {scriptout}
所有 在
.B Vim
退出前 你键入的 字符 都会被 存入 {scriptout} 文件. 这 用来 创建一个
脚本文件, 你 可以用 "vim -s" 和 ":source!" 来使用. 如果 {scriptout} 存在, 会
把 字符 追加到 后面.
.TP
-W {scriptout}
同 -w 一样， 但是 是覆盖 原来的文件.
.TP
-x
写文件时 加密. 会提示你 输入密码.
.TP
-Z
受限 模式. 同运行 以 "r" 开头的 程序 同效.
.TP
--
表明 选项结束. 在此之后的 参数 都会被认为 是 文件名, 可以 用这个
来编辑 一个 以 '-' 开头 的文件.
.SH "在线帮助 (ON-LINE HELP)"
在
.B Vim
中键入 ":help" 来 获得 帮助. 用 ":help subject" 来 获得 关于 一个
特定主题的 帮助. 例如 用 ":help ZZ" 来 获得 关于 "ZZ" 的帮助.
用  和 CTRL-D 来 完成 帮助主题 (":help cmdline-completion").
可以 用 标记 从 一个地方 跳到 另一个 地方 (有点像 超文本连接, 见 ":help").
所有的 文档 都可以 这样 来浏览, 比如 ":help syntax.txt".
.SH "文件 (FILES)"
.TP 15
/usr/share/vim/vim56/doc/*.txt
.B Vim
文档文件. 用 ":help doc-file-list" 获得 完整的 列表.
.TP
/usr/share/vim/vim56/doc/tags
在 文档文件中 查找信息 用的 标签文件.
.TP
/usr/share/vim/vim56/syntax/syntax.vim
系统 语法 初始化 文件.
.TP
/usr/share/vim/vim56/syntax/*.vim
各种语言的 语法文件.
.TP
/usr/share/vim/vimrc
系统
.B Vim
初始化文件.
.TP
/usr/share/vim/gvimrc
系统 gvim 初始化文件.
.TP
/usr/share/vim/vim56/optwin.vim
":options" 命令 所用的 脚本文件, 这是个 查看 和 设置选项的 很好的 办法.
.TP
/usr/share/vim/vim56/menu.vim
gvim 的 系统菜单 初始化文件.
.TP
/usr/share/vim/vim56/bugreport.vim
用来 生成 错误报告的 脚本文件, 见 ":help bugs".
.TP
/usr/share/vim/vim56/filetype.vim
根据 文件名 来判定 文件类型 的 脚本文件, 见 ":help 'filetype'".
.TP
/usr/share/vim/vim56/scripts.vim
根据 文件内容 来判定 文件类型 的 脚本文件, 见 ":help 'filetype'".
.PP
最新 信息 参见 VIM 主页：
.br
\
.SH "参见 (SEE ALSO)"
vimtutor(1)
.SH "作者 (AUTHOR)"
Most of
.B Vim
的大部分 都是 Bram Moolenaar 在 很多人的 帮助下 完成的.
见 ":help credits".
.br
虽然 不大会有 最早的 代码存在, 但是
.B Vim
基于 Stevie 写的代码, 之后被 Tim Thompson，
Tony Andrews and G.R. (Fred) Walter 修改, 然后 才形成的.
.SH "错误 (BUGS)"
多半都有. 用 ":help todo" 看 已知问题的 列表.
.PP
注意 有些 被 报告为 错误的 事实上 是 应为 太相信 所有的 行为
都应该 同 Vi 一样, 如果 你因为 它 和 Vi 不一样 而 认为 它 是个
错误, 你 应该 好好 看看 vi_diff.txt 文件 (或者 在 Vim 中
键入 :help vi_diff.txt), 并且 看看 'compatible' 和 'cpoptions' 选项.
.SH "[中文版维护人]"
.B 唐友 
.SH "[中文版最新更新]"
.BR 2001/8/30
.SH "[中国Linux论坛man手册页翻译计划]"
.BI http://cmpp.linuxforum.net