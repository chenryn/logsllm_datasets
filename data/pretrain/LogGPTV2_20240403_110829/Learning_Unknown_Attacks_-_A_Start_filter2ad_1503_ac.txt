inputs can be stopped for short periods if the attacks are overwhelming the system.
Table 1.  Steps in Learning and Generlization of Unknown Attacks
No.
1.
2.
3.
4.
5.
Step Description
Determine if observed error is repeatable based on connection history
file since last rejuvenation. If repeatable, declare attack and continue.
If not, return.
Determine which connection request (or requests) from history file
caused the observed error.
Develop filter rule to block this connection request(s) pattern, test it,
and send to content filter. Also block the associated user ID and IP
address.
Characterize the observed attack (i.e., classify it according to
meaningful types).
Shorten the blocking filter, if possible.
a.
b.
Determine if the observed attack sequence has an initiating event
If the initiating event is smaller than the observed attack sequence,
shorten the blocking filter to block just the specific initiating event
Based on characterization and observed attack specifics, generalize
the blocking filter to protect against simple variants of the attack and
and test it.
test it.
Return.
6.
7.
5 Analysis of Apptoach, Implementation, and Results
Each step in the learning and generalization process can be implemented differently
for  efficiency.  For  example,  the  most  general  approach  to  identifying  an  unknown
attack once it has occurred is a search process (essentially “generate and test”) using
the Sandbox to establish truth [12]. Thus, Step 1 (determine  if  the  component  error
was the result of an attack) could be implemented by simply rerunning the recorded
service requests from the history log through the Sandbox. 
We have found that it is faster to run a model-based service request checker against
the  log  entries  to  eliminate  “obviously  correct”  requests  while  retaining  potentially
suspicious requests. The actual selection rules are discussed later in this section. This
approach  speeds  up  both  the  “Was  it  an  attack”  testing  and  the  subsequent  “Which
request(s)  is  the  attack”  testing  by  significantly  reducing  the  search  space.  Since  it
takes  significant  time  to  restart  a  failed  application  or  server,  this  is  important.
Generally, the more requests we can “test” analytically, rather than empirically in the
Sandbox, the faster the search process.
168
J.E. Just et al.
While  the  last  steps  (shorten  and  generalize  the  filter  rules)  can  be  viewed  as  a
search  process,  it  is  much  more  efficient  to  implement  it  using  a  knowledge-based
matching approach. That is the reason for the classification step just before it. Since it
is  impossible  to  work  with  “unknown”  attacks  as  a  whole,  we  are  working  on
meaningful  taxonomies  of  unknown  attacks  to  give  us  traction  on  the  problem  of
reducing the search space. These sub-classes  should  be more  amenable  to  informed
search approaches and, even if we cannot identify all sub-classes of unknown attacks,
we still obtain very useful search speed-up in the majority of practical cases. This is
discussed further in the next two sections.
Using  the  component  names  shown  in  Figure  4,  fault  and  intrusion  tolerance  are
provided by the following control flow: 
1. When the primary receives a request, it is forwarded to the MAC before it goes to
the web server. 
2. The MAC calls  the  Content  Filter  with  the  new  request  as  the  parameter.  It  also
assigns a serial number and time stamp to the request.
3. The Content Filter, which contains a list of all bad requests received to date, checks
the bad request list for a match with the new request. 
4. If there is a match, the Content Filter returns false to the MAC (meaning “reject the
request”); otherwise, it returns true (“accept request”).
5. The MAC returns the answer (reject or accept) to the primary where the request is
either forwarded to the web server or dropped as appropriate.
6. If the MAC received a true response from the Content Filter, it also forwards the
request  (with  serial  number  and  timestamp)  to  the  backup  server  so  the  process
pairs can be kept in sync.
7. Assuming  that  the  request  is  legitimate,  the  MAC  also  waits  for  each  server  to
process the request and then compares the return codes or times out if the response
takes  too  long.  If  there  is  a  mismatch  or  time  out,  the  MAC  response  is  policy
driven.  Under  most  circumstances,  it  will  remove  the  suspect  server  from  the
process pair and begin normal failover and recovery steps.
The  unknown  attack  identification  and  blocking  functions  are  performed  by
learning components highlighted in Figure 4. These consist of the Forensics Analyzer,
the  Sandbox,  the  Circular  Buffer  and  Event  Logs,  and  the  Content  Filter  and
Generalizer. 
The  Content  Filter  examines  each  service  request  to  determine  if  it  matches  a
known  bad  request  on  its  list  of  bad  requests  before  it  is  passed  to  the  primary  or
backup  web  servers.  The  Circular  Buffer  captures  the  last  N-minutes  of  complete
service requests from users to the critical servers while the event log captures sensor
and event (such as failure) data.
If MAC detects error, it initiates failover and asks the Forensics Analyzer to start
forensics. The MAC passes to it the history buffer, the state of the sensors and servers
that caused the failover, and any likely candidates for the bad request. The Forensics
Analyzer  tests  if  any  repeatable  attacks  are  present  in  Circular  Buffer  by  testing
suspicious requests in the Sandbox. If it determines that an attack has occured, it then
identifies  specific  attack  request(s),  and  develops  a  new  filter  rule  to  block  it.  The
Generalizer  improves  content  filter  rules  to  stop  simple  variants  of  some  types  of
attacks. More details on this are provided below.
Learning Unknown Attacks – A Start
169
Primary 
Primary 
Protection 
Protection 
Protection 
Wrapper
Wrapper
Wrapper
Filter / Redirect 
Filter / Redirect 
Filter / Redirect 
Wrapper
Wrapper
Wrapper
IIS
IIS
IIS
Integrity
Integrity
Sensors
Sensors
Network
Network
Sensors
Sensors
Enclave 
LAN & 
WAN
Firewall
Gateway
IP Switch
Host
Host
FGS Controller
Backup 
Backup 
Protection 
Protection 
Protection 
Wrapper
Wrapper
Wrapper
Filter / Redirect 
Filter / Redirect 
Filter / Redirect 
Wrapper
Wrapper
Wrapper
Apache
Apache
Apache
Integrity
Integrity
Sensors
Sensors
Network
Network
Sensors
Sensors
Host
Host
Application
Application
Monitor
Monitor
Application
Application
Monitor
Monitor
Monitor
Monitor
Monitor
Monitor
Policy
Server
Policy
Editor
MAC
Operator
Display
Event
Log
Out-of-Band Controller
Offline Backup
(Spare/Fishbowl)
Content
Filter
Circular
Buffer
Generalizer
Forensics
Analyzer
Out-of-Band Communication Mediator
Other Controllers
Duplicate
Duplicate
Duplicate
Duplicate
Primary
Primary
Backup
Backup
Sandbox
Sandbox
Fig. 4.  Learning Components
that  an 
intrusion  has  occurred.  Examples 
There  are  also  occasions  when  the  MAC  is  able  to  determine  relatively
unequivocally 
include  detecting
unauthorized  file  writes  or  program  executions.  In  many  cases,  the  MAC  itself  can
determine  with  high  reliability  which  connection  request  is  the  likely  attack.  For
example,  if  a  particular  request  attempts  to  write  an  unauthorized  file  or  start  an
unauthorized process, it is most  likely  an  attack. In  this  case,  the  suspect  request  is
forwarded to the Forensics Module as a prime candidate.
170
J.E. Just et al.
The  Forensics  Module  looks  in  the  circular  buffer  of  past  requests  to  identify
suspicious  requests.  Illustrative  rules  for  identifying  suspicious  web  requests  are
shown in Table 2. Rule one is the result of the fact that many buffer overflow attacks
use a repeated sequence of characters to move past the fixed length buffer. No valid
HTTP  transactions  use  methods  other  than  GET  or  POST  in  our  environment,  thus
rule  two.  This  would  obviously  need  to  change  when  other  methods  are  common.
Attempts  to  access  file  types  other  than  the  standard  set  served  are  classified  as
suspicious  by  rule  four.  Rule  five  classifies  as  suspicious  those  requests  that  use
unusually  long  commands  that  are  typically  found  in  remote  command  execution
attacks against server-side scripts. Unusual characters found in the request string are
also  a  good  indication of  a  suspect  transaction,  and  are  included  in  rule  six.  The  %
character  is  used  for  various  encoding  methods,  such  as  hex  encoding,  and  is  very
common in several classes of attacks. The + character is interpreted as a space. Many
directory  traversal  attacks  against  Microsoft  IIS  servers  include  them.  The  “..”
characters  are  also  a  sign  of  these  types  of  attacks.  The   50
2) HTTP method not GET or POST
3) Protocol header other than HTTP/1.0 or HTTP/1.1
4) File extension other than htm, html, txt, gif, jpg, jpeg, png, or css
5) Command length > 20
6) Request string contains any of  %, ?, +, .., //, <,  &gt;, &lt;, ;
The Forensics Module then determines which suspicious request (or requests) was
responsible for the observed symptoms of the attack by testing each in the Sandbox. If
there  is  no  repeatable  error,  the  Forensics  Module  returns.  If  there  is  a  repeatable
error, it has determined what request should be blocked in the future. The forensics
module then passes the known bad request to be blocked to the MAC, which calls the
UpdateBadReq method of ContentFilterBridge (which implements the Content Filter)
with the bad request as the parameter. UpdateBadReq adds the bad request to a static
bad request list in memory and writes it to the bad request file. Currently, requests are
truncated to the first two components of an HTTP request, namely, the method and
URI. 
Every time a request is received on the primary, it is forwarded to the MAC. The
MAC calls the AllowRequest method of ContentFilterBridge with the new request as
the  parameter.  The  method  checks  the  bad  request  list  for  an  exact  match  with  the
new  request.  If  there  is  a  match,  it  returns  false  to  the  MAC,  meaning  block  the
request; otherwise, it returns true.
Thus  far  the  learning  is  straight-forward  and  quite  general.  Unfortunately,  the
attack pattern that is being blocked is quite specific. If simple attack variants can be
produced easily (e.g., by changing the padding characters in a buffer overflow attack
Learning Unknown Attacks – A Start
171
or changing the order of commands in a cgi-script attack), then this specific learning
approach is easily circumvented by an attacker. What is needed  is  a  way  to  rapidly
generalize the observed attack pattern so as to block all simple variants of an attack
that are based on the same vulnerability initially exploited. This is a challenging area
and is the subject of a continuing research effort.
As a proof-of-concept, we implemented generalization for a common but prevalent
class of attacks: web server buffer overflows. Our initial approach was to enhance the
AllowRequest  method  so  that  if  an  exact  match  is  not  found,  it  then  analyzes  the
components  of  the  requests  (both  new  and  bad)  to  determine  if  the  new  request  is
"similar"  to  a  known  bad  request.  If  it  is  similar,  AllowRequest  returns  false;
otherwise, it returns true. In this way, learning is generalized from specific requests
that have been identified as bad.