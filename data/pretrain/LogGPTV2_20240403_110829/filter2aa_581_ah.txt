Coercive parsing attack: The attacker sends an XML document with a 
deeply nested XML structure. When a DOM-based parser processes 
the XML document, an out-of-memory exception or a high CPU load 
can occur.
• 
SOAP array attack: Forces the attacked web service to declare a very 
large SOAP array. This can exhaust the web service’s memory.
• 
XML element count attack: Attacks the server by sending a SOAP 
message with a high number of non-nested elements.
37 A New Approach towards DoS Penetration Testing on Web Services, www.nds.rub.de/media/
nds/veroeffentlichungen/2013/07/19/ICWS_DoS.pdf
Chapter 2  Designing seCurity for apis
58
• 
XML attribute count attack: Attacks the server by sending a SOAP 
message with a high attribute count.
• 
XML entity expansion attack: Causes a system failure by forcing the 
server to recursively resolve entities defined in a document type 
definition (DTD). This attack is also known as an XML bomb or a 
billion laughs attack.
• 
XML external entity DoS attack: Causes a system failure by forcing 
the server to resolve a large external entity defined in a DTD. If an 
attacker is able to execute the external entity attack, an additional 
attack surface may appear.
• 
XML overlong name attack: Injects overlong XML nodes in the XML 
document. Overlong nodes can be overlong element names, attribute 
names, attribute values, or namespace definitions.
• 
Hash collision attack (HashDoS): Different keys result in the same 
bucket assignments, causing a collision. A collision leads to resource- 
intensive computations in the bucket. When a weak hash function is 
used, an attacker can intentionally create hash collisions that lead to 
a system failure.
Most of these attacks can be prevented at the application level. For CPU- or memory- 
intensive operations, you can keep threshold values. For example, to prevent a coercive 
parsing attack, the XML parser can enforce a limit on the number of elements. Similarly, 
if your application executes a thread for a longer time, you can set a threshold and kill it. 
Aborting any further processing of a message as soon as it’s found to be not legitimate is 
the best way to fight against DoS attacks. This also highlights the importance of having 
authentication/authorization checks closest to the entry point of the flow.
Note according to esecurity planet, one of the largest DDos attacks hit the 
internet in March 2013 and targeted the Cloudflare network with 120 gbps. the 
upstream providers were hit by 300 gbps DDos at the peak of the attack.
Chapter 2  Designing seCurity for apis
59
There are also DoS attacks carried out against JSON vulnerabilities. CVE-2013-026938 
explains a scenario in which a carefully crafted JSON message can be used to trigger the 
creation of arbitrary Ruby symbols or certain internal objects, to result in a DoS attack.
 Security Control
The CIA triad (confidentiality, integrity, and availability), which we discussed in detail in 
the previous section of this chapter, is one of the core principles of information security. 
In achieving CIA, authentication, authorization, nonrepudiation, and auditing are four 
prominent controls, which play a vital role. In the following sections, we discuss these 
four security controls in detail.
 Authentication
Authentication is the process of identifying a user, a system, or a thing in a unique 
manner to prove that it is the one who it claims to be. Authentication can be direct 
or brokered, based on how you bring your authentication assertions. If you directly 
log in to a system just providing your username and password, it falls under direct 
authentication. In other words, under direct authentication, the entity which wants 
to authenticate itself presents the authentication assertions to the service it wants to 
access. Under brokered authentication, there is a third party involved. This third party 
is commonly known as an identity provider. When you log in to your Yelp account via 
Facebook, it falls under brokered authentication, and Facebook is the identity provider. 
With brokered authentication, the service provider (or the website you want to log in, or 
the API you want to access) does not trust you directly. It only trusts an identity provider. 
You can access the service only if the trusted identity provider (by the service provider) 
passes a positive assertion to the service provider.
Authentication can be done in a single factor or in multiple factors (also known as 
multifactor authentication). Something you know, something you are, and something you 
have are the well-known three factors of authentication. For multifactor authentication, 
a system should use a combination of at least two factors. Combining two techniques 
38 CVE-2013-0269, https://nvd.nist.gov/vuln/detail/CVE-2013-0269
Chapter 2  Designing seCurity for apis
60
that fall under the same category isn’t considered multifactor authentication. For 
example, entering a username and a password and then a PIN number isn’t considered 
multifactor authentication, because both fall under the something you know category.
Note google two-step verification falls under multifactor authentication. first 
you need to provide a username and a password (something you know), and then 
a pin is sent to your mobile phone. Knowing the pin verifies that the registered 
mobile phone is under your possession: it’s something you have. then again one 
can argue this is not multifactor authentication, because you only need to know 
the pin, having the phone with you to get the pin is not mandatory. this sounds bit 
weird, but grant Blakeman’s incident proved exactly the same thing.39 an attacker 
was able to set a call forwarding number into grant’s cell phone and was able to 
receive google password reset information to the new number (via call forwarding).
 Something You Know
Passwords, passphrases, and PIN numbers belong to the category of something you 
know. This has been the most popular form of authentication not just for decades but 
also for centuries. It goes back to the eighteenth century. In the Arabian folktale Ali Baba 
and the Forty Thieves from One Thousand and One Nights, Ali Baba uses the passphrase 
“open sesame” to open the door to a hidden cave. Since then, this has become the 
most popular form of authentication. Unfortunately, it’s also the weakest form of 
authentication. Password-protected systems can be broken in several ways. Going back 
to Ali Baba’s story, his brother-in-law got stuck in the same cave without knowing the 
password and tried shouting all the words he knew. This, in modern days, is known as 
a brute-force attack. The first known brute-force attack took place in the 18th century. 
Since then, it has become a popular way of breaking password-secured systems.
39 The value of a name, https://ello.co/gb/post/knOWk-qeTqfSpJ6f8-arCQ
Chapter 2  Designing seCurity for apis
61
Note in april 2013, Wordpress was hit with a brute-force attack of massive scale. 
the average scans per day in april were more than 100,000.40 there are different 
forms of brute-force attacks. the dictionary attack is one of them, where the 
brute-force attack is carried out with a limited set of inputs based on a dictionary 
of commonly used words. this is why you should have a corporate password policy 
that should enforce strong passwords with mixed alphanumeric characters that 
aren’t found in dictionaries. Most public web sites enforce a CaptCha after few 
failed login attempts. this makes automated/tool-based brute-force attacks harder 
to execute.
 Something You Have
Certificates and smart card–based authentication fall into the category of something you 
have. This is a much stronger form of authentication than something you know. TLS 
mutual authentication is the most popular way of securing APIs with client certificates; 
this is covered in detail in Chapter 3.
FIDO (Fast IDentity Online) authentication also falls under the something you have 
category. FIDO alliance41 has published three open specifications to address certain 
concerns in strong authentication: FIDO Universal Second Factor (FIDO U2F), FIDO 
Universal Authentication Framework (FIDO UAF) and the Client to Authenticator 
Protocol (CTAP). FIDO U2F protocol allows online services to augment the security of 
their existing password infrastructure by adding a strong second factor to user login. The 
largest deployment of FIDO U2F–based authentication is at Google. Google has been 
using FIDO U2F internally for some time to secure its internal services, and in October 
2014 Google made FIDO U2F enabled to all its users publicly.42
40 The WordPress Brute Force Attack Timeline, http://blog.sucuri.net/2013/04/the-
wordpress-brute-force-attack-timeline.html
41 FIDO Alliance, https://fidoalliance.org/specifications/overview/
42 Strengthening 2-Step Verification with Security Key, https://googleonlinesecurity.
blogspot.com/2014/10/strengthening-2-step-verification-with.html
Chapter 2  Designing seCurity for apis
62
 Something You Are
Fingerprints, eye retina, facial recognition, and all other biometric-based authentication 
techniques fall into the category of something you are. This is the strongest form of 
authentication. In most of the cases, biometric authentication is not done on its own, 
rather used with another factor to further improve the security.
With the wide adoption of mobile devices, most of the retailers, financial institutes, 
and many others have chosen fingerprint-based authentication for their mobile apps. In 
the iOS platform, all these applications associate their username- and password-based 
authentication with Apple Touch ID (or face recognition). Once the initial association is 
done, a user can log in to all the associated applications just by scanning his fingerprint. 
Further iPhone also associates Touch ID with App Store login and to authorize Apple Pay 
transactions.
 Authorization
Authorization is the process of validating what actions an authenticated user, a system, 
or a thing can perform within a well-defined system boundary. Authorization happens 
with the assumption that the user is already authenticated. Discretionary Access Control 
(DAC) and Mandatory Access Control (MAC) are two prominent models to control 
access in a system.
With Discretionary Access Control (DAC), the user who owns the data, at their 
discretion, can transfer rights to another user. Most operating systems support DAC, 
including Unix, Linux, and Windows. When you create a file in Linux, you can decide 
who should be able to read, write to, and execute it. Nothing prevents you from sharing it 
with any user or a group of users. There is no centralized control—which can easily bring 
security flaws into the system.
With Mandatory Access Control (MAC), only designated users are allowed to grant 
rights. Once rights are granted, users can’t transfer them. SELinux, Trusted Solaris, and 
TrustedBSD are some of the operating systems that support MAC.
Chapter 2  Designing seCurity for apis
63
Note seLinux is an nsa research project that added the Mandatory access 
Control (MaC) architecture to the Linux kernel, which was then merged into the 
mainstream version of Linux in august 2003. it utilizes a Linux 2.6 kernel feature 
called the Linux security Modules (LsM) interface.
The difference between DAC and MAC lies in who owns the right to delegate. In 
either case, you need to have a way to represent access control rules or the access matrix. 
Authorization tables, access control lists (see Figure 2-2), and capabilities are three ways 
of representing access control rules. An authorization table is a three-column table with 
subject, action, and resource. The subject can be an individual user or a group. With 
access control lists, each resource is associated with a list, indicating, for each subject, 
the actions that the subject can exercise on the resource. With capabilities, each subject 
has an associated list called a capability list, indicating, for each resource, the actions 
that the user is allowed to exercise on the resource. A bank locker key can be considered 
a capability: the locker is the resource, and the user holds the key to the resource. At 
the time the user tries to open the locker with the key, you only have to worry about the 
capabilities of the key—not the capabilities of its owner. An access control list is resource 
driven, whereas capabilities are subject driven.
Authorization tables, access control lists and capabilities are very coarse grained. One 
alternative is to use policy-based access control. With policy-based access control, you 
can have authorization policies with fine granularity. In addition, capabilities and access 
control lists can be dynamically derived from policies. eXtensible Access Control Markup 
Language (XACML) is one of the OASIS standards for policy-based access control.
Figure 2-2. Access control list
Chapter 2  Designing seCurity for apis
64
Note XaCML is an XML-based open standard for policy-based access control 
developed under the oasis XaCML technical Committee. XaCML 3.0, the latest 
XaCML specification, was standardized in January 2013.43 then again XaCML is 
little too complex in defining access control policies, irrespective of how powerful 
it is. you can also check the open policy agent (opa) project, which has become 
quite popular recently in building fine-grained access control policies.
 Nonrepudiation
Whenever you do a business transaction via an API by proving your identity, later 
you should not be able to reject it or repudiate it. The property that ensures the 
inability to repudiate is known as nonrepudiation. You do it once—you own it forever. 
Nonrepudiation should provide proof of the origin and the integrity of data, both in an 
unforgeable manner, which a third party can verify at any time. Once a transaction is 
initiated, none of its content—including the user identity, date and time, and transaction 
details—should be altered to maintain the transaction integrity and allow future 
verifications. One has to ensure that the transaction is unaltered and logged after it’s 
committed and confirmed. Logs must be archived and properly secured to prevent 
unauthorized modifications. Whenever there is a repudiation dispute, transaction 
logs along with other logs or data can be retrieved to verify the initiator, date and time, 
transaction history, and so on.
Note tLs ensures authentication (by verifying the certificates), confidentiality (by 
encrypting the data with a secret key), and integrity (by digesting the data), but not 
nonrepudiation. in tLs, the Message authentication Code (MaC) value of the data 
transmitted is calculated with a shared secret key, known to both the client and the 
server. shared keys can’t be used for nonrepudiation.
43 XACML 3.0 specification, http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-
os-en.pdf
Chapter 2  Designing seCurity for apis
65
Digital signatures provide a strong binding between the user (who initiates the 
transaction) and the transaction the user performs. A key known only to the user should 
sign the complete transaction, and the server (or the service) should be able to verify 
the signature through a trusted broker that vouches for the legitimacy of the user’s key. 
This trusted broker can be a certificate authority (CA). Once the signature is verified, 
the server knows the identity of the user and can guarantee the integrity of the data. For 
nonrepudiation purposes, the data must be stored securely for any future verification.
Note the paper44 Non-Repudiation in Practice, by Chii-ren tsai of Citigroup, 
discusses two potential nonrepudiation architectures for financial transactions 
using challenge-response one-time password tokens and digital signatures.
 Auditing
There are two aspects of auditing: keeping track of all legitimate access attempts to 
facilitate nonrepudiation, and keeping track of all illegal access attempts to identify 
possible threats. There can be cases where you’re permitted to access a resource, but 
it should be with a valid purpose. For example, a mobile operator is allowed to access 
a user’s call history, but he should not do so without a request from the corresponding 
user. If someone frequently accesses a user’s call history, you can detect it with proper 
audit trails. Audit trails also play a vital role in fraud detection. An administrator can 
define fraud-detection patterns, and the audit logs can be evaluated in near real time to 
find any matches.
 Summary
• 
Security isn’t an afterthought. It has to be an integral part of any 
development project and also for APIs. It starts with requirements 
gathering and proceeds through the design, development, testing, 
deployment, and monitoring phases.
44 Non-Repudiation in Practice, www.researchgate.net/publication/240926842_ 
Non-Repudiation_In_Practice
Chapter 2  Designing seCurity for apis
66
• 
Connectivity, extensibility, and complexity are the three trends 
behind the rise of data breaches around the globe in the last few 
years.
• 
The most challenging thing in any security design is to find and 
maintain the right balance between security and the user comfort.
• 
A proper security design should care about all the communication 
links in the system. Any system is no stronger than its weakest link.
• 
A layered approach is preferred for any system being tightened for 
security. This is also known as defense in depth.
• 
Insider attacks are less complicated, but highly effective.
• 
Kerckhoffs’ principle emphasizes that a system should be secured by 
its design, not because the design is unknown to an adversary.
• 
The principle of least privilege states that an entity should only have 
the required set of permissions to perform the actions for which they 
are authorized, and no more.
• 
The fail-safe defaults principle highlights the importance of making a 
system safe by default.
• 
The economy of mechanism principle highlights the value of 
simplicity. The design should be as simple as possible.
• 
With complete mediation principle, a system should validate access 
rights to all its resources to ensure whether they’re allowed to access 
or not.
• 
The open design principle highlights the importance of building a 
system in an open manner—with no secrets, confidential algorithms.
• 
The principle of separation of privilege states that a system should 
not grant permissions based on a single condition.
• 
The principle of least common mechanism concerns the risk of 
sharing state information among different components.
Chapter 2  Designing seCurity for apis
67
• 
The principle of psychological acceptability states that security 
mechanisms should not make the resource more difficult to access 
than if the security mechanisms were not present.
• 
Confidentiality, integrity, and availability (CIA), widely known 
as the triad of information security, are three key factors used in 
benchmarking information systems security.
Chapter 2  Designing seCurity for apis
69
© Prabath Siriwardena 2020 