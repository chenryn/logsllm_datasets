hardware monotonic counter” [3].
The Hybster state-machine replication protocol [4] intro-
duces a trusted subsystem, called TrInX, that provides a trusted
counter service using SGX. TrInX counters are distinct from
SGX hardware monotonic counters. The authors correctly
assume that “the execution platform provides a means to
prevent undetected replay attacks where an adversary saves
the (encrypted) state of a trusted subsystem and starts a new
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:26:25 UTC from IEEE Xplore.  Restrictions apply. 
instance using the exact same state to reset the subsystem” [4].
Although not stated, it can be assumed that this guarantee
would be provided using sealing and hardware monotonic
counters, as in Teechan.
We assume that in both Teechan and TrInX, any important
state information would be persisted before the enclave is
terminated.3 This would be done by incrementing a hardware
counter and sealing the new counter value along with the
enclave’s state as a version number. When the enclave is
restarted,
it would only accept sealed data for which the
version number matches the current hardware counter value.
Now suppose either of these enclaves were made migratable
using a mechanism that does not migrate hardware counters.
A fork attack could proceed as follows:
1) Start-stop-restart: Start the enclave on the source ma-
chine and then signal that the application process will
be terminated. This causes the enclave to request a
monotonic counter c (since this is the ﬁrst use), increment
the counter value (c = 1), and store its keys and important
information as persistent state with the current counter
value as a version number (v = 1). Restart the application
on the source machine using the persistent state.
2) Migrate: Migrate the VM containing this application
to the destination machine and continue operation (e.g.
make transactions with Teechan and update TrInX coun-
ters). The application may persist its state arbitrarily many
times (v = 2, 3, 4, ...) using the monotonic counter on the
destination machine (c(cid:2)).
3) Terminate-restart: Terminate the application process on
the source machine, then restart this process (still on
the source machine) using the persistent state created in
step 1 (c = v = 1).
This would allow two copies of the enclave to execute con-
currently on different machines with inconsistent state, thus
undermining the guarantees required by Teechan and Hybster.
The mechanism by Gu et al. [2] only partially mitigates such
fork attacks. In their protocol, once an enclave has been
migrated, the enclave on the source machine is prevented from
resuming operation by setting a ﬂag that holds all the enclave’s
worker threads in a perpetual spin lock. However, the authors
do not state whether this ﬂag is stored in persistent storage. If
the ﬂag is not persisted, the above attack will succeed because
the ﬂag will be cleared when the source enclave is terminated
and resumed (step 3). Alternatively, if the ﬂag is persisted,
the fork attack will be prevented, but this would prevent the
same enclave from ever being migrated back to the source
machine, since this is indistinguishable from a fork attack.
The latter would place signiﬁcant constraints on how the cloud
operator can manage the migration of VMs, thus reducing the
beneﬁts of cloud computing. Therefore, migration of hardware
counters calls for careful design.
C. Roll-back Attack
In addition to fork attacks, the adversary may also be able
to mount roll-back attacks under certain circumstances. As
explained above, SGX-based systems like Teechan and TrInX
can protect the conﬁdentiality and integrity of their persistent
state by encrypting it using a key available only to the enclave.
On a single machine, this could be achieved using the SGX
sealing functionality, but since the sealing key is machine-
speciﬁc (as explained in Section II), sealed data cannot be
directly migrated with a VM. The mechanism by Gu et al. [2]
does not support migration of sealed data. This could result
in data loss for enclaves that use sealed data. In order to
overcome this, an improved migration mechanism could allow
enclaves to seal data under a migratable key, such that it could
still be unsealed after migration.
As an alternative to SGX sealing, an enclave in a cloud
environment could request an encryption key from a Key
Distribution Center (KDC), such as the AWS Key Manage-
ment Service4 and use this to encrypt its persistent state.
The encrypted state could be stored in a specialized (high-
availability) storage service outside the VM, e.g. Amazon S3.5
In either case, the enclave would be able to access its per-
sistent (sealed) state after migration. However, if the migration
mechanism does not also migrate the enclave’s monotonic
counters, this could lead to a roll-back attack as follows:
1) Start-stop-restart: [As in step 1 of the fork attack]
2) Continue: Diverging from the fork attack, continue oper-
ation on the source machine (e.g. make transactions with
Teechan and update TrInX counters). The application may
persist its state arbitrarily many times (v = 2, 3, 4, ...)
using the monotonic counter on the source machine (c).
3) Migrate: Migrate the VM containing the application to
the destination machine and continue operation.
4) Terminate: Signal that the application process will be
terminated, causing the enclave to persist its state. Since
no counters have yet been created on the destination
machine,
the enclave requests and increments a new
counter (c(cid:2) = 1).
5) Restart: Restart the application on the destination ma-
chine, but provide the original data package from the
source machine created in step 1 (v = 1). This is
accepted by the enclave because the counter value on
the destination machine matches the version number in
the sealed data (c(cid:2) = v = 1).
Thus by abusing the migration process, the adversary can roll-
back the state of the enclave’s monotonic counters, which
would otherwise not be possible. If it can be performed
repeatedly, this roll-back attack could achieve the same result
as the fork attack described above. Both of these attacks
undermine the current SGX security guarantees, and could
thus have serious consequences for enclaves that use persistent
state.
3In practice, these enclaves might persist their state more frequently (e.g.
to mitigate against unexpected crashes), but at a minimum they must do this
at least once before enclave termination.
4https://aws.amazon.com/kms/
5https://aws.amazon.com/s3/
198
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:26:25 UTC from IEEE Xplore.  Restrictions apply. 
IV. REQUIREMENTS AND GOALS
V. DESIGN
A. Security Requirements
In order to prevent the attacks described above, the migra-
tion mechanism must meet the following requirements:
R1 SGX guarantees: The migration mechanism must main-
tain all SGX security guarantees that would be available
to an equivalent non-migratable enclave.
R2 Controlled migration: Migration must only be possible
if authorized by the machine owner, and the enclave must
migrate to the correct destination machine.
R3 Fork prevention: Any fork of persistent state in a migrat-
able enclave must also be possible against the equivalent
non-migratable enclave.
R4 Roll-back prevention: Any roll-back attack against per-
sistent state of a migratable enclave must also be possible
against the equivalent non-migratable enclave.
Requirement R1 ensures that the existing SGX security guar-
antees still apply to migratable enclaves (e.g. isolated ex-
ecution etc.). Requirements R2 to R4 are speciﬁc to en-
clave migration, which is not available by default in SGX.
Requirement R2 is important to ensure that the adversary
cannot use the migration mechanism to take control of an
enclave by migrating it to a machine under his control. For
example, this ensures that an enclave can only migrate to
another physical machine within the same cloud data center.
Requirements R3 and R4 directly address the fork and roll-
back attacks described in the previous section. Although it
is not possible to categorically prevent these attacks for all
enclaves (e.g. poorly-designed enclaves that may already be
vulnerable without migration), any migration mechanism must
not introduce new possibilities for such attacks. As explained
in Section III, denial-of-service attacks are not one of the
adversary’s objectives, and are thus not in scope.
B. Performance Goals
Enclave performance: A migratable enclave should not incur
a high performance overhead compared to an equivalent non-
migratable enclave. This means that any changes made to the
enclave or other software on the machine in order to enable
migration should not noticeably degrade the performance of
migratable enclaves.
Migration performance: Ideally, migrating a VM with en-
claves should not take signiﬁcantly longer than migrating an
equivalent VM without enclaves. Even within data centers,
the process of copying the VM’s entire memory between two
machines can take in the order of seconds [10]. Any additional
time required to migrate the enclave should ideally be at least
an order of magnitude lower.
C. Usability Goals
Developer effort: Ideally, the effort required from developers
in order to make an enclave migratable should be minimal. It
is reasonable to require some input from the enclave developer
because the developer must also ensure that the functionality of
the enclave is compatible with migration (i.e. that the enclave
should be allowed to migrate).
Based on the requirements, we design and implement a
migration framework for SGX enclaves with persistent data.
It consists of two main components: a Migration Enclave
running on each physical machine, and a Migration Library
included in each migratable enclave. We ﬁrst present an
overview of the whole design and then explain the roles of
the Migration Enclave and Migration Library in greater detail.
A. Design Overview
The overall design is shown in Figure 1. Each physical
machine has a single Migration Enclave, which runs in a
separate non-migratable VM. This is compatible with a typical
cloud environment in which each physical machine would have
a non-migratable management VM. The Migration Enclave is
responsible for managing the migration process of enclaves.
The enclave developer includes and uses the Migration Library
in each migratable enclave. This library provides migratable
versions of the sealing and monotonic counter functions from
the SGX API. It also performs local attestation of the Migra-
tion Enclave and communicates with it during the migration
process. The migration process consists of the following steps:
1) The application notiﬁes the enclave that it will migrate
to a new machine.
2) The Migration Library locally attests the Migration En-
clave and sends the data required for the migration. At
the same time the Migration Library prevents further
operations of the enclave.
3) After the Migration Enclave receives all the data from
the library, it performs a mutual remote attestation with
the Migration Enclave on the destination machine. After
attesting and establishing a secure channel, the Migration
Enclaves authenticate each other to verify that both
machines are authorized machines of the same cloud
provider.
4) On the destination machine,
the Migration Enclave
checks that
the local destination enclave matches the
source enclave and, if so, sends the migration data to
the destination enclave’s Migration Library to complete
the migration.
The fact that in our protocol the application has to initiate
the migration is neither unrealistic nor a security issue. As
described in Section III, denial-of-service attacks are not in
scope since SGX does not provide any availability guarantees
for an enclave. A malicious application, OS, or hypervisor can
always prevent enclave migration. Our protocol’s main goal is
to ensure that when a migration does happen, the SGX security
guarantees are not violated and the additional requirements
deﬁned in Section IV are met.
B. Migration Enclave
The Migration Enclave is responsible for managing the
migration process. As described in Section V-A,
its main
operations are locally attesting the application enclaves and re-
motely attesting and authenticating other Migration Enclaves.
To verify the identities of Migration Enclaves running on
199
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:26:25 UTC from IEEE Xplore.  Restrictions apply. 
utilizes the library reside in the same protection domain. This
means that they both trust each other fully as the Migration
Library can only protect an enclave that is cooperating and
the developer of the application enclave is assumed to have
reviewed the Migration Library code before utilizing it in his
enclave code.
We identify two main primitives that should be substituted
by migratable counterparts: sealing and monotonic counters.
The sealing key derived from the CPU secret is not suited for
encrypting migratable secrets because it is machine-speciﬁc.
Thus, our library provides its own implementation of the SGX
sealing and unsealing functions by generating a Migration
Sealing Key (MSK) and using the MSK for all sealing
operations. The MSK itself is sealed with the enclave’s own
sealing key and stored locally. It is reloaded and unsealed by
the Migration Library each time the enclave is restarted.
Monotonic counters are provided by the Intel Platform
Services Software, which includes a system enclave that
performs speciﬁc tasks such as creating, reading, incrementing,
and deleting monotonic counters of an application enclave.
The Platform Service guarantees that over the lifetime of
a counter, it can never be decreased and allows application
enclaves to use the monotonic counters for various tasks, such
as rollback protection. When migrating a monotonic counter,
the migration protocol needs to ensure two invariants:
• The monotonic counter must be rendered unusable on the
source machine in order to prevent fork attacks, as de-
scribed in Section III-B, and thus fulﬁl Requirement R3.
• The monotonic counter must be re-created with the same
value on the destination machine in order to prevent roll-
back attacks, as described in Section III-C, and thus fulﬁl
Requirement R4
The Migration Library ensures both of these when migrating
a monotonic counter by sending the counter values in the
migration data and increasing the counter to its original value
before the enclave can continue the execution. Before the
migration data is sent to the Migration Enclave, the Migration
Library also commands the Platform Service to delete all
counters managed by the library on the source machine. This
prevents fork attacks that aim to restart the Migration Library
before the migration has completed but after the counters have
been set up on the destination machine.
In addition to providing migratable versions of sealing and
monotonic counters, the Migration Library also performs the
local attestation of the Migration Enclave and communicates
with it to start a migration or to receive a migration on startup
via a secured channel.
Fig. 1. Overview of the migration process.
remote machines, each Migration Enclave is set up by the
cloud provider during a secure setup phase. This setup phase
can happen, for example, during the setup of the Management
VM that contains the Migration Enclave. In practice, the setup
phase could provide the Migration Enclaves with a key or a
certiﬁcate from an operator of the data center or by a server
owner. The goal of this setup phase is to ensure that enclaves
are only migrated inside the data center or to other trusted
servers (Requirement R2). The authentication performed by
the Migration Enclaves can also be used to limit the migration
of enclaves to a certain subset of servers, for example to
achieve regulatory compliance.
After the setup phase, the Migration Enclave can be used
by any application enclave on the machine by performing a
local attestation. After the attestation, the Migration Enclave
has the guarantee that its communication peer resides on the
same physical machine and is safe to migrate. There are
no further checks required from the application enclave as
the Migration Enclave guarantees that the application enclave
will be migrated to an identical enclave on the destination
machine. After performing the local attestation and receiving
the migration data, the Migration Enclave executes a mutual
remote attestation with the corresponding Migration Enclave
on the destination machine. If required, the Migration Enclaves
then exchange signatures on the transcript of the attestation
protocol, using the keys provisioned by the data center oper-
ator, to ensure that they are running in the same data center.
Finally, the migration data is sent via the secure channel.
For incoming migrations, the Migration Enclave performs a
remote attestation, veriﬁes the identity of the remote Migration
Enclave, and receives the migration data. It then either notiﬁes
the local application enclave of incoming data if it is already
running, or stores the data temporarily until the local enclave
has been started and locally attests to the Migration Enclave
to securely transfer the incoming migration data.
C. Migration Library
D. The Migration Process
As discussed in Section II and Section III, it is not sufﬁcient
to simply move an SGX enclave from one physical machine
to another. The purpose of the Migration Library is to provide
analogues of speciﬁc SGX primitives in order to enable
migration whilst providing the same security guarantees. Note
that the Migration Library and the application enclave that
Figure 2 shows the migration process as an interaction
between the Migration Libraries and the Migration Enclaves.