The TypeScript definition for Array.filter specifies the callback must return
a boolean, thus the code example at the bottom of this post fails to compile.
Here's the current definition:
    filter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[];
The spec says this about the callback parameter:
> callbackfn should be a function that accepts three arguments and returns a
> value that is coercible to the Boolean value true or false.
Thus I propose the definition should be changed to:
    filter(callbackfn: (value: T, index: number, array: T[]) => any, thisArg?: any): T[];
_Note: using a double not-operator is a sufficient workaround with negligible
implications_
**TypeScript Version:**  
1.8.7
**Code**  
Playground
    // the purpose is to weed out falsey values
    let a = [1, 2, 3, undefined, 0, 42, ""].filter(i => i)
    // "i => i" is an error because it does not return boolean
    // the following has no error
    let b = [1, 2, 3, undefined, 0, 42, ""].filter(i => !!i)
**Expected behavior:**  
No compile errors
**Actual behavior:**  
Compile errors