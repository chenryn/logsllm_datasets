2)
Decrypt(cki
2, c2, t2) → (m2, cki
3)
Decrypt(cki
3, c3, t3) → (m3, cki
4)
Decrypt(cki
4, c4, t4) → (m4, cki
5)
{root key ∶ rk3, send chain ∶ (cki
5, x1), recv chain ∶ (ckr
1, gy0 )}
Session State:
{root key ∶ rk3, send chain ∶ (ckr
1, y0), recv chain ∶ (cki
5, gx1 )}
Session State:
ReceiveRatchet(rk3, x1, gy1 ) → (rk4, ckr
2)
Decrypt(ckr
2, c5, t5) → (m5, ckr
3)
Decrypt(ckr
3, c6, t6) → (m6, ckr
4)
MSG(c5, t5)
MSG(c6, t6)
SendRatchet(rk3, gx1 ) → (rk4, ckr
2, y1)
Encrypt(gr, gi, gy1 , ckr
2, m5) → (ckr
3, c5, t5)
Encrypt(gr, gi, gy1 , ckr
3, m6) → (ckr
4, c6, t6)
{root key ∶ rk4, send chain ∶ (cki
5, x1), recv chain ∶ (ckr
4, gy2 )}
Session State:
{root key ∶ rk4, send chain ∶ (ckr
4, y2), recv chain ∶ (cki
5, gx1 )}
Session State:
⋯
Fig. 16. Signal Protocol (secure messaging). Once the channel is set up, I and S can send ﬂights of messages to each other in any order. The ﬁrst message of
each ﬂight carries a fresh Difﬁe-Hellman key which is mixed into the root key. Subsequent messages in each ﬂight advance the sender’s chaining key. This
protocol is sometimes a Double Ratchet protocol.
1272
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:34 UTC from IEEE Xplore.  Restrictions apply. 
module Spec.Signal.Core
open Lib.IntTypes
open Lib.ByteSequence
open Lib.Sequence
open Spec.Signal.Crypto
open Spec.Signal.Messages
#set−options "-z3rlimit 50"
let initiate
(our identity priv key: privkey) (* i *)
(our onetime priv key: privkey) (* e *)
(their identity pub key: pubkey) (* gr
*)
(their signed pub key: pubkey) (* gs
*)
(their onetime pub key: option pubkey) (* go, optional *)
: lbytes 32 = (* output: rk0 *)
let dh1 = dh our identity priv key their signed pub key in
let dh2 = dh our onetime priv key their identity pub key in
let dh3 = dh our onetime priv key their signed pub key in
let shared secret = ff @| dh1 @| dh2 @| dh3 in
let shared secret =
match their onetime pub key with
| None → shared secret
| Some their onetime pub key →
let dh4 = dh our onetime priv key
shared secret @| dh4 in
their onetime pub key in
hkdf1 shared secret zz label WhisperText
let respond
(our identity priv key: privkey) (* r *)
(our signed priv key: privkey) (* s *)
(our onetime priv key: option privkey) (* o, optional *)
(their identity pub key: pubkey) (* gi
*)
(their onetime pub key: pubkey) (* ge
*)
: lbytes 32 = (* output: rk0 *)
let dh1 = dh our signed priv key their identity pub key in
let dh2 = dh our identity priv key their onetime pub key in
let dh3 = dh our signed priv key their onetime pub key in
let shared secret = ff @| dh2 @| dh1 @| dh3 in
let shared secret =
match our onetime priv key with
| None → shared secret
| Some our onetime priv key →
let dh4 = dh our onetime priv key
shared secret @| dh4 in
their onetime pub key in
hkdf1 shared secret zz label WhisperText
let ratchet
(root key:key) (* rkj *)
(our ephemeral priv key:privkey) (* xj *)
(their ephemeral pub key:pubkey) (* gyj *)
: (key & key) = (* output: rkj+1, ckj+1,0 *)
let shared secret = dh our ephemeral priv key
their ephemeral pub key in
let keys = hkdf2 shared secret
B. F* FUNCTIONAL SPECIFICATION FOR CORE SIGNAL PROTOCOL
root key label WhisperRatchet in
let root key’ = sub keys 0 32 in
let chain key = sub keys 32 32 in
(root key’, chain key)
let encrypt
(our identity pub key:pubkey) (* gi or gr
*)
(their identity pub key:pubkey) (* gr or gi
*)
(chain key:key) (* ckj *)
(our ephemeral pub key:pubkey) (* gx
(prev counter:size nat) (* previous k *)
(counter:size nat) (* current j *)
(plaintext:plain bytes) (* message mj *)
: (cipher bytes & lbytes 8 & key) = (* output: cj, tj, ckj+1 *)
*)
let msg key = hmac chain key zero in
let chain key’ = hmac chain key one in
let keys = hkdf3 msg key zz label WhisperMessageKeys in
let enc key = sub keys 0 32 in
let enc iv = sub keys 32 16 in
let mac key = sub keys 64 32 in
let ciphertext = aes enc enc key enc iv plaintext in
let whisper msg =
serialize whisper message our ephemeral pub key
prev counter counter ciphertext in
let tag8 =
mac whisper msg mac key their identity pub key
our identity pub key whisper msg in
(ciphertext, tag8, chain key’)
let decrypt
(our identity pub key:pubkey) (* gi or gr
*)
(their identity pub key:pubkey) (* gr or gi
*)
(chain key:key) (* ckj *)
(their ephemeral pub key:pubkey) (* gy
(prev counter:size nat) (* prev msg number k *)
(counter:size nat) (* current msg number j *)
(ciphertext:cipher bytes) (* ciphertext cj *)
(tag8:lbytes 8) (* tag tj *)
: option (plain bytes & key) = (* outputs: mj, ckj+1 *)
*)
let len = length ciphertext in
let ciphertext = to lseq ciphertext in
let msg key = hmac chain key zero in
let chain key’ = hmac chain key one in
let keys = hkdf3 msg key zz label WhisperMessageKeys in
let enc key = sub keys 0 32 in
let enc iv = sub keys 32 16 in
let mac key = sub keys 64 32 in
let whisper msg =
serialize whisper message their ephemeral pub key
prev counter counter ciphertext in
let exp tag8 =
mac whisper msg mac key our identity pub key
their identity pub key whisper msg in
let plain = aes dec enc key enc iv ciphertext in
if equal bytes tag8 exp tag8
then Some (plain,chain key’)
else None
This snippet is pure F∗ code. It relies on the speciﬁc cryptographic constructions of the Signal protocol (in Spec.Signal.Crypto),
such as hmac and hkdf{1,2,3}, as well as the message serialization primitives (in Spec.Signal.Messages). See §V. Other helpers
include: zz (32 zero bytes), ff (32 0xff bytes), the label * string constants used in Signal and @| (byte sequence concatenation).
1273
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:34 UTC from IEEE Xplore.  Restrictions apply. 
C. LOW∗ IMPLEMENTATION FOR THE RACHET FUNCTION FROM SIGNAL PROTOCOL
val ratchet:
output keys: uint8 p { length output keys = 64 }
→ root key:key p
→ our ephemeral priv key:privkey p
→ their ephemeral pub key:pubkey p →
Stack unit
(requires (λ h0 → live pointers h0
(ensures (λ h0
let ratchet
=
output keys root key
our ephemeral priv key their ephemeral pub key
our ephemeral priv key their ephemeral pub key;
push frame();
let shared secret = create 32ul (u8 0) in
dh shared secret
hkdf2 output keys
shared secret 32ul root key
const
pop frame()
label WhisperRatchet 14ul;
[output keys; root key;
our ephemeral priv key;
their ephemeral pub key]
∧ disjoint
from output keys
[root key; our ephemeral priv key;
their ephemeral pub key]))
h1 → modiﬁes only output keys h0 h1
∧ let (root key’,chain key’) =
Spec.Signal.Core.ratchet
h0.[| root key |]
h0.[| our ephemeral priv key |]
h0.[| their ephemeral pub key |]
h1.[| output keys |] == root key’ @| chain key’))
On the left is the type declaration (i.e. prototype) of our Low∗ implemetation of the ratchet function. The function takes four
arguments: the ﬁrst argument contains an output buffer (i.e. a mutable array) called output keys containing two concatenated
keys of 32 bytes each; the rest of the arguments are three input buffers. The function has no return value, and is declared as
having a Stack effect, which means that it only allocates memory on the stack.
The pre-condition of the function, stated in the requires clause, requires that all the input and output buffers must be live
in the heap when the function is called, and all input buffers must be disjoint from the output buffer. The post-condition of
ratchet, stated in the ensures clause, guarantees that the function only modiﬁes the output buffer, and that the output value of
output keys in the heap when the function returns matches the speciﬁcation of ratchet in Spec.Signal.Core.
Hence, this type declaration provides a full memory safety and functional correctness speciﬁcation for ratchet. Moreover,
all buffers are declared to contain secret bytes (uint8), so the type declaration also requires that the code for ratchet be secret
independent, or “constant-time”, with respect to the (potentially secret) contents of these buffers.
The veriﬁed Low∗ code for ratchet is shown on the right. It closely matches the F∗ speciﬁcation of ratchet in Spec.Signal.Core.
The main difference is that the Low∗ code needs to allocate a temporary buffer to hold the shared secret: so the function calls
push frame to create a new stack frame, create to allocate the buffer, and pop frame when exiting the function.
D. COMPLETE TRANSLATION RULES FROM λOW∗ TO C♭
IFTHENELSE
G; V ⊢ e1 ∶ bool ⇛ ˆe1 ∶ bool ⊣ V
′′
G; V
G; V
′ ⊢ e2 ∶ τ ⇛ ˆe2 ∶ ˆτ ⊣ V
′′ ⊢ e3 ∶ τ ⇛ ˆe3 ∶ ˆτ ⊣ V
′′′
′
BUFREAD
G; V ⊢ e1 ∶ buf τ ⇛ ˆe1 ∶ pointer ⊣ V
′′
′ ⊢ e2 ∶ int32 ⇛ ˆe2 ∶ int32 ⊣ V
G; V
′
size(τ ) = n
G; V ⊢ if e1 then e2 else e3 ∶ τ ⇛ if ˆe1 then ˆe2 else ˆe3 ∶ ˆτ ⊣ V
′′′
G; V ⊢ readbuf e1 e2 ∶ τ ⇛ readn(ˆe1 + n × ˆe2) ∶ ˆτ ⊣ V
′′
BUFSUB
G; V ⊢ e1 ∶ buf τ ⇛ ˆe1 ∶ pointer ⊣ V
′′
′ ⊢ e2 ∶ int32 ⇛ ˆe2 ∶ int32 ⊣ V
G; V
′
size(τ ) = n
FIELD
G; V ⊢ e ∶ buf τ ⇛ ˆe ∶ pointer ⊣ V
size(τf ) = n
oﬀset(τ, f ) = k
′
G; V ⊢ subbuf e1 e2 ∶ buf τ ⇛ ˆe1 + n × ˆe2 ∶ pointer ⊣ V
′′
G; V ⊢ (readbuf e 0).f ∶ τf ⇛ readn(ˆe + k) ∶ ˆτf ⊣ V
′
POINTERADD
G; V ⊢ e ∶ buf τ ⇛ ˆe ∶ pointer ⊣ V
′
FUNCALL
G; V ⊢ e ∶ τ1 ⇛ ˆe ∶ ˆτ1 ⊣ V
′
G; V ⊢ e ⊕ n ∶ buf τ ⇛ ˆe + n ∶ pointer ⊣ V
′
G; V ⊢ d e ∶ τ2 ⇛ d ˆe ∶ ˆτ2 ⊣ V
′
UNIT
G; V ⊢ () ∶ unit ⇛ () ∶ unit ⊣ V
CONSTANT
G; V ⊢ k ∶ τ ⇛ k ∶ ˆτ ⊣ V
GLOBAL
g ∈ G
G; V ⊢ g ∶ τ ⇛ g ∶ ˆτ ⊣ V
FORLOOP
G; (i ↦ (cid:3), int32) ⋅ V ⊢ e ∶ unit ⇛ ˆe ∶ unit ⊣ V
(cid:3) fresh
′
G; V ⊢ for i ∈ [0; n) e ∶ unit ⇛ for (cid:3) ∈ [0; n) ˆe ∶ unit ⊣ V
′
Fig. 17. Translating from λow∗ to C♭ (remaining rules). Some notes: FIELD: the type τf can only be a non-struct type per our invariant (III-B, 1).
1274
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:34 UTC from IEEE Xplore.  Restrictions apply.