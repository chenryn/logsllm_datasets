作者：RickGray  
作者博客：
（注：本文分上/下两部分完成，上篇链接[《以太坊智能合约安全入门了解一下（上）》](https://paper.seebug.org/601/)） 接上篇
#### 3\. Arithmetic Issues
算数问题？通常来说，在编程语言里算数问题导致的漏洞最多的就是整数溢出了，整数溢出又分为上溢和下溢。整数溢出的原理其实很简单，这里以 8 位无符整型为例，8
位整型可表示的范围为 `[0, 255]`，`255` 在内存中存储按位存储的形式为（下图左）：
8 位无符整数 255 在内存中占据了 8bit 位置，若再加上 1 整体会因为进位而导致整体翻转为 0，最后导致原有的 8bit 表示的整数变为 0.
如果是 8 位有符整型，其可表示的范围为 `[-128, 127]`，`127` 在内存中存储按位存储的形式为（下图左）：
在这里因为高位作为了符号位，当 `127` 加上 `1` 时，由于进位符号位变为 `1`（负数），因为符号位已翻转为 `1`，通过还原此负数值，最终得到的
`8` 位有符整数为 `-128`。
上面两个都是整数上溢的图例，同样整数下溢 `(uint8)0-1=(uint8)255`, `(int8)(-128)-1=(int8)127`。
在 `withdraw(uint)` 函数中首先通过 `require(balances[msg.sender] - _amount > 0)`
来确保账户有足够的余额可以提取，随后通过 `msg.sender.transfer(_amount)` 来提取
Ether，最后更新用户余额信息。这段代码若是一个没有任何安全编码经验的人来审计，代码的逻辑处理流程似乎看不出什么问题，但是如果是编码经验丰富或者说是安全研究人员来看，这里就明显存在整数溢出绕过检查的漏洞。
在 Solidity 中 `uint` 默认为 256 位无符整型，可表示范围 `[0,
2**256-1]`，在上面的示例代码中通过做差的方式来判断余额，如果传入的 `_amount` 大于账户余额，则
`balances[msg.sender] - _amount` 会由于整数下溢而大于 0 绕过了条件判断，最终提取大于用户余额的
Ether，且更新后的余额可能会是一个极其大的数。
    pragma solidity ^0.4.10;
    contract MyToken {
        mapping (address => uint) balances;
        function balanceOf(address _user) returns (uint) { return balances[_user]; }
        function deposit() payable { balances[msg.sender] += msg.value; }
        function withdraw(uint _amount) {
            require(balances[msg.sender] - _amount > 0);  // 存在整数溢出
            msg.sender.transfer(_amount);
            balances[msg.sender] -= _amount;
        }
    }
简单的利用过程演示：
为了避免上面代码造成的整数溢出，可以将条件判断改为 `require(balances[msg.sender] >
_amount)`，这样就不会执行算术操作进行进行逻辑判断，一定程度上避免了整数溢出的发生。
Solidity 除了简单的算术操作会出现整数溢出外，还有一些需要注意的编码细节，稍不注意就可能形成整数溢出导致无法执行正常代码流程：
  * 数组 `length` 为 256 位无符整型，仔细对 `array.length++` 或者 `array.length--` 操作进行溢出校验；
  * 常见的循环变量 `for (var i = 0; i .call(bytes4(keccak("somefunc(params)"), params))`，外部调用 `call()`
返回一个 bool 值来表明外部调用成功与否：
**\- delegatecall()**
除了 `delegatecall()` 会将外部代码作直接作用于合约上下文以外，其他与 `call()` 一致，同样也是只能获取一个 bool
值来表示调用成功或者失败（发生异常）。
**\- callcode()**
`callcode()` 其实是 `delegatecall()` 之前的一个版本，两者都是将外部代码加载到当前上下文中进行执行，但是在
`msg.sender` 和 `msg.value` 的指向上却有差异。
例如 Alice 通过 `callcode()` 调用了 Bob 合约里同时 `delegatecall()` 了 Wendy
合约中的函数，这么说可能有点抽象，看下面的代码：
如果还是不明白 `callcode()` 与 `delegatecall()` 的区别，可以将上述代码在 remix-ide 里测试一下，观察两种调用方式在
`msg.sender` 和 `msg.value` 上的差异。
**\- call.value()()**
在合约中直接发起 TX 的函数之一（相当危险），
**\- send()**
通过 `send()` 函数发送 Ether 失败时直接返回 false；这里需要注意的一点就是，`send()` 的目标如果是合约账户，则会尝试调用它的
fallbcak() 函数，fallback() 函数中执行失败，`send()` 同样也只会返回 false。但由于只会提供 2300 Gas 给
fallback() 函数，所以可以防重入漏洞（恶意递归调用）。
**\- transfer()**
`transfer()` 也可以发起 Ether 交易，但与 `send()` 不同的时，`transfer()`
是一个较为安全的转币操作，当发送失败时会自动回滚状态，该函数调用没有返回值。同样的，如果 `transfer()` 的目标是合约账户，也会调用合约的
fallback() 函数，并且只会传递 2300 Gas 用于 fallback() 函数执行，可以防止重入漏洞（恶意递归调用）。
这里以一个简单的示例来说明严格验证底层调用返回值的重要性：
    function withdraw(uint256 _amount) public {
        require(balances[msg.sender] >= _amount);
        balances[msg.sender] -= _amount;
        etherLeft -= _amount;
        msg.sender.send(_amount);  // 未验证 send() 返回值，若 msg.sender 为合约账户 fallback() 调用失败，则 send() 返回 false
    }
上面给出的提币流程中使用 `send()` 函数进行转账，因为这里没有验证 `send()` 返回值，如果 msg.sender 为合约账户
fallback() 调用失败，则 send() 返回 false，最终导致账户余额减少了，钱却没有拿到。
关于该类问题可以详细了解一下 [King of the
Ether](https://www.kingoftheether.com/postmortem.html)。
#### 5\. Denial of Service - 拒绝服务
DoS 无处不在，在 Solidity 里也是，与其说是拒绝服务漏洞不如简单的说成是
“不可恢复的恶意操作或者可控制的无限资源消耗”。简单的说就是对以太坊合约进行 DoS 攻击，可能导致 Ether 和 Gas
的大量消耗，更严重的是让原本的合约代码逻辑无法正常运行。
下面一个例子（代码改自 DASP 中例子）：
    pragma solidity ^0.4.10;
    contract PresidentOfCountry {
        address public president;
        uint256 price;
        function PresidentOfCountry(uint256 _price) {
            require(_price > 0);
            price = _price;
            president = msg.sender;
        }
        function becomePresident() payable {
            require(msg.value >= price); // must pay the price to become president
            president.transfer(price);   // we pay the previous president
            president = msg.sender;      // we crown the new president
            price = price * 2;           // we double the price to become president
        }
    }
一个简单的类似于 KingOfEther 的合约，按合约的正常逻辑任何出价高于合约当前 `price` 的都能成为新的
president，原有合约里的存款会返还给上一人 president，并且这里也使用了 `transfer()` 来进行 Ether
转账，看似没有问题的逻辑，但不要忘了，以太坊中有两类账户类型，如果发起 `becomePresident()` 调用的是个合约账户，并且成功获取了
president，如果其 fallback() 函数恶意进行了类似 `revert()` 这样主动跑出错误的操作，那么其他账户也就无法再正常进行
becomePresident 逻辑成为 president 了。
简单的攻击代码如下：
    contract Attack {
        function () { revert(); }
        function Attack(address _target) payable {
            _target.call.value(msg.value)(bytes4(keccak256("becomePresident()")));
        }