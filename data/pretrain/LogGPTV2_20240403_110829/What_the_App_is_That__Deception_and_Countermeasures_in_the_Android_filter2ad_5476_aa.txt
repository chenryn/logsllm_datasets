# Title: What the App is That? Deception and Countermeasures in the Android User Interface

## Authors:
- Antonio Bianchi
- Jacopo Corbetta
- Luca Invernizzi
- Yanick Fratantonio
- Christopher Kruegel
- Giovanni Vigna

## Conference:
2015 IEEE Symposium on Security and Privacy

## Abstract
Mobile applications are integral to the daily lives of billions of people, who often entrust them with sensitive information. Users typically identify the currently active app based on its visual appearance, as the graphical user interfaces (GUIs) of popular mobile operating systems do not provide trusted indicators of the app's origin.

In this paper, we conduct a detailed analysis of the various ways in which Android users can be misled into misidentifying an app, leading to potential security risks such as providing sensitive information to malicious apps. Our analysis of the Android platform APIs, aided by an automated state-exploration tool, has enabled us to identify and categorize numerous attack vectors. These include both previously known and novel attacks, such as non-escapable full-screen overlays, that allow a malicious app to surreptitiously replace or mimic the GUI of other apps, facilitating phishing and click-jacking attacks. The limitations in the system GUI make these attacks significantly harder to detect on mobile devices compared to desktop machines, leaving users vulnerable.

To mitigate these GUI attacks, we have developed a two-layer defense mechanism. First, we created a static analysis tool to detect code in apps that could launch GUI confusion attacks. This tool can identify potentially malicious apps, such as ransomware programs, at the market level. Second, we designed and implemented an on-device defense that addresses the underlying issue of the lack of a security indicator in the Android GUI. We added a secure indicator to the system navigation bar, which reliably informs users about the origin of the app they are interacting with (e.g., the PayPal app is backed by “PayPal, Inc.”).

We evaluated the effectiveness of our proposed defenses through a user study involving 308 participants. The results showed a significant improvement in users' ability to detect attacks when using a system equipped with our defense.

## 1. Introduction
The use of smartphones and tablets is rapidly increasing, becoming the primary means of accessing digital media in many regions [1]. Many users now trust their mobile devices for tasks such as mobile banking and shopping, often through mobile applications, or "apps." This wealth of confidential data has attracted the attention of cybercriminals, leading to a significant rise in mobile malware over recent years [2].

Popular mobile operating systems, including Android, run multiple apps concurrently. For example, a user might be using a mobile banking app and a new game simultaneously. It is crucial to distinguish between these apps, as a game should not receive financial information. However, it is also important for apps to have user-friendly interfaces that maximize limited screen space and interaction possibilities.

Consider a scenario where a user is playing a malicious game. When the user switches to another app, the game remains active in the background. If the user then opens a banking app, the malicious game can change its appearance to mimic the bank’s interface and steal focus, making the user interact with the malicious app instead. The user is unaware of this switch because the GUI appears to be that of the banking app. This deception makes it impossible for the user to detect the attack, leading to the theft of personal banking credentials.

In this paper, we examine this and other GUI confusion attacks, which exploit the user's inability to verify the app currently drawing on the screen and receiving inputs. These attacks are similar to social engineering tactics like phishing and click-jacking but are more difficult to detect on Android devices due to the combination of powerful app APIs and a limited user interface.

Previous research has highlighted the importance of GUI-related attacks on Android, focusing on tapjacking [3], phishing from control transfers [4], and state disclosure through shared-memory counters [5]. Our paper generalizes these techniques and introduces several novel attacks, including a virtual environment that mimics a full Android interface, making it extremely difficult for users to escape the malicious app.

We also propose two novel defenses against GUI confusion attacks. The first uses static code analysis to automatically identify apps that could abuse Android APIs for GUI confusion attacks. The second is an on-device defense that adds a trusted indicator to the Android UI, allowing users to securely identify the app and developer they are interacting with.

## 2. Background
To understand the attack and defense possibilities in the Android platform, it is essential to introduce some key concepts and terms.

### 2.1. Android Platform Overview
The Android platform is based on the Linux operating system and is designed primarily for touchscreen mobile devices. This paper focuses on Android version 4.4, with relevant differences introduced by Android 5.0.

Apps on Android devices are typically pre-installed or downloaded from the Google Play Store or other manufacturer-managed markets. Each app runs in isolation, except for well-defined communication channels. Apps are contained in APK files, which are signed to ensure integrity and authenticity. Once installed, an app is identified by its package name, and only one app with a given package name can be installed at a time.

### 2.2. Android Components
Android apps are composed of four main components:
- **Activity**: Defines a graphical user interface and its interactions.
- **Service**: Runs in the background, performing long-running operations.
- **Broadcast Receiver**: Responds to specific system-wide messages.
- **Content Provider**: Manages data shared with other components.

### 2.3. Permissions
Apps need specific permissions to perform sensitive operations, such as accessing private user data. These permissions must be approved by the user during installation. Some operations require permissions granted only to system apps. Permissions and other properties are defined in the `AndroidManifest.xml` file within the APK.

### 2.4. Android Graphical Elements
The typical Android user interface on a smartphone includes a status bar at the top, showing device state information, and a navigation bar at the bottom, providing buttons for navigating among running apps. The main content area displays the current activity.

Apps draw graphical elements using system-provided components:
- **Views**: Basic UI building blocks, such as buttons, text fields, and images.
- **Activities**: Controllers in a Model-View-Controller pattern, associated with views and defining actions.
- **Windows**: Virtual surfaces where graphical content is drawn.

## 3. GUI Confusion Attacks
In this section, we discuss classes of GUI confusion attacks that enable stealthy and effective phishing and click-jacking operations.

### 3.1. Threat Model
In our threat model, a malicious app is running on the victim’s Android device and can use APIs available to any benign non-system app. We assume the base Android operating system is not compromised, forming a Trusted Computing Base.

### 3.2. Attack Vectors
We have identified several Android functionalities that a malicious app can use to launch GUI confusion attacks. These attack vectors are categorized in Table I.

| Category | Description |
|----------|-------------|
| Full-Screen Overlays | Non-escapable full-screen overlays that mimic legitimate apps. |
| Activity Hijacking | Stealing focus and replacing the top activity. |
| Toast Notifications | Displaying misleading notifications. |
| System Bar Manipulation | Hiding or altering the status and navigation bars. |

These attacks exploit the user's inability to verify the app's origin, making them particularly dangerous on mobile devices.

## 4. Defenses
To mitigate GUI confusion attacks, we propose a two-layer defense mechanism:

### 4.1. Static Analysis Tool
We developed a static analysis tool to detect code in apps that could launch GUI confusion attacks. This tool can identify potentially malicious apps, such as ransomware programs, at the market level.

### 4.2. On-Device Defense
We designed and implemented an on-device defense that adds a trusted indicator to the system navigation bar. This indicator securely informs users about the origin of the app they are interacting with, enhancing user awareness and security.

## 5. Evaluation
We conducted a user study involving 308 participants to evaluate the effectiveness of our proposed defenses. The results showed a significant improvement in users' ability to detect attacks when using a system equipped with our defense.

## 6. Conclusion
This paper systematically studies and categorizes different techniques attackers can use to mount GUI deception attacks on Android. We describe several new attack vectors and introduce a tool to automatically explore reachable GUI states and identify potential attack vectors. We also propose two novel defenses: a static analysis tool for detecting malicious apps and an on-device defense that adds a trusted indicator to the Android UI. Our user study demonstrates the effectiveness of these defenses in helping users identify and avoid GUI confusion attacks.

For the source code of the proof-of-concept attacks and the prototype of the proposed on-device defense, refer to our repository: [GitHub Repository](https://github.com/ucsb-seclab/android-ui-deception).