### 来源与作者
- **来源**: [blog.orange.tw](http://blog.orange.tw/)
- **作者**: [Orange](http://blog.orange.tw/2017/01/bug-bounty-github-enterprise-sql-injection.html)

## 前言
GitHub Enterprise 是由 GitHub.com 提供的一款应用软件，允许用户在其企业内网中部署完整的 GitHub 服务。您可以通过 [enterprise.github.com](https://enterprise.github.com) 下载多种格式的映像文件，并获得 45 天的试用授权。安装完成后，您将看到如下界面：

![GitHub Enterprise 安装完成界面](<此处插入截图>)

现在我们已经拥有了一个完整的 GitHub 环境，并且是在虚拟机（VM）中运行的，这意味着我们可以对其进行全面的控制和深入研究，包括环境、代码及架构等。

## 环境分析
作为一名黑客，在进行入侵之前的第一步通常是端口扫描。通过使用 Nmap 对 VM 进行扫描，我们发现共有 6 个端口对外开放：

```bash
$ nmap -sT -vv -p 1-65535 192.168.187.145
...
PORT     STATE  SERVICE
22/tcp   open   ssh
25/tcp   closed smtp
80/tcp   open   http
122/tcp  open   smakynet
443/tcp  open   https
8080/tcp closed http-proxy
8443/tcp open   https-alt
9418/tcp open   git
```

这些端口的具体作用如下：
- `22/tcp` 和 `9418/tcp`：使用 `haproxy` 协议，将收到的连接转发到后端的 `babeld` 服务。
- `80/tcp` 和 `443/tcp`：提供 GitHub 主要服务。
- `122/tcp`：SSH 服务。
- `8443/tcp`：GitHub Enterprise 的网页管理界面。

值得注意的是，访问 GitHub 的网页管理界面需要管理员密码。如果您拥有该密码，则可以直接通过管理界面添加 SSH 密钥并登录到 `122/tcp` 上的 SSH 服务，从而实现远程代码执行。

通过 SSH 登录后，可以查看整个系统的目录结构。所有服务的代码都位于 `/data/` 目录下，具体结构如下：

```bash
# ls -al /data/
total 92
drwxr-xr-x 23 root              root              4096 Nov 29 12:54 .
drwxr-xr-x 27 root              root              4096 Dec 28 19:18 ..
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 alambic
drwxr-xr-x  4 babeld            babeld            4096 Nov 29 12:53 babeld
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 codeload
drwxr-xr-x  2 root              root              4096 Nov 29 12:54 db
drwxr-xr-x  2 root              root              4096 Nov 29 12:52 enterprise
drwxr-xr-x  4 enterprise-manage enterprise-manage 4096 Nov 29 12:53 enterprise-manage
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 failbotd
drwxr-xr-x  3 root              root              4096 Nov 29 12:54 git-hooks
drwxr-xr-x  4 git               git               4096 Nov 29 12 :53 github
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 git-import
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 gitmon
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 gpgverify
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 hookshot
drwxr-xr-x  4 root              root              4096 Nov 29 12:54 lariat
drwxr-xr-x  4 root              root              4096 Nov 29 12:54 longpoll
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 mail-replies
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 pages
drwxr-xr-x  4 root              root              4096 Nov 29 12:54 pages-lua
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 render
lrwxrwxrwx  1 root              root                23 Nov 29 12:52 repositories -> /data/user/repositories
drwxr-xr-x  4 git               git               4096 Nov 29 12:54 slumlord
drwxr-xr-x 20 root              root              4096 Dec 28 19:22 user
```

尝试读取某个目录下的代码时，会发现代码被加密了。GitHub 使用了一个名为 `ruby_concealer.so` 的自定义库来混淆其代码。通过搜索这个库的名称，可以在 [Gist](https://gist.github.com/geoff-codes/02d1e45912253e9ac183) 上找到解密程序。

解密程序简单地将 `rb_f_eval` 替换为 `rb_f_puts`，从而使原本的 `eval` 操作变为直接输出解密后的代码。然而，作为黑客，我们不能仅仅依赖别人的工具，还需要了解其内部原理。

因此，我们可以使用 IDA Pro 分析二进制文件。从 Hex-Rays 转换的 C 语言代码可以看出，该库首先使用 `Zlib::Inflate::inflate` 解压缩原始数据，然后使用 XOR 和以下密钥进行解密：

```plaintext
This obfuscation is intended to discourage GitHub Enterprise customers from making modifications to the VM. We know this 'encryption' is easily broken.
```

了解原理后，可以编写一个小脚本来解密它：

```ruby
require 'zlib'
key = "This obfuscation is intended to discourage GitHub Enterprise customers from making modifications to the VM. We know this 'encryption' is easily broken. "
def decrypt(s)
    i, plaintext = 0, ''
    Zlib::Inflate.inflate(s).each_byte do |c|
        plaintext << (c ^ key[i % key.length].ord).chr
        i += 1
    end
    plaintext
end

content = File.open(ARGV[0], "r").read
content.sub! %Q(require "ruby_concealer.so"\n__ruby_concealer__), "decrypt"
plaintext = eval content
puts plaintext
```

## 代码审查
在成功反混淆 GitHub 的代码后，我们可以开始进行代码审查。首先，使用 `cloc` 查看项目的整体结构：

```bash
$ cloc /data/
       81267 text files.
       47503 unique files.
       24550 files ignored.
http://cloc.sourceforge.net v 1.60  T=348.06 s (103.5 files/s, 15548.9 lines/s)
-----------------------------------------------------------------------------------
Language                         files          blank        comment           code
-----------------------------------------------------------------------------------
Ruby                             25854         359545         437125        1838503
Javascript                        4351         109994         105296         881416
YAML                               600           1349           3214         289039
Python                            1108          44862          64025         180400
XML                                121           6492           3223         125556
C                                  444          30903          23966         123938
Bourne Shell                       852          14490          16417          87477
HTML                               636          24760           2001          82526
C++                                184           8370           8890          79139
C/C++ Header                       428          11679          22773          72226
Java                               198           6665          14303          45187
CSS                                458           4641           3092          44813
Bourne Again Shell                 142           6196           9006          35106
m4                                  21           3259            369          29433
...
```

接着，查看 Ruby 和 Rails 的版本信息：

```bash
$ ./bin/rake about
About your application's environment
Ruby version              2.1.7 (x86_64-linux)
RubyGems version          2.2.5
Rack version              1.6.4
Rails version             3.2.22.4
JavaScript Runtime        Node.js (V8)
Active Record version     3.2.22.4
Action Pack version       3.2.22.4
Action Mailer version     3.2.22.4
Active Support version    3.2.22.4
```

通过这些步骤，我们对 GitHub Enterprise 的环境和代码有了更深入的了解。