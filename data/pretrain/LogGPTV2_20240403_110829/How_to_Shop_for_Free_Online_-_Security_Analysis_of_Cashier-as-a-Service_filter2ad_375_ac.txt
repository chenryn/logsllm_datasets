to 
two 
result,  even  though  Mark  (the  attacker  A)  is  the  party  that 
receives  the  payment,  the  CaaS  will  redirect  the  shopper’s 
browser  (RT3.a)  to  Jeff  with  a  redirection  to  call 
finishOrder:    redir to  
(jeff.com/finishOrder?payeeEmail&status=PAID &ordered&gross…)C* 
Although  the  message  is  indeed  sent  to  Jeff,  it  is  actually 
about the payment that the attacker made to Mark. The logic 
in finishOrder, as sketched in Figure 6, does not verify 
that  the  payment  was  made  to  Jeff,  and  therefore  is 
convinced that the order has been paid.  
Fundamentally, the problem comes from the confusion 
between  the  merchant  and  the  CaaS  about  what  has  been 
done by the other party. An analogy can be drawn here to a 
real-life scenario in which Jeff first lets the shopper forward 
a signed letter to the CaaS: “Dear CaaS, this shopper should 
pay $10 for order#123. When he pays, write a signed letter 
to  Jeff.  Thanks,  [Jeff’s  signature]”  Later,  Jeff  indeed 
receives a response signed by the CaaS “Dear Jeff, the $10 
payment  for  order#123  has  been  received.  I  am  talking 
about  Mark’s  order#123  (nothing  to  do  with  you).  [CaaS’ 
signature].”  There  are 
the 
misunderstanding  that  causes  this  security  flaw.  First,  the 
CaaS  thinks  that  it  is  fine  to  notify  Jeff  of  Mark’s 
transaction.  Second,  given  the  context  of  the  conversation, 
Jeff  believes  that  the  response  from  CaaS  is  related  to  his 
original letter. Therefore, Jeff only checks that certain parts 
of the response (e.g., orderID, gross) match one of his 
pending  orders.  Because  of  this  misunderstanding,  even 
though  all  the  messages  between  the  two  services  are 
properly signed and verified, the binding between the order 
and the merchant is still broken. 
important  aspects 
Given the format of RT3.a, the only chance for Jeff to 
detect  the  attack  is  to  check  payeeEmail.  Every 
merchant  is  required  to  provide  an  email  address  when 
opening an Amazon seller account. The address is included 
in  RT2.b  as  part  of  the  payment  detail.  Unfortunately, 
neither the CaaS nor the merchant application intend to use 
this  email  address  for  a  security  purpose:  the  CaaS  never 
spells  out  the  need  to  check  this  information,  and  the 
merchant  software  like  NopCommerce  and  Interspire  does 
not even ask for the email address at installation time.  
B.  Commercial Software – Interspire  
Interspire  shopping  cart  is  one  of  the  leading  e-
commerce  applications,  being  used  by  more  than  15,000 
businesses  across  65  countries  [20].  Its  hosting  service, 
BigCommerce  [6],  was  rated  #1  e-commerce  software  for 
2010 and 2011 by TopTenReviews.com [35]. The license fee 
of  Interspire  shopping  cart  software  is  $199.  The  source 
code package is available to its licensees. 
1)  Integration  of  PayPal  Express  –  paying  for  a  cheap 
order to check out an expensive one 
Interspire incorporates over 50 payment methods of all 
major  CaaS  providers.  Its  integrations  of  these  payment 
methods  are 
in 
NopCommerce.    A  prominent  example  is  the  way  it  uses 
typically  more  complex 
those 
than 
470
PayPal  Express 2 ,  as  illustrated  in  Figure  7.  During  a 
checkout,  the  merchant  makes  two  calls  to  the  CaaS.  The 
first  one  is  to  inform  the  CaaS  of  an  upcoming  payment 
(RT1.a.a) with proper authentication data (identity). 
The  CaaS  then  acknowledges  the  message  with  a  token 
string  for  identifying  this  payment  transaction,  which  the 
merchant passes to the shopper (RT1.b). The shopper then 
presents  token  to  the  CaaS,  sets  and  confirms  certain 
information  about  the  payment  (again,  we  represent  these 
steps as a single step RT2.a). After that, the CaaS redirects 
the shopper’s browser to the merchant API finishOrder 
with  token  and  payerID  as  arguments  (RT2.b, 
RT3.a). The code of finishOrder directly contacts the 
CaaS  to  complete  the  payment  (RT3.a.a),  and  then  lets 
the browser call the merchant API updateOrderStatus, 
which updates the status of the order (RT3.b, RT4). Note 
that some messages in this checkout process are not signed, 
which  is  not  a  security  weakness,  as  the  merchant  directly 
verifies the data integrity with the CaaS (RT3.a.a).   
RT1.a: TStore.com/placeOrder 
RT1.b: redir to CaaS.com/pay?tokenC 
RT3.a: TStore.com/finishOrder?tokenA&payerIDA
TStore.com
 (T) 
RT3.b: redir to TStore.com/updateOrderStatus?orderID
RT4.a: TStore.com/updateOrderStatus?orderID
T*
T* 
RT4.b:  Purchase done 
RT2.a: CaaS.com/pay?tokenA 
RT2.b: redir to 
TStore.com/finishOrder?tokenC&payerIDC 
CaaS.com
 (C) 
RT1.a.a: CaaS.com/SetExpCheckout?identityT&…               RT1.a.b: tokenC
RT3.a.a: CaaS.com/DoExpPay?identity T&tokenC&gross T RT3.a.b: resultC
Figure 7: Interspire's integration of PayPal Express 
is 
in 
result 
saved 
Table  II  presents  the  pseudo  code  of  finishOrder 
and  updateOrderStatus.  In  finishOrder,  the  real 
payment  is  done  by  calling  wCall_DoExpPay,  which 
contacts  the  CaaS  through  RT3.a.a  and  RT3.a.b:  if 
identity  and  other  payment  information  is  valid,  the  CaaS 
records  the  payment  and  returns  result = SUCCESS.  
This 
variable 
SESSION[“result”],  a    persistent  variable  that  keeps 
the  state  of  a  shopper  on  the  merchant  website  throughout 
his  login  session.    At  this  point,  the  payment  is  complete, 
and  the  merchant  is  supposed  to  update  the  status  of  the 
order  through  API  updateOrderStatus.  Because  the 
browser  needs  to  be  in  sync  with  the  merchant  state,  the 
merchant  cannot  directly  call  this  merchant-side  API,  but 
needs to redirect the shopper’s browser, passing orderID 
as  an  argument  to  the  API  updateOrderStatus.  To 
prevent  the  shopper’s  tampering,  orderID  is  first  signed 
session 
the 
2 For the simplicity of description, we here focus on the most interesting 
part of the checkout procedure, ignoring some less important details. 
by  the  merchant  in  finishOrder,  and  the  signature  is 
later  verified  within  updateOrderStatus.  The 
merchant  then  retrieves  the  order  from  the  merchant 
database using orderID, and sets the status of the order to 
“PAID”  if  the  session  variable  (SESSION[“result”]) 
of the shopper is SUCCESS. 
TABLE II.  
finishOrder() AND updateOrderStatus() 
finishOrder() { 
result=wCall_DoExpPay(identity,token,gross); 
    //This results in RT3.a.a and RT3.a.b 
 SESSION[“result”]=result; 
 signedOID=sign(orderID); 
 redirect(“/updateOrderStatus?”+ signedOID); 
//This results in RT3.b and RT4.a 
} 
updateOrderStatus() { 
  Verify the signature of orderIDT* in RT4.a 
  If verification fails, then exit; 
  order=LoadOrderByID(orderID); 
  if (SESSION[“result”]==SUCCESS)  
      orderStatus=PAID; 
  SESSION[“result”]=null;     } 
Flaw  and  exploit.  A  problem  here  is  that  as  long  as  a 
properly signed order ID can somehow get into a session in 
the SUCCESS state, updateOrderStatus will mark the 
order  corresponding  to  the  order  ID  as  PAID,  no  matter 
whether  it  has  indeed  been  paid  for.  Therefore,  once  the 
shopper  manages  to  acquire  a  signed  orderID  of  an 
unpaid and more expensive order (denoted by orderID2), 
he  can  replace  orderIDT* in  RT4.a with  orderID2T* 
so  as  to  use  his  current  session  state  (which  is  PAID)  to 
cheat  updateOrderStatus  into  changing  the  status  of 
the  more  expensive  order  into  PAID.    This  enables  the 
shopper to pay for a cheap item but check out an expensive 
one.   Here we show how this can be achieved.  
We  used  two  separate  browsers,  e.g.,  Internet  Explore 
and  Firefox,  to  launch  two  separate  login  sessions.  In  the 
first session, we selected a cheap item and followed all the 
steps  until  RT3.b  was  complete,  but  we  held  RT4.a.  At 
this  moment,  SESSION[“result”] of  this  session  had 
been set to SUCCESS, since the payment was made. Then, 
in the second session, we selected an expensive item, placed 
the  order  (orderID2),  but  skipped  RT2.a.  This  caused 
the  payment  process  (RT3.a.a)  to  fail,  which  was 
reflected  by  the  state  of  the  second  session.  However, 
finishOrder  still  redirected  the  shopper’s  browser 
(RT3.b) to invoke updateOrderStatus. This revealed 
orderID2T* to us, so we could copy-and-paste this signed 
orderID2T* into RT4.a of the first session, and sent it to 
finish the checkout of the expensive item. 
2)  Integration  of  PayPal  Standard  –  stealing  a  payment 
notification and replaying it many times 
Unlike NopCommerce’s integration of PayPal Standard 
in Section  III.A.1, in which the merchant calls the CaaS to 
get  payment  details,  Interspire  adopts  Instant  Payment 
Notification (IPN), an HTTP message that the CaaS uses to 
notify  the  merchant  of  payment  status.  In  Figure  8,  this 
message is shown as RT2.a.a, which is sent immediately 
after  the  shopper  makes  the  payment  through  RT2.a.  To 
use this  notification  method, the  merchant (jeff.com) needs 
to specify an IPN handler URL. Interspire embeds the URL 
of  the  handler  in  RT1.b,  the  message  that  redirects  the 
shopper’s browser to the CaaS through RT2.a: for example, 
Jeff’s 
at 
https://jeff.com/handleIPN.  When  the  CaaS  invokes  this 
handler  through  RT2.a.a,  it  signs  the  argument  list.  The 
handler  verifies  the  signature,  the  order  data  and  the 
payment  data  in  the  IPN  before  updating  the  order  status.  
The  pseudo  code  of  handleIPN is  shown  in  Table  III. 
RT3 is not very important in our discussion here. 
handler 
store 
may 
set 
the 
(A)
RT1.a: jeff.com/placeOrder 
jeff.com (T)
jeff.com/
handleIPN
?(orderIDA& 
C*
grossA&merchantIDA&statusC)
RT2.a.b:   resultT 
RT1.b: redir to CaaS.com/stdPay?orderIDT&
grossT&merchantIDT&IPNHandlerT… 
RT3.a: jeff.com/finishOrder (not important)
RT3.b:  display order status (not important)
A
RT2.a.a: IPNHandler
RT2.a: CaaS.com/stdPay?orderIDA& 
grossA&merchantIDA&IPNHandlerA 
RT2.b: redir to jeff.com/finishOrder 
(C)
Example: IPNHandler= https://jeff.com/handleIPN
Figure 8: Interspire’s integration of PayPal Standard 
Flaw and exploit. LoadOrderByID is one of Interspire’s 
heavily used utility functions. It is called in many situations, 
e.g., when handling a CaaS’ request or handling a browser’s 
request,  therefore  it  is  designed  to  be  generic:  when 
handling a CaaS request, e.g., in handleIPN, the function 
is called with an explicit orderID, as in line 1 of the code. 
However,  a  typical  request  from  the  browser,  such  as 
RT3.a above, does not contain the  orderID  field in the 
request URL. In this situation,  loadOrderByID(empty) 
would  be  called,  and  the  orderID  is  retrieved  from  a 
cookie named ORDER_ID.   
TABLE III.  
PSEUDO CODE OF handleIPN() 
handleIPN() {  
1: order=LoadOrderByID(orderID); 
2: if (order==null || order.status≠PENDING) exit;
3: if (merchantID ≠ Jeff’s ID) exit; 
4: if (gross≠order.gross || status≠PAID) exit; 
5: order.status=PAID; } 
loadOrderByID(orderId) { 
  if (orderId is empty) 
            orderId=COOKIE[‘ORDER_ID’]; 
  find order in database with orderId; 
}
However, 
this  generic  design 
to  be 
problematic  in  PayPal  Standard’s  IPN  mechanism.  The 
attacker can first change the message RT2.a by setting its 
orderID  to  be  empty  and  setting  IPNHandler  to  be 
turns  out 
471
https://mark.com/handleIPN.  This  change  causes  PayPal’s 
IPN  message  to  be  delivered  to  him  via  RT2.a.a,  as 
illustrated in Figure 9.  
RT1.a 
RT1.b 
RT3.a 
RT3.b 
loop 
RT2’.a: jeff.com/handleIPN?(arguments)
 C*
jeff.com/
handleIPN
RT2.a.a: mark.com/handleIPN?(arguments)
 C*
RT2’.b 
mark.com/ 
handleIPN 
RT2.a.b 
RT2.a: CaaS.com/stdPay?orderID=empty&gross& 
merchantID&IPNHandler=https://mark.com/handleIPN
RT2.b 
Figure 9: Multiple checkouts with one payment 
of 
the 
consists 
argument 
This  move  gives  him  an  IPN  message  signed  by  the 
CaaS,  which 
list 
(orderID=empty&gross&merchantID&status)C*. 
Here we denote this string by argumentsC*. By replaying 
this  message, the attacker is  able to check out an arbitrary 