early or very late stages in the execution of the process. For example, exhaustion
may be possible through attacker controlled environment variables that are used
by dynamic libraries during process creation or termination.
The attack snippets were designed to enable the attacks to execute stealthily
(by slowly harvesting resources) and avoid early detection. This is a worst-case
scenario that is much more conservative than current attacks seen in the wild.
For attacks that targeted memory, ﬁle descriptors, and tasks, we allocated 10
memory pages, 1 ﬁle descriptor, and 1 task per each iteration of the attack,
respectively. For stack attacks, we used uncontrolled recursion where each stack
528
M. Elsabagh et al.
frame is approximately 512 bytes. CPU attacks were inﬁnite loops that compute
sqrt and pow operations, where each iteration consumed 4 clock ticks on average.
In general, the attacks covered the following CWE classes4: 400, 401, 404, 674,
770, 771, 772, 773, 774, 775, and 834. Note that the choice of the parameters
does not bias our results because they do not, by themselves, alter the outcome
of the attack or the pattern at which it occurs.
5.3 Resource Exhaustion Results
Experiment 1. The ﬁrst experiment replayed a dataset of ∼60 K unique benign
URLs of incoming HTTP GET requests to our school servers. We used the w3m
browser on the xterm terminal, and the host domains were mirrored and served
using apache. On xterm, w3m renders tables, frames, colors, links, and images.
Radmin monitored both apache and w3m. In the case of apache, the monitoring
was performed per each request handler.
Table 2 shows the results for this experiment. Radmin achieved a FPR of only
11 out of 10,000 requests in the case of w3m. For apache, the number further
decreases to only 4 out of 10,000 requests. In the case of apache, Radmin saved
more than 85 % of the ﬁle descriptors (the maximum of negative runs was 10
ﬁle descriptors). The memory saving for apache is only 5 %, which is due to
the highly centralized distribution of memory consumption of apache during
negative runs (1.19 GB mean, 1.22 GB median, 1.28 GB mode). In the case of
w3m, the maximum saving achieved was 87 % for CPU time (maximum of benign
runs was 56 ticks). Overall, the results show that Radmin can eﬀectively save
resources with very high accuracy.
Table 2. Detection performance for Experiment 1.
FPR %Erl. (mean ± std.)
Task
FP TN
TP
CPU
File
Mem
Prog
apache-2.4.7
6064
5
w3m-0.5.3
14245 20
12167 0.0004 40 ± 23 85 ± 19 12 ± 10 05 ± 03
18684 0.0011 87 ± 08 49 ± 40 25 ± 23 51 ± 27
Experiment 2. The second experiment used 10 common Linux programs. The
functionality test packages that shipped with the programs were used to train
Radmin. The major diﬀerence between this experiment and Experiment 1 is the
lack of input coverage. In Experiment 1, we had suﬃcient input to build a proﬁle
of benign behavior with high conﬁdence. In Experiment 2, the functionality tests
were few, and some of the consumption subsequences were not signiﬁcant to be
learned by the model (see Sects. 4.2 and 5.1), resulting in a higher FPR.
4 For details and code samples, please refer to the CWE project at http://cwe.mitre.
org.
Radmin: Early Detection of Application-Level Resource Exhaustion
529
Table 3. Detection performance for Experiment 2.
TP FP TN FPR %Erl. (mean ± std.)
Task
File
Prog
cmp-3.3
cpio-2.11
diff-3.3
gawk-4.0.1
gzip-1.6
openssl-1.0.1f 380 0
rhash-1.3.1
sed-4.2.2
tar-1.27.1
wget-1.5
22 1
108 6
480 3
55 0
17 0
9 0
24 0
56 0
223 2
109 2
14 0
CPU
98 ± 01 62 ± 32 -
99 ± 01 49 ± 35 -
90 ± 01 65 ± 32 -
Mem
54 ± 39
99 ± 03
55 ± 41
109 0
389 0.0051 81 ± 03 50 ± 29 76 ± 15 28 ± 21
39 ± 48
201 0.0099 77 ± 28 53 ± 35 -
28 ± 38
94 ± 01 77 ± 25 -
594 0
35 0.0278 47 ± 40 62 ± 33 -
57 ± 33
194 0.0300 70 ± 30 62 ± 33 -
80 ± 16
980 0.0031 98 ± 02 82 ± 24 25 ± 24 70 ± 19
50 ± 32
79 0
95 ± 01 79 ± 21 -
The selected programs cover critical infrastructure services that are often uti-
lized by desktop and web applications — namely, compression, text processing
(pattern matching and comparison), hashing, encryption, and remote downloads.
Attacks on compression programs can involve highly-recursive compressed ﬁles
(zip bombs), where decompressing the ﬁles would result in uncontrolled con-
sumption of CPU time and ﬁle descriptors. Attacks on text processing appli-
cations typically use specially crafted regular expressions or data blocks that
result in CPU and memory exhaustion. Hashing and encryption are notorious
for CPU and memory exhaustion through specially crafted or erroneous mes-
sages. Download managers often suﬀer from exhaustion of ﬁle descriptors and
CPU time.
Table 3 shows the results of this experiment. As expected, the FPR is higher
than Experiment 1. Nevertheless, Radmin achieved a low FPR in most of the
cases. For earliness, Radmin achieved high savings for all resources, saving more
than 90 % of CPU time in most cases. This is mainly due to the high skewness
of the CPU time (in clock ticks) distribution of those programs (e.g., 374 mean,
120 median, and 1987 mode for tar). Overall, the results demonstrate the eﬀec-
tiveness of our approach, and the feasibility of using functionality tests to train
Radmin.
We emphasize that the FPR of Radmin is inverse proportional to input cov-
erage. As higher input coverage is achieved, the PFA models used in Radmin
become more complete and the FPR decreases. We discuss this in Sect. 6.1, along
with ways to further increase the earliness of detection.
5.4 Starvation and Livelock Results
In this experiment, we used a number of common resource starvation samples
[6,7,22,27]. Simpliﬁed snippets of the test cases are provided in Appendix B.
530
M. Elsabagh et al.
The test cases spanned the two major resource starvation causes: (1) starvation
due to prolonged holding of resources by other processes, and (2) livelocks due
to busy-wait locking.
The ﬁrst test case, filelock, is a multi-process program that manages exclu-
sive access to resources by holding a lock on an external ﬁle. In this case, starvation
can happen when a process holds the lock for a prolonged time, preventing other
processes from making progress. In the second test case, twolocks, two threads
try to acquire two locks, in reversed order, and release any acquired locks if the two
locks were not both acquired. This is a fundamental livelock case due to unordered
busy-wait locking of resources. Finally, the third test case is a rare bug in sqlite,
when two or more threads fail, at the same time, to acquire a lock.
In this experiment, we ran each test case a 1000 times, and timed out each run
after 20 s. Runs that ﬁnished before the 20 s deadline were considered negative
samples, and runs that did not ﬁnish by the deadline were considered positive.
Table 4 shows the results for this experiment.
Radmin detected the positive samples with high earliness. For filelock,
Radmin saved 59 % of the maximum (8 ticks) of negative filelock runs. In the
case of twolocks, Radmin saved more than 93 % of 12 ticks. For sqlite, Radmin
saved 76 % of 19 clock ticks. Additionally, Radmin achieved 0 FPs and 0 FNs,
indicating that none of the negative samples spent time in a PFA state more
than the spread of the codewords corresponding to all outgoing transitions from
that state. This means that the negative runs showed a set of similar timing
behaviors that were fully learned by the model. Due to the external factors
involved, such as internal parameters of the kernel scheduler, further studies are
needed in order to reach a conclusive understanding of such behavior. Overall,
the results show the promise of our approach, even in starvation situations that
involved multiple processes and threads.
Table 4. Starvation detection performance.
TP FN FP TN TPR FPR %Erl. (mean ± std.)
†
59 ± 26
93 ± 04
76 ± 13
Prog
filelock 570 0
twolocks 705 0
sqlite
460 0
0
0
0
143 1
98 1
180 1
0
0
0
5.5 Overhead
We report the overhead incurred by Radmin, in the online phase, for the pro-
grams used in our experiments as well as for the UnixBench [9] benchmark. We
chose UnixBench because it tests various aspects of the system performance and
uses well-understood and consistent benchmarks. Note, Radmin generated no
false positives for UnixBench. All experiments were executed on machines run-
ning Ubuntu Server 14.04, quad-core 2.83 GHz (base) Intel Xeon X3363 processor
and 8 GB of memory. The overhead is summarized in Fig. 4. Radmin incurred
Radmin: Early Detection of Application-Level Resource Exhaustion
531
less than 16 % overhead, with mean overhead (geometric) of 3.1 %. The runtime
overhead is more pronounced in CPU bound programs that were more frequently
interrupted by the heartbeat thread. Overall, since Radmin avoids sampling, uses
static rewriting, and selectively traces a particular set of events, the overhead
incurred is signiﬁcantly less than generic dynamic instrumentation and proﬁling
tools (more than 200 % runtime increase [36,39]).
Fig. 4. Runtime overhead incurred by Radmin, in the online phase, for theprograms
used in Experiments 1 and 2 (left), and the UnixBench benchmark (right).
6 Discussion and Limitations
6.1 Higher Accuracy and Earliness
The PFA model used in Radmin learns only the subsequences that have signif-
icant prediction probability (see Sect. 4.2), which means that some benign but
rare subsequences may not be learned by the PFA. Such subsequences would be
erroneously ﬂagged as attacks (false positives), since they traverse low proba-
bility paths in the PFA. Although it is straightforward to force the inclusion of
such subsequences in the PFA by adjusting the transition probabilities of their
corresponding paths, we decided against doing so in order to give a clear and
realistic view of the eﬃcacy of the system. However, Radmin has the nice prop-
erty that the FPR is inverse proportional to input coverage, i.e., as benign input
coverage increases, the number of benign rare subsequences decreases and the
PFAs become eventually complete.
Leveraging more information about the target process can allow Radmin
to achieve higher earliness. For example, we can associate input values and
attributes with paths in the PFAs. The challenges here are reaching a reliable
model for representing and matching various input vectors, such as command
line arguments, ﬁle IO, environment variables, and succinctly associating the
input with paths in the PFAs. Given such a model, we can traverse the PFAs
without actually executing the program. That would give the near-optimum
earliness, since traversing the PFAs is much cheaper than running the target
532
M. Elsabagh et al.
program itself. Also, one can synthesize static input ﬁlters from the PFAs. We
plan to explore these ideas in more details in our future work.
6.2 Behavior Conﬁnement
Radmin can be used to conﬁne the behavior of processes to users rather than
only detecting anomalous usage. Depending on how each user uses a program,
Radmin will learn diﬀerent behavior that is speciﬁc to the user. This can help
defend unknown attacks by detecting anomalous, but valid, consumption of
resources. Radmin can be easily extended to seal oﬀ paths of infrequent or
undesired resource usage in protected programs by adjusting the conditional
distributions in the PFAs. Similarly, Radmin can be used to construct a proﬁle
of speciﬁc behavioral aspects of target programs, such as sequences of executed
events or ﬁles accessed. It can also conﬁne the behavior of protocols, which is
currently in our future work.
6.3 Attacker Knowledge of Radmin
Attackers could potentially attempt to employ Radmin to learn the PFAs for a
target program, then craft input that maximizes the consumption of the program
by steering the execution to paths of high resource consumption. We argue that
such an attack is not a resource exhaustion attack per se. The reason is that if
the PFA contains a path of high resource consumption, that means some typical
benign input to the program does exercise that path, and the subsequences of
the path are statistically signiﬁcant. Therefore, the consumed resources cannot
amount to an exhaustion, otherwise the input should have not been accepted (as
benign) by the program in the ﬁrst place. In this case, rate limiting techniques
can be employed to throttle the rate of requests (whether benign or not) that
exercise such paths. Nevertheless, Radmin still limits the potential of the attacks
to cause actual resource exhaustion damage, by conﬁning them to only high
probability paths in the PFAs. In other words, the attacker has to identify a
PFA path that exhibits high resource consumption, but such path might not be
present in many of the programs.
6.4 Accuracy of Recursive Sites Identiﬁcation
Dyninst ParseAPI uses recursive traversal parsing to construct the CFG, and
employs heuristics to identify functions that are reached only through indirect
ﬂows. The resulting CFG may be incomplete, which might cause the User Tracer
to miss some recursive code sites if the recursion is chained using indirect calls
that ParseAPI could not resolve. While we argue that such construct is rare in
practice, it can be addressed by dynamically tracing indirect calls using a shadow
call stack, at the expense of increased runtime overhead. We plan on exploring
this option as part of our future work.
Radmin: Early Detection of Application-Level Resource Exhaustion
533
6.5 Exhaustion Through Separate Runs
The current monitoring approach monitors consumption that lives only within
individual processes. This does not allow detection of attacks that span multiple
runs of some target program. For example, if a program creates a new ﬁle every
time it runs, excessively running the program can exhaust the storage space.
Extending Radmin to monitor consumption of system resources across separate
runs is straightforward.
7 Related Work
Modern operating systems oﬀer a number of threshold-based facilities to limit the
resource consumption of processes (e.g., setrlimit, ulimit, AppArmor). Those
facilities, while widely available, fall short of detecting or mitigating resource
exhaustion and starvation attacks, for two reasons. First, the limits are set irre-
spective of the actual consumption of diﬀerent program segments for diﬀerent
inputs or users. This enables attackers to exhaust resources by crafting input that
consumes the highest possible resources, for prolonged times [17,18,26]. Second,