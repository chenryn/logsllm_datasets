title:Advanced System Resiliency Based on Virtualization Techniques for
IoT Devices
author:Jonas R&quot;ockl and
Mykolai Protsenko and
Monika Huber and
Tilo M&quot;uller and
Felix C. Freiling
Advanced System Resiliency Based on Virtualization Techniques
for IoT Devices
Jonas Röckl
PI:EMAIL
FAU Erlangen-Nürnberg
Erlangen, Germany
Mykolai Protsenko
Fraunhofer AISEC
Monika Huber
Fraunhofer AISEC
PI:EMAIL
PI:EMAIL
Garching near Munich, Germany
Garching near Munich, Germany
Tilo Müller
PI:EMAIL
FAU Erlangen-Nürnberg
Erlangen, Germany
Felix C. Freiling
PI:EMAIL
FAU Erlangen-Nürnberg
Erlangen, Germany
ABSTRACT
An increasing number of powerful devices are equipped with net-
work connectivity and are connected to the Internet of Things (IoT).
Influenced by the steady growth of computing power of the de-
vices, the paradigm of IoT-based service deployment is expected to
change, following the example of cloud-based infrastructure: An
embedded platform can be provided as-a-service to several indepen-
dent application service suppliers. This fosters additional challenges
concerning security and isolation. At the same time, recently re-
vealed critical vulnerabilities like Ripple20 and Amnesia:33 show
that embedded devices are not spared from wide-spread attacks.
In this paper, we define new trusted computing concepts, fo-
cusing on privilege separation among several entities sharing one
physical device. The concepts guarantee remote recovery capabili-
ties within a bounded amount of time, even if notable portions of
the software stack have been compromised. We derive a resilient
system architecture suitable for the secure operation of multiple
isolated services on one embedded device. We integrate an inter-
face for detecting intrusions and anomalies to enable the automatic
recovery of compromised devices and prototype our system on a
Nitrogen8M development board. Our evaluation shows that the
overhead in terms of network throughput and CPU performance
is low so that we believe that our concept is a meaningful step
towards more resilient future IoT devices.
CCS CONCEPTS
• Security and privacy → Embedded systems security; Intru-
sion detection systems; Trusted computing; Virtualization and
security.
KEYWORDS
trusted computing; cyber resilience; recovery; virtualization
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8579-4/21/12...$15.00
https://doi.org/10.1145/3485832.3485836
ACM Reference Format:
Jonas Röckl, Mykolai Protsenko, Monika Huber, Tilo Müller, and Felix C.
Freiling. 2021. Advanced System Resiliency Based on Virtualization Tech-
niques for IoT Devices. In Annual Computer Security Applications Conference
(ACSAC ’21), December 6–10, 2021, Virtual Event, USA. ACM, New York, NY,
USA, 13 pages. https://doi.org/10.1145/3485832.3485836
1 INTRODUCTION
During the last years, notable progress has been made in terms of
memory protection on embedded devices [24, 59–61]. Even though
formal verification might be able to help with proving a secure
design and implementation, it is cumbersome if not impossible
because of the high complexity of contemporary computer systems.
Thus, we have to accept that systems might never be able to fend
off every attack and improve device recoverability in case of a
security incident. New concepts to build resilient systems for the
in increasing number of IoT devices [41] have to be developed. To
motivate the need for resilient [8] systems, we outline a few attacks
that are specifically targeted to IoT devices:
• The Mirai botnet controlled up to 600,000 poorly-secured IoT
devices to utilize them for volumetric DDoS attacks [2]. Sim-
ilarly, the Hajime botnet hijacked a considerable number of
IoT devices. The Hajime botnet explicitly targets embedded
CPU architectures (e.g. ARM) [38].
• The term Ripple20 refers to a set of vulnerabilities in a propri-
etary network stack for IoT devices [57]. For example, CVE-
2020-11901 enables remote code execution [75]. Although
the vulnerability has been patched, many vulnerable devices
do not support any update functionalities [80].
• Similarly, AMNESIA:33 is a set of 33 vulnerabilities of mul-
tiple open-source TCP/IP stacks. Multiple products and de-
vices are affected, often without any knowledge of the main-
tainers [46].
One of the reasons for the success of these attacks is the structure
of an IoT system: Typically, a setup consists of (many) multiple
embedded devices. Additionally, there is a control server, called
the hub. While the devices can transmit data (e.g. sensor data) to
the hub, the hub can transmit control instructions (e.g. software
updates) to the devices. Given the potential geographical dispersion
of an IoT deployment, manually recovering an embedded device
after a successful attack is an expensive task.
455ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Röckl, et al.
As the computational power of embedded devices constantly
increases and their applications become more diverse, manifold,
and complex, we anticipate a paradigm shift of IoT-based service
deployment to occur in the nearest future, following the example
of cloud-based infrastructure. We assume an IoT platform and one
or more services (running on it) to be provided by organizationally
independent entities. This allows for a cost-efficient sharing of one
physical device among providers of several unrelated services. Each
service provider benefits from the managed secure platform but
requires strong isolation from other services at the same time to
maintain full control over the own application. In this paper, we
show how these requirements can be achieved in combination with
strong system resiliency and guaranteed recovery. Additionally, we
inherently integrate an interface for reliable intrusion and anomaly
detection. This way, a remote administrator is able to, first, detect
if a device recovery process is necessary and, second, trigger the
device recovery process even if notable portions of the device have
already been compromised.
This paper makes the following contributions:
• We define the concepts of strong dominance and weak domi-
nance as new, fine-granular trusted computing concepts for
the field of resilient IoT deployments.
• A novel application-level protocol for the communication be-
tween an IoT device and a remote administrator is proposed.
The protocol allows the recovery of the embedded device
and integrates a back-channel to the remote administrator
for passing information related to intrusion and anomaly
detection. Those may be used to trigger the recovery process
of an IoT device, even if significant parts of the software are
compromised.
• A system architecture, which relies on the previously de-
fined concepts, is derived. We propose a system that allows a
remote administrator to recover an embedded device even af-
ter a severe software compromise. The system architectures
are designed to provide high-assured recoverability and an
interface for intrusion and anomaly detection for future IoT
deployments.
• We implement a prototype on an ARMv8-A device, the Ni-
trogen8M [20]. We discuss the security regarding a multi-
layered defense model and provide an evaluation of the CPU
performance and the network throughput, showing the prac-
ticability of our prototype.
2 THREAT MODEL
A powerful attacker is assumed, which uses remote communication
channels to break into the device. Ultimately, the adversary tries
to escalate their privileges and take over the complete device. The
attack surface consists of every software entity, which is exposed
to remote communication channels directly or indirectly. The at-
tacker is almost as powerful as a Dolev-Yao attacker [22], with one
exception: It is assumed that an attacker cannot block the communi-
cation channel between the device and the hub indefinitely. Instead,
only temporary interruptions of the device-hub communication
can be induced by an adversary. In particular, it is assumed that
long-standing Denial of Service (DoS) attacks can be mitigated on
the infrastructure level [40, 78]. Furthermore, the hardware is as-
sumed to work according to the specification of the manufacturers.
Side-channel attacks and physical attacks are out of scope. Finally,
securing the hub is out of the scope of this paper. The hub can be
secured relying on a full range of existing security techniques for
servers.
3 BACKGROUND
This section contains background information for the rest of the
paper.
3.1 Notation
A key pair of entity A consists of a public key KA and a corre-
sponding private key K−1
A . A certificate binds an identifier (e.g. a
hostname) to a public key. A Certificate Authority (CA) with its keys
KCA and K−1
CA can sign another certificate by signing a combination
of an identifier and a public key. A certificate for party A is then
denoted as {A, KA}KCA
−1. H is used to describe a cryptographically
secure hash function. The term a||b denotes concatenation.
3.2 Latches
A latch [78] is a memory-locking mechanism for persistent storage.
A latch has a state {open, locked}. After the boot of the device, a
latch is in the state open. If one closes the latch (e.g. by setting a
hardware configuration register), the associated persistent memory
location is either write-protected (WRLatch) or read-write protected
(RWLatch). Once locked, the latch cannot be unlocked. A device
reset is required to reach the state open again.
3.3 DICE
In contrast to the TPM specification [36], the Device Identifier Com-
position Engine (DICE) [35] has less hardware requirements[40, 78].
A DICE-enabled device can offer static remote attestation. The trust
anchor is a static, unchangeable device secret, called Unique De-
vice Secret (UDS). The following steps are conducted during device
boot to set up a trusted boot chain: (1) DICE computes a measure-
ment H(C1) of the first modifiable code C1 on the device. (2) DICE
aggregates H(C1) and the UDS, forming the Compound Device
Identifier (CDI). The CDI is calculated as CDI = H(U DS||H(C1)).
(3) DICE RWLatches the UDS to protect it from future read and
write accesses. (4) DICE transfers control to the next boot stage
C1, passing the CDI as a parameter. (5) The boot stage C1 utilizes
CDI to derive a key pair (KD and K−1
D ) for static remote attestation.
During provisioning, the hub gets to know KD. After deployment,
the current state of the device is statically remote attested if the
device is able to create valid signatures with K−1
D .
A software update of C1 leads to a new key pair KD and K−1
D .
There is no way to prove the hub that C1 was successfully updated
and to re-associate key material.
3.4 DICE++
Huber et al. introduced DICE++ [40], which can prove a hub that
an update to an early-boot stage (C1, Section 3.3) was successfully
applied. The identity re-association after an update to C1 is based
on a pre-shared, static secret called static_sym and a unique, pre-
shared device identifier dev_uuid.
456Advanced System Resiliency Based on Virtualization Techniques for IoT Devices
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
3.5 Gated Boot
Gated boot [78] ensures that the device boots software that is authen-
ticated by a hub. If the authentication fails, gated boot downloads,
authenticates, and boots software from the hub instead. In contrast,
secure boot blocks if no authentication is possible.
After a reset, DICE (Section 3.3) is executed. Gated boot checks
if there is a hub-signed patch (e.g. an update) stored in the so-called
staging area, which is a designated area on persistent storage. If so,
the patch is installed and the device is reset again. If no patch is
found, gated boot checks if a boot ticket is found in the staging area.
A boot ticket is a hub-signed data structure, which authenticates
the boot of the device. A subsequent boot stage may have retrieved
and stored such a ticket from the hub before the device was reset. If
a boot ticket is found, gated boot latches itself and continues to boot
the device. If no boot ticket is found, retrieves a boot ticket from the
hub via the network. To prevent an attacker from modifying early-
boot code, every code related to gated boot and DICE is WRLatched
before any network communication takes place. When a boot ticket