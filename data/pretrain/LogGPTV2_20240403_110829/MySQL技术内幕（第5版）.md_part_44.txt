如果想要重用那些从序列顶端删除了的值，你也可以用这个语句来设置。把编号计数器
当前编号为1000，那么下面这条语句将使下一个生成的编号值变为2000：
可以使用 ALTERTABLE来更改某个已有 MyISAM表的当前序列计数器。例如，序列的
ALTER TABLEmytb1 AUTO_INCREMENT=2000;
应用到哪一列，绝不会引起歧义。
CREATE TABLE mytbl
其中带有一个名为 Seq的 AUTO_INCREMENT 列，其起始值为1000 000：
AUTO_INCREMENT=n选项显式地指定初始值。下面这个示例会创建一个 MyISAM表，
行
的；并且在行被删除之后，不会被重用。如果最大值是143，而你删除了包含这个值的
存储引擎特有的AUTO_INCREMENT属性
个新的序号值。
第3章数据类型
用。（此项技术随后将被讨论到。）
口
一个表只会有一个AUTO_INCREMENT 列，因此末尾的那个AUTO_INCREMENT=n选项会
ENGINE=MYISAM AUTO_INCREMENT=1000000;
PRIMARY KEY (Seq)
Seq INT UNSIGNED NOT NULL AUTO_INCREMENT,
如果在表里使用了复合索引来生成多个序列，那么从序列顶端删除的那些值将被重
如果使用TRUNCATETABLE清空了表，那么计数器将被重置为从1开始。
，那么MySQL生成的下一个值仍然是144。不过，这种行为存在以下两种例外情况，
(proj_name,bug_id)
VARCHAR(100),
INT UNSIGNED NOT NULL AUTO_INCREMENT,
---
## Page 187
3.4.2.3MEMORY表的 AUTO_INCREMENT 列
3.4.2.2InnoDB 表的 AUTO_INCREMENT 列
与MyISAM表的不重用序号值的行为有所不同。
毫无关系。在输入另一个项目的行之前，你不用先全部输入某个项目的所有行。
bug，以及 SpamSquisher项目的2个bug：
成一个互不干扰的序列编号。
个 AUTO_INCREMENT 列，通过创建一个与 proj_name 列相关联的索引，可以为各个项目分别生
如果使用复合索引来创建多个序列，那么从各个序列顶端删除的值都可以被重用。这一点
MEMORY存储引擎拥有以下AUTO_INCREMENT特征。
InnoDB 存储引擎拥有以下AUTO_INCREMENT 特征。
这个表为每一个项目的bug_id 值进行了单独的编号，整个过程与这些项目的行输入顺序
mysql> INSERT INTO bugs (proj_name,description)
其中，proj_name 列用于标识项目名，description 列用于存放 bug描述。bug_id列是一
口在表里，不能使用复合索引生成多个独立的序列。
口如果生成AUTO_INCREMENT值的事务被回滚，那么在序列里可能会出现断裂。
口
mysql> SELECT *FROM bugs ORDER BY proj_name, bug_id;
表的最终内容如下所示：
mysql>
mysql>
mysql>
mysql>
SuperBrowser
ENGINE = MYISAM;
句里使用AUTO_INCREMENT表选项所带来的效果。
这些删除的值将会被重用。重启服务器还将取消在CREATETABLE或ALTERTABLE
内部。这意味着，如果从这个序列的顶端删除了某些值，然后又重启了服务器，那
满足生成后续序号值的需要，InnoDB 是在内存里维护这个计数器——它并未存储在表
得到的结果作为新生成的序号值（如果表此前为空，那么新的序号值为1）。其次，
先，在首次为AUTO_INCREMENT列生成序号值时，InnoDB会把列的当前最大值加上！
序列将被重置，并重新从1开始编号。此外，在满足后面几个条件时也可以重用。
从序列顶端删除的值通常不能再重用。不过，如果使用TRUNCATETABLE 清空表，那么
并且在表创建之后，还可以使用ALTERTABLE来进行更改。
在CREATETABLE语句里，可以使用AUTO_INCREMENT=n表选项来设置初始序列值，
SuperBrowser
SuperBrowser
SpamSquisher
SpamSquisher
->VALUEs('SuperBrowser','background patterns not displayed'）;
INSERT
VALUES('
INSERT
VALUEs('SpamSquisher','fails to block known blacklisted domains'）;
INSERT
VALUES('
INSERT
VALUEs('SuperBrowser','crashes when displaying complex tables');
T INTo bugs (proj_name,description)
T INTO bugs
INTO bugs
 INTo bugs (proj_name,description)
'SuperBrowser'
bug_id | description
。假设，需要把下面几行输到表里，记录SuperBrowser项目的3个
23
2
(proj_name,description)
(proj_name,description)
background patternsnot displayed
crashes when displaying complex tables
fails to respect whitelist addresses
fails to block known blacklisted domains
3.4处理序列
167
语
为
一
具
---
## Page 188
MySQL会自动把序列值赋给AUTO_INCREMENT 列：
来增加一个 AUTO_INCREMENT 列，所定义的类型与CREATETABLE 语句里使用的类型一样。
3.4.4.1为表增加一个序列编号列
3.4.4AUTO_INCREMENT列的使用提示
3.4.3使用AUTO_INCREMENT列需要考虑的问题
168
本节将讨论使用AUTO_INCREMENT列时可以用到的一些实用技术。
mySql> SELECT * FROM t;
MySql> ALTER TABLE t ADD i INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY;
接着，你想要为这个表增加一个序列编号列。
mysql>SELECT
mysql>INSERT
mySql> CREATE TABLE t(c CHAR（10));
假设，你创建并填充了一个表：
口使
口
口
在使用AUTO_INCREMENT列时，为避免陷入不必要的麻烦，请牢记以下几点。
口在表里，不能使用复合索引生成多个独立的序列。
口从序列顶端删除的值通常不能再重用。不过，如果使用TRUNCATE TABLE 清空表，那么
口在CREATETABLE语句里，可以使用AUTO_INCREMENT=n表选项来设置初始序列值，
b
C
AUTO_INCREMENT 机制的主要用途是生成一个正整数序列。AUTO_INCREMENT列不支持
序列将被重置，并重新从1开始编号。
并且在表创建之后，还可以使用ALTER TABLE来进行更改。
DELETE FROM tbl_name WHERE TRUE;
语句会迫使MySQL针对每行计算一次条件，然后单独地删除每行：
致序列编号信息出现丢失。如果想在删除所有行的同时把序列信息保留下来，那么可
速丢弃全部的行和索引，并且从头开始重建该表，而不是一次删除一行。这样做将与
以会重置序列，是因为MySQL需要对整表的删除操作进行优化。只要有可能，它会性
1开始。即使对于那些通常不会重用AUTO_INCREMENT 值的存储引擎，也是如此。之所
使用TRUNCATETABLE语句来清除某个表的内容，可以把该表的计数序列重置为重新从
限会扩充到255，不过它还是很有限。
AUTO_INCREMENT序列总是会受到底层数据类型的取值范围的约束。例如，如果你使
把AUTO_INCREMENT添加到列的定义里，并不能得到无穷尽的序列编号
的序列编号
型列，使用UNSIGNED 还有一个好处：在达到该数据类型的范围上限前，可以获得两倍
使用非正数。因此，我们还可以把AUTO_INCREMENT 列定义为UNSIGNED 类型。对于整
第3章数据类型
便
更会因“键重复”
为是一个TINYINT列，那么序列编号的最大值即为127。一旦达到这个上限，应用程序
号。
INTO tVALUES('a'),('b'),('c）;
FROMt;
错误而失败。如果使用的是TINYINTUNSIGNED，那么序列编号的上
为做到这一点，可以执行ALTER TABLE语句
快
该
---
## Page 189
也不会获得任何性能上的提高。此外，如果在另一个表里有行引用了AUTO_INCREMENT列里的
而且通常没有必要这么做。MySQL并不会在意序列里是否存在有断裂，并且在重置序列编号户
1开始编号。
略AUTO_INCREMENT子句，因为它们不允许使用这样的方式设定序列的初始值。这个序列将从
InnoDB表，可以把序列的起始编号设置为不等于1的其他数。对于其他的存储引擎，则可以忽
当MySQL添加列时，会自动分配新的序列号。
除行而在序列里产生的断裂。实现这一目标的最简单办法是：先删除该列，然后再重新添加它。
3.4.4.2重置已有列的序列编号
虽然可以轻易地重新设置列的编号，但是“要怎么才能做到呢？”这个问题仍然很常见
AUTO_INCREMENT=1子句将把序列的起始编号重置为1。对于MyISAM、MEMORY或
如果表已经有了一个AUTO_INCREMENT列，但是你想要对其进行重新编号，以便消除因删
mySql> SELECT *FROMt;
mysql> ALTER TABLE t
下面的ALTERTABLE语句将依次删除列，再重加它，重回的过程中会对列重新编号：
mysql>
mysql>
mysql>
mysql>
假设，有这样一个表t，其中的i为一个AUTO_INCREMENT列：
6
C
C
C
e
->vALUEs（'a)，(b)，('c),(d)，(e)，(f)，('g），(h)，(i)，(j)，(k）;
>
>
+--
AUTO_INCREMENT =
SELECT
DELETE
INSERT INTOt（C)
ADD i INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
DROPi,
DROP PRIMARY KEY,
li
NOT NULL PRIMARY KEY);
CREATE TABLE t （C CHAR(1O),i INT UNSIGNED AUTO_INCREMENT
5
2
23
人
2
FROM
FROMt;
tWHERE
1;
3.4处理序列
---
## Page 190
它们所使用的名字有所了解。就Web计数器而言，可以使用每个页面在文档树里的路径名作为计
免计数器的名字出现重复，它还被定义成了PRIMARYKEY。这里假定使用这个表的应用程序，对
确定它应该应用于哪一行。例如，可以用下面的语句来创建这样一个表：
存计数器的当前值。你仍可以使用LAST_INSERTED_ID（）函数，但需要根据计数器的名字来
计数器单独增加一行。假设，你有一个网站，想要实现“本网页已被访问过n次”的页计数
列编号，你也会检索到正确值。
的，因此即使在UPDATE和 SELECT两个操作之间的时间间隔里，其他客户端程序又生成多个序
过不带参数调用LAST_INSERT_ID（）的方式来检索它。LAST_INSERT_ID（）函数是客户端专用
利用LAST_INSERT_ID(Seq+1)生成的新编号值，与AUTO_INCREMENT 值很相像，因此可以通
序列编号，并对它进行检索，可以这样做：
值会受到其他客户端程序活动的影响。
达式expr的值。换句话说，MySQL会把表达式expr当作是一个新生成的 AUTO_INCREMENT
它使用的是LAST_INSERT_ID（）函数的另一种带参数的形式。如果在插入或修改一个列时使用
3.4.5在无AUTO_INCREMENT的情况下生成序列
器
面这条语句，将生成一个步长为100的序列：
一个值时都会进行更新的值。
值
值，那么调整该列的编号将破坏这两个表之间的对应关系。
器
170
。为此，创建一个具有两个列的表：一列用于保存计数器的唯一标识；而另一列则用于保
直。因此，你可以先创建一个序列编号，然后在随后的会话中检索它，同时不用担心这个编号
其中，name 列是一个字符串，因此你可以把计数器命名为你想要的任何名字。同时，为了避
利用这种方法，可以生成步长不为1（甚至可以为负值）的序列编号。例如，反复执行下
这种策略的一种用途是，
UPDATE Seq_table SET seq= LAST_INSERT_ID(seq+100);
上面的 UPDATE 语句将检索 seq 列的当前值,并把它加上1,从而产生该序列的下一个编号。
上面这些语句会创建一个只有一个行的 seq_table 表，其中 seq 的值为0。为生成下一个
CREATE TABLE Seq_table (seq INT UNSIGNED NOT NULL);
MySQL支持一种生成序列编号的办法，它根本不需要使用AUTO_INCREMENT列。事实上，
CREATE TABLE counter
则可以这样做：首先给这个表增加一列，用作计数器的标识符；然后在这个表里为每个
前面的讨论描述了如何利用一个只包含一行的表来建立一个计数器。如果需要多个计数
你也可以生成一个从任意值开始编号的序列，只要给seq列设置一个合适的初始值就行。
UPDATE Seq_table SET Seq= LAST_INSERT_ID(seq-1);
反复执行下面这条语句将生成一个递减序列：
SELECT
INSERT
PRIMARY KEY (name)
name VARCHAR(255) CHARACTER SET latin1 COLLATE latin1_general_cs NOT NULL,
value
第3章数据类型
INT UNSIGNED
INTO seq_table VALUES(O);
，例如，可以像下面这样创建和初始化这个表：
，创建一个只有一个行的表，其中包含一个在每次需要该序列里下
用