title:OblivP2P: An Oblivious Peer-to-Peer Content Sharing System
author:Yaoqi Jia and
Tarik Moataz and
Shruti Tople and
Prateek Saxena
OblivP2P: An Oblivious Peer-to-Peer  
Content Sharing System
Yaoqi Jia, National University of Singapore; Tarik Moataz, Colorado State University and 
Telecom Bretagne; Shruti Tople and Prateek Saxena, National University of Singapore
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/jia
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX OBLIVP2P: An Oblivious Peer-to-Peer Content Sharing System
Yaoqi Jia1∗
Tarik Moataz2∗
Shruti Tople1∗
Prateek Saxena1
1National University of Singapore
{jiayaoqi, shruti90, prateeks}@comp.nus.edu.sg
2Colorado State University and Telecom Bretagne
PI:EMAIL
Abstract
Peer-to-peer (P2P) systems are predominantly used to
distribute trust, increase availability and improve perfor-
mance. A number of content-sharing P2P systems, for
ﬁle-sharing applications (e.g., BitTorrent and Storj) and
more recent peer-assisted CDNs (e.g., Akamai Netses-
sion), are ﬁnding wide deployment. A major security
concern with content-sharing P2P systems is the risk of
long-term trafﬁc analysis — a widely accepted challenge
with few known solutions.
In this paper, we propose a new approach to protecting
against persistent, global trafﬁc analysis in P2P content-
sharing systems. Our approach advocates for hiding
data access patterns, making P2P systems oblivious. We
propose OBLIVP2P— a construction for a scalable dis-
tributed ORAM protocol, usable in a real P2P setting.
Our protocol achieves the following results. First, we
show that our construction retains the (linear) scalability
of the original P2P network w.r.t the number of peers.
Second, our experiments simulating about 16,384 peers
on 15 Deterlab nodes can process up to 7 requests of
512KB each per second, suggesting usability in mod-
erately latency-sensitive applications as-is. The bottle-
necks remaining are purely computational (not band-
width). Third, our experiments conﬁrm that in our con-
struction, no centralized infrastructure is a bottleneck —
essentially, ensuring that the network and computational
overheads can be completely ofﬂoaded to the P2P net-
work. Finally, our construction is highly parallelizable,
which implies that remaining computational bottlenecks
can be drastically reduced if OBLIVP2P is deployed on
a network with many real machines.
1
Introduction
Content sharing peer-to-peer (P2P) systems, especially
P2P ﬁle-sharing applications such as BitTorrent [1],
Storj [2] and Freenet [3] are popular among users for
∗Lead authors are alphabetically ordered.
1
sharing ﬁles on the Internet. More recently, peer-assisted
CDNs such as Akamai Netsession [4] and Squirrel [5]
are gaining wide adoption to ofﬂoad web CDN trafﬁc to
clients. The convenient access to various resources at-
tract millions of users to join P2P networks, e.g., BitTor-
rent has over 150 million active users per month [6] and
its ﬁle-sharing service contributes 3.35% of all world-
wide bandwidth [7]. However, the majority of such P2P
applications are susceptible to long-term trafﬁc analy-
sis through global monitoring; especially, analyzing the
pattern of communication between a sender and a re-
ceiver to infer information about the users. For exam-
ple, many copyright enforcement organizations such as
IFPI, RIAA, MPAA, government agencies like NSA and
ISP’s are reported to globally monitor BitTorrent trafﬁc
to identify illegal actors. Monitoring of BitTorrent traf-
ﬁc has shown to reveal the data requested and sent by the
peers in the network [8–10]. Unfortunately, while detect-
ing copyright infringements is useful, the same global
monitoring is applicable to any user of the P2P network,
and can therefore collect benign users’ data. Thus, users
of such P2P systems are at a risk of leaking private infor-
mation such as the resources they upload or download.
To hide their online traces, users today employ anony-
mous networks as a solution to conceal their digital
identities or data access habits. Currently, anonymous
networks include Mix networks [11–13], and Onion
routing/Tor-based systems [14–17], as well as other P2P
anonymity systems [18–23]. Such systems allow the user
to be anonymous, so that the user is unidentiﬁable within
a set of users [24].
Although above solutions provide an anonymity guar-
antee, they are vulnerable to long-term trafﬁc pattern
analysis attacks, which is an important threat for P2P sys-
tems like BitTorrent [25–30]. Researchers have demon-
strated attacks targeting BitTorrent users on top of Tor
that reveal information related to the resources uploaded
or downloaded [31, 32]. Such attacks raise the question
- is anonymizing users the right defense against trafﬁc
USENIX Association  
25th USENIX Security Symposium  945
pattern analysis in P2P content sharing systems?
tributing the communication and computation overhead.
In this paper, we investigate a new approach to solve
the problem of persistent analysis of data communication
patterns. We advocate that data / resource access pattern
hiding is an important and necessary step to thwart leak-
age of users data in P2P systems. To this end, we present
a ﬁrst candidate solution, OBLIVP2P— an oblivious pro-
tocol for peer-to-peer content sharing systems. Hiding
data access patterns or making them oblivious unlinks
user’s identity from her online traces, thereby defending
against long-term trafﬁc monitoring.
1.1 Approach
For hiding data access patterns between a trusted CPU
and an untrusted memory, Goldreich and Ostrovsky pro-
posed the concept of an Oblivious RAM (ORAM) [33].
We envision providing similar obliviousness guarantees
in P2P systems, and therefore select ORAM as a start-
ing point for our solution. To the best of our knowledge,
OBLIVP2P is the ﬁrst work that adapts ORAM to ac-
cesses in a P2P setting. However, directly employing
ORAM to hide access patterns in a P2P system is chal-
lenging. We outline two key challenges in designing an
oblivious and a scalable P2P protocol using ORAM.
Obliviousness. The ﬁrst challenge arises due to the dif-
ference in the setting of a standard ORAM as compared
to a P2P content sharing system. Classical ORAM solu-
tions consists of a single client which securely accesses
an untrusted storage (server), wherein the client is even-
tually the owner and the only user of the data in the mem-
ory. In contrast, P2P systems consist of a set of trusted
trackers managing the network, and multiple data own-
ers (peers) in the network. Each peer acts both as a client
as well as a server in the network i.e., a peer can either
request for a data or respond to other peer’s request with
the data stored on its machine. Hence, adversarial peers
present in the network can see the plaintext and learn the
data requested by other peers, a threat that does not exists
in the traditional ORAM model where only encrypted
data is seen by the servers.
Scalability. The second challenge lies in seeking an
oblivious P2P system that 1) the throughput scales lin-
early with the number of peers in the network, 2) has no
centralized bottleneck and 3) can be parallelized with an
overall acceptable throughput. In standard ORAM solu-
tions, the (possibly distributed) server is responsible for
serving all the data access requests from a client one-by-
one. In contrast, P2P systems operate on a large-scale
with multiple peers (clients) requesting resources from
each other simultaneously without overloading a partic-
ular entity. To retain scalability of P2P systems, it is
necessary to ensure that requests can be served by dis-
Solution Overview. We start with a toy construction
(OBLIVP2P-0) which directly adapts ORAM to a P2P
setting, and then present our main contribution which is
a more efﬁcient solution (OBLIVP2P-1).
Centralized Protocol (OBLIVP2P-0): Our centralized
protocol or OBLIVP2P-0,
is a direct adaptation of
ORAM in a P2P system. The peers in the network
behave both like distributed storage servers as well as
clients. They request a centralized, trusted tracker to ac-
cess a particular resource. The tracker performs all the
ORAM operations to fetch the resource from the net-
work and returns it to the requesting peer. However, this
variant of OBLIVP2P protocol has limited scalability as
it assigns heavy computation to the tracker, making it a
bottleneck.
Distributed Protocol (OBLIVP2P-1): As our main con-
tribution, we present OBLIVP2P-1 which provides both
obliviousness and scalability properties in a tracker-
based P2P system. To attain scalability, the key idea
is to avoid any single entity (say the tracker) as a bot-
tleneck. This requires distributing all the ORAM oper-
ations for fetching and sharing of resources among the
peers in the network, while still maintaining oblivious-
ness guarantees. To realize such a distributed protocol,
our main building block, which we call Oblivious Selec-
tion (OblivSel), is a novel combination of private infor-
mation retrieval with recent advances in ORAM. Obliv-
ious Selection gives us a scalable way to securely dis-
tribute the load of the tracker. Our construction is proven
secure in the honest-but-curious adversary model. Con-
structions and proofs for arbitrarily malicious fraction of
peers is slated for future work.
1.2 System and Results
We provide a prototype implementation of both
OBLIVP2P-0 and OBLIVP2P-1 protocols in Python.
Our source code is available online [34]. We experimen-
tally evaluate our implementation on DeterLab testbed
with 15 servers simulating up to 214 peers in the network.
Our experiments demonstrate that OBLIVP2P-0 is lim-
ited in scalability with the tracker as the main bottleneck.
The throughput for OBLIVP2P-1, in contrast, scales lin-
early with increase in the number of peers in the network.
It attains an overall throughput of 3.19 MBps for a net-
work of 214 peers that corresponds to 7 requests per sec-
ond for a block size of 512 KB. By design, OBLIVP2P-1
is embarrassingly parallelizable over the computational
capacity available in a real P2P network. Further, our
protocol exhibits no bottleneck on a single entity in ex-
periment, thereby conﬁrming that the network and the
computational overhead can be completely ofﬂoaded to
946  25th USENIX Security Symposium 
USENIX Association
2
the P2P network.
Contributions. We summarize our contributions below:
• Problem Formulation. We formulate the problem
of making data access pattern oblivious in P2P sys-
tems. This is a necessary and important step in
building defenses against long-term trafﬁc analysis.
• New Protocols. We propose OBLIVP2P— a ﬁrst
candidate for an oblivious peer-to-peer protocol in
content sharing systems. Our main building block
is a primitive which we refer to as oblivious selec-
tion that makes a novel use of recent advances in
Oblivious RAM combined with private information
retrieval techniques.
• System Implementation & Evaluation. Our pro-
totype implementation is available online [34]. We
experimentally evaluate our protocol to measure the
overall throughput of our system, latency for ac-
cessing resources and the impact of optimizations
on the system throughput.
2 Problem
Many P2P applications are not designed with security in
mind, making them vulnerable to trafﬁc pattern analy-
sis. We consider BitTorrent as our primary case study.
However, the problem we discuss is broadly applica-
ble to other P2P ﬁle sharing systems like Gnutella [35],
Freenet [3] and Storj [2] or peer-assisted CDNs such as
Akamai Netsession [4], Squirrel [5] and APAC [36].
2.1 BitTorrent: A P2P Protocol
The BitTorrent protocol allows sharing of large ﬁles be-
tween users by dividing it into blocks and distributing it
among the peers.
It has a dynamic network, made up
of a number of nodes that join the network and volun-
teer themselves as peers. Each peer holds data blocks in
its local storage and acts both as a client / requester and
server / sender simultaneously. There exists a tracker that
tracks which peers are downloading / uploading which
ﬁle and saves the state of the network.
It keeps in-
formation regarding the position or the IP addresses of
peers holding each resource but does not store any real
data blocks. A peer requests the tracker for a particular
resource and the tracker responds with a set of IP ad-
dresses of peers holding the resource. The requester then
communicates with these IP addresses to download the
blocks of the desired resource. The peers interact with
each other using a P2P protocol1. The requester con-
catenates all the blocks received to construct the entire
resource.
1We want to emphasize that there are other models of P2P networks
without tracker based on DHT that we are not addressing in this work.
2.2 Threat Model
In our threat model, we consider the tracker as a trusted
party and peers as passive honest-but-curious adversaries
i.e., the peers are expected to correctly follow the proto-
col without deviating from it to learn any extra informa-
tion. In P2P systems including CDNs (content delivery
networks) and BitTorrent, passive monitoring is already
a signiﬁcant threat on its own. We consider the following
two types of adversaries:
Global Passive Adversary. Since BitTorrent trafﬁc is
public, there exist tools like Global BitTorrent Moni-
tor [37] or BitStalker [38] that support accurate and ef-
ﬁcient monitoring of BitTorrent. Previous research has
shown that any BitTorrent user can be logged within a
span of 3 hours, revealing his digital identity and the con-
tent downloaded [39]. Further, the adversary can log the
communication history of the network trafﬁc to perform
ofﬂine analysis at a later stage. Hence, we consider it ra-
tional to assume the presence of a global adversary with
the capability to observe long term trafﬁc in the network.
Passive Colluding Peers. Some of the peers in the
P2P network can be controlled by the global adversary.
They can further collude to exchange data with other
adversarial peers in the system. While colluding these
“sybil” peers can share information such as observed /
served requests and the contents stored at their local stor-
age. Their goal is to collectively glean information about
other peers in the network. A formal deﬁnition of passive