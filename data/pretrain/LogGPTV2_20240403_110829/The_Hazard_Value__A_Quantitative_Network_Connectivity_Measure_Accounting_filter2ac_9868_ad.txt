φ⊗ψe,p, where ψe,p is given by ψe,p(∅) = 1−pe, ψe,p({e}) =
p, and ψe,p(F ) = 0, elsewhere. Interestingly, from the fact
that max{γ, γ
(cid:2)(cid:2) in the theorem above, we can then
already conclude that this added source of failure may lead to
a larger or equal hazard value. This gives us another type of
monotonicity that cannot be readily deduced from Theorems
1 and 2. This monotonicity can, for example, be exploited
in the calculation of the hazard value, as it tells us that we
can approximate complex DFPs by, for example, ﬁrst only
considering only upto n failures. This will give an increasingly
good approximation as n rises.
, W, D(cid:3) is then bounded by: max{γ, γ
(cid:2)} ≤ γ
(∅)γ + φ(∅)γ
(cid:2).
(cid:2)
(cid:2)
V. COMPUTING THE HAZARD VALUE
We shall now discuss the algorithmic issues related to
computing the hazard value for a given connectivity scenario.
In order to be able to pass a connectivity scenario as an input
to an algorithm, we shall assume that the routing language
R is regular and represented by a regular expression, or
equivalently by a nondeterministic ﬁnite automaton (NFA). All
examples of routing languages that we use in this paper are
Algorithm 1 Baseline algorithm for the hazard value
1: Input: A connectivity scenario (cid:2)G, R, φk, W, D(cid:3), where
G = (V, E, src, dst) is the network, the path constraint
R is represented by an NFA A, and k is the maximum
number of failed links.
2: Output: The hazard ratio of the network
3: sum := 0.0
4: for all F ⊆ E s.t. |F| ≤ k, and X ∈ D do
if WX (s, t) > m∧reachF(s, t) then m :=W (s, t)
5:
6:
7:
m := 0
for all (s, t) ∈ V × V do
sum := sum + φk(F ) · m
(cid:3)
8:
9: optimum :=
10: return 1 − sum
optimum
X∈D maxs,t∈X W (s, t)
φ(F )
regular. We shall also study more ﬁne-grained DFPs, where
we consider only up-to-k concurrent link failures, φk(F ) =
|H|≤k φ(H) when |F| ≤k and φk(F ) = 0 elsewhere, as
(cid:2)
discussed in Section II.
We are now interested in the question, how expensive is it
to compute the hazard value for up-to-k failures in a given
connectivity scenario (cid:2)G, R, φk, W, D(cid:3). The problem whether
γ(G, R, φk, W, D) ≤ δ for a given δ is clearly decidable in
PSPACE by brute-force enumeration of all failure scenarios
(while reusing the space). In this way the exact hazard value
can be computed and compared to the given threshold value
δ. On the other hand, we can prove by reduction from 3SAT
that already the question whether the hazard value is nonzero
becomes NP-hard (and this decision problem is also in NP as
we can guess the failure that makes the hazard value nonzero
and verify this in a polynomial time).
Theorem
scenario
(cid:2)G, R, φk, W, D(cid:3), with φk the up-to-k independent DFP.
The problem to decide whether γ(G, R, φk, W, D) (cid:10)= 0 is
NP-complete.
connectivity
Consider
5.
a
A. Efﬁcient Computation of Hazard Value
A direct way of computing the hazard function consists in
enumerating all possible failure scenarios of size at most k and
to sum the weight of the demands which remains connected.
This is the approach described in Algorithm 1. To ensure that
paths from a source to a destination respect a given set of
constraints captured by a given nondeterministic automaton,
we propose a standard Algorithm 2 that
in an on-the-ﬂy
manner returns true if and only if it is possible to reach t from
s under the given path constraints, by iteratively annotating
each node in the network by the set of control states the NFA
can be in when reaching the node. The correctness of the
baseline algorithm should be clear as it very closely mimics
the deﬁnition of the hazard value.
As already checking if the hazard value is nonzero is NP-
hard, we cannot expect to ﬁnd a polynomial-time algorithm
for computing the value of the hazard function. However, we
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:15:13 UTC from IEEE Xplore.  Restrictions apply. 
245
Algorithm 2 Boolean function reachF (s, t)
1: Input: Failure scenario F and two nodes s, t ∈ V
such that s (cid:10)= t. The NFA A = (Q, E, δ, q0, Qf ) rep-
resenting regular language over E and the graph G =
(V, E, src, dst) are implicitly given.
2: Output: reachF (s, t) = true if t is reachable from s
under the path constraints deﬁned by the language of A
and without using edges in F , false otherwise
3: Let τ : V → 2Q be initialized s.t. τ (s) = ∅ for all s ∈ V
4: pending := {s}
5: τ (s) := {q0}
6: while pending (cid:10)= ∅ do
Remove u from pending
for e ∈ E (cid:3) F s.t. src(e) =u do
v := dst(e)
X := ∪
if X (cid:10)⊆ τ (v) then
q∈τ (u)δ(q, e)
7:
8:
9:
10:
11:
12:
13:
14:
15: return false
pending := pending ∪ {v};
τ (v) := τ (v) ∪ X
if v = t and τ (v)∩ Qf (cid:10)= ∅ then return true
can signiﬁcantly speed up the computation for average case
complexity as we now show and document by our experiments.
Our efﬁcient algorithm relies on enumerating all possible
cuts with at most k edges that decrease the overall reward
in the network. The algorithm is based on the set of all cuts
Cuts A(s, t) ={F ⊆ 2E | Paths F (s, t) ∩ L(A) =∅ } that
disconnect the nodes s and t under the constraint A. Given a
set of failed edges F ⊆ E and a set of unfailing edges U ⊆ E
such that F ∩ U = ∅, we also deﬁne the capacity of a cut
c ∈ Cuts A(s, t) as follows:
F ({e})
e∈c C U
if |c| > 1
if |c| = 1 and c ⊆ U
if |c| = 0 or c ⊆ F
otherwise.
⎧⎪⎪⎪⎨
⎪⎪⎪⎩
(cid:3)
∞
0
1
C U
F (c) =
Based on this deﬁnition, we can now introduce the strategic
cut enumeration described in Algorithm 3 where mincut is a
function returning the min cut (set of edges that disconnet a
source s from the target t) under a capacity function C.
The algorithm uses a stack storing sets of edges to enumer-
ate all possible failure scenarios. Initially, all edges have an
unknown status and once they are pushed on the stack, they are
marked as absent (part of a failure). During the backtracking,
all edges are one by one swapped from absent to present
(line 31 to 33), meaning that we now assume that they are
present in the network and can be used for forwarding packets.
Instead of pushing individual edges on the stack, we push
sets of them (representing the minimal cuts that disconnet the
largest achievable rewards for the selected demand X) at the
same time. This allows us to speed up the computation and
skip the enumeration of a large number of failure scenarios
that either (i) cannot disconnect the highest achievable reward
of the demand X, in which case these accumulated rewards
line 15 by calling the function
can be added to sum at
compute_prob, or (ii) those that already disconnected the
source and target nodes in the demand X and hence cannot
contribute to the overall reward, irrelevant whether the edges
with unknown status are present or absent (line 20).
Theorem 6. Algorithm 3 returns the same value as the
baseline Algorithm 1 and hence computes correctly the hazard
value for the given connectivity scenario.
VI. HAZARD VALUE EXPERIMENTS
We implemented our strategic search algorithm for comput-
ing the hazard value as well as the baseline brute-force search
algorithm. Our empirical results show that our algorithm is
by several orders of magnitude faster and that it is suitable
for computing the hazard values for network topologies of
realistic sizes. We also analyze the computed hazard values for
the Internet Topology Zoo networks and datacenter networks,
and show that the computed values correspond to the intuitive
understanding of connectivity in networks. A reproducibility
package is available at [10].
A. Methodology
To evaluate the practical performance of our strategic search
algorithm, we conduct experiments on a wide range of wide-
area networks (ISP networks) from the Internet Topology
Zoo [23] representing sparse and irregular types of topologies
with several hundred of nodes, as well as on the classic
datacenter topologies fat-tree [6] and BCube [18].
In order to generate ﬂow demands for the Topology Zoo
networks, we select 10% of all node pairs with the largest
distance between them and consider two types of regular path
constraints: (i) waypointing with 0, 1 and 2 waypoints (no
waypoint corresponds to pure reachability) and (ii) service
chaining with two given nodes that must be visited in a
predeﬁned order.
2
For the fat-tree, we distinguish between core, aggregator
and edge nodes, using a parameter n: we initialize a fat tree
2 aggregators
4 core nodes and n disjoint pods of n
with n
2 core routers;
2 edges. Each aggregator is connected to n
and n
2 aggregators
similarly each edge router is connected to all n
of its pod. We consider the BCube topology in a hierarchical
manner, with core routers and sites: for an integer n we create
n core nodes and n sites containing one router and n leaves
connected to it; the i-th core node is again connected to the i-
th leaf of each site. For both datacenter topologies, we create
demands between any pair of two distinct leafs/edge nodes
in the same site and from each leaf to the core routers. We
consider two types of regular path constraints: (i) reachability
without any restriction and (ii) valley-free routing as described
earlier in this paper.
In all experiments, we consider failures for varying numbers
of failed links k ranging from 1 up to 10 concurrently failed
links for ISP topologies and up to 20 failed links for the
datacenter topologies. The probability of each failure depends
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:15:13 UTC from IEEE Xplore.  Restrictions apply. 
246
represented by an NFA A, and k is the maximum number of failed links.
Algorithm 3 Strategic algorithm for the γ hazard function
1: Input: A connectivity scenario (cid:2)G, R, φk, W, D(cid:3) where G = (V, E, src, dst) is the network, the path constraint R is
2: Output: The hazard value of the network
3: sum := 0.0
4: for all X ∈ D do
(cid:2)
:= {e ∈ E | ∃(s, t) ∈ X. ∃π ∈ Paths(s, t) ∩ L(A). e ∈ π}
(cid:2) (cid:4)→ {unknown, absent, present} be s.t. status(e) :=unknown for all e ∈ E
E
Let status : E
Initialize stack to empty stack where its elements are sequences of edges from E
Deﬁne unused (stack ) := E
Deﬁne F (stack ) := {e ∈ stack | status(e) =absent }
Deﬁne U (stack ) := {e ∈ stack | status(e) =present }
repeat
(cid:2) \ (cid:10)
c∈stack c
(cid:2)
(cid:2)
(s, t) := arg max(s,t)∈X
c := arg minc∈Cuts A(s,t) C U (stack )
if |F (stack )| + C U (stack )
{WX (s, t) | (s, t) ∈ X.∃π ∈ Paths(s, t) ∩ L(A).∀e ∈ π.e (cid:10)∈ F (stack )}
F (stack ) (c)
F (stack ) (c) > k then
sum := sum + W (s, t) · compute_prob(unused (stack ), F (stack ))
backtrack (stack )
*** max ∅ = 0
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
27:
28:
30:
31:
32:
33:
else
stack .push(c)
status(ei) := absent for all ei ∈ c
if ¬(cid:11)∃s, t ∈ X s.t. reachF (stack )
(cid:3)
21:
22: optimum :=
23: return 1 − sum
X∈D max(s,t)∈X W (s, t)
until |stack| = 0
optimum
24:
25: backtrack (stack ) =
26: while |stack| > 0 ∧ status(e) =present
status(e) :=unknown for all e ∈ stack .peek ()
stack .pop()
29: if |stack| > 0 then
(cid:12)
then backtrack (stack )
(s, t)
for all e ∈ stack .peek () do
Let c := stack .peek ()
Let ei ∈ c s.t. status(ei) = absent and status(ej) = present for all i < j ≤ |c|
status(ei) := present
status(ej) := absent for all i < j ≤ |c|
34:
35: compute_prob(unused , F )= return
(cid:2)⊆unused,|F∪F
(cid:2)|≤k φk(F ∪ F
(cid:2)
)
F
(cid:3)
on the probability of 0.001 that a single edge fails (independent
of the failure probability of the other edges).
For each scenario and different k values, we run both our
baseline brute-force enumeration algorithm and the strategic
enumeration algorithm with a 10 minute timeout and 16 GB
memory limit. The experiments are executed on AMD EPYC
7551 processors running at 2.55 GHz with boost disabled.
For visualizing the relative performance of the baseline
algorithm and our strategic enumeration, we use cactus plots
(see e.g. [5]), where for each of the methods, we record the
runtime on each instance of the problem. Then we (indepen-
dently for each algorithm) sort the instances by increasing
runtime and plot them as two curves. Note that the y-axis is on
logarithmic scale. While cactus plots do not provide instance-
to-instance comparison, they deliver an overall picture of the
relative performance of the algorithms.
B. Performance Results
In Figure 3 we can see the performance of the baseline
algorithm and our strategic one for the CPU time (in seconds)
needed to compute the hazard values on the networks from the
Topology Zoo database, both for the service chaining routing
language as well as the waypointing with up to 2 waypoints.
Already in the service chaining scenario, we are two orders
of magnitude faster than the baseline on the largest instance
that the baseline can solve. The advantage of our algorithm is
even more clear for the waypointing path restriction scenario
where we see several orders of magnitude improvement. The
situation is analogous for the datacenter experiments presented
in Figure 4 where both for the basic reachability as well as
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:15:13 UTC from IEEE Xplore.  Restrictions apply. 
247
103
102
101
100
)
s
(
e
m
i
t
U
P
C
10−1
10−2
0
103
102
101
100
)
s
(
e
m
i
t
U
P
C
10−1
10−2
0
103
102