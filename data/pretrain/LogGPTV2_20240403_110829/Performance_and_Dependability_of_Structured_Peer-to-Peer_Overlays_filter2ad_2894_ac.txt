### Node Failure Rates and Network Topologies

**Node Failure Rates:**
- **Gnutella, OverNet, and Microsoft Traces:**
  - The node failure rates for the Gnutella, OverNet, and Microsoft traces are shown in Figure 3.
  - The data is averaged over 10-minute windows for OverNet and Gnutella, and over one-hour windows for Microsoft.
  - All traces exhibit clear daily and weekly patterns, with significant variations in failure rates across the traces.
  - Gnutella and OverNet, representative of peer-to-peer systems in an open Internet environment, show similar failure rates.
  - The Microsoft trace, indicative of a more benign corporate environment, has a failure rate that is an order of magnitude lower.

**Microsoft Trace Details:**
- Derived from an availability study of 65,000 machines on the Microsoft corporate network, monitored every hour for 37 days.
- To reduce simulation times, 20,000 machines were randomly selected.
- The average session time is 37.7 hours, with the number of active nodes varying between 14,700 and 15,600.

**Artificial Traces:**
- Artificial traces were generated with Poisson node arrivals and exponentially distributed node session times.
- The average number of nodes in these traces was 10,000.
- Session times of 5, 15, 30, 60, 120, and 600 minutes were used to investigate MSPastry's performance and dependability.

### Network Topologies

**GATech:**
- A transit-stub topology generated using the Georgia Tech topology generator.
- Consists of 5,050 routers arranged hierarchically, with 10 transit domains at the top level, each containing an average of 5 routers.
- Each transit router is connected to an average of 10 stub domains, each with 10 routers.
- The simulator uses round-trip delay (RTT) as the proximity metric.
- End nodes running MSPastry are attached to randomly selected stub routers via LAN links with a 1ms delay.

**Mercator:**
- Based on real data, with 102,639 routers grouped into 2,662 autonomous systems (AS).
- Routing follows the shortest path in the AS overlay.
- Since there is no delay information, the simulator uses the number of IP hops as the proximity metric.
- Each end node is directly attached to a randomly chosen router.

**CorpNet:**
- A topology with 298 routers, generated from measurements of the worldwide Microsoft corporate network.
- The simulator uses the minimum RTT as the proximity metric.
- Each end node is directly attached by a LAN link with a 1ms delay to a randomly chosen router.

### Base Configuration

- **MSPastry Configuration:**
  - Parameters: \( b = 4 \), \( l = 32 \), \( T_{ls} = 30 \) seconds, per-hop acknowledgments, routing table probing tuned with \( L_r = 5\% \), probe suppression, and symmetrical distance probes.
  - Each active node generates 0.01 lookup messages per second according to a Poisson process with destination keys chosen uniformly at random from the identifier space.
  - This configuration provides a good balance between performance and overhead and is highly dependable.

- **Simulator Configuration:**
  - Unless otherwise stated, the simulator was configured with a loss rate of 0%, using the GATech network topology, and running the Gnutella trace.

### Evaluation Metrics

- **Dependability:**
  - Measured using the incorrect delivery rate and the loss rate.
  - Incorrect delivery rate: fraction of lookup messages delivered to an incorrect node.
  - Loss rate: fraction of lookup messages never delivered to any node.
  - No incorrect deliveries were observed in experiments without network losses.

- **Performance:**
  - Measured using relative delay penalty (RDP) and control traffic.
  - RDP: average ratio between the delay achieved by MSPastry and the network delay.
  - Control traffic: average number of control messages sent per second per node, excluding lookup messages.
  - For Gnutella and OverNet traces, metrics are averaged over a 10-minute window; for the Microsoft trace, this window is 1 hour.

### Experimental Results

**Network Topology:**
- The fraction of lost lookup messages was below \( 1.6 \times 10^{-5} \) for all three topologies, with no routing inconsistencies.
- Control traffic was mostly independent of the underlying network topology: 0.239 messages/second/node for CorpNet, 0.245 for GATech, and 0.256 for Mercator.
- RDP values: 1.45 for CorpNet, 1.80 for GATech, and 2.12 for Mercator.

**Failure Traces:**
- Figure 4 shows RDP and control traffic for different traces with normalized time.
- Fluctuations in control traffic follow daily and weekly variations in node arrival and failure rates.
- The breakdown of control messages for the Gnutella trace shows that fluctuations are due to increased distance probes and self-tuning of active probing periods.

**Poisson Traces:**
- Figure 5 shows RDP and control traffic for Poisson traces with different session times.
- Control traffic increases significantly as the average session time drops, but decreases when the session time is 5 minutes due to high failure rates.
- Self-tuning maintains RDP fairly constant for session times of one hour or more, but RDP increases significantly with 5-minute session times.

**Network Loss Rate:**
- Figure 6 shows the impact of varying the network loss rate between 0 and 5%.
- MSPastry achieves consistent and reliable routing even with high network loss rates.
- The use of per-hop acks ensures reliable routing, with the fraction of lost lookups varying from \( 1.5 \times 10^{-5} \) with no losses to \( 3.3 \times 10^{-5} \) with 5% losses.

**Parameters \( l \) and \( b \):**
- Experiments evaluated the impact of varying the algorithm parameters \( l \) and \( b \).
- Increasing \( l \) from 16 to 32 increases control traffic by only 7%, enabling the use of large leaf sets with low overhead.
- Decreasing \( b \) increases RDP due to the increased number of hops, but control traffic only decreases slightly.

**Active Probing and Per-Hop Acks:**
- Reliability is poor without active probes and per-hop acks, with 32% of lookup messages never delivered.
- Using only per-hop acks, the loss rate drops to \( 2.8 \times 10^{-5} \), and with active probing and per-hop acks, it drops to \( 1.6 \times 10^{-5} \).
- Using only per-hop acks results in high delay if application traffic is low.

This optimized text aims to provide a clearer, more coherent, and professional presentation of the original content.