saverrhread cails dosave;
ChangerThread calls doSave.
ChangerThreau baiks
SaverThread calls doSave;
ChangerThread calls doSave,
Changerrhread balks
SaverThread calls dosave,
ChangerThread calls doSave,
ChangerThread calls dosave, content - No.
SaverThread calls dosave,
ChangerThread balks
SaverThread calls doSave,
ChangerThread balks
SaverThread calls doSave,
cails doSave, contert = " + contentl;
11将数据属性实例保存到文件中
writer.close();
writer.write(ccntent);
Writer writer = new rilewriter(filename);
changed = false:
图A4-2执行范例
content - No.12
content. = Nc.i0
content = No.9
ｃｏntent
content. 
content. = No.4
 content 
content = No.1
content = No.D
cortent 
content - No.
 content = Nc.7
content - No.
 content. 
= No.6
No.B
No.2
No.10
No
.9
.3
一将No.10写入两次
←将No.9写入两次
←将N.2写入两次
练习问题的解答
S
---
## Page 392
的休息时间（timeout）约为30秒”，而不是要让while循环内“每次 wait的休息时
问题4-4的解答
并不会让doSave方法也连带被调用。
save 方法被调用，doSave 也会被调用false 的这段范围（白色部分）中，调用 save
万法在执行途中就F始出现灰底，doSave方法执行后灰底的部分也结束了，
在这里，我们的程序代码是要在进入while循环后“到Guard 条件被满足为止
修改过的 RequestQueue 类就如 List A4-3--样。
从图中我们可以看到，changed 字段为 true 的这段范围（灰底部分）中，如果
:ChangerTheard
图 A4-3显示 changed学段为 tmue 的范困的流程图
--.-
changc
save
save
change
→·-
Data
11
1T
doSave
save
:SaverThread
T
---
## Page 393
LivencssException.
间（timeout）约为30秒"
然后就停住了，
Bobby:BEGIN
Alice:BEGIN
执行后马上出现
再执行操作试试看，就会得到如图A4-4所示的结果。
如果我们将发生死锁的1 Guard Suspension模式的 RequestQueue 类改成上述的版
'Thread.currertThreadf).gelNarie ());
plblie class RequestQreue ↑
1o A3
import jJava.util.LinkeaList;
约30秒，
public synchrosized void putRegrest(Request request) ↑
przvate fina- LinkedList quele - new Linkedlist();
privace slet c final -ong TIMEOur = 3O00C;
queuc.addLasl(request):
notifyAll();
relurn
while (quete.sizci) - butfer.cength)
count++;
tail = (tail
his.coun.
this.tai_
t.h.s.nead - 0;
Lhis.buffer = new String[countl;
FND"};
System.out.print.-n(Thread.currentThreadi) .getName()
System.out.prirtln(Thread.currentrhread() .getName ()
BEGIN"};
waiti);
Sysrem.ou'..priatln (Thread.currentThreaa () .qetName ()
System.cu'.. println(Thread.currentThread() -getName()
wat();
增加侦错显示的 Table 类(Tablejava)
cake -
川
+ l) 号 buffer.length;
= caker
0;
 butfer:headl; 
//buffer内的蛋糕数
下一个要take的位量
下--个要 put 的位置
一
:Interruptedexception
---
## Page 397
约每隔秒就调用clcar，
都拿光了，这个线程就会--直等waitF去。
问题5-5的解答
Faterthread-l wait BrGiN
EaterTrread-2 wait BEGiN
EaterThread-l takes l Cake No.ll by MakerThread-1
EaterTnread-l wait EN!+EaterThread-l取得 lock再往前进
MakerThread-1
EaterThread-l1
FaterThread-l
EaterThread-3 wait ENI
MakerTr:read-3
EaterThread-!
EaierThread-3
EaterThread-2
FaterThread-3
MakerThread-? puts [ Cake Nc.8 by MakerThread-2
MakerThread-l puts [ Cake Nc.8 by MakerThread-l
（前略）
我们建立 ClearThread类（List A5-3）以作为使用 create 方法的范例。ClearThread
for (irt  - C; 在等待
一取得蛋糕
一MakerThread-1 将蛋糕放在这里(进行 notifyAll)
十但是桌予是空的，因此再次等待
No.10 by MakerThreai-3 ]
十桌子是空的，
EaterThread-1 也取得 lock 再往前进
+取得蛋糕
←EaterThread-3取得iock再往前进
←桌子是空的，
←MakerThread-3 将蛋糕放在这里[进行notifyA11)
因此Eaterrrreaa-l也在等待
周此EatérThreaα-3在等待
练习问题的解答
383
---
## Page 398
FaterThread-2 takes ! Cake No.12 by MakerThread-2 ]
FaterThread-2 wai END
 MakerThreaa-2 puts I Cakes No.l12 by MakerThread-2
puts
按
Interruptedexcept:on {
public class Tabie {
List A5-2.
CTRE+C结束）
public
public syrchrorized void clear() l
public Tablefint 
private nt count.;
private int head;
private int tail;
" + cake);
System.out.println(Tnread,currentThread() getName() +
while (ccunt >= buffer.length)
notifyAll();
count - 0;
tail = 0;
head = 0:
whii.
//这段wh1le语句只是为了表示被取走的蛋糕；不写也没关系
rhis.ccunt = 0;
this.tail -
this,head -
this.buffer.
waitll;
court--;
 System.ort .princln(Thread.currentThreadi) -getName()
String cake = buffer[head];
新增了 clear 方法的 Table 类(Table.java)
syachron-zed
0;
0;
new Strirg[count];
coun}
/ /buffer内的蛋糕数
//下一次要=ake的位置
←取得蛋糕
图A5-1执行范例
+EaterThread-2 取得 lock 再往前进
←MakerTr.reaa-2 将蛋糕放在这里(进行 notifyAll)
void
put (string
cake)
（续上图》
hrows
---
## Page 399
public class ClearThread extends Thread ↑
takes " + cakel; 
List A5.3
public void run(） {
public ClearThread(string name,
private final Table table;
public synchronized String takei) throws InterruptedException {
try
this.table = table;
super(name);
return cake;
while (count <= O) {
notifyAlll!;
count=-;
head =
String cake = buffer[head];
notifyAll();