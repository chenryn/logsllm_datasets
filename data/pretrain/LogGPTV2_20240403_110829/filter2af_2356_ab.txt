**5/3/2019 4:12 AM**
1分钟后，wojak 再次调用TRX Pro的正式版合约withdraw函数，转入0.011911，成功触发后门，提走合约余额2673万TRX，交易记录为：
    https://tronscan.org/#/transaction/e26666a806e24697fd049e60cf83cf412f58d85cdb0493c014cef0d29d8bdc2e
**根据以上信息，可以归纳出两个事实：**
  1. Tronbank上线之前的测试版本合约，没有后门，但最终线上正式版存在后门；
  2. TSC开发者Khanh在Tronbank测试版合约发布当天部署过一个有相同后门的合约，并且知道后门的调用方式，且在4月30日自己进行过测试。也就是说，该后门与TSC脱不了关系。
在与Tronbank团队的沟通中，开发者提到，他们是使用TSC进行编译的。（针对该言论的真实性，DappReview无法做出验证）
**_注：以下内容是基于现有事实依据的可能性探讨，不代表最终结论和真相，请再次传播时不要断章取义。_**
在第一篇文章[《2600万TRX被盗背后的罗生门》](https://paper.seebug.org/917/
"《2600万TRX被盗背后的罗生门》")中，我们曾提到过三种可能性，
**可能性一：** Tronbank开发者在实际部署的合约中夹杂私货放置了后门，并成功欺骗了TSC完成了另一份没有后门的代码验证。
**可能性二：** Tronbank团队和TSC团队合谋，部署了有后门的合约，同时TSC协助用另一个没有后门的合约完成验证。
**可能性三：** Tronbank团队没有在合约中放置后门，而是后门在合约部署过程中以某种方式产生。
根据以上掌握到的更新信息，第一种可能性被否决，因为整个事件中，TSC开发者是最早调用后门的人，并不存在不知情被欺骗的情况，而第三种可能性的概率极大地增加。
TSC集合了编译、部署、验证的一条龙服务，从理论上来说，如果开发者使用TSC进行编译并部署，期间确实有可能增加后门代码。
在事发当天5月3日，Discord上询问为什么TRX Pro的实际运行代码与验证代码不一致时，Khank的回应如下：
**上午7点22分回应：** 我刚起床听到消息，让我来扫描一下所有（代码）
**晚上9点18分回应：** 各位抱歉，我也不知道为什么他们通过了我的代码（验证）
而5月5日当Khank的地址部署过后门合约并且调用的证据出现后，在Discord网友的质疑下，Khanh的回应如下：
**Mr Fahrenheit：** 你怎么解释你的地址对另一个合约调用过可以触发后门的交易？
**Khanh：** 我的私钥泄露了，github的密码也泄露了
这个回应显然过于苍白，一方面人们质疑如果私钥泄露为什么官网还挂着这个地址，另一方面该地址中还有28,052 TRX （价值约4400RMB）没有被转走。
此时此刻根据已有的信息进行客观的分析，存在的可能性（注意，此处仅讨论可能性，即便该可能性极低，真相目前没有任何实锤证据）依旧有以下几种：
**可能性一：** Tronbank团队和TSC团队合谋，部署了有后门的合约，同时TSC协助用另一个没有后门的合约完成验证。
**可能性二：** Tronbank团队没有在合约中放置后门，而是后门在合约部署过程中以某种方式产生。
以上的两种可能性中，目前的证据对于而言偏向于第二种可能性，Tronbank团队目前正在多次与Khanh沟通，并将部分对话截图贴出，Tronbank团队坚持没有放置任何的后门，而是指向TSC是真正放置后门的元凶。目前虽没有决定性的证据显示后门是由Khanh放置，但是TSC和Khanh自身与后门已经脱不了干系。
**可能性三：** Khanh的github账号被盗，地址私钥泄露，幕后黑手另有其人。
关于这一点依照现有的证据，可能性较低，Khanh的回应含糊其辞，也并没有提供账户被盗的证据（比如github关联邮箱提示不安全登录、密码被修改等辅助信息）
至此 最终的谜题仍未解开 这一场年度大戏尚未落下帷幕 更多的证据仍待挖掘
### wojak的财富密码
整个事件中，wojak的那一笔神奇的交易依旧是关注本次事件的群众口中一直谈论的话题。究竟是什么样的奇技淫巧能让自动执行的代码找到后门，并且触发后门？
在DappReview与wojak的对话中，给出了答案：
wojak的灵感来自于2018年8月的一篇论文《TEETHER: Gnawing at Ethereum to Automatically Exploit
Smart Contracts》
**该论文主要讲了什么呢？**
  * 基于底层的EVM指令，提出了存在漏洞的智能合约的一种广义定义；
  * 提出了TEETHER工具，该工具能够对于智能合约的字节码进行自动化的漏洞识别并生成相应的漏洞利用代码；
  * 对于以太坊区块链中部署的38,757个智能合约进行了大规模的漏洞分析，其中TEETHER工具发现了815个合约中的漏洞，整个过程完全自动化。
**用一个不恰当但是通俗的比喻来说：TEETHER工具就是一台能自动从智能合约找漏洞并且提款的ATM机。**
**wojak基于这篇文章做了什么事情？**
  1. 把TEETHER工具针对波场虚拟机做了适配
  2. 收集波场上所有智能合约
  3. 对所有的合约执行TEETHER工具来分析
  4. 找到可能的套利机会 比如从合约A中以X的价格购买某Token，然后在合约B中以Y价格卖出（Y大于X），整个流程都是自动化执行而且合法
  5. 工具会产生一系列可能产生收益的交易列表
  6. 脚本自动执行并出发这些交易
本质上，那一笔神奇的交易就是这样自动触发的，连他自己都不知道发生了什么。至于wojak本身的行为是否可以定义为“黑客”，或者“违法”，此处暂且不展开深究。
**有兴趣研究这篇“财富密码”的请看：**
https://publications.cispa.saarland/2612/1/main.pdf
截至发稿，Tronbank已经宣布完成了链上投资数据的收集，统计完成后将按照原计划发放赔付TRX。此外，TSC开发者Khanh已经关闭了个人Twitter和Facebook。
* * *