used to access memory. A null selector can be used to ini-
tialize unused segment registers, so that use of segment reg-
isters that have not been properly initialized could be caught
at run time. Loading the code or stack segment register with
a null segment selector causes a general-protection excep-
tion to be generated. A LDT is itself a segment whose seg-
ment descriptor is in the GDT. If there are multiple LDTs,
each must have a separate segment selector and segment de-
scriptor in the GDT. To eliminate address translation over-
head when accessing an LDT, the segment selector, base
address, limit, and access rights of the LDT are stored in
the LDTR register.
Intel X86 architecture provides protection checks at both
segment and page levels. When a linear address is formed,
the hardware checks whether it is within the correspond-
ing segment’s range as speciﬁed in the segment descriptor’s
base and limit. That is, the segment limit check checks both
the upper and lower bounds of a segment. In addition to
checking segment limits, the processor also checks descrip-
tor table limits. The GDTR and LDTR registers contain
16-bit limit values that the processor uses to prevent pro-
grams from selecting a segment descriptor outside the GDT
and LDT, respectively. In addition, these two registers also
contain the base addresses of the GDT and the LDT, which
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
are used to compute the addresses of target GDT or LDT
entries. In addition to limit check, there are standard protec-
tion mechanisms based on segment or page privilege levels:
program execution based on code residing at a less priv-
ileged level cannot access data segments or jump to code
segments that are at a more privileged level.
Every segment register has a visible part and a hidden
part. The hidden part is sometimes referred to as a descrip-
tor cache or a shadow register. When a segment selector is
loaded into the visible part of a segment register, the proces-
sor also loads the hidden part of the segment register with
the base address, segment limit, and access control infor-
mation from the segment descriptor pointed to by the seg-
ment selector. The information cached in the segment reg-
ister (visible and hidden) allows the processor to translate
addresses without taking extra bus cycles to read the base
address and limit from the segment descriptor. In systems
in which multiple processors have access to the same de-
scriptor tables, it is the responsibility of software to reload
the segment registers when the descriptor tables are modi-
ﬁed. If this is not done, an old segment descriptor cached in
a segment register might be used after its memory-resident
version has been modiﬁed. The MOV instruction can be used
to load a segment register as well as store the visible part of
a segment register into a general-purpose register.
3.2 Mapping from References to Objects
To check whether a memory reference exceeds its bound,
one needs to determine the high-level data structure or ob-
ject with which the reference is associated. Cash solves
this reference-object association problem by using a shadow
pointer approach. Each pointer variable P is augmented
with another pointer PA to an information data structure
about the object to which P points. P and PA thus form a
new structure on its own. which is still pointed by P . Both
P and its PA are copied in all pointer assignment/arithmetic
operations, including binding of formal and actual pointer
arguments in function calls. Because P and PA are guaran-
teed to be adjacent to each other, the Cash compiler can eas-
ily identify the high-level object with which a memory ref-
erence is associated by following the pointer variable used
to generate the reference’s effective address. Here we are
assuming that each array reference is of the form of a base
address plus an offset, and the location following the vari-
able holding the base address contains the array’s informa-
tion structure.
The information structure to which PA points contains
three words, the lower and upper bounds of the object’s ad-
dress range, and the LDT index associated with the segment
allocated to the object. Although it is possible to retrieve
the base and limit of an object using the associated seg-
ment’s LDT index, Cash maintains the object’s base and
limit explicitly in the per-object information structure be-
cause it reduces the memory access overhead of software-
based bound checks. The three-word per-object information
structure of an array is allocated when the array is created.
For example, when a 100-byte array is statically allocated,
Cash allocates 112 bytes, with the ﬁrst three words dedi-
cated to this array’s information structure. The same thing
happens when an array is allocated through malloc().
3.3 Array Access Code Generation
To exploit X86’s segment limit check hardware, one
needs to generate instructions for array references so that
the implicit segment limit check that occurs in each mem-
ory access does exactly what array bound checking requires.
This involves two operations. First, every time an array is
used, Cash needs to allocate a segment register for the array,
and initializes the segment register with the array’s associ-
ated segment selector. Because both operations are loop
independent, no additional instructions are required inside
a loop containing the array references. Second, the offset of
each array reference needs to be recomputed using the start
of the array as the basis. The following shows the assembly
code for an example C statement involving array references,
A[i] =10, where A is a pointer to an array.
Without Array Bound Check
movl
leal
movl
movl
-60(%ebp), %eax
0(, %eax, 4), %edx ; i * 4
-56(%ebp), %eax
$10, (%edx, %eax)
; load i
; load a
; mem[a+4*i] = 10
Checking Array Bound using Cash
movl
leal
movl
movw
movw
subl
movl
-60(%ebp), %eax
0(, %eax, 4), %edx
-56(%ebp), %eax
-52(%ebp), %ecx
; # load i
; i * 4
; # load a
; # load a’s shadow
; structure ptr
; load GS
; compute offset
0(%ecx), %gs
4(%ecx), %eax
$10, %gs:(%edx,%eax); check bounds and mem[a+4*i]=10
If the A[i] = 10 statement is inside a loop, then a
standard optimization compiler can move the three instruc-
tions in the Cash version that are marked with # outside the
loop. Because a single segment register loading instruction
takes 4 cycles, it is essential that segment register loading is
done outside the outermost loop. Consequently, the bound
checking in Cash really does not incur any extra software
overhead per array reference as compared with the version
without array bound check.
3.4 Segment Allocation and Deallocation
In Cash, when an array is created, the associated seg-
ment is also allocated. Similarly, when an array is freed,
the associated segment is deallocated.
If an array is al-
located statically (global array), the Cash compiler inserts
code into the beginning of the program to perform segment
initialization, which includes allocating a segment, setting
up the segment’s LDT entry, and ﬁlling in the segment’s
three-word information structure accordingly. Each local
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
array in a function requires a separate segment initializa-
tion step inserted into the function prologue, and a segment
clean-up step into the function epilogue. For dynamically
allocated arrays, the malloc() and free() routines are
modiﬁed to include the segment initialization and clean-up
steps, respectively. Cash does not change the way that GCC
allocates memory for global or local variables. A segment
is created on the top of the original memory region of an
array variable. The segment base is the beginning address
of the array, and the limit is the size of the array.
In a 16-bit segment selector, only 13 bits of them are
used as an index into the LDT. Therefore, at most 8192
segments can exist in a program. Excluding the ﬁrst en-
try, which is used to store a call gate, there are only 8191
segments left for array bound checking. In case there are
more than 8191 objects that need to co-exist simultaneously
in a program, the Cash compiler assigns a global segment
to those objects for which no free segments are available,
essentially disabling the array bound checking for these ob-
jects. The global segment is the original application data
segment created by the Linux kernel. An alternative ap-
proach to this problem is to allocate multiple LDTs per pro-
cess, and dynamically change the LDTR to point to a par-
ticular LDT to at run time. However, modifying the LDTR
requires a system call, and may lead to thrashing in the form
of LDT switching.
3.5 Segment Size Consideration
The limit ﬁeld of a segment descriptor is 20 bits wide.
To support large segments, the X86 architecture includes
a granularity bit in the segment descriptor, which, when
turned on, scales the unit of the segment size by a factor
of 212. That is, when the granularity bit is off, the segment
size ranges from 1 to 220 bytes or 1 Mbytes. However, when
the granularity bit is set, the segment size ranges from 212
or 4Kbytes to 232 or 4Gbytes. Therefore, to support large
arrays, the granularity bit needs to be turned on.
However, when the granularity bit is turned on, the X86
architecture’s segment limit check will ignore the least sig-
niﬁcant 12 bits of the offset part of a virtual address. Conse-
quently the bound checking may no longer be 100% strict.
To address this problem, for an array whose size is larger
than 1 Mbytes, the Cash compiler always allocates a seg-
ment whose size is the minimum multiple of 4Kbytes that
is larger than or equal to the target array’s size. In addition,
Cash aligns the end of the target array with the end of the
allocated segment. With this set up, the segment limit check
hardware performs the upper array bound check correctly,
i.e., down to individual bytes, but the lower array bound
check may be off by at most one page. Figure 2 illustrates
how this technique provides an upper bound check for large
arrays whose size is larger than 1 Mbytes. In the ideal case,
if there are no other data structures that are allocated from
the portion of the ﬁrst page of such a segment that does
not belong to the associated array, then the deﬁciency in
....
Segment
Limit
4KB 4KB
Array
End
Segment
Base
4KB 4KB
Array
Start
Uncertainty in
Lower Bound Check
Figure 2. The lower bound check of Cash is not
100% strict whenthe segment allocated foran array
islargerthan1Mbytes. Theuncertaintyisaslargeas
1pageor4Kbytes.
lower bound check practically does no harm. However, the
current Cash compiler is built in such a way that it layers
segments on top of arrays that are already allocated by the
underlying compiler (in this case GCC), and therefore does
not have any control over data structure placement in the
address space.
In practice, this lack of strict lower bound check does
not impose any security risk, because (1) all known buffer
overﬂow attacks overﬂow an array/buffer through the upper
bound, and (2) with additional compiler support the area be-
tween the array’s lower bound and the lowest page’s bound-
ary could be forced to be unused, and therefore cannot con-
tain anything useful to be corrupted. Moreover, applications
rarely use arrays larger than 1 Mbytes in practice. None of
the 18 applications we tested use arrays whose size is larger
than 1 Mbytes.
3.6 OS Support
To allocate a segment for an array, a segment descriptor
must be inserted into the LDT table. However, because the
per-process LDT is in the kernel space, modifying the LDT
requires a system call. If a function contains local arrays,
this means that calling such a function requires a system
call for each of its local arrays to set up the array’s asso-
ciated segment. The system call modify ldt() of the
Linux OS is used to add or remove an entry from the LDT.
This system call on a 1.1 GHz PIII machine requires 781
clock cycles. This is obviously an unacceptable overhead.
Our original solution was to move the LDT to the user ad-
dress space. However, moving LDT to the user space cre-
ates a security problem, because the LDT is also used to
store call gates that attackers can exploit to access the kernel
space. Therefore, we eventually still keep the LDT inside
the kernel, and develop several optimizations to reduce the
overhead of LDT modiﬁcation to the minimum.
The ﬁrst optimization is a low-overhead system call
mechanism to modify the LDT inside the kernel. On
the X86 architecture,
two ways for
there are at
least
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
user applications to access the kernel code, through the
int instruction or a call gate using the lcall instruc-
tion.
Linux 2.4 kernel uses the int 0x80 instruc-
tion to implement system calls. Cash introduces a new
system call set ldt callgate(void) to set up a
call gate that points to a new kernel function called
cash modify ldt(), which modiﬁes the LDT. When
an application compiled by Cash is executed, it ﬁrst calls
this system call to install the call gate in the ﬁrst entry of
the LDT, and subsequently uses the lcall $0x7, $0x0
instruction to call cash modify ldt() for LDT modiﬁ-
cation. Unlike a normal Linux system call, which saves all
registers at the beginning and restores them before the sys-
tem call returns, cash modify ldt only saves the EDX
and the DS register. All parameters are passed to this func-
tion through registers to eliminate the overhead of copying
the parameters from the user stack to the kernel stack. As
a result, cash modify ldt only takes 253 clock cycles
while modify ldt system call takes 781 clock cycles.
The second optimization is to perform LDT entry alloca-
tion and de-allocation in user space. Each application keeps
a free ldt entry list in user space to maintain all free
LDT entries. When a segment is freed, a user application
does not need to go into the kernel to modify the LDT,
it only puts the segment’s LDT entry number back to this
free ldt entry list, and the LDT entry can be reused
next time for a new segment.
In many cases, a function containing local array refer-
ences is used inside a loop. Each time the function is called,
it needs to allocate one LDT entry for each local array. To
avoid redundant modiﬁcation to the LDT in these cases,
Cash keeps a 3-entry cache to store the three most recently
freed segments. When a new segment is needed and its
base and limit match one of three segments in the cache,
Cash simply reuses the matched free segment and avoids the
overhead of going into the kernel to modify the LDT. Since
freeing a segment never modiﬁes the LDT, Cash can safely
reuse the matched entry. This optimization dramatically re-
duces the frequency of LDT modiﬁcation for functions that
contain local arrays and are called many times inside loops.
3.7 Segment Register Allocation
To reduce address translation time and coding complex-
ity, the X86 architecture provides six segment registers to
hold segment selectors. To access a segment requires the
corresponding segment selector to be loaded into one of the
segment registers. That is, although a program can deﬁne
up to 8192 segments, only six of them are available for im-
mediate use. Three of these six segment registers, CS, SS,
and DS, are are reserved for code, stack, or data references,
respectively. The three other segment registers, ES, FS, and
GS, are available for loading additional segments. The cur-
rent Cash prototype only uses ES, FS, and GS segment reg-