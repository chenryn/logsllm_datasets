required value.
i) generation of receiver addresses (Lines 2–5),
First, the receiver generates anonymous return addresses
add1, . . . , add|L| for all
landmarks and sends them to the
sender (Lines 2–5). Second, the sender splits the transaction
value randomly between all paths (Line 7). By deﬁning a per-
path value before routing, we i) avoid the costly multiparty
computation of SilentWhispers and ii) allow the algorithm to
choose between several possible routes. Avoiding the multi-
party computation of the minimum also removes a privacy
leakage, as knowing the minimum value of funds available
on the complete path naturally reveals information about the
individual links.
Third, the route discovery starts at v and each node selects
a neighbor to be the next node on the route. In VOUTE, each
node would select the neighbor with the coordinate closest to
the destination, using the function ˜d that compares a coordinate
with an anonymous return address. However, such a choice
might not be suitable for routing funds as the link might have
insufﬁcient available credit. As a consequence, the routing
only considers links (v, u) with guaranteed available credit
wA(v, u) of at least ci (Line 14). We differentiate between
available credit w(v, u) and guaranteed available credit to
deal with concurrency. wA(v, u) is a lower bound on the
available credit if ongoing probe operations succeed. Initially,
wA equals the actual available credit w. We do not include the
initialization in Algorithm 3 as multiple concurrent executions
of routePay can impact wA(v, u) and the algorithm might
start with wA(v, u) < w(v, u). If a probe operation indicates
that a payment will transmit funds ci along a link (v, u),
we proactively decrease the guaranteed available credit by ci
(Line 17) to keep future routings from using the link unless
they require at most the guaranteed available credit. If the
routing fails, we add ci
to wA(v, u) again (Lines 21–23).
The routing fails if a node v cannot ﬁnd a neighbor with a
coordinate closer to the destination than v’s coordinate and a
link of sufﬁcient guaranteed available credit.
because i)(cid:80)|L|
Algorithm 3 achieves correctness, as deﬁned in Section III,
i=1 ci = c and ii) nodes always select links e with
w(e) ≥ wA(e) ≥ ci on the ith path.
Algorithm 3 routePay
1: # Input: Graph G, sender src, receiver dst, value c
2: # get addresses
3: for i = 1 to |L| do
4:
use VOUTE’s algorithm to generate return address
addi(dst)
dst sends addi(dst) to src
5:
6: # value shares for each path
7: src splits c into shares c1, . . . , c|L|
8: # routing
9: pathi = empty list of links
10: for i = 1 to |L| do
11:
12:
13:
14:
v = src
fail = false
while !fail and v != dst do
C = {u ∈ N (v)
˜d(idi(u), addi(dst)), wA(v, u) ≥ ci}
if C not empty then
˜d(idi(u), addi(dst)) <
:
next = u in C with minimal ˜d(idi(u), addi(dst))
wA(v, u) = wA(v, u) − ci
v = next
15:
16:
17:
18:
19:
20:
21: if routing failed then
22:
23:
else
fail = true # Routing failed
for all i = 1 . . .|L|, e ∈ pathi do
wA(e) = wA(e) + ci
In the distributed variant of Algorithm 3, nodes send
messages to the next node on the path, which contain the
address addi and the partial value ci. Nodes report failures and
successes to the sender by sending messages along the reverse
path. To account for messages getting lost, nodes also reset
wA if a payment operation does not follow a probe operation
within a certain time.
D. Parameters
Several parameters govern the performance of the above
routing algorithm. First, the number |L| of landmarks deter-
mines the number of returned paths. The transaction and stabi-
lization overhead increases roughly linearly with |L| as routing
and stabilization is required for each landmark. Similarly,
the delay corresponds to the longest route in any embedding
and hence is likely to increase with |L|. The impact of |L|
on the success ratio highly depends on the scenario. The
second parameter is a, the number of transaction attempts.
A sender s can attempt to perform a transaction up to a
times. Only if all attempts fail, s considers the transaction
failed. s chooses the interval between two consecutive attempts
uniformly at random within an interval of length tl. A repeated
transaction attempt executes the above routing algorithm for
the same sender, receiver, and value but uses different shares
c1, . . . , c|L|. In addition to the parameters |L|, a, and tl, the
choice of the landmarks impacts the performance. Commonly,
landmarks are nodes corresponding to ﬁnancial institutions
and hence have a large number of links, possibly leading to
spanning trees of a lower depth and a higher performance. We
characterize the impact of these parameters in our performance
evaluation.
9
E. Privacy Analysis
Next, we argue that SpeedyMurmurs achieves the privacy
goals proposed in Section III-C.
Value Privacy: Informally, we say that a PBT network
achieves value privacy if the adversary cannot determine the
value c of a routePay(c, u, v) operation between two non-
compromised users u and v, if the adversary is not sitting
in any of the involved routing paths.
SpeedyMurmurs is a distributed PBT network and,
in
particular, the routePay is deﬁned such that only users in the
paths between the sender and receiver are involved. Therefore,
if the adversary does not compromise any such users, she
does not get any information about the routed value (because
the point-to-point communications are encrypted) and thereby
value privacy is achieved.
An alternative scenario appears when the adversary cor-
rupts users in some of the paths between sender and receiver,
but not all. In such a case, we cannot prevent the adversary
from estimating c. As we have ci ≥ 0 for all i = 1 . . .|L|,
knowing a subset of these values naturally reveals information
about the total value c, namely that c ≥ ci. Moreover, as
SpeedyMurmurs shares the value c uniformly among the paths
and uses only positive shares, an adversary can estimate c as
|L| ∗ ci upon observing ci.
Sender Privacy: Informally, we say that a PBT network
achieves sender privacy if an adversary cannot determine the
sender u in a routePay(c, u, v) operation. The adversary might
compromise intermediate users on the paths discovered by
routePay(c, u, v) but does not compromise u or v.
An attacker sitting on the path between sender s and
receiver r might receive an anonymous routing address addi
(e.g., the adversary managed to corrupt the sender’s neighbor).
Nevertheless, as SpeedyMurmurs is a distributed PBT network,
the adversary cannot determine whether the actual sender is s
or another user s(cid:48) connected to s through a direct link or a
path of non-compromised users. Sender privacy follows from
the corresponding proofs for VOUTE [29].
Receiver Privacy:
Informally, we say that a PBT
network achieves receiver privacy if an adversary cannot
determine the receiver v in a routePay(c, u, v) operation. The
adversary might compromise intermediate users on the paths
discovered by routePay(c, u, v) but does not compromise u or
v.
As before, the adversary compromising the user before
the receiver r might relay to r an anonymous return address.
Nevertheless, as shown in the evaluation of VOUTE, an
anonymous return address does not leak the corresponding user
in the network. Therefore, the adversary cannot fully determine
yet if r is the actual receiver, or the routing message is intended
for another receiver r(cid:48) connected to r through a direct link or
a path of non-compromised users.
F. Summary
In this section, we introduced SpeedyMurmurs, which
proposes a privacy-preserving routing algorithm for PBT net-
works. Our key contributions in modifying VOUTE to the sce-
nario of credit networks are i) the use of a two-phase construc-
tion algorithm to account for the existence of unidirectional
links (Algorithm 1), ii) the identiﬁcation of criteria on when
to apply on-demand maintenance (Algorithm 2), iii) the design
of a path discovery algorithm that can adaptively choose links
based on both the available credit and the coordinates of the
neighboring nodes and can handle concurrency (Algorithm 3).
Apart from using embedding-based routing, SpeedyMurmurs
distinguishes itself from SilentWhispers by splitting the credit
between paths before the path discovery. In this manner, nodes
can base their forwarding decisions on the amount of credit
they should forward rather than only their neighbors’ distances
to the destination. On the other hand, distributing funds before
the path discovery prevents the algorithm from taking the
overall available funds on the path into consideration. In the
next section, we evaluate the impact of our design decisions
on efﬁciency and effectiveness, analyzing in particular how the
order of routing and fund distribution relates to the success
ratio.
V. PERFORMANCE EVALUATION
In this section, we evaluate the performance of Speedy-
in particular
Murmurs in comparison to the related work,
SilentWhispers’ landmark-centered routing.
More precisely, we aim to answer the following research
questions:
• How do SpeedyMurmurs and SilentWhispers perform
with regard to success ratio, delay, and overhead using
a real-world dataset?
• SpeedyMurmurs and SilentWhispers differ in three major
areas—routing algorithm, random credit assignment, and
dynamic stabilization. What is the impact of each of these
modiﬁcations on the above performance criteria?
• How do these results compare to the performance of other
• What is the impact of the landmark selection, the number
• How does the long-term evolution of the credit network
of trees, and the number of transaction attempts?
approaches?
affect the performance?
We start by describing our simulation model and datasets.
Afterwards, we specify the parameters of our simulation.
Finally, we present and discuss our results.
Generally, our simulation executes the routing algorithm
and performs the payment (if successful). We include the
payment to realistically assess the stabilization overhead due
to link changes. However, we did not implement any security
measures that are usually part of the payment because they
do not affect the routing algorithm and its performance. In
particular, we do not execute the link setup algorithm that
ensures that neighboring nodes agree on the value of their link
and later can settle disputes by providing signed statements of
the changes.
A. Simulation Model
We extended GTNA [31], a framework for graph analysis,
to include our credit transaction mechanisms. In particular,
GTNA offers templates for routing algorithms and perfor-
mance metrics. We added functionality speciﬁc to PBT net-
works, in particular the functionality to dynamically update
link weights.
10
Initially, our simulation constructs a credit network with
nodes and links according to a provided description. After-
wards, we simulate a sequence of events in the credit network.
A list of transactions, changes to links, and periodic re-
computations of the spanning tree (only required for Silent-
Whispers), ordered by their temporal occurrence, determined
the sequence of events. In the absence of realistic latency
and bandwidth models, we did not model concurrency in
our simulation. The simulation executed each event, including
resulting changes to the spanning trees, before starting the next
event.
We implemented two simulation modes. First, we consid-
ered a static credit network. In each step, the simulation exe-
cuted a transaction and subsequently repaired the spanning tree
if dynamic stabilization was applied. Afterwards, it returned
the credit network to its original state. Second, we considered
a dynamic network evolving over time. Transactions, node
churn, and modiﬁcations of the extended credit changed the
structure of the network and the weights on the links. While the
second mode was more realistic, it prevented a straightforward
comparison of different approaches for individual transactions
due to the differences in state at the time of the transaction.
We implemented the routing and stabilization algorithms of
SilentWhispers and SpeedyMurmurs as speciﬁed in Sections II
and IV, respectively. However, we disregard the cryptographic
details for our evaluation, as they do not affect our performance
metrics. Instead,
the sender and receiver both send only
one message to each landmark forwarded by all nodes on
the shortest path to the landmark. In our implementation of
SilentWhispers, each landmark then sends a message to all
remaining landmarks, which is forwarded along the shortest
paths, to account for the multi-party computation. When com-
bining embedding-based routing with multi-party computation,
the receiver sends messages to all
landmarks. In addition
to enabling the evaluation of each individual modiﬁcation,
the alignment of the two designs also resulted in a fairer
comparison of overheads, as the original SilentWhispers sends
all elements of a signature chain individually and thus results
in a higher overhead as compared to sending them in one
message. As SilentWhispers’ authors do not specify how the
sender decides on the amount of partial credit ci assigned to
the ith path, we decided to divide the total credit randomly
between paths in agreement with the available minimum. In
other words, if the sum of all minimal values was at least equal
to the total transaction value c, we ﬁrst divided c randomly
upon the paths. We then randomly re-assigned all credit that
exceeds the minimal value along a path to the remaining paths.
We repeated the re-assignment step until the partial credit of
each path was at most equal to the minimal credit on the path.
During the simulation, we recorded all information necessary
to derive the performance metrics described in Section III.
i) the number of trees |L|,
For SpeedyMurmurs and SilentWhispers, we consider the
following parameters:
ii) the
number of attempts a that nodes try to perform a transaction
before declaring it failed, iii) the maximal interval tl between
two attempts for the same transaction, and iv) the interval
epoch between two periodic re-computations of the trees for
SilentWhispers. For comparison, we expressed the stabilization
overhead for SpeedyMurmurs in stabilization messages per
epoch. In addition to the above parameters, we provided two
approaches for choosing landmarks: choosing the nodes of
maximal degree or choosing random nodes. Here, we deﬁne
the maximal degree of a node as the number of connections
with positive available credit in both directions. For the evolv-
ing credit network, we chose the nodes with the highest initial
degree.
We implemented distributed versions of the Ford-Fulkerson
max-ﬂow algorithm [5] and tree-only routing for comparison.
Tree-only routing only uses links in the spanning tree but
chooses the shortest path rather than always passing through
the landmarks. For Ford-Fulkerson, we replaced the centralized
computation with a distributed version that discovers residual
ﬂows using a breadth-ﬁrst search. By adding tree-only routing,
we evaluate all three tree-based routing schemes displayed in
Figure 1, with SilentWhisper being an instance of landmark-
centered routing and SpeedyMurmurs representing embedding-
based routing.
B. Dataset
We obtained datasets from crawling the PBT network
Ripple [1]. In particular, we obtained crawls of the complete
network from November 2016 and all link modiﬁcations and
transactions since its creation in January 2013. Based on these
crawls, we derive datasets for both our simulation modes,