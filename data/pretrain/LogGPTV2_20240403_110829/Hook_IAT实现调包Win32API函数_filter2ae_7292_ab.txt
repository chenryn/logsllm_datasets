    MessageBoxW(
        _In_opt_ HWND hWnd,
        _In_opt_ LPCWSTR lpText,
        _In_opt_ LPCWSTR lpCaption,
        _In_ UINT uType);
    #define MessageBox  MessageBoxW
且上网查了一下MessageBox的调用约定为`__stdcall`，
所以进行如下定义hook函数（函数内容只是简单测试一下）：
    int __stdcall NewFunc(HWND x, LPCWSTR y, LPCWSTR z, UINT m) {
        printf("\n\n");
        printf("x=%d\n", x);
        printf("y=%s\n", y);
        printf("z=%s\n", z);
        printf("m=%d\n", m);
           printf("\n\n");
        printf("Sorry! :\"MessageBox\" Function has been hooked!\n ");
        return 1;
    }
###  （2）编写main函数进行调用测试
    int main() {
        //我们要hook函数的函数名
        char FuncName[] = "MessageBox";
        //参数字符串
        char str[] = "Hello World!\n";
        //定义函数指针类型
        typedef int(__stdcall* MessageBoxFunc)(HWND, LPCWSTR, LPCWSTR, UINT);
        //先调用正常MessageBox函数
        MessageBox(NULL,L"HOOK IAT",L"Tip",NULL);
        //调用先前编写的hookIAT函数，进行hook
        //同时返回被hook函数的地址，定义函数指针变量接收
        MessageBoxFunc OldFunc = (MessageBoxFunc)Hook_IAT_By_FuncName(GetModuleHandle(NULL), (PBYTE)FuncName, (PDWORD)NewFunc);
        //测试函数指针变量接收的函数地址
        OldFunc(NULL, L"MessageBox is here", L"Tip", NULL);
        //此时MessageBox函数已经被hook，不会再弹出框，
        //用于调包的hook函数是在控制台输出
        MessageBox((HWND)1, (LPCWSTR)FuncName, (LPCWSTR)str, (UINT)2);
        printf("Got it !\n");
        return 0;
    }
###  （3）测试
第一个正常的MessageBox
点击确认后执行hookIAT函数
第二个MessageBox是定义的函数指针变量接收的hookIAT函数返回的地址。
点击确认后，再次执行MessageBox，但此时已经被hook调包了，在控制台输出语句。
看来MessageBox已经被hook了。
## 4、所有源码
因为代码量并不多，所以直接写到一个cpp文件里即可。
> 环境：Win10
>
> 语言：C
>
> 编译：VS2019-x86
    #include
    #include
    //hook自己pe文件的IAT导入表
    //参数1:自己进程的句柄
    //参数2:要Hook的函数名称指针
    //参数3:需要覆盖的新的函数指针。
    //返回值：为0则代表失败（不是PE文件则返回0且弹MessageBox，没有找到被hook函数仅仅返回0），
    //返回值：正常返回被hook函数的原始地址。
    int Hook_IAT_By_FuncName(HANDLE hMyProcess, PBYTE pOldFuncName, PDWORD pNewFuncAddr);
    int __stdcall NewFunc(HWND x, LPCWSTR y, LPCWSTR z, UINT m);
    int main() {
        char FuncName[] = "MessageBox";
        char str[] = "Hello World!\n";
        typedef int(__stdcall* MessageBoxFunc)(HWND, LPCWSTR, LPCWSTR, UINT);
        MessageBox(NULL,L"HOOK IAT",L"Tip",NULL);
        MessageBoxFunc OldFunc = (MessageBoxFunc)Hook_IAT_By_FuncName(GetModuleHandle(NULL), (PBYTE)FuncName, (PDWORD)NewFunc);
        OldFunc(NULL, L"MessageBox is here", L"Tip", NULL);
        MessageBox((HWND)1, (LPCWSTR)FuncName, (LPCWSTR)str, (UINT)2);
        printf("Got it !\n");
        return 0;
    }
    int __stdcall NewFunc(HWND x, LPCWSTR y, LPCWSTR z, UINT m) {
        printf("\n\n");
        printf("x=%d\n", x);
        printf("y=%s\n", y);
        printf("z=%s\n", z);
        printf("m=%d\n", m);
        printf("\n\n");
        printf("Sorry! :\"MessageBox\" Function has been hooked!\n ");
        return 1;
    }
    //hook自己pe文件的IAT导入表
    //参数1:自己进程的句柄
    //参数2:要Hook的函数名称指针
    //参数3:需要覆盖的新的函数指针。
    //返回值：为0则代表失败（不是PE文件则返回0且弹MessageBox，没有找到被hook函数仅仅返回0），
    //返回值：正常返回被hook函数的原始地址。
    int Hook_IAT_By_FuncName(HANDLE hMyProcess, PBYTE pOldFuncName, PDWORD pNewFuncAddr) {
        PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)hMyProcess;
        PIMAGE_NT_HEADERS32 pNtHeader = (PIMAGE_NT_HEADERS32)((DWORD)pDosHeader + pDosHeader->e_lfanew);
        PIMAGE_OPTIONAL_HEADER pOptionHeader = (PIMAGE_OPTIONAL_HEADER)((DWORD)pNtHeader + 4 + IMAGE_SIZEOF_FILE_HEADER);
        //判断参数一句柄指向的模块是否为PE文件
        if (*(PWORD)pDosHeader != 0x5A4D || *(PDWORD)pNtHeader != 0x4550) {
            MessageBox(NULL, L"Not PE File!!", L"error!", NULL);
            return 0;
        }
        //定位到可选头目录项
        PIMAGE_DATA_DIRECTORY pDateDirectory = (PIMAGE_DATA_DIRECTORY)pOptionHeader->DataDirectory;
        //定位到导入表
        PIMAGE_IMPORT_DESCRIPTOR pImportDescriptor = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)pDosHeader + pDateDirectory[1].VirtualAddress);
        while (pImportDescriptor->Name)
        {
            PDWORD pThunkINT = (PDWORD)((DWORD)pDosHeader + pImportDescriptor->OriginalFirstThunk);
            PDWORD pThunkIAT = (PDWORD)((DWORD)pDosHeader + pImportDescriptor->FirstThunk);
            while (*pThunkINT)
            {
                if (*pThunkINT & 0x80000000) {
                    ;
                }
                else
                {    //寻址函数名字结构体
                    PIMAGE_IMPORT_BY_NAME pImportByName = (PIMAGE_IMPORT_BY_NAME)((DWORD)pDosHeader + *pThunkINT);
                    if (!memcmp(pOldFuncName, pImportByName->Name, strlen((char*)pOldFuncName))) {
                        DWORD lpflOldProtect;
                        BOOL flag = VirtualProtect((LPVOID)pThunkIAT, sizeof(DWORD), PAGE_EXECUTE_READWRITE, &lpflOldProtect);
                        DWORD OldAddr = *pThunkIAT;
                        *pThunkIAT = (DWORD)pNewFuncAddr;
                        return OldAddr;
                    }
                }
                pThunkINT++;
                pThunkIAT++;
            }
            pImportDescriptor++;
        }
        return 0;
    }