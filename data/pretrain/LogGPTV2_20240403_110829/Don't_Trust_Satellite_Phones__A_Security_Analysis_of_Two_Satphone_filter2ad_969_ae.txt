to the value of c, i.e., the output of the lower multiplexer
is Kc. The upper multiplexer outputs another byte, but this
one is determined by a 4-bit value we will call α. On the
right side, two smaller sub-components
T1 : {0, 1}4 (cid:2)→{0, 1}3
T2 : {0, 1}3 (cid:2)→{0, 1}3
are implemented via table-lookups (see Tab. IV). Also two
bit-wise modulo-2 additions are used. The input of T1 is
determined by p, Kc and the toggle-bit t. Note that we use
p = Zl−1 as a shorthand to denote one byte of keystream
that was already generated. We model the behavior of the
small vertical multiplexer by N (·), which we deﬁne as
N : {0, 1} × {0, 1}8 (cid:2)→{0, 1}4
(cid:8)
(t, x) (cid:2)→
(x3, x2, x1, x0)2
(x7, x6, x5, x4)2
if t = 0,
if t = 1.
With the help of N , which returns either the higher or lower
nibble of its second input, the following holds for the output
of the mentioned multiplexer
α = N (t, Kc ⊕ p) =N (c mod 2, Kc ⊕ p).
The output of the upper multiplexer is rotated to the right
by as many positions as indicated by the output of T2,
therefore the 8-bit output O0 and the 4-bit value O1 are
of the following form,
O0 = (KT1(α) ≫ T2(T1(α)))28
O1 = (Kc,7 ⊕ p7 ⊕ Kc,3 ⊕ p3,
Kc,6 ⊕ p6 ⊕ Kc,2 ⊕ p2,
Kc,5 ⊕ p5 ⊕ Kc,1 ⊕ p1,
Kc,4 ⊕ p4 ⊕ Kc,0 ⊕ p0)2.
Figure 9. G-component of A5-GMR-2
of the state is used as input. As can be seen in Figure 9,
three sub-components, denoted as B1, B2, B3, are employed
– again, they are implemented in the form of lookup-tables.
Each of these components works on 4-bit inputs and equally
returns 4-bit. After analyzing the tables, we found that all
three simply implement linear boolean arithmetic, i.e.,
B1 : {0, 1}4 (cid:2)→ {0, 1}4
x (cid:2)→ (x3 ⊕ x0, x3 ⊕ x2 ⊕ x0, x3, x1)2,
B2 : {0, 1}4 (cid:2)→ {0, 1}4
x (cid:2)→ (x1, x3, x0, x2)2,
B3 : {0, 1}4 (cid:2)→ {0, 1}4
x (cid:2)→ (x2, x0, x3 ⊕ x1 ⊕ x0, x3 ⊕ x0)2.
Since these sub-components and the modulo-2 addition are
linear and all other operations on single bits just amount to
permutations, the G-component is entirely linear. Therefore,
we can write the 6-bit outputs O(cid:2)
1 as linear functions of
the inputs I0, I1 and Sc, i.e.,
0, O(cid:2)
O(cid:2)
0 = (I0,7 ⊕ I0,4 ⊕ S0,5,
I0,7 ⊕ I0,6 ⊕ I0,4 ⊕ S0,7,
I0,7 ⊕ S0,4,
I0,5 ⊕ S0,6,
I1,3 ⊕ I1,1 ⊕ I1,0,
I1,3 ⊕ I1,0)2,
O(cid:2)
1 = (I0,3 ⊕ I0,0 ⊕ S0,1,
I0,3 ⊕ I0,2 ⊕ I0,0 ⊕ S0,3,
I0,3 ⊕ S0,0,
I0,1 ⊕ S0,2,
I1,2,
I1,0)2.
Finally, the H-component gets I (cid:2)
1 = O(cid:2)
1
as input and constitutes the non-linear “ﬁlter” of the cipher
(see Figure 10). Here, two new sub-components
0 = O(cid:2)
0 and I (cid:2)
The G-component gets the outputs of the F-component
as inputs, i.e., I0 = O0, I1 = O1. Additionally, one byte S0
S2 : {0, 1}6 (cid:2)→ {0, 1}4
S6 : {0, 1}6 (cid:2)→ {0, 1}4
138
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:23 UTC from IEEE Xplore.  Restrictions apply. 
are used and implemented via lookup-tables. Interestingly,
these tables were taken from the DES, i.e., S2 is the second
S-box and S6 represents the sixth S-box of DES. However,
in this cipher, the S-boxes have been reordered to account for
the different addressing, i.e., the four most-signiﬁcant bits
of the inputs to S2 and S6 select the S-box-column, the two
least-signiﬁcant bits select the row. Note that this is crucial
for the security of the cipher. The inputs to the S-boxes are
denote the l-th (l ≥ 8) byte of keystream generated after
initialization with frame-number N. In GMR-2, the frame-
number is always incremented after 15 byte of keystream,
which forces a re-initialization of the cipher. Therefore, the
keystream Z (cid:2) that is actually used for N ∈ {0, 1, 2 . . . } is
made up of blocks of 15 bytes (which we call a key-frame
with respect to frame-number N) that are concatenated as
follows:
Figure 10. H-component of A5-GMR-2
swapped with the help of two multiplexers, depending on
1, and t we can express
the value of t. Given the inputs I (cid:2)
the l-th byte of keystream as
0, I (cid:2)
(cid:8)
Zl =
(S2(I (cid:2)
(S2(I (cid:2)
1), S6(I (cid:2)
0), S6(I (cid:2)
0))24
1))24
if t = 0,
if t = 1.
D. Mode of Operation
Next we describe the mode of operation. When the cipher
is clocked for the l-th time, the following happens:
1) Based on the current state of the S-, C-, and T -
register, the cipher generates one byte Zl of keystream.
2) The T -register is toggled, i.e., if it was 1 previously,
it is set to 0 and vice versa.
3) The C-register is incremented by one, when 8 is
reached the register is reset to 0.
4) The S-register is shifted by 8 bits to the right, i.e.,
S7 := S6, S6 := S5 etc. The previous value of S7 is
fed into the G-component, the subsequent output Zl of
H is written back to S0, i.e., S0 := Zl. This value is
also passed to the F-component as input for the next
iteration.
The cipher is operated in two modes, initialization and
generation. In the initialization phase, the following steps
are performed:
1) The T - and C-register are set to 0.
2) The 64-bit encryption-key is written into the K-
register in the F-component.
3) The state-register S is initialized with the 22-bit frame-
number N, this procedure is dependent on the “direc-
tion bit” but not detailed here as it is irrelevant for the
remainder of this paper.
After C, T and S have been initialized, the cipher is clocked
eight times, but the resulting keystream is discarded.
After initialization is done,
generate and output actual keystream bytes. By Z (N )
the cipher is clocked to
we
l
Z (cid:2) = (Z (0)
8 , . . . , Z (0)
22 , Z (1)
8 , . . . , Z (1)
22 , Z (2)
8 , . . . , Z (2)
22 , . . . )28
E. Cryptanalysis
In this section, we present a known-plaintext attack that
is based on several observations that can be made when
carefully examining the F-component (and the starred rows
in Tab. IV):
1) If α ∈ {(0, 0, 1, 0)2, (1, 0, 0, 1)2} then T1(α) = 0 and
T2(T1(α)) = 4, thus O0 = (N (0, K0), N (1, K0))24.
2) If α ∈ {(0, 1, 1, 0)2, (1, 1, 1, 0)2} then T1(α) = 4 and
T2(T1(α)) = 4, thus O0 = (N (0, K4), N (1, K4))24.
3) If T1(α) = c, both multiplexers select the same key-
byte. We call this a read-collision in Kc.
In the following, we describe how to obtain K0 and K4 with
high probability, which is then leveraged in a second step
in order to guess the remaining 48 bits of K in an efﬁcient
way.
i−1, Z (cid:2)
The key idea to derive K0 is to examine keystream bytes
i−8)28 with i ∈ {8, 23, 38, . . . } in order to
i, Z (cid:2)
(Z (cid:2)
detect when a read-collision in K0 has happened during the
i. Please note that due to our choice of i this
generation of Z (cid:2)
8 = Z (0)
Z (cid:2)
16 , Z (cid:2)
23 = Z (1)
16 , Z (cid:2)
38 = Z (2)
16 , . . .
i.e, for each i we already know that
the lower
holds,
multiplexer has selected K0. In general, if the desired read-
collision has happened in the F-component, the outputs of
the F-component are
O0 = (p3 ⊕ α3, p2 ⊕ α2, p1 ⊕ α1, p0 ⊕ α0,
K0,7, K0,6, K0,5, K0,4)2,
O1 = (K0,7 ⊕ p7 ⊕ α3, K0,6 ⊕ p6 ⊕ α2,
K0,5 ⊕ p5 ⊕ α1, K0,4 ⊕ p4 ⊕ α0)2,
and the subsequent outputs of G are
O(cid:2)
0 = (p3 ⊕ α3 ⊕ p0 ⊕ α0 ⊕ S0,5,
p3 ⊕ α3 ⊕ p2 ⊕ α2 ⊕ p0 ⊕ α0 ⊕ S0,7,
p3 ⊕ α3 ⊕ S0,4,
p1 ⊕ α1 ⊕ S0,6,
K0,7 ⊕ p7 ⊕ α3 ⊕ K0,5 ⊕ p5 ⊕ α1 ⊕ K0,4 ⊕ p4 ⊕ α0,
K0,7 ⊕ p7 ⊕ α3 ⊕ K0,4 ⊕ p4 ⊕ α0)2,
139
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:23 UTC from IEEE Xplore.  Restrictions apply. 
O(cid:2)
1 = (K0,7 ⊕ K0,4 ⊕ S0,1,
K0,7 ⊕ K0,6 ⊕ K0,4 ⊕ S0,3,
K0,7 ⊕ S0,0
K0,5 ⊕ S0,2,
K0,6 ⊕ p6 ⊕ α2,
K0,4 ⊕ p4 ⊕ α0)2.
Considering the H-component, we also know that
Z (cid:2)
i = (S2(O(cid:2)
1), S6(O(cid:2)
0))24
holds.
In order to determine K0, we examine the inputs and
outputs of S6 and S2 in the H-component, starting with S6.
Due to the reordering of the DES S-boxes, the column of
S6 is selected by the four most-signiﬁcant bits of O(cid:2)
0. If we
assume a collision in K0 has happened while generating Z (cid:2)
i,
we can compute these most-signiﬁcant bits due to the fact
that
S0
!= Z (cid:2)
and p != Z (cid:2)
i−1
i−8
from the rest. Experiments show that about a dozen key-
frames are usually enough so that the correct key-byte is
among the ﬁrst two hypotheses. The principle we outlined
above not only works for K0, it also allows to recover
the value of K4 when α ∈ {(0, 1, 1, 0)2, (1, 1, 1, 0)2},
i ∈ {12, 27, 42, . . . } are chosen appropriately.
In the following we assume that we have obtained a set
of hypotheses for K0 – we might also have K4, but this
improves the efﬁciency of the remainder of the attack only
slightly. Based on theses hypotheses, starting with the most
plausible one, we can brute-force the remaining key-bytes
separately. Please note that the following process will only
produce the correct key, if our hypothesis for K0 was correct.
To obtain K1, ..., K7 we examine a few keystream-bytes
for a second time, while focusing on the F-component.
For each Kj with j ∈ {0, 1, . . . , 7} for which we already
have a hypothesis, we can use the corresponding key-stream
i+j−8)28 with i ∈ {8, 23, 38, . . . } to
bytes (Z (cid:2)
compute
i+j−1, Z (cid:2)
i+j, Z (cid:2)
α = N (j mod 2, Kj ⊕ Z (cid:2)
i+j−1).
are also known for all of our choices of i. If, for α ∈
{(0, 0, 1, 0)2, (1, 0, 0, 1)2} the lower nibble of Z (cid:2)
i is found in
the row with index β, a collision may indeed have happened
0 must be (β1, β0)2, which
and the lower two bits of O(cid:2)
implies
K0,7 ⊕ K0,5 ⊕ K0,4 = β1 ⊕ p7 ⊕ α3 ⊕ p5 ⊕ α1 ⊕ p4 ⊕ α0,
K0,7 ⊕ K0,4 = β0 ⊕ p7 ⊕ α3 ⊕ p4 ⊕ α0.
Here we gain “some” information about the bits of K0, K0,5
can even be computed. We can then use the output of S2 to
verify whether a collision has happened for the particular α
we used above. Due to the structure of the S-box, there are
only four 6-bit inputs γ with
S2(γ) = (Z (cid:2)
i,7, Z (cid:2)
i,6, Z (cid:2)
i,5, Z (cid:2)
i,4)2.
Due to our partial knowledge about (K0,4, K0,5, K0,7)2 we
can test each γ whether the following relations hold:
γ5
γ3 ⊕ γ0
γ4 ⊕ γ1
?=β0 ⊕ p7 ⊕ α3 ⊕ p4 ⊕ α0 ⊕ S0,1,
?=β0 ⊕ p7 ⊕ α3 ⊕ p4 ⊕ α0 ⊕ S0,3 ⊕ p6 ⊕ α2,
?=β0 ⊕ p7 ⊕ α3 ⊕ S0,0,
?=β1 ⊕ p7 ⊕ α3 ⊕ p5 ⊕ α1 ⊕ p4 ⊕ α0 ⊕ S0,1 ⊕ S0,2.
γ2 ⊕ γ5
If all of these relations hold for one γ, we can be sure with
sufﬁciently high probability that a read-collision has indeed
happened. A probable hypothesis for K0 is now given by
(γ3 ⊕ S0,0, γ1 ⊕ p6 ⊕ α2, γ2 ⊕ S0,2, γ0 ⊕ p4 ⊕ α0,
p3 ⊕ α3, p2 ⊕ α2, p1 ⊕ α1, p0 ⊕ α0)2.
Our method detects all read-collisions, but there may also be
false positives, therefore the process described above must
be iterated for a few times for different portions of the
keystream. Typically, over time, one or two hypotheses occur
more often than others and distinguish themselves quite fast
140
If we do not already have a plausible hypothesis for Kk