above fall into this category).
The above fact is reminiscent of the main positive result in [BPR14], who also showed
that stateful symmetric encryption schemes with unique ciphertexts remain CPA-secure in the
presence of one-time SAs that satisfy a similar “decryptability condition.” Unique ciphertexts
here means that, for any given key, message, associated data and state, there exists at most
one ciphertext that the receiver will decrypt to the message in question. The main diﬀerence
between the two results is that, for the case of signatures, we achieve security against adaptive
and continuous attacks, without the need of keeping any state.
Clearly, the assumption that the veriﬁability condition should hold for all messages is quite
a strong one. Hence, we also relax the veriﬁability condition to hold for all but a negligible
fraction of the messages. However, we are not able to prove that unique signatures achieve
existential unforgeability under chosen-message attacks against the class of SAs that satisﬁes
1As we show, secret and public undetectability are not equivalent, in that there exist natural classes of SAs
that are publicly undetectable but secretly detectable.
2A signature scheme is unique if for an honestly generated veriﬁcation key there is a single valid signature for
each message.
3One might ask whether a similar result holds for all deterministic schemes where signatures are not unique;
the answer to this question is negative as our attacks also apply to certain types of deterministic schemes (e.g.,
de-randomized schemes—see the proof of Theorem 9 in Section 7.2).
4
relaxed veriﬁability.4 Instead, as our second positive result, we show that unique signatures
are existentially unforgeable under random-message attacks (where the adversary can only see
potentially subverted signatures of random messages) against the class of SAs that satisﬁes
relaxed veriﬁability. Interestingly, this weaker security ﬂavor is still useful for applications, e.g.
to construct subversion-resilient identiﬁcation schemes.
As our third positive result, we provide a way to achieve the ambitious goal of protecting
signature schemes against arbitrary SAs, relying on a cryptographic reverse ﬁrewall. The latter
primitive was introduced in [MS15] (see also [DMS16]) to model security of arbitrary two-party
protocols run on machines possibly corrupted by a virus. On a high level, a RF for a signature
scheme is an algorithm taking as input a message/signature pair (m, σ), some public state, and
outputting a “patched” signature (m, σ(cid:48)); the initial state of the ﬁrewall is typically a function of
the veriﬁcation key vk . A good RF should maintain functionality, meaning that, whenever the
input is a valid message/signature pair, the patched signature (almost always) veriﬁes correctly
under the target veriﬁcation key. Moreover, we would like the ﬁrewall to preserve unforgeability;
this means that patched signatures (corresponding to signatures generated via the subverted
signing algorithm) should not help an adversary to forge on a fresh message.
We prove that every signature scheme that is re-randomizable (as deﬁned in [HJK12]) admits
a RF that preserves unforgeability against arbitrary SAs. Re-randomizable signatures admit
an eﬃcient algorithm ReRand that takes as input a tuple (m, σ, vk ) and outputs a signature
σ(cid:48) that is distributed identically to a freshly generated signature on m under signing key sk
(corresponding to vk ); unique signatures, for instance, are re-randomizable. Upon input a pair
(m, σ), our ﬁrewall uses the public state to verify (m, σ) is valid under vk , and, in case the
test passes, it runs ReRand on (m, σ) and outputs the result. Otherwise, the ﬁrewall simply
returns an invalid symbol ⊥ and self-destructs, i.e., it stops processing any further query.5 The
latter is a requirement that we prove to be unavoidable: No RF can at the same time main-
tain functionality and preserve unforgeability of a signature scheme without the self-destruct
capability.
We remark that our results and techniques for the setting of RFs are incomparable to
the ones in [MS15]. The main result of Mironov and Stephens-Davidowitz is a compiler that
takes as input an arbitrary two-party protocol and outputs a (diﬀerent) protocol that admits
a RF preserving functionality and preventing leakage to an eavesdropper. Instead, we model
directly security of RFs for signatures schemes in the game-based setting; while our goal is
more restricted (in that we only design RFs for signatures), our approach results in much more
eﬃcient and practical solutions.
Multi-user setting. Our discussion so far considered only a single user. In Section 7, we
discuss how our models and results can be extended to the important (and practically relevant)
multi-user scenario. In particular, similarly to [BPR14], we generalize our undetectability and
security notions to a setting with u ≥ 1 users, where each user has a diﬀerent signing/veriﬁcation
key.
As we argue, security in the single-user setting already implies security in the multi-user
setting (by a standard hybrid argument), and the same holds for secret undetectablity in case
of stateless subversion.6 This does not hold for public undetectability though, as there exist
4In fact, as shown recently by Degabriele et al. [DFP15] for the case of symmetric encryption, it is not hard to
show that such limitation is inherent: No (even deterministic) scheme can achieve security under chosen-message
attacks against the class of SAs that meets relaxed veriﬁability. See Section 1.3 for more details.
5This can be implemented, for instance, by having the public state include a single one-time writable bit used
to signal a self-destruct took place.
6A previous version of this paper [AMV15] considered a weaker ﬂavour of secret undetectability that does not
immediately generalize to the multi-user setting.
5
classes of SAs that are publicly undetectable by a single user but can be eﬃciently publicly
detected by more than one user, as shown in Theorem 9 (iii).
1.2 Impact
Our study has strong implications in practice, and might inﬂuence the way digital signature
schemes are selected or adopted in standards and protocols. A subverted signature scheme is,
arguably, even more deceitful and dangerous in practice than subverted encryption. Indeed,
public-key cryptography typically involves digital certiﬁcates that are signed by Certiﬁcation
Authorities (CAs). If a CA is using a subverted signature scheme, it is reasonable to expect
the signing key will eventually be exposed. With knowledge of the signing key, it is possible to
impersonate any user and carry out elementary man-in-the-middle attacks. This renders the
use of any type of encryption utterly pointless, and underlines the important role played by
signatures in the context of secure communications.
Unfortunately, signature schemes currently employed to sign digital certiﬁcates, or used in
protocols such as OTR, TLS/SSL, SSH, etc., are all susceptible to subversion attacks, and as
such they should be used with caution. The positive news, however, is that there already exist
signature schemes that are subversion-resilient, and they are very eﬃcient and well established.
1.3 Related Work
Sabotage of cryptographic primitives, before and during their deployment, has been the focus
of extensive research over the past years. We brieﬂy review the main results below, and refer
the reader to [SFKR15] for a taxonomy of these (and more) types of attacks.
Subliminal channels. Remarkably, digital signatures were the ﬁrst cryptographic primitive
used to create a subliminal channel in order to solve Simmons’ “Prisoners’ Problem” [Sim83]:
By agreeing on a partition of the secret keys into two sets (one set for “0” and the other
set for “1”), two prisoners can communicate conﬁdentially over an insecure channel, without
being detected by the warden which knows all keys and reads the entire communication. Later
work [Sim84, Sim85, Sim93, Sim94, AVPN96, Sim98] showed that several digital signature
schemes, and even natural ones, such as the Digital Signature Algorithm [Sim93, AVPN96],
admit subliminal channels.
After their introduction, the potential of subliminal channels has been explored in other
settings beyond digital signatures (e.g., [Des88a, Des88b, BDI+99]); this line of research led, for
instance, to the concept of divertible protocols, that are intimately related to reverse ﬁrewalls.
Backdoored implementations. The setting of backdoored implementations includes, in
particular, the realm of kleptography and SETUP attacks (see [YY04] for a survey). Dodis et
al. [DGG+15] provide a formal treatment of backdoored pseudorandom generators (building on
previous work of Vazirani and Vazirani [VV83]); their work has been extended in [DPSW16]
to the setting of robust pseudorandom generators with inputs. Subversion of pseudorandom
generators is of particular importance, given the potential sabotage of the NIST Dual EC
PRG [NIS07]. The problem of parameters subversion has also been considered in the context
of zero-knowledge proofs [BFS16], and public-key encryption [ABK18].
Bellare and Hoang [BH15] tackle the question of SAs in the setting of public-key encryption
(PKE). In particular, they give a standard model construction of an IND-secure7 determinis-
7In the context of deterministic PKE, IND security captures the best possible privacy in terms of semantic
security in the presence of unpredictable messages (that do not depend on the public key).
6
tic PKE [BFOR08]—although leveraging strong tools such as universal computational extrac-
tors [BHK13] and lossy trapdoor functions [PW11]—and show a generic transformation from
any such PKE to a unique-ciphertext PKE, which in turn achieves IND-security against the
class of one-time SAs meeting the decryptability condition.
Russell et al. [RTYZ16, RTYZ17, RTYZ18] consider the setting of complete subversion,
where all algorithms (including, for instance, the key generation algorithm) are subject to
kleptographic attacks, and show how to build (trapdoor) one-way permutations, pseudorandom
generators, digital signatures, and chosen-plaintext secure encryption in this model, by relying
on the random oracle methodology [BR96].
Input-triggered subversions. Degabriele, Farshim, and Poettering (DFP) [DFP15] pointed
out some shortcomings of the Bellare-Patterson-Rogaway (BPR) [BPR14] security model for
subversion resilience of symmetric encryption schemes. Consider the class of SAs that, upon
input a secret (trapdoor) message ¯m outputs the secret key, but otherwise behaves like the
genuine signature algorithm. Clearly this class of SAs will be undetectable by the users, as
without knowing the trapdoor, there is only a negligible chance to query the secret message ¯m
and detect that the signature algorithm was subverted (at least if the message space is large
enough). Yet, an adversary mounting a chosen-message attack can recover the signing key by
asking a signature for message ¯m.
As a consequence, it is impossible to prove existential unforgeability under chosen-message
attacks against such “input-triggered” subversions (in the BPR model). Note, however, that
for the case of signatures, one can still prove a positive result by restricting the adversary to
only see signatures of random messages (i.e., in case of a random-message attack).
Indeed,
input-triggered subversions meet our notion of relaxed veriﬁability (see Section 1.1), and thus
our positive results for unique signatures apply to such case.
The solution proposed by DFP is to modify the deﬁnition of undetectability so that the ad-
versary (and not the user) speciﬁes the input messages to the (potentially subverted) encryption
algorithm, whereas the goal of the user is to detect the attack given access to the transcript of
all queries made by the adversary (and answers to these queries). Hence, a scheme is said to
be subversion-resilient if there exists a ﬁxed polynomial-time test algorithm such that, either a
subversion attack cannot be detected eﬃciently but it does not leak any useful information, or
it is possible to eﬃciently detect that the system was subverted.8
It is possible to make a similar change as in [DFP15] and adapt the DFP model to signature
schemes in order to achieve security under chosen-message attacks. The end result would share
some similarities with our approach using cryptographic RFs; however, our framework provides
notable advantages. First, note that the DFP model does not provide any guarantee against
SAs that are eﬃciently detectable, whereas our RF model explicitly accounts for the actions to
be taken after an attack is detected; this is particularly relevant for signature schemes where
our generic attack uncovered the necessity of a self-destruct capability. Second, the polynomial-
time detection test in DFP is performed directly by the user since it requires knowledge of
the secret key. This is problematic in practice, especially in cases where the user’s machine is
compromised; instead, in our framework, a cryptographic RF for a signature scheme relies only
on public information and could easily be located on an (untrusted) external proxy.
Tampering attacks. A related line of research analyzes the security of cryptosystems against
tampering attacks. Most of these works are restricted to the simpler setting of memory tam-
pering (sometimes known as related-key security), where only the secret key of a targeted cryp-
8For instance, in case of the attack outlined above, the polynomial-time test could simply decrypt the cipher-
text and check the outcome matches the input message.
7
toscheme is subject to modiﬁcation. By now, we know several concrete primitives that remain
secure against diﬀerent classes of memory-tampering attacks, including pseudorandom func-
tions and permutations [BK03, Luc04, BC10, AFPW11, BCM11], pseudorandom generators and
hard-core predicates [GL10], hash functions [GOR11], public-key encryption [AHI11, Wee12],
and digital signatures and identiﬁcation protocols [KKS11, DFMV13]. Elegant generic compil-
ers are also available, relying on so-called tamper-resilient encodings and non-malleable codes
(see, among others, [GLM+04, DPW10, LL12, FMNV14, FMVW14, ADL14, JW15, DLSZ15,
AGM+15, FMNV15, DFMV15]).
The setting of randomness tampering, where the random coins of a cryptographic algorithm
are subject to tampering, has also been considered. For instance, Austrin et al. [ACM+14]
consider so-called p-tampering attacks, that can eﬃciently tamper with each bit of the random
tape with probability p. In this setting, they show that some cryptographic tasks (including
commitment schemes and zero-knowledge protocols) are impossible to achieve, while other tasks
(in particular signature and identiﬁcation schemes) can be securely realized.
Yet another related setting is that of tampering attacks against gates and wires in the com-
putation of a cryptographic circuit, and the design of tamper-proof circuit compilers [IPSW06,
FPV11, DK12, KT13, DK14, GIP+14].
Conference version. An abridged version of this paper appeared as [AMV15]. The cur-
rent version contains signiﬁcantly revised proofs and new material, including the stateless un-
detectable attack against signature schemes with non-trivial randomness, the deﬁnition and
construction of subversion-resilient identiﬁcation schemes, and a complete treatment of the
multi-user setting.
2 Preliminaries
2.1 Notation
For a string x, we denote its length by |x|; if X is a set, |X| represents the number of elements
in X . When x is chosen randomly in X , we write x ←$ X . When A is an algorithm, we write
y ←$ A(x) to denote a run of A on input x and output y; if A is randomized, then y is a
random variable and A(x; r) denotes a run of A on input x and randomness r. An algorithm A
is probabilistic polynomial-time (PPT) if A is randomized and for any input x, r ∈ {0, 1}∗ the
computation of A(x; r) terminates in at most poly(|x|) steps.
We denote with κ ∈ N the security parameter. A function ε : N → [0, 1] is negligible in the
security parameter (or simply negligible) if it vanishes faster than the inverse of any polynomial
in κ, i.e. ε(κ) = κ−ω(1). We sometimes write negl (κ) to denote an unspeciﬁed negligible function
in the security parameter.
domain D, is SD (A; B) = 1
lemma.
(cid:80)
The statistical distance between two random variables A and B, deﬁned over the same
x∈D |P [A = x] − P [B = x]|. We rely on the following simple
2
Lemma 1. Let A and B be a pair of random variables, and E be an event deﬁned over the
probability space of A and B such that PA[E] = PB[E] = P [E]. Then,