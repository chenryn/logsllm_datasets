developers—via compile-time errors—to explicitly register
callbacks using the sandbox_callback() function. For
instance, line 8 in Figure 1, must be rewritten to:
mSourceMgr.fill_input_buffer
(cid:44)→
= sandbox_callback(mRLBox,fill_input_buffer);
Statically whitelisting callbacks alone is insufﬁcient—an
attacker-controlled sandbox could still corrupt or hijack the
control ﬂow of the renderer by invoking callbacks at unex-
pected times. To address this class of attacks, RLBox supports
unregistering callbacks with the unregister() method. More-
over, the framework provides RAII (resource acquisition is
initialization) [55] semantics for callback registration, which
allows useful code patterns such as automatically unregister-
ing callbacks after completion of an invoked libjpeg function.
To deal with callback state exchange attacks (§3), RLBox
raises a compile-time error when renderer pointers leak
into the sandbox. For example, the JPEG decoder saves
its instance pointer with libjpeg and retrieves it in the
fill_input_buffer() callback, as shown on line 37 of
Figure 1. RLBox requires the application developer to
store such callback state in the application’s thread local
storage (TLS) instead of passing it to libjpeg. Thus, when
fill_input_buffer() is invoked, it simply retrieves the
decoder instance from the TLS, preventing any pointer leaks
or callback state modiﬁcations.
Non-local control transfers. A ﬁnal, but related concern is
protecting control ﬂow via setjmp()/longjmp(). These func-
tions are used for exception handling (e.g., my_error_exit()
in Figure 1). They work like a non-local goto, storing
various registers and CPU state in a jmp_buf on setjmp()
and restoring them on longjmp().
Naively porting libjpeg and libpng would store jmp_buf in
sandboxed memory. Unfortunately, this doesn’t work—there
is no easy way to validate a jmp_buf that is portable across
different platforms. We thus instead place such sensitive
state in the renderer’s TLS and avoid validation altogether.
With libjpeg this is straightforward since the jmp_buf is only
used in the my_error_exit() callback. libpng, however, calls
longjmp() itself. Since we can’t expose longjmp() directly,
when sandboxing libpng, we expose a longjmp() trampoline
function that calls back to the renderer and invokes longjmp()
on libpng’s behalf, using the jmp_buf stored in the TLS.
706    29th USENIX Security Symposium
USENIX Association
5 Simplifying migration
RLBox simpliﬁes migrating renderer code to use sandboxed
libraries while enforcing appropriate security checks. RLBox
does this by removing error-prone glue code (e.g., for data
marshaling) and by reducing the security-sensitive code
required for migration. The resulting reduction in developer
effort is evaluated in detail in Section 7.3.
The RLBox framework helps automate porting by (1)
allowing Firefox developers to incrementally port application
code—the entire application compiles and runs with full
functionality (passing all tests) between each step of porting—
and (2) guiding the porting effort with compiler errors which
highlight what the next step should be. We illustrate how
RLBox minimizes engineering effort using this incremental,
compiler-directed approach using our running example.
To start, we assume a standard Firefox build that uses a
statically linked libjpeg.
Step 1 (creating the sandbox). We start using RLBox by
creating a sandbox for libjpeg using the None sandboxing
architecture. As the name suggests, this sandbox does not
provide isolation; instead it redirects all function calls back to
the statically linked, unsandboxed libjpeg. However, RLBox
still fully enforces all of its type-level guarantees such as
tainting untrusted data. Thus, we can start using RLBox
while still passing functional tests.
Step 2 (splitting data and control ﬂow). Next, we migrate
each function call to libjpeg to use the sandbox_invoke()
API. RLBox ﬂags calls passing pointers to the sandbox as
compile-time errors after this conversion, as the sandbox will
be unable to access the (application) memory being pointed
to. To resolve this, we also convert the allocations of objects
being passed to libjpeg to instead use sandbox_malloc(). For
example, in Section 3, we rewrote:
tainted status = sandbox_invoke(mRLBox,
(cid:44)→
jpeg_read_header, &mInfo, TRUE);
to, instead, allocate the mInfo object in the sandbox:
tainted p_mInfo =
sandbox_malloc(mRLBox);
tainted status = sandbox_invoke(mRLBox,
(cid:44)→
jpeg_read_header, p_mInfo, TRUE);
At this point, we need to re-factor the rest of this function
and several other JPEG decoder functions—mInfo is a data
member of the nsJPEGDecoder class. Doing this in whole is
exhausting and error-prone. Instead, we remove the mInfo
data member and add one extra line of code in each member
function before mInfo is ﬁrst used:
jpeg_decompress_struct&
(cid:44)→
mInfo = *(p_mInfo.unsafeUnverified());
This unsafe alias pattern allows the remainder of the function
body to run unmodiﬁed, i.e., the alias deﬁned in this pattern
can be used everywhere the original mInfo variable is
needed, albeit unsafely, as unsafeUnverified() temporarily
suppresses the need for validation functions.
We
also need to deal with return values
from
sandbox_invoke() which are tainted, either by writ-
ing validation functions to remove the taint or deferring this
till the next step and using unsafeUnverified() to satisfy
the type checker. Again, the entire application should now
compile and run as normal.
Step 3 (hardening the boundary). Our next goal is to grad-
ually remove all instances of the unsafe alias pattern, moving
Firefox to a point where all data from the sandbox shared
memory and all tainted return values are handled safely.
We can do this incrementally, checking our work as we go
by ensuring the application still compiles and runs without
errors. To do this, we simply move each unsafe-alias pattern
downwards in the function source; as it moves below a given
statement, that statement is no longer able to use the alias and
must be converted to use the actual tainted value. This may
involve writing validation functions, registering callbacks,
or nothing (e.g., for operations which are safe to perform on
tainted values). We can compile and test the application after
any or all such moves. At the end, shared data is allocated
appropriately, and all tainted values should be validated—no
instances of unsafeUnverified() should remain.
Step 4 (enabling enforcement). Our ﬁnal task is to replace
the None sandbox with one that enforces strong isolation. To
start, we remove the statically-linked libjpeg and change the
sandbox type from None to None_DynLib. In contrast to the
None sandbox, the None_DynLib sandbox dynamically loads
libjpeg. Any remaining calls to libjpeg made without the
sandbox_invoke() will fail with a symbol resolution error
at compile time. We resolve these and ﬁnish by changing
the sandbox type to Process, NaCl sandbox types that enforce
isolation. We discuss these isolation mechanisms in more
detail in Section 6.2.
6
Our implementation consists of two components: (1) a C++
library that exposes the APIs that developers use when
sandboxing a third-party library, and (2) two isolation mech-
anisms that offer different scaling-performance trade-offs.
We describe both of these below, and also describe a third
approach in Section 9.
6.1 RLBox C++ API and type system
The RLBox API is implemented largely as a pure C++ library.
This library consists of functions like sandbox_invoke() that
are used to safely transfer control between the application
and library. These functions return tainted values and
can only be called with tainted values or primitives. The
library’s wrapped types (e.g., tainted) are used to
ensure dataﬂow safety (e.g., when using a value returned
by sandbox_invoke()). Since the implementation of the
Implementation
USENIX Association
29th USENIX Security Symposium    707
control ﬂow functions is mostly standard, we focus on our
implementation of tainted values.
The tainted wrapper. We implement tainted as
a simple wrapper that preserves the memory layout of the
unwrapped T value, i.e., tainted is essentially struct
tainted { int val; }. The only distinction be-
tween tainted and untainted values is at the type-level. In
particular, we deﬁne methods and operators on tainted
values that (1) ensure that tainted values cannot be used
where untainted values are expected (e.g., branch conditions)
without validation and (2) allow certain computations on
tainted data by ensuring their results are themselves tainted.
In general, we cannot prevent developers from deliberately
abusing unsafe C++ constructs (e.g., reinterpret_cast)
to circumvent our wrappers. Our implementation, however,
guards against common C++ design patterns that could
inadvertently break our tainted abstraction. For example,
we represent tainted pointers as tainted and not
tainted *. This ensures that developers cannot write
code that inadvertently unwraps tainted pointers via pointer
decay—since all C++ pointers can decay to void*. We also
use template meta-programming and SFINAE to express
more complex type-level policies. For example, we disallow
calls to verify() on pointer types and ensure that callback
functions have wrapped all parameters in tainted.
Operators on tainted data. For ﬂexibility, we deﬁne
several operators on tainted types. Operations which are
always safe, such as the assignment (operator=) of a
tainted, simply forward the operation to the wrapped
int. Other operators, however, require return types to be
tainted. Still others require runtime checks. We give a few
illustrative examples.
(cid:73) Wrapping returned values: We allow arithmetic oper-
ators (e.g., operator+) on, say, tainteds, or a
tainted and an untainted int, but wrap the return
value.
(cid:73) Runtime checks: We allow array indexing with both ints
and tainteds by deﬁning a custom array indexing
operator operator[]. This operator performs a runtime
check to ensure the array indexing is within sandbox
memory.
(cid:73) Pointer swizzling: We also allow operations such as
operator=, operator*, and operator-> on tainted
pointers, but ensure that the operators account for swizzling
(in addition to the runtime bounds check) when performing
these operations. As with the others, these operators return
tainted values. In Appendix A of [35], we describe the
subtle details of type-driven automatic pointer swizzling.
Wrapped structs. Our library can automatically wrap prim-
itive types, pointer types, function pointers, and static array
types. It cannot, however, wrap arbitrary user-deﬁned structs
without some added boilerplate deﬁnitions. This is because
C++ (as of C++17) does not yet support reﬂection on struct
ﬁeld names. We thus built a ~100LOC Clang plugin that auto-
matically generates a header ﬁle containing the required boil-
erplate for all struct types deﬁned in the application source.
Other wrapped types. In addition to the tainted wrapper
type, RLBox also relies on several other types for both safety
and convenience. As an example of safety, our framework
distinguishes registered callbacks from other function point-
ers, at the type level. In particular, sandbox_callback returns
values of type callback. This allows us to ensure
that functions that expect callbacks as arguments can in fact
only be called with callbacks that have been registered with
sandbox_callback. As an example of convenience, RLBox
provides RAII types such as stack_arr and heap_arr
which minimize boilerplate. With these types, developers
can for instance invoke a function with an inline string:
sandbox_invoke(sbox, png_error, stack_arr("...")).
6.2 Efﬁcient isolation mechanisms
The RLBox API provides a plugin approach to support
different, low-level sandboxing mechanisms. We describe two
sandboxing mechanisms which allow portable and efﬁcient
solutions for isolating libraries in this section. In Section 9
we describe a third mechanism, based on WebAssembly, that
we recently integrated in production Firefox.
The ﬁrst mechanism uses software-based fault isolation
(SFI) [60] extending Google’s Native Client (NaCl) [49, 65],
while the second uses OS processes with a combination
of mutexes and spinlocks to achieve performance. These
approaches and trade-offs are described in detail below.
SFI using NaCl. SFI uses inline dynamic checks to restrict
the memory addressable by a library to a subset of the address
space, in effect isolating a library from the rest of an appli-
cation within a single process. SFI scales to many sandboxes,
has predictable performance, and incurs low overhead for
context switching (as isolation occurs within a single process).
The low context-switch overhead (about 10× a normal
function call) is critical for the performance of streaming
libraries such as libjpeg, which tend to have frequent control
transfers. We explore this in more detail later (§7).
To support library sandboxing with SFI, we extend the
NaCl compiler toolchain [49, 65]. NaCl was originally
designed for sandboxing mobile code in the browser, not
library sandboxing. Hence, we made signiﬁcant changes
to the compiler, optimization passes, ELF loader, machine
model and runtime; we give a thorough description of these
changes in Appendix B of [35]. To ensure that our changes
do not affect security, we always verify the code produced by
our toolchain with the unmodiﬁed NaCl binary code veriﬁer.
We use our modiﬁed NaCl compiler toolchain to compile
libraries like libjpeg along with a custom runtime component.
This runtime component provides symbol resolution and
facilitates communication with the renderer.
Process sandboxing. Process sandboxing works by isolating
708    29th USENIX Security Symposium
USENIX Association
a library in a separate sandbox process whose access to the
system call interface is restricted using seccomp-bpf [33].
We use shared memory between the two processes to pass
function arguments and to allocate shared objects. Compared
to SFI, process sandboxing is simpler and does not need
custom compiler toolchains. When used carefully, it can even
provide performance comparable to SFI (§7).
As with SFI, process sandboxing also includes a custom
runtime that handles communication between the library and
renderer. Unlike SFI, though, this communication is a control
transfer that requires inter-process synchronization. Unfortu-
nately, using a standard synchronization mechanism—notably,
condition variables—is not practical: a simple cross-process
function is over 300× slower than a normal function call.
Integrating RLBox with Firefox
Our process sandbox uses both spinlocks and condition
variables, allowing users to switch between to address
application needs. Spinlocks offer low control-transfer
latency (20× a normal function call), at the cost of contention
and thus scalability. Condition variables have higher latency
(over 300× a normal function call), but minimize contention
and are thus more scalable. In the next section we detail our
Firefox integration and describe how we switch between
these two process sandboxing modes.
6.3
To use the SFI or Process sandbox mechanisms efﬁciently
in Firefox, we must make several policy decisions about
when to create and destroy sandboxes, how many sandboxes
to keep alive, and for the Process sandbox when to switch
synchronization modes. We describe these below.
Creating and destroying sandboxes. We build Firefox
with RLBox sandboxing web page decompression, image
decoding, and audio and video playback. We apply a simple
policy of creating a sandbox on demand—a fresh sandbox is
required when decoding a resource with a unique  as discussed