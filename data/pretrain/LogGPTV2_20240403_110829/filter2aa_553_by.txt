### 函数签名

函数的返回类型和形参列表共同构成了函数签名。函数签名明确了传入函数的参数类型以及函数返回值的类型。

**示例：**

```c
double duff(double, int); // 函数原型

int main(void) {
    double q, x;
    int n;
    ...
    q = duff(x, n);  // 函数调用
    ...
}

double duff(double u, int k) {  // 函数定义
    double tor;
    ...
    return tor;  // 返回double类型的值
}
```

### 关键概念

理解函数对于编写高效且灵活的C程序至关重要。将大型程序分解为多个函数不仅有助于组织代码，还能提高可读性和可维护性。每个函数负责处理特定的任务，这使得程序更易于理解和调试。

#### 参数与返回值

- **函数参数**：用于从调用者向被调用函数传递信息。
- **返回值**：使用`return`关键字将结果返回给调用者。

#### 局部变量的作用域

- 函数的形参和其他局部变量仅在该函数内部可见。
- 不同函数中可以声明同名变量，但它们是完全独立的实体。
- 函数不能直接访问其他函数中的变量，这种限制保护了数据的完整性。

如果确实需要在不同函数之间共享数据，可以通过指针作为参数来实现。

### 本章小结

- **函数**：作为构建大型程序的基本单元，每个函数应具有单一且明确的功能。
- **参数传递**：使用参数将值传递给函数，并通过`return`语句返回结果。
- **非整型返回值**：当函数返回类型不是`int`时，必须在函数定义和原型中指定其类型。
- **修改外部变量**：若需在被调函数中修改主调函数的变量，可以传递地址或指针。
- **函数原型**：ANSI C提供的强大工具，允许编译器检查函数调用中的参数数量和类型是否正确。
- **递归**：函数调用自身的过程称为递归，虽然适用于某些问题，但通常会消耗更多资源并降低效率。

### 复习题

1. **实际参数与形式参数的区别是什么？**
2. 根据以下描述编写相应的ANSI C函数头：
   - `donut()`接受一个`int`类型的参数，打印若干个0（由参数指定数量）。
   - `gear()`接受两个`int`类型的参数，返回一个`int`类型的值。
   - `guess()`不接受任何参数，返回一个`int`类型的值。
   - `stuff_it()`接受一个`double`类型的值和一个`double`类型变量的地址，将第一个值存储到指定位置。
3. 同上，针对以下描述编写函数头：
   - `n_to_char()`接受一个`int`类型的参数，返回一个`char`类型的值。
   - `digit()`接受一个`double`类型的参数和一个`int`类型的参数，返回一个`int`类型的值。
   - `which()`接受两个可以存储`double`类型变量的地址，返回一个`double`类型的地址。
   - `random()`不接受任何参数，返回一个`int`类型的值。
4. 设计一个函数，返回两个整数之和。
5. 如果第4题改为返回两个`double`类型的值之和，如何修改该函数？
6. 编写名为`alter()`的函数，接受两个`int`类型的变量x和y，将它们的值分别设置为两者的和与差。
7. 下面的函数定义是否正确？

   ```c
   void salami(num) {
       int num, count;
       for (count = 1; count < num; count++) {
           printf("%d ", count);
       }
   }
   ```

8. **数组初始化**：使用数组之前必须先进行初始化。未初始化的数组元素可能包含任意值，因此，在使用前务必赋初值。编译器默认使用的值可能是内存当前位置上的现有值，导致每次运行程序时输出结果不同。

注意：不同的存储类别有不同的属性，本章所讨论的数组属于自动存储类别，即在函数内部声明且未使用`static`关键字。对于其他存储类别的变量和数组，如果声明时未初始化，编译器可能会自动将其设为0。