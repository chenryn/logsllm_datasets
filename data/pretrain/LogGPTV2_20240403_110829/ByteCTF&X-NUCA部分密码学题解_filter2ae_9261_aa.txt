# ByteCTF&X-NUCA部分密码学题解
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
最近打了ByteCTF和X-NUCA两场比赛，题目质量很高，（Web手们都哭了）两场比赛自己也分别只做出两道密码学方向的题目，菜狗落泪。
这里记录下自己解题的一个过程，可能废话比较多，当然也是希望能够表达的清楚。如果只是想看最终解题方法的读者可以直接跳解题流程。
## ByteCTF
###  noise
需要前置知识或了解：中国剩余定理
task.py
    #!/usr/bin/env python3
    from os import urandom
    from random import choices
    from hashlib import sha256
    import signal
    import string
    import sys
    def getrandbits(bit):
        return int.from_bytes(urandom(bit >> 3), "big")
    def proof_of_work() -> bool:
        alphabet = string.ascii_letters + string.digits
        nonce = "".join(choices(alphabet, k=8))
        print(f'SHA256("{nonce}" + ?) starts with "00000"')
        suffix = input().strip()
        message = (nonce + suffix).encode("Latin-1")
        return sha256(message).digest().hex().startswith("00000")
    def main():
        signal.alarm(60)
        if not proof_of_work():
            return
        secret = getrandbits(1024)
        print("Listen...The secret iz...M2@9c0f*#aF()I!($Ud3;J..."
              "Hello?...really noisy here again...God bless you get it...")
        for i in range(64):
            try:
                op = input().strip()
                num = input().strip()
            except EOFError:
                return
            if not str.isnumeric(num):
                print("INVALID NUMBER")
                continue
            num = int(num)
            if op == 'god':
                print(num * getrandbits(992) % secret)
            elif op == 'bless':
                if num == secret:
                    try:
                        from datetime import datetime
                        from flag import FLAG
                    except Exception as e:
                        FLAG = "but something is error. Please contact the admin."
                    print("CONGRATULATIONS %s"%FLAG)
                    return
                print("WRONG SECRET")
    main()
还好，第一题代码量不大，不错不错。看一看，这一题功能很简单，你输入一个数字，他返回给你一个，你的数字 乘上一个992bit的 随机数字
模上一个1024bit的secret
的结果。当然，每次连接上后生成的secret是随机的，但是连上一次，可以交互64次，此时secret是保持不变的。算上你需要一次交互来获取flag，那么就是需要在63次之内“猜”到这个随机生成的secret。
好的，上式子，我们知道中国剩余定理是这样子的
注意这里的模是n，他们彼此互素，然后利用中国剩余定理就可以恢复m（如果m的bit位数小于所有n的bit位数之和的话）
此时，如果k都等于1，那么，
此时n和c就好像等价了，并不能知道模数到底是哪个，换一个说法就是，n和c都可以看作是模数
我们再回到这道题本身，设我们发送的值是n1,n2,n3，secret为s，返回的值是c1,c2,c3
那么就会有这么些式子
这不就是中国剩余定理形式么？所以当等于1，我们就可以利用中国剩余定理来恢复这个secret
需要满足的条件就是，n * randnum = c+s​，还有就是n的bit位数之和要大于s的bit位数即1024
当然，这就需要运气了，因为他远程生成的乘数是随机的992bit数字（当然是有可能会小于992bit的），而s是1024bit的数字，所以我们要发送的n大概就是32bit的素数，32*32=1024，所以在63次交互内我们需要服务器生成32个随机数是“好”的，所谓”好””就是要让这个k正好等于1。
我们也可以先本地简单的测一测，可以选择比较小的数给他乘，这样子的k大概率会是0或者1，而0比较好判断，直接判断返回的值是否被我们发送过去的数整除就可以了。而是否正好等于1我们是无法判断的，但凡一组数据插入了一个让k不等于1或者0的数，那么整组数据就作废了。所以我们发送尽量小的数n，让k值大概率只落在0或者1上。
测试代码：
    from random import *
    primes = [4294966427, 4294966441, 4294966447, 4294966477, 4294966553, 4294966583, 4294966591, 4294966619, 4294966639, 4294966651, 4294966657, 4294966661, 4294966667, 4294966769, 4294966813, 4294966829, 4294966877, 4294966909, 4294966927, 4294966943, 4294966981, 4294966997, 4294967029, 4294967087, 4294967111, 4294967143, 4294967161, 4294967189, 4294967197, 4294967231, 4294967279, 4294967291]
    for _ in range(20):
        secret = getrandbits(1024)
        for num in primes:
                print(num * getrandbits(992) // secret),
        print
这里我们选择固定了随机数，然后经过20次的测试，下面是测试结果
可以发现，生成的随机数似乎也具有一定程度的局部性，当k出现7，8这样比较大的数的时候，几乎整组的k都比较大，但大部分情况下，由于我们输入的素数比较小，还是只有0和1的情况偏多，但一般也是0偏多，所以，，看脸了，只要有一半以上的1，我们就成功了。
####  解题流程：
  1. 确定63个比较小的素数
  2. 把这些值发送过去
  3. 收到的值进行一个判断，是否被自己发过去的数整除，是就扔掉，否则就存起来
  4. 存起来的数超过32个就可以进行CRT尝试恢复secret
  5. 发送secret过去验证，要是没拿到flag就回到第2步，如此循环往复，加油吧，看你的脸了！
exp：
    from pwn import *
    from hashlib import sha256
    from tqdm import tqdm
    from Crypto.Util.number import *
    def GCRT(mi, ai):
        assert (isinstance(mi, list) and isinstance(ai, list))
        curm, cura = mi[0], ai[0]
        for (m, a) in zip(mi[1:], ai[1:]):
            d = int(GCD(curm, m))
            c = a - cura
            assert (c % d == 0)
            K = c // d * inverse(curm // d, m // d)
            cura += curm * K
            curm = curm * m // d
            cura %= curm
        return cura % curm, curm
    def proof_of_work(sh):
        sh.recvuntil("SHA256(\"")
        nonce = sh.recv(8)
        sh.recvuntil('with \"00000\"')
        for a in tqdm(range(0x30, 0x7f)):
            for b in range(0x30, 0x7f):
                for c in range(0x30, 0x7f):
                    for d in range(0x30, 0x7f):
                        rest = chr(a) + chr(b) + chr(c) + chr(d)
                        m = (nonce.decode('latin1') + rest).encode("Latin-1")
                        if sha256(m).digest().hex().startswith("00000"):
                            sh.sendline(rest)
                            sh.recvuntil('again...God bless you get it...')
                            return
    def io(sh, num):
        sh.sendline('god')
        sh.sendline(str(num))
        tmp = sh.recvuntil('\n')
        if len(tmp) > 100:
            return int(tmp)
        else:
            return int(sh.recvuntil('\n'))
    primes = [4294966427, 4294966441, 4294966447, 4294966477, 4294966553, 4294966583, 4294966591, 4294966619, 4294966639, 4294966651, 4294966657, 4294966661, 4294966667, 4294966769, 4294966813, 4294966829, 4294966877, 4294966909, 4294966927, 4294966943, 4294966981, 4294966997, 4294967029, 4294967087, 4294967111, 4294967143, 4294967161, 4294967189, 4294967197, 4294967231, 4294967279, 4294967291]
    for i in range(2**10):
        sh = remote("182.92.153.117", 30101)
        proof_of_work(sh)
        length = 32
        c = []
        index = 0
        for i in range(63):
            tmp = io(sh, primes[index])
            if tmp%primes[index] !=0:        #这个判断是剔除k等于0的情况
                c.append(-1 * tmp)
                index += 1
                if index >= 32:        #如果超过32个数的k不等于0，我们就可以拿来用了，但也不确定是否这32个数都为1
                    break
        if index < 32:
            continue
        secret = GCRT(primes, c)[0]
        sh.sendline('bless')
        sh.sendline(str(secret))
        tmp = sh.recvuntil('\n')
        if len(tmp) < 5:
            tmp = sh.recvuntil('\n')
        if b'WRONG' in tmp:
            sh.close()
            continue
        print(tmp)
        sh.interactive()
比赛的时候大概跑了2min叭，运气还是可以的。
###  threshold
需要前置知识或了解：椭圆曲线相关性质
    from gmssl import func, sm2
    #from flag import FLAG
    flag="Congratulations!"
    sm2p256v1_ecc_table = {
        'n': 'FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123',
        'p': 'FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF',
        'g': '32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7' +
             'bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0',
        'a': 'FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC',
        'b': '28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93',
    }
    n = 'FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123'
    G = '32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7' \
        'bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0'
    def sign(tsm2):
        data = func.random_hex(len(n)) 
        k1_str = func.random_hex(len(n))
        print(tsm2.send_p1(data, k1_str))
        backdoor = input('backdoor:').strip()
        result = tsm2.output_p1(k1_str, backdoor)
        print(result)
    def verify(tsm2):
        message = input('msg:').strip().encode().strip(b'\x00')
        sign = input('sign:').strip().encode().strip(b'\x00')
        check = tsm2.verify(sign, message)
        if check is True and message == b'Hello, Welcome to ByteCTF2020!':
            print(FLAG)
        else:
            print(check)
    class TSM2(object):
        def __init__(self, sk):
            ecc_table = sm2p256v1_ecc_table
            self.ecc_table = ecc_table
            self.n = int(ecc_table['n'], 16)
            self.para_len = len(ecc_table['n'])
            self.ecc_a3 = (int(ecc_table['a'], base=16) + 3) % int(ecc_table['p'], base=16)
            self.sk = int(sk, 16)
            self.pk = self._kg(self.sk, ecc_table['g'])
            self.sks = int(func.random_hex(self.para_len), 16)