态能用于后续检查或处理。
§3.1.1 Shell操作
下面简要说明了shell读取和执行命令时所进行的操作。简单的说，shell执行了下面的操作：
从文件（参见53.8[Shell脚本].p26），或启动"-c"选项的字符串参数（参见56.1[Bash的启动）].p55）中，
或者用户的终端上读取输入，
2按照3.1.1.1[引用]p5中所述规则把输入分解为单词和运算符。这些符号用元字符分隔。该步骤还进
行别名扩展（参见56.6[别名]，p62）
③把符号解析为简单和复杂命令（参见53.2Shell命令].p6).
④进行各种shell扩展（参见与3.5Shell扩展]pl4），并把扩展后的符号分解为文件名（参见3.5.8[文件
名扩展]，p19）、命令和参数的列表。
5进行必要的重定向（参见53.6[重定向]，p21），并把重定向运算符及其参数从参数列表中去掉。
6执行得到的命令（参见53.7[命令的执行]，p24）
（可选的）等待命令结束并收集其退出状态（53.7.5退出状态，p26）。
BASH中文文档
p4
---
## Page 16
3.1 SHELL语法
第三章SHELL的基本功能
$3.1.1.1引用
引用在shell中用以去除某些字符或单词的特殊含义。它可以用来禁止对特殊字符的特殊处理，使得保
留字不再被认为是保留字，或者禁止参数扩展。
Shell的每个元字符在shell中都有特殊的含义，必须引用后才能代表其自身，如果使用了命令历史扩展
的功能（59.3[历史扩展]：p92），则历史扩展字符（通常是！）也引用起来以取消历史扩展。有关历史扩展的
更多细节，请参见59.1[Bash的历史功能，p90.
Bash中有三种引用机制：转义字符，单引用和双引用。
53.1.1.2转文字符
在Bash中，没有转义的反斜杠是转义字符，它能保留其下一个字符的字面含义，除非这个字符是换
行符。如果出现newline这样的序列，并且反斜杠本身没有被引用，则newline就是行连续符：也就
是说，它们将会从输入流中被删除并被完全忽略掉。
$3.1.1.3单引用
把字符串用单引号（）引用能保留引号内各个字符的字面含义。在单引号中不允许再出现单引号，即使
它已经由反斜杠转义。
$3.1.1.4双引用
把字符串用双引号（"）引用能保留引号内各个字符的字面含义，除非这些字符是$、、、以及！（如
果已经打开历史扩展）.在双引号中，$和，继续保留其特殊的功能（参见53.5[Shell扩展]，p14）。而反斜
杠，只有当其后面的字符是$、、“、或者换行符时才保留其特殊的含义。在双引号中，如果反斜杠后
面是这些字符中的任意一个，则这个反斜杠就会被删除。而它后面字符如果没有特殊的含义，则它将被保
留。在双引号中可以出现另外一个双引号，只要它在反斜杠后面，如果打开了历史扩展，！将导致历史扩
展，除非它由反斜杠转义，在！前的反斜杠不会被删除。
特殊变量和@在双引号中有特殊的含义：请参见53.5.3[Shell参数扩展]，p16。
S3.1.2ANSI标准C引用
形如$Btring的单词会被特殊处理。这个词将会扩展成一个字符串，其中的转义字符会按照ANSI
C标准被替换。如果其中出现转义字符序列，则按照下面的规则解释：
18
警告（响铃）
退格删除
转义字符（不属于ANSIC）
走纸换页
国
新行
国
换行
（水平）制表符
√
垂直制表符
反斜杠
即是某行的最后一个字符。
P5
目录
BASH 中文文
---
## Page 17
第三章SHELL的基本功能
3.2 SHELL 命令
+ e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e ee e e 
an
由八进制数unn（一个到三个数字）代表的一个八位字符。
xHH
由十六进制数HH（一个到两个数字）代表的一个八位字符。
cx
一个控制字符CTRL-X
扩展的结果是一个单引用，就好像美元符号原本就不存在一样。
不能用双引号转义
在很多命令中都需要指定单个字符，例如tr或auk中的IFS等变量。这时就应该使用ANSI标
准C引用，而不能用双引号转义。例如
tr S'n++file
可以把文件file的所有行用空格连在一起，
§3.1.2.1Locale专用的翻译
双引用的字符串在美元符号（$）后面将使得该字符串根据当前的locale被翻译过来。如果当前locale
是C或者POSIX，则美元符号将被忽略。如果字符申被翻译或者替换，则替换后的字符串是双引用的。
有些系统使用LC.MESSAGES这个shell变量来选择消息目录。也有些系统根据TEXTDOMAIN这个shell
变量来决定消息目录的名称，有可能还要加上，o后级。如果使用了TEXTDOMAIN变量，可能还需要把
TEKTDOMAINDIR设为存放消息目录文件的路径。更有一些系统这样使用这两个变量：
TEXDOMAINDIR/LC_MESSAGES /LC_MESSAGES/TEXTDOMAIN.mo
83.1.3注释
在非交互运行的 shell中，或者交互运行的 shell 如果打开了内部命令shopt 的interactive_commenta
选项（参见与87内部命令shopt]，p46），以开头的单词将使得该单词及本行中所有其它单词都被忽略。如
已经打开了interactive_commente选项。至于如何让shell变成交互式的，请参见56.3[交互式的shel]
果交互运行的shell没有打开interactive_commente选项则不允许注释，在默认情况下，交互运行的shell
p58 -
$3.2
Shell命令
个简单的shell命令，例如echoabc，包含该命令本身，其后还有一些参数：它们都用空格分隔。
复杂一些的命令由有简单的命令通过各种方式组合而成的：通过管道命令，这时一个命令的输出成为另
一个命令的输入：或者通过循环或条件命令：或者通过其它组合方式。
3.2.1简单命令
简单命令使用得最频繁。它仅仅包括空白符分隔的多个单词，其结尾是一个shell控制运算符。其中的
第一
个单词通过指定要执行的命令，而后续单词都是这个命令的参数。
简单命令的返回状态（参见53.7.5退出状态]，p26）是POSIX1003.1中的waitpid函数规定的退出状
态：如果该命令由一个信号n终止，则其退出状态是128+n。
++++++++++++++++++++******++++++++++++++++++*
BASH 中文文档
目录
p6
---
## Page 18
3.2SHELL命令
第三章SHELL的基本功能
S3.2.2管道
管道是由控制字符|或&分隔开的一系列简单命令。
管道的其格式为：
[time“p]][1] 命令一[[或|图]命令二-]
管道里面每个命令的输出都经由管道与下一个命令的输入相连接：也就是说，每个命令都去读取上一个命令
的输出。这种连接早在命令中指定的任何重定向之前就已经进行了。
如果使用了|&，则命令一的标准错误输出将会和命令二的标准输出相连，这是2>&11的简写形式。这
种对标准错误输出的隐含重定向是在命令中指定的任何重定向之后进行的。
保留字tine能够在管道执行完毕后输出其执行时间的统计信息。这个统计目前包括执行该命令所花
费的总时间（钟表时间）以及用户和系统时间。P选项助记司：POSIx使得输出的形式和POSIX中的规定相
同。可以设置TINEFDRMAT变量为一个格式化字符串，以指定时间输出的形式。至于所有可用的格式，请参
见g5.2[Bash的变量]，p5f。把tine作为保留字允许我们统计内部命令，shell函数，以及管道的执行时间：
而如果tine是外部命令就不能很容易的做到这一点。
time和times
在Bash中，time 是用于管道的保留字，而timee是一个内部命令。它们的作用相同，使用的
场合却不一样。参见4.1波恩Shell的内部命令times]p33。
如果该管道不是异步（参见53.2.3[命令队列]，p7）执行的，则shell会等待管道中所有命令执行的结束。
果打开了pipefai1选项，则管道的返回状态是其中最后一个（最靠右的）返回非零的那个命令的状态：如
果所有命令都成功执行，则返回零，如果管道的前端有保留字！，则其返回状态是按照如上据说再进行逻辑
取反。Shell等待管道里面的所有命令的结束，然后才返回一个值。
S3.2.3命令队列
命令队列是由一个或者管道通过运算符；、整、&、11连接而成，最后还可以（可选的）由；、&、或换
行符结束。
在之些队列运算符中，截&和11具有同样的优先级：其次是；和&，这两个也有同样的优先级。
如果一个命令是由控制字符&结束，则shell会不同步的在子shell中执行该命令。我们通常称之为
在“后台"运行该命令。这时shell并不等待命令的结束，而其返回状态0（即逻辑真）。如果没有启用作业控
制（参见57[作业控制：p69），并且也没有显式指定重定向，则在异步执行的命令的标准输入将被重定向到
/dev/null.
由；分隔的命令将相继执行。Shell依次等待每个命令的结束。整个返回状态是最后一个要执行命令的
返回状态。
甲
方法执行。
“与"队列具有如下形式：
命令一整命令二
其中，当且仅当命令一返回值为零时才执行。
“或”队列具有如下形式：
命令一I命令二
其中，当且仅当命令一返回值为非零时才执行。
“与"和“或“队列的返回值是其中最后一个被执行的命令的返回值。
目录
BASH 中文文
---
## Page 19
第三章SHELL的基本功能
3.2 SHELL 命令
83.2.4复合命令
复合命令是shell的编程结构体，每个结构体都是以保留字或者控制运算符开头，然后以与之对应的保
留字或控制运算符结束。任何与复合命令相关的重定向（参见53.6[重定向，p21）都作用于该复合命令里面
的所有命令，除非显式覆盖，
Bash提供了循环结构，条件结构，以及将命令分组并将之整体执行的机制。
53.2.4.1循环结构
Bash支持以下的循环结构。
请注意：在介绍命令的语法时不管在哪里使用了；，都可以用一个或多个换行符来代替。
A.1
until
until命令的语法格式是
until测试命令；do命令块；done
只要测试命令返回非零值就执行命令缺。其返回值是命令块中最后一个被执行的命令的返回值，如果命令
块没有被执行则返回零。
B.while
while命令的语法格式是
while测试命令；do命令块；done
只要测试命令返回零就执行命令块，其返回值是命令块中最后一个被执行的命令的返回值。如果命令块没有
被执行则返回零。
C.for
for命令的语法格式是
for变量[in单词]；do 命令块；done
将单词扩展成一个列表，然后把结果中列表的每个元素都赋值给变量并执行一次命令块。如果没有“in单
词”这部分，则for依次对每个位置参数都执行一次命令块，就好像指定了“in$a”一样（参见53.4.2[特殊参
数]，pI4）.其返回值是命令块中最后一个被执行的命令的返回值。如果对单词的扩展没有得到任何元素，则
不执行任何命令，并返回零。
for命令还支持另外一种格式：
for（（表达式一；表达式二；表达式三））；do命令块；done
首先，按照下面将要介绍（参见56.5Shell的算术运算]，p61）规则对算术表达式一进行求值。然后不断的对
算术表达式二进行求值，直到其结果为零。每次求值时，如果表达式二的值不是零，则执行一次命令块，并
且计算算术表达式三的值，如果省略了任意一个表达式，则效果就好像该表达式总是返回一。其返回值是命
令块中最后一个被执行的命令的返回值。如果表达式的值都是假的，则返回假。
[分节结束]
可以使用内置命令break和continue（参见多4.1波恩Shell的内部命令break]，p28和g4.1[波恩Shell
的内部命令continue：p30）来控制循环命令的执行。
BASH 中文文档
目录
p8
---
## Page 20
3.2SHELL命令
第三章SHELL的基本功能
53.2.4.2条件结构
A.if
if命令的语法格式是
if 测试命令一
；then
命令块一：
[elif测试命令二；then
命令块二：
[else
其它命令块：
fi
首先执行测试命令一这个命令列表，如果其返回值为零，则执行命令列表命令块一，如果测试命令一返回
非零值，则依次执行每个elif列表，如果其返回值为零，则执行其对应的命令块，并结束整个命令，如果
有“elBe其它命令块”，并且if或者elif子句的最后一个命令返回值为非零，则执行其它命令块。整个命
令的返回值是最后一个被执行的命令的返回值。如果没有一个条件为真，则返回零。
B.case
case命令的语法格式是
caBe 单词in
[[（模式一
模式二.
命令块
esac
case命令会选择性的执行与单词所匹配的第一个模式对应的命令块。如果打开了shell的nocasematch
选项（参见587[内部命令shopt]，p47的描述），则匹配时将忽略字母的大小写.“"用来分隔多个模式，
而"）"用来结束模式列表。②模式列表和其对应的命令块叫做一个“分句"。每个分句都必须由"：："，“，&”或
者“：：&"结束。这里的单词在匹配之前要经过波浪号扩展、参数扩展、命令替换、算术扩展以及引用去除，
而每个模式也要经过波浪号扩展、参数扩展、命令替换、算术扩展等步骤。
case分句的数量量不限的，但是每个分句都以"；：”，“&”或者“：：&”结束。最先匹配的模式决定了哪
个命令块被执行。下面是case在脚本中使用的一个例子，它描述一些动物的有趣特征：
亲代码清单1：case的例子
1echo-n"请输入一个动物的名称：“
3echo -n"SANIMAL有"
2 read ANIMAL
4 case SANIMAL in
“。u-o（骤丨丨）
人1袋鼠）echo-n"两":；