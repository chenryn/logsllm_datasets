[4] N. Buchbinder and E. Petrank. Lower and upper bounds on
obtaining history independence. In Proceedings of Crypto,
2003.
[5] J. Chow, B. Pfaff, T. Garﬁnkel, K. Christopher, and
M. Rosenblum. Understanding data lifetime via whole sys-
tem simulation.
In Proceedings of the USENIX Security
Symposium, 2004.
[6] J.-S. Coron and D. Naccache. Boneh et al.’s k-element ag-
gregate extraction assumption is equivalent to the Difﬁe-
Hellman assumption. In Proceedings of Asiacrypt, 2003.
[7] P. Gutmann. Secure deletion of data from magnetic and
In Proceedings of the USENIX Secu-
solid-state memory.
rity Symposium, 1996.
[8] J. D. Hartline, E. S. Hong, A. E. Mohr, W. R. Pentney, and
E. Rocke. Characterizing history independent data struc-
tures. Algorithmica, 42(1):57–74, 2005.
[9] G. Itkis and L. Reyzin. Forward-secure signatures with opti-
mal signing and verifying. In Proceedings of Crypto, 2001.
[10] A. M. Keller, D. Mertz, J. L. Hall, and A. Urken. Pri-
vacy issues in an electronic voting machine. In Proceedings
of the ACM Workshop on Privacy in the Electronic Society
(WPES), 2004.
[11] E. Kiltz, A. Mityagin, S. Panjwani, and B. Raghavan.
Append-only signatures. In Proceedings of ICALP, 2005.
[12] T. Kohno, A. Stubbleﬁeld, A. Rubin, and D. Wallach. Anal-
ysis of an electronic voting system. In Proceedings of IEEE
Symposium on Security and Privacy, pages 27–40, 2004.
[13] B. Lynn. The pairing-based cryptography (PBC) library.
http://crypto.stanford.edu/pbc.
[14] D. Micciancio. Oblivious data structures: Applications to
In Proceedings of the ACM Symposium on
cryptography.
Theory of Computing (STOC), 1997.
[15] D. Molnar, T. Kohno, N. Sastry, and D. Wagner. Tamper-
evident, history-independent, subliminal-free data structures
on PROM storage -or- how to store ballots on a voting ma-
chine. In Proceedings of the IEEE Symposium on Security
and Privacy, 2006.
[16] M. Naor and V. Teague. Anti-presistence: history indepen-
dent data structures. In Proceedings of the ACM Symposium
on Theory of Computing (STOC), 2001.
[17] N. Sastry, T. Kohno, and D. Wagner. Designing voting ma-
chines for veriﬁcation. In Proceedings of the USENIX Secu-
rity Symposium, 2006.
[18] K.-P. Yee, D. Wagner, M. Hearst, and S. M. Bellovin. Pre-
rendered user interfaces for higher-assurance electronic vot-
ing. In Proceedings of the USENIX/ACCURATE Electronic
Voting Technology Workshop (EVT), 2006.
A Security and Correctness Proofs
Here we provide security and correctness proofs for the
HHAOS scheme presented in Section 4.2.
A.1 Correctness
Deﬁnition of B. We receive a CDH instance g, A = ga,
B = gb and use it in Game 1 with A. In order to answer
random oracle queries, we maintain sets S and Γ and a map
f : {0, 1}∗ → Zp, all initially empty. The set S will contain
all messages for which the random oracle has been called,
and we will assign some of these to the set Γ. For conve-
nience, we also deﬁne the function H : {0, 1}∗ → G as
With a little algebra it is easy to verify that this scheme
is correct according to Deﬁnition 1.
Theorem 2. HHAOSE is correct.
Proof. Let X = {x1, . . . xn} ⊆ {0, 1}∗ and assume PK =
(g, e(g, g)α) and Φn = (S1, S2) are generated as in Deﬁni-
tion 1. Let r1, r2, . . . rn ∈ Zp be the random values chosen
in the successive invocations of Append. Let si denote the
discrete log (base g) of H(xi) for each i ∈ {1, . . . n}. Then
within Verify we compute
e(H(x), y)(cid:17)−1
n
v = e(g, S1) ·(cid:16) Y(x,y)∈S2
= e(cid:16)g, gα
= e(cid:16)g, gα
H(xi)ri(cid:17) ·(cid:16)
grisi(cid:17) ·(cid:16)
Yi=1
n
Yi=1
Yi=1
n
e(H(xi), gri )(cid:17)−1
Yi=1
e(gsi , gri )(cid:17)−1
n
= e(g, g)α+r1s1+r2s2+···rnsn · e(g, g)−r1s1−r2s2−···rnsn
= e(g, g)α .
Since we also have that X = { x | ∃y (x, y) ∈ S2 }, Verify
will return True and the scheme is correct.
A.2 Append Only Unforgeability
We now prove HHAOSE append only unforgeable in the
random oracle model based on the computational Difﬁe-
Hellman assumption.
Theorem 3. If the computational Difﬁe-Hellman assump-
tion holds in G, then HHAOSE is append only unforgeable
in the random oracle model.
Proof. Suppose the (t′, ǫ′)-CDH assumption holds in G;
that is, any probabilistic algorithm running in time at most
t′ solves CDH with probability at most ǫ′. Then we will
show that HHAOSE is (t, ǫ)-append only unforgeable with
t′ = O(t · poly(κ)) and ǫ′ ≥ ǫ/(e(q + 1)), where q ≤ t.
Assume a t time algorithm A wins Game 1 with prob-
ability at least ǫ while making at most q random oracle
queries. We construct an algorithm B which solves CDH
in time O(t · poly(κ)) with probability at least ǫ/(e(q + 1)).
H(s) =(gf (s)
B · gf (s)
if s ∈ Γ
if s /∈ Γ
We carry out Game 1 with A as follows.
Setup Deﬁne α = ab and give PK = (g, e(A, B)) =
(g, e(g, g)α) to A.
Whenever A makes a random oracle query for s ∈
{0, 1}∗ (in this phase or later), we answer as follows.
First, check if f (s) is deﬁned (that is if s ∈ S). If so,
return H(s). If f (s) is not deﬁned, save a uniformly
random value from Zp as f (s). Then we add s to S and
add it to Γ with probability q
q+1 . Then return H(s).
Corrupt We receive X = {x1, . . . xn} from A. Without
loss of generality we can assume that X ⊆ S, since
if that is not the case we can just call the oracle for all
xi /∈ S. If X ⊆ Γ, we abort the simulation. Otherwise,
we may successfully produce a signature Φn for X.
Let xk be an element of X that is not in Γ. We com-
pute a signature Φn to return to A as follows. Select
R←− Zp. Deﬁne rk = −a.
r1, . . . rk−1, rk+1, . . . rn
Compute
Φn = ({(x1, gr1 ), . . . (xk, A−1), . . . (xn, grn )},
H(x1)r1 · · · A−f (xk) · · · H(xn)rn )
= ({(x1, gr1 ), . . . (xk, grk ), . . . (xn, grn )},
gαH(x1)r1 · · · H(xk)rk · · · H(xn)rn )
and return Φn to A. By the deﬁnition of rk and H(xk),
this is a well formed response.
Note that all our responses to A are properly dis-
tributed. The only values which have not been selected
as in the regular scheme are α = ab and rk = −a,
which are independent and distributed identically to
values selected as in the regular scheme. Also, the
values given in response to random oracle queries are
independent and distributed uniformly at random over
G.
Forge We receive a set Y = {y1, . . . ym} and a signa-
ture ΦY = (S1, S2) from A. If Verify(PK, Y, ΦY ) =
False or X ⊆ Y , A has failed at Game 1 and we abort.
Also, if Y 6⊆ Γ, we abort.
Otherwise, we may use the forgery produced by A
to solve our CDH instance. Denote the contents of
S2 in ΦY as S2 = {(y1, z1), (y2, z2), . . . (ym, zm)}.
Note
because
Verify(PK, Y, ΦY ) = True. Compute
{ y | ∃z (y, z) ∈ S2 } = Y
that
C = S1 · z−f (y1)
1
· z−f (y2)
2
· · · z−f (ym)
m
and return C as the answer to the CDH instance.
We now demonstrate that C = gab.
Since
Verify(PK, Y, ΦY ) = True, A must have queried for
all y ∈ Y at some point,5 so f (y) is deﬁned for all
y ∈ Y . Additionally, we have that
Thus, Pr [ E2|E1 ] ≥ 1/(e(q + 1)), Pr [ E1 ] ≥ ǫ, and
Pr [ E1 ∧ E2 ] ≥ ǫ/(e(q + 1)). So B does not abort and suc-
cessfully solves the CDH instance with probability at least
ǫ/(e(q + 1)). Furthermore, B takes time O(t · poly(κ)).
So if the (t′, ǫ′)-CDH assumption holds in G,
then
HHAOSE is (t, ǫ)-append only unforgeable, where t′ =
O(t · poly(κ)), ǫ′ ≥ ǫ/(e(q + 1)), and q ≤ t. In particular, if
every PPT algorithm solves CDH in G with probability neg-
ligible in κ, then HHAOSE is append only unforgeable.
A.3 History-Hiding
It is straightforward to establish that the HHAOS scheme
e(g, g)α = e(g, S1)·(e(H(y1), z1) · · · e(H(ym), zm))−1
is also history-hiding.
Theorem 4. HHAOSE is history-hiding.
Proof. Speciﬁcally, we show that any adversary has advan-
tage exactly zero in Game 2. Run KeyGen(1κ) to compute
PK and Φ0 = (gα, {}). Return PK to an adversary A. Af-
ter receiving a set X = {x1, . . . xn} and two permutations
λ0, λ1 from A, select
r1, r2, . . . rn
r′
1, r′
2, . . . r′
n
R←− Zp
R←− Zp
and compute
Φ′
Φn =(cid:0) gαH(λ0(x1))r1 · · · H(λ0(xn))rn ,
{(λ0(x1), gr1), . . . (λ0(xn), grn)}(cid:1)
n =(cid:0) gαH(λ1(x1))r′
n)}(cid:1)
1 · · · H(λ1(xn))r′
n ,
1), . . . (λ1(xn), gr′
{(λ1(x1), gr′
n. However, since r1, r′
According to Game 2, if our coin b is 0 we must return Φn,
otherwise we return Φ′
2, . . .
are selected independently and multiplication in G is com-
mutative, Φn and Φ′
n are identically distributed random
variables. So A’s guess b′ is independent of which of the
two we return and thus independent of our coin ﬂip b. We
then have that |Pr [ b′ = b ] − 1
2 | = 0 and have shown that
the scheme is history-hiding.
1, r2, r′
Additionally, it is evident from the proof that HHAOSE
(like HHAOSS) is not only history-hiding, but history-
independent in the information theoretic sense.
so
e(g, g)ab = e(g, S1)·e(gf (y1), z1)−1 · · · e(gf (ym), zm)−1
and
e(g, gab) = e(g, S1 · z−f (y1)
1
⇒ gab = S1 · z−f (y1)
m
· · · z−f (ym)
m
1
· · · z−f (ym)
)
.
Thus C = gab.
Analysis of B. We now analyze the probability that B
aborts before it can successfully solve its CDH instance. Let
E1 be the event of A succeeding at Game 1, and let E2 be
the event of X 6⊆ Γ and Y ⊆ Γ. The probability that B does
not abort is then Pr [ E1 ∧ E2 ].
Since B produces well formed responses distributed
identically to those of HHAOSE in its interactions with A,
we have that Pr [ E1 ] ≥ ǫ. Now we compute Pr [ E2|E1 ].
Assume E1. Let θ = q
q+1 . Then
Pr [ E2 ] = Pr [ (X 6⊆ Γ) ∧ (Y ⊆ Γ) ]
= Pr [ (X \ Y 6⊆ Γ) ∧ (Y ⊆ Γ) ]
= Pr [ X \ Y 6⊆ Γ ] Pr [ Y ⊆ Γ ]
= (1 − θ|X\Y |)θ|Y |.
Since A succeeds, X 6⊆ Y and therefore |X \Y | ≥ 1. Also,
|Y | ≤ q. So
Pr [ E2 ] ≥ (1 − θ)θ|Y |
≥ (1 − θ)θq
=
≥
1
q + 1
1
q + 1
q + 1(cid:19)q
·(cid:18) q
·
1
e
.
5We neglect the possibility of A guessing the output of the random
oracle, which may be made arbitrarily unlikely by increasing the output
length of the random oracle.
struct {
P ;
// public key: element of GT
M ;
// number of ballots stored:
// element of {0, . . . n − 1}
V1;
// final value of S1:
element of G
V2;
// finalization value: element of G
S2[n]; // ballots: array of n blocks,
// each of which stores a pair (x, y)
// where x ∈ {0, 1}ℓ+⌈log2 n⌉ and y ∈ G
}
Figure 2. Values stored on the removable
ﬂash memory within the voting machine.
ﬁrst M entries in the array S2 and compute the following.
z1 ← Y(x,y)∈S2
e(H(x), y)
z2 ← e(H(“ ﬁnalize ”||M ), V2)
If P = e(g, V1) · z−1
2 , report that the history-hiding
append only signature on the recorded ballots has veriﬁed
and proceed to total the ballots; otherwise, report an error.
· z−1
1
B Implementation Details
Here we provide concrete details on efﬁciently and se-
curely implementing the cryptographic vote storage module
(CVSM) described in Section 5.2. We ﬁrst detail the values
stored by the CVSM, then the procedures for updating them.
The CVSM achieves multiset semantics by appending
to a string the number of copies already present before
inserting it into the set of stored strings, as described in
Section 2.1. Speciﬁcally, the CVSM uses a hash table
C : {0, 1}∗ → N which keeps track of the number of copies
of each string we have encountered. This may be stored in
the main (volatile) memory of the CVSM process; its us-
age is further explained below. Referring to the HHAOS
scheme described in Section 4, the history-hiding append
only signature Φ = (S1, S2) is stored in two parts. Dur-
ing the polling process, we store the value S1 ∈ G on the
internal ﬂash memory within the machine. The contents of
S2 are stored on the removable ﬂash memory along with
several other values. To refer to these locations on the re-
movable memory, we denote the content of the removable
memory with the structure given in C-like pseudocode in
Figure 2. Here n is an upper bound on the number of bal-
lots we will need to store and ℓ is the length of each ballot.
These values on the removable storage along with the value
S1 on the internal storage are manipulated by the following
procedures.
Open Select α R←− Zp and compute PK = e(g, g)α. Print
a ﬁngerprint of the public key PK. Save S1 ← gα,
M ← 0, and P ← PK.
InsertBallot Upon receiving a ballot string b ∈ {0, 1}ℓ,
lookup b in the hash table C, incrementing the value
C(b) if it is found. If b is not found, insert 1 at C(b). If
b collides with another string b′ 6= b in C, use chaining
and sort the strings at that location. Sorting collisions
is necessary to maintain history independence. Next,
randomly select r R←− Zp, i R←− {0, . . . M }, and save
S1 ← S1 · H(b||C(b))r. Then copy S2[M ] ← S2[i],
store S2[i] ← ( b||C(b), gr ), and save M ← M +
1. Note that this method of selecting a location for
the new pair in S2 ensures that every ordering of the
current values in S2 is equally likely.
Close Randomly select r R←− Zp and write V1 ← S1 ·
H(“ ﬁnalize ”||M )r and V2 ← gr on the removable
storage. Save S1 ← 0 on the internal storage.
To verify the ballots stored on a removable memory us-
ing a public key ﬁngerprint, carry out the following opera-
tions. First check that the ﬁngerprint provided matches the
public key P stored on the memory. Next, scan through the