however, that changing the library alone cannot ensure
that the application atop the library itself handles sensi-
tive data securely. For example, the Apache web server
reuses worker processes across requests submitted by
different users. If an attacker exploits a worker process,
he may be able to obtain sensitive data belonging to the
next user whose request is handled by that process.
We ﬁnely partition both the client and server
sides of OpenSSL. Our implementation supports RSA,
ephemeral RSA, Difﬁe-Hellman, and ephemeral Difﬁe-
untrustedprocessVanilla ServerOur Serverprivate keymonitorprivate key datasession key dataunprivilegedcodesession keymonitorprivate keymonitor(important to server operators).
Figure 9 compares operation latencies for a range
of applications. Each application is either client-side or
server-side; in each case, the complementary remote peer
runs the baseline cryptographic protocol implementa-
tion. All connections are made over the loopback inter-
face to a locally running server. For OpenSSH, we report
the latency of logging into an SSH server using public
key authentication and running the exit command. The
remaining applications use the OpenSSL library. For the
mailx email client and dovecot IMAP server, we measure
the time required for the client to connect over SSL/TLS,
check for new mail, and exit. For the sendmail client, we
measure the time required to connect and send a one-line
email to a sendmail server over SSL/TLS. For these ap-
plications, the latency a user perceives does not increase
signiﬁcantly between the baseline and hardened crypto-
graphic protocol implementations.
In Figure 10, we consider the throughput achieved by
an SSL/TLS-enabled sendmail server and HTTPS server,
both based on the OpenSSL library. For the sendmail
server, we submit emails over SSL/TLS from multiple
clients and report the maximum load the server can sus-
tain in requests (emails) per second. Introducing oracle
and SKD defenses into the OpenSSL library negligbly
affects the sendmail server’s throughput.
To determine the maximum load the Apache (httpd)
web server can sustain, we increase the number of clients
requesting a small static page over HTTPS until the num-
ber of requests served per second reaches a maximum.
Clients make new SSL/TLS connections for each re-
quest. As noted in Section 6, apart from adding defenses
against SKD and oracle attacks, we further modiﬁed the
baseline Apache implementation to isolate users who
successively connect to the same worker from one an-
other. To distinguish the cost of inter-user isolation from
that of defending against SKD and oracle attacks, we
measure the throughput of several Apache implemen-
tations: baseline Apache, in which workers are reused
across requests, so users are not mutually isolated; a
hardened Apache with inter-user isolation implemented
with one fork per request, without oracle or SKD attack
defenses; and a hardened Apache with inter-user isola-
tion implemented with three forks per request, with
oracle and SKD attack defenses. To explore the role
of isolation primitives in performance, we also imple-
mented versions of hardened Apache that use optimized
checkpoint-restore primitives [1] rather than fork. We
further consider Apache’s performance in two extremes
of operation: when no SSL sessions are cached and when
all sessions are cached. We conﬁgure HTTPS clients to
use RSA key exchange when establishing an SSL/TLS
session because this protocol is less computationally in-
tensive for the server than ephemeral Difﬁe-Hellman key
Figure 9: Latency of operations in OpenSSH 5.2p1 client/server, mailx
12.4, dovecot 1.2.10, and sendmail client 8.14.4 using baseline and
hardened OpenSSL 0.8.9k library. Run on Dell desktop with 1.86 GHz
Intel Core 2 6300 CPU and 1 GB RAM running Linux 2.6.30.
Figure 10: Throughput of sendmail server 8.14.4 and indicated com-
bination of Apache web server (httpd) 2.2.14 with OpenSSL 0.8.9k li-
brary. Run on Sun X4100 server with 2.2 GHz AMD Opteron 248 CPU
and 2 GB RAM under Linux 2.6.32.
proposed by Bittau [1]. In this approach, Apache takes
a snapshot of each new worker process’s pristine mem-
ory image before it serves any requests, and after each
request, a trusted monitor process restores the worker’s
memory image to this pristine state.
With or without
this unrelated application-level
change, Apache 1.3.19 and 2.2.14 run with the hardened
OpenSSL library as a drop-in replacement for the stock
OpenSSL library.
7 Evaluation
We now consider the cost of defending against SKD
and oracle attacks in cryptographic protocol implemen-
tations. As the principles given in Section 4 demand ad-
ditional isolation between code and data, and thus addi-
tional processes, performance is a concern: both process
creation and context switches incur overhead. To explore
the extent of these overheads, we compare the perfor-
mance of the baseline OpenSSH and OpenSSL-enabled
applications with that of the implementations hardened
in accordance with the principles we have propounded.
We consider in turn the end-to-end metrics of operation
latency (important to users) and server-side throughput
 0 0.04 0.08 0.12 0.16sshdsshmailxdovecotsendmailclientTime, secno SKD or oracle defenseswith SKD and oracle defenses 0 200 400 600 800 1000 1200 1400 1600sendmailserverbaseline httpdno cachingbaseline httpdwith cachinghttpdfork user isolationno cachinghttpdfork user isolationwith cachinghttpdcheckpoint-restoreuser isolationno cachinghttpdcheckpoint-restoreuser isolationwith cachingThroughput, requests/secno SKD or oracle defenseswith SKD and oracle defensesexchange, and thus better exposes the overhead of hard-
ening.
Returning to Figure 10, let us ﬁrst consider the work-
load in which no SSL/TLS sessions are cached, running
on the hardened versions of Apache implemented using
checkpoint-restore. End-to-end, the version of Apache
providing both inter-user isolation and defenses from or-
acle and SKD attacks achieves more than half (55%) the
throughput of baseline Apache, which provides none of
these security beneﬁts. The overhead of these security
mechanisms is masked in part by the computational costs
of the cryptographic operations required to establish a
new SSL/TLS session. We note that this “fully” hardened
version of Apache achieves over 70% the throughput of
one that provides inter-user isolation with checkpoint-
restore but omits oracle and SKD attack defenses—so
for this workload using these isolation primitives, oracle
and SKD attack defenses incur only moderate overhead.
In the workload in which no SSL/TLS sessions are
cached, there are no public-key cryptographic opera-
tions, so the overheads of inter-user isolation and oracle
and SKD attack defenses are more exposed. Focusing on
the implementations built on checkpoint-restore, Apache
with inter-user isolation (but without oracle/SKD de-
fenses) achieves 60% of the throughput of baseline
Apache; this reduction is the cost of inter-user isola-
tion. Adding oracle and SKD defenses to the inter-user-
isolated implementation further reduces throughput by
60%; that is the incremental cost of oracle and SKD de-
fenses on this challenging workload. End-to-end, this last
version of Apache, which incorporates all defenses and
inter-user isolation, achieves only about one quarter of
the throughput of baseline Apache (which lacks any of
these security enhancements). We stress that while this
throughput reduction is signiﬁcant, it represents atypi-
cally worst-case behavior: all sessions cached (never the
case) and static content. On servers that distribute dy-
namically generated content, the overhead of protecting
users’ sensitive data will be amortized over far more ap-
plication computation.
The original applications based on the OpenSSL li-
brary used single-process, monolithic designs. Harden-
ing against SKD and oracle attacks requires three pro-
cesses per SSL/TLS session: a private key monitor, a
session monitor, and an unprivileged compartment for
the SKN stage. Similarly, the hardened OpenSSH server
and client use four processes per SSH session vs. the two
employed by the baseline privilege-separated OpenSSH
server. Apart from the process creation and page fault
costs associated with fork and the memory copy costs
associated with checkpoint-restore, anti-SKD and anti-
oracle hardening incur overhead for additional context
switches and the marshaling and unmarshaling of ar-
guments and return values between compartments con-
nected by pipes.
Again for
the uncached workload, consider
the
throughput achieved by the full checkpoint-restore ver-
sion of Apache (all defenses) vs. that achieved by one
with the same full set of defenses, but implemented
naively with fork. Checkpoint-restore offers a 20%
throughput improvement over fork. While the end-to-
end cost of inter-user isolation and oracle and SKD de-
fenses is signiﬁcant, the design of the underlying prim-
itives used to implement compartments, though beyond
the scope of this paper, appears to play a signiﬁcant role
in determining end-to-end performance.
8 Related Work
Provos et al. describe privilege separation, which de-
nies enhanced system privileges to unauthorized attack-
ers who exploit an application [9]. They reduce privilege
in the OpenSSH server by partitioning it into an untrusted
process and a privileged monitor. Our work tackles the
different goal of preventing disclosure of users’ sensitive
data in cryptographic protocol implementations. This
goal incorporates preventing privilege escalation. We ex-
tend the partitioning of the privilege-separated OpenSSH
server to comply with this goal.
OKWS is a toolkit for building secure Web ser-
vices [5]. It employs similar privilege enforcement mech-
anisms as privilege-separated OpenSSH—processes, the
nobody user ID, and the chroot system call—to iso-
late distrusted Web services from the system they are
running on and each other. Our complementary goal has
been to protect sensitive data by hardening cryptographic
protocol implementations against exploit.
HiStar [14] enforces privileges on compartments with
labels and DIFC. DStar [15] extends this approach to a
distributed environment without fully trusted machines.
Zeldovich et al. partition an SSL server to mitigate the
effect of a compromise of any single compartment and
prevent disclosure of user data. However, as we have de-
scribed, it is possible to disclose users’ sensitive data
from the SSL server using SKD and oracle attacks.
The insufﬁcient partitioning of the SSL protocol allows
these attacks. Our work is complementary to work on
DIFC systems: they are privilege-enforcement mecha-
nisms, while we provide guidance on how to structure
code for cryptographic protocols.
We ﬁrst discovered an instance of the attack we have
generalized in this paper as the SKD attack during prior
work with colleagues on Wedge [2], a set of primitives
and tools for ﬁne-grained partitioning of applications on
Linux. While we presented an ad hoc defense for one
narrow instance of the attack in that work, we offered no
general characterization of it nor solution to it. By con-
trast, in this paper, we offer design principles that defeat
the SKD and oracle attacks and that we believe are gen-
eral enough to apply to many cryptographic protocols.
The partitioning principles and attack mitigation tech-
niques we have offered might also ﬁnd fruitful use
in capability-based systems such as KeyKOS [3] and
EROS [11]. While capabilities provide convenient means
to restrict privileges, programmers need guidance in how
to apply them to protect sensitive data.
9 Conclusion and Future Work
We have described two practical exploit-based attacks
on cryptographic protocol implementations, the session
key disclosure (SKD) attack and oracle attack, that can
disclose users’ sensitive data, even in state-of-the-art,
reduced-privilege applications such as the OpenSSH
server and HiStar-labeled SSL web server. Privilege sep-
aration and DIFC will not secure the user’s sensitive
data against these attacks unless an application has been
speciﬁcally structured to thwart them.
The principles we have offered guide programmers in
partitioning cryptographic protocol implementations to
defend against SKD and oracle attacks. In essence, fol-
lowing these principles reduces the trusted code base of
an application by correctly treating session key mate-
rial and oracle-prone functions as sensitive, and limiting
privilege accordingly.
To demonstrate that these principles are practical, we
newly partitioned an OpenSSH client and extended the
partitioning of a privilege-separated OpenSSH server.
Further experience with the OpenSSL library suggests
they may generalize to other cryptographic protocols;
they are broadly targeted at protocols that negotiate ses-
sion keys and perform common cryptographic opera-
tions. While we hope these principles will serve as a
useful guide where there was none, we note that their
application requires careful programmer effort. Still, our
experience with OpenSSL shows that hardening a library
once brings robustness against these attacks to the several
applications that reuse that library.
The latency cost of defending against SKD and ora-
cle attacks is well within user tolerances for all applica-
tions we measured. Defending against SKD and oracle
attacks does exact a cost in throughput on a busy SSL-
enabled Apache server, however, reducing the uncached
SSL/TLS session handshake rate of a server that isolates
users by just under 30%, and the cached rate by 60%.
While that cost is signiﬁcant, as our comparison of fork
and checkpoint-restore demonstrates, it depends heavily
on the performance of underlying isolation primitives—a
topic we believe merits further investigation.
Finally, while we have relied upon manual study of the
SSH and SSL/TLS protocols and their implementations
to discover the attacks we have presented, we intend to
explore tools that use static and dynamic analysis to ease
discovery of such vulnerabilities in cryptographic proto-
col implementations.
Acknowledgements
This research was supported in part by a Royal Society-
Wolfson Research Merit Award and by gifts from Intel
Corporation and Research in Motion Limited. We thank
Andrea Bittau, our shepherd Mohammad Mannan, and
the anonymous reviewers for comments that improved
the paper. We further thank Andrea Bittau for sharing
code for his checkpoint-restore server performance opti-
mizations.
References
[1] A. Bittau.
Toward Least-Privilege Isolation for Soft-
PhD thesis, University College London, UK, 2009.
ware.
http://eprints.ucl.ac.uk/18902/1/18902.pdf.
[2] A. Bittau, P. Marchenko, M. Handley, and B. Karp. Wedge: split-
ting applications into reduced-privilege compartments. In NSDI,
2008.
[3] A. C. Bomberger, W. S. Frantz, A. C. Hardy, N. Hardy, C. R. Lan-
dau, and J. S. Shapiro. The KeyKOS nanokernel architecture. In
Proceedings of the Workshop on Micro-kernels and Other Kernel
Architectures, 1992.
[4] T. Dierks and C. Allen. The TLS protocol version 1.0. RFC 2246,
January 1999.
[5] M. Krohn. Building secure high-performance web services with
okws. In USENIX, 2004.
[6] M. Krohn, A. Yip, M. Brodsky, N. Cliffer, M. F. Kaashoek,
E. Kohler, and R. Morris. Information ﬂow control for standard
OS abstractions. In SOSP, 2007.
[7] P. Loscocco and S. Smalley. Integrating ﬂexible support for secu-
rity policies into the linux operating system. In USENIX (Freenix
Track), 2001.
[8] N. Provos. Improving host security with system call policies. In
USENIX Security Symposium, pages 18–18, 2003.
[9] N. Provos, M. Friedl, and P. Honeyman. Preventing privilege
escalation. In USENIX Security, 2003.
[10] J. Saltzer and M. Schroeder. The protection of information in
computer systems. Proceedings of the IEEE, 63(9):1278–1308,
1975.
[11] J. S. Shapiro, J. M. Smith, and D. J. Farber. Eros: a fast capability
system. In SOSP, 1999.
[12] S. Vandebogart, P. Efstathopoulos, E. Kohler, M. Krohn, C. Frey,
D. Ziegler, F. Kaashoek, R. Morris, and D. Mazi`eres. Labels and
event processes in the asbestos operating system. ACM TOCS,
25(4):11, 2007.
[13] T. Ylonen and C. Lonvick. The secure shell (SSH) protocol ar-
chitecture. RFC 4251, January 2006.
[14] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazi`eres.
Making information ﬂow explicit in HiStar. In OSDI, 2006.
[15] N. Zeldovich, S. Boyd-Wickizer, and D. Mazi`eres. Securing dis-
tributed systems with information ﬂow control. In NSDI, 2008.
Notes
1While we did not implement these two attacks, we present analysis
of the protocols and implementations demonstrating they are possible.
2While space limits us to illustrating these attacks and defense prin-
ciples in the context of SSH and SSL/TLS, we have found they apply
equally to IPSec, CRAM-MD5, and other secure protocols.
3Alternatives to SELinux include limiting a process’s privileges
with Systrace [8], ptrace, and chroot (though the latter requires
making a client application setuid root).