Diﬃe-Hellman-Based Puzzles. Waters et al. [21] proposed a
puzzle based on the Diﬃe-Hellman (DH) problem. Given a
generator β of a group of prime order q and a random integer
a in [r, r + Q], a puzzle consists of the values (βf (a), r, Q),
where f is a one-way permutation on Zq and Q is a diﬃ-
culty parameter. The client solves the puzzle by checking
each candidate value ˜a ∈ [r, r + Q] to see if βf (˜a) = βf (a).
By giving a hint interval [r, r + Q] to the client, the puzzle
diﬃculty achieves linear granularity.
To contact a particular server, the client needs to do extra
work by combining the puzzle solution with the server’s DH
public key; that is, the client actually calculates (βx)f (a) as
yf (a), where y is the public key of the server. The server
needs one modular exponentiation to verify the solution, by
raising the puzzle to its private key x: (βf (a))x. Since the
defending server can independently compute the solution for
a time period, all the solutions for the particular time period
are precomputed and stored by the server so that veriﬁcation
needs a single table lookup.
While veriﬁcation via table lookup is considered to be
cheap, constructing a puzzle still requires one modular ex-
ponentiation which is expensive and thus is undesirable for a
defending server. To avoid this circumstance, Waters et al.
suggested outsourcing the puzzle creation to a secure third
party, called a bastion, thereby removing the computational
burden of puzzle generation from the server. However, the
assumption on existence of such a third party seems to be
unsatisfactory.
3. DLPuz: AN EFFICIENT NUMBER-
THEORETIC PUZZLE
This section describes our new client puzzle construction
DLPuz, which is based on the problem of ﬁnding a discrete
logarithm in an interval. First we review the deﬁnition of a
client puzzle and then present our construction.
Notation. If n is an integer, then we use |n| to denote the
puzzle:
Definition 1. Client Puzzle A client puzzle Puz is a tu-
ple consisting of the following algorithms:
• Setup(1k): A p.p.t. setup algorithm that generates and
returns a set of public parameters params and a secret
key s, the former of which includes a puzzle diﬃculty
parameter space QSpace.
• GenPuz(s, Q, str): A p.p.t. puzzle generation algorithm
which accepts a secret key s, diﬃculty parameter Q,
and a session string str and returns a puzzle puz.
• FindSoln(puz, t): A probabilistic puzzle solving algo-
rithm that returns a potential solution soln for puzzle
puz after running time at most t.
• VerAuth(s, puz): A d.p.t. puzzle authenticity veriﬁca-
tion algorithm that returns true or false
• VerSoln(s, str, puz, soln): A d.p.t. puzzle solution ver-
iﬁcation algorithm that returns true or false.
For correctness, we require that if (params, s) ← Setup(1k)
and puz ← GenPuz(s, Q, str) then there exists t ∈ N such
that VerSoln(s, str, puz, soln) is true with probability
1 where soln ← FindSoln(puz, t).
3.2 The DLPuz Puzzle
The idea behind our proposed puzzle scheme is the fol-
lowing: given a RSA modulus n, g, V = gv mod n and an
interval I, where v ∈ I, the task of a client is to ﬁnd v.
Waters et al. [21] outsourced the computation of gv mod
n to a trusted third party, thereby removing the computa-
tional burden associated with the puzzle generation. In this
work, we show how to shift this burden to clients while main-
taining the secrecy of the solution. Hence, we do not assume
the existence of such a trusted third party, thereby making
our proposal more practical.
Our puzzle construction makes use of several other cryp-
tographic primitives. It relies on a modulus generation algo-
rithm GenRSA that generates an RSA-style modulus n = pq.
We note that RSA modulus generation only needs to be done
once in the Setup phase, not in each puzzle generation. Our
puzzle also employs a technique due to Boyko et al. [5] for
quickly generating many ephemeral values gx using a rela-
tively small amount of precomputation.
Definition 2. (Modulus Generation Algorithm) Let k be
a security parameter. A modulus generation algorithm is
a probabilistic polynomial-time algorithm GenRSA that, on
input 1k, outputs (n, p, q) such that n = pq and p and q are
k-bit primes.
In our puzzle generation algorithm, the server has to gen-
erate a pair (a, ga) for each puzzle. Since the generation of
these pairs are expensive, the server uses the following gen-
erator proposed by Boyko et al.
[5] to eﬃciently generate
such pairs for each puzzle.
Definition 3. (BPV Generator) Let k, (cid:96), and N , with
N ≥ (cid:96) ≥ 1, be parameters. Let n ← GenRSA(1k) be an
RSA modulus. Let g be a random element of order M in the
multiplicative group Z∗
n. A BPV generator consists of the
following two algorithms:
• BPVPre(g, n, N, M ): A pre-processing algorithm that
is run once. Generate N random integers x1, x2, . . . ,
xN ←R ZM . Compute Xi ← gxi mod n for each i.
Return a table τ ← ((xi, Xi))N
i=1.
• BPVGen(g, n, (cid:96), M, τ ): A pair generation algorithm
(cid:80)
S again. Otherwise, compute U ← (cid:81)
that is run whenever a pair (a, ga) is needed. Choose a
random set S ⊆R {1, . . . , N} of size (cid:96). Compute u ←
j∈S xj mod M . If u = 0, then stop and generate
j∈S gxj mod n
and return (u, U ). In particular, the indices S and the
corresponding pairs ((xj, Xj))j∈S are not revealed.
Randomness of BPV generator.
Boyko et al. [5] proposed the discrete-log-based BPV gen-
erator to speed up protocols based on discrete logarithm
such as Elgamal, DSS, Schnorr signatures, Diﬃe-Hellman
key exchange, and Elgamal encryption.
In Boyko’s thesis
[4], it is proved (Claim 4) that the outputs of the BPV gen-
erator are statistically indistinguishable from uniform values
(cid:1). Nguyen et al. [13] proposed the ex-
for large values of(cid:0)N
tended BPV generator (EBPV) and argued that for the BPV
generator is the special case of EBPV generator and hence
the security results for EBPV also holds for BPV. They es-
tablished the security of some discrete logarithm based sig-
nature schemes that use EBPV under adaptive chosen mes-
sage attack. They also obtained results for the statistical
distance between the distribution of EBPV and the uniform
distribution.
Nguyen and Stern [14] analysed the distribution of the
output of the BPV generator and showed in Theorem 1 that
for a ﬁxed M, with overwhelming probability on the choice
of xi’s, the distribution of the BPV generator is statisti-
cally close to the uniform distribution [14]. In particular, a
polynomial time adversary cannot distinguish the two dis-
tributions
(cid:96)
(cid:80)
j∈S xj mod M is computed from a random set
Theorem 1. For all M > 0, if x1, . . . xN are chosen
independently and uniformly from [0, M − 1] and if a =
S ⊆ {1, . . . N} of (cid:96) elements, then the statistical distance
between the computed a and a randomly chosen a(cid:48) ∈ ZM is
bounded by
(cid:1). That is,
(cid:33)
− 1
M
(cid:118)(cid:117)(cid:117)(cid:116)M/
(cid:32)
(cid:33)
N
(cid:96)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) ≤
(cid:113)
M/(cid:0)N
(cid:32)(cid:88)
(cid:96)
j∈S
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)Pr
xj = a mod M
The above theorem is valid even if one considers polyno-
mially many samples, not just one. The bound for BPV
is shown in Theorem 1. Moreover, if the statistical diﬀer-
ence of some distributions D1 and D2 deﬁned over a set S
is less than , then the statistical diﬀerence of Du
1 and Du
deﬁned over the set S u is less than u, where Du
2
1 is deﬁned
by choosing m elements independently random from S.
3.3 Deﬁnition of DLPuz
We now give the deﬁnition of our puzzle DLPuz in Fig-
ure 1, which we have organised diagrammatically to suggest
an interaction between a server issuing puzzles and a client
solving them. DLPuz is parameterised by a security param-
eter k, a diﬃculty parameter Q. In practice, a server using
client puzzles as a denial-of-service countermeasure can vary
Q based on the severity of the attack it is experiencing.
Puzzle solving. One typical method for a legitimate client
to implement the FindSoln algorithm is a brute-force search.
Upon receiving a puzzle puz from the server with an inter-
val [i, i + Q], the client computes V and gi mod n. It then
iterates by multiplying the current value with g mod n and
comparing that value with V .
If the length of the inter-
val I is Q, then this will take approximately Q/2 multipli-
cations on average, plus the cost of the initial exponentia-
tions. We note however that a client could also choose to
solve this problem using one of the faster interval-kangaroo
techniques described by Galbraith et al.
[8] which require
Q) steps plus the cost of the initial ex-
approximately O(
ponentiations.
√
Server eﬃciency. In many scenarios, it is essential that the
GenPuz, VerAuth, and VerSoln algorithms be extremely eﬃ-
cient. In a denial-of-service setting, these algorithms are run
online by the server many times, and if they were expensive
then an attacker could induce a resource depletion attack by
asking for many puzzles to be generated or veriﬁed.
GenPuz: The dominant cost in puzzle generation is the
BPV pair generation BPVGen, which requires (cid:96)− 1 modular
additions and (cid:96) − 1 modular multiplications. There is also
a single call to the HMAC Hρ (a keyed collision-reisistant
pseudo-random function where ρ is used as a key), a large
integer multiplication b · z, and three integer additions.
VerAuth: Puzzle authenticity veriﬁcation is quite cheap,
requiring just a single call to the HMAC Hρ.
VerSoln: To verify correctness of a solution, the server has
to perform only 1 modular addition and 1 modular multi-
plication.
Remark 1. In DLPuz as speciﬁed in Figure 1, the server
has to store a short-term secret a to re-compute v for ver-
ifying the solution. If the server stores a for each puzzle,
then it may be vulnerable to a memory-based DoS attack.
To avoid this type of attack, the server may use a stateless
connection [1] to oﬄoad storage of a to the client. In partic-
ular, the server can encrypt a under a long-term symmetric
key sk and send it along with each puzzle. Then the client
has to echo it back while sending the solution to the puzzle.
In this way, the server remains stateless and can obtain a
by decrypting the encrypted value using the key sk. The cost
for encryption and decryption adds a very little cost to the
server. For example, the time to encrypt or decrypt 512 bits
of data using AES-128-CBC is approximately 0.403 micro
seconds and hence we ignore these costs in the performance
Client
random NC
Server
Setup(1k)
(n, p, q) ← GenRSA(1k), g ←R Z∗
b ←R [1, φ(n)], compute gb mod n
ρ ←R {0, 1}k
τ = ((xi, Xi))N
s ← (b, ρ, φ(n), τ ), params ← (g, n)
i=1 ← BPVPre(g, n, N, M )
n
−−−−−−−−−−−−−−−−−−→ GenPuz(s, Q, Nc)
NC
(a, ga) ← BPVGen(g, n, (cid:96), M, τ )
random NS
z ← Hρ(NC , NS, IPC , IDS, ga, gb, Q)
v ← a + b · z mod φ(n)
r ←R [0, Q − 1], I ← [v − r, v − r + Q]
FindSoln(NC , puz, t)
V ← ga · (gb)z mod n
ﬁnd v ∈ I
s.t. V = gv mod n
soln ← v
←−−−−−−−−−−−−−−−−−− puz ← (NS, z, ga, gb,I, g, n)
NC , puz
store a or use stateless connection for a
−−−−−−−−−−−−−−−−−−→ VerAuth(s, puz)
NC , puz, soln
z ?= Hρ(NC , NS, IPC , IDS, ga, gb, Q)
VerSoln(s, puz, soln)
soln
?≡ a + b · z mod φ(n)
Figure 1: Client puzzle DLPuz based on the interval discrete logarithm problem
comparison section.
3.4 Parameter Sizes for DLPuz
Our DLPuz requires a pair (a, ga) to be computed dur-
ing each puzzle generation. We use BPV generator to eﬃ-
ciently generate such a pair using the N pre-computed pairs
(xi, Xi). The eﬃciency of puzzle generation depends on the
number of elements (cid:96) in the random set S the server choose
to compute (a, ga). Note that a defending DoS server may
prefer to reduce the number of modular multiplications re-
quired for each puzzle generation. Hence it might be ap-
propriate for the server to choose the bigger value of N
(polynomial in log M ) to make (cid:96) smaller. Table 2 speciﬁes
the approximate distribution distance between pairs (a, ga)
generated uniformly at random versus pairs generated by
the BPV generator using Theorem 1 for the speciﬁed N and
(cid:96) values, with a 80-bit M value. An example showing the
statistical distance for speciﬁc parameter values appear in
Appendix A.
4. A NEW VARIANT OF THE INTERVAL
DISCRETE LOGARITHM PROBLEM
Computing discrete logarithms in an interval is a funda-
mental computational problem that has arisen naturally in
a number of contexts [9, 15, 20]. The security of our DLPuz
puzzle relies on a variant IDL∗ of the Interval Discrete Log
(IDL) assumption; the main diﬀerence in our variant is that
the adversary can return any value x(cid:48) which is equivalent,
modulo φ(n) (where n is an RSA modulus), to the discrete
logarithm of gx. In this section, we introduce a new vari-
ant IDL∗ and show that our new IDL∗ problem is as hard as
the original IDL problem and integer factorisation. The for-
mal deﬁnition of the factorisation and the interval discrete
log problem speciﬁcally for the RSA composite modulus n