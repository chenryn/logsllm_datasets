docker rm -f $(docker container ls --filter "label=ci" -q)
```
现在，我有一组经过测试且已知良好的应用映像。映像只存在于构建服务器上，因此下一步是将它们推送到本地注册表。
# 在 Jenkins 中标记和推送 Docker 映像
如何在构建过程中将映像推送到注册表是您的选择。您可以从用内部版本号标记每个映像开始，并将所有映像版本作为配置项内部版本的一部分推送到注册表。使用高效 Dockerfiles 的项目在构建之间的差异最小，因此您可以从缓存层中受益，并且您在注册表中使用的存储量不应过多。
如果您有大量开发变动和较短发布周期的大型项目，存储需求可能会失控。您可以转到计划推送，每天标记映像，并将最新版本推送到注册表。或者，如果您有一个带有手动质量门的管道，最终发布阶段可能会推送到注册表，因此您存储的唯一映像是有效的发布候选。
对于我的示例配置项作业，一旦测试通过，我将使用 Jenkins 内部版本号作为映像标签，将每个成功的内部版本推送到本地注册表。标记和推送映像的构建步骤是另一个 PowerShell 脚本，它使用来自 Jenkins 的`BUILD_TAG`环境变量进行标记:
```
$images = 'ch10-nerd-dinner-db:2e',
          'ch10-nerd-dinner-index-handler:2e', 
          'ch10-nerd-dinner-save-handler:2e', 
          ...
foreach ($image in $images) {
   $sourceTag = "dockeronwindows/$image"
   $targetTag = "registry:5000/dockeronwindows/$image-$($env:BUILD_TAG)"
   docker image tag $sourceTag $targetTag
   docker image push $targetTag
}
```
这个脚本使用一个简单的循环来为所有构建的映像应用一个新的标签。新标签包括我的本地注册域`registry:5000`，并添加了 Jenkins 构建标签作为后缀，这样我就可以轻松识别映像来自哪个构建。然后，它将所有映像推送到本地注册表——同样，这是在与 Jenkins 容器相同的 Docker 网络中的一个容器中运行的，因此可以通过容器名称`registry`进行访问。
My registry is only configured to use HTTP, not HTTPS, so it needs to be explicitly added as an insecure registry in the Docker Engine configuration. I covered this in [Chapter 4](04.html), *Sharing Images with Docker Registries*. The Jenkins container is using the Docker Engine on the host, so it uses the same configuration and can push to the registry that is running in another container.
几个构建完成后，我可以从我的开发笔记本电脑对注册表应用编程接口进行 REST 调用，以查询`dockeronwindows/nerd-dinner-index-handler`存储库的标签。该 API 将为我的消息处理程序应用映像提供一个所有标签的列表，这样我就可以验证它们是由 Jenkins 用正确的标签推送的:
```
> Invoke-RestMethod http://registry:5000/v2/dockeronwindows/ch10-nerd-dinner-index-handler/tags/list |
>> Select tags
tags
----
{2e-jenkins-docker-on-windows-ch10-nerd-dinner-20, 2e-jenkins-docker-on-windows-ch10-nerd-dinner-21,2e-jenkins-docker-on-windows-ch10-nerd-dinner-22}
```
詹金斯构建标签为我提供了创建映像的工作的完整路径。我还可以使用詹金斯提供的`GIT_COMMIT`环境变量来用提交标识标记映像。这使得标签更短，但是 Jenkins 构建标签包括递增的构建号，所以我总是可以通过对标签进行排序来找到最新的版本。詹金斯网络用户界面显示了每个构建的 Git 提交标识，因此很容易从作业号追溯到确切的源代码版本。
构建的配置项部分现在已经完成。对于 Git 服务器的每次新推送，Jenkins 都会编译、部署和测试应用，然后将好的映像推送到本地注册表。下一部分是将解决方案部署到公共环境中。
# 使用詹金斯部署到远程 DockerSwarm
我的示例应用的工作流使用手动质量门，并将本地和外部工件的关注点分开。每次源代码推送时，解决方案都在本地部署，测试也在运行。如果通过，映像将保存到本地注册表中。最后的部署阶段是将这些映像推送到外部注册表，并将应用部署到公共环境。这模拟了一种项目方法，在这种方法中，构建发生在内部，然后批准的发布被推送到外部。
在这个例子中，我将使用 Docker Hub 上的公共存储库，并将其部署到运行在 Azure 中的多节点 Docker 企业集群中。我将继续使用 PowerShell 脚本并运行基本的`docker`命令。将映像推送到其他注册中心(如 DTR)和部署到内部 Docker Swarm 集群的原则完全相同。
我已经为部署步骤创建了一个新的 Jenkins 作业，该作业被参数化以采用要部署的版本号。版本号是配置项构建中的作业号，因此我可以随时部署已知版本。在新的工作中，我需要一些额外的证书。我已经为 Docker Swarm 管理器的 TLS 证书添加了机密文件，这将允许我连接到在 Azure 中运行的 Docker Swarm 的管理器节点。
作为发布步骤的一部分，我还将把映像推送到 Docker Hub，因此我在 Jenkins 中添加了一个用户名和密码凭据，可以用来登录 Docker Hub。为了在作业步骤中进行认证，我为部署作业中的凭据添加了绑定，这将用户名和密码公开为环境变量:
![](img/ccdcae51-bcc9-4a2b-af46-a54243d3c2b6.png)
然后，我设置了命令配置，并在 PowerShell 构建步骤中使用了`docker login`，从环境变量中指定凭据:
```
docker login --username $env:DOCKER_HUB_USER --password "$env:DOCKER_HUB_PASSWORD"
```
Registry logins are executed with the Docker CLI, but the logged-in context is actually stored in the Docker Engine. When I run this step in the Jenkins container, the host where that container is running is logged in to Docker Hub using the Jenkins credentials. If you follow a similar process, you need to ensure that the job logs out after each run, or that the engine where the build server runs is secure, otherwise users could access that machine and push images as the Jenkins account.
现在，对于每个构建的映像，我从本地注册表中提取它们，为 Docker Hub 标记它们，然后将它们推送到 Hub。如果我想部署以前的版本，那么初始拉取就在那里。自生成以来，本地服务器缓存可能已被清除，因此这可确保本地注册表中存在正确的映像。对于 Docker Hub，我使用了更简单的标记格式，只是应用了版本号。
该脚本使用 PowerShell 循环来拉和推所有映像:
```
$images = 'ch10-nerd-dinner-db:2e', 
          'ch10-nerd-dinner-index-handler:2e', 
          'ch10-nerd-dinner-save-handler:2e', 
          ...  
foreach ($image in $images) { 
  $sourceTag = "registry:5000/dockeronwindows/$image...$($env:VERSION_NUMBER)"
  $targetTag = "dockeronwindows/$image-$($env:VERSION_NUMBER)"
  docker image pull $sourceTag 
  docker image tag $sourceTag $targetTag
  docker image push $targetTag
}
```
当这一步完成后，映像将在 Docker Hub 上公开。现在，部署作业的最后一步是使用这些公共映像在远程 Docker Swarm 上运行最新的应用版本。我需要生成一个包含映像标签中最新版本号的合成文件，我可以使用带有覆盖文件的`docker-compose config`来完成:
```
cd .\ch10\ch10-nerd-dinner\compose
docker-compose `
  -f .\docker-compose.yml `
  -f .\docker-compose.hybrid-swarm.yml `
  -f .\docker-compose.latest.yml `
  config > docker-stack.yml
```
`docker-compose.latest.yml`文件是命令中添加的最后一个文件，它使用由 Jenkins 填充的`VERSION_NUMBER`环境变量来创建映像标签:
```
 services:
   nerd-dinner-db:
     image: dockeronwindows/ch10-nerd-dinner-db:2e-${VERSION_NUMBER}
   nerd-dinner-save-handler:
     image: dockeronwindows/ch10-nerd-dinner-save-handler:2e-${VERSION_NUMBER}
   ...
```
The `config` command isn't affected by the issue that stops you from using Docker Compose to deploy containers when you're running inside a container using named pipes. `docker-compose config` just joins and parses the files—it doesn't communicate with the Docker Engine.
现在，我有了一个 Docker Compose 文件，其中包含了我的混合 Linux 和 Windows Docker Swarm 的所有设置，使用了 Docker Hub 的最新版本化应用映像。最后一步使用`docker stack deploy`在远程集群上实际运行栈:
```
$config = '--host', 'tcp://dow2e-swarm.westeurope.cloudapp.azure.com:2376', '--tlsverify', `
 '--tlscacert', $env:DOCKER_CA,'--tlscert', $env:DOCKER_CERT, '--tlskey', $env:DOCKER_KEY
& docker $config `
  stack deploy -c docker-stack.yml nerd-dinner
```
最后一个命令使用安全的 TCP 连接到远程集群管理器上的 Docker API。`$config`对象设置了 Docker CLI 建立连接所需的所有参数:
*   `host`是管理器节点的公共完全限定域名
*   `tlsverify`指定这是一个安全连接，CLI 应该提供客户端证书
*   `tlscacert`是群的证书颁发机构
*   `tlscert`是用户的客户端证书
*   `tlskey`是用户客户端证书的密钥
作业运行时，所有证书都以詹金斯机密文件的形式出现。当 Docker CLI 需要时，这些文件在工作区中可用；因此，这是一个无缝的安全连接。
当作业完成时，更新的服务将已经部署。Docker 将栈定义与正在运行的服务进行比较，方式与 Docker Compose 对容器进行比较的方式相同，因此只有当定义发生变化时，服务才会更新。部署作业完成后，我可以浏览到公共 DNS 条目(这是我的 Docker Swarm 集群的 CNAME)，并看到应用:
![](img/10d36d30-f70c-4886-8c31-c846ed9233b5.png)
我的工作流使用两个作业，因此我可以手动控制向远程环境的发布，远程环境可以是质量保证站点，也可以是生产站点。这可以自动进行完整的光盘设置，并且您可以轻松地在詹金斯作业的基础上添加更多的功能——显示测试输出和覆盖范围，将构建加入管道，并将作业分解为可重用的部分。
# 摘要
本章介绍了 Docker 中的 CI/CD，以及在 Jenkins 中配置的示例部署工作流。我演示的过程的每个部分都在 Docker 容器中运行:Git 服务器、Jenkins 本身、构建代理、测试代理和本地注册表。
您看到用 Docker 运行您自己的开发基础设施很简单，这为您提供了托管服务的替代方案。将这些服务用于您自己的部署工作流也很简单，无论是完整的配置项/光盘还是带有门控手动步骤的单独工作流。
您看到了如何在 Docker 中配置和运行 Gogs Git 服务器和 Jenkins 自动化服务器来为工作流提供动力。在我最新的 NerdDinner 代码中，我对所有映像都使用了多阶段构建，这意味着我可以有一个非常简单的 Jenkins 设置，而不需要部署任何工具链或 SDK。
我的配置项管道是由一个开发人员将更改推送给 Git 触发的。构建作业提取源代码，编译应用组件，将它们构建到 Docker 映像中，并在 Docker 中运行应用的本地部署。然后，它在另一个容器中运行端到端测试，如果测试通过，它会标记所有映像并将其推送到本地注册表。
我演示了一个手动部署步骤，用户启动一个作业，指定要部署的构建版本。该作业将构建的映像推送到公共 Docker Hub，并通过在 Azure 中运行的 Docker Swarm 上部署栈，将更新部署到公共环境。
我在本章中使用的任何技术都没有硬依赖关系。我用 Gogs、Jenkins 和开源注册中心实现的过程也可以用 GitHub、AppVeyor 和 Docker Hub 这样的托管服务轻松实现。这个过程的所有步骤都使用简单的 PowerShell 脚本，并且可以在支持 Docker 的任何栈上运行。
在下一章中，我将回到开发人员的经验，看看在容器中运行、调试和排除应用故障的可行性。