### 优化后的文本

#### 1. 方程组
\[
\left( \frac{\hat{D}_1}{\hat{g}^{\ell+2}} \right) \rho \cdot \hat{E}_1 = \hat{g} \bar{m}_1
\]
\[
\left( \frac{\hat{D}_2}{\hat{g}^{2\ell+3}} \right) \rho \cdot \hat{E}_2 = \hat{g} \bar{m}_1 \cdots \hat{g} \bar{m}_\ell \cdot \hat{D}_{w_3} \cdot \hat{D}_{w_2}
\]
\[
0 \cdot \hat{E}_0 = \hat{g}^{w_z}
\]

#### 2. 约束条件
\[
\hat{D} \rho \cdot g_{w_4} \cdot C \bar{r}_1^2 \cdot i \cdot V_i = g_{w_i} f z_i \quad \text{对于每个 } i \in \{0, 2, 3, 4\}
\]
\[
\cdots \hat{g} \bar{m}_\ell \cdot 2\ell + 2 \cdot g \bar{r}_2 \cdot \hat{g}^{-w_0} \text{ 和 } C \rho \cdot C \bar{r}_2 \cdot \hat{g}^{w_1}
\]

#### 3. 验证方程
\[
T \rho^3 \cdot T_1^z \cdot T_2^0 \cdot F_0 = \left( \frac{T_0}{T_4} \right)^\rho \cdot S_0 = T \bar{r}_1^2 \cdot T \bar{r}_2^3
\]
\[
e(C_0, \hat{g}) \cdot e(g, \hat{D}_0) \cdot e(\Omega, \hat{g}^{2\ell+4}) = e(C_1, \hat{g}_1) \cdot e(C_2, \hat{D}_1) \cdot e(C_3, \hat{D}_2) \cdot e(C_z, \hat{g}_z)
\]

注意到，在验证的最后一步之前不需要配对计算，这使得验证过程几乎与基础签名的验证一样高效。此外，证明者的第一个消息 `com` 是常数大小的，并且协议的通信复杂度超过见证长度的常数附加开销。

### 定理 2
上述交互方案是语言 \( L_{\text{sig}} \) 的安全 Σ 协议，其中关系 \( R_{\text{sig}}(pk, (\vec{\sigma}, \vec{m})) = 1 \) 当且仅当 \( \text{Verify}'(pk, \vec{\sigma}, \vec{m}) = 1 \)，这里 \( (KeyGen, Sign, Verify') \) 是第 3 节中的签名方案。

**证明：**

- **正确性：** 展开诚实生成的 \( \hat{D}_0 = \hat{g}^{t_z} \cdot \hat{g}^{-t_0} \) 并重新组合配对因子：
  \[
  e(C_0 \cdot g^{-t_0}, \hat{g}) \cdot e(\Omega, \hat{g}^{2\ell+4}) = e(C_1 \cdot g^{-t_1}, \hat{g}_1) \cdot e(C_2 \cdot g^{-t_2}, \hat{D}_1) \cdot e(C_3 \cdot g^{-t_3}, \hat{D}_2) \cdot e(C_z \cdot g^{-t_z}, \hat{g}_z)
  \]
  将承诺展开为群元素 \( G \) 中的元素，可以得到：
  \[
  e(\sigma r_1^3, \hat{g}) \cdot e(\Omega, \hat{g}^{2\ell+4}) = e(\sigma_1, \hat{g}_1) \cdot e(\sigma_2, \hat{D}_1) \cdot e(\sigma_3, \hat{D}_2) \cdot e(\pi, \hat{g}_z)
  \]
  这在有效见证下成立，当 \( \hat{D}_1 = d_1 \cdot \hat{g}^{r_1} \) 和 \( \hat{D}_2 = d_2 \cdot \hat{g}^{r_2} \) 时。其余项的验证来自内置的 Σ 协议的正确性。

- **特殊健全性：** 假设有两个接受的转录 \( (com, \rho, resp), (com, \rho', resp') \) 且 \( \rho \neq \rho' \)。涉及 \( \hat{D}_1, \hat{D}_2 \)（以及 \( \hat{E}_1, \hat{E}_2 \)）的子协议的特殊健全性确保了提取满足 \( \hat{D}_1 = d_1 \cdot \hat{g}^{r_1} \) 的 \( m_1, \ldots, m_\ell, r_1, r_2 \)，其中 \( d_1 = \hat{g}^{\ell+1} \cdot \hat{g}^{\ell+2} \) 和 \( \hat{D}_2 = d_2 \cdot \hat{g}^{r_2} \)，其中 \( d_2 = \hat{g}^{m_1} \cdot \hat{g}^{2\ell+3} \)。从验证步骤 2 类似地，\( \hat{D}_0 \)（以及 \( \hat{E}_0 \)）保证了 \( (t_z, t_0, t_1, t_2, t_3, t_4) \) 的提取，使得 \( \hat{D}_0 = \hat{g}^{t_z} \cdot \hat{g}^{-t_0} \)。此外，与之前提取的 \( (r_1, r_2) \) 一起，验证步骤 2 也保证了 \( t_4 \) 满足 \( C_0 = C_1^{r_1} \cdot C_2^{r_2} \cdot g^{t_4} \)。

- **完美 SHVZK：** 为了证明这一性质，我们需要构建一个模拟器，该模拟器在输入挑战 \( \text{chall} = \rho \in_R \mathbb{Z}_p \) 时，能够在没有见证的情况下模拟有效的转录。首先，我们需要计算一个随机元组 \( C_z, \{C_i\}_{i=0}^3, \{\hat{D}\}_{i=0}^2 \)，并约束它们满足验证方程 (7)。

  从恒等式 \( e(\Omega, \hat{g}^{2\ell+4})^{-1} = e(\Omega^{-1}, \hat{g}^{2\ell+4}) \) 开始，我们选择 \( a_0, a_1, a_2, a_z \leftarrow \mathbb{Z}_p, \hat{D}_1 \leftarrow \hat{G} \) 并有：
  \[
  e(\Omega, \hat{g}^{2\ell+4})^{-1} = e(\Omega^{-1}, \hat{g}^{2\ell+4} \cdot \hat{g}^{a_0} \hat{g}^{a_1}) \cdot e(\Omega^{a_1}, \hat{g}_1) \cdot e(\Omega^{a_2}, \hat{D}_1) \cdot e(\Omega^{a_z}, \hat{g}_z)
  \]
  因此我们可以设置 \( C_0 = \Omega^{-a_0}, C_1 = \Omega^{a_1}, C_2 = \Omega^{a_2} \) 和 \( C_z = \Omega^{a_z} \)。令 \( \hat{B} := \hat{g}^{2\ell+4} \cdot \hat{g}^{a_0} \hat{g}^{a_1} \)。现在，我们可以通过选择 \( a_g \leftarrow \mathbb{Z}_p \) 将常量 \( g \in G \) 引入方程，因为 \( e(\Omega^{-1}, \hat{B}) = e(\Omega^{-1 \cdot g^{a_g}}, \hat{B}) \cdot e(g, \hat{B}^{-a_g}) \)。然后，我们最终设置 \( \hat{D}_0 = \hat{B}^{a_g}, \hat{D}_2 = \hat{B}^{a_3} \) 和 \( C_3 = (\Omega^{-1} \cdot g^{a_g})^{1/a_3} \) 对于随机的 \( a_3 \leftarrow \mathbb{Z}_p \)。

  为了完成模拟的转录，我们并行运行所有作为子程序使用的 Σ 协议的模拟器。更具体地说，首先选择 \( \rho \leftarrow_R \mathbb{Z}_p \) 和 \( \bar{m}_1, \ldots, \bar{m}_\ell, \bar{r}_1, \bar{r}_2, w_z, w_0, \ldots, w_4, z_0, z_2, z_3, z_4 \leftarrow_R \mathbb{Z}_p \) 以及 \( T_0, T_2, T_3, T_4 \leftarrow_R G \) 并进行以下操作：

  1. 计算 \( \hat{E}_1 = \left( \frac{\hat{D}_1}{\hat{g}^{\ell+2}} \right)^{-\rho} \cdot \hat{g}^{\bar{m}_1} \) 同样地，\( \hat{E}_2 = \left( \frac{\hat{D}_2}{\hat{g}^{2\ell+3}} \right)^{-\rho} \cdot \hat{g}^{\bar{m}_1} \cdot \hat{g}^{\bar{m}_\ell} \cdot g^{\bar{r}_1} \) 以及 \( \hat{E}_0 = \hat{D}^\rho \cdot \hat{g}^{w_z} \cdot \hat{g}^{-w_0} \)。
  2. 计算 \( F_0 = C_0^{-\rho} \cdot \hat{D}^{w_1} \cdot \hat{g}^{w_2} \cdot \hat{g}^{w_3} \) 以及 \( V_i = T_i^{-\rho} \cdot g^{v_i} f z_i \) 对于每个 \( i \in \{0, 2, 3, 4\} \)。
  3. 计算 \( S_0 = \left( \frac{T_0}{T_4} \right)^{-\rho} \cdot T_2^{\bar{r}_1} \cdot T_3^{\bar{r}_2} \)。

  这完成了证明。

### 4.3 对已提交消息的签名
在高层次上，协议涉及一个提交者，他希望对 \( m = (m_1, \ldots, m_\ell) \) 进行签名，并首先计算形式为 \( c_v = v^{m_1} \cdots v^{m_\ell} \cdot u^r \) 的承诺，其中 \( u \) 是额外的公共参数（具有未知离散对数）。签名者返回形式为 \( \tau_1 = g^\omega c_v^s, \tau_2 = g^s, \tau_3 = h^s \) 的元素，这几乎是所需的签名。为了将 \( \tau_1 \) 转换为相对于 \( \tau_2, \tau_3 \) 的正确形式，提交者需要移除 \( u^r s \) 因子。然后，签名者还发送 \( \tau_0 = u^s \) 以启用移除 \( \tau_0^r \)。在协议中包括一些随机化步骤以及其他附加组件，使提交者能够提取 π，即签名的 QA-NIZK 部分。在协议的安全性证明中，我们需要证明附加值 \( \tau_0 = u^s \) 不会影响签名的不可伪造性。

**协议：**
在协议的新一轮开始时，提交者有一个向量 \( m = (m_1, \ldots, m_\ell) \)，签名方案的公钥和额外的生成元 \( u \in G \)（可以是一个哈希点），签名者也有签名方案的私钥但不知道 \( m \)。为了对 \( m \) 进行签名，提交者选择 \( r \leftarrow_R \mathbb{Z}_p \) 并计算完全隐藏的承诺 \( c_v = v^{m_1} \cdots v^{m_\ell} \cdot u^r \in G \)。此外，它还计算 \( c_z = z^{m_1} \cdots z^{m_\ell} \cdot u^{t_z} \)。签名者接收这些承诺，并且他们双方参与一个关于 \( c_v \) 相对于基 \( (v_1, \ldots, v_\ell; u) \) 和 \( c_z \) 相对于基 \( (z_2, \ldots, z_{\ell+1}; u) \) 的知识证明，其中签名者扮演验证者的角色。根据证明的成功与否，签名者计算所谓的“预签名”，包括以下群元素：
\[
\tau_1 = g^\omega \cdot (c_v \cdot w)^s, \quad \tau_2 = g^s, \quad \tau_3 = h^s, \quad \tau_0 = u^s, \quad \pi_0 = z_1^\omega \cdot c_z^s \cdot z_{\ell+2}^s
\]
对于随机的 \( s \leftarrow_R \mathbb{Z}_p \)。

在最后一步中，用户接收到预签名，然后选择 \( s' \leftarrow_R \mathbb{Z}_p \) 并计算 \( (\sigma_1, \sigma_2, \sigma_3, \pi) \in G^4 \) 如下：
\[
\sigma_1 = \tau_1 \cdot \tau_0^{s'}, \quad \pi = \pi_0 \cdot \tau_0^{s'}, \quad \sigma_2 = \tau_2 \cdot g^{s'}, \quad \sigma_3 = \tau_3 \cdot h^{s'}
\]
\[
\sigma_1 = \tau_1 \cdot \tau_0^{s'} \cdot (v^{m_1} \cdots v^{m_\ell} \cdot u^{t_z})^{-r} \cdot (z^{m_1} \cdots z^{m_\ell} \cdot u^{t_z})^{-r}
\]
最后，用户检查签名的有效性。根据有效性，用户输出签名或失败符号 \( \perp \)。

我们注意到，传输的群元素数量是常数，并且在签名验证阶段之前不需要配对计算。相比之下，[18] 的构造需要更大隐藏阶的群，并且其用于签名已提交消息块的协议需要线性的范围证明。

**安全性：**
我们简要概述上述协议在恶意实体面前的证明，因为经典的论证可以应用。假设提交者使用安全的 ZKPK 并不输出 \( \perp \)，恶意签名者无法区分诚实证明和模拟证明。因此，签名者在协议执行过程中无法从 \( m \) 中学习任何信息。在另一种情况下，我们需要证明被破坏的提交者仍然无法为新的向量 \( m' \) 生成有效签名。首先，由于 \( u \) 的生成不受提交者的控制而是由随机预言机控制，\( u \) 可以独立于其余的公钥。然后，我们只需要证明在给定 \( \tau_0 \) 时签名仍然不可伪造。由于可以从知识证明中提取 \( m \) 和 \( s \)，减少者可以输出 \( m \) 的签名。此外，从附录 A 中的签名安全性证明可以看出，如何模拟这个附加元素。实际上，减少者唯一不能直接计算为 \( u^s \) 的地方是在嵌入 SXDH 挑战的模拟签名时。给定 \( (g, h, g^b, h^{b+c}) \)，减少者可以计算 \( u = g^{a_u} h^{b_u} \) 从随机的 \( a_u, b_u \leftarrow \mathbb{Z}_p \) 并编程随机预言机输出这个元素 \( u \) 作为公钥规范所做的一样。然后为了模拟 \( \tau_0 \)，减少者只需计算 \( \tau_0 = (g^b)^{a_u} (h^{b+c})^{b_v} = u^{b_v} h^{c \cdot b_v} \)，这是 \( u^{b_v} \) 或随机的。减少的其余部分保持不变，因为 \( a_u, b_u \) 完全独立于附录 A 中描述的那些。

**备注：** 由于恶意签名者可能知道模拟过程，因此需要进一步的安全措施来防止攻击。