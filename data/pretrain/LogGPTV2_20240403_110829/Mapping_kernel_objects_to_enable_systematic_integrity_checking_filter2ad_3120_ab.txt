12:
13: } TXT_DATA;
TxtData;
char*
14: void InsertSList
15: (SLIST_ENTRY *Head, SLIST_ENTRY *Entry)
16: {
17:
18:
19: }
Entry->Flink = Head->Flink;
Head->Flink = Entry;
20: void InsertWrapList (int32 type, void *data)
21: {
22:
23:
24:
25:
26: }
WRAP_DATA *WrapData = AllocateWrapData();
WrapData->Type = type;
WrapData->PData = data;
InsertSList(&WrapDataListHead, &WrapData->List);
27: void InsertTxtData(TXT_DATA *txt_data)
28: {
29:
30: }
InsertWrapList(0, txt_data);
31: void InsertBinData(BIN_DATA *bin_data)
32: {
33:
34: }
InsertWrapList(1, bin_data);
Figure 2: The source code for the running example.
KOP ﬁrst performs static analysis on the kernel source code.
It starts with an inter-procedural, inclusion-based points-to anal-
ysis [1] to derive a points-to graph. This is a directed graph whose
nodes are pointers in the program and edges represent inclusion re-
lationships. In other words, an edge from pointer x to pointer y
means that any object pointers that can be derived from y are also
derivable from x. Additionally, the points-to graph is maintained as
a pre-transitive graph, i.e., the graph is not transitively closed [10].
Based on the pre-transitive points-to graph, KOP then infers can-
didate target types for generic pointers. Generic pointers are those
whose target types cannot be extracted from their deﬁnitions. The
term includes void* pointers as well as pointers deﬁned inside linked
list-related structures that are nested inside objects. The ﬁnal out-
put of KOP’s static analysis component is an extended type graph.
This is a directed graph where each node is either a data type or a
global variable, and each edge has a label (m, n). This means that
the pointer ﬁeld at offset m in the source node points to the target
node at offset n. We call this an extended type graph because it has
edges corresponding to generic pointer ﬁelds which do not exist in
the basic type graph derived from only type deﬁnitions.
Given a memory snapshot, KOP performs memory analysis by
using the extended type graph to traverse the kernel memory. The
output of the memory analysis component is an object graph whose
nodes are instances of objects in the memory snapshot and edges
are the pointers connecting these objects. Kernel data integrity
checks can then be performed based on this object graph.
To help illustrate KOP, we will use the source code in Figure 2 as
a running example. The code snippet shows the data structures and
Figure 3: InsertWrapList() in medium-level intermediate rep-
resentation (MIR).
functions for inserting a TXT_DATA object or a BIN_DATA object
into a singly-linked list (WrapDataListHead). The list stores a group
of WRAP_DATA objects.
3. STATIC ANALYSIS
KOP’s static analysis component takes the kernel’s source code
as input, and outputs its extended type graph. To do so, we compute
three sets of information: (1) object type deﬁnitions, (2) declared
types and relative addresses of global variables, and (3) candidate
target types for generic pointers. Since it is straightforward to re-
trieve the ﬁrst two sets of information from a compiler, we will
focus on how the candidate target types for generic pointers are de-
termined. We ﬁrst describe how we perform an inter-procedural
points-to analysis [1] to construct a points-to graph. We then de-
scribe how we derive target types for generic pointers based on the
points-to graph and the type deﬁnitions of local and global vari-
ables. Our static analysis is based on the medium-level interme-
diate representation (MIR) used by the Phoenix compiler frame-
work [16]. In Figure 3, we show the MIR for the function Inser-
tWrapList() of our running example.
3.1 Points-To Analysis
Our inter-procedural ﬂow-insensitive (i.e., ignoring the control
ﬂow within a procedure) points-to analysis is due to Andersen [1].
It computes the set of logical objects that each pointer may point to
(referred to as the points-to set for that pointer). The logical objects
include local and global variables as well as dynamically allocated
objects. Since our goal is to ﬁnd candidate target types for generic
pointers, our points-to analysis must be ﬁeld-sensitive (i.e., distin-
guishing the ﬁelds inside an object). Furthermore, to achieve good
precision, we chose to perform context-sensitive analysis (i.e., dis-
tinguishing the calling contexts). The reason is that generic func-
tions such as InsertSList from our running example are widely used
in OS kernels, and without context-sensitivity, the analysis of such
functions would result in very general points-to sets for their ar-
guments. Basically, all list heads and entries that are ever passed
to such a generic function would point to each other. Finally, our
points-to analysis must scale to a large codebase such as an OS
kernel.
Points-to analysis for C programs has been widely studied in
the programming languages ﬁeld [2, 6, 9, 10, 19, 30, 31]. Unfortu-
nately, none of the previous algorithms meets our requirements. All
the previous solutions chose to sacriﬁce precision for performance
since the points-to analysis used inside compilers is expected to
ﬁnish within minutes. When designing KOP, we decided to revise
the algorithm proposed by Heintze and Tardieu in [10] to achieve
ﬁeld-sensitivity and context-sensitivity. Note that the original algo-
rithm is context-insensitive and ﬁeld-based. In ﬁeld-based analy-
sis, all instances of a ﬁeld are treated as one variable, whereas in
557Rule
Original
KOP
Assign
x = y =⇒ hx, yi
(x = y + n, op) =⇒ hx, y, n, opi
Trans
hx, yi, hy, zi =⇒ hx, zi
hx, y, n1, ops1i, hy, z, n2, ops2i =⇒ hx, z, n1 + n2, ops2 + ops1i
where ops1 + ops2 is a valid call path.
Star-1
hx, &zi, ∗x = y =⇒ hz, yi
hx, &z, n, opsi, (∗x = y, op) =⇒ hz.n, y, 0, op + rev(ops)i
where op + rev(ops) is a valid call path.
Star-2
hy, &zi, x = ∗y =⇒ hx, zi
hy, &z, n, opsi, (x = ∗y, op) =⇒ hx, z.n, 0, ops + opi
where ops + op is a valid call path.
Table 1: Deduction rules used by the original algorithm [10] and KOP.
ﬁeld-sensitive analysis, each instance is treated separately. Conse-
quently, ﬁeld-sensitive analysis is more precise.
Next we describe in detail how we achieve ﬁeld-sensitivity and
context-sensitivity in our points-to analysis. We will focus on the
changes introduced to Heintze and Tardieu’s algorithm [10].
By using temporary variables, Heintze and Tardieu transform
pointer assignments into four canonical forms: x = y, x = &y,
∗x = y, and x = ∗y. To handle pointer offsets, we generalize the
ﬁrst two assignment forms to x = y + n and x = &y + n where n
is a pointer offset. To achieve context-sensitivity, we associate each
assignment with a variable op that speciﬁes the call or return op-
eration involved in the assignment. op is null when the assignment
occurs inside a single function.
In [10], given the four canonical assignment forms, an edge in
the points-to graph is a pair hsrc, dsti. Four deduction rules are
used to compute the points-to graph (shown in the left portion of
Table 1). To consider pointer offsets and calling context changes,
we add a label hn, opsi to each edge. We denote a labeled edge
from src to dst by hsrc, dst, n, opsi. For example, given the
pointer assignment _Entry = t286 due to the function call at line
25 of Figure 3, the corresponding edge will be h_Entry, t286, 0,
call@f ile : 25i.
Given the edge labels, we change the deduction rules accord-
ingly (shown in the right portion of Table 1). The changes related to
ﬁeld-sensitivity are straightforward. In the Assign rule, the pointer
offset is simply included in the edge’s four-tuple.
In the Trans
rule, the pointer offsets are added up. In the Star rules, we cre-
ate a new node z.n to represent an instance of the pointer ﬁeld at
offset n in logical object z to achieve ﬁeld-sensitivity. In our de-
duction rules, whenever we create a new edge, we also check if the
sequence of call/return operations involved is valid under context-
sensitivity. A sequence is valid if it can be instantiated from a valid
call path (i.e., a control ﬂow). We assume there are no recursive
functions (we have not observed any in the Windows source code
we analyzed). So a valid call path has at most a single call at each
call site. Additionally, we do not need to apply any special rules to
global variables since we create a single node for each global vari-
able disregarding the function contexts. This allows information to
ﬂow through global variables between different functions.
To avoid the cost of computing the full transitive closure, Heintze
and Tardieu maintain a pre-transitive graph and compute the points-
to set on-demand. We adapt their algorithm to take our edge la-
bels into account. Compared with the original algorithm, our pre-
transitive graph algorithm has two key differences. First, we en-
force context-sensitivity by checking if a sequence of call/return
operations is valid. Second, whenever a cycle is found, the algo-
rithm in [10] merges all the nodes in the cycle. Instead we termi-
nate the path traversal in this case, because our edges carry more
information than just pointer inclusions. The cycle detection in our
pre-transitive graph algorithm and the no-recursive-call policy in
enforcing context-sensitivity ensure that our points-to analysis ter-
minates.
3.2 Inferring Types for Generic Pointers
The output of our points-to analysis is a pre-transitive points-
to graph from which we can derive the candidate target types for
generic pointers. The key idea is to leverage the type deﬁnitions
of local and global variables. Before describing our algorithm in
detail, we will use an example to explain the intuition behind it.
t284
8
_WrapData
WRAP_DATA
List
Type
PData
TXT_DATA
TxtData
BIN_DATA
_data
0
_txt_data
0
BinLength
_bin_data
BinData
Figure 4: An example for inferring candidate target types of
generic pointers.
In this example, we derive the types for
WRAP_DATA.PData from the assignment *t284 = _data (see the
MIR code in Figure 3). This graph is a mix of the points-to
graph and the extended type graph. It illustrates how we de-
rive edges in the extended type graph based on the points-to
graph. Ellipse nodes and solid arrows are part of the points-to
graph. Rectangular nodes and bold-solid arrows are part of the
ﬁnal extended type graph. The dashed arrows are derived from
the type deﬁnitions of variables.
The basic idea of our algorithm is illustrated in Figure 4. In the
points-to graph of our running example, we have edges from t284
to _WrapData (with pointer offset 8) and from _data to _bin_data and
_txt_data (with pointer offset 0). In addition, based on the type def-
initions, we know that _WrapData points to WRAP_DATA, _bin_data
points to BIN_DATA and _txt_data points to TXT_DATA. Then, given
the assignment *t284 = _data, we can infer that WRAP_DATA+8,
which is WRAP_DATA.PData, may point to either BIN_DATA or
TXT_DATA. The key difference here from classic points-to analysis
is that, although a pointer like _WrapData may not point to any log-
558WrapDataListHead
WRAP_DATA
List
Type
PData
BIN_DATA
BinLength
BinData
TXT_DATA
TxtData
Figure 5: The extended type graph for the running example.
ical object, we leverage its type deﬁnition to derive the target types
for WRAP_DATA.PData. Moreover, with the pointer offsets from the
points-to graph, we naturally identify that WRAP_DATA.List does
not just point to an SLIST_ENTRY object but actually a WRAP_DATA
object. With this, KOP avoids the need for manual annotations in
the code for types such as SLIST_ENTRY. The extended type graph
for our running example is shown in Figure 5. Note that WrapDataL-
istHead is a global variable and the other nodes are data types.
More speciﬁcally, for each assignment in the form ∗x = y, we
ﬁrst search for all the reachable nodes in the pre-transitive pointer
graph for x and y, separately. We refer to them as T argetSet(x)
and T argetSet(y). Then for each node a in T argetSet(x) and
each node b in T argetSet(y), we check if there is a valid call path
from a to b. If there is one, we derive a candidate target type for the
corresponding pointer ﬁeld in a’s data type. Similarly, we derive
candidate types from assignments in the form x = ∗y. The intu-
ition is that, when y is a generic pointer such as void*, it will be cast
back to its actual type before the program accesses the data pointed
to by it. Speciﬁcally, for each assignment, we ﬁrst search for the
nodes that can reach x, referred to as SourceSet(x). Then for
each node a in SourceSet(x) and each node b in T argetSet(y),
we check if there is a valid call path from a to b. If so, we derive a
candidate type for the corresponding pointer ﬁeld in a’s data type.
A problem inherent to ﬂow-insensitive points-to analysis is its
imprecision. To mitigate this problem, we introduce a constraint
when deriving candidate types for generic pointers in linked list
constructs. For example, a pointer ﬁeld in SLIST_ENTRY must
point to an SLIST_ENTRY structure. This kind of constraint re-
duces the number of incorrect candidate target types and thus re-
duces the possibility of errors in the memory analysis. Such con-
straints do not decrease KOP’s coverage because all valid candidate
target types are expected to meet this constraint.
4. MEMORY ANALYSIS
KOP’s memory analysis component maps kernel data objects
and derives the object graph for a given memory snapshot. It does
so by using the extended type graph derived earlier to traverse the
kernel memory. We use our running example to explain the basic
idea behind our memory traversal algorithm and the challenges we
faced.
Starting at global variable WrapDataListHead, KOP ﬁrst reaches
an object of type WRAP_DATA referenced by it. KOP then follows
each pointer ﬁeld deﬁned inside this object. By following the ﬁeld
WRAP_DATA.List (a linked list structure), KOP reaches another ob-
ject of type WRAP_DATA, and continues by following each pointer
ﬁeld inside it. This technique has its roots in trace-based garbage
collection, where it is used to identify all referenced memory blocks
in a program’s heap.
A challenge arises when trying to follow the pointer ﬁeld WRAP_
DATA.PData. This ﬁeld is a generic pointer which, according to
the extended type graph, can either point to a BIN_DATA object