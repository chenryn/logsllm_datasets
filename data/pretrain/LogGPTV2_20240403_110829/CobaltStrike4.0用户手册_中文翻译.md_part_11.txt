http-stager {
set uri_x86 "/get32.gif";
set uri_x64 "/get64.gif";
uri_x86 选项设置用于下载 x86 payload stage 的 URI。uri_x64 选项设置用于下载 x64 payload
stage 的 URI。
client {
parameter "id" "1234";
header "Cookie" "SomeValue";
}
在 http-stager 上下文下的 client 关键字定义 HTTP 事务的客户端。使用 parameter 关键字来给
URI 增加一个参数。使用 header 关键字来给 stager 的 HTTP GET 请求增加一个头字段。
server {
header "Content-Type" "image/gif";
output {
prepend "GIF89a";
print;
}
}
}
在 http-stager 上下文下的 server 关键字定义 HTTP 事务的服务器端。 header 关键字给服务器的
响应增加一个服务器头字段。http-stager 上下文中 server 下的 output 关键字是一个改变
payload stage 的数据转换。这个数据转换可能仅仅是在 stage 之前添加字符串或给 stage 增加字符
串。使用 print 终止语句来关闭这个输出语句块。
11.5 Beacon HTTP 事务演练
把上面所说的合起来，有助于理解一个 Beacon 事务的外观和每个请求发送哪些数据。
当一个 Beacon 向 Cobalt Strike 的 web 服务器发送 HTTP GET 请求时一个事务就开始了。此时，
Beacon 必须发送包含受害主机信息的 metadata（元数据）。
提示：会话元数据是加密的数据块。 如果没有编码，则不合适在头字段或 URI 参数中传输数据。应该
始终应用 base64，base64url 或 netbios 语句对你的元数据进行编码。
Cobalt Strike 的 web 服务器使用 Beacon 必须执行的任务响应此 HTTP GET 请求。
这些任务最初是作为一个加密的二进制 Blob 发送的。你可以在 http-get 的服务器上下文下使用
output 关键字转换此信息。
Beacon 执行任务时，会累积输出。 完成所有任务后，Beacon 会检查是否有输出要发送。 如果没有输
出，则 Beacon 进入睡眠状态。 如果有输出，Beacon 就会启动 HTTP POST 事务。
HTTP POST请求必须在 URI 参数或头字段中包含一个会话 id。 Cobalt Strike 使用此信息将输出与正
确的会话相关联。 发布的内容最初是加密的二进制 Blob。你可以使用在 http-post 的客户端上下文中
output 关键字来转换此信息。
Cobalt Strike 的 web 服务器可能会以自己喜欢的任何方式响应 HTTP POST。Beacon 不使用此信息。
你可以使用在 http-post 上下文中 server 下的 output 语句块指定 HTTP POST 的输出。
注意：虽然 http-get 默认使用 GET 方法，而 http-post 默认使用 POST 方法，但你不是非得坚持这些
默认值。 使用动词选项来更改这些默认值。这里有很大的灵活性。
下表总结了这些关键字及其发送的数据：
11.6 HTTP服务器配置
http-config 块会影响所有由 Cobalt Strike 的 web 服务器产生的 HTTP 响应。在这里，你可以指定
额外的 HTTP 头字段和 HTTP 头字段的顺序。
http-config {
set headers "Date, Server, Content-Length, Keep-Alive,
Connection, Content-Type";
header "Server" "Apache";
header "Keep-Alive" "timeout=5, max=100";
header "Connection" "Keep-Alive”;
set trust_x_forwarded_for "true";
}
header 关键字给每个 Cobalt Strike 的 HTTP 响应添加一个 header 值。如果此 header 值在一个响应
中已经定义，那么该值将会被忽略。
set headers 选项指定这些 HTTP 头字段在一个 HTTP 响应中传递的顺序。任何不在此列表中的
HTTP 头都会被添加到末尾。
set trust_x_forwarded_for 选项决定 Cobalt Strike 是否使用 X-Forwarded-For HTTP 头来确定请
求的远程地址。如果你的 Cobalt Strike 服务器在一个 HTTP 重定向器后，请使用此选项。
11.7 使用 SSL Beacon 的自签名 SSL 证书
HTTPS Beacon 在其通信中使用 HTTP Beacon 的指标。 C2 拓展文件还可以为 Beacon C2 服务器的自
签名 SSL 证书指定参数。如果你想在其 SSL 证书中复制具有独一无二的流量指标的 actor，这将非常有
用：
https-certificate {
set CN "bobsmalware.com";
set O "Bob’s Malware";
}
受你的配置文件控制的证书参数为：
11.8 使用 SSL Beacon 的有效 SSL 证书
你可以选择对 Beacon 使用有效的 SSL 证书。使用 C2 拓展文件来指定一个 Java 密钥库文件和密钥库的
密码。 此密钥库必须包含你证书的私钥、根证书、任何中间证书和由你的 SSL 证书供应商提供的域证
书。Cobalt Strike 期望你的 Java 密钥库文件放在与 C2 拓展文件同一文件夹中。
https-certificate {
set keystore "domain.store";
set password "mypassword";
}
使用一个有效 SSL 证书的参数为：
以下是创建可与 Cobalt Strike 的 Beacon 一起使用的有效 SSL 证书的步骤：
1、使用 keytool 程序创建一个 Java Keystore 文件。 这个程序会问 “What is your first and last
name?”（你的名和姓是什么？）请确保你使用完全限定的域名回答你的 Beacon 服务器。 另外，请确
保记下密钥库（keystore）密码。 稍后你会用到它。
$ keytool -genkey -keyalg RSA -keysize 2048 -keystore domain.store
2、使用 keytool 生成证书签名请求（CSR）。 你会将此文件提交给你的 SSL 证书供应商。他们将验
证你的身份并颁发证书。一些厂商比其他厂商在处理此事上更加简单和便宜。
$ keytool -certreq -keyalg RSA -file domain.csr -keystore domain.store
3、导入你的 SSL 供应商提供的根证书和任何中间证书。
$ keytool -import -trustcacerts -alias FILE -file FILE.crt -keystore
domain.store
4、最后，你必须下载你的域证书。
$ keytool -import -trustcacerts -alias mykey -file domain.crt -keystore
domain.store
就是这样。 现在，你已经有了一个 Java 密钥库（Keystore）文件，可以与 Cobalt Strike 的 Beacon 一
起使用。
11.9 配置文件变体
默认情况下，C2 拓展文件只包含一个配置文件。 可以通过指定 http-get、http-post、http-
stager 和 https-certificate 变体块来打包当前配置文件的变体。
变量块以 [block name] “variant name” { … } 的格式指定。这是一个名为 My Variant 的变体
http-get 块：
http-get "My Variant" {
client {
parameter "bar" "blah";
变体块使用特定的变体块替代配置文件中的默认块来创建当前配置文件的复制。每个唯一的变量名都会
创建一个新的变量配置文件。你可以根据需要使用任意数量的变体名填充配置文件。
在配置 HTTP 或 HTTPS Beacon 指标时，可以选择变量。 变量允许绑定到单个团队服务器的每个 HTTP
或 HTTPS Beacon 监听器具有互不相同的网络 IOC。
11.10 代码签名证书
Attacks → Packages → Windows Executable/Windows Executable(S) 提供了对可执行文件或
DLL 文件进行签名的选项。 要使用此选项，必须指定带有代码签名证书和私钥的 Java Keystore 文件。
Cobalt Strike 希望在与 C2 拓展文件相同的文件夹中找到 Java Keystore 文件。
code-signer {
set keystore "keystore.jks";
set password "password";
set alias "server";
}
代码签名证书设置为：
11.11 C2 拓展文件和游泳池哪个更危险？
答案是都很危险。C2 拓展文件为你提供了对网络和主机指标的全新控制级别。这种权力也伴随着责
任。C2 拓展文件也可能导致操作者犯很多错误。自定义配置文件时，需要考虑以下几点：
1. 每个 Cobalt Strike 实例一次使用一个配置文件。如果更改配置文件或加载新的配置文件，以前部
署的 Beacon 将无法与你通信。
2. 在开发数据转换时，请始终了解数据的状态以及协议所允许的内容。例如，如果你对元数据进行了
base64 编码并将其存储在 URI 参数中，这是行不通的。为什么？ 因为 URL 中某些 base64 字符
（+、= 和 /）具有特殊含义。 c2lint 工具和配置文件编译器将不会检测到此类问题。
3. 即使进行很小的更改，也要始终测试你的配置文件。如果 Beacon 无法与你通信，则可能是你的配
置文件存在问题。编辑它，然后再试一次。
4. 信任 c2lint 工具。该工具超越了配置文件编译器。这些检查基于该技术的实现方式。如果 c2lint
检查失败，则说明你的配置文件存在实际问题。
第十二章 可拓展 PE，进程注入和后渗透
12.1 概述
C2 拓展文件不仅仅是通信指标。C2 拓展文件还可以控制 Beacon 的内存特征，决定 Beacon 如何进行
进程注入，还影响 Cobalt Strike 的后渗透任务。本章会介绍可拓展 C2 语言的这些扩展。
12.2 PE 和内存指标
C2 拓展文件中的 stage 块控制如何将 Beacon 加载到内存中以及编辑 Beacon DLL 的内容。
stage {
set userwx "false";
set compile_time "14 Jul 2009 8:14:00";
set image_size_x86 "512000";
set image_size_x64 "512000";
set obfuscate "true";
transform-x86 {
prepend "\x90\x90";
strrep "ReflectiveLoader" "DoLegitStuff";
}
transform-x64 {
# transform the x64 rDLL stage
}
stringw "I am not Beacon";
}
transform-x86 和 transform-x64 块填充和转换 Beacon 的反射 DLL stage。这些块支持三个命令：