Adv𝐺𝐴A1 ≤ 𝑛𝑠 · Adv𝐺𝐴1A1
.
From this point on, we will make a series of replacements in the
tested session 𝜋, and its (unique) contributive partner 𝜋′ which we
know by game A1.
Game A2 (ephemeral KEM). In this game, in session 𝜋𝑠, we re-
place the ephemeral secret ss𝑒 with a uniformly random(cid:102)ss𝑒. If 𝜋𝑐
the same(cid:102)ss𝑒. All values derived from ss𝑒 in 𝜋𝑠 (and 𝜋𝑐, if ss𝑒 was
replaced in it) use the randomized value(cid:102)ss𝑒.
received the same ct𝑒 that 𝜋𝑠 sent, then we also replace its ss𝑒 with
Any adversary A1 that can detect this change can be used to
construct an adversary B2 against the IND-1CCA security of KEMe
as follows.
B2 obtains the IND-1CCA challenge pk★, ct★ and challenge
shared secret ss★. In 𝜋𝑐, it uses pk★ in the ClientHello. In 𝜋𝑠,
it uses ct★ in the ServerHello reply, and ss★ as 𝜋𝑠’s shared secret
ss𝑒. If A1 delivers ct★ to 𝜋𝑐, then B2 uses ss★ as 𝜋𝑐’s shared secret
ss𝑒 as well. If A1 delivers some other ct′ ̸= ct★ to 𝜋𝑐, then B2 makes
a single query to its IND-1CCA decapsulation oracle with ct′ to
obtain the required shared secret.
A1 eventually terminates its guess of 𝑏 = 0 or 𝑏 = 1. If ss★ was
the real shared secret, then B2 has exactly simulated 𝐺𝐴1 to A1; if
ss★ was a random value, then B2 has exactly simulated 𝐺𝐴2 to A1.
Thus:
Game A3 (random HS). In this game, in session 𝜋𝑠, we replace the
handshake secret HS with a uniformly random(cid:102)HS. If 𝜋𝑐 received
(cid:102)HS. All values derived from HS in 𝜋𝑠 (and 𝜋𝑐, if HS was replaced
in it) use the randomized value(cid:102)HS.
the same ct𝑒 that 𝜋𝑠 sent, then we also replace its HS with the same
Any adversary A1 that can detect this change can be used to con-
struct a distinguisher B3 against the PRF security of HKDF.Extract
in its second argument as follows.
When B3 needs to compute HS in 𝜋𝑠 (or 𝜋𝑐, if 𝜋𝑐 received the
same ct𝑒 that 𝜋𝑠 sent), it queries its HKDF.Extract challenge oracle
on dES and uses the response as HS. If the response was the real
output, then B3 has exactly simulated 𝐺𝐴2 to A1; if the response
was a random value, then B3 has exactly simulated 𝐺𝐴3 to A1.
Thus:
Adv𝐺𝐴1A1 ≤ Adv𝐺𝐴2A1
+ AdvIND-1CCA
KEMe,B2
.
Adv𝐺𝐴2A1 ≤ Adv𝐺𝐴3A1
+ AdvPRF-sec
HKDF.Extract,B3
.
Game A4 (random CHTS, SHTS, dHS). In this game, in session
𝜋𝑠, we replace the values CHTS, SHTS, and dHS with uniformly
random values. If 𝜋𝑐 received the same ct𝑒 that 𝜋𝑠 sent, then we
replace its dHS with the same replacement as in 𝜋𝑠. Furthermore,
if 𝜋𝑐 received the same ct𝑒 that 𝜋𝑠 sent and the same ServerHello
(i.e., if 𝜋𝑐 is a partner to 𝜋𝑠 at stage 1 and 2), then we also replace
its CHTS and SHTS with the same replacements as in 𝜋𝑠. If 𝜋𝑐
received the same ct𝑒 that 𝜋𝑠 sent but not the same ServerHello,
then we replace its CHTS and SHTS with independent uniformly
random values. All values derived from dHS in 𝜋𝑠 (and 𝜋𝑐, if dHS
was replaced in it) use the newly randomized values.
Any adversary A1 that can detect this change can be used to con-
struct a distinguisher B4 against the PRF security of HKDF.Expand
as follows.
When B4 needs to compute CHTS, SHTS, or dHS in 𝜋𝑠 (or 𝜋𝑐, if
𝜋𝑐 received the same ct𝑒 that 𝜋𝑠 sent), it queries its HKDF.Expand
challenge oracle on the corresponding label and transcript, and uses
the responses. If the responses were the real output, then B4 has
exactly simulated 𝐺𝐴3 to A1; if the responses were random values,
then B4 has exactly simulated 𝐺𝐴4 to A1. Note that if 𝜋𝑐 did receive
the same ct𝑒 as was sent by 𝜋𝑠, but other parts of the ServerHello
message were altered such that 𝜋𝑐 and 𝜋𝑠 are not partners at stage
1, the adversary may be permitted to query Reveal(𝜋𝑐, 1); but since
the transcript in 𝜋𝑐 and 𝜋𝑠 is now different, the label input to
the HKDF.Expand oracle for CHTS and SHTS is different, so the
simulation in B4 remains good. Thus:
Adv𝐺𝐴3A1 ≤ Adv𝐺𝐴4A1
+ AdvPRF-sec
HKDF.Expand,B4
.
The stage-1 and stage-2 keys CHTS and SHTS are now uniformly
random strings independent of everything else in the game. Thus,
the stage-1 and stage-2 keys have been shown to have wfs1 security.
Game A5 (random AHS). In this game, in session 𝜋𝑠, we replace
the secret AHS with a uniformly randomAHS. If 𝜋𝑐 received the
AHS was replaced in it) use the randomized valueAHS.
same ct𝑆 that 𝜋𝑠 sent, then we replace its AHS with the same
replacement as in 𝜋𝑠. All values derived from AHS in 𝜋𝑠 (and 𝜋𝑐, if
Any adversary A1 that can detect this change can be used to con-
struct a distinguisher B5 against the PRF security of HKDF.Extract
in its first argument as follows (which we view as “dual PRF security”
of HKDF.Extract).
When B5 needs to compute AHS in 𝜋𝑠 (or 𝜋𝑐, if 𝜋𝑐 received the
same ct𝑆 that 𝜋𝑠 sent), it queries its HKDF.Extract challenge oracle
on ss𝑆 and uses the response as AHS. If the response was the real
output, then B5 has exactly simulated 𝐺𝐴4 to A1; if the response
was a random value, then B5 has exactly simulated 𝐺𝐴5 to A1.
Thus:
Adv𝐺𝐴4A1 ≤ Adv𝐺𝐴5A1
+ Advdual-PRF-sec
HKDF.Extract,B5
.
Game A6 (random CAHTS, SAHTS, dAHS). In this game, in ses-
sion 𝜋𝑠, we replace the values CAHTS, SAHTS, and dAHS with
uniformly random values. If 𝜋𝑐 received the same ct𝑆 that 𝜋𝑠 sent
and is a partner to 𝜋𝑠 at stage 3 and 4, then we replace its CAHTS,
SAHTS, and dAHS with the same replacements as in 𝜋𝑠. If 𝜋𝑐 re-
ceived the same ct𝑆 that 𝜋𝑠 sent but is not a partner to 𝜋𝑠 at stage
3 and 4, then we replace its CAHTS, SAHTS, and dAHS with inde-
pendent uniformly random values. All values derived from dAHS
in 𝜋𝑠 (and 𝜋𝑐, if dAHS was replaced in it) use the newly randomized
values.
Any adversary A1 that can detect this change can be used to con-
struct a distinguisher B6 against the PRF security of HKDF.Expand
as follows.
When B6 needs to compute CAHTS, SAHTS, or dAHS in 𝜋𝑠
(or 𝜋𝑐, if 𝜋𝑐 received the same ct𝑆 that 𝜋𝑠 sent), it queries its
Post-Quantum TLS Without Handshake Signatures
CCS ’20, November 9–13, 2020, Virtual Event, USA
HKDF.Expand challenge oracle on the corresponding label and
transcript, and uses the responses. If the responses were the real
output, then B6 has exactly simulated 𝐺𝐴5 to A1; if the responses
were random values, then B6 has exactly simulated 𝐺𝐴6 to A1.
Note that if 𝜋𝑐 did receive the same ct𝑆 as was sent by 𝜋𝑠, but other
parts of the transcript were altered such that 𝜋𝑐 and 𝜋𝑠 are not
partners at stage 3 and 4, the adversary may be permitted to query
Reveal(𝜋𝑐, 3) or Reveal(𝜋𝑐, 4); but since the transcript in 𝜋𝑐 and 𝜋𝑠
is now different, the label input to the HKDF.Expand oracle for
CAHTS and SAHTS is different, so the simulation in B6 remains
good. Thus:
Adv𝐺𝐴5A1 ≤ Adv𝐺𝐴6A1
+ AdvPRF-sec
HKDF.Expand,B6
.
The stage-3 and stage-4 keys CAHTS and SAHTS are now uni-
formly random strings independent of everything else in the game.
Thus, the stage-3 and stage-4 keys have been shown to have wfs1
security.
Game A7 (random MS). In this game, in session 𝜋𝑠, we replace
the master secret MS with a uniformly random(cid:102)MS. If 𝜋𝑐 is a partner
in it) use the randomized value(cid:102)MS.
of 𝜋𝑠 at stage 4, then we replace its MS with the same replacement
as in 𝜋𝑠. If 𝜋𝑐 is not a partner of 𝜋𝑠 at stage 4 but did receive the
same ct𝑆 as 𝜋𝑠 sent, we replace 𝜋𝑐’s MS with a uniformly random
value. All values derived from MS in 𝜋𝑠 (and 𝜋𝑐, if MS was replaced
Any adversary A1 that can detect this change can be used to con-
struct a distinguisher B7 against the PRF security of HKDF.Extract
in its first argument as follows (which we view as “dual PRF security”
of HKDF.Extract).
When B7 needs to compute MS in 𝜋𝑠 (or 𝜋𝑐, if 𝜋𝑐 received the
same ct𝑆 that 𝜋𝑠 sent), it queries its HKDF.Extract challenge oracle
on ∅ and uses the response as MS. If the response was the real
output, then B7 has exactly simulated 𝐺𝐴6 to A1; if the response
was a random value, then B7 has exactly simulated 𝐺𝐴7 to A1.
Thus:
Adv𝐺𝐴6A1 ≤ Adv𝐺𝐴7A1
+ Advdual-PRF-sec
HKDF.Extract,B7
.
Game A8 (random CATS, fk𝒄, fk𝒔). In this game, in session 𝜋𝑠,
we replace the values CATS, fk𝑐, and fk𝑠 with uniformly random
values. If 𝜋𝑐 is a partner of 𝜋𝑠 at stage 5, then we replace its CATS,
fk𝑐, and fk𝑠 with the same replacements as in 𝜋𝑠. If 𝜋𝑐 is not a
partner of 𝜋𝑠 at stage 5 but did receive the same ct𝑆 as 𝜋𝑠 sent, we
replace 𝜋𝑐’s CATS, fk𝑐, and fk𝑠 with uniformly random value.
Any adversary A1 that can detect this change can be used to con-
struct a distinguisher B8 against the PRF security of HKDF.Expand
as follows.
When B8 needs to compute CATS, fk𝑐, or fk𝑠 in 𝜋𝑠 (or 𝜋𝑐, if
𝜋𝑐 received the same ct𝑆 that 𝜋𝑠 sent), it queries its HKDF.Expand
challenge oracle on the corresponding labels and transcripts, and
uses the responses. Note that if 𝜋𝑐 did receive the same ct𝑆 as was
sent by 𝜋𝑠, but other parts of the transcript were altered such that 𝜋𝑐
and 𝜋𝑠 are not partners at stage 5, the adversary may be permitted
to query Reveal(𝜋𝑐, 5); but since the transcript in 𝜋𝑐 and 𝜋𝑠 is now
different, the label input to the HKDF.Expand oracle for CATS is
different, so the simulation in B8 remains good. If the response was
the real output, then B8 has exactly simulated 𝐺𝐴7 to A1; if the
response was a random value, then B8 has exactly simulated 𝐺𝐴8
to A1. Thus:
Adv𝐺𝐴7A1 ≤ Adv𝐺𝐴8A1
+ AdvPRF-sec
HKDF.Expand,B8
.
The stage-5 key CATS is now a uniformly random string inde-
pendent of everything else in the game. Thus, the stage-5 key has
been shown to have wfs1 security.
Game A9 (random SATS). In this game, in session 𝜋𝑠, we replace
the value SATS with a uniformly random value. If 𝜋𝑐 is a partner of
𝜋𝑠 at stage 6, then we replace its SATS with the same replacement
as in 𝜋𝑠. If 𝜋𝑐 is not a partner of 𝜋𝑠 at stage 6 but did receive the
same ct𝑆 as 𝜋𝑠 sent, we replace 𝜋𝑐’s SATS with a uniformly random
value.
Any adversary A1 that can detect this change can be used to con-
struct a distinguisher B9 against the PRF security of HKDF.Expand
as follows.
When B9 needs to compute SATS in 𝜋𝑠 (or 𝜋𝑐, if 𝜋𝑐 received the
same ct𝑆 that 𝜋𝑠 sent), it queries its HKDF.Expand challenge oracle
on the corresponding label and transcript, and uses the responses.
Note that if 𝜋𝑐 did receive the same ct𝑆 as was sent by 𝜋𝑠, but
other parts of the transcript were altered such that 𝜋𝑐 and 𝜋𝑠 are
not partners at stage 6, the adversary may be permitted to query
Reveal(𝜋𝑐, 5); but since the transcript in 𝜋𝑐 and 𝜋𝑠 is now different,
the label input to the HKDF.Expand oracle for SATS is different, so
the simulation in B9 remains good. If the response was the real
output, then B9 has exactly simulated 𝐺𝐴8 to A1; if the response
was a random value, then B9 has exactly simulated 𝐺𝐴9 to A1.
Thus:
Adv𝐺𝐴8A1 ≤ Adv𝐺𝐴9A1
+ AdvPRF-sec
HKDF.Expand,B9
.
The stage-6 key SATS is now a uniformly random string inde-
pendent of everything else in the game. Thus, the stage-6 key has
been shown to have wfs1 security.
Analysis of game A9. In game A9, all stage keys in the tested
session are uniformly random and independent of all messages
in the game, so the hidden bit 𝑏 used in the tested session is now
independent all information sent to the adversary. Thus Adv𝐺𝐴9A1
= 0.
This concludes case A, yielding:
+ AdvPRF-sec
AdvIND-1CCA
KEMe,B2
+ AdvPRF-sec
HKDF.Expand,B4
+ AdvPRF-sec
HKDF.Expand,B6
+ AdvPRF-sec
HKDF.Expand,B8
HKDF.Extract,B3
+ Advdual-PRF-sec
+ Advdual-PRF-sec
+ AdvPRF-sec
Adv𝐺𝐴A1 ≤ 𝑛𝑠
HKDF.Extract,B5
HKDF.Extract,B7
HKDF.Expand,B9
Case B: No contributive partner, peer never
corrupted
Since in this case the tested session 𝜋 does not have a contributive
partner in stage 1 (and hence in any stage), stages aiming for wfs1
are outside the scope of this case, so we can assume that the tested
session 𝜋 is a client session.
Game B1 (guess peer). In this game, we guess the identity 𝑉 of the
intended peer of the test session, and abort if the guess is incorrect
(i.e., if 𝑉 ̸= 𝜋 .pid). This reduces the advantage of A1 by a factor of
the number of users 𝑛𝑢:
(cid:170)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:172) .
(cid:169)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:171)
Adv𝐺𝐵A1 ≤ 𝑛𝑢 · Adv𝐺𝐵1A1
.
CCS ’20, November 9–13, 2020, Virtual Event, USA
Schwabe, Stebila, Wiggers
Game B2 (long-term KEM). In this game, in session 𝜋 we replace
ally, in any sessions 𝜋′ of 𝑉 which received the same ct𝑆 that was
the static shared secret ss𝑆 with a uniformly random(cid:102)ss𝑆. Addition-
sent in 𝜋, we replace the static shared secret ss𝑆 with the same(cid:102)ss𝑆.
All values derived from ss𝑆 in 𝜋 use the randomized value(cid:102)ss𝑆.
Any adversary A1 that can detect this change can be used to
construct an adversary B10 against the IND-CCA security of KEMs
as follows.
B10 obtains the IND-CCA challenge pk★, ct★, and challenge
shared secret ss★. It uses pk★ as the long-term public key of 𝑉 .
In the tested session 𝜋, B10 uses ct★ as 𝜋’s encapsulation ct𝑆 in
message CKC, and uses ss★ as ss𝑆. In any session of 𝑉 , if the cipher-
text ct𝑆 received in the CKC message is not ct★, then B10 queries its
IND-CCA decapsulation oracle, and uses the response as ss𝑆; if the
received ciphertext ct𝑆 = ct★, B10 uses ss★ as ss𝑆. By the assump-
tions of Case B, there is never a Corrupt(𝑉 ) query that needs to be
answered. A1 terminates and outputs its guess of 𝑏 = 1 or 𝑏 = 1. If
ss★ was the real shared secret, then B10 has exactly simulated 𝐺𝐵1
to A1; if ss★ was a random value, then B10 has exactly simulated
𝐺𝐵2 to A1. Thus:
Adv𝐺𝐵1A1 ≤ Adv𝐺𝐵2A1
+ AdvIND-CCA
KEMe,B10
.
the secret AHS with a uniformly randomAHS. Additionally, in any
Game B3 (random AHS). In this game, in session 𝜋, we replace
sessions 𝜋′ of 𝑉 which received the same ct𝑆 that was sent in 𝜋, we
replace AHS with random values, maintaining consistency among
any sessions of 𝑉 that use the same ct𝑆 and the same dHS. All values
derived from AHS in these sessions use the newly randomized
values.
Any adversary A1 that can detect this change can be used to con-
struct a distinguisher B11 against the PRF security of HKDF.Extract
in its second argument as follows.
When B11 needs to compute AHS in 𝜋 or in any of the sessions
of 𝑉 that received the same ct𝑆 that was sent in 𝜋, it queries its
HKDF.Extract challenge oracle on that session’s dHS and uses the
response AHS. If the HKDF.Expand challenge oracle was returning
real outputs, then B11 has exactly simulated 𝐺𝐵2 to A1; if it was
returning random values, then B11 has exactly simulated 𝐺𝐵3 to
A1. Thus:
Adv𝐺𝐵2A1 ≤ Adv𝐺𝐵3A1