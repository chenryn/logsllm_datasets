approach (Section III-C), and illustrate the approach on an
example (Section III-D).
A. Threat Model
Attackers can be scripts in the DOM, extension cores,
and extension (content) scripts. (A Chromium extension is
composed of an extension core, of which only one instance
is maintained in the browser, and one or more content scripts
that are injected by the browser into loaded pages.) We assume
an attacker is associated with a label (policy) that describes its
capabilities, and that this label accurately describes the desired
restrictions on the attacker’s behavior. An attack is successful
if the attacker is able to violate this policy, e.g., learn secrets
that belong to the user or other browser extensions or inﬂuence
access to sensitive resources. This notion of attackers is
standard in information-ﬂow systems. Specifying such policies
correctly, e.g., without unwittingly giving entities the capability
to access sensitive information, is often a challenging user-
interface issue [39], but is largely orthogonal to the design of
the information-ﬂow enforcement mechanism.
We assume that the attacker can interact with other browser
components only via standard browser and JavaScript APIs,
and does not have out-of-band access to low-level system
behaviors such as power consumption or the scheduler. We
do not consider leaks through timing-based covert channels.
B. Policy Speciﬁcation
Following prior work on OS-level DIFC [32], [33], in
our approach each browser entity is associated with an
information-ﬂow label, specifying allowed ﬂows of informa-
tion between entities. (We use entity instead of component,
as the latter is overloaded in this context.) A novelty of
our approach is the breadth of entities it encompasses (see
Figure 1). These fall
into two categories: (1) web pages
and their DOM trees, page scripts, and extensions (and their
instances)—entities for which authors and the user can already
specify policies (e.g., via CSPs); (2) APIs (e.g., for network
requests), shared browser state (e.g., history), and events (e.g.,
mouse clicks)—entities to which the browser controls access
via simple, ﬁxed policies.
Our approach attaches to each of these entities a policy
label. The label describes the privileges the user, author, or
browser confers on that entity, as well as potential reductions
in those privileges that result from interactions with other
entities. Reference monitors examine labels when requests
(including messages or calls) cross entity boundaries. They
prevent requests that are not consistent with the caller’s and
callee’s labels, and, when appropriate, augment the labels of
callees to track the ﬂow of sensitive information.
1) Information-ﬂow Labels: We next describe the structure
of and features supported by the labels in the system.
Basic labels An information-ﬂow label, written (S , I , D),
is composed of a secrecy label S, an integrity label I , and
a declassiﬁcation label D. The basic secrecy label is a set
of secrecy tags {s1, . . . , sn}. Each secrecy tag represents an
origin of a secret. We treat the hostname parts of URLs,
extension IDs, and the user operating the browser (notated as
the tag user) as origins. The integrity label is a set of integrity
tags {i1, . . . , in}. Each integrity tag represents the privilege
to access a sensitive resource (namely, APIs). Even though
these tags are reminiscent of permissions, our enforcement
mechanism treats them in such a way that it can prevent the
privilege escalation that commonly occurs in permission-based
systems. The declassiﬁcation label is a set of capabilities for
endorsement (+i), declassiﬁcation (−s), and reclassiﬁcation
3
Declassiﬁcation, reclassiﬁcation, and endorsement Declas-
siﬁcation and endorsement capabilities allow an entity (e.g.,
an extension core) to circumvent constraints that it would
otherwise incur because of its secrecy and integrity tags.
Declassiﬁcation is a powerful (and dangerous) operation, and
declassiﬁcation capabilities should be granted to entities only
judiciously. At the same time, declassiﬁcation is necessary,
since some extensions, like the password manager, collect
many secrets, yet their functionality requires that they (selec-
tively) copy those secrets into arbitrary web pages.
In our example, the extpwdMgr core has the −∗ .extpwd
capability. This is to ensure that no matter how many secrecy
tags like someSite.extpwd it accumulates in its secrecy label
as a result of saving passwords, it is still able to send data
(passwords) to individual web pages (e.g., cnn.com). Without
declassiﬁcation, those secrecy tags in extpwdMgr’s label would
cause the label check to fail, since those tags are not
in
cnn.com’s secrecy tag, including its ceiling. Declassiﬁcation
(and reclassiﬁcation and endorsement) are used only when a
label check would otherwise fail; they don’t affect an entity’s
secrecy and integrity tags beyond the label check.
Reclassiﬁcation is a weaker form of declassiﬁcation: the
s1→ s2 reclassiﬁcation tag indicates that a secrecy tag s1 can
be converted (for the purpose of a label check) to tag s2.
Endorsement tags are similar to declassiﬁcation tags. To
protect the local storage API, we give the API the integrity
label {localStorage}; only entities that have localStorage in
their integrity label, or can add it via endorsement, can use
it. Hence, we give the extpwdMgr core the +localStorage
capability, allowing it to elevate its privileges sufﬁciently to
use the local storage API. As with de- and reclassiﬁcation,
endorsement only enables a label check to succeed, and has
no persistent effect on the integrity tags in a label.
2) Policy Composition: An interesting problem that arises
in the browser setting is composing policies created by dif-
ferent principals. When an entity A (e.g., a web page) loads
another entity B (e.g., an embedded iframe) from a source
other than where A comes from, B may come with its own
policy as to what kind of secret B can receive, while at the
same time A may wish to constrain B’s capability to protect
itself from B. Browsers today have ﬁxed schemes for handling
such (potential) conﬂicts; e.g., if a page A loads a page B in
an iframe, B’s capabilities to load external resources are not
restricted by A’s CSP.
Rather than advancing a single “correct” option for how
to combine conﬂicting policies, we allow the enclosing entity
A to specify whether the policy (label) applied to B should
allow (1) the union of what A’s and B’s labels allow, (2) the
intersection; or simply (3) A’s policy or (4) B’s desired policy.
We call this a generalized CSP.
C. Enforcement
Enforcing policies in our approach has two aspects: as-
signing labels to entities when they are created and allowing
communication between two entities only when supported by
labels. We discuss them here in the abstract; more detail about
implementation aspects is given in Section V.
Assigning labels
Labels are assigned in several ways. For
entities like web pages and extensions, the labels are derived
from the policy (e.g., CSP, permissions) with which these are
already annotated, but also reﬂect who created the entity. For
example, if a user caused the browser to load cnn.com, and
cnn.com’s CSP permits only the extension extpwdMgr to run and
permits third-party content only from ad.com, then cnn.com’s
label might be
S = F ({cnn.user},{cnn.user, cnn.extpwd, ad.∗}),
I = {}, D = {+network, cnn.∗→ ad.∗}
Generating a label for a new entity may involve policy
composition, e.g., for the content of an iframe, whose label
may reﬂect (based on the browser’s or user’s policies) some
combination of the policies expressed in the iframed page’s
CSP and the policies of the host page (see Section III-B2).
Entities like APIs are given labels whose integrity tags
correspond to the permissions with which they are protected.
To implement built-in browser policies like the same-origin
policy, labels on APIs (e.g., for accessing the network) can
depend on the parameters of the API call (e.g., the hostname
of the site to be accessed).
Other entities in the browser, like button-click events, are
assigned labels whose purpose is simply to record which
secrets (expressed as secrecy tags) were in possession of the
entity that created them. This serves as a way of tracking the
ﬂow of information through entities that themselves have no
speciﬁc policy, but that could otherwise be used as channels
between entities whose policy forbids them from communi-
cating. For example, a button-click event would be given the
union of the secrecy tags of the DOM element that housed
the button and the secrecy tags of the entity that caused the
event to be created (e.g., user if the user clicked on the button
or the secrecy tags of the script that manufactured the click
event); later, this label might prevent the button-click even from
being received by an extension content script that doesn’t have
permission to receive, e.g., user input.
In our approach, a user inspects and approves labels for
entities such as extensions, and, therefore, prevents these en-
tities from being assigned inappropriate policy; e.g., allowing
the entity to access and declassify all data. An entity can only
inﬂuence the label of another entity by sending data to it; it is
not allowed to directly set the labels of other entities.
Checking labels Checking labels is conceptually straightfor-
ward: a reference monitor must mediate every path between
entities and compare a sender’s label (S1, I1, D1) to a receiver’s
label (S2, I2, D2). Putting together the aspects of labels dis-
cussed in Section III-B1, communication should be allowed
only if: (1) there exists a S(cid:48)
1 obtained by applying through
declassifying or reclassifying S1 as permitted by D1 and a S(cid:48)
2
obtained by raising S2 (if S2 is a ﬂoating label) up to the
point permitted by its ceiling, such that S(cid:48)
2; (2) there
exists a I (cid:48)
1 obtained by applying endorsement capabilities in
1 ⊇ I2. If communication was allowed as a
D1 to I1, and I (cid:48)
result of raising the receiver’s secrecy label S2 to S(cid:48)
2, then the
receiver’s secrecy label after the call will remain S(cid:48)
2.
1 ⊆ S(cid:48)
D. Example Walkthrough
We next show the initial
labels for our example from
Section I-A, and walk through the checks and label updates as
5
I = {network} D = {user → ∗.user}
S = C({user})
(cid:96)user
S = F ({},{∗.extPwd,∗.user})
(cid:96)Pwd 0
I = {} D = {+localStorage,−∗.extPwd,−∗.user}
(cid:96)PwdCS0 S = F ({},{†.extPwd,†.user})
(cid:96)PwdLS 0 S = F ({},{∗.user,∗.extPwd})
I = {localStorage} D = {}
S = F ({},{cnn.extEve, evil.extEve, cnn.user, evil.user})
(cid:96)Eve0
I = {} D = {+network}
(cid:96)EveCS 0 S = F ({},{cnn.extEve, cnn.user, evil.extEve, evil.user})
I = {} D = {}
I = {} D = {+network}
labels for the user ((cid:96)user ),
Fig. 2: Initial
the password manager
extension’s core ((cid:96)Pwd 0), content scripts ((cid:96)PwdCS 0), and local storage
((cid:96)PwdLS 0), and exteve’s core and content scripts ((cid:96)Eve0, (cid:96)EveCS 0). For
brevity, we omit additional labels that give the user access to other
APIs and cnn.com the ability to load content from partner sites.
a user loads a web page.
Initial labels The initial labels of the built-in user principal
and extpwdMgr’s and exteve’s cores and content scripts are
shown in Figure 2. The user label (cid:96)user cannot change, and
denotes that user input contains secrets (user) that must be
protected, but the user can choose to weaken that protection
(user → ∗.user), e.g., by inputting them to web pages. The
extension cores ((cid:96)Pwd 0, (cid:96)Eve0 ) and content scripts ((cid:96)PwdCS0 ,
(cid:96)EveCS 0) start with ﬂoating secrecy labels that convey that the
extensions as yet possess no secrets, but are allowed to be
tainted with secrets from any URL ((cid:96)PwdCS0 ) or from select
the † wildcard
URLs ((cid:96)EveCS 0). As previously explained,
in (cid:96)PwdCS0 will allow each of extpwdMgr’s content script
instances to ﬂoat exactly once, after which its secrecy label will
become ﬁxed. The local storage of extpwdMgr’s initial label is
(cid:96)PwdLS 0, indicating that it has no secrets yet, but can receive
any secrets that either the user or extpwdMgr enters to a page.
To make exteve potentially more dangerous, we allow it to
access the network; we will show that this is not enough for
exteve to steal passwords and send them to her server.
Loading a page
Suppose the user opens a new tab, enters
a cnn.com URL, and a page with a login form is loaded. The
tab’s label will be automatically assigned as
(cid:96)Tab S = F ({user},{∗.∗}), I = {}, D = {}
to indicate that the tab was created by the user and could
become tainted by other secrets. The network request for the
cnn.com URL will be protected (by the browser) by the label
(cid:0)C({cnn.∗}),{network},{}(cid:1); since the URL is provided by
the user and the user’s label permits reclassiﬁcation of the
user secrecy tag to cnn.user, the request will be allowed.
If cnn.com’s CSP allows content from an ad network and
Google, the secrecy label of cnn.com’s top-level DOM node,
denoted (cid:96)doc1 , will reﬂect that it contains content from cnn.com
that was accessed as a result of user input and that the page
can receive information from the ad network and Google. Its
declassiﬁcation label will similarly include sufﬁcient reclassi-
ﬁcation capabilities to allow cnn.com’s data to be sent to these
sites (e.g., via HTTP GET requests).
(cid:96)doc1 S = F ({cnn.user},{cnn.∗, ad.∗, google.∗}),
I = {}, D = {+network, cnn.∗→ ad.∗, cnn.∗→ google.∗}
6
Other DOM nodes at this point have the same label as (cid:96)doc1 .
Next, the browser injects content scripts into the DOM;
their secrecy labels ﬂoat to allow them to access page secrets.
(cid:96)PwdCS 1 S = F ({cnn.extPwd},{cnn.extPwd, cnn.user})
{cnn.extEve, evil.extEve, cnn.user, evil.user})
(cid:96)EveCS 1
I = {}, D = {}
S = F ({cnn.extEve},
I = {}, D = {+network}
Entering a password
Suppose the user inputs a username
and password into the login form. This incurs a check that
data may ﬂow from (cid:96)user to (cid:96)domNd1 , the label of the login
form’s DOM node, which is initially the same as (cid:96)doc1 . The
reclassiﬁcation tag (user→∗.user) in (cid:96)user allows this check to
succeed; the destination label ((cid:96)domNd1 ) remains unchanged.
The password manager content script reads the contents of
those nodes. The content script’s label ﬂoats to reﬂect that the
content script has been tainted with secrets read from the DOM
nodes. exteve’s content script is similarly allowed to read the
DOM nodes; its label similarly ﬂoats.
(cid:96)PwdCS 2 S = F ({cnn.extPwd, cnn.user},{cnn.extPwd, cnn.user})
(cid:96)EveCS 2 S = F ({cnn.extEve, cnn.user},
I = {}, D = {}
{cnn.extEve, evil.extEve, cnn.user, evil.user})
I = {}, D = {+network}
Suppose exteve tries to send the password to evil.com. The