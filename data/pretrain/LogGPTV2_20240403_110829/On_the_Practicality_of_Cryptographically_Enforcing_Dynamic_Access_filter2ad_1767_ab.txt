threshold/secret splitting schemes can be used to distribute trust
amongst several individuals. However, such schemes would
increase the cryptographic costs of operations associated with
the master key.
IV. CONSTRUCTION
While cryptographic access control enforcement has been
studied in the past, the focus has been almost entirely on
techniques that are best suited for mostly static scenarios
lacking a trusted reference monitor (e.g., [31], [49]), in which
the policies to be enforced and ﬁles to be protected change
very little over time. As such, the particulars associated with
securely managing policy change and the associated overheads
have been largely under-explored. In this section, we begin
with a strawman construction for cryptographic access control
enforcement, and use it to highlight a variety of limitations and
design considerations that must be addressed. We conclude with
a detailed description of our IBE/IBS and PKI constructions
for RBAC0, which address these issues.
A. A Strawman Construction
At ﬁrst blush, it seems conceptually simple to provision a
cryptographically-enforced RBAC0 system. We now overview
such a system, which will allow us to highlight a variety of
issues that arise as a result. This strawman construction will
make use of IBE/IBS; the use of a more traditional PKI is a
straightforward translation. We assume that the administrator
holds the master secret keys for the IBE/IBS systems.
• Registration. Each user, u, of the system must carry out an
initial registration process with the administrator. The result
of this process is that the user will obtain identity-based
encryption and signing keys ku ← KeyGenIBE(u) and
su ← KeyGenIBS(u) from the administrator.
823823
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:04 UTC from IEEE Xplore.  Restrictions apply. 
• Role Administration. For each role, r, the administrator
will generate identity-based encryption and signing keys
kr ← KeyGenIBE(r) and sr ← KeyGenIBS(r). For
each user u that is a member of r (i.e., for each (u, r) ∈ U R
in the RBAC0 state), the administrator will create and upload
a tuple of the form:
(cid:2)RK, u, r, EncIBE
u
SU (cid:3).
(kr, sr), SignIBS
This tuple provides u with cryptographically-protected access
to the encryption and signing keys for r, and is signed
by the administrator. Here, SignIBS
SU at the end of the
tuple represents an IBS signature by identity SU (the
administrator), and RK is a sentinel value indicating that this
is a role key tuple.
• File Administration. For each ﬁle f to be shared with a
role r (i.e., for each (r,(cid:2)f, op(cid:3)) ∈ P A in the RBAC0 state),
the administrator will create and upload a tuple:
(cid:2)F, r,(cid:2)f n, op(cid:3), EncIBE
r
SU (cid:3).
(f ), SU, SignIBS
This tuple contains a copy of f that is encrypted to members
of r. Here, f n represents the name of the ﬁle f, while op is
the permitted operation—either Read or Write. As before,
SU is a signature by the administrator, and F is a
SignIBS
sentinel value indicating that this is a ﬁle tuple.
• File Access. If a user u who is authorized to read a ﬁle f
(i.e., ∃r : (u, r) ∈ U R ∧ (r,(cid:2)f, Read(cid:3)) ∈ P A) wishes to do
so, she must (i) download an RK tuple for the role r and
an F tuple for f; (ii) validate the signatures on both tuples;
(iii) decrypt the role key kr from the RK tuple using their
personal IBE key ku; and (iv) decrypt the ﬁle f from the F
tuple using the role key kr.
Writes to a ﬁle are handled similarly. If u is authorized to
write a ﬁle f via membership in role r (i.e., ∃r : (u, r) ∈
U R ∧ (r,(cid:2)f, Write(cid:3)) ∈ P A), she can upload a new F tuple
(cid:2)F, r,(cid:2)f n, Write(cid:3), EncIBE
(cid:3). If the signature
(cid:2)
), SignIBS
authorizing the write (SignIBS
) can be veriﬁed by the cloud
provider, the existing F tuple for f will be replaced.
This construction describes a cryptographic analog to
RBAC0. The U R relation is encoded in the collection of RK
tuples, while the P A relation is encoded in the collection
of F tuples. The authorization relation of RBAC0 is upheld
cryptographically: to read a ﬁle f, a user u must be able to
decrypt a tuple granting her the permissions associated with a
role r, which can be used to decrypt a tuple containing a copy
of f encrypted to role r.
B. Design Considerations
(f
r
r
r
While conceptually straightforward, the strawman construc-
tion is by no means a complete solution. We now use this
construction as a guide to discuss a number of design tradeoffs
that must be addressed to support cryptographic enforcement
of dynamic RBAC0 states.
PKI vs. IBE. Basing an RBAC0 system on IBE and IBS
allows for a simple mapping from encryption keys to roles
in RBAC0: The name of the role is the public-key used to
encrypt under that role. This is conceptually simpler than what
is achieved by traditional public key or symmetric encryption,
which may help limit certain key management issues in soft-
ware. IBE-based constructions also generalize to richer access
control models (e.g., enforced using HIBE or ABE), which
we explore in Section VI. That said, rich infrastructure has
been developed to support public key cryptography, which may
make the systems support issues inherent in these constructions
easier to manage. To this end, we present constructions based
on both IBE and public key cryptography.
Inefﬁciency Concerns. The strawman construction exhibits
two key issues with respect to efﬁciency. First, IBE (like
public-key cryptography) is not particularly well-suited for
the bulk encryption of large amounts of data. As such, the
performance of this construction would suffer when large ﬁles
are shared within the system. Second, this construction requires
a duplication of effort when a ﬁle, say f, is to be shared with
multiple roles, say r1 and r2. That is, f must actually be
encrypted twice: once with r1 and once with r2. We note that
this also leads to consistency issues between roles when f is
updated. Fortunately, both of these concerns can be mitigated
via the use of hybrid cryptography. Rather than storing F tuples
of the form:
(cid:2)F, r,(cid:2)f n, op(cid:3), EncIBE
the
instead
store
r
SU (cid:3)
(f ), SU, SignIBS
tuples, where
following
can
We
k ← GenSym is a symmetric key:
(cid:2)FK, r,(cid:2)f n, op(cid:3), EncIBE
SU (cid:3)
(k), SU, SignIBS
(cid:2)F, f n, EncSym
k
r
(f ), r, SignIBS
r
(cid:3)
The FK tuples are similar to the ﬁle encryption tuples in the
strawman construction, except that the ciphertext portion of
the tuple now includes an IBE-encrypted symmetric key rather
than an IBE-encrypted ﬁle. F tuples contain a symmetric-key-
encrypted (using an authenticated mode) version of the ﬁle f,
and are IBS-signed using the role key of the last authorized
updater. This adjustment to the metadata improves the efﬁciency
of bulk encryption by using symmetric-key cryptography, and
greatly reduces the duplication of effort when sharing a ﬁle
with multiple roles: a single F tuple can be created for the ﬁle
along with multiple FK tuples (i.e., one per role).
Handling Revocation. The strawman construction can
neither revoke a permission from a role, nor remove a user
from a role. The former case can be handled by versioning the
F and FK tuples stored within the system, and the latter case
handled by adding role versioning to the role key tuples and
FK tuples in the system:
(cid:2)RK, u, (r, vr), EncIBE
(cid:2)FK, r,(cid:2)f n, op(cid:3), v, EncIBE
u
(cid:2)F, f n, v, EncSym
k
SU (cid:3)
(k(r,vr), s(r,vr)), SignIBS
SU (cid:3)
(r,vr)(k), SU, SignIBS
(r,vr)(cid:3)
(f ), (r, vr), SignIBS
Here, v represents a version number for the symmetric key used
to encrypt a ﬁle. Role names have been replaced with tuples
that include the role name (e.g., r), as well as a version number
(vr). Removing a permission from a role entails re-keying and
824824
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:04 UTC from IEEE Xplore.  Restrictions apply. 
re-encrypting the ﬁle (i.e., creating a new F tuple), and creating
new FK tuples for each role whose access to the ﬁle has not
been revoked. The roles increment their previous role number.
Similarly, removing a user u from a role r entails deleting
u’s RK tuple for r, generating new role keys for r (with an
incremented version number) and encoding these into new RK
tuples for each user remaining in r, and re-versioning all ﬁles
to which the role r holds some permission. We note that both
of these processes must be carried out by an administrator,
as only administrators can modify the RBAC0 state. There is
much nuance to these processes, and we defer a full discussion
to Section IV-C.
Online, Lazy, and Proxy Re-Encryption. Supporting revo-
cation leads to an interesting design choice: should ﬁles be re-
encrypted immediately upon re-key, or lazily re-encrypted upon
their next write? From a conﬁdentiality standpoint, forcing an
administrator—or some daemon process running on her behalf—
to re-encrypt ﬁles immediately upon re-key is preferential, as
it ensures that users who have lost the ability to access a
ﬁle cannot later read its contents. On the other hand, this
comes with a potentially severe efﬁciency penalty in the
event that many ﬁles are re-keyed due to changes to some
role, as access to these ﬁles must be locked while they are
downloaded, re-encrypted, and uploaded. In this paper, we opt
for a lazy re-encryption strategy, in which ﬁles are re-encrypted
by the next user to write to the ﬁle (cf., Section IV-C). We
note that such a scheme is not appropriate for all scenarios,
but substantially reduces the computational burden on the
cloud when allowing for dynamic updates to the RBAC0 state
(cf., Section V-D). Similarly, if a client is powerful enough
to download a source ﬁle and decrypt it to view the material,
it presumably is powerful enough to perform the roughly
computationally equivalent operation of re-encrypting it. Note
that a single client is unlikely to need to re-encrypt large
numbers of ﬁles, unlike the cloud if a lazy re-encryption strategy
were not used. Adapting our construction to instead use online
re-encryption is a straightforward extension.
While appealing on the surface, IBE schemes that support
proxy re-encryption, or revocation (e.g., [8], [32]) are not
suitable for use in our scenario. These types of schemes
would seemingly allow us to remove our reliance on lazy
re-encryption, and have the cloud locally update encryptions
when a permission is revoked from a role, or a role from a
user. This would be done by creating an updated role name,
using proxy re-encryption to move the ﬁle from the old role
name to the updated one, and then revoking all keys for the
old ﬁle. The signiﬁcant issue, here, is that such schemes do
not address how one would use them with hybrid encryption.
We do not believe that a reasonable threat model can assume
that even a limited adversary would be unable to cache all the
symmetric keys for ﬁles she has access to. Thus, using proxy
re-encryption on the RK and FK tuples and not the F tuples
would allow users to continue to access ﬁles to which their
access has been revoked, and so our construction would still
require online or lazy re-encryption of the ﬁles themselves.
As a ﬁnal note, we acknowledge that key-homomorphic
PRFs [12] could be combined with revocation and proxy re-
encryption schemes, solving the revocation problem completely
on the cloud in the hybrid model. However, current technology
does not solve the computational effort, as costs of current
key-homomorphic PRFs are comparable or greater than the
IBE and PKI technologies in consideration.
Multiple Levels of Encryption. We note that our construc-
tion has levels of indirection between RK, FK, and F tuples that
mirror the indirection between users, roles, and permissions
in RBAC0. This indirection could be ﬂattened to decrease the
number of cryptographic operations on the critical path to ﬁle
access; this would be akin to using an access matrix to encode
RBAC0 states. While this is possible, it has been shown to
cause computational inefﬁciencies when roles’ memberships
or permissions are altered [27]; in our case this inefﬁciency
would be ampliﬁed due to the cryptographic costs associated
with these updates.
Other Issues and Considerations. Our constructions are
measured without concern for concurrency-related issues that
would need to be addressed in practice. We note, however, that
features to handle concurrency would be largely independent of
the proposed cryptography used to enforce the RBAC0 policies.
As such, we opt for the analysis of the conceptually-simpler
schemes presented in this paper. Finally, our analysis is agnostic
to the underlying achieved security guarantees and hardness
assumptions of the public-key and IBE schemes. Production
implementations would need to consider these issues.
C. Detailed IBE/IBS Construction
We now ﬂesh out the strawman and previously-discussed
enhancements. This produces a full construction for enforcing
RBAC0 protections over an evolving collection managed by a
minimally-trusted cloud storage provider.
1) Overview and Preliminaries: We reiterate that the admin-
istrators act as the Master Secret Key Generator of the IBE/IBS
schemes. Users add ﬁles to the system by IBE-encrypting these
ﬁles to the administrators, using hybrid cryptography and F
tuples. Administrators assign permissions (i.e., (cid:2)f ile, op(cid:3) pairs)
to roles by distributing symmetric keys using FK tuples. Role
keys are distributed to users using RK tuples. Recall the format
of these tuples is as follows:
(cid:2)RK, u, (r, vr), EncIBE
(cid:2)FK, r,(cid:2)f n, op(cid:3), v, EncIBE
SU (cid:3)
(k(r,vr), s(r,vr)), SignIBS
SU (cid:3)
(r,vr)(k), SU, SignIBS
(r,vr)(cid:3)
(f ), (r, vr), SignIBS
(cid:2)F, f n, v, EncSym
u
k
Note that symmetric keys and role keys are associated with
version information to handle the cases where a user is removed
from a role or a permission is revoked from a role.
We assume that ﬁles have both read and write permissions
associated with them. However, we cannot have write without
read, since writing requires decrypting the ﬁle’s symmetric
key, which then can be used to decrypt and read the stored
ﬁle. Thus we only assign either Read or RW, and only revoke
Write (Read is retained) or RW (nothing is retained). When a
user wishes to access a ﬁle, she determines which of her roles
825825
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:04 UTC from IEEE Xplore.  Restrictions apply. 
has access to the permission in question. She then decrypts
the role’s secret key using her identity, and then decrypts the
symmetric key for the ﬁle using the role’s secret key, and ﬁnally
uses the symmetric key to decrypt the symmetrically-encrypted
ciphertext in question.
2) Full Construction: Figure 2 lists every RBAC0 operation
and shows how each can be implemented using IBE, IBS, and
the metadata structures described previously. This ﬁgure uses
the following notation: u is a user, r and q are roles, p is a
permission, f n is a ﬁle name, f is a ﬁle, c is a ciphertext
(either IBE or symmetric), sig is an IBS signature, and v is
a version number. Users are listed in a ﬁle called USERS.
The identity corresponding to a role r is (r, v), where v is a
positive integer representing the version number. We use vr to
denote the latest version number for role r. Roles and versions
are stored as (r, vr) pairs in a ﬁle called ROLES, which is
publicly viewable and can only be changed by the administrator.
Similarly, we use vf n to denote the latest version number for
the ﬁle with name f n. Filenames and versions are stored
as (f n, vf n) pairs in a ﬁle called FILES, which is publicly
viewable and can only be changed by the admin or reference
monitor (R.M.). SU is the superuser identity possessed by the
administrators. We use “−” to represent a wildcard. SignIBS
at the end of a tuple represents an IBS signature by identity id
over the rest of the tuple. The subscript after an operation name
identiﬁes who performs the operation if it is not performed by
an administrator.
id
Many operations described in Fig. 2 are straightforward
given the discussion earlier in this section. To demonstrate
some of the more complicated aspects of this construction,
we now describe the procedure to revoke a role from a user,
which demonstrates several types of re-keys as well as our
notion of lazy re-encryption. The procedure for removing a
user u from a role r consists of three steps: (i) re-keying r,
(ii) re-encrypting existing ﬁle keys stored in FK tuples to the
new role key, and (iii) re-keying all ﬁles accessible by r.
To re-key a role r, we must transition from (r, vr) to
(r, vr + 1), generating new IBE keys for this new role version.
The old RK tuples for r are deleted, and each remaining
(cid:2) of role r is given the new RK tuples of the
member u
SU (cid:3), where c contains
form of (cid:2)RK, u
(cid:2)
, (r, vr + 1), c, SignIBS
(cid:2)’s identity key. Next,
the new IBE/IBS keys encrypted to u
all (symmetric) ﬁle keys encrypted to (r, vr) in FK tuples are
replaced with ﬁle keys encrypted to (r, vr + 1). This allows
the remaining members of r to retain access to existing ﬁles,
while preventing the revoked user u from accessing any ﬁle
keys that he has not already decrypted and cached.
Finally, each ﬁle to which r has access must be re-keyed
to prevent u from accessing future updates to this ﬁle using
cached symmetric keys. For each ﬁle f, a new symmetric
key is generated via GenSym. This key is then encrypted
(cid:2) that has access to f (including r), and new
for each role r
SU (cid:3) are uploaded
FK tuples (cid:2)FK, r
SU (cid:3) tuples. Here,
alongside existing (cid:2)FK, r
v + 1 is the new ﬁle key version, c is the existing encrypted
(cid:2) is the new ﬁle key IBE-encrypted to identity r
(cid:2).
ﬁle key, and c
, SignIBS
,(cid:2)f, op(cid:3), v, c, SignIBS
,(cid:2)f, op(cid:3), v + 1, c
(cid:2)
(cid:2)
(cid:2)
The next time f is read, the key contained in c will be used for
(cid:2)
decryption; the next time f is written, the key contained in c
will be used for encryption. This process obviates the need for
a daemon to re-encrypt all ﬁles at revocation time, but prevents
the revoked user u from accessing any future modiﬁcations to
these ﬁles using cached symmetric ﬁle keys.
D. PKI Construction Overview
We now provide an intuition for how traditional public-key
cryptography can be used in place of IBE/IBS to implement
RBAC0. Due to space limitations, full details will be left
to a technical report version [28] of this paper. In our PKI
construction, public-key encryption and signatures take the
place of IBE and IBS. Each role is assigned a public/private
key pair rather than IBE/IBS keys. The primary difference
between the IBE and PKI constructions is that IBE/IBS
clients are given escrowed IBE/IBS identity private keys by
the role administrator, while PKI clients generate their own
public/private key pairs and upload their public keys. Note that
in both systems, the administrators have access to all of the
roles’ private keys.
V. ANALYSIS
We now describe our evaluation of the suitability of IBE/IBS
and PKI constructions for enforcing RBAC0 access controls.
We utilize a workﬂow similar to that proposed in [26], in which
we ﬁrst evaluate the candidates’ expressive power (i.e., ability
to represent the desired policy as it evolves), then evaluate the
cost of using each candidate using Monte Carlo simulation
based on initial states obtained from real-world datasets.
A. Qualitative Analysis
We analyze the correctness and security guarantees of
our implementations using the access control expressiveness
framework known as parameterized expressiveness [36]. In
particular, we ensure that the implementation properties of
correctness, AC-preservation, and safety are preserved by these
constructions. Correctness ensures that the RBAC0 state’s
image in our constructions answers queries exactly as the
original RBAC0 system would, and that the same end state
is reached by either executing an RBAC0 action natively and
mapping the result into our construction or by mapping the
initial RBAC0 state and executing the action’s image in our
construction. AC-preservation says that the RBAC0 system’s
authorization requests must be asked directly in the simulating
system. For instance, the policy must be simulated in such
a way that the RBAC0 request “Can subject s read ﬁle f?”
is asked directly in the simulated state rather than being
translated to any other queries. Finally, safety ensures that our
constructions do not grant or revoke unnecessary permissions
during the simulation of a single RBAC0 command. That is, the
intermediate states through which our constructions travel while
implementing an RBAC0 command do not add or remove any
granted requests except those that must be added or removed as
determined by the start and end states of the RBAC0 command.
826826
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:04 UTC from IEEE Xplore.  Restrictions apply. 
addU (u)
– Add u to USERS
– Generate IBE private key ku ← KeyGen
– Give ku and su to u over private and authenticated channel
key su ← KeyGen
IBS(u) for the new user u
IBE(u) and IBS private
delU (u)
– For every role r that u is a member of:
∗ revokeU (u, r)
(cid:5)
(cid:4)F, f n, 1, Enc
(cid:4)f n, RW(cid:5), 1, Enc
Sym
k
IBE
SU (k), u, Sign
Sym
(f ), u, Sign
IBS
u
addPu(f n, f )
– Generate symmetric key k ← Gen
(cid:4)FK, SU,
– Send
– The R.M. receives (cid:4)F, f n, 1, c, u, sig(cid:5) and (cid:4)FK, SU, (cid:4)f n, RW(cid:5),
(cid:2)(cid:5) and veriﬁes that the tuples are well-formed and the
1, c
signatures are valid, i.e., Ver
Ver
stores (cid:4)F, f n, 1, c, u, sig(cid:5) and (cid:4)FK, SU, (cid:4)f n, RW(cid:5), 1, c
– If veriﬁcation is successful, the R.M. adds (f n, 1) to FILES and
(cid:2)(cid:5)
(cid:2), u, sig
((cid:4)F, f n, 1, c, u(cid:5), sig) = 1 and
(cid:2), u(cid:5), sig
((cid:4)FK, SU, (cid:4)f n, RW(cid:5), 1, c
and
(cid:5) to R.M.
(cid:2), u, sig
(cid:2)) = 1.
IBS
u
IBS
u
IBS
u
delP (f n)
– Remove (f n, vf n) from FILES
– Delete (cid:4)F, f n, −, −, −, −(cid:5) and all (cid:4)FK, −, (cid:4)f n, −(cid:5), −, −, −, −(cid:5)
addR(r)
– Add (r, 1) to ROLES
– Generate IBE private key k(r,1) ← KeyGen
– Send (cid:4)RK, SU, (r, 1), Enc
delR(r)
– Remove (r, vr) from ROLES
– Delete all (cid:4)RK, −, (r, vr), −, −(cid:5)
– For all permissions p = (cid:4)f n, op(cid:5) that r has access to:
IBE((r, 1)) and IBS
(cid:3)
SU (cid:5) to R.M.
private key s(r,1) ← KeyGen
IBS((r, 1)) for role (r, 1)
(cid:2)
IBS
k(r,1), s(r,1)
, Sign
IBE
SU
∗ revokeP (r, (cid:4)f n, RW(cid:5))
assignU (u, r)
– Find (cid:4)RK, SU, (r, vr), c, sig(cid:5) with Ver
– Decrypt keys (k(r,vr ), s(r,vr )) = Dec
– Send (cid:4)RK, u, (r, vr), Enc
sig) = 1
IBE
u
(cid:2)
R.M.
IBS
SU ((cid:4)RK, SU, (r, vr), c(cid:5),
IBE
kSU
(c)
k(r,vr ), s(r,vr )
(cid:3)
, Sign
IBS
SU (cid:5) to
(cid:2)
IBS
IBS
IBS
Sign
IBE
u(cid:2)
IBS((r, vr + 1))
(cid:2) (cid:6)= u and Ver
IBE((r, vr + 1)),
SU ((cid:4)RK, u
(cid:2),
(cid:3)
(cid:2), (r, vr), c, sig(cid:5) with u
(cid:2), (r, vr + 1), Enc
revokeU (u, r)
– Generate new role keys k(r,vr +1) ← KeyGen
– For all (cid:4)RK, u
s(r,vr +1) ← KeyGen
(r, vr), c(cid:5), sig) = 1:
∗ Send (cid:4)RK, u
SU (cid:5) to R.M.
SU, sig(cid:5) with Ver
∗ For every (cid:4)FK, (r, vr), (cid:4)f n, op
(cid:2)(cid:5), v, c
Ver
· Decrypt key k = Dec
(cid:2))
(c
· Send (cid:4)FK, (r, vr + 1), (cid:4)f n, op
(cid:2)(cid:5), v, Enc
Sign
,
k(r,vr +1), s(r,vr +1)
– For every f n such that there exists (cid:4)FK, (r, vr), (cid:4)f n, op(cid:5), vf n, c,
SU ((cid:4)FK, (r, vr), p, vf n, c, SU(cid:5), sig) = 1:
(cid:2), SU, sig(cid:5) with
SU ((cid:4)FK, (r, vr), (cid:4)f n, op
IBE
k(r,vr )
(cid:2), SU(cid:5), sig) = 1:
IBE
(r,vr +1)(k), SU,