### Threshold/Secret Splitting Schemes and Cryptographic Costs

Threshold/secret splitting schemes can be used to distribute trust among several individuals. However, such schemes increase the cryptographic costs associated with operations involving the master key.

### IV. Construction

#### A. Background on Cryptographic Access Control

While cryptographic access control enforcement has been studied in the past, the focus has primarily been on techniques suitable for static scenarios without a trusted reference monitor (e.g., [31], [49]). In these scenarios, policies and protected files change very little over time. Consequently, the specifics of securely managing policy changes and the associated overheads have been under-explored. This section begins with a strawman construction for cryptographic access control enforcement, highlighting various limitations and design considerations. We then provide a detailed description of our IBE/IBS and PKI constructions for RBAC0, which address these issues.

#### B. Strawman Construction

At first glance, it seems conceptually simple to provision a cryptographically-enforced RBAC0 system. We will overview such a system to highlight the issues that arise. This strawman construction uses IBE/IBS; using a more traditional PKI is a straightforward translation. We assume the administrator holds the master secret keys for the IBE/IBS systems.

- **Registration**: Each user, \( u \), must register with the administrator. The result is that the user obtains identity-based encryption and signing keys: \( k_u \leftarrow \text{KeyGenIBE}(u) \) and \( s_u \leftarrow \text{KeyGenIBS}(u) \).

- **Role Administration**: For each role, \( r \), the administrator generates identity-based encryption and signing keys: \( k_r \leftarrow \text{KeyGenIBE}(r) \) and \( s_r \leftarrow \text{KeyGenIBS}(r) \). For each user \( u \) that is a member of \( r \) (i.e., for each \( (u, r) \in U \times R \) in the RBAC0 state), the administrator creates and uploads a tuple:
  \[
  (\text{RK}, u, r, \text{EncIBE}_u(k_r, s_r), \text{SignIBS}_{\text{SU}})
  \]
  This tuple provides \( u \) with cryptographically-protected access to the encryption and signing keys for \( r \), signed by the administrator. Here, \( \text{SignIBS}_{\text{SU}} \) represents an IBS signature by the administrator, and \( \text{RK} \) is a sentinel value indicating a role key tuple.

- **File Administration**: For each file \( f \) to be shared with a role \( r \) (i.e., for each \( (r, (f, \text{op})) \in P \times A \) in the RBAC0 state), the administrator creates and uploads a tuple:
  \[
  (\text{F}, r, (f_n, \text{op}), \text{EncIBE}_r(f), \text{SU}, \text{SignIBS}_{\text{SU}})
  \]
  This tuple contains a copy of \( f \) encrypted to members of \( r \). Here, \( f_n \) represents the name of the file \( f \), while \( \text{op} \) is the permitted operation—either Read or Write. As before, \( \text{SU} \) is a signature by the administrator, and \( \text{F} \) is a sentinel value indicating a file tuple.

- **File Access**: If a user \( u \) authorized to read a file \( f \) (i.e., \( \exists r : (u, r) \in U \times R \land (r, (f, \text{Read})) \in P \times A \)) wishes to do so, she must:
  1. Download an RK tuple for the role \( r \) and an F tuple for \( f \).
  2. Validate the signatures on both tuples.
  3. Decrypt the role key \( k_r \) from the RK tuple using her personal IBE key \( k_u \).
  4. Decrypt the file \( f \) from the F tuple using the role key \( k_r \).

  Writes to a file are handled similarly. If \( u \) is authorized to write a file \( f \) via membership in role \( r \) (i.e., \( \exists r : (u, r) \in U \times R \land (r, (f, \text{Write})) \in P \times A \)), she can upload a new F tuple:
  \[
  (\text{F}, r, (f_n, \text{Write}), \text{EncIBE}_r(f), \text{SU}, \text{SignIBS}_{\text{SU}})
  \]
  If the signature authorizing the write can be verified by the cloud provider, the existing F tuple for \( f \) will be replaced.

This construction describes a cryptographic analog to RBAC0. The \( U \times R \) relation is encoded in the collection of RK tuples, while the \( P \times A \) relation is encoded in the collection of F tuples. The authorization relation of RBAC0 is upheld cryptographically: to read a file \( f \), a user \( u \) must be able to decrypt a tuple granting her the permissions associated with a role \( r \), which can be used to decrypt a tuple containing a copy of \( f \) encrypted to role \( r \).

#### C. Design Considerations

While conceptually straightforward, the strawman construction is not a complete solution. We now use this construction to discuss several design tradeoffs that must be addressed to support cryptographic enforcement of dynamic RBAC0 states.

- **PKI vs. IBE**: Using IBE and IBS allows for a simple mapping from encryption keys to roles in RBAC0: the name of the role is the public key used to encrypt under that role. This is conceptually simpler than traditional public key or symmetric encryption, which may help limit certain key management issues in software. IBE-based constructions also generalize to richer access control models (e.g., enforced using HIBE or ABE), which we explore in Section VI. However, rich infrastructure has been developed to support public key cryptography, which may make the system support issues inherent in these constructions easier to manage. To this end, we present constructions based on both IBE and public key cryptography.

- **Inefficiency Concerns**: The strawman construction exhibits two key issues with respect to efficiency. First, IBE (like public-key cryptography) is not well-suited for bulk encryption of large amounts of data, leading to performance degradation when large files are shared within the system. Second, this construction requires duplicating effort when a file, say \( f \), is to be shared with multiple roles, say \( r_1 \) and \( r_2 \). That is, \( f \) must be encrypted twice: once with \( r_1 \) and once with \( r_2 \). This also leads to consistency issues between roles when \( f \) is updated. Fortunately, both concerns can be mitigated via hybrid cryptography. Instead of storing F tuples of the form:
  \[
  (\text{F}, r, (f_n, \text{op}), \text{EncIBE}_r(f), \text{SU}, \text{SignIBS}_{\text{SU}})
  \]
  we store FK tuples:
  \[
  (\text{FK}, r, (f_n, \text{op}), v, \text{EncIBE}_r(k), \text{SU}, \text{SignIBS}_{\text{SU}})
  \]
  and F tuples:
  \[
  (\text{F}, f_n, v, \text{EncSym}_k(f), r, \text{SignIBS}_r)
  \]
  where \( k \leftarrow \text{GenSym} \) is a symmetric key. This adjustment improves the efficiency of bulk encryption by using symmetric-key cryptography and greatly reduces the duplication of effort when sharing a file with multiple roles: a single F tuple can be created for the file along with multiple FK tuples (one per role).

- **Handling Revocation**: The strawman construction cannot revoke a permission from a role or remove a user from a role. These cases can be handled by versioning the F and FK tuples stored within the system. For example, to remove a user \( u \) from a role \( r \), the administrator deletes \( u \)'s RK tuple for \( r \), generates new role keys for \( r \) (with an incremented version number), and encodes these into new RK tuples for each remaining user in \( r \). All files to which the role \( r \) holds some permission are re-versioned. Both processes must be carried out by an administrator, as only administrators can modify the RBAC0 state.

- **Online, Lazy, and Proxy Re-Encryption**: Supporting revocation leads to an interesting design choice: should files be re-encrypted immediately upon re-key, or lazily re-encrypted upon their next write? From a confidentiality standpoint, immediate re-encryption is preferable, but it comes with a potentially severe efficiency penalty. In this paper, we opt for a lazy re-encryption strategy, where files are re-encrypted by the next user to write to the file. This substantially reduces the computational burden on the cloud when allowing for dynamic updates to the RBAC0 state. Adapting our construction to use online re-encryption is a straightforward extension.

- **Multiple Levels of Encryption**: Our construction has levels of indirection between RK, FK, and F tuples that mirror the indirection between users, roles, and permissions in RBAC0. This indirection could be flattened to decrease the number of cryptographic operations on the critical path to file access. However, this has been shown to cause computational inefficiencies when roles' memberships or permissions are altered. In our case, this inefficiency would be amplified due to the cryptographic costs associated with these updates.

- **Other Issues and Considerations**: Our constructions are measured without concern for concurrency-related issues that would need to be addressed in practice. Features to handle concurrency would be largely independent of the proposed cryptography used to enforce the RBAC0 policies. Production implementations would need to consider security guarantees and hardness assumptions of the public-key and IBE schemes.

#### D. Detailed IBE/IBS Construction

We now flesh out the strawman and previously-discussed enhancements to produce a full construction for enforcing RBAC0 protections over an evolving collection managed by a minimally-trusted cloud storage provider.

- **Overview and Preliminaries**: Administrators act as the Master Secret Key Generator of the IBE/IBS schemes. Users add files to the system by IBE-encrypting these files to the administrators, using hybrid cryptography and F tuples. Administrators assign permissions (i.e., \( (f, \text{op}) \) pairs) to roles by distributing symmetric keys using FK tuples. Role keys are distributed to users using RK tuples. Recall the format of these tuples is as follows:
  \[
  (\text{RK}, u, (r, v_r), \text{EncIBE}_u(k_{(r, v_r)}, s_{(r, v_r)}), \text{SignIBS}_{\text{SU}})
  \]
  \[
  (\text{FK}, r, (f_n, \text{op}), v, \text{EncIBE}_r(k_{(r, v_r)}), \text{SU}, \text{SignIBS}_{\text{SU}})
  \]
  \[
  (\text{F}, f_n, v, \text{EncSym}_k(f), (r, v_r), \text{SignIBS}_{(r, v_r)})
  \]
  Symmetric keys and role keys are associated with version information to handle the cases where a user is removed from a role or a permission is revoked from a role.

- **Full Construction**: Figure 2 lists every RBAC0 operation and shows how each can be implemented using IBE, IBS, and the metadata structures described previously. This figure uses the following notation: \( u \) is a user, \( r \) and \( q \) are roles, \( p \) is a permission, \( f_n \) is a file name, \( f \) is a file, \( c \) is a ciphertext (either IBE or symmetric), \( \text{sig} \) is an IBS signature, and \( v \) is a version number. Users are listed in a file called USERS. The identity corresponding to a role \( r \) is \( (r, v) \), where \( v \) is a positive integer representing the version number. We use \( v_r \) to denote the latest version number for role \( r \). Roles and versions are stored as \( (r, v_r) \) pairs in a file called ROLES, which is publicly viewable and can only be changed by the administrator. Similarly, we use \( v_{f_n} \) to denote the latest version number for the file with name \( f_n \). Filenames and versions are stored as \( (f_n, v_{f_n}) \) pairs in a file called FILES, which is publicly viewable and can only be changed by the admin or reference monitor (R.M.). \( \text{SU} \) is the superuser identity possessed by the administrators. We use “−” to represent a wildcard. \( \text{SignIBS}_{\text{id}} \) at the end of a tuple represents an IBS signature by identity \( \text{id} \) over the rest of the tuple. The subscript after an operation name identifies who performs the operation if it is not performed by an administrator.

  Many operations described in Fig. 2 are straightforward given the discussion earlier in this section. To demonstrate some of the more complicated aspects of this construction, we now describe the procedure to revoke a role from a user, which demonstrates several types of re-keys as well as our notion of lazy re-encryption. The procedure for removing a user \( u \) from a role \( r \) consists of three steps: (i) re-keying \( r \), (ii) re-encrypting existing file keys stored in FK tuples to the new role key, and (iii) re-keying all files accessible by \( r \).

  - **Re-keying a Role**: To re-key a role \( r \), we transition from \( (r, v_r) \) to \( (r, v_r + 1) \), generating new IBE keys for this new role version. The old RK tuples for \( r \) are deleted, and each remaining member \( u \) of role \( r \) is given the new RK tuples of the form:
    \[
    (\text{RK}, u, (r, v_r + 1), \text{EncIBE}_u(k_{(r, v_r + 1)}, s_{(r, v_r + 1)}), \text{SignIBS}_{\text{SU}})
    \]
    Next, all (symmetric) file keys encrypted to \( (r, v_r) \) in FK tuples are replaced with file keys encrypted to \( (r, v_r + 1) \). This allows the remaining members of \( r \) to retain access to existing files, while preventing the revoked user \( u \) from accessing any file keys that he has not already decrypted and cached.

  - **Re-keying Files**: Each file to which \( r \) has access must be re-keyed to prevent \( u \) from accessing future updates to this file using cached symmetric keys. For each file \( f \), a new symmetric key is generated via \( \text{GenSym} \). This key is then encrypted for each role \( r' \) that has access to \( f \) (including \( r \)), and new FK tuples:
    \[
    (\text{FK}, r', (f_n, \text{op}), v + 1, \text{EncIBE}_{r'}(k_{(r, v_r + 1)}), \text{SU}, \text{SignIBS}_{\text{SU}})
    \]
    are uploaded alongside existing FK tuples. Here, \( v + 1 \) is the new file key version, \( c \) is the existing encrypted file key, and \( c' \) is the new file key IBE-encrypted to identity \( r' \). The next time \( f \) is read, the key contained in \( c \) will be used for decryption; the next time \( f \) is written, the key contained in \( c' \) will be used for encryption. This process obviates the need for a daemon to re-encrypt all files at revocation time, but prevents the revoked user \( u \) from accessing any future modifications to these files using cached symmetric file keys.

#### E. PKI Construction Overview

We now provide an intuition for how traditional public-key cryptography can be used in place of IBE/IBS to implement RBAC0. Due to space limitations, full details will be left to a technical report version [28] of this paper. In our PKI construction, public-key encryption and signatures take the place of IBE and IBS. Each role is assigned a public/private key pair rather than IBE/IBS keys. The primary difference between the IBE and PKI constructions is that IBE/IBS clients are given escrowed IBE/IBS identity private keys by the role administrator, while PKI clients generate their own public/private key pairs and upload their public keys. Note that in both systems, the administrators have access to all of the roles' private keys.

### V. Analysis

We now describe our evaluation of the suitability of IBE/IBS and PKI constructions for enforcing RBAC0 access controls. We utilize a workflow similar to that proposed in [26], in which we first evaluate the candidates' expressive power (i.e., ability to represent the desired policy as it evolves), then evaluate the cost of using each candidate using Monte Carlo simulation based on initial states obtained from real-world datasets.

- **Qualitative Analysis**: We analyze the correctness and security guarantees of our implementations using the access control expressiveness framework known as parameterized expressiveness [36]. In particular, we ensure that the implementation properties of correctness, AC-preservation, and safety are preserved by these constructions. Correctness ensures that the RBAC0 state's image in our constructions answers queries exactly as the original RBAC0 system would, and that the same end state is reached by either executing an RBAC0 action natively and mapping the result into our construction or by mapping the initial RBAC0 state and executing the action's image in our construction. AC-preservation says that the RBAC0 system's authorization requests must be asked directly in the simulating system. Finally, safety ensures that our constructions do not grant or revoke unnecessary permissions during the simulation of a single RBAC0 command. That is, the intermediate states through which our constructions travel while implementing an RBAC0 command do not add or remove any granted requests except those that must be added or removed as determined by the start and end states of the RBAC0 command.