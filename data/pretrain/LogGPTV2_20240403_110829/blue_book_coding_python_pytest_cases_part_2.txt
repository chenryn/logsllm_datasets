    @parametrize_with_cases("a", cases=FooCases, has_tag='foo')
    def test_foo(a):
        assert a > 0
    ```
* Finally if none of the above matches your expectations, you can provide
    a callable to `filter`. This callable will receive each collected case
    function and should return `True` in case of success. Note that your
    function can leverage the `_pytestcase` attribute available on the case
    function to read the tags, marks and id found on it.
    ```python
    @parametrize_with_cases("data", cases='.',
                            filter=lambda cf: "success" in cf._pytestcase.id)
    def test_good_datasets2(data):
        assert sqrt(data) > 0
    ```
## [Pytest marks (`skip`, `xfail`...) on cases](https://smarie.github.io/python-pytest-cases/#pytest-marks-skip-xfail)
pytest marks such as `@pytest.mark.skipif` can be applied on case functions the
same way [as with test
functions](https://docs.pytest.org/en/stable/skipping.html).
```python
import sys
import pytest
@pytest.mark.skipif(sys.version_info `.
The most intuitive way would be to use a `for` loop to create the case
functions, and to use the `@case` decorator to set their names ; however this
would not be very readable.
Instead, case functions can be parametrized the same way [as with test
functions](https://docs.pytest.org/en/stable/parametrize.html): simply add the
parameter names as arguments in their signature and decorate with
`@pytest.mark.parametrize`. Even better, you can use the enhanced
[`@parametrize`](https://smarie.github.io/python-pytest-cases/api_reference/#parametrize)
from `pytest-cases` so as to benefit from its additional usability features:
```python
from pytest_cases import parametrize, parametrize_with_cases
class CasesFoo:
    def case_hello(self):
        return "hello world"
    @parametrize(who=('you', 'there'))
    def case_simple_generator(self, who):
        return "hello %s" % who
@parametrize_with_cases("msg", cases=CasesFoo)
def test_foo(msg):
    assert isinstance(msg, str) and msg.startswith("hello")
```
Yields
```
test_generators.py::test_foo[hello] PASSED               [ 33%]
test_generators.py::test_foo[simple_generator-who=you] PASSED [ 66%]
test_generators.py::test_foo[simple_generator-who=there] PASSED [100%]
```
## [Cases requiring fixtures](https://smarie.github.io/python-pytest-cases/#cases-requiring-fixtures)
Cases can use fixtures the same way as [test functions
do](https://docs.pytest.org/en/stable/fixture.html#fixtures-as-function-arguments):
simply add the fixture names as arguments in their signature and make sure the
fixture exists either in the same module, or in
a [`conftest.py`](https://docs.pytest.org/en/stable/fixture.html?highlight=conftest.py#conftest-py-sharing-fixture-functions)
file in one of the parent packages. See [`pytest` documentation on sharing
fixtures](https://docs.pytest.org/en/stable/fixture.html?highlight=conftest.py#conftest-py-sharing-fixture-functions).
!!! warning "Use `@fixture` instead of `@pytest.fixture`"
    If a fixture is used by *some* of your cases only, then you *should* use the
    `@fixture` decorator from pytest-cases instead of the standard
    `@pytest.fixture`. Otherwise you fixture will be setup/teardown for all
    cases even those not requiring it. See [`@fixture`
    doc](https://smarie.github.io/python-pytest-cases/api_reference/#fixture).
```python
from pytest_cases import parametrize_with_cases, fixture, parametrize
@fixture(scope='session')
def db():
    return {0: 'louise', 1: 'bob'}
def user_bob(db):
    return db[1]
@parametrize(id=range(2))
def user_from_db(db, id):
    return db[id]
@parametrize_with_cases("a", cases='.', prefix='user_')
def test_users(a, db, request):
    print("this is test %r" % request.node.nodeid)
    assert a in db.values()
```
Yields
```
test_fixtures.py::test_users[a_is_bob]
test_fixtures.py::test_users[a_is_from_db-id=0]
test_fixtures.py::test_users[a_is_from_db-id=1]
```
## [Parametrize fixtures with cases](https://smarie.github.io/python-pytest-cases/#a-test-fixtures)
In some scenarios you might wish to parametrize a fixture with the cases, rather
than the test function. For example:
* To inject the same test cases in several test functions without
    duplicating the `@parametrize_with_cases` decorator on each of them.
* To generate the test cases once for the whole session, using
    a `scope='session'` fixture or [another
    scope](https://docs.pytest.org/en/stable/fixture.html#scope-sharing-a-fixture-instance-across-tests-in-a-class-module-or-session).
* To modify the test cases, log some message, or perform some other action
    before injecting them into the test functions, and/or after executing the
    test function (thanks to [yield
    fixtures](https://docs.pytest.org/en/stable/fixture.html#fixture-finalization-executing-teardown-code)).
For this, simply use `@fixture` from `pytest_cases` instead of `@pytest.fixture`
to define your fixture. That allows your fixtures to be easily parametrized with
`@parametrize_with_cases`, `@parametrize`, and even `@pytest.mark.parametrize`.
```python
from pytest_cases import fixture, parametrize_with_cases
@fixture
@parametrize_with_cases("a,b")
def c(a, b):
    return a + b
def test_foo(c):
    assert isinstance(c, int)
```
# [Pytest-cases internals](https://smarie.github.io/python-pytest-cases/pytest_goodies/)
## [`@fixture`](https://smarie.github.io/python-pytest-cases/pytest_goodies/#fixture)
`@fixture` is similar to `pytest.fixture` but without its `param` and `ids`
arguments. Instead, it is able to pick the parametrization from
`@pytest.mark.parametrize` marks applied on fixtures. This makes it very
intuitive for users to parametrize both their tests and fixtures.
Finally it now supports unpacking, see [unpacking feature](#unpack_fixture-unpack_into).
!!! note "`@fixture` deprecation if/when `@pytest.fixture` supports `@pytest.mark.parametrize`"
    The ability for pytest fixtures to support the `@pytest.mark.parametrize`
    annotation is a feature that clearly belongs to `pytest` scope, and has been
    [requested already](https://github.com/pytest-dev/pytest/issues/3960). It is
    therefore expected that `@fixture` will be deprecated in favor of
    `@pytest_fixture` if/when the `pytest` team decides to add the proposed
    feature. As always, deprecation will happen slowly across versions (at least
    two minor, or one major version update) so as for users to have the time to
    update their code bases.
### [`unpack_fixture` / `unpack_into`](https://smarie.github.io/python-pytest-cases/pytest_goodies/#unpack_fixture-unpack_into)
In some cases fixtures return a tuple or a list of items. It is not easy to
refer to a single of these items in a test or another fixture. With
`unpack_fixture` you can easily do it:
```python
import pytest
from pytest_cases import unpack_fixture, fixture
@fixture
@pytest.mark.parametrize("o", ['hello', 'world'])
def c(o):
    return o, o[0]
a, b = unpack_fixture("a,b", c)
def test_function(a, b):
    assert a[0] == b
```
Note that you can also use the `unpack_into=` argument of `@fixture` to do the
same thing:
```python
import pytest
from pytest_cases import fixture
@fixture(unpack_into="a,b")
@pytest.mark.parametrize("o", ['hello', 'world'])
def c(o):
    return o, o[0]
def test_function(a, b):
    assert a[0] == b
```
And it is also available in `fixture_union`:
```python
import pytest
from pytest_cases import fixture, fixture_union
@fixture
@pytest.mark.parametrize("o", ['hello', 'world'])
def c(o):
    return o, o[0]
@fixture
@pytest.mark.parametrize("o", ['yeepee', 'yay'])
def d(o):
    return o, o[0]
fixture_union("c_or_d", [c, d], unpack_into="a, b")
def test_function(a, b):
    assert a[0] == b
```
### `param_fixture[s]`
If you wish to share some parameters across several fixtures and tests, it might
be convenient to have a fixture representing this parameter. This is relatively
easy for single parameters, but a bit harder for parameter tuples.
The two utilities functions `param_fixture` (for a single parameter name) and
`param_fixtures` (for a tuple of parameter names) handle the difficulty for
you:
```python
import pytest
from pytest_cases import param_fixtures, param_fixture
# create a single parameter fixture
my_parameter = param_fixture("my_parameter", [1, 2, 3, 4])
@pytest.fixture
def fixture_uses_param(my_parameter):
    ...
def test_uses_param(my_parameter, fixture_uses_param):
    ...
# -----
# create a 2-tuple parameter fixture
arg1, arg2 = param_fixtures("arg1, arg2", [(1, 2), (3, 4)])
@pytest.fixture
def fixture_uses_param2(arg2):
    ...
def test_uses_param2(arg1, arg2, fixture_uses_param2):
    ...
```
### `fixture_union`
As of `pytest` 5, it is not possible to create a "union" fixture, i.e.
a parametrized fixture that would first take all the possible values of fixture
A, then all possible values of fixture B, etc. Indeed all fixture dependencies
of each test node are grouped together, and if they have parameters a big
"cross-product" of the parameters is done by `pytest`.
```python
from pytest_cases import fixture, fixture_union
@fixture
def first():
    return 'hello'
@fixture(params=['a', 'b'])
def second(request):
    return request.param
# c will first take all the values of 'first', then all of 'second'
c = fixture_union('c', [first, second])
def test_basic_union(c):
    print(c)
```
yields
```
::test_basic_union[c_is_first] hello   PASSED
::test_basic_union[c_is_second-a] a    PASSED
::test_basic_union[c_is_second-b] b    PASSED
```
# References
* [Docs](https://smarie.github.io/python-pytest-cases/)
* [Git](https://github.com/smarie/python-pytest-cases/)