    char* v69; // [xsp+308h] [xbp-238h]
    int v70; // [xsp+31Ch] [xbp-224h]
    char s[256]; // [xsp+320h] [xbp-220h] BYREF
    int fd; // [xsp+420h] [xbp-120h]
    int v73; // [xsp+424h] [xbp-11Ch]
    unsigned int v74; // [xsp+428h] [xbp-118h]
    int v75; // [xsp+42Ch] [xbp-114h]
    __int64 v76; // [xsp+430h] [xbp-110h]
    char* v77; // [xsp+438h] [xbp-108h]
    __int64 v78; // [xsp+440h] [xbp-100h]
    __int64 v79; // [xsp+448h] [xbp-F8h]
    __int64 v80; // [xsp+450h] [xbp-F0h]
    char* v81; // [xsp+458h] [xbp-E8h]
    int v82; // [xsp+464h] [xbp-DCh]
    __int64 v83; // [xsp+468h] [xbp-D8h]
    const char* v84; // [xsp+470h] [xbp-D0h]
    char* v85; // [xsp+478h] [xbp-C8h]
    const char* v86; // [xsp+480h] [xbp-C0h]
    char* v87; // [xsp+488h] [xbp-B8h]
    __int64 v88; // [xsp+490h] [xbp-B0h]
    __int64 v89; // [xsp+498h] [xbp-A8h]
    const char* v90; // [xsp+4A0h] [xbp-A0h]
    __int64 v91; // [xsp+4A8h] [xbp-98h]
    void* v92; // [xsp+4B0h] [xbp-90h]
    void(__fastcall * v93)(__int64); // [xsp+4B8h] [xbp-88h]
    const char* v94; // [xsp+4C0h] [xbp-80h]
    const char* v95; // [xsp+4C8h] [xbp-78h]
    void* v96; // [xsp+4D0h] [xbp-70h]
    void(__fastcall * v97)(__int64); // [xsp+4D8h] [xbp-68h]
    const char* v98; // [xsp+4E0h] [xbp-60h]
    const char* v99; // [xsp+4E8h] [xbp-58h]
    void* v100; // [xsp+4F0h] [xbp-50h]
    const char* v101; // [xsp+508h] [xbp-38h]
    void* v102; // [xsp+510h] [xbp-30h]
    const char* v103; // [xsp+528h] [xbp-18h]
    __int64 vars0; // [xsp+540h] [xbp+0h] BYREF
    char data_com_d3ctf_noname[] =
    {
    0x11, 0x29, 0x08, 0x24, 0x6B, 0xD4, 0x17, 0x33, 0xB8, 0x53,
    0x76, 0xA9, 0x72, 0xD4, 0x70, 0x01
    };
    v13 = 0;
    tea_decrypt((uint32_t*)&data_com_d3ctf_noname, 0x10);
    v32 = data_com_d3ctf_noname;
    v31 = 16LL;
    v30 = 0LL;
    memcpy(dest, ida_chars, sizeof(dest));
    *(_DWORD*)key = 0x67452301;
    *(_DWORD*)&key[4] = 0xEFCDAB89;
    *(_DWORD*)&key[8] = 0x98BADCFE;
    *(_DWORD*)&key[12] = 0x10325476;
    v28 = (((unsigned int)((v31 + 8) / 0x40uLL) + 1) = 0x10)
    {
    if (k >= 0x20)
    {
    if (k >= 0x30)
    {
    v20 = v23 ^ (v24 | ~v22);
    v19 = 7 * k % 0x10;
    }
    else
    {
    v20 = v24 ^ v23 ^ v22;
    v19 = (3 * k + 5) % 0x10;
    }
    }
    else
    {
    v20 = v22 & v24 | v23 & ~v22;
    v19 = (5 * k + 1) % 0x10;
    }
    }
    else
    {
    v20 = v24 & v23 | v22 & ~v24;
    v19 = k;
    }
    v18 = v22;
    v22 = v23;
    v23 = v24;
    v24 += __ROL4__(v25 + v20 + dword_34000[k] + *(_DWORD*)&v30[4 * v19 + j], dest[k]);
    v25 = v18;
    }
    *(_DWORD*)key += v25;
    *(_DWORD*)&key[4] += v24;
    *(_DWORD*)&key[8] += v23;
    *(_DWORD*)&key[12] += v22;
    }
    }
    int main()
    {
    unsigned char ida_chars[] =
    {
    0xB6, 0xEB, 0x35, 0x4A, 0x29, 0xF3, 0x74, 0x66, 0x73, 0xAD,
    0x8A, 0x4A, 0x06, 0x54, 0x33, 0xB5, 0x12, 0x8F, 0x66, 0x7F,
    0xF7, 0x6E, 0x96, 0x8A, 0x7F, 0x80, 0xE8, 0xE7, 0xE0, 0x04,
    0xF6, 0xC0
    };
    tea_decrypt((uint32_t*)ida_chars, 0x20);
    printf("%s\n", ida_chars);
    getAESkey();
    unsigned char x[] = { 49, 102, 54, 33, 51, 46, 0x60, 52, 109, 97, 102, 52, 97, 55, 55, 97, 52, 0x60, 0x60, 109, 51, 101, 103, 101, 100, 98, 109, 103, 109, 54, 97, 55, 52, 98, 97, 98, 0x60, 99, 40 };
    for (int i = 0; i < 39; i++)
    {
    printf("%c", x[i] ^ 85);
    }
    return 0;
    }