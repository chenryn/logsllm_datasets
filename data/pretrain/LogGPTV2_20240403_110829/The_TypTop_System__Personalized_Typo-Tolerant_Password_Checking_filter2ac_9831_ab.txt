responses for login attempts that appear unsafe based on contex-
tual information (for example, those originating from suspicious IP
addresses).
In offline attacks we assume that the attacker has compromised
the database of stored PBAS states, and attempts to brute-force
guess the underlying values. In contrast to online attacks, the num-
ber of guesses made by an offline attacker is limited only by the
Figure 1: Diagram showing TypTop’s approach to personalized typo-
tolerant password checking.
computational power they are willing to expend. We analyze the
security of TypTop in the face of both forms of attack in Section 5.
4 THE TYPTOP DESIGN
We first give an overview of TypTop, and then detail its components
more fully. TypTop uses a typo cache and an encrypted wait list. The
typo cache securely stores the set of strings under which the user
is allowed to authenticate; namely their registered password plus a
number of previously accepted typos of that password. The wait list
is a public-key encryption of recent incorrect password submissions
that were not the registered password or one of the typos already
in the typo cache. The secret decryption key for the wait list is,
in turn, encrypted using the registered password and (separately)
under each of the cached typos. When a login attempt’s password
submission is accepted — either it was the registered password
or one of the previously accepted typos — the wait list can be
decrypted and processed according to some typo cache policy. The
latter defines which incorrect submissions should be allowed into
the typo cache. A diagrammatic view of TypTop’s Chk procedure
is given in Figure 1.
Underlying components. We begin by defining the primitives
utilized by TypTop. A public-key encryption (PKE) scheme PKE =
(𝒦,ℰ,𝒟) is a triple of algorithms. The key generation algorithm
𝒦 takes random coins as input and outputs a public / secret key
pair (𝑝𝑘, 𝑠𝑘) ←$ 𝒦. The randomized encryption algorithm ℰ takes
as input a public key 𝑝𝑘 and a message 𝑚 ∈ ℳℰ (where ℳℰ
denotes the message space), and outputs a ciphertext 𝑐 ←$ ℰ𝑝𝑘 (𝑚).
We let 𝒞ℰ denote the ciphertext space. The deterministic decryp-
tion algorithm 𝒟 takes as input a secret key 𝑠𝑘 and a ciphertext
𝑐 and outputs a message ˜𝑚 ∈ ℳℰ ∪ {⊥}. We use a PKE scheme
with perfect correctness, meaning that the probability an honestly
generated ciphertext decrypts to the correct message is one.
A password-based encryption (PBE) scheme PBE = (E, D) is a
pair of algorithms defined as follows. The randomized encryption
algorithm E takes as input a password 𝑤 ∈ 𝒲 (the set of all al-
lowed passwords) and a message 𝑚 ∈ ℳE (the message space),
and outputs a ciphertext 𝑐 ←$ E𝑤 (𝑚), where we let 𝒞E denote the
ciphertext space. The deterministic decryption algorithm D takes
as input a password 𝑤 and a ciphertext 𝑐 and outputs a message
˜𝑚 ∈ ℳE ∪{⊥}. We require PBE to be perfectly correct. A conven-
tional symmetric encryption scheme is the same as a PBE scheme,
except that it assumes uniform bit strings of some length 𝜅 as keys.
3
Input:˜𝑤ChecktypocacheDecrypt𝑠𝑘DecryptwaitlistFilterusingtypopolicyInsertintotypocacheOutput:YesEncrypt˜𝑤using𝑝𝑘InsertintowaitlistOutput:NoYesNoCCS ’17, October 30-November 3, 2017, Dallas, TX, USA
Chatterjee et al.
We let PBE[SH, SE] = (E, D) denote the canonical PBE scheme
that works as follows. The scheme utilizes a random oracle with
signature SH : {0, 1}* → {0, 1}𝜅 and a conventional symmetric
encryption scheme SE = (E, D) that uses keys of length 𝜅 bits.
Then E(𝑤, 𝑚) first chooses a fresh salt sa ←$ {0, 1}ℓsalt for some
suitably large ℓsalt, computes 𝑐 = E(SH(sa‖ 𝑤), 𝑚), and outputs
(sa, 𝑐). Decryption works in the obvious way.
Later, we will assume the message space associated to a PKE
scheme unambiguously supports passwords of length up to some
parameter ℓ (passwords will be unambiguously padded to this max
length), a distinguished empty string symbol 𝜀, and the state space
of the caching scheme. We assume that encryptions of passwords
and the empty string are of equal length. We assume PBE has
a message space containing a typical representation of the PKE
scheme’s secret keys.
Finally, we let Perm(𝑡) denotes the set of all permutations on
Z𝑡. Looking ahead, we shall set 𝑡 to be the number of typos stored
in the typo cache, and regularly apply a random permutation to
randomize the order of elements in the cache. For our scheme, 𝑡 will
be small, making random permutations on Z𝑡 easily sampleable
and representable.
The details. A pseudocode description of TypTop’s adaptive typo-
tolerant password checking scheme Π = (Reg, Chk) appears in
Figure 2. TypTop uses a caching scheme to determine which entries
in the wait list are integrated into the cache. In the figure we detail
a probabilistic least frequently used (PLFU) caching scheme, but
TypTop works modularly with other caching schemes as discussed
later in this section.
The state of the adaptive checking scheme 𝑠 consists of a public
key 𝑝𝑘, the encryption of the caching scheme’s (plaintext) state S,
a typo cache T, an encrypted wait list W, and an index 𝛾 which
is a pointer to the next wait list entry that should be used. The
typo cache consists of up to 𝑡 PBE encryptions of the secret key 𝑠𝑘
corresponding to 𝑝𝑘, where 𝑡 is a parameter of the scheme. The typo
cache is initially filled with random ciphertexts, unless otherwise
indicated by the caching scheme in use (e.g., one may want to
warm up the cache with possible typos as discussed below). The
wait list consists of up to 𝜔 PKE encryptions of incorrect password
submissions. For the wait list we use a simple least-recently entered
eviction policy, accomplished by having index 𝛾 wrap around. To
force a wrap around would require 𝜔 incorrect submissions before
a correct one, so in practice we can set 𝜔 to be equal to a lockout
threshold (such as 10). The wait list is initialized with encryptions
of the empty string symbol 𝜀, and cleared in the same manner. The
index 𝛾 is initialized to a random value in Z𝜔.
After every change to the typo cache, a random permutation
𝜋 ←$ Perm(𝑡) is used to permute the order of the cached typos.
This is to ensure that even if an adversary knows the typos likely
to be made by a user, he will not know at which position each typo
lies in the cache. This will have ramifications for offline security,
making the guessing game harder for particular distributions. See
Section 5.
Caching schemes. TypTop maintains a set of cached typos which
evolves over time based on the users’ login attempts and the caching
policy in use. We require that the set of cached typos are distinct,
4
and that the real password is never cached as a typo; this maximizes
the number of typos we can tolerate for a given cache size. We ab-
stract out the process of initializing and updating the typo cache
via a stateful caching scheme Cache = (CacheInit, CacheUpdt)
defined as follows. The algorithm CacheInit takes as input a pass-
word 𝑤, and outputs an initial state for the caching scheme S0 and
a set 𝒰0 of typo / index pairs ( ˜𝑤, 𝑖), indicating that the typo ˜𝑤
should be stored at the 𝑖th position in the initial cache. The algo-
rithm CacheUpdt takes as input the caching scheme state S and
a list ( ˜𝑤1, . . . , ˜𝑤𝜔 ) of candidate replacement typos (in our case,
drawn from the wait list) plus any other information required to
implement the caching policy (e.g., their frequencies). It outputs
an updated state S′ and a set 𝒰 indicating the replacements to be
made.
The checker Π is designed so that any caching scheme of choice
may be dropped in. The set of caching schemes we consider is
given in Figure 3. The simplest is a least recently used (LRU) caching
scheme CacheLRU = (InitLRU, UpdateLRU) which maintains a list
of typo cache indices ordered by how recently they were entered by
the user; when we update the cache, the last (and least recently used)
entry in the cache is evicted and replaced with the most frequently
observed entry in the wait list. LRU ignores the frequency with
which a user authenticates under a cached typo.
We consider three other strategies that take this frequency into
consideration. The simplest scheme is the LFU policy, which per-
forms cache updates by replacing the least frequently used cache
typo with the most frequently observed wait list entry. The newly
added typo has its frequency set to the number of times it appeared
in the wait list.
A potential drawback of this approach is that we replace a cached
typo each time we update, and so may inadvertently replace a typo
that the user makes reasonably often (and is thus good to keep
in the cache) with an anomalous typo from the wait list which
they are unlikely to use again. We therefore give a probabilistic-
LFU (PLFU) scheme, which performs cache updates as follows.
First the frequencies of the least frequently used typo in the cache
˜𝑤𝑜 and the most frequently observed typo in the wait list ˜𝑤𝑛 are
compared, and we replace the former with the latter with probability
𝜈 = 𝑓 ˜𝑤𝑛 /(𝑓 ˜𝑤𝑛 + 𝑓 ˜𝑤𝑜 ), where 𝑓 denotes the frequency count of
the typo in subscript in the wait list (for ˜𝑤𝑛) or the typo cache
(for ˜𝑤𝑜). If such an update occurs, the frequency of the newly
cached typo is set to 𝑓 ˜𝑤𝑛 + 𝑓 ˜𝑤𝑜. This process is repeated for each
of the unique typos in the wait list in descending order of their
frequency. This both serves to decrease the probability that a useful
cached typo is replaced unnecessarily, and increases the likelihood
that typos which are observed repeatedly in low frequencies over
different login attempts are cached; we give a detailed discussion
in Appendix A.1.
The above schemes require |S| ∈ 𝒪(𝑡) space for caching; desir-
able in our construction since storing more data in the state of Π
could negatively impact efficiency. In settings where this is less of a
concern (e.g., authentication to personal devices) and we can afford
to maintain a larger state, we can employ a most frequently used
(MFU) caching policy which records the frequency of all valid typos
made by a user so far. The 𝑡 most frequent typos are maintained in
the cache.
The TypTop System
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
Reg(𝑤):
(𝑝𝑘, 𝑠𝑘) ←$ 𝒦
T[0] ←$ E𝑤 (𝑠𝑘)
For 𝑖 = 1, . . . , 𝑡 do T[𝑖] ←$ 𝒞E
For 𝑗 = 1, . . . , 𝜔 do W[𝑗] ←$ ℰ𝑝𝑘 (𝜀)
(S0, 𝒰0) ←$ CacheInit(𝑤)
𝑐 ←$ ℰ𝑝𝑘 (S0)
For ( ˜𝑤, 𝑖) ∈ 𝒰0 do
T[𝑖] ←$ E ˜𝑤 (𝑠𝑘)
𝛾 ←$ Z𝜔
𝑠 ← (𝑝𝑘, 𝑐, T, W, 𝛾)
Return 𝑠
CacheInit(𝑤):
For 𝑖 = 1, . . . , 𝑡 do F[𝑖] ← 0
S ← (𝑤, F)
𝒰 ← 𝜑
Return (S, 𝒰 )
Chk( ˜𝑤, 𝑠):
Parse 𝑠 as (𝑝𝑘, 𝑐, 𝛾, T, W)
𝑏 ← false
For 𝑖 = 0, . . . , 𝑡 do
𝑠𝑘 ← D ˜𝑤 (T[𝑖])
If 𝑠𝑘 (cid:44) ⊥ then
𝑏 ← true; 𝜋 ←$ Perm(𝑡); S ← 𝒟𝑠𝑘 (𝑐)
For 𝑗 = 1, . . . , 𝜔 do ˜𝑤𝑗 ← 𝒟𝑠𝑘 (W[𝑗])
(S′, 𝒰 ) ← CacheUpdt(𝜋, S, ( ˜𝑤, 𝑖), ˜𝑤1, . . . , ˜𝑤𝜔 )
𝑐′ ←$ ℰ𝑝𝑘 (S′)
For ( ˜𝑤′, 𝑗) ∈ 𝒰 do T[𝑗] ←$ E ˜𝑤′ (𝑠𝑘)
For 𝑗 = 1, . . . , 𝑡 do T′[𝜋[𝑗]] ← T[𝑗]
For 𝑗 = 1, . . . , 𝜔 do W[𝑗] ←$ ℰ𝑝𝑘 (𝜀)
𝑠 ← (𝑝𝑘, 𝑐′, 𝛾, T′, W)
If 𝑏 = false then
W[𝛾] ←$ ℰ𝑝𝑘 ( ˜𝑤); 𝛾′ ← 𝛾 + 1 mod 𝜔
𝑠 ← (𝑝𝑘, 𝑐, 𝛾′, T, W)
Return (𝑏, 𝑠)
CacheUpdt(𝜋, S, ( ˜𝑤, 𝑖), ˜𝑤1, . . . , ˜𝑤𝜔 ):
Parse S as (𝑤, F)
If 𝑖 > 0 then F[𝑖] ← F[𝑖] + 1
For 𝑗 = 1, . . . , 𝜔 do
If valid(𝑤, ˜𝑤𝑗 ) = true then
ℳ[ ˜𝑤𝑗] ← ℳ[ ˜𝑤𝑗] + 1
Sort ℳ in decreasing order of values
For each ˜𝑤′ s.t. ℳ[ ˜𝑤′] > 0 do
𝑘 ← argmin𝑗 F[𝑗]
𝜈 ← ℳ[ ˜𝑤′]/(F[𝑘] + ℳ[ ˜𝑤′])
𝑑 ←𝜈 {0, 1}
If 𝑑 = 1 then
F[𝑘] ← F[𝑘] + ℳ[ ˜𝑤′]
𝒰 ← 𝒰 ∪ {( ˜𝑤′, 𝑘)}
For 𝑗 = 1, . . . , 𝑡 do
F′[𝜋(𝑗)] ← F[𝑗]
S′ ← (𝑤, F′)
Return (S′, 𝒰 )
Figure 2: Our adaptive password checking scheme Π = (Reg, Chk) using a modified least-frequently used caching policy. The latter uses a
function valid that checks whether a string should be considered for entry into the typo cache (e.g., checking whether a string lies within an
edit distance threshold of the true password).
Scheme Replacement Policy
LRU
LFU
Replace least recently used typo with ˜𝑤𝑛
Replace least frequently used typo and associated frequency with
( ˜𝑤𝑛, 𝑓 ˜𝑤𝑛 )
Replace least frequently used typo ˜𝑤𝑜 and associated frequency
with ( ˜𝑤𝑛, 𝑓 ˜𝑤𝑛 + 𝑓 ˜𝑤𝑜 ) with probability
Make necessary replacements to ensure 𝑡 most frequently used
typos lie in cache
Initialize cache with 𝑡 most probable typos based on typo model;
never replace
+𝑓 ˜𝑤𝑜
𝑓 ˜𝑤𝑛
𝑓 ˜𝑤𝑛
PLFU
MFU
Best-𝑡
Figure 3: Table summarizing the caching schemes considered. Here
˜𝑤𝑛 denotes the wait list typo being considered for inclusion in the
cache, 𝑓 denotes the frequency count of the typo in subscript, and 𝑡
denotes the cache size.
As a benchmark against which to compare the utility benefit of
adaptive checking, we also consider a static caching policy Best-𝑡:
fill the cache of a given password 𝑤 with its 𝑡 most likely typos
according to some typo model, and then never update the cache.
Looking ahead, we will build a typo model from measurements of
typos made by users.
Admissible typos. As discussed in Section 3, care must be taken
when deciding which typos are cached. As such we use a procedure
valid to test whether an entry in the wait list should be input to
CacheUpdt as a candidate for inclusion. Our policy applies three
restrictions. Firstly, we set a threshold 𝑑, and only consider a typo
˜𝑤 of a password 𝑤 for inclusion if DL(𝑤, ˜𝑤) ≤ 𝑑. For TypTop we
use 𝑑 = 1 unless stated otherwise, allowing us to capture the caps
lock errors, single substitutions, deletions and transpositions which
studies indicate account for 46% of typos made by users [8].
Secondly, we wish to avoid including easily guessable typos in
the cache which may speed up guessing attacks — for example
Password1# may be mistyped as Password1, but the latter requires
only 8 attempts to guess as opposed to nearer 1,000 for the former
(as estimated by zxcvbn [35]). As such we impose two password
5
strength checks with associated thresholds 𝑚, 𝜎. For a typo ˜𝑤 of a
password 𝑤 to be considered admissible, ˜𝑤 must be such that both
𝜇 ˜𝑤 ≥ 𝑚 and 𝜇 ˜𝑤 ≥ 𝜇𝑤 − 𝜎, where 𝜇 denotes the strength estimate
of the password / typo in subscript. The first condition ensures