，在下一个例子中我们会再次提到。
第六章高级 sed 命令
 If I understand
你
---
## Page 128
改命令的情况了。
现在，我们就有了一个命令，这一命令可以处理一行中出现一个或多个字体更
些字符以外的所有的字符。下面是修订后的命令：
在字符类中，
我们可以通过将正则表达式“.*”修改为除“）”以外的零次或多次出现的任
找到的最后一个右圆括号时结束，
意
行上的最)
替换命令在前两行可以正确地工作。
在 sed 脚本中插入该命令，并在样本文件上运行它。
换部分，保存的匹配部分用“\1”回调.
进行单个匹配的最简单的方式是：
况。
这个样本文件展示了字体更改命令出现的不同环境。所写的脚本必须能匹配当
因
失
该
字符来解决这个问题，即：
为正则表达式总是进行可能最长的匹配。
效，在这些行上多次出现了字体更改命令。
亥正则表达式匹配“@f1（.*)”并使用\（和\）保存圆括号中的任意内容。在替
s/@f1(\([)]*\))/\fB\1\\fR/g 
$ sed -f sed. len test
s/@f1(\(. *\))/\fB\1\\fR/g
[^)]*
Another \fBone\fR.
on another Iine).
Let’ s test having two on a line \fBhere) and @f1(there\fR as
Is this really the case, 
things (correctly)， the \fBthird)
font change commands \fBon a set of lines\fR. If I
I want to see \fBwhat will happen\fR if we put the
后一行右圆括号的所有的字符。换句话说。由“.*”标识的跨度在它
脱字符（^）
QQ群：
. What if \fBit is here\fR on the line?
）反转了操作的含义，
50192241
or is it (maybe) just something else?
而不是第一个右圆括号。
。但它在第三行失效，在第二段的第一行也
128 -
“.*”匹配从“@f1（”开始到这一
Iine causes problems. (No?\fR.
，所以它匹配除方括号中指定的那
第六章高级 sed 命令
，或者扩展到多行的情
  understand
---
## Page 129
可以对它进行测式，得出：
模
测式文件上运行这个脚本的结果：
同
圆
他试图通过指定行范围来匹配跨越在多行上的出现来处理这个问题。下面是在
问
这个命令可以处理除第二段中扩展到两行的情况以外的所有情况。在解决这个
的匹配（\n表示换行符）。
括号的话，
式的解决方案是创建多行模式空间，如果我们匹配“@f1（”并且没有找到右
题以前，看看Lenny 的第-一个解决方案以及它为什么失败是很有趣的。下面
s/@f1(\([~)]*\))/\\fB\1\\fR/g
/@f1(. */ {
Another \fBone\fR.
on another line\fR. What if \fBit is here\fR on the line?
well as one that begins on one line and ends \fBsomewhere
Let’ s test having two on a line \fBhere) and (there\fR as
font change commands \fBon a set of lines\fR. If I understand 
I want to see \fBwhat will happen\fR if we put the 
$ sed -f sed. len test. len 
Is this really the case, or is it (maybe) just something else?
/@f1(/,/) / { 
Another
on another line).
well as one that begins on one line and ends @f1(somewhere
Let’ s test having two on a Iline \fBhere\fR and \fBthere\fR as
Is this really the case, or is it (maybe) just something else?
things (correctly), the \fBthird\fR line causes problems. (No?).
I want to see \fBwhat will happen\fR if we put the 
那么就需要将另一行读入（N）缓冲区并试着生成与第一种情况相
s/@f1(\(. *\n[^)]*\))/\\fB\1\\fR/g
\fBone\fR.
s/)/\\fR/g
s/@f1 (/\\fB/g
QQ群：
What if \fBit is here\fR on the line?
50192241
-129 -
第六章高级 sed 命令
---
## Page 130
行的副本。影响模式空间的命令有：
保持空间最常的用途是，
模式空间是容纳当前输入行的缓冲区。还有一个称为保持空间（hold space）
包含那一行
次听取 Lenny 的意见。
修订的脚本匹配样本文件中的所有的出现。然而，它并不完美。所以我们将再
在该行上还有其他的“@f1（”
这可以解释为：一旦进行跨越两行的替换，就打印第一行并且把它从模式空间
它
间
空
的
令。
命令应用到它。现在，
间输出这两行。
配
正如所看到的那样，
的内容。
移动数据。保持空间用于临时存储。单独的命令不能寻址保持空间或者更改
间的内容也可以复制到模式空间。有一组命令用于在保持空间和模式空间之
顶留（set-aside）缓冲区。模式空间的内容可以复制到保持空间，而且保持
除。第二部分保留在模式空间中，将控制转移到脚本的顶端，这时检查是否
一个输入/输出循环。我们在脚本中增加多行 Print 命令和多行Delete 命
。N命令将第二行读入模式空间。脚本匹配跨越两行的模式，
/@f1(. */ { 
s/@f1(\([^)]*\))/\fB\1\\fR/g
# Scribe font change script.
Let’ s test having two on a line \fBhere\fR and \fBthere\fR as
font change commands \fBon a set of lines\fR. If I
I want to see \fBwhat will happen\fR if we put the
$ sed -f sednew test 
Another \fBone\fR.
on another line\fR. What if @f1(it is here) on the line?
well as one that begins on one line and ends \fBsomewhere
Is this really the case, or is it (maybe) just something else?
s/@f1(\(. *\n[~)]*\))/\fB\1\\fR/g
P
N
，第二行会怎么样呢？它需要一个机会让脚本中从上至下的所有
QQ群：
我们捕捉了除了倒数第二个字体更改命令之外的所有匹
也许你明白了我们为什么需要像上一节所讨论的那样，
当改变模式空间中的原始内容时，用于保留当前输入
50192241
- 130 -
第六章高级 sed 命令
，然后从模式空
 understand
建
空
---
## Page 131
结尾。请看下面的脚本：
间。然后 sed 将第二行读入模式空间，并且将保持空间的行追加到模式空间的
保持空间：我们将第一行复制到保持空间（它一直在那）
这里的目的是颠倒以1开始的行和以2开始的行的顺序。
我们将编写一个脚本来反转部分行。我们将使用一个数字列表作为样本文件：
我们使用较通俗的示例来解释在保持空间放入行，并在稍后检索它们的情况。
交换命令交换两个缓存区的内容，对两个缓存区没有副作用。
的内容之后放置一个换行符，且后面跟随保持空间的内容。
Hole命令在保持空间的内容之后放置一个换行符，
取代模式空间的内容。
Hold 命令用模式空间的内容取代保持空间的内容。get 命令用保持空间的内容
的内容，
将数据移至保持空间、而 get（g.G）命令将保持空间的数据移回到模式空间。
这些命令中的每一条都可以利用一个地址来指定一行或行范围。Hole(h,H)命令
Exchange
Get
P10H
命
（即使保持空间是空的，
令
/1/{
#反转flip
G
/2/{
d
D
222
亿
7
而大写字母命令追加缓存区的现有内容。
g或G
h或
×
QQ群：
H
换行符也被追加到保持空间中）。Get 命令模式空间
50192241
交换保持空间和模式空间的内容
将保持空间的内容复制或追加到模式空间
将模式空间的内容复制或追加到保持空间
功
-131
且后面跟随模式空间的内容
第六章高级 sed 命令
，下面展示了如何使用
，这时清除模式空
---
## Page 132
语句名独立出来，并在模式空间进行转换。先来看看脚本：
用保持空间可以实现以上任务，
转换命令可以进行小写字母到大写字母的转换，但它将转换应用于整个行。使
式替换似乎是作件冗长乏味的工作。
就是将语句的名字改成大写，但是这里有将近100条语句。编写如何之多的显
当编写程序设计指南时，
大写字母。因为y命令作用于模式空间的所有内容，所以对行的一部分进行逐
上一章我们介绍了转换命令（y），
大写转换
就不会被输出。这是一个漏洞，因为它使行消失。
虽然这个对脚本对于演示这一目的是有用的，
验。还可以看看如果使用g代替G会出现什么情况。
完全删除 delete 命令，
一直进行到脚本的底部，并且模式空间的内容将被输出。如果脚本中使用
在 hold 命令后面跟 delete 命令是一种常见的搭配。没有 delete 命令，控制将
下面是在样本文件上运行这个脚本的结果：
保存这两行中的第一行并且直到匹配第二行时才输出它
保持空间的行追加到模式空间之后。然后两行都被打印出来。换句话说，我们
的顶端并且不打印那一行。当读取下一行时，
匹配“1”的任何行都被复制到保持空间并且从模式空间删除。控制转移到脚本
字
示那样。
母，但是有一些是小写字母另一些的首字母却是大写的。
 # capitalize statement names
s/find the Match statement/find the MATCH statement/g
111
222
$ sed -f sed.flip test.flip
二
亿
C
QQ群：
，或者在它的位置上放置 next 命令，来用这个脚本做实
我们发现语句的名字输入不一致，
50192241
因为可以用保持空间来存储输入行的备份而将
，那么模式空间的内容也会被输出。
，并且描述了在一行上如何将小写字母转换为
- 132 -
，但要注意这个脚本的逻辑性是很
它匹配模式“2”且将已经复制到
第六章高级 sed 命令
虽然任务很简单，
它们应该都为大写
，可以通过
---
## Page 133
s/\(. *\)\n\(. *the V). *\(statement. *\)/\2\1\3/ 
G Get 命令将保存在保持空间中的行追加到模式空间。
 y/abcdefghi jkImnopqrstuvwxyz/ABCDEFGHI JKLMNOPQRSTUVWXYZ/
这个命令人替换部分回调被保存的部分，并按不同的顺序重新组合它们，在
结尾处的所有的字符。当语句的名字出现在原始行中时，被匹配而不被保存
有的字符。2）从嵌入的换行符开始直到后面跟有一个空格的“the”，
这个替换命令从行中提取语句的名字，
式空间和保持空间的内容是完全相同的。
statrment",
hhold命令将当前输入行复制到保持空间。使用样本行“find the Match 
做了些什么：
“the”和“statement”之间放置大写的命令的名字。
这个替换命令匹配模式空间的3个不同的部分：1）嵌入的换行符之前的所
Hold Space:
Pattern Space:
Hold Space: 
Pattern Space:
Hold Space:
Pattern Space:
这个转换命令将每个小写字母转换成大写字母
Hold Space:
Pattern Space:
s/.*the \(.*\)
Hold Space:
Pattern Space:
s/\(. *\)\n\(. *the 1). *\( statement. *\)/\2\1\3/
y/abcdefghi jkImnopqr stuvwxyz/ABCDEFGHI JKLMNOPQRSTUVwXYZ/
s/. *the \(.*\) statement.*/\1/ 
/the .* statement/{
，我们来显示模式空间和保持空间的内容。在应用h命令之后，模
QQ群：
 statement.*/\1/
find the Match statement
find the MATCH statement
 find the Match statement
 MATCH\nfind the Match statement
find the Match statement
MATCH
find the Match statement
Match 
 find the Match statement
 find the Match statement
50192241
- 133 -
，并且用它来取代整个行。
第六章高级 sed 命令
，且包括
---
## Page 134
交换这两份备份，并编辑第二份备份。下面是脚本：
殊的元字符。
元字符，
我们必须维护索引条目的两份拷贝。编辑的第一份备份用于转义正则表达式的
识别一组不同的元字符。
index.edit,使它能寻找元字符并且转义它们。还有一种手法：在替换字符串中
处理这个条目之后，原始的index.edit 生成下列替换命令：
达式的元字符，如下所示：
到的这个脚本有一个小失误，它不能找出在索引条目中心字面值出现的正则表
取索引条目，
上一章介绍了名为index.edit 的 shell脚本。这个脚本从一个或多个文件中提
纠正索引条目 (第二部分)
容很有用。
从这个脚本可以看到，灵活地使用保持空间对于隔离和操作输入行的某部分内
在这个样本文件上运行以上脚本结果如下：
让我们来看看试运行。下面是样本文件：
虽
然它“知道“转义“.X”前面的句点，但是它不能保护元字符“*”。
#以便于编号匹配元字符的新版本
#index.edit－编辑索引项目的列表
#! /bin/sh 
/^\. XX /s/asterisk (*) metacharacter/asterisk (*) metacharacter/
using the READ statement to retrieve data
sed
grep'
.XX "asterisk (*) metacharacter"
Consult the GET statement.
find the MATCH statement
Using the Read statement to retrieve data
Consult the Get statement.
find the Match statement
然后再用于相应的模式。编辑的第二份备份转义对替换字符串来说特
"^\. xx" $* | sort -u |
并自动生成由每个索引条目的替换命令组成的 sed 脚本。我们提
QQ群：
50192241
，因此应用替换命令将失败。解决方面是修改
- 134 -
第六章高级 sed 命令
。问题
---
## Page 135
Get还插入一个换行符，所以有必要用替换命令删除它。最终输出如下的行：
然后Get 命令获取保持空间的替换字符串，
使用样本条目，模式空间将产生下列内容：
目，并且用替换命令的语法的第一部分取代这行：
备份，我们需要准备模式地址和替换模式。接下来的替换命令保存了索引条
再一次使用交换命令交换模式空间和保持空间的内容。对于模式空间的第一份
末端追加一个反斜杠，产生了一个如下替换字符串。
符号。然后用另一个替换命令从行中删除“.X”，随后的一条替换命令在这行
从行的新备份开始，
间的内容。
位于正则表达式的第一个或最后一个位置时才有的特殊含义，对于给定索引条
义而且必须被转义。并且，
式非常有趣：1）如果右方括号是字符类中的第一个字符，