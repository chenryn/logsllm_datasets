## 数据库三十六计 - PostgreSQL 三十六计(下)    
##### [TAG 22](../class/22.md)  
### 作者                                                                   
digoal                 
### 日期                   
2017-03-22                  
### 标签                 
PostgreSQL , 三十六计    
----                
## 背景      
## PostgreSQL 三十六计 - 下    
### 25. 数据库端编程，处理复杂业务逻辑。        
在传统企业、电商、运营商等涉及用户交互、或者多个系统交互的业务场景中，通常一个事务涉及到很复杂的业务逻辑，需要保证数据的一致性，同时还需要与数据库多次交互。        
比如银行开户，涉及的业务系统多，逻辑复杂。在传统企业中，通常也使用商业数据库的过程函数，实现此类复杂的逻辑。        
PostgreSQL的数据库过程函数支持的语言非常丰富，比如plpgsql（可与Oracle pl/sql功能比肩)，另外还支持语言的扩展，编程语言可以热插拔，例如支持python,perl,java,c,r 等等作为数据库的过程函数语言。        
对于开发人员来说，几乎可以在PostgreSQL数据库中处理任何业务逻辑。使用数据库端编程，可以在保证一致性的前提下，处理复杂的业务逻辑，减少数据库与程序的交互次数，降低整个事务的RT。    
https://www.postgresql.org/docs/10/static/plpgsql.html  
https://www.postgresql.org/docs/10/static/pltcl.html  
https://www.postgresql.org/docs/10/static/plperl.html  
https://www.postgresql.org/docs/10/static/plpython.html  
### 26. 善用ECPG，C嵌入式开发    
在一些对性能要求非常高的场景，同时考虑开发效率，C嵌入式开发是一个非常好的选择。    
比如在很多金融行业的开发商，ECPG和Oracle Pro*C一样具有同等地位。    
https://www.postgresql.org/docs/10/static/ecpg.html  
### 27. 数据库水平拆分、跨平台数据融合       
PostgreSQL 从 2011年的9.1版本引入FDW开始，发展到现在已经支持几乎所有的外部数据源读写操作，例如mysql,oracle,pgsql,redis,mongo,hive,jdbc,odbc,file,sqlserver,es,S3,......。          
https://wiki.postgresql.org/wiki/Fdw          
开放的接口，允许用户自己添加外部数据源的支持。          
9.6针对postgres_fdw（即PostgreSQL外部数据源）再次增强，开始支持对sort, where, join的下推，支持remote cancel query, 用户使用FDW可以对应用透明的实现数据库的sharding，单元化需求。          
内核层支持sharding，这种分片技术相比中间件分片技术的好处：         
1\. 支持跨库JOIN            
2\. 支持绑定变量            
3\. 支持master(coordinator)节点水平扩展          
4\. 支持segment(datanode)节点水平扩展          
5\. 支持函数和存储过程           
6\. 支持sort, where, join的下推，支持remote cancel query，10.x支持聚合算子的下推。        
7\. 支持单一SQL，在shard节点并行RUN QUERY。    
ps: 目前还不支持分布式事务（需要用户干预2PC） ，10.x的版本会增加内核层面的分布式事务控制。       
[《PostgreSQL 最佳实践 - 水平分库(基于plproxy)》](../201608/20160824_02.md)    
[《PostgreSQL 9.6 sharding based on FDW & pg_pathman》](../201610/20161027_01.md)    
[《PostgreSQL 9.6 sharding + 单元化 (based on postgres_fdw) 最佳实践 - 通用水平分库场景设计与实践》](../201610/20161005_01.md)    
[《阿里云ApsaraDB RDS for PostgreSQL 最佳实践 - 4 水平分库 之 节点扩展》](../201512/20151220_04.md)    
[《阿里云ApsaraDB RDS for PostgreSQL 最佳实践 - 3 水平分库 vs 单机 性能》](../201512/20151220_03.md)    
[《阿里云ApsaraDB RDS for PostgreSQL 最佳实践 - 2 教你RDS PG的水平分库》](../201512/20151220_02.md)    
### 28. 开发规约 - 命名     
1\. 长度不要超过63个字符，如果要超过的话，需要在编译PostgreSQL前修改头文件  
```  
src/include/pg_config_manual.h  
/*  
 * Maximum length for identifiers (e.g. table names, column names,  
 * function names).  Names actually are limited to one less byte than this,  
 * because the length must include a trailing zero byte.  
 *  
 * Changing this requires an initdb.  
 */  
#define NAMEDATALEN 64  
```  
2\. 不要使用关键字作为对象名。    
[《PostgreSQL Oracle兼容性 之 - parser SQL保留|关键字(keywrods)大全》](../201710/20171024_06.md)    
3\. 不要使用小写字母、数字和下划线以外的字符作为对象名。    
否则需要使用双引号。  
```  
create table "表aA-f3" (id int);  
```  
4\. 不建议使用多字节字符作为注释。    
### 29. 开发规约 - 设计     
1\. 同类属性，将来可能涉及JOIN，FK，务必对齐数据类型，包括数据长度。    
2\. BTREE索引字段，长度不建议超过2000字节，否则请使用hash索引或表达式索引。    
```  
create index idx on tbl using hash (long_col);  
create index idx on tbl (hashtext(long_col));  
```  
3\. 频繁更新的表、索引，建议设置合适的fillfactor。    
```  
create table ttt (id int) with (fillfactor=80);  
```  
4\. 定期删除历史数据的场景，建议使用分区表或继承表的方式，TRUNCATE或DROP或断开继承的方式删除分区或继承的数据。    
5\. 全球化业务，建议使用UTF-8字符集。    
6\. 使用能描述清楚数据的类型。能不用字符串的时候，尽量不要用字符串。    
7\. 不建议使用无序的UUID，也不建议在无序的UUID上建立索引，包括PK。    
8\. 根据不同的数据类型，数据的查询需求，使用合适的索引方法（Btree, GiST, GIN, SP-GiST, HASH, rum, BRIN, bloom）。    
[《PostgreSQL 9种索引的原理和应用场景》](../201706/20170627_01.md)    
9\. 建议不需要的大对象，要清理，否则会造成空间泄露。    
```  
vacuumlo removes unreferenced large objects from databases.  
Usage:  
  vacuumlo [OPTION]... DBNAME...  
Options:  
  -l LIMIT       commit after removing each LIMIT large objects  
  -n             don't remove large objects, just show what would be done  
  -v             write a lot of progress messages  
  -V, --version  output version information, then exit  
  -?, --help     show this help, then exit  
Connection options:  
  -h HOSTNAME    database server host or socket directory  
  -p PORT        database server port  
  -U USERNAME    user name to connect as  
  -w             never prompt for password  
  -W             force password prompt  
```  
10\. 不建议使用public schema(不同业务共享的对象可以使用public schema)，应该为每个应用分配对应的schema，schema_name最好与username一致。      
```  
create role user1;  
create schema user1 authorized user1;  
```  
11\. 用户应该对频繁访问的大表（例如超过16GB的表，或者超过1亿记录的表，视IOPS能力）进行分区，从而提升查询的效率、更新的效率、备份与恢复的效率、建索引的效率等等，（PostgreSQL 10支持多核创建索引，可以适当将这个限制放大）。     
https://www.postgresql.org/docs/10/static/ddl-partitioning.html  
12\. 多个业务共用一个PG集群时，建议为每个业务创建一个数据库。  如果业务之间有数据交集，建议使用同一个数据库，使用schema将其隔离。      
[《PostgreSQL 逻辑结构 和 权限体系 介绍》](../201605/20160510_01.md)    
![pic](../201605/20160510_01_pic_001.png)  
### 30. 开发规约 - QUERY    
1\. 返回大量结果集的时候，建议使用游标的方式流式返回。    
```  
begin;  
declare cur1 cursor for select * from tbl where xxx order by xxx;  
fetch 1000 from cur1;  
close cur1;  
end;  
```  
2\. 翻页时，不建议使用order by offset的方式，因为越到末尾，消耗越大。建议使用游标的方式翻页。    
或者使用OFFSET偏移条件。  
```  
select * from tbl where xxx and xx>last_offseted_val order by xxx limit xxx;  
```  
3\. 对于经常使用表达式作为查询条件的语句，应使用表达式或函数索引加速查询。     
```  
create index idx on tbl (udf(x,xxx));  
select * from tbl where udf(x,xxx) ...;  
```  
4\. 中文分词的查询，建议使用PostgreSQL的分词插件zhparser或jieba，用户还可以通过接口自定义词组。        
```  
create extension zhparser;  
```  
[《使用阿里云PostgreSQL zhparser中文分词时不可不知的几个参数》](../201603/20160310_01.md)    
5\. 规则表达式查询，文本近似度查询，前后模糊查询。建议对字段使用trgm的gin、gist索引。中文的支持确保数据库的lc_ctype不等于C。    
```  
create index idx on tbl using gin (txt gin_trgm_ops);  
```  