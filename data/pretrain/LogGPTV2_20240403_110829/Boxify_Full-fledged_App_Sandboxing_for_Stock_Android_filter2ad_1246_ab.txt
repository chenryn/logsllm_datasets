a
.
p
e
S
M
R
I
.
t
x
e
S
O
y
f
i
x
o
B
Objectives
O1: No system modiﬁcation
O2: No application modiﬁcation
O3: Robust reference monitor
   
O4: Secure isolation of untrusted code    
   
   
= applies; = does not apply.
Table 1: Comparison of deployment options for An-
droid security extensions based on desired objectives.
3.2.1 Android Security Extensions
Many improvements to Android’s security model
have been proposed in the literature, addressing a
variety of shortcomings in protecting the end-user’s
privacy. In terms of deployment options, we can dis-
tinguish between solutions that extend the Android
OS and solutions that operate at the application
layer only.
Operating system extensions. The vast major-
ity of proposals from the literature (e.g. [26, 44, 45,
16, 21, 58]) statically enhance Android’s application
framework and Linux kernel with additional refer-
ence monitors and policy decision points (see Fig-
ure 2). The proposed security models include, for
instance, context-aware policies [21], app developer
policies [45], or Chinese wall policies [16]. More re-
cent approaches [52, 43, 56] avoid static changes to
the OS by dynamically instrumenting core system
services (like Binder and Zygote) or the Android
bootup scripts in order to interpose [47] untrusted
apps’ syscalls and IPC. Since in all approaches the
reference monitors are part of the application frame-
work and kernel, there inherently exists a strong
security boundary between the reference monitor
and untrusted code (O3: ). Moreover, this en-
tails that these reference monitors are by design part
of the callee-side of all interaction of the untrusted
app’s process with the system and cannot be by-
694  24th USENIX Security Symposium 
USENIX Association
Application Framework
Service / System App
(Platform Permissions)
App (UIDApp)
Components
Components
Native Libs
Native Libs
App Framework
Service / System App
(Platform Permissions)
Dr. Android
Ref. Monitor
Zero-Perm App (UIDApp)
Native Libs
Mr. Hide
Binder IPC
Syscall
Binder IPC
Syscall
Binder IPC Module
Linux Kernel
Syscall API
(DAC + MAC)
Rewritten / Reference Monitor added
Binder Module
Linux Kernel
Syscall API
(DAC + MAC)
Rewritten / Reference Monitor added
Figure 3: Instrumentation points for application code
rewriting and inlining reference monitors.
passed (O4: ). On the downside, these solutions
require modiﬁcation of the Android OS (image) or
root privileges to be deployed (O1: ; O2: ).
Additionally, a number of solutions exist that par-
ticularly target higher-security deployments [17, 51,
40, 13], such as government and enterprise. Commer-
cial products exist that implement these solutions
in the form of tailored mobile platforms (e.g., Black-
phone1, GreenHills2, or Cryptophone3). These prod-
ucts target specialized user groups with high security
requirements—not the average consumer—and are
thus deployed on a rather small scale.
Application layer solutions. At the application
layer, the situation for third-party security extensions
is bleak. Android’s UID-based sandboxing mecha-
nism strictly isolates diﬀerent apps installed on the
same device. Android applications run with normal
user privileges and cannot elevate to root in order to
observe the behavior of other apps, e.g., like classical
trace or anti-virus programs on desktop operating
systems [31]. Also, Android does not oﬀer any APIs
that would allow one app to monitor or restrict the
actions of another app at runtime. Only static infor-
mation about other apps on the device is available via
the Android API, i.e., application metadata, such as
the package name or signing certiﬁcate, and the com-
piled application code and resources.Consequently,
most commercially available security solutions are
limited to detecting potentially malicious apps, e.g.
by comparing metadata with predeﬁned blacklists
or by checking the application code for known mal-
ware signatures, but they lack the ability to observe
or inﬂuence the runtime behavior of other applica-
tions. As a result, their eﬀectiveness is, at best,
debatable [50, 62].
Few proposals in the academic literature [38, 59,
23, 49, 15] focus on application layer only solutions
(see Figure 3). Existing systems mostly focus on
access control by interposing security-sensitive APIs
1https://blackphone.ch
2http://www.ghs.com/mobile/
3http://esdcryptophone.com
Figure 4: Dr. Android and Mr. Hide approach [38].
to redirect the control ﬂow to an additionally in-
lined reference monitor within the app (e.g., Aura-
sium [59], I-ARM-Droid [23], RetroSkeleton [22],
AppGuard [15]). DroidForce [49] additionally pre-
processes target apps with static data ﬂow analysis
to identify strategic policy enforcement points and
to redirect policy decision making to a separate app.
All these systems are based on rewriting the appli-
cation code to inline reference monitors or redirect
control ﬂows, which works without modiﬁcations
to the ﬁrmware and is thus suitable for large-scale
deployment (O1: ; O2: ). However, app rewrit-
ing causes security problems and also a couple of
practical deployment problems. First, inlining the
reference monitor within the process of the untrusted
app itself might be suitable for “benign-but-buggy”
apps; however, apps that actively try to circumvent
the monitor will succeed as there exists no strong
security boundary between the app and the moni-
tor. In essence, this boils down to an arms race be-
tween hooking security critical functions and ﬁnding
new ways to compromise or bypass the monitor [36],
where currently native code gives the attacker the
advantage (O3: ; O4: ). Moreover, re-writing ap-
plication code requires re-signing of the app, which
breaks Android’s signature-based same origin policy
and additionally raises legal concerns about illicit
tampering with foreign code. Lastly, re-written apps
have to be reinstalled. This is not technically possi-
ble for pre-installed system apps; other apps have to
be uninstalled in order to install a fresh, rewritten
version, thereby incurring data loss.
Separate app. Dr. Android and Mr. Hide [38] (see
Figure 4) is a variant of inlined reference monitoring
(O1: ; O2: ) that improves upon the security of
the reference monitor by moving it out of the un-
trusted app and into a separate app. This establishes
a strong security boundary between the untrusted
app and the reference monitor as they run in separate
processes with diﬀerent UIDs (O3: ). Additionally,
it revokes all Android platform permissions from the
untrusted app and applies code rewriting techniques
to replace well-known security-sensitive Android API
calls in the monitored app with calls to the separate
USENIX Association  
24th USENIX Security Symposium  695
reference monitor app that acts as a proxy to the
application framework. The beneﬁt of this design is
that in contrast to inlined monitoring, the untrusted,
zero-permission app cannot gain additional permis-
sions by tampering with the inlined/rewritten code.
However, this enforcement only addresses the plat-
form permissions. The untrusted app process still
has a number of Linux privileges (such as access to
the Binder interface or ﬁle system), and it has been
shown that even a zero-permission app is still capa-
ble of escalating its privileges and violate the user’s
privacy [30, 33, 19, 18, 60, 42, 11, 12] (O4: ).
3.2.2 Sandboxing on traditional OSes
Restricting the access rights of untrusted applications
has a longstanding tradition in desktop and server
operating systems. Few solutions set up user-mode
only sandboxes without relying on operating system
functionality by making strong assumptions about
the interface between the target code and the sys-
tem (e.g., absence of programming language facilities
to make syscalls or direct memory manipulation).
Among the most notable user-space solutions are na-
tive client [61] to sandbox native code within browser
extensions and the Java virtual machine [5] to sand-
box untrusted Java applications.
Other solutions, which loosen the assumptions
about the target interface to the system rely on op-
erating system security features to establish process
sandboxes. For instance, Janus [31], one of the ear-
lier approaches, introduced an OS-supported sandbox
for untrusted applications on Solaris 2.4, which was
based on syscall monitoring and interception to re-
strict the untrusted process’ access to the underlying
operating system. The monitor was implemented as
a separate process with necessary privileges to moni-
tor and restrict other processes via the /proc kernel
interface. Modern browsers like Chromium [9, 3, 8]
employ diﬀerent sandboxing OS facilities (e.g, sec-
comp mode) to mitigate the threat of web-based
attacks against clients by restricting the access of
untrusted code.
App virtualization.
Sandboxing also plays a
role in more recent application virtualization solu-
tions [34, 10, 20, 41], where applications are trans-
parently encapsulated into execution environments
that replace (parts of) the environment with emu-
lation layers that abstract the underlying OS and
interpose all interaction between the app and the
OS. App virtualization is currently primarily used to
enable self-contained, OS-agnostic software, but also
provides security beneﬁts by restricting the interface
and view the encapsulated app has of the system.
App Framework
Service / System App
Process
(Platform Permissions)
boundaries
Boxify
Process
boundaries
Isolated App A
(Target)
Shim
Isolated App B
(Target)
Shim
Broker (Reference Monitor)
Binder IPC
Syscall
Binder Module
Linux Kernel
Syscall API
(DAC + MAC)
Figure 5: Architecture overview of Boxify.
Similarly to these traditional sandboxes and in
particular to app virtualization, Boxify forms a user-
mode sandbox that builds on top of existing operating
system facilities of Android. Thereby, it establishes
app sandboxes that encapsulate Android apps with-
out the need to modify the OS and without the need
to make any assumptions about the apps’ code.
4 Boxify Architecture
We present the Boxify design and implementation.
4.1 Design Overview
The key idea of Boxify is to securely sandbox Android
apps, while avoiding any modiﬁcation of the OS and
untrusted apps. Boxify accomplishes this by dynami-
cally loading and executing the untrusted app in one
of its own processes. The untrusted application is
not executed by the Android system itself, but runs
completely encapsulated within the runtime environ-
ment that Boxify provides and that can be installed
as a regular app on stock Android (see Figure 5).
This approach eliminates the need to modify the
code of the untrusted application and works without
altering the underlying OS (O1: ; O2: ). It thus
constitutes the ﬁrst solution that ports the concept
of app virtualization to the stock Android OS.
The primary challenge for traditional application
sandboxing solutions is to completely mediate and
monitor all I/O between the sandboxed app and the
system in order to restrict the untrusted code’s priv-
ileges. The key insight for our Boxify approach is to
leverage the security provided by isolated processes
in order to isolate the untrusted code running within
the context of Boxify by executing it in a completely
de-privileged process that has no platform permis-
sions, no access to the Android middleware, nor the
ability to make persistent changes to the ﬁle system.
However, Android apps are tightly integrated
within the application framework, e.g., for lifecycle
696  24th USENIX Security Symposium 
USENIX Association
management and inter-component communication.
With the restrictions of an isolated process in place,
encapsulated apps are rendered dysfunctional. Thus,
the key challenge for Boxify essentially shifts from
constraining the capabilities of the untrusted app
to now gradually permitting I/O operations in a
controlled manner in order to securely re-integrate
the isolated app into the software stack. To this
end, Boxify creates two primary entities that run at
diﬀerent levels of privilege: A privileged controller
process known as the Broker and one or more isolated
processes called the Target (see Figure 5).
The Broker is the main Boxify application process
and acts as a mandatory proxy for all I/O operations
of the Target that require privileges beyond the ones
of the isolated process. Thus, if the encapsulated app
bypasses the Broker, it is limited to the extremely con-
ﬁned privilege set of its isolated process environment
(fail-safe defaults; O4: ). As a consequence, the
Broker is an ideal control-ﬂow location in our Boxify
design to implement a reference monitor for any priv-
ileged interaction between a Target and the system.
Any syscalls and Android API calls from the Target
that are forwarded to the Broker are evaluated against
a security policy. Only policy-enabled calls are then
executed by the Broker and their results returned to
the Target process. To protect the Broker (and hence
reference monitor) from malicious app code, it runs
in a separate process under a diﬀerent UID than the
isolated processes. This establishes a strong secu-
rity boundary between the reference monitor and the
untrusted code (O3: ). To transparently forward
the syscalls and Android API calls from the Target
across the process boundary to the Broker, Boxify
uses Android’s Binder IPC mechanism. Finally, the
Broker’s responsibilities also include managing the
application lifecycle of the Target and relaying ICC
between a Target and other (Target) components.
The Target hosts all untrusted code that will run
inside the sandbox. It consists of a shim that is able
to dynamically load other Android applications and
execute them. For the encapsulated app to interact
with the system, it sets up interceptors that interpose
system and middlware API calls. The interceptors do
not form a security boundary but establish a compat-
ibility layer when the code inside the sandbox needs
to perform otherwise restricted I/O by forwarding
the calls to the Broker. All resources that the Target
process uses have to be acquired by the Broker and
their handles duplicated into the Target process.
By encapsulating untrusted apps and interposing
all their (privileged) I/O operations, Boxify is able to
eﬀectively enforce security- and privacy-protecting
policies. Based on syscall interposition, Boxify has
Shim code
e
c
i
x
o
b
d
n
a
S
v
r
e
S
l
e
n
n
a
h
C
l
o
r
t
n
o
C
Target (Isolated Process)
Untrusted App Code
Binder IPC Interceptor Syscall Interceptor
Binder IPC
Syscall
Broker
Figure 6: Components of a Target process.
ﬁne-grained control over network and ﬁlesystem op-
erations. Intercepting Binder IPC enables the en-
forcement of security policies that were so far only
achievable for OS extensions, but at application layer
only.
Moreover, with this architecture, Boxify can pro-
vide a number of interesting novel features. Boxify
is capable of monitoring multiple (untrusted) apps
at the same time. By creating a number of Target
processes, multiple apps can run in parallel yet se-