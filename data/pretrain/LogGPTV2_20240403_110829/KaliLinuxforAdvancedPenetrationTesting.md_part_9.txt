http://web.nvd.nist.gov/view/vuln/search
• Secunia available at http://secunia.com/community/
• Open Source Vulnerability Database Project (OSVDP) available at
http://www.osvdb.org/search/advsearch
• Packetstorm security available at http://packetstormsecurity.com/
• SecurityFocus available at http://www.securityfocus.com/
vulnerabilities
• Inj3ct0r available at http://1337day.com/
• The Exploit Database maintained by Offensive Security available at
http://www.db-exploit.com
The exploit database is also copied locally to Kali and it can be found in the /usr/
share/exploitdb directory. Before using it, make sure that it has been updated
using the following command:
cd /usr/share/exploitdb
wget http://www.exploit-db.com/archive.tar.bz2
tar -xvjf archive.tar.bz2
rm archive.tar.bz2
To search the local copy of exploitdb, open a terminal window and enter
searchsploit and the desired search term(s) in the command prompt. This will
invoke a script that searches a database file (.csv) that contains a list of all exploits.
The search will return a description of known vulnerabilities as well as the path to
a relevant exploit. The exploit can be extracted, compiled, and run against specific
vulnerabilities. Take a look at the following screenshot, which shows the description
of the vulnerabilities:
[ 94 ]
Chapter 4
The search script scans for each line in the CSV file from left to right, so
the order of the search terms is important—a search for oracle 10g
will return several exploits, but 10g oracle will not return any. Also,
the script is weirdly case sensitive; although you are instructed to use
lower case characters in the search term, a search for Bulletproof
FTP returns no hits, but bulletproof FTP returns seven hits, and
bulletproof ftp returns no hits. More effective searches of the CSV
file can be conducted using the grep command or a search tool such as
KWrite (apt-get install kwrite).
A search of the local database may identify several possible exploits with a
description and a path listing; however, these will have to be customized to your
environment, and then compiled prior to use. Copy the exploit to the /tmp directory
(the given path does not take into account that the /windows/remote directory
resides in the /platforms directory).
Exploits presented as scripts such as Perl, Ruby, and PHP are relatively easy to
implement. For example, if the target is a Microsoft II 6.0 server that may be vulnerable
to a WebDAV remote authentication bypass, copy the exploit to the root directory and
then execute as a standard Perl script, as shown in the following screenshot:
[ 95 ]
Exploit
Many of the exploits are available as source code that must be compiled before use.
For example, a search for RPC-specific vulnerabilities identifies several possible
exploits. An excerpt is shown in the following screenshot:
The RPC DCOM vulnerability identified as 76.c is known from practice to be
relatively stable. So, we will use it as an example. To compile this exploit, copy it
from the storage directory to the /tmp directory. In that location, compile using GCC
with the command as follows:
root@kali:~# gcc 76.c -o 76.exe
This will use the GNU Compiler Collection application to compile 76.c to a file with
the output (-o) name of 76.exe, as shown in the following screenshot:
When you invoke the application against the target, you must call the executable
(which is not stored in the /tmp directory) using a symbolic link as follows:
root@kali:~# ./76.exe
The source code for this exploit is well documented and the required parameters are
clear at the execution, as shown in the following screenshot:
[ 96 ]
Chapter 4
Unfortunately, not all exploits from exploit database and other public sources
compiled as readily as 76.c. There are several issues that make the use of such
exploits problematic, even dangerous, for penetration testers listed as follows:
• Deliberate errors or incomplete source code are commonly encountered as
experienced developers attempt to keep exploits away from inexperienced
users, especially beginners who are trying to compromise systems without
knowing the risks that go with their actions.
• Exploits are not always sufficiently documented; after all, there is no
standard that governs the creation and use of code intended to be used
to compromise a data system. As a result, they can be difficult to use,
particularly for testers who lack expertise in application development.
• Inconsistent behaviors due to changing environments (new patches applied
to the target system and language variations in the target application) may
require significant alterations to the source code; again, this may require a
skilled developer.
• There is always the risk of freely available code containing malicious
functionalities. A penetration tester may think that he is conducting a
proof of concept (POC) exercise and will be unaware that the exploit has
also created a backdoor in the application being tested that could be used by
the developer.
To ensure consistent results and create a community of coders who follow consistent
practices, several exploit frameworks have been developed. The most popular
exploitation framework is the Metasploit Framework.
[ 97 ]
Exploit
The Metasploit Framework
The Metasploit Framework (MSF) is an open source tool designed to facilitate
penetration testing. Written in the Ruby programming language, it uses a modular
approach to facilitating exploits. This makes it easier to develop and code exploits,
and it also allows for complex attacks to be easily implemented.
MSF can present multiple interfaces to the backend modules that control
exploitation (console, CLI, and web). We will use the console interface for its speed,
because it presents the attack commands, and it has the required configuration
parameters in an easy-to-understand interface. To access this interface, enter
msfconsole in a command prompt or select it from a drop-down menu such as
Top 10 Security Tools. The following screenshot shows the splash screen when the
application launches:
The MSF consists of modules that are combined to affect an exploit. The modules
and their specific functions are as follows:
• Exploits: The code fragments that target specific vulnerabilities. Active
exploits will exploit a specific target, run until completed, and then exit
(for example, a buffer overflow). Passive exploits wait for incoming hosts,
such as web browsers or FTP clients, and exploit them when they connect.
• Payloads: These are the malicious code that implement commands
immediately following a successful exploitation.
[ 98 ]
Chapter 4
• Auxiliary modules: These modules do not establish or directly support
access between the tester and the target system; instead, they perform
related functions such as scanning, fuzzing, or sniffing that support the
exploitation phase.
• Post modules: Following a successful attack, these modules run on
compromised targets to gather useful data and pivot the attacker deeper
into the target network. We will learn more about the post modules in
Chapter 5, Post Exploit – Action on the Objective.
• Encoders: When exploits must bypass antivirus defenses, these modules
encode the payload so that it cannot be detected using signature matching
techniques.
• No operations (NOPs): These are used to facilitate buffer overflows
during attacks.
These modules are used together to conduct reconnaissance and launch attacks
against targets. The steps for exploiting a target system using MSF can be
summarized as follows:
1. Choose and configure an exploit (the code that compromises a specific
vulnerability on the target system).
2. Check the target system to determine if it is susceptible to attack by the
exploit. This step is optional and is usually omitted to minimize the
detection.
3. Choose and configure the payload (the code that will be executed on the
target system following a successful exploitation. For example, a reverse
shell from the compromised system back to the source).
4. Choose an encoding technique to bypass detection controls (IDs/IPs or
antivirus software).
5. Execute the exploit.
The next example represents a simple attack against the target Linux-based
operating system Metasploitable2. It is available online at http://sourceforge.
net/projects/metasploitable/files/Metasploitable2. Metasploitable2
was designed to be vulnerable to attack, and it contains known and characterized
vulnerabilities that provide a standard platform for training and for validating
exploit tools.
[ 99 ]
Exploit
When installed as a virtual machine (covered in Appendix, Installing Kali Linux),
Metasploitable can be scanned using nmap, which identifies open ports and associated
applications. An excerpt of the nmap scan is shown in the following screenshot:
Several applications were identified by nmap in the preceding example. As a tester,
we should investigate each one for any known vulnerabilities. One of the first places
to start is, Metasploit's own collection of exploits. This can be searched from the
following command line using:
msf> search samba
The returned exploits for the samba service are listed and each of them is assigned
a relative ranking of how successful they are at achieving an exploit. The following
screenshot shows an excerpt of the available samba exploits:
[ 100 ]
Chapter 4
The exploit/multi/samba/usermap_script exploit was selected for use in
the remainder of this example because it is ranked as excellent. This ranking was
determined by the Metasploit development team and identifies how reliably the
exploit works for a skilled tester against a stable target system. In real life, multiple
variables (tester skills, protective devices on the network, and modifications to the
operating system and hosted applications) can work together to significantly alter
the reliability of the exploit.
Additional information pertaining to that exploit was obtained using the following
info command:
msf> info exploit/multi/samba/usermap_script
The returned information includes references as well as the information shown in the
following screenshot:
[ 101 ]
Exploit
To instruct Metasploit that we will attack the target with this exploit, we issue the
following command:
msf> use exploit/multi/samba/usermap_script
Metasploit changes the command prompt from msf> to msf exploit
(usermap_script) >.
Metasploit prompts the tester to select the payload (a reverse shell from the
compromised system back to the attacker) and sets the other variables listed
as follows:
• Remote host (RHOST): This is the IP address of the system being attacked
• Remote port (RPORT): This is the port number that is used for the exploit
• Local host (LHOST): This is the IP address of the system used to launch
the attack
The attack is launched by entering the exploit command at the prompt after all
variables have been set. Metasploit initiates the attack and confirms that a reverse
shell is present by indicating command shell 1 opened and giving the IP addresses
that originate and terminate the reverse shell.
To verify that a shell is present, the tester can issue queries for the hostname,
username (uname -a), and whoami to confirm that the results are specific to the target
system that is located at a remote location. Take a look at the following screenshot:
[ 102 ]
Chapter 4
When a system is compromised to this extent, it is ready for the post-exploitation
activities ( see Chapter 5, Post Exploit – Action on the Objective and Chapter 6, Post Exploit
– Persistence). To add new exploits to Metasploit, in Ruby script (.rb) or Python (.py),
place them in the hidden .msf4 folder located in your home directory, and then
reload msfconsole.
Exploiting a vulnerable application
The Metasploit Framework is equally effective against vulnerabilities in the
operating system as well as third-party applications. In this example, we'll exploit
a buffer overflow vulnerability that was identified in Chasys Draw IES (Version
4.10.01). The vulnerability exists in the ReadFile function, which is used to store
user-provided data in an insecure way. Exploitation results in arbitrary code
execution under the context of the user.
To initiate the attack, the tester needs to generate a specially crafted BMP file and
then get the victim to open that file in the Chasys application. When this occurs, it
will compromise the base operating system (effective against Windows XP SP3 and
Windows 7 SP1).
The first step is to open msfconsole and set Metasploit to use exploit/windows/
fileformat/chasys_draw_ies_bof, as shown in the following screenshot:
Again, the exploit is a relatively simple exploit. It requires the tester to set a reverse
shell (reverse_tcp) from the compromised system back to the tester's system, the
Local Host (LHOST).
When the exploit is completed, it creates the specially-crafted BMP file, which is
stored with the default name of msf.bmp. To entice the target to open the file and
avoid a default name that may be detected by some devices, it is best to change
the filename to something that is more relevant to the intended target.
[ 103 ]
Exploit
The next step is to open a new instance of msfconsole, and set up a listener for
the incoming reverse TCP shell that will originate from the target when it is
compromised. A simple listener is shown in the following screenshot:
Once the victim opens the crafted BMP image file in the vulnerable application,
a meterpreter session is opened between the two systems. The msf prompt is
replaced by the meterpreter prompt and the tester can effectively access the remote
system with a command shell. One of the first steps after the compromise is to verify
that you are on the target system; as you can see in the following screenshot, the
sysinfo command identifies the computer name and operating system, verifying a
successful attack:
[ 104 ]
Chapter 4
Exploiting multiple targets with Armitage
Armitage is frequently overlooked by penetration testers who eschew its GUI
interface in favor of the traditional command-line input of the Metasploit console.
However, it possesses Metasploit's functionality while giving visibility to its many
possible options, making it a good alternative in complex testing environments.
Unlike Metasploit, it also allows you to test multiple targets at the same time—up to
512 targets at once.
To start Armitage, ensure that the database and Metasploit services are started using
the following command:
service postgresql start
service metasploit start
After that step, enter armitage over the command prompt to execute the command.
Armitage does not always execute cleanly and it may require the launch steps to be
repeated to ensure that it is functioning correctly.
To discover available targets, you can manually add a host by providing its IP
address or select an nmap scan from the Hosts tab on the menu bar. Armitage can
also enumerate targets using MSF auxiliary commands or DNS enumeration.
Armitage can also import host data from the following files: Acunetix, amap,
AppScan, Burp proxy, Foundstone, Microsoft Baseline Security Analyzer, Nessus
NBE and XML files, NetSparker, NeXpose, nmap, OpenVas, Qualys, and Retina.
The initial Armitage start-screen is shown in the following screenshot:
[ 105 ]
Exploit
Armitage allows you to set a host label by selecting a host using a right-click, and
then going to the Host menu and selecting the Set Label… function. This allows you
to flag a particular address or identify it by a common name, which is helpful when
using team-based testing. This process is shown in the following screenshot:
Armitage also supports dynamic workspaces—a filtered view of the network based
on network criteria, operating system, open ports and services, and labels. For
example, you may test a network and identify several servers that do not appear to
be patched to the extent of the remainder of the network. These can be highlighted
by giving them a label and then placing them in a priority workspace.
Once you have identified the target systems that are present on a network, you can
select specific modules to implement as part of the exploitation process. You can also
use the Attacks option in the menu bar to find attacks.
To exploit a host, select it with a right-click, navigate to the Attack item, and choose
an exploit (make sure that the operating system is set for the correct host; this does
not always happen automatically).
One interesting option is Hail Mary, located under the Attacks option. By selecting
this function, all identified systems are automatically subjected to exploits to achieve
the greatest number of possible compromises. This is a very noisy attack and should
therefore be used as a test choice of the last resort. It is also an excellent way to
determine if an intrusion detection system is implemented and configured properly!
[ 106 ]
Chapter 4
A system that is compromised shows up as an icon with a red border with electrical
sparks. In the next screenshot, two test systems have been compromised and there
are four active sessions in place between these systems and the tester. The Active
Sessions panel indicates the connections and identifies what exploit was used to
compromise the target. Take a look at the following screenshot that represents the
different options:
During a penetration test that was conducted, the Hail Mary
option identified two exploitable vulnerabilities with the target
and initiated two active sessions. Manual testing with the same
target eventually identified eight exploitable vulnerabilities, with
multiple communications channels between the compromised
system and the tester. Real-world tests of this type reinforce
the advantages and weaknesses of automated tools during the
penetration testing process.
Team testing with Armitage
Armitage is more than a GUI frontend for the Metasploit Framework; it is a
scriptable penetration testing tool that allows a team to use a single instance of the
Metasploit Framework so that the GUI displays the following functions:
• It uses the same session, allowing one tester to oversee the process, identify
findings of interest, and control the direction of testing.
• It runs scripts to automate testing tasks.
[ 107 ]
Exploit
• It shares downloaded files such as password files. This allows one team
member to focus on password cracking, while other team members continue
the exploitation phase.
• It communicates using a shared event log.
To take advantage of the team configuration, ensure that Armitage is not already
running and then invoke the teamserver script from a console prompt in the
Armitage directory, usually /usr/share/armitage, as follows:
root@kali:/usr/share/armitage# ./teamserverip_address password
Ensure that the IP address is correct, as it is not verified by Armitage, and that all
team members can access the host on port 55553. When you start the Armitage
team server, it communicates with team members using an SSL certificate; team
members should verify that the SHA-1 hash of the certificate matches the server's
SSL certificate.
Do not connect to 127.0.0.1 when the teamserver script is running, as Armitage
uses that IP address to connect and determine whether it should use SSL
(teamserver or a remote address) or non-SSL (localhost or msfrpcd). To connect
Armitage to teamserver locally, use the external IP address in the Host field.
Users can open one or more command shells, browse files, download data, and take
screenshots. Shell sessions are automatically locked when in use, and then unlocked.
However, some meterpreter scripts may fail to function over time.
To communicate as a team, the View option in the menu opens the shared event log.
You can make entries onto the log as you would if you were using IRC or some other