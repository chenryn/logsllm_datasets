ing will be displayed to the user for at least ﬁve sec-
onds. Then, if the bootloader is in the LOCKED state,
the device will not boot, otherwise, if the bootloader
is in the UNLOCKED state the Android kernel will be
loaded.
• The device will only transition from the LOCKED
state to the UNLOCKED state if the user ﬁrst selects
the “allow OEM Unlock” option from the Devel-
oper Options menu in Android’s settings applica-
tion, and then issues the Fastboot command oem
unlock, or an equivalent action for devices without
Fastboot.
• When the device’s lock state changes for any rea-
son, user-speciﬁc data will be rendered unreadable.
Beyond the guidelines, Android bootloaders (typically
those that fall into Class B) also provide some means of
rewriting partitions on internal storage over USB. Google
suggests the use of the Fastboot protocol, also utilized for
the locking and unlocking process, for this functionality.
3 Bootloaders in Practice
While the standards and guidelines on bootloader design
in the previous section do cover many important security-
related aspects, a signiﬁcant amount of ﬂexibility is given
to OEMs to allow for functionality speciﬁc to their plat-
forms. These involve both aspects of the hardware itself,
but also logical issues with managing the security state
of the device. Even though this ﬂexibility makes it hard
to reason about the actual security properties of bootload-
ers, it is difﬁcult to envision a future for which these stan-
dards would be more precise. In fact, there are a number
of technical reasons due to which the deﬁnition of these
standards cannot be as comprehensive as we would hope.
One of these technical aspects is related to peripherals
and additional custom hardware that is shipped with each
device. While platform-speciﬁc code can be inserted at
every stage in ARM’s prototypical Trusted Boot imple-
mentation, no direction is given as to what code should
be inserted at which points in the boot process. Addi-
tionally, initialization tasks cannot be too tightly coupled
with the rest of the boot sequence, as peripheral hard-
ware, such as modems, may incorporate code from dif-
ferent vendors and necessitate a modiﬁcation of the ini-
tialization process. Furthermore, vendors of the ﬁnal de-
vices may not be able to alter earlier stages of the boot
process to add necessary initialization code, as they may
be locked to code supplied by the chip manufacturer. Fi-
nally, even aside from these issues, there are constraints
on storage media. ROMs, such as those mandated for the
ﬁrst bootloader stage, tend to be small, and are inherently
a write-once medium, precluding their use for any code
that may need to be updated.
As an example, consider a mobile device with an on-
board GSM or LTE modem. Depending on the hardware
used, this modem could exist either as part of the System-
on-a-chip (SoC) package or externally on another chip.
Because the initialization of these two layouts has differ-
ent requirements (e.g., initializing memory busses and
784    26th USENIX Security Symposium
USENIX Association
BL1/BootROMBL2BL31Trusted OS (tz)Trusted AppsAndroid Kernel (boot)BL33 (aboot)Android Framework/Apps (system/data)Peripheral Firmware (radio)Secure WorldNon-Secure WorldEL3EL1EL0if UNLOCKED,skip verificationLoad and Verifytransferring code to an external modem vs. executing
modem code on the same chip), this may need to happen
at different phases in the boot process, where different
levels of hardware access are available.
This also applies to various bootloader services, such
as partition management and unlocking. Google’s im-
plementation provides the Fastboot protocol in the ﬁnal-
stage bootloader, but manufacturers are free to use alter-
native methods, as well as incorporate this functionality
into other boot stages.
Where and how all of these features are implemented
can have a signiﬁcant security impact.
If a stage in
the bootloader is compromised, this could lead to the
compromise of all following stages, along with any pe-
ripherals or secured storage that they manage. The im-
pact of gaining control over a bootloader can be miti-
gated by using the lowest-possible Exception Level (dis-
cussed in the previous section), and performing tasks that
involve taking potentially-untrusted input in later, less-
privileged stages of the process. However, once again,
other than the Trusted Firmware reference implementa-
tion, no guidance is given on how to manage exception
levels with respect to bootloader features.
One aspect that increases the attack surface of modern
bootloaders is that the code used to bootstrap additional
hardware, such as modems, needs to be updateable, and
thus needs to be stored on writable partitions. These
writeable partitions, in turn, could be modiﬁed by an at-
tacker with privileged code execution. Thus, it is critical
that the content of these partitions is veriﬁed, such as by
checking the validity of a cryptographic signature. This
should ideally be accomplished by a previous bootloader
stage, which thus needs to load, parse, and verify these
partitions. This usage of data from writeable (and, as dis-
cussed previously, potentially attacker-controlled) parti-
tions is what makes common memory corruption vulner-
abilities in bootloaders very dangerous.
3.1 Bootloader Implementations
In the remainder of this section, we will explore four
bootloaders from popular device manufacturers. These
implementations all serve the same functions for their
respective hardware platforms and aim to comply with
both ARM and Google’s standards, but do so in vastly
different ways.
A comparison of the implementations can be found in
Table 1. If an attacker can compromise the ﬁnal stage
bootloader, they will likely be able to also affect any
functionality it contains, as well as any that it in turn
loads, which in these cases, is the Android kernel and
OS.
Qualcomm. The Qualcomm MSM chipset family is by
far the most popular mobile chipset in devices today, rep-
Vendor
EL Fastboot
Qualcomm EL1
HiSilicon EL3
NVIDIA EL1
MediaTek EL1




Modem
Peripherals
Initialization Initialization








Table 1: Final-stage Bootloader features, and which Exception
Level they occur in
resenting over 60% of mobile devices [16]. While many
manufacturers of MSM-based devices will customize the
bootloader to ﬁt their speciﬁc product’s features, Qual-
comm’s “aboot” bootloader is still used with little mod-
iﬁcations on many of them.
aboot is based on the Little Kernel (LK) open-source
project, and provides the ﬁnal stage non-secure OS load-
ing functionality (equivalent to BL33 in ARM’s refer-
ence implementation).
In further similarity to BL33,
it runs at EL1, giving it the same level of privilege as
the kernel it aims to load. It conforms very closely to
Google’s Veriﬁed Boot guidelines, implementing the tra-
ditional set of Android-speciﬁc features, including Fast-
boot, recovery partition support, and unlocking. aboot
can be used in either a Class A or Class B Veriﬁed
Boot implementation, as Fastboot, and therefore unlock-
ing can be disabled by the OEM or mobile carrier.
HiSilicon and Huawei. HiSilicon Kirin-based devices,
such as those from Huawei, implement a very different
bootloader architecture to the others we examined. In-
stead of merely being responsible for the initialization
required to load Android, this loader also combines func-
tionality usually found elsewhere in the boot process,
such as initializing the radio hardware, secure OS, se-
cure monitor, among others, giving it the equivalent roles
of BL31, BL33, and BL2 in the ARM reference imple-
mentation. In fact, this bootloader is loaded directly by
the ROM-based ﬁrst-stage bootloader (BL1). To have
the privilege necessary to perform all these tasks, HiSi’s
bootloader runs at EL3, and executes the Linux kernel in
the boot partition at EL1 when it is ﬁnished. Along with
its hardware initialization tasks, it also includes Fastboot
support, by which it allows for unlocking.
MediaTek. Devices based on MediaTek chipsets, such
as the Sony Xperia XA and other similar handsets, im-
plement a bootloader similar to Qualcomm’s but using
a very different codebase. The Android-speciﬁc loader
runs at EL1, and is also responsible for partition manage-
ment and unlocking via Fastboot. Unlike Qualcomm’s,
this loader is also responsible for bootstrapping the mo-
dem’s baseband ﬁrmware, meaning that any compromise
in the bootloader could impact this critical component as
well.
USENIX Association
26th USENIX Security Symposium    785
NVIDIA. NVIDIA’s Tegra-based devices ship with a
bootloader known as hboot. This bootloader is very
similar to Qualcomm’s, in that it runs at EL1, and im-
plements only the fastboot functionality at this stage.
4 Unlocking Bootloaders
While security-focused bootloaders do signiﬁcantly raise
the bar for attackers wishing to persistently compromise
the device, there are many cases in which “unlocking,” as
detailed in Section 2, has legitimate beneﬁts. Only per-
mitting the execution of signed code makes development
of the Android OS itself problematic, as well as disal-
lowing power-users from customizing and modifying the
OS’s code.
Of course, this is a very security-sensitive function-
ality; an attacker could unlock the bootloader and then
modify the relevant partitions as a way of implement-
ing a persistent rootkit. Google’s Veriﬁed Boot standard
covers the design of this important mechanism, discusses
many high-level aspects of managing the device’s secu-
rity state (see Section 2), and even provides speciﬁcs
about digital signatures to be used. However, as with the
ARM speciﬁcations covering Trusted Boot, these specs
must also allow for platform-speciﬁc variations in imple-
mentation, such as where or how these security mecha-
nisms are integrated into the boot process.
Furthermore,
there are many unspeciﬁed,
implicit
properties of Veriﬁed Boot that a valid implementation
should enforce, to ensure that the device is protected
from privileged code execution or unauthorized physical
control. These properties include:
The device state should only transition from locked to
unlocked with explicit user content. This is implicitly
handled by requiring a command sent to Fastboot to un-
lock, as this usually requires physical access to activate,
and causes a warning to be displayed to the user. Sim-
ilarly, a malicious app — no matter how privileged it is
— should not be able to silently unlock the bootloader.
Only the authorized owner of the device should be
able to unlock the bootloader. This means that anyone
in possession of a phone that is not theirs cannot simply
access Fastboot or similar protocol (i.e., by rebooting the
phone) and trigger an unlock. This is avoided on some
devices through checking an additional ﬂag called “OEM
unlock,” (or, more informally “allow unlock”). This ﬂag
is controlled by an option in the Android Settings menu,
and it is only accessible if the device is booted and the
user has authenticated (for instance, by inserting the cor-
rect “unlock pattern”). A proper implementation of Fast-
boot will honor the “OEM unlock” ﬂag and it will refuse
to unlock the bootloader if this ﬂag is set to false.
Interestingly, there is no requirement on the storage of
the device’s security state. While the standard offers a
suggestion about how to tie this state and its transitions
to the security properties they wish to enforce, the exact
storage of this information is left out, likely to account
for hardware variations with respect to secured storage.
Unfortunately, as we discuss in Section 5, speciﬁcs of
such implementation details can negatively impact the
security properties of the bootloader.
4.1 Unlocking vs Anti-Theft
Another interesting factor related to bootloaders and
bootloader locking is the overall usability of a device
by an attacker after it has been stolen. As mandated by
laws [30] and industry standards [9], phones should im-
plement mechanisms to prevent their usage when stolen.
Google refers to this protection as Factory Reset Pro-
tection (FRP) [7], and it has been enabled in Android
since version 5.0. In Google’s own implementations, this
means that the Android OS can restrict the usage of a
phone, even after a factory-reset, unless the legitimate
user authenticates.
This presents an interesting contradiction in relation
to bootloader unlocking capabilities. First, since this
mechanism is governed from within the OS, it could be
leveraged by a malicious process with sufﬁcient privi-
lege. Of course, the original owner should be able to au-
thenticate and restore the device’s functionality, but this
could still be used as a form of denial-of-service. Sec-
ond, some manufacturers offer low-level ﬁrmware up-
load functionality, such as in the BL1 or BL2 stages,
designed to restore the device to a working state in the
event it is corrupted. This feature is in direct opposition
to anti-theft functionality, as if a user can recover from
any kind of corruption, this mechanism may be able to
be bypassed. However, if this mechanism respects the
anti-theft feature’s restrictions on recovering partitions,
this also means the device can be rendered useless by a
sufﬁciently-privileged malicious process. In other words,
there is an interesting tension between anti-theft and anti-
bricking mechanisms:
if the anti-theft is implemented
correctly, an attacker could use this feature against the
user to irremediably brick her device; vice versa, if an
anti-bricking mechanism is available, a thief could use
this mechanism to restore the device to a clean, usable
state. In Section 8, we explore how this tension can be
resolved.
5 Attacking Bootloaders
Regardless of implementation speciﬁcs bootloaders have
many common functions that can be leveraged by an at-
tacker. While they may appear to be very isolated from
786    26th USENIX Security Symposium
USENIX Association
possible exploitation, bootloaders still operate on input
that can be injected by a sufﬁciently-privileged attacker.
For example, the core task a bootloader must perform
(that of booting the system) requires the bootloader to
load data from non-volatile storage, ﬁgure out which sys-
tem image on which partition to boot, and boot it. To en-
force the Chain of Trust, this also involves parsing cer-
tiﬁcates and verifying the hash of the OS kernel, all of
which involves further reading from the device’s storage.
In Class B implementations, the device’s security state
must also be consulted to determine how much veriﬁ-
cation to perform, which could be potentially stored in
any number of ways, including on the device’s storage as
well. While bootloader authors may assume that this in-
put is trusted, it can, in fact, be controlled by an attacker
with sufﬁcient access to the device in question.
In this work, we assume an attacker can control any
content of the non-volatile storage of the device. This
can occur in the cases that an attacker attains root privi-
leges on the primary OS (assumed to be Android for our
implementation). While hardware-enforced write pro-
tection mechanisms could limit the attacker’s ability to
do this, these mechanisms are not known to be in wide
use today, and cannot be used on any partition the OS
itself needs to routinely write to.
Given this attacker model, our goal is to automatically
identify weaknesses, in deployed, real-world bootloader
ﬁrmware, that can be leveraged by an attacker conform-
ing to our attacker model to achieve a number of goals:
Code execution. Bootloaders process input, read from
attacker-controlled non-volatile storage, to ﬁnd, validate,
and execute the next step in the boot process. What if the
meta-data involved in this process is maliciously crafted,
and the code processing it is not securely implemented?
If an attacker is able to craft speciﬁed meta-data to trig-
ger memory corruption in the bootloader code, they may
achieve code execution during the boot process. Depend-