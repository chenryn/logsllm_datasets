### 7. EVALUATION

In this section, we empirically evaluate the performance of our proposed algorithm.

#### Experimental Setup
We implemented the secure search algorithm using the open-source homomorphic encryption (HE) library SEAL (version 3.4.5) [27]. SEAL is a widely used HE library written in C++ that supports two HE schemes: BFV [15] and CKKS [9]. For our purposes, we chose the BFV implementation because it is more suitable for Boolean operations, which are required for our search algorithm. The experiments were conducted on a server running Debian 10 (Buster) with an Intel(R) Xeon(R) CPU E7-8867 v3 @ 2.50GHz and 1,536 GB of RAM. The state-of-the-art AGHL algorithm [2] was used as the baseline for comparison. To ensure fairness, no optimization techniques, such as batching, were applied to either algorithm.

#### Results
Figure 9 presents the experimental results. Since our algorithm primarily improves the searching part of the protocol, we evaluated its performance in two scenarios:

1. **Pure Searching**: We measured the time cost of the searching process alone, without the matching step (Figure 9(a)). This provides a direct comparison of the searching efficiency.
2. **Searching and Matching**: We included the matching step to assess the overall improvement in the entire protocol (Figure 9(b)).

The error rate was set to \(\epsilon = 2^{-80}\), and the keyword length was assumed to be \(\mu = 16\) bits.

As shown by our formal analysis, our algorithm requires approximately double the depth compared to AGHL, which makes each multiplication operation slower. Specifically, the time cost per multiplication operation for our algorithm is about 4.17 times higher than that of AGHL. However, our algorithm significantly reduces the number of required operations. Our algorithm only needs \(2\sqrt{n}\) RS-OR operations, whereas AGHL requires \(n\) RS-OR operations. This reduction in the number of operations results in our algorithm being faster overall.

The pure searching algorithm outperforms AGHL when \(n > 80\), and the entire protocol (searching and matching) outperforms AGHL when \(n \geq 400\). According to our formal analysis in Section 5.2, the advantage of our algorithm increases with the number of records \(n\), both for the searching part and the entire protocol.

### 8. FURTHER OPTIMIZATION

**Single Instruction Multiple Data (SIMD)**: SIMD is an optimization technique proposed by Smart and Vercauteren [28] that allows packing multiple plaintext elements into a single ciphertext and performing operations on them simultaneously. The plaintext values in a single ciphertext are referred to as "plaintext slots." Using SIMD can significantly improve the efficiency of our algorithm, but it requires careful parameter selection to ensure that the technique is well-suited to the size of the segments we are dividing.

When using SIMD, further parameter analysis is crucial. We need to balance the benefits of parallelism from more slots against the potential inefficiencies of single operations due to the increased number of slots.

### 9. RELATED WORK

#### Secure Pattern Matching (SPM)
SPM aims to determine whether the plaintext corresponding to two encrypted ciphertexts meets certain conditions. Given an encrypted lookup value, SPM returns a vector of \(n\) ciphertexts \((c_1, \ldots, c_n)\), where \(c_i\) indicates whether the \(i\)-th data element matches the lookup value. There are several works on SPM for fully homomorphic encryption (FHE) data [11, 12, 20, 21, 23, 31, 33]. The main drawback of these protocols is that the communication complexity and client's running time are proportional to the number of stored elements.

#### Private Information Retrieval (PIR)
PIR is a protocol for retrieving at most a single record \(x_i\) from an encrypted array, providing restricted search functionality. The server's runtime in a single-server PIR (whether FHE-based or not) is inherently linear in the size of the dataset \(n\). This protocol is not suitable for our setting due to its limited search functionality [5, 14, 16].

#### Private Set Intersection (PSI)
PSI involves two parties holding private sets and wishing to learn their intersection without revealing any additional information. The most efficient PSI protocols have communication complexity that is at least linearly dependent on the smaller database size \(n\) [7, 22, 24, 25].

#### Searchable Encryption (SE)
SE enables efficient search over encrypted data, focusing on achieving sublinear search time. The two main primitives for SE are searchable symmetric encryption (SSE) [30] and public key encryption with keyword search (PEKS) [3]. However, SE often leaks vital search information, such as access patterns, which can compromise security.

### 10. CONCLUSION

In this paper, we propose an efficient algorithm, LEAF (and its variant LEAF+), for FHE-based secure search with low communication complexity. Our scheme relies on three novel techniques: localization, extraction, and reconstruction. LEAF requires the client to encrypt the lookup value and upload it to the server, which then returns the encrypted coordinates of the matching items in the encrypted database. The client only needs to encrypt the lookup value and decrypt the output, making our algorithm suitable for deployment on low-power devices and embedded systems.

The security of the protocol is ensured by the semantic security feature of FHE, and the server can only access the encrypted data throughout the process, enhancing data privacy. LEAF can be performed over \(GF(2)\), compatible with all current homomorphic encryption algorithms. Additionally, our algorithm supports unrestricted search functionality, expanding its application scenarios.

### ACKNOWLEDGEMENTS

Yu Yu was supported by the National Key Research and Development Program of China (Grant No. 2018YFA0704701), the National Natural Science Foundation of China (Grant Nos. 61872236 and 61971192), the National Cryptography Development Fund (Grant No. MMJJ20170209), and the Major Program of Guangdong Basic and Applied Research (Grant No. 2019B030302008).

### REFERENCES

[1] Adi Akavia, Dan Feldman, and Hayim Shaul. 2018. Secure Search on Encrypted Data via Multi-Ring Sketch. In ACM SIGSAC Conference on Computer and Communications Security (CCS). ACM, 985–1001.
[2] Adi Akavia, Craig Gentry, Shai Halevi, and Max Leibovich. 2019. Setup-Free Secure Search on Encrypted Data: Faster and Post-Processing Free. Symposium on Privacy Enhancing Technologies Symposium (2019).
[3] Dan Boneh, Giovanni Di Crescenzo, Rafail Ostrovsky, and Giuseppe Persiano. 2004. Public Key Encryption with Keyword Search. In Annual International Conference on the Theory and Applications of Cryptographic Techniques (EUROCRYPT). Springer, 506–522.
[4] Zvika Brakerski, Craig Gentry, and Vinod Vaikuntanathan. 2014. (Leveled) Fully Homomorphic Encryption without Bootstrapping. ACM Transactions on Computation Theory (2014).
[5] Zvika Brakerski and Vinod Vaikuntanathan. 2014. Efficient Fully Homomorphic Encryption from (Standard) LWE. SIAM Journal on Computing (2014).
[6] Hao Chen and Kyoohyung Han. 2018. Homomorphic Lower Digits Removal and Improved FHE Bootstrapping. In Annual International Conference on the Theory and Applications of Cryptographic Techniques (EUROCRYPT). Springer, 315–337.
[7] Hao Chen, Kim Laine, and Peter Rindal. 2017. Fast Private Set Intersection from Homomorphic Encryption. In ACM SIGSAC Conference on Computer and Communications Security (CCS). ACM, 1243–1255.
[8] Jung Hee Cheon, Kyoohyung Han, and Duhyeong Kim. 2017. Faster Bootstrapping of FHE over the Integers. Cryptology ePrint Archive, Report 2017/079 (2017).
[9] Jung Hee Cheon, Andrey Kim, Miran Kim, and Yongsoo Song. 2017. Homomorphic Encryption for Arithmetic of Approximate Numbers. In International Conference on the Theory and Application of Cryptology and Information Security (ASIACRYPT). Springer, 409–437.
[10] Jung Hee Cheon, Dongwoo Kim, Duhyeong Kim, Hun Hee Lee, and Keewoo Lee. 2019. Numerical Method for Comparison on Homomorphically Encrypted Numbers. In International Conference on the Theory and Application of Cryptology and Information Security (ASIACRYPT). Springer, 415–445.
[11] Jung Hee Cheon, Miran Kim, and Myungsun Kim. 2016. Optimized Search-and-Compute Circuits and Their Application to Query Evaluation on Encrypted Data. IEEE Transactions on Information Forensics and Security (2016).
[12] Jung Hee Cheon, Miran Kim, and Kristin Lauter. 2015. Homomorphic Computation of Edit Distance. In International Conference on Financial Cryptography and Data Security (FC). Springer, 194–212.
[13] Jack L. H. Crawford, Craig Gentry, Shai Halevi, Daniel Platt, and Victor Shoup. 2018. Doing Real Work with FHE: The Case of Logistic Regression. In Workshop on Encrypted Computing & Applied Homomorphic Cryptography (WAHC). ACM, 1–12.
[14] Yarkın Doröz, Berk Sunar, and Ghaith Hammouri. 2014. Bandwidth Efficient PIR from NTRU. In International Conference on Financial Cryptography and Data Security (FC). Springer, 195–207.
[15] Junfeng Fan and Frederik Vercauteren. 2012. Somewhat Practical Fully Homomorphic Encryption. Cryptology ePrint Archive, Report 2012/144 (2012).
[16] Craig Gentry. 2009. Fully Homomorphic Encryption Using Ideal Lattices. In Annual ACM Symposium on Theory of Computing (STOC). ACM, 169–178.
[17] Craig Gentry, Amit Sahai, and Brent Waters. 2013. Homomorphic Encryption from Learning with Errors: Conceptually-Simpler, Asymptotically-Faster, Attribute-Based. In Annual International Cryptology Conference (CRYPTO). Springer, 75–92.
[18] Oded Goldreich, Silvio Micali, and Avi Wigderson. 1987. How to Play Any Mental Game. In Annual ACM Symposium on Theory of Computing (STOC). ACM, 218–229.
[19] Chun Guo, Jonathan Katz, Xiao Wang, and Yu Yu. 2019. Efficient and Secure Multiparty Computation from Fixed-Key Block Ciphers. Cryptology ePrint Archive, Report 2019/074 (2019).
[20] Myungsun Kim, Hyung Tae Lee, San Ling, Shu Qin Ren, Benjamin Hong Meng Tan, and Huaxiong Wang. 2016. Better Security for Queries on Encrypted Databases. Cryptology ePrint Archive, Report 2016/470 (2016).
[21] Myungsun Kim, Hyung Tae Lee, San Ling, Benjamin Hong Meng Tan, and Huaxiong Wang. 2017. Private Compound Wildcard Queries Using Fully Homomorphic Encryption. IEEE Transactions on Dependable and Secure Computing (2017).
[22] Vladimir Kolesnikov, Ranjit Kumaresan, Mike Rosulek, and Ni Trieu. 2016. Efficient Batched Oblivious PRF with Applications to Private Set Intersection. In ACM SIGSAC Conference on Computer and Communications Security (CCS). ACM, 818–829.
[23] Kristin Lauter, Adriana López-Alt, and Michael Naehrig. 2014. Private Computation on Encrypted Genomic Data. In International Conference on Cryptology and Information Security in Latin America (LATINCRYPT). Springer, 3–27.
[24] Benny Pinkas, Mike Rosulek, Ni Trieu, and Avishay Yanai. 2019. SpOT-Light: Lightweight Private Set Intersection from Sparse OT Extension. In Annual International Cryptology Conference (CRYPTO). Springer, 401–431.
[25] Benny Pinkas, Thomas Schneider, and Michael Zohner. 2018. Scalable Private Set Intersection Based on OT Extension. ACM Transactions on Privacy and Security (2018).
[26] A. A. Razborov. 1987. Lower Bounds on the Size of Bounded Depth Circuits over a Complete Basis with Logical Addition. Mathematical notes of the Academy of Sciences of the USSR (1987).
[27] SEAL 2020. Microsoft SEAL (release 3.5). https://github.com/Microsoft/SEAL. Microsoft Research, Redmond, WA.
[28] Nigel P Smart and Frederik Vercauteren. 2014. Fully Homomorphic SIMD Operations. Designs, Codes and Cryptography (2014).
[29] Roman Smolensky. 1987. Algebraic Methods in the Theory of Lower Bounds for Boolean Circuit Complexity. In Annual ACM Symposium on Theory of Computing (STOC). ACM, 77–82.
[30] Dawn Xiaodong Song, David Wagner, and Adrian Perrig. 2000. Practical Techniques for Searches on Encrypted Data. In IEEE Symposium on Security and Privacy (S&P). IEEE, 44–55.
[31] Haixu Tang, Xiaoqian Jiang, Xiaofeng Wang, Shuang Wang, Heidi Sofia, Dov Fox, Kristin Lauter, Bradley Malin, Amalio Telenti, Li Xiong, et al. 2016. Protecting genomic data analytics in the cloud: state of the art and opportunities. BMC Medical Genomics (2016).
[32] Andrew Chi-Chih Yao. 1986. How to Generate and Exchange Secrets. In Annual Symposium on Foundations of Computer Science (FOCS). IEEE, 162–167.
[33] Masaya Yasuda, Takeshi Shimoyama, Jun Kogure, Kazuhiro Yokoyama, and Takeshi Koshiba. 2013. Secure Pattern Matching Using Somewhat Homomorphic Encryption. In ACM Cloud Computing Security Workshop (CCSW). ACM, 65–76.

### APPENDICES

#### A. SEQUENTIAL RETRIEVAL
In the main body, we provide a faster secure search algorithm that takes an encrypted array of 0s and 1s and outputs the index and corresponding item of the first 1. For completeness, we recall how to extend the secure search functionality to return the rest of the matching elements from Akavia et al. [2].

Assume we have obtained the index \(i\) of the first match and want to retrieve the second matching. The idea is to set the first non-zero term to 0, making the second non-zero term the new first in the original encrypted array. We then apply the secure search algorithm again.

To set the first non-zero term to 0, we modify the matching criteria:
- The item satisfies the original matching condition.
- The item's index is greater than \(i\).

We apply this new matching method to the database to obtain a new encrypted binary array. This process has the same time complexity (\(O(n)\)) as a normal exact matching in the asymptotic sense.

Sequential retrieval requires further interaction, as the encrypted index \(i\) must be sent to the server, and the matching and searching algorithms must be rerun. However, this enhances privacy by making it infeasible for an adversary to determine the number of matches in the database.

#### B. MULTIPLICATION STRUCTURE
[Insert Figure 10 here]

#### C. PROOF OF LEMMA 4.1
**Lemma.** \((1 - \frac{\epsilon}{n})^n \geq 1 - \epsilon\), for all \(n \in \mathbb{N}^+\) and \(\epsilon > 0\).

**Proof.**
Consider the function \(f(n) = (1 - \frac{\epsilon}{n})^n\). We need to show that \(f(n) \geq 1 - \epsilon\) for all \(n \geq 1\).

First, observe that:
\[ f(1) = 1 - \epsilon \]

Next, consider the limit as \(n \to \infty\):
\[ \lim_{n \to \infty} f(n) = \lim_{n \to \infty} \left(1 - \frac{\epsilon}{n}\right)^n = e^{-\epsilon} \]

Since \(e^{-\epsilon} \approx 1 - \epsilon + \frac{\epsilon^2}{2!} - \cdots\), and for small \(\epsilon\), \(e^{-\epsilon} \geq 1 - \epsilon\).

Therefore, for all \(n \geq 1\):
\[ (1 - \frac{\epsilon}{n})^n \geq 1 - \epsilon \]

Thus, the lemma is proved. \(\blacksquare\)