bers. The ﬁrst line in the status display is the session I used to retrieve the data.
FGN-HOST R-SEQUENCE S-SEQUENCE SENDW
ATT.ARPA
4096
0,0,0,0 0
0,0,0,0 0
26,1,0,16
192,33,33,115
LPORT FPORT
2934
0
0
4119
1792
15
15
79
23
23
333888001
0
0
2928942175
739613342
760807425
0
0
701235845
660542923
319
4096
which means that it takes less than 217 tri-
als to generate such a packet via a blind at-
tack. That sounds like a lot of packets, and it’s
only a denial of service attack, but for long-
lived sessions (and in particular for BGP [84]
sessions between routers), it’s quite a feasi-
ble attack. Furthermore, tearing down a sin-
gle BGP session has wide-spread effects on
the global Internet routing tables.
Defenses
Obviously, the key to this attack is the relatively coarse
rate of change of the initial sequence number variable on
Berkeley systems. The TCP speciﬁcation requires that this
variable be incremented approximately 250,000 times per
second; Berkeley is using a much slower rate. However, the
critical factor is the granularity, not the average rate. The
change from an increment of 128 per second in 4.2BSD to
125,000 per second in 4.3BSD is meaningless, even though
the latter is within a factor of two of the speciﬁed rate.
Let us consider whether a counter that operated at a true
250,000 hz rate would help. For simplicity’s sake, we will
ignore the problem of other connections occurring, and only
consider the ﬁxed rate of change of this counter.
To learn a current sequence number, one must send a
SYN packet, and receive a response, as follows:
X → S :
S → X :
SYN(ISNX )
SYN(ISNS), ACK(ISNX )
(1)
The ﬁrst spoof packet, which triggers generation of the next
sequence number, can immediately follow the server’s re-
sponse to the probe packet:
X → S : SYN(ISNX ), SRC = T
(2)
The sequence number ISNS used in the response
S → T : SYN(ISNS), ACK(ISNX )
and S. Thus, if the spoofer can accurately measure (and pre-
dict) that time, even a 4 µ-second clock will not defeat this
attack.
How accurately can the trip time be measured? If we as-
sume that stability is good, we can probably bound it within
10 milliseconds or so. Clearly, the Internet does not exhibit
such stability over the long-term [64], but it is often good
enough over the short term.2 There is thus an uncertainty
of 2500 in the possible value for ISNS. If each trial takes
5 seconds, to allow time to re-measure the round-trip time,
an intruder would have a reasonable likelihood of succeed-
ing in 7500 seconds, and a near-certainty within a day. More
predictable (i.e., higher quality) networks, or more accurate
measurements, would improve the odds even further in the
intruder’s favor. Clearly, simply following the letter of the
TCP speciﬁcation is not good enough.
We have thus far tacitly assumed that no processing takes
places on the target host. In fact, some processing does take
place when a new request comes in; the amount of variabil-
ity in this processing is critical. On a 6 MIPS machine, one
tick—4 µ-seconds—is about 25 instructions. There is thus
considerable sensitivity to the exact instruction path fol-
lowed. High-priority interrupts, or a slightly different TCB
allocation sequence, will have a comparatively large effect
on the actual value of the next sequence number. This ran-
domizing effect is of considerable advantage to the target. It
should be noted, though, that faster machines are more vul-
nerable to this attack, since the variability of the instruction
path will take less real time, and hence affect the increment
less. And of course, CPU speeds are increasing rapidly.
This suggests another solution to sequence number at-
tacks: randomizing the increment. Care must be taken to use
sufﬁcient bits; if, say, only the low-order 8 bits were picked
randomly, and the granularity of the increment was coarse,
the intruder’s work factor is only multiplied by 256. A com-
bination of a ﬁne-granularity increment and a small random
number generator, or just a 32-bit generator, is better. Note,
though, that many pseudo-random number generators are
is uniquely determined by the time between the origination
of message (1) and the receipt at the server of message (2).
But this number is precisely the round-trip time between X
2 At the moment, the Internet may not have such stability even over the
short-term, especially on long-haul connections. It is not comforting
to know that the security of a network relies on its low quality of ser-
vice.
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
easily invertible [13]. In fact, given that most such genera-
tors work via feedback of their output, the enemy could sim-
ply compute the next “random” number to be picked. Some
hybrid techniques have promise—using a 32-bit generator,
for example, but only emitting 16 bits of it—but brute-force
attacks could succeed at determining the seed. One would
need at least 16 bits of random data in each increment, and
perhaps more, to defeat probes from the network, but that
might leave too few bits to guard against a search for the
seed. More research or simulations are needed to determine
the proper parameters.
Rather than go to such lengths, it is simpler to use a cryp-
tographic algorithm (or device) for ISNS generation. The
Data Encryption Standard [73] in electronic codebook mode
[74] is an attractive choice as the ISNS source, with a sim-
ple counter as input. Alternatively, DES could be used in
output feedback mode without an additional counter. Either
way, great care must be taken to select the key used. The
time-of-day at boot time is not adequate; sufﬁciently good
information about reboot times is often available to an in-
truder, thereby permitting a brute-force attack. If, however,
the reboot time is encrypted with a per-host secret key, the
generator cannot be cracked with any reasonable effort.
Performance of the initial sequence number generator is
not a problem. New sequence numbers are needed only once
per connection, and even a software implementation of DES
will sufﬁce. Encryption times of 2.3 milliseconds on a 1
MIPS processor have been reported [12].
for
An additional defense involves good logging and alert-
ing mechanisms. Measurements of the round-trip time—
essential
attacking RFC-compliant hosts—would
most likely be carried out using ICMP Ping messages;
a “transponder” function could log excessive ping re-
quests. Other, perhaps more applicable, timing measure-
ment techniques would involve attempted TCP connec-
tions; these connections are conspicuously short-lived, and
may not even complete SYN processing. Similarly, spoof-
ing an active host will eventually generate unusual types of
RST packets; these should not occur often, and should be
logged.
After many years of thinking about it, I ﬁ-
nally came up with a a solution to classical
sequence number attacks. The scheme, de-
scribed in RFC 1948 [10], used a crypto-
graphic hash function to create a separate
sequence number space for each “connec-
tion”, a connection being deﬁned per RFC
791 [81] as the unique 4-tuple . This
scheme has not been adopted as widely
as I would like; my claim here that extra
CPU load during TCP connection establish-
ment was irrelevant was rendered obsolete
remotehost,
by the advent of very large Web servers. In-
deed, maximum TCP connection rate is a
vital metric when assessing modern sys-
tems.
Instead, many implementations use ran-
dom ISNs or (especially) random increments.
This has obvious negative effects on the cor-
rectness of TCP in the presence of dupli-
cate packets, a property that is guaranteed to
higher layers. (Also see the appendix of [52].)
Worse yet, Newsham pointed out that by the
central limit theorem, the sum of a sequence
of random increments will have a normal dis-
tribution, which implies that the actual range
of the ISNs is quite small. (see CERT Advi-
sory CA-2001-09).
There are hybrid schemes that don’t fall to
these attacks, but the underlying message is
the same as it was in 1989: don’t rely on TCP
sequence numbers for security.
Also worth noting is the suggestion that in-
trusion detection system can play a role: they
can alert you to an attack that for some rea-
son you can’t ward off.
3. The Joy of Routing
As noted at the beginng, routing problems
were one of the initial motivations for this
work. For a fair number of years, though, I
said that “the only attack I discussed in this
paper that hasn’t been seen in the wild is
routing attacks”. That’s no longer the case;
the bad guys have caught up.
Abuse of the routing mechanisms and protocols is prob-
ably the simplest protocol-based attack available. There are
a variety of ways to do this, depending on the exact routing
protocols used. Some of these attacks succeed only if the re-
mote host does source address-based authentication; others
can be used for more powerful attacks.
A number of the attacks described below can also be
used to accomplish denial of service by confusing the rout-
ing tables on a host or gateway. The details are straight-
forward corollaries of the penetration mechanisms, and will
not be described further.
3.1. Source Routing
If available, the easiest mechanism to abuse is IP source
routing. Assume that the target host uses the reverse of the
source route provided in a TCP open request for return traf-
ﬁc. Such behavior is utterly reasonable; if the originator of
the connection wishes to specify a particular path for some
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
reason—say, because the automatic route is dead—replies
may not reach the originator if a different path is followed.
The attacker can then pick any IP source address de-
sired, including that of a trusted machine on the target’s lo-
cal network. Any facilities available to such machines be-
come available to the attacker.
Again, I’m focusing here on address-based
authentication. But I move on to more sub-
tle routing attacks.
Defenses
It is rather hard to defend against this sort of attack. The
best idea would be for the gateways into the local net to re-
ject external packets that claim to be from the local net. This
is less practical than it might seem since some Ethernet3
network adapters receive their own transmissions, and this
feature is relied upon by some higher-level protocols. Fur-
thermore, this solution fails completely if an organization
has two trusted networks connected via a multi-organization
backbone. Other users on the backbone may not be trustable
to the same extent that local users are presumed to be, or
perhaps their vulnerability to outside attack is higher. Ar-
guably, such topologies should be avoided in any event.
Note that I’m alluding here to what are now
called “ﬁrewalls”. I’m not sure why I didn’t use
that word in this paper; I was using it in email
several years earlier.
A simpler method might be to reject pre-authorized con-
nections if source routing information was present. This
presumes that there are few legitimate reasons for using
this IP option, especially for relatively normal operations.
A variation on this defense would be to analyze the source
route and accept it if only trusted gateways were listed; that
way, the ﬁnal gateway could be counted on to deliver the
packet only to the true destination host. The complexity of
this idea is probably not worthwhile.
Newer versions of the r-utilities do, in fact, re-
ject source-routed connections. But there’s
a more subtle risk: though they reject the
connection attempt, an ACK packet is re-
turned; this conveys the information needed
to launch a sequence number attack.
The most common conﬁguration to-
day is to reject source-routed packets at
border
they ﬁll
other ﬁrewall-related roles. Source rout-
ing is permitted on the backbone;
ISPs
routers, whether or not
3
Ethernet is a registered trademark of Xerox Corporation.
to view paths from different van-
use it
tage points.
Internally, such packets may
or may not be blocked; the question is ir-
relevant for many organizations, since the
rise of Microsoft Windows and the rela-
tive demise of UNIX-style remote login has
rendered the attack somewhat less interest-
ing.
Some protocols (i.e., Berkeley’s rlogin and rsh) permit
ordinary users to extend trust to remote host/user combi-
nations. In that case, individual users, rather than an entire
system, may be targeted by source routing attacks.4 Suspi-
cious gateways [69] will not help here, as the host being
spoofed may not be within the security domain protected
by the gateways.
Note the warning here against putting
too much trust in ﬁrewalls: they don’t de-
fend against insider attacks.
3.2. Routing Information Protocol Attacks
The Routing Information Protocol [49], (RIP) is used
to propagate routing information on local networks, espe-
cially broadcast media. Typically, the information received
is unchecked. This allows an intruder to send bogus rout-
ing information to a target host, and to each of the gate-
ways along the way, to impersonate a particular host. The
most likely attack of this sort would be to claim a route to a
particular unused host, rather than to a network; this would
cause all packets destined for that host to be sent to the in-
truder’s machine. (Diverting packets for an entire network
might be too noticeable; impersonating an idle work-station
is comparatively risk-free.) Once this is done, protocols that
rely on address-based authentication are effectively com-
promised.
This attack can yield more subtle, and more serious, ben-
eﬁts to the attacker as well. Assume that the attacker claims
a route to an active host or workstation instead. All pack-
ets for that host will be routed to the intruder’s machine for
inspection and possible alteration. They are then resent, us-
ing IP source address routing, to the intended destination.
An outsider may thus capture passwords and other sensi-
tive data. This mode of attack is unique in that it affects
outbound calls as well; thus, a user calling out from the tar-
geted host can be tricked into divulging a password. Most of