### Session Data and Sequence Number Attacks

The first line in the status display indicates the session I used to retrieve the data.

```
FGN-HOST R-SEQUENCE S-SEQUENCE SENDW
ATT.ARPA
4096
0,0,0,0 0
0,0,0,0 0
26,1,0,16
192,33,33,115
LPORT FPORT
2934
0
0
4119
1792
15
15
79
23
23
333888001
0
0
2928942175
739613342
760807425
0
0
701235845
660542923
319
4096
```

This means that it takes fewer than 217 trials to generate such a packet via a blind attack. Although this may seem like a large number of packets, it is a feasible denial-of-service attack, especially for long-lived sessions, such as BGP [84] sessions between routers. Tearing down a single BGP session can have widespread effects on global Internet routing tables.

### Defenses

The key to this attack lies in the relatively coarse rate of change of the initial sequence number (ISN) variable on Berkeley systems. The TCP specification requires that this variable be incremented approximately 250,000 times per second, but Berkeley systems use a much slower rate. However, the critical factor is the granularity, not the average rate. The change from an increment of 128 per second in 4.2BSD to 125,000 per second in 4.3BSD is insignificant, even though the latter is within a factor of two of the specified rate.

Let's consider whether a counter operating at a true 250,000 Hz rate would help. For simplicity, we will ignore other connections and focus on the fixed rate of change of the ISN counter.

To learn the current sequence number, one must send a SYN packet and receive a response:

1. X → S: SYN(ISNX)
2. S → X: SYN(ISNS), ACK(ISNX)

The first spoof packet, which triggers the generation of the next sequence number, can immediately follow the server’s response to the probe packet:

3. X → S: SYN(ISNX), SRC = T

The sequence number ISNS used in the response S → T: SYN(ISNS), ACK(ISNX) is determined by the time between the origination of message (1) and the receipt at the server of message (2). This time is precisely the round-trip time (RTT) between X and S. If the spoofer can accurately measure and predict this time, even a 4 µs clock will not defeat the attack.

How accurately can the RTT be measured? Assuming good stability, it can be bounded within about 10 milliseconds. While the Internet does not exhibit such stability over the long term [64], it often does so in the short term. This introduces an uncertainty of 2500 in the possible value for ISNS. If each trial takes 5 seconds to re-measure the RTT, an intruder has a reasonable likelihood of succeeding in 7500 seconds, and near certainty within a day. More predictable networks or more accurate measurements would further improve the intruder's odds.

We have assumed no processing on the target host, but some processing occurs when a new request comes in. The variability in this processing is critical. On a 6 MIPS machine, one tick (4 µs) is about 25 instructions. Thus, there is considerable sensitivity to the exact instruction path followed. High-priority interrupts or a slightly different TCB allocation sequence can significantly affect the next sequence number. This randomizing effect benefits the target, but faster machines are more vulnerable due to the reduced real-time impact on the increment. CPU speeds are increasing rapidly, making this a growing concern.

Another solution is to randomize the ISN increment. Care must be taken to use sufficient bits. If only the low-order 8 bits are picked randomly and the increment is coarse, the intruder's work factor is only multiplied by 256. A combination of a fine-granularity increment and a small random number generator, or a 32-bit generator, is better. However, many pseudo-random number generators are easily invertible [13]. Given that most such generators work via feedback of their output, the enemy could compute the next "random" number. Hybrid techniques, such as using a 32-bit generator but only emitting 16 bits, show promise, but brute-force attacks could still determine the seed. At least 16 bits of random data in each increment are needed to defeat network probes, but this might leave too few bits to guard against a search for the seed. Further research or simulations are needed to determine the proper parameters.

A simpler and more secure approach is to use a cryptographic algorithm for ISN generation. The Data Encryption Standard (DES) [73] in electronic codebook mode [74] is an attractive choice, with a simple counter as input. Alternatively, DES could be used in output feedback mode without an additional counter. Either way, the key selection must be carefully managed. The time-of-day at boot time is inadequate; sufficiently good information about reboot times is often available to an intruder, permitting a brute-force attack. Encrypting the reboot time with a per-host secret key makes the generator uncrackable with any reasonable effort.

Performance of the ISN generator is not a problem. New sequence numbers are needed only once per connection, and even a software implementation of DES suffices. Encryption times of 2.3 milliseconds on a 1 MIPS processor have been reported [12].

### Additional Defenses

Good logging and alerting mechanisms are essential. Round-trip time measurements, crucial for attacking RFC-compliant hosts, are typically carried out using ICMP Ping messages. A "transponder" function could log excessive ping requests. Other timing measurement techniques involve attempted TCP connections, which are conspicuously short-lived and may not even complete SYN processing. Spoofing an active host will eventually generate unusual types of RST packets, which should be logged.

After years of consideration, I developed a solution to classical sequence number attacks. The scheme, described in RFC 1948 [10], uses a cryptographic hash function to create a separate sequence number space for each "connection," defined as the unique 4-tuple. This scheme has not been widely adopted, partly due to the increased CPU load during TCP connection establishment, which is a significant metric for modern systems.

Many implementations use random ISNs or random increments, which negatively affect TCP correctness in the presence of duplicate packets. Newsham pointed out that, by the central limit theorem, the sum of a sequence of random increments will have a normal distribution, implying a small actual range of ISNs (see CERT Advisory CA-2001-09).

Hybrid schemes that avoid these issues exist, but the underlying message remains the same: do not rely on TCP sequence numbers for security. Intrusion detection systems can also play a role by alerting you to attacks that cannot be warded off.

### Routing Attacks

Routing problems were one of the initial motivations for this work. For many years, I stated that "the only attack I discussed in this paper that hasn’t been seen in the wild is routing attacks." That is no longer the case; attackers have caught up.

Abuse of routing mechanisms and protocols is one of the simplest protocol-based attacks. The methods vary depending on the specific routing protocols used. Some attacks succeed only if the remote host uses source address-based authentication, while others can be used for more powerful attacks.

Some of the attacks described below can also cause denial of service by confusing routing tables on a host or gateway. The details are straightforward corollaries of the penetration mechanisms and will not be described further.

#### Source Routing

If available, the easiest mechanism to abuse is IP source routing. Assume the target host uses the reverse of the source route provided in a TCP open request for return traffic. This behavior is reasonable; if the originator specifies a particular path, replies may not reach them if a different path is followed. The attacker can then pick any IP source address, including that of a trusted machine on the target’s local network, gaining access to any facilities available to such machines.

Defending against this attack is challenging. The best approach is for gateways into the local net to reject external packets claiming to be from the local net. However, this is less practical because some Ethernet network adapters receive their own transmissions, and higher-level protocols rely on this feature. This solution fails if an organization has two trusted networks connected via a multi-organization backbone, where other users may not be trustworthy.

A simpler method is to reject pre-authorized connections if source routing information is present, assuming there are few legitimate reasons for using this IP option. A variation would be to analyze the source route and accept it if only trusted gateways are listed, ensuring the final gateway delivers the packet only to the true destination host. However, this complexity may not be worthwhile.

Newer versions of the r-utilities reject source-routed connections, but they return an ACK packet, conveying the information needed for a sequence number attack. The most common configuration today is to reject source-routed packets at border routers, which also fulfill other firewall-related roles. Internally, such packets may or may not be blocked, but the rise of Microsoft Windows and the decline of UNIX-style remote login have made this attack less interesting.

Some protocols, such as Berkeley’s rlogin and rsh, allow ordinary users to extend trust to remote host/user combinations. In this case, individual users rather than entire systems may be targeted by source routing attacks. Suspicious gateways [69] will not help if the host being spoofed is outside the security domain protected by the gateways.

#### Routing Information Protocol (RIP) Attacks

The Routing Information Protocol (RIP) [49] propagates routing information on local networks, especially broadcast media. Typically, the information received is unchecked, allowing an intruder to send bogus routing information to a target host and to each of the gateways along the way, impersonating a particular host. The most likely attack is to claim a route to an unused host, causing all packets destined for that host to be sent to the intruder’s machine. Diverting packets for an entire network might be too noticeable, but impersonating an idle workstation is comparatively risk-free.

This attack can yield more subtle and serious benefits. If the attacker claims a route to an active host or workstation, all packets for that host will be routed to the intruder’s machine for inspection and possible alteration. They are then resent, using IP source address routing, to the intended destination. An outsider can thus capture passwords and other sensitive data. This mode of attack affects outbound calls, tricking a user calling out from the targeted host into divulging a password.