preserving way. A distributed point function is, at a high level,
a technique for secret-sharing a vector of 2n elements in which
only a single element is non-zero. The important property of
distributed point functions is that each share has only size O(n),
whereas a naïve secret sharing would have share size 2n.
More formally, a DPF scheme, parameterized by a ﬁnite ﬁeld F,
consists of two routines:
• Gen(α, β) → (k0, k1). Given a string α ∈ {0, 1}n and value
β ∈ F, output two DPF keys representing secret shares of a
dimension-2n vector that has value β ∈ F only at the α-th
position and is zero everywhere else.
Protocol 1: Private subset histograms. There are two
servers and C clients. Each client i, for i ∈ [C] holds a
string αi ∈ {0, 1}n. The servers hold a set S ⊆ {0, 1}n of
strings. For each string σ ∈ S, the servers want to learn the
number of clients who hold σ. The protocol uses a prime
ﬁeld F with |F| > C.
The protocol is as follows:
1. Each client i ∈ {1, . . . ,C}, on input string αi ∈ {0, 1}n
prepares a pair of DPF keys as (ki0, ki1) ← Gen(αi, 1).
The client sends ki0 to server 0 and ki1 to server 1.
2. For each string σj ∈ S, each server b ∈ {0, 1} computes
the sum of its DPF keys evaluated at the string σj:
valjb ← C
Eval(kib, σj)
∈ F.
i=1
Each server β ∈ {0, 1} then publishes the values
(val1b, . . . , val|S|b)
∈ F|S|
.
3. Finally, for each string σj ∈ S, each server can conclude
that the number of clients who hold string σj is valj0 +
valj1 ∈ F.
• Eval(k, x) → F. Given a DPF key k and index x ∈ {0, 1}n,
output the value of the secret-shared vector at the position
indexed by the string x.
The DPF correctness property states that, for all strings α ∈
{0, 1}n output values β ∈ F, keys (k0, k1) ← Gen(α, β), and
strings x ∈ {0, 1}n, it holds that
(cid:40)
Eval(k0, x) + Eval(k1, x) =
if x = α
otherwise ,
β
0
where the addition is computed in the ﬁnite ﬁeld F. Informally,
the DPF security property states that an adversary that learns
either k0 or k1 (but not both) learns no information about the
special point α or its value β.
The latest DPF constructions [11], on a domain of size 2n,
have keys of length roughly λn bits, when instantiated with a
length-doubling PRG that uses λ-bit keys.
A simple protocol for private subset histograms. Given DPFs,
we can solve the subset-histogram problem using the following
simple protocol, which we illustrate in Protocol 1. At a high level,
each client i uses DPFs to create a secret sharing of a vector of
dimension 2n. This vector is zero everywhere except that it has
“1” at the position indexed by client i’s input string αi ∈ {0, 1}n.
To learn how many clients hold a particular string σ, the servers
can compute, for each client i, the shares of the σ-th value in the
ith client’s secret-shared vector. By publishing the sum of these
shares, the servers learn exactly how many clients held string σ.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:14 UTC from IEEE Xplore.  Restrictions apply. 
766
Correctness holds since
C
C
C
i=1
i=1
valj0 + valj1 =
=
=
C
Eval(ki1, σj)
Eval(ki0, σj) +
(cid:0)Eval(ki0, σj) + Eval(k1i, σj)(cid:1)
i=1
1{αi = σj},
i=1
which is exactly the number of clients who hold string σj.
As long as one of the two servers is honest, a fully malicious
adversary controlling the other server and any number of clients
learns nothing about the honest clients’ inputs, apart from what
the subset histogram itself leaks.
In the following sections, we show how to extend this simple
scheme to protect against corruption attacks by malicious clients
(Section 4) and support computing heavy hitters (Section 5 and 6).
In Section 7, we demonstrate that it is possible to achieve user-
level diﬀerential privacy with these methods as well. Finally, in
Section 8 we provide an experimental evaluation of the eﬃciency
of the heavy-hitters protocol.
4 Privacy-preserving subset histograms
via malicious-secure sketching
In this section, we show how to modify the simple scheme of
Section 3 to protect against corruption attacks by malicious
clients.
In the scheme of Section 3, if even one of the participating
clients is malicious, it can completely corrupt the histogram that
the servers recover. In particular, in Step 1 of the protocol above,
a malicious client can send malformed DPF keys to the servers.
A client who mounts this attack can prevent the servers from
recovering any output (i.e., the servers get only pseudorandom
garbage) or can manipulate the statistics (i.e., the client can
arbitrarily inﬂuence the histogram the servers recover).
For example, if the servers are using this private-subset-
histogram scheme to measure the incidence of homepage hijack-
ing (cf. Section 2.1), a single malicious client could manipulate
the output histogram to make it look as if no homepage hijacking
was taking place.
4.1 Prior work: Sketching for malicious clients
Prior work [7,11,19,28] has presented techniques to harden the
simple scheme of Section 3 against misbehavior by malicious
clients. These approaches use similar methods: before the servers
accept the pair of DPF keys from the client, the servers check that
the DPF keys are “well formed.” That is, the two servers check
that the DPF keys submitted by each client expand to shares of a
vector that is zero everywhere and one at a single position.
More speciﬁcally, given a pair of client-submitted DPF keys
(k0, k1), each server b ∈ {0, 1} evaluates its DPF key kb on each
767
element of the set S = {σ1, σ2, . . . } to produce a vector
∈ F|S|
¯vb =(cid:0)Eval(kb, σ1), . . . , Eval(kb, σ|S|)(cid:1)
.
Say that ¯v = ¯v0 + ¯v1 ∈ F|S| is “valid” if it zero everywhere with
a one at a single index (and is “invalid” otherwise). The servers
then run a “sketching” protocol to check that ¯v is valid.
The protocol should be:
• Complete. If ¯v0 + ¯v1 is valid, the servers always accept.
• Sound. If ¯v0 + ¯v1 is invalid, the servers reject almost always.
• Zero knowledge. A single malicious server “learns nothing”
by running the protocol, apart from the fact that ¯v0 + ¯v1
is valid. In particular, the malicious server does not learn
the location or value of the non-zero element. We can
use a simulation-based deﬁnition to formalize this security
property.
Existing sketching techniques suﬀer from two shortcomings:
• No protection against malicious servers. Existing sketching
protocols for checking that the secret-shared vector ¯v has
weight one either do not protect client privacy against
malicious behavior by the servers [11]. (Techniques that
do protect against malicious servers, either have client-to-
server communication that grows linearly in the length of
the vector being checked, as in Prio [18], or require extra
rounds of interaction between the servers and client [7,28],
or require extra non-colluding servers [1,19].)
• Weak protection against malicious clients. A more
fundamental—and more subtle—problem in our setting
is that these sketching methods do not necessarily prevent a
malicious client from inﬂuencing the output more than it
should, as prior work observes [11].
As an extreme example, say that the servers’ set S consists
of a single string σ that is unknown to the clients. An
honest client will submit a pair of DPF keys that expand to
shares of a vector that contains a one at a single coordinate.
In contrast, a malicious client can submit a pair of DPF
keys that expand to shares of a vector that is one at every
coordinate. Even if the servers check that their keys expand
to shares of a vector of weight one in the singleton set S,
the servers will not detect this attack.
In this way, the malicious client can have more inﬂuence on
the output than honest clients do.
4.2 New tool: Malicious-secure sketching
Our ﬁrst contribution of this section is to give a new lightweight
protocol that allows the servers to check that they are holding
additive shares ¯v0 and ¯v1 of a vector ¯v ∈ {0, 1}m ⊆ Fm of weight
one (i.e., that has a single non-zero entry), where F is a prime
ﬁeld. Unlike prior approaches, we protect against malicious
misbehavior by either of the two servers, without needing extra
interaction with the client nor needing extra servers.
Our idea is to modify a sketching protocol of Boyle et al. [11]
(with security against semi-honest servers) to protect it against
malicious behavior on the part of the servers. To do so, we
have the client encode its vector ¯v using a redundant, “authen-
ticated” randomized encoding, inspired by techniques from the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:14 UTC from IEEE Xplore.  Restrictions apply. 
literature on malicious-secure multiparty computation [20,21].
We construct the encoding in such a way that if either server
tampers with the client’s vector, the honest servers will reject the
client’s vector with overwhelming probability. Simultaneously
protecting against both malicious clients and a malicious server
while minimizing the extra overhead is a delicate balancing act,
we discuss below.
Encoding. In our scheme, we have the client choose a random
value κ ←R F and then encode its vector ¯v ∈ Fm as the pair:
(¯v, κ¯v) ∈ Fm × Fm. In words: the encoding consists of (a) the
vector ¯v and (b) the vector ¯v scaled by a random value κ ∈ F. The
client sends an additive share of this pair (¯v, κ¯v) to each of the
two servers. Since ¯v has weight one, both ¯v and κ¯v are non-zero
only at the same single coordinate. The client can then represent
each share of this tuple using a single DPF instance with a longer
payload.
The client also provides the servers with some correlated
randomness, as we discuss below, which the servers use to run a
two-party secure computation.
Sketching. The servers receive from the client additive shares
of a tuple (¯v, ¯v∗). If the client is honest then ¯v∗ = κ¯v.
As in the protocol from [11], the servers then jointly sample a
uniform random vector ¯r = (r1, . . . ,rm) ∈ Fm and compute ¯r∗ =
(r2
m) ∈ Fm. (The servers could generate the random vector
1, . . . ,r2
¯r using a pseudorandom generator, such as AES in counter mode,
seeded with a shared secret. Or, for information-theoretic security
when |F| is large, the servers could take ¯r = (r,r2,r3, . . . ,r m).)
Now, the servers compute the inner product of these sketch
vectors with both the client’s data vector ¯v and their shares of the
encoded vector ¯v∗. That is, for b ∈ {0, 1}, server b computes:
zb ← (cid:104)¯r, ¯vb(cid:105) ∈ F;
b(cid:105) ∈ F.
b ← (cid:104)¯r, ¯v
∗
z∗∗
Decision. Finally, the servers use a constant-size secure com-
putation to check that the original sketch would have accepted.
Letting z ← z0 + z1, z∗ ← z∗
, the
servers use secure computation to evaluate:
(z2 − z∗) + (κ · z − z∗∗) ∈ F
, and z∗∗ ← z∗∗
+ z∗∗
1
b ← (cid:104)¯r∗
z∗
, ¯vb(cid:105) ∈ F;
+ z∗
1
0
0
(1)
and check that the output is 0. Note that the ﬁrst term corresponds
to the original sketch veriﬁcation of [11], and the second term
corresponds to checking consistency of the sharing (¯v, κ¯v).
Intuitively, the second, κ¯v-computed term will play a protecting
role in the servers’ veriﬁcation polynomial: any attempt of
a malicious server to launch a conditional failure attack by
modifying the sketch z to (z + ∆) will result in masking the
nonzero (possibly sensitive) contribution of the ﬁrst term by
random garbage in the second term, from the corresponding κ∆
term of κ(z + ∆).
We remark that the function (1) on inputs z, z∗, z∗∗ as written is
not publicly known to the servers, due to the secret client-selected
κ term. A natural approach is to provide the servers additionally
with secret shares of κ, to be treated as a further input.1 Instead,
1This approach indeed will work, though requires care to address the servers’
ability to provide additive oﬀsets to κ. Our implementation uses a protocol based
on this approach, which is slightly less eﬃcient than the one presented here.
we provide a direct approach for the client to enable secure
computation of (1) via appropriate correlated randomness.
The idea follows the general approach of Boyle et al. [9],
extending Beaver’s notion of multiplication triples [5] to more
general functions including polynomial evaluation. Here, the
client will provide the servers with additive secret shares of
random oﬀsets a, b, c, which they will use to publish masked
inputs Z ← (z +a), Z∗ ← (z∗ +b), and Z∗∗ ← (z∗∗ +c). Then, in
addition, the client will provide secret shares of each coeﬃcient
in the resulting polynomial that they wish to compute:
[(Z − a)2 − (Z∗ − b)] + [κ · (Z − a) − (Z∗∗ − c)]
= Z2 + Z∗ − Z∗∗ + Z[−2a + κ] + [a2 + b − aκ + c].
That is, the client will give additive secret shares of A := [−2a+κ]
and B := [a2 + b − aκ + c]. To evaluate, the servers each apply
the above polynomial on the publicly known values Z, Z∗, Z∗∗,
using their share of each coeﬃcient; this results in additive shares
of the desired output.
Security. Given an honest client, the client-aided two-party
computation protocol provides security against a malicious server,
up to additive attacks on the inputs z, z∗, z∗∗ and output of the
computation. The latter is irrelevant in regard to client privacy
(recall we do not address correctness in the face of a malicious
server). As mentioned above, any additive attack on the inputs
(z + ∆), (z∗ + ∆∗), (z∗∗ + ∆∗∗) will result in either random garbage
output (if ∆ (cid:44) 0) or server-predictable output (if ∆ = 0).
At the same time, the protocol preserves security against a
malicious client. A malicious client has the ability to send invalid
values for ¯v, ¯v∗ (supposedly κ¯v), A, B. However, incorporating
these malicious values into the expression evaluated by the servers
still results in an analogous polynomial in the servers’ secret
values r1, . . . ,rm as in [11], and application of Schwartz-Zippel
similarly implies that any invalid choice of ¯v will result in nonzero
output evaluation with probability 1 − 2/|F|.
Complexity. Altogether, the client must provide: DPF shares of
(¯v, κ¯v), and additive shares of a, b, c, A, B ∈ F. Since the desired
values of a, b, c are independent random ﬁeld elements, these
shares can be compressed (also across levels of the tree) using
PRG seeds, which amortizes away their required communication.
This results in extra (amortized) 3 log |F| bits sent to each server,
coming from the increased DPF key size (extra F element for
κ-multiplied payload) plus shares of 2 ﬁeld elements (A, B).
For the sketch veriﬁcation, the servers must exchange masked
input shares of z, z∗, z∗∗ in the ﬁrst round, and then shares of
the computed output in a second round. This corresponds to
4 log |F| bits of communication of each server to the other, split
across two rounds.
We provide a more complete treatment of the sketching proce-
dure in the full version of this work [8].
4.3 New tool: Extractable DPFs
As discussed in Section 4.1, there is a second shortcoming to
using sketching-based techniques to protect against malicious