1 5 9 13 17
# basic activities in the sequence
Figure 2. Variation of the CFC of a while activity controlling a sequence activ-
ity with basic activities
Figure 2 clearly shows that the complexity of a while structure is linearly dependent
on the number of activities that the while covers.
Flow. Concurrency and synchronization of activities is offered by the flow activity.
According to (Aalst, Barros et al. 2000), this BPEL construct corresponds to a parallel
split. The flow activity enables the creation of splits and joins (Aalst 1998). This pat-
tern defines the structure of a process which is split into several threads of control, all
Accepted for Publication, Software Process: Improvement and Practice Journal,
Copyright © 2006 John Wiley & Sons, Ltd.
executed concurrently in parallel. The order in which they are processed is not de-
fined.
elements
?
+
activity+
The flow activity offers allows the synchronization (join) of activities within the
flow. A flow activity is completed when all its activities are completed. The formal
definition of a while F is F = {a , a , ..., a }, where a, i∈{1,...,n}, are activities. The
1 2 n i
control-flow complexity of a flow activity is calculated as follows:
∑
CFCBPEL(F)=(n−l)!* CFCBPEL(a)
Act act
a∈F
F is a flow structured activity, a is an activity, n=|F|, l= cross boundary links
Since the most fundamental semantic effect of grouping a set of activities in a flow
is to enable concurrency, in our perspective, the control-flow introduced by a flow
activity is directly dependent on the different ways of arranging the distinct activities
in a sequence (permutations). These permutations bring the notion of activity inter-
leaving to our control-complexity metric. For example, if we have a flow structure
with two activities (A and B) there exist 2! possible interleaving execution sequences:
A followed by B, and B followed by A. Using this rationale, the control-flow com-
plexity of a flow should be CFCBPEL(F)=n!*∑ CFCBPEL(a), n=|F|. Analyzing the
Act act
a∈F
semantics of the flow activity, we can examine that BPEL enables the expression of
synchronization dependencies between activities using the link construct (). A
link construct specifies a dependency between a source activity and target activity as
illustrated in Figure 3.
Figure 3. Cross boundary links
The figure shows that links can cross the boundaries of structured activities. There
is a link that starts at activity C in sequence Y and ends at activity F, which is directly
nested in the enclosing flow. The example also illustrates that sequence X must be
Accepted for Publication, Software Process: Improvement and Practice Journal,
Copyright © 2006 John Wiley & Sons, Ltd.
performed prior to sequence Y because X is the source of a link named that is targeted
at sequence Y. In this example it becomes clear that the rationale followed previously
does not hold when links are present. The example demonstrates that having three
activities (sequence X, sequence Y, and the basic activity F) we do not have 3! possi-
ble interleaving execution sequences. In fact, we only have one sequence, X followed
by Y, and Y followed by F. To take into account the existence of links in flow struc-
tured activities, we subtract from the number of activities the number of cross bound-
ary links. The number of possible interleaving executions is therefore (n-l)!, where l is
the number of cross boundary links of a flow.
Pick. A choice based on information from the outside is offered by the pick activity.
Pick provides a construct comparable with a switch activity, except that rather than the
decision being based on a Boolean expression, it is based on messages coming () from a given business partner, or alternately, the expiration of a time-wait
object () whose expiration will trigger the pick. The  activity speci-
fies that a business process should await the occurrence of one event in a set of events
( or  events). The  activity has the following structure:
elements
+
?
+
activity
*
activity
The first event to arrive that is identified in the  completes the pick struc-
tured activity. Only one of the activities in the body of the pick takes place. The con-
trol-flow complexity of a pick activity is calculated as follows:
CFCBPEL(Pk)=(2n −1)* ∑ CFCBPEL(a),
Act Act
a∈Pk
F is a flow structured activity, a is an activity, n= #events
From our viewpoint, the control-flow introduced by a pick structured activity is di-
rectly dependent on the set of events that may be generated at a given time. This
means that the more frequently events are specified in a pick structure, the greater the
control-flow complexity of the pick. As we have stated, the pick activity waits the
occurrence of one of a set of events and then performs the activity associated with the
event that occurred. If more than one of the events occurs, then the selection of the
activity to perform depends on which event occurred first. A first approach would
suggest treating the complexity of the pick activity in the same way as the complexity
Accepted for Publication, Software Process: Improvement and Practice Journal,
Copyright © 2006 John Wiley & Sons, Ltd.
of the switch activity, since as we have mentioned previously, they are comparable
and similar. A closer analysis of the semantics of the pick activity reveals that if sev-
eral events occur almost simultaneously there is a race and the choice of the activity to
be performed is dependent on both timing and implementation of the BPEL process
enactment engine. Therefore, to capture the semantics of the pick, we compute all the
possibilities of ‘n’ (n>0) events occurring at the same time. This can be calculated
using the power set of the number of events (n=#events) specified in the pick, minus
one (1), i.e. 2n-1. We remove one unit since the pick activity is only triggered when at
least one event occurs at a given time. The control-flow complexity of a pick structure
is dependent on the set E of events {e , e ,…, e } that the structure can respond to,
1 2 n
more precisely on the pick structure dependent on |P(E)- Ø|, where P is the power
set.
4.3 Interpretation of CFC values
One important question that needs to be investigated and answered is what the mean-
ing of a given CFC metric is. For example, what is the significance of obtaining a CFC
of 16 for a given process? We believe that if organizations and the research commu-
nity start using our CFC metric it will become apparent that when certain levels of
CFC are reached processes become too complex and unmanageable. Our metric was
partially inspired in McCabe complexity metric (McCabe 1976; McCabe and Butler
1989; McCabe and Watson 1994) – a well-known and widely used metric – for soft-
ware engineering. We believe that the interpretation of the CFC will follow a similar
path of the one taken by McCabe metric. For example, when using McCabe complex-
ity metric, the limit of 10 indicates a simple program, without much risk. A complex-
ity metric between 11 and 20 designates a more complex program with moderate risk.
A metric between 21 and 50 denotes a complex program with high risk. Finally, a
complexity metric greater than 50 denotes an untestable program with a very high risk.
We expect that limits for the CFC will be obtained and set in the same way, using
empirical and practical results from research and from real world use.
5 Scenario
In this section, we describe a scenario to explain and illustrate the need for CFC
analysis during the design and aging of a process.
A major bank has realized that to be competitive and efficient it must adopt a new
and modern information system infrastructure. Therefore, a first step was taken in that
direction with the adoption of a BPMS (Business Process management System) to
support its business processes. Since the bank supplies several services to its custom-
ers, the adoption of a BPMS has enabled the logic of bank processes to be captured in
BPEL schema. As a result, a part of the services available to customers are stored and
executed under the supervision of the management system. One of the BPEL schema
supplied by the bank is the loan process (process P ) depicted in Figure 4.
1
Accepted for Publication, Software Process: Improvement and Practice Journal,
Copyright © 2006 John Wiley & Sons, Ltd.
Figure 4. The loan process (version 1)
To represent our process we use the Business Process Modeling Notation (BPMN)
(BPMN 2005) since it provides a modeling notation that is easy to use by business
process analysts and developers. BPMN can be viewed as a bridge between the mod-
eling and execution of a business process. Particularly, it is possible to generate BPEL
execution definitions from BPMN processes.
Process P is very simple and it is composed of only four activities. The Fill Loan
1
Request activity allows clients to request a loan from the bank. In this step, the client
is asked to fill in an electronic form with personal information and data describing the
loan being requested. The second activity, Check Educational Loan, determines if the
loan request should be accepted or rejected. When the result of a loan application is
known, it is e-mailed to the client using the Notify Educational Loan Client activity.
Finally, the Archive Application activity creates a report and stores the loan applica-
tion data in a database record.
As this first business process gains acceptance within the bank, since it improves
service to customers at several levels, allows significant cost savings, and improves
communication amongst employees, the managers of the bank decided to add more
services to be supported by the loan process. It was decided to support, not only edu-
cational loans, but also home and car loans.
Before making any changes to the process, a control-flow complexity analysis is
carried out. To make our example simpler, we assume that each activity in the process
is a BPEL basic activity of the type invoke or receive (see section 4.1). The outcome
of the analysis indicates that the process has a very low complexity, i.e. 4,
CFCBPEL (P)=∑ CFCBPEL(a)=4*CFCBPEL(a)=4,S is a sequence
Process 1 Act
a∈S Act
Processes with a low complexity have the capability to quickly change to accom-
modate new products or services to meet the changing needs of customers and busi-
ness partners. Based on the complexity analysis results, the process was changed (the
new version is reference P ), having now the structure illustrated in Figure 5.
2
Accepted for Publication, Software Process: Improvement and Practice Journal,
Copyright © 2006 John Wiley & Sons, Ltd.
Figure 5. The loan process (version 2)
The new process (version 2) is composed of nine activities. Because complexity
was a concern during the development of the new process it still maintains a complex-
ity which is within an acceptable range. The outcome of the CFC analysis indicates
that the process has a complexity of 21,
CFCBPEL (P)=
Process 2
= ∑ CFCBPEL(a)
Act
a∈S
1
= ∑ CFCBPEL(a)+CFCBPEL(Sw)+ ∑ CFCBPEL(a)
Act Act Act
a∈S a∈S
2 3
=2+CFCBPEL(Sw)+1
Act
=2+3*(∑ CFCBPEL(a)+ ∑ CFCBPEL(a)+ ∑ CFCBPEL(a))+1
Act Act Act
a∈S a∈S a∈S
4 5 6
=2+3*(2+2+2)+1=21
For the twelve months that followed the design and implementation of the second
version of the process several small changes have been introduced to the process.
Unfortunately, since the changes were done incrementally and each one had a small
impact to the structure of the process, complexity analysis was not carried out during
the process redesign. As a result, the process’ structure is the following (Figure 6).
Accepted for Publication, Software Process: Improvement and Practice Journal,
Copyright © 2006 John Wiley & Sons, Ltd.
Figure 6. The loan process (version 3)
The process has evolved over time by modification and may have become fragile
with age. Therefore, it is necessary to use techniques, such as complexity analysis, to
assess the system’s condition. A high complexity may be the sign of a brittle, non-
flexible, or high-risk process. The outcome of the CFC analysis indicates that the
process has a complexity of 49, i.e. 2+3*(5+4+4)+1+3!+1. Since a high complexity
was identified the process needs to be reengineered to reduce its complexity.
As another example, let us consider that we have a process a flow element with 4
outgoing transitions. One solution to reduce the complexity of the process would be to