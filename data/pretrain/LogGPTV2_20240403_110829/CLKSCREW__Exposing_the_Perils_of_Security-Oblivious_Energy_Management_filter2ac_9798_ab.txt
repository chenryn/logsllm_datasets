only be efﬁciently accessible from certain system layers.
For example, instantaneous system utilization levels are
readily available to the OS kernel layer. As such, the
Linux CPUfreq power governor is well-positioned at that
layer to initiate runtime changes to the operating voltage
and frequency based on these whole-system measures.
This also provides some intuition as to why DVFS can-
not be implemented entirely in hardware.
3 Achieving the First CLKSCREW Fault
In this section, we ﬁrst brieﬂy describe why erroneous
computation occurs when frequency and voltage are
stretched beyond the operating limits of digital circuits.
Next, we outline challenges in conducting a non-physical
probabilistic fault injection attack induced from soft-
ware. Finally, we characterize the operating limits of
regulators and detail the steps to achieving the ﬁrst
CLKSCREW fault on a real device.
3.1 How Timing Faults Occur
To appreciate why unfettered access to hardware regula-
tors is dangerous, it is necessary to understand in general
why over-extending frequency (a.k.a. overclocking) or
under-supplying voltage (a.k.a. undervolting) can cause
unintended behavior in digital circuits.
Synchronous digital circuits are made up of mem-
ory elements called ﬂip-ﬂops (FF). These ﬂip-ﬂops store
stateful data for digital computation. A typical ﬂip-ﬂop
has an input D, and an output Q, and only changes the
output to the value of the input upon the receipt of the
rising edge of the clock (CLK) signal. In Figure 3, we
show two ﬂip-ﬂops, FFsrc and FFdst sharing a com-
mon clock signal and some intermediate combinatorial
Figure 3: Timing constraint for error-free data propaga-
tion from input Qsrc to output Ddst for entire circuit.
logic elements. These back-to-back ﬂip-ﬂops are build-
ing blocks for pipelines, which are pervasive throughout
digital chips and are used to achieve higher performance.
Circuit timing constraint.
For a single ﬂip-ﬂop to
properly propagate the input to the output locally, there
are three key timing sub-constraints. (1) The incoming
data signal has to be held stable for T setup during the re-
ceipt of the clock signal, and (2) the input signal has to be
held stable for T FF within the ﬂip-ﬂop after the clock sig-
nal arrives. (3) It also takes a minimum of T max_path for
the output Qsrc of FFsrc to propagate to the input Ddst of
FFdst. For the overall circuit to propagate input Dsrc →
output Qdst, the minimum required clock cycle period4,
T clk, is bounded by the following timing constraint (1)
for some microarchitectural constant K:
T clk ≥ T FF + T max_path + T setup + K
(1)
Violation of timing constraint. When the timing con-
straint is violated during two consecutive rising edges
of the clock signal, the output from the source ﬂip-ﬂop
FFsrc fails to latch properly in time as the input at the
destination ﬂip-ﬂop FFdst. As such, the FFdst continues
to operate with stale data. There are two situations where
this timing constraint can be violated, namely (a) over-
clocking to reduce T clk and (b) undervolting to increase
the overall circuit propagation time, thereby increasing
Tmax_path. Figure 4 illustrates how the output results in
an unintended erroneous value of 0 due to overclocking.
For comparison, we show an example of a bit-level fault
due to undervolting in Figure 15 in Appendix A.1.
4T clk is simply the reciprocal of the clock frequency.
1060    26th USENIX Security Symposium
USENIX Association
TFFcommonclock signalproviderclk...inputoutputclkFFsrcFFdst......DsrcQsrcQdstDdstIntermediate combinatorial logicclock pulseinput (0    1)QsrcDdstoutput (0    1)1TclkTmax_path010101010TFFTsetupcommon clocksignalFigure 4: Bit-level fault due to overclocking: Reducing
clock period T clk → T clk
(cid:48) results in a bit-ﬂip in output
1 → 0.
Figure 5: Vendor-stipulated voltage/frequency Operat-
ing Performance Points (OPPs) vs. maximum OPPs
achieved before computation fails.
3.2 Challenges of CLKSCREW Attacks
Mounting a fault attack purely from software on a real-
world commodity device using its internal voltage/fre-
quency hardware regulators has numerous difﬁculties.
These challenges are non-existent or vastly different
from those in traditional physical fault attacks (that com-
monly use laser, heat and radiation).
Regulator operating limits. Overclocking or under-
volting attacks require the hardware to be conﬁgured far
beyond its vendor-suggested operating range. Do the op-
erating limits of the regulators enable us to effect such
attacks in the ﬁrst place? We show that this is feasible
in § 3.3.
Self-containment within same device. Since the attack
code performing the fault injection and the victim code to
be faulted both reside on the same device, the fault attack
must be conducted in a manner that does not affect the
execution of the attacking code. We present techniques
to overcome this in § 3.4.
Noisy complex OS environment. On a full-ﬂedged OS
with interrupts, we need to inject a fault into the tar-
get code without causing too much perturbation to non-
targeted code. We address this in § 3.4.
Precise timing. To attack the victim code, we need to
be relatively precise in when the fault is induced. Using
two attack scenarios that require vastly different degrees
of timing precision in § 4 and § 5, we demonstrate how
the timing of the fault can be ﬁne-tuned using a range of
execution proﬁling techniques.
Fine-grained timing resolution. The fault needs to be
transient enough to occur during the intended region of
victim code execution. We may need the ability to tar-
get a speciﬁc range of code execution that takes orders
of magnitude fewer clock cycles within an entire oper-
ation. For example, in the attack scenario described in
Section § 5.3, we seek to inject a fault into a memory-
speciﬁc operation that takes roughly 65,000 clock cycles
within an entire RSA certiﬁcate chain veriﬁcation opera-
tion spanning over 1.1 billion cycles.
3.3 Characterization of Regulator Limits
In this section, we study the capabilities and limits of
the built-in hardware regulators, focusing on the Nexus
6 phone. According to documentation from the vendor,
Nexus 6 features a 2.7GHz quad-core SoC processor. On
this device, DVFS is conﬁgured to operate only in one
of 15 possible discrete5 Operating Performance Points
(OPPs) at any one time, typically by a DVFS OS-level
service. Each OPP represents a state that the device can
be in with a voltage and frequency pair. These OPPs are
readily available from the vendor-speciﬁc deﬁnition ﬁle,
apq8084.dtsi, from the kernel source code [3].
To verify that the OPPs are as advertised, we need
measurement readings of the operating voltage and fre-
quency. By enabling the debugfs feature for the reg-
ulators, we can get per-core voltage6 and frequency7
measurements. We verify that the debugfs measurement
readings indeed match the voltage and frequency pairs
stipulated by each OPP. We plot these vendor-provided
OPP measurements as black-star symbols in Figure 5.
No safeguard limits in hardware. Using the software-
exposed controls described in § 2.2, while maintaining a
low base frequency of 300MHz, we conﬁgure the volt-
age regulator to probe for the range during which the de-
5A limited number of discrete OPPs, instead of a range of continu-
ous voltage/frequency values, is used so that the time taken to validate
the conﬁgured OPPs at runtime is minimized.
6/d/regulator/kraitX/voltage
7/d/clk/kraitX_clk/measure
USENIX Association
26th USENIX Security Symposium    1061
clock pulseinput (0    1)QsrcDdstoutput (0    0)1Tclk’Tmax_path010101010TsetupTFFglitchedoutput00.50.60.70.80.91.01.11.21.3Voltage (V)0.00.51.01.52.02.53.03.5Frequency (GHz)Nexus 6Maximum OPPVendor stock OPPvice remains functional. We ﬁnd that when the device
is set to any voltage outside the range 0.6V to 1.17V, it
either reboots or freezes. We refer to the phone as be-
ing unstable when these behaviors are observed. Then,
stepping through 5mV within the voltage range, for each
operating voltage, we increase the clock frequency until
the phone becomes unstable. We plot each of these max-
imum frequency and voltage pair (as shaded circles) to-
gether with the vendor-stipulated OPPs (as shaded stars)
in Figure 5.
It is evident that the hardware regulators
can be conﬁgured past the vendor-recommended limits.
This unfettered access to the regulators offers a powerful
primitive to induce a software-based fault.
ATTACK ENABLER (GENERAL) #1: There are no safe-
guard limits in the hardware regulators to restrict the
range of frequencies and voltages that can be conﬁgured.
Large degree of freedom for attacker. Figure 5 illus-
trates the degree of freedom an attacker has in choos-
ing the OPPs that have the potential to induce faults.
The maximum frequency and voltage pairs (i.e. shaded
circles in Figure 5) form an almost continuous upward-
sloping curve.
It is noteworthy that all frequency and
voltage OPPs above this curve represent potential candi-
date values of frequency and voltage that an attacker can
use to induce a fault.
This “shaded circles” curve is instructive in two ways.
First, from the attacker’s perspective, the upward-sloping
nature of the curve means that reducing the operating
voltage simultaneously lowers the minimum required
frequency needed to induce a fault in an attack. For ex-
ample, suppose an attacker wants to perform an over-
clocking attack, but the frequency value she needs to
achieve the fault is beyond the physical limit of the fre-
quency regulator. With the help of this frequency/voltage
characteristic, she can then possibly reduce the operating
voltage to the extent where the overclocking frequency
required is within the physical limit of the regulator.
ATTACK ENABLER (GENERAL) #2: Reducing the op-
erating voltage lowers the minimum required frequency
needed to induce faults.
Secondly, from the defender’s perspective, the large
range of instability-inducing OPPs above the curve sug-
gests that limits of both frequency and voltage, if any,
must be enforced in tandem to be effective. Combination
of frequency and voltage values, while individually valid,
may still cause unstable conditions when used together.
Prevalence of Regulators. The lack of safeguard lim-
its within the regulators is not speciﬁc to Nexus 6. We
observe similar behaviors in devices from other ven-
dors. For example, the frequency/voltage regulators in
Figure 6: Overview of CLKSCREW fault injection setup.
the Nexus 6P and Pixel phones can also be conﬁgured be-
yond their vendor-stipulated limits to the extent of seeing
instability on the devices. We show the comparison of
the vendor-recommended and the actual observed OPPs
of these devices in Figures 16 and 17 in Appendix A.3.
3.4 Containing the Fault within a Core
The goal of our fault injection attack is to induce errors
to speciﬁc victim code execution. The challenge is doing
so without self-faulting the attack code and accidentally
attacking other non-targeted code.
We create a custom kernel driver to launch separate
threads for the attack and victim code and to pin each
of them to separate cores. Pinning the attack and vic-
tim code in separate cores automatically allows each of
them to execute in different frequency domains. This
core pinning strategy is possible due to the deployment
of increasingly heterogeneous processors like the ARM
big.LITTLE [12] architecture, and emerging technolo-
gies such as Intel PCPS [35] and Qualcomm aSMP [48].
The prevailing industry trend of designing ﬁner-grained
energy management favors the use of separate frequency
and voltage domains across different cores. In particular,
the Nexus 6 SoC that we use in our attack is based on a
variant of the aSMP architecture. With core pinning, the
attack code can thus manipulate the frequency of the core
that the victim code executes on, without affecting that
of the core the attack code is running on. In addition to
core pinning, we also disable interrupts during the entire
victim code execution to ensure that no context switch
occurs for that core. These two measures ensure that our
fault injection effects are contained within the core that
the target victim code is running on.
ATTACK ENABLER (GENERAL) #3: The deployment
of cores in different voltage/frequency domains isolates
the effects of cross-core fault attack.
3.5 CLKSCREW Attack Steps
The CLKSCREW attack is implemented with a kernel
driver to attack code that is executing at a higher priv-
1062    26th USENIX Security Symposium
USENIX Association
CorevictimCoreattack......Victim threadAttack threadPrep PhaseAttack Phase1Targeted subset ofentire victim execution 2ClearingresidualstatesProﬁling3Timinganchor4Pre-delay5Fault6Parameter
Description
Fvolt
Fpdelay
Ffreq_hi
Ffreq_lo
Fdur
Base operating voltage
Number of loops to delay/wait before the fault
Target value to raise the frequency to for the fault
Base value to raise the frequency from for the fault
Duration of the fault in terms of number of loops
Table 1: CLKSCREW fault injection parameters.
ilege than the kernel. Examples of such victim code are
applications running within isolation technologies such
as ARM Trustzone [11] and Intel SGX [9]. In Figure 6,
we illustrate the key attack steps within the thread ex-
ecution of the attack and victim code. The goal of the
CLKSCREW attack is to induce a fault in a subset of an
entire victim thread execution.
1 Clearing residual states. Before we attack the vic-
tim code, we want to ensure that there are no microarchi-
tectural residual states remaining from prior executions.
Since we are using a cache-based proﬁling technique in
the next step, we want to make sure that the caches do
not have any residual data from non-victim code before
each fault injection attempt. To do so, we invoke both
the victim and attack threads in the two cores multiple
times in quick succession. From experimentation, 5-10
invocations sufﬁce in this preparation phase.
2 / 3 Proﬁling for an anchor. Since the victim code
execution is typically a subset of the entire victim thread
execution, we need to proﬁle the execution of the victim
thread to identify a consistent point of execution just be-
fore the target code to be faulted. We refer to this point
of execution as a timing anchor, T anchor to guide when
to deliver the fault injection. Several software proﬁling
techniques can be used to identify this timing anchor. In
our case, we rely on instruction or data cache proﬁling
techniques in recent work [40].
4 Pre-fault delaying. Even with the timing anchor, in
some attack scenarios, there may still be a need to ﬁne-
tune the exact delivery timing of the fault. In such cases,
we can conﬁgure the attack thread to spin-loop with a
predetermined number of loops before inducing the ac-
tual fault. The use of these loops consisting of no-op
operations is essentially a technique to induce timing de-
lays with high precision. For this stage of the attack, we
term this delay before inducing the fault as Fpdelay.
5 / 6 Delivering the fault. Given a base operating
voltage Fvolt, the attack thread will raise the frequency of
the victim core (denoted as Ffreq_hi), keep that frequency
for Fdur loops, and then restore the frequency to Ffreq_lo.
To summarize, for a successful CLKSCREW attack,
we can characterize the attacker’s goal as the following
sub-tasks. Given a victim code and a fault injection tar-
Figure 7: Regulators operate across security boundaries.
get point determined by T anchor, the attacker has to ﬁnd
optimal values for the following parameters to maximize