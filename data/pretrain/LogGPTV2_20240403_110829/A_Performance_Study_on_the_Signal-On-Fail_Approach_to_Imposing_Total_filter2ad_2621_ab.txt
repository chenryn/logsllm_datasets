assumption  becomes  very  strong  if  this  interval  is 
taken to be infinity. Below, we make two distinct sets 
of  assumptions;  each  set  has  a  stronger  assumption 
regarding one aspect and a weaker one on the other.  
Assumption 3(a):  
(i)  The  delay  estimates  used  for  assessing 
the 
timeliness  of  an  order  process  are  accurate  and 
non-faulty processes never judge each other to be 
untimely. (accurate delay estimation) 
(ii) The processes p and p′ within any given node pair 
do not fail ‘simultaneously’: if one of them, say, p 
fails then p′ does not fail at least until it observes 
the failure of p and an interval of 2D time elapses 
subsequent  to  the  observation,  where  D  is  the 
unknown (but finite) bound on the communication 
delays  over  the  reliable  asynchronous  network. 
(sequential failure pattern)  
3(a)(i) means that when an order process of a non-
faulty  node  does  not  receive  an  expected  response 
from  its  counter-part  within  the  delay  estimate  used, 
then the other node has become faulty at that moment. 
Assumption 3(b):  
(i)  The  delay  estimates  used  for  assessing 
the 
timeliness  of  an  order  process  become  accurate 
eventually:  when  the  nodes  within  a  pair  remain 
non-faulty,  there  is  an  unknown  timing  instance 
after  which  neither  order  process  will  find  the 
(eventually  accurate  delay 
other  untimely. 
estimation) 
(ii) At  least  one  of  the  ordering  processes  p  and  p′ 
does not fail. (at most one fault) 
to 
the 
that 
Remarks: Assumptions on delay estimation accuracy. 
3(a)(i) regards the node-pair as a well-provisioned and 
well-engineered  distributed system  (e.g.,  [9]) and the 
delay  estimates  are  always  accurate.  This  view 
restrictive, 
conforms 
synchronous model.  3(b)(i) allows estimated delays to 
become 
together  with  a 
the  estimates  eventually  become 
condition 
accurate.  This  is  the  characteristic  of  the  timed 
asynchronous  [1]  and  partially  synchronous  [4] 
models.   
inaccurate  occasionally 
traditional,  albeit 
Obviously,  3(b)(i)  is  weaker,  and  hence  easier  to 
realize, than 3(a)(i). A major implication of 3(b)(i) is 
that prior to the unknown timing instance, non-faulty 
order processes within a node pair may find each other 
untimely and consequently emit fail-signal to indicate 
the  signal-on-crash  process  they 
the  ‘crash’  of 
implement.  If  they  later  find  each  other  timely,  they 
can  optimistically  assume  that  the  unknown  timing 
instance  has  passed  and  resume  implementing  the 
signal-on-crash process. This amounts to the abstract 
process being restarted after a crash. Thus, the second 
assumption  leads  to  signal-on-crash  and  recovery 
semantics,  and  further  details  can  be  seen  in  sub-
section 4.4.  
Remarks: Assumptions on node failures. Both 3(a)(ii) 
and  3(b)(ii)  rule  out  both  the  nodes  of  a  pair  failing 
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:20:38 UTC from IEEE Xplore.  Restrictions apply. 
to  ensure 
simultaneously, say, due to the same underlying cause 
e.g., a failure of common power supply or a common 
design flaw that can be exploited by an attacker. They 
require  exercising  measures 
failure 
independence  between  the  nodes  and  in  particular 
eliminating  any  possible  common  failure  modes 
through means such as diversity of node hardware and 
operating  systems  and  housing  the  nodes  at  distinct 
locations. With fail-independence sufficiently assured, 
3(a)(ii)  is  realistic  in  practice.    For  example,  when 
nodes of a pair fail independently with an exponential 
failure rate µ, the probability that both nodes will not 
fail  within  2D time  of  each  other  turns  out  be 
99.999923%  and  99.9998%  when  D   is  1  and  2.5 
seconds  respectively  with  1/µ  being  30  days. 3(b)(ii) 
however  is  a  stronger  assumption  since  it  expects  at 
least  one  node  to  remain  non-faulty  throughout  the 
mission  time.  The  larger  is  the  latter,  the  less  likely 
that  it  will  hold.  For  longer  operative  periods,  we 
require that the signal-on-crash process be built using 
more  than  two  processes  when  3(b)(ii)  is  assumed; 
more precisely, each of the selected replica nodes (see 
Figure  1)  needs  to  be  supplemented  with  φ,  φ  >  1, 
shadow nodes and at most φ nodes can fail in a given 
AB-order supplement group. 
3. The Signal-on-Crash Set-up  
In this set-up, assumptions 3(a)(i) and 3(a)(ii) hold 
and  exactly  f  replica  nodes  are  paired  with  one 
shadow. Thus, the set of processes executing the order 
protocol is {p1,  p2, .. ,  p(2f+1),  p′1,  p′2, .. , p′f} and 
there are n = 3f+1 processes in total. We reserve the 
term doubly-signed to mean that a message is signed 
by  two  processes  in  sequence:  the  second  process 
considers  the  signature  of  the  first  as  a  part  of  the 
contents  it  signs  for.  Thus,  through  a  double-signed 
message, 
its 
approval on the contents of the message that the first 
signatory  has  computed.  Finally,  clients  are  assumed 
to direct their requests to all nodes and thus all non-
faulty processes receive each request that needs to be 
sequenced before processing. 
3.1.  Mutual  Checking 
Endorsement 
the  second  signatory  can 
and  Output 
indicate 
Each of the paired processes, e.g., pi or p′i, 1≤i ≤f, 
executes  the  protocol  like  any  unpaired  process,  pi, 
f+1≤i≤2f+1, in addition to collaborating with its paired 
counter-part  to  implement  a  signal-on-crash  process.  
This  collaboration  in  normal  form  involves  each 
process  (i)  forwarding  to  its  counterpart  process  a 
copy of every message it receives and sends over the 
asynchronous  network,  and  (ii)  verifying  if  the 
messages sent by the other process are correct (as per 
the order protocol) in value domain, and also correct 
in the time domain (using the delay estimate). 
The collaboration between paired processes takes a 
more active form when the pair acts as the coordinator 
of  the  order  protocol.    (Note  that  our  protocol,  like 
BFT  [2],  is  coordinator-based  and  deterministic.)  
When  the  pair  {pi,  p′i}  acts  as  the  co-ordinator,  pi 
decides an order for each unordered client request and 
forwards  its  signed  decision  only  to  its  shadow  p′i. 
(See Fig. 2.) If the latter finds the order decision of pi 
to  be  valid  (i.e.,  observes  no  value-domain  failure), 
then it endorses the decision by double-signing it and 
sending  the  doubly-signed  decision  to  all  processes 
(including pi). When pi receives an authentic, doubly-
signed message from p′i, it forwards the received to all 
other  processes  (including  p′i).  p′i  will  also  monitor 
whether  pi  is  deciding  an  order  for  every  request 
which  it  has  forwarded;  not  deciding  an  order  will 
constitute a time-domain failure by pi. It is easy to see 
that  the  paired  processes operate together as a single 
non-faulty  coordinator  (except  for  the  doubly-signed 
output format), so long as no non-faulty process in the 
pair observes a failure on its counter-part. 
Figure 2. Order Endorsement. 
3.2. Fail-Signalling on ‘Crash’ 
At  the  time  of  system  initialisation,  each  paired 
process is assumed to have been supplied with a fail-
signal  message  signed  by 
its  counter-part.  On 
detecting  a  value-  or  time-domain  failure,  a  process 
double-signs the fail-signal it has been supplied with, 
and  broadcasts  the  doubly-signed  fail-signal  to  all 
other processes (including its counter-part). Similarly, 
when  a  process  receives  an  authentic,  doubly-signed 
fail-signal  from  its  counter-part,  it  also  double-signs 
the fail-signal it has and broadcasts the doubly-signed 
message.  After  having  emitted  fail-signal,  processes 
stop  their  collaboration  for  implementing  the  signal-
on-crash process. 
An  authentic,  doubly-signed  fail-signal,  on  being 
received,  informs  a  destination  process  that  the 
signatories  of  the  received  fail-signal  decided  not  to 
work as a pair any longer (but will continue to operate 
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:20:38 UTC from IEEE Xplore.  Restrictions apply. 
implemented 
as  individual  entities).  It  also  causes  the  destination 
process to echo the fail-signal to the first signatory in 
case the second signatory has (maliciously) omitted to 
send the fail-signal to its counterpart. Thus, a signal-
on-crash  process, 
through  mutual-
checking  of  outputs,  doubly-signed  endorsement  and 
fail-signaling, has the following properties:  
SC1:  Any  authentic,  doubly-signed  message  from  a 
process pair is uniquely attributable to the source and 
contains correct information.  
SC2:  An  authentic  doubly-signed  fail-signal  is  a 
definitive indicator of one faulty process in the source 
pair. 
SC3:  If  a  non-faulty  process  receives  an  authentic 
doubly-signed  fail-signal  from  a  given  pair,  every 
non-faulty  is  guaranteed  to  receive  an  authentic 
doubly-signed fail-signal from that pair. 
4.  The  Order  Protocol  with  Signal-on-
Crash Set-up 
fixed  set  of 
The  protocol  defines  a 
f+1 
sequentially-ranked  co-ordinator  candidates,  {Cc: 1 ≤ 
c  ≤  (f+1)},  comprising  all  f  process-pairs  and  a 
randomly-chosen  unpaired  process.  The  former  are 
ranked  prior  to  the  latter  (the  unpaired  process).  For 
the sake of exposition, let Cc be {pc, p′c} for 1 ≤ c ≤ f 
and Cf+1 be pf+1.  
 Each process has a variable c that holds the rank 
of  the  candidate  currently  acting  as  the  coordinator 
and  is  initialized  to  1.  That  is,  the  protocol  initially 
assigns  C1  as  the  coordinator.  Cc,  2  ≤  c  ≤  (f+1),  can 
take  over  the  coordinator  role  only  if  all  C1,  ..  ,  Cc-1 
have fail-signalled, i.e., only if each pair {pi, p′i}, 1 ≤ i 
≤  (c-1),  has  emitted  an  authentic,  double-signed fail-
signal.  By  SC2,  a  fail-signalling  process-pair  has  a 
faulty  process  in  it.  Therefore,  when  the  unpaired 
process  pf+1  takes  over  as  the  (f+1)th  coordinator,  it 
must be non-faulty and remain so.  So, the processes 
readily  accept  the  ordering  decisions  of  the  (f+1)th 
coordinator.  In  what  follows,  we  would  describe  the 
more  challenging  part  of  the  protocol  involving  only 
the first f coordinators. 
 When  c=  i,  the  process  pair  {pi,  p′i}  operates  as 
the  coordinator  as  described  earlier:  pi  decides  a 
unique,  in-sequence  order  for  each  client  request 
which, if found valid, is endorsed by p′i (see Figure 2); 
authentic,  doubly-signed  order  decisions  are  thus 
transmitted  by  both  pi  and  p′i  to  other  processes.  
Producing  doubly-signed  order  decisions  constitutes 
the  first  two  phases  of  our  protocol  and  is  shown  in 
Figure  3(a)  where  the  pair  {p1,  p′1}  is  acting  as  the 
coordinator. Such an order decision will be denoted as 
order  where  o  is  the  unique  sequence-
number assigned to the request m and D(m) is a digest 
of m. Since clients are correct and direct their requests 
to all nodes, the order for m does not contain m itself. 
A  process  that  receives  a  doubly-signed  order, 
executes the normal part of the protocol in an attempt 
to  commit  m  to  o:  the  request  m  irreversibly  gets 
assigned  to  the  sequence  number  o  indicated  in  the 
order  message.    The  coordinating  process  pair  may 
emit a fail-signal which calls for the installation of the 
next coordinator. This installation is carried out by an 
execution of the install part of the protocol. The two 
parts of the protocol are described below. 
4.1 The Normal Part of the Protocol 
in-sequence  order  executes 
Any  process  pi  that  has  received  an  authentic, 
the 
doubly-signed, 
following steps: 
N1:  Multicast  a  signed  ack  (that  also  contains  the 
received order) to all processes (including itself); 
N2: Wait until ack or order is received from at least 
(n-f) distinct processes; 
N3:  Commit  order  and  retain  the  (n-f)  distinct 
ack/order received as a proof of commitment; 
 The last (commit) phase of Figure 3(a) shows the 
execution of steps N2 and N3. Figure 3(b) depicts the 
three  phases  which  the  BFT  will  take  to  commit  an 
order  to  facilitate  an  easy  comparison.  (Replica  1  is 
acting  as  the  BFT  coordinator.)  Note  that  the  three 
phases of BFT involve: 1 to n (coordinator to all), n to 
n, and again n to n message transmission. The purpose 
of the prepare phase is to verify if the coordinator can 
be  trusted  in  what  it  sent  during  the  pre-prepare 
phase.  When  a  process-pair  (with  signal-on-crash 
semantics)  is  acting  as  the  coordinator,  n  to  n 
Figure 3. Fail-Free 3-phase Operation:  (a) Our Protocol. (b) BFT. 
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:20:38 UTC from IEEE Xplore.  Restrictions apply. 
is 
transmissions  of  the  prepare  phase  is  obviously  not 
needed  and  the  3-phased  exchanges  become:  1  to  1 
(for endorsement), 2 to n (endorsed output to all), and 