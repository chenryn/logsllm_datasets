53004500520056004500520004001400  
64006f006d00610069006e002e006300  
6f006d00030022007300650072007600  
650072002e0064006f006d0061006900  
6e002e0063006f006d00000000000000  
0000
**LMv2响应(The LMv2 Response)**
LMv2响应用于提供与旧服务器的直通身份验证兼容性。与客户端通信的服务器很可能不会实际执行身份验证；而是将响应传递到域控制器进行验证。较旧的服务器仅传递LM响应，并且期望它恰好是24个字节。LMv2响应旨在使此类服务器正常运行。它实际上是一个”微型”
NTLMv2响应，如下所示（有关示例Java实现，请参阅附录D）：
  1. 将计算NTLM密码哈希（Unicode大小写混合的密码的MD4摘要）。
  2. Unicode大写用户名与Type 3消息的”Target Name”字段中显示的Unicode身份验证目标（域或服务器名称）串联。使用16字节NTLM哈希作为Key，将HMAC-MD5消息认证代码算法应用于该值。结果为16字节的值-NTLMv2哈希。
  3. 创建一个随机的8字节client nonce（这与NTLMv2 blob中使用的client nonce相同）。
  4. 来自Type 2消息的质询与client nonce串联在一起。使用16字节NTLMv2哈希（在步骤2中计算）作为Key，将HMAC-MD5消息认证代码算法应用于此值。结果是一个16字节的输出值。
  5. 该值与8字节client nonce串联在一起，以形成24字节LMv2响应。
我们将使用一个久经考验的样本值通过一个简短的示例来说明此过程：  
目标： 域  
用户名： 用户  
密码： SecREt01  
challenge： 0x0123456789abcdef
  1. Unicode混合大小写密码为” 0x53006500630052004500740030003100 “（十六进制）；计算出该值的MD4哈希，结果为” 0xcd06ca7c7e10c99b1d33b7485a2ed808 “。这是NTLM哈希。
  2. Unicode大写的用户名与Unicode身份验证目标连接在一起，并提供” USERDOMAIN “（或十六进制的” 0x55005300450052004200444f004d00410049004e00 “）。使用上一步中的16字节NTLM哈希作为Key，将HMAC-MD5应用于此值，这将产生” 0x04b8e0ba74289cc540826bab1dee63ae “。这是NTLMv2哈希。
  3. 创建一个随机的8字节client nonce。在我们的NTLMv2示例中，我们将使用” 0xffffff0011223344 “。
  4. 然后，我们将Type 2challenge与客户现时串联起来：  
0x0123456789abcdefffffff0011223344使用第2步中的NTLMv2哈希作为Key，将HMAC-MD5应用于该值，即可得到16字节的值” 0xd6e6152ea25d03b7c6ba6629c2d6aaf0 “。
  5. 此值与client nonce连接在一起，以获得24字节LMv2响应：  
0xd6e6152ea25d03b7c6ba6629c2d6aaf0ffffff0011223344
**NTLM2会话响应(The NTLM2 Session Response)**
NTLM2会话响应可以与NTLM2会话安全性（session security）结合使用（可通过”Negotiate NTLM2
Key”Flags使用）。这用于在不支持完整NTLMv2身份验证的环境中提供增强的保护，以抵御预计算的字典攻击（尤其是基于Rainbow
Table的攻击）。
NTLM2会话响应将替换LM和NTLM响应字段，如下所示（有关 Java中的示例实现，请参阅附录D）：
  1. 创建一个随机的8字节client nonce。
  2. client nonce被空填充为24个字节。此值放在Type 3消息的LM响应字段中。
  3. 来自Type 2消息的质询（challenge）与8字节的client nonce串联在一起以形成session nonce。
  4. 将MD5消息摘要算法（[RFC 1321](http://www.ietf.org/rfc/rfc1321.txt) ）应用于session nonce，产生16字节的值。
  5. 该值将被截断为8个字节，以形成NTLM2会话哈希。
  6. 获得NTLM密码哈希（如所讨论的，这是Unicode混合大小写密码的MD4摘要）。
  7. 16字节的NTLM哈希值被空填充为21个字节。
  8. 该值分为三个7字节。
  9. 这些值用于创建三个DESKey（每个7字节）。
  10. 这些Key中的每一个都用于对NTLM2会话散列进行DES加密（产生三个8字节密文值）。
  11. 将这三个密文值连接起来形成一个24字节的值。这是NTLM2会话响应，放置在Type 3消息的NTLM响应字段中。
为了用我们先前的示例值（用户密码为” SecREt01 “，响应Type 2质询” 0x0123456789abcdef “）进行演示：
  1. 创建一个随机的8字节client nonce；与前面的示例一样，我们将使用” 0xffffff0011223344 “。
  2. challenge是将空值填充为24个字节：0xffffff001122334400000000000000000000000000000000000000此值放在Type 3消息的LM响应字段中。
  3. 来自Type 2消息的质询与client nonce串联在一起，形成session nonce（” 0x0123456789abcdefffffff0011223344 “）。
  4. 将MD5摘要应用于该随机数将产生16字节的值” 0xbeac9a1bc5a9867c15192b3105d5beb1 “。
  5. 它被截断为8个字节，以获得NTLM2会话哈希（” 0xbeac9a1bc5a9867c “）。
  6. Unicode大小写混合密码为” 0x53006500630052004500740030003100 “；将MD4摘要应用于此值将为我们提供NTLM哈希（” 0xcd06ca7c7e10c99b1d33b7485a2ed808 “）。
  7. 将其空填充到21个字节，得到” 0xcd06ca7c7e10c99b1d33b7485a2ed8080000000000 “。
  8. 该值分为三个7字节的三分之三：” 0xcd06ca7c7e10c9 “，” 0x9b1d33b7485a2e “和” 0xd8080000000000 “。
  9. 这些值用于创建三个DESKey（如在我们之前的NTLM响应示例中计算的” 0xcd83b34fc7f14392 “，” 0x9b8f4c767543685d “和” 0xd904010101010101 “）。
  10. 这三个Key中的每一个都用于对NTLM2会话哈希（” 0xbeac9a1bc5a9867c “）进行DES加密。这将产生结果” 0x10d550832d12b2cc “（使用第一个Key），” 0xb79d5ad1f4eed3df “（使用第二个Key）和” 0x82aca4c3681dd455 “（使用第三个Key）。
  11. 这三个密文值被连接起来以形成24字节的NTLM2会话响应：0x10d550832d12b2ccb79d5ad1f4eed3df82aca4c3681dd455放置在Type 3消息的NTLM响应字段中。
**匿名响应(The Anonymous Response)**
当客户端建立匿名上下文而非真正的基于用户的上下文时，将看到“匿名响应”。 当不需要“已验证”用户的操作需要“占位符”时，通常会看到这种情况。
匿名连接与Windows“来宾”用户不同（后者是实际用户帐户，而匿名连接则根本没有帐户关联）。
在匿名的Type 3消息中，客户端指示“ Negotiate Anonymous”标志。 NTLM响应字段为空（零长度）； LM响应字段包含单个空字节（“
0x00”）。
###  Type 3 消息示例
现在我们已经熟悉了类型3的响应，现在可以检查类型3的消息了：
    4e544c4d5353500003000000180018006a00000018001800
    820000000c000c0040000000080008004c00000016001600
    54000000000000009a0000000102000044004f004d004100
    49004e00750073006500720057004f0052004b0053005400
    4100540049004f004e00c337cd5cbd44fc9782a667af6d42
    7c6de67c20c2d3e77c5625a98c1c31e81847466b29b2df46
    80f39958fb8c213a9cc6
此消息被分解为：
偏移量 | 值 | 说明  
---|---|---  
0 | 0x4e544c4d53535000 | NTLMSSP Signature  
8 | 0x03000000 | Type 3 Indicator  
12 | 0x180018006a000000 | LM Response Security Buffer:Length: 24 bytes
(0x1800)Allocated Space: 24 bytes (0x1800)Offset: 106 bytes
(0x6a000000)  
20 | 0x1800180082000000 | NTLM Response Security Buffer:Length: 24 bytes
(0x1800)Allocated Space: 24 bytes (0x1800)Offset: 130 bytes
(0x82000000)  
28 | 0x0c000c0040000000 | Target Name Security Buffer:Length: 12 bytes
(0x0c00)Allocated Space: 12 bytes (0x0c00)Offset: 64 bytes
(0x40000000)  
36 | 0x080008004c000000 | User Name Security Buffer:Length: 8 bytes
(0x0800)Allocated Space: 8 bytes (0x0800)Offset: 76 bytes (0x4c000000)  
44 | 0x1600160054000000 | Workstation Name Security Buffer:Length: 22
bytes (0x1600)Allocated Space: 22 bytes (0x1600)Offset: 84 bytes
(0x54000000)  
52 | 0x000000009a000000 | Session Key Security Buffer:Length: 0 bytes
(0x0000)Allocated Space: 0 bytes (0x0000)Offset: 154 bytes
(0x9a000000)  
60 | 0x01020000 | Flags:Negotiate Unicode (0x00000001)Negotiate NTLM
(0x00000200)  
64 | 0x44004f004d004100 49004e00 | Target Name Data (“DOMAIN”)  
76 | 0x7500730065007200 | User Name Data (“user”)  
84 | 0x57004f0052004b00 5300540041005400 49004f004e00 | Workstation Name Data
(“WORKSTATION”)  
106 | 0xc337cd5cbd44fc97 82a667af6d427c6d e67c20c2d3e77c56 | LM Response Data  
130 | 0x25a98c1c31e81847 466b29b2df4680f3 9958fb8c213a9cc6 | NTLM Response
Data  
分析表明：
  1. 这是一条NTLM Type 3消息（来自NTLMSSP签名和3类指示符）。
  2. 客户端已指示使用Unicode编码字符串（已设置”Negotiate Unicode”Flags）。
  3. 客户端支持NTLM身份验证（NegotiateNTLM）。
  4. 客户的域是” DOMAIN “。
  5. 客户端的用户名是” user “。
  6. 客户的工作站是” WORKSTATION “。
  7. 客户端的LM响应为” 0xc337cd5cbd44fc9782a667af6d427c6de67c20c2d3e77c56 “。
  8. 客户端的NTLM响应为” 0x25a98c1c31e81847466b29b2df4680f39958fb8c213a9cc6 “。
  9. 空的Session Key已发送。
  10. 收到Type 3消息后，服务器将计算LM和NTLM响应，并将它们与客户端提供的值进行比较。如果它们匹配，则用户已成功通过身份验证。