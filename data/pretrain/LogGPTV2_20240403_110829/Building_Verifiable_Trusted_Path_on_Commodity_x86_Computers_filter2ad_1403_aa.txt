title:Building Verifiable Trusted Path on Commodity x86 Computers
author:Zongwei Zhou and
Virgil D. Gligor and
James Newsome and
Jonathan M. McCune
2012 IEEE Symposium on Security and Privacy
Building Veriﬁable Trusted Path on Commodity x86 Computers
Zongwei Zhou, Virgil D. Gligor, James Newsome, Jonathan M. McCune
ECE Department and CyLab, Carnegie Mellon University
Abstract
A trusted path is a protected channel that assures the secrecy
and authenticity of data transfers between a user’s input/output
(I/O) device and a program trusted by that user. We argue that,
despite its incontestable necessity, current commodity systems
do not support trusted path with any signiﬁcant assurance. This
paper presents a hypervisor-based design that enables a trusted
path to bypass an untrusted operating-system, applications, and
I/O devices, with a minimal Trusted Computing Base (TCB).
We also suggest concrete I/O architectural changes that will
simplify future trusted-path system design. Our system enables
users to verify the states and conﬁgurations of one or more
trusted-paths using a simple, secret-less, hand-held device. We
implement a simple user-oriented trusted path as a case study.
1 Introduction
A Trusted Path (TP) is a protected channel that assures the
secrecy and authenticity of data transfers between a user’s in-
put/output (I/O) devices and a program trusted by that user. A
trusted path is a necessary response to what Clark and Blumen-
thal call the “ultimate insult” directed at the end-to-end argu-
ment in system design [13]; namely, that a protected channel
between a user’s end-point and a remote end-point provides no
assurance without a protected channel between the user himself
and his own end-point. Without a trusted path, an adversary
could surreptitiously obtain sensitive user-input data by record-
ing key strokes, modify user commands to corrupt application-
program operation, and display unauthentic program output to
an unsuspecting user to trigger incorrect user action. This is
particularly egregious for embedded real-time systems where
an operator would be unable to determine the true state of a
remote device and to control it in the presence of a malware-
compromised commodity OS [20, 35, 53].
For the past thirty years, only a few systems have imple-
mented trusted paths with limited capabilities on boutique com-
puter systems. These systems employ only a small number of
user-oriented I/O devices (e.g., a keyboard, mouse, or video
display), and a small number of trusted programs (e.g., login
commands [5] and administrative commands [7, 15, 16, 19,
28, 30, 51]). Some instantiations include dedicated operating-
system kernels [21, 55]. Given the incontestable necessity of
trusted path as a security primitive, why trusted paths have not
been implemented on any commodity computer system using a
small-enough Trusted Computing Base (TCB) to allow signiﬁ-
cant (i.e., formal) security assurance?
While many operating systems (OSes) offer trusted path
in the form of secure attention sequences—key-combinations
(e.g., Ctrl+Alt+Del) to initiate communication with the OS—
the trusted computing base for the end-points of that trusted
path is the entire OS, which is large and routinely compro-
mised. Such trusted paths, though users may be forced to trust
them in practice, are not adequately trustworthy.
Recent research has demonstrated removing the OS from the
TCB for small code modules [6, 43, 44, 57]. These mechanisms
use a smaller, more trustworthy kernel running with higher
privilege than the OS (e.g., as a hypervisor or as System Man-
agement Mode (SMM) code) to provide an isolated execution
environment for those code modules. While this work isolates
modules that perform pure computation, it does not provide a
mechanism that enables isolated modules to communicate with
devices without going through the OS, and hence fail to provide
a satisfactory trusted-path mechanism.
Another recent advance is the ability to structure device
drivers in a hypervisor-based system into driver-domains, giv-
ing different driver virtual machines (VMs) direct access to
different devices [14, 47]. However, this work only demon-
strates how to isolate device driver address spaces and Direct
Memory Access (DMA). It does not fully isolate devices from
compromised OS code in other administrative domains (e.g.,
system-wide conﬁgurations for I/O ports, Memory-Mapped I/O
(MMIO), and interrupts remain unprotected). Devices con-
trolled by a compromised OS may still breach the isolation be-
tween device drivers and gain unauthorized access to the regis-
ters and memory of other devices (Section 4).
Challenges. Address-space isolation alone is insufﬁcient to
remove device drivers from each-others’ TCBs, because sub-
stantial shared device-conﬁguration state exists on commod-
ity computers. A compromised driver in one virtual machine
can manipulate that state to compromise the secrecy and au-
thenticity of communication between drivers in other virtual
machines and their corresponding devices. For example, a
compromised driver can intentionally conﬁgure the memory-
mapped I/O (MMIO) region of a device to overlap the MMIO
region of another device. Such a Manipulated Device (ManD
in Figure 1) may then intercept MMIO access to the legitimate
trusted-path Device Endpoint (DE in Figure 1). The typical
mechanisms protecting CPU-to-memory access or DMA do not
defend against this “MMIO mapping attack” (Sections 4, 5.2
and 5.3).
© 2012, Zongwei Zhou. Under license to IEEE.
DOI 10.1109/SP.2012.42
616
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:11 UTC from IEEE Xplore.  Restrictions apply. 
2 Problem Deﬁnition
This section presents the threat model, desired isolation prop-
erties, and assumptions for our trusted-path system.
2.1 Threat Model
We consider an adversary that has compromised the operat-
ing system (OS), which we henceforth refer to as the compro-
mised OS. A compromised OS can access any system resources
that it controls (e.g., access any physical memory address, and
read/write any device I/O port), and break any security mech-
anisms that rely on it (e.g., process isolation, ﬁle system ac-
cess control). The adversary can then leverage the compro-
mised OS to actively reconﬁgure any device (e.g., modify a de-
vice’s MMIO region, or change the operating mode of a device)
and induce it to perform arbitrary operations (e.g., trigger inter-
rupts, issue DMA write requests) using any I/O commands. We
say manipulated device to reference the result of such attacks.
We do not consider ﬁrmware attacks, physical attacks on
devices (see Section 2.3), or side-channel attacks. Denial-of-
service attacks are also out of scope; we seek only to guarantee
the secrecy and authenticity of the trusted path.
2.2 Desired Trusted-Path Isolation Properties
A Trusted Path contains three components: the program end-
point (PE), the device endpoint (DE), and the communication
path between these two endpoints. The communication path
represents all hardware (e.g., northbridge and southbridge chips
in Figure 1) between the device endpoint and the system re-
sources that support the execution of the program endpoint
(CPU and memory). The I/O data (e.g., keyboard scan code,
data written to a hard drive), commands (e.g., DMA write re-
quests), and interrupts exchanged between the two endpoints
are physically transferred along this path. Co-existing with
the commodity OS and its applications, our trusted-path sys-
tem must isolate these components from the compromised OS
and manipulated devices. Speciﬁcally, we seek to meet the fol-
lowing isolation requirements.
Program Endpoint (PE) Isolation. A compromised OS and
manipulated devices cannot interfere with the execution of the
PE, and cannot reveal or tamper with any run-time data gener-
ated by the program endpoint of the trusted path.
Device Endpoint (DE) Isolation. The I/O data and commands
transferred to/from the DE cannot be modiﬁed by, or revealed
to, the compromised OS and manipulated devices. Interrupts
generated by the DE must be delivered exclusively to the PE.
Spoofed interrupts generated by the compromised OS or ma-
nipulated devices must not interfere with the PE.
Communication Path Isolation. All hardware along the com-
munication path is treated in the same manner as a device end-
point. Thus, communication-path isolation is implemented by
applying the same mechanisms that assure device endpoint iso-
lation for all of the hardware devices along the communication
path.
Figure 1: Attacks against trusted-path isolation. A manipu-
lated device (ManD) launches an MMIO mapping attack (Sec-
tion 5.2) and an interrupt spooﬁng attack (Section 5.4) against
the path between the Program Endpoint (PE) and the Device
Endpoint (DE).
Another signiﬁcant challenge not met by address space iso-
lation is interrupt spooﬁng. Software-conﬁgurable interrupts
(e.g., Message Signaled Interrupts (MSI) and Inter-processor
Interrupts (IPI)) share the same interrupt vector space with
hardware interrupts. By modifying the MSI registers of the
ManD, a compromised driver may spoof the MSI interrupts of
the DE. As shown in Figure 1, the unsuspecting driver in the
Program Endpoint (PE) for the DE may consequently perform
incorrect or harmful operations by processing spoofed inter-
rupts from the ManD (Sections 4 and 5).
Finally, another unmet challenge is to provide trusted-path
mechanisms with veriﬁable isolation properties on commodity
platforms without resorting to external devices that protect and
manage cryptographic secrets.
Contributions.
We show how to protect shared device-
conﬁguration state on today’s commodity platforms. We
use these techniques to build a general-purpose, trustworthy,
human-veriﬁable, trusted path system. It is general in that it al-
lows arbitrary program endpoints running on arbitrary OSes to
be isolated from their underlying OS and to establish a trusted
path with arbitrary unmodiﬁed devices. It is trustworthy in that
the TCB is small—only 16K source lines of code (SLoC) in
our prototype—and simple enough to put it within the reach of
formal veriﬁcation [24, 25, 36]. It is human-veriﬁable in that
a human using the machine can verify that the desired trusted
path is in effect (e.g., that the keyboard is acting as a secure
channel to a banking program on that machine). We also pro-
pose modiﬁcations for the design of x86 platforms that enable
simpler, higher performance, and more robust, trusted-path im-
plementations. Finally, we present a case study of a simple
trusted-path application that communicates with the keyboard
and screen.
617
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:11 UTC from IEEE Xplore.  Restrictions apply. 
The trusted-path hypervisor HV is a small, dedicated hyper-
visor that runs directly on commodity hardware. Unlike a full-
featured hypervisor (e.g., VMware Workstation, Xen [8]), the
HV supports a single guest OS, and does not provide full virtu-
alization [8] of all devices outside the trusted-path to the guest
OS. Instead, the OS can directly operate on the devices outside
the trusted-path without the involvement of the HV. For ex-
ample, the leftmost application APP in Figure 2 can access the
device DEV via ordinary OS support. Section 3.1 discusses our
hypervisor design decisions in depth. The HV provides the nec-
essary mechanisms to ensure isolation between program end-
points, device endpoints, and communication paths for trusted
paths. In particular, the HV isolates trusted-path device state
from the “shared device-conﬁguration state” on the commod-
ity platform (Section 4). The program endpoint PE of a trusted
path includes the device drivers for DEs that are associated with
that trusted path. In Section 3.2, we describe this “DE driver-
in-PE” design in more detail.
3.1 Trusted-Path Hypervisor
From a whole-system perspective, one can think of our trusted-
path hypervisor HV as a micro-kernel that runs at a higher priv-
ilege level than the commodity OS. As a starting point, rather
than attempting to isolate every driver from each-other, which
would require a huge engineering effort, we run a commodity
OS as a process on top of our hypervisor, and allow that pro-
cess to manage most of the devices most of the time, using the
existing drivers in the commodity OS. A trusted-path program
endpoint runs as a distinct isolated process (VM) directly on the
hypervisor. We isolate only the relevant driver(s) and integrate
them with the PE of the trusted path, as illustrated in Figure 2.
A valid design alternative would be to discard the hypervi-
sor and instead restructure an OS to be natively microkernel-
based. While this alternative may reduce total system complex-
ity, it would explicitly run counter to our stated goal of build-
ing trusted path on commodity platforms, compatible with com-
modity OSes. The complexities of such a restructuring job for a
commodity OS, both from a technical and business perspective,
are immense. We are not aware of any successful attempt at re-
structuring a commodity OS to become natively micro-kernel
based for the past three decades.
From an assurance perspective, our overriding goal is to
build a hypervisor that is small and simple enough to enable
formal veriﬁcation. A small codebase is a necessary but in-
sufﬁcient condition for formal veriﬁcation. Code-size limita-
tions arise from the practical constraints of state-of-the-art as-
surance methods. To date, even the seemingly simple prop-
erty of address-space separation, which is necessary but in-
sufﬁcient for trusted path isolation, has been formally proved
only for very small codebases; i.e., fewer than 10K SLoC [24].
Simplicity of the codebase is another necessary but insufﬁcient
condition for formal veriﬁcation. Our hypervisor’s complexity
is demonstrably lower than that of the formally veriﬁed seL4
microkernel [36]. Speciﬁcally, seL4 implements more com-
Figure 2: Trusted path system architecture. The ordinary
path represents I/O transfers outside the trusted path. The
shaded area denotes the trusted computing base (TCB) of the
trusted path.
2.3 Assumptions
To setup a trusted path to a device, we must obtain accurate
information about the chipset hardware (e.g., northbridge and
southbridge in Figure 1) and how it is connected to the system.
The necessary chipset hardware information includes chipset
identiﬁers, internal register and memory layout and usage, con-
nectivity and hierarchic location (e.g., how the chipset hard-
ware is hard-wired together), and I/O port and memory map-
pings. Typically, this information is acquired from the system
ﬁrmware (e.g., BIOS). For the purposes of this paper, we as-
sume that the system ﬁrmware is trusted and provides us with
this information.
In principle, it is possible to validate this
assumption if evidence of trustworthy conﬁguration becomes
available; e.g., conﬁguration attestation provided by system
mechanisms [41, 52], or by a trusted system integrator.
We also assume that all chipset hardware and I/O peripheral