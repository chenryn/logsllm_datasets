### CWSJY0003W: IBM MQ classes for JMS Message Retrieval Issue

**Issue Description:**
The IBM MQ classes for JMS attempted to retrieve a message for delivery to a message listener, but the message was not available. This issue occurs when the message, which was previously marked using `browse-with-mark`, is no longer accessible.

**Cause:**
Activation specifications and listener ports running in Application Server Facilities (ASF) mode are used to monitor queues or topics hosted on IBM MQ queue managers. Initially, messages are browsed on the queue or topic. When a message is found, a new thread is started to destructively get the message and pass it to an instance of a message-driven bean application for processing.

When a message is browsed, the queue manager marks the message for a specific period, effectively hiding it from other application server instances. The duration of this marking is determined by the queue manager attribute `MARKINT`, which defaults to 5000 milliseconds (5 seconds). This means that after an activation specification or listener port has browsed a message, the queue manager will wait for 5 seconds for the destructive get to occur before allowing another application server instance to see and process the message.

**Scenario:**
1. An activation specification running on Application Server 1 browses message A on a queue.
2. The activation specification starts a new thread to process message A.
3. An event occurs on Application Server 1, causing message A to remain on the queue after 5 seconds.
4. An activation specification running on Application Server 2 now browses message A and starts a new thread to process it.
5. The new thread on Application Server 2 destructively gets message A and passes it to a message-driven bean instance.
6. The thread on Application Server 1 attempts to get message A but finds it is no longer on the queue.
7. At this point, Application Server 1 reports the CWSJY0003W message.

**Resolution:**
There are two ways to resolve this issue:

1. **Increase the `MARKINT` Value:**
   - Increase the value of the queue manager attribute `MARKINT` to a higher value. The default is 5000 milliseconds (5 seconds). Increasing this value gives the application server more time to destructively get a message after it is detected.
   - Changing the `MARKINT` value affects all applications that connect to the queue manager and browse messages before destructively getting them.

2. **Suppress the Warning:**
   - Set the `com.ibm.msg.client.wmq.suppressBrowseMarkMessageWarning` property to `true` in WebSphere Application Server to suppress the CWSJY0003W warning message.
   - To set this variable, open the administrative console and navigate to:
     - Servers -> Application Servers -> Java and Process Management -> Process Definition -> Java Virtual Machine -> Custom Properties -> New
     - Name: `com.ibm.msg.client.wmq.suppressBrowseMarkMessageWarning`
     - Value: `true`

**Note:**
If an activation specification or listener port is connecting to IBM MQ using IBM MQ messaging provider migration mode, these messages can be ignored. The design of this mode allows such messages to occur during normal operation.

### J2CA0027E: XA Transaction Errors

**Issue Description:**
The following errors appear in the WebSphere Application Server SystemOut.log file when applications using the WebSphere Application Server IBM MQ messaging provider try to commit a transaction:

```
J2CA0027E: An exception occurred while invoking end on an XA Resource Adapter from DataSource JMS_Connection_Factory, within transaction ID Transaction_Identifier:
javax.transaction.xa.XAException: The method 'xa_end' has failed with errorCode '100'.
J2CA0027E: An exception occurred while invoking rollback on an XA Resource Adapter from DataSource JMS_Connection_Factory, within transaction ID Transaction_Identifier:
javax.transaction.xa.XAException: The method 'xa_rollback' has failed with errorCode '-7'.
```

**Cause:**
These errors occur when a JMS connection created from a JMS connection factory is closed off by WebSphere Application Server because the aged timeout for the connection has expired. There is a connection pool associated with each connection factory, divided into active and free pools.

When an application closes a JMS connection, it is moved to the free pool unless the aged timeout has elapsed, in which case the connection is destroyed. If the JMS connection is still involved in an active transaction when it is destroyed, the application server sends an `xa_end()` to IBM MQ, indicating that all transactional work on that connection has completed.

This causes issues if the JMS connection was created inside a transactional message-driven bean using either an activation specification or a listener port to monitor a JMS Destination on an IBM MQ queue manager. In this situation, there are two connections to IBM MQ:

1. A connection to get a message from IBM MQ and deliver it to the message-driven bean instance for processing.
2. A connection created within the message-driven bean's `onMessage()` method.

If the second connection is closed and destroyed due to the aged timeout, an `xa_end()` is sent to IBM MQ, indicating that all transactional work has completed. When the message-driven bean finishes processing the message, the application server needs to complete the transaction by sending `xa_end()` to all resources, including IBM MQ. However, IBM MQ has already received an `xa_end()` for this transaction and returns an `XA_RBROLLBACK (100)` error, causing the application server to report the error and roll back the entire transaction.

**Environment:**
Message-driven bean applications that use activation specifications or listener ports to monitor JMS Destinations hosted on an IBM MQ queue manager and create a new connection to IBM MQ using a JMS connection factory from within their `onMessage()` method can be affected by this issue.

**Resolution:**
To resolve this issue, ensure that the JMS connection factory being used by the application has the connection pool property `aged timeout` set to zero. This prevents JMS Connections from being closed when they are returned to the free pool, ensuring that any outstanding transactional work can be completed.

### 2035 MQRC_NOT_AUTHORIZED: Authentication Errors

**Issue Description:**
The 2035 MQRC_NOT_AUTHORIZED error can occur when an application connects to IBM MQ from WebSphere Application Server. This section covers the most common reasons for this error and provides steps to resolve it.

**Common Causes:**
- The user identifier passed from the application server to IBM MQ is either unknown, not authorized, or truncated to more than 12 characters.
- The user identifier is a member of the `mqm` group on the server hosting the IBM MQ queue manager, and a channel authentication record (CHLAUTH) blocks administrative access.
- The presence of an Advanced Message Security security policy.

**Diagnosis:**
To understand the cause of the 2035 MQRC_NOT_AUTHORIZED reason code, you must identify the user name and password used by IBM MQ to authorize the application server.

**Default Behavior:**
- If no credentials are supplied by the application, and neither component-managed nor container-managed security systems are configured, WebSphere Application Server provides a blank user name to IBM MQ.
- On AIX or Linux, the user ID is typically `mqm`.
- On Windows, the user ID is typically `MUSR_MQADMIN`.

**Configuration Options:**
- **Container-Managed Security:**
  - Use container-managed security to configure the user name and password passed to IBM MQ. This is done via the deployment descriptor or EJB 3.0 annotations.
  - Example for EJB 2.1:
    ```java
    ConnectionFactory myCF = (ConnectionFactory)ctx.lookup("java:comp/env/jms/MyResourceRef");
    ```
  - Example for EJB 3.0:
    ```java
    @Resource(name = "jms/MyResourceRef", authenticationType = AuthenticationType.CONTAINER)
    private javax.jms.ConnectionFactory myCF;
    ```

- **Component-Managed Security:**
  - For cases where it is impractical to change the application to use container-managed security, a default component-managed authentication alias can be configured using wsadmin scripting.

**Resolution:**
- **Development Environment:**
  - Choose a user for WebSphere Application Server to authenticate as.
  - Relax the CHLAUTH security if the user is an IBM MQ administrative user.
  - Configure the server connection channel to set the MCA user ID (MCAUSER) to the chosen user.

- **Production Environment:**
  - Configure SSL/TLS security between the application server and IBM MQ.
  - Establish trust between the IBM MQ queue manager and WebSphere Application Server.
  - Configure mutual SSL/TLS authentication if no security exit performs username and password authentication.
  - Disable server connection channels without SSL/TLS security.

For detailed instructions on configuring SSL/TLS, refer to the IBM MQ and WebSphere Application Server documentation.