1024-bit key pair generated during installation of OpenSSH.
Similar to Section 5.1, we wrote a custom SSH client that
10https://www.stunnel.org
11http://www.openssh.com
Figure 3: Complete ﬁltered trace of a 1024-bit DSA sign operation during an OpenSSH SSH-2 handshake.
Figure 4: Complete ﬁltered trace of a 2048-bit DSA sign operation during an stunnel TLS 1.2 handshake.
launches our spy program, the spy program collects the tim-
ing signals during the handshake. At the same time it per-
forms an SSH handshake where the protocol messages and
the digital signature are collected for our attack.
Relevant to this work, the SSH protocol deﬁnes the Diﬃe-
Hellman key exchange parameters in the SSH_MSG_KEXINIT
message, along with the signature algorithm and the hash
function identiﬁers. Additionally a 16-byte random nonce is
sent for host authentication by the client and the server.
The SSH_MSG_KEXDH_REPLY message contains the server’s
public key (used to create and verify the signature), server’s
DH public key f (used to compute the shared secret K in
combination with the client’s DH public key e) and the sig-
nature itself. Figure 6 shows the SSH handshake with the
critical parameters sent in every message relevant for the
attack. To be more precise, the signature is over the SHA-1
hash of the concatenated string
ClientVersion + ServerVersion +
Client.SSH_MSG_KEXINIT + Server.SSH_MSG_KEXINIT +
Server.publicKey + minSize + prefSize + maxSize +
p + g + e + f + K
As the key exchange12 and public key parameters, our
SSH client was conﬁgured to use diffie-hellman-group-
-exchange-sha1 and ssh-dss respectively. Note that two
diﬀerent hashing functions may be used, one hash function
for key derivation following Diﬃe-Hellman key exchange and
another hash function for the signing algorithm, which for
DSA is the SHA-1 hash function.
Similarly to the TLS case, our client saves the hash of
the concatenated string and the digital signature raw bytes
sent from the server. All subsequent messages, including
SSH_MSG_NEWKEYS and any client responses, are not required
by our attack. Our client therefore drops the connection at
this stage, and repeats this process several hundred times to
12https://tools.ietf.org/html/rfc4419
build up a set of distinct trace, digital signature, and digest
tuples. See Section 6 for our explicit attack parameters.
Figure 3 is a typical signal extracted by our spy program in
parallel to the handshake between our client and the victim
SSH server.
5.3 Observations
These two widely deployed protocols share many similar-
ities in their handshakes regarding e.g. signaling, content of
messages, and security context of messages. However, in the
process of designing and implementing our attacker clients
we observe a subtle diﬀerence in the threat model between
the two. In TLS, all values that go into the hash function to
compute the digital signature are public and can be observed
(unencrypted) in various handshake messages. In SSH, most
of the values are public—the exception is the last input to
the hash function: the shared DH key. The consequence
is side-channel attacks against TLS can be passive, listen-
ing to legitimate handshakes not initiated by the attacker
yet collecting side-channel data as this occurs. In SSH, the
attacker must be active and initiate its own handshakes—
without knowing the shared DH key, a passive attacker can-
not compute the corresponding digest needed later for the
lattice stage of the attack. We ﬁnd this innate protocol
level side-channel property to be an intriguing feature, and
a factor that should be carefully considered during protocol
design.
6. RECOVERING THE PRIVATE KEY
In previous sections we showed how our attack can re-
cover the sequence of square and multiply operations that
the victim performs. We further showed how to get the sig-
nature information matching each sequence for both SSH
and TLS. We now turn to recovering the private key from
the information we collect.
The scheme we use is similar to past works. We ﬁrst
 100 200 300 0 2000 4000 6000 8000 10000 12000LatencyTimemultiply probesquare probe 100 200 300 0 20000 40000 60000 80000 100000 120000LatencyTimemultiply probesquare probeClient
ClientHello
[random,
CipherSuite]
------->
ClientKeyExchange
(ChangeCipherSpec)
Finished
Application Data
Server
Table 1: Empirical results of recovering various
LSBs from the spy program traces and their cor-
responding SM sequences.
ServerHello
[random,
cipher_suite]
Certificate
ServerKeyExchange
[params,
HashAlgorithm,
SignatureAlgorithm,
signed_params]
ServerHelloDone
(ChangeCipherSpec)
Finished
Application Data
(cid:96)
1
2
2
3
3
4
4
5
5
6
6
7
7
8
8
a
1
2
3
4
6
8
12
16
24
32
48
64
96
128
192
Pattern Accuracy (%) Accuracy (%)
1024-bit, SSH 2048-bit, TLS
99.9
99.7
97.2
99.7
98.2
99.6
97.8
99.1
97.6
98.8
95.0
97.5
95.1
98.7
94.8
SSM
SMS
SMSM
SSMSS
SMSMS
SSMSSS
SMSMSS
SSMSSSS
SMSMSSS
SSMSSSSS
SMSMSSSS
SSMSSSSSS
SMSMSSSSS
SSMSSSSSSS
SMSMSSSSSS
99.9
99.9
98.2
99.7
99.4
97.8
98.4
96.7
95.0
85.1
90.4
87.5
84.6
67.7
75.0
Figure 5: Our custom client carries out TLS hand-
shakes, collecting certain ﬁelds from the ClientHello,
ServerHello, and SeverKeyExchange messages to con-
struct the digest. It collects timing traces in parallel
to the server’s DSA sign operation, said digital sig-
nature being included in a SeverKeyExchange ﬁeld and
collected by our client.
Client
Server
ClientVersion
----->
SSH_MSG_KEXINIT
[Nonce, KEX_alg,
publicKey_alg]
SSH_KEXDH_GEX_REQUEST
[minSize, prefSize,
maxSize]
SSH_KEXDH_GEX_INIT
[e]
SSH_MSG_NEWKEYS
Application Data
ServerVersion
SSH_MSG_KEXINIT
[Nonce, KEX_alg,
publicKey_alg]
SSH_KEXDH_GEX_GROUP
[p, g]
SSH_KEXDH_GEX_REPLY
[publicKey, f,
Signature]
Application Data
Figure 6: Our custom client carries out SSH hand-
shakes, collecting parameters from all the messages
to construct the digest. It collects timing traces in
parallel to the server’s DSA sign operation, said digi-
tal signature being included in a SSH_KEXDH_GEX_REPLY
ﬁeld and collected by our client.
SMMMMMMMMMMMMMMMMSSSMSSSSSSSMSSSSMSSSSSSSMSSSSSSM
SSSSSSMSSSSSSSSMSSSMSSSSSSSSSSMSSSSSSSSMSSSSSMSSS
SSMSSSSSSSSSMSSSSSMSSSSSSMSSSSSMSSSSSSSMSSSSMSSSS
SSSMSSSSSSMSSSSMSSSSSSSSMSSSSSSSSMSSSMSSSSSSSMSSS
SSMSSSSSMSSSSMSSSSSSMSSSMSSSSSSMSSSSSSMSSMSSSSSSS
SSMSSSSMSSSSSSSSMSSSSSSSSSMSMSSSSSMSSSSSSSSSMSSSS
SSSSSSMSSSSM
Figure 7: Example of an extracted SM sequence,
where S and M are square and multiply, respectively.
use the side-channel information we capture to collect in-
formation on the nonce used in each signature. We use the
information to construct HNP instances and use a lattice
technique to ﬁnd the private key. Further details on each
step are provided below.
6.1 Extracting the least signiﬁcant bits
In Section 4 we showed how we collect the SM sequences
of each exponentiation. From every SM sequence, we extract
a few LSBs to be used later in the lattice attack. To that
end, Table 1 contains our empirical accuracy statistics for
various relevant patterns trailing the SM sequences, and fur-
thermore not for the SWE in isolation but rather in the con-
text of OpenSSL DSA executing in real world applications
(TLS via stunnel, SSH via OpenSSH), as described above
in Section 5. All of these patterns correspond to recovering
a = ¯k mod 2(cid:96) for an exponent ¯k. From these ﬁgures, we
note two trends. (1) The accuracy decreases as (cid:96) increases
due to deviation in the square operation width. Yet weighed
with the exponentially decreasing probability of the longer
patterns, the practical impact diminishes. (2) As expected,
we generally obtain more accurate results with 2048-bit vs.
1024-bit due to granularity. These numbers show that, ex-
ploiting our new software defect and leveraging the tech-
niques in Section 4, we can recover a with extremely high
probability.
6.2 Lattice attack implementation
Recall that to protect against timing attacks OpenSSL
uses an exponent ¯k equivalent to the randomly selected nonce
k. ¯k is calculated by adding the modulus q once or twice to
k to ensure that ¯k is of a ﬁxed length. That is, ¯k = k + γq
such that 2n ≤ ¯k < 2n + q where n = (cid:100)lg(q)(cid:101) and γ ∈ {1, 2}.
The side-channel leaks information on bits of the expo-
nent ¯k rather than directly on the nonce. To create HNP
instances from the leak we need to handle the unknown value
of γ. In previous works, due to ECC parameters the modu-
lus is close to a power of two hence the value of γ is virtually
constant [9]. For DSA, the modulus is not close to a power
of two and the value of γ varies between signatures. The
challenge is, therefore, to construct an HNP instance with-
out the knowledge of γ. We now show how to address this
challenge.
Recall that s = k−1(h(m) + αr) mod q. Equivalently,
k = s−1(h(m) + αr) mod q. The side-channel information
recovers the (cid:96) LSBs of ¯k. We, therefore, have ¯k = b2(cid:96) + a
where a = ¯k mod 2(cid:96) is known, and
2n−(cid:96) ≤ b < 2n−(cid:96) +
(cid:108)
q/2(cid:96)(cid:109)
(1)
Following previous works we use (cid:98)·(cid:99)q to denote the reduc-
tion modulo q to the range [0, q) and | · |q for the reduction
modulo q to the range (−q/2, q/2). Within these expres-
sions division operations are carried over the reals whereas
all other operations are carried over GF (q).
We now look at(cid:4)b − 2n−(cid:96)(cid:5)
(cid:4)b − 2n−(cid:96)(cid:5)
= (cid:4)(¯k − a) · 2−(cid:96) − 2n−(cid:96)(cid:5)
= (cid:4)¯k · 2−(cid:96) − a · 2−(cid:96) − 2n−(cid:96)(cid:5)
= (cid:4)k · 2−(cid:96) + γ · q · 2−(cid:96) − a · 2−(cid:96) − 2n−(cid:96)(cid:5)
= (cid:4)k · 2−(cid:96) − a · 2−(cid:96) − 2n−(cid:96)(cid:5)
= (cid:4)(s−1 · (h(m) + α · r) · 2−(cid:96) − a · 2−(cid:96) − 2n−(cid:96)(cid:5)
= (cid:4)α · s−1 · r · 2−(cid:96) − (2n + a − s−1 · h(m)) · 2−(cid:96)(cid:5)
.
.
q
q
q
q
q
q
q
q
(cid:108) q
(cid:109)(cid:107)
2(cid:96)+1
q
−(cid:96) +