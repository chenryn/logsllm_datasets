lowers its rate to (0.75 ∗ Btlbwest ) to drain any excess packets out
of queues. BBR’s Btlbwest is then the max observed packet delivery
rate over the last 8 RTTs. It then sends at the newly-recalculated
Btlbwest for the next 6 RTTs before probing again.
Estimating the RTT. BBR also keeps track of the smallest ob-
served RTT. If BBR goes 10 seconds without observing a smaller
RTT, it enters ProbeRTT. During ProbeRTT, BBR caps the amount
of data it has in-flight to only 4 packets and measures the RTT for
those packets for at least 200ms and one packet-timed round-trip. 3
BBR drops its sending rate to try to ensure none of its own packets
are occupying queues in the network: in Fig. 1c one can observe
BBR dropping its rate to almost zero on ten-second intervals. After
ProbeRTT, BBR returns to the state it was in previously.
5 ANALYSIS AND MODELING
We model BBR’s post-convergence share of link capacity when
competing with loss-based CCAs in three phases.
2Our state machine figure differs from the ‘standard’ BBR figure [3] by focusing on only
steady-state operation rather than startup, and separating apart the three sub-phases
of ProbeBW.
3A "packet-timed round-trip" means that a data packet is sent and then the sender
waits for that packet or some late packet to be acknowledged
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
(1) Simple Model of In-flight Cap: We first model a simple sce-
nario to understand how BBR’s in-flight cap controls BBR’s sending
rate. In this scenario, the queue is highly bloated, baseline RTTs are
negligible, and there are only two flows (one BBR, one loss-based)
competing.
(2) Extended Model of In-flight Cap: After demonstrating that
BBR’s in-flight cap controls its sending rate, we develop a more
robust model, covering scenarios with multiple BBR flows, finite
queue capacities, and non-negligible RTTs.
(3) Model of Probing Time: BBR’s in-flight cap is only 4 packets
during ProbeRTT, hence BBR spends time without transmitting
data every ten seconds. To predict BBR’s sending rate overall, we
must reduce the rate predicted by the in-flight cap proportionally
to the amount of time BBR spends in ProbeRTT.
5.1 Assumptions and Parameters
Table 1 lists the parameters in our model. We use these parameters
to compute p, Cubic/Reno’s share of the link capacity at conver-
gence, and 1 − p, BBR’s share of link capacity at convergence. Our
model is based on the following assumptions:
(1) Flows have infinite data to send; their sending rates are deter-
mined by their CCA, which is either BBR, Cubic, or Reno.
(2) All flows experience the same congestion-free RTT and the
available link capacity is fixed.
(3) All packets are a fixed size.
(4) The network is congested and the queue is typically full; a flow’s
share of throughput hence equals its share of the queue.
(5) All loss-based CCA’s are synchronized [15]. All BBR flows are
synchronized [5]. All flows begin at the same time.
5.2 Simple Model: BBR’s ProbeBW State
The first insight of our model is that BBR is controlled by its in-
flight cap: in BBR’s ProbeBW phase, BBR aggressively pushes out
loss-based competitors until it reaches its in-flight cap.
Model: Why this happens follows from the BBR algorithm and
loss-based CCAs’ reaction to packet losses. Assume a link capacity
c, where BBR and the loss-based CCAs, in aggregate, are consuming
all of the available capacity. By probing for 125% of its current share
of bandwidth, BBR pushes extra data into the network (offered load
> c) leading to loss for all senders. Loss-based algorithms back off,
dropping their window sizes and corresponding sending rate. BBR
does not react to losses and instead increases its sending rate, since
it successfully sent more data during bandwidth probing than it
did in prior cycles. The loss-based CCA returns to ramping up its
sending rate, and together the combined throughput of the two
becomes slightly higher than the link capacity and the two flows
begin to fill the bottleneck buffer. This process continues until BBR
hits an in-flight cap; we expect that in the absence of a cap it would
consume the entire link capacity.
Validation: We modified BBR in our testbed to run with a in-flight
cap of 4 × BDP. In Fig. 5b we show one run with our elevated in-
flight cap along with a run with the standard cap in a testbed in a 40
ProbeRTTProbeBWDrainSteady State7th RTTEvery 10 secondsReturn to Prev. Staterepeat
6 RTTsIMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Ranysha Ware et al.
Parameter
N
q
c
l
X
d
Description
Number of BBR flows sharing bottleneck
Bottleneck queue capacity (packets)
Bottleneck link capacity (packets per second)
RTT when there is no congestion (seconds)
Queue capacity as multiple of BDP: q = Xcl
Flow completion times after convergence (seconds)
Table 1: Description of model parameters
(a) 2 BDP in-flight cap
(b) 4 BDP in-flight cap
Figure 5: BBR vs Cubic in a 10Mbps×40ms testbed with a 32 BDP
queue. Black dashed line is the model (5).
ms × 10 Mbps network with a 32 BDP packet queue. BBR increases
its share of the link capacity; we show in the next subsection that
this increased share matches our prediction of a window-limited
sender with a window the size of the in-flight cap.
5.3 Simple Model: BBR’s In-flight Cap
To understand the impact of the in-flight cap on BBR’s performance,
we build a model making two simplifying assumptions (we relax
these assumptions later): (1) There is only 1 BBR flow competing
with any number loss-based CCAs, and (2) The queue capacity is
much greater than the BDP (q ≫ cl).
Model: Recall that the in-flight cap is calculated as:
inflightcap = 2 × RTTest × Btlbwest
(1)
With a queue capacity of q we can assume that, at any given point
of competition p from loss-based flows, BBR will consume the
remaining bandwidth:
Btlbwest = (1 − p)c.
(2)
About every 10 seconds, BBR enters ProbeRTT to measure the
baseline RTT, draining any packets BBR has in the queue.
When there is no competing traffic, 1 BBR flow can success-
fully measure the baseline RTT l during ProbeRTT. When there is
competing traffic from loss-based CCAs, there will be p × q data
in the queue. Assuming a negligible baseline RTT (q ≫ cl) — as
bufferbloat increases, queuing delay becomes the dominant factor
in latency — we have:
RTTest =
.
(3)
pq
c
Plugging (2) and (3) into (1) and reducing gives:
inflightcap = 2(p − p2)q.
(4)
We know from the previous subsection that BBR will increase its
rate until it is limited by the in-flight cap. To compute this, we set
2 × (p − p2)q = (1 − p)q
p = 1
2
(5)
inflightcap equal to the amount of data BBR has in-flight and solve
for p:
We can now see that while 1 BBR flow increases its sending rate
during ProbeBW, once it intersects the in-flight cap it will not be
able to consume more than 50% of the available capacity.
Validation: This simple model for the in-flight cap in a deep-
buffered network says if the BDP cap is 2, then BBR should occupy
about half the queue after convergence. Similarly, if the BDP cap
is 4, then BBR should occupy at most 75% of the queue after con-
vergence. Fig. 5 shows BBR converging at each of these points in a
deep-buffered network with a 32 BDP queue.
Note: This simple model demonstrates why BBR retains the same
share of link capacity regardless of the number of competing Cubic
or Reno flows. ProbeBW is aggressive enough to force one or many
loss-based flows to back off; the bandwidth cap is set simply by the
queue occupancy of the competing loss-based flows – but not how
many loss-based flows there are. The calculations behind ProbeBW
and the in-flight cap lack any signal to infer number of competing
loss-based flows and adapt to achieve equal shares/fairness.
5.4 Extended Model: In-flight Cap
Our simple model assumes a buffer-bloated network and only one
BBR flow. In this section, we show how BBR’s in-flight cap changes
given the size of the queue (bloated or not) and with an increasing
number of BBR flows.
Multiple BBR Flows Alone: To understand multiple BBR flows
competing with loss-based flows, we first need to understand mul-
tiple BBR flows competing in the absence of other traffic. After
convergence, each BBR flow has a slightly overestimated Btlbwest
N × c + ϵ. The additional ϵ is – similar to our
near their fair share: 1
discussion in §5.2 – due to the aggression of ProbeBW. Here, BBR
flows compete against each other; BBR uses a max() operation to
compute BtlBwest over multiple samples of sending rates resulting
in, usually, a slight overestimate of its fair share. While we ignore
this ϵ in our modeling, its existence forces the aggregate of BBR
flows to send at a rate slightly higher than c, filling queues until
each flow reaches its bandwidth cap and becomes window-limited
and subsequently ACK-clocked.
However, the cap may also be elevated due to the presence of
multiple competing flows. During ProbeRTT, each flow will limit
inflight to 4 packets, so that they can drain all of their packets from
the queue and measure the baseline RTT. For N BBR flows, this
means in aggregate they will have 4N packets inflight. However, if
4N packets is greater than the BDP, the queue will not drain during
ProbeRTT so RTTest includes some queueing delay:
4N − cl
+ l)
RTTest = max(l,
(6)
Thus, the the in-flight cap when N BBR flows compete is depen-
dent on the BDP. Further, if the queue is smaller than 4N − cl when
4N > cl, then the BBR flows will consume the entire queue and
hence 100% link capacity.
c
Modeling BBR’s Interactions with
Loss-Based Congestion Control
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
If p were a negative number, this would mean BBR’s inflight cap
exceeded the total capacity (BDP + the queue size) and hence BBR’s
share of the link would be 100%.
In the next section, we complete our extended model by comput-
ing the amount of time BBR operates at its in-flight cap.
(a) RTTest .
(b) Inflightcap.
Figure 6: Comparisons between model and observation for RTTest
and in-flightcap at 40ms × 15Mbps and 64 BDP queue.
Figure 7: Probet ime model for 40ms × 10 Mbps link vs. measured
probe time for BBR flows competing with 1 Cubic flow in varying
queue sizes.
Validation: Fig. 6a shows the measured median RTT estimate
across a varying number of BBR flows versus (6). The estimate
increases linearly, similar to our prediction. Here, the BDP is only
75KB, so the queue will not completely drain during ProbeRTT
when there are 13 or more BBR flows. Fig. 6b shows how this
corresponds to the inflight cap. If the BDP were larger, the flows