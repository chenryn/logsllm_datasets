故事中将会提及许多EdomEngineering的工程师，虽然他们脾气古
怪，但是与他们共事却振奋人心，有时候还很快乐。我们一起经历
了许多艰难的时刻，我很珍惜那段共患难的日子。他们中的许多人
要是看了这篇文章，就能认出我描述的是哪件事情。如果我描述的
399
---
## Page 401
事件和他们的记忆有出入，希望大家可以谅解；我已经全力以赴去
展现20年前所发生的事实和人们的感受。
EdomEngineering在波士顿的另一条高科技高速公路（495号公路园
区，面朝名气更大的128号公路园区）拥有一栋低矮的仓库式建
筑。一楼生产设备，二楼就是工程师团队的办公室。公司虽然有等
级之分，但却是一个融洽且非常高效的团体。我们从零开始设计制
造包括主板和数据采集器在内的一系列硬件设备，再把这些设备和
专用操作系统软件、编译器和其他工具紧密地绑定在一起。
如今已经没有儿个团队还会谈论我们当时所谈论的内容了，我们的
编译器开发人员讨论的是寄存器分配法的程序错误，或如何给求平
方根的功能再增加一位的精度。EdomEngineering的工程师们都是一
群极具团队精神的聪明人，有相当比例的人拥有博士学位。
数字设备公司（DigitalEquipmentCorporation,DEC）为其VAX系列
产品设计的FORTRAN编译器是当时行业中处于统治地位的经典之
作。我们的编译器小组的任务就是重新实现它的所有功能。一名工
程师深受这一使命的鼓舞，研究出了DEC随机数生成器（当然了，
实际是一个伪随机的数字生成器）所使用的算法，并确保了我们的
机数字吗？”
她耸耸肩，答道：“我只是顺便分析了一下，认为我们的程序库能
够和它保持一致。”
喜欢炫耀一下、力争上游的热情以及创作中那种纯释的乐趣，这些
因素驱动着EdomEngineering的员工们去重组UNIX操作系统以及所
有其他软件模块，以期最大限度地发挥我们那备受推崇的硬件系统
的效力。当时UNIX系统主要有SystemV和BSDLinux两个版本，我
们的营销人员自夸说我们对两个系统上大量功能提供厂泛的支持，
是业界做得最好的。
受到DEC采用矩阵式管理的巨大影响，20世纪70年代期间，以跨学
科模式来组织项目的方式开始流行起来。每个团队的工程师都和项
目中的其他人密切合作，包括营销人员、技术支持人员以及技术编
400
---
## Page 402
辑。这些贡献者们参加所有的项目会议，每隔一小时就会相互了解
一下情况。
公司关注高质量的用户手册，尊重文档人员，这是吸引我加入公司
担任技术编辑的原因。我主要是和编译器团队合作，但也得到了为
不同项目工作的机会。
事实上，EdomEngineering公司的用户手册和公司内的其他产品一样
质量上乘，这在业界是有目共曙的。我们的设备驱动手册易于理
解，程序员们阅读后就可以编写出可用的驱动程序。我把第一年的
全部时间都用来为整个FORTRAN语言编写文档，这种事情看似多
余，其实很必要，因为我们在标准FORTRAN的基础上添加了大量
的VAX扩展以及我们自己的功能增强。
在那段时期，我们的管理风格也相当宽松、民主。即使到了人数超
过300人的时候，公司也依然保持着不拘一格的创业型文化。但是
这种并放式风格的根基却隐藏着一个结构性的缺陷：高层管理者和
投资人之间的关系比他们与员工之间的关系更加密切。不久前的一
次并购进一步拉远了投资人和基层工作者之间的距离。这种距离引
发了各种抱怨和不近人情的玩笑，它们在公司的底层蔓延。不过管
理者和投资人还算聪明，在涉及重要的工程决策时，他们都会倾听
这些杰出技术专家的意见。
在EdomEngineering的全盛时期，我们的工程师似乎无所不能。当线
程范式在编程中的重要地位确立之后，我们的编译器团队在短短几
个月后就为C编译器添加了标准的pthreads支持；在80年代末期公司
遇到了行业危机、图形组的项目陷入困境的时候，图形组很好地在
安全调用。
我现在要讲述的就是这次经济危机，还有管理层所采取的自我推毁
性反应措施。这个行业所经受的这场变化破坏性极强，却绝不少
见。不论在什么领域工作，本文的读者在职业生涯中都会经历儿次
类似的方法上的根本变。这场变化值得多花一些笔墨描述，好让大
家理解我们当时真是别无选择。
重新布线
401
---
## Page 403
我们所处的工程领域大致可以称为科学数据处理。在整个20世纪80
年代，这个领域的需求在不断增加，竞争在不断加强。硬件性能越
来越好，即使是普通的工作站也能更好地满足客户需求，无须Edom
Engineering再费尽心机挖掘最佳性能。与此同时，UNIX操作系统的
标准库和高级特性也已经相当成熟，即使是我们最好的程序员也无
法重新实现客户的所有需求。
由于不相干的外部因素，我们核心的科学和工程市场容量也在不断
姜缩：美国军方在20世纪80年代前减了研究方面的开支，而我们的
大多数客户就是靠这些钱过日子的。
20世纪80年代末期，EdomEngineering的管理者们决定实施一次跳跃
式发展，期待可以从此在高端计算领域占领一席之地。我们一直以
来都在摩托罗拉芯片上搭建我们的系统，而且效果不错。但那时
RISC（精简指令集）处理器的性能有可能好得多。我们的顶级硬件
工程师检验了那些处理器并选中了其中的一款，他们认为这款处理
器可以提供我们所需的性能。
促进RISC处理器发展的因素是那时Intel和Motorola的传统芯片中需
要使用越来越多的多层次决策系统，这种体系被当今的计算机科学
家称为CISC（复杂指令集），因为传统芯片庞大的指令集而得名，
其中一些指令只用于特殊的软件任务，适用范围很小。不同的指令
需要的周期数量不同，这导致硬件方面的芯片工程师和软件方面的
编译器开发人员必须实现复杂的调度才行。为了支撑所有这些组件
的重量，又需要更多的电路把处理器单元和存储器连接起来。
在20世纪80年代，计算机科学家认定吞噬处理器性能的正是CISC中
不断增长的系统开销，而解决方案就是设计制造新一代有竞争力的
芯片，提供极短的简单指令，其指令序列可以达到和固定周期极为
相似的功能。那些年里，有好几家公司的产品都成功进入了市场。
RISC成为业界新闻报道的主流，性能基准远远超出其发明者的预
期。
EdomEngineering的Longjump项目就是在这种背景下启动的。它从一
开始就充满了未知数。我们要在一个新产品之上搭建系统，支撑它
的是一个新的计算范式，此外我们依赖于一家不知底细的小公司。
我们在构建一个大胆创新的系统，硬件团队在把芯片组装到新系统
的过程中想方设法利用每一个能够提高速度的功能，与此同时，软
件团队也必须移植我们特有的、已经精心调制过的操作系统、编译
402
---
## Page 404
器和程序库。RISC的架构和我们熟悉的Motorola芯片差别非常大，
我们只能基于RISC供应商的架构去开发编译器和诸多系统功能。移
植工作就像是在未知海域航行一样，前途未下。
一名工程师被任命为Longiump项目主管，我们就叫他George吧。
George是一名相对年轻的项目主管，热心，精力充沛，他的个性在
工程师中很少见。他留着一排整齐的小胡子，开会时肩膀微耸地坐
在那里，四处张望却一言不发，要是听到什么他不想听到的消息就
会变得更加沉默。销售和工程开发的事情他都管。在那个时代，传
统电脑迷穿的衣服比现在的表服还要宽松一些，他却喜欢穿套装夹
克。很显然，他知道在和高层见面的时候一身职业化的打扮有助于
获得高层的信任。由于这是他第一次担任项目主管，他觉得需要让
自己显得值得信赖。
在介绍Longiump项目的公司会议上，George简短地发言，其中有一
段冠冕堂皇的套话：“我真诚地感谢公司管理层对我的信任，让我
可以负责这个项目。”
我看他一定想不到其他人对这段彬彬有礼的声明有何反响。大家都
清楚，Longiump是一个风险极大的任务，容不得一点疏忽或迟疑。
这种感谢管理层信任的行为，在大家心中种下了怀疑的种子，谁也
不知道他能否应对挑战。
话义说回来了，如果说George有什么负面影响，那世是他过于服从
上级主管，即使是项目让这些主管搞得停滞不前。
应对
在本章的开头说过，我的哲学是既要面向社区，又要面向过程。说
它面向社区的原因是，我认为每一次成功和失败都可以用来帮助改
进团队建设；说它面向过程的原因是，我认为每一个项目决策都应
该要考虑它对团队成员和项目资源有何影响。
在早些年境况不错的时候，有一次我们技术编写组开会（我敢肯定
和那些UNIX文档人员开过的许许多多会议都一样），为的是解决指
南页的重组问题，它们源于老的UNIX文档，杂乱无章，难以整理。
大概45分钟后，在对争议性问题仔细分析后，我们制定出一些规
则。我告诉大家：“我们这次谈话的重要性，远大于我们作出的决
定。”
403
---
## Page 405
我们对待时间的方式是非常奢侈的，一些小组觉得很震惊，不过我
确信它吸引住了技术编写组的经理Alan。他常常提到说要全身心地
投入到工作中，要把情感和个人价值观也包含进来。他曾经要求下
属阅读一本刚出版的管理书籍，那本书认为有愿景的企业才能基业
长青，而且这个愿景必须对客户、工作者或范围更大的社会作出一
些有价值的责献。
Alan任命我作Longjump文档组的组长。我和George一样，第一次担
任团队负责人。我决定尽力保护我的团队。工作流程和交付物是不
容商量的，但是我要努力让大家免受毫无意义的官僚作风之害。而
且我发过誓，要和所有文档人员分享信息，包括任何可以帮助他们
预见危机的信息。
关于后一点，我确实还是做了些事情的。作为文档组组长，我全程
参与了项目软件组的会议。我认真地记录，从中筛选出可能会波及
到同伴们的信息。我确保了所有的文档人员都像其他人一样及早了
解情况。
工程师抱怨最多的团队管理活动是定期会议。这些会议上常见的情
况是，大家崂崂叻叻地汇报自己这一周完成的任务，而后一无所获
地回到自己的座位。我为Longiump文档组制定了新规矩，每周我都
会贴一张空白的议程表，除非有人在议程表上添加了议题，否则我
们下周就不并会。
这项小小的创新表明了我在奋力争取效率和民主。文档组的成员都
很感谢我消除了那些没用的会议。当然，任何一位文档组成员都有
权召并会议，只要发布议题即可。
事实上，我是唯一一个在发布议题的人。我们并会的时候，我只汇
报那些大家感兴趣的事情，一般15分钟就结束了。我们没有使用任
何时髦的Scrum风格技巧，却自有妙计，让集体时间的价值最大
化。
编码
在组织行为的变更过程中，有几个工具在手总是不错的。举个简单
的例子，在共享目录里放上一个文件，这就是我发明的议程驱动会
议安排。虽说两个人同时编辑这个文件的可能性微乎其微，但是操
作系统和线程的概念已经牢牢映入我的脑海，我对竞态条件总是很
404
---
## Page 406
敏感的。于是，我把议程表的访问权限放到一个普通脚本里，脚本
使用了类似chmod的初级指令，在使用文件系统时提供简单的锁机
制。
之前提到过的指南页问题更加棘手。我们所有的语言工具都依赖于
供应商的新编译套件。为新系统重新编写自己的指南页所需的工作
量非常大，让人望而却步，于是不知从哪里传达下来了命令，要求