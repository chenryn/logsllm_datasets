### Connections Based on IPs and Authenticated Bindings

We are nearing the end of our discussion on RPC terminology and background. Let's delve into the final concepts.

#### Recap
So far, you should understand that you can create both implicit and explicit interfaces using a few Windows API calls to set up your RPC server. In the previous section, we discussed how, after registering your server, you can set registration flags and, if desired, a callback function to secure your server and filter client access. The final piece of the puzzle is an additional Windows API that allows the server and client to authenticate the binding. This is akin to "painting your cord for your can phone" to ensure only authenticated users can connect.

#### Why Authenticate Bindings?
Authenticated bindings, combined with the appropriate registration flag (e.g., `RPC_IF_ALLOW_SECURE_ONLY`), enable your RPC server to ensure that only authenticated users can connect. Additionally, if the client allows it, the server can impersonate the client to determine who connected to it.

Hereâ€™s a simple security callback example:

```c
// Naive security callback.
RPC_STATUS CALLBACK SecurityCallback(RPC_IF_HANDLE hInterface, void* pBindingHandle)
{
    return RPC_S_OK; // Always allow anyone.
}

RPC_STATUS rpcStatus = RpcServerRegisterIf2(
    Example1_v1_0_s_ifspec,         // Interface to register.
    NULL,                           // Use the MIDL generated entry-point vector.
    NULL,                           // Use the MIDL generated entry-point vector.
    RPC_IF_ALLOW_LOCAL_ONLY,        // Only allow local connections.
    RPC_C_LISTEN_MAX_CALLS_DEFAULT, // Use default number of concurrent calls.
    (unsigned)-1,                   // Infinite max size of incoming data blocks.
    SecurityCallback                // No security callback.
);
```

You can use the `SecurityCallback` to deny any anonymous client from connecting, but you would need to implement the filter mechanism based on attributes you control. For instance, you wouldn't be able to determine if the client is a valid domain user without access to account information.

#### Specifying Authenticated Bindings
You can authenticate bindings on both the server and client sides. On the server side, this ensures a secured connection, while on the client side, it may be necessary to connect to the server (as we'll see in the Access Matrix).

**Server-Side Authentication:**
```c
RPC_STATUS rpcStatus = RpcServerRegisterAuthInfo(
    pszSpn,             // Server principal name.
    RPC_C_AUTHN_WINNT,  // Using NTLM as the authentication service provider.
    NULL,               // Use default key function, which is ignored for NTLM SSP.
    NULL                // No arg for key function.
);
```

**Client-Side Authentication:**
```c
RPC_STATUS status = RpcBindingSetAuthInfoEx(
    hExplicitBinding,       // The client's binding handle.
    pszHostSPN,             // The server's service principal name (SPN).
    RPC_C_AUTHN_LEVEL_PKT,  // Authentication level PKT.
    RPC_C_AUTHN_WINNT,      // Using NTLM as the authentication service provider.
    NULL,                   // Use current thread credentials.
    RPC_C_AUTHZ_NAME,       // Authorization based on the provided SPN.
    &secQos                 // Quality of Service structure.
);
```

**Important Note:**
Setting an authenticated binding on the server side does not enforce authentication on the client side. If no flags are set on the server side or only `RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH` is set, unauthenticated clients can still connect. Setting `RPC_IF_ALLOW_SECURE_ONLY` prevents unauthenticated client bindings because the client cannot set an authentication level without creating an authenticated binding.

### Well-Known vs. Dynamic Endpoints
The last important aspect of RPC communication is the difference between well-known and dynamic endpoints.

**Well-Known Endpoints:**
- You know all the binding information (protocol sequence and endpoint address) upfront.
- Easiest way to build your first RPC client/server connection.
- Example: Using `ncacn_np` with a named pipe like `\pipe\FRPC-NP`.

**Dynamic Endpoints:**
- Useful when the endpoint-address space is limited, such as with TCP ports.
- The RPC Endpoint Mapper service assigns a free port dynamically.
- The client queries the RPC Endpoint Mapper to get the assigned port.

**Example Implementation:**

**Well-Known Endpoint:**
```c
RPC_STATUS rpcStatus;
// Create Binding Information
rpcStatus = RpcServerUseProtseqEp(
    (RPC_WSTR)L"ncacn_np",          // Using Named Pipes here.
    RPC_C_PROTSEQ_MAX_REQS_DEFAULT, // Ignored for Named Pipes.
    (RPC_WSTR)L"\\pipe\\FRPC-NP",   // Example Named Pipe name.
    NULL                            // No Security Descriptor.
);

// Register Interface
rpcStatus = RpcServerRegisterIf2(...); // As shown in the examples above.

// Listen for incoming client connections
rpcStatus = RpcServerListen(
    1,                              // Recommended minimum number of threads.
    RPC_C_LISTEN_MAX_CALLS_DEFAULT, // Recommended maximum number of threads.
    FALSE                           // Start listening now.
);
```

**Dynamic Endpoint:**
```c
RPC_STATUS rpcStatus;
RPC_BINDING_VECTOR* pbindingVector = 0;

// Create Binding Information
rpcStatus = RpcServerUseProtseq(
    (RPC_WSTR)L"ncacn_ip_tcp",      // Using TCP/IP here.
    RPC_C_PROTSEQ_MAX_REQS_DEFAULT, // Backlog queue length for the ncacn_ip_tcp protocol sequence.
    NULL                            // No Security Descriptor.
);

// Register Interface
rpcStatus = RpcServerRegisterIf2(...); // As shown in the examples above.

// Get Binding vectors (dynamically assigned)
rpcStatus = RpcServerInqBindings(&pbindingVector);

// Register with RPC Endpoint Mapper
rpcStatus = RpcEpRegister(
    Example1_v1_0_s_ifspec,             // Your interface as defined via IDL.
    pbindingVector,                     // Your dynamic binding vectors.
    0,                                  // We don't want to register the vectors with UUIDs.
    (RPC_WSTR)L"MyDyamicEndpointServer" // Annotation used for information purposes only, max 64 characters.
);

// Listen for incoming client connections
rpcStatus = RpcServerListen(
    1,                              // Recommended minimum number of threads.
    RPC_C_LISTEN_MAX_CALLS_DEFAULT, // Recommended maximum number of threads.
    FALSE                           // Start listening now.
);
```

### RPC Communication Flow
To summarize, the communication flow is as follows:
1. **Server Registration:** The server registers interfaces, e.g., using `RpcServerRegisterIf2`.
2. **Binding Information:** The server creates binding information using `RpcServerUseProtseq` and `RpcServerInqBindings` (optional for well-known endpoints).
3. **Endpoint Registration:** The server registers endpoints using `RpcEpRegister` (optional for well-known endpoints).
4. **Authentication:** The server can register authentication information using `RpcServerRegisterAuthInfo` (optional).
5. **Listening:** The server listens for client connections using `RpcServerListen`.
6. **Client Binding:** The client creates a binding handle using `RpcStringBindingCompose` and `RpcBindingFromStringBinding`.
7. **Endpoint Mapper Query:** The client's RPC runtime library finds the server process by querying the Endpoint Mapper on the server host system (only necessary for dynamic endpoints).
8. **Client Authentication:** The client can authenticate the binding handle using `RpcBindingSetAuthInfo` (optional).
9. **RPC Call:** The client makes an RPC call by calling one of the functions defined in the used interface.
10. **Marshaling:** The client's RPC runtime library marshals the arguments in an NDR format and sends them to the server.
11. **Unmarshaling:** The server's RPC runtime library gives the marshaled arguments to the stub, which unmarshals them and passes them to the server routines.
12. **Return Values:** When the server routines return, the stub picks up the `[out]` and `[in, out]` parameters (defined in the interface IDL file) and the return value, marshals them, and sends the marshaled data back to the client.

### Sample Implementation
The examples above are taken from my sample implementation, publicly available at:
[https://github.com/csandker/InterProcessCommunication-Samples/tree/master/RPC/CPP-RPC-Client-Server](https://github.com/csandker/InterProcessCommunication-Samples/tree/master/RPC/CPP-RPC-Client-Server)

### Access Matrix
The access matrix visualizes which client can connect to which server. Note that you can only connect implicit clients to implicit servers and explicit clients to explicit servers. Otherwise, you get an Error 1717 (RPC_S_UNKNOWN_IF).

### Attack Surface
Finally, let's discuss the potential attack surface of RPC. There could be bugs and 0-days anywhere in the RPC communication chain, which require a case-by-case analysis to understand their exploit potential. Additionally, there are some general design concepts that can be exploited, such as the use of insecure protocols or misconfigured authentication.

### Finding Interesting Targets
To find suitable targets, you need to identify RPC servers and clients on your systems. The easiest way to find RPC servers on your local system is by looking for programs that import RPC Windows APIs. One easy method is to use the DumpBin utility that ships with Visual Studio.

**Sample PowerShell Snippet:**
```powershell
Get-ChildItem -Path "C:\Windows\System32\" -Filter "*.exe" -Recurse -ErrorAction SilentlyContinue | % { $out=$(C:\"Program Files (x86)"\"Microsoft Visual Studio"\...\DumpBin.exe /IMPORTS $_.FullName) ; Write-Output $out >> EXEs_RpcServerListen.txt }
```

This snippet prints the names of the executables to the console and the entire DumpBin output to the file `EXEs_RpcServerListen.txt` for review.

By following these steps, you can better understand and manage your RPC-based applications and their potential vulnerabilities.