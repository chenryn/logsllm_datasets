commands to the device.
Almost every USB mass storage device performs its operations
using only bulk transfers. However, we use control transfers for
sending trusted commands to Kells. Control transfers reserve a por-
tion of USB bus bandwidth, ensuring that information is tranferred
as quickly as possible.
If a Kells device is plugged into a host
that does not support attestation operations, the host will access the
public partition as a standard mass storage device, oblivious to the
trusted protocols and storage. If the host recognizes the device as
trusted, it will send an Accept Device-Speciﬁc Command (ADSC).
The setup phase of the command allows the host to initiate the at-
testation protocol, while the attestation information is sent through
the data stage, and the gadget sets a response code that includes
a challenge. Further stages of the attestation protocol continue as
control transfers between the host and device, and all other read and
write operations are suspended until the protocol completes. The
attestation protocol is described in detail in Section 4.1.
3.2 Designing the Storage Device
Kells requires the ability to perform policy decisions indepen-
dent of the host. As a result, logic must execute on these devices,
which require a means of receiving command transfers from the
host and to use these for making the correct access decisions.
The basic architecture for the storage device is an extension to
the Linux USB gadget stack, along with a user-space daemon that
is in charge of policy decisions and accessing other important infor-
mation. Within the kernel, we added new functionality that allows
the device to receive special control transfers from the host. These
are exported to user space through the sysfs interface, where they
are read as strings by the daemon tasked with marshaling this data.
When plugged in, the daemon on the device sets a timer (as USB
devices contain a crystal oscillator for driving clock signals), and
waits to determine whether the host presents the proper creden-
tials. The device presents itself to the host as a typical mass storage
device operating in bulk-only mode, differentiating itself with the
vendor ID. We use the vendor ID b000 which has not been cur-
rently allocated by the USB Forum as of June 2010.2
If an ADSC command containing authenticating information from
the host is not received within this time period, operation on the de-
vice defaults to public operation. If the device is conﬁgured such
that the policy does not allow any partitions to be mounted, the
device will not present any further information to the host. If the
protocol fails, the failure is logged in the storage device’s audit log,
which is unexposed to the host. Depending on the deﬁned policy,
either the public partition will be exposed or no partitions on the
device will be mounted at all. If the protocol is successful and the
host attests its state to the device, the daemon presents the trusted
partition to be mounted, by performing an insmod() command
to link the correct backing store with the gadget driver.
Within the Kells device is a policy store, which contains infor-
mation on every known host, its measurement database to compare
attestations against, and policy details, such as whether the host
is authenticated as an administrative console and whether the host
2Because this is a proof of concept design and implementation, we
have not registered a vendor ID with the USB Forum yet; however,
based on our results, we may consider doing so.
should expose a public partition if the attestation check fails. Op-
tionally, the device can also store information on users credentials
supplied directly to the device through methods such as biometrics.
Conﬁgured policy can allow or disallow the device to be plugged
into speciﬁc machines.
3.3 Modiﬁcations to Host
A host must be capable of recognizing that the Kells device is
trusted and sending information to it differs from a standard USB
mass storage transaction. Our goal was to require minimal changes
to the host for operation, but because we are working at the USB
layer, some changes are necessary to the USB driver. We deﬁne a
ﬂag IS_TRUSTED in the Linux unusual_devs.h device repository,
letting the host know that the device accepts control transfers.
Because the host must interact with its trusted hardware and per-
form some logic, we designed an attestation daemon that runs in
the host’s user space. The attestation daemon both retrieves boot-
time attestations using the Linux Integrity Measurement Architec-
ture (IMA) [23] and can act as an interface to any runtime moni-
toring systems on the host (see Section 4.2). It can also provide an
interface for receiving third-party updates (see Section 4.3).
4. ATTESTATIONS AND ADMINISTRATION
A key consideration with Kells is managing metadata and cre-
dential information in a manner that maintains usability and sim-
plicity of the device. We describe in this section details of how this
management occurs.
4.1 Attesting Host Integrity
In order for a host connecting to the Kells device to be trustwor-
thy, it must be installed and maintained in a manner that protects
its integrity. A way of ensuring this is through the provisioning of
a secure kernel and supporting operating system, from which mea-
surements of system integrity can be made and transferred to the
Kells device. The maintainer of the host system is thus required
to re-measure the system when it is installed or when measurable
components are updated. Solutions for ensuring a trusted base in-
stallation include the use of a root of trust installer (ROTI) [33],
which establishes a system whose integrity can be traced back to
the installation media.
The system performing the installation must contain trusted hard-
ware such as a TPM. Every TPM contains an endorsement key
(EK), a 2048-bit RSA public/private key pair created when the chip
is manufactured. This provides us with a basis for establishing the
TPM’s unique identity, essential to verifying the installation. The
stages of this initial installation are as follows:
1. The installation media is loaded into the installer system,
which contains a TPM. This system needs to be trusted, i.e.,
the hardware and system BIOS cannot be subverted at this
time.3 As described below, the system’s core root of trust for
measurement (CRTM), containing the boot block code for
the BIOS, provides a self-measurement attesting this state.
2. A measurement of each stage of the boot process is taken.
Files critical to the boot process are hashed, and the list of
hashes kept in a ﬁle that is sealed (i.e., encrypted) by the
TPM of the installing system. This process links the in-
stalling TPM with the installed code and the ﬁlesystem. A
Kells device in measurement mode can record the measure-
ments from the system, or this can be performed in another
3This restriction is not necessary after installation, as malicious
changes to the system state will be measured by the CRTM.
234manner and transferred to the device at a later time, through
placement of the list of hashes in a secure repository.
We ﬁrst identify the host’s TPM. While the EK is unique to the
TPM, there are privacy concerns with exposing it. Instead, an at-
testation identity key (AIK) public/private key pair is generated as
an alias for the EK, and strictly used for signatures. However, the
AIK is stored in volatile memory. Therefore, both the public and
private AIKs must be stored. The TPM provides the storage root
key (SRK) pair for encrypting keys stored outside the TPM. Thus,
the SRK encrypts the private AIK before it is sent to the device.
Formally, the set of operations occurs as follows. Given a host’s
TPM H and a device D, the following protocol ﬂow describes the
initial pairing of the host to the device and the initial boot:
Pairing
(1) H : generate AIK = (AIK +, AIK
−}SRK−
(2) H → D : AIK +,{AIK
−
)
Measurement
(3) D → H : {AIK
−}SRK−
(4) D : n = Generate nonce
(5) D → H : Challenge(n)
(6) H → D : Attestation = Quote + M L
(7) D : V alidate(Quote, M L)AIK+
Steps 1 and 2 occur when the host has been initially conﬁgured or
directly after an upgrade operation, to either the hardware or to ﬁles
that are measured by the IMA process. Subsequent attestations use
this list of measurements, which may also be disseminated back
to the administrator and stored with the AIK information so as to
allow for remote updates, discussed further in Section 4.3.
The following states are measured in order: (a) the core root of
trust for measurement (CRTM), (b) the system BIOS, (c) the boot-
loader (e.g., GRUB) and its conﬁguration, and (d) the OS. Mea-
surements are made by with the TPM’s extend operation, which
hashes code and/or data, concatenates the result with the previous
operation, and stores the result in the TPM’s Platform Conﬁgura-
tion Registers (PCRs). The quote operation takes the challenger’s
nonce n and returns a signature of the form Sign(P CR, N )AIK−,
when the PCRs and n are signed by the private AIK. The measure-
ment list (M L), which contains a log of all measurements sent to
the TPM, is also included.
The above protocol describes a static root of trust for measure-
ment, or SRTM. There are some disadvantages to this approach,
since the BIOS must be measured and any changes in hardware
require a new measurement; additionally, it may be susceptible to
the TPM reset attack proposed by Kauer [13]. Another approach is
to use a dynamic root of trust for measurement (DRTM), which al-
lows for a late launch, or initialization from a secure loader after the
BIOS has loaded, so that it does not become part of the measure-
ment. SRTM may be vulnerable to code modiﬁcation if DRTM is
supported on the same device [6]. DRTM may also be potentially
vulnerable to attack; the Intel TXT extensions supporting DRTM
may be susceptible to System Management Mode on the processor
being compromised before late launch is executed, such that it be-
comes part of the trusted boot and is not again measured [39]. For
this reason, it is an administrative decision as to which measure-
ment mode the system administrator should use for their system,
but we can support either approach with Kells.
Note that we are directly connecting with the host through the
physical USB interface. The cuckoo attack described by Parno [20]
may be mitigated by turning off network connectivity during the
boot-time attestation process, such that no remote TPMs can an-
swer in place of the host. However, if the host can access an oracle
that presents TPM-like answers, a means to uniquely identify the
host is necessary. We are actively investigating these methods.
4.2 Managing Runtime Integrity Attestations
1: (att, t) ← read.RAM.att
2: if |req.time − t| < ∆t ∧ GoodAtt(att) then
3:
4: else
5:
6:
if W riteBuf f er.notF ull() then
Perform the write req as usual.
Buffer the request for later write back once a fresh attestation
is received.
else
7:
8:
9:
10: end if
end if
Stall until there is space in the write buffer.
Figure 5: Write(req) algorithm.
1: (att, t) ← read.RAM.att
2: if GoodAtt(att) then
3:
4:
5:
6: end if
end for
for Requests buffered before t do
Perform the write req as usual.
Figure 6: Commit() algorithm.
1: (att, t) ← read.RAM.att
2: if |req.time − t| < ∆t ∧ GoodAtt(att) then
3:
4: else
5:
6: end if
Stall until a fresh attestation is received.
Perform the read req as usual.
Figure 7: Read(req) algorithm.
To perform authentication of the host, the Kells device must
compare received attestations with a known set of good values. A
portion of non-volatile memory is used for recording this informa-
tion, which includes a unique identity for the host (e.g., the public
AIK) the host’s measurement list, and policy-speciﬁc information,
(e.g., should the host allow administrative access).
We provide a framework for supporting runtime integrity mon-
itoring, but we do not impose constraints on what system is to be
used. The runtime monitor can provide information to the storage
device as to the state of the system, with responses that represent
good and bad system states listed as part of the host policy. Our
design considers attestations from a runtime monitor to be deliv-
ered in a consistent, periodic manner; one may think of them as
representing a security heartbeat. The period of the heartbeat is
ﬁxed by the device and transmitted to the host as part of the device
enumeration process, when other parameters are conﬁgured.
Because the device cannot initiate queries to the host, it is incum-
bent on the host to issue a new attestation before the validity period
expires for the existing one. The Kells device can issue a warning
to the host a short time period λ before the attestation period ∆t
expires, in case the host neglects to send the new attestation.
Algorithms 5 and 6 describe the write behavior on the device.
We have implemented a buffer for writes that we term a quarantine
buffer, to preserve the integrity of data on the Kells device. Writes
are not directly written to the device’s storage but are stored in the
235buffer until an attestation arrives from the host to demonstrate that
the host is in a good state. Once a successful attestation arrives,
the buffer is cleared, but if a failed attestation arrives and access to
the trusted partition is revoked, any information in the write buffer
at that time will be discarded. In a similar manner, Algorithm 7
describes the semantics of the read operation. Reads occur as nor-
mal unless an attestation has not been received within time ∆t. If
this occurs, then further read requests will be prevented until a new
successful attestation has been received.
To prevent replay, the host must ﬁrst explicitly notify Kells that
the attestation process is beginning in order to receive a nonce,
which is used to attest to the freshness of the resulting runtime at-
testation (i.e., as a MAC tied to the received message).
4.3 Remote Administration
An additional program running on the host (and measured by
the Kells device) allows for the device to remotely update its list
of measured hosts. This program starts an SSL session between
the running host and a remote server in order to receive new policy
information, such as updated measurements and potential host re-
vocations. The content is encrypted by the device’s public key, the
keypair of which is generated when the device is initialized by the
administrator, and signed by the remote server’s private key.
Recent solutions have shown that in addition to securing the
transport, the integrity state of the remote server delivering the con-
tent can be attested [19]. It is thus possible for the device to request
the attestation proof from the remote administrator prior to apply-
ing the received policy updates.
In order for the device to receive these updates, the device ex-
poses a special administrative partition if an update is available,
signaled to do so by the attestation daemon. The user can then
move the downloaded update ﬁle into the partition, and the device
will read and parse the ﬁle, appending or replacing records within
the policy store as appropriate. Such operations include the addi-
tion of new hosts or revocation of existing ones, and updates of
metadata such as measurement lists that have changed on account
of host upgrades. This partition contains only one other ﬁle: the au-
dit failure log is encrypted with the remote server’s public key and
signed by the device, and the user can then use the updater program
to send this ﬁle to the remote server. The server processes these re-
sults, which can be used to determine whether deployed hosts have
been compromised.
5. REASONING ABOUT ATTESTATIONS
We now prove that the Kells design achieves its goal of protect-