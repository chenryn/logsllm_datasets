### Round AKE Protocol and ART Requirements

The round AKE (Authenticated Key Exchange) protocol does not have specific requirements on its structure. In the context of ART (Asynchronous Ratcheting Tree), we will outline the key components and processes involved in creating and updating an ART tree.

#### ART Tree Creation and Updates

1. **Alice Creates an ART Group:**
   - Alice initiates the creation of an ART group with three other members.
   - She updates her key by choosing a new leaf key \(\lambda_A^2\) and computing the updated nodes:
     \[
     g^{\lambda_A^2 \lambda_B^1} = \left(g^{\lambda_B^1}\right)^{\lambda_A^2}
     \]
     \[
     \iota\left(g^{\lambda_A^2 \lambda_B^1}\right) ; g^{\iota\left(g^{\lambda_A^2 \lambda_B^1}\right)} \iota\left(g^{\lambda_C^1 \lambda_D^1}\right)
     \]
     \[
     \iota\left(g^{\lambda_A^2 \lambda_B^1}\right) ; g^{\iota\left(g^{\lambda_A^2 \lambda_B^1}\right)}
     \]
     \[
     \iota\left(g^{\lambda_C^1 \lambda_D^1}\right) ; g^{\iota\left(g^{\lambda_C^1 \lambda_D^1}\right)}
     \]
     \[
     g^{\iota\left(g^{\lambda_A^2 \lambda_B^1}\right) \iota\left(g^{\lambda_C^1 \lambda_D^1}\right)}
     \]
   - Alice then broadcasts the updated public keys to the group.

2. **Charlie Updates Their Key:**
   - Charlie follows a similar process by choosing a new leaf key \(\lambda_C^2\) and computing the updated nodes:
     \[
     g^{\lambda_A^2 \lambda_B^1} = \left(g^{\lambda_B^1}\right)^{\lambda_A^2}
     \]
     \[
     \iota\left(g^{\lambda_A^2 \lambda_B^1}\right) ; g^{\iota\left(g^{\lambda_A^2 \lambda_B^1}\right)} \iota\left(g^{\lambda_C^2 \lambda_D^1}\right)
     \]
     \[
     \iota\left(g^{\lambda_A^2 \lambda_B^1}\right) ; g^{\iota\left(g^{\lambda_A^2 \lambda_B^1}\right)}
     \]
     \[
     \iota\left(g^{\lambda_C^2 \lambda_D^1}\right) ; g^{\iota\left(g^{\lambda_C^2 \lambda_D^1}\right)}
     \]
     \[
     g^{\iota\left(g^{\lambda_A^2 \lambda_B^1}\right) \iota\left(g^{\lambda_C^2 \lambda_D^1}\right)}
     \]
   - Charlie broadcasts the updated public keys to the group.

**Figure 3: Example ART Tree Creation and Updates**

- Secret keys and corresponding public keys are written at each node except the root, separated by \(\parallel\).
- Leaf keys are denoted as \(\lambda_u^i\), where \(u\) is the identity and \(i\) is a counter.
- \(\iota(Â·)\) denotes a mapping from group elements to integers.
- From any secret leaf key and the set of public keys on its copath, an agent can compute the tree key by repeated exponentiation.

#### Shared Group Key Derivation

- The shared group key is derived using:
  \[
  \iota\left(g^{k_A k_B}\right) ; g^{\iota\left(g^{k_A k_B}\right)}
  \]
  \[
  \iota(k_A) ; g^{\iota(k_A)}
  \]
  \[
  \iota(k_B) ; g^{\iota(k_B)}
  \]
  \[
  \iota(k_C) ; g^{\iota(k_C)}
  \]
  \[
  \iota(k_D) ; g^{\iota(k_D)}
  \]

**Insight:**
- The initiator should not directly use received public keys at the leaf nodes, as they cannot derive their parents' public keys.
- Instead, we propose a design where both the initiator and each group member can asynchronously derive the secret key assigned to that leaf node, but no other actor (group member or adversary) can derive that secret key.

**Leaf Secrets Derivation:**
- Leaf secrets can be derived using session keys from any strong one-round AKE protocol, denoted as `KeyExchange`.
- `KeyExchange` takes two private keys \(ek\) and \(ik\) and two public keys \(EK\) and \(IK\) and returns a bitstring with the property:
  \[
  \text{KeyExchange}(ik_I, IK_R, ek_I, EK_R) = \text{KeyExchange}(ik_R, IK_I, ek_R, EK_I)
  \]

**Prekeys and Setup Keys:**
- Prekeys, introduced by Marlinspike for asynchronicity in the TextSecure messaging app, are DH ephemeral public keys cached by an untrusted intermediate server and fetched on demand by messaging clients.
- We introduce a one-time DH setup key, generated locally by the creator of a group and used only during the creation of that session. This key is used to perform an initial key exchange with the prekeys, allowing the initiator to generate secret leaf keys for the other group members while they are offline.

**Asynchronous Tree Construction:**
- Suppose Alice wishes to create a group of size \(n\) containing herself and \(n-1\) peers.
- She generates a DH key \(suk\) (setup key) and requests the public identity key \(IK\) and an ephemeral prekey \(EK\) for each peer.
- Using her secret identity key \(ik_a\) and the setup key \(suk\) together with the received public keys, she executes a one-round key exchange protocol to derive leaf keys \(\lambda_1, \ldots, \lambda_{n-1}\).
- Using these generated leaf keys and a fresh leaf key \(\lambda_0\), she builds a DH tree whose root becomes the initial group key.

**Group Creation Broadcast:**
- Alice broadcasts:
  1. The public prekeys \(EK_i\) and identities \(IK_i\) she used.
  2. The public setup key \(SUK\).
  3. The tree \(T\) of public keys.
  4. A signature of (1), (2), and (3) under her identity key.

**Group Member Verification:**
- Each group member verifies the signature and reproduces the computation of the tree key.
- They compute their leaf key \(\lambda_i = \text{KeyExchange}(ik_i, IK_A, ek_i, SUK)\).
- They extract their copath of public keys from the tree and iteratively exponentiate with the public keys on the copath to reach the final key, which is the shared secret at the root of the tree.

**Pseudocode Definitions:**
- Pseudocode definitions of these algorithms are provided in Figure 8, Algorithms 1, 2, and 3.

### ART Updates

To achieve PCS (Post-Compromise Security), we must update stage keys in a way that depends on state from previous stages and newly exchanged messages.

**Key Update Process:**
- If Alice changes her leaf key from \(\lambda_b\) to \(\lambda_b'\), she computes the new public keys at all nodes along the path from her leaf to the tree root and broadcasts her public leaf key together with these public keys.
- She authenticates this message with a MAC under a key derived from the previous stage key.
- A group member who receives such a message can update their stored copath and compute the key induced by the new path to get the updated group key.

**Stage Key Chaining:**
- To achieve PCS, each stage key must depend on both the recent message exchange and previous stages.
- The resulting stage keys form a hash chain, as depicted in Figure 4.

**Pseudocode Definitions:**
- Pseudocode definitions of these algorithms are provided in Figure 8, Algorithms 4 and 5.

### Algorithms

We provide pseudocode algorithms for all operations in our design in Figure 8 on page 29. For example, consider the situation where Alice wishes to create a group with five other agents using Algorithm 1. She begins by generating a setup keypair with secret key \(suk\) and a leaf keypair with secret key \(\lambda_0\) for herself. She retrieves the public identity and ephemeral prekeys of each peer and creates the tree as shown in Figure 5.

**Figure 4: Derivation of Stage Keys**

- When a new tree key \(\pi.tk\) is computed (as the root of a DH tree), it is combined with the current stage key to derive a new stage key \(\pi.sk'\), and so on. This "chaining" of keys is an important ingredient for achieving PCS.

**Figure 5: Example Tree Structure**

- The tree structure includes the following nodes and keys:
  - \(g^{\lambda_0 \lambda_1}\)
  - \(g^{\lambda_2 \lambda_3}\)
  - \(\lambda_4 = EK_{suk}^4\)
  - \(\lambda_5 = EK_{suk}^5\)
  - \(\lambda_0\)
  - \(\lambda_1 = EK_{suk}^1\)
  - \(\lambda_2 = EK_{suk}^2\)
  - \(\lambda_3 = EK_{suk}^3\)

This structured and detailed approach ensures clarity and coherence in the explanation of the ART protocol and its implementation.