### Introduction and Background

Franklin et al. [13] identified several cases where Golle’s protocol for private stable matching would not function correctly. To address these issues, they developed two new protocols using a similar approach. The first protocol was based on an XOR secret sharing scheme and utilized private information retrieval to process bids. This protocol required running an encryption mixnet on \(O(n)\) ciphertexts for each of the \(n^2\) rounds, resulting in a total of \(O(n^4)\) public key operations and \(\tilde{O}(n^2)\) communication rounds.

Their second protocol, which did not build on Golle’s, instead used garbled circuits in combination with the Naor-Nissim protocol for secure function evaluation [39]. This resulted in a two-party protocol with \(O(n^4)\) computational complexity and \(\tilde{O}(n^2)\) communication rounds. Similar to Golle’s protocol, this approach was impractical and has never been implemented.

### Teruya and Sakuma's Protocol

Teruya and Sakuma [52] presented a secure stable matching protocol that built on Golle’s protocol but simplified the bidding process using additive homomorphic encryption. This reduced the number of communication rounds to \(O(n^2)\), making the protocol practical enough to implement. They implemented their protocol as a client-server system, using mobile devices on a LAN. Their largest benchmark, for \(n = 4\), took over 8 minutes to complete.

### Terner's Implementation

Terner [51] built garbled-circuit implementations of variants of the Gale-Shapley algorithm, reporting execution times of over 12 hours for experiments with 100 × 100 participants.

### Keller and Scholl's Approach

Keller and Scholl [27] were the first to consider using RAM-based secure computation to implement stable matching. They designed a secure version of Gale-Shapley using an ORAM and implemented their protocol using Path ORAM [50] and the SPDZ MPC protocol [10]. They reported an experiment that matched 128 × 128 participants in roughly 2.5 hours, but it also required an estimated 1000 processor-days of offline compute time, which was not included in the reported results. In all cases, the algorithm and secure computation techniques together limited the applicability of the entire scheme to toy instances.

### Zahur et al.'s Results

The best previous results for implementing secure stable matching are those of Zahur et al. [63], which we use as a baseline comparison in Section 5.1. They implemented a textbook version of Gale-Shapley and reported completing a match involving 512 × 512 participants in just over 33 hours (over 40 times longer than our approach for the same benchmark running on an identical testbed).

### Blanton et al.'s Observations

Blanton et al. [6] observed read-once data access patterns in the structure of Breadth-First Search and proposed a \(\Theta(V^2)\) secure version based on permuting the rows and columns of an adjacency matrix. Although their observation is similar to ours, the underlying differences between Gale-Shapley and BFS preclude adapting their solution. Specifically, BFS allows the algorithm to iterate over an entire column at once, whereas both Gale-Shapley and Roth-Peranson must shift between proposers as they become matched and unmatched, necessitating a more complex construction.

### Conclusion

Our results confirm that with appropriately adapted algorithms and data structures, it is now possible to execute complex algorithms with data-dependent memory accesses as scalable secure two-party computations. The NRMP matching pool is one of the largest of its type in the world. Similar or identical algorithms are used for many other problems, including matching residents to residency programs in other countries [9], placing applicants for pharmacy, optometry, psychology, dentistry, and other residencies [40], matching rushees to sororities [37], and assigning students to public schools in Boston and New York City [54]. Most of these applications are significantly smaller than the scale demonstrated by our simulated NRMP match, and we judge the cost of executing an NRMP-scale match as an MPC to be well within reasonable bounds for such use cases. We are optimistic that private stable matching protocols can be applied to important matching processes in practice.

### Availability

All of our code is available under the BSD 2-Clause Open Source license from https://www.oblivc.org/matching.

### Acknowledgments

The authors thank Samee Zahur for insightful conversations about this work and assistance with Obliv-C and ORAM, and Elaine Shi for constructive comments and advice. This work was partially supported by grants from the National Science Foundation SaTC program (NSF Award CNS-1111781 and TWC-1664445), the Air Force Office of Scientific Research, and Google.

### References

[References are listed as provided, with no changes needed.]