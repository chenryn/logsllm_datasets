title:A measurement-based study of MultiPath TCP performance over wireless
networks
author:Yung-Chih Chen and
Yeon-sup Lim and
Richard J. Gibbens and
Erich M. Nahum and
Ramin Khalili and
Don Towsley
A Measurement-based Study of MultiPath TCP
Performance over Wireless Networks
Yung-Chih Chen
Yeon-sup Lim
School of Computer Science
University of Massachusetts
School of Computer Science
University of Massachusetts
Amherst, MA USA
PI:EMAIL
Amherst, MA USA
PI:EMAIL
Richard J. Gibbens
Computer Laboratory
University of Cambridge
Cambridge, UK
PI:EMAIL
Erich M. Nahum
IBM Thomas J. Watson
Research Center
Yorktown Heights, NY USA
PI:EMAIL
Ramin Khalili
T-Labs, Deutsche Telekom
Berlin, Germany
ramin@net.t-labs.tu-
berlin.de
Don Towsley
School of Computer Science
University of Massachusetts
Amherst, MA USA
PI:EMAIL
ABSTRACT
With the popularity of mobile devices and the pervasive use
of cellular technology, there is widespread interest in hybrid
networks and on how to achieve robustness and good per-
formance from them. As most smart phones and mobile de-
vices are equipped with dual interfaces (WiFi and 3G/4G),
a promising approach is through the use of multi-path TCP,
which leverages path diversity to improve performance and
provide robust data transfers. In this paper we explore the
performance of multi-path TCP in the wild, focusing on sim-
ple 2-path multi-path TCP scenarios. We seek to answer the
following questions: How much can a user beneﬁt from using
multi-path TCP over cellular and WiFi relative to using the
either interface alone? What is the impact of ﬂow size on
average latency? What is the eﬀect of the rate/route con-
trol algorithm on performance? We are especially interested
in understanding how application level performance is af-
fected when path characteristics (e.g., round trip times and
loss rates) are diverse. We address these questions by con-
ducting measurements using one commercial Internet service
provider and three major cellular carriers in the US.
Categories and Subject Descriptors
C.2 [Computer-communication Networks]: Network Pro-
tocols; C.2.1 [Network Architecture and Design]: Wire-
less communication; C.4 [Performance of System]: Mea-
surement techniques, Performance attributes
General Terms
Experimentation; Measurement; Performance
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
IMC’13, October 23–25, 2013, Barcelona, Spain.
Copyright 2013 ACM 978-1-4503-1953-9/13/10 ...$15.00.
http://dx.doi.org/10.1145/2504730.2504751.
Keywords
Multi-Path TCP; MPTCP; Congestion Control; Measure-
ments; Wireless; Cellular Networks; 4G; LTE; 3G; CDMA
1.
INTRODUCTION
Many users with mobile devices can access the Internet
through both WiFi and cellular networks. Typically, these
users only utilize one technology at a time: WiFi when it is
available, and cellular otherwise. Research has also focused
on the development of mechanisms that switch between cel-
lular and WiFi as the quality of the latter improves and
degrades. This results in a quality of service that is quite
variable over time. As data downloads (e.g., Web objects,
video streaming, etc.) are dominant in the mobile environ-
ment, this can result in highly variable download latencies.
In this paper we explore the use of a promising recent
development, multi-path rate/route control, as a mecha-
nism for providing robustness by reducing the variability in
download latencies. Multi-path rate/route control was ﬁrst
suggested by Kelly [17]. Key et al. [18] showed how multi-
path rate/route control provides load balancing in networks.
Han et al. [10] and Kelly & Voice [16] developed theoreti-
cally grounded controllers that have since been adapted into
Multipath TCP (MPTCP) [8], which is currently being stan-
dardized by the IETF.
Numerous studies, both theoretical and experimental, have
focused on the beneﬁts that MPTCP bring to long-lived
ﬂows. These studies have resulted in a number of changes
in the controller [14,19,32], all in an attempt to provide bet-
ter fairness and better throughput in the presence of fairness
constraints. However, to date, these studies have ignored the
eﬀect of multi-path on ﬁnite duration ﬂows. It is well known
that most Web downloads are of objects no more than one
MB in size, although the tail of the size distribution is large.
Moreover, online video streaming to mobile devices is grow-
ing in popularity and, although it is typically thought of
as a download of a single large object, usually consists of a
sequence of smaller data downloads (500 KB - 4 MB) [27].
Thus it important to understand how the use of MPTCP
might beneﬁt such applications.
In this paper we evaluate how MPTCP performs in the
wild with a common wireless environment, namely using
455both WiFi and cellular simultaneously. We conduct a range
of experiments varying over time, space, and download size.
We utilize three diﬀerent cellular providers (two 4G LTEs,
one 3G CMDA) and one WiFi provider, covering a broad
range of network characteristics in terms of bandwidth, packet
loss, and round-trip time. To assess how eﬀectively MPTCP
behaves, we report not only multi-path results, but also
single-path results using the WiFi and cellular networks in
isolation. We report standard networking metrics (download
time, RTT, loss) as well as MPTCP speciﬁc ones (e.g., share
of traﬃc sent over one path, packet reordering delay). We
also examine several potential optimizations to multi-path,
such as simultaneous SYNs, diﬀerent congestion controllers,
and using larger numbers of paths.
This paper makes the following contributions:
• We ﬁnd that MPTCP is robust in achieving perfor-
mance at least close to the best single-path perfor-
mance, across a wide range of network environments.
For large transfers, performance is better than the best
single path, except in cases with poor cellular net-
works.
• Download size is a key factor in how MPTCP performs,
since it determines whether a subﬂow can get out of
slow start.
It also aﬀects how quickly MPTCP can
establish and utilize a second path. For short trans-
fers (i.e., less than 64 KB), performance is determined
by the round-trip time (RTT) of the best path, typi-
cally WiFi in our environment. In these cases, ﬂows
never leave slow start and are limited by the RTT.
For larger transfers, in the case of LTE, as download
size increases, MPTCP achieves signiﬁcantly improved
download times by leveraging both paths simultane-
ously, despite varying path characteristics.
• Round trip times over the cellular networks can be
very large and exhibit large variability, which causes
signiﬁcant additional delay due to reordering out-of-
order segments from diﬀerent paths. This is particu-
larly pronounced on the 3G network we tested. This
impacts how well MPTCP can support multimedia ap-
plications such as video.
• Using multiple ﬂows improves performance across down-
load sizes. For small transfers, this is because more
ﬂows allow more opportunity to exploit slow start.
For large transfers, this is due to utilizing the avail-
able network bandwidth in a more eﬃcient way. Con-
necting multiple ﬂows simultaneously, rather than se-
rially, only improves performance for small transfers,
which are most sensitive to RTT. Diﬀerent congestion
controllers do not appear to have a signiﬁcant impact
on performance for small ﬁle transfers. For larger ﬁle
transfers, we observe that the default congestion con-
troller of MPTCP (coupled [24]) does not perform as
well as its alternative, olia [19].
The remainder of this paper is organized as follows: Sec-
tion 2 provides some background on Cellular networks and
MPTCP. We describe our experimental methodology in Sec-
tion 3. Section 4 presents an overview of our results, and
Section 5 looks at latency in detail. We discuss our some im-
plications in Section 6, discuss about related work in Section
7, and conclude in Section 8.
2. BACKGROUND
This section provides background and basic characteristics
of cellular data and WiFi networks, and MPTCP control
mechanisms needed for the rest of the paper.
2.1 Cellular data and WiFi networks
With the emerging population of smart phones and mo-
bile devices, to cope with the tremendous traﬃc growth,
cellular operators have been upgrading their access technolo-
gies from the third generation (3G) to the fourth generation
(4G) networks. 3G Services are required to satisfy the stan-
dards of providing a peak data rate of at least 200 K bits
per second (bps). The speciﬁed peak speed for 4G services
is 100 Mbps for high mobility communication, and 1 Gbps
for low mobility communication. In western Massachusetts,
where we perform our measurements, AT&T and Verizon
networks have their 4G Long Term Evolution (LTE) widely
deployed, while Sprint only has 3G Evolution-Data Opti-
mized (EVDO) available.
Cellular data networks diﬀer from WiFi networks in that
they provide broader signal coverage and more reliable con-
nectivity under mobility. Furthermore, since wireless link
losses result in poor TCP throughput and are regarded as
congestion by TCP, cellular carriers have augmented their
systems with extensive local retransmission mechanisms [3],
transparent to TCP, which mitigate TCP retransmissions
and reduce the waste of precious resources in cellular net-
works. Although these mechanisms reduce the impact of
losses dramatically and improves TCP throughput, they come
at the cost of increased delay and rate variability.
On the other hand, WiFi networks provide shorter packet
round trip times (RTTs) but higher loss rates. Through-
out our measurements, we observe that the loss rates over
3G/4G networks are generally lower than 0.1%, while those
of WiFi vary from 1% to 3%. From our observations, the
average RTT for WiFi networks is about 30 ms, while that
of 4G cellular carriers usually has base RTTs of 60 ms, and
can increase by four to ten fold in a single 4G connection
(depending on the carrier and the ﬂow sizes, see Section 5),
and 20-fold in 3G networks. We note that, although cellular
networks in general have larger packet RTTs, in many of
our measurements, WiFi is no longer faster than 4G LTE,
and this provides greater incentive to use multi-path TCP
for robust data transport and better throughput.
2.2 MPTCP
We discuss how the current MPTCP protocol establishes
a connection and describe the diﬀerent type of congestion
controllers used by MPTCP.
2.2.1 Connection and Subﬂow Establishment
Once an MPTCP connection is initiated and the ﬁrst ﬂow
is established, each end host knows one of its peer’s IP ad-
dresses. When the client has an additional interface, for
example, a 3G/4G interface, it will ﬁrst notify the server
its additional IP address with an Add Address option over
the established subﬂow and send another SYN packet with
a JOIN option to the server’s known IP address. With this
MPTCP-JOIN option, this subﬂow will be associated with
a previously established MPTCP connection. As many of
the mobile clients are behind Network Address Translations
(NATs), when the server has an additional interface, it is
diﬃcult for the server to directly communicate with the mo-
456bile client as the NATs usually ﬁlter out unidentiﬁed pack-
ets [26]. The server thus sends an Add Address option on the
established subﬂow, notifying the client its additional inter-
face. As soon as the client receives it, it sends out another
SYN packet with JOIN option to the server’s newly notiﬁed
IP address, together with the exchanged hashed key for this
MPTCP connection, and initiates a new subﬂow [8].
2.2.2 Congestion Controller
As each MPTCP subﬂow behaves as a legacy New Reno
TCP ﬂow except for the congestion control algorithms, af-
ter the 3-way handshake, each subﬂow maintains its own
congestion window and retransmission scheme during data
transfer, and begins with a slow-start phase that doubles the
window per RTT [2] before entering the congestion avoid-
ance phase.
We brieﬂy describe the diﬀerent congestion avoidance al-
gorithms that have been proposed for MPTCP. Let us de-
note by wi and rtti the congestion window size and round
trip time of subﬂow i, and denote by w the total congestion
window size over all the subﬂows. Also, let R be the set of
all subﬂows.
Uncoupled TCP Reno (reno): The simplest algorithm
that one can imagine is to use TCP New Reno over each of
the subﬂows:
• For each ACK on ﬂow i: wi = wi + 1
wi
• For each loss on ﬂow i: wi = wi
2 .
This does not satisfy the design goal of MPTCP [24], as it
fails to provide congestion balancing in the network. We use
this algorithm as the baseline and refer to it as reno.
Coupled: The coupled congestion control algorithm was
introduced in [32] and is the default congestion controller of
MPTCP [8, 24]. It couples the increases and uses the un-
modiﬁed behavior of TCP in the case of a loss. The coupled
congestion control algorithm works as follows:
• For each ACK on ﬂow i: wi = wi + min( a
w , 1
wi
)
• For each loss on ﬂow i: wi = wi
2
a is a function of wi and rtti for all i ∈ R. As discussed
in [19], this algorithm fails to fully satisfy the design goal
of MPTCP but provides better congestion balancing than
reno.
OLIA: An opportunistic link increase algorithm has been
proposed by Khalili et al. [19] as an alternative to the cou-
pled algorithm:
• For each ACK on ﬂow i: wi = wi+
• For each loss on ﬂow i: wi = wi
2
wi/rtt2
i
(Pp∈R wp/rttp)2 + αi
wi
where αi is a function of wi and rtti for all i ∈ R. OLIA
satisﬁes the design goals of MPTCP and provides a better
congestion balancing than the coupled algorithm [19].
3. MEASUREMENT METHODOLOGY
In this section, we describe our experimental setup and
discuss our methodology. Note that all measurements were
performed during March 20 to May 7 in three diﬀerent towns
(Sunderland, Amherst, and Hadley) in western Massachusetts.
These towns are approximately 10 miles away from each
other.
Figure 1: For 2-path MPTCP experiments, only
solid-line paths are used. The additional dashed-line
paths are included for the 4-path MPTCP experi-
ments.
3.1 Experiment Setup
Figure 1 illustrates our testbed.
It consists of a wired
server, residing at the University of Massachusetts Amherst
(UMass) and a mobile client. For most of the measurements,
we focus on the 2-path scenarios (solid lines), where the
client has two interfaces activated while the server has only
interface in operation. A second interface is only active for
performance comparisons between two ﬂows and four ﬂows.
Our server is conﬁgured as a multi-homed host, connect-
ing via two Intel Gigabit Ethernet interfaces to two subnets
(LANs) of the UMass network. Each Ethernet interface is
assigned a public IP address and connected to the LAN via
a 1 Gigabit Ethernet cable. The mobile client is a Lenovo
X220 laptop and has a built-in 802.11 a/b/g/n WiFi inter-
face. Here we consider two types of WiFi networks: private
home WiFi networks and public WiFi hotspots. The home
WiFi network is accessed by associating the WiFi interface
to a D-Link WBR-1310 a/b/g wireless router connected to
a private home network in a residential area. The home net-
work traﬃc to the Internet is provided by Comcast network
which serves users in the same residential community with
a maximum download rate of up to 25 Mbps. Note that the
actual WiFi download speed varies according to backhaul
traﬃc load, types of home APs used, and users’ wireless in-
terfaces [29]. Unless otherwise stated, we refer to a private
home network as a WiFi network. The mobile client has
three additional cellular broadband data interfaces listed in
Table 1, and only uses them one at a time.
Table 1: Cellular devices used for each carrier
Carrier Device Name
Technology
Elevate mobile hotspot
AT&T
Verizon LTE USB modem 551L
Sprint
OverdrivePro mobile hotspot
4G LTE
4G LTE
3G EVDO
Both the server and the client are running Ubuntu Linux
12.10 with Kernel version 3.5.7 using the stable release of
the MPTCP Kernel implementation [21] version v0.86. The
UMass server is conﬁgured as an HTTP server.
It runs
Apache2 on port 8080, as AT&T has a Web proxy running
on port 80 which removes all the MPTCP option ﬁelds and
thus does not allow MPTCP connections. The client uses
wget to retrieve Web objects of diﬀerent sizes via all the
available paths.
457To reduce potential WiFi interference to the working wire-
less interface, we disable the functionality of WiFi band-
width sharing on both the AT&T and Sprint devices. Fur-
thermore, though all devices run at diﬀerent frequencies,
to avoid possible interference between these electronic de-
vices, we use USB cables to extend cellular dongles, and use
the WiFi and only one cellular device at a time. There-
fore, we assume interference among the devices is negligible.
Throughout the measurements, cellular reception signals of
diﬀerent carriers (over diﬀerent places) are in the range be-
tween -60dBm and -102dBm, which covers good and weak
signals.
Connection parameters.
The default Linux TCP uses an initial slow start threshold
value (ssthresh) of inﬁnity, and caches parameters for per-
destination TCP connections [28]. When losses occur, the
ssthresh value will be reset and cached for initialization of
future TCP connections to the same destination. However,
this is shown to be harmful for short ﬂows [13] if an earlier
connection to a particular destination encounters a sequence
of losses. This is because ssthresh will be set to a small
value and all the subsequent newly open ﬂows to that desti-
nation will have the same small ssthresh. Hence, we conﬁg-
ure our server such that no parameters of previously closed
TCP connections to any destination are cached. Moreover,
as we are using cellular networks in nearly loss-free envi-
ronments (as will be discussed later), a ssthresh value of
inﬁnity will lead to the case where the cellular path never
leaves slow start. The congestion window of the cellular path
could then become extremely large and hence suﬀer severe
RTT inﬂation [3, 15], which can degrade the performance
of MPTCP. Therefore, we set the default value of ssthresh
to 64KB for fair comparisons among diﬀerent conﬁgurations
and ﬁle sizes, and to mitigate the impact of RTT inﬂation