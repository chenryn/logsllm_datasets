(fe.action.value) that corresponds to the amount of the resource used by the current, access re-
questing event (ce.target.quantity).
7 Implementation
In this section, we present the implementation speciﬁcs of the extensions made to J2ME to obtain the
previously described xJ2ME architecture. For prototype xJ2ME implementation we used the recently
released Sun’s open source J2ME Reference Implementation (RI) [18]. The particular choice of target
JVM to be extended was made based on the code availability, without any loss of generality. The
presented architecture and prototype is fully portable to any J2ME implementation that adheres to
the same original security architecture speciﬁcation.
7.1 Background
Figure 4(a) shows the general call hierarchy of a Java virtual machine, including calls to the run-time
monitor. To access resources, MIDlet calls the Java libraries provided by MIDP. The Java libraries, in
turn, call the underlying native classes (e.g. C libraries). The calls to the security Run-time Monitor
can, as opposed to the diagram in the ﬁgure, occur at diﬀerent levels: i) at the Java MIDP library
level (as in the ﬁgure); ii) at the native library level; or iii) beneath the running VM, intercepting the
OS API calls.
We decided to implement the run-time monitor at the Java library level (as depicted in the ﬁgure)
for two main reasons. Firstly, while Java library modiﬁcations produce completely portable solutions,
both of the alternative approaches require platform speciﬁc knowledge. Secondly, Java security checks
occur at a higher level of abstraction, eliminating considerable complexity in the implementation
phase. The decision to perform the checks at the Java library level is also in-line with the original
J2ME security architecture, further simplifying the implementation.
7.2 Run-time Enforcement
In MIDP 2.0 RI, the APIs that oﬀer access to the resources relevant from the point of view of our secu-
rity policy (e.g. SMS, TCP, HTTP etc.) are implemented in the form of Protocol classes in the corre-
sponding packages (e.g. com.sun.midp.io.j2me.sms.Protocol). For example, in the case of the TCP
stack, the Protocol class implements methods to open/close connections and send/receive data. As
shown in Figure 4(b), all of the resource-speciﬁc Protocol classes extend the ConnectionBaseAdapter
class. This class implements a unique method (checkForPermission) to check for permission to
perform the requested operation. However, in the original J2ME implementation, the policy is not
evaluated on every request to access a resource - if the policy grants the permission for the duration
of the session, the access decision is cached upon the ﬁrst check and used for any subsequent requests.
Our extended security architecture follows the the original class interaction model. However,
we have augmented the functionality of the ConnectionBaseAdapter by providing a method to
check policy (checkPolicy) which is to be invoked by individual Protocol classes. To support
the various policy rule constraint types that we envisage in our policy model, we also extended the
11
(a)
Figure 4: (a) Run-time Monitor implementation at diﬀerent levels: (1) Java (2) C (3) native OS calls
(b)Checking security policy implementation
ConnectionBaseAdapter class to hold the relevant information related to the corresponding resource
access requests. For example, such information includes, in the case of a request to send SMS, the
number to which to send the SMS, the size of the text to be sent, etc. For a TCP connection, this
information includes the URL of the connection destination and the amount of data to send.
To make an access decision, once invoked through the checkPolicy method, the run-time monitor
needs not only the type of the request (permission required) but also the identity of the MIDlet making
the request (i.e. the subject). In the J2ME architecture, the latter is unknown at the library level.
Thus, to obtain this information, in xJ2ME the policy check calls are performed indirectly, at the
level of MIDlet scheduler (MIDletSuite and Scheduler classes). As shown in Figure 4(b), it is the
MIDletSuite class, rather than the respective Protocol class, that invokes the run-time monitor. If
the access is denied, a SecurityException is thrown. Otherwise, the library proceeds and performs
the requested operation.
Furthermore, as our policy model relies on historic information, both MIDlet-local and global,
no caching of access decisions takes place. In other words, policy evaluation is performed on every
resource request. The evaluation shows that such approach does not introduce signiﬁcant, or even
noticeable, performance impact.
Since our policy model allows for policy expression based on historic information, both the global
and local system states need to be kept. This is the role of the newly introduced HistoryKeeper
class. If a requested permission is granted, the HistoryKeeper updates the relevant state variables,
but only after the operation for which the permission has been requested is performed successfully.
Otherwise, the system state remains unchanged. The policy model presented in Section 6 accounts
on these transaction-like properties of the system to be able to express obligation rules conditioned
on the occurrence of a future event.
7.2.1 Threading Issues
The reliance on the historic information to derive access decisions in multi-threaded environments
introduces problems of potential race conditions on the system state. In other words, all accesses to
the system state (local or global) must be implemented in a thread-safe manner. Otherwise, thread
interleavings in the state-check and state-update phases may cause policy violation. For illustration,
consider two threads, A and B, that both want to send an SMS. Let also the constraint on sending
SMS allow only one more SMS to be sent. In this case, if the thread A is preempted after the state
check but before the state update, and the thread B is scheduled to perform the state check, both
would be allowed to perform the requested operation - causing a clear violation of the policy.
12
(a)
(b)
Figure 5: (a) Skin for MIDP phone emulator (b)Snapshot of xJ2ME running on the JASJAR i-mate
There are two solutions to the above-outlined problem. The ﬁrst consists of thread serialization
while the second relies on locking of relevant state variables. In the current implementation we opted
for the latter one. The main reason for the choice was that we did not envisage nested state variable
lock requests to occur - much simplifying the chosen approach. The approach in which HistoryKeeper
locks relevant state variable does introduce potential delays in long-lasting resource access operations.
This, for example, may arise in case of blocking send operations over TCP connections. However,
taking in consideration the scope of the policy model, in terms of security-relevant resources that we
are interested in, we do not expect this to be a major issue. Having said this, solving the thread-safety
issue in a consistent form is one of the top items on the future research agenda.
7.3 Porting MIDP
We have integrated the presented architecture on two open-source MIDP implementations, MIDP
2.0 Reference Implementation 3 and PhoneME Feature [19]. The modularity of the architecture
makes it easy to incorporate with other MIDP distributions as well, as they all follow the MIDP 2.0
speciﬁcation [12].
Our implementation is currently running as emulator on Desktop PCs, both under Linux and
Windows OS, and on a PDA running Linux Embedded OS. The MIDP emulator for Desktop PCs
comes with an integrated user interface which simulates mobile phones and its user-interaction model,
with diﬀerent skins, one of which is depicted in Figure 5(a). Furthermore, the CLDC and MIDP
porting guides [20, 21] give extensive instructions on porting to new platforms.
The phoneME software is designed to run on or be easily ported to virtually any mobile device.
For example, several ports for Linux Embedded and Windows CE devices are already in the phoneME
distribution. After modifying the sources, one must rebuild the project and compile it for the target
machine. Our extended J2ME prototype is running on an JASJAR I-Mate [22], with 64MB RAM
and a Intel Bulverde 520 MHz processor (also knows as xScale ARM processor [23]). Apart from the
default Windows Mobile operating system that comes with the device, we have installed a dual boot
Familiar Linux version 2.6 [24], which is loaded from a 252Mb SD Memory Card 4.
The window manager that we installed on the devices is Opie [25] version 1.2. Opie is an open-
source graphical user interface, developed as a fork from the commercial application environment
Qtopia. Figure 5(b) depicts a snapshot of the device. The available Opie applications include Calen-
dar, Contacts, Drawpad, a multimedia player, a wide range of games, etc.
3MIDP 2.0 RI: http://wwws.sun.com/software/communitysource/j2me/midp/download20.html
4Universal: how to install Linux http://www.handhelds.org/moin/moin.cgi/UniversalHowtoInstallLinux
13
Figure 6: Performance tests: The overhead introduced by the extra policy check when sending data
is unnoticeable.
We have incorporated the ﬁne-grain policy based security architecture and cross-compiled phoneME
features based on the Qt/Embedded graphical libraries [26] for the xScale ARM processor of our i-
mate device. A cross-compiler is a compiler capable of creating executable code for a platform other
than the one on which it is run. To build the GCC and GNU cross-compiler we used the cross-tool
scripts 5.
8 Evaluation
The improvement over the state-of-the-art brought about by our work lies in two dimensions: ﬂexibility
of the security models for mobile computing platforms and the granularity at which the policies can be
speciﬁed and enforced. The ﬂexibility of the model is proven by example, while the policy enforcement
mechanisms lend themselves to being evaluated empirically.
It is important to state that owing to the J2ME architecture, MIDlets cannot access low level APIs
directly. This implies that by placing run-time monitor hooks within the Java library code (rather
than inlining them using bytecode rewriting) we do not open up space for bypassing of the security
mechanisms.
As Section 4.3 presented, the previous J2ME permission model literally oﬀered no ﬂexibility in
terms of deﬁning and managing permissions, customizing protection domains and applying per ap-
plication policies.
In contrast, the proposed security architecture provides extensive ﬂexibility for
ﬁne-grained security policies and control over the application’s behavior.
The original J2ME security architecture resorts to user consultation on every request for a per-
mission not explicitly allowed in the respective protection domain. The presented ﬁne-grained policy
model and security architecture enhances the user experience and the control she has over the behav-
ior of applications running on the system. For example, instead of manually counting the number of
SMSs a MIDlet has sent when being prompted for conﬁrmation each time, the user may now rely on
an adequate policy.
We used the JASJAR i-mate with the conﬁguration presented in Section 7.3 as a testbed for per-
formance measurements. To measure the overhead introduced by the extra policy check, we conducted
the following experiment. We measured the time needed by a MIDlet to send data, when 11, 25 and
no policies are deﬁned. The number of policies deﬁned on a mobile device is generally bound by the
number of resources. As the number of resources is by itself limited, we expect the number of policies
to remain reasonably low, as the values we have chosen for testing.
To avoid the noise introduced by network delays, we start the TCP server locally, on the JASJAR
i-mate. The MIDlet Client establishes a connection to the server and sends a variable amount of data,
in chunks of 1Kb. This means that the policy check is done for each Kb sent. Therefore, if the client
5Crosstool: http://kegel.com/crosstool/
14
sends 50Kb, the library invokes the policy check invoked 50 times. Once the connection is established,
we measured the average time needed by the client to send 10Kb, 25Kb, 50Kb and 75Kb of data.
To compare the performance of the virtual machine, we considered the cases (1) no policy check is
performed (previous MIDP architecture), (2) 11 policy rules to be checked and (2) 25 policy rules are
deﬁned.
As Figure 8 depicts, the average time to send 10Kb of data is 350ms and 75Kb is 2 seconds, in
all three cases. The overhead introduced by the policy check is unnoticeable compared with the time
needed to perform the security relevant operation. It turns out that integrating the Java monitor
into the virtual machine architecture and having it triggered by the Java MIDP libraries results in
excellent performance.
9 Conclusions and Future Work
This paper has presented a practical extension to the Java virtual machine for mobile devices that
supports ﬁne-grained security policy and enforces them through run-time monitoring. By doing so,
and by having proven an eﬃcient and viable solution, it addresses the users’ need for application
control and opens the possibility of a new generation of mobile services and applications.
Although the presented model for Run-time Monitor has been implemented for the MIDP proﬁle,
the introduced architecture concepts can be applied to other J2ME proﬁles as well. An alternative to
porting the J2ME Sun RI to run on smart phones and PDAs is to incorporate the run-time monitor
in the proprietary Java implementations of speciﬁc operating systems. Since the extended security
architecture is enforced only at the level of Java libraries and modules, the modiﬁcations done do not
aﬀect the KVM nor the operating system. Therefore, the Run-time monitor should be easily portable
to alternative implementations.
In the future, we plan to deploy the prototype to a number of platforms and design graphical
paradigms for specifying policies in a user friendly manner. In addition to the policy management
tools, we plan to introduce support for deﬁning and handling policies per groups of application.
Furthermore, at the time of writing of this paper we are working on the multi-threading issue outlined
in Section 7.
References
[1] Microsoft Developer Network Library, Windows CD Platform Documentation: Trusted APIs,
available from http://msdn2.microsoft.com/en-us/library/ms924486.aspx.
[2] B. Hashii, S. Malabarba, R. Pandey, M. Bishop, Supporting reconﬁgurable security policies for
mobile programs, Computer Networks (Amsterdam, Netherlands: 1999) 33 (1–6) (2000) 77–93.
[3] R. Pandey, B. Hashii, Providing ﬁne-grained access control for mobile programs through binary
editing, Tech. Rep. TR-98-08 (1998).
[4] L. Bauer, J. Ligatti, D. Walker, Composing security policies with polymer, in: PLDI ’05: Pro-
ceedings of the 2005 ACM SIGPLAN conference on Programming language design and imple-
mentation, ACM Press, New York, NY, USA, 2005, pp. 305–314.
[5] P. Paal, Java 2 Platform Micro Edition, in: HUT TML 2000, Tik-110.501 Seminar on Network
Security.
[6] A. K. Ghosh, T. M. Swaminatha, Software security and privacy risks in mobile e-commerce,
Commun. ACM 44 (2) (2001) 51–57.
[7] F. B. Schneider, Enforceable security policies, ACM Transaction on Information and System
Security 3 (1) (2000) 30–50.
15
[8] M. Hilty, D. Basin, A. Pretschner, On obligations, in: S. de Capitani di Vimercati, P. Syverson,
D. Gollmann (Eds.), 10th European Symposium on Research in Computer Security (ESORICS
2005), Vol. 3679 of LNCS, Springer-Verlag, 2005, pp. 98–117.
[9] K. W. Hamlen, G. Morrisett, F. B. Schneider, Computability classes for enforcement mechanisms,
ACM Trans. Program. Lang. Syst. 28 (1) (2006) 175–205.
[10] J2ME, Connected Device Conﬁguration (CDC), Sun Microsystems,
http://java.sun.com/products/cdc/.
available
from
[11] J2ME, Connected Limited Device Conﬁguration (CLDC), JSR 30, JSR 139, Sun Microsystems,
available from http://java.sun.com/products/cldc/.
[12] J2ME, Mobile Information Device Proﬁle (MIDP), JSR 37, JSR 118, Sun Microsystems, available
from http://java.sun.com/products/midp/.
[13] L. Gong, G. Ellison, M. Dageforde, Inside Java 2 platform security architecture, API design, and
implementation (2nd Edition), Prentice Hall PTR, May 2003.
[14] M. Debbabi, M. Saleh, C. Talhi, S. Zhioua, Security Evaluation of J2ME CLDC Embedded Java
Platform., Journal of Object Technology 5 (2) (2006) 125–154.
[15] JSR 118: Mobile Information Device Proﬁle 2.0, Sun Microsystems, Tech. rep., available from
http://jcp.org/en/jsr/detail?id=118.
[16] JSR 248: Mobile Service Architecture Speciﬁcation, Tech. rep., Java Community ProcessSM,
JavaT M Platform, Micro Edition, available from http://jcp.org/en/jsr/detail?id=248
(April 2006).
[17] C. Ribeiro, P. Guedes, SPL: An access control language for security policies with complex con-
straints, in: Network and Distributed System Security Symposium (NDSS’01), San Diego, Cali-
fornia, February 2001.
[18] Free and open source Java, http://www.sun.com/software/opensource/java/.
[19] PhoneME, https://phoneme.dev.java.net/.
[20] Sun Microsystems, Inc, VM Porting Guide. CLDC, Version 1.0.4 (October 2002).
[21] Sun Microsystems, Inc, Porting MIDP (November 2002).
[22] JASJAR i-mate Technical details, available from http://www.imate.com/t-JASJAR technical.aspx.
[23] Intel Corporation. xScale., www.intel.com/design/intelxscale/.
[24] Familiar Linux, http://familiar.handhelds.org/.
[25] Opie - Open Palmtop Integrated Environment Applications and libraries for mobile devices,
http://opie.handhelds.org/cgi-bin/moin.cgi/.
[26] Qt/Embedded, http://www.trolltech.com/download/qt/embedded.html.
16