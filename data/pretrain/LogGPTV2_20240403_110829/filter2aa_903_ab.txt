S y s c a l l s :
{
}
Last Syscalls
read
State Machine
open: [read]
11
Claudio Canella (@cc0x1f)
State Machine Generation
main
foo1
Info foo1
C a l l
Targets :
{
}
S y s c a l l s :
{
}
Last Syscalls
read
State Machine
open: [read]
11
Claudio Canella (@cc0x1f)
State Machine Generation
main
Info main
C a l l
Targets :
{
”L59” :
[ foo2 ]
}
Last Syscalls
read
State Machine
open: [read]
11
Claudio Canella (@cc0x1f)
State Machine Generation
main
foo2
Info foo2
C a l l
Targets :
{
”L179” :
[ bar2 ]
}
S y s c a l l s :
{
”L178” :
[ open ]
}
Last Syscalls
read
State Machine
open: [read]
11
Claudio Canella (@cc0x1f)
State Machine Generation
main
foo2
Info foo2
C a l l
Targets :
{
”L179” :
[ bar2 ]
}
S y s c a l l s :
{
”L178” :
[ open ]
}
Last Syscalls
read
State Machine
open: [read]
read: [open]
11
Claudio Canella (@cc0x1f)
State Machine Generation
main
foo2
Info foo2
C a l l
Targets :
{
”L179” :
[ bar2 ]
}
S y s c a l l s :
{
}
Last Syscalls
open
State Machine
open: [read]
read: [open]
11
Claudio Canella (@cc0x1f)
State Machine Generation
main
foo2
bar2
Info bar2
S y s c a l l s :
{
”L162” :
[ s t a t ]
}
Last Syscalls
open
State Machine
open: [read]
read: [open]
11
Claudio Canella (@cc0x1f)
State Machine Generation
main
foo2
bar2
Info bar2
S y s c a l l s :
{
}
Last Syscalls
stat
State Machine
open: [read,stat]
read: [open]
11
Claudio Canella (@cc0x1f)
State Machine Generation
main
foo2
Info foo2
C a l l
Targets :
{
}
S y s c a l l s :
{
}
Last Syscalls
stat
State Machine
open: [read,stat]
read: [open]
11
Claudio Canella (@cc0x1f)
State Machine Generation
main
Info main
C a l l
Targets :
{
}
Last Syscalls
stat
State Machine
open: [read,stat]
read: [open]
11
Claudio Canella (@cc0x1f)
Enforcement
Library
• extracts information
12
Claudio Canella (@cc0x1f)
Enforcement
Library
• extracts information
• makes oﬀset adjustment
12
Claudio Canella (@cc0x1f)
Enforcement
Library
• extracts information
• makes oﬀset adjustment
Kernel
• performs transition check
12
Claudio Canella (@cc0x1f)
Enforcement
Library
• extracts information
• makes oﬀset adjustment
Kernel
• performs transition check
• performs independent origin check
12
Claudio Canella (@cc0x1f)
Evaluation
Performance
13
Claudio Canella (@cc0x1f)
Evaluation
Performance
Security
13
Claudio Canella (@cc0x1f)
Microbenchmark
None
Seccomp
State
Origin
Combined
0
200
400
302
348
326
329
341
292
336
320
320
332
Cycles
average
min
14
Claudio Canella (@cc0x1f)
Macrobenchmark
ﬀmpeg
nginx
memcached
0
0.5
1
1.5
+3.93 %
+1.08 %
+0.5 %
+2.98 %
+1.2 %
+0.34 %
+1.81 %
+1.52 %
+1.06 %
Normalized
Overhead
State
Sysloc
Combined
15
Claudio Canella (@cc0x1f)
State Machine Analysis
Application
Average Transitions
#States
busybox
15.99
23.52
coreutils
16.66
26.64
pwgen
13.56
18
muraster
18.89
29
nginx
74.05
107
ﬀmpeg
49.07
55
memcached
43.16
86
mutool
32.26
53
16
Claudio Canella (@cc0x1f)
State Machine Analysis
Application
Average Transitions
#States
busybox
15.99
23.52
coreutils
16.66
26.64
pwgen
13.56
18
muraster
18.89
29
nginx
74.05
107
ﬀmpeg
49.07
55
memcached
43.16
86
mutool
32.26
53
16
Claudio Canella (@cc0x1f)
Origin Analysis
Application
Total #Oﬀsets
Avg #Oﬀsets
busybox
102.64
3.75
coreutils
116.71
4.42
pwgen
84
4.42
muraster
193
4.6
nginx
318
3.0
ﬀmpeg
279
4.98
memcached
317
3.69
mutool
278
4.15
17
Claudio Canella (@cc0x1f)
Origin Analysis
Application
Total #Oﬀsets
Avg #Oﬀsets
busybox
102.64
3.75
coreutils
116.71
4.42
pwgen
84
4.42
muraster
193
4.6
nginx
318
3.0
ﬀmpeg
279
4.98
memcached
317
3.69
mutool
278
4.15
17
Claudio Canella (@cc0x1f)
Return-oriented programming
• Use exisiting code to exploit a program
18
Claudio Canella (@cc0x1f)
Return-oriented programming
• Use exisiting code to exploit a program
• Jumps to parts of functions (so called gadgets)
18
Claudio Canella (@cc0x1f)
Return-oriented programming
• Use exisiting code to exploit a program
• Jumps to parts of functions (so called gadgets)
• These gadgets are assembler instructions followed by a ret
• pop RDI; retq
• syscall; retq
• add RSP, 8; retq
18
Claudio Canella (@cc0x1f)
Return-oriented programming
• Use exisiting code to exploit a program
• Jumps to parts of functions (so called gadgets)
• These gadgets are assembler instructions followed by a ret
• pop RDI; retq
• syscall; retq
• add RSP, 8; retq
• Gadgets are chained together for an exploit
18
Claudio Canella (@cc0x1f)
Return-oriented programming
• Use exisiting code to exploit a program
• Jumps to parts of functions (so called gadgets)
• These gadgets are assembler instructions followed by a ret
• pop RDI; retq
• syscall; retq
• add RSP, 8; retq
• Gadgets are chained together for an exploit
• Overwrite the stack with gadget addresses and parameters
18
Claudio Canella (@cc0x1f)
Return-oriented programming
Stack
return address 3
value2
value1
return address 2
SP →
return address 1
Register
RSI
RDI
Program code
asm instruction
ret
Gadget 1
...
pop rsi
pop rdi
ret
Gadget 2
...
syscall
ret
Gadget 3
...
19
Claudio Canella (@cc0x1f)
Return-oriented programming
Stack
return address 3
value2
value1
SP →
return address 2
return address 1
Register
RSI
RDI
Program code
IP →
asm instruction
ret
Gadget 1
...
pop rsi
pop rdi
ret
Gadget 2
...
syscall
ret
Gadget 3
...
19
Claudio Canella (@cc0x1f)
Return-oriented programming
Stack
return address 3
value2
value1
SP →
return address 2
return address 1
Register
RSI
RDI
Program code
asm instruction
IP →
ret
Gadget 1
...
pop rsi
pop rdi
ret
Gadget 2
...
syscall
ret
Gadget 3
...
19
Claudio Canella (@cc0x1f)
Return-oriented programming
Stack
return address 3
value2
SP →
value1
return address 2
return address 1
Register
RSI
RDI
Program code
asm instruction
ret
Gadget 1
...
IP →
pop rsi
pop rdi
ret
Gadget 2
...
syscall
ret
Gadget 3
...
19
Claudio Canella (@cc0x1f)
Return-oriented programming
Stack
return address 3
SP →
value2
value1
return address 2
return address 1
Register
RSI
value1
RDI
Program code
asm instruction
ret
Gadget 1
...
pop rsi
IP →
pop rdi
ret
Gadget 2
...
syscall
ret
Gadget 3
...
19
Claudio Canella (@cc0x1f)
Return-oriented programming
Stack
SP →
return address 3
value2
value1
return address 2
return address 1
Register
RSI
value1
RDI
value2
Program code
asm instruction
ret
Gadget 1
...
pop rsi
pop rdi
IP →
ret
Gadget 2
...
syscall
ret
Gadget 3
...
19
Claudio Canella (@cc0x1f)
Return-oriented programming
Stack
return address 3
value2
value1
return address 2
return address 1
Register
RSI
value1
RDI
value2
Program code
asm instruction
ret
Gadget 1
...
pop rsi
pop rdi
ret
Gadget 2
...
IP →
syscall