### System Call Analysis

**Syscalls:**
- `read`

**State Machine:**
- `open: [read]`

**Contributor:**
- Claudio Canella (@cc0x1f)

### State Machine Generation

#### Function: `main`
- **Call Targets:**
  - `L59`: [foo2]
- **Syscalls:**
  - `read`
- **State Machine:**
  - `open: [read]`

#### Function: `foo1`
- **Call Targets:**
  - `L179`: [bar2]
- **Syscalls:**
  - `open` (L178)
- **State Machine:**
  - `open: [read]`
  - `read: [open]`

#### Function: `foo2`
- **Call Targets:**
  - `L179`: [bar2]
- **Syscalls:**
  - `open` (L178)
- **State Machine:**
  - `open: [read, stat]`
  - `read: [open]`

#### Function: `bar2`
- **Syscalls:**
  - `stat` (L162)
- **State Machine:**
  - `open: [read, stat]`
  - `read: [open]`

### Enforcement Library

- **Library:**
  - Extracts information
  - Makes offset adjustment
- **Kernel:**
  - Performs transition check
  - Performs independent origin check

### Evaluation

#### Performance and Security
- **Microbenchmark:**
  - Cycles:
    - None: 302
    - Seccomp: 348
    - State: 326
    - Origin: 329
    - Combined: 341
  - Average: 320
  - Minimum: 332

- **Macrobenchmark:**
  - Overhead:
    - ffmpeg: +3.93%
    - nginx: +1.08%
    - memcached: +0.5%
    - State: +2.98%
    - Sysloc: +1.2%
    - Combined: +1.81%

### State Machine Analysis

- **Average Transitions and States:**
  - busybox: 15.99 transitions, 23.52 states
  - coreutils: 16.66 transitions, 26.64 states
  - pwgen: 13.56 transitions, 18 states
  - muraster: 18.89 transitions, 29 states
  - nginx: 74.05 transitions, 107 states
  - ffmpeg: 49.07 transitions, 55 states
  - memcached: 43.16 transitions, 86 states
  - mutool: 32.26 transitions, 53 states

### Origin Analysis

- **Total and Average Offsets:**
  - busybox: 102.64 total, 3.75 average
  - coreutils: 116.71 total, 4.42 average
  - pwgen: 84 total, 4.42 average
  - muraster: 193 total, 4.6 average
  - nginx: 318 total, 3.0 average
  - ffmpeg: 279 total, 4.98 average
  - memcached: 317 total, 3.69 average
  - mutool: 278 total, 4.15 average

### Return-Oriented Programming (ROP)

- **Exploitation Technique:**
  - Uses existing code to exploit a program.
  - Jumps to parts of functions (gadgets).
  - Gadgets are assembler instructions followed by a `ret`.
  - Examples of gadgets:
    - `pop RDI; retq`
    - `syscall; retq`
    - `add RSP, 8; retq`
  - Gadgets are chained together for an exploit.
  - Overwrites the stack with gadget addresses and parameters.

- **Stack and Register Interaction:**
  - Stack:
    - Return address 3
    - Value 2
    - Value 1
    - Return address 2
    - Return address 1
  - Registers:
    - RSI: value1
    - RDI: value2
  - Program Code:
    - Gadget 1: `pop rsi; pop rdi; ret`
    - Gadget 2: `syscall; ret`
    - Gadget 3: `add rsp, 8; ret`

- **Execution Flow:**
  - Instruction Pointer (IP) points to the current gadget.
  - Stack Pointer (SP) points to the top of the stack.
  - The stack is manipulated to control the flow of execution through the gadgets.

**Contributor:**
- Claudio Canella (@cc0x1f)