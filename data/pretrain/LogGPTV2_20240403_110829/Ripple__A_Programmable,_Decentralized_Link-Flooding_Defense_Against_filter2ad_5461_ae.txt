ure 6). This means that even an “best-effort” classiﬁer is still
useful for increasing defense effectiveness. The modularity
of Ripple language allows the defense to incorporate such
defense optimizations very easily.
6.5 Mitigating rolling attacks
The next set of experiments are designed to evaluate how
well the defenses can handle adaptive adversaries. Before
evaluating rolling attacks, we start by performing a set of mi-
crobenchmarks on attack response time, which is deﬁned as
the time for a defense to take effect after the attack begins. We
further use a wider range of of topologies (Figures 8(a)-(c))
and trafﬁc complexities (Figures 8(d)-(e)). As the microbench-
mark shows, Ripple always produces the fastest response.
Faster response time is a key enabler for Ripple to mitigate
rolling attacks. We launch rolling attacks using Crossﬁre ﬂows
in the largest topology, and compare Ripple with SDN++ as
the baseline defense. Concretely, the adversary dynamically
shifts the attack trafﬁc to different links to evade mitigation.
Figures 9(a)-(c) present the normal user throughput under the
attack, and they further test different rolling attack strengths as
measured by the frequency for shifting attacks. As we can see,
Ripple can always detect the changing targets very quickly,
and recover the throughput soon afterwards using a suitable
defense strategy. However, for SDN++, the defense decisions
are always lagging behind. For fast-changing attacks, the
SDN defense experiences a constant throughput degradation
during the attack. This conﬁrms the effectiveness of rolling
attacks for increasing attack persistence (as ﬁrst identiﬁed
by Crossﬁre) [40]; it also shows that Ripple can effectively
mitigate rolling attacks and break such persistence.
3876    30th USENIX Security Symposium
USENIX Association
020406080100 0 5 10 15 20 25 30 35 40Normalized throughput (%)Time (seconds)RippleSDN-RNo defense020406080100 0 5 10 15 20 25 30 35 40Normalized throughput (%)Time (seconds)RippleSDN-RNo defense020406080100 0 10 20 30 40 50 60 70Normalized throughput (%)Time (seconds)RippleSDN-RNo defense020406080100 0 5 10 15 20 25 30 35 40Normalized throughput (%)Time (seconds)RippleSDN-SNo defense020406080100 0 5 10 15 20 25 30 35 40Normalized throughput (%)Time (seconds)RippleSDN-SNo defense020406080100 0 10 20 30 40 50 60 70Normalized throughput (%)Time (seconds)RippleSDN-SNo defense020406080100 0 5 10 15 20 25 30 35 40Normalized throughput (%)Time (seconds)RippleSDN++No defense020406080100 0 5 10 15 20 25 30 35 40Normalized throughput (%)Time (seconds)RippleSDN++No defense020406080100 0 10 20 30 40 50 60 70Normalized throughput (%)Time (seconds)RippleSDN++No defense(a) Ripple vs. SDN-R
(b) Ripple vs. SDN-S
(c) Ripple vs. SDN++
(d) Ripple vs. SDN-R
(e) Ripple vs. SDN-S
(f) Ripple vs. SDN++
Figure 8: The attack response time of the defense systems with different topology sizes and trafﬁc complexities as measured by
the number of trafﬁc classes. A trafﬁc class is a collection of ﬂows that arrive at the same ingress and are routed by the network
in the same way to the same egress.
(a) Rolling attacks (slow)
(b) Rolling attacks (medium)
(c) Rolling attacks (fast)
Figure 9: Ripple is effective against fast-changing rolling attacks. SDN baselines constantly lag behind.
7 Related Work
Link-ﬂooding attacks. Existing work has demonstrated a
range of effective link-ﬂooding attacks [39, 40, 53], and simi-
lar real-world incidents have been reported in the wild [3, 6].
State-of-the-art defenses are based on OpenFlow SDN, which
run defense algorithms as software SDN apps at a centralized
controller [39, 43, 51, 61]. Ripple is the ﬁrst decentralized
defense based on programmable switches, and it achieves
similar programmability as existing SDN defenses while out-
performing them on fast-changing attacks.
Programmable switches. Programmable switches have
found use in network measurement [27, 30, 48, 52, 59], load
balancing [35, 42, 47], application-level acceleration [24, 37,
38, 44], and security [41, 57]. Recent work has also consid-
ered synchronizing or replicating switch states across the net-
work [45, 54, 56]. Ripple is inspired by these work, but uses
programmable switches to design a decentralized defense
against link-ﬂooding attacks. A position paper has argued for
the advantage of programmable switches for link-ﬂooding
defense, but it only outlines a design sketch [58].
8 Conclusion
In this paper, we have presented Ripple, a decentralized
defense against adaptive link-ﬂooding attacks using pro-
grammable switches. Ripple has a policy language that speci-
ﬁes a defense panorama, and its compiler can generate switch-
local programs in P4 that extract attack signals from network
trafﬁc. Moreover, the Ripple runtime uses a distributed pro-
tocol to synchronize local views and construct a network-
wide panorama. Our evaluation shows that Ripple can be pro-
grammed for a range of defenses, and that it can outperform
SDN defenses signiﬁcantly in mitigating adaptive adversaries.
USENIX Association
30th USENIX Security Symposium    3877
10-310-210-1100101102ANSCRLBellSurfNetUUNetTime (ms)Different topologiesRippleSDN-R10-310-210-1100101102ANSCRLBellSurfNetUUNetTime (ms)Different topologiesRippleSDN-S10-310-210-1100101102ANSCRLBellSurfNetUUNetTime (ms)Different topologiesRippleSDN++10-210-1100101102150250350450550650750Time (s)Num. of traffc classesSDN-RRipple10-210-1100101102150250350450550650750Time (s)Num. of traffc classesSDN-SRipple10-210-1100101102150250350450550650750Time (s)Num. of traffc classesSDN++Ripple0%20%40%60%80%100% 0 50 100 150 200Normalized throughputTime (seconds)RippleSDN++No defense0%20%40%60%80%100% 0 50 100 150 200Normalized throughputTime (seconds)RippleSDN++No defense0%20%40%60%80%100% 0 50 100 150 200Normalized throughputTime (seconds)RippleSDN++No defense9 Acknowledgments
[15] Pox. https://noxrepo.github.io/pox-doc/html
We thank the anonymous reviewers for their valuable feed-
back. This work was partially supported by NSF grants CNS-
1942219 and CNS-1801884.
References
[1] Add crypto extern to behavioral-model. https://gith
ub.com/p4lang/behavioral-model/pull/834.
[2] Attackers Use DDoS Pulses to Pin Down Multiple Tar-
gets. https://www.imperva.com/blog/pulse-wav
e-ddos-pins-down-multiple-targets/.
[3] Can a DDoS break the Internet? Sure, just not all of it.
https://arstechnica.com/information-techno
logy/2013/04/can-a-ddos-break-the-internet
-sure-just-not-all-of-it/.
[4] Detecting and mitigating target link-ﬂooding attacks
using SDN.
[5] Dyn analysis summary of Friday October 21 at-
tack. https://dyn.com/blog/dyn-analysis-summ
ary-of-friday-october-21-attack/.
[6] How extorted
e-mail
provider got
back
after crippling DDoS attack.
line
//arstechnica.com/information-technology
/2015/11/how-extorted-e-mail-provider-got-
back-online-after-crippling-ddos-attack/.
on-
https:
[7] The Internet Topology Zoo. http://www.topology-z
oo.org/.
[8] NS-3 simulator. https://www.nsnam.org/.
[9] Nsfocus identiﬁes DDoS attack trends in new 2018
insights report. https://nsfocusglobal.com/nsfo
cus-identifies-ddos-attack-trends-new-2018
-insights-report/.
[10] OVH hosting hit by 1Tbps DDoS attack, the largest one
ever seen. https://securityaffairs.co/wordpre
ss/51640/cyber-crime/tbps-ddos-attack.html.
[11] P4 behavioral model. https://github.com/p4lang/
behavioral-model.
[12] The P4 language repositories. https://github.com
/p4lang.
[13] Nox. https://github.com/noxrepo/nox, 2012.
[14] Beacon. https://www.sdxcentral.com/projects/
beacon/, 2013.
/, 2017.
[16] OpenDaylight. https://www.opendaylight.org/,
2018.
[17] Burton H. Bloom. Space/time trade-offs in hash coding
with allowable errors. In Communications of the ACM,
volume 13, 1970.
[18] Pat Bosshart, Dan Daly, Glen Gibb, Martin Izzard, Nick
McKeown, Jennifer Rexford, Cole Schlesinger, Dan
Talayco, Amin Vahdat, George Varghese, and David
Walker. P4: Programming protocol-independent packet
processors. ACM SIGCOMM CCR, 44(3), 2014.
[19] Pat Bosshart, Glen Gibb, Hun-Seok Kim, George Vargh-
ese, Nick McKeown, Martin Izzard, Fernando Mujica,
and Mark Horowitz. Forwarding metamorphosis: Fast
programmable match-action processing in hardware for
SDN. ACM SIGCOMM CCR, 43(4):99–110, 2013.
[20] Kuan-yin Chen, Anudeep Reddy Junuthula, Ishant Ku-
mar Siddhrau, Yang Xu, and H Jonathan Chao.
SDNShield: Towards more comprehensive defense
against DDoS attacks on SDN control plane. In Proc.
CNS, 2016.
[21] Xiaoqi Chen. Implementing AES encryption on pro-
grammable switches via scrambled lookup tables. In
Proc. SIGCOMM SPIN Workshop, 2020.
[22] Graham Cormode. Count-min sketches. Encyclopedia
of Database Systems, 2009.
[23] Graham Cormode and S. Muthukrishnan. An improved
data stream summary: The count-min sketch and its
applications. J. Algorithms, 55(1):58–75, April 2005.
[24] Huynh Tu Dang, Daniele Sciascia, Marco Canini, Fer-
nando Pedone, and Robert Soulé. NetPaxos: Consensus
at network speed. In Proc. SOSR, 2015.
[25] Trisha Datta, Nick Feamster, Jennifer Rexford, and
Liang Wang. SPINE: Surveillance protection in the
network elements. In Proc. FOCI, 2019.
[26] Seyed K Fayaz, Yoshiaki Tobioka, Vyas Sekar, and
Michael Bailey. Bohatei: Flexible and elastic DDoS
defense. In Proc. USENIX Security, 2015.
[27] Mojgan Ghasemi, Theophilus Benson, and Jennifer Rex-
ford. Dapper: Data plane performance diagnosis of TCP.
In Proc. SOSR. ACM, 2017.
[28] Dimitrios Gkounis, Vasileios Kotronis, and Xenofontas
Dimitropoulos. Towards defeating the crossﬁre attack
using SDN. arXiv preprint arXiv:1412.2013, 2014.
3878    30th USENIX Security Symposium
USENIX Association
[29] Garegin Grigoryan and Yaoqing Liu. LAMP: Prompt
layer 7 attack mitigation with programmable data planes.
In Proc. ANCS, 2018.
[30] Arpit Gupta, Rob Harrison, Marco Canini, Nick Feam-
ster, Jennifer Rexford, and Walter Willinger. Sonata:
Query-driven streaming network telemetry.
In Proc.
SIGCOMM, 2018.
[31] F. Hauser, M. Schmidt, M. Häberle, and M. Menth. P4-
MACsec: Dynamic topology monitoring and data layer
protection with MACsec in P4-based SDN. IEEE Ac-
cess, 8, 2020.
[32] Frederik Hauser, Marco Häberle, Mark Schmidt, and
Michael Menth. P4-IPsec: Implementation of IPsec
gateways in P4 with SDN control for host-to-site scenar-
ios. arXiv preprint arXiv:1907.03593, 2019.
[41] Qiao Kang, Lei Xue, Adam Morrison, Yuxin Tang, Ang
Chen, and Xiapu Luo. Programmable in-network secu-
rity for context-aware BYOD policies. In Proc. USENIX
Security, 2020.
[42] Naga Katta, Mukesh Hira, Changhoon Kim, Anirudh
Sivaraman, and Jennifer Rexford. Hula: Scalable load
balancing using programmable data planes. In Proc.
SOSR, 2016.
[43] Soo Bum Lee, Min Suk Kang, and Virgil D Gligor.
CoDef: collaborative defense against large-scale link-
ﬂooding attacks. In Proc. CoNEXT, 2013.
[44] Zaoxing Liu, Zhihao Bai, Zhenming Liu, Xiaozhou Li,
Changhoon Kim, Vladimir Braverman, Xin Jin, and Ion
Stoica. Distcache: Provable load balancing for large-
scale storage systems with distributed caching. In Proc.
FAST, 2019.
[33] Victor Heorhiadi, Michael K Reiter, and Vyas Sekar.
Simplifying software-deﬁned network optimization us-
ing SOL. In Proc. NSDI, 2016.
[45] Shouxi Luo, Hongfang Yu, and Laurent Vanbever.
Swing State: Consistent updates for stateful and pro-
grammable data planes. In Proc. SOSR, 2017.
[34] Chi-Yao Hong, Srikanth Kandula, Ratul Mahajan, Ming
Zhang, Vijay Gill, Mohan Nanduri, and Roger Watten-
hofer. Achieving high utilization with software-driven
WAN. In Proc. SIGCOMM, 2013.
[35] Kuo-Feng Hsu, Ryan Beckett, Ang Chen, Jennifer Rex-
ford, Praveen Tammana, and David Walker. Contra: A
programmable system for performance-aware routing.
In Proc. NSDI, 2020.
[36] Sushant Jain, Alok Kumar, Subhasree Mandal, Joon
Ong, Leon Poutievski, Arjun Singh, Subbaiah Venkata,
Jim Wanderer, Junlan Zhou, Min Zhu, Jonathan Zolla,
Urs Hölzle, Stephen Stuart, and Amin Vahdat. B4: Expe-
rience with a globally-deployed software deﬁned WAN.
In Proc. SIGCOMM, 2013.
[37] Xin Jin, Xiaozhou Li, Haoyu Zhang, Nate Foster,
Jeongkeun Lee, Robert Soulé, Changhoon Kim, and Ion
Stoica. NetChain: Scale-free sub-rtt coordination. In
Proc. NSDI, 2018.
[38] Xin Jin, Xiaozhou Li, Haoyu Zhang, Robert Soulé,
Jeongkeun Lee, Nate Foster, Changhoon Kim, and Ion
Stoica. NetCache: Balancing key-value stores with fast
in-network caching. In Proc. SOSP, 2017.
[39] Min Suk Kang, Virgil D Gligor, and Vyas Sekar.
SPIFFY: Inducing cost-detectability tradeoffs for per-
sistent link-ﬂooding attacks. In Proc. NDSS, 2016.
[40] Min Suk Kang, Soo Bum Lee, and Virgil D Gligor. The
crossﬁre attack. In Proc. S&P, 2013.
[46] Nick McKeown, Tom Anderson, Hari Balakrishnan,
Guru Parulkar, Larry Peterson, Jennifer Rexford, Scott
Shenker, and Jonathan Turner. OpenFlow: Enabling
innovation in campus networks. ACM SIGCOMM CCR,
38(2):69–74, 2008.
[47] Rui Miao, Hongyi Zeng, Changhoon Kim, Jeongkeun
Lee, and Minlan Yu. Silkroad: Making stateful layer-4
load balancing fast and cheap using switching asics. In
Proc. SIGCOMM, 2017.
[48] Srinivas Narayana, Anirudh Sivaraman, Vikram Nathan,
Prateesh Goyal, Venkat Arun, Mohammad Alizadeh, Vi-
malkumar Jeyakumar, and Changhoon Kim. Language-
directed hardware design for network performance mon-
itoring. In Proc. SIGCOMM, 2017.
[49] Ryan Rasti, Mukul Murthy, Nicholas Weaver, and Vern
Paxson. Temporal lensing and its application in pulsing
denial-of-service attacks. In Proc. S&P, 2015.
[50] Vibhaalakshmi Sivaraman, Srinivas Narayana, Ori Rot-
tenstreich, Shan Muthukrishnan, and Jennifer Rexford.
Heavy-hitter detection entirely in the data plane. In Proc.
SOSR, 2017.
[51] Jared M Smith and Max Schuchard. Routing around
congestion: Defeating DDoS attacks and adverse net-
work conditions via reactive BGP routing. In Proc. S&P,
2018.
[52] John Sonchack, Oliver Michel, Adam J Aviv, Eric Keller,
and Jonathan M Smith. Scaling hardware accelerated
network monitoring to concurrent and dynamic queries
with* ﬂow. In Proc. USENIX ATC, 2018.
USENIX Association
30th USENIX Security Symposium    3879
[53] Ahren Studer and Adrian Perrig. The coremelt attack.
In Proc. ESORICS, 2009.
[54] German Sviridov, Marco Bonola, Angelo Tulumello,
Paolo Giaccone, Andrea Bianco, and Giuseppe Bianchi.
LOcAl DEcisions on Replicated states (LOADER)
in programmable data planes: programming abstrac-
tion and experimental evaluation.
arXiv preprint
arXiv:2001.07670, 2020.
[55] Lei Wang, Qing Li, Yong Jiang, Xuya Jia, and Jian-
ping Wu. Woodpecker: Detecting and mitigating link-
ﬂooding attacks via SDN. Computer Networks, 147:1–
13, 2018.
[56] Jiarong Xing, Ang Chen, and T.S. Eugene Ng. Secure
state migration in the data plane. In Proc. SIGCOMM
SPIN Workshop, 2020.
[57] Jiarong Xing, Qiao Kang, and Ang Chen. NetWarden:
Mitigating network covert channels while preserving
performance. In Proc. USENIX Security, 2020.
[58] Jiarong Xing, Wenqing Wu, and Ang Chen. Architecting
programmable data plane defenses into the network with
FastFlex. In Proc. HotNets, 2019.
[59] Nofel Yaseen, John Sonchack, and Vincent Liu. Syn-
In Proc. SIGCOMM,
chronized network snapshots.
2018.
[60] Matei Zaharia, Mosharaf Chowdhury, Tathagata Das,
Ankur Dave, Justin Ma, Murphy McCauley, Michael J.
Franklin, Scott Shenker, and Ion Stoica. Resilient dis-
tributed datasets: A fault-tolerant abstraction for in-
memory cluster computing. In Proc. NSDI, 2012.
[61] Jing Zheng, Qi Li, Guofei Gu, Jiahao Cao, David KY
Yau, and Jianping Wu. Realtime ddos defense using cots
sdn switches via adaptive correlation analysis. IEEE
Transactions on Information Forensics and Security,
13(7):1838–1853, 2018.
3880    30th USENIX Security Symposium
USENIX Association