Neutralization
Valve
Valve
Valve
Valve
Button
Neutralizer
Source
Product
Heater
Source
Start
To
Mixer
Switching
Switch
Switch
Switch
Sensor
Synchronized
Sensor
Level
Level
Level
Railway
Acidity
Signal
Signal
Temp
High
Low
Mid
A
B
n n n n n n n n n n n n
p
p p p
p p p p
p p
p
p p
Control Logic pH
Baseline
Emergency
Annunciator
Sequential
Parallel
Table 4: Per-device accuracy results. Empty cell: Correct mapping, ‘p’: false positive mapping, ‘n’:false negative (no mapping),
Shaded cell: experiment omitted (see description).
Each of the applications is implemented in a Baseline control
system. Each baseline system is then modiﬁed with four variants
to introduce plant features not anticipated by the baseline speciﬁ-
cations:
Emergency. This case adds an emergency shutdown button named
∗ to each plant. If the emergency shutdown button is pushed,
estop
all devices will be immediately turned OFF. One can see how this
can cause false negative mappings. For example, a property of the
∗ ⇒ AX output) will no longer hold, because of
form AG(input
∗ holds, but output is forced to ⊥.
the case where input
The motor controller’s stop button acts as a shutdown, so there was
no need to add one.
∗ ∧ estop
Annunciator. Annunciator panels are visual or sometimes audible
displays present within the plant itself. We place a single annunci-
ator light on each input and output in the plant. This light is turned
ON by the control logic if the corresponding input or output is ON,
and OFF otherwise. We evaluate the plants with annunciator pan-
els as they nearly double the number of control variables that are
expected by the adversary. The trafﬁc signal and railway switching
processes were not evaluated with annunciator panels, as annunci-
ator functionality is already present in both systems.
Sequential. This case considers a plant with two distinct instances
of the process, where the second instance is dependent on the ﬁrst.
For the motor controller, this simply means that the second motor
mimics the forward and reverse behavior of the second. The same
is true for the trafﬁc lights, where the state of the second mimics
the ﬁrst. For sequential container ﬁlling, containers are partially by
the ﬁrst system, then by the second. The railway switching exam-
ple is modiﬁed to include three tracks, and allow a train to switch
from the ﬁrst track, to a middle second track, and then to the third
track. The safety properties are extended to prevent any conﬂicting
routes between the three tracks. Finally, the chemical neutraliza-
tion process is serialized to two tanks, such that the ﬁrst process
fully drains to the second before the second starts.
Parallel. This case models two independent instances of the pro-
cess executing in parallel on the same PLC. This is expected to
occur in production environments where it is more cost effective to
add more input and output wires to the same PLC than to maintain
distinct PLCs for each parallel instance of the process. A special
criterion is added for the parallel case called Synchronized, which
is true if all mappings where true positives in the same instance of
the process. I.e., there is no mixing of mappings between the two
independent processes.
4.1 Accuracy
Recall that accuracy is a measure of the correctness of the iden-
tiﬁed mappings between internal devices and the process speciﬁca-
tions, i.e., the accuracy of the VTDM. Here we measure correctly
mapped devices, incorrect mappings (false positives), and failures
to identify any mapping at all (false negatives). The results for ac-
curacy experiments are shown in Table 4. To summarize, in three
out of ﬁve test systems the baseline speciﬁcation is sufﬁcient to
produce a complete, correct mapping for the control system, and
four out of ﬁve systems had no false positives.
As expected, the emergency shutdown case caused false nega-
tives in two out of the three control systems. This was due to the
∗ ⇒ output) to
failure of speciﬁcations of the form AG(input
always hold under any mapping when there is always a state in
∗ makes the property not hold. The false negatives
which estop
occur for all devices in both cases, because later speciﬁcations con-
tained names that failed to map in earlier speciﬁcations, making
them uncheckable.
The pH neutralization system experienced the most false pos-
itives due to its multiple parallel behaviors.
In the annunciator
panel, the behavior of the valve for the neutralizer (v2) could not
be distinguished from the annunciator light for the mid level switch
2 = (cid:62) implies that both the valve and annunciator
∗
∗
2 because ls
ls
light are ON. More broadly, the sequential system false positives
were caused by devices in the ﬁrst instance that were mistaken for
a device in the second instance. For example, the heater in the
446System
Container Filling
Motor Control
Trafﬁc Signal
pH Neutralization
Railway Switching
Baseline
0.59/16
0.23/7
5.59/125
2.42/70
0.92/25
-/-
6.35/130
3.67/101
1.05/27
Emergency Annunciator
0.68/21
1.03/28
0.26/7
-/-
4.55/100
-/-
Sequential
1.00/27
0.45/14
51.76/1040
14.16/228
4.00/97
Parallel
1.57/29
0.86/19
103.60/1385
11.51/179
19.95/97
Table 5: Running time (s) / number of calls to the model checker for each system and case.
ﬁrst instance of the pH neutralization system was confused with the
heater in the second. The false positives in the parallel case were
caused by devices in the ﬁrst instance that were mistaken for non-
equivalent devices in the second. For example, the ﬁnished product
valve (v3) in the ﬁrst instance of the pH neutralization system was
confused with the mixer in the second instance. We improve upon
these results in Section 4.5.
4.2 Adaptability
Adaptability is the ability to recognize a control system by its
behavior, independent of its implementation. Because SABOT only
considers control logic behavior and not its structure, any imple-
mentation conforming to the process description will be handled
equivalently. To conﬁrm this is the case, and as an experimental
control, a team member not involved in prior analysis was tasked
with implementing an alternative trafﬁc signal control program that
exhibited the behavior from the description. The team member took
an alternative strategy of allowing the light timers to drive the rest
of the process, resulting in a signiﬁcantly different implementation.
The same experiments run above were rerun on this new implemen-
tation, and the results were identical.
4.3 Performance
To gauge runtime costs, we measured the running time and num-
ber of calls to the NuSMV model checker of each experiment con-
ducted in Section 4.1. Note that SABOT’s running time for a given
model and speciﬁcation is hard to calculate for a given set of in-
puts because it is highly dependent on the number of incremental
mappings attempted.
Shown in Table 5, in over 75% of tests, the mapping is found in
less than 10 seconds, and in 90% of tests, the mapping is found in
less than 30 seconds. Two tests however deserve particular atten-
tion. The test with a running time of 1m43.6s for parallel trafﬁc
signaling made the most calls to the model checker of any test. It
also represented the greatest increase in calls to the model checker
over its own baseline. This can be attributed to the fact that the traf-
ﬁc signal was the only speciﬁcation containing speciﬁcations that
mapped three names at once.
Also note the comparative running times and number of checker
calls for the sequential and parallel railway switching tests. Both
required the same number of calls to the checker, but the parallel
case has nearly a ﬁvefold increase in running time. The extended
running time for each call to the checker was the result of the dif-
ference in state space between the two. In the sequential case, there
were two systems with one set of inputs, and the second system
dependent on the ﬁrst. In the parallel case, the independent input
sets greatly inﬂated the model’s state space. We discuss a check
that could reduce state space explosion in the following section.
4.4 Scalability
Thus far, we have assumed that the control logic only contained
the speciﬁed functionality. In this section, we evaluate SABOT’s
accuracy and performance given a PLC that has functionality for
additional independent subsystems in place. In practice, a large fa-
Speciﬁed
Container Filling
Motor Control
Trafﬁc Signal
pH Neutralization
Railway Switching
Run time (s) Calls
96
138
485
174
2057
3.28
4.70
18.28
6.49
75.70
FP
0
1
0
0
0
Table 6: Run time (s), checker calls, and false positives for
checks against the monolithic control logic.
cility such as a nuclear power plant or waste water treatment facil-
ity will be broken down into subsystems, each of which will have a
dedicated PLC. These PLCs are in turn coordinated by higher levels
of supervisory control. However, this does not guarantee that ad-
ditional unspeciﬁed functionality will not be run on the same PLC.
Thus, we wish to evaluate SABOT under such a scenario.
In this section, we augment SABOT with a simple dependency
analysis that separates the control logic into separate models for
each independent subsystem. The subsystem models are constructed
as follows. First, the variable dependency graph for the control
logic is constructed. Second, an undirected edge is added between
any two output variables with a common dependency. Third, a
new graph is constructed using just the output variables and newly
added undirected edges. A single subsystem model is constructed
for each strongly connected component in this graph. The speciﬁ-
cation is then tested against each model independently.
To simulate independent subsystems running in the same PLC,
we combined all ﬁve test systems into a single monolithic control
logic. We then ran SABOT with the dependency analysis against
the monolithic logic with each of the ﬁve speciﬁcations. Ideally, in
each run, SABOT would match the speciﬁcation only to the correct
corresponding subsystem. There are two types of errors that can
occur here. First, a speciﬁcation could be mapped to an incorrect
subsystem. Second, an incorrect dependency analysis may occur,
e.g., if variables in multiple subsystems share a dependency. While
this was not an issue in our experiments, we defer a more sophisti-
cated dependency analysis algorithm to future work.
The performance and accuracy results are shown in Table 6.
Only a single false positive mapping occurred from the speciﬁca-
tion for motor control onto the implementation of railway switch-
ing. Unlike the performance results in Section 4.3, here, the railway
switching has the highest running time. This is due to the large
number of incremental false positive mappings that occur when
testing the railway switching speciﬁcation against pH neutraliza-
tion, which led to many false positive variable mappings being re-
jected by the incremental mapping algorithm. Nevertheless, in all
cases, the run times are still within the limits found in Section 4.3.
4.5 Accuracy Improvements
In this section, we consider using two reﬁnements to improve
the accuracy results found in Section 4.1. First, we include the
dependency analysis introduced in the previous section in hopes of
improving the results for the parallel variation in pH neutralization.
Second, we introduce a method to safeguard a speciﬁcation against
the presence of emergency stop systems, a common feature.
447Neutralization
Valve