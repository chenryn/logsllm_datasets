then the execution ceases immediately. Furthermore, the execution chains that would
begin from positions 1, 3, 5, and 6, can now be skipped altogether.
98
M. Polychronakis, K.G. Anagnostakis, and E.P. Markatos
Table 1. Details of the client-initiated network trafﬁc traces used in the experimental evaluation
Name
HTTP
NetBIOS
Microsoft-ds
FORTH-ICS
Port Number
80
137–139
445
all
Number of streams
6511815
1392679
2585308
668754
Total size
5.6 GB
1.5 GB
3.8 GB
821 MB
Kernel Memory Accesses. The network-level detector does not have any informa-
tion about the vulnerable process targeted by a particular attack. As already discussed,
the emulator assumes that all accesses to any memory address are valid. In reality,
only a small subset of these memory accesses would have succeeded, since the hypo-
thetical vulnerable process would have mapped only a small subset of pages from the
whole 4GB virtual memory space. Thus, memory writes outside the input buffer or
the stack proceed normally and the emulator tracks the written values, while memory
reads from previously unknown locations are executed without returning any mean-
ingful data, since their contents are not available to the network-level detector. The
execution cannot stop on such unknown memory references, since otherwise an at-
tacker could hinder detection by interspersing instructions that read arbitrary data from
memory locations known in advance to belong to the address space of the vulnerable
process [22].
The network-level emulation approach assumes that the whole 4GB of virtual mem-
ory may be accessible by the shellcode. However, user-level processes cannot access
the address space of the OS kernel. In Linux, the kernel address space begins at address
0xC0000000 and takes up the whole upper 1GB of the 4GB space. In Windows, the
upper half of the 4GB space is allocated for kernel use. A functional shellcode would
never try to access a memory address in the kernel address space, so any instructions in
random code that accidentally try to access some kernel memory location can be con-
sidered illegal. For simplicity, the emulator assumes as legal all memory accesses up
to 0xBFFFFFFF, i.e., excludes only the common kernel space of both OSes, since it
cannot know in advance which OS is being targeted.
5 Experimental Evaluation
5.1 Deriving a Robust Detection Threshold
The detection algorithm is based on a strict behavioral pattern that matches some execu-
tion characteristics of non-self-contained polymorphic shellcode. In order to be effec-
tive and practically applicable, a heuristic based on such a behavioral pattern should not
falsely identify benign data as polymorphic shellcode. In this section, we explore the
resilience of the detector to false positives using a large and diverse attack-free dataset.
We accumulated full payload packet traces of frequently attacked ports captured
at FORTH-ICS and the University of Crete across several different periods. We also
captured a two hour long trace of all the TCP trafﬁc of the access link that connects
FORTH-ICS to the Internet. Since we are interested in client-initiated trafﬁc, which
contains requests to network services, we keep only the packets that correspond to the
Emulation-Based Detection of Non-self-contained Polymorphic Shellcode
99
Alpha2
Avoid UTF8/tolower
Encode
random binary
random printable
network traces
random ascii
6000
5000
4000
3000
2000
1000
s
n
o
i
t
c
u
r
t
s
n
i
t
d
e
u
c
e
x
E
1
2
3
4
5
6
7
8
9
10
11
12
Number of wx−instructions
0
0
64
128
256
448
192
Encrypted payload size
320
384
512
576
1
0.1
0.01
0.001
0.0001
l
)
e
a
c
s
g
o
l
(
s
m
a
e
r
t
s
f
o
%
0
0
Fig. 8. Number of wx-instructions found in be-
nign streams
Fig. 9. Number of instructions required for
complete decryption
client-side stream of each TCP ﬂow. For large ﬂows, which for example may corre-
spond to ﬁle uploads, we keep the packets of the ﬁrst 64KB of the stream. Trace details
are summarized in Table 1. Note that the initial size of the FORTH-ICS trace, before ex-
tracting the client-initiated only trafﬁc, was 106GB. We also generated a large amount
of artiﬁcial traces using three different kinds of uniformly distributed random content:
binary data, ASCII-only data, and printable-only characters. For each type, we gener-
ated four million streams, totaling more than 160GB of data.
We tested our prototype implementation of the detection heuristic with second-stage
execution enabled using the above dataset, and measured the maximum number of acci-
dental wx-instructions among all execution chains of each stream. The execution thresh-
old of the emulator was set to 65536 instructions. Figure 8 presents the results for the
different types of random data, as well as for the real network streams (the category
“network traces” refers collectively to all network traces listed in Table 1). We see that
random binary data exhibit the largest number of wx-instructions, followed by printable
data and real network trafﬁc. From the four million random binary streams, 0.8072%
contain an execution chain with one wx-instruction, while in the worst case, 0.00014%
of the streams resulted to seven wx-instructions. In all cases, no streams were found to
contain an execution chain with more than seven wx-instructions.
Based on the above results, we can derive a lower bound for the number of wx-
instructions (parameter X of the detection heuristic) that should be found in an execu-
tion chain for ﬂagging the corresponding code as malicious. Setting X=8 allows for no
false positives in the above dataset. However, larger values are preferable since they are
expected to provide even more improved resilience to false positives.
5.2 Non-self-contained Shellcode Detection
CPU execution threshold. As discussed in Sec. 4.1, the execution of non-self-contained
shellcode will exhibit several wx-instructions, due to the execution of the decrypted pay-
load. However, a crucial observation is that most of these wx-instructions will occur after
the end of the decryption process, except perhaps any self-modiﬁcations during the boot-
strap phase of the decryptor [22,33]. Thus, the emulator should execute the shellcode for
long enough in order for the decryption to complete, and then for the decrypted payload
100
M. Polychronakis, K.G. Anagnostakis, and E.P. Markatos
to execute, for actually identifying the presence of wx-instructions. This means that the
CPU execution threshold should be large enough to allow for the complete execution of
the shellcode.
The number of executed instructions required for the complete decryption of the
payload is directly related to i) the decryption approach and its implementation (e.g.,
decrypting one vs. four bytes at a time), and ii) the size of the encrypted payload.
We used off-the-shelf polymorphic shellcode engines that produce non-self-contained
shellcode to encrypt payloads of different sizes. We generated mutations of a hypo-
thetical payload ranging in size from 64 to 576 bytes, in 64-byte increments, using
the Avoid UTF8/tolower [1, 27], Encoder [11, 26], and Alpha2 [33] shellcode engines.
The size of the largest IA-32 payload contained in the Metasploit Framework v3.0,
windows/adduser/reverse http, is 553 bytes, so we chose a slightly larger
value of 576 bytes as a worst case scenario.
Figure 9 shows the number of executed instructions for the complete decryption
of the payload, for different payload sizes. As expected, the number of instructions
increases linearly with the payload size, since all engines spend an equal amount of
instructions per encrypted byte during decryption. Alpha2 executes considerably more
instructions compared to the other two engines, and in the worst case, for a 576-byte
payload, takes 6374 instructions to complete. Thus, we should choose an execution
threshold signiﬁcantly larger than the 2048 instructions that is suggested in the existing
network-level emulation approach [22].
Setting a threshold value for X. A ﬁnal dimension that we need to explore is the
minimum number of wx-instructions (X) that should be expected during shellcode ex-
ecution. As we have already mentioned, this number is directly related to the size of
the encrypted payload: the smaller the size of the concealed code, the fewer the number
of wx-instructions that will be executed. As shown in the previous section, the thresh-
old value for X should be set to at least 8, in order to avoid potential false positives.
Thus, if the execution of the decrypted payload would result to a comparable number
of wx-instructions, then we would not be able to derive a robust detection threshold.
Fortunately, typical payloads found in remote exploits usually consist of much more
than eight instructions. In order to verify the ability of our prototype implementation
to execute the decrypted payload upon the end of the decryption process, we tested it
with the IA-32 payloads available in Metasploit. Note that although the network-level
emulator cannot correctly execute system calls or follow memory accesses to addresses
of the vulnerable process, whenever such instructions are encountered, the execution
continues normally (e.g., in case of an int 80 instruction, the code continues as if
the system call had returned). In the worst case, the linux/x86/exec family of
payloads, which have the smallest size of 36 bytes, result to the execution of 14 instruc-
tions. All other payloads execute a larger number of instructions. Thus, based on the
number of executed instructions of the smallest payload, we set X=14. This is a rather
conservative value, given that in practice the vast majority of remote exploits in the wild
are targeting Windows hosts, so in the common case the number of wx-instructions of
the decrypted payload will be much higher.
Emulation-Based Detection of Non-self-contained Polymorphic Shellcode
101
Payloads targeting Linux hosts usually have a very small size due to the direct invo-
cation of system calls through the int 80 instruction. In contrast, payloads for Win-
dows hosts usually involve a much higher number of instructions. Windows shellcode
usually does not involve the direct use of system calls (although this is sometimes pos-
sible [5]), since their mapping often changes across different OS versions, and some
crucial operations, e.g., the creation of a socket, are not readily offered through system
calls. Instead, Windows shellcode usually relies on system API calls that offer a wide
range of advanced functionality (e.g., the ability to download a ﬁle from a remote host
through HTTP using just one call). This, however, requires to ﬁrst locate the necessary
library functions, which involves ﬁnding the base address of kernel32.dll, then
resolving symbol addresses, and so on. All these operations result to the execution of a
considerable number of instructions.
In any case, even a conservative value for X=14, which effectively detects both Linux
and Windows shellcode, is larger enough than the seven accidental wx-instructions that
were found in benign data, and thus allows for a strong heuristic with even more im-
proved resilience to false positives.
5.3 Processing Throughput
In this section, we evaluate the raw processing throughput of the proposed detection
algorithm. We have implemented the new detection heuristic on our existing prototype
network-level detector [22], which is based on a custom IA-32 CPU emulator that uses
interpretive emulation. We measured the user time required for processing the network
traces presented in Table 1, and computed the processing throughput for different values
of the CPU execution threshold. The detector was running on a PC equipped with a
2.53GHz Pentium 4 processor and 1GB RAM, running Debian Linux (kernel v2.6.18).
Figure 10 presents the results for the four different network traces.
As expected, the processing throughput decreases as the CPU execution threshold
increases, since more cycles are spent on streams with very long execution chains or
seemingly endless loops. We measured that in the worst case, for port 445 trafﬁc, 3.2%
of the streams reach the CPU execution threshold due to some loop when using a thresh-
old higher than 8192. This percentage remains almost the same even when using a
threshold as high as 131072 instructions, which means that these loops would require a
prohibitively large number of iterations until completion.
Overall, the runtime performance has been slightly improved compared to our pre-
vious network-level emulation prototype. Although the algorithmic optimizations pre-
sented in Sec. 4.2 offer considerable runtime performance improvements, any gain is
compensated by the more heavy utilization of the virtual memory subsystem and the
need to frequently undo accidental self-modiﬁcations in the input stream.
Port 80 trafﬁc exhibits the worst performance among all traces, with an almost con-
stant throughput that drops from 12 to 10 Mbit/s. The throughput is not affected by the
CPU execution threshold because i) the zero-delimited chunk optimization2 is not ef-
fective because HTTP trafﬁc rarely contains any null bytes, and ii) the execution chains
2 Given that in the vast majority of exploits the attack vector cannot contain a null byte, the
detector skips any zero-byte delimited regions smaller than 50 bytes, since they are too small
to contain a functional polymorphic shellcode [22].
102
M. Polychronakis, K.G. Anagnostakis, and E.P. Markatos
)
s
/
t
i
b
M
(
t
u
p
h
g
u
o
r
h
T
90
80
70
60
50
40
30
20
10