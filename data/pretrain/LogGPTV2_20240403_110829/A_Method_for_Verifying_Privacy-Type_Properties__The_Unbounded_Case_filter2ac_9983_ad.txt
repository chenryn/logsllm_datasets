conditional is safe according to our deﬁnition.
Note that trivial conditionals required by the grammar are
safe and will thus not get in the way of our analysis.
two agents are having an honest,
We can now formalize the notion of association, which
expresses that
intended
interaction (i.e. the attacker essentially did not interfere in their
communications). For an annotated trace ta and annotations a
and a′, we denote by ta∣a,a′ the subsequence of ta that consists
of actions of the form α[a] or α[a′].
Deﬁnition 13: Two agents A1(k1, n1) and A2(k2, n2) are
associated in (ta, φ) if:
● the agents are dual, i.e. A1 ≠ A2 and k1 = k2;
● the interaction ta∣A1(k1,n1),A2(k2,n2) is honest for φ.
Example 15: Continuing Example 10, the agents I(k′, n′
I)
and R(k′, n′
R) are associated in (ta, φ0).
We can ﬁnally state our second condition:
Deﬁnition 14: The protocol Π is well-authenticating if, for
Π;∅) ta.τthen[A(k,n1)]
(cid:18)(cid:18)(cid:18)(cid:18)(cid:18)(cid:18)(cid:18)(cid:18)(cid:18)→(P; φ)
either the last action corresponds to a safe conditional, or there
any execution (Mid
exists A′ and n2 such that (i) A(k, n1) and A′(k, n2) are
associated in (ta, φ), and (ii) A′(k, n2) is only associated with
A(k, n1) in (ta, φ).
Intuitively, this condition does not require anything for safe
conditional as we already know that they cannot leak new
information to the attacker (he already knows their outcome).
For unsafe conditionals, condition (i) requires that whenever
an agent a evaluates them positively (i.e. he does not abort the
protocol), it must be the case that this agent a is so far having
an honest interaction with a dual agent a′. Indeed, as discussed
in introduction, it is crucial to avoid such unsafe conditionals
to be evaluated positively when the attacker is interfering
571571
because this could leak crucial information. Condition (ii) is
needed to prevent from having executions where an agent is
associated to several agents, which would break unlinkability.
D. Soundness w.r.t. unlinkability and anonymity
Our main theorem establishes that the previous two condi-
tions are sufﬁcient to ensure unlinkability and anonymity.
Theorem 1: Consider a protocol Π = (k, nI , nR,I,R)
and some identity names id ⊆ k. If the protocol is well-
Note that, when id = ∅, we have Mid
Π ≈ MΠ and our
conditions coincide on Mid
Π and MΠ. We thus have as a
corollary that if MΠ ensures well-authentication and frame
authenticating and ensures frame opacity,
unlinkability and anonymity w.r.t. id.
then Π ensures
opacity, then Π is unlinkable.
Before establishing this theorem in the next section, let us
comment on its practical impact. We summarize the result
of the confrontation of our method to our case studies in
Figure 3, focusing on unlinkability. Detailed descriptions of
those protocols and discussions are in Section VII. We remark
that our conditions have proven to be tight enough for all our
case studies: when a condition fails to hold, we could always
discover a real attack on unlinkability. Most of the positive
results (when unlinkability holds) and all attacks are new. Note
that all positive results were established automatically using
our tool UKano (which is based on ProVerif).
Protocol
Feldhofer
Hash-Lock
LAK (stateless)
Fixed LAK
BAC
BAC/PA/AA
PACE (faillible dec)
PACE (as in [29])
PACE
PACE with tags
Frame
opacity
Well-
auth.


−



−
−
−











Unlinkability
safe
safe
attack
safe
safe
safe
attack
attack
attack
safe
Fig. 3. Summary of our case studies. We note  for a condition automatically
checked using UKano and  when the condition does not hold.
V. PROOFS
We provide in this section the proof of Theorem 1. Our
main argument consists in showing that, for any execution of
Π, there is an indistinguishable execution of SΠ.
Mid
Π, MΠ and SΠ, it will be more
Instead of working with Mid
of I and R. Intuitively, ground conﬁgurations correspond to
Π, MΠ or SΠ by
the annotated multisets obtained from Mid
convenient to work with ground conﬁgurations of the protocol
under consideration, which are annotated multisets of instances
launching a few sessions (performing τ actions corresponding
to replication and names creations) and then removing the
initial replicated process to keep only the instantiated agents.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:24 UTC from IEEE Xplore.  Restrictions apply. 
We ﬁrst deﬁne ground conﬁguration annotations as sets of
annotations satisfying the following conditions:
● in all annotations A(k, n), the session parameters n are
names and the identity parameters k are made of names
or constants id0;
● no name appears both as identity and session parameter
in any two annotations;
● no two annotations share a session parameter;
● two annotations either have the same identity parameters,
or do not share any identity parameter at all.
annotation.
Then, a ground conﬁguration is any annotated multiset of the
PI ={I{k ↦ l, nI ↦ m}[I(l, m)] ∣ I(l, m)∈ S }
form PI ⊔PR where
and similarly for PR, where S is a ground conﬁguration
We shall say that a ground conﬁguration P is single-session
A(k, n) and A(k, m) occur in P then n = m) and id0 does
Mid
also be obtained from SΠ.
not occur in it. Any ground conﬁguration can be reached from
Π; single-session ground conﬁgurations are those which can
if there is at most one agent per identity and role (i.e. if
We now introduce formally the notion of renaming of agents
that we shall use in the proof, before presenting a few key
results that will ﬁnally allow us to prove our theorem.
Deﬁnition 15: A renaming of agents (denoted by ρ) is
an injective mapping from annotations to annotations which
preserves roles (i.e. initiator (resp. responder) annotations are
mapped to initiator (resp. responder) annotations) such that the
image of a ground conﬁguration annotation is still a ground
conﬁguration annotation.
actions of the trace.
If ta is an annotated trace whose annotations are all in
dom(ρ), we deﬁne taρ as the annotated trace obtained from ta
by replacing any annotation a by ρ(a), without changing the
If ρ(A(k, n)) = A(k′, n′), the renaming σ induced by ρ
on A(k, n) is the (injective) mapping such that σ(k)= k′ and
σ(n)= n′. Given a ground conﬁgurationP ={Ai[ai]}i whose
annotations are in dom(ρ), we deﬁne Pρ = {Aiσi[ρ(ai)]}i
where σi is the renaming induced by ρ on ai.
Note that the renaming on parameters induced by a renam-
ing of agents may conﬂict: this happens, for example, when
ρ(A(k, n)) = A(k1, n) and ρ(A(k, m)) = A(k2, m). This
each handle w ∈ dom(φ) is uniquely associated in ta to an
means, in particular, that we cannot meaningfully deﬁne φρ
for a frame φ. However, given an execution ta that yields φ,
output, and thus an agent aw. We can then deﬁne φρ (omitting
the mention of ta as a slight abuse of notation) as
{ w ↦ uσ ∣ w ∈ dom(φ), σ induced by ρ on aw }.
A. Control is determined by associations
We show that the outcome of tests is entirely determined by
associations. This will be useful to show that, if we modify
an execution (by renaming agents) while preserving enough
associations, then the control ﬂow is left unchanged.
572572
Proposition 2: Let Π be a well-authenticating protocol,
and P a ground conﬁguration of Π such that
(cid:18)(cid:18)(cid:18)(cid:18)(cid:18)(cid:18)(cid:18)(cid:18)→(P ′; φ)
(P;∅) ta.τx[A(k,n1)]
and the last action is performed by an unsafe conditional.
We have τx = τthen iff there exists n2 such that A(k, n2) is
associated to A(k, n1) in (ta, φ).
Proof. The ⇒ direction is a direct consequence of well-
authentication. For the other direction, we observe that (up
to changes of recipes that do not affect the resulting mes-
sages) if two agents are associated then they are execut-
trace of Π modulo a renaming of param-
ing the honest
eters, thus the considered test must be successful. Assum-
ing that a1 = A(k, n1) and a2 = A(k, n2) are associ-
ated in (ta, φ), we shall prove that τx = τthen. By hy-
pothesis, ta∣a1,a2
the form out(c1, w1).in(c′
n, Mn)
Miφ⇓=E wiφ for all 1≤ i≤ n. Consider ta′ obtained from ta
trace can still be executed by (P;∅) and yields the same
conﬁguration (P ′; φ). But now ta′∣a1,a2 is a self-contained
annotated a1 and a2 in P, we have
by replacing each recipe Mi by wi. Since this change of
recipes does not affect the resulting messages, the modiﬁed
1, M1) . . . out(cn, wn).in(c′
with possibly an extra output at the end, and are such that
if P and Q are the processes respectively
its observable actions are of
is honest:
execution,
i.e.
({P[a1], Q[a2]};∅) ta′∣a1 ,a2
(cid:18)(cid:18)(cid:18)(cid:18)→(P ′′; φ′′).
In that execution, everything is deterministic (up to the equa-
tional theory) and thus the execution is actually a preﬁx of
the honest execution of Π, up to a bijective renaming of pa-
rameters (note that P and Q do not share session parameters).
Thus the next action, i.e. the conditional performed by a1, is
a τthen.
◻
B. Invariance of frame idealizations
In general, a renaming of agents can break executability;
typically, mapping two dual agents to agents of different iden-
tities breaks the ability of these two agents to communicate
successfully. Even when executability is preserved, parameters
change (so do names) and thus frames are modiﬁed. However,
frame opacity immediately implies that a renaming of agents
has no effect on the resulting idealized frames, because the
renaming has no effect on the labels associated to the agent
outputs. Therefore, we have the following result (proof in
Appendix B).
Proposition 3: Let Π be a protocol ensuring frame opacity.
Let P be a ground conﬁguration of Π, ta an annotated trace,
and ρ an arbitrary renaming of agents. If (P;∅) ta(cid:18)→(P1; φ1)
and (Pρ;∅) taρ(cid:18)→(P2; φ2), then [φ1]ideal =[φ2]ideal.
C. A sufﬁcient condition for preserving executability
We can now state a key lemma, identifying a class of
renamings which yields indistinguishable executions.
Deﬁnition 16: Agents a and a′ are connected in (ta, φ)
if they are associated in (ta0, φ) for some preﬁx ta0 of ta
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:24 UTC from IEEE Xplore.  Restrictions apply. 
that contains at least one τthen action of an unsafe conditional
annotated with either a or a′.
Lemma 1: Let Π be a well-authenticating protocol ensuring
frame opacity, and ta be an annotated trace executed by some
ground conﬁguration P:(P;∅) ta(cid:18)→ K
annotations of P, and such that ρ(a) and ρ(a′) are dual iff a
and a′ are connected in (ta, φ(K)). Then we have:
φ(K)∼ φ(Kρ).
Let ρ be a renaming of agents whose domain contains the
(Pρ;∅) taρ(cid:18)→ Kρ
and
Proof. We shall focus on establishing that taρ is executable;
once this is known, static equivalence is a direct consequence
of Proposition 3. For any preﬁx ta0 of ta, we prove that:
(Pρ;∅) ta0ρ(cid:18)(cid:18)→ K0ρ
with an additional invariant: ρ(a) and ρ(a′) are associated in
(ta0ρ, φ(K0ρ)) iff a and a′ are associated in(ta0, φ(K0)) and
connected in(ta, φ(K)). We proceed by induction on ta0. If it
induction hypothesis, we have K0 (resp. K0ρ) resulting from
is empty, then ta0ρ can also obviously be executed. For empty
traces, association coincides with duality, thus the hypothesis
on ρ implies our invariant.
Consider now a preﬁx of ta of the form ta0.α[a]. By
the execution of ta0 by P (resp. ta0ρ by Pρ) and our invariant
φ(K0) ∼ φ(K0ρ). The action α performed by the process
annotated a in P may be an input, an output, or a test. In any