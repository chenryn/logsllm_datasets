In the third and fourth case, the value is set as the return
value (line 4) of read_from_file(). This return value car-
ries the name length at this point. In turn, the value length
is set in line 3 as the ﬁrst argument of fread(), which
is a user-controlled source. Retracing the data source for
each step, we have now found a data ﬂow between a user-
controlled source and a sensitive sink. For the ﬁrst and sec-
ond case, we have to trace the value len to the parameter of
wrapper(), where it is renamed to the_len (line 7). Apart
from the diﬀerent variable names, the same transitions as in
third and fourth case happen from this point on.
Once we found a data connection between a user-controlled
source and a sensitive sink, we enumerate all the control
ﬂows spanned by this data ﬂow. This is an important dis-
tinction, since the data ﬂow does not include statements
which do not modify the variables in question, but are nev-
ertheless executed on the path. Next, we have to ﬁnd the
security mechanisms in each control-ﬂow path. Each transi-
tion in a data ﬂow is caused by a variable transferring data.
Thus, an edge between two data-ﬂow nodes can be labeled
with that variable. Naturally, this label also overarches the
control ﬂow between the two data-ﬂow nodes. To ﬁnd secu-
rity mechanisms, we now follow the uses of the overarching
variable in the speciﬁc control-ﬂow range. Essentially, when
these variables occur in the constraint of an if statement,
we assume it to be a guard statement. Sanitizations on the
other hand depend on the respective types of source and
sink, which is why specialized methods would be necessary
to recognize them [21].
Regarding the running example, consider the data ﬂow for
reading the ﬁrst ﬁle without using a wrapper function (line
20). The control ﬂow between the memcpy() and the call to
read_from_file traverses line 29 and (potentially) the lines
27-24 as well—even though in practice, only line 24 will be
traversed, since the execution would be aborted in line 26.
Next, line 20 is traversed, which includes a call. However,
since the value stems from a return statement, one has to
retrace the function from the end, starting at line 4 and
ending in line 3. Thus, the control ﬂow for this source-sink
pair consists of the lines (3, 4, 20, 24, 29). Of those, only line
24 holds a check and since it is overarched by the variable
in question (len), it is considered a security mechanism.
Instrumenting
2.4.4
Once the potentially vulnerable control ﬂow and supported
security mechanisms are found, we have to transform the un-
derlying source code such that it is actually vulnerable. We
start with a more careful analysis of the mechanism at hand
and its surroundings, to enumerate the number of possible
instrumentations for disabling this speciﬁc security mecha-
nism. For example, for a guard statement, we have to ﬁnd
out whether is supposed to be triggered or not. At this
point, we use heuristics depending on the presence of re-
turn or exit statements, setting of warning or error values,
or signals and exceptions. This way, we can conservatively
remove security checks, which would abort the execution
anyways. Thus the program should run just as before on
benign inputs. However, the program will not reject a mal-
formed input anymore, but propagate it to the sensitive sink.
Once the set of applicable instrumentations is established,
our prototype picks one at random. Using the source code
location information from the graph database, we can now
apply the source code transformation on the source code.
In our running example, we could modify line 24 to read
if(wrapper == 0xDEADC0DE && len > 256) {, which would
mean that the constraint never evaluates to true, which in
turn allows values larger than 256 to be passed to the mem-
cpy(). This would result in a stack buﬀer overﬂow, which in
turn means that we have inserted a bug that is most likely
exploitable.
The high-level description of our algorithm does not ac-
count for two optimizations: First, once it is known whether
a traversed subpath for a speciﬁc variable ends in a user-
controlled source or not, one can cache this result to prevent
traversing this subpath again. Second, to insert another bug,
one can reuse a found user-controlled source, the sensitive
sink and data-ﬂow paths between them, while choosing an-
other control-ﬂow path and another instrumentation.
One important metric for our tool would be the number
of potentially vulnerable paths it can ﬁnd. However, our
running example in Listing 2 was chosen to show that the
number of such paths can be quite misleading. In the exam-
ple, we connect the same sink (memcpy(), line 30) to the
same source (fread(), line 3) in two diﬀerent ways: once
through wrapper() and once through read_from_file() di-
rectly. However, since we can do so in two diﬀerent places,
one would have to count this as four diﬀerent data ﬂows,
even though only two of them perform diﬀerent steps. One
can see that each intermediary node in a data ﬂow could
potentiate the number of possible paths. The same is true
for the control ﬂow in between as well. Thus, while we re-
port the number of paths our tool can ﬁnd in the experiment
in Section 4.2, we consider the number of unique connected
source-sink pairs to be less meaningful. Furthermore, the
number of bugs we can insert depends on the number of po-
tentially vulnerable paths. But even if we could count them,
the number of potential instrumentations cannot be esti-
mated in a meaningful way. In the example from above, any
expression, which evaluates to false could be used. Given
that there is a sheer inﬁnite number of syntactic ways to do
that using diﬀerent variables, magic constants or arithmetic
operations, we refrain from giving a number at this point.
3.
IMPLEMENTATION
In this section, we further deepen the concepts introduced
in the previous section by explaining implementation-speciﬁc
details of our prototype EvilCoder, which we implemented
using Java on a machine running Debian 8 “Jessie”.
3.1
JOERN and Graph Database
Joern [36] is the central component of our prototype, thus
we begin by explaining its role in our workﬂow. It uses island
grammars [27] to parse C code (and to some extent C++
code) in a robust manner, meaning that it can for exam-
ple handle missing headers and non-compiling code. Natu-
rally, further analysis is hindered in such situations, but the
framework will usually succeed to create meaningful output
for such partially deﬁned code. The resulting code property
graphs, which encode the AST, control-ﬂow and data-ﬂow
information in annotated nodes and edges, is written into
the graph database Neo4J [28].
3.2 Functions Changing Their Parameters
As already mentioned, Joern does not take interproce-
dural data ﬂows into account. We rectify this in two steps:
ﬁrst, for each function, we analyze which of its parameters it
sets. Then, we augment a function’s data ﬂow to take into
account which of its subfunctions modify their arguments.
We modiﬁed ArgumentTainter, a tool shipped with Joern,
to allow batch processing functions. In the terminology of
the tool, a tainted argument is one which gets modiﬁed.
As mentioned above, subfunctions have to be analyzed
before the function calling them. This requires us to ﬁnd
function pointers and estimate their possible values. While
the former can be implemented eﬃciently, determining their
possible values at each callsite is a hard task in itself. To
be on the safe side, we consider all functions, which could
be assigned anywhere in the program, to be possible values
at that callsite. In essence, we use the same algorithms to
trace the data sources of function pointers that we use for
the remaining analysis. However, since a complete data-ﬂow
graph is not available yet, we walk along the control-ﬂow
graph and check for uses of function names and, naturally,
we stop at function-uses instead of user-controlled sources.
Note that the database still does not have data-ﬂow edges
from one function to another. To cross function boundaries
for interprocedural analysis, the algorithm we discuss in Sec-
tion 3.4 is necessary.
3.3 Preprocessing
Since we focus on vulnerabilities in C code, we do not
want our analysis to be hindered by preprocessor directives,
which could disrupt the C language semantics, e. g., with
conditional compilation.
Thus, we execute the preprocessor on the source code ﬁles
before parsing them with Joern. Given that there is a com-
piler ﬂag to do this, this seems like a trivial step. One might
218
overlook, however, that this requires building the applica-
tion, which in turn may require a non-trivial build conﬁgu-
ration. To solve this problem, we take a pragmatic approach:
we build the program using the provided conﬁguration, using
the --dry-run option of make, and record the used compiler
invocations. Then, we modify the would-be executed com-
mand lines to invoke the preprocessor instead of actually
compiling or linking.
3.4 Finding Potentially Vulnerable Source
Code Locations
We start by ﬁnding all user-controlled sources and sensi-
tive sinks. Given that we opted to search our way backwards
from a sink to a source, it would be suﬃcient to ﬁnd just the
sinks to start our search. However, having the sources pre-
determined as well allows us to decide quickly whether we
reached user-controlled data or not in later phases—simply
because we already made that decision upfront.
The algorithm we use to trace data-ﬂow information is
depicted in Listing 3. In essence, this algorithm gets a sen-
sitive sink as input and puts it into a queue. Then, for
each node in the queue, it computes the source for that
speciﬁc node and saves it in a tree-like structure. Once it
ﬁnds a node to be user-controlled, it can traverse this def-
inition tree back to the root to construct a data-ﬂow path
from a user-controlled source to a sensitive sink. Of course,
the actual algorithm has to be more careful to handle all the
edge-cases and to provide fallbacks, should Joern have mal-
formed output. Furthermore, it tracks the variable names of
every traversed data source. Obviously, the variable names
can change when one variable is assigned to another. How-
ever, they also change in the context of interprocedural anal-
ysis. This happens when a variable is passed as an argument
to a subfunction. In this case, it assumes the name of the
parameter in that subfunction. This is true in reverse, too,
so that when tracking the data sources of a parameter, the
variable assumes each name of the matching argument at
each callsite. However, it also happens, when a variable is
returned, in which case the name of the returned variable
becomes the name of the assigned variable and vice versa.
Contrary to the algorithm in Listing 3, our implementa-
tion allows to ﬁnd more than one user-controlled source. It
performs a breadth-ﬁrst search for the data sources of a cer-
tain node, using a queue to save nodes reached through data
ﬂows from the start node. Then, it subsequently pops the
ﬁrst node from the queue and adds nodes to the end of the
queue, which are reached by the popped node.
However, the possible complexity of C expressions makes
deciding which variables inﬂuences the current value, either
by modiﬁcation or by full assignment, non-trivial. This de-
cision is even more complex for interprocedural analysis. Es-
sentially, we distinguish ﬁve cases, which correspond to the
steps 1.3.1 to 1.3.5 in the algorithm:
1. Increment/Decrement:
E. g., ++a; or (my_struct.member_1)--;
2. Left-hand-side of arithmetic expression:
E. g., a = b + (c * 2); ⇒ b, c
3. Assigned as return-value of function-call:
4. Assigned as argument in function-call:
E. g., for strcpy(dst, src);, the data source for dst
is src. For functions given in the source code, we can
trace the data ﬂow from assignments to the param-
eter in question, which will then end up in another
parameter. For external functions, however, we use a
precomputed “data-transfer” lookup-table.
5. Assigned as parameter of a function:
When tracing the data source for the local variable a
in void f(int x) {a = x;}, the data ﬂow for a ends
at the parameter x. Thus, we ﬁnd all callsites of f,
e. g., f(y), and continue retracing the data ﬂow at y.
While we try our best to detect assignment-by-alias, we
can obviously only do so to a limited extent, as pointer alias-
ing is known to be a hard problem [13]. Certainly, there ex-
ist modern approaches, which are both reasonably accurate
and fast [17,18], but we deem our best-eﬀort approach to be
suﬃcient to introduce and demonstrate the concept.
As mention in Section 2, we consider ﬁles, network, com-
mand-line arguments, the standard input stream, and envi-
ronment variables to be user-controlled. Therefore, we mark
the respective arguments of the libc functions responsible
for these tasks as user-controlled sources.
Concerning the sensitive sinks, we focussed on spatial
memory errors as performed by the usual suspects like, e. g.
memcpy(), strncpy() or snprintf(). However, for informa-
tion leaks, we could also consider functions which transfer
data out of the application (e.g., fwrite(), printf(), or
send()) as sensitive. Similarly, functions like malloc() are
considered sensitive, as controlling their input could lead to
denial of service and more severe attacks.
3.5 Finding Control Flows
Now that we have found a data ﬂow between a user-
controlled source and a sensitive sink, we want to ﬁnd the
control ﬂow connecting the data ﬂow nodes. Recall that we
may have crossed function borders in the course of our anal-
ysis. Since a function can only be entered at its entry point
and left through an exit point2, like a return statement or
the function end, our search for the control ﬂow has to take
care to respect this property of functions. To this end, our
search has to be aware of the functions holding the current
pair of data-ﬂow nodes, and which function calls the other.
In practice, we actually want to ﬁnd all control ﬂows be-
tween two nodes in the found data ﬂow, instead of just one.
However, this can be done node-wise for each node in the
data-ﬂow graph, to a data structure like the one in Figure 3.
Note that the control ﬂow between the user-controlled
source and the sensitive sink may not stretch to the pro-
gram’s entry point, i. e., it may not cover all the instructions,
which have to be executed to later exploit the application.
3.6 Finding Security Mechanisms
Having collected the possible control ﬂows between the
user-controlled source and the sensitive sink, we can ﬁnd
the security mechanisms the application uses to secure this
data ﬂow. Since the data is deﬁned by the user-controlled
source, previous code cannot help to do so, just as no code
E. g., given c = f(a, b); and int f(int x, int y)
{int r = x+y; return r;}, one has to continue at r,
when looking for the data sources of c.
2Technically, with constructs like setjmp/longjmp or inline
assembly, one can violate this property. However, they ba-
sically annul the high-level semantics of the language.
219
Listing 3: High-Level Algorithm for Tracing Data-Sources
s i n k
s e n s i t i v e
I n p u t :
Output : Data−f l o w path from s e n s i t i v e
0 . queue = s e n s i t i v e
1 . w h i l e ( ! queue . i s e m p t y ( ) ) :
s i n k
s i n k t o u s e r−c o n t r o l l e d s o u r c e
1 . 1 node , v a r = queue . pop ( )
1 . 2 i f ( node . i s u s e r c o n t r o l l e d ( ) ) :
1 . 2 . 1 r e t u r n b a c k t r a c e d e f i n i t i o n t r e e o f n o d e t i l l s i n k ( d e f t r e e , node )
1 . 3 s w i t c h ( a s s i g n e d a s ) :
1 . 3 . 1 c a s e I n c r e m e n t / Decrement :
d a t a s o u r c e s = s e l f
1 . 3 . 2 c a s e L e f t−hand−s i d e o f a r i t h m e t i c e x p r e s s i o n :
d a t a s o u r c e s = data s o u r c e s o f
1 . 3 . 3 c a s e A s s i g n e d a s r e t u r n−v a l u e o f
1 . 3 . 4 c a s e A s s i g n e d a s argument
i n f u n c t i o n−c a l l :
d a t a s o u r c e s = data s o u r c e s o f a s s i g n m e n t s
r i g h t −hand−s i d e
f u n c t i o n−c a l l :
d a t a s o u r c e s = r e t u r n s t a t e m e n t s o f c a l l e d f u n c t i o n
t o p a r a m e t e r o f c a l l e d f u n c t i o n
1 . 3 . 5 c a s e A s s i g n e d a s p a r a m e t e r o f a f u n c t i o n :
d a t a s o u r c e s = data s o u r c e s o f argument a t
c a l l s i t e s o f
f u n c t i o n
1 . 4 d e f i n i t i o n t r e e [ node ] += d a t a s o u r c e s
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:2)(cid:6)(cid:7)(cid:8)(cid:6)(cid:2)(cid:9)
(cid:10)(cid:2)(cid:11)(cid:12)(cid:13)(cid:14)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:2)(cid:6)(cid:7)(cid:8)(cid:6)(cid:2)(cid:9)
(cid:10)(cid:2)(cid:11)(cid:12)(cid:13)(cid:14)(cid:16)(cid:17)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:2)(cid:6)(cid:7)(cid:8)(cid:6)(cid:2)(cid:9)
(cid:10)(cid:2)(cid:11)(cid:12)(cid:13)(cid:18)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:2)(cid:6)(cid:7)(cid:8)(cid:6)(cid:2)(cid:9)
(cid:10)(cid:2)(cid:11)(cid:12)(cid:13)(cid:18)(cid:16)(cid:17)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:2)(cid:6)(cid:7)(cid:8)(cid:6)(cid:2)(cid:9)
(cid:10)(cid:2)(cid:11)(cid:12)(cid:13)(cid:6)
(cid:1)(cid:2)(cid:3)(cid:2)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)
(cid:9)(cid:7)(cid:10)(cid:11)(cid:12)(cid:13)
(cid:1)(cid:2)(cid:3)(cid:2)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)
(cid:9)(cid:7)(cid:10)(cid:11)(cid:12)(cid:14)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:2)(cid:6)(cid:7)(cid:8)(cid:6)(cid:2)(cid:9)
(cid:10)(cid:2)(cid:11)(cid:12)(cid:13)(cid:15)
(cid:1)(cid:2)(cid:3)(cid:2)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)
(cid:9)(cid:7)(cid:10)(cid:11)(cid:12)(cid:16)
(cid:15)(cid:15)(cid:15)