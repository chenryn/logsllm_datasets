首先把ida目录中的dbgsrv文件夹中的linux_server64拷贝到Ubuntu的elf的文件夹下，这个elf是64位的所有用的是linux_server64，如果你调试的是32位的程序，你就需要拷贝linux_server
记得给他们权限，然后在终端运行，这个程序的作用就像是连接ida和虚拟机中elf的桥梁
然后再到ida中进行配置：
在菜单栏中选择：debugger-->process options
注意，application和input file 都是填写在虚拟机中的elf的路径，记得要加文件名
而directory 填写elf所在目录，不用加文件名
hostname是虚拟机的ip地址，port是默认的连接端口
parameter和password一般都不用填
设置好了以后点击ok
接着可以直接在反汇编视图中下断点，只要点击左边的小蓝点即可
这时按下快捷键F9，可以直接开始调试
按下快捷键F4，则直接运行到断点处停下
这个就是基本的各个功能区的介绍，上面是我比较喜欢的常用布局，和ida默认的不太一样，想要自定义添加一些视图的话，可以在debugger-->quick
debug view中添加
另外可以在Windows-->save desktop来保持当前的视图布局，以后就可以直接加载使用
下面介绍一些常用的快捷键
`F7` 单步步入，遇到函数，将进入函数代码内部  
`F8` 单步步过，执行下一条指令，不进入函数代码内部  
`F4` 运行到光标处（断点处）  
`F9` 继续运行  
`CTRL+F2` 终止一个正在运行的调试进程  
`CTRL+F7` 运行至返回,直到遇到RETN（或断点）时才停止.
知道了这些快捷键后，调试起来就比较容易了，ida调试有个比较方便的地方在于能直接看到函数的真实地址，下断点也非常直观易操作
## IDA-python
在IDA的最下面有个不起眼的Output Window的界面，其实是一个终端界面，这里有python终端和IDC终端
这里的python是2.7的版本，虽然老了点，但已经足够我们用了，在IDA的运用中，我们经常需要计算地址，计算偏移，就可以直接在这个终端界面进行操作，非常方便
* * *
当然上面说的只是很简单的python用法，真正的IDA-python的用法是这样的：
这里以简单的一道逆向题来做个例子
这个程序很简单，一开始来个for循环，把judge函数的内容全部异或0xc，这样就导致了程序一运行就会直接破坏掉judge函数
从而使得没法进行后面的flag判断
这里我们就需要写一个脚本来先把被破坏的内容还原，这里IDA提供了两种写脚本操作的方法，一种就是IDC脚本，一种就是python脚本
这里只简单的介绍IDA-python
而IDA-python通过三个python模块将python代码注入IDA中：
idaapi模块负责访问核心IDA API
idc模块负责提供IDA中的所有函数功能
idautils模块负责提供大量实用函数，其中许多函数可以生成各种数据库相关对象的python列表
所有的IDApython脚本会自动导入idc和idautils模块，而idaapi模块得自己去导入
这里贴上IDApython的[官方函数文档](https://www.hex-rays.com/products/ida/support/idapython_docs/)，这里包含了所有函数，值得一看
针对以上的题目，我们只需要做一个脚本，指定judg函数的0-181范围的字节异或0xc，即可恢复
    judge=0x600B00
    for i in range(182):
        addr=0x600B00+i
        byte=get_bytes(addr,1)#获取指定地址的指定字节数
        byte=ord(byte)^0xC
        patch_byte(addr,byte)#打patch修改字节
在菜单栏中file-->script file，加载python脚本
接着在judge函数中undefined掉原来的函数，在重新生成函数（快捷键p），就可以重新f5了  
脚本中出现的函数都是已经封装在idc模块中的，具体可查官方文档
这只是一个简单的IDApython的使用例子，实际上这个功能非常强大，能弄出非常骚的操作
## 打PATCH
打patch，其实就是给程序打补丁，本质上是修改程序的数据，指令等，这在CTF中的AWD赛制中经常用到，发现程序漏洞后马上就要用这个功能给程序打好patch，防止其他队伍攻击我们的gamebox
这里，我是用一个叫keypatch的插件进行操作的，IDA自带的patch功能不太好用
### 安装keypatch
这个很简单，教程在[github](https://github.com/keystone-engine/keypatch)就有
下载Keypatch.py复制到插件目录
**IDA 7.0\plugins\Keypatch.py**
下载安装keystone python模块，64位系统只需要安装这一个就行
****
安装好后，你就会发现这里有个keypatch的选项
### 修改程序指令
如果我们要修改程序本身的指令，怎么做呢
如图，我们要修改63h这个值
将鼠标指向改行，按快捷键Ctrl+Alt+K
直接输入汇编语句即可修改，打好patch后效果如图：
这里会生成注释告诉你，这里打过patch，非常人性化
接着还要在菜单栏进行设置才能真正使得patch生效
这样一来，原来的程序就已经被修改了
### 撤销patch
如果不小心打错了patch，就可以在这里进行撤销上一次patch的操作了
但是如果打了很多次patch，不好分清该撤销哪一次的patch，那么可以在菜单栏中打开patched bytes界面
看到所有的patch，要撤销哪一个就右击选择 revert
## IDA导出数据文件
在菜单栏中，这里有个选项可以生成各种不同的输出文件
这里简单的介绍前两个文件，后面的大家可以自己去生成测试一下用途，我这里就不详细介绍了
.map文件描述二进制文件的总体结构，包括与构成改二进制文件的节有关的信息，以及每个节中符号的位置。
.asm文件，也就是汇编了，直接能导出ida中反汇编的结果，这个非常实用，有的时候在逆向中经常遇到大量数据加解密的情况，如果在从IDA中一个个慢慢复制可就太没效率了，直接导出生成asm，在里面复制数据快很多
# IDA常见命名意义
IDA经常会自动生成假名字。他们用于表示子函数，程序地址和数据。根据不同的类型和值假名字有不同前缀
sub _指令和子函数起点  
locret_ 返回指令  
loc _指令  
off_ 数据，包含偏移量  
seg _数据，包含段地址值  
asc_ 数据，ASCII字符串  
byte _数据，字节（或字节数组）  
word_ 数据，16位数据（或字数组）  
dword _数据，32位数据（或双字数组）  
qword_ 数据，64位数据（或4字数组）  
flt _浮点数据，32位（或浮点数组）  
dbl_ 浮点数，64位（或双精度数组）  
tbyte _浮点数，80位（或扩展精度浮点数）  
stru_ 结构体(或结构体数组)  
algn _对齐指示  
unk_ 未处理字节
IDA中有常见的说明符号，如db、dw、dd分别代表了1个字节、2个字节、4个字节
# IDA反编译报错
目前来说， 我遇到的反编译报错的情况，一般是两种
  * 一是由于程序存在动态加密，导致程序的某些代码段被修改，从而反编译出错，这种情况，就需要去使用IDA-python解密一波，再进行F5反汇编
  * 二是由于某些玄学问题，直接提示了某个地方出错，一般来说，就按照IDA的提示，去进行修改
比如，出现如下报错：
那我们就去找413238这个地址的地方，提示是说sp指针的值没有被找到，说明是这里出错了，那么就去修改sp的值，修改方法如下：
也可以使用快捷键 Alt+K
有的时候，遇到的这种报错
就尝试着把报错的地址的汇编语句改一哈，改成nop，就可以解决问题
目前来说，我遇到报错的情况不多，一般都可以通过以上方法解决
# 配置IDA
在ida的根目录的cfg文件夹是专门用来存储配置文件的
ida的主配置文件为ida.cfg，另外的还有idagui.cfg，idatui.cfg这两个配置文件对应IDA的GUI配置和文本模式的版本
**一、ida.cfg**
该文件包含了option-->general中的所有选项的配置，可以通过选项中的描述在配置文件总找到相应的选项
这里举几个例子：
`SHOW_AUTOCOMMENTS` 表示是否自动生成汇编指令的注释
`GRAPH_SHOW_LINEPREFIXES` 表示是否在流程控制视图中显示地址
`VPAGESIZE`
表示内存调整参数，当处理非常大的输入文件时，IDA可能报告内存不足而无法创建新数据库，在这种情况下增大该参数，重新打开输入文件即可解决问题
`OPCODE_BYTES` 表示要显示的操作码字节数的默认值
`INDENTATION` 表示指令缩进的距离
`NameChars` 表示IDA支持的变量命令使用的字符集，默认是数字+字母还有几个特殊符号，如果需要添加就改变该参数
**二、idagui.cfg**
这个文件主要配置默认的GUI行为，键盘的快捷键等，这个很少需要修改，不做过多介绍。感兴趣的可以自己打开该文件观察，并不难懂，改改快捷键还是很容易的
**三、idatui.cfg**
这个似乎更加不常用。。。不多说了
需要注意的是，以上三个文件是默认配置，也就是说，每次打开创建新的ida数据库的时候，都会以这三个配置文件的设置进行创建，之前临时在菜单栏的设置就会消失，要永久设置ida的配置，就改这三个文件
但，凡是都有例外，在option-->font和option-->colors这两个选项是全局选项，修改一次就永久生效的，不用在以上三个配置文件中改
# 最后
通过这一次系统地去学IDA，发现这个软件真的是非常厉害，我上面也只是简单地记录了平时比较常用的功能和操作，IDA还有很多高级的开发技巧，甚至你还能自定义模块和加载器等，也能自己制作ida的插件，在这个过程中，发现看书真的很重要，自己看书和看网上别人总结的，完全不一样，搞二进制还是得踏踏实实打好基础，所谓万丈高楼平地起。以前觉得天天对着电脑搞这些很累，进步又慢感觉很难，而经历这个黑暗寒假，我才知道这些东西再难也难不过生活，有个安安静静平平稳稳的生活去搞技术又何尝不是一种幸运。
如果其他大佬还有别的IDA小技巧骚操作，可以留言交流一哈