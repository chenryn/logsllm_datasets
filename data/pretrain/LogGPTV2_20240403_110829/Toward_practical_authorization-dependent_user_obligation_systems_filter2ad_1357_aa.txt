# Toward Practical Authorization-Dependent User Obligation Systems

## Authors
- Murillo Pontual, The University of Texas at San Antonio
- Omar Chowdhury, The University of Texas at San Antonio
- William H. Winsborough, The University of Texas at San Antonio
- Ting Yu, North Carolina State University
- Keith Irwin, Winston-Salem State University

## Abstract
Many authorization system models include some notion of obligation. However, little attention has been given to user obligations that depend on and affect authorizations. For a system to be usable, it must ensure that users have the necessary authorizations when their obligations need to be performed. Previous work in this area introduced accountability properties to ensure that the failure to fulfill obligations is not due to a lack of required authorizations. That work presented inconclusive and purely theoretical results regarding the feasibility of maintaining accountability in practice. This paper provides algorithms and performance analysis that support the thesis that maintaining accountability in a reference monitor is reasonable in many applications.

### Categories and Subject Descriptors
K.6.5 [Management of Computing and Information Systems]: Security and Protection

### General Terms
Security, Theory

### Keywords
Obligations, RBAC, Policy, Authorization Systems, Accountability

## 1. Introduction
Maintaining security in modern organizations depends on the faithful execution of security procedures, both by computer systems and human users. Computer systems rely on authorization systems to prevent malicious or accidental violations of confidentiality and integrity requirements. Additionally, they depend on human users and administrators performing various tasks, including business functions and administrative operations, which are obligatory parts of their job descriptions. We refer to these actions as user obligations. Most user obligations require corresponding system authorizations, and many also affect authorizations. As automated tools increasingly support managing personnel and projects, there is a growing need for individual tasks to be assigned and coordinated with authorizations, and for supporting automated techniques. Thus, the management of user obligations that depend on and affect authorizations is a significant issue in computer security.

For example, many governmental privacy regulations, such as the HIPAA (45 CFR part 164), include notions of user obligations that depend on authorization. Under HIPAA, an individual has the right to request a Covered Entity (CE) to amend their private health information (PHI). After this request, the CE is obliged to correct the individual's PHI within 60 days (which requires appropriate permissions for some CE employee) or provide reasons for not amending the PHI.

Research on computer-managed obligations has a long history, with much focus on policy determination of obligations. However, relatively little work has focused on the proper discharge of obligations, and even less on user obligations. In the context of user obligations, Irwin et al. [13, 14] were the first to study obligations that depend on and affect authorizations. They introduced strong and weak accountability properties to ensure that each obligatory action will be authorized during its appointed time interval.

Accountability can be viewed as an invariant that the system attempts to maintain. To achieve this, it may be necessary to prevent discretionary (non-obligatory) actions that would disturb accountability. This can occur in three ways: (1) an administrative action can change the current authorization state, making an obligated user unable to perform an obligatory action; (2) a discretionary action can cause an obligation to be incurred for an action that will not be authorized; (3) a discretionary action can cause an obligation to be incurred for an administrative action that changes the authorization state, making an obligated user unable to perform a subsequent obligation.

The results presented by Irwin et al. were inconclusive regarding practicality. They showed that when the authorization system used in the obligation model is fully abstract, accountability is undecidable. When instantiated with an access control (AC) matrix model, determining strong accountability becomes polynomial, but the algorithm's complexity is high, and no performance evaluation was provided. Determining weak accountability remains intractable (co-NP hard).

This paper supports the thesis that maintaining strong accountability in the reference monitor is reasonable in most applications and that, in many cases, even weak accountability can be supported adequately. We instantiate the authorization portion of the obligation model with a previously studied administrative role-based access control model called mini-ARBAC. Using mini-ARBAC simplifies the problem of determining accountability, primarily because obligatory actions are limited to making at most one change to the authorization state per action.

Our first contribution is an algorithm that determines strong accountability of a set of pending obligations under this instantiated model. The algorithm has a complexity of \( n^2 \log n \) times the policy size, where \( n \) is the number of pending obligations. Empirical evaluations indicate that the algorithm runs efficiently, even for large policies and obligation sets. Our second contribution is the result that weak accountability remains co-NP complete, even with the simplification of administrative actions. We explore two approaches to decide weak accountability in practice: a specific algorithm and a model checking approach. Our empirical evaluations show that these techniques are effective for moderate-sized obligation sets and policies.

In summary, our special-purpose algorithm can handle larger problem instances, while the model checker is better suited for handling many possible interleavings of overlapping obligations. We also formalize the scheduling of obligations in terms of traces, rather than assigning fixed times, to avoid issues with simultaneous actions.

## 2. Background

### 2.1 Mini-ARBAC
Mini-ARBAC is a simplified version of the widely studied ARBAC97 model, designed for policy analysis. It supports administrative actions that modify user-role assignments but does not consider role hierarchies, sessions, changes to permission-role assignments, or role administration operations. Constraints can be placed on the current role memberships of users that are candidates for assignment to new roles. The model does not distinguish between general and administrative roles.

We use mini-ARBAC in this study because of its relationship with RBAC, an access control model widely accepted in many sectors. Mini-ARBAC is simpler than the AC matrix model, as administrative operations are more restricted. In the AC matrix model, individual administrative actions can make multiple changes to the access control state, whereas in mini-ARBAC, actions can change only one permission or role assignment at a time. This simplification has a beneficial impact on the complexity of deciding strong accountability.

**Definition 1: Mini-ARBAC Model**
A mini-ARBAC model \(\mathcal{M}\) is a tuple \((U, R, P, UA, PA, CA, CR)\) where:
- \(U\), \(R\), and \(P\) are finite sets of users, roles, and permissions, respectively.
- \(UA \subseteq U \times R\) is a set of user-role pairs.
- \(PA \subseteq R \times P\) is a set of permission-role pairs.
- \(CA \subseteq R \times C \times R\) is a set of can-assign rules, where \(C\) is the set of preconditions.
- \(CR \subseteq R \times R\) is a set of can-revoke rules.

### 2.2 Obligations
This section presents an abstract meta-model that encompasses the basic constructs of an authorization system that includes user obligations. We define an obligation as a task that a user must perform, which requires and may affect authorizations. We formalize the scheduling of obligations in terms of traces (sequences of states and actions), rather than assigning fixed times, to avoid issues with simultaneous actions.

## 3. Algorithm for Strong Accountability
We present an algorithm to determine strong accountability of a set of pending obligations under the mini-ARBAC model. The algorithm has a complexity of \( n^2 \log n \) times the policy size, where \( n \) is the number of pending obligations. Empirical evaluations show that the algorithm runs efficiently, even for large policies and obligation sets.

## 4. Weak Accountability and Model Checking
We show that weak accountability remains co-NP complete, even with the simplification of administrative actions. We explore two approaches to decide weak accountability in practice: a specific algorithm and a model checking approach. Our empirical evaluations show that these techniques are effective for moderate-sized obligation sets and policies.

## 5. Empirical Evaluation
We conduct empirical evaluations of all the techniques presented. The results support the thesis that maintaining strong accountability in the reference monitor is reasonable in most applications and that, in many cases, even weak accountability can be supported adequately.

## 6. Related Work
We discuss related work in the field of authorization-dependent user obligation systems and how our contributions fit into the broader context.

## 7. Future Work and Conclusion
We discuss future work and conclude the paper, summarizing the key contributions and their implications for the field of computer security.