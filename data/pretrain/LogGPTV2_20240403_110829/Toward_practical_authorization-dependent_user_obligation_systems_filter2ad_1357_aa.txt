title:Toward practical authorization-dependent user obligation systems
author:Murillo Pontual and
Omar Chowdhury and
William H. Winsborough and
Ting Yu and
Keith Irwin
Toward Practical Authorization-dependent User Obligation
Systems
Murillo Pontual
Omar Chowdhury
The University of Texas at San
The University of Texas at San
Antonio
Antonio
William H. Winsborough
The University of Texas at San
Antonio
PI:EMAIL
PI:EMAIL
PI:EMAIL
North Carolina State
Ting Yu
University
Keith Irwin
Winston-Salem State
University
PI:EMAIL
PI:EMAIL
ABSTRACT
Many authorization system models include some notion of
obligation. Little attention has been given to user obliga-
tions that depend on and aect authorizations. However, to
be usable, the system must ensure users have the authoriza-
tions they need when their obligations must be performed.
Prior work in this area introduced accountability properties
that ensure failure to fulll obligations is not due to lack of
required authorizations. That work presented inconclusive
and purely theoretical results concerning the feasibility of
maintaining accountability in practice. The results of the
current paper include algorithms and performance analysis
that support the thesis that maintaining accountability in a
reference monitor is reasonable in many applications.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection
General Terms
Security, Theory
Keywords
Obligations, RBAC, Policy, Authorization Systems, Account-
ability
1.
INTRODUCTION
Maintaining security in modern organizations depends on
security procedures being faithfully carried out, both by
computer systems and by humans. Security of computer sys-
tems relies on authorization systems to prevent malicious or
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’10 April 9–13, 2010, Beijing, China.
Copyright 2010 ACM 978-1-60558-936-7/10/04 ...$10.00.
accidental violation of condentiality and integrity require-
ments. However, they also rely on human users and admin-
istrators performing actions that range broadly, including
tasks such as business functions and administrative opera-
tions, and are an obligatory part of the humans' job descrip-
tions. We call these actions user obligations. Most user obli-
gations require corresponding system authorizations. Many
also aect authorizations, as when an employee is reassigned
to a dierent division, or a new project or business function
is added, and an administrator must adjust authorizations
accordingly. As automated tools seek to provide increasing
support for managing personnel and projects, there is an in-
creasing need for individual tasks to be assigned and coor-
dinated with authorizations, and for supporting automated
techniques. Thus, the management of user obligations that
depend on and aect authorizations is a signicant issue for
the eld of computer security. Nowadays, many governmen-
tal privacy regulations have some notion of user obligations
which depends on authorization. For instance, the 45 CFR
part 164 HIPAA [12] states that an individual has the right
to request a Covered Entity (CE) (e.g., a hospital) to amend
his private health information (PHI). After this request, the
CE is obliged no later than 60 days to correct the individ-
ual's PHI (for doing this, some CE's employee must have
the appropriate permissions) or to provide the individual
the reasons for not amending his PHI.
Work on computer managed obligations goes back several
decades [15, 17, 18]. Many works focus on policy determina-
tion of obligations [1, 6, 7, 9, 16, 21, 26, 27]. Relatively little
work has focused on specication of the proper discharge of
obligations [6, 10, 11, 13, 19]. Even less has focused on user
obligations.
Working in the context of user obligations, Irwin et al. [13,
14] were the rst to study obligations that depend on and af-
fect authorizations. They observe that deadlines are needed
for user obligations in order to be able to capture the notion
of violation of obligations1. Associating a start time as well
as an end time with each obligation, Irwin et al. introduce
properties called strong and weak accountability [13] that
ensure that each obligatory action will be authorized during
its appointed time interval. For a given authorization policy,
1Users are unlike machines in that their future behavior can-
not be determined, so only safety properties can be enforced,
not liveness properties.
180accountability is a property of the authorization state and
the obligation pool. Roughly stated, accountability holds if
each obligatory action will be authorized, no matter when in
their associated time intervals all the other obligations are
fullled. The strong version of accountability requires that
each obligation be authorized throughout its entire time in-
terval. Weak accountability allows an obligation to be unau-
thorized during part of its time interval, provided that if the
obligated user waits for other obligations to be fullled, it
is guaranteed that the action will become authorized before
its deadline.
Thus, accountability properties can be viewed as invari-
ants that the system attempts to maintain. To this end, it
may be necessary to prevent discretionary (non-obligatory)
actions being performed if they would disturb accountabil-
ity2. This can happen in three ways. (1) An administrative
action can change the current authorization state in a way
that makes an obligated user unable to perform an obliga-
tory action. (2) A discretionary action can cause an obli-
gation to be incurred to perform an action that will not be
authorized. (3) A discretionary action can cause an obliga-
tion to be incurred to perform an administrative action that
will change the authorization state in a way that makes an
obligated user unable to perform a subsequent obligation.
The results presented by Irwin et al. were inconclusive
from the standpoint of practicality. They show that when
the authorization system used in the obligation model is
fully abstract, accountability is undecidable. When it is
instantiated with an access control (AC) matrix model, the
problem of determining strong accountability becomes poly-
nomial. However for the algorithm they present, this poly-
nomial has degree 4 in the number of obligations and degree
2 in the policy size. No performance evaluation is provided
to determine the limits of problem size that can be handled.
Moreover, determining weak accountability in the instanti-
ated case remains intractable (co-NP hard) and no decision
procedures are presented.
The results of the current paper support the thesis that
maintaining strong accountability in the reference monitor
is reasonable in most applications, and that in many, even
weak accountability can be supported adequately.
In this paper we instantiate the authorization portion of
the obligation model of Irwin with a previously studied ad-
ministrative role-based access control model [22, 23] called
mini-ARBAC [24]. Using mini-ARBAC instead of the AC
matrix simplies the problem of determining accountability,
largely because obligatory actions are limited to making at
most one change to the authorization state per action. The
rst contribution is an algorithm that determines strong
accountability of a set of pending obligations under this in-
stantiated model. This algorithm has complexity that is
n2 log n times the policy size, in which n is the number of
pending obligations. The empirical evaluation that we have
conducted indicates that the algorithm runs in less than
1~10th seconds, even for very large policies and obligation
2In many cases it will be necessary to enable users (especially ad-
ministrators) to force discretionary actions to be performed, even
when doing so violates accountability. Also, since it is impossi-
ble to ensure that users will fulll their obligations, accountabil-
ity guarantees obligatory actions will be authorized only under
the assumption that other obligations on which they depend are
faithfully discharged. Issues such as how to restore accountability
when it becomes violated remain open. Section 2.4 discusses these
and other topics that place the current contribution in context.
sets, when the algorithm is used in an incremental fashion
to determine whether a single obligation can be added to an
accountable obligation pool. This result supports the thesis
stated above.
Interestingly, weak accountability remains theoretically
intractable, even with the simplication of administrative
actions that can be obligatory. Our second contribution
is the result that the problem is co-NP complete in the sim-
plied model, and remains so when only one policy rule en-
ables each action and the condition expressed by that rule is
purely conjunctive. (Both positive and negative role mem-
berships can be tested, however.)
We also study the question whether in practice weak ac-
countability can be decided despite the problem's theoreti-
cal intractability. We explore two approaches, one that de-
signs an algorithm specically to solve this problem, and
one that uses model checking. Design, specication, op-
timization, prototypes, and empirical evaluation of these
techniques form the third contribution of this paper. Our
empirical evaluation of these techniques indicate that they
are eective in many cases for obligation sets and policies
of moderate size, and that there are cases in which each
one outperforms the other.
In short, the special-purpose
algorithm can handle larger problem instances (more obli-
gations, users, roles, and policy rules), provided interdepen-
dent obligations do not overlap too much, while the model
checker is much better able to deal with the many possible
interleavings of overlapping obligations.
Our recapitulation of Irwin's obligation system and ac-
countability denitions makes some improvements on the
original. The most signicant of these is that we formalize
the scheduling of obligations in terms of traces (sequences of
states and actions), rather than by assigning times at which
actions are performed. Assigning times raises the issue of
two actions being scheduled at the same time. Since actions
must be atomic, Irwin et al. introduced a xed, arbitrary or-
der on actions that denes the order in which actions sched-
uled for the same time are performed. Not only does this
make the presentation cumbersome. This order can actually
aect whether a given obligation pool is accountable. In the
current formulation, time is used only to dene the relative
order in which obligations may be carried out. This is our
fourth contribution.
Section 2 provides background necessary to understand
our contributions. Section 3 presents our algorithm for de-
termining strong accountability. Section 4 presents our com-
plexity result for weak accountability with the mini-ARBAC
authorization system, as well as our techniques for determin-
ing weak accountability: the special-purpose algorithm, in-
cluding a very powerful optimization, and the model check-
ing approach. Section 5 presents an empirical evaluation
of all these techniques. Section 6 discusses related work.
Section 7 discusses future work and concludes.
2. BACKGROUND
This section reviews mini-ARBAC. It then denes the
obligation system model and accountability properties, both
of which are abstract with respect to the authorization sys-
tem. It puts our contributions in context with respect to de-
velopment of obligation systems in which obligations depend
on and aect authorizations. It concludes by showing how
to instantiate the obligation system with the mini-ARBAC
authorization system, and by giving an example obligation
181system that uses a mini-ARBAC authorization policy.
2.1 mini-ARBAC
The widely studied ARBAC97 model [23] has been simpli-
ed somewhat by Sasturkar et al. for the purpose of study-
ing policy analysis, forming a family of languages called
mini-ARBAC [24]. The member of the family that we use
supports administrative actions that modify user-role as-
signments, but does not consider role hierarchies, sessions,
changes to permission-role assignments, or role administra-
tion operations, such as creation or deletion of roles. Con-
straints can be placed on the current role memberships of
users that are candidates for assignment to new roles; other
constraints are not supported. The model does not distin-
guish general and administrative roles. The presentation of
mini-ARBAC here is based on the one given by Sasturkar et
al. [24]. An example mini-ARBAC policy is presented in
table 1.
We use mini-ARBAC in this study in part because of its
relationship with RBAC, an access control model that has
gained wide acceptance in many sectors. Previous work [13]
in accountability analyzed obligations in the context of the
AC matrix model.
It is interesting and useful investigate
issues that arise in integrating the user obligation systems
with another popular authorization system.
It turns out
that mini-ARBAC is simpler than the AC matrix model,
because administrative operations are more restricted.
In
the AC matrix model, individual administrative actions can
make multiple changes to the access control state, whereas
in mini-ARBAC, actions can change only one permission or
role assignment at a time. Moreover, the impact of those
changes are simpler, as authorization depends on individual
role memberships, rather than on a combination of matrix
entries. As we shall see, this simplication has a benecial
impact on the complexity of deciding strong accountability.
The algorithms we present in sections 3 and 4 support obli-
gations that make administrative changes to the user-role
assignment. In section 3.3, we discuss the applicability of
our strong accountability algorithm to other administrative
changes in mini-ARBAC, ARBAC with role hierarchies, and
to the AC matrix model.
Definition 1
ARBAC model 
 is a tuple `U ; R; P; UA; PA; CA; CRe where:
(mini-ARBAC model:). A mini-
Y U ; R and P are the nite sets of users, roles and per-
missions respectively, where a permission  > P is a
wildcards(*) in the expression of permissions to denote
collections of permission pairs.
pair `action; objecte . Note that we allow the use of
Y UA b U  R is a set of user-role pairs. Each `u; re > UA
Y PA b R  P is a set of permission-role pairs. If `r; e >
indicates that user u is a member of role r.
PA, users in role r are granted the permission .
Y CA b R  C  R is a set of the can assign rules, in
which C is the set of preconditions, the structure of
which is discussed presently. Each `ra; c; rte > CA
indicates that users in role ra are authorized to assign
a user to the target role rt, provided the target user's
current role memberships satisfy precondition c. A
precondition is a conjunction of positive and negative
roles. Target user ut satises c in 
 (written ut à
 c)
if for each literal l in c, ut à
 l, which is dened by
u à
 r  `u; re > 
:UA and u à
  r  `u; re ¶ 
:UA. So
= Joan, Carl, Alice, Bob, Eve
= projectManager, developer, blackBoxTester
securityManager
= `develop, sourceCodee;
` test, softwaree; ` assignProjObl, *e
U
R
P
UA = `Joan, securityManagere; `Alice, developere;
`Bob, blackBoxTestere; ` Eve, projectManagere
PA = `developer, `develop, sourceCodeee;
`projectManager, `assignProjObl, *ee;
`blackBoxTester, `test, softwareee
CA = ` securityManager,   blackBoxTester, Developere;
` securityManager,   developer, blackBoxTestere
CR = ` securityManager, blackBoxTestere
Table 1: An example mini-ARBAC policy, 
, for a
software development life cycle.
the action grant(ua,rt,ut) is authorized if there exists
`ra; c; rte > CA such that ua à
 ra and ut à
 c.
Y CR b R  R is a set of can revoke rules. Each `ra; rte >
rt from any target user (i.e., there exists `ra; rte > CR
CR
 indicates that a user belonging to the (adminis-
trative) role ra has the capability to revoke the role
such that ua à
 ra). There are no constraints on re-
vocation based on the other roles held by the target
user. Our treatments in later sections can be easily
extended to accommodate them, however.
2.2 Obligations
This section presents an abstract meta-model that encom-
passes the basic constructs of an authorization system that