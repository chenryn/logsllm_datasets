revealed strings.
Next, we calculated the number of APKs containing newly re-
vealed strings. Based on our study in Section 2, we discovered that
only parts of the strings are obfuscated, and some obfuscators hide
obfuscated strings in other data structures.
Observation 2. Our results invalidate the claims of pre-
vious studies [17, 38, 56] that less than 5% of the apps contain
obfuscated strings, because we discovered that 76% of the 100,000
apps contain obfuscated strings.
During our analysis, we also measured the proportion of newly
revealed strings which were found by the different classifiers. The
results indicate that the string classifier detected 28%, and the
method classifier 77% of the newly revealed strings.
Observation 3. These findings provide empirical evidence
that both classifiers are needed because they have only an over-
lap of 5% for newly revealed strings. The method classifier iden-
tifies most of the newly revealed strings. However, the string
classifier provides at least 23% of newly revealed strings and,
thus, it is also necessary to achieve a higher total recall.
4.2.2 Categorization of String Obfuscation. To understand the us-
age of string obfuscation in the wild, we used regular expressions
to categorize all deobfuscated strings in different classes. Alto-
gether, we defined the regular expressions in Table 4 for matching
strings by ad libraries to access private data. Third, insecure cryp-
tography algorithms such as DES, AES with ECB mode, or MD2
are still used in obfuscated strings. Fourth, credentials, hidden in
obfuscated strings, are sent via HTTP GET method to login to their
services. Fifth, services, requested in obfuscated strings, provide
dangerous accesses (e.g., the location of the device). Sixth, rooted
phones execute commands, hidden in obfuscated strings, to grant
root access. Last, YouTube API keys, hidden in obfuscated strings,
can be used to consume the developer’s API quotas.
Observation 4. Using StringHound our analysis of the
100,000 apps reveals that critical usages of URLs, piggy-backed
permissions, insecure cryptography algorithms, hard-coded cre-
dentials, dangerous services, root commands, and API keys are
hidden in obfuscated strings.
4.2.3 Context Analysis of the Categories. While the 100,000 apps
contain a large variety of statistical findings, we have no insights
into apps that belong to the extreme fields in the Android ecosystem.
Therefore, we chose three different data sets to get an understanding
of these kinds of fields and the context of StringHound’s findings.
These data sets consist of the top 500 most installed apps in the
Play store, and two malware sets to analyze current (malware 2018)
and past (Contagio) obfuscated malware. Figure 6 shows a catego-
rization of the resulting deobfuscated strings. Each bar corresponds
to the percentage of APKs from a data set containing at least one
deobfuscated string in the given category. Therefore, each category
comprises a group of three bars, where each corresponds to one
data set.
The first bar shows that 60% of the Contagio malware obfus-
cates strings, mostly paths (40%), URLs (12%), or intents (5%). A
detailed analysis revealed absolute paths of commands trying to
open a command shell or of further APK or DEX files hidden in
the resources of the app containing the malware’s actual payload.
One path was used to establish a connection to a Command &
Control server (AnserverBot [23]). Furthermore, we found paths
to files on the SD card and to DHCP settings, which are exploited
by the DroidKungFu2 malware [28]. Our regex for URLs matched
locations of browser settings that can be used to build a profile of
the underlying mobile phone - some URLs linked to services pro-
viding the geolocation of the accessing IP address. We also found
URLs to ad networks that profile the user’s phone. The regular
expression for intents matched an action that resets the default
page of the browser to either show pages of ad networks or to track
user’s behavior. Furthermore, the intent regex discovered an action,
which queries the phone number of the mobile phone to reveal the
identity of the user. Finally, we also found an action that performs
phone calls.
In the malware set from 2018, 35% of APKs use string obfusca-
tion to hide a variety of interactions with the Android operating
system. We matched URLs that lead to ad networks, which track
the user’s interactions and build profiles of users as well as URLs
that access the user’s calendar and can reveal detailed information
of their schedules. The tracking of interactions, in combination
with profiling, violates the user’s privacy. We also found hidden
paths of an APK holding its malicious payload. Moreover, paths to
operating-system commands, which access hardware and sensor
Figure 5: Categories of String Obfuscation in the 100k Apps.
Table 4: Regular Expressions for the Evaluation of Deobfus-
cated Strings in the Wild.
Name
URL
IP
Paths
Intents
SQL
Regex
\w+://[^/\"]+.*
.*\b([0-9]{1,3}\.){3}[0-9]{1,3}\b.*
/\w+[\./].+
android.intent\..*
.*(select.*from | update.*set | insert into |
delete from | create table | drop table |
truncate table).*
MII.+
android.permission\..*
AIza[0-9A-Za-z\-_]{35}
Certificates
Permissions
YouTube API Key [36]
Cryptography algorithms MD2|MD5|SHA\-?1|ECB|DES
URLs, file system paths (Paths), IPs, intents, SQL statements (SQL),
permissions (Perms), certificates (Certs), cryptography algorithms
(crypto), credentials, system services (Services), commands, and API
keys[36]. Our regex for URLs is not limited to the typical HTTP(S)
form but also matches any scheme, such as content and file URLs.
Furthermore, a pattern for IPs is used to match non-URL related
communication. The third regex matches absolute directories as
well as paths pointing to data or executable files. Intents and per-
missions are identified via a regex based on Android’s standard
definitions. The regular expression for SQL statements matches
strings with common keywords for querying and manipulating
tables. Finally, certificates are identified by the Base64 encoded first
three characters, which are used as a prefix for certificates.
We applied the regular expressions to all deobfuscated strings
in our data sets (discarding apps without newly revealed strings).
Afterward, we counted their matches to quantify the prevalence of
each kind of usage.
Figure 5 shows a categorization of the resulting deobfuscated
strings in the 100,000 apps. The bar chart is divided into critical
and benign apps with obfuscated strings. We identified many crit-
ical strings that we found by counting the following facts. First,
we identified more HTTP requests than HTTPS for which lead to
security issues [53]. Second, developers request permissions but
are not aware that these permissions are also used via obfuscated
URLsPathsIPsIntentsSQLPermsCertsCryptoCredentialsServicesCommandsYoutubeAPI0500100015002000250030003500400045005000550060006500#ofObfuscatedAPKs6279508780458418383988713837532444240391557121145CriticalBenignuser’s mobile phone. The leaked information includes build, connec-
tivity, debug, runtime, telephony, Android version, and hardware
data, which can be used to build a user profile. Code related to
data collection is hidden in a stealthy package mixed into the inte-
grated Android support library. The app additionally checks for the
SuperUser.apk, a package that grants root access to the mobile
phone. We reported both apps to the app store, since according to
AndroidRank [2], these suspicious apps are installed on at least 20
million devices.
Observation 7. Virus scanners do not flag suspicious pri-
vacy violations. Since, we uploaded the two apps to VirusTo-
tal [55], which showed no findings, besides the usage of danger-
ous permissions. StringHound allows the analyst to search for
all kinds of violations.
5 DISCUSSION
There are a few limitations of StringHound that will be subject of
further consideration in future work.
Driven by the study of obfuscation schemes, StringHound uses
intra-procedural slicing to recover automatically obfuscated strings.
As a result, the slice’s execution may fail if it expects values, which
differ from our injected defaults. However, this limitation can be ad-
dressed by fuzzing the expected values. Given a field or parameter,
fuzzing guesses their values by their data-dependencies or using
symbolic execution to discover possible value ranges. If a decryp-
tion key is not present in the app code, e.g. because it is downloaded
over a network only under very specific circumstances, we cannot
deobfuscate strings that are encrypted with it. Obfuscators can
use fields and parameters to perform inter-procedural obfuscation.
However, to perform it automatically, they need to identify the
call order of the fields and parameters. This call-order is not easily
identifiable because of the limitation of current call graph analyses
for Android. Of course, making StringHound inter-procedural is
an obvious alternative, but coping with potential inter-procedural
obfuscation schemes is a trade-off between soundness and perfor-
mance.
Further challenges for StringHound are the dynamic usage of
external packages, encrypted classes, and native code. While these
techniques would evade our approach, the combination of other
tools [29] with StringHound can mitigate these challenges.
If an obfuscator adds random dictionary words to a string, it
can eventually evade detection by our String classifier because
the proportion of content that is classified as non-obfuscated will
increase. However, for this technique to be effective, more than half
of a given string would need to consist of non-obfuscated words.
During our analysis of obfuscation techniques, we never found
more than one dictionary word in obfuscated strings.
Finally, if a new obfuscation technique for strings is used that
does not share any commonalities with known techniques, we need
to extend the approach with the found technique without training
from scratch, as we can train additional REPTrees, and consider a
string as obfuscated, as long as at least one REPTree classifies it as
such. Similarly we can add the SPR representation of a different
technique to the list of known obfuscation techniques to adapt the
method classification.
Figure 6: Categories of String Obfuscation in the Wild.
data to profile a phone, were revealed. Findings regarding intents
and permissions indicate that malware uses intents to access func-
tionality to call or send SMS to premium numbers. Additionally,
the malware tries to locate or profile a user by accessing personal
calendars, accounts, or states of a phone. In comparison to malware
from the Contagio set, more recent malware focuses on leakages of
private data, causing financial damage to the unknowing user.
Observation 5. Current malware in the Play store makes
less use of string obfuscation (35% compared to 60%) and focuses
more on hiding leakages of private data. Without StringHound,
one would miss information that is essential to detect remote
command execution, even causing financial damage to the user,
and leakages of private data in at least 35% of recent malware.
Surprisingly, string obfuscation is more frequently used in the
Top 500 apps than in the 100,000-set of apps (89% vs. 76%), even
more frequently than in malware. Our evaluation shows that 33%
of the apps use obfuscated URLs. Some of those URLs are used to
track users’ IDs and IP through an ad network.
These actions directly violate users’ privacy. A detailed review
of the findings showed that all ad libraries contain obfuscated URLs
and paths. We also analyzed how many apps use string obfuscation
only in ad- and third-party libraries5. This analysis revealed that
63.52% of all obfuscated strings in the Top 500 data set are contained
in ad libraries, an additional 10.64% are contained in other libraries,
and the remaining 25.84% are in the app itself.
Observation 6. String obfuscation is frequently used in all
sorts of apps. Ad libraries are responsible for over 63% of these
strings. This result is alarming since neither the user nor the
developer of the app is aware of the added functionality. With
StringHound the developer could check the content of the used
ad library and choose an appropriate alternative.
Two games for children contained obfuscated privacy violations
in the Top 500 data set. We manually analyzed their code and
found that they collect and transmit sensitive information on the
5To this end, we filtered our findings by the list of ad-library package names from
Section 2 and by a list of common libraries [30].
AnyURLsPathsIPsIntentsSQLPermsCerts0102030405060708090100PercentageofAPKs6012400500089331431201358413030ContagioTop500Malware20186 RELATED WORK
In this section, we discuss four approaches, which could poten-
tially be used for deobfuscation, and studies on the usage of string
obfuscation in the wild.
6.1 Potential Deobfuscation Approaches
While different slicing approaches [7, 10, 24, 37] exist that could
be modified with much effort to deobfuscate strings; others can be
used almost directly. Unfortunately, we could not include the other
works [5, 46, 61, 64] in our empirical evaluation because they were
not publicly available. We contacted all authors via e-mail, how-
ever, without any responses. Additionally, the re-implementation
of their tools was also not possible because some parts cannot be
reconstructed from the papers. As a result, we only discuss these
approaches in the following based on their descriptions.
Harvester [46], TIRO [61], CredMiner [64], and ARES [5] combine
static and dynamic analysis to extract obfuscated runtime values,
including obfuscated strings, from Android malware. All these
approaches execute re-bundled code on an emulator using monkey
scripts. This re-bundled code is sliced, starting from a fixed set of
starting points.
On the contrary, StringHound requires neither re-bundling the
app nor an emulator setup that explores all paths with a monkey
script. As a result, StringHound can analyze Android and Java ap-
plications without searching for the correct combination of events
to trigger the deobfuscation. Additionally, our classifiers identify
more than a fixed set of starting points.
6.2 Identifying Obfuscated Apps
Several approaches have been proposed to identify whether the con-
tent of an (Android) app is changed by an obfuscator [17, 38, 56, 58].
While OBFUSCAN [58] only identifies name obfuscations, the other
three approaches [17, 38, 56] can identify whether the code contains
obfuscated strings. Wang et al. [56] even infer the used obfuscator.
Like our classifiers, all four approaches rely on machine learning
techniques to identify whether code is obfuscated or not. How-
ever, unlike our approach, they can only detect string obfuscation
if all strings in the app are obfuscated. Additionally, they cannot
handle obfuscated strings which are represented by byte arrays.
We use the token distribution [22] with the Spearman’s correla-
tion to perform a scalable and lightweight similarity measurement.
Other approaches, such as those used in clone detection [31], are
not suited for obfuscated clones and would require a considerable
ground truth for the training of their neuronal networks.
7 CONCLUSION & FUTURE WORK
This paper shows how and why string obfuscation is used in real-
world Android and Java apps. We presented StringHound, our ap-
proach to identify obfuscated strings and recover their plain text.