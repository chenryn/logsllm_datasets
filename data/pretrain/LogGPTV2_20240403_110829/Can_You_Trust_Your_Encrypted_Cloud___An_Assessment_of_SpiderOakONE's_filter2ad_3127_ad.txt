### Listing 2: Regular Expression Used by SpiderOakONE for File Retrieval Requests

SpiderOakONE employs a regular expression to perform security checks and prevent the server from retrieving any file stored on the client. However, we discovered that these checks do not prevent the server from requesting files containing the user’s password. The process involves three methods, each of which operates in a similar manner: they take a filename as input, check if it matches a specific regular expression (as shown in Listing 2), and if it does, return the file content to the server. Two of these methods are available by default, while the third is only available if the user has enabled remote diagnostics.

The user's password is stored in the following two locations:
- `tss_external_blocks_snapshot.db/00000003`
- `tss_external_blocks_pandora_sqliite_database/00000003`

Upon inspecting the regular expression in Listing 2, we found that the first file does not match due to the presence of a dot (`.`) before the forward slash (`/`), but the second file does match.

### Security Implications

An attacker can exploit this vulnerability by requesting the client to execute one of these insecure RPCs, thereby recovering the password. As mentioned in Section 3.3, users can opt out of the automatic login functionality and choose to enter their password at every startup. In this case, the plaintext password is not stored on the client; instead, a hashed version is used for verification. Unfortunately, the stored hash is weak and calculated as follows:
- `tmp = MD5("password_verify" || u || pw)`
- `h = MD5(tmp || "password_verify" || u || pw)`

where `u` is a value chosen by the server during account registration. Even with these stronger security settings, the adversary can still run the attack and learn the weakened hash of the password, leading to a ρ-password weakening attack with ρ = lg(c) − 1 = 11.

### Implementation and Experimental Verification

Implementing this attack required more effort than the previous ones due to the limited documentation available for the RPC interface. Additionally, injecting extra calls to the insecure remote methods was challenging because it required our Man-in-the-Middle application to track every call made after the injection and adjust sequence numbers to avoid client crashes. Instead, we modified an existing call from the real server to request the file containing the user’s password. We then verified that the password could be successfully extracted from the client's response.

### Practical Impact

This attack is extremely dangerous as it is completely undetectable and allows the recovery of passwords from users running with standard settings at any time. Even with more conservative settings, the attack effectively weakens the password hash.

### 4.4 File Recovery in Directory Sharing

The final attack we describe can be executed by a passive adversary who only needs to observe the server. We discovered that a shared directory cannot be securely unshared. Specifically, files added to a directory after it has been unshared can still be read by the server, and files moved out of a directory before it is shared can also be accessed. 

#### Scenarios
- **Scenario 1**: Alice shares a directory of photos with Bob, and after their relationship ends, she stops sharing the directory. She then uploads new photos to the same directory, assuming Bob will not see them. However, Bob, who has read access to the PECS, can still see her new photos.
- **Scenario 2**: Alice moves some private photos to a different directory before sharing the original directory. Bob, who has read access to the PECS, can still see her private photos because they are not securely detached from the original directory.

These scenarios arise because no re-encryption occurs when a file is moved from one directory to another. The file remains encrypted with the original directory key, even after being moved. This makes the file accessible to anyone who knows the directory key.

### Experimental Validation

We validated these attacks by executing the described steps on the client, such as uploading a file to a directory, moving the file to another directory, and then sharing the first directory. We recorded all traffic generated by the client and used it to extract the file.

### Practical Impact

These attacks lead to the recovery of files that users actively choose to prevent from being shared, making them critical.

### 4.5 On Future Secrecy

As mentioned in Section 3.4, changing a SpiderOakONE user's password does not significantly change the long-term secrets, implying that SpiderOakONE does not satisfy our notion of future security. If the password is leaked, the adversary can retrieve the long-term secrets and decrypt all existing files and directories. When the user changes their password, the long-term secrets remain unchanged, allowing the adversary to continue accessing new files.

### 5. Mitigations

We reported our findings on April 5th, 2017, and as of September 28th, 2017, all reported issues have been fixed by SpiderOak. The implemented fixes include:
- **4.1**: Ensuring the cost is at least 12 and verifying the salt part of bcrypt(pw, s).
- **4.2**: Ensuring `lst` is non-empty and rewording the message displayed to the user.
- **4.3**: Removing functions allowing for arbitrary file retrieval.
- **4.4**: Properly rotating keys to ensure files are not encrypted under a previously revealed key.
- **4.5**: Future-secrecy is still not supported by SpiderOakOne.

### 6. Conclusion

In this paper, we described several vulnerabilities that allowed a rogue SpiderOak server to break the confidentiality of user files. While most issues have been fixed, the fact that these attacks were possible has serious consequences. We recommend all SpiderOak users to change their passwords, although this may not fully mitigate the risks if the long-term secret key has already been compromised.

Our analysis highlights the importance of using separate secrets for authentication and confidentiality in encrypted cloud storage systems. Combining these functions, as done by SpiderOak, can lead to a complete loss of confidentiality.

### Acknowledgments

This research was funded by the Danish Independent Research Council under Grant-ID DFF-6108-00169 (FoCC). We thank DDIS for their useful sparring and technical dialogues.

### References

[References listed as provided, with proper formatting and links]

This optimized text aims to be more coherent, clear, and professional, with improved structure and flow.