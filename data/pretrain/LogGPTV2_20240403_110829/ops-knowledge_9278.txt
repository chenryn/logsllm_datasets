We are developing a Python framework that captures data from a framegrabber card via a CFFI interface. After processing the data, we attempt to write RAW images (numpy arrays using the `tofile` method) to disk at a rate of approximately 120 MB/s. Our disks are capable of handling this throughput.

However, we encountered an issue with dropped frames, where entire seconds of data were missing from the framegrabber output. We discovered that these frame drops occurred when our Debian system reached the `dirty_background_ratio` threshold set in `sysctl`. At this point, the system would initiate a background flush, which caused the framegrabber to skip frames due to the increased I/O load.

Setting the `dirty_background_ratio` to 0% resolved the issue entirely. Even small values like 1% or 2% still resulted in approximately 40% frame loss.

**Question:**
Is there a way to configure our Python process to write data in such a manner that it is immediately scheduled for writeout, bypassing the dirty buffer entirely?

**Possible Solution:**
One potential solution is to obtain the file descriptor and call `os.fsync` on it. This will ensure that the data is scheduled for immediate writeback.

```python
import os

# Assuming 'fd' is the file descriptor of the open file
os.fsync(fd)
```

Thank you for your assistance.