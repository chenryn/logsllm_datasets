1
0
1
(b) OBDD(f) with
x < i < y.
(c) APPLY(∧, OBDD(f),
OBDD(I(i))).
(d) RESTRICT(OBDD(f),
i ← 1).
Fig. 1. An example of a Boolean formula, its OBDD, and various operations on the OBDD. Solid
edges are labeled 1, dotted edges are labeled 0.
extensively by model checkers to improve the efﬁciency of state-space exploration al-
gorithms [12]. In this section, we present an informal overview of OBDDs, and refer
interested readers to Bryant’s seminal article [11] for details.
An OBDD represents a Boolean function f(x1, x2, . . . , xn) as a rooted, directed
acyclic graph (DAG). The DAG has two terminal nodes, which are labeled 0 and 1, and
have no outgoing edges. Each remaining non-terminal node is associated with a label ∈
{x1, x2, . . ., xn}, and has two outgoing edges labeled 0 and 1. An OBDD is ordered in
the sense that node labels are associated with a total order <. Node labels along all paths
in the OBDD from the root to the terminal nodes follow this total order.1 To evaluate
the Boolean formula denoted by an OBDD, it sufﬁces to traverse appropriately labeled
edges from the root to the terminal nodes of the DAG. Figure 1(b) depicts an example
of an OBDD for the Boolean formula f(x, i, y) shown in Figure 1(a) with the variable
ordering x < i < y.
OBDDs allow Boolean functions to be manipulated efﬁciently. With OBDDs, check-
ing the satisﬁability (or unsatisﬁability) of a Boolean formula is a constant time oper-
ation, because it sufﬁces to check whether the terminal node labeled 1 (respectively,
0) is present in the OBDD. The APPLY and RESTRICT operations [11], described be-
low, allow OBDDs to be combined and modiﬁed with a number of Boolean operators.
These two operations are implemented as a series of graph transformations and reduc-
tions to the input OBDDs, and have efﬁcient implementations (their time complexity is
polynomial in the size of the input OBDDs).
APPLY allows binary Boolean operators, such as ∧ and ∨, to be applied to a pair of
OBDDs. The two input OBDDs, OBDD(f ) and OBDD(g), must have the same variable
ordering. APPLY(OP, OBDD(f ), OBDD(g)) computes OBDD(f OP g), which has the
same variable ordering as the input OBDDs. Figure 1(c) presents the OBDD obtained
by combining the OBDD in Figure 1(b) with OBDD(I(i)), where I is the identity func-
tion. The RESTRICT operation is unary, and produces as output an OBDD in which
the values of some of the variables of the input OBDD have been ﬁxed to a certain
value. That is, RESTRICT(OBDD(f ), x ← k) = OBDD(f|(x←k)), where f|(x←k) de-
notes that x is assigned the value k in f . In this case, the output OBDD does not have
1 DAGs denoting OBDDs satisfy additional properties, as described in Bryant’s article. How-
ever, they are not directly relevant for this discussion, and we elide them for brevity.
62
L. Yang et al.
any nodes with the label x. Figure 1(d) shows the OBDD obtained as the output of
RESTRICT(OBDD(f ), i ←1), where OBDD(f ) is the OBDD of Figure 1(b).
APPLY and RESTRICT can be used to implement existential quantiﬁcation, which is
used in a key way in the operation of NFA-OBDDs, as described in Section 3. In partic-
ular, ∃xi.f(x1, . . . , xn) = f(x1,. . . , xn)|(xi ← 0) ∨ f(x1,. . . , xn)|(xi ← 1). Therefore,
we have: OBDD(∃ xi.f(x1, . . . , xn)) = APPLY(∨, RESTRICT(OBDD(f), xi ← 1),
RESTRICT(OBDD(f), xi ← 0)). Note that OBDD(∃ xi.f(x1, . . . , xn)) will not have
a node labeled xi.
Representing Relations and Sets. OBDDs can be used to represent relations of
arbitrary arity. If R is an n-ary relation over the domain {0, 1}, then we deﬁne its
characteristic function fR as follows: fR(x1, . . . , xn) = 1 if and only if R(x1, . . . , xn).
For example, the characteristic function of the 3-ary relation R = {(1, 0, 1), (1, 1, 0)} is
fR(x1, x2, x3) = (x1 ∧ ¯x2 ∧ x3) ∨ (x1 ∧ x2 ∧ ¯x3). fR is a Boolean function and can
therefore be expressed using an OBDD.
An n-ary relation Q over an arbitrary domain D can be similarly expressed using
OBDDs by bit-blasting each of its elements. That is, if the domain D has m elements,
we map each of its elements uniquely to bit-strings containing (cid:7)lg m(cid:8) bits (call this
mapping φ). We then deﬁne a new relation R(φ(x1), . . . , φ(xn)) = Q(x1, . . . , xn). R
is a n × (cid:7)lg m(cid:8)-ary relation over {0, 1}, and can be converted into an OBDD using its
characteristic function.
A set of elements over an arbitrary domain D can also be expressed as an OBDD
because sets are unary relations, i.e., if S is a set of elements over a domain D, then
we can deﬁne a relation RS such that RS(s) = 1 if and only if s ∈ S. Operations
on sets can then be expressed as Boolean operations and performed on the OBDDs
representing these sets. For example, S ⊆ T can be implemented as OBDD(S) −→
OBDD(T ) (logical implication), while ISEMPTY(S ∩ T ) is equivalent to checking
whether OBDD(S) ∧ OBDD(T ) is satisﬁable. The conversion of relations and sets
into OBDDs is used in a key way in the construction and operation of NFA-OBDDs,
which we describe next.
3 Representing and Operating NFAs
We represent an NFA using a 5-tuple: (Q, Σ, Δ, q0, Fin), where Q is a ﬁnite set of
states, Σ is a ﬁnite set of input symbols (the alphabet), Δ: Q × (Σ ∪ {}) → 2Q is a
transition function, q0 ∈ Q is a start state, and Fin ⊆ Q is a set of accepting (or ﬁnal)
states. The transition function Δ(s, i) = T describes the set of all states t ∈ T such
that there is a transition labeled i from s to t. Note that Δ can also be expressed as a
relation δ: Q × Σ × Q, so that (s, i, t) ∈ δ for all t ∈ T such that Δ(s, i) = T . We will
henceforth use δ to denote the set of transitions in the NFA.
An NFA may have multiple outgoing transitions with the same input symbol from
each state. Hence, it maintains a frontier F of states that it can currently be in. The
frontier is initially the singleton set {q0} but may include any subset of Q during the
operation of the NFA. For each symbol in the input string, the NFA must process all of
the states in F and ﬁnd a new set of states by applying the transition relation.
∗
Improving NFA-Based Signature Matching Using Ordered Binary Decision Diagrams
63
While non-determinism leads to frontiers of size O(|Q|) in NFAs, it also makes
them space-efﬁcient in two ways. First, NFAs for certain regular expressions are expo-
1(0|1)n has
nentially smaller than the corresponding DFAs, e.g., an NFA for (0|1)
O(n) states, while the corresponding DFA has O(2n) states [6]. Second, and perhaps
more signiﬁcant from the perspective of NIDS, NFAs can be combined space-efﬁciently
while DFAs cannot. To combine a pair of NFAs, NFA1 and NFA2, it sufﬁces to create a
new state qnew, add  transitions from qnew to the start states of NFA1 and NFA2, and
designate qnew to be the start state of the combined NFA. This leads to an NFA with
O(|Q1| + |Q2|) states. In contrast, combining two DFAs, DFA1 and DFA2, results in a
multiplicative increase in the number of states because the combined DFA must have a
state corresponding to s × t for each pair of states s and t in DFA1 and DFA2, respec-
tively. The number of states in the DFA can possibly be reduced using minimization, but
∗
this does not always help. For example, the DFAs for the regular expressions ab
cd
and ef
have 5 states and 6 transitions each, and the combined DFA (minimized)
has 16 states and 22 transitions.
gh
∗
∗
∗
NFA Operation using Boolean Functions. We now describe how the process
of applying an NFA’s transition relation to a frontier of states can be expressed as a
sequence of Boolean function manipulations. NFA-OBDDs implement Boolean func-
tions and operations on them using BDDs. For the discussion below and in the rest of
this paper, we assume NFAs in which  transitions have been eliminated (using standard
techniques [6]). This is mainly for ease of exposition; NFAs with  transitions can also
be expressed using NFA-OBDDs. Note that  elimination may increase the total number
of transitions in the NFA, but does not increase the number of states.
∗
Fig. 2. NFA for (0|1)
We now deﬁne four Boolean functions for an
NFA (Q, Σ, δ, q0, Fin). These functions use three
vectors of Boolean variables: x, y, and i. The vec-
tors x and y are used to denote states in Q, and
therefore contain (cid:7)lg |Q|(cid:8) variables each. The vec-
tor i denotes symbols in Σ, and contains (cid:7)lg |Σ|(cid:8)
variables. As an example, for the NFA in Figure 2,
these vectors contain one Boolean variable each;
we denote them as x, y, and i.
• T (x, i, y) denotes the NFA’s transition relation δ. Recall that δ is a set of triples
(s, i, t), such that there is a transition labeled i from state s to state t. It can there-
fore be represented as a Boolean function as described in Section 2. For example,
consider the NFA in Figure 2. Using 0 to denote state A and 1 to denote state B,
T (x, i, y) is the function shown in shown in Figure 1(a).
• Iσ(i) is deﬁned for each σ ∈ Σ, and denotes a Boolean representation of that sym-
bol. For the NFA in Figure 2, I0(i) = ¯i (i.e., i = 0) and I1(i) = i.
• F(x) denotes the current set of frontier states of the NFA. It is thus a Boolean repre-
sentation of the set F at any instant during the operation of the NFA. For the example
in Figure 2, if F = {A}, F(x) = ¯x, while if F = {A, B}, then F(x) = x ∨ ¯x.
• A(x) is a Boolean representation of Fin, and denotes the accepting states. In Figure 2,
A(x) = x.
1
64
L. Yang et al.
Note that T (x, i, y), Iσ(i) and A(x) can be computed automatically from any rep-
resentation of NFAs. The initial frontier F = {q0} can also be represented as a Boolean
formula. Suppose that the frontier at some instant during the operation of the NFA is
F(x), and that the next symbol in the input is σ. The following Boolean formula, G(y),
symbolically denotes the new frontier of states in the NFA after σ has been processed.
G(y) = ∃ x.∃ i.[T (x, i, y) ∧ Iσ(i) ∧ F(x)]
To see why G(y) is the new frontier, consider the truth table of the Boolean function
T (x, i, y). By construction, this function evaluates to 1 only for those values of x, i,
and y for which (x, i, y) is a transition in the automaton. Similarly, the function F(x)
evaluates to 1 only for the values of x that denote states in the current frontier of the
NFA. Thus, the conjunction of T (x, i, y) with F(x) and Iσ(i) only “selects” those
rows in the truth table of T (x, i, y) that correspond to the outgoing transitions from
states in the frontier labeled with the symbol σ. However, the resulting conjunction is a
Boolean formula in x, i and y. To ﬁnd the new frontier of states, we are only interested
in the values of y (i.e., the target states of the transitions) for which the conjunction has
a satisfying assignment. We achieve this by existentially quantifying x and i to obtain
G(y). To express the new frontier in terms of the Boolean variables in x, we rename the
variables in y with the corresponding ones in x.
We illustrate this idea using the example in Figure 2. Suppose that the current frontier
of the NFA is F = {A, B}, and that the next input symbol is a 0, which causes the new
frontier to become{A}. In this case, T (x, i, y) is the function shown in Figure 1(a),I0(i)
= ¯i and F(x) = x ∨ ¯x. We have T (x, i, y) ∧ I0(i) ∧ F(x) = (x ∧ ¯i ∧ ¯y). Existentially
quantifying x and i from the result of this conjunction, we get G(y) = ¯y. Renaming the
variable y to x, we get F(x) = ¯x, which is a Boolean formula that denotes {A}, the
new frontier.
To determine whether the NFA accepts an input string, it sufﬁces to check that
F ∩ Fin (cid:13)= ∅. Using the Boolean notation, this translates to check whether F(x)
∧ A(x) has a satisfying assignment. In the example above with F = {A}, F(x) = ¯x
and A(x) = x, so the NFA is not in an accepting conﬁguration. Recall that checking
satisﬁability of a Boolean function is an O(1) operation if the function is represented
as an OBDD.
NFA-OBDDs. The main idea behind NFA-OBDDs is to represent and manipulate the
Boolean functions discussed above using OBDDs. Formally, an NFA-OBDD for an
NFA (Q, Σ, δ, q0, Fin) is a 7-tuple (x, i, y, OBDD(T ), {OBDD(Iσ | ∀σ ∈ Σ)},
OBDD(Fq0), OBDD(A)), where x, i, y are vectors of Boolean variables, and T , Iσ,
and A are the Boolean formulae discussed earlier. Fq0 denotes the Boolean function
that denotes the frontier {q0}. For each input symbol σ, the NFA-OBDD obtains a new
frontier as discussed earlier. The main difference is that the Boolean operations are
performed as operations on OBDDs.
The use of OBDDs allows NFA-OBDDs to be more time-efﬁcient than NFAs. In
an NFA, the transition table must be consulted for each state in the frontier, leading to
O(|δ| × |F|) operations per input symbol. In contrast, the complexity of OBDD op-
erations to obtain a new frontier is O(SIZEOF(OBDD(T )) × SIZEOF(OBDD(F))).
Because OBDDs are a compact representation of the frontier F and the transition
Improving NFA-Based Signature Matching Using Ordered Binary Decision Diagrams
65
relation δ, NFA-OBDDs are more time-efﬁcient than NFAs. The improved performance
of NFA-OBDDs is particularly pronounced when the transition table of the NFA is
sparse or the NFA has large frontiers. This is because OBDDs can effectively remove
redundancy in the representions of δ and F .
NFA-OBDDs retain the space-efﬁciency of NFAs because NFA-OBDDs can be com-
bined using the same algorithms that are used to combine NFAs. Although the use of
OBDDs may lead NFA-OBDDs to consume more memory than NFAs, our experiments
show that the increase is marginal. In particular, the cost is dominated by OBDD(T ),
which has a total of 2 × (cid:7)lg |Q|(cid:8) + (cid:7)lg |Σ|(cid:8) Boolean variables. Even in the worst case,
this OBDD consumes only O(|Q|2×|Σ|) space, which is comparable to the worst-case
memory consumption of the transition table of a traditional NFA. However, in practice,
the memory consumption of NFA-OBDDs is much smaller than this asymptotic limit.
4 Implementation and Evaluation
We evaluated the feasibility of our approach using a software-based implementation
of NFA-OBDDs. As depicted in Figure 3, the implementation consists of two ofﬂine
components and an online component.
The ofﬂine components are executed once for each set of regular expressions, and
consist of re2nfa and nfa2obdd. The re2nfa component accepts a set of regular expres-
sions as input, and produces an -free NFA as output. To do so, it ﬁrst constructs NFAs
for each of the regular expressions using Thompson’s construction [13,6], combines
these NFAs into a single NFA, and eliminates  transitions. The nfa2obdd component
analyzes this NFA to determine the number of Boolean variables needed (i.e., the sizes
of the x, i and y vectors), and constructs OBDD(T ), OBDD(A), OBDD(Iσ) for each
σ ∈ Σ, and OBDD(Fq0).
It is well-known that the size of an OBDD for a Boolean formula is sensitive to the
total order imposed on its variables. For the NFA-OBDDs used in our experiments, we
empirically determined that an ordering of variables of the form i < x < y yields the
best performance for NFA-OBDDs. For example, we found that an implementation of
NFA-OBDDs that uses the variable ordering x < i < y operates more than an order of
magnitude slower than one that uses the ordering i < x < y; we therefore used the latter
ordering in our implementation. Within each vector, nfa2obdd uses a simple sorting
scheme to order variables. Although it is NP-hard to choose a total order that yields the
most compact OBDD for a Boolean function [11], future work could develop heuristics
that leverage the structure of the input regular expressions to determine orderings that
yield high-performance NFA-OBDDs.
The online component, exec nfaobdd, begins execution by reading these OBDDs
into memory and processes a stream of network packets. It matches the payloads of
these network packets against the regular expressions using the NFA-OBDD. To manip-
ulate OBDDs and produce a new frontier for each input symbol processed, this compo-
nent interfaces with Cudd, a popular C++-based OBDD library [14]. It checks whether
each frontier F produced during the operation of the NFA-OBDD contains an accept-
ing state. If so, it emits a warning with the offset of the character in the input stream
that triggered a match, as well as the regular expression(s) that matched the input. Note
66
L. Yang et al.
Fig. 3. Components of our software-based implementation of NFA-OBDDs
that in a NIDS setting, it is important to check whether the frontier F obtained after
processing each input symbol contains an accepting state. This is because any byte in
the network input may cause a transition in the NFA that triggers a match with a regular
expression. We call this the streaming model because the NFA continuously processes
input symbols from a network stream.
Data Sets. We evaluated our implementation of NFA-OBDDs with three sets of regu-
lar expressions [15]. The ﬁrst set was obtained from the authors of the XFA paper [8],
and contains 1503 regular expressions that were synthesized from the March 2007 snap-
shot of the Snort HTTP signature set. The second and third sets, numbering 2612 and 98
regular expressions, were obtained from the October 2009 snapshot of the Snort HTTP
and FTP signature sets, respectively. About 50% of these regular expressions were taken
from the uricontent ﬁelds of the signatures, while the rest were extracted from the
pcre ﬁelds. Although extracting just pcre ﬁelds from individual Snort rules only cap-
tures a portion of the corresponding signatures, it sufﬁces for our experiments, because
our primary goal is to evaluate the performance of NFA-OBDDs against other regular-
expression based techniques. All three sets of regular expressions include client-side
and server-side signatures. For all sets, we excluded Snort signatures that contained
non-regular constructs, such as back-references and subroutines (which are allowed by
PCRE [16]), because these constructs cannot be implemented in NFA-based models. In
all, we excluded 1837 HTTP and 41 FTP signatures due to non-regular constructs.
To evaluate the performance of HTTP signatures, we fed traces of live HTTP trafﬁc
obtained from our department’s network to exec nfaobdd. We collected this trafﬁc
over a one week period in August 2009. This trafﬁc was collected using tcpdump, and
includes whole packets of port 80 trafﬁc from our departmental Web server and our
lab’s machines.
The trafﬁc observed during this period consisted largely of Web trafﬁc typically ob-
served at an academic department’s main Web server; most of the trafﬁc was to view
and query Web pages hosted by the department. Overall, we observed connections from
18,618 distinct source IP addresses during this period, with 653,670 GET, 137,737
POST, 3,504 HEAD, and 1,576 PUT commands. This trafﬁc triggered 1,816,410 and
17,107,588 matches in the HTTP/1503 and HTTP/2612 signature sets, corresponding
to 47 and 120 distinct signatures, respectively.2 The payloads in these packets ranged
2 These numbers are not indicative of the number of alerts produced by Snort because our signa-
ture sets only contain patterns from the pcre and uricontent ﬁelds of the Snort rules. The
large number of matches is because signatures contained patterns common in HTTP packets.
Improving NFA-Based Signature Matching Using Ordered Binary Decision Diagrams
67
in size from 1 byte to 1460 bytes, with an average of 126 bytes (standard deviation of
271). However, we partitioned this trafﬁc into 33 traces of various sizes, containing be-
tween 5.1MB–1.24GB worth of data. We did so because the the NFA and PCRE-based
implementations discussed in this section were too slow to process the weeklong trafﬁc
trace. The size distribution of these traces was as follows: 21 traces of 5.1-7.2MB, 9
traces of 10.3-20.1MB, and one trace each of 227.2MB, 575.8MB, and 1.24GB.
We evaluated the FTP signatures using two traces of live FTP trafﬁc (from the com-
mand channel), obtained over a two week period in March 2010 from our department’s
FTP server; these FTP traces contained 19.4MB and 24.7MB worth of data. The trafﬁc
consisted of FTP requests to fetch and update technical reports hosted by our depart-
ment. We observed trafﬁc from 528 distinct source IP addresses during this period.
Statistics on various FTP commands observed during this period appear in the table
below (commands that were not observed are not reported). This trafﬁc triggered 9,656
and 15,976 matches in the FTP/98 signature set, corresponding to matches on 6 and
5 distinct signatures, respectively. The payload sizes of packets ranged from 2 to 402
bytes with an average of 40 bytes (standard deviation of 44).
Command CWD LIST MDTM MKD PASS PORT PWD QUIT RETR SIZE STOR TYPE USER
89 14,701 232 453 12,244 7,676 1,110 1,401 12,201 14,834
Number
62,561 3,098 613
We also used synthetic traces during our experiments, but do not report these results
in the paper because they are substantially similar to those obtained using real trafﬁc.
Because our primary goal is to study the performance of NFA-OBDDs, we assume
that the network traces have been processed using standard NIDS operations, such as
defragmentation and normalization. We fed these traces, which were in tcpdump format,
to exec nfaobdd.
Experimental Setup. All our experiments were performed on a Intel Core2 Duo
E7500 Linux-2.6.27 machine, running at 2.93GHz with 2GB of memory (however, our
programs are single-threaded, and only used one of the available cores). We used the
Linux /proc ﬁle system to measure the memory consumption of nfa2obdd and the
Cudd ReadMemoryInUse utility to obtain the memory consumption of exec nfaobdd.
We instrumented both these programs to report their execution time using processor per-
formance counters. We report the performance of exec nfaobdd as the number of CPU
cycles to process each byte of network trafﬁc (cycles/byte), i.e., fewer processing cy-
cles/byte imply greater time-efﬁciency. All our implementations were in C++; we used
the GNU g++ compiler suite (v4.3.2) with the O6 optimization level to produce the
executables used for experimentation.
Our experiments show that NFA-OBDDs: (1) outperform traditional NFAs by up
to three orders of magnitude while retaining their space-efﬁciency; (2) outperform or
are competitive in performance with the PCRE package, a popular library for regular
expression matching; (3) are competitive in performance with variants of DFAs while
being drastically less memory-intensive.
Constructing NFA-OBDDs. We used nfa2obdd to construct NFA-OBDDs from -
free NFAs of the regular expression sets. Figure 4 presents statistics on the sizes of the
input NFAs, the size of the largest of the four OBDDs in the NFA-OBDD (OBDD(T )),
68
L. Yang et al.
Signature Set
HTTP (March 2007)
HTTP (October 2009)
FTP (October 2009)
Size of the input NFA |OBDD(T )| Construction
Time/Memory
305sec/176MB
453sec/176MB
246sec/134MB
#Reg. Exps. #States #Transitions
159,734 3,986,769
239,890 5,833,911
26,536 5,927,465