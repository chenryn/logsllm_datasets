72、解释对象/关系映射集成模块。
Spring 通过提供 ORM 模块，支持我们在直接 JDBC 之上使用一个对象/关系映射映射(ORM)工具，Spring 支持集成主流的 ORM 框架，如
Hiberate,JDO 和 iBATISSQL Maps。Spring 的事务管理同样支持以上所有 ORM 框架及 JDBC。
73、解释 WEB 模块。
Spring 的 WEB 模块是构建在 application context 模块基础之上，提供一个适合 web 应用的上下文。这个模块也包括支持多种面向 web 的
任务，如透明地处理多个文件上传请求和程序级请求参数的绑定到你的业务对象。它也有对 Jakarta Struts 的支持。
74、Spring 配置文件
Spring 配置文件是个 XML 文件，这个文件包含了类信息，描述了如何配置它们，以及如何相互调用
75、什么是 Spring IOC 容器？
Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。
76、IOC 的优点是什么？
IOC 或 依赖注入把应用的代码量降到最低。它使应用容易测试，单元测试不再需要单例和 JNDI 查找机制。最小的代价和最小的侵入性使松
散耦合得以实现。IOC容器支持加载服务时的饿汉式初始化和懒加载。
77、ApplicationContext 通常的实现是什么?
 FileSystemXmlApplicationContext ：此容器从一个 XML 文件中加载 beans 的定义，XML Bean 配置文件的全路径名必须提供给它的构
造函数。
 ClassPathXmlApplicationContext：此容器也从一个 XML 文件中加载 beans 的定义，这里，你需要正确设置 classpath 因为这个容器将
在 classpath里找 bean 配置。
 WebXmlApplicationContext：此容器加载一个 XML 文件，此文件定义了一个 WEB 应用的所有 bean。
78、Bean 工厂和 Application contexts 有什么区别？
Application contexts 提供一种方法处理文本消息，一个通常的做法是加载文件资源（比如镜像），它们可以向注册为监听器的 bean 发布
事件。另外，在容器或容器内的对象上执行的那些不得不由 bean 工厂以程序化方式处理的操作，可以在Application contexts 中以声明的
方式处理。Application contexts 实现了MessageSource 接口，该接口的实现以可插拔的方式提供获取本地化消息的方法。
79、一个 Spring 的应用看起来象什么？
 一个定义了一些功能的接口。
 这实现包括属性，它的 Setter ， getter 方法和函数等。
 Spring AOP。
 Spring 的 XML 配置文件。
 使用以上功能的客户端程序。
80、什么是 Spring 的依赖注入？
依赖注入，是 IOC 的一个方面，是个通常的概念，它有多种解释。这概念是说你不用创建对象，而只需要描述它如何被创建。你不在代码里
直接组装你的组件和服务，但是要在配置文件里描述哪些组件需要哪些服务，之后一个容器（IOC 容器）负责把他们组装起来。
81、有哪些不同类型的 IOC（依赖注入）方式？
 构造器依赖注入：构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。
 Setter 方法注入：Setter 方法注入是容器通过调用无参构造器或无参static 工厂 方法实例化 bean 之后，调用该 bean 的 setter 方法，即
实现了基于 setter 的依赖注入。
82、哪种依赖注入方式你建议使用，构造器注入，还是 Setter方法注入？
你两种依赖方式都可以使用，构造器注入和 Setter 方法注入。最好的解决方案是用构造器参数实现强制依赖，setter 方法实现可选依赖
83、什么是 Spring beans?
Spring beans 是那些形成 Spring 应用的主干的 java 对象。它们被 Spring IOC容器初始化，装配，和管理。这些 beans 通过容器中配置的
元数据创建。比如，以 XML 文件中 的形式定义。
Spring 框架定义的 beans 都是单件 beans。在 bean tag 中有个属性”singleton”，如果它被赋为 TRUE，bean 就是单件，否则就是一个
prototype bean。默认是 TRUE，所以所有在 Spring 框架中的 beans 缺省都是单件。
84、一个 Spring Bean 定义 包含什么？
一个 Spring Bean 的定义包含容器必知的所有配置元数据，包括如何创建一个bean，它的生命周期详情及它的依赖。
85、如何给 Spring 容器提供配置元数据?
这里有三种重要的方法给 Spring 容器提供配置元数据。
XML 配置文件。
基于注解的配置。
基于 java 的配置。
86、你怎样定义类的作用域?
当定义一个 在 Spring 里，我们还能给这个 bean 声明一个作用域。它可以通过bean 定义中的 scope 属性来定义。如，当 Spring 要在需要
的时候每次生产一个新的 bean 实例，bean 的 scope 属性被指定为 prototype。另一方面，一个 bean 每次使用的时候必须返回同一个实
例，这个 bean 的 scope 属性 必须设为singleton
87、解释 Spring 支持的几种 bean 的作用域。
Spring 框架支持以下五种 bean 的作用域：
 singleton : bean 在每个 Spring ioc 容器中只有一个实例。
 prototype：一个 bean 的定义可以有多个实例。
 request：每次 http 请求都会创建一个 bean，该作用域仅在基于 web的 Spring ApplicationContext 情形下有效。
 session：在一个 HTTP Session 中，一个 bean 定义对应一个实例。该作用域仅在基于 web 的 Spring ApplicationContext 情形下有效。
 global-session：在一个全局的 HTTP Session 中，一个 bean 定义对应一个实例。该作用域仅在基于 web 的 Spring ApplicationContext
情形下有效。缺省的 Spring bean 的作用域是 Singleton.
88、Spring 框架中的单例 bean 是线程安全的吗?
不，Spring 框架中的单例 bean 不是线程安全的。
89、解释 Spring 框架中 bean 的生命周期。
 Spring 容器 从 XML 文件中读取 bean 的定义，并实例化 bean。
 Spring 根据 bean 的定义填充所有的属性。
 如果 bean 实现了 BeanNameAware 接口，Spring 传递 bean 的 ID 到setBeanName 方法。
 如果 Bean 实现了 BeanFactoryAware 接口， Spring 传递beanfactory 给 setBeanFactory 方法。
 如果有任何与 bean 相关联的 BeanPostProcessors，Spring 会在postProcesserBeforeInitialization()方法内调用它们。
 如果 bean 实现 IntializingBean 了，调用它的 afterPropertySet 方法，如果 bean 声明了初始化方法，调用此初始化方法。
 如果有 BeanPostProcessors 和 bean 关联，这些 bean 的postProcessAfterInitialization() 方法将被调用。
 如果 bean 实现了 DisposableBean，它将调用 destroy()方法
90、哪些是重要的 bean 生命周期方法？你能重载它们吗？
有两个重要的 bean 生命周期方法，第一个是 setup ， 它是在容器加载 bean的时候被调用。第二个方法是 teardown 它是在容器卸载类的
时候被调用。The bean 标签有两个重要的属性（init-method 和 destroy-method）。用它们你可以自己定制初始化和注销方法。它们也有
相应的注解（@PostConstruct 和
@PreDestroy）。
91、什么是 Spring 的内部 bean？
当一个 bean 仅被用作另一个 bean 的属性时，它能被声明为一个内部 bean，为了定义 inner bean，在 Spring 的 基于 XML 的 配置元数据
中，可以在 或 元素内使用 元素，内部 bean 通常是匿名的，它们的 Scope 一般是 prototype。
92、在 Spring 中如何注入一个 java 集合？
Spring 提供以下几种集合的配置元素：
 类型用于注入一列值，允许有相同的值。
 类型用于注入一组值，不允许有相同的值。
 类型用于注入一组键值对，键和值都可以为任意类型。
 类型用于注入一组键值对，键和值都只能为 String 类型。
93、什么是 bean 装配?
装配，或 bean 装配是指在 Spring 容器中把 bean 组装到一起，前提是容器需要知道 bean 的依赖关系，如何通过依赖注入来把它们装配到
一起。
94、什么是 bean 的自动装配？
Spring 容器能够自动装配相互合作的 bean，这意味着容器不需要和配置，能通过 Bean 工厂自动处理 bean 之间的协作。
95、解释不同方式的自动装配 。
有五种自动装配的方式，可以用来指导 Spring 容器用自动装配方式来进行依赖注入。
 no：默认的方式是不进行自动装配，通过显式设置 ref 属性来进行装配。
 byName：通过参数名 自动装配，Spring 容器在配置文件中发现 bean的 autowire 属性被设置成 byname，之后容器试图匹配、装配和
该 bean 的属性具有相同名字的 bean。
 byType:：通过参数类型自动装配，Spring 容器在配置文件中发现 bean的 autowire 属性被设置成 byType，之后容器试图匹配、装配和
该 bean 的属性具有相同类型的 bean。如果有多个 bean 符合条件，则抛出错误。
 constructor：这个方式类似于 byType， 但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。
 autodetect：首先尝试使用 constructor 来自动装配，如果无法工作，则使用 byType 方式。
96、自动装配有哪些局限性
自动装配的局限性是：
 重写：你仍需用 和 配置来定义依赖，意味着总要重写自动装配。
 基本数据类型：你不能自动装配简单的属性，如基本数据类型，String字符串，和类。
 模糊特性：自动装配不如显式装配精确，如果有可能，建议使用显式装配。
97、你可以在 Spring 中注入一个 null 和一个空字符串吗？
可以
98、什么是基于 Java 的 Spring 注解配置? 给一些注解的例子.
基于 Java 的配置，允许你在少量的 Java 注解的帮助下，进行你的大部分 Spring配置而非通过 XML 文件。
以@Configuration 注解为例，它用来标记类可以当做一个 bean 的定义，被Spring IOC 容器使用。另一个例子是@Bean 注解，它表示此方
法将要返回一个对象，作为一个 bean 注册进 Spring 应用上下文。
99、什么是基于注解的容器配置?
相对于 XML 文件，注解型的配置依赖于通过字节码元数据装配组件，而非尖括号的声明。
开发者通过在相应的类，方法或属性上使用注解的方式，直接组件类中进行配置，而不是使用 xml 表述 bean 的装配关系。
100、怎样开启注解装配？
注解装配在默认情况下是不开启的，为了使用注解装配，我们必须在 Spring 配置文件中配置 context:annotation-config/元素
101、@Required 注解
这个注解表明 bean 的属性必须在配置的时候设置，通过一个 bean 定义的显式的属性值或通过自动装配，若@Required 注解的 bean 属性
未被设置，容器将抛出BeanInitializationException。
102、@Autowired 注解
@Autowired 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@Required 一样，修饰 setter 方法、构造器、
属性或者具有任意名称和/或多个参数的 PN 方法。
103、@Qualifier 注解
当有多个相同类型的 bean 却只有一个需要自动装配时，将@Qualifier 注解和@Autowire 注解结合使用以消除这种混淆，指定需要装配的
确切的 bean。
104、在 Spring 框架中如何更有效地使用 JDBC?
使用 SpringJDBC 框架，资源管理和错误处理的代价都会被减轻。所以开发者只需写 statements 和 queries 从数据存取数据，JDBC 也可以
在 Spring 框架提供的模板类的帮助下更有效地被使用，这个模板叫 JdbcTemplate （例子见这里here）
105、JdbcTemplate
JdbcTemplate 类提供了很多便利的方法解决诸如把数据库数据转变成基本数据类型或对象，执行写好的或可调用的数据库操作语句，提供
自定义的数据错误处理。
106、Spring 对 DAO 的支持
Spring 对数据访问对象（DAO）的支持旨在简化它和数据访问技术如 JDBC，Hibernate or JDO 结合使用。这使我们可以方便切换持久层。
编码时也不用担心会捕获每种技术特有的异常。
107、使用 Spring 通过什么方式访问 Hibernate?
在 Spring 中有两种方式访问 Hibernate：
 控制反转 Hibernate Template 和 Callback。
 继承 HibernateDAOSupport 提供一个 AOP 拦截器。
108、Spring 支持的 ORM
Spring 支持以下 ORM：
 Hibernate
 iBatis
 JPA (Java Persistence API)
 TopLink
 JDO (Java Data Objects)
 OJB
109、如何通过 HibernateDaoSupport 将 Spring 和 Hibernate结合起来？
用 Spring 的 SessionFactory 调用 LocalSessionFactory。集成过程分三步：
 配置 the Hibernate SessionFactory。
 继承 HibernateDaoSupport 实现一个 DAO。
 在 AOP 支持的事务中装配。
110、Spring 支持的事务管理类型
Spring 支持两种类型的事务管理：
 编程式事务管理：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。
 声明式事务管理：这意味着你可以将业务代码和事务管理分离，你只需用注解和 XML 配置来管理事务。
111、Spring 框架的事务管理有哪些优点？
 它为不同的事务 API 如 JTA，JDBC，Hibernate，JPA 和 JDO，提供一个不变的编程模式。
 它为编程式事务管理提供了一套简单的 API 而不是一些复杂的事务 API