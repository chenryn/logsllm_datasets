::: variablelist
[`/proc/sys/kernel/sched_rt_period_us`{.filename}]{.term}
:   ::: para
    以毫秒为单位定义视为 100% CPU 带宽的时间段（'us\'是明文中与 \'µs\'
    最接近的表示）。默认值为 1000000µs 或者 1 秒。
    :::
[`/proc/sys/kernel/sched_rt_runtime_us`{.filename}]{.term}
:   ::: para
    以毫秒为单位定义用于运行实时线程的时间段（'us\'是明文中与 \'µs\'
    最接近的表示）。默认值为 950000µs 或者 0.95 秒。
    :::
:::
:::
::: section
::: titlepage
## [⁠]{#main-cpu.html#idm140329763709760}4.2.2. 一般调度策略 {.title}
:::
::: para
有三个一般调度策略：`SCHED_OTHER`{.literal}、`SCHED_BATCH`{.literal} 和
`SCHED_IDLE`{.literal}。但 `SCHED_BATCH`{.literal} 和
`SCHED_IDLE`{.literal}
策略主要用于低优先权任务，因此性能调整指南对其不多做论述。
:::
::: variablelist
[`SCHED_OTHER`{.literal} 或者 `SCHED_NORMAL`{.literal}]{.term}
:   ::: para
    默认调度策略。该策略使用完全公平调度程序（CFS）提供对所有使用此策略线程的公平访问时间段。CFS
    建立了动态优先权列表，部分是根据每个进程线程的 *`niceness`*
    值。（有关此参数以及 `/proc`{.filename}
    文件系统的详情请参考*《部署指南》*。）这样可为用户提供一些间接控制进程优先权的权利，但这个动态优先权列表只能由
    CFS 直接更改。
    :::
:::
:::
::: section
::: titlepage
## [⁠]{#main-cpu.html#idm140329758231488}4.2.3. 策略选择 {.title}
:::
::: para
为程序线程选择正确的调度程序策略不总是那么直截了当的任务。通常应在关键时间或者需要迅速调度且不能延长运行时间的重要任务中使用实时策略。一般策略通常可已产生比实时策略好的数据流量结果，因为它们让调度进程更有效地运行（即他们不需要经常重新调度占先的进程。
:::
::: para
如果您要管理大量进程，且担心数据流量（每秒网络数据包，写入磁盘等等），那么请使用
`SCHED_OTHER`{.literal}，并让系统为您管理 CPU 使用。
:::
::: para
如果您担心事件响应时间（延迟），则请使用
`SCHED_FIFO`{.literal}。如果您只有少量线程，则可以考虑隔离 CPU
插槽，并将线程移动到那个插槽的核中以便没有其他线程与之竞争。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#main-cpu.html#s-cpu-irq}4.3. 中断和 IRQ 调节 {.title}
:::
::: para
中断请求（IRQ）是用于服务的请求，在硬件层发出。可使用专用硬件线路或者跨硬件总线的信息数据包（消息信号中断，MSI）发出中断。
:::
::: para
启用中断后，接收 IRQ 后会提示切换到中断上下文。内核中断调度代码会搜索
IRQ 号码机器关联的注册中断服务路由（ISR）列表，并按顺序调用 ISR。ISR
会确认中断并忽略来自同一 IRQ
的多余中断，然后在延迟的句柄中排队完成中断处理，并忽略以后的中断来结束
ISR。
:::
::: para
`/proc/interrupts`{.filename} 文件列出每个 I/O 设备中每个 CPU
的中断数，每个 CPU
核处理的中断数，中断类型，以及用逗号分开的注册为接收中断的驱动程序列表。（详情请参考
proc(5) man page：`man 5 proc`{.command}）
:::
::: para
IRQ 有一个关联的"类似"属性 *`smp_affinity`*，该参数可以定义允许为 IRQ
执行 ISR 的 CPU 核。这个属性还用来提高程序性能，方法是为一个或者多个具体
CPU
核分配中断类似性和程序线程类似性。这可让缓存线可在指定的中断和程序线程之间共享。
:::
::: para
具体 IRQ 数的中断近似性值是保存的相关的
`/proc/irq/IRQ_NUMBER/smp_affinity`{.filename} 文件中，您可以作为 root
用户查看并修改该值。保存在这个文件中的值是一个十六进制字节掩码，代表系统中所有
CPU 核。
:::
::: para
例如：要为四核服务器指定以太网驱动程序，首先要确定与该以太网驱动程序关联的
IRQ 数：
:::
``` screen
# grep eth0 /proc/interrupts
32:   0     140      45       850264      PCI-MSI-edge      eth0
```
::: para
使用 IRQ 数定位正确的 *`smp_affinity`* 文件：
:::
``` screen
# cat /proc/irq/32/smp_affinity 
f
```
::: para
smp_affinity 的默认值为 `f`{.literal}，即可为系统中任意 CPU 提供
IRQ。将这个值设定为 `1`{.literal}，如下，即表示只有 CPU 0
可以提供这个中断：
:::
``` screen
# echo 1 >/proc/irq/32/smp_affinity
# cat /proc/irq/32/smp_affinity
1
```
::: para
可使用逗号为不连续的 32 位组限定 *`smp_affinity`* 值。在有 32
个以上核的系统有这个要求。例如：以下示例显示在一个 64
核系统的所有核中提供 IRQ 40。
:::
``` screen
# cat /proc/irq/40/smp_affinity
ffffffff,ffffffff
```
::: para
要只在 64 核系统的上 32 核中提供 IRQ 40，请执行：
:::
``` screen
# echo 0xffffffff,00000000 > /proc/irq/40/smp_affinity
# cat /proc/irq/40/smp_affinity
ffffffff,00000000
```
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
在支持[*中断操作*]{.emphasis}的系统中，修改 IRQ 的 *`smp_affinity`*
设置硬件以便决定在不影响内核的情况下，硬件层为具体 CPU 提供中断服务。
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#main-cpu.html#s-cpu-numa-enhancements}4.4. 红帽企业版 Linux 6 中 NUMA 的改进 {.title}
:::
::: para
红帽企业版 Linux 6
包括大量改进以便充分利用当今高度可扩展的硬件。本小节对由红帽企业版 Linxu
6 提供的大多数与 NUMA 相关的重要性能改进进行概述。
:::
::: section
::: titlepage
## [⁠]{#main-cpu.html#idm140329725952752}4.4.1. 裸机和可扩展性优化 {.title}
:::
::: section
::: titlepage
### [⁠]{#main-cpu.html#idm140329725951984}4.4.1.1. 拓扑识别改进 {.title}
:::
::: para
以下改进可让红帽企业版 Linux
探测底层硬件和架构详情，提高其在系统中进行自动优化的功能。
:::
::: variablelist
[提高的拓扑探测]{.term}
:   ::: para
    这可让操作系统探测到引导时的底层硬件详情（比如逻辑
    CPU，超线程，核，插槽，NUMA
    节点以及节点间访问时间），并优化系统进程。
    :::
[完全公平调度程序]{.term}
:   ::: para
    这个新的调度模式可以保证在有效进程间平均分配运行时间。这个模式与拓扑探测联合使用可将进程在同一插槽的
    CPU 中调度以避免昂贵的远程内存访问，同时保证随时保留缓存内容。
    :::
[`malloc`{.methodname}]{.term}
:   ::: para
    `malloc`{.methodname}
    现在已经优化，可保证分配给某个进程的内存区尽量接近执行该内存的核。这样可以增加内存访问速度。
    :::
[skbuff I/O 缓存分配]{.term}
:   ::: para
    与 `malloc`{.methodname} 类似，现已将其优化为使用与处理 I/O
    操作（比如设备中断）的 CPU 最接近的内存。
    :::
[设备中断亲和性]{.term}
:   ::: para
    设备驱动程序记录的关于哪个 CPU
    处理哪个中断的信息可用来限制在同一物理插槽中的 CPU
    处理的中断，保留缓存亲和性并限制高容量跨插槽通讯。
    :::
:::
:::
::: section
::: titlepage
### [⁠]{#main-cpu.html#idm140329722407824}4.4.1.2. 改进多核处理器同步 {.title}
:::
::: para
协调多个处理器之间的任务需要频繁、耗时的操作以便保证平行执行的进程不会损害数据完整性。红帽企业版
Linux 包括以下改进以提高此方面的性能：
:::
::: variablelist
[读-拷贝-更新（RCU）锁]{.term}
:   ::: para
    通常 90% 的锁定是用于只读目的。RCU
    锁定移除了在未修改数据访问时获得独家访问锁定的要求。这个锁定模式现已用于页缓存分配：现在锁定只可用于分配或者取消分配动作。
    :::
[按 CPU 以及按插槽进行计算的算法]{.term}
:   ::: para
    很多算法已更新至在同一插槽的合作 CPU
    之间执行锁定协作以便允许更细致地调整锁定。大量全局自旋锁已使用按插槽锁定方法替换，且更新的内存分配程序区以及相关的内存页列表可在执行分配或者取消分配操作时让内存分配逻辑贯穿更有效的内存匹配数据结构子集。
    :::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#main-cpu.html#idm140329771705136}4.4.2. 虚拟化优化 {.title}
:::
::: para
因为 KVM 使用内核功能，所以基于 KVM
的虚拟机可立即受益于所有裸机优化。红帽企业版 Linux
还包括大量可让虚拟机进入逻辑性能层的改进。这些改进注重存储和网络访问中的
I/O
路径，甚至可以让加强负荷（比如数据库以及访问服务）利用虚拟的部署。可提高虚拟系统性能的针对
NUMA 的改进包括：
:::
::: variablelist
[CPU pinning]{.term}
:   ::: para
    可将虚拟机捆绑到具体插槽中以便优化本地缓存使用，并删除昂贵的插槽间通讯和远程内存访问的需要。
    :::
[透明大页面（THP）]{.term}
:   ::: para
    启用 THP 后，系统可为大量连续内存自动执行 NUMA
    可识别的内存分配要求，减少内存锁竞争量和所需转移后备缓冲器（TLB）内存管理操作，并可在虚拟机中将性能提高达
    20%。
    :::
[基于内核的 I/O 实施]{.term}
:   ::: para
    虚拟机 I/O
    子系统现在已在内核中部署，这样可极大降低节点间通讯和内存访问，方法是避免大量上下文切换，减少同步和通讯费用。