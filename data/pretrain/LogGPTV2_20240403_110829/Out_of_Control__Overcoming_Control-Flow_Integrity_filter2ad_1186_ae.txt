### Gadget Distribution in Application-Specific PE Files

In our dataset, we analyzed the largest application-specific PE (Portable Executable) files to identify the presence of gadgets. Our findings indicate that the number of such gadgets is significantly smaller compared to the total number of available gadgets. However, functions of particular interest to attackers remain accessible. The limited number of these gadgets suggests that it may be feasible to develop a mitigation technique by completely eliminating the ability to call sensitive functions through code-reuse.

### Size Distribution of Gadgets

Figures 8 and 9 illustrate the frequency distribution of gadget sizes for gadgets without and with branches, respectively, in Internet Explorer 9. Surprisingly, we observed a significant number of smaller gadgets, indicating that ROP (Return-Oriented Programming) attacks under CFI (Control-Flow Integrity) are more similar to conventional ROP than previously thought. An interesting observation from Figure 8 is a peak at gadgets with 21 instructions. This peak is due to a block in the `ole32.dll` library, which contains 1021 pointers (JMPs) pointing to it.

### Discussion

#### A. Other Vulnerable Defenses

**kBouncer [34]**
kBouncer monitors a process to detect function returns to addresses not preceded by a call instruction, leveraging the Last Record Branch (LBR) hardware feature introduced in Intel architectures. kBouncer can prevent conventional ROP attacks because they use small gadgets and do not attempt to restrict the gadget pool. However, gadget chains described in this paper would evade detection as they exhibit different behavior.

kBouncer also introduces a heuristic based on the observation that ROP attacks perform an excessive number of returns without calls. This heuristic could detect gadget chains consisting entirely of CS-R (Call-Site Return) gadgets. Nevertheless, we believe that using CS-F-R (Call-Site Function Return) or CS-IC-R (Call-Site Indirect Call Return) gadgets to call a function could potentially bypass this heuristic. Further experimentation is needed to validate this hypothesis.

**G-free [35]**
G-free recompiles a program and performs transformations to eliminate gadgets, enforce aligned code, and prevent code from jumping in the middle of a function. This is achieved by setting a random cookie during function entry and checking its integrity at function exit. This mitigation breaks all CS gadgets used in this paper, as a CS gadget transfers control to a call-site without entering the function normally. However, EP (Entry Point) gadgets can still work, making attacks like `ret2libc` [13] possible depending on the vulnerability. Our proof-of-concept exploit shows that while chaining EP gadgets is harder, it is feasible. Further research is required to determine if EP-F-* gadgets could also bypass G-free.

#### B. Possible Defenses

**Shadow Call Stack [14], [36], [22]**
Abadi et al. proposed a shadow call stack, which is securely maintained at runtime to harden CFI. The shadow stack keeps a copy of return addresses stored in the program stack, preventing prospective attackers from overwriting them. For example, using segmentation in x86 CPUs, a feature discontinued in 64-bit CPUs, provides higher security guarantees. However, correctly tracking a shadow stack is challenging due to compiler optimizations, such as tail-call optimization, which can end a function with a call instead of a `ret`.

**ROPDefender [37]**
ROPDefender uses a shadow stack to enforce a call-ret pairing policy, detecting any `ret` instructions not triggered by a call. This approach suffers from the same issues as the shadow call stack and incurs non-negligible overhead.

**Control-Flow Locking (CFL) [38]**
CFL uses locks to preserve CFG (Control-Flow Graph) integrity. It implements a lock operation before indirect control-flow transfers and an unlock operation before valid targets. The locks and unlocks are paired based on computed key values derived from the CFG extracted from source code. CFL detects violations when a lock or unlock operation fails. We believe CFL is a promising direction and could prevent our attack, but it is difficult to apply in the absence of source code.

**Ad-Hoc Defense**
A more ad-hoc defense would focus on preventing the application's text segment and the springboard (in the case of CCFIR) from being writable. While this would not prevent code-reuse, it would raise the bar, as attackers would no longer be able to inject code.

### Related Work

#### A. Advanced Mitigation Techniques

Traditional exploitation techniques, such as stack smashing and code injection, have become difficult due to widespread adoption of stack canaries [3] and Data Execution Prevention (DEP) [2] in modern operating systems. DEP, supported by most modern microprocessor architectures, forces the process to crash if it attempts to execute code placed in data. Therefore, adversaries can only utilize existing code in the process image, leading to techniques like `return-to-libc` [13] and ROP [9].

Defenses against ROP often rely on randomizing a process' layout, such as Address Space Layout Randomization (ASLR) [4]. However, ASLR with low entropy can be brute-forced [30], and in the presence of memory disclosure, attackers can bypass ASLR. Fine-grained randomization techniques, such as in-place randomization [39], breaking the linearity of the address space [40], and shuffling basic code blocks [41], have also been proposed but can fail in the presence of powerful exploits that leak memory [5].

#### B. CFI Research

CFI was introduced as a methodology to enforce the integrity of a program's control-flow graph by prohibiting unseen control flows at runtime. CFI has two major limitations: discovering the complete control-flow graph is not always possible, and applying complete CFI often incurs high performance overhead. Researchers have attempted to relax CFI by applying it directly to binaries [16], [17]. In this paper, we explore how this relaxation degrades the effectiveness of CFI and how adversaries can take advantage of it to bypass CFI protection.

### Conclusion

In this paper, we examined the security implications of looser notions of CFI. These looser notions, while fast, allow certain control flows in a program's execution that were not in its original control-flow graph. We demonstrated that such permissible, but incorrect, control flows enable attackers to launch ROP attacks as powerful as regular ROP. Although the novel ROP chains are based on new types of gadgets, these gadgets are widely available and form a broad and powerful set. A proof-of-concept exploitation against Internet Explorer, bypassing modern CFI implementations, demonstrates the practicality of our techniques.

Given that CFI is one of the most powerful defensive measures against advanced exploitation, our results suggest that a CFI solution based on static analysis alone may not provide comprehensive protection against ROP attacks. New CFI solutions should utilize static information as much as possible, but stricter notions of CFI require runtime information, even though gathering this information incurs performance costs.

### Acknowledgements

We thank anonymous reviewers for their valuable comments. This work was supported by the US Air Force through Contract AFRL-FA8650-10-C-7024, the ERC StG project Rosetta, the FP7-PEOPLE-2010-IOF project XHUNTER (No. 273765), and EU FP7 SysSec (Grant Agreement No. 257007).

### References

[1] N. Joly, “Advanced exploitation of Internet Explorer 10 / Windows 8 overflow (Pwn2Own 2013),” VUPEN Vulnerability Research Team (VRT) Blog, May 2013, http://www.vupen.com/blog/20130522.Advanced_Exploitation_of_IE10_Windows8_Pwn2Own_2013.php.
[2] S. Andersen and V. Abella, “Changes to functionality in Microsoft Windows XP Service Pack 2, part 3: Memory protection technologies, Data Execution Prevention,” Microsoft TechNet Library, September 2004, http://technet.microsoft.com/en-us/library/bb457155.aspx.
[3] C. Cowan, C. Pu, D. Maier, H. Hinton, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, Q. Zhang et al., “StackGuard: Automatic adaptive detection and prevention of buffer-overflow attacks,” in Proceedings of the 7th USENIX Security Symposium, vol. 81, 1998, pp. 346–355.
[4] PaX Team, “Address Space Layout Randomization (ASLR),” 2003, http://pax.grsecurity.net/docs/aslr.txt.
[5] K. Z. Snow, L. Davi, A. Dmitrienko, C. Liebchen, F. Monrose, and A.-R. Sadeghi, “Just-in-time code reuse: On the effectiveness of fine-grained address space layout randomization,” in Proceedings of the 34th IEEE Symposium on Security and Privacy, May 2013.
[6] R. Strackx, Y. Younan, P. Philippaerts, F. Piessens, S. Lachmund, and T. Walter, “Breaking the memory secrecy assumption,” in Proceedings of the 2nd European Workshop on System Security, 2009, pp. 1–8.
[7] F. J. Serna, “CVE-2012-0769, the case of the perfect info leak,” http://zhodiac.hispahack.com/my-stuff/security/Flash_ASLR_bypass.pdf.
[8] C. Evans, “Exploiting 64-bit Linux like a boss,” http://scarybeastsecurity.blogspot.com/2013/02/exploiting-64-bit-linux-like-boss.html.
[9] H. Shacham, “The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86),” in Proceedings of the 14th ACM conference on Computer and Communications security, October 2007, pp. 552–61.
[10] D. Dai Zovi, “Practical return-oriented programming,” SOURCE Boston, 2010.
[11] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi, H. Shacham, and M. Winandy, “Return-oriented programming without returns,” in Proceedings of the 17th ACM conference on Computer and Communications Security, October 2010, pp. 559–72.
[12] T. Bletsch, X. Jiang, V. W. Freeh, and Z. Liang, “Jump-oriented programming: a new class of code-reuse attack,” in Proceedings of the 6th ASIACCS, March 2011, pp. 30–40.
[13] M. Tran, M. Etheridge, T. Bletsch, X. Jiang, V. Freeh, and P. Ning, “On the expressiveness of return-into-libc attacks,” in Proceedings of the 14th international conference on Recent Advances in Intrusion Detection, 2011, pp. 121–141.
[14] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-flow integrity,” in Proceedings of the 12th ACM conference on Computer and Communications Security, 2005, pp. 340–353.
[15] Z. Wang and X. Jiang, “Hypersafe: A lightweight approach to provide lifetime hypervisor control-flow integrity,” in Proceedings of the 2010 IEEE Symposium on Security and Privacy, 2010, pp. 380–395.
[16] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou, “Practical control flow integrity and randomization for binary executables,” in Proceedings of the 1013 Security and Privacy Symposium, 2013, pp. 559–573.
[17] M. Zhang and R. Sekar, “Control flow integrity for COTS binaries,” in 22nd USENIX Security Symposium, 2013.
[18] L. Davi, A. Dmitrienko, M. Egele, T. Fischer, T. Holz, R. Hund, S. Nürnberger, and A.-R. Sadeghi, “MoCFI: A framework to mitigate...