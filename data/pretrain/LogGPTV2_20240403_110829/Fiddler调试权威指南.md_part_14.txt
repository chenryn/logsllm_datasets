找到足够大的连续的地址空间分区来保存请求或响应。当下载大文件时（比如超过100MB的
视频文件）经常会出现这个问题。不管有多少RAM，32位的进程是局限于2GB的地址空间。
87
---
## Page 88
第4章配置Fiddler和客户端
该地址空间的每个对象会导致“碎片”，导致无法通过把可用的内存分块的方式来存储大对象，
如图416所示，因为碎片太小了，无法在连续的分块保存整个响应。
虽然可用的内存很多，内存地址空间碎片导致没
有足够的连续地址空间可以存储新的分块
图4-16
在32位的计算机上，如果在Fiddler的WebSession列表中包含数千个Session，碎片会
导致无法存储小至儿MB的响应。可以通过周期性清空WebSession列表来避免这个问题。此
外，通过工具栏上的KeepOnly对话框可以自动截断WebSession列表，生成固定值到可用磁
盘空间大小的Session。
当Fiddler运行在64位的Windows版本上时，很少会遇到超出内存的错误，因为64位的
地址空间非常大，不可能会填满它或因为碎片导致无法存储大的Session。然面，即使在64
位的计算机上，由于在.NET框架的底层限制，每个请求和响应还是限制为2GB。
在32位的计算机上，当下载大文件时，可以通过在FiddlerScript的OnPeekAtResponse
Headers函数中添加以下代码避免内存越界的错误。以下代码片段会导致超过5MB的文件以
流式发送到客户端，Fiddler不会保存副本：
// This block enables streaming for files larger than 5mb
if (oSession.oResponse.headers.Exists ("Content-Length"))
1
var sLen = oSession.oResponse["Content-Length*];
if (1isNaN(sLen))(
var iLen = parseInt(sLen);
if（iLen>5000000)(
oSession.bBufferResponse = false;
如果是基于FiddlerCore构建或编写Fiddler扩展，可以使用类似的逻辑：
FiddlerApplication.ResponseHeadersAvailable += delegate (Fiddler.Session oS)
88
---
## Page 89
4.6缓存和流式数据流
// This block enables streaming for files 1arger than 5mb
if (oS.oResponse.headers.Exists (*Content-Length*))
int iLen =0;
if (int.TryParse(oS.oResponse["Content-Length"], out iLen))
//File larger than 5mb? Don't save its content
if (iLen>5000000)
oS.bBufferResponse = false:
xoeu es=[poq-suodsa-doxp-bot]so
默认情况下，Fiddler在64位版本的Windows上总是以64位模式运行。在很少情况下，
你可能更希望它在32位模式下运行。举个例子，如果你使用的扩展依赖的本地二进制程序只
有32位形式的模块，就必须以32位模式（如Silverlight 4）运行，或者你的FiddlerScript依
赖于其他的模块没有64位的版本。举个例子，MicrosofLJet.OLEDB.4.0数据库供应商习惯于
编写MicrosofAccess.MDB数据库文件，该文件没有64位形式。要强迫Fiddler在64位的
Windows下以32位模式运行，可使用Fiddler安装文件夹下的ForceCPU.exe工具。
4.6缓存和流式数据流
要支持修改请求和响应，可以对Fiddler进行配置，使它把请求和响应消息发送到目标机
器之前，可以完全缓存它们。
4.6.1请求缓存
当客户端连接到Fiddler，Fiddler会从客户端读取整个HTTP请求。如果设置了断点，请
求会暂停，支持通过Inspector干预。请求继续执行后，会建立服务器连接，Fiddler会把整个
请求传递给服务器。
Fiddler不支持任何机制以“流式”将HTTP请求发送到服务器，因为是从客户端读取请
求一请求在发送前总是完全缓存起来。HTML5WebSockets是这个规则的一个特例一
WebSocket消息是双向流式发送的。
89
---
## Page 90
第4章配置Fiddler和客户端
4.6.2响应缓存
把请求发送到服务器后，Fiddler会读取其响应。有些常见的Web场景（尤其是流式的音
频和视频文件）是受到响应缓存的负面影响，因此Fiddler支持流式响应。流式响应无法使用
Fiddler的Inspcetor进行修改。默认情况下，只有音频响应和视频响应配置成流式处理。你可
以配置所有的响应使用Fiddler工具栏的触发开关配置所有的响应，或者可以通过FiddlerScript
设置Session的bBufferResponse属性为false，基于响应选择性地进行流式处理。
当对响应支持流式处理后，从服务器端读取的每个数据分块会马上传递给客户端应用。
默认情况下，如果客户端应用关闭到Fiddler的连接，Fiddler还是会读取服务端的响应，支持
收集整个响应。如果你希望Fiddler在客户端断开连接时停止下载，只需要设置偏好
fiddler.network. streaming-AbortIfClientAborts 为 true。
对于某个响应，如果取消缓存，FiddlerScript的OnBeforeResponse方法会在响应返回给
客户端之后运行。这种行为（可能令人惊讶）支持不会修改响应的操作（如把响应体以日志
形式写到数据库中），而对于所有Session都能够正常工作。如果你的代码需要确定某个给定
的响应是否是流式的，它可以测试Session的BitFlags：
bool bWasStreamed = oSession.isFlagSet (SessionFlags.ResponseStreamed) ) :
如果你需要在响应体发送到客户端之前修改它，首先必须在处理程序OnBeforeRequest
或OnPeekAtResponseHeaders 中设置oSession.bBufferResponse-true，取消流式处理。
4.6.3COMET
Fiddler的Inspector在从服务器端读取完响应数据后，只会显示响应体。但是，如果服务
器的响应一直都不结束，会发生什么情况呢？这种响应在流式接收数据的电台中发生，在使
用称为COMET的Web编程技术的站点上也会发生。
连接，根据客户端需要把数据推送到客户端。HTML5引I入了一种类似的机制，称为“ServerSent
Events”，它的工作机制和COMET相同。因为服务器的COMET响应都不会真正“结束”，在
该连接上返回的数据对于FiddlerInspector通常是不可见的，直至连接关闭。
要支持查看这样的数据，Fiddler在WebSession的上下文菜单中提供了COMETPeek命令。
当调用该命令，Fiddler会“快照”正在执行的响应，可以从服务器查看读取的部分响应。
Fiddler默认的对响应进行缓存的行为严重影响了依赖于COMET的站点。这是因为在
90
---
## Page 91
4.7HTML5WEBSOCKETS
COMET机制下，服务器的响应永远都不会结束，因此Fiddler对COMET数据流进行缓存通
常只会导致Web应用终止。遗的是，COMET响应没有以任何方式标记，因此如果不想全
局支持流式选项，需要手动从缓存中删除这种响应。
4.7HTML5WEBSOCKETS
HTML5规范引l入了WebSockets，该技术支持客户端和服务器之间的实时socket通信。要
创建WebSocket，首先，客户端建立到服务器的HTTP(S）连接。其次，客户端和服务器握手，
同意在该连接上为后续的数据流使用WebSocket协议。对于纯文本和安全的WebSockets，分别
使用ws://和wss://URIschemes，虽然初始的握手协议是在HTTP或HTTPS上执行的。
要确保通过代理（如Fiddler）发送的WebSocket数据流畅通无阻，首先客户端应该建立
到代理的CONNECT，请求到目标服务器的通道。如果WebSocketURI使用的是加密的wss:/
协议，就执行HTTPS握手：如果使用的是未加密的ws://协议，就忽略这一步。
然后，客户端使用新建立的连接发送HTTPGET请求，请求头Upgrade表示切换到
WebSocket协议。如果服务器统一更改协议，它会发送HTTP/101SwitchingProtocols响应。
通过WebSession列表和Inspector，可以很容易观察到这个过程，如图4-17所示。
Reslt Ruloca
WebSenies
nACo
Hest URL
SET/m
sLoan
ne[TeSe
L1-+因
握手后，客户端和服务器可以以任何顺序互相发送WebSocket消息。和HTTP请求响应
模式不同，服务器会发送WebSocket消息给客户端，无需客户端先发送WebSocket消息给服
务器。因为升级到WebSocket协议后，在连接上不再交换HTTP消息，在WebSession列表以
91
---
## Page 92
第4章配置Fiddler和客户端
及请求或响应Inspectors中不会看到WebSocket消息。
但是，Fiddler无法解析WebSocket 消息，在以后的Fidler版本中会引入新的Inspector
类型，支持显示和修改WebSocket数据流。现在，客户端和服务器的WebSocket消息是在Log
标签中显示的。这些消息是以纯文本形式解析和显示的。
Upgrading Session #47 to websocket
[WebSocket 47] Server->C1ient (12 bytes)
MESSAGE: connected,
FLAGS: 10000001 DATA: 10 bytes.
[WebSocket #47] Client->Server (14 bytes)
MESSAGE: timer,
FLAGS:10000001 DATA:6 bytes, masked using KEY:BD-36-84-D5.
[WebSocket 47] Server->C1ient (23 bytes)
TYPE: TEXT.
MESSAGE: time, 2012/4/30 14:50:38
FLAGS: 10000001 DATA: 23 bytes.
[WebSocket 47] Client->Server (8 bytes)
TYPE: CLOSE.
CLOSE REASON:1001
FLAGS:10001000 DATA:2 bytes, masked using KEY: 25-A2-56-AE.
防止透明代理或其他定义良好但是有bug的中间件带来的攻击，客户端的WebSocket消
息通常是对消息文本根据掩码（maskingkey）进行异或运算得出的掩码文本，客户端运行的
JavaScript脚本看不到该掩码。当以日志形式记录客户端的WebSockets消息时，Fiddler通常
会对掩码文本进行解密，以使于阅读。
由于标准的finalize方法和浏览器都会实现该规范，将有更多的网站会基于WebSockets
构建。到时，Fiddler会进行更新，从而更好地支持新协议。
4.8Fiddler和HTTPS
当在Fiddler上访间HTTPS网站时，默认情况下看到的内容不多。我们看不到期望的请
92
---
## Page 93
4.8Fiddler 和 HTTPS
求和响应列表，可以看到一个或多个CONNECT通道，如图4-18所示。
ReltProtocol
Host UFL
Body
Tunnel towww.fidder2.com:443
2200HTTP
Tunnel tossl.google-analytics.com:443
0
图4-18
HTTPS协议是在HTTP请求和底层的TCP/IP网络连接之间添加一层加密的（SSL或TLS）
连接，请求在该加密的连接上发送。由于使用了加密的协议，可以防止网络中间件或观察者
查看或修改HTTP数据流。
你可能会惊讶地发现通过合理配置Fiddler，可以查看和修改HTTPS数据流。Fiddler通
自己是服务器：而和服务器对话时，Fiddler会“假装”自己是客户端。
HTTPS协议的设计就是通过使用数字证书来认证HTTPS服务器（也可以选择客户端），
从而阻止攻击。当客户端从服务器接收到证书，它会通过挂接到客户端和操作系统都信任的
RootCertificationAuthority，验证证书本身是值得信任的。因为通常是在本地计算机上运行
Fiddler，可以重新配置浏览器或操作系统，使它信任Fiddler的根证书。所以，客户端应用检
测到数据流是由Fiddler生成的根证书保护时，就不会弹出信息。
要在Fiddler中启用HTTPS数据流解密，可点击Tools>FiddlerOptions。在HTTPS选项
卡上，选中DecryptHTTPStraffic对话框，如图4-19所示。
Fiddler Options
GeneraHTPSBaderarsCorectorsAcoeaace
Fiddleris ableto deryptHTTPS sesions by re-sigring traficsing esef-generte cetiicate
 Capture TTPS CONNECT
gnore seer certiate rs
Srie decryptienferthefollowing hosts
et Roet CentietDesie
SK
图4-19
93
---
## Page 94
第4章配置Fiddler和客户端
当你启用HTTPS解密，Fiddler会生成自签名的根证书以及匹配的私有密钥。Fiddler会为每个
信任Fiddler根证书
生成根证书后，Fiddler会弹出对话框，让你选择是否将其添加到Windows的受信任的根
证书权威库中。把根证书添加到受信任的库中可以使得浏览器和其他应用认为Fiddler后面生
成的HTTPS服务器证书是有效的。它可以阻止浏览器显示警告信息，避免应用由于“信任错
误”而导致连接失败。
Fiddler和Windows会弹出警告信息，为不了解受信任证书含义的用户进行说明，如图4-20
所示。
WARNING:Sharp Edges!ReadCaretully
口
FdergeneratesunigeretCAcerticatettecptHTPSaflc.
ONLYdocenacnputered exdusrely for TEST purposes.
Ysdeeyevey
Tnust theFdderRoot certiicate?YeNo
图4-20
如果点击Yes，Windows会弹出对话框，要求确定以下变化，如图4-21所示。
D0,NOT,TRsST,Fidderleot
etfcei
Dr you want te instal tis cetiliatel
图4-21
6
---
## Page 95
4.8Fiddler和HTTPS
这些警告信息故意说得很“吓人”，但是实际的风险是非常小的。每个Fiddler根证书都
是为每台计算机唯一生成的，这样确保其他Fiddler用户没有相同的根证书，从而提高安全性。
因此，根证书不会因为在本地计算机上运行的恶意软件面被滥用。如果你的计算机已经被恶
意软件感染，那就要考虑更大的问题。
在Windows8上的计算机范围的信任
在Windows8上，Metro风格的应用不会信任Fiddler的根证书，除非该根证书是在计算
机信任的根证书库中。因此，在执行完前面几个步骤把证书添加到用户信任的根证书库中后，
Fiddler会启动管理程序，把根证书添加到计算机库中，如图4-22所示。
User Account Control
Filt origin
Changt.nhn,theunstifsaties
图4-22
如果点击Yes启动该工具，将确定操作，如图423所示。