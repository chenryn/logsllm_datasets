The following code, which is derived from an example, functions correctly with AngularDart version 2.0.0-alpha.27 (after updating the injector):

```dart
@View(
  template: '''
    My name: {{ myName }}
    Friends:
    <ul>
      <li *ngFor="let name of friendNames">
        {{ name }}
      </li>
    </ul>
    <p *ngIf="friendNames.length > 3">You have many friends!</p>
  ''',
  directives: const [NgFor, NgIf]
)
```

However, when using AngularDart versions `>= 2.0.0-alpha.28` or `2.0.0-alpha.29`, the code fails with the following error:

```
Unsupported directive record
```

Additionally, with AngularDart version `2.0.0-alpha.30`, the code fails with a more specific error message:

```
Unsupported directive record in [friendNames in ...]
```

### Suggested Improvements

1. **Template Clarity**: Ensure that the template is properly formatted and clearly structured.
2. **Error Handling**: Provide more context or steps to resolve the errors for different AngularDart versions.
3. **Version Compatibility**: Clearly state the compatibility and any necessary changes for different versions.

### Revised Code

```dart
@View(
  template: '''
    <div>
      <h3>My name: {{ myName }}</h3>
      <h4>Friends:</h4>
      <ul>
        <li *ngFor="let name of friendNames">
          {{ name }}
        </li>
      </ul>
      <p *ngIf="friendNames.length > 3">You have many friends!</p>
    </div>
  ''',
  directives: const [NgFor, NgIf]
)
```

### Notes on Version Compatibility

- **AngularDart 2.0.0-alpha.27**: The provided code works as expected after updating the injector.
- **AngularDart 2.0.0-alpha.28 and 2.0.0-alpha.29**: The code fails due to an "Unsupported directive record" error. This may be due to changes in the directive handling. Consider checking the release notes for these versions and updating the directives accordingly.
- **AngularDart 2.0.0-alpha.30**: The code fails with a more specific error related to the `friendNames` binding. Ensure that the `friendNames` property is correctly defined and accessible within the component.

By following these suggestions, you can improve the clarity and maintainability of your code, and address the issues encountered with different AngularDart versions.