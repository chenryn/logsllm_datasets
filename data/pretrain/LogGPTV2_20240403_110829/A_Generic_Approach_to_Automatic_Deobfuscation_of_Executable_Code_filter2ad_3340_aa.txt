title:A Generic Approach to Automatic Deobfuscation of Executable Code
author:Babak Yadegari and
Brian Johannesmeyer and
Ben Whitely and
Saumya Debray
2015 IEEE Symposium on Security and Privacy
2015 IEEE Symposium on Security and Privacy
A Generic Approach to Automatic Deobfuscation of Executable Code
Babak Yadegari
Brian Johannesmeyer
Benjamin Whitely
Saumya Debray
Department of Computer Science
The University of Arizona
{babaky, bjohannesmeyer, whitely, debray}@cs.arizona.edu
Tucson, AZ 85721
Abstract—Malicious software are usually obfuscated to avoid
detection and resist analysis. When new malware is encountered,
such obfuscations have to be penetrated or removed (“deobfus-
cated”) in order to understand the internal logic of the code
and devise countermeasures. This paper discusses a generic
approach for deobfuscation of obfuscated executable code. Our
approach does not make any assumptions about the nature of the
obfuscations used, but instead uses semantics-preserving program
transformations to simplify away obfuscation code. We have
applied a prototype implementation of our ideas to a variety
of different kinds of obfuscation,
including emulation-based
obfuscation, emulation-based obfuscation with runtime code
unpacking, and return-oriented programming. Our experimental
results are encouraging and suggest that this approach can be
effective in extracting the internal logic from code obfuscated
using a variety of obfuscation techniques, including tools such as
Themida that previous approaches could not handle.
Keywords-Deobfuscation; Virtualization-Obfuscation; Return
Oriented Programming
I. INTRODUCTION
Malicious software are usually deployed in heavily ob-
fuscated form, both to avoid detection and also to hinder
reverse engineering by security analysts. Much of the research
to date on automatic deobfuscation of code has focused on
obfuscation-speciﬁc approaches. While important and useful,
such approaches are of limited utility against obfuscations
that are different from the speciﬁc ones they target, and
therefore against new obfuscations not previously encountered.
We aim to address this problem via a generic semantics-based
approach to deobfuscation; in particular, this paper focuses
on two very different kinds of programming/obfuscation tech-
niques that can be challenging to reverse engineer: emulation-
based obfuscation and return-oriented programming.
In emulation-based obfuscation, the computation being ob-
fuscated is implemented using an emulator for a custom-
generated virtual machine together with a byte-code-like rep-
resentation of the program’s logic [1]–[4]. Examination of the
obfuscated code reveals only the emulator’s logic, not that of
the emulated code. Existing techniques for reverse engineering
emulation-obfuscated code ﬁrst reconstruct speciﬁcs of the
virtual machine emulator, then use this to decipher individual
byte code instructions, and ﬁnally recover the logic embedded
in the byte code program [5]. Such approaches typically make
strong assumptions about the structure and properties of the
emulator and may not work well if the analyzer’s assumptions
do not ﬁt the code being analyzed, e.g., if parts of the emulator
are unpacked at runtime [4] or if there are multiple layers of
interpretation with distinct virtual program counters that are
difﬁcult to tease apart. The work of Coogan et al. [6] has
similar goals to us, but is based on equational reasoning about
assembly-level instruction semantics, which is technically very
different from our work (see Section VI) and has the short-
coming that controlling the equational reasoning process can
be challenging, making it difﬁcult to recover the logic of the
underlying computation into a program representation such as
control ﬂow graphs.
A second class of programs that can be challenging to
reverse-engineer are return-oriented programs (ROP) [7], [8].
While originally devised to bypass defenses against code
injection, this programming technique can result in highly
convoluted control ﬂow between many small gadgets, leading
to program logic that can be tricky to decipher. Other than the
work of Lu et al. [9], there has been little work on automatic
deobfuscation of ROPs.
This paper describes a generic approach to deobfuscation of
executable code that is conceptually simpler and more general
than those described above. Obfuscation-speciﬁc approaches
have the signiﬁcant limitation that they can only be effective
against previously-seen obfuscations; they are, unfortunately,
of limited utility when confronted by new kinds of obfusca-
tions or new combinations of obfuscations that violate their
assumptions. Our work on generic deobfuscation is motivated
by the need for deobfuscation techniques that can be effective
even when applied to previously unseen obfuscations. The
underlying intuition is that the semantics of a program can be
understood as a mapping, or transformation, from input values
to output values. Deobfuscation thus becomes a problem of
identifying and simplifying the code that effects this input-
to-output transformation. We use taint propagation to track
the ﬂow of values from the program’s inputs to its outputs,
and semantics-preserving code transformations to simplify the
logic of the instructions that operate on and transform values
through this ﬂow. We make few if any assumptions about
the nature of the any obfuscation being used, whether that
be emulation, or ROP, or anything else. Experiments using
several emulation-obfuscation tools, including Themida, Code
Virtualizer, VMProtect, and ExeCryptor, as well as a number
of return-oriented implementations of programs, suggest that
the approach is helpful
in reconstructing the logic of the
original program.
© 2015, Babak Yadegari. Under license to IEEE.
© 2015, Babak Yadegari. Under license to IEEE.
DOI 10.1109/SP.2015.47
DOI 10.1109/SP.2015.47
674
674
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:09:00 UTC from IEEE Xplore.  Restrictions apply. 
II. BACKGROUND
A. Emulation-based Obfuscation
In emulation-based obfuscation, a program P is represented
using the instruction set of virtual machine VP and interpreted
using a custom emulator IP for VP . A common representation
choice for P is as a sequence of byte code instructions
BP for VP , where the emulator IP uses the familiar fetch-
decode-execute loop of byte-code interpreters; however, other
interpreter implementations, such as direct or indirect thread-
ing, are also possible. The instruction set for VP can be
perturbed randomly such that different instances of VP look
very different even if the program P does not change. Further,
emulation can be combined with other obfuscations, such as
run-time code unpacking, to further complicate analysis.
Reverse engineering of emulation-obfuscated code is chal-
lenging because examining the code for the emulator IP
reveals very little about the logic of the original program P ,
which is actually embedded in the byte-code program BP . For
example, an execution trace of the emulator IP on the byte-
code program BP will show only the instructions in the emula-
tor IP . Memory accesses in this trace will contain a mixture of
the data manipulation behavior of the original program P and
memory operations pertaining to the operation of the emulator
IP ; teasing these apart to isolate the memory operations of
only the original program P , or only the emulator IP , can be
challenging. Control transfers in the trace, similarly, will be
a mixture of those stemming from the logic of P and those
corresponding to the dispatch loop of IP .
B. Return-Oriented Programming
Return-oriented programming (ROP) was introduced as a
way to bypass Data Execution Prevention and other defenses
against code injection attacks [7], [8]. It uses a multitude of
“gadgets,” which are small snippets of code ending in return
instructions, that are present in the existing code in a computer
system, whether in the kernel, libraries, or running applica-
tions. Each gadget achieves a small piece of computational
functionality. The gadgets are strung together by writing their
addresses as a contiguous sequence into a buffer that is then
used to effect a chain of return actions: each return then causes
the invocation of the next gadget in the buffer. This basic idea
has been generalized in various ways to obviate the need for
explicit return instructions [10], [11].
There are a number of characteristics of ROPs that can
make reverse engineering challenging. The ﬁrst is that the
code for a ROP can be scattered across many different
functions and/or libraries, making it difﬁcult to discern the
logical structure of the code. If these libraries employ Address
Space Layout Randomization, or are loaded into dynamically
allocated memory, they may occur at different addresses. ROP
sequences can take advantage of this fact by being generated
just-in-time for the attack, making it difﬁcult to examine what
the ROP sequence will do without knowledge of the memory
space of the target machine. Secondly, since ROP gadgets are
constructed opportunistically from whatever code is already
available on a system, they may contain “useless” instructions
(from the gadget’s perspective) that can be tolerated as long
as they do not interfere with the desired functionality of the
gadget. However, this opens up the possibility that the same
gadget can be invoked in different ways at different times,
where a given instruction within the gadget may serve a
useful purpose in some invocations and be useless in others.
Finally, gadgets can overlap in memory in ways not usually
encountered in ordinary programs.
C. Threat Model
Our threat model assumes that the adversary knows our
semantics-based approach to deobfuscation as described in
this paper, as well as some—but not necessarily all—of
the transformation rules used for trace simpliﬁcation. The
latter assumption is justiﬁed by the fact that our approach
is parameterized by the set of transformation rules used, and
these rules do not form a static set but can be augmented with
new rules as needed or desired.
III. OUR APPROACH
We use the term deobfuscation to refer to the process of
removing the effects of obfuscation from a program—i.e.,
given an obfuscated program P , analyzing and transforming
the code for P to obtain a program P (cid:2) that is functionally
equivalent to P but is simpler and easier to understand.
A. Overview
Any approach to deobfuscation needs to start out by
identifying something in the code (or its computation) as
“semantically signiﬁcant;” this is then used as the basis
for subsequent analysis. For example, when disassembling
obfuscated binaries, Kruegel et al. begin by identifying control
transfer instructions [12]. Automatic unpacking tools such as
Renovo [13] look for memory locations that are written to and
then executed. More directly relevant to this work, Sharif et
al. use memory access characteristics of emulation-obfuscated
code to identify the emulator’s virtual program counter, which
they then use to reverse-engineer the emulator [5]. Typically,
such notions of semantic signiﬁcance are based on speciﬁc
aspects of the code that are either preserved by the obfuscation
(e.g., control transfers in the work of Kruegel et al. [12])
or else are introduced by the obfuscation (e.g., write-then-
execute memory locations for unpacked code [13], emulator
components in the work of Sharif et al. [5]). In each case, the
notion of what constitutes semantically signiﬁcant code, and
the process of identifying such code, is intimately tied to the
particular obfuscation(s) being considered.
While such obfuscation-speciﬁc assumptions may simplify
the process of deobfuscation, they have two drawbacks. First,
such assumptions limit
the future applicability of the de-
obfuscation technique to new and as-yet-unseen types of
obfuscation. Second, they may provide an adversary a point
of attack against the deobfuscation technique by perturbing
existing obfuscation techniques in a way that violates the
675675
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:09:00 UTC from IEEE Xplore.  Restrictions apply. 
binary
input
Collect
Instructions Trace
T1
Generate other inputs
Path Exploration
Concolic Execution
Constraint Solver
Flow Analysis
Initial CFG
Forward/Backward
Taint Analysis
Control
Dependencies
T2
Code Simpliﬁcation
Transformations
T3
Construct
Final CFG
Final CFG
Fig. 1. Overview of the deobfuscation. T1 is the original trace, consisting of instructions and register values. T2 is a trace with taint analysis and control
dependence information and T3 is a simpliﬁed trace from which a ﬁnal control ﬂow graph is constructed.
assumptions (an example we encountered recently is illustrated
in Figure 10 and discussed in Section VI).
In our case, therefore, we want to minimize assumptions
about the obfuscated code; in particular, we do not want to
presuppose that any particular kind of obfuscation is being
used. Since the identiﬁcation of semantically signiﬁcant code
is typically closely tied to the obfuscations under considera-
tion, this poses a quandary: what can be considered signiﬁcant
without making assumptions about what obfuscations are
being used? To address this, we take an approach inspired
by a notion of program semantics where programs are seen
as mappings, or transformations, from inputs to outputs [14].
Since malicious code often involves self-modifying and/or
dynamically unpacked code, which is difﬁcult
to analyze
statically, we use dynamic analysis: we collect one or more
execution traces of the program, then analyze and simplify
these traces. Our approach consists of the following steps:
a) Identifying Input and Output Values: We consider the
notion of “input” broadly so as to comprise values obtained
from the command line and execution environment of the pro-
cess (e.g., the Process Environment Block, which is sometimes
used by malware to check whether it is being debugged or
otherwise monitored, e.g., see [15]) as well as those obtained
via explicit input operations; similarly, the notion of “output”
is considered to be any externally observable side effect (e.g.,
creation or deletion of ﬁles or processes) as well as the results
of explicit output operations and computations.
In our current prototype implementation, input and output
values are determined as follows. Any value that is obtained
from the command line, or which is deﬁned (written) by a
library routine and subsequently read by an instruction in the
program, is treated as an input value; any value that is deﬁned
(written) by an instruction in the program and subsequently
read by a library routine is treated as an output value.1 Our
dynamic analysis environment, which uses a modiﬁed version
of Ether [16], collects execution traces for library routines as
well as the main program, and the ﬂow of values written within
the program and subsequently read within a library routine,
or vice versa, can be determined by examining the trace. We
use a combination of taint propagation and control-dependence
1This is an over-approximation, since not all library routines interact with
the program’s execution environment, and so may sometimes lead to a loss
in precision of analysis. However, it is conservative.
676676
analysis to identify instructions in the execution trace that are
inﬂuenced by input values and/or inﬂuence output values.
b) Forward taint propagation: After identifying Input
sources, we should propagate the input taint through the trace
to ﬁnd all the instructions which are inﬂuenced by input values.
In order to do this, we use a taint propagation technique which
is a well-known and useful analysis tool in the ﬁelds of static
and dynamic analysis. It turns out that a conventional byte-
level taint analysis is not precise enough for our needs, so
we use an enhanced bit-level taint-analysis [17]. This initial
computation captures explicit information ﬂow from input to
output, but does not capture implicit ﬂows, i.e., associations
between data values that arise due to control dependencies
rather than data dependencies. To this end, we use dependence
analysis to identify control dependencies, which we then
combine with the explicit data dependencies identiﬁed earlier
to capture implicit as well as explicit ﬂow of information from
inputs to outputs.
As mentioned before, dynamic analysis is more powerful
when dealing with self-modiﬁcation or run-time code unpack-
ing but we also need to address the possible low-code coverage
issue resulting from recording one execution path. In order to
solve this problem we have implemented a concolic execution
system which can operate on a trace and produce constraints
to solve for other possible inputs to the program to record
other execution paths. We can feed both the obfuscated trace
and the simpliﬁed one to produce alternative inputs to the
program. There have been many studies on symbolic execution
c) Code Simpliﬁcation: Once we have identiﬁed the
input-to-output value ﬂows, we iteratively apply semantics-
preserving code transformations to simplify the execution
trace. The resulting simpliﬁed trace represents the behavior of
a program that is functionally equivalent to the original pro-
gram (at least for the particular execution that was observed)
but which is simpler.
d) Control Flow Graph Construction: The simpliﬁed
trace is used to construct a control ﬂow graph (CFG) that
makes explicit some of the higher-level control ﬂow structures
such as conditionals and loops. The ﬁnal step of our deobfus-
cation process is to apply semantics-preserving transforma-
tions to the CFG to eliminate some spurious execution paths
and produce a more precise CFG. The resulting simpliﬁed
CFG is then produced as the output of our deobfuscation
system.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:09:00 UTC from IEEE Xplore.  Restrictions apply. 
and multi-path exploration techniques (e.g [18]–[21]) so we
do not discuss the details here. Figure 1 gives a high level
overview of our approach. We discuss each of these steps in
more detail below.
B. Identifying Input-to-Output Flows
The ﬁrst step of our algorithm is to identify the ﬂow of
values from input operations to output operations, and thereby
the instructions that transform input values to output values.
To this end, we ﬁrst use taint propagation to identify the
explicit ﬂow of values from inputs to outputs, then use control
dependence analysis to identify implicit ﬂows.
1) Taint Analysis: Taint analysis ﬁnds many important
applications in dynamic security analysis. We use it to identify
the runtime ﬂow of values from a program’s inputs to its
outputs; this information is then used for control dependency
analysis. The essential idea is to associate each value computed
by the program with a bit indicating whether or not it is
“tainted,” i.e., derived directly or indirectly from an input
value. Initially, only values that are obtained directly from
inputs are marked as tainted. Taint is then propagated itera-
tively to other values by marking any value that is computed
from a tainted value as tainted. There is a considerable body
of literature on taint analysis (e.g., see the paper by Schwartz
et al. [22]) so we omit the details of the algorithm.
Our approach uses two kinds of taint analysis:
1) Forward taint analysis. This is used to identify the ﬂow
of input values through the program. It is especially
important for ﬁnding code that is control dependent on
input values. We perform taint analysis for registers,
memory, and condition-code ﬂags.
2) Backward taint analysis. This starts from output values
and works backwards identifying variables and values
that inﬂuence the program’s outputs. In some ways this
resembles dynamic program slicing where the slicing
criterion is the program’s observable output. This is im-
portant because static statements under dynamic controls
which affect the output should not be simpliﬁed away.
The precision of the forward taint analysis is particularly
important because the rest of the deobfuscation depends sig-
niﬁcantly on how well the taint analysis identiﬁes the decision
points in the program being examined. As discussed in more
detail later, when simplifying the code it is important to iden-
tify static computations whose iteration counts are inﬂuenced
by dynamic input, e.g. loops where the iteration is determined
by input values, and imprecision in taint propagation adversely
affects the deobfuscation of such loops, e.g., under-tainting
leads to too much of the code getting simpliﬁed away, and
over-tainting leads to too little simpliﬁcation.
It turns out that traditional byte- or word-level taint analysis
is too imprecise for our needs and can result in signiﬁcant over-
tainting. To address this problem, we use an enhanced taint-
analysis that differs from conventional taint analyses in two
ways. First, in order to deal with obfuscated code—including
obfuscations that scramble together the bits from different
words—we maintain and propagate taint information at the