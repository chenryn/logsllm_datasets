# sed and awk: Text Processing Examples and Best Practices

## sed: Stream Editor for Filtering and Transforming Text

### Capturing Groups
- **Example 1: Capitalizing the First Letter of Each Word**
  ```bash
  $ echo 'john doe' | sed 's/\b\(\w\)/\U\1/g'
  John Doe
  ```

- **Example 2: Adding Parentheses Around the First Letter of Each Word**
  ```bash
  $ echo 'Dog Cat Pig' | sed 's/\b\(\w\)/(\1)/g'
  (D)og (C)at (P)ig
  ```

### Notes on Regular Expressions in `sed`
- Parentheses and braces must be escaped.
- Brackets are not escaped.
- `\d` and `+` are not supported in `sed` regular expressions.

### Exercise: Formatting Phone Numbers
- **Goal**: Convert all strings of 10 digits to the format `(###) ###-####`.
- **Conceptual Solution**:
  ```bash
  s/(\d{3})(\d{3})(\d{4})/(\1) \2-\3/g
  ```
- **Actual `sed` Command**:
  ```bash
  s/\([0-9]\{3\}\)\([0-9]\{3\}\)\([0-9]\{4\}\)/(\1) \2-\3/g
  ```

### Exercise: Trimming Whitespace
- **Trim Leading Whitespace**:
  ```bash
  $ sed -i 's/^[ \t]*//' t.txt
  ```
- **Trim Trailing Whitespace**:
  ```bash
  $ sed -i 's/[ \t]*$//' t.txt
  ```
- **Trim Leading and Trailing Whitespace**:
  ```bash
  $ sed -i 's/^[ \t]*//;s/[ \t]*$//' t.txt
  ```

### Adding a Comment Line to a File
- **Command**:
  ```bash
  1s/^/\/\/ Copyright FooCorp\n/
  ```
- **Explanation**:
  - Prepends `// Copyright FooCorp\n` to the first line.
  - `1` restricts the operation to the first line.
  - `^` matches the start of the line.

### Shebang Example
- **Function to Add Shebang and Make File Executable**:
  ```bash
  function shebang {
    sed -i '1s/^/#!\/usr\/bin\/env python\n\n' $1
    chmod +x $1
  }
  ```
- **Explanation**:
  - Prepends `#!/usr/bin/env python` to the file.
  - Makes the file executable.

### Deleting Lines with `sed`
- **Delete Lines Containing "foo"**:
  ```bash
  $ sed -i '/foo/ d' file
  ```
- **Delete Lines Starting with "#"**:
  ```bash
  $ sed -i '/^#/ d' file
  ```
- **Delete First Two Lines**:
  ```bash
  $ sed -i '1,2 d' file
  ```
- **Delete Blank Lines**:
  ```bash
  $ sed '/^$/ d' file
  ```
- **Delete Up to the First Blank Line (e.g., Email Header)**:
  ```bash
  $ sed '1,/^$/ d' file
  ```

### Real-Life Example: Removing Unnecessary Imports
- **Command**:
  ```bash
  $ find src/test/ -name *.java | xargs sed -i '/import junit.framework.Assert;/d'
  ```

### Summary of `sed`
- With only `s` (substitute) and `d` (delete) commands, `sed` can be very useful.
- Combining `sed` with `find` enhances its utility.
- As your regular expression skills improve, so does your ability to use `sed` effectively.
- The syntax often matches that of `vi`.

## awk: A Text Processing Language

### Introduction
- **Creators**: Alfred Aho, Peter Weinberger, and Brian Kernighan.
- **Pronunciation**: "awk".

### Basic Usage
- **Print the Entire Line**:
  ```bash
  $ echo 'Jones 123' | awk '{print $0}'
  Jones 123
  ```
- **Print the First Field**:
  ```bash
  $ echo 'Jones 123' | awk '{print $1}'
  Jones
  ```
- **Print the Second Field**:
  ```bash
  $ echo 'Jones 123' | awk '{print $2}'
  123
  ```

### Example: Server Log File
- **Log Entry Format**:
  ```plaintext
  fcrawler.looksmart.com [26/Apr/2000:00:00:12] "GET /contacts.html HTTP/1.0" 200 4595 "-"
  ```

### Built-in Variables
- **NR**: Number of Records (lines).
- **NF**: Number of Fields.
- **Example**:
  ```bash
  $ awk '{print NR, $(NF-2)}' server.log
  1 200
  2 200
  ```

### Structure of an `awk` Program
- **Basic Syntax**:
  ```bash
  condition { actions }
  ```
- **Example: Print the Total Number of Records**:
  ```bash
  $ awk 'END { print NR }' server.log
  9
  ```
- **Example: Print the First Field if it Matches a Pattern**:
  ```bash
  $ awk '$1 ~ /^[0-9]+.*/ { print $1,$7}' server.log
  123.123.123.123 6248
  123.123.123.123 8130
  ```

### Changing Delimiters
- **Set Field Separator to Colon**:
  ```bash
  $ awk 'BEGIN {FS = ":"} ; {print $2}' file
  ```
- **Or from the Command Line**:
  ```bash
  $ awk -F: '{ print $2 }' file
  ```

### Extracting Dates from Server Logs
- **Extract Date**:
  ```bash
  $ awk '{ print $2 }' server.log
  [26/Apr/2000:00:00:12]
  ```
- **Remove Square Brackets**:
  ```bash
  $ awk '{ print $2 }' server.log | awk -F: '{print $1}' | sed 's/\[//'
  26/Apr/2000
  ```

### Maintaining State in `awk`
- **Total Bytes Transferred**:
  ```bash
  $ awk '{ b += $(NF-1) } END { print b }' server.log
  1585139
  ```
- **Total Bytes Transferred to a Specific Client**:
  ```bash
  $ awk '$1 ~ /^fcraw.*/ { b += $(NF-1) } END { print b }' server.log
  21311
  ```

### Example: Identifying Classes with High Comment Density
- **One-Liner to Identify Classes More than 50% Comments**:
  ```bash
  $ awk '$1 == "//" { a+=1 } END { if (a*2 > NR) {print FILENAME, NR, a}}' file
  ```
- **Execute on All Java Files**:
  ```bash
  $ find src -name '*.java' -exec awk '$1 == "//" { a+=1 } END { if (a * 2 > NR) {print FILENAME, NR, a}}' {} \;
  ```

### Summary of `awk`
- **NF**: Number of Fields.
- **NR**: Number of Records.
- **FILENAME**: Filename.
- **BEGIN, END**: Special events.
- **FS**: Field Separator (or `-F` option).
- **Syntax**:
  ```bash
  awk 'condition { actions }'
  ```

### Additional Resources
- For slides and helpful links, visit: [http://wilsonericn.wordpress.com](http://wilsonericn.wordpress.com)
- To find me at Nationwide: WILSOE18
- To find me on Twitter: @wilsonericn