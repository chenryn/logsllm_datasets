This Learning Unit covers the following Learning Objectives:
• Understand the fundamentals of password cracking
• Mutate wordlists
• Explain the basic password cracking methodology
• Attack password manager key files
605 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Web_application_firewall
606 (Fail2Ban, 2022), https://www.fail2ban.org/wiki/index.php/Main_Page
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 386
Made in Morocco
Penetration Testing with Kali Linux
• Attack the passphrase of SSH private keys
In this Learning Unit, we’ll focus on password cracking, beginning with a discussion of the
fundamentals. We’ll explore the process of mutating existing wordlists with Rules, discuss a basic
cracking methodology, and crack passwords for database files and passphrases for SSH private
keys.
13.2.1 Introduction to Encryption, Hashes and Cracking
In this section, we’ll examine the differences between encryption607 and hash algorithms608 and
discuss password cracking. Then, we’ll review two popular password cracking tools: Hashcat609
and John the Ripper (JtR).610 Finally, we’ll calculate the time it takes to crack certain hashes.
y
PEN-100 contains a dedicated Module about Cryptography, which is a great
resource for the basic discussion presented here.
k
To begin, let’s discuss the basics of encryption. Encryptison is a two-way function, in which data is
“scrambled” (encrypted) or “unscrambled” (decrypted) with at least one key. Encrypted data is
known as a ciphertext.611
o
Symmetric encryption612 algorithms use the same key for both encryption and decryption. To
send a message to another person, both sides need to know the key (password). If they exchange
n
the key via an insecure channel, an attacker may intercept it. Additionally, the attacker may use a
Man-in-the-middle613 attack to gain access to the encrypted messages sent between the
communication partners. With bothi the intercepted key and access to the encrypted messages,
the attacker can decrypt and rezad them. This creates a huge security risk since the whole
communication’s security is based on the knowledge of a key, which needs to be known by both
sides before starting commDunication. The Advanced Encryption Standard (AES)614 is an example
of a symmetric encryption algorithm.
Asymmetric encryption615 uses distinct key pairs containing private and public keys. Each user in
this transaction has their own key pair. To receive an encrypted message, a user provides their
public key to the communication partner, which they use to encrypt their message for us. When
the message is sent, only the corresponding private key can decrypt the message. A common
asymmetric encryption algorithm is Rivest–Shamir–Adleman (RSA).616
607 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Encryption
608 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Hash_function
609 (Hashcat, 2022), https://hashcat.net/hashcat/
610 (OpenWall, 2022), https://www.openwall.com/john/
611 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Ciphertext
612 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Symmetric-key_algorithm
613 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Man-in-the-middle_attack
614 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Advanced_Encryption_Standard
615 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Public-key_cryptography
616 (Wikipedia, 2022), https://en.wikipedia.org/wiki/RSA_(cryptosystem)
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 387
Made in Morocco
Penetration Testing with Kali Linux
On the other hand, a hash (or digest) is the result of running variable-sized input data (in this case
a plaintext password) through a hash algorithm (such as SHA1617 or MD5618).
The result is a practically unique fixed-length hexadecimal value that represents the original
plaintext. In other words, plaintext run through a specific hashing algorithm always produces the
same hash and the resulting hash is (statistically) unique. The only exception to this is the
extremely rare hash collision619 in which two input values result in the same hash value.
A majority of commonly used hash algorithms such as MD5 and SHA1 are cryptographic hash
functions.620 These hash algorithms are one-way functions,621 meaning that it’s trivial to generate
a hash, but a proper algorithm’s implementation makes it prohibitively difficult to get the plaintext
from the hash. For this Module, we’ll discuss cryptographic hash functions unless stated
otherwise.
Hashing is often leveraged in the information security field. For example, if a user registers an
y
account through an application, they set a password. The password is often hashed and stored in
a database so that the site administrators (and attackers) can’t access the plaintext password.
k
When a login attempt is made, the entered password is hashed and that hash is compared to the
hashed value in the database. If they match, the entesred password is correct and the user is
logged in.
Within the scope of password attacks, applicatioon and user passwords are often encrypted or
hashed to protect them.
n
To decrypt an encrypted password we must determine the key used to encrypt it. To determine
the plaintext of a hashed password, we must run various plaintext passwords through the
hashing algorithm and compare tihe returned hash to the target hash. These attacks are
collectively known as password czracking, and are often performed on a dedicated system. Since
the process can take a considerable amount of time, we often run it in parallel with other activities
during a penetration test.
D
Unlike the basic dictionary attacks against network services and login forms demonstrated in the
previous Learning Unit, password cracking conserves network bandwidth, does not lock accounts
and is not affected by traditional defensive technologies.
We can perform basic password cracking with a simple example. Let’s assume that we gained
access to a SHA-256622 password hash of
5b11618c2e44027877d0cd0921ed166b9f176f50587fc91e7534dd2946db77d6. There are various
ways we could have gained access to this hash, but either way we can use sha256sum to hash
various passwords and examine the results. In this case, we will hash the string “secret”, then
hash “secret” again, and finally hash the string “secret1”. We’ll use echo -n to strip the newline
from our string (which would have been added to our string, modifying the hash).
617 (Wikipedia, 2022), https://en.wikipedia.org/wiki/SHA-1
618 (Wikipedia, 2022), https://en.wikipedia.org/wiki/MD5
619 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Hash_collision
620 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Cryptographic_hash_function
621 (Wikipedia, 2022), https://en.wikipedia.org/wiki/One-way_function
622 (Wikipedia, 2022), https://en.wikipedia.org/wiki/SHA-2
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 388
Made in Morocco
Penetration Testing with Kali Linux
kali@kali:~$ echo -n "secret" | sha256sum
2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b -
kali@kali:~$ echo -n "secret" | sha256sum
2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b -
kali@kali:~$ echo -n "secret1" | sha256sum
5b11618c2e44027877d0cd0921ed166b9f176f50587fc91e7534dd2946db77d6 -
Listing 258 - Comparing resulting hash values for secret and secret1
In this example, we hashed “secret” twice to show that the resulting output hash is always the
same. Notice that the hashes for the “secret” and “secret1” are completely different even though
the input strings are similar. Also note that the hash for “secret1” matches our captured hash.
This means that we have determined the plaintext password (“secret1”) associated with that
hash. Very cool.
y
However, this is a very simple and awkward way to crack password hashes. Fortunately there are
much better tools available. Hashcat and John the Ripper (JtR) are two of the most popular
k
password cracking tools. In general, JtR is more of a CPU-based cracking tool, which also
supports GPUs, while Hashcat is mainly a GPU-based cracking tool that also supports CPUs. JtR
s
can be run without any additional drivers using only CPUs for password cracking. Hashcat
requires OpenCL623 or CUDA624 for the GPU cracking process. For most algorithms, a GPU is much
faster than a CPU since modern GPUs contain thoousands of cores, each of which can share part
of the workload. However, some slow hashing algorithms (like bcrypt625) work better on CPUs.
n
It’s important to become familiar with different tools since they don’t support the same
algorithms. We’ll examine both tools in this Module.
i
Before we begin cracking passwords, let’s calculate the cracking time of various hash
z
representations. The cracking time can be calculated by dividing the keyspace626 with the hash
rate.
D
The keyspace consists of the character set to the power of the amount of characters or length of
the original information (password). For example, if we use the lower-case Latin alphabet (26
characters), upper case alphabet (26 characters), and the numbers from 0 to 9 (10 characters),
we have a character set of 62 possible variations for every character. If we are faced with a five-
character password, we are facing 62 to the power of five possible passwords containing these
five characters.
Since it’s important to be able to calculate this, let’s use a terminal to calculate the keyspace for a
five-character password by echoing our character set to wc with -c to count every character. We
will again specify -n for the echo command to strip the newline character. We can then use
python3 for the calculation, with -c to execute the calculation and print to display the result.
kali@kali:~$ echo -n "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
| wc -c
62
623 (Wikipedia, 2022), https://en.wikipedia.org/wiki/OpenCL
624 (Nvidia, 2022), https://developer.nvidia.com/cuda-toolkit
625 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Bcrypt
626 (Hypr, 2022), https://www.hypr.com/security-encyclopedia/key-space
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 389
Made in Morocco
Penetration Testing with Kali Linux
kali@kali:~$ python3 -c "print(62**5)"
916132832
Listing 259 - Calculating the keyspace for a password of length 5
For a five-character password and the specified character set, we have a keyspace of
916,132,832. This number determines how many unique variations can be generated for a five-
character password with this character set. Now that we have the keyspace in the context of this
example, we also need the hash rate to calculate the cracking time. The hash rate is a measure of
how many hash calculations can be performed in a second.
For find the hash rate, we can use Hashcat’s benchmark mode to determine the hash rates for
various hash algorithms on our particular hardware.
We’ll use hashcat with -b to initiate benchmark mode. First, we’ll benchmark a CPU by running it in
y
a Kali VM without any GPUs attached. Following along on a local Kali system, the results may
differ.
k
kali@kali:~$ hashcat -b
hashcat (v6.2.5) starting in benchmark mode
s
...
* Device #1: pthread-Intel(R) Core(TM) i9-10885H CPU @ 2.40GHz, 1545/3154 MB (512 MB
allocatable), 4MCU
o
Benchmark relevant options:
=========================== n
* --optimized-kernel-enable
------------------- i
* Hash-Mode 0 (MD5)
z
-------------------
Speed.#1.........: 450.D8 MH/s (2.19ms) @ Accel:256 Loops:1024 Thr:1 Vec:8
----------------------
* Hash-Mode 100 (SHA1)
----------------------
Speed.#1.........: 298.3 MH/s (3.22ms) @ Accel:256 Loops:1024 Thr:1 Vec:8
---------------------------
* Hash-Mode 1400 (SHA2-256)
---------------------------
Speed.#1.........: 134.2 MH/s (7.63ms) @ Accel:256 Loops:1024 Thr:1 Vec:8
Listing 260 - Benchmark CPU with MD5, SHA1, and SHA2-256
The benchmark displays hash rates for all supported modes of Hashcat. The listing above is
shortened, since Hashcat supports many hash algorithms. For now, we are only interested in
MD5, SHA1, and SHA-256. The values of the hash rates are in MH/s in which 1 MH/s equals
1,000,000 hashes per second. Note that results will vary on different hardware. Let’s make a note
of the hash rates shown in the CPU benchmark in this Listing and run a GPU benchmark so we
can compare the results.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 390
Made in Morocco
Penetration Testing with Kali Linux
For the following benchmark, we’ll use a different system with an attached GPU. Again, we’ll use
the benchmark mode of Hashcat to calculate the hash rates for MD5, SHA1, and SHA-256.
A GPU benchmark test can not be run in the lab.
C:\Users\admin\Downloads\hashcat-6.2.5>hashcat.exe -b
hashcat (v6.2.5) starting in benchmark mode
...
* Device #1: NVIDIA GeForce RTX 3090, 23336/24575 MB, 82MCU
Benchmark relevant options:
===========================
y
* --optimized-kernel-enable
-------------------
k
* Hash-Mode 0 (MD5)
-------------------
s
Speed.#1.........: 68185.1 MH/s (39.99ms) @ Accel:256 Loops:1024 Thr:128 Vec:8
o
----------------------
* Hash-Mode 100 (SHA1)
----------------------
n
Speed.#1.........: 21528.2 MH/s (63.45ms) @ Accel:64 Loops:512 Thr:512 Vec:1
i
---------------------------
z
* Hash-Mode 1400 (SHA2-256)
---------------------------
D
Speed.#1.........: 9276.3 MH/s (73.85ms) @ Accel:16 Loops:1024 Thr:512 Vec:1
Listing 261 - Benchmark GPU with MD5, SHA1, and SHA2-256
Let’s compare our GPU and CPU hash rates.
Algorithm GPU CPU
MD5 68,185.1 MH/s 450.8 MH/s
SHA1 21,528.2 MH/s 298.3 MH/s
SHA256 9,276.3 MH/s 134.2 MH/s
Listing 262 - Comparison of GPU and CPU hash rates
This highlights the speed improvement offered by GPUs. Now that we have all values we need,
let’s calculate the cracking time required for our five-character password.
In this example, we’ll calculate the cracking time for SHA256 with the keyspace of 916,132,832,
which we calculated previously. We already know that 1 MH/s equals 1,000,000 hashes per
second. Therefore, we can again use Python to calculate CPU and GPU cracking times. The first
command uses the SHA-256 hash rate of the CPU calculated in Listing 260, and the second
command uses the SHA-256 hash rate of the GPU calculated in Listing 261. The output format of
our calculations will be in seconds.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 391
Made in Morocco
Penetration Testing with Kali Linux
kali@kali:~$ python3 -c "print(916132832 / 134200000)"
6.826623189269746
kali@kali:~$ python3 -c "print(916132832 / 9276300000)"
0.09876058687192092
Listing 263 - Calculating the cracking time for password length of 5
The output shows that we can calculate all possible hashes for this keyspace in under one
second with a GPU, and in approximately seven seconds on a CPU.
Let’s use the same character set but with an increased password length of 8 and 10 to get a
better understanding for how cracking time scales versus password length. For this, we’ll use the
GPU hash rate for SHA-256 for our calculations.
kali@kali:~$ python3 -c "print(62**8)"
218340105584896 y
kali@kali:~$ python3 -c "print(218340105584896 / 9276300000)"
k
23537.41314801117
kali@kali:~$ python3 -c "print(62**10)" s
839299365868340224
o
kali@kali:~$ python3 -c "print(839299365868340224 / 9276300000)"
90477816.14095493
Listing 264 - Calculating the cracking time for password length of 8 and 10 on a GPU for SHA-256
n
The output shows that when converted from seconds, it will take a GPU approximately 6.5 hours
to attempt all possible combinations for an eight-character password, and approximately 2.8
i
years for a ten-character password, after converting the output from seconds.
z
Note that increasing password length increases cracking duration by exponential time, while
increasing password compDlexity (charset) only increases cracking duration by polynomial time.627
This implies that a password policy encouraging longer passwords is more robust against
cracking, compared to a password policy that encourages more-complex passwords.
In this section, we discussed encryption and hashing, and we benchmarked various hash
algorithms on a CPU and a GPU. Finally, we familiarized ourselves with the process of calculating
cracking time.
13.2.2 Mutating Wordlists
Password policies, which have grown in prevalence in recent years, dictate a minimum password
length and the use of character derivations including upper and lower case letters, special
characters, and numerical values.
Most passwords in the commonly-used wordlists will not fulfill these requirements. If we wanted
to use them against a target with strong password policies, we would need to manually prepare
the wordlist by removing all passwords that do not satisfy the password policy or by manually
modifying the wordlist to include appropriate passwords. We can address this by automating the
627 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Time_complexity#Polynomial_time
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 392
Made in Morocco
Penetration Testing with Kali Linux
process of changing (or mutating) our wordlist before sending them to this target in what is
known as a rule-based attack.628 In this type of attack, individual rules are implemented through