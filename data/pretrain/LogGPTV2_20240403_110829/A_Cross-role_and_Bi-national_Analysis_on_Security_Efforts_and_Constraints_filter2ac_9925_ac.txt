and the others were excluded from the analysis as recommended
by Fabrigar et al. [10]. We calculated Cronbach’s alpha for each
group to validate the results of the question grouping. In addition,
the Kaiser-Meyer-Olkin (KMO) measure [18] was calculated to test
the sampling adequacy in the factor analysis.
EFA was performed for questions about security efforts (E1-E15)
and security constraints (C1-C11). The questions about security
awareness (A1-A5) were excluded from the EFA because the KMO
value was less than 0.5 (KMO=0.49), and we considered the results
were inappropriate for EFA. The results of the factor analysis are
shown in Tables 2 and 3.
We grouped 12 of the 15 questions on security efforts into three
factors. Plan/Design describes the extent to which security efforts
are conducted in upstream processes such as planning and design-
ing in the development process (e.g., security requirements are de-
fined in the requirement definition phase). Implementation describes
the status of security efforts during the implementation phase in
the development process (e.g., use of secure coding guidelines).
Vulnerability assessment describes the status of security efforts for
vulnerability assessments. Three questions did not conform to any
factor.
The 11 questions about security constraints were grouped into
four factors. Lack of resources describes how a lack of resources hin-
ders security in development projects. Unconcerned about security
describes security constraints caused by unconcern about security
353ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Fumihiro Kanei, Ayako Akiyama Hasegawa, Eitaro Shioji, and Mitsuaki Akiyama
Table 2: Results of factor analysis for questions about secu-
rity efforts. KMO = 0.91
Variables
(Questions about security effort)
Plan/Design (α = 0.83)
E14. Our project can extend a schedule if a security issue has been
identified.
E3. Our project performs a risk analysis of vulnerabilities that might
occur during software development. (e.g., handling of critical data, use
of third-party code such as OSS, etc.)
E1. Our project defines the security requirements that the software must
meet.
E2. Our project performs a threat risk analysis. (e.g., identifying potential
attack vectors, identifying common attack techniques, etc.)
E4. Our project designs the software so that even if a vulnerability is
attacked by an attacker, any damage can be mitigated/minimized.
Implementation (α = 0.78)
E5. Our project has a document/checklist that we need to follow for our
software to be secure. (e.g., secure coding guide, security cheat sheet,
etc.)
E10. Our project assesses that security requirements are met during
code review.
E7. Our project uses a tool to check whether secure coding practices
are incorporated.
Vulnerability assessment (α = 0.71)
E12. Our project leverages an outsourced security assessment service.
E8. Our project uses an automated tool to perform vulnerability assess-
ment to the software we develop.
E13. Our project continuously checks latest vulnerability information
available to the public. (e.g., CVE, security white paper, etc.)
E11. Our project has an in-house security assessment team.
Security efforts not belonging to any factor
E9. Our project manually performs vulnerability assessment to the
software we develop.
E15. Our project prioritizes tasks to ensure security over other tasks.
E6. Our project makes use of security mechanisms (APIs) included in
existing libraries and frameworks to help guarantee software security.
(e.g., implementing error handling by using an existing library)
Factor
loading
1.02
0.70
0.68
0.61
0.52
1.02
0.93
0.50
0.87
0.75
0.73
0.54
Table 3: Results of factor analysis for questions about secu-
rity constraints. KMO = 0.91
Variables
(Questions about security constraints)
Lack of Resources (α = 0.90)
C3. Our project does not have enough people to ensure software security.
C4. Our project does not have enough budget to ensure software secu-
rity.
C2. Our project does not have enough knowledge to ensure software
security.
C1. Our project does not have enough time to ensure software security.
C5. Our project defers software security due to competing priorities.
Unconcerned about security (α = 0.68)
C6. In our project, software security is not mandated by our client.
C7. Our project is not aware of the security measures (e.g., tools, frame-
works, development methods) that meet requirements of the software
we develop.
No authority / Conservative (α = 0.62)
C10. I do not have the authority to decide to introduce security measures
(e.g., tools, frameworks, development methods).
C11. Our project has been following the same development process for
years and we cannot easily change it for ensuring security.
Difficulty of introducing sec. measures (α = 0.61)
C8. In our project, it takes a lot of time and effort to make a decision to
introduce security measures (tools, frameworks, development methods).
C9. For our project, existing security measures (e.g., tools, frameworks,
development methods) are useful for enhancing security, but not cost-
effective from the viewpoint of the cost of implementation/operation.
Factor
loading
0.91
0.85
0.77
0.73
0.54
0.94
0.60
0.86
0.63
1.01
0.65
group to see if they had different tendencies regarding their an-
swers to security-related questions. In this analysis, we used a
Figure 1: Answers to questions on security awareness, ef-
forts, and constraints from the US participants
in development projects. No authority/Conservative describes the
difficulty of changing the current development process and how
lack of decision-making authority interferes with security. Diffi-
culty of introducing security describes the difficulty of introducing
new security measures into a development project.
When performing statistical tests in subsequent analyses, we
used variables for each factor by averaging the answer of questions
belonging to the same factor. Note that the average scores are cal-
culated using numerical scores, +2 (strongly agree) to −2 (strongly
disagree), assigned to each option of a Likert scale.
4.3 RQ1. Development characteristics and
security
We investigated how characteristics of development projects im-
pact the security of developed software. Specifically, we divided
the answers into groups in accordance with the results of answers
to questions on development characteristics and compared each
Software is easily attacked[A2]Incentive of attack is high[A3]No vulnerabilities will occur[A5]Take adequate sec. measures[A4]Software security is important[A1]Outsourcing sec. assessment[E12]Prioritize sec. tasks[E15]Automated vuln. assessment[E8]Tools for secure coding[E7]Check latest vuln. info.[E13]In-house sec. assessment team[E11]Manual vuln. assessment[E9]Design attack-resilient sw[E4]Perform threat risk analysis[E2]Perform vuln. risk analysis[E3]Make use of sec. docs.[E5]Sec. checks in code review[E10]Extend schedule[E14]Make use of secure APIs[E6]Define sec. requirements[E1]020406080100% of participantsUnaware of sec. measures[C7]Not enough knowledge[C2]Not enough time[C1]Not enough budget[C4]Competing priorities[C5]Not enough people[C3]Sw. sec. is not mandated[C6]No decision-making authority[C10]Cannot change dev. process[C11]No cost-effective measures[C9]Decision-making is difficult[C8]Strongly agreeAgreeNeither agree nor disagreeDisagreeStrongly disagree354A Cross-role and Bi-national Analysis on Security Efforts and Constraints of Software Development Projects
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Figure 2: Comparison of security efforts between user scope
*w/sig diff (p<.05)
Mann-Whitney U test to investigate whether there was a signif-
icant difference between two groups and used a Kruskal-Wallis
test for three and more groups. The significance level used for the
tests was 0.05. When a significant difference was observed in a
Kruskal-Wallis test, we conducted a multiple comparison using a
Dunn test to see if there were any significant differences for each
combination of groups. In the multiple comparison, we used the
significance level 0.05 adjusted with Bonferroni correction, i.e., 0.05
divided by the number of groups. Note that the analysis results in
Sections 4.3.1, 4.3.2, and 4.3.3 are for participants in the US.
4.3.1 Characteristic 1: User scope. For this analysis, we divided
the answers into two groups on the basis of user scopes: used
by general public users (N =81, 26%) and limited to specific users
(N =220, 72%). Figure 2 shows the results of a comparison between
the two groups. We observed significant differences in Vulnerability
assessment (U =6540.0, p<.05, r=-0.13). The above results suggest
that, in a project developing software to be used by limited and
specific users, security efforts for vulnerability assessment tend to
be inadequate because software development professionals in these
projects believe the risk of attack is low. The following free-format
answers from participants who developed software with limited
users support the above statement: “Project is an in-house system
without access to PII, and with little damage potential.” and “Our
application has limited exposure to users outside our team.”
4.3.2 Characteristic 2: Contractual relationship. We divided an-
swers into two groups on the basis of contractual relationships:
in-house development (N =64, 21%) and contracted development
(N =242, 79%). The results of a comparison between the two groups
regarding security constraints are shown in Figure 3. We observed
a significant difference in No authority/Conservative (U =15826.5,
p<.01, r=0.35). This suggests that developers and managers in
projects located in the lower part of a contractual hierarchy are less
likely to be able to make security efforts at their own discretion,
possibly due to requests or priorities made from their contractor.
This finding is supported by some free-format answers from par-
ticipants who selected contracted development, as they stated that
some constraints are caused by prioritizing non-security-related
requests given by their clients (product owners). An example was
“Sometimes our client doesn’t demand for security features.”
Figure 3: Comparison of security constraints between con-
tractual relationships *w/sig diff (p<.05)
Figure 4: Comparison of security effort between develop-
ment methods *w/sig diff (p<.05), **w/sig diff (p<.01)
4.3.3 Characteristic 3: Development method. For this analysis, we
divided the answers into three groups on the basis of the project’s
development method: Waterfall (N =37, 12%), Agile (N =145, 47%),
and Hybrid (N =99, 32%). We observed a significant difference in
R1 (resources spent on security, H(3)=12, p<.01). The results of a
multiple comparison test revealed a significant difference between
Hybrid and Agile (Z=2.4, p<.05), as well as between Hybrid and
Waterfall (Z=2.7, p<.05), suggesting that Hybrid involves spending
more resources on security than other development methods. Fig-
ure 4 shows the results of a comparison between development meth-
ods regarding security efforts. We observed a significant difference
in Vulnerability assessment (H(3)=12.9, p<.01). Subsequent multiple
comparison tests confirmed significant differences between Wa-
terfall and Agile (Z=2.3, p<.05), as well as between Waterfall and
Hybrid (Z=3.3, p<.01). This indicates that the projects using Water-
fall tend to involve less security effort for vulnerability assessments
than projects using Agile or Hybrid. Although some prior stud-
ies [7, 8] emphasize the security problems in Agile development,
we had a different result where Waterfall involved less security
effort. Although the reason for this difference is not clear from the
survey results, additional qualitative analysis such as interviews
with software development professionals may help clarify the cause.
21012Mean Likert-scale scoreVuln. assessment *Implementation Plan/Design General public usersLimited to specific users21012Mean Likert-scale scoreDifficulty of introducing sec. No authority/Conservative *Unconcerned about sec. Lack of resources In-house developmentContracted development***355ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Fumihiro Kanei, Ayako Akiyama Hasegawa, Eitaro Shioji, and Mitsuaki Akiyama
Figure 5: Answers to questions about constraints that prevent security (C1–C11)
4.4 RQ2. Difference between developers and
managers
By comparing the results between developers and managers, we
investigated whether there are any gaps between their security
behavior and awareness. We used the Mann-Whitney U test to
investigate if there are significant differences between the two,
with the same significance level used in Section 4.3. Note that the
analysis results in Sections 4.4.1 and 4.4.2 are for participants in the
US.
Security constraints of developers and managers. Figure 5
4.4.1
shows the results for C1–C11 (constraints that prevent security).
The left and right graphs show the results for managers and devel-
opers, respectively, and the values for each question are sorted by
the sum of the numbers of answers selected “Strongly agree” or
“Agree.” For both managers and developers, there were relatively
few answers that agreed with constraints related to deficiency of
resources spent on security such as time or budget (C1–C4), which
are, in contrast, identified in existing works [6, 41] as constraints.
In addition, C8 (decision-making is difficult), C9 (no cost-effective
measures), and C11 (cannot change dev. process) were strong se-
curity constraints for both developers and managers. Focusing on
developers, constraints related to decision-making (C8, C10) were
in the top three security constraints. Our survey specifically tar-
geted managers having decision-making authority over security
efforts (at least “partially”) with our participants screening; never-
theless, for C10, a few managers answered that they did not have
security-related decision-making authority. This could be, for ex-
ample, because their security decision-making authority is diverse
and that the participants may not have had the authority depending
on the type or details of the security efforts. Also, another possible
reason could be that they cannot make some types of security ef-
forts due to constraints from stakeholders outside of projects (e.g.,
clients).
Figure 6 shows the results of comparison between developers
and managers regarding security constraints. Since significant dif-
ferences were observed between developers and managers for all
factors on security constraints (Lack of resources: U =13673.5, p<.01,
r=0.23, Unconcerned about security: U =13365.0, p<.01, r=0.16, No
Figure 6: Comparison of security constraints between devel-
opers and managers *w/sig diff (p<.05), **w/sig diff (p<.01)
authority/Conservative: U =15826.5, p<.01, r=0.35, Difficulty of in-
troducing security: U =12752.0, p<.01, r=0.14), developers tend to
consider security-related constraints more than managers do. In
addition, we observed that there was a particularly large difference
in scores for No authority/Conservative. These results suggest that,
even when developers feel the need for security, they do not have
authority over managing development resources or deciding the
development process or priorities. This suggests that that develop-
ers cannot make the security efforts they want to because of their
position and that they strongly feel constrained about it.
4.4.2 Understanding of project efforts. We analyzed the numbers
of answers for which “Not sure” was selected for E1–E15 to see
how well the managers and developers understood the security
efforts in their projects (see Figure 8 in Appendix C). Note that
we analyzed the case where participants explicitly selected the
option “Not sure” and excluded empty answers. Throughout E1–
E15, developers tended to answer “Not sure” more than managers,
and more than 5% of developers selected “Not sure” for in E7 (tools
for secure coding) and E12 (outsourcing sec. assessment). This
result suggests that developers are less likely than managers to
understand the project’s overall security efforts.
020406080100% of participantsNo decision-making authority[C10]Unaware of sec. measures[C7]Not enough knowledge[C2]Not enough time[C1]Competing priorities[C5]Not enough budget[C4]Not enough people[C3]Sw. sec. is not mandated[C6]Cannot change dev. process[C11]No cost-effective measures[C9]Decision-making is difficult[C8]ManagerStrongly agreeAgreeNeither agree nor disagreeDisagreeStrongly disagree020406080100% of participantsUnaware of sec. measures[C7]Not enough knowledge[C2]Not enough time[C1]Not enough budget[C4]Competing priorities[C5]Sw. sec. is not mandated[C6]Not enough people[C3]Cannot change dev. process[C11]No cost-effective measures[C9]No decision-making authority[C10]Decision-making is difficult[C8]Developer21012Mean Likert-scale scoreDifficulty of introducing sec. *No authority/Conservative **Unconcerned about sec. **Lack of resources **ManagerDeveloper356A Cross-role and Bi-national Analysis on Security Efforts and Constraints of Software Development Projects
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
4.5 RQ3. Difference between the US and Japan
By comparing the results of questionnaires from participants in the
US and Japan, we analyzed whether there is a difference in secu-
rity behavior and awareness of software development personnel
between Japan and the US. Specifically, we conducted the same
analysis described in Sections 4.3 and 4.4 for the Japanese partic-
ipants to see if there were any differences in the results between
the two countries.
Security efforts and constraints. Figure 7 shows the results
4.5.1
of a comparison for security efforts and constraints between Japan
and the US. Significant differences were observed in all the factors
for security efforts and security constraints. This indicates that
people in projects in Japan tend to conduct less security effort
and feel more constrained than people in projects in the US. The
causes of these results are not clear, but as explained in Section 1,
one reason may be the differences in contractual relationships and
development methods between the US and Japan. Our future work
is to clarify the causes of these results through qualitative analysis
such as interviews with software development professionals.
4.5.2 Development characteristics. We conducted analyses simi-
lar to those in Sections 4.3.1, 4.3.2, and 4.3.3 for participants in
Japan and compared the results with those of the participants in the
US. Regarding the user scopes of developed software, significant
differences were observed among all factors for security efforts
(Plan/Design: U =8087.0, p<.05, r=-0.14, Implementation: U =8471.5,
p<.01, r=-0.22, Vulnerability assessment: U =7837.0, p<.01, r=-0.23),