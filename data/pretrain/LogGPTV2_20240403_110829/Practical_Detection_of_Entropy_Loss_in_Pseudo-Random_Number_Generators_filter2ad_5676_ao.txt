— 65 —
Chapter 4. Robustness of Pseudo-random Number Generators with Inputs
be Sd := S0 · X d +Pd−1
Proof. We prove the preserving security of G by reduction to the standard security of G.
Let G0 be the original security game PRES: the game outputs a bit which is set to 1 if and
$← {0, 1}n, the
only if the adversary guesses the challenge bit b∗ = b. If the initial state is S0
seed is seed = (X, X0), and the adversarial samples are Id−1, . . . , I0 (indexed in reverse order
where Id−1 is the earliest sample) then the refreshed state that incorporates these samples will
j=0 Ij · X j. As long as X 6= 0, the value Sd is uniformly random (over the
choice of S0).
We consider the sequence of games G0, G1, G2, G3, where G1, G2, G3 are all modiﬁcations of game
G0 = PRES, whose procedures are illustrated in Figure 4.8 (note that we remove the common
ﬁnalize procedure in all the descriptions of the games).
In game G1 the challenger simply picks Sd
$← {0, 1}n uniformly at random and we have
| Pr[G0 = 1] − Pr[G1 = 1]| ≤ 2−n.
Let U = [Sd · X0]m1 be the value computed by the challenger during the computation (S, R) ←
6= 0, the value U is uniformly
next(Sd) when the challenge bit is b = 0. Then, as long as X0
$←
random (over the choice Sd). Therefore, we can deﬁne G2 where the challenger choose U
{0, 1}n during this computation and we have:
| Pr[G1 = 1] − Pr[G2 = 1]| ≤ 2−n.
Finally (S, R) = next(Sd, seed) = G(U). Then (S, R) is (t, εG) indistinguishable from uniform.
Therefore we can consider a modiﬁed G3 where the challenger just choosing (S, R) at random
even when the challenge bit is b = 0. Since the adversary runs in time t0 ≈ t, we have:
| Pr[G3 = 1] − Pr[G2 = 1]| ≤ εG.
Since G3 is independent of the challenge bit b, we have Pr[G3 = 1] = 1
2 and therefore
| Pr[G0 = 1] − 1
2| ≤ εG + 2−n+1.
r εext))-
Proposition 5. The pseudo-random number generator with input G has (t0, qr, γ∗, (εG+q2
recovering security.
Proof. We prove the recovering security of G (a) using that H is a strong randomness extractor
and (b) by reduction to the standard security of G.
Let G0 be the original security game RECOV(qr, γ∗): the game outputs a bit which is set to 1 if
and only if the adversary guesses the challenge bit b∗ = b.
We consider the sequence of games G0, G1, G2, where G1, G2 are all modiﬁcations of game
G0 = RECOV, whose procedures are illustrated in Figure 4.9.
We deﬁne G1 where, during the challenger’s computation of (S∗, R) ← next(Sd) for the challenge
$← {0, 1}m uniformly at random rather than setting U := [X0 · Sd]m1 . We
bit b = 0, it picks U
argue that:
| Pr[(G0) = 1] − Pr[(G1) = 1]| ≤ q2
r εext.
The loss of q2
r comes from the fact that the adversary can choose the index k and the value d
adaptively depending on the seed. In particular, assume that the above does not hold. Then
— 66 —
4.4. Impossibility Results
there must exist some values k∗, d∗ ∈ [qr] such that the above distance is greater than εext
conditioned on the adversary making exactly k∗ calls to get-refresh and choosing d∗ refreshes
in the game. We show that this leads to a contradiction. Fix the distribution on the subset of
samples ¯I = (Ik∗+1, . . . , Ik+d∗) output by D during the ﬁrst step of the game, which must satisfy
H∞(¯I | γ1, . . . , γqr , z1, . . . , zqr) ≥ γ∗.
By Lemma 6, the function hX,X0(¯I) is a (γ∗, εext)-extractor, meaning that (X, X0, hX,X0(¯I)) is
εext-close to (X, X0, Z) where Z is random an independent of X, X0. Then, for any ﬁxed choice
of k∗, d∗, the way we compute U in G0:
U := [X0 · Sd]m1 = [X0 · S0X d]m1 + hX,X0(¯I)
is εexst close to a uniformly random U as chosen in G1. This leads to a contradiction, showing
that the equation holds.
Finally, we deﬁne G2 where, during the challenger’s computation of (S∗, R) ← next(Sd) for the
challenge bit b = 0, it chooses (S∗, R) uniformly at random instead of (S∗, R) ← G(U) as in G1.
Since the adversary runs in time t0 ≈ t, we have:
| Pr[G2 = 1] − Pr[G1 = 1]| ≤ εG.
Since G2 is independent of the challenge bit b, we have Pr[G2 = 1] = 1
2 and therefore:
| Pr[G0 = 1] − 1
2| ≤ εG.
4.4
Impossibility Results
A Generic Impossibility Result.
It is important to notice that there is an impossibil-
ity result when independence between the randomness source and the seed is not guaran-
teed. Consider any pseudo-random number generator with input G with an input length
p ≥ 2, consider a distribution sampler D, where the samples Ii, i = 1,··· qr are such that
I0 is uniform and [next(refresh(seed, S0, I))]0 = 1, hence H∞(I0) ≈ p − 1, I1 is uniform and
[next(refresh(seed, S1, I1))]0 = 1, where S1 = refresh(seed, S0, I0), hence H∞(I1 | I0) ≈ p− 1, and
generally, [next(refresh(seed, Sj, Ij))]0 = 1, where Sj = refresh(seed, Sj−1, Ij−1), and
H∞(Ij | I1, . . . , Ij−1) ≈ p − 1.
Let us consider an adversary A against the security of G that chooses the distribution D and
that makes the following oracle queries in the security game ROB: one call to set-state(0), qr
calls to D-refresh, one call to next-ror. Then the ﬁrst bit of the last output will always be equal
to 0 and the adversary A breaks the robustness of the generator.
Impossibility Result for the Robust Construction. A more explicit impossibility result
can also be pointed out for the secure robust construction described in Section 4.3. In the secure
construction, seed is composed of two parts (X, X0), where X, X0 ∈ F2n, the input I ∈ F2n and
the state S ∈ F2n. Consider the distribution sampler D where Ij is sampled uniformly from
{0, X j−qr}.
Let us consider an adversary A against the security of the generator that chooses the distribution
— 67 —
Chapter 4. Robustness of Pseudo-random Number Generators with Inputs
proc. initialize(D)
(X, X0) $← setup;
σ0 ← 0;
$← {0, 1};
b
FOR k = 1 TO qr DO
(σk, Ik, γk, zk) ← D(σk−1)
proc. next-ror
U = [Sd · X0]m1
(S(0), R(0)) ← G(U)
(S(1), R(1)) $← {0, 1}n+‘
RETURN (S(b), R(b))
Game G0 = RECOV
proc. next-ror
$← {0, 1}m
U
(S(0), R(0)) ← G(U)
(S(1), R(1)) $← {0, 1}n+‘
RETURN (S(b), R(b))
Game G1
proc. next-ror
(S(0), R(0)) $← {0, 1}n+‘
(S(1), R(1)) $← {0, 1}n+‘
RETURN (S(b), R(b))
Game G2
proc. getinput
k ← k + 1
OUTPUT Ik
proc. set-state(S∗)
S0 ← S∗
c ← 0
proc. D-refresh
k ← k + 1;
Sj := Sj−1 · X + Ik;
IF c < γ∗,
c = min(c + γk, n)
proc. getinput
k ← k + 1
OUTPUT Ik
proc. set-state(S∗)
S0 ← S∗
c ← 0
proc. D-refresh
k ← k + 1;
Sj := Sj−1 · X + Ik;
IF c < γ∗,
c = min(c + γk, n)
proc. getinput
k ← k + 1
OUTPUT Ik
proc. set-state(S∗)
S0 ← S∗
c ← 0
proc. D-refresh
k ← k + 1;
Sj := Sj−1 · X + Ik;
IF c < γ∗,
c = min(c + γk, n)
END FOR
k ← 0;
OUTPUT seed, (γk, zk)k=1,...,qr
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
proc. initialize(D)
(X, X0) $← setup;
σ0 ← 0;
$← {0, 1};
b
FOR k = 1 TO qr DO
(σk, Ik, γk, zk) ← D(σk−1)
END FOR
k ← 0;
OUTPUT seed, (γk, zk)k=1,...,qr
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
proc. initialize(D)
(X, X0) $← setup;
σ0 ← 0;
$← {0, 1};
b
FOR k = 1 TO qr DO
(σk, Ik, γk, zk) ← D(σk−1)
END FOR
k ← 0;
OUTPUT seed, (γk, zk)k=1,...,qr
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
Figure 4.9 – Recovering Security of G
D, and that makes the following oracle queries in the security game ROB: one call to set-state(0),
qr calls to D-refresh , one call to next-ror. Then after qr calls to D-refresh, the state of the
generator is equal to:
S = X qr−1I1 + X qr−2I2 + ··· + Iqr .
Then, as each term X qr−jIj can only be equal to 0 or 1 the state S can only be equal to 0 or
1, although the inputs I1,··· , Iqr collectivelly contain qr bits of entropy. Hence the adversary
A breaks the robustness of the generator. One may argue that this kinds of attacks are made
possible only because our construction does not use cryptographic primitives, however, as we
now show in the following impossibility result, it does not suﬃce to build a refresh algorithm
upon cryptographic primitives (as opposed to the polynomial hash function) to be secure against
such attack.
Impossibility Result for the NIST CTR_DRBG pseudo-random number generator
with input. An explicit impossibility result can also be pointed out for the generator described
— 68 —
4.4. Impossibility Results
in [BK12], named CTR_DRBG, and proposed as a standard by the NIST. As before, if we allow
the distribution sampler to depend on seed, the adversary can mount an attack against the ro-
bustness of the generator. Here the critical point is that the parameter seed is not deﬁned in the
speciﬁcation [BK12], hence an assumption shall be made on its deﬁnition. A carefull analysis of
the speciﬁcation shows that a public parameter K = 0x00010203040506070809101112131415 is
deﬁned in the speciﬁcation, which is used exactly for randomness extraction (through a ’deriva-
tion function’ that we describe below). If we allow the distribution sampler D to sample an
input that depends on K, the adversary A can mount an attack against the robustness of the
generator. The attack is similar as the attack against the ’Simpliﬁed BH, but requires the knowl-
edge of seed.
Let us ﬁrst describe the operations of CTR_DRBG. The complete description of CTR_DRBG
is given in [BK12], here we give a shorter description that focuses on important facts. Also
note that the generator uses a block cipher (bc) during its operations. In our description, we
assume that the block cipher is AES_128. We veriﬁed that our attack works independently of
this choice. We also intentionally simpliﬁed the description of CTR_DRBG:
• The speciﬁcation separates the input used to refresh the generator into two components:
the ’source entropy input’ and the ’additional input’, the former being used to refresh
the internal state during output generation. Note that this is close to the security model
[DHY02], described in Section 3.4. As noted in the following sections, we prefer to consider
the whole inputs as a sole entity, therefore we will drop the ’additional input’ parameter
in our descriptions and only consider that there is one class of input, the ’source entropy
input’. This is equivalent to set the ’additional input’ to ∅ in the descriptions.
• The speciﬁcation considers two cases, depending on the use of a ’derivation function’
named Block_Cipher_df. The diﬀerence between these two cases is the following: for a
given input, either the input is directly used ’as is’ or the input is ﬁrst transformed with
an internal function (the so-called ’derivation function’) and then afterwards used by the
generator. Whenever an algorithm uses the function Block_Cipher_df, the algorithm is
named ’with derivation’. In our descriptions, we only keep the algorithms ’with derivation’
as our attacks are related to the use of this function.
• A ’Setup’ function and an ’Instantiate’ function are deﬁned, that are used to initialize
the internal state of the generator. In our description, we do not take into account these
algorithms, as we focus on the algorithm used to refresh the internal state of the generator
(named the ’Reseed function’ in the speciﬁcation) and the algorithm used to generate out-
put (named the ’Generate function’ in the speciﬁcation). We omit these functions because
our attack relies on a state compromise and for any initialisation value, the adversary has
access to it.
The internal state of CTR_DRBG is composed with of three parts, S = (V, K, ctr) where:
|V | = 128,|K| = 128 and ctr is a counter that indicates the number of requests for pseudo-
random bits since instantiation or reseeding. The values of V and K are the critical values of
the internal state (i.e., V and K are the "secret values" of the internal state).
Algorithm 1 NIST CTR_DRBG Reseed
Require: S = (V, K, ctr), I
Ensure: S0 = (V 0, K0, ctr0)
1: (K0, V 0) = CTR_DRBG_update(Block_Cipher_df(I, 256), K, V )
2: ctr0 = 1
3: return (V 0, K0, ctr0)
— 69 —
Chapter 4. Robustness of Pseudo-random Number Generators with Inputs
CTR_DRBG Reseed Algorithm The Reseed algorithm is described in Algorithm 1. It takes
as input the current values for V , K, and ctr, and the input I. The output from the Reseed
function is the new working state, the new values for V , K, and ctr. Two Reseed algorithms are
deﬁned, one using a derivation function Block_Cipher_df, one not using this function. As noted
before, we focus on the one using the derivation function.
Algorithm 2 NIST CTR_DRBG Generate
Require: S = (V, K, ctr), n
Ensure: S0 = (V 0, K0, ctr0), R
1: U = ∅
2: while len(U) < n do
3:
4: end while
5: R = [U]n