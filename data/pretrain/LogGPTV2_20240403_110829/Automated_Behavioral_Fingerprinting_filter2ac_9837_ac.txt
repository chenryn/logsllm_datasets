### Classification Rate and Character Position Metrics

The classification rate has improved, as evidenced by the increase in the average classification rate per type. This improvement indicates that even small clusters are being accurately identified. Additionally, the associated standard deviation has decreased, further confirming the enhanced consistency of the classification.

The character position metric is designed to account for the fact that the initial characters in a message are often the most relevant for message identification. For example, the "INVITE" message contains two "I"s within the first seven bytes, making this letter's presence at the beginning a strong indicator. However, "INVITE" messages also contain a long payload with URIs, parameters, and other data, which may include additional "I"s. The weighted character position metric assigns greater importance to the first characters, leading to better classification results. As shown in Figure 8(a), the global and per-type classification rates are close to 85%, indicating high accuracy. Figure 8(b) provides a detailed breakdown of the classification, showing that misclassified messages are distributed across several clusters, resulting in a small standard deviation for the classification rate per type. This suggests that improving accuracy should not focus on a single or a few types of messages but rather on the overall distribution.

### SVC Technique Results

We applied the Support Vector Clustering (SVC) method using different values for the Gaussian width \( q \) and the penalty factor \( C \). The weighted character position metric was used due to its effectiveness in differentiating messages. As shown in Figure 9(a), the best possible accuracy for classified messages, with all types found, is 0.73. This result, while good, is slightly lower than the 85% accuracy achieved with the nearest neighbors technique (Figure 8). The lower accuracy is primarily due to the poor discovery of smaller clusters, as indicated by the higher standard deviation of the specific classification rate per type.

When the Gaussian width \( q \) increases from 0.1 to 1, the differences between packets become more pronounced in the high-dimensional feature space, leading to more distinct message clusters and improved accuracy. However, if \( q \) is too high, the number of clusters continues to increase, including redundant types, which ultimately decreases the classification rate.

The cluster composition is noteworthy. In the case of the best accuracy, the clusters are similar to those obtained in Figure 8, with all kinds of clusters represented and a small proportion of misclassified messages. In contrast, for \( C = 0.04 \) and \( q = 0.1 \) (Figure 9(b)), the clusters are different, and not all types are found. However, for the majority of types, all messages are correctly identified. This means that the black bars in the figure represent clusters containing messages of other types, as these messages are not classified into their own clusters (represented by striped bars). By applying the nearest neighbors technique to each cluster and finding the optimal \( t \) value (t = 1.1), we were able to classify 91% of the messages and discover 96% of the message types.

### Application to Other Protocols

We also applied our method to other protocols, specifically SMTP (150 packets, 10 types) and IMAP (289 packets, 24 types). The weighted character position metric was used, as it provided the best results in previous tests. Standardization of the data was performed to facilitate comparison. When the nearest neighbors technique was applied, the classification rates for both protocols were less than 50% (Figure 11). The number of clusters found was better for SMTP. Standardizing the data helped in selecting the parameter \( t \), with \( t = 20 \) appearing to be a good value for achieving the best classification rate.

This comprehensive approach demonstrates the effectiveness of the weighted character position metric and the nearest neighbors technique in classifying messages across different protocols, providing a robust framework for automated behavioral fingerprinting.