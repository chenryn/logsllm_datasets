# Usage Control Platformization via Trustworthy SELinux

**Authors:**
- Masoom Alam, IM | Sciences, Peshawar, Pakistan
- Jean-Pierre Seifert, Samsung Information Systems America, San Jose, California, USA
- Qi Li, Department of Computer Science, Tsinghua University, Beijing, China
- Xinwen Zhang, Samsung Information Systems America, San Jose, California, USA

## Abstract
Continuous access control in a distributed environment, known as the usage control problem, has been explored by various researchers. However, the enabling technology for such control remains a challenge and is not fully developed. This paper identifies the general requirements for trusted usage control enforcement in heterogeneous computing environments and proposes a general platform architecture to meet these requirements.

## Categories and Subject Descriptors
- K.6 [Management of Computing and Information Systems]: Security and Protection
- K.4.4 [Electronic Commerce]: Security

## General Terms
- Security

## Keywords
- Trusted Computing, Usage Control, SELinux

## 1. Introduction
Traditional access control problems are typically addressed in closed environments where identities of subjects and objects can be fully authenticated, and enforcement mechanisms are trusted by system administrators who define access control policies. With the rise of distributed and decentralized computing systems, more data and processing occur at edge nodes, leading to two distinct access control problem spaces.

The first problem space focuses on authorization reasoning with subject attributes from different authorities. For example, in trust management systems, a user presents credentials, and another subject (e.g., a resource or service provider) determines permissions based on these credentials. In this scenario, objects are usually protected in a centralized server.

The second problem space, known as the usage control problem, deals with continuous control over accesses to an object after it is distributed to other (decentralized) locations or platforms. The main goal of usage control is to enable continuous access control to objects after they are released into different control domains from their owners or providers, especially in highly distributed and heterogeneous environments. A usage control policy is defined for a target object by its stakeholder, specifying conditions under which access to the object on a target platform is allowed. Stakeholders can be the object's owner or a service provider delegated by the owner to protect the object. Objects in usage control can include static data, messages, user or subject attributes, or even credentials. This makes the problem pervasive in many distributed computing applications, such as healthcare information systems, Web Services, and identity management systems.

Unlike other distributed access control problems, usage control involves an object located outside the controlling domain of a policy stakeholder. This means that:
1. Access control decisions involve factors beyond subject identities and attributes.
2. Stakeholders need high assurance on the enforcement of the policy.

As shown in Figure 1, an object and its usage control policy are distributed from a data provider to a target platform. The policy is enforced in a trusted subsystem on the platform to control access to the object. Access control decisions are determined based on predefined factors specified in the policy, which can include subject and object attributes, application-specific attributes, and temporal status. In heterogeneous environments, environmental restrictions and system conditions are also critical decision factors, such as location-based services and time-limited access. An ongoing access should be terminated if these conditions change and violate the policy.

### Figure 1: Abstract Architecture
[Insert Figure 1 here]

### Challenges in Enforcing Usage Control Policies
Usage control is naturally distributed, and enforcing usage control policies requires a trustworthy security enforcement mechanism. Traditional access control mechanisms, such as reference monitors, are tamper-proof, always-invoked, and small enough, but these properties are easier to achieve in closed systems. In trust management systems, policy enforcement is still within the stakeholderâ€™s control domain. However, when objects or services are deployed to different domains, a mandatory requirement for usage control is the trustworthy enforcement of security policies by the reference monitor. This includes ensuring that:
1. All factors for usage control decisions can be obtained and their information is authentic.
2. Correct decisions are made based on these factors.
3. The reference monitor enforces access control decisions correctly.
4. All accesses to a target object on a target platform go through the reference monitor.

Previous work on usage control has focused on high-level policy specifications and conceptual architectures, often relying on digital rights management (DRM) approaches. However, DRM mechanisms do not support general attributes and trusted enforcement in ubiquitous environments. They also cannot provide a comprehensive solution for usage control in open and general-purpose target platforms, as they typically rely on software-enabled, payment-based enforcement in relatively closed environments. Cryptography alone cannot protect keys during runtime on a target platform, as malicious software can exploit vulnerabilities to steal secrets.

### Contribution
Our main contribution is considering the integrity of a subsystem in access control mechanisms. This approach not only considers traditional subject and object attributes but also the integrity information of subjects, objects, and any other components necessary in a trusted subsystem. Our overall goal is to build a "virtually closed" and trusted subsystem for remote usage control policy enforcement.

## 2. Design Principles
We have identified the following general security requirements and design principles for usage control:

1. **High Assured but Usable Security Mechanism:**
   - High assurance of policy enforcement is desired, but a "usable security" mechanism is strongly preferred for cost-effectiveness. Leveraging local host access control mechanisms to enforce usage control policies is desirable if the mechanism can be trusted.

2. **Comprehensive Policy Model:**
   - Traditional security systems distinguish between policy and mechanism, but early policy systems like Bell-LaPadula and Biba are too restrictive for modern applications. We need a comprehensive policy model to support various security requirements, including time and location constraints.

3. **MAC Mechanism for Trusted Subsystem:**
   - Discretionary access control (DAC) models allow root-privileged subjects to change security configurations, potentially compromising the subsystem. Mandatory access control (MAC) mechanisms, such as SELinux, are needed to label applications and resources with specific domains and define policies to control interactions for isolation and information flow control.

4. **Policy Transformation Mechanism:**
   - Stakeholder policies are often specified in different formats and semantics than those of MAC policies on a target platform. An efficient and convenient policy transformation mechanism is needed to preserve security properties during the transformation, ensuring that allowable permissions and information flows are maintained.

## 3. Platform Architecture
[This section will describe the proposed platform architecture to build a trusted subsystem for usage control.]

## 4. Conclusion and Ongoing Work
[This section will summarize the paper and present ongoing work related to the proposed usage control platform.]

---

This revised version aims to improve the clarity, coherence, and professionalism of the original text.