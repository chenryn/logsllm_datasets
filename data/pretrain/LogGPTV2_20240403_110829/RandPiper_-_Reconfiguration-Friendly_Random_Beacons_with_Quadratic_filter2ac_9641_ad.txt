different payload sent by an epoch leader are considered an equiv-
ocation. In this protocol, the leader of an epoch 𝑒 sends propose
5
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3506and vote-cert messages (explained later) to all other nodes. In or-
der to facilitate efficient equivocation checks, the leader sends the
payload along with the signed hash of the payload. When an equiv-
ocation is detected, broadcasting the signed hash suffices to prove
equivocation by 𝐿𝑒.
3.1 Protocol Details
We first describe a simple function that is used by an honest node
to forward a long message received from the epoch leader.
Deliver function. The Deliver() function (refer Figure 2) imple-
ments efficient broadcast of long messages using erasure coding
techniques and cryptographic accumulators. The input parameters
to the function are message type mtype, long message 𝑏, accumu-
lation value 𝑧𝑒 corresponding to object 𝑏 and epoch 𝑒 in which
the Deliver function is invoked. The input message type mtype
corresponds to message type containing large message 𝑏 sent by
leader 𝐿𝑒 of epoch 𝑒. In order to facilitate efficient leader equiv-
ocation checks, the input message type mtype, hash of object 𝑏,
accumulation value 𝑧𝑒 and epoch 𝑒 are signed by leader 𝐿𝑒.
When the function is invoked using the above input parameters,
the message 𝑏 is partitioned into 𝑡 + 1 data symbols. The 𝑡 + 1 data
symbols are then encoded into 𝑛 code words (𝑠1, . . . , 𝑠𝑛) using ENC
function (defined in Section 2). Then, the cryptographic witness
𝑤𝑖 is computed for each code words (𝑠1, . . . , 𝑠𝑛) using CreateWit
(defined in Section 2). Then, the code word and witness pair (𝑠 𝑗 , 𝑤 𝑗)
is sent to the node 𝑝 𝑗 ∈ P along with the accumulation value 𝑧𝑒,
message type mtype, and 𝐿𝑒’s signature on the message.
When a node 𝑝 𝑗 receives the first valid code word 𝑠 𝑗 for an
accumulation value 𝑧𝑒 such that the witness 𝑤 𝑗 verifies the code
word 𝑠 𝑗 (using Verify function defined in Section 2), it forwards the
code word and witness pair (𝑠 𝑗 , 𝑤 𝑗) to all nodes. Note that node 𝑝 𝑗
forwards only the first code word and witness pair (𝑠 𝑗 , 𝑤 𝑗). Thus, it
is required that all honest nodes forward the code word and witness
pair (𝑠 𝑗 , 𝑤 𝑗) for long message 𝑏; otherwise all honest nodes may
not receive 𝑡 + 1 code words for 𝑏. When a node 𝑝𝑖 receives 𝑡 + 1
valid code words corresponding to the first accumulation value 𝑧𝑒 it
receives, it reconstructs the object 𝑏. Note that node 𝑝𝑖 reconstructs
object 𝑏 for the first valid share even though it detects equivocation
in an epoch.
The Deliver function contains two communication steps and
hence requires 2Δ time to ensure all honest nodes can receive at
least 𝑡 + 1 code words sufficient to reconstruct the original input 𝑏.
Invoking Deliver on a long message of size ℓ incurs 𝑂(𝑛ℓ+(𝜅+𝑤)𝑛2)
bits where 𝜅 is the size of accumulator and 𝑤 is the size of the
accumulator witness. The witness size is 𝑂(𝜅) and 𝑂(𝜅 log 𝑛) when
bilinear accumulators and Merkle trees are respectively used as
witnesses. Thus, the total communication complexity to broadcast
a single message of size ℓ is 𝑂(𝑛ℓ + 𝜅𝑛2) bits, or 𝑂(𝑛ℓ + 𝜅𝑛2 log 𝑛)
bits without the 𝑞-SDH assumption.
BFT SMR Protocol. Our BFT SMR protocol is described in Figure 1.
Consider an epoch 𝑒 and its epoch leader 𝐿𝑒. To ensure an honest
leader can always make progress, leader 𝐿𝑒 first collects the highest
ranked certificate C𝑒′(𝐵ℎ) from all honest nodes. In each epoch, at
a high level, there are two “rounds” of communication from the
epoch leader. The first round involves leader making a proposal and
6
the second round involves sending certificates to aid in committing
the proposal.
Efficient propagation of proposal. In the first round, the leader
proposes a block 𝐵ℎ to every node (step 2) by extending the high-
est ranked certificate C𝑒′(𝐵ℎ). The proposal for 𝐵ℎ, conceptually,
has the form ⟨propose, 𝐵ℎ, C𝑒′(𝐵𝑙), 𝑧𝑝𝑒, 𝑒⟩𝐿𝑒 where 𝑧𝑝𝑒 is the ac-
cumulation value for the pair (𝐵ℎ, C𝑒′(𝐵𝑙)). In order to facilitate
efficient equivocation checks, the leader signs the following tu-
ple ⟨propose, 𝐻(𝐵ℎ, C𝑒′(𝐵𝑙)), 𝑧𝑝𝑒, 𝑒⟩ and sends 𝐵ℎ and C𝑒′(𝐵𝑙) sep-
arately. The size of this signed message is 𝑂(𝜅) bits. In case of
equivocation, all-to-all broadcast of this signed message incur only
𝑂(𝜅𝑛2) in communication.
If the received proposal is valid and it extends the highest ranked
certificate known to a node 𝑝𝑖, node 𝑝𝑖 forwards the proposal.
Forwarding the received proposal is required to ensure all honest
nodes receive a common proposal; otherwise only a subset of the
nodes may receive the proposal if the leader is Byzantine. Observe
that the size of the proposal is linear as it contains certificate C𝑒′(𝐵𝑙)
(which is linear in the absence of threshold signatures). A naïve
approach of forwarding the entire proposal incurs 𝑂(𝜅𝑛3) when
all nodes broadcast their proposal. In order to save communication,
nodes forward the proposal by invoking Deliver function. For linear
sized proposal, invoking Deliver incurs 𝑂(𝜅𝑛2) bits (or 𝑂(𝜅𝑛2 log 𝑛)
bits under 𝑞-SDH assumption) in communication.
Observe that the Deliver primitive requires 2Δ time. In particular,
we need to ensure all honest nodes forward their code word and
witness pair for the proposal. Thus, our protocol waits for 2Δ time
(i.e., vote-timer𝑒) before voting to check for equivocation. Hence, if
no equivocation is detected at the end of 2Δ wait, all honest nodes
forwarded their code word and witness pair for the proposal and all
honest nodes can reconstruct the proposal. At the end of 2Δ wait,
if there no equivocation is detected, nodes vote for the proposed
block 𝐵ℎ (step 3).
Ensuring the receipt of a certificate efficiently. Observe that
a vote message is 𝑂(𝜅) sized and hence, it can be broadcast us-
ing all-to-all communication with communication complexity of
𝑂(𝜅𝑛2). However, if every node that commits needs to ensure that
all honest nodes receive a certificate for the block being committed,
this can result in 𝑂(𝜅𝑛3) complexity again. This is because, all-to-
all broadcast of linear sized certificate incurs 𝑂(𝜅𝑛3). One might
try to invoke Deliver to propagate the certificate. However, this
does not save communication. This is because, in general, there can
be exponentially many combinations of 𝑡 + 1 signatures forming
a certificate depending on the set of signers, and each node may
invoke Deliver on a different combination.
This issue can be addressed if we ensure that there is a single
certificate for a block. Hence, we use the leader to collect signatures
and form a single certificate (step 3). The leader forwards this cer-
tificate via ⟨vote-cert, C𝑒(𝐵ℎ), 𝑧𝑣𝑒, 𝑒⟩𝐿𝑒 to all nodes (step 4) where
𝑧𝑣𝑒 is the accumulation value of C𝑒(𝐵ℎ). Similar to the proposal, the
hash of the certificate is signed to allow for efficient equivocation
checks. It is important to note that two different certificates for the
same value is still considered an equivocation in this step.
To ensure that every honest node receives this certificate, we
again resort to the Deliver primitive which yields a communication
complexity of 𝑂(𝜅𝑛2) when all honest nodes are invoking it using
the same certificate. Again, to tolerate malicious behaviors such
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3507Let 𝑒 be the current epoch and 𝐿𝑒 be the leader of epoch 𝑒. For each epoch 𝑒, node 𝑝𝑖 performs the following operations:
(1) Epoch advancement. When epoch-timer𝑒−1 reaches 0, enter epoch 𝑒. Upon entering epoch 𝑒, send the highest ranked certificate C𝑒′ (𝐵𝑙) to 𝐿𝑒. Set
epoch-timer𝑒 to 11Δ and start counting down.
(2) Propose. 𝐿𝑒 waits for 2Δ time after entering epoch 𝑒 and broadcasts ⟨propose, 𝐵ℎ, C𝑒′ (𝐵𝑙), 𝑧𝑝𝑒, 𝑒⟩𝐿𝑒 where 𝐵ℎ extends 𝐵𝑙 . C𝑒′ (𝐵𝑙) is the highest
ranked certificate known to 𝐿𝑒.
(3) Vote. If epoch-timer𝑒 ≥ 7Δ and node 𝑝𝑖 receives the first proposal 𝑝𝑒 = ⟨propose, 𝐵ℎ, C𝑒′ (𝐵𝑙), 𝑧𝑝𝑒, 𝑒⟩𝐿𝑒 where 𝐵ℎ extends a highest ranked certificate,
invoke Deliver(propose, 𝑝𝑒, 𝑧𝑝𝑒, 𝑒). Set vote-timer𝑒 to 2Δ and start counting down. When vote-timer𝑒 reaches 0, send ⟨vote, 𝐻 (𝐵ℎ), 𝑒⟩𝑖 to 𝐿𝑒.
(4) Vote cert. Upon receiving 𝑡 + 1 votes for 𝐵ℎ, 𝐿𝑒 broadcasts ⟨vote-cert, C𝑒 (𝐵ℎ), 𝑧𝑣𝑒, 𝑒⟩𝐿𝑒 .
(5) Commit. If epoch-timer𝑒 ≥ 3Δ and node 𝑝𝑖 receives the first 𝑣𝑒 = ⟨vote-cert, C𝑒 (𝐵ℎ), 𝑧𝑣𝑒, 𝑒⟩𝐿𝑒 , invoke Deliver(vote-cert, 𝑣𝑒, 𝑧𝑣𝑒, 𝑒). Set
commit-timer𝑒 to 2Δ and start counting down. When commit-timer𝑒 reaches 0, if no equivocation for epoch-𝑒 has been detected, commit 𝐵ℎ and
all its ancestors.
(6) (Non-blocking) Equivocation. Broadcast equivocating hashes signed by 𝐿𝑒 and stop performing epoch 𝑒 operations.
Figure 1: BFT SMR Protocol with 𝑂(𝜅𝑛2) bits communication per epoch and optimal resilience
Deliver(mtype, 𝑏, 𝑧𝑒, 𝑒):
(1) Partition input 𝑏 into 𝑡 + 1 data symbols. Encode the 𝑡 + 1 data
symbols into 𝑛 code words (𝑠1, . . . , 𝑠𝑛) using ENC function. Com-
pute witness 𝑤𝑗 ∀𝑠 𝑗 ∈ (𝑠1, . . . , 𝑠𝑛) using CreateWit function. Send
⟨codeword, mtype, 𝑠 𝑗 , 𝑤𝑗 , 𝑧𝑟 , 𝑟⟩𝑟 to node 𝑗 ∀𝑗 ∈ [𝑛].
(2) If
receives
valid
⟨codeword, mtype, 𝑠 𝑗 , 𝑤𝑗 , 𝑧𝑒, 𝑒⟩∗
the code word to all the nodes.
(3) Upon receiving 𝑡 + 1 valid code words for the accumulator 𝑧𝑒, decode
𝑏 using DEC function.
the
for the accumulator 𝑧𝑒,
code word
forward
first
node
𝑝 𝑗
Figure 2: Deliver function
as sending multiple different certificates for the same block (due
to which none of them may be delivered), we treat the vote-cert
message similar to the proposal and perform equivocation checks.
Thus, nodes commit only if they observe no equivocation 2Δ time
after they invoke Deliver (step 5).
Epoch timers. Observe that we set the epoch timer epoch-timer𝑒
for each epoch 𝑒 to be 11Δ. This is the maximum time required
for an epoch when the leader is honest and all messages take Δ
time. Similarly, in different steps, we make appropriate checks
w.r.t. epoch-timer𝑒 to ensure that the protocol is making sufficient
progress within the epoch.
Latency. We note that all honest nodes commit in the same epoch
when the epoch leader is honest. However, when the epoch leader is
Byzantine, only some honest nodes may commit in that epoch. Due
to the round-robin leader selection, there will be at least one honest
leader every 𝑡 + 1 epochs and all honest nodes commit common
blocks up to the honest epoch. Thus, our protocol has a worst-case
commit latency of 𝑡 + 1 epochs.
Due to space constraints, we present complete proofs in Appen-
dix B.1.
4 RANDOM BEACON PROTOCOLS
In this section, we present two random beacon protocols while tol-
erating 𝑓 ≤ 𝑡 < 𝑛/2 Byzantine faults. The first protocol GRandPiper
outputs a random beacon with 𝑂(𝜅𝑛2) communication complexity
always, per beacon output, where 𝜅 is the security parameter, guar-
antees bias-resistance, and 𝑂(min(𝜅, 𝑡))-absolute unpredictability
against a static adversary, but 𝑡 +1-absolute unpredictability against
7
an adaptive adversary. The second protocol BRandPiper outputs
a random beacon with 𝑂(𝜅 𝑓 𝑛2) communication complexity per
output after amortization where 𝜅 is the security parameter, and
guarantees bias-resistance and 1-absolute unpredictability. When
the actual number of faults 𝑓 = 𝑂(1), the communication complex-
ity is quadratic.
A key aspect of both of our protocols is their reconfiguration-
friendliness. A protocol is said to be reconfiguration-friendly if it
allows changing protocol parameters such as the scheme and nodes,
without stopping the old instance, and starting a new one. Such
reconfiguration is possible if the setup used for the protocol does
not bind to the system, as such a binding will force a new setup
to change any parameter in the system. This is true, for instance,
when using threshold signatures in a protocol which is used by
many existing permissioned systems [7, 14, 15, 27]. Neither of our
protocols use setups for threshold signatures, but a setup based on
the 𝑞-SDH assumption. This allows for easy reconfiguration.4
4.1 RandPiper – GRandPiper Protocol
Enqueue(Q(𝐿𝑒), 𝑅𝑒)
Share Queue Q(·)
Epoch 𝑒
SMR
𝑅𝑒
Recon.
Epoch 𝑒 + 1
SMR
𝑅𝑒+1
Recon.
Leader 𝐿𝑒
Leader 𝐿𝑒+1
𝐿𝑒 ≠ 𝐿𝑖
∀𝑖 ∈ {𝑒 + 1, . . . , 𝑒 + 𝑡}
Dequeue(Q(𝐿𝑒′))
· · ·
· · ·
Epoch 𝑒′
SMR
𝑅𝑒′
Recon.