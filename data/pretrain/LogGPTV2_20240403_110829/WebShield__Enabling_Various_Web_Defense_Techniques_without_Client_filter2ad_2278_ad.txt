# Non-Incremental Version
- 0
- 2000
- 6000
- 10000

**Rendering Start Time (ms)**
- 18
- 16
- 14
- 12
- 10
- 8

**Time Delay from Client to Proxy (ms)**
- 0
- 1
- 2
- 3
- 4
- 5

**(a) Firefox**
**(b) Chrome**

**Figure 7. Cumulative Distribution Function of Rendering Start Time**

**Figure 9. Communication Delay with Different Local Latencies**

**Cumulative Distribution Function (CDF)**
- 1.00
- 0.80
- 0.60
- 0.40
- 0.20
- 0.00

**Direct Access**
- Incremental Version
- Non-Incremental Version

**Rendering Finish Time (ms)**
- 2000
- 4000
- 6000
- 8000

**CDF**
- 1.00
- 0.80
- 0.60
- 0.40
- 0.20
- 0.00

**Direct Access**
- Incremental Version
- Non-Incremental Version

**Rendering Finish Time (ms)**
- 5000
- 10000
- 15000

**(a) Firefox**
**(b) Chrome**

**Figure 8. Cumulative Distribution Function of Rendering End Time**

**Communication Delay (ms)**
- 60
- 40
- 20
- 0

**Textarea Size (KB)**
- 0
- 20
- 40
- 60
- 80

**Figure 10. Communication Delay with Different Message Sizes**

In most cases, the difference is less than 1.083 seconds. For rendering finish times, the median difference is 382 milliseconds, and the 90th percentile cutoff is at 2.459 seconds. In a few rare cases, the difference is larger than five seconds; we attribute these rare cases to implementation problems in our current prototype.

## 6.3 Communication Overhead

Communication overhead is calculated as the data transferred over the network to and from the client. For a webpage, we captured the network traces when accessing the webpage with and without our proxy and obtained the sizes of those traces.

**Figure 11. Communication Overhead**

WebShield does not always have a larger communication overhead compared to direct access. For some webpages, the amount of data transferred to the client through WebShield is less than direct access. On one hand, direct access needs to transfer HTML content, JavaScript files, and CSS style sheets, whereas WebShield needs to transfer encoded DOM updates related to visual effects, such as text areas and visible elements. Our transfer of user-visible components is less efficient because we transfer parsed data in JSON, which is less dense than HTML notation, and during incremental rendering, we need to provide location information and other tokens. On the other hand, we do not need to transfer JavaScripts, which contain application logic, because they are executed by the JavaScript engine of shadow browsers in WebShield, and only the final results are sent back to users. This reduces the transfer overhead. As seen in Figure 11, there are mixed results when comparing WebShield with direct access. We incur more overhead on YouTube compared to direct access because there are few script tags in YouTube, but for Google Maps, we achieve smaller overhead because there are many JavaScript scripts.

## 6.4 Memory Overhead

To evaluate memory overhead, we selected ten complex webpages. For each webpage, we report the memory overhead as the difference in memory usage of the browser before and after the page load. The initial and post-page load memory usages are gathered using the Windows Task Manager. While this approach is approximate, we find it reasonable as we received consistent results over multiple loadings of a webpage.

**Figure 12. Memory Overhead**

In Figure 12, we compare the memory consumption of the transformed webpage with the corresponding native webpages. For our system, memory is consumed mostly by JavaScript and DOM, as we use JavaScript to reconstruct the DOM. For a native webpage, memory is consumed by the HTML parser, CSS parser, and JavaScript engine. If a page is very large and contains many elements, parsing the native web pages can use a lot of memory. If a page is small, our JavaScript program itself may take up a significant amount of memory compared to the webpage.

Figure 12 shows that our memory overhead is slightly higher than that of native webpages, meaning the memory usage of our JavaScript program is nearly the same as native webpages. For example, we have more memory overhead on Facebook because the native Facebook page has fewer elements for parsing, and our JavaScript render agent on the client side will take more memory. However, for Amazon, we have less memory overhead for the transformed webpage than the native page. This is because Amazon has many user-effect elements, and the browser will consume a lot of memory to parse the contents.

## 6.5 Interactive Performance for Dynamic HTML

As shown in Figure 5, the normal JavaScript event response time is the time for a browser to execute the JavaScript event handler bound to the special event. If the JavaScript event triggers an AJAX call, an AJAX connection to the remote web server will occur, and thus the network round trip time and server response time need to be included in the response time. This cost is inevitable in any client-server system. The extra time cost is introduced by our secure proxy.

### 6.5.1 Microbenchmarks

With microbenchmarks, we measure the atomic event transmission delay. We wrote a test webpage to test the event response time. In the testing webpage, the user can enter texts into a textarea. After the user clicks the button on the client browser, the text in the textarea will be updated to a text node inside a `<div>` node. With our security proxy, when the user clicks the button, the changes in the textarea node and the "click" event will be packaged in JSON and transferred to the shadow browser in the proxy. The shadow browser updates a text node with the received textarea content. Then, the changes in the DOM tree will be sent back to the client browser, and the client-side DOM is updated.

**Communication Delay:**
The communication delay time is determined by two factors: network delay and data transfer size. Network delay influences the communication delay. We used the network emulator netem [9] to emulate different network environments with latencies of 0, 1, 2, 3, and 4 ms on the gateway. Here, we changed the gateway latency and triggered the click event with a 2-kilobyte textarea. As seen in Figure 9, the response delay increases linearly with the growth of local latency. The response delay is within 20 ms when the local latency is 4 ms, so the user will not perceive this extra delay.

Next, we tested the communication delay with different DOM node sizes. As Figure 10 shows, we changed the length of the textarea in a test webpage and triggered the click event while measuring the delay time with the `Date()` function. We can see that the response delay increases linearly with the growth of the textarea size. Even when the textarea reaches 64 kilobytes, the communication delay is still within 50 ms.

In an intra-network environment, the latency between the client browser and proxy is usually small (less than 5 ms). As the above evaluation shows, the event response time is just tens of milliseconds, which will not affect the user's experience.

**DOM Update Delay:**
In the above evaluation, we updated one node for each event. Here, we evaluate the time cost for updating one DOM node. In our experiment, we repeatedly inserted a text node with a length of 2 kilobytes to the first child of the body tag 10,000 times and used the `Date()` function to get the duration. The average time cost for updating a single node is 0.04 ms. For state-of-the-art web applications, one event usually incurs an update of less than 100 DOM nodes. Therefore, the DOM update delay is negligible in our implementation.

### 6.5.2 Test on a Real Game

We chose a real-world high-interactive JavaScript game, Connect Four, to benchmark WebShield. We downloaded this game from the top website when querying Google for "JavaScript games." We measured the delay on the client side based on different user operations. Connect Four is a mid-size (about 7 KB) two-player JavaScript game found at a popular JavaScript games site [4]. Each player can place a piece on a square. When a player has four connected pieces, they win. In our experiment, we measured the time delay introduced by our proxy with various user actions taking effect on the user screen.

In this game, four kinds of activities were measured:

- **Start Game:**
  - Additional Delay: 41 ms
- **Move Mouse:**
  - Additional Delay: 7 ms
- **Drop a Piece:**
  - Additional Delay: 10 ms
- **Game Over:**
  - Additional Delay: 7 ms

**Table 3. Time Delay in Game Connect 4**