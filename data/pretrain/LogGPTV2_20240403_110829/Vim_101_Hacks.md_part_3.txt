### Hack 13: Navigating Within a Very Long Line

When you have a very long line without any newline, Vim treats it as a single line. Executing `j` on such a line will jump to the next line, but it may seem like many lines are skipped. In reality, it is just one long line.

#### Visual Lines
Assume that a very long line is wrapped into 5 visual lines. Each individual line can be referred to as a visual line for discussion purposes.

The following shortcuts can help in navigating a very long line effectively:

| Navigation Key | Description |
|---------------|-------------|
| `gj`          | Scroll down a visual line |
| `gk`          | Scroll up a visual line |
| `g^`          | Go to the start of the current visual line |
| `g$`          | Go to the end of the current visual line |
| `gm`          | Go to the middle of the current visual line |

### Hack 14: Command Line Navigation in Vim

When opening a file from the command line, you can navigate to a specific position by specifying command-line arguments.

| Command Line | Description |
|--------------|-------------|
| `$ vim +143 <filename>` | Go to the 143rd line of the file |
| `$ vim +/search-term <filename>` | Go to the first match of the specified search term from the top |
| `$ vim +?search-term <filename>` | Go to the first match of the specified search term from the bottom |
| `$ vim -t TAG <filename>` | Go to the specific tag |

For example, if you are opening `/etc/passwd` to edit the user `jsmith`, you can do the following:
```sh
$ vim +/^jsmith /etc/passwd
```
This will open the file `/etc/passwd` and jump directly to the `jsmith` record.

### Hack 15: Creating Local Bookmarks inside a File using Marks

There are two types of bookmarks in Vim: Local and Global. This hack focuses on local bookmarks.

| Bookmark Command | Description |
|------------------|-------------|
| `ma`             | Bookmark the current location with name 'a' |
| ``a (backtick a) | Jump to the exact location of bookmark 'a' |
| `'a (single quote a)` | Jump to the beginning of the line containing the bookmark 'a' |

To create a local bookmark, type `m{mark-name}`, where `{mark-name}` is a single lowercase letter. For example, typing `ma` will create a bookmark at the current cursor position.

#### Accessing the Bookmark
- **Method 1:** `'{mark-name}` (e.g., `â€˜a`) - Moves to the exact character location within the line.
- **Method 2:** `"{mark-name}` (e.g., `"a`) - Moves to the beginning of the line that contains the bookmark.

### Hack 16: Creating Global Bookmarks in Vim

Global bookmarks are useful when you have multiple files open and want to go to a specific position in any one of them. If the bookmark name is an uppercase letter, it is a global bookmark.

Steps to use a global bookmark:
1. Open multiple files: `vim /etc/passwd /etc/group`
2. While editing `/etc/passwd`, go to a specific line and type `mP` to create a global bookmark called `P`.
3. Type `:n` to jump to `/etc/group`.
4. While editing `/etc/group`, go to a specific line and type `mG` to create a global bookmark called `G`.
5. Type ``P (back-tick followed by uppercase P) to jump to the bookmark in `/etc/passwd`.
6. From `/etc/passwd`, type ``G (back-tick followed by uppercase G) to jump to the bookmark in `/etc/group`.

**Exercise for the reader:** Using two less important files, create global marks in both, modify the current file, and jump to the other one without saving first. Observe what Vim does. How does this change if you set `autowrite`?

### Hack 17: Displaying All Bookmarks

If you have created several bookmarks and need to recall them, type `:marks` to list all bookmarks.

Example output:
```plaintext
:marks
mark line col file/text
a 15 9 ypserver 192.168.1.119
b 11 18 domain THEGEEKSTUFF
G 56 0 group
P 45 0 passwd
```

Vim also maintains some default marks:
- `"` - Position of the last edit before exit
- `[` - First character of previously changed or yanked text
- `]` - Last character of previously changed or yanked text
- `'` - Last line of previously selected visual area
- `.` - Position of the last change
- `^` - Position where the cursor was the last time Insert mode was stopped

### Hack 18: Navigating Source Code Effectively Using Ctags

#### Install ctags
```sh
# apt-get install exuberant-ctags
# rpm -ivh ctags-5.5.4-1.i386.rpm
```

#### Generate ctags
```sh
# cd ~/src
# ctags *.c
```

#### Usage
1. **Navigate to a function definition:**
   ```vim
   :ta main
   ```
2. **Jump to the function definition from a function call:**
   - Place the cursor over the function call and press `CTRL + ]`.
3. **Return to the caller:**
   - Press `CTRL + T` to return to the function call.
4. **Navigate through a list of functions:**
   ```vim
   :ta /^get
   ```
   Use the following commands to navigate through the matched tag list:
   - `:ts` - Display the tag list
   - `:tn` - Go to the next tag in the list
   - `:tp` - Go to the previous tag in the list
   - `:tf` - Go to the first function in the list
   - `:tl` - Go to the last function in the list

### Hack 19: Converting Vim Editor to a Beautiful Source Code Browser

#### Install and Configure Taglist Plugin
1. Download the plugin:
   ```sh
   $ cd ~
   $ wget -O taglist.zip http://www.vim.org/scripts/download_script.php?src_id=7701
   ```
2. Install the plugin:
   ```sh
   $ mkdir ~/.vim
   $ cd ~/.vim
   $ unzip ~/taglist.zip
   ```
3. Enable the plugin in `~/.vimrc`:
   ```vim
   filetype plugin on
   ```

#### Usage
1. **Open the Tag List Window:**
   ```vim
   :TlistOpen
   ```
2. **Jump to a Function Definition:**
   - Click on the function name in the left panel.
3. **Jump to a function defined in another source file:**
   - Method 1: Press `CTRL + ]` on the function call.
   - Method 2: Open another file in the same Vim session and search for the function name in the tag list window.
4. **View the prototype/signature of functions or variables:**
   - Press `Space` while the cursor is on the function or variable name in the tag list window.
5. **View the total number of functions or variables:**
   - Press `Space` while the cursor is over a tag type (e.g., `function`).

By following these hacks, you can significantly enhance your productivity and navigation capabilities in Vim.