> 0 16 51 John Smith
1 10 7 /etc/sudoers
2 4 3 /etc/group
3 204 3 /home/ramesh/my-projects.txt
• In this example :jump was executed when user was editing names.txt
file
• The current location will be marked with location#0 and > in front of
it. There will be numbers above and below location#0.
• In this example, Current location#0 is “> 0 16 51 John Smith” in the
current file names.txt
• To jump to /etc/password, which is location#2 above current
location, press 2CTRL-O
• To jump to /etc/group, which is location#2 below current location,
press 2CTRL-I
Hack 13. Navigate Within a Very Long Line
When you have a very long line without any newline, Vim treats it as single
line. So, when you execute j on that line, it will jump to next line. However
you’ll get a feeling that it has skipped lot of lines. But in reality it is just only
long line.
Visual Line: Let us assume that a very long line is wrapped down into 5 visual
lines. Let us call each and every individual line as visual lines for the
discussion purpose.
The following shortcuts can help in navigating a very long line effectively.
33
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
Navigation Key Description
gj Scroll down a visual line
gk Scroll up a visual line
g^ Go to the starting of current visual line
g$ Go to the end of current visual line
gm Go to the middle of current visual line
Hack 14. Vim Command Line Navigation
When opening a file from the command line, you can navigate to a particular
position by specifying command line arguments as shown below.
Command Line Description
$ vim +143  Go to the 143rd line of file
$ vim +/search-term Go to the first match of the specified
 search term from top
$ vim +?search-term Go to the first match of the specified
 search term from bottom
$ vim -t TAG Go to the specific tag
For example, if you are opening /etc/passwd file to edit user jsmith, you can
do the following. This will open the file /etc/passwd and jump directly to
jsmith record.
34
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
$ vim +/^jsmith /etc/passwd
Hack 15. Create Local Bookmarks inside file using
Marks
There are two types of bookmarks -- Local bookmarks and Global bookmarks.
Let us review local bookmarks in this hack.
Bookmark Command Description
ma Bookmark the current location with name
‘a’
`a (backtick a) Jump to the exact location of bookmark
‘a’
‘a (single quote a) Jump to the beginning of the line
containing the bookmark ‘a’
Within a single file when you want to go to a particular position or line, you
can use local marking. If the bookmark name is a lower case letter, then that
is local mark.
Type m{mark-name}. mark-name is a single alphabet character that is the
name of the bookmark.
m{mark-name}
35
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
How to create a bookmark inside the Vim editor?
If you type “ma”, it will create a bookmark on the current line at the current
location with the name “a”. In the following example, typing ma has created
a bookmark at the exact location where the cursor is highlighted.
ma
Fig: Bookmark current location inside Vim using ma
Note that Vim differs from Vi in that marks persist after exiting the editor.
This is a powerful feature that's a surprise to many UNIX users.
Method 1 to access the bookmark : `{mark-name}
backtick followed by the mark name will move to the exact bookmark
location. This will jump to the exact character location within the line from
where it was bookmarked earlier.
36
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
For example, if you type `a , it will take you to the bookmark with name “a”.
i.e It will take you to the place where the cursor is high-lighted in the above
Fig.
`a
Method 2 to access the bookmark : ‘{mark-name}
single-quote followed by the mark name. Move to the beginning of the
bookmarked line.
For example, if you type ‘a , it will take you to beginning of the line that has
the bookmark with name “a”. It will take you to the beginning of the
“CustomLog logs/access_log combined” line in the above Fig.
‘a
Hack 16. Create Global Bookmarks inside Vim File
When you have multiple files open, if you want to go to a particular position
in any one of the open files, then you can use Global mark feature of Vim. If
the bookmark name is an upper case letter, then that is a Global Bookmark.
The following sequence of steps will explain how to use a global bookmark
while editing multiple files.
1. Open multiple files: # vim /etc/passwd /etc/group
2. While editing /etc/passwd file go to a specific line and type mP to
create a global bookmark called P
37
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
3. Type :n to jump from the /etc/passwd file to /etc/group file
4. While editing /etc/group file go to a specific line and type mG to
create a global bookmark called G
5. Type `P (back-tick followed by upper-case P), which will take you to
the bookmark in /etc/passwd
6. From /etc/passwd, type `G (back-tick followed by upper-case G),
which will take you to the bookmark in /etc/group.
An exercise for the reader: Using two less important files than these, make
global marks in two files, then modify the current file and jump to the other
one without saving first. What does Vim do? How do things change if you ":set
autowrite"?
Hack 17. How to Display all Bookmarks
If you’ve created several bookmarks and don’t remember them, you can
easily get a list of all the bookmarks by typing :marks as shown below.
:marks
mark line col file/text
a 15 9 ypserver 192.168.1.119
b 11 18 domain THEGEEKSTUFF
G 56 0 group
P 45 0 passwd
38
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
This indicates that the following bookmarks were created:
• a – local bookmark with name “a” at line 15 and col 9. This also
displays the text of line#15 . This is from the current open file, which
is yp.conf
• b – local bookmark with name “b” at line 11 and col 18. This also
gives the text of line#18. This is from the current open file, which is
yp.conf
• G – global bookmark with name “G” at line 56 and col 0 of “group”
file
• P – global bookmark with name “P” at line 45 and col 0 of “passwd”
file.
Apart from the above bookmarks, anytime you type :marks inside Vim, you
may get the following lines. These marks ‘ (single-quote), ” (double quote), [
, ], ^ and . (period) are created and managed by Vim and you don’t have
direct control over them.
:marks
mark line col file/text
' 8 12 #^IUse broadcast on the local net
" 1 0 # /etc/yp.conf - ypbind configuration
[ 11 0 domain THEGEEKSTUFF
] 11 19 domain THEGEEKSTUFF
^ 11 19 domain THEGEEKSTUFF
. 11 18 domain THEGEEKSTUFF
39
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
You can use the above displayed default marks as shown below.
Default Marks Description
`" To the position where you did last edit before exit
`[ To the first character of previously changed or
yanked text
`] To the last character of previously changed or
yanked text
' To the last line of previously selected visual area
'. To the position of where the last change was made
'^ To the position where the cursor was the last time
when Insert mode was stopped
Quick Summary of Vim Bookmark Commands
• ma – Creates a bookmark called a
• `a – Jump to the exact location (line and column) of the bookmark a
• ‘a – Jump to the beginning of the line of the bookmark a
• :marks – Display all the bookmarks
• :marks a – Display the details of the bookmark with name a
• `. – Jump to the exact location (line and column) where the last
change was performed
• ‘. – Jump to the beginning of the line where the last change was
performed
40
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
Hack 18. Navigate any Source Code effectively using
Ctags
Install ctags package
# apt-get install exuberant-ctags
(or)
# rpm -ivh ctags-5.5.4-1.i386.rpm
warning: ctags-5.5.4-1.i386.rpm: V3 DSA signature:
NOKEY, key ID db42a60e
Preparing...
########################################### [100%]
1:ctags
########################################### [100%]
Generating ctags on your source code
Go to the directory where your source code is located. In the example below,
I have stored all my C programming source code under ~/src directory.
# cd ~/src
# ctags *.c
The ctags command will create a file named tags that will contain
information (tags) about the *.c program files. The following is partial
content from a ctags file.
# cat tags
AddAcl dumputils.c /^AddAcl(PQExpBuffer aclbuf,
41
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
const char *keyword)$/;" f file:
ArchiveEntry pg_backup_archiver.c
/^ArchiveEntry(Archive *AHX,$/;" f
AssignDumpId common.c
/^AssignDumpId(DumpableObject *dobj)$/;" f
Usage 1: Navigate to particular function definition by specifying the
function name using :ta
In the example below, :ta main will take you to the main function definition
inside the mycprogram.c
# vim mycprogram.c
:ta main
By using this facility you can navigate to any function definition by specifying
the function name.
Usage 2. Navigating to the function definition from ‘function call’
using CTRL + ]
When the cursor is over the function call, then press CTRL + ] to go to the
function definition.
In the following example, when the cursor is anywhere within the word
ssh_xcalloc, pressing CTRL + ] will take you to the ssh_xcalloc function
definition.
# vim mycprogram.c
av = ssh_xcalloc(argc, sizeof(char *));
Note: If the ctags couldn’t find that function, you’ll get the following
message in the Vim status bar at the bottom: E426 tag not found ssh_xcalloc
42
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
Usage 3. Returning back to the caller from the definition using
CTRL-T
After using CTRL-] to jump to a function definition, you can press CTRL-T
which will take you back to the function call again.
Usage 4. Navigating through a list of functions which have similar
names
In this example, :ta will go to first function definition whose name starts with
get. Vim also builds a list of all the functions whose names start with get
which we can navigate.
# vim mycprogram.c
:ta /^get
The following Vim commands can be used to navigate through the matched
tag list.
Vim command Description
:ts Display the tag list
:tn Go to the next tag in the list
:tp Go to the previous tag in the list
:tf Go to the first function in the list
:tl Go to the last function in the list
43
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
Hack 19. Convert Vim Editor to Beautiful Source
Code Browser for Any Programming Language
Navigating source code using tags is fast and functional but not very visually
attractive. If you want to navigate source code in a manner similar to
navigating in a file browser, you can use the Vim taglist plugin to make Vim
into a source code browser.
Vim taglist plugin author Yegappan Lakshmanan has this to say about the
plugin:
The “Tag List” plugin is a source code browser plugin for Vim and
provides an overview of the structure of source code files and allows
you to efficiently browse through source code files for different
programming languages.
Install and Configure Vim Taglist plugin
Download Vim Taglist plugin from vim.org website as shown below.
$ cd ~
$ wget -O taglist.zip
http://www.vim.org/scripts/download_script.php?src_id=7
701
Install Taglist Vim plugin as shown below.
$ mkdir ~/.vim
$ cd ~/.vim
$ unzip ~/taglist.zip
44
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
Archive: ~/taglist.zip
inflating: plugin/taglist.vim
inflating: doc/taglist.txt
Enable the plugin by adding following line to the ~/.vimrc
$ vim ~/.vimrc
filetype plugin on
Prerequisite: ctags should be installed to use taglist plugin. But it is not a
must to generate the tag list manually by ctags command for using taglist
plugin.
Usage 1: Open the Tag List Window in Vim using :TlistOpen
# vim mycprogram.c
:TlistOpen
From the Vim editor, execute :TlistOpen as shown above, which opens the tag
list window with the tags of the current file as shown in the figure below.
45
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
Fig: List of Functions and Variables in a Program
Usage 2: Jump to a Function Definition within a source code
By clicking on the function name in the left side panel, you jump to the
definition of the function as shown in the Figure below.
Apart from jumping to functions quickly, you can jump to classes, structures,
variables, etc., by clicking on the corresponding values from the tag-browser
in the left side panel.
46
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
Fig: Jump to a specific function quickly
Usage 3: Jump to a function defined in another source file
When you encounter a function in a source file that is defined elsewhere, and
you want to go to the function definition, you can do this via two different
methods.
Method 1: If you had the ctags generated for that file, when the cursor is in
the function call pressing CTRL + ] will take you to the function definition.
The tag list window will show the tags for that newly opened file.
Method 2: Open another file also in the same Vim session. Vim will update
the tag list window with the information about that file. Search for that
function name in the tag list window, and press  on that function name,
and Vim will take you to the function definition.
Usage 4: Viewing the prototype/signature of functions or variables.
Press ’space’ when the cursor is in the function name or in the variable name
in the tag list window to show the prototype (function signature) of it in the
Vim status bar as shown below.
47
Buyer: xiujuan lu (PI:EMAIL)
Transaction ID: 85W16630AD8515549
Vim 101 Hacks www.thegeekstuff.com
In the example below, click on dbd_construct within the tag window and
press space to display the function signature in the bottom Vim Status bar.
Fig: Display Function signature
Usage 5: Viewing the total number of functions or variables in a
source code file
Pressing 'space' with the cursor over a tag type (like function or variable)
shows the count of tags of that type. In the example below, when the cursor
is over ‘function’ press space, which will display the total number of
functions in the current source code.
Fig: Display total number of functions
48