并将它们画在一张主图上。我们第一次看到了这个软件的样子，并
不令人赏心悦目。它是一些混乱的区块和线条。为了让它更好理解
一些，我们用颜色标出了控制路径，突出了它们的类型。然后我们
后退一步看着它。
它令人吃惊。它令人目眩神迷。它就像一只喝醉了的蜘蛛，跌进了
一些海报颜料罐里，然后在一张纸上织成了一张彩色的网。它看起
来就像图2-1那样（这是一个简化后的版本，细节已经修改了，为了
保护那些有罪的人）。事情变得很清楚了。我们画出了伦敦地铁
图。它甚至有环线。
→
图2-1：“混乱大都市"的“架构”
这就是那种让跑遍各地的销售员恼怒的系统。实际上，它与伦敦地
铁的相似性让人印象深刻：从系统的一端到另一端有很多条路线
哪条路最好通常是不明显的。地理位置很近的目的地常常很难到
897
---
## Page 899
达，你希望能在两点之间再挖掘一条隧道。有时候，走出地铁换乘
巴士实际上是更好的选择。或者干脆步行。
无论从哪个角度来看，这都不是一个“好的”架构。“大都市"的问题
超出了设计的范畴，它涉及并发过程和企业文化。这些问题实际上
导致了许多架构腐烂。代码经过几年的“有机"生长，没有人进行过
任何架构设计，而且各个部分是随着时间推移，没有经过太多思考
就栓在一起的。我们这么说真的算是客气的了。没有人停下来为代
码建立一个理智的结构。它增长、膨胀，成为绝对没有任何架构设
计的系统的一个典型。代码集从来不会没有架构。这个系统只是拥
有一个很糟糕的架构。
如果我们回顾创建“大都市”的公司的历史，它所处的状态是可以理
解的（但是不可宽恕）：这是一个初创的公司，快速提供许多新版
本的压力很大。延期是不可容忍的一这会带来财务灾难。软件工程
师被道尽其极限，快速交付。所以代码是以一系列疯狂冲刺的方式
垒在一起的。
得到反映。
2.1.1后果
“大都市”缺少城市规划，这带来了许多后果，我们将在这里进行分
析。这些后果的影响是很严重的，远远超出了你对不良设计的天真
想象。地铁变成了云宵飞车，飞速地朝下猛冲。
不可理解
正如你已经看到的，“大都市"的架构以及缺乏强制的结构，导致了
一个很难理解的软件系统，实际上几乎不可能修改。新加入项目的
团队成员（警如我）会被复杂性惊呆，不能够搞清楚状况。
坏的设计确实会招致在它上面叠加坏的设计（实际上它简直就是道
使你那样做），因为没有一种明智的方式可以扩展该设计。在所有
能解决手上工作的方法之中，阻力最小的总会被采用，没有明显的
办法来修复这些结构问题，所以只要能减少麻烦，就会扔进去新的
功能。
898
---
## Page 900
注意：重要的是要保持软件设计的品质。坏的架构设计会招致更坏
的架构设计。
缺乏内聚
系统的组件完全没有内聚性。每个组件本来都应该有一个定义良好
的角色，但是它们却包含了一堆杂乱的、不一定相关的功能。这使
我们很难确定组件存在的原因，也很难弄明白系统中已经实现了哪
项具体的功能。
很自然，这让缺陷修复成为了一场噩梦，严重地影响了软件的品质
和可靠性。
功能和数据都放在了系统中错误的地方。许多你认为是“核心服务”
的部分却没有在系统的核心部分实现，而是由边远的模块来模拟实
现（非常痛苦并且代价很大）。
进一步的软件历史考察揭示了原因：原来的团队中存在个人斗争，
所以一些关键程序员开始创建他们自己的软件小帝国。他们把自己
认为酷的功能放到他们的模块中，即使它不应该属于那里。为了做
到这一点，他们于是又实现了更为巴罗克式的通信机制，把控制连
回到正确的地方。
注意：开发团队中健康的工作关系将直接有益于软件设计。不健康
的关系和个性膨胀会导致不健康的软件。
内聚和耦合
软件设计的关键品质是内聚和耦合。这不是什么新奇的"面向对象”
概念：自从20世纪70年代出现结构化设计开始，开发者对这一概念
已经谈论了许多年。我们的目标是通过设计使系统的组件具备下列
品质：
高内聚（Strongcohesion）
内聚是一个测量指标，说明相关的功能如何聚集在一起，模块内的
各部分作为一个整体工作得如何。内聚性是将模块粘成一个整体的
胶水。
899
---
## Page 901
弱内聚的模块是不良分解的信号。每个模块都必须具有清晰定义的
角色，而不只是一堆不相关的功能。
·低耦合（Lowcoupling）
耦合是模块之间独立性的测量指标一它们之间进出“电线”的数量。
在最简单的设计中，模块几乎没有什么耦合，所以彼此间的依赖关
系较少。显然，模块不能够完全解耦，否则它们将根本不能够一起
工作！
模块之间的联系有多种方式，有的是直接的，有的是间接的。模块
可以调用其他模块中的函数，或被其他模块所调用。它可能使用其
他模块提供的Web服务或设施，可能使用其他模块的数据类型，或
提供某些数据让其他模块使用（可能是变量或文件）。
好的软件设计会限制通信的线路，只提供那些绝对需要的。这种通
信线路是确定架构的一部分因素。
不必要的耦合
“大都市"没有清晰的分层。模块之间的依赖关系不是单向的，耦合
常常是双向的。组件A会到达组件B的内部，目的是完成它的一项任
务。在其他的地方，组件B又通过硬编码调用了组件A。系统没有最
底层，也没有控制中心。它是整体式的一大块软件。
这意味着系统的各部分之间耦合非常紧密，你想启动系统骨架就不
得不创建所有的组件。单个组件的任何改变都会波及其他组件，需
要修改许多依赖它的组件。孤立地看代码组件没有任何意义。
这使得低层次的测试不能够进行。不仅是代码层次的测试不可能进
行，而且组件层次的集成测试也不能够创建，因为每个组件都依赖
于几乎所有其他组件。当然，在公司中，测试从来也不具有很高的
优先级（我们根本没有时间来做这种测试），所以这“不成为问
题”。不必说，这个软件不太可靠。
注意：好的设计考虑到内部组件连接的连接机制和连接数（以及连
接性质）。系统的单个部分应该能够独立存在。紧耦合将导致不可
测试的代码。
代码问题
900
---
## Page 902
不良的顶层设计所带来的问题也影响到了代码层面。问题会引起其
他问题（参见Hunt和Davis[1999]中关于破窗理论的讨论）。因为没
有通用的设计，也没有整体项目“风格”，所以也没有人关心共同的
编码标准、使用共同的库，或采用共同的惯例。组件、类和文件都
没有命名惯例。甚至都没有共同的构建系统。胶带、Shell脚本、
Perl胶水与makefile和VisualStudio项目文件混在一起。编译这个怪物
被视为一场复杂的成人仪式！“大都市”最微妙而又最严重的问题是
重复。由于没有清晰的设计，也不清楚功能应该处于的位置，所以
轮子在整个代码集中不断重新发明。一些简单的东西，如通用算法
和数据结构，在许多模块中重复出现，每种实现都带有自己的一些
未知的缺陷和怪异的行为特征。更大范围的关注点，如外部通信和
数据缓存，也实现了许多次。
更多的软件历史考察揭示了原因：“大都市"开始是从一系列独立的
原型拼起来的，这些原型本该抛弃。“大都市"实际上是偶然形成的
城市群。当代码组件缝合在一起时，组件之间匹配得不好。随着时
间的推移，这种随意的缝合开始破裂，所以组件互相拉扯，导致代
码集破碎，而不是和谐地协作。
注意：松弛而模糊的架构将导致每个代码组件编写得不好，并且相
互之间匹配得不好。它也会导致重复的代码和工作。
代码以外的问题
“大都市”内部的问题已经超越了代码集，在公司中其他的地方导致
了混乱。不仅并发团队中有问题，而且架构的腐烂也影响到了支持
和使用该产品的人。
开发团队
项目的新成员（例如我）被复杂性惊呆了，不能够搞清楚状况。这
很好地解释了为什么很少有新人能在公司里待下来一员工流失率非
常高。
那些留下来的人非常努力地工作，项目的压力非常大。规划新的功
能会导致极大的恐惧。
缓慢的开发周期
106
---
## Page 903
由于维护“大都市"是一项恐怖的任务，所以即使是最简单的变更或
“很小的"缺陷修复都不知道要花多少时间。管理软件并发周期非常
滩。客户只好等着实现重要的特征，管理层对并发团队不能满足业
务目标感到越来越沮丧。
支持工程师
在支持这个极不寻常的产品时，产品支持工程师度过了可怕的时
光，他们要设法弄明百很小的软件版本差异之间错综复杂的行为差
异。
第三方支持
项目并发了一个外部支持协议，支持其他设备远程控制“大都市”。
由于它只是软件内部结构上面薄薄的一层，所以它反映了“大都市”
的架构，这意味着它也是巴罗克式的、难以理解的、容易偶尔出错
的、不可能使用的。第三方工程师的生活也被“大都市"的可怕结构
搞得一团糟。
公司内部政治
并发问题导致了公司内部不同“种族"的分裂。并发团队与营销销售
团队之间关系紧张，每次新版本要推出时，制造部门总是要承受巨
大的压力。经理们已经绝望了。
注意：不良架构的影响不仅限于代码。它会进一步影响到人、团
队、过程和时间表。
清晰的需求
软件历史考察凸显了“混乱大都市”之所以混乱的一个重要原因：在
项目并始之初，团队并不知道要构建的是什么。
本来的初创公司知道它要占领哪个市场，但不知道哪种产品能占领
这个市场。所以他们两面下注，要求一个可以做许多事情的软件平
台。噢，我们昨关就想得到它了。所以程序员们急急忙忙创建了一
个毫无希望的总体基础设施，它具有做任何事情的潜力（但做得不
好），而不是创建一个把一件事情做好的架构，并能够在将来进行
扩展，做更多的事情。
902
---
## Page 904
注意：重要的是要在并始设计系统之前知道你打算设计什么。如果
你不知道它是什么，也不知道它将做什么，暂时不要并始设计它。
只设计你知道需要的东西。
在规划“大都市"的早期阶段，有太多的架构师。面对糊涂的需求，
他们都拿着一块拼不起来的拼图，试图独自工作。他们在工作时没
有考虑到整个项目，所以当他们试图将这些拼图拼在一起时，就拼
不起来了。没有时间进一步思考架构，软件设计的各个部分有一些