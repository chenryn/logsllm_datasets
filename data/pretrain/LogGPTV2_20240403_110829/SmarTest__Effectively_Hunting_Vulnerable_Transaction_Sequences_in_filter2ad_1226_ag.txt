ﬁnding unknown vulnerabilities more effectively. We imple-
mented the technique as a tool, SMARTEST, and demonstrated
that SMARTEST is signiﬁcantly more effective than existing
tools for ﬁnding vulnerable transaction sequences.
Acknowledgement
We thank the anonymous reviewers and our shepherd, By-
ron Williams, for their constructive comments that helped to
improve this paper. This work was supported by Samsung
Research Funding & Incubation Center of Samsung Elec-
tronics under Project Number SRFC-IT1701-51. This work
was also supported by Institute of Information & communica-
tions Technology Planning & Evaluation(IITP) grant funded
by the Korea government(MSIT) (No.2020-0-01337, (SW
STAR LAB) Research on Highly-Practical Automated Soft-
ware Repair). This work was also supported by Institute of
Information & communications Technology Planning & Eval-
uation(IITP) grant funded by the Korea government(MSIT)
(No.2019-0-01697, Development of Automated Vulnerability
Discovery Technologies for Blockchain Platform Security).
This research was also supported by the MSIT(Ministry of
Science and ICT), Korea, under the ICT Creative Consilience
program(IITP-2021-0-01819) supervised by the IITP(Institute
for Information & communications Technology Planning &
Evaluation). So was supported by the Korea University Grad-
uate School Junior Fellow Research Grant.
References
[1] A $50 Million Hack Just Showed That
the DAO Was
All Too Human.
https://www.wired.com/2016/06/
50-million-hack-just-showed-dao-human/. Accessed: January
2021.
[2] ERC20 Token Standard. https://github.com/ethereum/EIPs/
blob/master/EIPS/eip-20.md. Accessed: January 2021.
[3] Mythril: a security analysis tool for EVM bytecode. https://github.
com/ConsenSys/mythril. Accessed: January 2021.
[4] Solidity.
https://docs.soliditylang.org/en/v0.8.0/. Ac-
cessed: January 2021.
[5] The Parity Wallet Hack Explained. https://blog.openzeppelin.
com/on-the-parity-wallet-multisig-hack-405a8c12e8f7/.
Accessed: January 2021.
[6] Leonardo Alt and Christian Reitwiessner. Smt-based veriﬁcation of
solidity smart contracts. In Tiziana Margaria and Bernhard Steffen,
editors, Leveraging Applications of Formal Methods, Veriﬁcation and
Validation. Industrial Practice, pages 376–388, 2018.
[7] Roberto Baldoni, Emilio Coppa, Daniele Cono D’elia, Camil Deme-
trescu, and Irene Finocchi. A survey of symbolic execution techniques.
ACM Comput. Surv., 51(3), 2018.
[8] Aaron R. Bradley and Zohar Manna. The Calculus of Computation:
Decision Procedures with Applications to Veriﬁcation. Springer-Verlag,
2007.
[9] Lexi Brent, Neville Grech, Siﬁs Lagouvardos, Bernhard Scholz, and
Yannis Smaragdakis. Ethainter: A smart contract security analyzer for
composite vulnerabilities. In Proceedings of the 41st ACM SIGPLAN
Conference on Programming Language Design and Implementation,
PLDI 2020, page 454–469, 2020.
[10] Lexi Brent, Anton Jurisevic, Michael Kong, Eric Liu, François Gau-
thier, Vincent Gramoli, Ralph Holz, and Bernhard Scholz. Vandal:
A scalable security analysis framework for smart contracts. CoRR,
abs/1809.03981, 2018.
[11] Sooyoung Cha, Seongjoon Hong, Junhee Lee, and Hakjoo Oh. Auto-
matically generating search heuristics for concolic testing. In Proceed-
ings of the 40th International Conference on Software Engineering,
pages 1244–1254, 2018.
[12] Junjie Chen, Wenxiang Hu, Lingming Zhang, Dan Hao, Sarfraz Khur-
shid, and Lu Zhang. Learning to accelerate symbolic execution via
code transformation. In 32nd European Conference on Object-Oriented
Programming (ECOOP 2018), 2018.
[13] Leonardo de Moura and Nikolaj Bjørner. Z3: An efﬁcient smt solver.
In C. R. Ramakrishnan and Jakob Rehof, editors, Tools and Algorithms
for the Construction and Analysis of Systems, pages 337–340, 2008.
[14] Thomas Durieux, João F. Ferreira, Rui Abreu, and Pedro Cruz. Em-
pirical review of automated analysis tools on 47,587 ethereum smart
contracts. In Proceedings of the ACM/IEEE 42nd International Con-
ference on Software Engineering, ICSE ’20, page 530–541, 2020.
[15] Oscar Soria Dustmann, Klaus Wehrle, and Cristian Cadar. Parti: A
multi-interval theory solver for symbolic execution. In Proceedings of
the 33rd ACM/IEEE International Conference on Automated Software
Engineering, ASE ’18, page 430–440, 2018.
[16] Josselin Feist, Gustavo Greico, and Alex Groce. Slither: A static
analysis framework for smart contracts. In Proceedings of the 2nd
International Workshop on Emerging Trends in Software Engineering
for Blockchain, WETSEB ’19, page 8–15, 2019.
[17] Joel Frank, Cornelius Aschermann, and Thorsten Holz. ETHBMC: A
bounded model checker for smart contracts. In Srdjan Capkun and
Franziska Roesner, editors, 29th USENIX Security Symposium, USENIX
Security 2020, August 12-14, 2020, pages 2757–2774, 2020.
[18] Ákos Hajdu and Dejan Jovanovic. solc-verify: A modular veriﬁer for
solidity smart contracts. CoRR, abs/1907.04262, 2019.
[19] Jingxuan He, Mislav Balunoviundeﬁned, Nodar Ambroladze, Petar
Tsankov, and Martin Vechev. Learning to fuzz from symbolic execution
with application to smart contracts. In Proceedings of the 2019 ACM
SIGSAC Conference on Computer and Communications Security, CCS
’19, page 531–548, 2019.
1376    30th USENIX Security Symposium
USENIX Association
[20] Frederick Jelinek. Interpolated estimation of markov source parameters
from sparse data. In Proc. Workshop on Pattern Recognition in Practice,
1980, 1980.
[21] Xiangyang Jia, Carlo Ghezzi, and Shi Ying. Enhancing reuse of con-
straint solutions to improve symbolic execution. In Proceedings of
the 2015 International Symposium on Software Testing and Analysis,
ISSTA ’15, page 177–187, 2015.
[22] Bo Jiang, Ye Liu, and W. K. Chan. Contractfuzzer: Fuzzing smart con-
tracts for vulnerability detection. In Proceedings of the 33rd ACM/IEEE
International Conference on Automated Software Engineering, ASE
2018, page 259–269, 2018.
[23] Daniel Jurafsky and James H. Martin. Speech and Language Process-
ing: An Introduction to Natural Language Processing, Computational
Linguistics, and Speech Recognition. Prentice Hall PTR, 1st edition,
2000.
[24] Sukrit Kalra, Seep Goel, Mohan Dhawan, and Subodh Sharma. ZEUS:
In 25th Annual Network and
analyzing safety of smart contracts.
Distributed System Security Symposium, NDSS, 2018.
[25] Johannes Krupp and Christian Rossow. Teether: Gnawing at ethereum
to automatically exploit smart contracts. In Proceedings of the 27th
USENIX Conference on Security Symposium, SEC’18, page 1317–1333,
2018.
[26] Xin Li, Yongjuan Liang, Hong Qian, Yi-Qi Hu, Lei Bu, Yang Yu, Xin
Chen, and Xuandong Li. Symbolic execution of complex program
driven by machine learning based constraint solving. In 2016 31st
IEEE/ACM International Conference on Automated Software Engineer-
ing (ASE), pages 554–559. IEEE, 2016.
[27] C. Liu, H. Liu, Z. Cao, Z. Chen, B. Chen, and B. Roscoe. Reguard:
Finding reentrancy bugs in smart contracts. In 2018 IEEE/ACM 40th
International Conference on Software Engineering: Companion (ICSE-
Companion), pages 65–68, 2018.
[28] Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena, and Aquinas
Hobor. Making smart contracts smarter. In Proceedings of the 2016
ACM SIGSAC Conference on Computer and Communications Security,
CCS ’16, pages 254–269, 2016.
[29] B. K. Mohanta, S. S. Panda, and D. Jena. An overview of smart contract
and use cases in blockchain technology. In 2018 9th International Con-
ference on Computing, Communication and Networking Technologies
(ICCCNT), pages 1–4, 2018.
[30] M. Mossberg, F. Manzano, E. Hennenfent, A. Groce, G. Grieco, J. Feist,
T. Brunson, and A. Dinaburg. Manticore: A user-friendly symbolic
execution framework for binaries and smart contracts. In 2019 34th
IEEE/ACM International Conference on Automated Software Engineer-
ing (ASE), pages 1186–1189, 2019.
[31] Ivica Nikoliundeﬁned, Aashish Kolluri, Ilya Sergey, Prateek Saxena,
and Aquinas Hobor. Finding the greedy, prodigal, and suicidal con-
tracts at scale. In Proceedings of the 34th Annual Computer Security
Applications Conference, ACSAC ’18, page 653–663, 2018.
[32] A. Permenev, D. Dimitrov, P. Tsankov, D. Drachsler-Cohen, and
In 2020
M. Vechev. Verx: Safety veriﬁcation of smart contracts.
IEEE Symposium on Security and Privacy (SP), pages 414–430, 2020.
[33] Veselin Raychev, Martin Vechev, and Eran Yahav. Code completion
In Proceedings of the 35th ACM
with statistical language models.
SIGPLAN Conference on Programming Language Design and Imple-
mentation, PLDI ’14, page 419–428, 2014.
[34] Clara Schneidewind, Ilya Grishchenko, Markus Scherer, and Matteo
Maffei. Ethor: Practical and provably sound static analysis of ethereum
smart contracts. In Proceedings of the 2020 ACM SIGSAC Conference
on Computer and Communications Security, CCS ’20, page 621–640,
2020.
[35] Shiqi Shen, Shweta Shinde, Soundarya Ramesh, Abhik Roychoudhury,
and Prateek Saxena. Neuro-symbolic execution: Augmenting sym-
bolic execution with neural constraints. In 26th Annual Network and
Distributed System Security Symposium (NDSS), 2019.
[36] S. So, M. Lee, J. Park, H. Lee, and H. Oh. Verismart: A highly precise
safety veriﬁer for ethereum smart contracts. In 2020 IEEE Symposium
on Security and Privacy (SP), pages 718–734, 2020.
[37] Christof Ferreira Torres, Julian Schütte, and Radu State. Osiris: Hunting
for integer bugs in ethereum smart contracts. In Proceedings of the
34th Annual Computer Security Applications Conference, ACSAC ’18,
page 664–676, 2018.
[38] Christof Ferreira Torres, Mathis Steichen, and Radu State. The art of
the scam: Demystifying honeypots in ethereum smart contracts. In
Proceedings of the 28th USENIX Conference on Security Symposium,
SEC’19, page 1591–1607, 2019.
[39] Petar Tsankov, Andrei Dan, Dana Drachsler-Cohen, Arthur Gervais,
Florian Bünzli, and Martin Vechev. Securify: Practical security analysis
of smart contracts. In Proceedings of the 2018 ACM SIGSAC Con-
ference on Computer and Communications Security, CCS ’18, page
67–82, 2018.
[40] Sheng-Han Wen, Wei-Loon Mow, Wei-Ning Chen, Chien-Yuan Wang,
and Hsu-Chun Hsiao. Enhancing symbolic execution by machine
learning based solver selection. In Proceedings of the NDSS Workshop
on Binary Analysis Research, 2019.
Appendix
A Simpliﬁcation Procedure in Section 3.1.2
For simplicity, assume FOL is deﬁned by the grammar below:
F ::= true | false | F1 ∧ F2 | F1 ∨ F2 | ¬F | ∀y.x[y] = e | A | A◦ | A•
F is a boolean constant (true, false), the application of a con-
junction (∧), a disjunction (∨), a negation (¬) or a universal
quantiﬁer (∀), or an atomic formula A possibly annotated with
symbols (◦ or •), which provide hints for simplifying given
constraints (Section 3.1, 3.1.2). An atomic formula A is a
binary predicate applied to two terms (i.e., A ::= e1 (cid:31) e2).
The simpliﬁcation procedure is the following. Suppose a
VC F = F1 ∧¬F2 is given where F is a conjunctive formula,
F1 is a state condition, and F2 is a safety condition (Sec-
tion 3.1.1); for State at line 13 of Algorithm 1, we consider
State∧¬false (i.e., F1 = State, F2 = false). Let Fps be the path
conditions and Solidity-speciﬁc constraints in F1, i.e., con-
junctions of atomic formulas annotated with • symbols. We
ﬁrst collect a set of necessary variables X, which are needed
to generate vulnerable transaction sequences. Concretely, we
collect the initial set of variables I = FV(Fps)∪FV(F2), where
FV(F(cid:48)) denotes the set of free variables in F(cid:48). Then, we itera-
tively collect all variables that may affect variables in I, until
we reach a ﬁxed point, i.e., X = ﬁx(λx.I ∪ C(F,x)) where the
“transfer function” C : FOL×℘(Var) →℘(Var) is deﬁned be-
low. Next, by iterating each conjunct F(cid:48)(cid:48) in F, we replace F(cid:48)(cid:48)
by true if FV(F(cid:48)(cid:48)) (cid:54)⊆ X (F(cid:48)(cid:48) includes unnecessary variables).
Finally, we remove symbols (◦ or •) in each atomic formula.
The function C is deﬁned as follows:
C(true,X) = X, C(false,X) = X
C(F1 ∧ F2,X) = C(F1,X)∪ C(F2,X),
C(F1 ∨ F2,X) = C(F1,X)∪ C(F2,X)
C(¬F,X) = C(F,X), C(∀y.x[y] = e,X) = C(x[y] = e,X \{y})
(cid:26) X ∪ X(cid:48)
(cid:26) V(e)∪ X
X
X
C(e1 (cid:31) e2,X) =
C((x = e)◦,X) =
if X ∩ X(cid:48) (cid:54)= /0 (where X(cid:48) = V(e1)∪ V(e2))
otherwise
if x ∈ X
otherwise
, C((e1 (cid:31) e2)•,X) = C(e1 (cid:31) e2,X)
USENIX Association
30th USENIX Security Symposium    1377
where V(e) means the set of variables in e. Given a formula
F and a set of variables X, C(F,X) outputs a new set of vari-
ables X(cid:48)(⊇ X) by adding variables in F into X, where the
variables in F may affect some variables in X. The core part
is C((x = e)◦,X), where we collect V(e) only when x is iden-
tiﬁed as a necessary variable to be tracked. By constrast, in
C(e1 (cid:31) e2,X), we collect variables by considering informa-
tion propagation at both sides (i.e., e1 and e2).
B Quantiﬁer Elimination in Section 3.1.2
Given a veriﬁcation condition F that may include universally
quantiﬁed constraints, we obtain its quantiﬁed-free version
F(cid:48) using QE : FOL× FOL → FOL (i.e., F(cid:48) = QE(F,F)):
QE(F1 ∧ F2,F) = QE(F1,F)∧ QE(F2,F), QE(F1 ∨ F2,F) = QE(F1,F)∨ QE(F2,F)
QE(true,F) = true,
QE(false,F) = false
QE(∀y.x[y] = e,F) = (x[y1] = e)∧···∧ (x[yn] = e) where IF,x = {y1,··· ,yn}
QE(¬F(cid:48),F) = ¬(QE(F(cid:48),F))
QE(e1 (cid:31) e2,F) = e1 (cid:31) e2
where IF,x denotes a set of index variables that are used as
indices of x (or variables whose unprimed name is x, e.g., x(cid:48),
x(cid:48)(cid:48)) in F. For example, when F = x[p] = 3∧ x(cid:48)[q] = 4, IF,x =
{p,q}. Note that we do not deﬁne rules for the (e1 (cid:31) e2)◦
and (e1 (cid:31) e2)• cases, because the symbols (◦, •) are removed
after performing the property-focused simpliﬁcation.
C Vulnerability Detection Rules (ERC20 Vio-
lation, Leaking, Suicidal)
ERC20 Violation. We implemented four harness functions
equipped with rules for detecting ERC20 standard violations.
We check these rules, by automatically inserting the test har-
ness functions when predeﬁned conditions are met and ana-
lyzing the augmented contracts.
A test harness for transfer functions checks: 1) whether
the token sender’s balance (e.g., balance[msg.sender]) is
greater than or equal to value (an input parameter indicating
the money to be sent) in case of successful transactions (i.e.,
returning true), 2) the token sender’s balance is decreased
by value (resp., not changed) in case of successful (resp.,
failing) transactions, and 3) the token receiver’s balance (e.g.,
balance[to]) is increased by value (resp., not changed) in
case of successful (resp., failing) transactions.
A test harness for transferFrom functions checks: 1) the
token sender’s balance (e.g., balance[from]) is greater than
or equal to value in case of successful transactions, 2) the
agent’s allowance (e.g., allowance[from][msg.sender])
is greater than or equal to value in case of successful trans-
actions, 3) the token sender’s balance is decreased by value
(resp., not changed) in case of successful (resp., failing) trans-
actions, 4) the token receiver’s balance (e.g., balance[to]) is
increased by value (resp., not changed) in case of successful
(resp., failing) transactions, and 5) the allowance is decreased
by value (resp., not changed) in case of successful (resp.,
failing) transactions.
We also have two test harnesses for detecting violations of
ERC20 invariants. The ﬁrst harness checks whether the sum
of balances between the two different accounts does not over-
ﬂow, where the speciﬁcation is an under-approximated one
(e.g., it does not consider relationships among three account
addresses). The second harness checks whether the balance of
each account address is less than or equal to the total amount
of supplied tokens (e.g., totalSupply).
Ether-leaking Vulnerability. Given a statement that sends
Ethers to accounts, we report a leaking vulnerability if
the contract leaks Ethers to an untrusted user and the
amount of the leaked Ethers is greater than the amount of
Ethers sent from the untrusted user. For example, given
a statement address(rcv).transfer(amount) that sends
amount Weis to rcv, we report a leaking vulnerability if the
following safety condition can be violated: Trusted[rcv]∨
Invest[rcv] ≥ money ∨ money = 0. Trusted is an array that
maps accounts to boolean values. We say an account
X is trusted (resp., untrusted), if Trusted[X] evaluates to
true (resp., false) under a given satisfying assignment. A set
of trusted addresses is deﬁned as: hard-coded addresses in a
source code, a message sender of initial transactions (i.e., a
user that invokes constructors), this address, zero address (a
constraint for ensuring an untrusted rcv is not a zero address,
considering realistic scenarios), and address-typed parameters
in transactions sent from trusted accounts [19]. Invest is an
array that tracks the amount of Ethers invested from each user.
Suicidal Vulnerability. Given a statement that deactivates
contracts, we report a suicidal vulnerability if the statement
can be executed by untrusted users. For example, given a
selfdestruct(...) statement, we report a vulnerability if
the safety condition Trusted[msg.sender] can be violated.
D Mutation Patterns (Leaking, Suicidal)
We describe mutation patterns for injecting likely leaking and
suicidal vulnerabilities into seed contracts. These patterns
aim to cause improper access controls (e.g., allowing anyone
to access safety-critical statements), since one typical root
reason for those vulnerabilities is based on them.
Pattern 1 is to negate conditions in modiﬁers (e.g.,
onlyOwner) that check ownership of contracts (e.g., changing
require(msg.sender==owner) to require(msg.sender
!= owner)). Pattern 2 is to remove modiﬁers for check-
ing ownership in functions, which include statements
that send Ethers (e.g., transfer) or kills contracts (e.g.,
selfdestruct). Pattern 3 is to remove modiﬁers for check-
ing ownership in functions (e.g., transferOwnership) being
in charge of transferring ownership.
The statistics for 54 constructed benchmarks are as follows:
Pattern 1 (20), Pattern 2 (17), and Pattern 3(17).
1378    30th USENIX Security Symposium
USENIX Association