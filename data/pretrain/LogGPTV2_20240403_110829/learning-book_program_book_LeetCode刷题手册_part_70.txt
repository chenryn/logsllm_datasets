Example:
MyLinkedList 1inkedList = new MyLinkedList () ;
1inkedList.addAtHead(1) ;
1inkedList.addAtTai1(3) ;
linkedList.addAtIndex(1, 2); // linked list becomes 1->2->3
1inkedList. get(1) ;
// returns 2
1inkedList.deleteAtIndex(1); // now the linked 1ist is 1->3
1inkedList. get(1) ;
//returns 3
Note:
●All values will be in the range of [1, 1000].
●The number of operations will be in the range of [1, 1000].
● Please do not use the built-in LinkedList library.
题目大意
这道题比较简单，设计一个链表，实现相关操作即可。
解题思路
这题有一个地方比较坑，题目中Note里面写的数值取值范围是[1，1000]，笔者把0当做无效值。结果
case里面出现了0是有效值。case和题意不符。
代码
package leetcode
type MyLinkedList struct {
valint
Next *MyLinkedList
/* Initialize your data structure here. */
func ConstructorO MyLinkedList {
---
## Page 681
return MyLinkedList{val: -999, Next: ni1}
/t Get the value of the index-th node in the linked list. If the index is
invalid, return -1. */
func (this *MyLinkedList) Get(index int) int {
cur := this
for i := 0; cur != nil; i++ {
if i == index {
if cur.val == -999 {
return -1
}else{
return cur.val
cur = cur.Next
return -1
/* Add a node of value val before the first element of the linked list. After
the insertion, the new node will be the first node of the linked list. */
func (this *MyLinkedList) AddAtHead(val int){
if this.val == -999 {
this.val = val
}else{
tmp := &MyLinkedList{val: this.Val, Next: this.Next}
this.val = val
this.Next = tmp
}
/*# Append a node of value val to the last element of the linked list. */
func (this *MyLinkedList) AddAtTail(val int) {
cur := this
for cur.Next != nil {
cur = cur.Next
tmp := &MyLinkedList{Val: val, Next: ni1}
cur.Next = tmp
}
/t Add a node of value val before the index-th node in the linked list. If
index equals to the length of 1inked list, the node will be appended to the
end of linked list. If index is greater than the length, the node will not be
inserted.*/
func (this *MyLinkedList) AddAtIndex(index int,val int) {
cur := this
if index == 0 {
---
## Page 682
this .AddAtHead (va1)
return
for i := 0; cur != nil; i++ {
if i == index-1 {
break
cur = cur.Next
if cur 1= nil && cur.val != -999 {
tmp := &MyLinkedList{val: val, Next: cur.Next}
cur.Next = tmp
/* Delete the index-th node in the linked list，if the index is valid.*/
cur := this
for i := 0; cur != nil; i++ {
if i == index-1 {
break
cur = cur.Next
if cur != nil && cur.Next != nil {
cur.Next = cur.Next.Next
1
/**
*obj := ConstructorO;
*param_l := obj.Get(index);
*obj.AddAtHead(val);
* obj.AddAtTail(val);
* obj.AddAtIndex(index, va1) ;
*obj.DeleteAtIndex(index);
*
Z1o.RandomPickwithBlacklist
题目
Given a blacklist B containing unique integers from [o, N), write a function to return a uniform
random integer from [0, N) which is NOT in B.
Optimize it such that it minimizes the call to system's Math.random().
---
## Page 683
Note:
1. 1 <= N <= 1000000000
2. 0 <= B.length < min(100000, N)
3. [0, N) does NOT include N. See interval notation.
Example 1:
Input:
["Solution","pick","pick","pick"]
[[, [], [, [, ]
Output: [nu11,0,0,0]
Example 2:
Input:
["Solution","pick","pick","pick"]
[[2,, ,, ]
Output: [nu11,1,1,1]
Example 3:
Input:
["Solution","pick","pick","pick"]
[[3,[, , , ]
Output: [nu11,0,0,2]
Example 4:
Input:
["Solution","pick","pick","pick"]
[[4,[2]], [], [], []]
Output: [nu11,1,3,1]
Explanation of Input Syntax:
The input is two lists: the subroutines called and their arguments. Solution's constructor has two
e yim paddem seme ae sjuawn sjuawnaue ou seu xid g isixpelq au pue n sjuawnae
list, even if there aren't any.
---
## Page 684
题目大意
给一个数字N，再给一个黑名单B，要求在[0，N)区间内随机输出一个数字，这个是不在黑名单B中的
任意一个数字。
解题思路
这道题的N的范围特别大，最大是10亿。如果利用桶计数，开不出来这么大的数组。考虑到题目要求
我们输出的数字是随机的，所以不需要存下所有的白名单的数字。
假设 N=10, blacklist=[3, 5, 8, 9]
0
2
3
4
5
6
8
这一题有点类似hash冲突的意思。如果随机访问一个数，这个数正好在黑名单之内，那么就hash冲
突了，我们就把它映射到另外一个不在黑名单里面的数中。如上图，我们可以将3，5重新映射到7，6
的位置。这样末尾开始的几个数要么是黑名单里面的数，要么就是映射的数字。
---
## Page 685
hash表总长度应该为M=N-len（backlist)，然后在M的长度中扫描是否有在黑名单中的数，如果有，
就代表hash冲突了。冲突就把这个数字映射到（M,N）这个区间范围内。为了提高效率，可以选择这个
区间的头部或者尾部开始映射，我选择的是末尾开始映射。从（M，N）这个区间的末尾开始往前找，找黑
名单不存在的数，找到了就把[O,M]区间内冲突的数字映射到这里来。最后pick的时候，只需要查看
map中是否存在映射关系，如果存在就输出map中映射之后的值，如果没有就代表没有冲突，直接输
出那个index即可。
代码
package leetcode
import “math/rand"
type Solution struct{
M
int
B1ackMap map[int]int
}
func Constructor710(N int, blacklist []int) Solution {
blackMap := map[int]int{}
for i := 0; i < len(blacklist); i++{
blackMap[blacklist[i]] =1
M := N - 1en(blacklist)
for _, value := range blacklist {
if value < M {
for{
if _,ok := blackMap[N-1]; ok {
N=-
}else{
break
blackMap[value] = N - 1
N==
return Solution{BlackMap: blackMap, M: M}
---
## Page 686
func （this *Solution) PickO int {
idx := rand.Intn (this .M)
if _, ok := this.BlackMap[idx]; ok {
return this.BlackMap[1dx]
return idx
}
* Your Solution object will be instantiated and called as such:
obj := Constructor(N,blacklist);
*param_1 := obj.Pick(）;
*/
Z13.SubarrayProductLessThanK
题目
Your are given an array of positive integers nums.
Count and print the number of (contiguous) subarrays where the product of all the elements in
the subarray is less than k.
Example 1:
Input: nums = [10, 5, 2, 6], k = 100
Output: 8
Explanation: The 8 subarrays that have product less than 100 are: [10], [5],
[2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6].
Note that [10, 5, 2] is not included as the product of 100 is not strictly
less than k.
Note:
●0 < nums.length <= 50000.
● 0 < nums[i] < 1000.
●0 <=k < 10^6.
题目大意
给出一个数组，要求在输出符合条件的窗口数，条件是，窗口中所有数字乘积小于K。
解题思路
---
## Page 687
这道题也是滑动窗口的题目，在窗口滑动的过程中不断累乘，直到乘积大于k，大于k的时候就缩小左
窗口。有一种情况还需要单独处理一下，即类似[100]这种情况。这种情况窗口内乘积等于k，不小于
k，左边窗口等于右窗口，这个时候需要左窗口和右窗口同时右移。
代码
package leetcode
func numSubarrayProductLessThanK(nums []int, k int) int {
if 1en(nums) == 0 {
return 0
res, 1eft, right, prod := 0, 0, 0, 1
for 1eft <len(nums){
ifright<1en(nums)&& prod*nums [right]<k{
prod = prod α nums [right]
right++
} else if left == right {
left++
right++
}else{
res += right - left
prod = prod / nums [1eft]
left++
}
return res
714.BestTimetoBuy_andSellStockwith
TransactionFee
题目
Your are given an array of integers pri ces , for which the i -th element is the price of a given
stock on day i ; and a non-negative integer fee representing a transaction fee.
You may complete as many transactions as you like, but you need to pay the transaction fee for
each transaction. You may not buy more than 1 share of a stock at a time (ie. you must sell the
stock share before you buy again.)
Return the maximum profit you can make.
Example 1:
---
## Page 688
Input: prices = [1, 3, 2, 8, 4, 9], fee = 2
Output:8
Explanation: The maximum profit can be achieved by:
Buying at prices[o] = 1
Selling at prices[3] = 8
Buying at prices[4] = 4
Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
Note:
●0< prices.1ength <= 50000
●0<prices[i]<50000
0<=fee<50000
题目大意
给定一个整数数组prices，其中第i个元素代表了第i天的股票价格：非负整数fee代表了交易股票的
手续费用。你可以无限次地完成交易，但是你每次交易都需要付手续费。如果你已经购买了一个股票，
在卖出它之前你就不能再继续购买股票了。要求返回获得利润的最大值。
解题思路
·给定一个数组，表示一支股票在每一天的价格。设计一个交易算法，在这些天进行自动交易，要
求：每一天只能进行一次操作；在买完股票后，必须卖了股票，才能再次买入；每次卖了股票以
后，需要缴纳一部分的手续费。问如何交易，能让利润最大？
·这一题是第121题、第122题、第309题的变种题。
·这一题的解题思路是DP，需要维护买和卖的两种状态。buy[i]代表第i天买入的最大收
益，sell[i]代表第i天卖出的最大收益，状态转移方程是buy[i]=max（buy[i-1]，
sell[i-1]-prices[i]] , sell[i] = max(sell[i-1], buy[i-1]+prices[i]-fee]。
代码
package leetcode
import（
"math"
//解法一模拟DP
func maxProfit714(prices []int, fee int) int {
if len(prices)<=1{
return 0
buy, sell := make([]int, len(prices)), make([]int, len(prices))
---
## Page 689
for i := range buy {
buy[i] = math.MinInt64
buy[o] = -prices[0]
for i := l; i < len(prices); i++ {
buy[i] = max(buy[i-1], sell[i-1]-prices[i]]
sel1[i] = max(sell[i-1], buy[i-1]+prices[i]-fee)
return sel1[1en(sell)-1]
//解法二优化辅助空间的DP
func maxProfit714_1(prices []int, fee int) int {
sell, buy := 0, -prices[0]
for i ：= 1;i < 1en(prices); i++ {
sell = max(sell, buy+prices[i]-fee)
buy = max(buy, sell-prices[i])
return sel1
715.RangeModule
题目
A Range Module is a module that tracks ranges of numbers. Your task is to design and implement
the following interfaces in an efficient manner.
●addRange(int 1eft, int right) Adds the half-open interval [1eft, right) , tracking
every real number in that interval. Adding an interval that partially overlaps with currently
tracked numbers should add any numbers in the interval [1eft, right) that are not
already trackedl.
● queryRange (int 1eft, int right) Returns true if and only if every real number in the
interval [1eft, right) is currently being tracked.
tracked in the interval [left, right)
Example 1:
addRange(10, 20) : nu11
removeRange(14, 16) : nu11
queryRange(10, 14) : true (Every number in [10, 14) is being tracked)
queryRange(13, 15) : fa1se (Numbers 1ike 14, 14.03, 14.17 in [13, 15) are not
being tracked)
queryRange(16, 17): true (The number 16 in [16, 17) is sti11 being tracked,
despite the remove operation)
---
## Page 690
Note:
●Ahalf open interval [left, right) denotes all real numbers 1eft <= x < right
●0 < 1eft < right < 10Λ9 in all calls to addRange, queryRange, removeRange
● The total number of calls to addrange in a single test case is at most 1000
● The total number of calls to queryRange in a single test case is at most 5000
● The total number of calls to removeRange in a single test case is at most 1000
题目大意
Range模块是跟踪数字范围的模块。你的任务是以一种有效的方式设计和实现以下接口。
·addRange(int left,intright)添加半开区间[left,right)，跟踪该区间中的每个实数。添加与当前跟
踪的数字部分重叠的区间时，应当添加在区间[left,right)中尚未跟踪的任何数字到该区间中。
·queryRange(int left,intright)只有在当前正在跟踪区间[left,right)中的每一个实数时，才返回
true。
·removeRange(intleft,intright)停止跟踪区间[left,right)中当前正在跟踪的每个实数。
示例：
addRange(10, 20): nu11
removeRange(14, 16) : nu11
queryRange(10，14)：true（区间[10，14）中的每个数都正在被跟踪）
queryRange（13，15)：fa1se（未跟踪区间[13，15）中像14，14.03，14.17 这样的数字)
queryRange（16，17)：true（尽管执行了删除操作，区间[16，17）中的数字16仍然会被跟
踪）
提示：
·半开区间[left,right)表示所有满足left<=×<right的实数。
·在单个测试用例中，对addRange的调用总数不超过1000次。
·在单个测试用例中，对queryRange的调用总数不超过5000次。
·在单个测试用例中，对removeRange的调用总数不超过1000次。
解题思路
·设计一个数据结构，能完成添加区间addRange，查询区间queryRange，移除区间
removeRange三种操作。查询区间的操作需要更加高效一点。
·这一题可以用线段树来解答，但是时间复杂度不高，最优解是用二叉排序树BST来解答。先来看
线段树。这一题是更新区间内的值，所以需要用到懒情更新。添加区间可以把区间内的值都赋值为
1。由于题目中未预先确定区间范围，选用树的形式实现线段树比数组实现更加节约空间当然用
数组也可以，区间最大是1000，点至多有2000个）。移除区间的时候就是把区间内的值都赋值标
记为0
·类似的题目有：第699题，第218题，第732题。第715题是区间更新定值（不是增减），第218
题可以用扫描线，第732题和第699题类似，也是俄罗斯方块的题目，但是第732题的俄罗斯方
块的方块会“断裂”。
代码
---
## Page 691
package leetcode
//RangeModule define
type RangeModule struct {
Root *SegmentTreeNode
// SegmentTreeNode define
type SegmentTreeNode struct {