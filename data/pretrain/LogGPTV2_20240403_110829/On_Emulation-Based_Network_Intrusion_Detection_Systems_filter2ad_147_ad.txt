400
A. Abbasi et al.
exceeding execution thresholds would be passed on to a second-stage analysis
engine, the problem of having to perform unacceptably time-consuming opera-
tions remains, forbidding analysis by second-stage engines as well, and leaving
the malicious nature of the examined code undecided.
We modify our test shellcodes to evade EBNIDSes by exceeding their execu-
tion thresholds based on four techniques:
1. Opaque loops: we generate a loop that takes a long time to perform seem-
ingly necessary operations (such as the calculation of certain values for code-
branching operations used later on) while in reality the checks and calcu-
lation it performs are so-called opaque predicates (i.e. they always result
in the same value and code-ﬂow). Preceding the GetPC stub and decoder
with such a loop lets ’linear’ emulators timeout before they can get to the
triggering code.
2. Intensive loops: similar to the opaque loops, intensive loops employ in-
structions (e.g.. FPU or MMX instructions) which are costly to emulate,
taking a longer amount of time to execute in an emulated environment than
on the target host. Again, this loop is prepended to the actual payload.
3. Integrated loops: as opposed to the opaque and intensive loops, the be-
havior of this stalling code is actually required for proper execution of the
payload. The encoder key and the instructions of the GetPC code are split
up in a loop-based calculation which takes a long amount of time. The shell-
code will have to execute this code in order to obtain the key for proper
decryption of the payload as well as the instructions of the GetPC code.
4. Random Decryption Algorithm: in this technique the payload is en-
crypted with a random key. The shellcode attempts to bruteforce the key
and, after each attempt, checks the decrypted body against a hash value.
The original RDA implementation [24] still needed plaintext GetPC code to
know the address of the encrypted payload body. In our implementation we
generate a second RDA key, XOR the GetPC instructions with the key and
modify the decoder to ﬁrst decrypt the GetPC as well.
Table 4 shows the results of our tests. Libemu cannot detect any of the mod-
iﬁed shellcodes. On the other hand, the shellcodes modiﬁed with the ﬁrst two
techniques (opaque and intensive loops) could all be detected by Nemu. This is
expected and is due to the fact that Nemu searches for potential shellcode entry
points at every byte position within a payload and the execution of the stalling
code is not required for execution of the shellcodes. However, by examining the
source code, we observe that also Libemu should apply the same technique, and
therefore should in principle be able to detect the same shellcodes. We believe
the failure in the detection has to do with some implementation issue which is
unrelated to the concept of execution threshold. None of the shellcodes modiﬁed
with the integrated loops and RDAs techniques are detected, since the proper
execution of the shellcode depends on the results of the execution of the stalling
code.
Table 4. Detection of execution threshold evasion techniques against Libemu and
Nemu
Emulation Based NIDS
401
Opaque
loop
Nemu 9/9
Libemu0/1
Intensive
loop
9/9
0/1
Integrated
loop
0/9
0/1
RDA
0/9
0/1
Context-keying. Information about the target host can be used as a cryp-
tographic key to encrypt and decrypt the shellcode. This technique is known
as Context-Keyed Payload Encoding (CKPE) armoring and has been proposed
by Aycock et. al. to prevent the analysis of malware [27]. EBNIDS approaches
[1, 9, 3, 8, 2, 4] are susceptible to evasion through CKPE armoring. The beneﬁt
of CKPE, compared to non-self-contained shellcode is greater stability, lower
complexity and less eﬀort on the side of the attacker.
Proper use of CKPE prohibits successful emulation of the shellcode by the
EBNIDS and as such reduces the problem of evasion to ensure that the CKPE
routine remains undetected. Strong CKPE armoring would involve producing
a polymorphic key generator stub and decoder as well as avoiding the use of
traditional hallmarks of self-decoding shellcode such as GetPC code or WX
instructions. A context-based payload encoder is available in the Metasploit
framework. Unfortunately, the Metasploit CKPE encoder can be detected by
EBNIDSes since it includes GetPC code in the generated shellcode.
We improve the Metasploit CKPE encoder by adding a non-cryptographically
secure hashing function that generates a hash based on the key and XORs 4 bytes
of GetPC code with it before pushing it to the stack and transferring control
to it. This way, the GetPC code is only executed if the key extracted by the
system (which depends on context) hashes to the right value. We use CPUID
information, values present at static memory addresses, system time and ﬁle
information for context-dependent key generation in our tests as keys with which
we encode our test shellcodes. Both Libemu and Nemu are not capable to detect
any of the modiﬁed shellcodes.
Hash-armoring. A special case of CKPE is hash-armoring [28]. Hash-armoring
uses a cryptographic hash function with a context-based key to hash an (arbi-
trary) salt. The technique consists of checking whether the resultant hash value
for a given salt contains the instructions to be armored (called the run). Given
a run, the armoring routine brute-forces all possible salts until a suitable hash
is found, returning the positions between which the run is located in the hash
together with the salt, forming a triple. This is repeated for the entire malicious
body resulting in a collection of such triples. The unarmoring routine simply ob-
tains the context-based key (in the correct environment) and concatenates the
salt, generating the hash and extracting the run. The process is repeated this
for all triples, thus (re)generating the original shellcode.
402
A. Abbasi et al.
We implement this technique by creating a modiﬁed version of the Con-
text CPUID Metasploit key generator stub with modiﬁed GetPC code, similar
to our CKPE implementation. The unarmoring routine consists of extracting the
runs from the hashes obtained from combining the extracted context key with
the information in the triples. Similarly to what we did for context-keying, we
use CPUID information, values present at static memory addresses, system time
and ﬁle information as context keys with which we armor our test shellcodes.
Both Libemu and Nemu are not capable to detect any of the modiﬁed shellcodes.
4 Conclusions and Future Works
In this paper, we have shown how EBNIDSes work and we have pointed out that
they suﬀer of important limitations. In particular, we have shown that all three
steps of emulation-based detection (namely, pre-processing, emulation, and the
heuristic-based detection) have limitations that make it relatively simple for an
attacker to circumvent the detection. We tested two common EBNIDSes for a
proof of concept and it showed us that it is possible to evade both systems in all
the detection steps.
From the foundational viewpoint, we believe that the most interesting limi-
tations are those regarding emulation and the heuristic-based detection. Indeed,
we have demonstrated that even assuming a bug-free pre-processor and emula-
tor, emulation can still be hindered and heuristic-based detection can be easily
bypassed by a skilled attacker. We have shown that it is possible to write generic
shellcode encoders which are able to completely bypass EBNIDSes by targeting
their intrinsic limitations.
From the practical viewpoint, we think that the weaknesses resulting from
the discrepancy between the emulated environment and the intended target of
the shellcode is actually the easiest one to exploit for an attacker. Given that
outﬁtting EBNIDSes with full host-based information would make the system
completely unscalable, we believe it is unfeasible that EBNIDSes alone will ever
be capable of bridging this particular gap either.
Finally, in addition to the structural problems faced by network-level emula-
tors, the proposed pre-processing components often rely purely on static analysis
techniques leaving them vulnerable to armoring methods.
Our results show that a suﬃciently skilled attacker could armor his shellcode
to bypass all investigated approaches or, even worse, develop an easy-to-use
library to lower the barrier for armoring and provide other attackers with such
an addition to their arsenal.
It is not in the scope of this paper to investigate how to mitigate these prob-
lems. We believe that promising avenues of research are those dealing with alge-
braic speciﬁcation, hidden Markov-Models and neural networks. Regarding the
limitations related to the incompleteness of the emulation environment but there
has been research into the detection of ROP attacks such as [29–31] which would
be crucial for any network intrusion detection system to implement.
Emulation Based NIDS
403
Acknowledgement. The work of the second author has been partially sup-
ported by the dutch government national AVATAR project. The work of the
fourth author has been partially supported by the European Commission through
project FP7-SEC-285477-CRISALIS funded by the 7th Framework Program.
The work of the ﬁfth author has been partially supported by the European
Commission through project FP7-SEC-607093-PREEMPTIVE funded by the
7th Framework Program.
References
1. Polychronakis, M., Anagnostakis, K.G., Markatos, E.P.: Network–Level polymor-
phic shellcode detection using emulation. In: B¨uschkes, R., Laskov, P. (eds.)
DIMVA 2006. LNCS, vol. 4064, pp. 54–73. Springer, Heidelberg (2006)
2. Shimamura, M., Kono, K.: Yataglass: Network-level code emulation for analyzing
memory-scanning attacks. In: Flegel, U., Bruschi, D. (eds.) DIMVA 2009. LNCS,
vol. 5587, pp. 68–87. Springer, Heidelberg (2009)
3. Polychronakis, M., Anagnostakis, K., Markatos, E.: Comprehensive shellcode de-
tection using runtime heuristics. In: Proc. of the 26th Annual Computer Security
Applications Conference (ACSAC 2010), pp. 287–296. ACM (2010)
4. Snow, K., Krishnan, S., Monrose, F., Provos, N.: SHELLOS: Enabling Fast De-
tection and Forensic Analysis of Code Injection Attacks. In: USENIX Security
Symposium (2011)
5. Egele, M., Wurzinger, P., Kruegel, C., Kirda, E.: Defending browsers against drive-
by downloads: Mitigating heap-spraying code injection attacks. In: Flegel, U., Br-
uschi, D. (eds.) DIMVA 2009. LNCS, vol. 5587, pp. 88–106. Springer, Heidelberg
(2009)
6. Gu, B., Bai, X., Yang, Z., Champion, A., Xuan, D.: Malicious shellcode detection
with virtual memory snapshots. In: Proc. of IEEE INFOCOM 2010, pp. 1–9. IEEE
(2010)
7. Portokalidis, G., Slowinska, A., Bos, H.: Argos: An emulator for ﬁngerprinting zero-
day attacks for advertised honeypots with automatic signature generation. In: Proc.
of ACM SIGOPS Operating Systems Review, vol. 40(4), pp. 15–27. ACM (2006)
8. Zhang, Q., Reeves, D., Ning, P., Iyer, S.: Analyzing network traﬃc to detect self-
decrypting exploit code. In: Proc. of the 2nd ACM Symposium on Information,
Computer and Communications Security (CCS 2007), pp. 4–12. ACM (2007)
9. Polychronakis, M., Anagnostakis, K.G., Markatos, E.P.: Emulation-based detection
of non-self-contained polymorphic shellcode. In: Kruegel, C., Lippmann, R., Clark,
A. (eds.) RAID 2007. LNCS, vol. 4637, pp. 87–106. Springer, Heidelberg (2007)
10. Honeynet Project, Dionaea, a low-interaction honeypot (2008), http://www.
honeynet.org/project/Dionaea
11. Markatos, E., Anagnostakis, K.: Noah: A european network of aﬃned honeypots
for cyber-attack tracking and alerting. The Parliament Magazine 262 (2008)
12. Baecher, P., Koetter, M.: libemu (2009), http://libemu.carnivore.it/
13. Branco, R., Barbosa, G., Neto, P.: Scientiﬁc but not academical overview of mal-
ware anti-debugging, anti-disassembly and anti-vm technologies. In: Black Hat
Technical Security Conf., Las Vegas, Nevada (2012)
14. Sikorski, M., Honig, A.: Practical Malware Analysis: The Hands-On Guide to Dis-
secting Malicious Software. No Starch Press (2012)
404
A. Abbasi et al.
15. Ferrie, P.: Attacks on more virtual machine emulators. Symantec Technology Ex-
change (2007)
16. Raﬀetseder, T., Kruegel, C., Kirda, E.: Detecting system emulators. In: Garay,
J.A., Lenstra, A.K., Mambo, M., Peralta, R. (eds.) ISC 2007. LNCS, vol. 4779, pp.
1–18. Springer, Heidelberg (2007)
17. Bania, P.: Evading network-level emulation. arXiv preprint arXiv:0906.1963 (2009)
18. Skape, Using dual-mappings to evade automated unpackers (October 2008),
http://www.uninformed.org/?v=10&a=1&t=sumry
19. Linn, C., Rajagopalan, M., Baker, S., Collberg, C., Debray, S., Hartman, J.: Pro-
tecting against unexpected system calls. In: Proc. of the 14th USENIX Security
Symposium, pp. 239–254 (2005)
20. Chung, S.P., Mok, A.K.: Swarm attacks against network-level emulation/analysis.
In: Lippmann, R., Kirda, E., Trachtenberg, A. (eds.) RAID 2008. LNCS, vol. 5230,
pp. 175–190. Springer, Heidelberg (2008)
21. 0vercl0k, RP++ ROP Sequences Finder (2013),
https://github.com/0vercl0k/rp
22. kingcopes: Attacking the Windows 7/8 Address Space Randomization (2013),
http://kingcope.wordpress.com/2013/01/24/attacking-the-windows-78-
address-space-randomization/
23. Polychronakis, M., Keromytis, A.D.: Rop payload detection using speculative code
execution. In: 2011 6th International Conference on Malicious and Unwanted Soft-
ware (MALWARE), pp. 58–65. IEEE (2011)
24. Kharn: Exploring RDA (2006), http://www.awarenetwork.org/etc/alpha/?x=3
25. Rivest, R., Shamir, A., Wagner, D.: Time-lock puzzles and timed-release crypto.
Massachusetts Institute of Technology, Tech. Rep. (1996)
26. Nomenumbra: Countering behavior based malware analysis (2009), https://
har2009.org/program/track/Other/57.en.html
27. Glynos, D.: Context-keyed Payload Encoding: Fighting the Next Generation of
IDS. In: Proc. of Athens IT Security Conference, ATH.C0N 2010 (2010)
28. Aycock, J., de Graaf, R., Jacobson Jr., M.: Anti-disassembly using cryptographic
hash functions. Journal in Computer Virology 2(1), 79–85 (2006)
29. Davi, L., Sadeghi, A., Winandy, M.: ROPdefender: A detection tool to defend
against return-oriented programming attacks. In: Proc. of the 6th ACM Sympo-
sium on Information, Computer and Communications Security (ASIACCS 2011),
pp. 40–51. ACM (2011)
30. Chen, P., Xiao, H., Shen, X., Yin, X., Mao, B., Xie, L.: DROP: Detecting return-
oriented programming malicious code. In: Prakash, A., Sen Gupta, I. (eds.) ICISS
2009. LNCS, vol. 5905, pp. 163–177. Springer, Heidelberg (2009)
31. Onarlioglu, K., Bilge, L., Lanzi, A., Balzarotti, D., Kirda, E.: G-Free: Defeating
return-oriented programming through gadget-less binaries. In: Proc. of the 26th
Annual Computer Security Applications Conference (ACSAC 2010), pp. 49–58.
ACM (2010)