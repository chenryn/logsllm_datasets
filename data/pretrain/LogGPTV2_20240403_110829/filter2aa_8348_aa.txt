---
title: RegEX
date: 2020-11-25 18:28:43
background: bg-[#e56d2d]
tags:
    - regular expression
    - regexp
    - pattern
categories:
    - Toolkit
intro: |
    A quick reference for regular expressions (regex), including symbols, ranges, grouping, assertions and some sample patterns to get you started.
plugins:
    - copyCode
---
Getting Started
--------
### Introduction
This is a quick cheat sheet to getting started with regular expressions.
- [Regex in Python](#regex-in-python) _(quickref.me)_
- [Regex in JavaScript](#regex-in-javascript) _(quickref.me)_
- [Regex in PHP](#regex-in-php) _(quickref.me)_
- [Regex in Java](#regex-in-java) _(quickref.me)_
- [Regex in MySQL](#regex-in-mysql) _(quickref.me)_
- [Regex in Vim](/vim#search-and-replace) _(quickref.me)_
- [Regex in Emacs](/emacs#search) _(quickref.me)_
- [Online regex tester](https://regex101.com/) _(regex101.com)_
{.cols-2 .marker-round}
### Character Classes
| Pattern       | Description                                   |
|---------------|-----------------------------------------------|
| `[abc]`       | A single character of: a, b or c              |
| `[^abc]`      | A character except: a, b or c                 |
| `[a-z]`       | A character in the range: a-z                 |
| `[^a-z]`      | A character not in the range: a-z             |
| `[0-9]`       | A digit in the range: 0-9                     |
| `[a-zA-Z]`    | A character in the range:a-z or A-Z       |
| `[a-zA-Z0-9]` | A character in the range: a-z, A-Z or 0-9 |
### Quantifiers
| Pattern | Description       |
|---------|-------------------|
| `a?`    | Zero or one of a  |
| `a*`    | Zero or more of a |
| `a+`    | One or more of a  |
|`[0-9]+`  |  One or more of 0-9|
|`a{3}`    |  Exactly 3 of a|
|`a{3,}`    |  3 or more of a|
|`a{3,6}`    |  Between 3 and 6 of a|
|`a*`    |  Greedy quantifier|
|`a*?`    |  Lazy quantifier|
|`a*+`    |  Possessive quantifier|
### Common Metacharacters
- \^
- \{
- \+
- \
- \.
- \(
- \|
- \$
- \\
- \?
{.cols-3 .marker-none}
Escape these special characters with `\`
### Meta Sequences {.row-span-4}
| Pattern      | Description                                                 |
|--------------|-------------------------------------------------------------|
| `.`          | Any single character                                        |
| `\s`         | Any whitespace character                                    |
| `\S`         | Any non-whitespace character                                |
| `\d`         | Any digit, Same as [0-9]                                    |
| `\D`         | Any non-digit, Same as [^0-9]                               |
| `\w`         | Any word character                                          |
| `\W`         | Any non-word character                                      |
| `\X`         | Any Unicode sequences, linebreaks included                  |
| `\C`         | Match one data unit                                         |
| `\R`         | Unicode newlines                                            |
| `\v`         | Vertical whitespace character                               |
| `\V`         | Negation of \v - anything except newlines and vertical tabs |
| `\h`         | Horizontal whitespace character                             |
| `\H`         | Negation of \h                                              |
| `\K`         | Reset match                                                 |
| `\n`         | Match nth subpattern                                        |
| `\pX`        | Unicode property X                                          |
| `\p{...}`    | Unicode property or script category                         |
| `\PX`        | Negation of \pX                                             |
| `\P{...}`    | Negation of \p                                              |
| `\Q...\E`    | Quote; treat as literals                                    |
| `\k`   | Match subpattern `name`                                     |
| `\k'name'`   | Match subpattern `name`                                     |
| `\k{name}`   | Match subpattern `name`                                     |
| `\gn`        | Match nth subpattern                                        |
| `\g{n}`      | Match nth subpattern                                        |
| `\g`      | Recurse nth capture group                                   |
| `\g'n'`      | Recurses nth capture group.                                 |
| `\g{-n}`     | Match nth relative previous subpattern                      |
| `\g`     | Recurse nth relative upcoming subpattern                    |
| `\g'+n'`     | Match nth relative upcoming subpattern                      |
| `\g'letter'` | Recurse named capture group `letter`                        |
| `\g{letter}` | Match previously-named capture group `letter`               |
| `\g` | Recurses named capture group `letter`                       |
| `\xYY`       | Hex character YY                                            |
| `\x{YYYY}`   | Hex character YYYY                                          |
| `\ddd`       | Octal character ddd                                         |
| `\cY`        | Control character Y                                         |
| `[\b]`       | Backspace character                                         |
| `\`          | Makes any character literal                                 |
### Anchors
| Pattern | Description            |
|---------|------------------------|
| `\G`    | Start of match         |
| `^`     | Start of string        |
| `$`     | End of string          |
| `\A`    | Start of string        |
| `\Z`    | End of string          |
| `\z`    | Absolute end of string |
| `\b`    | A word boundary        |
| `\B`    | Non-word boundary      |
### Substitution
| Pattern    | Description                     |
|------------|---------------------------------|
| `\0`       | Complete match contents         |
| `\1`       | Contents in capture group 1     |
| `$1`       | Contents in capture group 1     |
| `${foo}`   | Contents in capture group `foo` |
| `\x20`     | Hexadecimal replacement values  |
| `\x{06fa}` | Hexadecimal replacement values  |
| `\t`       | Tab                             |
| `\r`       | Carriage return                 |
| `\n`       | Newline                         |
| `\f`       | Form-feed                       |
| `\U`       | Uppercase Transformation        |
| `\L`       | Lowercase Transformation        |
| `\E`       | Terminate any Transformation    |
### Group Constructs
| Pattern   | Description                       |
|-----------|-----------------------------------|
| `(...)`   | Capture everything enclosed       |
| `(a|b)`   | Match either a or b               |
| `(?:...)` | Match everything enclosed         |
| `(?>...)` | Atomic group (non-capturing)      |
| `(?|...)` | Duplicate subpattern group number |
| `(?#...)` | Comment                           |
|`(?'name'...)`    |  Named Capturing Group|
|`(?...)`    |  Named Capturing Group|
|`(?P...)`    |  Named Capturing Group|
|`(?imsxXU)`    |  Inline modifiers|
|`(?(DEFINE)...)`    |  Pre-define patterns before using them|
### Assertions
| -                   | -                               |
|---------------------|---------------------------------|
| `(?(1)yes|no)`      | Conditional statement           |
| `(?(R)yes|no)`      | Conditional statement           |
| `(?(R#)yes|no)`     | Recursive Conditional statement |
| `(?(R&name)yes|no)` | Conditional statement           |
| `(?(?=...)yes|no)`  | Lookahead conditional           |
| `(?(?name)` | Recurse subpattern `name`         |
### POSIX Character Classes {.col-span-2}
| Character Class | Same as                 | Meaning                        |
|-----------------|-------------------------|--------------------------------|
| `[[:alnum:]]`   | `[0-9A-Za-z]`           | Letters and digits             |
| `[[:alpha:]]`   | `[A-Za-z]`              | Letters                        |
| `[[:ascii:]]`   | `[\x00-\x7F]`           | ASCII codes 0-127              |
| `[[:blank:]]`   | `[\t ]`                 | Space or tab only              |
| `[[:cntrl:]]`   | `[\x00-\x1F\x7F]`       | Control characters             |
| `[[:digit:]]`   | `[0-9]`                 | Decimal digits                 |
| `[[:graph:]]`   | `[[:alnum:][:punct:]]`  | Visible characters (not space) |
| `[[:lower:]]`   | `[a-z]`                 | Lowercase letters              |
| `[[:print:]]`   | `[ -~] == [ [:graph:]]` | Visible characters             |
| `[[:punct:]]`  | [!"#$%&â€™()*+,-./:;?@[]^_\`{\|}~]            | Visible punctuation characters |
| `[[:space:]]`  | [\t\n\v\f\r ]                                  | Whitespace                     |
| `[[:upper:]]`  | `[A-Z]`                                                     | Uppercase letters              |
| `[[:word:]]`   | `[0-9A-Za-z_]`                                              | Word characters                |
| `[[:xdigit:]]` | `[0-9A-Fa-f]`                                               | Hexadecimal digits             |
| `[[::]]`      | `[\b(?ring springboard etc.          |
| `.           ` | Match a,  9,  + etc.      |
| `h.o         ` | Match hoo, h2o, h/o  etc. |
| `ring\?      ` | Match ring?                                     |
| `\(quiet\)   ` | Match (quiet)                                   |
| `c:\\windows ` | Match c:\windows                                |
Use `\` to search for these special characters:  `[ \ ^ $ . | ? * + ( ) { }`
### Alternatives
| Pattern        | Matches                                    |
|----------------|--------------------------------------------|
| `cat|dog     ` | Match cat or dog     |
| `id|identity ` | Match id or identity |
| `identity|id ` | Match id or identity |
Order longer to shorter when alternatives overlap
### Character classes
| Pattern           | Matches                                                            |
|-------------------|--------------------------------------------------------------------|
| `[aeiou]`         | Match any vowel                                                    |
| `[^aeiou]`        | Match a NON vowel                                                  |
| `r[iau]ng`        | Match ring, wrangle, sprung, etc. |
| `gr[ae]y`         | Match gray or grey                           |
| `[a-zA-Z0-9]`     | Match any letter or digit                                          |
| `[\u3a00-\ufa99]` | Match any [Unicode HÃ n (ä¸­æ–‡)](https://unicode.org/charts/unihan.html) |
In `[ ]` always escape `. \ ]` and sometimes `^ - .`
### Shorthand classes
| Pattern          | Meaning                                               |
|------------------|-------------------------------------------------------|
| `\w            ` | "Word" character _(letter, digit, or underscore)_ |
| `\d            ` | Digit                                                 |
| `\s            ` | Whitespace _(space, tab, vtab, newline)_          |
| `\W, \D, or \S ` | Not word, digit, or whitespace                        |
| `[\D\S]        ` | Means not digit or whitespace, both match             |
| `[^\d\s]       ` | Disallow digit and whitespace                         |
### Occurrences
| Pattern             | Matches                                                            |
|---------------------|--------------------------------------------------------------------|
| `colou?r`           | Match color or colour                        |
| `[BW]ill[ieamy's]*` | Match Bill, Willy, William's etc. |
| `[a-zA-Z]+`         | Match 1 or more letters                                            |
| `\d{3}-\d{2}-\d{4}` | Match a SSN                                                        |
| `[a-z]\w{1,7}`      | Match a UW NetID                                                   |
### Greedy versus lazy
| Pattern                  | Meaning                                                 |
|--------------------------|---------------------------------------------------------|
| `*  + {n,}`_greedy_  | Match as much as possible                               |
| `   `                | Finds 1 big match in \bold\          |
| `*?  +? {n,}?`_lazy_ | Match as little as possible                             |
| ``                  | Finds 2 matches in \b>bold\\/b> |
### Scope {.col-span-2}
| Pattern            | Meaning                                                |
|--------------------|--------------------------------------------------------|
| `\b              ` | "Word" edge (next to non "word" character)             |
| `\bring          ` | Word starts with "ring", ex ringtone        |
| `ring\b          ` | Word ends with "ring", ex spring            |
| `\b9\b           ` | Match single digit 9, not 19, 91, 99, etc.. |
| `\b[a-zA-Z]{6}\b ` | Match 6-letter words                                   |
| `\B              ` | Not word edge                                          |
| `\Bring\B        ` | Match springs and wringer        |
| `^\d*$           ` | Entire string must be digits                           |
| `^[a-zA-Z]{4,20}$` | String must have 4-20 letters                          |
| `^[A-Z]          ` | String must begin with capital letter                  |
| `[\.!?"')]$      ` | String must end with terminal puncutation              |
### Modifiers 
| Pattern             | Meaning                                                  |
|---------------------|----------------------------------------------------------|
| `(?i)`[a-z]*`(?-i)` | Ignore case ON / OFF                                     |
| `(?s)`.*`(?-s)`     | Match multiple lines (causes . to match newline)         |
| `(?m)`^.*;$`(?-m)`  | ^ & $ match lines not whole string |
| `(?x)`              | #free-spacing mode, this EOL comment ignored             |
| `(?-x)`             | free-spacing mode OFF                                    |
| /regex/`ismx`       | Modify mode for entire string                            |
### Groups
| Pattern          | Meaning                                     |
|------------------|---------------------------------------------|
| `(in\|out)put  ` | Match input or output |
| `\d{5}(-\d{4})?` | US zip code _("+ 4" optional)_              |
Parser tries EACH alternative if match fails after group.
Can lead to catastrophic backtracking.
### Back references
| Pattern                  | Matches                                                                     |
|--------------------------|-----------------------------------------------------------------------------|
| `(to) (be) or not \1 \2` | Match to be or not to be                                         |
| `([^\s])\1{2}`           | Match non-space, then same twice more &nbsp; aaa, ... |
| `\b(\w+)\s+\1\b`         | Match doubled words                                                         |
### Non-capturing group
| Pattern             | Meaning                            |
|---------------------|------------------------------------|
| `on(?:click\|load)` | Faster than: `on(click\|load)` |
Use non-capturing or atomic groups when possible
### Atomic groups 
| Pattern                | Meaning                                          |
|------------------------|--------------------------------------------------|
| `(?>red\|green\|blue)` | Faster than non-capturing                        |
| `(?>id\|identity)\b`   | Match id, but not identity |
"id" matches, but `\b` fails after atomic group,
parser doesn't backtrack into group to retry 'identity'
If alternatives overlap, order longer to shorter.
### Lookaround {.row-span-2 .col-span-2}
| Pattern                 | Meaning                                                               |
|-------------------------|-----------------------------------------------------------------------|
| `(?= )`                 | Lookahead, if you can find ahead                                      |
| `(?! )`                 | Lookahead,if you can not find ahead                                   |
| `(?warbling, string, fishing, ... |
| `\b(?!\w+ing\b)\w+\b`   | Words NOT ending in "ing"                                             |
| `(?tend, present, prefix, ...  |