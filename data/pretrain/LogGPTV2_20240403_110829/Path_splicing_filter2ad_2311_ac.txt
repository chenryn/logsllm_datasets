are ﬁnite. We propose two simple techniques to mitigate the occur-
rence of even transient loops. The ﬁrst requires the introduction of
a small counter in the shim header, deﬂection counter. This counter
limits the number of times a packet can switch slices. Because most
packet traverse only about four ASes [19], most potential loops will
be small. Recording the last four ASes traversed by a packet in the
packet header to restrict the ASes to which packets are deﬂected
could also prevent interdomain loops.
AS-level forwarding consistency. In interdomain splicing, trafﬁc
might be forwarded along any of the top k best routes for a pre-
ﬁx, but the AS announces only a single best route to its neighbors.
Some might view using a route that was not announced to its neigh-
bors as a violation of protocol semantics, but we note that an AS
will use a non-default path only if the splicing bits in the packet
explicitly request this behavior or if the default path has failed. We
Reliability with splicing approaches optimal. For in-
tradomain splicing, 5 slices and for interdomain splicing,
only 2 slices achieve near-optimal reliability.
Splicing has fast recovery. An end system can recover
from failure in about 2 trials when trying splicing bits at
random.
Perturbations achieve high novelty with low stretch. In-
tradomain splicing has an average stretch of 20% while
gaining 80% paths which are different from the original.
For interdomain, the average hop stretch is only 3.8%
when 5% of AS links have failed.
Splicing provides better recovery than routing deﬂec-
tions. Path splicing with only 5 slices can provide bet-
ter recovery than routing deﬂections [32] with bounded
stretch. Path splicing generally provides much shorter re-
covered paths, and the recovered paths have much lower
variance in terms of stretch.
Splicing is incrementally deployable. Splicing offers sig-
niﬁcant beneﬁts even if only a fraction of ASes deploy it.
Loops are rare. Forwarding loops are transient and in-
frequent. In intradomain splicing, we observe only 1 loop
longer than 2 hops and no persistent loops, even with 10%
of links failed.
Splicing causes minimal disruption to trafﬁc. Splicing
does not have much adverse effect on trafﬁc in the network.
Our evaluation using real trafﬁc data on Abilene shows that
total load on links increases only by 4% on average.
Table 1: Summary of results.
7.1
7.2
7.3
7.4
7.5
7.6
7.7
also note that, even today, the AS-level forwarding path is by no
means guaranteed to match the advertise AS path, and many such
violations occur in practice [30].
7. EVALUATION
This section evaluates path splicing in terms of the reliability it
achieves, the ability to allow paths to quickly recover from failures
of nodes and links, the latency stretch of the resulting paths, the
reliability when only a fraction of ASes deploy it, the frequency
of loops in spliced paths, and the effects on trafﬁc. Table 1 sum-
marizes the results of our evaluation. We ﬁnd that path splicing
provides high reliability and rapid recovery from failures and pro-
vides end systems access to a large number of low-latency, rela-
tively loop-free paths. We also ﬁnd that path splicing balances traf-
ﬁc across links in the network in much the same fashion as the
“base” set of link weights and, to some extent, even balances this
trafﬁc slightly more evenly.
7.1 High Reliability
This section presents the results for reliability experiments per-
formed with splicing for intradomain and interdomain networks.
We ﬁnd that, in both cases, path splicing achieves reliability that
approaches that of the underlying network.
7.1.1 Intradomain splicing
To evaluate the reliability of path splicing under a variety of link-
failure scenarios, we implemented a simulator that takes as input a
“base” network topology (with link weights) and outputs the dif-
ferent shortest paths trees for that network using degree-based per-
turbations. To simulate link failures, we removed each edge from
the underlying graph with a ﬁxed failure probability. We used the
Sprint backbone network topology inferred from Rocketfuel, which
s
r
i
a
p
n
o
i
t
a
n
d
e
t
c
e
n
n
o
c
s
d
i
i
t
s
e
d
-
e
c
r
u
o
s
f
o
n
o
i
t
c
a
r
F
 0.3
 0.2
 0.1
 0
 0
k = 1 (normal)
k = 2 
k = 3 
k = 4 
k = 5 
k = 10 
Best possible
 0.02
 0.04
 0.08
Probability of link failure (p)
 0.06
 0.1
Figure 6: Reliability of path splicing for the Sprint topology.
s
r
i
a
p
n
o
i
t
d
e
t
c
e
n
n
o
c
s
d
i
a
n
i
t
s
e
d
-
e
c
r
u
o
s
f
o
n
o
i
t
c
a
r
F
 0.16
 0.14
 0.12
 0.1
 0.08
 0.06
 0.04
 0.02
 0
 0
k = 1 (normal)
k = 2
k = 3
k = 4
k = 5
Best possible
 0.01
 0.02
 0.03
 0.04
 0.05
Probability of link failure (p)
Figure 7: Reliability using a 2,500 node policy-annotated Inter-
net AS graph.
has 52 nodes and 84 links [29]. We computed the reliability curves
for graphs generated using path splicing and compared this char-
acteristic both to “conventional” shortest paths routing and to that
of the original underlying graph, whose reliability reﬂects the best
possible reliability that could be achieved by any routing protocol.
A spliced graph with k slices is constructed by taking the union
of the k slices, each of which is a random perturbation, generated as
described in the previous section. Next, we remove each edge from
the graph independently with probability p. We start with k = 1,
evaluate the reliability for the resulting graph, increase k to 2 (i.e.,
add edges to the graph by taking the union of the two graphs) and
evaluate the reliability of the resulting graph by failing the same
set of links (simulating the effects of a link failure in the underlying
network). We perform this process 1, 000 times; in other words, for
each k and p, we construct a k-slice graph with appropriate edges
“failed”, and compute the average reliability for those 1, 000 trials.
Figure 6 shows the reliability curves for Sprint using degree-
based perturbations with Degree-based(0, 3). Adding just one slice
(i.e., increasing k to 2) signiﬁcantly improves reliability; adding
more slices improves reliability further. Figure 6 demonstrates that
even with just a few slices (i.e., 5) and a simple scheme for generat-
ing alternate graphs (i.e., link-weight perturbations), the reliability
of path splicing approaches the reliability of the original underly-
ing network. We also performed a reliability experiment for single
node failures and found similar results.
7.1.2 Interdomain splicing
To evaluate the reliability of interdomain splicing, we used C-
BGP [25], an open-source BGP routing solver. C-BGP takes as
input a policy-annotated graph of ASes and calculates the interdo-
main routes for each AS. For our experiments, we use a 2,500 node
policy-annotated AS graph generated by Dimitropoulos et al. [10].
Once C-BGP computes the interdomain routes, we removed AS
edges at random with probability p. Next, on this modiﬁed AS
graph, we checked for connectivity between random pairs of ASes
in the graph (testing reliability for all pairs is not tractable).
In cases where the default path was disconnected, we checked
to see if a “spliced” path existed for the disconnected AS pair us-
ing up to k choices for the next-hop. We repeated this process 50
times for each value of p and k. Figure 7 shows the average frac-
tion of pairs disconnected for a range of values for p and k. We
observe that adding just one more slice signiﬁcantly improves the
reliability of the AS graph. For the “best possible” case, we evalu-
ated reliability for the base graph (without policy restrictions). The
reliability curve for interdomain splicing that respects policy is so
close to the best possible reliability curve, which demonstrates that
BGP, even with policy restrictions, has near-optimal path diversity
if multiple routes are used. Path splicing can thus exploit this di-
versity without violating AS-level policies or any modiﬁcations to
BGP message format.
7.2 Fast Recovery
In this section, we demonstrate how an end system or a network
node can quickly recover from failures by selecting spliced paths
in the network at random. We evaluate two approaches to recov-
ery: end-system recovery is network-agnostic and relies on the end
system (e.g., user, proxy, edge router) to initiate recovery; network-
based recovery assumes that the node in the network can detect a
failure on an incident link and initiate recovery by diverting trafﬁc
to a different slice. To generate a spliced graph with failures on the
Sprint topology, we use a simulation setup similar to the one for the
reliability experiment in Section 7.1.1. We only show results from
end-system recovery.
For all disconnected source-destination pairs, we evaluate
whether splicing allows pairs of nodes to discover working alter-
nate paths. If splicing can recover the path in ﬁve or fewer trials
(we assume that the end system or node could run these trials ei-
ther in sequence, in parallel, or even in advance), we consider the
path recoverable. As discussed in Section 2, our simulations do not
allow us to explicitly compute recovery time in terms of seconds,
but we can estimate what this time might be from the number of
trials: Because it would take about one round-trip time to estimate
whether a new set of splicing bits resulted in a functional path, we
can estimate the recovery time as the number of trials times the
round-trip time, divided by the number of trials that the system
makes in parallel.
End-system recovery. Figure 8 shows the recovery where the end
system controls the spliced path to the destination. In our exper-
iments, we used a header that allows 20 hops to be spliced. For
a failed path, the new shim header (i.e., the splicing bits) is con-
structed as follows: A coin is tossed for every hop in the shim
header; if the result is a head, a different slice is selected at random
for that hop (i.e., at every hop we switch slices with 0.5 probabil-
ity). We check to see if a failed path can be recovered in fewer than
5 trials. The average number of trials in any case where splicing
could recover from the failure was slightly more than 2. Paths were
on average 1.3 times longer (in terms of path cost) compared to the
shortest path in the “base” topology; the resulting paths typically
used about 50% more hops compared to the original shortest path.
s
r
i
a
p
n
o
i
t
a
n
d
e
t
c
e
n
n
o
c
s
d
i
i
t
s
e
d
-
e
c
r
u
o
s
f
o
n
o
i
t
c
a
r
F
 0.4
 0.3
 0.2
 0.1
 0
 0
k = 1 (no splicing)
k = 3 (recovery)
k = 3 (reliability)
k = 5 (recovery)
k = 5 (reliability)
 0.02
 0.04
 0.08
Probability of link failure (p)
 0.06
 0.1
Figure 8: Recovery using end-system recovery and Sprint topol-
ogy.
s
r
i
a
p
n
o
i
t
d
e
t
c
e
n