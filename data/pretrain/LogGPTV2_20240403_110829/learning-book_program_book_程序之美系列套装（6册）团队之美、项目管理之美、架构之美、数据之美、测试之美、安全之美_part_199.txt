00:10:00
00:20:00
00:30:00
00:40:0000:50:00
00:0010
图9-11：一个现代的GNU/Linux启动期间的类的数量
因此，我们必须为所有的这些类寻找空间。类文件存储在JIVM中一
个位于正常对象堆（即众所周知的“永久区域（Permanent
Generation）”）之外的特定的内存区域。在典型的SunJVM中，永
久区域初始有16MB，最多可以增加到64MB。很显然，100000个类
不能全部载入64MB的堆。我们有两个方法可以解决这个问题。
第一个办法是用命令java-XX：MaxPermSize=128m。虽然这个办法
比较笨拙，但它确实有助于解决这个问题。遗憾的是，这不是根本
的解决办法，因为我们所做的只是延缓问题的发生。最终，我们会
加载足够的类来填满新的空间，我们不能一直增加空间。后一种解
决办法涉及减少加载类的数量。实际上，垃圾收集器不应该清除所
有不用的类吗？对于垃圾收集器来说，类和堆的对象没有实质性的
区别。只要一个类没有活动的引用指向它就可以垃圾收集掉（卸
载）。当然，类的每个实例都对它这个类型的Class对象保持了一个
强引用。所以，对于一个要收集的类，首先必须不存在这个类的活
动实例；其次，没有这个类的其他的引用。因此，如果我们定义如
例9-3所示的定制类加载器，那或许就可以解决这个问题。
例9-3：简单的不保持引用的ClassLoader
1124
---
## Page 1126
public class CustomClassLoader extends Classloader
public Class createClass (String name,byte[]classBytes)
{
return defineClass (name, classBytes, 0,
classBytes.length) :
上
@Override
protected Class findClass (String name) throws
ClassNotFoundException
[
throw new ClassNotFoundException (name) :
例9-3中的ClassLoader不保持它定义的类的引用。每个类都是没有联
系的单例，所以，findClass可以安全地抛出ClassNotFoundException
而其他都保持正常。一旦某个类的单例成为GC的候选，那这个单例
和这个类本身都可以收集掉。这运行得很好，所有的类都加载了。
然而，某个地方出错了。由于未知的原因，永远没有类卸载掉。似
乎在某处有一个对象对我们的类一直保持着引用。
让我们看一下定义一个新类的调用清单：
java.lang.ClassLoader: defineClass (...)
java.lang.ClassLoader: defineClassl (...)
ClassLoader. c:
Java_java_lang_ClassLoader_defineClassl (.)
vm/prims/jvm.cpp: JVM_DefineClassWithSource (..)
1125
---
## Page 1127
vm/prims/jvm.cpp: jvm_define_class_common (.)
vm/memory/systemDictionary.cpp: SystemDictionary:
resolve_from_stream (....)
vm/memory/systemDictionary.cpp: SystemDictionary:
define_instance_class (....)
当你不满足于"因为事实就是这样"的回答时，就会发生这种情况。
我们深入到IVM的内部，找到了这一小段代码：
//Register class just loaded with class loader (placed in
Vector)
//Note we do this before updating the dictionary,as this
can
//fail with an OutOfMemoryError (if it does,we will*not*put
this
//class in the dictionary and will not update the class
hierarchy).
if (k->class_loader () !=NULL)(
methodHandle m (THREAD, UniverSe:
loader_addclass_method () );
JavaValue result (T VoID) ;
JavaCallArguments args (class_loader h) ;
args.push_oop (Handle (THREAD, k->java_mirror () )) ;
JavaCalls: call (&result,m, &args, CHECK) :
这是Java级的对正在处理加载的classloader实例的一个回调：
//The classes loaded by this class loader.The only purpose
of this table
1126
---
## Page 1128
//is to keep the classes from being Gc'ed until the loader
is GC'ed.
private Vector classes=new Vector () :
//Invoked by the VM to record every loaded class with this
loader .
void addClass (Class c) {
classes.addElement (c) :
{
现在我们知道是这个淘气的小对象一直保持着对所有类的引用，从
而阻止了对它们的垃圾收集。遗憾的是，对于这一点，我们无能为
力。好吧，在不违背基本原理的情况下我们可以做的就是在
java.lang包中声明一个类。我们现在知道我们的超类将一直有用地
为我们保持着引用。这对于类卸载来说意味着什么呢？
n个代码块
n个类
CodeBlock
Class
ref:
ref:
Class
ClassLoader
ClassLoader
ref.
Vector
GCRoot
图9-12：类的GC根路径
在图9-12中的GC根路径中，我们可以看到，在由一个classloader加
载的所有类的所有实例都成为GC候选之前，所有的类都会保持加
1127
---
## Page 1129
载。所以，一个活动的代码块可以阻止n个类卸载。这一点都不
好。
有一个简单的办法可以缓解这个问题。没有人说我们必须让n无限
变大。如果我们限制任意加载器加载类的数量，那么，我们就可以
减少类相互制约的机会。在JPC中，我们有一个默认只加载10个类
的定制类加载器。加载第十个类会触发构建一个新加载器，它会用
于下10个类，等等。这个方法意味着任意一个类都只能制约其他10
个类（参见例9-4）。
例9-4：JPC中的ClassLoader实现
private static void newClassLoader ()
L
currentClassLoader=new CustomClassLoader () :
private static class CustomClassLoader extends ClassLoader
private int classesCount;
public CustomClassLoader ()
{
super (CustomClassLoader.class.getClassLoader () ) ;
上
public Class createClass (String name,byte[]b)
if (++classesCount==CLASSES_PER_LOADER)
newClassLoader () ;
return defineClass (name,b, 0, b.length) ;
1128
---
## Page 1130
protected Class findClass (String name) throws
ClassNotFoundException
{
throw new ClassNotFoundException (name) ;
HotSpot代码缓存
在IPC中，当运行加载大量类的复杂工作时，会遇到另一个内存限
制。在SunHotSpotJVM中，即时编译的代码保存在一个名为代码缓
存的非堆（nonheap）区域。不仅JPC会生成许多类，其中的一些类
是为HotSpot准备的，这也很不寻常。这意味着HotSpot的缓存会很
快填满。这正好意味着增加永久保存区的大小也要增加代码缓存的
大小。
CodeBlock替换
现在我们拥有一个已编译、已加载和已实例化的定制代码块实例。
无论如何我们必须把这个块放置到需要的地方。如何做到这一点和
如何执行这些块的最初安排也紧密相关（参见例9-5）。
例9-5：编译安排的装饰模式
public class CodeBlockDecorator implements CodeBlock
{
private CodeBlock target:
public int execute ()
{
makeSchedulingDecision () ;
1129
---
## Page 1131
target.execute （);
public void replaceTarget (CodeBlock replacement)
{
target=replacement;
例9-5演示了装饰代码块如何截取执行调用，然后可以对是否排队进
行编译进行决策。除此之外，我们还有一个方法可以用一个不同的
块实例来替换这个装饰的目标。一旦这个块编译完成，这个装饰就
没用了，所以，理论上我们愿意替换它。这个替换实际上可以非常
容易地实现。通过用如例9-6所示的块代替最初的解析块，我们可以
传播新的块到了调用栈的通知。一旦这个异常达到了合适的标准，
我们可以把对这个装饰的引用直接替换为对已编译块的直接引用。
例9-6：Block替换CodeBlock
public class CodeBlockReplacer implements CodeBlock
{
private CodeBlock target;
public int execute ()
{
throw new CodeBlockReplacementException (target) :
上
static class CodeBlockReplacementException extends
RuntimeException
{
1130