User: 请编写一个利用Python实现的网络端口扫描器，支持自定义IP范围和端口范围，并将扫描结果存储在文件中。
Assistant: 以下是一个基于Python的端口扫描器，支持自定义IP范围和端口范围，并将扫描结果存储在文件中。其中，使用了Python中的socket库来进行网络通信。

```python
import socket

# 定义要扫描的IP范围和端口范围
ip_start = '192.168.1.1'
ip_end = '192.168.1.10'

port_start = 1
port_end = 1024

# 扫描器函数
def port_scanner(ip, port):
    try:
        # 创建socket连接
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(0.1)
        # 尝试连接
        conn = s.connect_ex((ip, port))
        
        # 如果连接成功
        if conn == 0:
            print(ip + ':' + str(port))
            with open('result.txt', 'a') as f:
                f.write(ip + ':' + str(port) + '\n')
        # 关闭连接
        s.close()
    except:
        pass

# 循环扫描范围内的IP和端口
for i in range(int(ip_start.split('.')[3]), int(ip_end.split('.')[3])+1):
    for j in range(port_start, port_end+1):
        ip = ip_start.split('.')
        ip[3] = str(i)
        ip = '.'.join(ip)
        port_scanner(ip, j)
```

以上代码中，首先定义了要扫描的IP范围和端口范围。然后，定义了`port_scanner`函数，该函数尝试连接指定IP和端口，如果连接成功，则输出连接成功的IP和端口，并将结果存储在文件`result.txt`中。

接下来，使用两个循环遍历IP和端口范围，依次调用`port_scanner`函数进行扫描。其中，IP地址是通过将`ip_start`和`ip_end`中的第四段逐渐递增来构造的。

这样，我们就可以通过该端口扫描器来扫描指定IP范围和端口范围内的开放端口，并将扫描结果保存在文件中。