---
title: PDM
date: 20211217
author: Lyz
---
[PDM](https://pdm.fming.dev/) is a modern Python package manager with
[PEP 582](https://www.python.org/dev/peps/pep-0582/) support. It installs and
manages packages in a similar way to npm that doesn't need to create a
virtualenv at all!
# [Features](https://pdm.fming.dev/#feature-highlights)
- PEP 582 local package installer and runner, no virtualenv involved at all.
- Simple and relatively fast dependency resolver, mainly for large binary
  distributions.
- A PEP 517 build backend.
- PEP 621 project metadata.
# [Installation](https://pdm.fming.dev/#installation)
## [Recommended installation method](https://pdm.fming.dev/#recommended-installation-method)
```bash
curl -sSL https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py | python3 -
```
For security reasons, you should verify the checksum. The sha256 checksum is:
`70ac95c53830ff41d700051c9caebd83b2b85b5d6066e8f853006f9f07293ff0`, if it
doesn't match
[check if there is a newer version](https://pdm.fming.dev/#recommended-installation-method).
## Other methods
```bash
pip install --user pdm
```
## [Enable PEP 582 globally](https://pdm.fming.dev/#enable-pep-582-globally)
To make the Python interpreters aware of PEP 582 packages, one need to add the
`pdm/pep582/sitecustomize.py` to the Python library search path.
```bash
pdm --pep582 zsh >> ~/.zshrc
```
## [Use it with the IDE](https://pdm.fming.dev/#use-with-ide)
Now there are not built-in support or plugins for PEP 582 in most IDEs, you have
to configure your tools manually. They say how to configure Pycharm and VSCode,
but there's
[still no instructions for vim](https://github.com/pdm-project/pdm/issues/804).
PDM will write and store project-wide configurations in `.pdm.toml` and you are
recommended to add following lines in the `.gitignore`:
```
.pdm.toml
__pypackages__/
```
# [Usage](https://pdm.fming.dev/usage/dependency/)
PDM provides a bunch of handful commands to help manage your project and
dependencies.
## [Initialize a project](https://pdm.fming.dev/usage/dependency/#initialize-a-project)
```bash
pdm init
```
Answer several questions asked by PDM and a `pyproject.toml` will be created for
you in the project root:
```toml
[project]
name = "pdm-test"
version = "0.0.0"
description = ""
requires-python = ">=3.7"
dependencies = []
[[project.authors]]
name = "Frost Ming"
email = "PI:EMAIL"
[project.license]
text = "MIT"
```
If `pyproject.toml` is already present, it will be updated with the metadata
following the [PEP 621](https://www.python.org/dev/peps/pep-0621/)
specification.
### [Import project metadata from existing project files](https://pdm.fming.dev/usage/project/#import-project-metadata-from-existing-project-files)
If you are already other package manager tools like `Pipenv` or `Poetry`, it is
easy to migrate to PDM. PDM provides `import` command so that you don't have to
initialize the project manually, it now supports:
1. Pipenv's `Pipfile`
1. Poetry's section in `pyproject.toml`
1. Flit's section in `pyproject.toml`
1. `requirements.txt` format used by Pip
Also, when you are executing `pdm init` or `pdm install`, PDM can auto-detect
possible files to import if your PDM project has not been initialized yet.
## [Adding dependencies](https://pdm.fming.dev/usage/dependency/#add-dependencies)
`pdm add` can be followed by one or several dependencies, and the dependency
specification is described in
[PEP 508](https://www.python.org/dev/peps/pep-0508/), you have a summary of the
possibilities [here](#dependency-specification).
```bash
pdm add requests
```
PDM also allows extra dependency groups by providing `-G/--group ` option,
and those dependencies will go to `[project.optional-dependencies.]` table
in the project file, respectively.
After that, dependencies and sub-dependencies will be resolved properly and
installed for you, you can view `pdm.lock` to see the resolved result of all
dependencies.
### [Add local dependencies](https://pdm.fming.dev/usage/dependency/#add-local-dependencies)
Local packages can be added with their paths:
```bash
pdm add ./sub-package
```
Local packages can be installed in editable mode (just like
`pip install -e ` would) using
`pdm add -e/--editable `.
#### [Add development only dependencies](https://pdm.fming.dev/usage/dependency/#add-development-only-dependencies)
PDM also supports defining groups of dependencies that are useful for
development, e.g. some for testing and others for linting. We usually don't want
these dependencies appear in the distribution's metadata so using
optional-dependencies is probably not a good idea. We can define them as
development dependencies:
```bash
pdm add -d pytest
```
This will result in a `pyproject.toml` as following:
```toml
[tool.pdm.dev-dependencies]
test = [ "pytest",]
```
#### [Save version specifiers](https://pdm.fming.dev/usage/dependency/#save-version-specifiers)
If the package is given without a version specifier like `pdm add requests`. PDM
provides three different behaviors of what version specifier is saved for the
dependency, which is given by `--save-`(Assume `2.21.0` is the latest
version that can be found for the dependency):
- `minimum`: Save the minimum version specifier: `>=2.21.0` (default).
- `compatible`: Save the compatible version specifier:
  `>=2.21.0,` option:
- `reuse`: Keep all locked dependencies except for those given in the command
  line (default).
- `eager`: Try to lock a newer version of the packages in command line and their
  recursive sub-dependencies and keep other dependencies as they are.
### [Update packages to the versions that break the version specifiers](https://pdm.fming.dev/usage/dependency/#update-packages-to-the-versions-that-break-the-version-specifiers)
One can give `-u/--unconstrained` to tell PDM to ignore the version specifiers
in the `pyproject.toml`. This works similarly to the `yarn upgrade -L/--latest`
command. Besides, `pdm update` also supports the `--pre/--prerelease` option.
## [Remove existing dependencies](https://pdm.fming.dev/usage/dependency/#remove-existing-dependencies)
To remove existing dependencies from project file and the library directory:
```console
# Remove requests from the default dependencies
pdm remove requests
# Remove h11 from the 'web' group of optional-dependencies
pdm remove -G web h11
# Remove pytest-cov from the `test` group of dev-dependencies
pdm remove -d pytest-cov
```
## [Install the packages pinned in lock file](https://pdm.fming.dev/usage/dependency/#install-the-packages-pinned-in-lock-file)
There are two similar commands to do this job with a slight difference:
- `pdm install` will check the lock file and relock if it mismatches with
  project file, then install.
- `pdm sync` installs dependencies in the lock file and will error out if it
  doesn't exist. Besides, `pdm sync` can also remove unneeded packages if
  `--clean` option is given.
**All** development dependencies are included as long as `--prod` is not passed
and `-G` doesn't specify any dev groups.
Besides, if you don't want the root project to be installed, add `--no-self`
option, and `--no-editable` can be used when you want all packages to be
installed in non-editable versions. With `--no-editable` turn on, you can safely
archive the whole `__pypackages__` and copy it to the target environment for
deployment.
## [Show what packages are installed](https://pdm.fming.dev/usage/dependency/#show-what-packages-are-installed)
Similar to `pip list`, you can list all packages installed in the packages
directory:
```console
pdm list
```
Or show a dependency graph by:
```
$ pdm list --graph
tempenv 0.0.0
└── click 7.0 [ required: =6.7 ]
black 19.10b0
├── appdirs 1.4.3 [ required: Any ]
├── attrs 19.3.0 [ required: >=18.1.0 ]
├── click 7.0 [ required: >=6.5 ]
├── pathspec 0.7.0 [ required: =0.6 ]
├── regex 2020.2.20 [ required: Any ]
├── toml 0.10.0 [ required: >=0.9.4 ]
└── typed-ast 1.4.1 [ required: >=1.4.0 ]
bump2version 1.0.0
```
## [Solve the locking failure](https://pdm.fming.dev/usage/dependency/#solve-the-locking-failure)
If PDM is not able to find a resolution to satisfy the requirements, it will
raise an error. For example,
```bash
pdm django==3.1.4 "asgiref=3.2.10 (from )
To fix this, you could loosen the dependency version constraints in pyproject.toml. If that is not possible, you could also override the resolved version in [tool.pdm.overrides] table.
```
You can either change to a lower version of `django` or remove the upper bound
of `asgiref`. But if it is not eligible for your project, you can tell PDM to
forcely resolve `asgiref` to a specific version by adding the following lines to
`pyproject.toml`:
```toml
[tool.pdm.overrides]
asgiref = ">=3.2.10"
```
Each entry of that table is a package name with the wanted version. The value
can also be a URL to a file or a VCS repository like `git+https://...`. On
reading this, PDM will pin `PI:EMAIL` or the greater version in the lock
file no matter whether there is any other resolution available.
Note: By using `[tool.pdm.overrides]` setting, you are at your own risk of any
incompatibilities from that resolution. It can only be used if there is no valid
resolution for your requirements and you know the specific version works. Most
of the time, you can just add any transient constraints to the `dependencies`
array.
## [Solve circular dependencies](https://pdm.fming.dev/usage/dependency/#solve-the-locking-failure)
Sometimes `pdm` is not able to
[locate the best package combination](https://github.com/pdm-project/pdm/issues/1354),
or it does too many loops, so to help it you can update your version constrains
so that it has the minimum number of candidates.
To solve circular dependencies we first need to locate what are the conflicting
packages,
[`pdm` doesn't make it easy to detect them](https://github.com/pdm-project/pdm/issues/1354).
To do that first try to update each of your groups independently with
`pdm update -G group_name`. If that doesn't work remove from your
`pyproject.toml` groups of dependencies until the command works and add back one
group by group until you detect the ones that fail.
Also it's useful to reduce the number of possibilities of versions of each
dependency to make things easier to `pdm`. Locate all the outdated packages by
doing `pdm show` on each package until
[this issue is solved](https://github.com/pdm-project/pdm/issues/1356) and run
`pdm update {package} --unconstrained` for each of them. If you're already on
the latest version, update your `pyproject.toml` to match the latest state.
Once you have everything to the latest compatible version, you can try to
upgrade the rest of the packages one by one to the latest with
`--unconstrained`.
In the process of doing these steps you'll see some conflicts in the
dependencies that can be manually solved by preventing those versions to be
installed or maybe changing the `python-requires`, although this should be done
as the last resource.
It also helps to run `pdm update` with the `-v` flag, that way you see which are
the candidates that are rejected, and you can put the constrain you want. For
example, I was seeing the next traceback:
```
pdm.termui: Conflicts detected:
  pyflakes>=3.0.0 (from )
  pyflakes=2.4.0 (from )
```
So I added a new dependency to pin it: