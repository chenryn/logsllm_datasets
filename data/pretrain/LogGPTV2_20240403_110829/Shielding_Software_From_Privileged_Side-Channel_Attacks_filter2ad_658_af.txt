### Table 8: GnuPG Signing Results (Time in milliseconds)
| File Size (KB) | Apparition |
|---------------|------------|
| 108.0         | 25.2       |
| 203.6         | 24.9       |
| 394.6         | 25.5       |
| 776.6         | 25.1       |
| 1,553.2       | 25.4       |
| 3,106.4       | 25.6       |
| 6,212.8       | 27.0       |
| 12,425.6      | 28.4       |
| 24,851.2      | 31.5       |
| 49,702.4      | 37.4       |
| 99,404.8      | 49.4       |
| 198,809.6     | 73.6       |
| 397,619.2     | 121.1      |
| 795,238.4     | 217.0      |
| 1,590,476.8   | 407.3      |
| 3,180,953.6   | 789.2      |

**USENIX Association**
27th USENIX Security Symposium
1453

### Bandwidth Normalized to Native
| 0.50 | 0.60 | 0.70 | 0.80 | 0.90 | 1.00 | 1.10 | 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1,024 | 2,048 | 4,096 | 8,192 | 16,384 | 32,768 | 65,536 | 131,072 | 262,144 | 524,288 |
|-----|------|------|------|------|------|------|---|---|---|---|----|----|----|----|----|----|-------|-------|-------|-------|--------|---------|---------|---------|---------|---------|

### Page Allocation Defenses
The overhead observed is due to our page allocation defenses, which disable demand paging of ghost memory. `malloc()` attempts to fulfill allocation requests by allocating memory chunks with 4 MB alignment from the OS. This alignment constraint may cause `malloc()` to map a larger virtual memory region for the heap and return a pointer to an aligned 4 MB block within it. Although GnuPG only uses the aligned portion of memory, the page table defenses still allocate and map physical memory for the remaining unaligned 8 MB portion, incurring a 14 ms overhead. As the file size increases, this overhead becomes negligible, as shown in Table 8. The standard deviation is 3% on average.

### Ghosting Clang
As the fourth column of Table 7 shows, the page table defenses do not add any overhead to Clang relative to Opt-VG. This indicates that Clang uses most of the heap memory it allocates. Therefore, allocating and mapping physical memory at allocation time rather than on demand incurs no overhead.

### 8.4 LLC Side-Channel Defenses
We compared the performance of various cache partition sizes with the baseline where the ghosting application, the kernel, and the Apparition VM can all use the entire LLC. Our results indicate that the Apparition VM needs only 2 LLC ways to avoid performance degradation. We experimentally determined that assigning 12, 2, and 2 LLC ways to the ghosting application, the kernel, and the Apparition VM, respectively, best achieves performance similar to the baseline. This provides ghosting applications with the maximum number of LLC ways possible. While we use static partitions, we could leverage dynamic cache partitioning techniques, such as SecDCP [70], to improve performance.

#### Ghosting RandomAccess
We used the RandomAccess microbenchmark in Section 8.1 to evaluate the impact of LLC partitioning when an application’s working set is small enough to fit in the LLC but exceeds the capacity of the assigned partition. Since the 8 MB array is larger than the capacity of the 12-way partition of the 16-way 8 MB LLC, LLC partitioning increases the overhead of Opt-VG from 1.28× to 2.09× with a 3% standard deviation.

#### Ghosting Bzip2
We enabled ghost memory for Bzip2 for all systems except the native FreeBSD kernel. Table 7 shows the overhead of LLC partitioning on Bzip2 compressing a 32 MB file as described in Section 8.1. LLC partitioning does not affect the performance of Bzip2, indicating that the capacity of the 12-way LLC partition is sufficient for the cache lines frequently accessed by Bzip2. The standard deviation is 0%.

#### Ghosting OpenSSH Client
We evaluated the overhead of LLC partitioning on OpenSSH client CPU time and bandwidth when transferring files of varying sizes. Figure 6 shows the file transfer CPU time normalized to the native FreeBSD 9.0, averaged over 20 rounds of execution. Opt-VG-LLCPart-ghosting (Opt-VG with LLC partitioning enabled) is 1.18× (on average with a worst case of 1.27×) across all file sizes (where Opt-VG is 1.09× on average) when normalized to FreeBSD. The overhead of LLC partitioning mainly comes from the LLC partition switches among the ghosting application, the kernel, and the Apparition VM in the runtime, which slows down the performance by 1.16× on average across all file sizes. The standard deviation is 1% on average across all file sizes.

Figure 7 illustrates the performance impact of LLC partitioning on client file transfer bandwidth. The results are averaged over 20 rounds of execution. Opt-VG-LLCPart-ghosting reduces bandwidth to 0.91 that of native FreeBSD on average across all file sizes with a worst case of 0.85 (compared to 0.92 for Opt-VG). The standard deviation ranges from 0% to 1% across all file sizes.

#### Ghosting GnuPG
We enabled ghost memory for GnuPG for all systems except the native FreeBSD kernel. Table 8 shows the performance impact of LLC partitioning on GnuPG as described in Section 8.1. For 1 KB to 4 MB files, LLC partitioning incurs a 3 ms to 4 ms overhead, which is the overhead for maintaining (i.e., switching among) different LLC partitions. For 8 MB to 32 MB files, although their sizes exceed the capacity of the 6 MB ghost memory LLC partition and the absolute additional execution time incurred by LLC partitioning is longer, the overhead to the overall performance is negligible. The execution time of Opt-VG-LLCPart for signing 8 MB to 32 MB files is 1.05× (Opt-VG is 1.02×) that for native FreeBSD on average. The standard deviation is 1.2% on average across all file sizes.

#### Ghosting Clang
Tables 7 and 9 show that our LLC side-channel defenses incur a negligible 3% overhead when assigning 12, 2, and 2 LLC ways to the ghosting Clang, the kernel, and the Apparition VM, respectively. However, when we shrink the number of LLC ways assigned to the ghosting Clang to 6, 4, and 2 while the LLC partition sizes of the kernel and the Apparition VM remain the same, we observe that the execution time for Opt-VG-LLCPart is as much as 1.1×, 1.3×, and 1.6× that of native FreeBSD. This is because the working set of Clang exceeds the capacity of the cache partition.

We also evaluated the overhead of LLC partitioning when executing more ghosting applications than the processor has partitions. As described in Section 7, our prototype shares a single partition among multiple ghosting applications and flushes the cache on context switches between two ghosting applications. We ran two ghosting Clang processes in parallel in the background, where each compiles either `gcc-smaller.c` or `gcc-pp.c` from SPEC CPU 2017 [5]. On native FreeBSD, it takes 57.3 seconds to compile `gcc-smaller.c` in this scenario; compilation on Opt-VG-LLCPart takes 1.06× (1.03× for Opt-VG) the time on native FreeBSD, with a 0.4% standard deviation.

### 8.5 Evaluation of Combined Defenses
We now evaluate the combined overheads of our page table and LLC side-channel defenses using RandomAccess, Bzip2, the OpenSSH client, GnuPG, and Clang.

RandomAccess executes in 2.11× the time taken by native FreeBSD when executing on Apparition, as Table 7 shows; the standard deviation is 2%. The overhead mainly comes from the mitigations to LLC side-channel attacks. Table 7 also shows that Apparition with all defenses enabled on Bzip2 only adds 5% overhead (compared to Opt-VG’s 4%) relative to native FreeBSD with 0% standard deviation.

Figure 6 shows the performance impact of all defenses on the OpenSSH client file transfer CPU time. The overhead of Apparition ranges from 16% to 33% relative to native FreeBSD, with a 1% standard deviation across all file sizes, which is a combination of the slowdown incurred by page table and LLC side-channel defenses in addition to the overhead of Opt-VG. Figure 7 illustrates the performance impact of all defenses on the client file transfer rate. Apparition reduces the file transfer rate to 0.91 that of native FreeBSD on average across all file sizes with a worst case of 0.85 (compared to 0.92 for Opt-VG).

Table 8 shows that Apparition incurs a constant overhead of around 16 ms relative to Opt-VG on GnuPG across 1 KB to 4 MB files, 14 ms of which comes from the page table side-channel with the remaining from the LLC partitioning defenses. As Table 8 shows, the overhead of both defenses becomes negligible as the file size increases. The standard deviation is 3.0% on average across all file sizes.

Table 7 shows that the ghosting Clang compiler incurs 5% overhead relative to native FreeBSD with a standard deviation of 2% when running on Apparition.

### 9 Related Work
Recent work removes commodity OS kernels from the TCB. SP3 [75], Overshadow [20], InkTag [40], CHAOS [18], and AppShield [21] build on commercial hypervisors and protect entire applications by providing an encrypted view of application memory to the OS and detect corruption of physical memory frames by the OS using digital signatures. Virtual Ghost [26] uses compiler instrumentation to insert run-time checks and can also protect entire applications. Hardware such as Intel SGX [23, 42] and AMD SEV [31, 39] protect unprivileged applications and virtual machines from malicious privileged code such as the OS and hypervisors. Haven [12] uses Intel SGX [23, 42] to isolate entire unmodified legacy applications from the OS. All of these shielding systems are vulnerable to side-channel attacks.

Page table side-channel attacks can steal secret application data on Intel SGX and InkTag [63, 67, 73]. T-SGX [62] transforms SGX applications to thwart page fault side channels by executing computations within Intel TSX transactions. TSX aborts transactions upon exceptions and interrupts, ensuring no page fault sequence leaks to the OS. However, its overhead ranges from 4% to 118% with a geometric mean of 50%. DÉJÀ VU [19] builds a software reference clock protected by Intel TSX transactions within SGX enclaves. It detects privileged side-channel attacks that trigger frequent traps and interrupts and aborts the application if an attack is detected.

Cache side-channel attacks are a known problem [36–38, 43, 52, 58, 76, 79]. Several defenses partition the cache but generally assume an unprivileged attacker, such as an unprivileged process [70, 71, 80] or a virtual machine attacking its neighbors [35, 44, 50, 61, 80]. These defenses cannot mitigate attacks by privileged code. Still, we can leverage techniques such as dynamic partitioning in SecDCP [70] to improve the performance of our cache partitioning scheme but, unlike SecDCP, ensure that the OS does not reconfigure or disable the partitioning.

Other mechanisms can mitigate cache side-channel attacks, but they also assume unprivileged attackers. SHARP [74] alters a shared cache’s replacement policy to prevent the attacker from learning the victim’s memory access patterns by cache evictions. It prioritizes evicting LLC cache lines that are not in any private L1 cache and the LLC cache lines of the current process. However, a compromised OS can still evict the cache lines of the victim as it can run on the victim’s behalf. The Random Fill Cache Architecture [51] breaks the correlation between demand memory access and L1 cache fills to defend against reuse-based side-channel attacks. Wang and Lee [71] proposed that memory-to-cache mappings in L1 cache be dynamically randomized. Both approaches focus on L1 cache and may incur high performance overhead on much larger LLCs. Additionally, all three approaches require hardware modifications. FuzzyTime [41] and TimeWarp [53] introduce noise to the system clock to disrupt attackers’ time measurements but hurt programs needing a high-precision clock.

Some approaches detect, rather than prevent, cache side-channel attacks. Chiappetta et al. [22] detect cache side channels by finding correlations between the LLC accesses of the attacker and the victim. HexPADS [59] detects cache side channels based on the frequent cache misses of the attacker. However, both approaches tend to suffer from high false positives and false negatives.

A final approach is to design hardware without side channels and formally verify that they are correct. SecVerilog [77] and Sapper [48] present new hardware description languages with information flow tracking that processor designers can use to design processors without timing-channel exploits. Sanctum [24] is an isolation framework similar to Intel SGX that mitigates page table and cache side-channel attacks by maintaining a per-enclave page table in addition to the traditional page table managed by the OS with extra registers and logic. It also isolates the enclaves in both DRAM and cache using page coloring maintained by the TCB. However, these defenses require hardware modifications.

### 10 Conclusions
Despite defenses such as InkTag [40], Virtual Ghost [26], and Haven [12], compromised OS kernels can steal application data via side-channel attacks. We present Apparition, an enhanced Virtual Ghost system that protects applications from page table and LLC side-channel attacks. Apparition improves the performance of the original Virtual Ghost by up to 2× by eliminating unnecessary serializing instructions and by utilizing Intel MPX. Apparition also enhances Virtual Ghost’s memory protection features to thwart page table side-channel attacks and combines its memory protection features with Intel’s CAT hardware to defeat LLC side-channel attacks. Apparition requires no changes to the processor or OS kernels running on SVA. We compared Apparition’s performance to Virtual Ghost enhanced with our optimizations; it adds 1% to 18% overhead (relative to native FreeBSD) to most of the real-world applications we tested but adds up to 86% additional overhead to GnuPG.

### Acknowledgements
The authors thank the anonymous reviewers for their insightful feedback. This work was supported by NSF Awards CNS-1319353, CNS-1618497, CNS-1618588, CNS-1629770, and CNS-1652280.

### References
[1] clang: a C language family frontend for LLVM. https://clang.llvm.org.
[2] ARM Architecture Reference Manual: ARMv7-A and ARMv7-R Edition. 2011.
[3] ARM Architecture Reference Manual: ARMv8, for ARMv8-A Architecture Profile. 2014.
[4] Intel 64 and IA-32 Architectures Software Developer’s Manual, vol. 3. Intel, September 2016.
[5] SPEC CPU R 2017. https://www.spec.org/cpu2017, 2017.
[6] Intel analysis of speculative execution side channels. Tech. Rep. 336983-003, May 2018.
[7] ABADI, M., BUDIU, M., ERLINGSSON, U., AND LIGATTI, J. Control-flow integrity principles, implementations, and applications. ACM Transactions on Information Systems Security 13